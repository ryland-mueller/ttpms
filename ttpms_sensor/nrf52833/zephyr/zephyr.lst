
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	20006b40 	.word	0x20006b40
   4:	0001669d 	.word	0x0001669d

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	0002428d 	.word	0x0002428d
   c:	00016655 	.word	0x00016655
  10:	00016655 	.word	0x00016655
	(void)memset(res + 3, 0, 13);
  14:	00016655 	.word	0x00016655
  18:	00016655 	.word	0x00016655
	...

	err = internal_encrypt_le(irk, res, res);
	if (err) {
  2c:	00015929 	.word	0x00015929
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
  30:	00016655 	.word	0x00016655
  34:	00000000 	.word	0x00000000
  38:	000158d1 	.word	0x000158d1
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  3c:	00016655 	.word	0x00016655

00000040 <_irq_vector_table>:
  40:	00015a15 00027511 00015a15 00015a15     .Z...u...Z...Z..
  50:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  60:	000274d9 00015a15 00015a15 000274f7     .t...Z...Z...t..
  70:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  80:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  90:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  a0:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  b0:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  c0:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  d0:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  e0:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..
  f0:	00015a15 00015a15 00015a15 00015a15     .Z...Z...Z...Z..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_FLASH_SIZE+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_FLASH_SIZE+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_FLASH_SIZE+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_FLASH_SIZE+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_FLASH_SIZE+0x14c>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_FLASH_SIZE+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_FLASH_SIZE+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_FLASH_SIZE+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_FLASH_SIZE+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_FLASH_SIZE+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_FLASH_SIZE+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_FLASH_SIZE+0x15a>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_FLASH_SIZE+0x11e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_FLASH_SIZE+0x13c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_FLASH_SIZE+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_DEVICE_APPEARANCE+0x8a>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_BT_DEVICE_APPEARANCE+0x5a>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_RX_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__data_size+0x45>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__data_size+0x4f>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_BT_DEVICE_APPEARANCE+0x4>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_RX_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_d2f>:
     a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a44:	bf24      	itt	cs
     a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a4e:	d90d      	bls.n	a6c <__aeabi_d2f+0x30>
     a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a64:	bf08      	it	eq
     a66:	f020 0001 	biceq.w	r0, r0, #1
     a6a:	4770      	bx	lr
     a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a70:	d121      	bne.n	ab6 <__aeabi_d2f+0x7a>
     a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a76:	bfbc      	itt	lt
     a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a7c:	4770      	bxlt	lr
     a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a86:	f1c2 0218 	rsb	r2, r2, #24
     a8a:	f1c2 0c20 	rsb	ip, r2, #32
     a8e:	fa10 f30c 	lsls.w	r3, r0, ip
     a92:	fa20 f002 	lsr.w	r0, r0, r2
     a96:	bf18      	it	ne
     a98:	f040 0001 	orrne.w	r0, r0, #1
     a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
     aa8:	ea40 000c 	orr.w	r0, r0, ip
     aac:	fa23 f302 	lsr.w	r3, r3, r2
     ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ab4:	e7cc      	b.n	a50 <__aeabi_d2f+0x14>
     ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     aba:	d107      	bne.n	acc <__aeabi_d2f+0x90>
     abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ac0:	bf1e      	ittt	ne
     ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     aca:	4770      	bxne	lr
     acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad8:	4770      	bx	lr
     ada:	bf00      	nop

00000adc <__aeabi_frsub>:
     adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     ae0:	e002      	b.n	ae8 <__addsf3>
     ae2:	bf00      	nop

00000ae4 <__aeabi_fsub>:
     ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000ae8 <__addsf3>:
     ae8:	0042      	lsls	r2, r0, #1
     aea:	bf1f      	itttt	ne
     aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     af0:	ea92 0f03 	teqne	r2, r3
     af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     afc:	d06a      	beq.n	bd4 <__addsf3+0xec>
     afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b06:	bfc1      	itttt	gt
     b08:	18d2      	addgt	r2, r2, r3
     b0a:	4041      	eorgt	r1, r0
     b0c:	4048      	eorgt	r0, r1
     b0e:	4041      	eorgt	r1, r0
     b10:	bfb8      	it	lt
     b12:	425b      	neglt	r3, r3
     b14:	2b19      	cmp	r3, #25
     b16:	bf88      	it	hi
     b18:	4770      	bxhi	lr
     b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b26:	bf18      	it	ne
     b28:	4240      	negne	r0, r0
     b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b36:	bf18      	it	ne
     b38:	4249      	negne	r1, r1
     b3a:	ea92 0f03 	teq	r2, r3
     b3e:	d03f      	beq.n	bc0 <__addsf3+0xd8>
     b40:	f1a2 0201 	sub.w	r2, r2, #1
     b44:	fa41 fc03 	asr.w	ip, r1, r3
     b48:	eb10 000c 	adds.w	r0, r0, ip
     b4c:	f1c3 0320 	rsb	r3, r3, #32
     b50:	fa01 f103 	lsl.w	r1, r1, r3
     b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b58:	d502      	bpl.n	b60 <__addsf3+0x78>
     b5a:	4249      	negs	r1, r1
     b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b64:	d313      	bcc.n	b8e <__addsf3+0xa6>
     b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b6a:	d306      	bcc.n	b7a <__addsf3+0x92>
     b6c:	0840      	lsrs	r0, r0, #1
     b6e:	ea4f 0131 	mov.w	r1, r1, rrx
     b72:	f102 0201 	add.w	r2, r2, #1
     b76:	2afe      	cmp	r2, #254	; 0xfe
     b78:	d251      	bcs.n	c1e <__addsf3+0x136>
     b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b82:	bf08      	it	eq
     b84:	f020 0001 	biceq.w	r0, r0, #1
     b88:	ea40 0003 	orr.w	r0, r0, r3
     b8c:	4770      	bx	lr
     b8e:	0049      	lsls	r1, r1, #1
     b90:	eb40 0000 	adc.w	r0, r0, r0
     b94:	3a01      	subs	r2, #1
     b96:	bf28      	it	cs
     b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b9c:	d2ed      	bcs.n	b7a <__addsf3+0x92>
     b9e:	fab0 fc80 	clz	ip, r0
     ba2:	f1ac 0c08 	sub.w	ip, ip, #8
     ba6:	ebb2 020c 	subs.w	r2, r2, ip
     baa:	fa00 f00c 	lsl.w	r0, r0, ip
     bae:	bfaa      	itet	ge
     bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bb4:	4252      	neglt	r2, r2
     bb6:	4318      	orrge	r0, r3
     bb8:	bfbc      	itt	lt
     bba:	40d0      	lsrlt	r0, r2
     bbc:	4318      	orrlt	r0, r3
     bbe:	4770      	bx	lr
     bc0:	f092 0f00 	teq	r2, #0
     bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     bc8:	bf06      	itte	eq
     bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     bce:	3201      	addeq	r2, #1
     bd0:	3b01      	subne	r3, #1
     bd2:	e7b5      	b.n	b40 <__addsf3+0x58>
     bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bdc:	bf18      	it	ne
     bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     be2:	d021      	beq.n	c28 <__addsf3+0x140>
     be4:	ea92 0f03 	teq	r2, r3
     be8:	d004      	beq.n	bf4 <__addsf3+0x10c>
     bea:	f092 0f00 	teq	r2, #0
     bee:	bf08      	it	eq
     bf0:	4608      	moveq	r0, r1
     bf2:	4770      	bx	lr
     bf4:	ea90 0f01 	teq	r0, r1
     bf8:	bf1c      	itt	ne
     bfa:	2000      	movne	r0, #0
     bfc:	4770      	bxne	lr
     bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c02:	d104      	bne.n	c0e <__addsf3+0x126>
     c04:	0040      	lsls	r0, r0, #1
     c06:	bf28      	it	cs
     c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c0c:	4770      	bx	lr
     c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c12:	bf3c      	itt	cc
     c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c18:	4770      	bxcc	lr
     c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c26:	4770      	bx	lr
     c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c2c:	bf16      	itet	ne
     c2e:	4608      	movne	r0, r1
     c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c34:	4601      	movne	r1, r0
     c36:	0242      	lsls	r2, r0, #9
     c38:	bf06      	itte	eq
     c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c3e:	ea90 0f01 	teqeq	r0, r1
     c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c46:	4770      	bx	lr

00000c48 <__aeabi_ui2f>:
     c48:	f04f 0300 	mov.w	r3, #0
     c4c:	e004      	b.n	c58 <__aeabi_i2f+0x8>
     c4e:	bf00      	nop

00000c50 <__aeabi_i2f>:
     c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c54:	bf48      	it	mi
     c56:	4240      	negmi	r0, r0
     c58:	ea5f 0c00 	movs.w	ip, r0
     c5c:	bf08      	it	eq
     c5e:	4770      	bxeq	lr
     c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c64:	4601      	mov	r1, r0
     c66:	f04f 0000 	mov.w	r0, #0
     c6a:	e01c      	b.n	ca6 <__aeabi_l2f+0x2a>

00000c6c <__aeabi_ul2f>:
     c6c:	ea50 0201 	orrs.w	r2, r0, r1
     c70:	bf08      	it	eq
     c72:	4770      	bxeq	lr
     c74:	f04f 0300 	mov.w	r3, #0
     c78:	e00a      	b.n	c90 <__aeabi_l2f+0x14>
     c7a:	bf00      	nop

00000c7c <__aeabi_l2f>:
     c7c:	ea50 0201 	orrs.w	r2, r0, r1
     c80:	bf08      	it	eq
     c82:	4770      	bxeq	lr
     c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     c88:	d502      	bpl.n	c90 <__aeabi_l2f+0x14>
     c8a:	4240      	negs	r0, r0
     c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c90:	ea5f 0c01 	movs.w	ip, r1
     c94:	bf02      	ittt	eq
     c96:	4684      	moveq	ip, r0
     c98:	4601      	moveq	r1, r0
     c9a:	2000      	moveq	r0, #0
     c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     ca0:	bf08      	it	eq
     ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     caa:	fabc f28c 	clz	r2, ip
     cae:	3a08      	subs	r2, #8
     cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     cb4:	db10      	blt.n	cd8 <__aeabi_l2f+0x5c>
     cb6:	fa01 fc02 	lsl.w	ip, r1, r2
     cba:	4463      	add	r3, ip
     cbc:	fa00 fc02 	lsl.w	ip, r0, r2
     cc0:	f1c2 0220 	rsb	r2, r2, #32
     cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     cc8:	fa20 f202 	lsr.w	r2, r0, r2
     ccc:	eb43 0002 	adc.w	r0, r3, r2
     cd0:	bf08      	it	eq
     cd2:	f020 0001 	biceq.w	r0, r0, #1
     cd6:	4770      	bx	lr
     cd8:	f102 0220 	add.w	r2, r2, #32
     cdc:	fa01 fc02 	lsl.w	ip, r1, r2
     ce0:	f1c2 0220 	rsb	r2, r2, #32
     ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     ce8:	fa21 f202 	lsr.w	r2, r1, r2
     cec:	eb43 0002 	adc.w	r0, r3, r2
     cf0:	bf08      	it	eq
     cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     cf6:	4770      	bx	lr

00000cf8 <__aeabi_fmul>:
     cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d00:	bf1e      	ittt	ne
     d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d06:	ea92 0f0c 	teqne	r2, ip
     d0a:	ea93 0f0c 	teqne	r3, ip
     d0e:	d06f      	beq.n	df0 <__aeabi_fmul+0xf8>
     d10:	441a      	add	r2, r3
     d12:	ea80 0c01 	eor.w	ip, r0, r1
     d16:	0240      	lsls	r0, r0, #9
     d18:	bf18      	it	ne
     d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d1e:	d01e      	beq.n	d5e <__aeabi_fmul+0x66>
     d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d2c:	fba0 3101 	umull	r3, r1, r0, r1
     d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d38:	bf3e      	ittt	cc
     d3a:	0049      	lslcc	r1, r1, #1
     d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d40:	005b      	lslcc	r3, r3, #1
     d42:	ea40 0001 	orr.w	r0, r0, r1
     d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d4a:	2afd      	cmp	r2, #253	; 0xfd
     d4c:	d81d      	bhi.n	d8a <__aeabi_fmul+0x92>
     d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d56:	bf08      	it	eq
     d58:	f020 0001 	biceq.w	r0, r0, #1
     d5c:	4770      	bx	lr
     d5e:	f090 0f00 	teq	r0, #0
     d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d66:	bf08      	it	eq
     d68:	0249      	lsleq	r1, r1, #9
     d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d72:	3a7f      	subs	r2, #127	; 0x7f
     d74:	bfc2      	ittt	gt
     d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d7e:	4770      	bxgt	lr
     d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d84:	f04f 0300 	mov.w	r3, #0
     d88:	3a01      	subs	r2, #1
     d8a:	dc5d      	bgt.n	e48 <__aeabi_fmul+0x150>
     d8c:	f112 0f19 	cmn.w	r2, #25
     d90:	bfdc      	itt	le
     d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     d96:	4770      	bxle	lr
     d98:	f1c2 0200 	rsb	r2, r2, #0
     d9c:	0041      	lsls	r1, r0, #1
     d9e:	fa21 f102 	lsr.w	r1, r1, r2
     da2:	f1c2 0220 	rsb	r2, r2, #32
     da6:	fa00 fc02 	lsl.w	ip, r0, r2
     daa:	ea5f 0031 	movs.w	r0, r1, rrx
     dae:	f140 0000 	adc.w	r0, r0, #0
     db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     db6:	bf08      	it	eq
     db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dbc:	4770      	bx	lr
     dbe:	f092 0f00 	teq	r2, #0
     dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dc6:	bf02      	ittt	eq
     dc8:	0040      	lsleq	r0, r0, #1
     dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     dce:	3a01      	subeq	r2, #1
     dd0:	d0f9      	beq.n	dc6 <__aeabi_fmul+0xce>
     dd2:	ea40 000c 	orr.w	r0, r0, ip
     dd6:	f093 0f00 	teq	r3, #0
     dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0049      	lsleq	r1, r1, #1
     de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     de6:	3b01      	subeq	r3, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xe6>
     dea:	ea41 010c 	orr.w	r1, r1, ip
     dee:	e78f      	b.n	d10 <__aeabi_fmul+0x18>
     df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     df4:	ea92 0f0c 	teq	r2, ip
     df8:	bf18      	it	ne
     dfa:	ea93 0f0c 	teqne	r3, ip
     dfe:	d00a      	beq.n	e16 <__aeabi_fmul+0x11e>
     e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e04:	bf18      	it	ne
     e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e0a:	d1d8      	bne.n	dbe <__aeabi_fmul+0xc6>
     e0c:	ea80 0001 	eor.w	r0, r0, r1
     e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e14:	4770      	bx	lr
     e16:	f090 0f00 	teq	r0, #0
     e1a:	bf17      	itett	ne
     e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e20:	4608      	moveq	r0, r1
     e22:	f091 0f00 	teqne	r1, #0
     e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e2a:	d014      	beq.n	e56 <__aeabi_fmul+0x15e>
     e2c:	ea92 0f0c 	teq	r2, ip
     e30:	d101      	bne.n	e36 <__aeabi_fmul+0x13e>
     e32:	0242      	lsls	r2, r0, #9
     e34:	d10f      	bne.n	e56 <__aeabi_fmul+0x15e>
     e36:	ea93 0f0c 	teq	r3, ip
     e3a:	d103      	bne.n	e44 <__aeabi_fmul+0x14c>
     e3c:	024b      	lsls	r3, r1, #9
     e3e:	bf18      	it	ne
     e40:	4608      	movne	r0, r1
     e42:	d108      	bne.n	e56 <__aeabi_fmul+0x15e>
     e44:	ea80 0001 	eor.w	r0, r0, r1
     e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e54:	4770      	bx	lr
     e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e5e:	4770      	bx	lr

00000e60 <__aeabi_fdiv>:
     e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e68:	bf1e      	ittt	ne
     e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e6e:	ea92 0f0c 	teqne	r2, ip
     e72:	ea93 0f0c 	teqne	r3, ip
     e76:	d069      	beq.n	f4c <__aeabi_fdiv+0xec>
     e78:	eba2 0203 	sub.w	r2, r2, r3
     e7c:	ea80 0c01 	eor.w	ip, r0, r1
     e80:	0249      	lsls	r1, r1, #9
     e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e86:	d037      	beq.n	ef8 <__aeabi_fdiv+0x98>
     e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     e98:	428b      	cmp	r3, r1
     e9a:	bf38      	it	cc
     e9c:	005b      	lslcc	r3, r3, #1
     e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ea6:	428b      	cmp	r3, r1
     ea8:	bf24      	itt	cs
     eaa:	1a5b      	subcs	r3, r3, r1
     eac:	ea40 000c 	orrcs.w	r0, r0, ip
     eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     eb4:	bf24      	itt	cs
     eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     ec2:	bf24      	itt	cs
     ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ed0:	bf24      	itt	cs
     ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     eda:	011b      	lsls	r3, r3, #4
     edc:	bf18      	it	ne
     ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     ee2:	d1e0      	bne.n	ea6 <__aeabi_fdiv+0x46>
     ee4:	2afd      	cmp	r2, #253	; 0xfd
     ee6:	f63f af50 	bhi.w	d8a <__aeabi_fmul+0x92>
     eea:	428b      	cmp	r3, r1
     eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ef0:	bf08      	it	eq
     ef2:	f020 0001 	biceq.w	r0, r0, #1
     ef6:	4770      	bx	lr
     ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f00:	327f      	adds	r2, #127	; 0x7f
     f02:	bfc2      	ittt	gt
     f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f0c:	4770      	bxgt	lr
     f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f12:	f04f 0300 	mov.w	r3, #0
     f16:	3a01      	subs	r2, #1
     f18:	e737      	b.n	d8a <__aeabi_fmul+0x92>
     f1a:	f092 0f00 	teq	r2, #0
     f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f22:	bf02      	ittt	eq
     f24:	0040      	lsleq	r0, r0, #1
     f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f2a:	3a01      	subeq	r2, #1
     f2c:	d0f9      	beq.n	f22 <__aeabi_fdiv+0xc2>
     f2e:	ea40 000c 	orr.w	r0, r0, ip
     f32:	f093 0f00 	teq	r3, #0
     f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0049      	lsleq	r1, r1, #1
     f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f42:	3b01      	subeq	r3, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xda>
     f46:	ea41 010c 	orr.w	r1, r1, ip
     f4a:	e795      	b.n	e78 <__aeabi_fdiv+0x18>
     f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f50:	ea92 0f0c 	teq	r2, ip
     f54:	d108      	bne.n	f68 <__aeabi_fdiv+0x108>
     f56:	0242      	lsls	r2, r0, #9
     f58:	f47f af7d 	bne.w	e56 <__aeabi_fmul+0x15e>
     f5c:	ea93 0f0c 	teq	r3, ip
     f60:	f47f af70 	bne.w	e44 <__aeabi_fmul+0x14c>
     f64:	4608      	mov	r0, r1
     f66:	e776      	b.n	e56 <__aeabi_fmul+0x15e>
     f68:	ea93 0f0c 	teq	r3, ip
     f6c:	d104      	bne.n	f78 <__aeabi_fdiv+0x118>
     f6e:	024b      	lsls	r3, r1, #9
     f70:	f43f af4c 	beq.w	e0c <__aeabi_fmul+0x114>
     f74:	4608      	mov	r0, r1
     f76:	e76e      	b.n	e56 <__aeabi_fmul+0x15e>
     f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f7c:	bf18      	it	ne
     f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f82:	d1ca      	bne.n	f1a <__aeabi_fdiv+0xba>
     f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     f88:	f47f af5c 	bne.w	e44 <__aeabi_fmul+0x14c>
     f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     f90:	f47f af3c 	bne.w	e0c <__aeabi_fmul+0x114>
     f94:	e75f      	b.n	e56 <__aeabi_fmul+0x15e>
     f96:	bf00      	nop

00000f98 <__gesf2>:
     f98:	f04f 3cff 	mov.w	ip, #4294967295
     f9c:	e006      	b.n	fac <__cmpsf2+0x4>
     f9e:	bf00      	nop

00000fa0 <__lesf2>:
     fa0:	f04f 0c01 	mov.w	ip, #1
     fa4:	e002      	b.n	fac <__cmpsf2+0x4>
     fa6:	bf00      	nop

00000fa8 <__cmpsf2>:
     fa8:	f04f 0c01 	mov.w	ip, #1
     fac:	f84d cd04 	str.w	ip, [sp, #-4]!
     fb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
     fb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     fb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fbc:	bf18      	it	ne
     fbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     fc2:	d011      	beq.n	fe8 <__cmpsf2+0x40>
     fc4:	b001      	add	sp, #4
     fc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     fca:	bf18      	it	ne
     fcc:	ea90 0f01 	teqne	r0, r1
     fd0:	bf58      	it	pl
     fd2:	ebb2 0003 	subspl.w	r0, r2, r3
     fd6:	bf88      	it	hi
     fd8:	17c8      	asrhi	r0, r1, #31
     fda:	bf38      	it	cc
     fdc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     fe0:	bf18      	it	ne
     fe2:	f040 0001 	orrne.w	r0, r0, #1
     fe6:	4770      	bx	lr
     fe8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     fec:	d102      	bne.n	ff4 <__cmpsf2+0x4c>
     fee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     ff2:	d105      	bne.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
     ff4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     ff8:	d1e4      	bne.n	fc4 <__cmpsf2+0x1c>
     ffa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     ffe:	d0e1      	beq.n	fc4 <__cmpsf2+0x1c>
    1000:	f85d 0b04 	ldr.w	r0, [sp], #4
    1004:	4770      	bx	lr
    1006:	bf00      	nop

00001008 <__aeabi_cfrcmple>:
    1008:	4684      	mov	ip, r0
    100a:	4608      	mov	r0, r1
    100c:	4661      	mov	r1, ip
    100e:	e7ff      	b.n	1010 <__aeabi_cfcmpeq>

00001010 <__aeabi_cfcmpeq>:
    1010:	b50f      	push	{r0, r1, r2, r3, lr}
    1012:	f7ff ffc9 	bl	fa8 <__cmpsf2>
    1016:	2800      	cmp	r0, #0
    1018:	bf48      	it	mi
    101a:	f110 0f00 	cmnmi.w	r0, #0
    101e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00001020 <__aeabi_fcmpeq>:
    1020:	f84d ed08 	str.w	lr, [sp, #-8]!
    1024:	f7ff fff4 	bl	1010 <__aeabi_cfcmpeq>
    1028:	bf0c      	ite	eq
    102a:	2001      	moveq	r0, #1
    102c:	2000      	movne	r0, #0
    102e:	f85d fb08 	ldr.w	pc, [sp], #8
    1032:	bf00      	nop

00001034 <__aeabi_fcmplt>:
    1034:	f84d ed08 	str.w	lr, [sp, #-8]!
    1038:	f7ff ffea 	bl	1010 <__aeabi_cfcmpeq>
    103c:	bf34      	ite	cc
    103e:	2001      	movcc	r0, #1
    1040:	2000      	movcs	r0, #0
    1042:	f85d fb08 	ldr.w	pc, [sp], #8
    1046:	bf00      	nop

00001048 <__aeabi_fcmple>:
    1048:	f84d ed08 	str.w	lr, [sp, #-8]!
    104c:	f7ff ffe0 	bl	1010 <__aeabi_cfcmpeq>
    1050:	bf94      	ite	ls
    1052:	2001      	movls	r0, #1
    1054:	2000      	movhi	r0, #0
    1056:	f85d fb08 	ldr.w	pc, [sp], #8
    105a:	bf00      	nop

0000105c <__aeabi_fcmpge>:
    105c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1060:	f7ff ffd2 	bl	1008 <__aeabi_cfrcmple>
    1064:	bf94      	ite	ls
    1066:	2001      	movls	r0, #1
    1068:	2000      	movhi	r0, #0
    106a:	f85d fb08 	ldr.w	pc, [sp], #8
    106e:	bf00      	nop

00001070 <__aeabi_fcmpgt>:
    1070:	f84d ed08 	str.w	lr, [sp, #-8]!
    1074:	f7ff ffc8 	bl	1008 <__aeabi_cfrcmple>
    1078:	bf34      	ite	cc
    107a:	2001      	movcc	r0, #1
    107c:	2000      	movcs	r0, #0
    107e:	f85d fb08 	ldr.w	pc, [sp], #8
    1082:	bf00      	nop

00001084 <__aeabi_uldivmod>:
    1084:	b953      	cbnz	r3, 109c <__aeabi_uldivmod+0x18>
    1086:	b94a      	cbnz	r2, 109c <__aeabi_uldivmod+0x18>
    1088:	2900      	cmp	r1, #0
    108a:	bf08      	it	eq
    108c:	2800      	cmpeq	r0, #0
    108e:	bf1c      	itt	ne
    1090:	f04f 31ff 	movne.w	r1, #4294967295
    1094:	f04f 30ff 	movne.w	r0, #4294967295
    1098:	f000 b96c 	b.w	1374 <__aeabi_idiv0>
    109c:	f1ad 0c08 	sub.w	ip, sp, #8
    10a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    10a4:	f000 f806 	bl	10b4 <__udivmoddi4>
    10a8:	f8dd e004 	ldr.w	lr, [sp, #4]
    10ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    10b0:	b004      	add	sp, #16
    10b2:	4770      	bx	lr

000010b4 <__udivmoddi4>:
    10b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10b8:	9e08      	ldr	r6, [sp, #32]
    10ba:	460d      	mov	r5, r1
    10bc:	4604      	mov	r4, r0
    10be:	468e      	mov	lr, r1
    10c0:	2b00      	cmp	r3, #0
    10c2:	f040 8082 	bne.w	11ca <__udivmoddi4+0x116>
    10c6:	428a      	cmp	r2, r1
    10c8:	4617      	mov	r7, r2
    10ca:	d946      	bls.n	115a <__udivmoddi4+0xa6>
    10cc:	fab2 f282 	clz	r2, r2
    10d0:	b14a      	cbz	r2, 10e6 <__udivmoddi4+0x32>
    10d2:	f1c2 0120 	rsb	r1, r2, #32
    10d6:	fa05 f302 	lsl.w	r3, r5, r2
    10da:	fa20 f101 	lsr.w	r1, r0, r1
    10de:	4097      	lsls	r7, r2
    10e0:	ea41 0e03 	orr.w	lr, r1, r3
    10e4:	4094      	lsls	r4, r2
    10e6:	ea4f 4817 	mov.w	r8, r7, lsr #16
    10ea:	0c23      	lsrs	r3, r4, #16
    10ec:	fbbe fcf8 	udiv	ip, lr, r8
    10f0:	b2b9      	uxth	r1, r7
    10f2:	fb08 ee1c 	mls	lr, r8, ip, lr
    10f6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    10fa:	fb0c f001 	mul.w	r0, ip, r1
    10fe:	4298      	cmp	r0, r3
    1100:	d90a      	bls.n	1118 <__udivmoddi4+0x64>
    1102:	18fb      	adds	r3, r7, r3
    1104:	f10c 35ff 	add.w	r5, ip, #4294967295
    1108:	f080 8116 	bcs.w	1338 <__udivmoddi4+0x284>
    110c:	4298      	cmp	r0, r3
    110e:	f240 8113 	bls.w	1338 <__udivmoddi4+0x284>
    1112:	f1ac 0c02 	sub.w	ip, ip, #2
    1116:	443b      	add	r3, r7
    1118:	1a1b      	subs	r3, r3, r0
    111a:	b2a4      	uxth	r4, r4
    111c:	fbb3 f0f8 	udiv	r0, r3, r8
    1120:	fb08 3310 	mls	r3, r8, r0, r3
    1124:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1128:	fb00 f101 	mul.w	r1, r0, r1
    112c:	42a1      	cmp	r1, r4
    112e:	d909      	bls.n	1144 <__udivmoddi4+0x90>
    1130:	193c      	adds	r4, r7, r4
    1132:	f100 33ff 	add.w	r3, r0, #4294967295
    1136:	f080 8101 	bcs.w	133c <__udivmoddi4+0x288>
    113a:	42a1      	cmp	r1, r4
    113c:	f240 80fe 	bls.w	133c <__udivmoddi4+0x288>
    1140:	3802      	subs	r0, #2
    1142:	443c      	add	r4, r7
    1144:	1a64      	subs	r4, r4, r1
    1146:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    114a:	2100      	movs	r1, #0
    114c:	b11e      	cbz	r6, 1156 <__udivmoddi4+0xa2>
    114e:	40d4      	lsrs	r4, r2
    1150:	2300      	movs	r3, #0
    1152:	e9c6 4300 	strd	r4, r3, [r6]
    1156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    115a:	b902      	cbnz	r2, 115e <__udivmoddi4+0xaa>
    115c:	deff      	udf	#255	; 0xff
    115e:	fab2 f282 	clz	r2, r2
    1162:	2a00      	cmp	r2, #0
    1164:	d14f      	bne.n	1206 <__udivmoddi4+0x152>
    1166:	1bcb      	subs	r3, r1, r7
    1168:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    116c:	fa1f f887 	uxth.w	r8, r7
    1170:	2101      	movs	r1, #1
    1172:	fbb3 fcfe 	udiv	ip, r3, lr
    1176:	0c25      	lsrs	r5, r4, #16
    1178:	fb0e 331c 	mls	r3, lr, ip, r3
    117c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1180:	fb08 f30c 	mul.w	r3, r8, ip
    1184:	42ab      	cmp	r3, r5
    1186:	d907      	bls.n	1198 <__udivmoddi4+0xe4>
    1188:	197d      	adds	r5, r7, r5
    118a:	f10c 30ff 	add.w	r0, ip, #4294967295
    118e:	d202      	bcs.n	1196 <__udivmoddi4+0xe2>
    1190:	42ab      	cmp	r3, r5
    1192:	f200 80e7 	bhi.w	1364 <__udivmoddi4+0x2b0>
    1196:	4684      	mov	ip, r0
    1198:	1aed      	subs	r5, r5, r3
    119a:	b2a3      	uxth	r3, r4
    119c:	fbb5 f0fe 	udiv	r0, r5, lr
    11a0:	fb0e 5510 	mls	r5, lr, r0, r5
    11a4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    11a8:	fb08 f800 	mul.w	r8, r8, r0
    11ac:	45a0      	cmp	r8, r4
    11ae:	d907      	bls.n	11c0 <__udivmoddi4+0x10c>
    11b0:	193c      	adds	r4, r7, r4
    11b2:	f100 33ff 	add.w	r3, r0, #4294967295
    11b6:	d202      	bcs.n	11be <__udivmoddi4+0x10a>
    11b8:	45a0      	cmp	r8, r4
    11ba:	f200 80d7 	bhi.w	136c <__udivmoddi4+0x2b8>
    11be:	4618      	mov	r0, r3
    11c0:	eba4 0408 	sub.w	r4, r4, r8
    11c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11c8:	e7c0      	b.n	114c <__udivmoddi4+0x98>
    11ca:	428b      	cmp	r3, r1
    11cc:	d908      	bls.n	11e0 <__udivmoddi4+0x12c>
    11ce:	2e00      	cmp	r6, #0
    11d0:	f000 80af 	beq.w	1332 <__udivmoddi4+0x27e>
    11d4:	2100      	movs	r1, #0
    11d6:	e9c6 0500 	strd	r0, r5, [r6]
    11da:	4608      	mov	r0, r1
    11dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11e0:	fab3 f183 	clz	r1, r3
    11e4:	2900      	cmp	r1, #0
    11e6:	d14b      	bne.n	1280 <__udivmoddi4+0x1cc>
    11e8:	42ab      	cmp	r3, r5
    11ea:	d302      	bcc.n	11f2 <__udivmoddi4+0x13e>
    11ec:	4282      	cmp	r2, r0
    11ee:	f200 80b7 	bhi.w	1360 <__udivmoddi4+0x2ac>
    11f2:	1a84      	subs	r4, r0, r2
    11f4:	eb65 0303 	sbc.w	r3, r5, r3
    11f8:	2001      	movs	r0, #1
    11fa:	469e      	mov	lr, r3
    11fc:	2e00      	cmp	r6, #0
    11fe:	d0aa      	beq.n	1156 <__udivmoddi4+0xa2>
    1200:	e9c6 4e00 	strd	r4, lr, [r6]
    1204:	e7a7      	b.n	1156 <__udivmoddi4+0xa2>
    1206:	f1c2 0c20 	rsb	ip, r2, #32
    120a:	fa01 f302 	lsl.w	r3, r1, r2
    120e:	4097      	lsls	r7, r2
    1210:	fa20 f00c 	lsr.w	r0, r0, ip
    1214:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1218:	fa21 fc0c 	lsr.w	ip, r1, ip
    121c:	4318      	orrs	r0, r3
    121e:	fbbc f1fe 	udiv	r1, ip, lr
    1222:	0c05      	lsrs	r5, r0, #16
    1224:	fb0e cc11 	mls	ip, lr, r1, ip
    1228:	fa1f f887 	uxth.w	r8, r7
    122c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    1230:	fb01 f308 	mul.w	r3, r1, r8
    1234:	42ab      	cmp	r3, r5
    1236:	fa04 f402 	lsl.w	r4, r4, r2
    123a:	d909      	bls.n	1250 <__udivmoddi4+0x19c>
    123c:	197d      	adds	r5, r7, r5
    123e:	f101 3cff 	add.w	ip, r1, #4294967295
    1242:	f080 808b 	bcs.w	135c <__udivmoddi4+0x2a8>
    1246:	42ab      	cmp	r3, r5
    1248:	f240 8088 	bls.w	135c <__udivmoddi4+0x2a8>
    124c:	3902      	subs	r1, #2
    124e:	443d      	add	r5, r7
    1250:	1aeb      	subs	r3, r5, r3
    1252:	b285      	uxth	r5, r0
    1254:	fbb3 f0fe 	udiv	r0, r3, lr
    1258:	fb0e 3310 	mls	r3, lr, r0, r3
    125c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1260:	fb00 f308 	mul.w	r3, r0, r8
    1264:	42ab      	cmp	r3, r5
    1266:	d907      	bls.n	1278 <__udivmoddi4+0x1c4>
    1268:	197d      	adds	r5, r7, r5
    126a:	f100 3cff 	add.w	ip, r0, #4294967295
    126e:	d271      	bcs.n	1354 <__udivmoddi4+0x2a0>
    1270:	42ab      	cmp	r3, r5
    1272:	d96f      	bls.n	1354 <__udivmoddi4+0x2a0>
    1274:	3802      	subs	r0, #2
    1276:	443d      	add	r5, r7
    1278:	1aeb      	subs	r3, r5, r3
    127a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    127e:	e778      	b.n	1172 <__udivmoddi4+0xbe>
    1280:	f1c1 0c20 	rsb	ip, r1, #32
    1284:	408b      	lsls	r3, r1
    1286:	fa22 f70c 	lsr.w	r7, r2, ip
    128a:	431f      	orrs	r7, r3
    128c:	fa20 f40c 	lsr.w	r4, r0, ip
    1290:	fa05 f301 	lsl.w	r3, r5, r1
    1294:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1298:	fa25 f50c 	lsr.w	r5, r5, ip
    129c:	431c      	orrs	r4, r3
    129e:	0c23      	lsrs	r3, r4, #16
    12a0:	fbb5 f9fe 	udiv	r9, r5, lr
    12a4:	fa1f f887 	uxth.w	r8, r7
    12a8:	fb0e 5519 	mls	r5, lr, r9, r5
    12ac:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    12b0:	fb09 fa08 	mul.w	sl, r9, r8
    12b4:	45aa      	cmp	sl, r5
    12b6:	fa02 f201 	lsl.w	r2, r2, r1
    12ba:	fa00 f301 	lsl.w	r3, r0, r1
    12be:	d908      	bls.n	12d2 <__udivmoddi4+0x21e>
    12c0:	197d      	adds	r5, r7, r5
    12c2:	f109 30ff 	add.w	r0, r9, #4294967295
    12c6:	d247      	bcs.n	1358 <__udivmoddi4+0x2a4>
    12c8:	45aa      	cmp	sl, r5
    12ca:	d945      	bls.n	1358 <__udivmoddi4+0x2a4>
    12cc:	f1a9 0902 	sub.w	r9, r9, #2
    12d0:	443d      	add	r5, r7
    12d2:	eba5 050a 	sub.w	r5, r5, sl
    12d6:	b2a4      	uxth	r4, r4
    12d8:	fbb5 f0fe 	udiv	r0, r5, lr
    12dc:	fb0e 5510 	mls	r5, lr, r0, r5
    12e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    12e4:	fb00 f808 	mul.w	r8, r0, r8
    12e8:	45a0      	cmp	r8, r4
    12ea:	d907      	bls.n	12fc <__udivmoddi4+0x248>
    12ec:	193c      	adds	r4, r7, r4
    12ee:	f100 35ff 	add.w	r5, r0, #4294967295
    12f2:	d22d      	bcs.n	1350 <__udivmoddi4+0x29c>
    12f4:	45a0      	cmp	r8, r4
    12f6:	d92b      	bls.n	1350 <__udivmoddi4+0x29c>
    12f8:	3802      	subs	r0, #2
    12fa:	443c      	add	r4, r7
    12fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    1300:	eba4 0408 	sub.w	r4, r4, r8
    1304:	fba0 8902 	umull	r8, r9, r0, r2
    1308:	454c      	cmp	r4, r9
    130a:	46c6      	mov	lr, r8
    130c:	464d      	mov	r5, r9
    130e:	d319      	bcc.n	1344 <__udivmoddi4+0x290>
    1310:	d016      	beq.n	1340 <__udivmoddi4+0x28c>
    1312:	b15e      	cbz	r6, 132c <__udivmoddi4+0x278>
    1314:	ebb3 020e 	subs.w	r2, r3, lr
    1318:	eb64 0405 	sbc.w	r4, r4, r5
    131c:	fa04 fc0c 	lsl.w	ip, r4, ip
    1320:	40ca      	lsrs	r2, r1
    1322:	ea4c 0202 	orr.w	r2, ip, r2
    1326:	40cc      	lsrs	r4, r1
    1328:	e9c6 2400 	strd	r2, r4, [r6]
    132c:	2100      	movs	r1, #0
    132e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1332:	4631      	mov	r1, r6
    1334:	4630      	mov	r0, r6
    1336:	e70e      	b.n	1156 <__udivmoddi4+0xa2>
    1338:	46ac      	mov	ip, r5
    133a:	e6ed      	b.n	1118 <__udivmoddi4+0x64>
    133c:	4618      	mov	r0, r3
    133e:	e701      	b.n	1144 <__udivmoddi4+0x90>
    1340:	4543      	cmp	r3, r8
    1342:	d2e6      	bcs.n	1312 <__udivmoddi4+0x25e>
    1344:	ebb8 0e02 	subs.w	lr, r8, r2
    1348:	eb69 0507 	sbc.w	r5, r9, r7
    134c:	3801      	subs	r0, #1
    134e:	e7e0      	b.n	1312 <__udivmoddi4+0x25e>
    1350:	4628      	mov	r0, r5
    1352:	e7d3      	b.n	12fc <__udivmoddi4+0x248>
    1354:	4660      	mov	r0, ip
    1356:	e78f      	b.n	1278 <__udivmoddi4+0x1c4>
    1358:	4681      	mov	r9, r0
    135a:	e7ba      	b.n	12d2 <__udivmoddi4+0x21e>
    135c:	4661      	mov	r1, ip
    135e:	e777      	b.n	1250 <__udivmoddi4+0x19c>
    1360:	4608      	mov	r0, r1
    1362:	e74b      	b.n	11fc <__udivmoddi4+0x148>
    1364:	f1ac 0c02 	sub.w	ip, ip, #2
    1368:	443d      	add	r5, r7
    136a:	e715      	b.n	1198 <__udivmoddi4+0xe4>
    136c:	3802      	subs	r0, #2
    136e:	443c      	add	r4, r7
    1370:	e726      	b.n	11c0 <__udivmoddi4+0x10c>
    1372:	bf00      	nop

00001374 <__aeabi_idiv0>:
    1374:	4770      	bx	lr
    1376:	bf00      	nop

00001378 <__aeabi_dcmpun>:
    1378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    137c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1380:	d102      	bne.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    1382:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    1386:	d10a      	bne.n	139e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16>
    1388:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    138c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1390:	d102      	bne.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
    1392:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    1396:	d102      	bne.n	139e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16>
    1398:	f04f 0000 	mov.w	r0, #0
    139c:	4770      	bx	lr
    139e:	f04f 0001 	mov.w	r0, #1
    13a2:	4770      	bx	lr

000013a4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    13a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13a6:	4615      	mov	r5, r2
    13a8:	4a0a      	ldr	r2, [pc, #40]	; (13d4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    13aa:	461c      	mov	r4, r3
    13ac:	6856      	ldr	r6, [r2, #4]
    13ae:	b12e      	cbz	r6, 13bc <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    13b0:	b001      	add	sp, #4
    13b2:	462a      	mov	r2, r5
    13b4:	46b4      	mov	ip, r6
    13b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    13ba:	4760      	bx	ip
    13bc:	2000      	movs	r0, #0
    13be:	f88d 0000 	strb.w	r0, [sp]
    13c2:	4668      	mov	r0, sp
    13c4:	f00b f936 	bl	c634 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    13c8:	f89d 0000 	ldrb.w	r0, [sp]
    13cc:	1a28      	subs	r0, r5, r0
    13ce:	7020      	strb	r0, [r4, #0]
    13d0:	2000      	movs	r0, #0
    13d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13d4:	20000000 	.word	0x20000000

000013d8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    13d8:	4801      	ldr	r0, [pc, #4]	; (13e0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    13da:	7800      	ldrb	r0, [r0, #0]
    13dc:	4770      	bx	lr
    13de:	0000      	.short	0x0000
    13e0:	20000008 	.word	0x20000008

000013e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    13e4:	4905      	ldr	r1, [pc, #20]	; (13fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    13e6:	780a      	ldrb	r2, [r1, #0]
    13e8:	4290      	cmp	r0, r2
    13ea:	d301      	bcc.n	13f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    13ec:	2000      	movs	r0, #0
    13ee:	4770      	bx	lr
    13f0:	6849      	ldr	r1, [r1, #4]
    13f2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    13f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    13fa:	4770      	bx	lr
    13fc:	20000008 	.word	0x20000008
    1400:	b570      	push	{r4, r5, r6, lr}
    1402:	4605      	mov	r5, r0
    1404:	2a20      	cmp	r2, #32
    1406:	d027      	beq.n	1458 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1408:	4819      	ldr	r0, [pc, #100]	; (1470 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    140a:	4c1a      	ldr	r4, [pc, #104]	; (1474 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    140c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1410:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1414:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1418:	2920      	cmp	r1, #32
    141a:	d022      	beq.n	1462 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    141c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1420:	7840      	ldrb	r0, [r0, #1]
    1422:	784c      	ldrb	r4, [r1, #1]
    1424:	7048      	strb	r0, [r1, #1]
    1426:	4620      	mov	r0, r4
    1428:	4601      	mov	r1, r0
    142a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    142e:	4291      	cmp	r1, r2
    1430:	7005      	strb	r5, [r0, #0]
    1432:	7840      	ldrb	r0, [r0, #1]
    1434:	d1f8      	bne.n	1428 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    1436:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    143a:	2a20      	cmp	r2, #32
    143c:	bf1a      	itte	ne
    143e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1442:	7054      	strbne	r4, [r2, #1]
    1444:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1448:	2220      	movs	r2, #32
    144a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    144e:	f88c 2001 	strb.w	r2, [ip, #1]
    1452:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    1456:	bd70      	pop	{r4, r5, r6, pc}
    1458:	f240 217e 	movw	r1, #638	; 0x27e
    145c:	2070      	movs	r0, #112	; 0x70
    145e:	f003 f96b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1462:	f893 4020 	ldrb.w	r4, [r3, #32]
    1466:	7840      	ldrb	r0, [r0, #1]
    1468:	f883 0020 	strb.w	r0, [r3, #32]
    146c:	e7db      	b.n	1426 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    146e:	0000      	.short	0x0000
    1470:	20000e34 	.word	0x20000e34
    1474:	20000eb4 	.word	0x20000eb4
    1478:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    147c:	b085      	sub	sp, #20
    147e:	4615      	mov	r5, r2
    1480:	460c      	mov	r4, r1
    1482:	f002 f8db 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1486:	4428      	add	r0, r5
    1488:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    148c:	9002      	str	r0, [sp, #8]
    148e:	6821      	ldr	r1, [r4, #0]
    1490:	1a08      	subs	r0, r1, r0
    1492:	0200      	lsls	r0, r0, #8
    1494:	17c1      	asrs	r1, r0, #31
    1496:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    149a:	1200      	asrs	r0, r0, #8
    149c:	2800      	cmp	r0, #0
    149e:	f300 80d5 	bgt.w	164c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    14a2:	48ac      	ldr	r0, [pc, #688]	; (1754 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    14a4:	9f08      	ldr	r7, [sp, #32]
    14a6:	4eac      	ldr	r6, [pc, #688]	; (1758 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    14a8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    14ac:	9003      	str	r0, [sp, #12]
    14ae:	f890 5020 	ldrb.w	r5, [r0, #32]
    14b2:	2020      	movs	r0, #32
    14b4:	46e9      	mov	r9, sp
    14b6:	f10d 0804 	add.w	r8, sp, #4
    14ba:	f88d 0000 	strb.w	r0, [sp]
    14be:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    14c2:	2d20      	cmp	r5, #32
    14c4:	bf18      	it	ne
    14c6:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    14ca:	d025      	beq.n	1518 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    14cc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    14d0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    14d4:	6822      	ldr	r2, [r4, #0]
    14d6:	68c1      	ldr	r1, [r0, #12]
    14d8:	1a51      	subs	r1, r2, r1
    14da:	0209      	lsls	r1, r1, #8
    14dc:	17ca      	asrs	r2, r1, #31
    14de:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    14e2:	3008      	adds	r0, #8
    14e4:	1209      	asrs	r1, r1, #8
    14e6:	d417      	bmi.n	1518 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    14e8:	8961      	ldrh	r1, [r4, #10]
    14ea:	b171      	cbz	r1, 150a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    14ec:	8941      	ldrh	r1, [r0, #10]
    14ee:	b961      	cbnz	r1, 150a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    14f0:	f000 fdb4 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    14f4:	f002 f8a2 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14f8:	6821      	ldr	r1, [r4, #0]
    14fa:	1a08      	subs	r0, r1, r0
    14fc:	0200      	lsls	r0, r0, #8
    14fe:	17c1      	asrs	r1, r0, #31
    1500:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1504:	1200      	asrs	r0, r0, #8
    1506:	2833      	cmp	r0, #51	; 0x33
    1508:	db06      	blt.n	1518 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    150a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    150e:	f889 5000 	strb.w	r5, [r9]
    1512:	7845      	ldrb	r5, [r0, #1]
    1514:	2d20      	cmp	r5, #32
    1516:	d1d9      	bne.n	14cc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1518:	f899 0000 	ldrb.w	r0, [r9]
    151c:	f888 0000 	strb.w	r0, [r8]
    1520:	46a1      	mov	r9, r4
    1522:	2d20      	cmp	r5, #32
    1524:	bf1c      	itt	ne
    1526:	488d      	ldrne	r0, [pc, #564]	; (175c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1528:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    152c:	f000 810e 	beq.w	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1530:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1534:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1538:	f8d9 2004 	ldr.w	r2, [r9, #4]
    153c:	f8da 1008 	ldr.w	r1, [sl, #8]
    1540:	4648      	mov	r0, r9
    1542:	1a89      	subs	r1, r1, r2
    1544:	0209      	lsls	r1, r1, #8
    1546:	17ca      	asrs	r2, r1, #31
    1548:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    154c:	f10a 0708 	add.w	r7, sl, #8
    1550:	1209      	asrs	r1, r1, #8
    1552:	d415      	bmi.n	1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    1554:	8979      	ldrh	r1, [r7, #10]
    1556:	2900      	cmp	r1, #0
    1558:	f000 80f8 	beq.w	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    155c:	8941      	ldrh	r1, [r0, #10]
    155e:	2900      	cmp	r1, #0
    1560:	f040 80f4 	bne.w	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1564:	f000 fd7a 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    1568:	f002 f868 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    156c:	6839      	ldr	r1, [r7, #0]
    156e:	1a08      	subs	r0, r1, r0
    1570:	0200      	lsls	r0, r0, #8
    1572:	17c1      	asrs	r1, r0, #31
    1574:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1578:	1200      	asrs	r0, r0, #8
    157a:	2833      	cmp	r0, #51	; 0x33
    157c:	f280 80e6 	bge.w	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1580:	f888 5000 	strb.w	r5, [r8]
    1584:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1588:	f899 000c 	ldrb.w	r0, [r9, #12]
    158c:	4281      	cmp	r1, r0
    158e:	d906      	bls.n	159e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1590:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1594:	7845      	ldrb	r5, [r0, #1]
    1596:	2d20      	cmp	r5, #32
    1598:	d1ca      	bne.n	1530 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    159a:	f000 b8d7 	b.w	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    159e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15a6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    15aa:	8a68      	ldrh	r0, [r5, #18]
    15ac:	68ef      	ldr	r7, [r5, #12]
    15ae:	2800      	cmp	r0, #0
    15b0:	d143      	bne.n	163a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    15b2:	8960      	ldrh	r0, [r4, #10]
    15b4:	b3e8      	cbz	r0, 1632 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    15b6:	68a8      	ldr	r0, [r5, #8]
    15b8:	f00b f85c 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    15bc:	8a69      	ldrh	r1, [r5, #18]
    15be:	7c2a      	ldrb	r2, [r5, #16]
    15c0:	4b67      	ldr	r3, [pc, #412]	; (1760 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    15c2:	4411      	add	r1, r2
    15c4:	1c49      	adds	r1, r1, #1
    15c6:	1842      	adds	r2, r0, r1
    15c8:	4298      	cmp	r0, r3
    15ca:	d904      	bls.n	15d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    15cc:	f240 6109 	movw	r1, #1545	; 0x609
    15d0:	2070      	movs	r0, #112	; 0x70
    15d2:	f003 f8b1 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d6:	4863      	ldr	r0, [pc, #396]	; (1764 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    15d8:	4281      	cmp	r1, r0
    15da:	dd04      	ble.n	15e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    15dc:	f240 610a 	movw	r1, #1546	; 0x60a
    15e0:	2070      	movs	r0, #112	; 0x70
    15e2:	f003 f8a9 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15e6:	4860      	ldr	r0, [pc, #384]	; (1768 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    15e8:	4281      	cmp	r1, r0
    15ea:	da04      	bge.n	15f6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    15ec:	f240 610b 	movw	r1, #1547	; 0x60b
    15f0:	2070      	movs	r0, #112	; 0x70
    15f2:	f003 f8a1 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f6:	485d      	ldr	r0, [pc, #372]	; (176c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    15f8:	4290      	cmp	r0, r2
    15fa:	bfdc      	itt	le
    15fc:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1600:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1604:	dd05      	ble.n	1612 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1606:	2a00      	cmp	r2, #0
    1608:	bfbc      	itt	lt
    160a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    160e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1612:	4610      	mov	r0, r2
    1614:	f002 f812 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1618:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    161c:	1a78      	subs	r0, r7, r1
    161e:	0200      	lsls	r0, r0, #8
    1620:	17c2      	asrs	r2, r0, #31
    1622:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1626:	1200      	asrs	r0, r0, #8
    1628:	2833      	cmp	r0, #51	; 0x33
    162a:	bfb8      	it	lt
    162c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1630:	e000      	b.n	1634 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1632:	e002      	b.n	163a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1634:	bfb8      	it	lt
    1636:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    163a:	9802      	ldr	r0, [sp, #8]
    163c:	1a38      	subs	r0, r7, r0
    163e:	0200      	lsls	r0, r0, #8
    1640:	17c1      	asrs	r1, r0, #31
    1642:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1646:	1200      	asrs	r0, r0, #8
    1648:	2800      	cmp	r0, #0
    164a:	dd03      	ble.n	1654 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    164c:	b009      	add	sp, #36	; 0x24
    164e:	2000      	movs	r0, #0
    1650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1654:	e9d4 1000 	ldrd	r1, r0, [r4]
    1658:	1a40      	subs	r0, r0, r1
    165a:	4438      	add	r0, r7
    165c:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    1660:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1664:	e9c4 1000 	strd	r1, r0, [r4]
    1668:	9803      	ldr	r0, [sp, #12]
    166a:	f8dd 8020 	ldr.w	r8, [sp, #32]
    166e:	466f      	mov	r7, sp
    1670:	f890 5020 	ldrb.w	r5, [r0, #32]
    1674:	2020      	movs	r0, #32
    1676:	f10d 0a04 	add.w	sl, sp, #4
    167a:	f88d 0000 	strb.w	r0, [sp]
    167e:	2d20      	cmp	r5, #32
    1680:	bf1c      	itt	ne
    1682:	4836      	ldrne	r0, [pc, #216]	; (175c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1684:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1688:	d025      	beq.n	16d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    168a:	bf00      	nop
    168c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1690:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1694:	6822      	ldr	r2, [r4, #0]
    1696:	68c1      	ldr	r1, [r0, #12]
    1698:	1a51      	subs	r1, r2, r1
    169a:	0209      	lsls	r1, r1, #8
    169c:	17ca      	asrs	r2, r1, #31
    169e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16a2:	3008      	adds	r0, #8
    16a4:	1209      	asrs	r1, r1, #8
    16a6:	d416      	bmi.n	16d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16a8:	8961      	ldrh	r1, [r4, #10]
    16aa:	b171      	cbz	r1, 16ca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    16ac:	8941      	ldrh	r1, [r0, #10]
    16ae:	b961      	cbnz	r1, 16ca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    16b0:	f000 fcd4 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    16b4:	f001 ffc2 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16b8:	6821      	ldr	r1, [r4, #0]
    16ba:	1a08      	subs	r0, r1, r0
    16bc:	0200      	lsls	r0, r0, #8
    16be:	17c1      	asrs	r1, r0, #31
    16c0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    16c4:	1200      	asrs	r0, r0, #8
    16c6:	2833      	cmp	r0, #51	; 0x33
    16c8:	db05      	blt.n	16d6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16ca:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    16ce:	703d      	strb	r5, [r7, #0]
    16d0:	7845      	ldrb	r5, [r0, #1]
    16d2:	2d20      	cmp	r5, #32
    16d4:	d1da      	bne.n	168c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    16d6:	7838      	ldrb	r0, [r7, #0]
    16d8:	f88a 0000 	strb.w	r0, [sl]
    16dc:	4627      	mov	r7, r4
    16de:	2d20      	cmp	r5, #32
    16e0:	bf1c      	itt	ne
    16e2:	481e      	ldrne	r0, [pc, #120]	; (175c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    16e4:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    16e8:	d030      	beq.n	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16ea:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    16ee:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    16f2:	6879      	ldr	r1, [r7, #4]
    16f4:	f8d9 2008 	ldr.w	r2, [r9, #8]
    16f8:	4638      	mov	r0, r7
    16fa:	1a51      	subs	r1, r2, r1
    16fc:	0209      	lsls	r1, r1, #8
    16fe:	17ca      	asrs	r2, r1, #31
    1700:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1704:	f109 0808 	add.w	r8, r9, #8
    1708:	1209      	asrs	r1, r1, #8
    170a:	d412      	bmi.n	1732 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    170c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1710:	b1e1      	cbz	r1, 174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1712:	8941      	ldrh	r1, [r0, #10]
    1714:	b9d1      	cbnz	r1, 174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1716:	f000 fca1 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    171a:	f001 ff8f 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    171e:	f8d8 1000 	ldr.w	r1, [r8]
    1722:	1a08      	subs	r0, r1, r0
    1724:	0200      	lsls	r0, r0, #8
    1726:	17c1      	asrs	r1, r0, #31
    1728:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    172c:	1200      	asrs	r0, r0, #8
    172e:	2833      	cmp	r0, #51	; 0x33
    1730:	da0c      	bge.n	174c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1732:	f88a 5000 	strb.w	r5, [sl]
    1736:	f899 0014 	ldrb.w	r0, [r9, #20]
    173a:	7b39      	ldrb	r1, [r7, #12]
    173c:	4288      	cmp	r0, r1
    173e:	f67f af2e 	bls.w	159e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1742:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1746:	7845      	ldrb	r5, [r0, #1]
    1748:	2d20      	cmp	r5, #32
    174a:	d1ce      	bne.n	16ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    174c:	b009      	add	sp, #36	; 0x24
    174e:	2001      	movs	r0, #1
    1750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1754:	20000eb4 	.word	0x20000eb4
    1758:	20000b34 	.word	0x20000b34
    175c:	20000e34 	.word	0x20000e34
    1760:	1e847fff 	.word	0x1e847fff
    1764:	07a12000 	.word	0x07a12000
    1768:	f85ee000 	.word	0xf85ee000
    176c:	1e848000 	.word	0x1e848000
    1770:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1774:	4604      	mov	r4, r0
    1776:	483c      	ldr	r0, [pc, #240]	; (1868 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    1778:	460e      	mov	r6, r1
    177a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    177e:	4f3b      	ldr	r7, [pc, #236]	; (186c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    1780:	f890 5020 	ldrb.w	r5, [r0, #32]
    1784:	2020      	movs	r0, #32
    1786:	4698      	mov	r8, r3
    1788:	4692      	mov	sl, r2
    178a:	7010      	strb	r0, [r2, #0]
    178c:	f507 7940 	add.w	r9, r7, #768	; 0x300
    1790:	2d20      	cmp	r5, #32
    1792:	bf18      	it	ne
    1794:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1798:	d028      	beq.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    179a:	bf00      	nop
    179c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17a0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    17a4:	f100 0108 	add.w	r1, r0, #8
    17a8:	68c0      	ldr	r0, [r0, #12]
    17aa:	6822      	ldr	r2, [r4, #0]
    17ac:	1a10      	subs	r0, r2, r0
    17ae:	0200      	lsls	r0, r0, #8
    17b0:	17c2      	asrs	r2, r0, #31
    17b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    17b6:	1200      	asrs	r0, r0, #8
    17b8:	d418      	bmi.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    17ba:	8960      	ldrh	r0, [r4, #10]
    17bc:	b178      	cbz	r0, 17de <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    17be:	8948      	ldrh	r0, [r1, #10]
    17c0:	b968      	cbnz	r0, 17de <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    17c2:	4608      	mov	r0, r1
    17c4:	f000 fc4a 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    17c8:	f001 ff38 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    17cc:	6821      	ldr	r1, [r4, #0]
    17ce:	1a08      	subs	r0, r1, r0
    17d0:	0200      	lsls	r0, r0, #8
    17d2:	17c1      	asrs	r1, r0, #31
    17d4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    17d8:	1200      	asrs	r0, r0, #8
    17da:	2833      	cmp	r0, #51	; 0x33
    17dc:	db06      	blt.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    17de:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    17e2:	f88a 5000 	strb.w	r5, [sl]
    17e6:	7845      	ldrb	r5, [r0, #1]
    17e8:	2d20      	cmp	r5, #32
    17ea:	d1d7      	bne.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    17ec:	f89a 0000 	ldrb.w	r0, [sl]
    17f0:	f888 0000 	strb.w	r0, [r8]
    17f4:	2d20      	cmp	r5, #32
    17f6:	bf18      	it	ne
    17f8:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    17fc:	d030      	beq.n	1860 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    17fe:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1802:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1806:	6861      	ldr	r1, [r4, #4]
    1808:	f8d9 2008 	ldr.w	r2, [r9, #8]
    180c:	4620      	mov	r0, r4
    180e:	1a51      	subs	r1, r2, r1
    1810:	0209      	lsls	r1, r1, #8
    1812:	17ca      	asrs	r2, r1, #31
    1814:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1818:	f109 0608 	add.w	r6, r9, #8
    181c:	1209      	asrs	r1, r1, #8
    181e:	d410      	bmi.n	1842 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1820:	8971      	ldrh	r1, [r6, #10]
    1822:	b1e9      	cbz	r1, 1860 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1824:	8941      	ldrh	r1, [r0, #10]
    1826:	b9d9      	cbnz	r1, 1860 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1828:	f000 fc18 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    182c:	f001 ff06 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1830:	6831      	ldr	r1, [r6, #0]
    1832:	1a08      	subs	r0, r1, r0
    1834:	0200      	lsls	r0, r0, #8
    1836:	17c1      	asrs	r1, r0, #31
    1838:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    183c:	1200      	asrs	r0, r0, #8
    183e:	2833      	cmp	r0, #51	; 0x33
    1840:	da0e      	bge.n	1860 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1842:	f888 5000 	strb.w	r5, [r8]
    1846:	f899 0014 	ldrb.w	r0, [r9, #20]
    184a:	7b21      	ldrb	r1, [r4, #12]
    184c:	4288      	cmp	r0, r1
    184e:	d802      	bhi.n	1856 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    1850:	2000      	movs	r0, #0
    1852:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1856:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    185a:	7845      	ldrb	r5, [r0, #1]
    185c:	2d20      	cmp	r5, #32
    185e:	d1ce      	bne.n	17fe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    1860:	2001      	movs	r0, #1
    1862:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1866:	0000      	.short	0x0000
    1868:	20000eb4 	.word	0x20000eb4
    186c:	20000b34 	.word	0x20000b34
    1870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1874:	b098      	sub	sp, #96	; 0x60
    1876:	4616      	mov	r6, r2
    1878:	460d      	mov	r5, r1
    187a:	f04f 0800 	mov.w	r8, #0
    187e:	f04f 0b01 	mov.w	fp, #1
    1882:	f002 f95d 	bl	3b40 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1886:	4604      	mov	r4, r0
    1888:	2d01      	cmp	r5, #1
    188a:	bf18      	it	ne
    188c:	2d02      	cmpne	r5, #2
    188e:	d005      	beq.n	189c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b8>
    1890:	f640 1194 	movw	r1, #2452	; 0x994
    1894:	f04f 0070 	mov.w	r0, #112	; 0x70
    1898:	f002 ff4e 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    189c:	49f9      	ldr	r1, [pc, #996]	; (1c84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a0>)
    189e:	2001      	movs	r0, #1
    18a0:	6008      	str	r0, [r1, #0]
    18a2:	49f9      	ldr	r1, [pc, #996]	; (1c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a4>)
    18a4:	6889      	ldr	r1, [r1, #8]
    18a6:	6008      	str	r0, [r1, #0]
    18a8:	2000      	movs	r0, #0
    18aa:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    18ae:	900c      	str	r0, [sp, #48]	; 0x30
    18b0:	1e40      	subs	r0, r0, #1
    18b2:	900e      	str	r0, [sp, #56]	; 0x38
    18b4:	49f5      	ldr	r1, [pc, #980]	; (1c8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    18b6:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    18ba:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    18be:	3308      	adds	r3, #8
    18c0:	af0f      	add	r7, sp, #60	; 0x3c
    18c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    18c4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    18c8:	a80f      	add	r0, sp, #60	; 0x3c
    18ca:	f000 fbc7 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    18ce:	900d      	str	r0, [sp, #52]	; 0x34
    18d0:	48ee      	ldr	r0, [pc, #952]	; (1c8c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>)
    18d2:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    18d6:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    18da:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    18de:	f1b9 0f00 	cmp.w	r9, #0
    18e2:	bf14      	ite	ne
    18e4:	f04f 0a01 	movne.w	sl, #1
    18e8:	f04f 0a00 	moveq.w	sl, #0
    18ec:	980f      	ldr	r0, [sp, #60]	; 0x3c
    18ee:	9014      	str	r0, [sp, #80]	; 0x50
    18f0:	f1ba 0f00 	cmp.w	sl, #0
    18f4:	d009      	beq.n	190a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    18f6:	48e6      	ldr	r0, [pc, #920]	; (1c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    18f8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    18fc:	b928      	cbnz	r0, 190a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    18fe:	f002 fea3 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1902:	2800      	cmp	r0, #0
    1904:	bf08      	it	eq
    1906:	2701      	moveq	r7, #1
    1908:	d000      	beq.n	190c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    190a:	2700      	movs	r7, #0
    190c:	48e1      	ldr	r0, [pc, #900]	; (1c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    190e:	2200      	movs	r2, #0
    1910:	9215      	str	r2, [sp, #84]	; 0x54
    1912:	7800      	ldrb	r0, [r0, #0]
    1914:	4616      	mov	r6, r2
    1916:	2801      	cmp	r0, #1
    1918:	bf18      	it	ne
    191a:	2803      	cmpne	r0, #3
    191c:	d140      	bne.n	19a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    191e:	48dd      	ldr	r0, [pc, #884]	; (1c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    1920:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    1924:	eba8 0009 	sub.w	r0, r8, r9
    1928:	9015      	str	r0, [sp, #84]	; 0x54
    192a:	45c8      	cmp	r8, r9
    192c:	d938      	bls.n	19a0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    192e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1930:	ea6f 0108 	mvn.w	r1, r8
    1934:	f8df e360 	ldr.w	lr, [pc, #864]	; 1c98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>
    1938:	1858      	adds	r0, r3, r1
    193a:	f10d 0c0c 	add.w	ip, sp, #12
    193e:	aa17      	add	r2, sp, #92	; 0x5c
    1940:	4573      	cmp	r3, lr
    1942:	d904      	bls.n	194e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56a>
    1944:	f240 6109 	movw	r1, #1545	; 0x609
    1948:	2070      	movs	r0, #112	; 0x70
    194a:	f002 fef5 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    194e:	4bd3      	ldr	r3, [pc, #844]	; (1c9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1950:	4299      	cmp	r1, r3
    1952:	dd04      	ble.n	195e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x57a>
    1954:	f240 610a 	movw	r1, #1546	; 0x60a
    1958:	2070      	movs	r0, #112	; 0x70
    195a:	f002 feed 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    195e:	4bd0      	ldr	r3, [pc, #832]	; (1ca0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1960:	4299      	cmp	r1, r3
    1962:	da04      	bge.n	196e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x58a>
    1964:	f240 610b 	movw	r1, #1547	; 0x60b
    1968:	2070      	movs	r0, #112	; 0x70
    196a:	f002 fee5 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    196e:	49cd      	ldr	r1, [pc, #820]	; (1ca4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    1970:	4281      	cmp	r1, r0
    1972:	bfdc      	itt	le
    1974:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1978:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    197c:	dd05      	ble.n	198a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a6>
    197e:	2800      	cmp	r0, #0
    1980:	bfbc      	itt	lt
    1982:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1986:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    198a:	4661      	mov	r1, ip
    198c:	f001 fe72 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1990:	9803      	ldr	r0, [sp, #12]
    1992:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1994:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1998:	9003      	str	r0, [sp, #12]
    199a:	1a08      	subs	r0, r1, r0
    199c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    19a0:	2f00      	cmp	r7, #0
    19a2:	bf18      	it	ne
    19a4:	2632      	movne	r6, #50	; 0x32
    19a6:	d104      	bne.n	19b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ce>
    19a8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    19ac:	2800      	cmp	r0, #0
    19ae:	bf18      	it	ne
    19b0:	2602      	movne	r6, #2
    19b2:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    19b6:	d008      	beq.n	19ca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    19b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    19ba:	1b00      	subs	r0, r0, r4
    19bc:	0200      	lsls	r0, r0, #8
    19be:	17c1      	asrs	r1, r0, #31
    19c0:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19c4:	1200      	asrs	r0, r0, #8
    19c6:	2801      	cmp	r0, #1
    19c8:	da02      	bge.n	19d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ec>
    19ca:	2004      	movs	r0, #4
    19cc:	9918      	ldr	r1, [sp, #96]	; 0x60
    19ce:	e00b      	b.n	19e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x604>
    19d0:	b147      	cbz	r7, 19e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    19d2:	48af      	ldr	r0, [pc, #700]	; (1c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    19d4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    19d8:	b120      	cbz	r0, 19e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    19da:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    19de:	1c06      	adds	r6, r0, #0
    19e0:	bf18      	it	ne
    19e2:	2602      	movne	r6, #2
    19e4:	4621      	mov	r1, r4
    19e6:	2001      	movs	r0, #1
    19e8:	f1b9 0f00 	cmp.w	r9, #0
    19ec:	d002      	beq.n	19f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    19ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
    19f0:	2b1e      	cmp	r3, #30
    19f2:	da02      	bge.n	19fa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    19f4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    19f8:	b113      	cbz	r3, 1a00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x61c>
    19fa:	f04f 0b00 	mov.w	fp, #0
    19fe:	1e40      	subs	r0, r0, #1
    1a00:	1983      	adds	r3, r0, r6
    1a02:	48a4      	ldr	r0, [pc, #656]	; (1c94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    1a04:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1a08:	7800      	ldrb	r0, [r0, #0]
    1a0a:	9015      	str	r0, [sp, #84]	; 0x54
    1a0c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1a0e:	1a80      	subs	r0, r0, r2
    1a10:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    1a14:	ebac 0001 	sub.w	r0, ip, r1
    1a18:	0200      	lsls	r0, r0, #8
    1a1a:	17c6      	asrs	r6, r0, #31
    1a1c:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    1a20:	1200      	asrs	r0, r0, #8
    1a22:	4298      	cmp	r0, r3
    1a24:	db18      	blt.n	1a58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    1a26:	2a00      	cmp	r2, #0
    1a28:	bf18      	it	ne
    1a2a:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1a2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1a30:	9705      	str	r7, [sp, #20]
    1a32:	2700      	movs	r7, #0
    1a34:	f001 ff7c 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a38:	1a30      	subs	r0, r6, r0
    1a3a:	0200      	lsls	r0, r0, #8
    1a3c:	17c1      	asrs	r1, r0, #31
    1a3e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a42:	1200      	asrs	r0, r0, #8
    1a44:	283e      	cmp	r0, #62	; 0x3e
    1a46:	da3f      	bge.n	1ac8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6e4>
    1a48:	2d01      	cmp	r5, #1
    1a4a:	d020      	beq.n	1a8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6aa>
    1a4c:	1e70      	subs	r0, r6, #1
    1a4e:	9905      	ldr	r1, [sp, #20]
    1a50:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a54:	b319      	cbz	r1, 1a9e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ba>
    1a56:	e02d      	b.n	1ab4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    1a58:	b182      	cbz	r2, 1a7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    1a5a:	f1be 0f00 	cmp.w	lr, #0
    1a5e:	bf04      	itt	eq
    1a60:	9815      	ldreq	r0, [sp, #84]	; 0x54
    1a62:	2803      	cmpeq	r0, #3
    1a64:	d00a      	beq.n	1a7c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    1a66:	b927      	cbnz	r7, 1a72 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68e>
    1a68:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1a6c:	2800      	cmp	r0, #0
    1a6e:	bf18      	it	ne
    1a70:	1e9b      	subne	r3, r3, #2
    1a72:	2200      	movs	r2, #0
    1a74:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1a78:	4690      	mov	r8, r2
    1a7a:	e7c7      	b.n	1a0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    1a7c:	bb07      	cbnz	r7, 1ac0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1a7e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1a82:	b1e8      	cbz	r0, 1ac0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1a84:	2000      	movs	r0, #0
    1a86:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    1a8a:	1e9b      	subs	r3, r3, #2
    1a8c:	e7be      	b.n	1a0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    1a8e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1a92:	d120      	bne.n	1ad6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    1a94:	f640 110d 	movw	r1, #2317	; 0x90d
    1a98:	2070      	movs	r0, #112	; 0x70
    1a9a:	f002 fe4d 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a9e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1aa2:	d007      	beq.n	1ab4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    1aa4:	1a21      	subs	r1, r4, r0
    1aa6:	0209      	lsls	r1, r1, #8
    1aa8:	17ca      	asrs	r2, r1, #31
    1aaa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1aae:	1209      	asrs	r1, r1, #8
    1ab0:	2904      	cmp	r1, #4
    1ab2:	dd03      	ble.n	1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d8>
    1ab4:	4604      	mov	r4, r0
    1ab6:	f001 ff41 	bl	393c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1aba:	e00c      	b.n	1ad6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    1abc:	2900      	cmp	r1, #0
    1abe:	dd0a      	ble.n	1ad6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    1ac0:	b01b      	add	sp, #108	; 0x6c
    1ac2:	2000      	movs	r0, #0
    1ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ac8:	1e70      	subs	r0, r6, #1
    1aca:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1ace:	4620      	mov	r0, r4
    1ad0:	f001 ff34 	bl	393c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1ad4:	4657      	mov	r7, sl
    1ad6:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1ada:	d024      	beq.n	1b26 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    1adc:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1ade:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1ae0:	1b00      	subs	r0, r0, r4
    1ae2:	1b1b      	subs	r3, r3, r4
    1ae4:	4a70      	ldr	r2, [pc, #448]	; (1ca8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    1ae6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1aea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1aee:	4583      	cmp	fp, r0
    1af0:	bf98      	it	ls
    1af2:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1af6:	d2e3      	bcs.n	1ac0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1af8:	429a      	cmp	r2, r3
    1afa:	d3e1      	bcc.n	1ac0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1afc:	4620      	mov	r0, r4
    1afe:	f00a fdb9 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b02:	4965      	ldr	r1, [pc, #404]	; (1c98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    1b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1b06:	1c4b      	adds	r3, r1, #1
    1b08:	1a16      	subs	r6, r2, r0
    1b0a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1b0e:	bf24      	itt	cs
    1b10:	eba0 0c02 	subcs.w	ip, r0, r2
    1b14:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1b18:	d310      	bcc.n	1b3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    1b1a:	42b1      	cmp	r1, r6
    1b1c:	d208      	bcs.n	1b30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1b1e:	1a08      	subs	r0, r1, r0
    1b20:	4410      	add	r0, r2
    1b22:	1c46      	adds	r6, r0, #1
    1b24:	e00a      	b.n	1b3c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    1b26:	f640 212d 	movw	r1, #2605	; 0xa2d
    1b2a:	2070      	movs	r0, #112	; 0x70
    1b2c:	f002 fe04 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b30:	4561      	cmp	r1, ip
    1b32:	d22c      	bcs.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7aa>
    1b34:	1a89      	subs	r1, r1, r2
    1b36:	4408      	add	r0, r1
    1b38:	1c40      	adds	r0, r0, #1
    1b3a:	4246      	negs	r6, r0
    1b3c:	4854      	ldr	r0, [pc, #336]	; (1c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    1b3e:	7f80      	ldrb	r0, [r0, #30]
    1b40:	b350      	cbz	r0, 1b98 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    1b42:	4628      	mov	r0, r5
    1b44:	4645      	mov	r5, r8
    1b46:	f04f 0b00 	mov.w	fp, #0
    1b4a:	46d8      	mov	r8, fp
    1b4c:	2801      	cmp	r0, #1
    1b4e:	d005      	beq.n	1b5c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x778>
    1b50:	2002      	movs	r0, #2
    1b52:	f002 f94b 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b56:	2001      	movs	r0, #1
    1b58:	f002 f948 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1b5c:	45a9      	cmp	r9, r5
    1b5e:	d227      	bcs.n	1bb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7cc>
    1b60:	eba6 0105 	sub.w	r1, r6, r5
    1b64:	f04f 0301 	mov.w	r3, #1
    1b68:	f04f 0203 	mov.w	r2, #3
    1b6c:	f04f 0002 	mov.w	r0, #2
    1b70:	f002 f868 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1b74:	2800      	cmp	r0, #0
    1b76:	bf08      	it	eq
    1b78:	f04f 0801 	moveq.w	r8, #1
    1b7c:	f1b9 0f00 	cmp.w	r9, #0
    1b80:	d030      	beq.n	1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    1b82:	2301      	movs	r3, #1
    1b84:	eba6 0109 	sub.w	r1, r6, r9
    1b88:	2203      	movs	r2, #3
    1b8a:	4618      	mov	r0, r3
    1b8c:	e01e      	b.n	1bcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e8>
    1b8e:	f640 310c 	movw	r1, #2828	; 0xb0c
    1b92:	2070      	movs	r0, #112	; 0x70
    1b94:	f002 fdd0 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b98:	45c1      	cmp	r9, r8
    1b9a:	bf34      	ite	cc
    1b9c:	4640      	movcc	r0, r8
    1b9e:	4648      	movcs	r0, r9
    1ba0:	4458      	add	r0, fp
    1ba2:	42b0      	cmp	r0, r6
    1ba4:	dbcd      	blt.n	1b42 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75e>
    1ba6:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    1baa:	2070      	movs	r0, #112	; 0x70
    1bac:	f002 fdc4 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bb0:	d910      	bls.n	1bd4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f0>
    1bb2:	2301      	movs	r3, #1
    1bb4:	eba6 0109 	sub.w	r1, r6, r9
    1bb8:	2203      	movs	r2, #3
    1bba:	4618      	mov	r0, r3
    1bbc:	f002 f842 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bc0:	b328      	cbz	r0, 1c0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1bc2:	b17d      	cbz	r5, 1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    1bc4:	1b71      	subs	r1, r6, r5
    1bc6:	2301      	movs	r3, #1
    1bc8:	2203      	movs	r2, #3
    1bca:	2002      	movs	r0, #2
    1bcc:	f002 f83a 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bd0:	b1e8      	cbz	r0, 1c0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1bd2:	e007      	b.n	1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    1bd4:	ea55 0009 	orrs.w	r0, r5, r9
    1bd8:	d004      	beq.n	1be4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x800>
    1bda:	f640 1177 	movw	r1, #2423	; 0x977
    1bde:	2070      	movs	r0, #112	; 0x70
    1be0:	f002 fdaa 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1be4:	2301      	movs	r3, #1
    1be6:	2203      	movs	r2, #3
    1be8:	4631      	mov	r1, r6
    1bea:	2000      	movs	r0, #0
    1bec:	f002 f82a 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bf0:	b168      	cbz	r0, 1c0e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1bf2:	2501      	movs	r5, #1
    1bf4:	f1b8 0f00 	cmp.w	r8, #0
    1bf8:	d003      	beq.n	1c02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x81e>
    1bfa:	9814      	ldr	r0, [sp, #80]	; 0x50
    1bfc:	900f      	str	r0, [sp, #60]	; 0x3c
    1bfe:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1c02:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1cac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>
    1c06:	f1ba 0f00 	cmp.w	sl, #0
    1c0a:	d10e      	bne.n	1c2a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x846>
    1c0c:	e009      	b.n	1c22 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x83e>
    1c0e:	2002      	movs	r0, #2
    1c10:	f002 f8ec 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c14:	2001      	movs	r0, #1
    1c16:	f002 f8e9 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c1a:	b01b      	add	sp, #108	; 0x6c
    1c1c:	2000      	movs	r0, #0
    1c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c22:	481b      	ldr	r0, [pc, #108]	; (1c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    1c24:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1c28:	b100      	cbz	r0, 1c2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x848>
    1c2a:	b34f      	cbz	r7, 1c80 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89c>
    1c2c:	f8df a060 	ldr.w	sl, [pc, #96]	; 1c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>
    1c30:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1c34:	b118      	cbz	r0, 1c3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    1c36:	f002 fbb1 	bl	439c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1c3a:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1c3e:	b307      	cbz	r7, 1c82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x89e>
    1c40:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1c44:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1c48:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1c4c:	f8c8 0000 	str.w	r0, [r8]
    1c50:	2300      	movs	r3, #0
    1c52:	2203      	movs	r2, #3
    1c54:	2005      	movs	r0, #5
    1c56:	f001 fff5 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c5a:	b368      	cbz	r0, 1cb8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    1c5c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1c60:	2005      	movs	r0, #5
    1c62:	f002 f98f 	bl	3f84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1c66:	4912      	ldr	r1, [pc, #72]	; (1cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    1c68:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1c6c:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1c70:	4910      	ldr	r1, [pc, #64]	; (1cb4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    1c72:	12e0      	asrs	r0, r4, #11
    1c74:	6008      	str	r0, [r1, #0]
    1c76:	4c06      	ldr	r4, [pc, #24]	; (1c90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    1c78:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1c7c:	b3e8      	cbz	r0, 1cfa <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x916>
    1c7e:	e030      	b.n	1ce2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    1c80:	e01b      	b.n	1cba <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d6>
    1c82:	e01f      	b.n	1cc4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    1c84:	40000508 	.word	0x40000508
    1c88:	20000010 	.word	0x20000010
    1c8c:	20000b34 	.word	0x20000b34
    1c90:	20000eb4 	.word	0x20000eb4
    1c94:	20000012 	.word	0x20000012
    1c98:	1e847fff 	.word	0x1e847fff
    1c9c:	07a12000 	.word	0x07a12000
    1ca0:	f85ee000 	.word	0xf85ee000
    1ca4:	1e848000 	.word	0x1e848000
    1ca8:	003fffff 	.word	0x003fffff
    1cac:	4001f508 	.word	0x4001f508
    1cb0:	4001f098 	.word	0x4001f098
    1cb4:	4001f504 	.word	0x4001f504
    1cb8:	e025      	b.n	1d06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x922>
    1cba:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1cbe:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1cc2:	b1c8      	cbz	r0, 1cf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x914>
    1cc4:	4c2b      	ldr	r4, [pc, #172]	; (1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>)
    1cc6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cca:	b150      	cbz	r0, 1ce2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    1ccc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1cd0:	f8c8 0000 	str.w	r0, [r8]
    1cd4:	2005      	movs	r0, #5
    1cd6:	f002 f889 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1cda:	f002 fbc7 	bl	446c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1cde:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1ce2:	eba6 0009 	sub.w	r0, r6, r9
    1ce6:	f1a0 0119 	sub.w	r1, r0, #25
    1cea:	2900      	cmp	r1, #0
    1cec:	dc15      	bgt.n	1d1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x936>
    1cee:	f640 2171 	movw	r1, #2673	; 0xa71
    1cf2:	2070      	movs	r0, #112	; 0x70
    1cf4:	f002 fd20 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cf8:	e000      	b.n	1cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x918>
    1cfa:	e009      	b.n	1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x92c>
    1cfc:	f002 fb6a 	bl	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d00:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1d04:	e79b      	b.n	1c3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x85a>
    1d06:	f240 313e 	movw	r1, #830	; 0x33e
    1d0a:	2070      	movs	r0, #112	; 0x70
    1d0c:	f002 fd14 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d10:	f002 fb9e 	bl	4450 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1d14:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1d18:	e7e3      	b.n	1ce2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8fe>
    1d1a:	2203      	movs	r2, #3
    1d1c:	2301      	movs	r3, #1
    1d1e:	4610      	mov	r0, r2
    1d20:	f001 ff90 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d24:	b308      	cbz	r0, 1d6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e>
    1d26:	4814      	ldr	r0, [pc, #80]	; (1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>)
    1d28:	6880      	ldr	r0, [r0, #8]
    1d2a:	f8c0 b000 	str.w	fp, [r0]
    1d2e:	4813      	ldr	r0, [pc, #76]	; (1d7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30>)
    1d30:	f8c0 b000 	str.w	fp, [r0]
    1d34:	ac0c      	add	r4, sp, #48	; 0x30
    1d36:	4812      	ldr	r0, [pc, #72]	; (1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>)
    1d38:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d3c:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1d40:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1d44:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1d48:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1d4c:	ac10      	add	r4, sp, #64	; 0x40
    1d4e:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d52:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1d56:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1d5a:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1d5e:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1d62:	b01b      	add	sp, #108	; 0x6c
    1d64:	2001      	movs	r0, #1
    1d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d6a:	f640 2179 	movw	r1, #2681	; 0xa79
    1d6e:	2070      	movs	r0, #112	; 0x70
    1d70:	f002 fce2 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d74:	20000eb4 	.word	0x20000eb4
    1d78:	20000010 	.word	0x20000010
    1d7c:	40000508 	.word	0x40000508
    1d80:	20000b34 	.word	0x20000b34
    1d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d88:	4606      	mov	r6, r0
    1d8a:	b083      	sub	sp, #12
    1d8c:	7808      	ldrb	r0, [r1, #0]
    1d8e:	7390      	strb	r0, [r2, #14]
    1d90:	7acf      	ldrb	r7, [r1, #11]
    1d92:	7357      	strb	r7, [r2, #13]
    1d94:	7a88      	ldrb	r0, [r1, #10]
    1d96:	7310      	strb	r0, [r2, #12]
    1d98:	8908      	ldrh	r0, [r1, #8]
    1d9a:	4614      	mov	r4, r2
    1d9c:	8150      	strh	r0, [r2, #10]
    1d9e:	460d      	mov	r5, r1
    1da0:	780a      	ldrb	r2, [r1, #0]
    1da2:	495f      	ldr	r1, [pc, #380]	; (1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>)
    1da4:	4699      	mov	r9, r3
    1da6:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1daa:	424b      	negs	r3, r1
    1dac:	f1ac 0801 	sub.w	r8, ip, #1
    1db0:	b15a      	cbz	r2, 1dca <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1db2:	43c0      	mvns	r0, r0
    1db4:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1db8:	f104 0208 	add.w	r2, r4, #8
    1dbc:	4288      	cmp	r0, r1
    1dbe:	dd3d      	ble.n	1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1dc0:	f240 610a 	movw	r1, #1546	; 0x60a
    1dc4:	2070      	movs	r0, #112	; 0x70
    1dc6:	f002 fcb7 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dca:	68ee      	ldr	r6, [r5, #12]
    1dcc:	686d      	ldr	r5, [r5, #4]
    1dce:	ea6f 0900 	mvn.w	r9, r0
    1dd2:	f104 0208 	add.w	r2, r4, #8
    1dd6:	eb06 0009 	add.w	r0, r6, r9
    1dda:	4546      	cmp	r6, r8
    1ddc:	d904      	bls.n	1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1dde:	f240 6109 	movw	r1, #1545	; 0x609
    1de2:	2070      	movs	r0, #112	; 0x70
    1de4:	f002 fca8 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1de8:	4589      	cmp	r9, r1
    1dea:	dce9      	bgt.n	1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1dec:	4599      	cmp	r9, r3
    1dee:	db28      	blt.n	1e42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf6>
    1df0:	4584      	cmp	ip, r0
    1df2:	bfdc      	itt	le
    1df4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1df8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1dfc:	dd05      	ble.n	1e0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbe>
    1dfe:	2800      	cmp	r0, #0
    1e00:	bfbc      	itt	lt
    1e02:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e06:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e0a:	4621      	mov	r1, r4
    1e0c:	f001 fc32 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e10:	6820      	ldr	r0, [r4, #0]
    1e12:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e16:	1970      	adds	r0, r6, r5
    1e18:	1c40      	adds	r0, r0, #1
    1e1a:	6021      	str	r1, [r4, #0]
    1e1c:	2f00      	cmp	r7, #0
    1e1e:	bf08      	it	eq
    1e20:	307a      	addeq	r0, #122	; 0x7a
    1e22:	d003      	beq.n	1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>
    1e24:	2f01      	cmp	r7, #1
    1e26:	bf08      	it	eq
    1e28:	3048      	addeq	r0, #72	; 0x48
    1e2a:	d12d      	bne.n	1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e2c:	f001 fc06 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e34:	6060      	str	r0, [r4, #4]
    1e36:	b003      	add	sp, #12
    1e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e3c:	4601      	mov	r1, r0
    1e3e:	4298      	cmp	r0, r3
    1e40:	da04      	bge.n	1e4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x100>
    1e42:	f240 610b 	movw	r1, #1547	; 0x60b
    1e46:	2070      	movs	r0, #112	; 0x70
    1e48:	f002 fc76 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e4c:	4584      	cmp	ip, r0
    1e4e:	bfdc      	itt	le
    1e50:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1e54:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1e58:	dd05      	ble.n	1e66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	bfbc      	itt	lt
    1e5e:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1e62:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1e66:	4621      	mov	r1, r4
    1e68:	f001 fc04 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e6c:	6820      	ldr	r0, [r4, #0]
    1e6e:	2f00      	cmp	r7, #0
    1e70:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e74:	f108 0001 	add.w	r0, r8, #1
    1e78:	6021      	str	r1, [r4, #0]
    1e7a:	bf08      	it	eq
    1e7c:	307a      	addeq	r0, #122	; 0x7a
    1e7e:	d008      	beq.n	1e92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x146>
    1e80:	2f01      	cmp	r7, #1
    1e82:	bf08      	it	eq
    1e84:	3048      	addeq	r0, #72	; 0x48
    1e86:	d004      	beq.n	1e92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x146>
    1e88:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1e8c:	2070      	movs	r0, #112	; 0x70
    1e8e:	f002 fc53 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e92:	f001 fbd3 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e96:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e9a:	6061      	str	r1, [r4, #4]
    1e9c:	8960      	ldrh	r0, [r4, #10]
    1e9e:	aa01      	add	r2, sp, #4
    1ea0:	4669      	mov	r1, sp
    1ea2:	f001 fbe7 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ea6:	481f      	ldr	r0, [pc, #124]	; (1f24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d8>)
    1ea8:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1eac:	2920      	cmp	r1, #32
    1eae:	d023      	beq.n	1ef8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ac>
    1eb0:	6900      	ldr	r0, [r0, #16]
    1eb2:	1d40      	adds	r0, r0, #5
    1eb4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1eb8:	e9d4 2100 	ldrd	r2, r1, [r4]
    1ebc:	1a89      	subs	r1, r1, r2
    1ebe:	6020      	str	r0, [r4, #0]
    1ec0:	4408      	add	r0, r1
    1ec2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1ec6:	6060      	str	r0, [r4, #4]
    1ec8:	464b      	mov	r3, r9
    1eca:	4632      	mov	r2, r6
    1ecc:	4621      	mov	r1, r4
    1ece:	68e8      	ldr	r0, [r5, #12]
    1ed0:	f7ff fad2 	bl	1478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1ed4:	2800      	cmp	r0, #0
    1ed6:	bf1c      	itt	ne
    1ed8:	b003      	addne	sp, #12
    1eda:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1ede:	e9d4 1000 	ldrd	r1, r0, [r4]
    1ee2:	1a40      	subs	r0, r0, r1
    1ee4:	4430      	add	r0, r6
    1ee6:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1eea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1eee:	e9c4 1000 	strd	r1, r0, [r4]
    1ef2:	b003      	add	sp, #12
    1ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1ef8:	8960      	ldrh	r0, [r4, #10]
    1efa:	f106 0709 	add.w	r7, r6, #9
    1efe:	b120      	cbz	r0, 1f0a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1be>
    1f00:	f002 fba2 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f04:	2800      	cmp	r0, #0
    1f06:	bf08      	it	eq
    1f08:	3732      	addeq	r7, #50	; 0x32
    1f0a:	4807      	ldr	r0, [pc, #28]	; (1f28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1dc>)
    1f0c:	7841      	ldrb	r1, [r0, #1]
    1f0e:	9800      	ldr	r0, [sp, #0]
    1f10:	4281      	cmp	r1, r0
    1f12:	bf84      	itt	hi
    1f14:	1a08      	subhi	r0, r1, r0
    1f16:	4407      	addhi	r7, r0
    1f18:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1f1c:	e7cc      	b.n	1eb8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x16c>
    1f1e:	0000      	.short	0x0000
    1f20:	07a12000 	.word	0x07a12000
    1f24:	20000eb4 	.word	0x20000eb4
    1f28:	20000012 	.word	0x20000012
    1f2c:	b510      	push	{r4, lr}
    1f2e:	4c15      	ldr	r4, [pc, #84]	; (1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1f30:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f34:	2820      	cmp	r0, #32
    1f36:	bf18      	it	ne
    1f38:	bd10      	popne	{r4, pc}
    1f3a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1f3e:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1f42:	f890 1020 	ldrb.w	r1, [r0, #32]
    1f46:	2920      	cmp	r1, #32
    1f48:	d017      	beq.n	1f7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22e>
    1f4a:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1f88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    1f4e:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1f52:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1f56:	785b      	ldrb	r3, [r3, #1]
    1f58:	f880 3020 	strb.w	r3, [r0, #32]
    1f5c:	2301      	movs	r3, #1
    1f5e:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1f62:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1f66:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1f6a:	2002      	movs	r0, #2
    1f6c:	f000 f8b0 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    1f70:	2000      	movs	r0, #0
    1f72:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1f76:	77a0      	strb	r0, [r4, #30]
    1f78:	bd10      	pop	{r4, pc}
    1f7a:	f240 318b 	movw	r1, #907	; 0x38b
    1f7e:	2070      	movs	r0, #112	; 0x70
    1f80:	f002 fbda 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f84:	20000eb4 	.word	0x20000eb4
    1f88:	20000e34 	.word	0x20000e34
    1f8c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1f90:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 204c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x300>
    1f94:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1f98:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1f9c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1fa0:	2c20      	cmp	r4, #32
    1fa2:	bf08      	it	eq
    1fa4:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1fa8:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 2050 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x304>
    1fac:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 2054 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x308>
    1fb0:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1fb4:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1fb8:	2607      	movs	r6, #7
    1fba:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    1fbe:	2801      	cmp	r0, #1
    1fc0:	d00e      	beq.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fc2:	2804      	cmp	r0, #4
    1fc4:	bf08      	it	eq
    1fc6:	2602      	moveq	r6, #2
    1fc8:	d00a      	beq.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fca:	2805      	cmp	r0, #5
    1fcc:	bf0c      	ite	eq
    1fce:	2603      	moveq	r6, #3
    1fd0:	2806      	cmpne	r0, #6
    1fd2:	d005      	beq.n	1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>
    1fd4:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1fd8:	f04f 0070 	mov.w	r0, #112	; 0x70
    1fdc:	f002 fbac 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe0:	f1bb 0f00 	cmp.w	fp, #0
    1fe4:	bf18      	it	ne
    1fe6:	f3af 8000 	nopne.w
    1fea:	f3ef 8010 	mrs	r0, PRIMASK
    1fee:	b672      	cpsid	i
    1ff0:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1ff4:	784a      	ldrb	r2, [r1, #1]
    1ff6:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1ffa:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    1ffe:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    2002:	42a2      	cmp	r2, r4
    2004:	bf04      	itt	eq
    2006:	2220      	moveq	r2, #32
    2008:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    200c:	b1b8      	cbz	r0, 203e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f2>
    200e:	462a      	mov	r2, r5
    2010:	4621      	mov	r1, r4
    2012:	2001      	movs	r0, #1
    2014:	f000 f85c 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    2018:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    201c:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    2020:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2024:	6840      	ldr	r0, [r0, #4]
    2026:	4631      	mov	r1, r6
    2028:	4790      	blx	r2
    202a:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    202e:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    2032:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2036:	2c20      	cmp	r4, #32
    2038:	d1bc      	bne.n	1fb4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x268>
    203a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    203e:	4806      	ldr	r0, [pc, #24]	; (2058 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x30c>)
    2040:	2800      	cmp	r0, #0
    2042:	bf18      	it	ne
    2044:	f3af 8000 	nopne.w
    2048:	b662      	cpsie	i
    204a:	e7e0      	b.n	200e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c2>
    204c:	20000eb4 	.word	0x20000eb4
    2050:	00000000 	.word	0x00000000
    2054:	20000e34 	.word	0x20000e34
    2058:	00000000 	.word	0x00000000
    205c:	b510      	push	{r4, lr}
    205e:	4604      	mov	r4, r0
    2060:	6800      	ldr	r0, [r0, #0]
    2062:	f00a fb07 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2066:	4602      	mov	r2, r0
    2068:	8960      	ldrh	r0, [r4, #10]
    206a:	7a21      	ldrb	r1, [r4, #8]
    206c:	4b14      	ldr	r3, [pc, #80]	; (20c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x374>)
    206e:	4408      	add	r0, r1
    2070:	1c41      	adds	r1, r0, #1
    2072:	1850      	adds	r0, r2, r1
    2074:	429a      	cmp	r2, r3
    2076:	d904      	bls.n	2082 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x336>
    2078:	f240 6109 	movw	r1, #1545	; 0x609
    207c:	2070      	movs	r0, #112	; 0x70
    207e:	f002 fb5b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2082:	4a10      	ldr	r2, [pc, #64]	; (20c4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x378>)
    2084:	4291      	cmp	r1, r2
    2086:	dd04      	ble.n	2092 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x346>
    2088:	f240 610a 	movw	r1, #1546	; 0x60a
    208c:	2070      	movs	r0, #112	; 0x70
    208e:	f002 fb53 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2092:	4a0d      	ldr	r2, [pc, #52]	; (20c8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x37c>)
    2094:	4291      	cmp	r1, r2
    2096:	da04      	bge.n	20a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x356>
    2098:	f240 610b 	movw	r1, #1547	; 0x60b
    209c:	2070      	movs	r0, #112	; 0x70
    209e:	f002 fb4b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20a2:	490a      	ldr	r1, [pc, #40]	; (20cc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x380>)
    20a4:	4281      	cmp	r1, r0
    20a6:	bfde      	ittt	le
    20a8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    20ac:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    20b0:	bd10      	pople	{r4, pc}
    20b2:	2800      	cmp	r0, #0
    20b4:	bfbc      	itt	lt
    20b6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    20ba:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    20be:	bd10      	pop	{r4, pc}
    20c0:	1e847fff 	.word	0x1e847fff
    20c4:	07a12000 	.word	0x07a12000
    20c8:	f85ee000 	.word	0xf85ee000
    20cc:	1e848000 	.word	0x1e848000
    20d0:	f8df c054 	ldr.w	ip, [pc, #84]	; 2128 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3dc>
    20d4:	b510      	push	{r4, lr}
    20d6:	2300      	movs	r3, #0
    20d8:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    20dc:	2807      	cmp	r0, #7
    20de:	d21e      	bcs.n	211e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d2>
    20e0:	e8df f000 	tbb	[pc, r0]
    20e4:	05050505 	.word	0x05050505
    20e8:	00040404 	.word	0x00040404
    20ec:	2301      	movs	r3, #1
    20ee:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    20f2:	2b00      	cmp	r3, #0
    20f4:	bf08      	it	eq
    20f6:	bd10      	popeq	{r4, pc}
    20f8:	480c      	ldr	r0, [pc, #48]	; (212c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>)
    20fa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    20fe:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2102:	2820      	cmp	r0, #32
    2104:	bf0e      	itee	eq
    2106:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    210a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    210e:	7041      	strbne	r1, [r0, #1]
    2110:	2020      	movs	r0, #32
    2112:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2116:	7058      	strb	r0, [r3, #1]
    2118:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    211c:	bd10      	pop	{r4, pc}
    211e:	f44f 7115 	mov.w	r1, #596	; 0x254
    2122:	2070      	movs	r0, #112	; 0x70
    2124:	f002 fb08 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2128:	20000e34 	.word	0x20000e34
    212c:	20000eb4 	.word	0x20000eb4
    2130:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2134:	b083      	sub	sp, #12
    2136:	485c      	ldr	r0, [pc, #368]	; (22a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>)
    2138:	9904      	ldr	r1, [sp, #16]
    213a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    213e:	9001      	str	r0, [sp, #4]
    2140:	f890 4020 	ldrb.w	r4, [r0, #32]
    2144:	9803      	ldr	r0, [sp, #12]
    2146:	4625      	mov	r5, r4
    2148:	2801      	cmp	r0, #1
    214a:	bf18      	it	ne
    214c:	2802      	cmpne	r0, #2
    214e:	d005      	beq.n	215c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x410>
    2150:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    2154:	f04f 0070 	mov.w	r0, #112	; 0x70
    2158:	f002 faee 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    215c:	2700      	movs	r7, #0
    215e:	2d20      	cmp	r5, #32
    2160:	d04a      	beq.n	21f8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ac>
    2162:	4851      	ldr	r0, [pc, #324]	; (22a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>)
    2164:	9100      	str	r1, [sp, #0]
    2166:	2600      	movs	r6, #0
    2168:	7f80      	ldrb	r0, [r0, #30]
    216a:	2800      	cmp	r0, #0
    216c:	bf08      	it	eq
    216e:	2602      	moveq	r6, #2
    2170:	f001 fbde 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2174:	f8df a138 	ldr.w	sl, [pc, #312]	; 22b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x564>
    2178:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    217c:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2180:	f8df 9128 	ldr.w	r9, [pc, #296]	; 22ac <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x560>
    2184:	688a      	ldr	r2, [r1, #8]
    2186:	68c9      	ldr	r1, [r1, #12]
    2188:	1a12      	subs	r2, r2, r0
    218a:	1a09      	subs	r1, r1, r0
    218c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2190:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2194:	4296      	cmp	r6, r2
    2196:	bf98      	it	ls
    2198:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    219c:	d201      	bcs.n	21a2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x456>
    219e:	4589      	cmp	r9, r1
    21a0:	d228      	bcs.n	21f4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a8>
    21a2:	4a44      	ldr	r2, [pc, #272]	; (22b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x568>)
    21a4:	9900      	ldr	r1, [sp, #0]
    21a6:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    21aa:	4622      	mov	r2, r4
    21ac:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    21b0:	784c      	ldrb	r4, [r1, #1]
    21b2:	2c20      	cmp	r4, #32
    21b4:	d016      	beq.n	21e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x498>
    21b6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21ba:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    21be:	f8dc 8008 	ldr.w	r8, [ip, #8]
    21c2:	f8dc c00c 	ldr.w	ip, [ip, #12]
    21c6:	eba8 0800 	sub.w	r8, r8, r0
    21ca:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    21ce:	ebac 0100 	sub.w	r1, ip, r0
    21d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21d6:	4546      	cmp	r6, r8
    21d8:	bf98      	it	ls
    21da:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    21de:	d2e4      	bcs.n	21aa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x45e>
    21e0:	4589      	cmp	r9, r1
    21e2:	d3e2      	bcc.n	21aa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x45e>
    21e4:	2a20      	cmp	r2, #32
    21e6:	d005      	beq.n	21f4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a8>
    21e8:	2120      	movs	r1, #32
    21ea:	2004      	movs	r0, #4
    21ec:	9b00      	ldr	r3, [sp, #0]
    21ee:	f7ff f907 	bl	1400 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    21f2:	4604      	mov	r4, r0
    21f4:	42ac      	cmp	r4, r5
    21f6:	d115      	bne.n	2224 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d8>
    21f8:	482f      	ldr	r0, [pc, #188]	; (22b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56c>)
    21fa:	2800      	cmp	r0, #0
    21fc:	bf18      	it	ne
    21fe:	f3af 8000 	nopne.w
    2202:	f001 fb95 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2206:	4c28      	ldr	r4, [pc, #160]	; (22a8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>)
    2208:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    220c:	2920      	cmp	r1, #32
    220e:	d00d      	beq.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    2210:	68e1      	ldr	r1, [r4, #12]
    2212:	1c82      	adds	r2, r0, #2
    2214:	1a51      	subs	r1, r2, r1
    2216:	0209      	lsls	r1, r1, #8
    2218:	17ca      	asrs	r2, r1, #31
    221a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    221e:	1209      	asrs	r1, r1, #8
    2220:	2900      	cmp	r1, #0
    2222:	dd03      	ble.n	222c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e0>
    2224:	b005      	add	sp, #20
    2226:	2000      	movs	r0, #0
    2228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    222c:	2d20      	cmp	r5, #32
    222e:	d00d      	beq.n	224c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x500>
    2230:	462a      	mov	r2, r5
    2232:	9903      	ldr	r1, [sp, #12]
    2234:	f7ff fb1c 	bl	1870 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2238:	b358      	cbz	r0, 2292 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x546>
    223a:	9801      	ldr	r0, [sp, #4]
    223c:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    2240:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    2244:	b005      	add	sp, #20
    2246:	2001      	movs	r0, #1
    2248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    224c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2250:	b118      	cbz	r0, 225a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50e>
    2252:	f002 f8a3 	bl	439c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    2256:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    225a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    225e:	b150      	cbz	r0, 2276 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52a>
    2260:	4916      	ldr	r1, [pc, #88]	; (22bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x570>)
    2262:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2266:	6008      	str	r0, [r1, #0]
    2268:	2005      	movs	r0, #5
    226a:	f001 fdbf 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    226e:	f002 f8fd 	bl	446c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    2272:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    2276:	2004      	movs	r0, #4
    2278:	f001 fdb8 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    227c:	f001 fe24 	bl	3ec8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2280:	2020      	movs	r0, #32
    2282:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2286:	480e      	ldr	r0, [pc, #56]	; (22c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x574>)
    2288:	6880      	ldr	r0, [r0, #8]
    228a:	6007      	str	r7, [r0, #0]
    228c:	480d      	ldr	r0, [pc, #52]	; (22c4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x578>)
    228e:	6007      	str	r7, [r0, #0]
    2290:	e7d8      	b.n	2244 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f8>
    2292:	462a      	mov	r2, r5
    2294:	2120      	movs	r1, #32
    2296:	2004      	movs	r0, #4
    2298:	9b04      	ldr	r3, [sp, #16]
    229a:	f7ff f8b1 	bl	1400 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    229e:	b005      	add	sp, #20
    22a0:	2000      	movs	r0, #0
    22a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a6:	0000      	.short	0x0000
    22a8:	20000eb4 	.word	0x20000eb4
    22ac:	003fffff 	.word	0x003fffff
    22b0:	20000b34 	.word	0x20000b34
    22b4:	20000e34 	.word	0x20000e34
    22b8:	00000000 	.word	0x00000000
    22bc:	4001f508 	.word	0x4001f508
    22c0:	20000010 	.word	0x20000010
    22c4:	40000508 	.word	0x40000508

000022c8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    22c8:	4906      	ldr	r1, [pc, #24]	; (22e4 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    22ca:	b510      	push	{r4, lr}
    22cc:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    22d0:	2a20      	cmp	r2, #32
    22d2:	bf1c      	itt	ne
    22d4:	7788      	strbne	r0, [r1, #30]
    22d6:	bd10      	popne	{r4, pc}
    22d8:	f240 31ea 	movw	r1, #1002	; 0x3ea
    22dc:	2070      	movs	r0, #112	; 0x70
    22de:	f002 fa2b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22e2:	0000      	.short	0x0000
    22e4:	20000eb4 	.word	0x20000eb4

000022e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    22e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22ec:	4e5b      	ldr	r6, [pc, #364]	; (245c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    22ee:	4681      	mov	r9, r0
    22f0:	b085      	sub	sp, #20
    22f2:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    22f6:	468a      	mov	sl, r1
    22f8:	2820      	cmp	r0, #32
    22fa:	d04d      	beq.n	2398 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    22fc:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2300:	f106 040c 	add.w	r4, r6, #12
    2304:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2308:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    230c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2310:	2020      	movs	r0, #32
    2312:	f88d 0000 	strb.w	r0, [sp]
    2316:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    231a:	aa03      	add	r2, sp, #12
    231c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2320:	a901      	add	r1, sp, #4
    2322:	f890 5020 	ldrb.w	r5, [r0, #32]
    2326:	6930      	ldr	r0, [r6, #16]
    2328:	9002      	str	r0, [sp, #8]
    232a:	6830      	ldr	r0, [r6, #0]
    232c:	4448      	add	r0, r9
    232e:	f001 f9a1 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2332:	68f8      	ldr	r0, [r7, #12]
    2334:	9901      	ldr	r1, [sp, #4]
    2336:	4a4a      	ldr	r2, [pc, #296]	; (2460 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    2338:	4408      	add	r0, r1
    233a:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    233e:	4291      	cmp	r1, r2
    2340:	d82f      	bhi.n	23a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    2342:	68b9      	ldr	r1, [r7, #8]
    2344:	1a41      	subs	r1, r0, r1
    2346:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    234a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    234e:	d228      	bcs.n	23a2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    2350:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2354:	6060      	str	r0, [r4, #4]
    2356:	4630      	mov	r0, r6
    2358:	f884 a00c 	strb.w	sl, [r4, #12]
    235c:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    2360:	46ea      	mov	sl, sp
    2362:	2d20      	cmp	r5, #32
    2364:	bf1c      	itt	ne
    2366:	493f      	ldrne	r1, [pc, #252]	; (2464 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2368:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    236c:	d03c      	beq.n	23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    236e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2372:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2376:	6860      	ldr	r0, [r4, #4]
    2378:	68ba      	ldr	r2, [r7, #8]
    237a:	4621      	mov	r1, r4
    237c:	1a10      	subs	r0, r2, r0
    237e:	0200      	lsls	r0, r0, #8
    2380:	17c2      	asrs	r2, r0, #31
    2382:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2386:	f107 0608 	add.w	r6, r7, #8
    238a:	1200      	asrs	r0, r0, #8
    238c:	d41b      	bmi.n	23c6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    238e:	8970      	ldrh	r0, [r6, #10]
    2390:	b350      	cbz	r0, 23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2392:	8948      	ldrh	r0, [r1, #10]
    2394:	b148      	cbz	r0, 23aa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2396:	e027      	b.n	23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2398:	f640 317b 	movw	r1, #2939	; 0xb7b
    239c:	2070      	movs	r0, #112	; 0x70
    239e:	f002 f9cb 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23a2:	b005      	add	sp, #20
    23a4:	2001      	movs	r0, #1
    23a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23aa:	4620      	mov	r0, r4
    23ac:	f7ff fe56 	bl	205c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x310>
    23b0:	f001 f944 	bl	363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    23b4:	6831      	ldr	r1, [r6, #0]
    23b6:	1a08      	subs	r0, r1, r0
    23b8:	0200      	lsls	r0, r0, #8
    23ba:	17c1      	asrs	r1, r0, #31
    23bc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    23c0:	1200      	asrs	r0, r0, #8
    23c2:	2833      	cmp	r0, #51	; 0x33
    23c4:	da10      	bge.n	23e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23c6:	f88a 5000 	strb.w	r5, [sl]
    23ca:	7d39      	ldrb	r1, [r7, #20]
    23cc:	7b20      	ldrb	r0, [r4, #12]
    23ce:	4281      	cmp	r1, r0
    23d0:	d805      	bhi.n	23de <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    23d2:	9802      	ldr	r0, [sp, #8]
    23d4:	6060      	str	r0, [r4, #4]
    23d6:	b005      	add	sp, #20
    23d8:	2002      	movs	r0, #2
    23da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23de:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    23e2:	7845      	ldrb	r5, [r0, #1]
    23e4:	2d20      	cmp	r5, #32
    23e6:	d1c2      	bne.n	236e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    23e8:	2005      	movs	r0, #5
    23ea:	f001 fcff 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23ee:	4c1b      	ldr	r4, [pc, #108]	; (245c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    23f0:	f04f 30ff 	mov.w	r0, #4294967295
    23f4:	60a0      	str	r0, [r4, #8]
    23f6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    23fa:	f89d 2000 	ldrb.w	r2, [sp]
    23fe:	2120      	movs	r1, #32
    2400:	2a20      	cmp	r2, #32
    2402:	bf13      	iteet	ne
    2404:	2005      	movne	r0, #5
    2406:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    240a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    240e:	f7fe fff7 	blne	1400 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2412:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2416:	4913      	ldr	r1, [pc, #76]	; (2464 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2418:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    241c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    2420:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2424:	7048      	strb	r0, [r1, #1]
    2426:	6820      	ldr	r0, [r4, #0]
    2428:	4448      	add	r0, r9
    242a:	6020      	str	r0, [r4, #0]
    242c:	2001      	movs	r0, #1
    242e:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    2432:	7e60      	ldrb	r0, [r4, #25]
    2434:	2801      	cmp	r0, #1
    2436:	d105      	bne.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    2438:	6920      	ldr	r0, [r4, #16]
    243a:	1e40      	subs	r0, r0, #1
    243c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2440:	f001 fb1a 	bl	3a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2444:	f89d 0000 	ldrb.w	r0, [sp]
    2448:	2820      	cmp	r0, #32
    244a:	d003      	beq.n	2454 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    244c:	4806      	ldr	r0, [pc, #24]	; (2468 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    244e:	7840      	ldrb	r0, [r0, #1]
    2450:	f002 fa42 	bl	48d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2454:	b005      	add	sp, #20
    2456:	2000      	movs	r0, #0
    2458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    245c:	20000eb4 	.word	0x20000eb4
    2460:	07a11f9b 	.word	0x07a11f9b
    2464:	20000e34 	.word	0x20000e34
    2468:	20000010 	.word	0x20000010

0000246c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    246c:	4806      	ldr	r0, [pc, #24]	; (2488 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    246e:	b510      	push	{r4, lr}
    2470:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2474:	2920      	cmp	r1, #32
    2476:	bf1c      	itt	ne
    2478:	7e00      	ldrbne	r0, [r0, #24]
    247a:	bd10      	popne	{r4, pc}
    247c:	f640 3174 	movw	r1, #2932	; 0xb74
    2480:	2070      	movs	r0, #112	; 0x70
    2482:	f002 f959 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2486:	0000      	.short	0x0000
    2488:	20000eb4 	.word	0x20000eb4

0000248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    248c:	4602      	mov	r2, r0
    248e:	4b14      	ldr	r3, [pc, #80]	; (24e0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2490:	b510      	push	{r4, lr}
    2492:	4408      	add	r0, r1
    2494:	429a      	cmp	r2, r3
    2496:	d904      	bls.n	24a2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2498:	f240 6109 	movw	r1, #1545	; 0x609
    249c:	2070      	movs	r0, #112	; 0x70
    249e:	f002 f94b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24a2:	4a10      	ldr	r2, [pc, #64]	; (24e4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    24a4:	4291      	cmp	r1, r2
    24a6:	dd04      	ble.n	24b2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    24a8:	f240 610a 	movw	r1, #1546	; 0x60a
    24ac:	2070      	movs	r0, #112	; 0x70
    24ae:	f002 f943 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24b2:	4a0d      	ldr	r2, [pc, #52]	; (24e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    24b4:	4291      	cmp	r1, r2
    24b6:	da04      	bge.n	24c2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    24b8:	f240 610b 	movw	r1, #1547	; 0x60b
    24bc:	2070      	movs	r0, #112	; 0x70
    24be:	f002 f93b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24c2:	490a      	ldr	r1, [pc, #40]	; (24ec <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    24c4:	4281      	cmp	r1, r0
    24c6:	bfde      	ittt	le
    24c8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    24cc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    24d0:	bd10      	pople	{r4, pc}
    24d2:	2800      	cmp	r0, #0
    24d4:	bfbc      	itt	lt
    24d6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    24da:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    24de:	bd10      	pop	{r4, pc}
    24e0:	1e847fff 	.word	0x1e847fff
    24e4:	07a12000 	.word	0x07a12000
    24e8:	f85ee000 	.word	0xf85ee000
    24ec:	1e848000 	.word	0x1e848000

000024f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    24f0:	4a10      	ldr	r2, [pc, #64]	; (2534 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    24f2:	1a0b      	subs	r3, r1, r0
    24f4:	f102 0c01 	add.w	ip, r2, #1
    24f8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    24fc:	bf3c      	itt	cc
    24fe:	4618      	movcc	r0, r3
    2500:	4770      	bxcc	lr
    2502:	b510      	push	{r4, lr}
    2504:	1a44      	subs	r4, r0, r1
    2506:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    250a:	bf3c      	itt	cc
    250c:	4618      	movcc	r0, r3
    250e:	bd10      	popcc	{r4, pc}
    2510:	429a      	cmp	r2, r3
    2512:	d203      	bcs.n	251c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2514:	1a10      	subs	r0, r2, r0
    2516:	4408      	add	r0, r1
    2518:	1c40      	adds	r0, r0, #1
    251a:	bd10      	pop	{r4, pc}
    251c:	42a2      	cmp	r2, r4
    251e:	d204      	bcs.n	252a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2520:	1a51      	subs	r1, r2, r1
    2522:	4408      	add	r0, r1
    2524:	1c40      	adds	r0, r0, #1
    2526:	4240      	negs	r0, r0
    2528:	bd10      	pop	{r4, pc}
    252a:	f640 310c 	movw	r1, #2828	; 0xb0c
    252e:	2070      	movs	r0, #112	; 0x70
    2530:	f002 f902 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2534:	1e847fff 	.word	0x1e847fff

00002538 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2538:	490e      	ldr	r1, [pc, #56]	; (2574 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    253a:	b510      	push	{r4, lr}
    253c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2540:	2820      	cmp	r0, #32
    2542:	d012      	beq.n	256a <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    2544:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2548:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    254c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2550:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    2554:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2558:	6840      	ldr	r0, [r0, #4]
    255a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    255e:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    2562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2566:	2104      	movs	r1, #4
    2568:	4710      	bx	r2
    256a:	f640 01bc 	movw	r1, #2236	; 0x8bc
    256e:	2070      	movs	r0, #112	; 0x70
    2570:	f002 f8e2 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2574:	20000eb4 	.word	0x20000eb4

00002578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    257a:	4d6d      	ldr	r5, [pc, #436]	; (2730 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    257c:	496d      	ldr	r1, [pc, #436]	; (2734 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    257e:	2601      	movs	r6, #1
    2580:	f505 7460 	add.w	r4, r5, #896	; 0x380
    2584:	2808      	cmp	r0, #8
    2586:	d273      	bcs.n	2670 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    2588:	e8df f000 	tbb	[pc, r0]
    258c:	af9d6704 	.word	0xaf9d6704
    2590:	b9b444cd 	.word	0xb9b444cd
    2594:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2598:	b918      	cbnz	r0, 25a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    259a:	f001 ff1b 	bl	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    259e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    25a2:	8ae0      	ldrh	r0, [r4, #22]
    25a4:	b110      	cbz	r0, 25ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    25a6:	f002 f84f 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    25aa:	b188      	cbz	r0, 25d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    25ac:	f7ff fcbe 	bl	1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    25b0:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    25b4:	68a1      	ldr	r1, [r4, #8]
    25b6:	f1b1 3fff 	cmp.w	r1, #4294967295
    25ba:	d005      	beq.n	25c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    25bc:	2301      	movs	r3, #1
    25be:	2203      	movs	r2, #3
    25c0:	2005      	movs	r0, #5
    25c2:	f001 fb3f 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    25c6:	b140      	cbz	r0, 25da <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    25c8:	7e60      	ldrb	r0, [r4, #25]
    25ca:	2801      	cmp	r0, #1
    25cc:	d110      	bne.n	25f0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    25ce:	e009      	b.n	25e4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    25d0:	f44f 6107 	mov.w	r1, #2160	; 0x870
    25d4:	2070      	movs	r0, #112	; 0x70
    25d6:	f002 f8af 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25da:	f640 0175 	movw	r1, #2165	; 0x875
    25de:	2070      	movs	r0, #112	; 0x70
    25e0:	f002 f8aa 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25e4:	6920      	ldr	r0, [r4, #16]
    25e6:	1e40      	subs	r0, r0, #1
    25e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25ec:	f001 fa44 	bl	3a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    25f0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    25f4:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    25f8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    25fc:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2600:	6840      	ldr	r0, [r0, #4]
    2602:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2606:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    260a:	b001      	add	sp, #4
    260c:	2101      	movs	r1, #1
    260e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2612:	4710      	bx	r2
    2614:	f7ff fc8a 	bl	1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    2618:	f04f 30ff 	mov.w	r0, #4294967295
    261c:	60a0      	str	r0, [r4, #8]
    261e:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2622:	f88d 0000 	strb.w	r0, [sp]
    2626:	f89d 0000 	ldrb.w	r0, [sp]
    262a:	b188      	cbz	r0, 2650 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    262c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2630:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2634:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2638:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    263c:	6840      	ldr	r0, [r0, #4]
    263e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2642:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2646:	b001      	add	sp, #4
    2648:	2106      	movs	r1, #6
    264a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    264e:	4710      	bx	r2
    2650:	f640 0186 	movw	r1, #2182	; 0x886
    2654:	2070      	movs	r0, #112	; 0x70
    2656:	f002 f86f 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    265a:	f7ff fc67 	bl	1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    265e:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    2662:	f001 fff1 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2666:	b120      	cbz	r0, 2672 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    2668:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    266c:	b130      	cbz	r0, 267c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    266e:	e009      	b.n	2684 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    2670:	e059      	b.n	2726 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    2672:	f640 0196 	movw	r1, #2198	; 0x896
    2676:	2070      	movs	r0, #112	; 0x70
    2678:	f002 f85e 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    267c:	f001 feaa 	bl	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2680:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    2684:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    2688:	b158      	cbz	r0, 26a2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    268a:	492b      	ldr	r1, [pc, #172]	; (2738 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    268c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2690:	6008      	str	r0, [r1, #0]
    2692:	2005      	movs	r0, #5
    2694:	f001 fbaa 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2698:	f001 fee8 	bl	446c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    269c:	2000      	movs	r0, #0
    269e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    26a2:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    26a6:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    26aa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    26ae:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    26b2:	6840      	ldr	r0, [r0, #4]
    26b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    26b8:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    26bc:	b001      	add	sp, #4
    26be:	2100      	movs	r1, #0
    26c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    26c4:	4710      	bx	r2
    26c6:	f001 fc49 	bl	3f5c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    26ca:	8ae0      	ldrh	r0, [r4, #22]
    26cc:	b110      	cbz	r0, 26d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    26ce:	f001 ffbb 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26d2:	b128      	cbz	r0, 26e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    26d4:	4819      	ldr	r0, [pc, #100]	; (273c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    26d6:	7800      	ldrb	r0, [r0, #0]
    26d8:	2803      	cmp	r0, #3
    26da:	bf08      	it	eq
    26dc:	7766      	strbeq	r6, [r4, #29]
    26de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26e0:	f640 01a1 	movw	r1, #2209	; 0x8a1
    26e4:	2070      	movs	r0, #112	; 0x70
    26e6:	f002 f827 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26ea:	4815      	ldr	r0, [pc, #84]	; (2740 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    26ec:	6006      	str	r6, [r0, #0]
    26ee:	6888      	ldr	r0, [r1, #8]
    26f0:	6006      	str	r6, [r0, #0]
    26f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26f4:	7808      	ldrb	r0, [r1, #0]
    26f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    26fa:	f002 b8ed 	b.w	48d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    26fe:	f7ff fc15 	bl	1f2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1e0>
    2702:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2706:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    270a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    270e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2712:	6840      	ldr	r0, [r0, #4]
    2714:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2718:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    271c:	b001      	add	sp, #4
    271e:	2105      	movs	r1, #5
    2720:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2724:	4710      	bx	r2
    2726:	f640 01b4 	movw	r1, #2228	; 0x8b4
    272a:	2070      	movs	r0, #112	; 0x70
    272c:	f002 f804 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2730:	20000b34 	.word	0x20000b34
    2734:	20000010 	.word	0x20000010
    2738:	4001f508 	.word	0x4001f508
    273c:	20000012 	.word	0x20000012
    2740:	40000508 	.word	0x40000508

00002744 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    2744:	4803      	ldr	r0, [pc, #12]	; (2754 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    2746:	b510      	push	{r4, lr}
    2748:	7840      	ldrb	r0, [r0, #1]
    274a:	f009 ff93 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    274e:	b280      	uxth	r0, r0
    2750:	bd10      	pop	{r4, pc}
    2752:	0000      	.short	0x0000
    2754:	20000012 	.word	0x20000012

00002758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2758:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    275c:	4682      	mov	sl, r0
    275e:	48dc      	ldr	r0, [pc, #880]	; (2ad0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2760:	b08b      	sub	sp, #44	; 0x2c
    2762:	6800      	ldr	r0, [r0, #0]
    2764:	4ddb      	ldr	r5, [pc, #876]	; (2ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    2766:	05c0      	lsls	r0, r0, #23
    2768:	0dc0      	lsrs	r0, r0, #23
    276a:	d00e      	beq.n	278a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    276c:	3810      	subs	r0, #16
    276e:	b240      	sxtb	r0, r0
    2770:	2800      	cmp	r0, #0
    2772:	bfb8      	it	lt
    2774:	f000 000f 	andlt.w	r0, r0, #15
    2778:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    277c:	bfac      	ite	ge
    277e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2782:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2786:	0940      	lsrs	r0, r0, #5
    2788:	d00d      	beq.n	27a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    278a:	980c      	ldr	r0, [sp, #48]	; 0x30
    278c:	f04f 0b00 	mov.w	fp, #0
    2790:	7800      	ldrb	r0, [r0, #0]
    2792:	2800      	cmp	r0, #0
    2794:	bf18      	it	ne
    2796:	2801      	cmpne	r0, #1
    2798:	d018      	beq.n	27cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    279a:	f240 714f 	movw	r1, #1871	; 0x74f
    279e:	f04f 0070 	mov.w	r0, #112	; 0x70
    27a2:	f001 ffc9 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27a6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    27aa:	f04f 0b01 	mov.w	fp, #1
    27ae:	2820      	cmp	r0, #32
    27b0:	d007      	beq.n	27c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    27b2:	980c      	ldr	r0, [sp, #48]	; 0x30
    27b4:	7800      	ldrb	r0, [r0, #0]
    27b6:	b148      	cbz	r0, 27cc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    27b8:	f240 714b 	movw	r1, #1867	; 0x74b
    27bc:	2070      	movs	r0, #112	; 0x70
    27be:	f001 ffbb 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27c2:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    27c6:	2070      	movs	r0, #112	; 0x70
    27c8:	f001 ffb6 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27cc:	4cc2      	ldr	r4, [pc, #776]	; (2ad8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    27ce:	b124      	cbz	r4, 27da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    27d0:	2100      	movs	r1, #0
    27d2:	f240 7052 	movw	r0, #1874	; 0x752
    27d6:	f3af 8000 	nop.w
    27da:	49c0      	ldr	r1, [pc, #768]	; (2adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    27dc:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    27e0:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    27e4:	f04f 0801 	mov.w	r8, #1
    27e8:	9000      	str	r0, [sp, #0]
    27ea:	b124      	cbz	r4, 27f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    27ec:	2100      	movs	r1, #0
    27ee:	f240 705a 	movw	r0, #1882	; 0x75a
    27f2:	f3af 8000 	nop.w
    27f6:	f1b8 0f00 	cmp.w	r8, #0
    27fa:	d009      	beq.n	2810 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    27fc:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2800:	f04f 0900 	mov.w	r9, #0
    2804:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2808:	f1bb 0f00 	cmp.w	fp, #0
    280c:	d007      	beq.n	281e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    280e:	e032      	b.n	2876 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2810:	48b3      	ldr	r0, [pc, #716]	; (2ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2812:	2800      	cmp	r0, #0
    2814:	bf18      	it	ne
    2816:	f3af 8000 	nopne.w
    281a:	b662      	cpsie	i
    281c:	e7ee      	b.n	27fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    281e:	4637      	mov	r7, r6
    2820:	2001      	movs	r0, #1
    2822:	ea20 0607 	bic.w	r6, r0, r7
    2826:	48af      	ldr	r0, [pc, #700]	; (2ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2828:	2240      	movs	r2, #64	; 0x40
    282a:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    282e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2832:	f00a f88d 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2836:	b124      	cbz	r4, 2842 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2838:	2100      	movs	r1, #0
    283a:	f240 50cd 	movw	r0, #1485	; 0x5cd
    283e:	f3af 8000 	nop.w
    2842:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2846:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    284a:	6a09      	ldr	r1, [r1, #32]
    284c:	6201      	str	r1, [r0, #32]
    284e:	b124      	cbz	r4, 285a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2850:	2100      	movs	r1, #0
    2852:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2856:	f3af 8000 	nop.w
    285a:	b124      	cbz	r4, 2866 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    285c:	2100      	movs	r1, #0
    285e:	f240 7064 	movw	r0, #1892	; 0x764
    2862:	f3af 8000 	nop.w
    2866:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    286a:	f88d 0004 	strb.w	r0, [sp, #4]
    286e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2872:	2800      	cmp	r0, #0
    2874:	d1b9      	bne.n	27ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2876:	b124      	cbz	r4, 2882 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2878:	2100      	movs	r1, #0
    287a:	f240 706e 	movw	r0, #1902	; 0x76e
    287e:	f3af 8000 	nop.w
    2882:	f001 f855 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2886:	4680      	mov	r8, r0
    2888:	4633      	mov	r3, r6
    288a:	aa06      	add	r2, sp, #24
    288c:	990c      	ldr	r1, [sp, #48]	; 0x30
    288e:	f7ff fa79 	bl	1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    2892:	b124      	cbz	r4, 289e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2894:	2100      	movs	r1, #0
    2896:	f240 7075 	movw	r0, #1909	; 0x775
    289a:	f3af 8000 	nop.w
    289e:	4991      	ldr	r1, [pc, #580]	; (2ae4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    28a0:	a806      	add	r0, sp, #24
    28a2:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    28a6:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    28aa:	2901      	cmp	r1, #1
    28ac:	bf18      	it	ne
    28ae:	2902      	cmpne	r1, #2
    28b0:	d13c      	bne.n	292c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    28b2:	9906      	ldr	r1, [sp, #24]
    28b4:	9b07      	ldr	r3, [sp, #28]
    28b6:	eba1 0108 	sub.w	r1, r1, r8
    28ba:	4a8b      	ldr	r2, [pc, #556]	; (2ae8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    28bc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    28c0:	eba3 0308 	sub.w	r3, r3, r8
    28c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    28c8:	2902      	cmp	r1, #2
    28ca:	d371      	bcc.n	29b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    28cc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    28d0:	d26e      	bcs.n	29b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    28d2:	429a      	cmp	r2, r3
    28d4:	d36c      	bcc.n	29b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    28d6:	f04f 0901 	mov.w	r9, #1
    28da:	ab01      	add	r3, sp, #4
    28dc:	aa05      	add	r2, sp, #20
    28de:	4631      	mov	r1, r6
    28e0:	f7fe ff46 	bl	1770 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    28e4:	2800      	cmp	r0, #0
    28e6:	d06b      	beq.n	29c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    28e8:	f89d 1014 	ldrb.w	r1, [sp, #20]
    28ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
    28f0:	4633      	mov	r3, r6
    28f2:	428a      	cmp	r2, r1
    28f4:	d068      	beq.n	29c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    28f6:	2005      	movs	r0, #5
    28f8:	f7fe fd82 	bl	1400 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    28fc:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2900:	7048      	strb	r0, [r1, #1]
    2902:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2906:	2820      	cmp	r0, #32
    2908:	bf03      	ittte	eq
    290a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    290e:	f880 a020 	strbeq.w	sl, [r0, #32]
    2912:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    2916:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    291a:	bf18      	it	ne
    291c:	f880 a001 	strbne.w	sl, [r0, #1]
    2920:	4632      	mov	r2, r6
    2922:	4651      	mov	r1, sl
    2924:	f05f 0003 	movs.w	r0, #3
    2928:	f7ff fbd2 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    292c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2930:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2934:	f88d 0004 	strb.w	r0, [sp, #4]
    2938:	f89d 7004 	ldrb.w	r7, [sp, #4]
    293c:	b124      	cbz	r4, 2948 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    293e:	2100      	movs	r1, #0
    2940:	f240 707c 	movw	r0, #1916	; 0x77c
    2944:	f3af 8000 	nop.w
    2948:	4868      	ldr	r0, [pc, #416]	; (2aec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    294a:	2800      	cmp	r0, #0
    294c:	bf18      	it	ne
    294e:	f3af 8000 	nopne.w
    2952:	f3ef 8810 	mrs	r8, PRIMASK
    2956:	b672      	cpsid	i
    2958:	b124      	cbz	r4, 2964 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    295a:	2100      	movs	r1, #0
    295c:	f240 7082 	movw	r0, #1922	; 0x782
    2960:	f3af 8000 	nop.w
    2964:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2968:	f88d 0004 	strb.w	r0, [sp, #4]
    296c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2970:	2800      	cmp	r0, #0
    2972:	f47f af3a 	bne.w	27ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2976:	b124      	cbz	r4, 2982 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2978:	2100      	movs	r1, #0
    297a:	f240 708a 	movw	r0, #1930	; 0x78a
    297e:	f3af 8000 	nop.w
    2982:	f10d 0e18 	add.w	lr, sp, #24
    2986:	9800      	ldr	r0, [sp, #0]
    2988:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    298c:	f100 0008 	add.w	r0, r0, #8
    2990:	f1b9 0f00 	cmp.w	r9, #0
    2994:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2998:	d044      	beq.n	2a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    299a:	b124      	cbz	r4, 29a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    299c:	2100      	movs	r1, #0
    299e:	f240 7097 	movw	r0, #1943	; 0x797
    29a2:	f3af 8000 	nop.w
    29a6:	f1bb 0f00 	cmp.w	fp, #0
    29aa:	d12c      	bne.n	2a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    29ac:	e016      	b.n	29dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    29ae:	e7ff      	b.n	29b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29b0:	4632      	mov	r2, r6
    29b2:	4651      	mov	r1, sl
    29b4:	2004      	movs	r0, #4
    29b6:	f7ff fb8b 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    29ba:	f04f 0901 	mov.w	r9, #1
    29be:	e7b5      	b.n	292c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    29c0:	4632      	mov	r2, r6
    29c2:	4651      	mov	r1, sl
    29c4:	2004      	movs	r0, #4
    29c6:	e7af      	b.n	2928 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    29c8:	2920      	cmp	r1, #32
    29ca:	bf19      	ittee	ne
    29cc:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    29d0:	7840      	ldrbne	r0, [r0, #1]
    29d2:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    29d6:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    29da:	e78f      	b.n	28fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    29dc:	b19f      	cbz	r7, 2a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    29de:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    29e2:	2820      	cmp	r0, #32
    29e4:	d10f      	bne.n	2a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    29e6:	b124      	cbz	r4, 29f2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    29e8:	2100      	movs	r1, #0
    29ea:	f240 709c 	movw	r0, #1948	; 0x79c
    29ee:	f3af 8000 	nop.w
    29f2:	4631      	mov	r1, r6
    29f4:	2002      	movs	r0, #2
    29f6:	f7ff fb9b 	bl	2130 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e4>
    29fa:	b920      	cbnz	r0, 2a06 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    29fc:	980c      	ldr	r0, [sp, #48]	; 0x30
    29fe:	7800      	ldrb	r0, [r0, #0]
    2a00:	b3f0      	cbz	r0, 2a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2a02:	2801      	cmp	r0, #1
    2a04:	d04c      	beq.n	2aa0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    2a06:	b124      	cbz	r4, 2a12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2a08:	2100      	movs	r1, #0
    2a0a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    2a0e:	f3af 8000 	nop.w
    2a12:	f1bb 0f00 	cmp.w	fp, #0
    2a16:	bf18      	it	ne
    2a18:	2001      	movne	r0, #1
    2a1a:	d04a      	beq.n	2ab2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2a1c:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2a20:	f04f 0901 	mov.w	r9, #1
    2a24:	b124      	cbz	r4, 2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2a26:	2100      	movs	r1, #0
    2a28:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2a2c:	f3af 8000 	nop.w
    2a30:	f1b8 0f00 	cmp.w	r8, #0
    2a34:	d045      	beq.n	2ac2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2a36:	b124      	cbz	r4, 2a42 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2a38:	2100      	movs	r1, #0
    2a3a:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2a3e:	f3af 8000 	nop.w
    2a42:	f1b9 0f00 	cmp.w	r9, #0
    2a46:	d011      	beq.n	2a6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2a48:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2a4c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2a50:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2a54:	2820      	cmp	r0, #32
    2a56:	d009      	beq.n	2a6c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2a58:	b124      	cbz	r4, 2a64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2a5a:	2100      	movs	r1, #0
    2a5c:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2a60:	f3af 8000 	nop.w
    2a64:	4822      	ldr	r0, [pc, #136]	; (2af0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2a66:	7840      	ldrb	r0, [r0, #1]
    2a68:	f001 ff36 	bl	48d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2a6c:	b124      	cbz	r4, 2a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2a6e:	2100      	movs	r1, #0
    2a70:	f240 70da 	movw	r0, #2010	; 0x7da
    2a74:	f3af 8000 	nop.w
    2a78:	b00d      	add	sp, #52	; 0x34
    2a7a:	4648      	mov	r0, r9
    2a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a80:	e7ff      	b.n	2a82 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2a82:	b124      	cbz	r4, 2a8e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2a84:	2100      	movs	r1, #0
    2a86:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2a8a:	f3af 8000 	nop.w
    2a8e:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2a92:	4651      	mov	r1, sl
    2a94:	2004      	movs	r0, #4
    2a96:	f7ff fb1b 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    2a9a:	f04f 0901 	mov.w	r9, #1
    2a9e:	e7c1      	b.n	2a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2aa0:	2c00      	cmp	r4, #0
    2aa2:	f43f aea2 	beq.w	27ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2aa6:	2100      	movs	r1, #0
    2aa8:	f240 70af 	movw	r0, #1967	; 0x7af
    2aac:	f3af 8000 	nop.w
    2ab0:	e69b      	b.n	27ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2ab2:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2ab6:	2001      	movs	r0, #1
    2ab8:	ea20 0101 	bic.w	r1, r0, r1
    2abc:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2ac0:	e7ac      	b.n	2a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2ac2:	4807      	ldr	r0, [pc, #28]	; (2ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2ac4:	2800      	cmp	r0, #0
    2ac6:	bf18      	it	ne
    2ac8:	f3af 8000 	nopne.w
    2acc:	b662      	cpsie	i
    2ace:	e7b2      	b.n	2a36 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2ad0:	e000ed04 	.word	0xe000ed04
    2ad4:	20000eb4 	.word	0x20000eb4
    2ad8:	00000000 	.word	0x00000000
    2adc:	20000b34 	.word	0x20000b34
    2ae0:	00000000 	.word	0x00000000
    2ae4:	20000e34 	.word	0x20000e34
    2ae8:	003fffff 	.word	0x003fffff
    2aec:	00000000 	.word	0x00000000
    2af0:	20000010 	.word	0x20000010

00002af4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2af4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2af8:	48a5      	ldr	r0, [pc, #660]	; (2d90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2afa:	b08c      	sub	sp, #48	; 0x30
    2afc:	6800      	ldr	r0, [r0, #0]
    2afe:	05c0      	lsls	r0, r0, #23
    2b00:	0dc0      	lsrs	r0, r0, #23
    2b02:	d011      	beq.n	2b28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2b04:	3810      	subs	r0, #16
    2b06:	b240      	sxtb	r0, r0
    2b08:	2800      	cmp	r0, #0
    2b0a:	bfb8      	it	lt
    2b0c:	f000 000f 	andlt.w	r0, r0, #15
    2b10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2b14:	bfac      	ite	ge
    2b16:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2b1a:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2b1e:	0940      	lsrs	r0, r0, #5
    2b20:	bf08      	it	eq
    2b22:	f04f 0901 	moveq.w	r9, #1
    2b26:	d001      	beq.n	2b2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2b28:	f04f 0900 	mov.w	r9, #0
    2b2c:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b2e:	7800      	ldrb	r0, [r0, #0]
    2b30:	2800      	cmp	r0, #0
    2b32:	f04f 0000 	mov.w	r0, #0
    2b36:	bf1c      	itt	ne
    2b38:	b00d      	addne	sp, #52	; 0x34
    2b3a:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b3e:	f8df a254 	ldr.w	sl, [pc, #596]	; 2d94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2b42:	4d95      	ldr	r5, [pc, #596]	; (2d98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2b44:	4c95      	ldr	r4, [pc, #596]	; (2d9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2b46:	f04f 0b00 	mov.w	fp, #0
    2b4a:	900b      	str	r0, [sp, #44]	; 0x2c
    2b4c:	b125      	cbz	r5, 2b58 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2b4e:	2100      	movs	r1, #0
    2b50:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2b54:	f3af 8000 	nop.w
    2b58:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2b5c:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2b60:	f04f 0800 	mov.w	r8, #0
    2b64:	b125      	cbz	r5, 2b70 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2b66:	2100      	movs	r1, #0
    2b68:	f240 605d 	movw	r0, #1629	; 0x65d
    2b6c:	f3af 8000 	nop.w
    2b70:	f1b9 0f00 	cmp.w	r9, #0
    2b74:	d11d      	bne.n	2bb2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2b76:	4637      	mov	r7, r6
    2b78:	2001      	movs	r0, #1
    2b7a:	ea20 0607 	bic.w	r6, r0, r7
    2b7e:	4888      	ldr	r0, [pc, #544]	; (2da0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2b80:	2240      	movs	r2, #64	; 0x40
    2b82:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2b86:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2b8a:	f009 fee1 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b8e:	b125      	cbz	r5, 2b9a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2b90:	2100      	movs	r1, #0
    2b92:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2b96:	f3af 8000 	nop.w
    2b9a:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2b9e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2ba2:	6a09      	ldr	r1, [r1, #32]
    2ba4:	6201      	str	r1, [r0, #32]
    2ba6:	b125      	cbz	r5, 2bb2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2ba8:	2100      	movs	r1, #0
    2baa:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2bae:	f3af 8000 	nop.w
    2bb2:	b125      	cbz	r5, 2bbe <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2bb4:	2100      	movs	r1, #0
    2bb6:	f240 6065 	movw	r0, #1637	; 0x665
    2bba:	f3af 8000 	nop.w
    2bbe:	f000 feb7 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2bc2:	4607      	mov	r7, r0
    2bc4:	4633      	mov	r3, r6
    2bc6:	466a      	mov	r2, sp
    2bc8:	990c      	ldr	r1, [sp, #48]	; 0x30
    2bca:	f7ff f8db 	bl	1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    2bce:	b125      	cbz	r5, 2bda <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2bd0:	2100      	movs	r1, #0
    2bd2:	f240 606b 	movw	r0, #1643	; 0x66b
    2bd6:	f3af 8000 	nop.w
    2bda:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2bde:	2820      	cmp	r0, #32
    2be0:	d014      	beq.n	2c0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2be2:	6920      	ldr	r0, [r4, #16]
    2be4:	9900      	ldr	r1, [sp, #0]
    2be6:	1a09      	subs	r1, r1, r0
    2be8:	0209      	lsls	r1, r1, #8
    2bea:	17ca      	asrs	r2, r1, #31
    2bec:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2bf0:	1209      	asrs	r1, r1, #8
    2bf2:	d50b      	bpl.n	2c0c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2bf4:	e9dd 2100 	ldrd	r2, r1, [sp]
    2bf8:	1a89      	subs	r1, r1, r2
    2bfa:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2bfe:	4408      	add	r0, r1
    2c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c04:	e9cd 2000 	strd	r2, r0, [sp]
    2c08:	f04f 0801 	mov.w	r8, #1
    2c0c:	b14d      	cbz	r5, 2c22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2c0e:	2100      	movs	r1, #0
    2c10:	f240 6075 	movw	r0, #1653	; 0x675
    2c14:	f3af 8000 	nop.w
    2c18:	2100      	movs	r1, #0
    2c1a:	f240 607b 	movw	r0, #1659	; 0x67b
    2c1e:	f3af 8000 	nop.w
    2c22:	9800      	ldr	r0, [sp, #0]
    2c24:	9901      	ldr	r1, [sp, #4]
    2c26:	1bc0      	subs	r0, r0, r7
    2c28:	1bc9      	subs	r1, r1, r7
    2c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2c32:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2c36:	d205      	bcs.n	2c44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2c38:	458a      	cmp	sl, r1
    2c3a:	d303      	bcc.n	2c44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2c3c:	f1b9 0f00 	cmp.w	r9, #0
    2c40:	d10c      	bne.n	2c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2c42:	e003      	b.n	2c4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2c44:	f1b9 0f00 	cmp.w	r9, #0
    2c48:	d038      	beq.n	2cbc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2c4a:	e094      	b.n	2d76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2c4c:	4633      	mov	r3, r6
    2c4e:	463a      	mov	r2, r7
    2c50:	4669      	mov	r1, sp
    2c52:	4854      	ldr	r0, [pc, #336]	; (2da4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2c54:	f7fe fc10 	bl	1478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2c58:	ea48 0800 	orr.w	r8, r8, r0
    2c5c:	f1b8 0f00 	cmp.w	r8, #0
    2c60:	d022      	beq.n	2ca8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2c62:	9800      	ldr	r0, [sp, #0]
    2c64:	f009 fd06 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2c68:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2c6c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2c70:	4b4d      	ldr	r3, [pc, #308]	; (2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2c72:	4411      	add	r1, r2
    2c74:	1c49      	adds	r1, r1, #1
    2c76:	1842      	adds	r2, r0, r1
    2c78:	4298      	cmp	r0, r3
    2c7a:	d841      	bhi.n	2d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2c7c:	4849      	ldr	r0, [pc, #292]	; (2da4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2c7e:	4281      	cmp	r1, r0
    2c80:	dc5a      	bgt.n	2d38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2c82:	4240      	negs	r0, r0
    2c84:	4281      	cmp	r1, r0
    2c86:	db5f      	blt.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2c88:	1c58      	adds	r0, r3, #1
    2c8a:	4290      	cmp	r0, r2
    2c8c:	bfdc      	itt	le
    2c8e:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2c92:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2c96:	dd05      	ble.n	2ca4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2c98:	2a00      	cmp	r2, #0
    2c9a:	bfbc      	itt	lt
    2c9c:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2ca0:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2ca4:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ca6:	60c2      	str	r2, [r0, #12]
    2ca8:	2001      	movs	r0, #1
    2caa:	900b      	str	r0, [sp, #44]	; 0x2c
    2cac:	2d00      	cmp	r5, #0
    2cae:	d062      	beq.n	2d76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2cb0:	2100      	movs	r1, #0
    2cb2:	f240 608e 	movw	r0, #1678	; 0x68e
    2cb6:	f3af 8000 	nop.w
    2cba:	e05c      	b.n	2d76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2cbc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2cc0:	aa08      	add	r2, sp, #32
    2cc2:	a907      	add	r1, sp, #28
    2cc4:	f000 fcd6 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2cc8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ccc:	2820      	cmp	r0, #32
    2cce:	d01c      	beq.n	2d0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2cd0:	6920      	ldr	r0, [r4, #16]
    2cd2:	1d40      	adds	r0, r0, #5
    2cd4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cd8:	e9dd 2100 	ldrd	r2, r1, [sp]
    2cdc:	1a89      	subs	r1, r1, r2
    2cde:	4401      	add	r1, r0
    2ce0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ce4:	e9cd 0100 	strd	r0, r1, [sp]
    2ce8:	f009 fcc4 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2cec:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2cf0:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2cf4:	4b2c      	ldr	r3, [pc, #176]	; (2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2cf6:	4411      	add	r1, r2
    2cf8:	1c4a      	adds	r2, r1, #1
    2cfa:	1881      	adds	r1, r0, r2
    2cfc:	4298      	cmp	r0, r3
    2cfe:	d918      	bls.n	2d32 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2d00:	f240 6109 	movw	r1, #1545	; 0x609
    2d04:	2070      	movs	r0, #112	; 0x70
    2d06:	f001 fd17 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d0a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2d0e:	f107 0609 	add.w	r6, r7, #9
    2d12:	b120      	cbz	r0, 2d1e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2d14:	f001 fc98 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2d18:	2800      	cmp	r0, #0
    2d1a:	bf08      	it	eq
    2d1c:	3632      	addeq	r6, #50	; 0x32
    2d1e:	4823      	ldr	r0, [pc, #140]	; (2dac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2d20:	7841      	ldrb	r1, [r0, #1]
    2d22:	9807      	ldr	r0, [sp, #28]
    2d24:	4281      	cmp	r1, r0
    2d26:	bf84      	itt	hi
    2d28:	1a08      	subhi	r0, r1, r0
    2d2a:	4406      	addhi	r6, r0
    2d2c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2d30:	e7d2      	b.n	2cd8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2d32:	481c      	ldr	r0, [pc, #112]	; (2da4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d34:	4282      	cmp	r2, r0
    2d36:	dd04      	ble.n	2d42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2d38:	f240 610a 	movw	r1, #1546	; 0x60a
    2d3c:	2070      	movs	r0, #112	; 0x70
    2d3e:	f001 fcfb 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d42:	481b      	ldr	r0, [pc, #108]	; (2db0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2d44:	4282      	cmp	r2, r0
    2d46:	da04      	bge.n	2d52 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2d48:	f240 610b 	movw	r1, #1547	; 0x60b
    2d4c:	2070      	movs	r0, #112	; 0x70
    2d4e:	f001 fcf3 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d52:	4818      	ldr	r0, [pc, #96]	; (2db4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2d54:	4288      	cmp	r0, r1
    2d56:	bfdc      	itt	le
    2d58:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2d5c:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2d60:	dd05      	ble.n	2d6e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2d62:	2900      	cmp	r1, #0
    2d64:	bfbc      	itt	lt
    2d66:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2d6a:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2d6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d70:	60c1      	str	r1, [r0, #12]
    2d72:	2001      	movs	r0, #1
    2d74:	900b      	str	r0, [sp, #44]	; 0x2c
    2d76:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2d7a:	f88d 0010 	strb.w	r0, [sp, #16]
    2d7e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2d82:	2800      	cmp	r0, #0
    2d84:	f47f aee2 	bne.w	2b4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2d88:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2d8a:	b00d      	add	sp, #52	; 0x34
    2d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d90:	e000ed04 	.word	0xe000ed04
    2d94:	003fffff 	.word	0x003fffff
    2d98:	00000000 	.word	0x00000000
    2d9c:	20000eb4 	.word	0x20000eb4
    2da0:	20000e34 	.word	0x20000e34
    2da4:	07a12000 	.word	0x07a12000
    2da8:	1e847fff 	.word	0x1e847fff
    2dac:	20000012 	.word	0x20000012
    2db0:	f85ee000 	.word	0xf85ee000
    2db4:	1e848000 	.word	0x1e848000

00002db8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2db8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2dbc:	4d88      	ldr	r5, [pc, #544]	; (2fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    2dbe:	b08c      	sub	sp, #48	; 0x30
    2dc0:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2dc4:	2000      	movs	r0, #0
    2dc6:	9009      	str	r0, [sp, #36]	; 0x24
    2dc8:	2001      	movs	r0, #1
    2dca:	4c86      	ldr	r4, [pc, #536]	; (2fe4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    2dcc:	f04f 0900 	mov.w	r9, #0
    2dd0:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2dd4:	4680      	mov	r8, r0
    2dd6:	9008      	str	r0, [sp, #32]
    2dd8:	b124      	cbz	r4, 2de4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2dda:	2100      	movs	r1, #0
    2ddc:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2de0:	f3af 8000 	nop.w
    2de4:	9808      	ldr	r0, [sp, #32]
    2de6:	2800      	cmp	r0, #0
    2de8:	d037      	beq.n	2e5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2dea:	bf00      	nop
    2dec:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2df0:	b124      	cbz	r4, 2dfc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2df2:	2100      	movs	r1, #0
    2df4:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2df8:	f3af 8000 	nop.w
    2dfc:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2e00:	2240      	movs	r2, #64	; 0x40
    2e02:	ea28 060a 	bic.w	r6, r8, sl
    2e06:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2e0a:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2e0e:	4683      	mov	fp, r0
    2e10:	f009 fd9e 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2e14:	b124      	cbz	r4, 2e20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2e16:	2100      	movs	r1, #0
    2e18:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2e1c:	f3af 8000 	nop.w
    2e20:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2e24:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2e28:	9000      	str	r0, [sp, #0]
    2e2a:	6a09      	ldr	r1, [r1, #32]
    2e2c:	6201      	str	r1, [r0, #32]
    2e2e:	b124      	cbz	r4, 2e3a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2e30:	2100      	movs	r1, #0
    2e32:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2e36:	f3af 8000 	nop.w
    2e3a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2e3e:	f88d 0008 	strb.w	r0, [sp, #8]
    2e42:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2e46:	b178      	cbz	r0, 2e68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2e48:	2c00      	cmp	r4, #0
    2e4a:	bf1c      	itt	ne
    2e4c:	2100      	movne	r1, #0
    2e4e:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2e52:	d0c1      	beq.n	2dd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2e54:	f3af 8000 	nop.w
    2e58:	e7be      	b.n	2dd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2e5a:	4863      	ldr	r0, [pc, #396]	; (2fe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2e5c:	2800      	cmp	r0, #0
    2e5e:	bf18      	it	ne
    2e60:	f3af 8000 	nopne.w
    2e64:	b662      	cpsie	i
    2e66:	e7c1      	b.n	2dec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2e68:	b124      	cbz	r4, 2e74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2e6a:	2100      	movs	r1, #0
    2e6c:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2e70:	f3af 8000 	nop.w
    2e74:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e76:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2e7a:	2803      	cmp	r0, #3
    2e7c:	d172      	bne.n	2f64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    2e7e:	f8dd a000 	ldr.w	sl, [sp]
    2e82:	f8cd a018 	str.w	sl, [sp, #24]
    2e86:	990c      	ldr	r1, [sp, #48]	; 0x30
    2e88:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2e8c:	4288      	cmp	r0, r1
    2e8e:	bf14      	ite	ne
    2e90:	f04f 0b00 	movne.w	fp, #0
    2e94:	f04f 0b01 	moveq.w	fp, #1
    2e98:	f10a 0c20 	add.w	ip, sl, #32
    2e9c:	4686      	mov	lr, r0
    2e9e:	2220      	movs	r2, #32
    2ea0:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2ea4:	e003      	b.n	2eae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2ea6:	4602      	mov	r2, r0
    2ea8:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2eac:	7840      	ldrb	r0, [r0, #1]
    2eae:	4288      	cmp	r0, r1
    2eb0:	d002      	beq.n	2eb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2eb2:	2820      	cmp	r0, #32
    2eb4:	d00a      	beq.n	2ecc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2eb6:	e7f6      	b.n	2ea6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2eb8:	2820      	cmp	r0, #32
    2eba:	d007      	beq.n	2ecc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2ebc:	4586      	cmp	lr, r0
    2ebe:	d107      	bne.n	2ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2ec0:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2ec4:	7840      	ldrb	r0, [r0, #1]
    2ec6:	f88c 0000 	strb.w	r0, [ip]
    2eca:	e007      	b.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2ecc:	4648      	mov	r0, r9
    2ece:	e00c      	b.n	2eea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2ed0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2ed4:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2ed8:	7840      	ldrb	r0, [r0, #1]
    2eda:	7048      	strb	r0, [r1, #1]
    2edc:	b124      	cbz	r4, 2ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2ede:	2100      	movs	r1, #0
    2ee0:	f240 5037 	movw	r0, #1335	; 0x537
    2ee4:	f3af 8000 	nop.w
    2ee8:	4640      	mov	r0, r8
    2eea:	ea10 0f0b 	tst.w	r0, fp
    2eee:	bf18      	it	ne
    2ef0:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2ef4:	2800      	cmp	r0, #0
    2ef6:	d052      	beq.n	2f9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2ef8:	b124      	cbz	r4, 2f04 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    2efa:	2100      	movs	r1, #0
    2efc:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2f00:	f3af 8000 	nop.w
    2f04:	4632      	mov	r2, r6
    2f06:	2001      	movs	r0, #1
    2f08:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f0a:	f7ff f8e1 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    2f0e:	9806      	ldr	r0, [sp, #24]
    2f10:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2f14:	f88d 0008 	strb.w	r0, [sp, #8]
    2f18:	f89d a008 	ldrb.w	sl, [sp, #8]
    2f1c:	b124      	cbz	r4, 2f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2f1e:	2100      	movs	r1, #0
    2f20:	f640 0008 	movw	r0, #2056	; 0x808
    2f24:	f3af 8000 	nop.w
    2f28:	4830      	ldr	r0, [pc, #192]	; (2fec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2f2a:	2800      	cmp	r0, #0
    2f2c:	bf18      	it	ne
    2f2e:	f3af 8000 	nopne.w
    2f32:	f3ef 8010 	mrs	r0, PRIMASK
    2f36:	b672      	cpsid	i
    2f38:	9008      	str	r0, [sp, #32]
    2f3a:	b124      	cbz	r4, 2f46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2f3c:	2100      	movs	r1, #0
    2f3e:	f640 000d 	movw	r0, #2061	; 0x80d
    2f42:	f3af 8000 	nop.w
    2f46:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f4a:	f88d 0008 	strb.w	r0, [sp, #8]
    2f4e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f52:	b140      	cbz	r0, 2f66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    2f54:	2c00      	cmp	r4, #0
    2f56:	bf1c      	itt	ne
    2f58:	2100      	movne	r1, #0
    2f5a:	f640 0011 	movwne	r0, #2065	; 0x811
    2f5e:	f43f af3b 	beq.w	2dd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f62:	e777      	b.n	2e54 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    2f64:	e01b      	b.n	2f9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2f66:	f1ba 0f00 	cmp.w	sl, #0
    2f6a:	d008      	beq.n	2f7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2f6c:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2f70:	2820      	cmp	r0, #32
    2f72:	d104      	bne.n	2f7e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    2f74:	4631      	mov	r1, r6
    2f76:	2002      	movs	r0, #2
    2f78:	f7ff f8da 	bl	2130 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e4>
    2f7c:	b308      	cbz	r0, 2fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    2f7e:	b124      	cbz	r4, 2f8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    2f80:	2100      	movs	r1, #0
    2f82:	f640 0025 	movw	r0, #2085	; 0x825
    2f86:	f3af 8000 	nop.w
    2f8a:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2f8e:	ea28 0000 	bic.w	r0, r8, r0
    2f92:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    2f96:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    2f9a:	2001      	movs	r0, #1
    2f9c:	9009      	str	r0, [sp, #36]	; 0x24
    2f9e:	b124      	cbz	r4, 2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2fa0:	2100      	movs	r1, #0
    2fa2:	f640 002e 	movw	r0, #2094	; 0x82e
    2fa6:	f3af 8000 	nop.w
    2faa:	9808      	ldr	r0, [sp, #32]
    2fac:	b188      	cbz	r0, 2fd2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    2fae:	b124      	cbz	r4, 2fba <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    2fb0:	2100      	movs	r1, #0
    2fb2:	f640 0032 	movw	r0, #2098	; 0x832
    2fb6:	f3af 8000 	nop.w
    2fba:	9809      	ldr	r0, [sp, #36]	; 0x24
    2fbc:	b00d      	add	sp, #52	; 0x34
    2fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fc2:	2c00      	cmp	r4, #0
    2fc4:	d0f1      	beq.n	2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2fc6:	2100      	movs	r1, #0
    2fc8:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2fcc:	f3af 8000 	nop.w
    2fd0:	e7e6      	b.n	2fa0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    2fd2:	4805      	ldr	r0, [pc, #20]	; (2fe8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2fd4:	2800      	cmp	r0, #0
    2fd6:	bf18      	it	ne
    2fd8:	f3af 8000 	nopne.w
    2fdc:	b662      	cpsie	i
    2fde:	e7e6      	b.n	2fae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    2fe0:	20000eb4 	.word	0x20000eb4
	...

00002ff0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    2ff0:	2820      	cmp	r0, #32
    2ff2:	bf24      	itt	cs
    2ff4:	2000      	movcs	r0, #0
    2ff6:	4770      	bxcs	lr
    2ff8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2ffc:	4b03      	ldr	r3, [pc, #12]	; (300c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    2ffe:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    3002:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3006:	6042      	str	r2, [r0, #4]
    3008:	2001      	movs	r0, #1
    300a:	4770      	bx	lr
    300c:	20000b34 	.word	0x20000b34

00003010 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    3010:	b510      	push	{r4, lr}
    3012:	2820      	cmp	r0, #32
    3014:	d211      	bcs.n	303a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3016:	490e      	ldr	r1, [pc, #56]	; (3050 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3018:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    301c:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3020:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3024:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3028:	b13b      	cbz	r3, 303a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    302a:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    302e:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    3032:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    3036:	2a01      	cmp	r2, #1
    3038:	d001      	beq.n	303e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    303a:	2000      	movs	r0, #0
    303c:	bd10      	pop	{r4, pc}
    303e:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3042:	4601      	mov	r1, r0
    3044:	2000      	movs	r0, #0
    3046:	f7ff f843 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    304a:	2001      	movs	r0, #1
    304c:	bd10      	pop	{r4, pc}
    304e:	0000      	.short	0x0000
    3050:	20000eb4 	.word	0x20000eb4

00003054 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3058:	4e80      	ldr	r6, [pc, #512]	; (325c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    305a:	4680      	mov	r8, r0
    305c:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3060:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3064:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3068:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    306c:	2800      	cmp	r0, #0
    306e:	d068      	beq.n	3142 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3070:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3074:	4d7a      	ldr	r5, [pc, #488]	; (3260 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    3076:	b125      	cbz	r5, 3082 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3078:	2100      	movs	r1, #0
    307a:	f640 30c1 	movw	r0, #3009	; 0xbc1
    307e:	f3af 8000 	nop.w
    3082:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    3086:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    308a:	2801      	cmp	r0, #1
    308c:	d018      	beq.n	30c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    308e:	b2c0      	uxtb	r0, r0
    3090:	2804      	cmp	r0, #4
    3092:	bf1c      	itt	ne
    3094:	2805      	cmpne	r0, #5
    3096:	2806      	cmpne	r0, #6
    3098:	d058      	beq.n	314c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    309a:	b12d      	cbz	r5, 30a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    309c:	f04f 0100 	mov.w	r1, #0
    30a0:	f640 30cd 	movw	r0, #3021	; 0xbcd
    30a4:	f3af 8000 	nop.w
    30a8:	f001 fc6c 	bl	4984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    30ac:	b125      	cbz	r5, 30b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    30ae:	2100      	movs	r1, #0
    30b0:	f640 30d1 	movw	r0, #3025	; 0xbd1
    30b4:	f3af 8000 	nop.w
    30b8:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    30bc:	2801      	cmp	r0, #1
    30be:	d1e6      	bne.n	308e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    30c0:	2401      	movs	r4, #1
    30c2:	b125      	cbz	r5, 30ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    30c4:	2100      	movs	r1, #0
    30c6:	f640 30d8 	movw	r0, #3032	; 0xbd8
    30ca:	f3af 8000 	nop.w
    30ce:	2c00      	cmp	r4, #0
    30d0:	d042      	beq.n	3158 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    30d2:	2000      	movs	r0, #0
    30d4:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    30d8:	b125      	cbz	r5, 30e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    30da:	2100      	movs	r1, #0
    30dc:	f640 30dd 	movw	r0, #3037	; 0xbdd
    30e0:	f3af 8000 	nop.w
    30e4:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    30e8:	2001      	movs	r0, #1
    30ea:	ea20 090b 	bic.w	r9, r0, fp
    30ee:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    30f2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    30f6:	2240      	movs	r2, #64	; 0x40
    30f8:	f009 fc2a 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    30fc:	b125      	cbz	r5, 3108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    30fe:	2100      	movs	r1, #0
    3100:	f240 50cd 	movw	r0, #1485	; 0x5cd
    3104:	f3af 8000 	nop.w
    3108:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    310c:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    3110:	6a00      	ldr	r0, [r0, #32]
    3112:	f8ca 0020 	str.w	r0, [sl, #32]
    3116:	b125      	cbz	r5, 3122 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    3118:	2100      	movs	r1, #0
    311a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    311e:	f3af 8000 	nop.w
    3122:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3126:	f88d 0000 	strb.w	r0, [sp]
    312a:	f89d 0000 	ldrb.w	r0, [sp]
    312e:	b1d0      	cbz	r0, 3166 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3130:	2d00      	cmp	r5, #0
    3132:	bf1c      	itt	ne
    3134:	2100      	movne	r1, #0
    3136:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    313a:	d0c2      	beq.n	30c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    313c:	f3af 8000 	nop.w
    3140:	e7bf      	b.n	30c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3142:	f640 31b8 	movw	r1, #3000	; 0xbb8
    3146:	2070      	movs	r0, #112	; 0x70
    3148:	f001 faf6 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    314c:	464a      	mov	r2, r9
    314e:	4641      	mov	r1, r8
    3150:	2001      	movs	r0, #1
    3152:	f7fe ffbd 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    3156:	e7a9      	b.n	30ac <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3158:	4842      	ldr	r0, [pc, #264]	; (3264 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    315a:	2800      	cmp	r0, #0
    315c:	bf18      	it	ne
    315e:	f3af 8000 	nopne.w
    3162:	b662      	cpsie	i
    3164:	e7b5      	b.n	30d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    3166:	b125      	cbz	r5, 3172 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    3168:	2100      	movs	r1, #0
    316a:	f640 30e7 	movw	r0, #3047	; 0xbe7
    316e:	f3af 8000 	nop.w
    3172:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    3176:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    317a:	4614      	mov	r4, r2
    317c:	f04f 0b20 	mov.w	fp, #32
    3180:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3184:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    3188:	e003      	b.n	3192 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    318a:	46a3      	mov	fp, r4
    318c:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    3190:	785c      	ldrb	r4, [r3, #1]
    3192:	4544      	cmp	r4, r8
    3194:	d002      	beq.n	319c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    3196:	2c20      	cmp	r4, #32
    3198:	d02b      	beq.n	31f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    319a:	e7f6      	b.n	318a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    319c:	2c20      	cmp	r4, #32
    319e:	d028      	beq.n	31f2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    31a0:	42a2      	cmp	r2, r4
    31a2:	d104      	bne.n	31ae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    31a4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    31a8:	7840      	ldrb	r0, [r0, #1]
    31aa:	7008      	strb	r0, [r1, #0]
    31ac:	e005      	b.n	31ba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    31ae:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    31b2:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    31b6:	7849      	ldrb	r1, [r1, #1]
    31b8:	7041      	strb	r1, [r0, #1]
    31ba:	f1ba 0f00 	cmp.w	sl, #0
    31be:	d011      	beq.n	31e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    31c0:	b125      	cbz	r5, 31cc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    31c2:	2100      	movs	r1, #0
    31c4:	f240 502f 	movw	r0, #1327	; 0x52f
    31c8:	f3af 8000 	nop.w
    31cc:	f89a 0000 	ldrb.w	r0, [sl]
    31d0:	42a0      	cmp	r0, r4
    31d2:	d107      	bne.n	31e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    31d4:	b125      	cbz	r5, 31e0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    31d6:	2100      	movs	r1, #0
    31d8:	f240 5032 	movw	r0, #1330	; 0x532
    31dc:	f3af 8000 	nop.w
    31e0:	f88a b000 	strb.w	fp, [sl]
    31e4:	b15d      	cbz	r5, 31fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    31e6:	2100      	movs	r1, #0
    31e8:	f240 5037 	movw	r0, #1335	; 0x537
    31ec:	f3af 8000 	nop.w
    31f0:	e000      	b.n	31f4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    31f2:	b125      	cbz	r5, 31fe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    31f4:	2100      	movs	r1, #0
    31f6:	f640 30eb 	movw	r0, #3051	; 0xbeb
    31fa:	f3af 8000 	nop.w
    31fe:	481a      	ldr	r0, [pc, #104]	; (3268 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    3200:	2800      	cmp	r0, #0
    3202:	bf18      	it	ne
    3204:	f3af 8000 	nopne.w
    3208:	f3ef 8410 	mrs	r4, PRIMASK
    320c:	b672      	cpsid	i
    320e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    3212:	f88d 0000 	strb.w	r0, [sp]
    3216:	f89d 0000 	ldrb.w	r0, [sp]
    321a:	b138      	cbz	r0, 322c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    321c:	2d00      	cmp	r5, #0
    321e:	bf1c      	itt	ne
    3220:	2100      	movne	r1, #0
    3222:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    3226:	f43f af4c 	beq.w	30c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    322a:	e787      	b.n	313c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    322c:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3230:	2001      	movs	r0, #1
    3232:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    3236:	b154      	cbz	r4, 324e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3238:	2d00      	cmp	r5, #0
    323a:	bf08      	it	eq
    323c:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3240:	2100      	movs	r1, #0
    3242:	f640 30fe 	movw	r0, #3070	; 0xbfe
    3246:	f3af 8000 	nop.w
    324a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    324e:	4805      	ldr	r0, [pc, #20]	; (3264 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3250:	2800      	cmp	r0, #0
    3252:	bf18      	it	ne
    3254:	f3af 8000 	nopne.w
    3258:	b662      	cpsie	i
    325a:	e7ed      	b.n	3238 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    325c:	20000eb4 	.word	0x20000eb4
	...

0000326c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    326c:	b570      	push	{r4, r5, r6, lr}
    326e:	460d      	mov	r5, r1
    3270:	4606      	mov	r6, r0
    3272:	f001 f9d7 	bl	4624 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3276:	480f      	ldr	r0, [pc, #60]	; (32b4 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3278:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    327c:	2400      	movs	r4, #0
    327e:	3880      	subs	r0, #128	; 0x80
    3280:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3284:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    3288:	b129      	cbz	r1, 3296 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    328a:	1c61      	adds	r1, r4, #1
    328c:	b2cc      	uxtb	r4, r1
    328e:	2c20      	cmp	r4, #32
    3290:	d3f8      	bcc.n	3284 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3292:	2020      	movs	r0, #32
    3294:	bd70      	pop	{r4, r5, r6, pc}
    3296:	4808      	ldr	r0, [pc, #32]	; (32b8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    3298:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    329c:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    32a0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    32a4:	4621      	mov	r1, r4
    32a6:	6045      	str	r5, [r0, #4]
    32a8:	2001      	movs	r0, #1
    32aa:	f7fe ff11 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    32ae:	4620      	mov	r0, r4
    32b0:	bd70      	pop	{r4, r5, r6, pc}
    32b2:	0000      	.short	0x0000
    32b4:	20000eb4 	.word	0x20000eb4
    32b8:	20000b34 	.word	0x20000b34

000032bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    32bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32c0:	b083      	sub	sp, #12
    32c2:	f000 fb35 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    32c6:	4605      	mov	r5, r0
    32c8:	f000 fdfe 	bl	3ec8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    32cc:	4c67      	ldr	r4, [pc, #412]	; (346c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    32ce:	68a0      	ldr	r0, [r4, #8]
    32d0:	f1b0 3fff 	cmp.w	r0, #4294967295
    32d4:	bf1c      	itt	ne
    32d6:	f04f 30ff 	movne.w	r0, #4294967295
    32da:	60a0      	strne	r0, [r4, #8]
    32dc:	7fa0      	ldrb	r0, [r4, #30]
    32de:	f8df b190 	ldr.w	fp, [pc, #400]	; 3470 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    32e2:	b9a8      	cbnz	r0, 3310 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    32e4:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    32e8:	1a08      	subs	r0, r1, r0
    32ea:	0200      	lsls	r0, r0, #8
    32ec:	17c1      	asrs	r1, r0, #31
    32ee:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    32f2:	1200      	asrs	r0, r0, #8
    32f4:	f44f 710c 	mov.w	r1, #560	; 0x230
    32f8:	f009 f9e9 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    32fc:	6921      	ldr	r1, [r4, #16]
    32fe:	4408      	add	r0, r1
    3300:	1a28      	subs	r0, r5, r0
    3302:	0200      	lsls	r0, r0, #8
    3304:	17c1      	asrs	r1, r0, #31
    3306:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    330a:	1200      	asrs	r0, r0, #8
    330c:	0fc0      	lsrs	r0, r0, #31
    330e:	d013      	beq.n	3338 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    3310:	7e60      	ldrb	r0, [r4, #25]
    3312:	b328      	cbz	r0, 3360 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3314:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3318:	f88d 0000 	strb.w	r0, [sp]
    331c:	f89d 0000 	ldrb.w	r0, [sp]
    3320:	b1f0      	cbz	r0, 3360 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3322:	f000 fc13 	bl	3b4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    3326:	bf00      	nop
    3328:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    332c:	b1f0      	cbz	r0, 336c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    332e:	f240 4147 	movw	r1, #1095	; 0x447
    3332:	2070      	movs	r0, #112	; 0x70
    3334:	f001 fa00 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3338:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    333c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3340:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3344:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3348:	6840      	ldr	r0, [r0, #4]
    334a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    334e:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3352:	2108      	movs	r1, #8
    3354:	4790      	blx	r2
    3356:	f44f 6186 	mov.w	r1, #1072	; 0x430
    335a:	2070      	movs	r0, #112	; 0x70
    335c:	f001 f9ec 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3360:	1ce8      	adds	r0, r5, #3
    3362:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3366:	f000 fae9 	bl	393c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    336a:	e7dd      	b.n	3328 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    336c:	f04f 0a01 	mov.w	sl, #1
    3370:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3374:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3378:	2820      	cmp	r0, #32
    337a:	d024      	beq.n	33c6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    337c:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3380:	2020      	movs	r0, #32
    3382:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    3386:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    338a:	2600      	movs	r6, #0
    338c:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3390:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3394:	4837      	ldr	r0, [pc, #220]	; (3474 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    3396:	6026      	str	r6, [r4, #0]
    3398:	7800      	ldrb	r0, [r0, #0]
    339a:	2802      	cmp	r0, #2
    339c:	bf16      	itet	ne
    339e:	2803      	cmpne	r0, #3
    33a0:	2001      	moveq	r0, #1
    33a2:	2000      	movne	r0, #0
    33a4:	7720      	strb	r0, [r4, #28]
    33a6:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    33aa:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    33ae:	f899 0020 	ldrb.w	r0, [r9, #32]
    33b2:	2820      	cmp	r0, #32
    33b4:	d031      	beq.n	341a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    33b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    33ba:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    33be:	7d81      	ldrb	r1, [r0, #22]
    33c0:	2901      	cmp	r1, #1
    33c2:	d005      	beq.n	33d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    33c4:	e029      	b.n	341a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    33c6:	f240 414a 	movw	r1, #1098	; 0x44a
    33ca:	2070      	movs	r0, #112	; 0x70
    33cc:	f001 f9b4 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33d0:	46ab      	mov	fp, r5
    33d2:	f100 0508 	add.w	r5, r0, #8
    33d6:	8a40      	ldrh	r0, [r0, #18]
    33d8:	aa01      	add	r2, sp, #4
    33da:	4669      	mov	r1, sp
    33dc:	f000 f94a 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    33e0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    33e4:	2820      	cmp	r0, #32
    33e6:	d004      	beq.n	33f2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    33e8:	6920      	ldr	r0, [r4, #16]
    33ea:	1d40      	adds	r0, r0, #5
    33ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    33f0:	e00b      	b.n	340a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    33f2:	8968      	ldrh	r0, [r5, #10]
    33f4:	f10b 0b09 	add.w	fp, fp, #9
    33f8:	b128      	cbz	r0, 3406 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    33fa:	f001 f925 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    33fe:	2800      	cmp	r0, #0
    3400:	bf08      	it	eq
    3402:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    3406:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    340a:	e9d5 2100 	ldrd	r2, r1, [r5]
    340e:	1a89      	subs	r1, r1, r2
    3410:	6028      	str	r0, [r5, #0]
    3412:	4408      	add	r0, r1
    3414:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3418:	6068      	str	r0, [r5, #4]
    341a:	4639      	mov	r1, r7
    341c:	2001      	movs	r0, #1
    341e:	f7fe fe87 	bl	2130 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e4>
    3422:	2800      	cmp	r0, #0
    3424:	d0f9      	beq.n	341a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    3426:	4814      	ldr	r0, [pc, #80]	; (3478 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    3428:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    342c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3430:	2802      	cmp	r0, #2
    3432:	d104      	bne.n	343e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    3434:	463a      	mov	r2, r7
    3436:	4641      	mov	r1, r8
    3438:	2006      	movs	r0, #6
    343a:	f7fe fe49 	bl	20d0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x384>
    343e:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3442:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    3446:	2820      	cmp	r0, #32
    3448:	d003      	beq.n	3452 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    344a:	480c      	ldr	r0, [pc, #48]	; (347c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    344c:	7840      	ldrb	r0, [r0, #1]
    344e:	f001 fa43 	bl	48d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3452:	7f20      	ldrb	r0, [r4, #28]
    3454:	2800      	cmp	r0, #0
    3456:	bf04      	itt	eq
    3458:	b003      	addeq	sp, #12
    345a:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    345e:	f000 fd7d 	bl	3f5c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3462:	7726      	strb	r6, [r4, #28]
    3464:	7766      	strb	r6, [r4, #29]
    3466:	b003      	add	sp, #12
    3468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    346c:	20000eb4 	.word	0x20000eb4
    3470:	20000b34 	.word	0x20000b34
    3474:	20000012 	.word	0x20000012
    3478:	20000e34 	.word	0x20000e34
    347c:	20000010 	.word	0x20000010

00003480 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3480:	b510      	push	{r4, lr}
    3482:	4c32      	ldr	r4, [pc, #200]	; (354c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3484:	b082      	sub	sp, #8
    3486:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    348a:	2920      	cmp	r1, #32
    348c:	d008      	beq.n	34a0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    348e:	68a1      	ldr	r1, [r4, #8]
    3490:	f1b1 3fff 	cmp.w	r1, #4294967295
    3494:	d009      	beq.n	34aa <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    3496:	f640 21e9 	movw	r1, #2793	; 0xae9
    349a:	2070      	movs	r0, #112	; 0x70
    349c:	f001 f94c 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34a0:	f640 21e8 	movw	r1, #2792	; 0xae8
    34a4:	2070      	movs	r0, #112	; 0x70
    34a6:	f001 f947 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34aa:	6862      	ldr	r2, [r4, #4]
    34ac:	4601      	mov	r1, r0
    34ae:	4b28      	ldr	r3, [pc, #160]	; (3550 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    34b0:	1850      	adds	r0, r2, r1
    34b2:	429a      	cmp	r2, r3
    34b4:	d904      	bls.n	34c0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    34b6:	f240 6109 	movw	r1, #1545	; 0x609
    34ba:	2070      	movs	r0, #112	; 0x70
    34bc:	f001 f93c 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34c0:	4a24      	ldr	r2, [pc, #144]	; (3554 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    34c2:	4291      	cmp	r1, r2
    34c4:	dd04      	ble.n	34d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    34c6:	f240 610a 	movw	r1, #1546	; 0x60a
    34ca:	2070      	movs	r0, #112	; 0x70
    34cc:	f001 f934 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34d0:	4a21      	ldr	r2, [pc, #132]	; (3558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    34d2:	4291      	cmp	r1, r2
    34d4:	da04      	bge.n	34e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    34d6:	f240 610b 	movw	r1, #1547	; 0x60b
    34da:	2070      	movs	r0, #112	; 0x70
    34dc:	f001 f92c 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34e0:	491e      	ldr	r1, [pc, #120]	; (355c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    34e2:	4281      	cmp	r1, r0
    34e4:	bfdc      	itt	le
    34e6:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    34ea:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    34ee:	dd05      	ble.n	34fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    34f0:	2800      	cmp	r0, #0
    34f2:	bfbc      	itt	lt
    34f4:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    34f8:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    34fc:	aa01      	add	r2, sp, #4
    34fe:	4669      	mov	r1, sp
    3500:	f000 f8b8 	bl	3674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    3504:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3508:	280f      	cmp	r0, #15
    350a:	bf8c      	ite	hi
    350c:	2001      	movhi	r0, #1
    350e:	2000      	movls	r0, #0
    3510:	9900      	ldr	r1, [sp, #0]
    3512:	4408      	add	r0, r1
    3514:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3518:	60a1      	str	r1, [r4, #8]
    351a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    351e:	f88d 0000 	strb.w	r0, [sp]
    3522:	f89d 0000 	ldrb.w	r0, [sp]
    3526:	2800      	cmp	r0, #0
    3528:	bf04      	itt	eq
    352a:	b002      	addeq	sp, #8
    352c:	bd10      	popeq	{r4, pc}
    352e:	2301      	movs	r3, #1
    3530:	2203      	movs	r2, #3
    3532:	2005      	movs	r0, #5
    3534:	f000 fb86 	bl	3c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3538:	2800      	cmp	r0, #0
    353a:	bf1c      	itt	ne
    353c:	b002      	addne	sp, #8
    353e:	bd10      	popne	{r4, pc}
    3540:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3544:	2070      	movs	r0, #112	; 0x70
    3546:	f001 f8f7 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    354a:	0000      	.short	0x0000
    354c:	20000eb4 	.word	0x20000eb4
    3550:	1e847fff 	.word	0x1e847fff
    3554:	07a12000 	.word	0x07a12000
    3558:	f85ee000 	.word	0xf85ee000
    355c:	1e848000 	.word	0x1e848000

00003560 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3560:	b570      	push	{r4, r5, r6, lr}
    3562:	4c1e      	ldr	r4, [pc, #120]	; (35dc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3564:	2120      	movs	r1, #32
    3566:	f884 1020 	strb.w	r1, [r4, #32]
    356a:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    356e:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3572:	2000      	movs	r0, #0
    3574:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3578:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    357c:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3580:	1e42      	subs	r2, r0, #1
    3582:	60a2      	str	r2, [r4, #8]
    3584:	6020      	str	r0, [r4, #0]
    3586:	77a0      	strb	r0, [r4, #30]
    3588:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    358c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3590:	7720      	strb	r0, [r4, #28]
    3592:	7760      	strb	r0, [r4, #29]
    3594:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    3598:	4911      	ldr	r1, [pc, #68]	; (35e0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    359a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    359e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    35a2:	7008      	strb	r0, [r1, #0]
    35a4:	7048      	strb	r0, [r1, #1]
    35a6:	8048      	strh	r0, [r1, #2]
    35a8:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    35ac:	2210      	movs	r2, #16
    35ae:	7088      	strb	r0, [r1, #2]
    35b0:	f801 0f04 	strb.w	r0, [r1, #4]!
    35b4:	1e52      	subs	r2, r2, #1
    35b6:	d1fa      	bne.n	35ae <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    35b8:	4d0a      	ldr	r5, [pc, #40]	; (35e4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    35ba:	2601      	movs	r6, #1
    35bc:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    35c0:	20ff      	movs	r0, #255	; 0xff
    35c2:	7028      	strb	r0, [r5, #0]
    35c4:	4808      	ldr	r0, [pc, #32]	; (35e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    35c6:	f001 f969 	bl	489c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    35ca:	7068      	strb	r0, [r5, #1]
    35cc:	f001 f9c4 	bl	4958 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    35d0:	60a8      	str	r0, [r5, #8]
    35d2:	f000 fcf1 	bl	3fb8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    35d6:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    35da:	bd70      	pop	{r4, r5, r6, pc}
    35dc:	20000eb4 	.word	0x20000eb4
    35e0:	20000012 	.word	0x20000012
    35e4:	20000010 	.word	0x20000010
    35e8:	00001f8d 	.word	0x00001f8d

000035ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    35ec:	b570      	push	{r4, r5, r6, lr}
    35ee:	4604      	mov	r4, r0
    35f0:	4615      	mov	r5, r2
    35f2:	4608      	mov	r0, r1
    35f4:	f009 f83e 	bl	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    35f8:	4a0f      	ldr	r2, [pc, #60]	; (3638 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    35fa:	1b01      	subs	r1, r0, r4
    35fc:	1c53      	adds	r3, r2, #1
    35fe:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    3602:	bf24      	itt	cs
    3604:	eba4 0c00 	subcs.w	ip, r4, r0
    3608:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    360c:	d30b      	bcc.n	3626 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    360e:	428a      	cmp	r2, r1
    3610:	d203      	bcs.n	361a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    3612:	1b11      	subs	r1, r2, r4
    3614:	4408      	add	r0, r1
    3616:	1c41      	adds	r1, r0, #1
    3618:	e005      	b.n	3626 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    361a:	4562      	cmp	r2, ip
    361c:	d207      	bcs.n	362e <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    361e:	1a10      	subs	r0, r2, r0
    3620:	4420      	add	r0, r4
    3622:	1c40      	adds	r0, r0, #1
    3624:	4241      	negs	r1, r0
    3626:	f101 000f 	add.w	r0, r1, #15
    362a:	1a28      	subs	r0, r5, r0
    362c:	bd70      	pop	{r4, r5, r6, pc}
    362e:	f640 310c 	movw	r1, #2828	; 0xb0c
    3632:	2070      	movs	r0, #112	; 0x70
    3634:	f001 f880 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3638:	1e847fff 	.word	0x1e847fff

0000363c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    363c:	0b41      	lsrs	r1, r0, #13
    363e:	f248 6237 	movw	r2, #34359	; 0x8637
    3642:	4351      	muls	r1, r2
    3644:	0c0a      	lsrs	r2, r1, #16
    3646:	4b09      	ldr	r3, [pc, #36]	; (366c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3648:	0251      	lsls	r1, r2, #9
    364a:	fb02 0203 	mla	r2, r2, r3, r0
    364e:	4808      	ldr	r0, [pc, #32]	; (3670 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3650:	4350      	muls	r0, r2
    3652:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3656:	306e      	adds	r0, #110	; 0x6e
    3658:	0d40      	lsrs	r0, r0, #21
    365a:	425b      	negs	r3, r3
    365c:	fb10 f303 	smulbb	r3, r0, r3
    3660:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3664:	bf88      	it	hi
    3666:	1c49      	addhi	r1, r1, #1
    3668:	4408      	add	r0, r1
    366a:	4770      	bx	lr
    366c:	ffffc2f7 	.word	0xffffc2f7
    3670:	00010c6f 	.word	0x00010c6f

00003674 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3674:	0b43      	lsrs	r3, r0, #13
    3676:	f248 6c37 	movw	ip, #34359	; 0x8637
    367a:	fb03 f30c 	mul.w	r3, r3, ip
    367e:	b430      	push	{r4, r5}
    3680:	0c1b      	lsrs	r3, r3, #16
    3682:	f8df c044 	ldr.w	ip, [pc, #68]	; 36c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3686:	025c      	lsls	r4, r3, #9
    3688:	fb03 030c 	mla	r3, r3, ip, r0
    368c:	480f      	ldr	r0, [pc, #60]	; (36cc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    368e:	4358      	muls	r0, r3
    3690:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3694:	eb04 000c 	add.w	r0, r4, ip
    3698:	f643 5409 	movw	r4, #15625	; 0x3d09
    369c:	fb1c f404 	smulbb	r4, ip, r4
    36a0:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    36a4:	f643 5508 	movw	r5, #15624	; 0x3d08
    36a8:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    36ac:	442c      	add	r4, r5
    36ae:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    36b2:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    36b6:	bf84      	itt	hi
    36b8:	f04f 0c00 	movhi.w	ip, #0
    36bc:	1c40      	addhi	r0, r0, #1
    36be:	6008      	str	r0, [r1, #0]
    36c0:	f882 c000 	strb.w	ip, [r2]
    36c4:	bc30      	pop	{r4, r5}
    36c6:	4770      	bx	lr
    36c8:	ffffc2f7 	.word	0xffffc2f7
    36cc:	00010c6f 	.word	0x00010c6f

000036d0 <MPSL_IRQ_RTC0_Handler>:
    36d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36d4:	4c36      	ldr	r4, [pc, #216]	; (37b0 <MPSL_IRQ_RTC0_Handler+0xe0>)
    36d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    36da:	f44f 6600 	mov.w	r6, #2048	; 0x800
    36de:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    36e2:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    36e6:	f04f 0500 	mov.w	r5, #0
    36ea:	d019      	beq.n	3720 <MPSL_IRQ_RTC0_Handler+0x50>
    36ec:	4831      	ldr	r0, [pc, #196]	; (37b4 <MPSL_IRQ_RTC0_Handler+0xe4>)
    36ee:	6800      	ldr	r0, [r0, #0]
    36f0:	b1b0      	cbz	r0, 3720 <MPSL_IRQ_RTC0_Handler+0x50>
    36f2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    36f6:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    36fa:	482f      	ldr	r0, [pc, #188]	; (37b8 <MPSL_IRQ_RTC0_Handler+0xe8>)
    36fc:	6800      	ldr	r0, [r0, #0]
    36fe:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3702:	1a40      	subs	r0, r0, r1
    3704:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3708:	2802      	cmp	r0, #2
    370a:	d302      	bcc.n	3712 <MPSL_IRQ_RTC0_Handler+0x42>
    370c:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3710:	d306      	bcc.n	3720 <MPSL_IRQ_RTC0_Handler+0x50>
    3712:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3716:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    371a:	2004      	movs	r0, #4
    371c:	f7fe ff2c 	bl	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3720:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3724:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3728:	d019      	beq.n	375e <MPSL_IRQ_RTC0_Handler+0x8e>
    372a:	4824      	ldr	r0, [pc, #144]	; (37bc <MPSL_IRQ_RTC0_Handler+0xec>)
    372c:	6800      	ldr	r0, [r0, #0]
    372e:	b1b0      	cbz	r0, 375e <MPSL_IRQ_RTC0_Handler+0x8e>
    3730:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3734:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3738:	4821      	ldr	r0, [pc, #132]	; (37c0 <MPSL_IRQ_RTC0_Handler+0xf0>)
    373a:	6800      	ldr	r0, [r0, #0]
    373c:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3740:	1a40      	subs	r0, r0, r1
    3742:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3746:	2802      	cmp	r0, #2
    3748:	d302      	bcc.n	3750 <MPSL_IRQ_RTC0_Handler+0x80>
    374a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    374e:	d306      	bcc.n	375e <MPSL_IRQ_RTC0_Handler+0x8e>
    3750:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3754:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3758:	2005      	movs	r0, #5
    375a:	f7fe ff0d 	bl	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    375e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3762:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3766:	bf08      	it	eq
    3768:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    376c:	4815      	ldr	r0, [pc, #84]	; (37c4 <MPSL_IRQ_RTC0_Handler+0xf4>)
    376e:	6800      	ldr	r0, [r0, #0]
    3770:	2800      	cmp	r0, #0
    3772:	bf08      	it	eq
    3774:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3778:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    377c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3780:	4811      	ldr	r0, [pc, #68]	; (37c8 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3782:	6800      	ldr	r0, [r0, #0]
    3784:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3788:	1a40      	subs	r0, r0, r1
    378a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    378e:	2802      	cmp	r0, #2
    3790:	d304      	bcc.n	379c <MPSL_IRQ_RTC0_Handler+0xcc>
    3792:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3796:	bf38      	it	cc
    3798:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    379c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    37a0:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    37a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    37a8:	2006      	movs	r0, #6
    37aa:	f7fe bee5 	b.w	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37ae:	0000      	.short	0x0000
    37b0:	4000b000 	.word	0x4000b000
    37b4:	4000b140 	.word	0x4000b140
    37b8:	4000b540 	.word	0x4000b540
    37bc:	4000b144 	.word	0x4000b144
    37c0:	4000b544 	.word	0x4000b544
    37c4:	4000b148 	.word	0x4000b148
    37c8:	4000b548 	.word	0x4000b548

000037cc <MPSL_IRQ_TIMER0_Handler>:
    37cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37d0:	4d38      	ldr	r5, [pc, #224]	; (38b4 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    37d2:	7828      	ldrb	r0, [r5, #0]
    37d4:	2804      	cmp	r0, #4
    37d6:	d068      	beq.n	38aa <MPSL_IRQ_TIMER0_Handler+0xde>
    37d8:	1ce8      	adds	r0, r5, #3
    37da:	2201      	movs	r2, #1
    37dc:	7801      	ldrb	r1, [r0, #0]
    37de:	b159      	cbz	r1, 37f8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    37e0:	2901      	cmp	r1, #1
    37e2:	bf08      	it	eq
    37e4:	706a      	strbeq	r2, [r5, #1]
    37e6:	d002      	beq.n	37ee <MPSL_IRQ_TIMER0_Handler+0x22>
    37e8:	7869      	ldrb	r1, [r5, #1]
    37ea:	2900      	cmp	r1, #0
    37ec:	d058      	beq.n	38a0 <MPSL_IRQ_TIMER0_Handler+0xd4>
    37ee:	2102      	movs	r1, #2
    37f0:	7001      	strb	r1, [r0, #0]
    37f2:	7840      	ldrb	r0, [r0, #1]
    37f4:	f000 fafa 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    37f8:	4c2f      	ldr	r4, [pc, #188]	; (38b8 <MPSL_IRQ_TIMER0_Handler+0xec>)
    37fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37fe:	f04f 0800 	mov.w	r8, #0
    3802:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3806:	f44f 7780 	mov.w	r7, #256	; 0x100
    380a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    380e:	d00a      	beq.n	3826 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3810:	482a      	ldr	r0, [pc, #168]	; (38bc <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3812:	6800      	ldr	r0, [r0, #0]
    3814:	b138      	cbz	r0, 3826 <MPSL_IRQ_TIMER0_Handler+0x5a>
    3816:	2003      	movs	r0, #3
    3818:	f000 fae8 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    381c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3820:	2003      	movs	r0, #3
    3822:	f7fe fea9 	bl	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3826:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    382a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    382e:	d00a      	beq.n	3846 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3830:	4823      	ldr	r0, [pc, #140]	; (38c0 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3832:	6800      	ldr	r0, [r0, #0]
    3834:	b138      	cbz	r0, 3846 <MPSL_IRQ_TIMER0_Handler+0x7a>
    3836:	2002      	movs	r0, #2
    3838:	f000 fad8 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    383c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3840:	2002      	movs	r0, #2
    3842:	f7fe fe99 	bl	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3846:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    384a:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    384e:	d00a      	beq.n	3866 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3850:	481c      	ldr	r0, [pc, #112]	; (38c4 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3852:	6800      	ldr	r0, [r0, #0]
    3854:	b138      	cbz	r0, 3866 <MPSL_IRQ_TIMER0_Handler+0x9a>
    3856:	2001      	movs	r0, #1
    3858:	f000 fac8 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    385c:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3860:	2001      	movs	r0, #1
    3862:	f7fe fe89 	bl	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3866:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    386a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    386e:	bf08      	it	eq
    3870:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3874:	4814      	ldr	r0, [pc, #80]	; (38c8 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3876:	6800      	ldr	r0, [r0, #0]
    3878:	2800      	cmp	r0, #0
    387a:	bf08      	it	eq
    387c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3880:	2000      	movs	r0, #0
    3882:	f000 fab3 	bl	3dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3886:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    388a:	2004      	movs	r0, #4
    388c:	7028      	strb	r0, [r5, #0]
    388e:	f8c5 8008 	str.w	r8, [r5, #8]
    3892:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    389a:	2000      	movs	r0, #0
    389c:	f7fe be6c 	b.w	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38a0:	f240 316a 	movw	r1, #874	; 0x36a
    38a4:	206c      	movs	r0, #108	; 0x6c
    38a6:	f000 ff47 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    38ae:	2007      	movs	r0, #7
    38b0:	f7fe be62 	b.w	2578 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38b4:	2000001c 	.word	0x2000001c
    38b8:	40008000 	.word	0x40008000
    38bc:	4000814c 	.word	0x4000814c
    38c0:	40008148 	.word	0x40008148
    38c4:	40008144 	.word	0x40008144
    38c8:	40008140 	.word	0x40008140
    38cc:	2201      	movs	r2, #1
    38ce:	0211      	lsls	r1, r2, #8
    38d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    38d4:	2000      	movs	r0, #0
    38d6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    38da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    38de:	f3bf 8f4f 	dsb	sy
    38e2:	f3bf 8f6f 	isb	sy
    38e6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    38ea:	490e      	ldr	r1, [pc, #56]	; (3924 <MPSL_IRQ_TIMER0_Handler+0x158>)
    38ec:	f841 2f04 	str.w	r2, [r1, #4]!
    38f0:	1e43      	subs	r3, r0, #1
    38f2:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    38f6:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    38fa:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    38fe:	4b0a      	ldr	r3, [pc, #40]	; (3928 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3900:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3904:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3908:	1d1b      	adds	r3, r3, #4
    390a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    390e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3912:	1d1b      	adds	r3, r3, #4
    3914:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3918:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    391c:	60ca      	str	r2, [r1, #12]
    391e:	4903      	ldr	r1, [pc, #12]	; (392c <MPSL_IRQ_TIMER0_Handler+0x160>)
    3920:	7048      	strb	r0, [r1, #1]
    3922:	4770      	bx	lr
    3924:	40008000 	.word	0x40008000
    3928:	40008004 	.word	0x40008004
    392c:	2000001c 	.word	0x2000001c

00003930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3930:	4801      	ldr	r0, [pc, #4]	; (3938 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3932:	6800      	ldr	r0, [r0, #0]
    3934:	4770      	bx	lr
    3936:	0000      	.short	0x0000
    3938:	4000b504 	.word	0x4000b504

0000393c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3940:	4e47      	ldr	r6, [pc, #284]	; (3a60 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    3942:	4605      	mov	r5, r0
    3944:	1ef7      	subs	r7, r6, #3
    3946:	7832      	ldrb	r2, [r6, #0]
    3948:	68f9      	ldr	r1, [r7, #12]
    394a:	2a01      	cmp	r2, #1
    394c:	bf04      	itt	eq
    394e:	42a9      	cmpeq	r1, r5
    3950:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3954:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3958:	4b42      	ldr	r3, [pc, #264]	; (3a64 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    395a:	6018      	str	r0, [r3, #0]
    395c:	4842      	ldr	r0, [pc, #264]	; (3a68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    395e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3962:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3966:	f100 0304 	add.w	r3, r0, #4
    396a:	f04f 0400 	mov.w	r4, #0
    396e:	2a00      	cmp	r2, #0
    3970:	d061      	beq.n	3a36 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    3972:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3976:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    397a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    397e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3982:	4b3a      	ldr	r3, [pc, #232]	; (3a6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    398a:	f04f 0801 	mov.w	r8, #1
    398e:	2b00      	cmp	r3, #0
    3990:	bf04      	itt	eq
    3992:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    3996:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    399a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    399e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    39a2:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    39a6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    39aa:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    39ae:	1aeb      	subs	r3, r5, r3
    39b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    39b4:	2b02      	cmp	r3, #2
    39b6:	d34b      	bcc.n	3a50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    39b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    39bc:	d248      	bcs.n	3a50 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    39be:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    39c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    39c6:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    39ca:	b132      	cbz	r2, 39da <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    39cc:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    39d0:	1a8a      	subs	r2, r1, r2
    39d2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    39d6:	2a02      	cmp	r2, #2
    39d8:	d3f8      	bcc.n	39cc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    39da:	f8c7 8008 	str.w	r8, [r7, #8]
    39de:	703c      	strb	r4, [r7, #0]
    39e0:	f7ff ff74 	bl	38cc <MPSL_IRQ_TIMER0_Handler+0x100>
    39e4:	4822      	ldr	r0, [pc, #136]	; (3a70 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    39e6:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    39ea:	f364 0101 	bfi	r1, r4, #0, #2
    39ee:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    39f2:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    39f6:	2102      	movs	r1, #2
    39f8:	f361 0201 	bfi	r2, r1, #0, #2
    39fc:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3a00:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3a04:	2104      	movs	r1, #4
    3a06:	f361 0203 	bfi	r2, r1, #0, #4
    3a0a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    3a0e:	f8c0 800c 	str.w	r8, [r0, #12]
    3a12:	68b9      	ldr	r1, [r7, #8]
    3a14:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3a18:	1580      	asrs	r0, r0, #22
    3a1a:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3a1e:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3a22:	4914      	ldr	r1, [pc, #80]	; (3a74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3a24:	05c0      	lsls	r0, r0, #23
    3a26:	6008      	str	r0, [r1, #0]
    3a28:	2004      	movs	r0, #4
    3a2a:	60fd      	str	r5, [r7, #12]
    3a2c:	7070      	strb	r0, [r6, #1]
    3a2e:	f886 8000 	strb.w	r8, [r6]
    3a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3a36:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3a3a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    3a3e:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3a42:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3a46:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    3a4a:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3a4e:	e798      	b.n	3982 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3a50:	2100      	movs	r1, #0
    3a52:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3a56:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3a5a:	206c      	movs	r0, #108	; 0x6c
    3a5c:	f000 fe6c 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a60:	2000001f 	.word	0x2000001f
    3a64:	4001f508 	.word	0x4001f508
    3a68:	4000b000 	.word	0x4000b000
    3a6c:	4000b148 	.word	0x4000b148
    3a70:	40008000 	.word	0x40008000
    3a74:	4001f504 	.word	0x4001f504

00003a78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3a78:	b570      	push	{r4, r5, r6, lr}
    3a7a:	4c2c      	ldr	r4, [pc, #176]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3a7c:	68e2      	ldr	r2, [r4, #12]
    3a7e:	4282      	cmp	r2, r0
    3a80:	bf14      	ite	ne
    3a82:	2101      	movne	r1, #1
    3a84:	2100      	moveq	r1, #0
    3a86:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 3b30 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x98>
    3a8a:	f89c 5000 	ldrb.w	r5, [ip]
    3a8e:	2d02      	cmp	r5, #2
    3a90:	d002      	beq.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3a92:	2900      	cmp	r1, #0
    3a94:	d037      	beq.n	3b06 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6e>
    3a96:	e002      	b.n	3a9e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6>
    3a98:	2900      	cmp	r1, #0
    3a9a:	bf08      	it	eq
    3a9c:	bd70      	popeq	{r4, r5, r6, pc}
    3a9e:	7861      	ldrb	r1, [r4, #1]
    3aa0:	b381      	cbz	r1, 3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>
    3aa2:	4b24      	ldr	r3, [pc, #144]	; (3b34 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x9c>)
    3aa4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3aa8:	6019      	str	r1, [r3, #0]
    3aaa:	138b      	asrs	r3, r1, #14
    3aac:	4922      	ldr	r1, [pc, #136]	; (3b38 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa0>)
    3aae:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3ab2:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3ab6:	2300      	movs	r3, #0
    3ab8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    3abc:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3ac0:	1ac3      	subs	r3, r0, r3
    3ac2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ac6:	2b02      	cmp	r3, #2
    3ac8:	d327      	bcc.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    3aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3ace:	d224      	bcs.n	3b1a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x82>
    3ad0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ad8:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3adc:	b13d      	cbz	r5, 3aee <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x56>
    3ade:	bf00      	nop
    3ae0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3ae4:	1ad3      	subs	r3, r2, r3
    3ae6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3aea:	2b02      	cmp	r3, #2
    3aec:	d3f8      	bcc.n	3ae0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x48>
    3aee:	4b13      	ldr	r3, [pc, #76]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
    3af0:	2102      	movs	r1, #2
    3af2:	074a      	lsls	r2, r1, #29
    3af4:	601a      	str	r2, [r3, #0]
    3af6:	60e0      	str	r0, [r4, #12]
    3af8:	2004      	movs	r0, #4
    3afa:	f88c 0001 	strb.w	r0, [ip, #1]
    3afe:	f88c 1000 	strb.w	r1, [ip]
    3b02:	bd70      	pop	{r4, r5, r6, pc}
    3b04:	e004      	b.n	3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>
    3b06:	f240 2102 	movw	r1, #514	; 0x202
    3b0a:	206c      	movs	r0, #108	; 0x6c
    3b0c:	f000 fe14 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b10:	f240 2106 	movw	r1, #518	; 0x206
    3b14:	206c      	movs	r0, #108	; 0x6c
    3b16:	f000 fe0f 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b1a:	2000      	movs	r0, #0
    3b1c:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3b20:	f240 2112 	movw	r1, #530	; 0x212
    3b24:	206c      	movs	r0, #108	; 0x6c
    3b26:	f000 fe07 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b2a:	0000      	.short	0x0000
    3b2c:	2000001c 	.word	0x2000001c
    3b30:	2000001f 	.word	0x2000001f
    3b34:	4001f508 	.word	0x4001f508
    3b38:	4000b000 	.word	0x4000b000
    3b3c:	4001f504 	.word	0x4001f504

00003b40 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3b40:	4801      	ldr	r0, [pc, #4]	; (3b48 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3b42:	68c0      	ldr	r0, [r0, #12]
    3b44:	4770      	bx	lr
    3b46:	0000      	.short	0x0000
    3b48:	2000001c 	.word	0x2000001c

00003b4c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b50:	4936      	ldr	r1, [pc, #216]	; (3c2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3b52:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3b56:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3b5a:	4d35      	ldr	r5, [pc, #212]	; (3c30 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3b5c:	1d0b      	adds	r3, r1, #4
    3b5e:	2200      	movs	r2, #0
    3b60:	7828      	ldrb	r0, [r5, #0]
    3b62:	b168      	cbz	r0, 3b80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    3b64:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3b68:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3b6c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3b70:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3b74:	4b2f      	ldr	r3, [pc, #188]	; (3c34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3b76:	681b      	ldr	r3, [r3, #0]
    3b78:	f04f 0c01 	mov.w	ip, #1
    3b7c:	b99b      	cbnz	r3, 3ba6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    3b7e:	e00c      	b.n	3b9a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    3b80:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3b84:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3b88:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    3b8c:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    3b90:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3b94:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3b98:	e7ec      	b.n	3b74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3b9a:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3b9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3ba2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    3ba6:	2802      	cmp	r0, #2
    3ba8:	d004      	beq.n	3bb4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    3baa:	f240 211e 	movw	r1, #542	; 0x21e
    3bae:	206c      	movs	r0, #108	; 0x6c
    3bb0:	f000 fdc2 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bb4:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3bb8:	4c1f      	ldr	r4, [pc, #124]	; (3c38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3bba:	1cc0      	adds	r0, r0, #3
    3bbc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3bc0:	68e3      	ldr	r3, [r4, #12]
    3bc2:	4e1e      	ldr	r6, [pc, #120]	; (3c3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3bc4:	4298      	cmp	r0, r3
    3bc6:	d00c      	beq.n	3be2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3bc8:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    3bcc:	1bdf      	subs	r7, r3, r7
    3bce:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3bd2:	2f04      	cmp	r7, #4
    3bd4:	d305      	bcc.n	3be2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3bd6:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3bda:	d202      	bcs.n	3be2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3bdc:	f7ff feae 	bl	393c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3be0:	e01f      	b.n	3c22 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    3be2:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3be6:	1a18      	subs	r0, r3, r0
    3be8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3bec:	2802      	cmp	r0, #2
    3bee:	d315      	bcc.n	3c1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3bf0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3bf4:	d212      	bcs.n	3c1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3bf6:	4912      	ldr	r1, [pc, #72]	; (3c40 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3bf8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3bfc:	6008      	str	r0, [r1, #0]
    3bfe:	f8c4 c008 	str.w	ip, [r4, #8]
    3c02:	7022      	strb	r2, [r4, #0]
    3c04:	f8c6 c004 	str.w	ip, [r6, #4]
    3c08:	f8c6 c00c 	str.w	ip, [r6, #12]
    3c0c:	0040      	lsls	r0, r0, #1
    3c0e:	1f09      	subs	r1, r1, #4
    3c10:	6008      	str	r0, [r1, #0]
    3c12:	2004      	movs	r0, #4
    3c14:	7068      	strb	r0, [r5, #1]
    3c16:	f885 c000 	strb.w	ip, [r5]
    3c1a:	e002      	b.n	3c22 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    3c1c:	f8c4 c008 	str.w	ip, [r4, #8]
    3c20:	7022      	strb	r2, [r4, #0]
    3c22:	68a0      	ldr	r0, [r4, #8]
    3c24:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    3c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3c2c:	4000b000 	.word	0x4000b000
    3c30:	2000001f 	.word	0x2000001f
    3c34:	4000b148 	.word	0x4000b148
    3c38:	2000001c 	.word	0x2000001c
    3c3c:	40008000 	.word	0x40008000
    3c40:	4001f508 	.word	0x4001f508

00003c44 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3c48:	f8df c190 	ldr.w	ip, [pc, #400]	; 3ddc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    3c4c:	2600      	movs	r6, #0
    3c4e:	2701      	movs	r7, #1
    3c50:	f89c 4000 	ldrb.w	r4, [ip]
    3c54:	f89c c001 	ldrb.w	ip, [ip, #1]
    3c58:	f44f 75a0 	mov.w	r5, #320	; 0x140
    3c5c:	2807      	cmp	r0, #7
    3c5e:	d27b      	bcs.n	3d58 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3c60:	e8df f000 	tbb	[pc, r0]
    3c64:	04040404 	.word	0x04040404
    3c68:	006c6c6c 	.word	0x006c6c6c
    3c6c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3de0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    3c70:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3c74:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3c78:	bf04      	itt	eq
    3c7a:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    3c7e:	f1b8 0f00 	cmpeq.w	r8, #0
    3c82:	d002      	beq.n	3c8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3c84:	2c02      	cmp	r4, #2
    3c86:	d005      	beq.n	3c94 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3c88:	e02c      	b.n	3ce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    3c8a:	f240 2151 	movw	r1, #593	; 0x251
    3c8e:	206c      	movs	r0, #108	; 0x6c
    3c90:	f000 fd52 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c94:	f1ac 0804 	sub.w	r8, ip, #4
    3c98:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3c9c:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    3ca0:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    3ca4:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3ca8:	2500      	movs	r5, #0
    3caa:	2c01      	cmp	r4, #1
    3cac:	d002      	beq.n	3cb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    3cae:	2c02      	cmp	r4, #2
    3cb0:	d00b      	beq.n	3cca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3cb2:	e014      	b.n	3cde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3cb4:	f1bc 0f04 	cmp.w	ip, #4
    3cb8:	bf24      	itt	cs
    3cba:	f8d8 9000 	ldrcs.w	r9, [r8]
    3cbe:	f1b9 0f00 	cmpcs.w	r9, #0
    3cc2:	bf08      	it	eq
    3cc4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3cc8:	e009      	b.n	3cde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3cca:	f1bc 0f04 	cmp.w	ip, #4
    3cce:	bf24      	itt	cs
    3cd0:	f8d8 9000 	ldrcs.w	r9, [r8]
    3cd4:	f1b9 0f00 	cmpcs.w	r9, #0
    3cd8:	bf08      	it	eq
    3cda:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    3cde:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    3ce2:	d1e1      	bne.n	3ca8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    3ce4:	4c3f      	ldr	r4, [pc, #252]	; (3de4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3ce6:	f100 0c10 	add.w	ip, r0, #16
    3cea:	fa07 fc0c 	lsl.w	ip, r7, ip
    3cee:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3cf2:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3cf6:	b1c2      	cbz	r2, 3d2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    3cf8:	f04f 0840 	mov.w	r8, #64	; 0x40
    3cfc:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    3d00:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3d04:	44a0      	add	r8, r4
    3d06:	f8c8 7000 	str.w	r7, [r8]
    3d0a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3d0e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3d12:	eba1 0000 	sub.w	r0, r1, r0
    3d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3d1a:	4282      	cmp	r2, r0
    3d1c:	bf98      	it	ls
    3d1e:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    3d22:	bf28      	it	cs
    3d24:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    3d28:	d250      	bcs.n	3dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3d2a:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    3d2e:	2b01      	cmp	r3, #1
    3d30:	bf08      	it	eq
    3d32:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3d36:	2001      	movs	r0, #1
    3d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3d3c:	b134      	cbz	r4, 3d4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    3d3e:	4584      	cmp	ip, r0
    3d40:	d104      	bne.n	3d4c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    3d42:	f44f 711d 	mov.w	r1, #628	; 0x274
    3d46:	206c      	movs	r0, #108	; 0x6c
    3d48:	f000 fcf6 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d4c:	f1a0 0c04 	sub.w	ip, r0, #4
    3d50:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    3d54:	2b01      	cmp	r3, #1
    3d56:	e000      	b.n	3d5a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3d58:	e03b      	b.n	3dd2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    3d5a:	bf0c      	ite	eq
    3d5c:	f04f 0801 	moveq.w	r8, #1
    3d60:	f04f 0800 	movne.w	r8, #0
    3d64:	2c03      	cmp	r4, #3
    3d66:	d304      	bcc.n	3d72 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    3d68:	f240 114d 	movw	r1, #333	; 0x14d
    3d6c:	206c      	movs	r0, #108	; 0x6c
    3d6e:	f000 fce3 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d72:	f8df c074 	ldr.w	ip, [pc, #116]	; 3de8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3d76:	f104 0310 	add.w	r3, r4, #16
    3d7a:	fa07 f303 	lsl.w	r3, r7, r3
    3d7e:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3d82:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3d86:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3d8a:	f84c 6004 	str.w	r6, [ip, r4]
    3d8e:	1f00      	subs	r0, r0, #4
    3d90:	b2c0      	uxtb	r0, r0
    3d92:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3d96:	b16a      	cbz	r2, 3db4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3d98:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    3d9c:	1b0c      	subs	r4, r1, r4
    3d9e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    3da2:	42a2      	cmp	r2, r4
    3da4:	bf98      	it	ls
    3da6:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    3daa:	bf24      	itt	cs
    3dac:	2100      	movcs	r1, #0
    3dae:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3db2:	d20b      	bcs.n	3dcc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3db4:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3db8:	f1b8 0f00 	cmp.w	r8, #0
    3dbc:	bf18      	it	ne
    3dbe:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3dc2:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3dc6:	2001      	movs	r0, #1
    3dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dcc:	2000      	movs	r0, #0
    3dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dd2:	f240 2179 	movw	r1, #633	; 0x279
    3dd6:	206c      	movs	r0, #108	; 0x6c
    3dd8:	f000 fcae 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3ddc:	2000001f 	.word	0x2000001f
    3de0:	2000001c 	.word	0x2000001c
    3de4:	40008000 	.word	0x40008000
    3de8:	4000b000 	.word	0x4000b000

00003dec <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3dec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3df0:	2600      	movs	r6, #0
    3df2:	f44f 77a0 	mov.w	r7, #320	; 0x140
    3df6:	f04f 0801 	mov.w	r8, #1
    3dfa:	2807      	cmp	r0, #7
    3dfc:	d251      	bcs.n	3ea2 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    3dfe:	e8df f000 	tbb	[pc, r0]
    3e02:	0404      	.short	0x0404
    3e04:	19190404 	.word	0x19190404
    3e08:	0019      	.short	0x0019
    3e0a:	f100 0110 	add.w	r1, r0, #16
    3e0e:	fa08 f201 	lsl.w	r2, r8, r1
    3e12:	4926      	ldr	r1, [pc, #152]	; (3eac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3e14:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3e18:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3e1c:	2200      	movs	r2, #0
    3e1e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3e22:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    3e26:	508e      	str	r6, [r1, r2]
    3e28:	4921      	ldr	r1, [pc, #132]	; (3eb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3e2a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3e2e:	9000      	str	r0, [sp, #0]
    3e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e34:	4d1f      	ldr	r5, [pc, #124]	; (3eb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3e36:	1f01      	subs	r1, r0, #4
    3e38:	b2cc      	uxtb	r4, r1
    3e3a:	7829      	ldrb	r1, [r5, #0]
    3e3c:	b179      	cbz	r1, 3e5e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    3e3e:	786a      	ldrb	r2, [r5, #1]
    3e40:	4282      	cmp	r2, r0
    3e42:	d10c      	bne.n	3e5e <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    3e44:	4a1c      	ldr	r2, [pc, #112]	; (3eb8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3e46:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3e4a:	6010      	str	r0, [r2, #0]
    3e4c:	2901      	cmp	r1, #1
    3e4e:	bf08      	it	eq
    3e50:	f7ff fd3c 	bleq	38cc <MPSL_IRQ_TIMER0_Handler+0x100>
    3e54:	702e      	strb	r6, [r5, #0]
    3e56:	4919      	ldr	r1, [pc, #100]	; (3ebc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    3e58:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3e5c:	60c8      	str	r0, [r1, #12]
    3e5e:	f104 0010 	add.w	r0, r4, #16
    3e62:	fa08 f100 	lsl.w	r1, r8, r0
    3e66:	4816      	ldr	r0, [pc, #88]	; (3ec0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    3e68:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3e6c:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3e70:	00a1      	lsls	r1, r4, #2
    3e72:	4401      	add	r1, r0
    3e74:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    3e78:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3e7c:	1a89      	subs	r1, r1, r2
    3e7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3e82:	2902      	cmp	r1, #2
    3e84:	d307      	bcc.n	3e96 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    3e86:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    3e8a:	2100      	movs	r1, #0
    3e8c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3e90:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3e94:	5046      	str	r6, [r0, r1]
    3e96:	480b      	ldr	r0, [pc, #44]	; (3ec4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    3e98:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    3e9c:	9000      	str	r0, [sp, #0]
    3e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ea2:	f240 21f1 	movw	r1, #753	; 0x2f1
    3ea6:	206c      	movs	r0, #108	; 0x6c
    3ea8:	f000 fc46 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3eac:	40008000 	.word	0x40008000
    3eb0:	40008140 	.word	0x40008140
    3eb4:	2000001f 	.word	0x2000001f
    3eb8:	4001f508 	.word	0x4001f508
    3ebc:	2000001c 	.word	0x2000001c
    3ec0:	4000b000 	.word	0x4000b000
    3ec4:	4000b140 	.word	0x4000b140

00003ec8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3ec8:	4920      	ldr	r1, [pc, #128]	; (3f4c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3eca:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3ece:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3ed2:	481f      	ldr	r0, [pc, #124]	; (3f50 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3ed4:	1d0a      	adds	r2, r1, #4
    3ed6:	7803      	ldrb	r3, [r0, #0]
    3ed8:	2000      	movs	r0, #0
    3eda:	b15b      	cbz	r3, 3ef4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    3edc:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3ee0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3ee4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3ee8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3eec:	4919      	ldr	r1, [pc, #100]	; (3f54 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3eee:	6809      	ldr	r1, [r1, #0]
    3ef0:	b999      	cbnz	r1, 3f1a <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    3ef2:	e00c      	b.n	3f0e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    3ef4:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3ef8:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3efc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3f00:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f04:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3f08:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f0c:	e7ee      	b.n	3eec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    3f0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3f16:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3f1a:	490f      	ldr	r1, [pc, #60]	; (3f58 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3f1c:	f04f 32ff 	mov.w	r2, #4294967295
    3f20:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3f24:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3f28:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f2c:	1d0a      	adds	r2, r1, #4
    3f2e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3f32:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f36:	1d12      	adds	r2, r2, #4
    3f38:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3f3c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3f40:	1d12      	adds	r2, r2, #4
    3f42:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3f46:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3f4a:	4770      	bx	lr
    3f4c:	4000b000 	.word	0x4000b000
    3f50:	2000001f 	.word	0x2000001f
    3f54:	4000b148 	.word	0x4000b148
    3f58:	40008000 	.word	0x40008000

00003f5c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3f5c:	4808      	ldr	r0, [pc, #32]	; (3f80 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3f5e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3f62:	2800      	cmp	r0, #0
    3f64:	bfb8      	it	lt
    3f66:	4770      	bxlt	lr
    3f68:	f000 011f 	and.w	r1, r0, #31
    3f6c:	2201      	movs	r2, #1
    3f6e:	fa02 f101 	lsl.w	r1, r2, r1
    3f72:	0940      	lsrs	r0, r0, #5
    3f74:	0080      	lsls	r0, r0, #2
    3f76:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    3f7a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3f7e:	4770      	bx	lr
    3f80:	2000001c 	.word	0x2000001c

00003f84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3f84:	b510      	push	{r4, lr}
    3f86:	2807      	cmp	r0, #7
    3f88:	d20d      	bcs.n	3fa6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    3f8a:	e8df f000 	tbb	[pc, r0]
    3f8e:	0404      	.short	0x0404
    3f90:	06060404 	.word	0x06060404
    3f94:	0006      	.short	0x0006
    3f96:	4906      	ldr	r1, [pc, #24]	; (3fb0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    3f98:	e002      	b.n	3fa0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    3f9a:	1f00      	subs	r0, r0, #4
    3f9c:	4905      	ldr	r1, [pc, #20]	; (3fb4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    3f9e:	b2c0      	uxtb	r0, r0
    3fa0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	f240 219d 	movw	r1, #669	; 0x29d
    3faa:	206c      	movs	r0, #108	; 0x6c
    3fac:	f000 fbc4 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fb0:	40008140 	.word	0x40008140
    3fb4:	4000b140 	.word	0x4000b140

00003fb8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    3fb8:	b510      	push	{r4, lr}
    3fba:	481c      	ldr	r0, [pc, #112]	; (402c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3fbc:	2400      	movs	r4, #0
    3fbe:	2104      	movs	r1, #4
    3fc0:	7004      	strb	r4, [r0, #0]
    3fc2:	1ec0      	subs	r0, r0, #3
    3fc4:	7001      	strb	r1, [r0, #0]
    3fc6:	0589      	lsls	r1, r1, #22
    3fc8:	60c1      	str	r1, [r0, #12]
    3fca:	f7ff fc7f 	bl	38cc <MPSL_IRQ_TIMER0_Handler+0x100>
    3fce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    3fd6:	f04f 0c01 	mov.w	ip, #1
    3fda:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3fde:	f3bf 8f4f 	dsb	sy
    3fe2:	f3bf 8f6f 	isb	sy
    3fe6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    3fea:	4811      	ldr	r0, [pc, #68]	; (4030 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    3fec:	f8c0 c004 	str.w	ip, [r0, #4]
    3ff0:	f8c0 c008 	str.w	ip, [r0, #8]
    3ff4:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3ff8:	2900      	cmp	r1, #0
    3ffa:	d1fb      	bne.n	3ff4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    3ffc:	1e49      	subs	r1, r1, #1
    3ffe:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4002:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    4006:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    400a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    400e:	4909      	ldr	r1, [pc, #36]	; (4034 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    4010:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4014:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    4018:	1d09      	adds	r1, r1, #4
    401a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    401e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    4022:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4026:	f8c0 c000 	str.w	ip, [r0]
    402a:	bd10      	pop	{r4, pc}
    402c:	2000001f 	.word	0x2000001f
    4030:	4000b000 	.word	0x4000b000
    4034:	4000b004 	.word	0x4000b004

00004038 <MPSL_IRQ_CLOCK_Handler>:
    4038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    403c:	4c16      	ldr	r4, [pc, #88]	; (4098 <MPSL_IRQ_CLOCK_Handler+0x60>)
    403e:	7a60      	ldrb	r0, [r4, #9]
    4040:	2800      	cmp	r0, #0
    4042:	d027      	beq.n	4094 <MPSL_IRQ_CLOCK_Handler+0x5c>
    4044:	f44f 7180 	mov.w	r1, #256	; 0x100
    4048:	058d      	lsls	r5, r1, #22
    404a:	4628      	mov	r0, r5
    404c:	f008 fb63 	bl	c716 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4050:	4680      	mov	r8, r0
    4052:	f44f 7182 	mov.w	r1, #260	; 0x104
    4056:	4628      	mov	r0, r5
    4058:	f008 fb5d 	bl	c716 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    405c:	2600      	movs	r6, #0
    405e:	4607      	mov	r7, r0
    4060:	f1b8 0f00 	cmp.w	r8, #0
    4064:	d009      	beq.n	407a <MPSL_IRQ_CLOCK_Handler+0x42>
    4066:	2001      	movs	r0, #1
    4068:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    406c:	7920      	ldrb	r0, [r4, #4]
    406e:	b120      	cbz	r0, 407a <MPSL_IRQ_CLOCK_Handler+0x42>
    4070:	7126      	strb	r6, [r4, #4]
    4072:	69e0      	ldr	r0, [r4, #28]
    4074:	b108      	cbz	r0, 407a <MPSL_IRQ_CLOCK_Handler+0x42>
    4076:	4780      	blx	r0
    4078:	61e6      	str	r6, [r4, #28]
    407a:	b137      	cbz	r7, 408a <MPSL_IRQ_CLOCK_Handler+0x52>
    407c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    4080:	2002      	movs	r0, #2
    4082:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4086:	f000 fa8b 	bl	45a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    408a:	4640      	mov	r0, r8
    408c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4090:	f000 b85a 	b.w	4148 <MPSL_IRQ_CLOCK_Handler+0x110>
    4094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4098:	2000002c 	.word	0x2000002c
    409c:	b510      	push	{r4, lr}
    409e:	f008 fbe4 	bl	c86a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    40a2:	b930      	cbnz	r0, 40b2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    40a4:	f008 fc02 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    40a8:	b918      	cbnz	r0, 40b2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    40aa:	f008 fc35 	bl	c918 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    40ae:	2800      	cmp	r0, #0
    40b0:	d002      	beq.n	40b8 <MPSL_IRQ_CLOCK_Handler+0x80>
    40b2:	4902      	ldr	r1, [pc, #8]	; (40bc <MPSL_IRQ_CLOCK_Handler+0x84>)
    40b4:	2002      	movs	r0, #2
    40b6:	6008      	str	r0, [r1, #0]
    40b8:	bd10      	pop	{r4, pc}
    40ba:	0000      	.short	0x0000
    40bc:	40000c34 	.word	0x40000c34
    40c0:	b570      	push	{r4, r5, r6, lr}
    40c2:	f000 f987 	bl	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    40c6:	f000 fabf 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    40ca:	4c09      	ldr	r4, [pc, #36]	; (40f0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    40cc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    40d0:	b130      	cbz	r0, 40e0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    40d2:	f7ff ffe3 	bl	409c <MPSL_IRQ_CLOCK_Handler+0x64>
    40d6:	2001      	movs	r0, #1
    40d8:	6128      	str	r0, [r5, #16]
    40da:	2004      	movs	r0, #4
    40dc:	72a0      	strb	r0, [r4, #10]
    40de:	e004      	b.n	40ea <MPSL_IRQ_CLOCK_Handler+0xb2>
    40e0:	2003      	movs	r0, #3
    40e2:	72a0      	strb	r0, [r4, #10]
    40e4:	2001      	movs	r0, #1
    40e6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    40ea:	2000      	movs	r0, #0
    40ec:	71e0      	strb	r0, [r4, #7]
    40ee:	bd70      	pop	{r4, r5, r6, pc}
    40f0:	2000002c 	.word	0x2000002c
    40f4:	b570      	push	{r4, r5, r6, lr}
    40f6:	4c13      	ldr	r4, [pc, #76]	; (4144 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    40f8:	79a0      	ldrb	r0, [r4, #6]
    40fa:	b1f0      	cbz	r0, 413a <MPSL_IRQ_CLOCK_Handler+0x102>
    40fc:	2801      	cmp	r0, #1
    40fe:	d003      	beq.n	4108 <MPSL_IRQ_CLOCK_Handler+0xd0>
    4100:	79e1      	ldrb	r1, [r4, #7]
    4102:	1e40      	subs	r0, r0, #1
    4104:	4281      	cmp	r1, r0
    4106:	da18      	bge.n	413a <MPSL_IRQ_CLOCK_Handler+0x102>
    4108:	f000 fa9e 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    410c:	4605      	mov	r5, r0
    410e:	f000 fb83 	bl	4818 <mpsl_temperature_get>
    4112:	79a1      	ldrb	r1, [r4, #6]
    4114:	2901      	cmp	r1, #1
    4116:	d902      	bls.n	411e <MPSL_IRQ_CLOCK_Handler+0xe6>
    4118:	79e1      	ldrb	r1, [r4, #7]
    411a:	1c49      	adds	r1, r1, #1
    411c:	71e1      	strb	r1, [r4, #7]
    411e:	b10d      	cbz	r5, 4124 <MPSL_IRQ_CLOCK_Handler+0xec>
    4120:	6961      	ldr	r1, [r4, #20]
    4122:	e000      	b.n	4126 <MPSL_IRQ_CLOCK_Handler+0xee>
    4124:	6921      	ldr	r1, [r4, #16]
    4126:	1a41      	subs	r1, r0, r1
    4128:	2902      	cmp	r1, #2
    412a:	da02      	bge.n	4132 <MPSL_IRQ_CLOCK_Handler+0xfa>
    412c:	f111 0f02 	cmn.w	r1, #2
    4130:	dc07      	bgt.n	4142 <MPSL_IRQ_CLOCK_Handler+0x10a>
    4132:	b10d      	cbz	r5, 4138 <MPSL_IRQ_CLOCK_Handler+0x100>
    4134:	6160      	str	r0, [r4, #20]
    4136:	e000      	b.n	413a <MPSL_IRQ_CLOCK_Handler+0x102>
    4138:	6120      	str	r0, [r4, #16]
    413a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    413e:	f7ff bfbf 	b.w	40c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    4142:	bd70      	pop	{r4, r5, r6, pc}
    4144:	2000002c 	.word	0x2000002c
    4148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    414c:	4606      	mov	r6, r0
    414e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4152:	f44f 7186 	mov.w	r1, #268	; 0x10c
    4156:	4628      	mov	r0, r5
    4158:	f008 fadd 	bl	c716 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    415c:	4680      	mov	r8, r0
    415e:	f44f 7188 	mov.w	r1, #272	; 0x110
    4162:	4628      	mov	r0, r5
    4164:	f008 fad7 	bl	c716 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4168:	4c27      	ldr	r4, [pc, #156]	; (4208 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    416a:	4682      	mov	sl, r0
    416c:	7827      	ldrb	r7, [r4, #0]
    416e:	f104 0008 	add.w	r0, r4, #8
    4172:	f008 fb44 	bl	c7fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4176:	b110      	cbz	r0, 417e <MPSL_IRQ_CLOCK_Handler+0x146>
    4178:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    417c:	e016      	b.n	41ac <MPSL_IRQ_CLOCK_Handler+0x174>
    417e:	f04f 0901 	mov.w	r9, #1
    4182:	b146      	cbz	r6, 4196 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4184:	7aa0      	ldrb	r0, [r4, #10]
    4186:	2803      	cmp	r0, #3
    4188:	d105      	bne.n	4196 <MPSL_IRQ_CLOCK_Handler+0x15e>
    418a:	2004      	movs	r0, #4
    418c:	72a0      	strb	r0, [r4, #10]
    418e:	f7ff ff85 	bl	409c <MPSL_IRQ_CLOCK_Handler+0x64>
    4192:	f8c5 9010 	str.w	r9, [r5, #16]
    4196:	2600      	movs	r6, #0
    4198:	f1b8 0f00 	cmp.w	r8, #0
    419c:	d018      	beq.n	41d0 <MPSL_IRQ_CLOCK_Handler+0x198>
    419e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    41a2:	7aa0      	ldrb	r0, [r4, #10]
    41a4:	2804      	cmp	r0, #4
    41a6:	d004      	beq.n	41b2 <MPSL_IRQ_CLOCK_Handler+0x17a>
    41a8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    41ac:	206d      	movs	r0, #109	; 0x6d
    41ae:	f000 fac3 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41b2:	f008 fb5a 	bl	c86a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    41b6:	b928      	cbnz	r0, 41c4 <MPSL_IRQ_CLOCK_Handler+0x18c>
    41b8:	f008 fb78 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    41bc:	b910      	cbnz	r0, 41c4 <MPSL_IRQ_CLOCK_Handler+0x18c>
    41be:	f008 fbab 	bl	c918 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    41c2:	b108      	cbz	r0, 41c8 <MPSL_IRQ_CLOCK_Handler+0x190>
    41c4:	4811      	ldr	r0, [pc, #68]	; (420c <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    41c6:	6006      	str	r6, [r0, #0]
    41c8:	2002      	movs	r0, #2
    41ca:	72a0      	strb	r0, [r4, #10]
    41cc:	f000 f8e6 	bl	439c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    41d0:	f1ba 0f00 	cmp.w	sl, #0
    41d4:	d008      	beq.n	41e8 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    41d6:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    41da:	7aa0      	ldrb	r0, [r4, #10]
    41dc:	2802      	cmp	r0, #2
    41de:	d101      	bne.n	41e4 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    41e0:	f7ff ff88 	bl	40f4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    41e4:	f8c5 9014 	str.w	r9, [r5, #20]
    41e8:	b13f      	cbz	r7, 41fa <MPSL_IRQ_CLOCK_Handler+0x1c2>
    41ea:	7026      	strb	r6, [r4, #0]
    41ec:	7aa0      	ldrb	r0, [r4, #10]
    41ee:	2802      	cmp	r0, #2
    41f0:	d101      	bne.n	41f6 <MPSL_IRQ_CLOCK_Handler+0x1be>
    41f2:	f7ff ff65 	bl	40c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    41f6:	f000 f8d1 	bl	439c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    41fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41fe:	4802      	ldr	r0, [pc, #8]	; (4208 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4200:	3008      	adds	r0, #8
    4202:	f008 bb13 	b.w	c82c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4206:	0000      	.short	0x0000
    4208:	2000002c 	.word	0x2000002c
    420c:	40000c34 	.word	0x40000c34
    4210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4214:	4c5c      	ldr	r4, [pc, #368]	; (4388 <MPSL_IRQ_CLOCK_Handler+0x350>)
    4216:	f04f 0800 	mov.w	r8, #0
    421a:	4606      	mov	r6, r0
    421c:	f8c4 8018 	str.w	r8, [r4, #24]
    4220:	7843      	ldrb	r3, [r0, #1]
    4222:	7882      	ldrb	r2, [r0, #2]
    4224:	7800      	ldrb	r0, [r0, #0]
    4226:	72e0      	strb	r0, [r4, #11]
    4228:	7163      	strb	r3, [r4, #5]
    422a:	2701      	movs	r7, #1
    422c:	71a2      	strb	r2, [r4, #6]
    422e:	07bd      	lsls	r5, r7, #30
    4230:	f884 8007 	strb.w	r8, [r4, #7]
    4234:	2805      	cmp	r0, #5
    4236:	d224      	bcs.n	4282 <MPSL_IRQ_CLOCK_Handler+0x24a>
    4238:	e8df f000 	tbb	[pc, r0]
    423c:	1f05030f 	.word	0x1f05030f
    4240:	0021      	.short	0x0021
    4242:	61a7      	str	r7, [r4, #24]
    4244:	e009      	b.n	425a <MPSL_IRQ_CLOCK_Handler+0x222>
    4246:	f000 f8c5 	bl	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    424a:	2101      	movs	r1, #1
    424c:	4628      	mov	r0, r5
    424e:	f008 fa67 	bl	c720 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4252:	2800      	cmp	r0, #0
    4254:	d0f9      	beq.n	424a <MPSL_IRQ_CLOCK_Handler+0x212>
    4256:	2002      	movs	r0, #2
    4258:	61a0      	str	r0, [r4, #24]
    425a:	f008 fa8d 	bl	c778 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    425e:	b1b0      	cbz	r0, 428e <MPSL_IRQ_CLOCK_Handler+0x256>
    4260:	f000 fa0c 	bl	467c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4264:	7e21      	ldrb	r1, [r4, #24]
    4266:	f001 0103 	and.w	r1, r1, #3
    426a:	4288      	cmp	r0, r1
    426c:	d10f      	bne.n	428e <MPSL_IRQ_CLOCK_Handler+0x256>
    426e:	79b0      	ldrb	r0, [r6, #6]
    4270:	b150      	cbz	r0, 4288 <MPSL_IRQ_CLOCK_Handler+0x250>
    4272:	2002      	movs	r0, #2
    4274:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4278:	e06a      	b.n	4350 <MPSL_IRQ_CLOCK_Handler+0x318>
    427a:	4844      	ldr	r0, [pc, #272]	; (438c <MPSL_IRQ_CLOCK_Handler+0x354>)
    427c:	e7ec      	b.n	4258 <MPSL_IRQ_CLOCK_Handler+0x220>
    427e:	4844      	ldr	r0, [pc, #272]	; (4390 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4280:	e7ea      	b.n	4258 <MPSL_IRQ_CLOCK_Handler+0x220>
    4282:	f240 312d 	movw	r1, #813	; 0x32d
    4286:	e049      	b.n	431c <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4288:	f000 f9cc 	bl	4624 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    428c:	e060      	b.n	4350 <MPSL_IRQ_CLOCK_Handler+0x318>
    428e:	60ef      	str	r7, [r5, #12]
    4290:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4294:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4298:	69a0      	ldr	r0, [r4, #24]
    429a:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    429e:	f008 fad0 	bl	c842 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    42a2:	b940      	cbnz	r0, 42b6 <MPSL_IRQ_CLOCK_Handler+0x27e>
    42a4:	f008 fad7 	bl	c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    42a8:	b928      	cbnz	r0, 42b6 <MPSL_IRQ_CLOCK_Handler+0x27e>
    42aa:	f008 faeb 	bl	c884 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    42ae:	b910      	cbnz	r0, 42b6 <MPSL_IRQ_CLOCK_Handler+0x27e>
    42b0:	f008 fafc 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    42b4:	b138      	cbz	r0, 42c6 <MPSL_IRQ_CLOCK_Handler+0x28e>
    42b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    42ba:	4836      	ldr	r0, [pc, #216]	; (4394 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    42bc:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    42c0:	f3c1 3142 	ubfx	r1, r1, #13, #3
    42c4:	6001      	str	r1, [r0, #0]
    42c6:	f008 fabc 	bl	c842 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    42ca:	b940      	cbnz	r0, 42de <MPSL_IRQ_CLOCK_Handler+0x2a6>
    42cc:	f008 fac3 	bl	c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    42d0:	b928      	cbnz	r0, 42de <MPSL_IRQ_CLOCK_Handler+0x2a6>
    42d2:	f008 fad7 	bl	c884 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    42d6:	b910      	cbnz	r0, 42de <MPSL_IRQ_CLOCK_Handler+0x2a6>
    42d8:	f008 fae8 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    42dc:	b110      	cbz	r0, 42e4 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    42de:	482d      	ldr	r0, [pc, #180]	; (4394 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    42e0:	3010      	adds	r0, #16
    42e2:	6007      	str	r7, [r0, #0]
    42e4:	60af      	str	r7, [r5, #8]
    42e6:	2002      	movs	r0, #2
    42e8:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    42ec:	79b0      	ldrb	r0, [r6, #6]
    42ee:	bb78      	cbnz	r0, 4350 <MPSL_IRQ_CLOCK_Handler+0x318>
    42f0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    42f4:	f010 0f02 	tst.w	r0, #2
    42f8:	d00e      	beq.n	4318 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    42fa:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4398 <MPSL_IRQ_CLOCK_Handler+0x360>
    42fe:	f8d9 1000 	ldr.w	r1, [r9]
    4302:	43c9      	mvns	r1, r1
    4304:	f341 1700 	sbfx	r7, r1, #4, #1
    4308:	f8d9 1000 	ldr.w	r1, [r9]
    430c:	f041 0110 	orr.w	r1, r1, #16
    4310:	f8c9 1000 	str.w	r1, [r9]
    4314:	1c7f      	adds	r7, r7, #1
    4316:	e007      	b.n	4328 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    4318:	f240 21ee 	movw	r1, #750	; 0x2ee
    431c:	206d      	movs	r0, #109	; 0x6d
    431e:	f000 fa0b 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4322:	bf00      	nop
    4324:	f000 fb2e 	bl	4984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4328:	4651      	mov	r1, sl
    432a:	4628      	mov	r0, r5
    432c:	f008 f9f3 	bl	c716 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4330:	2800      	cmp	r0, #0
    4332:	d0f7      	beq.n	4324 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    4334:	f000 f976 	bl	4624 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4338:	b92f      	cbnz	r7, 4346 <MPSL_IRQ_CLOCK_Handler+0x30e>
    433a:	f8d9 1000 	ldr.w	r1, [r9]
    433e:	f021 0110 	bic.w	r1, r1, #16
    4342:	f8c9 1000 	str.w	r1, [r9]
    4346:	2002      	movs	r0, #2
    4348:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    434c:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4350:	79a0      	ldrb	r0, [r4, #6]
    4352:	b170      	cbz	r0, 4372 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4354:	7830      	ldrb	r0, [r6, #0]
    4356:	b960      	cbnz	r0, 4372 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4358:	f000 f976 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    435c:	4606      	mov	r6, r0
    435e:	f000 fa5b 	bl	4818 <mpsl_temperature_get>
    4362:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4366:	b116      	cbz	r6, 436e <MPSL_IRQ_CLOCK_Handler+0x336>
    4368:	e9c4 2004 	strd	r2, r0, [r4, #16]
    436c:	e001      	b.n	4372 <MPSL_IRQ_CLOCK_Handler+0x33a>
    436e:	e9c4 0204 	strd	r0, r2, [r4, #16]
    4372:	2101      	movs	r1, #1
    4374:	4628      	mov	r0, r5
    4376:	f008 f9d3 	bl	c720 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    437a:	b108      	cbz	r0, 4380 <MPSL_IRQ_CLOCK_Handler+0x348>
    437c:	f000 f95e 	bl	463c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4380:	f884 800a 	strb.w	r8, [r4, #10]
    4384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4388:	2000002c 	.word	0x2000002c
    438c:	00020001 	.word	0x00020001
    4390:	00030001 	.word	0x00030001
    4394:	4000053c 	.word	0x4000053c
    4398:	e000ed10 	.word	0xe000ed10

0000439c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    439c:	b510      	push	{r4, lr}
    439e:	f3ef 8410 	mrs	r4, PRIMASK
    43a2:	b672      	cpsid	i
    43a4:	480a      	ldr	r0, [pc, #40]	; (43d0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    43a6:	7841      	ldrb	r1, [r0, #1]
    43a8:	b129      	cbz	r1, 43b6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    43aa:	7841      	ldrb	r1, [r0, #1]
    43ac:	1e49      	subs	r1, r1, #1
    43ae:	7041      	strb	r1, [r0, #1]
    43b0:	7841      	ldrb	r1, [r0, #1]
    43b2:	b129      	cbz	r1, 43c0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    43b4:	e008      	b.n	43c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    43b6:	f240 110d 	movw	r1, #269	; 0x10d
    43ba:	206d      	movs	r0, #109	; 0x6d
    43bc:	f000 f9bc 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43c0:	7880      	ldrb	r0, [r0, #2]
    43c2:	b908      	cbnz	r0, 43c8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    43c4:	f000 f94e 	bl	4664 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    43c8:	2c00      	cmp	r4, #0
    43ca:	d100      	bne.n	43ce <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    43cc:	b662      	cpsie	i
    43ce:	bd10      	pop	{r4, pc}
    43d0:	2000002c 	.word	0x2000002c

000043d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    43d4:	b510      	push	{r4, lr}
    43d6:	f3ef 8410 	mrs	r4, PRIMASK
    43da:	b672      	cpsid	i
    43dc:	4806      	ldr	r0, [pc, #24]	; (43f8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    43de:	7841      	ldrb	r1, [r0, #1]
    43e0:	1c49      	adds	r1, r1, #1
    43e2:	7041      	strb	r1, [r0, #1]
    43e4:	7840      	ldrb	r0, [r0, #1]
    43e6:	2801      	cmp	r0, #1
    43e8:	d101      	bne.n	43ee <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    43ea:	f008 f9b0 	bl	c74e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    43ee:	2c00      	cmp	r4, #0
    43f0:	d100      	bne.n	43f4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    43f2:	b662      	cpsie	i
    43f4:	bd10      	pop	{r4, pc}
    43f6:	0000      	.short	0x0000
    43f8:	2000002c 	.word	0x2000002c

000043fc <mpsl_clock_hfclk_release>:
    43fc:	4805      	ldr	r0, [pc, #20]	; (4414 <mpsl_clock_hfclk_release+0x18>)
    43fe:	b510      	push	{r4, lr}
    4400:	78c1      	ldrb	r1, [r0, #3]
    4402:	b121      	cbz	r1, 440e <mpsl_clock_hfclk_release+0x12>
    4404:	2100      	movs	r1, #0
    4406:	7101      	strb	r1, [r0, #4]
    4408:	70c1      	strb	r1, [r0, #3]
    440a:	f7ff ffc7 	bl	439c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    440e:	2000      	movs	r0, #0
    4410:	bd10      	pop	{r4, pc}
    4412:	0000      	.short	0x0000
    4414:	2000002c 	.word	0x2000002c

00004418 <mpsl_clock_hfclk_request>:
    4418:	b570      	push	{r4, r5, r6, lr}
    441a:	4c0c      	ldr	r4, [pc, #48]	; (444c <mpsl_clock_hfclk_request+0x34>)
    441c:	78e1      	ldrb	r1, [r4, #3]
    441e:	b961      	cbnz	r1, 443a <mpsl_clock_hfclk_request+0x22>
    4420:	2501      	movs	r5, #1
    4422:	70e5      	strb	r5, [r4, #3]
    4424:	61e0      	str	r0, [r4, #28]
    4426:	f7ff ffd5 	bl	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    442a:	f000 f90d 	bl	4648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    442e:	b130      	cbz	r0, 443e <mpsl_clock_hfclk_request+0x26>
    4430:	69e0      	ldr	r0, [r4, #28]
    4432:	b110      	cbz	r0, 443a <mpsl_clock_hfclk_request+0x22>
    4434:	4780      	blx	r0
    4436:	2000      	movs	r0, #0
    4438:	61e0      	str	r0, [r4, #28]
    443a:	2000      	movs	r0, #0
    443c:	bd70      	pop	{r4, r5, r6, pc}
    443e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4442:	7125      	strb	r5, [r4, #4]
    4444:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    4448:	e7f7      	b.n	443a <mpsl_clock_hfclk_request+0x22>
    444a:	0000      	.short	0x0000
    444c:	2000002c 	.word	0x2000002c

00004450 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    4450:	f3ef 8010 	mrs	r0, PRIMASK
    4454:	b672      	cpsid	i
    4456:	4904      	ldr	r1, [pc, #16]	; (4468 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    4458:	788a      	ldrb	r2, [r1, #2]
    445a:	1c52      	adds	r2, r2, #1
    445c:	708a      	strb	r2, [r1, #2]
    445e:	2800      	cmp	r0, #0
    4460:	d100      	bne.n	4464 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    4462:	b662      	cpsie	i
    4464:	4770      	bx	lr
    4466:	0000      	.short	0x0000
    4468:	2000002c 	.word	0x2000002c

0000446c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    446c:	b510      	push	{r4, lr}
    446e:	f3ef 8410 	mrs	r4, PRIMASK
    4472:	b672      	cpsid	i
    4474:	480a      	ldr	r0, [pc, #40]	; (44a0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    4476:	7881      	ldrb	r1, [r0, #2]
    4478:	b129      	cbz	r1, 4486 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    447a:	7881      	ldrb	r1, [r0, #2]
    447c:	1e49      	subs	r1, r1, #1
    447e:	7081      	strb	r1, [r0, #2]
    4480:	7841      	ldrb	r1, [r0, #1]
    4482:	b129      	cbz	r1, 4490 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4484:	e008      	b.n	4498 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4486:	f240 1125 	movw	r1, #293	; 0x125
    448a:	206d      	movs	r0, #109	; 0x6d
    448c:	f000 f954 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4490:	7880      	ldrb	r0, [r0, #2]
    4492:	b908      	cbnz	r0, 4498 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4494:	f000 f8e6 	bl	4664 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4498:	2c00      	cmp	r4, #0
    449a:	d100      	bne.n	449e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    449c:	b662      	cpsie	i
    449e:	bd10      	pop	{r4, pc}
    44a0:	2000002c 	.word	0x2000002c

000044a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    44a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44a8:	0004      	movs	r4, r0
    44aa:	f06f 0015 	mvn.w	r0, #21
    44ae:	d03c      	beq.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44b0:	7821      	ldrb	r1, [r4, #0]
    44b2:	2904      	cmp	r1, #4
    44b4:	d839      	bhi.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44b6:	2900      	cmp	r1, #0
    44b8:	7861      	ldrb	r1, [r4, #1]
    44ba:	d038      	beq.n	452e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    44bc:	2900      	cmp	r1, #0
    44be:	d134      	bne.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44c0:	78a1      	ldrb	r1, [r4, #2]
    44c2:	2900      	cmp	r1, #0
    44c4:	d131      	bne.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    44c6:	2000      	movs	r0, #0
    44c8:	f008 f8f0 	bl	c6ac <MPSL_IRQ_RADIO_Handler+0x1e>
    44cc:	2000      	movs	r0, #0
    44ce:	f008 f8e0 	bl	c692 <MPSL_IRQ_RADIO_Handler+0x4>
    44d2:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    44d6:	f04f 31ff 	mov.w	r1, #4294967295
    44da:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    44de:	2600      	movs	r6, #0
    44e0:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    44e4:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    44e8:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    44ec:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    44f0:	4f14      	ldr	r7, [pc, #80]	; (4544 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    44f2:	707e      	strb	r6, [r7, #1]
    44f4:	88a0      	ldrh	r0, [r4, #4]
    44f6:	81b8      	strh	r0, [r7, #12]
    44f8:	f008 f920 	bl	c73c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    44fc:	2501      	movs	r5, #1
    44fe:	b108      	cbz	r0, 4504 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4500:	70fd      	strb	r5, [r7, #3]
    4502:	707d      	strb	r5, [r7, #1]
    4504:	2101      	movs	r1, #1
    4506:	4640      	mov	r0, r8
    4508:	f008 f90a 	bl	c720 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    450c:	b108      	cbz	r0, 4512 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    450e:	f000 f895 	bl	463c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4512:	4620      	mov	r0, r4
    4514:	f7ff fe7c 	bl	4210 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    4518:	727d      	strb	r5, [r7, #9]
    451a:	2000      	movs	r0, #0
    451c:	f008 f8b9 	bl	c692 <MPSL_IRQ_RADIO_Handler+0x4>
    4520:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4524:	4630      	mov	r0, r6
    4526:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    452e:	2900      	cmp	r1, #0
    4530:	d0fb      	beq.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4532:	2920      	cmp	r1, #32
    4534:	d8f9      	bhi.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4536:	78a1      	ldrb	r1, [r4, #2]
    4538:	2921      	cmp	r1, #33	; 0x21
    453a:	d8f6      	bhi.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    453c:	2901      	cmp	r1, #1
    453e:	d1c2      	bne.n	44c6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4540:	e7f3      	b.n	452a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4542:	0000      	.short	0x0000
    4544:	2000002c 	.word	0x2000002c

00004548 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    4548:	4801      	ldr	r0, [pc, #4]	; (4550 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    454a:	8980      	ldrh	r0, [r0, #12]
    454c:	4770      	bx	lr
    454e:	0000      	.short	0x0000
    4550:	2000002c 	.word	0x2000002c

00004554 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    4554:	b510      	push	{r4, lr}
    4556:	480d      	ldr	r0, [pc, #52]	; (458c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4558:	f008 f951 	bl	c7fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    455c:	490b      	ldr	r1, [pc, #44]	; (458c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    455e:	3908      	subs	r1, #8
    4560:	b148      	cbz	r0, 4576 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    4562:	2001      	movs	r0, #1
    4564:	7008      	strb	r0, [r1, #0]
    4566:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    456a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    456e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4572:	f7ff bf2f 	b.w	43d4 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4576:	7a88      	ldrb	r0, [r1, #10]
    4578:	2802      	cmp	r0, #2
    457a:	d101      	bne.n	4580 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    457c:	f7ff fda0 	bl	40c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    4580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4584:	4801      	ldr	r0, [pc, #4]	; (458c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    4586:	f008 b951 	b.w	c82c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    458a:	0000      	.short	0x0000
    458c:	20000034 	.word	0x20000034

00004590 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4590:	4802      	ldr	r0, [pc, #8]	; (459c <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    4592:	7a80      	ldrb	r0, [r0, #10]
    4594:	2800      	cmp	r0, #0
    4596:	d000      	beq.n	459a <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4598:	2001      	movs	r0, #1
    459a:	4770      	bx	lr
    459c:	2000002c 	.word	0x2000002c

000045a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    45a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45a2:	4d1f      	ldr	r5, [pc, #124]	; (4620 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    45a4:	7ae8      	ldrb	r0, [r5, #11]
    45a6:	2800      	cmp	r0, #0
    45a8:	d10f      	bne.n	45ca <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45aa:	7e28      	ldrb	r0, [r5, #24]
    45ac:	f000 0003 	and.w	r0, r0, #3
    45b0:	f008 f8d2 	bl	c758 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    45b4:	2800      	cmp	r0, #0
    45b6:	d008      	beq.n	45ca <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45b8:	f3ef 8110 	mrs	r1, PRIMASK
    45bc:	b672      	cpsid	i
    45be:	f7ff ffe7 	bl	4590 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    45c2:	b118      	cbz	r0, 45cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    45c4:	2900      	cmp	r1, #0
    45c6:	d100      	bne.n	45ca <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45c8:	b662      	cpsie	i
    45ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45cc:	2601      	movs	r6, #1
    45ce:	72ae      	strb	r6, [r5, #10]
    45d0:	b901      	cbnz	r1, 45d4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    45d2:	b662      	cpsie	i
    45d4:	2018      	movs	r0, #24
    45d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    45da:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    45de:	61a6      	str	r6, [r4, #24]
    45e0:	f44f 7020 	mov.w	r0, #640	; 0x280
    45e4:	f8ad 0000 	strh.w	r0, [sp]
    45e8:	f8bd 0000 	ldrh.w	r0, [sp]
    45ec:	1e41      	subs	r1, r0, #1
    45ee:	f8ad 1000 	strh.w	r1, [sp]
    45f2:	d2f9      	bcs.n	45e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    45f4:	2700      	movs	r7, #0
    45f6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    45fa:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    45fe:	4808      	ldr	r0, [pc, #32]	; (4620 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4600:	3008      	adds	r0, #8
    4602:	f008 f90f 	bl	c824 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4606:	702f      	strb	r7, [r5, #0]
    4608:	f7ff fd5a 	bl	40c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    460c:	6166      	str	r6, [r4, #20]
    460e:	7968      	ldrb	r0, [r5, #5]
    4610:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4614:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4618:	2018      	movs	r0, #24
    461a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    461e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4620:	2000002c 	.word	0x2000002c

00004624 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4624:	b510      	push	{r4, lr}
    4626:	4c04      	ldr	r4, [pc, #16]	; (4638 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4628:	7e20      	ldrb	r0, [r4, #24]
    462a:	f000 0003 	and.w	r0, r0, #3
    462e:	f008 f893 	bl	c758 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4632:	2800      	cmp	r0, #0
    4634:	d0f8      	beq.n	4628 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4636:	bd10      	pop	{r4, pc}
    4638:	2000002c 	.word	0x2000002c

0000463c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    463c:	4901      	ldr	r1, [pc, #4]	; (4644 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    463e:	2001      	movs	r0, #1
    4640:	7008      	strb	r0, [r1, #0]
    4642:	4770      	bx	lr
    4644:	20000290 	.word	0x20000290

00004648 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4648:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    464c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4650:	b918      	cbnz	r0, 465a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    4652:	4803      	ldr	r0, [pc, #12]	; (4660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    4654:	7800      	ldrb	r0, [r0, #0]
    4656:	2800      	cmp	r0, #0
    4658:	d000      	beq.n	465c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    465a:	2001      	movs	r0, #1
    465c:	4770      	bx	lr
    465e:	0000      	.short	0x0000
    4660:	20000290 	.word	0x20000290

00004664 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    4664:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4668:	2101      	movs	r1, #1
    466a:	6041      	str	r1, [r0, #4]
    466c:	2100      	movs	r1, #0
    466e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    4672:	4801      	ldr	r0, [pc, #4]	; (4678 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    4674:	7001      	strb	r1, [r0, #0]
    4676:	4770      	bx	lr
    4678:	20000290 	.word	0x20000290

0000467c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    467c:	4802      	ldr	r0, [pc, #8]	; (4688 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    467e:	6800      	ldr	r0, [r0, #0]
    4680:	f000 0003 	and.w	r0, r0, #3
    4684:	4770      	bx	lr
    4686:	0000      	.short	0x0000
    4688:	4000041c 	.word	0x4000041c
    468c:	b510      	push	{r4, lr}
    468e:	b131      	cbz	r1, 469e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4690:	2901      	cmp	r1, #1
    4692:	d007      	beq.n	46a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    4694:	f240 3102 	movw	r1, #770	; 0x302
    4698:	a005      	add	r0, pc, #20	; (adr r0, 46b0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    469a:	f000 f821 	bl	46e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    469e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    46a2:	e001      	b.n	46a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    46a4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    46a8:	f000 0001 	and.w	r0, r0, #1
    46ac:	bd10      	pop	{r4, pc}
    46ae:	0000      	.short	0x0000
    46b0:	5f66726e 	.word	0x5f66726e
    46b4:	636f6c63 	.word	0x636f6c63
    46b8:	00682e6b 	.word	0x00682e6b
    46bc:	f3bf 8f4f 	dsb	sy
    46c0:	4805      	ldr	r0, [pc, #20]	; (46d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    46c2:	6801      	ldr	r1, [r0, #0]
    46c4:	4a05      	ldr	r2, [pc, #20]	; (46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    46c6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    46ca:	4311      	orrs	r1, r2
    46cc:	6001      	str	r1, [r0, #0]
    46ce:	f3bf 8f4f 	dsb	sy
    46d2:	bf00      	nop
    46d4:	e7fd      	b.n	46d2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    46d6:	0000      	.short	0x0000
    46d8:	e000ed0c 	.word	0xe000ed0c
    46dc:	05fa0004 	.word	0x05fa0004

000046e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    46e0:	b672      	cpsid	i
    46e2:	4a03      	ldr	r2, [pc, #12]	; (46f0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    46e4:	6852      	ldr	r2, [r2, #4]
    46e6:	b102      	cbz	r2, 46ea <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    46e8:	4790      	blx	r2
    46ea:	f7ff ffe7 	bl	46bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    46ee:	0000      	.short	0x0000
    46f0:	2000004c 	.word	0x2000004c
    46f4:	4806      	ldr	r0, [pc, #24]	; (4710 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    46f6:	b510      	push	{r4, lr}
    46f8:	2100      	movs	r1, #0
    46fa:	6001      	str	r1, [r0, #0]
    46fc:	2101      	movs	r1, #1
    46fe:	6001      	str	r1, [r0, #0]
    4700:	4608      	mov	r0, r1
    4702:	f008 f850 	bl	c7a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    470a:	2001      	movs	r0, #1
    470c:	f008 b83e 	b.w	c78c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4710:	40001ffc 	.word	0x40001ffc
    4714:	4807      	ldr	r0, [pc, #28]	; (4734 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    4716:	b510      	push	{r4, lr}
    4718:	2101      	movs	r1, #1
    471a:	6041      	str	r1, [r0, #4]
    471c:	1e89      	subs	r1, r1, #2
    471e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4722:	200c      	movs	r0, #12
    4724:	f008 f83f 	bl	c7a6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    472c:	200c      	movs	r0, #12
    472e:	f008 b82d 	b.w	c78c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4732:	0000      	.short	0x0000
    4734:	4000c000 	.word	0x4000c000

00004738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4738:	b50e      	push	{r1, r2, r3, lr}
    473a:	b672      	cpsid	i
    473c:	4a0f      	ldr	r2, [pc, #60]	; (477c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    473e:	6855      	ldr	r5, [r2, #4]
    4740:	b1d5      	cbz	r5, 4778 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    4742:	2200      	movs	r2, #0
    4744:	4603      	mov	r3, r0
    4746:	466e      	mov	r6, sp
    4748:	240a      	movs	r4, #10
    474a:	e003      	b.n	4754 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    474c:	fbb0 f0f4 	udiv	r0, r0, r4
    4750:	1c52      	adds	r2, r2, #1
    4752:	b2d2      	uxtb	r2, r2
    4754:	2800      	cmp	r0, #0
    4756:	d1f9      	bne.n	474c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4758:	54b0      	strb	r0, [r6, r2]
    475a:	e009      	b.n	4770 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    475c:	fbb3 f0f4 	udiv	r0, r3, r4
    4760:	fb04 3010 	mls	r0, r4, r0, r3
    4764:	fbb3 f3f4 	udiv	r3, r3, r4
    4768:	1e52      	subs	r2, r2, #1
    476a:	b2d2      	uxtb	r2, r2
    476c:	3030      	adds	r0, #48	; 0x30
    476e:	54b0      	strb	r0, [r6, r2]
    4770:	2a00      	cmp	r2, #0
    4772:	d1f3      	bne.n	475c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    4774:	4630      	mov	r0, r6
    4776:	47a8      	blx	r5
    4778:	f7ff ffa0 	bl	46bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    477c:	2000004c 	.word	0x2000004c

00004780 <mpsl_init>:
    4780:	b570      	push	{r4, r5, r6, lr}
    4782:	4c17      	ldr	r4, [pc, #92]	; (47e0 <mpsl_init+0x60>)
    4784:	4606      	mov	r6, r0
    4786:	460d      	mov	r5, r1
    4788:	7860      	ldrb	r0, [r4, #1]
    478a:	b110      	cbz	r0, 4792 <mpsl_init+0x12>
    478c:	f04f 30ff 	mov.w	r0, #4294967295
    4790:	bd70      	pop	{r4, r5, r6, pc}
    4792:	b906      	cbnz	r6, 4796 <mpsl_init+0x16>
    4794:	4e13      	ldr	r6, [pc, #76]	; (47e4 <mpsl_init+0x64>)
    4796:	6062      	str	r2, [r4, #4]
    4798:	7025      	strb	r5, [r4, #0]
    479a:	f7ff ffab 	bl	46f4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    479e:	f7ff ffb9 	bl	4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    47a2:	4630      	mov	r0, r6
    47a4:	f7ff fe7e 	bl	44a4 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    47a8:	0006      	movs	r6, r0
    47aa:	d1f1      	bne.n	4790 <mpsl_init+0x10>
    47ac:	f7fe fed8 	bl	3560 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    47b0:	f7ff fef6 	bl	45a0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    47b4:	f007 ff44 	bl	c640 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    47b8:	4628      	mov	r0, r5
    47ba:	f007 ffe7 	bl	c78c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    47be:	2001      	movs	r0, #1
    47c0:	2d00      	cmp	r5, #0
    47c2:	db09      	blt.n	47d8 <mpsl_init+0x58>
    47c4:	f005 011f 	and.w	r1, r5, #31
    47c8:	fa00 f101 	lsl.w	r1, r0, r1
    47cc:	096a      	lsrs	r2, r5, #5
    47ce:	0092      	lsls	r2, r2, #2
    47d0:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47d4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    47d8:	7060      	strb	r0, [r4, #1]
    47da:	4630      	mov	r0, r6
    47dc:	bd70      	pop	{r4, r5, r6, pc}
    47de:	0000      	.short	0x0000
    47e0:	2000004c 	.word	0x2000004c
    47e4:	0000c7c8 	.word	0x0000c7c8

000047e8 <mpsl_is_initialized>:
    47e8:	4801      	ldr	r0, [pc, #4]	; (47f0 <mpsl_is_initialized+0x8>)
    47ea:	7840      	ldrb	r0, [r0, #1]
    47ec:	4770      	bx	lr
    47ee:	0000      	.short	0x0000
    47f0:	2000004c 	.word	0x2000004c

000047f4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    47f4:	4807      	ldr	r0, [pc, #28]	; (4814 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    47f6:	f990 0000 	ldrsb.w	r0, [r0]
    47fa:	2800      	cmp	r0, #0
    47fc:	db09      	blt.n	4812 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    47fe:	f000 021f 	and.w	r2, r0, #31
    4802:	2101      	movs	r1, #1
    4804:	4091      	lsls	r1, r2
    4806:	0940      	lsrs	r0, r0, #5
    4808:	0080      	lsls	r0, r0, #2
    480a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    480e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4812:	4770      	bx	lr
    4814:	2000004c 	.word	0x2000004c

00004818 <mpsl_temperature_get>:
    4818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    481c:	2601      	movs	r6, #1
    481e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4822:	0331      	lsls	r1, r6, #12
    4824:	f04f 0800 	mov.w	r8, #0
    4828:	4640      	mov	r0, r8
    482a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    482e:	f3bf 8f4f 	dsb	sy
    4832:	f3bf 8f6f 	isb	sy
    4836:	4c16      	ldr	r4, [pc, #88]	; (4890 <mpsl_temperature_get+0x78>)
    4838:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    483c:	200c      	movs	r0, #12
    483e:	f007 ffd1 	bl	c7e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4842:	4d14      	ldr	r5, [pc, #80]	; (4894 <mpsl_temperature_get+0x7c>)
    4844:	6828      	ldr	r0, [r5, #0]
    4846:	43c0      	mvns	r0, r0
    4848:	f340 1700 	sbfx	r7, r0, #4, #1
    484c:	6828      	ldr	r0, [r5, #0]
    484e:	f040 0010 	orr.w	r0, r0, #16
    4852:	6028      	str	r0, [r5, #0]
    4854:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4858:	6026      	str	r6, [r4, #0]
    485a:	1c7f      	adds	r7, r7, #1
    485c:	e002      	b.n	4864 <mpsl_temperature_get+0x4c>
    485e:	bf00      	nop
    4860:	f000 f890 	bl	4984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4864:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4868:	2800      	cmp	r0, #0
    486a:	d0f9      	beq.n	4860 <mpsl_temperature_get+0x48>
    486c:	b91f      	cbnz	r7, 4876 <mpsl_temperature_get+0x5e>
    486e:	6828      	ldr	r0, [r5, #0]
    4870:	f020 0010 	bic.w	r0, r0, #16
    4874:	6028      	str	r0, [r5, #0]
    4876:	4808      	ldr	r0, [pc, #32]	; (4898 <mpsl_temperature_get+0x80>)
    4878:	6805      	ldr	r5, [r0, #0]
    487a:	6066      	str	r6, [r4, #4]
    487c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4880:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4884:	200c      	movs	r0, #12
    4886:	f007 ffad 	bl	c7e4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    488a:	4628      	mov	r0, r5
    488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4890:	4000c000 	.word	0x4000c000
    4894:	e000ed10 	.word	0xe000ed10
    4898:	4000c508 	.word	0x4000c508

0000489c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    489c:	b510      	push	{r4, lr}
    489e:	4602      	mov	r2, r0
    48a0:	2005      	movs	r0, #5
    48a2:	490c      	ldr	r1, [pc, #48]	; (48d4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    48a4:	e004      	b.n	48b0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    48a6:	bf00      	nop
    48a8:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    48ac:	791b      	ldrb	r3, [r3, #4]
    48ae:	b133      	cbz	r3, 48be <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    48b0:	1e40      	subs	r0, r0, #1
    48b2:	b2c0      	uxtb	r0, r0
    48b4:	d2f8      	bcs.n	48a8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    48b6:	2148      	movs	r1, #72	; 0x48
    48b8:	2069      	movs	r0, #105	; 0x69
    48ba:	f7ff ff3d 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48be:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    48c2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    48c6:	2200      	movs	r2, #0
    48c8:	714a      	strb	r2, [r1, #5]
    48ca:	718a      	strb	r2, [r1, #6]
    48cc:	2201      	movs	r2, #1
    48ce:	710a      	strb	r2, [r1, #4]
    48d0:	bd10      	pop	{r4, pc}
    48d2:	0000      	.short	0x0000
    48d4:	20000ee8 	.word	0x20000ee8

000048d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    48d8:	b510      	push	{r4, lr}
    48da:	2805      	cmp	r0, #5
    48dc:	d301      	bcc.n	48e2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    48de:	2158      	movs	r1, #88	; 0x58
    48e0:	e006      	b.n	48f0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    48e2:	490a      	ldr	r1, [pc, #40]	; (490c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    48e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    48e8:	7901      	ldrb	r1, [r0, #4]
    48ea:	2901      	cmp	r1, #1
    48ec:	d003      	beq.n	48f6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    48ee:	2159      	movs	r1, #89	; 0x59
    48f0:	2069      	movs	r0, #105	; 0x69
    48f2:	f7ff ff21 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48f6:	7941      	ldrb	r1, [r0, #5]
    48f8:	7982      	ldrb	r2, [r0, #6]
    48fa:	1c49      	adds	r1, r1, #1
    48fc:	b2c9      	uxtb	r1, r1
    48fe:	428a      	cmp	r2, r1
    4900:	d000      	beq.n	4904 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4902:	7141      	strb	r1, [r0, #5]
    4904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4908:	f7ff bf74 	b.w	47f4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    490c:	20000ee8 	.word	0x20000ee8

00004910 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4910:	b570      	push	{r4, r5, r6, lr}
    4912:	2505      	movs	r5, #5
    4914:	4e0e      	ldr	r6, [pc, #56]	; (4950 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4916:	4c0f      	ldr	r4, [pc, #60]	; (4954 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4918:	e016      	b.n	4948 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    491a:	7821      	ldrb	r1, [r4, #0]
    491c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4920:	7902      	ldrb	r2, [r0, #4]
    4922:	2a01      	cmp	r2, #1
    4924:	d108      	bne.n	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4926:	7942      	ldrb	r2, [r0, #5]
    4928:	7983      	ldrb	r3, [r0, #6]
    492a:	429a      	cmp	r2, r3
    492c:	d004      	beq.n	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    492e:	7942      	ldrb	r2, [r0, #5]
    4930:	7182      	strb	r2, [r0, #6]
    4932:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4936:	4780      	blx	r0
    4938:	7820      	ldrb	r0, [r4, #0]
    493a:	1c40      	adds	r0, r0, #1
    493c:	b2c0      	uxtb	r0, r0
    493e:	7020      	strb	r0, [r4, #0]
    4940:	2805      	cmp	r0, #5
    4942:	d301      	bcc.n	4948 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4944:	2000      	movs	r0, #0
    4946:	7020      	strb	r0, [r4, #0]
    4948:	1e6d      	subs	r5, r5, #1
    494a:	b2ed      	uxtb	r5, r5
    494c:	d2e5      	bcs.n	491a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    494e:	bd70      	pop	{r4, r5, r6, pc}
    4950:	20000ee8 	.word	0x20000ee8
    4954:	20000291 	.word	0x20000291

00004958 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4958:	b500      	push	{lr}
    495a:	f007 ff72 	bl	c842 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    495e:	b940      	cbnz	r0, 4972 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4960:	f007 ff79 	bl	c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4964:	b928      	cbnz	r0, 4972 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4966:	f007 ff8d 	bl	c884 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    496a:	b910      	cbnz	r0, 4972 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    496c:	f007 ff9e 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4970:	b108      	cbz	r0, 4976 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4972:	4802      	ldr	r0, [pc, #8]	; (497c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4974:	bd00      	pop	{pc}
    4976:	4802      	ldr	r0, [pc, #8]	; (4980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4978:	bd00      	pop	{pc}
    497a:	0000      	.short	0x0000
    497c:	4000050c 	.word	0x4000050c
    4980:	4001e700 	.word	0x4001e700

00004984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4984:	b510      	push	{r4, lr}
    4986:	f007 ff91 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    498a:	b330      	cbz	r0, 49da <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    498c:	f3ef 8010 	mrs	r0, PRIMASK
    4990:	b1c8      	cbz	r0, 49c6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4992:	2100      	movs	r1, #0
    4994:	b672      	cpsid	i
    4996:	4812      	ldr	r0, [pc, #72]	; (49e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4998:	6802      	ldr	r2, [r0, #0]
    499a:	6803      	ldr	r3, [r0, #0]
    499c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    49a0:	f043 0310 	orr.w	r3, r3, #16
    49a4:	6003      	str	r3, [r0, #0]
    49a6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49aa:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    49ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    49b2:	431c      	orrs	r4, r3
    49b4:	d000      	beq.n	49b8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    49b6:	bf40      	sev
    49b8:	bf20      	wfe
    49ba:	bf00      	nop
    49bc:	bf00      	nop
    49be:	bf00      	nop
    49c0:	bf00      	nop
    49c2:	b112      	cbz	r2, 49ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    49c4:	e005      	b.n	49d2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    49c6:	2101      	movs	r1, #1
    49c8:	e7e4      	b.n	4994 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    49ca:	6802      	ldr	r2, [r0, #0]
    49cc:	f022 0210 	bic.w	r2, r2, #16
    49d0:	6002      	str	r2, [r0, #0]
    49d2:	2900      	cmp	r1, #0
    49d4:	d000      	beq.n	49d8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    49d6:	b662      	cpsie	i
    49d8:	bd10      	pop	{r4, pc}
    49da:	bf20      	wfe
    49dc:	bd10      	pop	{r4, pc}
    49de:	0000      	.short	0x0000
    49e0:	e000ed10 	.word	0xe000ed10

000049e4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    49e4:	0000cb1d 0000cb39 0000cb27 0000cb33     ....9...'...3...
    49f4:	0000cb21 0000cb1b 0000cb19 0000cb3f     !...........?...
    4a04:	0000cb2d 0000cb13 0000cb0b 0000cb0f     -...............
    4a14:	0000cb05                                ....

00004a18 <mpsl_fem_disable>:
    4a18:	4801      	ldr	r0, [pc, #4]	; (4a20 <mpsl_fem_disable+0x8>)
    4a1a:	6800      	ldr	r0, [r0, #0]
    4a1c:	6800      	ldr	r0, [r0, #0]
    4a1e:	4700      	bx	r0
    4a20:	20000054 	.word	0x20000054

00004a24 <mpsl_fem_lna_configuration_clear>:
    4a24:	4801      	ldr	r0, [pc, #4]	; (4a2c <mpsl_fem_lna_configuration_clear+0x8>)
    4a26:	6800      	ldr	r0, [r0, #0]
    4a28:	6900      	ldr	r0, [r0, #16]
    4a2a:	4700      	bx	r0
    4a2c:	20000054 	.word	0x20000054

00004a30 <mpsl_fem_lna_configuration_set>:
    4a30:	4a01      	ldr	r2, [pc, #4]	; (4a38 <mpsl_fem_lna_configuration_set+0x8>)
    4a32:	6812      	ldr	r2, [r2, #0]
    4a34:	6892      	ldr	r2, [r2, #8]
    4a36:	4710      	bx	r2
    4a38:	20000054 	.word	0x20000054

00004a3c <mpsl_fem_pa_configuration_clear>:
    4a3c:	4801      	ldr	r0, [pc, #4]	; (4a44 <mpsl_fem_pa_configuration_clear+0x8>)
    4a3e:	6800      	ldr	r0, [r0, #0]
    4a40:	68c0      	ldr	r0, [r0, #12]
    4a42:	4700      	bx	r0
    4a44:	20000054 	.word	0x20000054

00004a48 <mpsl_fem_pa_configuration_set>:
    4a48:	4a01      	ldr	r2, [pc, #4]	; (4a50 <mpsl_fem_pa_configuration_set+0x8>)
    4a4a:	6812      	ldr	r2, [r2, #0]
    4a4c:	6852      	ldr	r2, [r2, #4]
    4a4e:	4710      	bx	r2
    4a50:	20000054 	.word	0x20000054

00004a54 <mpsl_fem_pa_is_configured>:
    4a54:	4901      	ldr	r1, [pc, #4]	; (4a5c <mpsl_fem_pa_is_configured+0x8>)
    4a56:	6809      	ldr	r1, [r1, #0]
    4a58:	6a09      	ldr	r1, [r1, #32]
    4a5a:	4708      	bx	r1
    4a5c:	20000054 	.word	0x20000054

00004a60 <mpsl_fem_device_config_254_apply_get>:
    4a60:	4801      	ldr	r0, [pc, #4]	; (4a68 <mpsl_fem_device_config_254_apply_get+0x8>)
    4a62:	7800      	ldrb	r0, [r0, #0]
    4a64:	4770      	bx	lr
    4a66:	0000      	.short	0x0000
    4a68:	20000292 	.word	0x20000292
    4a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a6e:	4c17      	ldr	r4, [pc, #92]	; (4acc <mpsl_fem_device_config_254_apply_get+0x6c>)
    4a70:	7a20      	ldrb	r0, [r4, #8]
    4a72:	2802      	cmp	r0, #2
    4a74:	d200      	bcs.n	4a78 <mpsl_fem_device_config_254_apply_get+0x18>
    4a76:	2002      	movs	r0, #2
    4a78:	f88d 0001 	strb.w	r0, [sp, #1]
    4a7c:	79e0      	ldrb	r0, [r4, #7]
    4a7e:	2803      	cmp	r0, #3
    4a80:	d200      	bcs.n	4a84 <mpsl_fem_device_config_254_apply_get+0x24>
    4a82:	2003      	movs	r0, #3
    4a84:	f88d 0000 	strb.w	r0, [sp]
    4a88:	79a0      	ldrb	r0, [r4, #6]
    4a8a:	f8ad 0004 	strh.w	r0, [sp, #4]
    4a8e:	7960      	ldrb	r0, [r4, #5]
    4a90:	f8ad 0002 	strh.w	r0, [sp, #2]
    4a94:	4668      	mov	r0, sp
    4a96:	f006 f95b 	bl	ad50 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4a9a:	b108      	cbz	r0, 4aa0 <mpsl_fem_device_config_254_apply_get+0x40>
    4a9c:	2184      	movs	r1, #132	; 0x84
    4a9e:	e010      	b.n	4ac2 <mpsl_fem_device_config_254_apply_get+0x62>
    4aa0:	68e0      	ldr	r0, [r4, #12]
    4aa2:	9002      	str	r0, [sp, #8]
    4aa4:	a802      	add	r0, sp, #8
    4aa6:	f006 f969 	bl	ad7c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4aaa:	b108      	cbz	r0, 4ab0 <mpsl_fem_device_config_254_apply_get+0x50>
    4aac:	2188      	movs	r1, #136	; 0x88
    4aae:	e008      	b.n	4ac2 <mpsl_fem_device_config_254_apply_get+0x62>
    4ab0:	4807      	ldr	r0, [pc, #28]	; (4ad0 <mpsl_fem_device_config_254_apply_get+0x70>)
    4ab2:	6800      	ldr	r0, [r0, #0]
    4ab4:	9003      	str	r0, [sp, #12]
    4ab6:	a803      	add	r0, sp, #12
    4ab8:	f00b f915 	bl	fce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4abc:	2800      	cmp	r0, #0
    4abe:	d003      	beq.n	4ac8 <mpsl_fem_device_config_254_apply_get+0x68>
    4ac0:	218c      	movs	r1, #140	; 0x8c
    4ac2:	2003      	movs	r0, #3
    4ac4:	f000 f8e4 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ac8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4aca:	0000      	.short	0x0000
    4acc:	20000f10 	.word	0x20000f10
    4ad0:	00004d78 	.word	0x00004d78

00004ad4 <sdc_build_revision_get>:
    4ad4:	b510      	push	{r4, lr}
    4ad6:	b128      	cbz	r0, 4ae4 <sdc_build_revision_get+0x10>
    4ad8:	2214      	movs	r2, #20
    4ada:	4904      	ldr	r1, [pc, #16]	; (4aec <sdc_build_revision_get+0x18>)
    4adc:	f007 ff38 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4ae0:	2000      	movs	r0, #0
    4ae2:	bd10      	pop	{r4, pc}
    4ae4:	f06f 0015 	mvn.w	r0, #21
    4ae8:	bd10      	pop	{r4, pc}
    4aea:	0000      	.short	0x0000
    4aec:	00004d94 	.word	0x00004d94

00004af0 <sdc_cfg_set>:
    4af0:	b570      	push	{r4, r5, r6, lr}
    4af2:	0003      	movs	r3, r0
    4af4:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4af8:	d103      	bne.n	4b02 <sdc_cfg_set+0x12>
    4afa:	4c29      	ldr	r4, [pc, #164]	; (4ba0 <sdc_cfg_set+0xb0>)
    4afc:	7863      	ldrb	r3, [r4, #1]
    4afe:	b10b      	cbz	r3, 4b04 <sdc_cfg_set+0x14>
    4b00:	1180      	asrs	r0, r0, #6
    4b02:	bd70      	pop	{r4, r5, r6, pc}
    4b04:	b309      	cbz	r1, 4b4a <sdc_cfg_set+0x5a>
    4b06:	f06f 0515 	mvn.w	r5, #21
    4b0a:	b37a      	cbz	r2, 4b6c <sdc_cfg_set+0x7c>
    4b0c:	4b25      	ldr	r3, [pc, #148]	; (4ba4 <sdc_cfg_set+0xb4>)
    4b0e:	290c      	cmp	r1, #12
    4b10:	d241      	bcs.n	4b96 <sdc_cfg_set+0xa6>
    4b12:	e8df f001 	tbb	[pc, r1]
    4b16:	0640      	.short	0x0640
    4b18:	13100c09 	.word	0x13100c09
    4b1c:	2616231b 	.word	0x2616231b
    4b20:	312c      	.short	0x312c
    4b22:	7810      	ldrb	r0, [r2, #0]
    4b24:	7018      	strb	r0, [r3, #0]
    4b26:	e02b      	b.n	4b80 <sdc_cfg_set+0x90>
    4b28:	7810      	ldrb	r0, [r2, #0]
    4b2a:	7058      	strb	r0, [r3, #1]
    4b2c:	e028      	b.n	4b80 <sdc_cfg_set+0x90>
    4b2e:	6810      	ldr	r0, [r2, #0]
    4b30:	f8c3 0005 	str.w	r0, [r3, #5]
    4b34:	e024      	b.n	4b80 <sdc_cfg_set+0x90>
    4b36:	6810      	ldr	r0, [r2, #0]
    4b38:	60d8      	str	r0, [r3, #12]
    4b3a:	e021      	b.n	4b80 <sdc_cfg_set+0x90>
    4b3c:	7810      	ldrb	r0, [r2, #0]
    4b3e:	7098      	strb	r0, [r3, #2]
    4b40:	e01e      	b.n	4b80 <sdc_cfg_set+0x90>
    4b42:	7811      	ldrb	r1, [r2, #0]
    4b44:	2900      	cmp	r1, #0
    4b46:	d1dc      	bne.n	4b02 <sdc_cfg_set+0x12>
    4b48:	70d9      	strb	r1, [r3, #3]
    4b4a:	e019      	b.n	4b80 <sdc_cfg_set+0x90>
    4b4c:	78e0      	ldrb	r0, [r4, #3]
    4b4e:	b110      	cbz	r0, 4b56 <sdc_cfg_set+0x66>
    4b50:	7810      	ldrb	r0, [r2, #0]
    4b52:	2802      	cmp	r0, #2
    4b54:	d31f      	bcc.n	4b96 <sdc_cfg_set+0xa6>
    4b56:	7810      	ldrb	r0, [r2, #0]
    4b58:	7418      	strb	r0, [r3, #16]
    4b5a:	e011      	b.n	4b80 <sdc_cfg_set+0x90>
    4b5c:	8810      	ldrh	r0, [r2, #0]
    4b5e:	8258      	strh	r0, [r3, #18]
    4b60:	e00e      	b.n	4b80 <sdc_cfg_set+0x90>
    4b62:	7811      	ldrb	r1, [r2, #0]
    4b64:	2900      	cmp	r1, #0
    4b66:	d1cc      	bne.n	4b02 <sdc_cfg_set+0x12>
    4b68:	7119      	strb	r1, [r3, #4]
    4b6a:	e009      	b.n	4b80 <sdc_cfg_set+0x90>
    4b6c:	e013      	b.n	4b96 <sdc_cfg_set+0xa6>
    4b6e:	7810      	ldrb	r0, [r2, #0]
    4b70:	2802      	cmp	r0, #2
    4b72:	d310      	bcc.n	4b96 <sdc_cfg_set+0xa6>
    4b74:	7518      	strb	r0, [r3, #20]
    4b76:	e003      	b.n	4b80 <sdc_cfg_set+0x90>
    4b78:	7811      	ldrb	r1, [r2, #0]
    4b7a:	2900      	cmp	r1, #0
    4b7c:	d1c1      	bne.n	4b02 <sdc_cfg_set+0x12>
    4b7e:	7559      	strb	r1, [r3, #21]
    4b80:	2201      	movs	r2, #1
    4b82:	4908      	ldr	r1, [pc, #32]	; (4ba4 <sdc_cfg_set+0xb4>)
    4b84:	2000      	movs	r0, #0
    4b86:	f007 ffdc 	bl	cb42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4b8a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4b8e:	db04      	blt.n	4b9a <sdc_cfg_set+0xaa>
    4b90:	f06f 000b 	mvn.w	r0, #11
    4b94:	bd70      	pop	{r4, r5, r6, pc}
    4b96:	4628      	mov	r0, r5
    4b98:	bd70      	pop	{r4, r5, r6, pc}
    4b9a:	2101      	movs	r1, #1
    4b9c:	70a1      	strb	r1, [r4, #2]
    4b9e:	bd70      	pop	{r4, r5, r6, pc}
    4ba0:	20000058 	.word	0x20000058
    4ba4:	20000f10 	.word	0x20000f10

00004ba8 <sdc_enable>:
    4ba8:	b570      	push	{r4, r5, r6, lr}
    4baa:	460c      	mov	r4, r1
    4bac:	0005      	movs	r5, r0
    4bae:	d019      	beq.n	4be4 <sdc_enable+0x3c>
    4bb0:	b1c4      	cbz	r4, 4be4 <sdc_enable+0x3c>
    4bb2:	f000 f915 	bl	4de0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4bb6:	b1c0      	cbz	r0, 4bea <sdc_enable+0x42>
    4bb8:	4628      	mov	r0, r5
    4bba:	f7ff fe6f 	bl	489c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4bbe:	4d0c      	ldr	r5, [pc, #48]	; (4bf0 <sdc_enable+0x48>)
    4bc0:	2200      	movs	r2, #0
    4bc2:	490c      	ldr	r1, [pc, #48]	; (4bf4 <sdc_enable+0x4c>)
    4bc4:	7028      	strb	r0, [r5, #0]
    4bc6:	4620      	mov	r0, r4
    4bc8:	f007 ffbb 	bl	cb42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4bcc:	f00b fcf4 	bl	105b8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4bd0:	2100      	movs	r1, #0
    4bd2:	7828      	ldrb	r0, [r5, #0]
    4bd4:	f006 fb12 	bl	b1fc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4bd8:	f7ff ff48 	bl	4a6c <mpsl_fem_device_config_254_apply_get+0xc>
    4bdc:	2001      	movs	r0, #1
    4bde:	7068      	strb	r0, [r5, #1]
    4be0:	2000      	movs	r0, #0
    4be2:	bd70      	pop	{r4, r5, r6, pc}
    4be4:	f06f 0015 	mvn.w	r0, #21
    4be8:	bd70      	pop	{r4, r5, r6, pc}
    4bea:	f04f 30ff 	mov.w	r0, #4294967295
    4bee:	bd70      	pop	{r4, r5, r6, pc}
    4bf0:	20000058 	.word	0x20000058
    4bf4:	20000f10 	.word	0x20000f10

00004bf8 <sdc_init>:
    4bf8:	b530      	push	{r4, r5, lr}
    4bfa:	b087      	sub	sp, #28
    4bfc:	0005      	movs	r5, r0
    4bfe:	d00c      	beq.n	4c1a <sdc_init+0x22>
    4c00:	f7ff fdf2 	bl	47e8 <mpsl_is_initialized>
    4c04:	f04f 34ff 	mov.w	r4, #4294967295
    4c08:	b120      	cbz	r0, 4c14 <sdc_init+0x1c>
    4c0a:	f7ff fc9d 	bl	4548 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4c0e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4c12:	d905      	bls.n	4c20 <sdc_init+0x28>
    4c14:	4620      	mov	r0, r4
    4c16:	b007      	add	sp, #28
    4c18:	bd30      	pop	{r4, r5, pc}
    4c1a:	f06f 0015 	mvn.w	r0, #21
    4c1e:	e7fa      	b.n	4c16 <sdc_init+0x1e>
    4c20:	4c15      	ldr	r4, [pc, #84]	; (4c78 <sdc_init+0x80>)
    4c22:	4816      	ldr	r0, [pc, #88]	; (4c7c <sdc_init+0x84>)
    4c24:	6065      	str	r5, [r4, #4]
    4c26:	f000 f9eb 	bl	5000 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4c2a:	2000      	movs	r0, #0
    4c2c:	7060      	strb	r0, [r4, #1]
    4c2e:	70a0      	strb	r0, [r4, #2]
    4c30:	70e0      	strb	r0, [r4, #3]
    4c32:	4601      	mov	r1, r0
    4c34:	2218      	movs	r2, #24
    4c36:	4668      	mov	r0, sp
    4c38:	f007 ff04 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4c3c:	2218      	movs	r2, #24
    4c3e:	4910      	ldr	r1, [pc, #64]	; (4c80 <sdc_init+0x88>)
    4c40:	4668      	mov	r0, sp
    4c42:	f007 fe85 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c46:	2218      	movs	r2, #24
    4c48:	4669      	mov	r1, sp
    4c4a:	480e      	ldr	r0, [pc, #56]	; (4c84 <sdc_init+0x8c>)
    4c4c:	f007 fe80 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4c50:	f3ef 8410 	mrs	r4, PRIMASK
    4c54:	b672      	cpsid	i
    4c56:	480c      	ldr	r0, [pc, #48]	; (4c88 <sdc_init+0x90>)
    4c58:	f06f 010c 	mvn.w	r1, #12
    4c5c:	f000 fd9e 	bl	579c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4c60:	480a      	ldr	r0, [pc, #40]	; (4c8c <sdc_init+0x94>)
    4c62:	f000 fe6b 	bl	593c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4c66:	b118      	cbz	r0, 4c70 <sdc_init+0x78>
    4c68:	219a      	movs	r1, #154	; 0x9a
    4c6a:	2003      	movs	r0, #3
    4c6c:	f000 f810 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c70:	b904      	cbnz	r4, 4c74 <sdc_init+0x7c>
    4c72:	b662      	cpsie	i
    4c74:	2000      	movs	r0, #0
    4c76:	e7ce      	b.n	4c16 <sdc_init+0x1e>
    4c78:	20000058 	.word	0x20000058
    4c7c:	00004a6d 	.word	0x00004a6d
    4c80:	00004d7c 	.word	0x00004d7c
    4c84:	20000f10 	.word	0x20000f10
    4c88:	4000c000 	.word	0x4000c000
    4c8c:	00004e0d 	.word	0x00004e0d

00004c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4c90:	b50e      	push	{r1, r2, r3, lr}
    4c92:	b672      	cpsid	i
    4c94:	4a15      	ldr	r2, [pc, #84]	; (4cec <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4c96:	6855      	ldr	r5, [r2, #4]
    4c98:	b1d5      	cbz	r5, 4cd0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4c9a:	2200      	movs	r2, #0
    4c9c:	4603      	mov	r3, r0
    4c9e:	466e      	mov	r6, sp
    4ca0:	240a      	movs	r4, #10
    4ca2:	e003      	b.n	4cac <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4ca4:	fbb0 f0f4 	udiv	r0, r0, r4
    4ca8:	1c52      	adds	r2, r2, #1
    4caa:	b2d2      	uxtb	r2, r2
    4cac:	2800      	cmp	r0, #0
    4cae:	d1f9      	bne.n	4ca4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4cb0:	54b0      	strb	r0, [r6, r2]
    4cb2:	e009      	b.n	4cc8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4cb4:	fbb3 f0f4 	udiv	r0, r3, r4
    4cb8:	fb04 3010 	mls	r0, r4, r0, r3
    4cbc:	fbb3 f3f4 	udiv	r3, r3, r4
    4cc0:	1e52      	subs	r2, r2, #1
    4cc2:	b2d2      	uxtb	r2, r2
    4cc4:	3030      	adds	r0, #48	; 0x30
    4cc6:	54b0      	strb	r0, [r6, r2]
    4cc8:	2a00      	cmp	r2, #0
    4cca:	d1f3      	bne.n	4cb4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4ccc:	4630      	mov	r0, r6
    4cce:	47a8      	blx	r5
    4cd0:	f3bf 8f4f 	dsb	sy
    4cd4:	4806      	ldr	r0, [pc, #24]	; (4cf0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4cd6:	6801      	ldr	r1, [r0, #0]
    4cd8:	4a06      	ldr	r2, [pc, #24]	; (4cf4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4cda:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4cde:	4311      	orrs	r1, r2
    4ce0:	6001      	str	r1, [r0, #0]
    4ce2:	f3bf 8f4f 	dsb	sy
    4ce6:	bf00      	nop
    4ce8:	e7fd      	b.n	4ce6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4cea:	0000      	.short	0x0000
    4cec:	20000058 	.word	0x20000058
    4cf0:	e000ed0c 	.word	0xe000ed0c
    4cf4:	05fa0004 	.word	0x05fa0004

00004cf8 <sdc_support_adv>:
    4cf8:	4806      	ldr	r0, [pc, #24]	; (4d14 <sdc_support_adv+0x1c>)
    4cfa:	b510      	push	{r4, lr}
    4cfc:	7881      	ldrb	r1, [r0, #2]
    4cfe:	7840      	ldrb	r0, [r0, #1]
    4d00:	4301      	orrs	r1, r0
    4d02:	d002      	beq.n	4d0a <sdc_support_adv+0x12>
    4d04:	f04f 30ff 	mov.w	r0, #4294967295
    4d08:	bd10      	pop	{r4, pc}
    4d0a:	f006 fa97 	bl	b23c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    4d0e:	2000      	movs	r0, #0
    4d10:	bd10      	pop	{r4, pc}
    4d12:	0000      	.short	0x0000
    4d14:	20000058 	.word	0x20000058

00004d18 <sdc_support_dle>:
    4d18:	4806      	ldr	r0, [pc, #24]	; (4d34 <sdc_support_dle+0x1c>)
    4d1a:	b510      	push	{r4, lr}
    4d1c:	7881      	ldrb	r1, [r0, #2]
    4d1e:	7840      	ldrb	r0, [r0, #1]
    4d20:	4301      	orrs	r1, r0
    4d22:	d002      	beq.n	4d2a <sdc_support_dle+0x12>
    4d24:	f04f 30ff 	mov.w	r0, #4294967295
    4d28:	bd10      	pop	{r4, pc}
    4d2a:	f006 f83f 	bl	adac <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4d2e:	2000      	movs	r0, #0
    4d30:	bd10      	pop	{r4, pc}
    4d32:	0000      	.short	0x0000
    4d34:	20000058 	.word	0x20000058

00004d38 <sdc_support_le_2m_phy>:
    4d38:	4806      	ldr	r0, [pc, #24]	; (4d54 <sdc_support_le_2m_phy+0x1c>)
    4d3a:	b510      	push	{r4, lr}
    4d3c:	7881      	ldrb	r1, [r0, #2]
    4d3e:	7840      	ldrb	r0, [r0, #1]
    4d40:	4301      	orrs	r1, r0
    4d42:	d002      	beq.n	4d4a <sdc_support_le_2m_phy+0x12>
    4d44:	f04f 30ff 	mov.w	r0, #4294967295
    4d48:	bd10      	pop	{r4, pc}
    4d4a:	f00b f99c 	bl	10086 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4d4e:	2000      	movs	r0, #0
    4d50:	bd10      	pop	{r4, pc}
    4d52:	0000      	.short	0x0000
    4d54:	20000058 	.word	0x20000058

00004d58 <sdc_support_slave>:
    4d58:	4806      	ldr	r0, [pc, #24]	; (4d74 <sdc_support_slave+0x1c>)
    4d5a:	b510      	push	{r4, lr}
    4d5c:	7881      	ldrb	r1, [r0, #2]
    4d5e:	7840      	ldrb	r0, [r0, #1]
    4d60:	4301      	orrs	r1, r0
    4d62:	d002      	beq.n	4d6a <sdc_support_slave+0x12>
    4d64:	f04f 30ff 	mov.w	r0, #4294967295
    4d68:	bd10      	pop	{r4, pc}
    4d6a:	f006 fa79 	bl	b260 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    4d6e:	2000      	movs	r0, #0
    4d70:	bd10      	pop	{r4, pc}
    4d72:	0000      	.short	0x0000
    4d74:	20000058 	.word	0x20000058
    4d78:	00000001 	.word	0x00000001
    4d7c:	00010101 	.word	0x00010101
    4d80:	031b1b00 	.word	0x031b1b00
    4d84:	00000002 	.word	0x00000002
    4d88:	00001d4c 	.word	0x00001d4c
    4d8c:	001f0003 	.word	0x001f0003
    4d90:	00000000 	.word	0x00000000
    4d94:	66c5e70e 	.word	0x66c5e70e
    4d98:	ac3c1867 	.word	0xac3c1867
    4d9c:	81ccd2b3 	.word	0x81ccd2b3
    4da0:	c0f1dca3 	.word	0xc0f1dca3
    4da4:	220236c0 	.word	0x220236c0

00004da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4da8:	4a05      	ldr	r2, [pc, #20]	; (4dc0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4daa:	b510      	push	{r4, lr}
    4dac:	6852      	ldr	r2, [r2, #4]
    4dae:	b112      	cbz	r2, 4db6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4db4:	4710      	bx	r2
    4db6:	2183      	movs	r1, #131	; 0x83
    4db8:	2004      	movs	r0, #4
    4dba:	f7ff ff69 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dbe:	0000      	.short	0x0000
    4dc0:	20000f28 	.word	0x20000f28

00004dc4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4dc4:	4a05      	ldr	r2, [pc, #20]	; (4ddc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4dc6:	b510      	push	{r4, lr}
    4dc8:	6892      	ldr	r2, [r2, #8]
    4dca:	b112      	cbz	r2, 4dd2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4dd0:	4710      	bx	r2
    4dd2:	2189      	movs	r1, #137	; 0x89
    4dd4:	2004      	movs	r0, #4
    4dd6:	f7ff ff5b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4dda:	0000      	.short	0x0000
    4ddc:	20000f28 	.word	0x20000f28

00004de0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4de0:	4805      	ldr	r0, [pc, #20]	; (4df8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4de2:	6801      	ldr	r1, [r0, #0]
    4de4:	b129      	cbz	r1, 4df2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4de6:	6841      	ldr	r1, [r0, #4]
    4de8:	b119      	cbz	r1, 4df2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4dea:	6880      	ldr	r0, [r0, #8]
    4dec:	b108      	cbz	r0, 4df2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4dee:	2001      	movs	r0, #1
    4df0:	4770      	bx	lr
    4df2:	2000      	movs	r0, #0
    4df4:	4770      	bx	lr
    4df6:	0000      	.short	0x0000
    4df8:	20000f28 	.word	0x20000f28

00004dfc <sdc_rand_source_register>:
    4dfc:	4902      	ldr	r1, [pc, #8]	; (4e08 <sdc_rand_source_register+0xc>)
    4dfe:	c80d      	ldmia	r0, {r0, r2, r3}
    4e00:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4e04:	2000      	movs	r0, #0
    4e06:	4770      	bx	lr
    4e08:	20000f28 	.word	0x20000f28

00004e0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e0e:	4c12      	ldr	r4, [pc, #72]	; (4e58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4e10:	2600      	movs	r6, #0
    4e12:	6825      	ldr	r5, [r4, #0]
    4e14:	e011      	b.n	4e3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4e16:	9800      	ldr	r0, [sp, #0]
    4e18:	2802      	cmp	r0, #2
    4e1a:	d002      	beq.n	4e22 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4e1c:	2803      	cmp	r0, #3
    4e1e:	d10c      	bne.n	4e3a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4e20:	e006      	b.n	4e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4e22:	6820      	ldr	r0, [r4, #0]
    4e24:	b110      	cbz	r0, 4e2c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4e26:	2000      	movs	r0, #0
    4e28:	6026      	str	r6, [r4, #0]
    4e2a:	e005      	b.n	4e38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4e2c:	2128      	movs	r1, #40	; 0x28
    4e2e:	e00c      	b.n	4e4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4e30:	6820      	ldr	r0, [r4, #0]
    4e32:	b168      	cbz	r0, 4e50 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4e34:	2001      	movs	r0, #1
    4e36:	6026      	str	r6, [r4, #0]
    4e38:	47a8      	blx	r5
    4e3a:	4668      	mov	r0, sp
    4e3c:	f000 fd50 	bl	58e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4e40:	2800      	cmp	r0, #0
    4e42:	d0e8      	beq.n	4e16 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4e44:	2805      	cmp	r0, #5
    4e46:	d005      	beq.n	4e54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4e48:	2135      	movs	r1, #53	; 0x35
    4e4a:	2004      	movs	r0, #4
    4e4c:	f7ff ff20 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e50:	212d      	movs	r1, #45	; 0x2d
    4e52:	e7fa      	b.n	4e4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4e56:	0000      	.short	0x0000
    4e58:	20000060 	.word	0x20000060
    4e5c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4e5e:	4c1f      	ldr	r4, [pc, #124]	; (4edc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    4e60:	4605      	mov	r5, r0
    4e62:	7820      	ldrb	r0, [r4, #0]
    4e64:	b140      	cbz	r0, 4e78 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4e66:	78a2      	ldrb	r2, [r4, #2]
    4e68:	1c61      	adds	r1, r4, #1
    4e6a:	4628      	mov	r0, r5
    4e6c:	1c92      	adds	r2, r2, #2
    4e6e:	f007 fd6f 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e72:	2000      	movs	r0, #0
    4e74:	7020      	strb	r0, [r4, #0]
    4e76:	e021      	b.n	4ebc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4e78:	4819      	ldr	r0, [pc, #100]	; (4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e7a:	f002 f837 	bl	6eec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4e7e:	2800      	cmp	r0, #0
    4e80:	d01d      	beq.n	4ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4e82:	4c17      	ldr	r4, [pc, #92]	; (4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e84:	7820      	ldrb	r0, [r4, #0]
    4e86:	2811      	cmp	r0, #17
    4e88:	d104      	bne.n	4e94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4e8a:	210a      	movs	r1, #10
    4e8c:	203e      	movs	r0, #62	; 0x3e
    4e8e:	f007 fee0 	bl	cc52 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4e92:	b118      	cbz	r0, 4e9c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    4e94:	7820      	ldrb	r0, [r4, #0]
    4e96:	2808      	cmp	r0, #8
    4e98:	d005      	beq.n	4ea6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    4e9a:	e009      	b.n	4eb0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    4e9c:	4910      	ldr	r1, [pc, #64]	; (4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4e9e:	4628      	mov	r0, r5
    4ea0:	f008 f8df 	bl	d062 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4ea4:	e00a      	b.n	4ebc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    4ea6:	2105      	movs	r1, #5
    4ea8:	203e      	movs	r0, #62	; 0x3e
    4eaa:	f007 fed2 	bl	cc52 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4eae:	b138      	cbz	r0, 4ec0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    4eb0:	490b      	ldr	r1, [pc, #44]	; (4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    4eb2:	4628      	mov	r0, r5
    4eb4:	f007 ff2b 	bl	cd0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4eb8:	2800      	cmp	r0, #0
    4eba:	d000      	beq.n	4ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4ebc:	2001      	movs	r0, #1
    4ebe:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4ec0:	88a0      	ldrh	r0, [r4, #4]
    4ec2:	f8ad 0000 	strh.w	r0, [sp]
    4ec6:	a901      	add	r1, sp, #4
    4ec8:	4668      	mov	r0, sp
    4eca:	f008 f9e8 	bl	d29e <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    4ece:	2800      	cmp	r0, #0
    4ed0:	d0f5      	beq.n	4ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    4ed2:	219b      	movs	r1, #155	; 0x9b
    4ed4:	2008      	movs	r0, #8
    4ed6:	f7ff fedb 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eda:	0000      	.short	0x0000
    4edc:	200010c6 	.word	0x200010c6
    4ee0:	20000fc4 	.word	0x20000fc4
    4ee4:	b570      	push	{r4, r5, r6, lr}
    4ee6:	780a      	ldrb	r2, [r1, #0]
    4ee8:	7082      	strb	r2, [r0, #2]
    4eea:	b33a      	cbz	r2, 4f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4eec:	2a01      	cmp	r2, #1
    4eee:	d825      	bhi.n	4f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    4ef0:	2313      	movs	r3, #19
    4ef2:	7003      	strb	r3, [r0, #0]
    4ef4:	2300      	movs	r3, #0
    4ef6:	e00a      	b.n	4f0e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    4ef8:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4efc:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4f00:	78a6      	ldrb	r6, [r4, #2]
    4f02:	70ee      	strb	r6, [r5, #3]
    4f04:	8864      	ldrh	r4, [r4, #2]
    4f06:	0a24      	lsrs	r4, r4, #8
    4f08:	1c5b      	adds	r3, r3, #1
    4f0a:	712c      	strb	r4, [r5, #4]
    4f0c:	b2db      	uxtb	r3, r3
    4f0e:	4293      	cmp	r3, r2
    4f10:	d3f2      	bcc.n	4ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    4f12:	2300      	movs	r3, #0
    4f14:	e00b      	b.n	4f2e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    4f16:	bf00      	nop
    4f18:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4f1c:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4f20:	792e      	ldrb	r6, [r5, #4]
    4f22:	7166      	strb	r6, [r4, #5]
    4f24:	88ad      	ldrh	r5, [r5, #4]
    4f26:	0a2d      	lsrs	r5, r5, #8
    4f28:	1c5b      	adds	r3, r3, #1
    4f2a:	71a5      	strb	r5, [r4, #6]
    4f2c:	b2db      	uxtb	r3, r3
    4f2e:	4293      	cmp	r3, r2
    4f30:	d3f2      	bcc.n	4f18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    4f32:	2101      	movs	r1, #1
    4f34:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4f38:	b2c0      	uxtb	r0, r0
    4f3a:	bd70      	pop	{r4, r5, r6, pc}
    4f3c:	2000      	movs	r0, #0
    4f3e:	bd70      	pop	{r4, r5, r6, pc}

00004f40 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4f40:	2101      	movs	r1, #1
    4f42:	4a0c      	ldr	r2, [pc, #48]	; (4f74 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4f44:	2840      	cmp	r0, #64	; 0x40
    4f46:	d20c      	bcs.n	4f62 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4f48:	2820      	cmp	r0, #32
    4f4a:	d803      	bhi.n	4f54 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4f4c:	1e40      	subs	r0, r0, #1
    4f4e:	4081      	lsls	r1, r0
    4f50:	6810      	ldr	r0, [r2, #0]
    4f52:	e002      	b.n	4f5a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4f54:	3821      	subs	r0, #33	; 0x21
    4f56:	4081      	lsls	r1, r0
    4f58:	6850      	ldr	r0, [r2, #4]
    4f5a:	4201      	tst	r1, r0
    4f5c:	d107      	bne.n	4f6e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4f5e:	2000      	movs	r0, #0
    4f60:	4770      	bx	lr
    4f62:	28ff      	cmp	r0, #255	; 0xff
    4f64:	d003      	beq.n	4f6e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4f66:	3840      	subs	r0, #64	; 0x40
    4f68:	4081      	lsls	r1, r0
    4f6a:	6890      	ldr	r0, [r2, #8]
    4f6c:	e7f5      	b.n	4f5a <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4f6e:	2001      	movs	r0, #1
    4f70:	4770      	bx	lr
    4f72:	0000      	.short	0x0000
    4f74:	20000064 	.word	0x20000064

00004f78 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4f78:	2101      	movs	r1, #1
    4f7a:	1e40      	subs	r0, r0, #1
    4f7c:	4081      	lsls	r1, r0
    4f7e:	4804      	ldr	r0, [pc, #16]	; (4f90 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4f80:	68c0      	ldr	r0, [r0, #12]
    4f82:	4201      	tst	r1, r0
    4f84:	d001      	beq.n	4f8a <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    4f86:	2001      	movs	r0, #1
    4f88:	4770      	bx	lr
    4f8a:	2000      	movs	r0, #0
    4f8c:	4770      	bx	lr
    4f8e:	0000      	.short	0x0000
    4f90:	20000064 	.word	0x20000064

00004f94 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    4f94:	4901      	ldr	r1, [pc, #4]	; (4f9c <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    4f96:	6800      	ldr	r0, [r0, #0]
    4f98:	60c8      	str	r0, [r1, #12]
    4f9a:	4770      	bx	lr
    4f9c:	20000064 	.word	0x20000064

00004fa0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    4fa0:	4904      	ldr	r1, [pc, #16]	; (4fb4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    4fa2:	6802      	ldr	r2, [r0, #0]
    4fa4:	6840      	ldr	r0, [r0, #4]
    4fa6:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    4faa:	600a      	str	r2, [r1, #0]
    4fac:	4a02      	ldr	r2, [pc, #8]	; (4fb8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    4fae:	4310      	orrs	r0, r2
    4fb0:	6048      	str	r0, [r1, #4]
    4fb2:	4770      	bx	lr
    4fb4:	20000064 	.word	0x20000064
    4fb8:	024007f8 	.word	0x024007f8

00004fbc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    4fbc:	4901      	ldr	r1, [pc, #4]	; (4fc4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    4fbe:	6800      	ldr	r0, [r0, #0]
    4fc0:	6088      	str	r0, [r1, #8]
    4fc2:	4770      	bx	lr
    4fc4:	20000064 	.word	0x20000064

00004fc8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    4fc8:	4805      	ldr	r0, [pc, #20]	; (4fe0 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    4fca:	f04f 31ff 	mov.w	r1, #4294967295
    4fce:	6001      	str	r1, [r0, #0]
    4fd0:	0cc9      	lsrs	r1, r1, #19
    4fd2:	6041      	str	r1, [r0, #4]
    4fd4:	2100      	movs	r1, #0
    4fd6:	6081      	str	r1, [r0, #8]
    4fd8:	211f      	movs	r1, #31
    4fda:	60c1      	str	r1, [r0, #12]
    4fdc:	4770      	bx	lr
    4fde:	0000      	.short	0x0000
    4fe0:	20000064 	.word	0x20000064

00004fe4 <sdc_hci_cmd_cb_reset>:
    4fe4:	b510      	push	{r4, lr}
    4fe6:	f7ff ffef 	bl	4fc8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    4fea:	f00a ffc0 	bl	ff6e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4fee:	4604      	mov	r4, r0
    4ff0:	4802      	ldr	r0, [pc, #8]	; (4ffc <sdc_hci_cmd_cb_reset+0x18>)
    4ff2:	6800      	ldr	r0, [r0, #0]
    4ff4:	b100      	cbz	r0, 4ff8 <sdc_hci_cmd_cb_reset+0x14>
    4ff6:	4780      	blx	r0
    4ff8:	4620      	mov	r0, r4
    4ffa:	bd10      	pop	{r4, pc}
    4ffc:	20000074 	.word	0x20000074

00005000 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5000:	4901      	ldr	r1, [pc, #4]	; (5008 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    5002:	6008      	str	r0, [r1, #0]
    5004:	4770      	bx	lr
    5006:	0000      	.short	0x0000
    5008:	20000074 	.word	0x20000074

0000500c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    500c:	2102      	movs	r1, #2
    500e:	8001      	strh	r1, [r0, #0]
    5010:	8041      	strh	r1, [r0, #2]
    5012:	2100      	movs	r1, #0
    5014:	7101      	strb	r1, [r0, #4]
    5016:	210e      	movs	r1, #14
    5018:	7141      	strb	r1, [r0, #5]
    501a:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    501e:	80c1      	strh	r1, [r0, #6]
    5020:	4901      	ldr	r1, [pc, #4]	; (5028 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    5022:	6081      	str	r1, [r0, #8]
    5024:	2000      	movs	r0, #0
    5026:	4770      	bx	lr
    5028:	3c186766 	.word	0x3c186766

0000502c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    502c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    502e:	4604      	mov	r4, r0
    5030:	4669      	mov	r1, sp
    5032:	f008 fc92 	bl	d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    5036:	b170      	cbz	r0, 5056 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5038:	f240 215a 	movw	r1, #602	; 0x25a
    503c:	e008      	b.n	5050 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    503e:	bf00      	nop
    5040:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5044:	4621      	mov	r1, r4
    5046:	f000 f8ab 	bl	51a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    504a:	b120      	cbz	r0, 5056 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    504c:	f240 215f 	movw	r1, #607	; 0x25f
    5050:	2017      	movs	r0, #23
    5052:	f7ff fe1d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5056:	4668      	mov	r0, sp
    5058:	f000 f852 	bl	5100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    505c:	2800      	cmp	r0, #0
    505e:	d0ef      	beq.n	5040 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5060:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005064 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5064:	b510      	push	{r4, lr}
    5066:	2802      	cmp	r0, #2
    5068:	d304      	bcc.n	5074 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    506a:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    506e:	2017      	movs	r0, #23
    5070:	f7ff fe0e 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5074:	4901      	ldr	r1, [pc, #4]	; (507c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    5076:	5c08      	ldrb	r0, [r1, r0]
    5078:	bd10      	pop	{r4, pc}
    507a:	0000      	.short	0x0000
    507c:	20000f34 	.word	0x20000f34

00005080 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    5080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5082:	0005      	movs	r5, r0
    5084:	9500      	str	r5, [sp, #0]
    5086:	d010      	beq.n	50aa <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    5088:	2600      	movs	r6, #0
    508a:	7808      	ldrb	r0, [r1, #0]
    508c:	7849      	ldrb	r1, [r1, #1]
    508e:	4604      	mov	r4, r0
    5090:	42a1      	cmp	r1, r4
    5092:	d900      	bls.n	5096 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    5094:	460c      	mov	r4, r1
    5096:	1cea      	adds	r2, r5, #3
    5098:	f022 0203 	bic.w	r2, r2, #3
    509c:	42aa      	cmp	r2, r5
    509e:	d006      	beq.n	50ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    50a0:	f240 1179 	movw	r1, #377	; 0x179
    50a4:	2017      	movs	r0, #23
    50a6:	f7ff fdf3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50aa:	2601      	movs	r6, #1
    50ac:	e7ed      	b.n	508a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    50ae:	4f13      	ldr	r7, [pc, #76]	; (50fc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    50b0:	7038      	strb	r0, [r7, #0]
    50b2:	7079      	strb	r1, [r7, #1]
    50b4:	4631      	mov	r1, r6
    50b6:	4668      	mov	r0, sp
    50b8:	f000 f8ee 	bl	5298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    50bc:	2100      	movs	r1, #0
    50be:	460b      	mov	r3, r1
    50c0:	9800      	ldr	r0, [sp, #0]
    50c2:	1cc0      	adds	r0, r0, #3
    50c4:	f020 0003 	bic.w	r0, r0, #3
    50c8:	9000      	str	r0, [sp, #0]
    50ca:	b96e      	cbnz	r6, 50e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    50cc:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    50d0:	60d0      	str	r0, [r2, #12]
    50d2:	2000      	movs	r0, #0
    50d4:	e006      	b.n	50e4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    50d6:	bf00      	nop
    50d8:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    50dc:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    50e0:	1c40      	adds	r0, r0, #1
    50e2:	b2c0      	uxtb	r0, r0
    50e4:	42a0      	cmp	r0, r4
    50e6:	d3f7      	bcc.n	50d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    50e8:	9800      	ldr	r0, [sp, #0]
    50ea:	1c49      	adds	r1, r1, #1
    50ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    50f0:	b2c9      	uxtb	r1, r1
    50f2:	9000      	str	r0, [sp, #0]
    50f4:	2902      	cmp	r1, #2
    50f6:	d3e3      	bcc.n	50c0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    50f8:	1b40      	subs	r0, r0, r5
    50fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50fc:	20000f34 	.word	0x20000f34

00005100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5100:	b570      	push	{r4, r5, r6, lr}
    5102:	4604      	mov	r4, r0
    5104:	f008 fda2 	bl	dc4c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5108:	b108      	cbz	r0, 510e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    510a:	2010      	movs	r0, #16
    510c:	bd70      	pop	{r4, r5, r6, pc}
    510e:	7825      	ldrb	r5, [r4, #0]
    5110:	f000 f8fe 	bl	5310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    5114:	4602      	mov	r2, r0
    5116:	480c      	ldr	r0, [pc, #48]	; (5148 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5118:	8861      	ldrh	r1, [r4, #2]
    511a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    511e:	e00e      	b.n	513e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5120:	68c3      	ldr	r3, [r0, #12]
    5122:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5126:	b143      	cbz	r3, 513a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5128:	1c4a      	adds	r2, r1, #1
    512a:	8062      	strh	r2, [r4, #2]
    512c:	80a1      	strh	r1, [r4, #4]
    512e:	68c0      	ldr	r0, [r0, #12]
    5130:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5134:	60a0      	str	r0, [r4, #8]
    5136:	2000      	movs	r0, #0
    5138:	bd70      	pop	{r4, r5, r6, pc}
    513a:	1c49      	adds	r1, r1, #1
    513c:	b289      	uxth	r1, r1
    513e:	4291      	cmp	r1, r2
    5140:	d3ee      	bcc.n	5120 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5142:	8061      	strh	r1, [r4, #2]
    5144:	2005      	movs	r0, #5
    5146:	bd70      	pop	{r4, r5, r6, pc}
    5148:	20000f34 	.word	0x20000f34

0000514c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    514c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5150:	b121      	cbz	r1, 515c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5152:	2901      	cmp	r1, #1
    5154:	d002      	beq.n	515c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    5156:	2000      	movs	r0, #0
    5158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    515c:	4c0f      	ldr	r4, [pc, #60]	; (519c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    515e:	2700      	movs	r7, #0
    5160:	463b      	mov	r3, r7
    5162:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5166:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    516a:	f814 c001 	ldrb.w	ip, [r4, r1]
    516e:	e00a      	b.n	5186 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    5170:	19dc      	adds	r4, r3, r7
    5172:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    5176:	b2a4      	uxth	r4, r4
    5178:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    517c:	f1be 0f00 	cmp.w	lr, #0
    5180:	d004      	beq.n	518c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    5182:	1c5b      	adds	r3, r3, #1
    5184:	b29b      	uxth	r3, r3
    5186:	459c      	cmp	ip, r3
    5188:	d8f2      	bhi.n	5170 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    518a:	4634      	mov	r4, r6
    518c:	8004      	strh	r4, [r0, #0]
    518e:	4620      	mov	r0, r4
    5190:	42b4      	cmp	r4, r6
    5192:	d0e0      	beq.n	5156 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    5194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5198:	f000 b834 	b.w	5204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    519c:	20000f34 	.word	0x20000f34

000051a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    51a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51a4:	4606      	mov	r6, r0
    51a6:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    51aa:	460c      	mov	r4, r1
    51ac:	f243 0702 	movw	r7, #12290	; 0x3002
    51b0:	38ff      	subs	r0, #255	; 0xff
    51b2:	d020      	beq.n	51f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    51b4:	2c02      	cmp	r4, #2
    51b6:	d302      	bcc.n	51be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    51b8:	2007      	movs	r0, #7
    51ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51be:	4630      	mov	r0, r6
    51c0:	f000 f85a 	bl	5278 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    51c4:	0005      	movs	r5, r0
    51c6:	d016      	beq.n	51f6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    51c8:	480c      	ldr	r0, [pc, #48]	; (51fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    51ca:	4629      	mov	r1, r5
    51cc:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    51d0:	4630      	mov	r0, r6
    51d2:	4790      	blx	r2
    51d4:	480a      	ldr	r0, [pc, #40]	; (5200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    51d6:	2100      	movs	r1, #0
    51d8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    51dc:	68f8      	ldr	r0, [r7, #12]
    51de:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    51e2:	4620      	mov	r0, r4
    51e4:	f000 f88a 	bl	52fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    51e8:	4602      	mov	r2, r0
    51ea:	4629      	mov	r1, r5
    51ec:	6878      	ldr	r0, [r7, #4]
    51ee:	f008 fb93 	bl	d918 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    51f2:	2000      	movs	r0, #0
    51f4:	e7e1      	b.n	51ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    51f6:	4638      	mov	r0, r7
    51f8:	e7df      	b.n	51ba <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    51fa:	0000      	.short	0x0000
    51fc:	00005330 	.word	0x00005330
    5200:	20000f34 	.word	0x20000f34
    5204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5208:	4690      	mov	r8, r2
    520a:	460d      	mov	r5, r1
    520c:	4607      	mov	r7, r0
    520e:	f008 fbb5 	bl	d97c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5212:	b148      	cbz	r0, 5228 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    5214:	4816      	ldr	r0, [pc, #88]	; (5270 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    5216:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    521a:	68f0      	ldr	r0, [r6, #12]
    521c:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5220:	b128      	cbz	r0, 522e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    5222:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5226:	e015      	b.n	5254 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5228:	f240 1139 	movw	r1, #313	; 0x139
    522c:	e012      	b.n	5254 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    522e:	6870      	ldr	r0, [r6, #4]
    5230:	2800      	cmp	r0, #0
    5232:	d01a      	beq.n	526a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    5234:	4628      	mov	r0, r5
    5236:	f000 f861 	bl	52fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    523a:	4601      	mov	r1, r0
    523c:	6870      	ldr	r0, [r6, #4]
    523e:	f008 fb1d 	bl	d87c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5242:	0004      	movs	r4, r0
    5244:	d010      	beq.n	5268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    5246:	68f0      	ldr	r0, [r6, #12]
    5248:	2d02      	cmp	r5, #2
    524a:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    524e:	d304      	bcc.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    5250:	f240 1145 	movw	r1, #325	; 0x145
    5254:	2017      	movs	r0, #23
    5256:	f7ff fd1b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	4806      	ldr	r0, [pc, #24]	; (5274 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    525c:	4642      	mov	r2, r8
    525e:	4621      	mov	r1, r4
    5260:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    5264:	4638      	mov	r0, r7
    5266:	4798      	blx	r3
    5268:	4620      	mov	r0, r4
    526a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    526e:	0000      	.short	0x0000
    5270:	20000f34 	.word	0x20000f34
    5274:	00005328 	.word	0x00005328
    5278:	b570      	push	{r4, r5, r6, lr}
    527a:	460c      	mov	r4, r1
    527c:	4605      	mov	r5, r0
    527e:	f008 fb7d 	bl	d97c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    5282:	2800      	cmp	r0, #0
    5284:	d005      	beq.n	5292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    5286:	4803      	ldr	r0, [pc, #12]	; (5294 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    5288:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    528c:	68c0      	ldr	r0, [r0, #12]
    528e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    5292:	bd70      	pop	{r4, r5, r6, pc}
    5294:	20000f34 	.word	0x20000f34
    5298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    529c:	4e16      	ldr	r6, [pc, #88]	; (52f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    529e:	4688      	mov	r8, r1
    52a0:	4605      	mov	r5, r0
    52a2:	2400      	movs	r4, #0
    52a4:	6828      	ldr	r0, [r5, #0]
    52a6:	1cc0      	adds	r0, r0, #3
    52a8:	f020 0003 	bic.w	r0, r0, #3
    52ac:	6028      	str	r0, [r5, #0]
    52ae:	4620      	mov	r0, r4
    52b0:	f000 f824 	bl	52fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    52b4:	5d31      	ldrb	r1, [r6, r4]
    52b6:	4348      	muls	r0, r1
    52b8:	f1b8 0f00 	cmp.w	r8, #0
    52bc:	d001      	beq.n	52c2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    52be:	2200      	movs	r2, #0
    52c0:	e000      	b.n	52c4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    52c2:	682a      	ldr	r2, [r5, #0]
    52c4:	4601      	mov	r1, r0
    52c6:	9200      	str	r2, [sp, #0]
    52c8:	b132      	cbz	r2, 52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    52ca:	2700      	movs	r7, #0
    52cc:	ea4f 000d 	mov.w	r0, sp
    52d0:	f008 fb01 	bl	d8d6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    52d4:	b11f      	cbz	r7, 52de <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    52d6:	e006      	b.n	52e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    52d8:	2701      	movs	r7, #1
    52da:	2000      	movs	r0, #0
    52dc:	e7f8      	b.n	52d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    52de:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    52e2:	9a00      	ldr	r2, [sp, #0]
    52e4:	604a      	str	r2, [r1, #4]
    52e6:	6829      	ldr	r1, [r5, #0]
    52e8:	1c64      	adds	r4, r4, #1
    52ea:	4408      	add	r0, r1
    52ec:	b2e4      	uxtb	r4, r4
    52ee:	6028      	str	r0, [r5, #0]
    52f0:	2c02      	cmp	r4, #2
    52f2:	d3d7      	bcc.n	52a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    52f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    52f8:	20000f34 	.word	0x20000f34
    52fc:	4903      	ldr	r1, [pc, #12]	; (530c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    52fe:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5302:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5306:	1cc0      	adds	r0, r0, #3
    5308:	4008      	ands	r0, r1
    530a:	4770      	bx	lr
    530c:	00005324 	.word	0x00005324
    5310:	4903      	ldr	r1, [pc, #12]	; (5320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    5312:	7808      	ldrb	r0, [r1, #0]
    5314:	7849      	ldrb	r1, [r1, #1]
    5316:	4288      	cmp	r0, r1
    5318:	d200      	bcs.n	531c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    531a:	4608      	mov	r0, r1
    531c:	4770      	bx	lr
    531e:	0000      	.short	0x0000
    5320:	20000f34 	.word	0x20000f34
    5324:	00d40218 	.word	0x00d40218
    5328:	0000d991 	.word	0x0000d991
    532c:	0000d991 	.word	0x0000d991
    5330:	0000f551 	.word	0x0000f551
    5334:	0000e93f 	.word	0x0000e93f

00005338 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5338:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    533c:	4c26      	ldr	r4, [pc, #152]	; (53d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    533e:	4680      	mov	r8, r0
    5340:	b081      	sub	sp, #4
    5342:	6820      	ldr	r0, [r4, #0]
    5344:	469a      	mov	sl, r3
    5346:	4693      	mov	fp, r2
    5348:	b158      	cbz	r0, 5362 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    534a:	7a02      	ldrb	r2, [r0, #8]
    534c:	4542      	cmp	r2, r8
    534e:	d903      	bls.n	5358 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5350:	6841      	ldr	r1, [r0, #4]
    5352:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    5356:	b140      	cbz	r0, 536a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5358:	f243 0002 	movw	r0, #12290	; 0x3002
    535c:	b005      	add	sp, #20
    535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5362:	21a5      	movs	r1, #165	; 0xa5
    5364:	2018      	movs	r0, #24
    5366:	f7ff fc93 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    536a:	4619      	mov	r1, r3
    536c:	9802      	ldr	r0, [sp, #8]
    536e:	f008 fb27 	bl	d9c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    5372:	b286      	uxth	r6, r0
    5374:	4658      	mov	r0, fp
    5376:	990e      	ldr	r1, [sp, #56]	; 0x38
    5378:	f008 fb19 	bl	d9ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    537c:	b285      	uxth	r5, r0
    537e:	1970      	adds	r0, r6, r5
    5380:	1d00      	adds	r0, r0, #4
    5382:	b287      	uxth	r7, r0
    5384:	6820      	ldr	r0, [r4, #0]
    5386:	46a1      	mov	r9, r4
    5388:	4639      	mov	r1, r7
    538a:	6800      	ldr	r0, [r0, #0]
    538c:	f008 fa76 	bl	d87c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5390:	0004      	movs	r4, r0
    5392:	d01f      	beq.n	53d4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    5394:	8067      	strh	r7, [r4, #2]
    5396:	8025      	strh	r5, [r4, #0]
    5398:	4629      	mov	r1, r5
    539a:	1d20      	adds	r0, r4, #4
    539c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    539e:	4607      	mov	r7, r0
    53a0:	465a      	mov	r2, fp
    53a2:	2301      	movs	r3, #1
    53a4:	9500      	str	r5, [sp, #0]
    53a6:	f008 f9c9 	bl	d73c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53aa:	8820      	ldrh	r0, [r4, #0]
    53ac:	4631      	mov	r1, r6
    53ae:	4438      	add	r0, r7
    53b0:	2301      	movs	r3, #1
    53b2:	9a02      	ldr	r2, [sp, #8]
    53b4:	f8cd a000 	str.w	sl, [sp]
    53b8:	f008 f9c0 	bl	d73c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53bc:	8820      	ldrh	r0, [r4, #0]
    53be:	19c1      	adds	r1, r0, r7
    53c0:	4638      	mov	r0, r7
    53c2:	f008 f9ec 	bl	d79e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    53c6:	f8d9 0000 	ldr.w	r0, [r9]
    53ca:	6841      	ldr	r1, [r0, #4]
    53cc:	2000      	movs	r0, #0
    53ce:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    53d2:	e7c3      	b.n	535c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    53d4:	2004      	movs	r0, #4
    53d6:	e7c1      	b.n	535c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    53d8:	20000078 	.word	0x20000078

000053dc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    53dc:	b570      	push	{r4, r5, r6, lr}
    53de:	4c14      	ldr	r4, [pc, #80]	; (5430 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    53e0:	6823      	ldr	r3, [r4, #0]
    53e2:	b18b      	cbz	r3, 5408 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    53e4:	7a19      	ldrb	r1, [r3, #8]
    53e6:	4281      	cmp	r1, r0
    53e8:	d912      	bls.n	5410 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    53ea:	685a      	ldr	r2, [r3, #4]
    53ec:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    53f0:	b171      	cbz	r1, 5410 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    53f2:	2500      	movs	r5, #0
    53f4:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    53f8:	884a      	ldrh	r2, [r1, #2]
    53fa:	6818      	ldr	r0, [r3, #0]
    53fc:	f008 fa8c 	bl	d918 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5400:	6821      	ldr	r1, [r4, #0]
    5402:	2000      	movs	r0, #0
    5404:	7a0a      	ldrb	r2, [r1, #8]
    5406:	e00c      	b.n	5422 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5408:	21c8      	movs	r1, #200	; 0xc8
    540a:	2018      	movs	r0, #24
    540c:	f7ff fc40 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5410:	f243 0002 	movw	r0, #12290	; 0x3002
    5414:	bd70      	pop	{r4, r5, r6, pc}
    5416:	684b      	ldr	r3, [r1, #4]
    5418:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    541c:	b933      	cbnz	r3, 542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    541e:	1c40      	adds	r0, r0, #1
    5420:	b2c0      	uxtb	r0, r0
    5422:	4282      	cmp	r2, r0
    5424:	d8f7      	bhi.n	5416 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5426:	6808      	ldr	r0, [r1, #0]
    5428:	f008 fa6b 	bl	d902 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    542c:	2000      	movs	r0, #0
    542e:	bd70      	pop	{r4, r5, r6, pc}
    5430:	20000078 	.word	0x20000078

00005434 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5438:	460d      	mov	r5, r1
    543a:	0004      	movs	r4, r0
    543c:	4690      	mov	r8, r2
    543e:	f04f 0600 	mov.w	r6, #0
    5442:	d009      	beq.n	5458 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5444:	2700      	movs	r7, #0
    5446:	1ce0      	adds	r0, r4, #3
    5448:	f020 0003 	bic.w	r0, r0, #3
    544c:	42a0      	cmp	r0, r4
    544e:	d005      	beq.n	545c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5450:	2186      	movs	r1, #134	; 0x86
    5452:	2018      	movs	r0, #24
    5454:	f7ff fc1c 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5458:	2701      	movs	r7, #1
    545a:	e7f4      	b.n	5446 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    545c:	b1cd      	cbz	r5, 5492 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    545e:	4611      	mov	r1, r2
    5460:	2000      	movs	r0, #0
    5462:	f008 fa38 	bl	d8d6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5466:	300c      	adds	r0, #12
    5468:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    546c:	b98f      	cbnz	r7, 5492 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    546e:	4f0a      	ldr	r7, [pc, #40]	; (5498 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5470:	f104 000c 	add.w	r0, r4, #12
    5474:	00aa      	lsls	r2, r5, #2
    5476:	603c      	str	r4, [r7, #0]
    5478:	7225      	strb	r5, [r4, #8]
    547a:	6060      	str	r0, [r4, #4]
    547c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5480:	6020      	str	r0, [r4, #0]
    5482:	2100      	movs	r1, #0
    5484:	6860      	ldr	r0, [r4, #4]
    5486:	f007 fadd 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    548a:	4641      	mov	r1, r8
    548c:	6838      	ldr	r0, [r7, #0]
    548e:	f008 fa22 	bl	d8d6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5492:	4630      	mov	r0, r6
    5494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5498:	20000078 	.word	0x20000078

0000549c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    549c:	b570      	push	{r4, r5, r6, lr}
    549e:	4d08      	ldr	r5, [pc, #32]	; (54c0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    54a0:	6828      	ldr	r0, [r5, #0]
    54a2:	2800      	cmp	r0, #0
    54a4:	d00a      	beq.n	54bc <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    54a6:	2400      	movs	r4, #0
    54a8:	e004      	b.n	54b4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    54aa:	4620      	mov	r0, r4
    54ac:	f7ff ff96 	bl	53dc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    54b0:	1c64      	adds	r4, r4, #1
    54b2:	b2e4      	uxtb	r4, r4
    54b4:	6828      	ldr	r0, [r5, #0]
    54b6:	7a00      	ldrb	r0, [r0, #8]
    54b8:	42a0      	cmp	r0, r4
    54ba:	d8f6      	bhi.n	54aa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    54bc:	bd70      	pop	{r4, r5, r6, pc}
    54be:	0000      	.short	0x0000
    54c0:	20000078 	.word	0x20000078

000054c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    54c4:	4909      	ldr	r1, [pc, #36]	; (54ec <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    54c6:	b510      	push	{r4, lr}
    54c8:	4602      	mov	r2, r0
    54ca:	6809      	ldr	r1, [r1, #0]
    54cc:	2000      	movs	r0, #0
    54ce:	b149      	cbz	r1, 54e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    54d0:	7a0b      	ldrb	r3, [r1, #8]
    54d2:	4293      	cmp	r3, r2
    54d4:	d905      	bls.n	54e2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    54d6:	6849      	ldr	r1, [r1, #4]
    54d8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    54dc:	2900      	cmp	r1, #0
    54de:	d000      	beq.n	54e2 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    54e0:	1d08      	adds	r0, r1, #4
    54e2:	bd10      	pop	{r4, pc}
    54e4:	21ee      	movs	r1, #238	; 0xee
    54e6:	2018      	movs	r0, #24
    54e8:	f7ff fbd2 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54ec:	20000078 	.word	0x20000078

000054f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    54f0:	490a      	ldr	r1, [pc, #40]	; (551c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    54f2:	b510      	push	{r4, lr}
    54f4:	4602      	mov	r2, r0
    54f6:	6809      	ldr	r1, [r1, #0]
    54f8:	2000      	movs	r0, #0
    54fa:	b159      	cbz	r1, 5514 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    54fc:	7a0b      	ldrb	r3, [r1, #8]
    54fe:	4293      	cmp	r3, r2
    5500:	d907      	bls.n	5512 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5502:	6849      	ldr	r1, [r1, #4]
    5504:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5508:	2900      	cmp	r1, #0
    550a:	d002      	beq.n	5512 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    550c:	f831 0b04 	ldrh.w	r0, [r1], #4
    5510:	4408      	add	r0, r1
    5512:	bd10      	pop	{r4, pc}
    5514:	21fc      	movs	r1, #252	; 0xfc
    5516:	2018      	movs	r0, #24
    5518:	f7ff fbba 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    551c:	20000078 	.word	0x20000078
    5520:	b570      	push	{r4, r5, r6, lr}
    5522:	4b1e      	ldr	r3, [pc, #120]	; (559c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    5524:	6845      	ldr	r5, [r0, #4]
    5526:	4604      	mov	r4, r0
    5528:	2200      	movs	r2, #0
    552a:	b1a1      	cbz	r1, 5556 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    552c:	2001      	movs	r0, #1
    552e:	7060      	strb	r0, [r4, #1]
    5530:	8858      	ldrh	r0, [r3, #2]
    5532:	0881      	lsrs	r1, r0, #2
    5534:	f05f 0000 	movs.w	r0, #0
    5538:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    553c:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    5540:	831a      	strh	r2, [r3, #24]
    5542:	8419      	strh	r1, [r3, #32]
    5544:	fb00 5301 	mla	r3, r0, r1, r5
    5548:	6073      	str	r3, [r6, #4]
    554a:	1823      	adds	r3, r4, r0
    554c:	1c40      	adds	r0, r0, #1
    554e:	751a      	strb	r2, [r3, #20]
    5550:	2804      	cmp	r0, #4
    5552:	d3f1      	bcc.n	5538 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    5554:	bd70      	pop	{r4, r5, r6, pc}
    5556:	7062      	strb	r2, [r4, #1]
    5558:	f05f 0000 	movs.w	r0, #0
    555c:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    5560:	830a      	strh	r2, [r1, #24]
    5562:	840a      	strh	r2, [r1, #32]
    5564:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    5568:	604a      	str	r2, [r1, #4]
    556a:	1821      	adds	r1, r4, r0
    556c:	1c40      	adds	r0, r0, #1
    556e:	750a      	strb	r2, [r1, #20]
    5570:	2804      	cmp	r0, #4
    5572:	d3f3      	bcc.n	555c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    5574:	8858      	ldrh	r0, [r3, #2]
    5576:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    557a:	d201      	bcs.n	5580 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    557c:	0846      	lsrs	r6, r0, #1
    557e:	e000      	b.n	5582 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    5580:	26ff      	movs	r6, #255	; 0xff
    5582:	f008 fa90 	bl	daa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5586:	6065      	str	r5, [r4, #4]
    5588:	8420      	strh	r0, [r4, #32]
    558a:	1829      	adds	r1, r5, r0
    558c:	60a1      	str	r1, [r4, #8]
    558e:	8466      	strh	r6, [r4, #34]	; 0x22
    5590:	60e5      	str	r5, [r4, #12]
    5592:	84a0      	strh	r0, [r4, #36]	; 0x24
    5594:	6121      	str	r1, [r4, #16]
    5596:	84e6      	strh	r6, [r4, #38]	; 0x26
    5598:	bd70      	pop	{r4, r5, r6, pc}
    559a:	0000      	.short	0x0000
    559c:	2000007c 	.word	0x2000007c

000055a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    55a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55a4:	b170      	cbz	r0, 55c4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    55a6:	2500      	movs	r5, #0
    55a8:	4411      	add	r1, r2
    55aa:	b2cc      	uxtb	r4, r1
    55ac:	4e24      	ldr	r6, [pc, #144]	; (5640 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    55ae:	1cc1      	adds	r1, r0, #3
    55b0:	2700      	movs	r7, #0
    55b2:	f021 0103 	bic.w	r1, r1, #3
    55b6:	7034      	strb	r4, [r6, #0]
    55b8:	4281      	cmp	r1, r0
    55ba:	d005      	beq.n	55c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    55bc:	214e      	movs	r1, #78	; 0x4e
    55be:	2009      	movs	r0, #9
    55c0:	f7ff fb66 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55c4:	2501      	movs	r5, #1
    55c6:	e7ef      	b.n	55a8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    55c8:	2b1f      	cmp	r3, #31
    55ca:	d804      	bhi.n	55d6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    55cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    55d0:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    55d4:	e009      	b.n	55ea <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    55d6:	0059      	lsls	r1, r3, #1
    55d8:	2bff      	cmp	r3, #255	; 0xff
    55da:	d90b      	bls.n	55f4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    55dc:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    55e0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    55e4:	d200      	bcs.n	55e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    55e6:	4611      	mov	r1, r2
    55e8:	b289      	uxth	r1, r1
    55ea:	1cc9      	adds	r1, r1, #3
    55ec:	f021 0303 	bic.w	r3, r1, #3
    55f0:	b135      	cbz	r5, 5600 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    55f2:	e007      	b.n	5604 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    55f4:	227c      	movs	r2, #124	; 0x7c
    55f6:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    55fa:	d3f5      	bcc.n	55e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    55fc:	217c      	movs	r1, #124	; 0x7c
    55fe:	e7f3      	b.n	55e8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    5600:	6070      	str	r0, [r6, #4]
    5602:	8073      	strh	r3, [r6, #2]
    5604:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    5608:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    560c:	2100      	movs	r1, #0
    560e:	6876      	ldr	r6, [r6, #4]
    5610:	f04f 0c01 	mov.w	ip, #1
    5614:	e00d      	b.n	5632 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    5616:	b94d      	cbnz	r5, 562c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    5618:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    561c:	eb00 0e02 	add.w	lr, r0, r2
    5620:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    5624:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    5628:	f8c7 e004 	str.w	lr, [r7, #4]
    562c:	1c49      	adds	r1, r1, #1
    562e:	441a      	add	r2, r3
    5630:	b2c9      	uxtb	r1, r1
    5632:	42a1      	cmp	r1, r4
    5634:	d3ef      	bcc.n	5616 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    5636:	1dd2      	adds	r2, r2, #7
    5638:	f022 0007 	bic.w	r0, r2, #7
    563c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5640:	2000007c 	.word	0x2000007c

00005644 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    5644:	b570      	push	{r4, r5, r6, lr}
    5646:	4a10      	ldr	r2, [pc, #64]	; (5688 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    5648:	2000      	movs	r0, #0
    564a:	6851      	ldr	r1, [r2, #4]
    564c:	7812      	ldrb	r2, [r2, #0]
    564e:	e014      	b.n	567a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    5650:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    5654:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    5658:	b16b      	cbz	r3, 5676 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    565a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    565e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    5662:	d00c      	beq.n	567e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    5664:	2500      	movs	r5, #0
    5666:	70a5      	strb	r5, [r4, #2]
    5668:	2101      	movs	r1, #1
    566a:	4620      	mov	r0, r4
    566c:	f7ff ff58 	bl	5520 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    5670:	7025      	strb	r5, [r4, #0]
    5672:	4620      	mov	r0, r4
    5674:	bd70      	pop	{r4, r5, r6, pc}
    5676:	1c40      	adds	r0, r0, #1
    5678:	b2c0      	uxtb	r0, r0
    567a:	4290      	cmp	r0, r2
    567c:	d3e8      	bcc.n	5650 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    567e:	21a9      	movs	r1, #169	; 0xa9
    5680:	2009      	movs	r0, #9
    5682:	f7ff fb05 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5686:	0000      	.short	0x0000
    5688:	2000007c 	.word	0x2000007c

0000568c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    568c:	4804      	ldr	r0, [pc, #16]	; (56a0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    568e:	b510      	push	{r4, lr}
    5690:	8840      	ldrh	r0, [r0, #2]
    5692:	0884      	lsrs	r4, r0, #2
    5694:	f008 fa07 	bl	daa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    5698:	4284      	cmp	r4, r0
    569a:	d300      	bcc.n	569e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    569c:	4620      	mov	r0, r4
    569e:	bd10      	pop	{r4, pc}
    56a0:	2000007c 	.word	0x2000007c
    56a4:	4909      	ldr	r1, [pc, #36]	; (56cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    56a6:	b510      	push	{r4, lr}
    56a8:	4807      	ldr	r0, [pc, #28]	; (56c8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    56aa:	6008      	str	r0, [r1, #0]
    56ac:	4b08      	ldr	r3, [pc, #32]	; (56d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    56ae:	2011      	movs	r0, #17
    56b0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    56b4:	2200      	movs	r2, #0
    56b6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    56ba:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    56be:	1c40      	adds	r0, r0, #1
    56c0:	b2c0      	uxtb	r0, r0
    56c2:	2814      	cmp	r0, #20
    56c4:	d3f4      	bcc.n	56b0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    56c6:	bd10      	pop	{r4, pc}
    56c8:	fffe0000 	.word	0xfffe0000
    56cc:	4001f508 	.word	0x4001f508
    56d0:	4001f000 	.word	0x4001f000
    56d4:	b570      	push	{r4, r5, r6, lr}
    56d6:	2420      	movs	r4, #32
    56d8:	2100      	movs	r1, #0
    56da:	2301      	movs	r3, #1
    56dc:	fa20 f201 	lsr.w	r2, r0, r1
    56e0:	07d2      	lsls	r2, r2, #31
    56e2:	d020      	beq.n	5726 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    56e4:	b24a      	sxtb	r2, r1
    56e6:	2a00      	cmp	r2, #0
    56e8:	db10      	blt.n	570c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    56ea:	bf00      	nop
    56ec:	ea4f 1652 	mov.w	r6, r2, lsr #5
    56f0:	ea4f 0686 	mov.w	r6, r6, lsl #2
    56f4:	f002 051f 	and.w	r5, r2, #31
    56f8:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    56fc:	fa03 f505 	lsl.w	r5, r3, r5
    5700:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5704:	f3bf 8f4f 	dsb	sy
    5708:	f3bf 8f6f 	isb	sy
    570c:	db0b      	blt.n	5726 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    570e:	f002 051f 	and.w	r5, r2, #31
    5712:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5716:	ea4f 0282 	mov.w	r2, r2, lsl #2
    571a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    571e:	fa03 f505 	lsl.w	r5, r3, r5
    5722:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5726:	f101 0101 	add.w	r1, r1, #1
    572a:	42a1      	cmp	r1, r4
    572c:	d3d6      	bcc.n	56dc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    572e:	bd70      	pop	{r4, r5, r6, pc}
    5730:	b570      	push	{r4, r5, r6, lr}
    5732:	0042      	lsls	r2, r0, #1
    5734:	f04f 0100 	mov.w	r1, #0
    5738:	d501      	bpl.n	573e <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    573a:	4a14      	ldr	r2, [pc, #80]	; (578c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    573c:	6011      	str	r1, [r2, #0]
    573e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5742:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5746:	429a      	cmp	r2, r3
    5748:	d003      	beq.n	5752 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    574a:	2169      	movs	r1, #105	; 0x69
    574c:	201b      	movs	r0, #27
    574e:	f7ff fa9f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5752:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5756:	d014      	beq.n	5782 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    5758:	4a0d      	ldr	r2, [pc, #52]	; (5790 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    575a:	2001      	movs	r0, #1
    575c:	6050      	str	r0, [r2, #4]
    575e:	1e83      	subs	r3, r0, #2
    5760:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5764:	4a0b      	ldr	r2, [pc, #44]	; (5794 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    5766:	6090      	str	r0, [r2, #8]
    5768:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    576c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5770:	4c09      	ldr	r4, [pc, #36]	; (5798 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    5772:	6021      	str	r1, [r4, #0]
    5774:	1d25      	adds	r5, r4, #4
    5776:	6028      	str	r0, [r5, #0]
    5778:	6090      	str	r0, [r2, #8]
    577a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    577e:	6021      	str	r1, [r4, #0]
    5780:	6028      	str	r0, [r5, #0]
    5782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5786:	f7ff bf8d 	b.w	56a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    578a:	0000      	.short	0x0000
    578c:	4001e504 	.word	0x4001e504
    5790:	4000e000 	.word	0x4000e000
    5794:	4000f000 	.word	0x4000f000
    5798:	4000f500 	.word	0x4000f500

0000579c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    579c:	b570      	push	{r4, r5, r6, lr}
    579e:	4c0a      	ldr	r4, [pc, #40]	; (57c8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    57a0:	460d      	mov	r5, r1
    57a2:	6020      	str	r0, [r4, #0]
    57a4:	f7ff ffc4 	bl	5730 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    57a8:	6820      	ldr	r0, [r4, #0]
    57aa:	f7ff ff93 	bl	56d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    57ae:	f000 f883 	bl	58b8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    57b2:	f7ff ff77 	bl	56a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    57b6:	f008 fa3e 	bl	dc36 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    57ba:	4628      	mov	r0, r5
    57bc:	f000 f8b6 	bl	592c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    57c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    57c4:	f000 b8ce 	b.w	5964 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    57c8:	20000084 	.word	0x20000084

000057cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    57cc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d0:	4c36      	ldr	r4, [pc, #216]	; (58ac <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    57d2:	b082      	sub	sp, #8
    57d4:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    57d8:	2601      	movs	r6, #1
    57da:	4835      	ldr	r0, [pc, #212]	; (58b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    57dc:	f007 f80f 	bl	c7fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    57e0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 58b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    57e4:	b920      	cbnz	r0, 57f0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    57e6:	2600      	movs	r6, #0
    57e8:	f109 0001 	add.w	r0, r9, #1
    57ec:	f007 f81e 	bl	c82c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    57f0:	f44f 7580 	mov.w	r5, #256	; 0x100
    57f4:	f04f 0800 	mov.w	r8, #0
    57f8:	1d2f      	adds	r7, r5, #4
    57fa:	2101      	movs	r1, #1
    57fc:	6061      	str	r1, [r4, #4]
    57fe:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5802:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5806:	9802      	ldr	r0, [sp, #8]
    5808:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    580c:	6021      	str	r1, [r4, #0]
    580e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 58b4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    5812:	e01c      	b.n	584e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5814:	f8da 0000 	ldr.w	r0, [sl]
    5818:	06c0      	lsls	r0, r0, #27
    581a:	d518      	bpl.n	584e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    581c:	200e      	movs	r0, #14
    581e:	f008 f9f6 	bl	dc0e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    5822:	f3ef 8010 	mrs	r0, PRIMASK
    5826:	9000      	str	r0, [sp, #0]
    5828:	b672      	cpsid	i
    582a:	2103      	movs	r1, #3
    582c:	4620      	mov	r0, r4
    582e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    5832:	4629      	mov	r1, r5
    5834:	f008 f9f8 	bl	dc28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5838:	b930      	cbnz	r0, 5848 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    583a:	4639      	mov	r1, r7
    583c:	4620      	mov	r0, r4
    583e:	f008 f9f3 	bl	dc28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5842:	b908      	cbnz	r0, 5848 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    5844:	f7ff f89e 	bl	4984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5848:	9800      	ldr	r0, [sp, #0]
    584a:	b900      	cbnz	r0, 584e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    584c:	b662      	cpsie	i
    584e:	4629      	mov	r1, r5
    5850:	4620      	mov	r0, r4
    5852:	f008 f9e9 	bl	dc28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5856:	b928      	cbnz	r0, 5864 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    5858:	4639      	mov	r1, r7
    585a:	4620      	mov	r0, r4
    585c:	f008 f9e4 	bl	dc28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    5860:	2800      	cmp	r0, #0
    5862:	d0d7      	beq.n	5814 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    5864:	4639      	mov	r1, r7
    5866:	4620      	mov	r0, r4
    5868:	f008 f9de 	bl	dc28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    586c:	2800      	cmp	r0, #0
    586e:	d1c4      	bne.n	57fa <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    5870:	b136      	cbz	r6, 5880 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    5872:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    5876:	f109 0001 	add.w	r0, r9, #1
    587a:	f006 ffc0 	bl	c7fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    587e:	e012      	b.n	58a6 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    5880:	f109 0001 	add.w	r0, r9, #1
    5884:	f006 ffbb 	bl	c7fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5888:	2800      	cmp	r0, #0
    588a:	d1ad      	bne.n	57e8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    588c:	2003      	movs	r0, #3
    588e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    5892:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    5896:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    589a:	200e      	movs	r0, #14
    589c:	f008 f9b7 	bl	dc0e <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    58a0:	4803      	ldr	r0, [pc, #12]	; (58b0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    58a2:	f006 ffc3 	bl	c82c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    58a6:	2000      	movs	r0, #0
    58a8:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    58ac:	4000e000 	.word	0x4000e000
    58b0:	20000293 	.word	0x20000293
    58b4:	e000ed10 	.word	0xe000ed10

000058b8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    58b8:	b510      	push	{r4, lr}
    58ba:	4808      	ldr	r0, [pc, #32]	; (58dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    58bc:	f006 ffb2 	bl	c824 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    58c0:	b108      	cbz	r0, 58c6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    58c2:	2125      	movs	r1, #37	; 0x25
    58c4:	e006      	b.n	58d4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    58c6:	4805      	ldr	r0, [pc, #20]	; (58dc <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    58c8:	1c40      	adds	r0, r0, #1
    58ca:	f006 ffab 	bl	c824 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    58ce:	2800      	cmp	r0, #0
    58d0:	d003      	beq.n	58da <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    58d2:	2129      	movs	r1, #41	; 0x29
    58d4:	201d      	movs	r0, #29
    58d6:	f7ff f9db 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    58da:	bd10      	pop	{r4, pc}
    58dc:	20000293 	.word	0x20000293

000058e0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    58e0:	b570      	push	{r4, r5, r6, lr}
    58e2:	4911      	ldr	r1, [pc, #68]	; (5928 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    58e4:	680a      	ldr	r2, [r1, #0]
    58e6:	b1ea      	cbz	r2, 5924 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    58e8:	2300      	movs	r3, #0
    58ea:	461d      	mov	r5, r3
    58ec:	2401      	movs	r4, #1
    58ee:	684a      	ldr	r2, [r1, #4]
    58f0:	1c52      	adds	r2, r2, #1
    58f2:	604a      	str	r2, [r1, #4]
    58f4:	2a09      	cmp	r2, #9
    58f6:	d300      	bcc.n	58fa <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    58f8:	604d      	str	r5, [r1, #4]
    58fa:	790e      	ldrb	r6, [r1, #4]
    58fc:	fa04 f206 	lsl.w	r2, r4, r6
    5900:	680e      	ldr	r6, [r1, #0]
    5902:	4216      	tst	r6, r2
    5904:	d00b      	beq.n	591e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    5906:	f3ef 8310 	mrs	r3, PRIMASK
    590a:	b672      	cpsid	i
    590c:	680c      	ldr	r4, [r1, #0]
    590e:	4394      	bics	r4, r2
    5910:	600c      	str	r4, [r1, #0]
    5912:	b903      	cbnz	r3, 5916 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    5914:	b662      	cpsie	i
    5916:	6849      	ldr	r1, [r1, #4]
    5918:	6001      	str	r1, [r0, #0]
    591a:	2000      	movs	r0, #0
    591c:	bd70      	pop	{r4, r5, r6, pc}
    591e:	1c5b      	adds	r3, r3, #1
    5920:	2b09      	cmp	r3, #9
    5922:	d3e4      	bcc.n	58ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    5924:	2005      	movs	r0, #5
    5926:	bd70      	pop	{r4, r5, r6, pc}
    5928:	20000088 	.word	0x20000088

0000592c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    592c:	4802      	ldr	r0, [pc, #8]	; (5938 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    592e:	2100      	movs	r1, #0
    5930:	6001      	str	r1, [r0, #0]
    5932:	6041      	str	r1, [r0, #4]
    5934:	4770      	bx	lr
    5936:	0000      	.short	0x0000
    5938:	20000088 	.word	0x20000088

0000593c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    593c:	b510      	push	{r4, lr}
    593e:	4c08      	ldr	r4, [pc, #32]	; (5960 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5940:	7861      	ldrb	r1, [r4, #1]
    5942:	b109      	cbz	r1, 5948 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5944:	200f      	movs	r0, #15
    5946:	bd10      	pop	{r4, pc}
    5948:	f7fe ffa8 	bl	489c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    594c:	7020      	strb	r0, [r4, #0]
    594e:	28ff      	cmp	r0, #255	; 0xff
    5950:	d001      	beq.n	5956 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    5952:	2000      	movs	r0, #0
    5954:	bd10      	pop	{r4, pc}
    5956:	2176      	movs	r1, #118	; 0x76
    5958:	201f      	movs	r0, #31
    595a:	f7ff f999 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    595e:	0000      	.short	0x0000
    5960:	20000090 	.word	0x20000090

00005964 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5964:	4901      	ldr	r1, [pc, #4]	; (596c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5966:	2000      	movs	r0, #0
    5968:	7048      	strb	r0, [r1, #1]
    596a:	4770      	bx	lr
    596c:	20000090 	.word	0x20000090

00005970 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5970:	4806      	ldr	r0, [pc, #24]	; (598c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    5972:	4a07      	ldr	r2, [pc, #28]	; (5990 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5974:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5976:	8852      	ldrh	r2, [r2, #2]
    5978:	4291      	cmp	r1, r2
    597a:	d104      	bne.n	5986 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    597c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5980:	b108      	cbz	r0, 5986 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5982:	2000      	movs	r0, #0
    5984:	4770      	bx	lr
    5986:	2001      	movs	r0, #1
    5988:	4770      	bx	lr
    598a:	0000      	.short	0x0000
    598c:	200011c8 	.word	0x200011c8
    5990:	20000278 	.word	0x20000278

00005994 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5994:	4901      	ldr	r1, [pc, #4]	; (599c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5996:	8048      	strh	r0, [r1, #2]
    5998:	4770      	bx	lr
    599a:	0000      	.short	0x0000
    599c:	20000278 	.word	0x20000278

000059a0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    59a0:	4808      	ldr	r0, [pc, #32]	; (59c4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    59a2:	4a09      	ldr	r2, [pc, #36]	; (59c8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    59a4:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    59a6:	8852      	ldrh	r2, [r2, #2]
    59a8:	4291      	cmp	r1, r2
    59aa:	d109      	bne.n	59c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    59ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    59b0:	8481      	strh	r1, [r0, #36]	; 0x24
    59b2:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    59b6:	b119      	cbz	r1, 59c0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    59b8:	2100      	movs	r1, #0
    59ba:	7001      	strb	r1, [r0, #0]
    59bc:	2001      	movs	r0, #1
    59be:	4770      	bx	lr
    59c0:	2000      	movs	r0, #0
    59c2:	4770      	bx	lr
    59c4:	200011c8 	.word	0x200011c8
    59c8:	20000278 	.word	0x20000278

000059cc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    59cc:	4807      	ldr	r0, [pc, #28]	; (59ec <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    59ce:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    59d2:	2901      	cmp	r1, #1
    59d4:	d007      	beq.n	59e6 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    59d6:	2101      	movs	r1, #1
    59d8:	7001      	strb	r1, [r0, #0]
    59da:	4805      	ldr	r0, [pc, #20]	; (59f0 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    59dc:	4903      	ldr	r1, [pc, #12]	; (59ec <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    59de:	8800      	ldrh	r0, [r0, #0]
    59e0:	8488      	strh	r0, [r1, #36]	; 0x24
    59e2:	2001      	movs	r0, #1
    59e4:	4770      	bx	lr
    59e6:	2000      	movs	r0, #0
    59e8:	4770      	bx	lr
    59ea:	0000      	.short	0x0000
    59ec:	200011c8 	.word	0x200011c8
    59f0:	20000278 	.word	0x20000278

000059f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    59f4:	4906      	ldr	r1, [pc, #24]	; (5a10 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    59f6:	4b07      	ldr	r3, [pc, #28]	; (5a14 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    59f8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    59fa:	885b      	ldrh	r3, [r3, #2]
    59fc:	429a      	cmp	r2, r3
    59fe:	d105      	bne.n	5a0c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5a00:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a04:	b112      	cbz	r2, 5a0c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5a06:	6001      	str	r1, [r0, #0]
    5a08:	2001      	movs	r0, #1
    5a0a:	4770      	bx	lr
    5a0c:	2000      	movs	r0, #0
    5a0e:	4770      	bx	lr
    5a10:	200011c8 	.word	0x200011c8
    5a14:	20000278 	.word	0x20000278

00005a18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5a18:	4909      	ldr	r1, [pc, #36]	; (5a40 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5a1a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a1c:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5a20:	3bff      	subs	r3, #255	; 0xff
    5a22:	d002      	beq.n	5a2a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5a24:	2100      	movs	r1, #0
    5a26:	6001      	str	r1, [r0, #0]
    5a28:	e007      	b.n	5a3a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5a2a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5a2e:	4904      	ldr	r1, [pc, #16]	; (5a40 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5a30:	2a01      	cmp	r2, #1
    5a32:	d002      	beq.n	5a3a <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5a34:	6001      	str	r1, [r0, #0]
    5a36:	2001      	movs	r0, #1
    5a38:	4770      	bx	lr
    5a3a:	2000      	movs	r0, #0
    5a3c:	4770      	bx	lr
    5a3e:	0000      	.short	0x0000
    5a40:	200011c8 	.word	0x200011c8

00005a44 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5a44:	4901      	ldr	r1, [pc, #4]	; (5a4c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5a46:	8008      	strh	r0, [r1, #0]
    5a48:	4770      	bx	lr
    5a4a:	0000      	.short	0x0000
    5a4c:	20000278 	.word	0x20000278

00005a50 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5a50:	4905      	ldr	r1, [pc, #20]	; (5a68 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5a52:	2000      	movs	r0, #0
    5a54:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5a58:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5a5c:	8488      	strh	r0, [r1, #36]	; 0x24
    5a5e:	4903      	ldr	r1, [pc, #12]	; (5a6c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5a60:	8008      	strh	r0, [r1, #0]
    5a62:	8048      	strh	r0, [r1, #2]
    5a64:	4770      	bx	lr
    5a66:	0000      	.short	0x0000
    5a68:	200011c8 	.word	0x200011c8
    5a6c:	20000278 	.word	0x20000278
    5a70:	4905      	ldr	r1, [pc, #20]	; (5a88 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5a72:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a74:	4282      	cmp	r2, r0
    5a76:	d105      	bne.n	5a84 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5a78:	2000      	movs	r0, #0
    5a7a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5a7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5a82:	8488      	strh	r0, [r1, #36]	; 0x24
    5a84:	4770      	bx	lr
    5a86:	0000      	.short	0x0000
    5a88:	200011c8 	.word	0x200011c8

00005a8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5a8c:	4a0a      	ldr	r2, [pc, #40]	; (5ab8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5a8e:	b110      	cbz	r0, 5a96 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5a90:	2801      	cmp	r0, #1
    5a92:	d007      	beq.n	5aa4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5a94:	e00e      	b.n	5ab4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5a96:	7850      	ldrb	r0, [r2, #1]
    5a98:	b160      	cbz	r0, 5ab4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5a9a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5a9e:	6008      	str	r0, [r1, #0]
    5aa0:	88d0      	ldrh	r0, [r2, #6]
    5aa2:	e004      	b.n	5aae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5aa4:	7810      	ldrb	r0, [r2, #0]
    5aa6:	b128      	cbz	r0, 5ab4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5aa8:	6890      	ldr	r0, [r2, #8]
    5aaa:	6008      	str	r0, [r1, #0]
    5aac:	8990      	ldrh	r0, [r2, #12]
    5aae:	8088      	strh	r0, [r1, #4]
    5ab0:	2001      	movs	r0, #1
    5ab2:	4770      	bx	lr
    5ab4:	2000      	movs	r0, #0
    5ab6:	4770      	bx	lr
    5ab8:	20000295 	.word	0x20000295

00005abc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5abc:	4a08      	ldr	r2, [pc, #32]	; (5ae0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5abe:	2301      	movs	r3, #1
    5ac0:	b138      	cbz	r0, 5ad2 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5ac2:	2801      	cmp	r0, #1
    5ac4:	d104      	bne.n	5ad0 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5ac6:	7013      	strb	r3, [r2, #0]
    5ac8:	6808      	ldr	r0, [r1, #0]
    5aca:	6090      	str	r0, [r2, #8]
    5acc:	8888      	ldrh	r0, [r1, #4]
    5ace:	8190      	strh	r0, [r2, #12]
    5ad0:	4770      	bx	lr
    5ad2:	7053      	strb	r3, [r2, #1]
    5ad4:	6808      	ldr	r0, [r1, #0]
    5ad6:	f8c2 0002 	str.w	r0, [r2, #2]
    5ada:	8888      	ldrh	r0, [r1, #4]
    5adc:	80d0      	strh	r0, [r2, #6]
    5ade:	4770      	bx	lr
    5ae0:	20000295 	.word	0x20000295

00005ae4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5ae4:	4906      	ldr	r1, [pc, #24]	; (5b00 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5ae6:	b110      	cbz	r0, 5aee <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5ae8:	2801      	cmp	r0, #1
    5aea:	d002      	beq.n	5af2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5aec:	e005      	b.n	5afa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5aee:	7848      	ldrb	r0, [r1, #1]
    5af0:	e000      	b.n	5af4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5af2:	7808      	ldrb	r0, [r1, #0]
    5af4:	b108      	cbz	r0, 5afa <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5af6:	2001      	movs	r0, #1
    5af8:	4770      	bx	lr
    5afa:	2000      	movs	r0, #0
    5afc:	4770      	bx	lr
    5afe:	0000      	.short	0x0000
    5b00:	20000295 	.word	0x20000295

00005b04 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5b04:	4901      	ldr	r1, [pc, #4]	; (5b0c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5b06:	7448      	strb	r0, [r1, #17]
    5b08:	4770      	bx	lr
    5b0a:	0000      	.short	0x0000
    5b0c:	20000b22 	.word	0x20000b22

00005b10 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    5b10:	4801      	ldr	r0, [pc, #4]	; (5b18 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    5b12:	78c0      	ldrb	r0, [r0, #3]
    5b14:	4770      	bx	lr
    5b16:	0000      	.short	0x0000
    5b18:	200000ac 	.word	0x200000ac

00005b1c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    5b1c:	4801      	ldr	r0, [pc, #4]	; (5b24 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    5b1e:	7900      	ldrb	r0, [r0, #4]
    5b20:	4770      	bx	lr
    5b22:	0000      	.short	0x0000
    5b24:	200000ac 	.word	0x200000ac

00005b28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5b28:	b578      	push	{r3, r4, r5, r6, lr}
    5b2a:	4913      	ldr	r1, [pc, #76]	; (5b78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5b2c:	7c4a      	ldrb	r2, [r1, #17]
    5b2e:	b30a      	cbz	r2, 5b74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5b30:	7c0a      	ldrb	r2, [r1, #16]
    5b32:	f88d 2000 	strb.w	r2, [sp]
    5b36:	9a00      	ldr	r2, [sp, #0]
    5b38:	9200      	str	r2, [sp, #0]
    5b3a:	f89d 2000 	ldrb.w	r2, [sp]
    5b3e:	b1ca      	cbz	r2, 5b74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5b40:	2300      	movs	r3, #0
    5b42:	f101 0210 	add.w	r2, r1, #16
    5b46:	241a      	movs	r4, #26
    5b48:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5b4c:	7c0e      	ldrb	r6, [r1, #16]
    5b4e:	f88d 6000 	strb.w	r6, [sp]
    5b52:	9e00      	ldr	r6, [sp, #0]
    5b54:	9600      	str	r6, [sp, #0]
    5b56:	f89d 6000 	ldrb.w	r6, [sp]
    5b5a:	b14e      	cbz	r6, 5b70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5b5c:	7013      	strb	r3, [r2, #0]
    5b5e:	7043      	strb	r3, [r0, #1]
    5b60:	7004      	strb	r4, [r0, #0]
    5b62:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5b66:	6046      	str	r6, [r0, #4]
    5b68:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5b6c:	6086      	str	r6, [r0, #8]
    5b6e:	e7ed      	b.n	5b4c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5b70:	2001      	movs	r0, #1
    5b72:	bd78      	pop	{r3, r4, r5, r6, pc}
    5b74:	2000      	movs	r0, #0
    5b76:	bd78      	pop	{r3, r4, r5, r6, pc}
    5b78:	20000b22 	.word	0x20000b22

00005b7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5b7c:	b510      	push	{r4, lr}
    5b7e:	4604      	mov	r4, r0
    5b80:	f000 f956 	bl	5e30 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5b84:	b118      	cbz	r0, 5b8e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5b86:	21bd      	movs	r1, #189	; 0xbd
    5b88:	2027      	movs	r0, #39	; 0x27
    5b8a:	f7ff f881 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b8e:	4803      	ldr	r0, [pc, #12]	; (5b9c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5b90:	2101      	movs	r1, #1
    5b92:	f008 fc18 	bl	e3c6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5b96:	4802      	ldr	r0, [pc, #8]	; (5ba0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5b98:	62c4      	str	r4, [r0, #44]	; 0x2c
    5b9a:	bd10      	pop	{r4, pc}
    5b9c:	20000b00 	.word	0x20000b00
    5ba0:	200000ac 	.word	0x200000ac

00005ba4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5ba4:	4901      	ldr	r1, [pc, #4]	; (5bac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5ba6:	2001      	movs	r0, #1
    5ba8:	7188      	strb	r0, [r1, #6]
    5baa:	4770      	bx	lr
    5bac:	200000ac 	.word	0x200000ac

00005bb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bb4:	4d5f      	ldr	r5, [pc, #380]	; (5d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>)
    5bb6:	9c08      	ldr	r4, [sp, #32]
    5bb8:	782e      	ldrb	r6, [r5, #0]
    5bba:	2e00      	cmp	r6, #0
    5bbc:	d16b      	bne.n	5c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bbe:	2a00      	cmp	r2, #0
    5bc0:	d069      	beq.n	5c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d067      	beq.n	5c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bc6:	2c00      	cmp	r4, #0
    5bc8:	d065      	beq.n	5c96 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    5bca:	f105 0614 	add.w	r6, r5, #20
    5bce:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5bd2:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5bd6:	2700      	movs	r7, #0
    5bd8:	71af      	strb	r7, [r5, #6]
    5bda:	716f      	strb	r7, [r5, #5]
    5bdc:	70ef      	strb	r7, [r5, #3]
    5bde:	70af      	strb	r7, [r5, #2]
    5be0:	712f      	strb	r7, [r5, #4]
    5be2:	81af      	strh	r7, [r5, #12]
    5be4:	81ef      	strh	r7, [r5, #14]
    5be6:	f000 f95b 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5bea:	4606      	mov	r6, r0
    5bec:	f000 f952 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5bf0:	4604      	mov	r4, r0
    5bf2:	f006 f825 	bl	bc40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5bf6:	f005 fcb9 	bl	b56c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5bfa:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5bfe:	f006 f8a5 	bl	bd4c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5c02:	f104 0018 	add.w	r0, r4, #24
    5c06:	f006 f97f 	bl	bf08 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5c0a:	6920      	ldr	r0, [r4, #16]
    5c0c:	f006 f972 	bl	bef4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5c10:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5c14:	f006 f996 	bl	bf44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5c18:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5c1c:	6840      	ldr	r0, [r0, #4]
    5c1e:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    5c22:	b108      	cbz	r0, 5c28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    5c24:	f005 ff56 	bl	bad4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    5c28:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5c2c:	2001      	movs	r0, #1
    5c2e:	f005 fe81 	bl	b934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5c32:	2800      	cmp	r0, #0
    5c34:	d076      	beq.n	5d24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x174>
    5c36:	4840      	ldr	r0, [pc, #256]	; (5d38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>)
    5c38:	f005 fef8 	bl	ba2c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5c3c:	8820      	ldrh	r0, [r4, #0]
    5c3e:	f7ff fc57 	bl	54f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5c42:	6328      	str	r0, [r5, #48]	; 0x30
    5c44:	8820      	ldrh	r0, [r4, #0]
    5c46:	f7ff fc3d 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5c4a:	f106 0160 	add.w	r1, r6, #96	; 0x60
    5c4e:	6368      	str	r0, [r5, #52]	; 0x34
    5c50:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 5d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    5c54:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5c58:	f109 0808 	add.w	r8, r9, #8
    5c5c:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5c60:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5c62:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5c66:	6f71      	ldr	r1, [r6, #116]	; 0x74
    5c68:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5c6c:	f000 f98a 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5c70:	4601      	mov	r1, r0
    5c72:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5c74:	46ba      	mov	sl, r7
    5c76:	f008 f93e 	bl	def6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5c7a:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5c7c:	4281      	cmp	r1, r0
    5c7e:	d200      	bcs.n	5c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    5c80:	4608      	mov	r0, r1
    5c82:	7228      	strb	r0, [r5, #8]
    5c84:	46a8      	mov	r8, r5
    5c86:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5c8a:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5c8c:	7cf7      	ldrb	r7, [r6, #19]
    5c8e:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5c90:	2908      	cmp	r1, #8
    5c92:	d104      	bne.n	5c9e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    5c94:	e002      	b.n	5c9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    5c96:	f44f 718a 	mov.w	r1, #276	; 0x114
    5c9a:	e047      	b.n	5d2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x17c>
    5c9c:	2104      	movs	r1, #4
    5c9e:	f008 f92a 	bl	def6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5ca2:	b90f      	cbnz	r7, 5ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    5ca4:	1d00      	adds	r0, r0, #4
    5ca6:	b280      	uxth	r0, r0
    5ca8:	4285      	cmp	r5, r0
    5caa:	d200      	bcs.n	5cae <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    5cac:	4628      	mov	r0, r5
    5cae:	b2c5      	uxtb	r5, r0
    5cb0:	f888 5009 	strb.w	r5, [r8, #9]
    5cb4:	7cf1      	ldrb	r1, [r6, #19]
    5cb6:	2900      	cmp	r1, #0
    5cb8:	d002      	beq.n	5cc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5cba:	bf00      	nop
    5cbc:	f04f 0104 	mov.w	r1, #4
    5cc0:	4429      	add	r1, r5
    5cc2:	f888 1007 	strb.w	r1, [r8, #7]
    5cc6:	4657      	mov	r7, sl
    5cc8:	d016      	beq.n	5cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x148>
    5cca:	481c      	ldr	r0, [pc, #112]	; (5d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5ccc:	f04f 0101 	mov.w	r1, #1
    5cd0:	f100 0008 	add.w	r0, r0, #8
    5cd4:	7601      	strb	r1, [r0, #24]
    5cd6:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5cda:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5cde:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5ce2:	f008 f80e 	bl	dd02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    5ce6:	4915      	ldr	r1, [pc, #84]	; (5d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5ce8:	4603      	mov	r3, r0
    5cea:	462a      	mov	r2, r5
    5cec:	3108      	adds	r1, #8
    5cee:	2001      	movs	r0, #1
    5cf0:	f005 fc86 	bl	b600 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5cf4:	f005 fcba 	bl	b66c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5cf8:	2001      	movs	r0, #1
    5cfa:	f000 fb73 	bl	63e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5cfe:	4810      	ldr	r0, [pc, #64]	; (5d40 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    5d00:	6800      	ldr	r0, [r0, #0]
    5d02:	2803      	cmp	r0, #3
    5d04:	d010      	beq.n	5d28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    5d06:	280b      	cmp	r0, #11
    5d08:	d00e      	beq.n	5d28 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x178>
    5d0a:	4648      	mov	r0, r9
    5d0c:	f840 7f52 	str.w	r7, [r0, #82]!
    5d10:	6047      	str	r7, [r0, #4]
    5d12:	480a      	ldr	r0, [pc, #40]	; (5d3c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>)
    5d14:	88b1      	ldrh	r1, [r6, #4]
    5d16:	3052      	adds	r0, #82	; 0x52
    5d18:	8041      	strh	r1, [r0, #2]
    5d1a:	8821      	ldrh	r1, [r4, #0]
    5d1c:	8001      	strh	r1, [r0, #0]
    5d1e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5d22:	7101      	strb	r1, [r0, #4]
    5d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d28:	f240 11c1 	movw	r1, #449	; 0x1c1
    5d2c:	2027      	movs	r0, #39	; 0x27
    5d2e:	f7fe ffaf 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d32:	0000      	.short	0x0000
    5d34:	200000ac 	.word	0x200000ac
    5d38:	000065e8 	.word	0x000065e8
    5d3c:	20000ad0 	.word	0x20000ad0
    5d40:	40001550 	.word	0x40001550

00005d44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d48:	4605      	mov	r5, r0
    5d4a:	f000 f8a9 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5d4e:	4e33      	ldr	r6, [pc, #204]	; (5e1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5d50:	4604      	mov	r4, r0
    5d52:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5d54:	7847      	ldrb	r7, [r0, #1]
    5d56:	b10d      	cbz	r5, 5d5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5d58:	2d01      	cmp	r5, #1
    5d5a:	d103      	bne.n	5d64 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5d5c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5d5e:	f006 ff50 	bl	cc02 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5d62:	7070      	strb	r0, [r6, #1]
    5d64:	7870      	ldrb	r0, [r6, #1]
    5d66:	f04f 0800 	mov.w	r8, #0
    5d6a:	f04f 0901 	mov.w	r9, #1
    5d6e:	b150      	cbz	r0, 5d86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5d70:	2801      	cmp	r0, #1
    5d72:	d01a      	beq.n	5daa <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5d74:	2802      	cmp	r0, #2
    5d76:	d034      	beq.n	5de2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5d78:	2803      	cmp	r0, #3
    5d7a:	d048      	beq.n	5e0e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5d7c:	f240 4115 	movw	r1, #1045	; 0x415
    5d80:	2027      	movs	r0, #39	; 0x27
    5d82:	f7fe ff85 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d86:	2d01      	cmp	r5, #1
    5d88:	d032      	beq.n	5df0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5d8a:	f000 f8e7 	bl	5f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5d8e:	4639      	mov	r1, r7
    5d90:	2201      	movs	r2, #1
    5d92:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d94:	f007 fb5c 	bl	d450 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5d98:	e028      	b.n	5dec <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5d9a:	bf00      	nop
    5d9c:	f884 8008 	strb.w	r8, [r4, #8]
    5da0:	e031      	b.n	5e06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5da2:	bf00      	nop
    5da4:	f884 9008 	strb.w	r9, [r4, #8]
    5da8:	e02d      	b.n	5e06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5daa:	2d01      	cmp	r5, #1
    5dac:	d008      	beq.n	5dc0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5dae:	f000 f8d5 	bl	5f5c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    5db2:	4639      	mov	r1, r7
    5db4:	2200      	movs	r2, #0
    5db6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5db8:	f007 fb4a 	bl	d450 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5dbc:	2d02      	cmp	r5, #2
    5dbe:	d00b      	beq.n	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5dc0:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5dc4:	1c40      	adds	r0, r0, #1
    5dc6:	f141 0100 	adc.w	r1, r1, #0
    5dca:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5dce:	7a20      	ldrb	r0, [r4, #8]
    5dd0:	2801      	cmp	r0, #1
    5dd2:	d003      	beq.n	5ddc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5dd4:	f884 9008 	strb.w	r9, [r4, #8]
    5dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ddc:	f884 8008 	strb.w	r8, [r4, #8]
    5de0:	e7fa      	b.n	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5de2:	2d01      	cmp	r5, #1
    5de4:	d004      	beq.n	5df0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5de6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5de8:	f007 fd43 	bl	d872 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5dec:	2d02      	cmp	r5, #2
    5dee:	d0f3      	beq.n	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5df0:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5df4:	1c40      	adds	r0, r0, #1
    5df6:	f141 0100 	adc.w	r1, r1, #0
    5dfa:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5dfe:	7a20      	ldrb	r0, [r4, #8]
    5e00:	2801      	cmp	r0, #1
    5e02:	d1cf      	bne.n	5da4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5e04:	e7ca      	b.n	5d9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5e06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e0a:	f001 b8cd 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e0e:	2d01      	cmp	r5, #1
    5e10:	d0e2      	beq.n	5dd8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5e12:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e14:	f007 fd2d 	bl	d872 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5e18:	e7f5      	b.n	5e06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5e1a:	0000      	.short	0x0000
    5e1c:	200000ac 	.word	0x200000ac

00005e20 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    5e20:	4802      	ldr	r0, [pc, #8]	; (5e2c <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    5e22:	89c0      	ldrh	r0, [r0, #14]
    5e24:	f3c0 2080 	ubfx	r0, r0, #10, #1
    5e28:	4770      	bx	lr
    5e2a:	0000      	.short	0x0000
    5e2c:	200000ac 	.word	0x200000ac

00005e30 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5e30:	4804      	ldr	r0, [pc, #16]	; (5e44 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5e32:	7800      	ldrb	r0, [r0, #0]
    5e34:	b108      	cbz	r0, 5e3a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5e36:	200c      	movs	r0, #12
    5e38:	4770      	bx	lr
    5e3a:	4903      	ldr	r1, [pc, #12]	; (5e48 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5e3c:	2000      	movs	r0, #0
    5e3e:	7448      	strb	r0, [r1, #17]
    5e40:	4770      	bx	lr
    5e42:	0000      	.short	0x0000
    5e44:	200000ac 	.word	0x200000ac
    5e48:	20000b22 	.word	0x20000b22

00005e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5e4c:	480c      	ldr	r0, [pc, #48]	; (5e80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    5e4e:	b510      	push	{r4, lr}
    5e50:	7801      	ldrb	r1, [r0, #0]
    5e52:	b149      	cbz	r1, 5e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5e54:	f100 0138 	add.w	r1, r0, #56	; 0x38
    5e58:	7800      	ldrb	r0, [r0, #0]
    5e5a:	2802      	cmp	r0, #2
    5e5c:	d008      	beq.n	5e70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    5e5e:	f240 11dd 	movw	r1, #477	; 0x1dd
    5e62:	2027      	movs	r0, #39	; 0x27
    5e64:	f7fe ff14 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e6c:	f000 b9d8 	b.w	6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5e70:	6848      	ldr	r0, [r1, #4]
    5e72:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    5e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e7a:	f005 bddf 	b.w	ba3c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    5e7e:	0000      	.short	0x0000
    5e80:	200000ac 	.word	0x200000ac
    5e84:	4a02      	ldr	r2, [pc, #8]	; (5e90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    5e86:	8993      	ldrh	r3, [r2, #12]
    5e88:	4303      	orrs	r3, r0
    5e8a:	8193      	strh	r3, [r2, #12]
    5e8c:	6952      	ldr	r2, [r2, #20]
    5e8e:	4710      	bx	r2
    5e90:	200000ac 	.word	0x200000ac
    5e94:	4801      	ldr	r0, [pc, #4]	; (5e9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    5e96:	6840      	ldr	r0, [r0, #4]
    5e98:	4770      	bx	lr
    5e9a:	0000      	.short	0x0000
    5e9c:	200000e4 	.word	0x200000e4
    5ea0:	4801      	ldr	r0, [pc, #4]	; (5ea8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5ea2:	6840      	ldr	r0, [r0, #4]
    5ea4:	3070      	adds	r0, #112	; 0x70
    5ea6:	4770      	bx	lr
    5ea8:	200000e4 	.word	0x200000e4
    5eac:	4a01      	ldr	r2, [pc, #4]	; (5eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5eae:	2100      	movs	r1, #0
    5eb0:	6952      	ldr	r2, [r2, #20]
    5eb2:	4710      	bx	r2
    5eb4:	200000ac 	.word	0x200000ac
    5eb8:	b570      	push	{r4, r5, r6, lr}
    5eba:	f7ff fff1 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ebe:	4604      	mov	r4, r0
    5ec0:	f7ff ffe8 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5ec4:	4605      	mov	r5, r0
    5ec6:	4621      	mov	r1, r4
    5ec8:	f008 f898 	bl	dffc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5ecc:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5ed0:	2901      	cmp	r1, #1
    5ed2:	d114      	bne.n	5efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5ed4:	2800      	cmp	r0, #0
    5ed6:	d012      	beq.n	5efe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    5ed8:	4809      	ldr	r0, [pc, #36]	; (5f00 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    5eda:	6842      	ldr	r2, [r0, #4]
    5edc:	8828      	ldrh	r0, [r5, #0]
    5ede:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    5ee2:	7a60      	ldrb	r0, [r4, #9]
    5ee4:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    5ee8:	7aa0      	ldrb	r0, [r4, #10]
    5eea:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    5eee:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    5ef2:	2001      	movs	r0, #1
    5ef4:	7010      	strb	r0, [r2, #0]
    5ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5efa:	f001 b855 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5efe:	bd70      	pop	{r4, r5, r6, pc}
    5f00:	200000e4 	.word	0x200000e4
    5f04:	b570      	push	{r4, r5, r6, lr}
    5f06:	4605      	mov	r5, r0
    5f08:	2901      	cmp	r1, #1
    5f0a:	d818      	bhi.n	5f3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f0c:	4c12      	ldr	r4, [pc, #72]	; (5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    5f0e:	69a1      	ldr	r1, [r4, #24]
    5f10:	4788      	blx	r1
    5f12:	b1a0      	cbz	r0, 5f3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f14:	7960      	ldrb	r0, [r4, #5]
    5f16:	b990      	cbnz	r0, 5f3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f18:	b9e5      	cbnz	r5, 5f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5f1a:	f104 0010 	add.w	r0, r4, #16
    5f1e:	7801      	ldrb	r1, [r0, #0]
    5f20:	06c8      	lsls	r0, r1, #27
    5f22:	d405      	bmi.n	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5f24:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5f26:	7800      	ldrb	r0, [r0, #0]
    5f28:	06c0      	lsls	r0, r0, #27
    5f2a:	d401      	bmi.n	5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    5f2c:	2001      	movs	r0, #1
    5f2e:	e000      	b.n	5f32 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    5f30:	2000      	movs	r0, #0
    5f32:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5f34:	b92a      	cbnz	r2, 5f42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f36:	8962      	ldrh	r2, [r4, #10]
    5f38:	b11a      	cbz	r2, 5f42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f3a:	06c9      	lsls	r1, r1, #27
    5f3c:	d401      	bmi.n	5f42 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    5f3e:	2001      	movs	r0, #1
    5f40:	bd70      	pop	{r4, r5, r6, pc}
    5f42:	89a1      	ldrh	r1, [r4, #12]
    5f44:	078a      	lsls	r2, r1, #30
    5f46:	d503      	bpl.n	5f50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    5f48:	6a22      	ldr	r2, [r4, #32]
    5f4a:	78d2      	ldrb	r2, [r2, #3]
    5f4c:	2a02      	cmp	r2, #2
    5f4e:	d001      	beq.n	5f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    5f50:	4308      	orrs	r0, r1
    5f52:	d1f4      	bne.n	5f3e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    5f54:	2000      	movs	r0, #0
    5f56:	bd70      	pop	{r4, r5, r6, pc}
    5f58:	200000ac 	.word	0x200000ac
    5f5c:	b510      	push	{r4, lr}
    5f5e:	4c08      	ldr	r4, [pc, #32]	; (5f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    5f60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5f62:	b138      	cbz	r0, 5f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    5f64:	8962      	ldrh	r2, [r4, #10]
    5f66:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5f68:	1cd2      	adds	r2, r2, #3
    5f6a:	f006 fcf1 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5f6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5f70:	6260      	str	r0, [r4, #36]	; 0x24
    5f72:	bd10      	pop	{r4, pc}
    5f74:	f240 415b 	movw	r1, #1115	; 0x45b
    5f78:	2027      	movs	r0, #39	; 0x27
    5f7a:	f7fe fe89 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f7e:	0000      	.short	0x0000
    5f80:	200000ac 	.word	0x200000ac
    5f84:	b510      	push	{r4, lr}
    5f86:	f7ff ff85 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5f8a:	4604      	mov	r4, r0
    5f8c:	f7ff ff88 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5f90:	4601      	mov	r1, r0
    5f92:	7b42      	ldrb	r2, [r0, #13]
    5f94:	4815      	ldr	r0, [pc, #84]	; (5fec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    5f96:	2a24      	cmp	r2, #36	; 0x24
    5f98:	d00e      	beq.n	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5f9a:	7b89      	ldrb	r1, [r1, #14]
    5f9c:	2924      	cmp	r1, #36	; 0x24
    5f9e:	d00b      	beq.n	5fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5fa0:	2a1f      	cmp	r2, #31
    5fa2:	d00d      	beq.n	5fc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5fa4:	2a20      	cmp	r2, #32
    5fa6:	d00b      	beq.n	5fc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    5fa8:	2922      	cmp	r1, #34	; 0x22
    5faa:	d00f      	beq.n	5fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5fac:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5fb0:	2804      	cmp	r0, #4
    5fb2:	d100      	bne.n	5fb6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    5fb4:	2008      	movs	r0, #8
    5fb6:	bd10      	pop	{r4, pc}
    5fb8:	6840      	ldr	r0, [r0, #4]
    5fba:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    5fbe:	e00e      	b.n	5fde <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    5fc0:	2922      	cmp	r1, #34	; 0x22
    5fc2:	d003      	beq.n	5fcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    5fc4:	6840      	ldr	r0, [r0, #4]
    5fc6:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    5fca:	e005      	b.n	5fd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    5fcc:	6841      	ldr	r1, [r0, #4]
    5fce:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    5fd2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    5fd6:	4008      	ands	r0, r1
    5fd8:	f007 fe89 	bl	dcee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5fdc:	4601      	mov	r1, r0
    5fde:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5fe2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5fe6:	f007 be9a 	b.w	dd1e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5fea:	0000      	.short	0x0000
    5fec:	200000e4 	.word	0x200000e4
    5ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ff4:	4688      	mov	r8, r1
    5ff6:	4607      	mov	r7, r0
    5ff8:	f7ff ff52 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5ffc:	4c57      	ldr	r4, [pc, #348]	; (615c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    5ffe:	2600      	movs	r6, #0
    6000:	4605      	mov	r5, r0
    6002:	f88d 6000 	strb.w	r6, [sp]
    6006:	7820      	ldrb	r0, [r4, #0]
    6008:	2802      	cmp	r0, #2
    600a:	d004      	beq.n	6016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    600c:	f240 41ba 	movw	r1, #1210	; 0x4ba
    6010:	2027      	movs	r0, #39	; 0x27
    6012:	f7fe fe3d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6016:	7ba0      	ldrb	r0, [r4, #14]
    6018:	0640      	lsls	r0, r0, #25
    601a:	d406      	bmi.n	602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    601c:	2040      	movs	r0, #64	; 0x40
    601e:	f7ff ff45 	bl	5eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6022:	89e0      	ldrh	r0, [r4, #14]
    6024:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    6028:	81e0      	strh	r0, [r4, #14]
    602a:	7ce8      	ldrb	r0, [r5, #19]
    602c:	b3c7      	cbz	r7, 60a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    602e:	f005 fb4d 	bl	b6cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    6032:	f005 fb31 	bl	b698 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    6036:	b968      	cbnz	r0, 6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6038:	7ce8      	ldrb	r0, [r5, #19]
    603a:	b158      	cbz	r0, 6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    603c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    603e:	7841      	ldrb	r1, [r0, #1]
    6040:	b141      	cbz	r1, 6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    6042:	7800      	ldrb	r0, [r0, #0]
    6044:	7a29      	ldrb	r1, [r5, #8]
    6046:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    604a:	4288      	cmp	r0, r1
    604c:	d102      	bne.n	6054 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    604e:	2001      	movs	r0, #1
    6050:	70a0      	strb	r0, [r4, #2]
    6052:	e063      	b.n	611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    6054:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6056:	7841      	ldrb	r1, [r0, #1]
    6058:	8161      	strh	r1, [r4, #10]
    605a:	b121      	cbz	r1, 6066 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    605c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    605e:	f007 fbd5 	bl	d80c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6062:	62a0      	str	r0, [r4, #40]	; 0x28
    6064:	e000      	b.n	6068 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    6066:	62a6      	str	r6, [r4, #40]	; 0x28
    6068:	89e0      	ldrh	r0, [r4, #14]
    606a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    606e:	81e0      	strh	r0, [r4, #14]
    6070:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6072:	79e9      	ldrb	r1, [r5, #7]
    6074:	7800      	ldrb	r0, [r0, #0]
    6076:	f3c0 0080 	ubfx	r0, r0, #2, #1
    607a:	4288      	cmp	r0, r1
    607c:	d005      	beq.n	608a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    607e:	f000 f963 	bl	6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    6082:	89e0      	ldrh	r0, [r4, #14]
    6084:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6088:	81e0      	strh	r0, [r4, #14]
    608a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    608c:	7a29      	ldrb	r1, [r5, #8]
    608e:	7800      	ldrb	r0, [r0, #0]
    6090:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6094:	4288      	cmp	r0, r1
    6096:	d10e      	bne.n	60b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    6098:	4668      	mov	r0, sp
    609a:	f000 f917 	bl	62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    609e:	e00a      	b.n	60b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    60a0:	e7ff      	b.n	60a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    60a2:	b108      	cbz	r0, 60a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    60a4:	f005 fb0c 	bl	b6c0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    60a8:	78e0      	ldrb	r0, [r4, #3]
    60aa:	1c40      	adds	r0, r0, #1
    60ac:	70e0      	strb	r0, [r4, #3]
    60ae:	89e0      	ldrh	r0, [r4, #14]
    60b0:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    60b4:	81e0      	strh	r0, [r4, #14]
    60b6:	7ca8      	ldrb	r0, [r5, #18]
    60b8:	b198      	cbz	r0, 60e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    60ba:	f7ff feeb 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    60be:	4928      	ldr	r1, [pc, #160]	; (6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    60c0:	760e      	strb	r6, [r1, #24]
    60c2:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    60c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    60ca:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    60ce:	f007 fe18 	bl	dd02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    60d2:	4603      	mov	r3, r0
    60d4:	22fb      	movs	r2, #251	; 0xfb
    60d6:	4922      	ldr	r1, [pc, #136]	; (6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    60d8:	2000      	movs	r0, #0
    60da:	f005 fa91 	bl	b600 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    60de:	f005 fac5 	bl	b66c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    60e2:	4d1f      	ldr	r5, [pc, #124]	; (6160 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    60e4:	354a      	adds	r5, #74	; 0x4a
    60e6:	f1b8 0f00 	cmp.w	r8, #0
    60ea:	d104      	bne.n	60f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    60ec:	78e1      	ldrb	r1, [r4, #3]
    60ee:	2001      	movs	r0, #1
    60f0:	f7ff ff08 	bl	5f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    60f4:	b1b0      	cbz	r0, 6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    60f6:	f005 fed9 	bl	beac <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    60fa:	f89d 0000 	ldrb.w	r0, [sp]
    60fe:	b110      	cbz	r0, 6106 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6100:	2000      	movs	r0, #0
    6102:	f7ff fe1f 	bl	5d44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6106:	b137      	cbz	r7, 6116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    6108:	70e6      	strb	r6, [r4, #3]
    610a:	7968      	ldrb	r0, [r5, #5]
    610c:	1c40      	adds	r0, r0, #1
    610e:	7168      	strb	r0, [r5, #5]
    6110:	f7ff fed2 	bl	5eb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6114:	e002      	b.n	611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    6116:	79a8      	ldrb	r0, [r5, #6]
    6118:	1c40      	adds	r0, r0, #1
    611a:	71a8      	strb	r0, [r5, #6]
    611c:	f000 f880 	bl	6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    6120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6124:	f89d 0000 	ldrb.w	r0, [sp]
    6128:	b110      	cbz	r0, 6130 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    612a:	2001      	movs	r0, #1
    612c:	f7ff fe0a 	bl	5d44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6130:	2000      	movs	r0, #0
    6132:	f000 f995 	bl	6460 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    6136:	f89d 0000 	ldrb.w	r0, [sp]
    613a:	b110      	cbz	r0, 6142 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    613c:	2002      	movs	r0, #2
    613e:	f7ff fe01 	bl	5d44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6142:	b137      	cbz	r7, 6152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    6144:	70e6      	strb	r6, [r4, #3]
    6146:	7968      	ldrb	r0, [r5, #5]
    6148:	1c40      	adds	r0, r0, #1
    614a:	7168      	strb	r0, [r5, #5]
    614c:	f7ff feb4 	bl	5eb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6150:	e7e6      	b.n	6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    6152:	79a8      	ldrb	r0, [r5, #6]
    6154:	1c40      	adds	r0, r0, #1
    6156:	71a8      	strb	r0, [r5, #6]
    6158:	e7e2      	b.n	6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    615a:	0000      	.short	0x0000
    615c:	200000ac 	.word	0x200000ac
    6160:	20000ad8 	.word	0x20000ad8
    6164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6168:	460f      	mov	r7, r1
    616a:	4680      	mov	r8, r0
    616c:	f7ff fe98 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    6170:	4d29      	ldr	r5, [pc, #164]	; (6218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    6172:	4604      	mov	r4, r0
    6174:	7828      	ldrb	r0, [r5, #0]
    6176:	2801      	cmp	r0, #1
    6178:	d004      	beq.n	6184 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    617a:	f240 416a 	movw	r1, #1130	; 0x46a
    617e:	2027      	movs	r0, #39	; 0x27
    6180:	f7fe fd86 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6184:	7861      	ldrb	r1, [r4, #1]
    6186:	2000      	movs	r0, #0
    6188:	2601      	movs	r6, #1
    618a:	b129      	cbz	r1, 6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    618c:	7060      	strb	r0, [r4, #1]
    618e:	2100      	movs	r1, #0
    6190:	2004      	movs	r0, #4
    6192:	f7ff fe77 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6196:	70e6      	strb	r6, [r4, #3]
    6198:	6a29      	ldr	r1, [r5, #32]
    619a:	7808      	ldrb	r0, [r1, #0]
    619c:	43c0      	mvns	r0, r0
    619e:	0780      	lsls	r0, r0, #30
    61a0:	d109      	bne.n	61b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    61a2:	79a0      	ldrb	r0, [r4, #6]
    61a4:	bb88      	cbnz	r0, 620a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    61a6:	2002      	movs	r0, #2
    61a8:	f7ff fe6c 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    61ac:	6a28      	ldr	r0, [r5, #32]
    61ae:	7800      	ldrb	r0, [r0, #0]
    61b0:	43c0      	mvns	r0, r0
    61b2:	0780      	lsls	r0, r0, #30
    61b4:	d029      	beq.n	620a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    61b6:	6a28      	ldr	r0, [r5, #32]
    61b8:	7840      	ldrb	r0, [r0, #1]
    61ba:	b110      	cbz	r0, 61c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    61bc:	2002      	movs	r0, #2
    61be:	71a0      	strb	r0, [r4, #6]
    61c0:	e000      	b.n	61c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    61c2:	71a6      	strb	r6, [r4, #6]
    61c4:	7ce0      	ldrb	r0, [r4, #19]
    61c6:	b1a0      	cbz	r0, 61f2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    61c8:	f7ff fe64 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    61cc:	4913      	ldr	r1, [pc, #76]	; (621c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    61ce:	7a6d      	ldrb	r5, [r5, #9]
    61d0:	760e      	strb	r6, [r1, #24]
    61d2:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    61d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    61da:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    61de:	f007 fd90 	bl	dd02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    61e2:	4603      	mov	r3, r0
    61e4:	462a      	mov	r2, r5
    61e6:	490d      	ldr	r1, [pc, #52]	; (621c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    61e8:	2001      	movs	r0, #1
    61ea:	f005 fa09 	bl	b600 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    61ee:	f005 fa3d 	bl	b66c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    61f2:	ea37 0708 	bics.w	r7, r7, r8
    61f6:	d004      	beq.n	6202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    61f8:	2100      	movs	r1, #0
    61fa:	4608      	mov	r0, r1
    61fc:	f7ff fe82 	bl	5f04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    6200:	b128      	cbz	r0, 620e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    6202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6206:	f000 b80b 	b.w	6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    620a:	2003      	movs	r0, #3
    620c:	e7d7      	b.n	61be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    620e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6212:	2000      	movs	r0, #0
    6214:	f000 b8e6 	b.w	63e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    6218:	200000ac 	.word	0x200000ac
    621c:	20000ad8 	.word	0x20000ad8
    6220:	b510      	push	{r4, lr}
    6222:	f005 faeb 	bl	b7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6226:	f005 f9a1 	bl	b56c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    622a:	4c0d      	ldr	r4, [pc, #52]	; (6260 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    622c:	89e0      	ldrh	r0, [r4, #14]
    622e:	f7ff fe3d 	bl	5eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6232:	69e2      	ldr	r2, [r4, #28]
    6234:	7961      	ldrb	r1, [r4, #5]
    6236:	78a0      	ldrb	r0, [r4, #2]
    6238:	4790      	blx	r2
    623a:	480a      	ldr	r0, [pc, #40]	; (6264 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    623c:	7c40      	ldrb	r0, [r0, #17]
    623e:	b158      	cbz	r0, 6258 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    6240:	4808      	ldr	r0, [pc, #32]	; (6264 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6242:	3852      	subs	r0, #82	; 0x52
    6244:	f850 1f52 	ldr.w	r1, [r0, #82]!
    6248:	6081      	str	r1, [r0, #8]
    624a:	6841      	ldr	r1, [r0, #4]
    624c:	60c1      	str	r1, [r0, #12]
    624e:	4805      	ldr	r0, [pc, #20]	; (6264 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    6250:	2101      	movs	r1, #1
    6252:	7401      	strb	r1, [r0, #16]
    6254:	f000 fea8 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6258:	2000      	movs	r0, #0
    625a:	7020      	strb	r0, [r4, #0]
    625c:	bd10      	pop	{r4, pc}
    625e:	0000      	.short	0x0000
    6260:	200000ac 	.word	0x200000ac
    6264:	20000b22 	.word	0x20000b22
    6268:	4808      	ldr	r0, [pc, #32]	; (628c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    626a:	b510      	push	{r4, lr}
    626c:	7800      	ldrb	r0, [r0, #0]
    626e:	2802      	cmp	r0, #2
    6270:	d004      	beq.n	627c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    6272:	f240 2111 	movw	r1, #529	; 0x211
    6276:	2027      	movs	r0, #39	; 0x27
    6278:	f7fe fd0a 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    627c:	4904      	ldr	r1, [pc, #16]	; (6290 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    627e:	2001      	movs	r0, #1
    6280:	71c8      	strb	r0, [r1, #7]
    6282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6286:	f7ff bfcb 	b.w	6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    628a:	0000      	.short	0x0000
    628c:	200000ac 	.word	0x200000ac
    6290:	20000b22 	.word	0x20000b22
    6294:	b430      	push	{r4, r5}
    6296:	4b0c      	ldr	r3, [pc, #48]	; (62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    6298:	b942      	cbnz	r2, 62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    629a:	79da      	ldrb	r2, [r3, #7]
    629c:	2aff      	cmp	r2, #255	; 0xff
    629e:	d105      	bne.n	62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    62a0:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    62a4:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    62a8:	42a2      	cmp	r2, r4
    62aa:	d00b      	beq.n	62c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    62ac:	b131      	cbz	r1, 62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    62ae:	79da      	ldrb	r2, [r3, #7]
    62b0:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    62b4:	bc30      	pop	{r4, r5}
    62b6:	4610      	mov	r0, r2
    62b8:	f005 be30 	b.w	bf1c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    62bc:	22ff      	movs	r2, #255	; 0xff
    62be:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    62c2:	e7f7      	b.n	62b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    62c4:	bc30      	pop	{r4, r5}
    62c6:	4770      	bx	lr
    62c8:	200000ac 	.word	0x200000ac
    62cc:	b570      	push	{r4, r5, r6, lr}
    62ce:	4606      	mov	r6, r0
    62d0:	f7ff fde6 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    62d4:	4a1b      	ldr	r2, [pc, #108]	; (6344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    62d6:	4604      	mov	r4, r0
    62d8:	2501      	movs	r5, #1
    62da:	6a51      	ldr	r1, [r2, #36]	; 0x24
    62dc:	7808      	ldrb	r0, [r1, #0]
    62de:	f000 0003 	and.w	r0, r0, #3
    62e2:	2801      	cmp	r0, #1
    62e4:	d00c      	beq.n	6300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    62e6:	2802      	cmp	r0, #2
    62e8:	d00a      	beq.n	6300 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    62ea:	2803      	cmp	r0, #3
    62ec:	d121      	bne.n	6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    62ee:	7065      	strb	r5, [r4, #1]
    62f0:	89d0      	ldrh	r0, [r2, #14]
    62f2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    62f6:	81d0      	strh	r0, [r2, #14]
    62f8:	2001      	movs	r0, #1
    62fa:	f7ff fdc3 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    62fe:	e018      	b.n	6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    6300:	7848      	ldrb	r0, [r1, #1]
    6302:	b1b0      	cbz	r0, 6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    6304:	89d1      	ldrh	r1, [r2, #14]
    6306:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    630a:	81d1      	strh	r1, [r2, #14]
    630c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    630e:	2900      	cmp	r1, #0
    6310:	d009      	beq.n	6326 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    6312:	28fb      	cmp	r0, #251	; 0xfb
    6314:	d808      	bhi.n	6328 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    6316:	7990      	ldrb	r0, [r2, #6]
    6318:	b120      	cbz	r0, 6324 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    631a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    631e:	2020      	movs	r0, #32
    6320:	f7ff bdc4 	b.w	5eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6324:	7035      	strb	r5, [r6, #0]
    6326:	bd70      	pop	{r4, r5, r6, pc}
    6328:	7950      	ldrb	r0, [r2, #5]
    632a:	f040 0010 	orr.w	r0, r0, #16
    632e:	7150      	strb	r0, [r2, #5]
    6330:	bd70      	pop	{r4, r5, r6, pc}
    6332:	7a20      	ldrb	r0, [r4, #8]
    6334:	2801      	cmp	r0, #1
    6336:	d001      	beq.n	633c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    6338:	7225      	strb	r5, [r4, #8]
    633a:	bd70      	pop	{r4, r5, r6, pc}
    633c:	2000      	movs	r0, #0
    633e:	7220      	strb	r0, [r4, #8]
    6340:	bd70      	pop	{r4, r5, r6, pc}
    6342:	0000      	.short	0x0000
    6344:	200000ac 	.word	0x200000ac
    6348:	b570      	push	{r4, r5, r6, lr}
    634a:	f7ff fda9 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    634e:	4604      	mov	r4, r0
    6350:	7980      	ldrb	r0, [r0, #6]
    6352:	2800      	cmp	r0, #0
    6354:	d02e      	beq.n	63b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    6356:	2802      	cmp	r0, #2
    6358:	d10d      	bne.n	6376 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    635a:	481c      	ldr	r0, [pc, #112]	; (63cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    635c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    635e:	f007 f850 	bl	d402 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6362:	b340      	cbz	r0, 63b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    6364:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    6368:	1c40      	adds	r0, r0, #1
    636a:	f141 0100 	adc.w	r1, r1, #0
    636e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    6372:	f000 fe19 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6376:	2500      	movs	r5, #0
    6378:	71a5      	strb	r5, [r4, #6]
    637a:	78e0      	ldrb	r0, [r4, #3]
    637c:	b120      	cbz	r0, 6388 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    637e:	70e5      	strb	r5, [r4, #3]
    6380:	2100      	movs	r1, #0
    6382:	2010      	movs	r0, #16
    6384:	f7ff fd7e 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    6388:	78a0      	ldrb	r0, [r4, #2]
    638a:	b170      	cbz	r0, 63aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    638c:	70a5      	strb	r5, [r4, #2]
    638e:	f7ff fb07 	bl	59a0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6392:	b198      	cbz	r0, 63bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    6394:	2100      	movs	r1, #0
    6396:	2008      	movs	r0, #8
    6398:	f7ff fd74 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    639c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    63a0:	1c40      	adds	r0, r0, #1
    63a2:	f141 0100 	adc.w	r1, r1, #0
    63a6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    63aa:	79e0      	ldrb	r0, [r4, #7]
    63ac:	2801      	cmp	r0, #1
    63ae:	d00a      	beq.n	63c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    63b0:	2001      	movs	r0, #1
    63b2:	71e0      	strb	r0, [r4, #7]
    63b4:	bd70      	pop	{r4, r5, r6, pc}
    63b6:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    63ba:	e001      	b.n	63c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    63bc:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    63c0:	2027      	movs	r0, #39	; 0x27
    63c2:	f7fe fc65 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63c6:	71e5      	strb	r5, [r4, #7]
    63c8:	bd70      	pop	{r4, r5, r6, pc}
    63ca:	0000      	.short	0x0000
    63cc:	200000ac 	.word	0x200000ac
    63d0:	4803      	ldr	r0, [pc, #12]	; (63e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    63d2:	7800      	ldrb	r0, [r0, #0]
    63d4:	2800      	cmp	r0, #0
    63d6:	d001      	beq.n	63dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    63d8:	f7ff bf22 	b.w	6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    63dc:	4770      	bx	lr
    63de:	0000      	.short	0x0000
    63e0:	200000ac 	.word	0x200000ac
    63e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63e8:	4606      	mov	r6, r0
    63ea:	f7ff fd53 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    63ee:	4680      	mov	r8, r0
    63f0:	f7ff fd56 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    63f4:	4c17      	ldr	r4, [pc, #92]	; (6454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    63f6:	4605      	mov	r5, r0
    63f8:	4632      	mov	r2, r6
    63fa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    63fc:	6260      	str	r0, [r4, #36]	; 0x24
    63fe:	2101      	movs	r1, #1
    6400:	4640      	mov	r0, r8
    6402:	f7ff ff47 	bl	6294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    6406:	7ce8      	ldrb	r0, [r5, #19]
    6408:	2700      	movs	r7, #0
    640a:	b180      	cbz	r0, 642e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    640c:	4812      	ldr	r0, [pc, #72]	; (6458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    640e:	f005 fca3 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6412:	4812      	ldr	r0, [pc, #72]	; (645c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    6414:	2101      	movs	r1, #1
    6416:	7601      	strb	r1, [r0, #24]
    6418:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    641c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6420:	490d      	ldr	r1, [pc, #52]	; (6458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    6422:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6424:	f005 f874 	bl	b510 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    6428:	f005 f886 	bl	b538 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    642c:	e004      	b.n	6438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    642e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6430:	f005 fc92 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6434:	f005 f89a 	bl	b56c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    6438:	b916      	cbnz	r6, 6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    643a:	4638      	mov	r0, r7
    643c:	f005 fb22 	bl	ba84 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6440:	2100      	movs	r1, #0
    6442:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6446:	4608      	mov	r0, r1
    6448:	f005 fd12 	bl	be70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    644c:	2002      	movs	r0, #2
    644e:	7020      	strb	r0, [r4, #0]
    6450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6454:	200000ac 	.word	0x200000ac
    6458:	200009d0 	.word	0x200009d0
    645c:	20000ad8 	.word	0x20000ad8
    6460:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6464:	4604      	mov	r4, r0
    6466:	f7ff fd1b 	bl	5ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    646a:	4605      	mov	r5, r0
    646c:	f7ff fd12 	bl	5e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    6470:	4606      	mov	r6, r0
    6472:	f8df 9168 	ldr.w	r9, [pc, #360]	; 65dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    6476:	4622      	mov	r2, r4
    6478:	2100      	movs	r1, #0
    647a:	f7ff ff0b 	bl	6294 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    647e:	79a8      	ldrb	r0, [r5, #6]
    6480:	2701      	movs	r7, #1
    6482:	f04f 0800 	mov.w	r8, #0
    6486:	f1a9 0420 	sub.w	r4, r9, #32
    648a:	b140      	cbz	r0, 649e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    648c:	2801      	cmp	r0, #1
    648e:	d01f      	beq.n	64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    6490:	2802      	cmp	r0, #2
    6492:	d030      	beq.n	64f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    6494:	2803      	cmp	r0, #3
    6496:	d03c      	beq.n	6512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    6498:	f240 21ae 	movw	r1, #686	; 0x2ae
    649c:	e058      	b.n	6550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    649e:	7a20      	ldrb	r0, [r4, #8]
    64a0:	2150      	movs	r1, #80	; 0x50
    64a2:	f8ad 0004 	strh.w	r0, [sp, #4]
    64a6:	5388      	strh	r0, [r1, r6]
    64a8:	4648      	mov	r0, r9
    64aa:	f7ff faa3 	bl	59f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    64ae:	b128      	cbz	r0, 64bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    64b0:	2080      	movs	r0, #128	; 0x80
    64b2:	6a21      	ldr	r1, [r4, #32]
    64b4:	f7ff fce6 	bl	5e84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    64b8:	70af      	strb	r7, [r5, #2]
    64ba:	e02e      	b.n	651a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    64bc:	466a      	mov	r2, sp
    64be:	a901      	add	r1, sp, #4
    64c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    64c2:	f007 fc36 	bl	dd32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    64c6:	6220      	str	r0, [r4, #32]
    64c8:	b110      	cbz	r0, 64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    64ca:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    64ce:	b111      	cbz	r1, 64d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    64d0:	4843      	ldr	r0, [pc, #268]	; (65e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    64d2:	6220      	str	r0, [r4, #32]
    64d4:	e021      	b.n	651a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    64d6:	f89d 1000 	ldrb.w	r1, [sp]
    64da:	b931      	cbnz	r1, 64ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    64dc:	f8a0 8000 	strh.w	r8, [r0]
    64e0:	f880 8002 	strb.w	r8, [r0, #2]
    64e4:	2101      	movs	r1, #1
    64e6:	f007 ff6e 	bl	e3c6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    64ea:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    64ee:	6a20      	ldr	r0, [r4, #32]
    64f0:	f007 ff2d 	bl	e34e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    64f4:	e011      	b.n	651a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    64f6:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    64fa:	f8ad 0004 	strh.w	r0, [sp, #4]
    64fe:	466a      	mov	r2, sp
    6500:	a901      	add	r1, sp, #4
    6502:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6504:	f007 fc15 	bl	dd32 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    6508:	6220      	str	r0, [r4, #32]
    650a:	b930      	cbnz	r0, 651a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    650c:	f240 219f 	movw	r1, #671	; 0x29f
    6510:	e01e      	b.n	6550 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6512:	4648      	mov	r0, r9
    6514:	f7ff fa6e 	bl	59f4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6518:	b1c0      	cbz	r0, 654c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    651a:	6a20      	ldr	r0, [r4, #32]
    651c:	2308      	movs	r3, #8
    651e:	7801      	ldrb	r1, [r0, #0]
    6520:	f021 0108 	bic.w	r1, r1, #8
    6524:	7001      	strb	r1, [r0, #0]
    6526:	79ea      	ldrb	r2, [r5, #7]
    6528:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    652c:	4311      	orrs	r1, r2
    652e:	f021 0104 	bic.w	r1, r1, #4
    6532:	7001      	strb	r1, [r0, #0]
    6534:	7a2a      	ldrb	r2, [r5, #8]
    6536:	2304      	movs	r3, #4
    6538:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    653c:	4311      	orrs	r1, r2
    653e:	f021 0110 	bic.w	r1, r1, #16
    6542:	7001      	strb	r1, [r0, #0]
    6544:	43c9      	mvns	r1, r1
    6546:	0789      	lsls	r1, r1, #30
    6548:	d005      	beq.n	6556 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    654a:	e007      	b.n	655c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    654c:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    6550:	2027      	movs	r0, #39	; 0x27
    6552:	f7fe fb9d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6556:	78c0      	ldrb	r0, [r0, #3]
    6558:	2802      	cmp	r0, #2
    655a:	d00f      	beq.n	657c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    655c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    655e:	f007 f878 	bl	d652 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6562:	b108      	cbz	r0, 6568 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    6564:	2101      	movs	r1, #1
    6566:	e00a      	b.n	657e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    6568:	6a20      	ldr	r0, [r4, #32]
    656a:	7800      	ldrb	r0, [r0, #0]
    656c:	43c0      	mvns	r0, r0
    656e:	0780      	lsls	r0, r0, #30
    6570:	d004      	beq.n	657c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    6572:	f7ff f9fd 	bl	5970 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6576:	f080 0101 	eor.w	r1, r0, #1
    657a:	e000      	b.n	657e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    657c:	2100      	movs	r1, #0
    657e:	6a20      	ldr	r0, [r4, #32]
    6580:	7802      	ldrb	r2, [r0, #0]
    6582:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6586:	7001      	strb	r1, [r0, #0]
    6588:	7ca9      	ldrb	r1, [r5, #18]
    658a:	b199      	cbz	r1, 65b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    658c:	7841      	ldrb	r1, [r0, #1]
    658e:	b189      	cbz	r1, 65b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    6590:	4814      	ldr	r0, [pc, #80]	; (65e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    6592:	f005 fbe1 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6596:	4812      	ldr	r0, [pc, #72]	; (65e0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    6598:	3828      	subs	r0, #40	; 0x28
    659a:	f880 8018 	strb.w	r8, [r0, #24]
    659e:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    65a2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    65a6:	480f      	ldr	r0, [pc, #60]	; (65e4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    65a8:	6a21      	ldr	r1, [r4, #32]
    65aa:	f004 ffb1 	bl	b510 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    65ae:	f004 fffb 	bl	b5a8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    65b2:	e003      	b.n	65bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    65b4:	f005 fbd0 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    65b8:	f004 ffd8 	bl	b56c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    65bc:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    65c0:	2101      	movs	r1, #1
    65c2:	2000      	movs	r0, #0
    65c4:	f005 fc54 	bl	be70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    65c8:	7127      	strb	r7, [r4, #4]
    65ca:	6a20      	ldr	r0, [r4, #32]
    65cc:	8801      	ldrh	r1, [r0, #0]
    65ce:	8221      	strh	r1, [r4, #16]
    65d0:	7880      	ldrb	r0, [r0, #2]
    65d2:	74a0      	strb	r0, [r4, #18]
    65d4:	7027      	strb	r7, [r4, #0]
    65d6:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    65da:	0000      	.short	0x0000
    65dc:	200000cc 	.word	0x200000cc
    65e0:	20000b00 	.word	0x20000b00
    65e4:	200009d0 	.word	0x200009d0
    65e8:	00006269 	.word	0x00006269
    65ec:	00005ff1 	.word	0x00005ff1
    65f0:	00006165 	.word	0x00006165
    65f4:	000063d1 	.word	0x000063d1

000065f8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    65f8:	4800      	ldr	r0, [pc, #0]	; (65fc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    65fa:	4770      	bx	lr
    65fc:	200013c1 	.word	0x200013c1

00006600 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    6600:	4904      	ldr	r1, [pc, #16]	; (6614 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    6602:	788a      	ldrb	r2, [r1, #2]
    6604:	4282      	cmp	r2, r0
    6606:	d903      	bls.n	6610 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6608:	4408      	add	r0, r1
    660a:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    660e:	4770      	bx	lr
    6610:	2000      	movs	r0, #0
    6612:	4770      	bx	lr
    6614:	200011ee 	.word	0x200011ee

00006618 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6618:	4904      	ldr	r1, [pc, #16]	; (662c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    661a:	788a      	ldrb	r2, [r1, #2]
    661c:	4282      	cmp	r2, r0
    661e:	d903      	bls.n	6628 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6620:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6624:	3083      	adds	r0, #131	; 0x83
    6626:	4770      	bx	lr
    6628:	2000      	movs	r0, #0
    662a:	4770      	bx	lr
    662c:	200011ee 	.word	0x200011ee

00006630 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6630:	4a05      	ldr	r2, [pc, #20]	; (6648 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    6632:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6636:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    663a:	6802      	ldr	r2, [r0, #0]
    663c:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6640:	8880      	ldrh	r0, [r0, #4]
    6642:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6646:	4770      	bx	lr
    6648:	200011ee 	.word	0x200011ee

0000664c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6650:	460e      	mov	r6, r1
    6652:	4607      	mov	r7, r0
    6654:	4615      	mov	r5, r2
    6656:	2106      	movs	r1, #6
    6658:	4630      	mov	r0, r6
    665a:	f007 fd59 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    665e:	4c0d      	ldr	r4, [pc, #52]	; (6694 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6660:	b160      	cbz	r0, 667c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    6662:	2000      	movs	r0, #0
    6664:	e004      	b.n	6670 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    6666:	1821      	adds	r1, r4, r0
    6668:	1c40      	adds	r0, r0, #1
    666a:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    666e:	b2c0      	uxtb	r0, r0
    6670:	78a1      	ldrb	r1, [r4, #2]
    6672:	4281      	cmp	r1, r0
    6674:	d8f7      	bhi.n	6666 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6676:	2001      	movs	r0, #1
    6678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    667c:	4631      	mov	r1, r6
    667e:	4638      	mov	r0, r7
    6680:	f007 fb66 	bl	dd50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6684:	2808      	cmp	r0, #8
    6686:	d003      	beq.n	6690 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6688:	4420      	add	r0, r4
    668a:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    668e:	e7f2      	b.n	6676 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    6690:	2000      	movs	r0, #0
    6692:	e7f1      	b.n	6678 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6694:	200011ee 	.word	0x200011ee

00006698 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6698:	4904      	ldr	r1, [pc, #16]	; (66ac <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    669a:	788a      	ldrb	r2, [r1, #2]
    669c:	4282      	cmp	r2, r0
    669e:	d903      	bls.n	66a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    66a0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    66a4:	1cc0      	adds	r0, r0, #3
    66a6:	4770      	bx	lr
    66a8:	2000      	movs	r0, #0
    66aa:	4770      	bx	lr
    66ac:	200011ee 	.word	0x200011ee

000066b0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    66b0:	b510      	push	{r4, lr}
    66b2:	f240 12d3 	movw	r2, #467	; 0x1d3
    66b6:	2100      	movs	r1, #0
    66b8:	4808      	ldr	r0, [pc, #32]	; (66dc <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    66ba:	f006 f9c3 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    66be:	2208      	movs	r2, #8
    66c0:	21ff      	movs	r1, #255	; 0xff
    66c2:	4807      	ldr	r0, [pc, #28]	; (66e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    66c4:	f006 f9be 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    66c8:	4805      	ldr	r0, [pc, #20]	; (66e0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    66ca:	2100      	movs	r1, #0
    66cc:	1f00      	subs	r0, r0, #4
    66ce:	7001      	strb	r1, [r0, #0]
    66d0:	7041      	strb	r1, [r0, #1]
    66d2:	f44f 7161 	mov.w	r1, #900	; 0x384
    66d6:	8041      	strh	r1, [r0, #2]
    66d8:	bd10      	pop	{r4, pc}
    66da:	0000      	.short	0x0000
    66dc:	200011ee 	.word	0x200011ee
    66e0:	20000280 	.word	0x20000280

000066e4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    66e4:	4901      	ldr	r1, [pc, #4]	; (66ec <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    66e6:	7008      	strb	r0, [r1, #0]
    66e8:	4770      	bx	lr
    66ea:	0000      	.short	0x0000
    66ec:	2000027c 	.word	0x2000027c

000066f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    66f0:	4801      	ldr	r0, [pc, #4]	; (66f8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    66f2:	7800      	ldrb	r0, [r0, #0]
    66f4:	4770      	bx	lr
    66f6:	0000      	.short	0x0000
    66f8:	2000027c 	.word	0x2000027c

000066fc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    66fc:	4b0b      	ldr	r3, [pc, #44]	; (672c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    66fe:	b510      	push	{r4, lr}
    6700:	789c      	ldrb	r4, [r3, #2]
    6702:	4284      	cmp	r4, r0
    6704:	d90f      	bls.n	6726 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6706:	4418      	add	r0, r3
    6708:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    670c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6710:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6714:	700b      	strb	r3, [r1, #0]
    6716:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    671a:	6011      	str	r1, [r2, #0]
    671c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6720:	8090      	strh	r0, [r2, #4]
    6722:	2001      	movs	r0, #1
    6724:	bd10      	pop	{r4, pc}
    6726:	2000      	movs	r0, #0
    6728:	bd10      	pop	{r4, pc}
    672a:	0000      	.short	0x0000
    672c:	200011ee 	.word	0x200011ee

00006730 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6730:	4907      	ldr	r1, [pc, #28]	; (6750 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6732:	788a      	ldrb	r2, [r1, #2]
    6734:	4282      	cmp	r2, r0
    6736:	d909      	bls.n	674c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6738:	4408      	add	r0, r1
    673a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    673e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    6742:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6746:	f000 0001 	and.w	r0, r0, #1
    674a:	4770      	bx	lr
    674c:	2000      	movs	r0, #0
    674e:	4770      	bx	lr
    6750:	200011ee 	.word	0x200011ee

00006754 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6758:	4698      	mov	r8, r3
    675a:	4691      	mov	r9, r2
    675c:	460c      	mov	r4, r1
    675e:	4605      	mov	r5, r0
    6760:	f000 f936 	bl	69d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6764:	4606      	mov	r6, r0
    6766:	2810      	cmp	r0, #16
    6768:	d006      	beq.n	6778 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    676a:	f000 f901 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    676e:	2810      	cmp	r0, #16
    6770:	d002      	beq.n	6778 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6772:	2012      	movs	r0, #18
    6774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6778:	4f18      	ldr	r7, [pc, #96]	; (67dc <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    677a:	78b8      	ldrb	r0, [r7, #2]
    677c:	2808      	cmp	r0, #8
    677e:	d22a      	bcs.n	67d6 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6780:	2e10      	cmp	r6, #16
    6782:	d105      	bne.n	6790 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6784:	2200      	movs	r2, #0
    6786:	4621      	mov	r1, r4
    6788:	4628      	mov	r0, r5
    678a:	f000 f905 	bl	6998 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    678e:	4606      	mov	r6, r0
    6790:	78bc      	ldrb	r4, [r7, #2]
    6792:	2210      	movs	r2, #16
    6794:	1c60      	adds	r0, r4, #1
    6796:	70b8      	strb	r0, [r7, #2]
    6798:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    679c:	1ce8      	adds	r0, r5, #3
    679e:	4649      	mov	r1, r9
    67a0:	f007 fc1f 	bl	dfe2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    67a4:	f105 0083 	add.w	r0, r5, #131	; 0x83
    67a8:	2210      	movs	r2, #16
    67aa:	4641      	mov	r1, r8
    67ac:	f007 fc19 	bl	dfe2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    67b0:	2110      	movs	r1, #16
    67b2:	4640      	mov	r0, r8
    67b4:	f007 fcac 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    67b8:	443c      	add	r4, r7
    67ba:	2110      	movs	r1, #16
    67bc:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    67c0:	4648      	mov	r0, r9
    67c2:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    67c6:	f007 fca3 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    67ca:	77e0      	strb	r0, [r4, #31]
    67cc:	f804 6c29 	strb.w	r6, [r4, #-41]
    67d0:	2000      	movs	r0, #0
    67d2:	73e0      	strb	r0, [r4, #15]
    67d4:	e7ce      	b.n	6774 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    67d6:	2007      	movs	r0, #7
    67d8:	e7cc      	b.n	6774 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    67da:	0000      	.short	0x0000
    67dc:	200011ee 	.word	0x200011ee

000067e0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    67e0:	4806      	ldr	r0, [pc, #24]	; (67fc <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    67e2:	b510      	push	{r4, lr}
    67e4:	7880      	ldrb	r0, [r0, #2]
    67e6:	1e40      	subs	r0, r0, #1
    67e8:	b244      	sxtb	r4, r0
    67ea:	e004      	b.n	67f6 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    67ec:	b2e0      	uxtb	r0, r4
    67ee:	f000 f937 	bl	6a60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    67f2:	1e64      	subs	r4, r4, #1
    67f4:	b264      	sxtb	r4, r4
    67f6:	2c00      	cmp	r4, #0
    67f8:	daf8      	bge.n	67ec <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    67fa:	bd10      	pop	{r4, pc}
    67fc:	200011ee 	.word	0x200011ee

00006800 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6800:	4801      	ldr	r0, [pc, #4]	; (6808 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6802:	8840      	ldrh	r0, [r0, #2]
    6804:	4770      	bx	lr
    6806:	0000      	.short	0x0000
    6808:	2000027c 	.word	0x2000027c

0000680c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    680c:	b138      	cbz	r0, 681e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    680e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6812:	4288      	cmp	r0, r1
    6814:	d803      	bhi.n	681e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6816:	4903      	ldr	r1, [pc, #12]	; (6824 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6818:	8048      	strh	r0, [r1, #2]
    681a:	2001      	movs	r0, #1
    681c:	4770      	bx	lr
    681e:	2000      	movs	r0, #0
    6820:	4770      	bx	lr
    6822:	0000      	.short	0x0000
    6824:	2000027c 	.word	0x2000027c

00006828 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    6828:	4905      	ldr	r1, [pc, #20]	; (6840 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    682a:	788a      	ldrb	r2, [r1, #2]
    682c:	4282      	cmp	r2, r0
    682e:	d903      	bls.n	6838 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    6830:	4408      	add	r0, r1
    6832:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6836:	b108      	cbz	r0, 683c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    6838:	2000      	movs	r0, #0
    683a:	4770      	bx	lr
    683c:	2001      	movs	r0, #1
    683e:	4770      	bx	lr
    6840:	200011ee 	.word	0x200011ee

00006844 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6844:	b570      	push	{r4, r5, r6, lr}
    6846:	460d      	mov	r5, r1
    6848:	4606      	mov	r6, r0
    684a:	f000 f8c1 	bl	69d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    684e:	4c10      	ldr	r4, [pc, #64]	; (6890 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6850:	2810      	cmp	r0, #16
    6852:	d007      	beq.n	6864 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6854:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6858:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    685c:	07c9      	lsls	r1, r1, #31
    685e:	d001      	beq.n	6864 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6860:	2001      	movs	r0, #1
    6862:	bd70      	pop	{r4, r5, r6, pc}
    6864:	7861      	ldrb	r1, [r4, #1]
    6866:	2908      	cmp	r1, #8
    6868:	d210      	bcs.n	688c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    686a:	2810      	cmp	r0, #16
    686c:	d008      	beq.n	6880 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    686e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6872:	2101      	movs	r1, #1
    6874:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6878:	7860      	ldrb	r0, [r4, #1]
    687a:	1c40      	adds	r0, r0, #1
    687c:	7060      	strb	r0, [r4, #1]
    687e:	e7ef      	b.n	6860 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6880:	2201      	movs	r2, #1
    6882:	4629      	mov	r1, r5
    6884:	4630      	mov	r0, r6
    6886:	f000 f887 	bl	6998 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    688a:	e7f5      	b.n	6878 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    688c:	2000      	movs	r0, #0
    688e:	bd70      	pop	{r4, r5, r6, pc}
    6890:	200011ee 	.word	0x200011ee

00006894 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6894:	b570      	push	{r4, r5, r6, lr}
    6896:	4d0b      	ldr	r5, [pc, #44]	; (68c4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6898:	7828      	ldrb	r0, [r5, #0]
    689a:	1e40      	subs	r0, r0, #1
    689c:	b244      	sxtb	r4, r0
    689e:	e00a      	b.n	68b6 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    68a0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    68a4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    68a8:	07c0      	lsls	r0, r0, #31
    68aa:	d002      	beq.n	68b2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    68ac:	b2e0      	uxtb	r0, r4
    68ae:	f000 f91f 	bl	6af0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    68b2:	1e64      	subs	r4, r4, #1
    68b4:	b264      	sxtb	r4, r4
    68b6:	2c00      	cmp	r4, #0
    68b8:	daf2      	bge.n	68a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    68ba:	4903      	ldr	r1, [pc, #12]	; (68c8 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    68bc:	2000      	movs	r0, #0
    68be:	7048      	strb	r0, [r1, #1]
    68c0:	bd70      	pop	{r4, r5, r6, pc}
    68c2:	0000      	.short	0x0000
    68c4:	200011ee 	.word	0x200011ee
    68c8:	2000027c 	.word	0x2000027c

000068cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    68cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68d0:	2400      	movs	r4, #0
    68d2:	4625      	mov	r5, r4
    68d4:	4e18      	ldr	r6, [pc, #96]	; (6938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    68d6:	e029      	b.n	692c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    68d8:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    68dc:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    68e0:	07c0      	lsls	r0, r0, #31
    68e2:	d021      	beq.n	6928 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    68e4:	4628      	mov	r0, r5
    68e6:	f000 f843 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68ea:	4603      	mov	r3, r0
    68ec:	f7ff fed4 	bl	6698 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    68f0:	4601      	mov	r1, r0
    68f2:	2000      	movs	r0, #0
    68f4:	2b10      	cmp	r3, #16
    68f6:	d009      	beq.n	690c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    68f8:	18f2      	adds	r2, r6, r3
    68fa:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    68fe:	f1bc 0f01 	cmp.w	ip, #1
    6902:	d002      	beq.n	690a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6904:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6908:	b102      	cbz	r2, 690c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    690a:	2001      	movs	r0, #1
    690c:	1e40      	subs	r0, r0, #1
    690e:	4201      	tst	r1, r0
    6910:	d10a      	bne.n	6928 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6912:	480a      	ldr	r0, [pc, #40]	; (693c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6914:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6918:	5503      	strb	r3, [r0, r4]
    691a:	4620      	mov	r0, r4
    691c:	1c64      	adds	r4, r4, #1
    691e:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6922:	b2e4      	uxtb	r4, r4
    6924:	f005 fbcc 	bl	c0c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6928:	1c6d      	adds	r5, r5, #1
    692a:	b2ed      	uxtb	r5, r5
    692c:	7830      	ldrb	r0, [r6, #0]
    692e:	42a8      	cmp	r0, r5
    6930:	d8d2      	bhi.n	68d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6936:	0000      	.short	0x0000
    6938:	200011ee 	.word	0x200011ee
    693c:	20000280 	.word	0x20000280
    6940:	4602      	mov	r2, r0
    6942:	4809      	ldr	r0, [pc, #36]	; (6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6944:	b510      	push	{r4, lr}
    6946:	7800      	ldrb	r0, [r0, #0]
    6948:	460b      	mov	r3, r1
    694a:	b158      	cbz	r0, 6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    694c:	4807      	ldr	r0, [pc, #28]	; (696c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    694e:	7881      	ldrb	r1, [r0, #2]
    6950:	b141      	cbz	r1, 6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6952:	b10b      	cbz	r3, 6958 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6954:	1cc0      	adds	r0, r0, #3
    6956:	e001      	b.n	695c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6958:	4804      	ldr	r0, [pc, #16]	; (696c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    695a:	3083      	adds	r0, #131	; 0x83
    695c:	f004 fcfa 	bl	b354 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6960:	2001      	movs	r0, #1
    6962:	bd10      	pop	{r4, pc}
    6964:	2000      	movs	r0, #0
    6966:	bd10      	pop	{r4, pc}
    6968:	2000027c 	.word	0x2000027c
    696c:	200011ee 	.word	0x200011ee
    6970:	4908      	ldr	r1, [pc, #32]	; (6994 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6972:	b510      	push	{r4, lr}
    6974:	4603      	mov	r3, r0
    6976:	2000      	movs	r0, #0
    6978:	788a      	ldrb	r2, [r1, #2]
    697a:	e006      	b.n	698a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    697c:	180c      	adds	r4, r1, r0
    697e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6982:	429c      	cmp	r4, r3
    6984:	d004      	beq.n	6990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6986:	1c40      	adds	r0, r0, #1
    6988:	b2c0      	uxtb	r0, r0
    698a:	4282      	cmp	r2, r0
    698c:	d8f6      	bhi.n	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    698e:	2010      	movs	r0, #16
    6990:	bd10      	pop	{r4, pc}
    6992:	0000      	.short	0x0000
    6994:	200011ee 	.word	0x200011ee
    6998:	b570      	push	{r4, r5, r6, lr}
    699a:	4b0c      	ldr	r3, [pc, #48]	; (69cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    699c:	4604      	mov	r4, r0
    699e:	7818      	ldrb	r0, [r3, #0]
    69a0:	1c45      	adds	r5, r0, #1
    69a2:	701d      	strb	r5, [r3, #0]
    69a4:	2810      	cmp	r0, #16
    69a6:	d303      	bcc.n	69b0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    69a8:	2146      	movs	r1, #70	; 0x46
    69aa:	2028      	movs	r0, #40	; 0x28
    69ac:	f7fe f970 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69b0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    69b4:	680d      	ldr	r5, [r1, #0]
    69b6:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    69ba:	8889      	ldrh	r1, [r1, #4]
    69bc:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    69c0:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    69c4:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    69c8:	bd70      	pop	{r4, r5, r6, pc}
    69ca:	0000      	.short	0x0000
    69cc:	200011ee 	.word	0x200011ee
    69d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69d4:	460f      	mov	r7, r1
    69d6:	4606      	mov	r6, r0
    69d8:	2400      	movs	r4, #0
    69da:	4d0d      	ldr	r5, [pc, #52]	; (6a10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    69dc:	e00f      	b.n	69fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    69de:	bf00      	nop
    69e0:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    69e4:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    69e8:	42b1      	cmp	r1, r6
    69ea:	d106      	bne.n	69fa <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    69ec:	2206      	movs	r2, #6
    69ee:	4639      	mov	r1, r7
    69f0:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    69f4:	f005 ff9a 	bl	c92c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    69f8:	b138      	cbz	r0, 6a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    69fa:	1c64      	adds	r4, r4, #1
    69fc:	b2e4      	uxtb	r4, r4
    69fe:	7828      	ldrb	r0, [r5, #0]
    6a00:	42a0      	cmp	r0, r4
    6a02:	d8ed      	bhi.n	69e0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    6a04:	2010      	movs	r0, #16
    6a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a0a:	4620      	mov	r0, r4
    6a0c:	e7fb      	b.n	6a06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6a0e:	0000      	.short	0x0000
    6a10:	200011ee 	.word	0x200011ee
    6a14:	b570      	push	{r4, r5, r6, lr}
    6a16:	4605      	mov	r5, r0
    6a18:	f7ff ffaa 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a1c:	2810      	cmp	r0, #16
    6a1e:	d11c      	bne.n	6a5a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a20:	4c0e      	ldr	r4, [pc, #56]	; (6a5c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6a22:	7820      	ldrb	r0, [r4, #0]
    6a24:	1e40      	subs	r0, r0, #1
    6a26:	b2c0      	uxtb	r0, r0
    6a28:	7020      	strb	r0, [r4, #0]
    6a2a:	42a8      	cmp	r0, r5
    6a2c:	d015      	beq.n	6a5a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a2e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6a32:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6a36:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6a3a:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6a3e:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6a42:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6a46:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6a4a:	7820      	ldrb	r0, [r4, #0]
    6a4c:	f7ff ff90 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a50:	2810      	cmp	r0, #16
    6a52:	d002      	beq.n	6a5a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a54:	4420      	add	r0, r4
    6a56:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6a5a:	bd70      	pop	{r4, r5, r6, pc}
    6a5c:	200011ee 	.word	0x200011ee
    6a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a64:	4c21      	ldr	r4, [pc, #132]	; (6aec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6a66:	4606      	mov	r6, r0
    6a68:	19a7      	adds	r7, r4, r6
    6a6a:	78a0      	ldrb	r0, [r4, #2]
    6a6c:	1e40      	subs	r0, r0, #1
    6a6e:	b2c5      	uxtb	r5, r0
    6a70:	70a5      	strb	r5, [r4, #2]
    6a72:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6a76:	42ae      	cmp	r6, r5
    6a78:	d02a      	beq.n	6ad0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6a7a:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6a7e:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6a82:	f10a 0103 	add.w	r1, sl, #3
    6a86:	f109 0003 	add.w	r0, r9, #3
    6a8a:	2210      	movs	r2, #16
    6a8c:	f005 ff60 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a90:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6a94:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6a98:	2210      	movs	r2, #16
    6a9a:	f005 ff59 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a9e:	1960      	adds	r0, r4, r5
    6aa0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6aa4:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6aa8:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6aac:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6ab0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6ab4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6ab8:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6abc:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6ac0:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6ac4:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6ac8:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6acc:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6ad0:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6ad4:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ad8:	07c0      	lsls	r0, r0, #31
    6ada:	d104      	bne.n	6ae6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6adc:	4640      	mov	r0, r8
    6ade:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ae2:	f7ff bf97 	b.w	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6aea:	0000      	.short	0x0000
    6aec:	200011ee 	.word	0x200011ee
    6af0:	4905      	ldr	r1, [pc, #20]	; (6b08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6af2:	784a      	ldrb	r2, [r1, #1]
    6af4:	1e52      	subs	r2, r2, #1
    6af6:	704a      	strb	r2, [r1, #1]
    6af8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6afc:	2200      	movs	r2, #0
    6afe:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6b02:	f7ff bf87 	b.w	6a14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6b06:	0000      	.short	0x0000
    6b08:	200011ee 	.word	0x200011ee

00006b0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    6b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b10:	4604      	mov	r4, r0
    6b12:	f100 0570 	add.w	r5, r0, #112	; 0x70
    6b16:	f04f 0901 	mov.w	r9, #1
    6b1a:	b171      	cbz	r1, 6b3a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    6b1c:	f104 0786 	add.w	r7, r4, #134	; 0x86
    6b20:	1e7e      	subs	r6, r7, #1
    6b22:	2901      	cmp	r1, #1
    6b24:	d021      	beq.n	6b6a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    6b26:	2902      	cmp	r1, #2
    6b28:	d046      	beq.n	6bb8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    6b2a:	2903      	cmp	r1, #3
    6b2c:	d11b      	bne.n	6b66 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6b2e:	4639      	mov	r1, r7
    6b30:	4630      	mov	r0, r6
    6b32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6b36:	f007 bb1b 	b.w	e170 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b3a:	f44f 7206 	mov.w	r2, #536	; 0x218
    6b3e:	2100      	movs	r1, #0
    6b40:	f005 ff80 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b44:	f004 fbdc 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    6b48:	f644 112b 	movw	r1, #18731	; 0x492b
    6b4c:	4008      	ands	r0, r1
    6b4e:	f885 9015 	strb.w	r9, [r5, #21]
    6b52:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    6b56:	0a00      	lsrs	r0, r0, #8
    6b58:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    6b5c:	20fe      	movs	r0, #254	; 0xfe
    6b5e:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    6b62:	207f      	movs	r0, #127	; 0x7f
    6b64:	7268      	strb	r0, [r5, #9]
    6b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6b6a:	f04f 0800 	mov.w	r8, #0
    6b6e:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    6b72:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    6b76:	68e1      	ldr	r1, [r4, #12]
    6b78:	4814      	ldr	r0, [pc, #80]	; (6bcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    6b7a:	460a      	mov	r2, r1
    6b7c:	4408      	add	r0, r1
    6b7e:	fbb0 f0f1 	udiv	r0, r0, r1
    6b82:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    6b86:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6b8a:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    6b8e:	8ae3      	ldrh	r3, [r4, #22]
    6b90:	4628      	mov	r0, r5
    6b92:	f000 f81d 	bl	6bd0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6b96:	4639      	mov	r1, r7
    6b98:	4630      	mov	r0, r6
    6b9a:	f007 fae9 	bl	e170 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b9e:	f005 fea1 	bl	c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    6ba2:	b118      	cbz	r0, 6bac <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    6ba4:	6920      	ldr	r0, [r4, #16]
    6ba6:	f000 fb65 	bl	7274 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    6baa:	b110      	cbz	r0, 6bb2 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    6bac:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    6bb0:	e7d9      	b.n	6b66 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6bb2:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    6bb6:	e7d6      	b.n	6b66 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    6bb8:	68c1      	ldr	r1, [r0, #12]
    6bba:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    6bbe:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    6bc2:	4628      	mov	r0, r5
    6bc4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6bc8:	f000 b802 	b.w	6bd0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    6bcc:	01c9c37f 	.word	0x01c9c37f
    6bd0:	b530      	push	{r4, r5, lr}
    6bd2:	2400      	movs	r4, #0
    6bd4:	8684      	strh	r4, [r0, #52]	; 0x34
    6bd6:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    6bd8:	4d13      	ldr	r5, [pc, #76]	; (6c28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    6bda:	434c      	muls	r4, r1
    6bdc:	fbb4 f4f2 	udiv	r4, r4, r2
    6be0:	8704      	strh	r4, [r0, #56]	; 0x38
    6be2:	f242 7410 	movw	r4, #10000	; 0x2710
    6be6:	4363      	muls	r3, r4
    6be8:	fbb3 f3f2 	udiv	r3, r3, r2
    6bec:	1c5b      	adds	r3, r3, #1
    6bee:	b29b      	uxth	r3, r3
    6bf0:	fb03 f402 	mul.w	r4, r3, r2
    6bf4:	86c3      	strh	r3, [r0, #54]	; 0x36
    6bf6:	42ac      	cmp	r4, r5
    6bf8:	d901      	bls.n	6bfe <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    6bfa:	1e5b      	subs	r3, r3, #1
    6bfc:	86c3      	strh	r3, [r0, #54]	; 0x36
    6bfe:	4b0b      	ldr	r3, [pc, #44]	; (6c2c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    6c00:	f240 2471 	movw	r4, #625	; 0x271
    6c04:	fbb3 f3f2 	udiv	r3, r3, r2
    6c08:	1c5b      	adds	r3, r3, #1
    6c0a:	8783      	strh	r3, [r0, #60]	; 0x3c
    6c0c:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6c0e:	4363      	muls	r3, r4
    6c10:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6c14:	1e5b      	subs	r3, r3, #1
    6c16:	fbb3 f3f2 	udiv	r3, r3, r2
    6c1a:	62c3      	str	r3, [r0, #44]	; 0x2c
    6c1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6c1e:	434b      	muls	r3, r1
    6c20:	fbb3 f1f2 	udiv	r1, r3, r2
    6c24:	6281      	str	r1, [r0, #40]	; 0x28
    6c26:	bd30      	pop	{r4, r5, pc}
    6c28:	01e84800 	.word	0x01e84800
    6c2c:	02625a00 	.word	0x02625a00

00006c30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6c30:	b570      	push	{r4, r5, r6, lr}
    6c32:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6c36:	b28b      	uxth	r3, r1
    6c38:	7ac5      	ldrb	r5, [r0, #11]
    6c3a:	ea83 0102 	eor.w	r1, r3, r2
    6c3e:	2200      	movs	r2, #0
    6c40:	b2cc      	uxtb	r4, r1
    6c42:	0a09      	lsrs	r1, r1, #8
    6c44:	fa94 f4a4 	rbit	r4, r4
    6c48:	fa91 f1a1 	rbit	r1, r1
    6c4c:	0e24      	lsrs	r4, r4, #24
    6c4e:	0e09      	lsrs	r1, r1, #24
    6c50:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6c54:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6c58:	1c52      	adds	r2, r2, #1
    6c5a:	4419      	add	r1, r3
    6c5c:	b2d2      	uxtb	r2, r2
    6c5e:	b289      	uxth	r1, r1
    6c60:	2a03      	cmp	r2, #3
    6c62:	d3ed      	bcc.n	6c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6c64:	4059      	eors	r1, r3
    6c66:	2225      	movs	r2, #37	; 0x25
    6c68:	fbb1 f3f2 	udiv	r3, r1, r2
    6c6c:	fb02 1213 	mls	r2, r2, r3, r1
    6c70:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6c74:	f002 0607 	and.w	r6, r2, #7
    6c78:	785b      	ldrb	r3, [r3, #1]
    6c7a:	2401      	movs	r4, #1
    6c7c:	fa04 f606 	lsl.w	r6, r4, r6
    6c80:	4233      	tst	r3, r6
    6c82:	d001      	beq.n	6c88 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6c84:	4610      	mov	r0, r2
    6c86:	bd70      	pop	{r4, r5, r6, pc}
    6c88:	434d      	muls	r5, r1
    6c8a:	0c29      	lsrs	r1, r5, #16
    6c8c:	1c49      	adds	r1, r1, #1
    6c8e:	b2c9      	uxtb	r1, r1
    6c90:	2200      	movs	r2, #0
    6c92:	1885      	adds	r5, r0, r2
    6c94:	79ab      	ldrb	r3, [r5, #6]
    6c96:	428b      	cmp	r3, r1
    6c98:	d312      	bcc.n	6cc0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6c9a:	f895 5001 	ldrb.w	r5, [r5, #1]
    6c9e:	2300      	movs	r3, #0
    6ca0:	fa04 f603 	lsl.w	r6, r4, r3
    6ca4:	4235      	tst	r5, r6
    6ca6:	d001      	beq.n	6cac <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6ca8:	1e49      	subs	r1, r1, #1
    6caa:	b2c9      	uxtb	r1, r1
    6cac:	b121      	cbz	r1, 6cb8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6cae:	1c5b      	adds	r3, r3, #1
    6cb0:	b2db      	uxtb	r3, r3
    6cb2:	2b08      	cmp	r3, #8
    6cb4:	d3f4      	bcc.n	6ca0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6cb6:	e005      	b.n	6cc4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6cb8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6cbc:	b2c0      	uxtb	r0, r0
    6cbe:	bd70      	pop	{r4, r5, r6, pc}
    6cc0:	1ac9      	subs	r1, r1, r3
    6cc2:	b2c9      	uxtb	r1, r1
    6cc4:	1c52      	adds	r2, r2, #1
    6cc6:	b2d2      	uxtb	r2, r2
    6cc8:	2a05      	cmp	r2, #5
    6cca:	d3e2      	bcc.n	6c92 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6ccc:	f240 110d 	movw	r1, #269	; 0x10d
    6cd0:	2046      	movs	r0, #70	; 0x46
    6cd2:	f7fd ffdd 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd6:	0000      	movs	r0, r0
    6cd8:	b570      	push	{r4, r5, r6, lr}
    6cda:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6cde:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6ce2:	2401      	movs	r4, #1
    6ce4:	fb03 2101 	mla	r1, r3, r1, r2
    6ce8:	2225      	movs	r2, #37	; 0x25
    6cea:	fbb1 f3f2 	udiv	r3, r1, r2
    6cee:	fb02 1113 	mls	r1, r2, r3, r1
    6cf2:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6cf6:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6cfa:	f001 0307 	and.w	r3, r1, #7
    6cfe:	7d92      	ldrb	r2, [r2, #22]
    6d00:	fa04 f303 	lsl.w	r3, r4, r3
    6d04:	421a      	tst	r2, r3
    6d06:	d003      	beq.n	6d10 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6d08:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6d0c:	2000      	movs	r0, #0
    6d0e:	bd70      	pop	{r4, r5, r6, pc}
    6d10:	f890 2020 	ldrb.w	r2, [r0, #32]
    6d14:	fbb1 f3f2 	udiv	r3, r1, r2
    6d18:	fb02 1113 	mls	r1, r2, r3, r1
    6d1c:	1c49      	adds	r1, r1, #1
    6d1e:	b2c9      	uxtb	r1, r1
    6d20:	2300      	movs	r3, #0
    6d22:	18c5      	adds	r5, r0, r3
    6d24:	7eea      	ldrb	r2, [r5, #27]
    6d26:	428a      	cmp	r2, r1
    6d28:	d311      	bcc.n	6d4e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6d2a:	f895 5016 	ldrb.w	r5, [r5, #22]
    6d2e:	2200      	movs	r2, #0
    6d30:	fa04 f602 	lsl.w	r6, r4, r2
    6d34:	4235      	tst	r5, r6
    6d36:	d001      	beq.n	6d3c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6d38:	1e49      	subs	r1, r1, #1
    6d3a:	b2c9      	uxtb	r1, r1
    6d3c:	b121      	cbz	r1, 6d48 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6d3e:	1c52      	adds	r2, r2, #1
    6d40:	b2d2      	uxtb	r2, r2
    6d42:	2a08      	cmp	r2, #8
    6d44:	d3f4      	bcc.n	6d30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6d46:	e004      	b.n	6d52 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6d48:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d4c:	e7dc      	b.n	6d08 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6d4e:	1a89      	subs	r1, r1, r2
    6d50:	b2c9      	uxtb	r1, r1
    6d52:	1c5b      	adds	r3, r3, #1
    6d54:	b2db      	uxtb	r3, r3
    6d56:	2b05      	cmp	r3, #5
    6d58:	d3e3      	bcc.n	6d22 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6d5a:	201f      	movs	r0, #31
    6d5c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d60 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6d60:	7841      	ldrb	r1, [r0, #1]
    6d62:	b141      	cbz	r1, 6d76 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d64:	78c0      	ldrb	r0, [r0, #3]
    6d66:	2819      	cmp	r0, #25
    6d68:	d203      	bcs.n	6d72 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6d6a:	4a04      	ldr	r2, [pc, #16]	; (6d7c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6d6c:	5c10      	ldrb	r0, [r2, r0]
    6d6e:	4288      	cmp	r0, r1
    6d70:	d101      	bne.n	6d76 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d72:	2001      	movs	r0, #1
    6d74:	4770      	bx	lr
    6d76:	2000      	movs	r0, #0
    6d78:	4770      	bx	lr
    6d7a:	0000      	.short	0x0000
    6d7c:	00010826 	.word	0x00010826

00006d80 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    6d80:	b50c      	push	{r2, r3, lr}
    6d82:	a20b      	add	r2, pc, #44	; (adr r2, 6db0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    6d84:	e9d2 1200 	ldrd	r1, r2, [r2]
    6d88:	e9cd 1200 	strd	r1, r2, [sp]
    6d8c:	7901      	ldrb	r1, [r0, #4]
    6d8e:	7940      	ldrb	r0, [r0, #5]
    6d90:	f001 0207 	and.w	r2, r1, #7
    6d94:	4669      	mov	r1, sp
    6d96:	f81d 2002 	ldrb.w	r2, [sp, r2]
    6d9a:	2a01      	cmp	r2, #1
    6d9c:	d804      	bhi.n	6da8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    6d9e:	f000 0007 	and.w	r0, r0, #7
    6da2:	5c08      	ldrb	r0, [r1, r0]
    6da4:	2801      	cmp	r0, #1
    6da6:	d901      	bls.n	6dac <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    6da8:	2000      	movs	r0, #0
    6daa:	bd0c      	pop	{r2, r3, pc}
    6dac:	2001      	movs	r0, #1
    6dae:	bd0c      	pop	{r2, r3, pc}
    6db0:	02010100 	.word	0x02010100
    6db4:	03020201 	.word	0x03020201

00006db8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6db8:	b510      	push	{r4, lr}
    6dba:	2201      	movs	r2, #1
    6dbc:	70c1      	strb	r1, [r0, #3]
    6dbe:	2919      	cmp	r1, #25
    6dc0:	d202      	bcs.n	6dc8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6dc2:	4a06      	ldr	r2, [pc, #24]	; (6ddc <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6dc4:	5c52      	ldrb	r2, [r2, r1]
    6dc6:	e006      	b.n	6dd6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6dc8:	29ff      	cmp	r1, #255	; 0xff
    6dca:	d004      	beq.n	6dd6 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6dcc:	f240 31d5 	movw	r1, #981	; 0x3d5
    6dd0:	202a      	movs	r0, #42	; 0x2a
    6dd2:	f7fd ff5d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dd6:	7042      	strb	r2, [r0, #1]
    6dd8:	bd10      	pop	{r4, pc}
    6dda:	0000      	.short	0x0000
    6ddc:	00010826 	.word	0x00010826

00006de0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6de4:	4c12      	ldr	r4, [pc, #72]	; (6e30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6de6:	4607      	mov	r7, r0
    6de8:	460e      	mov	r6, r1
    6dea:	7da0      	ldrb	r0, [r4, #22]
    6dec:	b110      	cbz	r0, 6df4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6dee:	8b20      	ldrh	r0, [r4, #24]
    6df0:	2800      	cmp	r0, #0
    6df2:	d012      	beq.n	6e1a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6df4:	480e      	ldr	r0, [pc, #56]	; (6e30 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6df6:	3014      	adds	r0, #20
    6df8:	4680      	mov	r8, r0
    6dfa:	f007 fb63 	bl	e4c4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6dfe:	b9a8      	cbnz	r0, 6e2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6e00:	8aa5      	ldrh	r5, [r4, #20]
    6e02:	8aa0      	ldrh	r0, [r4, #20]
    6e04:	4632      	mov	r2, r6
    6e06:	4639      	mov	r1, r7
    6e08:	f007 fba0 	bl	e54c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6e0c:	b138      	cbz	r0, 6e1e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6e0e:	7da0      	ldrb	r0, [r4, #22]
    6e10:	b110      	cbz	r0, 6e18 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6e12:	8b20      	ldrh	r0, [r4, #24]
    6e14:	1e40      	subs	r0, r0, #1
    6e16:	8320      	strh	r0, [r4, #24]
    6e18:	2001      	movs	r0, #1
    6e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e1e:	4640      	mov	r0, r8
    6e20:	f007 fb50 	bl	e4c4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6e24:	b910      	cbnz	r0, 6e2c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6e26:	8aa0      	ldrh	r0, [r4, #20]
    6e28:	42a8      	cmp	r0, r5
    6e2a:	d1ea      	bne.n	6e02 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6e2c:	2000      	movs	r0, #0
    6e2e:	e7f4      	b.n	6e1a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6e30:	20000f48 	.word	0x20000f48
    6e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6e38:	468a      	mov	sl, r1
    6e3a:	4699      	mov	r9, r3
    6e3c:	4615      	mov	r5, r2
    6e3e:	4604      	mov	r4, r0
    6e40:	a901      	add	r1, sp, #4
    6e42:	f006 ffc8 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e46:	bbe0      	cbnz	r0, 6ec2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe2>
    6e48:	9f02      	ldr	r7, [sp, #8]
    6e4a:	f04f 0800 	mov.w	r8, #0
    6e4e:	3770      	adds	r7, #112	; 0x70
    6e50:	b18d      	cbz	r5, 6e76 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x96>
    6e52:	4620      	mov	r0, r4
    6e54:	f7fe fb4c 	bl	54f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6e58:	0004      	movs	r4, r0
    6e5a:	d00f      	beq.n	6e7c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6e5c:	4629      	mov	r1, r5
    6e5e:	f006 fbca 	bl	d5f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6e62:	0006      	movs	r6, r0
    6e64:	d003      	beq.n	6e6e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6e66:	481d      	ldr	r0, [pc, #116]	; (6edc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xfc>)
    6e68:	8840      	ldrh	r0, [r0, #2]
    6e6a:	42a8      	cmp	r0, r5
    6e6c:	d208      	bcs.n	6e80 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xa0>
    6e6e:	2000      	movs	r0, #0
    6e70:	b004      	add	sp, #16
    6e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e76:	2001      	movs	r0, #1
    6e78:	7538      	strb	r0, [r7, #20]
    6e7a:	e029      	b.n	6ed0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6e7c:	216e      	movs	r1, #110	; 0x6e
    6e7e:	e02a      	b.n	6ed6 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf6>
    6e80:	4620      	mov	r0, r4
    6e82:	4631      	mov	r1, r6
    6e84:	aa03      	add	r2, sp, #12
    6e86:	f006 fbaf 	bl	d5e8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6e8a:	9803      	ldr	r0, [sp, #12]
    6e8c:	f8a0 8000 	strh.w	r8, [r0]
    6e90:	f880 8002 	strb.w	r8, [r0, #2]
    6e94:	7d39      	ldrb	r1, [r7, #20]
    6e96:	b109      	cbz	r1, 6e9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    6e98:	f04f 0a02 	mov.w	sl, #2
    6e9c:	4651      	mov	r1, sl
    6e9e:	f007 fa92 	bl	e3c6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6ea2:	4631      	mov	r1, r6
    6ea4:	2603      	movs	r6, #3
    6ea6:	4620      	mov	r0, r4
    6ea8:	464a      	mov	r2, r9
    6eaa:	462b      	mov	r3, r5
    6eac:	9600      	str	r6, [sp, #0]
    6eae:	f006 fa81 	bl	d3b4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6eb2:	4620      	mov	r0, r4
    6eb4:	4629      	mov	r1, r5
    6eb6:	f006 fb3b 	bl	d530 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6eba:	b158      	cbz	r0, 6ed4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf4>
    6ebc:	4644      	mov	r4, r8
    6ebe:	a801      	add	r0, sp, #4
    6ec0:	e000      	b.n	6ec4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6ec2:	e005      	b.n	6ed0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xf0>
    6ec4:	f007 fb1f 	bl	e506 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6ec8:	9802      	ldr	r0, [sp, #8]
    6eca:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    6ece:	753c      	strb	r4, [r7, #20]
    6ed0:	2001      	movs	r0, #1
    6ed2:	e7cd      	b.n	6e70 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x90>
    6ed4:	2184      	movs	r1, #132	; 0x84
    6ed6:	202b      	movs	r0, #43	; 0x2b
    6ed8:	f7fd feda 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6edc:	20000f48 	.word	0x20000f48

00006ee0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6ee0:	4901      	ldr	r1, [pc, #4]	; (6ee8 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6ee2:	2001      	movs	r0, #1
    6ee4:	7008      	strb	r0, [r1, #0]
    6ee6:	4770      	bx	lr
    6ee8:	20000289 	.word	0x20000289

00006eec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ef0:	0006      	movs	r6, r0
    6ef2:	d00a      	beq.n	6f0a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6ef4:	4825      	ldr	r0, [pc, #148]	; (6f8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6ef6:	7801      	ldrb	r1, [r0, #0]
    6ef8:	b151      	cbz	r1, 6f10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6efa:	2100      	movs	r1, #0
    6efc:	7071      	strb	r1, [r6, #1]
    6efe:	2203      	movs	r2, #3
    6f00:	7032      	strb	r2, [r6, #0]
    6f02:	2201      	movs	r2, #1
    6f04:	7132      	strb	r2, [r6, #4]
    6f06:	7001      	strb	r1, [r0, #0]
    6f08:	e03a      	b.n	6f80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6f0a:	f240 21da 	movw	r1, #730	; 0x2da
    6f0e:	e009      	b.n	6f24 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6f10:	4c1e      	ldr	r4, [pc, #120]	; (6f8c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa0>)
    6f12:	1ce4      	adds	r4, r4, #3
    6f14:	7820      	ldrb	r0, [r4, #0]
    6f16:	b940      	cbnz	r0, 6f2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6f18:	1ca0      	adds	r0, r4, #2
    6f1a:	f007 fb60 	bl	e5de <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6f1e:	b120      	cbz	r0, 6f2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6f20:	f240 21e9 	movw	r1, #745	; 0x2e9
    6f24:	2010      	movs	r0, #16
    6f26:	f7fd feb3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f2a:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    6f2e:	2000      	movs	r0, #0
    6f30:	f7fe f898 	bl	5064 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6f34:	4f16      	ldr	r7, [pc, #88]	; (6f90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6f36:	4605      	mov	r5, r0
    6f38:	6838      	ldr	r0, [r7, #0]
    6f3a:	b160      	cbz	r0, 6f56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6f3c:	8860      	ldrh	r0, [r4, #2]
    6f3e:	42a8      	cmp	r0, r5
    6f40:	d309      	bcc.n	6f56 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6a>
    6f42:	1b40      	subs	r0, r0, r5
    6f44:	b2c0      	uxtb	r0, r0
    6f46:	2101      	movs	r1, #1
    6f48:	f006 fcfd 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6f4c:	b158      	cbz	r0, 6f66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6f4e:	4631      	mov	r1, r6
    6f50:	f000 f84e 	bl	6ff0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x2c>
    6f54:	e006      	b.n	6f64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x78>
    6f56:	480f      	ldr	r0, [pc, #60]	; (6f94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    6f58:	6800      	ldr	r0, [r0, #0]
    6f5a:	b120      	cbz	r0, 6f66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7a>
    6f5c:	8860      	ldrh	r0, [r4, #2]
    6f5e:	4631      	mov	r1, r6
    6f60:	f000 f8de 	bl	7120 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x120>
    6f64:	b960      	cbnz	r0, 6f80 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x94>
    6f66:	1ca0      	adds	r0, r4, #2
    6f68:	f007 fb39 	bl	e5de <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6f6c:	b910      	cbnz	r0, 6f74 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    6f6e:	8861      	ldrh	r1, [r4, #2]
    6f70:	4541      	cmp	r1, r8
    6f72:	d1e1      	bne.n	6f38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x4c>
    6f74:	4808      	ldr	r0, [pc, #32]	; (6f98 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>)
    6f76:	6801      	ldr	r1, [r0, #0]
    6f78:	b129      	cbz	r1, 6f86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6f7a:	4630      	mov	r0, r6
    6f7c:	4788      	blx	r1
    6f7e:	b110      	cbz	r0, 6f86 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6f80:	2001      	movs	r0, #1
    6f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6f86:	2000      	movs	r0, #0
    6f88:	e7fb      	b.n	6f82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x96>
    6f8a:	0000      	.short	0x0000
    6f8c:	20000289 	.word	0x20000289
    6f90:	200000ec 	.word	0x200000ec
    6f94:	200000f0 	.word	0x200000f0
    6f98:	200000f4 	.word	0x200000f4

00006f9c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6f9c:	4901      	ldr	r1, [pc, #4]	; (6fa4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    6f9e:	7008      	strb	r0, [r1, #0]
    6fa0:	f000 b95c 	b.w	725c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>
    6fa4:	20000288 	.word	0x20000288

00006fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6fa8:	4801      	ldr	r0, [pc, #4]	; (6fb0 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6faa:	7800      	ldrb	r0, [r0, #0]
    6fac:	f7fd bc94 	b.w	48d8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6fb0:	20000288 	.word	0x20000288

00006fb4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>:
    6fb4:	4902      	ldr	r1, [pc, #8]	; (6fc0 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0xc>)
    6fb6:	4801      	ldr	r0, [pc, #4]	; (6fbc <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q+0x8>)
    6fb8:	6008      	str	r0, [r1, #0]
    6fba:	4770      	bx	lr
    6fbc:	000073c9 	.word	0x000073c9
    6fc0:	200000ec 	.word	0x200000ec

00006fc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    6fc4:	4905      	ldr	r1, [pc, #20]	; (6fdc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x18>)
    6fc6:	4804      	ldr	r0, [pc, #16]	; (6fd8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14>)
    6fc8:	6008      	str	r0, [r1, #0]
    6fca:	4906      	ldr	r1, [pc, #24]	; (6fe4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x20>)
    6fcc:	4804      	ldr	r0, [pc, #16]	; (6fe0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1c>)
    6fce:	6008      	str	r0, [r1, #0]
    6fd0:	4906      	ldr	r1, [pc, #24]	; (6fec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x28>)
    6fd2:	4805      	ldr	r0, [pc, #20]	; (6fe8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x24>)
    6fd4:	6008      	str	r0, [r1, #0]
    6fd6:	4770      	bx	lr
    6fd8:	000073c9 	.word	0x000073c9
    6fdc:	200000ec 	.word	0x200000ec
    6fe0:	00008a8d 	.word	0x00008a8d
    6fe4:	200000f0 	.word	0x200000f0
    6fe8:	00005b29 	.word	0x00005b29
    6fec:	200000f4 	.word	0x200000f4
    6ff0:	b570      	push	{r4, r5, r6, lr}
    6ff2:	0005      	movs	r5, r0
    6ff4:	460c      	mov	r4, r1
    6ff6:	d02e      	beq.n	7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    6ff8:	4818      	ldr	r0, [pc, #96]	; (705c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    6ffa:	6802      	ldr	r2, [r0, #0]
    6ffc:	b35a      	cbz	r2, 7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    6ffe:	4628      	mov	r0, r5
    7000:	4790      	blx	r2
    7002:	b340      	cbz	r0, 7056 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x56>
    7004:	7820      	ldrb	r0, [r4, #0]
    7006:	2811      	cmp	r0, #17
    7008:	d002      	beq.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>
    700a:	2814      	cmp	r0, #20
    700c:	d003      	beq.n	7016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    700e:	e020      	b.n	7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    7010:	7920      	ldrb	r0, [r4, #4]
    7012:	b1f0      	cbz	r0, 7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    7014:	e00a      	b.n	702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    7016:	7920      	ldrb	r0, [r4, #4]
    7018:	b120      	cbz	r0, 7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>
    701a:	4628      	mov	r0, r5
    701c:	f007 fcf3 	bl	ea06 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7020:	b120      	cbz	r0, 702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>
    7022:	e016      	b.n	7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    7024:	490e      	ldr	r1, [pc, #56]	; (7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7026:	2000      	movs	r0, #0
    7028:	7008      	strb	r0, [r1, #0]
    702a:	e012      	b.n	7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    702c:	88e4      	ldrh	r4, [r4, #6]
    702e:	2100      	movs	r1, #0
    7030:	4620      	mov	r0, r4
    7032:	f006 fc88 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7036:	b160      	cbz	r0, 7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    7038:	8800      	ldrh	r0, [r0, #0]
    703a:	f006 fe0c 	bl	dc56 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    703e:	2100      	movs	r1, #0
    7040:	4620      	mov	r0, r4
    7042:	f7fe f8ad 	bl	51a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7046:	b120      	cbz	r0, 7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    7048:	f240 1171 	movw	r1, #369	; 0x171
    704c:	2010      	movs	r0, #16
    704e:	f7fd fe1f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7052:	2001      	movs	r0, #1
    7054:	bd70      	pop	{r4, r5, r6, pc}
    7056:	2000      	movs	r0, #0
    7058:	bd70      	pop	{r4, r5, r6, pc}
    705a:	0000      	.short	0x0000
    705c:	200000ec 	.word	0x200000ec
    7060:	2000028c 	.word	0x2000028c
    7064:	b510      	push	{r4, lr}
    7066:	492d      	ldr	r1, [pc, #180]	; (711c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x11c>)
    7068:	b086      	sub	sp, #24
    706a:	7c8a      	ldrb	r2, [r1, #18]
    706c:	7801      	ldrb	r1, [r0, #0]
    706e:	07d3      	lsls	r3, r2, #31
    7070:	d101      	bne.n	7076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    7072:	2919      	cmp	r1, #25
    7074:	d004      	beq.n	7080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>
    7076:	2918      	cmp	r1, #24
    7078:	d01f      	beq.n	70ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    707a:	2912      	cmp	r1, #18
    707c:	d046      	beq.n	710c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10c>
    707e:	e04a      	b.n	7116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    7080:	8880      	ldrh	r0, [r0, #4]
    7082:	f8ad 0000 	strh.w	r0, [sp]
    7086:	a902      	add	r1, sp, #8
    7088:	f006 fea5 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    708c:	b110      	cbz	r0, 7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    708e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    7092:	e035      	b.n	7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    7094:	9803      	ldr	r0, [sp, #12]
    7096:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    709a:	f88d 1002 	strb.w	r1, [sp, #2]
    709e:	7841      	ldrb	r1, [r0, #1]
    70a0:	f88d 1003 	strb.w	r1, [sp, #3]
    70a4:	8840      	ldrh	r0, [r0, #2]
    70a6:	f8ad 0004 	strh.w	r0, [sp, #4]
    70aa:	2102      	movs	r1, #2
    70ac:	4668      	mov	r0, sp
    70ae:	f008 ff85 	bl	ffbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    70b2:	b340      	cbz	r0, 7106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x106>
    70b4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    70b8:	e022      	b.n	7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    70ba:	0791      	lsls	r1, r2, #30
    70bc:	d42b      	bmi.n	7116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    70be:	8884      	ldrh	r4, [r0, #4]
    70c0:	a903      	add	r1, sp, #12
    70c2:	4620      	mov	r0, r4
    70c4:	f008 fd99 	bl	fbfa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    70c8:	b110      	cbz	r0, 70d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>
    70ca:	f240 11a5 	movw	r1, #421	; 0x1a5
    70ce:	e017      	b.n	7100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>
    70d0:	f8ad 4000 	strh.w	r4, [sp]
    70d4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    70d8:	f8ad 0002 	strh.w	r0, [sp, #2]
    70dc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    70e0:	f8ad 0004 	strh.w	r0, [sp, #4]
    70e4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    70e8:	f8ad 0006 	strh.w	r0, [sp, #6]
    70ec:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    70f0:	f8ad 0008 	strh.w	r0, [sp, #8]
    70f4:	4668      	mov	r0, sp
    70f6:	f008 fdfe 	bl	fcf6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    70fa:	b120      	cbz	r0, 7106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x106>
    70fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    7100:	2010      	movs	r0, #16
    7102:	f7fd fdc5 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7106:	2001      	movs	r0, #1
    7108:	b006      	add	sp, #24
    710a:	bd10      	pop	{r4, pc}
    710c:	0751      	lsls	r1, r2, #29
    710e:	d402      	bmi.n	7116 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x116>
    7110:	7b80      	ldrb	r0, [r0, #14]
    7112:	07c0      	lsls	r0, r0, #31
    7114:	d0f7      	beq.n	7106 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x106>
    7116:	2000      	movs	r0, #0
    7118:	e7f6      	b.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    711a:	0000      	.short	0x0000
    711c:	20000f48 	.word	0x20000f48
    7120:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7124:	b087      	sub	sp, #28
    7126:	460c      	mov	r4, r1
    7128:	a902      	add	r1, sp, #8
    712a:	9807      	ldr	r0, [sp, #28]
    712c:	f006 fe53 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7130:	2800      	cmp	r0, #0
    7132:	d17d      	bne.n	7230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    7134:	f8df 9120 	ldr.w	r9, [pc, #288]	; 7258 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x258>
    7138:	f04f 0a01 	mov.w	sl, #1
    713c:	4680      	mov	r8, r0
    713e:	9803      	ldr	r0, [sp, #12]
    7140:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    7144:	2800      	cmp	r0, #0
    7146:	d00c      	beq.n	7162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    7148:	f8d9 2000 	ldr.w	r2, [r9]
    714c:	b162      	cbz	r2, 7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    714e:	4621      	mov	r1, r4
    7150:	9807      	ldr	r0, [sp, #28]
    7152:	4790      	blx	r2
    7154:	b140      	cbz	r0, 7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>
    7156:	4620      	mov	r0, r4
    7158:	f7ff ff84 	bl	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    715c:	2800      	cmp	r0, #0
    715e:	d1ee      	bne.n	713e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x13e>
    7160:	2001      	movs	r0, #1
    7162:	b009      	add	sp, #36	; 0x24
    7164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7168:	9d03      	ldr	r5, [sp, #12]
    716a:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    716e:	3570      	adds	r5, #112	; 0x70
    7170:	b950      	cbnz	r0, 7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    7172:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    7176:	f88d 0004 	strb.w	r0, [sp, #4]
    717a:	9801      	ldr	r0, [sp, #4]
    717c:	9001      	str	r0, [sp, #4]
    717e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7182:	b108      	cbz	r0, 7188 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x188>
    7184:	2001      	movs	r0, #1
    7186:	e000      	b.n	718a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18a>
    7188:	2000      	movs	r0, #0
    718a:	4683      	mov	fp, r0
    718c:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    7190:	b1c0      	cbz	r0, 71c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    7192:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    7196:	0780      	lsls	r0, r0, #30
    7198:	d514      	bpl.n	71c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c4>
    719a:	f884 8001 	strb.w	r8, [r4, #1]
    719e:	f884 a000 	strb.w	sl, [r4]
    71a2:	f884 8004 	strb.w	r8, [r4, #4]
    71a6:	9907      	ldr	r1, [sp, #28]
    71a8:	f8a4 1005 	strh.w	r1, [r4, #5]
    71ac:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    71b0:	71e1      	strb	r1, [r4, #7]
    71b2:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    71b6:	8121      	strh	r1, [r4, #8]
    71b8:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    71bc:	8161      	strh	r1, [r4, #10]
    71be:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    71c2:	e7c8      	b.n	7156 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156>
    71c4:	9807      	ldr	r0, [sp, #28]
    71c6:	f7fe f993 	bl	54f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    71ca:	0007      	movs	r7, r0
    71cc:	d00d      	beq.n	71ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ea>
    71ce:	f006 f9d3 	bl	d578 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    71d2:	0006      	movs	r6, r0
    71d4:	d015      	beq.n	7202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    71d6:	f884 8001 	strb.w	r8, [r4, #1]
    71da:	200d      	movs	r0, #13
    71dc:	7020      	strb	r0, [r4, #0]
    71de:	9807      	ldr	r0, [sp, #28]
    71e0:	80e0      	strh	r0, [r4, #6]
    71e2:	8126      	strh	r6, [r4, #8]
    71e4:	f884 a004 	strb.w	sl, [r4, #4]
    71e8:	e007      	b.n	71fa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1fa>
    71ea:	f240 2133 	movw	r1, #563	; 0x233
    71ee:	e02d      	b.n	724c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24c>
    71f0:	2100      	movs	r1, #0
    71f2:	4638      	mov	r0, r7
    71f4:	460a      	mov	r2, r1
    71f6:	f006 fad5 	bl	d7a4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    71fa:	1e76      	subs	r6, r6, #1
    71fc:	b2b6      	uxth	r6, r6
    71fe:	d2f7      	bcs.n	71f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f0>
    7200:	e7a9      	b.n	7156 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156>
    7202:	9807      	ldr	r0, [sp, #28]
    7204:	f7fe f95e 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7208:	b1f0      	cbz	r0, 7248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>
    720a:	f1bb 0f00 	cmp.w	fp, #0
    720e:	d020      	beq.n	7252 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x252>
    7210:	f006 f8e7 	bl	d3e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7214:	b160      	cbz	r0, 7230 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x230>
    7216:	9807      	ldr	r0, [sp, #28]
    7218:	f006 fd1d 	bl	dc56 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    721c:	2100      	movs	r1, #0
    721e:	9807      	ldr	r0, [sp, #28]
    7220:	f7fd ffbe 	bl	51a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7224:	f884 8001 	strb.w	r8, [r4, #1]
    7228:	210a      	movs	r1, #10
    722a:	4640      	mov	r0, r8
    722c:	7021      	strb	r1, [r4, #0]
    722e:	e000      	b.n	7232 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x232>
    7230:	e00f      	b.n	7252 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x252>
    7232:	f884 8004 	strb.w	r8, [r4, #4]
    7236:	9907      	ldr	r1, [sp, #28]
    7238:	f8a4 1005 	strh.w	r1, [r4, #5]
    723c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    7240:	71e1      	strb	r1, [r4, #7]
    7242:	3524      	adds	r5, #36	; 0x24
    7244:	7028      	strb	r0, [r5, #0]
    7246:	e786      	b.n	7156 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x156>
    7248:	f240 2151 	movw	r1, #593	; 0x251
    724c:	2010      	movs	r0, #16
    724e:	f7fd fd1f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7252:	2000      	movs	r0, #0
    7254:	e785      	b.n	7162 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x162>
    7256:	0000      	.short	0x0000
    7258:	200000f0 	.word	0x200000f0
    725c:	4804      	ldr	r0, [pc, #16]	; (7270 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x270>)
    725e:	2100      	movs	r1, #0
    7260:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7264:	7001      	strb	r1, [r0, #0]
    7266:	8042      	strh	r2, [r0, #2]
    7268:	1f00      	subs	r0, r0, #4
    726a:	f8a0 1001 	strh.w	r1, [r0, #1]
    726e:	4770      	bx	lr
    7270:	2000028c 	.word	0x2000028c

00007274 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    7274:	b5f0      	push	{r4, r5, r6, r7, lr}
    7276:	f06f 021f 	mvn.w	r2, #31
    727a:	0c01      	lsrs	r1, r0, #16
    727c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7280:	251f      	movs	r5, #31
    7282:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7286:	3854      	subs	r0, #84	; 0x54
    7288:	d00d      	beq.n	72a6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    728a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    728e:	3855      	subs	r0, #85	; 0x55
    7290:	d009      	beq.n	72a6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7292:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7296:	38aa      	subs	r0, #170	; 0xaa
    7298:	d005      	beq.n	72a6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    729a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    729e:	38aa      	subs	r0, #170	; 0xaa
    72a0:	d001      	beq.n	72a6 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    72a2:	2001      	movs	r0, #1
    72a4:	e000      	b.n	72a8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    72a6:	2000      	movs	r0, #0
    72a8:	2200      	movs	r2, #0
    72aa:	4613      	mov	r3, r2
    72ac:	ea4f 0402 	mov.w	r4, r2
    72b0:	ea82 0701 	eor.w	r7, r2, r1
    72b4:	43ff      	mvns	r7, r7
    72b6:	431f      	orrs	r7, r3
    72b8:	1c7f      	adds	r7, r7, #1
    72ba:	d00f      	beq.n	72dc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    72bc:	f006 0701 	and.w	r7, r6, #1
    72c0:	0852      	lsrs	r2, r2, #1
    72c2:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    72c6:	f005 0701 	and.w	r7, r5, #1
    72ca:	085b      	lsrs	r3, r3, #1
    72cc:	0876      	lsrs	r6, r6, #1
    72ce:	086d      	lsrs	r5, r5, #1
    72d0:	1c64      	adds	r4, r4, #1
    72d2:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    72d6:	2c16      	cmp	r4, #22
    72d8:	d3ea      	bcc.n	72b0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    72da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    72dc:	2000      	movs	r0, #0
    72de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000072e0 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    72e0:	b510      	push	{r4, lr}
    72e2:	e9d0 2100 	ldrd	r2, r1, [r0]
    72e6:	4b09      	ldr	r3, [pc, #36]	; (730c <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    72e8:	4c09      	ldr	r4, [pc, #36]	; (7310 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    72ea:	4353      	muls	r3, r2
    72ec:	4354      	muls	r4, r2
    72ee:	4051      	eors	r1, r2
    72f0:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    72f4:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    72f8:	ea4f 41f1 	mov.w	r1, r1, ror #19
    72fc:	e9c0 2100 	strd	r2, r1, [r0]
    7300:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    7304:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7308:	4618      	mov	r0, r3
    730a:	bd10      	pop	{r4, pc}
    730c:	c6ef3760 	.word	0xc6ef3760
    7310:	9e3779bb 	.word	0x9e3779bb

00007314 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    7314:	b570      	push	{r4, r5, r6, lr}
    7316:	4604      	mov	r4, r0
    7318:	7c00      	ldrb	r0, [r0, #16]
    731a:	b300      	cbz	r0, 735e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    731c:	2802      	cmp	r0, #2
    731e:	d01e      	beq.n	735e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    7320:	f05f 0001 	movs.w	r0, #1
    7324:	f104 0149 	add.w	r1, r4, #73	; 0x49
    7328:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    732c:	460d      	mov	r5, r1
    732e:	b1c0      	cbz	r0, 7362 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    7330:	7de0      	ldrb	r0, [r4, #23]
    7332:	b1f0      	cbz	r0, 7372 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    7334:	f8d4 0011 	ldr.w	r0, [r4, #17]
    7338:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    733c:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    7340:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    7344:	7c20      	ldrb	r0, [r4, #16]
    7346:	f007 fac1 	bl	e8cc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    734a:	7620      	strb	r0, [r4, #24]
    734c:	2008      	movs	r0, #8
    734e:	7660      	strb	r0, [r4, #25]
    7350:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7354:	4629      	mov	r1, r5
    7356:	f007 faa5 	bl	e8a4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    735a:	b9a8      	cbnz	r0, 7388 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    735c:	e00e      	b.n	737c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    735e:	2000      	movs	r0, #0
    7360:	e7e0      	b.n	7324 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    7362:	2000      	movs	r0, #0
    7364:	f7fe fb92 	bl	5a8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7368:	2800      	cmp	r0, #0
    736a:	d1eb      	bne.n	7344 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    736c:	f240 41aa 	movw	r1, #1194	; 0x4aa
    7370:	e001      	b.n	7376 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    7372:	f240 41ae 	movw	r1, #1198	; 0x4ae
    7376:	202d      	movs	r0, #45	; 0x2d
    7378:	f7fd fc8a 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    737c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7380:	4629      	mov	r1, r5
    7382:	f007 fa98 	bl	e8b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7386:	b100      	cbz	r0, 738a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    7388:	2001      	movs	r0, #1
    738a:	76a0      	strb	r0, [r4, #26]
    738c:	7e20      	ldrb	r0, [r4, #24]
    738e:	b130      	cbz	r0, 739e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    7390:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    7394:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7398:	f006 fcda 	bl	dd50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    739c:	7660      	strb	r0, [r4, #25]
    739e:	2500      	movs	r5, #0
    73a0:	6425      	str	r5, [r4, #64]	; 0x40
    73a2:	f005 f960 	bl	c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    73a6:	6460      	str	r0, [r4, #68]	; 0x44
    73a8:	2100      	movs	r1, #0
    73aa:	4620      	mov	r0, r4
    73ac:	f007 fbad 	bl	eb0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    73b0:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    73b4:	78a0      	ldrb	r0, [r4, #2]
    73b6:	0740      	lsls	r0, r0, #29
    73b8:	d505      	bpl.n	73c6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xb2>
    73ba:	4620      	mov	r0, r4
    73bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    73c0:	2100      	movs	r1, #0
    73c2:	f000 bdff 	b.w	7fc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    73c6:	bd70      	pop	{r4, r5, r6, pc}

000073c8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    73c8:	b508      	push	{r3, lr}
    73ca:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    73ce:	f88d 2000 	strb.w	r2, [sp]
    73d2:	9a00      	ldr	r2, [sp, #0]
    73d4:	9200      	str	r2, [sp, #0]
    73d6:	f89d 3000 	ldrb.w	r3, [sp]
    73da:	2200      	movs	r2, #0
    73dc:	b163      	cbz	r3, 73f8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    73de:	704a      	strb	r2, [r1, #1]
    73e0:	2317      	movs	r3, #23
    73e2:	700b      	strb	r3, [r1, #0]
    73e4:	f850 3f95 	ldr.w	r3, [r0, #149]!
    73e8:	604b      	str	r3, [r1, #4]
    73ea:	6843      	ldr	r3, [r0, #4]
    73ec:	608b      	str	r3, [r1, #8]
    73ee:	7a03      	ldrb	r3, [r0, #8]
    73f0:	730b      	strb	r3, [r1, #12]
    73f2:	f800 2c01 	strb.w	r2, [r0, #-1]
    73f6:	e03b      	b.n	7470 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    73f8:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    73fc:	f88d 3000 	strb.w	r3, [sp]
    7400:	9b00      	ldr	r3, [sp, #0]
    7402:	9300      	str	r3, [sp, #0]
    7404:	f89d 3000 	ldrb.w	r3, [sp]
    7408:	b143      	cbz	r3, 741c <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    740a:	704a      	strb	r2, [r1, #1]
    740c:	2305      	movs	r3, #5
    740e:	700b      	strb	r3, [r1, #0]
    7410:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    7414:	604b      	str	r3, [r1, #4]
    7416:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    741a:	e029      	b.n	7470 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    741c:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    7420:	f88d 3000 	strb.w	r3, [sp]
    7424:	9b00      	ldr	r3, [sp, #0]
    7426:	9300      	str	r3, [sp, #0]
    7428:	f89d 3000 	ldrb.w	r3, [sp]
    742c:	b11b      	cbz	r3, 7436 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    742e:	bf00      	nop
    7430:	f007 fb42 	bl	eab8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    7434:	e01c      	b.n	7470 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    7436:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    743a:	f88d 3000 	strb.w	r3, [sp]
    743e:	9b00      	ldr	r3, [sp, #0]
    7440:	9300      	str	r3, [sp, #0]
    7442:	f89d 3000 	ldrb.w	r3, [sp]
    7446:	b1ab      	cbz	r3, 7474 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    7448:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    744c:	f88d 3000 	strb.w	r3, [sp]
    7450:	9b00      	ldr	r3, [sp, #0]
    7452:	9300      	str	r3, [sp, #0]
    7454:	f89d 3000 	ldrb.w	r3, [sp]
    7458:	2b00      	cmp	r3, #0
    745a:	d1e9      	bne.n	7430 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    745c:	704a      	strb	r2, [r1, #1]
    745e:	2314      	movs	r3, #20
    7460:	700b      	strb	r3, [r1, #0]
    7462:	f850 3f88 	ldr.w	r3, [r0, #136]!
    7466:	604b      	str	r3, [r1, #4]
    7468:	8883      	ldrh	r3, [r0, #4]
    746a:	810b      	strh	r3, [r1, #8]
    746c:	f800 2c02 	strb.w	r2, [r0, #-2]
    7470:	2001      	movs	r0, #1
    7472:	bd08      	pop	{r3, pc}
    7474:	2000      	movs	r0, #0
    7476:	bd08      	pop	{r3, pc}

00007478 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    7478:	b530      	push	{r4, r5, lr}
    747a:	460c      	mov	r4, r1
    747c:	b08d      	sub	sp, #52	; 0x34
    747e:	4605      	mov	r5, r0
    7480:	4601      	mov	r1, r0
    7482:	2220      	movs	r2, #32
    7484:	a802      	add	r0, sp, #8
    7486:	f005 fa63 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    748a:	a80a      	add	r0, sp, #40	; 0x28
    748c:	f007 fbea 	bl	ec64 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    7490:	7aa0      	ldrb	r0, [r4, #10]
    7492:	f88d 0018 	strb.w	r0, [sp, #24]
    7496:	7820      	ldrb	r0, [r4, #0]
    7498:	f88d 0008 	strb.w	r0, [sp, #8]
    749c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    74a0:	f8ad 0000 	strh.w	r0, [sp]
    74a4:	f89d 0000 	ldrb.w	r0, [sp]
    74a8:	f000 0101 	and.w	r1, r0, #1
    74ac:	f3c0 0240 	ubfx	r2, r0, #1, #1
    74b0:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    74b4:	f3c0 0280 	ubfx	r2, r0, #2, #1
    74b8:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    74bc:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    74c0:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    74c4:	f3c0 1200 	ubfx	r2, r0, #4, #1
    74c8:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    74cc:	f3c0 1240 	ubfx	r2, r0, #5, #1
    74d0:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    74d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
    74d8:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    74dc:	f8ad 000a 	strh.w	r0, [sp, #10]
    74e0:	7d20      	ldrb	r0, [r4, #20]
    74e2:	2801      	cmp	r0, #1
    74e4:	d006      	beq.n	74f4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    74e6:	2802      	cmp	r0, #2
    74e8:	d004      	beq.n	74f4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    74ea:	f240 2175 	movw	r1, #629	; 0x275
    74ee:	2006      	movs	r0, #6
    74f0:	f7fd fbce 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74f4:	f88d 000c 	strb.w	r0, [sp, #12]
    74f8:	7a61      	ldrb	r1, [r4, #9]
    74fa:	a80a      	add	r0, sp, #40	; 0x28
    74fc:	f007 fb99 	bl	ec32 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    7500:	7d20      	ldrb	r0, [r4, #20]
    7502:	2101      	movs	r1, #1
    7504:	2802      	cmp	r0, #2
    7506:	d102      	bne.n	750e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    7508:	7d60      	ldrb	r0, [r4, #21]
    750a:	1c40      	adds	r0, r0, #1
    750c:	b2c1      	uxtb	r1, r0
    750e:	7ea0      	ldrb	r0, [r4, #26]
    7510:	1c40      	adds	r0, r0, #1
    7512:	b2c2      	uxtb	r2, r0
    7514:	a80a      	add	r0, sp, #40	; 0x28
    7516:	f007 fb53 	bl	ebc0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    751a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    751e:	0700      	lsls	r0, r0, #28
    7520:	d501      	bpl.n	7526 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    7522:	2000      	movs	r0, #0
    7524:	e020      	b.n	7568 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    7526:	a80a      	add	r0, sp, #40	; 0x28
    7528:	f007 fb5c 	bl	ebe4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    752c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    7530:	2228      	movs	r2, #40	; 0x28
    7532:	f000 fded 	bl	8110 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    7536:	f240 2171 	movw	r1, #625	; 0x271
    753a:	f200 20d9 	addw	r0, r0, #729	; 0x2d9
    753e:	fbb0 f0f1 	udiv	r0, r0, r1
    7542:	4348      	muls	r0, r1
    7544:	f8d4 1002 	ldr.w	r1, [r4, #2]
    7548:	f240 2371 	movw	r3, #625	; 0x271
    754c:	0a0a      	lsrs	r2, r1, #8
    754e:	f240 2171 	movw	r1, #625	; 0x271
    7552:	434a      	muls	r2, r1
    7554:	f8d4 1005 	ldr.w	r1, [r4, #5]
    7558:	0a09      	lsrs	r1, r1, #8
    755a:	4359      	muls	r1, r3
    755c:	4290      	cmp	r0, r2
    755e:	d801      	bhi.n	7564 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    7560:	9204      	str	r2, [sp, #16]
    7562:	e004      	b.n	756e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    7564:	4288      	cmp	r0, r1
    7566:	d801      	bhi.n	756c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    7568:	9004      	str	r0, [sp, #16]
    756a:	e000      	b.n	756e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    756c:	9104      	str	r1, [sp, #16]
    756e:	7ca0      	ldrb	r0, [r4, #18]
    7570:	f88d 0017 	strb.w	r0, [sp, #23]
    7574:	7e20      	ldrb	r0, [r4, #24]
    7576:	2801      	cmp	r0, #1
    7578:	d000      	beq.n	757c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    757a:	2000      	movs	r0, #0
    757c:	f88d 0014 	strb.w	r0, [sp, #20]
    7580:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7582:	f006 fa9e 	bl	dac2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    7586:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    7588:	f006 fb3e 	bl	dc08 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    758c:	2220      	movs	r2, #32
    758e:	a902      	add	r1, sp, #8
    7590:	4628      	mov	r0, r5
    7592:	f005 f9dd 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7596:	980a      	ldr	r0, [sp, #40]	; 0x28
    7598:	6228      	str	r0, [r5, #32]
    759a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    759e:	84a8      	strh	r0, [r5, #36]	; 0x24
    75a0:	7ae0      	ldrb	r0, [r4, #11]
    75a2:	b168      	cbz	r0, 75c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    75a4:	2802      	cmp	r0, #2
    75a6:	d00b      	beq.n	75c0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    75a8:	f05f 0001 	movs.w	r0, #1
    75ac:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    75b0:	68e0      	ldr	r0, [r4, #12]
    75b2:	6528      	str	r0, [r5, #80]	; 0x50
    75b4:	8a20      	ldrh	r0, [r4, #16]
    75b6:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    75ba:	b00d      	add	sp, #52	; 0x34
    75bc:	2000      	movs	r0, #0
    75be:	bd30      	pop	{r4, r5, pc}
    75c0:	2000      	movs	r0, #0
    75c2:	e7f3      	b.n	75ac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

000075c4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    75c4:	4a0a      	ldr	r2, [pc, #40]	; (75f0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    75c6:	b510      	push	{r4, lr}
    75c8:	2100      	movs	r1, #0
    75ca:	7011      	strb	r1, [r2, #0]
    75cc:	4c09      	ldr	r4, [pc, #36]	; (75f4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    75ce:	6060      	str	r0, [r4, #4]
    75d0:	f000 f822 	bl	7618 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    75d4:	b110      	cbz	r0, 75dc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    75d6:	f240 312a 	movw	r1, #810	; 0x32a
    75da:	e004      	b.n	75e6 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    75dc:	68a0      	ldr	r0, [r4, #8]
    75de:	2800      	cmp	r0, #0
    75e0:	d104      	bne.n	75ec <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    75e2:	f240 312d 	movw	r1, #813	; 0x32d
    75e6:	202d      	movs	r0, #45	; 0x2d
    75e8:	f7fd fb52 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75ec:	bd10      	pop	{r4, pc}
    75ee:	0000      	.short	0x0000
    75f0:	20000f64 	.word	0x20000f64
    75f4:	200000f8 	.word	0x200000f8

000075f8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    75f8:	4902      	ldr	r1, [pc, #8]	; (7604 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    75fa:	4801      	ldr	r0, [pc, #4]	; (7600 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    75fc:	6088      	str	r0, [r1, #8]
    75fe:	4770      	bx	lr
    7600:	000080f8 	.word	0x000080f8
    7604:	200000f8 	.word	0x200000f8

00007608 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    7608:	4902      	ldr	r1, [pc, #8]	; (7614 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    760a:	6008      	str	r0, [r1, #0]
    760c:	6889      	ldr	r1, [r1, #8]
    760e:	6809      	ldr	r1, [r1, #0]
    7610:	4708      	bx	r1
    7612:	0000      	.short	0x0000
    7614:	200000f8 	.word	0x200000f8

00007618 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    7618:	4808      	ldr	r0, [pc, #32]	; (763c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    761a:	b510      	push	{r4, lr}
    761c:	7800      	ldrb	r0, [r0, #0]
    761e:	b110      	cbz	r0, 7626 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    7620:	240c      	movs	r4, #12
    7622:	4620      	mov	r0, r4
    7624:	bd10      	pop	{r4, pc}
    7626:	2400      	movs	r4, #0
    7628:	2218      	movs	r2, #24
    762a:	4621      	mov	r1, r4
    762c:	4803      	ldr	r0, [pc, #12]	; (763c <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    762e:	f005 fa09 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7632:	f004 f8c3 	bl	b7bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7636:	f003 fea5 	bl	b384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    763a:	e7f2      	b.n	7622 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    763c:	20000f64 	.word	0x20000f64

00007640 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    7640:	4904      	ldr	r1, [pc, #16]	; (7654 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    7642:	b510      	push	{r4, lr}
    7644:	7809      	ldrb	r1, [r1, #0]
    7646:	2901      	cmp	r1, #1
    7648:	d101      	bne.n	764e <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    764a:	f000 fb81 	bl	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    764e:	2000      	movs	r0, #0
    7650:	bd10      	pop	{r4, pc}
    7652:	0000      	.short	0x0000
    7654:	20000f64 	.word	0x20000f64

00007658 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    7658:	4902      	ldr	r1, [pc, #8]	; (7664 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    765a:	4801      	ldr	r0, [pc, #4]	; (7660 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    765c:	6008      	str	r0, [r1, #0]
    765e:	4770      	bx	lr
    7660:	00007e9d 	.word	0x00007e9d
    7664:	20000104 	.word	0x20000104
    7668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    766c:	000f      	movs	r7, r1
    766e:	4604      	mov	r4, r0
    7670:	d023      	beq.n	76ba <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    7672:	f104 0020 	add.w	r0, r4, #32
    7676:	4605      	mov	r5, r0
    7678:	f007 fadd 	bl	ec36 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    767c:	b9b0      	cbnz	r0, 76ac <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    767e:	78a0      	ldrb	r0, [r4, #2]
    7680:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7684:	b350      	cbz	r0, 76dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    7686:	4628      	mov	r0, r5
    7688:	f007 faac 	bl	ebe4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    768c:	4606      	mov	r6, r0
    768e:	4628      	mov	r0, r5
    7690:	f007 fad1 	bl	ec36 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7694:	1a30      	subs	r0, r6, r0
    7696:	b2c0      	uxtb	r0, r0
    7698:	f007 fb22 	bl	ece0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    769c:	4601      	mov	r1, r0
    769e:	4835      	ldr	r0, [pc, #212]	; (7774 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    76a0:	6842      	ldr	r2, [r0, #4]
    76a2:	4411      	add	r1, r2
    76a4:	6041      	str	r1, [r0, #4]
    76a6:	4628      	mov	r0, r5
    76a8:	f007 fae3 	bl	ec72 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    76ac:	4628      	mov	r0, r5
    76ae:	f007 faa5 	bl	ebfc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    76b2:	4601      	mov	r1, r0
    76b4:	4620      	mov	r0, r4
    76b6:	f007 fa64 	bl	eb82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    76ba:	4d2f      	ldr	r5, [pc, #188]	; (7778 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    76bc:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    76c0:	2100      	movs	r1, #0
    76c2:	6868      	ldr	r0, [r5, #4]
    76c4:	8001      	strh	r1, [r0, #0]
    76c6:	f007 fa72 	bl	ebae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    76ca:	8860      	ldrh	r0, [r4, #2]
    76cc:	2813      	cmp	r0, #19
    76ce:	d013      	beq.n	76f8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    76d0:	dc09      	bgt.n	76e6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    76d2:	2810      	cmp	r0, #16
    76d4:	d036      	beq.n	7744 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    76d6:	2812      	cmp	r0, #18
    76d8:	d109      	bne.n	76ee <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    76da:	e031      	b.n	7740 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    76dc:	4620      	mov	r0, r4
    76de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    76e2:	f000 bb35 	b.w	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    76e6:	2815      	cmp	r0, #21
    76e8:	d00f      	beq.n	770a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    76ea:	281d      	cmp	r0, #29
    76ec:	d00d      	beq.n	770a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    76ee:	f240 616c 	movw	r1, #1644	; 0x66c
    76f2:	202d      	movs	r0, #45	; 0x2d
    76f4:	f7fd facc 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76f8:	2100      	movs	r1, #0
    76fa:	6868      	ldr	r0, [r5, #4]
    76fc:	f006 fe9b 	bl	e436 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7700:	2101      	movs	r1, #1
    7702:	6868      	ldr	r0, [r5, #4]
    7704:	f007 fa53 	bl	ebae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    7708:	e020      	b.n	774c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    770a:	2101      	movs	r1, #1
    770c:	6868      	ldr	r0, [r5, #4]
    770e:	f006 fe92 	bl	e436 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7712:	2101      	movs	r1, #1
    7714:	6868      	ldr	r0, [r5, #4]
    7716:	f007 fa4a 	bl	ebae <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    771a:	b136      	cbz	r6, 772a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    771c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7720:	6868      	ldr	r0, [r5, #4]
    7722:	f006 fea3 	bl	e46c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7726:	2101      	movs	r1, #1
    7728:	e006      	b.n	7738 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    772a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    772e:	6868      	ldr	r0, [r5, #4]
    7730:	f006 fe9c 	bl	e46c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7734:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    7738:	6868      	ldr	r0, [r5, #4]
    773a:	f006 fe9d 	bl	e478 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    773e:	e005      	b.n	774c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    7740:	2106      	movs	r1, #6
    7742:	e000      	b.n	7746 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    7744:	2102      	movs	r1, #2
    7746:	6868      	ldr	r0, [r5, #4]
    7748:	f006 fe75 	bl	e436 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    774c:	4620      	mov	r0, r4
    774e:	f000 fcaf 	bl	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    7752:	8860      	ldrh	r0, [r4, #2]
    7754:	281d      	cmp	r0, #29
    7756:	d006      	beq.n	7766 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    7758:	2815      	cmp	r0, #21
    775a:	d004      	beq.n	7766 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    775c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    775e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    7760:	6868      	ldr	r0, [r5, #4]
    7762:	f006 fe58 	bl	e416 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    7766:	4639      	mov	r1, r7
    7768:	4620      	mov	r0, r4
    776a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    776e:	f000 b9e5 	b.w	7b3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    7772:	0000      	.short	0x0000
    7774:	20000f64 	.word	0x20000f64
    7778:	200000f8 	.word	0x200000f8
    777c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7780:	4d2e      	ldr	r5, [pc, #184]	; (783c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    7782:	4607      	mov	r7, r0
    7784:	7828      	ldrb	r0, [r5, #0]
    7786:	2802      	cmp	r0, #2
    7788:	d005      	beq.n	7796 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    778a:	7828      	ldrb	r0, [r5, #0]
    778c:	2803      	cmp	r0, #3
    778e:	d002      	beq.n	7796 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    7790:	f640 41f7 	movw	r1, #3319	; 0xcf7
    7794:	e029      	b.n	77ea <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    7796:	4c2a      	ldr	r4, [pc, #168]	; (7840 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    7798:	6820      	ldr	r0, [r4, #0]
    779a:	7b01      	ldrb	r1, [r0, #12]
    779c:	b109      	cbz	r1, 77a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    779e:	f007 f9fb 	bl	eb98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    77a2:	6860      	ldr	r0, [r4, #4]
    77a4:	f04f 0800 	mov.w	r8, #0
    77a8:	7802      	ldrb	r2, [r0, #0]
    77aa:	f002 060f 	and.w	r6, r2, #15
    77ae:	b357      	cbz	r7, 7806 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    77b0:	6821      	ldr	r1, [r4, #0]
    77b2:	f101 0349 	add.w	r3, r1, #73	; 0x49
    77b6:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    77ba:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    77be:	d122      	bne.n	7806 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    77c0:	2206      	movs	r2, #6
    77c2:	4619      	mov	r1, r3
    77c4:	3009      	adds	r0, #9
    77c6:	f005 f8b1 	bl	c92c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    77ca:	b9e0      	cbnz	r0, 7806 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    77cc:	4641      	mov	r1, r8
    77ce:	6860      	ldr	r0, [r4, #4]
    77d0:	f006 fe11 	bl	e3f6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    77d4:	b1b8      	cbz	r0, 7806 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    77d6:	782a      	ldrb	r2, [r5, #0]
    77d8:	6820      	ldr	r0, [r4, #0]
    77da:	4631      	mov	r1, r6
    77dc:	2a02      	cmp	r2, #2
    77de:	d007      	beq.n	77f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    77e0:	782a      	ldrb	r2, [r5, #0]
    77e2:	2a03      	cmp	r2, #3
    77e4:	d004      	beq.n	77f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    77e6:	f44f 614d 	mov.w	r1, #3280	; 0xcd0
    77ea:	202d      	movs	r0, #45	; 0x2d
    77ec:	f7fd fa50 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    77f0:	68a2      	ldr	r2, [r4, #8]
    77f2:	782b      	ldrb	r3, [r5, #0]
    77f4:	6952      	ldr	r2, [r2, #20]
    77f6:	f06f 0607 	mvn.w	r6, #7
    77fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    77fe:	58d2      	ldr	r2, [r2, r3]
    7800:	4790      	blx	r2
    7802:	4606      	mov	r6, r0
    7804:	e000      	b.n	7808 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    7806:	2601      	movs	r6, #1
    7808:	7ba8      	ldrb	r0, [r5, #14]
    780a:	b118      	cbz	r0, 7814 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    780c:	f003 ffd6 	bl	b7bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7810:	f003 fdb8 	bl	b384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7814:	2e00      	cmp	r6, #0
    7816:	d00f      	beq.n	7838 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    7818:	6820      	ldr	r0, [r4, #0]
    781a:	f007 fa77 	bl	ed0c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    781e:	b130      	cbz	r0, 782e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    7820:	f003 ffec 	bl	b7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7824:	68a0      	ldr	r0, [r4, #8]
    7826:	6880      	ldr	r0, [r0, #8]
    7828:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    782c:	4700      	bx	r0
    782e:	6820      	ldr	r0, [r4, #0]
    7830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7834:	f000 ba8c 	b.w	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    783c:	20000f64 	.word	0x20000f64
    7840:	200000f8 	.word	0x200000f8
    7844:	b510      	push	{r4, lr}
    7846:	2903      	cmp	r1, #3
    7848:	d002      	beq.n	7850 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    784a:	2905      	cmp	r1, #5
    784c:	d10a      	bne.n	7864 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    784e:	e002      	b.n	7856 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    7850:	f000 fb7e 	bl	7f50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    7854:	e003      	b.n	785e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    7856:	4904      	ldr	r1, [pc, #16]	; (7868 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    7858:	6809      	ldr	r1, [r1, #0]
    785a:	b109      	cbz	r1, 7860 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    785c:	4788      	blx	r1
    785e:	b108      	cbz	r0, 7864 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    7860:	2000      	movs	r0, #0
    7862:	bd10      	pop	{r4, pc}
    7864:	2001      	movs	r0, #1
    7866:	bd10      	pop	{r4, pc}
    7868:	20000104 	.word	0x20000104
    786c:	4a09      	ldr	r2, [pc, #36]	; (7894 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    786e:	0003      	movs	r3, r0
    7870:	6810      	ldr	r0, [r2, #0]
    7872:	d001      	beq.n	7878 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    7874:	f000 ba6c 	b.w	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7878:	2900      	cmp	r1, #0
    787a:	d009      	beq.n	7890 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    787c:	6891      	ldr	r1, [r2, #8]
    787e:	4a06      	ldr	r2, [pc, #24]	; (7898 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    7880:	6909      	ldr	r1, [r1, #16]
    7882:	7812      	ldrb	r2, [r2, #0]
    7884:	f06f 030f 	mvn.w	r3, #15
    7888:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    788c:	5889      	ldr	r1, [r1, r2]
    788e:	4708      	bx	r1
    7890:	4770      	bx	lr
    7892:	0000      	.short	0x0000
    7894:	200000f8 	.word	0x200000f8
    7898:	20000f64 	.word	0x20000f64
    789c:	b570      	push	{r4, r5, r6, lr}
    789e:	4604      	mov	r4, r0
    78a0:	8840      	ldrh	r0, [r0, #2]
    78a2:	2810      	cmp	r0, #16
    78a4:	d019      	beq.n	78da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    78a6:	4d10      	ldr	r5, [pc, #64]	; (78e8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    78a8:	7ba8      	ldrb	r0, [r5, #14]
    78aa:	b120      	cbz	r0, 78b6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    78ac:	f003 fd8a 	bl	b3c4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    78b0:	2040      	movs	r0, #64	; 0x40
    78b2:	f003 ff91 	bl	b7d8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    78b6:	480d      	ldr	r0, [pc, #52]	; (78ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    78b8:	6840      	ldr	r0, [r0, #4]
    78ba:	f004 fa4d 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    78be:	78a0      	ldrb	r0, [r4, #2]
    78c0:	0740      	lsls	r0, r0, #29
    78c2:	d404      	bmi.n	78ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    78c4:	2100      	movs	r1, #0
    78c6:	7922      	ldrb	r2, [r4, #4]
    78c8:	4608      	mov	r0, r1
    78ca:	f004 fad1 	bl	be70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    78ce:	2000      	movs	r0, #0
    78d0:	f004 f8d8 	bl	ba84 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    78d4:	2002      	movs	r0, #2
    78d6:	7028      	strb	r0, [r5, #0]
    78d8:	bd70      	pop	{r4, r5, r6, pc}
    78da:	4620      	mov	r0, r4
    78dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    78e0:	2101      	movs	r1, #1
    78e2:	f7ff bec1 	b.w	7668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    78e6:	0000      	.short	0x0000
    78e8:	20000f64 	.word	0x20000f64
    78ec:	200000f8 	.word	0x200000f8
    78f0:	b510      	push	{r4, lr}
    78f2:	4c12      	ldr	r4, [pc, #72]	; (793c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    78f4:	6820      	ldr	r0, [r4, #0]
    78f6:	f000 f825 	bl	7944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    78fa:	6820      	ldr	r0, [r4, #0]
    78fc:	f007 fa06 	bl	ed0c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    7900:	2800      	cmp	r0, #0
    7902:	6820      	ldr	r0, [r4, #0]
    7904:	d00b      	beq.n	791e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    7906:	490e      	ldr	r1, [pc, #56]	; (7940 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    7908:	780a      	ldrb	r2, [r1, #0]
    790a:	2a02      	cmp	r2, #2
    790c:	d00b      	beq.n	7926 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    790e:	780a      	ldrb	r2, [r1, #0]
    7910:	2a03      	cmp	r2, #3
    7912:	d008      	beq.n	7926 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    7914:	f640 31fe 	movw	r1, #3070	; 0xbfe
    7918:	202d      	movs	r0, #45	; 0x2d
    791a:	f7fd f9b9 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    791e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7922:	f000 ba15 	b.w	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7926:	68a2      	ldr	r2, [r4, #8]
    7928:	7809      	ldrb	r1, [r1, #0]
    792a:	68d2      	ldr	r2, [r2, #12]
    792c:	f06f 0307 	mvn.w	r3, #7
    7930:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    7934:	5851      	ldr	r1, [r2, r1]
    7936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    793a:	4708      	bx	r1
    793c:	200000f8 	.word	0x200000f8
    7940:	20000f64 	.word	0x20000f64
    7944:	b510      	push	{r4, lr}
    7946:	7b01      	ldrb	r1, [r0, #12]
    7948:	b109      	cbz	r1, 794e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    794a:	f007 f925 	bl	eb98 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    794e:	4805      	ldr	r0, [pc, #20]	; (7964 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    7950:	7b80      	ldrb	r0, [r0, #14]
    7952:	2800      	cmp	r0, #0
    7954:	d005      	beq.n	7962 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    7956:	f003 ff31 	bl	b7bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    795a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    795e:	f003 bd11 	b.w	b384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7962:	bd10      	pop	{r4, pc}
    7964:	20000f64 	.word	0x20000f64

00007968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    7968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    796c:	4d58      	ldr	r5, [pc, #352]	; (7ad0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>)
    796e:	4604      	mov	r4, r0
    7970:	b088      	sub	sp, #32
    7972:	7828      	ldrb	r0, [r5, #0]
    7974:	bbf0      	cbnz	r0, 79f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    7976:	7820      	ldrb	r0, [r4, #0]
    7978:	28ff      	cmp	r0, #255	; 0xff
    797a:	d03c      	beq.n	79f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    797c:	2600      	movs	r6, #0
    797e:	81ae      	strh	r6, [r5, #12]
    7980:	606e      	str	r6, [r5, #4]
    7982:	706e      	strb	r6, [r5, #1]
    7984:	70ae      	strb	r6, [r5, #2]
    7986:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    798a:	4b52      	ldr	r3, [pc, #328]	; (7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    798c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 7ad8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>
    7990:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7992:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    7996:	f8d8 0008 	ldr.w	r0, [r8, #8]
    799a:	6840      	ldr	r0, [r0, #4]
    799c:	9003      	str	r0, [sp, #12]
    799e:	4668      	mov	r0, sp
    79a0:	f004 f844 	bl	ba2c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    79a4:	f004 f94c 	bl	bc40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    79a8:	f004 fbb8 	bl	c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    79ac:	f003 ff06 	bl	b7bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    79b0:	f003 fce8 	bl	b384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    79b4:	4849      	ldr	r0, [pc, #292]	; (7adc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    79b6:	f004 fa9d 	bl	bef4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    79ba:	4846      	ldr	r0, [pc, #280]	; (7ad4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    79bc:	1f00      	subs	r0, r0, #4
    79be:	f004 faa3 	bl	bf08 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    79c2:	f104 0020 	add.w	r0, r4, #32
    79c6:	4607      	mov	r7, r0
    79c8:	f007 f953 	bl	ec72 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    79cc:	4638      	mov	r0, r7
    79ce:	f007 f915 	bl	ebfc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    79d2:	4601      	mov	r1, r0
    79d4:	4620      	mov	r0, r4
    79d6:	f007 f8d4 	bl	eb82 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    79da:	f994 000e 	ldrsb.w	r0, [r4, #14]
    79de:	f004 f9b5 	bl	bd4c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    79e2:	7921      	ldrb	r1, [r4, #4]
    79e4:	2000      	movs	r0, #0
    79e6:	f003 ffa5 	bl	b934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    79ea:	60a8      	str	r0, [r5, #8]
    79ec:	b138      	cbz	r0, 79fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    79ee:	7ea0      	ldrb	r0, [r4, #26]
    79f0:	b968      	cbnz	r0, 7a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    79f2:	e007      	b.n	7a04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    79f4:	e7ff      	b.n	79f6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    79f6:	200c      	movs	r0, #12
    79f8:	b008      	add	sp, #32
    79fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    79fe:	2001      	movs	r0, #1
    7a00:	7028      	strb	r0, [r5, #0]
    7a02:	e062      	b.n	7aca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7a04:	7e20      	ldrb	r0, [r4, #24]
    7a06:	b910      	cbnz	r0, 7a0e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    7a08:	78a0      	ldrb	r0, [r4, #2]
    7a0a:	0740      	lsls	r0, r0, #29
    7a0c:	d529      	bpl.n	7a62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7a0e:	f004 fe2a 	bl	c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7a12:	4682      	mov	sl, r0
    7a14:	4651      	mov	r1, sl
    7a16:	6c60      	ldr	r0, [r4, #68]	; 0x44
    7a18:	f7fa fd6a 	bl	24f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7a1c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 7ae0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>
    7a20:	4607      	mov	r7, r0
    7a22:	fb90 f1f9 	sdiv	r1, r0, r9
    7a26:	fb09 7011 	mls	r0, r9, r1, r7
    7a2a:	4241      	negs	r1, r0
    7a2c:	4650      	mov	r0, sl
    7a2e:	f7fa fd2d 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7a32:	6460      	str	r0, [r4, #68]	; 0x44
    7a34:	fb97 f0f9 	sdiv	r0, r7, r9
    7a38:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7a3a:	4408      	add	r0, r1
    7a3c:	6420      	str	r0, [r4, #64]	; 0x40
    7a3e:	f7fe fedf 	bl	6800 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7a42:	6c21      	ldr	r1, [r4, #64]	; 0x40
    7a44:	4288      	cmp	r0, r1
    7a46:	d80c      	bhi.n	7a62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7a48:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    7a4c:	2101      	movs	r1, #1
    7a4e:	4620      	mov	r0, r4
    7a50:	f007 f85b 	bl	eb0a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    7a54:	78a0      	ldrb	r0, [r4, #2]
    7a56:	0740      	lsls	r0, r0, #29
    7a58:	d503      	bpl.n	7a62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfa>
    7a5a:	2101      	movs	r1, #1
    7a5c:	4620      	mov	r0, r4
    7a5e:	f000 fab1 	bl	7fc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    7a62:	f104 0130 	add.w	r1, r4, #48	; 0x30
    7a66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7a68:	f006 f89d 	bl	dba6 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    7a6c:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7a70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7a72:	f006 f89b 	bl	dbac <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    7a76:	f7fe ff29 	bl	68cc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    7a7a:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7a7e:	1cc0      	adds	r0, r0, #3
    7a80:	f006 f959 	bl	dd36 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    7a84:	73a8      	strb	r0, [r5, #14]
    7a86:	78a0      	ldrb	r0, [r4, #2]
    7a88:	07c0      	lsls	r0, r0, #31
    7a8a:	d01e      	beq.n	7aca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7a8c:	a904      	add	r1, sp, #16
    7a8e:	2000      	movs	r0, #0
    7a90:	f005 ff63 	bl	d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7a94:	b120      	cbz	r0, 7aa0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x138>
    7a96:	f640 11c9 	movw	r1, #2505	; 0x9c9
    7a9a:	202d      	movs	r0, #45	; 0x2d
    7a9c:	f7fd f8f8 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aa0:	20ff      	movs	r0, #255	; 0xff
    7aa2:	73e8      	strb	r0, [r5, #15]
    7aa4:	e00c      	b.n	7ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    7aa6:	9806      	ldr	r0, [sp, #24]
    7aa8:	69e1      	ldr	r1, [r4, #28]
    7aaa:	4281      	cmp	r1, r0
    7aac:	d008      	beq.n	7ac0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x158>
    7aae:	7881      	ldrb	r1, [r0, #2]
    7ab0:	73e9      	strb	r1, [r5, #15]
    7ab2:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7ab6:	6129      	str	r1, [r5, #16]
    7ab8:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7abc:	82a8      	strh	r0, [r5, #20]
    7abe:	e004      	b.n	7aca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x162>
    7ac0:	a804      	add	r0, sp, #16
    7ac2:	f7fd fb1d 	bl	5100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7ac6:	2800      	cmp	r0, #0
    7ac8:	d0ed      	beq.n	7aa6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13e>
    7aca:	2000      	movs	r0, #0
    7acc:	e794      	b.n	79f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    7ace:	0000      	.short	0x0000
    7ad0:	20000f64 	.word	0x20000f64
    7ad4:	000080d8 	.word	0x000080d8
    7ad8:	200000f8 	.word	0x200000f8
    7adc:	8e89bed6 	.word	0x8e89bed6
    7ae0:	000f4240 	.word	0x000f4240
    7ae4:	b510      	push	{r4, lr}
    7ae6:	4604      	mov	r4, r0
    7ae8:	f7ff ff3e 	bl	7968 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    7aec:	2800      	cmp	r0, #0
    7aee:	d108      	bne.n	7b02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19a>
    7af0:	4804      	ldr	r0, [pc, #16]	; (7b04 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>)
    7af2:	7800      	ldrb	r0, [r0, #0]
    7af4:	2801      	cmp	r0, #1
    7af6:	d003      	beq.n	7b00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x198>
    7af8:	2100      	movs	r1, #0
    7afa:	4620      	mov	r0, r4
    7afc:	f7ff fdb4 	bl	7668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    7b00:	2000      	movs	r0, #0
    7b02:	bd10      	pop	{r4, pc}
    7b04:	20000f64 	.word	0x20000f64
    7b08:	480a      	ldr	r0, [pc, #40]	; (7b34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1cc>)
    7b0a:	b510      	push	{r4, lr}
    7b0c:	490a      	ldr	r1, [pc, #40]	; (7b38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    7b0e:	6804      	ldr	r4, [r0, #0]
    7b10:	7808      	ldrb	r0, [r1, #0]
    7b12:	2800      	cmp	r0, #0
    7b14:	d00d      	beq.n	7b32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ca>
    7b16:	7808      	ldrb	r0, [r1, #0]
    7b18:	2802      	cmp	r0, #2
    7b1a:	d002      	beq.n	7b22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ba>
    7b1c:	7808      	ldrb	r0, [r1, #0]
    7b1e:	2803      	cmp	r0, #3
    7b20:	d102      	bne.n	7b28 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c0>
    7b22:	4620      	mov	r0, r4
    7b24:	f7ff ff0e 	bl	7944 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    7b28:	4620      	mov	r0, r4
    7b2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b2e:	f000 b90f 	b.w	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>
    7b32:	bd10      	pop	{r4, pc}
    7b34:	200000f8 	.word	0x200000f8
    7b38:	20000f64 	.word	0x20000f64
    7b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b40:	4604      	mov	r4, r0
    7b42:	4827      	ldr	r0, [pc, #156]	; (7be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>)
    7b44:	460d      	mov	r5, r1
    7b46:	6840      	ldr	r0, [r0, #4]
    7b48:	f004 f906 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7b4c:	4e25      	ldr	r6, [pc, #148]	; (7be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    7b4e:	2004      	movs	r0, #4
    7b50:	7030      	strb	r0, [r6, #0]
    7b52:	b325      	cbz	r5, 7b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7b54:	8860      	ldrh	r0, [r4, #2]
    7b56:	2810      	cmp	r0, #16
    7b58:	d02a      	beq.n	7bb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x248>
    7b5a:	f104 0020 	add.w	r0, r4, #32
    7b5e:	4680      	mov	r8, r0
    7b60:	68b5      	ldr	r5, [r6, #8]
    7b62:	f007 f83f 	bl	ebe4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    7b66:	4607      	mov	r7, r0
    7b68:	4640      	mov	r0, r8
    7b6a:	f007 f864 	bl	ec36 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    7b6e:	1a38      	subs	r0, r7, r0
    7b70:	1e40      	subs	r0, r0, #1
    7b72:	b2c0      	uxtb	r0, r0
    7b74:	8861      	ldrh	r1, [r4, #2]
    7b76:	2228      	movs	r2, #40	; 0x28
    7b78:	f000 faea 	bl	8150 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    7b7c:	4405      	add	r5, r0
    7b7e:	78a0      	ldrb	r0, [r4, #2]
    7b80:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    7b84:	b130      	cbz	r0, 7b94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x22c>
    7b86:	6870      	ldr	r0, [r6, #4]
    7b88:	4405      	add	r5, r0
    7b8a:	f007 f8ad 	bl	ece8 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    7b8e:	4428      	add	r0, r5
    7b90:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    7b94:	7922      	ldrb	r2, [r4, #4]
    7b96:	4629      	mov	r1, r5
    7b98:	2000      	movs	r0, #0
    7b9a:	f004 f8ed 	bl	bd78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    7b9e:	8860      	ldrh	r0, [r4, #2]
    7ba0:	2813      	cmp	r0, #19
    7ba2:	d013      	beq.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7ba4:	dc09      	bgt.n	7bba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x252>
    7ba6:	2810      	cmp	r0, #16
    7ba8:	d017      	beq.n	7bda <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x272>
    7baa:	2812      	cmp	r0, #18
    7bac:	d109      	bne.n	7bc2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25a>
    7bae:	e00d      	b.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7bb0:	7921      	ldrb	r1, [r4, #4]
    7bb2:	2000      	movs	r0, #0
    7bb4:	f003 fe72 	bl	b89c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7bb8:	e7f1      	b.n	7b9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x236>
    7bba:	2815      	cmp	r0, #21
    7bbc:	d006      	beq.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7bbe:	281d      	cmp	r0, #29
    7bc0:	d004      	beq.n	7bcc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x264>
    7bc2:	f640 5185 	movw	r1, #3461	; 0xd85
    7bc6:	202d      	movs	r0, #45	; 0x2d
    7bc8:	f7fd f862 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bcc:	7922      	ldrb	r2, [r4, #4]
    7bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7bd2:	2101      	movs	r1, #1
    7bd4:	2000      	movs	r0, #0
    7bd6:	f004 b94b 	b.w	be70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    7bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bde:	0000      	.short	0x0000
    7be0:	200000f8 	.word	0x200000f8
    7be4:	20000f64 	.word	0x20000f64
    7be8:	b510      	push	{r4, lr}
    7bea:	4604      	mov	r4, r0
    7bec:	7800      	ldrb	r0, [r0, #0]
    7bee:	460b      	mov	r3, r1
    7bf0:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    7bf4:	29ff      	cmp	r1, #255	; 0xff
    7bf6:	d010      	beq.n	7c1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b2>
    7bf8:	f104 0297 	add.w	r2, r4, #151	; 0x97
    7bfc:	1e51      	subs	r1, r2, #1
    7bfe:	4618      	mov	r0, r3
    7c00:	f7fe fd7c 	bl	66fc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7c04:	b130      	cbz	r0, 7c14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>
    7c06:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    7c0a:	f040 0002 	orr.w	r0, r0, #2
    7c0e:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    7c12:	e011      	b.n	7c38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d0>
    7c14:	f640 71bc 	movw	r1, #4028	; 0xfbc
    7c18:	e020      	b.n	7c5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    7c1a:	4812      	ldr	r0, [pc, #72]	; (7c64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2fc>)
    7c1c:	6840      	ldr	r0, [r0, #4]
    7c1e:	7801      	ldrb	r1, [r0, #0]
    7c20:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7c24:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    7c28:	f8d0 1003 	ldr.w	r1, [r0, #3]
    7c2c:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    7c30:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    7c34:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    7c38:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    7c3c:	287f      	cmp	r0, #127	; 0x7f
    7c3e:	d00b      	beq.n	7c58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f0>
    7c40:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    7c44:	207f      	movs	r0, #127	; 0x7f
    7c46:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    7c4a:	347e      	adds	r4, #126	; 0x7e
    7c4c:	2001      	movs	r0, #1
    7c4e:	75a0      	strb	r0, [r4, #22]
    7c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7c54:	f7ff b9a8 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7c58:	f640 6137 	movw	r1, #3639	; 0xe37
    7c5c:	202d      	movs	r0, #45	; 0x2d
    7c5e:	f7fd f817 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c62:	0000      	.short	0x0000
    7c64:	200000f8 	.word	0x200000f8
    7c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7c6c:	4690      	mov	r8, r2
    7c6e:	460e      	mov	r6, r1
    7c70:	4604      	mov	r4, r0
    7c72:	2903      	cmp	r1, #3
    7c74:	d004      	beq.n	7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7c76:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    7c7a:	b108      	cbz	r0, 7c80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x318>
    7c7c:	2001      	movs	r0, #1
    7c7e:	e000      	b.n	7c82 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    7c80:	2000      	movs	r0, #0
    7c82:	4681      	mov	r9, r0
    7c84:	f003 fdb4 	bl	b7f0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    7c88:	4605      	mov	r5, r0
    7c8a:	2e03      	cmp	r6, #3
    7c8c:	d003      	beq.n	7c96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32e>
    7c8e:	2701      	movs	r7, #1
    7c90:	2e05      	cmp	r6, #5
    7c92:	d005      	beq.n	7ca0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    7c94:	e008      	b.n	7ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    7c96:	78a0      	ldrb	r0, [r4, #2]
    7c98:	2702      	movs	r7, #2
    7c9a:	f3c0 0040 	ubfx	r0, r0, #1, #1
    7c9e:	e001      	b.n	7ca4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    7ca0:	78a0      	ldrb	r0, [r4, #2]
    7ca2:	07c0      	lsls	r0, r0, #31
    7ca4:	2800      	cmp	r0, #0
    7ca6:	d04a      	beq.n	7d3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    7ca8:	f1b9 0f00 	cmp.w	r9, #0
    7cac:	d146      	bne.n	7d3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7cae:	4826      	ldr	r0, [pc, #152]	; (7d48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e0>)
    7cb0:	7b80      	ldrb	r0, [r0, #14]
    7cb2:	b140      	cbz	r0, 7cc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    7cb4:	f006 f842 	bl	dd3c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7cb8:	f888 0000 	strb.w	r0, [r8]
    7cbc:	28ff      	cmp	r0, #255	; 0xff
    7cbe:	d002      	beq.n	7cc6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    7cc0:	f7fe fd36 	bl	6730 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7cc4:	4305      	orrs	r5, r0
    7cc6:	4e21      	ldr	r6, [pc, #132]	; (7d4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    7cc8:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    7ccc:	6870      	ldr	r0, [r6, #4]
    7cce:	7801      	ldrb	r1, [r0, #0]
    7cd0:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7cd4:	4291      	cmp	r1, r2
    7cd6:	d106      	bne.n	7ce6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x37e>
    7cd8:	2206      	movs	r2, #6
    7cda:	f104 0150 	add.w	r1, r4, #80	; 0x50
    7cde:	1cc0      	adds	r0, r0, #3
    7ce0:	f004 fe24 	bl	c92c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7ce4:	b130      	cbz	r0, 7cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x38c>
    7ce6:	2000      	movs	r0, #0
    7ce8:	f898 1000 	ldrb.w	r1, [r8]
    7cec:	29ff      	cmp	r1, #255	; 0xff
    7cee:	d007      	beq.n	7d00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x398>
    7cf0:	b9a8      	cbnz	r0, 7d1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7cf2:	e001      	b.n	7cf8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    7cf4:	2001      	movs	r0, #1
    7cf6:	e7f7      	b.n	7ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x380>
    7cf8:	7e60      	ldrb	r0, [r4, #25]
    7cfa:	4288      	cmp	r0, r1
    7cfc:	d00f      	beq.n	7d1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7cfe:	e008      	b.n	7d12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7d00:	b138      	cbz	r0, 7d12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3aa>
    7d02:	6871      	ldr	r1, [r6, #4]
    7d04:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d08:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d0c:	f006 febb 	bl	ea86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7d10:	b128      	cbz	r0, 7d1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b6>
    7d12:	2000      	movs	r0, #0
    7d14:	78a1      	ldrb	r1, [r4, #2]
    7d16:	0749      	lsls	r1, r1, #29
    7d18:	d503      	bpl.n	7d22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    7d1a:	b990      	cbnz	r0, 7d42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7d1c:	e00e      	b.n	7d3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7d1e:	2001      	movs	r0, #1
    7d20:	e7f8      	b.n	7d14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ac>
    7d22:	b975      	cbnz	r5, 7d42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7d24:	7be0      	ldrb	r0, [r4, #15]
    7d26:	b108      	cbz	r0, 7d2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    7d28:	42b8      	cmp	r0, r7
    7d2a:	d107      	bne.n	7d3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d4>
    7d2c:	6871      	ldr	r1, [r6, #4]
    7d2e:	f811 0b03 	ldrb.w	r0, [r1], #3
    7d32:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7d36:	f006 fea6 	bl	ea86 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    7d3a:	b110      	cbz	r0, 7d42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    7d3c:	2000      	movs	r0, #0
    7d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7d42:	2001      	movs	r0, #1
    7d44:	e7fb      	b.n	7d3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d6>
    7d46:	0000      	.short	0x0000
    7d48:	20000f64 	.word	0x20000f64
    7d4c:	200000f8 	.word	0x200000f8
    7d50:	b570      	push	{r4, r5, r6, lr}
    7d52:	4604      	mov	r4, r0
    7d54:	6a80      	ldr	r0, [r0, #40]	; 0x28
    7d56:	4d13      	ldr	r5, [pc, #76]	; (7da4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>)
    7d58:	1c40      	adds	r0, r0, #1
    7d5a:	62a0      	str	r0, [r4, #40]	; 0x28
    7d5c:	7ba8      	ldrb	r0, [r5, #14]
    7d5e:	2600      	movs	r6, #0
    7d60:	b120      	cbz	r0, 7d6c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    7d62:	f003 fd2b 	bl	b7bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7d66:	f003 fb0d 	bl	b384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7d6a:	73ae      	strb	r6, [r5, #14]
    7d6c:	702e      	strb	r6, [r5, #0]
    7d6e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    7d72:	b108      	cbz	r0, 7d78 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x410>
    7d74:	2101      	movs	r1, #1
    7d76:	e00f      	b.n	7d98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x430>
    7d78:	7b60      	ldrb	r0, [r4, #13]
    7d7a:	b160      	cbz	r0, 7d96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7d7c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    7d7e:	4288      	cmp	r0, r1
    7d80:	d809      	bhi.n	7d96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42e>
    7d82:	2101      	movs	r1, #1
    7d84:	4620      	mov	r0, r4
    7d86:	f006 ffd6 	bl	ed36 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7d8a:	78a0      	ldrb	r0, [r4, #2]
    7d8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d90:	07c0      	lsls	r0, r0, #31
    7d92:	f7ff b909 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7d96:	2100      	movs	r1, #0
    7d98:	4620      	mov	r0, r4
    7d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7d9e:	f006 bfca 	b.w	ed36 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    7da2:	0000      	.short	0x0000
    7da4:	20000f64 	.word	0x20000f64
    7da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7dac:	4604      	mov	r4, r0
    7dae:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7db2:	4617      	mov	r7, r2
    7db4:	460d      	mov	r5, r1
    7db6:	f88d 0000 	strb.w	r0, [sp]
    7dba:	9800      	ldr	r0, [sp, #0]
    7dbc:	9000      	str	r0, [sp, #0]
    7dbe:	f89d 0000 	ldrb.w	r0, [sp]
    7dc2:	b110      	cbz	r0, 7dca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x462>
    7dc4:	f640 4132 	movw	r1, #3122	; 0xc32
    7dc8:	e054      	b.n	7e74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    7dca:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    7dce:	8828      	ldrh	r0, [r5, #0]
    7dd0:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    7dd4:	2b00      	cmp	r3, #0
    7dd6:	d15d      	bne.n	7e94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x52c>
    7dd8:	68e8      	ldr	r0, [r5, #12]
    7dda:	f006 f80d 	bl	ddf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7dde:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    7de2:	8aa8      	ldrh	r0, [r5, #20]
    7de4:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    7de8:	8ae8      	ldrh	r0, [r5, #22]
    7dea:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    7dee:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    7df2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    7df6:	7e21      	ldrb	r1, [r4, #24]
    7df8:	f104 0849 	add.w	r8, r4, #73	; 0x49
    7dfc:	2600      	movs	r6, #0
    7dfe:	b129      	cbz	r1, 7e0c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a4>
    7e00:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7e04:	4641      	mov	r1, r8
    7e06:	f006 fd56 	bl	e8b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7e0a:	b940      	cbnz	r0, 7e1e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4b6>
    7e0c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    7e10:	b170      	cbz	r0, 7e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    7e12:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    7e16:	4641      	mov	r1, r8
    7e18:	f006 fd44 	bl	e8a4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7e1c:	b140      	cbz	r0, 7e30 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4c8>
    7e1e:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    7e22:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    7e26:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    7e2a:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    7e2e:	e003      	b.n	7e38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d0>
    7e30:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    7e34:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    7e38:	4817      	ldr	r0, [pc, #92]	; (7e98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>)
    7e3a:	2fff      	cmp	r7, #255	; 0xff
    7e3c:	6840      	ldr	r0, [r0, #4]
    7e3e:	7801      	ldrb	r1, [r0, #0]
    7e40:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7e44:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    7e48:	f850 1f03 	ldr.w	r1, [r0, #3]!
    7e4c:	d015      	beq.n	7e7a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x512>
    7e4e:	67a1      	str	r1, [r4, #120]	; 0x78
    7e50:	8880      	ldrh	r0, [r0, #4]
    7e52:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    7e56:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    7e5a:	1e51      	subs	r1, r2, #1
    7e5c:	4638      	mov	r0, r7
    7e5e:	f7fe fc4d 	bl	66fc <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7e62:	b128      	cbz	r0, 7e70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x508>
    7e64:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    7e68:	f040 0002 	orr.w	r0, r0, #2
    7e6c:	7020      	strb	r0, [r4, #0]
    7e6e:	e00a      	b.n	7e86 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    7e70:	f640 4153 	movw	r1, #3155	; 0xc53
    7e74:	202d      	movs	r0, #45	; 0x2d
    7e76:	f7fc ff0b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e7a:	f844 1f6c 	str.w	r1, [r4, #108]!
    7e7e:	8880      	ldrh	r0, [r0, #4]
    7e80:	80a0      	strh	r0, [r4, #4]
    7e82:	60e6      	str	r6, [r4, #12]
    7e84:	8226      	strh	r6, [r4, #16]
    7e86:	8828      	ldrh	r0, [r5, #0]
    7e88:	f7fd fb1c 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7e8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e90:	f005 bc40 	b.w	d714 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7e98:	200000f8 	.word	0x200000f8
    7e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ea0:	4604      	mov	r4, r0
    7ea2:	20ff      	movs	r0, #255	; 0xff
    7ea4:	f88d 0000 	strb.w	r0, [sp]
    7ea8:	2601      	movs	r6, #1
    7eaa:	466a      	mov	r2, sp
    7eac:	2105      	movs	r1, #5
    7eae:	4620      	mov	r0, r4
    7eb0:	f7ff feda 	bl	7c68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7eb4:	b3e8      	cbz	r0, 7f32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7eb6:	4d24      	ldr	r5, [pc, #144]	; (7f48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    7eb8:	4f24      	ldr	r7, [pc, #144]	; (7f4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    7eba:	46b0      	mov	r8, r6
    7ebc:	6868      	ldr	r0, [r5, #4]
    7ebe:	7bfa      	ldrb	r2, [r7, #15]
    7ec0:	f04f 0900 	mov.w	r9, #0
    7ec4:	7801      	ldrb	r1, [r0, #0]
    7ec6:	f3c1 1180 	ubfx	r1, r1, #6, #1
    7eca:	4291      	cmp	r1, r2
    7ecc:	d106      	bne.n	7edc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x574>
    7ece:	2206      	movs	r2, #6
    7ed0:	f107 0110 	add.w	r1, r7, #16
    7ed4:	1cc0      	adds	r0, r0, #3
    7ed6:	f004 fd29 	bl	c92c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7eda:	b350      	cbz	r0, 7f32 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5ca>
    7edc:	686a      	ldr	r2, [r5, #4]
    7ede:	69e0      	ldr	r0, [r4, #28]
    7ee0:	7812      	ldrb	r2, [r2, #0]
    7ee2:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    7ee6:	f3c2 1240 	ubfx	r2, r2, #5, #1
    7eea:	4011      	ands	r1, r2
    7eec:	7001      	strb	r1, [r0, #0]
    7eee:	2201      	movs	r2, #1
    7ef0:	4620      	mov	r0, r4
    7ef2:	69e1      	ldr	r1, [r4, #28]
    7ef4:	f000 f894 	bl	8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>
    7ef8:	2300      	movs	r3, #0
    7efa:	f89d 2000 	ldrb.w	r2, [sp]
    7efe:	4620      	mov	r0, r4
    7f00:	69e1      	ldr	r1, [r4, #28]
    7f02:	f7ff ff51 	bl	7da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    7f06:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    7f0a:	f7ff f84d 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7f0e:	f887 9000 	strb.w	r9, [r7]
    7f12:	2200      	movs	r2, #0
    7f14:	4621      	mov	r1, r4
    7f16:	69e0      	ldr	r0, [r4, #28]
    7f18:	f000 fa58 	bl	83cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    7f1c:	6868      	ldr	r0, [r5, #4]
    7f1e:	69e1      	ldr	r1, [r4, #28]
    7f20:	f8d0 2003 	ldr.w	r2, [r0, #3]
    7f24:	f841 2f03 	str.w	r2, [r1, #3]!
    7f28:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    7f2c:	808a      	strh	r2, [r1, #4]
    7f2e:	7800      	ldrb	r0, [r0, #0]
    7f30:	e000      	b.n	7f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5cc>
    7f32:	e004      	b.n	7f3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d6>
    7f34:	69e1      	ldr	r1, [r4, #28]
    7f36:	f3c0 1080 	ubfx	r0, r0, #6, #1
    7f3a:	7088      	strb	r0, [r1, #2]
    7f3c:	e000      	b.n	7f40 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    7f3e:	2600      	movs	r6, #0
    7f40:	4630      	mov	r0, r6
    7f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f46:	0000      	.short	0x0000
    7f48:	200000f8 	.word	0x200000f8
    7f4c:	20000f64 	.word	0x20000f64
    7f50:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    7f52:	4604      	mov	r4, r0
    7f54:	20ff      	movs	r0, #255	; 0xff
    7f56:	f88d 0000 	strb.w	r0, [sp]
    7f5a:	2501      	movs	r5, #1
    7f5c:	466a      	mov	r2, sp
    7f5e:	2103      	movs	r1, #3
    7f60:	4620      	mov	r0, r4
    7f62:	f7ff fe81 	bl	7c68 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    7f66:	b328      	cbz	r0, 7fb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    7f68:	7b20      	ldrb	r0, [r4, #12]
    7f6a:	b168      	cbz	r0, 7f88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7f6c:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    7f70:	f88d 0004 	strb.w	r0, [sp, #4]
    7f74:	9801      	ldr	r0, [sp, #4]
    7f76:	9001      	str	r0, [sp, #4]
    7f78:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7f7c:	b920      	cbnz	r0, 7f88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    7f7e:	f89d 1000 	ldrb.w	r1, [sp]
    7f82:	4620      	mov	r0, r4
    7f84:	f7ff fe30 	bl	7be8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    7f88:	4e0c      	ldr	r6, [pc, #48]	; (7fbc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    7f8a:	2100      	movs	r1, #0
    7f8c:	6870      	ldr	r0, [r6, #4]
    7f8e:	8001      	strh	r1, [r0, #0]
    7f90:	2104      	movs	r1, #4
    7f92:	f006 fa50 	bl	e436 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7f96:	4620      	mov	r0, r4
    7f98:	f000 f88a 	bl	80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>
    7f9c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    7f9e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7fa0:	6870      	ldr	r0, [r6, #4]
    7fa2:	f006 fa7f 	bl	e4a4 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    7fa6:	4906      	ldr	r1, [pc, #24]	; (7fc0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    7fa8:	2005      	movs	r0, #5
    7faa:	7008      	strb	r0, [r1, #0]
    7fac:	6870      	ldr	r0, [r6, #4]
    7fae:	f003 fed3 	bl	bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7fb2:	e000      	b.n	7fb6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    7fb4:	2500      	movs	r5, #0
    7fb6:	4628      	mov	r0, r5
    7fb8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    7fba:	0000      	.short	0x0000
    7fbc:	200000f8 	.word	0x200000f8
    7fc0:	20000f64 	.word	0x20000f64
    7fc4:	b570      	push	{r4, r5, r6, lr}
    7fc6:	4604      	mov	r4, r0
    7fc8:	460e      	mov	r6, r1
    7fca:	7e40      	ldrb	r0, [r0, #25]
    7fcc:	f7fe fb64 	bl	6698 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    7fd0:	0005      	movs	r5, r0
    7fd2:	d019      	beq.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    7fd4:	2110      	movs	r1, #16
    7fd6:	f006 f89b 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    7fda:	2800      	cmp	r0, #0
    7fdc:	d114      	bne.n	8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
    7fde:	2001      	movs	r0, #1
    7fe0:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    7fe4:	f104 0157 	add.w	r1, r4, #87	; 0x57
    7fe8:	4632      	mov	r2, r6
    7fea:	460c      	mov	r4, r1
    7fec:	4628      	mov	r0, r5
    7fee:	f005 fe47 	bl	dc80 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    7ff2:	4621      	mov	r1, r4
    7ff4:	4c05      	ldr	r4, [pc, #20]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7ff6:	6860      	ldr	r0, [r4, #4]
    7ff8:	f006 fa38 	bl	e46c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7ffc:	6860      	ldr	r0, [r4, #4]
    7ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8002:	2101      	movs	r1, #1
    8004:	f006 ba38 	b.w	e478 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    8008:	bd70      	pop	{r4, r5, r6, pc}
    800a:	0000      	.short	0x0000
    800c:	200000f8 	.word	0x200000f8
    8010:	4802      	ldr	r0, [pc, #8]	; (801c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c>)
    8012:	2101      	movs	r1, #1
    8014:	6800      	ldr	r0, [r0, #0]
    8016:	f7ff bb27 	b.w	7668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    801a:	0000      	.short	0x0000
    801c:	200000f8 	.word	0x200000f8
    8020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8024:	4e21      	ldr	r6, [pc, #132]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    8026:	4680      	mov	r8, r0
    8028:	460c      	mov	r4, r1
    802a:	6870      	ldr	r0, [r6, #4]
    802c:	4615      	mov	r5, r2
    802e:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    8032:	6121      	str	r1, [r4, #16]
    8034:	8881      	ldrh	r1, [r0, #4]
    8036:	8321      	strh	r1, [r4, #24]
    8038:	7981      	ldrb	r1, [r0, #6]
    803a:	76a1      	strb	r1, [r4, #26]
    803c:	8940      	ldrh	r0, [r0, #10]
    803e:	f005 fed7 	bl	ddf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8042:	4607      	mov	r7, r0
    8044:	60e0      	str	r0, [r4, #12]
    8046:	6870      	ldr	r0, [r6, #4]
    8048:	4639      	mov	r1, r7
    804a:	7d80      	ldrb	r0, [r0, #22]
    804c:	f006 f85b 	bl	e106 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8050:	83a0      	strh	r0, [r4, #28]
    8052:	6870      	ldr	r0, [r6, #4]
    8054:	4639      	mov	r1, r7
    8056:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    805a:	f006 f850 	bl	e0fe <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    805e:	6220      	str	r0, [r4, #32]
    8060:	6870      	ldr	r0, [r6, #4]
    8062:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    8066:	82a1      	strh	r1, [r4, #20]
    8068:	8841      	ldrh	r1, [r0, #2]
    806a:	82e1      	strh	r1, [r4, #22]
    806c:	6841      	ldr	r1, [r0, #4]
    806e:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    8072:	7a01      	ldrb	r1, [r0, #8]
    8074:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    8078:	7a41      	ldrb	r1, [r0, #9]
    807a:	f001 011f 	and.w	r1, r1, #31
    807e:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    8082:	7a40      	ldrb	r0, [r0, #9]
    8084:	0940      	lsrs	r0, r0, #5
    8086:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    808a:	f104 0062 	add.w	r0, r4, #98	; 0x62
    808e:	7205      	strb	r5, [r0, #8]
    8090:	7245      	strb	r5, [r0, #9]
    8092:	2101      	movs	r1, #1
    8094:	7281      	strb	r1, [r0, #10]
    8096:	2100      	movs	r1, #0
    8098:	3836      	subs	r0, #54	; 0x36
    809a:	f006 fb77 	bl	e78c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    809e:	f898 000e 	ldrb.w	r0, [r8, #14]
    80a2:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    80a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    80aa:	0000      	.short	0x0000
    80ac:	200000f8 	.word	0x200000f8
    80b0:	b570      	push	{r4, r5, r6, lr}
    80b2:	4d07      	ldr	r5, [pc, #28]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    80b4:	4604      	mov	r4, r0
    80b6:	f100 0149 	add.w	r1, r0, #73	; 0x49
    80ba:	6868      	ldr	r0, [r5, #4]
    80bc:	f006 f9e3 	bl	e486 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    80c0:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    80c4:	6868      	ldr	r0, [r5, #4]
    80c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80ca:	f006 b9e2 	b.w	e492 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    80ce:	0000      	.short	0x0000
    80d0:	200000f8 	.word	0x200000f8
    80d4:	00555555 	.word	0x00555555
    80d8:	000078f1 	.word	0x000078f1
    80dc:	0000777d 	.word	0x0000777d
    80e0:	0000786d 	.word	0x0000786d
    80e4:	00000000 	.word	0x00000000
    80e8:	00007845 	.word	0x00007845
    80ec:	0000789d 	.word	0x0000789d
    80f0:	0000eaad 	.word	0x0000eaad
    80f4:	0000eab3 	.word	0x0000eab3
    80f8:	00007ae5 	.word	0x00007ae5
    80fc:	00007b09 	.word	0x00007b09
    8100:	00008011 	.word	0x00008011
    8104:	000080f4 	.word	0x000080f4
    8108:	000080ec 	.word	0x000080ec
    810c:	000080e8 	.word	0x000080e8

00008110 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    8110:	b510      	push	{r4, lr}
    8112:	1e42      	subs	r2, r0, #1
    8114:	2a02      	cmp	r2, #2
    8116:	d901      	bls.n	811c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    8118:	21ca      	movs	r1, #202	; 0xca
    811a:	e009      	b.n	8130 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    811c:	1e40      	subs	r0, r0, #1
    811e:	2910      	cmp	r1, #16
    8120:	d009      	beq.n	8136 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    8122:	2912      	cmp	r1, #18
    8124:	d00c      	beq.n	8140 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    8126:	2913      	cmp	r1, #19
    8128:	d00a      	beq.n	8140 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    812a:	2915      	cmp	r1, #21
    812c:	d005      	beq.n	813a <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    812e:	21d8      	movs	r1, #216	; 0xd8
    8130:	202f      	movs	r0, #47	; 0x2f
    8132:	f7fc fdad 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8136:	4905      	ldr	r1, [pc, #20]	; (814c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8138:	e004      	b.n	8144 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    813a:	4904      	ldr	r1, [pc, #16]	; (814c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    813c:	1d89      	adds	r1, r1, #6
    813e:	e001      	b.n	8144 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    8140:	4902      	ldr	r1, [pc, #8]	; (814c <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    8142:	1f89      	subs	r1, r1, #6
    8144:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    8148:	bd10      	pop	{r4, pc}
    814a:	0000      	.short	0x0000
    814c:	0000ed00 	.word	0x0000ed00

00008150 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    8150:	1e42      	subs	r2, r0, #1
    8152:	b510      	push	{r4, lr}
    8154:	b2d2      	uxtb	r2, r2
    8156:	2a01      	cmp	r2, #1
    8158:	d903      	bls.n	8162 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    815a:	291d      	cmp	r1, #29
    815c:	d001      	beq.n	8162 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    815e:	21ee      	movs	r1, #238	; 0xee
    8160:	e00d      	b.n	817e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    8162:	2913      	cmp	r1, #19
    8164:	d013      	beq.n	818e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8166:	dc04      	bgt.n	8172 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    8168:	2910      	cmp	r1, #16
    816a:	d00b      	beq.n	8184 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    816c:	2912      	cmp	r1, #18
    816e:	d104      	bne.n	817a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    8170:	e00d      	b.n	818e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    8172:	2915      	cmp	r1, #21
    8174:	d008      	beq.n	8188 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    8176:	291d      	cmp	r1, #29
    8178:	d00e      	beq.n	8198 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    817a:	f44f 7181 	mov.w	r1, #258	; 0x102
    817e:	202f      	movs	r0, #47	; 0x2f
    8180:	f7fc fd86 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8184:	4807      	ldr	r0, [pc, #28]	; (81a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8186:	e004      	b.n	8192 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    8188:	4806      	ldr	r0, [pc, #24]	; (81a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    818a:	3008      	adds	r0, #8
    818c:	e001      	b.n	8192 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    818e:	4805      	ldr	r0, [pc, #20]	; (81a4 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    8190:	1d00      	adds	r0, r0, #4
    8192:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    8196:	bd10      	pop	{r4, pc}
    8198:	f240 315a 	movw	r1, #858	; 0x35a
    819c:	fb10 f001 	smulbb	r0, r0, r1
    81a0:	bd10      	pop	{r4, pc}
    81a2:	0000      	.short	0x0000
    81a4:	0000ecee 	.word	0x0000ecee

000081a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    81a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81ac:	4604      	mov	r4, r0
    81ae:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    81b2:	4615      	mov	r5, r2
    81b4:	460f      	mov	r7, r1
    81b6:	2800      	cmp	r0, #0
    81b8:	d157      	bne.n	826a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    81ba:	4621      	mov	r1, r4
    81bc:	4841      	ldr	r0, [pc, #260]	; (82c4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>)
    81be:	f7fb f855 	bl	326c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    81c2:	4606      	mov	r6, r0
    81c4:	2820      	cmp	r0, #32
    81c6:	d050      	beq.n	826a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc2>
    81c8:	2234      	movs	r2, #52	; 0x34
    81ca:	2100      	movs	r1, #0
    81cc:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    81d0:	f004 fc38 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81d4:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    81d8:	2601      	movs	r6, #1
    81da:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    81de:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    81e2:	b13f      	cbz	r7, 81f4 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4c>
    81e4:	2000      	movs	r0, #0
    81e6:	f000 fbf9 	bl	89dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    81ea:	f000 0007 	and.w	r0, r0, #7
    81ee:	1c40      	adds	r0, r0, #1
    81f0:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    81f4:	4620      	mov	r0, r4
    81f6:	f006 ff63 	bl	f0c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    81fa:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    81fe:	2003      	movs	r0, #3
    8200:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    8204:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    8208:	2700      	movs	r7, #0
    820a:	f804 7fb8 	strb.w	r7, [r4, #184]!
    820e:	f7fa fa99 	bl	2744 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    8212:	8921      	ldrh	r1, [r4, #8]
    8214:	3cb8      	subs	r4, #184	; 0xb8
    8216:	4288      	cmp	r0, r1
    8218:	d800      	bhi.n	821c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x74>
    821a:	4608      	mov	r0, r1
    821c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    8220:	fa1f f880 	uxth.w	r8, r0
    8224:	4620      	mov	r0, r4
    8226:	f006 fbee 	bl	ea06 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    822a:	b308      	cbz	r0, 8270 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc8>
    822c:	f008 f9aa 	bl	10584 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    8230:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    8234:	b281      	uxth	r1, r0
    8236:	4628      	mov	r0, r5
    8238:	f004 fa49 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    823c:	4428      	add	r0, r5
    823e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    8242:	34a4      	adds	r4, #164	; 0xa4
    8244:	f004 fa0f 	bl	c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8248:	4641      	mov	r1, r8
    824a:	f7fa f91f 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    824e:	6220      	str	r0, [r4, #32]
    8250:	f804 7c03 	strb.w	r7, [r4, #-3]
    8254:	7126      	strb	r6, [r4, #4]
    8256:	2001      	movs	r0, #1
    8258:	f006 fd42 	bl	ece0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    825c:	f200 1009 	addw	r0, r0, #265	; 0x109
    8260:	1a28      	subs	r0, r5, r0
    8262:	62a7      	str	r7, [r4, #40]	; 0x28
    8264:	60a0      	str	r0, [r4, #8]
    8266:	3ca4      	subs	r4, #164	; 0xa4
    8268:	e017      	b.n	829a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xf2>
    826a:	200c      	movs	r0, #12
    826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8270:	4620      	mov	r0, r4
    8272:	f006 fe78 	bl	ef66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    8276:	f844 0fbc 	str.w	r0, [r4, #188]!
    827a:	f804 6c1b 	strb.w	r6, [r4, #-27]
    827e:	f004 f9f2 	bl	c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8282:	4606      	mov	r6, r0
    8284:	2000      	movs	r0, #0
    8286:	f006 ffc7 	bl	f218 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    828a:	eb00 0108 	add.w	r1, r0, r8
    828e:	4630      	mov	r0, r6
    8290:	f7fa f8fc 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8294:	6125      	str	r5, [r4, #16]
    8296:	60a0      	str	r0, [r4, #8]
    8298:	3cbc      	subs	r4, #188	; 0xbc
    829a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    829e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    82a2:	f006 ff0b 	bl	f0bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    82a6:	b138      	cbz	r0, 82b8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x110>
    82a8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    82ac:	2100      	movs	r1, #0
    82ae:	4620      	mov	r0, r4
    82b0:	f006 fbcb 	bl	ea4a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    82b4:	2000      	movs	r0, #0
    82b6:	e7d9      	b.n	826c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xc4>
    82b8:	f44f 71f3 	mov.w	r1, #486	; 0x1e6
    82bc:	2030      	movs	r0, #48	; 0x30
    82be:	f7fc fce7 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82c2:	0000      	.short	0x0000
    82c4:	0000f22d 	.word	0x0000f22d

000082c8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    82c8:	4808      	ldr	r0, [pc, #32]	; (82ec <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    82ca:	b510      	push	{r4, lr}
    82cc:	2100      	movs	r1, #0
    82ce:	7001      	strb	r1, [r0, #0]
    82d0:	2201      	movs	r2, #1
    82d2:	7082      	strb	r2, [r0, #2]
    82d4:	7041      	strb	r1, [r0, #1]
    82d6:	3018      	adds	r0, #24
    82d8:	f006 fad7 	bl	e88a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    82dc:	4803      	ldr	r0, [pc, #12]	; (82ec <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x24>)
    82de:	3020      	adds	r0, #32
    82e0:	f006 fad3 	bl	e88a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    82e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82e8:	f006 bd65 	b.w	edb6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    82ec:	20000108 	.word	0x20000108

000082f0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    82f0:	4901      	ldr	r1, [pc, #4]	; (82f8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    82f2:	7008      	strb	r0, [r1, #0]
    82f4:	4770      	bx	lr
    82f6:	0000      	.short	0x0000
    82f8:	20000108 	.word	0x20000108

000082fc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    82fc:	4905      	ldr	r1, [pc, #20]	; (8314 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x18>)
    82fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8302:	fbb1 f1f2 	udiv	r1, r1, r2
    8306:	b510      	push	{r4, lr}
    8308:	f201 2191 	addw	r1, r1, #657	; 0x291
    830c:	f006 fa57 	bl	e7be <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8310:	b280      	uxth	r0, r0
    8312:	bd10      	pop	{r4, pc}
    8314:	0001527d 	.word	0x0001527d

00008318 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    8318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    831c:	4c10      	ldr	r4, [pc, #64]	; (8360 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    831e:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    8322:	f003 fc17 	bl	bb54 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8326:	4606      	mov	r6, r0
    8328:	7820      	ldrb	r0, [r4, #0]
    832a:	b128      	cbz	r0, 8338 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    832c:	4632      	mov	r2, r6
    832e:	4639      	mov	r1, r7
    8330:	4628      	mov	r0, r5
    8332:	f005 fd67 	bl	de04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8336:	4605      	mov	r5, r0
    8338:	6860      	ldr	r0, [r4, #4]
    833a:	4285      	cmp	r5, r0
    833c:	d005      	beq.n	834a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    833e:	68e1      	ldr	r1, [r4, #12]
    8340:	1a28      	subs	r0, r5, r0
    8342:	4408      	add	r0, r1
    8344:	60e0      	str	r0, [r4, #12]
    8346:	f7fb f89b 	bl	3480 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    834a:	6065      	str	r5, [r4, #4]
    834c:	42ae      	cmp	r6, r5
    834e:	d801      	bhi.n	8354 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    8350:	7860      	ldrb	r0, [r4, #1]
    8352:	b110      	cbz	r0, 835a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    8354:	2000      	movs	r0, #0
    8356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    835a:	2001      	movs	r0, #1
    835c:	e7fb      	b.n	8356 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    835e:	0000      	.short	0x0000
    8360:	20000108 	.word	0x20000108

00008364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    8364:	b510      	push	{r4, lr}
    8366:	4604      	mov	r4, r0
    8368:	2905      	cmp	r1, #5
    836a:	d227      	bcs.n	83bc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    836c:	e8df f001 	tbb	[pc, r1]
    8370:	0e030b05 	.word	0x0e030b05
    8374:	000f      	.short	0x000f
    8376:	2100      	movs	r1, #0
    8378:	e000      	b.n	837c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18>
    837a:	2101      	movs	r1, #1
    837c:	4620      	mov	r0, r4
    837e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8382:	f000 b8f5 	b.w	8570 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    8386:	2003      	movs	r0, #3
    8388:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    838c:	bd10      	pop	{r4, pc}
    838e:	f003 fc1d 	bl	bbcc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    8392:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
    8396:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    839a:	f008 f98c 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    839e:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    83a2:	1a09      	subs	r1, r1, r0
    83a4:	4808      	ldr	r0, [pc, #32]	; (83c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x64>)
    83a6:	6842      	ldr	r2, [r0, #4]
    83a8:	440a      	add	r2, r1
    83aa:	6042      	str	r2, [r0, #4]
    83ac:	6882      	ldr	r2, [r0, #8]
    83ae:	4411      	add	r1, r2
    83b0:	6081      	str	r1, [r0, #8]
    83b2:	4620      	mov	r0, r4
    83b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83b8:	f006 be13 	b.w	efe2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fe>
    83bc:	f240 7151 	movw	r1, #1873	; 0x751
    83c0:	2030      	movs	r0, #48	; 0x30
    83c2:	f7fc fc65 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83c6:	0000      	.short	0x0000
    83c8:	20000108 	.word	0x20000108

000083cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    83cc:	b570      	push	{r4, r5, r6, lr}
    83ce:	460c      	mov	r4, r1
    83d0:	4605      	mov	r5, r0
    83d2:	b112      	cbz	r2, 83da <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe>
    83d4:	f240 717b 	movw	r1, #1915	; 0x77b
    83d8:	e010      	b.n	83fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x30>
    83da:	f003 fbbb 	bl	bb54 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    83de:	4601      	mov	r1, r0
    83e0:	2200      	movs	r2, #0
    83e2:	4620      	mov	r0, r4
    83e4:	f006 fece 	bl	f184 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    83e8:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    83ec:	462a      	mov	r2, r5
    83ee:	4905      	ldr	r1, [pc, #20]	; (8404 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x38>)
    83f0:	f7fa fdfe 	bl	2ff0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    83f4:	2800      	cmp	r0, #0
    83f6:	d104      	bne.n	8402 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x36>
    83f8:	f240 7164 	movw	r1, #1892	; 0x764
    83fc:	2030      	movs	r0, #48	; 0x30
    83fe:	f7fc fc47 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8402:	bd70      	pop	{r4, r5, r6, pc}
    8404:	0000f2cd 	.word	0x0000f2cd
    8408:	b510      	push	{r4, lr}
    840a:	280c      	cmp	r0, #12
    840c:	d304      	bcc.n	8418 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c>
    840e:	f240 3116 	movw	r1, #790	; 0x316
    8412:	2006      	movs	r0, #6
    8414:	f7fc fc3c 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8418:	4901      	ldr	r1, [pc, #4]	; (8420 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54>)
    841a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    841e:	bd10      	pop	{r4, pc}
    8420:	0000f4c6 	.word	0x0000f4c6
    8424:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8426:	4c18      	ldr	r4, [pc, #96]	; (8488 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbc>)
    8428:	2001      	movs	r0, #1
    842a:	7060      	strb	r0, [r4, #1]
    842c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8430:	e00b      	b.n	844a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7e>
    8432:	2100      	movs	r1, #0
    8434:	f005 fa87 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8438:	0006      	movs	r6, r0
    843a:	d010      	beq.n	845e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x92>
    843c:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    8440:	f7fa fe08 	bl	3054 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8444:	4630      	mov	r0, r6
    8446:	f006 fe90 	bl	f16a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    844a:	4669      	mov	r1, sp
    844c:	2000      	movs	r0, #0
    844e:	f005 fa84 	bl	d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8452:	b180      	cbz	r0, 8476 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8454:	f44f 7187 	mov.w	r1, #270	; 0x10e
    8458:	2030      	movs	r0, #48	; 0x30
    845a:	f7fc fc19 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    845e:	f44f 7197 	mov.w	r1, #302	; 0x12e
    8462:	e7f9      	b.n	8458 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    8464:	9802      	ldr	r0, [sp, #8]
    8466:	b130      	cbz	r0, 8476 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    8468:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    846c:	b119      	cbz	r1, 8476 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xaa>
    846e:	8800      	ldrh	r0, [r0, #0]
    8470:	42a8      	cmp	r0, r5
    8472:	d1de      	bne.n	8432 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x66>
    8474:	e004      	b.n	8480 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xb4>
    8476:	4668      	mov	r0, sp
    8478:	f7fc fe42 	bl	5100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    847c:	2800      	cmp	r0, #0
    847e:	d0f1      	beq.n	8464 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x98>
    8480:	2000      	movs	r0, #0
    8482:	7060      	strb	r0, [r4, #1]
    8484:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8486:	0000      	.short	0x0000
    8488:	20000108 	.word	0x20000108
    848c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8490:	4604      	mov	r4, r0
    8492:	4836      	ldr	r0, [pc, #216]	; (856c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a0>)
    8494:	461e      	mov	r6, r3
    8496:	4690      	mov	r8, r2
    8498:	7880      	ldrb	r0, [r0, #2]
    849a:	4689      	mov	r9, r1
    849c:	2500      	movs	r5, #0
    849e:	b368      	cbz	r0, 84fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84a0:	f7fc f876 	bl	4590 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    84a4:	b350      	cbz	r0, 84fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84a6:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    84aa:	2802      	cmp	r0, #2
    84ac:	d326      	bcc.n	84fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84ae:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    84b2:	2802      	cmp	r0, #2
    84b4:	d022      	beq.n	84fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84b6:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    84ba:	b9f8      	cbnz	r0, 84fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x130>
    84bc:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    84c0:	f7ff ffa2 	bl	8408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    84c4:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    84c8:	b281      	uxth	r1, r0
    84ca:	8031      	strh	r1, [r6, #0]
    84cc:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    84d0:	2700      	movs	r7, #0
    84d2:	2801      	cmp	r0, #1
    84d4:	d015      	beq.n	8502 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x136>
    84d6:	68e0      	ldr	r0, [r4, #12]
    84d8:	f004 f8f9 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    84dc:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    84e0:	b280      	uxth	r0, r0
    84e2:	4442      	add	r2, r8
    84e4:	eba2 0109 	sub.w	r1, r2, r9
    84e8:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    84ec:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    84f0:	1a82      	subs	r2, r0, r2
    84f2:	fb01 7502 	mla	r5, r1, r2, r7
    84f6:	2001      	movs	r0, #1
    84f8:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    84fc:	4628      	mov	r0, r5
    84fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8502:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    8506:	2803      	cmp	r0, #3
    8508:	d02c      	beq.n	8564 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x198>
    850a:	2101      	movs	r1, #1
    850c:	2000      	movs	r0, #0
    850e:	f005 fd33 	bl	df78 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8512:	6a21      	ldr	r1, [r4, #32]
    8514:	1847      	adds	r7, r0, r1
    8516:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    851a:	8831      	ldrh	r1, [r6, #0]
    851c:	34d0      	adds	r4, #208	; 0xd0
    851e:	f004 f8d6 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8522:	6da2      	ldr	r2, [r4, #88]	; 0x58
    8524:	6e21      	ldr	r1, [r4, #96]	; 0x60
    8526:	1a82      	subs	r2, r0, r2
    8528:	fb01 5502 	mla	r5, r1, r2, r5
    852c:	65a0      	str	r0, [r4, #88]	; 0x58
    852e:	8831      	ldrh	r1, [r6, #0]
    8530:	4638      	mov	r0, r7
    8532:	f004 f8cc 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8536:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    8538:	66a0      	str	r0, [r4, #104]	; 0x68
    853a:	1a41      	subs	r1, r0, r1
    853c:	440d      	add	r5, r1
    853e:	8831      	ldrh	r1, [r6, #0]
    8540:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    8544:	f004 f8c3 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    8548:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    854a:	4442      	add	r2, r8
    854c:	eba2 0109 	sub.w	r1, r2, r9
    8550:	6e22      	ldr	r2, [r4, #96]	; 0x60
    8552:	1a89      	subs	r1, r1, r2
    8554:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    8556:	1e49      	subs	r1, r1, #1
    8558:	1a82      	subs	r2, r0, r2
    855a:	fb01 5502 	mla	r5, r1, r2, r5
    855e:	66e0      	str	r0, [r4, #108]	; 0x6c
    8560:	3cd0      	subs	r4, #208	; 0xd0
    8562:	e7c8      	b.n	84f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x12a>
    8564:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    8568:	e7d3      	b.n	8512 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x146>
    856a:	0000      	.short	0x0000
    856c:	20000108 	.word	0x20000108
    8570:	b538      	push	{r3, r4, r5, lr}
    8572:	2500      	movs	r5, #0
    8574:	4604      	mov	r4, r0
    8576:	2901      	cmp	r1, #1
    8578:	d102      	bne.n	8580 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1b4>
    857a:	4811      	ldr	r0, [pc, #68]	; (85c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>)
    857c:	7840      	ldrb	r0, [r0, #1]
    857e:	b178      	cbz	r0, 85a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1d4>
    8580:	2004      	movs	r0, #4
    8582:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    8586:	bf00      	nop
    8588:	f006 fd24 	bl	efd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    858c:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    8590:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    8594:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    8598:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    859c:	77e5      	strb	r5, [r4, #31]
    859e:	bd38      	pop	{r3, r4, r5, pc}
    85a0:	9500      	str	r5, [sp, #0]
    85a2:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    85a6:	2301      	movs	r3, #1
    85a8:	2200      	movs	r2, #0
    85aa:	4620      	mov	r0, r4
    85ac:	f000 f80a 	bl	85c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    85b0:	2800      	cmp	r0, #0
    85b2:	d0e9      	beq.n	8588 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1bc>
    85b4:	f240 61c9 	movw	r1, #1737	; 0x6c9
    85b8:	2030      	movs	r0, #48	; 0x30
    85ba:	f7fc fb69 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85be:	0000      	.short	0x0000
    85c0:	20000108 	.word	0x20000108
    85c4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    85c8:	4604      	mov	r4, r0
    85ca:	b085      	sub	sp, #20
    85cc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    85d0:	469a      	mov	sl, r3
    85d2:	e9cd 3000 	strd	r3, r0, [sp]
    85d6:	460f      	mov	r7, r1
    85d8:	f007 ffd4 	bl	10584 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    85dc:	4605      	mov	r5, r0
    85de:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    85e2:	f7ff ff11 	bl	8408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    85e6:	4428      	add	r0, r5
    85e8:	f8ad 0008 	strh.w	r0, [sp, #8]
    85ec:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    85f0:	280d      	cmp	r0, #13
    85f2:	d004      	beq.n	85fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x232>
    85f4:	2000      	movs	r0, #0
    85f6:	9003      	str	r0, [sp, #12]
    85f8:	9807      	ldr	r0, [sp, #28]
    85fa:	b110      	cbz	r0, 8602 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    85fc:	e02e      	b.n	865c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    85fe:	2001      	movs	r0, #1
    8600:	e7f9      	b.n	85f6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    8602:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    8606:	2803      	cmp	r0, #3
    8608:	d128      	bne.n	865c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    860a:	9803      	ldr	r0, [sp, #12]
    860c:	b330      	cbz	r0, 865c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    860e:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    8612:	42b8      	cmp	r0, r7
    8614:	d122      	bne.n	865c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x290>
    8616:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    861a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    861e:	68e0      	ldr	r0, [r4, #12]
    8620:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    8624:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    8628:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    862c:	4408      	add	r0, r1
    862e:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    8632:	4620      	mov	r0, r4
    8634:	f006 ff5d 	bl	f4f2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    8638:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    863c:	6220      	str	r0, [r4, #32]
    863e:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    8642:	83a0      	strh	r0, [r4, #28]
    8644:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    8648:	60e0      	str	r0, [r4, #12]
    864a:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    864e:	82a0      	strh	r0, [r4, #20]
    8650:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    8654:	82e0      	strh	r0, [r4, #22]
    8656:	2002      	movs	r0, #2
    8658:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    865c:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    8660:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    8664:	1a38      	subs	r0, r7, r0
    8666:	fa0f f980 	sxth.w	r9, r0
    866a:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    866e:	1a38      	subs	r0, r7, r0
    8670:	fa0f f880 	sxth.w	r8, r0
    8674:	f1b8 0f00 	cmp.w	r8, #0
    8678:	da06      	bge.n	8688 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2bc>
    867a:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    867e:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    8682:	2001      	movs	r0, #1
    8684:	46c8      	mov	r8, r9
    8686:	9000      	str	r0, [sp, #0]
    8688:	ab02      	add	r3, sp, #8
    868a:	464a      	mov	r2, r9
    868c:	4641      	mov	r1, r8
    868e:	4620      	mov	r0, r4
    8690:	f7ff fefc 	bl	848c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xc0>
    8694:	9004      	str	r0, [sp, #16]
    8696:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    869a:	f8df b33c 	ldr.w	fp, [pc, #828]	; 89d8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x60c>
    869e:	b140      	cbz	r0, 86b2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e6>
    86a0:	2801      	cmp	r0, #1
    86a2:	d07d      	beq.n	87a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d4>
    86a4:	2802      	cmp	r0, #2
    86a6:	d052      	beq.n	874e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x382>
    86a8:	2803      	cmp	r0, #3
    86aa:	d07a      	beq.n	87a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d6>
    86ac:	f240 514d 	movw	r1, #1357	; 0x54d
    86b0:	e18e      	b.n	89d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    86b2:	2101      	movs	r1, #1
    86b4:	2000      	movs	r0, #0
    86b6:	f005 fc5f 	bl	df78 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    86ba:	4606      	mov	r6, r0
    86bc:	6a20      	ldr	r0, [r4, #32]
    86be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    86c2:	4430      	add	r0, r6
    86c4:	f004 f803 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    86c8:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    86cc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    86d0:	68e0      	ldr	r0, [r4, #12]
    86d2:	f003 fffc 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    86d6:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    86da:	a901      	add	r1, sp, #4
    86dc:	4668      	mov	r0, sp
    86de:	f003 f99d 	bl	ba1c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    86e2:	e9dd 1200 	ldrd	r1, r2, [sp]
    86e6:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    86ea:	f7fa ff7f 	bl	35ec <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    86ee:	4681      	mov	r9, r0
    86f0:	4620      	mov	r0, r4
    86f2:	f006 fc61 	bl	efb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    86f6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    86fa:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    86fe:	f007 ffe8 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8702:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8706:	4401      	add	r1, r0
    8708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    870c:	fbb1 f0f0 	udiv	r0, r1, r0
    8710:	6a21      	ldr	r1, [r4, #32]
    8712:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    8716:	4431      	add	r1, r6
    8718:	1a08      	subs	r0, r1, r0
    871a:	1a81      	subs	r1, r0, r2
    871c:	4441      	add	r1, r8
    871e:	3920      	subs	r1, #32
    8720:	eba1 0609 	sub.w	r6, r1, r9
    8724:	0050      	lsls	r0, r2, #1
    8726:	8ba1      	ldrh	r1, [r4, #28]
    8728:	3060      	adds	r0, #96	; 0x60
    872a:	4401      	add	r1, r0
    872c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8730:	f006 fcb2 	bl	f098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    8734:	3022      	adds	r0, #34	; 0x22
    8736:	f8cb 0010 	str.w	r0, [fp, #16]
    873a:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    873e:	4659      	mov	r1, fp
    8740:	1a30      	subs	r0, r6, r0
    8742:	f5b0 7fda 	cmp.w	r0, #436	; 0x1b4
    8746:	d859      	bhi.n	87fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    8748:	f240 41e6 	movw	r1, #1254	; 0x4e6
    874c:	e140      	b.n	89d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    874e:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    8752:	6a20      	ldr	r0, [r4, #32]
    8754:	4408      	add	r0, r1
    8756:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    875a:	f003 ffb8 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    875e:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    8762:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    8766:	68e0      	ldr	r0, [r4, #12]
    8768:	f003 ffb1 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    876c:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    8770:	4620      	mov	r0, r4
    8772:	f006 fc21 	bl	efb8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d4>
    8776:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    877a:	bb10      	cbnz	r0, 87c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    877c:	f1ba 0f00 	cmp.w	sl, #0
    8780:	d01f      	beq.n	87c2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3f6>
    8782:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    8786:	4640      	mov	r0, r8
    8788:	f007 ffa3 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    878c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8790:	4401      	add	r1, r0
    8792:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8796:	fbb1 f0f0 	udiv	r0, r1, r0
    879a:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    879e:	e001      	b.n	87a4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    87a0:	e02d      	b.n	87fe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x432>
    87a2:	e049      	b.n	8838 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x46c>
    87a4:	4408      	add	r0, r1
    87a6:	6a22      	ldr	r2, [r4, #32]
    87a8:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    87ac:	4411      	add	r1, r2
    87ae:	1a0e      	subs	r6, r1, r0
    87b0:	4640      	mov	r0, r8
    87b2:	f007 ff80 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    87b6:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    87ba:	1a08      	subs	r0, r1, r0
    87bc:	4406      	add	r6, r0
    87be:	3e20      	subs	r6, #32
    87c0:	e006      	b.n	87d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x404>
    87c2:	6a21      	ldr	r1, [r4, #32]
    87c4:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    87c8:	4408      	add	r0, r1
    87ca:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    87ce:	1a46      	subs	r6, r0, r1
    87d0:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    87d4:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    87d8:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    87dc:	fb01 0002 	mla	r0, r1, r2, r0
    87e0:	0040      	lsls	r0, r0, #1
    87e2:	8ba1      	ldrh	r1, [r4, #28]
    87e4:	3060      	adds	r0, #96	; 0x60
    87e6:	4401      	add	r1, r0
    87e8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    87ec:	f006 fc54 	bl	f098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    87f0:	f8cb 0010 	str.w	r0, [fp, #16]
    87f4:	2001      	movs	r0, #1
    87f6:	4659      	mov	r1, fp
    87f8:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    87fc:	e062      	b.n	88c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    87fe:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    8802:	68e0      	ldr	r0, [r4, #12]
    8804:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    8808:	1a86      	subs	r6, r0, r2
    880a:	eb01 0009 	add.w	r0, r1, r9
    880e:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    8812:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    8816:	1a40      	subs	r0, r0, r1
    8818:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    881c:	1e40      	subs	r0, r0, #1
    881e:	fb0c 3101 	mla	r1, ip, r1, r3
    8822:	fb00 1002 	mla	r0, r0, r2, r1
    8826:	0040      	lsls	r0, r0, #1
    8828:	8ba1      	ldrh	r1, [r4, #28]
    882a:	3060      	adds	r0, #96	; 0x60
    882c:	4401      	add	r1, r0
    882e:	fb06 f608 	mul.w	r6, r6, r8
    8832:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8836:	e040      	b.n	88ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4ee>
    8838:	68e0      	ldr	r0, [r4, #12]
    883a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    883e:	fb00 f008 	mul.w	r0, r0, r8
    8842:	fb08 0611 	mls	r6, r8, r1, r0
    8846:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    884a:	2824      	cmp	r0, #36	; 0x24
    884c:	d003      	beq.n	8856 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x48a>
    884e:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    8852:	2824      	cmp	r0, #36	; 0x24
    8854:	d109      	bne.n	886a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8856:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    885a:	1a38      	subs	r0, r7, r0
    885c:	b200      	sxth	r0, r0
    885e:	2800      	cmp	r0, #0
    8860:	db03      	blt.n	886a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8862:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    8866:	b100      	cbz	r0, 886a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x49e>
    8868:	9001      	str	r0, [sp, #4]
    886a:	9800      	ldr	r0, [sp, #0]
    886c:	b1d8      	cbz	r0, 88a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    886e:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    8872:	b9c0      	cbnz	r0, 88a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    8874:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    8878:	2800      	cmp	r0, #0
    887a:	d07d      	beq.n	8978 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ac>
    887c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8880:	f007 ff27 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8884:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8888:	4401      	add	r1, r0
    888a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    888e:	fbb1 f0f0 	udiv	r0, r1, r0
    8892:	1a36      	subs	r6, r6, r0
    8894:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8898:	f007 ff0d 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    889c:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    88a0:	1a08      	subs	r0, r1, r0
    88a2:	4406      	add	r6, r0
    88a4:	3e20      	subs	r6, #32
    88a6:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    88aa:	eb01 0009 	add.w	r0, r1, r9
    88ae:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    88b2:	4348      	muls	r0, r1
    88b4:	0041      	lsls	r1, r0, #1
    88b6:	3160      	adds	r1, #96	; 0x60
    88b8:	9801      	ldr	r0, [sp, #4]
    88ba:	f006 fbed 	bl	f098 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b4>
    88be:	4659      	mov	r1, fp
    88c0:	f8cb 0010 	str.w	r0, [fp, #16]
    88c4:	9804      	ldr	r0, [sp, #16]
    88c6:	6909      	ldr	r1, [r1, #16]
    88c8:	1a33      	subs	r3, r6, r0
    88ca:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    88ce:	68e0      	ldr	r0, [r4, #12]
    88d0:	1b80      	subs	r0, r0, r6
    88d2:	f2a0 2043 	subw	r0, r0, #579	; 0x243
    88d6:	f8cb 0014 	str.w	r0, [fp, #20]
    88da:	4281      	cmp	r1, r0
    88dc:	d800      	bhi.n	88e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x514>
    88de:	4608      	mov	r0, r1
    88e0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    88e4:	2000      	movs	r0, #0
    88e6:	7028      	strb	r0, [r5, #0]
    88e8:	2064      	movs	r0, #100	; 0x64
    88ea:	8128      	strh	r0, [r5, #8]
    88ec:	4619      	mov	r1, r3
    88ee:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    88f2:	f7f9 fdcb 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    88f6:	60e8      	str	r0, [r5, #12]
    88f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    88fc:	f005 ff30 	bl	e760 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8900:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    8904:	4408      	add	r0, r1
    8906:	6068      	str	r0, [r5, #4]
    8908:	68e8      	ldr	r0, [r5, #12]
    890a:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    890e:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    8912:	2001      	movs	r0, #1
    8914:	72a8      	strb	r0, [r5, #10]
    8916:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    891a:	1bc9      	subs	r1, r1, r7
    891c:	b209      	sxth	r1, r1
    891e:	2900      	cmp	r1, #0
    8920:	dd01      	ble.n	8926 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x55a>
    8922:	2103      	movs	r1, #3
    8924:	72a9      	strb	r1, [r5, #10]
    8926:	9903      	ldr	r1, [sp, #12]
    8928:	b339      	cbz	r1, 897a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    892a:	f1ba 0f00 	cmp.w	sl, #0
    892e:	d01f      	beq.n	8970 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    8930:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    8934:	b38a      	cbz	r2, 899a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ce>
    8936:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    893a:	bf00      	nop
    893c:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    8940:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    8944:	1c49      	adds	r1, r1, #1
    8946:	434b      	muls	r3, r1
    8948:	4293      	cmp	r3, r2
    894a:	d211      	bcs.n	8970 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    894c:	7aa9      	ldrb	r1, [r5, #10]
    894e:	1e49      	subs	r1, r1, #1
    8950:	2900      	cmp	r1, #0
    8952:	dd0d      	ble.n	8970 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    8954:	72a8      	strb	r0, [r5, #10]
    8956:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    895a:	1c40      	adds	r0, r0, #1
    895c:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    8960:	2001      	movs	r0, #1
    8962:	f000 f83b 	bl	89dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    8966:	f000 0007 	and.w	r0, r0, #7
    896a:	1c40      	adds	r0, r0, #1
    896c:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    8970:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    8974:	4629      	mov	r1, r5
    8976:	e001      	b.n	897c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b0>
    8978:	e00c      	b.n	8994 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c8>
    897a:	e00f      	b.n	899c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5d0>
    897c:	f006 fb9e 	bl	f0bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    8980:	b320      	cbz	r0, 89cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    8982:	9807      	ldr	r0, [sp, #28]
    8984:	f080 0001 	eor.w	r0, r0, #1
    8988:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    898c:	2000      	movs	r0, #0
    898e:	b009      	add	sp, #36	; 0x24
    8990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8994:	f44f 61a7 	mov.w	r1, #1336	; 0x538
    8998:	e01a      	b.n	89d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    899a:	e015      	b.n	89c8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5fc>
    899c:	f1ba 0f00 	cmp.w	sl, #0
    89a0:	d1c6      	bne.n	8930 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x564>
    89a2:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    89a6:	2800      	cmp	r0, #0
    89a8:	d0e2      	beq.n	8970 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    89aa:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    89ae:	68e0      	ldr	r0, [r4, #12]
    89b0:	1a41      	subs	r1, r0, r1
    89b2:	4628      	mov	r0, r5
    89b4:	f005 faf2 	bl	df9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    89b8:	0400      	lsls	r0, r0, #16
    89ba:	0c00      	lsrs	r0, r0, #16
    89bc:	d0d8      	beq.n	8970 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5a4>
    89be:	9912      	ldr	r1, [sp, #72]	; 0x48
    89c0:	b101      	cbz	r1, 89c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f8>
    89c2:	8008      	strh	r0, [r1, #0]
    89c4:	2001      	movs	r0, #1
    89c6:	e7e2      	b.n	898e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c2>
    89c8:	2100      	movs	r1, #0
    89ca:	e7b7      	b.n	893c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x570>
    89cc:	f240 5197 	movw	r1, #1431	; 0x597
    89d0:	2030      	movs	r0, #48	; 0x30
    89d2:	f7fc f95d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89d6:	0000      	.short	0x0000
    89d8:	20000108 	.word	0x20000108
    89dc:	b108      	cbz	r0, 89e2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    89de:	4803      	ldr	r0, [pc, #12]	; (89ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    89e0:	e001      	b.n	89e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61a>
    89e2:	4802      	ldr	r0, [pc, #8]	; (89ec <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x620>)
    89e4:	3008      	adds	r0, #8
    89e6:	f7fe bc7b 	b.w	72e0 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    89ea:	0000      	.short	0x0000
    89ec:	20000120 	.word	0x20000120
    89f0:	b570      	push	{r4, r5, r6, lr}
    89f2:	4604      	mov	r4, r0
    89f4:	f7f9 fea6 	bl	2744 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    89f8:	2864      	cmp	r0, #100	; 0x64
    89fa:	d901      	bls.n	8a00 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x634>
    89fc:	4605      	mov	r5, r0
    89fe:	e000      	b.n	8a02 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x636>
    8a00:	2564      	movs	r5, #100	; 0x64
    8a02:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8a06:	2128      	movs	r1, #40	; 0x28
    8a08:	f006 fa47 	bl	ee9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8a0c:	4428      	add	r0, r5
    8a0e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    8a12:	f200 203d 	addw	r0, r0, #573	; 0x23d
    8a16:	180e      	adds	r6, r1, r0
    8a18:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8a1c:	2128      	movs	r1, #40	; 0x28
    8a1e:	f006 fa3c 	bl	ee9a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb6>
    8a22:	f200 22a1 	addw	r2, r0, #673	; 0x2a1
    8a26:	4620      	mov	r0, r4
    8a28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8a2a:	f005 fe38 	bl	e69e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8a2e:	4605      	mov	r5, r0
    8a30:	4632      	mov	r2, r6
    8a32:	4620      	mov	r0, r4
    8a34:	68e1      	ldr	r1, [r4, #12]
    8a36:	f005 fe32 	bl	e69e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    8a3a:	4907      	ldr	r1, [pc, #28]	; (8a58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68c>)
    8a3c:	4285      	cmp	r5, r0
    8a3e:	6088      	str	r0, [r1, #8]
    8a40:	d200      	bcs.n	8a44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x678>
    8a42:	4628      	mov	r0, r5
    8a44:	6048      	str	r0, [r1, #4]
    8a46:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8a4a:	f5a0 70b3 	sub.w	r0, r0, #358	; 0x166
    8a4e:	60c8      	str	r0, [r1, #12]
    8a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8a54:	f7fa bd14 	b.w	3480 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a58:	20000108 	.word	0x20000108

00008a5c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    8a5c:	4806      	ldr	r0, [pc, #24]	; (8a78 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    8a5e:	4905      	ldr	r1, [pc, #20]	; (8a74 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    8a60:	6501      	str	r1, [r0, #80]	; 0x50
    8a62:	4906      	ldr	r1, [pc, #24]	; (8a7c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    8a64:	6541      	str	r1, [r0, #84]	; 0x54
    8a66:	4807      	ldr	r0, [pc, #28]	; (8a84 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    8a68:	4905      	ldr	r1, [pc, #20]	; (8a80 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    8a6a:	6501      	str	r1, [r0, #80]	; 0x50
    8a6c:	4906      	ldr	r1, [pc, #24]	; (8a88 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    8a6e:	6541      	str	r1, [r0, #84]	; 0x54
    8a70:	4770      	bx	lr
    8a72:	0000      	.short	0x0000
    8a74:	00009fbd 	.word	0x00009fbd
    8a78:	20000144 	.word	0x20000144
    8a7c:	0000a099 	.word	0x0000a099
    8a80:	0000a715 	.word	0x0000a715
    8a84:	200001a8 	.word	0x200001a8
    8a88:	0000a745 	.word	0x0000a745

00008a8c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    8a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8a8e:	460d      	mov	r5, r1
    8a90:	4607      	mov	r7, r0
    8a92:	2100      	movs	r1, #0
    8a94:	f004 ff57 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8a98:	1e04      	subs	r4, r0, #0
    8a9a:	d04f      	beq.n	8b3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8a9c:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d04b      	beq.n	8b3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8aa4:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8aa8:	f88d 0000 	strb.w	r0, [sp]
    8aac:	9800      	ldr	r0, [sp, #0]
    8aae:	9000      	str	r0, [sp, #0]
    8ab0:	f89d 0000 	ldrb.w	r0, [sp]
    8ab4:	2600      	movs	r6, #0
    8ab6:	b1d8      	cbz	r0, 8af0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    8ab8:	706e      	strb	r6, [r5, #1]
    8aba:	2007      	movs	r0, #7
    8abc:	7028      	strb	r0, [r5, #0]
    8abe:	e00b      	b.n	8ad8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    8ac0:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    8ac4:	84a6      	strh	r6, [r4, #36]	; 0x24
    8ac6:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8aca:	6068      	str	r0, [r5, #4]
    8acc:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    8ad0:	60a8      	str	r0, [r5, #8]
    8ad2:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    8ad6:	81a8      	strh	r0, [r5, #12]
    8ad8:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8adc:	f88d 0000 	strb.w	r0, [sp]
    8ae0:	9800      	ldr	r0, [sp, #0]
    8ae2:	9000      	str	r0, [sp, #0]
    8ae4:	f89d 0000 	ldrb.w	r0, [sp]
    8ae8:	2800      	cmp	r0, #0
    8aea:	d1e9      	bne.n	8ac0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    8aec:	712e      	strb	r6, [r5, #4]
    8aee:	e10b      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8af0:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8af4:	b3a0      	cbz	r0, 8b60 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    8af6:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8afa:	280b      	cmp	r0, #11
    8afc:	d016      	beq.n	8b2c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    8afe:	280c      	cmp	r0, #12
    8b00:	d004      	beq.n	8b0c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    8b02:	f640 21ee 	movw	r1, #2798	; 0xaee
    8b06:	2031      	movs	r0, #49	; 0x31
    8b08:	f7fc f8c2 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b0c:	8820      	ldrh	r0, [r4, #0]
    8b0e:	f7fc fcd9 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8b12:	4607      	mov	r7, r0
    8b14:	f004 fddd 	bl	d6d2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8b18:	b978      	cbnz	r0, 8b3a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    8b1a:	706e      	strb	r6, [r5, #1]
    8b1c:	200c      	movs	r0, #12
    8b1e:	7028      	strb	r0, [r5, #0]
    8b20:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8b24:	7128      	strb	r0, [r5, #4]
    8b26:	8820      	ldrh	r0, [r4, #0]
    8b28:	80e8      	strh	r0, [r5, #6]
    8b2a:	e013      	b.n	8b54 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    8b2c:	8820      	ldrh	r0, [r4, #0]
    8b2e:	f7fc fcc9 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8b32:	4607      	mov	r7, r0
    8b34:	f004 fdcd 	bl	d6d2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8b38:	b108      	cbz	r0, 8b3e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    8b3a:	2000      	movs	r0, #0
    8b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b3e:	706e      	strb	r6, [r5, #1]
    8b40:	200b      	movs	r0, #11
    8b42:	7028      	strb	r0, [r5, #0]
    8b44:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    8b48:	7128      	strb	r0, [r5, #4]
    8b4a:	8820      	ldrh	r0, [r4, #0]
    8b4c:	80e8      	strh	r0, [r5, #6]
    8b4e:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    8b52:	7228      	strb	r0, [r5, #8]
    8b54:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    8b58:	4638      	mov	r0, r7
    8b5a:	f004 fdd5 	bl	d708 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8b5e:	e0d3      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8b60:	e7ff      	b.n	8b62 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    8b62:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    8b66:	f88d 0000 	strb.w	r0, [sp]
    8b6a:	9800      	ldr	r0, [sp, #0]
    8b6c:	9000      	str	r0, [sp, #0]
    8b6e:	f89d 0000 	ldrb.w	r0, [sp]
    8b72:	b130      	cbz	r0, 8b82 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    8b74:	706e      	strb	r6, [r5, #1]
    8b76:	200e      	movs	r0, #14
    8b78:	7028      	strb	r0, [r5, #0]
    8b7a:	80af      	strh	r7, [r5, #4]
    8b7c:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    8b80:	e0c2      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8b82:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    8b86:	f88d 0000 	strb.w	r0, [sp]
    8b8a:	9800      	ldr	r0, [sp, #0]
    8b8c:	9000      	str	r0, [sp, #0]
    8b8e:	f89d 0000 	ldrb.w	r0, [sp]
    8b92:	b198      	cbz	r0, 8bbc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    8b94:	706e      	strb	r6, [r5, #1]
    8b96:	2008      	movs	r0, #8
    8b98:	7028      	strb	r0, [r5, #0]
    8b9a:	8820      	ldrh	r0, [r4, #0]
    8b9c:	80a8      	strh	r0, [r5, #4]
    8b9e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    8ba2:	f8c5 1006 	str.w	r1, [r5, #6]
    8ba6:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    8baa:	f8c5 100a 	str.w	r1, [r5, #10]
    8bae:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    8bb2:	81e8      	strh	r0, [r5, #14]
    8bb4:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    8bb8:	7026      	strb	r6, [r4, #0]
    8bba:	e0a5      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8bbc:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8bc0:	f88d 0000 	strb.w	r0, [sp]
    8bc4:	9800      	ldr	r0, [sp, #0]
    8bc6:	9000      	str	r0, [sp, #0]
    8bc8:	f89d 0000 	ldrb.w	r0, [sp]
    8bcc:	b1a0      	cbz	r0, 8bf8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    8bce:	706e      	strb	r6, [r5, #1]
    8bd0:	2016      	movs	r0, #22
    8bd2:	7028      	strb	r0, [r5, #0]
    8bd4:	e005      	b.n	8be2 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    8bd6:	bf00      	nop
    8bd8:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    8bdc:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    8be0:	6068      	str	r0, [r5, #4]
    8be2:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    8be6:	f88d 0000 	strb.w	r0, [sp]
    8bea:	9800      	ldr	r0, [sp, #0]
    8bec:	9000      	str	r0, [sp, #0]
    8bee:	f89d 0000 	ldrb.w	r0, [sp]
    8bf2:	2800      	cmp	r0, #0
    8bf4:	d1f0      	bne.n	8bd8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    8bf6:	e087      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8bf8:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    8bfc:	f88d 0000 	strb.w	r0, [sp]
    8c00:	9800      	ldr	r0, [sp, #0]
    8c02:	9000      	str	r0, [sp, #0]
    8c04:	f89d 0000 	ldrb.w	r0, [sp]
    8c08:	b170      	cbz	r0, 8c28 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    8c0a:	706e      	strb	r6, [r5, #1]
    8c0c:	2006      	movs	r0, #6
    8c0e:	7028      	strb	r0, [r5, #0]
    8c10:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    8c14:	6068      	str	r0, [r5, #4]
    8c16:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    8c1a:	60a8      	str	r0, [r5, #8]
    8c1c:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    8c20:	60e8      	str	r0, [r5, #12]
    8c22:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    8c26:	e03a      	b.n	8c9e <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    8c28:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8c2c:	f88d 0000 	strb.w	r0, [sp]
    8c30:	9800      	ldr	r0, [sp, #0]
    8c32:	9000      	str	r0, [sp, #0]
    8c34:	f89d 0000 	ldrb.w	r0, [sp]
    8c38:	b1d0      	cbz	r0, 8c70 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    8c3a:	706e      	strb	r6, [r5, #1]
    8c3c:	2012      	movs	r0, #18
    8c3e:	7028      	strb	r0, [r5, #0]
    8c40:	e00b      	b.n	8c5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    8c42:	bf00      	nop
    8c44:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    8c48:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    8c4c:	6068      	str	r0, [r5, #4]
    8c4e:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    8c52:	60a8      	str	r0, [r5, #8]
    8c54:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    8c58:	60e8      	str	r0, [r5, #12]
    8c5a:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    8c5e:	f88d 0000 	strb.w	r0, [sp]
    8c62:	9800      	ldr	r0, [sp, #0]
    8c64:	9000      	str	r0, [sp, #0]
    8c66:	f89d 0000 	ldrb.w	r0, [sp]
    8c6a:	2800      	cmp	r0, #0
    8c6c:	d1ea      	bne.n	8c44 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    8c6e:	e04b      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8c70:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    8c74:	f88d 0000 	strb.w	r0, [sp]
    8c78:	9800      	ldr	r0, [sp, #0]
    8c7a:	9000      	str	r0, [sp, #0]
    8c7c:	f89d 0000 	ldrb.w	r0, [sp]
    8c80:	b180      	cbz	r0, 8ca4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    8c82:	706e      	strb	r6, [r5, #1]
    8c84:	2018      	movs	r0, #24
    8c86:	7028      	strb	r0, [r5, #0]
    8c88:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    8c8c:	6068      	str	r0, [r5, #4]
    8c8e:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    8c92:	60a8      	str	r0, [r5, #8]
    8c94:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    8c98:	81a8      	strh	r0, [r5, #12]
    8c9a:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    8c9e:	f804 6c02 	strb.w	r6, [r4, #-2]
    8ca2:	e031      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8ca4:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    8ca8:	f88d 0000 	strb.w	r0, [sp]
    8cac:	9800      	ldr	r0, [sp, #0]
    8cae:	9000      	str	r0, [sp, #0]
    8cb0:	f89d 0000 	ldrb.w	r0, [sp]
    8cb4:	b138      	cbz	r0, 8cc6 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    8cb6:	2019      	movs	r0, #25
    8cb8:	7028      	strb	r0, [r5, #0]
    8cba:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    8cbe:	6068      	str	r0, [r5, #4]
    8cc0:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    8cc4:	e020      	b.n	8d08 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    8cc6:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8cca:	f88d 0000 	strb.w	r0, [sp]
    8cce:	9800      	ldr	r0, [sp, #0]
    8cd0:	9000      	str	r0, [sp, #0]
    8cd2:	f89d 0000 	ldrb.w	r0, [sp]
    8cd6:	2800      	cmp	r0, #0
    8cd8:	f43f af30 	beq.w	8b3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    8cdc:	706e      	strb	r6, [r5, #1]
    8cde:	2013      	movs	r0, #19
    8ce0:	7028      	strb	r0, [r5, #0]
    8ce2:	e007      	b.n	8cf4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    8ce4:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    8ce8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    8cec:	6068      	str	r0, [r5, #4]
    8cee:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    8cf2:	8128      	strh	r0, [r5, #8]
    8cf4:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    8cf8:	f88d 0000 	strb.w	r0, [sp]
    8cfc:	9800      	ldr	r0, [sp, #0]
    8cfe:	9000      	str	r0, [sp, #0]
    8d00:	f89d 0000 	ldrb.w	r0, [sp]
    8d04:	2800      	cmp	r0, #0
    8d06:	d1ed      	bne.n	8ce4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    8d08:	2001      	movs	r0, #1
    8d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008d0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    8d0c:	481b      	ldr	r0, [pc, #108]	; (8d7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    8d0e:	491a      	ldr	r1, [pc, #104]	; (8d78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    8d10:	6081      	str	r1, [r0, #8]
    8d12:	491b      	ldr	r1, [pc, #108]	; (8d80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    8d14:	6041      	str	r1, [r0, #4]
    8d16:	491b      	ldr	r1, [pc, #108]	; (8d84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    8d18:	6001      	str	r1, [r0, #0]
    8d1a:	491b      	ldr	r1, [pc, #108]	; (8d88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    8d1c:	6281      	str	r1, [r0, #40]	; 0x28
    8d1e:	491b      	ldr	r1, [pc, #108]	; (8d8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    8d20:	62c1      	str	r1, [r0, #44]	; 0x2c
    8d22:	491b      	ldr	r1, [pc, #108]	; (8d90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    8d24:	60c1      	str	r1, [r0, #12]
    8d26:	491b      	ldr	r1, [pc, #108]	; (8d94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    8d28:	6181      	str	r1, [r0, #24]
    8d2a:	491b      	ldr	r1, [pc, #108]	; (8d98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    8d2c:	6301      	str	r1, [r0, #48]	; 0x30
    8d2e:	491b      	ldr	r1, [pc, #108]	; (8d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    8d30:	6201      	str	r1, [r0, #32]
    8d32:	491b      	ldr	r1, [pc, #108]	; (8da0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    8d34:	64c1      	str	r1, [r0, #76]	; 0x4c
    8d36:	491b      	ldr	r1, [pc, #108]	; (8da4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    8d38:	6481      	str	r1, [r0, #72]	; 0x48
    8d3a:	491b      	ldr	r1, [pc, #108]	; (8da8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    8d3c:	6441      	str	r1, [r0, #68]	; 0x44
    8d3e:	491b      	ldr	r1, [pc, #108]	; (8dac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    8d40:	6341      	str	r1, [r0, #52]	; 0x34
    8d42:	491b      	ldr	r1, [pc, #108]	; (8db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    8d44:	61c1      	str	r1, [r0, #28]
    8d46:	481c      	ldr	r0, [pc, #112]	; (8db8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    8d48:	491a      	ldr	r1, [pc, #104]	; (8db4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    8d4a:	6081      	str	r1, [r0, #8]
    8d4c:	491b      	ldr	r1, [pc, #108]	; (8dbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    8d4e:	61c1      	str	r1, [r0, #28]
    8d50:	491b      	ldr	r1, [pc, #108]	; (8dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    8d52:	6241      	str	r1, [r0, #36]	; 0x24
    8d54:	491b      	ldr	r1, [pc, #108]	; (8dc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    8d56:	62c1      	str	r1, [r0, #44]	; 0x2c
    8d58:	491b      	ldr	r1, [pc, #108]	; (8dc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    8d5a:	6101      	str	r1, [r0, #16]
    8d5c:	491b      	ldr	r1, [pc, #108]	; (8dcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    8d5e:	6141      	str	r1, [r0, #20]
    8d60:	491b      	ldr	r1, [pc, #108]	; (8dd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    8d62:	6441      	str	r1, [r0, #68]	; 0x44
    8d64:	6341      	str	r1, [r0, #52]	; 0x34
    8d66:	491b      	ldr	r1, [pc, #108]	; (8dd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    8d68:	6181      	str	r1, [r0, #24]
    8d6a:	491b      	ldr	r1, [pc, #108]	; (8dd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    8d6c:	6301      	str	r1, [r0, #48]	; 0x30
    8d6e:	491b      	ldr	r1, [pc, #108]	; (8ddc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    8d70:	6481      	str	r1, [r0, #72]	; 0x48
    8d72:	491b      	ldr	r1, [pc, #108]	; (8de0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    8d74:	64c1      	str	r1, [r0, #76]	; 0x4c
    8d76:	4770      	bx	lr
    8d78:	0000a449 	.word	0x0000a449
    8d7c:	20000144 	.word	0x20000144
    8d80:	00009d85 	.word	0x00009d85
    8d84:	00009de1 	.word	0x00009de1
    8d88:	0000a161 	.word	0x0000a161
    8d8c:	0000a1a5 	.word	0x0000a1a5
    8d90:	00009e8d 	.word	0x00009e8d
    8d94:	0000a421 	.word	0x0000a421
    8d98:	0000a565 	.word	0x0000a565
    8d9c:	00009f39 	.word	0x00009f39
    8da0:	0000a135 	.word	0x0000a135
    8da4:	0000a109 	.word	0x0000a109
    8da8:	0000a3e1 	.word	0x0000a3e1
    8dac:	0000a411 	.word	0x0000a411
    8db0:	0000a47d 	.word	0x0000a47d
    8db4:	0000a8fd 	.word	0x0000a8fd
    8db8:	200001a8 	.word	0x200001a8
    8dbc:	0000a925 	.word	0x0000a925
    8dc0:	0000a6e5 	.word	0x0000a6e5
    8dc4:	0000a7bd 	.word	0x0000a7bd
    8dc8:	0000a6b9 	.word	0x0000a6b9
    8dcc:	0000a865 	.word	0x0000a865
    8dd0:	0000a841 	.word	0x0000a841
    8dd4:	0000a889 	.word	0x0000a889
    8dd8:	0000a97d 	.word	0x0000a97d
    8ddc:	0000a775 	.word	0x0000a775
    8de0:	0000a7a5 	.word	0x0000a7a5

00008de4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    8de4:	4806      	ldr	r0, [pc, #24]	; (8e00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    8de6:	4905      	ldr	r1, [pc, #20]	; (8dfc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    8de8:	6581      	str	r1, [r0, #88]	; 0x58
    8dea:	4906      	ldr	r1, [pc, #24]	; (8e04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    8dec:	6601      	str	r1, [r0, #96]	; 0x60
    8dee:	4807      	ldr	r0, [pc, #28]	; (8e0c <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    8df0:	4905      	ldr	r1, [pc, #20]	; (8e08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    8df2:	6581      	str	r1, [r0, #88]	; 0x58
    8df4:	4906      	ldr	r1, [pc, #24]	; (8e10 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    8df6:	65c1      	str	r1, [r0, #92]	; 0x5c
    8df8:	4770      	bx	lr
    8dfa:	0000      	.short	0x0000
    8dfc:	0000a1c5 	.word	0x0000a1c5
    8e00:	20000144 	.word	0x20000144
    8e04:	0000a29d 	.word	0x0000a29d
    8e08:	0000a7e9 	.word	0x0000a7e9
    8e0c:	200001a8 	.word	0x200001a8
    8e10:	0000a819 	.word	0x0000a819

00008e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    8e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e18:	2601      	movs	r6, #1
    8e1a:	4c7c      	ldr	r4, [pc, #496]	; (900c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    8e1c:	2500      	movs	r5, #0
    8e1e:	f366 0107 	bfi	r1, r6, #0, #8
    8e22:	8065      	strh	r5, [r4, #2]
    8e24:	7065      	strb	r5, [r4, #1]
    8e26:	7025      	strb	r5, [r4, #0]
    8e28:	60a0      	str	r0, [r4, #8]
    8e2a:	4689      	mov	r9, r1
    8e2c:	4680      	mov	r8, r0
    8e2e:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    8e32:	8800      	ldrh	r0, [r0, #0]
    8e34:	f7fc fb5c 	bl	54f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    8e38:	b180      	cbz	r0, 8e5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    8e3a:	68a0      	ldr	r0, [r4, #8]
    8e3c:	8800      	ldrh	r0, [r0, #0]
    8e3e:	f7fc fe01 	bl	5a44 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8e42:	68a0      	ldr	r0, [r4, #8]
    8e44:	8800      	ldrh	r0, [r0, #0]
    8e46:	f7fc fda5 	bl	5994 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8e4a:	68a0      	ldr	r0, [r4, #8]
    8e4c:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    8e50:	b1c9      	cbz	r1, 8e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8e52:	3070      	adds	r0, #112	; 0x70
    8e54:	f006 fb91 	bl	f57a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8e58:	b118      	cbz	r0, 8e62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    8e5a:	e014      	b.n	8e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8e5c:	f640 31c9 	movw	r1, #3017	; 0xbc9
    8e60:	e06b      	b.n	8f3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    8e62:	68a0      	ldr	r0, [r4, #8]
    8e64:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8e68:	f88d 1000 	strb.w	r1, [sp]
    8e6c:	9900      	ldr	r1, [sp, #0]
    8e6e:	9100      	str	r1, [sp, #0]
    8e70:	f89d 1000 	ldrb.w	r1, [sp]
    8e74:	b139      	cbz	r1, 8e86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    8e76:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8e7a:	2301      	movs	r3, #1
    8e7c:	4619      	mov	r1, r3
    8e7e:	3070      	adds	r0, #112	; 0x70
    8e80:	f004 ffd3 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e84:	b180      	cbz	r0, 8ea8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    8e86:	68a0      	ldr	r0, [r4, #8]
    8e88:	3070      	adds	r0, #112	; 0x70
    8e8a:	f006 fb76 	bl	f57a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8e8e:	b128      	cbz	r0, 8e9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    8e90:	68a0      	ldr	r0, [r4, #8]
    8e92:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    8e96:	bf00      	nop
    8e98:	f000 fbb0 	bl	95fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e8>
    8e9c:	68a0      	ldr	r0, [r4, #8]
    8e9e:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    8ea2:	b189      	cbz	r1, 8ec8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    8ea4:	80a5      	strh	r5, [r4, #4]
    8ea6:	e01e      	b.n	8ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    8ea8:	68a0      	ldr	r0, [r4, #8]
    8eaa:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    8eae:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    8eb2:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8eb6:	2100      	movs	r1, #0
    8eb8:	2002      	movs	r0, #2
    8eba:	f000 fe41 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    8ebe:	68a0      	ldr	r0, [r4, #8]
    8ec0:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    8ec4:	2002      	movs	r0, #2
    8ec6:	e7e7      	b.n	8e98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    8ec8:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    8ecc:	f88d 1000 	strb.w	r1, [sp]
    8ed0:	9900      	ldr	r1, [sp, #0]
    8ed2:	9100      	str	r1, [sp, #0]
    8ed4:	f89d 1000 	ldrb.w	r1, [sp]
    8ed8:	b919      	cbnz	r1, 8ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    8eda:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    8edc:	8a82      	ldrh	r2, [r0, #20]
    8ede:	4291      	cmp	r1, r2
    8ee0:	d800      	bhi.n	8ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    8ee2:	8a81      	ldrh	r1, [r0, #20]
    8ee4:	80a1      	strh	r1, [r4, #4]
    8ee6:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    8eea:	1e49      	subs	r1, r1, #1
    8eec:	b28f      	uxth	r7, r1
    8eee:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    8ef2:	4439      	add	r1, r7
    8ef4:	f820 195c 	strh.w	r1, [r0], #-92
    8ef8:	8801      	ldrh	r1, [r0, #0]
    8efa:	4439      	add	r1, r7
    8efc:	8001      	strh	r1, [r0, #0]
    8efe:	f001 fd6b 	bl	a9d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    8f02:	b120      	cbz	r0, 8f0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    8f04:	68a0      	ldr	r0, [r4, #8]
    8f06:	f850 1f98 	ldr.w	r1, [r0, #152]!
    8f0a:	4439      	add	r1, r7
    8f0c:	6001      	str	r1, [r0, #0]
    8f0e:	68a1      	ldr	r1, [r4, #8]
    8f10:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8f14:	2801      	cmp	r0, #1
    8f16:	d802      	bhi.n	8f1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    8f18:	1c40      	adds	r0, r0, #1
    8f1a:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    8f1e:	b10f      	cbz	r7, 8f24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    8f20:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    8f24:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8f28:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    8f2c:	f101 0070 	add.w	r0, r1, #112	; 0x70
    8f30:	f005 f8fd 	bl	e12e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8f34:	b120      	cbz	r0, 8f40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    8f36:	f640 410d 	movw	r1, #3085	; 0xc0d
    8f3a:	2031      	movs	r0, #49	; 0x31
    8f3c:	f7fb fea8 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f40:	68a0      	ldr	r0, [r4, #8]
    8f42:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8f46:	290b      	cmp	r1, #11
    8f48:	d001      	beq.n	8f4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    8f4a:	290c      	cmp	r1, #12
    8f4c:	d118      	bne.n	8f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8f4e:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    8f52:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    8f56:	1ad2      	subs	r2, r2, r3
    8f58:	b212      	sxth	r2, r2
    8f5a:	2a00      	cmp	r2, #0
    8f5c:	db10      	blt.n	8f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    8f5e:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    8f62:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    8f66:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    8f6a:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    8f6e:	2103      	movs	r1, #3
    8f70:	f7fd fdcc 	bl	6b0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    8f74:	68a0      	ldr	r0, [r4, #8]
    8f76:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8f7a:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    8f7e:	e026      	b.n	8fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8f80:	2924      	cmp	r1, #36	; 0x24
    8f82:	d111      	bne.n	8fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8f84:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8f88:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8f8c:	1a89      	subs	r1, r1, r2
    8f8e:	b209      	sxth	r1, r1
    8f90:	2900      	cmp	r1, #0
    8f92:	db09      	blt.n	8fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    8f94:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    8f98:	f000 fe82 	bl	9ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8f9c:	2800      	cmp	r0, #0
    8f9e:	68a0      	ldr	r0, [r4, #8]
    8fa0:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    8fa4:	d029      	beq.n	8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8fa6:	e012      	b.n	8fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8fa8:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8fac:	2924      	cmp	r1, #36	; 0x24
    8fae:	d001      	beq.n	8fb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    8fb0:	2925      	cmp	r1, #37	; 0x25
    8fb2:	d10c      	bne.n	8fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8fb4:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    8fb8:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    8fbc:	1a89      	subs	r1, r1, r2
    8fbe:	b209      	sxth	r1, r1
    8fc0:	2900      	cmp	r1, #0
    8fc2:	db04      	blt.n	8fce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    8fc4:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    8fc8:	f000 fe6a 	bl	9ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    8fcc:	b1a8      	cbz	r0, 8ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    8fce:	4810      	ldr	r0, [pc, #64]	; (9010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    8fd0:	9000      	str	r0, [sp, #0]
    8fd2:	4b10      	ldr	r3, [pc, #64]	; (9014 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    8fd4:	4a10      	ldr	r2, [pc, #64]	; (9018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>)
    8fd6:	4641      	mov	r1, r8
    8fd8:	4648      	mov	r0, r9
    8fda:	f7fc fde9 	bl	5bb0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8fde:	68a0      	ldr	r0, [r4, #8]
    8fe0:	2301      	movs	r3, #1
    8fe2:	2105      	movs	r1, #5
    8fe4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8fe8:	3070      	adds	r0, #112	; 0x70
    8fea:	f004 ff1e 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fee:	2800      	cmp	r0, #0
    8ff0:	d009      	beq.n	9006 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    8ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ff6:	f7fc bdd5 	b.w	5ba4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8ffa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8ffe:	2100      	movs	r1, #0
    9000:	4608      	mov	r0, r1
    9002:	f000 bbd5 	b.w	97b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x99c>
    9006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    900a:	0000      	.short	0x0000
    900c:	20000130 	.word	0x20000130
    9010:	000097b1 	.word	0x000097b1
    9014:	000092b5 	.word	0x000092b5
    9018:	00009bed 	.word	0x00009bed
    901c:	b570      	push	{r4, r5, r6, lr}
    901e:	4c0f      	ldr	r4, [pc, #60]	; (905c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x248>)
    9020:	68a5      	ldr	r5, [r4, #8]
    9022:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    9026:	2920      	cmp	r1, #32
    9028:	d002      	beq.n	9030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    902a:	2926      	cmp	r1, #38	; 0x26
    902c:	d003      	beq.n	9036 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    902e:	e011      	b.n	9054 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x240>
    9030:	f000 fe84 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9034:	e008      	b.n	9048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x234>
    9036:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    903a:	2301      	movs	r3, #1
    903c:	210b      	movs	r1, #11
    903e:	f105 0070 	add.w	r0, r5, #112	; 0x70
    9042:	f004 fef2 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9046:	b138      	cbz	r0, 9058 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x244>
    9048:	68a1      	ldr	r1, [r4, #8]
    904a:	2000      	movs	r0, #0
    904c:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    9050:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    9054:	2000      	movs	r0, #0
    9056:	bd70      	pop	{r4, r5, r6, pc}
    9058:	202a      	movs	r0, #42	; 0x2a
    905a:	e7e9      	b.n	9030 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x21c>
    905c:	20000130 	.word	0x20000130
    9060:	4804      	ldr	r0, [pc, #16]	; (9074 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x260>)
    9062:	2100      	movs	r1, #0
    9064:	6880      	ldr	r0, [r0, #8]
    9066:	f820 1fb0 	strh.w	r1, [r0, #176]!
    906a:	7881      	ldrb	r1, [r0, #2]
    906c:	1c49      	adds	r1, r1, #1
    906e:	7081      	strb	r1, [r0, #2]
    9070:	4770      	bx	lr
    9072:	0000      	.short	0x0000
    9074:	20000130 	.word	0x20000130
    9078:	4807      	ldr	r0, [pc, #28]	; (9098 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x284>)
    907a:	b510      	push	{r4, lr}
    907c:	6881      	ldr	r1, [r0, #8]
    907e:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    9082:	1e40      	subs	r0, r0, #1
    9084:	b240      	sxtb	r0, r0
    9086:	7008      	strb	r0, [r1, #0]
    9088:	2800      	cmp	r0, #0
    908a:	da04      	bge.n	9096 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x282>
    908c:	f44f 71c9 	mov.w	r1, #402	; 0x192
    9090:	2031      	movs	r0, #49	; 0x31
    9092:	f7fb fdfd 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9096:	bd10      	pop	{r4, pc}
    9098:	20000130 	.word	0x20000130
    909c:	491a      	ldr	r1, [pc, #104]	; (9108 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f4>)
    909e:	b508      	push	{r3, lr}
    90a0:	6889      	ldr	r1, [r1, #8]
    90a2:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    90a6:	b1b8      	cbz	r0, 90d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c4>
    90a8:	2a10      	cmp	r2, #16
    90aa:	d006      	beq.n	90ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2a6>
    90ac:	2a14      	cmp	r2, #20
    90ae:	d007      	beq.n	90c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ac>
    90b0:	2a15      	cmp	r2, #21
    90b2:	d008      	beq.n	90c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    90b4:	2a1b      	cmp	r2, #27
    90b6:	d122      	bne.n	90fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    90b8:	e008      	b.n	90cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b8>
    90ba:	2101      	movs	r1, #1
    90bc:	200b      	movs	r0, #11
    90be:	e007      	b.n	90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    90c0:	f001 faac 	bl	a61c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1808>
    90c4:	e006      	b.n	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    90c6:	f000 fd59 	bl	9b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd68>
    90ca:	e003      	b.n	90d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2c0>
    90cc:	2101      	movs	r1, #1
    90ce:	2006      	movs	r0, #6
    90d0:	f000 fd36 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    90d4:	2001      	movs	r0, #1
    90d6:	bd08      	pop	{r3, pc}
    90d8:	2a21      	cmp	r2, #33	; 0x21
    90da:	d110      	bne.n	90fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    90dc:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    90e0:	2802      	cmp	r0, #2
    90e2:	d00e      	beq.n	9102 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    90e4:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    90e8:	2801      	cmp	r0, #1
    90ea:	d108      	bne.n	90fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ea>
    90ec:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    90f0:	f88d 0000 	strb.w	r0, [sp]
    90f4:	9800      	ldr	r0, [sp, #0]
    90f6:	9000      	str	r0, [sp, #0]
    90f8:	f89d 0000 	ldrb.w	r0, [sp]
    90fc:	b108      	cbz	r0, 9102 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ee>
    90fe:	2000      	movs	r0, #0
    9100:	bd08      	pop	{r3, pc}
    9102:	2101      	movs	r1, #1
    9104:	2017      	movs	r0, #23
    9106:	e7e3      	b.n	90d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    9108:	20000130 	.word	0x20000130
    910c:	b538      	push	{r3, r4, r5, lr}
    910e:	2800      	cmp	r0, #0
    9110:	d16b      	bne.n	91ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    9112:	4c37      	ldr	r4, [pc, #220]	; (91f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3dc>)
    9114:	68a0      	ldr	r0, [r4, #8]
    9116:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    911a:	07ca      	lsls	r2, r1, #31
    911c:	d002      	beq.n	9124 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x310>
    911e:	2101      	movs	r1, #1
    9120:	2009      	movs	r0, #9
    9122:	e05b      	b.n	91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9124:	078a      	lsls	r2, r1, #30
    9126:	d50a      	bpl.n	913e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32a>
    9128:	2101      	movs	r1, #1
    912a:	200c      	movs	r0, #12
    912c:	f000 fd08 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9130:	68a0      	ldr	r0, [r4, #8]
    9132:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    9136:	f041 0101 	orr.w	r1, r1, #1
    913a:	7001      	strb	r1, [r0, #0]
    913c:	e050      	b.n	91e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    913e:	074a      	lsls	r2, r1, #29
    9140:	d502      	bpl.n	9148 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x334>
    9142:	2101      	movs	r1, #1
    9144:	2013      	movs	r0, #19
    9146:	e049      	b.n	91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9148:	070a      	lsls	r2, r1, #28
    914a:	d505      	bpl.n	9158 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x344>
    914c:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    9150:	7141      	strb	r1, [r0, #5]
    9152:	2101      	movs	r1, #1
    9154:	2007      	movs	r0, #7
    9156:	e041      	b.n	91dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>
    9158:	f011 0f30 	tst.w	r1, #48	; 0x30
    915c:	d045      	beq.n	91ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    915e:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    9162:	f88d 1000 	strb.w	r1, [sp]
    9166:	9900      	ldr	r1, [sp, #0]
    9168:	9100      	str	r1, [sp, #0]
    916a:	f89d 1000 	ldrb.w	r1, [sp]
    916e:	bbc9      	cbnz	r1, 91e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d0>
    9170:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    9174:	f88d 1000 	strb.w	r1, [sp]
    9178:	9900      	ldr	r1, [sp, #0]
    917a:	9100      	str	r1, [sp, #0]
    917c:	f89d 1000 	ldrb.w	r1, [sp]
    9180:	b1c9      	cbz	r1, 91b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3a2>
    9182:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9186:	2924      	cmp	r1, #36	; 0x24
    9188:	d02d      	beq.n	91e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    918a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    918e:	2924      	cmp	r1, #36	; 0x24
    9190:	d029      	beq.n	91e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d2>
    9192:	2300      	movs	r3, #0
    9194:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9198:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    919c:	f005 fa71 	bl	e682 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    91a0:	68a0      	ldr	r0, [r4, #8]
    91a2:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    91a6:	f021 0120 	bic.w	r1, r1, #32
    91aa:	f041 0110 	orr.w	r1, r1, #16
    91ae:	7001      	strb	r1, [r0, #0]
    91b0:	2100      	movs	r1, #0
    91b2:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    91b6:	68a0      	ldr	r0, [r4, #8]
    91b8:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    91bc:	06c9      	lsls	r1, r1, #27
    91be:	d514      	bpl.n	91ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    91c0:	f005 fa7a 	bl	e6b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    91c4:	f000 f910 	bl	93e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    91c8:	68a1      	ldr	r1, [r4, #8]
    91ca:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    91ce:	8bc2      	ldrh	r2, [r0, #30]
    91d0:	f821 2fee 	strh.w	r2, [r1, #238]!
    91d4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    91d6:	8048      	strh	r0, [r1, #2]
    91d8:	2101      	movs	r1, #1
    91da:	2015      	movs	r0, #21
    91dc:	f000 fcb0 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    91e0:	2001      	movs	r0, #1
    91e2:	bd38      	pop	{r3, r4, r5, pc}
    91e4:	e001      	b.n	91ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3d6>
    91e6:	2301      	movs	r3, #1
    91e8:	e7d4      	b.n	9194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x380>
    91ea:	2000      	movs	r0, #0
    91ec:	e7f9      	b.n	91e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3ce>
    91ee:	0000      	.short	0x0000
    91f0:	20000130 	.word	0x20000130
    91f4:	b570      	push	{r4, r5, r6, lr}
    91f6:	460d      	mov	r5, r1
    91f8:	4606      	mov	r6, r0
    91fa:	f005 f884 	bl	e306 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    91fe:	4604      	mov	r4, r0
    9200:	4630      	mov	r0, r6
    9202:	f005 f88c 	bl	e31e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    9206:	4629      	mov	r1, r5
    9208:	f000 f81e 	bl	9248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>
    920c:	b1b8      	cbz	r0, 923e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    920e:	4620      	mov	r0, r4
    9210:	f004 fea4 	bl	df5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9214:	0001      	movs	r1, r0
    9216:	d00d      	beq.n	9234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    9218:	480a      	ldr	r0, [pc, #40]	; (9244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x430>)
    921a:	6880      	ldr	r0, [r0, #8]
    921c:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    9220:	428a      	cmp	r2, r1
    9222:	d007      	beq.n	9234 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    9224:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9228:	2901      	cmp	r1, #1
    922a:	d005      	beq.n	9238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x424>
    922c:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    9230:	4220      	tst	r0, r4
    9232:	d004      	beq.n	923e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    9234:	2001      	movs	r0, #1
    9236:	bd70      	pop	{r4, r5, r6, pc}
    9238:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    923c:	e7f8      	b.n	9230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    923e:	2000      	movs	r0, #0
    9240:	bd70      	pop	{r4, r5, r6, pc}
    9242:	0000      	.short	0x0000
    9244:	20000130 	.word	0x20000130
    9248:	b570      	push	{r4, r5, r6, lr}
    924a:	460d      	mov	r5, r1
    924c:	4604      	mov	r4, r0
    924e:	f004 fe85 	bl	df5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    9252:	b350      	cbz	r0, 92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9254:	4916      	ldr	r1, [pc, #88]	; (92b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49c>)
    9256:	6889      	ldr	r1, [r1, #8]
    9258:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    925c:	4282      	cmp	r2, r0
    925e:	d024      	beq.n	92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9260:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    9264:	2b01      	cmp	r3, #1
    9266:	d005      	beq.n	9274 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    9268:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    926c:	4223      	tst	r3, r4
    926e:	d013      	beq.n	9298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    9270:	b11d      	cbz	r5, 927a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x466>
    9272:	e01a      	b.n	92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9274:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    9278:	e7f8      	b.n	926c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x458>
    927a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    927e:	4221      	tst	r1, r4
    9280:	d113      	bne.n	92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9282:	b15a      	cbz	r2, 929c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x488>
    9284:	2a04      	cmp	r2, #4
    9286:	d00e      	beq.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9288:	2804      	cmp	r0, #4
    928a:	d00c      	beq.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    928c:	2a08      	cmp	r2, #8
    928e:	d00a      	beq.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9290:	2808      	cmp	r0, #8
    9292:	d008      	beq.n	92a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x492>
    9294:	4282      	cmp	r2, r0
    9296:	d908      	bls.n	92aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x496>
    9298:	2000      	movs	r0, #0
    929a:	bd70      	pop	{r4, r5, r6, pc}
    929c:	f240 1155 	movw	r1, #341	; 0x155
    92a0:	2006      	movs	r0, #6
    92a2:	f7fb fcf5 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    92a6:	4282      	cmp	r2, r0
    92a8:	d3f6      	bcc.n	9298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x484>
    92aa:	2001      	movs	r0, #1
    92ac:	bd70      	pop	{r4, r5, r6, pc}
    92ae:	0000      	.short	0x0000
    92b0:	20000130 	.word	0x20000130
    92b4:	490c      	ldr	r1, [pc, #48]	; (92e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d4>)
    92b6:	4602      	mov	r2, r0
    92b8:	7848      	ldrb	r0, [r1, #1]
    92ba:	b998      	cbnz	r0, 92e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    92bc:	4608      	mov	r0, r1
    92be:	6880      	ldr	r0, [r0, #8]
    92c0:	b142      	cbz	r2, 92d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4c0>
    92c2:	7889      	ldrb	r1, [r1, #2]
    92c4:	0709      	lsls	r1, r1, #28
    92c6:	d503      	bpl.n	92d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    92c8:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    92cc:	2808      	cmp	r0, #8
    92ce:	d009      	beq.n	92e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    92d0:	2001      	movs	r0, #1
    92d2:	4770      	bx	lr
    92d4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    92d8:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    92da:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    92dc:	428a      	cmp	r2, r1
    92de:	d801      	bhi.n	92e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d0>
    92e0:	f7ff b81a 	b.w	8318 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    92e4:	2000      	movs	r0, #0
    92e6:	4770      	bx	lr
    92e8:	20000130 	.word	0x20000130
    92ec:	b538      	push	{r3, r4, r5, lr}
    92ee:	4c3d      	ldr	r4, [pc, #244]	; (93e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d0>)
    92f0:	4605      	mov	r5, r0
    92f2:	68a0      	ldr	r0, [r4, #8]
    92f4:	3070      	adds	r0, #112	; 0x70
    92f6:	f006 f940 	bl	f57a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    92fa:	2800      	cmp	r0, #0
    92fc:	d170      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    92fe:	2d00      	cmp	r5, #0
    9300:	d16e      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9302:	68a0      	ldr	r0, [r4, #8]
    9304:	2301      	movs	r3, #1
    9306:	4619      	mov	r1, r3
    9308:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    930c:	3070      	adds	r0, #112	; 0x70
    930e:	f004 fd8c 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9312:	2800      	cmp	r0, #0
    9314:	d164      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9316:	68a0      	ldr	r0, [r4, #8]
    9318:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    931c:	f88d 1000 	strb.w	r1, [sp]
    9320:	9900      	ldr	r1, [sp, #0]
    9322:	9100      	str	r1, [sp, #0]
    9324:	f89d 1000 	ldrb.w	r1, [sp]
    9328:	b149      	cbz	r1, 933e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x52a>
    932a:	2100      	movs	r1, #0
    932c:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    9330:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    9334:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    9338:	2100      	movs	r1, #0
    933a:	2002      	movs	r0, #2
    933c:	e045      	b.n	93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    933e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9342:	2301      	movs	r3, #1
    9344:	2104      	movs	r1, #4
    9346:	3070      	adds	r0, #112	; 0x70
    9348:	f004 fd6f 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    934c:	4605      	mov	r5, r0
    934e:	f7ff fedd 	bl	910c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2f8>
    9352:	2800      	cmp	r0, #0
    9354:	d144      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9356:	4628      	mov	r0, r5
    9358:	f7ff fea0 	bl	909c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x288>
    935c:	2800      	cmp	r0, #0
    935e:	d13f      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    9360:	68a0      	ldr	r0, [r4, #8]
    9362:	2301      	movs	r3, #1
    9364:	2100      	movs	r1, #0
    9366:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    936a:	3070      	adds	r0, #112	; 0x70
    936c:	f004 fd5d 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9370:	b178      	cbz	r0, 9392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9372:	68a0      	ldr	r0, [r4, #8]
    9374:	2301      	movs	r3, #1
    9376:	2104      	movs	r1, #4
    9378:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    937c:	3070      	adds	r0, #112	; 0x70
    937e:	f004 fd54 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9382:	b930      	cbnz	r0, 9392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    9384:	68a0      	ldr	r0, [r4, #8]
    9386:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    938a:	b110      	cbz	r0, 9392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x57e>
    938c:	2100      	movs	r1, #0
    938e:	2012      	movs	r0, #18
    9390:	e01b      	b.n	93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    9392:	68a0      	ldr	r0, [r4, #8]
    9394:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9398:	290a      	cmp	r1, #10
    939a:	d01a      	beq.n	93d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5be>
    939c:	2d00      	cmp	r5, #0
    939e:	d11f      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93a0:	f000 fb1a 	bl	99d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc4>
    93a4:	2800      	cmp	r0, #0
    93a6:	d11b      	bne.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93a8:	68a0      	ldr	r0, [r4, #8]
    93aa:	2301      	movs	r3, #1
    93ac:	2100      	movs	r1, #0
    93ae:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    93b2:	3070      	adds	r0, #112	; 0x70
    93b4:	f004 fd39 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    93b8:	2800      	cmp	r0, #0
    93ba:	d011      	beq.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93bc:	68a0      	ldr	r0, [r4, #8]
    93be:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    93c2:	2800      	cmp	r0, #0
    93c4:	d00c      	beq.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93c6:	2100      	movs	r1, #0
    93c8:	20ff      	movs	r0, #255	; 0xff
    93ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    93ce:	f000 bbb7 	b.w	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    93d2:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    93d6:	7101      	strb	r1, [r0, #4]
    93d8:	2100      	movs	r1, #0
    93da:	2007      	movs	r0, #7
    93dc:	e7f5      	b.n	93ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b6>
    93de:	e7ff      	b.n	93e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5cc>
    93e0:	bd38      	pop	{r3, r4, r5, pc}
    93e2:	0000      	.short	0x0000
    93e4:	20000130 	.word	0x20000130
    93e8:	480a      	ldr	r0, [pc, #40]	; (9414 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>)
    93ea:	b510      	push	{r4, lr}
    93ec:	6881      	ldr	r1, [r0, #8]
    93ee:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    93f2:	2801      	cmp	r0, #1
    93f4:	d009      	beq.n	940a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5f6>
    93f6:	8808      	ldrh	r0, [r1, #0]
    93f8:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    93fc:	312c      	adds	r1, #44	; 0x2c
    93fe:	f005 f91c 	bl	e63a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9406:	f7fd bdcf 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    940a:	2002      	movs	r0, #2
    940c:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9410:	bd10      	pop	{r4, pc}
    9412:	0000      	.short	0x0000
    9414:	20000130 	.word	0x20000130
    9418:	b570      	push	{r4, r5, r6, lr}
    941a:	4c25      	ldr	r4, [pc, #148]	; (94b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x69c>)
    941c:	0005      	movs	r5, r0
    941e:	d12f      	bne.n	9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9420:	f000 f8a4 	bl	956c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x758>
    9424:	f000 f848 	bl	94b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a4>
    9428:	0005      	movs	r5, r0
    942a:	d129      	bne.n	9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    942c:	8860      	ldrh	r0, [r4, #2]
    942e:	0741      	lsls	r1, r0, #29
    9430:	d506      	bpl.n	9440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    9432:	68a1      	ldr	r1, [r4, #8]
    9434:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    9438:	2907      	cmp	r1, #7
    943a:	d101      	bne.n	9440 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x62c>
    943c:	2101      	movs	r1, #1
    943e:	7021      	strb	r1, [r4, #0]
    9440:	0780      	lsls	r0, r0, #30
    9442:	d512      	bpl.n	946a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9444:	68e0      	ldr	r0, [r4, #12]
    9446:	78c0      	ldrb	r0, [r0, #3]
    9448:	2819      	cmp	r0, #25
    944a:	d205      	bcs.n	9458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    944c:	4919      	ldr	r1, [pc, #100]	; (94b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6a0>)
    944e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    9452:	b109      	cbz	r1, 9458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    9454:	4788      	blx	r1
    9456:	e008      	b.n	946a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x656>
    9458:	28ff      	cmp	r0, #255	; 0xff
    945a:	d004      	beq.n	9466 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x652>
    945c:	f240 714d 	movw	r1, #1869	; 0x74d
    9460:	2031      	movs	r0, #49	; 0x31
    9462:	f7fb fc15 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9466:	f001 f91b 	bl	a6a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    946a:	78a0      	ldrb	r0, [r4, #2]
    946c:	06c0      	lsls	r0, r0, #27
    946e:	d507      	bpl.n	9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    9470:	68a0      	ldr	r0, [r4, #8]
    9472:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9476:	290b      	cmp	r1, #11
    9478:	d102      	bne.n	9480 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x66c>
    947a:	210c      	movs	r1, #12
    947c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9480:	7860      	ldrb	r0, [r4, #1]
    9482:	0700      	lsls	r0, r0, #28
    9484:	d511      	bpl.n	94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    9486:	68a0      	ldr	r0, [r4, #8]
    9488:	2301      	movs	r3, #1
    948a:	2105      	movs	r1, #5
    948c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9490:	3070      	adds	r0, #112	; 0x70
    9492:	f004 fcca 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9496:	b128      	cbz	r0, 94a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x690>
    9498:	68a1      	ldr	r1, [r4, #8]
    949a:	2508      	movs	r5, #8
    949c:	2000      	movs	r0, #0
    949e:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    94a2:	e002      	b.n	94aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x696>
    94a4:	2000      	movs	r0, #0
    94a6:	f7fc fc4d 	bl	5d44 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    94aa:	4628      	mov	r0, r5
    94ac:	bd70      	pop	{r4, r5, r6, pc}
    94ae:	0000      	.short	0x0000
    94b0:	20000130 	.word	0x20000130
    94b4:	200001a8 	.word	0x200001a8
    94b8:	b570      	push	{r4, r5, r6, lr}
    94ba:	4c2a      	ldr	r4, [pc, #168]	; (9564 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x750>)
    94bc:	2000      	movs	r0, #0
    94be:	78a1      	ldrb	r1, [r4, #2]
    94c0:	07c9      	lsls	r1, r1, #31
    94c2:	d015      	beq.n	94f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6dc>
    94c4:	6920      	ldr	r0, [r4, #16]
    94c6:	2301      	movs	r3, #1
    94c8:	2105      	movs	r1, #5
    94ca:	78c5      	ldrb	r5, [r0, #3]
    94cc:	68a0      	ldr	r0, [r4, #8]
    94ce:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    94d2:	3070      	adds	r0, #112	; 0x70
    94d4:	f004 fca9 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    94d8:	b158      	cbz	r0, 94f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6de>
    94da:	1ead      	subs	r5, r5, #2
    94dc:	2d0a      	cmp	r5, #10
    94de:	d206      	bcs.n	94ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    94e0:	e8df f005 	tbb	[pc, r5]
    94e4:	05050707 	.word	0x05050707
    94e8:	05050707 	.word	0x05050707
    94ec:	0707      	.short	0x0707
    94ee:	2008      	movs	r0, #8
    94f0:	bd70      	pop	{r4, r5, r6, pc}
    94f2:	6920      	ldr	r0, [r4, #16]
    94f4:	f7fd fc34 	bl	6d60 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    94f8:	b138      	cbz	r0, 950a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f6>
    94fa:	6920      	ldr	r0, [r4, #16]
    94fc:	78c5      	ldrb	r5, [r0, #3]
    94fe:	b145      	cbz	r5, 9512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9500:	2d01      	cmp	r5, #1
    9502:	d006      	beq.n	9512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    9504:	2d16      	cmp	r5, #22
    9506:	d118      	bne.n	953a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9508:	e003      	b.n	9512 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6fe>
    950a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    950e:	f000 bd3d 	b.w	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9512:	68a0      	ldr	r0, [r4, #8]
    9514:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9518:	f004 fcd5 	bl	dec6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    951c:	b168      	cbz	r0, 953a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    951e:	68a1      	ldr	r1, [r4, #8]
    9520:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    9524:	281f      	cmp	r0, #31
    9526:	d008      	beq.n	953a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    9528:	2820      	cmp	r0, #32
    952a:	d003      	beq.n	9534 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x720>
    952c:	2d16      	cmp	r5, #22
    952e:	d00c      	beq.n	954a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x736>
    9530:	2002      	movs	r0, #2
    9532:	bd70      	pop	{r4, r5, r6, pc}
    9534:	2026      	movs	r0, #38	; 0x26
    9536:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    953a:	2d19      	cmp	r5, #25
    953c:	d207      	bcs.n	954e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    953e:	480a      	ldr	r0, [pc, #40]	; (9568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x754>)
    9540:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    9544:	b118      	cbz	r0, 954e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73a>
    9546:	4780      	blx	r0
    9548:	e003      	b.n	9552 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x73e>
    954a:	2020      	movs	r0, #32
    954c:	bd70      	pop	{r4, r5, r6, pc}
    954e:	f000 fd1d 	bl	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9552:	68a2      	ldr	r2, [r4, #8]
    9554:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    9558:	1c49      	adds	r1, r1, #1
    955a:	f143 0300 	adc.w	r3, r3, #0
    955e:	e9c2 1300 	strd	r1, r3, [r2]
    9562:	bd70      	pop	{r4, r5, r6, pc}
    9564:	20000130 	.word	0x20000130
    9568:	20000144 	.word	0x20000144
    956c:	b570      	push	{r4, r5, r6, lr}
    956e:	4c22      	ldr	r4, [pc, #136]	; (95f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e4>)
    9570:	78a0      	ldrb	r0, [r4, #2]
    9572:	0700      	lsls	r0, r0, #28
    9574:	d53e      	bpl.n	95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    9576:	68a0      	ldr	r0, [r4, #8]
    9578:	3070      	adds	r0, #112	; 0x70
    957a:	f005 fffe 	bl	f57a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    957e:	b148      	cbz	r0, 9594 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x780>
    9580:	68a0      	ldr	r0, [r4, #8]
    9582:	21fe      	movs	r1, #254	; 0xfe
    9584:	2500      	movs	r5, #0
    9586:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    958a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    958e:	2919      	cmp	r1, #25
    9590:	d10c      	bne.n	95ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x798>
    9592:	e004      	b.n	959e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78a>
    9594:	f240 7157 	movw	r1, #1879	; 0x757
    9598:	2031      	movs	r0, #49	; 0x31
    959a:	f7fb fb79 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    959e:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    95a2:	f7ff fd69 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    95a6:	68a0      	ldr	r0, [r4, #8]
    95a8:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    95ac:	68a0      	ldr	r0, [r4, #8]
    95ae:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    95b2:	291f      	cmp	r1, #31
    95b4:	d002      	beq.n	95bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7a8>
    95b6:	2927      	cmp	r1, #39	; 0x27
    95b8:	d113      	bne.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    95ba:	e00b      	b.n	95d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7c0>
    95bc:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    95c0:	f004 fc81 	bl	dec6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    95c4:	b108      	cbz	r0, 95ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b6>
    95c6:	2026      	movs	r0, #38	; 0x26
    95c8:	e000      	b.n	95cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7b8>
    95ca:	2020      	movs	r0, #32
    95cc:	68a1      	ldr	r1, [r4, #8]
    95ce:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    95d2:	e006      	b.n	95e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7ce>
    95d4:	2101      	movs	r1, #1
    95d6:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    95da:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    95de:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    95e2:	68a0      	ldr	r0, [r4, #8]
    95e4:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    95e8:	2908      	cmp	r1, #8
    95ea:	d103      	bne.n	95f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e0>
    95ec:	2102      	movs	r1, #2
    95ee:	7021      	strb	r1, [r4, #0]
    95f0:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    95f4:	bd70      	pop	{r4, r5, r6, pc}
    95f6:	0000      	.short	0x0000
    95f8:	20000130 	.word	0x20000130
    95fc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    95fe:	4605      	mov	r5, r0
    9600:	4668      	mov	r0, sp
    9602:	f7fc fa09 	bl	5a18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9606:	b318      	cbz	r0, 9650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x83c>
    9608:	2222      	movs	r2, #34	; 0x22
    960a:	2100      	movs	r1, #0
    960c:	9800      	ldr	r0, [sp, #0]
    960e:	f003 fa19 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    9612:	2103      	movs	r1, #3
    9614:	9800      	ldr	r0, [sp, #0]
    9616:	f004 fed6 	bl	e3c6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    961a:	9800      	ldr	r0, [sp, #0]
    961c:	7801      	ldrb	r1, [r0, #0]
    961e:	f021 0110 	bic.w	r1, r1, #16
    9622:	7001      	strb	r1, [r0, #0]
    9624:	4629      	mov	r1, r5
    9626:	f7fd fbc7 	bl	6db8 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    962a:	2100      	movs	r1, #0
    962c:	4c5f      	ldr	r4, [pc, #380]	; (97ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x998>)
    962e:	f644 162f 	movw	r6, #18735	; 0x492f
    9632:	2d0e      	cmp	r5, #14
    9634:	d07e      	beq.n	9734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    9636:	dc0e      	bgt.n	9656 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x842>
    9638:	f1a5 0502 	sub.w	r5, r5, #2
    963c:	2d0c      	cmp	r5, #12
    963e:	d21c      	bcs.n	967a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    9640:	e8df f005 	tbb	[pc, r5]
    9644:	aa491b1e 	.word	0xaa491b1e
    9648:	551b1eaa 	.word	0x551b1eaa
    964c:	3034aa1b 	.word	0x3034aa1b
    9650:	f640 1187 	movw	r1, #2439	; 0x987
    9654:	e0a6      	b.n	97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    9656:	2d15      	cmp	r5, #21
    9658:	d05c      	beq.n	9714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    965a:	dc08      	bgt.n	966e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x85a>
    965c:	2d11      	cmp	r5, #17
    965e:	d014      	beq.n	968a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x876>
    9660:	2d12      	cmp	r5, #18
    9662:	d01e      	beq.n	96a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    9664:	2d13      	cmp	r5, #19
    9666:	d01c      	beq.n	96a2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88e>
    9668:	2d14      	cmp	r5, #20
    966a:	d106      	bne.n	967a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x866>
    966c:	e052      	b.n	9714 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x900>
    966e:	2d16      	cmp	r5, #22
    9670:	d027      	beq.n	96c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8ae>
    9672:	2d17      	cmp	r5, #23
    9674:	d069      	beq.n	974a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x936>
    9676:	2dff      	cmp	r5, #255	; 0xff
    9678:	d072      	beq.n	9760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94c>
    967a:	f640 11fd 	movw	r1, #2557	; 0x9fd
    967e:	e091      	b.n	97a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    9680:	68a1      	ldr	r1, [r4, #8]
    9682:	9800      	ldr	r0, [sp, #0]
    9684:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    9688:	e00e      	b.n	96a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x894>
    968a:	68a0      	ldr	r0, [r4, #8]
    968c:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    9690:	9800      	ldr	r0, [sp, #0]
    9692:	f004 fe74 	bl	e37e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    9696:	68a0      	ldr	r0, [r4, #8]
    9698:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    969c:	9800      	ldr	r0, [sp, #0]
    969e:	f004 fe70 	bl	e382 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    96a2:	e079      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96a4:	9800      	ldr	r0, [sp, #0]
    96a6:	2106      	movs	r1, #6
    96a8:	7101      	strb	r1, [r0, #4]
    96aa:	e075      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96ac:	9800      	ldr	r0, [sp, #0]
    96ae:	220b      	movs	r2, #11
    96b0:	7102      	strb	r2, [r0, #4]
    96b2:	2259      	movs	r2, #89	; 0x59
    96b4:	7142      	strb	r2, [r0, #5]
    96b6:	7181      	strb	r1, [r0, #6]
    96b8:	21fe      	movs	r1, #254	; 0xfe
    96ba:	71c1      	strb	r1, [r0, #7]
    96bc:	2112      	movs	r1, #18
    96be:	7201      	strb	r1, [r0, #8]
    96c0:	e06a      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96c2:	9800      	ldr	r0, [sp, #0]
    96c4:	f8d4 1008 	ldr.w	r1, [r4, #8]
    96c8:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    96cc:	7102      	strb	r2, [r0, #4]
    96ce:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    96d2:	7141      	strb	r1, [r0, #5]
    96d4:	e060      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96d6:	68a1      	ldr	r1, [r4, #8]
    96d8:	9800      	ldr	r0, [sp, #0]
    96da:	f501 718c 	add.w	r1, r1, #280	; 0x118
    96de:	f004 fe63 	bl	e3a8 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    96e2:	68a1      	ldr	r1, [r4, #8]
    96e4:	9800      	ldr	r0, [sp, #0]
    96e6:	31e4      	adds	r1, #228	; 0xe4
    96e8:	f004 fe5b 	bl	e3a2 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    96ec:	e054      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    96ee:	9101      	str	r1, [sp, #4]
    96f0:	9102      	str	r1, [sp, #8]
    96f2:	f001 fe05 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    96f6:	68a1      	ldr	r1, [r4, #8]
    96f8:	4030      	ands	r0, r6
    96fa:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    96fe:	4001      	ands	r1, r0
    9700:	f88d 1004 	strb.w	r1, [sp, #4]
    9704:	0a00      	lsrs	r0, r0, #8
    9706:	f88d 0005 	strb.w	r0, [sp, #5]
    970a:	a901      	add	r1, sp, #4
    970c:	9800      	ldr	r0, [sp, #0]
    970e:	f004 fe55 	bl	e3bc <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    9712:	e041      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9714:	68a0      	ldr	r0, [r4, #8]
    9716:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    971a:	9800      	ldr	r0, [sp, #0]
    971c:	f004 fe5b 	bl	e3d6 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    9720:	68a0      	ldr	r0, [r4, #8]
    9722:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    9726:	9800      	ldr	r0, [sp, #0]
    9728:	f004 fe59 	bl	e3de <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    972c:	68a0      	ldr	r0, [r4, #8]
    972e:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    9732:	e000      	b.n	9736 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x922>
    9734:	e015      	b.n	9762 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94e>
    9736:	9800      	ldr	r0, [sp, #0]
    9738:	f004 fe55 	bl	e3e6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    973c:	68a0      	ldr	r0, [r4, #8]
    973e:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    9742:	9800      	ldr	r0, [sp, #0]
    9744:	f004 fe53 	bl	e3ee <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    9748:	e026      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    974a:	68a1      	ldr	r1, [r4, #8]
    974c:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    9750:	2801      	cmp	r0, #1
    9752:	9800      	ldr	r0, [sp, #0]
    9754:	d0b8      	beq.n	96c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8b4>
    9756:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    975a:	7102      	strb	r2, [r0, #4]
    975c:	7849      	ldrb	r1, [r1, #1]
    975e:	e7b8      	b.n	96d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8be>
    9760:	e012      	b.n	9788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x974>
    9762:	9101      	str	r1, [sp, #4]
    9764:	9102      	str	r1, [sp, #8]
    9766:	f001 fdcb 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    976a:	68a1      	ldr	r1, [r4, #8]
    976c:	4030      	ands	r0, r6
    976e:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    9772:	4001      	ands	r1, r0
    9774:	f88d 1004 	strb.w	r1, [sp, #4]
    9778:	0a00      	lsrs	r0, r0, #8
    977a:	f88d 0005 	strb.w	r0, [sp, #5]
    977e:	a901      	add	r1, sp, #4
    9780:	9800      	ldr	r0, [sp, #0]
    9782:	f004 fe16 	bl	e3b2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9786:	e007      	b.n	9798 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x984>
    9788:	68a0      	ldr	r0, [r4, #8]
    978a:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    978e:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    9792:	9800      	ldr	r0, [sp, #0]
    9794:	f004 fdf7 	bl	e386 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    9798:	f7fc f918 	bl	59cc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    979c:	2800      	cmp	r0, #0
    979e:	d104      	bne.n	97aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x996>
    97a0:	f640 2101 	movw	r1, #2561	; 0xa01
    97a4:	2031      	movs	r0, #49	; 0x31
    97a6:	f7fb fa73 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    97ac:	20000130 	.word	0x20000130
    97b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    97b4:	4c87      	ldr	r4, [pc, #540]	; (99d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbc0>)
    97b6:	4682      	mov	sl, r0
    97b8:	4689      	mov	r9, r1
    97ba:	68a0      	ldr	r0, [r4, #8]
    97bc:	8800      	ldrh	r0, [r0, #0]
    97be:	f7fb fe97 	bl	54f0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    97c2:	0006      	movs	r6, r0
    97c4:	d00a      	beq.n	97dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9c8>
    97c6:	8860      	ldrh	r0, [r4, #2]
    97c8:	f04f 0500 	mov.w	r5, #0
    97cc:	05c0      	lsls	r0, r0, #23
    97ce:	68a0      	ldr	r0, [r4, #8]
    97d0:	d509      	bpl.n	97e6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9d2>
    97d2:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    97d6:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    97da:	e008      	b.n	97ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9da>
    97dc:	f640 51a7 	movw	r1, #3495	; 0xda7
    97e0:	2031      	movs	r0, #49	; 0x31
    97e2:	f7fb fa55 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97e6:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    97ea:	1c49      	adds	r1, r1, #1
    97ec:	8001      	strh	r1, [r0, #0]
    97ee:	f001 f8f3 	bl	a9d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    97f2:	f04f 0801 	mov.w	r8, #1
    97f6:	b320      	cbz	r0, 9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    97f8:	8860      	ldrh	r0, [r4, #2]
    97fa:	0500      	lsls	r0, r0, #20
    97fc:	d506      	bpl.n	980c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    97fe:	68a0      	ldr	r0, [r4, #8]
    9800:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    9804:	b111      	cbz	r1, 980c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    9806:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    980a:	e01a      	b.n	9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    980c:	68a0      	ldr	r0, [r4, #8]
    980e:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    9812:	1c49      	adds	r1, r1, #1
    9814:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    9818:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    981c:	428b      	cmp	r3, r1
    981e:	d301      	bcc.n	9824 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa10>
    9820:	1a5a      	subs	r2, r3, r1
    9822:	e000      	b.n	9826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa12>
    9824:	2200      	movs	r2, #0
    9826:	88a7      	ldrh	r7, [r4, #4]
    9828:	1d7f      	adds	r7, r7, #5
    982a:	42ba      	cmp	r2, r7
    982c:	d801      	bhi.n	9832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa1e>
    982e:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    9832:	4299      	cmp	r1, r3
    9834:	d305      	bcc.n	9842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2e>
    9836:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    983a:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    983e:	f7fd fbb3 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9842:	8860      	ldrh	r0, [r4, #2]
    9844:	f04f 0702 	mov.w	r7, #2
    9848:	f410 7f40 	tst.w	r0, #768	; 0x300
    984c:	d00e      	beq.n	986c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    984e:	68a0      	ldr	r0, [r4, #8]
    9850:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9854:	b111      	cbz	r1, 985c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa48>
    9856:	2903      	cmp	r1, #3
    9858:	d108      	bne.n	986c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa58>
    985a:	e002      	b.n	9862 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa4e>
    985c:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    9860:	e001      	b.n	9866 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa52>
    9862:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    9866:	2101      	movs	r1, #1
    9868:	f7fe fd7c 	bl	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    986c:	68a0      	ldr	r0, [r4, #8]
    986e:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9872:	2901      	cmp	r1, #1
    9874:	d104      	bne.n	9880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    9876:	8861      	ldrh	r1, [r4, #2]
    9878:	0549      	lsls	r1, r1, #21
    987a:	d501      	bpl.n	9880 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa6c>
    987c:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    9880:	f1ba 0f00 	cmp.w	sl, #0
    9884:	d176      	bne.n	9974 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb60>
    9886:	78a1      	ldrb	r1, [r4, #2]
    9888:	0649      	lsls	r1, r1, #25
    988a:	d502      	bpl.n	9892 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa7e>
    988c:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    9890:	e004      	b.n	989c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa88>
    9892:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    9896:	1c49      	adds	r1, r1, #1
    9898:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    989c:	4648      	mov	r0, r9
    989e:	f7ff fdbb 	bl	9418 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x604>
    98a2:	ea40 0009 	orr.w	r0, r0, r9
    98a6:	4681      	mov	r9, r0
    98a8:	f7ff fd20 	bl	92ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4d8>
    98ac:	68a7      	ldr	r7, [r4, #8]
    98ae:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    98b2:	1c40      	adds	r0, r0, #1
    98b4:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    98b8:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    98bc:	b128      	cbz	r0, 98ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xab6>
    98be:	f7fc faaf 	bl	5e20 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    98c2:	b1b0      	cbz	r0, 98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98c4:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    98c8:	e013      	b.n	98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98ca:	f7fc f927 	bl	5b1c <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    98ce:	b108      	cbz	r0, 98d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xac0>
    98d0:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    98d4:	f7fc f91c 	bl	5b10 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    98d8:	b158      	cbz	r0, 98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98da:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    98de:	1c40      	adds	r0, r0, #1
    98e0:	b2c0      	uxtb	r0, r0
    98e2:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    98e6:	2802      	cmp	r0, #2
    98e8:	d903      	bls.n	98f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xade>
    98ea:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    98ee:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    98f2:	68a0      	ldr	r0, [r4, #8]
    98f4:	2301      	movs	r3, #1
    98f6:	2100      	movs	r1, #0
    98f8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    98fc:	3070      	adds	r0, #112	; 0x70
    98fe:	f004 fa94 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9902:	b920      	cbnz	r0, 990e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xafa>
    9904:	68a0      	ldr	r0, [r4, #8]
    9906:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    990a:	280c      	cmp	r0, #12
    990c:	d15e      	bne.n	99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    990e:	68a0      	ldr	r0, [r4, #8]
    9910:	2301      	movs	r3, #1
    9912:	2100      	movs	r1, #0
    9914:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9918:	3070      	adds	r0, #112	; 0x70
    991a:	f004 fa86 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    991e:	b350      	cbz	r0, 9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9920:	68a0      	ldr	r0, [r4, #8]
    9922:	2301      	movs	r3, #1
    9924:	2100      	movs	r1, #0
    9926:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    992a:	3070      	adds	r0, #112	; 0x70
    992c:	f004 fa7d 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9930:	b308      	cbz	r0, 9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9932:	68a0      	ldr	r0, [r4, #8]
    9934:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9938:	2902      	cmp	r1, #2
    993a:	d147      	bne.n	99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    993c:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    9940:	b9c8      	cbnz	r0, 9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9942:	4630      	mov	r0, r6
    9944:	f003 fd4d 	bl	d3e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    9948:	b1a8      	cbz	r0, 9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    994a:	68a0      	ldr	r0, [r4, #8]
    994c:	3070      	adds	r0, #112	; 0x70
    994e:	f005 fe14 	bl	f57a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9952:	b980      	cbnz	r0, 9976 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    9954:	68a1      	ldr	r1, [r4, #8]
    9956:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    995a:	2801      	cmp	r0, #1
    995c:	d936      	bls.n	99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    995e:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    9962:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    9966:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    996a:	1e93      	subs	r3, r2, #2
    996c:	4298      	cmp	r0, r3
    996e:	db03      	blt.n	9978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb64>
    9970:	2001      	movs	r0, #1
    9972:	e004      	b.n	997e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6a>
    9974:	e01c      	b.n	99b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb9c>
    9976:	e029      	b.n	99cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb8>
    9978:	1a10      	subs	r0, r2, r0
    997a:	1e40      	subs	r0, r0, #1
    997c:	b280      	uxth	r0, r0
    997e:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    9982:	88a3      	ldrh	r3, [r4, #4]
    9984:	429a      	cmp	r2, r3
    9986:	d301      	bcc.n	998c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb78>
    9988:	2201      	movs	r2, #1
    998a:	e002      	b.n	9992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb7e>
    998c:	1a9a      	subs	r2, r3, r2
    998e:	1c52      	adds	r2, r2, #1
    9990:	b292      	uxth	r2, r2
    9992:	4290      	cmp	r0, r2
    9994:	d900      	bls.n	9998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb84>
    9996:	4610      	mov	r0, r2
    9998:	2801      	cmp	r0, #1
    999a:	d101      	bne.n	99a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb8c>
    999c:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    99a0:	68a1      	ldr	r1, [r4, #8]
    99a2:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    99a6:	4410      	add	r0, r2
    99a8:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    99ac:	f001 f8de 	bl	ab6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d58>
    99b0:	78a0      	ldrb	r0, [r4, #2]
    99b2:	464a      	mov	r2, r9
    99b4:	f3c0 1180 	ubfx	r1, r0, #6, #1
    99b8:	4650      	mov	r0, sl
    99ba:	f001 f821 	bl	aa00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bec>
    99be:	68a0      	ldr	r0, [r4, #8]
    99c0:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    99c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99c8:	f7fb bfea 	b.w	59a0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    99cc:	2001      	movs	r0, #1
    99ce:	68a1      	ldr	r1, [r4, #8]
    99d0:	e7e4      	b.n	999c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb88>
    99d2:	0000      	.short	0x0000
    99d4:	20000130 	.word	0x20000130
    99d8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    99da:	4c58      	ldr	r4, [pc, #352]	; (9b3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd28>)
    99dc:	2301      	movs	r3, #1
    99de:	2100      	movs	r1, #0
    99e0:	68a0      	ldr	r0, [r4, #8]
    99e2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    99e6:	3070      	adds	r0, #112	; 0x70
    99e8:	f004 fa1f 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99ec:	2800      	cmp	r0, #0
    99ee:	d07d      	beq.n	9aec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcd8>
    99f0:	68a0      	ldr	r0, [r4, #8]
    99f2:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    99f6:	2500      	movs	r5, #0
    99f8:	b139      	cbz	r1, 9a0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf6>
    99fa:	2100      	movs	r1, #0
    99fc:	200e      	movs	r0, #14
    99fe:	f000 f89f 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9a02:	68a0      	ldr	r0, [r4, #8]
    9a04:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    9a08:	e095      	b.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9a0a:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    9a0e:	b119      	cbz	r1, 9a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc04>
    9a10:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    9a14:	0789      	lsls	r1, r1, #30
    9a16:	d016      	beq.n	9a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc32>
    9a18:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    9a1c:	f88d 1004 	strb.w	r1, [sp, #4]
    9a20:	9901      	ldr	r1, [sp, #4]
    9a22:	9101      	str	r1, [sp, #4]
    9a24:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9a28:	b141      	cbz	r1, 9a3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc28>
    9a2a:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    9a2e:	f88d 1000 	strb.w	r1, [sp]
    9a32:	9900      	ldr	r1, [sp, #0]
    9a34:	9100      	str	r1, [sp, #0]
    9a36:	f89d 1000 	ldrb.w	r1, [sp]
    9a3a:	b189      	cbz	r1, 9a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc4c>
    9a3c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9a40:	2901      	cmp	r1, #1
    9a42:	d02f      	beq.n	9aa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc90>
    9a44:	e071      	b.n	9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9a46:	2100      	movs	r1, #0
    9a48:	200c      	movs	r0, #12
    9a4a:	f000 f879 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9a4e:	68a0      	ldr	r0, [r4, #8]
    9a50:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    9a54:	f041 0101 	orr.w	r1, r1, #1
    9a58:	7001      	strb	r1, [r0, #0]
    9a5a:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    9a5e:	e06a      	b.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9a60:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9a64:	2924      	cmp	r1, #36	; 0x24
    9a66:	d01b      	beq.n	9aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9a68:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9a6c:	2924      	cmp	r1, #36	; 0x24
    9a6e:	d017      	beq.n	9aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc8c>
    9a70:	f05f 0300 	movs.w	r3, #0
    9a74:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    9a78:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    9a7c:	f004 fe01 	bl	e682 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9a80:	68a0      	ldr	r0, [r4, #8]
    9a82:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    9a86:	2100      	movs	r1, #0
    9a88:	2014      	movs	r0, #20
    9a8a:	f000 f859 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9a8e:	68a1      	ldr	r1, [r4, #8]
    9a90:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9a94:	8bc2      	ldrh	r2, [r0, #30]
    9a96:	f821 2fee 	strh.w	r2, [r1, #238]!
    9a9a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9a9c:	8048      	strh	r0, [r1, #2]
    9a9e:	e04a      	b.n	9b36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd22>
    9aa0:	2301      	movs	r3, #1
    9aa2:	e7e7      	b.n	9a74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    9aa4:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    9aa8:	f88d 1000 	strb.w	r1, [sp]
    9aac:	9900      	ldr	r1, [sp, #0]
    9aae:	9100      	str	r1, [sp, #0]
    9ab0:	f89d 1000 	ldrb.w	r1, [sp]
    9ab4:	bb31      	cbnz	r1, 9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    9ab6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9aba:	2301      	movs	r3, #1
    9abc:	210b      	movs	r1, #11
    9abe:	3070      	adds	r0, #112	; 0x70
    9ac0:	f004 f9b3 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ac4:	b9f0      	cbnz	r0, 9b04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf0>
    9ac6:	68a0      	ldr	r0, [r4, #8]
    9ac8:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    9acc:	f005 fd5d 	bl	f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9ad0:	4605      	mov	r5, r0
    9ad2:	68a0      	ldr	r0, [r4, #8]
    9ad4:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9ad8:	f005 fd57 	bl	f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9adc:	4606      	mov	r6, r0
    9ade:	68a0      	ldr	r0, [r4, #8]
    9ae0:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    9ae4:	4628      	mov	r0, r5
    9ae6:	f005 fd5b 	bl	f5a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9aea:	e000      	b.n	9aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcda>
    9aec:	e01e      	b.n	9b2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    9aee:	b150      	cbz	r0, 9b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    9af0:	68a0      	ldr	r0, [r4, #8]
    9af2:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    9af6:	4630      	mov	r0, r6
    9af8:	f005 fd52 	bl	f5a0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    9afc:	b118      	cbz	r0, 9b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcf2>
    9afe:	2000      	movs	r0, #0
    9b00:	f000 f91c 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9b04:	e011      	b.n	9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9b06:	68a0      	ldr	r0, [r4, #8]
    9b08:	2301      	movs	r3, #1
    9b0a:	2103      	movs	r1, #3
    9b0c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b10:	3070      	adds	r0, #112	; 0x70
    9b12:	f004 f98a 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b16:	b940      	cbnz	r0, 9b2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd16>
    9b18:	68a0      	ldr	r0, [r4, #8]
    9b1a:	2301      	movs	r3, #1
    9b1c:	2102      	movs	r1, #2
    9b1e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9b22:	3070      	adds	r0, #112	; 0x70
    9b24:	f004 f981 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b28:	b108      	cbz	r0, 9b2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd1a>
    9b2a:	2000      	movs	r0, #0
    9b2c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9b2e:	2100      	movs	r1, #0
    9b30:	2016      	movs	r0, #22
    9b32:	f000 f805 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9b36:	2001      	movs	r0, #1
    9b38:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9b3a:	0000      	.short	0x0000
    9b3c:	20000130 	.word	0x20000130
    9b40:	b570      	push	{r4, r5, r6, lr}
    9b42:	4c0d      	ldr	r4, [pc, #52]	; (9b78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd64>)
    9b44:	4606      	mov	r6, r0
    9b46:	460d      	mov	r5, r1
    9b48:	68a0      	ldr	r0, [r4, #8]
    9b4a:	3070      	adds	r0, #112	; 0x70
    9b4c:	f005 fd15 	bl	f57a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    9b50:	b120      	cbz	r0, 9b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd48>
    9b52:	f640 2114 	movw	r1, #2580	; 0xa14
    9b56:	2031      	movs	r0, #49	; 0x31
    9b58:	f7fb f89a 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b5c:	68a2      	ldr	r2, [r4, #8]
    9b5e:	2000      	movs	r0, #0
    9b60:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    9b64:	b115      	cbz	r5, 9b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd58>
    9b66:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    9b6a:	bd70      	pop	{r4, r5, r6, pc}
    9b6c:	f822 0faa 	strh.w	r0, [r2, #170]!
    9b70:	2001      	movs	r0, #1
    9b72:	7110      	strb	r0, [r2, #4]
    9b74:	bd70      	pop	{r4, r5, r6, pc}
    9b76:	0000      	.short	0x0000
    9b78:	20000130 	.word	0x20000130
    9b7c:	b570      	push	{r4, r5, r6, lr}
    9b7e:	4d1a      	ldr	r5, [pc, #104]	; (9be8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    9b80:	2600      	movs	r6, #0
    9b82:	68ac      	ldr	r4, [r5, #8]
    9b84:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    9b88:	2801      	cmp	r0, #1
    9b8a:	d00a      	beq.n	9ba2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd8e>
    9b8c:	2802      	cmp	r0, #2
    9b8e:	d129      	bne.n	9be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9b90:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    9b94:	2106      	movs	r1, #6
    9b96:	b1a0      	cbz	r0, 9bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdae>
    9b98:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    9b9c:	2101      	movs	r1, #1
    9b9e:	2002      	movs	r0, #2
    9ba0:	e01b      	b.n	9bda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    9ba2:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    9ba6:	2800      	cmp	r0, #0
    9ba8:	d11c      	bne.n	9be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    9baa:	2200      	movs	r2, #0
    9bac:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    9bb0:	f504 7188 	add.w	r1, r4, #272	; 0x110
    9bb4:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    9bb8:	f004 f8ef 	bl	dd9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9bbc:	2101      	movs	r1, #1
    9bbe:	2005      	movs	r0, #5
    9bc0:	e00b      	b.n	9bda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    9bc2:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    9bc6:	0740      	lsls	r0, r0, #29
    9bc8:	d505      	bpl.n	9bd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    9bca:	2011      	movs	r0, #17
    9bcc:	2203      	movs	r2, #3
    9bce:	f804 2fee 	strb.w	r2, [r4, #238]!
    9bd2:	7061      	strb	r1, [r4, #1]
    9bd4:	e000      	b.n	9bd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    9bd6:	200d      	movs	r0, #13
    9bd8:	2101      	movs	r1, #1
    9bda:	f7ff ffb1 	bl	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    9bde:	68a8      	ldr	r0, [r5, #8]
    9be0:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    9be4:	bd70      	pop	{r4, r5, r6, pc}
    9be6:	0000      	.short	0x0000
    9be8:	20000130 	.word	0x20000130
    9bec:	b570      	push	{r4, r5, r6, lr}
    9bee:	4a2b      	ldr	r2, [pc, #172]	; (9c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    9bf0:	4603      	mov	r3, r0
    9bf2:	8850      	ldrh	r0, [r2, #2]
    9bf4:	4318      	orrs	r0, r3
    9bf6:	8050      	strh	r0, [r2, #2]
    9bf8:	4610      	mov	r0, r2
    9bfa:	2b40      	cmp	r3, #64	; 0x40
    9bfc:	6880      	ldr	r0, [r0, #8]
    9bfe:	d00d      	beq.n	9c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe08>
    9c00:	079e      	lsls	r6, r3, #30
    9c02:	f04f 0500 	mov.w	r5, #0
    9c06:	f04f 0401 	mov.w	r4, #1
    9c0a:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    9c0e:	d50c      	bpl.n	9c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe16>
    9c10:	b14e      	cbz	r6, 9c26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe12>
    9c12:	f640 5114 	movw	r1, #3348	; 0xd14
    9c16:	2031      	movs	r0, #49	; 0x31
    9c18:	f7fb f83a 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c20:	2104      	movs	r1, #4
    9c22:	f7fe bb9f 	b.w	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9c26:	60d1      	str	r1, [r2, #12]
    9c28:	e01c      	b.n	9c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe50>
    9c2a:	b1c6      	cbz	r6, 9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c2c:	6111      	str	r1, [r2, #16]
    9c2e:	78c9      	ldrb	r1, [r1, #3]
    9c30:	2906      	cmp	r1, #6
    9c32:	d002      	beq.n	9c3a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe26>
    9c34:	290b      	cmp	r1, #11
    9c36:	d112      	bne.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c38:	e009      	b.n	9c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3a>
    9c3a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c3e:	2917      	cmp	r1, #23
    9c40:	d10d      	bne.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c42:	2100      	movs	r1, #0
    9c44:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    9c48:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    9c4c:	e007      	b.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c4e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c52:	2911      	cmp	r1, #17
    9c54:	d103      	bne.n	9c5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4a>
    9c56:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    9c5a:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9c5e:	0799      	lsls	r1, r3, #30
    9c60:	d516      	bpl.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c62:	68d1      	ldr	r1, [r2, #12]
    9c64:	78c9      	ldrb	r1, [r1, #3]
    9c66:	2905      	cmp	r1, #5
    9c68:	d002      	beq.n	9c70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5c>
    9c6a:	290b      	cmp	r1, #11
    9c6c:	d110      	bne.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c6e:	e009      	b.n	9c84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe70>
    9c70:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c74:	2915      	cmp	r1, #21
    9c76:	d10b      	bne.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c78:	2100      	movs	r1, #0
    9c7a:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    9c7e:	f800 4c45 	strb.w	r4, [r0, #-69]
    9c82:	e005      	b.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c84:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9c88:	2910      	cmp	r1, #16
    9c8a:	d101      	bne.n	9c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7c>
    9c8c:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    9c90:	0698      	lsls	r0, r3, #26
    9c92:	d501      	bpl.n	9c98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe84>
    9c94:	2008      	movs	r0, #8
    9c96:	7050      	strb	r0, [r2, #1]
    9c98:	bd70      	pop	{r4, r5, r6, pc}
    9c9a:	0000      	.short	0x0000
    9c9c:	20000130 	.word	0x20000130
    9ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ca4:	4c24      	ldr	r4, [pc, #144]	; (9d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf24>)
    9ca6:	2501      	movs	r5, #1
    9ca8:	68a2      	ldr	r2, [r4, #8]
    9caa:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    9cae:	b108      	cbz	r0, 9cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    9cb0:	2701      	movs	r7, #1
    9cb2:	e000      	b.n	9cb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    9cb4:	2700      	movs	r7, #0
    9cb6:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    9cba:	b109      	cbz	r1, 9cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    9cbc:	2601      	movs	r6, #1
    9cbe:	e000      	b.n	9cc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    9cc0:	2600      	movs	r6, #0
    9cc2:	b90f      	cbnz	r7, 9cc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    9cc4:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9cc8:	b90e      	cbnz	r6, 9cce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    9cca:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    9cce:	f102 0362 	add.w	r3, r2, #98	; 0x62
    9cd2:	7218      	strb	r0, [r3, #8]
    9cd4:	7259      	strb	r1, [r3, #9]
    9cd6:	2001      	movs	r0, #1
    9cd8:	7298      	strb	r0, [r3, #10]
    9cda:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    9cde:	2801      	cmp	r0, #1
    9ce0:	d001      	beq.n	9ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    9ce2:	b907      	cbnz	r7, 9ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed2>
    9ce4:	b116      	cbz	r6, 9cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed8>
    9ce6:	2000      	movs	r0, #0
    9ce8:	f000 f828 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    9cec:	68a0      	ldr	r0, [r4, #8]
    9cee:	302c      	adds	r0, #44	; 0x2c
    9cf0:	f004 fd36 	bl	e760 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9cf4:	4606      	mov	r6, r0
    9cf6:	68a0      	ldr	r0, [r4, #8]
    9cf8:	f004 fcde 	bl	e6b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9cfc:	b1c0      	cbz	r0, 9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9cfe:	68a0      	ldr	r0, [r4, #8]
    9d00:	302c      	adds	r0, #44	; 0x2c
    9d02:	f004 fd2d 	bl	e760 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9d06:	68a1      	ldr	r1, [r4, #8]
    9d08:	4607      	mov	r7, r0
    9d0a:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    9d0e:	8808      	ldrh	r0, [r1, #0]
    9d10:	312c      	adds	r1, #44	; 0x2c
    9d12:	f004 fc92 	bl	e63a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9d16:	42be      	cmp	r6, r7
    9d18:	d20a      	bcs.n	9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9d1a:	f7f8 fba7 	bl	246c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    9d1e:	4601      	mov	r1, r0
    9d20:	1bb8      	subs	r0, r7, r6
    9d22:	2865      	cmp	r0, #101	; 0x65
    9d24:	d200      	bcs.n	9d28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf14>
    9d26:	2065      	movs	r0, #101	; 0x65
    9d28:	f7f8 fade 	bl	22e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    9d2c:	b100      	cbz	r0, 9d30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf1c>
    9d2e:	2500      	movs	r5, #0
    9d30:	4628      	mov	r0, r5
    9d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d36:	0000      	.short	0x0000
    9d38:	20000130 	.word	0x20000130
    9d3c:	b510      	push	{r4, lr}
    9d3e:	4c10      	ldr	r4, [pc, #64]	; (9d80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf6c>)
    9d40:	68a1      	ldr	r1, [r4, #8]
    9d42:	880a      	ldrh	r2, [r1, #0]
    9d44:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    9d48:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    9d4c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9d50:	f005 fc1b 	bl	f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9d54:	68a1      	ldr	r1, [r4, #8]
    9d56:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    9d5a:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    9d5e:	f005 fc14 	bl	f58a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    9d62:	68a2      	ldr	r2, [r4, #8]
    9d64:	f202 2102 	addw	r1, r2, #514	; 0x202
    9d68:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    9d6c:	2001      	movs	r0, #1
    9d6e:	7008      	strb	r0, [r1, #0]
    9d70:	2000      	movs	r0, #0
    9d72:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    9d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9d7a:	f7fd b915 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9d7e:	0000      	.short	0x0000
    9d80:	20000130 	.word	0x20000130
    9d84:	b510      	push	{r4, lr}
    9d86:	4c15      	ldr	r4, [pc, #84]	; (9ddc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc8>)
    9d88:	2301      	movs	r3, #1
    9d8a:	2100      	movs	r1, #0
    9d8c:	68a0      	ldr	r0, [r4, #8]
    9d8e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9d92:	3070      	adds	r0, #112	; 0x70
    9d94:	f004 f849 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d98:	b190      	cbz	r0, 9dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfac>
    9d9a:	6920      	ldr	r0, [r4, #16]
    9d9c:	f004 fa8c 	bl	e2b8 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    9da0:	68a1      	ldr	r1, [r4, #8]
    9da2:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9da6:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9daa:	f005 fc07 	bl	f5bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9dae:	b148      	cbz	r0, 9dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfb0>
    9db0:	68a0      	ldr	r0, [r4, #8]
    9db2:	2128      	movs	r1, #40	; 0x28
    9db4:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9db8:	3076      	adds	r0, #118	; 0x76
    9dba:	2101      	movs	r1, #1
    9dbc:	7781      	strb	r1, [r0, #30]
    9dbe:	e00b      	b.n	9dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfc4>
    9dc0:	2001      	movs	r0, #1
    9dc2:	bd10      	pop	{r4, pc}
    9dc4:	68a1      	ldr	r1, [r4, #8]
    9dc6:	6920      	ldr	r0, [r4, #16]
    9dc8:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    9dcc:	f004 fa6f 	bl	e2ae <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    9dd0:	68a1      	ldr	r1, [r4, #8]
    9dd2:	200b      	movs	r0, #11
    9dd4:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9dd8:	2000      	movs	r0, #0
    9dda:	bd10      	pop	{r4, pc}
    9ddc:	20000130 	.word	0x20000130
    9de0:	b570      	push	{r4, r5, r6, lr}
    9de2:	4c29      	ldr	r4, [pc, #164]	; (9e88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1074>)
    9de4:	2301      	movs	r3, #1
    9de6:	2100      	movs	r1, #0
    9de8:	68a0      	ldr	r0, [r4, #8]
    9dea:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9dee:	3070      	adds	r0, #112	; 0x70
    9df0:	f004 f81b 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9df4:	b1b8      	cbz	r0, 9e26 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1012>
    9df6:	2100      	movs	r1, #0
    9df8:	6920      	ldr	r0, [r4, #16]
    9dfa:	f004 fa30 	bl	e25e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    9dfe:	b1a0      	cbz	r0, 9e2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1016>
    9e00:	6920      	ldr	r0, [r4, #16]
    9e02:	68a1      	ldr	r1, [r4, #8]
    9e04:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    9e08:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    9e0c:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    9e10:	f005 fbd4 	bl	f5bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9e14:	b168      	cbz	r0, 9e32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x101e>
    9e16:	68a0      	ldr	r0, [r4, #8]
    9e18:	2128      	movs	r1, #40	; 0x28
    9e1a:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9e1e:	3076      	adds	r0, #118	; 0x76
    9e20:	2101      	movs	r1, #1
    9e22:	7781      	strb	r1, [r0, #30]
    9e24:	e02e      	b.n	9e84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1070>
    9e26:	2001      	movs	r0, #1
    9e28:	bd70      	pop	{r4, r5, r6, pc}
    9e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9e2e:	f000 b8ad 	b.w	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    9e32:	6920      	ldr	r0, [r4, #16]
    9e34:	f004 fa43 	bl	e2be <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    9e38:	f003 ffda 	bl	ddf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    9e3c:	4605      	mov	r5, r0
    9e3e:	68a0      	ldr	r0, [r4, #8]
    9e40:	4629      	mov	r1, r5
    9e42:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    9e46:	6920      	ldr	r0, [r4, #16]
    9e48:	7900      	ldrb	r0, [r0, #4]
    9e4a:	f004 f95c 	bl	e106 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    9e4e:	68a1      	ldr	r1, [r4, #8]
    9e50:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    9e54:	6920      	ldr	r0, [r4, #16]
    9e56:	4629      	mov	r1, r5
    9e58:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    9e5c:	f004 f94f 	bl	e0fe <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    9e60:	68a1      	ldr	r1, [r4, #8]
    9e62:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    9e66:	6920      	ldr	r0, [r4, #16]
    9e68:	f004 fa2c 	bl	e2c4 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    9e6c:	68a1      	ldr	r1, [r4, #8]
    9e6e:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    9e72:	6920      	ldr	r0, [r4, #16]
    9e74:	f004 fa29 	bl	e2ca <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    9e78:	68a1      	ldr	r1, [r4, #8]
    9e7a:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    9e7e:	200d      	movs	r0, #13
    9e80:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9e84:	2000      	movs	r0, #0
    9e86:	bd70      	pop	{r4, r5, r6, pc}
    9e88:	20000130 	.word	0x20000130
    9e8c:	b538      	push	{r3, r4, r5, lr}
    9e8e:	4c29      	ldr	r4, [pc, #164]	; (9f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1120>)
    9e90:	2301      	movs	r3, #1
    9e92:	2100      	movs	r1, #0
    9e94:	68a0      	ldr	r0, [r4, #8]
    9e96:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9e9a:	3070      	adds	r0, #112	; 0x70
    9e9c:	f003 ffc5 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ea0:	b970      	cbnz	r0, 9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9ea2:	68a0      	ldr	r0, [r4, #8]
    9ea4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9ea8:	2a12      	cmp	r2, #18
    9eaa:	d009      	beq.n	9ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ac>
    9eac:	2301      	movs	r3, #1
    9eae:	2105      	movs	r1, #5
    9eb0:	3070      	adds	r0, #112	; 0x70
    9eb2:	f003 ffba 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9eb6:	b108      	cbz	r0, 9ebc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a8>
    9eb8:	2008      	movs	r0, #8
    9eba:	bd38      	pop	{r3, r4, r5, pc}
    9ebc:	2001      	movs	r0, #1
    9ebe:	bd38      	pop	{r3, r4, r5, pc}
    9ec0:	68a0      	ldr	r0, [r4, #8]
    9ec2:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    9ec6:	b908      	cbnz	r0, 9ecc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>
    9ec8:	f7ff f8ca 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9ecc:	68a1      	ldr	r1, [r4, #8]
    9ece:	6920      	ldr	r0, [r4, #16]
    9ed0:	f501 7188 	add.w	r1, r1, #272	; 0x110
    9ed4:	f004 fa08 	bl	e2e8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    9ed8:	68a1      	ldr	r1, [r4, #8]
    9eda:	6920      	ldr	r0, [r4, #16]
    9edc:	31e0      	adds	r1, #224	; 0xe0
    9ede:	f004 f9fa 	bl	e2d6 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    9ee2:	68a1      	ldr	r1, [r4, #8]
    9ee4:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    9ee8:	f88d 0000 	strb.w	r0, [sp]
    9eec:	9800      	ldr	r0, [sp, #0]
    9eee:	9000      	str	r0, [sp, #0]
    9ef0:	f89d 0000 	ldrb.w	r0, [sp]
    9ef4:	b120      	cbz	r0, 9f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    9ef6:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    9efa:	2031      	movs	r0, #49	; 0x31
    9efc:	f7fa fec8 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f00:	8808      	ldrh	r0, [r1, #0]
    9f02:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    9f06:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    9f0a:	6920      	ldr	r0, [r4, #16]
    9f0c:	f004 f9e7 	bl	e2de <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    9f10:	68a1      	ldr	r1, [r4, #8]
    9f12:	6920      	ldr	r0, [r4, #16]
    9f14:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    9f18:	f004 f9da 	bl	e2d0 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    9f1c:	68a0      	ldr	r0, [r4, #8]
    9f1e:	4601      	mov	r1, r0
    9f20:	2201      	movs	r2, #1
    9f22:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    9f26:	2014      	movs	r0, #20
    9f28:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9f2c:	f7fd f83c 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f30:	2000      	movs	r0, #0
    9f32:	bd38      	pop	{r3, r4, r5, pc}
    9f34:	20000130 	.word	0x20000130
    9f38:	b51c      	push	{r2, r3, r4, lr}
    9f3a:	4c13      	ldr	r4, [pc, #76]	; (9f88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>)
    9f3c:	68a0      	ldr	r0, [r4, #8]
    9f3e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9f42:	07c0      	lsls	r0, r0, #31
    9f44:	d001      	beq.n	9f4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1136>
    9f46:	2001      	movs	r0, #1
    9f48:	bd1c      	pop	{r2, r3, r4, pc}
    9f4a:	4669      	mov	r1, sp
    9f4c:	6920      	ldr	r0, [r4, #16]
    9f4e:	f004 f9d1 	bl	e2f4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    9f52:	f001 f9d5 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9f56:	f644 112f 	movw	r1, #18735	; 0x492f
    9f5a:	4008      	ands	r0, r1
    9f5c:	f89d 2000 	ldrb.w	r2, [sp]
    9f60:	68a1      	ldr	r1, [r4, #8]
    9f62:	4002      	ands	r2, r0
    9f64:	f801 2fbc 	strb.w	r2, [r1, #188]!
    9f68:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9f6c:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9f70:	7048      	strb	r0, [r1, #1]
    9f72:	f7ff f875 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9f76:	68a0      	ldr	r0, [r4, #8]
    9f78:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9f7c:	f041 0101 	orr.w	r1, r1, #1
    9f80:	7001      	strb	r1, [r0, #0]
    9f82:	2000      	movs	r0, #0
    9f84:	bd1c      	pop	{r2, r3, r4, pc}
    9f86:	0000      	.short	0x0000
    9f88:	20000130 	.word	0x20000130
    9f8c:	4a0a      	ldr	r2, [pc, #40]	; (9fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    9f8e:	b510      	push	{r4, lr}
    9f90:	6890      	ldr	r0, [r2, #8]
    9f92:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9f96:	070b      	lsls	r3, r1, #28
    9f98:	d501      	bpl.n	9f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x118a>
    9f9a:	2001      	movs	r0, #1
    9f9c:	bd10      	pop	{r4, pc}
    9f9e:	f041 0108 	orr.w	r1, r1, #8
    9fa2:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9fa6:	6911      	ldr	r1, [r2, #16]
    9fa8:	78c9      	ldrb	r1, [r1, #3]
    9faa:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    9fae:	f7ff f857 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    9fb2:	2000      	movs	r0, #0
    9fb4:	bd10      	pop	{r4, pc}
    9fb6:	0000      	.short	0x0000
    9fb8:	20000130 	.word	0x20000130
    9fbc:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9fc0:	4c34      	ldr	r4, [pc, #208]	; (a094 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1280>)
    9fc2:	68a0      	ldr	r0, [r4, #8]
    9fc4:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9fc8:	f010 0f30 	tst.w	r0, #48	; 0x30
    9fcc:	d002      	beq.n	9fd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    9fce:	2001      	movs	r0, #1
    9fd0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9fd4:	6920      	ldr	r0, [r4, #16]
    9fd6:	f004 f9a8 	bl	e32a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9fda:	b318      	cbz	r0, a024 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1210>
    9fdc:	6920      	ldr	r0, [r4, #16]
    9fde:	f004 f996 	bl	e30e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9fe2:	4607      	mov	r7, r0
    9fe4:	6920      	ldr	r0, [r4, #16]
    9fe6:	f004 f996 	bl	e316 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9fea:	4606      	mov	r6, r0
    9fec:	6920      	ldr	r0, [r4, #16]
    9fee:	f004 f98c 	bl	e30a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9ff2:	4605      	mov	r5, r0
    9ff4:	6920      	ldr	r0, [r4, #16]
    9ff6:	f004 f98c 	bl	e312 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9ffa:	4601      	mov	r1, r0
    9ffc:	9700      	str	r7, [sp, #0]
    9ffe:	68a0      	ldr	r0, [r4, #8]
    a000:	4633      	mov	r3, r6
    a002:	462a      	mov	r2, r5
    a004:	302c      	adds	r0, #44	; 0x2c
    a006:	f004 fbe5 	bl	e7d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a00a:	78a0      	ldrb	r0, [r4, #2]
    a00c:	0780      	lsls	r0, r0, #30
    a00e:	d503      	bpl.n	a018 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1204>
    a010:	68e0      	ldr	r0, [r4, #12]
    a012:	78c0      	ldrb	r0, [r0, #3]
    a014:	2814      	cmp	r0, #20
    a016:	d009      	beq.n	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    a018:	68a0      	ldr	r0, [r4, #8]
    a01a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    a01e:	281c      	cmp	r0, #28
    a020:	d004      	beq.n	a02c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    a022:	e007      	b.n	a034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1220>
    a024:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a028:	f7ff bfb0 	b.w	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a02c:	68a1      	ldr	r1, [r4, #8]
    a02e:	2001      	movs	r0, #1
    a030:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a034:	68a1      	ldr	r1, [r4, #8]
    a036:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a03a:	2801      	cmp	r0, #1
    a03c:	d011      	beq.n	a062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    a03e:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    a042:	f88d 0004 	strb.w	r0, [sp, #4]
    a046:	9801      	ldr	r0, [sp, #4]
    a048:	9001      	str	r0, [sp, #4]
    a04a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a04e:	b940      	cbnz	r0, a062 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124e>
    a050:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    a054:	f88d 0000 	strb.w	r0, [sp]
    a058:	9800      	ldr	r0, [sp, #0]
    a05a:	9000      	str	r0, [sp, #0]
    a05c:	f89d 0000 	ldrb.w	r0, [sp]
    a060:	b128      	cbz	r0, a06e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x125a>
    a062:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    a066:	f040 0010 	orr.w	r0, r0, #16
    a06a:	7008      	strb	r0, [r1, #0]
    a06c:	e00d      	b.n	a08a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1276>
    a06e:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    a072:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    a076:	f040 0020 	orr.w	r0, r0, #32
    a07a:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    a07e:	f831 0b2c 	ldrh.w	r0, [r1], #44
    a082:	f004 fbae 	bl	e7e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a086:	f7fc ff8f 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a08a:	f7fe ffe9 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a08e:	2000      	movs	r0, #0
    a090:	e79e      	b.n	9fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    a092:	0000      	.short	0x0000
    a094:	20000130 	.word	0x20000130
    a098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a09a:	4c1a      	ldr	r4, [pc, #104]	; (a104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12f0>)
    a09c:	2301      	movs	r3, #1
    a09e:	210a      	movs	r1, #10
    a0a0:	68a0      	ldr	r0, [r4, #8]
    a0a2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a0a6:	3070      	adds	r0, #112	; 0x70
    a0a8:	f003 febf 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0ac:	b338      	cbz	r0, a0fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ea>
    a0ae:	6920      	ldr	r0, [r4, #16]
    a0b0:	f004 f93b 	bl	e32a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a0b4:	b1c8      	cbz	r0, a0ea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d6>
    a0b6:	6920      	ldr	r0, [r4, #16]
    a0b8:	f004 f929 	bl	e30e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a0bc:	4607      	mov	r7, r0
    a0be:	6920      	ldr	r0, [r4, #16]
    a0c0:	f004 f929 	bl	e316 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a0c4:	4606      	mov	r6, r0
    a0c6:	6920      	ldr	r0, [r4, #16]
    a0c8:	f004 f91f 	bl	e30a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a0cc:	4605      	mov	r5, r0
    a0ce:	6920      	ldr	r0, [r4, #16]
    a0d0:	f004 f91f 	bl	e312 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a0d4:	4601      	mov	r1, r0
    a0d6:	9700      	str	r7, [sp, #0]
    a0d8:	68a0      	ldr	r0, [r4, #8]
    a0da:	4633      	mov	r3, r6
    a0dc:	462a      	mov	r2, r5
    a0de:	302c      	adds	r0, #44	; 0x2c
    a0e0:	f004 fb78 	bl	e7d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a0e4:	68a0      	ldr	r0, [r4, #8]
    a0e6:	f004 fae7 	bl	e6b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a0ea:	68a1      	ldr	r1, [r4, #8]
    a0ec:	2000      	movs	r0, #0
    a0ee:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    a0f2:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a0f6:	f7ff f977 	bl	93e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    a0fa:	2000      	movs	r0, #0
    a0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a0fe:	2001      	movs	r0, #1
    a100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a102:	0000      	.short	0x0000
    a104:	20000130 	.word	0x20000130
    a108:	b510      	push	{r4, lr}
    a10a:	4c09      	ldr	r4, [pc, #36]	; (a130 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x131c>)
    a10c:	68a0      	ldr	r0, [r4, #8]
    a10e:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a112:	0740      	lsls	r0, r0, #29
    a114:	d501      	bpl.n	a11a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1306>
    a116:	2001      	movs	r0, #1
    a118:	bd10      	pop	{r4, pc}
    a11a:	f7fe ffa1 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a11e:	68a0      	ldr	r0, [r4, #8]
    a120:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a124:	f041 0104 	orr.w	r1, r1, #4
    a128:	7001      	strb	r1, [r0, #0]
    a12a:	2000      	movs	r0, #0
    a12c:	bd10      	pop	{r4, pc}
    a12e:	0000      	.short	0x0000
    a130:	20000130 	.word	0x20000130
    a134:	b510      	push	{r4, lr}
    a136:	4c09      	ldr	r4, [pc, #36]	; (a15c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1348>)
    a138:	2301      	movs	r3, #1
    a13a:	2109      	movs	r1, #9
    a13c:	68a0      	ldr	r0, [r4, #8]
    a13e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a142:	3070      	adds	r0, #112	; 0x70
    a144:	f003 fe71 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a148:	2800      	cmp	r0, #0
    a14a:	d006      	beq.n	a15a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1346>
    a14c:	68a1      	ldr	r1, [r4, #8]
    a14e:	2000      	movs	r0, #0
    a150:	f801 0fa2 	strb.w	r0, [r1, #162]!
    a154:	7308      	strb	r0, [r1, #12]
    a156:	f801 0c25 	strb.w	r0, [r1, #-37]
    a15a:	bd10      	pop	{r4, pc}
    a15c:	20000130 	.word	0x20000130
    a160:	b510      	push	{r4, lr}
    a162:	4c0f      	ldr	r4, [pc, #60]	; (a1a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138c>)
    a164:	2301      	movs	r3, #1
    a166:	2100      	movs	r1, #0
    a168:	68a0      	ldr	r0, [r4, #8]
    a16a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a16e:	3070      	adds	r0, #112	; 0x70
    a170:	f003 fe5b 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a174:	b138      	cbz	r0, a186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1372>
    a176:	f7fe ff73 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a17a:	68a1      	ldr	r1, [r4, #8]
    a17c:	2010      	movs	r0, #16
    a17e:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a182:	2000      	movs	r0, #0
    a184:	bd10      	pop	{r4, pc}
    a186:	68a0      	ldr	r0, [r4, #8]
    a188:	2301      	movs	r3, #1
    a18a:	2105      	movs	r1, #5
    a18c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a190:	3070      	adds	r0, #112	; 0x70
    a192:	f003 fe4a 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a196:	b108      	cbz	r0, a19c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1388>
    a198:	2008      	movs	r0, #8
    a19a:	bd10      	pop	{r4, pc}
    a19c:	2001      	movs	r0, #1
    a19e:	bd10      	pop	{r4, pc}
    a1a0:	20000130 	.word	0x20000130
    a1a4:	4806      	ldr	r0, [pc, #24]	; (a1c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13ac>)
    a1a6:	6880      	ldr	r0, [r0, #8]
    a1a8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a1ac:	2911      	cmp	r1, #17
    a1ae:	d001      	beq.n	a1b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a0>
    a1b0:	2002      	movs	r0, #2
    a1b2:	4770      	bx	lr
    a1b4:	2112      	movs	r1, #18
    a1b6:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a1ba:	2000      	movs	r0, #0
    a1bc:	4770      	bx	lr
    a1be:	0000      	.short	0x0000
    a1c0:	20000130 	.word	0x20000130
    a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1c6:	4c34      	ldr	r4, [pc, #208]	; (a298 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1484>)
    a1c8:	2301      	movs	r3, #1
    a1ca:	210b      	movs	r1, #11
    a1cc:	68a0      	ldr	r0, [r4, #8]
    a1ce:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a1d2:	3070      	adds	r0, #112	; 0x70
    a1d4:	f003 fe29 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1d8:	bb78      	cbnz	r0, a23a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1426>
    a1da:	68a0      	ldr	r0, [r4, #8]
    a1dc:	2301      	movs	r3, #1
    a1de:	2100      	movs	r1, #0
    a1e0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a1e4:	3070      	adds	r0, #112	; 0x70
    a1e6:	f003 fe20 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1ea:	b320      	cbz	r0, a236 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1422>
    a1ec:	68a0      	ldr	r0, [r4, #8]
    a1ee:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    a1f2:	2824      	cmp	r0, #36	; 0x24
    a1f4:	d022      	beq.n	a23c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    a1f6:	6920      	ldr	r0, [r4, #16]
    a1f8:	f004 f8b3 	bl	e362 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    a1fc:	b300      	cbz	r0, a240 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x142c>
    a1fe:	68a0      	ldr	r0, [r4, #8]
    a200:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a204:	f041 0104 	orr.w	r1, r1, #4
    a208:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a20c:	6921      	ldr	r1, [r4, #16]
    a20e:	794a      	ldrb	r2, [r1, #5]
    a210:	f002 0207 	and.w	r2, r2, #7
    a214:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    a218:	7909      	ldrb	r1, [r1, #4]
    a21a:	f001 0107 	and.w	r1, r1, #7
    a21e:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    a222:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    a226:	f88d 3000 	strb.w	r3, [sp]
    a22a:	9b00      	ldr	r3, [sp, #0]
    a22c:	9300      	str	r3, [sp, #0]
    a22e:	f89d 3000 	ldrb.w	r3, [sp]
    a232:	bb43      	cbnz	r3, a286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a234:	e008      	b.n	a248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1434>
    a236:	2001      	movs	r0, #1
    a238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a23a:	e7ff      	b.n	a23c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1428>
    a23c:	2020      	movs	r0, #32
    a23e:	e7fb      	b.n	a238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a240:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a244:	f7ff bea2 	b.w	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a248:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    a24c:	2b01      	cmp	r3, #1
    a24e:	d01a      	beq.n	a286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a250:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    a254:	2501      	movs	r5, #1
    a256:	785e      	ldrb	r6, [r3, #1]
    a258:	428e      	cmp	r6, r1
    a25a:	d106      	bne.n	a26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    a25c:	7819      	ldrb	r1, [r3, #0]
    a25e:	4291      	cmp	r1, r2
    a260:	d103      	bne.n	a26a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1456>
    a262:	2102      	movs	r1, #2
    a264:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    a268:	e00d      	b.n	a286 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1472>
    a26a:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    a26e:	8802      	ldrh	r2, [r0, #0]
    a270:	f821 2902 	strh.w	r2, [r1], #-2
    a274:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    a278:	710a      	strb	r2, [r1, #4]
    a27a:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    a27e:	7148      	strb	r0, [r1, #5]
    a280:	700d      	strb	r5, [r1, #0]
    a282:	f7fc fe91 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a286:	68a1      	ldr	r1, [r4, #8]
    a288:	2021      	movs	r0, #33	; 0x21
    a28a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a28e:	f7fe fee7 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a292:	2000      	movs	r0, #0
    a294:	e7d0      	b.n	a238 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1424>
    a296:	0000      	.short	0x0000
    a298:	20000130 	.word	0x20000130
    a29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a2a0:	4c4e      	ldr	r4, [pc, #312]	; (a3dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    a2a2:	68a0      	ldr	r0, [r4, #8]
    a2a4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a2a8:	2920      	cmp	r1, #32
    a2aa:	d009      	beq.n	a2c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ac>
    a2ac:	f05f 0700 	movs.w	r7, #0
    a2b0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a2b4:	2922      	cmp	r1, #34	; 0x22
    a2b6:	d005      	beq.n	a2c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b0>
    a2b8:	b387      	cbz	r7, a31c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1508>
    a2ba:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    a2be:	e003      	b.n	a2c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    a2c0:	2701      	movs	r7, #1
    a2c2:	e7f5      	b.n	a2b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    a2c4:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    a2c8:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    a2cc:	f041 0104 	orr.w	r1, r1, #4
    a2d0:	7001      	strb	r1, [r0, #0]
    a2d2:	6920      	ldr	r0, [r4, #16]
    a2d4:	f7fc fd54 	bl	6d80 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    a2d8:	f04f 0801 	mov.w	r8, #1
    a2dc:	2600      	movs	r6, #0
    a2de:	b308      	cbz	r0, a324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a2e0:	4639      	mov	r1, r7
    a2e2:	6920      	ldr	r0, [r4, #16]
    a2e4:	f7fe ff86 	bl	91f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3e0>
    a2e8:	b1e0      	cbz	r0, a324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1510>
    a2ea:	466a      	mov	r2, sp
    a2ec:	6921      	ldr	r1, [r4, #16]
    a2ee:	68a0      	ldr	r0, [r4, #8]
    a2f0:	f003 febf 	bl	e072 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    a2f4:	b388      	cbz	r0, a35a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1546>
    a2f6:	6920      	ldr	r0, [r4, #16]
    a2f8:	f004 f80f 	bl	e31a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    a2fc:	68a1      	ldr	r1, [r4, #8]
    a2fe:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    a302:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    a306:	f005 f959 	bl	f5bc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    a30a:	b338      	cbz	r0, a35c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1548>
    a30c:	68a0      	ldr	r0, [r4, #8]
    a30e:	2128      	movs	r1, #40	; 0x28
    a310:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    a314:	3076      	adds	r0, #118	; 0x76
    a316:	f880 801e 	strb.w	r8, [r0, #30]
    a31a:	e053      	b.n	a3c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a31c:	e7ff      	b.n	a31e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    a31e:	2002      	movs	r0, #2
    a320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a324:	68a0      	ldr	r0, [r4, #8]
    a326:	f04f 0900 	mov.w	r9, #0
    a32a:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a32e:	2901      	cmp	r1, #1
    a330:	d015      	beq.n	a35e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x154a>
    a332:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    a336:	b1f7      	cbz	r7, a376 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1562>
    a338:	6920      	ldr	r0, [r4, #16]
    a33a:	68a1      	ldr	r1, [r4, #8]
    a33c:	78c0      	ldrb	r0, [r0, #3]
    a33e:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    a342:	fa08 f200 	lsl.w	r2, r8, r0
    a346:	f3c2 6000 	ubfx	r0, r2, #24, #1
    a34a:	b160      	cbz	r0, a366 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1552>
    a34c:	200a      	movs	r0, #10
    a34e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a352:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    a356:	b9a0      	cbnz	r0, a382 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x156e>
    a358:	e008      	b.n	a36c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1558>
    a35a:	e014      	b.n	a386 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1572>
    a35c:	e027      	b.n	a3ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x159a>
    a35e:	201e      	movs	r0, #30
    a360:	f7ff fcec 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a364:	e7e7      	b.n	a336 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1522>
    a366:	f240 31cb 	movw	r1, #971	; 0x3cb
    a36a:	e001      	b.n	a370 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x155c>
    a36c:	f240 31d3 	movw	r1, #979	; 0x3d3
    a370:	2031      	movs	r0, #49	; 0x31
    a372:	f7fa fc8d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a376:	702e      	strb	r6, [r5, #0]
    a378:	f7fe fe7e 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a37c:	f7ff fe06 	bl	9f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1178>
    a380:	4681      	mov	r9, r0
    a382:	4648      	mov	r0, r9
    a384:	e7cc      	b.n	a320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    a386:	68a0      	ldr	r0, [r4, #8]
    a388:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    a38c:	2901      	cmp	r1, #1
    a38e:	d009      	beq.n	a3a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1590>
    a390:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    a394:	68a0      	ldr	r0, [r4, #8]
    a396:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    a39a:	428d      	cmp	r5, r1
    a39c:	d112      	bne.n	a3c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a39e:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    a3a2:	e00f      	b.n	a3c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    a3a4:	2000      	movs	r0, #0
    a3a6:	f7ff fcc9 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a3aa:	702e      	strb	r6, [r5, #0]
    a3ac:	e7f2      	b.n	a394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1580>
    a3ae:	68a0      	ldr	r0, [r4, #8]
    a3b0:	f89d 1000 	ldrb.w	r1, [sp]
    a3b4:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    a3b8:	f89d 1001 	ldrb.w	r1, [sp, #1]
    a3bc:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    a3c0:	2024      	movs	r0, #36	; 0x24
    a3c2:	7028      	strb	r0, [r5, #0]
    a3c4:	68a0      	ldr	r0, [r4, #8]
    a3c6:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    a3ca:	428d      	cmp	r5, r1
    a3cc:	d102      	bne.n	a3d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    a3ce:	f7fe fe53 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a3d2:	e001      	b.n	a3d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    a3d4:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    a3d8:	2000      	movs	r0, #0
    a3da:	e7a1      	b.n	a320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150c>
    a3dc:	20000130 	.word	0x20000130
    a3e0:	b510      	push	{r4, lr}
    a3e2:	4c0a      	ldr	r4, [pc, #40]	; (a40c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f8>)
    a3e4:	68a0      	ldr	r0, [r4, #8]
    a3e6:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    a3ea:	f041 0104 	orr.w	r1, r1, #4
    a3ee:	7001      	strb	r1, [r0, #0]
    a3f0:	6920      	ldr	r0, [r4, #16]
    a3f2:	f003 ffc0 	bl	e376 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    a3f6:	2816      	cmp	r0, #22
    a3f8:	d001      	beq.n	a3fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ea>
    a3fa:	2000      	movs	r0, #0
    a3fc:	bd10      	pop	{r4, pc}
    a3fe:	6920      	ldr	r0, [r4, #16]
    a400:	f003 ffbb 	bl	e37a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    a404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a408:	f7fe be08 	b.w	901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    a40c:	20000130 	.word	0x20000130
    a410:	4802      	ldr	r0, [pc, #8]	; (a41c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1608>)
    a412:	6900      	ldr	r0, [r0, #16]
    a414:	7900      	ldrb	r0, [r0, #4]
    a416:	f7fe be01 	b.w	901c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x208>
    a41a:	0000      	.short	0x0000
    a41c:	20000130 	.word	0x20000130
    a420:	b510      	push	{r4, lr}
    a422:	4c08      	ldr	r4, [pc, #32]	; (a444 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>)
    a424:	68a0      	ldr	r0, [r4, #8]
    a426:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    a42a:	2817      	cmp	r0, #23
    a42c:	d001      	beq.n	a432 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x161e>
    a42e:	2002      	movs	r0, #2
    a430:	bd10      	pop	{r4, pc}
    a432:	f7fe fe21 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a436:	68a1      	ldr	r1, [r4, #8]
    a438:	201b      	movs	r0, #27
    a43a:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    a43e:	2000      	movs	r0, #0
    a440:	bd10      	pop	{r4, pc}
    a442:	0000      	.short	0x0000
    a444:	20000130 	.word	0x20000130
    a448:	b510      	push	{r4, lr}
    a44a:	4c0b      	ldr	r4, [pc, #44]	; (a478 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1664>)
    a44c:	2301      	movs	r3, #1
    a44e:	4619      	mov	r1, r3
    a450:	68a0      	ldr	r0, [r4, #8]
    a452:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a456:	3070      	adds	r0, #112	; 0x70
    a458:	f003 fce7 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a45c:	b108      	cbz	r0, a462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164e>
    a45e:	2000      	movs	r0, #0
    a460:	bd10      	pop	{r4, pc}
    a462:	6920      	ldr	r0, [r4, #16]
    a464:	f003 ff5d 	bl	e322 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    a468:	68a1      	ldr	r1, [r4, #8]
    a46a:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    a46e:	2007      	movs	r0, #7
    a470:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a474:	e7f3      	b.n	a45e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x164a>
    a476:	0000      	.short	0x0000
    a478:	20000130 	.word	0x20000130
    a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a480:	4d37      	ldr	r5, [pc, #220]	; (a560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    a482:	2600      	movs	r6, #0
    a484:	4628      	mov	r0, r5
    a486:	68a9      	ldr	r1, [r5, #8]
    a488:	6900      	ldr	r0, [r0, #16]
    a48a:	2701      	movs	r7, #1
    a48c:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    a490:	7900      	ldrb	r0, [r0, #4]
    a492:	2b0e      	cmp	r3, #14
    a494:	d101      	bne.n	a49a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1686>
    a496:	2812      	cmp	r0, #18
    a498:	d006      	beq.n	a4a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>
    a49a:	4a31      	ldr	r2, [pc, #196]	; (a560 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174c>)
    a49c:	2400      	movs	r4, #0
    a49e:	6892      	ldr	r2, [r2, #8]
    a4a0:	32bc      	adds	r2, #188	; 0xbc
    a4a2:	2b1c      	cmp	r3, #28
    a4a4:	d004      	beq.n	a4b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x169c>
    a4a6:	e005      	b.n	a4b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a0>
    a4a8:	f7ff fe44 	bl	a134 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1320>
    a4ac:	4606      	mov	r6, r0
    a4ae:	e053      	b.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a4b0:	2814      	cmp	r0, #20
    a4b2:	d002      	beq.n	a4ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16a6>
    a4b4:	2b04      	cmp	r3, #4
    a4b6:	d00b      	beq.n	a4d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16bc>
    a4b8:	e00c      	b.n	a4d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c0>
    a4ba:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    a4be:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    a4c2:	2105      	movs	r1, #5
    a4c4:	4610      	mov	r0, r2
    a4c6:	f005 f80a 	bl	f4de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    a4ca:	f7fe ff8d 	bl	93e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    a4ce:	e043      	b.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a4d0:	280e      	cmp	r0, #14
    a4d2:	d002      	beq.n	a4da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c6>
    a4d4:	2b20      	cmp	r3, #32
    a4d6:	d00f      	beq.n	a4f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e4>
    a4d8:	e010      	b.n	a4fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16e8>
    a4da:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    a4de:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    a4e2:	8808      	ldrh	r0, [r1, #0]
    a4e4:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    a4e8:	201a      	movs	r0, #26
    a4ea:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    a4ee:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    a4f2:	f7fc fd59 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a4f6:	e02f      	b.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a4f8:	2816      	cmp	r0, #22
    a4fa:	d006      	beq.n	a50a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    a4fc:	2b26      	cmp	r3, #38	; 0x26
    a4fe:	d101      	bne.n	a504 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f0>
    a500:	2816      	cmp	r0, #22
    a502:	d002      	beq.n	a50a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f6>
    a504:	2817      	cmp	r0, #23
    a506:	d014      	beq.n	a532 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171e>
    a508:	e026      	b.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a50a:	f801 4f7d 	strb.w	r4, [r1, #125]!
    a50e:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    a512:	7848      	ldrb	r0, [r1, #1]
    a514:	2821      	cmp	r0, #33	; 0x21
    a516:	d01f      	beq.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a518:	2108      	movs	r1, #8
    a51a:	4610      	mov	r0, r2
    a51c:	f004 ffdf 	bl	f4de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    a520:	68a8      	ldr	r0, [r5, #8]
    a522:	210b      	movs	r1, #11
    a524:	30bc      	adds	r0, #188	; 0xbc
    a526:	f004 ffda 	bl	f4de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6fa>
    a52a:	201a      	movs	r0, #26
    a52c:	f7ff fc06 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a530:	e012      	b.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a532:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    a536:	2822      	cmp	r0, #34	; 0x22
    a538:	d10e      	bne.n	a558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1744>
    a53a:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    a53e:	f7fe fd9b 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a542:	68a8      	ldr	r0, [r5, #8]
    a544:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    a548:	2801      	cmp	r0, #1
    a54a:	d102      	bne.n	a552 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173e>
    a54c:	2000      	movs	r0, #0
    a54e:	f7ff fbf5 	bl	9d3c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    a552:	68a8      	ldr	r0, [r5, #8]
    a554:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    a558:	4630      	mov	r0, r6
    a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a55e:	0000      	.short	0x0000
    a560:	20000130 	.word	0x20000130
    a564:	b570      	push	{r4, r5, r6, lr}
    a566:	4c2c      	ldr	r4, [pc, #176]	; (a618 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1804>)
    a568:	68a0      	ldr	r0, [r4, #8]
    a56a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a56e:	0789      	lsls	r1, r1, #30
    a570:	d507      	bpl.n	a582 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x176e>
    a572:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a576:	2301      	movs	r3, #1
    a578:	2108      	movs	r1, #8
    a57a:	3070      	adds	r0, #112	; 0x70
    a57c:	f003 fc55 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a580:	b1e8      	cbz	r0, a5be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17aa>
    a582:	68a0      	ldr	r0, [r4, #8]
    a584:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    a588:	0780      	lsls	r0, r0, #30
    a58a:	d412      	bmi.n	a5b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x179e>
    a58c:	6920      	ldr	r0, [r4, #16]
    a58e:	f003 feca 	bl	e326 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a592:	68a1      	ldr	r1, [r4, #8]
    a594:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    a598:	6920      	ldr	r0, [r4, #16]
    a59a:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a59e:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    a5a2:	8840      	ldrh	r0, [r0, #2]
    a5a4:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    a5a8:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    a5ac:	f040 0002 	orr.w	r0, r0, #2
    a5b0:	7008      	strb	r0, [r1, #0]
    a5b2:	68a0      	ldr	r0, [r4, #8]
    a5b4:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a5b8:	07c9      	lsls	r1, r1, #31
    a5ba:	d002      	beq.n	a5c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17ae>
    a5bc:	e010      	b.n	a5e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17cc>
    a5be:	2001      	movs	r0, #1
    a5c0:	bd70      	pop	{r4, r5, r6, pc}
    a5c2:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a5c6:	078a      	lsls	r2, r1, #30
    a5c8:	d504      	bpl.n	a5d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c0>
    a5ca:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    a5ce:	2031      	movs	r0, #49	; 0x31
    a5d0:	f7fa fb5e 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5d4:	f041 0102 	orr.w	r1, r1, #2
    a5d8:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a5dc:	f7fe fd40 	bl	9060 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x24c>
    a5e0:	68a0      	ldr	r0, [r4, #8]
    a5e2:	2500      	movs	r5, #0
    a5e4:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a5e8:	2906      	cmp	r1, #6
    a5ea:	d105      	bne.n	a5f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17e4>
    a5ec:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    a5f0:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a5f4:	f7fc fcd8 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a5f8:	68a0      	ldr	r0, [r4, #8]
    a5fa:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    a5fe:	b149      	cbz	r1, a614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a600:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    a604:	f7fc fcd0 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a608:	68a0      	ldr	r0, [r4, #8]
    a60a:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    a60e:	b909      	cbnz	r1, a614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1800>
    a610:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    a614:	2000      	movs	r0, #0
    a616:	bd70      	pop	{r4, r5, r6, pc}
    a618:	20000130 	.word	0x20000130
    a61c:	b510      	push	{r4, lr}
    a61e:	4c1f      	ldr	r4, [pc, #124]	; (a69c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1888>)
    a620:	68a3      	ldr	r3, [r4, #8]
    a622:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a626:	2808      	cmp	r0, #8
    a628:	d20e      	bcs.n	a648 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1834>
    a62a:	f100 0208 	add.w	r2, r0, #8
    a62e:	f1c0 0008 	rsb	r0, r0, #8
    a632:	b2c1      	uxtb	r1, r0
    a634:	1898      	adds	r0, r3, r2
    a636:	f500 7088 	add.w	r0, r0, #272	; 0x110
    a63a:	f7fa fbb5 	bl	4da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a63e:	68a1      	ldr	r1, [r4, #8]
    a640:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a644:	4410      	add	r0, r2
    a646:	7008      	strb	r0, [r1, #0]
    a648:	68a3      	ldr	r3, [r4, #8]
    a64a:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    a64e:	3808      	subs	r0, #8
    a650:	2804      	cmp	r0, #4
    a652:	d20c      	bcs.n	a66e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x185a>
    a654:	1d02      	adds	r2, r0, #4
    a656:	f1c0 0004 	rsb	r0, r0, #4
    a65a:	b2c1      	uxtb	r1, r0
    a65c:	1898      	adds	r0, r3, r2
    a65e:	30e0      	adds	r0, #224	; 0xe0
    a660:	f7fa fba2 	bl	4da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a664:	68a1      	ldr	r1, [r4, #8]
    a666:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    a66a:	4410      	add	r0, r2
    a66c:	7008      	strb	r0, [r1, #0]
    a66e:	68a0      	ldr	r0, [r4, #8]
    a670:	f890 10f2 	ldrb.w	r1, [r0, #242]	; 0xf2
    a674:	290c      	cmp	r1, #12
    a676:	d30f      	bcc.n	a698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1884>
    a678:	d005      	beq.n	a686 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1872>
    a67a:	f240 71bf 	movw	r1, #1983	; 0x7bf
    a67e:	f04f 0031 	mov.w	r0, #49	; 0x31
    a682:	f7fa fb05 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a686:	2100      	movs	r1, #0
    a688:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    a68c:	2101      	movs	r1, #1
    a68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a692:	2004      	movs	r0, #4
    a694:	f7ff ba54 	b.w	9b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2c>
    a698:	bd10      	pop	{r4, pc}
    a69a:	0000      	.short	0x0000
    a69c:	20000130 	.word	0x20000130
    a6a0:	4804      	ldr	r0, [pc, #16]	; (a6b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a0>)
    a6a2:	2127      	movs	r1, #39	; 0x27
    a6a4:	6880      	ldr	r0, [r0, #8]
    a6a6:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a6aa:	2100      	movs	r1, #0
    a6ac:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    a6b0:	4770      	bx	lr
    a6b2:	0000      	.short	0x0000
    a6b4:	20000130 	.word	0x20000130
    a6b8:	4809      	ldr	r0, [pc, #36]	; (a6e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18cc>)
    a6ba:	b510      	push	{r4, lr}
    a6bc:	6880      	ldr	r0, [r0, #8]
    a6be:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a6c2:	2914      	cmp	r1, #20
    a6c4:	d004      	beq.n	a6d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    a6c6:	f240 619a 	movw	r1, #1690	; 0x69a
    a6ca:	2031      	movs	r0, #49	; 0x31
    a6cc:	f7fa fae0 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6d0:	2101      	movs	r1, #1
    a6d2:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a6d6:	2115      	movs	r1, #21
    a6d8:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a6dc:	bd10      	pop	{r4, pc}
    a6de:	0000      	.short	0x0000
    a6e0:	20000130 	.word	0x20000130
    a6e4:	b510      	push	{r4, lr}
    a6e6:	4c0a      	ldr	r4, [pc, #40]	; (a710 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fc>)
    a6e8:	68a0      	ldr	r0, [r4, #8]
    a6ea:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a6ee:	07c0      	lsls	r0, r0, #31
    a6f0:	d008      	beq.n	a704 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f0>
    a6f2:	f7fe fcc1 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a6f6:	68a0      	ldr	r0, [r4, #8]
    a6f8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a6fc:	f021 0101 	bic.w	r1, r1, #1
    a700:	7001      	strb	r1, [r0, #0]
    a702:	bd10      	pop	{r4, pc}
    a704:	f240 6183 	movw	r1, #1667	; 0x683
    a708:	2031      	movs	r0, #49	; 0x31
    a70a:	f7fa fac1 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a70e:	0000      	.short	0x0000
    a710:	20000130 	.word	0x20000130
    a714:	b510      	push	{r4, lr}
    a716:	4c0a      	ldr	r4, [pc, #40]	; (a740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x192c>)
    a718:	2301      	movs	r3, #1
    a71a:	2100      	movs	r1, #0
    a71c:	68a0      	ldr	r0, [r4, #8]
    a71e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a722:	3070      	adds	r0, #112	; 0x70
    a724:	f003 fb81 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a728:	b120      	cbz	r0, a734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1920>
    a72a:	68a1      	ldr	r1, [r4, #8]
    a72c:	201c      	movs	r0, #28
    a72e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a732:	bd10      	pop	{r4, pc}
    a734:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    a738:	2031      	movs	r0, #49	; 0x31
    a73a:	f7fa faa9 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a73e:	0000      	.short	0x0000
    a740:	20000130 	.word	0x20000130
    a744:	480a      	ldr	r0, [pc, #40]	; (a770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x195c>)
    a746:	b510      	push	{r4, lr}
    a748:	6880      	ldr	r0, [r0, #8]
    a74a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a74e:	f3c1 1201 	ubfx	r2, r1, #4, #2
    a752:	2a01      	cmp	r2, #1
    a754:	d004      	beq.n	a760 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194c>
    a756:	f240 710f 	movw	r1, #1807	; 0x70f
    a75a:	2031      	movs	r0, #49	; 0x31
    a75c:	f7fa fa98 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a760:	f021 0110 	bic.w	r1, r1, #16
    a764:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a76c:	f7fe bc84 	b.w	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a770:	20000130 	.word	0x20000130
    a774:	b510      	push	{r4, lr}
    a776:	4c0a      	ldr	r4, [pc, #40]	; (a7a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>)
    a778:	2301      	movs	r3, #1
    a77a:	2100      	movs	r1, #0
    a77c:	68a0      	ldr	r0, [r4, #8]
    a77e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a782:	3070      	adds	r0, #112	; 0x70
    a784:	f003 fb51 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a788:	b120      	cbz	r0, a794 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1980>
    a78a:	68a1      	ldr	r1, [r4, #8]
    a78c:	200e      	movs	r0, #14
    a78e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a792:	bd10      	pop	{r4, pc}
    a794:	f240 61fb 	movw	r1, #1787	; 0x6fb
    a798:	2031      	movs	r0, #49	; 0x31
    a79a:	f7fa fa79 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a79e:	0000      	.short	0x0000
    a7a0:	20000130 	.word	0x20000130
    a7a4:	4804      	ldr	r0, [pc, #16]	; (a7b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a4>)
    a7a6:	6880      	ldr	r0, [r0, #8]
    a7a8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a7ac:	f021 0104 	bic.w	r1, r1, #4
    a7b0:	7001      	strb	r1, [r0, #0]
    a7b2:	f7fe bc61 	b.w	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a7b6:	0000      	.short	0x0000
    a7b8:	20000130 	.word	0x20000130
    a7bc:	4809      	ldr	r0, [pc, #36]	; (a7e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19d0>)
    a7be:	b510      	push	{r4, lr}
    a7c0:	6880      	ldr	r0, [r0, #8]
    a7c2:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a7c6:	2910      	cmp	r1, #16
    a7c8:	d004      	beq.n	a7d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>
    a7ca:	f240 6192 	movw	r1, #1682	; 0x692
    a7ce:	2031      	movs	r0, #49	; 0x31
    a7d0:	f7fa fa5e 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7d4:	2101      	movs	r1, #1
    a7d6:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    a7da:	2111      	movs	r1, #17
    a7dc:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a7e0:	bd10      	pop	{r4, pc}
    a7e2:	0000      	.short	0x0000
    a7e4:	20000130 	.word	0x20000130
    a7e8:	b510      	push	{r4, lr}
    a7ea:	4c0a      	ldr	r4, [pc, #40]	; (a814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>)
    a7ec:	2301      	movs	r3, #1
    a7ee:	2100      	movs	r1, #0
    a7f0:	68a0      	ldr	r0, [r4, #8]
    a7f2:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a7f6:	3070      	adds	r0, #112	; 0x70
    a7f8:	f003 fb17 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7fc:	b120      	cbz	r0, a808 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19f4>
    a7fe:	68a1      	ldr	r1, [r4, #8]
    a800:	201f      	movs	r0, #31
    a802:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a806:	bd10      	pop	{r4, pc}
    a808:	f240 711b 	movw	r1, #1819	; 0x71b
    a80c:	2031      	movs	r0, #49	; 0x31
    a80e:	f7fa fa3f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a812:	0000      	.short	0x0000
    a814:	20000130 	.word	0x20000130
    a818:	4808      	ldr	r0, [pc, #32]	; (a83c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a28>)
    a81a:	b510      	push	{r4, lr}
    a81c:	6880      	ldr	r0, [r0, #8]
    a81e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a822:	2921      	cmp	r1, #33	; 0x21
    a824:	d005      	beq.n	a832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    a826:	b121      	cbz	r1, a832 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a1e>
    a828:	f240 7122 	movw	r1, #1826	; 0x722
    a82c:	2031      	movs	r0, #49	; 0x31
    a82e:	f7fa fa2f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a832:	2122      	movs	r1, #34	; 0x22
    a834:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a838:	bd10      	pop	{r4, pc}
    a83a:	0000      	.short	0x0000
    a83c:	20000130 	.word	0x20000130
    a840:	4807      	ldr	r0, [pc, #28]	; (a860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a4c>)
    a842:	b510      	push	{r4, lr}
    a844:	6880      	ldr	r0, [r0, #8]
    a846:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a84a:	2915      	cmp	r1, #21
    a84c:	d004      	beq.n	a858 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a44>
    a84e:	f240 61a7 	movw	r1, #1703	; 0x6a7
    a852:	2031      	movs	r0, #49	; 0x31
    a854:	f7fa fa1c 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a858:	2119      	movs	r1, #25
    a85a:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a85e:	bd10      	pop	{r4, pc}
    a860:	20000130 	.word	0x20000130
    a864:	4807      	ldr	r0, [pc, #28]	; (a884 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a70>)
    a866:	b510      	push	{r4, lr}
    a868:	6880      	ldr	r0, [r0, #8]
    a86a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a86e:	2915      	cmp	r1, #21
    a870:	d004      	beq.n	a87c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a68>
    a872:	f240 61a1 	movw	r1, #1697	; 0x6a1
    a876:	2031      	movs	r0, #49	; 0x31
    a878:	f7fa fa0a 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a87c:	2117      	movs	r1, #23
    a87e:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    a882:	bd10      	pop	{r4, pc}
    a884:	20000130 	.word	0x20000130
    a888:	b570      	push	{r4, r5, r6, lr}
    a88a:	4d1b      	ldr	r5, [pc, #108]	; (a8f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>)
    a88c:	68a8      	ldr	r0, [r5, #8]
    a88e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    a892:	291b      	cmp	r1, #27
    a894:	d002      	beq.n	a89c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    a896:	f240 61c1 	movw	r1, #1729	; 0x6c1
    a89a:	e007      	b.n	a8ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a98>
    a89c:	2400      	movs	r4, #0
    a89e:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    a8a2:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    a8a6:	b121      	cbz	r1, a8b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a9e>
    a8a8:	f240 61c5 	movw	r1, #1733	; 0x6c5
    a8ac:	2031      	movs	r0, #49	; 0x31
    a8ae:	f7fa f9ef 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8b2:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    a8b6:	b141      	cbz	r1, a8ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ab6>
    a8b8:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    a8bc:	8801      	ldrh	r1, [r0, #0]
    a8be:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a8c2:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a8c6:	210c      	movs	r1, #12
    a8c8:	e008      	b.n	a8dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac8>
    a8ca:	8801      	ldrh	r1, [r0, #0]
    a8cc:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    a8d0:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    a8d4:	2101      	movs	r1, #1
    a8d6:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    a8da:	210b      	movs	r1, #11
    a8dc:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    a8e0:	8800      	ldrh	r0, [r0, #0]
    a8e2:	f7fa fdef 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a8e6:	f002 ff15 	bl	d714 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a8ea:	f7fc fb5d 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a8ee:	68a8      	ldr	r0, [r5, #8]
    a8f0:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    a8f4:	bd70      	pop	{r4, r5, r6, pc}
    a8f6:	0000      	.short	0x0000
    a8f8:	20000130 	.word	0x20000130
    a8fc:	b510      	push	{r4, lr}
    a8fe:	4c08      	ldr	r4, [pc, #32]	; (a920 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b0c>)
    a900:	2301      	movs	r3, #1
    a902:	4619      	mov	r1, r3
    a904:	68a0      	ldr	r0, [r4, #8]
    a906:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    a90a:	3070      	adds	r0, #112	; 0x70
    a90c:	f003 fa8d 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a910:	2800      	cmp	r0, #0
    a912:	d103      	bne.n	a91c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b08>
    a914:	68a1      	ldr	r1, [r4, #8]
    a916:	2008      	movs	r0, #8
    a918:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    a91c:	bd10      	pop	{r4, pc}
    a91e:	0000      	.short	0x0000
    a920:	20000130 	.word	0x20000130
    a924:	4814      	ldr	r0, [pc, #80]	; (a978 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b64>)
    a926:	b510      	push	{r4, lr}
    a928:	68c1      	ldr	r1, [r0, #12]
    a92a:	6880      	ldr	r0, [r0, #8]
    a92c:	7909      	ldrb	r1, [r1, #4]
    a92e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a932:	2a0a      	cmp	r2, #10
    a934:	d109      	bne.n	a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a936:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    a93a:	428a      	cmp	r2, r1
    a93c:	d105      	bne.n	a94a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b36>
    a93e:	2100      	movs	r1, #0
    a940:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    a944:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a948:	bd10      	pop	{r4, pc}
    a94a:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    a94e:	0713      	lsls	r3, r2, #28
    a950:	d507      	bpl.n	a962 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b4e>
    a952:	f022 0108 	bic.w	r1, r2, #8
    a956:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    a95a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a95e:	f7fe bb8b 	b.w	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a962:	29ff      	cmp	r1, #255	; 0xff
    a964:	d004      	beq.n	a970 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b5c>
    a966:	f240 617d 	movw	r1, #1661	; 0x67d
    a96a:	2031      	movs	r0, #49	; 0x31
    a96c:	f7fa f990 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a974:	f7ff be94 	b.w	a6a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x188c>
    a978:	20000130 	.word	0x20000130
    a97c:	b510      	push	{r4, lr}
    a97e:	4c15      	ldr	r4, [pc, #84]	; (a9d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc0>)
    a980:	68a0      	ldr	r0, [r4, #8]
    a982:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    a986:	0789      	lsls	r1, r1, #30
    a988:	d411      	bmi.n	a9ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b9a>
    a98a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    a98e:	2301      	movs	r3, #1
    a990:	2100      	movs	r1, #0
    a992:	3070      	adds	r0, #112	; 0x70
    a994:	f003 fa49 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a998:	b120      	cbz	r0, a9a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b90>
    a99a:	68a1      	ldr	r1, [r4, #8]
    a99c:	2006      	movs	r0, #6
    a99e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    a9a2:	e009      	b.n	a9b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba4>
    a9a4:	f240 61e7 	movw	r1, #1767	; 0x6e7
    a9a8:	2031      	movs	r0, #49	; 0x31
    a9aa:	f7fa f971 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a9ae:	2100      	movs	r1, #0
    a9b0:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    a9b4:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    a9b8:	68a0      	ldr	r0, [r4, #8]
    a9ba:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    a9be:	0780      	lsls	r0, r0, #30
    a9c0:	d507      	bpl.n	a9d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bbe>
    a9c2:	f7fe fb59 	bl	9078 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x264>
    a9c6:	68a0      	ldr	r0, [r4, #8]
    a9c8:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    a9cc:	f021 0102 	bic.w	r1, r1, #2
    a9d0:	7001      	strb	r1, [r0, #0]
    a9d2:	bd10      	pop	{r4, pc}
    a9d4:	20000130 	.word	0x20000130
    a9d8:	4808      	ldr	r0, [pc, #32]	; (a9fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be8>)
    a9da:	b510      	push	{r4, lr}
    a9dc:	6880      	ldr	r0, [r0, #8]
    a9de:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    a9e2:	b941      	cbnz	r1, a9f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be2>
    a9e4:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    a9e8:	2301      	movs	r3, #1
    a9ea:	2106      	movs	r1, #6
    a9ec:	3070      	adds	r0, #112	; 0x70
    a9ee:	f003 fa1c 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9f2:	2800      	cmp	r0, #0
    a9f4:	d000      	beq.n	a9f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1be4>
    a9f6:	2001      	movs	r0, #1
    a9f8:	bd10      	pop	{r4, pc}
    a9fa:	0000      	.short	0x0000
    a9fc:	20000130 	.word	0x20000130
    aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa02:	4c59      	ldr	r4, [pc, #356]	; (ab68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d54>)
    aa04:	4606      	mov	r6, r0
    aa06:	4615      	mov	r5, r2
    aa08:	68a0      	ldr	r0, [r4, #8]
    aa0a:	b109      	cbz	r1, aa10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bfc>
    aa0c:	2100      	movs	r1, #0
    aa0e:	e004      	b.n	aa1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c06>
    aa10:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    aa14:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    aa18:	4411      	add	r1, r2
    aa1a:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    aa1e:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    aa22:	f88d 1000 	strb.w	r1, [sp]
    aa26:	9900      	ldr	r1, [sp, #0]
    aa28:	9100      	str	r1, [sp, #0]
    aa2a:	f89d 1000 	ldrb.w	r1, [sp]
    aa2e:	b939      	cbnz	r1, aa40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c2c>
    aa30:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    aa34:	2301      	movs	r3, #1
    aa36:	4619      	mov	r1, r3
    aa38:	3070      	adds	r0, #112	; 0x70
    aa3a:	f003 f9f6 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa3e:	b130      	cbz	r0, aa4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c3a>
    aa40:	68a0      	ldr	r0, [r4, #8]
    aa42:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    aa46:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    aa4a:	4411      	add	r1, r2
    aa4c:	8001      	strh	r1, [r0, #0]
    aa4e:	68a0      	ldr	r0, [r4, #8]
    aa50:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    aa54:	b132      	cbz	r2, aa64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c50>
    aa56:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    aa5a:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    aa5e:	4419      	add	r1, r3
    aa60:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    aa64:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    aa68:	2b00      	cmp	r3, #0
    aa6a:	dd06      	ble.n	aa7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c66>
    aa6c:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    aa70:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    aa74:	4439      	add	r1, r7
    aa76:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    aa7a:	2101      	movs	r1, #1
    aa7c:	273d      	movs	r7, #61	; 0x3d
    aa7e:	b116      	cbz	r6, aa86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c72>
    aa80:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    aa84:	e012      	b.n	aaac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    aa86:	7824      	ldrb	r4, [r4, #0]
    aa88:	2c02      	cmp	r4, #2
    aa8a:	d009      	beq.n	aaa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c8c>
    aa8c:	2c01      	cmp	r4, #1
    aa8e:	d011      	beq.n	aab4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca0>
    aa90:	b33d      	cbz	r5, aae2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cce>
    aa92:	f100 0294 	add.w	r2, r0, #148	; 0x94
    aa96:	7011      	strb	r1, [r2, #0]
    aa98:	06e9      	lsls	r1, r5, #27
    aa9a:	d50e      	bpl.n	aaba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ca6>
    aa9c:	211e      	movs	r1, #30
    aa9e:	e018      	b.n	aad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    aaa0:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    aaa4:	2a06      	cmp	r2, #6
    aaa6:	d044      	beq.n	ab32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    aaa8:	2216      	movs	r2, #22
    aaaa:	e042      	b.n	ab32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    aaac:	f100 0294 	add.w	r2, r0, #148	; 0x94
    aab0:	7011      	strb	r1, [r2, #0]
    aab2:	e047      	b.n	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    aab4:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    aab8:	e03b      	b.n	ab32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    aaba:	0729      	lsls	r1, r5, #28
    aabc:	d502      	bpl.n	aac4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb0>
    aabe:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    aac2:	e03f      	b.n	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    aac4:	06a9      	lsls	r1, r5, #26
    aac6:	d501      	bpl.n	aacc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cb8>
    aac8:	2123      	movs	r1, #35	; 0x23
    aaca:	e002      	b.n	aad2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cbe>
    aacc:	07a9      	lsls	r1, r5, #30
    aace:	d003      	beq.n	aad8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cc4>
    aad0:	212a      	movs	r1, #42	; 0x2a
    aad2:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    aad6:	e035      	b.n	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    aad8:	f640 41c1 	movw	r1, #3265	; 0xcc1
    aadc:	2031      	movs	r0, #49	; 0x31
    aade:	f7fa f8d7 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aae2:	b12a      	cbz	r2, aaf0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cdc>
    aae4:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    aae8:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    aaec:	42a2      	cmp	r2, r4
    aaee:	d216      	bcs.n	ab1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    aaf0:	2b00      	cmp	r3, #0
    aaf2:	dd05      	ble.n	ab00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1cec>
    aaf4:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    aaf8:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    aafc:	429a      	cmp	r2, r3
    aafe:	d20e      	bcs.n	ab1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0a>
    ab00:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    ab04:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    ab08:	4293      	cmp	r3, r2
    ab0a:	d30a      	bcc.n	ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    ab0c:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    ab10:	f88d 3000 	strb.w	r3, [sp]
    ab14:	9b00      	ldr	r3, [sp, #0]
    ab16:	9300      	str	r3, [sp, #0]
    ab18:	f89d 3000 	ldrb.w	r3, [sp]
    ab1c:	b10b      	cbz	r3, ab22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d0e>
    ab1e:	2222      	movs	r2, #34	; 0x22
    ab20:	e007      	b.n	ab32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    ab22:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    ab26:	b13b      	cbz	r3, ab38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d24>
    ab28:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    ab2c:	4293      	cmp	r3, r2
    ab2e:	d309      	bcc.n	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    ab30:	2208      	movs	r2, #8
    ab32:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    ab36:	e7b9      	b.n	aaac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1c98>
    ab38:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    ab3c:	2a06      	cmp	r2, #6
    ab3e:	d301      	bcc.n	ab44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d30>
    ab40:	223e      	movs	r2, #62	; 0x3e
    ab42:	e7f6      	b.n	ab32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d1e>
    ab44:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    ab48:	f88d 1000 	strb.w	r1, [sp]
    ab4c:	9900      	ldr	r1, [sp, #0]
    ab4e:	9100      	str	r1, [sp, #0]
    ab50:	f89d 1000 	ldrb.w	r1, [sp]
    ab54:	b119      	cbz	r1, ab5e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d4a>
    ab56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ab5a:	f004 bcff 	b.w	f55c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    ab5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ab62:	2100      	movs	r1, #0
    ab64:	f7fd bbfe 	b.w	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    ab68:	20000130 	.word	0x20000130
    ab6c:	b570      	push	{r4, r5, r6, lr}
    ab6e:	4d2d      	ldr	r5, [pc, #180]	; (ac24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e10>)
    ab70:	68a8      	ldr	r0, [r5, #8]
    ab72:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    ab76:	b151      	cbz	r1, ab8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    ab78:	2901      	cmp	r1, #1
    ab7a:	d008      	beq.n	ab8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    ab7c:	2902      	cmp	r1, #2
    ab7e:	d009      	beq.n	ab94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    ab80:	2903      	cmp	r1, #3
    ab82:	d007      	beq.n	ab94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d80>
    ab84:	f640 217f 	movw	r1, #2687	; 0xa7f
    ab88:	2031      	movs	r0, #49	; 0x31
    ab8a:	f7fa f881 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ab8e:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    ab92:	e035      	b.n	ac00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dec>
    ab94:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    ab98:	2908      	cmp	r1, #8
    ab9a:	d034      	beq.n	ac06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1df2>
    ab9c:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    aba0:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    aba4:	2400      	movs	r4, #0
    aba6:	1c8b      	adds	r3, r1, #2
    aba8:	429a      	cmp	r2, r3
    abaa:	d306      	bcc.n	abba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    abac:	1a51      	subs	r1, r2, r1
    abae:	1e89      	subs	r1, r1, #2
    abb0:	040c      	lsls	r4, r1, #16
    abb2:	0c24      	lsrs	r4, r4, #16
    abb4:	d001      	beq.n	abba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1da6>
    abb6:	1e64      	subs	r4, r4, #1
    abb8:	b2a4      	uxth	r4, r4
    abba:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    abbe:	b139      	cbz	r1, abd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dbc>
    abc0:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    abc4:	2301      	movs	r3, #1
    abc6:	2109      	movs	r1, #9
    abc8:	3070      	adds	r0, #112	; 0x70
    abca:	f003 f92e 	bl	de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abce:	b330      	cbz	r0, ac1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e0a>
    abd0:	f7ff ff02 	bl	a9d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1bc4>
    abd4:	b168      	cbz	r0, abf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    abd6:	68a9      	ldr	r1, [r5, #8]
    abd8:	2000      	movs	r0, #0
    abda:	3198      	adds	r1, #152	; 0x98
    abdc:	c906      	ldmia	r1, {r1, r2}
    abde:	1c8b      	adds	r3, r1, #2
    abe0:	429a      	cmp	r2, r3
    abe2:	d303      	bcc.n	abec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    abe4:	1a50      	subs	r0, r2, r1
    abe6:	1e80      	subs	r0, r0, #2
    abe8:	d000      	beq.n	abec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dd8>
    abea:	1e40      	subs	r0, r0, #1
    abec:	42a0      	cmp	r0, r4
    abee:	d200      	bcs.n	abf2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1dde>
    abf0:	b284      	uxth	r4, r0
    abf2:	b10c      	cbz	r4, abf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    abf4:	1e64      	subs	r4, r4, #1
    abf6:	b2a4      	uxth	r4, r4
    abf8:	68a8      	ldr	r0, [r5, #8]
    abfa:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    abfe:	4421      	add	r1, r4
    ac00:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    ac04:	bd70      	pop	{r4, r5, r6, pc}
    ac06:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    ac0a:	2903      	cmp	r1, #3
    ac0c:	d3bf      	bcc.n	ab8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1d7a>
    ac0e:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    ac12:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    ac14:	4411      	add	r1, r2
    ac16:	1c49      	adds	r1, r1, #1
    ac18:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    ac1c:	bd70      	pop	{r4, r5, r6, pc}
    ac1e:	2400      	movs	r4, #0
    ac20:	e7ea      	b.n	abf8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1de4>
    ac22:	0000      	.short	0x0000
    ac24:	20000130 	.word	0x20000130

0000ac28 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    ac28:	4903      	ldr	r1, [pc, #12]	; (ac38 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    ac2a:	884a      	ldrh	r2, [r1, #2]
    ac2c:	8002      	strh	r2, [r0, #0]
    ac2e:	7809      	ldrb	r1, [r1, #0]
    ac30:	7081      	strb	r1, [r0, #2]
    ac32:	2000      	movs	r0, #0
    ac34:	4770      	bx	lr
    ac36:	0000      	.short	0x0000
    ac38:	20000f48 	.word	0x20000f48

0000ac3c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    ac3c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ac3e:	460c      	mov	r4, r1
    ac40:	4605      	mov	r5, r0
    ac42:	8800      	ldrh	r0, [r0, #0]
    ac44:	4669      	mov	r1, sp
    ac46:	f003 f8c6 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ac4a:	0001      	movs	r1, r0
    ac4c:	f04f 0000 	mov.w	r0, #0
    ac50:	d005      	beq.n	ac5e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    ac52:	f8c4 0002 	str.w	r0, [r4, #2]
    ac56:	71a0      	strb	r0, [r4, #6]
    ac58:	8020      	strh	r0, [r4, #0]
    ac5a:	2002      	movs	r0, #2
    ac5c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ac5e:	9901      	ldr	r1, [sp, #4]
    ac60:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    ac64:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    ac68:	f8d1 2016 	ldr.w	r2, [r1, #22]
    ac6c:	f8c4 2002 	str.w	r2, [r4, #2]
    ac70:	7e8a      	ldrb	r2, [r1, #26]
    ac72:	71a2      	strb	r2, [r4, #6]
    ac74:	882a      	ldrh	r2, [r5, #0]
    ac76:	8022      	strh	r2, [r4, #0]
    ac78:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    ac7c:	f88d 2008 	strb.w	r2, [sp, #8]
    ac80:	9a02      	ldr	r2, [sp, #8]
    ac82:	9202      	str	r2, [sp, #8]
    ac84:	f89d 2008 	ldrb.w	r2, [sp, #8]
    ac88:	2a00      	cmp	r2, #0
    ac8a:	d1eb      	bne.n	ac64 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    ac8c:	2000      	movs	r0, #0
    ac8e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ac90 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    ac90:	b51c      	push	{r2, r3, r4, lr}
    ac92:	8800      	ldrh	r0, [r0, #0]
    ac94:	4669      	mov	r1, sp
    ac96:	f003 f89e 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ac9a:	2800      	cmp	r0, #0
    ac9c:	d10b      	bne.n	acb6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    ac9e:	480b      	ldr	r0, [pc, #44]	; (accc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    aca0:	7800      	ldrb	r0, [r0, #0]
    aca2:	b188      	cbz	r0, acc8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    aca4:	9801      	ldr	r0, [sp, #4]
    aca6:	f005 fb77 	bl	10398 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
    acaa:	b128      	cbz	r0, acb8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    acac:	9801      	ldr	r0, [sp, #4]
    acae:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    acb2:	b118      	cbz	r0, acbc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    acb4:	203a      	movs	r0, #58	; 0x3a
    acb6:	bd1c      	pop	{r2, r3, r4, pc}
    acb8:	2002      	movs	r0, #2
    acba:	bd1c      	pop	{r2, r3, r4, pc}
    acbc:	9901      	ldr	r1, [sp, #4]
    acbe:	2001      	movs	r0, #1
    acc0:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    acc4:	2000      	movs	r0, #0
    acc6:	bd1c      	pop	{r2, r3, r4, pc}
    acc8:	2011      	movs	r0, #17
    acca:	bd1c      	pop	{r2, r3, r4, pc}
    accc:	2000020c 	.word	0x2000020c

0000acd0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    acd0:	b510      	push	{r4, lr}
    acd2:	4604      	mov	r4, r0
    acd4:	f005 fb57 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    acd8:	b130      	cbz	r0, ace8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    acda:	4804      	ldr	r0, [pc, #16]	; (acec <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    acdc:	8881      	ldrh	r1, [r0, #4]
    acde:	8021      	strh	r1, [r4, #0]
    ace0:	88c0      	ldrh	r0, [r0, #6]
    ace2:	8060      	strh	r0, [r4, #2]
    ace4:	2000      	movs	r0, #0
    ace6:	bd10      	pop	{r4, pc}
    ace8:	2001      	movs	r0, #1
    acea:	bd10      	pop	{r4, pc}
    acec:	20000214 	.word	0x20000214

0000acf0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    acf0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    acf2:	4605      	mov	r5, r0
    acf4:	f000 fb04 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    acf8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    acfc:	b310      	cbz	r0, ad44 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    acfe:	2400      	movs	r4, #0
    ad00:	a802      	add	r0, sp, #8
    ad02:	f88d 4004 	strb.w	r4, [sp, #4]
    ad06:	f88d 4008 	strb.w	r4, [sp, #8]
    ad0a:	9000      	str	r0, [sp, #0]
    ad0c:	78aa      	ldrb	r2, [r5, #2]
    ad0e:	7869      	ldrb	r1, [r5, #1]
    ad10:	7828      	ldrb	r0, [r5, #0]
    ad12:	ab01      	add	r3, sp, #4
    ad14:	f005 fb98 	bl	10448 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    ad18:	2800      	cmp	r0, #0
    ad1a:	d112      	bne.n	ad42 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    ad1c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad20:	f005 fa99 	bl	10256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ad24:	b180      	cbz	r0, ad48 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    ad26:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ad2a:	f005 fa94 	bl	10256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ad2e:	b158      	cbz	r0, ad48 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    ad30:	4806      	ldr	r0, [pc, #24]	; (ad4c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    ad32:	f89d 1004 	ldrb.w	r1, [sp, #4]
    ad36:	7381      	strb	r1, [r0, #14]
    ad38:	f89d 1008 	ldrb.w	r1, [sp, #8]
    ad3c:	73c1      	strb	r1, [r0, #15]
    ad3e:	8204      	strh	r4, [r0, #16]
    ad40:	2000      	movs	r0, #0
    ad42:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ad44:	2001      	movs	r0, #1
    ad46:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ad48:	2011      	movs	r0, #17
    ad4a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ad4c:	20000f48 	.word	0x20000f48

0000ad50 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ad50:	7801      	ldrb	r1, [r0, #0]
    ad52:	b171      	cbz	r1, ad72 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ad54:	7841      	ldrb	r1, [r0, #1]
    ad56:	b161      	cbz	r1, ad72 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ad58:	8841      	ldrh	r1, [r0, #2]
    ad5a:	291b      	cmp	r1, #27
    ad5c:	d309      	bcc.n	ad72 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ad5e:	8881      	ldrh	r1, [r0, #4]
    ad60:	291b      	cmp	r1, #27
    ad62:	d306      	bcc.n	ad72 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ad64:	4904      	ldr	r1, [pc, #16]	; (ad78 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ad66:	6802      	ldr	r2, [r0, #0]
    ad68:	600a      	str	r2, [r1, #0]
    ad6a:	8880      	ldrh	r0, [r0, #4]
    ad6c:	8088      	strh	r0, [r1, #4]
    ad6e:	2000      	movs	r0, #0
    ad70:	4770      	bx	lr
    ad72:	2012      	movs	r0, #18
    ad74:	4770      	bx	lr
    ad76:	0000      	.short	0x0000
    ad78:	20000f48 	.word	0x20000f48

0000ad7c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ad7c:	6800      	ldr	r0, [r0, #0]
    ad7e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ad82:	4288      	cmp	r0, r1
    ad84:	d303      	bcc.n	ad8e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ad86:	4903      	ldr	r1, [pc, #12]	; (ad94 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ad88:	6088      	str	r0, [r1, #8]
    ad8a:	2000      	movs	r0, #0
    ad8c:	4770      	bx	lr
    ad8e:	2012      	movs	r0, #18
    ad90:	4770      	bx	lr
    ad92:	0000      	.short	0x0000
    ad94:	20000f48 	.word	0x20000f48

0000ad98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    ad98:	4a03      	ldr	r2, [pc, #12]	; (ada8 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    ad9a:	e9d2 1200 	ldrd	r1, r2, [r2]
    ad9e:	6001      	str	r1, [r0, #0]
    ada0:	6042      	str	r2, [r0, #4]
    ada2:	2000      	movs	r0, #0
    ada4:	4770      	bx	lr
    ada6:	0000      	.short	0x0000
    ada8:	0000b1dc 	.word	0x0000b1dc

0000adac <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    adac:	b510      	push	{r4, lr}
    adae:	2005      	movs	r0, #5
    adb0:	f000 fa9c 	bl	b2ec <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    adb4:	f7fd fe52 	bl	8a5c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    adb8:	4902      	ldr	r1, [pc, #8]	; (adc4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    adba:	4801      	ldr	r0, [pc, #4]	; (adc0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    adbc:	6048      	str	r0, [r1, #4]
    adbe:	bd10      	pop	{r4, pc}
    adc0:	0000ae1d 	.word	0x0000ae1d
    adc4:	2000020c 	.word	0x2000020c

0000adc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    adc8:	b510      	push	{r4, lr}
    adca:	f002 ff58 	bl	dc7e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    adce:	f7fb fc6f 	bl	66b0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    add2:	f000 faa5 	bl	b320 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    add6:	f003 fc00 	bl	e5da <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    adda:	480e      	ldr	r0, [pc, #56]	; (ae14 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    addc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ade0:	4b0d      	ldr	r3, [pc, #52]	; (ae18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    ade2:	8281      	strh	r1, [r0, #20]
    ade4:	2100      	movs	r1, #0
    ade6:	7581      	strb	r1, [r0, #22]
    ade8:	8301      	strh	r1, [r0, #24]
    adea:	221b      	movs	r2, #27
    adec:	801a      	strh	r2, [r3, #0]
    adee:	f44f 74a4 	mov.w	r4, #328	; 0x148
    adf2:	805c      	strh	r4, [r3, #2]
    adf4:	809a      	strh	r2, [r3, #4]
    adf6:	80dc      	strh	r4, [r3, #6]
    adf8:	7381      	strb	r1, [r0, #14]
    adfa:	73c1      	strb	r1, [r0, #15]
    adfc:	2303      	movs	r3, #3
    adfe:	7003      	strb	r3, [r0, #0]
    ae00:	2302      	movs	r3, #2
    ae02:	7043      	strb	r3, [r0, #1]
    ae04:	8042      	strh	r2, [r0, #2]
    ae06:	8082      	strh	r2, [r0, #4]
    ae08:	f640 62a6 	movw	r2, #3750	; 0xea6
    ae0c:	6082      	str	r2, [r0, #8]
    ae0e:	7481      	strb	r1, [r0, #18]
    ae10:	7301      	strb	r1, [r0, #12]
    ae12:	bd10      	pop	{r4, pc}
    ae14:	20000f48 	.word	0x20000f48
    ae18:	20000214 	.word	0x20000214
    ae1c:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae20:	4692      	mov	sl, r2
    ae22:	460f      	mov	r7, r1
    ae24:	4681      	mov	r9, r0
    ae26:	f005 faae 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    ae2a:	2800      	cmp	r0, #0
    ae2c:	d063      	beq.n	aef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    ae2e:	4933      	ldr	r1, [pc, #204]	; (aefc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x134>)
    ae30:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ae34:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ae38:	8808      	ldrh	r0, [r1, #0]
    ae3a:	4290      	cmp	r0, r2
    ae3c:	d300      	bcc.n	ae40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x78>
    ae3e:	4610      	mov	r0, r2
    ae40:	4680      	mov	r8, r0
    ae42:	8888      	ldrh	r0, [r1, #4]
    ae44:	42b0      	cmp	r0, r6
    ae46:	d200      	bcs.n	ae4a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x82>
    ae48:	4606      	mov	r6, r0
    ae4a:	884c      	ldrh	r4, [r1, #2]
    ae4c:	f640 0048 	movw	r0, #2120	; 0x848
    ae50:	4284      	cmp	r4, r0
    ae52:	d300      	bcc.n	ae56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8e>
    ae54:	4604      	mov	r4, r0
    ae56:	88cd      	ldrh	r5, [r1, #6]
    ae58:	4285      	cmp	r5, r0
    ae5a:	d300      	bcc.n	ae5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    ae5c:	4605      	mov	r5, r0
    ae5e:	4284      	cmp	r4, r0
    ae60:	d300      	bcc.n	ae64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    ae62:	4604      	mov	r4, r0
    ae64:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ae68:	2e1b      	cmp	r6, #27
    ae6a:	d001      	beq.n	ae70 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa8>
    ae6c:	428d      	cmp	r5, r1
    ae6e:	d104      	bne.n	ae7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb2>
    ae70:	f1b8 0f1b 	cmp.w	r8, #27
    ae74:	d03f      	beq.n	aef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    ae76:	428c      	cmp	r4, r1
    ae78:	d03d      	beq.n	aef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    ae7a:	466a      	mov	r2, sp
    ae7c:	4651      	mov	r1, sl
    ae7e:	4648      	mov	r0, r9
    ae80:	f005 fa0c 	bl	1029c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    ae84:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    ae88:	4641      	mov	r1, r8
    ae8a:	4540      	cmp	r0, r8
    ae8c:	d900      	bls.n	ae90 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xc8>
    ae8e:	4608      	mov	r0, r1
    ae90:	80f8      	strh	r0, [r7, #6]
    ae92:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    ae96:	42a1      	cmp	r1, r4
    ae98:	d800      	bhi.n	ae9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    ae9a:	460c      	mov	r4, r1
    ae9c:	813c      	strh	r4, [r7, #8]
    ae9e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    aea2:	42b1      	cmp	r1, r6
    aea4:	d800      	bhi.n	aea8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    aea6:	460e      	mov	r6, r1
    aea8:	807e      	strh	r6, [r7, #2]
    aeaa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aeae:	42a9      	cmp	r1, r5
    aeb0:	d900      	bls.n	aeb4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xec>
    aeb2:	4629      	mov	r1, r5
    aeb4:	80b9      	strh	r1, [r7, #4]
    aeb6:	2201      	movs	r2, #1
    aeb8:	703a      	strb	r2, [r7, #0]
    aeba:	381b      	subs	r0, #27
    aebc:	28e0      	cmp	r0, #224	; 0xe0
    aebe:	d902      	bls.n	aec6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfe>
    aec0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    aec4:	e014      	b.n	aef0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    aec6:	3e1b      	subs	r6, #27
    aec8:	2ee0      	cmp	r6, #224	; 0xe0
    aeca:	d902      	bls.n	aed2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x10a>
    aecc:	f640 4182 	movw	r1, #3202	; 0xc82
    aed0:	e00e      	b.n	aef0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    aed2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    aed6:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    aeda:	4284      	cmp	r4, r0
    aedc:	d902      	bls.n	aee4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11c>
    aede:	f640 4184 	movw	r1, #3204	; 0xc84
    aee2:	e005      	b.n	aef0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x128>
    aee4:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    aee8:	4281      	cmp	r1, r0
    aeea:	d904      	bls.n	aef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x12e>
    aeec:	f640 4186 	movw	r1, #3206	; 0xc86
    aef0:	2039      	movs	r0, #57	; 0x39
    aef2:	f7f9 fecd 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aef6:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aefa:	0000      	.short	0x0000
    aefc:	20000214 	.word	0x20000214

0000af00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af04:	b088      	sub	sp, #32
    af06:	460c      	mov	r4, r1
    af08:	4606      	mov	r6, r0
    af0a:	f003 fd89 	bl	ea20 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    af0e:	b198      	cbz	r0, af38 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    af10:	4630      	mov	r0, r6
    af12:	f003 fd78 	bl	ea06 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    af16:	b130      	cbz	r0, af26 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    af18:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    af1c:	2012      	movs	r0, #18
    af1e:	2900      	cmp	r1, #0
    af20:	d00b      	beq.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af22:	2980      	cmp	r1, #128	; 0x80
    af24:	d809      	bhi.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af26:	4630      	mov	r0, r6
    af28:	f003 fd5c 	bl	e9e4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    af2c:	b140      	cbz	r0, af40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af2e:	4630      	mov	r0, r6
    af30:	f003 fcd4 	bl	e8dc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    af34:	b130      	cbz	r0, af44 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    af36:	e009      	b.n	af4c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    af38:	2042      	movs	r0, #66	; 0x42
    af3a:	b008      	add	sp, #32
    af3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af40:	200c      	movs	r0, #12
    af42:	e7fa      	b.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    af44:	4630      	mov	r0, r6
    af46:	f003 fd58 	bl	e9fa <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    af4a:	b3a8      	cbz	r0, afb8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    af4c:	4630      	mov	r0, r6
    af4e:	f003 ff2f 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    af52:	2800      	cmp	r0, #0
    af54:	d1f4      	bne.n	af40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af56:	4630      	mov	r0, r6
    af58:	f003 fcdb 	bl	e912 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    af5c:	2800      	cmp	r0, #0
    af5e:	d1ef      	bne.n	af40 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    af60:	4630      	mov	r0, r6
    af62:	f7fc f9d7 	bl	7314 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    af66:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    af6a:	f242 7110 	movw	r1, #10000	; 0x2710
    af6e:	fb00 f801 	mul.w	r8, r0, r1
    af72:	78e1      	ldrb	r1, [r4, #3]
    af74:	4630      	mov	r0, r6
    af76:	f003 fd2c 	bl	e9d2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    af7a:	4630      	mov	r0, r6
    af7c:	f003 fd3f 	bl	e9fe <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    af80:	b1e8      	cbz	r0, afbe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    af82:	2200      	movs	r2, #0
    af84:	4611      	mov	r1, r2
    af86:	a801      	add	r0, sp, #4
    af88:	f7fa f8e0 	bl	514c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    af8c:	0004      	movs	r4, r0
    af8e:	d06a      	beq.n	b066 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    af90:	2100      	movs	r1, #0
    af92:	f7fb fdbb 	bl	6b0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    af96:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    af9a:	8020      	strh	r0, [r4, #0]
    af9c:	4621      	mov	r1, r4
    af9e:	4630      	mov	r0, r6
    afa0:	f003 fd51 	bl	ea46 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    afa4:	f005 f9ef 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    afa8:	4d3a      	ldr	r5, [pc, #232]	; (b094 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    afaa:	2800      	cmp	r0, #0
    afac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    afb0:	d00f      	beq.n	afd2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    afb2:	886a      	ldrh	r2, [r5, #2]
    afb4:	88a9      	ldrh	r1, [r5, #4]
    afb6:	e00e      	b.n	afd6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    afb8:	e7ff      	b.n	afba <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    afba:	2012      	movs	r0, #18
    afbc:	e7bd      	b.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    afbe:	4642      	mov	r2, r8
    afc0:	2100      	movs	r1, #0
    afc2:	4630      	mov	r0, r6
    afc4:	f7fd f8f0 	bl	81a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    afc8:	2800      	cmp	r0, #0
    afca:	d0b6      	beq.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    afcc:	f241 414c 	movw	r1, #5196	; 0x144c
    afd0:	e053      	b.n	b07a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    afd2:	221b      	movs	r2, #27
    afd4:	4611      	mov	r1, r2
    afd6:	84c2      	strh	r2, [r0, #38]	; 0x26
    afd8:	8501      	strh	r1, [r0, #40]	; 0x28
    afda:	68a8      	ldr	r0, [r5, #8]
    afdc:	62e0      	str	r0, [r4, #44]	; 0x2c
    afde:	f641 574c 	movw	r7, #7500	; 0x1d4c
    afe2:	4630      	mov	r0, r6
    afe4:	f003 fd13 	bl	ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    afe8:	b910      	cbnz	r0, aff0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    afea:	4630      	mov	r0, r6
    afec:	f003 fd29 	bl	ea42 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    aff0:	60e7      	str	r7, [r4, #12]
    aff2:	8821      	ldrh	r1, [r4, #0]
    aff4:	f8ad 1008 	strh.w	r1, [sp, #8]
    aff8:	7ba9      	ldrb	r1, [r5, #14]
    affa:	f88d 100a 	strb.w	r1, [sp, #10]
    affe:	7be9      	ldrb	r1, [r5, #15]
    b000:	f88d 100b 	strb.w	r1, [sp, #11]
    b004:	8a29      	ldrh	r1, [r5, #16]
    b006:	f8ad 100c 	strh.w	r1, [sp, #12]
    b00a:	a905      	add	r1, sp, #20
    b00c:	9100      	str	r1, [sp, #0]
    b00e:	2001      	movs	r0, #1
    b010:	ab04      	add	r3, sp, #16
    b012:	aa02      	add	r2, sp, #8
    b014:	4621      	mov	r1, r4
    b016:	f005 f977 	bl	10308 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    b01a:	b140      	cbz	r0, b02e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    b01c:	2100      	movs	r1, #0
    b01e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b022:	f7fa f8bd 	bl	51a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b026:	b1f0      	cbz	r0, b066 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    b028:	f241 4198 	movw	r1, #5272	; 0x1498
    b02c:	e025      	b.n	b07a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b02e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b032:	f88d 0018 	strb.w	r0, [sp, #24]
    b036:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b03a:	f88d 0019 	strb.w	r0, [sp, #25]
    b03e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b042:	f8ad 001a 	strh.w	r0, [sp, #26]
    b046:	a906      	add	r1, sp, #24
    b048:	4620      	mov	r0, r4
    b04a:	f002 ff83 	bl	df54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b04e:	7868      	ldrb	r0, [r5, #1]
    b050:	9000      	str	r0, [sp, #0]
    b052:	782b      	ldrb	r3, [r5, #0]
    b054:	88aa      	ldrh	r2, [r5, #4]
    b056:	8869      	ldrh	r1, [r5, #2]
    b058:	8820      	ldrh	r0, [r4, #0]
    b05a:	f7fa f96d 	bl	5338 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b05e:	b120      	cbz	r0, b06a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    b060:	f241 41a3 	movw	r1, #5283	; 0x14a3
    b064:	e009      	b.n	b07a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    b066:	2009      	movs	r0, #9
    b068:	e767      	b.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b06a:	4642      	mov	r2, r8
    b06c:	4621      	mov	r1, r4
    b06e:	4630      	mov	r0, r6
    b070:	f7fd f89a 	bl	81a8 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    b074:	b120      	cbz	r0, b080 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    b076:	f241 41a5 	movw	r1, #5285	; 0x14a5
    b07a:	2039      	movs	r0, #57	; 0x39
    b07c:	f7f9 fe08 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b080:	4805      	ldr	r0, [pc, #20]	; (b098 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    b082:	6843      	ldr	r3, [r0, #4]
    b084:	b123      	cbz	r3, b090 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    b086:	2200      	movs	r2, #0
    b088:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    b08c:	4620      	mov	r0, r4
    b08e:	4798      	blx	r3
    b090:	2000      	movs	r0, #0
    b092:	e752      	b.n	af3a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    b094:	20000f48 	.word	0x20000f48
    b098:	2000020c 	.word	0x2000020c
    b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b0a0:	b088      	sub	sp, #32
    b0a2:	4604      	mov	r4, r0
    b0a4:	8800      	ldrh	r0, [r0, #0]
    b0a6:	a906      	add	r1, sp, #24
    b0a8:	f002 fe95 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b0ac:	2800      	cmp	r0, #0
    b0ae:	d147      	bne.n	b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b0b0:	9807      	ldr	r0, [sp, #28]
    b0b2:	2700      	movs	r7, #0
    b0b4:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    b0b8:	f88d 1008 	strb.w	r1, [sp, #8]
    b0bc:	9902      	ldr	r1, [sp, #8]
    b0be:	9102      	str	r1, [sp, #8]
    b0c0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b0c4:	f88d 100c 	strb.w	r1, [sp, #12]
    b0c8:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    b0cc:	3070      	adds	r0, #112	; 0x70
    b0ce:	0689      	lsls	r1, r1, #26
    b0d0:	d502      	bpl.n	b0d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    b0d2:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b0d6:	b149      	cbz	r1, b0ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    b0d8:	f05f 0100 	movs.w	r1, #0
    b0dc:	f88d 1004 	strb.w	r1, [sp, #4]
    b0e0:	2105      	movs	r1, #5
    b0e2:	304c      	adds	r0, #76	; 0x4c
    b0e4:	f004 fa76 	bl	f5d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    b0e8:	b110      	cbz	r0, b0f0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    b0ea:	e004      	b.n	b0f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    b0ec:	2101      	movs	r1, #1
    b0ee:	e7f5      	b.n	b0dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    b0f0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b0f4:	b318      	cbz	r0, b13e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    b0f6:	8921      	ldrh	r1, [r4, #8]
    b0f8:	88e0      	ldrh	r0, [r4, #6]
    b0fa:	f005 f8c1 	bl	10280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b0fe:	2800      	cmp	r0, #0
    b100:	d11e      	bne.n	b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b102:	88a1      	ldrh	r1, [r4, #4]
    b104:	8860      	ldrh	r0, [r4, #2]
    b106:	f005 f8bb 	bl	10280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b10a:	2800      	cmp	r0, #0
    b10c:	d118      	bne.n	b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b10e:	8921      	ldrh	r1, [r4, #8]
    b110:	88e0      	ldrh	r0, [r4, #6]
    b112:	f005 f8ab 	bl	1026c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    b116:	2800      	cmp	r0, #0
    b118:	d112      	bne.n	b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b11a:	88a1      	ldrh	r1, [r4, #4]
    b11c:	8860      	ldrh	r0, [r4, #2]
    b11e:	f005 f8a5 	bl	1026c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    b122:	0006      	movs	r6, r0
    b124:	d10c      	bne.n	b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b126:	9807      	ldr	r0, [sp, #28]
    b128:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    b12c:	f04f 0801 	mov.w	r8, #1
    b130:	f885 8001 	strb.w	r8, [r5, #1]
    b134:	f89d 100c 	ldrb.w	r1, [sp, #12]
    b138:	b129      	cbz	r1, b146 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    b13a:	263a      	movs	r6, #58	; 0x3a
    b13c:	e02f      	b.n	b19e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    b13e:	201a      	movs	r0, #26
    b140:	b008      	add	sp, #32
    b142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b146:	4639      	mov	r1, r7
    b148:	aa03      	add	r2, sp, #12
    b14a:	f005 f8a7 	bl	1029c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    b14e:	8861      	ldrh	r1, [r4, #2]
    b150:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    b154:	4281      	cmp	r1, r0
    b156:	d200      	bcs.n	b15a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    b158:	4608      	mov	r0, r1
    b15a:	80e8      	strh	r0, [r5, #6]
    b15c:	88a1      	ldrh	r1, [r4, #4]
    b15e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    b162:	4281      	cmp	r1, r0
    b164:	d200      	bcs.n	b168 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    b166:	4608      	mov	r0, r1
    b168:	8128      	strh	r0, [r5, #8]
    b16a:	88e2      	ldrh	r2, [r4, #6]
    b16c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    b170:	428a      	cmp	r2, r1
    b172:	d200      	bcs.n	b176 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    b174:	4611      	mov	r1, r2
    b176:	8069      	strh	r1, [r5, #2]
    b178:	8922      	ldrh	r2, [r4, #8]
    b17a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    b17e:	428a      	cmp	r2, r1
    b180:	d200      	bcs.n	b184 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    b182:	4611      	mov	r1, r2
    b184:	f640 0248 	movw	r2, #2120	; 0x848
    b188:	80a9      	strh	r1, [r5, #4]
    b18a:	4291      	cmp	r1, r2
    b18c:	d300      	bcc.n	b190 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    b18e:	4611      	mov	r1, r2
    b190:	80a9      	strh	r1, [r5, #4]
    b192:	4290      	cmp	r0, r2
    b194:	d200      	bcs.n	b198 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    b196:	4602      	mov	r2, r0
    b198:	812a      	strh	r2, [r5, #8]
    b19a:	f885 8000 	strb.w	r8, [r5]
    b19e:	706f      	strb	r7, [r5, #1]
    b1a0:	4630      	mov	r0, r6
    b1a2:	e7cd      	b.n	b140 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    b1a4:	b510      	push	{r4, lr}
    b1a6:	4604      	mov	r4, r0
    b1a8:	88c1      	ldrh	r1, [r0, #6]
    b1aa:	8880      	ldrh	r0, [r0, #4]
    b1ac:	f005 f868 	bl	10280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b1b0:	2800      	cmp	r0, #0
    b1b2:	d10f      	bne.n	b1d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    b1b4:	8861      	ldrh	r1, [r4, #2]
    b1b6:	8820      	ldrh	r0, [r4, #0]
    b1b8:	f005 f862 	bl	10280 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    b1bc:	2800      	cmp	r0, #0
    b1be:	d109      	bne.n	b1d4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    b1c0:	4805      	ldr	r0, [pc, #20]	; (b1d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    b1c2:	88a1      	ldrh	r1, [r4, #4]
    b1c4:	8081      	strh	r1, [r0, #4]
    b1c6:	8821      	ldrh	r1, [r4, #0]
    b1c8:	8001      	strh	r1, [r0, #0]
    b1ca:	88e1      	ldrh	r1, [r4, #6]
    b1cc:	80c1      	strh	r1, [r0, #6]
    b1ce:	8861      	ldrh	r1, [r4, #2]
    b1d0:	8041      	strh	r1, [r0, #2]
    b1d2:	2000      	movs	r0, #0
    b1d4:	bd10      	pop	{r4, pc}
    b1d6:	0000      	.short	0x0000
    b1d8:	20000214 	.word	0x20000214
    b1dc:	0b12fe0b 	.word	0x0b12fe0b
    b1e0:	12fe0059 	.word	0x12fe0059
    b1e4:	05060708 	.word	0x05060708
    b1e8:	00020304 	.word	0x00020304
    b1ec:	f0f4f8fc 	.word	0xf0f4f8fc
    b1f0:	0304d8ec 	.word	0x0304d8ec
    b1f4:	f4f8fc00 	.word	0xf4f8fc00
    b1f8:	00d8ecf0 	.word	0x00d8ecf0

0000b1fc <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b1fc:	b510      	push	{r4, lr}
    b1fe:	f7fb fecd 	bl	6f9c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b202:	4804      	ldr	r0, [pc, #16]	; (b214 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    b204:	6840      	ldr	r0, [r0, #4]
    b206:	f005 f997 	bl	10538 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    b20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b20e:	f004 bed3 	b.w	ffb8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b212:	0000      	.short	0x0000
    b214:	2000021c 	.word	0x2000021c

0000b218 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b218:	b510      	push	{r4, lr}
    b21a:	4c07      	ldr	r4, [pc, #28]	; (b238 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    b21c:	68a0      	ldr	r0, [r4, #8]
    b21e:	f005 f98b 	bl	10538 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    b222:	68e0      	ldr	r0, [r4, #12]
    b224:	f005 f988 	bl	10538 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    b228:	f002 fd29 	bl	dc7e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b22c:	f7fb fa40 	bl	66b0 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b234:	f7ff bdc8 	b.w	adc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b238:	2000021c 	.word	0x2000021c

0000b23c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    b23c:	b500      	push	{lr}
    b23e:	4905      	ldr	r1, [pc, #20]	; (b254 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    b240:	4805      	ldr	r0, [pc, #20]	; (b258 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b242:	f005 f95a 	bl	104fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b246:	4804      	ldr	r0, [pc, #16]	; (b258 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    b248:	4904      	ldr	r1, [pc, #16]	; (b25c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    b24a:	1d00      	adds	r0, r0, #4
    b24c:	f85d eb04 	ldr.w	lr, [sp], #4
    b250:	f005 b953 	b.w	104fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b254:	2000022c 	.word	0x2000022c
    b258:	20000220 	.word	0x20000220
    b25c:	20000234 	.word	0x20000234

0000b260 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    b260:	b500      	push	{lr}
    b262:	4908      	ldr	r1, [pc, #32]	; (b284 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    b264:	4808      	ldr	r0, [pc, #32]	; (b288 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b266:	f005 f948 	bl	104fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b26a:	4807      	ldr	r0, [pc, #28]	; (b288 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b26c:	4907      	ldr	r1, [pc, #28]	; (b28c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    b26e:	1d00      	adds	r0, r0, #4
    b270:	f005 f943 	bl	104fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b274:	4804      	ldr	r0, [pc, #16]	; (b288 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    b276:	4906      	ldr	r1, [pc, #24]	; (b290 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    b278:	3008      	adds	r0, #8
    b27a:	f85d eb04 	ldr.w	lr, [sp], #4
    b27e:	f005 b93c 	b.w	104fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b282:	0000      	.short	0x0000
    b284:	20000244 	.word	0x20000244
    b288:	20000220 	.word	0x20000220
    b28c:	2000024c 	.word	0x2000024c
    b290:	2000023c 	.word	0x2000023c

0000b294 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    b294:	4801      	ldr	r0, [pc, #4]	; (b29c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    b296:	7800      	ldrb	r0, [r0, #0]
    b298:	4770      	bx	lr
    b29a:	0000      	.short	0x0000
    b29c:	2000021c 	.word	0x2000021c
    b2a0:	b510      	push	{r4, lr}
    b2a2:	f7fc f9a9 	bl	75f8 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    b2a6:	f7fd f80f 	bl	82c8 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    b2aa:	4803      	ldr	r0, [pc, #12]	; (b2b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x24>)
    b2ac:	f7fc f98a 	bl	75c4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    b2b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2b4:	f7fb be7e 	b.w	6fb4 <sym_2ZDP75C7NTGGQLOC7B3VQWZBDYTVYDPXMMVG73Q>
    b2b8:	200013d1 	.word	0x200013d1
    b2bc:	4909      	ldr	r1, [pc, #36]	; (b2e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    b2be:	b510      	push	{r4, lr}
    b2c0:	2001      	movs	r0, #1
    b2c2:	7008      	strb	r0, [r1, #0]
    b2c4:	f7fc f9c8 	bl	7658 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    b2c8:	f7fd fd20 	bl	8d0c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    b2cc:	f002 fcc5 	bl	dc5a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b2d0:	4805      	ldr	r0, [pc, #20]	; (b2e8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    b2d2:	f7fa fc53 	bl	5b7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b2d6:	2000      	movs	r0, #0
    b2d8:	f7f9 fea8 	bl	502c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b2e0:	f7fb be70 	b.w	6fc4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    b2e4:	2000021c 	.word	0x2000021c
    b2e8:	200013d1 	.word	0x200013d1

0000b2ec <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b2ec:	2101      	movs	r1, #1
    b2ee:	4081      	lsls	r1, r0
    b2f0:	4802      	ldr	r0, [pc, #8]	; (b2fc <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b2f2:	6802      	ldr	r2, [r0, #0]
    b2f4:	4311      	orrs	r1, r2
    b2f6:	6001      	str	r1, [r0, #0]
    b2f8:	4770      	bx	lr
    b2fa:	0000      	.short	0x0000
    b2fc:	20000254 	.word	0x20000254

0000b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b300:	4801      	ldr	r0, [pc, #4]	; (b308 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b302:	6800      	ldr	r0, [r0, #0]
    b304:	4770      	bx	lr
    b306:	0000      	.short	0x0000
    b308:	20000254 	.word	0x20000254

0000b30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b30c:	4803      	ldr	r0, [pc, #12]	; (b31c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b30e:	8800      	ldrh	r0, [r0, #0]
    b310:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b314:	0040      	lsls	r0, r0, #1
    b316:	1c40      	adds	r0, r0, #1
    b318:	4770      	bx	lr
    b31a:	0000      	.short	0x0000
    b31c:	20000254 	.word	0x20000254

0000b320 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b320:	b510      	push	{r4, lr}
    b322:	f7f9 f911 	bl	4548 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b326:	2200      	movs	r2, #0
    b328:	4b08      	ldr	r3, [pc, #32]	; (b34c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b32a:	4611      	mov	r1, r2
    b32c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b330:	4284      	cmp	r4, r0
    b332:	d303      	bcc.n	b33c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b334:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b338:	7882      	ldrb	r2, [r0, #2]
    b33a:	e003      	b.n	b344 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b33c:	1c49      	adds	r1, r1, #1
    b33e:	b2c9      	uxtb	r1, r1
    b340:	290c      	cmp	r1, #12
    b342:	d3f3      	bcc.n	b32c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b344:	4802      	ldr	r0, [pc, #8]	; (b350 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b346:	7002      	strb	r2, [r0, #0]
    b348:	bd10      	pop	{r4, pc}
    b34a:	0000      	.short	0x0000
    b34c:	00010588 	.word	0x00010588
    b350:	200002a3 	.word	0x200002a3

0000b354 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b354:	b570      	push	{r4, r5, r6, lr}
    b356:	4605      	mov	r5, r0
    b358:	4616      	mov	r6, r2
    b35a:	460c      	mov	r4, r1
    b35c:	2002      	movs	r0, #2
    b35e:	f000 f9f9 	bl	b754 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b362:	4906      	ldr	r1, [pc, #24]	; (b37c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b364:	2001      	movs	r0, #1
    b366:	1ef6      	subs	r6, r6, #3
    b368:	7008      	strb	r0, [r1, #0]
    b36a:	4805      	ldr	r0, [pc, #20]	; (b380 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b36c:	6006      	str	r6, [r0, #0]
    b36e:	4804      	ldr	r0, [pc, #16]	; (b380 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b370:	3808      	subs	r0, #8
    b372:	6005      	str	r5, [r0, #0]
    b374:	1f00      	subs	r0, r0, #4
    b376:	6004      	str	r4, [r0, #0]
    b378:	bd70      	pop	{r4, r5, r6, pc}
    b37a:	0000      	.short	0x0000
    b37c:	200002a4 	.word	0x200002a4
    b380:	4000f510 	.word	0x4000f510

0000b384 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b384:	b510      	push	{r4, lr}
    b386:	4c0c      	ldr	r4, [pc, #48]	; (b3b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b388:	7820      	ldrb	r0, [r4, #0]
    b38a:	b180      	cbz	r0, b3ae <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b38c:	490b      	ldr	r1, [pc, #44]	; (b3bc <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b38e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b392:	6008      	str	r0, [r1, #0]
    b394:	f000 f86a 	bl	b46c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b398:	2100      	movs	r1, #0
    b39a:	b120      	cbz	r0, b3a6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b39c:	2001      	movs	r0, #1
    b39e:	7060      	strb	r0, [r4, #1]
    b3a0:	4807      	ldr	r0, [pc, #28]	; (b3c0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b3a2:	6800      	ldr	r0, [r0, #0]
    b3a4:	e001      	b.n	b3aa <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b3a6:	7061      	strb	r1, [r4, #1]
    b3a8:	2010      	movs	r0, #16
    b3aa:	70a0      	strb	r0, [r4, #2]
    b3ac:	7021      	strb	r1, [r4, #0]
    b3ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3b2:	2000      	movs	r0, #0
    b3b4:	f000 b9ce 	b.w	b754 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3b8:	200002a4 	.word	0x200002a4
    b3bc:	4001f508 	.word	0x4001f508
    b3c0:	4000f400 	.word	0x4000f400

0000b3c4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b3c4:	b510      	push	{r4, lr}
    b3c6:	2002      	movs	r0, #2
    b3c8:	f000 f9c4 	bl	b754 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3cc:	4904      	ldr	r1, [pc, #16]	; (b3e0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b3ce:	2001      	movs	r0, #1
    b3d0:	7008      	strb	r0, [r1, #0]
    b3d2:	f000 f859 	bl	b488 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b3d6:	4903      	ldr	r1, [pc, #12]	; (b3e4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b3d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b3dc:	6008      	str	r0, [r1, #0]
    b3de:	bd10      	pop	{r4, pc}
    b3e0:	200002a4 	.word	0x200002a4
    b3e4:	4001f504 	.word	0x4001f504

0000b3e8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b3e8:	4803      	ldr	r0, [pc, #12]	; (b3f8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b3ea:	2100      	movs	r1, #0
    b3ec:	7001      	strb	r1, [r0, #0]
    b3ee:	7041      	strb	r1, [r0, #1]
    b3f0:	2110      	movs	r1, #16
    b3f2:	7081      	strb	r1, [r0, #2]
    b3f4:	4770      	bx	lr
    b3f6:	0000      	.short	0x0000
    b3f8:	200002a4 	.word	0x200002a4

0000b3fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b3fc:	4807      	ldr	r0, [pc, #28]	; (b41c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b3fe:	b510      	push	{r4, lr}
    b400:	7801      	ldrb	r1, [r0, #0]
    b402:	b141      	cbz	r1, b416 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b404:	f000 f832 	bl	b46c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b408:	b118      	cbz	r0, b412 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b40a:	4805      	ldr	r0, [pc, #20]	; (b420 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b40c:	6800      	ldr	r0, [r0, #0]
    b40e:	b2c0      	uxtb	r0, r0
    b410:	bd10      	pop	{r4, pc}
    b412:	2010      	movs	r0, #16
    b414:	bd10      	pop	{r4, pc}
    b416:	7880      	ldrb	r0, [r0, #2]
    b418:	bd10      	pop	{r4, pc}
    b41a:	0000      	.short	0x0000
    b41c:	200002a4 	.word	0x200002a4
    b420:	4000f400 	.word	0x4000f400

0000b424 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b424:	4808      	ldr	r0, [pc, #32]	; (b448 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b426:	b510      	push	{r4, lr}
    b428:	7801      	ldrb	r1, [r0, #0]
    b42a:	b159      	cbz	r1, b444 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b42c:	4807      	ldr	r0, [pc, #28]	; (b44c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b42e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b432:	b128      	cbz	r0, b440 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b434:	f000 f80c 	bl	b450 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b438:	2800      	cmp	r0, #0
    b43a:	d000      	beq.n	b43e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b43c:	2001      	movs	r0, #1
    b43e:	bd10      	pop	{r4, pc}
    b440:	2002      	movs	r0, #2
    b442:	bd10      	pop	{r4, pc}
    b444:	7840      	ldrb	r0, [r0, #1]
    b446:	bd10      	pop	{r4, pc}
    b448:	200002a4 	.word	0x200002a4
    b44c:	4000f000 	.word	0x4000f000
    b450:	4805      	ldr	r0, [pc, #20]	; (b468 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b452:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b456:	b111      	cbz	r1, b45e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b458:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b45c:	b108      	cbz	r0, b462 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b45e:	2000      	movs	r0, #0
    b460:	4770      	bx	lr
    b462:	2001      	movs	r0, #1
    b464:	4770      	bx	lr
    b466:	0000      	.short	0x0000
    b468:	4000f000 	.word	0x4000f000
    b46c:	4805      	ldr	r0, [pc, #20]	; (b484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b46e:	b510      	push	{r4, lr}
    b470:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b474:	b120      	cbz	r0, b480 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b476:	f7ff ffeb 	bl	b450 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b47a:	b108      	cbz	r0, b480 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b47c:	2001      	movs	r0, #1
    b47e:	bd10      	pop	{r4, pc}
    b480:	2000      	movs	r0, #0
    b482:	bd10      	pop	{r4, pc}
    b484:	4000f000 	.word	0x4000f000
    b488:	4804      	ldr	r0, [pc, #16]	; (b49c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b48a:	2100      	movs	r1, #0
    b48c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b490:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b494:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b498:	4770      	bx	lr
    b49a:	0000      	.short	0x0000
    b49c:	4000f000 	.word	0x4000f000

0000b4a0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b4a0:	4a08      	ldr	r2, [pc, #32]	; (b4c4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b4a2:	b510      	push	{r4, lr}
    b4a4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b4a8:	4907      	ldr	r1, [pc, #28]	; (b4c8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b4aa:	4610      	mov	r0, r2
    b4ac:	f7f9 fac0 	bl	4a30 <mpsl_fem_lna_configuration_set>
    b4b0:	2800      	cmp	r0, #0
    b4b2:	d005      	beq.n	b4c0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b4b4:	1c40      	adds	r0, r0, #1
    b4b6:	d003      	beq.n	b4c0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b4b8:	217d      	movs	r1, #125	; 0x7d
    b4ba:	2040      	movs	r0, #64	; 0x40
    b4bc:	f7f9 fbe8 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4c0:	bd10      	pop	{r4, pc}
    b4c2:	0000      	.short	0x0000
    b4c4:	20000258 	.word	0x20000258
    b4c8:	0000b4f8 	.word	0x0000b4f8

0000b4cc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b4cc:	4a08      	ldr	r2, [pc, #32]	; (b4f0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b4ce:	b510      	push	{r4, lr}
    b4d0:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b4d4:	4907      	ldr	r1, [pc, #28]	; (b4f4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b4d6:	4610      	mov	r0, r2
    b4d8:	f7f9 fab6 	bl	4a48 <mpsl_fem_pa_configuration_set>
    b4dc:	2800      	cmp	r0, #0
    b4de:	d005      	beq.n	b4ec <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b4e0:	1c40      	adds	r0, r0, #1
    b4e2:	d003      	beq.n	b4ec <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b4e4:	2172      	movs	r1, #114	; 0x72
    b4e6:	2040      	movs	r0, #64	; 0x40
    b4e8:	f7f9 fbd2 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4ec:	bd10      	pop	{r4, pc}
    b4ee:	0000      	.short	0x0000
    b4f0:	20000258 	.word	0x20000258
    b4f4:	0000b4f8 	.word	0x0000b4f8
    b4f8:	00000001 	.word	0x00000001
    b4fc:	40001110 	.word	0x40001110
	...

0000b510 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b510:	4a07      	ldr	r2, [pc, #28]	; (b530 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b512:	b510      	push	{r4, lr}
    b514:	7853      	ldrb	r3, [r2, #1]
    b516:	b133      	cbz	r3, b526 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b518:	4b06      	ldr	r3, [pc, #24]	; (b534 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b51a:	6019      	str	r1, [r3, #0]
    b51c:	1d19      	adds	r1, r3, #4
    b51e:	6008      	str	r0, [r1, #0]
    b520:	2001      	movs	r0, #1
    b522:	7090      	strb	r0, [r2, #2]
    b524:	bd10      	pop	{r4, pc}
    b526:	21ba      	movs	r1, #186	; 0xba
    b528:	203c      	movs	r0, #60	; 0x3c
    b52a:	f7f9 fbb1 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b52e:	0000      	.short	0x0000
    b530:	200002a7 	.word	0x200002a7
    b534:	4000f50c 	.word	0x4000f50c

0000b538 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b538:	4809      	ldr	r0, [pc, #36]	; (b560 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b53a:	b510      	push	{r4, lr}
    b53c:	7801      	ldrb	r1, [r0, #0]
    b53e:	b151      	cbz	r1, b556 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b540:	7880      	ldrb	r0, [r0, #2]
    b542:	b140      	cbz	r0, b556 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b544:	4907      	ldr	r1, [pc, #28]	; (b564 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b546:	2000      	movs	r0, #0
    b548:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b54c:	4906      	ldr	r1, [pc, #24]	; (b568 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b54e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b552:	6008      	str	r0, [r1, #0]
    b554:	bd10      	pop	{r4, pc}
    b556:	21e1      	movs	r1, #225	; 0xe1
    b558:	203c      	movs	r0, #60	; 0x3c
    b55a:	f7f9 fb99 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b55e:	0000      	.short	0x0000
    b560:	200002a7 	.word	0x200002a7
    b564:	4000f000 	.word	0x4000f000
    b568:	4001f504 	.word	0x4001f504

0000b56c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b56c:	b570      	push	{r4, r5, r6, lr}
    b56e:	4c0b      	ldr	r4, [pc, #44]	; (b59c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b570:	2500      	movs	r5, #0
    b572:	7820      	ldrb	r0, [r4, #0]
    b574:	b158      	cbz	r0, b58e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b576:	f000 f8e5 	bl	b744 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b57a:	4809      	ldr	r0, [pc, #36]	; (b5a0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b57c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b580:	b118      	cbz	r0, b58a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b582:	4808      	ldr	r0, [pc, #32]	; (b5a4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b584:	6800      	ldr	r0, [r0, #0]
    b586:	70e0      	strb	r0, [r4, #3]
    b588:	e000      	b.n	b58c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b58a:	70e5      	strb	r5, [r4, #3]
    b58c:	7025      	strb	r5, [r4, #0]
    b58e:	2000      	movs	r0, #0
    b590:	f000 f8e0 	bl	b754 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b594:	7065      	strb	r5, [r4, #1]
    b596:	70a5      	strb	r5, [r4, #2]
    b598:	bd70      	pop	{r4, r5, r6, pc}
    b59a:	0000      	.short	0x0000
    b59c:	200002a7 	.word	0x200002a7
    b5a0:	4000f000 	.word	0x4000f000
    b5a4:	4000f400 	.word	0x4000f400

0000b5a8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b5a8:	480d      	ldr	r0, [pc, #52]	; (b5e0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b5aa:	b510      	push	{r4, lr}
    b5ac:	7801      	ldrb	r1, [r0, #0]
    b5ae:	b191      	cbz	r1, b5d6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b5b0:	7880      	ldrb	r0, [r0, #2]
    b5b2:	b180      	cbz	r0, b5d6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b5b4:	490b      	ldr	r1, [pc, #44]	; (b5e4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b5b6:	2000      	movs	r0, #0
    b5b8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b5bc:	4a0a      	ldr	r2, [pc, #40]	; (b5e8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b5be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b5c2:	6010      	str	r0, [r2, #0]
    b5c4:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b5c8:	2a01      	cmp	r2, #1
    b5ca:	d103      	bne.n	b5d4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b5cc:	604a      	str	r2, [r1, #4]
    b5ce:	4906      	ldr	r1, [pc, #24]	; (b5e8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b5d0:	1d09      	adds	r1, r1, #4
    b5d2:	6008      	str	r0, [r1, #0]
    b5d4:	bd10      	pop	{r4, pc}
    b5d6:	21d1      	movs	r1, #209	; 0xd1
    b5d8:	203c      	movs	r0, #60	; 0x3c
    b5da:	f7f9 fb59 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5de:	0000      	.short	0x0000
    b5e0:	200002a7 	.word	0x200002a7
    b5e4:	4000f000 	.word	0x4000f000
    b5e8:	4001f504 	.word	0x4001f504

0000b5ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b5ec:	4803      	ldr	r0, [pc, #12]	; (b5fc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b5ee:	2100      	movs	r1, #0
    b5f0:	7001      	strb	r1, [r0, #0]
    b5f2:	7041      	strb	r1, [r0, #1]
    b5f4:	7081      	strb	r1, [r0, #2]
    b5f6:	70c1      	strb	r1, [r0, #3]
    b5f8:	4770      	bx	lr
    b5fa:	0000      	.short	0x0000
    b5fc:	200002a7 	.word	0x200002a7

0000b600 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b604:	4605      	mov	r5, r0
    b606:	461c      	mov	r4, r3
    b608:	4690      	mov	r8, r2
    b60a:	460f      	mov	r7, r1
    b60c:	2001      	movs	r0, #1
    b60e:	f000 f8a1 	bl	b754 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b612:	4e12      	ldr	r6, [pc, #72]	; (b65c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b614:	4812      	ldr	r0, [pc, #72]	; (b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b616:	7134      	strb	r4, [r6, #4]
    b618:	6007      	str	r7, [r0, #0]
    b61a:	4911      	ldr	r1, [pc, #68]	; (b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b61c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b620:	1f09      	subs	r1, r1, #4
    b622:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b626:	6008      	str	r0, [r1, #0]
    b628:	f001 f940 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b62c:	b938      	cbnz	r0, b63e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b62e:	480c      	ldr	r0, [pc, #48]	; (b660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b630:	3010      	adds	r0, #16
    b632:	6801      	ldr	r1, [r0, #0]
    b634:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b638:	ea41 0108 	orr.w	r1, r1, r8
    b63c:	6001      	str	r1, [r0, #0]
    b63e:	f000 f881 	bl	b744 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b642:	b93d      	cbnz	r5, b654 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b644:	4808      	ldr	r0, [pc, #32]	; (b668 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b646:	4a07      	ldr	r2, [pc, #28]	; (b664 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b648:	4906      	ldr	r1, [pc, #24]	; (b664 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b64a:	3afc      	subs	r2, #252	; 0xfc
    b64c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b650:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b654:	2001      	movs	r0, #1
    b656:	7070      	strb	r0, [r6, #1]
    b658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b65c:	200002a7 	.word	0x200002a7
    b660:	4000f508 	.word	0x4000f508
    b664:	4000f100 	.word	0x4000f100
    b668:	4001f088 	.word	0x4001f088

0000b66c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b66c:	4808      	ldr	r0, [pc, #32]	; (b690 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b66e:	b510      	push	{r4, lr}
    b670:	7841      	ldrb	r1, [r0, #1]
    b672:	b149      	cbz	r1, b688 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b674:	2101      	movs	r1, #1
    b676:	7001      	strb	r1, [r0, #0]
    b678:	4806      	ldr	r0, [pc, #24]	; (b694 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b67a:	2200      	movs	r2, #0
    b67c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b680:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b684:	6001      	str	r1, [r0, #0]
    b686:	bd10      	pop	{r4, pc}
    b688:	21c5      	movs	r1, #197	; 0xc5
    b68a:	203c      	movs	r0, #60	; 0x3c
    b68c:	f7f9 fb00 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b690:	200002a7 	.word	0x200002a7
    b694:	4000f000 	.word	0x4000f000

0000b698 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b698:	4806      	ldr	r0, [pc, #24]	; (b6b4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b69a:	7801      	ldrb	r1, [r0, #0]
    b69c:	b141      	cbz	r1, b6b0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b69e:	4806      	ldr	r0, [pc, #24]	; (b6b8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b6a0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b6a4:	2800      	cmp	r0, #0
    b6a6:	d002      	beq.n	b6ae <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b6a8:	4804      	ldr	r0, [pc, #16]	; (b6bc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b6aa:	6800      	ldr	r0, [r0, #0]
    b6ac:	b2c0      	uxtb	r0, r0
    b6ae:	4770      	bx	lr
    b6b0:	78c0      	ldrb	r0, [r0, #3]
    b6b2:	4770      	bx	lr
    b6b4:	200002a7 	.word	0x200002a7
    b6b8:	4000f000 	.word	0x4000f000
    b6bc:	4000f400 	.word	0x4000f400

0000b6c0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b6c0:	4901      	ldr	r1, [pc, #4]	; (b6c8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b6c2:	2001      	movs	r0, #1
    b6c4:	6088      	str	r0, [r1, #8]
    b6c6:	4770      	bx	lr
    b6c8:	4000f000 	.word	0x4000f000

0000b6cc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b6d0:	2800      	cmp	r0, #0
    b6d2:	d02e      	beq.n	b732 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b6d4:	4818      	ldr	r0, [pc, #96]	; (b738 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b6d6:	7800      	ldrb	r0, [r0, #0]
    b6d8:	b1b0      	cbz	r0, b708 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b6da:	4d18      	ldr	r5, [pc, #96]	; (b73c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b6dc:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b6e0:	2800      	cmp	r0, #0
    b6e2:	d126      	bne.n	b732 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b6e4:	2702      	movs	r7, #2
    b6e6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b6ea:	4c15      	ldr	r4, [pc, #84]	; (b740 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b6ec:	6820      	ldr	r0, [r4, #0]
    b6ee:	43c0      	mvns	r0, r0
    b6f0:	f340 1600 	sbfx	r6, r0, #4, #1
    b6f4:	6820      	ldr	r0, [r4, #0]
    b6f6:	f040 0010 	orr.w	r0, r0, #16
    b6fa:	6020      	str	r0, [r4, #0]
    b6fc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b700:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b704:	1c76      	adds	r6, r6, #1
    b706:	e009      	b.n	b71c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b708:	f240 1153 	movw	r1, #339	; 0x153
    b70c:	203c      	movs	r0, #60	; 0x3c
    b70e:	f7f9 fabf 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b712:	bf00      	nop
    b714:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b718:	f7f9 f934 	bl	4984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b71c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b720:	2800      	cmp	r0, #0
    b722:	d0f7      	beq.n	b714 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b724:	b91e      	cbnz	r6, b72e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b726:	6820      	ldr	r0, [r4, #0]
    b728:	f020 0010 	bic.w	r0, r0, #16
    b72c:	6020      	str	r0, [r4, #0]
    b72e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b736:	0000      	.short	0x0000
    b738:	200002a7 	.word	0x200002a7
    b73c:	4000f000 	.word	0x4000f000
    b740:	e000ed10 	.word	0xe000ed10
    b744:	4902      	ldr	r1, [pc, #8]	; (b750 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b746:	4801      	ldr	r0, [pc, #4]	; (b74c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b748:	6008      	str	r0, [r1, #0]
    b74a:	4770      	bx	lr
    b74c:	02020000 	.word	0x02020000
    b750:	4001f508 	.word	0x4001f508

0000b754 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b754:	b510      	push	{r4, lr}
    b756:	4604      	mov	r4, r0
    b758:	f000 f822 	bl	b7a0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b75c:	2c00      	cmp	r4, #0
    b75e:	d017      	beq.n	b790 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b760:	4a0c      	ldr	r2, [pc, #48]	; (b794 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b762:	480c      	ldr	r0, [pc, #48]	; (b794 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b764:	490c      	ldr	r1, [pc, #48]	; (b798 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b766:	3214      	adds	r2, #20
    b768:	4b0c      	ldr	r3, [pc, #48]	; (b79c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b76a:	2c01      	cmp	r4, #1
    b76c:	d005      	beq.n	b77a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b76e:	2c02      	cmp	r4, #2
    b770:	d008      	beq.n	b784 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b772:	2183      	movs	r1, #131	; 0x83
    b774:	203d      	movs	r0, #61	; 0x3d
    b776:	f7f9 fa8b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b77a:	2402      	movs	r4, #2
    b77c:	6004      	str	r4, [r0, #0]
    b77e:	6011      	str	r1, [r2, #0]
    b780:	0620      	lsls	r0, r4, #24
    b782:	e004      	b.n	b78e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b784:	2403      	movs	r4, #3
    b786:	6004      	str	r4, [r0, #0]
    b788:	6011      	str	r1, [r2, #0]
    b78a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b78e:	6018      	str	r0, [r3, #0]
    b790:	bd10      	pop	{r4, pc}
    b792:	0000      	.short	0x0000
    b794:	4000f500 	.word	0x4000f500
    b798:	200014d3 	.word	0x200014d3
    b79c:	4001f504 	.word	0x4001f504
    b7a0:	4804      	ldr	r0, [pc, #16]	; (b7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b7a2:	2100      	movs	r1, #0
    b7a4:	6001      	str	r1, [r0, #0]
    b7a6:	6001      	str	r1, [r0, #0]
    b7a8:	4903      	ldr	r1, [pc, #12]	; (b7b8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b7aa:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b7ae:	6008      	str	r0, [r1, #0]
    b7b0:	4770      	bx	lr
    b7b2:	0000      	.short	0x0000
    b7b4:	4000f500 	.word	0x4000f500
    b7b8:	4001f508 	.word	0x4001f508

0000b7bc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b7bc:	4805      	ldr	r0, [pc, #20]	; (b7d4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b7be:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b7c2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b7c6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b7ca:	2100      	movs	r1, #0
    b7cc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b7d0:	4770      	bx	lr
    b7d2:	0000      	.short	0x0000
    b7d4:	40001000 	.word	0x40001000

0000b7d8 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b7d8:	4904      	ldr	r1, [pc, #16]	; (b7ec <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b7da:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b7de:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b7e2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b7e6:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b7ea:	4770      	bx	lr
    b7ec:	40001000 	.word	0x40001000

0000b7f0 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    b7f0:	4801      	ldr	r0, [pc, #4]	; (b7f8 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    b7f2:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    b7f6:	4770      	bx	lr
    b7f8:	20000f8c 	.word	0x20000f8c

0000b7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7fe:	4c23      	ldr	r4, [pc, #140]	; (b88c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b800:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b804:	f010 0f10 	tst.w	r0, #16
    b808:	d001      	beq.n	b80e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b80a:	2701      	movs	r7, #1
    b80c:	e000      	b.n	b810 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b80e:	2700      	movs	r7, #0
    b810:	2010      	movs	r0, #16
    b812:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b816:	2002      	movs	r0, #2
    b818:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b81c:	481c      	ldr	r0, [pc, #112]	; (b890 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b81e:	2500      	movs	r5, #0
    b820:	491d      	ldr	r1, [pc, #116]	; (b898 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b822:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b826:	481b      	ldr	r0, [pc, #108]	; (b894 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b828:	6008      	str	r0, [r1, #0]
    b82a:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b82e:	f44f 7688 	mov.w	r6, #272	; 0x110
    b832:	f010 0fff 	tst.w	r0, #255	; 0xff
    b836:	d018      	beq.n	b86a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b838:	20ff      	movs	r0, #255	; 0xff
    b83a:	f88d 0000 	strb.w	r0, [sp]
    b83e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b842:	2001      	movs	r0, #1
    b844:	6120      	str	r0, [r4, #16]
    b846:	e004      	b.n	b852 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b848:	f89d 0000 	ldrb.w	r0, [sp]
    b84c:	1e40      	subs	r0, r0, #1
    b84e:	f88d 0000 	strb.w	r0, [sp]
    b852:	f89d 0000 	ldrb.w	r0, [sp]
    b856:	b128      	cbz	r0, b864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b858:	4631      	mov	r1, r6
    b85a:	4620      	mov	r0, r4
    b85c:	f004 ff63 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b860:	2800      	cmp	r0, #0
    b862:	d0f1      	beq.n	b848 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b864:	f89d 0000 	ldrb.w	r0, [sp]
    b868:	b158      	cbz	r0, b882 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b86a:	f000 fcdb 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b86e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b872:	f000 fe57 	bl	c524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b876:	2f00      	cmp	r7, #0
    b878:	d002      	beq.n	b880 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b87a:	2010      	movs	r0, #16
    b87c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b882:	f240 718f 	movw	r1, #1935	; 0x78f
    b886:	203e      	movs	r0, #62	; 0x3e
    b888:	f7f9 fa02 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b88c:	40001000 	.word	0x40001000
    b890:	20000f8c 	.word	0x20000f8c
    b894:	0c0e0000 	.word	0x0c0e0000
    b898:	4001f508 	.word	0x4001f508

0000b89c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8a0:	4d20      	ldr	r5, [pc, #128]	; (b924 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b8a2:	4607      	mov	r7, r0
    b8a4:	4688      	mov	r8, r1
    b8a6:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b8aa:	07c1      	lsls	r1, r0, #31
    b8ac:	d018      	beq.n	b8e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b8ae:	4a1e      	ldr	r2, [pc, #120]	; (b928 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b8b0:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b8b4:	6011      	str	r1, [r2, #0]
    b8b6:	4c1d      	ldr	r4, [pc, #116]	; (b92c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b8b8:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b8bc:	f041 0101 	orr.w	r1, r1, #1
    b8c0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b8c4:	f040 0002 	orr.w	r0, r0, #2
    b8c8:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b8cc:	4640      	mov	r0, r8
    b8ce:	f000 fe8d 	bl	c5ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b8d2:	f000 fc45 	bl	c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b8d6:	2601      	movs	r6, #1
    b8d8:	b13f      	cbz	r7, b8ea <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b8da:	2f01      	cmp	r7, #1
    b8dc:	d00e      	beq.n	b8fc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b8de:	e016      	b.n	b90e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b8e0:	f240 611a 	movw	r1, #1562	; 0x61a
    b8e4:	203e      	movs	r0, #62	; 0x3e
    b8e6:	f7f9 f9d3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b8ea:	4640      	mov	r0, r8
    b8ec:	f000 fc68 	bl	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b8f0:	4640      	mov	r0, r8
    b8f2:	f000 fc19 	bl	c128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b8f6:	726e      	strb	r6, [r5, #9]
    b8f8:	6026      	str	r6, [r4, #0]
    b8fa:	e008      	b.n	b90e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b8fc:	f000 fc88 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b900:	f000 fdd6 	bl	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b904:	2002      	movs	r0, #2
    b906:	7268      	strb	r0, [r5, #9]
    b908:	f000 fcfa 	bl	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b90c:	6066      	str	r6, [r4, #4]
    b90e:	4808      	ldr	r0, [pc, #32]	; (b930 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b910:	64c6      	str	r6, [r0, #76]	; 0x4c
    b912:	4807      	ldr	r0, [pc, #28]	; (b930 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b914:	300c      	adds	r0, #12
    b916:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b91a:	4638      	mov	r0, r7
    b91c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b920:	f004 bee9 	b.w	106f6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b924:	20000f8c 	.word	0x20000f8c
    b928:	4001f504 	.word	0x4001f504
    b92c:	40001000 	.word	0x40001000
    b930:	40008000 	.word	0x40008000

0000b934 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b938:	4d35      	ldr	r5, [pc, #212]	; (ba10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b93a:	4606      	mov	r6, r0
    b93c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b940:	4689      	mov	r9, r1
    b942:	6028      	str	r0, [r5, #0]
    b944:	4c33      	ldr	r4, [pc, #204]	; (ba14 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b946:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b94a:	f040 0002 	orr.w	r0, r0, #2
    b94e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b952:	4608      	mov	r0, r1
    b954:	f000 fe4a 	bl	c5ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b958:	f000 fc02 	bl	c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b95c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; ba18 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b960:	2700      	movs	r7, #0
    b962:	b116      	cbz	r6, b96a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b964:	2e01      	cmp	r6, #1
    b966:	d027      	beq.n	b9b8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b968:	e03f      	b.n	b9ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b96a:	4648      	mov	r0, r9
    b96c:	f000 fc28 	bl	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b970:	79e0      	ldrb	r0, [r4, #7]
    b972:	2801      	cmp	r0, #1
    b974:	d105      	bne.n	b982 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b976:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b97a:	f041 0108 	orr.w	r1, r1, #8
    b97e:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b982:	4648      	mov	r0, r9
    b984:	f000 fbd0 	bl	c128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b988:	2001      	movs	r0, #1
    b98a:	7260      	strb	r0, [r4, #9]
    b98c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b98e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b992:	62a0      	str	r0, [r4, #40]	; 0x28
    b994:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b998:	6028      	str	r0, [r5, #0]
    b99a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b99e:	f1b9 0f02 	cmp.w	r9, #2
    b9a2:	d007      	beq.n	b9b4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b9a4:	f640 0034 	movw	r0, #2100	; 0x834
    b9a8:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b9ac:	4410      	add	r0, r2
    b9ae:	fbb0 f7f1 	udiv	r7, r0, r1
    b9b2:	e01a      	b.n	b9ea <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b9b4:	4608      	mov	r0, r1
    b9b6:	e7f7      	b.n	b9a8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b9b8:	f000 fc2a 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b9bc:	f000 fd78 	bl	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b9c0:	79e0      	ldrb	r0, [r4, #7]
    b9c2:	2801      	cmp	r0, #1
    b9c4:	d105      	bne.n	b9d2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b9c6:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b9ca:	f041 0104 	orr.w	r1, r1, #4
    b9ce:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b9d2:	2002      	movs	r0, #2
    b9d4:	7260      	strb	r0, [r4, #9]
    b9d6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b9d8:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b9dc:	62a0      	str	r0, [r4, #40]	; 0x28
    b9de:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b9e2:	6028      	str	r0, [r5, #0]
    b9e4:	2729      	movs	r7, #41	; 0x29
    b9e6:	f000 fc8b 	bl	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b9ea:	f000 fc75 	bl	c2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b9ee:	f000 fe37 	bl	c660 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b9f2:	6800      	ldr	r0, [r0, #0]
    b9f4:	2801      	cmp	r0, #1
    b9f6:	d006      	beq.n	ba06 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b9f8:	2100      	movs	r1, #0
    b9fa:	4630      	mov	r0, r6
    b9fc:	f004 fe7b 	bl	106f6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ba00:	4638      	mov	r0, r7
    ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ba06:	f7ff fef9 	bl	b7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ba0a:	2000      	movs	r0, #0
    ba0c:	e7f9      	b.n	ba02 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    ba0e:	0000      	.short	0x0000
    ba10:	4001f504 	.word	0x4001f504
    ba14:	20000f8c 	.word	0x20000f8c
    ba18:	40001000 	.word	0x40001000

0000ba1c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    ba1c:	4a02      	ldr	r2, [pc, #8]	; (ba28 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    ba1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    ba20:	6003      	str	r3, [r0, #0]
    ba22:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ba24:	6008      	str	r0, [r1, #0]
    ba26:	4770      	bx	lr
    ba28:	20000f8c 	.word	0x20000f8c

0000ba2c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    ba2c:	b510      	push	{r4, lr}
    ba2e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    ba30:	4901      	ldr	r1, [pc, #4]	; (ba38 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    ba32:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    ba36:	bd10      	pop	{r4, pc}
    ba38:	20000f7c 	.word	0x20000f7c

0000ba3c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    ba3c:	490f      	ldr	r1, [pc, #60]	; (ba7c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    ba3e:	b510      	push	{r4, lr}
    ba40:	69ca      	ldr	r2, [r1, #28]
    ba42:	4282      	cmp	r2, r0
    ba44:	d302      	bcc.n	ba4c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    ba46:	f640 010a 	movw	r1, #2058	; 0x80a
    ba4a:	e00b      	b.n	ba64 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    ba4c:	2201      	movs	r2, #1
    ba4e:	730a      	strb	r2, [r1, #12]
    ba50:	6108      	str	r0, [r1, #16]
    ba52:	490b      	ldr	r1, [pc, #44]	; (ba80 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    ba54:	644a      	str	r2, [r1, #68]	; 0x44
    ba56:	1d0a      	adds	r2, r1, #4
    ba58:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    ba5c:	4283      	cmp	r3, r0
    ba5e:	d304      	bcc.n	ba6a <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    ba60:	f640 0113 	movw	r1, #2067	; 0x813
    ba64:	203e      	movs	r0, #62	; 0x3e
    ba66:	f7f9 f913 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba6a:	2300      	movs	r3, #0
    ba6c:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    ba70:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ba74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ba78:	f000 bd28 	b.w	c4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    ba7c:	20000f8c 	.word	0x20000f8c
    ba80:	40008000 	.word	0x40008000

0000ba84 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    ba84:	b570      	push	{r4, r5, r6, lr}
    ba86:	4c11      	ldr	r4, [pc, #68]	; (bacc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ba88:	4606      	mov	r6, r0
    ba8a:	2002      	movs	r0, #2
    ba8c:	7320      	strb	r0, [r4, #12]
    ba8e:	2596      	movs	r5, #150	; 0x96
    ba90:	f000 f86e 	bl	bb70 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    ba94:	4602      	mov	r2, r0
    ba96:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    ba9a:	f894 1020 	ldrb.w	r1, [r4, #32]
    ba9e:	2801      	cmp	r0, #1
    baa0:	d00f      	beq.n	bac2 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    baa2:	4628      	mov	r0, r5
    baa4:	f004 fe49 	bl	1073a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    baa8:	6120      	str	r0, [r4, #16]
    baaa:	4809      	ldr	r0, [pc, #36]	; (bad0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    baac:	2100      	movs	r1, #0
    baae:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bab2:	6921      	ldr	r1, [r4, #16]
    bab4:	69e0      	ldr	r0, [r4, #28]
    bab6:	4408      	add	r0, r1
    bab8:	4905      	ldr	r1, [pc, #20]	; (bad0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    baba:	1d09      	adds	r1, r1, #4
    babc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bac0:	bd70      	pop	{r4, r5, r6, pc}
    bac2:	4633      	mov	r3, r6
    bac4:	4628      	mov	r0, r5
    bac6:	f004 fe54 	bl	10772 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    baca:	e7ed      	b.n	baa8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    bacc:	20000f8c 	.word	0x20000f8c
    bad0:	40008000 	.word	0x40008000

0000bad4 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    bad4:	b510      	push	{r4, lr}
    bad6:	f000 ff05 	bl	c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bada:	2800      	cmp	r0, #0
    badc:	d006      	beq.n	baec <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    bade:	4804      	ldr	r0, [pc, #16]	; (baf0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    bae0:	6801      	ldr	r1, [r0, #0]
    bae2:	f021 0101 	bic.w	r1, r1, #1
    bae6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    baea:	6001      	str	r1, [r0, #0]
    baec:	bd10      	pop	{r4, pc}
    baee:	0000      	.short	0x0000
    baf0:	40001774 	.word	0x40001774

0000baf4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    baf8:	2238      	movs	r2, #56	; 0x38
    bafa:	2100      	movs	r1, #0
    bafc:	4813      	ldr	r0, [pc, #76]	; (bb4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    bafe:	f000 ffa1 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb02:	f000 fd0f 	bl	c524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    bb06:	f000 fea6 	bl	c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bb0a:	4d11      	ldr	r5, [pc, #68]	; (bb50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb0c:	4e10      	ldr	r6, [pc, #64]	; (bb50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb0e:	2400      	movs	r4, #0
    bb10:	4f0f      	ldr	r7, [pc, #60]	; (bb50 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    bb12:	3508      	adds	r5, #8
    bb14:	3610      	adds	r6, #16
    bb16:	b928      	cbnz	r0, bb24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb18:	f000 feb4 	bl	c884 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bb1c:	b910      	cbnz	r0, bb24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    bb1e:	f000 febb 	bl	c898 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    bb22:	b108      	cbz	r0, bb28 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    bb24:	2224      	movs	r2, #36	; 0x24
    bb26:	e006      	b.n	bb36 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bb28:	f000 fef6 	bl	c918 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bb2c:	b910      	cbnz	r0, bb34 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    bb2e:	f000 fee9 	bl	c904 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    bb32:	b140      	cbz	r0, bb46 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    bb34:	2240      	movs	r2, #64	; 0x40
    bb36:	21ff      	movs	r1, #255	; 0xff
    bb38:	4638      	mov	r0, r7
    bb3a:	f000 ff83 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    bb3e:	602c      	str	r4, [r5, #0]
    bb40:	6034      	str	r4, [r6, #0]
    bb42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb46:	2238      	movs	r2, #56	; 0x38
    bb48:	e7f5      	b.n	bb36 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    bb4a:	0000      	.short	0x0000
    bb4c:	20000f8c 	.word	0x20000f8c
    bb50:	40000e00 	.word	0x40000e00

0000bb54 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    bb54:	4805      	ldr	r0, [pc, #20]	; (bb6c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    bb56:	b510      	push	{r4, lr}
    bb58:	69c0      	ldr	r0, [r0, #28]
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d104      	bne.n	bb68 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    bb5e:	f240 11fb 	movw	r1, #507	; 0x1fb
    bb62:	203e      	movs	r0, #62	; 0x3e
    bb64:	f7f9 f894 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bb68:	bd10      	pop	{r4, pc}
    bb6a:	0000      	.short	0x0000
    bb6c:	20000f8c 	.word	0x20000f8c

0000bb70 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    bb70:	4814      	ldr	r0, [pc, #80]	; (bbc4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    bb72:	b510      	push	{r4, lr}
    bb74:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    bb78:	7a40      	ldrb	r0, [r0, #9]
    bb7a:	b141      	cbz	r1, bb8e <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    bb7c:	2902      	cmp	r1, #2
    bb7e:	d00b      	beq.n	bb98 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    bb80:	2802      	cmp	r0, #2
    bb82:	d009      	beq.n	bb98 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    bb84:	2901      	cmp	r1, #1
    bb86:	d00b      	beq.n	bba0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    bb88:	2801      	cmp	r0, #1
    bb8a:	d009      	beq.n	bba0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    bb8c:	e016      	b.n	bbbc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    bb8e:	2800      	cmp	r0, #0
    bb90:	d1f6      	bne.n	bb80 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    bb92:	f240 117d 	movw	r1, #381	; 0x17d
    bb96:	e00e      	b.n	bbb6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    bb98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bb9c:	f000 bc38 	b.w	c410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    bba0:	4809      	ldr	r0, [pc, #36]	; (bbc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    bba2:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    bba6:	f000 000f 	and.w	r0, r0, #15
    bbaa:	2803      	cmp	r0, #3
    bbac:	d006      	beq.n	bbbc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    bbae:	2804      	cmp	r0, #4
    bbb0:	d006      	beq.n	bbc0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    bbb2:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    bbb6:	203e      	movs	r0, #62	; 0x3e
    bbb8:	f7f9 f86a 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbbc:	2001      	movs	r0, #1
    bbbe:	bd10      	pop	{r4, pc}
    bbc0:	2002      	movs	r0, #2
    bbc2:	bd10      	pop	{r4, pc}
    bbc4:	20000f8c 	.word	0x20000f8c
    bbc8:	40001000 	.word	0x40001000

0000bbcc <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    bbcc:	4805      	ldr	r0, [pc, #20]	; (bbe4 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x18>)
    bbce:	b510      	push	{r4, lr}
    bbd0:	6980      	ldr	r0, [r0, #24]
    bbd2:	2800      	cmp	r0, #0
    bbd4:	d104      	bne.n	bbe0 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x14>
    bbd6:	f240 11f5 	movw	r1, #501	; 0x1f5
    bbda:	203e      	movs	r0, #62	; 0x3e
    bbdc:	f7f9 f858 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbe0:	bd10      	pop	{r4, pc}
    bbe2:	0000      	.short	0x0000
    bbe4:	20000f8c 	.word	0x20000f8c

0000bbe8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    bbe8:	b510      	push	{r4, lr}
    bbea:	f000 fc7d 	bl	c4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    bbee:	f7ff fe05 	bl	b7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    bbf2:	f004 fd16 	bl	10622 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    bbf6:	480f      	ldr	r0, [pc, #60]	; (bc34 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    bbf8:	4a0f      	ldr	r2, [pc, #60]	; (bc38 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    bbfa:	6a81      	ldr	r1, [r0, #40]	; 0x28
    bbfc:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    bc00:	6011      	str	r1, [r2, #0]
    bc02:	2400      	movs	r4, #0
    bc04:	6284      	str	r4, [r0, #40]	; 0x28
    bc06:	7304      	strb	r4, [r0, #12]
    bc08:	61c4      	str	r4, [r0, #28]
    bc0a:	6184      	str	r4, [r0, #24]
    bc0c:	f000 fc6c 	bl	c4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    bc10:	480a      	ldr	r0, [pc, #40]	; (bc3c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    bc12:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc16:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bc1a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bc1e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    bc22:	2001      	movs	r0, #1
    bc24:	f004 fd36 	bl	10694 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc2c:	2001      	movs	r0, #1
    bc2e:	f004 bd24 	b.w	1067a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bc32:	0000      	.short	0x0000
    bc34:	20000f8c 	.word	0x20000f8c
    bc38:	4001f508 	.word	0x4001f508
    bc3c:	40008000 	.word	0x40008000

0000bc40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    bc40:	b570      	push	{r4, r5, r6, lr}
    bc42:	2001      	movs	r0, #1
    bc44:	f004 fd26 	bl	10694 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    bc48:	4c37      	ldr	r4, [pc, #220]	; (bd28 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    bc4a:	2000      	movs	r0, #0
    bc4c:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bc50:	2001      	movs	r0, #1
    bc52:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    bc56:	f000 fe35 	bl	c8c4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bc5a:	4d34      	ldr	r5, [pc, #208]	; (bd2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc5c:	b118      	cbz	r0, bc66 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    bc5e:	6828      	ldr	r0, [r5, #0]
    bc60:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    bc64:	6028      	str	r0, [r5, #0]
    bc66:	f000 fe21 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bc6a:	b128      	cbz	r0, bc78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    bc6c:	6828      	ldr	r0, [r5, #0]
    bc6e:	4930      	ldr	r1, [pc, #192]	; (bd30 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    bc70:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    bc74:	4308      	orrs	r0, r1
    bc76:	6028      	str	r0, [r5, #0]
    bc78:	f000 fe34 	bl	c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bc7c:	b138      	cbz	r0, bc8e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    bc7e:	482b      	ldr	r0, [pc, #172]	; (bd2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc80:	1d00      	adds	r0, r0, #4
    bc82:	6801      	ldr	r1, [r0, #0]
    bc84:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    bc88:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    bc8c:	6001      	str	r1, [r0, #0]
    bc8e:	4927      	ldr	r1, [pc, #156]	; (bd2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bc90:	4828      	ldr	r0, [pc, #160]	; (bd34 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    bc92:	313c      	adds	r1, #60	; 0x3c
    bc94:	6008      	str	r0, [r1, #0]
    bc96:	f7f8 fee3 	bl	4a60 <mpsl_fem_device_config_254_apply_get>
    bc9a:	b140      	cbz	r0, bcae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bc9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bca0:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    bca4:	1c41      	adds	r1, r0, #1
    bca6:	d002      	beq.n	bcae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    bca8:	4920      	ldr	r1, [pc, #128]	; (bd2c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    bcaa:	3110      	adds	r1, #16
    bcac:	6008      	str	r0, [r1, #0]
    bcae:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    bcb2:	6e00      	ldr	r0, [r0, #96]	; 0x60
    bcb4:	1c41      	adds	r1, r0, #1
    bcb6:	d004      	beq.n	bcc2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    bcb8:	491f      	ldr	r1, [pc, #124]	; (bd38 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    bcba:	680a      	ldr	r2, [r1, #0]
    bcbc:	f360 4217 	bfi	r2, r0, #16, #8
    bcc0:	600a      	str	r2, [r1, #0]
    bcc2:	f240 1103 	movw	r1, #259	; 0x103
    bcc6:	f240 605b 	movw	r0, #1627	; 0x65b
    bcca:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    bcce:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    bcd2:	2001      	movs	r0, #1
    bcd4:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    bcd8:	f000 fc88 	bl	c5ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bcdc:	f240 1001 	movw	r0, #257	; 0x101
    bce0:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    bce4:	2002      	movs	r0, #2
    bce6:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    bcea:	4915      	ldr	r1, [pc, #84]	; (bd40 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    bcec:	4813      	ldr	r0, [pc, #76]	; (bd3c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    bcee:	6008      	str	r0, [r1, #0]
    bcf0:	4914      	ldr	r1, [pc, #80]	; (bd44 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    bcf2:	2000      	movs	r0, #0
    bcf4:	4d14      	ldr	r5, [pc, #80]	; (bd48 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    bcf6:	8608      	strh	r0, [r1, #48]	; 0x30
    bcf8:	3110      	adds	r1, #16
    bcfa:	61c8      	str	r0, [r1, #28]
    bcfc:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    bd00:	7028      	strb	r0, [r5, #0]
    bd02:	2001      	movs	r0, #1
    bd04:	f004 fcb9 	bl	1067a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    bd08:	2010      	movs	r0, #16
    bd0a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    bd0e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd12:	2002      	movs	r0, #2
    bd14:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    bd18:	6868      	ldr	r0, [r5, #4]
    bd1a:	2800      	cmp	r0, #0
    bd1c:	d002      	beq.n	bd24 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    bd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd22:	4700      	bx	r0
    bd24:	bd70      	pop	{r4, r5, r6, pc}
    bd26:	0000      	.short	0x0000
    bd28:	40001000 	.word	0x40001000
    bd2c:	4000173c 	.word	0x4000173c
    bd30:	80000096 	.word	0x80000096
    bd34:	8900002c 	.word	0x8900002c
    bd38:	4000158c 	.word	0x4000158c
    bd3c:	0c0e0000 	.word	0x0c0e0000
    bd40:	4001f508 	.word	0x4001f508
    bd44:	20000f7c 	.word	0x20000f7c
    bd48:	20000270 	.word	0x20000270

0000bd4c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    bd4c:	4901      	ldr	r1, [pc, #4]	; (bd54 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bd4e:	7508      	strb	r0, [r1, #20]
    bd50:	4770      	bx	lr
    bd52:	0000      	.short	0x0000
    bd54:	20000f8c 	.word	0x20000f8c

0000bd58 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bd58:	4905      	ldr	r1, [pc, #20]	; (bd70 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    bd5a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    bd5e:	4805      	ldr	r0, [pc, #20]	; (bd74 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    bd60:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    bd64:	f041 0101 	orr.w	r1, r1, #1
    bd68:	7001      	strb	r1, [r0, #0]
    bd6a:	f000 ba7b 	b.w	c264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bd6e:	0000      	.short	0x0000
    bd70:	40001000 	.word	0x40001000
    bd74:	20000f8c 	.word	0x20000f8c

0000bd78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bd78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd7c:	4e36      	ldr	r6, [pc, #216]	; (be58 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    bd7e:	4607      	mov	r7, r0
    bd80:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bd84:	4689      	mov	r9, r1
    bd86:	4614      	mov	r4, r2
    bd88:	6030      	str	r0, [r6, #0]
    bd8a:	4610      	mov	r0, r2
    bd8c:	f000 fc2e 	bl	c5ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bd90:	f000 f9e6 	bl	c160 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bd94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; be5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    bd98:	4d31      	ldr	r5, [pc, #196]	; (be60 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    bd9a:	f04f 0801 	mov.w	r8, #1
    bd9e:	b127      	cbz	r7, bdaa <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    bda0:	2f01      	cmp	r7, #1
    bda2:	d01d      	beq.n	bde0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    bda4:	f240 710f 	movw	r1, #1807	; 0x70f
    bda8:	e04c      	b.n	be44 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    bdaa:	4620      	mov	r0, r4
    bdac:	f000 fa08 	bl	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bdb0:	4620      	mov	r0, r4
    bdb2:	f000 f9b9 	bl	c128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bdb6:	2c02      	cmp	r4, #2
    bdb8:	d00f      	beq.n	bdda <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    bdba:	f640 0034 	movw	r0, #2100	; 0x834
    bdbe:	bf00      	nop
    bdc0:	f649 51f8 	movw	r1, #40440	; 0x9df8
    bdc4:	4401      	add	r1, r0
    bdc6:	4648      	mov	r0, r9
    bdc8:	f000 fbb4 	bl	c534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bdcc:	4604      	mov	r4, r0
    bdce:	4650      	mov	r0, sl
    bdd0:	f000 fb9c 	bl	c50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bdd4:	f885 8009 	strb.w	r8, [r5, #9]
    bdd8:	e014      	b.n	be04 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    bdda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bdde:	e7ef      	b.n	bdc0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    bde0:	f000 fa16 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bde4:	f000 fb64 	bl	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bde8:	f000 fa8a 	bl	c300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    bdec:	f649 71ba 	movw	r1, #40890	; 0x9fba
    bdf0:	4648      	mov	r0, r9
    bdf2:	f000 fb9f 	bl	c534 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bdf6:	4604      	mov	r4, r0
    bdf8:	4818      	ldr	r0, [pc, #96]	; (be5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    bdfa:	1d00      	adds	r0, r0, #4
    bdfc:	f000 fb86 	bl	c50c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    be00:	2002      	movs	r0, #2
    be02:	7268      	strb	r0, [r5, #9]
    be04:	f8df 905c 	ldr.w	r9, [pc, #92]	; be64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    be08:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    be0c:	4917      	ldr	r1, [pc, #92]	; (be6c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    be0e:	4816      	ldr	r0, [pc, #88]	; (be68 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    be10:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    be14:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    be16:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    be1a:	62a8      	str	r0, [r5, #40]	; 0x28
    be1c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    be20:	6030      	str	r0, [r6, #0]
    be22:	2010      	movs	r0, #16
    be24:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    be28:	03c0      	lsls	r0, r0, #15
    be2a:	6030      	str	r0, [r6, #0]
    be2c:	f000 fa54 	bl	c2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    be30:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    be34:	480b      	ldr	r0, [pc, #44]	; (be64 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    be36:	300c      	adds	r0, #12
    be38:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    be3c:	42a0      	cmp	r0, r4
    be3e:	d304      	bcc.n	be4a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    be40:	f240 7136 	movw	r1, #1846	; 0x736
    be44:	203e      	movs	r0, #62	; 0x3e
    be46:	f7f8 ff23 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be4a:	4621      	mov	r1, r4
    be4c:	4638      	mov	r0, r7
    be4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be52:	f004 bc50 	b.w	106f6 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    be56:	0000      	.short	0x0000
    be58:	4001f504 	.word	0x4001f504
    be5c:	40001000 	.word	0x40001000
    be60:	20000f8c 	.word	0x20000f8c
    be64:	40008000 	.word	0x40008000
    be68:	40008140 	.word	0x40008140
    be6c:	4001f098 	.word	0x4001f098

0000be70 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    be70:	4b0d      	ldr	r3, [pc, #52]	; (bea8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    be72:	b510      	push	{r4, lr}
    be74:	71d8      	strb	r0, [r3, #7]
    be76:	729a      	strb	r2, [r3, #10]
    be78:	b151      	cbz	r1, be90 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    be7a:	2002      	movs	r0, #2
    be7c:	7218      	strb	r0, [r3, #8]
    be7e:	2801      	cmp	r0, #1
    be80:	d008      	beq.n	be94 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    be82:	2802      	cmp	r0, #2
    be84:	d00f      	beq.n	bea6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    be86:	f640 1112 	movw	r1, #2322	; 0x912
    be8a:	203e      	movs	r0, #62	; 0x3e
    be8c:	f7f8 ff00 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be90:	2001      	movs	r0, #1
    be92:	e7f3      	b.n	be7c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    be94:	7a58      	ldrb	r0, [r3, #9]
    be96:	2802      	cmp	r0, #2
    be98:	d105      	bne.n	bea6 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    be9a:	f000 f9b9 	bl	c210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    be9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bea2:	f000 bb05 	b.w	c4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bea6:	bd10      	pop	{r4, pc}
    bea8:	20000f8c 	.word	0x20000f8c

0000beac <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    beac:	4902      	ldr	r1, [pc, #8]	; (beb8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    beae:	2000      	movs	r0, #0
    beb0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    beb4:	4770      	bx	lr
    beb6:	0000      	.short	0x0000
    beb8:	40008000 	.word	0x40008000

0000bebc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bebc:	b538      	push	{r3, r4, r5, lr}
    bebe:	4c0b      	ldr	r4, [pc, #44]	; (beec <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bec0:	4605      	mov	r5, r0
    bec2:	f44f 718e 	mov.w	r1, #284	; 0x11c
    bec6:	4620      	mov	r0, r4
    bec8:	f004 fc2d 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    becc:	2800      	cmp	r0, #0
    bece:	d00c      	beq.n	beea <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    bed0:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    bed4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bed8:	4240      	negs	r0, r0
    beda:	7028      	strb	r0, [r5, #0]
    bedc:	2000      	movs	r0, #0
    bede:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    bee2:	4803      	ldr	r0, [pc, #12]	; (bef0 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bee4:	6800      	ldr	r0, [r0, #0]
    bee6:	9000      	str	r0, [sp, #0]
    bee8:	2001      	movs	r0, #1
    beea:	bd38      	pop	{r3, r4, r5, pc}
    beec:	40001000 	.word	0x40001000
    bef0:	4000111c 	.word	0x4000111c

0000bef4 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bef4:	4903      	ldr	r1, [pc, #12]	; (bf04 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bef6:	0e02      	lsrs	r2, r0, #24
    bef8:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    befc:	0200      	lsls	r0, r0, #8
    befe:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bf02:	4770      	bx	lr
    bf04:	40001000 	.word	0x40001000

0000bf08 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bf08:	6800      	ldr	r0, [r0, #0]
    bf0a:	4903      	ldr	r1, [pc, #12]	; (bf18 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bf0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf10:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bf14:	4770      	bx	lr
    bf16:	0000      	.short	0x0000
    bf18:	40001000 	.word	0x40001000

0000bf1c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bf1c:	b510      	push	{r4, lr}
    bf1e:	f000 fb41 	bl	c5a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bf22:	4807      	ldr	r0, [pc, #28]	; (bf40 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    bf24:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bf28:	b2c0      	uxtb	r0, r0
    bf2a:	2803      	cmp	r0, #3
    bf2c:	d001      	beq.n	bf32 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    bf2e:	280b      	cmp	r0, #11
    bf30:	d104      	bne.n	bf3c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    bf32:	f44f 7121 	mov.w	r1, #644	; 0x284
    bf36:	203e      	movs	r0, #62	; 0x3e
    bf38:	f7f8 feaa 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf3c:	bd10      	pop	{r4, pc}
    bf3e:	0000      	.short	0x0000
    bf40:	40001000 	.word	0x40001000

0000bf44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bf44:	4901      	ldr	r1, [pc, #4]	; (bf4c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bf46:	7548      	strb	r0, [r1, #21]
    bf48:	4770      	bx	lr
    bf4a:	0000      	.short	0x0000
    bf4c:	20000f8c 	.word	0x20000f8c

0000bf50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bf50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf54:	4853      	ldr	r0, [pc, #332]	; (c0a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bf56:	f04f 0a01 	mov.w	sl, #1
    bf5a:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bf5e:	4851      	ldr	r0, [pc, #324]	; (c0a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bf60:	300c      	adds	r0, #12
    bf62:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bf66:	4850      	ldr	r0, [pc, #320]	; (c0a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bf68:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    bf6c:	4c4f      	ldr	r4, [pc, #316]	; (c0ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bf6e:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bf72:	f000 f957 	bl	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bf76:	494e      	ldr	r1, [pc, #312]	; (c0b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bf78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bf7a:	6008      	str	r0, [r1, #0]
    bf7c:	f8df 9134 	ldr.w	r9, [pc, #308]	; c0b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    bf80:	2600      	movs	r6, #0
    bf82:	62a6      	str	r6, [r4, #40]	; 0x28
    bf84:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bf88:	f240 121d 	movw	r2, #285	; 0x11d
    bf8c:	4391      	bics	r1, r2
    bf8e:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bf92:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bf96:	f000 f9c5 	bl	c324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    bf9a:	4605      	mov	r5, r0
    bf9c:	4841      	ldr	r0, [pc, #260]	; (c0a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bf9e:	3008      	adds	r0, #8
    bfa0:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bfa4:	61e0      	str	r0, [r4, #28]
    bfa6:	f7ff fde3 	bl	bb70 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bfaa:	f884 0020 	strb.w	r0, [r4, #32]
    bfae:	7a60      	ldrb	r0, [r4, #9]
    bfb0:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bfb4:	61a6      	str	r6, [r4, #24]
    bfb6:	4e40      	ldr	r6, [pc, #256]	; (c0b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bfb8:	07a8      	lsls	r0, r5, #30
    bfba:	d502      	bpl.n	bfc2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bfbc:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bfc0:	61a0      	str	r0, [r4, #24]
    bfc2:	0728      	lsls	r0, r5, #28
    bfc4:	d502      	bpl.n	bfcc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bfc6:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bfca:	61a0      	str	r0, [r4, #24]
    bfcc:	f04f 0800 	mov.w	r8, #0
    bfd0:	4639      	mov	r1, r7
    bfd2:	4628      	mov	r0, r5
    bfd4:	f000 fa32 	bl	c43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    bfd8:	b918      	cbnz	r0, bfe2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bfda:	f8c9 a010 	str.w	sl, [r9, #16]
    bfde:	f04f 0801 	mov.w	r8, #1
    bfe2:	4f32      	ldr	r7, [pc, #200]	; (c0ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bfe4:	07e8      	lsls	r0, r5, #31
    bfe6:	f1a7 0710 	sub.w	r7, r7, #16
    bfea:	d002      	beq.n	bff2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    bfec:	6838      	ldr	r0, [r7, #0]
    bfee:	4780      	blx	r0
    bff0:	e031      	b.n	c056 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bff2:	07a8      	lsls	r0, r5, #30
    bff4:	d526      	bpl.n	c044 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    bff6:	0768      	lsls	r0, r5, #29
    bff8:	d41e      	bmi.n	c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bffa:	f000 fc73 	bl	c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bffe:	b9d8      	cbnz	r0, c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c000:	f000 fc60 	bl	c8c4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c004:	b9c0      	cbnz	r0, c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c006:	482d      	ldr	r0, [pc, #180]	; (c0bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    c008:	6800      	ldr	r0, [r0, #0]
    c00a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    c00e:	f3c0 6100 	ubfx	r1, r0, #24, #1
    c012:	f000 030f 	and.w	r3, r0, #15
    c016:	f3c0 1203 	ubfx	r2, r0, #4, #4
    c01a:	f3c0 2003 	ubfx	r0, r0, #8, #4
    c01e:	b159      	cbz	r1, c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c020:	b10b      	cbz	r3, c026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    c022:	b102      	cbz	r2, c026 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    c024:	b940      	cbnz	r0, c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c026:	4825      	ldr	r0, [pc, #148]	; (c0bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    c028:	1d00      	adds	r0, r0, #4
    c02a:	6800      	ldr	r0, [r0, #0]
    c02c:	b120      	cbz	r0, c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c02e:	f1bc 0f03 	cmp.w	ip, #3
    c032:	d201      	bcs.n	c038 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    c034:	f045 0504 	orr.w	r5, r5, #4
    c038:	f345 0080 	sbfx	r0, r5, #2, #1
    c03c:	4641      	mov	r1, r8
    c03e:	1c40      	adds	r0, r0, #1
    c040:	687a      	ldr	r2, [r7, #4]
    c042:	e007      	b.n	c054 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    c044:	f015 0f28 	tst.w	r5, #40	; 0x28
    c048:	d005      	beq.n	c056 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    c04a:	f345 1140 	sbfx	r1, r5, #5, #1
    c04e:	68ba      	ldr	r2, [r7, #8]
    c050:	4640      	mov	r0, r8
    c052:	1c49      	adds	r1, r1, #1
    c054:	4790      	blx	r2
    c056:	06e8      	lsls	r0, r5, #27
    c058:	d501      	bpl.n	c05e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    c05a:	68f8      	ldr	r0, [r7, #12]
    c05c:	4780      	blx	r0
    c05e:	7a60      	ldrb	r0, [r4, #9]
    c060:	2802      	cmp	r0, #2
    c062:	d11c      	bne.n	c09e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    c064:	7b20      	ldrb	r0, [r4, #12]
    c066:	2800      	cmp	r0, #0
    c068:	d019      	beq.n	c09e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    c06a:	2802      	cmp	r0, #2
    c06c:	d004      	beq.n	c078 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    c06e:	2801      	cmp	r0, #1
    c070:	d006      	beq.n	c080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    c072:	f640 21e1 	movw	r1, #2785	; 0xae1
    c076:	e009      	b.n	c08c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    c078:	6921      	ldr	r1, [r4, #16]
    c07a:	69e0      	ldr	r0, [r4, #28]
    c07c:	4408      	add	r0, r1
    c07e:	e008      	b.n	c092 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    c080:	69e1      	ldr	r1, [r4, #28]
    c082:	6920      	ldr	r0, [r4, #16]
    c084:	4288      	cmp	r0, r1
    c086:	d804      	bhi.n	c092 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    c088:	f640 21e2 	movw	r1, #2786	; 0xae2
    c08c:	203e      	movs	r0, #62	; 0x3e
    c08e:	f7f8 fdff 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c092:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    c096:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c09a:	f000 ba17 	b.w	c4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    c09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0a2:	0000      	.short	0x0000
    c0a4:	40008000 	.word	0x40008000
    c0a8:	4000b000 	.word	0x4000b000
    c0ac:	20000f8c 	.word	0x20000f8c
    c0b0:	4001f508 	.word	0x4001f508
    c0b4:	40001000 	.word	0x40001000
    c0b8:	40008004 	.word	0x40008004
    c0bc:	40001450 	.word	0x40001450

0000c0c0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    c0c0:	b570      	push	{r4, r5, r6, lr}
    c0c2:	4b15      	ldr	r3, [pc, #84]	; (c118 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    c0c4:	888c      	ldrh	r4, [r1, #4]
    c0c6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    c0ca:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    c0ce:	780c      	ldrb	r4, [r1, #0]
    c0d0:	f8d1 1001 	ldr.w	r1, [r1, #1]
    c0d4:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    c0d8:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    c0dc:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    c0e0:	2101      	movs	r1, #1
    c0e2:	4081      	lsls	r1, r0
    c0e4:	430c      	orrs	r4, r1
    c0e6:	b2e4      	uxtb	r4, r4
    c0e8:	b132      	cbz	r2, c0f8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    c0ea:	2a01      	cmp	r2, #1
    c0ec:	d00a      	beq.n	c104 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    c0ee:	f240 41ac 	movw	r1, #1196	; 0x4ac
    c0f2:	203e      	movs	r0, #62	; 0x3e
    c0f4:	f7f8 fdcc 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c0f8:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c0fc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    c100:	4388      	bics	r0, r1
    c102:	e004      	b.n	c10e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    c104:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    c108:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    c10c:	b2c0      	uxtb	r0, r0
    c10e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    c112:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    c116:	bd70      	pop	{r4, r5, r6, pc}
    c118:	40001000 	.word	0x40001000

0000c11c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    c11c:	4901      	ldr	r1, [pc, #4]	; (c124 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    c11e:	2001      	movs	r0, #1
    c120:	7008      	strb	r0, [r1, #0]
    c122:	4770      	bx	lr
    c124:	20000270 	.word	0x20000270
    c128:	b510      	push	{r4, lr}
    c12a:	4604      	mov	r4, r0
    c12c:	f000 fbda 	bl	c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c130:	2800      	cmp	r0, #0
    c132:	d00e      	beq.n	c152 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    c134:	4a09      	ldr	r2, [pc, #36]	; (c15c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    c136:	6811      	ldr	r1, [r2, #0]
    c138:	0650      	lsls	r0, r2, #25
    c13a:	2c02      	cmp	r4, #2
    c13c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    c140:	d008      	beq.n	c154 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    c142:	f3c0 2006 	ubfx	r0, r0, #8, #7
    c146:	bf00      	nop
    c148:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    c14c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    c150:	6010      	str	r0, [r2, #0]
    c152:	bd10      	pop	{r4, pc}
    c154:	f3c0 6006 	ubfx	r0, r0, #24, #7
    c158:	e7f6      	b.n	c148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    c15a:	0000      	.short	0x0000
    c15c:	40001588 	.word	0x40001588
    c160:	4815      	ldr	r0, [pc, #84]	; (c1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    c162:	7d41      	ldrb	r1, [r0, #21]
    c164:	2925      	cmp	r1, #37	; 0x25
    c166:	d00a      	beq.n	c17e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    c168:	2926      	cmp	r1, #38	; 0x26
    c16a:	d00b      	beq.n	c184 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    c16c:	2927      	cmp	r1, #39	; 0x27
    c16e:	d00c      	beq.n	c18a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    c170:	7d40      	ldrb	r0, [r0, #21]
    c172:	0040      	lsls	r0, r0, #1
    c174:	290a      	cmp	r1, #10
    c176:	d80b      	bhi.n	c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    c178:	f600 1064 	addw	r0, r0, #2404	; 0x964
    c17c:	e00a      	b.n	c194 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    c17e:	f640 1062 	movw	r0, #2402	; 0x962
    c182:	e00f      	b.n	c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c184:	f640 107a 	movw	r0, #2426	; 0x97a
    c188:	e00c      	b.n	c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c18a:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    c18e:	e009      	b.n	c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c190:	f600 1066 	addw	r0, r0, #2406	; 0x966
    c194:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    c198:	d204      	bcs.n	c1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    c19a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    c19e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c1a2:	e001      	b.n	c1a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    c1a4:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    c1a8:	4a04      	ldr	r2, [pc, #16]	; (c1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    c1aa:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    c1ae:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    c1b2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    c1b6:	4770      	bx	lr
    c1b8:	20000f8c 	.word	0x20000f8c
    c1bc:	40001000 	.word	0x40001000
    c1c0:	4912      	ldr	r1, [pc, #72]	; (c20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    c1c2:	b508      	push	{r3, lr}
    c1c4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    c1c8:	7d49      	ldrb	r1, [r1, #21]
    c1ca:	2801      	cmp	r0, #1
    c1cc:	d00a      	beq.n	c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    c1ce:	2802      	cmp	r0, #2
    c1d0:	d00a      	beq.n	c1e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    c1d2:	2804      	cmp	r0, #4
    c1d4:	d00a      	beq.n	c1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    c1d6:	2808      	cmp	r0, #8
    c1d8:	d00a      	beq.n	c1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c1da:	f240 31ed 	movw	r1, #1005	; 0x3ed
    c1de:	2006      	movs	r0, #6
    c1e0:	f7f8 fd56 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1e4:	2000      	movs	r0, #0
    c1e6:	e004      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c1e8:	2001      	movs	r0, #1
    c1ea:	e002      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c1ec:	2003      	movs	r0, #3
    c1ee:	e000      	b.n	c1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    c1f0:	2002      	movs	r0, #2
    c1f2:	466b      	mov	r3, sp
    c1f4:	f7f5 f8d6 	bl	13a4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    c1f8:	b118      	cbz	r0, c202 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    c1fa:	f240 41de 	movw	r1, #1246	; 0x4de
    c1fe:	203e      	movs	r0, #62	; 0x3e
    c200:	e7ee      	b.n	c1e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    c202:	f99d 0000 	ldrsb.w	r0, [sp]
    c206:	f000 f9eb 	bl	c5e0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    c20a:	bd08      	pop	{r3, pc}
    c20c:	20000f8c 	.word	0x20000f8c
    c210:	4803      	ldr	r0, [pc, #12]	; (c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    c212:	7a01      	ldrb	r1, [r0, #8]
    c214:	2901      	cmp	r1, #1
    c216:	d102      	bne.n	c21e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    c218:	7a80      	ldrb	r0, [r0, #10]
    c21a:	f7ff bfd1 	b.w	c1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c21e:	4770      	bx	lr
    c220:	20000f8c 	.word	0x20000f8c
    c224:	4805      	ldr	r0, [pc, #20]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    c226:	7a40      	ldrb	r0, [r0, #9]
    c228:	2801      	cmp	r0, #1
    c22a:	d003      	beq.n	c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    c22c:	2802      	cmp	r0, #2
    c22e:	d103      	bne.n	c238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    c230:	f004 b9df 	b.w	105f2 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    c234:	f004 b9e9 	b.w	1060a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    c238:	4770      	bx	lr
    c23a:	0000      	.short	0x0000
    c23c:	20000f8c 	.word	0x20000f8c
    c240:	4807      	ldr	r0, [pc, #28]	; (c260 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    c242:	2100      	movs	r1, #0
    c244:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c248:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    c24c:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    c250:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c254:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    c258:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    c25c:	4770      	bx	lr
    c25e:	0000      	.short	0x0000
    c260:	40001000 	.word	0x40001000
    c264:	4818      	ldr	r0, [pc, #96]	; (c2c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    c266:	b510      	push	{r4, lr}
    c268:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    c26c:	07c1      	lsls	r1, r0, #31
    c26e:	d029      	beq.n	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c270:	0781      	lsls	r1, r0, #30
    c272:	d514      	bpl.n	c29e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    c274:	4815      	ldr	r0, [pc, #84]	; (c2cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c276:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c27a:	f041 0101 	orr.w	r1, r1, #1
    c27e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c282:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c286:	b2c0      	uxtb	r0, r0
    c288:	280b      	cmp	r0, #11
    c28a:	d005      	beq.n	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c28c:	280a      	cmp	r0, #10
    c28e:	d003      	beq.n	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c290:	2803      	cmp	r0, #3
    c292:	d001      	beq.n	c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c294:	2802      	cmp	r0, #2
    c296:	d115      	bne.n	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c298:	f240 510f 	movw	r1, #1295	; 0x50f
    c29c:	e00f      	b.n	c2be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    c29e:	0740      	lsls	r0, r0, #29
    c2a0:	d510      	bpl.n	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c2a2:	480a      	ldr	r0, [pc, #40]	; (c2cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c2a4:	490a      	ldr	r1, [pc, #40]	; (c2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    c2a6:	3008      	adds	r0, #8
    c2a8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c2ac:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c2b0:	4808      	ldr	r0, [pc, #32]	; (c2d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    c2b2:	f004 fa3d 	bl	10730 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c2b6:	2800      	cmp	r0, #0
    c2b8:	d004      	beq.n	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c2ba:	f240 5117 	movw	r1, #1303	; 0x517
    c2be:	203e      	movs	r0, #62	; 0x3e
    c2c0:	f7f8 fce6 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2c4:	bd10      	pop	{r4, pc}
    c2c6:	0000      	.short	0x0000
    c2c8:	20000f8c 	.word	0x20000f8c
    c2cc:	40001000 	.word	0x40001000
    c2d0:	4001f098 	.word	0x4001f098
    c2d4:	40008000 	.word	0x40008000
    c2d8:	4808      	ldr	r0, [pc, #32]	; (c2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    c2da:	4601      	mov	r1, r0
    c2dc:	79c2      	ldrb	r2, [r0, #7]
    c2de:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c2e2:	b112      	cbz	r2, c2ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    c2e4:	2a01      	cmp	r2, #1
    c2e6:	d003      	beq.n	c2f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    c2e8:	e006      	b.n	c2f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    c2ea:	f041 0102 	orr.w	r1, r1, #2
    c2ee:	e001      	b.n	c2f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    c2f0:	f041 0104 	orr.w	r1, r1, #4
    c2f4:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c2f8:	f7ff bfb4 	b.w	c264 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c2fc:	20000f8c 	.word	0x20000f8c
    c300:	b510      	push	{r4, lr}
    c302:	f000 faef 	bl	c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c306:	2800      	cmp	r0, #0
    c308:	d108      	bne.n	c31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c30a:	f000 fadb 	bl	c8c4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c30e:	2800      	cmp	r0, #0
    c310:	d104      	bne.n	c31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c312:	4803      	ldr	r0, [pc, #12]	; (c320 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    c314:	6801      	ldr	r1, [r0, #0]
    c316:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c31a:	6001      	str	r1, [r0, #0]
    c31c:	bd10      	pop	{r4, pc}
    c31e:	0000      	.short	0x0000
    c320:	40001568 	.word	0x40001568
    c324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c328:	4d35      	ldr	r5, [pc, #212]	; (c400 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    c32a:	2400      	movs	r4, #0
    c32c:	7b28      	ldrb	r0, [r5, #12]
    c32e:	b138      	cbz	r0, c340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c330:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c334:	4833      	ldr	r0, [pc, #204]	; (c404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    c336:	f004 f9fb 	bl	10730 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c33a:	b108      	cbz	r0, c340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c33c:	2601      	movs	r6, #1
    c33e:	e000      	b.n	c342 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c340:	2600      	movs	r6, #0
    c342:	7a68      	ldrb	r0, [r5, #9]
    c344:	4f30      	ldr	r7, [pc, #192]	; (c408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    c346:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c34a:	2801      	cmp	r0, #1
    c34c:	d002      	beq.n	c354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    c34e:	2802      	cmp	r0, #2
    c350:	d008      	beq.n	c364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c352:	e018      	b.n	c386 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c354:	4638      	mov	r0, r7
    c356:	f004 f9e6 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c35a:	b108      	cbz	r0, c360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    c35c:	2408      	movs	r4, #8
    c35e:	e012      	b.n	c386 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c360:	2400      	movs	r4, #0
    c362:	e010      	b.n	c386 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c364:	4638      	mov	r0, r7
    c366:	f004 f9de 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c36a:	b100      	cbz	r0, c36e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    c36c:	2002      	movs	r0, #2
    c36e:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c372:	43c9      	mvns	r1, r1
    c374:	f341 0100 	sbfx	r1, r1, #0, #1
    c378:	1c49      	adds	r1, r1, #1
    c37a:	d001      	beq.n	c380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    c37c:	2400      	movs	r4, #0
    c37e:	e000      	b.n	c382 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    c380:	2404      	movs	r4, #4
    c382:	4304      	orrs	r4, r0
    c384:	4334      	orrs	r4, r6
    c386:	f014 0f0b 	tst.w	r4, #11
    c38a:	d107      	bne.n	c39c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    c38c:	f44f 7188 	mov.w	r1, #272	; 0x110
    c390:	4638      	mov	r0, r7
    c392:	f004 f9c8 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c396:	b100      	cbz	r0, c39a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    c398:	2010      	movs	r0, #16
    c39a:	4304      	orrs	r4, r0
    c39c:	481b      	ldr	r0, [pc, #108]	; (c40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c39e:	7800      	ldrb	r0, [r0, #0]
    c3a0:	b1f8      	cbz	r0, c3e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c3a2:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c3a6:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c3aa:	d007      	beq.n	c3bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c3ac:	f44f 718a 	mov.w	r1, #276	; 0x114
    c3b0:	4638      	mov	r0, r7
    c3b2:	f004 f9b8 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c3b6:	b108      	cbz	r0, c3bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c3b8:	2001      	movs	r0, #1
    c3ba:	e000      	b.n	c3be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c3bc:	2000      	movs	r0, #0
    c3be:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c3c2:	b13e      	cbz	r6, c3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c3c4:	f44f 718c 	mov.w	r1, #280	; 0x118
    c3c8:	4638      	mov	r0, r7
    c3ca:	f004 f9ac 	bl	10726 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c3ce:	b108      	cbz	r0, c3d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c3d0:	2001      	movs	r0, #1
    c3d2:	e000      	b.n	c3d6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c3d4:	2000      	movs	r0, #0
    c3d6:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c3da:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c3de:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c3e2:	f7ff ff2d 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c3e6:	06e0      	lsls	r0, r4, #27
    c3e8:	d506      	bpl.n	c3f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c3ea:	0720      	lsls	r0, r4, #28
    c3ec:	d404      	bmi.n	c3f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c3ee:	7a68      	ldrb	r0, [r5, #9]
    c3f0:	2801      	cmp	r0, #1
    c3f2:	d101      	bne.n	c3f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c3f4:	f044 0420 	orr.w	r4, r4, #32
    c3f8:	4620      	mov	r0, r4
    c3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3fe:	0000      	.short	0x0000
    c400:	20000f8c 	.word	0x20000f8c
    c404:	40008000 	.word	0x40008000
    c408:	40001000 	.word	0x40001000
    c40c:	20000270 	.word	0x20000270
    c410:	4809      	ldr	r0, [pc, #36]	; (c438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c412:	b510      	push	{r4, lr}
    c414:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c418:	f000 000f 	and.w	r0, r0, #15
    c41c:	2803      	cmp	r0, #3
    c41e:	d006      	beq.n	c42e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c420:	2804      	cmp	r0, #4
    c422:	d006      	beq.n	c432 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c424:	f240 11dd 	movw	r1, #477	; 0x1dd
    c428:	203e      	movs	r0, #62	; 0x3e
    c42a:	f7f8 fc31 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c42e:	2001      	movs	r0, #1
    c430:	bd10      	pop	{r4, pc}
    c432:	2002      	movs	r0, #2
    c434:	bd10      	pop	{r4, pc}
    c436:	0000      	.short	0x0000
    c438:	40001000 	.word	0x40001000
    c43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c440:	4c19      	ldr	r4, [pc, #100]	; (c4a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c442:	460d      	mov	r5, r1
    c444:	7a21      	ldrb	r1, [r4, #8]
    c446:	b129      	cbz	r1, c454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c448:	f010 0f11 	tst.w	r0, #17
    c44c:	d00b      	beq.n	c466 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c44e:	f7ff f9d5 	bl	b7fc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c452:	e027      	b.n	c4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c454:	4915      	ldr	r1, [pc, #84]	; (c4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c456:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c45a:	6008      	str	r0, [r1, #0]
    c45c:	f000 f862 	bl	c524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c460:	2000      	movs	r0, #0
    c462:	7320      	strb	r0, [r4, #12]
    c464:	e01e      	b.n	c4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c466:	2901      	cmp	r1, #1
    c468:	d001      	beq.n	c46e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c46a:	2601      	movs	r6, #1
    c46c:	e000      	b.n	c470 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c46e:	2600      	movs	r6, #0
    c470:	79e0      	ldrb	r0, [r4, #7]
    c472:	2801      	cmp	r0, #1
    c474:	d00e      	beq.n	c494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c476:	2700      	movs	r7, #0
    c478:	f000 f854 	bl	c524 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c47c:	2196      	movs	r1, #150	; 0x96
    c47e:	4630      	mov	r0, r6
    c480:	f000 f866 	bl	c550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c484:	4601      	mov	r1, r0
    c486:	b14f      	cbz	r7, c49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c488:	353b      	adds	r5, #59	; 0x3b
    c48a:	428d      	cmp	r5, r1
    c48c:	d904      	bls.n	c498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c48e:	2000      	movs	r0, #0
    c490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c494:	2701      	movs	r7, #1
    c496:	e7ef      	b.n	c478 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c498:	2001      	movs	r0, #1
    c49a:	71e0      	strb	r0, [r4, #7]
    c49c:	7aa2      	ldrb	r2, [r4, #10]
    c49e:	4630      	mov	r0, r6
    c4a0:	f7ff fc6a 	bl	bd78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c4a4:	2001      	movs	r0, #1
    c4a6:	e7f3      	b.n	c490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c4a8:	20000f8c 	.word	0x20000f8c
    c4ac:	4001f508 	.word	0x4001f508
    c4b0:	4805      	ldr	r0, [pc, #20]	; (c4c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c4b2:	2100      	movs	r1, #0
    c4b4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c4b8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c4bc:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c4c0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c4c4:	4770      	bx	lr
    c4c6:	0000      	.short	0x0000
    c4c8:	40001000 	.word	0x40001000
    c4cc:	4804      	ldr	r0, [pc, #16]	; (c4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c4ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c4d0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c4d4:	6281      	str	r1, [r0, #40]	; 0x28
    c4d6:	4903      	ldr	r1, [pc, #12]	; (c4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c4d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c4dc:	6008      	str	r0, [r1, #0]
    c4de:	4770      	bx	lr
    c4e0:	20000f8c 	.word	0x20000f8c
    c4e4:	4001f504 	.word	0x4001f504
    c4e8:	4a07      	ldr	r2, [pc, #28]	; (c508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c4ea:	2000      	movs	r0, #0
    c4ec:	3208      	adds	r2, #8
    c4ee:	4906      	ldr	r1, [pc, #24]	; (c508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c4f0:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c4f4:	1d0a      	adds	r2, r1, #4
    c4f6:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c4fa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c4fe:	4902      	ldr	r1, [pc, #8]	; (c508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c500:	310c      	adds	r1, #12
    c502:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c506:	4770      	bx	lr
    c508:	40008000 	.word	0x40008000
    c50c:	4903      	ldr	r1, [pc, #12]	; (c51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c50e:	79c9      	ldrb	r1, [r1, #7]
    c510:	2900      	cmp	r1, #0
    c512:	d102      	bne.n	c51a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c514:	4902      	ldr	r1, [pc, #8]	; (c520 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c516:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c51a:	4770      	bx	lr
    c51c:	20000f8c 	.word	0x20000f8c
    c520:	4001f098 	.word	0x4001f098
    c524:	4802      	ldr	r0, [pc, #8]	; (c530 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c526:	2100      	movs	r1, #0
    c528:	71c1      	strb	r1, [r0, #7]
    c52a:	7201      	strb	r1, [r0, #8]
    c52c:	7241      	strb	r1, [r0, #9]
    c52e:	4770      	bx	lr
    c530:	20000f8c 	.word	0x20000f8c
    c534:	4a05      	ldr	r2, [pc, #20]	; (c54c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c536:	79d2      	ldrb	r2, [r2, #7]
    c538:	2a01      	cmp	r2, #1
    c53a:	d006      	beq.n	c54a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c53c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c540:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c544:	fbb1 f1f2 	udiv	r1, r1, r2
    c548:	1a40      	subs	r0, r0, r1
    c54a:	4770      	bx	lr
    c54c:	20000f8c 	.word	0x20000f8c
    c550:	b570      	push	{r4, r5, r6, lr}
    c552:	4c13      	ldr	r4, [pc, #76]	; (c5a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c554:	4603      	mov	r3, r0
    c556:	460d      	mov	r5, r1
    c558:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c55c:	2000      	movs	r0, #0
    c55e:	b15a      	cbz	r2, c578 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c560:	4621      	mov	r1, r4
    c562:	f891 1020 	ldrb.w	r1, [r1, #32]
    c566:	b163      	cbz	r3, c582 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c568:	2b01      	cmp	r3, #1
    c56a:	d111      	bne.n	c590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c56c:	2a01      	cmp	r2, #1
    c56e:	4628      	mov	r0, r5
    c570:	d012      	beq.n	c598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c572:	f004 f922 	bl	107ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c576:	e009      	b.n	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c578:	f240 7152 	movw	r1, #1874	; 0x752
    c57c:	203e      	movs	r0, #62	; 0x3e
    c57e:	f7f8 fb87 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c582:	2a01      	cmp	r2, #1
    c584:	4628      	mov	r0, r5
    c586:	d004      	beq.n	c592 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c588:	f004 f925 	bl	107d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c58c:	69e1      	ldr	r1, [r4, #28]
    c58e:	4408      	add	r0, r1
    c590:	bd70      	pop	{r4, r5, r6, pc}
    c592:	f004 f93a 	bl	1080a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c596:	e7f9      	b.n	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c598:	f004 f928 	bl	107ec <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c59c:	e7f6      	b.n	c58c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c59e:	0000      	.short	0x0000
    c5a0:	20000f8c 	.word	0x20000f8c
    c5a4:	b510      	push	{r4, lr}
    c5a6:	2200      	movs	r2, #0
    c5a8:	2901      	cmp	r1, #1
    c5aa:	d008      	beq.n	c5be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c5ac:	2902      	cmp	r1, #2
    c5ae:	d004      	beq.n	c5ba <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c5b0:	f240 2163 	movw	r1, #611	; 0x263
    c5b4:	203e      	movs	r0, #62	; 0x3e
    c5b6:	f7f8 fb6b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c5be:	4905      	ldr	r1, [pc, #20]	; (c5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c5c0:	430a      	orrs	r2, r1
    c5c2:	4905      	ldr	r1, [pc, #20]	; (c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c5c4:	600a      	str	r2, [r1, #0]
    c5c6:	4905      	ldr	r1, [pc, #20]	; (c5dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c5c8:	4308      	orrs	r0, r1
    c5ca:	4903      	ldr	r1, [pc, #12]	; (c5d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c5cc:	1d09      	adds	r1, r1, #4
    c5ce:	6008      	str	r0, [r1, #0]
    c5d0:	bd10      	pop	{r4, pc}
    c5d2:	0000      	.short	0x0000
    c5d4:	00100108 	.word	0x00100108
    c5d8:	40001514 	.word	0x40001514
    c5dc:	02030000 	.word	0x02030000

0000c5e0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c5e0:	4901      	ldr	r1, [pc, #4]	; (c5e8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c5e2:	b2c0      	uxtb	r0, r0
    c5e4:	6008      	str	r0, [r1, #0]
    c5e6:	4770      	bx	lr
    c5e8:	4000150c 	.word	0x4000150c

0000c5ec <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c5ec:	b510      	push	{r4, lr}
    c5ee:	4907      	ldr	r1, [pc, #28]	; (c60c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c5f0:	2801      	cmp	r0, #1
    c5f2:	d005      	beq.n	c600 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c5f4:	2802      	cmp	r0, #2
    c5f6:	d005      	beq.n	c604 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c5f8:	218b      	movs	r1, #139	; 0x8b
    c5fa:	203f      	movs	r0, #63	; 0x3f
    c5fc:	f7f8 fb48 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c600:	2003      	movs	r0, #3
    c602:	e000      	b.n	c606 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c604:	2004      	movs	r0, #4
    c606:	6008      	str	r0, [r1, #0]
    c608:	bd10      	pop	{r4, pc}
    c60a:	0000      	.short	0x0000
    c60c:	40001510 	.word	0x40001510

0000c610 <strcmp>:
    c610:	f810 2b01 	ldrb.w	r2, [r0], #1
    c614:	f811 3b01 	ldrb.w	r3, [r1], #1
    c618:	2a01      	cmp	r2, #1
    c61a:	bf28      	it	cs
    c61c:	429a      	cmpcs	r2, r3
    c61e:	d0f7      	beq.n	c610 <strcmp>
    c620:	1ad0      	subs	r0, r2, r3
    c622:	4770      	bx	lr

0000c624 <strlen>:
    c624:	4603      	mov	r3, r0
    c626:	f813 2b01 	ldrb.w	r2, [r3], #1
    c62a:	2a00      	cmp	r2, #0
    c62c:	d1fb      	bne.n	c626 <strlen+0x2>
    c62e:	1a18      	subs	r0, r3, r0
    c630:	3801      	subs	r0, #1
    c632:	4770      	bx	lr

0000c634 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c634:	4770      	bx	lr
    c636:	2100      	movs	r1, #0
    c638:	7081      	strb	r1, [r0, #2]
    c63a:	7001      	strb	r1, [r0, #0]
    c63c:	7041      	strb	r1, [r0, #1]
    c63e:	4770      	bx	lr

0000c640 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c640:	b570      	push	{r4, r5, r6, lr}
    c642:	f7f4 fec9 	bl	13d8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c646:	4605      	mov	r5, r0
    c648:	2400      	movs	r4, #0
    c64a:	e006      	b.n	c65a <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c64c:	4620      	mov	r0, r4
    c64e:	f7f4 fec9 	bl	13e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c652:	f7ff fff0 	bl	c636 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c656:	1c64      	adds	r4, r4, #1
    c658:	b2e4      	uxtb	r4, r4
    c65a:	42ac      	cmp	r4, r5
    c65c:	d3f6      	bcc.n	c64c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c65e:	bd70      	pop	{r4, r5, r6, pc}

0000c660 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c660:	2000      	movs	r0, #0
    c662:	f7f7 bc8f 	b.w	3f84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c666:	b510      	push	{r4, lr}
    c668:	f7f7 f962 	bl	3930 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c670:	f000 b800 	b.w	c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c674 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c674:	0a41      	lsrs	r1, r0, #9
    c676:	f643 5209 	movw	r2, #15625	; 0x3d09
    c67a:	4351      	muls	r1, r2
    c67c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c680:	fb10 f002 	smulbb	r0, r0, r2
    c684:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c688:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c68c:	4770      	bx	lr

0000c68e <MPSL_IRQ_RADIO_Handler>:
    c68e:	f7f5 bf53 	b.w	2538 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c692:	2800      	cmp	r0, #0
    c694:	db09      	blt.n	c6aa <MPSL_IRQ_RADIO_Handler+0x1c>
    c696:	f000 021f 	and.w	r2, r0, #31
    c69a:	2101      	movs	r1, #1
    c69c:	4091      	lsls	r1, r2
    c69e:	0940      	lsrs	r0, r0, #5
    c6a0:	0080      	lsls	r0, r0, #2
    c6a2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c6a6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c6aa:	4770      	bx	lr
    c6ac:	2800      	cmp	r0, #0
    c6ae:	db0d      	blt.n	c6cc <MPSL_IRQ_RADIO_Handler+0x3e>
    c6b0:	f000 021f 	and.w	r2, r0, #31
    c6b4:	2101      	movs	r1, #1
    c6b6:	4091      	lsls	r1, r2
    c6b8:	0940      	lsrs	r0, r0, #5
    c6ba:	0080      	lsls	r0, r0, #2
    c6bc:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c6c0:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c6c4:	f3bf 8f4f 	dsb	sy
    c6c8:	f3bf 8f6f 	isb	sy
    c6cc:	4770      	bx	lr

0000c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c6ce:	b570      	push	{r4, r5, r6, lr}
    c6d0:	4602      	mov	r2, r0
    c6d2:	2000      	movs	r0, #0
    c6d4:	2900      	cmp	r1, #0
    c6d6:	d01d      	beq.n	c714 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c6d8:	fba2 0101 	umull	r0, r1, r2, r1
    c6dc:	0a40      	lsrs	r0, r0, #9
    c6de:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c6e2:	0a49      	lsrs	r1, r1, #9
    c6e4:	1c40      	adds	r0, r0, #1
    c6e6:	f141 0100 	adc.w	r1, r1, #0
    c6ea:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c6ee:	1883      	adds	r3, r0, r2
    c6f0:	f141 0100 	adc.w	r1, r1, #0
    c6f4:	1c5b      	adds	r3, r3, #1
    c6f6:	f141 0400 	adc.w	r4, r1, #0
    c6fa:	2100      	movs	r1, #0
    c6fc:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c700:	41a1      	sbcs	r1, r4
    c702:	d203      	bcs.n	c70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c704:	2171      	movs	r1, #113	; 0x71
    c706:	206d      	movs	r0, #109	; 0x6d
    c708:	f7f8 f816 	bl	4738 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c70c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c710:	fbb0 f0f2 	udiv	r0, r0, r2
    c714:	bd70      	pop	{r4, r5, r6, pc}
    c716:	5840      	ldr	r0, [r0, r1]
    c718:	2800      	cmp	r0, #0
    c71a:	d000      	beq.n	c71e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c71c:	2001      	movs	r0, #1
    c71e:	4770      	bx	lr
    c720:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c724:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c728:	f002 0201 	and.w	r2, r2, #1
    c72c:	03c0      	lsls	r0, r0, #15
    c72e:	d503      	bpl.n	c738 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c730:	428a      	cmp	r2, r1
    c732:	d101      	bne.n	c738 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c734:	2001      	movs	r0, #1
    c736:	4770      	bx	lr
    c738:	2000      	movs	r0, #0
    c73a:	4770      	bx	lr

0000c73c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c73c:	b510      	push	{r4, lr}
    c73e:	2101      	movs	r1, #1
    c740:	0788      	lsls	r0, r1, #30
    c742:	f7f7 ffa3 	bl	468c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c746:	2800      	cmp	r0, #0
    c748:	d000      	beq.n	c74c <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c74a:	2001      	movs	r0, #1
    c74c:	bd10      	pop	{r4, pc}

0000c74e <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c74e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c752:	2101      	movs	r1, #1
    c754:	6001      	str	r1, [r0, #0]
    c756:	4770      	bx	lr

0000c758 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c758:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c75c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c760:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c764:	f002 0203 	and.w	r2, r2, #3
    c768:	03c9      	lsls	r1, r1, #15
    c76a:	d503      	bpl.n	c774 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c76c:	4282      	cmp	r2, r0
    c76e:	d101      	bne.n	c774 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c770:	2001      	movs	r0, #1
    c772:	4770      	bx	lr
    c774:	2000      	movs	r0, #0
    c776:	4770      	bx	lr

0000c778 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c778:	b510      	push	{r4, lr}
    c77a:	2100      	movs	r1, #0
    c77c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c780:	f7f7 ff84 	bl	468c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c784:	2800      	cmp	r0, #0
    c786:	d000      	beq.n	c78a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c788:	2001      	movs	r0, #1
    c78a:	bd10      	pop	{r4, pc}
    c78c:	2800      	cmp	r0, #0
    c78e:	db09      	blt.n	c7a4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c790:	f000 021f 	and.w	r2, r0, #31
    c794:	2101      	movs	r1, #1
    c796:	4091      	lsls	r1, r2
    c798:	0940      	lsrs	r0, r0, #5
    c79a:	0080      	lsls	r0, r0, #2
    c79c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c7a0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c7a4:	4770      	bx	lr
    c7a6:	2800      	cmp	r0, #0
    c7a8:	db0d      	blt.n	c7c6 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c7aa:	f000 021f 	and.w	r2, r0, #31
    c7ae:	2101      	movs	r1, #1
    c7b0:	4091      	lsls	r1, r2
    c7b2:	0940      	lsrs	r0, r0, #5
    c7b4:	0080      	lsls	r0, r0, #2
    c7b6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c7ba:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c7be:	f3bf 8f4f 	dsb	sy
    c7c2:	f3bf 8f6f 	isb	sy
    c7c6:	4770      	bx	lr
    c7c8:	00021000 	.word	0x00021000
    c7cc:	000000fa 	.word	0x000000fa
    c7d0:	24625723 	.word	0x24625723
    c7d4:	578f3123 	.word	0x578f3123
    c7d8:	2fd1ee74 	.word	0x2fd1ee74
    c7dc:	4594c088 	.word	0x4594c088
    c7e0:	36f9a2f7 	.word	0x36f9a2f7
    c7e4:	2800      	cmp	r0, #0
    c7e6:	db09      	blt.n	c7fc <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c7e8:	f000 021f 	and.w	r2, r0, #31
    c7ec:	2101      	movs	r1, #1
    c7ee:	4091      	lsls	r1, r2
    c7f0:	0940      	lsrs	r0, r0, #5
    c7f2:	0080      	lsls	r0, r0, #2
    c7f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c7f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c7fc:	4770      	bx	lr

0000c7fe <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c7fe:	f3ef 8110 	mrs	r1, PRIMASK
    c802:	b672      	cpsid	i
    c804:	7802      	ldrb	r2, [r0, #0]
    c806:	2a01      	cmp	r2, #1
    c808:	d001      	beq.n	c80e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c80a:	2201      	movs	r2, #1
    c80c:	e000      	b.n	c810 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c80e:	2200      	movs	r2, #0
    c810:	2301      	movs	r3, #1
    c812:	7003      	strb	r3, [r0, #0]
    c814:	b901      	cbnz	r1, c818 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c816:	b662      	cpsie	i
    c818:	b10a      	cbz	r2, c81e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c81a:	2000      	movs	r0, #0
    c81c:	4770      	bx	lr
    c81e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c822:	4770      	bx	lr

0000c824 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c824:	2100      	movs	r1, #0
    c826:	7001      	strb	r1, [r0, #0]
    c828:	4608      	mov	r0, r1
    c82a:	4770      	bx	lr

0000c82c <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c82c:	f3ef 8110 	mrs	r1, PRIMASK
    c830:	b672      	cpsid	i
    c832:	2200      	movs	r2, #0
    c834:	7002      	strb	r2, [r0, #0]
    c836:	b901      	cbnz	r1, c83a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c838:	b662      	cpsie	i
    c83a:	2000      	movs	r0, #0
    c83c:	4770      	bx	lr

0000c83e <mpsl_low_priority_process>:
    c83e:	f7f8 b867 	b.w	4910 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c842 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c842:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c846:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c84a:	280f      	cmp	r0, #15
    c84c:	d001      	beq.n	c852 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c84e:	2000      	movs	r0, #0
    c850:	4770      	bx	lr
    c852:	2001      	movs	r0, #1
    c854:	4770      	bx	lr

0000c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c856:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c85a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c85e:	280a      	cmp	r0, #10
    c860:	d001      	beq.n	c866 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c862:	2000      	movs	r0, #0
    c864:	4770      	bx	lr
    c866:	2001      	movs	r0, #1
    c868:	4770      	bx	lr

0000c86a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c86a:	b500      	push	{lr}
    c86c:	f7ff fff3 	bl	c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c870:	b120      	cbz	r0, c87c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c872:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c876:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c87a:	b108      	cbz	r0, c880 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c87c:	2000      	movs	r0, #0
    c87e:	bd00      	pop	{pc}
    c880:	2001      	movs	r0, #1
    c882:	bd00      	pop	{pc}

0000c884 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c884:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c888:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c88c:	280e      	cmp	r0, #14
    c88e:	d001      	beq.n	c894 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c890:	2000      	movs	r0, #0
    c892:	4770      	bx	lr
    c894:	2001      	movs	r0, #1
    c896:	4770      	bx	lr

0000c898 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c898:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c89c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c8a0:	2810      	cmp	r0, #16
    c8a2:	d001      	beq.n	c8a8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c8a4:	2000      	movs	r0, #0
    c8a6:	4770      	bx	lr
    c8a8:	2001      	movs	r0, #1
    c8aa:	4770      	bx	lr

0000c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c8ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8b0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c8b4:	2806      	cmp	r0, #6
    c8b6:	d003      	beq.n	c8c0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c8b8:	1c40      	adds	r0, r0, #1
    c8ba:	d001      	beq.n	c8c0 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c8bc:	2000      	movs	r0, #0
    c8be:	4770      	bx	lr
    c8c0:	2001      	movs	r0, #1
    c8c2:	4770      	bx	lr

0000c8c4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c8c4:	b500      	push	{lr}
    c8c6:	f7ff fff1 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8ca:	b148      	cbz	r0, c8e0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8d0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c8d4:	2806      	cmp	r0, #6
    c8d6:	d303      	bcc.n	c8e0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8d8:	1c40      	adds	r0, r0, #1
    c8da:	d001      	beq.n	c8e0 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c8dc:	2001      	movs	r0, #1
    c8de:	bd00      	pop	{pc}
    c8e0:	2000      	movs	r0, #0
    c8e2:	bd00      	pop	{pc}

0000c8e4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c8e4:	b500      	push	{lr}
    c8e6:	f7ff ffe1 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8ea:	b138      	cbz	r0, c8fc <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c8ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8f0:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c8f4:	2806      	cmp	r0, #6
    c8f6:	d303      	bcc.n	c900 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c8f8:	1c40      	adds	r0, r0, #1
    c8fa:	d001      	beq.n	c900 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c8fc:	2000      	movs	r0, #0
    c8fe:	bd00      	pop	{pc}
    c900:	2001      	movs	r0, #1
    c902:	bd00      	pop	{pc}

0000c904 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c904:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c908:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c90c:	280d      	cmp	r0, #13
    c90e:	d001      	beq.n	c914 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c910:	2000      	movs	r0, #0
    c912:	4770      	bx	lr
    c914:	2001      	movs	r0, #1
    c916:	4770      	bx	lr

0000c918 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c918:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c91c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c920:	2808      	cmp	r0, #8
    c922:	d001      	beq.n	c928 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c924:	2000      	movs	r0, #0
    c926:	4770      	bx	lr
    c928:	2001      	movs	r0, #1
    c92a:	4770      	bx	lr

0000c92c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c92c:	2a00      	cmp	r2, #0
    c92e:	bf04      	itt	eq
    c930:	2000      	moveq	r0, #0
    c932:	4770      	bxeq	lr
    c934:	1e52      	subs	r2, r2, #1
    c936:	d007      	beq.n	c948 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c938:	7803      	ldrb	r3, [r0, #0]
    c93a:	f891 c000 	ldrb.w	ip, [r1]
    c93e:	4563      	cmp	r3, ip
    c940:	bf04      	itt	eq
    c942:	1c40      	addeq	r0, r0, #1
    c944:	1c49      	addeq	r1, r1, #1
    c946:	d0f5      	beq.n	c934 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c948:	7800      	ldrb	r0, [r0, #0]
    c94a:	7809      	ldrb	r1, [r1, #0]
    c94c:	1a40      	subs	r0, r0, r1
    c94e:	4770      	bx	lr

0000c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c950:	b4f0      	push	{r4, r5, r6, r7}
    c952:	ea80 0c01 	eor.w	ip, r0, r1
    c956:	4603      	mov	r3, r0
    c958:	f01c 0f03 	tst.w	ip, #3
    c95c:	d13c      	bne.n	c9d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c95e:	f013 0f03 	tst.w	r3, #3
    c962:	d00b      	beq.n	c97c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c964:	2a00      	cmp	r2, #0
    c966:	bf04      	itt	eq
    c968:	bcf0      	popeq	{r4, r5, r6, r7}
    c96a:	4770      	bxeq	lr
    c96c:	f811 cb01 	ldrb.w	ip, [r1], #1
    c970:	f803 cb01 	strb.w	ip, [r3], #1
    c974:	1e52      	subs	r2, r2, #1
    c976:	f013 0f03 	tst.w	r3, #3
    c97a:	d1f3      	bne.n	c964 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c97c:	2a03      	cmp	r2, #3
    c97e:	d94f      	bls.n	ca20 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c980:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c984:	d24c      	bcs.n	ca20 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c986:	f1c2 0c00 	rsb	ip, r2, #0
    c98a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c98e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c992:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c996:	f1cc 0c00 	rsb	ip, ip, #0
    c99a:	f1bc 0f00 	cmp.w	ip, #0
    c99e:	dd1b      	ble.n	c9d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c9a0:	1f0d      	subs	r5, r1, #4
    c9a2:	1f1c      	subs	r4, r3, #4
    c9a4:	f01c 0f01 	tst.w	ip, #1
    c9a8:	d003      	beq.n	c9b2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c9aa:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c9ae:	f844 6f04 	str.w	r6, [r4, #4]!
    c9b2:	ea5f 066c 	movs.w	r6, ip, asr #1
    c9b6:	d007      	beq.n	c9c8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c9b8:	686f      	ldr	r7, [r5, #4]
    c9ba:	6067      	str	r7, [r4, #4]
    c9bc:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c9c0:	f844 7f08 	str.w	r7, [r4, #8]!
    c9c4:	1e76      	subs	r6, r6, #1
    c9c6:	d1f7      	bne.n	c9b8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c9c8:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c9cc:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c9d0:	f1cc 0c00 	rsb	ip, ip, #0
    c9d4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c9d8:	2a00      	cmp	r2, #0
    c9da:	bf04      	itt	eq
    c9dc:	bcf0      	popeq	{r4, r5, r6, r7}
    c9de:	4770      	bxeq	lr
    c9e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c9e4:	d226      	bcs.n	ca34 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c9e6:	2a00      	cmp	r2, #0
    c9e8:	bfdc      	itt	le
    c9ea:	bcf0      	pople	{r4, r5, r6, r7}
    c9ec:	4770      	bxle	lr
    c9ee:	1e49      	subs	r1, r1, #1
    c9f0:	1e5b      	subs	r3, r3, #1
    c9f2:	f012 0f01 	tst.w	r2, #1
    c9f6:	d003      	beq.n	ca00 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c9f8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c9fc:	f803 cf01 	strb.w	ip, [r3, #1]!
    ca00:	1052      	asrs	r2, r2, #1
    ca02:	bf04      	itt	eq
    ca04:	bcf0      	popeq	{r4, r5, r6, r7}
    ca06:	4770      	bxeq	lr
    ca08:	f891 c001 	ldrb.w	ip, [r1, #1]
    ca0c:	f883 c001 	strb.w	ip, [r3, #1]
    ca10:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    ca14:	f803 cf02 	strb.w	ip, [r3, #2]!
    ca18:	1e52      	subs	r2, r2, #1
    ca1a:	d1f5      	bne.n	ca08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    ca1c:	bcf0      	pop	{r4, r5, r6, r7}
    ca1e:	4770      	bx	lr
    ca20:	2a04      	cmp	r2, #4
    ca22:	d3d9      	bcc.n	c9d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ca24:	f851 cb04 	ldr.w	ip, [r1], #4
    ca28:	1f12      	subs	r2, r2, #4
    ca2a:	f843 cb04 	str.w	ip, [r3], #4
    ca2e:	2a04      	cmp	r2, #4
    ca30:	d2f8      	bcs.n	ca24 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ca32:	e7d1      	b.n	c9d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ca34:	f811 cb01 	ldrb.w	ip, [r1], #1
    ca38:	f803 cb01 	strb.w	ip, [r3], #1
    ca3c:	1e52      	subs	r2, r2, #1
    ca3e:	d1f9      	bne.n	ca34 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ca40:	bcf0      	pop	{r4, r5, r6, r7}
    ca42:	4770      	bx	lr

0000ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ca44:	b470      	push	{r4, r5, r6}
    ca46:	4603      	mov	r3, r0
    ca48:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ca4c:	f010 0f03 	tst.w	r0, #3
    ca50:	d009      	beq.n	ca66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ca52:	2a00      	cmp	r2, #0
    ca54:	bf04      	itt	eq
    ca56:	bc70      	popeq	{r4, r5, r6}
    ca58:	4770      	bxeq	lr
    ca5a:	f803 cb01 	strb.w	ip, [r3], #1
    ca5e:	1e52      	subs	r2, r2, #1
    ca60:	f013 0f03 	tst.w	r3, #3
    ca64:	d1f5      	bne.n	ca52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ca66:	b2c9      	uxtb	r1, r1
    ca68:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ca6c:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ca70:	2a03      	cmp	r2, #3
    ca72:	d939      	bls.n	cae8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ca74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ca78:	d236      	bcs.n	cae8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ca7a:	4251      	negs	r1, r2
    ca7c:	17cc      	asrs	r4, r1, #31
    ca7e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ca82:	1089      	asrs	r1, r1, #2
    ca84:	424e      	negs	r6, r1
    ca86:	2e00      	cmp	r6, #0
    ca88:	dd11      	ble.n	caae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ca8a:	1f19      	subs	r1, r3, #4
    ca8c:	f016 0f01 	tst.w	r6, #1
    ca90:	bf18      	it	ne
    ca92:	f841 5f04 	strne.w	r5, [r1, #4]!
    ca96:	1074      	asrs	r4, r6, #1
    ca98:	d004      	beq.n	caa4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ca9a:	604d      	str	r5, [r1, #4]
    ca9c:	f841 5f08 	str.w	r5, [r1, #8]!
    caa0:	1e64      	subs	r4, r4, #1
    caa2:	d1fa      	bne.n	ca9a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    caa4:	4271      	negs	r1, r6
    caa6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    caaa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    caae:	2a00      	cmp	r2, #0
    cab0:	bf04      	itt	eq
    cab2:	bc70      	popeq	{r4, r5, r6}
    cab4:	4770      	bxeq	lr
    cab6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    caba:	d21d      	bcs.n	caf8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cabc:	2a00      	cmp	r2, #0
    cabe:	bfdc      	itt	le
    cac0:	bc70      	pople	{r4, r5, r6}
    cac2:	4770      	bxle	lr
    cac4:	1e59      	subs	r1, r3, #1
    cac6:	f012 0f01 	tst.w	r2, #1
    caca:	bf18      	it	ne
    cacc:	f801 cf01 	strbne.w	ip, [r1, #1]!
    cad0:	1052      	asrs	r2, r2, #1
    cad2:	bf04      	itt	eq
    cad4:	bc70      	popeq	{r4, r5, r6}
    cad6:	4770      	bxeq	lr
    cad8:	f881 c001 	strb.w	ip, [r1, #1]
    cadc:	f801 cf02 	strb.w	ip, [r1, #2]!
    cae0:	1e52      	subs	r2, r2, #1
    cae2:	d1f9      	bne.n	cad8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    cae4:	bc70      	pop	{r4, r5, r6}
    cae6:	4770      	bx	lr
    cae8:	2a04      	cmp	r2, #4
    caea:	d3e0      	bcc.n	caae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    caec:	1f12      	subs	r2, r2, #4
    caee:	f843 5b04 	str.w	r5, [r3], #4
    caf2:	2a04      	cmp	r2, #4
    caf4:	d2fa      	bcs.n	caec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    caf6:	e7da      	b.n	caae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    caf8:	f803 cb01 	strb.w	ip, [r3], #1
    cafc:	1e52      	subs	r2, r2, #1
    cafe:	d1fb      	bne.n	caf8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    cb00:	bc70      	pop	{r4, r5, r6}
    cb02:	4770      	bx	lr
    cb04:	f04f 30ff 	mov.w	r0, #4294967295
    cb08:	4770      	bx	lr
    cb0a:	2000      	movs	r0, #0
    cb0c:	4770      	bx	lr
    cb0e:	2000      	movs	r0, #0
    cb10:	4770      	bx	lr
    cb12:	f04f 30ff 	mov.w	r0, #4294967295
    cb16:	4770      	bx	lr
    cb18:	4770      	bx	lr
    cb1a:	4770      	bx	lr
    cb1c:	2000      	movs	r0, #0
    cb1e:	4770      	bx	lr
    cb20:	f04f 30ff 	mov.w	r0, #4294967295
    cb24:	4770      	bx	lr
    cb26:	f04f 30ff 	mov.w	r0, #4294967295
    cb2a:	4770      	bx	lr
    cb2c:	2100      	movs	r1, #0
    cb2e:	7001      	strb	r1, [r0, #0]
    cb30:	4770      	bx	lr
    cb32:	f04f 30ff 	mov.w	r0, #4294967295
    cb36:	4770      	bx	lr
    cb38:	f04f 30ff 	mov.w	r0, #4294967295
    cb3c:	4770      	bx	lr
    cb3e:	2000      	movs	r0, #0
    cb40:	4770      	bx	lr
    cb42:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    cb46:	4605      	mov	r5, r0
    cb48:	f100 0003 	add.w	r0, r0, #3
    cb4c:	f020 0003 	bic.w	r0, r0, #3
    cb50:	460c      	mov	r4, r1
    cb52:	9000      	str	r0, [sp, #0]
    cb54:	7849      	ldrb	r1, [r1, #1]
    cb56:	f88d 1004 	strb.w	r1, [sp, #4]
    cb5a:	78a1      	ldrb	r1, [r4, #2]
    cb5c:	0016      	movs	r6, r2
    cb5e:	f88d 1005 	strb.w	r1, [sp, #5]
    cb62:	d000      	beq.n	cb66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    cb64:	2000      	movs	r0, #0
    cb66:	a901      	add	r1, sp, #4
    cb68:	f7f8 fa8a 	bl	5080 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cb6c:	9900      	ldr	r1, [sp, #0]
    cb6e:	4408      	add	r0, r1
    cb70:	9000      	str	r0, [sp, #0]
    cb72:	78a1      	ldrb	r1, [r4, #2]
    cb74:	b141      	cbz	r1, cb88 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    cb76:	8a63      	ldrh	r3, [r4, #18]
    cb78:	78e2      	ldrb	r2, [r4, #3]
    cb7a:	b106      	cbz	r6, cb7e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    cb7c:	2000      	movs	r0, #0
    cb7e:	f7f8 fd0f 	bl	55a0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cb82:	9900      	ldr	r1, [sp, #0]
    cb84:	4408      	add	r0, r1
    cb86:	9000      	str	r0, [sp, #0]
    cb88:	4632      	mov	r2, r6
    cb8a:	4621      	mov	r1, r4
    cb8c:	4668      	mov	r0, sp
    cb8e:	f000 f808 	bl	cba2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    cb92:	9800      	ldr	r0, [sp, #0]
    cb94:	1dc0      	adds	r0, r0, #7
    cb96:	f020 0007 	bic.w	r0, r0, #7
    cb9a:	9000      	str	r0, [sp, #0]
    cb9c:	1b40      	subs	r0, r0, r5
    cb9e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    cba2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cba6:	4606      	mov	r6, r0
    cba8:	460c      	mov	r4, r1
    cbaa:	7808      	ldrb	r0, [r1, #0]
    cbac:	7849      	ldrb	r1, [r1, #1]
    cbae:	2700      	movs	r7, #0
    cbb0:	4408      	add	r0, r1
    cbb2:	4691      	mov	r9, r2
    cbb4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    cbb8:	463d      	mov	r5, r7
    cbba:	e00e      	b.n	cbda <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    cbbc:	7a23      	ldrb	r3, [r4, #8]
    cbbe:	2b02      	cmp	r3, #2
    cbc0:	d200      	bcs.n	cbc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    cbc2:	2302      	movs	r3, #2
    cbc4:	79e2      	ldrb	r2, [r4, #7]
    cbc6:	2a03      	cmp	r2, #3
    cbc8:	d200      	bcs.n	cbcc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    cbca:	2203      	movs	r2, #3
    cbcc:	79a1      	ldrb	r1, [r4, #6]
    cbce:	7960      	ldrb	r0, [r4, #5]
    cbd0:	f000 fedf 	bl	d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cbd4:	1c6d      	adds	r5, r5, #1
    cbd6:	4407      	add	r7, r0
    cbd8:	b2ed      	uxtb	r5, r5
    cbda:	4545      	cmp	r5, r8
    cbdc:	d3ee      	bcc.n	cbbc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    cbde:	6830      	ldr	r0, [r6, #0]
    cbe0:	1cc0      	adds	r0, r0, #3
    cbe2:	f020 0003 	bic.w	r0, r0, #3
    cbe6:	6030      	str	r0, [r6, #0]
    cbe8:	f1b9 0f00 	cmp.w	r9, #0
    cbec:	d000      	beq.n	cbf0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    cbee:	2000      	movs	r0, #0
    cbf0:	463a      	mov	r2, r7
    cbf2:	4641      	mov	r1, r8
    cbf4:	f7f8 fc1e 	bl	5434 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cbf8:	6831      	ldr	r1, [r6, #0]
    cbfa:	4408      	add	r0, r1
    cbfc:	6030      	str	r0, [r6, #0]
    cbfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000cc02 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    cc02:	2000      	movs	r0, #0
    cc04:	4770      	bx	lr

0000cc06 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    cc06:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    cc08:	4604      	mov	r4, r0
    cc0a:	1d01      	adds	r1, r0, #4
    cc0c:	4668      	mov	r0, sp
    cc0e:	f7fa f8e7 	bl	6de0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    cc12:	2800      	cmp	r0, #0
    cc14:	d004      	beq.n	cc20 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    cc16:	4669      	mov	r1, sp
    cc18:	4620      	mov	r0, r4
    cc1a:	f000 f848 	bl	ccae <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    cc1e:	2001      	movs	r0, #1
    cc20:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000cc22 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cc22:	b50e      	push	{r1, r2, r3, lr}
    cc24:	4601      	mov	r1, r0
    cc26:	4668      	mov	r0, sp
    cc28:	f000 f827 	bl	cc7a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cc2c:	4668      	mov	r0, sp
    cc2e:	f001 fc76 	bl	e51e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cc32:	bd0e      	pop	{r1, r2, r3, pc}

0000cc34 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    cc34:	b510      	push	{r4, lr}
    cc36:	4604      	mov	r4, r0
    cc38:	4620      	mov	r0, r4
    cc3a:	f7f8 f90f 	bl	4e5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    cc3e:	2800      	cmp	r0, #0
    cc40:	d006      	beq.n	cc50 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    cc42:	78a1      	ldrb	r1, [r4, #2]
    cc44:	7820      	ldrb	r0, [r4, #0]
    cc46:	f000 f804 	bl	cc52 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    cc4a:	2800      	cmp	r0, #0
    cc4c:	d0f4      	beq.n	cc38 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    cc4e:	2001      	movs	r0, #1
    cc50:	bd10      	pop	{r4, pc}
    cc52:	b570      	push	{r4, r5, r6, lr}
    cc54:	460c      	mov	r4, r1
    cc56:	4605      	mov	r5, r0
    cc58:	f7f8 f972 	bl	4f40 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cc5c:	2800      	cmp	r0, #0
    cc5e:	d002      	beq.n	cc66 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    cc60:	2d3e      	cmp	r5, #62	; 0x3e
    cc62:	d001      	beq.n	cc68 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    cc64:	2001      	movs	r0, #1
    cc66:	bd70      	pop	{r4, r5, r6, pc}
    cc68:	2c12      	cmp	r4, #18
    cc6a:	d004      	beq.n	cc76 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    cc6c:	4620      	mov	r0, r4
    cc6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cc72:	f7f8 b981 	b.w	4f78 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cc76:	2000      	movs	r0, #0
    cc78:	bd70      	pop	{r4, r5, r6, pc}

0000cc7a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cc7a:	880a      	ldrh	r2, [r1, #0]
    cc7c:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cc80:	8002      	strh	r2, [r0, #0]
    cc82:	884a      	ldrh	r2, [r1, #2]
    cc84:	8042      	strh	r2, [r0, #2]
    cc86:	784a      	ldrb	r2, [r1, #1]
    cc88:	0993      	lsrs	r3, r2, #6
    cc8a:	2200      	movs	r2, #0
    cc8c:	7142      	strb	r2, [r0, #5]
    cc8e:	784b      	ldrb	r3, [r1, #1]
    cc90:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cc94:	b11b      	cbz	r3, cc9e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cc96:	2b01      	cmp	r3, #1
    cc98:	d005      	beq.n	cca6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cc9a:	2b02      	cmp	r3, #2
    cc9c:	d005      	beq.n	ccaa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cc9e:	7102      	strb	r2, [r0, #4]
    cca0:	1d09      	adds	r1, r1, #4
    cca2:	6081      	str	r1, [r0, #8]
    cca4:	4770      	bx	lr
    cca6:	2201      	movs	r2, #1
    cca8:	e7f9      	b.n	cc9e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ccaa:	2202      	movs	r2, #2
    ccac:	e7f7      	b.n	cc9e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ccae <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ccae:	b510      	push	{r4, lr}
    ccb0:	460c      	mov	r4, r1
    ccb2:	7809      	ldrb	r1, [r1, #0]
    ccb4:	7001      	strb	r1, [r0, #0]
    ccb6:	7841      	ldrb	r1, [r0, #1]
    ccb8:	f021 010f 	bic.w	r1, r1, #15
    ccbc:	7041      	strb	r1, [r0, #1]
    ccbe:	8822      	ldrh	r2, [r4, #0]
    ccc0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ccc4:	4311      	orrs	r1, r2
    ccc6:	7041      	strb	r1, [r0, #1]
    ccc8:	78a2      	ldrb	r2, [r4, #2]
    ccca:	7082      	strb	r2, [r0, #2]
    cccc:	8862      	ldrh	r2, [r4, #2]
    ccce:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    ccd2:	0a12      	lsrs	r2, r2, #8
    ccd4:	70c2      	strb	r2, [r0, #3]
    ccd6:	7041      	strb	r1, [r0, #1]
    ccd8:	7922      	ldrb	r2, [r4, #4]
    ccda:	f002 0203 	and.w	r2, r2, #3
    ccde:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    cce2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    cce6:	7041      	strb	r1, [r0, #1]
    cce8:	7962      	ldrb	r2, [r4, #5]
    ccea:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ccee:	7041      	strb	r1, [r0, #1]
    ccf0:	68a1      	ldr	r1, [r4, #8]
    ccf2:	1d02      	adds	r2, r0, #4
    ccf4:	4291      	cmp	r1, r2
    ccf6:	d006      	beq.n	cd06 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    ccf8:	8862      	ldrh	r2, [r4, #2]
    ccfa:	2afb      	cmp	r2, #251	; 0xfb
    ccfc:	d300      	bcc.n	cd00 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    ccfe:	22fb      	movs	r2, #251	; 0xfb
    cd00:	1d00      	adds	r0, r0, #4
    cd02:	f7ff fe25 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd06:	78a0      	ldrb	r0, [r4, #2]
    cd08:	1d00      	adds	r0, r0, #4
    cd0a:	b2c0      	uxtb	r0, r0
    cd0c:	bd10      	pop	{r4, pc}

0000cd0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    cd0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd12:	4604      	mov	r4, r0
    cd14:	780f      	ldrb	r7, [r1, #0]
    cd16:	2000      	movs	r0, #0
    cd18:	250c      	movs	r5, #12
    cd1a:	2605      	movs	r6, #5
    cd1c:	223e      	movs	r2, #62	; 0x3e
    cd1e:	23ff      	movs	r3, #255	; 0xff
    cd20:	2f1b      	cmp	r7, #27
    cd22:	d27d      	bcs.n	ce20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    cd24:	e8df f007 	tbb	[pc, r7]
    cd28:	27250eea 	.word	0x27250eea
    cd2c:	816d632d 	.word	0x816d632d
    cd30:	bcb1af9b 	.word	0xbcb1af9b
    cd34:	eaf4e2c7 	.word	0xeaf4e2c7
    cd38:	d5d231ea 	.word	0xd5d231ea
    cd3c:	eff0f1fd 	.word	0xeff0f1fd
    cd40:	00ecedee 	.word	0x00ecedee
    cd44:	7025      	strb	r5, [r4, #0]
    cd46:	7908      	ldrb	r0, [r1, #4]
    cd48:	70a0      	strb	r0, [r4, #2]
    cd4a:	7948      	ldrb	r0, [r1, #5]
    cd4c:	70e0      	strb	r0, [r4, #3]
    cd4e:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cd52:	0a00      	lsrs	r0, r0, #8
    cd54:	7120      	strb	r0, [r4, #4]
    cd56:	79c8      	ldrb	r0, [r1, #7]
    cd58:	7160      	strb	r0, [r4, #5]
    cd5a:	7a08      	ldrb	r0, [r1, #8]
    cd5c:	71a0      	strb	r0, [r4, #6]
    cd5e:	8908      	ldrh	r0, [r1, #8]
    cd60:	0a00      	lsrs	r0, r0, #8
    cd62:	71e0      	strb	r0, [r4, #7]
    cd64:	7a88      	ldrb	r0, [r1, #10]
    cd66:	7220      	strb	r0, [r4, #8]
    cd68:	8948      	ldrh	r0, [r1, #10]
    cd6a:	0a00      	lsrs	r0, r0, #8
    cd6c:	7260      	strb	r0, [r4, #9]
    cd6e:	2008      	movs	r0, #8
    cd70:	e0c2      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd72:	2010      	movs	r0, #16
    cd74:	e000      	b.n	cd78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    cd76:	201a      	movs	r0, #26
    cd78:	7020      	strb	r0, [r4, #0]
    cd7a:	7908      	ldrb	r0, [r1, #4]
    cd7c:	70a0      	strb	r0, [r4, #2]
    cd7e:	2001      	movs	r0, #1
    cd80:	e0ba      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cd82:	4620      	mov	r0, r4
    cd84:	f000 f946 	bl	d014 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    cd88:	e0b4      	b.n	cef4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    cd8a:	7022      	strb	r2, [r4, #0]
    cd8c:	200a      	movs	r0, #10
    cd8e:	70a0      	strb	r0, [r4, #2]
    cd90:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    cd94:	70e0      	strb	r0, [r4, #3]
    cd96:	7888      	ldrb	r0, [r1, #2]
    cd98:	7120      	strb	r0, [r4, #4]
    cd9a:	8848      	ldrh	r0, [r1, #2]
    cd9c:	0a00      	lsrs	r0, r0, #8
    cd9e:	7160      	strb	r0, [r4, #5]
    cda0:	7908      	ldrb	r0, [r1, #4]
    cda2:	71a0      	strb	r0, [r4, #6]
    cda4:	7948      	ldrb	r0, [r1, #5]
    cda6:	71e0      	strb	r0, [r4, #7]
    cda8:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cdac:	60a0      	str	r0, [r4, #8]
    cdae:	8948      	ldrh	r0, [r1, #10]
    cdb0:	81a0      	strh	r0, [r4, #12]
    cdb2:	68c8      	ldr	r0, [r1, #12]
    cdb4:	f8c4 000e 	str.w	r0, [r4, #14]
    cdb8:	8a08      	ldrh	r0, [r1, #16]
    cdba:	8260      	strh	r0, [r4, #18]
    cdbc:	f8d1 0012 	ldr.w	r0, [r1, #18]
    cdc0:	6160      	str	r0, [r4, #20]
    cdc2:	8ac8      	ldrh	r0, [r1, #22]
    cdc4:	8320      	strh	r0, [r4, #24]
    cdc6:	7e08      	ldrb	r0, [r1, #24]
    cdc8:	76a0      	strb	r0, [r4, #26]
    cdca:	8b08      	ldrh	r0, [r1, #24]
    cdcc:	0a00      	lsrs	r0, r0, #8
    cdce:	76e0      	strb	r0, [r4, #27]
    cdd0:	7e88      	ldrb	r0, [r1, #26]
    cdd2:	7720      	strb	r0, [r4, #28]
    cdd4:	8b48      	ldrh	r0, [r1, #26]
    cdd6:	0a00      	lsrs	r0, r0, #8
    cdd8:	7760      	strb	r0, [r4, #29]
    cdda:	7f08      	ldrb	r0, [r1, #28]
    cddc:	77a0      	strb	r0, [r4, #30]
    cdde:	8b88      	ldrh	r0, [r1, #28]
    cde0:	0a00      	lsrs	r0, r0, #8
    cde2:	77e0      	strb	r0, [r4, #31]
    cde4:	7f88      	ldrb	r0, [r1, #30]
    cde6:	f884 0020 	strb.w	r0, [r4, #32]
    cdea:	201f      	movs	r0, #31
    cdec:	e084      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cdee:	7022      	strb	r2, [r4, #0]
    cdf0:	2014      	movs	r0, #20
    cdf2:	70a0      	strb	r0, [r4, #2]
    cdf4:	7908      	ldrb	r0, [r1, #4]
    cdf6:	70e0      	strb	r0, [r4, #3]
    cdf8:	8888      	ldrh	r0, [r1, #4]
    cdfa:	0a00      	lsrs	r0, r0, #8
    cdfc:	7120      	strb	r0, [r4, #4]
    cdfe:	7988      	ldrb	r0, [r1, #6]
    ce00:	e0a7      	b.n	cf52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ce02:	7022      	strb	r2, [r4, #0]
    ce04:	2004      	movs	r0, #4
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7908      	ldrb	r0, [r1, #4]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	7988      	ldrb	r0, [r1, #6]
    ce0e:	7120      	strb	r0, [r4, #4]
    ce10:	88c8      	ldrh	r0, [r1, #6]
    ce12:	0a00      	lsrs	r0, r0, #8
    ce14:	7160      	strb	r0, [r4, #5]
    ce16:	6888      	ldr	r0, [r1, #8]
    ce18:	f8c4 0006 	str.w	r0, [r4, #6]
    ce1c:	68c8      	ldr	r0, [r1, #12]
    ce1e:	e000      	b.n	ce22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ce20:	e06c      	b.n	cefc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    ce22:	f8c4 000a 	str.w	r0, [r4, #10]
    ce26:	200c      	movs	r0, #12
    ce28:	e066      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce2a:	7022      	strb	r2, [r4, #0]
    ce2c:	2003      	movs	r0, #3
    ce2e:	70a0      	strb	r0, [r4, #2]
    ce30:	7908      	ldrb	r0, [r1, #4]
    ce32:	70e0      	strb	r0, [r4, #3]
    ce34:	7988      	ldrb	r0, [r1, #6]
    ce36:	7120      	strb	r0, [r4, #4]
    ce38:	88c8      	ldrh	r0, [r1, #6]
    ce3a:	0a00      	lsrs	r0, r0, #8
    ce3c:	7160      	strb	r0, [r4, #5]
    ce3e:	7a08      	ldrb	r0, [r1, #8]
    ce40:	71a0      	strb	r0, [r4, #6]
    ce42:	8908      	ldrh	r0, [r1, #8]
    ce44:	0a00      	lsrs	r0, r0, #8
    ce46:	71e0      	strb	r0, [r4, #7]
    ce48:	7a88      	ldrb	r0, [r1, #10]
    ce4a:	7220      	strb	r0, [r4, #8]
    ce4c:	8948      	ldrh	r0, [r1, #10]
    ce4e:	0a00      	lsrs	r0, r0, #8
    ce50:	7260      	strb	r0, [r4, #9]
    ce52:	7b08      	ldrb	r0, [r1, #12]
    ce54:	72a0      	strb	r0, [r4, #10]
    ce56:	8988      	ldrh	r0, [r1, #12]
    ce58:	0a00      	lsrs	r0, r0, #8
    ce5a:	72e0      	strb	r0, [r4, #11]
    ce5c:	e0d8      	b.n	d010 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    ce5e:	7022      	strb	r2, [r4, #0]
    ce60:	70a6      	strb	r6, [r4, #2]
    ce62:	7908      	ldrb	r0, [r1, #4]
    ce64:	70e0      	strb	r0, [r4, #3]
    ce66:	8888      	ldrh	r0, [r1, #4]
    ce68:	0a00      	lsrs	r0, r0, #8
    ce6a:	7120      	strb	r0, [r4, #4]
    ce6c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ce70:	f8c4 0005 	str.w	r0, [r4, #5]
    ce74:	f8d1 000a 	ldr.w	r0, [r1, #10]
    ce78:	f8c4 0009 	str.w	r0, [r4, #9]
    ce7c:	89c8      	ldrh	r0, [r1, #14]
    ce7e:	f8a4 000d 	strh.w	r0, [r4, #13]
    ce82:	200d      	movs	r0, #13
    ce84:	e038      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    ce86:	2011      	movs	r0, #17
    ce88:	e043      	b.n	cf12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    ce8a:	7026      	strb	r6, [r4, #0]
    ce8c:	7908      	ldrb	r0, [r1, #4]
    ce8e:	70a0      	strb	r0, [r4, #2]
    ce90:	7948      	ldrb	r0, [r1, #5]
    ce92:	70e0      	strb	r0, [r4, #3]
    ce94:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ce98:	0a00      	lsrs	r0, r0, #8
    ce9a:	7120      	strb	r0, [r4, #4]
    ce9c:	79c8      	ldrb	r0, [r1, #7]
    ce9e:	e058      	b.n	cf52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    cea0:	2008      	movs	r0, #8
    cea2:	7020      	strb	r0, [r4, #0]
    cea4:	7908      	ldrb	r0, [r1, #4]
    cea6:	70a0      	strb	r0, [r4, #2]
    cea8:	7988      	ldrb	r0, [r1, #6]
    ceaa:	70e0      	strb	r0, [r4, #3]
    ceac:	88c8      	ldrh	r0, [r1, #6]
    ceae:	0a00      	lsrs	r0, r0, #8
    ceb0:	7120      	strb	r0, [r4, #4]
    ceb2:	7a08      	ldrb	r0, [r1, #8]
    ceb4:	e04d      	b.n	cf52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    ceb6:	2030      	movs	r0, #48	; 0x30
    ceb8:	7020      	strb	r0, [r4, #0]
    ceba:	7908      	ldrb	r0, [r1, #4]
    cebc:	70a0      	strb	r0, [r4, #2]
    cebe:	7988      	ldrb	r0, [r1, #6]
    cec0:	70e0      	strb	r0, [r4, #3]
    cec2:	88c8      	ldrh	r0, [r1, #6]
    cec4:	0a00      	lsrs	r0, r0, #8
    cec6:	7120      	strb	r0, [r4, #4]
    cec8:	2003      	movs	r0, #3
    ceca:	e015      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cecc:	7022      	strb	r2, [r4, #0]
    cece:	2007      	movs	r0, #7
    ced0:	e044      	b.n	cf5c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    ced2:	7022      	strb	r2, [r4, #0]
    ced4:	70a5      	strb	r5, [r4, #2]
    ced6:	7908      	ldrb	r0, [r1, #4]
    ced8:	70e0      	strb	r0, [r4, #3]
    ceda:	7988      	ldrb	r0, [r1, #6]
    cedc:	7120      	strb	r0, [r4, #4]
    cede:	88c8      	ldrh	r0, [r1, #6]
    cee0:	0a00      	lsrs	r0, r0, #8
    cee2:	7160      	strb	r0, [r4, #5]
    cee4:	7a08      	ldrb	r0, [r1, #8]
    cee6:	71a0      	strb	r0, [r4, #6]
    cee8:	7a48      	ldrb	r0, [r1, #9]
    ceea:	e027      	b.n	cf3c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    ceec:	4620      	mov	r0, r4
    ceee:	1d09      	adds	r1, r1, #4
    cef0:	f7f7 fff8 	bl	4ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    cef4:	2800      	cmp	r0, #0
    cef6:	d001      	beq.n	cefc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    cef8:	7060      	strb	r0, [r4, #1]
    cefa:	1c80      	adds	r0, r0, #2
    cefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf00:	e073      	b.n	cfea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    cf02:	e047      	b.n	cf94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    cf04:	e028      	b.n	cf58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    cf06:	e053      	b.n	cfb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    cf08:	e061      	b.n	cfce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    cf0a:	e01a      	b.n	cf42 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cf0c:	e009      	b.n	cf22 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    cf0e:	e7ff      	b.n	cf10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    cf10:	2057      	movs	r0, #87	; 0x57
    cf12:	7020      	strb	r0, [r4, #0]
    cf14:	7908      	ldrb	r0, [r1, #4]
    cf16:	70a0      	strb	r0, [r4, #2]
    cf18:	8888      	ldrh	r0, [r1, #4]
    cf1a:	0a00      	lsrs	r0, r0, #8
    cf1c:	70e0      	strb	r0, [r4, #3]
    cf1e:	2002      	movs	r0, #2
    cf20:	e7ea      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf22:	7022      	strb	r2, [r4, #0]
    cf24:	2012      	movs	r0, #18
    cf26:	70a0      	strb	r0, [r4, #2]
    cf28:	7908      	ldrb	r0, [r1, #4]
    cf2a:	70e0      	strb	r0, [r4, #3]
    cf2c:	7948      	ldrb	r0, [r1, #5]
    cf2e:	7120      	strb	r0, [r4, #4]
    cf30:	7988      	ldrb	r0, [r1, #6]
    cf32:	7160      	strb	r0, [r4, #5]
    cf34:	88c8      	ldrh	r0, [r1, #6]
    cf36:	0a00      	lsrs	r0, r0, #8
    cf38:	71a0      	strb	r0, [r4, #6]
    cf3a:	7a08      	ldrb	r0, [r1, #8]
    cf3c:	71e0      	strb	r0, [r4, #7]
    cf3e:	2006      	movs	r0, #6
    cf40:	e7da      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf42:	7023      	strb	r3, [r4, #0]
    cf44:	20a1      	movs	r0, #161	; 0xa1
    cf46:	70a0      	strb	r0, [r4, #2]
    cf48:	7908      	ldrb	r0, [r1, #4]
    cf4a:	70e0      	strb	r0, [r4, #3]
    cf4c:	7948      	ldrb	r0, [r1, #5]
    cf4e:	7120      	strb	r0, [r4, #4]
    cf50:	2000      	movs	r0, #0
    cf52:	7160      	strb	r0, [r4, #5]
    cf54:	2004      	movs	r0, #4
    cf56:	e7cf      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf58:	7023      	strb	r3, [r4, #0]
    cf5a:	20a2      	movs	r0, #162	; 0xa2
    cf5c:	70a0      	strb	r0, [r4, #2]
    cf5e:	7908      	ldrb	r0, [r1, #4]
    cf60:	70e0      	strb	r0, [r4, #3]
    cf62:	8888      	ldrh	r0, [r1, #4]
    cf64:	0a00      	lsrs	r0, r0, #8
    cf66:	7120      	strb	r0, [r4, #4]
    cf68:	7988      	ldrb	r0, [r1, #6]
    cf6a:	7160      	strb	r0, [r4, #5]
    cf6c:	88c8      	ldrh	r0, [r1, #6]
    cf6e:	0a00      	lsrs	r0, r0, #8
    cf70:	71a0      	strb	r0, [r4, #6]
    cf72:	7a08      	ldrb	r0, [r1, #8]
    cf74:	71e0      	strb	r0, [r4, #7]
    cf76:	8908      	ldrh	r0, [r1, #8]
    cf78:	0a00      	lsrs	r0, r0, #8
    cf7a:	7220      	strb	r0, [r4, #8]
    cf7c:	7a88      	ldrb	r0, [r1, #10]
    cf7e:	7260      	strb	r0, [r4, #9]
    cf80:	8948      	ldrh	r0, [r1, #10]
    cf82:	0a00      	lsrs	r0, r0, #8
    cf84:	72a0      	strb	r0, [r4, #10]
    cf86:	7b08      	ldrb	r0, [r1, #12]
    cf88:	72e0      	strb	r0, [r4, #11]
    cf8a:	8988      	ldrh	r0, [r1, #12]
    cf8c:	0a00      	lsrs	r0, r0, #8
    cf8e:	7320      	strb	r0, [r4, #12]
    cf90:	200b      	movs	r0, #11
    cf92:	e7b1      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cf94:	7023      	strb	r3, [r4, #0]
    cf96:	20a3      	movs	r0, #163	; 0xa3
    cf98:	70a0      	strb	r0, [r4, #2]
    cf9a:	7908      	ldrb	r0, [r1, #4]
    cf9c:	70e0      	strb	r0, [r4, #3]
    cf9e:	8888      	ldrh	r0, [r1, #4]
    cfa0:	0a00      	lsrs	r0, r0, #8
    cfa2:	7120      	strb	r0, [r4, #4]
    cfa4:	7988      	ldrb	r0, [r1, #6]
    cfa6:	7160      	strb	r0, [r4, #5]
    cfa8:	79c8      	ldrb	r0, [r1, #7]
    cfaa:	71a0      	strb	r0, [r4, #6]
    cfac:	2005      	movs	r0, #5
    cfae:	e7a3      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cfb0:	7022      	strb	r2, [r4, #0]
    cfb2:	2013      	movs	r0, #19
    cfb4:	70a0      	strb	r0, [r4, #2]
    cfb6:	7908      	ldrb	r0, [r1, #4]
    cfb8:	70e0      	strb	r0, [r4, #3]
    cfba:	7948      	ldrb	r0, [r1, #5]
    cfbc:	7120      	strb	r0, [r4, #4]
    cfbe:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cfc2:	f8c4 0005 	str.w	r0, [r4, #5]
    cfc6:	8948      	ldrh	r0, [r1, #10]
    cfc8:	f8a4 0009 	strh.w	r0, [r4, #9]
    cfcc:	e020      	b.n	d010 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    cfce:	7023      	strb	r3, [r4, #0]
    cfd0:	20a4      	movs	r0, #164	; 0xa4
    cfd2:	70a0      	strb	r0, [r4, #2]
    cfd4:	7908      	ldrb	r0, [r1, #4]
    cfd6:	70e0      	strb	r0, [r4, #3]
    cfd8:	8888      	ldrh	r0, [r1, #4]
    cfda:	0a00      	lsrs	r0, r0, #8
    cfdc:	7120      	strb	r0, [r4, #4]
    cfde:	7988      	ldrb	r0, [r1, #6]
    cfe0:	7160      	strb	r0, [r4, #5]
    cfe2:	79c8      	ldrb	r0, [r1, #7]
    cfe4:	71a0      	strb	r0, [r4, #6]
    cfe6:	2007      	movs	r0, #7
    cfe8:	e786      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    cfea:	7023      	strb	r3, [r4, #0]
    cfec:	2080      	movs	r0, #128	; 0x80
    cfee:	70a0      	strb	r0, [r4, #2]
    cff0:	888a      	ldrh	r2, [r1, #4]
    cff2:	f8a4 2003 	strh.w	r2, [r4, #3]
    cff6:	88ca      	ldrh	r2, [r1, #6]
    cff8:	f8a4 2005 	strh.w	r2, [r4, #5]
    cffc:	7a0a      	ldrb	r2, [r1, #8]
    cffe:	71e2      	strb	r2, [r4, #7]
    d000:	7a4a      	ldrb	r2, [r1, #9]
    d002:	8122      	strh	r2, [r4, #8]
    d004:	7a8a      	ldrb	r2, [r1, #10]
    d006:	72a2      	strb	r2, [r4, #10]
    d008:	7ac9      	ldrb	r1, [r1, #11]
    d00a:	f001 0101 	and.w	r1, r1, #1
    d00e:	72e1      	strb	r1, [r4, #11]
    d010:	200a      	movs	r0, #10
    d012:	e771      	b.n	cef8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000d014 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    d014:	223e      	movs	r2, #62	; 0x3e
    d016:	7002      	strb	r2, [r0, #0]
    d018:	2201      	movs	r2, #1
    d01a:	7082      	strb	r2, [r0, #2]
    d01c:	790a      	ldrb	r2, [r1, #4]
    d01e:	70c2      	strb	r2, [r0, #3]
    d020:	798a      	ldrb	r2, [r1, #6]
    d022:	7102      	strb	r2, [r0, #4]
    d024:	88ca      	ldrh	r2, [r1, #6]
    d026:	0a12      	lsrs	r2, r2, #8
    d028:	7142      	strb	r2, [r0, #5]
    d02a:	7a0a      	ldrb	r2, [r1, #8]
    d02c:	7182      	strb	r2, [r0, #6]
    d02e:	7a4a      	ldrb	r2, [r1, #9]
    d030:	71c2      	strb	r2, [r0, #7]
    d032:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d036:	6082      	str	r2, [r0, #8]
    d038:	89ca      	ldrh	r2, [r1, #14]
    d03a:	8182      	strh	r2, [r0, #12]
    d03c:	7c0a      	ldrb	r2, [r1, #16]
    d03e:	7382      	strb	r2, [r0, #14]
    d040:	8a0a      	ldrh	r2, [r1, #16]
    d042:	0a12      	lsrs	r2, r2, #8
    d044:	73c2      	strb	r2, [r0, #15]
    d046:	7c8a      	ldrb	r2, [r1, #18]
    d048:	7402      	strb	r2, [r0, #16]
    d04a:	8a4a      	ldrh	r2, [r1, #18]
    d04c:	0a12      	lsrs	r2, r2, #8
    d04e:	7442      	strb	r2, [r0, #17]
    d050:	7d0a      	ldrb	r2, [r1, #20]
    d052:	7482      	strb	r2, [r0, #18]
    d054:	8a8a      	ldrh	r2, [r1, #20]
    d056:	0a12      	lsrs	r2, r2, #8
    d058:	74c2      	strb	r2, [r0, #19]
    d05a:	7d89      	ldrb	r1, [r1, #22]
    d05c:	7501      	strb	r1, [r0, #20]
    d05e:	2013      	movs	r0, #19
    d060:	4770      	bx	lr

0000d062 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    d062:	223e      	movs	r2, #62	; 0x3e
    d064:	7002      	strb	r2, [r0, #0]
    d066:	2201      	movs	r2, #1
    d068:	7082      	strb	r2, [r0, #2]
    d06a:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    d06e:	70c2      	strb	r2, [r0, #3]
    d070:	788a      	ldrb	r2, [r1, #2]
    d072:	7102      	strb	r2, [r0, #4]
    d074:	884a      	ldrh	r2, [r1, #2]
    d076:	0a12      	lsrs	r2, r2, #8
    d078:	7142      	strb	r2, [r0, #5]
    d07a:	790a      	ldrb	r2, [r1, #4]
    d07c:	7182      	strb	r2, [r0, #6]
    d07e:	794a      	ldrb	r2, [r1, #5]
    d080:	71c2      	strb	r2, [r0, #7]
    d082:	f8d1 2006 	ldr.w	r2, [r1, #6]
    d086:	6082      	str	r2, [r0, #8]
    d088:	894a      	ldrh	r2, [r1, #10]
    d08a:	8182      	strh	r2, [r0, #12]
    d08c:	7e0a      	ldrb	r2, [r1, #24]
    d08e:	7382      	strb	r2, [r0, #14]
    d090:	8b0a      	ldrh	r2, [r1, #24]
    d092:	0a12      	lsrs	r2, r2, #8
    d094:	73c2      	strb	r2, [r0, #15]
    d096:	7e8a      	ldrb	r2, [r1, #26]
    d098:	7402      	strb	r2, [r0, #16]
    d09a:	8b4a      	ldrh	r2, [r1, #26]
    d09c:	0a12      	lsrs	r2, r2, #8
    d09e:	7442      	strb	r2, [r0, #17]
    d0a0:	7f0a      	ldrb	r2, [r1, #28]
    d0a2:	7482      	strb	r2, [r0, #18]
    d0a4:	8b8a      	ldrh	r2, [r1, #28]
    d0a6:	0a12      	lsrs	r2, r2, #8
    d0a8:	74c2      	strb	r2, [r0, #19]
    d0aa:	7f89      	ldrb	r1, [r1, #30]
    d0ac:	7501      	strb	r1, [r0, #20]
    d0ae:	2113      	movs	r1, #19
    d0b0:	7041      	strb	r1, [r0, #1]
    d0b2:	4608      	mov	r0, r1
    d0b4:	4770      	bx	lr

0000d0b6 <sdc_hci_data_get>:
    d0b6:	b510      	push	{r4, lr}
    d0b8:	b120      	cbz	r0, d0c4 <sdc_hci_data_get+0xe>
    d0ba:	f7ff fda4 	bl	cc06 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    d0be:	b120      	cbz	r0, d0ca <sdc_hci_data_get+0x14>
    d0c0:	2000      	movs	r0, #0
    d0c2:	bd10      	pop	{r4, pc}
    d0c4:	f06f 0015 	mvn.w	r0, #21
    d0c8:	bd10      	pop	{r4, pc}
    d0ca:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0ce:	bd10      	pop	{r4, pc}

0000d0d0 <sdc_hci_data_put>:
    d0d0:	b510      	push	{r4, lr}
    d0d2:	f06f 0415 	mvn.w	r4, #21
    d0d6:	b120      	cbz	r0, d0e2 <sdc_hci_data_put+0x12>
    d0d8:	f7ff fda3 	bl	cc22 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d0dc:	b108      	cbz	r0, d0e2 <sdc_hci_data_put+0x12>
    d0de:	2000      	movs	r0, #0
    d0e0:	bd10      	pop	{r4, pc}
    d0e2:	4620      	mov	r0, r4
    d0e4:	bd10      	pop	{r4, pc}

0000d0e6 <sdc_hci_evt_get>:
    d0e6:	b510      	push	{r4, lr}
    d0e8:	b120      	cbz	r0, d0f4 <sdc_hci_evt_get+0xe>
    d0ea:	f7ff fda3 	bl	cc34 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    d0ee:	b120      	cbz	r0, d0fa <sdc_hci_evt_get+0x14>
    d0f0:	2000      	movs	r0, #0
    d0f2:	bd10      	pop	{r4, pc}
    d0f4:	f06f 0015 	mvn.w	r0, #21
    d0f8:	bd10      	pop	{r4, pc}
    d0fa:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d0fe:	bd10      	pop	{r4, pc}

0000d100 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d100:	f002 beda 	b.w	feb8 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d104 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d104:	f002 bf1c 	b.w	ff40 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d108 <sdc_hci_cmd_cb_set_event_mask>:
    d108:	b510      	push	{r4, lr}
    d10a:	f7f7 ff49 	bl	4fa0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d10e:	2000      	movs	r0, #0
    d110:	bd10      	pop	{r4, pc}

0000d112 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d112:	b510      	push	{r4, lr}
    d114:	f7f7 ff52 	bl	4fbc <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d118:	2000      	movs	r0, #0
    d11a:	bd10      	pop	{r4, pc}

0000d11c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d11c:	f002 bf2c 	b.w	ff78 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d120 <sdc_hci_cmd_vs_conn_event_extend>:
    d120:	b508      	push	{r3, lr}
    d122:	7800      	ldrb	r0, [r0, #0]
    d124:	f88d 0000 	strb.w	r0, [sp]
    d128:	4668      	mov	r0, sp
    d12a:	f002 fddc 	bl	fce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d12e:	bd08      	pop	{r3, pc}

0000d130 <sdc_hci_cmd_vs_conn_update>:
    d130:	2001      	movs	r0, #1
    d132:	4770      	bx	lr

0000d134 <sdc_hci_cmd_vs_event_length_set>:
    d134:	f7fd be22 	b.w	ad7c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d138 <sdc_hci_cmd_vs_llpm_mode_set>:
    d138:	2001      	movs	r0, #1
    d13a:	4770      	bx	lr

0000d13c <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d13c:	7800      	ldrb	r0, [r0, #0]
    d13e:	b100      	cbz	r0, d142 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d140:	2001      	movs	r0, #1
    d142:	f002 bd55 	b.w	fbf0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d146 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d146:	b570      	push	{r4, r5, r6, lr}
    d148:	4605      	mov	r5, r0
    d14a:	2210      	movs	r2, #16
    d14c:	2100      	movs	r1, #0
    d14e:	f7ff fc79 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d152:	2210      	movs	r2, #16
    d154:	2100      	movs	r1, #0
    d156:	f105 0010 	add.w	r0, r5, #16
    d15a:	f7ff fc73 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d15e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d162:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d166:	1c40      	adds	r0, r0, #1
    d168:	d10b      	bne.n	d182 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d16a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d16e:	1c40      	adds	r0, r0, #1
    d170:	d107      	bne.n	d182 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d172:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d176:	1c40      	adds	r0, r0, #1
    d178:	d103      	bne.n	d182 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d17a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d17e:	1c40      	adds	r0, r0, #1
    d180:	d00b      	beq.n	d19a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d182:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d186:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d18a:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d18e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d192:	612a      	str	r2, [r5, #16]
    d194:	6168      	str	r0, [r5, #20]
    d196:	61a9      	str	r1, [r5, #24]
    d198:	61eb      	str	r3, [r5, #28]
    d19a:	2000      	movs	r0, #0
    d19c:	f7f8 fca2 	bl	5ae4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d1a0:	b918      	cbnz	r0, d1aa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d1a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d1a6:	07c0      	lsls	r0, r0, #31
    d1a8:	d118      	bne.n	d1dc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1aa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d1ae:	1c40      	adds	r0, r0, #1
    d1b0:	d10b      	bne.n	d1ca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1b2:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d1b6:	1c40      	adds	r0, r0, #1
    d1b8:	d107      	bne.n	d1ca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1ba:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d1be:	1c40      	adds	r0, r0, #1
    d1c0:	d103      	bne.n	d1ca <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d1c2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d1c6:	1c40      	adds	r0, r0, #1
    d1c8:	d008      	beq.n	d1dc <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d1ca:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d1ce:	6861      	ldr	r1, [r4, #4]
    d1d0:	68a2      	ldr	r2, [r4, #8]
    d1d2:	68e3      	ldr	r3, [r4, #12]
    d1d4:	6028      	str	r0, [r5, #0]
    d1d6:	6069      	str	r1, [r5, #4]
    d1d8:	60aa      	str	r2, [r5, #8]
    d1da:	60eb      	str	r3, [r5, #12]
    d1dc:	2000      	movs	r0, #0
    d1de:	bd70      	pop	{r4, r5, r6, pc}

0000d1e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d1e0:	b538      	push	{r3, r4, r5, lr}
    d1e2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d1e6:	4604      	mov	r4, r0
    d1e8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d1ec:	1c40      	adds	r0, r0, #1
    d1ee:	d105      	bne.n	d1fc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d1f0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d1f4:	43c0      	mvns	r0, r0
    d1f6:	0400      	lsls	r0, r0, #16
    d1f8:	0c00      	lsrs	r0, r0, #16
    d1fa:	d03e      	beq.n	d27a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d1fc:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d200:	07c0      	lsls	r0, r0, #31
    d202:	d03a      	beq.n	d27a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d204:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d208:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d20c:	f8ad 1000 	strh.w	r1, [sp]
    d210:	f8c4 0001 	str.w	r0, [r4, #1]
    d214:	f8bd 0000 	ldrh.w	r0, [sp]
    d218:	f8a4 0005 	strh.w	r0, [r4, #5]
    d21c:	79a0      	ldrb	r0, [r4, #6]
    d21e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d222:	71a0      	strb	r0, [r4, #6]
    d224:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d228:	1c40      	adds	r0, r0, #1
    d22a:	d00f      	beq.n	d24c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d22c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d230:	1c40      	adds	r0, r0, #1
    d232:	d00b      	beq.n	d24c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d234:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d238:	1c40      	adds	r0, r0, #1
    d23a:	d007      	beq.n	d24c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d23c:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d240:	1c40      	adds	r0, r0, #1
    d242:	d003      	beq.n	d24c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d244:	2000      	movs	r0, #0
    d246:	f7f8 fc4d 	bl	5ae4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d24a:	b140      	cbz	r0, d25e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d24c:	2210      	movs	r2, #16
    d24e:	2100      	movs	r1, #0
    d250:	1de0      	adds	r0, r4, #7
    d252:	f7ff fbf7 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d256:	2001      	movs	r0, #1
    d258:	7020      	strb	r0, [r4, #0]
    d25a:	2000      	movs	r0, #0
    d25c:	bd38      	pop	{r3, r4, r5, pc}
    d25e:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d262:	6869      	ldr	r1, [r5, #4]
    d264:	68a8      	ldr	r0, [r5, #8]
    d266:	68eb      	ldr	r3, [r5, #12]
    d268:	f8c4 2007 	str.w	r2, [r4, #7]
    d26c:	f8c4 100b 	str.w	r1, [r4, #11]
    d270:	f8c4 000f 	str.w	r0, [r4, #15]
    d274:	f8c4 3013 	str.w	r3, [r4, #19]
    d278:	e7ed      	b.n	d256 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d27a:	2000      	movs	r0, #0
    d27c:	e7ec      	b.n	d258 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d27e <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d27e:	f002 bd24 	b.w	fcca <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d282 <sdc_hci_cmd_ip_read_bd_addr>:
    d282:	f002 be2a 	b.w	feda <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d286 <sdc_hci_cmd_ip_read_local_version_information>:
    d286:	f7fd bd87 	b.w	ad98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d28a <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d28a:	f002 ba08 	b.w	f69e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d28e <sdc_hci_cmd_le_add_device_to_white_list>:
    d28e:	f002 ba21 	b.w	f6d4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d292 <sdc_hci_cmd_le_clear_resolving_list>:
    d292:	f002 ba36 	b.w	f702 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d296 <sdc_hci_cmd_le_clear_white_list>:
    d296:	f002 ba41 	b.w	f71c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d29a <sdc_hci_cmd_le_encrypt>:
    d29a:	f002 ba49 	b.w	f730 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d29e <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d29e:	8802      	ldrh	r2, [r0, #0]
    d2a0:	800a      	strh	r2, [r1, #0]
    d2a2:	f002 ba4e 	b.w	f742 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d2a6 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d2a6:	8802      	ldrh	r2, [r0, #0]
    d2a8:	800a      	strh	r2, [r1, #0]
    d2aa:	f002 ba63 	b.w	f774 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d2ae <sdc_hci_cmd_le_rand>:
    d2ae:	f002 ba8b 	b.w	f7c8 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d2b2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d2b2:	f002 ba8f 	b.w	f7d4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d2b6 <sdc_hci_cmd_le_read_buffer_size>:
    d2b6:	f7fd bcb7 	b.w	ac28 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d2ba <sdc_hci_cmd_le_read_channel_map>:
    d2ba:	f7fd bcbf 	b.w	ac3c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d2be <sdc_hci_cmd_le_read_max_data_length>:
    d2be:	f002 ba92 	b.w	f7e6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d2c2 <sdc_hci_cmd_le_read_phy>:
    d2c2:	f002 baa0 	b.w	f806 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d2c6 <sdc_hci_cmd_le_read_remote_features>:
    d2c6:	f7fd bce3 	b.w	ac90 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d2ca <sdc_hci_cmd_le_read_resolving_list_size>:
    d2ca:	f002 bac7 	b.w	f85c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d2ce <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d2ce:	f7fd bcff 	b.w	acd0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d2d2 <sdc_hci_cmd_le_read_transmit_power>:
    d2d2:	f002 bac7 	b.w	f864 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d2d6 <sdc_hci_cmd_le_read_white_list_size>:
    d2d6:	f002 bace 	b.w	f876 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d2da <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d2da:	f002 bad0 	b.w	f87e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d2de <sdc_hci_cmd_le_remove_device_from_white_list>:
    d2de:	f002 bae7 	b.w	f8b0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d2e2 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d2e2:	f002 bafa 	b.w	f8da <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d2e6 <sdc_hci_cmd_le_set_adv_data>:
    d2e6:	f002 bb06 	b.w	f8f6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d2ea <sdc_hci_cmd_le_set_adv_enable>:
    d2ea:	f002 bb19 	b.w	f920 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d2ee <sdc_hci_cmd_le_set_adv_params>:
    d2ee:	f002 bb4a 	b.w	f986 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d2f2 <sdc_hci_cmd_le_set_data_length>:
    d2f2:	f002 bbdd 	b.w	fab0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d2f6 <sdc_hci_cmd_le_set_default_phy>:
    d2f6:	f7fd bcfb 	b.w	acf0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d2fa <sdc_hci_cmd_le_set_event_mask>:
    d2fa:	b510      	push	{r4, lr}
    d2fc:	f7f7 fe4a 	bl	4f94 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d300:	2000      	movs	r0, #0
    d302:	bd10      	pop	{r4, pc}

0000d304 <sdc_hci_cmd_le_set_phy>:
    d304:	f002 bbfb 	b.w	fafe <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d308 <sdc_hci_cmd_le_set_privacy_mode>:
    d308:	f002 bc19 	b.w	fb3e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d30c <sdc_hci_cmd_le_set_random_address>:
    d30c:	f002 bc2d 	b.w	fb6a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d310 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d310:	f002 bc39 	b.w	fb86 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d314 <sdc_hci_cmd_le_set_scan_response_data>:
    d314:	f002 bc40 	b.w	fb98 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d318 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d318:	f002 bc53 	b.w	fbc2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d31c <sdc_hci_cmd_lc_disconnect>:
    d31c:	f002 b96b 	b.w	f5f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d320 <sdc_hci_cmd_lc_read_remote_version_information>:
    d320:	f002 bde7 	b.w	fef2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d324:	b570      	push	{r4, r5, r6, lr}
    d326:	880b      	ldrh	r3, [r1, #0]
    d328:	7f04      	ldrb	r4, [r0, #28]
    d32a:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d32e:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d332:	8802      	ldrh	r2, [r0, #0]
    d334:	4435      	add	r5, r6
    d336:	1da4      	adds	r4, r4, #6
    d338:	882d      	ldrh	r5, [r5, #0]
    d33a:	4422      	add	r2, r4
    d33c:	b292      	uxth	r2, r2
    d33e:	4425      	add	r5, r4
    d340:	1e54      	subs	r4, r2, #1
    d342:	442c      	add	r4, r5
    d344:	fb94 f4f2 	sdiv	r4, r4, r2
    d348:	fb02 6204 	mla	r2, r2, r4, r6
    d34c:	8840      	ldrh	r0, [r0, #2]
    d34e:	b292      	uxth	r2, r2
    d350:	4290      	cmp	r0, r2
    d352:	d903      	bls.n	d35c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d354:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d358:	4310      	orrs	r0, r2
    d35a:	e002      	b.n	d362 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d35c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d360:	4398      	bics	r0, r3
    d362:	8008      	strh	r0, [r1, #0]
    d364:	bd70      	pop	{r4, r5, r6, pc}
    d366:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d36a:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d36e:	429a      	cmp	r2, r3
    d370:	d107      	bne.n	d382 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d372:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d376:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d37a:	4288      	cmp	r0, r1
    d37c:	d001      	beq.n	d382 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d37e:	2001      	movs	r0, #1
    d380:	4770      	bx	lr
    d382:	2000      	movs	r0, #0
    d384:	4770      	bx	lr

0000d386 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d386:	b570      	push	{r4, r5, r6, lr}
    d388:	7f00      	ldrb	r0, [r0, #28]
    d38a:	461c      	mov	r4, r3
    d38c:	1d80      	adds	r0, r0, #6
    d38e:	4408      	add	r0, r1
    d390:	4613      	mov	r3, r2
    d392:	8809      	ldrh	r1, [r1, #0]
    d394:	9a04      	ldr	r2, [sp, #16]
    d396:	1cc9      	adds	r1, r1, #3
    d398:	b289      	uxth	r1, r1
    d39a:	1915      	adds	r5, r2, r4
    d39c:	1ec0      	subs	r0, r0, #3
    d39e:	428d      	cmp	r5, r1
    d3a0:	d805      	bhi.n	d3ae <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d3a2:	1881      	adds	r1, r0, r2
    d3a4:	4622      	mov	r2, r4
    d3a6:	4618      	mov	r0, r3
    d3a8:	f7ff fad2 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3ac:	e000      	b.n	d3b0 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d3ae:	2400      	movs	r4, #0
    d3b0:	4620      	mov	r0, r4
    d3b2:	bd70      	pop	{r4, r5, r6, pc}

0000d3b4 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d3b4:	b570      	push	{r4, r5, r6, lr}
    d3b6:	7f00      	ldrb	r0, [r0, #28]
    d3b8:	461c      	mov	r4, r3
    d3ba:	1d80      	adds	r0, r0, #6
    d3bc:	4408      	add	r0, r1
    d3be:	4613      	mov	r3, r2
    d3c0:	8809      	ldrh	r1, [r1, #0]
    d3c2:	9a04      	ldr	r2, [sp, #16]
    d3c4:	1cc9      	adds	r1, r1, #3
    d3c6:	b289      	uxth	r1, r1
    d3c8:	1915      	adds	r5, r2, r4
    d3ca:	1ec0      	subs	r0, r0, #3
    d3cc:	428d      	cmp	r5, r1
    d3ce:	d805      	bhi.n	d3dc <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d3d0:	4410      	add	r0, r2
    d3d2:	4622      	mov	r2, r4
    d3d4:	4619      	mov	r1, r3
    d3d6:	f7ff fabb 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3da:	e000      	b.n	d3de <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d3dc:	2400      	movs	r4, #0
    d3de:	4620      	mov	r0, r4
    d3e0:	bd70      	pop	{r4, r5, r6, pc}

0000d3e2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d3e2:	8881      	ldrh	r1, [r0, #4]
    d3e4:	88c0      	ldrh	r0, [r0, #6]
    d3e6:	4288      	cmp	r0, r1
    d3e8:	d101      	bne.n	d3ee <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d3ea:	2001      	movs	r0, #1
    d3ec:	4770      	bx	lr
    d3ee:	2000      	movs	r0, #0
    d3f0:	4770      	bx	lr

0000d3f2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d3f2:	8881      	ldrh	r1, [r0, #4]
    d3f4:	8900      	ldrh	r0, [r0, #8]
    d3f6:	4288      	cmp	r0, r1
    d3f8:	d101      	bne.n	d3fe <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d3fa:	2001      	movs	r0, #1
    d3fc:	4770      	bx	lr
    d3fe:	2000      	movs	r0, #0
    d400:	4770      	bx	lr

0000d402 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d402:	b570      	push	{r4, r5, r6, lr}
    d404:	4604      	mov	r4, r0
    d406:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d40a:	8880      	ldrh	r0, [r0, #4]
    d40c:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d410:	4401      	add	r1, r0
    d412:	8a20      	ldrh	r0, [r4, #16]
    d414:	2800      	cmp	r0, #0
    d416:	d01a      	beq.n	d44e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d418:	89a2      	ldrh	r2, [r4, #12]
    d41a:	2500      	movs	r5, #0
    d41c:	4410      	add	r0, r2
    d41e:	b280      	uxth	r0, r0
    d420:	81a0      	strh	r0, [r4, #12]
    d422:	880a      	ldrh	r2, [r1, #0]
    d424:	4290      	cmp	r0, r2
    d426:	d905      	bls.n	d434 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d428:	f240 1163 	movw	r1, #355	; 0x163
    d42c:	f04f 0014 	mov.w	r0, #20
    d430:	f7f7 fc2e 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d434:	d109      	bne.n	d44a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d436:	69a0      	ldr	r0, [r4, #24]
    d438:	b108      	cbz	r0, d43e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d43a:	7f40      	ldrb	r0, [r0, #29]
    d43c:	7088      	strb	r0, [r1, #2]
    d43e:	f104 0104 	add.w	r1, r4, #4
    d442:	4620      	mov	r0, r4
    d444:	f7ff ff6e 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d448:	81a5      	strh	r5, [r4, #12]
    d44a:	8225      	strh	r5, [r4, #16]
    d44c:	2001      	movs	r0, #1
    d44e:	bd70      	pop	{r4, r5, r6, pc}

0000d450 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d452:	4604      	mov	r4, r0
    d454:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d458:	88c0      	ldrh	r0, [r0, #6]
    d45a:	460e      	mov	r6, r1
    d45c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d460:	8a60      	ldrh	r0, [r4, #18]
    d462:	19d9      	adds	r1, r3, r7
    d464:	b108      	cbz	r0, d46a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d466:	42b0      	cmp	r0, r6
    d468:	d201      	bcs.n	d46e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d46a:	2000      	movs	r0, #0
    d46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d46e:	89e0      	ldrh	r0, [r4, #14]
    d470:	2500      	movs	r5, #0
    d472:	b140      	cbz	r0, d486 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d474:	f8b1 c000 	ldrh.w	ip, [r1]
    d478:	4560      	cmp	r0, ip
    d47a:	d008      	beq.n	d48e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d47c:	f240 214b 	movw	r1, #587	; 0x24b
    d480:	2014      	movs	r0, #20
    d482:	f7f7 fc05 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d486:	7f60      	ldrb	r0, [r4, #29]
    d488:	7088      	strb	r0, [r1, #2]
    d48a:	800d      	strh	r5, [r1, #0]
    d48c:	e00e      	b.n	d4ac <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d48e:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d492:	4418      	add	r0, r3
    d494:	f10c 0c06 	add.w	ip, ip, #6
    d498:	44bc      	add	ip, r7
    d49a:	4460      	add	r0, ip
    d49c:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d4a0:	f820 cc03 	strh.w	ip, [r0, #-3]
    d4a4:	f894 c020 	ldrb.w	ip, [r4, #32]
    d4a8:	f800 cc01 	strb.w	ip, [r0, #-1]
    d4ac:	89e0      	ldrh	r0, [r4, #14]
    d4ae:	4430      	add	r0, r6
    d4b0:	81e0      	strh	r0, [r4, #14]
    d4b2:	8808      	ldrh	r0, [r1, #0]
    d4b4:	4430      	add	r0, r6
    d4b6:	8008      	strh	r0, [r1, #0]
    d4b8:	b19a      	cbz	r2, d4e2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d4ba:	1da1      	adds	r1, r4, #6
    d4bc:	4620      	mov	r0, r4
    d4be:	f7ff ff31 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4c2:	81e5      	strh	r5, [r4, #14]
    d4c4:	7f60      	ldrb	r0, [r4, #29]
    d4c6:	1c40      	adds	r0, r0, #1
    d4c8:	7760      	strb	r0, [r4, #29]
    d4ca:	7da0      	ldrb	r0, [r4, #22]
    d4cc:	f88d 0000 	strb.w	r0, [sp]
    d4d0:	9800      	ldr	r0, [sp, #0]
    d4d2:	9000      	str	r0, [sp, #0]
    d4d4:	f89d 0000 	ldrb.w	r0, [sp]
    d4d8:	b178      	cbz	r0, d4fa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d4da:	88e0      	ldrh	r0, [r4, #6]
    d4dc:	82a0      	strh	r0, [r4, #20]
    d4de:	75a5      	strb	r5, [r4, #22]
    d4e0:	e00b      	b.n	d4fa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d4e2:	7f20      	ldrb	r0, [r4, #28]
    d4e4:	89e1      	ldrh	r1, [r4, #14]
    d4e6:	1d80      	adds	r0, r0, #6
    d4e8:	4438      	add	r0, r7
    d4ea:	4419      	add	r1, r3
    d4ec:	4408      	add	r0, r1
    d4ee:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d4f2:	83e1      	strh	r1, [r4, #30]
    d4f4:	7880      	ldrb	r0, [r0, #2]
    d4f6:	f884 0020 	strb.w	r0, [r4, #32]
    d4fa:	8265      	strh	r5, [r4, #18]
    d4fc:	2001      	movs	r0, #1
    d4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d500 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d500:	b510      	push	{r4, lr}
    d502:	4604      	mov	r4, r0
    d504:	88c0      	ldrh	r0, [r0, #6]
    d506:	88a1      	ldrh	r1, [r4, #4]
    d508:	4281      	cmp	r1, r0
    d50a:	d007      	beq.n	d51c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d50c:	89a0      	ldrh	r0, [r4, #12]
    d50e:	b928      	cbnz	r0, d51c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d510:	8a20      	ldrh	r0, [r4, #16]
    d512:	b918      	cbnz	r0, d51c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d514:	88a0      	ldrh	r0, [r4, #4]
    d516:	8aa1      	ldrh	r1, [r4, #20]
    d518:	4288      	cmp	r0, r1
    d51a:	d101      	bne.n	d520 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d51c:	2000      	movs	r0, #0
    d51e:	bd10      	pop	{r4, pc}
    d520:	1d21      	adds	r1, r4, #4
    d522:	4620      	mov	r0, r4
    d524:	f7ff fefe 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d528:	2000      	movs	r0, #0
    d52a:	8220      	strh	r0, [r4, #16]
    d52c:	2001      	movs	r0, #1
    d52e:	bd10      	pop	{r4, pc}

0000d530 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d530:	b510      	push	{r4, lr}
    d532:	4604      	mov	r4, r0
    d534:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d538:	88c0      	ldrh	r0, [r0, #6]
    d53a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d53e:	4402      	add	r2, r0
    d540:	8820      	ldrh	r0, [r4, #0]
    d542:	2845      	cmp	r0, #69	; 0x45
    d544:	d200      	bcs.n	d548 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d546:	2045      	movs	r0, #69	; 0x45
    d548:	4288      	cmp	r0, r1
    d54a:	d204      	bcs.n	d556 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d54c:	f240 1119 	movw	r1, #281	; 0x119
    d550:	2014      	movs	r0, #20
    d552:	f7f7 fb9d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d556:	7de0      	ldrb	r0, [r4, #23]
    d558:	2800      	cmp	r0, #0
    d55a:	d003      	beq.n	d564 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d55c:	8810      	ldrh	r0, [r2, #0]
    d55e:	4288      	cmp	r0, r1
    d560:	d201      	bcs.n	d566 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d562:	2000      	movs	r0, #0
    d564:	bd10      	pop	{r4, pc}
    d566:	8011      	strh	r1, [r2, #0]
    d568:	1da1      	adds	r1, r4, #6
    d56a:	4620      	mov	r0, r4
    d56c:	f7ff feda 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d570:	2000      	movs	r0, #0
    d572:	75e0      	strb	r0, [r4, #23]
    d574:	2001      	movs	r0, #1
    d576:	bd10      	pop	{r4, pc}

0000d578 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d57c:	8941      	ldrh	r1, [r0, #10]
    d57e:	8886      	ldrh	r6, [r0, #4]
    d580:	4604      	mov	r4, r0
    d582:	2500      	movs	r5, #0
    d584:	f100 070a 	add.w	r7, r0, #10
    d588:	e006      	b.n	d598 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d58a:	4639      	mov	r1, r7
    d58c:	4620      	mov	r0, r4
    d58e:	f7ff fec9 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d592:	1c6d      	adds	r5, r5, #1
    d594:	8961      	ldrh	r1, [r4, #10]
    d596:	b2ad      	uxth	r5, r5
    d598:	42b1      	cmp	r1, r6
    d59a:	d1f6      	bne.n	d58a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d59c:	4628      	mov	r0, r5
    d59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5a2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d5a2:	b530      	push	{r4, r5, lr}
    d5a4:	88c4      	ldrh	r4, [r0, #6]
    d5a6:	8881      	ldrh	r1, [r0, #4]
    d5a8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d5ac:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d5b0:	4413      	add	r3, r2
    d5b2:	8882      	ldrh	r2, [r0, #4]
    d5b4:	8a85      	ldrh	r5, [r0, #20]
    d5b6:	42aa      	cmp	r2, r5
    d5b8:	d012      	beq.n	d5e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5ba:	42a1      	cmp	r1, r4
    d5bc:	d010      	beq.n	d5e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5be:	8981      	ldrh	r1, [r0, #12]
    d5c0:	b971      	cbnz	r1, d5e0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d5c2:	6982      	ldr	r2, [r0, #24]
    d5c4:	b172      	cbz	r2, d5e4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5c6:	4610      	mov	r0, r2
    d5c8:	f7ff ff13 	bl	d3f2 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d5cc:	b950      	cbnz	r0, d5e4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5ce:	8910      	ldrh	r0, [r2, #8]
    d5d0:	3224      	adds	r2, #36	; 0x24
    d5d2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d5d6:	4410      	add	r0, r2
    d5d8:	7899      	ldrb	r1, [r3, #2]
    d5da:	7880      	ldrb	r0, [r0, #2]
    d5dc:	4288      	cmp	r0, r1
    d5de:	d101      	bne.n	d5e4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d5e0:	2000      	movs	r0, #0
    d5e2:	bd30      	pop	{r4, r5, pc}
    d5e4:	4618      	mov	r0, r3
    d5e6:	bd30      	pop	{r4, r5, pc}

0000d5e8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d5e8:	7f00      	ldrb	r0, [r0, #28]
    d5ea:	1d80      	adds	r0, r0, #6
    d5ec:	4408      	add	r0, r1
    d5ee:	1ec0      	subs	r0, r0, #3
    d5f0:	6010      	str	r0, [r2, #0]
    d5f2:	8808      	ldrh	r0, [r1, #0]
    d5f4:	4770      	bx	lr

0000d5f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d5f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d5fa:	460e      	mov	r6, r1
    d5fc:	88c1      	ldrh	r1, [r0, #6]
    d5fe:	8902      	ldrh	r2, [r0, #8]
    d600:	4604      	mov	r4, r0
    d602:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d606:	8800      	ldrh	r0, [r0, #0]
    d608:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d60c:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d610:	2845      	cmp	r0, #69	; 0x45
    d612:	d200      	bcs.n	d616 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d614:	2045      	movs	r0, #69	; 0x45
    d616:	42b0      	cmp	r0, r6
    d618:	d203      	bcs.n	d622 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d61a:	21db      	movs	r1, #219	; 0xdb
    d61c:	2014      	movs	r0, #20
    d61e:	f7f7 fb37 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d622:	4610      	mov	r0, r2
    d624:	f7ff fe9f 	bl	d366 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d628:	b110      	cbz	r0, d630 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d62a:	2000      	movs	r0, #0
    d62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d630:	42af      	cmp	r7, r5
    d632:	d908      	bls.n	d646 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d634:	7f21      	ldrb	r1, [r4, #28]
    d636:	1b78      	subs	r0, r7, r5
    d638:	1a40      	subs	r0, r0, r1
    d63a:	1f80      	subs	r0, r0, #6
    d63c:	4286      	cmp	r6, r0
    d63e:	dd02      	ble.n	d646 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d640:	2000      	movs	r0, #0
    d642:	75e0      	strb	r0, [r4, #23]
    d644:	e7f1      	b.n	d62a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d646:	eb08 0005 	add.w	r0, r8, r5
    d64a:	2101      	movs	r1, #1
    d64c:	8006      	strh	r6, [r0, #0]
    d64e:	75e1      	strb	r1, [r4, #23]
    d650:	e7ec      	b.n	d62c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d652 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d652:	b538      	push	{r3, r4, r5, lr}
    d654:	88c4      	ldrh	r4, [r0, #6]
    d656:	8881      	ldrh	r1, [r0, #4]
    d658:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d65c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d660:	441a      	add	r2, r3
    d662:	42a1      	cmp	r1, r4
    d664:	d010      	beq.n	d688 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d666:	8983      	ldrh	r3, [r0, #12]
    d668:	8a05      	ldrh	r5, [r0, #16]
    d66a:	8812      	ldrh	r2, [r2, #0]
    d66c:	442b      	add	r3, r5
    d66e:	4293      	cmp	r3, r2
    d670:	d308      	bcc.n	d684 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d672:	f8ad 1000 	strh.w	r1, [sp]
    d676:	4669      	mov	r1, sp
    d678:	f7ff fe54 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d67c:	f8bd 0000 	ldrh.w	r0, [sp]
    d680:	42a0      	cmp	r0, r4
    d682:	d001      	beq.n	d688 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d684:	2001      	movs	r0, #1
    d686:	bd38      	pop	{r3, r4, r5, pc}
    d688:	2000      	movs	r0, #0
    d68a:	bd38      	pop	{r3, r4, r5, pc}

0000d68c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d68c:	b570      	push	{r4, r5, r6, lr}
    d68e:	88c6      	ldrh	r6, [r0, #6]
    d690:	8885      	ldrh	r5, [r0, #4]
    d692:	4603      	mov	r3, r0
    d694:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d698:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d69c:	4420      	add	r0, r4
    d69e:	42b5      	cmp	r5, r6
    d6a0:	d102      	bne.n	d6a8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d6a2:	2000      	movs	r0, #0
    d6a4:	8218      	strh	r0, [r3, #16]
    d6a6:	bd70      	pop	{r4, r5, r6, pc}
    d6a8:	8804      	ldrh	r4, [r0, #0]
    d6aa:	899d      	ldrh	r5, [r3, #12]
    d6ac:	7f1e      	ldrb	r6, [r3, #28]
    d6ae:	1b64      	subs	r4, r4, r5
    d6b0:	4435      	add	r5, r6
    d6b2:	4428      	add	r0, r5
    d6b4:	880d      	ldrh	r5, [r1, #0]
    d6b6:	b2a4      	uxth	r4, r4
    d6b8:	1cc0      	adds	r0, r0, #3
    d6ba:	42a5      	cmp	r5, r4
    d6bc:	d900      	bls.n	d6c0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d6be:	800c      	strh	r4, [r1, #0]
    d6c0:	899c      	ldrh	r4, [r3, #12]
    d6c2:	b124      	cbz	r4, d6ce <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d6c4:	2400      	movs	r4, #0
    d6c6:	7014      	strb	r4, [r2, #0]
    d6c8:	8809      	ldrh	r1, [r1, #0]
    d6ca:	8219      	strh	r1, [r3, #16]
    d6cc:	bd70      	pop	{r4, r5, r6, pc}
    d6ce:	2401      	movs	r4, #1
    d6d0:	e7f9      	b.n	d6c6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d6d2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d6d2:	b508      	push	{r3, lr}
    d6d4:	8a81      	ldrh	r1, [r0, #20]
    d6d6:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d6da:	3aff      	subs	r2, #255	; 0xff
    d6dc:	d008      	beq.n	d6f0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d6de:	7d82      	ldrb	r2, [r0, #22]
    d6e0:	f88d 2000 	strb.w	r2, [sp]
    d6e4:	9a00      	ldr	r2, [sp, #0]
    d6e6:	9200      	str	r2, [sp, #0]
    d6e8:	f89d 2000 	ldrb.w	r2, [sp]
    d6ec:	b952      	cbnz	r2, d704 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d6ee:	e004      	b.n	d6fa <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d6f0:	f44f 7162 	mov.w	r1, #904	; 0x388
    d6f4:	2014      	movs	r0, #20
    d6f6:	f7f7 facb 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d6fa:	8880      	ldrh	r0, [r0, #4]
    d6fc:	4281      	cmp	r1, r0
    d6fe:	d101      	bne.n	d704 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d700:	2000      	movs	r0, #0
    d702:	bd08      	pop	{r3, pc}
    d704:	2001      	movs	r0, #1
    d706:	bd08      	pop	{r3, pc}

0000d708 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d708:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d70c:	8281      	strh	r1, [r0, #20]
    d70e:	2100      	movs	r1, #0
    d710:	7581      	strb	r1, [r0, #22]
    d712:	4770      	bx	lr

0000d714 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d714:	b510      	push	{r4, lr}
    d716:	8a81      	ldrh	r1, [r0, #20]
    d718:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d71c:	3aff      	subs	r2, #255	; 0xff
    d71e:	d004      	beq.n	d72a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d720:	f44f 7159 	mov.w	r1, #868	; 0x364
    d724:	2014      	movs	r0, #20
    d726:	f7f7 fab3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d72a:	88c1      	ldrh	r1, [r0, #6]
    d72c:	8281      	strh	r1, [r0, #20]
    d72e:	89c1      	ldrh	r1, [r0, #14]
    d730:	b109      	cbz	r1, d736 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d732:	2101      	movs	r1, #1
    d734:	e000      	b.n	d738 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d736:	2100      	movs	r1, #0
    d738:	7581      	strb	r1, [r0, #22]
    d73a:	bd10      	pop	{r4, pc}

0000d73c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d740:	461d      	mov	r5, r3
    d742:	4616      	mov	r6, r2
    d744:	9f06      	ldr	r7, [sp, #24]
    d746:	460b      	mov	r3, r1
    d748:	4604      	mov	r4, r0
    d74a:	463a      	mov	r2, r7
    d74c:	4629      	mov	r1, r5
    d74e:	4630      	mov	r0, r6
    d750:	f000 f84f 	bl	d7f2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d754:	4283      	cmp	r3, r0
    d756:	d201      	bcs.n	d75c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d758:	21a8      	movs	r1, #168	; 0xa8
    d75a:	e018      	b.n	d78e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d75c:	1ce0      	adds	r0, r4, #3
    d75e:	f020 0103 	bic.w	r1, r0, #3
    d762:	4620      	mov	r0, r4
    d764:	42a1      	cmp	r1, r4
    d766:	d001      	beq.n	d76c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d768:	21a9      	movs	r1, #169	; 0xa9
    d76a:	e010      	b.n	d78e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d76c:	2224      	movs	r2, #36	; 0x24
    d76e:	2100      	movs	r1, #0
    d770:	f7ff f968 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d774:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d778:	82a0      	strh	r0, [r4, #20]
    d77a:	19a8      	adds	r0, r5, r6
    d77c:	1d80      	adds	r0, r0, #6
    d77e:	4378      	muls	r0, r7
    d780:	b280      	uxth	r0, r0
    d782:	7725      	strb	r5, [r4, #28]
    d784:	8060      	strh	r0, [r4, #2]
    d786:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d78a:	d903      	bls.n	d794 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d78c:	21af      	movs	r1, #175	; 0xaf
    d78e:	2014      	movs	r0, #20
    d790:	f7f7 fa7e 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d794:	8026      	strh	r6, [r4, #0]
    d796:	2000      	movs	r0, #0
    d798:	7760      	strb	r0, [r4, #29]
    d79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d79e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d79e:	6181      	str	r1, [r0, #24]
    d7a0:	6188      	str	r0, [r1, #24]
    d7a2:	4770      	bx	lr

0000d7a4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a8:	460b      	mov	r3, r1
    d7aa:	4604      	mov	r4, r0
    d7ac:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d7b0:	8905      	ldrh	r5, [r0, #8]
    d7b2:	8946      	ldrh	r6, [r0, #10]
    d7b4:	8880      	ldrh	r0, [r0, #4]
    d7b6:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d7ba:	4439      	add	r1, r7
    d7bc:	460f      	mov	r7, r1
    d7be:	4285      	cmp	r5, r0
    d7c0:	d102      	bne.n	d7c8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d7c2:	2000      	movs	r0, #0
    d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7c8:	b10a      	cbz	r2, d7ce <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d7ca:	1cc8      	adds	r0, r1, #3
    d7cc:	6010      	str	r0, [r2, #0]
    d7ce:	b123      	cbz	r3, d7da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d7d0:	7f22      	ldrb	r2, [r4, #28]
    d7d2:	1cf9      	adds	r1, r7, #3
    d7d4:	4618      	mov	r0, r3
    d7d6:	f7ff f8bb 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7da:	883f      	ldrh	r7, [r7, #0]
    d7dc:	f104 0108 	add.w	r1, r4, #8
    d7e0:	4620      	mov	r0, r4
    d7e2:	f7ff fd9f 	bl	d324 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d7e6:	42b5      	cmp	r5, r6
    d7e8:	d101      	bne.n	d7ee <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d7ea:	8920      	ldrh	r0, [r4, #8]
    d7ec:	8160      	strh	r0, [r4, #10]
    d7ee:	4638      	mov	r0, r7
    d7f0:	e7e8      	b.n	d7c4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d7f2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d7f2:	4401      	add	r1, r0
    d7f4:	1d89      	adds	r1, r1, #6
    d7f6:	4351      	muls	r1, r2
    d7f8:	b28a      	uxth	r2, r1
    d7fa:	2100      	movs	r1, #0
    d7fc:	2845      	cmp	r0, #69	; 0x45
    d7fe:	d201      	bcs.n	d804 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d800:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d804:	3224      	adds	r2, #36	; 0x24
    d806:	1850      	adds	r0, r2, r1
    d808:	b280      	uxth	r0, r0
    d80a:	4770      	bx	lr

0000d80c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d810:	4688      	mov	r8, r1
    d812:	88c1      	ldrh	r1, [r0, #6]
    d814:	4604      	mov	r4, r0
    d816:	8900      	ldrh	r0, [r0, #8]
    d818:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d81c:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d820:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d824:	eb05 0906 	add.w	r9, r5, r6
    d828:	f7ff fd9d 	bl	d366 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d82c:	2200      	movs	r2, #0
    d82e:	b998      	cbnz	r0, d858 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d830:	8820      	ldrh	r0, [r4, #0]
    d832:	2845      	cmp	r0, #69	; 0x45
    d834:	d200      	bcs.n	d838 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d836:	2045      	movs	r0, #69	; 0x45
    d838:	42b7      	cmp	r7, r6
    d83a:	d906      	bls.n	d84a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d83c:	7f23      	ldrb	r3, [r4, #28]
    d83e:	1bb9      	subs	r1, r7, r6
    d840:	1ac9      	subs	r1, r1, r3
    d842:	1f89      	subs	r1, r1, #6
    d844:	4281      	cmp	r1, r0
    d846:	da00      	bge.n	d84a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d848:	4608      	mov	r0, r1
    d84a:	89e1      	ldrh	r1, [r4, #14]
    d84c:	b111      	cbz	r1, d854 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d84e:	f8b9 3000 	ldrh.w	r3, [r9]
    d852:	1ac0      	subs	r0, r0, r3
    d854:	4540      	cmp	r0, r8
    d856:	da03      	bge.n	d860 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d858:	8262      	strh	r2, [r4, #18]
    d85a:	2000      	movs	r0, #0
    d85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d860:	7f20      	ldrb	r0, [r4, #28]
    d862:	4429      	add	r1, r5
    d864:	1d80      	adds	r0, r0, #6
    d866:	4430      	add	r0, r6
    d868:	4408      	add	r0, r1
    d86a:	f8a4 8012 	strh.w	r8, [r4, #18]
    d86e:	1ec0      	subs	r0, r0, #3
    d870:	e7f4      	b.n	d85c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d872 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d872:	2100      	movs	r1, #0
    d874:	81c1      	strh	r1, [r0, #14]
    d876:	8241      	strh	r1, [r0, #18]
    d878:	7581      	strb	r1, [r0, #22]
    d87a:	4770      	bx	lr

0000d87c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d87c:	b570      	push	{r4, r5, r6, lr}
    d87e:	2300      	movs	r3, #0
    d880:	2908      	cmp	r1, #8
    d882:	d204      	bcs.n	d88e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d884:	f240 11cb 	movw	r1, #459	; 0x1cb
    d888:	2015      	movs	r0, #21
    d88a:	f7f7 fa01 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d88e:	6802      	ldr	r2, [r0, #0]
    d890:	b90a      	cbnz	r2, d896 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d892:	e01e      	b.n	d8d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d894:	4610      	mov	r0, r2
    d896:	6802      	ldr	r2, [r0, #0]
    d898:	8893      	ldrh	r3, [r2, #4]
    d89a:	428b      	cmp	r3, r1
    d89c:	d002      	beq.n	d8a4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d89e:	6813      	ldr	r3, [r2, #0]
    d8a0:	2b00      	cmp	r3, #0
    d8a2:	d1f7      	bne.n	d894 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d8a4:	8894      	ldrh	r4, [r2, #4]
    d8a6:	4613      	mov	r3, r2
    d8a8:	428c      	cmp	r4, r1
    d8aa:	d101      	bne.n	d8b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d8ac:	6811      	ldr	r1, [r2, #0]
    d8ae:	e00d      	b.n	d8cc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d8b0:	f101 0508 	add.w	r5, r1, #8
    d8b4:	b2ae      	uxth	r6, r5
    d8b6:	2500      	movs	r5, #0
    d8b8:	42b4      	cmp	r4, r6
    d8ba:	d309      	bcc.n	d8d0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d8bc:	1a64      	subs	r4, r4, r1
    d8be:	4411      	add	r1, r2
    d8c0:	600d      	str	r5, [r1, #0]
    d8c2:	808c      	strh	r4, [r1, #4]
    d8c4:	6802      	ldr	r2, [r0, #0]
    d8c6:	6812      	ldr	r2, [r2, #0]
    d8c8:	6002      	str	r2, [r0, #0]
    d8ca:	600a      	str	r2, [r1, #0]
    d8cc:	6001      	str	r1, [r0, #0]
    d8ce:	e000      	b.n	d8d2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d8d0:	2300      	movs	r3, #0
    d8d2:	4618      	mov	r0, r3
    d8d4:	bd70      	pop	{r4, r5, r6, pc}

0000d8d6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d8d6:	b510      	push	{r4, lr}
    d8d8:	000c      	movs	r4, r1
    d8da:	d006      	beq.n	d8ea <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d8dc:	2c08      	cmp	r4, #8
    d8de:	d209      	bcs.n	d8f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d8e0:	f240 1195 	movw	r1, #405	; 0x195
    d8e4:	2015      	movs	r0, #21
    d8e6:	f7f7 f9d3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8ea:	b108      	cbz	r0, d8f0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d8ec:	2100      	movs	r1, #0
    d8ee:	6001      	str	r1, [r0, #0]
    d8f0:	2000      	movs	r0, #0
    d8f2:	bd10      	pop	{r4, pc}
    d8f4:	b118      	cbz	r0, d8fe <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d8f6:	b2a1      	uxth	r1, r4
    d8f8:	6800      	ldr	r0, [r0, #0]
    d8fa:	f000 f814 	bl	d926 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d8fe:	1d20      	adds	r0, r4, #4
    d900:	bd10      	pop	{r4, pc}

0000d902 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d902:	2100      	movs	r1, #0
    d904:	6802      	ldr	r2, [r0, #0]
    d906:	e003      	b.n	d910 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d908:	8893      	ldrh	r3, [r2, #4]
    d90a:	6812      	ldr	r2, [r2, #0]
    d90c:	4419      	add	r1, r3
    d90e:	b289      	uxth	r1, r1
    d910:	2a00      	cmp	r2, #0
    d912:	d1f9      	bne.n	d908 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d914:	f000 b807 	b.w	d926 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d918 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d918:	2300      	movs	r3, #0
    d91a:	600b      	str	r3, [r1, #0]
    d91c:	808a      	strh	r2, [r1, #4]
    d91e:	6802      	ldr	r2, [r0, #0]
    d920:	600a      	str	r2, [r1, #0]
    d922:	6001      	str	r1, [r0, #0]
    d924:	4770      	bx	lr
    d926:	2300      	movs	r3, #0
    d928:	6043      	str	r3, [r0, #4]
    d92a:	1d02      	adds	r2, r0, #4
    d92c:	8101      	strh	r1, [r0, #8]
    d92e:	6002      	str	r2, [r0, #0]
    d930:	4770      	bx	lr

0000d932 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    d932:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    d936:	3bff      	subs	r3, #255	; 0xff
    d938:	d001      	beq.n	d93e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    d93a:	2902      	cmp	r1, #2
    d93c:	d301      	bcc.n	d942 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    d93e:	2000      	movs	r0, #0
    d940:	4770      	bx	lr
    d942:	f7f7 bc5f 	b.w	5204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d946:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d94a:	3aff      	subs	r2, #255	; 0xff
    d94c:	d001      	beq.n	d952 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    d94e:	2902      	cmp	r1, #2
    d950:	d301      	bcc.n	d956 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    d952:	2000      	movs	r0, #0
    d954:	4770      	bx	lr
    d956:	f7f7 bc8f 	b.w	5278 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d95a:	b570      	push	{r4, r5, r6, lr}
    d95c:	4605      	mov	r5, r0
    d95e:	460c      	mov	r4, r1
    d960:	4608      	mov	r0, r1
    d962:	f000 f973 	bl	dc4c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d966:	b108      	cbz	r0, d96c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d968:	2010      	movs	r0, #16
    d96a:	bd70      	pop	{r4, r5, r6, pc}
    d96c:	2d02      	cmp	r5, #2
    d96e:	d301      	bcc.n	d974 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    d970:	2007      	movs	r0, #7
    d972:	bd70      	pop	{r4, r5, r6, pc}
    d974:	7025      	strb	r5, [r4, #0]
    d976:	2000      	movs	r0, #0
    d978:	8060      	strh	r0, [r4, #2]
    d97a:	bd70      	pop	{r4, r5, r6, pc}
    d97c:	b510      	push	{r4, lr}
    d97e:	4604      	mov	r4, r0
    d980:	f7f7 fcc6 	bl	5310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    d984:	42a0      	cmp	r0, r4
    d986:	d901      	bls.n	d98c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    d988:	2001      	movs	r0, #1
    d98a:	bd10      	pop	{r4, pc}
    d98c:	2000      	movs	r0, #0
    d98e:	bd10      	pop	{r4, pc}
    d990:	4770      	bx	lr

0000d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d992:	b570      	push	{r4, r5, r6, lr}
    d994:	460e      	mov	r6, r1
    d996:	461d      	mov	r5, r3
    d998:	4611      	mov	r1, r2
    d99a:	f000 f811 	bl	d9c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d99e:	4604      	mov	r4, r0
    d9a0:	4629      	mov	r1, r5
    d9a2:	4630      	mov	r0, r6
    d9a4:	f000 f803 	bl	d9ae <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d9a8:	4420      	add	r0, r4
    d9aa:	1d00      	adds	r0, r0, #4
    d9ac:	bd70      	pop	{r4, r5, r6, pc}
    d9ae:	b510      	push	{r4, lr}
    d9b0:	460a      	mov	r2, r1
    d9b2:	2101      	movs	r1, #1
    d9b4:	f7ff ff1d 	bl	d7f2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9b8:	1cc0      	adds	r0, r0, #3
    d9ba:	f020 0003 	bic.w	r0, r0, #3
    d9be:	bd10      	pop	{r4, pc}
    d9c0:	b510      	push	{r4, lr}
    d9c2:	460a      	mov	r2, r1
    d9c4:	2101      	movs	r1, #1
    d9c6:	f7ff ff14 	bl	d7f2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9ca:	1cc0      	adds	r0, r0, #3
    d9cc:	f020 0003 	bic.w	r0, r0, #3
    d9d0:	bd10      	pop	{r4, pc}
    d9d2:	b109      	cbz	r1, d9d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d9d4:	2100      	movs	r1, #0
    d9d6:	e000      	b.n	d9da <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    d9d8:	2102      	movs	r1, #2
    d9da:	1843      	adds	r3, r0, r1
    d9dc:	7d1a      	ldrb	r2, [r3, #20]
    d9de:	2a02      	cmp	r2, #2
    d9e0:	d008      	beq.n	d9f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d9e2:	7d5b      	ldrb	r3, [r3, #21]
    d9e4:	2b02      	cmp	r3, #2
    d9e6:	d009      	beq.n	d9fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d9e8:	2a03      	cmp	r2, #3
    d9ea:	d003      	beq.n	d9f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d9ec:	2b03      	cmp	r3, #3
    d9ee:	d005      	beq.n	d9fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    d9f0:	2000      	movs	r0, #0
    d9f2:	4770      	bx	lr
    d9f4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9f8:	8b00      	ldrh	r0, [r0, #24]
    d9fa:	4770      	bx	lr
    d9fc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da00:	8b40      	ldrh	r0, [r0, #26]
    da02:	4770      	bx	lr
    da04:	b109      	cbz	r1, da0a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    da06:	2100      	movs	r1, #0
    da08:	e000      	b.n	da0c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    da0a:	2102      	movs	r1, #2
    da0c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da10:	8b01      	ldrh	r1, [r0, #24]
    da12:	b911      	cbnz	r1, da1a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    da14:	8b40      	ldrh	r0, [r0, #26]
    da16:	2800      	cmp	r0, #0
    da18:	d000      	beq.n	da1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    da1a:	2001      	movs	r0, #1
    da1c:	4770      	bx	lr
    da1e:	b538      	push	{r3, r4, r5, lr}
    da20:	7883      	ldrb	r3, [r0, #2]
    da22:	f88d 3000 	strb.w	r3, [sp]
    da26:	9b00      	ldr	r3, [sp, #0]
    da28:	9300      	str	r3, [sp, #0]
    da2a:	f89d 3000 	ldrb.w	r3, [sp]
    da2e:	b953      	cbnz	r3, da46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    da30:	b10a      	cbz	r2, da36 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    da32:	2300      	movs	r3, #0
    da34:	e000      	b.n	da38 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    da36:	2302      	movs	r3, #2
    da38:	18c2      	adds	r2, r0, r3
    da3a:	7d14      	ldrb	r4, [r2, #20]
    da3c:	2c02      	cmp	r4, #2
    da3e:	d004      	beq.n	da4a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    da40:	7d52      	ldrb	r2, [r2, #21]
    da42:	2a02      	cmp	r2, #2
    da44:	d004      	beq.n	da50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    da46:	2000      	movs	r0, #0
    da48:	bd38      	pop	{r3, r4, r5, pc}
    da4a:	461a      	mov	r2, r3
    da4c:	1c5b      	adds	r3, r3, #1
    da4e:	e000      	b.n	da52 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    da50:	1c5a      	adds	r2, r3, #1
    da52:	b181      	cbz	r1, da76 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    da54:	18c5      	adds	r5, r0, r3
    da56:	2400      	movs	r4, #0
    da58:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da5c:	752c      	strb	r4, [r5, #20]
    da5e:	831c      	strh	r4, [r3, #24]
    da60:	2303      	movs	r3, #3
    da62:	1884      	adds	r4, r0, r2
    da64:	7523      	strb	r3, [r4, #20]
    da66:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    da6a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    da6e:	685b      	ldr	r3, [r3, #4]
    da70:	600b      	str	r3, [r1, #0]
    da72:	8b00      	ldrh	r0, [r0, #24]
    da74:	8088      	strh	r0, [r1, #4]
    da76:	2001      	movs	r0, #1
    da78:	bd38      	pop	{r3, r4, r5, pc}
    da7a:	b510      	push	{r4, lr}
    da7c:	b109      	cbz	r1, da82 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    da7e:	2100      	movs	r1, #0
    da80:	e000      	b.n	da84 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    da82:	2102      	movs	r1, #2
    da84:	1843      	adds	r3, r0, r1
    da86:	7d1c      	ldrb	r4, [r3, #20]
    da88:	4294      	cmp	r4, r2
    da8a:	d103      	bne.n	da94 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    da8c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da90:	8b00      	ldrh	r0, [r0, #24]
    da92:	bd10      	pop	{r4, pc}
    da94:	7d5b      	ldrb	r3, [r3, #21]
    da96:	4293      	cmp	r3, r2
    da98:	d103      	bne.n	daa2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    da9a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da9e:	8b40      	ldrh	r0, [r0, #26]
    daa0:	bd10      	pop	{r4, pc}
    daa2:	2000      	movs	r0, #0
    daa4:	bd10      	pop	{r4, pc}
    daa6:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    daaa:	d201      	bcs.n	dab0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    daac:	0841      	lsrs	r1, r0, #1
    daae:	e000      	b.n	dab2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    dab0:	21ff      	movs	r1, #255	; 0xff
    dab2:	1a40      	subs	r0, r0, r1
    dab4:	f240 6172 	movw	r1, #1650	; 0x672
    dab8:	4288      	cmp	r0, r1
    daba:	db00      	blt.n	dabe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    dabc:	4608      	mov	r0, r1
    dabe:	b280      	uxth	r0, r0
    dac0:	4770      	bx	lr

0000dac2 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    dac2:	2101      	movs	r1, #1
    dac4:	f7ff bf85 	b.w	d9d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    dac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dacc:	4606      	mov	r6, r0
    dace:	f342 0780 	sbfx	r7, r2, #2, #1
    dad2:	7848      	ldrb	r0, [r1, #1]
    dad4:	460c      	mov	r4, r1
    dad6:	f022 0504 	bic.w	r5, r2, #4
    dada:	1c7f      	adds	r7, r7, #1
    dadc:	b100      	cbz	r0, dae0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    dade:	b90d      	cbnz	r5, dae4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    dae0:	4328      	orrs	r0, r5
    dae2:	d104      	bne.n	daee <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    dae4:	b145      	cbz	r5, daf8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    dae6:	2100      	movs	r1, #0
    dae8:	4620      	mov	r0, r4
    daea:	f7f7 fd19 	bl	5520 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    daee:	2101      	movs	r1, #1
    daf0:	70a1      	strb	r1, [r4, #2]
    daf2:	b11f      	cbz	r7, dafc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    daf4:	2000      	movs	r0, #0
    daf6:	e002      	b.n	dafe <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    daf8:	2101      	movs	r1, #1
    dafa:	e7f5      	b.n	dae8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    dafc:	2002      	movs	r0, #2
    dafe:	1822      	adds	r2, r4, r0
    db00:	7d12      	ldrb	r2, [r2, #20]
    db02:	2a03      	cmp	r2, #3
    db04:	d102      	bne.n	db0c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    db06:	2d02      	cmp	r5, #2
    db08:	d000      	beq.n	db0c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    db0a:	1c40      	adds	r0, r0, #1
    db0c:	1822      	adds	r2, r4, r0
    db0e:	7511      	strb	r1, [r2, #20]
    db10:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    db14:	2200      	movs	r2, #0
    db16:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db1a:	830a      	strh	r2, [r1, #24]
    db1c:	6840      	ldr	r0, [r0, #4]
    db1e:	70a2      	strb	r2, [r4, #2]
    db20:	4631      	mov	r1, r6
    db22:	f362 010f 	bfi	r1, r2, #0, #16
    db26:	e9c6 0100 	strd	r0, r1, [r6]
    db2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db2e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    db2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db32:	461e      	mov	r6, r3
    db34:	4613      	mov	r3, r2
    db36:	4604      	mov	r4, r0
    db38:	b109      	cbz	r1, db3e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    db3a:	2000      	movs	r0, #0
    db3c:	e000      	b.n	db40 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    db3e:	2002      	movs	r0, #2
    db40:	2101      	movs	r1, #1
    db42:	70a1      	strb	r1, [r4, #2]
    db44:	1821      	adds	r1, r4, r0
    db46:	7d0a      	ldrb	r2, [r1, #20]
    db48:	2a01      	cmp	r2, #1
    db4a:	d003      	beq.n	db54 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    db4c:	7d49      	ldrb	r1, [r1, #21]
    db4e:	2901      	cmp	r1, #1
    db50:	d10c      	bne.n	db6c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    db52:	1c40      	adds	r0, r0, #1
    db54:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    db58:	2700      	movs	r7, #0
    db5a:	8b29      	ldrh	r1, [r5, #24]
    db5c:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    db60:	198a      	adds	r2, r1, r6
    db62:	4562      	cmp	r2, ip
    db64:	d905      	bls.n	db72 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    db66:	4420      	add	r0, r4
    db68:	832f      	strh	r7, [r5, #24]
    db6a:	7507      	strb	r7, [r0, #20]
    db6c:	2000      	movs	r0, #0
    db6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db72:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db76:	4632      	mov	r2, r6
    db78:	6840      	ldr	r0, [r0, #4]
    db7a:	4408      	add	r0, r1
    db7c:	4619      	mov	r1, r3
    db7e:	f7fe fee7 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db82:	8b28      	ldrh	r0, [r5, #24]
    db84:	4430      	add	r0, r6
    db86:	8328      	strh	r0, [r5, #24]
    db88:	70a7      	strb	r7, [r4, #2]
    db8a:	2001      	movs	r0, #1
    db8c:	e7ef      	b.n	db6e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000db8e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    db8e:	2202      	movs	r2, #2
    db90:	2100      	movs	r1, #0
    db92:	f7ff bf72 	b.w	da7a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000db96 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    db96:	b510      	push	{r4, lr}
    db98:	2101      	movs	r1, #1
    db9a:	f7ff ff33 	bl	da04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    db9e:	2800      	cmp	r0, #0
    dba0:	d000      	beq.n	dba4 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    dba2:	2001      	movs	r0, #1
    dba4:	bd10      	pop	{r4, pc}

0000dba6 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    dba6:	2201      	movs	r2, #1
    dba8:	f7ff bf39 	b.w	da1e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000dbac <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    dbac:	2200      	movs	r2, #0
    dbae:	f7ff bf36 	b.w	da1e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    dbb2:	b570      	push	{r4, r5, r6, lr}
    dbb4:	b109      	cbz	r1, dbba <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    dbb6:	2300      	movs	r3, #0
    dbb8:	e000      	b.n	dbbc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    dbba:	2302      	movs	r3, #2
    dbbc:	2101      	movs	r1, #1
    dbbe:	7081      	strb	r1, [r0, #2]
    dbc0:	18c1      	adds	r1, r0, r3
    dbc2:	2402      	movs	r4, #2
    dbc4:	7d0d      	ldrb	r5, [r1, #20]
    dbc6:	2d01      	cmp	r5, #1
    dbc8:	d007      	beq.n	dbda <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    dbca:	7d4d      	ldrb	r5, [r1, #21]
    dbcc:	2d01      	cmp	r5, #1
    dbce:	d009      	beq.n	dbe4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    dbd0:	f44f 718b 	mov.w	r1, #278	; 0x116
    dbd4:	2009      	movs	r0, #9
    dbd6:	f7f7 f85b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbda:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbde:	831a      	strh	r2, [r3, #24]
    dbe0:	750c      	strb	r4, [r1, #20]
    dbe2:	e003      	b.n	dbec <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    dbe4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbe8:	835a      	strh	r2, [r3, #26]
    dbea:	754c      	strb	r4, [r1, #21]
    dbec:	2100      	movs	r1, #0
    dbee:	7081      	strb	r1, [r0, #2]
    dbf0:	bd70      	pop	{r4, r5, r6, pc}

0000dbf2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    dbf2:	2101      	movs	r1, #1
    dbf4:	7001      	strb	r1, [r0, #0]
    dbf6:	4770      	bx	lr

0000dbf8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    dbf8:	2201      	movs	r2, #1
    dbfa:	4611      	mov	r1, r2
    dbfc:	f7ff bf3d 	b.w	da7a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000dc00 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dc00:	2201      	movs	r2, #1
    dc02:	2100      	movs	r1, #0
    dc04:	f7ff bf39 	b.w	da7a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000dc08 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dc08:	2100      	movs	r1, #0
    dc0a:	f7ff bee2 	b.w	d9d2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    dc0e:	2800      	cmp	r0, #0
    dc10:	db09      	blt.n	dc26 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dc12:	f000 021f 	and.w	r2, r0, #31
    dc16:	2101      	movs	r1, #1
    dc18:	4091      	lsls	r1, r2
    dc1a:	0940      	lsrs	r0, r0, #5
    dc1c:	0080      	lsls	r0, r0, #2
    dc1e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc22:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc26:	4770      	bx	lr
    dc28:	5840      	ldr	r0, [r0, r1]
    dc2a:	2800      	cmp	r0, #0
    dc2c:	d000      	beq.n	dc30 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x28>
    dc2e:	2001      	movs	r0, #1
    dc30:	4770      	bx	lr

0000dc32 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dc32:	f7f7 bdcb 	b.w	57cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000dc36 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    dc36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    dc3a:	2000      	movs	r0, #0
    dc3c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    dc40:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    dc44:	2001      	movs	r0, #1
    dc46:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    dc4a:	4770      	bx	lr

0000dc4c <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    dc4c:	b108      	cbz	r0, dc52 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    dc4e:	2000      	movs	r0, #0
    dc50:	4770      	bx	lr
    dc52:	2001      	movs	r0, #1
    dc54:	4770      	bx	lr

0000dc56 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dc56:	f7f7 bf0b 	b.w	5a70 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dc5a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dc5a:	f7f7 bef9 	b.w	5a50 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dc5e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dc5e:	b510      	push	{r4, lr}
    dc60:	2900      	cmp	r1, #0
    dc62:	4604      	mov	r4, r0
    dc64:	f04f 0106 	mov.w	r1, #6
    dc68:	d002      	beq.n	dc70 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dc6a:	f7f7 f89d 	bl	4da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dc6e:	e001      	b.n	dc74 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dc70:	f7f7 f8a8 	bl	4dc4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dc74:	7960      	ldrb	r0, [r4, #5]
    dc76:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dc7a:	7160      	strb	r0, [r4, #5]
    dc7c:	bd10      	pop	{r4, pc}

0000dc7e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dc7e:	4770      	bx	lr

0000dc80 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dc80:	b530      	push	{r4, r5, lr}
    dc82:	460c      	mov	r4, r1
    dc84:	4605      	mov	r5, r0
    dc86:	b08d      	sub	sp, #52	; 0x34
    dc88:	f04f 0103 	mov.w	r1, #3
    dc8c:	f104 0003 	add.w	r0, r4, #3
    dc90:	b112      	cbz	r2, dc98 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dc92:	f7f7 f889 	bl	4da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dc96:	e001      	b.n	dc9c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dc98:	f7f7 f894 	bl	4dc4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dc9c:	7960      	ldrb	r0, [r4, #5]
    dc9e:	220d      	movs	r2, #13
    dca0:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    dca4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dca8:	7160      	strb	r0, [r4, #5]
    dcaa:	2100      	movs	r1, #0
    dcac:	a804      	add	r0, sp, #16
    dcae:	f7fe fec9 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dcb2:	78e0      	ldrb	r0, [r4, #3]
    dcb4:	f88d 001f 	strb.w	r0, [sp, #31]
    dcb8:	7920      	ldrb	r0, [r4, #4]
    dcba:	f88d 001e 	strb.w	r0, [sp, #30]
    dcbe:	7960      	ldrb	r0, [r4, #5]
    dcc0:	f88d 001d 	strb.w	r0, [sp, #29]
    dcc4:	2210      	movs	r2, #16
    dcc6:	4629      	mov	r1, r5
    dcc8:	4668      	mov	r0, sp
    dcca:	f7fe fe41 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dcce:	4668      	mov	r0, sp
    dcd0:	f7ff ffaf 	bl	dc32 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dcd4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dcd8:	7020      	strb	r0, [r4, #0]
    dcda:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dcde:	7060      	strb	r0, [r4, #1]
    dce0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dce4:	70a0      	strb	r0, [r4, #2]
    dce6:	b00d      	add	sp, #52	; 0x34
    dce8:	bd30      	pop	{r4, r5, pc}

0000dcea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    dcea:	f7f8 ba99 	b.w	6220 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    dcee:	07c1      	lsls	r1, r0, #31
    dcf0:	d001      	beq.n	dcf6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    dcf2:	2001      	movs	r0, #1
    dcf4:	4770      	bx	lr
    dcf6:	0780      	lsls	r0, r0, #30
    dcf8:	d501      	bpl.n	dcfe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    dcfa:	2002      	movs	r0, #2
    dcfc:	4770      	bx	lr
    dcfe:	2000      	movs	r0, #0
    dd00:	4770      	bx	lr
    dd02:	b510      	push	{r4, lr}
    dd04:	2801      	cmp	r0, #1
    dd06:	d008      	beq.n	dd1a <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    dd08:	2802      	cmp	r0, #2
    dd0a:	d004      	beq.n	dd16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    dd0c:	f240 31ad 	movw	r1, #941	; 0x3ad
    dd10:	2006      	movs	r0, #6
    dd12:	f7f6 ffbd 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd16:	2001      	movs	r0, #1
    dd18:	bd10      	pop	{r4, pc}
    dd1a:	2000      	movs	r0, #0
    dd1c:	bd10      	pop	{r4, pc}
    dd1e:	2900      	cmp	r1, #0
    dd20:	d004      	beq.n	dd2c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    dd22:	2801      	cmp	r0, #1
    dd24:	d003      	beq.n	dd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dd26:	2901      	cmp	r1, #1
    dd28:	d001      	beq.n	dd2e <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    dd2a:	2002      	movs	r0, #2
    dd2c:	4770      	bx	lr
    dd2e:	2001      	movs	r0, #1
    dd30:	4770      	bx	lr
    dd32:	f7ff bcab 	b.w	d68c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dd36 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dd36:	2101      	movs	r1, #1
    dd38:	f7f8 be02 	b.w	6940 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000dd3c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dd3c:	b510      	push	{r4, lr}
    dd3e:	f002 fc46 	bl	105ce <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dd42:	b118      	cbz	r0, dd4c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dd44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd48:	f7fd bb58 	b.w	b3fc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dd4c:	20ff      	movs	r0, #255	; 0xff
    dd4e:	bd10      	pop	{r4, pc}

0000dd50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dd50:	b510      	push	{r4, lr}
    dd52:	f7f8 fe3d 	bl	69d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd56:	2810      	cmp	r0, #16
    dd58:	d003      	beq.n	dd62 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dd5a:	f7f8 fe09 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dd5e:	2810      	cmp	r0, #16
    dd60:	d100      	bne.n	dd64 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    dd62:	2008      	movs	r0, #8
    dd64:	bd10      	pop	{r4, pc}

0000dd66 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    dd66:	b510      	push	{r4, lr}
    dd68:	f7f8 fe32 	bl	69d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd6c:	2810      	cmp	r0, #16
    dd6e:	d007      	beq.n	dd80 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dd70:	f7f8 fdfe 	bl	6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    dd74:	2810      	cmp	r0, #16
    dd76:	d003      	beq.n	dd80 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    dd78:	f7f8 fe72 	bl	6a60 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    dd7c:	2001      	movs	r0, #1
    dd7e:	bd10      	pop	{r4, pc}
    dd80:	2000      	movs	r0, #0
    dd82:	bd10      	pop	{r4, pc}

0000dd84 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    dd84:	b510      	push	{r4, lr}
    dd86:	f7f8 fe23 	bl	69d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    dd8a:	2810      	cmp	r0, #16
    dd8c:	d003      	beq.n	dd96 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    dd8e:	f7f8 feaf 	bl	6af0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    dd92:	2001      	movs	r0, #1
    dd94:	bd10      	pop	{r4, pc}
    dd96:	2000      	movs	r0, #0
    dd98:	bd10      	pop	{r4, pc}

0000dd9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    dd9a:	b570      	push	{r4, r5, r6, lr}
    dd9c:	460e      	mov	r6, r1
    dd9e:	b08c      	sub	sp, #48	; 0x30
    dda0:	4614      	mov	r4, r2
    dda2:	4601      	mov	r1, r0
    dda4:	461d      	mov	r5, r3
    dda6:	2210      	movs	r2, #16
    dda8:	4668      	mov	r0, sp
    ddaa:	f000 f91a 	bl	dfe2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddae:	2210      	movs	r2, #16
    ddb0:	4631      	mov	r1, r6
    ddb2:	a804      	add	r0, sp, #16
    ddb4:	f000 f915 	bl	dfe2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddb8:	4668      	mov	r0, sp
    ddba:	f7ff ff3a 	bl	dc32 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    ddbe:	a908      	add	r1, sp, #32
    ddc0:	f04f 0210 	mov.w	r2, #16
    ddc4:	4628      	mov	r0, r5
    ddc6:	b11c      	cbz	r4, ddd0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    ddc8:	f000 f90b 	bl	dfe2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ddcc:	b00c      	add	sp, #48	; 0x30
    ddce:	bd70      	pop	{r4, r5, r6, pc}
    ddd0:	f7fe fdbe 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ddd4:	e7fa      	b.n	ddcc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    ddd6:	b510      	push	{r4, lr}
    ddd8:	460c      	mov	r4, r1
    ddda:	2100      	movs	r1, #0
    dddc:	f7ff fdb3 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dde0:	6060      	str	r0, [r4, #4]
    dde2:	b118      	cbz	r0, ddec <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dde4:	2001      	movs	r0, #1
    dde6:	7020      	strb	r0, [r4, #0]
    dde8:	2000      	movs	r0, #0
    ddea:	bd10      	pop	{r4, pc}
    ddec:	2002      	movs	r0, #2
    ddee:	bd10      	pop	{r4, pc}

0000ddf0 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    ddf0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddf4:	4348      	muls	r0, r1
    ddf6:	4770      	bx	lr

0000ddf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    ddf8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddfc:	fbb0 f0f1 	udiv	r0, r0, r1
    de00:	b280      	uxth	r0, r0
    de02:	4770      	bx	lr

0000de04 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    de04:	b570      	push	{r4, r5, r6, lr}
    de06:	4604      	mov	r4, r0
    de08:	4290      	cmp	r0, r2
    de0a:	d20b      	bcs.n	de24 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    de0c:	1b10      	subs	r0, r2, r4
    de0e:	2865      	cmp	r0, #101	; 0x65
    de10:	d200      	bcs.n	de14 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    de12:	2065      	movs	r0, #101	; 0x65
    de14:	1825      	adds	r5, r4, r0
    de16:	428d      	cmp	r5, r1
    de18:	d803      	bhi.n	de22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    de1a:	2104      	movs	r1, #4
    de1c:	f7f4 fa64 	bl	22e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    de20:	b108      	cbz	r0, de26 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    de22:	4620      	mov	r0, r4
    de24:	bd70      	pop	{r4, r5, r6, pc}
    de26:	4628      	mov	r0, r5
    de28:	bd70      	pop	{r4, r5, r6, pc}

0000de2a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    de2a:	b510      	push	{r4, lr}
    de2c:	f1a2 030f 	sub.w	r3, r2, #15
    de30:	290c      	cmp	r1, #12
    de32:	d244      	bcs.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de34:	e8df f001 	tbb	[pc, r1]
    de38:	120d0806 	.word	0x120d0806
    de3c:	241c1815 	.word	0x241c1815
    de40:	312a4127 	.word	0x312a4127
    de44:	b3c2      	cbz	r2, deb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    de46:	e03a      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de48:	2a07      	cmp	r2, #7
    de4a:	d03a      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de4c:	2a08      	cmp	r2, #8
    de4e:	d038      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de50:	e035      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de52:	2a0c      	cmp	r2, #12
    de54:	d035      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de56:	2a0b      	cmp	r2, #11
    de58:	d033      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de5a:	e030      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de5c:	2a0d      	cmp	r2, #13
    de5e:	d030      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de60:	e02d      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de62:	2b0c      	cmp	r3, #12
    de64:	d92d      	bls.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de66:	e02a      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de68:	3a10      	subs	r2, #16
    de6a:	2a0b      	cmp	r2, #11
    de6c:	d929      	bls.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de6e:	e026      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de70:	2b03      	cmp	r3, #3
    de72:	d926      	bls.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de74:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    de78:	b308      	cbz	r0, debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de7a:	2a1b      	cmp	r2, #27
    de7c:	d921      	bls.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de7e:	e01e      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de80:	2a04      	cmp	r2, #4
    de82:	d01e      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de84:	e01b      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de86:	2a06      	cmp	r2, #6
    de88:	d01b      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de8a:	e018      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de8c:	2a1c      	cmp	r2, #28
    de8e:	d018      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de90:	2a1d      	cmp	r2, #29
    de92:	d016      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de94:	2a1e      	cmp	r2, #30
    de96:	d014      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de98:	e011      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    de9a:	2a1f      	cmp	r2, #31
    de9c:	d011      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    de9e:	2a20      	cmp	r2, #32
    dea0:	d00f      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dea2:	2a21      	cmp	r2, #33	; 0x21
    dea4:	d00d      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    dea6:	2a22      	cmp	r2, #34	; 0x22
    dea8:	d00b      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deaa:	2a23      	cmp	r2, #35	; 0x23
    deac:	d009      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deae:	2a24      	cmp	r2, #36	; 0x24
    deb0:	d007      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deb2:	2a26      	cmp	r2, #38	; 0x26
    deb4:	d005      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deb6:	e002      	b.n	debe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    deb8:	e003      	b.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    deba:	2a0e      	cmp	r2, #14
    debc:	d001      	beq.n	dec2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    debe:	2000      	movs	r0, #0
    dec0:	bd10      	pop	{r4, pc}
    dec2:	2001      	movs	r0, #1
    dec4:	bd10      	pop	{r4, pc}

0000dec6 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dec6:	280c      	cmp	r0, #12
    dec8:	d013      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deca:	280b      	cmp	r0, #11
    decc:	d011      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dece:	280d      	cmp	r0, #13
    ded0:	d00f      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ded2:	281f      	cmp	r0, #31
    ded4:	d00d      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ded6:	2820      	cmp	r0, #32
    ded8:	d00b      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deda:	2821      	cmp	r0, #33	; 0x21
    dedc:	d009      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dede:	2822      	cmp	r0, #34	; 0x22
    dee0:	d007      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dee2:	2823      	cmp	r0, #35	; 0x23
    dee4:	d005      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dee6:	2824      	cmp	r0, #36	; 0x24
    dee8:	d003      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deea:	2826      	cmp	r0, #38	; 0x26
    deec:	d001      	beq.n	def2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    deee:	2000      	movs	r0, #0
    def0:	4770      	bx	lr
    def2:	2001      	movs	r0, #1
    def4:	4770      	bx	lr

0000def6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    def6:	f011 0f0c 	tst.w	r1, #12
    defa:	d016      	beq.n	df2a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    defc:	074a      	lsls	r2, r1, #29
    defe:	f44f 7116 	mov.w	r1, #600	; 0x258
    df02:	2a00      	cmp	r2, #0
    df04:	da02      	bge.n	df0c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    df06:	f04f 0210 	mov.w	r2, #16
    df0a:	e001      	b.n	df10 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    df0c:	f04f 0240 	mov.w	r2, #64	; 0x40
    df10:	da01      	bge.n	df16 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    df12:	f04f 0196 	mov.w	r1, #150	; 0x96
    df16:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    df1a:	eba0 0301 	sub.w	r3, r0, r1
    df1e:	4288      	cmp	r0, r1
    df20:	d910      	bls.n	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df22:	fb93 f0f2 	sdiv	r0, r3, r2
    df26:	b280      	uxth	r0, r0
    df28:	4770      	bx	lr
    df2a:	2902      	cmp	r1, #2
    df2c:	d002      	beq.n	df34 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    df2e:	2870      	cmp	r0, #112	; 0x70
    df30:	d80a      	bhi.n	df48 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    df32:	e007      	b.n	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df34:	283c      	cmp	r0, #60	; 0x3c
    df36:	d905      	bls.n	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df38:	383c      	subs	r0, #60	; 0x3c
    df3a:	17c1      	asrs	r1, r0, #31
    df3c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    df40:	1080      	asrs	r0, r0, #2
    df42:	e7f0      	b.n	df26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    df44:	2000      	movs	r0, #0
    df46:	e7ee      	b.n	df26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    df48:	3870      	subs	r0, #112	; 0x70
    df4a:	17c1      	asrs	r1, r0, #31
    df4c:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    df50:	10c0      	asrs	r0, r0, #3
    df52:	e7e8      	b.n	df26 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000df54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    df54:	6809      	ldr	r1, [r1, #0]
    df56:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    df5a:	4770      	bx	lr

0000df5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    df5c:	07c1      	lsls	r1, r0, #31
    df5e:	d001      	beq.n	df64 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    df60:	2001      	movs	r0, #1
    df62:	4770      	bx	lr
    df64:	0781      	lsls	r1, r0, #30
    df66:	d501      	bpl.n	df6c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    df68:	2002      	movs	r0, #2
    df6a:	4770      	bx	lr
    df6c:	0740      	lsls	r0, r0, #29
    df6e:	d501      	bpl.n	df74 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    df70:	2008      	movs	r0, #8
    df72:	4770      	bx	lr
    df74:	2000      	movs	r0, #0
    df76:	4770      	bx	lr

0000df78 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    df78:	b510      	push	{r4, lr}
    df7a:	f640 12c4 	movw	r2, #2500	; 0x9c4
    df7e:	2901      	cmp	r1, #1
    df80:	d006      	beq.n	df90 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    df82:	2902      	cmp	r1, #2
    df84:	d005      	beq.n	df92 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    df86:	f240 31b1 	movw	r1, #945	; 0x3b1
    df8a:	2029      	movs	r0, #41	; 0x29
    df8c:	f7f6 fe80 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df90:	b108      	cbz	r0, df96 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    df92:	4610      	mov	r0, r2
    df94:	bd10      	pop	{r4, pc}
    df96:	f240 40e2 	movw	r0, #1250	; 0x4e2
    df9a:	bd10      	pop	{r4, pc}

0000df9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    df9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfa0:	460c      	mov	r4, r1
    dfa2:	4605      	mov	r5, r0
    dfa4:	68c6      	ldr	r6, [r0, #12]
    dfa6:	f7f4 fda5 	bl	2af4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dfaa:	b198      	cbz	r0, dfd4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    dfac:	b1bc      	cbz	r4, dfde <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dfae:	4630      	mov	r0, r6
    dfb0:	68e9      	ldr	r1, [r5, #12]
    dfb2:	f7f4 fa9d 	bl	24f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dfb6:	2800      	cmp	r0, #0
    dfb8:	dd11      	ble.n	dfde <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    dfba:	4420      	add	r0, r4
    dfbc:	1e40      	subs	r0, r0, #1
    dfbe:	fbb0 f7f4 	udiv	r7, r0, r4
    dfc2:	fb07 f104 	mul.w	r1, r7, r4
    dfc6:	4630      	mov	r0, r6
    dfc8:	f7f4 fa60 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    dfcc:	60e8      	str	r0, [r5, #12]
    dfce:	4638      	mov	r0, r7
    dfd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dfd4:	f240 2136 	movw	r1, #566	; 0x236
    dfd8:	2029      	movs	r0, #41	; 0x29
    dfda:	f7f6 fe59 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfde:	2000      	movs	r0, #0
    dfe0:	e7f6      	b.n	dfd0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000dfe2 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dfe2:	b530      	push	{r4, r5, lr}
    dfe4:	4613      	mov	r3, r2
    dfe6:	e006      	b.n	dff6 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dfe8:	18cc      	adds	r4, r1, r3
    dfea:	1ad5      	subs	r5, r2, r3
    dfec:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dff0:	1e5b      	subs	r3, r3, #1
    dff2:	5544      	strb	r4, [r0, r5]
    dff4:	b2db      	uxtb	r3, r3
    dff6:	2b00      	cmp	r3, #0
    dff8:	d1f6      	bne.n	dfe8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dffa:	bd30      	pop	{r4, r5, pc}

0000dffc <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    dffc:	b538      	push	{r3, r4, r5, lr}
    dffe:	4605      	mov	r5, r0
    e000:	460c      	mov	r4, r1
    e002:	4668      	mov	r0, sp
    e004:	f7fd ff5a 	bl	bebc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    e008:	b310      	cbz	r0, e050 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    e00a:	f99d 0000 	ldrsb.w	r0, [sp]
    e00e:	7260      	strb	r0, [r4, #9]
    e010:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    e014:	72a1      	strb	r1, [r4, #10]
    e016:	f994 100b 	ldrsb.w	r1, [r4, #11]
    e01a:	2200      	movs	r2, #0
    e01c:	1a41      	subs	r1, r0, r1
    e01e:	d500      	bpl.n	e022 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    e020:	4249      	negs	r1, r1
    e022:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    e026:	428b      	cmp	r3, r1
    e028:	dc10      	bgt.n	e04c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e02a:	2bff      	cmp	r3, #255	; 0xff
    e02c:	d00e      	beq.n	e04c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e02e:	7b21      	ldrb	r1, [r4, #12]
    e030:	1c49      	adds	r1, r1, #1
    e032:	b2c9      	uxtb	r1, r1
    e034:	7321      	strb	r1, [r4, #12]
    e036:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    e03a:	4299      	cmp	r1, r3
    e03c:	d802      	bhi.n	e044 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    e03e:	7ae1      	ldrb	r1, [r4, #11]
    e040:	297f      	cmp	r1, #127	; 0x7f
    e042:	d103      	bne.n	e04c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    e044:	72e0      	strb	r0, [r4, #11]
    e046:	2000      	movs	r0, #0
    e048:	7320      	strb	r0, [r4, #12]
    e04a:	2201      	movs	r2, #1
    e04c:	4610      	mov	r0, r2
    e04e:	bd38      	pop	{r3, r4, r5, pc}
    e050:	207f      	movs	r0, #127	; 0x7f
    e052:	7260      	strb	r0, [r4, #9]
    e054:	2000      	movs	r0, #0
    e056:	bd38      	pop	{r3, r4, r5, pc}

0000e058 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e058:	2300      	movs	r3, #0
    e05a:	6283      	str	r3, [r0, #40]	; 0x28
    e05c:	8602      	strh	r2, [r0, #48]	; 0x30
    e05e:	f240 2371 	movw	r3, #625	; 0x271
    e062:	435a      	muls	r2, r3
    e064:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e068:	1e52      	subs	r2, r2, #1
    e06a:	fbb2 f1f1 	udiv	r1, r2, r1
    e06e:	62c1      	str	r1, [r0, #44]	; 0x2c
    e070:	4770      	bx	lr

0000e072 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e072:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e076:	4607      	mov	r7, r0
    e078:	4690      	mov	r8, r2
    e07a:	468b      	mov	fp, r1
    e07c:	2601      	movs	r6, #1
    e07e:	4608      	mov	r0, r1
    e080:	f000 f941 	bl	e306 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    e084:	4682      	mov	sl, r0
    e086:	4658      	mov	r0, fp
    e088:	f000 f949 	bl	e31e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    e08c:	4681      	mov	r9, r0
    e08e:	f7ff ff65 	bl	df5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e092:	4604      	mov	r4, r0
    e094:	4650      	mov	r0, sl
    e096:	f7ff ff61 	bl	df5c <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e09a:	4605      	mov	r5, r0
    e09c:	ea54 0005 	orrs.w	r0, r4, r5
    e0a0:	d100      	bne.n	e0a4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e0a2:	2600      	movs	r6, #0
    e0a4:	f7fd f932 	bl	b30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0a8:	ea10 0f09 	tst.w	r0, r9
    e0ac:	d100      	bne.n	e0b0 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e0ae:	2400      	movs	r4, #0
    e0b0:	f7fd f92c 	bl	b30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0b4:	ea10 0f0a 	tst.w	r0, sl
    e0b8:	d100      	bne.n	e0bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e0ba:	2500      	movs	r5, #0
    e0bc:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    e0c0:	42a0      	cmp	r0, r4
    e0c2:	d100      	bne.n	e0c6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e0c4:	2400      	movs	r4, #0
    e0c6:	f888 4000 	strb.w	r4, [r8]
    e0ca:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    e0ce:	42a8      	cmp	r0, r5
    e0d0:	d100      	bne.n	e0d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e0d2:	2500      	movs	r5, #0
    e0d4:	f888 5001 	strb.w	r5, [r8, #1]
    e0d8:	b974      	cbnz	r4, e0f8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0da:	b96d      	cbnz	r5, e0f8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0dc:	4658      	mov	r0, fp
    e0de:	f000 f91c 	bl	e31a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    e0e2:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    e0e6:	1a40      	subs	r0, r0, r1
    e0e8:	b200      	sxth	r0, r0
    e0ea:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e0ee:	4288      	cmp	r0, r1
    e0f0:	dc01      	bgt.n	e0f6 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e0f2:	2800      	cmp	r0, #0
    e0f4:	dc00      	bgt.n	e0f8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0f6:	2600      	movs	r6, #0
    e0f8:	4630      	mov	r0, r6
    e0fa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e0fe <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e0fe:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e102:	4348      	muls	r0, r1
    e104:	4770      	bx	lr

0000e106 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e106:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e10a:	fb10 f001 	smulbb	r0, r0, r1
    e10e:	4770      	bx	lr

0000e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e110:	b510      	push	{r4, lr}
    e112:	2300      	movs	r3, #0
    e114:	461a      	mov	r2, r3
    e116:	e003      	b.n	e120 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e118:	5c84      	ldrb	r4, [r0, r2]
    e11a:	4323      	orrs	r3, r4
    e11c:	1c52      	adds	r2, r2, #1
    e11e:	b2d2      	uxtb	r2, r2
    e120:	428a      	cmp	r2, r1
    e122:	d3f9      	bcc.n	e118 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e124:	b10b      	cbz	r3, e12a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e126:	2000      	movs	r0, #0
    e128:	bd10      	pop	{r4, pc}
    e12a:	2001      	movs	r0, #1
    e12c:	bd10      	pop	{r4, pc}

0000e12e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e12e:	b510      	push	{r4, lr}
    e130:	4604      	mov	r4, r0
    e132:	f890 0020 	ldrb.w	r0, [r0, #32]
    e136:	b108      	cbz	r0, e13c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e138:	2825      	cmp	r0, #37	; 0x25
    e13a:	d901      	bls.n	e140 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e13c:	2012      	movs	r0, #18
    e13e:	bd10      	pop	{r4, pc}
    e140:	b12a      	cbz	r2, e14e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    e142:	7d60      	ldrb	r0, [r4, #21]
    e144:	b128      	cbz	r0, e152 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    e146:	2801      	cmp	r0, #1
    e148:	d009      	beq.n	e15e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    e14a:	201f      	movs	r0, #31
    e14c:	bd10      	pop	{r4, pc}
    e14e:	2000      	movs	r0, #0
    e150:	bd10      	pop	{r4, pc}
    e152:	4620      	mov	r0, r4
    e154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e158:	4611      	mov	r1, r2
    e15a:	f7f8 bdbd 	b.w	6cd8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    e15e:	88a2      	ldrh	r2, [r4, #4]
    e160:	6909      	ldr	r1, [r1, #16]
    e162:	f104 0015 	add.w	r0, r4, #21
    e166:	f7f8 fd63 	bl	6c30 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e16a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e16e:	e7ee      	b.n	e14e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000e170 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e170:	b530      	push	{r4, r5, lr}
    e172:	1c42      	adds	r2, r0, #1
    e174:	428a      	cmp	r2, r1
    e176:	d004      	beq.n	e182 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    e178:	680a      	ldr	r2, [r1, #0]
    e17a:	f8c0 2001 	str.w	r2, [r0, #1]
    e17e:	7909      	ldrb	r1, [r1, #4]
    e180:	7141      	strb	r1, [r0, #5]
    e182:	7941      	ldrb	r1, [r0, #5]
    e184:	f001 011f 	and.w	r1, r1, #31
    e188:	7141      	strb	r1, [r0, #5]
    e18a:	2100      	movs	r1, #0
    e18c:	72c1      	strb	r1, [r0, #11]
    e18e:	1843      	adds	r3, r0, r1
    e190:	1c49      	adds	r1, r1, #1
    e192:	785c      	ldrb	r4, [r3, #1]
    e194:	b2c9      	uxtb	r1, r1
    e196:	f004 0201 	and.w	r2, r4, #1
    e19a:	0864      	lsrs	r4, r4, #1
    e19c:	f004 0501 	and.w	r5, r4, #1
    e1a0:	4415      	add	r5, r2
    e1a2:	0862      	lsrs	r2, r4, #1
    e1a4:	f002 0401 	and.w	r4, r2, #1
    e1a8:	442c      	add	r4, r5
    e1aa:	0852      	lsrs	r2, r2, #1
    e1ac:	f002 0501 	and.w	r5, r2, #1
    e1b0:	442c      	add	r4, r5
    e1b2:	0852      	lsrs	r2, r2, #1
    e1b4:	f002 0501 	and.w	r5, r2, #1
    e1b8:	442c      	add	r4, r5
    e1ba:	0852      	lsrs	r2, r2, #1
    e1bc:	f002 0501 	and.w	r5, r2, #1
    e1c0:	442c      	add	r4, r5
    e1c2:	0852      	lsrs	r2, r2, #1
    e1c4:	f002 0501 	and.w	r5, r2, #1
    e1c8:	442c      	add	r4, r5
    e1ca:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    e1ce:	719a      	strb	r2, [r3, #6]
    e1d0:	7ac3      	ldrb	r3, [r0, #11]
    e1d2:	2905      	cmp	r1, #5
    e1d4:	441a      	add	r2, r3
    e1d6:	72c2      	strb	r2, [r0, #11]
    e1d8:	d3d9      	bcc.n	e18e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    e1da:	bd30      	pop	{r4, r5, pc}
    e1dc:	b570      	push	{r4, r5, r6, lr}
    e1de:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e1e2:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e1e6:	f012 0fff 	tst.w	r2, #255	; 0xff
    e1ea:	f023 031f 	bic.w	r3, r3, #31
    e1ee:	d108      	bne.n	e202 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1f0:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e1f4:	b92c      	cbnz	r4, e202 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1f6:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e1fa:	b914      	cbnz	r4, e202 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e1fc:	0e12      	lsrs	r2, r2, #24
    e1fe:	d100      	bne.n	e202 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    e200:	b35b      	cbz	r3, e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e202:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e206:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    e20a:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    e20e:	7d83      	ldrb	r3, [r0, #22]
    e210:	b141      	cbz	r1, e224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e212:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e216:	d905      	bls.n	e224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e218:	f640 5107 	movw	r1, #3335	; 0xd07
    e21c:	428a      	cmp	r2, r1
    e21e:	d801      	bhi.n	e224 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    e220:	2101      	movs	r1, #1
    e222:	e000      	b.n	e226 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    e224:	2100      	movs	r1, #0
    e226:	7846      	ldrb	r6, [r0, #1]
    e228:	2e22      	cmp	r6, #34	; 0x22
    e22a:	d116      	bne.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e22c:	b959      	cbnz	r1, e246 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    e22e:	1f91      	subs	r1, r2, #6
    e230:	f640 467a 	movw	r6, #3194	; 0xc7a
    e234:	42b1      	cmp	r1, r6
    e236:	d810      	bhi.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e238:	b17b      	cbz	r3, e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e23a:	2b08      	cmp	r3, #8
    e23c:	d80d      	bhi.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e23e:	4293      	cmp	r3, r2
    e240:	d20b      	bcs.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e242:	4294      	cmp	r4, r2
    e244:	d809      	bhi.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e246:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e24a:	d206      	bcs.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e24c:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e250:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e254:	d801      	bhi.n	e25a <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    e256:	2001      	movs	r0, #1
    e258:	bd70      	pop	{r4, r5, r6, pc}
    e25a:	2000      	movs	r0, #0
    e25c:	bd70      	pop	{r4, r5, r6, pc}

0000e25e <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    e25e:	b570      	push	{r4, r5, r6, lr}
    e260:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e264:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    e268:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    e26c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e270:	88c0      	ldrh	r0, [r0, #6]
    e272:	b131      	cbz	r1, e282 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e274:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e278:	d903      	bls.n	e282 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    e27a:	f640 5107 	movw	r1, #3335	; 0xd07
    e27e:	428a      	cmp	r2, r1
    e280:	d90b      	bls.n	e29a <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    e282:	1f91      	subs	r1, r2, #6
    e284:	f640 467a 	movw	r6, #3194	; 0xc7a
    e288:	42b1      	cmp	r1, r6
    e28a:	d80e      	bhi.n	e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e28c:	b16b      	cbz	r3, e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e28e:	2b08      	cmp	r3, #8
    e290:	d80b      	bhi.n	e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e292:	4293      	cmp	r3, r2
    e294:	d209      	bcs.n	e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e296:	4294      	cmp	r4, r2
    e298:	d807      	bhi.n	e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e29a:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    e29e:	d204      	bcs.n	e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e2a0:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    e2a4:	d801      	bhi.n	e2aa <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    e2a6:	2001      	movs	r0, #1
    e2a8:	bd70      	pop	{r4, r5, r6, pc}
    e2aa:	2000      	movs	r0, #0
    e2ac:	bd70      	pop	{r4, r5, r6, pc}

0000e2ae <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    e2ae:	6842      	ldr	r2, [r0, #4]
    e2b0:	600a      	str	r2, [r1, #0]
    e2b2:	7a00      	ldrb	r0, [r0, #8]
    e2b4:	7108      	strb	r0, [r1, #4]
    e2b6:	4770      	bx	lr

0000e2b8 <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    e2b8:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e2bc:	4770      	bx	lr

0000e2be <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    e2be:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e2c2:	4770      	bx	lr

0000e2c4 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    e2c4:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e2c8:	4770      	bx	lr

0000e2ca <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    e2ca:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e2ce:	4770      	bx	lr

0000e2d0 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    e2d0:	8980      	ldrh	r0, [r0, #12]
    e2d2:	8008      	strh	r0, [r1, #0]
    e2d4:	4770      	bx	lr

0000e2d6 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    e2d6:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e2da:	6008      	str	r0, [r1, #0]
    e2dc:	4770      	bx	lr

0000e2de <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    e2de:	6842      	ldr	r2, [r0, #4]
    e2e0:	600a      	str	r2, [r1, #0]
    e2e2:	6880      	ldr	r0, [r0, #8]
    e2e4:	6048      	str	r0, [r1, #4]
    e2e6:	4770      	bx	lr

0000e2e8 <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    e2e8:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e2ec:	600a      	str	r2, [r1, #0]
    e2ee:	6840      	ldr	r0, [r0, #4]
    e2f0:	6048      	str	r0, [r1, #4]
    e2f2:	4770      	bx	lr

0000e2f4 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    e2f4:	6842      	ldr	r2, [r0, #4]
    e2f6:	600a      	str	r2, [r1, #0]
    e2f8:	6880      	ldr	r0, [r0, #8]
    e2fa:	6048      	str	r0, [r1, #4]
    e2fc:	4770      	bx	lr

0000e2fe <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    e2fe:	7800      	ldrb	r0, [r0, #0]
    e300:	f000 0003 	and.w	r0, r0, #3
    e304:	4770      	bx	lr

0000e306 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    e306:	7900      	ldrb	r0, [r0, #4]
    e308:	4770      	bx	lr

0000e30a <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    e30a:	8880      	ldrh	r0, [r0, #4]
    e30c:	4770      	bx	lr

0000e30e <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    e30e:	88c0      	ldrh	r0, [r0, #6]
    e310:	4770      	bx	lr

0000e312 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    e312:	8900      	ldrh	r0, [r0, #8]
    e314:	4770      	bx	lr

0000e316 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    e316:	8940      	ldrh	r0, [r0, #10]
    e318:	4770      	bx	lr

0000e31a <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    e31a:	88c0      	ldrh	r0, [r0, #6]
    e31c:	4770      	bx	lr

0000e31e <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    e31e:	7940      	ldrb	r0, [r0, #5]
    e320:	4770      	bx	lr

0000e322 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    e322:	7900      	ldrb	r0, [r0, #4]
    e324:	4770      	bx	lr

0000e326 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e326:	7900      	ldrb	r0, [r0, #4]
    e328:	4770      	bx	lr

0000e32a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e32a:	8901      	ldrh	r1, [r0, #8]
    e32c:	291b      	cmp	r1, #27
    e32e:	d30c      	bcc.n	e34a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e330:	8941      	ldrh	r1, [r0, #10]
    e332:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e336:	4291      	cmp	r1, r2
    e338:	d307      	bcc.n	e34a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e33a:	8881      	ldrh	r1, [r0, #4]
    e33c:	291b      	cmp	r1, #27
    e33e:	d304      	bcc.n	e34a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e340:	88c0      	ldrh	r0, [r0, #6]
    e342:	4290      	cmp	r0, r2
    e344:	d301      	bcc.n	e34a <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e346:	2001      	movs	r0, #1
    e348:	4770      	bx	lr
    e34a:	2000      	movs	r0, #0
    e34c:	4770      	bx	lr

0000e34e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e34e:	b510      	push	{r4, lr}
    e350:	29fb      	cmp	r1, #251	; 0xfb
    e352:	d904      	bls.n	e35e <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e354:	f44f 61af 	mov.w	r1, #1400	; 0x578
    e358:	202a      	movs	r0, #42	; 0x2a
    e35a:	f7f6 fc99 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e35e:	7041      	strb	r1, [r0, #1]
    e360:	bd10      	pop	{r4, pc}

0000e362 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e362:	7901      	ldrb	r1, [r0, #4]
    e364:	0749      	lsls	r1, r1, #29
    e366:	d004      	beq.n	e372 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e368:	7940      	ldrb	r0, [r0, #5]
    e36a:	0740      	lsls	r0, r0, #29
    e36c:	d001      	beq.n	e372 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e36e:	2001      	movs	r0, #1
    e370:	4770      	bx	lr
    e372:	2000      	movs	r0, #0
    e374:	4770      	bx	lr

0000e376 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e376:	7900      	ldrb	r0, [r0, #4]
    e378:	4770      	bx	lr

0000e37a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e37a:	7940      	ldrb	r0, [r0, #5]
    e37c:	4770      	bx	lr

0000e37e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e37e:	7101      	strb	r1, [r0, #4]
    e380:	4770      	bx	lr

0000e382 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e382:	7141      	strb	r1, [r0, #5]
    e384:	4770      	bx	lr

0000e386 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    e386:	b510      	push	{r4, lr}
    e388:	2a1b      	cmp	r2, #27
    e38a:	d904      	bls.n	e396 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    e38c:	f240 31df 	movw	r1, #991	; 0x3df
    e390:	202a      	movs	r0, #42	; 0x2a
    e392:	f7f6 fc7d 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e396:	7042      	strb	r2, [r0, #1]
    e398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e39c:	1cc0      	adds	r0, r0, #3
    e39e:	f7fe bad7 	b.w	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e3a2 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    e3a2:	6809      	ldr	r1, [r1, #0]
    e3a4:	60c1      	str	r1, [r0, #12]
    e3a6:	4770      	bx	lr

0000e3a8 <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    e3a8:	680a      	ldr	r2, [r1, #0]
    e3aa:	6042      	str	r2, [r0, #4]
    e3ac:	6849      	ldr	r1, [r1, #4]
    e3ae:	6081      	str	r1, [r0, #8]
    e3b0:	4770      	bx	lr

0000e3b2 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e3b2:	680a      	ldr	r2, [r1, #0]
    e3b4:	6042      	str	r2, [r0, #4]
    e3b6:	6849      	ldr	r1, [r1, #4]
    e3b8:	6081      	str	r1, [r0, #8]
    e3ba:	4770      	bx	lr

0000e3bc <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    e3bc:	680a      	ldr	r2, [r1, #0]
    e3be:	6042      	str	r2, [r0, #4]
    e3c0:	6849      	ldr	r1, [r1, #4]
    e3c2:	6081      	str	r1, [r0, #8]
    e3c4:	4770      	bx	lr

0000e3c6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e3c6:	7802      	ldrb	r2, [r0, #0]
    e3c8:	f001 0103 	and.w	r1, r1, #3
    e3cc:	f022 0203 	bic.w	r2, r2, #3
    e3d0:	430a      	orrs	r2, r1
    e3d2:	7002      	strb	r2, [r0, #0]
    e3d4:	4770      	bx	lr

0000e3d6 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e3d6:	7101      	strb	r1, [r0, #4]
    e3d8:	0a09      	lsrs	r1, r1, #8
    e3da:	7141      	strb	r1, [r0, #5]
    e3dc:	4770      	bx	lr

0000e3de <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e3de:	7181      	strb	r1, [r0, #6]
    e3e0:	0a09      	lsrs	r1, r1, #8
    e3e2:	71c1      	strb	r1, [r0, #7]
    e3e4:	4770      	bx	lr

0000e3e6 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e3e6:	7201      	strb	r1, [r0, #8]
    e3e8:	0a09      	lsrs	r1, r1, #8
    e3ea:	7241      	strb	r1, [r0, #9]
    e3ec:	4770      	bx	lr

0000e3ee <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e3ee:	7281      	strb	r1, [r0, #10]
    e3f0:	0a09      	lsrs	r1, r1, #8
    e3f2:	72c1      	strb	r1, [r0, #11]
    e3f4:	4770      	bx	lr

0000e3f6 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    e3f6:	7802      	ldrb	r2, [r0, #0]
    e3f8:	f002 020f 	and.w	r2, r2, #15
    e3fc:	2a03      	cmp	r2, #3
    e3fe:	d003      	beq.n	e408 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    e400:	2a05      	cmp	r2, #5
    e402:	d104      	bne.n	e40e <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    e404:	f7ff beea 	b.w	e1dc <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    e408:	7840      	ldrb	r0, [r0, #1]
    e40a:	280c      	cmp	r0, #12
    e40c:	d001      	beq.n	e412 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    e40e:	2000      	movs	r0, #0
    e410:	4770      	bx	lr
    e412:	2001      	movs	r0, #1
    e414:	4770      	bx	lr

0000e416 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    e416:	b570      	push	{r4, r5, r6, lr}
    e418:	4614      	mov	r4, r2
    e41a:	4605      	mov	r5, r0
    e41c:	2a1f      	cmp	r2, #31
    e41e:	d903      	bls.n	e428 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    e420:	21b2      	movs	r1, #178	; 0xb2
    e422:	202a      	movs	r0, #42	; 0x2a
    e424:	f7f6 fc34 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e428:	f105 0009 	add.w	r0, r5, #9
    e42c:	f7fe fa90 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e430:	1da4      	adds	r4, r4, #6
    e432:	706c      	strb	r4, [r5, #1]
    e434:	bd70      	pop	{r4, r5, r6, pc}

0000e436 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e436:	b510      	push	{r4, lr}
    e438:	7802      	ldrb	r2, [r0, #0]
    e43a:	f001 030f 	and.w	r3, r1, #15
    e43e:	f022 020f 	bic.w	r2, r2, #15
    e442:	431a      	orrs	r2, r3
    e444:	7002      	strb	r2, [r0, #0]
    e446:	2907      	cmp	r1, #7
    e448:	d20c      	bcs.n	e464 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e44a:	e8df f001 	tbb	[pc, r1]
    e44e:	0604      	.short	0x0604
    e450:	08040604 	.word	0x08040604
    e454:	0004      	.short	0x0004
    e456:	2106      	movs	r1, #6
    e458:	e002      	b.n	e460 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e45a:	210c      	movs	r1, #12
    e45c:	e000      	b.n	e460 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e45e:	2122      	movs	r1, #34	; 0x22
    e460:	7041      	strb	r1, [r0, #1]
    e462:	bd10      	pop	{r4, pc}
    e464:	216e      	movs	r1, #110	; 0x6e
    e466:	202a      	movs	r0, #42	; 0x2a
    e468:	f7f6 fc12 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e46c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e46c:	680a      	ldr	r2, [r1, #0]
    e46e:	f840 2f09 	str.w	r2, [r0, #9]!
    e472:	8889      	ldrh	r1, [r1, #4]
    e474:	8081      	strh	r1, [r0, #4]
    e476:	4770      	bx	lr

0000e478 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e478:	7802      	ldrb	r2, [r0, #0]
    e47a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e47e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e482:	7002      	strb	r2, [r0, #0]
    e484:	4770      	bx	lr

0000e486 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e486:	680a      	ldr	r2, [r1, #0]
    e488:	f840 2f03 	str.w	r2, [r0, #3]!
    e48c:	8889      	ldrh	r1, [r1, #4]
    e48e:	8081      	strh	r1, [r0, #4]
    e490:	4770      	bx	lr

0000e492 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e492:	7802      	ldrb	r2, [r0, #0]
    e494:	2340      	movs	r3, #64	; 0x40
    e496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e49a:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e49e:	430a      	orrs	r2, r1
    e4a0:	7002      	strb	r2, [r0, #0]
    e4a2:	4770      	bx	lr

0000e4a4 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    e4a4:	b570      	push	{r4, r5, r6, lr}
    e4a6:	4614      	mov	r4, r2
    e4a8:	4605      	mov	r5, r0
    e4aa:	2a1f      	cmp	r2, #31
    e4ac:	d903      	bls.n	e4b6 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    e4ae:	21d4      	movs	r1, #212	; 0xd4
    e4b0:	202a      	movs	r0, #42	; 0x2a
    e4b2:	f7f6 fbed 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4b6:	f105 0009 	add.w	r0, r5, #9
    e4ba:	f7fe fa49 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4be:	1da4      	adds	r4, r4, #6
    e4c0:	706c      	strb	r4, [r5, #1]
    e4c2:	bd70      	pop	{r4, r5, r6, pc}

0000e4c4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e4c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e4c8:	4604      	mov	r4, r0
    e4ca:	2000      	movs	r0, #0
    e4cc:	f7f6 fdca 	bl	5064 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e4d0:	2600      	movs	r6, #0
    e4d2:	4605      	mov	r5, r0
    e4d4:	4637      	mov	r7, r6
    e4d6:	e00e      	b.n	e4f6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e4d8:	8820      	ldrh	r0, [r4, #0]
    e4da:	1c40      	adds	r0, r0, #1
    e4dc:	b280      	uxth	r0, r0
    e4de:	8020      	strh	r0, [r4, #0]
    e4e0:	42a8      	cmp	r0, r5
    e4e2:	d300      	bcc.n	e4e6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e4e4:	8027      	strh	r7, [r4, #0]
    e4e6:	8820      	ldrh	r0, [r4, #0]
    e4e8:	4669      	mov	r1, sp
    e4ea:	f7ff fc74 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e4ee:	2800      	cmp	r0, #0
    e4f0:	d007      	beq.n	e502 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e4f2:	1c76      	adds	r6, r6, #1
    e4f4:	b2f6      	uxtb	r6, r6
    e4f6:	42ae      	cmp	r6, r5
    e4f8:	d3ee      	bcc.n	e4d8 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e4fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e4fe:	8020      	strh	r0, [r4, #0]
    e500:	2012      	movs	r0, #18
    e502:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e506 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e506:	6841      	ldr	r1, [r0, #4]
    e508:	2200      	movs	r2, #0
    e50a:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    e50e:	2b00      	cmp	r3, #0
    e510:	d004      	beq.n	e51c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e512:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    e516:	6840      	ldr	r0, [r0, #4]
    e518:	f000 bc64 	b.w	ede4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e51c:	4770      	bx	lr

0000e51e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e51e:	b510      	push	{r4, lr}
    e520:	7901      	ldrb	r1, [r0, #4]
    e522:	b119      	cbz	r1, e52c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e524:	2901      	cmp	r1, #1
    e526:	d006      	beq.n	e536 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e528:	2000      	movs	r0, #0
    e52a:	bd10      	pop	{r4, pc}
    e52c:	8842      	ldrh	r2, [r0, #2]
    e52e:	6883      	ldr	r3, [r0, #8]
    e530:	8800      	ldrh	r0, [r0, #0]
    e532:	2102      	movs	r1, #2
    e534:	e003      	b.n	e53e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e536:	8842      	ldrh	r2, [r0, #2]
    e538:	6883      	ldr	r3, [r0, #8]
    e53a:	8800      	ldrh	r0, [r0, #0]
    e53c:	2101      	movs	r1, #1
    e53e:	f7f8 fc79 	bl	6e34 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e542:	b908      	cbnz	r0, e548 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e544:	f7f8 fccc 	bl	6ee0 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e548:	2001      	movs	r0, #1
    e54a:	bd10      	pop	{r4, pc}
    e54c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e550:	460e      	mov	r6, r1
    e552:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e556:	4617      	mov	r7, r2
    e558:	39ff      	subs	r1, #255	; 0xff
    e55a:	d014      	beq.n	e586 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e55c:	8030      	strh	r0, [r6, #0]
    e55e:	2100      	movs	r1, #0
    e560:	7171      	strb	r1, [r6, #5]
    e562:	f7f6 ffaf 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e566:	4604      	mov	r4, r0
    e568:	f7ff f81b 	bl	d5a2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e56c:	0005      	movs	r5, r0
    e56e:	d00a      	beq.n	e586 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e570:	4620      	mov	r0, r4
    e572:	4629      	mov	r1, r5
    e574:	aa01      	add	r2, sp, #4
    e576:	f7ff f837 	bl	d5e8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e57a:	8070      	strh	r0, [r6, #2]
    e57c:	b130      	cbz	r0, e58c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e57e:	28fb      	cmp	r0, #251	; 0xfb
    e580:	d906      	bls.n	e590 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e582:	21ae      	movs	r1, #174	; 0xae
    e584:	e026      	b.n	e5d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e586:	2000      	movs	r0, #0
    e588:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e58c:	21ad      	movs	r1, #173	; 0xad
    e58e:	e021      	b.n	e5d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e590:	9801      	ldr	r0, [sp, #4]
    e592:	f7ff feb4 	bl	e2fe <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e596:	2801      	cmp	r0, #1
    e598:	d003      	beq.n	e5a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e59a:	2802      	cmp	r0, #2
    e59c:	d001      	beq.n	e5a2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e59e:	21bd      	movs	r1, #189	; 0xbd
    e5a0:	e018      	b.n	e5d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e5a2:	7130      	strb	r0, [r6, #4]
    e5a4:	4629      	mov	r1, r5
    e5a6:	8873      	ldrh	r3, [r6, #2]
    e5a8:	2503      	movs	r5, #3
    e5aa:	4620      	mov	r0, r4
    e5ac:	463a      	mov	r2, r7
    e5ae:	9500      	str	r5, [sp, #0]
    e5b0:	f7fe fee9 	bl	d386 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e5b4:	4620      	mov	r0, r4
    e5b6:	60b7      	str	r7, [r6, #8]
    e5b8:	f7fe ffa2 	bl	d500 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e5bc:	b138      	cbz	r0, e5ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e5be:	2100      	movs	r1, #0
    e5c0:	4620      	mov	r0, r4
    e5c2:	460a      	mov	r2, r1
    e5c4:	f7ff f8ee 	bl	d7a4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e5c8:	b118      	cbz	r0, e5d2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e5ca:	2001      	movs	r0, #1
    e5cc:	e7dc      	b.n	e588 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e5ce:	21cd      	movs	r1, #205	; 0xcd
    e5d0:	e000      	b.n	e5d4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e5d2:	21d2      	movs	r1, #210	; 0xd2
    e5d4:	202b      	movs	r0, #43	; 0x2b
    e5d6:	f7f6 fb5b 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5da <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e5da:	f7f8 be3f 	b.w	725c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25c>
    e5de:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e5e2:	4604      	mov	r4, r0
    e5e4:	2000      	movs	r0, #0
    e5e6:	f7f6 fd3d 	bl	5064 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e5ea:	4605      	mov	r5, r0
    e5ec:	2001      	movs	r0, #1
    e5ee:	f7f6 fd39 	bl	5064 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e5f2:	4428      	add	r0, r5
    e5f4:	2600      	movs	r6, #0
    e5f6:	b2c7      	uxtb	r7, r0
    e5f8:	46b0      	mov	r8, r6
    e5fa:	e017      	b.n	e62c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x52>
    e5fc:	8820      	ldrh	r0, [r4, #0]
    e5fe:	1c40      	adds	r0, r0, #1
    e600:	b280      	uxth	r0, r0
    e602:	8020      	strh	r0, [r4, #0]
    e604:	42b8      	cmp	r0, r7
    e606:	d302      	bcc.n	e60e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x34>
    e608:	4640      	mov	r0, r8
    e60a:	f8a4 8000 	strh.w	r8, [r4]
    e60e:	b280      	uxth	r0, r0
    e610:	42a8      	cmp	r0, r5
    e612:	d304      	bcc.n	e61e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e614:	42b8      	cmp	r0, r7
    e616:	d202      	bcs.n	e61e <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x44>
    e618:	2000      	movs	r0, #0
    e61a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e61e:	4669      	mov	r1, sp
    e620:	f7ff fbd9 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e624:	2800      	cmp	r0, #0
    e626:	d0f8      	beq.n	e61a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>
    e628:	1c76      	adds	r6, r6, #1
    e62a:	b2f6      	uxtb	r6, r6
    e62c:	42be      	cmp	r6, r7
    e62e:	d3e5      	bcc.n	e5fc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x22>
    e630:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e634:	8020      	strh	r0, [r4, #0]
    e636:	2012      	movs	r0, #18
    e638:	e7ef      	b.n	e61a <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x40>

0000e63a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e63a:	b570      	push	{r4, r5, r6, lr}
    e63c:	8050      	strh	r0, [r2, #2]
    e63e:	890c      	ldrh	r4, [r1, #8]
    e640:	8094      	strh	r4, [r2, #4]
    e642:	898b      	ldrh	r3, [r1, #12]
    e644:	80d3      	strh	r3, [r2, #6]
    e646:	8948      	ldrh	r0, [r1, #10]
    e648:	8110      	strh	r0, [r2, #8]
    e64a:	89cd      	ldrh	r5, [r1, #14]
    e64c:	8155      	strh	r5, [r2, #10]
    e64e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e650:	42ae      	cmp	r6, r5
    e652:	d108      	bne.n	e666 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e654:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e656:	4285      	cmp	r5, r0
    e658:	d105      	bne.n	e666 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e65a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e65c:	429d      	cmp	r5, r3
    e65e:	d102      	bne.n	e666 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e660:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e662:	42a3      	cmp	r3, r4
    e664:	d001      	beq.n	e66a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e666:	2301      	movs	r3, #1
    e668:	e000      	b.n	e66c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e66a:	2300      	movs	r3, #0
    e66c:	7313      	strb	r3, [r2, #12]
    e66e:	8548      	strh	r0, [r1, #42]	; 0x2a
    e670:	8950      	ldrh	r0, [r2, #10]
    e672:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e674:	8890      	ldrh	r0, [r2, #4]
    e676:	8588      	strh	r0, [r1, #44]	; 0x2c
    e678:	88d0      	ldrh	r0, [r2, #6]
    e67a:	8608      	strh	r0, [r1, #48]	; 0x30
    e67c:	2001      	movs	r0, #1
    e67e:	7010      	strb	r0, [r2, #0]
    e680:	bd70      	pop	{r4, r5, r6, pc}

0000e682 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e682:	b510      	push	{r4, lr}
    e684:	888c      	ldrh	r4, [r1, #4]
    e686:	890a      	ldrh	r2, [r1, #8]
    e688:	884b      	ldrh	r3, [r1, #2]
    e68a:	88c9      	ldrh	r1, [r1, #6]
    e68c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e690:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e694:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e698:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e69c:	bd10      	pop	{r4, pc}

0000e69e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e69e:	b570      	push	{r4, r5, r6, lr}
    e6a0:	4615      	mov	r5, r2
    e6a2:	460c      	mov	r4, r1
    e6a4:	f000 f8c7 	bl	e836 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e6a8:	3096      	adds	r0, #150	; 0x96
    e6aa:	4428      	add	r0, r5
    e6ac:	42a0      	cmp	r0, r4
    e6ae:	d801      	bhi.n	e6b4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e6b0:	1a20      	subs	r0, r4, r0
    e6b2:	bd70      	pop	{r4, r5, r6, pc}
    e6b4:	2000      	movs	r0, #0
    e6b6:	bd70      	pop	{r4, r5, r6, pc}

0000e6b8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e6bc:	4604      	mov	r4, r0
    e6be:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e6c0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e6c2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e6c6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e6ca:	4285      	cmp	r5, r0
    e6cc:	d300      	bcc.n	e6d0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e6ce:	4605      	mov	r5, r0
    e6d0:	4620      	mov	r0, r4
    e6d2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e6d6:	f000 f89e 	bl	e816 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e6da:	4601      	mov	r1, r0
    e6dc:	86e5      	strh	r5, [r4, #54]	; 0x36
    e6de:	8761      	strh	r1, [r4, #58]	; 0x3a
    e6e0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e6e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e6e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e6e8:	4680      	mov	r8, r0
    e6ea:	42aa      	cmp	r2, r5
    e6ec:	d200      	bcs.n	e6f0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e6ee:	462a      	mov	r2, r5
    e6f0:	428b      	cmp	r3, r1
    e6f2:	d200      	bcs.n	e6f6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e6f4:	460b      	mov	r3, r1
    e6f6:	8202      	strh	r2, [r0, #16]
    e6f8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e6fc:	42bd      	cmp	r5, r7
    e6fe:	d101      	bne.n	e704 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e700:	42b1      	cmp	r1, r6
    e702:	d001      	beq.n	e708 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e704:	2001      	movs	r0, #1
    e706:	e000      	b.n	e70a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e708:	2000      	movs	r0, #0
    e70a:	4681      	mov	r9, r0
    e70c:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e710:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e714:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e716:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e718:	4285      	cmp	r5, r0
    e71a:	d300      	bcc.n	e71e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e71c:	4605      	mov	r5, r0
    e71e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e722:	4620      	mov	r0, r4
    e724:	f000 f87f 	bl	e826 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e728:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e72c:	2902      	cmp	r1, #2
    e72e:	d108      	bne.n	e742 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e730:	42af      	cmp	r7, r5
    e732:	d200      	bcs.n	e736 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e734:	463d      	mov	r5, r7
    e736:	4286      	cmp	r6, r0
    e738:	d200      	bcs.n	e73c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e73a:	4630      	mov	r0, r6
    e73c:	2100      	movs	r1, #0
    e73e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e742:	f8a8 5008 	strh.w	r5, [r8, #8]
    e746:	f8a8 000c 	strh.w	r0, [r8, #12]
    e74a:	42bd      	cmp	r5, r7
    e74c:	d101      	bne.n	e752 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e74e:	42b0      	cmp	r0, r6
    e750:	d001      	beq.n	e756 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e752:	2001      	movs	r0, #1
    e754:	e000      	b.n	e758 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e756:	2000      	movs	r0, #0
    e758:	ea40 0009 	orr.w	r0, r0, r9
    e75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e760 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e760:	6840      	ldr	r0, [r0, #4]
    e762:	4770      	bx	lr

0000e764 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e768:	4616      	mov	r6, r2
    e76a:	460f      	mov	r7, r1
    e76c:	4604      	mov	r4, r0
    e76e:	f000 f862 	bl	e836 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e772:	4605      	mov	r5, r0
    e774:	463a      	mov	r2, r7
    e776:	68e1      	ldr	r1, [r4, #12]
    e778:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e77a:	f000 f847 	bl	e80c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e77e:	19a9      	adds	r1, r5, r6
    e780:	4281      	cmp	r1, r0
    e782:	d300      	bcc.n	e786 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e784:	4608      	mov	r0, r1
    e786:	6320      	str	r0, [r4, #48]	; 0x30
    e788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e78c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e78c:	221b      	movs	r2, #27
    e78e:	8402      	strh	r2, [r0, #32]
    e790:	8382      	strh	r2, [r0, #28]
    e792:	82c2      	strh	r2, [r0, #22]
    e794:	8282      	strh	r2, [r0, #20]
    e796:	8142      	strh	r2, [r0, #10]
    e798:	8202      	strh	r2, [r0, #16]
    e79a:	8102      	strh	r2, [r0, #8]
    e79c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e79e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e7a0:	8482      	strh	r2, [r0, #36]	; 0x24
    e7a2:	2900      	cmp	r1, #0
    e7a4:	d10a      	bne.n	e7bc <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e7a6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e7aa:	8441      	strh	r1, [r0, #34]	; 0x22
    e7ac:	83c1      	strh	r1, [r0, #30]
    e7ae:	8341      	strh	r1, [r0, #26]
    e7b0:	8301      	strh	r1, [r0, #24]
    e7b2:	81c1      	strh	r1, [r0, #14]
    e7b4:	8241      	strh	r1, [r0, #18]
    e7b6:	8181      	strh	r1, [r0, #12]
    e7b8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e7ba:	8601      	strh	r1, [r0, #48]	; 0x30
    e7bc:	4770      	bx	lr

0000e7be <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e7be:	6800      	ldr	r0, [r0, #0]
    e7c0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e7c4:	4290      	cmp	r0, r2
    e7c6:	d903      	bls.n	e7d0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e7c8:	1a40      	subs	r0, r0, r1
    e7ca:	389c      	subs	r0, #156	; 0x9c
    e7cc:	0840      	lsrs	r0, r0, #1
    e7ce:	4770      	bx	lr
    e7d0:	2000      	movs	r0, #0
    e7d2:	4770      	bx	lr

0000e7d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e7d4:	b510      	push	{r4, lr}
    e7d6:	9c02      	ldr	r4, [sp, #8]
    e7d8:	8281      	strh	r1, [r0, #20]
    e7da:	82c2      	strh	r2, [r0, #22]
    e7dc:	8303      	strh	r3, [r0, #24]
    e7de:	8344      	strh	r4, [r0, #26]
    e7e0:	bd10      	pop	{r4, pc}

0000e7e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e7e2:	8050      	strh	r0, [r2, #2]
    e7e4:	8a88      	ldrh	r0, [r1, #20]
    e7e6:	8090      	strh	r0, [r2, #4]
    e7e8:	8ac8      	ldrh	r0, [r1, #22]
    e7ea:	80d0      	strh	r0, [r2, #6]
    e7ec:	8b08      	ldrh	r0, [r1, #24]
    e7ee:	8110      	strh	r0, [r2, #8]
    e7f0:	8b48      	ldrh	r0, [r1, #26]
    e7f2:	8150      	strh	r0, [r2, #10]
    e7f4:	2001      	movs	r0, #1
    e7f6:	7010      	strb	r0, [r2, #0]
    e7f8:	4770      	bx	lr
    e7fa:	2902      	cmp	r1, #2
    e7fc:	d003      	beq.n	e806 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e7fe:	00c0      	lsls	r0, r0, #3
    e800:	3070      	adds	r0, #112	; 0x70
    e802:	b280      	uxth	r0, r0
    e804:	4770      	bx	lr
    e806:	0080      	lsls	r0, r0, #2
    e808:	303c      	adds	r0, #60	; 0x3c
    e80a:	e7fa      	b.n	e802 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e80c:	4288      	cmp	r0, r1
    e80e:	d300      	bcc.n	e812 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e810:	4608      	mov	r0, r1
    e812:	1a80      	subs	r0, r0, r2
    e814:	4770      	bx	lr
    e816:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e81a:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e81e:	4281      	cmp	r1, r0
    e820:	d200      	bcs.n	e824 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e822:	4608      	mov	r0, r1
    e824:	4770      	bx	lr
    e826:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e82a:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e82e:	4281      	cmp	r1, r0
    e830:	d200      	bcs.n	e834 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e832:	4608      	mov	r0, r1
    e834:	4770      	bx	lr
    e836:	2196      	movs	r1, #150	; 0x96
    e838:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e83c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e840:	f000 b800 	b.w	e844 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e848:	460d      	mov	r5, r1
    e84a:	4606      	mov	r6, r0
    e84c:	4698      	mov	r8, r3
    e84e:	4617      	mov	r7, r2
    e850:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e852:	4611      	mov	r1, r2
    e854:	f7ff ffd1 	bl	e7fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e858:	4604      	mov	r4, r0
    e85a:	4639      	mov	r1, r7
    e85c:	4630      	mov	r0, r6
    e85e:	f7ff ffe2 	bl	e826 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e862:	42a0      	cmp	r0, r4
    e864:	d200      	bcs.n	e868 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e866:	4604      	mov	r4, r0
    e868:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e86a:	4641      	mov	r1, r8
    e86c:	f7ff ffc5 	bl	e7fa <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e870:	4607      	mov	r7, r0
    e872:	4641      	mov	r1, r8
    e874:	4630      	mov	r0, r6
    e876:	f7ff ffce 	bl	e816 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e87a:	42b8      	cmp	r0, r7
    e87c:	d300      	bcc.n	e880 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e87e:	4638      	mov	r0, r7
    e880:	4420      	add	r0, r4
    e882:	4428      	add	r0, r5
    e884:	1d80      	adds	r0, r0, #6
    e886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e88a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    e88a:	b510      	push	{r4, lr}
    e88c:	4604      	mov	r4, r0
    e88e:	2108      	movs	r1, #8
    e890:	4620      	mov	r0, r4
    e892:	f7f6 fa97 	bl	4dc4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e896:	6820      	ldr	r0, [r4, #0]
    e898:	2800      	cmp	r0, #0
    e89a:	d102      	bne.n	e8a2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    e89c:	6860      	ldr	r0, [r4, #4]
    e89e:	2800      	cmp	r0, #0
    e8a0:	d0f5      	beq.n	e88e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    e8a2:	bd10      	pop	{r4, pc}
    e8a4:	2801      	cmp	r0, #1
    e8a6:	d102      	bne.n	e8ae <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    e8a8:	7948      	ldrb	r0, [r1, #5]
    e8aa:	0980      	lsrs	r0, r0, #6
    e8ac:	d001      	beq.n	e8b2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    e8ae:	2000      	movs	r0, #0
    e8b0:	4770      	bx	lr
    e8b2:	2001      	movs	r0, #1
    e8b4:	4770      	bx	lr
    e8b6:	2801      	cmp	r0, #1
    e8b8:	d106      	bne.n	e8c8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e8ba:	7948      	ldrb	r0, [r1, #5]
    e8bc:	2101      	movs	r1, #1
    e8be:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e8c2:	d101      	bne.n	e8c8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e8c4:	2001      	movs	r0, #1
    e8c6:	4770      	bx	lr
    e8c8:	2000      	movs	r0, #0
    e8ca:	4770      	bx	lr
    e8cc:	2802      	cmp	r0, #2
    e8ce:	d003      	beq.n	e8d8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    e8d0:	2803      	cmp	r0, #3
    e8d2:	d001      	beq.n	e8d8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4e>
    e8d4:	2000      	movs	r0, #0
    e8d6:	4770      	bx	lr
    e8d8:	2001      	movs	r0, #1
    e8da:	4770      	bx	lr

0000e8dc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    e8dc:	b510      	push	{r4, lr}
    e8de:	4604      	mov	r4, r0
    e8e0:	7c00      	ldrb	r0, [r0, #16]
    e8e2:	f7ff fff3 	bl	e8cc <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    e8e6:	b148      	cbz	r0, e8fc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e8e8:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    e8ec:	f104 0150 	add.w	r1, r4, #80	; 0x50
    e8f0:	f7ff fa2e 	bl	dd50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    e8f4:	2808      	cmp	r0, #8
    e8f6:	d001      	beq.n	e8fc <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    e8f8:	2001      	movs	r0, #1
    e8fa:	bd10      	pop	{r4, pc}
    e8fc:	7c20      	ldrb	r0, [r4, #16]
    e8fe:	b118      	cbz	r0, e908 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e900:	2802      	cmp	r0, #2
    e902:	d001      	beq.n	e908 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    e904:	7de0      	ldrb	r0, [r4, #23]
    e906:	bd10      	pop	{r4, pc}
    e908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e90c:	2000      	movs	r0, #0
    e90e:	f7f7 b8e9 	b.w	5ae4 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000e912 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    e912:	b508      	push	{r3, lr}
    e914:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    e918:	f88d 1000 	strb.w	r1, [sp]
    e91c:	9900      	ldr	r1, [sp, #0]
    e91e:	9100      	str	r1, [sp, #0]
    e920:	f89d 1000 	ldrb.w	r1, [sp]
    e924:	b109      	cbz	r1, e92a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    e926:	2001      	movs	r0, #1
    e928:	bd08      	pop	{r3, pc}
    e92a:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    e92e:	f88d 0000 	strb.w	r0, [sp]
    e932:	9800      	ldr	r0, [sp, #0]
    e934:	9000      	str	r0, [sp, #0]
    e936:	f89d 0000 	ldrb.w	r0, [sp]
    e93a:	2000      	movs	r0, #0
    e93c:	bd08      	pop	{r3, pc}

0000e93e <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    e93e:	20ff      	movs	r0, #255	; 0xff
    e940:	7008      	strb	r0, [r1, #0]
    e942:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    e944:	f7ff b955 	b.w	dbf2 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000e948 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    e948:	b51c      	push	{r2, r3, r4, lr}
    e94a:	4604      	mov	r4, r0
    e94c:	22d4      	movs	r2, #212	; 0xd4
    e94e:	2100      	movs	r1, #0
    e950:	f7fe f878 	bl	ca44 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e954:	20ff      	movs	r0, #255	; 0xff
    e956:	7020      	strb	r0, [r4, #0]
    e958:	207f      	movs	r0, #127	; 0x7f
    e95a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    e95e:	2013      	movs	r0, #19
    e960:	8060      	strh	r0, [r4, #2]
    e962:	f7f6 fe6f 	bl	5644 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    e966:	4601      	mov	r1, r0
    e968:	62e0      	str	r0, [r4, #44]	; 0x2c
    e96a:	2200      	movs	r2, #0
    e96c:	4668      	mov	r0, sp
    e96e:	f7ff f8ab 	bl	dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e972:	2200      	movs	r2, #0
    e974:	2101      	movs	r1, #1
    e976:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e978:	f7ff f91b 	bl	dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e97c:	2204      	movs	r2, #4
    e97e:	4668      	mov	r0, sp
    e980:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    e982:	f7ff f8a1 	bl	dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    e986:	2200      	movs	r2, #0
    e988:	4611      	mov	r1, r2
    e98a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e98c:	f7ff f911 	bl	dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    e990:	2000      	movs	r0, #0
    e992:	73a0      	strb	r0, [r4, #14]
    e994:	f104 0020 	add.w	r0, r4, #32
    e998:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    e99c:	f000 b962 	b.w	ec64 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000e9a0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    e9a0:	7880      	ldrb	r0, [r0, #2]
    e9a2:	f3c0 0080 	ubfx	r0, r0, #2, #1
    e9a6:	b108      	cbz	r0, e9ac <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    e9a8:	2000      	movs	r0, #0
    e9aa:	4770      	bx	lr
    e9ac:	201f      	movs	r0, #31
    e9ae:	4770      	bx	lr

0000e9b0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    e9b0:	f7f9 b9ce 	b.w	7d50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>

0000e9b4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    e9b4:	6880      	ldr	r0, [r0, #8]
    e9b6:	4770      	bx	lr

0000e9b8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    e9b8:	2001      	movs	r0, #1
    e9ba:	4770      	bx	lr

0000e9bc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    e9bc:	b510      	push	{r4, lr}
    e9be:	4604      	mov	r4, r0
    e9c0:	3020      	adds	r0, #32
    e9c2:	f000 f90f 	bl	ebe4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    e9c6:	8861      	ldrh	r1, [r4, #2]
    e9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e9cc:	2228      	movs	r2, #40	; 0x28
    e9ce:	f7f9 bb9f 	b.w	8110 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000e9d2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    e9d2:	2200      	movs	r2, #0
    e9d4:	6282      	str	r2, [r0, #40]	; 0x28
    e9d6:	8843      	ldrh	r3, [r0, #2]
    e9d8:	2b1d      	cmp	r3, #29
    e9da:	d001      	beq.n	e9e0 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    e9dc:	7341      	strb	r1, [r0, #13]
    e9de:	4770      	bx	lr
    e9e0:	7342      	strb	r2, [r0, #13]
    e9e2:	4770      	bx	lr

0000e9e4 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    e9e4:	b510      	push	{r4, lr}
    e9e6:	2400      	movs	r4, #0
    e9e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    e9ea:	f7ff f8d0 	bl	db8e <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    e9ee:	b100      	cbz	r0, e9f2 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    e9f0:	2001      	movs	r0, #1
    e9f2:	4384      	bics	r4, r0
    e9f4:	f084 0001 	eor.w	r0, r4, #1
    e9f8:	bd10      	pop	{r4, pc}

0000e9fa <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    e9fa:	2000      	movs	r0, #0
    e9fc:	4770      	bx	lr

0000e9fe <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    e9fe:	7880      	ldrb	r0, [r0, #2]
    ea00:	f000 0001 	and.w	r0, r0, #1
    ea04:	4770      	bx	lr

0000ea06 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ea06:	7880      	ldrb	r0, [r0, #2]
    ea08:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ea0c:	4770      	bx	lr

0000ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ea0e:	2001      	movs	r0, #1
    ea10:	4770      	bx	lr

0000ea12 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ea12:	7880      	ldrb	r0, [r0, #2]
    ea14:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ea18:	4770      	bx	lr

0000ea1a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ea1a:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ea1e:	4770      	bx	lr

0000ea20 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ea20:	7800      	ldrb	r0, [r0, #0]
    ea22:	28ff      	cmp	r0, #255	; 0xff
    ea24:	d001      	beq.n	ea2a <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ea26:	2001      	movs	r0, #1
    ea28:	4770      	bx	lr
    ea2a:	2000      	movs	r0, #0
    ea2c:	4770      	bx	lr

0000ea2e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    ea2e:	680a      	ldr	r2, [r1, #0]
    ea30:	f840 2f11 	str.w	r2, [r0, #17]!
    ea34:	8889      	ldrh	r1, [r1, #4]
    ea36:	8081      	strh	r1, [r0, #4]
    ea38:	2101      	movs	r1, #1
    ea3a:	7181      	strb	r1, [r0, #6]
    ea3c:	4770      	bx	lr

0000ea3e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ea3e:	7b00      	ldrb	r0, [r0, #12]
    ea40:	4770      	bx	lr

0000ea42 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ea42:	2001      	movs	r0, #1
    ea44:	4770      	bx	lr

0000ea46 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ea46:	61c1      	str	r1, [r0, #28]
    ea48:	4770      	bx	lr

0000ea4a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ea4a:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    ea4e:	4770      	bx	lr

0000ea50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    ea50:	b570      	push	{r4, r5, r6, lr}
    ea52:	4604      	mov	r4, r0
    ea54:	7880      	ldrb	r0, [r0, #2]
    ea56:	2501      	movs	r5, #1
    ea58:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ea5c:	b138      	cbz	r0, ea6e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    ea5e:	233c      	movs	r3, #60	; 0x3c
    ea60:	22ff      	movs	r2, #255	; 0xff
    ea62:	4620      	mov	r0, r4
    ea64:	69e1      	ldr	r1, [r4, #28]
    ea66:	f7f9 f99f 	bl	7da8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>
    ea6a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    ea6e:	78a0      	ldrb	r0, [r4, #2]
    ea70:	07c0      	lsls	r0, r0, #31
    ea72:	f7f8 fa99 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ea76:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    ea7a:	bd70      	pop	{r4, r5, r6, pc}

0000ea7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ea7c:	7bc0      	ldrb	r0, [r0, #15]
    ea7e:	2800      	cmp	r0, #0
    ea80:	d000      	beq.n	ea84 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ea82:	2001      	movs	r0, #1
    ea84:	4770      	bx	lr
    ea86:	b510      	push	{r4, lr}
    ea88:	f7ff f962 	bl	dd50 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ea8c:	4604      	mov	r4, r0
    ea8e:	f7f7 fecb 	bl	6828 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    ea92:	b138      	cbz	r0, eaa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    ea94:	4620      	mov	r0, r4
    ea96:	f7f7 fdff 	bl	6698 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    ea9a:	b118      	cbz	r0, eaa4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    ea9c:	2110      	movs	r1, #16
    ea9e:	f7ff fb37 	bl	e110 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    eaa2:	b108      	cbz	r0, eaa8 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    eaa4:	2000      	movs	r0, #0
    eaa6:	bd10      	pop	{r4, pc}
    eaa8:	2001      	movs	r0, #1
    eaaa:	bd10      	pop	{r4, pc}
    eaac:	2101      	movs	r1, #1
    eaae:	f7f8 bddb 	b.w	7668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    eab2:	2101      	movs	r1, #1
    eab4:	f7f8 bdd8 	b.w	7668 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    eab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eabc:	4604      	mov	r4, r0
    eabe:	2700      	movs	r7, #0
    eac0:	704f      	strb	r7, [r1, #1]
    eac2:	2011      	movs	r0, #17
    eac4:	460d      	mov	r5, r1
    eac6:	7008      	strb	r0, [r1, #0]
    eac8:	2220      	movs	r2, #32
    eaca:	f104 0166 	add.w	r1, r4, #102	; 0x66
    eace:	1d28      	adds	r0, r5, #4
    ead0:	f7fd ff3e 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ead4:	2601      	movs	r6, #1
    ead6:	722e      	strb	r6, [r5, #8]
    ead8:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    eadc:	7928      	ldrb	r0, [r5, #4]
    eade:	2800      	cmp	r0, #0
    eae0:	d111      	bne.n	eb06 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    eae2:	88e8      	ldrh	r0, [r5, #6]
    eae4:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    eae8:	69e0      	ldr	r0, [r4, #28]
    eaea:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    eaee:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    eaf2:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    eaf6:	8800      	ldrh	r0, [r0, #0]
    eaf8:	f7f6 fce4 	bl	54c4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    eafc:	f7fe fe04 	bl	d708 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    eb00:	69e0      	ldr	r0, [r4, #28]
    eb02:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    eb06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eb0e:	4604      	mov	r4, r0
    eb10:	460f      	mov	r7, r1
    eb12:	7e40      	ldrb	r0, [r0, #25]
    eb14:	f7f7 fd80 	bl	6618 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    eb18:	4606      	mov	r6, r0
    eb1a:	7e20      	ldrb	r0, [r4, #24]
    eb1c:	f104 0549 	add.w	r5, r4, #73	; 0x49
    eb20:	b120      	cbz	r0, eb2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    eb22:	b11e      	cbz	r6, eb2c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    eb24:	7e60      	ldrb	r0, [r4, #25]
    eb26:	f7f7 fd6b 	bl	6600 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    eb2a:	b1a0      	cbz	r0, eb56 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    eb2c:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    eb30:	2800      	cmp	r0, #0
    eb32:	d024      	beq.n	eb7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    eb34:	7ea0      	ldrb	r0, [r4, #26]
    eb36:	2800      	cmp	r0, #0
    eb38:	d021      	beq.n	eb7e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    eb3a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    eb3e:	4629      	mov	r1, r5
    eb40:	f7ff feb9 	bl	e8b6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    eb44:	b1a8      	cbz	r0, eb72 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    eb46:	f7f7 fd57 	bl	65f8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    eb4a:	463a      	mov	r2, r7
    eb4c:	4629      	mov	r1, r5
    eb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb52:	f7ff b895 	b.w	dc80 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eb56:	2001      	movs	r0, #1
    eb58:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    eb5c:	463a      	mov	r2, r7
    eb5e:	4629      	mov	r1, r5
    eb60:	4630      	mov	r0, r6
    eb62:	f7ff f88d 	bl	dc80 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    eb66:	7e61      	ldrb	r1, [r4, #25]
    eb68:	4628      	mov	r0, r5
    eb6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb6e:	f7f7 bd5f 	b.w	6630 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    eb72:	4639      	mov	r1, r7
    eb74:	4628      	mov	r0, r5
    eb76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    eb7a:	f7ff b870 	b.w	dc5e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    eb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eb82:	b510      	push	{r4, lr}
    eb84:	4604      	mov	r4, r0
    eb86:	4608      	mov	r0, r1
    eb88:	f7fd f9dc 	bl	bf44 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    eb8c:	7921      	ldrb	r1, [r4, #4]
    eb8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb92:	2025      	movs	r0, #37	; 0x25
    eb94:	f001 bdad 	b.w	106f2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    eb98:	b510      	push	{r4, lr}
    eb9a:	4604      	mov	r4, r0
    eb9c:	3026      	adds	r0, #38	; 0x26
    eb9e:	f7fd f98d 	bl	bebc <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    eba2:	2800      	cmp	r0, #0
    eba4:	d102      	bne.n	ebac <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    eba6:	207f      	movs	r0, #127	; 0x7f
    eba8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ebac:	bd10      	pop	{r4, pc}
    ebae:	7802      	ldrb	r2, [r0, #0]
    ebb0:	2320      	movs	r3, #32
    ebb2:	f022 0220 	bic.w	r2, r2, #32
    ebb6:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ebba:	430a      	orrs	r2, r1
    ebbc:	7002      	strb	r2, [r0, #0]
    ebbe:	4770      	bx	lr

0000ebc0 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ebc0:	b570      	push	{r4, r5, r6, lr}
    ebc2:	7001      	strb	r1, [r0, #0]
    ebc4:	7042      	strb	r2, [r0, #1]
    ebc6:	4614      	mov	r4, r2
    ebc8:	460d      	mov	r5, r1
    ebca:	7880      	ldrb	r0, [r0, #2]
    ebcc:	f000 f87f 	bl	ecce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ebd0:	fb10 f005 	smulbb	r0, r0, r5
    ebd4:	4360      	muls	r0, r4
    ebd6:	28ff      	cmp	r0, #255	; 0xff
    ebd8:	d303      	bcc.n	ebe2 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ebda:	215c      	movs	r1, #92	; 0x5c
    ebdc:	202e      	movs	r0, #46	; 0x2e
    ebde:	f7f6 f857 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebe2:	bd70      	pop	{r4, r5, r6, pc}

0000ebe4 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ebe4:	b510      	push	{r4, lr}
    ebe6:	4604      	mov	r4, r0
    ebe8:	7880      	ldrb	r0, [r0, #2]
    ebea:	f000 f870 	bl	ecce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ebee:	7861      	ldrb	r1, [r4, #1]
    ebf0:	7822      	ldrb	r2, [r4, #0]
    ebf2:	fb11 f102 	smulbb	r1, r1, r2
    ebf6:	4348      	muls	r0, r1
    ebf8:	b2c0      	uxtb	r0, r0
    ebfa:	bd10      	pop	{r4, pc}

0000ebfc <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ebfc:	b510      	push	{r4, lr}
    ebfe:	4604      	mov	r4, r0
    ec00:	f000 f84d 	bl	ec9e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ec04:	7961      	ldrb	r1, [r4, #5]
    ec06:	1c49      	adds	r1, r1, #1
    ec08:	b2c9      	uxtb	r1, r1
    ec0a:	7161      	strb	r1, [r4, #5]
    ec0c:	7862      	ldrb	r2, [r4, #1]
    ec0e:	4291      	cmp	r1, r2
    ec10:	d10b      	bne.n	ec2a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ec12:	2200      	movs	r2, #0
    ec14:	7162      	strb	r2, [r4, #5]
    ec16:	78e1      	ldrb	r1, [r4, #3]
    ec18:	4301      	orrs	r1, r0
    ec1a:	70e1      	strb	r1, [r4, #3]
    ec1c:	78a3      	ldrb	r3, [r4, #2]
    ec1e:	4299      	cmp	r1, r3
    ec20:	d103      	bne.n	ec2a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ec22:	70e2      	strb	r2, [r4, #3]
    ec24:	7921      	ldrb	r1, [r4, #4]
    ec26:	1c49      	adds	r1, r1, #1
    ec28:	7121      	strb	r1, [r4, #4]
    ec2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec2e:	f000 b825 	b.w	ec7c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ec32 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ec32:	7081      	strb	r1, [r0, #2]
    ec34:	4770      	bx	lr

0000ec36 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ec36:	b570      	push	{r4, r5, r6, lr}
    ec38:	4604      	mov	r4, r0
    ec3a:	7880      	ldrb	r0, [r0, #2]
    ec3c:	f000 f847 	bl	ecce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ec40:	7861      	ldrb	r1, [r4, #1]
    ec42:	fb11 f500 	smulbb	r5, r1, r0
    ec46:	78e0      	ldrb	r0, [r4, #3]
    ec48:	f000 f841 	bl	ecce <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ec4c:	7861      	ldrb	r1, [r4, #1]
    ec4e:	7962      	ldrb	r2, [r4, #5]
    ec50:	fb10 2001 	smlabb	r0, r0, r1, r2
    ec54:	7821      	ldrb	r1, [r4, #0]
    ec56:	7922      	ldrb	r2, [r4, #4]
    ec58:	1a89      	subs	r1, r1, r2
    ec5a:	fb11 f105 	smulbb	r1, r1, r5
    ec5e:	1a08      	subs	r0, r1, r0
    ec60:	b2c0      	uxtb	r0, r0
    ec62:	bd70      	pop	{r4, r5, r6, pc}

0000ec64 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ec64:	2100      	movs	r1, #0
    ec66:	6001      	str	r1, [r0, #0]
    ec68:	8081      	strh	r1, [r0, #4]
    ec6a:	2101      	movs	r1, #1
    ec6c:	7041      	strb	r1, [r0, #1]
    ec6e:	7001      	strb	r1, [r0, #0]
    ec70:	4770      	bx	lr

0000ec72 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ec72:	2100      	movs	r1, #0
    ec74:	70c1      	strb	r1, [r0, #3]
    ec76:	7141      	strb	r1, [r0, #5]
    ec78:	7101      	strb	r1, [r0, #4]
    ec7a:	4770      	bx	lr
    ec7c:	b510      	push	{r4, lr}
    ec7e:	2801      	cmp	r0, #1
    ec80:	d007      	beq.n	ec92 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    ec82:	2802      	cmp	r0, #2
    ec84:	d007      	beq.n	ec96 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    ec86:	2804      	cmp	r0, #4
    ec88:	d007      	beq.n	ec9a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    ec8a:	2139      	movs	r1, #57	; 0x39
    ec8c:	202e      	movs	r0, #46	; 0x2e
    ec8e:	f7f5 ffff 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ec92:	2025      	movs	r0, #37	; 0x25
    ec94:	bd10      	pop	{r4, pc}
    ec96:	2026      	movs	r0, #38	; 0x26
    ec98:	bd10      	pop	{r4, pc}
    ec9a:	2027      	movs	r0, #39	; 0x27
    ec9c:	bd10      	pop	{r4, pc}
    ec9e:	4601      	mov	r1, r0
    eca0:	2000      	movs	r0, #0
    eca2:	788a      	ldrb	r2, [r1, #2]
    eca4:	07d3      	lsls	r3, r2, #31
    eca6:	d002      	beq.n	ecae <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    eca8:	78cb      	ldrb	r3, [r1, #3]
    ecaa:	07db      	lsls	r3, r3, #31
    ecac:	d006      	beq.n	ecbc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    ecae:	0793      	lsls	r3, r2, #30
    ecb0:	d506      	bpl.n	ecc0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ecb2:	78cb      	ldrb	r3, [r1, #3]
    ecb4:	079b      	lsls	r3, r3, #30
    ecb6:	d403      	bmi.n	ecc0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    ecb8:	2002      	movs	r0, #2
    ecba:	4770      	bx	lr
    ecbc:	2001      	movs	r0, #1
    ecbe:	4770      	bx	lr
    ecc0:	0752      	lsls	r2, r2, #29
    ecc2:	d5fc      	bpl.n	ecbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ecc4:	78c9      	ldrb	r1, [r1, #3]
    ecc6:	0749      	lsls	r1, r1, #29
    ecc8:	d4f9      	bmi.n	ecbe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    ecca:	2004      	movs	r0, #4
    eccc:	4770      	bx	lr
    ecce:	f3c0 0180 	ubfx	r1, r0, #2, #1
    ecd2:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ecd6:	4411      	add	r1, r2
    ecd8:	f000 0001 	and.w	r0, r0, #1
    ecdc:	4408      	add	r0, r1
    ecde:	4770      	bx	lr

0000ece0 <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ece0:	f240 315a 	movw	r1, #858	; 0x35a
    ece4:	4348      	muls	r0, r1
    ece6:	4770      	bx	lr

0000ece8 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ece8:	f240 20ef 	movw	r0, #751	; 0x2ef
    ecec:	4770      	bx	lr
    ecee:	020e      	.short	0x020e
    ecf0:	0630041c 	.word	0x0630041c
    ecf4:	035a0c60 	.word	0x035a0c60
    ecf8:	05c506b4 	.word	0x05c506b4
    ecfc:	12250bf5 	.word	0x12250bf5
    ed00:	03b101a3 	.word	0x03b101a3
    ed04:	02ef05bf 	.word	0x02ef05bf
    ed08:	09a30649 	.word	0x09a30649

0000ed0c <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ed0c:	b510      	push	{r4, lr}
    ed0e:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ed12:	b109      	cbz	r1, ed18 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ed14:	2000      	movs	r0, #0
    ed16:	bd10      	pop	{r4, pc}
    ed18:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    ed1c:	b949      	cbnz	r1, ed32 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    ed1e:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    ed22:	b131      	cbz	r1, ed32 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    ed24:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    ed28:	428a      	cmp	r2, r1
    ed2a:	d902      	bls.n	ed32 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    ed2c:	f7ff fe90 	bl	ea50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ed30:	e7f0      	b.n	ed14 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ed32:	2001      	movs	r0, #1
    ed34:	bd10      	pop	{r4, pc}

0000ed36 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ed36:	b510      	push	{r4, lr}
    ed38:	b131      	cbz	r1, ed48 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ed3a:	2901      	cmp	r1, #1
    ed3c:	d008      	beq.n	ed50 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ed3e:	f240 718b 	movw	r1, #1931	; 0x78b
    ed42:	2030      	movs	r0, #48	; 0x30
    ed44:	f7f5 ffa4 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed4c:	f000 b9d4 	b.w	f0f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x314>
    ed50:	2100      	movs	r1, #0
    ed52:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    ed56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed5a:	f000 b93b 	b.w	efd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>

0000ed5e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ed5e:	b510      	push	{r4, lr}
    ed60:	4604      	mov	r4, r0
    ed62:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    ed66:	2800      	cmp	r0, #0
    ed68:	d019      	beq.n	ed9e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ed6a:	2001      	movs	r0, #1
    ed6c:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    ed70:	4601      	mov	r1, r0
    ed72:	4620      	mov	r0, r4
    ed74:	f7ff fe69 	bl	ea4a <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ed78:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    ed7c:	b170      	cbz	r0, ed9c <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    ed7e:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    ed82:	f7f4 f819 	bl	2db8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ed86:	7820      	ldrb	r0, [r4, #0]
    ed88:	f7f4 f964 	bl	3054 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    ed8c:	f814 09a0 	ldrb.w	r0, [r4], #-160
    ed90:	f7f4 f93e 	bl	3010 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed94:	b120      	cbz	r0, eda0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    ed96:	2000      	movs	r0, #0
    ed98:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    ed9c:	2000      	movs	r0, #0
    ed9e:	bd10      	pop	{r4, pc}
    eda0:	f240 2103 	movw	r1, #515	; 0x203
    eda4:	2030      	movs	r0, #48	; 0x30
    eda6:	f7f5 ff73 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000edaa <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    edaa:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    edae:	4770      	bx	lr

0000edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    edb0:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    edb4:	4770      	bx	lr

0000edb6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    edb6:	b50e      	push	{r1, r2, r3, lr}
    edb8:	4669      	mov	r1, sp
    edba:	2001      	movs	r0, #1
    edbc:	f7fe fdcd 	bl	d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    edc0:	b138      	cbz	r0, edd2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x1c>
    edc2:	f44f 71a1 	mov.w	r1, #322	; 0x142
    edc6:	2030      	movs	r0, #48	; 0x30
    edc8:	f7f5 ff62 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edcc:	9802      	ldr	r0, [sp, #8]
    edce:	f7ff ffc6 	bl	ed5e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    edd2:	4668      	mov	r0, sp
    edd4:	f7f6 f994 	bl	5100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    edd8:	2800      	cmp	r0, #0
    edda:	d0f7      	beq.n	edcc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x16>
    eddc:	f7f9 fb22 	bl	8424 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58>
    ede0:	2000      	movs	r0, #0
    ede2:	bd0e      	pop	{r1, r2, r3, pc}

0000ede4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    ede4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ede6:	4604      	mov	r4, r0
    ede8:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    edec:	2800      	cmp	r0, #0
    edee:	d153      	bne.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    edf0:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    edf4:	2803      	cmp	r0, #3
    edf6:	d14f      	bne.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    edf8:	f7fd fc35 	bl	c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    edfc:	4601      	mov	r1, r0
    edfe:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    ee02:	f7f3 fb75 	bl	24f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ee06:	2800      	cmp	r0, #0
    ee08:	dd46      	ble.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ee0a:	68e1      	ldr	r1, [r4, #12]
    ee0c:	b111      	cbz	r1, ee14 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30>
    ee0e:	fbb0 f0f1 	udiv	r0, r0, r1
    ee12:	e000      	b.n	ee16 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x32>
    ee14:	2000      	movs	r0, #0
    ee16:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ee1a:	1c40      	adds	r0, r0, #1
    ee1c:	4408      	add	r0, r1
    ee1e:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ee22:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ee26:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    ee2a:	1a08      	subs	r0, r1, r0
    ee2c:	b200      	sxth	r0, r0
    ee2e:	2800      	cmp	r0, #0
    ee30:	dd32      	ble.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ee32:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    ee36:	f7f3 ffbf 	bl	2db8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    ee3a:	2800      	cmp	r0, #0
    ee3c:	d02c      	beq.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ee3e:	2001      	movs	r0, #1
    ee40:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    ee44:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    ee48:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    ee4c:	ae01      	add	r6, sp, #4
    ee4e:	1a40      	subs	r0, r0, r1
    ee50:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    ee54:	1e40      	subs	r0, r0, #1
    ee56:	4408      	add	r0, r1
    ee58:	b285      	uxth	r5, r0
    ee5a:	e017      	b.n	ee8c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xa8>
    ee5c:	9600      	str	r6, [sp, #0]
    ee5e:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    ee62:	2300      	movs	r3, #0
    ee64:	2201      	movs	r2, #1
    ee66:	4620      	mov	r0, r4
    ee68:	f7f9 fbac 	bl	85c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    ee6c:	2800      	cmp	r0, #0
    ee6e:	d013      	beq.n	ee98 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb4>
    ee70:	2801      	cmp	r0, #1
    ee72:	d004      	beq.n	ee7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x9a>
    ee74:	f240 6101 	movw	r1, #1537	; 0x601
    ee78:	2030      	movs	r0, #48	; 0x30
    ee7a:	f7f5 ff09 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee7e:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ee82:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ee86:	4408      	add	r0, r1
    ee88:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ee8c:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ee90:	1a28      	subs	r0, r5, r0
    ee92:	b200      	sxth	r0, r0
    ee94:	2800      	cmp	r0, #0
    ee96:	dae1      	bge.n	ee5c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x78>
    ee98:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee9a:	2000      	movs	r0, #0
    ee9c:	4770      	bx	lr
    ee9e:	b570      	push	{r4, r5, r6, lr}
    eea0:	4604      	mov	r4, r0
    eea2:	2601      	movs	r6, #1
    eea4:	f000 f90c 	bl	f0c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    eea8:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    eeac:	2000      	movs	r0, #0
    eeae:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    eeb2:	2001      	movs	r0, #1
    eeb4:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    eeb8:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    eebc:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    eec0:	b160      	cbz	r0, eedc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xf8>
    eec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    eec6:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    eeca:	f7f3 fadf 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    eece:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    eed2:	2100      	movs	r1, #0
    eed4:	4628      	mov	r0, r5
    eed6:	f7ff f861 	bl	df9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    eeda:	e00f      	b.n	eefc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    eedc:	4620      	mov	r0, r4
    eede:	f7ff fd69 	bl	e9b4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    eee2:	4606      	mov	r6, r0
    eee4:	4631      	mov	r1, r6
    eee6:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    eeea:	f7f3 facf 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    eeee:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    eef2:	4631      	mov	r1, r6
    eef4:	4628      	mov	r0, r5
    eef6:	f7ff f851 	bl	df9c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    eefa:	1c46      	adds	r6, r0, #1
    eefc:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ef00:	1c41      	adds	r1, r0, #1
    ef02:	290a      	cmp	r1, #10
    ef04:	d202      	bcs.n	ef0c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x128>
    ef06:	4430      	add	r0, r6
    ef08:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    ef0c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    ef10:	b130      	cbz	r0, ef20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ef12:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    ef16:	1c40      	adds	r0, r0, #1
    ef18:	280a      	cmp	r0, #10
    ef1a:	d301      	bcc.n	ef20 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    ef1c:	2002      	movs	r0, #2
    ef1e:	e000      	b.n	ef22 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13e>
    ef20:	2003      	movs	r0, #3
    ef22:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    ef26:	2100      	movs	r1, #0
    ef28:	4620      	mov	r0, r4
    ef2a:	f000 f822 	bl	ef72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    ef2e:	b120      	cbz	r0, ef3a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x156>
    ef30:	4620      	mov	r0, r4
    ef32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ef36:	f000 b80d 	b.w	ef54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    ef3a:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    ef3e:	4629      	mov	r1, r5
    ef40:	f000 f8bc 	bl	f0bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    ef44:	2800      	cmp	r0, #0
    ef46:	d104      	bne.n	ef52 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16e>
    ef48:	f240 61a2 	movw	r1, #1698	; 0x6a2
    ef4c:	2030      	movs	r0, #48	; 0x30
    ef4e:	f7f5 fe9f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef52:	bd70      	pop	{r4, r5, r6, pc}
    ef54:	b510      	push	{r4, lr}
    ef56:	4604      	mov	r4, r0
    ef58:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    ef5c:	f7f4 f858 	bl	3010 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ef60:	2000      	movs	r0, #0
    ef62:	7520      	strb	r0, [r4, #20]
    ef64:	bd10      	pop	{r4, pc}
    ef66:	b510      	push	{r4, lr}
    ef68:	f7ff fd28 	bl	e9bc <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    ef6c:	f200 1009 	addw	r0, r0, #265	; 0x109
    ef70:	bd10      	pop	{r4, pc}
    ef72:	b570      	push	{r4, r5, r6, lr}
    ef74:	4604      	mov	r4, r0
    ef76:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    ef7a:	460d      	mov	r5, r1
    ef7c:	b108      	cbz	r0, ef82 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19e>
    ef7e:	2001      	movs	r0, #1
    ef80:	bd70      	pop	{r4, r5, r6, pc}
    ef82:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ef86:	b1a8      	cbz	r0, efb4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d0>
    ef88:	4620      	mov	r0, r4
    ef8a:	f7ff fd13 	bl	e9b4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    ef8e:	4405      	add	r5, r0
    ef90:	4620      	mov	r0, r4
    ef92:	f7ff ffe8 	bl	ef66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    ef96:	1941      	adds	r1, r0, r5
    ef98:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    ef9c:	4288      	cmp	r0, r1
    ef9e:	d206      	bcs.n	efae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ca>
    efa0:	2001      	movs	r0, #1
    efa2:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    efa6:	4620      	mov	r0, r4
    efa8:	f7ff fd52 	bl	ea50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    efac:	e7e7      	b.n	ef7e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19a>
    efae:	1b40      	subs	r0, r0, r5
    efb0:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    efb4:	2000      	movs	r0, #0
    efb6:	bd70      	pop	{r4, r5, r6, pc}
    efb8:	b510      	push	{r4, lr}
    efba:	4604      	mov	r4, r0
    efbc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    efc0:	f000 f9e8 	bl	f394 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    efc4:	4602      	mov	r2, r0
    efc6:	4620      	mov	r0, r4
    efc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efcc:	f240 111b 	movw	r1, #283	; 0x11b
    efd0:	f7ff bbc8 	b.w	e764 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    efd4:	b510      	push	{r4, lr}
    efd6:	f7fc fe07 	bl	bbe8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    efda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efde:	f7f4 b96d 	b.w	32bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    efe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    efe6:	4604      	mov	r4, r0
    efe8:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    efec:	2800      	cmp	r0, #0
    efee:	d051      	beq.n	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    eff0:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    eff4:	2803      	cmp	r0, #3
    eff6:	d14d      	bne.n	f094 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b0>
    eff8:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    effc:	f001 fac2 	bl	10584 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f000:	4605      	mov	r5, r0
    f002:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    f006:	f7f9 f9ff 	bl	8408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f00a:	4428      	add	r0, r5
    f00c:	b286      	uxth	r6, r0
    f00e:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    f012:	f7f9 f9f9 	bl	8408 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c>
    f016:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f01a:	fa1f f880 	uxth.w	r8, r0
    f01e:	4648      	mov	r0, r9
    f020:	f001 fb49 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f024:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    f028:	1a0d      	subs	r5, r1, r0
    f02a:	4648      	mov	r0, r9
    f02c:	f001 fb51 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f030:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f034:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f038:	fbb0 f0fa 	udiv	r0, r0, sl
    f03c:	1a2d      	subs	r5, r5, r0
    f03e:	4648      	mov	r0, r9
    f040:	f001 fb39 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f044:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    f048:	1a0f      	subs	r7, r1, r0
    f04a:	4648      	mov	r0, r9
    f04c:	f001 fb41 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f050:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f054:	4401      	add	r1, r0
    f056:	fbb1 f0fa 	udiv	r0, r1, sl
    f05a:	1a39      	subs	r1, r7, r0
    f05c:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f060:	4370      	muls	r0, r6
    f062:	fbb0 f2f8 	udiv	r2, r0, r8
    f066:	2029      	movs	r0, #41	; 0x29
    f068:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f06c:	3260      	adds	r2, #96	; 0x60
    f06e:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f072:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f076:	42a9      	cmp	r1, r5
    f078:	d801      	bhi.n	f07e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29a>
    f07a:	4285      	cmp	r5, r0
    f07c:	d901      	bls.n	f082 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29e>
    f07e:	f7f5 fa69 	bl	4554 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f082:	4631      	mov	r1, r6
    f084:	68e0      	ldr	r0, [r4, #12]
    f086:	f7fd fb22 	bl	c6ce <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f08a:	2100      	movs	r1, #0
    f08c:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    f090:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    f094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f098:	b570      	push	{r4, r5, r6, lr}
    f09a:	460c      	mov	r4, r1
    f09c:	4605      	mov	r5, r0
    f09e:	f001 fb18 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f0a2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f0a6:	4408      	add	r0, r1
    f0a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f0ac:	fbb0 f6f1 	udiv	r6, r0, r1
    f0b0:	4628      	mov	r0, r5
    f0b2:	f001 fb00 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f0b6:	4430      	add	r0, r6
    f0b8:	4420      	add	r0, r4
    f0ba:	bd70      	pop	{r4, r5, r6, pc}
    f0bc:	f7f3 bb4c 	b.w	2758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f0c0:	b510      	push	{r4, lr}
    f0c2:	4604      	mov	r4, r0
    f0c4:	f7ff fca3 	bl	ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f0c8:	b1a0      	cbz	r0, f0f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x310>
    f0ca:	4620      	mov	r0, r4
    f0cc:	f7ff fc97 	bl	e9fe <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f0d0:	b918      	cbnz	r0, f0da <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f0d2:	4620      	mov	r0, r4
    f0d4:	f7ff fc9d 	bl	ea12 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f0d8:	b120      	cbz	r0, f0e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x300>
    f0da:	2449      	movs	r4, #73	; 0x49
    f0dc:	f001 fab7 	bl	1064e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f0e0:	b928      	cbnz	r0, f0ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    f0e2:	e001      	b.n	f0e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x304>
    f0e4:	2442      	movs	r4, #66	; 0x42
    f0e6:	e7f9      	b.n	f0dc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f8>
    f0e8:	f001 faa7 	bl	1063a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f0ec:	b100      	cbz	r0, f0f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f0ee:	1de4      	adds	r4, r4, #7
    f0f0:	4620      	mov	r0, r4
    f0f2:	bd10      	pop	{r4, pc}
    f0f4:	206b      	movs	r0, #107	; 0x6b
    f0f6:	bd10      	pop	{r4, pc}
    f0f8:	b570      	push	{r4, r5, r6, lr}
    f0fa:	4604      	mov	r4, r0
    f0fc:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    f100:	2500      	movs	r5, #0
    f102:	b118      	cbz	r0, f10c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    f104:	2001      	movs	r0, #1
    f106:	f000 f887 	bl	f218 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x434>
    f10a:	4605      	mov	r5, r0
    f10c:	4620      	mov	r0, r4
    f10e:	f7ff fc51 	bl	e9b4 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f112:	1941      	adds	r1, r0, r5
    f114:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    f118:	34b8      	adds	r4, #184	; 0xb8
    f11a:	f7f3 f9b7 	bl	248c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    f11e:	2600      	movs	r6, #0
    f120:	60e0      	str	r0, [r4, #12]
    f122:	f804 6b0b 	strb.w	r6, [r4], #11
    f126:	2001      	movs	r0, #1
    f128:	f804 0901 	strb.w	r0, [r4], #-1
    f12c:	2003      	movs	r0, #3
    f12e:	f804 09c2 	strb.w	r0, [r4], #-194
    f132:	4620      	mov	r0, r4
    f134:	f7ff ffc4 	bl	f0c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2dc>
    f138:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    f13c:	4629      	mov	r1, r5
    f13e:	4620      	mov	r0, r4
    f140:	f7ff ff17 	bl	ef72 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f144:	b930      	cbnz	r0, f154 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x370>
    f146:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    f14a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    f14e:	f7ff ffb5 	bl	f0bc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    f152:	b128      	cbz	r0, f160 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    f154:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    f158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f15c:	f7ff bf3a 	b.w	efd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    f160:	f240 61eb 	movw	r1, #1771	; 0x6eb
    f164:	2030      	movs	r0, #48	; 0x30
    f166:	f7f5 fd93 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f16a:	b510      	push	{r4, lr}
    f16c:	4604      	mov	r4, r0
    f16e:	2000      	movs	r0, #0
    f170:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    f174:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    f178:	f7f3 ff4a 	bl	3010 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f17c:	2020      	movs	r0, #32
    f17e:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    f182:	bd10      	pop	{r4, pc}
    f184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f188:	2500      	movs	r5, #0
    f18a:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    f18e:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    f192:	4688      	mov	r8, r1
    f194:	4604      	mov	r4, r0
    f196:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    f19a:	2701      	movs	r7, #1
    f19c:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    f1a0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    f1a4:	4639      	mov	r1, r7
    f1a6:	34a0      	adds	r4, #160	; 0xa0
    f1a8:	f7f7 fcb0 	bl	6b0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f1ac:	6860      	ldr	r0, [r4, #4]
    f1ae:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    f1b2:	6861      	ldr	r1, [r4, #4]
    f1b4:	7820      	ldrb	r0, [r4, #0]
    f1b6:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    f1ba:	6861      	ldr	r1, [r4, #4]
    f1bc:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    f1c0:	6860      	ldr	r0, [r4, #4]
    f1c2:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    f1c6:	6864      	ldr	r4, [r4, #4]
    f1c8:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    f1cc:	2300      	movs	r3, #0
    f1ce:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    f1d2:	461a      	mov	r2, r3
    f1d4:	4619      	mov	r1, r3
    f1d6:	4620      	mov	r0, r4
    f1d8:	9500      	str	r5, [sp, #0]
    f1da:	f7f9 f9f3 	bl	85c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f1de:	b120      	cbz	r0, f1ea <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x406>
    f1e0:	f240 2117 	movw	r1, #535	; 0x217
    f1e4:	2030      	movs	r0, #48	; 0x30
    f1e6:	f7f5 fd53 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f1ea:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    f1ee:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    f1f2:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    f1f6:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    f1fa:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    f1fe:	f504 7498 	add.w	r4, r4, #304	; 0x130
    f202:	7665      	strb	r5, [r4, #25]
    f204:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    f208:	1e40      	subs	r0, r0, #1
    f20a:	f824 0cbc 	strh.w	r0, [r4, #-188]
    f20e:	86e5      	strh	r5, [r4, #54]	; 0x36
    f210:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f214:	f7ff bede 	b.w	efd4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f0>
    f218:	b510      	push	{r4, lr}
    f21a:	f7f9 fbdf 	bl	89dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    f21e:	f242 7110 	movw	r1, #10000	; 0x2710
    f222:	fbb0 f2f1 	udiv	r2, r0, r1
    f226:	fb01 0012 	mls	r0, r1, r2, r0
    f22a:	bd10      	pop	{r4, pc}
    f22c:	b570      	push	{r4, r5, r6, lr}
    f22e:	b140      	cbz	r0, f242 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45e>
    f230:	2909      	cmp	r1, #9
    f232:	d248      	bcs.n	f2c6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e2>
    f234:	e8df f001 	tbb	[pc, r1]
    f238:	3b3b1507 	.word	0x3b3b1507
    f23c:	3f294737 	.word	0x3f294737
    f240:	0043      	.short	0x0043
    f242:	21cd      	movs	r1, #205	; 0xcd
    f244:	e03c      	b.n	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f246:	4604      	mov	r4, r0
    f248:	f7f8 f9de 	bl	7608 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f24c:	b110      	cbz	r0, f254 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x470>
    f24e:	f240 2175 	movw	r1, #629	; 0x275
    f252:	e035      	b.n	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f254:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    f258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f25c:	38f8      	subs	r0, #248	; 0xf8
    f25e:	f7f4 b90f 	b.w	3480 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f262:	4605      	mov	r5, r0
    f264:	f7ff fbcf 	bl	ea06 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f268:	b9a8      	cbnz	r0, f296 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    f26a:	4628      	mov	r0, r5
    f26c:	f7ff fe7b 	bl	ef66 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f270:	4604      	mov	r4, r0
    f272:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    f276:	42a0      	cmp	r0, r4
    f278:	d20b      	bcs.n	f292 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    f27a:	1a20      	subs	r0, r4, r0
    f27c:	2104      	movs	r1, #4
    f27e:	f7f3 f833 	bl	22e8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f282:	b130      	cbz	r0, f292 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ae>
    f284:	4628      	mov	r0, r5
    f286:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f28a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f28e:	f7ff bb8f 	b.w	e9b0 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f292:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    f296:	4628      	mov	r0, r5
    f298:	f7f8 f9d2 	bl	7640 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f29c:	2800      	cmp	r0, #0
    f29e:	d014      	beq.n	f2ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e6>
    f2a0:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    f2a4:	e00c      	b.n	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f2a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2aa:	f7fc be51 	b.w	bf50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f2ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2b2:	f7ff bdf4 	b.w	ee9e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xba>
    f2b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f2ba:	f7ff be4b 	b.w	ef54 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f2be:	21ed      	movs	r1, #237	; 0xed
    f2c0:	2030      	movs	r0, #48	; 0x30
    f2c2:	f7f5 fce5 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2c6:	21f1      	movs	r1, #241	; 0xf1
    f2c8:	e7fa      	b.n	f2c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4dc>
    f2ca:	bd70      	pop	{r4, r5, r6, pc}
    f2cc:	b510      	push	{r4, lr}
    f2ce:	0004      	movs	r4, r0
    f2d0:	d008      	beq.n	f2e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x500>
    f2d2:	2909      	cmp	r1, #9
    f2d4:	d25c      	bcs.n	f390 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ac>
    f2d6:	e8df f001 	tbb	[pc, r1]
    f2da:	3607      	.short	0x3607
    f2dc:	5b3a3e3e 	.word	0x5b3a3e3e
    f2e0:	00574a43 	.word	0x00574a43
    f2e4:	2196      	movs	r1, #150	; 0x96
    f2e6:	e050      	b.n	f38a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    f2e8:	2100      	movs	r1, #0
    f2ea:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    f2ee:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    f2f2:	4620      	mov	r0, r4
    f2f4:	b189      	cbz	r1, f31a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x536>
    f2f6:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    f2fa:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    f2fe:	428a      	cmp	r2, r1
    f300:	d106      	bne.n	f310 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x52c>
    f302:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    f306:	1a51      	subs	r1, r2, r1
    f308:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f30c:	4611      	mov	r1, r2
    f30e:	e00d      	b.n	f32c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    f310:	1a51      	subs	r1, r2, r1
    f312:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f316:	b291      	uxth	r1, r2
    f318:	e008      	b.n	f32c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x548>
    f31a:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    f31e:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    f322:	1a89      	subs	r1, r1, r2
    f324:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    f328:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    f32c:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    f330:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    f334:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    f338:	f7f9 fd6c 	bl	8e14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f33c:	4620      	mov	r0, r4
    f33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f342:	f7f9 bb55 	b.w	89f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x624>
    f346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f34a:	f000 b905 	b.w	f558 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f34e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f352:	f7fc bdfd 	b.w	bf50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f356:	4620      	mov	r0, r4
    f358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f35c:	f000 b827 	b.w	f3ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ca>
    f360:	2001      	movs	r0, #1
    f362:	f7f2 ffb1 	bl	22c8 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f36a:	f7fe bcbe 	b.w	dcea <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    f36e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    f372:	2804      	cmp	r0, #4
    f374:	d001      	beq.n	f37a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f376:	21b8      	movs	r1, #184	; 0xb8
    f378:	e007      	b.n	f38a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    f37a:	4620      	mov	r0, r4
    f37c:	f7ff fef5 	bl	f16a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    f380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f384:	f7f7 be10 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f388:	21c1      	movs	r1, #193	; 0xc1
    f38a:	2030      	movs	r0, #48	; 0x30
    f38c:	f7f5 fc80 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f390:	21c5      	movs	r1, #197	; 0xc5
    f392:	e7fa      	b.n	f38a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5a6>
    f394:	b510      	push	{r4, lr}
    f396:	f001 f99c 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f39a:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f39e:	4408      	add	r0, r1
    f3a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f3a4:	fbb0 f0f1 	udiv	r0, r0, r1
    f3a8:	f500 70bb 	add.w	r0, r0, #374	; 0x176
    f3ac:	bd10      	pop	{r4, pc}
    f3ae:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f3b0:	4604      	mov	r4, r0
    f3b2:	f7fd f958 	bl	c666 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    f3b6:	4601      	mov	r1, r0
    f3b8:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    f3bc:	f7f3 f898 	bl	24f0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f3c0:	68e1      	ldr	r1, [r4, #12]
    f3c2:	b111      	cbz	r1, f3ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e6>
    f3c4:	fbb0 f0f1 	udiv	r0, r0, r1
    f3c8:	e000      	b.n	f3cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5e8>
    f3ca:	2000      	movs	r0, #0
    f3cc:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    f3d0:	290d      	cmp	r1, #13
    f3d2:	d00c      	beq.n	f3ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x60a>
    f3d4:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    f3d8:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f3dc:	1813      	adds	r3, r2, r0
    f3de:	1acb      	subs	r3, r1, r3
    f3e0:	b21b      	sxth	r3, r3
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	db06      	blt.n	f3f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x610>
    f3e6:	1c49      	adds	r1, r1, #1
    f3e8:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    f3ec:	e006      	b.n	f3fc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x618>
    f3ee:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f3f2:	e012      	b.n	f41a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x636>
    f3f4:	1c40      	adds	r0, r0, #1
    f3f6:	4410      	add	r0, r2
    f3f8:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f3fc:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    f400:	f88d 0000 	strb.w	r0, [sp]
    f404:	9800      	ldr	r0, [sp, #0]
    f406:	9000      	str	r0, [sp, #0]
    f408:	f89d 0000 	ldrb.w	r0, [sp]
    f40c:	b940      	cbnz	r0, f420 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    f40e:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f412:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    f416:	4288      	cmp	r0, r1
    f418:	d102      	bne.n	f420 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x63c>
    f41a:	1c40      	adds	r0, r0, #1
    f41c:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f420:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    f424:	1c40      	adds	r0, r0, #1
    f426:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    f42a:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    f42e:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    f432:	1a40      	subs	r0, r0, r1
    f434:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    f438:	1e40      	subs	r0, r0, #1
    f43a:	4408      	add	r0, r1
    f43c:	b285      	uxth	r5, r0
    f43e:	e026      	b.n	f48e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    f440:	a801      	add	r0, sp, #4
    f442:	2300      	movs	r3, #0
    f444:	9000      	str	r0, [sp, #0]
    f446:	461a      	mov	r2, r3
    f448:	4620      	mov	r0, r4
    f44a:	f7f9 f8bb 	bl	85c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>
    f44e:	2800      	cmp	r0, #0
    f450:	d038      	beq.n	f4c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6e0>
    f452:	2801      	cmp	r0, #1
    f454:	d004      	beq.n	f460 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x67c>
    f456:	f240 614e 	movw	r1, #1614	; 0x64e
    f45a:	2030      	movs	r0, #48	; 0x30
    f45c:	f7f5 fc18 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f460:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    f464:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    f468:	1a42      	subs	r2, r0, r1
    f46a:	b212      	sxth	r2, r2
    f46c:	2a00      	cmp	r2, #0
    f46e:	da09      	bge.n	f484 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    f470:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    f474:	4402      	add	r2, r0
    f476:	1aaa      	subs	r2, r5, r2
    f478:	b212      	sxth	r2, r2
    f47a:	2a00      	cmp	r2, #0
    f47c:	da02      	bge.n	f484 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6a0>
    f47e:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    f482:	e004      	b.n	f48e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6aa>
    f484:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f488:	4408      	add	r0, r1
    f48a:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    f48e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f492:	1a68      	subs	r0, r5, r1
    f494:	b200      	sxth	r0, r0
    f496:	2800      	cmp	r0, #0
    f498:	dad2      	bge.n	f440 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x65c>
    f49a:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    f49e:	b178      	cbz	r0, f4c0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6dc>
    f4a0:	2008      	movs	r0, #8
    f4a2:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    f4a6:	2001      	movs	r0, #1
    f4a8:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    f4ac:	4620      	mov	r0, r4
    f4ae:	f000 f855 	bl	f55c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    f4b2:	4620      	mov	r0, r4
    f4b4:	f7ff fe59 	bl	f16a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x386>
    f4b8:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    f4bc:	f7f7 bd74 	b.w	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f4c0:	203e      	movs	r0, #62	; 0x3e
    f4c2:	e7ee      	b.n	f4a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x6be>
    f4c4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f4c6:	01f4      	.short	0x01f4
    f4c8:	009600fa 	.word	0x009600fa
    f4cc:	004b0064 	.word	0x004b0064
    f4d0:	001e0032 	.word	0x001e0032
    f4d4:	000a0014 	.word	0x000a0014
    f4d8:	00020005 	.word	0x00020005
    f4dc:	0001      	.short	0x0001
    f4de:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f4e2:	f001 0307 	and.w	r3, r1, #7
    f4e6:	7802      	ldrb	r2, [r0, #0]
    f4e8:	2101      	movs	r1, #1
    f4ea:	4099      	lsls	r1, r3
    f4ec:	438a      	bics	r2, r1
    f4ee:	7002      	strb	r2, [r0, #0]
    f4f0:	4770      	bx	lr

0000f4f2 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    f4f2:	b510      	push	{r4, lr}
    f4f4:	4604      	mov	r4, r0
    f4f6:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    f4fa:	68e1      	ldr	r1, [r4, #12]
    f4fc:	4288      	cmp	r0, r1
    f4fe:	d109      	bne.n	f514 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f500:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    f504:	8aa2      	ldrh	r2, [r4, #20]
    f506:	4291      	cmp	r1, r2
    f508:	d104      	bne.n	f514 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    f50a:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    f50e:	8ae2      	ldrh	r2, [r4, #22]
    f510:	4291      	cmp	r1, r2
    f512:	d013      	beq.n	f53c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    f514:	8821      	ldrh	r1, [r4, #0]
    f516:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    f51a:	f7fe fc6d 	bl	ddf8 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f51e:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    f522:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    f526:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    f52a:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    f52e:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    f532:	2001      	movs	r0, #1
    f534:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    f538:	f7f7 fd36 	bl	6fa8 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f53c:	2102      	movs	r1, #2
    f53e:	4620      	mov	r0, r4
    f540:	f7f7 fae4 	bl	6b0c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    f544:	2000      	movs	r0, #0
    f546:	f804 0f7e 	strb.w	r0, [r4, #126]!
    f54a:	2003      	movs	r0, #3
    f54c:	70e0      	strb	r0, [r4, #3]
    f54e:	bd10      	pop	{r4, pc}

0000f550 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f550:	f7f5 bf44 	b.w	53dc <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f554 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f554:	2000      	movs	r0, #0
    f556:	4770      	bx	lr

0000f558 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f558:	f7f6 bc78 	b.w	5e4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000f55c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f55c:	2100      	movs	r1, #0
    f55e:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    f562:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    f566:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    f56a:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    f56e:	b109      	cbz	r1, f574 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f570:	2102      	movs	r1, #2
    f572:	e000      	b.n	f576 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f574:	2103      	movs	r1, #3
    f576:	f7f8 bef5 	b.w	8364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f57a:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    f57e:	28fe      	cmp	r0, #254	; 0xfe
    f580:	d001      	beq.n	f586 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f582:	2001      	movs	r0, #1
    f584:	4770      	bx	lr
    f586:	2000      	movs	r0, #0
    f588:	4770      	bx	lr
    f58a:	b510      	push	{r4, lr}
    f58c:	2801      	cmp	r0, #1
    f58e:	d006      	beq.n	f59e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f590:	2802      	cmp	r0, #2
    f592:	d004      	beq.n	f59e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f594:	f240 2163 	movw	r1, #611	; 0x263
    f598:	2006      	movs	r0, #6
    f59a:	f7f5 fb79 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f59e:	bd10      	pop	{r4, pc}
    f5a0:	2801      	cmp	r0, #1
    f5a2:	d002      	beq.n	f5aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f5a4:	2802      	cmp	r0, #2
    f5a6:	d105      	bne.n	f5b4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5a8:	e002      	b.n	f5b0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f5aa:	2901      	cmp	r1, #1
    f5ac:	d004      	beq.n	f5b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5ae:	e001      	b.n	f5b4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f5b0:	2902      	cmp	r1, #2
    f5b2:	d001      	beq.n	f5b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f5b4:	2000      	movs	r0, #0
    f5b6:	4770      	bx	lr
    f5b8:	2001      	movs	r0, #1
    f5ba:	4770      	bx	lr
    f5bc:	1a40      	subs	r0, r0, r1
    f5be:	b200      	sxth	r0, r0
    f5c0:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f5c4:	4288      	cmp	r0, r1
    f5c6:	dc01      	bgt.n	f5cc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f5c8:	2800      	cmp	r0, #0
    f5ca:	dc01      	bgt.n	f5d0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f5cc:	2001      	movs	r0, #1
    f5ce:	4770      	bx	lr
    f5d0:	2000      	movs	r0, #0
    f5d2:	4770      	bx	lr
    f5d4:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f5d8:	f001 0107 	and.w	r1, r1, #7
    f5dc:	7800      	ldrb	r0, [r0, #0]
    f5de:	2201      	movs	r2, #1
    f5e0:	408a      	lsls	r2, r1
    f5e2:	4010      	ands	r0, r2
    f5e4:	40c8      	lsrs	r0, r1
    f5e6:	4770      	bx	lr
    f5e8:	b118      	cbz	r0, f5f2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f5ea:	2802      	cmp	r0, #2
    f5ec:	d001      	beq.n	f5f2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    f5ee:	2001      	movs	r0, #1
    f5f0:	4770      	bx	lr
    f5f2:	2000      	movs	r0, #0
    f5f4:	4770      	bx	lr

0000f5f6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f5f6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f5f8:	7881      	ldrb	r1, [r0, #2]
    f5fa:	4604      	mov	r4, r0
    f5fc:	291a      	cmp	r1, #26
    f5fe:	d025      	beq.n	f64c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f600:	dc0e      	bgt.n	f620 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f602:	2916      	cmp	r1, #22
    f604:	d22d      	bcs.n	f662 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f606:	e8df f001 	tbb	[pc, r1]
    f60a:	2c2c      	.short	0x2c2c
    f60c:	212c2c2c 	.word	0x212c2c2c
    f610:	2c2c2c2c 	.word	0x2c2c2c2c
    f614:	2c2c2c2c 	.word	0x2c2c2c2c
    f618:	2c2c2c2c 	.word	0x2c2c2c2c
    f61c:	2121212c 	.word	0x2121212c
    f620:	292a      	cmp	r1, #42	; 0x2a
    f622:	d01e      	beq.n	f662 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f624:	dc0b      	bgt.n	f63e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f626:	f1a1 011e 	sub.w	r1, r1, #30
    f62a:	290c      	cmp	r1, #12
    f62c:	d219      	bcs.n	f662 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f62e:	e8df f001 	tbb	[pc, r1]
    f632:	1818      	.short	0x1818
    f634:	18181818 	.word	0x18181818
    f638:	18181818 	.word	0x18181818
    f63c:	0d18      	.short	0x0d18
    f63e:	393a      	subs	r1, #58	; 0x3a
    f640:	2904      	cmp	r1, #4
    f642:	d20e      	bcs.n	f662 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f644:	e8df f001 	tbb	[pc, r1]
    f648:	020d020d 	.word	0x020d020d
    f64c:	8820      	ldrh	r0, [r4, #0]
    f64e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f652:	d206      	bcs.n	f662 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f654:	2701      	movs	r7, #1
    f656:	4669      	mov	r1, sp
    f658:	f7fe fbbd 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f65c:	b118      	cbz	r0, f666 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f65e:	2002      	movs	r0, #2
    f660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f662:	2012      	movs	r0, #18
    f664:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f666:	9d01      	ldr	r5, [sp, #4]
    f668:	4668      	mov	r0, sp
    f66a:	462e      	mov	r6, r5
    f66c:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    f670:	f206 1679 	addw	r6, r6, #377	; 0x179
    f674:	f000 fe8d 	bl	10392 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    f678:	b138      	cbz	r0, f68a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f67a:	7828      	ldrb	r0, [r5, #0]
    f67c:	f88d 0008 	strb.w	r0, [sp, #8]
    f680:	9802      	ldr	r0, [sp, #8]
    f682:	9002      	str	r0, [sp, #8]
    f684:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f688:	b108      	cbz	r0, f68e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f68a:	200c      	movs	r0, #12
    f68c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f68e:	702f      	strb	r7, [r5, #0]
    f690:	78a0      	ldrb	r0, [r4, #2]
    f692:	7030      	strb	r0, [r6, #0]
    f694:	4668      	mov	r0, sp
    f696:	f7fe ff36 	bl	e506 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    f69a:	2000      	movs	r0, #0
    f69c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f69e <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f69e:	b510      	push	{r4, lr}
    f6a0:	4604      	mov	r4, r0
    f6a2:	7800      	ldrb	r0, [r0, #0]
    f6a4:	b118      	cbz	r0, f6ae <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f6a6:	2801      	cmp	r0, #1
    f6a8:	d001      	beq.n	f6ae <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f6aa:	2012      	movs	r0, #18
    f6ac:	bd10      	pop	{r4, pc}
    f6ae:	f000 fe9e 	bl	103ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f6b2:	b120      	cbz	r0, f6be <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f6b4:	f7f7 f81c 	bl	66f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f6b8:	b108      	cbz	r0, f6be <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f6ba:	200c      	movs	r0, #12
    f6bc:	bd10      	pop	{r4, pc}
    f6be:	7820      	ldrb	r0, [r4, #0]
    f6c0:	f7ff ff92 	bl	f5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f6c4:	1de2      	adds	r2, r4, #7
    f6c6:	f104 0317 	add.w	r3, r4, #23
    f6ca:	1c61      	adds	r1, r4, #1
    f6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6d0:	f7f7 b840 	b.w	6754 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000f6d4 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f6d4:	b510      	push	{r4, lr}
    f6d6:	4604      	mov	r4, r0
    f6d8:	f000 fef2 	bl	104c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f6dc:	b108      	cbz	r0, f6e2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f6de:	200c      	movs	r0, #12
    f6e0:	bd10      	pop	{r4, pc}
    f6e2:	7820      	ldrb	r0, [r4, #0]
    f6e4:	b118      	cbz	r0, f6ee <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f6e6:	2801      	cmp	r0, #1
    f6e8:	d001      	beq.n	f6ee <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f6ea:	2012      	movs	r0, #18
    f6ec:	bd10      	pop	{r4, pc}
    f6ee:	f7ff ff7b 	bl	f5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f6f2:	1c61      	adds	r1, r4, #1
    f6f4:	f7f7 f8a6 	bl	6844 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f6f8:	b108      	cbz	r0, f6fe <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f6fa:	2000      	movs	r0, #0
    f6fc:	bd10      	pop	{r4, pc}
    f6fe:	2007      	movs	r0, #7
    f700:	bd10      	pop	{r4, pc}

0000f702 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    f702:	b510      	push	{r4, lr}
    f704:	f000 fe73 	bl	103ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f708:	b120      	cbz	r0, f714 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f70a:	f7f6 fff1 	bl	66f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f70e:	b108      	cbz	r0, f714 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    f710:	200c      	movs	r0, #12
    f712:	bd10      	pop	{r4, pc}
    f714:	f7f7 f864 	bl	67e0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    f718:	2000      	movs	r0, #0
    f71a:	bd10      	pop	{r4, pc}

0000f71c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f71c:	b510      	push	{r4, lr}
    f71e:	f000 fecf 	bl	104c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f722:	b108      	cbz	r0, f728 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f724:	200c      	movs	r0, #12
    f726:	bd10      	pop	{r4, pc}
    f728:	f7f7 f8b4 	bl	6894 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f72c:	2000      	movs	r0, #0
    f72e:	bd10      	pop	{r4, pc}

0000f730 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f730:	b510      	push	{r4, lr}
    f732:	460b      	mov	r3, r1
    f734:	2201      	movs	r2, #1
    f736:	f100 0110 	add.w	r1, r0, #16
    f73a:	f7fe fb2e 	bl	dd9a <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f73e:	2000      	movs	r0, #0
    f740:	bd10      	pop	{r4, pc}

0000f742 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    f742:	b510      	push	{r4, lr}
    f744:	8800      	ldrh	r0, [r0, #0]
    f746:	2100      	movs	r1, #0
    f748:	f7fe f8fd 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f74c:	b118      	cbz	r0, f756 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    f74e:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    f752:	b111      	cbz	r1, f75a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    f754:	e007      	b.n	f766 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    f756:	2002      	movs	r0, #2
    f758:	bd10      	pop	{r4, pc}
    f75a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    f75e:	2914      	cmp	r1, #20
    f760:	d003      	beq.n	f76a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f762:	2915      	cmp	r1, #21
    f764:	d001      	beq.n	f76a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    f766:	200c      	movs	r0, #12
    f768:	bd10      	pop	{r4, pc}
    f76a:	2102      	movs	r1, #2
    f76c:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    f770:	2000      	movs	r0, #0
    f772:	bd10      	pop	{r4, pc}

0000f774 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    f774:	b538      	push	{r3, r4, r5, lr}
    f776:	4605      	mov	r5, r0
    f778:	8800      	ldrh	r0, [r0, #0]
    f77a:	2100      	movs	r1, #0
    f77c:	f7fe f8e3 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f780:	0004      	movs	r4, r0
    f782:	d003      	beq.n	f78c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    f784:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    f788:	b110      	cbz	r0, f790 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    f78a:	e010      	b.n	f7ae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f78c:	2002      	movs	r0, #2
    f78e:	bd38      	pop	{r3, r4, r5, pc}
    f790:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    f794:	2814      	cmp	r0, #20
    f796:	d001      	beq.n	f79c <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    f798:	2815      	cmp	r0, #21
    f79a:	d108      	bne.n	f7ae <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    f79c:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    f7a0:	f88d 0000 	strb.w	r0, [sp]
    f7a4:	9800      	ldr	r0, [sp, #0]
    f7a6:	9000      	str	r0, [sp, #0]
    f7a8:	f89d 0000 	ldrb.w	r0, [sp]
    f7ac:	b108      	cbz	r0, f7b2 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    f7ae:	200c      	movs	r0, #12
    f7b0:	bd38      	pop	{r3, r4, r5, pc}
    f7b2:	2210      	movs	r2, #16
    f7b4:	1ca9      	adds	r1, r5, #2
    f7b6:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    f7ba:	f7fd f8c9 	bl	c950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f7be:	2001      	movs	r0, #1
    f7c0:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    f7c4:	2000      	movs	r0, #0
    f7c6:	bd38      	pop	{r3, r4, r5, pc}

0000f7c8 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f7c8:	b510      	push	{r4, lr}
    f7ca:	2108      	movs	r1, #8
    f7cc:	f7f5 fafa 	bl	4dc4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f7d0:	2000      	movs	r0, #0
    f7d2:	bd10      	pop	{r4, pc}

0000f7d4 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    f7d4:	b510      	push	{r4, lr}
    f7d6:	4604      	mov	r4, r0
    f7d8:	f000 fdf2 	bl	103c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f7dc:	f7ff f91d 	bl	ea1a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    f7e0:	7020      	strb	r0, [r4, #0]
    f7e2:	2000      	movs	r0, #0
    f7e4:	bd10      	pop	{r4, pc}

0000f7e6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f7e6:	b510      	push	{r4, lr}
    f7e8:	4604      	mov	r4, r0
    f7ea:	f000 fdcc 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f7ee:	b140      	cbz	r0, f802 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    f7f0:	20fb      	movs	r0, #251	; 0xfb
    f7f2:	8020      	strh	r0, [r4, #0]
    f7f4:	f640 0148 	movw	r1, #2120	; 0x848
    f7f8:	8061      	strh	r1, [r4, #2]
    f7fa:	80a0      	strh	r0, [r4, #4]
    f7fc:	80e1      	strh	r1, [r4, #6]
    f7fe:	2000      	movs	r0, #0
    f800:	bd10      	pop	{r4, pc}
    f802:	2001      	movs	r0, #1
    f804:	bd10      	pop	{r4, pc}

0000f806 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    f806:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f808:	460d      	mov	r5, r1
    f80a:	4606      	mov	r6, r0
    f80c:	f7fb fd78 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f810:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f814:	b300      	cbz	r0, f858 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    f816:	8830      	ldrh	r0, [r6, #0]
    f818:	4669      	mov	r1, sp
    f81a:	f7fe fadc 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f81e:	2800      	cmp	r0, #0
    f820:	d119      	bne.n	f856 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    f822:	9c01      	ldr	r4, [sp, #4]
    f824:	2700      	movs	r7, #0
    f826:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    f82a:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    f82e:	f000 fc46 	bl	100be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f832:	70a8      	strb	r0, [r5, #2]
    f834:	7860      	ldrb	r0, [r4, #1]
    f836:	f000 fc42 	bl	100be <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    f83a:	70e8      	strb	r0, [r5, #3]
    f83c:	78a0      	ldrb	r0, [r4, #2]
    f83e:	f88d 0008 	strb.w	r0, [sp, #8]
    f842:	9802      	ldr	r0, [sp, #8]
    f844:	9002      	str	r0, [sp, #8]
    f846:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f84a:	3c6a      	subs	r4, #106	; 0x6a
    f84c:	2800      	cmp	r0, #0
    f84e:	d1ea      	bne.n	f826 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    f850:	8830      	ldrh	r0, [r6, #0]
    f852:	8028      	strh	r0, [r5, #0]
    f854:	2000      	movs	r0, #0
    f856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f858:	2001      	movs	r0, #1
    f85a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f85c <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    f85c:	2108      	movs	r1, #8
    f85e:	7001      	strb	r1, [r0, #0]
    f860:	2000      	movs	r0, #0
    f862:	4770      	bx	lr

0000f864 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f864:	b510      	push	{r4, lr}
    f866:	4604      	mov	r4, r0
    f868:	20d8      	movs	r0, #216	; 0xd8
    f86a:	7020      	strb	r0, [r4, #0]
    f86c:	f000 fd6c 	bl	10348 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    f870:	7060      	strb	r0, [r4, #1]
    f872:	2000      	movs	r0, #0
    f874:	bd10      	pop	{r4, pc}

0000f876 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f876:	2108      	movs	r1, #8
    f878:	7001      	strb	r1, [r0, #0]
    f87a:	2000      	movs	r0, #0
    f87c:	4770      	bx	lr

0000f87e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    f87e:	b510      	push	{r4, lr}
    f880:	4604      	mov	r4, r0
    f882:	7800      	ldrb	r0, [r0, #0]
    f884:	b108      	cbz	r0, f88a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    f886:	2801      	cmp	r0, #1
    f888:	d110      	bne.n	f8ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f88a:	f000 fdb0 	bl	103ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f88e:	b120      	cbz	r0, f89a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f890:	f7f6 ff2e 	bl	66f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f894:	b108      	cbz	r0, f89a <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    f896:	200c      	movs	r0, #12
    f898:	bd10      	pop	{r4, pc}
    f89a:	7820      	ldrb	r0, [r4, #0]
    f89c:	f7ff fea4 	bl	f5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f8a0:	1c61      	adds	r1, r4, #1
    f8a2:	f7fe fa60 	bl	dd66 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    f8a6:	b108      	cbz	r0, f8ac <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    f8a8:	2000      	movs	r0, #0
    f8aa:	bd10      	pop	{r4, pc}
    f8ac:	2012      	movs	r0, #18
    f8ae:	bd10      	pop	{r4, pc}

0000f8b0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f8b0:	b510      	push	{r4, lr}
    f8b2:	4604      	mov	r4, r0
    f8b4:	f000 fe04 	bl	104c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    f8b8:	b108      	cbz	r0, f8be <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f8ba:	200c      	movs	r0, #12
    f8bc:	bd10      	pop	{r4, pc}
    f8be:	7820      	ldrb	r0, [r4, #0]
    f8c0:	b108      	cbz	r0, f8c6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f8c2:	2801      	cmp	r0, #1
    f8c4:	d107      	bne.n	f8d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f8c6:	f7ff fe8f 	bl	f5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    f8ca:	1c61      	adds	r1, r4, #1
    f8cc:	f7fe fa5a 	bl	dd84 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f8d0:	b108      	cbz	r0, f8d6 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f8d2:	2000      	movs	r0, #0
    f8d4:	bd10      	pop	{r4, pc}
    f8d6:	2012      	movs	r0, #18
    f8d8:	bd10      	pop	{r4, pc}

0000f8da <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    f8da:	b510      	push	{r4, lr}
    f8dc:	4604      	mov	r4, r0
    f8de:	f000 fd86 	bl	103ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f8e2:	b108      	cbz	r0, f8e8 <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    f8e4:	200c      	movs	r0, #12
    f8e6:	bd10      	pop	{r4, pc}
    f8e8:	7820      	ldrb	r0, [r4, #0]
    f8ea:	f000 0001 	and.w	r0, r0, #1
    f8ee:	f7f6 fef9 	bl	66e4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    f8f2:	2000      	movs	r0, #0
    f8f4:	bd10      	pop	{r4, pc}

0000f8f6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    f8f6:	b51c      	push	{r2, r3, r4, lr}
    f8f8:	4604      	mov	r4, r0
    f8fa:	f000 fd61 	bl	103c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f8fe:	2000      	movs	r0, #0
    f900:	f88d 0002 	strb.w	r0, [sp, #2]
    f904:	2103      	movs	r1, #3
    f906:	f88d 1001 	strb.w	r1, [sp, #1]
    f90a:	f814 1b01 	ldrb.w	r1, [r4], #1
    f90e:	f88d 1003 	strb.w	r1, [sp, #3]
    f912:	f88d 0000 	strb.w	r0, [sp]
    f916:	4668      	mov	r0, sp
    f918:	9401      	str	r4, [sp, #4]
    f91a:	f000 f9f8 	bl	fd0e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    f91e:	bd1c      	pop	{r2, r3, r4, pc}

0000f920 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    f920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    f922:	4605      	mov	r5, r0
    f924:	f000 fd4c 	bl	103c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f928:	4606      	mov	r6, r0
    f92a:	7828      	ldrb	r0, [r5, #0]
    f92c:	2400      	movs	r4, #0
    f92e:	b160      	cbz	r0, f94a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f930:	f88d 4000 	strb.w	r4, [sp]
    f934:	2001      	movs	r0, #1
    f936:	f10d 0101 	add.w	r1, sp, #1
    f93a:	f7f6 f8a7 	bl	5a8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f93e:	b120      	cbz	r0, f94a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    f940:	4668      	mov	r0, sp
    f942:	f000 f897 	bl	fa74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    f946:	2800      	cmp	r0, #0
    f948:	d112      	bne.n	f970 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f94a:	f88d 400c 	strb.w	r4, [sp, #12]
    f94e:	4630      	mov	r0, r6
    f950:	f7ff f859 	bl	ea06 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f954:	b118      	cbz	r0, f95e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    f956:	2080      	movs	r0, #128	; 0x80
    f958:	f8ad 000d 	strh.w	r0, [sp, #13]
    f95c:	e001      	b.n	f962 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    f95e:	f8ad 400d 	strh.w	r4, [sp, #13]
    f962:	f88d 400f 	strb.w	r4, [sp, #15]
    f966:	7828      	ldrb	r0, [r5, #0]
    f968:	2801      	cmp	r0, #1
    f96a:	d003      	beq.n	f974 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    f96c:	b138      	cbz	r0, f97e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    f96e:	2012      	movs	r0, #18
    f970:	b004      	add	sp, #16
    f972:	bd70      	pop	{r4, r5, r6, pc}
    f974:	a903      	add	r1, sp, #12
    f976:	4630      	mov	r0, r6
    f978:	f7fb fac2 	bl	af00 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    f97c:	e7f8      	b.n	f970 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    f97e:	4630      	mov	r0, r6
    f980:	f000 fd3c 	bl	103fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    f984:	e7f4      	b.n	f970 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000f986 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    f986:	b530      	push	{r4, r5, lr}
    f988:	b08b      	sub	sp, #44	; 0x2c
    f98a:	4604      	mov	r4, r0
    f98c:	f000 fd18 	bl	103c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    f990:	4602      	mov	r2, r0
    f992:	7920      	ldrb	r0, [r4, #4]
    f994:	2804      	cmp	r0, #4
    f996:	d803      	bhi.n	f9a0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    f998:	8860      	ldrh	r0, [r4, #2]
    f99a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    f99e:	d902      	bls.n	f9a6 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    f9a0:	2012      	movs	r0, #18
    f9a2:	b00b      	add	sp, #44	; 0x2c
    f9a4:	bd30      	pop	{r4, r5, pc}
    f9a6:	2500      	movs	r5, #0
    f9a8:	f88d 5004 	strb.w	r5, [sp, #4]
    f9ac:	7921      	ldrb	r1, [r4, #4]
    f9ae:	9500      	str	r5, [sp, #0]
    f9b0:	f89d 0000 	ldrb.w	r0, [sp]
    f9b4:	2905      	cmp	r1, #5
    f9b6:	f040 0010 	orr.w	r0, r0, #16
    f9ba:	f88d 0000 	strb.w	r0, [sp]
    f9be:	d254      	bcs.n	fa6a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    f9c0:	e8df f001 	tbb	[pc, r1]
    f9c4:	11050803 	.word	0x11050803
    f9c8:	000b      	.short	0x000b
    f9ca:	f040 0001 	orr.w	r0, r0, #1
    f9ce:	f040 0002 	orr.w	r0, r0, #2
    f9d2:	e006      	b.n	f9e2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    f9d4:	f040 0009 	orr.w	r0, r0, #9
    f9d8:	e001      	b.n	f9de <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    f9da:	f040 0001 	orr.w	r0, r0, #1
    f9de:	f040 0004 	orr.w	r0, r0, #4
    f9e2:	f88d 0000 	strb.w	r0, [sp]
    f9e6:	f8bd 0000 	ldrh.w	r0, [sp]
    f9ea:	9000      	str	r0, [sp, #0]
    f9ec:	f8bd 0000 	ldrh.w	r0, [sp]
    f9f0:	f8ad 0005 	strh.w	r0, [sp, #5]
    f9f4:	8821      	ldrh	r1, [r4, #0]
    f9f6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    f9fa:	f361 201f 	bfi	r0, r1, #8, #24
    f9fe:	f8cd 0006 	str.w	r0, [sp, #6]
    fa02:	8861      	ldrh	r1, [r4, #2]
    fa04:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fa08:	f361 201f 	bfi	r0, r1, #8, #24
    fa0c:	f8cd 0009 	str.w	r0, [sp, #9]
    fa10:	7b60      	ldrb	r0, [r4, #13]
    fa12:	f88d 000d 	strb.w	r0, [sp, #13]
    fa16:	7960      	ldrb	r0, [r4, #5]
    fa18:	f88d 000e 	strb.w	r0, [sp, #14]
    fa1c:	79a0      	ldrb	r0, [r4, #6]
    fa1e:	f88d 000f 	strb.w	r0, [sp, #15]
    fa22:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fa26:	9004      	str	r0, [sp, #16]
    fa28:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fa2c:	f8ad 0014 	strh.w	r0, [sp, #20]
    fa30:	7ba0      	ldrb	r0, [r4, #14]
    fa32:	f88d 0016 	strb.w	r0, [sp, #22]
    fa36:	207f      	movs	r0, #127	; 0x7f
    fa38:	f88d 0017 	strb.w	r0, [sp, #23]
    fa3c:	2001      	movs	r0, #1
    fa3e:	f88d 0018 	strb.w	r0, [sp, #24]
    fa42:	f88d 5019 	strb.w	r5, [sp, #25]
    fa46:	f88d 001a 	strb.w	r0, [sp, #26]
    fa4a:	f88d 501b 	strb.w	r5, [sp, #27]
    fa4e:	4610      	mov	r0, r2
    fa50:	f7fe fff5 	bl	ea3e <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fa54:	f88d 001c 	strb.w	r0, [sp, #28]
    fa58:	f88d 501d 	strb.w	r5, [sp, #29]
    fa5c:	f88d 501e 	strb.w	r5, [sp, #30]
    fa60:	a909      	add	r1, sp, #36	; 0x24
    fa62:	a801      	add	r0, sp, #4
    fa64:	f000 f8de 	bl	fc24 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fa68:	e79b      	b.n	f9a2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fa6a:	f44f 5185 	mov.w	r1, #4256	; 0x10a0
    fa6e:	2039      	movs	r0, #57	; 0x39
    fa70:	f7f5 f90e 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fa74 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fa74:	b570      	push	{r4, r5, r6, lr}
    fa76:	4604      	mov	r4, r0
    fa78:	7800      	ldrb	r0, [r0, #0]
    fa7a:	2101      	movs	r1, #1
    fa7c:	f7fd ff63 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa80:	0005      	movs	r5, r0
    fa82:	d007      	beq.n	fa94 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fa84:	f7ff f994 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fa88:	b160      	cbz	r0, faa4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fa8a:	4628      	mov	r0, r5
    fa8c:	f7fe ffc1 	bl	ea12 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fa90:	b110      	cbz	r0, fa98 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fa92:	e005      	b.n	faa0 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fa94:	2042      	movs	r0, #66	; 0x42
    fa96:	bd70      	pop	{r4, r5, r6, pc}
    fa98:	4628      	mov	r0, r5
    fa9a:	f7fe ffb0 	bl	e9fe <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fa9e:	b108      	cbz	r0, faa4 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    faa0:	200c      	movs	r0, #12
    faa2:	bd70      	pop	{r4, r5, r6, pc}
    faa4:	1c61      	adds	r1, r4, #1
    faa6:	4628      	mov	r0, r5
    faa8:	f7fe ffc1 	bl	ea2e <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    faac:	2000      	movs	r0, #0
    faae:	bd70      	pop	{r4, r5, r6, pc}

0000fab0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fab0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fab2:	460d      	mov	r5, r1
    fab4:	4604      	mov	r4, r0
    fab6:	f000 fc66 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    faba:	b130      	cbz	r0, faca <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fabc:	88a2      	ldrh	r2, [r4, #4]
    fabe:	f244 2090 	movw	r0, #17040	; 0x4290
    fac2:	4282      	cmp	r2, r0
    fac4:	d903      	bls.n	face <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    fac6:	2012      	movs	r0, #18
    fac8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    faca:	2001      	movs	r0, #1
    facc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    face:	f640 0048 	movw	r0, #2120	; 0x848
    fad2:	4282      	cmp	r2, r0
    fad4:	d300      	bcc.n	fad8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    fad6:	4602      	mov	r2, r0
    fad8:	8820      	ldrh	r0, [r4, #0]
    fada:	f8ad 0000 	strh.w	r0, [sp]
    fade:	8860      	ldrh	r0, [r4, #2]
    fae0:	f8ad 0002 	strh.w	r0, [sp, #2]
    fae4:	f8ad 2004 	strh.w	r2, [sp, #4]
    fae8:	8860      	ldrh	r0, [r4, #2]
    faea:	f8ad 0006 	strh.w	r0, [sp, #6]
    faee:	f8ad 2008 	strh.w	r2, [sp, #8]
    faf2:	8820      	ldrh	r0, [r4, #0]
    faf4:	8028      	strh	r0, [r5, #0]
    faf6:	4668      	mov	r0, sp
    faf8:	f7fb fad0 	bl	b09c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    fafc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fafe <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fafe:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fb00:	4604      	mov	r4, r0
    fb02:	f7fb fbfd 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb06:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fb0a:	b1b0      	cbz	r0, fb3a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    fb0c:	f10d 0007 	add.w	r0, sp, #7
    fb10:	9000      	str	r0, [sp, #0]
    fb12:	7922      	ldrb	r2, [r4, #4]
    fb14:	78e1      	ldrb	r1, [r4, #3]
    fb16:	78a0      	ldrb	r0, [r4, #2]
    fb18:	f10d 0306 	add.w	r3, sp, #6
    fb1c:	f000 fc94 	bl	10448 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    fb20:	2800      	cmp	r0, #0
    fb22:	d109      	bne.n	fb38 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    fb24:	8820      	ldrh	r0, [r4, #0]
    fb26:	f8ad 0004 	strh.w	r0, [sp, #4]
    fb2a:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fb2e:	f8ad 0008 	strh.w	r0, [sp, #8]
    fb32:	a801      	add	r0, sp, #4
    fb34:	f000 f9a6 	bl	fe84 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fb38:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb3a:	2001      	movs	r0, #1
    fb3c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fb3e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fb3e:	b510      	push	{r4, lr}
    fb40:	4604      	mov	r4, r0
    fb42:	f000 fc54 	bl	103ee <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    fb46:	b120      	cbz	r0, fb52 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fb48:	f7f6 fdd2 	bl	66f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fb4c:	b108      	cbz	r0, fb52 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fb4e:	200c      	movs	r0, #12
    fb50:	bd10      	pop	{r4, pc}
    fb52:	7820      	ldrb	r0, [r4, #0]
    fb54:	f7ff fd48 	bl	f5e8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    fb58:	79e2      	ldrb	r2, [r4, #7]
    fb5a:	1c61      	adds	r1, r4, #1
    fb5c:	f7f6 fd76 	bl	664c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fb60:	b108      	cbz	r0, fb66 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fb62:	2000      	movs	r0, #0
    fb64:	bd10      	pop	{r4, pc}
    fb66:	2002      	movs	r0, #2
    fb68:	bd10      	pop	{r4, pc}

0000fb6a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fb6a:	b510      	push	{r4, lr}
    fb6c:	4604      	mov	r4, r0
    fb6e:	2001      	movs	r0, #1
    fb70:	f000 fac8 	bl	10104 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    fb74:	b128      	cbz	r0, fb82 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fb76:	4621      	mov	r1, r4
    fb78:	2001      	movs	r0, #1
    fb7a:	f7f5 ff9f 	bl	5abc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fb7e:	2000      	movs	r0, #0
    fb80:	bd10      	pop	{r4, pc}
    fb82:	200c      	movs	r0, #12
    fb84:	bd10      	pop	{r4, pc}

0000fb86 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fb86:	b510      	push	{r4, lr}
    fb88:	8800      	ldrh	r0, [r0, #0]
    fb8a:	f7f6 fe3f 	bl	680c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fb8e:	b108      	cbz	r0, fb94 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fb90:	2000      	movs	r0, #0
    fb92:	bd10      	pop	{r4, pc}
    fb94:	2030      	movs	r0, #48	; 0x30
    fb96:	bd10      	pop	{r4, pc}

0000fb98 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fb98:	b51c      	push	{r2, r3, r4, lr}
    fb9a:	4604      	mov	r4, r0
    fb9c:	f000 fc10 	bl	103c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
    fba0:	2000      	movs	r0, #0
    fba2:	f88d 0000 	strb.w	r0, [sp]
    fba6:	f88d 0002 	strb.w	r0, [sp, #2]
    fbaa:	2003      	movs	r0, #3
    fbac:	f88d 0001 	strb.w	r0, [sp, #1]
    fbb0:	f814 0b01 	ldrb.w	r0, [r4], #1
    fbb4:	f88d 0003 	strb.w	r0, [sp, #3]
    fbb8:	4668      	mov	r0, sp
    fbba:	9401      	str	r4, [sp, #4]
    fbbc:	f000 f910 	bl	fde0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fbc0:	bd1c      	pop	{r2, r3, r4, pc}

0000fbc2 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fbc2:	b51c      	push	{r2, r3, r4, lr}
    fbc4:	4604      	mov	r4, r0
    fbc6:	f000 fbde 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    fbca:	b178      	cbz	r0, fbec <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    fbcc:	8820      	ldrh	r0, [r4, #0]
    fbce:	f8ad 0000 	strh.w	r0, [sp]
    fbd2:	8860      	ldrh	r0, [r4, #2]
    fbd4:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbd8:	8820      	ldrh	r0, [r4, #0]
    fbda:	f8ad 0004 	strh.w	r0, [sp, #4]
    fbde:	8860      	ldrh	r0, [r4, #2]
    fbe0:	f8ad 0006 	strh.w	r0, [sp, #6]
    fbe4:	4668      	mov	r0, sp
    fbe6:	f7fb fadd 	bl	b1a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    fbea:	bd1c      	pop	{r2, r3, r4, pc}
    fbec:	2001      	movs	r0, #1
    fbee:	bd1c      	pop	{r2, r3, r4, pc}

0000fbf0 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fbf0:	b510      	push	{r4, lr}
    fbf2:	f7f5 ff87 	bl	5b04 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fbf6:	2000      	movs	r0, #0
    fbf8:	bd10      	pop	{r4, pc}

0000fbfa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fbfa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fbfc:	460c      	mov	r4, r1
    fbfe:	4605      	mov	r5, r0
    fc00:	f000 fbc1 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    fc04:	b160      	cbz	r0, fc20 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    fc06:	4669      	mov	r1, sp
    fc08:	4628      	mov	r0, r5
    fc0a:	f7fe f8e4 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc0e:	2800      	cmp	r0, #0
    fc10:	d105      	bne.n	fc1e <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    fc12:	2100      	movs	r1, #0
    fc14:	4622      	mov	r2, r4
    fc16:	9801      	ldr	r0, [sp, #4]
    fc18:	f000 fb40 	bl	1029c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    fc1c:	2000      	movs	r0, #0
    fc1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fc20:	2001      	movs	r0, #1
    fc22:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fc24 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    fc24:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fc28:	460f      	mov	r7, r1
    fc2a:	4605      	mov	r5, r0
    fc2c:	7806      	ldrb	r6, [r0, #0]
    fc2e:	f000 fac5 	bl	101bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    fc32:	2800      	cmp	r0, #0
    fc34:	d10a      	bne.n	fc4c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fc36:	4628      	mov	r0, r5
    fc38:	f000 fa9a 	bl	10170 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    fc3c:	2800      	cmp	r0, #0
    fc3e:	d105      	bne.n	fc4c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fc40:	2001      	movs	r0, #1
    fc42:	f7f5 fa0f 	bl	5064 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    fc46:	4286      	cmp	r6, r0
    fc48:	d302      	bcc.n	fc50 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    fc4a:	2007      	movs	r0, #7
    fc4c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fc50:	2101      	movs	r1, #1
    fc52:	4630      	mov	r0, r6
    fc54:	f7fd fe77 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fc58:	0004      	movs	r4, r0
    fc5a:	d004      	beq.n	fc66 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    fc5c:	f7ff f8a8 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fc60:	b150      	cbz	r0, fc78 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    fc62:	200c      	movs	r0, #12
    fc64:	e7f2      	b.n	fc4c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    fc66:	2200      	movs	r2, #0
    fc68:	2101      	movs	r1, #1
    fc6a:	4630      	mov	r0, r6
    fc6c:	f7fd fe61 	bl	d932 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    fc70:	0004      	movs	r4, r0
    fc72:	d00f      	beq.n	fc94 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    fc74:	f7fe fe68 	bl	e948 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    fc78:	4620      	mov	r0, r4
    fc7a:	f7fe fece 	bl	ea1a <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fc7e:	7038      	strb	r0, [r7, #0]
    fc80:	74e8      	strb	r0, [r5, #19]
    fc82:	4629      	mov	r1, r5
    fc84:	4620      	mov	r0, r4
    fc86:	f7f7 fbf7 	bl	7478 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    fc8a:	4606      	mov	r6, r0
    fc8c:	7e68      	ldrb	r0, [r5, #25]
    fc8e:	b1d0      	cbz	r0, fcc6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    fc90:	b12e      	cbz	r6, fc9e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    fc92:	e018      	b.n	fcc6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    fc94:	f241 212d 	movw	r1, #4653	; 0x122d
    fc98:	2039      	movs	r0, #57	; 0x39
    fc9a:	f7f4 fff9 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc9e:	2200      	movs	r2, #0
    fca0:	4668      	mov	r0, sp
    fca2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fca4:	f7fd ff10 	bl	dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fca8:	2200      	movs	r2, #0
    fcaa:	2101      	movs	r1, #1
    fcac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcae:	f7fd ff80 	bl	dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fcb2:	2204      	movs	r2, #4
    fcb4:	4668      	mov	r0, sp
    fcb6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fcb8:	f7fd ff06 	bl	dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fcbc:	2200      	movs	r2, #0
    fcbe:	4611      	mov	r1, r2
    fcc0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fcc2:	f7fd ff76 	bl	dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fcc6:	4630      	mov	r0, r6
    fcc8:	e7c0      	b.n	fc4c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000fcca <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fcca:	b510      	push	{r4, lr}
    fccc:	4604      	mov	r4, r0
    fcce:	2000      	movs	r0, #0
    fcd0:	f000 fa18 	bl	10104 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    fcd4:	b128      	cbz	r0, fce2 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fcd6:	4621      	mov	r1, r4
    fcd8:	2000      	movs	r0, #0
    fcda:	f7f5 feef 	bl	5abc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fcde:	2000      	movs	r0, #0
    fce0:	bd10      	pop	{r4, pc}
    fce2:	200c      	movs	r0, #12
    fce4:	bd10      	pop	{r4, pc}

0000fce6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fce6:	b510      	push	{r4, lr}
    fce8:	7800      	ldrb	r0, [r0, #0]
    fcea:	f000 0001 	and.w	r0, r0, #1
    fcee:	f7f8 faff 	bl	82f0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fcf2:	2000      	movs	r0, #0
    fcf4:	bd10      	pop	{r4, pc}

0000fcf6 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fcf6:	b510      	push	{r4, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	f000 fb44 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    fcfe:	b120      	cbz	r0, fd0a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    fd00:	4620      	mov	r0, r4
    fd02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd06:	f7fb b9c9 	b.w	b09c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    fd0a:	2001      	movs	r0, #1
    fd0c:	bd10      	pop	{r4, pc}

0000fd0e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    fd0e:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fd12:	4606      	mov	r6, r0
    fd14:	7845      	ldrb	r5, [r0, #1]
    fd16:	7800      	ldrb	r0, [r0, #0]
    fd18:	2101      	movs	r1, #1
    fd1a:	f7fd fe14 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd1e:	0004      	movs	r4, r0
    fd20:	d01e      	beq.n	fd60 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    fd22:	f7fe fe3d 	bl	e9a0 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    fd26:	78f1      	ldrb	r1, [r6, #3]
    fd28:	4281      	cmp	r1, r0
    fd2a:	d800      	bhi.n	fd2e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    fd2c:	4608      	mov	r0, r1
    fd2e:	4607      	mov	r7, r0
    fd30:	2d04      	cmp	r5, #4
    fd32:	d018      	beq.n	fd66 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    fd34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fd36:	f7fd ff5f 	bl	dbf8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fd3a:	4438      	add	r0, r7
    fd3c:	b281      	uxth	r1, r0
    fd3e:	4620      	mov	r0, r4
    fd40:	2201      	movs	r2, #1
    fd42:	f000 f9f1 	bl	10128 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    fd46:	2800      	cmp	r0, #0
    fd48:	d10b      	bne.n	fd62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fd4a:	2d03      	cmp	r5, #3
    fd4c:	d000      	beq.n	fd50 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fd4e:	b1df      	cbz	r7, fd88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fd50:	4620      	mov	r0, r4
    fd52:	f7fe fe5c 	bl	ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fd56:	7871      	ldrb	r1, [r6, #1]
    fd58:	2903      	cmp	r1, #3
    fd5a:	d010      	beq.n	fd7e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fd5c:	b9a0      	cbnz	r0, fd88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fd5e:	e004      	b.n	fd6a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    fd60:	2042      	movs	r0, #66	; 0x42
    fd62:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fd66:	b97f      	cbnz	r7, fd88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fd68:	e7f2      	b.n	fd50 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    fd6a:	2904      	cmp	r1, #4
    fd6c:	d107      	bne.n	fd7e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    fd6e:	4620      	mov	r0, r4
    fd70:	f7ff f81e 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd74:	b140      	cbz	r0, fd88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fd76:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fd78:	f7fd ff0d 	bl	db96 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    fd7c:	b120      	cbz	r0, fd88 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    fd7e:	2d01      	cmp	r5, #1
    fd80:	d004      	beq.n	fd8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fd82:	2d03      	cmp	r5, #3
    fd84:	d002      	beq.n	fd8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    fd86:	e00e      	b.n	fda6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    fd88:	2012      	movs	r0, #18
    fd8a:	e7ea      	b.n	fd62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fd8c:	4620      	mov	r0, r4
    fd8e:	f7fe fe3e 	bl	ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fd92:	b108      	cbz	r0, fd98 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    fd94:	2200      	movs	r2, #0
    fd96:	e002      	b.n	fd9e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fd98:	2d01      	cmp	r5, #1
    fd9a:	d013      	beq.n	fdc4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    fd9c:	2201      	movs	r2, #1
    fd9e:	4668      	mov	r0, sp
    fda0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fda2:	f7fd fe91 	bl	dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fda6:	2d04      	cmp	r5, #4
    fda8:	d018      	beq.n	fddc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fdaa:	6872      	ldr	r2, [r6, #4]
    fdac:	463b      	mov	r3, r7
    fdae:	2101      	movs	r1, #1
    fdb0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fdb2:	f7fd febc 	bl	db2e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fdb6:	b138      	cbz	r0, fdc8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    fdb8:	7870      	ldrb	r0, [r6, #1]
    fdba:	2802      	cmp	r0, #2
    fdbc:	d006      	beq.n	fdcc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fdbe:	2803      	cmp	r0, #3
    fdc0:	d004      	beq.n	fdcc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    fdc2:	e00b      	b.n	fddc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    fdc4:	2202      	movs	r2, #2
    fdc6:	e7ea      	b.n	fd9e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    fdc8:	2007      	movs	r0, #7
    fdca:	e7ca      	b.n	fd62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    fdcc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fdce:	f7fd ff13 	bl	dbf8 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    fdd2:	4602      	mov	r2, r0
    fdd4:	2101      	movs	r1, #1
    fdd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fdd8:	f7fd feeb 	bl	dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fddc:	2000      	movs	r0, #0
    fdde:	e7c0      	b.n	fd62 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000fde0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    fde0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    fde4:	4607      	mov	r7, r0
    fde6:	7845      	ldrb	r5, [r0, #1]
    fde8:	78c6      	ldrb	r6, [r0, #3]
    fdea:	7800      	ldrb	r0, [r0, #0]
    fdec:	2101      	movs	r1, #1
    fdee:	f7fd fdaa 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fdf2:	0004      	movs	r4, r0
    fdf4:	d003      	beq.n	fdfe <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    fdf6:	f7fe fe0c 	bl	ea12 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fdfa:	b118      	cbz	r0, fe04 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    fdfc:	e003      	b.n	fe06 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    fdfe:	2042      	movs	r0, #66	; 0x42
    fe00:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fe04:	2600      	movs	r6, #0
    fe06:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fe08:	f7fd fefa 	bl	dc00 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    fe0c:	4430      	add	r0, r6
    fe0e:	b281      	uxth	r1, r0
    fe10:	4688      	mov	r8, r1
    fe12:	4620      	mov	r0, r4
    fe14:	2201      	movs	r2, #1
    fe16:	f000 f987 	bl	10128 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    fe1a:	2800      	cmp	r0, #0
    fe1c:	d1f0      	bne.n	fe00 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fe1e:	2d04      	cmp	r5, #4
    fe20:	d008      	beq.n	fe34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fe22:	2d03      	cmp	r5, #3
    fe24:	d00a      	beq.n	fe3c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    fe26:	b12e      	cbz	r6, fe34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    fe28:	4620      	mov	r0, r4
    fe2a:	f7fe ffc1 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe2e:	b118      	cbz	r0, fe38 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    fe30:	200c      	movs	r0, #12
    fe32:	e7e5      	b.n	fe00 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fe34:	2012      	movs	r0, #18
    fe36:	e7e3      	b.n	fe00 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fe38:	2d01      	cmp	r5, #1
    fe3a:	d10c      	bne.n	fe56 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    fe3c:	4620      	mov	r0, r4
    fe3e:	f7fe fde6 	bl	ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    fe42:	b108      	cbz	r0, fe48 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    fe44:	2204      	movs	r2, #4
    fe46:	e002      	b.n	fe4e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fe48:	2d01      	cmp	r5, #1
    fe4a:	d010      	beq.n	fe6e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    fe4c:	2205      	movs	r2, #5
    fe4e:	4668      	mov	r0, sp
    fe50:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    fe52:	f7fd fe39 	bl	dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    fe56:	687a      	ldr	r2, [r7, #4]
    fe58:	4633      	mov	r3, r6
    fe5a:	2100      	movs	r1, #0
    fe5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fe5e:	f7fd fe66 	bl	db2e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    fe62:	b130      	cbz	r0, fe72 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    fe64:	2d02      	cmp	r5, #2
    fe66:	d006      	beq.n	fe76 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fe68:	2d03      	cmp	r5, #3
    fe6a:	d004      	beq.n	fe76 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    fe6c:	e008      	b.n	fe80 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    fe6e:	2206      	movs	r2, #6
    fe70:	e7ed      	b.n	fe4e <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    fe72:	2007      	movs	r0, #7
    fe74:	e7c4      	b.n	fe00 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    fe76:	4642      	mov	r2, r8
    fe78:	2100      	movs	r1, #0
    fe7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    fe7c:	f7fd fe99 	bl	dbb2 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    fe80:	2000      	movs	r0, #0
    fe82:	e7bd      	b.n	fe00 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000fe84 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fe84:	b510      	push	{r4, lr}
    fe86:	4604      	mov	r4, r0
    fe88:	8880      	ldrh	r0, [r0, #4]
    fe8a:	b128      	cbz	r0, fe98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fe8c:	2801      	cmp	r0, #1
    fe8e:	d003      	beq.n	fe98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fe90:	2802      	cmp	r0, #2
    fe92:	d001      	beq.n	fe98 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fe94:	2012      	movs	r0, #18
    fe96:	bd10      	pop	{r4, pc}
    fe98:	78e0      	ldrb	r0, [r4, #3]
    fe9a:	f000 f9dc 	bl	10256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fe9e:	b148      	cbz	r0, feb4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fea0:	78a0      	ldrb	r0, [r4, #2]
    fea2:	f000 f9d8 	bl	10256 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    fea6:	b128      	cbz	r0, feb4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fea8:	4620      	mov	r0, r4
    feaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    feae:	2101      	movs	r1, #1
    feb0:	f000 b884 	b.w	ffbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    feb4:	2011      	movs	r0, #17
    feb6:	bd10      	pop	{r4, pc}

0000feb8 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    feb8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    feba:	460c      	mov	r4, r1
    febc:	4605      	mov	r5, r0
    febe:	8800      	ldrh	r0, [r0, #0]
    fec0:	4669      	mov	r1, sp
    fec2:	f7fd ff88 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fec6:	2800      	cmp	r0, #0
    fec8:	d106      	bne.n	fed8 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    feca:	9801      	ldr	r0, [sp, #4]
    fecc:	8829      	ldrh	r1, [r5, #0]
    fece:	8021      	strh	r1, [r4, #0]
    fed0:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    fed4:	8060      	strh	r0, [r4, #2]
    fed6:	2000      	movs	r0, #0
    fed8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000feda <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    feda:	b510      	push	{r4, lr}
    fedc:	4604      	mov	r4, r0
    fede:	4601      	mov	r1, r0
    fee0:	2000      	movs	r0, #0
    fee2:	f7f5 fdd3 	bl	5a8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fee6:	b910      	cbnz	r0, feee <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    fee8:	2000      	movs	r0, #0
    feea:	6020      	str	r0, [r4, #0]
    feec:	80a0      	strh	r0, [r4, #4]
    feee:	2000      	movs	r0, #0
    fef0:	bd10      	pop	{r4, pc}

0000fef2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    fef2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fef4:	8800      	ldrh	r0, [r0, #0]
    fef6:	4669      	mov	r1, sp
    fef8:	f7fd ff6d 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fefc:	b958      	cbnz	r0, ff16 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    fefe:	4668      	mov	r0, sp
    ff00:	f000 fa47 	bl	10392 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30c>
    ff04:	b138      	cbz	r0, ff16 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    ff06:	9c01      	ldr	r4, [sp, #4]
    ff08:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    ff0c:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    ff10:	3470      	adds	r4, #112	; 0x70
    ff12:	b929      	cbnz	r1, ff20 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    ff14:	e001      	b.n	ff1a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff16:	2002      	movs	r0, #2
    ff18:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ff1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    ff1e:	b109      	cbz	r1, ff24 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ff20:	203a      	movs	r0, #58	; 0x3a
    ff22:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ff24:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    ff28:	f04f 0501 	mov.w	r5, #1
    ff2c:	0789      	lsls	r1, r1, #30
    ff2e:	d103      	bne.n	ff38 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ff30:	7005      	strb	r5, [r0, #0]
    ff32:	4668      	mov	r0, sp
    ff34:	f7fe fae7 	bl	e506 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    ff38:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    ff3c:	2000      	movs	r0, #0
    ff3e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ff40 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ff40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff42:	460c      	mov	r4, r1
    ff44:	4605      	mov	r5, r0
    ff46:	8800      	ldrh	r0, [r0, #0]
    ff48:	4669      	mov	r1, sp
    ff4a:	f7fd ff44 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff4e:	b108      	cbz	r0, ff54 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ff50:	2002      	movs	r0, #2
    ff52:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ff54:	78a8      	ldrb	r0, [r5, #2]
    ff56:	b130      	cbz	r0, ff66 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ff58:	f000 f9f6 	bl	10348 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c2>
    ff5c:	70a0      	strb	r0, [r4, #2]
    ff5e:	8828      	ldrh	r0, [r5, #0]
    ff60:	8020      	strh	r0, [r4, #0]
    ff62:	2000      	movs	r0, #0
    ff64:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ff66:	9801      	ldr	r0, [sp, #4]
    ff68:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    ff6c:	e7f6      	b.n	ff5c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ff6e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ff6e:	b510      	push	{r4, lr}
    ff70:	f7fb f952 	bl	b218 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ff74:	2000      	movs	r0, #0
    ff76:	bd10      	pop	{r4, pc}

0000ff78 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ff78:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff7c:	4604      	mov	r4, r0
    ff7e:	8840      	ldrh	r0, [r0, #2]
    ff80:	460d      	mov	r5, r1
    ff82:	b1b8      	cbz	r0, ffb4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    ff84:	8820      	ldrh	r0, [r4, #0]
    ff86:	4669      	mov	r1, sp
    ff88:	f7fd ff25 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff8c:	2800      	cmp	r0, #0
    ff8e:	d10f      	bne.n	ffb0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    ff90:	8820      	ldrh	r0, [r4, #0]
    ff92:	8028      	strh	r0, [r5, #0]
    ff94:	9e01      	ldr	r6, [sp, #4]
    ff96:	f106 050c 	add.w	r5, r6, #12
    ff9a:	3670      	adds	r6, #112	; 0x70
    ff9c:	682f      	ldr	r7, [r5, #0]
    ff9e:	8862      	ldrh	r2, [r4, #2]
    ffa0:	4639      	mov	r1, r7
    ffa2:	4630      	mov	r0, r6
    ffa4:	f7fe f858 	bl	e058 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    ffa8:	6828      	ldr	r0, [r5, #0]
    ffaa:	42b8      	cmp	r0, r7
    ffac:	d1f6      	bne.n	ff9c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    ffae:	2000      	movs	r0, #0
    ffb0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ffb4:	2012      	movs	r0, #18
    ffb6:	e7fb      	b.n	ffb0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000ffb8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    ffb8:	f7fa bf06 	b.w	adc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000ffbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ffbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ffc0:	b086      	sub	sp, #24
    ffc2:	468a      	mov	sl, r1
    ffc4:	4606      	mov	r6, r0
    ffc6:	8800      	ldrh	r0, [r0, #0]
    ffc8:	a901      	add	r1, sp, #4
    ffca:	f7fd ff04 	bl	ddd6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffce:	2800      	cmp	r0, #0
    ffd0:	d138      	bne.n	10044 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ffd2:	9802      	ldr	r0, [sp, #8]
    ffd4:	f04f 0800 	mov.w	r8, #0
    ffd8:	4601      	mov	r1, r0
    ffda:	4689      	mov	r9, r1
    ffdc:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    ffe0:	f88d 1000 	strb.w	r1, [sp]
    ffe4:	9900      	ldr	r1, [sp, #0]
    ffe6:	9100      	str	r1, [sp, #0]
    ffe8:	f89d 5000 	ldrb.w	r5, [sp]
    ffec:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    fff0:	3070      	adds	r0, #112	; 0x70
    fff2:	2921      	cmp	r1, #33	; 0x21
    fff4:	d100      	bne.n	fff8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    fff6:	b13d      	cbz	r5, 10008 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    fff8:	2400      	movs	r4, #0
    fffa:	304c      	adds	r0, #76	; 0x4c
    fffc:	2108      	movs	r1, #8
    fffe:	4607      	mov	r7, r0
   10000:	f7ff fae8 	bl	f5d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10004:	b110      	cbz	r0, 1000c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
   10006:	e007      	b.n	10018 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   10008:	2401      	movs	r4, #1
   1000a:	e7f6      	b.n	fffa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
   1000c:	210b      	movs	r1, #11
   1000e:	4638      	mov	r0, r7
   10010:	f7ff fae0 	bl	f5d4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
   10014:	b900      	cbnz	r0, 10018 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   10016:	b1a4      	cbz	r4, 10042 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
   10018:	a804      	add	r0, sp, #16
   1001a:	9000      	str	r0, [sp, #0]
   1001c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10020:	ab03      	add	r3, sp, #12
   10022:	4632      	mov	r2, r6
   10024:	4649      	mov	r1, r9
   10026:	f000 f96f 	bl	10308 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
   1002a:	0007      	movs	r7, r0
   1002c:	d10a      	bne.n	10044 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
   1002e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10032:	9c02      	ldr	r4, [sp, #8]
   10034:	b148      	cbz	r0, 1004a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   10036:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
   1003a:	2001      	movs	r0, #1
   1003c:	7060      	strb	r0, [r4, #1]
   1003e:	b94d      	cbnz	r5, 10054 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   10040:	e006      	b.n	10050 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10042:	201a      	movs	r0, #26
   10044:	b006      	add	sp, #24
   10046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1004a:	f504 7497 	add.w	r4, r4, #302	; 0x12e
   1004e:	e7f4      	b.n	1003a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
   10050:	7820      	ldrb	r0, [r4, #0]
   10052:	b108      	cbz	r0, 10058 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   10054:	273a      	movs	r7, #58	; 0x3a
   10056:	e012      	b.n	1007e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   10058:	f884 a000 	strb.w	sl, [r4]
   1005c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10060:	70a0      	strb	r0, [r4, #2]
   10062:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10066:	70e1      	strb	r1, [r4, #3]
   10068:	f88d 0000 	strb.w	r0, [sp]
   1006c:	f88d 1001 	strb.w	r1, [sp, #1]
   10070:	88b0      	ldrh	r0, [r6, #4]
   10072:	f8ad 0002 	strh.w	r0, [sp, #2]
   10076:	4669      	mov	r1, sp
   10078:	4648      	mov	r0, r9
   1007a:	f7fd ff6b 	bl	df54 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1007e:	f884 8001 	strb.w	r8, [r4, #1]
   10082:	4638      	mov	r0, r7
   10084:	e7de      	b.n	10044 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

00010086 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10086:	b510      	push	{r4, lr}
   10088:	2008      	movs	r0, #8
   1008a:	f7fb f92f 	bl	b2ec <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1008e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10092:	f7f8 bea7 	b.w	8de4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10096:	f44f 71a4 	mov.w	r1, #328	; 0x148
   1009a:	4288      	cmp	r0, r1
   1009c:	d303      	bcc.n	100a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
   1009e:	f640 0148 	movw	r1, #2120	; 0x848
   100a2:	4288      	cmp	r0, r1
   100a4:	d300      	bcc.n	100a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
   100a6:	4608      	mov	r0, r1
   100a8:	4770      	bx	lr
   100aa:	07c1      	lsls	r1, r0, #31
   100ac:	d001      	beq.n	100b2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
   100ae:	2001      	movs	r0, #1
   100b0:	4770      	bx	lr
   100b2:	0780      	lsls	r0, r0, #30
   100b4:	d501      	bpl.n	100ba <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
   100b6:	2002      	movs	r0, #2
   100b8:	4770      	bx	lr
   100ba:	2000      	movs	r0, #0
   100bc:	4770      	bx	lr
   100be:	b510      	push	{r4, lr}
   100c0:	2801      	cmp	r0, #1
   100c2:	d006      	beq.n	100d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   100c4:	2802      	cmp	r0, #2
   100c6:	d004      	beq.n	100d2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
   100c8:	f240 2163 	movw	r1, #611	; 0x263
   100cc:	2006      	movs	r0, #6
   100ce:	f7f4 fddf 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100d2:	bd10      	pop	{r4, pc}
   100d4:	b50e      	push	{r1, r2, r3, lr}
   100d6:	4669      	mov	r1, sp
   100d8:	2001      	movs	r0, #1
   100da:	f7fd fc3e 	bl	d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   100de:	b150      	cbz	r0, 100f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   100e0:	f240 114f 	movw	r1, #335	; 0x14f
   100e4:	2039      	movs	r0, #57	; 0x39
   100e6:	f7f4 fdd3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100ea:	9802      	ldr	r0, [sp, #8]
   100ec:	f7fe fe60 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   100f0:	b108      	cbz	r0, 100f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
   100f2:	2001      	movs	r0, #1
   100f4:	bd0e      	pop	{r1, r2, r3, pc}
   100f6:	4668      	mov	r0, sp
   100f8:	f7f5 f802 	bl	5100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   100fc:	2800      	cmp	r0, #0
   100fe:	d0f4      	beq.n	100ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
   10100:	2000      	movs	r0, #0
   10102:	bd0e      	pop	{r1, r2, r3, pc}
   10104:	b510      	push	{r4, lr}
   10106:	f7ff ffe5 	bl	100d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   1010a:	b158      	cbz	r0, 10124 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   1010c:	f000 f958 	bl	103c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x33a>
   10110:	4604      	mov	r4, r0
   10112:	f7fe fc7e 	bl	ea12 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10116:	b918      	cbnz	r0, 10120 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
   10118:	4620      	mov	r0, r4
   1011a:	f7fe fc70 	bl	e9fe <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1011e:	b108      	cbz	r0, 10124 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
   10120:	2000      	movs	r0, #0
   10122:	bd10      	pop	{r4, pc}
   10124:	2001      	movs	r0, #1
   10126:	bd10      	pop	{r4, pc}
   10128:	b570      	push	{r4, r5, r6, lr}
   1012a:	460c      	mov	r4, r1
   1012c:	4605      	mov	r5, r0
   1012e:	b112      	cbz	r2, 10136 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
   10130:	291f      	cmp	r1, #31
   10132:	d80c      	bhi.n	1014e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
   10134:	e016      	b.n	10164 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
   10136:	f7f5 faa9 	bl	568c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   1013a:	42a0      	cmp	r0, r4
   1013c:	d201      	bcs.n	10142 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
   1013e:	2007      	movs	r0, #7
   10140:	bd70      	pop	{r4, r5, r6, pc}
   10142:	4628      	mov	r0, r5
   10144:	f7fe fc63 	bl	ea0e <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10148:	b118      	cbz	r0, 10152 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1014a:	2c1f      	cmp	r4, #31
   1014c:	d901      	bls.n	10152 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
   1014e:	2012      	movs	r0, #18
   10150:	bd70      	pop	{r4, r5, r6, pc}
   10152:	4628      	mov	r0, r5
   10154:	f7fe fc64 	bl	ea20 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10158:	b130      	cbz	r0, 10168 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
   1015a:	4621      	mov	r1, r4
   1015c:	4628      	mov	r0, r5
   1015e:	f7fe fc2b 	bl	e9b8 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10162:	b118      	cbz	r0, 1016c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
   10164:	2000      	movs	r0, #0
   10166:	bd70      	pop	{r4, r5, r6, pc}
   10168:	2042      	movs	r0, #66	; 0x42
   1016a:	bd70      	pop	{r4, r5, r6, pc}
   1016c:	2045      	movs	r0, #69	; 0x45
   1016e:	bd70      	pop	{r4, r5, r6, pc}
   10170:	b510      	push	{r4, lr}
   10172:	4604      	mov	r4, r0
   10174:	7840      	ldrb	r0, [r0, #1]
   10176:	06c1      	lsls	r1, r0, #27
   10178:	d51c      	bpl.n	101b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   1017a:	07c0      	lsls	r0, r0, #31
   1017c:	d00b      	beq.n	10196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1017e:	f7fb f889 	bl	b294 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10182:	b1b8      	cbz	r0, 101b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10184:	7860      	ldrb	r0, [r4, #1]
   10186:	06c1      	lsls	r1, r0, #27
   10188:	d405      	bmi.n	10196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1018a:	0700      	lsls	r0, r0, #28
   1018c:	d503      	bpl.n	10196 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
   1018e:	7d20      	ldrb	r0, [r4, #20]
   10190:	2802      	cmp	r0, #2
   10192:	d10f      	bne.n	101b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   10194:	e010      	b.n	101b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   10196:	7d20      	ldrb	r0, [r4, #20]
   10198:	2802      	cmp	r0, #2
   1019a:	d001      	beq.n	101a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
   1019c:	7ea0      	ldrb	r0, [r4, #26]
   1019e:	b948      	cbnz	r0, 101b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
   101a0:	7860      	ldrb	r0, [r4, #1]
   101a2:	0700      	lsls	r0, r0, #28
   101a4:	d408      	bmi.n	101b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   101a6:	f8d4 0005 	ldr.w	r0, [r4, #5]
   101aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   101ae:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   101b2:	d201      	bcs.n	101b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
   101b4:	2011      	movs	r0, #17
   101b6:	bd10      	pop	{r4, pc}
   101b8:	2000      	movs	r0, #0
   101ba:	bd10      	pop	{r4, pc}
   101bc:	b538      	push	{r3, r4, r5, lr}
   101be:	4604      	mov	r4, r0
   101c0:	7800      	ldrb	r0, [r0, #0]
   101c2:	28ef      	cmp	r0, #239	; 0xef
   101c4:	d843      	bhi.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   101c6:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   101ca:	f8ad 0000 	strh.w	r0, [sp]
   101ce:	9800      	ldr	r0, [sp, #0]
   101d0:	f000 f951 	bl	10476 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
   101d4:	b3a0      	cbz	r0, 10240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   101d6:	7861      	ldrb	r1, [r4, #1]
   101d8:	0708      	lsls	r0, r1, #28
   101da:	d40b      	bmi.n	101f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
   101dc:	f8d4 0002 	ldr.w	r0, [r4, #2]
   101e0:	f8d4 3005 	ldr.w	r3, [r4, #5]
   101e4:	0a02      	lsrs	r2, r0, #8
   101e6:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   101ea:	d830      	bhi.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   101ec:	2220      	movs	r2, #32
   101ee:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   101f2:	d82c      	bhi.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   101f4:	7a60      	ldrb	r0, [r4, #9]
   101f6:	b318      	cbz	r0, 10240 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
   101f8:	2807      	cmp	r0, #7
   101fa:	d828      	bhi.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   101fc:	7aa0      	ldrb	r0, [r4, #10]
   101fe:	b128      	cbz	r0, 1020c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10200:	2801      	cmp	r0, #1
   10202:	d003      	beq.n	1020c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10204:	2802      	cmp	r0, #2
   10206:	d001      	beq.n	1020c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
   10208:	2803      	cmp	r0, #3
   1020a:	d120      	bne.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1020c:	074a      	lsls	r2, r1, #29
   1020e:	d403      	bmi.n	10218 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10210:	2802      	cmp	r0, #2
   10212:	d001      	beq.n	10218 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
   10214:	2803      	cmp	r0, #3
   10216:	d105      	bne.n	10224 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
   10218:	7ae0      	ldrb	r0, [r4, #11]
   1021a:	b108      	cbz	r0, 10220 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
   1021c:	2801      	cmp	r0, #1
   1021e:	d116      	bne.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10220:	0748      	lsls	r0, r1, #29
   10222:	d407      	bmi.n	10234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10224:	7ca0      	ldrb	r0, [r4, #18]
   10226:	b128      	cbz	r0, 10234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10228:	2801      	cmp	r0, #1
   1022a:	d003      	beq.n	10234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   1022c:	2802      	cmp	r0, #2
   1022e:	d001      	beq.n	10234 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
   10230:	2803      	cmp	r0, #3
   10232:	d10c      	bne.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10234:	06c8      	lsls	r0, r1, #27
   10236:	7d20      	ldrb	r0, [r4, #20]
   10238:	d503      	bpl.n	10242 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
   1023a:	2801      	cmp	r0, #1
   1023c:	d107      	bne.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   1023e:	e002      	b.n	10246 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
   10240:	e005      	b.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10242:	2802      	cmp	r0, #2
   10244:	d003      	beq.n	1024e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
   10246:	7e20      	ldrb	r0, [r4, #24]
   10248:	b118      	cbz	r0, 10252 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1024a:	2801      	cmp	r0, #1
   1024c:	d001      	beq.n	10252 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
   1024e:	2012      	movs	r0, #18
   10250:	bd38      	pop	{r3, r4, r5, pc}
   10252:	2000      	movs	r0, #0
   10254:	bd38      	pop	{r3, r4, r5, pc}
   10256:	b510      	push	{r4, lr}
   10258:	0004      	movs	r4, r0
   1025a:	d005      	beq.n	10268 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   1025c:	f7fb f856 	bl	b30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10260:	4384      	bics	r4, r0
   10262:	d001      	beq.n	10268 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
   10264:	2000      	movs	r0, #0
   10266:	bd10      	pop	{r4, pc}
   10268:	2001      	movs	r0, #1
   1026a:	bd10      	pop	{r4, pc}
   1026c:	28fb      	cmp	r0, #251	; 0xfb
   1026e:	d803      	bhi.n	10278 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
   10270:	f640 0048 	movw	r0, #2120	; 0x848
   10274:	4281      	cmp	r1, r0
   10276:	d901      	bls.n	1027c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
   10278:	2011      	movs	r0, #17
   1027a:	4770      	bx	lr
   1027c:	2000      	movs	r0, #0
   1027e:	4770      	bx	lr
   10280:	381b      	subs	r0, #27
   10282:	28e1      	cmp	r0, #225	; 0xe1
   10284:	d206      	bcs.n	10294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   10286:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   1028a:	d303      	bcc.n	10294 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
   1028c:	f244 2090 	movw	r0, #17040	; 0x4290
   10290:	4281      	cmp	r1, r0
   10292:	d901      	bls.n	10298 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
   10294:	2012      	movs	r0, #18
   10296:	4770      	bx	lr
   10298:	2000      	movs	r0, #0
   1029a:	4770      	bx	lr
   1029c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102a0:	4606      	mov	r6, r0
   102a2:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   102a6:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   102aa:	4615      	mov	r5, r2
   102ac:	302c      	adds	r0, #44	; 0x2c
   102ae:	f7f8 f825 	bl	82fc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   102b2:	4680      	mov	r8, r0
   102b4:	2102      	movs	r1, #2
   102b6:	f7fd fe1e 	bl	def6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   102ba:	4287      	cmp	r7, r0
   102bc:	d200      	bcs.n	102c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
   102be:	4638      	mov	r0, r7
   102c0:	4607      	mov	r7, r0
   102c2:	2102      	movs	r1, #2
   102c4:	4640      	mov	r0, r8
   102c6:	f7fd fe16 	bl	def6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   102ca:	4284      	cmp	r4, r0
   102cc:	d200      	bcs.n	102d0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
   102ce:	4620      	mov	r0, r4
   102d0:	8831      	ldrh	r1, [r6, #0]
   102d2:	8029      	strh	r1, [r5, #0]
   102d4:	2f1b      	cmp	r7, #27
   102d6:	d913      	bls.n	10300 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
   102d8:	2ffb      	cmp	r7, #251	; 0xfb
   102da:	d300      	bcc.n	102de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   102dc:	27fb      	movs	r7, #251	; 0xfb
   102de:	806f      	strh	r7, [r5, #2]
   102e0:	281b      	cmp	r0, #27
   102e2:	d90f      	bls.n	10304 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
   102e4:	28fb      	cmp	r0, #251	; 0xfb
   102e6:	d300      	bcc.n	102ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   102e8:	20fb      	movs	r0, #251	; 0xfb
   102ea:	80e8      	strh	r0, [r5, #6]
   102ec:	4640      	mov	r0, r8
   102ee:	f7ff fed2 	bl	10096 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   102f2:	80a8      	strh	r0, [r5, #4]
   102f4:	4640      	mov	r0, r8
   102f6:	f7ff fece 	bl	10096 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
   102fa:	8128      	strh	r0, [r5, #8]
   102fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10300:	271b      	movs	r7, #27
   10302:	e7ec      	b.n	102de <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
   10304:	201b      	movs	r0, #27
   10306:	e7f0      	b.n	102ea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
   10308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1030c:	7890      	ldrb	r0, [r2, #2]
   1030e:	9e06      	ldr	r6, [sp, #24]
   10310:	461d      	mov	r5, r3
   10312:	4614      	mov	r4, r2
   10314:	b908      	cbnz	r0, 1031a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x294>
   10316:	f7fa fff9 	bl	b30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1031a:	78e4      	ldrb	r4, [r4, #3]
   1031c:	4607      	mov	r7, r0
   1031e:	b914      	cbnz	r4, 10326 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a0>
   10320:	f7fa fff4 	bl	b30c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10324:	4604      	mov	r4, r0
   10326:	b16f      	cbz	r7, 10344 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10328:	b164      	cbz	r4, 10344 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1032a:	4638      	mov	r0, r7
   1032c:	f7ff febd 	bl	100aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10330:	4620      	mov	r0, r4
   10332:	f7ff feba 	bl	100aa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
   10336:	b12f      	cbz	r7, 10344 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   10338:	b124      	cbz	r4, 10344 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2be>
   1033a:	702f      	strb	r7, [r5, #0]
   1033c:	7034      	strb	r4, [r6, #0]
   1033e:	2000      	movs	r0, #0
   10340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10344:	2009      	movs	r0, #9
   10346:	e7fb      	b.n	10340 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ba>
   10348:	b510      	push	{r4, lr}
   1034a:	f7fc faa5 	bl	c898 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1034e:	b928      	cbnz	r0, 1035c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10350:	f7fc fad8 	bl	c904 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10354:	b910      	cbnz	r0, 1035c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d6>
   10356:	f7fc fadf 	bl	c918 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1035a:	b108      	cbz	r0, 10360 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2da>
   1035c:	2008      	movs	r0, #8
   1035e:	bd10      	pop	{r4, pc}
   10360:	f7fc fa6f 	bl	c842 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10364:	b940      	cbnz	r0, 10378 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10366:	f7fc fa76 	bl	c856 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   1036a:	b928      	cbnz	r0, 10378 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   1036c:	f7fc fa8a 	bl	c884 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   10370:	b910      	cbnz	r0, 10378 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f2>
   10372:	f7fc fa9b 	bl	c8ac <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10376:	b108      	cbz	r0, 1037c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2f6>
   10378:	2004      	movs	r0, #4
   1037a:	bd10      	pop	{r4, pc}
   1037c:	f240 519c 	movw	r1, #1436	; 0x59c
   10380:	2039      	movs	r0, #57	; 0x39
   10382:	f7f4 fc85 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10386:	b510      	push	{r4, lr}
   10388:	f7fa ffba 	bl	b300 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1038c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   10390:	bd10      	pop	{r4, pc}
   10392:	6840      	ldr	r0, [r0, #4]
   10394:	f000 b800 	b.w	10398 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x312>
   10398:	b508      	push	{r3, lr}
   1039a:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
   1039e:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
   103a2:	f88d 0000 	strb.w	r0, [sp]
   103a6:	9800      	ldr	r0, [sp, #0]
   103a8:	9000      	str	r0, [sp, #0]
   103aa:	f89d 0000 	ldrb.w	r0, [sp]
   103ae:	1e40      	subs	r0, r0, #1
   103b0:	4208      	tst	r0, r1
   103b2:	d003      	beq.n	103bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   103b4:	2904      	cmp	r1, #4
   103b6:	d001      	beq.n	103bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x336>
   103b8:	2001      	movs	r0, #1
   103ba:	bd08      	pop	{r3, pc}
   103bc:	2000      	movs	r0, #0
   103be:	bd08      	pop	{r3, pc}
   103c0:	b510      	push	{r4, lr}
   103c2:	2101      	movs	r1, #1
   103c4:	2000      	movs	r0, #0
   103c6:	f7fd fabe 	bl	d946 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   103ca:	0004      	movs	r4, r0
   103cc:	d108      	bne.n	103e0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35a>
   103ce:	2200      	movs	r2, #0
   103d0:	2101      	movs	r1, #1
   103d2:	4610      	mov	r0, r2
   103d4:	f7fd faad 	bl	d932 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
   103d8:	0004      	movs	r4, r0
   103da:	d003      	beq.n	103e4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x35e>
   103dc:	f7fe fab4 	bl	e948 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
   103e0:	4620      	mov	r0, r4
   103e2:	bd10      	pop	{r4, pc}
   103e4:	f240 2135 	movw	r1, #565	; 0x235
   103e8:	2039      	movs	r0, #57	; 0x39
   103ea:	f7f4 fc51 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103ee:	b510      	push	{r4, lr}
   103f0:	f7ff fe70 	bl	100d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
   103f4:	2800      	cmp	r0, #0
   103f6:	d000      	beq.n	103fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x374>
   103f8:	2001      	movs	r0, #1
   103fa:	bd10      	pop	{r4, pc}
   103fc:	b570      	push	{r4, r5, r6, lr}
   103fe:	4605      	mov	r5, r0
   10400:	f7fe fb0e 	bl	ea20 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10404:	b170      	cbz	r0, 10424 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
   10406:	4628      	mov	r0, r5
   10408:	f7fe fcd2 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   1040c:	2800      	cmp	r0, #0
   1040e:	d008      	beq.n	10422 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
   10410:	4628      	mov	r0, r5
   10412:	f7fe fcca 	bl	edaa <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10416:	4604      	mov	r4, r0
   10418:	4628      	mov	r0, r5
   1041a:	f7fe fca0 	bl	ed5e <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1041e:	b118      	cbz	r0, 10428 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
   10420:	200c      	movs	r0, #12
   10422:	bd70      	pop	{r4, r5, r6, pc}
   10424:	2042      	movs	r0, #66	; 0x42
   10426:	bd70      	pop	{r4, r5, r6, pc}
   10428:	b164      	cbz	r4, 10444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1042a:	8820      	ldrh	r0, [r4, #0]
   1042c:	f7fd fc13 	bl	dc56 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   10430:	8820      	ldrh	r0, [r4, #0]
   10432:	2100      	movs	r1, #0
   10434:	f7f4 feb4 	bl	51a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10438:	b120      	cbz	r0, 10444 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
   1043a:	f241 41ca 	movw	r1, #5322	; 0x14ca
   1043e:	2039      	movs	r0, #57	; 0x39
   10440:	f7f4 fc26 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10444:	2000      	movs	r0, #0
   10446:	bd70      	pop	{r4, r5, r6, pc}
   10448:	b530      	push	{r4, r5, lr}
   1044a:	f340 0400 	sbfx	r4, r0, #0, #1
   1044e:	f340 0040 	sbfx	r0, r0, #1, #1
   10452:	1c40      	adds	r0, r0, #1
   10454:	9d03      	ldr	r5, [sp, #12]
   10456:	1c64      	adds	r4, r4, #1
   10458:	d000      	beq.n	1045c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
   1045a:	b119      	cbz	r1, 10464 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   1045c:	b100      	cbz	r0, 10460 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
   1045e:	b10a      	cbz	r2, 10464 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
   10460:	b91c      	cbnz	r4, 1046a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
   10462:	e001      	b.n	10468 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
   10464:	2011      	movs	r0, #17
   10466:	bd30      	pop	{r4, r5, pc}
   10468:	2100      	movs	r1, #0
   1046a:	7019      	strb	r1, [r3, #0]
   1046c:	b900      	cbnz	r0, 10470 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
   1046e:	2200      	movs	r2, #0
   10470:	702a      	strb	r2, [r5, #0]
   10472:	2000      	movs	r0, #0
   10474:	bd30      	pop	{r4, r5, pc}
   10476:	b2c0      	uxtb	r0, r0
   10478:	06c1      	lsls	r1, r0, #27
   1047a:	d40c      	bmi.n	10496 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
   1047c:	0681      	lsls	r1, r0, #26
   1047e:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   10482:	d503      	bpl.n	1048c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
   10484:	b9d1      	cbnz	r1, 104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10486:	0781      	lsls	r1, r0, #30
   10488:	d418      	bmi.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1048a:	e001      	b.n	10490 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
   1048c:	2900      	cmp	r1, #0
   1048e:	d1fa      	bne.n	10486 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
   10490:	0700      	lsls	r0, r0, #28
   10492:	d413      	bmi.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   10494:	e010      	b.n	104b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   10496:	0641      	lsls	r1, r0, #25
   10498:	d410      	bmi.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1049a:	0681      	lsls	r1, r0, #26
   1049c:	d40e      	bmi.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   1049e:	07c1      	lsls	r1, r0, #31
   104a0:	ea4f 7180 	mov.w	r1, r0, lsl #30
   104a4:	d004      	beq.n	104b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   104a6:	2900      	cmp	r1, #0
   104a8:	db02      	blt.n	104b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
   104aa:	0740      	lsls	r0, r0, #29
   104ac:	d404      	bmi.n	104b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
   104ae:	e005      	b.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   104b0:	0701      	lsls	r1, r0, #28
   104b2:	d403      	bmi.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   104b4:	0740      	lsls	r0, r0, #29
   104b6:	d401      	bmi.n	104bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
   104b8:	2001      	movs	r0, #1
   104ba:	4770      	bx	lr
   104bc:	2000      	movs	r0, #0
   104be:	4770      	bx	lr
   104c0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   104c2:	4669      	mov	r1, sp
   104c4:	2001      	movs	r0, #1
   104c6:	f7fd fa48 	bl	d95a <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
   104ca:	b178      	cbz	r0, 104ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   104cc:	f240 116d 	movw	r1, #365	; 0x16d
   104d0:	2039      	movs	r0, #57	; 0x39
   104d2:	f7f4 fbdd 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   104d6:	9c02      	ldr	r4, [sp, #8]
   104d8:	4620      	mov	r0, r4
   104da:	f7fe fc69 	bl	edb0 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   104de:	b128      	cbz	r0, 104ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   104e0:	4620      	mov	r0, r4
   104e2:	f7fe facb 	bl	ea7c <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
   104e6:	b108      	cbz	r0, 104ec <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
   104e8:	2001      	movs	r0, #1
   104ea:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   104ec:	4668      	mov	r0, sp
   104ee:	f7f4 fe07 	bl	5100 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   104f2:	2800      	cmp	r0, #0
   104f4:	d0ef      	beq.n	104d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
   104f6:	2000      	movs	r0, #0
   104f8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000104fa <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   104fa:	6802      	ldr	r2, [r0, #0]
   104fc:	b912      	cbnz	r2, 10504 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   104fe:	6001      	str	r1, [r0, #0]
   10500:	4770      	bx	lr
   10502:	4602      	mov	r2, r0
   10504:	6850      	ldr	r0, [r2, #4]
   10506:	b108      	cbz	r0, 1050c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   10508:	428a      	cmp	r2, r1
   1050a:	d1fa      	bne.n	10502 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   1050c:	428a      	cmp	r2, r1
   1050e:	d0f7      	beq.n	10500 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   10510:	6051      	str	r1, [r2, #4]
   10512:	4770      	bx	lr
   10514:	b510      	push	{r4, lr}
   10516:	f7fe fc4e 	bl	edb6 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   1051a:	b108      	cbz	r0, 10520 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   1051c:	21d9      	movs	r1, #217	; 0xd9
   1051e:	e003      	b.n	10528 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
   10520:	f7f7 f87a 	bl	7618 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   10524:	b118      	cbz	r0, 1052e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
   10526:	21de      	movs	r1, #222	; 0xde
   10528:	2001      	movs	r0, #1
   1052a:	f7f4 fbb1 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1052e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10532:	2001      	movs	r0, #1
   10534:	f7f4 bd7a 	b.w	502c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10538:	b510      	push	{r4, lr}
   1053a:	4604      	mov	r4, r0
   1053c:	e002      	b.n	10544 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
   1053e:	6820      	ldr	r0, [r4, #0]
   10540:	4780      	blx	r0
   10542:	6864      	ldr	r4, [r4, #4]
   10544:	2c00      	cmp	r4, #0
   10546:	d1fa      	bne.n	1053e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
   10548:	bd10      	pop	{r4, pc}
   1054a:	b510      	push	{r4, lr}
   1054c:	2000      	movs	r0, #0
   1054e:	f7f4 fd6d 	bl	502c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10552:	f7f4 ffa3 	bl	549c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   10556:	f7f5 fa7b 	bl	5a50 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   1055a:	f7f5 fc69 	bl	5e30 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   1055e:	2800      	cmp	r0, #0
   10560:	d003      	beq.n	1056a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
   10562:	21b8      	movs	r1, #184	; 0xb8
   10564:	2001      	movs	r0, #1
   10566:	f7f4 fb93 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1056a:	bd10      	pop	{r4, pc}
   1056c:	b510      	push	{r4, lr}
   1056e:	f7ff ffd1 	bl	10514 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
   10572:	f7fe ffef 	bl	f554 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   10576:	2800      	cmp	r0, #0
   10578:	d003      	beq.n	10582 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x88>
   1057a:	21f5      	movs	r1, #245	; 0xf5
   1057c:	2001      	movs	r0, #1
   1057e:	f7f4 fb87 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10582:	bd10      	pop	{r4, pc}

00010584 <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   10584:	f7f3 bfe0 	b.w	4548 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10588:	000b0001 	.word	0x000b0001
   1058c:	000a0002 	.word	0x000a0002
   10590:	00090005 	.word	0x00090005
   10594:	0008000a 	.word	0x0008000a
   10598:	00070014 	.word	0x00070014
   1059c:	0006001e 	.word	0x0006001e
   105a0:	00050032 	.word	0x00050032
   105a4:	0004004b 	.word	0x0004004b
   105a8:	00030064 	.word	0x00030064
   105ac:	00020096 	.word	0x00020096
   105b0:	000100fa 	.word	0x000100fa
   105b4:	000001f4 	.word	0x000001f4

000105b8 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   105b8:	b510      	push	{r4, lr}
   105ba:	f7fb fa9b 	bl	baf4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   105be:	f000 f850 	bl	10662 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   105c2:	f7fa ff11 	bl	b3e8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   105c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   105ca:	f7fb b80f 	b.w	b5ec <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000105ce <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   105ce:	b510      	push	{r4, lr}
   105d0:	24c8      	movs	r4, #200	; 0xc8
   105d2:	1e64      	subs	r4, r4, #1
   105d4:	b2e4      	uxtb	r4, r4
   105d6:	f7fa ff25 	bl	b424 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   105da:	2802      	cmp	r0, #2
   105dc:	d003      	beq.n	105e6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   105de:	2801      	cmp	r0, #1
   105e0:	d000      	beq.n	105e4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   105e2:	2000      	movs	r0, #0
   105e4:	bd10      	pop	{r4, pc}
   105e6:	2c00      	cmp	r4, #0
   105e8:	d1f3      	bne.n	105d2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   105ea:	2193      	movs	r1, #147	; 0x93
   105ec:	203b      	movs	r0, #59	; 0x3b
   105ee:	f7f4 fb4f 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000105f2 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   105f2:	b510      	push	{r4, lr}
   105f4:	f7f4 fa16 	bl	4a24 <mpsl_fem_lna_configuration_clear>
   105f8:	2800      	cmp	r0, #0
   105fa:	d005      	beq.n	10608 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   105fc:	1c40      	adds	r0, r0, #1
   105fe:	d003      	beq.n	10608 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10600:	2150      	movs	r1, #80	; 0x50
   10602:	2040      	movs	r0, #64	; 0x40
   10604:	f7f4 fb44 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10608:	bd10      	pop	{r4, pc}

0001060a <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1060a:	b510      	push	{r4, lr}
   1060c:	f7f4 fa16 	bl	4a3c <mpsl_fem_pa_configuration_clear>
   10610:	2800      	cmp	r0, #0
   10612:	d005      	beq.n	10620 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10614:	1c40      	adds	r0, r0, #1
   10616:	d003      	beq.n	10620 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10618:	2149      	movs	r1, #73	; 0x49
   1061a:	2040      	movs	r0, #64	; 0x40
   1061c:	f7f4 fb38 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10620:	bd10      	pop	{r4, pc}

00010622 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10622:	b510      	push	{r4, lr}
   10624:	f7f4 f9f8 	bl	4a18 <mpsl_fem_disable>
   10628:	2800      	cmp	r0, #0
   1062a:	d005      	beq.n	10638 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1062c:	1c40      	adds	r0, r0, #1
   1062e:	d003      	beq.n	10638 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10630:	2157      	movs	r1, #87	; 0x57
   10632:	2040      	movs	r0, #64	; 0x40
   10634:	f7f4 fb2c 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10638:	bd10      	pop	{r4, pc}

0001063a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1063a:	b510      	push	{r4, lr}
   1063c:	2100      	movs	r1, #0
   1063e:	4608      	mov	r0, r1
   10640:	f7f4 f9f6 	bl	4a30 <mpsl_fem_lna_configuration_set>
   10644:	b108      	cbz	r0, 1064a <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10646:	2000      	movs	r0, #0
   10648:	bd10      	pop	{r4, pc}
   1064a:	2001      	movs	r0, #1
   1064c:	bd10      	pop	{r4, pc}

0001064e <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   1064e:	b508      	push	{r3, lr}
   10650:	4668      	mov	r0, sp
   10652:	f7f4 f9ff 	bl	4a54 <mpsl_fem_pa_is_configured>
   10656:	f89d 0000 	ldrb.w	r0, [sp]
   1065a:	2800      	cmp	r0, #0
   1065c:	d000      	beq.n	10660 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   1065e:	2001      	movs	r0, #1
   10660:	bd08      	pop	{r3, pc}

00010662 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10662:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10666:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1066a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1066e:	f3bf 8f4f 	dsb	sy
   10672:	f3bf 8f6f 	isb	sy
   10676:	f7fb b893 	b.w	b7a0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1067a:	2800      	cmp	r0, #0
   1067c:	db09      	blt.n	10692 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1067e:	f000 021f 	and.w	r2, r0, #31
   10682:	2101      	movs	r1, #1
   10684:	4091      	lsls	r1, r2
   10686:	0940      	lsrs	r0, r0, #5
   10688:	0080      	lsls	r0, r0, #2
   1068a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1068e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10692:	4770      	bx	lr
   10694:	2800      	cmp	r0, #0
   10696:	db0d      	blt.n	106b4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10698:	f000 021f 	and.w	r2, r0, #31
   1069c:	2101      	movs	r1, #1
   1069e:	4091      	lsls	r1, r2
   106a0:	0940      	lsrs	r0, r0, #5
   106a2:	0080      	lsls	r0, r0, #2
   106a4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   106a8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   106ac:	f3bf 8f4f 	dsb	sy
   106b0:	f3bf 8f6f 	isb	sy
   106b4:	4770      	bx	lr

000106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   106b6:	b510      	push	{r4, lr}
   106b8:	2801      	cmp	r0, #1
   106ba:	d006      	beq.n	106ca <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   106bc:	2802      	cmp	r0, #2
   106be:	d006      	beq.n	106ce <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   106c0:	f640 3141 	movw	r1, #2881	; 0xb41
   106c4:	203e      	movs	r0, #62	; 0x3e
   106c6:	f7f4 fae3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106ca:	2028      	movs	r0, #40	; 0x28
   106cc:	bd10      	pop	{r4, pc}
   106ce:	2018      	movs	r0, #24
   106d0:	bd10      	pop	{r4, pc}

000106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   106d2:	b510      	push	{r4, lr}
   106d4:	2801      	cmp	r0, #1
   106d6:	d006      	beq.n	106e6 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   106d8:	2802      	cmp	r0, #2
   106da:	d007      	beq.n	106ec <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   106dc:	f640 3155 	movw	r1, #2901	; 0xb55
   106e0:	203e      	movs	r0, #62	; 0x3e
   106e2:	f7f4 fad5 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106e6:	f641 6014 	movw	r0, #7700	; 0x1e14
   106ea:	bd10      	pop	{r4, pc}
   106ec:	f241 1030 	movw	r0, #4400	; 0x1130
   106f0:	bd10      	pop	{r4, pc}

000106f2 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   106f2:	f7fb bf57 	b.w	c5a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   106f6:	b510      	push	{r4, lr}
   106f8:	460a      	mov	r2, r1
   106fa:	b130      	cbz	r0, 1070a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   106fc:	2801      	cmp	r0, #1
   106fe:	d00b      	beq.n	10718 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   10700:	f240 6114 	movw	r1, #1556	; 0x614
   10704:	203e      	movs	r0, #62	; 0x3e
   10706:	f7f4 fac3 	bl	4c90 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1070a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1070e:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10712:	4610      	mov	r0, r2
   10714:	f7fa beda 	b.w	b4cc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   10718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1071c:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10720:	4610      	mov	r0, r2
   10722:	f7fa bebd 	b.w	b4a0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   10726:	5840      	ldr	r0, [r0, r1]
   10728:	2800      	cmp	r0, #0
   1072a:	d000      	beq.n	1072e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   1072c:	2001      	movs	r0, #1
   1072e:	4770      	bx	lr
   10730:	5840      	ldr	r0, [r0, r1]
   10732:	2800      	cmp	r0, #0
   10734:	d000      	beq.n	10738 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   10736:	2001      	movs	r0, #1
   10738:	4770      	bx	lr

0001073a <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   1073a:	b570      	push	{r4, r5, r6, lr}
   1073c:	4605      	mov	r5, r0
   1073e:	4614      	mov	r4, r2
   10740:	4608      	mov	r0, r1
   10742:	f7ff ffc6 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10746:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   1074a:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1074e:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   10752:	4620      	mov	r0, r4
   10754:	f7ff ffbd 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10758:	4428      	add	r0, r5
   1075a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1075e:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10762:	fbb0 f5f1 	udiv	r5, r0, r1
   10766:	4620      	mov	r0, r4
   10768:	f7ff ffa5 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1076c:	4428      	add	r0, r5
   1076e:	1d40      	adds	r0, r0, #5
   10770:	bd70      	pop	{r4, r5, r6, pc}

00010772 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10776:	4607      	mov	r7, r0
   10778:	461d      	mov	r5, r3
   1077a:	460e      	mov	r6, r1
   1077c:	4614      	mov	r4, r2
   1077e:	4610      	mov	r0, r2
   10780:	f7ff ffa7 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10784:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10788:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1078c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   10790:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10794:	2e02      	cmp	r6, #2
   10796:	d00e      	beq.n	107b6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10798:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1079c:	4411      	add	r1, r2
   1079e:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   107a2:	fbb1 f6f0 	udiv	r6, r1, r0
   107a6:	4620      	mov	r0, r4
   107a8:	f7ff ff85 	bl	106b6 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   107ac:	4430      	add	r0, r6
   107ae:	4428      	add	r0, r5
   107b0:	1d40      	adds	r0, r0, #5
   107b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   107b6:	4602      	mov	r2, r0
   107b8:	e7f0      	b.n	1079c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

000107ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   107ba:	b510      	push	{r4, lr}
   107bc:	4604      	mov	r4, r0
   107be:	4608      	mov	r0, r1
   107c0:	f7ff ff87 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   107c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   107c8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   107cc:	fbb0 f0f1 	udiv	r0, r0, r1
   107d0:	1a20      	subs	r0, r4, r0
   107d2:	1e80      	subs	r0, r0, #2
   107d4:	bd10      	pop	{r4, pc}

000107d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   107d6:	b510      	push	{r4, lr}
   107d8:	4604      	mov	r4, r0
   107da:	4608      	mov	r0, r1
   107dc:	f7ff ff79 	bl	106d2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   107e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   107e4:	fbb0 f0f1 	udiv	r0, r0, r1
   107e8:	1a20      	subs	r0, r4, r0
   107ea:	bd10      	pop	{r4, pc}

000107ec <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   107ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   107f0:	2902      	cmp	r1, #2
   107f2:	d008      	beq.n	10806 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   107f4:	f240 51dc 	movw	r1, #1500	; 0x5dc
   107f8:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   107fc:	fbb1 f1f2 	udiv	r1, r1, r2
   10800:	4408      	add	r0, r1
   10802:	1e80      	subs	r0, r0, #2
   10804:	4770      	bx	lr
   10806:	4611      	mov	r1, r2
   10808:	e7f6      	b.n	107f8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0001080a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   1080a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1080e:	2902      	cmp	r1, #2
   10810:	d007      	beq.n	10822 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10812:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10816:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   1081a:	fbb1 f1f2 	udiv	r1, r1, r2
   1081e:	4408      	add	r0, r1
   10820:	4770      	bx	lr
   10822:	4611      	mov	r1, r2
   10824:	e7f7      	b.n	10816 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10826:	080c      	.short	0x080c
   10828:	010d1702 	.word	0x010d1702
   1082c:	09090201 	.word	0x09090201
   10830:	02060101 	.word	0x02060101
   10834:	03181809 	.word	0x03181809
   10838:	09090101 	.word	0x09090101
   1083c:	00050303 	.word	0x00050303

00010840 <MLX90641_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90641_GetVdd(uint16_t *frameData, const paramsMLX90641 *params)
{
   10840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10844:	4606      	mov	r6, r0
   10846:	460c      	mov	r4, r1
    float vdd;
    float resolutionCorrection;
    
    int resolutionRAM;    
    
    vdd = frameData[234];
   10848:	f8b0 71d4 	ldrh.w	r7, [r0, #468]	; 0x1d4
   1084c:	4638      	mov	r0, r7
   1084e:	f7f0 f9fb 	bl	c48 <__aeabi_ui2f>
   10852:	4605      	mov	r5, r0
    if(vdd > 32767)
   10854:	f417 4f00 	tst.w	r7, #32768	; 0x8000
   10858:	d145      	bne.n	108e6 <MLX90641_GetVdd+0xa6>
    {
        vdd = vdd - 65536;
    }
    resolutionRAM = (frameData[240] & 0x0C00) >> 10;
   1085a:	f8b6 a1e0 	ldrh.w	sl, [r6, #480]	; 0x1e0
   1085e:	f3ca 2a81 	ubfx	sl, sl, #10, #2
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
   10862:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   10866:	f7ef fd8d 	bl	384 <__aeabi_ui2d>
   1086a:	4602      	mov	r2, r0
   1086c:	460b      	mov	r3, r1
   1086e:	f04f 0800 	mov.w	r8, #0
   10872:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   10876:	4640      	mov	r0, r8
   10878:	4649      	mov	r1, r9
   1087a:	f011 ff0d 	bl	22698 <pow>
   1087e:	4606      	mov	r6, r0
   10880:	460f      	mov	r7, r1
   10882:	4650      	mov	r0, sl
   10884:	f7ef fd8e 	bl	3a4 <__aeabi_i2d>
   10888:	4602      	mov	r2, r0
   1088a:	460b      	mov	r3, r1
   1088c:	4640      	mov	r0, r8
   1088e:	4649      	mov	r1, r9
   10890:	f011 ff02 	bl	22698 <pow>
   10894:	4602      	mov	r2, r0
   10896:	460b      	mov	r3, r1
   10898:	4630      	mov	r0, r6
   1089a:	4639      	mov	r1, r7
   1089c:	f7ef ff16 	bl	6cc <__aeabi_ddiv>
   108a0:	f7f0 f8cc 	bl	a3c <__aeabi_d2f>
   108a4:	4601      	mov	r1, r0
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3;
   108a6:	4628      	mov	r0, r5
   108a8:	f7f0 fa26 	bl	cf8 <__aeabi_fmul>
   108ac:	4605      	mov	r5, r0
   108ae:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
   108b2:	f7f0 f9cd 	bl	c50 <__aeabi_i2f>
   108b6:	4601      	mov	r1, r0
   108b8:	4628      	mov	r0, r5
   108ba:	f7f0 f913 	bl	ae4 <__aeabi_fsub>
   108be:	4605      	mov	r5, r0
   108c0:	f9b4 0000 	ldrsh.w	r0, [r4]
   108c4:	f7f0 f9c4 	bl	c50 <__aeabi_i2f>
   108c8:	4601      	mov	r1, r0
   108ca:	4628      	mov	r0, r5
   108cc:	f7f0 fac8 	bl	e60 <__aeabi_fdiv>
   108d0:	f7ef fd7a 	bl	3c8 <__aeabi_f2d>
   108d4:	a308      	add	r3, pc, #32	; (adr r3, 108f8 <MLX90641_GetVdd+0xb8>)
   108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   108da:	f7ef fc17 	bl	10c <__adddf3>
   108de:	f7f0 f8ad 	bl	a3c <__aeabi_d2f>
    
    return vdd;
}
   108e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        vdd = vdd - 65536;
   108e6:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   108ea:	f7f0 f8fb 	bl	ae4 <__aeabi_fsub>
   108ee:	4605      	mov	r5, r0
   108f0:	e7b3      	b.n	1085a <MLX90641_GetVdd+0x1a>
   108f2:	bf00      	nop
   108f4:	f3af 8000 	nop.w
   108f8:	66666666 	.word	0x66666666
   108fc:	400a6666 	.word	0x400a6666

00010900 <MLX90641_GetTa>:

//------------------------------------------------------------------------------

float MLX90641_GetTa(uint16_t *frameData, const paramsMLX90641 *params)
{
   10900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10904:	4606      	mov	r6, r0
   10906:	460c      	mov	r4, r1
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90641_GetVdd(frameData, params);
   10908:	f7ff ff9a 	bl	10840 <MLX90641_GetVdd>
   1090c:	4607      	mov	r7, r0
    
    ptat = frameData[224];
   1090e:	f8b6 81c0 	ldrh.w	r8, [r6, #448]	; 0x1c0
   10912:	4640      	mov	r0, r8
   10914:	f7f0 f998 	bl	c48 <__aeabi_ui2f>
   10918:	4605      	mov	r5, r0
    if(ptat > 32767)
   1091a:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   1091e:	d15c      	bne.n	109da <MLX90641_GetTa+0xda>
    {
        ptat = ptat - 65536;
    }
    
    ptatArt = frameData[192];
   10920:	f8b6 8180 	ldrh.w	r8, [r6, #384]	; 0x180
   10924:	4640      	mov	r0, r8
   10926:	f7f0 f98f 	bl	c48 <__aeabi_ui2f>
   1092a:	4606      	mov	r6, r0
    if(ptatArt > 32767)
   1092c:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   10930:	d159      	bne.n	109e6 <MLX90641_GetTa+0xe6>
    {
        ptatArt = ptatArt - 65536;
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
   10932:	4629      	mov	r1, r5
   10934:	6920      	ldr	r0, [r4, #16]
   10936:	f7f0 f9df 	bl	cf8 <__aeabi_fmul>
   1093a:	4631      	mov	r1, r6
   1093c:	f7f0 f8d4 	bl	ae8 <__addsf3>
   10940:	4601      	mov	r1, r0
   10942:	4628      	mov	r0, r5
   10944:	f7f0 fa8c 	bl	e60 <__aeabi_fdiv>
   10948:	f7ef fd3e 	bl	3c8 <__aeabi_f2d>
   1094c:	4680      	mov	r8, r0
   1094e:	4689      	mov	r9, r1
   10950:	2200      	movs	r2, #0
   10952:	4b2b      	ldr	r3, [pc, #172]	; (10a00 <MLX90641_GetTa+0x100>)
   10954:	2000      	movs	r0, #0
   10956:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1095a:	f011 fe9d 	bl	22698 <pow>
   1095e:	4602      	mov	r2, r0
   10960:	460b      	mov	r3, r1
   10962:	4640      	mov	r0, r8
   10964:	4649      	mov	r1, r9
   10966:	f7ef fd87 	bl	478 <__aeabi_dmul>
   1096a:	f7f0 f867 	bl	a3c <__aeabi_d2f>
   1096e:	4605      	mov	r5, r0
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
   10970:	6860      	ldr	r0, [r4, #4]
   10972:	f7ef fd29 	bl	3c8 <__aeabi_f2d>
   10976:	4680      	mov	r8, r0
   10978:	4689      	mov	r9, r1
   1097a:	4638      	mov	r0, r7
   1097c:	f7ef fd24 	bl	3c8 <__aeabi_f2d>
   10980:	a31d      	add	r3, pc, #116	; (adr r3, 109f8 <MLX90641_GetTa+0xf8>)
   10982:	e9d3 2300 	ldrd	r2, r3, [r3]
   10986:	f7ef fbbf 	bl	108 <__aeabi_dsub>
   1098a:	4602      	mov	r2, r0
   1098c:	460b      	mov	r3, r1
   1098e:	4640      	mov	r0, r8
   10990:	4649      	mov	r1, r9
   10992:	f7ef fd71 	bl	478 <__aeabi_dmul>
   10996:	2200      	movs	r2, #0
   10998:	4b1a      	ldr	r3, [pc, #104]	; (10a04 <MLX90641_GetTa+0x104>)
   1099a:	f7ef fbb7 	bl	10c <__adddf3>
   1099e:	4606      	mov	r6, r0
   109a0:	460f      	mov	r7, r1
   109a2:	4628      	mov	r0, r5
   109a4:	f7ef fd10 	bl	3c8 <__aeabi_f2d>
   109a8:	4632      	mov	r2, r6
   109aa:	463b      	mov	r3, r7
   109ac:	f7ef fe8e 	bl	6cc <__aeabi_ddiv>
   109b0:	4606      	mov	r6, r0
   109b2:	460f      	mov	r7, r1
   109b4:	89a0      	ldrh	r0, [r4, #12]
   109b6:	f7ef fcf5 	bl	3a4 <__aeabi_i2d>
   109ba:	4602      	mov	r2, r0
   109bc:	460b      	mov	r3, r1
   109be:	4630      	mov	r0, r6
   109c0:	4639      	mov	r1, r7
   109c2:	f7ef fba1 	bl	108 <__aeabi_dsub>
   109c6:	f7f0 f839 	bl	a3c <__aeabi_d2f>
    ta = ta / params->KtPTAT + 25;
   109ca:	68a1      	ldr	r1, [r4, #8]
   109cc:	f7f0 fa48 	bl	e60 <__aeabi_fdiv>
   109d0:	490d      	ldr	r1, [pc, #52]	; (10a08 <MLX90641_GetTa+0x108>)
   109d2:	f7f0 f889 	bl	ae8 <__addsf3>
    
    return ta;
}
   109d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ptat = ptat - 65536;
   109da:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   109de:	f7f0 f881 	bl	ae4 <__aeabi_fsub>
   109e2:	4605      	mov	r5, r0
   109e4:	e79c      	b.n	10920 <MLX90641_GetTa+0x20>
        ptatArt = ptatArt - 65536;
   109e6:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   109ea:	f7f0 f87b 	bl	ae4 <__aeabi_fsub>
   109ee:	4606      	mov	r6, r0
   109f0:	e79f      	b.n	10932 <MLX90641_GetTa+0x32>
   109f2:	bf00      	nop
   109f4:	f3af 8000 	nop.w
   109f8:	66666666 	.word	0x66666666
   109fc:	400a6666 	.word	0x400a6666
   10a00:	40320000 	.word	0x40320000
   10a04:	3ff00000 	.word	0x3ff00000
   10a08:	41c80000 	.word	0x41c80000
   10a0c:	00000000 	.word	0x00000000

00010a10 <MLX90641_CalculateTo>:
{
   10a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a14:	b097      	sub	sp, #92	; 0x5c
   10a16:	4605      	mov	r5, r0
   10a18:	468b      	mov	fp, r1
   10a1a:	4616      	mov	r6, r2
   10a1c:	920d      	str	r2, [sp, #52]	; 0x34
   10a1e:	461c      	mov	r4, r3
    subPage = frameData[241];
   10a20:	f8b0 31e2 	ldrh.w	r3, [r0, #482]	; 0x1e2
   10a24:	9308      	str	r3, [sp, #32]
    vdd = MLX90641_GetVdd(frameData, params);
   10a26:	f7ff ff0b 	bl	10840 <MLX90641_GetVdd>
   10a2a:	9001      	str	r0, [sp, #4]
    ta = MLX90641_GetTa(frameData, params);    
   10a2c:	4659      	mov	r1, fp
   10a2e:	9503      	str	r5, [sp, #12]
   10a30:	4628      	mov	r0, r5
   10a32:	f7ff ff65 	bl	10900 <MLX90641_GetTa>
   10a36:	4681      	mov	r9, r0
    ta4 = (ta + 273.15);
   10a38:	f7ef fcc6 	bl	3c8 <__aeabi_f2d>
   10a3c:	a3a6      	add	r3, pc, #664	; (adr r3, 10cd8 <MLX90641_CalculateTo+0x2c8>)
   10a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a42:	f7ef fb63 	bl	10c <__adddf3>
   10a46:	f7ef fff9 	bl	a3c <__aeabi_d2f>
   10a4a:	4601      	mov	r1, r0
    ta4 = ta4 * ta4;
   10a4c:	f7f0 f954 	bl	cf8 <__aeabi_fmul>
   10a50:	4601      	mov	r1, r0
    ta4 = ta4 * ta4;
   10a52:	f7f0 f951 	bl	cf8 <__aeabi_fmul>
   10a56:	4605      	mov	r5, r0
    tr4 = (tr + 273.15);
   10a58:	4620      	mov	r0, r4
   10a5a:	f7ef fcb5 	bl	3c8 <__aeabi_f2d>
   10a5e:	a39e      	add	r3, pc, #632	; (adr r3, 10cd8 <MLX90641_CalculateTo+0x2c8>)
   10a60:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a64:	f7ef fb52 	bl	10c <__adddf3>
   10a68:	f7ef ffe8 	bl	a3c <__aeabi_d2f>
   10a6c:	4601      	mov	r1, r0
    tr4 = tr4 * tr4;
   10a6e:	f7f0 f943 	bl	cf8 <__aeabi_fmul>
   10a72:	4601      	mov	r1, r0
    tr4 = tr4 * tr4;
   10a74:	f7f0 f940 	bl	cf8 <__aeabi_fmul>
   10a78:	4604      	mov	r4, r0
    taTr = tr4 - (tr4-ta4)/emissivity;
   10a7a:	4629      	mov	r1, r5
   10a7c:	f7f0 f832 	bl	ae4 <__aeabi_fsub>
   10a80:	4631      	mov	r1, r6
   10a82:	f7f0 f9ed 	bl	e60 <__aeabi_fdiv>
   10a86:	4601      	mov	r1, r0
   10a88:	4620      	mov	r0, r4
   10a8a:	f7f0 f82b 	bl	ae4 <__aeabi_fsub>
   10a8e:	4682      	mov	sl, r0
    ktaScale = pow(2,(double)params->ktaScale);
   10a90:	f89b 059e 	ldrb.w	r0, [fp, #1438]	; 0x59e
   10a94:	f7ef fc76 	bl	384 <__aeabi_ui2d>
   10a98:	4602      	mov	r2, r0
   10a9a:	460b      	mov	r3, r1
   10a9c:	2400      	movs	r4, #0
   10a9e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   10aa2:	4620      	mov	r0, r4
   10aa4:	4629      	mov	r1, r5
   10aa6:	f011 fdf7 	bl	22698 <pow>
   10aaa:	f7ef ffc7 	bl	a3c <__aeabi_d2f>
   10aae:	9009      	str	r0, [sp, #36]	; 0x24
    kvScale = pow(2,(double)params->kvScale);
   10ab0:	f89b 065f 	ldrb.w	r0, [fp, #1631]	; 0x65f
   10ab4:	f7ef fc66 	bl	384 <__aeabi_ui2d>
   10ab8:	4602      	mov	r2, r0
   10aba:	460b      	mov	r3, r1
   10abc:	4620      	mov	r0, r4
   10abe:	4629      	mov	r1, r5
   10ac0:	f011 fdea 	bl	22698 <pow>
   10ac4:	f7ef ffba 	bl	a3c <__aeabi_d2f>
   10ac8:	900a      	str	r0, [sp, #40]	; 0x28
    alphaScale = pow(2,(double)params->alphaScale);
   10aca:	f89b 01dc 	ldrb.w	r0, [fp, #476]	; 0x1dc
   10ace:	f7ef fc59 	bl	384 <__aeabi_ui2d>
   10ad2:	4602      	mov	r2, r0
   10ad4:	460b      	mov	r3, r1
   10ad6:	4620      	mov	r0, r4
   10ad8:	4629      	mov	r1, r5
   10ada:	f011 fddd 	bl	22698 <pow>
   10ade:	f7ef ffad 	bl	a3c <__aeabi_d2f>
   10ae2:	900b      	str	r0, [sp, #44]	; 0x2c
    alphaCorrR[1] = 1 / (1 + params->ksTo[1] * 20);
   10ae4:	4980      	ldr	r1, [pc, #512]	; (10ce8 <MLX90641_CalculateTo+0x2d8>)
   10ae6:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
   10aea:	f7f0 f905 	bl	cf8 <__aeabi_fmul>
   10aee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10af2:	f7ef fff9 	bl	ae8 <__addsf3>
   10af6:	4601      	mov	r1, r0
   10af8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   10afc:	f7f0 f9b0 	bl	e60 <__aeabi_fdiv>
   10b00:	4604      	mov	r4, r0
   10b02:	900f      	str	r0, [sp, #60]	; 0x3c
    alphaCorrR[0] = alphaCorrR[1] / (1 + params->ksTo[0] * 20);
   10b04:	4978      	ldr	r1, [pc, #480]	; (10ce8 <MLX90641_CalculateTo+0x2d8>)
   10b06:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
   10b0a:	f7f0 f8f5 	bl	cf8 <__aeabi_fmul>
   10b0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10b12:	f7ef ffe9 	bl	ae8 <__addsf3>
   10b16:	4601      	mov	r1, r0
   10b18:	4620      	mov	r0, r4
   10b1a:	f7f0 f9a1 	bl	e60 <__aeabi_fdiv>
   10b1e:	900e      	str	r0, [sp, #56]	; 0x38
    alphaCorrR[2] = 1 ;
   10b20:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
   10b24:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
    alphaCorrR[3] = (1 + params->ksTo[2] * params->ct[3]);
   10b28:	f8db 5034 	ldr.w	r5, [fp, #52]	; 0x34
   10b2c:	f9bb 4052 	ldrsh.w	r4, [fp, #82]	; 0x52
   10b30:	4620      	mov	r0, r4
   10b32:	f7f0 f88d 	bl	c50 <__aeabi_i2f>
   10b36:	4629      	mov	r1, r5
   10b38:	f7f0 f8de 	bl	cf8 <__aeabi_fmul>
   10b3c:	4641      	mov	r1, r8
   10b3e:	f7ef ffd3 	bl	ae8 <__addsf3>
   10b42:	4607      	mov	r7, r0
   10b44:	9011      	str	r0, [sp, #68]	; 0x44
    alphaCorrR[4] = alphaCorrR[3] * (1 + params->ksTo[3] * (params->ct[4] - params->ct[3]));
   10b46:	f8db 6038 	ldr.w	r6, [fp, #56]	; 0x38
   10b4a:	f9bb 5054 	ldrsh.w	r5, [fp, #84]	; 0x54
   10b4e:	1b28      	subs	r0, r5, r4
   10b50:	f7f0 f87e 	bl	c50 <__aeabi_i2f>
   10b54:	4631      	mov	r1, r6
   10b56:	f7f0 f8cf 	bl	cf8 <__aeabi_fmul>
   10b5a:	4641      	mov	r1, r8
   10b5c:	f7ef ffc4 	bl	ae8 <__addsf3>
   10b60:	4601      	mov	r1, r0
   10b62:	4638      	mov	r0, r7
   10b64:	f7f0 f8c8 	bl	cf8 <__aeabi_fmul>
   10b68:	4607      	mov	r7, r0
   10b6a:	9012      	str	r0, [sp, #72]	; 0x48
    alphaCorrR[5] = alphaCorrR[4] * (1 + params->ksTo[4] * (params->ct[5] - params->ct[4]));
   10b6c:	f8db 603c 	ldr.w	r6, [fp, #60]	; 0x3c
   10b70:	f9bb 4056 	ldrsh.w	r4, [fp, #86]	; 0x56
   10b74:	1b60      	subs	r0, r4, r5
   10b76:	f7f0 f86b 	bl	c50 <__aeabi_i2f>
   10b7a:	4631      	mov	r1, r6
   10b7c:	f7f0 f8bc 	bl	cf8 <__aeabi_fmul>
   10b80:	4641      	mov	r1, r8
   10b82:	f7ef ffb1 	bl	ae8 <__addsf3>
   10b86:	4601      	mov	r1, r0
   10b88:	4638      	mov	r0, r7
   10b8a:	f7f0 f8b5 	bl	cf8 <__aeabi_fmul>
   10b8e:	4607      	mov	r7, r0
   10b90:	9013      	str	r0, [sp, #76]	; 0x4c
    alphaCorrR[6] = alphaCorrR[5] * (1 + params->ksTo[5] * (params->ct[6] - params->ct[5]));
   10b92:	f8db 6040 	ldr.w	r6, [fp, #64]	; 0x40
   10b96:	f9bb 5058 	ldrsh.w	r5, [fp, #88]	; 0x58
   10b9a:	1b28      	subs	r0, r5, r4
   10b9c:	f7f0 f858 	bl	c50 <__aeabi_i2f>
   10ba0:	4631      	mov	r1, r6
   10ba2:	f7f0 f8a9 	bl	cf8 <__aeabi_fmul>
   10ba6:	4641      	mov	r1, r8
   10ba8:	f7ef ff9e 	bl	ae8 <__addsf3>
   10bac:	4601      	mov	r1, r0
   10bae:	4638      	mov	r0, r7
   10bb0:	f7f0 f8a2 	bl	cf8 <__aeabi_fmul>
   10bb4:	4604      	mov	r4, r0
   10bb6:	9014      	str	r0, [sp, #80]	; 0x50
    alphaCorrR[7] = alphaCorrR[6] * (1 + params->ksTo[6] * (params->ct[7] - params->ct[6]));
   10bb8:	f8db 6044 	ldr.w	r6, [fp, #68]	; 0x44
   10bbc:	f9bb 005a 	ldrsh.w	r0, [fp, #90]	; 0x5a
   10bc0:	1b40      	subs	r0, r0, r5
   10bc2:	f7f0 f845 	bl	c50 <__aeabi_i2f>
   10bc6:	4631      	mov	r1, r6
   10bc8:	f7f0 f896 	bl	cf8 <__aeabi_fmul>
   10bcc:	4641      	mov	r1, r8
   10bce:	f7ef ff8b 	bl	ae8 <__addsf3>
   10bd2:	4601      	mov	r1, r0
   10bd4:	4620      	mov	r0, r4
   10bd6:	f7f0 f88f 	bl	cf8 <__aeabi_fmul>
   10bda:	9015      	str	r0, [sp, #84]	; 0x54
    gain = frameData[202];
   10bdc:	9d03      	ldr	r5, [sp, #12]
   10bde:	f8b5 5194 	ldrh.w	r5, [r5, #404]	; 0x194
   10be2:	4628      	mov	r0, r5
   10be4:	f7f0 f830 	bl	c48 <__aeabi_ui2f>
   10be8:	4604      	mov	r4, r0
    if(gain > 32767)
   10bea:	f415 4f00 	tst.w	r5, #32768	; 0x8000
   10bee:	d161      	bne.n	10cb4 <MLX90641_CalculateTo+0x2a4>
    gain = params->gainEE / gain; 
   10bf0:	f9bb 0014 	ldrsh.w	r0, [fp, #20]
   10bf4:	f7f0 f82c 	bl	c50 <__aeabi_i2f>
   10bf8:	4621      	mov	r1, r4
   10bfa:	f7f0 f931 	bl	e60 <__aeabi_fdiv>
   10bfe:	9004      	str	r0, [sp, #16]
    irDataCP = frameData[200];  
   10c00:	9b03      	ldr	r3, [sp, #12]
   10c02:	f8b3 4190 	ldrh.w	r4, [r3, #400]	; 0x190
   10c06:	4620      	mov	r0, r4
   10c08:	f7f0 f81e 	bl	c48 <__aeabi_ui2f>
    if(irDataCP > 32767)
   10c0c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   10c10:	d156      	bne.n	10cc0 <MLX90641_CalculateTo+0x2b0>
    irDataCP = irDataCP * gain;
   10c12:	9904      	ldr	r1, [sp, #16]
   10c14:	f7f0 f870 	bl	cf8 <__aeabi_fmul>
   10c18:	4606      	mov	r6, r0
    irDataCP = irDataCP - params->cpOffset * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
   10c1a:	f9bb 5664 	ldrsh.w	r5, [fp, #1636]	; 0x664
   10c1e:	f8db 4020 	ldr.w	r4, [fp, #32]
   10c22:	4932      	ldr	r1, [pc, #200]	; (10cec <MLX90641_CalculateTo+0x2dc>)
   10c24:	4648      	mov	r0, r9
   10c26:	f7ef ff5d 	bl	ae4 <__aeabi_fsub>
   10c2a:	4601      	mov	r1, r0
   10c2c:	9005      	str	r0, [sp, #20]
   10c2e:	4620      	mov	r0, r4
   10c30:	f7f0 f862 	bl	cf8 <__aeabi_fmul>
   10c34:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10c38:	f7ef ff56 	bl	ae8 <__addsf3>
   10c3c:	4604      	mov	r4, r0
   10c3e:	4628      	mov	r0, r5
   10c40:	f7f0 f806 	bl	c50 <__aeabi_i2f>
   10c44:	4621      	mov	r1, r4
   10c46:	f7f0 f857 	bl	cf8 <__aeabi_fmul>
   10c4a:	f7ef fbbd 	bl	3c8 <__aeabi_f2d>
   10c4e:	4680      	mov	r8, r0
   10c50:	4689      	mov	r9, r1
   10c52:	f8db 001c 	ldr.w	r0, [fp, #28]
   10c56:	f7ef fbb7 	bl	3c8 <__aeabi_f2d>
   10c5a:	4604      	mov	r4, r0
   10c5c:	460d      	mov	r5, r1
   10c5e:	9801      	ldr	r0, [sp, #4]
   10c60:	f7ef fbb2 	bl	3c8 <__aeabi_f2d>
   10c64:	a31e      	add	r3, pc, #120	; (adr r3, 10ce0 <MLX90641_CalculateTo+0x2d0>)
   10c66:	e9d3 2300 	ldrd	r2, r3, [r3]
   10c6a:	f7ef fa4d 	bl	108 <__aeabi_dsub>
   10c6e:	4602      	mov	r2, r0
   10c70:	460b      	mov	r3, r1
   10c72:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10c76:	4620      	mov	r0, r4
   10c78:	4629      	mov	r1, r5
   10c7a:	f7ef fbfd 	bl	478 <__aeabi_dmul>
   10c7e:	2200      	movs	r2, #0
   10c80:	4b1b      	ldr	r3, [pc, #108]	; (10cf0 <MLX90641_CalculateTo+0x2e0>)
   10c82:	f7ef fa43 	bl	10c <__adddf3>
   10c86:	4602      	mov	r2, r0
   10c88:	460b      	mov	r3, r1
   10c8a:	4640      	mov	r0, r8
   10c8c:	4649      	mov	r1, r9
   10c8e:	f7ef fbf3 	bl	478 <__aeabi_dmul>
   10c92:	4604      	mov	r4, r0
   10c94:	460d      	mov	r5, r1
   10c96:	4630      	mov	r0, r6
   10c98:	f7ef fb96 	bl	3c8 <__aeabi_f2d>
   10c9c:	4622      	mov	r2, r4
   10c9e:	462b      	mov	r3, r5
   10ca0:	f7ef fa32 	bl	108 <__aeabi_dsub>
   10ca4:	f7ef feca 	bl	a3c <__aeabi_d2f>
   10ca8:	900c      	str	r0, [sp, #48]	; 0x30
    for( int pixelNumber = 0; pixelNumber < 192; pixelNumber++)
   10caa:	f04f 0900 	mov.w	r9, #0
   10cae:	f8cd a004 	str.w	sl, [sp, #4]
   10cb2:	e05f      	b.n	10d74 <MLX90641_CalculateTo+0x364>
        gain = gain - 65536;
   10cb4:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   10cb8:	f7ef ff14 	bl	ae4 <__aeabi_fsub>
   10cbc:	4604      	mov	r4, r0
   10cbe:	e797      	b.n	10bf0 <MLX90641_CalculateTo+0x1e0>
        irDataCP = irDataCP - 65536;
   10cc0:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   10cc4:	f7ef ff0e 	bl	ae4 <__aeabi_fsub>
   10cc8:	e7a3      	b.n	10c12 <MLX90641_CalculateTo+0x202>
            irData = irData - 65536;
   10cca:	f04f 418f 	mov.w	r1, #1199570944	; 0x47800000
   10cce:	f7ef ff09 	bl	ae4 <__aeabi_fsub>
   10cd2:	e05e      	b.n	10d92 <MLX90641_CalculateTo+0x382>
   10cd4:	f3af 8000 	nop.w
   10cd8:	66666666 	.word	0x66666666
   10cdc:	40711266 	.word	0x40711266
   10ce0:	66666666 	.word	0x66666666
   10ce4:	400a6666 	.word	0x400a6666
   10ce8:	41a00000 	.word	0x41a00000
   10cec:	41c80000 	.word	0x41c80000
   10cf0:	3ff00000 	.word	0x3ff00000
            range = 0;
   10cf4:	2400      	movs	r4, #0
        To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
   10cf6:	ab16      	add	r3, sp, #88	; 0x58
   10cf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   10cfc:	4641      	mov	r1, r8
   10cfe:	f853 0c20 	ldr.w	r0, [r3, #-32]
   10d02:	f7ef fff9 	bl	cf8 <__aeabi_fmul>
   10d06:	4606      	mov	r6, r0
   10d08:	f104 030a 	add.w	r3, r4, #10
   10d0c:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
   10d10:	685f      	ldr	r7, [r3, #4]
   10d12:	3424      	adds	r4, #36	; 0x24
   10d14:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
   10d18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
   10d1c:	f7ef ff98 	bl	c50 <__aeabi_i2f>
   10d20:	4601      	mov	r1, r0
   10d22:	4628      	mov	r0, r5
   10d24:	f7ef fede 	bl	ae4 <__aeabi_fsub>
   10d28:	4601      	mov	r1, r0
   10d2a:	4638      	mov	r0, r7
   10d2c:	f7ef ffe4 	bl	cf8 <__aeabi_fmul>
   10d30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10d34:	f7ef fed8 	bl	ae8 <__addsf3>
   10d38:	4601      	mov	r1, r0
   10d3a:	4630      	mov	r0, r6
   10d3c:	f7ef ffdc 	bl	cf8 <__aeabi_fmul>
   10d40:	4601      	mov	r1, r0
   10d42:	4650      	mov	r0, sl
   10d44:	f7f0 f88c 	bl	e60 <__aeabi_fdiv>
   10d48:	9901      	ldr	r1, [sp, #4]
   10d4a:	f7ef fecd 	bl	ae8 <__addsf3>
   10d4e:	f7ef fb3b 	bl	3c8 <__aeabi_f2d>
   10d52:	f011 fe3d 	bl	229d0 <sqrt>
   10d56:	f011 fe3b 	bl	229d0 <sqrt>
   10d5a:	a3a9      	add	r3, pc, #676	; (adr r3, 11000 <MLX90641_CalculateTo+0x5f0>)
   10d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d60:	f7ef f9d2 	bl	108 <__aeabi_dsub>
   10d64:	f7ef fe6a 	bl	a3c <__aeabi_d2f>
        result[pixelNumber] = To;
   10d68:	9b20      	ldr	r3, [sp, #128]	; 0x80
   10d6a:	9a02      	ldr	r2, [sp, #8]
   10d6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    for( int pixelNumber = 0; pixelNumber < 192; pixelNumber++)
   10d70:	f109 0901 	add.w	r9, r9, #1
   10d74:	f1b9 0fbf 	cmp.w	r9, #191	; 0xbf
   10d78:	f300 813f 	bgt.w	10ffa <MLX90641_CalculateTo+0x5ea>
        irData = frameData[pixelNumber];
   10d7c:	f8cd 9008 	str.w	r9, [sp, #8]
   10d80:	9b03      	ldr	r3, [sp, #12]
   10d82:	f833 4019 	ldrh.w	r4, [r3, r9, lsl #1]
   10d86:	4620      	mov	r0, r4
   10d88:	f7ef ff5e 	bl	c48 <__aeabi_ui2f>
        if(irData > 32767)
   10d8c:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   10d90:	d19b      	bne.n	10cca <MLX90641_CalculateTo+0x2ba>
        irData = irData * gain;
   10d92:	9904      	ldr	r1, [sp, #16]
   10d94:	f7ef ffb0 	bl	cf8 <__aeabi_fmul>
   10d98:	4606      	mov	r6, r0
        kta = (float)params->kta[pixelNumber]/ktaScale;
   10d9a:	eb0b 0509 	add.w	r5, fp, r9
   10d9e:	f995 04de 	ldrsb.w	r0, [r5, #1246]	; 0x4de
   10da2:	f7ef ff55 	bl	c50 <__aeabi_i2f>
   10da6:	9909      	ldr	r1, [sp, #36]	; 0x24
   10da8:	f7f0 f85a 	bl	e60 <__aeabi_fdiv>
   10dac:	4604      	mov	r4, r0
        kv = (float)params->kv[pixelNumber]/kvScale;
   10dae:	f995 059f 	ldrsb.w	r0, [r5, #1439]	; 0x59f
   10db2:	f7ef ff4d 	bl	c50 <__aeabi_i2f>
   10db6:	990a      	ldr	r1, [sp, #40]	; 0x28
   10db8:	f7f0 f852 	bl	e60 <__aeabi_fdiv>
   10dbc:	4607      	mov	r7, r0
        irData = irData - params->offset[subPage][pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));                
   10dbe:	9b08      	ldr	r3, [sp, #32]
   10dc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10dc4:	eb09 1383 	add.w	r3, r9, r3, lsl #6
   10dc8:	33ec      	adds	r3, #236	; 0xec
   10dca:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
   10dce:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
   10dd2:	4621      	mov	r1, r4
   10dd4:	f8dd 8014 	ldr.w	r8, [sp, #20]
   10dd8:	4640      	mov	r0, r8
   10dda:	f7ef ff8d 	bl	cf8 <__aeabi_fmul>
   10dde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10de2:	f7ef fe81 	bl	ae8 <__addsf3>
   10de6:	4604      	mov	r4, r0
   10de8:	4628      	mov	r0, r5
   10dea:	f7ef ff31 	bl	c50 <__aeabi_i2f>
   10dee:	4621      	mov	r1, r4
   10df0:	f7ef ff82 	bl	cf8 <__aeabi_fmul>
   10df4:	f7ef fae8 	bl	3c8 <__aeabi_f2d>
   10df8:	4604      	mov	r4, r0
   10dfa:	460d      	mov	r5, r1
   10dfc:	4638      	mov	r0, r7
   10dfe:	f7ef fae3 	bl	3c8 <__aeabi_f2d>
   10e02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   10e06:	f7ef fb37 	bl	478 <__aeabi_dmul>
   10e0a:	2200      	movs	r2, #0
   10e0c:	4b80      	ldr	r3, [pc, #512]	; (11010 <MLX90641_CalculateTo+0x600>)
   10e0e:	f7ef f97d 	bl	10c <__adddf3>
   10e12:	4602      	mov	r2, r0
   10e14:	460b      	mov	r3, r1
   10e16:	4620      	mov	r0, r4
   10e18:	4629      	mov	r1, r5
   10e1a:	f7ef fb2d 	bl	478 <__aeabi_dmul>
   10e1e:	4604      	mov	r4, r0
   10e20:	460d      	mov	r5, r1
   10e22:	4630      	mov	r0, r6
   10e24:	f7ef fad0 	bl	3c8 <__aeabi_f2d>
   10e28:	4622      	mov	r2, r4
   10e2a:	462b      	mov	r3, r5
   10e2c:	f7ef f96c 	bl	108 <__aeabi_dsub>
   10e30:	f7ef fe04 	bl	a3c <__aeabi_d2f>
   10e34:	4604      	mov	r4, r0
        irData = irData - params->tgc * irDataCP;
   10e36:	990c      	ldr	r1, [sp, #48]	; 0x30
   10e38:	f8db 0018 	ldr.w	r0, [fp, #24]
   10e3c:	f7ef ff5c 	bl	cf8 <__aeabi_fmul>
   10e40:	4601      	mov	r1, r0
   10e42:	4620      	mov	r0, r4
   10e44:	f7ef fe4e 	bl	ae4 <__aeabi_fsub>
        irData = irData / emissivity;
   10e48:	990d      	ldr	r1, [sp, #52]	; 0x34
   10e4a:	f7f0 f809 	bl	e60 <__aeabi_fdiv>
   10e4e:	4682      	mov	sl, r0
        alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
   10e50:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10e52:	f7ef fab9 	bl	3c8 <__aeabi_f2d>
   10e56:	a36c      	add	r3, pc, #432	; (adr r3, 11008 <MLX90641_CalculateTo+0x5f8>)
   10e58:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e5c:	f7ef fb0c 	bl	478 <__aeabi_dmul>
   10e60:	4604      	mov	r4, r0
   10e62:	460d      	mov	r5, r1
   10e64:	f109 032c 	add.w	r3, r9, #44	; 0x2c
   10e68:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
   10e6c:	8898      	ldrh	r0, [r3, #4]
   10e6e:	f7ef fa99 	bl	3a4 <__aeabi_i2d>
   10e72:	4602      	mov	r2, r0
   10e74:	460b      	mov	r3, r1
   10e76:	4620      	mov	r0, r4
   10e78:	4629      	mov	r1, r5
   10e7a:	f7ef fc27 	bl	6cc <__aeabi_ddiv>
   10e7e:	f7ef fddd 	bl	a3c <__aeabi_d2f>
   10e82:	4604      	mov	r4, r0
        alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
   10e84:	f8db 1028 	ldr.w	r1, [fp, #40]	; 0x28
   10e88:	4640      	mov	r0, r8
   10e8a:	f7ef ff35 	bl	cf8 <__aeabi_fmul>
   10e8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   10e92:	f7ef fe29 	bl	ae8 <__addsf3>
   10e96:	4621      	mov	r1, r4
   10e98:	f7ef ff2e 	bl	cf8 <__aeabi_fmul>
   10e9c:	4680      	mov	r8, r0
        Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
   10e9e:	4601      	mov	r1, r0
   10ea0:	f7ef ff2a 	bl	cf8 <__aeabi_fmul>
   10ea4:	4641      	mov	r1, r8
   10ea6:	f7ef ff27 	bl	cf8 <__aeabi_fmul>
   10eaa:	4604      	mov	r4, r0
   10eac:	4641      	mov	r1, r8
   10eae:	9801      	ldr	r0, [sp, #4]
   10eb0:	f7ef ff22 	bl	cf8 <__aeabi_fmul>
   10eb4:	4651      	mov	r1, sl
   10eb6:	f7ef fe17 	bl	ae8 <__addsf3>
   10eba:	4601      	mov	r1, r0
   10ebc:	4620      	mov	r0, r4
   10ebe:	f7ef ff1b 	bl	cf8 <__aeabi_fmul>
        Sx = sqrt(sqrt(Sx)) * params->ksTo[2];
   10ec2:	f7ef fa81 	bl	3c8 <__aeabi_f2d>
   10ec6:	f011 fd83 	bl	229d0 <sqrt>
   10eca:	f011 fd81 	bl	229d0 <sqrt>
   10ece:	4606      	mov	r6, r0
   10ed0:	460f      	mov	r7, r1
   10ed2:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
   10ed6:	f7ef fa77 	bl	3c8 <__aeabi_f2d>
   10eda:	4604      	mov	r4, r0
   10edc:	460d      	mov	r5, r1
   10ede:	4602      	mov	r2, r0
   10ee0:	460b      	mov	r3, r1
   10ee2:	4630      	mov	r0, r6
   10ee4:	4639      	mov	r1, r7
   10ee6:	f7ef fac7 	bl	478 <__aeabi_dmul>
   10eea:	f7ef fda7 	bl	a3c <__aeabi_d2f>
   10eee:	4606      	mov	r6, r0
        To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[2] * 273.15) + Sx) + taTr)) - 273.15;
   10ef0:	a343      	add	r3, pc, #268	; (adr r3, 11000 <MLX90641_CalculateTo+0x5f0>)
   10ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ef6:	4620      	mov	r0, r4
   10ef8:	4629      	mov	r1, r5
   10efa:	f7ef fabd 	bl	478 <__aeabi_dmul>
   10efe:	4602      	mov	r2, r0
   10f00:	460b      	mov	r3, r1
   10f02:	2000      	movs	r0, #0
   10f04:	4942      	ldr	r1, [pc, #264]	; (11010 <MLX90641_CalculateTo+0x600>)
   10f06:	f7ef f8ff 	bl	108 <__aeabi_dsub>
   10f0a:	4604      	mov	r4, r0
   10f0c:	460d      	mov	r5, r1
   10f0e:	4640      	mov	r0, r8
   10f10:	f7ef fa5a 	bl	3c8 <__aeabi_f2d>
   10f14:	4622      	mov	r2, r4
   10f16:	462b      	mov	r3, r5
   10f18:	f7ef faae 	bl	478 <__aeabi_dmul>
   10f1c:	4604      	mov	r4, r0
   10f1e:	460d      	mov	r5, r1
   10f20:	4630      	mov	r0, r6
   10f22:	f7ef fa51 	bl	3c8 <__aeabi_f2d>
   10f26:	4622      	mov	r2, r4
   10f28:	462b      	mov	r3, r5
   10f2a:	f7ef f8ef 	bl	10c <__adddf3>
   10f2e:	4604      	mov	r4, r0
   10f30:	460d      	mov	r5, r1
   10f32:	4650      	mov	r0, sl
   10f34:	f7ef fa48 	bl	3c8 <__aeabi_f2d>
   10f38:	4622      	mov	r2, r4
   10f3a:	462b      	mov	r3, r5
   10f3c:	f7ef fbc6 	bl	6cc <__aeabi_ddiv>
   10f40:	4604      	mov	r4, r0
   10f42:	460d      	mov	r5, r1
   10f44:	9801      	ldr	r0, [sp, #4]
   10f46:	f7ef fa3f 	bl	3c8 <__aeabi_f2d>
   10f4a:	4622      	mov	r2, r4
   10f4c:	462b      	mov	r3, r5
   10f4e:	f7ef f8dd 	bl	10c <__adddf3>
   10f52:	f011 fd3d 	bl	229d0 <sqrt>
   10f56:	f011 fd3b 	bl	229d0 <sqrt>
   10f5a:	a329      	add	r3, pc, #164	; (adr r3, 11000 <MLX90641_CalculateTo+0x5f0>)
   10f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f60:	f7ef f8d2 	bl	108 <__aeabi_dsub>
   10f64:	f7ef fd6a 	bl	a3c <__aeabi_d2f>
   10f68:	4605      	mov	r5, r0
        if(To < params->ct[1])
   10f6a:	f9bb 004e 	ldrsh.w	r0, [fp, #78]	; 0x4e
   10f6e:	f7ef fe6f 	bl	c50 <__aeabi_i2f>
   10f72:	4629      	mov	r1, r5
   10f74:	f7f0 f87c 	bl	1070 <__aeabi_fcmpgt>
   10f78:	2800      	cmp	r0, #0
   10f7a:	f47f aebb 	bne.w	10cf4 <MLX90641_CalculateTo+0x2e4>
        else if(To < params->ct[2])   
   10f7e:	f9bb 0050 	ldrsh.w	r0, [fp, #80]	; 0x50
   10f82:	f7ef fe65 	bl	c50 <__aeabi_i2f>
   10f86:	4629      	mov	r1, r5
   10f88:	f7f0 f872 	bl	1070 <__aeabi_fcmpgt>
   10f8c:	bb48      	cbnz	r0, 10fe2 <MLX90641_CalculateTo+0x5d2>
        else if(To < params->ct[3])
   10f8e:	f9bb 0052 	ldrsh.w	r0, [fp, #82]	; 0x52
   10f92:	f7ef fe5d 	bl	c50 <__aeabi_i2f>
   10f96:	4629      	mov	r1, r5
   10f98:	f7f0 f86a 	bl	1070 <__aeabi_fcmpgt>
   10f9c:	bb18      	cbnz	r0, 10fe6 <MLX90641_CalculateTo+0x5d6>
        else if(To < params->ct[4])
   10f9e:	f9bb 0054 	ldrsh.w	r0, [fp, #84]	; 0x54
   10fa2:	f7ef fe55 	bl	c50 <__aeabi_i2f>
   10fa6:	4629      	mov	r1, r5
   10fa8:	f7f0 f862 	bl	1070 <__aeabi_fcmpgt>
   10fac:	b9e8      	cbnz	r0, 10fea <MLX90641_CalculateTo+0x5da>
        else if(To < params->ct[5])
   10fae:	f9bb 0056 	ldrsh.w	r0, [fp, #86]	; 0x56
   10fb2:	f7ef fe4d 	bl	c50 <__aeabi_i2f>
   10fb6:	4629      	mov	r1, r5
   10fb8:	f7f0 f85a 	bl	1070 <__aeabi_fcmpgt>
   10fbc:	b9b8      	cbnz	r0, 10fee <MLX90641_CalculateTo+0x5de>
        else if(To < params->ct[6])
   10fbe:	f9bb 0058 	ldrsh.w	r0, [fp, #88]	; 0x58
   10fc2:	f7ef fe45 	bl	c50 <__aeabi_i2f>
   10fc6:	4629      	mov	r1, r5
   10fc8:	f7f0 f852 	bl	1070 <__aeabi_fcmpgt>
   10fcc:	b988      	cbnz	r0, 10ff2 <MLX90641_CalculateTo+0x5e2>
        else if(To < params->ct[7])
   10fce:	f9bb 005a 	ldrsh.w	r0, [fp, #90]	; 0x5a
   10fd2:	f7ef fe3d 	bl	c50 <__aeabi_i2f>
   10fd6:	4629      	mov	r1, r5
   10fd8:	f7f0 f84a 	bl	1070 <__aeabi_fcmpgt>
   10fdc:	b158      	cbz	r0, 10ff6 <MLX90641_CalculateTo+0x5e6>
            range = 6;            
   10fde:	2406      	movs	r4, #6
   10fe0:	e689      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
            range = 1;            
   10fe2:	2401      	movs	r4, #1
   10fe4:	e687      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
            range = 2;            
   10fe6:	2402      	movs	r4, #2
   10fe8:	e685      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
            range = 3;            
   10fea:	2403      	movs	r4, #3
   10fec:	e683      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
            range = 4;            
   10fee:	2404      	movs	r4, #4
   10ff0:	e681      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
            range = 5;            
   10ff2:	2405      	movs	r4, #5
   10ff4:	e67f      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
            range = 7;            
   10ff6:	2407      	movs	r4, #7
   10ff8:	e67d      	b.n	10cf6 <MLX90641_CalculateTo+0x2e6>
}
   10ffa:	b017      	add	sp, #92	; 0x5c
   10ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11000:	66666666 	.word	0x66666666
   11004:	40711266 	.word	0x40711266
   11008:	a0b5ed8d 	.word	0xa0b5ed8d
   1100c:	3eb0c6f7 	.word	0x3eb0c6f7
   11010:	3ff00000 	.word	0x3ff00000
   11014:	00000000 	.word	0x00000000

00011018 <ExtractAlphaParameters>:
}

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90641 *mlx90641)
{
   11018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1101c:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
   11020:	4681      	mov	r9, r0
   11022:	460f      	mov	r7, r1
    uint8_t alphaScale;
    float alphaTemp[192];
    float temp;
    int p = 0;

    scaleRowAlpha[0] = (eeData[25] >> 5) + 20;
   11024:	8e43      	ldrh	r3, [r0, #50]	; 0x32
   11026:	095a      	lsrs	r2, r3, #5
   11028:	3214      	adds	r2, #20
   1102a:	f8ad 2304 	strh.w	r2, [sp, #772]	; 0x304
    scaleRowAlpha[1] = (eeData[25] & 0x001F) + 20;
   1102e:	f003 031f 	and.w	r3, r3, #31
   11032:	3314      	adds	r3, #20
   11034:	f8ad 3306 	strh.w	r3, [sp, #774]	; 0x306
    scaleRowAlpha[2] = (eeData[26] >> 5) + 20;
   11038:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1103a:	095a      	lsrs	r2, r3, #5
   1103c:	3214      	adds	r2, #20
   1103e:	f8ad 2308 	strh.w	r2, [sp, #776]	; 0x308
    scaleRowAlpha[3] = (eeData[26] & 0x001F) + 20;
   11042:	f003 031f 	and.w	r3, r3, #31
   11046:	3314      	adds	r3, #20
   11048:	f8ad 330a 	strh.w	r3, [sp, #778]	; 0x30a
    scaleRowAlpha[4] = (eeData[27] >> 5) + 20;
   1104c:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
   1104e:	095a      	lsrs	r2, r3, #5
   11050:	3214      	adds	r2, #20
   11052:	f8ad 230c 	strh.w	r2, [sp, #780]	; 0x30c
    scaleRowAlpha[5] = (eeData[27] & 0x001F) + 20;
   11056:	f003 031f 	and.w	r3, r3, #31
   1105a:	3314      	adds	r3, #20
   1105c:	f8ad 330e 	strh.w	r3, [sp, #782]	; 0x30e

    
    for(int i = 0; i < 6; i++)
   11060:	2400      	movs	r4, #0
   11062:	e025      	b.n	110b0 <ExtractAlphaParameters+0x98>
    {
        rowMaxAlphaNorm[i] = eeData[28 + i] / pow(2,(double)scaleRowAlpha[i]);
   11064:	f104 031c 	add.w	r3, r4, #28
   11068:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
   1106c:	abca      	add	r3, sp, #808	; 0x328
   1106e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
   11072:	f833 0c24 	ldrh.w	r0, [r3, #-36]
   11076:	f7ef f985 	bl	384 <__aeabi_ui2d>
   1107a:	4602      	mov	r2, r0
   1107c:	460b      	mov	r3, r1
   1107e:	2000      	movs	r0, #0
   11080:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   11084:	f011 fb08 	bl	22698 <pow>
   11088:	4682      	mov	sl, r0
   1108a:	468b      	mov	fp, r1
   1108c:	4628      	mov	r0, r5
   1108e:	f7ef f989 	bl	3a4 <__aeabi_i2d>
   11092:	4652      	mov	r2, sl
   11094:	465b      	mov	r3, fp
   11096:	f7ef fb19 	bl	6cc <__aeabi_ddiv>
   1109a:	f7ef fccf 	bl	a3c <__aeabi_d2f>
        rowMaxAlphaNorm[i] = rowMaxAlphaNorm[i] / 2047.0f;
   1109e:	494c      	ldr	r1, [pc, #304]	; (111d0 <ExtractAlphaParameters+0x1b8>)
   110a0:	f7ef fede 	bl	e60 <__aeabi_fdiv>
   110a4:	abca      	add	r3, sp, #808	; 0x328
   110a6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   110aa:	f843 0c18 	str.w	r0, [r3, #-24]
    for(int i = 0; i < 6; i++)
   110ae:	3401      	adds	r4, #1
   110b0:	2c05      	cmp	r4, #5
   110b2:	ddd7      	ble.n	11064 <ExtractAlphaParameters+0x4c>
    }

    for(int i = 0; i < 6; i++)
   110b4:	f04f 0800 	mov.w	r8, #0
   110b8:	e001      	b.n	110be <ExtractAlphaParameters+0xa6>
   110ba:	f108 0801 	add.w	r8, r8, #1
   110be:	f1b8 0f05 	cmp.w	r8, #5
   110c2:	dc2c      	bgt.n	1111e <ExtractAlphaParameters+0x106>
    {
        for(int j = 0; j < 32; j ++)
   110c4:	2400      	movs	r4, #0
   110c6:	2c1f      	cmp	r4, #31
   110c8:	dcf7      	bgt.n	110ba <ExtractAlphaParameters+0xa2>
        {
            p = 32 * i +j;
   110ca:	eb04 1648 	add.w	r6, r4, r8, lsl #5
            alphaTemp[p] = eeData[256 + p] * rowMaxAlphaNorm[i]; 
   110ce:	f506 7380 	add.w	r3, r6, #256	; 0x100
   110d2:	aaca      	add	r2, sp, #808	; 0x328
   110d4:	eb02 0288 	add.w	r2, r2, r8, lsl #2
   110d8:	f852 5c18 	ldr.w	r5, [r2, #-24]
   110dc:	f839 0013 	ldrh.w	r0, [r9, r3, lsl #1]
   110e0:	f7ef fdb6 	bl	c50 <__aeabi_i2f>
   110e4:	4629      	mov	r1, r5
   110e6:	f7ef fe07 	bl	cf8 <__aeabi_fmul>
   110ea:	4605      	mov	r5, r0
            alphaTemp[p] = alphaTemp[p] - mlx90641->tgc * mlx90641->cpAlpha;
   110ec:	f8d7 1660 	ldr.w	r1, [r7, #1632]	; 0x660
   110f0:	69b8      	ldr	r0, [r7, #24]
   110f2:	f7ef fe01 	bl	cf8 <__aeabi_fmul>
   110f6:	4601      	mov	r1, r0
   110f8:	4628      	mov	r0, r5
   110fa:	f7ef fcf3 	bl	ae4 <__aeabi_fsub>
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
   110fe:	f7ef f963 	bl	3c8 <__aeabi_f2d>
   11102:	4602      	mov	r2, r0
   11104:	460b      	mov	r3, r1
   11106:	a130      	add	r1, pc, #192	; (adr r1, 111c8 <ExtractAlphaParameters+0x1b0>)
   11108:	e9d1 0100 	ldrd	r0, r1, [r1]
   1110c:	f7ef fade 	bl	6cc <__aeabi_ddiv>
   11110:	f7ef fc94 	bl	a3c <__aeabi_d2f>
   11114:	ab01      	add	r3, sp, #4
   11116:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
        for(int j = 0; j < 32; j ++)
   1111a:	3401      	adds	r4, #1
   1111c:	e7d3      	b.n	110c6 <ExtractAlphaParameters+0xae>
        }
    }
    
    temp = alphaTemp[0];
   1111e:	9e01      	ldr	r6, [sp, #4]
    for(int i = 1; i < 192; i++)
   11120:	2401      	movs	r4, #1
   11122:	e000      	b.n	11126 <ExtractAlphaParameters+0x10e>
   11124:	3401      	adds	r4, #1
   11126:	2cbf      	cmp	r4, #191	; 0xbf
   11128:	dc0a      	bgt.n	11140 <ExtractAlphaParameters+0x128>
    {
        if (alphaTemp[i] > temp)
   1112a:	ab01      	add	r3, sp, #4
   1112c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   11130:	4631      	mov	r1, r6
   11132:	4628      	mov	r0, r5
   11134:	f7ef ff9c 	bl	1070 <__aeabi_fcmpgt>
   11138:	2800      	cmp	r0, #0
   1113a:	d0f3      	beq.n	11124 <ExtractAlphaParameters+0x10c>
        {
            temp = alphaTemp[i];
   1113c:	462e      	mov	r6, r5
   1113e:	e7f1      	b.n	11124 <ExtractAlphaParameters+0x10c>
        }
    }
    
    alphaScale = 0;
   11140:	f04f 0a00 	mov.w	sl, #0
   11144:	e008      	b.n	11158 <ExtractAlphaParameters+0x140>
    while(temp < 32768)
    {
        temp = temp*2;
   11146:	4631      	mov	r1, r6
   11148:	4630      	mov	r0, r6
   1114a:	f7ef fccd 	bl	ae8 <__addsf3>
   1114e:	4606      	mov	r6, r0
        alphaScale = alphaScale + 1;
   11150:	f10a 0a01 	add.w	sl, sl, #1
   11154:	fa5f fa8a 	uxtb.w	sl, sl
    while(temp < 32768)
   11158:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
   1115c:	4630      	mov	r0, r6
   1115e:	f7ef ff69 	bl	1034 <__aeabi_fcmplt>
   11162:	2800      	cmp	r0, #0
   11164:	d1ef      	bne.n	11146 <ExtractAlphaParameters+0x12e>
    } 
    
    for(int i = 0; i < 192; i++)
   11166:	2400      	movs	r4, #0
   11168:	2cbf      	cmp	r4, #191	; 0xbf
   1116a:	dc27      	bgt.n	111bc <ExtractAlphaParameters+0x1a4>
    {
        temp = alphaTemp[i] * pow(2,(double)alphaScale);        
   1116c:	ab01      	add	r3, sp, #4
   1116e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   11172:	f7ef f929 	bl	3c8 <__aeabi_f2d>
   11176:	4680      	mov	r8, r0
   11178:	4689      	mov	r9, r1
   1117a:	4650      	mov	r0, sl
   1117c:	f7ef f902 	bl	384 <__aeabi_ui2d>
   11180:	4602      	mov	r2, r0
   11182:	460b      	mov	r3, r1
   11184:	2000      	movs	r0, #0
   11186:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1118a:	f011 fa85 	bl	22698 <pow>
   1118e:	4602      	mov	r2, r0
   11190:	460b      	mov	r3, r1
   11192:	4640      	mov	r0, r8
   11194:	4649      	mov	r1, r9
   11196:	f7ef f96f 	bl	478 <__aeabi_dmul>
   1119a:	f7ef fc4f 	bl	a3c <__aeabi_d2f>
        mlx90641->alpha[i] = (temp + 0.5);        
   1119e:	f7ef f913 	bl	3c8 <__aeabi_f2d>
   111a2:	2200      	movs	r2, #0
   111a4:	4b0b      	ldr	r3, [pc, #44]	; (111d4 <ExtractAlphaParameters+0x1bc>)
   111a6:	f7ee ffb1 	bl	10c <__adddf3>
   111aa:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   111ae:	eb07 0545 	add.w	r5, r7, r5, lsl #1
   111b2:	f7ef fc23 	bl	9fc <__aeabi_d2uiz>
   111b6:	80a8      	strh	r0, [r5, #4]
    for(int i = 0; i < 192; i++)
   111b8:	3401      	adds	r4, #1
   111ba:	e7d5      	b.n	11168 <ExtractAlphaParameters+0x150>
        
    } 
    
    mlx90641->alphaScale = alphaScale;      
   111bc:	f887 a1dc 	strb.w	sl, [r7, #476]	; 0x1dc
}
   111c0:	f50d 7d4b 	add.w	sp, sp, #812	; 0x32c
   111c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111c8:	a0b5ed8d 	.word	0xa0b5ed8d
   111cc:	3eb0c6f7 	.word	0x3eb0c6f7
   111d0:	44ffe000 	.word	0x44ffe000
   111d4:	3fe00000 	.word	0x3fe00000

000111d8 <__ieee754_pow>:
   111d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111dc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
   111e0:	4690      	mov	r8, r2
   111e2:	4699      	mov	r9, r3
   111e4:	461e      	mov	r6, r3
   111e6:	4613      	mov	r3, r2
   111e8:	ea55 0208 	orrs.w	r2, r5, r8
   111ec:	b093      	sub	sp, #76	; 0x4c
   111ee:	d035      	beq.n	1125c <__ieee754_pow+0x84>
   111f0:	4a6b      	ldr	r2, [pc, #428]	; (113a0 <__ieee754_pow+0x1c8>)
   111f2:	9000      	str	r0, [sp, #0]
   111f4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   111f8:	4294      	cmp	r4, r2
   111fa:	4683      	mov	fp, r0
   111fc:	468a      	mov	sl, r1
   111fe:	460f      	mov	r7, r1
   11200:	dc25      	bgt.n	1124e <__ieee754_pow+0x76>
   11202:	d034      	beq.n	1126e <__ieee754_pow+0x96>
   11204:	4295      	cmp	r5, r2
   11206:	dc22      	bgt.n	1124e <__ieee754_pow+0x76>
   11208:	4a65      	ldr	r2, [pc, #404]	; (113a0 <__ieee754_pow+0x1c8>)
   1120a:	4295      	cmp	r5, r2
   1120c:	d01d      	beq.n	1124a <__ieee754_pow+0x72>
   1120e:	2f00      	cmp	r7, #0
   11210:	db36      	blt.n	11280 <__ieee754_pow+0xa8>
   11212:	2200      	movs	r2, #0
   11214:	9202      	str	r2, [sp, #8]
   11216:	2b00      	cmp	r3, #0
   11218:	d14c      	bne.n	112b4 <__ieee754_pow+0xdc>
   1121a:	4b61      	ldr	r3, [pc, #388]	; (113a0 <__ieee754_pow+0x1c8>)
   1121c:	429d      	cmp	r5, r3
   1121e:	f000 8097 	beq.w	11350 <__ieee754_pow+0x178>
   11222:	4b60      	ldr	r3, [pc, #384]	; (113a4 <__ieee754_pow+0x1cc>)
   11224:	429d      	cmp	r5, r3
   11226:	f000 80a5 	beq.w	11374 <__ieee754_pow+0x19c>
   1122a:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
   1122e:	f000 84b9 	beq.w	11ba4 <__ieee754_pow+0x9cc>
   11232:	4b5d      	ldr	r3, [pc, #372]	; (113a8 <__ieee754_pow+0x1d0>)
   11234:	429e      	cmp	r6, r3
   11236:	d13d      	bne.n	112b4 <__ieee754_pow+0xdc>
   11238:	2f00      	cmp	r7, #0
   1123a:	db3b      	blt.n	112b4 <__ieee754_pow+0xdc>
   1123c:	4658      	mov	r0, fp
   1123e:	4651      	mov	r1, sl
   11240:	b013      	add	sp, #76	; 0x4c
   11242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11246:	f011 bc23 	b.w	22a90 <__ieee754_sqrt>
   1124a:	2b00      	cmp	r3, #0
   1124c:	d0df      	beq.n	1120e <__ieee754_pow+0x36>
   1124e:	9b00      	ldr	r3, [sp, #0]
   11250:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   11254:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   11258:	4323      	orrs	r3, r4
   1125a:	d10b      	bne.n	11274 <__ieee754_pow+0x9c>
   1125c:	4c51      	ldr	r4, [pc, #324]	; (113a4 <__ieee754_pow+0x1cc>)
   1125e:	2300      	movs	r3, #0
   11260:	e9cd 3400 	strd	r3, r4, [sp]
   11264:	e9dd 0100 	ldrd	r0, r1, [sp]
   11268:	b013      	add	sp, #76	; 0x4c
   1126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1126e:	b908      	cbnz	r0, 11274 <__ieee754_pow+0x9c>
   11270:	42a5      	cmp	r5, r4
   11272:	ddc9      	ble.n	11208 <__ieee754_pow+0x30>
   11274:	484d      	ldr	r0, [pc, #308]	; (113ac <__ieee754_pow+0x1d4>)
   11276:	b013      	add	sp, #76	; 0x4c
   11278:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1127c:	f011 bcd4 	b.w	22c28 <nan>
   11280:	4a4b      	ldr	r2, [pc, #300]	; (113b0 <__ieee754_pow+0x1d8>)
   11282:	4295      	cmp	r5, r2
   11284:	dc7e      	bgt.n	11384 <__ieee754_pow+0x1ac>
   11286:	f1a2 7254 	sub.w	r2, r2, #55574528	; 0x3500000
   1128a:	4295      	cmp	r5, r2
   1128c:	dd0e      	ble.n	112ac <__ieee754_pow+0xd4>
   1128e:	152a      	asrs	r2, r5, #20
   11290:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   11294:	2a14      	cmp	r2, #20
   11296:	f340 848f 	ble.w	11bb8 <__ieee754_pow+0x9e0>
   1129a:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
   1129e:	fa23 f102 	lsr.w	r1, r3, r2
   112a2:	fa01 f202 	lsl.w	r2, r1, r2
   112a6:	429a      	cmp	r2, r3
   112a8:	f000 84dc 	beq.w	11c64 <__ieee754_pow+0xa8c>
   112ac:	2200      	movs	r2, #0
   112ae:	9202      	str	r2, [sp, #8]
   112b0:	2b00      	cmp	r3, #0
   112b2:	d0b6      	beq.n	11222 <__ieee754_pow+0x4a>
   112b4:	4658      	mov	r0, fp
   112b6:	4651      	mov	r1, sl
   112b8:	f011 f9a0 	bl	225fc <fabs>
   112bc:	465b      	mov	r3, fp
   112be:	e9cd 0100 	strd	r0, r1, [sp]
   112c2:	bb33      	cbnz	r3, 11312 <__ieee754_pow+0x13a>
   112c4:	b124      	cbz	r4, 112d0 <__ieee754_pow+0xf8>
   112c6:	4b37      	ldr	r3, [pc, #220]	; (113a4 <__ieee754_pow+0x1cc>)
   112c8:	f027 4240 	bic.w	r2, r7, #3221225472	; 0xc0000000
   112cc:	429a      	cmp	r2, r3
   112ce:	d120      	bne.n	11312 <__ieee754_pow+0x13a>
   112d0:	2e00      	cmp	r6, #0
   112d2:	da07      	bge.n	112e4 <__ieee754_pow+0x10c>
   112d4:	e9dd 2300 	ldrd	r2, r3, [sp]
   112d8:	4932      	ldr	r1, [pc, #200]	; (113a4 <__ieee754_pow+0x1cc>)
   112da:	2000      	movs	r0, #0
   112dc:	f7ef f9f6 	bl	6cc <__aeabi_ddiv>
   112e0:	e9cd 0100 	strd	r0, r1, [sp]
   112e4:	2f00      	cmp	r7, #0
   112e6:	dabd      	bge.n	11264 <__ieee754_pow+0x8c>
   112e8:	9b02      	ldr	r3, [sp, #8]
   112ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
   112ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
   112f2:	4323      	orrs	r3, r4
   112f4:	f040 8485 	bne.w	11c02 <__ieee754_pow+0xa2a>
   112f8:	e9dd 2300 	ldrd	r2, r3, [sp]
   112fc:	4610      	mov	r0, r2
   112fe:	4619      	mov	r1, r3
   11300:	f7ee ff02 	bl	108 <__aeabi_dsub>
   11304:	4602      	mov	r2, r0
   11306:	460b      	mov	r3, r1
   11308:	f7ef f9e0 	bl	6cc <__aeabi_ddiv>
   1130c:	e9cd 0100 	strd	r0, r1, [sp]
   11310:	e7a8      	b.n	11264 <__ieee754_pow+0x8c>
   11312:	9a02      	ldr	r2, [sp, #8]
   11314:	0ffb      	lsrs	r3, r7, #31
   11316:	3b01      	subs	r3, #1
   11318:	930a      	str	r3, [sp, #40]	; 0x28
   1131a:	4313      	orrs	r3, r2
   1131c:	d035      	beq.n	1138a <__ieee754_pow+0x1b2>
   1131e:	4b25      	ldr	r3, [pc, #148]	; (113b4 <__ieee754_pow+0x1dc>)
   11320:	429d      	cmp	r5, r3
   11322:	dd4b      	ble.n	113bc <__ieee754_pow+0x1e4>
   11324:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   11328:	429d      	cmp	r5, r3
   1132a:	4b23      	ldr	r3, [pc, #140]	; (113b8 <__ieee754_pow+0x1e0>)
   1132c:	f340 83c8 	ble.w	11ac0 <__ieee754_pow+0x8e8>
   11330:	429c      	cmp	r4, r3
   11332:	f340 8354 	ble.w	119de <__ieee754_pow+0x806>
   11336:	2e00      	cmp	r6, #0
   11338:	f340 8354 	ble.w	119e4 <__ieee754_pow+0x80c>
   1133c:	a316      	add	r3, pc, #88	; (adr r3, 11398 <__ieee754_pow+0x1c0>)
   1133e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11342:	4610      	mov	r0, r2
   11344:	4619      	mov	r1, r3
   11346:	f7ef f897 	bl	478 <__aeabi_dmul>
   1134a:	e9cd 0100 	strd	r0, r1, [sp]
   1134e:	e789      	b.n	11264 <__ieee754_pow+0x8c>
   11350:	9a00      	ldr	r2, [sp, #0]
   11352:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   11356:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   1135a:	4313      	orrs	r3, r2
   1135c:	f43f af7e 	beq.w	1125c <__ieee754_pow+0x84>
   11360:	4b15      	ldr	r3, [pc, #84]	; (113b8 <__ieee754_pow+0x1e0>)
   11362:	429c      	cmp	r4, r3
   11364:	f340 8368 	ble.w	11a38 <__ieee754_pow+0x860>
   11368:	2e00      	cmp	r6, #0
   1136a:	f2c0 833b 	blt.w	119e4 <__ieee754_pow+0x80c>
   1136e:	e9cd 8900 	strd	r8, r9, [sp]
   11372:	e777      	b.n	11264 <__ieee754_pow+0x8c>
   11374:	2e00      	cmp	r6, #0
   11376:	f2c0 840b 	blt.w	11b90 <__ieee754_pow+0x9b8>
   1137a:	4658      	mov	r0, fp
   1137c:	4651      	mov	r1, sl
   1137e:	e9cd 0100 	strd	r0, r1, [sp]
   11382:	e76f      	b.n	11264 <__ieee754_pow+0x8c>
   11384:	2202      	movs	r2, #2
   11386:	9202      	str	r2, [sp, #8]
   11388:	e745      	b.n	11216 <__ieee754_pow+0x3e>
   1138a:	465a      	mov	r2, fp
   1138c:	4658      	mov	r0, fp
   1138e:	4653      	mov	r3, sl
   11390:	4651      	mov	r1, sl
   11392:	e7b5      	b.n	11300 <__ieee754_pow+0x128>
   11394:	f3af 8000 	nop.w
   11398:	8800759c 	.word	0x8800759c
   1139c:	7e37e43c 	.word	0x7e37e43c
   113a0:	7ff00000 	.word	0x7ff00000
   113a4:	3ff00000 	.word	0x3ff00000
   113a8:	3fe00000 	.word	0x3fe00000
   113ac:	0002995c 	.word	0x0002995c
   113b0:	433fffff 	.word	0x433fffff
   113b4:	41e00000 	.word	0x41e00000
   113b8:	3fefffff 	.word	0x3fefffff
   113bc:	4bd4      	ldr	r3, [pc, #848]	; (11710 <__ieee754_pow+0x538>)
   113be:	403b      	ands	r3, r7
   113c0:	2b00      	cmp	r3, #0
   113c2:	f040 8346 	bne.w	11a52 <__ieee754_pow+0x87a>
   113c6:	e9dd 0100 	ldrd	r0, r1, [sp]
   113ca:	4bd2      	ldr	r3, [pc, #840]	; (11714 <__ieee754_pow+0x53c>)
   113cc:	2200      	movs	r2, #0
   113ce:	f7ef f853 	bl	478 <__aeabi_dmul>
   113d2:	e9cd 0100 	strd	r0, r1, [sp]
   113d6:	460c      	mov	r4, r1
   113d8:	f06f 0634 	mvn.w	r6, #52	; 0x34
   113dc:	1523      	asrs	r3, r4, #20
   113de:	4dce      	ldr	r5, [pc, #824]	; (11718 <__ieee754_pow+0x540>)
   113e0:	f3c4 0213 	ubfx	r2, r4, #0, #20
   113e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   113e8:	f042 547f 	orr.w	r4, r2, #1069547520	; 0x3fc00000
   113ec:	1999      	adds	r1, r3, r6
   113ee:	42aa      	cmp	r2, r5
   113f0:	910b      	str	r1, [sp, #44]	; 0x2c
   113f2:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   113f6:	f340 8327 	ble.w	11a48 <__ieee754_pow+0x870>
   113fa:	4bc8      	ldr	r3, [pc, #800]	; (1171c <__ieee754_pow+0x544>)
   113fc:	429a      	cmp	r2, r3
   113fe:	f340 840d 	ble.w	11c1c <__ieee754_pow+0xa44>
   11402:	2200      	movs	r2, #0
   11404:	2300      	movs	r3, #0
   11406:	e9cd 2308 	strd	r2, r3, [sp, #32]
   1140a:	3101      	adds	r1, #1
   1140c:	910b      	str	r1, [sp, #44]	; 0x2c
   1140e:	f5a4 1480 	sub.w	r4, r4, #1048576	; 0x100000
   11412:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11416:	4bc2      	ldr	r3, [pc, #776]	; (11720 <__ieee754_pow+0x548>)
   11418:	2200      	movs	r2, #0
   1141a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1141e:	2500      	movs	r5, #0
   11420:	e9dd 0100 	ldrd	r0, r1, [sp]
   11424:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11428:	4621      	mov	r1, r4
   1142a:	4682      	mov	sl, r0
   1142c:	f7ee fe6c 	bl	108 <__aeabi_dsub>
   11430:	46a3      	mov	fp, r4
   11432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11436:	4606      	mov	r6, r0
   11438:	460f      	mov	r7, r1
   1143a:	4650      	mov	r0, sl
   1143c:	4621      	mov	r1, r4
   1143e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
   11442:	f7ee fe63 	bl	10c <__adddf3>
   11446:	4602      	mov	r2, r0
   11448:	460b      	mov	r3, r1
   1144a:	2000      	movs	r0, #0
   1144c:	49b4      	ldr	r1, [pc, #720]	; (11720 <__ieee754_pow+0x548>)
   1144e:	f7ef f93d 	bl	6cc <__aeabi_ddiv>
   11452:	460a      	mov	r2, r1
   11454:	4601      	mov	r1, r0
   11456:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
   1145a:	4613      	mov	r3, r2
   1145c:	4639      	mov	r1, r7
   1145e:	4602      	mov	r2, r0
   11460:	4630      	mov	r0, r6
   11462:	f7ef f809 	bl	478 <__aeabi_dmul>
   11466:	1064      	asrs	r4, r4, #1
   11468:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   1146c:	4682      	mov	sl, r0
   1146e:	468b      	mov	fp, r1
   11470:	f504 2300 	add.w	r3, r4, #524288	; 0x80000
   11474:	468c      	mov	ip, r1
   11476:	e9cd ab04 	strd	sl, fp, [sp, #16]
   1147a:	1959      	adds	r1, r3, r5
   1147c:	46d3      	mov	fp, sl
   1147e:	2300      	movs	r3, #0
   11480:	e9cd bc00 	strd	fp, ip, [sp]
   11484:	9300      	str	r3, [sp, #0]
   11486:	e9dd ab00 	ldrd	sl, fp, [sp]
   1148a:	2000      	movs	r0, #0
   1148c:	4604      	mov	r4, r0
   1148e:	460d      	mov	r5, r1
   11490:	4602      	mov	r2, r0
   11492:	460b      	mov	r3, r1
   11494:	4650      	mov	r0, sl
   11496:	4659      	mov	r1, fp
   11498:	f7ee ffee 	bl	478 <__aeabi_dmul>
   1149c:	4602      	mov	r2, r0
   1149e:	460b      	mov	r3, r1
   114a0:	4630      	mov	r0, r6
   114a2:	4639      	mov	r1, r7
   114a4:	f7ee fe30 	bl	108 <__aeabi_dsub>
   114a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   114ac:	4606      	mov	r6, r0
   114ae:	460f      	mov	r7, r1
   114b0:	4620      	mov	r0, r4
   114b2:	4629      	mov	r1, r5
   114b4:	f7ee fe28 	bl	108 <__aeabi_dsub>
   114b8:	4602      	mov	r2, r0
   114ba:	460b      	mov	r3, r1
   114bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   114c0:	f7ee fe22 	bl	108 <__aeabi_dsub>
   114c4:	4652      	mov	r2, sl
   114c6:	465b      	mov	r3, fp
   114c8:	f7ee ffd6 	bl	478 <__aeabi_dmul>
   114cc:	4602      	mov	r2, r0
   114ce:	460b      	mov	r3, r1
   114d0:	4630      	mov	r0, r6
   114d2:	4639      	mov	r1, r7
   114d4:	f7ee fe18 	bl	108 <__aeabi_dsub>
   114d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   114dc:	f7ee ffcc 	bl	478 <__aeabi_dmul>
   114e0:	4604      	mov	r4, r0
   114e2:	460d      	mov	r5, r1
   114e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   114e8:	4602      	mov	r2, r0
   114ea:	460b      	mov	r3, r1
   114ec:	e9cd 4506 	strd	r4, r5, [sp, #24]
   114f0:	f7ee ffc2 	bl	478 <__aeabi_dmul>
   114f4:	a374      	add	r3, pc, #464	; (adr r3, 116c8 <__ieee754_pow+0x4f0>)
   114f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   114fa:	4604      	mov	r4, r0
   114fc:	460d      	mov	r5, r1
   114fe:	f7ee ffbb 	bl	478 <__aeabi_dmul>
   11502:	a373      	add	r3, pc, #460	; (adr r3, 116d0 <__ieee754_pow+0x4f8>)
   11504:	e9d3 2300 	ldrd	r2, r3, [r3]
   11508:	f7ee fe00 	bl	10c <__adddf3>
   1150c:	4622      	mov	r2, r4
   1150e:	462b      	mov	r3, r5
   11510:	f7ee ffb2 	bl	478 <__aeabi_dmul>
   11514:	a370      	add	r3, pc, #448	; (adr r3, 116d8 <__ieee754_pow+0x500>)
   11516:	e9d3 2300 	ldrd	r2, r3, [r3]
   1151a:	f7ee fdf7 	bl	10c <__adddf3>
   1151e:	4622      	mov	r2, r4
   11520:	462b      	mov	r3, r5
   11522:	f7ee ffa9 	bl	478 <__aeabi_dmul>
   11526:	a36e      	add	r3, pc, #440	; (adr r3, 116e0 <__ieee754_pow+0x508>)
   11528:	e9d3 2300 	ldrd	r2, r3, [r3]
   1152c:	f7ee fdee 	bl	10c <__adddf3>
   11530:	4622      	mov	r2, r4
   11532:	462b      	mov	r3, r5
   11534:	f7ee ffa0 	bl	478 <__aeabi_dmul>
   11538:	a36b      	add	r3, pc, #428	; (adr r3, 116e8 <__ieee754_pow+0x510>)
   1153a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1153e:	f7ee fde5 	bl	10c <__adddf3>
   11542:	4622      	mov	r2, r4
   11544:	462b      	mov	r3, r5
   11546:	f7ee ff97 	bl	478 <__aeabi_dmul>
   1154a:	a369      	add	r3, pc, #420	; (adr r3, 116f0 <__ieee754_pow+0x518>)
   1154c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11550:	f7ee fddc 	bl	10c <__adddf3>
   11554:	4622      	mov	r2, r4
   11556:	4606      	mov	r6, r0
   11558:	460f      	mov	r7, r1
   1155a:	462b      	mov	r3, r5
   1155c:	4620      	mov	r0, r4
   1155e:	4629      	mov	r1, r5
   11560:	f7ee ff8a 	bl	478 <__aeabi_dmul>
   11564:	4602      	mov	r2, r0
   11566:	460b      	mov	r3, r1
   11568:	4630      	mov	r0, r6
   1156a:	4639      	mov	r1, r7
   1156c:	f7ee ff84 	bl	478 <__aeabi_dmul>
   11570:	4652      	mov	r2, sl
   11572:	4604      	mov	r4, r0
   11574:	460d      	mov	r5, r1
   11576:	465b      	mov	r3, fp
   11578:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   1157c:	f7ee fdc6 	bl	10c <__adddf3>
   11580:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11584:	f7ee ff78 	bl	478 <__aeabi_dmul>
   11588:	4622      	mov	r2, r4
   1158a:	462b      	mov	r3, r5
   1158c:	f7ee fdbe 	bl	10c <__adddf3>
   11590:	4652      	mov	r2, sl
   11592:	4604      	mov	r4, r0
   11594:	460d      	mov	r5, r1
   11596:	465b      	mov	r3, fp
   11598:	4650      	mov	r0, sl
   1159a:	4659      	mov	r1, fp
   1159c:	f7ee ff6c 	bl	478 <__aeabi_dmul>
   115a0:	4626      	mov	r6, r4
   115a2:	462f      	mov	r7, r5
   115a4:	4604      	mov	r4, r0
   115a6:	460d      	mov	r5, r1
   115a8:	4b5e      	ldr	r3, [pc, #376]	; (11724 <__ieee754_pow+0x54c>)
   115aa:	2200      	movs	r2, #0
   115ac:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
   115b0:	f7ee fdac 	bl	10c <__adddf3>
   115b4:	4632      	mov	r2, r6
   115b6:	463b      	mov	r3, r7
   115b8:	f7ee fda8 	bl	10c <__adddf3>
   115bc:	9c00      	ldr	r4, [sp, #0]
   115be:	460d      	mov	r5, r1
   115c0:	4622      	mov	r2, r4
   115c2:	462b      	mov	r3, r5
   115c4:	4650      	mov	r0, sl
   115c6:	4659      	mov	r1, fp
   115c8:	f7ee ff56 	bl	478 <__aeabi_dmul>
   115cc:	4b55      	ldr	r3, [pc, #340]	; (11724 <__ieee754_pow+0x54c>)
   115ce:	4682      	mov	sl, r0
   115d0:	468b      	mov	fp, r1
   115d2:	2200      	movs	r2, #0
   115d4:	4620      	mov	r0, r4
   115d6:	4629      	mov	r1, r5
   115d8:	f7ee fd96 	bl	108 <__aeabi_dsub>
   115dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
   115e0:	f7ee fd92 	bl	108 <__aeabi_dsub>
   115e4:	4602      	mov	r2, r0
   115e6:	460b      	mov	r3, r1
   115e8:	4630      	mov	r0, r6
   115ea:	4639      	mov	r1, r7
   115ec:	f7ee fd8c 	bl	108 <__aeabi_dsub>
   115f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   115f4:	f7ee ff40 	bl	478 <__aeabi_dmul>
   115f8:	4622      	mov	r2, r4
   115fa:	4606      	mov	r6, r0
   115fc:	460f      	mov	r7, r1
   115fe:	462b      	mov	r3, r5
   11600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11604:	f7ee ff38 	bl	478 <__aeabi_dmul>
   11608:	4602      	mov	r2, r0
   1160a:	460b      	mov	r3, r1
   1160c:	4630      	mov	r0, r6
   1160e:	4639      	mov	r1, r7
   11610:	f7ee fd7c 	bl	10c <__adddf3>
   11614:	4606      	mov	r6, r0
   11616:	460f      	mov	r7, r1
   11618:	4602      	mov	r2, r0
   1161a:	460b      	mov	r3, r1
   1161c:	4650      	mov	r0, sl
   1161e:	4659      	mov	r1, fp
   11620:	e9cd ab04 	strd	sl, fp, [sp, #16]
   11624:	f7ee fd72 	bl	10c <__adddf3>
   11628:	9c00      	ldr	r4, [sp, #0]
   1162a:	a333      	add	r3, pc, #204	; (adr r3, 116f8 <__ieee754_pow+0x520>)
   1162c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11630:	4620      	mov	r0, r4
   11632:	460d      	mov	r5, r1
   11634:	f7ee ff20 	bl	478 <__aeabi_dmul>
   11638:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1163c:	4682      	mov	sl, r0
   1163e:	468b      	mov	fp, r1
   11640:	4620      	mov	r0, r4
   11642:	4629      	mov	r1, r5
   11644:	f7ee fd60 	bl	108 <__aeabi_dsub>
   11648:	4602      	mov	r2, r0
   1164a:	460b      	mov	r3, r1
   1164c:	4630      	mov	r0, r6
   1164e:	4639      	mov	r1, r7
   11650:	f7ee fd5a 	bl	108 <__aeabi_dsub>
   11654:	a32a      	add	r3, pc, #168	; (adr r3, 11700 <__ieee754_pow+0x528>)
   11656:	e9d3 2300 	ldrd	r2, r3, [r3]
   1165a:	f7ee ff0d 	bl	478 <__aeabi_dmul>
   1165e:	a32a      	add	r3, pc, #168	; (adr r3, 11708 <__ieee754_pow+0x530>)
   11660:	e9d3 2300 	ldrd	r2, r3, [r3]
   11664:	4606      	mov	r6, r0
   11666:	460f      	mov	r7, r1
   11668:	4620      	mov	r0, r4
   1166a:	4629      	mov	r1, r5
   1166c:	f7ee ff04 	bl	478 <__aeabi_dmul>
   11670:	4602      	mov	r2, r0
   11672:	460b      	mov	r3, r1
   11674:	4630      	mov	r0, r6
   11676:	4639      	mov	r1, r7
   11678:	f7ee fd48 	bl	10c <__adddf3>
   1167c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11680:	f7ee fd44 	bl	10c <__adddf3>
   11684:	4604      	mov	r4, r0
   11686:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11688:	460d      	mov	r5, r1
   1168a:	f7ee fe8b 	bl	3a4 <__aeabi_i2d>
   1168e:	4622      	mov	r2, r4
   11690:	4606      	mov	r6, r0
   11692:	460f      	mov	r7, r1
   11694:	462b      	mov	r3, r5
   11696:	4650      	mov	r0, sl
   11698:	4659      	mov	r1, fp
   1169a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   1169e:	f7ee fd35 	bl	10c <__adddf3>
   116a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   116a6:	f7ee fd31 	bl	10c <__adddf3>
   116aa:	4632      	mov	r2, r6
   116ac:	463b      	mov	r3, r7
   116ae:	f7ee fd2d 	bl	10c <__adddf3>
   116b2:	9c00      	ldr	r4, [sp, #0]
   116b4:	4632      	mov	r2, r6
   116b6:	463b      	mov	r3, r7
   116b8:	4620      	mov	r0, r4
   116ba:	460d      	mov	r5, r1
   116bc:	f7ee fd24 	bl	108 <__aeabi_dsub>
   116c0:	e032      	b.n	11728 <__ieee754_pow+0x550>
   116c2:	bf00      	nop
   116c4:	f3af 8000 	nop.w
   116c8:	4a454eef 	.word	0x4a454eef
   116cc:	3fca7e28 	.word	0x3fca7e28
   116d0:	93c9db65 	.word	0x93c9db65
   116d4:	3fcd864a 	.word	0x3fcd864a
   116d8:	a91d4101 	.word	0xa91d4101
   116dc:	3fd17460 	.word	0x3fd17460
   116e0:	518f264d 	.word	0x518f264d
   116e4:	3fd55555 	.word	0x3fd55555
   116e8:	db6fabff 	.word	0xdb6fabff
   116ec:	3fdb6db6 	.word	0x3fdb6db6
   116f0:	33333303 	.word	0x33333303
   116f4:	3fe33333 	.word	0x3fe33333
   116f8:	e0000000 	.word	0xe0000000
   116fc:	3feec709 	.word	0x3feec709
   11700:	dc3a03fd 	.word	0xdc3a03fd
   11704:	3feec709 	.word	0x3feec709
   11708:	145b01f5 	.word	0x145b01f5
   1170c:	be3e2fe0 	.word	0xbe3e2fe0
   11710:	7ff00000 	.word	0x7ff00000
   11714:	43400000 	.word	0x43400000
   11718:	0003988e 	.word	0x0003988e
   1171c:	000bb679 	.word	0x000bb679
   11720:	3ff00000 	.word	0x3ff00000
   11724:	40080000 	.word	0x40080000
   11728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1172c:	f7ee fcec 	bl	108 <__aeabi_dsub>
   11730:	4652      	mov	r2, sl
   11732:	465b      	mov	r3, fp
   11734:	f7ee fce8 	bl	108 <__aeabi_dsub>
   11738:	4602      	mov	r2, r0
   1173a:	460b      	mov	r3, r1
   1173c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11740:	f7ee fce2 	bl	108 <__aeabi_dsub>
   11744:	4682      	mov	sl, r0
   11746:	468b      	mov	fp, r1
   11748:	9b02      	ldr	r3, [sp, #8]
   1174a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1174c:	3b01      	subs	r3, #1
   1174e:	4313      	orrs	r3, r2
   11750:	bf0c      	ite	eq
   11752:	4bd5      	ldreq	r3, [pc, #852]	; (11aa8 <__ieee754_pow+0x8d0>)
   11754:	4bd5      	ldrne	r3, [pc, #852]	; (11aac <__ieee754_pow+0x8d4>)
   11756:	2200      	movs	r2, #0
   11758:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1175c:	2300      	movs	r3, #0
   1175e:	e9cd 8900 	strd	r8, r9, [sp]
   11762:	9300      	str	r3, [sp, #0]
   11764:	e9dd 6700 	ldrd	r6, r7, [sp]
   11768:	4640      	mov	r0, r8
   1176a:	4632      	mov	r2, r6
   1176c:	463b      	mov	r3, r7
   1176e:	4649      	mov	r1, r9
   11770:	f7ee fcca 	bl	108 <__aeabi_dsub>
   11774:	4622      	mov	r2, r4
   11776:	462b      	mov	r3, r5
   11778:	f7ee fe7e 	bl	478 <__aeabi_dmul>
   1177c:	4642      	mov	r2, r8
   1177e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   11782:	464b      	mov	r3, r9
   11784:	4650      	mov	r0, sl
   11786:	4659      	mov	r1, fp
   11788:	f7ee fe76 	bl	478 <__aeabi_dmul>
   1178c:	4602      	mov	r2, r0
   1178e:	460b      	mov	r3, r1
   11790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   11794:	f7ee fcba 	bl	10c <__adddf3>
   11798:	4632      	mov	r2, r6
   1179a:	463b      	mov	r3, r7
   1179c:	4682      	mov	sl, r0
   1179e:	468b      	mov	fp, r1
   117a0:	4620      	mov	r0, r4
   117a2:	4629      	mov	r1, r5
   117a4:	f7ee fe68 	bl	478 <__aeabi_dmul>
   117a8:	460b      	mov	r3, r1
   117aa:	4602      	mov	r2, r0
   117ac:	4606      	mov	r6, r0
   117ae:	460f      	mov	r7, r1
   117b0:	4650      	mov	r0, sl
   117b2:	4659      	mov	r1, fp
   117b4:	f7ee fcaa 	bl	10c <__adddf3>
   117b8:	4bbd      	ldr	r3, [pc, #756]	; (11ab0 <__ieee754_pow+0x8d8>)
   117ba:	4299      	cmp	r1, r3
   117bc:	4604      	mov	r4, r0
   117be:	460d      	mov	r5, r1
   117c0:	4688      	mov	r8, r1
   117c2:	f340 8114 	ble.w	119ee <__ieee754_pow+0x816>
   117c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   117ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   117ce:	4303      	orrs	r3, r0
   117d0:	f040 8207 	bne.w	11be2 <__ieee754_pow+0xa0a>
   117d4:	a3a0      	add	r3, pc, #640	; (adr r3, 11a58 <__ieee754_pow+0x880>)
   117d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   117da:	4650      	mov	r0, sl
   117dc:	4659      	mov	r1, fp
   117de:	f7ee fc95 	bl	10c <__adddf3>
   117e2:	4632      	mov	r2, r6
   117e4:	e9cd 0100 	strd	r0, r1, [sp]
   117e8:	463b      	mov	r3, r7
   117ea:	4620      	mov	r0, r4
   117ec:	4629      	mov	r1, r5
   117ee:	f7ee fc8b 	bl	108 <__aeabi_dsub>
   117f2:	4602      	mov	r2, r0
   117f4:	460b      	mov	r3, r1
   117f6:	e9dd 0100 	ldrd	r0, r1, [sp]
   117fa:	f7ef f8cd 	bl	998 <__aeabi_dcmpgt>
   117fe:	2800      	cmp	r0, #0
   11800:	f040 81ef 	bne.w	11be2 <__ieee754_pow+0xa0a>
   11804:	f3c8 530a 	ubfx	r3, r8, #20, #11
   11808:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1180c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   11810:	fa42 f303 	asr.w	r3, r2, r3
   11814:	4443      	add	r3, r8
   11816:	49a7      	ldr	r1, [pc, #668]	; (11ab4 <__ieee754_pow+0x8dc>)
   11818:	f3c3 520a 	ubfx	r2, r3, #20, #11
   1181c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   11820:	fa41 fc02 	asr.w	ip, r1, r2
   11824:	f3c3 0513 	ubfx	r5, r3, #0, #20
   11828:	ea23 010c 	bic.w	r1, r3, ip
   1182c:	f1c2 0414 	rsb	r4, r2, #20
   11830:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   11834:	f1b8 0f00 	cmp.w	r8, #0
   11838:	460b      	mov	r3, r1
   1183a:	fa45 f104 	asr.w	r1, r5, r4
   1183e:	9102      	str	r1, [sp, #8]
   11840:	f04f 0000 	mov.w	r0, #0
   11844:	bfb8      	it	lt
   11846:	4249      	neglt	r1, r1
   11848:	4602      	mov	r2, r0
   1184a:	bfb8      	it	lt
   1184c:	9102      	strlt	r1, [sp, #8]
   1184e:	4630      	mov	r0, r6
   11850:	4639      	mov	r1, r7
   11852:	f7ee fc59 	bl	108 <__aeabi_dsub>
   11856:	460b      	mov	r3, r1
   11858:	4602      	mov	r2, r0
   1185a:	4606      	mov	r6, r0
   1185c:	460f      	mov	r7, r1
   1185e:	4650      	mov	r0, sl
   11860:	4659      	mov	r1, fp
   11862:	f7ee fc53 	bl	10c <__adddf3>
   11866:	9b02      	ldr	r3, [sp, #8]
   11868:	051b      	lsls	r3, r3, #20
   1186a:	460d      	mov	r5, r1
   1186c:	9300      	str	r3, [sp, #0]
   1186e:	2400      	movs	r4, #0
   11870:	a37b      	add	r3, pc, #492	; (adr r3, 11a60 <__ieee754_pow+0x888>)
   11872:	e9d3 2300 	ldrd	r2, r3, [r3]
   11876:	4620      	mov	r0, r4
   11878:	4629      	mov	r1, r5
   1187a:	f7ee fdfd 	bl	478 <__aeabi_dmul>
   1187e:	4632      	mov	r2, r6
   11880:	4680      	mov	r8, r0
   11882:	4689      	mov	r9, r1
   11884:	463b      	mov	r3, r7
   11886:	4620      	mov	r0, r4
   11888:	4629      	mov	r1, r5
   1188a:	f7ee fc3d 	bl	108 <__aeabi_dsub>
   1188e:	4602      	mov	r2, r0
   11890:	460b      	mov	r3, r1
   11892:	4650      	mov	r0, sl
   11894:	4659      	mov	r1, fp
   11896:	f7ee fc37 	bl	108 <__aeabi_dsub>
   1189a:	a373      	add	r3, pc, #460	; (adr r3, 11a68 <__ieee754_pow+0x890>)
   1189c:	e9d3 2300 	ldrd	r2, r3, [r3]
   118a0:	f7ee fdea 	bl	478 <__aeabi_dmul>
   118a4:	a372      	add	r3, pc, #456	; (adr r3, 11a70 <__ieee754_pow+0x898>)
   118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   118aa:	4606      	mov	r6, r0
   118ac:	460f      	mov	r7, r1
   118ae:	4620      	mov	r0, r4
   118b0:	4629      	mov	r1, r5
   118b2:	f7ee fde1 	bl	478 <__aeabi_dmul>
   118b6:	4602      	mov	r2, r0
   118b8:	460b      	mov	r3, r1
   118ba:	4630      	mov	r0, r6
   118bc:	4639      	mov	r1, r7
   118be:	f7ee fc25 	bl	10c <__adddf3>
   118c2:	4606      	mov	r6, r0
   118c4:	460f      	mov	r7, r1
   118c6:	4602      	mov	r2, r0
   118c8:	460b      	mov	r3, r1
   118ca:	4640      	mov	r0, r8
   118cc:	4649      	mov	r1, r9
   118ce:	f7ee fc1d 	bl	10c <__adddf3>
   118d2:	4642      	mov	r2, r8
   118d4:	464b      	mov	r3, r9
   118d6:	460d      	mov	r5, r1
   118d8:	4604      	mov	r4, r0
   118da:	f7ee fc15 	bl	108 <__aeabi_dsub>
   118de:	4602      	mov	r2, r0
   118e0:	460b      	mov	r3, r1
   118e2:	4630      	mov	r0, r6
   118e4:	4639      	mov	r1, r7
   118e6:	f7ee fc0f 	bl	108 <__aeabi_dsub>
   118ea:	462b      	mov	r3, r5
   118ec:	4682      	mov	sl, r0
   118ee:	468b      	mov	fp, r1
   118f0:	4622      	mov	r2, r4
   118f2:	4629      	mov	r1, r5
   118f4:	4620      	mov	r0, r4
   118f6:	f7ee fdbf 	bl	478 <__aeabi_dmul>
   118fa:	a35f      	add	r3, pc, #380	; (adr r3, 11a78 <__ieee754_pow+0x8a0>)
   118fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   11900:	4606      	mov	r6, r0
   11902:	460f      	mov	r7, r1
   11904:	f7ee fdb8 	bl	478 <__aeabi_dmul>
   11908:	a35d      	add	r3, pc, #372	; (adr r3, 11a80 <__ieee754_pow+0x8a8>)
   1190a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1190e:	f7ee fbfb 	bl	108 <__aeabi_dsub>
   11912:	4632      	mov	r2, r6
   11914:	463b      	mov	r3, r7
   11916:	f7ee fdaf 	bl	478 <__aeabi_dmul>
   1191a:	a35b      	add	r3, pc, #364	; (adr r3, 11a88 <__ieee754_pow+0x8b0>)
   1191c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11920:	f7ee fbf4 	bl	10c <__adddf3>
   11924:	4632      	mov	r2, r6
   11926:	463b      	mov	r3, r7
   11928:	f7ee fda6 	bl	478 <__aeabi_dmul>
   1192c:	a358      	add	r3, pc, #352	; (adr r3, 11a90 <__ieee754_pow+0x8b8>)
   1192e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11932:	f7ee fbe9 	bl	108 <__aeabi_dsub>
   11936:	4632      	mov	r2, r6
   11938:	463b      	mov	r3, r7
   1193a:	f7ee fd9d 	bl	478 <__aeabi_dmul>
   1193e:	a356      	add	r3, pc, #344	; (adr r3, 11a98 <__ieee754_pow+0x8c0>)
   11940:	e9d3 2300 	ldrd	r2, r3, [r3]
   11944:	f7ee fbe2 	bl	10c <__adddf3>
   11948:	4632      	mov	r2, r6
   1194a:	463b      	mov	r3, r7
   1194c:	f7ee fd94 	bl	478 <__aeabi_dmul>
   11950:	4602      	mov	r2, r0
   11952:	460b      	mov	r3, r1
   11954:	4620      	mov	r0, r4
   11956:	4629      	mov	r1, r5
   11958:	f7ee fbd6 	bl	108 <__aeabi_dsub>
   1195c:	4606      	mov	r6, r0
   1195e:	460f      	mov	r7, r1
   11960:	4602      	mov	r2, r0
   11962:	460b      	mov	r3, r1
   11964:	4620      	mov	r0, r4
   11966:	4629      	mov	r1, r5
   11968:	f7ee fd86 	bl	478 <__aeabi_dmul>
   1196c:	2200      	movs	r2, #0
   1196e:	4680      	mov	r8, r0
   11970:	4689      	mov	r9, r1
   11972:	4630      	mov	r0, r6
   11974:	4639      	mov	r1, r7
   11976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1197a:	f7ee fbc5 	bl	108 <__aeabi_dsub>
   1197e:	4602      	mov	r2, r0
   11980:	460b      	mov	r3, r1
   11982:	4640      	mov	r0, r8
   11984:	4649      	mov	r1, r9
   11986:	f7ee fea1 	bl	6cc <__aeabi_ddiv>
   1198a:	4652      	mov	r2, sl
   1198c:	4606      	mov	r6, r0
   1198e:	460f      	mov	r7, r1
   11990:	465b      	mov	r3, fp
   11992:	4629      	mov	r1, r5
   11994:	4620      	mov	r0, r4
   11996:	f7ee fd6f 	bl	478 <__aeabi_dmul>
   1199a:	4652      	mov	r2, sl
   1199c:	465b      	mov	r3, fp
   1199e:	f7ee fbb5 	bl	10c <__adddf3>
   119a2:	4602      	mov	r2, r0
   119a4:	460b      	mov	r3, r1
   119a6:	4630      	mov	r0, r6
   119a8:	4639      	mov	r1, r7
   119aa:	f7ee fbad 	bl	108 <__aeabi_dsub>
   119ae:	462b      	mov	r3, r5
   119b0:	4622      	mov	r2, r4
   119b2:	f7ee fba9 	bl	108 <__aeabi_dsub>
   119b6:	4602      	mov	r2, r0
   119b8:	460b      	mov	r3, r1
   119ba:	2000      	movs	r0, #0
   119bc:	493b      	ldr	r1, [pc, #236]	; (11aac <__ieee754_pow+0x8d4>)
   119be:	f7ee fba3 	bl	108 <__aeabi_dsub>
   119c2:	9d00      	ldr	r5, [sp, #0]
   119c4:	440d      	add	r5, r1
   119c6:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
   119ca:	f2c0 8147 	blt.w	11c5c <__ieee754_pow+0xa84>
   119ce:	4629      	mov	r1, r5
   119d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   119d4:	f7ee fd50 	bl	478 <__aeabi_dmul>
   119d8:	e9cd 0100 	strd	r0, r1, [sp]
   119dc:	e442      	b.n	11264 <__ieee754_pow+0x8c>
   119de:	2e00      	cmp	r6, #0
   119e0:	f6ff acac 	blt.w	1133c <__ieee754_pow+0x164>
   119e4:	2300      	movs	r3, #0
   119e6:	2400      	movs	r4, #0
   119e8:	e9cd 3400 	strd	r3, r4, [sp]
   119ec:	e43a      	b.n	11264 <__ieee754_pow+0x8c>
   119ee:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 11abc <__ieee754_pow+0x8e4>
   119f2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   119f6:	4563      	cmp	r3, ip
   119f8:	f340 80eb 	ble.w	11bd2 <__ieee754_pow+0x9fa>
   119fc:	4b2e      	ldr	r3, [pc, #184]	; (11ab8 <__ieee754_pow+0x8e0>)
   119fe:	440b      	add	r3, r1
   11a00:	4303      	orrs	r3, r0
   11a02:	d10a      	bne.n	11a1a <__ieee754_pow+0x842>
   11a04:	4632      	mov	r2, r6
   11a06:	463b      	mov	r3, r7
   11a08:	f7ee fb7e 	bl	108 <__aeabi_dsub>
   11a0c:	4652      	mov	r2, sl
   11a0e:	465b      	mov	r3, fp
   11a10:	f7ee ffb8 	bl	984 <__aeabi_dcmpge>
   11a14:	2800      	cmp	r0, #0
   11a16:	f43f aef5 	beq.w	11804 <__ieee754_pow+0x62c>
   11a1a:	a321      	add	r3, pc, #132	; (adr r3, 11aa0 <__ieee754_pow+0x8c8>)
   11a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11a24:	f7ee fd28 	bl	478 <__aeabi_dmul>
   11a28:	a31d      	add	r3, pc, #116	; (adr r3, 11aa0 <__ieee754_pow+0x8c8>)
   11a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11a2e:	f7ee fd23 	bl	478 <__aeabi_dmul>
   11a32:	e9cd 0100 	strd	r0, r1, [sp]
   11a36:	e415      	b.n	11264 <__ieee754_pow+0x8c>
   11a38:	2e00      	cmp	r6, #0
   11a3a:	dad3      	bge.n	119e4 <__ieee754_pow+0x80c>
   11a3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   11a40:	f8cd 8000 	str.w	r8, [sp]
   11a44:	9301      	str	r3, [sp, #4]
   11a46:	e40d      	b.n	11264 <__ieee754_pow+0x8c>
   11a48:	2200      	movs	r2, #0
   11a4a:	2300      	movs	r3, #0
   11a4c:	e9cd 2308 	strd	r2, r3, [sp, #32]
   11a50:	e4df      	b.n	11412 <__ieee754_pow+0x23a>
   11a52:	2600      	movs	r6, #0
   11a54:	e4c2      	b.n	113dc <__ieee754_pow+0x204>
   11a56:	bf00      	nop
   11a58:	652b82fe 	.word	0x652b82fe
   11a5c:	3c971547 	.word	0x3c971547
   11a60:	00000000 	.word	0x00000000
   11a64:	3fe62e43 	.word	0x3fe62e43
   11a68:	fefa39ef 	.word	0xfefa39ef
   11a6c:	3fe62e42 	.word	0x3fe62e42
   11a70:	0ca86c39 	.word	0x0ca86c39
   11a74:	be205c61 	.word	0xbe205c61
   11a78:	72bea4d0 	.word	0x72bea4d0
   11a7c:	3e663769 	.word	0x3e663769
   11a80:	c5d26bf1 	.word	0xc5d26bf1
   11a84:	3ebbbd41 	.word	0x3ebbbd41
   11a88:	af25de2c 	.word	0xaf25de2c
   11a8c:	3f11566a 	.word	0x3f11566a
   11a90:	16bebd93 	.word	0x16bebd93
   11a94:	3f66c16c 	.word	0x3f66c16c
   11a98:	5555553e 	.word	0x5555553e
   11a9c:	3fc55555 	.word	0x3fc55555
   11aa0:	c2f8f359 	.word	0xc2f8f359
   11aa4:	01a56e1f 	.word	0x01a56e1f
   11aa8:	bff00000 	.word	0xbff00000
   11aac:	3ff00000 	.word	0x3ff00000
   11ab0:	408fffff 	.word	0x408fffff
   11ab4:	000fffff 	.word	0x000fffff
   11ab8:	3f6f3400 	.word	0x3f6f3400
   11abc:	4090cbff 	.word	0x4090cbff
   11ac0:	429c      	cmp	r4, r3
   11ac2:	db8c      	blt.n	119de <__ieee754_pow+0x806>
   11ac4:	4b80      	ldr	r3, [pc, #512]	; (11cc8 <__ieee754_pow+0xaf0>)
   11ac6:	429c      	cmp	r4, r3
   11ac8:	f73f ac35 	bgt.w	11336 <__ieee754_pow+0x15e>
   11acc:	e9dd 0100 	ldrd	r0, r1, [sp]
   11ad0:	4b7d      	ldr	r3, [pc, #500]	; (11cc8 <__ieee754_pow+0xaf0>)
   11ad2:	2200      	movs	r2, #0
   11ad4:	f7ee fb18 	bl	108 <__aeabi_dsub>
   11ad8:	a36d      	add	r3, pc, #436	; (adr r3, 11c90 <__ieee754_pow+0xab8>)
   11ada:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ade:	4604      	mov	r4, r0
   11ae0:	460d      	mov	r5, r1
   11ae2:	f7ee fcc9 	bl	478 <__aeabi_dmul>
   11ae6:	a36c      	add	r3, pc, #432	; (adr r3, 11c98 <__ieee754_pow+0xac0>)
   11ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   11aec:	4606      	mov	r6, r0
   11aee:	460f      	mov	r7, r1
   11af0:	4620      	mov	r0, r4
   11af2:	4629      	mov	r1, r5
   11af4:	f7ee fcc0 	bl	478 <__aeabi_dmul>
   11af8:	46b2      	mov	sl, r6
   11afa:	46bb      	mov	fp, r7
   11afc:	4606      	mov	r6, r0
   11afe:	460f      	mov	r7, r1
   11b00:	4b72      	ldr	r3, [pc, #456]	; (11ccc <__ieee754_pow+0xaf4>)
   11b02:	2200      	movs	r2, #0
   11b04:	4620      	mov	r0, r4
   11b06:	4629      	mov	r1, r5
   11b08:	f7ee fcb6 	bl	478 <__aeabi_dmul>
   11b0c:	4602      	mov	r2, r0
   11b0e:	460b      	mov	r3, r1
   11b10:	a163      	add	r1, pc, #396	; (adr r1, 11ca0 <__ieee754_pow+0xac8>)
   11b12:	e9d1 0100 	ldrd	r0, r1, [r1]
   11b16:	f7ee faf7 	bl	108 <__aeabi_dsub>
   11b1a:	4622      	mov	r2, r4
   11b1c:	462b      	mov	r3, r5
   11b1e:	f7ee fcab 	bl	478 <__aeabi_dmul>
   11b22:	4602      	mov	r2, r0
   11b24:	460b      	mov	r3, r1
   11b26:	2000      	movs	r0, #0
   11b28:	4969      	ldr	r1, [pc, #420]	; (11cd0 <__ieee754_pow+0xaf8>)
   11b2a:	f7ee faed 	bl	108 <__aeabi_dsub>
   11b2e:	4622      	mov	r2, r4
   11b30:	e9cd 0100 	strd	r0, r1, [sp]
   11b34:	462b      	mov	r3, r5
   11b36:	4620      	mov	r0, r4
   11b38:	4629      	mov	r1, r5
   11b3a:	f7ee fc9d 	bl	478 <__aeabi_dmul>
   11b3e:	4602      	mov	r2, r0
   11b40:	460b      	mov	r3, r1
   11b42:	e9dd 0100 	ldrd	r0, r1, [sp]
   11b46:	f7ee fc97 	bl	478 <__aeabi_dmul>
   11b4a:	a357      	add	r3, pc, #348	; (adr r3, 11ca8 <__ieee754_pow+0xad0>)
   11b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b50:	f7ee fc92 	bl	478 <__aeabi_dmul>
   11b54:	4602      	mov	r2, r0
   11b56:	460b      	mov	r3, r1
   11b58:	4630      	mov	r0, r6
   11b5a:	4639      	mov	r1, r7
   11b5c:	f7ee fad4 	bl	108 <__aeabi_dsub>
   11b60:	4602      	mov	r2, r0
   11b62:	460b      	mov	r3, r1
   11b64:	4606      	mov	r6, r0
   11b66:	460f      	mov	r7, r1
   11b68:	4650      	mov	r0, sl
   11b6a:	4659      	mov	r1, fp
   11b6c:	f7ee face 	bl	10c <__adddf3>
   11b70:	2400      	movs	r4, #0
   11b72:	4652      	mov	r2, sl
   11b74:	465b      	mov	r3, fp
   11b76:	4620      	mov	r0, r4
   11b78:	460d      	mov	r5, r1
   11b7a:	f7ee fac5 	bl	108 <__aeabi_dsub>
   11b7e:	4602      	mov	r2, r0
   11b80:	460b      	mov	r3, r1
   11b82:	4630      	mov	r0, r6
   11b84:	4639      	mov	r1, r7
   11b86:	f7ee fabf 	bl	108 <__aeabi_dsub>
   11b8a:	4682      	mov	sl, r0
   11b8c:	468b      	mov	fp, r1
   11b8e:	e5db      	b.n	11748 <__ieee754_pow+0x570>
   11b90:	494d      	ldr	r1, [pc, #308]	; (11cc8 <__ieee754_pow+0xaf0>)
   11b92:	465a      	mov	r2, fp
   11b94:	4653      	mov	r3, sl
   11b96:	2000      	movs	r0, #0
   11b98:	f7ee fd98 	bl	6cc <__aeabi_ddiv>
   11b9c:	e9cd 0100 	strd	r0, r1, [sp]
   11ba0:	f7ff bb60 	b.w	11264 <__ieee754_pow+0x8c>
   11ba4:	465a      	mov	r2, fp
   11ba6:	4658      	mov	r0, fp
   11ba8:	4653      	mov	r3, sl
   11baa:	4651      	mov	r1, sl
   11bac:	f7ee fc64 	bl	478 <__aeabi_dmul>
   11bb0:	e9cd 0100 	strd	r0, r1, [sp]
   11bb4:	f7ff bb56 	b.w	11264 <__ieee754_pow+0x8c>
   11bb8:	2b00      	cmp	r3, #0
   11bba:	d141      	bne.n	11c40 <__ieee754_pow+0xa68>
   11bbc:	f1c2 0214 	rsb	r2, r2, #20
   11bc0:	fa45 f102 	asr.w	r1, r5, r2
   11bc4:	fa01 f202 	lsl.w	r2, r1, r2
   11bc8:	42aa      	cmp	r2, r5
   11bca:	d055      	beq.n	11c78 <__ieee754_pow+0xaa0>
   11bcc:	9302      	str	r3, [sp, #8]
   11bce:	f7ff bb28 	b.w	11222 <__ieee754_pow+0x4a>
   11bd2:	4a3f      	ldr	r2, [pc, #252]	; (11cd0 <__ieee754_pow+0xaf8>)
   11bd4:	4293      	cmp	r3, r2
   11bd6:	dc56      	bgt.n	11c86 <__ieee754_pow+0xaae>
   11bd8:	e9dd 1200 	ldrd	r1, r2, [sp]
   11bdc:	9100      	str	r1, [sp, #0]
   11bde:	9102      	str	r1, [sp, #8]
   11be0:	e645      	b.n	1186e <__ieee754_pow+0x696>
   11be2:	a333      	add	r3, pc, #204	; (adr r3, 11cb0 <__ieee754_pow+0xad8>)
   11be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   11be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   11bec:	f7ee fc44 	bl	478 <__aeabi_dmul>
   11bf0:	a32f      	add	r3, pc, #188	; (adr r3, 11cb0 <__ieee754_pow+0xad8>)
   11bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bf6:	f7ee fc3f 	bl	478 <__aeabi_dmul>
   11bfa:	e9cd 0100 	strd	r0, r1, [sp]
   11bfe:	f7ff bb31 	b.w	11264 <__ieee754_pow+0x8c>
   11c02:	9b02      	ldr	r3, [sp, #8]
   11c04:	2b01      	cmp	r3, #1
   11c06:	f47f ab2d 	bne.w	11264 <__ieee754_pow+0x8c>
   11c0a:	e9dd 4500 	ldrd	r4, r5, [sp]
   11c0e:	4622      	mov	r2, r4
   11c10:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   11c14:	e9cd 2300 	strd	r2, r3, [sp]
   11c18:	f7ff bb24 	b.w	11264 <__ieee754_pow+0x8c>
   11c1c:	a326      	add	r3, pc, #152	; (adr r3, 11cb8 <__ieee754_pow+0xae0>)
   11c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c22:	e9cd 2308 	strd	r2, r3, [sp, #32]
   11c26:	a326      	add	r3, pc, #152	; (adr r3, 11cc0 <__ieee754_pow+0xae8>)
   11c28:	e9d3 2300 	ldrd	r2, r3, [r3]
   11c2c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11c30:	4b28      	ldr	r3, [pc, #160]	; (11cd4 <__ieee754_pow+0xafc>)
   11c32:	2200      	movs	r2, #0
   11c34:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11c38:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   11c3c:	f7ff bbf0 	b.w	11420 <__ieee754_pow+0x248>
   11c40:	4658      	mov	r0, fp
   11c42:	4651      	mov	r1, sl
   11c44:	f010 fcda 	bl	225fc <fabs>
   11c48:	465b      	mov	r3, fp
   11c4a:	e9cd 0100 	strd	r0, r1, [sp]
   11c4e:	2b00      	cmp	r3, #0
   11c50:	f47f ab9b 	bne.w	1138a <__ieee754_pow+0x1b2>
   11c54:	f8cd b008 	str.w	fp, [sp, #8]
   11c58:	f7ff bb34 	b.w	112c4 <__ieee754_pow+0xec>
   11c5c:	9a02      	ldr	r2, [sp, #8]
   11c5e:	f000 f83b 	bl	11cd8 <scalbn>
   11c62:	e6b5      	b.n	119d0 <__ieee754_pow+0x7f8>
   11c64:	f001 0101 	and.w	r1, r1, #1
   11c68:	f1c1 0202 	rsb	r2, r1, #2
   11c6c:	9202      	str	r2, [sp, #8]
   11c6e:	2b00      	cmp	r3, #0
   11c70:	f43f aad7 	beq.w	11222 <__ieee754_pow+0x4a>
   11c74:	f7ff bb1e 	b.w	112b4 <__ieee754_pow+0xdc>
   11c78:	f001 0101 	and.w	r1, r1, #1
   11c7c:	f1c1 0302 	rsb	r3, r1, #2
   11c80:	9302      	str	r3, [sp, #8]
   11c82:	f7ff bace 	b.w	11222 <__ieee754_pow+0x4a>
   11c86:	151b      	asrs	r3, r3, #20
   11c88:	e5be      	b.n	11808 <__ieee754_pow+0x630>
   11c8a:	bf00      	nop
   11c8c:	f3af 8000 	nop.w
   11c90:	60000000 	.word	0x60000000
   11c94:	3ff71547 	.word	0x3ff71547
   11c98:	f85ddf44 	.word	0xf85ddf44
   11c9c:	3e54ae0b 	.word	0x3e54ae0b
   11ca0:	55555555 	.word	0x55555555
   11ca4:	3fd55555 	.word	0x3fd55555
   11ca8:	652b82fe 	.word	0x652b82fe
   11cac:	3ff71547 	.word	0x3ff71547
   11cb0:	8800759c 	.word	0x8800759c
   11cb4:	7e37e43c 	.word	0x7e37e43c
   11cb8:	40000000 	.word	0x40000000
   11cbc:	3fe2b803 	.word	0x3fe2b803
   11cc0:	43cfd006 	.word	0x43cfd006
   11cc4:	3e4cfdeb 	.word	0x3e4cfdeb
   11cc8:	3ff00000 	.word	0x3ff00000
   11ccc:	3fd00000 	.word	0x3fd00000
   11cd0:	3fe00000 	.word	0x3fe00000
   11cd4:	3ff80000 	.word	0x3ff80000

00011cd8 <scalbn>:
   11cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cda:	f3c1 530a 	ubfx	r3, r1, #20, #11
   11cde:	4604      	mov	r4, r0
   11ce0:	460d      	mov	r5, r1
   11ce2:	460e      	mov	r6, r1
   11ce4:	4617      	mov	r7, r2
   11ce6:	bb73      	cbnz	r3, 11d46 <scalbn+0x6e>
   11ce8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   11cec:	4603      	mov	r3, r0
   11cee:	4333      	orrs	r3, r6
   11cf0:	d028      	beq.n	11d44 <scalbn+0x6c>
   11cf2:	4b31      	ldr	r3, [pc, #196]	; (11db8 <scalbn+0xe0>)
   11cf4:	2200      	movs	r2, #0
   11cf6:	f7ee fbbf 	bl	478 <__aeabi_dmul>
   11cfa:	4b30      	ldr	r3, [pc, #192]	; (11dbc <scalbn+0xe4>)
   11cfc:	429f      	cmp	r7, r3
   11cfe:	4604      	mov	r4, r0
   11d00:	460d      	mov	r5, r1
   11d02:	db1a      	blt.n	11d3a <scalbn+0x62>
   11d04:	f3c1 530a 	ubfx	r3, r1, #20, #11
   11d08:	460e      	mov	r6, r1
   11d0a:	3b36      	subs	r3, #54	; 0x36
   11d0c:	443b      	add	r3, r7
   11d0e:	f240 72fe 	movw	r2, #2046	; 0x7fe
   11d12:	4293      	cmp	r3, r2
   11d14:	dc20      	bgt.n	11d58 <scalbn+0x80>
   11d16:	2b00      	cmp	r3, #0
   11d18:	dc3c      	bgt.n	11d94 <scalbn+0xbc>
   11d1a:	f113 0f35 	cmn.w	r3, #53	; 0x35
   11d1e:	da2c      	bge.n	11d7a <scalbn+0xa2>
   11d20:	f24c 3350 	movw	r3, #50000	; 0xc350
   11d24:	429f      	cmp	r7, r3
   11d26:	dc17      	bgt.n	11d58 <scalbn+0x80>
   11d28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
   11d2c:	f043 71d2 	orr.w	r1, r3, #27525120	; 0x1a40000
   11d30:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
   11d34:	4822      	ldr	r0, [pc, #136]	; (11dc0 <scalbn+0xe8>)
   11d36:	f041 011f 	orr.w	r1, r1, #31
   11d3a:	a31b      	add	r3, pc, #108	; (adr r3, 11da8 <scalbn+0xd0>)
   11d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d40:	f7ee fb9a 	bl	478 <__aeabi_dmul>
   11d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d46:	f240 72ff 	movw	r2, #2047	; 0x7ff
   11d4a:	4293      	cmp	r3, r2
   11d4c:	d1de      	bne.n	11d0c <scalbn+0x34>
   11d4e:	4602      	mov	r2, r0
   11d50:	460b      	mov	r3, r1
   11d52:	f7ee f9db 	bl	10c <__adddf3>
   11d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
   11d5c:	f043 41fc 	orr.w	r1, r3, #2113929216	; 0x7e000000
   11d60:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
   11d64:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
   11d68:	a311      	add	r3, pc, #68	; (adr r3, 11db0 <scalbn+0xd8>)
   11d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   11d6e:	4815      	ldr	r0, [pc, #84]	; (11dc4 <scalbn+0xec>)
   11d70:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
   11d74:	f7ee fb80 	bl	478 <__aeabi_dmul>
   11d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d7a:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   11d7e:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   11d82:	3336      	adds	r3, #54	; 0x36
   11d84:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
   11d88:	4620      	mov	r0, r4
   11d8a:	4b0f      	ldr	r3, [pc, #60]	; (11dc8 <scalbn+0xf0>)
   11d8c:	2200      	movs	r2, #0
   11d8e:	f7ee fb73 	bl	478 <__aeabi_dmul>
   11d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d94:	f026 46ff 	bic.w	r6, r6, #2139095040	; 0x7f800000
   11d98:	f426 06e0 	bic.w	r6, r6, #7340032	; 0x700000
   11d9c:	4620      	mov	r0, r4
   11d9e:	ea46 5103 	orr.w	r1, r6, r3, lsl #20
   11da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11da4:	f3af 8000 	nop.w
   11da8:	c2f8f359 	.word	0xc2f8f359
   11dac:	01a56e1f 	.word	0x01a56e1f
   11db0:	8800759c 	.word	0x8800759c
   11db4:	7e37e43c 	.word	0x7e37e43c
   11db8:	43500000 	.word	0x43500000
   11dbc:	ffff3cb0 	.word	0xffff3cb0
   11dc0:	c2f8f359 	.word	0xc2f8f359
   11dc4:	8800759c 	.word	0x8800759c
   11dc8:	3c900000 	.word	0x3c900000

00011dcc <ExtractTgcParameters>:
{
   11dcc:	b538      	push	{r3, r4, r5, lr}
   11dce:	460d      	mov	r5, r1
    tgc = eeData[51] & 0x01FF;
   11dd0:	f8b0 0066 	ldrh.w	r0, [r0, #102]	; 0x66
   11dd4:	f3c0 0008 	ubfx	r0, r0, #0, #9
   11dd8:	f7ee ff3a 	bl	c50 <__aeabi_i2f>
   11ddc:	4604      	mov	r4, r0
    if(tgc > 255)
   11dde:	4908      	ldr	r1, [pc, #32]	; (11e00 <ExtractTgcParameters+0x34>)
   11de0:	f7ef f946 	bl	1070 <__aeabi_fcmpgt>
   11de4:	b128      	cbz	r0, 11df2 <ExtractTgcParameters+0x26>
        tgc = tgc - 512;
   11de6:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
   11dea:	4620      	mov	r0, r4
   11dec:	f7ee fe7a 	bl	ae4 <__aeabi_fsub>
   11df0:	4604      	mov	r4, r0
    tgc = tgc / 64.0f;
   11df2:	f04f 5172 	mov.w	r1, #1015021568	; 0x3c800000
   11df6:	4620      	mov	r0, r4
   11df8:	f7ee ff7e 	bl	cf8 <__aeabi_fmul>
    mlx90641->tgc = tgc;        
   11dfc:	61a8      	str	r0, [r5, #24]
}
   11dfe:	bd38      	pop	{r3, r4, r5, pc}
   11e00:	437f0000 	.word	0x437f0000

00011e04 <ExtractKsToParameters>:
{
   11e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e08:	4605      	mov	r5, r0
   11e0a:	460e      	mov	r6, r1
    mlx90641->ct[0] = -40;
   11e0c:	f64f 73d8 	movw	r3, #65496	; 0xffd8
   11e10:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
    mlx90641->ct[1] = -20;
   11e14:	f64f 73ec 	movw	r3, #65516	; 0xffec
   11e18:	f8a1 304e 	strh.w	r3, [r1, #78]	; 0x4e
    mlx90641->ct[2] = 0;
   11e1c:	2400      	movs	r4, #0
   11e1e:	f8a1 4050 	strh.w	r4, [r1, #80]	; 0x50
    mlx90641->ct[3] = 80;
   11e22:	2350      	movs	r3, #80	; 0x50
   11e24:	f8a1 3052 	strh.w	r3, [r1, #82]	; 0x52
    mlx90641->ct[4] = 120;
   11e28:	2378      	movs	r3, #120	; 0x78
   11e2a:	f8a1 3054 	strh.w	r3, [r1, #84]	; 0x54
    mlx90641->ct[5] = eeData[58];
   11e2e:	f9b0 3074 	ldrsh.w	r3, [r0, #116]	; 0x74
   11e32:	f8a1 3056 	strh.w	r3, [r1, #86]	; 0x56
    mlx90641->ct[6] = eeData[60];
   11e36:	f9b0 3078 	ldrsh.w	r3, [r0, #120]	; 0x78
   11e3a:	f8a1 3058 	strh.w	r3, [r1, #88]	; 0x58
    mlx90641->ct[7] = eeData[62];
   11e3e:	f9b0 307c 	ldrsh.w	r3, [r0, #124]	; 0x7c
   11e42:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    KsToScale = eeData[52];
   11e46:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
    KsToScale = 1 << KsToScale;
   11e4a:	2701      	movs	r7, #1
   11e4c:	409f      	lsls	r7, r3
    mlx90641->ksTo[0] = eeData[53];
   11e4e:	f8b0 006a 	ldrh.w	r0, [r0, #106]	; 0x6a
   11e52:	f7ee fef9 	bl	c48 <__aeabi_ui2f>
   11e56:	62f0      	str	r0, [r6, #44]	; 0x2c
    mlx90641->ksTo[1] = eeData[54];
   11e58:	f8b5 006c 	ldrh.w	r0, [r5, #108]	; 0x6c
   11e5c:	f7ee fef4 	bl	c48 <__aeabi_ui2f>
   11e60:	6330      	str	r0, [r6, #48]	; 0x30
    mlx90641->ksTo[2] = eeData[55];
   11e62:	f8b5 006e 	ldrh.w	r0, [r5, #110]	; 0x6e
   11e66:	f7ee feef 	bl	c48 <__aeabi_ui2f>
   11e6a:	6370      	str	r0, [r6, #52]	; 0x34
    mlx90641->ksTo[3] = eeData[56];
   11e6c:	f8b5 0070 	ldrh.w	r0, [r5, #112]	; 0x70
   11e70:	f7ee feea 	bl	c48 <__aeabi_ui2f>
   11e74:	63b0      	str	r0, [r6, #56]	; 0x38
    mlx90641->ksTo[4] = eeData[57];
   11e76:	f8b5 0072 	ldrh.w	r0, [r5, #114]	; 0x72
   11e7a:	f7ee fee5 	bl	c48 <__aeabi_ui2f>
   11e7e:	63f0      	str	r0, [r6, #60]	; 0x3c
    mlx90641->ksTo[5] = eeData[59];
   11e80:	f8b5 0076 	ldrh.w	r0, [r5, #118]	; 0x76
   11e84:	f7ee fee0 	bl	c48 <__aeabi_ui2f>
   11e88:	6430      	str	r0, [r6, #64]	; 0x40
    mlx90641->ksTo[6] = eeData[61];
   11e8a:	f8b5 007a 	ldrh.w	r0, [r5, #122]	; 0x7a
   11e8e:	f7ee fedb 	bl	c48 <__aeabi_ui2f>
   11e92:	6470      	str	r0, [r6, #68]	; 0x44
    mlx90641->ksTo[7] = eeData[63];
   11e94:	f8b5 007e 	ldrh.w	r0, [r5, #126]	; 0x7e
   11e98:	f7ee fed6 	bl	c48 <__aeabi_ui2f>
   11e9c:	64b0      	str	r0, [r6, #72]	; 0x48
    for(int i = 0; i < 8; i++)
   11e9e:	e00e      	b.n	11ebe <ExtractKsToParameters+0xba>
        mlx90641->ksTo[i] = mlx90641->ksTo[i] / KsToScale;
   11ea0:	f104 050a 	add.w	r5, r4, #10
   11ea4:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   11ea8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   11eac:	4638      	mov	r0, r7
   11eae:	f7ee fecf 	bl	c50 <__aeabi_i2f>
   11eb2:	4601      	mov	r1, r0
   11eb4:	4640      	mov	r0, r8
   11eb6:	f7ee ffd3 	bl	e60 <__aeabi_fdiv>
   11eba:	6068      	str	r0, [r5, #4]
    for(int i = 0; i < 8; i++)
   11ebc:	3401      	adds	r4, #1
   11ebe:	2c07      	cmp	r4, #7
   11ec0:	dc15      	bgt.n	11eee <ExtractKsToParameters+0xea>
        if(mlx90641->ksTo[i] > 1023)
   11ec2:	f104 030a 	add.w	r3, r4, #10
   11ec6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   11eca:	685d      	ldr	r5, [r3, #4]
   11ecc:	4909      	ldr	r1, [pc, #36]	; (11ef4 <ExtractKsToParameters+0xf0>)
   11ece:	4628      	mov	r0, r5
   11ed0:	f7ef f8ce 	bl	1070 <__aeabi_fcmpgt>
   11ed4:	2800      	cmp	r0, #0
   11ed6:	d0e3      	beq.n	11ea0 <ExtractKsToParameters+0x9c>
            mlx90641->ksTo[i] = mlx90641->ksTo[i] - 2048;
   11ed8:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
   11edc:	4628      	mov	r0, r5
   11ede:	f7ee fe01 	bl	ae4 <__aeabi_fsub>
   11ee2:	f104 030a 	add.w	r3, r4, #10
   11ee6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   11eea:	6058      	str	r0, [r3, #4]
   11eec:	e7d8      	b.n	11ea0 <ExtractKsToParameters+0x9c>
}
   11eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11ef2:	bf00      	nop
   11ef4:	447fc000 	.word	0x447fc000

00011ef8 <ExtractKtaPixelParameters>:
}

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90641 *mlx90641)
{
   11ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11efc:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   11f00:	4605      	mov	r5, r0
   11f02:	468a      	mov	sl, r1
    int16_t ktaAvg;
    int16_t tempKta;
    float ktaTemp[192];
    float temp;

    ktaAvg = eeData[21];
   11f04:	f9b0 302a 	ldrsh.w	r3, [r0, #42]	; 0x2a
   11f08:	9301      	str	r3, [sp, #4]
    if (ktaAvg > 1023)
   11f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11f0e:	db03      	blt.n	11f18 <ExtractKtaPixelParameters+0x20>
    {
        ktaAvg = ktaAvg - 2048;
   11f10:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   11f14:	b21b      	sxth	r3, r3
   11f16:	9301      	str	r3, [sp, #4]
    }
  
    ktaScale1 = eeData[22] >> 5;
   11f18:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
   11f1a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   11f1e:	9202      	str	r2, [sp, #8]
    ktaScale2 = eeData[22] & 0x001F;
   11f20:	f003 031f 	and.w	r3, r3, #31

    for(int i = 0; i < 192; i++)
   11f24:	2400      	movs	r4, #0
   11f26:	f8cd a00c 	str.w	sl, [sp, #12]
   11f2a:	469a      	mov	sl, r3
   11f2c:	e037      	b.n	11f9e <ExtractKtaPixelParameters+0xa6>
        if (tempKta > 31)
        {
            tempKta = tempKta - 64;
        }

        ktaTemp[i] = tempKta * pow(2,(double)ktaScale2);
   11f2e:	4650      	mov	r0, sl
   11f30:	f7ee fa28 	bl	384 <__aeabi_ui2d>
   11f34:	4602      	mov	r2, r0
   11f36:	460b      	mov	r3, r1
   11f38:	f04f 0800 	mov.w	r8, #0
   11f3c:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   11f40:	4640      	mov	r0, r8
   11f42:	4649      	mov	r1, r9
   11f44:	f010 fba8 	bl	22698 <pow>
   11f48:	4606      	mov	r6, r0
   11f4a:	460f      	mov	r7, r1
   11f4c:	4658      	mov	r0, fp
   11f4e:	f7ee fa29 	bl	3a4 <__aeabi_i2d>
   11f52:	4632      	mov	r2, r6
   11f54:	463b      	mov	r3, r7
   11f56:	f7ee fa8f 	bl	478 <__aeabi_dmul>
   11f5a:	f7ee fd6f 	bl	a3c <__aeabi_d2f>
   11f5e:	4606      	mov	r6, r0
        ktaTemp[i] = ktaTemp[i] + ktaAvg;
   11f60:	9801      	ldr	r0, [sp, #4]
   11f62:	f7ee fe75 	bl	c50 <__aeabi_i2f>
   11f66:	4631      	mov	r1, r6
   11f68:	f7ee fdbe 	bl	ae8 <__addsf3>
        ktaTemp[i] = ktaTemp[i] / pow(2,(double)ktaScale1);
   11f6c:	f7ee fa2c 	bl	3c8 <__aeabi_f2d>
   11f70:	4606      	mov	r6, r0
   11f72:	460f      	mov	r7, r1
   11f74:	9802      	ldr	r0, [sp, #8]
   11f76:	f7ee fa05 	bl	384 <__aeabi_ui2d>
   11f7a:	4602      	mov	r2, r0
   11f7c:	460b      	mov	r3, r1
   11f7e:	4640      	mov	r0, r8
   11f80:	4649      	mov	r1, r9
   11f82:	f010 fb89 	bl	22698 <pow>
   11f86:	4602      	mov	r2, r0
   11f88:	460b      	mov	r3, r1
   11f8a:	4630      	mov	r0, r6
   11f8c:	4639      	mov	r1, r7
   11f8e:	f7ee fb9d 	bl	6cc <__aeabi_ddiv>
   11f92:	f7ee fd53 	bl	a3c <__aeabi_d2f>
   11f96:	ab04      	add	r3, sp, #16
   11f98:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    for(int i = 0; i < 192; i++)
   11f9c:	3401      	adds	r4, #1
   11f9e:	2cbf      	cmp	r4, #191	; 0xbf
   11fa0:	dc0d      	bgt.n	11fbe <ExtractKtaPixelParameters+0xc6>
        tempKta = (eeData[448 + i] >> 5);
   11fa2:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
   11fa6:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
   11faa:	ea4f 1b53 	mov.w	fp, r3, lsr #5
        if (tempKta > 31)
   11fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11fb2:	d3bc      	bcc.n	11f2e <ExtractKtaPixelParameters+0x36>
            tempKta = tempKta - 64;
   11fb4:	f1ab 0b40 	sub.w	fp, fp, #64	; 0x40
   11fb8:	fa0f fb8b 	sxth.w	fp, fp
   11fbc:	e7b7      	b.n	11f2e <ExtractKtaPixelParameters+0x36>
   11fbe:	f8dd a00c 	ldr.w	sl, [sp, #12]
    }
    
    temp = fabs(ktaTemp[0]);
   11fc2:	9804      	ldr	r0, [sp, #16]
   11fc4:	f7ee fa00 	bl	3c8 <__aeabi_f2d>
   11fc8:	f010 fb18 	bl	225fc <fabs>
   11fcc:	f7ee fd36 	bl	a3c <__aeabi_d2f>
   11fd0:	4681      	mov	r9, r0
    for(int i = 1; i < 192; i++)
   11fd2:	f04f 0801 	mov.w	r8, #1
   11fd6:	e008      	b.n	11fea <ExtractKtaPixelParameters+0xf2>
    {
        if (fabs(ktaTemp[i]) > temp)
        {
            temp = fabs(ktaTemp[i]);
   11fd8:	4630      	mov	r0, r6
   11fda:	4639      	mov	r1, r7
   11fdc:	f010 fb0e 	bl	225fc <fabs>
   11fe0:	f7ee fd2c 	bl	a3c <__aeabi_d2f>
   11fe4:	4681      	mov	r9, r0
    for(int i = 1; i < 192; i++)
   11fe6:	f108 0801 	add.w	r8, r8, #1
   11fea:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
   11fee:	dc16      	bgt.n	1201e <ExtractKtaPixelParameters+0x126>
        if (fabs(ktaTemp[i]) > temp)
   11ff0:	ab04      	add	r3, sp, #16
   11ff2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   11ff6:	f7ee f9e7 	bl	3c8 <__aeabi_f2d>
   11ffa:	4606      	mov	r6, r0
   11ffc:	460f      	mov	r7, r1
   11ffe:	f010 fafd 	bl	225fc <fabs>
   12002:	4604      	mov	r4, r0
   12004:	460d      	mov	r5, r1
   12006:	4648      	mov	r0, r9
   12008:	f7ee f9de 	bl	3c8 <__aeabi_f2d>
   1200c:	4602      	mov	r2, r0
   1200e:	460b      	mov	r3, r1
   12010:	4620      	mov	r0, r4
   12012:	4629      	mov	r1, r5
   12014:	f7ee fcc0 	bl	998 <__aeabi_dcmpgt>
   12018:	2800      	cmp	r0, #0
   1201a:	d0e4      	beq.n	11fe6 <ExtractKtaPixelParameters+0xee>
   1201c:	e7dc      	b.n	11fd8 <ExtractKtaPixelParameters+0xe0>
        }
    }
    
    ktaScale1 = 0;
   1201e:	f04f 0800 	mov.w	r8, #0
    while(temp < 64)
   12022:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
   12026:	4648      	mov	r0, r9
   12028:	f7ef f804 	bl	1034 <__aeabi_fcmplt>
   1202c:	b148      	cbz	r0, 12042 <ExtractKtaPixelParameters+0x14a>
    {
        temp = temp*2;
   1202e:	4649      	mov	r1, r9
   12030:	4648      	mov	r0, r9
   12032:	f7ee fd59 	bl	ae8 <__addsf3>
   12036:	4681      	mov	r9, r0
        ktaScale1 = ktaScale1 + 1;
   12038:	f108 0801 	add.w	r8, r8, #1
   1203c:	fa5f f888 	uxtb.w	r8, r8
   12040:	e7ef      	b.n	12022 <ExtractKtaPixelParameters+0x12a>
    }    
     
    for(int i = 0; i < 192; i++)
   12042:	2400      	movs	r4, #0
   12044:	e00d      	b.n	12062 <ExtractKtaPixelParameters+0x16a>
    {
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
        if (temp < 0)
        {
            mlx90641->kta[i] = (temp - 0.5);
   12046:	4628      	mov	r0, r5
   12048:	f7ee f9be 	bl	3c8 <__aeabi_f2d>
   1204c:	2200      	movs	r2, #0
   1204e:	4b1f      	ldr	r3, [pc, #124]	; (120cc <ExtractKtaPixelParameters+0x1d4>)
   12050:	f7ee f85a 	bl	108 <__aeabi_dsub>
   12054:	eb0a 0504 	add.w	r5, sl, r4
   12058:	f7ee fca8 	bl	9ac <__aeabi_d2iz>
   1205c:	f885 04de 	strb.w	r0, [r5, #1246]	; 0x4de
    for(int i = 0; i < 192; i++)
   12060:	3401      	adds	r4, #1
   12062:	2cbf      	cmp	r4, #191	; 0xbf
   12064:	dc2c      	bgt.n	120c0 <ExtractKtaPixelParameters+0x1c8>
        temp = ktaTemp[i] * pow(2,(double)ktaScale1);
   12066:	ab04      	add	r3, sp, #16
   12068:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   1206c:	f7ee f9ac 	bl	3c8 <__aeabi_f2d>
   12070:	4606      	mov	r6, r0
   12072:	460f      	mov	r7, r1
   12074:	4640      	mov	r0, r8
   12076:	f7ee f985 	bl	384 <__aeabi_ui2d>
   1207a:	4602      	mov	r2, r0
   1207c:	460b      	mov	r3, r1
   1207e:	2000      	movs	r0, #0
   12080:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12084:	f010 fb08 	bl	22698 <pow>
   12088:	4602      	mov	r2, r0
   1208a:	460b      	mov	r3, r1
   1208c:	4630      	mov	r0, r6
   1208e:	4639      	mov	r1, r7
   12090:	f7ee f9f2 	bl	478 <__aeabi_dmul>
   12094:	f7ee fcd2 	bl	a3c <__aeabi_d2f>
   12098:	4605      	mov	r5, r0
        if (temp < 0)
   1209a:	2100      	movs	r1, #0
   1209c:	f7ee ffca 	bl	1034 <__aeabi_fcmplt>
   120a0:	2800      	cmp	r0, #0
   120a2:	d1d0      	bne.n	12046 <ExtractKtaPixelParameters+0x14e>
        }
        else
        {
            mlx90641->kta[i] = (temp + 0.5);
   120a4:	4628      	mov	r0, r5
   120a6:	f7ee f98f 	bl	3c8 <__aeabi_f2d>
   120aa:	2200      	movs	r2, #0
   120ac:	4b07      	ldr	r3, [pc, #28]	; (120cc <ExtractKtaPixelParameters+0x1d4>)
   120ae:	f7ee f82d 	bl	10c <__adddf3>
   120b2:	eb0a 0504 	add.w	r5, sl, r4
   120b6:	f7ee fc79 	bl	9ac <__aeabi_d2iz>
   120ba:	f885 04de 	strb.w	r0, [r5, #1246]	; 0x4de
   120be:	e7cf      	b.n	12060 <ExtractKtaPixelParameters+0x168>
        }        
        
    } 
    
    mlx90641->ktaScale = ktaScale1;
   120c0:	f88a 859e 	strb.w	r8, [sl, #1438]	; 0x59e
}
   120c4:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   120c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120cc:	3fe00000 	.word	0x3fe00000

000120d0 <ExtractKvPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90641 *mlx90641)
{
   120d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120d4:	f5ad 7d45 	sub.w	sp, sp, #788	; 0x314
   120d8:	4605      	mov	r5, r0
   120da:	468a      	mov	sl, r1
    int16_t kvAvg;
    int16_t tempKv;
    float kvTemp[192];
    float temp;

    kvAvg = eeData[23];
   120dc:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
   120e0:	9301      	str	r3, [sp, #4]
    if (kvAvg > 1023)
   120e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   120e6:	db03      	blt.n	120f0 <ExtractKvPixelParameters+0x20>
    {
        kvAvg = kvAvg - 2048;
   120e8:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   120ec:	b21b      	sxth	r3, r3
   120ee:	9301      	str	r3, [sp, #4]
    }
  
    kvScale1 = eeData[24] >> 5;
   120f0:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
   120f2:	f3c3 1247 	ubfx	r2, r3, #5, #8
   120f6:	9202      	str	r2, [sp, #8]
    kvScale2 = eeData[24] & 0x001F;
   120f8:	f003 031f 	and.w	r3, r3, #31

    for(int i = 0; i < 192; i++)
   120fc:	2400      	movs	r4, #0
   120fe:	f8cd a00c 	str.w	sl, [sp, #12]
   12102:	469a      	mov	sl, r3
   12104:	e037      	b.n	12176 <ExtractKvPixelParameters+0xa6>
        if (tempKv > 15)
        {
            tempKv = tempKv - 32;
        }

        kvTemp[i] = tempKv * pow(2,(double)kvScale2);
   12106:	4650      	mov	r0, sl
   12108:	f7ee f93c 	bl	384 <__aeabi_ui2d>
   1210c:	4602      	mov	r2, r0
   1210e:	460b      	mov	r3, r1
   12110:	f04f 0800 	mov.w	r8, #0
   12114:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
   12118:	4640      	mov	r0, r8
   1211a:	4649      	mov	r1, r9
   1211c:	f010 fabc 	bl	22698 <pow>
   12120:	4606      	mov	r6, r0
   12122:	460f      	mov	r7, r1
   12124:	4658      	mov	r0, fp
   12126:	f7ee f93d 	bl	3a4 <__aeabi_i2d>
   1212a:	4632      	mov	r2, r6
   1212c:	463b      	mov	r3, r7
   1212e:	f7ee f9a3 	bl	478 <__aeabi_dmul>
   12132:	f7ee fc83 	bl	a3c <__aeabi_d2f>
   12136:	4606      	mov	r6, r0
        kvTemp[i] = kvTemp[i] + kvAvg;
   12138:	9801      	ldr	r0, [sp, #4]
   1213a:	f7ee fd89 	bl	c50 <__aeabi_i2f>
   1213e:	4631      	mov	r1, r6
   12140:	f7ee fcd2 	bl	ae8 <__addsf3>
        kvTemp[i] = kvTemp[i] / pow(2,(double)kvScale1);
   12144:	f7ee f940 	bl	3c8 <__aeabi_f2d>
   12148:	4606      	mov	r6, r0
   1214a:	460f      	mov	r7, r1
   1214c:	9802      	ldr	r0, [sp, #8]
   1214e:	f7ee f919 	bl	384 <__aeabi_ui2d>
   12152:	4602      	mov	r2, r0
   12154:	460b      	mov	r3, r1
   12156:	4640      	mov	r0, r8
   12158:	4649      	mov	r1, r9
   1215a:	f010 fa9d 	bl	22698 <pow>
   1215e:	4602      	mov	r2, r0
   12160:	460b      	mov	r3, r1
   12162:	4630      	mov	r0, r6
   12164:	4639      	mov	r1, r7
   12166:	f7ee fab1 	bl	6cc <__aeabi_ddiv>
   1216a:	f7ee fc67 	bl	a3c <__aeabi_d2f>
   1216e:	ab04      	add	r3, sp, #16
   12170:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    for(int i = 0; i < 192; i++)
   12174:	3401      	adds	r4, #1
   12176:	2cbf      	cmp	r4, #191	; 0xbf
   12178:	dc0f      	bgt.n	1219a <ExtractKvPixelParameters+0xca>
        tempKv = (eeData[448 + i] & 0x001F);
   1217a:	f504 73e0 	add.w	r3, r4, #448	; 0x1c0
   1217e:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
   12182:	f003 0b1f 	and.w	fp, r3, #31
        if (tempKv > 15)
   12186:	f003 0310 	and.w	r3, r3, #16
   1218a:	b21b      	sxth	r3, r3
   1218c:	2b00      	cmp	r3, #0
   1218e:	d0ba      	beq.n	12106 <ExtractKvPixelParameters+0x36>
            tempKv = tempKv - 32;
   12190:	f1ab 0b20 	sub.w	fp, fp, #32
   12194:	fa0f fb8b 	sxth.w	fp, fp
   12198:	e7b5      	b.n	12106 <ExtractKvPixelParameters+0x36>
   1219a:	f8dd a00c 	ldr.w	sl, [sp, #12]
    }
    
    temp = fabs(kvTemp[0]);
   1219e:	9804      	ldr	r0, [sp, #16]
   121a0:	f7ee f912 	bl	3c8 <__aeabi_f2d>
   121a4:	f010 fa2a 	bl	225fc <fabs>
   121a8:	f7ee fc48 	bl	a3c <__aeabi_d2f>
   121ac:	4681      	mov	r9, r0
    for(int i = 1; i < 192; i++)
   121ae:	f04f 0801 	mov.w	r8, #1
   121b2:	e008      	b.n	121c6 <ExtractKvPixelParameters+0xf6>
    {
        if (fabs(kvTemp[i]) > temp)
        {
            temp = fabs(kvTemp[i]);
   121b4:	4630      	mov	r0, r6
   121b6:	4639      	mov	r1, r7
   121b8:	f010 fa20 	bl	225fc <fabs>
   121bc:	f7ee fc3e 	bl	a3c <__aeabi_d2f>
   121c0:	4681      	mov	r9, r0
    for(int i = 1; i < 192; i++)
   121c2:	f108 0801 	add.w	r8, r8, #1
   121c6:	f1b8 0fbf 	cmp.w	r8, #191	; 0xbf
   121ca:	dc16      	bgt.n	121fa <ExtractKvPixelParameters+0x12a>
        if (fabs(kvTemp[i]) > temp)
   121cc:	ab04      	add	r3, sp, #16
   121ce:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
   121d2:	f7ee f8f9 	bl	3c8 <__aeabi_f2d>
   121d6:	4606      	mov	r6, r0
   121d8:	460f      	mov	r7, r1
   121da:	f010 fa0f 	bl	225fc <fabs>
   121de:	4604      	mov	r4, r0
   121e0:	460d      	mov	r5, r1
   121e2:	4648      	mov	r0, r9
   121e4:	f7ee f8f0 	bl	3c8 <__aeabi_f2d>
   121e8:	4602      	mov	r2, r0
   121ea:	460b      	mov	r3, r1
   121ec:	4620      	mov	r0, r4
   121ee:	4629      	mov	r1, r5
   121f0:	f7ee fbd2 	bl	998 <__aeabi_dcmpgt>
   121f4:	2800      	cmp	r0, #0
   121f6:	d0e4      	beq.n	121c2 <ExtractKvPixelParameters+0xf2>
   121f8:	e7dc      	b.n	121b4 <ExtractKvPixelParameters+0xe4>
        }
    }
    
    kvScale1 = 0;
   121fa:	f04f 0800 	mov.w	r8, #0
    while(temp < 64)
   121fe:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
   12202:	4648      	mov	r0, r9
   12204:	f7ee ff16 	bl	1034 <__aeabi_fcmplt>
   12208:	b148      	cbz	r0, 1221e <ExtractKvPixelParameters+0x14e>
    {
        temp = temp*2;
   1220a:	4649      	mov	r1, r9
   1220c:	4648      	mov	r0, r9
   1220e:	f7ee fc6b 	bl	ae8 <__addsf3>
   12212:	4681      	mov	r9, r0
        kvScale1 = kvScale1 + 1;
   12214:	f108 0801 	add.w	r8, r8, #1
   12218:	fa5f f888 	uxtb.w	r8, r8
   1221c:	e7ef      	b.n	121fe <ExtractKvPixelParameters+0x12e>
    }    
     
    for(int i = 0; i < 192; i++)
   1221e:	2400      	movs	r4, #0
   12220:	e00d      	b.n	1223e <ExtractKvPixelParameters+0x16e>
    {
        temp = kvTemp[i] * pow(2,(double)kvScale1);
        if (temp < 0)
        {
            mlx90641->kv[i] = (temp - 0.5);
   12222:	4628      	mov	r0, r5
   12224:	f7ee f8d0 	bl	3c8 <__aeabi_f2d>
   12228:	2200      	movs	r2, #0
   1222a:	4b1f      	ldr	r3, [pc, #124]	; (122a8 <ExtractKvPixelParameters+0x1d8>)
   1222c:	f7ed ff6c 	bl	108 <__aeabi_dsub>
   12230:	eb0a 0504 	add.w	r5, sl, r4
   12234:	f7ee fbba 	bl	9ac <__aeabi_d2iz>
   12238:	f885 059f 	strb.w	r0, [r5, #1439]	; 0x59f
    for(int i = 0; i < 192; i++)
   1223c:	3401      	adds	r4, #1
   1223e:	2cbf      	cmp	r4, #191	; 0xbf
   12240:	dc2c      	bgt.n	1229c <ExtractKvPixelParameters+0x1cc>
        temp = kvTemp[i] * pow(2,(double)kvScale1);
   12242:	ab04      	add	r3, sp, #16
   12244:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   12248:	f7ee f8be 	bl	3c8 <__aeabi_f2d>
   1224c:	4606      	mov	r6, r0
   1224e:	460f      	mov	r7, r1
   12250:	4640      	mov	r0, r8
   12252:	f7ee f897 	bl	384 <__aeabi_ui2d>
   12256:	4602      	mov	r2, r0
   12258:	460b      	mov	r3, r1
   1225a:	2000      	movs	r0, #0
   1225c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12260:	f010 fa1a 	bl	22698 <pow>
   12264:	4602      	mov	r2, r0
   12266:	460b      	mov	r3, r1
   12268:	4630      	mov	r0, r6
   1226a:	4639      	mov	r1, r7
   1226c:	f7ee f904 	bl	478 <__aeabi_dmul>
   12270:	f7ee fbe4 	bl	a3c <__aeabi_d2f>
   12274:	4605      	mov	r5, r0
        if (temp < 0)
   12276:	2100      	movs	r1, #0
   12278:	f7ee fedc 	bl	1034 <__aeabi_fcmplt>
   1227c:	2800      	cmp	r0, #0
   1227e:	d1d0      	bne.n	12222 <ExtractKvPixelParameters+0x152>
        }
        else
        {
            mlx90641->kv[i] = (temp + 0.5);
   12280:	4628      	mov	r0, r5
   12282:	f7ee f8a1 	bl	3c8 <__aeabi_f2d>
   12286:	2200      	movs	r2, #0
   12288:	4b07      	ldr	r3, [pc, #28]	; (122a8 <ExtractKvPixelParameters+0x1d8>)
   1228a:	f7ed ff3f 	bl	10c <__adddf3>
   1228e:	eb0a 0504 	add.w	r5, sl, r4
   12292:	f7ee fb8b 	bl	9ac <__aeabi_d2iz>
   12296:	f885 059f 	strb.w	r0, [r5, #1439]	; 0x59f
   1229a:	e7cf      	b.n	1223c <ExtractKvPixelParameters+0x16c>
        }        
        
    } 
    
    mlx90641->kvScale = kvScale1;        
   1229c:	f88a 865f 	strb.w	r8, [sl, #1631]	; 0x65f
}
   122a0:	f50d 7d45 	add.w	sp, sp, #788	; 0x314
   122a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122a8:	3fe00000 	.word	0x3fe00000

000122ac <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90641 *mlx90641)
{
   122ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   122b0:	4604      	mov	r4, r0
   122b2:	460e      	mov	r6, r1
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = eeData[46];
   122b4:	f890 805c 	ldrb.w	r8, [r0, #92]	; 0x5c
    
    offsetCP = 32 * eeData[47] + eeData[48];
   122b8:	f8b0 505e 	ldrh.w	r5, [r0, #94]	; 0x5e
   122bc:	016d      	lsls	r5, r5, #5
   122be:	f9b0 3060 	ldrsh.w	r3, [r0, #96]	; 0x60
   122c2:	fa03 f585 	sxtah	r5, r3, r5
   122c6:	b22d      	sxth	r5, r5
    if (offsetCP > 32767)
    {
        offsetCP = offsetCP - 65536;
    }
       
    alphaCP = eeData[45];
   122c8:	f8b0 905a 	ldrh.w	r9, [r0, #90]	; 0x5a
   122cc:	4648      	mov	r0, r9
   122ce:	f7ee fcbb 	bl	c48 <__aeabi_ui2f>
   122d2:	4607      	mov	r7, r0
    if (alphaCP > 1023)
   122d4:	f5b9 6f80 	cmp.w	r9, #1024	; 0x400
   122d8:	d304      	bcc.n	122e4 <ExtractCPParameters+0x38>
    {
        alphaCP = alphaCP - 2048;
   122da:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
   122de:	f7ee fc01 	bl	ae4 <__aeabi_fsub>
   122e2:	4607      	mov	r7, r0
    }
    
    alphaCP = alphaCP /  pow(2,(double)alphaScale);
   122e4:	4640      	mov	r0, r8
   122e6:	f7ee f84d 	bl	384 <__aeabi_ui2d>
   122ea:	4602      	mov	r2, r0
   122ec:	460b      	mov	r3, r1
   122ee:	2000      	movs	r0, #0
   122f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   122f4:	f010 f9d0 	bl	22698 <pow>
   122f8:	4680      	mov	r8, r0
   122fa:	4689      	mov	r9, r1
   122fc:	4638      	mov	r0, r7
   122fe:	f7ee f863 	bl	3c8 <__aeabi_f2d>
   12302:	4642      	mov	r2, r8
   12304:	464b      	mov	r3, r9
   12306:	f7ee f9e1 	bl	6cc <__aeabi_ddiv>
   1230a:	f7ee fb97 	bl	a3c <__aeabi_d2f>
   1230e:	4607      	mov	r7, r0
    
    
    cpKta = eeData[49] & 0x003F;
   12310:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
   12314:	f008 003f 	and.w	r0, r8, #63	; 0x3f
   12318:	f7ee fc9a 	bl	c50 <__aeabi_i2f>
   1231c:	4682      	mov	sl, r0
    if (cpKta > 31)
   1231e:	4927      	ldr	r1, [pc, #156]	; (123bc <ExtractCPParameters+0x110>)
   12320:	f7ee fea6 	bl	1070 <__aeabi_fcmpgt>
   12324:	b128      	cbz	r0, 12332 <ExtractCPParameters+0x86>
    {
        cpKta = cpKta - 64;
   12326:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
   1232a:	4650      	mov	r0, sl
   1232c:	f7ee fbda 	bl	ae4 <__aeabi_fsub>
   12330:	4682      	mov	sl, r0
    }
    ktaScale1 = eeData[49] >> 6;    
    mlx90641->cpKta = cpKta / pow(2,(double)ktaScale1);
   12332:	f3c8 1087 	ubfx	r0, r8, #6, #8
   12336:	f7ee f825 	bl	384 <__aeabi_ui2d>
   1233a:	4602      	mov	r2, r0
   1233c:	460b      	mov	r3, r1
   1233e:	2000      	movs	r0, #0
   12340:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12344:	f010 f9a8 	bl	22698 <pow>
   12348:	4680      	mov	r8, r0
   1234a:	4689      	mov	r9, r1
   1234c:	4650      	mov	r0, sl
   1234e:	f7ee f83b 	bl	3c8 <__aeabi_f2d>
   12352:	4642      	mov	r2, r8
   12354:	464b      	mov	r3, r9
   12356:	f7ee f9b9 	bl	6cc <__aeabi_ddiv>
   1235a:	f7ee fb6f 	bl	a3c <__aeabi_d2f>
   1235e:	6230      	str	r0, [r6, #32]
    
    cpKv = eeData[50] & 0x003F;
   12360:	f8b4 8064 	ldrh.w	r8, [r4, #100]	; 0x64
   12364:	f008 003f 	and.w	r0, r8, #63	; 0x3f
   12368:	f7ee fc72 	bl	c50 <__aeabi_i2f>
   1236c:	4604      	mov	r4, r0
    if (cpKv > 31)
   1236e:	4913      	ldr	r1, [pc, #76]	; (123bc <ExtractCPParameters+0x110>)
   12370:	f7ee fe7e 	bl	1070 <__aeabi_fcmpgt>
   12374:	b128      	cbz	r0, 12382 <ExtractCPParameters+0xd6>
    {
        cpKv = cpKv - 64;
   12376:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
   1237a:	4620      	mov	r0, r4
   1237c:	f7ee fbb2 	bl	ae4 <__aeabi_fsub>
   12380:	4604      	mov	r4, r0
    }
    kvScale = eeData[50] >> 6;
    mlx90641->cpKv = cpKv / pow(2,(double)kvScale);
   12382:	f3c8 1087 	ubfx	r0, r8, #6, #8
   12386:	f7ed fffd 	bl	384 <__aeabi_ui2d>
   1238a:	4602      	mov	r2, r0
   1238c:	460b      	mov	r3, r1
   1238e:	2000      	movs	r0, #0
   12390:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12394:	f010 f980 	bl	22698 <pow>
   12398:	4680      	mov	r8, r0
   1239a:	4689      	mov	r9, r1
   1239c:	4620      	mov	r0, r4
   1239e:	f7ee f813 	bl	3c8 <__aeabi_f2d>
   123a2:	4642      	mov	r2, r8
   123a4:	464b      	mov	r3, r9
   123a6:	f7ee f991 	bl	6cc <__aeabi_ddiv>
   123aa:	f7ee fb47 	bl	a3c <__aeabi_d2f>
   123ae:	61f0      	str	r0, [r6, #28]
       
    mlx90641->cpAlpha = alphaCP;
   123b0:	f8c6 7660 	str.w	r7, [r6, #1632]	; 0x660
    mlx90641->cpOffset = offsetCP;
   123b4:	f8a6 5664 	strh.w	r5, [r6, #1636]	; 0x664
}
   123b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   123bc:	41f80000 	.word	0x41f80000

000123c0 <MLX90641_I2CRead>:
    
    return 0;
}

int MLX90641_I2CRead(uint8_t slaveAddr, uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
   123c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   123c4:	f2ad 6da4 	subw	sp, sp, #1700	; 0x6a4
   123c8:	4605      	mov	r5, r0
   123ca:	460f      	mov	r7, r1
   123cc:	4616      	mov	r6, r2
   123ce:	461c      	mov	r4, r3
                           
    int ack = 0;                               
    int cnt = 0;
    int i = 0;
    char cmd[2] = {0,0};
    char i2cData[1664] = {0};
   123d0:	f10d 091c 	add.w	r9, sp, #28
   123d4:	f04f 0800 	mov.w	r8, #0
   123d8:	f8cd 801c 	str.w	r8, [sp, #28]
   123dc:	f240 627c 	movw	r2, #1660	; 0x67c
   123e0:	4641      	mov	r1, r8
   123e2:	a808      	add	r0, sp, #32
   123e4:	f016 f87c 	bl	284e0 <memset>
    uint16_t *p;
    
    p = data;
    cmd[0] = startAddress >> 8;
   123e8:	0a3b      	lsrs	r3, r7, #8
   123ea:	f88d 369c 	strb.w	r3, [sp, #1692]	; 0x69c
    cmd[1] = startAddress & 0x00FF;
   123ee:	f88d 769d 	strb.w	r7, [sp, #1693]	; 0x69d

    //ack = i2c_write(i2c_dev, cmd, 2, slaveAddr);     
    //ack = i2c_read(i2c_dev, i2cData, 2*nMemAddressRead, slaveAddr);
    ack = i2c_write_read(i2c_dev, slaveAddr, cmd, 2, i2cData, 2*nMemAddressRead);
   123f2:	4b17      	ldr	r3, [pc, #92]	; (12450 <MLX90641_I2CRead+0x90>)
   123f4:	6818      	ldr	r0, [r3, #0]
   123f6:	b2ab      	uxth	r3, r5
   123f8:	4635      	mov	r5, r6
   123fa:	0076      	lsls	r6, r6, #1
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   123fc:	f20d 629c 	addw	r2, sp, #1692	; 0x69c
   12400:	9201      	str	r2, [sp, #4]
	msg[0].len = num_write;
   12402:	2202      	movs	r2, #2
   12404:	9202      	str	r2, [sp, #8]
	msg[0].flags = I2C_MSG_WRITE;
   12406:	f88d 800c 	strb.w	r8, [sp, #12]

	msg[1].buf = (uint8_t *)read_buf;
   1240a:	f8cd 9010 	str.w	r9, [sp, #16]
	msg[1].len = num_read;
   1240e:	9605      	str	r6, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   12410:	2107      	movs	r1, #7
   12412:	f88d 1018 	strb.w	r1, [sp, #24]
	const struct i2c_driver_api *api =
   12416:	6881      	ldr	r1, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12418:	688e      	ldr	r6, [r1, #8]
   1241a:	a901      	add	r1, sp, #4
   1241c:	47b0      	blx	r6
    
    if (ack != 0x00)
   1241e:	b9a0      	cbnz	r0, 1244a <MLX90641_I2CRead+0x8a>
    {
        return -1; 
    }            
    
    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
   12420:	4602      	mov	r2, r0
   12422:	e00c      	b.n	1243e <MLX90641_I2CRead+0x7e>
    {
        i = cnt << 1;
   12424:	0053      	lsls	r3, r2, #1
        *p++ = (uint16_t)i2cData[i]*256 + (uint16_t)i2cData[i+1];
   12426:	ae07      	add	r6, sp, #28
   12428:	f816 7012 	ldrb.w	r7, [r6, r2, lsl #1]
   1242c:	3301      	adds	r3, #1
   1242e:	5cf1      	ldrb	r1, [r6, r3]
   12430:	4623      	mov	r3, r4
   12432:	eb01 2107 	add.w	r1, r1, r7, lsl #8
   12436:	f823 1b02 	strh.w	r1, [r3], #2
    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
   1243a:	3201      	adds	r2, #1
        *p++ = (uint16_t)i2cData[i]*256 + (uint16_t)i2cData[i+1];
   1243c:	461c      	mov	r4, r3
    for(cnt=0; cnt < nMemAddressRead; cnt++)    // this just turns uint8_t[2*nMemAddressRead] into uint16_t[nMemAddressRead]
   1243e:	4295      	cmp	r5, r2
   12440:	dcf0      	bgt.n	12424 <MLX90641_I2CRead+0x64>
    }
    
    return 0;   
} 
   12442:	f20d 6da4 	addw	sp, sp, #1700	; 0x6a4
   12446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1; 
   1244a:	f04f 30ff 	mov.w	r0, #4294967295
   1244e:	e7f8      	b.n	12442 <MLX90641_I2CRead+0x82>
   12450:	20001ff4 	.word	0x20001ff4

00012454 <MLX90641_I2CWrite>:
{
    
}

int MLX90641_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
   12454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12458:	b084      	sub	sp, #16
   1245a:	4606      	mov	r6, r0
   1245c:	460d      	mov	r5, r1
   1245e:	4614      	mov	r4, r2
    int ack = 0;
    char cmd[4] = {0,0,0,0};
    static uint16_t dataCheck;
    
    cmd[0] = writeAddress >> 8;
   12460:	0a0b      	lsrs	r3, r1, #8
   12462:	f88d 300c 	strb.w	r3, [sp, #12]
    cmd[1] = writeAddress & 0x00FF;
   12466:	f88d 100d 	strb.w	r1, [sp, #13]
    cmd[2] = data >> 8;
   1246a:	0a13      	lsrs	r3, r2, #8
   1246c:	f88d 300e 	strb.w	r3, [sp, #14]
    cmd[3] = data & 0x00FF;
   12470:	f88d 200f 	strb.w	r2, [sp, #15]
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   12474:	2001      	movs	r0, #1
   12476:	2100      	movs	r1, #0
   12478:	f00f fbc8 	bl	21c0c <z_impl_k_sleep>
    
    k_sleep(K_USEC(5));

    ack = i2c_write(i2c_dev, cmd, 4, slaveAddr);
   1247c:	4b12      	ldr	r3, [pc, #72]	; (124c8 <MLX90641_I2CWrite+0x74>)
   1247e:	6818      	ldr	r0, [r3, #0]
   12480:	b2b3      	uxth	r3, r6
	msg.buf = (uint8_t *)buf;
   12482:	aa03      	add	r2, sp, #12
   12484:	9200      	str	r2, [sp, #0]
	msg.len = num_bytes;
   12486:	2204      	movs	r2, #4
   12488:	9201      	str	r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1248a:	2202      	movs	r2, #2
   1248c:	f88d 2008 	strb.w	r2, [sp, #8]
	const struct i2c_driver_api *api =
   12490:	6882      	ldr	r2, [r0, #8]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   12492:	6897      	ldr	r7, [r2, #8]
   12494:	2201      	movs	r2, #1
   12496:	4669      	mov	r1, sp
   12498:	47b8      	blx	r7
    
    if (ack != 0x00)
   1249a:	b970      	cbnz	r0, 124ba <MLX90641_I2CWrite+0x66>
   1249c:	4680      	mov	r8, r0
    {
        return -1;
    }          
    
    MLX90641_I2CRead(slaveAddr, writeAddress, 1, &dataCheck);
   1249e:	4f0b      	ldr	r7, [pc, #44]	; (124cc <MLX90641_I2CWrite+0x78>)
   124a0:	463b      	mov	r3, r7
   124a2:	2201      	movs	r2, #1
   124a4:	4629      	mov	r1, r5
   124a6:	4630      	mov	r0, r6
   124a8:	f7ff ff8a 	bl	123c0 <MLX90641_I2CRead>
    
    if (dataCheck != data)
   124ac:	883b      	ldrh	r3, [r7, #0]
   124ae:	42a3      	cmp	r3, r4
   124b0:	d106      	bne.n	124c0 <MLX90641_I2CWrite+0x6c>
    {
        return -2;
    }    
    
    return 0;
   124b2:	4640      	mov	r0, r8
   124b4:	b004      	add	sp, #16
   124b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
   124ba:	f04f 38ff 	mov.w	r8, #4294967295
   124be:	e7f8      	b.n	124b2 <MLX90641_I2CWrite+0x5e>
        return -2;
   124c0:	f06f 0801 	mvn.w	r8, #1
   124c4:	e7f5      	b.n	124b2 <MLX90641_I2CWrite+0x5e>
   124c6:	bf00      	nop
   124c8:	20001ff4 	.word	0x20001ff4
   124cc:	20003c70 	.word	0x20003c70

000124d0 <temp_update>:
	bitset(connection_status, 0);*/

}

void temp_update(void)
{
   124d0:	b508      	push	{r3, lr}
   124d2:	e015      	b.n	12500 <temp_update+0x30>
   124d4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   124d8:	2100      	movs	r1, #0
   124da:	f00f fb97 	bl	21c0c <z_impl_k_sleep>
			case 0x04: 	k_sleep(K_USEC(1000000 / 8)); 	break;	// 8Hz
			case 0x05: 	k_sleep(K_USEC(1000000 / 16)); 	break;	// 16Hz
			case 0x06: 	k_sleep(K_USEC(1000000 / 32)); 	break;	// 32Hz
			case 0x07:	k_sleep(K_USEC(1000000 / 64)); 	break;	// 64Hz
		}
		if (bitcheck(connection_status, 1)) {	// if we just connected, do connect procedure
   124de:	4b31      	ldr	r3, [pc, #196]	; (125a4 <temp_update+0xd4>)
   124e0:	781b      	ldrb	r3, [r3, #0]
   124e2:	f013 0f02 	tst.w	r3, #2
   124e6:	d04d      	beq.n	12584 <temp_update+0xb4>
   124e8:	f44f 70a4 	mov.w	r0, #328	; 0x148
   124ec:	2100      	movs	r1, #0
   124ee:	f00f fb8d 	bl	21c0c <z_impl_k_sleep>

			//LOG_INF("Running connect procedure");
			// set VREG enable pin HIGH
			k_sleep(K_MSEC(10));	// let MLX90641 start up, supposedly needs 5ms?
			MLX90641_init();
   124f2:	f000 f8af 	bl	12654 <MLX90641_init>
			bitclear(connection_status, 1);		// clear connect procedure required bit
   124f6:	4a2b      	ldr	r2, [pc, #172]	; (125a4 <temp_update+0xd4>)
   124f8:	7813      	ldrb	r3, [r2, #0]
   124fa:	f023 0302 	bic.w	r3, r3, #2
   124fe:	7013      	strb	r3, [r2, #0]
		switch (temp_freq)
   12500:	4b29      	ldr	r3, [pc, #164]	; (125a8 <temp_update+0xd8>)
   12502:	781b      	ldrb	r3, [r3, #0]
   12504:	2b07      	cmp	r3, #7
   12506:	d8ea      	bhi.n	124de <temp_update+0xe>
   12508:	a201      	add	r2, pc, #4	; (adr r2, 12510 <temp_update+0x40>)
   1250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1250e:	bf00      	nop
   12510:	000124d5 	.word	0x000124d5
   12514:	00012531 	.word	0x00012531
   12518:	0001253d 	.word	0x0001253d
   1251c:	00012549 	.word	0x00012549
   12520:	00012555 	.word	0x00012555
   12524:	00012561 	.word	0x00012561
   12528:	0001256d 	.word	0x0001256d
   1252c:	00012579 	.word	0x00012579
   12530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12534:	2100      	movs	r1, #0
   12536:	f00f fb69 	bl	21c0c <z_impl_k_sleep>
			case 0x01: 	k_sleep(K_USEC(1000000)); 		break;	// 1Hz
   1253a:	e7d0      	b.n	124de <temp_update+0xe>
   1253c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
   12540:	2100      	movs	r1, #0
   12542:	f00f fb63 	bl	21c0c <z_impl_k_sleep>
			case 0x02: 	k_sleep(K_USEC(1000000 / 2)); 	break;	// 2Hz
   12546:	e7ca      	b.n	124de <temp_update+0xe>
   12548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
   1254c:	2100      	movs	r1, #0
   1254e:	f00f fb5d 	bl	21c0c <z_impl_k_sleep>
			case 0x03: 	k_sleep(K_USEC(1000000 / 4)); 	break;	// 4Hz
   12552:	e7c4      	b.n	124de <temp_update+0xe>
   12554:	f44f 5080 	mov.w	r0, #4096	; 0x1000
   12558:	2100      	movs	r1, #0
   1255a:	f00f fb57 	bl	21c0c <z_impl_k_sleep>
			case 0x04: 	k_sleep(K_USEC(1000000 / 8)); 	break;	// 8Hz
   1255e:	e7be      	b.n	124de <temp_update+0xe>
   12560:	f44f 6000 	mov.w	r0, #2048	; 0x800
   12564:	2100      	movs	r1, #0
   12566:	f00f fb51 	bl	21c0c <z_impl_k_sleep>
			case 0x05: 	k_sleep(K_USEC(1000000 / 16)); 	break;	// 16Hz
   1256a:	e7b8      	b.n	124de <temp_update+0xe>
   1256c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   12570:	2100      	movs	r1, #0
   12572:	f00f fb4b 	bl	21c0c <z_impl_k_sleep>
			case 0x06: 	k_sleep(K_USEC(1000000 / 32)); 	break;	// 32Hz
   12576:	e7b2      	b.n	124de <temp_update+0xe>
   12578:	f44f 7000 	mov.w	r0, #512	; 0x200
   1257c:	2100      	movs	r1, #0
   1257e:	f00f fb45 	bl	21c0c <z_impl_k_sleep>
			case 0x07:	k_sleep(K_USEC(1000000 / 64)); 	break;	// 64Hz
   12582:	e7ac      	b.n	124de <temp_update+0xe>

		} else if (bitcheck(connection_status, 0)) {	// if connected, take reading and update over bluetooth
   12584:	f013 0f01 	tst.w	r3, #1
   12588:	d107      	bne.n	1259a <temp_update+0xca>

			//LOG_INF("Running active connection procedure");
			temp_read();
			ttpms_temp_notify();

		} else if (bitcheck(connection_status, 2)) {	// if we just disconnected, do disconnect procedure
   1258a:	f013 0f04 	tst.w	r3, #4
   1258e:	d0b7      	beq.n	12500 <temp_update+0x30>

			//LOG_INF("Running disconnect procedure");
			// set VREG enable pin LOW
			bitclear(connection_status, 2);		// clear disconnect procedure required bit
   12590:	f023 0304 	bic.w	r3, r3, #4
   12594:	4a03      	ldr	r2, [pc, #12]	; (125a4 <temp_update+0xd4>)
   12596:	7013      	strb	r3, [r2, #0]
   12598:	e7b2      	b.n	12500 <temp_update+0x30>
			temp_read();
   1259a:	f000 f8f7 	bl	1278c <temp_read>
			ttpms_temp_notify();
   1259e:	f000 fbd5 	bl	12d4c <ttpms_temp_notify>
   125a2:	e7ad      	b.n	12500 <temp_update+0x30>
   125a4:	20003c74 	.word	0x20003c74
   125a8:	20000799 	.word	0x20000799

000125ac <pressure_update>:
		
	}
}

void pressure_update(void)
{
   125ac:	b538      	push	{r3, r4, r5, lr}
   125ae:	e003      	b.n	125b8 <pressure_update+0xc>
	while(1)
	{
		k_sleep(K_USEC(1000000 / pressure_freq));
		if (bitcheck(connection_status, 0))
		{
			pressure_read();
   125b0:	f000 f9dc 	bl	1296c <pressure_read>
			ttpms_pressure_notify();
   125b4:	f000 fbe2 	bl	12d7c <ttpms_pressure_notify>
		k_sleep(K_USEC(1000000 / pressure_freq));
   125b8:	4b0e      	ldr	r3, [pc, #56]	; (125f4 <pressure_update+0x48>)
   125ba:	781a      	ldrb	r2, [r3, #0]
   125bc:	4b0e      	ldr	r3, [pc, #56]	; (125f8 <pressure_update+0x4c>)
   125be:	fb93 f3f2 	sdiv	r3, r3, r2
   125c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   125c6:	17dd      	asrs	r5, r3, #31
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   125c8:	03e9      	lsls	r1, r5, #15
   125ca:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   125ce:	03d8      	lsls	r0, r3, #15
   125d0:	4c0a      	ldr	r4, [pc, #40]	; (125fc <pressure_update+0x50>)
   125d2:	4a09      	ldr	r2, [pc, #36]	; (125f8 <pressure_update+0x4c>)
   125d4:	2300      	movs	r3, #0
   125d6:	1900      	adds	r0, r0, r4
   125d8:	f04f 0400 	mov.w	r4, #0
   125dc:	eb44 0101 	adc.w	r1, r4, r1
   125e0:	f7ee fd50 	bl	1084 <__aeabi_uldivmod>
   125e4:	f00f fb12 	bl	21c0c <z_impl_k_sleep>
		if (bitcheck(connection_status, 0))
   125e8:	4b05      	ldr	r3, [pc, #20]	; (12600 <pressure_update+0x54>)
   125ea:	781b      	ldrb	r3, [r3, #0]
   125ec:	f013 0f01 	tst.w	r3, #1
   125f0:	d0e2      	beq.n	125b8 <pressure_update+0xc>
   125f2:	e7dd      	b.n	125b0 <pressure_update+0x4>
   125f4:	20000798 	.word	0x20000798
   125f8:	000f4240 	.word	0x000f4240
   125fc:	000f423f 	.word	0x000f423f
   12600:	20003c74 	.word	0x20003c74

00012604 <main>:
{
   12604:	b500      	push	{lr}
   12606:	b085      	sub	sp, #20
	LOG_INF("Running TTPMS Sensor on %s", CONFIG_BOARD);
   12608:	4b08      	ldr	r3, [pc, #32]	; (1262c <main+0x28>)
   1260a:	9302      	str	r3, [sp, #8]
   1260c:	4b08      	ldr	r3, [pc, #32]	; (12630 <main+0x2c>)
   1260e:	9301      	str	r3, [sp, #4]
   12610:	2000      	movs	r0, #0
   12612:	9000      	str	r0, [sp, #0]
   12614:	4603      	mov	r3, r0
   12616:	2203      	movs	r2, #3
   12618:	4906      	ldr	r1, [pc, #24]	; (12634 <main+0x30>)
   1261a:	f010 ff74 	bl	23506 <z_log_msg2_runtime_create>
	ttpms_service_init();	// start bluetooth
   1261e:	f000 fb5d 	bl	12cdc <ttpms_service_init>
	i2c_init();				// set up I2C
   12622:	f000 f809 	bl	12638 <i2c_init>
}
   12626:	b005      	add	sp, #20
   12628:	f85d fb04 	ldr.w	pc, [sp], #4
   1262c:	00028a98 	.word	0x00028a98
   12630:	00028aac 	.word	0x00028aac
   12634:	00028874 	.word	0x00028874

00012638 <i2c_init>:
uint8_t temp_freq = 0x05;

uint8_t pressure_freq = 20;	// frequency of pressure sensor updates in Hertz

void i2c_init(void)
{
   12638:	b508      	push	{r3, lr}
	i2c_dev = DEVICE_DT_GET(DT_NODELABEL(i2c0));
   1263a:	4804      	ldr	r0, [pc, #16]	; (1264c <i2c_init+0x14>)
   1263c:	4b04      	ldr	r3, [pc, #16]	; (12650 <i2c_init+0x18>)
   1263e:	6018      	str	r0, [r3, #0]
	const struct i2c_driver_api *api =
   12640:	6883      	ldr	r3, [r0, #8]
	return api->configure(dev, dev_config);
   12642:	681b      	ldr	r3, [r3, #0]
   12644:	2104      	movs	r1, #4
   12646:	4798      	blx	r3
    i2c_configure(i2c_dev, I2C_SPEED_SET(I2C_SPEED_FAST));
}
   12648:	bd08      	pop	{r3, pc}
   1264a:	bf00      	nop
   1264c:	0002868c 	.word	0x0002868c
   12650:	20001ff4 	.word	0x20001ff4

00012654 <MLX90641_init>:

void MLX90641_init(void)
{
   12654:	b500      	push	{lr}
   12656:	f2ad 6dd4 	subw	sp, sp, #1748	; 0x6d4

	int status;
	uint16_t eeMLX90641[832];

    status = MLX90641_DumpEE(MLX90641_ADDR, eeMLX90641);
   1265a:	a902      	add	r1, sp, #8
   1265c:	2033      	movs	r0, #51	; 0x33
   1265e:	f010 fcb1 	bl	22fc4 <MLX90641_DumpEE>
    if (status != 0) {
   12662:	b978      	cbnz	r0, 12684 <MLX90641_init+0x30>
        LOG_INF("Failed to load system parameters, MLX90641_DumpEE() returned %d", status);
    }
	
    status = MLX90641_ExtractParameters(eeMLX90641, &mlx90641);
   12664:	4943      	ldr	r1, [pc, #268]	; (12774 <MLX90641_init+0x120>)
   12666:	a802      	add	r0, sp, #8
   12668:	f010 ff0d 	bl	23486 <MLX90641_ExtractParameters>
    if (status != 0) {
   1266c:	bb90      	cbnz	r0, 126d4 <MLX90641_init+0x80>
        LOG_INF("Parameter extraction failed, MLX90641_ExtractParameters() returned %d", status);
    }

	status = MLX90641_SetRefreshRate(MLX90641_ADDR, temp_freq);
   1266e:	4b42      	ldr	r3, [pc, #264]	; (12778 <MLX90641_init+0x124>)
   12670:	7819      	ldrb	r1, [r3, #0]
   12672:	2033      	movs	r0, #51	; 0x33
   12674:	f010 fdec 	bl	23250 <MLX90641_SetRefreshRate>
	if (status != 0) {
   12678:	2800      	cmp	r0, #0
   1267a:	d153      	bne.n	12724 <MLX90641_init+0xd0>
        LOG_INF("Setting refresh rate failed, MLX90641_SetRefreshRate() returned %d", status);
    }
}
   1267c:	f20d 6dd4 	addw	sp, sp, #1748	; 0x6d4
   12680:	f85d fb04 	ldr.w	pc, [sp], #4
        LOG_INF("Failed to load system parameters, MLX90641_DumpEE() returned %d", status);
   12684:	4a3d      	ldr	r2, [pc, #244]	; (1277c <MLX90641_init+0x128>)
   12686:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
   1268a:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
   1268e:	2300      	movs	r3, #0
   12690:	f8ad 3005 	strh.w	r3, [sp, #5]
   12694:	f88d 3007 	strb.w	r3, [sp, #7]
   12698:	2103      	movs	r1, #3
   1269a:	f88d 1004 	strb.w	r1, [sp, #4]
   1269e:	f88d 3006 	strb.w	r3, [sp, #6]
   126a2:	9a01      	ldr	r2, [sp, #4]
   126a4:	f8cd 2694 	str.w	r2, [sp, #1684]	; 0x694
   126a8:	461a      	mov	r2, r3
   126aa:	f363 0200 	bfi	r2, r3, #0, #1
   126ae:	f363 0241 	bfi	r2, r3, #1, #1
   126b2:	f363 0282 	bfi	r2, r3, #2, #1
   126b6:	f363 02c5 	bfi	r2, r3, #3, #3
   126ba:	f361 1288 	bfi	r2, r1, #6, #3
   126be:	210c      	movs	r1, #12
   126c0:	f361 2252 	bfi	r2, r1, #9, #10
   126c4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   126c8:	492d      	ldr	r1, [pc, #180]	; (12780 <MLX90641_init+0x12c>)
   126ca:	f50d 60d1 	add.w	r0, sp, #1672	; 0x688
   126ce:	f011 fc3d 	bl	23f4c <z_log_msg2_finalize>
   126d2:	e7c7      	b.n	12664 <MLX90641_init+0x10>
        LOG_INF("Parameter extraction failed, MLX90641_ExtractParameters() returned %d", status);
   126d4:	4a2b      	ldr	r2, [pc, #172]	; (12784 <MLX90641_init+0x130>)
   126d6:	f8cd 26b0 	str.w	r2, [sp, #1712]	; 0x6b0
   126da:	f8cd 06b4 	str.w	r0, [sp, #1716]	; 0x6b4
   126de:	2300      	movs	r3, #0
   126e0:	f8ad 3005 	strh.w	r3, [sp, #5]
   126e4:	f88d 3007 	strb.w	r3, [sp, #7]
   126e8:	2103      	movs	r1, #3
   126ea:	f88d 1004 	strb.w	r1, [sp, #4]
   126ee:	f88d 3006 	strb.w	r3, [sp, #6]
   126f2:	9a01      	ldr	r2, [sp, #4]
   126f4:	f8cd 26ac 	str.w	r2, [sp, #1708]	; 0x6ac
   126f8:	461a      	mov	r2, r3
   126fa:	f363 0200 	bfi	r2, r3, #0, #1
   126fe:	f363 0241 	bfi	r2, r3, #1, #1
   12702:	f363 0282 	bfi	r2, r3, #2, #1
   12706:	f363 02c5 	bfi	r2, r3, #3, #3
   1270a:	f361 1288 	bfi	r2, r1, #6, #3
   1270e:	210c      	movs	r1, #12
   12710:	f361 2252 	bfi	r2, r1, #9, #10
   12714:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12718:	4919      	ldr	r1, [pc, #100]	; (12780 <MLX90641_init+0x12c>)
   1271a:	f50d 60d4 	add.w	r0, sp, #1696	; 0x6a0
   1271e:	f011 fc15 	bl	23f4c <z_log_msg2_finalize>
   12722:	e7a4      	b.n	1266e <MLX90641_init+0x1a>
        LOG_INF("Setting refresh rate failed, MLX90641_SetRefreshRate() returned %d", status);
   12724:	4a18      	ldr	r2, [pc, #96]	; (12788 <MLX90641_init+0x134>)
   12726:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
   1272a:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
   1272e:	2300      	movs	r3, #0
   12730:	f8ad 3005 	strh.w	r3, [sp, #5]
   12734:	f88d 3007 	strb.w	r3, [sp, #7]
   12738:	2103      	movs	r1, #3
   1273a:	f88d 1004 	strb.w	r1, [sp, #4]
   1273e:	f88d 3006 	strb.w	r3, [sp, #6]
   12742:	9a01      	ldr	r2, [sp, #4]
   12744:	f8cd 26c4 	str.w	r2, [sp, #1732]	; 0x6c4
   12748:	461a      	mov	r2, r3
   1274a:	f363 0200 	bfi	r2, r3, #0, #1
   1274e:	f363 0241 	bfi	r2, r3, #1, #1
   12752:	f363 0282 	bfi	r2, r3, #2, #1
   12756:	f363 02c5 	bfi	r2, r3, #3, #3
   1275a:	f361 1288 	bfi	r2, r1, #6, #3
   1275e:	210c      	movs	r1, #12
   12760:	f361 2252 	bfi	r2, r1, #9, #10
   12764:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12768:	4905      	ldr	r1, [pc, #20]	; (12780 <MLX90641_init+0x12c>)
   1276a:	f50d 60d7 	add.w	r0, sp, #1720	; 0x6b8
   1276e:	f011 fbed 	bl	23f4c <z_log_msg2_finalize>
}
   12772:	e783      	b.n	1267c <MLX90641_init+0x28>
   12774:	20001ff8 	.word	0x20001ff8
   12778:	20000799 	.word	0x20000799
   1277c:	00028af4 	.word	0x00028af4
   12780:	00028874 	.word	0x00028874
   12784:	00028b34 	.word	0x00028b34
   12788:	00028b7c 	.word	0x00028b7c

0001278c <temp_read>:

void temp_read(void)
{
   1278c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1278e:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
	int status;

	uint16_t mlx90641Frame[242];
	status = MLX90641_GetFrameData(MLX90641_ADDR, mlx90641Frame);
   12792:	a903      	add	r1, sp, #12
   12794:	2033      	movs	r0, #51	; 0x33
   12796:	f010 fc76 	bl	23086 <MLX90641_GetFrameData>
	if (status < 0) {
   1279a:	2800      	cmp	r0, #0
   1279c:	db6a      	blt.n	12874 <temp_read+0xe8>
		LOG_INF("GetFrame Error: %d", status);
	}

	vdd = MLX90641_GetVdd(mlx90641Frame, &mlx90641);
   1279e:	4c63      	ldr	r4, [pc, #396]	; (1292c <temp_read+0x1a0>)
   127a0:	4621      	mov	r1, r4
   127a2:	a803      	add	r0, sp, #12
   127a4:	f7fe f84c 	bl	10840 <MLX90641_GetVdd>
   127a8:	4b61      	ldr	r3, [pc, #388]	; (12930 <temp_read+0x1a4>)
   127aa:	6018      	str	r0, [r3, #0]
	battery = round(vdd)*100;
   127ac:	f7ed fe0c 	bl	3c8 <__aeabi_f2d>
   127b0:	f00f ff28 	bl	22604 <round>
   127b4:	2200      	movs	r2, #0
   127b6:	4b5f      	ldr	r3, [pc, #380]	; (12934 <temp_read+0x1a8>)
   127b8:	f7ed fe5e 	bl	478 <__aeabi_dmul>
   127bc:	f7ee f91e 	bl	9fc <__aeabi_d2uiz>
   127c0:	4b5d      	ldr	r3, [pc, #372]	; (12938 <temp_read+0x1ac>)
   127c2:	8018      	strh	r0, [r3, #0]

	Ta = MLX90641_GetTa(mlx90641Frame, &mlx90641);
   127c4:	4621      	mov	r1, r4
   127c6:	a803      	add	r0, sp, #12
   127c8:	f7fe f89a 	bl	10900 <MLX90641_GetTa>
   127cc:	4b5b      	ldr	r3, [pc, #364]	; (1293c <temp_read+0x1b0>)
   127ce:	6018      	str	r0, [r3, #0]

	float tr = Ta - ta_shift; //Reflected temperature based on the sensor ambient temperature
   127d0:	4b5b      	ldr	r3, [pc, #364]	; (12940 <temp_read+0x1b4>)
   127d2:	6819      	ldr	r1, [r3, #0]
   127d4:	f7ee f986 	bl	ae4 <__aeabi_fsub>
   127d8:	4603      	mov	r3, r0

	MLX90641_CalculateTo(mlx90641Frame, &mlx90641, emissivity, tr, mlx90641To);
   127da:	4a5a      	ldr	r2, [pc, #360]	; (12944 <temp_read+0x1b8>)
   127dc:	9200      	str	r2, [sp, #0]
   127de:	4a5a      	ldr	r2, [pc, #360]	; (12948 <temp_read+0x1bc>)
   127e0:	6812      	ldr	r2, [r2, #0]
   127e2:	4621      	mov	r1, r4
   127e4:	a803      	add	r0, sp, #12
   127e6:	f7fe f913 	bl	10a10 <MLX90641_CalculateTo>

	// Average nearby pixels to get the 12 measurement points
	// Only middle four rows are used. Rightmost column is not used.
	// Also converts float to offset int system (see temp[] comment)
	for (int i = 0; i < 12; i++)
   127ea:	2400      	movs	r4, #0
   127ec:	2c0b      	cmp	r4, #11
   127ee:	dc65      	bgt.n	128bc <temp_read+0x130>
	{
		temp[i] = round(((	mlx90641To[64 + i] + mlx90641To[65 + i] +
   127f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   127f4:	4d53      	ldr	r5, [pc, #332]	; (12944 <temp_read+0x1b8>)
   127f6:	f104 0241 	add.w	r2, r4, #65	; 0x41
   127fa:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
   127fe:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
   12802:	f7ee f971 	bl	ae8 <__addsf3>
			   				mlx90641To[80 + i] + mlx90641To[81 + i] +
   12806:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1280a:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
		temp[i] = round(((	mlx90641To[64 + i] + mlx90641To[65 + i] +
   1280e:	4639      	mov	r1, r7
   12810:	f7ee f96a 	bl	ae8 <__addsf3>
			   				mlx90641To[80 + i] + mlx90641To[81 + i] +
   12814:	f104 0351 	add.w	r3, r4, #81	; 0x51
   12818:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
   1281c:	4631      	mov	r1, r6
   1281e:	f7ee f963 	bl	ae8 <__addsf3>
			   		 		mlx90641To[96 + i] + mlx90641To[97 + i] +
   12822:	f104 0360 	add.w	r3, r4, #96	; 0x60
			   				mlx90641To[80 + i] + mlx90641To[81 + i] +
   12826:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   1282a:	f7ee f95d 	bl	ae8 <__addsf3>
			   		 		mlx90641To[96 + i] + mlx90641To[97 + i] +
   1282e:	f104 0361 	add.w	r3, r4, #97	; 0x61
   12832:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   12836:	f7ee f957 	bl	ae8 <__addsf3>
   1283a:	4601      	mov	r1, r0
   1283c:	4638      	mov	r0, r7
   1283e:	f7ee f953 	bl	ae8 <__addsf3>
   12842:	4601      	mov	r1, r0
			   		 		mlx90641To[80 + i] + mlx90641To[81 + i]) / 8 + 20) * 100);
   12844:	4630      	mov	r0, r6
   12846:	f7ee f94f 	bl	ae8 <__addsf3>
   1284a:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
   1284e:	f7ee fa53 	bl	cf8 <__aeabi_fmul>
   12852:	493e      	ldr	r1, [pc, #248]	; (1294c <temp_read+0x1c0>)
   12854:	f7ee f948 	bl	ae8 <__addsf3>
   12858:	493d      	ldr	r1, [pc, #244]	; (12950 <temp_read+0x1c4>)
   1285a:	f7ee fa4d 	bl	cf8 <__aeabi_fmul>
		temp[i] = round(((	mlx90641To[64 + i] + mlx90641To[65 + i] +
   1285e:	f7ed fdb3 	bl	3c8 <__aeabi_f2d>
   12862:	f00f fecf 	bl	22604 <round>
   12866:	f7ee f8c9 	bl	9fc <__aeabi_d2uiz>
   1286a:	4b3a      	ldr	r3, [pc, #232]	; (12954 <temp_read+0x1c8>)
   1286c:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
	for (int i = 0; i < 12; i++)
   12870:	3401      	adds	r4, #1
   12872:	e7bb      	b.n	127ec <temp_read+0x60>
		LOG_INF("GetFrame Error: %d", status);
   12874:	4b38      	ldr	r3, [pc, #224]	; (12958 <temp_read+0x1cc>)
   12876:	9380      	str	r3, [sp, #512]	; 0x200
   12878:	9081      	str	r0, [sp, #516]	; 0x204
   1287a:	2300      	movs	r3, #0
   1287c:	f8ad 3009 	strh.w	r3, [sp, #9]
   12880:	f88d 300b 	strb.w	r3, [sp, #11]
   12884:	2103      	movs	r1, #3
   12886:	f88d 1008 	strb.w	r1, [sp, #8]
   1288a:	f88d 300a 	strb.w	r3, [sp, #10]
   1288e:	9a02      	ldr	r2, [sp, #8]
   12890:	927f      	str	r2, [sp, #508]	; 0x1fc
   12892:	461a      	mov	r2, r3
   12894:	f363 0200 	bfi	r2, r3, #0, #1
   12898:	f363 0241 	bfi	r2, r3, #1, #1
   1289c:	f363 0282 	bfi	r2, r3, #2, #1
   128a0:	f363 02c5 	bfi	r2, r3, #3, #3
   128a4:	f361 1288 	bfi	r2, r1, #6, #3
   128a8:	210c      	movs	r1, #12
   128aa:	f361 2252 	bfi	r2, r1, #9, #10
   128ae:	f3c2 0212 	ubfx	r2, r2, #0, #19
   128b2:	492a      	ldr	r1, [pc, #168]	; (1295c <temp_read+0x1d0>)
   128b4:	a87c      	add	r0, sp, #496	; 0x1f0
   128b6:	f011 fb49 	bl	23f4c <z_log_msg2_finalize>
   128ba:	e770      	b.n	1279e <temp_read+0x12>
	}
	//LOG_INF("temp[12]: %d %d %d %d %d %d %d %d %d %d %d %d", temp[0], temp[1], temp[2], temp[3], temp[4], temp[5],
	//														 temp[6], temp[7], temp[8], temp[9], temp[10], temp[11]);

	if (bitcheck(connection_status, 3))	// check if MLX90641 refresh rate needs to be updated
   128bc:	4b28      	ldr	r3, [pc, #160]	; (12960 <temp_read+0x1d4>)
   128be:	781b      	ldrb	r3, [r3, #0]
   128c0:	f013 0f08 	tst.w	r3, #8
   128c4:	d102      	bne.n	128cc <temp_read+0x140>
    	} else {
			bitclear(connection_status, 3);
		}
	}
    
}
   128c6:	f50d 7d09 	add.w	sp, sp, #548	; 0x224
   128ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		status = MLX90641_SetRefreshRate(MLX90641_ADDR, temp_freq);
   128cc:	4b25      	ldr	r3, [pc, #148]	; (12964 <temp_read+0x1d8>)
   128ce:	7819      	ldrb	r1, [r3, #0]
   128d0:	2033      	movs	r0, #51	; 0x33
   128d2:	f010 fcbd 	bl	23250 <MLX90641_SetRefreshRate>
		if (status != 0) {
   128d6:	b928      	cbnz	r0, 128e4 <temp_read+0x158>
			bitclear(connection_status, 3);
   128d8:	4a21      	ldr	r2, [pc, #132]	; (12960 <temp_read+0x1d4>)
   128da:	7813      	ldrb	r3, [r2, #0]
   128dc:	f023 0308 	bic.w	r3, r3, #8
   128e0:	7013      	strb	r3, [r2, #0]
}
   128e2:	e7f0      	b.n	128c6 <temp_read+0x13a>
        	LOG_INF("Setting refresh rate failed, MLX90641_SetRefreshRate() returned %d", status);
   128e4:	4a20      	ldr	r2, [pc, #128]	; (12968 <temp_read+0x1dc>)
   128e6:	9286      	str	r2, [sp, #536]	; 0x218
   128e8:	9087      	str	r0, [sp, #540]	; 0x21c
   128ea:	2300      	movs	r3, #0
   128ec:	f8ad 3009 	strh.w	r3, [sp, #9]
   128f0:	f88d 300b 	strb.w	r3, [sp, #11]
   128f4:	2103      	movs	r1, #3
   128f6:	f88d 1008 	strb.w	r1, [sp, #8]
   128fa:	f88d 300a 	strb.w	r3, [sp, #10]
   128fe:	9a02      	ldr	r2, [sp, #8]
   12900:	9285      	str	r2, [sp, #532]	; 0x214
   12902:	461a      	mov	r2, r3
   12904:	f363 0200 	bfi	r2, r3, #0, #1
   12908:	f363 0241 	bfi	r2, r3, #1, #1
   1290c:	f363 0282 	bfi	r2, r3, #2, #1
   12910:	f363 02c5 	bfi	r2, r3, #3, #3
   12914:	f361 1288 	bfi	r2, r1, #6, #3
   12918:	210c      	movs	r1, #12
   1291a:	f361 2252 	bfi	r2, r1, #9, #10
   1291e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12922:	490e      	ldr	r1, [pc, #56]	; (1295c <temp_read+0x1d0>)
   12924:	a882      	add	r0, sp, #520	; 0x208
   12926:	f011 fb11 	bl	23f4c <z_log_msg2_finalize>
   1292a:	e7cc      	b.n	128c6 <temp_read+0x13a>
   1292c:	20001ff8 	.word	0x20001ff8
   12930:	20002968 	.word	0x20002968
   12934:	40590000 	.word	0x40590000
   12938:	20000794 	.word	0x20000794
   1293c:	20001ff0 	.word	0x20001ff0
   12940:	20000464 	.word	0x20000464
   12944:	20002668 	.word	0x20002668
   12948:	20000460 	.word	0x20000460
   1294c:	41a00000 	.word	0x41a00000
   12950:	42c80000 	.word	0x42c80000
   12954:	20000468 	.word	0x20000468
   12958:	00028bc0 	.word	0x00028bc0
   1295c:	00028874 	.word	0x00028874
   12960:	20003c74 	.word	0x20003c74
   12964:	20000799 	.word	0x20000799
   12968:	00028b7c 	.word	0x00028b7c

0001296c <pressure_read>:

void pressure_read(void)
{
    pressure++;
   1296c:	4a02      	ldr	r2, [pc, #8]	; (12978 <pressure_read+0xc>)
   1296e:	8813      	ldrh	r3, [r2, #0]
   12970:	3301      	adds	r3, #1
   12972:	8013      	strh	r3, [r2, #0]
   12974:	4770      	bx	lr
   12976:	bf00      	nop
   12978:	20000796 	.word	0x20000796

0001297c <write_temp_freq>:
				 sizeof(temp_freq));
}

static ssize_t write_temp_freq(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			 const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   1297c:	b570      	push	{r4, r5, r6, lr}
   1297e:	4608      	mov	r0, r1
   12980:	4611      	mov	r1, r2
   12982:	461c      	mov	r4, r3
   12984:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	uint8_t *value = attr->user_data;	// pointer to temp_freq variable?
   12988:	68c6      	ldr	r6, [r0, #12]
   1298a:	461a      	mov	r2, r3
   1298c:	1970      	adds	r0, r6, r5
   1298e:	f015 fd86 	bl	2849e <memcpy>
	memcpy(value + offset, buf, len);	// write data from BLE into temp_freq variable?
	value[offset + len] = 0;
   12992:	4425      	add	r5, r4
   12994:	2300      	movs	r3, #0
   12996:	5573      	strb	r3, [r6, r5]
	bitset(connection_status, 3);	// set temp_freq update required bit
   12998:	4a03      	ldr	r2, [pc, #12]	; (129a8 <write_temp_freq+0x2c>)
   1299a:	7813      	ldrb	r3, [r2, #0]
   1299c:	f043 0308 	orr.w	r3, r3, #8
   129a0:	7013      	strb	r3, [r2, #0]
	return len;
}
   129a2:	4620      	mov	r0, r4
   129a4:	bd70      	pop	{r4, r5, r6, pc}
   129a6:	bf00      	nop
   129a8:	20003c74 	.word	0x20003c74

000129ac <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),	// General Discoverable (no timeout), BR/EDR not supported
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, TTPMS_BASE_UUID),					// Our service
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   129ac:	b5b0      	push	{r4, r5, r7, lr}
   129ae:	b082      	sub	sp, #8
   129b0:	af00      	add	r7, sp, #0
	LOG_INF("Updated MTU: TX: %d RX: %d bytes", tx, rx);
   129b2:	b088      	sub	sp, #32
   129b4:	4668      	mov	r0, sp
   129b6:	f110 030c 	adds.w	r3, r0, #12
   129ba:	d033      	beq.n	12a24 <mtu_updated+0x78>
   129bc:	2410      	movs	r4, #16
   129be:	b11b      	cbz	r3, 129c8 <mtu_updated+0x1c>
   129c0:	2c04      	cmp	r4, #4
   129c2:	dd01      	ble.n	129c8 <mtu_updated+0x1c>
   129c4:	4d1a      	ldr	r5, [pc, #104]	; (12a30 <mtu_updated+0x84>)
   129c6:	6105      	str	r5, [r0, #16]
   129c8:	b113      	cbz	r3, 129d0 <mtu_updated+0x24>
   129ca:	2c08      	cmp	r4, #8
   129cc:	dd00      	ble.n	129d0 <mtu_updated+0x24>
   129ce:	6141      	str	r1, [r0, #20]
   129d0:	b113      	cbz	r3, 129d8 <mtu_updated+0x2c>
   129d2:	2c0c      	cmp	r4, #12
   129d4:	dd00      	ble.n	129d8 <mtu_updated+0x2c>
   129d6:	6182      	str	r2, [r0, #24]
   129d8:	2c0f      	cmp	r4, #15
   129da:	dd26      	ble.n	12a2a <mtu_updated+0x7e>
   129dc:	2110      	movs	r1, #16
   129de:	b143      	cbz	r3, 129f2 <mtu_updated+0x46>
   129e0:	2300      	movs	r3, #0
   129e2:	f8a7 3005 	strh.w	r3, [r7, #5]
   129e6:	71fb      	strb	r3, [r7, #7]
   129e8:	2204      	movs	r2, #4
   129ea:	713a      	strb	r2, [r7, #4]
   129ec:	71bb      	strb	r3, [r7, #6]
   129ee:	687b      	ldr	r3, [r7, #4]
   129f0:	60c3      	str	r3, [r0, #12]
   129f2:	2200      	movs	r2, #0
   129f4:	f36f 0200 	bfc	r2, #0, #1
   129f8:	f36f 0241 	bfc	r2, #1, #1
   129fc:	f36f 0282 	bfc	r2, #2, #1
   12a00:	f36f 02c5 	bfc	r2, #3, #3
   12a04:	2303      	movs	r3, #3
   12a06:	f363 1288 	bfi	r2, r3, #6, #3
   12a0a:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   12a0e:	f363 2252 	bfi	r2, r3, #9, #10
   12a12:	2300      	movs	r3, #0
   12a14:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12a18:	4906      	ldr	r1, [pc, #24]	; (12a34 <mtu_updated+0x88>)
   12a1a:	f011 fa97 	bl	23f4c <z_log_msg2_finalize>
}
   12a1e:	3708      	adds	r7, #8
   12a20:	46bd      	mov	sp, r7
   12a22:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_INF("Updated MTU: TX: %d RX: %d bytes", tx, rx);
   12a24:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   12a28:	e7c9      	b.n	129be <mtu_updated+0x12>
   12a2a:	f06f 011b 	mvn.w	r1, #27
   12a2e:	e7d6      	b.n	129de <mtu_updated+0x32>
   12a30:	00028bd4 	.word	0x00028bd4
   12a34:	00028874 	.word	0x00028874

00012a38 <disconnected>:
		bitset(connection_status, 0);	// set connection status bit (0th bit)
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   12a38:	b500      	push	{lr}
   12a3a:	b089      	sub	sp, #36	; 0x24
	LOG_INF("Disconnected (reason 0x%02x)", reason);
   12a3c:	4b16      	ldr	r3, [pc, #88]	; (12a98 <disconnected+0x60>)
   12a3e:	9306      	str	r3, [sp, #24]
   12a40:	9107      	str	r1, [sp, #28]
   12a42:	2300      	movs	r3, #0
   12a44:	f8ad 3005 	strh.w	r3, [sp, #5]
   12a48:	f88d 3007 	strb.w	r3, [sp, #7]
   12a4c:	2103      	movs	r1, #3
   12a4e:	f88d 1004 	strb.w	r1, [sp, #4]
   12a52:	f88d 3006 	strb.w	r3, [sp, #6]
   12a56:	9a01      	ldr	r2, [sp, #4]
   12a58:	9205      	str	r2, [sp, #20]
   12a5a:	461a      	mov	r2, r3
   12a5c:	f363 0200 	bfi	r2, r3, #0, #1
   12a60:	f363 0241 	bfi	r2, r3, #1, #1
   12a64:	f363 0282 	bfi	r2, r3, #2, #1
   12a68:	f363 02c5 	bfi	r2, r3, #3, #3
   12a6c:	f361 1288 	bfi	r2, r1, #6, #3
   12a70:	210c      	movs	r1, #12
   12a72:	f361 2252 	bfi	r2, r1, #9, #10
   12a76:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12a7a:	4908      	ldr	r1, [pc, #32]	; (12a9c <disconnected+0x64>)
   12a7c:	a802      	add	r0, sp, #8
   12a7e:	f011 fa65 	bl	23f4c <z_log_msg2_finalize>
	bitclear(connection_status, 0);	// clear connection status bit (0th bit)
   12a82:	4a07      	ldr	r2, [pc, #28]	; (12aa0 <disconnected+0x68>)
   12a84:	7813      	ldrb	r3, [r2, #0]
   12a86:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
	bitset(connection_status, 2);	// set disconnection procedure required bit (2th bit)
   12a8a:	f043 0304 	orr.w	r3, r3, #4
   12a8e:	7013      	strb	r3, [r2, #0]
}
   12a90:	b009      	add	sp, #36	; 0x24
   12a92:	f85d fb04 	ldr.w	pc, [sp], #4
   12a96:	bf00      	nop
   12a98:	00028bf8 	.word	0x00028bf8
   12a9c:	00028874 	.word	0x00028874
   12aa0:	20003c74 	.word	0x20003c74

00012aa4 <connected>:
{
   12aa4:	b500      	push	{lr}
   12aa6:	b08f      	sub	sp, #60	; 0x3c
	if (err) {
   12aa8:	b329      	cbz	r1, 12af6 <connected+0x52>
		LOG_INF("Connection failed (err 0x%02x)", err);
   12aaa:	4a27      	ldr	r2, [pc, #156]	; (12b48 <connected+0xa4>)
   12aac:	920c      	str	r2, [sp, #48]	; 0x30
   12aae:	910d      	str	r1, [sp, #52]	; 0x34
   12ab0:	2300      	movs	r3, #0
   12ab2:	f8ad 3005 	strh.w	r3, [sp, #5]
   12ab6:	f88d 3007 	strb.w	r3, [sp, #7]
   12aba:	2103      	movs	r1, #3
   12abc:	f88d 1004 	strb.w	r1, [sp, #4]
   12ac0:	f88d 3006 	strb.w	r3, [sp, #6]
   12ac4:	9a01      	ldr	r2, [sp, #4]
   12ac6:	920b      	str	r2, [sp, #44]	; 0x2c
   12ac8:	461a      	mov	r2, r3
   12aca:	f363 0200 	bfi	r2, r3, #0, #1
   12ace:	f363 0241 	bfi	r2, r3, #1, #1
   12ad2:	f363 0282 	bfi	r2, r3, #2, #1
   12ad6:	f363 02c5 	bfi	r2, r3, #3, #3
   12ada:	f361 1288 	bfi	r2, r1, #6, #3
   12ade:	210c      	movs	r1, #12
   12ae0:	f361 2252 	bfi	r2, r1, #9, #10
   12ae4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12ae8:	4918      	ldr	r1, [pc, #96]	; (12b4c <connected+0xa8>)
   12aea:	a808      	add	r0, sp, #32
   12aec:	f011 fa2e 	bl	23f4c <z_log_msg2_finalize>
}
   12af0:	b00f      	add	sp, #60	; 0x3c
   12af2:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("Connected");
   12af6:	4b16      	ldr	r3, [pc, #88]	; (12b50 <connected+0xac>)
   12af8:	9306      	str	r3, [sp, #24]
   12afa:	2300      	movs	r3, #0
   12afc:	f8ad 3005 	strh.w	r3, [sp, #5]
   12b00:	f88d 3007 	strb.w	r3, [sp, #7]
   12b04:	2202      	movs	r2, #2
   12b06:	f88d 2004 	strb.w	r2, [sp, #4]
   12b0a:	f88d 3006 	strb.w	r3, [sp, #6]
   12b0e:	9a01      	ldr	r2, [sp, #4]
   12b10:	9205      	str	r2, [sp, #20]
   12b12:	461a      	mov	r2, r3
   12b14:	f363 0200 	bfi	r2, r3, #0, #1
   12b18:	f363 0241 	bfi	r2, r3, #1, #1
   12b1c:	f363 0282 	bfi	r2, r3, #2, #1
   12b20:	f363 02c5 	bfi	r2, r3, #3, #3
   12b24:	2103      	movs	r1, #3
   12b26:	f361 1288 	bfi	r2, r1, #6, #3
   12b2a:	2108      	movs	r1, #8
   12b2c:	f361 2252 	bfi	r2, r1, #9, #10
   12b30:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12b34:	4905      	ldr	r1, [pc, #20]	; (12b4c <connected+0xa8>)
   12b36:	a802      	add	r0, sp, #8
   12b38:	f011 fa08 	bl	23f4c <z_log_msg2_finalize>
		bitset(connection_status, 1);	// set connection procedure required bit (1th bit)
   12b3c:	4a05      	ldr	r2, [pc, #20]	; (12b54 <connected+0xb0>)
   12b3e:	7813      	ldrb	r3, [r2, #0]
		bitset(connection_status, 0);	// set connection status bit (0th bit)
   12b40:	f043 0303 	orr.w	r3, r3, #3
   12b44:	7013      	strb	r3, [r2, #0]
}
   12b46:	e7d3      	b.n	12af0 <connected+0x4c>
   12b48:	00028c18 	.word	0x00028c18
   12b4c:	00028874 	.word	0x00028874
   12b50:	00028c38 	.word	0x00028c38
   12b54:	20003c74 	.word	0x20003c74

00012b58 <pressure_ccc_cfg_changed>:
{
   12b58:	b500      	push	{lr}
   12b5a:	b085      	sub	sp, #20
	LOG_INF("Pressure Notifications %s", notif_enabled ? "enabled" : "disabled");
   12b5c:	2901      	cmp	r1, #1
   12b5e:	d00d      	beq.n	12b7c <pressure_ccc_cfg_changed+0x24>
   12b60:	4b07      	ldr	r3, [pc, #28]	; (12b80 <pressure_ccc_cfg_changed+0x28>)
   12b62:	9302      	str	r3, [sp, #8]
   12b64:	4b07      	ldr	r3, [pc, #28]	; (12b84 <pressure_ccc_cfg_changed+0x2c>)
   12b66:	9301      	str	r3, [sp, #4]
   12b68:	2000      	movs	r0, #0
   12b6a:	9000      	str	r0, [sp, #0]
   12b6c:	4603      	mov	r3, r0
   12b6e:	2203      	movs	r2, #3
   12b70:	4905      	ldr	r1, [pc, #20]	; (12b88 <pressure_ccc_cfg_changed+0x30>)
   12b72:	f010 fd26 	bl	235c2 <z_log_msg2_runtime_create>
}
   12b76:	b005      	add	sp, #20
   12b78:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_INF("Pressure Notifications %s", notif_enabled ? "enabled" : "disabled");
   12b7c:	4b03      	ldr	r3, [pc, #12]	; (12b8c <pressure_ccc_cfg_changed+0x34>)
   12b7e:	e7f0      	b.n	12b62 <pressure_ccc_cfg_changed+0xa>
   12b80:	00028c44 	.word	0x00028c44
   12b84:	00028c58 	.word	0x00028c58
   12b88:	00028874 	.word	0x00028874
   12b8c:	00028c50 	.word	0x00028c50

00012b90 <temp_ccc_cfg_changed>:
{
   12b90:	b500      	push	{lr}
   12b92:	b085      	sub	sp, #20
	LOG_INF("Temp Notifications %s", notif_enabled ? "enabled" : "disabled");
   12b94:	2901      	cmp	r1, #1
   12b96:	d00d      	beq.n	12bb4 <temp_ccc_cfg_changed+0x24>
   12b98:	4b07      	ldr	r3, [pc, #28]	; (12bb8 <temp_ccc_cfg_changed+0x28>)
   12b9a:	9302      	str	r3, [sp, #8]
   12b9c:	4b07      	ldr	r3, [pc, #28]	; (12bbc <temp_ccc_cfg_changed+0x2c>)
   12b9e:	9301      	str	r3, [sp, #4]
   12ba0:	2000      	movs	r0, #0
   12ba2:	9000      	str	r0, [sp, #0]
   12ba4:	4603      	mov	r3, r0
   12ba6:	2203      	movs	r2, #3
   12ba8:	4905      	ldr	r1, [pc, #20]	; (12bc0 <temp_ccc_cfg_changed+0x30>)
   12baa:	f010 fd0a 	bl	235c2 <z_log_msg2_runtime_create>
}
   12bae:	b005      	add	sp, #20
   12bb0:	f85d fb04 	ldr.w	pc, [sp], #4
	LOG_INF("Temp Notifications %s", notif_enabled ? "enabled" : "disabled");
   12bb4:	4b03      	ldr	r3, [pc, #12]	; (12bc4 <temp_ccc_cfg_changed+0x34>)
   12bb6:	e7f0      	b.n	12b9a <temp_ccc_cfg_changed+0xa>
   12bb8:	00028c44 	.word	0x00028c44
   12bbc:	00028c74 	.word	0x00028c74
   12bc0:	00028874 	.word	0x00028874
   12bc4:	00028c50 	.word	0x00028c50

00012bc8 <bt_ready>:
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(void)
{
   12bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12bca:	b09b      	sub	sp, #108	; 0x6c
	int err;

	LOG_INF("Bluetooth initialized");
   12bcc:	4b3d      	ldr	r3, [pc, #244]	; (12cc4 <bt_ready+0xfc>)
   12bce:	930c      	str	r3, [sp, #48]	; 0x30
   12bd0:	2400      	movs	r4, #0
   12bd2:	f8ad 4009 	strh.w	r4, [sp, #9]
   12bd6:	f88d 400b 	strb.w	r4, [sp, #11]
   12bda:	2702      	movs	r7, #2
   12bdc:	f88d 7008 	strb.w	r7, [sp, #8]
   12be0:	f88d 400a 	strb.w	r4, [sp, #10]
   12be4:	9b02      	ldr	r3, [sp, #8]
   12be6:	930b      	str	r3, [sp, #44]	; 0x2c
   12be8:	4622      	mov	r2, r4
   12bea:	f364 0200 	bfi	r2, r4, #0, #1
   12bee:	f364 0241 	bfi	r2, r4, #1, #1
   12bf2:	f364 0282 	bfi	r2, r4, #2, #1
   12bf6:	f364 02c5 	bfi	r2, r4, #3, #3
   12bfa:	2303      	movs	r3, #3
   12bfc:	f363 1288 	bfi	r2, r3, #6, #3
   12c00:	2308      	movs	r3, #8
   12c02:	f363 2252 	bfi	r2, r3, #9, #10
   12c06:	4623      	mov	r3, r4
   12c08:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12c0c:	492e      	ldr	r1, [pc, #184]	; (12cc8 <bt_ready+0x100>)
   12c0e:	a808      	add	r0, sp, #32
   12c10:	f011 f99c 	bl	23f4c <z_log_msg2_finalize>

	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   12c14:	ad03      	add	r5, sp, #12
   12c16:	4e2d      	ldr	r6, [pc, #180]	; (12ccc <bt_ready+0x104>)
   12c18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12c1c:	6833      	ldr	r3, [r6, #0]
   12c1e:	602b      	str	r3, [r5, #0]
   12c20:	9400      	str	r4, [sp, #0]
   12c22:	4623      	mov	r3, r4
   12c24:	463a      	mov	r2, r7
   12c26:	492a      	ldr	r1, [pc, #168]	; (12cd0 <bt_ready+0x108>)
   12c28:	a803      	add	r0, sp, #12
   12c2a:	f007 f959 	bl	19ee0 <bt_le_adv_start>
	if (err) {
   12c2e:	bb20      	cbnz	r0, 12c7a <bt_ready+0xb2>
		LOG_INF("Advertising failed to start (err %d)", err);
		return;
	}

	LOG_INF("Advertising successfully started");
   12c30:	4b28      	ldr	r3, [pc, #160]	; (12cd4 <bt_ready+0x10c>)
   12c32:	9312      	str	r3, [sp, #72]	; 0x48
   12c34:	2300      	movs	r3, #0
   12c36:	f8ad 3009 	strh.w	r3, [sp, #9]
   12c3a:	f88d 300b 	strb.w	r3, [sp, #11]
   12c3e:	2202      	movs	r2, #2
   12c40:	f88d 2008 	strb.w	r2, [sp, #8]
   12c44:	f88d 300a 	strb.w	r3, [sp, #10]
   12c48:	9a02      	ldr	r2, [sp, #8]
   12c4a:	9211      	str	r2, [sp, #68]	; 0x44
   12c4c:	461a      	mov	r2, r3
   12c4e:	f363 0200 	bfi	r2, r3, #0, #1
   12c52:	f363 0241 	bfi	r2, r3, #1, #1
   12c56:	f363 0282 	bfi	r2, r3, #2, #1
   12c5a:	f363 02c5 	bfi	r2, r3, #3, #3
   12c5e:	2103      	movs	r1, #3
   12c60:	f361 1288 	bfi	r2, r1, #6, #3
   12c64:	2108      	movs	r1, #8
   12c66:	f361 2252 	bfi	r2, r1, #9, #10
   12c6a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12c6e:	4916      	ldr	r1, [pc, #88]	; (12cc8 <bt_ready+0x100>)
   12c70:	a80e      	add	r0, sp, #56	; 0x38
   12c72:	f011 f96b 	bl	23f4c <z_log_msg2_finalize>
}
   12c76:	b01b      	add	sp, #108	; 0x6c
   12c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_INF("Advertising failed to start (err %d)", err);
   12c7a:	4a17      	ldr	r2, [pc, #92]	; (12cd8 <bt_ready+0x110>)
   12c7c:	9218      	str	r2, [sp, #96]	; 0x60
   12c7e:	9019      	str	r0, [sp, #100]	; 0x64
   12c80:	4623      	mov	r3, r4
   12c82:	f8ad 4009 	strh.w	r4, [sp, #9]
   12c86:	f88d 400b 	strb.w	r4, [sp, #11]
   12c8a:	2103      	movs	r1, #3
   12c8c:	f88d 1008 	strb.w	r1, [sp, #8]
   12c90:	f88d 400a 	strb.w	r4, [sp, #10]
   12c94:	9a02      	ldr	r2, [sp, #8]
   12c96:	9217      	str	r2, [sp, #92]	; 0x5c
   12c98:	4622      	mov	r2, r4
   12c9a:	f364 0200 	bfi	r2, r4, #0, #1
   12c9e:	f364 0241 	bfi	r2, r4, #1, #1
   12ca2:	f364 0282 	bfi	r2, r4, #2, #1
   12ca6:	f364 02c5 	bfi	r2, r4, #3, #3
   12caa:	f361 1288 	bfi	r2, r1, #6, #3
   12cae:	210c      	movs	r1, #12
   12cb0:	f361 2252 	bfi	r2, r1, #9, #10
   12cb4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12cb8:	4903      	ldr	r1, [pc, #12]	; (12cc8 <bt_ready+0x100>)
   12cba:	a814      	add	r0, sp, #80	; 0x50
   12cbc:	f011 f946 	bl	23f4c <z_log_msg2_finalize>
		return;
   12cc0:	e7d9      	b.n	12c76 <bt_ready+0xae>
   12cc2:	bf00      	nop
   12cc4:	00028c8c 	.word	0x00028c8c
   12cc8:	00028874 	.word	0x00028874
   12ccc:	000289d0 	.word	0x000289d0
   12cd0:	00028d10 	.word	0x00028d10
   12cd4:	00028ccc 	.word	0x00028ccc
   12cd8:	00028ca4 	.word	0x00028ca4

00012cdc <ttpms_service_init>:

void ttpms_service_init(void)
{
   12cdc:	b500      	push	{lr}
   12cde:	b089      	sub	sp, #36	; 0x24
    int err;

	err = bt_enable(NULL);
   12ce0:	2000      	movs	r0, #0
   12ce2:	f006 f971 	bl	18fc8 <bt_enable>
	if (err) {
   12ce6:	b938      	cbnz	r0, 12cf8 <ttpms_service_init+0x1c>
		LOG_INF("Bluetooth init failed (err %d)", err);
		return;
	}

	bt_ready();
   12ce8:	f7ff ff6e 	bl	12bc8 <bt_ready>
	bt_gatt_cb_register(&gatt_callbacks);
   12cec:	4814      	ldr	r0, [pc, #80]	; (12d40 <ttpms_service_init+0x64>)
   12cee:	f00a f86d 	bl	1cdcc <bt_gatt_cb_register>
}
   12cf2:	b009      	add	sp, #36	; 0x24
   12cf4:	f85d fb04 	ldr.w	pc, [sp], #4
		LOG_INF("Bluetooth init failed (err %d)", err);
   12cf8:	4a12      	ldr	r2, [pc, #72]	; (12d44 <ttpms_service_init+0x68>)
   12cfa:	9206      	str	r2, [sp, #24]
   12cfc:	9007      	str	r0, [sp, #28]
   12cfe:	2300      	movs	r3, #0
   12d00:	f8ad 3005 	strh.w	r3, [sp, #5]
   12d04:	f88d 3007 	strb.w	r3, [sp, #7]
   12d08:	2103      	movs	r1, #3
   12d0a:	f88d 1004 	strb.w	r1, [sp, #4]
   12d0e:	f88d 3006 	strb.w	r3, [sp, #6]
   12d12:	9a01      	ldr	r2, [sp, #4]
   12d14:	9205      	str	r2, [sp, #20]
   12d16:	461a      	mov	r2, r3
   12d18:	f363 0200 	bfi	r2, r3, #0, #1
   12d1c:	f363 0241 	bfi	r2, r3, #1, #1
   12d20:	f363 0282 	bfi	r2, r3, #2, #1
   12d24:	f363 02c5 	bfi	r2, r3, #3, #3
   12d28:	f361 1288 	bfi	r2, r1, #6, #3
   12d2c:	210c      	movs	r1, #12
   12d2e:	f361 2252 	bfi	r2, r1, #9, #10
   12d32:	f3c2 0212 	ubfx	r2, r2, #0, #19
   12d36:	4904      	ldr	r1, [pc, #16]	; (12d48 <ttpms_service_init+0x6c>)
   12d38:	a802      	add	r0, sp, #8
   12d3a:	f011 f907 	bl	23f4c <z_log_msg2_finalize>
		return;
   12d3e:	e7d8      	b.n	12cf2 <ttpms_service_init+0x16>
   12d40:	20000520 	.word	0x20000520
   12d44:	00028cf0 	.word	0x00028cf0
   12d48:	00028874 	.word	0x00028874

00012d4c <ttpms_temp_notify>:

void ttpms_temp_notify(void)
{
   12d4c:	b500      	push	{lr}
   12d4e:	b087      	sub	sp, #28
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   12d50:	2000      	movs	r0, #0
   12d52:	9000      	str	r0, [sp, #0]
   12d54:	9003      	str	r0, [sp, #12]
   12d56:	9004      	str	r0, [sp, #16]
   12d58:	9005      	str	r0, [sp, #20]

	params.attr = attr;
   12d5a:	4b06      	ldr	r3, [pc, #24]	; (12d74 <ttpms_temp_notify+0x28>)
   12d5c:	9301      	str	r3, [sp, #4]
	params.data = data;
   12d5e:	4b06      	ldr	r3, [pc, #24]	; (12d78 <ttpms_temp_notify+0x2c>)
   12d60:	9302      	str	r3, [sp, #8]
	params.len = len;
   12d62:	2318      	movs	r3, #24
   12d64:	f8ad 300c 	strh.w	r3, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
   12d68:	4669      	mov	r1, sp
   12d6a:	f00a fb89 	bl	1d480 <bt_gatt_notify_cb>
    bt_gatt_notify(NULL, &ttpms_svc.attrs[2], temp, sizeof(temp));
}
   12d6e:	b007      	add	sp, #28
   12d70:	f85d fb04 	ldr.w	pc, [sp], #4
   12d74:	00028d48 	.word	0x00028d48
   12d78:	20000468 	.word	0x20000468

00012d7c <ttpms_pressure_notify>:

void ttpms_pressure_notify(void)
{
   12d7c:	b500      	push	{lr}
   12d7e:	b087      	sub	sp, #28
	memset(&params, 0, sizeof(params));
   12d80:	2000      	movs	r0, #0
   12d82:	9000      	str	r0, [sp, #0]
   12d84:	9003      	str	r0, [sp, #12]
   12d86:	9004      	str	r0, [sp, #16]
   12d88:	9005      	str	r0, [sp, #20]
	params.attr = attr;
   12d8a:	4b06      	ldr	r3, [pc, #24]	; (12da4 <ttpms_pressure_notify+0x28>)
   12d8c:	9301      	str	r3, [sp, #4]
	params.data = data;
   12d8e:	4b06      	ldr	r3, [pc, #24]	; (12da8 <ttpms_pressure_notify+0x2c>)
   12d90:	9302      	str	r3, [sp, #8]
	params.len = len;
   12d92:	2302      	movs	r3, #2
   12d94:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   12d98:	4669      	mov	r1, sp
   12d9a:	f00a fb71 	bl	1d480 <bt_gatt_notify_cb>
    bt_gatt_notify(NULL, &ttpms_svc.attrs[4], &pressure, sizeof(pressure));
   12d9e:	b007      	add	sp, #28
   12da0:	f85d fb04 	ldr.w	pc, [sp], #4
   12da4:	00028d70 	.word	0x00028d70
   12da8:	20000796 	.word	0x20000796

00012dac <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db0:	b089      	sub	sp, #36	; 0x24
   12db2:	9201      	str	r2, [sp, #4]
	uint8_t str_ptr_pos[16];
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged & (sizeof(void *) - 1)) {
   12db4:	f010 0a03 	ands.w	sl, r0, #3
   12db8:	f040 8222 	bne.w	13200 <cbvprintf_package+0x454>
   12dbc:	4681      	mov	r9, r0
   12dbe:	468b      	mov	fp, r1
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
   12dc0:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (!buf0) {
   12dc2:	b300      	cbz	r0, 12e06 <cbvprintf_package+0x5a>

	/*
	 * Otherwise we must ensure we can store at least
	 * thepointer to the format string itself.
	 */
	if (buf0 && buf - buf0 + sizeof(char *) > len) {
   12dc4:	f1b9 0f00 	cmp.w	r9, #0
   12dc8:	d005      	beq.n	12dd6 <cbvprintf_package+0x2a>
   12dca:	eba4 0209 	sub.w	r2, r4, r9
   12dce:	3204      	adds	r2, #4
   12dd0:	455a      	cmp	r2, fp
   12dd2:	f200 8218 	bhi.w	13206 <cbvprintf_package+0x45a>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
   12dd6:	1e5f      	subs	r7, r3, #1
	unsigned int align, size, i, s_idx = 0, s_rw_cnt = 0, s_ro_cnt = 0;
   12dd8:	f8cd a00c 	str.w	sl, [sp, #12]
   12ddc:	f8cd a008 	str.w	sl, [sp, #8]
   12de0:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
   12de4:	2600      	movs	r6, #0
	align = VA_STACK_ALIGN(char *);
	size = sizeof(char *);
   12de6:	2504      	movs	r5, #4
	align = VA_STACK_ALIGN(char *);
   12de8:	46a8      	mov	r8, r5

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0) {
   12dea:	f1b9 0f00 	cmp.w	r9, #0
   12dee:	d000      	beq.n	12df2 <cbvprintf_package+0x46>
				*(const char **)buf = s;
   12df0:	6023      	str	r3, [r4, #0]
	return ((addr >= (const char *)RO_START) &&
   12df2:	4aca      	ldr	r2, [pc, #808]	; (1311c <cbvprintf_package+0x370>)
   12df4:	4293      	cmp	r3, r2
   12df6:	f0c0 8150 	bcc.w	1309a <cbvprintf_package+0x2ee>
   12dfa:	4ac9      	ldr	r2, [pc, #804]	; (13120 <cbvprintf_package+0x374>)
   12dfc:	4293      	cmp	r3, r2
   12dfe:	f0c0 8155 	bcc.w	130ac <cbvprintf_package+0x300>
   12e02:	2200      	movs	r2, #0
   12e04:	e14a      	b.n	1309c <cbvprintf_package+0x2f0>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   12e06:	f001 0b07 	and.w	fp, r1, #7
   12e0a:	445c      	add	r4, fp
		len = -(len % CBPRINTF_PACKAGE_ALIGNMENT);
   12e0c:	f1cb 0b00 	rsb	fp, fp, #0
   12e10:	e7d8      	b.n	12dc4 <cbvprintf_package+0x18>
			if (*fmt == '%') {
   12e12:	2b25      	cmp	r3, #37	; 0x25
   12e14:	f000 80c8 	beq.w	12fa8 <cbvprintf_package+0x1fc>
		if (!parsing) {
   12e18:	460f      	mov	r7, r1
	while (*++fmt) {
   12e1a:	1c79      	adds	r1, r7, #1
   12e1c:	787b      	ldrb	r3, [r7, #1]
   12e1e:	2b00      	cmp	r3, #0
   12e20:	f000 8195 	beq.w	1314e <cbvprintf_package+0x3a2>
		if (!parsing) {
   12e24:	2e00      	cmp	r6, #0
   12e26:	d0f4      	beq.n	12e12 <cbvprintf_package+0x66>
		switch (*fmt) {
   12e28:	f1a3 0220 	sub.w	r2, r3, #32
   12e2c:	2a5a      	cmp	r2, #90	; 0x5a
   12e2e:	f200 80bf 	bhi.w	12fb0 <cbvprintf_package+0x204>
   12e32:	f20f 0c08 	addw	ip, pc, #8
   12e36:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
   12e3a:	bf00      	nop
   12e3c:	00012e19 	.word	0x00012e19
   12e40:	00012fb1 	.word	0x00012fb1
   12e44:	00012fb1 	.word	0x00012fb1
   12e48:	00012e19 	.word	0x00012e19
   12e4c:	00012fb1 	.word	0x00012fb1
   12e50:	00012fb1 	.word	0x00012fb1
   12e54:	00012fb1 	.word	0x00012fb1
   12e58:	00012fb1 	.word	0x00012fb1
   12e5c:	00012fb1 	.word	0x00012fb1
   12e60:	00012fb1 	.word	0x00012fb1
   12e64:	00012fcf 	.word	0x00012fcf
   12e68:	00012e19 	.word	0x00012e19
   12e6c:	00012fb1 	.word	0x00012fb1
   12e70:	00012e19 	.word	0x00012e19
   12e74:	00012e19 	.word	0x00012e19
   12e78:	00012fb1 	.word	0x00012fb1
   12e7c:	00012e19 	.word	0x00012e19
   12e80:	00012e19 	.word	0x00012e19
   12e84:	00012e19 	.word	0x00012e19
   12e88:	00012e19 	.word	0x00012e19
   12e8c:	00012e19 	.word	0x00012e19
   12e90:	00012e19 	.word	0x00012e19
   12e94:	00012e19 	.word	0x00012e19
   12e98:	00012e19 	.word	0x00012e19
   12e9c:	00012e19 	.word	0x00012e19
   12ea0:	00012e19 	.word	0x00012e19
   12ea4:	00012fb1 	.word	0x00012fb1
   12ea8:	00012fb1 	.word	0x00012fb1
   12eac:	00012fb1 	.word	0x00012fb1
   12eb0:	00012fb1 	.word	0x00012fb1
   12eb4:	00012fb1 	.word	0x00012fb1
   12eb8:	00012fb1 	.word	0x00012fb1
   12ebc:	00012fb1 	.word	0x00012fb1
   12ec0:	00013029 	.word	0x00013029
   12ec4:	00012fb1 	.word	0x00012fb1
   12ec8:	00012fb1 	.word	0x00012fb1
   12ecc:	00012fb1 	.word	0x00012fb1
   12ed0:	00013029 	.word	0x00013029
   12ed4:	00013029 	.word	0x00013029
   12ed8:	00013029 	.word	0x00013029
   12edc:	00012fb1 	.word	0x00012fb1
   12ee0:	00012fb1 	.word	0x00012fb1
   12ee4:	00012fb1 	.word	0x00012fb1
   12ee8:	00012fb1 	.word	0x00012fb1
   12eec:	00012e19 	.word	0x00012e19
   12ef0:	00012fb1 	.word	0x00012fb1
   12ef4:	00012fb1 	.word	0x00012fb1
   12ef8:	00012fb1 	.word	0x00012fb1
   12efc:	00012fb1 	.word	0x00012fb1
   12f00:	00012fb1 	.word	0x00012fb1
   12f04:	00012fb1 	.word	0x00012fb1
   12f08:	00012fb1 	.word	0x00012fb1
   12f0c:	00012fb1 	.word	0x00012fb1
   12f10:	00012fb1 	.word	0x00012fb1
   12f14:	00012fb1 	.word	0x00012fb1
   12f18:	00012fb1 	.word	0x00012fb1
   12f1c:	00012fc7 	.word	0x00012fc7
   12f20:	00012fb1 	.word	0x00012fb1
   12f24:	00012fb1 	.word	0x00012fb1
   12f28:	00012fb1 	.word	0x00012fb1
   12f2c:	00012fb1 	.word	0x00012fb1
   12f30:	00012fb1 	.word	0x00012fb1
   12f34:	00012fb1 	.word	0x00012fb1
   12f38:	00012fb1 	.word	0x00012fb1
   12f3c:	00012fb1 	.word	0x00012fb1
   12f40:	00013029 	.word	0x00013029
   12f44:	00012fb1 	.word	0x00012fb1
   12f48:	00012fc7 	.word	0x00012fc7
   12f4c:	00012fc7 	.word	0x00012fc7
   12f50:	00013029 	.word	0x00013029
   12f54:	00013029 	.word	0x00013029
   12f58:	00013029 	.word	0x00013029
   12f5c:	00012e19 	.word	0x00012e19
   12f60:	00012fc7 	.word	0x00012fc7
   12f64:	00012fb5 	.word	0x00012fb5
   12f68:	00012fb1 	.word	0x00012fb1
   12f6c:	00012e19 	.word	0x00012e19
   12f70:	00012fb1 	.word	0x00012fb1
   12f74:	00013085 	.word	0x00013085
   12f78:	00012fc7 	.word	0x00012fc7
   12f7c:	00013085 	.word	0x00013085
   12f80:	00012fb1 	.word	0x00012fb1
   12f84:	00012fb1 	.word	0x00012fb1
   12f88:	00013085 	.word	0x00013085
   12f8c:	00012fc1 	.word	0x00012fc1
   12f90:	00012fc7 	.word	0x00012fc7
   12f94:	00012fb1 	.word	0x00012fb1
   12f98:	00012fb1 	.word	0x00012fb1
   12f9c:	00012fc7 	.word	0x00012fc7
   12fa0:	00012fb1 	.word	0x00012fb1
   12fa4:	00012fbb 	.word	0x00012fbb
				parsing = true;
   12fa8:	2601      	movs	r6, #1
				size = sizeof(int);
   12faa:	2504      	movs	r5, #4
				align = VA_STACK_ALIGN(int);
   12fac:	46a8      	mov	r8, r5
			continue;
   12fae:	e733      	b.n	12e18 <cbvprintf_package+0x6c>
		if (!parsing) {
   12fb0:	2600      	movs	r6, #0
   12fb2:	e731      	b.n	12e18 <cbvprintf_package+0x6c>
			size = sizeof(intmax_t);
   12fb4:	2508      	movs	r5, #8
			align = VA_STACK_ALIGN(intmax_t);
   12fb6:	46a8      	mov	r8, r5
			continue;
   12fb8:	e72e      	b.n	12e18 <cbvprintf_package+0x6c>
			size = sizeof(size_t);
   12fba:	2504      	movs	r5, #4
			align = VA_STACK_ALIGN(size_t);
   12fbc:	46a8      	mov	r8, r5
			continue;
   12fbe:	e72b      	b.n	12e18 <cbvprintf_package+0x6c>
			size = sizeof(ptrdiff_t);
   12fc0:	2504      	movs	r5, #4
			align = VA_STACK_ALIGN(ptrdiff_t);
   12fc2:	46a8      	mov	r8, r5
			continue;
   12fc4:	e728      	b.n	12e18 <cbvprintf_package+0x6c>
			if (fmt[-1] == 'l') {
   12fc6:	783a      	ldrb	r2, [r7, #0]
   12fc8:	2a6c      	cmp	r2, #108	; 0x6c
   12fca:	d021      	beq.n	13010 <cbvprintf_package+0x264>
			parsing = false;
   12fcc:	2600      	movs	r6, #0
		buf = (void *) ROUND_UP(buf, align);
   12fce:	4444      	add	r4, r8
   12fd0:	3c01      	subs	r4, #1
   12fd2:	f1c8 0200 	rsb	r2, r8, #0
   12fd6:	4014      	ands	r4, r2
		if (buf0 && buf - buf0 + size > len) {
   12fd8:	b120      	cbz	r0, 12fe4 <cbvprintf_package+0x238>
   12fda:	1a22      	subs	r2, r4, r0
   12fdc:	442a      	add	r2, r5
   12fde:	4593      	cmp	fp, r2
   12fe0:	f0c0 8114 	bcc.w	1320c <cbvprintf_package+0x460>
		if (*fmt == 's') {
   12fe4:	2b73      	cmp	r3, #115	; 0x73
   12fe6:	d051      	beq.n	1308c <cbvprintf_package+0x2e0>
					 */
					len += 1;
				}
			}
			buf += sizeof(char *);
		} else if (size == sizeof(int)) {
   12fe8:	2d04      	cmp	r5, #4
   12fea:	f000 80a8 	beq.w	1313e <cbvprintf_package+0x392>

			if (buf0) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
   12fee:	2d08      	cmp	r5, #8
   12ff0:	f040 8115 	bne.w	1321e <cbvprintf_package+0x472>
			long long v = va_arg(ap, long long);
   12ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12ff6:	3307      	adds	r3, #7
   12ff8:	f023 0307 	bic.w	r3, r3, #7
   12ffc:	f103 0208 	add.w	r2, r3, #8
   13000:	9212      	str	r2, [sp, #72]	; 0x48
   13002:	e9d3 2300 	ldrd	r2, r3, [r3]

			if (buf0) {
   13006:	b108      	cbz	r0, 1300c <cbvprintf_package+0x260>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
   13008:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}
			buf += sizeof(long long);
   1300c:	3408      	adds	r4, #8
   1300e:	e703      	b.n	12e18 <cbvprintf_package+0x6c>
				if (fmt[-2] == 'l') {
   13010:	f811 2c02 	ldrb.w	r2, [r1, #-2]
   13014:	2a6c      	cmp	r2, #108	; 0x6c
   13016:	d003      	beq.n	13020 <cbvprintf_package+0x274>
			parsing = false;
   13018:	2600      	movs	r6, #0
					size = sizeof(long);
   1301a:	2504      	movs	r5, #4
					align = VA_STACK_ALIGN(long);
   1301c:	46a8      	mov	r8, r5
   1301e:	e7d6      	b.n	12fce <cbvprintf_package+0x222>
			parsing = false;
   13020:	2600      	movs	r6, #0
					size = sizeof(long long);
   13022:	2508      	movs	r5, #8
					align = VA_STACK_ALIGN(long long);
   13024:	46a8      	mov	r8, r5
   13026:	e7d2      	b.n	12fce <cbvprintf_package+0x222>
			if (fmt[-1] == 'L') {
   13028:	783b      	ldrb	r3, [r7, #0]
   1302a:	2b4c      	cmp	r3, #76	; 0x4c
   1302c:	d01a      	beq.n	13064 <cbvprintf_package+0x2b8>
				v.d = va_arg(ap, double);
   1302e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13030:	3307      	adds	r3, #7
   13032:	f023 0307 	bic.w	r3, r3, #7
   13036:	f103 0208 	add.w	r2, r3, #8
   1303a:	9212      	str	r2, [sp, #72]	; 0x48
   1303c:	e9d3 2300 	ldrd	r2, r3, [r3]
			buf = (void *) ROUND_UP(buf, align);
   13040:	3407      	adds	r4, #7
   13042:	f024 0407 	bic.w	r4, r4, #7
			if (buf0) {
   13046:	b140      	cbz	r0, 1305a <cbvprintf_package+0x2ae>
				if (buf - buf0 + size > len) {
   13048:	1a25      	subs	r5, r4, r0
   1304a:	3508      	adds	r5, #8
   1304c:	455d      	cmp	r5, fp
   1304e:	d813      	bhi.n	13078 <cbvprintf_package+0x2cc>
				} else if (fmt[-1] == 'L') {
   13050:	783d      	ldrb	r5, [r7, #0]
   13052:	2d4c      	cmp	r5, #76	; 0x4c
   13054:	d013      	beq.n	1307e <cbvprintf_package+0x2d2>
					*(double *)buf = v.d;
   13056:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
   1305a:	3408      	adds	r4, #8
			parsing = false;
   1305c:	2600      	movs	r6, #0
			continue;
   1305e:	2508      	movs	r5, #8
   13060:	46a8      	mov	r8, r5
   13062:	e6d9      	b.n	12e18 <cbvprintf_package+0x6c>
				v.ld = va_arg(ap, long double);
   13064:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13066:	3307      	adds	r3, #7
   13068:	f023 0307 	bic.w	r3, r3, #7
   1306c:	f103 0208 	add.w	r2, r3, #8
   13070:	9212      	str	r2, [sp, #72]	; 0x48
   13072:	e9d3 2300 	ldrd	r2, r3, [r3]
				size = sizeof(long double);
   13076:	e7e3      	b.n	13040 <cbvprintf_package+0x294>
					return -ENOSPC;
   13078:	f06f 001b 	mvn.w	r0, #27
   1307c:	e0bd      	b.n	131fa <cbvprintf_package+0x44e>
					*(long double *)buf = v.ld;
   1307e:	e9c4 2300 	strd	r2, r3, [r4]
   13082:	e7ea      	b.n	1305a <cbvprintf_package+0x2ae>
			parsing = false;
   13084:	2600      	movs	r6, #0
			size = sizeof(void *);
   13086:	2504      	movs	r5, #4
			align = VA_STACK_ALIGN(void *);
   13088:	46a8      	mov	r8, r5
   1308a:	e7a0      	b.n	12fce <cbvprintf_package+0x222>
   1308c:	4681      	mov	r9, r0
			s = va_arg(ap, char *);
   1308e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13090:	1d1a      	adds	r2, r3, #4
   13092:	9212      	str	r2, [sp, #72]	; 0x48
   13094:	681b      	ldr	r3, [r3, #0]
	while (*++fmt) {
   13096:	460f      	mov	r7, r1
   13098:	e6a7      	b.n	12dea <cbvprintf_package+0x3e>
	return ((addr >= (const char *)RO_START) &&
   1309a:	2200      	movs	r2, #0
			bool str_idxs = flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS;
   1309c:	9901      	ldr	r1, [sp, #4]
   1309e:	f001 0101 	and.w	r1, r1, #1
			bool need_ro = is_ro && str_idxs;
   130a2:	4610      	mov	r0, r2
   130a4:	b122      	cbz	r2, 130b0 <cbvprintf_package+0x304>
   130a6:	b969      	cbnz	r1, 130c4 <cbvprintf_package+0x318>
   130a8:	2200      	movs	r2, #0
   130aa:	e002      	b.n	130b2 <cbvprintf_package+0x306>
	return ((addr >= (const char *)RO_START) &&
   130ac:	2201      	movs	r2, #1
   130ae:	e7f5      	b.n	1309c <cbvprintf_package+0x2f0>
			bool need_ro = is_ro && str_idxs;
   130b0:	2200      	movs	r2, #0
   130b2:	4694      	mov	ip, r2
	return ((addr >= (const char *)RO_START) &&
   130b4:	4a19      	ldr	r2, [pc, #100]	; (1311c <cbvprintf_package+0x370>)
   130b6:	4293      	cmp	r3, r2
   130b8:	d306      	bcc.n	130c8 <cbvprintf_package+0x31c>
   130ba:	4a19      	ldr	r2, [pc, #100]	; (13120 <cbvprintf_package+0x374>)
   130bc:	4293      	cmp	r3, r2
   130be:	d325      	bcc.n	1310c <cbvprintf_package+0x360>
   130c0:	2200      	movs	r2, #0
   130c2:	e002      	b.n	130ca <cbvprintf_package+0x31e>
			bool need_ro = is_ro && str_idxs;
   130c4:	2201      	movs	r2, #1
   130c6:	e7f4      	b.n	130b2 <cbvprintf_package+0x306>
	return ((addr >= (const char *)RO_START) &&
   130c8:	2200      	movs	r2, #0
			if (ptr_in_rodata(s) && !str_idxs) {
   130ca:	b102      	cbz	r2, 130ce <cbvprintf_package+0x322>
   130cc:	b1d9      	cbz	r1, 13106 <cbvprintf_package+0x35a>
			} else if (buf0) {
   130ce:	f1b9 0f00 	cmp.w	r9, #0
   130d2:	d027      	beq.n	13124 <cbvprintf_package+0x378>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   130d4:	9b00      	ldr	r3, [sp, #0]
   130d6:	2b0f      	cmp	r3, #15
   130d8:	f200 809b 	bhi.w	13212 <cbvprintf_package+0x466>
				if ((buf - buf0) > CBPRINTF_STR_POS_MASK) {
   130dc:	eba4 0209 	sub.w	r2, r4, r9
   130e0:	2a7f      	cmp	r2, #127	; 0x7f
   130e2:	f200 8099 	bhi.w	13218 <cbvprintf_package+0x46c>
				uint8_t ro_flag = need_ro ?
   130e6:	f1bc 0f00 	cmp.w	ip, #0
   130ea:	d011      	beq.n	13110 <cbvprintf_package+0x364>
					s_ro_cnt++;
   130ec:	9b03      	ldr	r3, [sp, #12]
   130ee:	3301      	adds	r3, #1
   130f0:	9303      	str	r3, [sp, #12]
				uint8_t ro_flag = need_ro ?
   130f2:	2380      	movs	r3, #128	; 0x80
				str_ptr_pos[s_idx++] = ro_flag |
   130f4:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
   130f8:	aa08      	add	r2, sp, #32
   130fa:	9900      	ldr	r1, [sp, #0]
   130fc:	440a      	add	r2, r1
   130fe:	f802 3c10 	strb.w	r3, [r2, #-16]
   13102:	1c4b      	adds	r3, r1, #1
   13104:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
   13106:	3404      	adds	r4, #4
   13108:	4648      	mov	r0, r9
   1310a:	e686      	b.n	12e1a <cbvprintf_package+0x6e>
	return ((addr >= (const char *)RO_START) &&
   1310c:	2201      	movs	r2, #1
   1310e:	e7dc      	b.n	130ca <cbvprintf_package+0x31e>
					s_rw_cnt++;
   13110:	9b02      	ldr	r3, [sp, #8]
   13112:	3301      	adds	r3, #1
   13114:	9302      	str	r3, [sp, #8]
				uint8_t ro_flag = need_ro ?
   13116:	2300      	movs	r3, #0
   13118:	e7ec      	b.n	130f4 <cbvprintf_package+0x348>
   1311a:	bf00      	nop
   1311c:	00028564 	.word	0x00028564
   13120:	0002af4c 	.word	0x0002af4c
				if (!is_ro) {
   13124:	b128      	cbz	r0, 13132 <cbvprintf_package+0x386>
				} else if (need_ro) {
   13126:	f1bc 0f00 	cmp.w	ip, #0
   1312a:	d0ec      	beq.n	13106 <cbvprintf_package+0x35a>
					len += 1;
   1312c:	f10b 0b01 	add.w	fp, fp, #1
   13130:	e7e9      	b.n	13106 <cbvprintf_package+0x35a>
					len += strlen(s) + 1 + 1;
   13132:	4618      	mov	r0, r3
   13134:	f7f9 fa76 	bl	c624 <strlen>
   13138:	1c83      	adds	r3, r0, #2
   1313a:	449b      	add	fp, r3
   1313c:	e7e3      	b.n	13106 <cbvprintf_package+0x35a>
			int v = va_arg(ap, int);
   1313e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   13140:	1d1a      	adds	r2, r3, #4
   13142:	9212      	str	r2, [sp, #72]	; 0x48
   13144:	681b      	ldr	r3, [r3, #0]
			if (buf0) {
   13146:	b100      	cbz	r0, 1314a <cbvprintf_package+0x39e>
				*(int *)buf = v;
   13148:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   1314a:	3404      	adds	r4, #4
   1314c:	e664      	b.n	12e18 <cbvprintf_package+0x6c>
   1314e:	4681      	mov	r9, r0
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if ((buf - buf0) / sizeof(int) > 255) {
   13150:	1a23      	subs	r3, r4, r0
   13152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   13156:	d265      	bcs.n	13224 <cbvprintf_package+0x478>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (!buf0) {
   13158:	b158      	cbz	r0, 13172 <cbvprintf_package+0x3c6>
		return len + buf - buf0;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
   1315a:	2200      	movs	r2, #0
   1315c:	6002      	str	r2, [r0, #0]

	/* Record end of argument list and number of appended strings. */
	buf0[0] = (buf - buf0) / sizeof(int);
   1315e:	089b      	lsrs	r3, r3, #2
   13160:	7003      	strb	r3, [r0, #0]
	buf0[1] = s_rw_cnt;
   13162:	9b02      	ldr	r3, [sp, #8]
   13164:	7043      	strb	r3, [r0, #1]
	buf0[2] = s_ro_cnt;
   13166:	9b03      	ldr	r3, [sp, #12]
   13168:	7083      	strb	r3, [r0, #2]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
   1316a:	b9d3      	cbnz	r3, 131a2 <cbvprintf_package+0x3f6>
   1316c:	f8dd 8000 	ldr.w	r8, [sp]
   13170:	e01f      	b.n	131b2 <cbvprintf_package+0x406>
		return len + buf - buf0;
   13172:	445c      	add	r4, fp
   13174:	1a20      	subs	r0, r4, r0
   13176:	e040      	b.n	131fa <cbvprintf_package+0x44e>
		for (i = 0; i < s_idx; i++) {
   13178:	3301      	adds	r3, #1
   1317a:	4283      	cmp	r3, r0
   1317c:	d214      	bcs.n	131a8 <cbvprintf_package+0x3fc>
			if (!(str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG)) {
   1317e:	aa08      	add	r2, sp, #32
   13180:	441a      	add	r2, r3
   13182:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   13186:	f912 2c10 	ldrsb.w	r2, [r2, #-16]
   1318a:	2a00      	cmp	r2, #0
   1318c:	daf4      	bge.n	13178 <cbvprintf_package+0x3cc>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & CBPRINTF_STR_POS_MASK;
   1318e:	f001 017f 	and.w	r1, r1, #127	; 0x7f

			/* make sure it fits */
			if (buf - buf0 + 1 > len) {
   13192:	eba4 0209 	sub.w	r2, r4, r9
   13196:	3201      	adds	r2, #1
   13198:	4593      	cmp	fp, r2
   1319a:	d346      	bcc.n	1322a <cbvprintf_package+0x47e>
				return -ENOSPC;
			}
			/* store the pointer position prefix */
			*buf++ = pos;
   1319c:	f804 1b01 	strb.w	r1, [r4], #1
   131a0:	e7ea      	b.n	13178 <cbvprintf_package+0x3cc>
		for (i = 0; i < s_idx; i++) {
   131a2:	4653      	mov	r3, sl
   131a4:	9800      	ldr	r0, [sp, #0]
   131a6:	e7e8      	b.n	1317a <cbvprintf_package+0x3ce>
   131a8:	f8dd 8000 	ldr.w	r8, [sp]
   131ac:	e001      	b.n	131b2 <cbvprintf_package+0x406>
		}
	}

	/* Store strings prefixed by their pointer location. */
	for (i = 0; i < s_idx; i++) {
   131ae:	f10a 0a01 	add.w	sl, sl, #1
   131b2:	45c2      	cmp	sl, r8
   131b4:	d21f      	bcs.n	131f6 <cbvprintf_package+0x44a>
		/* Process only RW strings. */
		if (str_ptr_pos[i] & CBPRINTF_STR_POS_RO_FLAG) {
   131b6:	ab08      	add	r3, sp, #32
   131b8:	4453      	add	r3, sl
   131ba:	f813 6c10 	ldrb.w	r6, [r3, #-16]
   131be:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   131c2:	2b00      	cmp	r3, #0
   131c4:	dbf3      	blt.n	131ae <cbvprintf_package+0x402>
			continue;
		}

		/* retrieve the string pointer */
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   131c6:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
		/* clear the in-buffer pointer (less entropy if compressed) */
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   131ca:	2300      	movs	r3, #0
   131cc:	f849 3026 	str.w	r3, [r9, r6, lsl #2]
		/* find the string length including terminating '\0' */
		size = strlen(s) + 1;
   131d0:	4638      	mov	r0, r7
   131d2:	f7f9 fa27 	bl	c624 <strlen>
   131d6:	1c45      	adds	r5, r0, #1
		/* make sure it fits */
		if (buf - buf0 + 1 + size > len) {
   131d8:	eba4 0309 	sub.w	r3, r4, r9
   131dc:	442b      	add	r3, r5
   131de:	3301      	adds	r3, #1
   131e0:	459b      	cmp	fp, r3
   131e2:	d325      	bcc.n	13230 <cbvprintf_package+0x484>
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
   131e4:	f804 6b01 	strb.w	r6, [r4], #1
   131e8:	462a      	mov	r2, r5
   131ea:	4639      	mov	r1, r7
   131ec:	4620      	mov	r0, r4
   131ee:	f015 f956 	bl	2849e <memcpy>
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
		buf += size;
   131f2:	442c      	add	r4, r5
   131f4:	e7db      	b.n	131ae <cbvprintf_package+0x402>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return buf - buf0;
   131f6:	eba4 0009 	sub.w	r0, r4, r9

#undef CBPRINTF_STR_POS_RO_FLAG
#undef CBPRINTF_STR_POS_MASK
}
   131fa:	b009      	add	sp, #36	; 0x24
   131fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EFAULT;
   13200:	f06f 000d 	mvn.w	r0, #13
   13204:	e7f9      	b.n	131fa <cbvprintf_package+0x44e>
		return -ENOSPC;
   13206:	f06f 001b 	mvn.w	r0, #27
   1320a:	e7f6      	b.n	131fa <cbvprintf_package+0x44e>
			return -ENOSPC;
   1320c:	f06f 001b 	mvn.w	r0, #27
   13210:	e7f3      	b.n	131fa <cbvprintf_package+0x44e>
					return -EINVAL;
   13212:	f06f 0015 	mvn.w	r0, #21
   13216:	e7f0      	b.n	131fa <cbvprintf_package+0x44e>
					return -EINVAL;
   13218:	f06f 0015 	mvn.w	r0, #21
   1321c:	e7ed      	b.n	131fa <cbvprintf_package+0x44e>
			return -EINVAL;
   1321e:	f06f 0015 	mvn.w	r0, #21
   13222:	e7ea      	b.n	131fa <cbvprintf_package+0x44e>
		return -EINVAL;
   13224:	f06f 0015 	mvn.w	r0, #21
   13228:	e7e7      	b.n	131fa <cbvprintf_package+0x44e>
				return -ENOSPC;
   1322a:	f06f 001b 	mvn.w	r0, #27
   1322e:	e7e4      	b.n	131fa <cbvprintf_package+0x44e>
			return -ENOSPC;
   13230:	f06f 001b 	mvn.w	r0, #27
   13234:	e7e1      	b.n	131fa <cbvprintf_package+0x44e>
   13236:	bf00      	nop

00013238 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   13238:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1323a:	680b      	ldr	r3, [r1, #0]
   1323c:	3301      	adds	r3, #1
   1323e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   13240:	4b01      	ldr	r3, [pc, #4]	; (13248 <char_out+0x10>)
   13242:	681b      	ldr	r3, [r3, #0]
   13244:	4798      	blx	r3
}
   13246:	bd08      	pop	{r3, pc}
   13248:	2000058c 	.word	0x2000058c

0001324c <__printk_hook_install>:
	_char_out = fn;
   1324c:	4b01      	ldr	r3, [pc, #4]	; (13254 <__printk_hook_install+0x8>)
   1324e:	6018      	str	r0, [r3, #0]
}
   13250:	4770      	bx	lr
   13252:	bf00      	nop
   13254:	2000058c 	.word	0x2000058c

00013258 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   13258:	b500      	push	{lr}
   1325a:	b083      	sub	sp, #12
   1325c:	4602      	mov	r2, r0
   1325e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   13260:	2100      	movs	r1, #0
   13262:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   13264:	a901      	add	r1, sp, #4
   13266:	4803      	ldr	r0, [pc, #12]	; (13274 <vprintk+0x1c>)
   13268:	f000 fb66 	bl	13938 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1326c:	b003      	add	sp, #12
   1326e:	f85d fb04 	ldr.w	pc, [sp], #4
   13272:	bf00      	nop
   13274:	00013239 	.word	0x00013239

00013278 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   13278:	b510      	push	{r4, lr}
   1327a:	b084      	sub	sp, #16
   1327c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1327e:	9001      	str	r0, [sp, #4]
   13280:	9102      	str	r1, [sp, #8]
   13282:	2100      	movs	r1, #0
   13284:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   13286:	a901      	add	r1, sp, #4
   13288:	4805      	ldr	r0, [pc, #20]	; (132a0 <vsnprintk+0x28>)
   1328a:	f000 fb55 	bl	13938 <cbvprintf>

	if (ctx.count < ctx.max) {
   1328e:	9b03      	ldr	r3, [sp, #12]
   13290:	9a02      	ldr	r2, [sp, #8]
   13292:	4293      	cmp	r3, r2
   13294:	da01      	bge.n	1329a <vsnprintk+0x22>
		str[ctx.count] = '\0';
   13296:	2200      	movs	r2, #0
   13298:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   1329a:	9803      	ldr	r0, [sp, #12]
   1329c:	b004      	add	sp, #16
   1329e:	bd10      	pop	{r4, pc}
   132a0:	000236a9 	.word	0x000236a9

000132a4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   132a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   132a8:	b083      	sub	sp, #12
   132aa:	4604      	mov	r4, r0
   132ac:	4608      	mov	r0, r1
   132ae:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   132b0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   132b2:	f013 0f08 	tst.w	r3, #8
   132b6:	d105      	bne.n	132c4 <process_event+0x20>
   132b8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   132bc:	2300      	movs	r3, #0
   132be:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   132c0:	9301      	str	r3, [sp, #4]
}
   132c2:	e069      	b.n	13398 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   132c4:	2901      	cmp	r1, #1
   132c6:	d009      	beq.n	132dc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   132c8:	f043 0320 	orr.w	r3, r3, #32
   132cc:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   132ce:	f385 8811 	msr	BASEPRI, r5
   132d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   132d6:	b003      	add	sp, #12
   132d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   132dc:	f043 0310 	orr.w	r3, r3, #16
   132e0:	8323      	strh	r3, [r4, #24]
   132e2:	e7f4      	b.n	132ce <process_event+0x2a>
			evt = process_recheck(mgr);
   132e4:	4620      	mov	r0, r4
   132e6:	f010 fa3a 	bl	2375e <process_recheck>
   132ea:	e057      	b.n	1339c <process_event+0xf8>
			res = mgr->last_res;
   132ec:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   132f0:	464a      	mov	r2, r9
   132f2:	4669      	mov	r1, sp
   132f4:	4620      	mov	r0, r4
   132f6:	f010 fa4b 	bl	23790 <process_complete>
		onoff_transition_fn transit = NULL;
   132fa:	2700      	movs	r7, #0
   132fc:	e05a      	b.n	133b4 <process_event+0x110>
			transit = mgr->transitions->start;
   132fe:	6923      	ldr	r3, [r4, #16]
   13300:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   13302:	2106      	movs	r1, #6
   13304:	4620      	mov	r0, r4
   13306:	f010 fa03 	bl	23710 <set_state>
		res = 0;
   1330a:	f04f 0900 	mov.w	r9, #0
   1330e:	e051      	b.n	133b4 <process_event+0x110>
			transit = mgr->transitions->stop;
   13310:	6923      	ldr	r3, [r4, #16]
   13312:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   13314:	2104      	movs	r1, #4
   13316:	4620      	mov	r0, r4
   13318:	f010 f9fa 	bl	23710 <set_state>
		res = 0;
   1331c:	f04f 0900 	mov.w	r9, #0
   13320:	e048      	b.n	133b4 <process_event+0x110>
			transit = mgr->transitions->reset;
   13322:	6923      	ldr	r3, [r4, #16]
   13324:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   13326:	2105      	movs	r1, #5
   13328:	4620      	mov	r0, r4
   1332a:	f010 f9f1 	bl	23710 <set_state>
		res = 0;
   1332e:	f04f 0900 	mov.w	r9, #0
   13332:	e03f      	b.n	133b4 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   13334:	2200      	movs	r2, #0
   13336:	e046      	b.n	133c6 <process_event+0x122>
   13338:	2200      	movs	r2, #0
   1333a:	e044      	b.n	133c6 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1333c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   13340:	8323      	strh	r3, [r4, #24]
   13342:	f385 8811 	msr	BASEPRI, r5
   13346:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   1334a:	2900      	cmp	r1, #0
   1334c:	d144      	bne.n	133d8 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   1334e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   13350:	b12b      	cbz	r3, 1335e <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   13352:	464b      	mov	r3, r9
   13354:	4642      	mov	r2, r8
   13356:	4669      	mov	r1, sp
   13358:	4620      	mov	r0, r4
   1335a:	f010 fa8f 	bl	2387c <notify_all>
			if (transit != NULL) {
   1335e:	b117      	cbz	r7, 13366 <process_event+0xc2>
				transit(mgr, transition_complete);
   13360:	4925      	ldr	r1, [pc, #148]	; (133f8 <process_event+0x154>)
   13362:	4620      	mov	r0, r4
   13364:	47b8      	blx	r7
	__asm__ volatile(
   13366:	f04f 0340 	mov.w	r3, #64	; 0x40
   1336a:	f3ef 8511 	mrs	r5, BASEPRI
   1336e:	f383 8812 	msr	BASEPRI_MAX, r3
   13372:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   13376:	8b23      	ldrh	r3, [r4, #24]
   13378:	f023 0308 	bic.w	r3, r3, #8
   1337c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1337e:	8b23      	ldrh	r3, [r4, #24]
   13380:	f013 0f10 	tst.w	r3, #16
   13384:	d02e      	beq.n	133e4 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   13386:	f023 0310 	bic.w	r3, r3, #16
   1338a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   1338c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   1338e:	8b26      	ldrh	r6, [r4, #24]
   13390:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   13394:	2800      	cmp	r0, #0
   13396:	d09a      	beq.n	132ce <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   13398:	2802      	cmp	r0, #2
   1339a:	d0a3      	beq.n	132e4 <process_event+0x40>
		if (evt == EVT_NOP) {
   1339c:	2800      	cmp	r0, #0
   1339e:	d096      	beq.n	132ce <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   133a0:	2801      	cmp	r0, #1
   133a2:	d0a3      	beq.n	132ec <process_event+0x48>
		} else if (evt == EVT_START) {
   133a4:	2803      	cmp	r0, #3
   133a6:	d0aa      	beq.n	132fe <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   133a8:	2804      	cmp	r0, #4
   133aa:	d0b1      	beq.n	13310 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   133ac:	2805      	cmp	r0, #5
   133ae:	d0b8      	beq.n	13322 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   133b0:	2700      	movs	r7, #0
		res = 0;
   133b2:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   133b4:	8b23      	ldrh	r3, [r4, #24]
   133b6:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   133ba:	45b0      	cmp	r8, r6
   133bc:	d0ba      	beq.n	13334 <process_event+0x90>
   133be:	68a2      	ldr	r2, [r4, #8]
   133c0:	2a00      	cmp	r2, #0
   133c2:	d0b9      	beq.n	13338 <process_event+0x94>
   133c4:	2201      	movs	r2, #1
		if (do_monitors
   133c6:	4611      	mov	r1, r2
   133c8:	2a00      	cmp	r2, #0
   133ca:	d1b7      	bne.n	1333c <process_event+0x98>
   133cc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   133ce:	2a00      	cmp	r2, #0
   133d0:	d1b4      	bne.n	1333c <process_event+0x98>
		    || (transit != NULL)) {
   133d2:	2f00      	cmp	r7, #0
   133d4:	d1b2      	bne.n	1333c <process_event+0x98>
   133d6:	e7d2      	b.n	1337e <process_event+0xda>
				notify_monitors(mgr, state, res);
   133d8:	464a      	mov	r2, r9
   133da:	4641      	mov	r1, r8
   133dc:	4620      	mov	r0, r4
   133de:	f010 f99f 	bl	23720 <notify_monitors>
   133e2:	e7b4      	b.n	1334e <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   133e4:	f013 0f20 	tst.w	r3, #32
   133e8:	d004      	beq.n	133f4 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   133ea:	f023 0320 	bic.w	r3, r3, #32
   133ee:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   133f0:	2002      	movs	r0, #2
   133f2:	e7cc      	b.n	1338e <process_event+0xea>
		evt = EVT_NOP;
   133f4:	2000      	movs	r0, #0
   133f6:	e7ca      	b.n	1338e <process_event+0xea>
   133f8:	000238ab 	.word	0x000238ab

000133fc <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   133fc:	b410      	push	{r4}
   133fe:	4604      	mov	r4, r0
	const char *sp = *str;
   13400:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   13402:	2000      	movs	r0, #0

	while (isdigit((int)(unsigned char)*sp)) {
   13404:	7813      	ldrb	r3, [r2, #0]
   13406:	4907      	ldr	r1, [pc, #28]	; (13424 <extract_decimal+0x28>)
   13408:	5c59      	ldrb	r1, [r3, r1]
   1340a:	f011 0f04 	tst.w	r1, #4
   1340e:	d006      	beq.n	1341e <extract_decimal+0x22>
		val = 10U * val + *sp++ - '0';
   13410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13414:	3201      	adds	r2, #1
   13416:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1341a:	3830      	subs	r0, #48	; 0x30
   1341c:	e7f2      	b.n	13404 <extract_decimal+0x8>
	}
	*str = sp;
   1341e:	6022      	str	r2, [r4, #0]
	return val;
}
   13420:	bc10      	pop	{r4}
   13422:	4770      	bx	lr
   13424:	0002ae4a 	.word	0x0002ae4a

00013428 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   13428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1342c:	b083      	sub	sp, #12
   1342e:	4604      	mov	r4, r0
   13430:	460d      	mov	r5, r1
   13432:	9201      	str	r2, [sp, #4]
   13434:	469a      	mov	sl, r3
   13436:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   1343a:	78d3      	ldrb	r3, [r2, #3]
   1343c:	4a31      	ldr	r2, [pc, #196]	; (13504 <encode_uint+0xdc>)
   1343e:	f813 b002 	ldrb.w	fp, [r3, r2]
   13442:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
   13446:	2b6f      	cmp	r3, #111	; 0x6f
   13448:	d00f      	beq.n	1346a <encode_uint+0x42>
   1344a:	d906      	bls.n	1345a <encode_uint+0x32>
   1344c:	2b70      	cmp	r3, #112	; 0x70
   1344e:	d00f      	beq.n	13470 <encode_uint+0x48>
   13450:	2b78      	cmp	r3, #120	; 0x78
   13452:	d110      	bne.n	13476 <encode_uint+0x4e>
		return 16;
   13454:	f04f 0910 	mov.w	r9, #16
   13458:	e023      	b.n	134a2 <encode_uint+0x7a>
	switch (specifier) {
   1345a:	2b58      	cmp	r3, #88	; 0x58
   1345c:	d002      	beq.n	13464 <encode_uint+0x3c>
   1345e:	f04f 090a 	mov.w	r9, #10
   13462:	e01e      	b.n	134a2 <encode_uint+0x7a>
		return 16;
   13464:	f04f 0910 	mov.w	r9, #16
   13468:	e01b      	b.n	134a2 <encode_uint+0x7a>
		return 8;
   1346a:	f04f 0908 	mov.w	r9, #8
   1346e:	e018      	b.n	134a2 <encode_uint+0x7a>
		return 16;
   13470:	f04f 0910 	mov.w	r9, #16
   13474:	e015      	b.n	134a2 <encode_uint+0x7a>
	switch (specifier) {
   13476:	f04f 090a 	mov.w	r9, #10
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   1347a:	e012      	b.n	134a2 <encode_uint+0x7a>

	do {
		unsigned int lsv = (unsigned int)(value % radix);

		*--bp = (lsv <= 9) ? ('0' + lsv)
   1347c:	b2d2      	uxtb	r2, r2
   1347e:	3230      	adds	r2, #48	; 0x30
   13480:	b2d2      	uxtb	r2, r2
   13482:	f808 2d01 	strb.w	r2, [r8, #-1]!
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
   13486:	4632      	mov	r2, r6
   13488:	463b      	mov	r3, r7
   1348a:	4620      	mov	r0, r4
   1348c:	4629      	mov	r1, r5
   1348e:	f7ed fdf9 	bl	1084 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   13492:	42bd      	cmp	r5, r7
   13494:	bf08      	it	eq
   13496:	42b4      	cmpeq	r4, r6
   13498:	d318      	bcc.n	134cc <encode_uint+0xa4>
   1349a:	45d0      	cmp	r8, sl
   1349c:	d916      	bls.n	134cc <encode_uint+0xa4>
		value /= radix;
   1349e:	4604      	mov	r4, r0
   134a0:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   134a2:	464e      	mov	r6, r9
   134a4:	2700      	movs	r7, #0
   134a6:	464a      	mov	r2, r9
   134a8:	463b      	mov	r3, r7
   134aa:	4620      	mov	r0, r4
   134ac:	4629      	mov	r1, r5
   134ae:	f7ed fde9 	bl	1084 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   134b2:	2a09      	cmp	r2, #9
   134b4:	d9e2      	bls.n	1347c <encode_uint+0x54>
   134b6:	f1bb 0f01 	cmp.w	fp, #1
   134ba:	d003      	beq.n	134c4 <encode_uint+0x9c>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   134bc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   134be:	3257      	adds	r2, #87	; 0x57
   134c0:	b2d2      	uxtb	r2, r2
   134c2:	e7de      	b.n	13482 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   134c4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   134c6:	3237      	adds	r2, #55	; 0x37
   134c8:	b2d2      	uxtb	r2, r2
   134ca:	e7da      	b.n	13482 <encode_uint+0x5a>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   134cc:	9b01      	ldr	r3, [sp, #4]
   134ce:	781b      	ldrb	r3, [r3, #0]
   134d0:	f013 0f20 	tst.w	r3, #32
   134d4:	d005      	beq.n	134e2 <encode_uint+0xba>
		if (radix == 8) {
   134d6:	f1b9 0f08 	cmp.w	r9, #8
   134da:	d006      	beq.n	134ea <encode_uint+0xc2>
			conv->altform_0 = true;
		} else if (radix == 16) {
   134dc:	f1b9 0f10 	cmp.w	r9, #16
   134e0:	d009      	beq.n	134f6 <encode_uint+0xce>
			;
		}
	}

	return bp;
}
   134e2:	4640      	mov	r0, r8
   134e4:	b003      	add	sp, #12
   134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   134ea:	9a01      	ldr	r2, [sp, #4]
   134ec:	7893      	ldrb	r3, [r2, #2]
   134ee:	f043 0308 	orr.w	r3, r3, #8
   134f2:	7093      	strb	r3, [r2, #2]
   134f4:	e7f5      	b.n	134e2 <encode_uint+0xba>
			conv->altform_0c = true;
   134f6:	9a01      	ldr	r2, [sp, #4]
   134f8:	7893      	ldrb	r3, [r2, #2]
   134fa:	f043 0310 	orr.w	r3, r3, #16
   134fe:	7093      	strb	r3, [r2, #2]
   13500:	e7ef      	b.n	134e2 <encode_uint+0xba>
   13502:	bf00      	nop
   13504:	0002ae4a 	.word	0x0002ae4a

00013508 <encode_float>:
			  struct conversion *conv,
			  int precision,
			  char *sign,
			  char *bps,
			  const char **bpe)
{
   13508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1350c:	b089      	sub	sp, #36	; 0x24
   1350e:	4692      	mov	sl, r2
   13510:	461d      	mov	r5, r3
	char *buf = bps;

	/* Prepend the sign: '-' if negative, flags control
	 * non-negative behavior.
	 */
	if ((u.u64 & SIGN_MASK) != 0U) {
   13512:	2800      	cmp	r0, #0
   13514:	f171 0300 	sbcs.w	r3, r1, #0
   13518:	db08      	blt.n	1352c <encode_float+0x24>
		*sign = '-';
	} else if (conv->flag_plus) {
   1351a:	f89a 3000 	ldrb.w	r3, [sl]
   1351e:	f013 0f08 	tst.w	r3, #8
   13522:	d014      	beq.n	1354e <encode_float+0x46>
		*sign = '+';
   13524:	232b      	movs	r3, #43	; 0x2b
   13526:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13528:	7013      	strb	r3, [r2, #0]
   1352a:	e002      	b.n	13532 <encode_float+0x2a>
		*sign = '-';
   1352c:	232d      	movs	r3, #45	; 0x2d
   1352e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13530:	7013      	strb	r3, [r2, #0]
	}

	/* Extract the non-negative offset exponent and fraction.  Record
	 * whether the value is subnormal.
	 */
	char c = conv->specifier;
   13532:	f89a b003 	ldrb.w	fp, [sl, #3]
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   13536:	f3c1 540a 	ubfx	r4, r1, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   1353a:	4602      	mov	r2, r0
   1353c:	f3c1 0313 	ubfx	r3, r1, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   13540:	b964      	cbnz	r4, 1355c <encode_float+0x54>
   13542:	ea52 0103 	orrs.w	r1, r2, r3
   13546:	d130      	bne.n	135aa <encode_float+0xa2>
   13548:	f04f 0e00 	mov.w	lr, #0
   1354c:	e008      	b.n	13560 <encode_float+0x58>
	} else if (conv->flag_space) {
   1354e:	f013 0f10 	tst.w	r3, #16
   13552:	d0ee      	beq.n	13532 <encode_float+0x2a>
		*sign = ' ';
   13554:	2320      	movs	r3, #32
   13556:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13558:	7013      	strb	r3, [r2, #0]
   1355a:	e7ea      	b.n	13532 <encode_float+0x2a>
	bool is_subnormal = (expo == 0) && (fract != 0);
   1355c:	f04f 0e00 	mov.w	lr, #0

	/* Exponent of all-ones signals infinity or NaN, which are
	 * text constants regardless of specifier.
	 */
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   13560:	f240 71ff 	movw	r1, #2047	; 0x7ff
   13564:	428c      	cmp	r4, r1
   13566:	d023      	beq.n	135b0 <encode_float+0xa8>
		*bpe = buf;
		return bps;
	}

	/* The case of an F specifier is no longer relevant. */
	if (c == 'F') {
   13568:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
   1356c:	d060      	beq.n	13630 <encode_float+0x128>

	/* Remainder of code operates on a 64-bit fraction, so shift up (and
	 * discard garbage from the exponent where the implicit 1 would be
	 * stored).
	 */
	fract <<= EXPONENT_BITS;
   1356e:	ea4f 2cc3 	mov.w	ip, r3, lsl #11
   13572:	ea4c 5c52 	orr.w	ip, ip, r2, lsr #21
   13576:	02d2      	lsls	r2, r2, #11
	fract &= ~SIGN_MASK;
   13578:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
   1357c:	9206      	str	r2, [sp, #24]
   1357e:	f8cd c01c 	str.w	ip, [sp, #28]

	/* Non-zero values need normalization. */
	if ((expo | fract) != 0) {
   13582:	ea44 0002 	orr.w	r0, r4, r2
   13586:	17e3      	asrs	r3, r4, #31
   13588:	ea43 010c 	orr.w	r1, r3, ip
   1358c:	ea50 0301 	orrs.w	r3, r0, r1
   13590:	d008      	beq.n	135a4 <encode_float+0x9c>
		if (is_subnormal) {
   13592:	f1be 0f00 	cmp.w	lr, #0
   13596:	d14f      	bne.n	13638 <encode_float+0x130>
		}
		/* Adjust the offset exponent to be signed rather than offset,
		 * and set the implicit 1 bit in the (shifted) 53-bit
		 * fraction.
		 */
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   13598:	f2a4 34fe 	subw	r4, r4, #1022	; 0x3fe
		fract |= BIT_63;
   1359c:	9b07      	ldr	r3, [sp, #28]
   1359e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   135a2:	9307      	str	r3, [sp, #28]
		c = 'f';
   135a4:	f04f 0800 	mov.w	r8, #0
   135a8:	e061      	b.n	1366e <encode_float+0x166>
	bool is_subnormal = (expo == 0) && (fract != 0);
   135aa:	f04f 0e01 	mov.w	lr, #1
   135ae:	e7d7      	b.n	13560 <encode_float+0x58>
		if (fract == 0) {
   135b0:	4313      	orrs	r3, r2
   135b2:	d122      	bne.n	135fa <encode_float+0xf2>
			if (isupper((int)c)) {
   135b4:	4bad      	ldr	r3, [pc, #692]	; (1386c <encode_float+0x364>)
   135b6:	f81b 3003 	ldrb.w	r3, [fp, r3]
   135ba:	f003 0303 	and.w	r3, r3, #3
   135be:	2b01      	cmp	r3, #1
   135c0:	d011      	beq.n	135e6 <encode_float+0xde>
				*buf++ = 'i';
   135c2:	2369      	movs	r3, #105	; 0x69
   135c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   135c6:	7013      	strb	r3, [r2, #0]
				*buf++ = 'n';
   135c8:	236e      	movs	r3, #110	; 0x6e
   135ca:	7053      	strb	r3, [r2, #1]
				*buf++ = 'f';
   135cc:	3203      	adds	r2, #3
   135ce:	2366      	movs	r3, #102	; 0x66
   135d0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   135d2:	708b      	strb	r3, [r1, #2]
		conv->flag_zero = false;
   135d4:	f89a 3000 	ldrb.w	r3, [sl]
   135d8:	f36f 1386 	bfc	r3, #6, #1
   135dc:	f88a 3000 	strb.w	r3, [sl]
		*bpe = buf;
   135e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   135e2:	601a      	str	r2, [r3, #0]
		return bps;
   135e4:	e192      	b.n	1390c <encode_float+0x404>
				*buf++ = 'I';
   135e6:	2349      	movs	r3, #73	; 0x49
   135e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   135ea:	7013      	strb	r3, [r2, #0]
				*buf++ = 'N';
   135ec:	234e      	movs	r3, #78	; 0x4e
   135ee:	7053      	strb	r3, [r2, #1]
				*buf++ = 'F';
   135f0:	3203      	adds	r2, #3
   135f2:	2346      	movs	r3, #70	; 0x46
   135f4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   135f6:	708b      	strb	r3, [r1, #2]
   135f8:	e7ec      	b.n	135d4 <encode_float+0xcc>
			if (isupper((int)c)) {
   135fa:	4b9c      	ldr	r3, [pc, #624]	; (1386c <encode_float+0x364>)
   135fc:	f81b 3003 	ldrb.w	r3, [fp, r3]
   13600:	f003 0303 	and.w	r3, r3, #3
   13604:	2b01      	cmp	r3, #1
   13606:	d009      	beq.n	1361c <encode_float+0x114>
				*buf++ = 'n';
   13608:	236e      	movs	r3, #110	; 0x6e
   1360a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1360c:	7013      	strb	r3, [r2, #0]
				*buf++ = 'a';
   1360e:	2261      	movs	r2, #97	; 0x61
   13610:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13612:	704a      	strb	r2, [r1, #1]
				*buf++ = 'n';
   13614:	460a      	mov	r2, r1
   13616:	3203      	adds	r2, #3
   13618:	708b      	strb	r3, [r1, #2]
   1361a:	e7db      	b.n	135d4 <encode_float+0xcc>
				*buf++ = 'N';
   1361c:	234e      	movs	r3, #78	; 0x4e
   1361e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   13620:	7013      	strb	r3, [r2, #0]
				*buf++ = 'A';
   13622:	2241      	movs	r2, #65	; 0x41
   13624:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13626:	704a      	strb	r2, [r1, #1]
				*buf++ = 'N';
   13628:	460a      	mov	r2, r1
   1362a:	3203      	adds	r2, #3
   1362c:	708b      	strb	r3, [r1, #2]
   1362e:	e7d1      	b.n	135d4 <encode_float+0xcc>
		c = 'f';
   13630:	f04f 0b66 	mov.w	fp, #102	; 0x66
   13634:	e79b      	b.n	1356e <encode_float+0x66>
				expo--;
   13636:	3c01      	subs	r4, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   13638:	9b06      	ldr	r3, [sp, #24]
   1363a:	9a07      	ldr	r2, [sp, #28]
   1363c:	eb13 0803 	adds.w	r8, r3, r3
   13640:	eb42 0902 	adc.w	r9, r2, r2
   13644:	e9cd 8906 	strd	r8, r9, [sp, #24]
   13648:	f1b8 0f00 	cmp.w	r8, #0
   1364c:	f179 0300 	sbcs.w	r3, r9, #0
   13650:	daf1      	bge.n	13636 <encode_float+0x12e>
   13652:	e7a1      	b.n	13598 <encode_float+0x90>
			fract >>= 1;
			expo++;
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));

		/* Perform fract * 5 * 2 / 10 */
		fract *= 5U;
   13654:	ea4f 0c82 	mov.w	ip, r2, lsl #2
   13658:	0098      	lsls	r0, r3, #2
   1365a:	ea4c 7493 	orr.w	r4, ip, r3, lsr #30
   1365e:	18c3      	adds	r3, r0, r3
   13660:	eb44 0202 	adc.w	r2, r4, r2
   13664:	9306      	str	r3, [sp, #24]
   13666:	9207      	str	r2, [sp, #28]
		expo++;
   13668:	1c8c      	adds	r4, r1, #2
		decexp--;
   1366a:	f108 38ff 	add.w	r8, r8, #4294967295
	while (expo < -2) {
   1366e:	f114 0f02 	cmn.w	r4, #2
   13672:	da26      	bge.n	136c2 <encode_float+0x1ba>
			fract >>= 1;
   13674:	9907      	ldr	r1, [sp, #28]
   13676:	9b06      	ldr	r3, [sp, #24]
   13678:	085b      	lsrs	r3, r3, #1
   1367a:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
   1367e:	084a      	lsrs	r2, r1, #1
   13680:	9306      	str	r3, [sp, #24]
   13682:	9207      	str	r2, [sp, #28]
			expo++;
   13684:	4621      	mov	r1, r4
   13686:	3401      	adds	r4, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   13688:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   1368c:	d2f2      	bcs.n	13674 <encode_float+0x16c>
   1368e:	e7e1      	b.n	13654 <encode_float+0x14c>
		/*
		 * Perform fract / 5 / 2 * 10.
		 * The +2 is there to do round the result of the division
		 * by 5 not to lose too much precision in extreme cases.
		 */
		fract += 2;
   13690:	9b06      	ldr	r3, [sp, #24]
   13692:	3302      	adds	r3, #2
   13694:	9a07      	ldr	r2, [sp, #28]
   13696:	f142 0200 	adc.w	r2, r2, #0
   1369a:	9306      	str	r3, [sp, #24]
   1369c:	9207      	str	r2, [sp, #28]
		_ldiv5(&fract);
   1369e:	a806      	add	r0, sp, #24
   136a0:	f010 fb7c 	bl	23d9c <_ldiv5>
		expo--;
   136a4:	3c01      	subs	r4, #1
		decexp++;
   136a6:	f108 0801 	add.w	r8, r8, #1

		/* Bring back our fractional number to full scale */
		do {
			fract <<= 1;
   136aa:	9b06      	ldr	r3, [sp, #24]
   136ac:	9a07      	ldr	r2, [sp, #28]
   136ae:	18de      	adds	r6, r3, r3
   136b0:	eb42 0702 	adc.w	r7, r2, r2
   136b4:	e9cd 6706 	strd	r6, r7, [sp, #24]
			expo--;
   136b8:	3c01      	subs	r4, #1
		} while (!(fract & BIT_63));
   136ba:	2e00      	cmp	r6, #0
   136bc:	f177 0300 	sbcs.w	r3, r7, #0
   136c0:	daf3      	bge.n	136aa <encode_float+0x1a2>
	while (expo > 0) {
   136c2:	2c00      	cmp	r4, #0
   136c4:	dce4      	bgt.n	13690 <encode_float+0x188>
	/*
	 * The binary fractional point is located somewhere above bit 63.
	 * Move it between bits 59 and 60 to give 4 bits of room to the
	 * integer part.
	 */
	fract >>= (4 - expo);
   136c6:	f1c4 0104 	rsb	r1, r4, #4
   136ca:	9a07      	ldr	r2, [sp, #28]
   136cc:	341c      	adds	r4, #28
   136ce:	f1a1 0020 	sub.w	r0, r1, #32
   136d2:	9b06      	ldr	r3, [sp, #24]
   136d4:	40cb      	lsrs	r3, r1
   136d6:	fa02 f404 	lsl.w	r4, r2, r4
   136da:	4323      	orrs	r3, r4
   136dc:	fa22 f000 	lsr.w	r0, r2, r0
   136e0:	4303      	orrs	r3, r0
   136e2:	40ca      	lsrs	r2, r1
   136e4:	9306      	str	r3, [sp, #24]
   136e6:	9207      	str	r2, [sp, #28]

	if ((c == 'g') || (c == 'G')) {
   136e8:	f1bb 0f67 	cmp.w	fp, #103	; 0x67
   136ec:	d012      	beq.n	13714 <encode_float+0x20c>
   136ee:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
   136f2:	d00f      	beq.n	13714 <encode_float+0x20c>
	bool prune_zero = false;
   136f4:	2700      	movs	r7, #0
			prune_zero = true;
		}
	}

	int decimals;
	if (c == 'f') {
   136f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   136fa:	d029      	beq.n	13750 <encode_float+0x248>
		decimals = precision + decexp;
		if (decimals < 0) {
			decimals = 0;
		}
	} else {
		decimals = precision + 1;
   136fc:	1c6c      	adds	r4, r5, #1
	}

	int digit_count = 16;
   136fe:	2310      	movs	r3, #16
   13700:	9305      	str	r3, [sp, #20]

	if (decimals > 16) {
   13702:	429c      	cmp	r4, r3
   13704:	dd00      	ble.n	13708 <encode_float+0x200>
		decimals = 16;
   13706:	461c      	mov	r4, r3
	}

	/* Round the value to the last digit being printed. */
	uint64_t round = BIT64(59); /* 0.5 */
   13708:	2200      	movs	r2, #0
   1370a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   1370e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	while (decimals--) {
   13712:	e028      	b.n	13766 <encode_float+0x25e>
		if (decexp < (-4 + 1) || decexp > precision) {
   13714:	f118 0f03 	cmn.w	r8, #3
   13718:	db01      	blt.n	1371e <encode_float+0x216>
   1371a:	45a8      	cmp	r8, r5
   1371c:	dd11      	ble.n	13742 <encode_float+0x23a>
			c += 'e' - 'g';  /* e or E */
   1371e:	f1ab 0b02 	sub.w	fp, fp, #2
   13722:	fa5f fb8b 	uxtb.w	fp, fp
			if (precision > 0) {
   13726:	2d00      	cmp	r5, #0
   13728:	dd00      	ble.n	1372c <encode_float+0x224>
				precision--;
   1372a:	3d01      	subs	r5, #1
		if (!conv->flag_hash && (precision > 0)) {
   1372c:	f89a 3000 	ldrb.w	r3, [sl]
   13730:	f3c3 1740 	ubfx	r7, r3, #5, #1
   13734:	f013 0f20 	tst.w	r3, #32
   13738:	d108      	bne.n	1374c <encode_float+0x244>
   1373a:	2d00      	cmp	r5, #0
   1373c:	dddb      	ble.n	136f6 <encode_float+0x1ee>
			prune_zero = true;
   1373e:	2701      	movs	r7, #1
   13740:	e7d9      	b.n	136f6 <encode_float+0x1ee>
			precision -= decexp;
   13742:	eba5 0508 	sub.w	r5, r5, r8
			c = 'f';
   13746:	f04f 0b66 	mov.w	fp, #102	; 0x66
   1374a:	e7ef      	b.n	1372c <encode_float+0x224>
	bool prune_zero = false;
   1374c:	2700      	movs	r7, #0
   1374e:	e7d2      	b.n	136f6 <encode_float+0x1ee>
		if (decimals < 0) {
   13750:	eb18 0405 	adds.w	r4, r8, r5
   13754:	d5d3      	bpl.n	136fe <encode_float+0x1f6>
	int digit_count = 16;
   13756:	2310      	movs	r3, #16
   13758:	9305      	str	r3, [sp, #20]
			decimals = 0;
   1375a:	2400      	movs	r4, #0
   1375c:	e7d4      	b.n	13708 <encode_float+0x200>
		_ldiv10(&round);
   1375e:	a802      	add	r0, sp, #8
   13760:	f010 fb3a 	bl	23dd8 <_ldiv10>
	while (decimals--) {
   13764:	4634      	mov	r4, r6
   13766:	1e66      	subs	r6, r4, #1
   13768:	2c00      	cmp	r4, #0
   1376a:	d1f8      	bne.n	1375e <encode_float+0x256>
	}
	fract += round;
   1376c:	9b06      	ldr	r3, [sp, #24]
   1376e:	9a02      	ldr	r2, [sp, #8]
   13770:	189b      	adds	r3, r3, r2
   13772:	9300      	str	r3, [sp, #0]
   13774:	9a07      	ldr	r2, [sp, #28]
   13776:	9b03      	ldr	r3, [sp, #12]
   13778:	eb42 0303 	adc.w	r3, r2, r3
   1377c:	9301      	str	r3, [sp, #4]
   1377e:	e9dd 2300 	ldrd	r2, r3, [sp]
   13782:	e9cd 2306 	strd	r2, r3, [sp, #24]
	/* Make sure rounding didn't make fract >= 1.0 */
	if (fract >= BIT64(60)) {
   13786:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   1378a:	bf08      	it	eq
   1378c:	2a00      	cmpeq	r2, #0
   1378e:	d207      	bcs.n	137a0 <encode_float+0x298>
		_ldiv10(&fract);
		decexp++;
	}

	if (c == 'f') {
   13790:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
   13794:	d145      	bne.n	13822 <encode_float+0x31a>
		if (decexp > 0) {
   13796:	f1b8 0f00 	cmp.w	r8, #0
   1379a:	dd3d      	ble.n	13818 <encode_float+0x310>
	char *buf = bps;
   1379c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1379e:	e00d      	b.n	137bc <encode_float+0x2b4>
		_ldiv10(&fract);
   137a0:	a806      	add	r0, sp, #24
   137a2:	f010 fb19 	bl	23dd8 <_ldiv10>
		decexp++;
   137a6:	f108 0801 	add.w	r8, r8, #1
   137aa:	e7f1      	b.n	13790 <encode_float+0x288>
			/* Emit the digits above the decimal point. */
			while (decexp > 0 && digit_count > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
   137ac:	a905      	add	r1, sp, #20
   137ae:	a806      	add	r0, sp, #24
   137b0:	f010 fb1e 	bl	23df0 <_get_digit>
   137b4:	f806 0b01 	strb.w	r0, [r6], #1
				decexp--;
   137b8:	f108 38ff 	add.w	r8, r8, #4294967295
			while (decexp > 0 && digit_count > 0) {
   137bc:	f1b8 0f00 	cmp.w	r8, #0
   137c0:	dd02      	ble.n	137c8 <encode_float+0x2c0>
   137c2:	9b05      	ldr	r3, [sp, #20]
   137c4:	2b00      	cmp	r3, #0
   137c6:	dcf1      	bgt.n	137ac <encode_float+0x2a4>
			}

			conv->pad0_value = decexp;
   137c8:	f8ca 8004 	str.w	r8, [sl, #4]

			decexp = 0;
   137cc:	46a0      	mov	r8, r4
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   137ce:	f89a 3000 	ldrb.w	r3, [sl]
   137d2:	f013 0f20 	tst.w	r3, #32
   137d6:	d101      	bne.n	137dc <encode_float+0x2d4>
   137d8:	2d00      	cmp	r5, #0
   137da:	dd02      	ble.n	137e2 <encode_float+0x2da>
			*buf++ = '.';
   137dc:	232e      	movs	r3, #46	; 0x2e
   137de:	f806 3b01 	strb.w	r3, [r6], #1
		}

		if (decexp < 0 && precision > 0) {
   137e2:	f1b8 0f00 	cmp.w	r8, #0
   137e6:	da33      	bge.n	13850 <encode_float+0x348>
   137e8:	2d00      	cmp	r5, #0
   137ea:	dd31      	ble.n	13850 <encode_float+0x348>
			conv->pad0_value = -decexp;
   137ec:	f1c8 0300 	rsb	r3, r8, #0
   137f0:	f8ca 3004 	str.w	r3, [sl, #4]
			if (conv->pad0_value > precision) {
   137f4:	429d      	cmp	r5, r3
   137f6:	da01      	bge.n	137fc <encode_float+0x2f4>
				conv->pad0_value = precision;
   137f8:	f8ca 5004 	str.w	r5, [sl, #4]
			}

			precision -= conv->pad0_value;
   137fc:	f8da 3004 	ldr.w	r3, [sl, #4]
   13800:	1aed      	subs	r5, r5, r3
			conv->pad_postdp = (conv->pad0_value > 0);
   13802:	2b00      	cmp	r3, #0
   13804:	bfd4      	ite	le
   13806:	2300      	movle	r3, #0
   13808:	2301      	movgt	r3, #1
   1380a:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1380e:	f363 1245 	bfi	r2, r3, #5, #1
   13812:	f88a 2002 	strb.w	r2, [sl, #2]
   13816:	e01b      	b.n	13850 <encode_float+0x348>
			*buf++ = '0';
   13818:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1381a:	2330      	movs	r3, #48	; 0x30
   1381c:	f806 3b01 	strb.w	r3, [r6], #1
   13820:	e7d5      	b.n	137ce <encode_float+0x2c6>
		}
	} else { /* e or E */
		/* Emit the one digit before the decimal.  If it's not zero,
		 * this is significant so reduce the base-10 exponent.
		 */
		*buf = _get_digit(&fract, &digit_count);
   13822:	a905      	add	r1, sp, #20
   13824:	a806      	add	r0, sp, #24
   13826:	f010 fae3 	bl	23df0 <_get_digit>
   1382a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1382c:	f806 0b01 	strb.w	r0, [r6], #1
		if (*buf++ != '0') {
   13830:	2830      	cmp	r0, #48	; 0x30
   13832:	d001      	beq.n	13838 <encode_float+0x330>
			decexp--;
   13834:	f108 38ff 	add.w	r8, r8, #4294967295
		}

		/* Emit the decimal point only if required by the alternative
		 * format, or if more digits are to follow.
		 */
		if (conv->flag_hash || (precision > 0)) {
   13838:	f89a 3000 	ldrb.w	r3, [sl]
   1383c:	f013 0f20 	tst.w	r3, #32
   13840:	d101      	bne.n	13846 <encode_float+0x33e>
   13842:	2d00      	cmp	r5, #0
   13844:	dd04      	ble.n	13850 <encode_float+0x348>
			*buf++ = '.';
   13846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13848:	1c9e      	adds	r6, r3, #2
   1384a:	232e      	movs	r3, #46	; 0x2e
   1384c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1384e:	7053      	strb	r3, [r2, #1]
		}
	}

	while (precision > 0 && digit_count > 0) {
   13850:	2d00      	cmp	r5, #0
   13852:	dd0d      	ble.n	13870 <encode_float+0x368>
   13854:	9b05      	ldr	r3, [sp, #20]
   13856:	2b00      	cmp	r3, #0
   13858:	dd0a      	ble.n	13870 <encode_float+0x368>
		*buf++ = _get_digit(&fract, &digit_count);
   1385a:	a905      	add	r1, sp, #20
   1385c:	a806      	add	r0, sp, #24
   1385e:	f010 fac7 	bl	23df0 <_get_digit>
   13862:	f806 0b01 	strb.w	r0, [r6], #1
		precision--;
   13866:	3d01      	subs	r5, #1
   13868:	e7f2      	b.n	13850 <encode_float+0x348>
   1386a:	bf00      	nop
   1386c:	0002ae4a 	.word	0x0002ae4a
	}

	conv->pad0_pre_exp = precision;
   13870:	f8ca 5008 	str.w	r5, [sl, #8]

	if (prune_zero) {
   13874:	b157      	cbz	r7, 1388c <encode_float+0x384>
		conv->pad0_pre_exp = 0;
   13876:	2300      	movs	r3, #0
   13878:	f8ca 3008 	str.w	r3, [sl, #8]
		while (*--buf == '0') {
   1387c:	4633      	mov	r3, r6
   1387e:	461e      	mov	r6, r3
   13880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   13884:	2a30      	cmp	r2, #48	; 0x30
   13886:	d0fa      	beq.n	1387e <encode_float+0x376>
			;
		}
		if (*buf != '.') {
   13888:	2a2e      	cmp	r2, #46	; 0x2e
   1388a:	d043      	beq.n	13914 <encode_float+0x40c>
			buf++;
		}
	}

	/* Emit the explicit exponent, if format requires it. */
	if ((c == 'e') || (c == 'E')) {
   1388c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
   13890:	d002      	beq.n	13898 <encode_float+0x390>
   13892:	f1bb 0f45 	cmp.w	fp, #69	; 0x45
   13896:	d12a      	bne.n	138ee <encode_float+0x3e6>
		*buf++ = c;
   13898:	f886 b000 	strb.w	fp, [r6]
		if (decexp < 0) {
   1389c:	f1b8 0f00 	cmp.w	r8, #0
   138a0:	db3a      	blt.n	13918 <encode_float+0x410>
			decexp = -decexp;
			*buf++ = '-';
		} else {
			*buf++ = '+';
   138a2:	1cb2      	adds	r2, r6, #2
   138a4:	232b      	movs	r3, #43	; 0x2b
   138a6:	7073      	strb	r3, [r6, #1]
		}

		/* At most 3 digits to the decimal.  Spit them out. */
		if (decexp >= 100) {
   138a8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
   138ac:	dd0d      	ble.n	138ca <encode_float+0x3c2>
			*buf++ = (decexp / 100) + '0';
   138ae:	4920      	ldr	r1, [pc, #128]	; (13930 <encode_float+0x428>)
   138b0:	fb81 3108 	smull	r3, r1, r1, r8
   138b4:	ea4f 73e8 	mov.w	r3, r8, asr #31
   138b8:	ebc3 1361 	rsb	r3, r3, r1, asr #5
   138bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
   138c0:	f802 1b01 	strb.w	r1, [r2], #1
			decexp %= 100;
   138c4:	2164      	movs	r1, #100	; 0x64
   138c6:	fb01 8813 	mls	r8, r1, r3, r8
		}

		*buf++ = (decexp / 10) + '0';
   138ca:	491a      	ldr	r1, [pc, #104]	; (13934 <encode_float+0x42c>)
   138cc:	fb81 3108 	smull	r3, r1, r1, r8
   138d0:	ea4f 73e8 	mov.w	r3, r8, asr #31
   138d4:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
   138d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   138dc:	4616      	mov	r6, r2
   138de:	f806 1b02 	strb.w	r1, [r6], #2
		*buf++ = (decexp % 10) + '0';
   138e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   138e6:	eba8 0343 	sub.w	r3, r8, r3, lsl #1
   138ea:	3330      	adds	r3, #48	; 0x30
   138ec:	7053      	strb	r3, [r2, #1]
	}

	/* Cache whether there's padding required */
	conv->pad_fp = (conv->pad0_value > 0)
   138ee:	f8da 3004 	ldr.w	r3, [sl, #4]
		|| (conv->pad0_pre_exp > 0);
   138f2:	2b00      	cmp	r3, #0
   138f4:	dd16      	ble.n	13924 <encode_float+0x41c>
   138f6:	2401      	movs	r4, #1
	conv->pad_fp = (conv->pad0_value > 0)
   138f8:	f89a 3002 	ldrb.w	r3, [sl, #2]
   138fc:	f364 1386 	bfi	r3, r4, #6, #1
   13900:	f88a 3002 	strb.w	r3, [sl, #2]

	/* Set the end of the encoded sequence, and return its start.  Also
	 * store EOS as a non-digit/non-decimal value so we don't have to
	 * check against bpe when iterating in multiple places.
	 */
	*bpe = buf;
   13904:	9b14      	ldr	r3, [sp, #80]	; 0x50
   13906:	601e      	str	r6, [r3, #0]
	*buf = 0;
   13908:	2300      	movs	r3, #0
   1390a:	7033      	strb	r3, [r6, #0]
	return bps;
}
   1390c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1390e:	b009      	add	sp, #36	; 0x24
   13910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		while (*--buf == '0') {
   13914:	461e      	mov	r6, r3
   13916:	e7b9      	b.n	1388c <encode_float+0x384>
			decexp = -decexp;
   13918:	f1c8 0800 	rsb	r8, r8, #0
			*buf++ = '-';
   1391c:	1cb2      	adds	r2, r6, #2
   1391e:	232d      	movs	r3, #45	; 0x2d
   13920:	7073      	strb	r3, [r6, #1]
   13922:	e7c1      	b.n	138a8 <encode_float+0x3a0>
		|| (conv->pad0_pre_exp > 0);
   13924:	f8da 3008 	ldr.w	r3, [sl, #8]
   13928:	2b00      	cmp	r3, #0
   1392a:	dde5      	ble.n	138f8 <encode_float+0x3f0>
   1392c:	2401      	movs	r4, #1
   1392e:	e7e3      	b.n	138f8 <encode_float+0x3f0>
   13930:	51eb851f 	.word	0x51eb851f
   13934:	66666667 	.word	0x66666667

00013938 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   13938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1393c:	b099      	sub	sp, #100	; 0x64
   1393e:	4606      	mov	r6, r0
   13940:	460d      	mov	r5, r1
   13942:	4617      	mov	r7, r2
   13944:	9305      	str	r3, [sp, #20]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   13946:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   13948:	e000      	b.n	1394c <cbvprintf+0x14>
		if (*fp != '%') {
			OUTC(*fp++);
   1394a:	3401      	adds	r4, #1
	while (*fp != 0) {
   1394c:	7838      	ldrb	r0, [r7, #0]
   1394e:	2800      	cmp	r0, #0
   13950:	f000 8593 	beq.w	1447a <cbvprintf+0xb42>
		if (*fp != '%') {
   13954:	2825      	cmp	r0, #37	; 0x25
   13956:	d007      	beq.n	13968 <cbvprintf+0x30>
			OUTC(*fp++);
   13958:	3701      	adds	r7, #1
   1395a:	4629      	mov	r1, r5
   1395c:	47b0      	blx	r6
   1395e:	2800      	cmp	r0, #0
   13960:	daf3      	bge.n	1394a <cbvprintf+0x12>
	}

	return count;
#undef OUTS
#undef OUTC
}
   13962:	b019      	add	sp, #100	; 0x64
   13964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} state = {
   13968:	2300      	movs	r3, #0
   1396a:	930a      	str	r3, [sp, #40]	; 0x28
   1396c:	930b      	str	r3, [sp, #44]	; 0x2c
   1396e:	930f      	str	r3, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   13970:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
   13974:	9208      	str	r2, [sp, #32]
		char sign = 0;
   13976:	f88d 301f 	strb.w	r3, [sp, #31]
	*conv = (struct conversion) {
   1397a:	930c      	str	r3, [sp, #48]	; 0x30
   1397c:	930d      	str	r3, [sp, #52]	; 0x34
   1397e:	930e      	str	r3, [sp, #56]	; 0x38
	++sp;
   13980:	f107 0901 	add.w	r9, r7, #1
	if (*sp == '%') {
   13984:	787b      	ldrb	r3, [r7, #1]
   13986:	2b25      	cmp	r3, #37	; 0x25
   13988:	d002      	beq.n	13990 <cbvprintf+0x58>
	bool loop = true;
   1398a:	f04f 0801 	mov.w	r8, #1
   1398e:	e031      	b.n	139f4 <cbvprintf+0xbc>
		conv->specifier = *sp++;
   13990:	f107 0902 	add.w	r9, r7, #2
   13994:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		return sp;
   13998:	e1ae      	b.n	13cf8 <cbvprintf+0x3c0>
			conv->flag_dash = true;
   1399a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1399e:	f043 0304 	orr.w	r3, r3, #4
   139a2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (loop) {
   139a6:	f1b8 0f00 	cmp.w	r8, #0
   139aa:	d020      	beq.n	139ee <cbvprintf+0xb6>
			++sp;
   139ac:	f109 0901 	add.w	r9, r9, #1
   139b0:	e01d      	b.n	139ee <cbvprintf+0xb6>
			conv->flag_plus = true;
   139b2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   139b6:	f043 0308 	orr.w	r3, r3, #8
   139ba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   139be:	e7f2      	b.n	139a6 <cbvprintf+0x6e>
			conv->flag_space = true;
   139c0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   139c4:	f043 0310 	orr.w	r3, r3, #16
   139c8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   139cc:	e7eb      	b.n	139a6 <cbvprintf+0x6e>
			conv->flag_hash = true;
   139ce:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   139d2:	f043 0320 	orr.w	r3, r3, #32
   139d6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   139da:	e7e4      	b.n	139a6 <cbvprintf+0x6e>
			conv->flag_zero = true;
   139dc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   139e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   139e4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
			break;
   139e8:	e7dd      	b.n	139a6 <cbvprintf+0x6e>
		switch (*sp) {
   139ea:	f04f 0800 	mov.w	r8, #0
	} while (loop);
   139ee:	f1b8 0f00 	cmp.w	r8, #0
   139f2:	d029      	beq.n	13a48 <cbvprintf+0x110>
		switch (*sp) {
   139f4:	f899 3000 	ldrb.w	r3, [r9]
   139f8:	3b20      	subs	r3, #32
   139fa:	2b10      	cmp	r3, #16
   139fc:	d8f5      	bhi.n	139ea <cbvprintf+0xb2>
   139fe:	a201      	add	r2, pc, #4	; (adr r2, 13a04 <cbvprintf+0xcc>)
   13a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13a04:	000139c1 	.word	0x000139c1
   13a08:	000139eb 	.word	0x000139eb
   13a0c:	000139eb 	.word	0x000139eb
   13a10:	000139cf 	.word	0x000139cf
   13a14:	000139eb 	.word	0x000139eb
   13a18:	000139eb 	.word	0x000139eb
   13a1c:	000139eb 	.word	0x000139eb
   13a20:	000139eb 	.word	0x000139eb
   13a24:	000139eb 	.word	0x000139eb
   13a28:	000139eb 	.word	0x000139eb
   13a2c:	000139eb 	.word	0x000139eb
   13a30:	000139b3 	.word	0x000139b3
   13a34:	000139eb 	.word	0x000139eb
   13a38:	0001399b 	.word	0x0001399b
   13a3c:	000139eb 	.word	0x000139eb
   13a40:	000139eb 	.word	0x000139eb
   13a44:	000139dd 	.word	0x000139dd
	if (conv->flag_zero && conv->flag_dash) {
   13a48:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13a4c:	f003 0344 	and.w	r3, r3, #68	; 0x44
   13a50:	2b44      	cmp	r3, #68	; 0x44
   13a52:	d06d      	beq.n	13b30 <cbvprintf+0x1f8>
	sp = extract_width(conv, sp);
   13a54:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
	conv->width_present = true;
   13a58:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13a60:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	if (*sp == '*') {
   13a64:	f899 3000 	ldrb.w	r3, [r9]
   13a68:	2b2a      	cmp	r3, #42	; 0x2a
   13a6a:	d068      	beq.n	13b3e <cbvprintf+0x206>
	size_t width = extract_decimal(&sp);
   13a6c:	a809      	add	r0, sp, #36	; 0x24
   13a6e:	f7ff fcc5 	bl	133fc <extract_decimal>
	if (sp != wp) {
   13a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13a74:	4599      	cmp	r9, r3
   13a76:	d012      	beq.n	13a9e <cbvprintf+0x166>
		conv->width_present = true;
   13a78:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13a80:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		conv->width_value = width;
   13a84:	900d      	str	r0, [sp, #52]	; 0x34
		conv->unsupported |= ((conv->width_value < 0)
   13a86:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   13a8a:	2800      	cmp	r0, #0
   13a8c:	db60      	blt.n	13b50 <cbvprintf+0x218>
   13a8e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   13a90:	4313      	orrs	r3, r2
   13a92:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13a96:	f363 0241 	bfi	r2, r3, #1, #1
   13a9a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   13a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	sp = extract_prec(conv, sp);
   13aa0:	9309      	str	r3, [sp, #36]	; 0x24
	conv->prec_present = (*sp == '.');
   13aa2:	781b      	ldrb	r3, [r3, #0]
   13aa4:	2b2e      	cmp	r3, #46	; 0x2e
   13aa6:	bf14      	ite	ne
   13aa8:	2300      	movne	r3, #0
   13aaa:	2301      	moveq	r3, #1
   13aac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   13ab0:	f363 0241 	bfi	r2, r3, #1, #1
   13ab4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   13ab8:	2b00      	cmp	r3, #0
   13aba:	d04b      	beq.n	13b54 <cbvprintf+0x21c>
	++sp;
   13abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13abe:	1c5a      	adds	r2, r3, #1
   13ac0:	9209      	str	r2, [sp, #36]	; 0x24
	if (*sp == '*') {
   13ac2:	785b      	ldrb	r3, [r3, #1]
   13ac4:	2b2a      	cmp	r3, #42	; 0x2a
   13ac6:	d048      	beq.n	13b5a <cbvprintf+0x222>
	size_t prec = extract_decimal(&sp);
   13ac8:	a809      	add	r0, sp, #36	; 0x24
   13aca:	f7ff fc97 	bl	133fc <extract_decimal>
	conv->prec_value = prec;
   13ace:	900e      	str	r0, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   13ad0:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13ad4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   13ad8:	2800      	cmp	r0, #0
   13ada:	db47      	blt.n	13b6c <cbvprintf+0x234>
   13adc:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   13ade:	4313      	orrs	r3, r2
   13ae0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13ae4:	f363 0241 	bfi	r2, r3, #1, #1
   13ae8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   13aec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	switch (*sp) {
   13af0:	f899 3000 	ldrb.w	r3, [r9]
   13af4:	3b4c      	subs	r3, #76	; 0x4c
   13af6:	2b2e      	cmp	r3, #46	; 0x2e
   13af8:	f200 80dc 	bhi.w	13cb4 <cbvprintf+0x37c>
   13afc:	e8df f003 	tbb	[pc, r3]
   13b00:	dadadaca 	.word	0xdadadaca
   13b04:	dadadada 	.word	0xdadadada
   13b08:	dadadada 	.word	0xdadadada
   13b0c:	dadadada 	.word	0xdadadada
   13b10:	dadadada 	.word	0xdadadada
   13b14:	dadadada 	.word	0xdadadada
   13b18:	dadadada 	.word	0xdadadada
   13b1c:	da6ada38 	.word	0xda6ada38
   13b20:	dadada51 	.word	0xdadada51
   13b24:	dadadada 	.word	0xdadadada
   13b28:	dadadac0 	.word	0xdadadac0
   13b2c:	dada      	.short	0xdada
   13b2e:	b6          	.byte	0xb6
   13b2f:	00          	.byte	0x00
		conv->flag_zero = false;
   13b30:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13b34:	f36f 1386 	bfc	r3, #6, #1
   13b38:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   13b3c:	e78a      	b.n	13a54 <cbvprintf+0x11c>
		conv->width_star = true;
   13b3e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13b42:	f043 0301 	orr.w	r3, r3, #1
   13b46:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   13b4a:	464b      	mov	r3, r9
   13b4c:	3301      	adds	r3, #1
   13b4e:	e7a7      	b.n	13aa0 <cbvprintf+0x168>
				      || (width != (size_t)conv->width_value));
   13b50:	2201      	movs	r2, #1
   13b52:	e79d      	b.n	13a90 <cbvprintf+0x158>
		return sp;
   13b54:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   13b58:	e7ca      	b.n	13af0 <cbvprintf+0x1b8>
		conv->prec_star = true;
   13b5a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13b5e:	f043 0304 	orr.w	r3, r3, #4
   13b62:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		return ++sp;
   13b66:	f102 0901 	add.w	r9, r2, #1
   13b6a:	e7c1      	b.n	13af0 <cbvprintf+0x1b8>
			      || (prec != (size_t)conv->prec_value));
   13b6c:	2201      	movs	r2, #1
   13b6e:	e7b6      	b.n	13ade <cbvprintf+0x1a6>
		if (*++sp == 'h') {
   13b70:	f109 0201 	add.w	r2, r9, #1
   13b74:	f899 3001 	ldrb.w	r3, [r9, #1]
   13b78:	2b68      	cmp	r3, #104	; 0x68
   13b7a:	d008      	beq.n	13b8e <cbvprintf+0x256>
			conv->length_mod = LENGTH_H;
   13b7c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13b80:	2102      	movs	r1, #2
   13b82:	f361 03c6 	bfi	r3, r1, #3, #4
   13b86:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'h') {
   13b8a:	4691      	mov	r9, r2
   13b8c:	e02b      	b.n	13be6 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_HH;
   13b8e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13b92:	2201      	movs	r2, #1
   13b94:	f362 03c6 	bfi	r3, r2, #3, #4
   13b98:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   13b9c:	f109 0902 	add.w	r9, r9, #2
   13ba0:	e021      	b.n	13be6 <cbvprintf+0x2ae>
		if (*++sp == 'l') {
   13ba2:	f109 0201 	add.w	r2, r9, #1
   13ba6:	f899 3001 	ldrb.w	r3, [r9, #1]
   13baa:	2b6c      	cmp	r3, #108	; 0x6c
   13bac:	d008      	beq.n	13bc0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_L;
   13bae:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13bb2:	2103      	movs	r1, #3
   13bb4:	f361 03c6 	bfi	r3, r1, #3, #4
   13bb8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (*++sp == 'l') {
   13bbc:	4691      	mov	r9, r2
   13bbe:	e012      	b.n	13be6 <cbvprintf+0x2ae>
			conv->length_mod = LENGTH_LL;
   13bc0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13bc4:	2204      	movs	r2, #4
   13bc6:	f362 03c6 	bfi	r3, r2, #3, #4
   13bca:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
			++sp;
   13bce:	f109 0902 	add.w	r9, r9, #2
   13bd2:	e008      	b.n	13be6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
   13bd4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13bd8:	2205      	movs	r2, #5
   13bda:	f362 03c6 	bfi	r3, r2, #3, #4
   13bde:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   13be2:	f109 0901 	add.w	r9, r9, #1
	conv->specifier = *sp++;
   13be6:	f819 2b01 	ldrb.w	r2, [r9], #1
   13bea:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   13bee:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   13bf2:	2b37      	cmp	r3, #55	; 0x37
   13bf4:	f200 8185 	bhi.w	13f02 <cbvprintf+0x5ca>
   13bf8:	e8df f013 	tbh	[pc, r3, lsl #1]
   13bfc:	01830131 	.word	0x01830131
   13c00:	01830183 	.word	0x01830183
   13c04:	01310131 	.word	0x01310131
   13c08:	01830131 	.word	0x01830131
   13c0c:	01830183 	.word	0x01830183
   13c10:	01830183 	.word	0x01830183
   13c14:	01830183 	.word	0x01830183
   13c18:	01830183 	.word	0x01830183
   13c1c:	01830183 	.word	0x01830183
   13c20:	01830183 	.word	0x01830183
   13c24:	01830183 	.word	0x01830183
   13c28:	011c0183 	.word	0x011c0183
   13c2c:	01830183 	.word	0x01830183
   13c30:	01830183 	.word	0x01830183
   13c34:	01830183 	.word	0x01830183
   13c38:	01830183 	.word	0x01830183
   13c3c:	01830131 	.word	0x01830131
   13c40:	0063011c 	.word	0x0063011c
   13c44:	01310131 	.word	0x01310131
   13c48:	01830131 	.word	0x01830131
   13c4c:	01830063 	.word	0x01830063
   13c50:	01830183 	.word	0x01830183
   13c54:	01620183 	.word	0x01620183
   13c58:	0173011c 	.word	0x0173011c
   13c5c:	01830183 	.word	0x01830183
   13c60:	01830173 	.word	0x01830173
   13c64:	0183011c 	.word	0x0183011c
   13c68:	011c0183 	.word	0x011c0183
		conv->length_mod = LENGTH_Z;
   13c6c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13c70:	2206      	movs	r2, #6
   13c72:	f362 03c6 	bfi	r3, r2, #3, #4
   13c76:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   13c7a:	f109 0901 	add.w	r9, r9, #1
		break;
   13c7e:	e7b2      	b.n	13be6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
   13c80:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13c84:	2207      	movs	r2, #7
   13c86:	f362 03c6 	bfi	r3, r2, #3, #4
   13c8a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   13c8e:	f109 0901 	add.w	r9, r9, #1
		break;
   13c92:	e7a8      	b.n	13be6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_UPPER_L;
   13c94:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13c98:	2208      	movs	r2, #8
   13c9a:	f362 03c6 	bfi	r3, r2, #3, #4
   13c9e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		++sp;
   13ca2:	f109 0901 	add.w	r9, r9, #1
		conv->unsupported = true;
   13ca6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13caa:	f043 0302 	orr.w	r3, r3, #2
   13cae:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   13cb2:	e798      	b.n	13be6 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_NONE;
   13cb4:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13cb8:	f36f 03c6 	bfc	r3, #3, #4
   13cbc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   13cc0:	e791      	b.n	13be6 <cbvprintf+0x2ae>
		conv->specifier_cat = SPECIFIER_SINT;
   13cc2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13cc6:	2101      	movs	r1, #1
   13cc8:	f361 0302 	bfi	r3, r1, #0, #3
   13ccc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   13cd0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13cd4:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13cd8:	2b40      	cmp	r3, #64	; 0x40
   13cda:	f000 80b3 	beq.w	13e44 <cbvprintf+0x50c>
		if (conv->specifier == 'c') {
   13cde:	2a63      	cmp	r2, #99	; 0x63
   13ce0:	f000 80b7 	beq.w	13e52 <cbvprintf+0x51a>
	conv->unsupported |= unsupported;
   13ce4:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13ce8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   13cec:	ea48 0802 	orr.w	r8, r8, r2
   13cf0:	f368 0341 	bfi	r3, r8, #1, #1
   13cf4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		if (conv->width_star) {
   13cf8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13cfc:	f013 0f01 	tst.w	r3, #1
   13d00:	f000 8112 	beq.w	13f28 <cbvprintf+0x5f0>
			width = va_arg(ap, int);
   13d04:	9b05      	ldr	r3, [sp, #20]
   13d06:	1d1a      	adds	r2, r3, #4
   13d08:	9205      	str	r2, [sp, #20]
   13d0a:	f8d3 8000 	ldr.w	r8, [r3]
			if (width < 0) {
   13d0e:	f1b8 0f00 	cmp.w	r8, #0
   13d12:	f2c0 8100 	blt.w	13f16 <cbvprintf+0x5de>
		if (conv->prec_star) {
   13d16:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13d1a:	f013 0f04 	tst.w	r3, #4
   13d1e:	f000 8116 	beq.w	13f4e <cbvprintf+0x616>
			int arg = va_arg(ap, int);
   13d22:	9b05      	ldr	r3, [sp, #20]
   13d24:	1d1a      	adds	r2, r3, #4
   13d26:	9205      	str	r2, [sp, #20]
   13d28:	f8d3 a000 	ldr.w	sl, [r3]
			if (arg < 0) {
   13d2c:	f1ba 0f00 	cmp.w	sl, #0
   13d30:	f2c0 8104 	blt.w	13f3c <cbvprintf+0x604>
		conv->pad0_value = 0;
   13d34:	2300      	movs	r3, #0
   13d36:	930d      	str	r3, [sp, #52]	; 0x34
		conv->pad0_pre_exp = 0;
   13d38:	930e      	str	r3, [sp, #56]	; 0x38
		    && (conv->specifier_cat == SPECIFIER_FP)
   13d3a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13d3e:	f003 0307 	and.w	r3, r3, #7
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   13d42:	2b04      	cmp	r3, #4
   13d44:	f000 810c 	beq.w	13f60 <cbvprintf+0x628>
			= (enum specifier_cat_enum)conv->specifier_cat;
   13d48:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13d4c:	f003 0307 	and.w	r3, r3, #7
			= (enum length_mod_enum)conv->length_mod;
   13d50:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
   13d54:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   13d58:	2b01      	cmp	r3, #1
   13d5a:	f000 8111 	beq.w	13f80 <cbvprintf+0x648>
		} else if (specifier_cat == SPECIFIER_UINT) {
   13d5e:	2b02      	cmp	r3, #2
   13d60:	f000 8156 	beq.w	14010 <cbvprintf+0x6d8>
		} else if (specifier_cat == SPECIFIER_FP) {
   13d64:	2b04      	cmp	r3, #4
   13d66:	f000 81a7 	beq.w	140b8 <cbvprintf+0x780>
		} else if (specifier_cat == SPECIFIER_PTR) {
   13d6a:	2b03      	cmp	r3, #3
   13d6c:	f000 81be 	beq.w	140ec <cbvprintf+0x7b4>
		if (conv->invalid || conv->unsupported) {
   13d70:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   13d74:	f012 0f03 	tst.w	r2, #3
   13d78:	f040 81be 	bne.w	140f8 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   13d7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   13d80:	3b25      	subs	r3, #37	; 0x25
   13d82:	2b53      	cmp	r3, #83	; 0x53
   13d84:	f200 81cb 	bhi.w	1411e <cbvprintf+0x7e6>
   13d88:	e8df f013 	tbh	[pc, r3, lsl #1]
   13d8c:	01c901c2 	.word	0x01c901c2
   13d90:	01c901c9 	.word	0x01c901c9
   13d94:	01c901c9 	.word	0x01c901c9
   13d98:	01c901c9 	.word	0x01c901c9
   13d9c:	01c901c9 	.word	0x01c901c9
   13da0:	01c901c9 	.word	0x01c901c9
   13da4:	01c901c9 	.word	0x01c901c9
   13da8:	01c901c9 	.word	0x01c901c9
   13dac:	01c901c9 	.word	0x01c901c9
   13db0:	01c901c9 	.word	0x01c901c9
   13db4:	01c901c9 	.word	0x01c901c9
   13db8:	01c901c9 	.word	0x01c901c9
   13dbc:	01c901c9 	.word	0x01c901c9
   13dc0:	01c901c9 	.word	0x01c901c9
   13dc4:	01c9028a 	.word	0x01c9028a
   13dc8:	01c901c9 	.word	0x01c901c9
   13dcc:	028a028a 	.word	0x028a028a
   13dd0:	01c9028a 	.word	0x01c9028a
   13dd4:	01c901c9 	.word	0x01c901c9
   13dd8:	01c901c9 	.word	0x01c901c9
   13ddc:	01c901c9 	.word	0x01c901c9
   13de0:	01c901c9 	.word	0x01c901c9
   13de4:	01c901c9 	.word	0x01c901c9
   13de8:	01c901c9 	.word	0x01c901c9
   13dec:	01c901c9 	.word	0x01c901c9
   13df0:	022401c9 	.word	0x022401c9
   13df4:	01c901c9 	.word	0x01c901c9
   13df8:	01c901c9 	.word	0x01c901c9
   13dfc:	01c901c9 	.word	0x01c901c9
   13e00:	01c901c9 	.word	0x01c901c9
   13e04:	01c9028a 	.word	0x01c9028a
   13e08:	0216020e 	.word	0x0216020e
   13e0c:	028a028a 	.word	0x028a028a
   13e10:	01c9028a 	.word	0x01c9028a
   13e14:	01c90216 	.word	0x01c90216
   13e18:	01c901c9 	.word	0x01c901c9
   13e1c:	026601c9 	.word	0x026601c9
   13e20:	024e0224 	.word	0x024e0224
   13e24:	01c901c9 	.word	0x01c901c9
   13e28:	01c901cb 	.word	0x01c901cb
   13e2c:	01c90224 	.word	0x01c90224
   13e30:	022401c9 	.word	0x022401c9
		conv->specifier_cat = SPECIFIER_UINT;
   13e34:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13e38:	2102      	movs	r1, #2
   13e3a:	f361 0302 	bfi	r3, r1, #0, #3
   13e3e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
   13e42:	e745      	b.n	13cd0 <cbvprintf+0x398>
			conv->invalid = true;
   13e44:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   13e48:	f041 0101 	orr.w	r1, r1, #1
   13e4c:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   13e50:	e745      	b.n	13cde <cbvprintf+0x3a6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   13e52:	f1b3 0800 	subs.w	r8, r3, #0
   13e56:	bf18      	it	ne
   13e58:	f04f 0801 	movne.w	r8, #1
   13e5c:	e742      	b.n	13ce4 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_FP;
   13e5e:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13e62:	2104      	movs	r1, #4
   13e64:	f361 0302 	bfi	r3, r1, #0, #3
   13e68:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			|| (conv->specifier == 'A');
   13e6c:	2a61      	cmp	r2, #97	; 0x61
   13e6e:	d01f      	beq.n	13eb0 <cbvprintf+0x578>
   13e70:	2a41      	cmp	r2, #65	; 0x41
   13e72:	d01b      	beq.n	13eac <cbvprintf+0x574>
   13e74:	2200      	movs	r2, #0
		conv->specifier_a = (conv->specifier == 'a')
   13e76:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13e7a:	f362 13c7 	bfi	r3, r2, #7, #1
   13e7e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		if (conv->specifier_a
   13e82:	b2da      	uxtb	r2, r3
   13e84:	f013 0f80 	tst.w	r3, #128	; 0x80
   13e88:	d142      	bne.n	13f10 <cbvprintf+0x5d8>
		if (conv->length_mod == LENGTH_L) {
   13e8a:	f002 0278 	and.w	r2, r2, #120	; 0x78
   13e8e:	2a18      	cmp	r2, #24
   13e90:	d010      	beq.n	13eb4 <cbvprintf+0x57c>
		} else if ((conv->length_mod != LENGTH_NONE)
   13e92:	2a00      	cmp	r2, #0
   13e94:	f43f af26 	beq.w	13ce4 <cbvprintf+0x3ac>
			   && (conv->length_mod != LENGTH_UPPER_L)) {
   13e98:	2a40      	cmp	r2, #64	; 0x40
   13e9a:	f43f af23 	beq.w	13ce4 <cbvprintf+0x3ac>
			conv->invalid = true;
   13e9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13ea2:	f043 0301 	orr.w	r3, r3, #1
   13ea6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   13eaa:	e71b      	b.n	13ce4 <cbvprintf+0x3ac>
			|| (conv->specifier == 'A');
   13eac:	2201      	movs	r2, #1
   13eae:	e7e2      	b.n	13e76 <cbvprintf+0x53e>
   13eb0:	2201      	movs	r2, #1
   13eb2:	e7e0      	b.n	13e76 <cbvprintf+0x53e>
			conv->length_mod = LENGTH_NONE;
   13eb4:	b2db      	uxtb	r3, r3
   13eb6:	f36f 03c6 	bfc	r3, #3, #4
   13eba:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   13ebe:	e711      	b.n	13ce4 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   13ec0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13ec4:	2203      	movs	r2, #3
   13ec6:	f362 0302 	bfi	r3, r2, #0, #3
   13eca:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   13ece:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13ed2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   13ed6:	2b40      	cmp	r3, #64	; 0x40
   13ed8:	f47f af04 	bne.w	13ce4 <cbvprintf+0x3ac>
			unsupported = true;
   13edc:	f04f 0801 	mov.w	r8, #1
   13ee0:	e700      	b.n	13ce4 <cbvprintf+0x3ac>
		conv->specifier_cat = SPECIFIER_PTR;
   13ee2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   13ee6:	2203      	movs	r2, #3
   13ee8:	f362 0302 	bfi	r3, r2, #0, #3
   13eec:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   13ef0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13ef4:	f013 0f78 	tst.w	r3, #120	; 0x78
   13ef8:	f43f aef4 	beq.w	13ce4 <cbvprintf+0x3ac>
			unsupported = true;
   13efc:	f04f 0801 	mov.w	r8, #1
   13f00:	e6f0      	b.n	13ce4 <cbvprintf+0x3ac>
		conv->invalid = true;
   13f02:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13f06:	f043 0301 	orr.w	r3, r3, #1
   13f0a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		break;
   13f0e:	e6e9      	b.n	13ce4 <cbvprintf+0x3ac>
			unsupported = true;
   13f10:	f04f 0801 	mov.w	r8, #1
   13f14:	e6e6      	b.n	13ce4 <cbvprintf+0x3ac>
				conv->flag_dash = true;
   13f16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13f1a:	f043 0304 	orr.w	r3, r3, #4
   13f1e:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
				width = -width;
   13f22:	f1c8 0800 	rsb	r8, r8, #0
   13f26:	e6f6      	b.n	13d16 <cbvprintf+0x3de>
		} else if (conv->width_present) {
   13f28:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
   13f2c:	2b00      	cmp	r3, #0
   13f2e:	db02      	blt.n	13f36 <cbvprintf+0x5fe>
		int width = -1;
   13f30:	f04f 38ff 	mov.w	r8, #4294967295
   13f34:	e6ef      	b.n	13d16 <cbvprintf+0x3de>
			width = conv->width_value;
   13f36:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   13f3a:	e6ec      	b.n	13d16 <cbvprintf+0x3de>
				conv->prec_present = false;
   13f3c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13f40:	f36f 0341 	bfc	r3, #1, #1
   13f44:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   13f48:	f04f 3aff 	mov.w	sl, #4294967295
   13f4c:	e6f2      	b.n	13d34 <cbvprintf+0x3fc>
		} else if (conv->prec_present) {
   13f4e:	f013 0f02 	tst.w	r3, #2
   13f52:	d002      	beq.n	13f5a <cbvprintf+0x622>
			precision = conv->prec_value;
   13f54:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   13f58:	e6ec      	b.n	13d34 <cbvprintf+0x3fc>
		int precision = -1;
   13f5a:	f04f 3aff 	mov.w	sl, #4294967295
   13f5e:	e6e9      	b.n	13d34 <cbvprintf+0x3fc>
		    && !conv->prec_present) {
   13f60:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   13f64:	f013 0f02 	tst.w	r3, #2
   13f68:	f47f aeee 	bne.w	13d48 <cbvprintf+0x410>
			if (conv->specifier_a) {
   13f6c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   13f70:	2b00      	cmp	r3, #0
   13f72:	db02      	blt.n	13f7a <cbvprintf+0x642>
				precision = 6;
   13f74:	f04f 0a06 	mov.w	sl, #6
   13f78:	e6e6      	b.n	13d48 <cbvprintf+0x410>
				precision = FRACTION_HEX;
   13f7a:	f04f 0a0d 	mov.w	sl, #13
   13f7e:	e6e3      	b.n	13d48 <cbvprintf+0x410>
			switch (length_mod) {
   13f80:	1ecb      	subs	r3, r1, #3
   13f82:	2b04      	cmp	r3, #4
   13f84:	d804      	bhi.n	13f90 <cbvprintf+0x658>
   13f86:	e8df f003 	tbb	[pc, r3]
   13f8a:	1d0b      	.short	0x1d0b
   13f8c:	3529      	.short	0x3529
   13f8e:	35          	.byte	0x35
   13f8f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   13f90:	9b05      	ldr	r3, [sp, #20]
   13f92:	1d1a      	adds	r2, r3, #4
   13f94:	9205      	str	r2, [sp, #20]
   13f96:	681a      	ldr	r2, [r3, #0]
   13f98:	17d3      	asrs	r3, r2, #31
   13f9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13f9e:	e006      	b.n	13fae <cbvprintf+0x676>
					value->sint = va_arg(ap, long);
   13fa0:	9b05      	ldr	r3, [sp, #20]
   13fa2:	1d1a      	adds	r2, r3, #4
   13fa4:	9205      	str	r2, [sp, #20]
   13fa6:	681a      	ldr	r2, [r3, #0]
   13fa8:	17d3      	asrs	r3, r2, #31
   13faa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   13fae:	2901      	cmp	r1, #1
   13fb0:	d028      	beq.n	14004 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   13fb2:	2902      	cmp	r1, #2
   13fb4:	f47f aedc 	bne.w	13d70 <cbvprintf+0x438>
				value->sint = (short)value->sint;
   13fb8:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   13fbc:	17d3      	asrs	r3, r2, #31
   13fbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   13fc2:	e6d5      	b.n	13d70 <cbvprintf+0x438>
					(sint_value_type)va_arg(ap, long long);
   13fc4:	9b05      	ldr	r3, [sp, #20]
   13fc6:	3307      	adds	r3, #7
   13fc8:	f023 0307 	bic.w	r3, r3, #7
   13fcc:	f103 0208 	add.w	r2, r3, #8
   13fd0:	9205      	str	r2, [sp, #20]
   13fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13fd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13fda:	e7e8      	b.n	13fae <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, intmax_t);
   13fdc:	9b05      	ldr	r3, [sp, #20]
   13fde:	3307      	adds	r3, #7
   13fe0:	f023 0307 	bic.w	r3, r3, #7
   13fe4:	f103 0208 	add.w	r2, r3, #8
   13fe8:	9205      	str	r2, [sp, #20]
   13fea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   13fee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   13ff2:	e7dc      	b.n	13fae <cbvprintf+0x676>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   13ff4:	9b05      	ldr	r3, [sp, #20]
   13ff6:	1d1a      	adds	r2, r3, #4
   13ff8:	9205      	str	r2, [sp, #20]
   13ffa:	681a      	ldr	r2, [r3, #0]
   13ffc:	17d3      	asrs	r3, r2, #31
				value->sint =
   13ffe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   14002:	e7d4      	b.n	13fae <cbvprintf+0x676>
				value->sint = (char)value->sint;
   14004:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   14008:	930a      	str	r3, [sp, #40]	; 0x28
   1400a:	2300      	movs	r3, #0
   1400c:	930b      	str	r3, [sp, #44]	; 0x2c
   1400e:	e6af      	b.n	13d70 <cbvprintf+0x438>
			switch (length_mod) {
   14010:	1ecb      	subs	r3, r1, #3
   14012:	2b04      	cmp	r3, #4
   14014:	d804      	bhi.n	14020 <cbvprintf+0x6e8>
   14016:	e8df f003 	tbb	[pc, r3]
   1401a:	1f0b      	.short	0x1f0b
   1401c:	4135      	.short	0x4135
   1401e:	41          	.byte	0x41
   1401f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   14020:	9b05      	ldr	r3, [sp, #20]
   14022:	1d1a      	adds	r2, r3, #4
   14024:	9205      	str	r2, [sp, #20]
   14026:	681b      	ldr	r3, [r3, #0]
   14028:	930a      	str	r3, [sp, #40]	; 0x28
   1402a:	2300      	movs	r3, #0
   1402c:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   1402e:	e01e      	b.n	1406e <cbvprintf+0x736>
				    && (conv->specifier == 'c')) {
   14030:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
				if ((!WCHAR_IS_SIGNED)
   14034:	2b63      	cmp	r3, #99	; 0x63
   14036:	d007      	beq.n	14048 <cbvprintf+0x710>
					value->uint = va_arg(ap, unsigned long);
   14038:	9b05      	ldr	r3, [sp, #20]
   1403a:	1d1a      	adds	r2, r3, #4
   1403c:	9205      	str	r2, [sp, #20]
   1403e:	681b      	ldr	r3, [r3, #0]
   14040:	930a      	str	r3, [sp, #40]	; 0x28
   14042:	2300      	movs	r3, #0
   14044:	930b      	str	r3, [sp, #44]	; 0x2c
   14046:	e012      	b.n	1406e <cbvprintf+0x736>
					value->uint = (wchar_t)va_arg(ap,
   14048:	9b05      	ldr	r3, [sp, #20]
   1404a:	1d1a      	adds	r2, r3, #4
   1404c:	9205      	str	r2, [sp, #20]
   1404e:	681b      	ldr	r3, [r3, #0]
   14050:	930a      	str	r3, [sp, #40]	; 0x28
   14052:	2300      	movs	r3, #0
   14054:	930b      	str	r3, [sp, #44]	; 0x2c
   14056:	e00a      	b.n	1406e <cbvprintf+0x736>
					(uint_value_type)va_arg(ap,
   14058:	9b05      	ldr	r3, [sp, #20]
   1405a:	3307      	adds	r3, #7
   1405c:	f023 0307 	bic.w	r3, r3, #7
   14060:	f103 0208 	add.w	r2, r3, #8
   14064:	9205      	str	r2, [sp, #20]
   14066:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1406a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   1406e:	2901      	cmp	r1, #1
   14070:	d01c      	beq.n	140ac <cbvprintf+0x774>
			} else if (length_mod == LENGTH_H) {
   14072:	2902      	cmp	r1, #2
   14074:	f47f ae7c 	bne.w	13d70 <cbvprintf+0x438>
				value->uint = (unsigned short)value->uint;
   14078:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1407c:	930a      	str	r3, [sp, #40]	; 0x28
   1407e:	2300      	movs	r3, #0
   14080:	930b      	str	r3, [sp, #44]	; 0x2c
   14082:	e675      	b.n	13d70 <cbvprintf+0x438>
					(uint_value_type)va_arg(ap,
   14084:	9b05      	ldr	r3, [sp, #20]
   14086:	3307      	adds	r3, #7
   14088:	f023 0307 	bic.w	r3, r3, #7
   1408c:	f103 0208 	add.w	r2, r3, #8
   14090:	9205      	str	r2, [sp, #20]
   14092:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   14096:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   1409a:	e7e8      	b.n	1406e <cbvprintf+0x736>
					(uint_value_type)va_arg(ap, size_t);
   1409c:	9b05      	ldr	r3, [sp, #20]
   1409e:	1d1a      	adds	r2, r3, #4
   140a0:	9205      	str	r2, [sp, #20]
   140a2:	681b      	ldr	r3, [r3, #0]
				value->uint =
   140a4:	930a      	str	r3, [sp, #40]	; 0x28
   140a6:	2300      	movs	r3, #0
   140a8:	930b      	str	r3, [sp, #44]	; 0x2c
				break;
   140aa:	e7e0      	b.n	1406e <cbvprintf+0x736>
				value->uint = (unsigned char)value->uint;
   140ac:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   140b0:	930a      	str	r3, [sp, #40]	; 0x28
   140b2:	2300      	movs	r3, #0
   140b4:	930b      	str	r3, [sp, #44]	; 0x2c
   140b6:	e65b      	b.n	13d70 <cbvprintf+0x438>
			if (length_mod == LENGTH_UPPER_L) {
   140b8:	2908      	cmp	r1, #8
   140ba:	d00b      	beq.n	140d4 <cbvprintf+0x79c>
				value->dbl = va_arg(ap, double);
   140bc:	9b05      	ldr	r3, [sp, #20]
   140be:	3307      	adds	r3, #7
   140c0:	f023 0307 	bic.w	r3, r3, #7
   140c4:	f103 0208 	add.w	r2, r3, #8
   140c8:	9205      	str	r2, [sp, #20]
   140ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   140ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   140d2:	e64d      	b.n	13d70 <cbvprintf+0x438>
				value->ldbl = va_arg(ap, long double);
   140d4:	9b05      	ldr	r3, [sp, #20]
   140d6:	3307      	adds	r3, #7
   140d8:	f023 0307 	bic.w	r3, r3, #7
   140dc:	f103 0208 	add.w	r2, r3, #8
   140e0:	9205      	str	r2, [sp, #20]
   140e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   140e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   140ea:	e641      	b.n	13d70 <cbvprintf+0x438>
			value->ptr = va_arg(ap, void *);
   140ec:	9b05      	ldr	r3, [sp, #20]
   140ee:	1d1a      	adds	r2, r3, #4
   140f0:	9205      	str	r2, [sp, #20]
   140f2:	681b      	ldr	r3, [r3, #0]
   140f4:	930a      	str	r3, [sp, #40]	; 0x28
   140f6:	e63b      	b.n	13d70 <cbvprintf+0x438>
			OUTS(sp, fp);
   140f8:	464b      	mov	r3, r9
   140fa:	463a      	mov	r2, r7
   140fc:	4629      	mov	r1, r5
   140fe:	4630      	mov	r0, r6
   14100:	f00f fe92 	bl	23e28 <outs>
   14104:	2800      	cmp	r0, #0
   14106:	f6ff ac2c 	blt.w	13962 <cbvprintf+0x2a>
   1410a:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   1410c:	464f      	mov	r7, r9
			continue;
   1410e:	e41d      	b.n	1394c <cbvprintf+0x14>
			OUTC('%');
   14110:	4629      	mov	r1, r5
   14112:	2025      	movs	r0, #37	; 0x25
   14114:	47b0      	blx	r6
   14116:	2800      	cmp	r0, #0
   14118:	f6ff ac23 	blt.w	13962 <cbvprintf+0x2a>
   1411c:	3401      	adds	r4, #1
		fp = extract_conversion(conv, sp);
   1411e:	464f      	mov	r7, r9
			continue;
   14120:	e414      	b.n	1394c <cbvprintf+0x14>
			bps = (const char *)value->ptr;
   14122:	9f0a      	ldr	r7, [sp, #40]	; 0x28
			if (precision >= 0) {
   14124:	f1ba 0f00 	cmp.w	sl, #0
   14128:	db3a      	blt.n	141a0 <cbvprintf+0x868>
				len = strnlen(bps, precision);
   1412a:	4651      	mov	r1, sl
   1412c:	4638      	mov	r0, r7
   1412e:	f014 fa05 	bl	2853c <strnlen>
			bpe = bps + len;
   14132:	4438      	add	r0, r7
   14134:	9008      	str	r0, [sp, #32]
		if (bps == NULL) {
   14136:	2f00      	cmp	r7, #0
   14138:	d0f1      	beq.n	1411e <cbvprintf+0x7e6>
		size_t nj_len = (bpe - bps);
   1413a:	9b08      	ldr	r3, [sp, #32]
   1413c:	1bdb      	subs	r3, r3, r7
		if (sign != 0) {
   1413e:	f89d 001f 	ldrb.w	r0, [sp, #31]
   14142:	b100      	cbz	r0, 14146 <cbvprintf+0x80e>
			nj_len += 1U;
   14144:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   14146:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   1414a:	f011 0f10 	tst.w	r1, #16
   1414e:	f000 80b6 	beq.w	142be <cbvprintf+0x986>
			nj_len += 2U;
   14152:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
   14154:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14156:	4413      	add	r3, r2
		if (conv->pad_fp) {
   14158:	f011 0f40 	tst.w	r1, #64	; 0x40
   1415c:	d001      	beq.n	14162 <cbvprintf+0x82a>
			nj_len += conv->pad0_pre_exp;
   1415e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14160:	4413      	add	r3, r2
		if (width > 0) {
   14162:	f1b8 0f00 	cmp.w	r8, #0
   14166:	f340 80c3 	ble.w	142f0 <cbvprintf+0x9b8>
			width -= (int)nj_len;
   1416a:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   1416e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   14172:	f013 0f04 	tst.w	r3, #4
   14176:	f040 80bb 	bne.w	142f0 <cbvprintf+0x9b8>
				if (conv->flag_zero) {
   1417a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1417e:	f000 80a4 	beq.w	142ca <cbvprintf+0x992>
					if (sign != 0) {
   14182:	2800      	cmp	r0, #0
   14184:	f000 80a4 	beq.w	142d0 <cbvprintf+0x998>
						OUTC(sign);
   14188:	4629      	mov	r1, r5
   1418a:	47b0      	blx	r6
   1418c:	2800      	cmp	r0, #0
   1418e:	f6ff abe8 	blt.w	13962 <cbvprintf+0x2a>
   14192:	3401      	adds	r4, #1
						sign = 0;
   14194:	2300      	movs	r3, #0
   14196:	f88d 301f 	strb.w	r3, [sp, #31]
					pad = '0';
   1419a:	f04f 0a30 	mov.w	sl, #48	; 0x30
   1419e:	e099      	b.n	142d4 <cbvprintf+0x99c>
				len = strlen(bps);
   141a0:	4638      	mov	r0, r7
   141a2:	f7f8 fa3f 	bl	c624 <strlen>
   141a6:	e7c4      	b.n	14132 <cbvprintf+0x7fa>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   141a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   141aa:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
			bpe = buf + 1;
   141ae:	f10d 0345 	add.w	r3, sp, #69	; 0x45
   141b2:	9308      	str	r3, [sp, #32]
			bps = buf;
   141b4:	af11      	add	r7, sp, #68	; 0x44
			break;
   141b6:	e7be      	b.n	14136 <cbvprintf+0x7fe>
			if (conv->flag_plus) {
   141b8:	f012 0f08 	tst.w	r2, #8
   141bc:	d024      	beq.n	14208 <cbvprintf+0x8d0>
				sign = '+';
   141be:	232b      	movs	r3, #43	; 0x2b
   141c0:	f88d 301f 	strb.w	r3, [sp, #31]
			sint = value->sint;
   141c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   141c8:	2a00      	cmp	r2, #0
   141ca:	f173 0100 	sbcs.w	r1, r3, #0
   141ce:	db22      	blt.n	14216 <cbvprintf+0x8de>
				value->uint = (uint_value_type)sint;
   141d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
			bps = encode_uint(value->uint, conv, buf, bpe);
   141d4:	9b08      	ldr	r3, [sp, #32]
   141d6:	9300      	str	r3, [sp, #0]
   141d8:	ab11      	add	r3, sp, #68	; 0x44
   141da:	aa0c      	add	r2, sp, #48	; 0x30
   141dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   141e0:	f7ff f922 	bl	13428 <encode_uint>
   141e4:	4607      	mov	r7, r0
			if (precision >= 0) {
   141e6:	f1ba 0f00 	cmp.w	sl, #0
   141ea:	dba4      	blt.n	14136 <cbvprintf+0x7fe>
				size_t len = bpe - bps;
   141ec:	9b08      	ldr	r3, [sp, #32]
   141ee:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   141f0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   141f4:	f36f 1286 	bfc	r2, #6, #1
   141f8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   141fc:	459a      	cmp	sl, r3
   141fe:	d99a      	bls.n	14136 <cbvprintf+0x7fe>
					conv->pad0_value = precision - (int)len;
   14200:	ebaa 0303 	sub.w	r3, sl, r3
   14204:	930d      	str	r3, [sp, #52]	; 0x34
   14206:	e796      	b.n	14136 <cbvprintf+0x7fe>
			} else if (conv->flag_space) {
   14208:	f012 0f10 	tst.w	r2, #16
   1420c:	d0da      	beq.n	141c4 <cbvprintf+0x88c>
				sign = ' ';
   1420e:	2320      	movs	r3, #32
   14210:	f88d 301f 	strb.w	r3, [sp, #31]
   14214:	e7d6      	b.n	141c4 <cbvprintf+0x88c>
				sign = '-';
   14216:	212d      	movs	r1, #45	; 0x2d
   14218:	f88d 101f 	strb.w	r1, [sp, #31]
				value->uint = (uint_value_type)-sint;
   1421c:	4252      	negs	r2, r2
   1421e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14222:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   14226:	e7d5      	b.n	141d4 <cbvprintf+0x89c>
			if (value->ptr != NULL) {
   14228:	980a      	ldr	r0, [sp, #40]	; 0x28
   1422a:	b918      	cbnz	r0, 14234 <cbvprintf+0x8fc>
			bpe = bps + 5;
   1422c:	4f94      	ldr	r7, [pc, #592]	; (14480 <cbvprintf+0xb48>)
   1422e:	9708      	str	r7, [sp, #32]
			bps = "(nil)";
   14230:	3f05      	subs	r7, #5
			break;
   14232:	e780      	b.n	14136 <cbvprintf+0x7fe>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   14234:	9b08      	ldr	r3, [sp, #32]
   14236:	9300      	str	r3, [sp, #0]
   14238:	ab11      	add	r3, sp, #68	; 0x44
   1423a:	aa0c      	add	r2, sp, #48	; 0x30
   1423c:	2100      	movs	r1, #0
   1423e:	f7ff f8f3 	bl	13428 <encode_uint>
   14242:	4607      	mov	r7, r0
				conv->altform_0c = true;
   14244:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   14248:	f043 0310 	orr.w	r3, r3, #16
   1424c:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
				conv->specifier = 'x';
   14250:	2378      	movs	r3, #120	; 0x78
   14252:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
				goto prec_int_pad0;
   14256:	e7c6      	b.n	141e6 <cbvprintf+0x8ae>
				store_count(conv, value->ptr, count);
   14258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   1425a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1425e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   14262:	2b07      	cmp	r3, #7
   14264:	f63f af5b 	bhi.w	1411e <cbvprintf+0x7e6>
   14268:	e8df f003 	tbb	[pc, r3]
   1426c:	0a080604 	.word	0x0a080604
   14270:	1816110c 	.word	0x1816110c
		*(int *)dp = count;
   14274:	6014      	str	r4, [r2, #0]
		break;
   14276:	e752      	b.n	1411e <cbvprintf+0x7e6>
		*(signed char *)dp = (signed char)count;
   14278:	7014      	strb	r4, [r2, #0]
		break;
   1427a:	e750      	b.n	1411e <cbvprintf+0x7e6>
		*(short *)dp = (short)count;
   1427c:	8014      	strh	r4, [r2, #0]
		break;
   1427e:	e74e      	b.n	1411e <cbvprintf+0x7e6>
		*(long *)dp = (long)count;
   14280:	6014      	str	r4, [r2, #0]
		break;
   14282:	e74c      	b.n	1411e <cbvprintf+0x7e6>
		*(long long *)dp = (long long)count;
   14284:	4620      	mov	r0, r4
   14286:	17e1      	asrs	r1, r4, #31
   14288:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1428c:	e747      	b.n	1411e <cbvprintf+0x7e6>
		*(intmax_t *)dp = (intmax_t)count;
   1428e:	4620      	mov	r0, r4
   14290:	17e1      	asrs	r1, r4, #31
   14292:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   14296:	e742      	b.n	1411e <cbvprintf+0x7e6>
		*(size_t *)dp = (size_t)count;
   14298:	6014      	str	r4, [r2, #0]
		break;
   1429a:	e740      	b.n	1411e <cbvprintf+0x7e6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   1429c:	6014      	str	r4, [r2, #0]
}
   1429e:	e73e      	b.n	1411e <cbvprintf+0x7e6>
				bps = encode_float(value->dbl, conv, precision,
   142a0:	ab08      	add	r3, sp, #32
   142a2:	9302      	str	r3, [sp, #8]
   142a4:	ab11      	add	r3, sp, #68	; 0x44
   142a6:	9301      	str	r3, [sp, #4]
   142a8:	f10d 031f 	add.w	r3, sp, #31
   142ac:	9300      	str	r3, [sp, #0]
   142ae:	4653      	mov	r3, sl
   142b0:	aa0c      	add	r2, sp, #48	; 0x30
   142b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   142b6:	f7ff f927 	bl	13508 <encode_float>
   142ba:	4607      	mov	r7, r0
			break;
   142bc:	e73b      	b.n	14136 <cbvprintf+0x7fe>
		} else if (conv->altform_0) {
   142be:	f011 0f08 	tst.w	r1, #8
   142c2:	f43f af47 	beq.w	14154 <cbvprintf+0x81c>
			nj_len += 1U;
   142c6:	3301      	adds	r3, #1
   142c8:	e744      	b.n	14154 <cbvprintf+0x81c>
				char pad = ' ';
   142ca:	f04f 0a20 	mov.w	sl, #32
   142ce:	e001      	b.n	142d4 <cbvprintf+0x99c>
					pad = '0';
   142d0:	f04f 0a30 	mov.w	sl, #48	; 0x30
   142d4:	4643      	mov	r3, r8
				while (width-- > 0) {
   142d6:	f103 38ff 	add.w	r8, r3, #4294967295
   142da:	2b00      	cmp	r3, #0
   142dc:	dd08      	ble.n	142f0 <cbvprintf+0x9b8>
					OUTC(pad);
   142de:	4629      	mov	r1, r5
   142e0:	4650      	mov	r0, sl
   142e2:	47b0      	blx	r6
   142e4:	2800      	cmp	r0, #0
   142e6:	f6ff ab3c 	blt.w	13962 <cbvprintf+0x2a>
   142ea:	3401      	adds	r4, #1
				while (width-- > 0) {
   142ec:	4643      	mov	r3, r8
   142ee:	e7f2      	b.n	142d6 <cbvprintf+0x99e>
		if (sign != 0) {
   142f0:	f89d 001f 	ldrb.w	r0, [sp, #31]
   142f4:	b128      	cbz	r0, 14302 <cbvprintf+0x9ca>
			OUTC(sign);
   142f6:	4629      	mov	r1, r5
   142f8:	47b0      	blx	r6
   142fa:	2800      	cmp	r0, #0
   142fc:	f6ff ab31 	blt.w	13962 <cbvprintf+0x2a>
   14300:	3401      	adds	r4, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   14302:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   14306:	f013 0f40 	tst.w	r3, #64	; 0x40
   1430a:	d072      	beq.n	143f2 <cbvprintf+0xaba>
			if (conv->specifier_a) {
   1430c:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
   14310:	2b00      	cmp	r3, #0
   14312:	db0d      	blt.n	14330 <cbvprintf+0x9f8>
				while (isdigit((int)*cp)) {
   14314:	7838      	ldrb	r0, [r7, #0]
   14316:	4b5b      	ldr	r3, [pc, #364]	; (14484 <cbvprintf+0xb4c>)
   14318:	5cc3      	ldrb	r3, [r0, r3]
   1431a:	f013 0f04 	tst.w	r3, #4
   1431e:	d012      	beq.n	14346 <cbvprintf+0xa0e>
					OUTC(*cp++);
   14320:	3701      	adds	r7, #1
   14322:	4629      	mov	r1, r5
   14324:	47b0      	blx	r6
   14326:	2800      	cmp	r0, #0
   14328:	f6ff ab1b 	blt.w	13962 <cbvprintf+0x2a>
   1432c:	3401      	adds	r4, #1
   1432e:	e7f1      	b.n	14314 <cbvprintf+0x9dc>
				while (*cp != 'p') {
   14330:	7838      	ldrb	r0, [r7, #0]
   14332:	2870      	cmp	r0, #112	; 0x70
   14334:	d044      	beq.n	143c0 <cbvprintf+0xa88>
					OUTC(*cp++);
   14336:	3701      	adds	r7, #1
   14338:	4629      	mov	r1, r5
   1433a:	47b0      	blx	r6
   1433c:	2800      	cmp	r0, #0
   1433e:	f6ff ab10 	blt.w	13962 <cbvprintf+0x2a>
   14342:	3401      	adds	r4, #1
   14344:	e7f4      	b.n	14330 <cbvprintf+0x9f8>
				pad_len = conv->pad0_value;
   14346:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
				if (!conv->pad_postdp) {
   1434a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   1434e:	f013 0f20 	tst.w	r3, #32
   14352:	d010      	beq.n	14376 <cbvprintf+0xa3e>
				if (*cp == '.') {
   14354:	7838      	ldrb	r0, [r7, #0]
   14356:	282e      	cmp	r0, #46	; 0x2e
   14358:	d01d      	beq.n	14396 <cbvprintf+0xa5e>
				while (isdigit((int)*cp)) {
   1435a:	7838      	ldrb	r0, [r7, #0]
   1435c:	4b49      	ldr	r3, [pc, #292]	; (14484 <cbvprintf+0xb4c>)
   1435e:	5cc3      	ldrb	r3, [r0, r3]
   14360:	f013 0f04 	tst.w	r3, #4
   14364:	d02c      	beq.n	143c0 <cbvprintf+0xa88>
					OUTC(*cp++);
   14366:	3701      	adds	r7, #1
   14368:	4629      	mov	r1, r5
   1436a:	47b0      	blx	r6
   1436c:	2800      	cmp	r0, #0
   1436e:	f6ff aaf8 	blt.w	13962 <cbvprintf+0x2a>
   14372:	3401      	adds	r4, #1
   14374:	e7f1      	b.n	1435a <cbvprintf+0xa22>
					while (pad_len-- > 0) {
   14376:	f10a 3bff 	add.w	fp, sl, #4294967295
   1437a:	f1ba 0f00 	cmp.w	sl, #0
   1437e:	dd08      	ble.n	14392 <cbvprintf+0xa5a>
						OUTC('0');
   14380:	4629      	mov	r1, r5
   14382:	2030      	movs	r0, #48	; 0x30
   14384:	47b0      	blx	r6
   14386:	2800      	cmp	r0, #0
   14388:	f6ff aaeb 	blt.w	13962 <cbvprintf+0x2a>
   1438c:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   1438e:	46da      	mov	sl, fp
   14390:	e7f1      	b.n	14376 <cbvprintf+0xa3e>
   14392:	46da      	mov	sl, fp
   14394:	e7de      	b.n	14354 <cbvprintf+0xa1c>
					OUTC(*cp++);
   14396:	3701      	adds	r7, #1
   14398:	4629      	mov	r1, r5
   1439a:	47b0      	blx	r6
   1439c:	2800      	cmp	r0, #0
   1439e:	f6ff aae0 	blt.w	13962 <cbvprintf+0x2a>
   143a2:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   143a4:	f10a 3bff 	add.w	fp, sl, #4294967295
   143a8:	f1ba 0f00 	cmp.w	sl, #0
   143ac:	ddd5      	ble.n	1435a <cbvprintf+0xa22>
						OUTC('0');
   143ae:	4629      	mov	r1, r5
   143b0:	2030      	movs	r0, #48	; 0x30
   143b2:	47b0      	blx	r6
   143b4:	2800      	cmp	r0, #0
   143b6:	f6ff aad4 	blt.w	13962 <cbvprintf+0x2a>
   143ba:	3401      	adds	r4, #1
					while (pad_len-- > 0) {
   143bc:	46da      	mov	sl, fp
   143be:	e7f1      	b.n	143a4 <cbvprintf+0xa6c>
			pad_len = conv->pad0_pre_exp;
   143c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			while (pad_len-- > 0) {
   143c2:	f103 3aff 	add.w	sl, r3, #4294967295
   143c6:	2b00      	cmp	r3, #0
   143c8:	dd08      	ble.n	143dc <cbvprintf+0xaa4>
				OUTC('0');
   143ca:	4629      	mov	r1, r5
   143cc:	2030      	movs	r0, #48	; 0x30
   143ce:	47b0      	blx	r6
   143d0:	2800      	cmp	r0, #0
   143d2:	f6ff aac6 	blt.w	13962 <cbvprintf+0x2a>
   143d6:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   143d8:	4653      	mov	r3, sl
   143da:	e7f2      	b.n	143c2 <cbvprintf+0xa8a>
			OUTS(cp, bpe);
   143dc:	9b08      	ldr	r3, [sp, #32]
   143de:	463a      	mov	r2, r7
   143e0:	4629      	mov	r1, r5
   143e2:	4630      	mov	r0, r6
   143e4:	f00f fd20 	bl	23e28 <outs>
   143e8:	2800      	cmp	r0, #0
   143ea:	f6ff aaba 	blt.w	13962 <cbvprintf+0x2a>
   143ee:	4404      	add	r4, r0
   143f0:	e033      	b.n	1445a <cbvprintf+0xb22>
			if (conv->altform_0c | conv->altform_0) {
   143f2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   143f6:	f3c3 1200 	ubfx	r2, r3, #4, #1
   143fa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   143fe:	4313      	orrs	r3, r2
   14400:	d006      	beq.n	14410 <cbvprintf+0xad8>
				OUTC('0');
   14402:	4629      	mov	r1, r5
   14404:	2030      	movs	r0, #48	; 0x30
   14406:	47b0      	blx	r6
   14408:	2800      	cmp	r0, #0
   1440a:	f6ff aaaa 	blt.w	13962 <cbvprintf+0x2a>
   1440e:	3401      	adds	r4, #1
			if (conv->altform_0c) {
   14410:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   14414:	f013 0f10 	tst.w	r3, #16
   14418:	d007      	beq.n	1442a <cbvprintf+0xaf2>
				OUTC(conv->specifier);
   1441a:	4629      	mov	r1, r5
   1441c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   14420:	47b0      	blx	r6
   14422:	2800      	cmp	r0, #0
   14424:	f6ff aa9d 	blt.w	13962 <cbvprintf+0x2a>
   14428:	3401      	adds	r4, #1
			pad_len = conv->pad0_value;
   1442a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			while (pad_len-- > 0) {
   1442c:	f103 3aff 	add.w	sl, r3, #4294967295
   14430:	2b00      	cmp	r3, #0
   14432:	dd08      	ble.n	14446 <cbvprintf+0xb0e>
				OUTC('0');
   14434:	4629      	mov	r1, r5
   14436:	2030      	movs	r0, #48	; 0x30
   14438:	47b0      	blx	r6
   1443a:	2800      	cmp	r0, #0
   1443c:	f6ff aa91 	blt.w	13962 <cbvprintf+0x2a>
   14440:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   14442:	4653      	mov	r3, sl
   14444:	e7f2      	b.n	1442c <cbvprintf+0xaf4>
			OUTS(bps, bpe);
   14446:	9b08      	ldr	r3, [sp, #32]
   14448:	463a      	mov	r2, r7
   1444a:	4629      	mov	r1, r5
   1444c:	4630      	mov	r0, r6
   1444e:	f00f fceb 	bl	23e28 <outs>
   14452:	2800      	cmp	r0, #0
   14454:	f6ff aa85 	blt.w	13962 <cbvprintf+0x2a>
   14458:	4404      	add	r4, r0
		while (width > 0) {
   1445a:	f1b8 0f00 	cmp.w	r8, #0
   1445e:	dd09      	ble.n	14474 <cbvprintf+0xb3c>
			OUTC(' ');
   14460:	4629      	mov	r1, r5
   14462:	2020      	movs	r0, #32
   14464:	47b0      	blx	r6
   14466:	2800      	cmp	r0, #0
   14468:	f6ff aa7b 	blt.w	13962 <cbvprintf+0x2a>
   1446c:	3401      	adds	r4, #1
			--width;
   1446e:	f108 38ff 	add.w	r8, r8, #4294967295
   14472:	e7f2      	b.n	1445a <cbvprintf+0xb22>
		fp = extract_conversion(conv, sp);
   14474:	464f      	mov	r7, r9
   14476:	f7ff ba69 	b.w	1394c <cbvprintf+0x14>
	return count;
   1447a:	4620      	mov	r0, r4
   1447c:	f7ff ba71 	b.w	13962 <cbvprintf+0x2a>
   14480:	00028e29 	.word	0x00028e29
   14484:	0002ae4a 	.word	0x0002ae4a

00014488 <msg_process>:

static void msg_process(union log_msgs msg, bool bypass)
{
	struct log_backend const *backend;

	if (!bypass) {
   14488:	bb01      	cbnz	r1, 144cc <msg_process+0x44>
{
   1448a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1448c:	4606      	mov	r6, r0
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
   1448e:	2400      	movs	r4, #0
   14490:	e000      	b.n	14494 <msg_process+0xc>
   14492:	3401      	adds	r4, #1
   14494:	4b0e      	ldr	r3, [pc, #56]	; (144d0 <msg_process+0x48>)
   14496:	4a0f      	ldr	r2, [pc, #60]	; (144d4 <msg_process+0x4c>)
   14498:	1a9b      	subs	r3, r3, r2
   1449a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   1449e:	da14      	bge.n	144ca <msg_process+0x42>
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   144a0:	4d0c      	ldr	r5, [pc, #48]	; (144d4 <msg_process+0x4c>)
   144a2:	eb05 1504 	add.w	r5, r5, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   144a6:	686b      	ldr	r3, [r5, #4]
   144a8:	795b      	ldrb	r3, [r3, #5]
			backend = log_backend_get(i);
			if (log_backend_is_active(backend) &&
   144aa:	2b00      	cmp	r3, #0
   144ac:	d0f1      	beq.n	14492 <msg_process+0xa>
			    msg_filter_check(backend, msg)) {
   144ae:	4631      	mov	r1, r6
   144b0:	4628      	mov	r0, r5
   144b2:	f00f fcd6 	bl	23e62 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   144b6:	2800      	cmp	r0, #0
   144b8:	d0eb      	beq.n	14492 <msg_process+0xa>
	backend->api->process(backend, msg);
   144ba:	0127      	lsls	r7, r4, #4
   144bc:	4b05      	ldr	r3, [pc, #20]	; (144d4 <msg_process+0x4c>)
   144be:	59db      	ldr	r3, [r3, r7]
   144c0:	681b      	ldr	r3, [r3, #0]
   144c2:	4631      	mov	r1, r6
   144c4:	4628      	mov	r0, r5
   144c6:	4798      	blx	r3
}
   144c8:	e7e3      	b.n	14492 <msg_process+0xa>
			z_log_msg2_free(msg.msg2);
		} else {
			log_msg_put(msg.msg);
		}
	}
}
   144ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   144cc:	4770      	bx	lr
   144ce:	bf00      	nop
   144d0:	00028964 	.word	0x00028964
   144d4:	00028944 	.word	0x00028944

000144d8 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   144d8:	4b18      	ldr	r3, [pc, #96]	; (1453c <log_init+0x64>)
   144da:	f3bf 8f5b 	dmb	ish
   144de:	e853 2f00 	ldrex	r2, [r3]
   144e2:	1c51      	adds	r1, r2, #1
   144e4:	e843 1000 	strex	r0, r1, [r3]
   144e8:	2800      	cmp	r0, #0
   144ea:	d1f8      	bne.n	144de <log_init+0x6>
   144ec:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   144f0:	bb1a      	cbnz	r2, 1453a <log_init+0x62>
{
   144f2:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   144f4:	2400      	movs	r4, #0
   144f6:	e009      	b.n	1450c <log_init+0x34>
					   backend->cb->ctx,
   144f8:	4b11      	ldr	r3, [pc, #68]	; (14540 <log_init+0x68>)
   144fa:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   144fe:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   14500:	2204      	movs	r2, #4
   14502:	6819      	ldr	r1, [r3, #0]
   14504:	4628      	mov	r0, r5
   14506:	f000 f8a9 	bl	1465c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   1450a:	3401      	adds	r4, #1
   1450c:	4b0d      	ldr	r3, [pc, #52]	; (14544 <log_init+0x6c>)
   1450e:	4a0c      	ldr	r2, [pc, #48]	; (14540 <log_init+0x68>)
   14510:	1a9b      	subs	r3, r3, r2
   14512:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   14516:	da0f      	bge.n	14538 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   14518:	4626      	mov	r6, r4
	return &__log_backends_start[idx];
   1451a:	4d09      	ldr	r5, [pc, #36]	; (14540 <log_init+0x68>)
   1451c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   14520:	7b2b      	ldrb	r3, [r5, #12]
   14522:	2b00      	cmp	r3, #0
   14524:	d0f1      	beq.n	1450a <log_init+0x32>
			if (backend->api->init != NULL) {
   14526:	0123      	lsls	r3, r4, #4
   14528:	4a05      	ldr	r2, [pc, #20]	; (14540 <log_init+0x68>)
   1452a:	58d3      	ldr	r3, [r2, r3]
   1452c:	699b      	ldr	r3, [r3, #24]
   1452e:	2b00      	cmp	r3, #0
   14530:	d0e2      	beq.n	144f8 <log_init+0x20>
				backend->api->init(backend);
   14532:	4628      	mov	r0, r5
   14534:	4798      	blx	r3
   14536:	e7df      	b.n	144f8 <log_init+0x20>
}
   14538:	bd70      	pop	{r4, r5, r6, pc}
   1453a:	4770      	bx	lr
   1453c:	20002974 	.word	0x20002974
   14540:	00028944 	.word	0x00028944
   14544:	00028964 	.word	0x00028964

00014548 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
   14548:	b138      	cbz	r0, 1455a <log_set_timestamp_func+0x12>
{
   1454a:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
   1454c:	4a04      	ldr	r2, [pc, #16]	; (14560 <log_set_timestamp_func+0x18>)
   1454e:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
   14550:	4608      	mov	r0, r1
   14552:	f000 fa45 	bl	149e0 <log_output_timestamp_freq_set>
	return 0;
   14556:	2000      	movs	r0, #0
}
   14558:	bd08      	pop	{r3, pc}
		return -EINVAL;
   1455a:	f06f 0015 	mvn.w	r0, #21
}
   1455e:	4770      	bx	lr
   14560:	20000590 	.word	0x20000590

00014564 <log_core_init>:
{
   14564:	b508      	push	{r3, lr}
	panic_mode = false;
   14566:	2300      	movs	r3, #0
   14568:	4a04      	ldr	r2, [pc, #16]	; (1457c <log_core_init+0x18>)
   1456a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1456c:	4a04      	ldr	r2, [pc, #16]	; (14580 <log_core_init+0x1c>)
   1456e:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
   14570:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   14574:	4803      	ldr	r0, [pc, #12]	; (14584 <log_core_init+0x20>)
   14576:	f7ff ffe7 	bl	14548 <log_set_timestamp_func>
}
   1457a:	bd08      	pop	{r3, pc}
   1457c:	20003c76 	.word	0x20003c76
   14580:	20002970 	.word	0x20002970
   14584:	00023e67 	.word	0x00023e67

00014588 <z_impl_log_panic>:
	if (panic_mode) {
   14588:	4b10      	ldr	r3, [pc, #64]	; (145cc <z_impl_log_panic+0x44>)
   1458a:	781b      	ldrb	r3, [r3, #0]
   1458c:	b103      	cbz	r3, 14590 <z_impl_log_panic+0x8>
   1458e:	4770      	bx	lr
{
   14590:	b510      	push	{r4, lr}
	log_init();
   14592:	f7ff ffa1 	bl	144d8 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   14596:	2400      	movs	r4, #0
   14598:	e000      	b.n	1459c <z_impl_log_panic+0x14>
   1459a:	3401      	adds	r4, #1
   1459c:	4b0c      	ldr	r3, [pc, #48]	; (145d0 <z_impl_log_panic+0x48>)
   1459e:	4a0d      	ldr	r2, [pc, #52]	; (145d4 <z_impl_log_panic+0x4c>)
   145a0:	1a9b      	subs	r3, r3, r2
   145a2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   145a6:	da0c      	bge.n	145c2 <z_impl_log_panic+0x3a>
   145a8:	480a      	ldr	r0, [pc, #40]	; (145d4 <z_impl_log_panic+0x4c>)
   145aa:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   145ae:	6843      	ldr	r3, [r0, #4]
   145b0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   145b2:	2b00      	cmp	r3, #0
   145b4:	d0f1      	beq.n	1459a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   145b6:	0123      	lsls	r3, r4, #4
   145b8:	4a06      	ldr	r2, [pc, #24]	; (145d4 <z_impl_log_panic+0x4c>)
   145ba:	58d3      	ldr	r3, [r2, r3]
   145bc:	695b      	ldr	r3, [r3, #20]
   145be:	4798      	blx	r3
}
   145c0:	e7eb      	b.n	1459a <z_impl_log_panic+0x12>
	panic_mode = true;
   145c2:	4b02      	ldr	r3, [pc, #8]	; (145cc <z_impl_log_panic+0x44>)
   145c4:	2201      	movs	r2, #1
   145c6:	701a      	strb	r2, [r3, #0]
}
   145c8:	bd10      	pop	{r4, pc}
   145ca:	bf00      	nop
   145cc:	20003c76 	.word	0x20003c76
   145d0:	00028964 	.word	0x00028964
   145d4:	00028944 	.word	0x00028944

000145d8 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
   145d8:	4b01      	ldr	r3, [pc, #4]	; (145e0 <z_log_notify_backend_enabled+0x8>)
   145da:	2201      	movs	r2, #1
   145dc:	701a      	strb	r2, [r3, #0]
}
   145de:	4770      	bx	lr
   145e0:	20003c75 	.word	0x20003c75

000145e4 <z_log_dropped>:
   145e4:	4b0c      	ldr	r3, [pc, #48]	; (14618 <z_log_dropped+0x34>)
   145e6:	f3bf 8f5b 	dmb	ish
   145ea:	e853 2f00 	ldrex	r2, [r3]
   145ee:	3201      	adds	r2, #1
   145f0:	e843 2100 	strex	r1, r2, [r3]
   145f4:	2900      	cmp	r1, #0
   145f6:	d1f8      	bne.n	145ea <z_log_dropped+0x6>
   145f8:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   145fc:	4b07      	ldr	r3, [pc, #28]	; (1461c <z_log_dropped+0x38>)
   145fe:	f3bf 8f5b 	dmb	ish
   14602:	e853 2f00 	ldrex	r2, [r3]
   14606:	3a01      	subs	r2, #1
   14608:	e843 2100 	strex	r1, r2, [r3]
   1460c:	2900      	cmp	r1, #0
   1460e:	d1f8      	bne.n	14602 <z_log_dropped+0x1e>
   14610:	f3bf 8f5b 	dmb	ish

void z_log_dropped(void)
{
	atomic_inc(&dropped_cnt);
	atomic_dec(&buffered_cnt);
}
   14614:	4770      	bx	lr
   14616:	bf00      	nop
   14618:	20002970 	.word	0x20002970
   1461c:	2000296c 	.word	0x2000296c

00014620 <z_log_msg2_commit>:
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
   14620:	b510      	push	{r4, lr}
   14622:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14624:	4b04      	ldr	r3, [pc, #16]	; (14638 <z_log_msg2_commit+0x18>)
   14626:	681b      	ldr	r3, [r3, #0]
   14628:	4798      	blx	r3
   1462a:	60a0      	str	r0, [r4, #8]
	if (IS_ENABLED(CONFIG_LOG2_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
   1462c:	2100      	movs	r1, #0
   1462e:	4620      	mov	r0, r4
   14630:	f7ff ff2a 	bl	14488 <msg_process>
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);

	if (IS_ENABLED(CONFIG_LOG2_MODE_DEFERRED)) {
		z_log_msg_post_finalize();
	}
}
   14634:	bd10      	pop	{r4, pc}
   14636:	bf00      	nop
   14638:	20000590 	.word	0x20000590

0001463c <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1463c:	4b05      	ldr	r3, [pc, #20]	; (14654 <log_source_name_get+0x18>)
   1463e:	4a06      	ldr	r2, [pc, #24]	; (14658 <log_source_name_get+0x1c>)
   14640:	1a9b      	subs	r3, r3, r2
   14642:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   14646:	d202      	bcs.n	1464e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   14648:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   1464c:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   1464e:	2000      	movs	r0, #0
}
   14650:	4770      	bx	lr
   14652:	bf00      	nop
   14654:	00028944 	.word	0x00028944
   14658:	00028874 	.word	0x00028874

0001465c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   1465c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1465e:	4b07      	ldr	r3, [pc, #28]	; (1467c <log_backend_enable+0x20>)
   14660:	1ac3      	subs	r3, r0, r3
   14662:	111b      	asrs	r3, r3, #4
   14664:	3301      	adds	r3, #1
	backend->cb->id = id;
   14666:	6842      	ldr	r2, [r0, #4]
   14668:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   1466a:	6843      	ldr	r3, [r0, #4]
   1466c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1466e:	6843      	ldr	r3, [r0, #4]
   14670:	2201      	movs	r2, #1
   14672:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   14674:	f7ff ffb0 	bl	145d8 <z_log_notify_backend_enabled>
}
   14678:	bd08      	pop	{r3, pc}
   1467a:	bf00      	nop
   1467c:	00028944 	.word	0x00028944

00014680 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14680:	b40e      	push	{r1, r2, r3}
   14682:	b500      	push	{lr}
   14684:	b082      	sub	sp, #8
   14686:	4601      	mov	r1, r0
   14688:	ab03      	add	r3, sp, #12
   1468a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   1468e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14690:	4803      	ldr	r0, [pc, #12]	; (146a0 <print_formatted+0x20>)
   14692:	f7ff f951 	bl	13938 <cbvprintf>
	va_end(args);

	return length;
}
   14696:	b002      	add	sp, #8
   14698:	f85d eb04 	ldr.w	lr, [sp], #4
   1469c:	b003      	add	sp, #12
   1469e:	4770      	bx	lr
   146a0:	00023e7d 	.word	0x00023e7d

000146a4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   146a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   146a6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   146a8:	f011 0f44 	tst.w	r1, #68	; 0x44
   146ac:	d005      	beq.n	146ba <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   146ae:	4b1a      	ldr	r3, [pc, #104]	; (14718 <timestamp_print+0x74>)
   146b0:	681c      	ldr	r4, [r3, #0]
   146b2:	b934      	cbnz	r4, 146c2 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   146b4:	2000      	movs	r0, #0
	}

	return length;
}
   146b6:	b005      	add	sp, #20
   146b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   146ba:	4918      	ldr	r1, [pc, #96]	; (1471c <timestamp_print+0x78>)
   146bc:	f7ff ffe0 	bl	14680 <print_formatted>
   146c0:	e7f9      	b.n	146b6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   146c2:	4b17      	ldr	r3, [pc, #92]	; (14720 <timestamp_print+0x7c>)
   146c4:	6819      	ldr	r1, [r3, #0]
   146c6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   146ca:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   146ce:	4a15      	ldr	r2, [pc, #84]	; (14724 <timestamp_print+0x80>)
   146d0:	fba2 3205 	umull	r3, r2, r2, r5
   146d4:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   146d6:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   146da:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   146de:	4b12      	ldr	r3, [pc, #72]	; (14728 <timestamp_print+0x84>)
   146e0:	fba3 7306 	umull	r7, r3, r3, r6
   146e4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   146e6:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   146ea:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   146ee:	fb05 f101 	mul.w	r1, r5, r1
   146f2:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   146f6:	fb07 1114 	mls	r1, r7, r4, r1
   146fa:	fb05 f101 	mul.w	r1, r5, r1
   146fe:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   14702:	9402      	str	r4, [sp, #8]
   14704:	9701      	str	r7, [sp, #4]
   14706:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1470a:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   1470e:	9100      	str	r1, [sp, #0]
   14710:	4906      	ldr	r1, [pc, #24]	; (1472c <timestamp_print+0x88>)
   14712:	f7ff ffb5 	bl	14680 <print_formatted>
   14716:	e7ce      	b.n	146b6 <timestamp_print+0x12>
   14718:	20002978 	.word	0x20002978
   1471c:	00028e30 	.word	0x00028e30
   14720:	2000297c 	.word	0x2000297c
   14724:	91a2b3c5 	.word	0x91a2b3c5
   14728:	88888889 	.word	0x88888889
   1472c:	00028e3c 	.word	0x00028e3c

00014730 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   14730:	b161      	cbz	r1, 1474c <color_print+0x1c>
{
   14732:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   14734:	b12a      	cbz	r2, 14742 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   14736:	4a06      	ldr	r2, [pc, #24]	; (14750 <color_print+0x20>)
   14738:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1473c:	b912      	cbnz	r2, 14744 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1473e:	4a05      	ldr	r2, [pc, #20]	; (14754 <color_print+0x24>)
   14740:	e000      	b.n	14744 <color_print+0x14>
   14742:	4a04      	ldr	r2, [pc, #16]	; (14754 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   14744:	4904      	ldr	r1, [pc, #16]	; (14758 <color_print+0x28>)
   14746:	f7ff ff9b 	bl	14680 <print_formatted>
	}
}
   1474a:	bd08      	pop	{r3, pc}
   1474c:	4770      	bx	lr
   1474e:	bf00      	nop
   14750:	00028eb0 	.word	0x00028eb0
   14754:	00028e58 	.word	0x00028e58
   14758:	00029718 	.word	0x00029718

0001475c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1475c:	f011 0f10 	tst.w	r1, #16
   14760:	d10b      	bne.n	1477a <newline_print+0x1e>
{
   14762:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14764:	f011 0f20 	tst.w	r1, #32
   14768:	d003      	beq.n	14772 <newline_print+0x16>
		print_formatted(ctx, "\n");
   1476a:	4904      	ldr	r1, [pc, #16]	; (1477c <newline_print+0x20>)
   1476c:	f7ff ff88 	bl	14680 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   14770:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   14772:	4903      	ldr	r1, [pc, #12]	; (14780 <newline_print+0x24>)
   14774:	f7ff ff84 	bl	14680 <print_formatted>
   14778:	e7fa      	b.n	14770 <newline_print+0x14>
   1477a:	4770      	bx	lr
   1477c:	000294a4 	.word	0x000294a4
   14780:	00028e60 	.word	0x00028e60

00014784 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   14784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14788:	4605      	mov	r5, r0
   1478a:	460f      	mov	r7, r1
   1478c:	4616      	mov	r6, r2
   1478e:	4698      	mov	r8, r3
	newline_print(output, flags);
   14790:	9906      	ldr	r1, [sp, #24]
   14792:	f7ff ffe3 	bl	1475c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   14796:	2400      	movs	r4, #0
   14798:	4544      	cmp	r4, r8
   1479a:	da05      	bge.n	147a8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   1479c:	4924      	ldr	r1, [pc, #144]	; (14830 <hexdump_line_print+0xac>)
   1479e:	4628      	mov	r0, r5
   147a0:	f7ff ff6e 	bl	14680 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   147a4:	3401      	adds	r4, #1
   147a6:	e7f7      	b.n	14798 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   147a8:	2400      	movs	r4, #0
   147aa:	e009      	b.n	147c0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   147ac:	4920      	ldr	r1, [pc, #128]	; (14830 <hexdump_line_print+0xac>)
   147ae:	4628      	mov	r0, r5
   147b0:	f7ff ff66 	bl	14680 <print_formatted>
   147b4:	e00b      	b.n	147ce <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   147b6:	491f      	ldr	r1, [pc, #124]	; (14834 <hexdump_line_print+0xb0>)
   147b8:	4628      	mov	r0, r5
   147ba:	f7ff ff61 	bl	14680 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   147be:	3401      	adds	r4, #1
   147c0:	2c0f      	cmp	r4, #15
   147c2:	dc0c      	bgt.n	147de <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   147c4:	2c00      	cmp	r4, #0
   147c6:	dd02      	ble.n	147ce <hexdump_line_print+0x4a>
   147c8:	f014 0f07 	tst.w	r4, #7
   147cc:	d0ee      	beq.n	147ac <hexdump_line_print+0x28>
		if (i < length) {
   147ce:	42b4      	cmp	r4, r6
   147d0:	d2f1      	bcs.n	147b6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   147d2:	5d3a      	ldrb	r2, [r7, r4]
   147d4:	4918      	ldr	r1, [pc, #96]	; (14838 <hexdump_line_print+0xb4>)
   147d6:	4628      	mov	r0, r5
   147d8:	f7ff ff52 	bl	14680 <print_formatted>
   147dc:	e7ef      	b.n	147be <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   147de:	4917      	ldr	r1, [pc, #92]	; (1483c <hexdump_line_print+0xb8>)
   147e0:	4628      	mov	r0, r5
   147e2:	f7ff ff4d 	bl	14680 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   147e6:	2400      	movs	r4, #0
   147e8:	e009      	b.n	147fe <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   147ea:	4911      	ldr	r1, [pc, #68]	; (14830 <hexdump_line_print+0xac>)
   147ec:	4628      	mov	r0, r5
   147ee:	f7ff ff47 	bl	14680 <print_formatted>
   147f2:	e00b      	b.n	1480c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   147f4:	4912      	ldr	r1, [pc, #72]	; (14840 <hexdump_line_print+0xbc>)
   147f6:	4628      	mov	r0, r5
   147f8:	f7ff ff42 	bl	14680 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   147fc:	3401      	adds	r4, #1
   147fe:	2c0f      	cmp	r4, #15
   14800:	dc13      	bgt.n	1482a <hexdump_line_print+0xa6>
		if (i > 0 && !(i % 8)) {
   14802:	2c00      	cmp	r4, #0
   14804:	dd02      	ble.n	1480c <hexdump_line_print+0x88>
   14806:	f014 0f07 	tst.w	r4, #7
   1480a:	d0ee      	beq.n	147ea <hexdump_line_print+0x66>
		if (i < length) {
   1480c:	42b4      	cmp	r4, r6
   1480e:	d207      	bcs.n	14820 <hexdump_line_print+0x9c>
			char c = (char)data[i];
   14810:	5d3a      	ldrb	r2, [r7, r4]
			      isprint((int)c) ? c : '.');
   14812:	4b0c      	ldr	r3, [pc, #48]	; (14844 <hexdump_line_print+0xc0>)
   14814:	5cd3      	ldrb	r3, [r2, r3]
			print_formatted(output, "%c",
   14816:	f013 0f97 	tst.w	r3, #151	; 0x97
   1481a:	d1eb      	bne.n	147f4 <hexdump_line_print+0x70>
   1481c:	222e      	movs	r2, #46	; 0x2e
   1481e:	e7e9      	b.n	147f4 <hexdump_line_print+0x70>
		} else {
			print_formatted(output, " ");
   14820:	4903      	ldr	r1, [pc, #12]	; (14830 <hexdump_line_print+0xac>)
   14822:	4628      	mov	r0, r5
   14824:	f7ff ff2c 	bl	14680 <print_formatted>
   14828:	e7e8      	b.n	147fc <hexdump_line_print+0x78>
		}
	}
}
   1482a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1482e:	bf00      	nop
   14830:	00028e88 	.word	0x00028e88
   14834:	00028e6c 	.word	0x00028e6c
   14838:	00028e64 	.word	0x00028e64
   1483c:	00028e70 	.word	0x00028e70
   14840:	00028e74 	.word	0x00028e74
   14844:	0002ae4a 	.word	0x0002ae4a

00014848 <ids_print>:
{
   14848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1484c:	4680      	mov	r8, r0
   1484e:	4616      	mov	r6, r2
   14850:	461d      	mov	r5, r3
   14852:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   14856:	b959      	cbnz	r1, 14870 <ids_print+0x28>
	int total = 0;
   14858:	2400      	movs	r4, #0
	if (source_id >= 0) {
   1485a:	2f00      	cmp	r7, #0
   1485c:	db1c      	blt.n	14898 <ids_print+0x50>
		total += print_formatted(output,
   1485e:	b186      	cbz	r6, 14882 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   14860:	2301      	movs	r3, #1
   14862:	9a07      	ldr	r2, [sp, #28]
   14864:	4093      	lsls	r3, r2
				(func_on &&
   14866:	f013 0f10 	tst.w	r3, #16
   1486a:	d118      	bne.n	1489e <ids_print+0x56>
		total += print_formatted(output,
   1486c:	4e0d      	ldr	r6, [pc, #52]	; (148a4 <ids_print+0x5c>)
   1486e:	e009      	b.n	14884 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   14870:	4b0d      	ldr	r3, [pc, #52]	; (148a8 <ids_print+0x60>)
   14872:	9a07      	ldr	r2, [sp, #28]
   14874:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14878:	490c      	ldr	r1, [pc, #48]	; (148ac <ids_print+0x64>)
   1487a:	f7ff ff01 	bl	14680 <print_formatted>
   1487e:	4604      	mov	r4, r0
   14880:	e7eb      	b.n	1485a <ids_print+0x12>
		total += print_formatted(output,
   14882:	4e08      	ldr	r6, [pc, #32]	; (148a4 <ids_print+0x5c>)
   14884:	4639      	mov	r1, r7
   14886:	4628      	mov	r0, r5
   14888:	f7ff fed8 	bl	1463c <log_source_name_get>
   1488c:	4602      	mov	r2, r0
   1488e:	4631      	mov	r1, r6
   14890:	4640      	mov	r0, r8
   14892:	f7ff fef5 	bl	14680 <print_formatted>
   14896:	4404      	add	r4, r0
}
   14898:	4620      	mov	r0, r4
   1489a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   1489e:	4e04      	ldr	r6, [pc, #16]	; (148b0 <ids_print+0x68>)
   148a0:	e7f0      	b.n	14884 <ids_print+0x3c>
   148a2:	bf00      	nop
   148a4:	00028e78 	.word	0x00028e78
   148a8:	00028ec4 	.word	0x00028ec4
   148ac:	00028e84 	.word	0x00028e84
   148b0:	00028e80 	.word	0x00028e80

000148b4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   148b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b8:	b085      	sub	sp, #20
   148ba:	4605      	mov	r5, r0
   148bc:	460c      	mov	r4, r1
   148be:	4616      	mov	r6, r2
   148c0:	9303      	str	r3, [sp, #12]
   148c2:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   148c6:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   148ca:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   148ce:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
   148d2:	f00f fad1 	bl	23e78 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   148d6:	b1e8      	cbz	r0, 14914 <prefix_print+0x60>
   148d8:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
   148da:	4913      	ldr	r1, [pc, #76]	; (14928 <prefix_print+0x74>)
   148dc:	4628      	mov	r0, r5
   148de:	f7ff fecf 	bl	14680 <print_formatted>
   148e2:	4607      	mov	r7, r0
	}

	if (stamp) {
   148e4:	f1bb 0f00 	cmp.w	fp, #0
   148e8:	d116      	bne.n	14918 <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
   148ea:	4642      	mov	r2, r8
   148ec:	4651      	mov	r1, sl
   148ee:	4628      	mov	r0, r5
   148f0:	f00f faec 	bl	23ecc <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
   148f4:	f8cd 8004 	str.w	r8, [sp, #4]
   148f8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
   148fc:	9300      	str	r3, [sp, #0]
   148fe:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   14902:	4632      	mov	r2, r6
   14904:	4649      	mov	r1, r9
   14906:	4628      	mov	r0, r5
   14908:	f7ff ff9e 	bl	14848 <ids_print>
			domain_id, source_id, level);


	return length;
}
   1490c:	4438      	add	r0, r7
   1490e:	b005      	add	sp, #20
   14910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   14914:	2700      	movs	r7, #0
   14916:	e7e5      	b.n	148e4 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
   14918:	9a03      	ldr	r2, [sp, #12]
   1491a:	4621      	mov	r1, r4
   1491c:	4628      	mov	r0, r5
   1491e:	f7ff fec1 	bl	146a4 <timestamp_print>
   14922:	4407      	add	r7, r0
   14924:	e7e1      	b.n	148ea <prefix_print+0x36>
   14926:	bf00      	nop
   14928:	00028e8c 	.word	0x00028e8c

0001492c <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
   1492c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14930:	b085      	sub	sp, #20
   14932:	4606      	mov	r6, r0
   14934:	460c      	mov	r4, r1
   14936:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
	return msg->hdr.timestamp;
   14938:	688b      	ldr	r3, [r1, #8]
	return msg->hdr.desc.level;
   1493a:	880a      	ldrh	r2, [r1, #0]
   1493c:	f3c2 1882 	ubfx	r8, r2, #6, #3
		 * log_output_msg_syst_process(output, msg, flags);
		 */
		return;
	}

	if (!raw_string) {
   14940:	f412 7fe0 	tst.w	r2, #448	; 0x1c0
   14944:	d034      	beq.n	149b0 <log_output_msg2_process+0x84>
	return msg->hdr.source;
   14946:	684a      	ldr	r2, [r1, #4]
	return msg->hdr.desc.domain;
   14948:	7809      	ldrb	r1, [r1, #0]
   1494a:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
   1494e:	b362      	cbz	r2, 149aa <log_output_msg2_process+0x7e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   14950:	4820      	ldr	r0, [pc, #128]	; (149d4 <log_output_msg2_process+0xa8>)
   14952:	1a12      	subs	r2, r2, r0
   14954:	f342 02cf 	sbfx	r2, r2, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
   14958:	9202      	str	r2, [sp, #8]
   1495a:	9101      	str	r1, [sp, #4]
   1495c:	f8cd 8000 	str.w	r8, [sp]
   14960:	2200      	movs	r2, #0
   14962:	4639      	mov	r1, r7
   14964:	4630      	mov	r0, r6
   14966:	f7ff ffa5 	bl	148b4 <prefix_print>
   1496a:	4681      	mov	r9, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1496c:	4625      	mov	r5, r4
   1496e:	f855 3b0c 	ldr.w	r3, [r5], #12
   14972:	f3c3 2349 	ubfx	r3, r3, #9, #10
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
   14976:	b13b      	cbz	r3, 14988 <log_output_msg2_process+0x5c>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   14978:	f1b8 0f00 	cmp.w	r8, #0
   1497c:	d11b      	bne.n	149b6 <log_output_msg2_process+0x8a>
   1497e:	4816      	ldr	r0, [pc, #88]	; (149d8 <log_output_msg2_process+0xac>)
   14980:	462a      	mov	r2, r5
   14982:	4631      	mov	r1, r6
   14984:	f00e fe2e 	bl	235e4 <cbpprintf>
	*len = msg->hdr.desc.data_len;
   14988:	8862      	ldrh	r2, [r4, #2]
   1498a:	f3c2 02cb 	ubfx	r2, r2, #3, #12
	return msg->data + msg->hdr.desc.package_len;
   1498e:	6821      	ldr	r1, [r4, #0]
   14990:	f3c1 2149 	ubfx	r1, r1, #9, #10
   14994:	4429      	add	r1, r5
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
   14996:	b982      	cbnz	r2, 149ba <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
   14998:	f1b8 0f00 	cmp.w	r8, #0
   1499c:	d113      	bne.n	149c6 <log_output_msg2_process+0x9a>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   1499e:	4630      	mov	r0, r6
   149a0:	f00f fac7 	bl	23f32 <log_output_flush>
}
   149a4:	b005      	add	sp, #20
   149a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		int16_t source_id = source ?
   149aa:	f04f 32ff 	mov.w	r2, #4294967295
   149ae:	e7d3      	b.n	14958 <log_output_msg2_process+0x2c>
		prefix_offset = 0;
   149b0:	f04f 0900 	mov.w	r9, #0
   149b4:	e7da      	b.n	1496c <log_output_msg2_process+0x40>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
   149b6:	4809      	ldr	r0, [pc, #36]	; (149dc <log_output_msg2_process+0xb0>)
   149b8:	e7e2      	b.n	14980 <log_output_msg2_process+0x54>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
   149ba:	9700      	str	r7, [sp, #0]
   149bc:	464b      	mov	r3, r9
   149be:	4630      	mov	r0, r6
   149c0:	f00f fa9c 	bl	23efc <log_msg2_hexdump>
   149c4:	e7e8      	b.n	14998 <log_output_msg2_process+0x6c>
		postfix_print(output, flags, level);
   149c6:	4642      	mov	r2, r8
   149c8:	4639      	mov	r1, r7
   149ca:	4630      	mov	r0, r6
   149cc:	f00f fa8a 	bl	23ee4 <postfix_print>
   149d0:	e7e5      	b.n	1499e <log_output_msg2_process+0x72>
   149d2:	bf00      	nop
   149d4:	00028874 	.word	0x00028874
   149d8:	00023e97 	.word	0x00023e97
   149dc:	00023e7d 	.word	0x00023e7d

000149e0 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   149e0:	4b07      	ldr	r3, [pc, #28]	; (14a00 <log_output_timestamp_freq_set+0x20>)
   149e2:	2201      	movs	r2, #1
   149e4:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   149e6:	4b07      	ldr	r3, [pc, #28]	; (14a04 <log_output_timestamp_freq_set+0x24>)
   149e8:	4298      	cmp	r0, r3
   149ea:	d905      	bls.n	149f8 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   149ec:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   149ee:	4a04      	ldr	r2, [pc, #16]	; (14a00 <log_output_timestamp_freq_set+0x20>)
   149f0:	6813      	ldr	r3, [r2, #0]
   149f2:	005b      	lsls	r3, r3, #1
   149f4:	6013      	str	r3, [r2, #0]
   149f6:	e7f6      	b.n	149e6 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   149f8:	4b03      	ldr	r3, [pc, #12]	; (14a08 <log_output_timestamp_freq_set+0x28>)
   149fa:	6018      	str	r0, [r3, #0]
}
   149fc:	4770      	bx	lr
   149fe:	bf00      	nop
   14a00:	2000297c 	.word	0x2000297c
   14a04:	000f4240 	.word	0x000f4240
   14a08:	20002978 	.word	0x20002978

00014a0c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   14a0c:	b570      	push	{r4, r5, r6, lr}
   14a0e:	4606      	mov	r6, r0
   14a10:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
   14a12:	2400      	movs	r4, #0
   14a14:	42ac      	cmp	r4, r5
   14a16:	d207      	bcs.n	14a28 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
   14a18:	4b04      	ldr	r3, [pc, #16]	; (14a2c <char_out+0x20>)
   14a1a:	6818      	ldr	r0, [r3, #0]
   14a1c:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   14a1e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   14a20:	685b      	ldr	r3, [r3, #4]
   14a22:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14a24:	3401      	adds	r4, #1
   14a26:	e7f5      	b.n	14a14 <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
   14a28:	4628      	mov	r0, r5
   14a2a:	bd70      	pop	{r4, r5, r6, pc}
   14a2c:	20002994 	.word	0x20002994

00014a30 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   14a30:	4b01      	ldr	r3, [pc, #4]	; (14a38 <log_backend_uart_init+0x8>)
   14a32:	4a02      	ldr	r2, [pc, #8]	; (14a3c <log_backend_uart_init+0xc>)
   14a34:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
   14a36:	4770      	bx	lr
   14a38:	20002994 	.word	0x20002994
   14a3c:	00028674 	.word	0x00028674

00014a40 <panic>:

static void panic(struct log_backend const *const backend)
{
   14a40:	b508      	push	{r3, lr}
	in_panic = true;
   14a42:	4b03      	ldr	r3, [pc, #12]	; (14a50 <panic+0x10>)
   14a44:	2201      	movs	r2, #1
   14a46:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   14a48:	4802      	ldr	r0, [pc, #8]	; (14a54 <panic+0x14>)
   14a4a:	f00f fa72 	bl	23f32 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   14a4e:	bd08      	pop	{r3, pc}
   14a50:	20003c77 	.word	0x20003c77
   14a54:	00028f14 	.word	0x00028f14

00014a58 <process>:
{
   14a58:	b508      	push	{r3, lr}
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
   14a5a:	220f      	movs	r2, #15
   14a5c:	4801      	ldr	r0, [pc, #4]	; (14a64 <process+0xc>)
   14a5e:	f7ff ff65 	bl	1492c <log_output_msg2_process>
}
   14a62:	bd08      	pop	{r3, pc}
   14a64:	00028f14 	.word	0x00028f14

00014a68 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   14a68:	4b01      	ldr	r3, [pc, #4]	; (14a70 <log_backend_rtt_init+0x8>)
   14a6a:	2201      	movs	r2, #1
   14a6c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   14a6e:	4770      	bx	lr
   14a70:	20003c78 	.word	0x20003c78

00014a74 <on_failed_write>:
{
   14a74:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   14a76:	b918      	cbnz	r0, 14a80 <on_failed_write+0xc>
		host_present = false;
   14a78:	4b04      	ldr	r3, [pc, #16]	; (14a8c <on_failed_write+0x18>)
   14a7a:	2200      	movs	r2, #0
   14a7c:	701a      	strb	r2, [r3, #0]
}
   14a7e:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   14a80:	f241 3088 	movw	r0, #5000	; 0x1388
   14a84:	f013 fc10 	bl	282a8 <z_impl_k_busy_wait>
   14a88:	e7f9      	b.n	14a7e <on_failed_write+0xa>
   14a8a:	bf00      	nop
   14a8c:	20003c78 	.word	0x20003c78

00014a90 <on_write>:
{
   14a90:	b538      	push	{r3, r4, r5, lr}
   14a92:	4604      	mov	r4, r0
	host_present = true;
   14a94:	4b0a      	ldr	r3, [pc, #40]	; (14ac0 <on_write+0x30>)
   14a96:	2201      	movs	r2, #1
   14a98:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   14a9a:	4b0a      	ldr	r3, [pc, #40]	; (14ac4 <on_write+0x34>)
   14a9c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   14a9e:	b903      	cbnz	r3, 14aa2 <on_write+0x12>
}
   14aa0:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   14aa2:	2000      	movs	r0, #0
   14aa4:	f00b fe52 	bl	2074c <SEGGER_RTT_HasDataUp>
   14aa8:	2800      	cmp	r0, #0
   14aaa:	d0f9      	beq.n	14aa0 <on_write+0x10>
   14aac:	4b04      	ldr	r3, [pc, #16]	; (14ac0 <on_write+0x30>)
   14aae:	781b      	ldrb	r3, [r3, #0]
   14ab0:	2b00      	cmp	r3, #0
   14ab2:	d0f5      	beq.n	14aa0 <on_write+0x10>
			on_failed_write(retry_cnt--);
   14ab4:	1e65      	subs	r5, r4, #1
   14ab6:	4620      	mov	r0, r4
   14ab8:	f7ff ffdc 	bl	14a74 <on_failed_write>
   14abc:	462c      	mov	r4, r5
   14abe:	e7f0      	b.n	14aa2 <on_write+0x12>
   14ac0:	20003c78 	.word	0x20003c78
   14ac4:	20003c79 	.word	0x20003c79

00014ac8 <data_out_block_mode>:
{
   14ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14aca:	4606      	mov	r6, r0
   14acc:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   14ace:	2704      	movs	r7, #4
   14ad0:	e006      	b.n	14ae0 <data_out_block_mode+0x18>
			on_write(retry_cnt);
   14ad2:	4638      	mov	r0, r7
   14ad4:	f7ff ffdc 	bl	14a90 <on_write>
	} while ((ret == 0) && host_present);
   14ad8:	b99c      	cbnz	r4, 14b02 <data_out_block_mode+0x3a>
   14ada:	4b0d      	ldr	r3, [pc, #52]	; (14b10 <data_out_block_mode+0x48>)
   14adc:	781b      	ldrb	r3, [r3, #0]
   14ade:	b183      	cbz	r3, 14b02 <data_out_block_mode+0x3a>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   14ae0:	462a      	mov	r2, r5
   14ae2:	4631      	mov	r1, r6
   14ae4:	2000      	movs	r0, #0
   14ae6:	f00b fdcd 	bl	20684 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   14aea:	4604      	mov	r4, r0
   14aec:	2800      	cmp	r0, #0
   14aee:	d1f0      	bne.n	14ad2 <data_out_block_mode+0xa>
		} else if (host_present) {
   14af0:	4b07      	ldr	r3, [pc, #28]	; (14b10 <data_out_block_mode+0x48>)
   14af2:	781b      	ldrb	r3, [r3, #0]
   14af4:	2b00      	cmp	r3, #0
   14af6:	d0ef      	beq.n	14ad8 <data_out_block_mode+0x10>
			retry_cnt--;
   14af8:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   14afa:	4638      	mov	r0, r7
   14afc:	f7ff ffba 	bl	14a74 <on_failed_write>
   14b00:	e7ea      	b.n	14ad8 <data_out_block_mode+0x10>
	return ((ret == 0) && host_present) ? 0 : length;
   14b02:	b914      	cbnz	r4, 14b0a <data_out_block_mode+0x42>
   14b04:	4b02      	ldr	r3, [pc, #8]	; (14b10 <data_out_block_mode+0x48>)
   14b06:	781b      	ldrb	r3, [r3, #0]
   14b08:	b903      	cbnz	r3, 14b0c <data_out_block_mode+0x44>
   14b0a:	462c      	mov	r4, r5
}
   14b0c:	4620      	mov	r0, r4
   14b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14b10:	20003c78 	.word	0x20003c78

00014b14 <panic>:

static void panic(struct log_backend const *const backend)
{
   14b14:	b508      	push	{r3, lr}
	panic_mode = true;
   14b16:	4b03      	ldr	r3, [pc, #12]	; (14b24 <panic+0x10>)
   14b18:	2201      	movs	r2, #1
   14b1a:	701a      	strb	r2, [r3, #0]
   14b1c:	4802      	ldr	r0, [pc, #8]	; (14b28 <panic+0x14>)
   14b1e:	f00f fa08 	bl	23f32 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
   14b22:	bd08      	pop	{r3, pc}
   14b24:	20003c79 	.word	0x20003c79
   14b28:	00028f50 	.word	0x00028f50

00014b2c <process>:
				     timestamp, metadata, data, length);
}

static void process(const struct log_backend *const backend,
		union log_msg2_generic *msg)
{
   14b2c:	b508      	push	{r3, lr}
	uint32_t flags = log_backend_std_get_flags();

	log_output_msg2_process(&log_output_rtt, &msg->log, flags);
   14b2e:	220f      	movs	r2, #15
   14b30:	4801      	ldr	r0, [pc, #4]	; (14b38 <process+0xc>)
   14b32:	f7ff fefb 	bl	1492c <log_output_msg2_process>
}
   14b36:	bd08      	pop	{r3, pc}
   14b38:	00028f50 	.word	0x00028f50

00014b3c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
   14b3c:	b570      	push	{r4, r5, r6, lr}
   14b3e:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
   14b40:	4b2c      	ldr	r3, [pc, #176]	; (14bf4 <pm_system_resume+0xb8>)
   14b42:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14b44:	f004 031f 	and.w	r3, r4, #31
   14b48:	2201      	movs	r2, #1
   14b4a:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b4c:	0961      	lsrs	r1, r4, #5
   14b4e:	4b2a      	ldr	r3, [pc, #168]	; (14bf8 <pm_system_resume+0xbc>)
   14b50:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14b54:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14b56:	f3bf 8f5b 	dmb	ish
   14b5a:	e853 1f00 	ldrex	r1, [r3]
   14b5e:	ea01 0500 	and.w	r5, r1, r0
   14b62:	e843 5600 	strex	r6, r5, [r3]
   14b66:	2e00      	cmp	r6, #0
   14b68:	d1f7      	bne.n	14b5a <pm_system_resume+0x1e>
   14b6a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14b6e:	420a      	tst	r2, r1
   14b70:	d03d      	beq.n	14bee <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
   14b72:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14b76:	009a      	lsls	r2, r3, #2
   14b78:	4b20      	ldr	r3, [pc, #128]	; (14bfc <pm_system_resume+0xc0>)
   14b7a:	4413      	add	r3, r2
   14b7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14b80:	ab04      	add	r3, sp, #16
   14b82:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   14b86:	4b1e      	ldr	r3, [pc, #120]	; (14c00 <pm_system_resume+0xc4>)
   14b88:	b163      	cbz	r3, 14ba4 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
   14b8a:	f00f fc13 	bl	243b4 <pm_power_state_exit_post_ops>
   14b8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14b92:	f3ef 8611 	mrs	r6, BASEPRI
   14b96:	f383 8812 	msr	BASEPRI_MAX, r3
   14b9a:	f3bf 8f6f 	isb	sy
   14b9e:	4b19      	ldr	r3, [pc, #100]	; (14c04 <pm_system_resume+0xc8>)
   14ba0:	681d      	ldr	r5, [r3, #0]
   14ba2:	e00a      	b.n	14bba <pm_system_resume+0x7e>
	__asm__ volatile(
   14ba4:	2300      	movs	r3, #0
   14ba6:	f383 8811 	msr	BASEPRI, r3
   14baa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   14bae:	e7ee      	b.n	14b8e <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14bb0:	462b      	mov	r3, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   14bb2:	b10d      	cbz	r5, 14bb8 <pm_system_resume+0x7c>
	return node->next;
   14bb4:	682b      	ldr	r3, [r5, #0]
   14bb6:	b16b      	cbz	r3, 14bd4 <pm_system_resume+0x98>
{
   14bb8:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14bba:	b15d      	cbz	r5, 14bd4 <pm_system_resume+0x98>
			callback = notifier->state_exit;
   14bbc:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
   14bbe:	2a00      	cmp	r2, #0
   14bc0:	d0f6      	beq.n	14bb0 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
   14bc2:	4b0c      	ldr	r3, [pc, #48]	; (14bf4 <pm_system_resume+0xb8>)
   14bc4:	7d1b      	ldrb	r3, [r3, #20]
   14bc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14bca:	0099      	lsls	r1, r3, #2
   14bcc:	4b0b      	ldr	r3, [pc, #44]	; (14bfc <pm_system_resume+0xc0>)
   14bce:	5c58      	ldrb	r0, [r3, r1]
   14bd0:	4790      	blx	r2
   14bd2:	e7ed      	b.n	14bb0 <pm_system_resume+0x74>
	__asm__ volatile(
   14bd4:	f386 8811 	msr	BASEPRI, r6
   14bd8:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14bdc:	4807      	ldr	r0, [pc, #28]	; (14bfc <pm_system_resume+0xc0>)
   14bde:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   14be2:	00a2      	lsls	r2, r4, #2
   14be4:	1881      	adds	r1, r0, r2
   14be6:	2300      	movs	r3, #0
   14be8:	5083      	str	r3, [r0, r2]
   14bea:	604b      	str	r3, [r1, #4]
   14bec:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
   14bee:	b004      	add	sp, #16
   14bf0:	bd70      	pop	{r4, r5, r6, pc}
   14bf2:	bf00      	nop
   14bf4:	20003c2c 	.word	0x20003c2c
   14bf8:	200029bc 	.word	0x200029bc
   14bfc:	200029c0 	.word	0x200029c0
   14c00:	000243b5 	.word	0x000243b5
   14c04:	200029b4 	.word	0x200029b4

00014c08 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   14c08:	b5f0      	push	{r4, r5, r6, r7, lr}
   14c0a:	b089      	sub	sp, #36	; 0x24
   14c0c:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
   14c0e:	4b55      	ldr	r3, [pc, #340]	; (14d64 <pm_system_suspend+0x15c>)
   14c10:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14c12:	f004 031f 	and.w	r3, r4, #31
   14c16:	2201      	movs	r2, #1
   14c18:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14c1a:	0961      	lsrs	r1, r4, #5
   14c1c:	4b52      	ldr	r3, [pc, #328]	; (14d68 <pm_system_suspend+0x160>)
   14c1e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14c22:	f3bf 8f5b 	dmb	ish
   14c26:	e853 1f00 	ldrex	r1, [r3]
   14c2a:	ea41 0002 	orr.w	r0, r1, r2
   14c2e:	e843 0600 	strex	r6, r0, [r3]
   14c32:	2e00      	cmp	r6, #0
   14c34:	d1f7      	bne.n	14c26 <pm_system_suspend+0x1e>
   14c36:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   14c3a:	420a      	tst	r2, r1
   14c3c:	d017      	beq.n	14c6e <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   14c3e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14c42:	4a4a      	ldr	r2, [pc, #296]	; (14d6c <pm_system_suspend+0x164>)
   14c44:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   14c48:	2b00      	cmp	r3, #0
   14c4a:	f000 8088 	beq.w	14d5e <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   14c4e:	f1b5 3fff 	cmp.w	r5, #4294967295
   14c52:	d11c      	bne.n	14c8e <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14c54:	f00c fcc8 	bl	215e8 <k_sched_lock>
	__asm__ volatile(
   14c58:	f04f 0340 	mov.w	r3, #64	; 0x40
   14c5c:	f3ef 8611 	mrs	r6, BASEPRI
   14c60:	f383 8812 	msr	BASEPRI_MAX, r3
   14c64:	f3bf 8f6f 	isb	sy
	return list->head;
   14c68:	4b41      	ldr	r3, [pc, #260]	; (14d70 <pm_system_suspend+0x168>)
   14c6a:	681d      	ldr	r5, [r3, #0]
   14c6c:	e02a      	b.n	14cc4 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   14c6e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   14c72:	4b3e      	ldr	r3, [pc, #248]	; (14d6c <pm_system_suspend+0x164>)
   14c74:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   14c78:	466f      	mov	r7, sp
   14c7a:	462a      	mov	r2, r5
   14c7c:	4621      	mov	r1, r4
   14c7e:	4638      	mov	r0, r7
   14c80:	f00f f9c4 	bl	2400c <pm_policy_next_state>
   14c84:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   14c88:	e886 0007 	stmia.w	r6, {r0, r1, r2}
   14c8c:	e7d7      	b.n	14c3e <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
   14c8e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14c92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14c96:	689b      	ldr	r3, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
   14c98:	0c59      	lsrs	r1, r3, #17
   14c9a:	03d8      	lsls	r0, r3, #15
   14c9c:	4e35      	ldr	r6, [pc, #212]	; (14d74 <pm_system_suspend+0x16c>)
   14c9e:	4a36      	ldr	r2, [pc, #216]	; (14d78 <pm_system_suspend+0x170>)
   14ca0:	2300      	movs	r3, #0
   14ca2:	1980      	adds	r0, r0, r6
   14ca4:	f04f 0600 	mov.w	r6, #0
   14ca8:	eb46 0101 	adc.w	r1, r6, r1
   14cac:	f7ec f9ea 	bl	1084 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   14cb0:	2101      	movs	r1, #1
   14cb2:	1a28      	subs	r0, r5, r0
   14cb4:	f013 fac9 	bl	2824a <z_set_timeout_expiry>
   14cb8:	e7cc      	b.n	14c54 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14cba:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   14cbc:	b10d      	cbz	r5, 14cc2 <pm_system_suspend+0xba>
	return node->next;
   14cbe:	682b      	ldr	r3, [r5, #0]
   14cc0:	b16b      	cbz	r3, 14cde <pm_system_suspend+0xd6>
{
   14cc2:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14cc4:	b15d      	cbz	r5, 14cde <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
   14cc6:	686a      	ldr	r2, [r5, #4]
		if (callback) {
   14cc8:	2a00      	cmp	r2, #0
   14cca:	d0f6      	beq.n	14cba <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
   14ccc:	4b25      	ldr	r3, [pc, #148]	; (14d64 <pm_system_suspend+0x15c>)
   14cce:	7d1b      	ldrb	r3, [r3, #20]
   14cd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   14cd4:	4925      	ldr	r1, [pc, #148]	; (14d6c <pm_system_suspend+0x164>)
   14cd6:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
   14cda:	4790      	blx	r2
   14cdc:	e7ed      	b.n	14cba <pm_system_suspend+0xb2>
	__asm__ volatile(
   14cde:	f386 8811 	msr	BASEPRI, r6
   14ce2:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14ce6:	f004 031f 	and.w	r3, r4, #31
   14cea:	2101      	movs	r1, #1
   14cec:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14cee:	0963      	lsrs	r3, r4, #5
   14cf0:	4a22      	ldr	r2, [pc, #136]	; (14d7c <pm_system_suspend+0x174>)
   14cf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14cf6:	f3bf 8f5b 	dmb	ish
   14cfa:	e853 2f00 	ldrex	r2, [r3]
   14cfe:	430a      	orrs	r2, r1
   14d00:	e843 2000 	strex	r0, r2, [r3]
   14d04:	2800      	cmp	r0, #0
   14d06:	d1f8      	bne.n	14cfa <pm_system_suspend+0xf2>
   14d08:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   14d0c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   14d10:	4a16      	ldr	r2, [pc, #88]	; (14d6c <pm_system_suspend+0x164>)
   14d12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14d16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14d1a:	ab08      	add	r3, sp, #32
   14d1c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   14d20:	4b17      	ldr	r3, [pc, #92]	; (14d80 <pm_system_suspend+0x178>)
   14d22:	b10b      	cbz	r3, 14d28 <pm_system_suspend+0x120>
		pm_power_state_set(info);
   14d24:	f00f fb33 	bl	2438e <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   14d28:	f7ff ff08 	bl	14b3c <pm_system_resume>
	k_sched_unlock();
   14d2c:	f00c fe5a 	bl	219e4 <k_sched_unlock>
	bool ret = true;
   14d30:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
   14d32:	f004 021f 	and.w	r2, r4, #31
   14d36:	2301      	movs	r3, #1
   14d38:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14d3a:	0964      	lsrs	r4, r4, #5
   14d3c:	4a0a      	ldr	r2, [pc, #40]	; (14d68 <pm_system_suspend+0x160>)
   14d3e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
   14d42:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14d44:	f3bf 8f5b 	dmb	ish
   14d48:	e854 2f00 	ldrex	r2, [r4]
   14d4c:	401a      	ands	r2, r3
   14d4e:	e844 2100 	strex	r1, r2, [r4]
   14d52:	2900      	cmp	r1, #0
   14d54:	d1f8      	bne.n	14d48 <pm_system_suspend+0x140>
   14d56:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   14d5a:	b009      	add	sp, #36	; 0x24
   14d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
   14d5e:	2000      	movs	r0, #0
   14d60:	e7e7      	b.n	14d32 <pm_system_suspend+0x12a>
   14d62:	bf00      	nop
   14d64:	20003c2c 	.word	0x20003c2c
   14d68:	200029cc 	.word	0x200029cc
   14d6c:	200029c0 	.word	0x200029c0
   14d70:	200029b4 	.word	0x200029b4
   14d74:	000f423f 	.word	0x000f423f
   14d78:	000f4240 	.word	0x000f4240
   14d7c:	200029bc 	.word	0x200029bc
   14d80:	0002438f 	.word	0x0002438f

00014d84 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   14d84:	b4f0      	push	{r4, r5, r6, r7}
   14d86:	b08c      	sub	sp, #48	; 0x30
   14d88:	4607      	mov	r7, r0
   14d8a:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   14d8c:	ac01      	add	r4, sp, #4
   14d8e:	4d2a      	ldr	r5, [pc, #168]	; (14e38 <tc_aes128_set_encrypt_key+0xb4>)
   14d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14d98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   14d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   14da0:	2f00      	cmp	r7, #0
   14da2:	d045      	beq.n	14e30 <tc_aes128_set_encrypt_key+0xac>
   14da4:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   14da6:	2e00      	cmp	r6, #0
   14da8:	d044      	beq.n	14e34 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   14daa:	2300      	movs	r3, #0
   14dac:	e00f      	b.n	14dce <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14dae:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   14db2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   14db6:	784a      	ldrb	r2, [r1, #1]
   14db8:	0412      	lsls	r2, r2, #16
   14dba:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14dbe:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14dc0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14dc4:	78c9      	ldrb	r1, [r1, #3]
   14dc6:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14dc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   14dcc:	3301      	adds	r3, #1
   14dce:	2b03      	cmp	r3, #3
   14dd0:	d9ed      	bls.n	14dae <tc_aes128_set_encrypt_key+0x2a>
   14dd2:	e006      	b.n	14de2 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   14dd4:	1f19      	subs	r1, r3, #4
   14dd6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   14dda:	404a      	eors	r2, r1
   14ddc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14de0:	3301      	adds	r3, #1
   14de2:	2b2b      	cmp	r3, #43	; 0x2b
   14de4:	d820      	bhi.n	14e28 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   14de6:	1e5a      	subs	r2, r3, #1
   14de8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   14dec:	f013 0f03 	tst.w	r3, #3
   14df0:	d1f0      	bne.n	14dd4 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   14df2:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14df6:	0e11      	lsrs	r1, r2, #24
   14df8:	4c10      	ldr	r4, [pc, #64]	; (14e3c <tc_aes128_set_encrypt_key+0xb8>)
   14dfa:	5c65      	ldrb	r5, [r4, r1]
   14dfc:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14e00:	5c61      	ldrb	r1, [r4, r1]
   14e02:	0409      	lsls	r1, r1, #16
   14e04:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   14e08:	f3c2 2507 	ubfx	r5, r2, #8, #8
   14e0c:	5d65      	ldrb	r5, [r4, r5]
   14e0e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14e12:	b2d2      	uxtb	r2, r2
   14e14:	5ca2      	ldrb	r2, [r4, r2]
   14e16:	4311      	orrs	r1, r2
   14e18:	f023 0203 	bic.w	r2, r3, #3
   14e1c:	ac0c      	add	r4, sp, #48	; 0x30
   14e1e:	4422      	add	r2, r4
   14e20:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   14e24:	404a      	eors	r2, r1
   14e26:	e7d5      	b.n	14dd4 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   14e28:	2001      	movs	r0, #1
}
   14e2a:	b00c      	add	sp, #48	; 0x30
   14e2c:	bcf0      	pop	{r4, r5, r6, r7}
   14e2e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14e30:	2000      	movs	r0, #0
   14e32:	e7fa      	b.n	14e2a <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   14e34:	2000      	movs	r0, #0
   14e36:	e7f8      	b.n	14e2a <tc_aes128_set_encrypt_key+0xa6>
   14e38:	000289e4 	.word	0x000289e4
   14e3c:	00028f64 	.word	0x00028f64

00014e40 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14e40:	2800      	cmp	r0, #0
   14e42:	f000 839a 	beq.w	1557a <tc_aes_encrypt+0x73a>
{
   14e46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e4a:	b088      	sub	sp, #32
   14e4c:	4616      	mov	r6, r2
   14e4e:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14e50:	2900      	cmp	r1, #0
   14e52:	f000 8394 	beq.w	1557e <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14e56:	2a00      	cmp	r2, #0
   14e58:	f000 8393 	beq.w	15582 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   14e5c:	2310      	movs	r3, #16
   14e5e:	460a      	mov	r2, r1
   14e60:	4619      	mov	r1, r3
   14e62:	eb0d 0003 	add.w	r0, sp, r3
   14e66:	f00f f8d6 	bl	24016 <_copy>
	add_round_key(state, s->words);
   14e6a:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   14e6c:	6833      	ldr	r3, [r6, #0]
   14e6e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   14e72:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14e76:	f88d 2010 	strb.w	r2, [sp, #16]
   14e7a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14e7e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14e82:	404a      	eors	r2, r1
   14e84:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   14e88:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14e8c:	f89d 1012 	ldrb.w	r1, [sp, #18]
   14e90:	404a      	eors	r2, r1
   14e92:	f88d 2012 	strb.w	r2, [sp, #18]
   14e96:	b2db      	uxtb	r3, r3
   14e98:	f89d 2013 	ldrb.w	r2, [sp, #19]
   14e9c:	4053      	eors	r3, r2
   14e9e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   14ea2:	6873      	ldr	r3, [r6, #4]
   14ea4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   14ea8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14eac:	f88d 2014 	strb.w	r2, [sp, #20]
   14eb0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14eb4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14eb8:	404a      	eors	r2, r1
   14eba:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   14ebe:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14ec2:	f89d 1016 	ldrb.w	r1, [sp, #22]
   14ec6:	404a      	eors	r2, r1
   14ec8:	f88d 2016 	strb.w	r2, [sp, #22]
   14ecc:	b2db      	uxtb	r3, r3
   14ece:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14ed2:	4053      	eors	r3, r2
   14ed4:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   14ed8:	68b3      	ldr	r3, [r6, #8]
   14eda:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14ede:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14ee2:	f88d 2018 	strb.w	r2, [sp, #24]
   14ee6:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14eea:	f89d 1019 	ldrb.w	r1, [sp, #25]
   14eee:	404a      	eors	r2, r1
   14ef0:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   14ef4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14ef8:	f89d 101a 	ldrb.w	r1, [sp, #26]
   14efc:	404a      	eors	r2, r1
   14efe:	f88d 201a 	strb.w	r2, [sp, #26]
   14f02:	b2db      	uxtb	r3, r3
   14f04:	f89d 201b 	ldrb.w	r2, [sp, #27]
   14f08:	4053      	eors	r3, r2
   14f0a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   14f0e:	68f3      	ldr	r3, [r6, #12]
   14f10:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14f14:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14f18:	f88d 201c 	strb.w	r2, [sp, #28]
   14f1c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14f20:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14f24:	404a      	eors	r2, r1
   14f26:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   14f2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14f2e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14f32:	404a      	eors	r2, r1
   14f34:	f88d 201e 	strb.w	r2, [sp, #30]
   14f38:	b2db      	uxtb	r3, r3
   14f3a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   14f3e:	4053      	eors	r3, r2
   14f40:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   14f44:	2400      	movs	r4, #0
}
   14f46:	e239      	b.n	153bc <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   14f48:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14f4c:	f88d 3000 	strb.w	r3, [sp]
   14f50:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14f54:	f88d 3001 	strb.w	r3, [sp, #1]
   14f58:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14f5c:	f88d 3002 	strb.w	r3, [sp, #2]
   14f60:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14f64:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   14f68:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14f6c:	f88d 3004 	strb.w	r3, [sp, #4]
   14f70:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14f74:	f88d 3005 	strb.w	r3, [sp, #5]
   14f78:	f89d 301e 	ldrb.w	r3, [sp, #30]
   14f7c:	f88d 3006 	strb.w	r3, [sp, #6]
   14f80:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14f84:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   14f88:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14f8c:	f88d 3008 	strb.w	r3, [sp, #8]
   14f90:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14f94:	f88d 3009 	strb.w	r3, [sp, #9]
   14f98:	f89d 3012 	ldrb.w	r3, [sp, #18]
   14f9c:	f88d 300a 	strb.w	r3, [sp, #10]
   14fa0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14fa4:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   14fa8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   14fac:	f88d 300c 	strb.w	r3, [sp, #12]
   14fb0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14fb4:	f88d 300d 	strb.w	r3, [sp, #13]
   14fb8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   14fbc:	f88d 300e 	strb.w	r3, [sp, #14]
   14fc0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14fc4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   14fc8:	2310      	movs	r3, #16
   14fca:	466a      	mov	r2, sp
   14fcc:	4619      	mov	r1, r3
   14fce:	eb0d 0003 	add.w	r0, sp, r3
   14fd2:	f00f f820 	bl	24016 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14fd6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14fda:	f00f f82d 	bl	24038 <_double_byte>
   14fde:	4680      	mov	r8, r0
   14fe0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14fe4:	f00f f828 	bl	24038 <_double_byte>
   14fe8:	4601      	mov	r1, r0
   14fea:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14fee:	f89d 2012 	ldrb.w	r2, [sp, #18]
   14ff2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14ff6:	4041      	eors	r1, r0
   14ff8:	ea88 0801 	eor.w	r8, r8, r1
   14ffc:	ea82 0208 	eor.w	r2, r2, r8
   15000:	4053      	eors	r3, r2
   15002:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   15006:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1500a:	f00f f815 	bl	24038 <_double_byte>
   1500e:	ea88 0800 	eor.w	r8, r8, r0
   15012:	fa5f f888 	uxtb.w	r8, r8
   15016:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1501a:	f00f f80d 	bl	24038 <_double_byte>
   1501e:	4602      	mov	r2, r0
   15020:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15024:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15028:	4042      	eors	r2, r0
   1502a:	ea88 0802 	eor.w	r8, r8, r2
   1502e:	ea83 0308 	eor.w	r3, r3, r8
   15032:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   15036:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1503a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1503e:	ea88 0803 	eor.w	r8, r8, r3
   15042:	f00e fff9 	bl	24038 <_double_byte>
   15046:	ea88 0800 	eor.w	r8, r8, r0
   1504a:	fa5f f888 	uxtb.w	r8, r8
   1504e:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15052:	f00e fff1 	bl	24038 <_double_byte>
   15056:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1505a:	4058      	eors	r0, r3
   1505c:	ea88 0800 	eor.w	r8, r8, r0
   15060:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   15064:	f89d 0010 	ldrb.w	r0, [sp, #16]
   15068:	f00e ffe6 	bl	24038 <_double_byte>
   1506c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   15070:	f89d 3011 	ldrb.w	r3, [sp, #17]
   15074:	f89d 8012 	ldrb.w	r8, [sp, #18]
   15078:	4050      	eors	r0, r2
   1507a:	4043      	eors	r3, r0
   1507c:	ea88 0803 	eor.w	r8, r8, r3
   15080:	fa5f f888 	uxtb.w	r8, r8
   15084:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15088:	f00e ffd6 	bl	24038 <_double_byte>
   1508c:	ea88 0800 	eor.w	r8, r8, r0
   15090:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   15094:	f89d 0014 	ldrb.w	r0, [sp, #20]
   15098:	f00e ffce 	bl	24038 <_double_byte>
   1509c:	4680      	mov	r8, r0
   1509e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   150a2:	f00e ffc9 	bl	24038 <_double_byte>
   150a6:	4601      	mov	r1, r0
   150a8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   150ac:	f89d 2016 	ldrb.w	r2, [sp, #22]
   150b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   150b4:	4041      	eors	r1, r0
   150b6:	ea88 0801 	eor.w	r8, r8, r1
   150ba:	ea82 0208 	eor.w	r2, r2, r8
   150be:	4053      	eors	r3, r2
   150c0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   150c4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   150c8:	f00e ffb6 	bl	24038 <_double_byte>
   150cc:	ea88 0800 	eor.w	r8, r8, r0
   150d0:	fa5f f888 	uxtb.w	r8, r8
   150d4:	f89d 0016 	ldrb.w	r0, [sp, #22]
   150d8:	f00e ffae 	bl	24038 <_double_byte>
   150dc:	4602      	mov	r2, r0
   150de:	f89d 0016 	ldrb.w	r0, [sp, #22]
   150e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   150e6:	4042      	eors	r2, r0
   150e8:	ea88 0802 	eor.w	r8, r8, r2
   150ec:	ea83 0308 	eor.w	r3, r3, r8
   150f0:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   150f4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   150f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   150fc:	ea88 0803 	eor.w	r8, r8, r3
   15100:	f00e ff9a 	bl	24038 <_double_byte>
   15104:	ea88 0800 	eor.w	r8, r8, r0
   15108:	fa5f f888 	uxtb.w	r8, r8
   1510c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15110:	f00e ff92 	bl	24038 <_double_byte>
   15114:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15118:	4058      	eors	r0, r3
   1511a:	ea88 0800 	eor.w	r8, r8, r0
   1511e:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   15122:	f89d 0014 	ldrb.w	r0, [sp, #20]
   15126:	f00e ff87 	bl	24038 <_double_byte>
   1512a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1512e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15132:	f89d 8016 	ldrb.w	r8, [sp, #22]
   15136:	4050      	eors	r0, r2
   15138:	4043      	eors	r3, r0
   1513a:	ea88 0803 	eor.w	r8, r8, r3
   1513e:	fa5f f888 	uxtb.w	r8, r8
   15142:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15146:	f00e ff77 	bl	24038 <_double_byte>
   1514a:	ea88 0800 	eor.w	r8, r8, r0
   1514e:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   15152:	f89d 0018 	ldrb.w	r0, [sp, #24]
   15156:	f00e ff6f 	bl	24038 <_double_byte>
   1515a:	4680      	mov	r8, r0
   1515c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   15160:	f00e ff6a 	bl	24038 <_double_byte>
   15164:	4601      	mov	r1, r0
   15166:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1516a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   1516e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   15172:	4041      	eors	r1, r0
   15174:	ea88 0801 	eor.w	r8, r8, r1
   15178:	ea82 0208 	eor.w	r2, r2, r8
   1517c:	4053      	eors	r3, r2
   1517e:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   15182:	f89d 8018 	ldrb.w	r8, [sp, #24]
   15186:	f00e ff57 	bl	24038 <_double_byte>
   1518a:	ea88 0800 	eor.w	r8, r8, r0
   1518e:	fa5f f888 	uxtb.w	r8, r8
   15192:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15196:	f00e ff4f 	bl	24038 <_double_byte>
   1519a:	4602      	mov	r2, r0
   1519c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   151a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   151a4:	4042      	eors	r2, r0
   151a6:	ea88 0802 	eor.w	r8, r8, r2
   151aa:	ea83 0308 	eor.w	r3, r3, r8
   151ae:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   151b2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   151b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   151ba:	ea88 0803 	eor.w	r8, r8, r3
   151be:	f00e ff3b 	bl	24038 <_double_byte>
   151c2:	ea88 0800 	eor.w	r8, r8, r0
   151c6:	fa5f f888 	uxtb.w	r8, r8
   151ca:	f89d 001b 	ldrb.w	r0, [sp, #27]
   151ce:	f00e ff33 	bl	24038 <_double_byte>
   151d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   151d6:	4058      	eors	r0, r3
   151d8:	ea88 0800 	eor.w	r8, r8, r0
   151dc:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   151e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
   151e4:	f00e ff28 	bl	24038 <_double_byte>
   151e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   151ec:	f89d 3019 	ldrb.w	r3, [sp, #25]
   151f0:	f89d 801a 	ldrb.w	r8, [sp, #26]
   151f4:	4050      	eors	r0, r2
   151f6:	4043      	eors	r3, r0
   151f8:	ea88 0803 	eor.w	r8, r8, r3
   151fc:	fa5f f888 	uxtb.w	r8, r8
   15200:	f89d 001b 	ldrb.w	r0, [sp, #27]
   15204:	f00e ff18 	bl	24038 <_double_byte>
   15208:	ea88 0800 	eor.w	r8, r8, r0
   1520c:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   15210:	f89d 001c 	ldrb.w	r0, [sp, #28]
   15214:	f00e ff10 	bl	24038 <_double_byte>
   15218:	4680      	mov	r8, r0
   1521a:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1521e:	f00e ff0b 	bl	24038 <_double_byte>
   15222:	4601      	mov	r1, r0
   15224:	f89d 001d 	ldrb.w	r0, [sp, #29]
   15228:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1522c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15230:	4041      	eors	r1, r0
   15232:	ea88 0801 	eor.w	r8, r8, r1
   15236:	ea82 0208 	eor.w	r2, r2, r8
   1523a:	4053      	eors	r3, r2
   1523c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   15240:	f89d 801c 	ldrb.w	r8, [sp, #28]
   15244:	f00e fef8 	bl	24038 <_double_byte>
   15248:	ea88 0800 	eor.w	r8, r8, r0
   1524c:	fa5f f888 	uxtb.w	r8, r8
   15250:	f89d 001e 	ldrb.w	r0, [sp, #30]
   15254:	f00e fef0 	bl	24038 <_double_byte>
   15258:	4602      	mov	r2, r0
   1525a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1525e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15262:	4042      	eors	r2, r0
   15264:	ea88 0802 	eor.w	r8, r8, r2
   15268:	ea83 0308 	eor.w	r3, r3, r8
   1526c:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   15270:	f89d 801c 	ldrb.w	r8, [sp, #28]
   15274:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15278:	ea88 0803 	eor.w	r8, r8, r3
   1527c:	f00e fedc 	bl	24038 <_double_byte>
   15280:	ea88 0800 	eor.w	r8, r8, r0
   15284:	fa5f f888 	uxtb.w	r8, r8
   15288:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1528c:	f00e fed4 	bl	24038 <_double_byte>
   15290:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15294:	4058      	eors	r0, r3
   15296:	ea88 0800 	eor.w	r8, r8, r0
   1529a:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1529e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   152a2:	f00e fec9 	bl	24038 <_double_byte>
   152a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   152aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
   152ae:	f89d 801e 	ldrb.w	r8, [sp, #30]
   152b2:	4050      	eors	r0, r2
   152b4:	4043      	eors	r3, r0
   152b6:	ea88 0803 	eor.w	r8, r8, r3
   152ba:	fa5f f888 	uxtb.w	r8, r8
   152be:	f89d 001f 	ldrb.w	r0, [sp, #31]
   152c2:	f00e feb9 	bl	24038 <_double_byte>
   152c6:	ea88 0800 	eor.w	r8, r8, r0
   152ca:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   152ce:	2310      	movs	r3, #16
   152d0:	466a      	mov	r2, sp
   152d2:	4619      	mov	r1, r3
   152d4:	eb0d 0003 	add.w	r0, sp, r3
   152d8:	f00e fe9d 	bl	24016 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   152dc:	3401      	adds	r4, #1
   152de:	0123      	lsls	r3, r4, #4
   152e0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   152e4:	58eb      	ldr	r3, [r5, r3]
   152e6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   152ea:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   152ee:	f88d 1010 	strb.w	r1, [sp, #16]
   152f2:	f3c3 4107 	ubfx	r1, r3, #16, #8
   152f6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   152fa:	4041      	eors	r1, r0
   152fc:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   15300:	f3c3 2107 	ubfx	r1, r3, #8, #8
   15304:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15308:	4041      	eors	r1, r0
   1530a:	f88d 1012 	strb.w	r1, [sp, #18]
   1530e:	b2db      	uxtb	r3, r3
   15310:	f89d 1013 	ldrb.w	r1, [sp, #19]
   15314:	404b      	eors	r3, r1
   15316:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1531a:	6853      	ldr	r3, [r2, #4]
   1531c:	f89d 1014 	ldrb.w	r1, [sp, #20]
   15320:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   15324:	f88d 1014 	strb.w	r1, [sp, #20]
   15328:	f3c3 4107 	ubfx	r1, r3, #16, #8
   1532c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   15330:	4041      	eors	r1, r0
   15332:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   15336:	f3c3 2107 	ubfx	r1, r3, #8, #8
   1533a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1533e:	4041      	eors	r1, r0
   15340:	f88d 1016 	strb.w	r1, [sp, #22]
   15344:	b2db      	uxtb	r3, r3
   15346:	f89d 1017 	ldrb.w	r1, [sp, #23]
   1534a:	404b      	eors	r3, r1
   1534c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   15350:	6893      	ldr	r3, [r2, #8]
   15352:	f89d 1018 	ldrb.w	r1, [sp, #24]
   15356:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   1535a:	f88d 1018 	strb.w	r1, [sp, #24]
   1535e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   15362:	f89d 0019 	ldrb.w	r0, [sp, #25]
   15366:	4041      	eors	r1, r0
   15368:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1536c:	f3c3 2107 	ubfx	r1, r3, #8, #8
   15370:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15374:	4041      	eors	r1, r0
   15376:	f88d 101a 	strb.w	r1, [sp, #26]
   1537a:	b2db      	uxtb	r3, r3
   1537c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   15380:	404b      	eors	r3, r1
   15382:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   15386:	68d3      	ldr	r3, [r2, #12]
   15388:	f89d 201c 	ldrb.w	r2, [sp, #28]
   1538c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   15390:	f88d 201c 	strb.w	r2, [sp, #28]
   15394:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15398:	f89d 101d 	ldrb.w	r1, [sp, #29]
   1539c:	404a      	eors	r2, r1
   1539e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   153a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   153a6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   153aa:	404a      	eors	r2, r1
   153ac:	f88d 201e 	strb.w	r2, [sp, #30]
   153b0:	b2db      	uxtb	r3, r3
   153b2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   153b6:	4053      	eors	r3, r2
   153b8:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   153bc:	2c08      	cmp	r4, #8
   153be:	d80a      	bhi.n	153d6 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   153c0:	2300      	movs	r3, #0
   153c2:	2b0f      	cmp	r3, #15
   153c4:	f63f adc0 	bhi.w	14f48 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   153c8:	a904      	add	r1, sp, #16
   153ca:	5cc8      	ldrb	r0, [r1, r3]
   153cc:	4a6e      	ldr	r2, [pc, #440]	; (15588 <tc_aes_encrypt+0x748>)
   153ce:	5c10      	ldrb	r0, [r2, r0]
   153d0:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   153d2:	3301      	adds	r3, #1
   153d4:	e7f5      	b.n	153c2 <tc_aes_encrypt+0x582>
   153d6:	2300      	movs	r3, #0
   153d8:	e005      	b.n	153e6 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   153da:	aa04      	add	r2, sp, #16
   153dc:	5cd1      	ldrb	r1, [r2, r3]
   153de:	486a      	ldr	r0, [pc, #424]	; (15588 <tc_aes_encrypt+0x748>)
   153e0:	5c41      	ldrb	r1, [r0, r1]
   153e2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   153e4:	3301      	adds	r3, #1
   153e6:	2b0f      	cmp	r3, #15
   153e8:	d9f7      	bls.n	153da <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   153ea:	f89d 3010 	ldrb.w	r3, [sp, #16]
   153ee:	f88d 3000 	strb.w	r3, [sp]
   153f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   153f6:	f88d 3001 	strb.w	r3, [sp, #1]
   153fa:	f89d 301a 	ldrb.w	r3, [sp, #26]
   153fe:	f88d 3002 	strb.w	r3, [sp, #2]
   15402:	f89d 301f 	ldrb.w	r3, [sp, #31]
   15406:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1540a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1540e:	f88d 3004 	strb.w	r3, [sp, #4]
   15412:	f89d 3019 	ldrb.w	r3, [sp, #25]
   15416:	f88d 3005 	strb.w	r3, [sp, #5]
   1541a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1541e:	f88d 3006 	strb.w	r3, [sp, #6]
   15422:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15426:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1542a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1542e:	f88d 3008 	strb.w	r3, [sp, #8]
   15432:	f89d 301d 	ldrb.w	r3, [sp, #29]
   15436:	f88d 3009 	strb.w	r3, [sp, #9]
   1543a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1543e:	f88d 300a 	strb.w	r3, [sp, #10]
   15442:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15446:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1544a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1544e:	f88d 300c 	strb.w	r3, [sp, #12]
   15452:	f89d 3011 	ldrb.w	r3, [sp, #17]
   15456:	f88d 300d 	strb.w	r3, [sp, #13]
   1545a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   1545e:	f88d 300e 	strb.w	r3, [sp, #14]
   15462:	f89d 301b 	ldrb.w	r3, [sp, #27]
   15466:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1546a:	2310      	movs	r3, #16
   1546c:	466a      	mov	r2, sp
   1546e:	4619      	mov	r1, r3
   15470:	eb0d 0003 	add.w	r0, sp, r3
   15474:	f00e fdcf 	bl	24016 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   15478:	1c63      	adds	r3, r4, #1
   1547a:	011a      	lsls	r2, r3, #4
   1547c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   15480:	58b2      	ldr	r2, [r6, r2]
   15482:	f89d 1010 	ldrb.w	r1, [sp, #16]
   15486:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   1548a:	f88d 1010 	strb.w	r1, [sp, #16]
   1548e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   15492:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15496:	4041      	eors	r1, r0
   15498:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1549c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   154a0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   154a4:	4041      	eors	r1, r0
   154a6:	f88d 1012 	strb.w	r1, [sp, #18]
   154aa:	b2d2      	uxtb	r2, r2
   154ac:	f89d 1013 	ldrb.w	r1, [sp, #19]
   154b0:	404a      	eors	r2, r1
   154b2:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   154b6:	685a      	ldr	r2, [r3, #4]
   154b8:	f89d 1014 	ldrb.w	r1, [sp, #20]
   154bc:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   154c0:	f88d 1014 	strb.w	r1, [sp, #20]
   154c4:	f3c2 4107 	ubfx	r1, r2, #16, #8
   154c8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   154cc:	4041      	eors	r1, r0
   154ce:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   154d2:	f3c2 2107 	ubfx	r1, r2, #8, #8
   154d6:	f89d 0016 	ldrb.w	r0, [sp, #22]
   154da:	4041      	eors	r1, r0
   154dc:	f88d 1016 	strb.w	r1, [sp, #22]
   154e0:	b2d2      	uxtb	r2, r2
   154e2:	f89d 1017 	ldrb.w	r1, [sp, #23]
   154e6:	404a      	eors	r2, r1
   154e8:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   154ec:	689a      	ldr	r2, [r3, #8]
   154ee:	f89d 1018 	ldrb.w	r1, [sp, #24]
   154f2:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   154f6:	f88d 1018 	strb.w	r1, [sp, #24]
   154fa:	f3c2 4107 	ubfx	r1, r2, #16, #8
   154fe:	f89d 0019 	ldrb.w	r0, [sp, #25]
   15502:	4041      	eors	r1, r0
   15504:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   15508:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1550c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   15510:	4041      	eors	r1, r0
   15512:	f88d 101a 	strb.w	r1, [sp, #26]
   15516:	b2d2      	uxtb	r2, r2
   15518:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1551c:	404a      	eors	r2, r1
   1551e:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   15522:	68db      	ldr	r3, [r3, #12]
   15524:	f89d 201c 	ldrb.w	r2, [sp, #28]
   15528:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1552c:	f88d 201c 	strb.w	r2, [sp, #28]
   15530:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15534:	f89d 101d 	ldrb.w	r1, [sp, #29]
   15538:	404a      	eors	r2, r1
   1553a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1553e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   15542:	f89d 101e 	ldrb.w	r1, [sp, #30]
   15546:	404a      	eors	r2, r1
   15548:	f88d 201e 	strb.w	r2, [sp, #30]
   1554c:	b2db      	uxtb	r3, r3
   1554e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   15552:	4053      	eors	r3, r2
   15554:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   15558:	2310      	movs	r3, #16
   1555a:	eb0d 0203 	add.w	r2, sp, r3
   1555e:	4619      	mov	r1, r3
   15560:	4638      	mov	r0, r7
   15562:	f00e fd58 	bl	24016 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   15566:	2210      	movs	r2, #16
   15568:	2100      	movs	r1, #0
   1556a:	eb0d 0002 	add.w	r0, sp, r2
   1556e:	f00e fd5f 	bl	24030 <_set>

	return TC_CRYPTO_SUCCESS;
   15572:	2001      	movs	r0, #1
}
   15574:	b008      	add	sp, #32
   15576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   1557a:	2000      	movs	r0, #0
}
   1557c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1557e:	2000      	movs	r0, #0
   15580:	e7f8      	b.n	15574 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   15582:	2000      	movs	r0, #0
   15584:	e7f6      	b.n	15574 <tc_aes_encrypt+0x734>
   15586:	bf00      	nop
   15588:	00028f64 	.word	0x00028f64

0001558c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1558c:	4901      	ldr	r1, [pc, #4]	; (15594 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1558e:	2210      	movs	r2, #16
	str	r2, [r1]
   15590:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15592:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15594:	e000ed10 	.word	0xe000ed10

00015598 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15598:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1559a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   1559c:	f380 8811 	msr	BASEPRI, r0
	isb
   155a0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   155a4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   155a8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   155aa:	b662      	cpsie	i
	isb
   155ac:	f3bf 8f6f 	isb	sy

	bx	lr
   155b0:	4770      	bx	lr
   155b2:	bf00      	nop

000155b4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   155b4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   155b6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   155b8:	f381 8811 	msr	BASEPRI, r1

	wfe
   155bc:	bf20      	wfe

	msr	BASEPRI, r0
   155be:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   155c2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   155c4:	4770      	bx	lr
   155c6:	bf00      	nop

000155c8 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   155c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   155cc:	b08e      	sub	sp, #56	; 0x38
   155ce:	af00      	add	r7, sp, #0
   155d0:	4605      	mov	r5, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   155d2:	466c      	mov	r4, sp
   155d4:	b088      	sub	sp, #32
   155d6:	4668      	mov	r0, sp
   155d8:	f110 030c 	adds.w	r3, r0, #12
   155dc:	f000 80c7 	beq.w	1576e <esf_dump+0x1a6>
   155e0:	2214      	movs	r2, #20
   155e2:	b11b      	cbz	r3, 155ec <esf_dump+0x24>
   155e4:	2a04      	cmp	r2, #4
   155e6:	dd01      	ble.n	155ec <esf_dump+0x24>
   155e8:	4967      	ldr	r1, [pc, #412]	; (15788 <esf_dump+0x1c0>)
   155ea:	6101      	str	r1, [r0, #16]
   155ec:	6829      	ldr	r1, [r5, #0]
   155ee:	b113      	cbz	r3, 155f6 <esf_dump+0x2e>
   155f0:	2a08      	cmp	r2, #8
   155f2:	dd00      	ble.n	155f6 <esf_dump+0x2e>
   155f4:	6141      	str	r1, [r0, #20]
   155f6:	6869      	ldr	r1, [r5, #4]
   155f8:	b113      	cbz	r3, 15600 <esf_dump+0x38>
   155fa:	2a0c      	cmp	r2, #12
   155fc:	dd00      	ble.n	15600 <esf_dump+0x38>
   155fe:	6181      	str	r1, [r0, #24]
   15600:	68a9      	ldr	r1, [r5, #8]
   15602:	b113      	cbz	r3, 1560a <esf_dump+0x42>
   15604:	2a10      	cmp	r2, #16
   15606:	dd00      	ble.n	1560a <esf_dump+0x42>
   15608:	61c1      	str	r1, [r0, #28]
   1560a:	2a13      	cmp	r2, #19
   1560c:	f340 80b2 	ble.w	15774 <esf_dump+0x1ac>
   15610:	2114      	movs	r1, #20
   15612:	b143      	cbz	r3, 15626 <esf_dump+0x5e>
   15614:	2300      	movs	r3, #0
   15616:	f8a7 3005 	strh.w	r3, [r7, #5]
   1561a:	71fb      	strb	r3, [r7, #7]
   1561c:	2205      	movs	r2, #5
   1561e:	713a      	strb	r2, [r7, #4]
   15620:	71bb      	strb	r3, [r7, #6]
   15622:	687b      	ldr	r3, [r7, #4]
   15624:	60c3      	str	r3, [r0, #12]
   15626:	2200      	movs	r2, #0
   15628:	f36f 0200 	bfc	r2, #0, #1
   1562c:	f36f 0241 	bfc	r2, #1, #1
   15630:	f36f 0282 	bfc	r2, #2, #1
   15634:	f36f 02c5 	bfc	r2, #3, #3
   15638:	2301      	movs	r3, #1
   1563a:	f363 1288 	bfi	r2, r3, #6, #3
   1563e:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   15642:	f363 2252 	bfi	r2, r3, #9, #10
   15646:	2300      	movs	r3, #0
   15648:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1564c:	494f      	ldr	r1, [pc, #316]	; (1578c <esf_dump+0x1c4>)
   1564e:	f00e fc7d 	bl	23f4c <z_log_msg2_finalize>
   15652:	46a5      	mov	sp, r4
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15654:	466c      	mov	r4, sp
   15656:	b088      	sub	sp, #32
   15658:	4668      	mov	r0, sp
   1565a:	f110 030c 	adds.w	r3, r0, #12
   1565e:	f000 808c 	beq.w	1577a <esf_dump+0x1b2>
   15662:	2214      	movs	r2, #20
   15664:	b11b      	cbz	r3, 1566e <esf_dump+0xa6>
   15666:	2a04      	cmp	r2, #4
   15668:	dd01      	ble.n	1566e <esf_dump+0xa6>
   1566a:	4949      	ldr	r1, [pc, #292]	; (15790 <esf_dump+0x1c8>)
   1566c:	6101      	str	r1, [r0, #16]
   1566e:	68e9      	ldr	r1, [r5, #12]
   15670:	b113      	cbz	r3, 15678 <esf_dump+0xb0>
   15672:	2a08      	cmp	r2, #8
   15674:	dd00      	ble.n	15678 <esf_dump+0xb0>
   15676:	6141      	str	r1, [r0, #20]
   15678:	6929      	ldr	r1, [r5, #16]
   1567a:	b113      	cbz	r3, 15682 <esf_dump+0xba>
   1567c:	2a0c      	cmp	r2, #12
   1567e:	dd00      	ble.n	15682 <esf_dump+0xba>
   15680:	6181      	str	r1, [r0, #24]
   15682:	6969      	ldr	r1, [r5, #20]
   15684:	b113      	cbz	r3, 1568c <esf_dump+0xc4>
   15686:	2a10      	cmp	r2, #16
   15688:	dd00      	ble.n	1568c <esf_dump+0xc4>
   1568a:	61c1      	str	r1, [r0, #28]
   1568c:	2a13      	cmp	r2, #19
   1568e:	dd77      	ble.n	15780 <esf_dump+0x1b8>
   15690:	2114      	movs	r1, #20
   15692:	b143      	cbz	r3, 156a6 <esf_dump+0xde>
   15694:	2300      	movs	r3, #0
   15696:	f8a7 3005 	strh.w	r3, [r7, #5]
   1569a:	71fb      	strb	r3, [r7, #7]
   1569c:	2205      	movs	r2, #5
   1569e:	713a      	strb	r2, [r7, #4]
   156a0:	71bb      	strb	r3, [r7, #6]
   156a2:	687b      	ldr	r3, [r7, #4]
   156a4:	60c3      	str	r3, [r0, #12]
   156a6:	2200      	movs	r2, #0
   156a8:	f36f 0200 	bfc	r2, #0, #1
   156ac:	f36f 0241 	bfc	r2, #1, #1
   156b0:	f36f 0282 	bfc	r2, #2, #1
   156b4:	f36f 02c5 	bfc	r2, #3, #3
   156b8:	f04f 0801 	mov.w	r8, #1
   156bc:	f368 1288 	bfi	r2, r8, #6, #3
   156c0:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   156c4:	f363 2252 	bfi	r2, r3, #9, #10
   156c8:	4e30      	ldr	r6, [pc, #192]	; (1578c <esf_dump+0x1c4>)
   156ca:	2300      	movs	r3, #0
   156cc:	f3c2 0212 	ubfx	r2, r2, #0, #19
   156d0:	4631      	mov	r1, r6
   156d2:	f00e fc3b 	bl	23f4c <z_log_msg2_finalize>
   156d6:	46a5      	mov	sp, r4
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   156d8:	69eb      	ldr	r3, [r5, #28]
   156da:	4a2e      	ldr	r2, [pc, #184]	; (15794 <esf_dump+0x1cc>)
   156dc:	61ba      	str	r2, [r7, #24]
   156de:	61fb      	str	r3, [r7, #28]
   156e0:	2400      	movs	r4, #0
   156e2:	f8a7 4005 	strh.w	r4, [r7, #5]
   156e6:	71fc      	strb	r4, [r7, #7]
   156e8:	f04f 0a03 	mov.w	sl, #3
   156ec:	f887 a004 	strb.w	sl, [r7, #4]
   156f0:	71bc      	strb	r4, [r7, #6]
   156f2:	687b      	ldr	r3, [r7, #4]
   156f4:	617b      	str	r3, [r7, #20]
   156f6:	4622      	mov	r2, r4
   156f8:	f364 0200 	bfi	r2, r4, #0, #1
   156fc:	f364 0241 	bfi	r2, r4, #1, #1
   15700:	f364 0282 	bfi	r2, r4, #2, #1
   15704:	f364 02c5 	bfi	r2, r4, #3, #3
   15708:	f368 1288 	bfi	r2, r8, #6, #3
   1570c:	f04f 090c 	mov.w	r9, #12
   15710:	f369 2252 	bfi	r2, r9, #9, #10
   15714:	4623      	mov	r3, r4
   15716:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1571a:	4631      	mov	r1, r6
   1571c:	f107 0008 	add.w	r0, r7, #8
   15720:	f00e fc14 	bl	23f4c <z_log_msg2_finalize>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15724:	69ab      	ldr	r3, [r5, #24]
   15726:	4a1c      	ldr	r2, [pc, #112]	; (15798 <esf_dump+0x1d0>)
   15728:	633a      	str	r2, [r7, #48]	; 0x30
   1572a:	637b      	str	r3, [r7, #52]	; 0x34
   1572c:	f8a7 4005 	strh.w	r4, [r7, #5]
   15730:	71fc      	strb	r4, [r7, #7]
   15732:	f887 a004 	strb.w	sl, [r7, #4]
   15736:	71bc      	strb	r4, [r7, #6]
   15738:	687b      	ldr	r3, [r7, #4]
   1573a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1573c:	4622      	mov	r2, r4
   1573e:	f364 0200 	bfi	r2, r4, #0, #1
   15742:	f364 0241 	bfi	r2, r4, #1, #1
   15746:	f364 0282 	bfi	r2, r4, #2, #1
   1574a:	f364 02c5 	bfi	r2, r4, #3, #3
   1574e:	f368 1288 	bfi	r2, r8, #6, #3
   15752:	f369 2252 	bfi	r2, r9, #9, #10
   15756:	4623      	mov	r3, r4
   15758:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1575c:	4631      	mov	r1, r6
   1575e:	f107 0020 	add.w	r0, r7, #32
   15762:	f00e fbf3 	bl	23f4c <z_log_msg2_finalize>
		esf->basic.pc);
}
   15766:	3738      	adds	r7, #56	; 0x38
   15768:	46bd      	mov	sp, r7
   1576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1576e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   15772:	e736      	b.n	155e2 <esf_dump+0x1a>
   15774:	f06f 011b 	mvn.w	r1, #27
   15778:	e74b      	b.n	15612 <esf_dump+0x4a>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1577a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1577e:	e771      	b.n	15664 <esf_dump+0x9c>
   15780:	f06f 011b 	mvn.w	r1, #27
   15784:	e785      	b.n	15692 <esf_dump+0xca>
   15786:	bf00      	nop
   15788:	00029064 	.word	0x00029064
   1578c:	0002890c 	.word	0x0002890c
   15790:	00029094 	.word	0x00029094
   15794:	000290c4 	.word	0x000290c4
   15798:	000290d4 	.word	0x000290d4

0001579c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1579c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1579e:	2b00      	cmp	r3, #0
   157a0:	db08      	blt.n	157b4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   157a2:	f000 001f 	and.w	r0, r0, #31
   157a6:	095b      	lsrs	r3, r3, #5
   157a8:	2201      	movs	r2, #1
   157aa:	fa02 f000 	lsl.w	r0, r2, r0
   157ae:	4a02      	ldr	r2, [pc, #8]	; (157b8 <arch_irq_enable+0x1c>)
   157b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   157b4:	4770      	bx	lr
   157b6:	bf00      	nop
   157b8:	e000e100 	.word	0xe000e100

000157bc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   157bc:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   157be:	2b00      	cmp	r3, #0
   157c0:	db0d      	blt.n	157de <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   157c2:	f000 001f 	and.w	r0, r0, #31
   157c6:	095b      	lsrs	r3, r3, #5
   157c8:	2201      	movs	r2, #1
   157ca:	fa02 f000 	lsl.w	r0, r2, r0
   157ce:	3320      	adds	r3, #32
   157d0:	4a03      	ldr	r2, [pc, #12]	; (157e0 <arch_irq_disable+0x24>)
   157d2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   157d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   157da:	f3bf 8f6f 	isb	sy
}
   157de:	4770      	bx	lr
   157e0:	e000e100 	.word	0xe000e100

000157e4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   157e4:	0942      	lsrs	r2, r0, #5
   157e6:	4b05      	ldr	r3, [pc, #20]	; (157fc <arch_irq_is_enabled+0x18>)
   157e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   157ec:	f000 001f 	and.w	r0, r0, #31
   157f0:	2301      	movs	r3, #1
   157f2:	fa03 f000 	lsl.w	r0, r3, r0
}
   157f6:	4010      	ands	r0, r2
   157f8:	4770      	bx	lr
   157fa:	bf00      	nop
   157fc:	e000e100 	.word	0xe000e100

00015800 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   15800:	f012 0f01 	tst.w	r2, #1
   15804:	d10c      	bne.n	15820 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15806:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   15808:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1580a:	2b00      	cmp	r3, #0
   1580c:	db0a      	blt.n	15824 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1580e:	0149      	lsls	r1, r1, #5
   15810:	b2c9      	uxtb	r1, r1
   15812:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15816:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1581a:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   1581e:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   15820:	2100      	movs	r1, #0
   15822:	e7f1      	b.n	15808 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15824:	f000 000f 	and.w	r0, r0, #15
   15828:	0149      	lsls	r1, r1, #5
   1582a:	b2c9      	uxtb	r1, r1
   1582c:	4b01      	ldr	r3, [pc, #4]	; (15834 <z_arm_irq_priority_set+0x34>)
   1582e:	5419      	strb	r1, [r3, r0]
}
   15830:	4770      	bx	lr
   15832:	bf00      	nop
   15834:	e000ed14 	.word	0xe000ed14

00015838 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15838:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1583a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   1583c:	4b05      	ldr	r3, [pc, #20]	; (15854 <_arch_isr_direct_pm+0x1c>)
   1583e:	699b      	ldr	r3, [r3, #24]
   15840:	b90b      	cbnz	r3, 15846 <_arch_isr_direct_pm+0xe>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15842:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15844:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   15846:	4b03      	ldr	r3, [pc, #12]	; (15854 <_arch_isr_direct_pm+0x1c>)
   15848:	2200      	movs	r2, #0
   1584a:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   1584c:	f012 f918 	bl	27a80 <z_pm_save_idle_exit>
   15850:	e7f7      	b.n	15842 <_arch_isr_direct_pm+0xa>
   15852:	bf00      	nop
   15854:	20003c2c 	.word	0x20003c2c

00015858 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15858:	bf30      	wfi
    b z_SysNmiOnReset
   1585a:	f7ff bffd 	b.w	15858 <z_SysNmiOnReset>
   1585e:	bf00      	nop

00015860 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   15860:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15862:	4b0b      	ldr	r3, [pc, #44]	; (15890 <z_arm_prep_c+0x30>)
   15864:	4a0b      	ldr	r2, [pc, #44]	; (15894 <z_arm_prep_c+0x34>)
   15866:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1586a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1586c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15870:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   15874:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15878:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1587c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   15880:	f00b f950 	bl	20b24 <z_bss_zero>
	z_data_copy();
   15884:	f00c fa3e 	bl	21d04 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15888:	f000 feee 	bl	16668 <z_arm_interrupt_init>
	z_cstart();
   1588c:	f00b f956 	bl	20b3c <z_cstart>
   15890:	e000ed00 	.word	0xe000ed00
   15894:	00000000 	.word	0x00000000

00015898 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15898:	4a0a      	ldr	r2, [pc, #40]	; (158c4 <arch_swap+0x2c>)
   1589a:	6893      	ldr	r3, [r2, #8]
   1589c:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   158a0:	4909      	ldr	r1, [pc, #36]	; (158c8 <arch_swap+0x30>)
   158a2:	6809      	ldr	r1, [r1, #0]
   158a4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   158a8:	4908      	ldr	r1, [pc, #32]	; (158cc <arch_swap+0x34>)
   158aa:	684b      	ldr	r3, [r1, #4]
   158ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   158b0:	604b      	str	r3, [r1, #4]
   158b2:	2300      	movs	r3, #0
   158b4:	f383 8811 	msr	BASEPRI, r3
   158b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   158bc:	6893      	ldr	r3, [r2, #8]
}
   158be:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   158c2:	4770      	bx	lr
   158c4:	20003c2c 	.word	0x20003c2c
   158c8:	0002ad0c 	.word	0x0002ad0c
   158cc:	e000ed00 	.word	0xe000ed00

000158d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   158d0:	4913      	ldr	r1, [pc, #76]	; (15920 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   158d2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   158d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   158d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   158da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   158de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   158e2:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   158e4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   158e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   158ec:	4f0d      	ldr	r7, [pc, #52]	; (15924 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   158ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   158f2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   158f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   158f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   158f8:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   158fc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   158fe:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   15902:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15906:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15908:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1590a:	f000 ff4f 	bl	167ac <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1590e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15912:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15916:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1591a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1591e:	4770      	bx	lr
    ldr r1, =_kernel
   15920:	20003c2c 	.word	0x20003c2c
    ldr v4, =_SCS_ICSR
   15924:	e000ed04 	.word	0xe000ed04

00015928 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15928:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1592c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1592e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15932:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15936:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15938:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1593c:	2902      	cmp	r1, #2
    beq _oops
   1593e:	d0ff      	beq.n	15940 <_oops>

00015940 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15940:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   15942:	f00e fc97 	bl	24274 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   15946:	bd01      	pop	{r0, pc}

00015948 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   15948:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1594a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   1594e:	490d      	ldr	r1, [pc, #52]	; (15984 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   15950:	f021 0101 	bic.w	r1, r1, #1
   15954:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   15958:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1595c:	9b01      	ldr	r3, [sp, #4]
   1595e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   15962:	9b02      	ldr	r3, [sp, #8]
   15964:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15968:	9b03      	ldr	r3, [sp, #12]
   1596a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   1596e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   15972:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   15976:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   15978:	2300      	movs	r3, #0
   1597a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1597e:	bc10      	pop	{r4}
   15980:	4770      	bx	lr
   15982:	bf00      	nop
   15984:	000239b7 	.word	0x000239b7

00015988 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15988:	4b16      	ldr	r3, [pc, #88]	; (159e4 <z_check_thread_stack_fail+0x5c>)
   1598a:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   1598c:	b1da      	cbz	r2, 159c6 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1598e:	f110 0f16 	cmn.w	r0, #22
   15992:	d01a      	beq.n	159ca <z_check_thread_stack_fail+0x42>
{
   15994:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15996:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1599a:	f1a3 0420 	sub.w	r4, r3, #32
   1599e:	4284      	cmp	r4, r0
   159a0:	d805      	bhi.n	159ae <z_check_thread_stack_fail+0x26>
   159a2:	4283      	cmp	r3, r0
   159a4:	d908      	bls.n	159b8 <z_check_thread_stack_fail+0x30>
   159a6:	428b      	cmp	r3, r1
   159a8:	d808      	bhi.n	159bc <z_check_thread_stack_fail+0x34>
   159aa:	2100      	movs	r1, #0
   159ac:	e000      	b.n	159b0 <z_check_thread_stack_fail+0x28>
   159ae:	2100      	movs	r1, #0
   159b0:	b931      	cbnz	r1, 159c0 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   159b2:	2000      	movs	r0, #0
}
   159b4:	bc10      	pop	{r4}
   159b6:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   159b8:	2100      	movs	r1, #0
   159ba:	e7f9      	b.n	159b0 <z_check_thread_stack_fail+0x28>
   159bc:	2101      	movs	r1, #1
   159be:	e7f7      	b.n	159b0 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   159c0:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   159c4:	e7f6      	b.n	159b4 <z_check_thread_stack_fail+0x2c>
		return 0;
   159c6:	2000      	movs	r0, #0
   159c8:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   159ca:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   159ce:	428b      	cmp	r3, r1
   159d0:	bf94      	ite	ls
   159d2:	2100      	movls	r1, #0
   159d4:	2101      	movhi	r1, #1
   159d6:	b909      	cbnz	r1, 159dc <z_check_thread_stack_fail+0x54>
	return 0;
   159d8:	2000      	movs	r0, #0
}
   159da:	4770      	bx	lr
		return thread->stack_info.start;
   159dc:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   159e0:	4770      	bx	lr
   159e2:	bf00      	nop
   159e4:	20003c2c 	.word	0x20003c2c

000159e8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   159e8:	b508      	push	{r3, lr}
   159ea:	460d      	mov	r5, r1
   159ec:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   159ee:	4b08      	ldr	r3, [pc, #32]	; (15a10 <arch_switch_to_main_thread+0x28>)
   159f0:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   159f2:	f000 fedb 	bl	167ac <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   159f6:	4620      	mov	r0, r4
   159f8:	f385 8809 	msr	PSP, r5
   159fc:	2100      	movs	r1, #0
   159fe:	b663      	cpsie	if
   15a00:	f381 8811 	msr	BASEPRI, r1
   15a04:	f3bf 8f6f 	isb	sy
   15a08:	2200      	movs	r2, #0
   15a0a:	2300      	movs	r3, #0
   15a0c:	f00d ffd3 	bl	239b6 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   15a10:	20003c2c 	.word	0x20003c2c

00015a14 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   15a14:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   15a16:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   15a18:	4a0b      	ldr	r2, [pc, #44]	; (15a48 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   15a1a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   15a1c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   15a1e:	bf1e      	ittt	ne
	movne	r1, #0
   15a20:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   15a22:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   15a24:	f012 f82c 	blne	27a80 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   15a28:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   15a2a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   15a2e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   15a32:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   15a36:	4905      	ldr	r1, [pc, #20]	; (15a4c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   15a38:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   15a3a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   15a3c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   15a3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   15a42:	4903      	ldr	r1, [pc, #12]	; (15a50 <_isr_wrapper+0x3c>)
	bx r1
   15a44:	4708      	bx	r1
   15a46:	0000      	.short	0x0000
	ldr r2, =_kernel
   15a48:	20003c2c 	.word	0x20003c2c
	ldr r1, =_sw_isr_table
   15a4c:	000286a4 	.word	0x000286a4
	ldr r1, =z_arm_int_exit
   15a50:	00015a55 	.word	0x00015a55

00015a54 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   15a54:	4b04      	ldr	r3, [pc, #16]	; (15a68 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   15a56:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15a58:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15a5a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15a5c:	d003      	beq.n	15a66 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15a5e:	4903      	ldr	r1, [pc, #12]	; (15a6c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   15a64:	600a      	str	r2, [r1, #0]

00015a66 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   15a66:	4770      	bx	lr
	ldr r3, =_kernel
   15a68:	20003c2c 	.word	0x20003c2c
	ldr r1, =_SCS_ICSR
   15a6c:	e000ed04 	.word	0xe000ed04

00015a70 <bus_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
   15a70:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a72:	b0b3      	sub	sp, #204	; 0xcc
   15a74:	4606      	mov	r6, r0
   15a76:	460f      	mov	r7, r1
   15a78:	4615      	mov	r5, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   15a7a:	4bae      	ldr	r3, [pc, #696]	; (15d34 <bus_fault+0x2c4>)
   15a7c:	9306      	str	r3, [sp, #24]
   15a7e:	2300      	movs	r3, #0
   15a80:	f8ad 3005 	strh.w	r3, [sp, #5]
   15a84:	f88d 3007 	strb.w	r3, [sp, #7]
   15a88:	2202      	movs	r2, #2
   15a8a:	f88d 2004 	strb.w	r2, [sp, #4]
   15a8e:	f88d 3006 	strb.w	r3, [sp, #6]
   15a92:	9a01      	ldr	r2, [sp, #4]
   15a94:	9205      	str	r2, [sp, #20]
   15a96:	461c      	mov	r4, r3
   15a98:	f363 0400 	bfi	r4, r3, #0, #1
   15a9c:	f363 0441 	bfi	r4, r3, #1, #1
   15aa0:	f363 0482 	bfi	r4, r3, #2, #1
   15aa4:	f363 04c5 	bfi	r4, r3, #3, #3
   15aa8:	2201      	movs	r2, #1
   15aaa:	f362 1488 	bfi	r4, r2, #6, #3
   15aae:	2208      	movs	r2, #8
   15ab0:	f362 2452 	bfi	r4, r2, #9, #10
   15ab4:	f3c4 0212 	ubfx	r2, r4, #0, #19
   15ab8:	499f      	ldr	r1, [pc, #636]	; (15d38 <bus_fault+0x2c8>)
   15aba:	a802      	add	r0, sp, #8
   15abc:	f00e fa46 	bl	23f4c <z_log_msg2_finalize>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15ac0:	4b9e      	ldr	r3, [pc, #632]	; (15d3c <bus_fault+0x2cc>)
   15ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ac4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15ac8:	d128      	bne.n	15b1c <bus_fault+0xac>
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15aca:	4b9c      	ldr	r3, [pc, #624]	; (15d3c <bus_fault+0x2cc>)
   15acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ace:	f413 6f00 	tst.w	r3, #2048	; 0x800
   15ad2:	d147      	bne.n	15b64 <bus_fault+0xf4>
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15ad4:	4b99      	ldr	r3, [pc, #612]	; (15d3c <bus_fault+0x2cc>)
   15ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ad8:	f413 7f00 	tst.w	r3, #512	; 0x200
   15adc:	d166      	bne.n	15bac <bus_fault+0x13c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   15ade:	4b97      	ldr	r3, [pc, #604]	; (15d3c <bus_fault+0x2cc>)
   15ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15ae2:	f413 6f80 	tst.w	r3, #1024	; 0x400
   15ae6:	f040 80b8 	bne.w	15c5a <bus_fault+0x1ea>
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15aea:	4b94      	ldr	r3, [pc, #592]	; (15d3c <bus_fault+0x2cc>)
   15aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15aee:	f413 7f80 	tst.w	r3, #256	; 0x100
   15af2:	f040 80d6 	bne.w	15ca2 <bus_fault+0x232>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   15af6:	4b91      	ldr	r3, [pc, #580]	; (15d3c <bus_fault+0x2cc>)
   15af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15afa:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15afe:	f040 80f4 	bne.w	15cea <bus_fault+0x27a>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15b02:	4a8e      	ldr	r2, [pc, #568]	; (15d3c <bus_fault+0x2cc>)
   15b04:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15b06:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   15b0a:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   15b0c:	2101      	movs	r1, #1
   15b0e:	4630      	mov	r0, r6
   15b10:	f00e fbc2 	bl	24298 <memory_fault_recoverable>
   15b14:	7028      	strb	r0, [r5, #0]

	return reason;
}
   15b16:	2000      	movs	r0, #0
   15b18:	b033      	add	sp, #204	; 0xcc
   15b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_FAULT_INFO("  Stacking error");
   15b1c:	4b88      	ldr	r3, [pc, #544]	; (15d40 <bus_fault+0x2d0>)
   15b1e:	930c      	str	r3, [sp, #48]	; 0x30
   15b20:	2300      	movs	r3, #0
   15b22:	f8ad 3005 	strh.w	r3, [sp, #5]
   15b26:	f88d 3007 	strb.w	r3, [sp, #7]
   15b2a:	2202      	movs	r2, #2
   15b2c:	f88d 2004 	strb.w	r2, [sp, #4]
   15b30:	f88d 3006 	strb.w	r3, [sp, #6]
   15b34:	9a01      	ldr	r2, [sp, #4]
   15b36:	920b      	str	r2, [sp, #44]	; 0x2c
   15b38:	461a      	mov	r2, r3
   15b3a:	f363 0200 	bfi	r2, r3, #0, #1
   15b3e:	f363 0241 	bfi	r2, r3, #1, #1
   15b42:	f363 0282 	bfi	r2, r3, #2, #1
   15b46:	f363 02c5 	bfi	r2, r3, #3, #3
   15b4a:	2101      	movs	r1, #1
   15b4c:	f361 1288 	bfi	r2, r1, #6, #3
   15b50:	2108      	movs	r1, #8
   15b52:	f361 2252 	bfi	r2, r1, #9, #10
   15b56:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15b5a:	4977      	ldr	r1, [pc, #476]	; (15d38 <bus_fault+0x2c8>)
   15b5c:	a808      	add	r0, sp, #32
   15b5e:	f00e f9f5 	bl	23f4c <z_log_msg2_finalize>
   15b62:	e7b2      	b.n	15aca <bus_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
   15b64:	4b77      	ldr	r3, [pc, #476]	; (15d44 <bus_fault+0x2d4>)
   15b66:	9312      	str	r3, [sp, #72]	; 0x48
   15b68:	2300      	movs	r3, #0
   15b6a:	f8ad 3005 	strh.w	r3, [sp, #5]
   15b6e:	f88d 3007 	strb.w	r3, [sp, #7]
   15b72:	2202      	movs	r2, #2
   15b74:	f88d 2004 	strb.w	r2, [sp, #4]
   15b78:	f88d 3006 	strb.w	r3, [sp, #6]
   15b7c:	9a01      	ldr	r2, [sp, #4]
   15b7e:	9211      	str	r2, [sp, #68]	; 0x44
   15b80:	461a      	mov	r2, r3
   15b82:	f363 0200 	bfi	r2, r3, #0, #1
   15b86:	f363 0241 	bfi	r2, r3, #1, #1
   15b8a:	f363 0282 	bfi	r2, r3, #2, #1
   15b8e:	f363 02c5 	bfi	r2, r3, #3, #3
   15b92:	2101      	movs	r1, #1
   15b94:	f361 1288 	bfi	r2, r1, #6, #3
   15b98:	2108      	movs	r1, #8
   15b9a:	f361 2252 	bfi	r2, r1, #9, #10
   15b9e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15ba2:	4965      	ldr	r1, [pc, #404]	; (15d38 <bus_fault+0x2c8>)
   15ba4:	a80e      	add	r0, sp, #56	; 0x38
   15ba6:	f00e f9d1 	bl	23f4c <z_log_msg2_finalize>
   15baa:	e793      	b.n	15ad4 <bus_fault+0x64>
		PR_FAULT_INFO("  Precise data bus error");
   15bac:	4b66      	ldr	r3, [pc, #408]	; (15d48 <bus_fault+0x2d8>)
   15bae:	9318      	str	r3, [sp, #96]	; 0x60
   15bb0:	2300      	movs	r3, #0
   15bb2:	f8ad 3005 	strh.w	r3, [sp, #5]
   15bb6:	f88d 3007 	strb.w	r3, [sp, #7]
   15bba:	2202      	movs	r2, #2
   15bbc:	f88d 2004 	strb.w	r2, [sp, #4]
   15bc0:	f88d 3006 	strb.w	r3, [sp, #6]
   15bc4:	9a01      	ldr	r2, [sp, #4]
   15bc6:	9217      	str	r2, [sp, #92]	; 0x5c
   15bc8:	461a      	mov	r2, r3
   15bca:	f363 0200 	bfi	r2, r3, #0, #1
   15bce:	f363 0241 	bfi	r2, r3, #1, #1
   15bd2:	f363 0282 	bfi	r2, r3, #2, #1
   15bd6:	f363 02c5 	bfi	r2, r3, #3, #3
   15bda:	2101      	movs	r1, #1
   15bdc:	f361 1288 	bfi	r2, r1, #6, #3
   15be0:	2108      	movs	r1, #8
   15be2:	f361 2252 	bfi	r2, r1, #9, #10
   15be6:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15bea:	4953      	ldr	r1, [pc, #332]	; (15d38 <bus_fault+0x2c8>)
   15bec:	a814      	add	r0, sp, #80	; 0x50
   15bee:	f00e f9ad 	bl	23f4c <z_log_msg2_finalize>
		STORE_xFAR(bfar, SCB->BFAR);
   15bf2:	4b52      	ldr	r3, [pc, #328]	; (15d3c <bus_fault+0x2cc>)
   15bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15bf8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   15bfc:	f43f af6f 	beq.w	15ade <bus_fault+0x6e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   15c00:	4b52      	ldr	r3, [pc, #328]	; (15d4c <bus_fault+0x2dc>)
   15c02:	931e      	str	r3, [sp, #120]	; 0x78
   15c04:	921f      	str	r2, [sp, #124]	; 0x7c
   15c06:	2300      	movs	r3, #0
   15c08:	f8ad 3005 	strh.w	r3, [sp, #5]
   15c0c:	f88d 3007 	strb.w	r3, [sp, #7]
   15c10:	2203      	movs	r2, #3
   15c12:	f88d 2004 	strb.w	r2, [sp, #4]
   15c16:	f88d 3006 	strb.w	r3, [sp, #6]
   15c1a:	9a01      	ldr	r2, [sp, #4]
   15c1c:	921d      	str	r2, [sp, #116]	; 0x74
   15c1e:	461a      	mov	r2, r3
   15c20:	f363 0200 	bfi	r2, r3, #0, #1
   15c24:	f363 0241 	bfi	r2, r3, #1, #1
   15c28:	f363 0282 	bfi	r2, r3, #2, #1
   15c2c:	f363 02c5 	bfi	r2, r3, #3, #3
   15c30:	2101      	movs	r1, #1
   15c32:	f361 1288 	bfi	r2, r1, #6, #3
   15c36:	210c      	movs	r1, #12
   15c38:	f361 2252 	bfi	r2, r1, #9, #10
   15c3c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15c40:	493d      	ldr	r1, [pc, #244]	; (15d38 <bus_fault+0x2c8>)
   15c42:	a81a      	add	r0, sp, #104	; 0x68
   15c44:	f00e f982 	bl	23f4c <z_log_msg2_finalize>
			if (from_hard_fault != 0) {
   15c48:	2f00      	cmp	r7, #0
   15c4a:	f43f af48 	beq.w	15ade <bus_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   15c4e:	4a3b      	ldr	r2, [pc, #236]	; (15d3c <bus_fault+0x2cc>)
   15c50:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15c52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   15c56:	6293      	str	r3, [r2, #40]	; 0x28
   15c58:	e741      	b.n	15ade <bus_fault+0x6e>
		PR_FAULT_INFO("  Imprecise data bus error");
   15c5a:	4b3d      	ldr	r3, [pc, #244]	; (15d50 <bus_fault+0x2e0>)
   15c5c:	9324      	str	r3, [sp, #144]	; 0x90
   15c5e:	2300      	movs	r3, #0
   15c60:	f8ad 3005 	strh.w	r3, [sp, #5]
   15c64:	f88d 3007 	strb.w	r3, [sp, #7]
   15c68:	2202      	movs	r2, #2
   15c6a:	f88d 2004 	strb.w	r2, [sp, #4]
   15c6e:	f88d 3006 	strb.w	r3, [sp, #6]
   15c72:	9a01      	ldr	r2, [sp, #4]
   15c74:	9223      	str	r2, [sp, #140]	; 0x8c
   15c76:	461a      	mov	r2, r3
   15c78:	f363 0200 	bfi	r2, r3, #0, #1
   15c7c:	f363 0241 	bfi	r2, r3, #1, #1
   15c80:	f363 0282 	bfi	r2, r3, #2, #1
   15c84:	f363 02c5 	bfi	r2, r3, #3, #3
   15c88:	2101      	movs	r1, #1
   15c8a:	f361 1288 	bfi	r2, r1, #6, #3
   15c8e:	2108      	movs	r1, #8
   15c90:	f361 2252 	bfi	r2, r1, #9, #10
   15c94:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15c98:	4927      	ldr	r1, [pc, #156]	; (15d38 <bus_fault+0x2c8>)
   15c9a:	a820      	add	r0, sp, #128	; 0x80
   15c9c:	f00e f956 	bl	23f4c <z_log_msg2_finalize>
   15ca0:	e723      	b.n	15aea <bus_fault+0x7a>
		PR_FAULT_INFO("  Instruction bus error");
   15ca2:	4b2c      	ldr	r3, [pc, #176]	; (15d54 <bus_fault+0x2e4>)
   15ca4:	9330      	str	r3, [sp, #192]	; 0xc0
   15ca6:	2300      	movs	r3, #0
   15ca8:	f8ad 3005 	strh.w	r3, [sp, #5]
   15cac:	f88d 3007 	strb.w	r3, [sp, #7]
   15cb0:	2202      	movs	r2, #2
   15cb2:	f88d 2004 	strb.w	r2, [sp, #4]
   15cb6:	f88d 3006 	strb.w	r3, [sp, #6]
   15cba:	9a01      	ldr	r2, [sp, #4]
   15cbc:	922f      	str	r2, [sp, #188]	; 0xbc
   15cbe:	461a      	mov	r2, r3
   15cc0:	f363 0200 	bfi	r2, r3, #0, #1
   15cc4:	f363 0241 	bfi	r2, r3, #1, #1
   15cc8:	f363 0282 	bfi	r2, r3, #2, #1
   15ccc:	f363 02c5 	bfi	r2, r3, #3, #3
   15cd0:	2101      	movs	r1, #1
   15cd2:	f361 1288 	bfi	r2, r1, #6, #3
   15cd6:	2108      	movs	r1, #8
   15cd8:	f361 2252 	bfi	r2, r1, #9, #10
   15cdc:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15ce0:	4915      	ldr	r1, [pc, #84]	; (15d38 <bus_fault+0x2c8>)
   15ce2:	a82c      	add	r0, sp, #176	; 0xb0
   15ce4:	f00e f932 	bl	23f4c <z_log_msg2_finalize>
   15ce8:	e70b      	b.n	15b02 <bus_fault+0x92>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15cea:	4b1b      	ldr	r3, [pc, #108]	; (15d58 <bus_fault+0x2e8>)
   15cec:	932a      	str	r3, [sp, #168]	; 0xa8
   15cee:	2300      	movs	r3, #0
   15cf0:	f8ad 3005 	strh.w	r3, [sp, #5]
   15cf4:	f88d 3007 	strb.w	r3, [sp, #7]
   15cf8:	2202      	movs	r2, #2
   15cfa:	f88d 2004 	strb.w	r2, [sp, #4]
   15cfe:	f88d 3006 	strb.w	r3, [sp, #6]
   15d02:	9a01      	ldr	r2, [sp, #4]
   15d04:	9229      	str	r2, [sp, #164]	; 0xa4
   15d06:	461a      	mov	r2, r3
   15d08:	f363 0200 	bfi	r2, r3, #0, #1
   15d0c:	f363 0241 	bfi	r2, r3, #1, #1
   15d10:	f363 0282 	bfi	r2, r3, #2, #1
   15d14:	f363 02c5 	bfi	r2, r3, #3, #3
   15d18:	2101      	movs	r1, #1
   15d1a:	f361 1288 	bfi	r2, r1, #6, #3
   15d1e:	2108      	movs	r1, #8
   15d20:	f361 2252 	bfi	r2, r1, #9, #10
   15d24:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15d28:	4903      	ldr	r1, [pc, #12]	; (15d38 <bus_fault+0x2c8>)
   15d2a:	a826      	add	r0, sp, #152	; 0x98
   15d2c:	f00e f90e 	bl	23f4c <z_log_msg2_finalize>
   15d30:	e6e7      	b.n	15b02 <bus_fault+0x92>
   15d32:	bf00      	nop
   15d34:	00029104 	.word	0x00029104
   15d38:	0002890c 	.word	0x0002890c
   15d3c:	e000ed00 	.word	0xe000ed00
   15d40:	0002911c 	.word	0x0002911c
   15d44:	00029130 	.word	0x00029130
   15d48:	00029144 	.word	0x00029144
   15d4c:	00029160 	.word	0x00029160
   15d50:	00029178 	.word	0x00029178
   15d54:	00029194 	.word	0x00029194
   15d58:	000291ac 	.word	0x000291ac

00015d5c <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   15d5c:	b500      	push	{lr}
   15d5e:	b0ad      	sub	sp, #180	; 0xb4
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   15d60:	4b93      	ldr	r3, [pc, #588]	; (15fb0 <usage_fault+0x254>)
   15d62:	9306      	str	r3, [sp, #24]
   15d64:	2300      	movs	r3, #0
   15d66:	f8ad 3005 	strh.w	r3, [sp, #5]
   15d6a:	f88d 3007 	strb.w	r3, [sp, #7]
   15d6e:	2202      	movs	r2, #2
   15d70:	f88d 2004 	strb.w	r2, [sp, #4]
   15d74:	f88d 3006 	strb.w	r3, [sp, #6]
   15d78:	9a01      	ldr	r2, [sp, #4]
   15d7a:	9205      	str	r2, [sp, #20]
   15d7c:	461a      	mov	r2, r3
   15d7e:	f363 0200 	bfi	r2, r3, #0, #1
   15d82:	f363 0241 	bfi	r2, r3, #1, #1
   15d86:	f363 0282 	bfi	r2, r3, #2, #1
   15d8a:	f363 02c5 	bfi	r2, r3, #3, #3
   15d8e:	2101      	movs	r1, #1
   15d90:	f361 1288 	bfi	r2, r1, #6, #3
   15d94:	2108      	movs	r1, #8
   15d96:	f361 2252 	bfi	r2, r1, #9, #10
   15d9a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15d9e:	4985      	ldr	r1, [pc, #532]	; (15fb4 <usage_fault+0x258>)
   15da0:	a802      	add	r0, sp, #8
   15da2:	f00e f8d3 	bl	23f4c <z_log_msg2_finalize>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15da6:	4b84      	ldr	r3, [pc, #528]	; (15fb8 <usage_fault+0x25c>)
   15da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15daa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15dae:	d126      	bne.n	15dfe <usage_fault+0xa2>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15db0:	4b81      	ldr	r3, [pc, #516]	; (15fb8 <usage_fault+0x25c>)
   15db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15db4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   15db8:	d145      	bne.n	15e46 <usage_fault+0xea>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   15dba:	4b7f      	ldr	r3, [pc, #508]	; (15fb8 <usage_fault+0x25c>)
   15dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15dbe:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15dc2:	d164      	bne.n	15e8e <usage_fault+0x132>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15dc4:	4b7c      	ldr	r3, [pc, #496]	; (15fb8 <usage_fault+0x25c>)
   15dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15dc8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15dcc:	f040 8083 	bne.w	15ed6 <usage_fault+0x17a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15dd0:	4b79      	ldr	r3, [pc, #484]	; (15fb8 <usage_fault+0x25c>)
   15dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15dd4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15dd8:	f040 80a1 	bne.w	15f1e <usage_fault+0x1c2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15ddc:	4b76      	ldr	r3, [pc, #472]	; (15fb8 <usage_fault+0x25c>)
   15dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15de0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15de4:	f040 80bf 	bne.w	15f66 <usage_fault+0x20a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15de8:	4a73      	ldr	r2, [pc, #460]	; (15fb8 <usage_fault+0x25c>)
   15dea:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15dec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   15df0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15df4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15df6:	2000      	movs	r0, #0
   15df8:	b02d      	add	sp, #180	; 0xb4
   15dfa:	f85d fb04 	ldr.w	pc, [sp], #4
		PR_FAULT_INFO("  Division by zero");
   15dfe:	4b6f      	ldr	r3, [pc, #444]	; (15fbc <usage_fault+0x260>)
   15e00:	930c      	str	r3, [sp, #48]	; 0x30
   15e02:	2300      	movs	r3, #0
   15e04:	f8ad 3005 	strh.w	r3, [sp, #5]
   15e08:	f88d 3007 	strb.w	r3, [sp, #7]
   15e0c:	2202      	movs	r2, #2
   15e0e:	f88d 2004 	strb.w	r2, [sp, #4]
   15e12:	f88d 3006 	strb.w	r3, [sp, #6]
   15e16:	9a01      	ldr	r2, [sp, #4]
   15e18:	920b      	str	r2, [sp, #44]	; 0x2c
   15e1a:	461a      	mov	r2, r3
   15e1c:	f363 0200 	bfi	r2, r3, #0, #1
   15e20:	f363 0241 	bfi	r2, r3, #1, #1
   15e24:	f363 0282 	bfi	r2, r3, #2, #1
   15e28:	f363 02c5 	bfi	r2, r3, #3, #3
   15e2c:	2101      	movs	r1, #1
   15e2e:	f361 1288 	bfi	r2, r1, #6, #3
   15e32:	2108      	movs	r1, #8
   15e34:	f361 2252 	bfi	r2, r1, #9, #10
   15e38:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15e3c:	495d      	ldr	r1, [pc, #372]	; (15fb4 <usage_fault+0x258>)
   15e3e:	a808      	add	r0, sp, #32
   15e40:	f00e f884 	bl	23f4c <z_log_msg2_finalize>
   15e44:	e7b4      	b.n	15db0 <usage_fault+0x54>
		PR_FAULT_INFO("  Unaligned memory access");
   15e46:	4b5e      	ldr	r3, [pc, #376]	; (15fc0 <usage_fault+0x264>)
   15e48:	9312      	str	r3, [sp, #72]	; 0x48
   15e4a:	2300      	movs	r3, #0
   15e4c:	f8ad 3005 	strh.w	r3, [sp, #5]
   15e50:	f88d 3007 	strb.w	r3, [sp, #7]
   15e54:	2202      	movs	r2, #2
   15e56:	f88d 2004 	strb.w	r2, [sp, #4]
   15e5a:	f88d 3006 	strb.w	r3, [sp, #6]
   15e5e:	9a01      	ldr	r2, [sp, #4]
   15e60:	9211      	str	r2, [sp, #68]	; 0x44
   15e62:	461a      	mov	r2, r3
   15e64:	f363 0200 	bfi	r2, r3, #0, #1
   15e68:	f363 0241 	bfi	r2, r3, #1, #1
   15e6c:	f363 0282 	bfi	r2, r3, #2, #1
   15e70:	f363 02c5 	bfi	r2, r3, #3, #3
   15e74:	2101      	movs	r1, #1
   15e76:	f361 1288 	bfi	r2, r1, #6, #3
   15e7a:	2108      	movs	r1, #8
   15e7c:	f361 2252 	bfi	r2, r1, #9, #10
   15e80:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15e84:	494b      	ldr	r1, [pc, #300]	; (15fb4 <usage_fault+0x258>)
   15e86:	a80e      	add	r0, sp, #56	; 0x38
   15e88:	f00e f860 	bl	23f4c <z_log_msg2_finalize>
   15e8c:	e795      	b.n	15dba <usage_fault+0x5e>
		PR_FAULT_INFO("  No coprocessor instructions");
   15e8e:	4b4d      	ldr	r3, [pc, #308]	; (15fc4 <usage_fault+0x268>)
   15e90:	9318      	str	r3, [sp, #96]	; 0x60
   15e92:	2300      	movs	r3, #0
   15e94:	f8ad 3005 	strh.w	r3, [sp, #5]
   15e98:	f88d 3007 	strb.w	r3, [sp, #7]
   15e9c:	2202      	movs	r2, #2
   15e9e:	f88d 2004 	strb.w	r2, [sp, #4]
   15ea2:	f88d 3006 	strb.w	r3, [sp, #6]
   15ea6:	9a01      	ldr	r2, [sp, #4]
   15ea8:	9217      	str	r2, [sp, #92]	; 0x5c
   15eaa:	461a      	mov	r2, r3
   15eac:	f363 0200 	bfi	r2, r3, #0, #1
   15eb0:	f363 0241 	bfi	r2, r3, #1, #1
   15eb4:	f363 0282 	bfi	r2, r3, #2, #1
   15eb8:	f363 02c5 	bfi	r2, r3, #3, #3
   15ebc:	2101      	movs	r1, #1
   15ebe:	f361 1288 	bfi	r2, r1, #6, #3
   15ec2:	2108      	movs	r1, #8
   15ec4:	f361 2252 	bfi	r2, r1, #9, #10
   15ec8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15ecc:	4939      	ldr	r1, [pc, #228]	; (15fb4 <usage_fault+0x258>)
   15ece:	a814      	add	r0, sp, #80	; 0x50
   15ed0:	f00e f83c 	bl	23f4c <z_log_msg2_finalize>
   15ed4:	e776      	b.n	15dc4 <usage_fault+0x68>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   15ed6:	4b3c      	ldr	r3, [pc, #240]	; (15fc8 <usage_fault+0x26c>)
   15ed8:	931e      	str	r3, [sp, #120]	; 0x78
   15eda:	2300      	movs	r3, #0
   15edc:	f8ad 3005 	strh.w	r3, [sp, #5]
   15ee0:	f88d 3007 	strb.w	r3, [sp, #7]
   15ee4:	2202      	movs	r2, #2
   15ee6:	f88d 2004 	strb.w	r2, [sp, #4]
   15eea:	f88d 3006 	strb.w	r3, [sp, #6]
   15eee:	9a01      	ldr	r2, [sp, #4]
   15ef0:	921d      	str	r2, [sp, #116]	; 0x74
   15ef2:	461a      	mov	r2, r3
   15ef4:	f363 0200 	bfi	r2, r3, #0, #1
   15ef8:	f363 0241 	bfi	r2, r3, #1, #1
   15efc:	f363 0282 	bfi	r2, r3, #2, #1
   15f00:	f363 02c5 	bfi	r2, r3, #3, #3
   15f04:	2101      	movs	r1, #1
   15f06:	f361 1288 	bfi	r2, r1, #6, #3
   15f0a:	2108      	movs	r1, #8
   15f0c:	f361 2252 	bfi	r2, r1, #9, #10
   15f10:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15f14:	4927      	ldr	r1, [pc, #156]	; (15fb4 <usage_fault+0x258>)
   15f16:	a81a      	add	r0, sp, #104	; 0x68
   15f18:	f00e f818 	bl	23f4c <z_log_msg2_finalize>
   15f1c:	e758      	b.n	15dd0 <usage_fault+0x74>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15f1e:	4b2b      	ldr	r3, [pc, #172]	; (15fcc <usage_fault+0x270>)
   15f20:	9324      	str	r3, [sp, #144]	; 0x90
   15f22:	2300      	movs	r3, #0
   15f24:	f8ad 3005 	strh.w	r3, [sp, #5]
   15f28:	f88d 3007 	strb.w	r3, [sp, #7]
   15f2c:	2202      	movs	r2, #2
   15f2e:	f88d 2004 	strb.w	r2, [sp, #4]
   15f32:	f88d 3006 	strb.w	r3, [sp, #6]
   15f36:	9a01      	ldr	r2, [sp, #4]
   15f38:	9223      	str	r2, [sp, #140]	; 0x8c
   15f3a:	461a      	mov	r2, r3
   15f3c:	f363 0200 	bfi	r2, r3, #0, #1
   15f40:	f363 0241 	bfi	r2, r3, #1, #1
   15f44:	f363 0282 	bfi	r2, r3, #2, #1
   15f48:	f363 02c5 	bfi	r2, r3, #3, #3
   15f4c:	2101      	movs	r1, #1
   15f4e:	f361 1288 	bfi	r2, r1, #6, #3
   15f52:	2108      	movs	r1, #8
   15f54:	f361 2252 	bfi	r2, r1, #9, #10
   15f58:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15f5c:	4915      	ldr	r1, [pc, #84]	; (15fb4 <usage_fault+0x258>)
   15f5e:	a820      	add	r0, sp, #128	; 0x80
   15f60:	f00d fff4 	bl	23f4c <z_log_msg2_finalize>
   15f64:	e73a      	b.n	15ddc <usage_fault+0x80>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   15f66:	4b1a      	ldr	r3, [pc, #104]	; (15fd0 <usage_fault+0x274>)
   15f68:	932a      	str	r3, [sp, #168]	; 0xa8
   15f6a:	2300      	movs	r3, #0
   15f6c:	f8ad 3005 	strh.w	r3, [sp, #5]
   15f70:	f88d 3007 	strb.w	r3, [sp, #7]
   15f74:	2202      	movs	r2, #2
   15f76:	f88d 2004 	strb.w	r2, [sp, #4]
   15f7a:	f88d 3006 	strb.w	r3, [sp, #6]
   15f7e:	9a01      	ldr	r2, [sp, #4]
   15f80:	9229      	str	r2, [sp, #164]	; 0xa4
   15f82:	461a      	mov	r2, r3
   15f84:	f363 0200 	bfi	r2, r3, #0, #1
   15f88:	f363 0241 	bfi	r2, r3, #1, #1
   15f8c:	f363 0282 	bfi	r2, r3, #2, #1
   15f90:	f363 02c5 	bfi	r2, r3, #3, #3
   15f94:	2101      	movs	r1, #1
   15f96:	f361 1288 	bfi	r2, r1, #6, #3
   15f9a:	2108      	movs	r1, #8
   15f9c:	f361 2252 	bfi	r2, r1, #9, #10
   15fa0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   15fa4:	4903      	ldr	r1, [pc, #12]	; (15fb4 <usage_fault+0x258>)
   15fa6:	a826      	add	r0, sp, #152	; 0x98
   15fa8:	f00d ffd0 	bl	23f4c <z_log_msg2_finalize>
   15fac:	e71c      	b.n	15de8 <usage_fault+0x8c>
   15fae:	bf00      	nop
   15fb0:	000291dc 	.word	0x000291dc
   15fb4:	0002890c 	.word	0x0002890c
   15fb8:	e000ed00 	.word	0xe000ed00
   15fbc:	000291f4 	.word	0x000291f4
   15fc0:	00029208 	.word	0x00029208
   15fc4:	00029224 	.word	0x00029224
   15fc8:	00029244 	.word	0x00029244
   15fcc:	0002926c 	.word	0x0002926c
   15fd0:	00029288 	.word	0x00029288

00015fd4 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   15fd4:	b500      	push	{lr}
   15fd6:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
   15fd8:	2300      	movs	r3, #0
   15fda:	700b      	strb	r3, [r1, #0]

	PR_FAULT_INFO(
   15fdc:	4a12      	ldr	r2, [pc, #72]	; (16028 <debug_monitor+0x54>)
   15fde:	9206      	str	r2, [sp, #24]
   15fe0:	f8ad 3005 	strh.w	r3, [sp, #5]
   15fe4:	f88d 3007 	strb.w	r3, [sp, #7]
   15fe8:	2202      	movs	r2, #2
   15fea:	f88d 2004 	strb.w	r2, [sp, #4]
   15fee:	f88d 3006 	strb.w	r3, [sp, #6]
   15ff2:	9a01      	ldr	r2, [sp, #4]
   15ff4:	9205      	str	r2, [sp, #20]
   15ff6:	461a      	mov	r2, r3
   15ff8:	f363 0200 	bfi	r2, r3, #0, #1
   15ffc:	f363 0241 	bfi	r2, r3, #1, #1
   16000:	f363 0282 	bfi	r2, r3, #2, #1
   16004:	f363 02c5 	bfi	r2, r3, #3, #3
   16008:	2101      	movs	r1, #1
   1600a:	f361 1288 	bfi	r2, r1, #6, #3
   1600e:	2108      	movs	r1, #8
   16010:	f361 2252 	bfi	r2, r1, #9, #10
   16014:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16018:	4904      	ldr	r1, [pc, #16]	; (1602c <debug_monitor+0x58>)
   1601a:	a802      	add	r0, sp, #8
   1601c:	f00d ff96 	bl	23f4c <z_log_msg2_finalize>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   16020:	b009      	add	sp, #36	; 0x24
   16022:	f85d fb04 	ldr.w	pc, [sp], #4
   16026:	bf00      	nop
   16028:	000292b4 	.word	0x000292b4
   1602c:	0002890c 	.word	0x0002890c

00016030 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   16030:	b500      	push	{lr}
   16032:	b085      	sub	sp, #20
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   16034:	290f      	cmp	r1, #15
   16036:	dc0f      	bgt.n	16058 <reserved_exception+0x28>
   16038:	4b08      	ldr	r3, [pc, #32]	; (1605c <reserved_exception+0x2c>)
   1603a:	3910      	subs	r1, #16
   1603c:	9103      	str	r1, [sp, #12]
   1603e:	9302      	str	r3, [sp, #8]
   16040:	4b07      	ldr	r3, [pc, #28]	; (16060 <reserved_exception+0x30>)
   16042:	9301      	str	r3, [sp, #4]
   16044:	2000      	movs	r0, #0
   16046:	9000      	str	r0, [sp, #0]
   16048:	4603      	mov	r3, r0
   1604a:	2201      	movs	r2, #1
   1604c:	4905      	ldr	r1, [pc, #20]	; (16064 <reserved_exception+0x34>)
   1604e:	f00e f925 	bl	2429c <z_log_msg2_runtime_create>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   16052:	b005      	add	sp, #20
   16054:	f85d fb04 	ldr.w	pc, [sp], #4
	PR_FAULT_INFO("***** %s %d) *****",
   16058:	4b03      	ldr	r3, [pc, #12]	; (16068 <reserved_exception+0x38>)
   1605a:	e7ee      	b.n	1603a <reserved_exception+0xa>
   1605c:	000292f4 	.word	0x000292f4
   16060:	0002930c 	.word	0x0002930c
   16064:	0002890c 	.word	0x0002890c
   16068:	000292d8 	.word	0x000292d8

0001606c <mem_manage_fault>:
{
   1606c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16070:	b0ac      	sub	sp, #176	; 0xb0
   16072:	4605      	mov	r5, r0
   16074:	460f      	mov	r7, r1
   16076:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   16078:	4baa      	ldr	r3, [pc, #680]	; (16324 <mem_manage_fault+0x2b8>)
   1607a:	9306      	str	r3, [sp, #24]
   1607c:	2300      	movs	r3, #0
   1607e:	f8ad 3005 	strh.w	r3, [sp, #5]
   16082:	f88d 3007 	strb.w	r3, [sp, #7]
   16086:	2202      	movs	r2, #2
   16088:	f88d 2004 	strb.w	r2, [sp, #4]
   1608c:	f88d 3006 	strb.w	r3, [sp, #6]
   16090:	9a01      	ldr	r2, [sp, #4]
   16092:	9205      	str	r2, [sp, #20]
   16094:	461c      	mov	r4, r3
   16096:	f363 0400 	bfi	r4, r3, #0, #1
   1609a:	f363 0441 	bfi	r4, r3, #1, #1
   1609e:	f363 0482 	bfi	r4, r3, #2, #1
   160a2:	f363 04c5 	bfi	r4, r3, #3, #3
   160a6:	2201      	movs	r2, #1
   160a8:	f362 1488 	bfi	r4, r2, #6, #3
   160ac:	2208      	movs	r2, #8
   160ae:	f362 2452 	bfi	r4, r2, #9, #10
   160b2:	f3c4 0212 	ubfx	r2, r4, #0, #19
   160b6:	499c      	ldr	r1, [pc, #624]	; (16328 <mem_manage_fault+0x2bc>)
   160b8:	a802      	add	r0, sp, #8
   160ba:	f00d ff47 	bl	23f4c <z_log_msg2_finalize>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   160be:	4b9b      	ldr	r3, [pc, #620]	; (1632c <mem_manage_fault+0x2c0>)
   160c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   160c2:	f013 0f10 	tst.w	r3, #16
   160c6:	d135      	bne.n	16134 <mem_manage_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   160c8:	4b98      	ldr	r3, [pc, #608]	; (1632c <mem_manage_fault+0x2c0>)
   160ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   160cc:	f013 0f08 	tst.w	r3, #8
   160d0:	d154      	bne.n	1617c <mem_manage_fault+0x110>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   160d2:	4b96      	ldr	r3, [pc, #600]	; (1632c <mem_manage_fault+0x2c0>)
   160d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   160d6:	f013 0f02 	tst.w	r3, #2
   160da:	d173      	bne.n	161c4 <mem_manage_fault+0x158>
	uint32_t mmfar = -EINVAL;
   160dc:	f06f 0815 	mvn.w	r8, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   160e0:	4b92      	ldr	r3, [pc, #584]	; (1632c <mem_manage_fault+0x2c0>)
   160e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   160e4:	f013 0f01 	tst.w	r3, #1
   160e8:	f040 80c7 	bne.w	1627a <mem_manage_fault+0x20e>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   160ec:	4b8f      	ldr	r3, [pc, #572]	; (1632c <mem_manage_fault+0x2c0>)
   160ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   160f0:	f013 0f20 	tst.w	r3, #32
   160f4:	f040 80e5 	bne.w	162c2 <mem_manage_fault+0x256>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   160f8:	4b8c      	ldr	r3, [pc, #560]	; (1632c <mem_manage_fault+0x2c0>)
   160fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   160fc:	f013 0f10 	tst.w	r3, #16
   16100:	d104      	bne.n	1610c <mem_manage_fault+0xa0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   16102:	4b8a      	ldr	r3, [pc, #552]	; (1632c <mem_manage_fault+0x2c0>)
   16104:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   16106:	f014 0402 	ands.w	r4, r4, #2
   1610a:	d005      	beq.n	16118 <mem_manage_fault+0xac>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1610c:	4b87      	ldr	r3, [pc, #540]	; (1632c <mem_manage_fault+0x2c0>)
   1610e:	685c      	ldr	r4, [r3, #4]
   16110:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   16114:	f040 80f9 	bne.w	1630a <mem_manage_fault+0x29e>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   16118:	4a84      	ldr	r2, [pc, #528]	; (1632c <mem_manage_fault+0x2c0>)
   1611a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1611c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   16120:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   16122:	2101      	movs	r1, #1
   16124:	4628      	mov	r0, r5
   16126:	f00e f8b7 	bl	24298 <memory_fault_recoverable>
   1612a:	7030      	strb	r0, [r6, #0]
}
   1612c:	4620      	mov	r0, r4
   1612e:	b02c      	add	sp, #176	; 0xb0
   16130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
   16134:	4b7e      	ldr	r3, [pc, #504]	; (16330 <mem_manage_fault+0x2c4>)
   16136:	930c      	str	r3, [sp, #48]	; 0x30
   16138:	2300      	movs	r3, #0
   1613a:	f8ad 3005 	strh.w	r3, [sp, #5]
   1613e:	f88d 3007 	strb.w	r3, [sp, #7]
   16142:	2202      	movs	r2, #2
   16144:	f88d 2004 	strb.w	r2, [sp, #4]
   16148:	f88d 3006 	strb.w	r3, [sp, #6]
   1614c:	9a01      	ldr	r2, [sp, #4]
   1614e:	920b      	str	r2, [sp, #44]	; 0x2c
   16150:	461a      	mov	r2, r3
   16152:	f363 0200 	bfi	r2, r3, #0, #1
   16156:	f363 0241 	bfi	r2, r3, #1, #1
   1615a:	f363 0282 	bfi	r2, r3, #2, #1
   1615e:	f363 02c5 	bfi	r2, r3, #3, #3
   16162:	2101      	movs	r1, #1
   16164:	f361 1288 	bfi	r2, r1, #6, #3
   16168:	2108      	movs	r1, #8
   1616a:	f361 2252 	bfi	r2, r1, #9, #10
   1616e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16172:	496d      	ldr	r1, [pc, #436]	; (16328 <mem_manage_fault+0x2bc>)
   16174:	a808      	add	r0, sp, #32
   16176:	f00d fee9 	bl	23f4c <z_log_msg2_finalize>
   1617a:	e7a5      	b.n	160c8 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
   1617c:	4b6d      	ldr	r3, [pc, #436]	; (16334 <mem_manage_fault+0x2c8>)
   1617e:	9312      	str	r3, [sp, #72]	; 0x48
   16180:	2300      	movs	r3, #0
   16182:	f8ad 3005 	strh.w	r3, [sp, #5]
   16186:	f88d 3007 	strb.w	r3, [sp, #7]
   1618a:	2202      	movs	r2, #2
   1618c:	f88d 2004 	strb.w	r2, [sp, #4]
   16190:	f88d 3006 	strb.w	r3, [sp, #6]
   16194:	9a01      	ldr	r2, [sp, #4]
   16196:	9211      	str	r2, [sp, #68]	; 0x44
   16198:	461a      	mov	r2, r3
   1619a:	f363 0200 	bfi	r2, r3, #0, #1
   1619e:	f363 0241 	bfi	r2, r3, #1, #1
   161a2:	f363 0282 	bfi	r2, r3, #2, #1
   161a6:	f363 02c5 	bfi	r2, r3, #3, #3
   161aa:	2101      	movs	r1, #1
   161ac:	f361 1288 	bfi	r2, r1, #6, #3
   161b0:	2108      	movs	r1, #8
   161b2:	f361 2252 	bfi	r2, r1, #9, #10
   161b6:	f3c2 0212 	ubfx	r2, r2, #0, #19
   161ba:	495b      	ldr	r1, [pc, #364]	; (16328 <mem_manage_fault+0x2bc>)
   161bc:	a80e      	add	r0, sp, #56	; 0x38
   161be:	f00d fec5 	bl	23f4c <z_log_msg2_finalize>
   161c2:	e786      	b.n	160d2 <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
   161c4:	4b5c      	ldr	r3, [pc, #368]	; (16338 <mem_manage_fault+0x2cc>)
   161c6:	9318      	str	r3, [sp, #96]	; 0x60
   161c8:	2300      	movs	r3, #0
   161ca:	f8ad 3005 	strh.w	r3, [sp, #5]
   161ce:	f88d 3007 	strb.w	r3, [sp, #7]
   161d2:	2202      	movs	r2, #2
   161d4:	f88d 2004 	strb.w	r2, [sp, #4]
   161d8:	f88d 3006 	strb.w	r3, [sp, #6]
   161dc:	9a01      	ldr	r2, [sp, #4]
   161de:	9217      	str	r2, [sp, #92]	; 0x5c
   161e0:	461a      	mov	r2, r3
   161e2:	f363 0200 	bfi	r2, r3, #0, #1
   161e6:	f363 0241 	bfi	r2, r3, #1, #1
   161ea:	f363 0282 	bfi	r2, r3, #2, #1
   161ee:	f363 02c5 	bfi	r2, r3, #3, #3
   161f2:	2101      	movs	r1, #1
   161f4:	f361 1288 	bfi	r2, r1, #6, #3
   161f8:	2108      	movs	r1, #8
   161fa:	f361 2252 	bfi	r2, r1, #9, #10
   161fe:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16202:	4949      	ldr	r1, [pc, #292]	; (16328 <mem_manage_fault+0x2bc>)
   16204:	a814      	add	r0, sp, #80	; 0x50
   16206:	f00d fea1 	bl	23f4c <z_log_msg2_finalize>
		uint32_t temp = SCB->MMFAR;
   1620a:	4b48      	ldr	r3, [pc, #288]	; (1632c <mem_manage_fault+0x2c0>)
   1620c:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   16210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16212:	f013 0f80 	tst.w	r3, #128	; 0x80
   16216:	d102      	bne.n	1621e <mem_manage_fault+0x1b2>
	uint32_t mmfar = -EINVAL;
   16218:	f06f 0815 	mvn.w	r8, #21
   1621c:	e760      	b.n	160e0 <mem_manage_fault+0x74>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   1621e:	4b47      	ldr	r3, [pc, #284]	; (1633c <mem_manage_fault+0x2d0>)
   16220:	931e      	str	r3, [sp, #120]	; 0x78
   16222:	f8cd 807c 	str.w	r8, [sp, #124]	; 0x7c
   16226:	2300      	movs	r3, #0
   16228:	f8ad 3005 	strh.w	r3, [sp, #5]
   1622c:	f88d 3007 	strb.w	r3, [sp, #7]
   16230:	2203      	movs	r2, #3
   16232:	f88d 2004 	strb.w	r2, [sp, #4]
   16236:	f88d 3006 	strb.w	r3, [sp, #6]
   1623a:	9a01      	ldr	r2, [sp, #4]
   1623c:	921d      	str	r2, [sp, #116]	; 0x74
   1623e:	461a      	mov	r2, r3
   16240:	f363 0200 	bfi	r2, r3, #0, #1
   16244:	f363 0241 	bfi	r2, r3, #1, #1
   16248:	f363 0282 	bfi	r2, r3, #2, #1
   1624c:	f363 02c5 	bfi	r2, r3, #3, #3
   16250:	2101      	movs	r1, #1
   16252:	f361 1288 	bfi	r2, r1, #6, #3
   16256:	210c      	movs	r1, #12
   16258:	f361 2252 	bfi	r2, r1, #9, #10
   1625c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16260:	4931      	ldr	r1, [pc, #196]	; (16328 <mem_manage_fault+0x2bc>)
   16262:	a81a      	add	r0, sp, #104	; 0x68
   16264:	f00d fe72 	bl	23f4c <z_log_msg2_finalize>
			if (from_hard_fault != 0) {
   16268:	2f00      	cmp	r7, #0
   1626a:	f43f af39 	beq.w	160e0 <mem_manage_fault+0x74>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1626e:	4a2f      	ldr	r2, [pc, #188]	; (1632c <mem_manage_fault+0x2c0>)
   16270:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16276:	6293      	str	r3, [r2, #40]	; 0x28
   16278:	e732      	b.n	160e0 <mem_manage_fault+0x74>
		PR_FAULT_INFO("  Instruction Access Violation");
   1627a:	4b31      	ldr	r3, [pc, #196]	; (16340 <mem_manage_fault+0x2d4>)
   1627c:	9324      	str	r3, [sp, #144]	; 0x90
   1627e:	2300      	movs	r3, #0
   16280:	f8ad 3005 	strh.w	r3, [sp, #5]
   16284:	f88d 3007 	strb.w	r3, [sp, #7]
   16288:	2202      	movs	r2, #2
   1628a:	f88d 2004 	strb.w	r2, [sp, #4]
   1628e:	f88d 3006 	strb.w	r3, [sp, #6]
   16292:	9a01      	ldr	r2, [sp, #4]
   16294:	9223      	str	r2, [sp, #140]	; 0x8c
   16296:	461a      	mov	r2, r3
   16298:	f363 0200 	bfi	r2, r3, #0, #1
   1629c:	f363 0241 	bfi	r2, r3, #1, #1
   162a0:	f363 0282 	bfi	r2, r3, #2, #1
   162a4:	f363 02c5 	bfi	r2, r3, #3, #3
   162a8:	2101      	movs	r1, #1
   162aa:	f361 1288 	bfi	r2, r1, #6, #3
   162ae:	2108      	movs	r1, #8
   162b0:	f361 2252 	bfi	r2, r1, #9, #10
   162b4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   162b8:	491b      	ldr	r1, [pc, #108]	; (16328 <mem_manage_fault+0x2bc>)
   162ba:	a820      	add	r0, sp, #128	; 0x80
   162bc:	f00d fe46 	bl	23f4c <z_log_msg2_finalize>
   162c0:	e714      	b.n	160ec <mem_manage_fault+0x80>
		PR_FAULT_INFO(
   162c2:	4b20      	ldr	r3, [pc, #128]	; (16344 <mem_manage_fault+0x2d8>)
   162c4:	932a      	str	r3, [sp, #168]	; 0xa8
   162c6:	2300      	movs	r3, #0
   162c8:	f8ad 3005 	strh.w	r3, [sp, #5]
   162cc:	f88d 3007 	strb.w	r3, [sp, #7]
   162d0:	2202      	movs	r2, #2
   162d2:	f88d 2004 	strb.w	r2, [sp, #4]
   162d6:	f88d 3006 	strb.w	r3, [sp, #6]
   162da:	9a01      	ldr	r2, [sp, #4]
   162dc:	9229      	str	r2, [sp, #164]	; 0xa4
   162de:	461a      	mov	r2, r3
   162e0:	f363 0200 	bfi	r2, r3, #0, #1
   162e4:	f363 0241 	bfi	r2, r3, #1, #1
   162e8:	f363 0282 	bfi	r2, r3, #2, #1
   162ec:	f363 02c5 	bfi	r2, r3, #3, #3
   162f0:	2101      	movs	r1, #1
   162f2:	f361 1288 	bfi	r2, r1, #6, #3
   162f6:	2108      	movs	r1, #8
   162f8:	f361 2252 	bfi	r2, r1, #9, #10
   162fc:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16300:	4909      	ldr	r1, [pc, #36]	; (16328 <mem_manage_fault+0x2bc>)
   16302:	a826      	add	r0, sp, #152	; 0x98
   16304:	f00d fe22 	bl	23f4c <z_log_msg2_finalize>
   16308:	e6f6      	b.n	160f8 <mem_manage_fault+0x8c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   1630a:	4629      	mov	r1, r5
   1630c:	4640      	mov	r0, r8
   1630e:	f7ff fb3b 	bl	15988 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   16312:	4604      	mov	r4, r0
   16314:	2800      	cmp	r0, #0
   16316:	f43f aeff 	beq.w	16118 <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1631a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1631e:	2402      	movs	r4, #2
   16320:	e6fa      	b.n	16118 <mem_manage_fault+0xac>
   16322:	bf00      	nop
   16324:	00029320 	.word	0x00029320
   16328:	0002890c 	.word	0x0002890c
   1632c:	e000ed00 	.word	0xe000ed00
   16330:	00029338 	.word	0x00029338
   16334:	00029130 	.word	0x00029130
   16338:	0002936c 	.word	0x0002936c
   1633c:	00029384 	.word	0x00029384
   16340:	0002939c 	.word	0x0002939c
   16344:	000291ac 	.word	0x000291ac

00016348 <hard_fault>:
{
   16348:	b5f0      	push	{r4, r5, r6, r7, lr}
   1634a:	b0a1      	sub	sp, #132	; 0x84
   1634c:	4607      	mov	r7, r0
   1634e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
   16350:	4b77      	ldr	r3, [pc, #476]	; (16530 <hard_fault+0x1e8>)
   16352:	9306      	str	r3, [sp, #24]
   16354:	2400      	movs	r4, #0
   16356:	f8ad 4005 	strh.w	r4, [sp, #5]
   1635a:	f88d 4007 	strb.w	r4, [sp, #7]
   1635e:	2302      	movs	r3, #2
   16360:	f88d 3004 	strb.w	r3, [sp, #4]
   16364:	f88d 4006 	strb.w	r4, [sp, #6]
   16368:	9b01      	ldr	r3, [sp, #4]
   1636a:	9305      	str	r3, [sp, #20]
   1636c:	4622      	mov	r2, r4
   1636e:	f364 0200 	bfi	r2, r4, #0, #1
   16372:	f364 0241 	bfi	r2, r4, #1, #1
   16376:	f364 0282 	bfi	r2, r4, #2, #1
   1637a:	f364 02c5 	bfi	r2, r4, #3, #3
   1637e:	2301      	movs	r3, #1
   16380:	f363 1288 	bfi	r2, r3, #6, #3
   16384:	2308      	movs	r3, #8
   16386:	f363 2252 	bfi	r2, r3, #9, #10
   1638a:	4623      	mov	r3, r4
   1638c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16390:	4968      	ldr	r1, [pc, #416]	; (16534 <hard_fault+0x1ec>)
   16392:	a802      	add	r0, sp, #8
   16394:	f00d fdda 	bl	23f4c <z_log_msg2_finalize>
	*recoverable = false;
   16398:	7034      	strb	r4, [r6, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1639a:	4b67      	ldr	r3, [pc, #412]	; (16538 <hard_fault+0x1f0>)
   1639c:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1639e:	f015 0502 	ands.w	r5, r5, #2
   163a2:	d10a      	bne.n	163ba <hard_fault+0x72>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   163a4:	4b64      	ldr	r3, [pc, #400]	; (16538 <hard_fault+0x1f0>)
   163a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   163a8:	2b00      	cmp	r3, #0
   163aa:	db2b      	blt.n	16404 <hard_fault+0xbc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   163ac:	4b62      	ldr	r3, [pc, #392]	; (16538 <hard_fault+0x1f0>)
   163ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   163b0:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   163b4:	d14b      	bne.n	1644e <hard_fault+0x106>
}
   163b6:	b021      	add	sp, #132	; 0x84
   163b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
   163ba:	4b60      	ldr	r3, [pc, #384]	; (1653c <hard_fault+0x1f4>)
   163bc:	931e      	str	r3, [sp, #120]	; 0x78
   163be:	f8ad 4005 	strh.w	r4, [sp, #5]
   163c2:	f88d 4007 	strb.w	r4, [sp, #7]
   163c6:	2302      	movs	r3, #2
   163c8:	f88d 3004 	strb.w	r3, [sp, #4]
   163cc:	f88d 4006 	strb.w	r4, [sp, #6]
   163d0:	9b01      	ldr	r3, [sp, #4]
   163d2:	931d      	str	r3, [sp, #116]	; 0x74
   163d4:	4622      	mov	r2, r4
   163d6:	f364 0200 	bfi	r2, r4, #0, #1
   163da:	f364 0241 	bfi	r2, r4, #1, #1
   163de:	f364 0282 	bfi	r2, r4, #2, #1
   163e2:	f364 02c5 	bfi	r2, r4, #3, #3
   163e6:	2301      	movs	r3, #1
   163e8:	f363 1288 	bfi	r2, r3, #6, #3
   163ec:	2308      	movs	r3, #8
   163ee:	f363 2252 	bfi	r2, r3, #9, #10
   163f2:	4623      	mov	r3, r4
   163f4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   163f8:	494e      	ldr	r1, [pc, #312]	; (16534 <hard_fault+0x1ec>)
   163fa:	a81a      	add	r0, sp, #104	; 0x68
   163fc:	f00d fda6 	bl	23f4c <z_log_msg2_finalize>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   16400:	4620      	mov	r0, r4
   16402:	e7d8      	b.n	163b6 <hard_fault+0x6e>
		PR_EXC("  Debug event");
   16404:	4b4e      	ldr	r3, [pc, #312]	; (16540 <hard_fault+0x1f8>)
   16406:	9318      	str	r3, [sp, #96]	; 0x60
   16408:	2300      	movs	r3, #0
   1640a:	f8ad 3005 	strh.w	r3, [sp, #5]
   1640e:	f88d 3007 	strb.w	r3, [sp, #7]
   16412:	2202      	movs	r2, #2
   16414:	f88d 2004 	strb.w	r2, [sp, #4]
   16418:	f88d 3006 	strb.w	r3, [sp, #6]
   1641c:	9a01      	ldr	r2, [sp, #4]
   1641e:	9217      	str	r2, [sp, #92]	; 0x5c
   16420:	461a      	mov	r2, r3
   16422:	f363 0200 	bfi	r2, r3, #0, #1
   16426:	f363 0241 	bfi	r2, r3, #1, #1
   1642a:	f363 0282 	bfi	r2, r3, #2, #1
   1642e:	f363 02c5 	bfi	r2, r3, #3, #3
   16432:	2101      	movs	r1, #1
   16434:	f361 1288 	bfi	r2, r1, #6, #3
   16438:	2108      	movs	r1, #8
   1643a:	f361 2252 	bfi	r2, r1, #9, #10
   1643e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16442:	493c      	ldr	r1, [pc, #240]	; (16534 <hard_fault+0x1ec>)
   16444:	a814      	add	r0, sp, #80	; 0x50
   16446:	f00d fd81 	bl	23f4c <z_log_msg2_finalize>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1644a:	4628      	mov	r0, r5
   1644c:	e7b3      	b.n	163b6 <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
   1644e:	4b3d      	ldr	r3, [pc, #244]	; (16544 <hard_fault+0x1fc>)
   16450:	930c      	str	r3, [sp, #48]	; 0x30
   16452:	2300      	movs	r3, #0
   16454:	f8ad 3005 	strh.w	r3, [sp, #5]
   16458:	f88d 3007 	strb.w	r3, [sp, #7]
   1645c:	2202      	movs	r2, #2
   1645e:	f88d 2004 	strb.w	r2, [sp, #4]
   16462:	f88d 3006 	strb.w	r3, [sp, #6]
   16466:	9a01      	ldr	r2, [sp, #4]
   16468:	920b      	str	r2, [sp, #44]	; 0x2c
   1646a:	461a      	mov	r2, r3
   1646c:	f363 0200 	bfi	r2, r3, #0, #1
   16470:	f363 0241 	bfi	r2, r3, #1, #1
   16474:	f363 0282 	bfi	r2, r3, #2, #1
   16478:	f363 02c5 	bfi	r2, r3, #3, #3
   1647c:	2101      	movs	r1, #1
   1647e:	f361 1288 	bfi	r2, r1, #6, #3
   16482:	2108      	movs	r1, #8
   16484:	f361 2252 	bfi	r2, r1, #9, #10
   16488:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1648c:	4929      	ldr	r1, [pc, #164]	; (16534 <hard_fault+0x1ec>)
   1648e:	a808      	add	r0, sp, #32
   16490:	f00d fd5c 	bl	23f4c <z_log_msg2_finalize>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   16494:	69bb      	ldr	r3, [r7, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   16496:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1649a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1649e:	429a      	cmp	r2, r3
   164a0:	d00e      	beq.n	164c0 <hard_fault+0x178>
		} else if (SCB_MMFSR != 0) {
   164a2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   164a6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   164aa:	781b      	ldrb	r3, [r3, #0]
   164ac:	bb7b      	cbnz	r3, 1650e <hard_fault+0x1c6>
		} else if (SCB_BFSR != 0) {
   164ae:	4b26      	ldr	r3, [pc, #152]	; (16548 <hard_fault+0x200>)
   164b0:	781b      	ldrb	r3, [r3, #0]
   164b2:	bb93      	cbnz	r3, 1651a <hard_fault+0x1d2>
		} else if (SCB_UFSR != 0) {
   164b4:	4b25      	ldr	r3, [pc, #148]	; (1654c <hard_fault+0x204>)
   164b6:	881b      	ldrh	r3, [r3, #0]
   164b8:	b29b      	uxth	r3, r3
   164ba:	bba3      	cbnz	r3, 16526 <hard_fault+0x1de>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   164bc:	4628      	mov	r0, r5
	return reason;
   164be:	e77a      	b.n	163b6 <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   164c0:	4b23      	ldr	r3, [pc, #140]	; (16550 <hard_fault+0x208>)
   164c2:	9312      	str	r3, [sp, #72]	; 0x48
   164c4:	683b      	ldr	r3, [r7, #0]
   164c6:	9313      	str	r3, [sp, #76]	; 0x4c
   164c8:	2300      	movs	r3, #0
   164ca:	f8ad 3005 	strh.w	r3, [sp, #5]
   164ce:	f88d 3007 	strb.w	r3, [sp, #7]
   164d2:	2203      	movs	r2, #3
   164d4:	f88d 2004 	strb.w	r2, [sp, #4]
   164d8:	f88d 3006 	strb.w	r3, [sp, #6]
   164dc:	9a01      	ldr	r2, [sp, #4]
   164de:	9211      	str	r2, [sp, #68]	; 0x44
   164e0:	461a      	mov	r2, r3
   164e2:	f363 0200 	bfi	r2, r3, #0, #1
   164e6:	f363 0241 	bfi	r2, r3, #1, #1
   164ea:	f363 0282 	bfi	r2, r3, #2, #1
   164ee:	f363 02c5 	bfi	r2, r3, #3, #3
   164f2:	2101      	movs	r1, #1
   164f4:	f361 1288 	bfi	r2, r1, #6, #3
   164f8:	210c      	movs	r1, #12
   164fa:	f361 2252 	bfi	r2, r1, #9, #10
   164fe:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16502:	490c      	ldr	r1, [pc, #48]	; (16534 <hard_fault+0x1ec>)
   16504:	a80e      	add	r0, sp, #56	; 0x38
   16506:	f00d fd21 	bl	23f4c <z_log_msg2_finalize>
			reason = esf->basic.r0;
   1650a:	6838      	ldr	r0, [r7, #0]
   1650c:	e753      	b.n	163b6 <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
   1650e:	4632      	mov	r2, r6
   16510:	2101      	movs	r1, #1
   16512:	4638      	mov	r0, r7
   16514:	f7ff fdaa 	bl	1606c <mem_manage_fault>
   16518:	e74d      	b.n	163b6 <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
   1651a:	4632      	mov	r2, r6
   1651c:	2101      	movs	r1, #1
   1651e:	4638      	mov	r0, r7
   16520:	f7ff faa6 	bl	15a70 <bus_fault>
   16524:	e747      	b.n	163b6 <hard_fault+0x6e>
			reason = usage_fault(esf);
   16526:	4638      	mov	r0, r7
   16528:	f7ff fc18 	bl	15d5c <usage_fault>
   1652c:	e743      	b.n	163b6 <hard_fault+0x6e>
   1652e:	bf00      	nop
   16530:	000293bc 	.word	0x000293bc
   16534:	0002890c 	.word	0x0002890c
   16538:	e000ed00 	.word	0xe000ed00
   1653c:	000293d4 	.word	0x000293d4
   16540:	000293f8 	.word	0x000293f8
   16544:	00029408 	.word	0x00029408
   16548:	e000ed29 	.word	0xe000ed29
   1654c:	e000ed2a 	.word	0xe000ed2a
   16550:	00029428 	.word	0x00029428

00016554 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   16554:	b5f0      	push	{r4, r5, r6, r7, lr}
   16556:	b091      	sub	sp, #68	; 0x44
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16558:	4b37      	ldr	r3, [pc, #220]	; (16638 <z_arm_fault+0xe4>)
   1655a:	685d      	ldr	r5, [r3, #4]
   1655c:	f3c5 0508 	ubfx	r5, r5, #0, #9
   16560:	2300      	movs	r3, #0
   16562:	f383 8811 	msr	BASEPRI, r3
   16566:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1656a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1656e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   16572:	d13d      	bne.n	165f0 <z_arm_fault+0x9c>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   16574:	f002 030c 	and.w	r3, r2, #12
   16578:	2b08      	cmp	r3, #8
   1657a:	d010      	beq.n	1659e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1657c:	f012 0f08 	tst.w	r2, #8
   16580:	d033      	beq.n	165ea <z_arm_fault+0x96>
			ptr_esf =  (z_arch_esf_t *)psp;
   16582:	460c      	mov	r4, r1
	*nested_exc = false;
   16584:	2700      	movs	r7, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   16586:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1658a:	4629      	mov	r1, r5
   1658c:	4620      	mov	r0, r4
   1658e:	f00d fe92 	bl	242b6 <fault_handle>
   16592:	4606      	mov	r6, r0
	if (recoverable) {
   16594:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   16598:	b36b      	cbz	r3, 165f6 <z_arm_fault+0xa2>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   1659a:	b011      	add	sp, #68	; 0x44
   1659c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   1659e:	4b27      	ldr	r3, [pc, #156]	; (1663c <z_arm_fault+0xe8>)
   165a0:	930e      	str	r3, [sp, #56]	; 0x38
   165a2:	2400      	movs	r4, #0
   165a4:	f8ad 4001 	strh.w	r4, [sp, #1]
   165a8:	f88d 4003 	strb.w	r4, [sp, #3]
   165ac:	2302      	movs	r3, #2
   165ae:	f88d 3000 	strb.w	r3, [sp]
   165b2:	f88d 4002 	strb.w	r4, [sp, #2]
   165b6:	9b00      	ldr	r3, [sp, #0]
   165b8:	930d      	str	r3, [sp, #52]	; 0x34
   165ba:	4622      	mov	r2, r4
   165bc:	f364 0200 	bfi	r2, r4, #0, #1
   165c0:	f364 0241 	bfi	r2, r4, #1, #1
   165c4:	f364 0282 	bfi	r2, r4, #2, #1
   165c8:	f364 02c5 	bfi	r2, r4, #3, #3
   165cc:	2301      	movs	r3, #1
   165ce:	f363 1288 	bfi	r2, r3, #6, #3
   165d2:	2308      	movs	r3, #8
   165d4:	f363 2252 	bfi	r2, r3, #9, #10
   165d8:	4623      	mov	r3, r4
   165da:	f3c2 0212 	ubfx	r2, r2, #0, #19
   165de:	4918      	ldr	r1, [pc, #96]	; (16640 <z_arm_fault+0xec>)
   165e0:	a80a      	add	r0, sp, #40	; 0x28
   165e2:	f00d fcb3 	bl	23f4c <z_log_msg2_finalize>
	*nested_exc = false;
   165e6:	4627      	mov	r7, r4
		return NULL;
   165e8:	e7cd      	b.n	16586 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   165ea:	4604      	mov	r4, r0
			*nested_exc = true;
   165ec:	2701      	movs	r7, #1
   165ee:	e7ca      	b.n	16586 <z_arm_fault+0x32>
	*nested_exc = false;
   165f0:	2700      	movs	r7, #0
		return NULL;
   165f2:	463c      	mov	r4, r7
   165f4:	e7c7      	b.n	16586 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   165f6:	ad01      	add	r5, sp, #4
   165f8:	6820      	ldr	r0, [r4, #0]
   165fa:	6861      	ldr	r1, [r4, #4]
   165fc:	68a2      	ldr	r2, [r4, #8]
   165fe:	68e3      	ldr	r3, [r4, #12]
   16600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16602:	6920      	ldr	r0, [r4, #16]
   16604:	6961      	ldr	r1, [r4, #20]
   16606:	69a2      	ldr	r2, [r4, #24]
   16608:	69e3      	ldr	r3, [r4, #28]
   1660a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	if (nested_exc) {
   1660c:	b14f      	cbz	r7, 16622 <z_arm_fault+0xce>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1660e:	9b08      	ldr	r3, [sp, #32]
   16610:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16614:	b95a      	cbnz	r2, 1662e <z_arm_fault+0xda>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   16616:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1661a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1661e:	9308      	str	r3, [sp, #32]
   16620:	e005      	b.n	1662e <z_arm_fault+0xda>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16622:	9b08      	ldr	r3, [sp, #32]
   16624:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16628:	f023 0301 	bic.w	r3, r3, #1
   1662c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1662e:	a901      	add	r1, sp, #4
   16630:	4630      	mov	r0, r6
   16632:	f00d fe13 	bl	2425c <z_arm_fatal_error>
   16636:	e7b0      	b.n	1659a <z_arm_fault+0x46>
   16638:	e000ed00 	.word	0xe000ed00
   1663c:	00029444 	.word	0x00029444
   16640:	0002890c 	.word	0x0002890c

00016644 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   16644:	4a02      	ldr	r2, [pc, #8]	; (16650 <z_arm_fault_init+0xc>)
   16646:	6953      	ldr	r3, [r2, #20]
   16648:	f043 0310 	orr.w	r3, r3, #16
   1664c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   1664e:	4770      	bx	lr
   16650:	e000ed00 	.word	0xe000ed00

00016654 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   16654:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   16658:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   1665c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   1665e:	4672      	mov	r2, lr
	bl z_arm_fault
   16660:	f7ff ff78 	bl	16554 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   16664:	bd01      	pop	{r0, pc}
   16666:	bf00      	nop

00016668 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   16668:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1666a:	e006      	b.n	1667a <z_arm_interrupt_init+0x12>
   1666c:	f002 010f 	and.w	r1, r2, #15
   16670:	4b09      	ldr	r3, [pc, #36]	; (16698 <z_arm_interrupt_init+0x30>)
   16672:	440b      	add	r3, r1
   16674:	2140      	movs	r1, #64	; 0x40
   16676:	7619      	strb	r1, [r3, #24]
   16678:	3201      	adds	r2, #1
   1667a:	2a2f      	cmp	r2, #47	; 0x2f
   1667c:	dc0a      	bgt.n	16694 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   1667e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   16680:	2b00      	cmp	r3, #0
   16682:	dbf3      	blt.n	1666c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16684:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   16688:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1668c:	2140      	movs	r1, #64	; 0x40
   1668e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   16692:	e7f1      	b.n	16678 <z_arm_interrupt_init+0x10>
	}
}
   16694:	4770      	bx	lr
   16696:	bf00      	nop
   16698:	e000ecfc 	.word	0xe000ecfc

0001669c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1669c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1669e:	f380 8814 	msr	CONTROL, r0
    isb
   166a2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   166a6:	f011 ff57 	bl	28558 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   166aa:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   166ac:	490d      	ldr	r1, [pc, #52]	; (166e4 <__start+0x48>)
    str r0, [r1]
   166ae:	6008      	str	r0, [r1, #0]
    dsb
   166b0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   166b4:	480c      	ldr	r0, [pc, #48]	; (166e8 <__start+0x4c>)
    msr msp, r0
   166b6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   166ba:	f000 f829 	bl	16710 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   166be:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   166c0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   166c4:	4809      	ldr	r0, [pc, #36]	; (166ec <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   166c6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   166ca:	1840      	adds	r0, r0, r1
    msr PSP, r0
   166cc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   166d0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   166d4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   166d6:	4308      	orrs	r0, r1
    msr CONTROL, r0
   166d8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   166dc:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   166e0:	f7ff f8be 	bl	15860 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   166e4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   166e8:	20006b40 	.word	0x20006b40
    ldr r0, =z_interrupt_stacks
   166ec:	20006cc0 	.word	0x20006cc0

000166f0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   166f0:	4b06      	ldr	r3, [pc, #24]	; (1670c <z_arm_clear_arm_mpu_config+0x1c>)
   166f2:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   166f4:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   166f8:	2300      	movs	r3, #0
   166fa:	4283      	cmp	r3, r0
   166fc:	da05      	bge.n	1670a <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   166fe:	4a03      	ldr	r2, [pc, #12]	; (1670c <z_arm_clear_arm_mpu_config+0x1c>)
   16700:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   16702:	2100      	movs	r1, #0
   16704:	6111      	str	r1, [r2, #16]
   16706:	3301      	adds	r3, #1
   16708:	e7f7      	b.n	166fa <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   1670a:	4770      	bx	lr
   1670c:	e000ed90 	.word	0xe000ed90

00016710 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16710:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   16712:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16714:	2400      	movs	r4, #0
   16716:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1671a:	f7ff ffe9 	bl	166f0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   1671e:	4623      	mov	r3, r4
   16720:	e008      	b.n	16734 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   16722:	f103 0120 	add.w	r1, r3, #32
   16726:	4a0e      	ldr	r2, [pc, #56]	; (16760 <z_arm_init_arch_hw_at_boot+0x50>)
   16728:	f04f 30ff 	mov.w	r0, #4294967295
   1672c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   16730:	3301      	adds	r3, #1
   16732:	b2db      	uxtb	r3, r3
   16734:	2b07      	cmp	r3, #7
   16736:	d9f4      	bls.n	16722 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   16738:	2300      	movs	r3, #0
   1673a:	e008      	b.n	1674e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   1673c:	f103 0160 	add.w	r1, r3, #96	; 0x60
   16740:	4a07      	ldr	r2, [pc, #28]	; (16760 <z_arm_init_arch_hw_at_boot+0x50>)
   16742:	f04f 30ff 	mov.w	r0, #4294967295
   16746:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1674a:	3301      	adds	r3, #1
   1674c:	b2db      	uxtb	r3, r3
   1674e:	2b07      	cmp	r3, #7
   16750:	d9f4      	bls.n	1673c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   16752:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   16754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16758:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   1675c:	bd10      	pop	{r4, pc}
   1675e:	bf00      	nop
   16760:	e000e100 	.word	0xe000e100

00016764 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   16764:	b508      	push	{r3, lr}
	if (_current == thread) {
   16766:	4b08      	ldr	r3, [pc, #32]	; (16788 <z_impl_k_thread_abort+0x24>)
   16768:	689b      	ldr	r3, [r3, #8]
   1676a:	4283      	cmp	r3, r0
   1676c:	d002      	beq.n	16774 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   1676e:	f00b fa8f 	bl	21c90 <z_thread_abort>
}
   16772:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   16774:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16778:	2b00      	cmp	r3, #0
   1677a:	d0f8      	beq.n	1676e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1677c:	4a03      	ldr	r2, [pc, #12]	; (1678c <z_impl_k_thread_abort+0x28>)
   1677e:	6853      	ldr	r3, [r2, #4]
   16780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16784:	6053      	str	r3, [r2, #4]
   16786:	e7f2      	b.n	1676e <z_impl_k_thread_abort+0xa>
   16788:	20003c2c 	.word	0x20003c2c
   1678c:	e000ed00 	.word	0xe000ed00

00016790 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   16790:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   16792:	4b03      	ldr	r3, [pc, #12]	; (167a0 <z_arm_configure_static_mpu_regions+0x10>)
   16794:	4a03      	ldr	r2, [pc, #12]	; (167a4 <z_arm_configure_static_mpu_regions+0x14>)
   16796:	2101      	movs	r1, #1
   16798:	4803      	ldr	r0, [pc, #12]	; (167a8 <z_arm_configure_static_mpu_regions+0x18>)
   1679a:	f00d fde1 	bl	24360 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   1679e:	bd08      	pop	{r3, pc}
   167a0:	20020000 	.word	0x20020000
   167a4:	20000000 	.word	0x20000000
   167a8:	00029474 	.word	0x00029474

000167ac <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   167ac:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   167ae:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   167b2:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   167b4:	4804      	ldr	r0, [pc, #16]	; (167c8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   167b6:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   167b8:	2320      	movs	r3, #32
   167ba:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   167bc:	4b03      	ldr	r3, [pc, #12]	; (167cc <z_arm_configure_dynamic_mpu_regions+0x20>)
   167be:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   167c0:	2101      	movs	r1, #1
   167c2:	f00d fdd1 	bl	24368 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   167c6:	bd08      	pop	{r3, pc}
   167c8:	200029d0 	.word	0x200029d0
   167cc:	150b0000 	.word	0x150b0000

000167d0 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   167d0:	4a06      	ldr	r2, [pc, #24]	; (167ec <region_init+0x1c>)
   167d2:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   167d4:	680b      	ldr	r3, [r1, #0]
   167d6:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   167da:	4303      	orrs	r3, r0
   167dc:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   167e0:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   167e2:	688b      	ldr	r3, [r1, #8]
   167e4:	f043 0301 	orr.w	r3, r3, #1
   167e8:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   167ea:	4770      	bx	lr
   167ec:	e000ed90 	.word	0xe000ed90

000167f0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   167f0:	b510      	push	{r4, lr}
   167f2:	b088      	sub	sp, #32
   167f4:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   167f6:	2807      	cmp	r0, #7
   167f8:	d804      	bhi.n	16804 <region_allocate_and_init+0x14>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   167fa:	f7ff ffe9 	bl	167d0 <region_init>

	return index;
   167fe:	4620      	mov	r0, r4
}
   16800:	b008      	add	sp, #32
   16802:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16804:	4b13      	ldr	r3, [pc, #76]	; (16854 <region_allocate_and_init+0x64>)
   16806:	9306      	str	r3, [sp, #24]
   16808:	9007      	str	r0, [sp, #28]
   1680a:	2300      	movs	r3, #0
   1680c:	f8ad 3005 	strh.w	r3, [sp, #5]
   16810:	f88d 3007 	strb.w	r3, [sp, #7]
   16814:	2203      	movs	r2, #3
   16816:	f88d 2004 	strb.w	r2, [sp, #4]
   1681a:	f88d 3006 	strb.w	r3, [sp, #6]
   1681e:	9a01      	ldr	r2, [sp, #4]
   16820:	9205      	str	r2, [sp, #20]
   16822:	461a      	mov	r2, r3
   16824:	f363 0200 	bfi	r2, r3, #0, #1
   16828:	f363 0241 	bfi	r2, r3, #1, #1
   1682c:	f363 0282 	bfi	r2, r3, #2, #1
   16830:	f363 02c5 	bfi	r2, r3, #3, #3
   16834:	2101      	movs	r1, #1
   16836:	f361 1288 	bfi	r2, r1, #6, #3
   1683a:	210c      	movs	r1, #12
   1683c:	f361 2252 	bfi	r2, r1, #9, #10
   16840:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16844:	4904      	ldr	r1, [pc, #16]	; (16858 <region_allocate_and_init+0x68>)
   16846:	a802      	add	r0, sp, #8
   16848:	f00d fb80 	bl	23f4c <z_log_msg2_finalize>
		return -EINVAL;
   1684c:	f06f 0015 	mvn.w	r0, #21
   16850:	e7d6      	b.n	16800 <region_allocate_and_init+0x10>
   16852:	bf00      	nop
   16854:	00029480 	.word	0x00029480
   16858:	000288fc 	.word	0x000288fc

0001685c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   1685c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16860:	b089      	sub	sp, #36	; 0x24
   16862:	4680      	mov	r8, r0
   16864:	460f      	mov	r7, r1
   16866:	4699      	mov	r9, r3
	int i;
	int reg_index = start_reg_index;
   16868:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   1686a:	2500      	movs	r5, #0
   1686c:	e009      	b.n	16882 <mpu_configure_regions+0x26>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1686e:	4621      	mov	r1, r4
   16870:	b2f0      	uxtb	r0, r6
   16872:	f00d fd56 	bl	24322 <mpu_configure_region>
   16876:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   16878:	f110 0f16 	cmn.w	r0, #22
   1687c:	d038      	beq.n	168f0 <mpu_configure_regions+0x94>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   1687e:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   16880:	3501      	adds	r5, #1
   16882:	42bd      	cmp	r5, r7
   16884:	da34      	bge.n	168f0 <mpu_configure_regions+0x94>
		if (regions[i].size == 0U) {
   16886:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   1688a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
   1688e:	6862      	ldr	r2, [r4, #4]
   16890:	2a00      	cmp	r2, #0
   16892:	d0f5      	beq.n	16880 <mpu_configure_regions+0x24>
		if (do_sanity_check &&
   16894:	f1b9 0f00 	cmp.w	r9, #0
   16898:	d0e9      	beq.n	1686e <mpu_configure_regions+0x12>
				(!mpu_partition_is_valid(&regions[i]))) {
   1689a:	4620      	mov	r0, r4
   1689c:	f00d fd30 	bl	24300 <mpu_partition_is_valid>
		if (do_sanity_check &&
   168a0:	2800      	cmp	r0, #0
   168a2:	d1e4      	bne.n	1686e <mpu_configure_regions+0x12>
			LOG_ERR("Partition %u: sanity check failed.", i);
   168a4:	4b14      	ldr	r3, [pc, #80]	; (168f8 <mpu_configure_regions+0x9c>)
   168a6:	9306      	str	r3, [sp, #24]
   168a8:	9507      	str	r5, [sp, #28]
   168aa:	2300      	movs	r3, #0
   168ac:	f8ad 3005 	strh.w	r3, [sp, #5]
   168b0:	f88d 3007 	strb.w	r3, [sp, #7]
   168b4:	2203      	movs	r2, #3
   168b6:	f88d 2004 	strb.w	r2, [sp, #4]
   168ba:	f88d 3006 	strb.w	r3, [sp, #6]
   168be:	9a01      	ldr	r2, [sp, #4]
   168c0:	9205      	str	r2, [sp, #20]
   168c2:	461a      	mov	r2, r3
   168c4:	f363 0200 	bfi	r2, r3, #0, #1
   168c8:	f363 0241 	bfi	r2, r3, #1, #1
   168cc:	f363 0282 	bfi	r2, r3, #2, #1
   168d0:	f363 02c5 	bfi	r2, r3, #3, #3
   168d4:	2101      	movs	r1, #1
   168d6:	f361 1288 	bfi	r2, r1, #6, #3
   168da:	210c      	movs	r1, #12
   168dc:	f361 2252 	bfi	r2, r1, #9, #10
   168e0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   168e4:	4905      	ldr	r1, [pc, #20]	; (168fc <mpu_configure_regions+0xa0>)
   168e6:	a802      	add	r0, sp, #8
   168e8:	f00d fb30 	bl	23f4c <z_log_msg2_finalize>
			return -EINVAL;
   168ec:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   168f0:	4630      	mov	r0, r6
   168f2:	b009      	add	sp, #36	; 0x24
   168f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   168f8:	000294a8 	.word	0x000294a8
   168fc:	000288fc 	.word	0x000288fc

00016900 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   16900:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   16902:	4c03      	ldr	r4, [pc, #12]	; (16910 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   16904:	2301      	movs	r3, #1
   16906:	7822      	ldrb	r2, [r4, #0]
   16908:	f7ff ffa8 	bl	1685c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1690c:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   1690e:	bd10      	pop	{r4, pc}
   16910:	20003c7a 	.word	0x20003c7a

00016914 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   16914:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   16916:	2300      	movs	r3, #0
   16918:	4a08      	ldr	r2, [pc, #32]	; (1693c <mpu_configure_dynamic_mpu_regions+0x28>)
   1691a:	7812      	ldrb	r2, [r2, #0]
   1691c:	f7ff ff9e 	bl	1685c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   16920:	f110 0f16 	cmn.w	r0, #22
   16924:	d008      	beq.n	16938 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   16926:	4603      	mov	r3, r0
   16928:	2b07      	cmp	r3, #7
   1692a:	dc05      	bgt.n	16938 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   1692c:	4a04      	ldr	r2, [pc, #16]	; (16940 <mpu_configure_dynamic_mpu_regions+0x2c>)
   1692e:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   16930:	2100      	movs	r1, #0
   16932:	6111      	str	r1, [r2, #16]
   16934:	3301      	adds	r3, #1
   16936:	e7f7      	b.n	16928 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   16938:	bd08      	pop	{r3, pc}
   1693a:	bf00      	nop
   1693c:	20003c7a 	.word	0x20003c7a
   16940:	e000ed90 	.word	0xe000ed90

00016944 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16944:	4b03      	ldr	r3, [pc, #12]	; (16954 <arm_core_mpu_enable+0x10>)
   16946:	2205      	movs	r2, #5
   16948:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   1694a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1694e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16952:	4770      	bx	lr
   16954:	e000ed90 	.word	0xe000ed90

00016958 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16958:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   1695c:	4b01      	ldr	r3, [pc, #4]	; (16964 <arm_core_mpu_disable+0xc>)
   1695e:	2200      	movs	r2, #0
   16960:	605a      	str	r2, [r3, #4]
}
   16962:	4770      	bx	lr
   16964:	e000ed90 	.word	0xe000ed90

00016968 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   16968:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1696a:	4b0e      	ldr	r3, [pc, #56]	; (169a4 <z_arm_mpu_init+0x3c>)
   1696c:	681d      	ldr	r5, [r3, #0]
   1696e:	2d08      	cmp	r5, #8
   16970:	d815      	bhi.n	1699e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   16972:	f7ff fff1 	bl	16958 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16976:	2400      	movs	r4, #0
   16978:	42a5      	cmp	r5, r4
   1697a:	d90a      	bls.n	16992 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   1697c:	4b09      	ldr	r3, [pc, #36]	; (169a4 <z_arm_mpu_init+0x3c>)
   1697e:	6859      	ldr	r1, [r3, #4]
   16980:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16984:	0093      	lsls	r3, r2, #2
   16986:	4419      	add	r1, r3
   16988:	4620      	mov	r0, r4
   1698a:	f7ff ff21 	bl	167d0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1698e:	3401      	adds	r4, #1
   16990:	e7f2      	b.n	16978 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   16992:	4b05      	ldr	r3, [pc, #20]	; (169a8 <z_arm_mpu_init+0x40>)
   16994:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   16996:	f7ff ffd5 	bl	16944 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   1699a:	2000      	movs	r0, #0
}
   1699c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   1699e:	f04f 30ff 	mov.w	r0, #4294967295
   169a2:	e7fb      	b.n	1699c <z_arm_mpu_init+0x34>
   169a4:	000294fc 	.word	0x000294fc
   169a8:	20003c7a 	.word	0x20003c7a

000169ac <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   169ac:	4b01      	ldr	r3, [pc, #4]	; (169b4 <__stdout_hook_install+0x8>)
   169ae:	6018      	str	r0, [r3, #0]
}
   169b0:	4770      	bx	lr
   169b2:	bf00      	nop
   169b4:	20000594 	.word	0x20000594

000169b8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   169b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   169ba:	4605      	mov	r5, r0
   169bc:	460f      	mov	r7, r1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   169be:	2400      	movs	r4, #0
   169c0:	e004      	b.n	169cc <z_impl_zephyr_write_stdout+0x14>
		if (*(buf + i) == '\n') {
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
   169c2:	4b09      	ldr	r3, [pc, #36]	; (169e8 <z_impl_zephyr_write_stdout+0x30>)
   169c4:	681b      	ldr	r3, [r3, #0]
   169c6:	7830      	ldrb	r0, [r6, #0]
   169c8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   169ca:	3401      	adds	r4, #1
   169cc:	42bc      	cmp	r4, r7
   169ce:	da08      	bge.n	169e2 <z_impl_zephyr_write_stdout+0x2a>
		if (*(buf + i) == '\n') {
   169d0:	192e      	adds	r6, r5, r4
   169d2:	5d2b      	ldrb	r3, [r5, r4]
   169d4:	2b0a      	cmp	r3, #10
   169d6:	d1f4      	bne.n	169c2 <z_impl_zephyr_write_stdout+0xa>
			_stdout_hook('\r');
   169d8:	4b03      	ldr	r3, [pc, #12]	; (169e8 <z_impl_zephyr_write_stdout+0x30>)
   169da:	681b      	ldr	r3, [r3, #0]
   169dc:	200d      	movs	r0, #13
   169de:	4798      	blx	r3
   169e0:	e7ef      	b.n	169c2 <z_impl_zephyr_write_stdout+0xa>
	}
	return nbytes;
}
   169e2:	4638      	mov	r0, r7
   169e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   169e6:	bf00      	nop
   169e8:	20000594 	.word	0x20000594

000169ec <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
   169ec:	b508      	push	{r3, lr}
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
   169ee:	221d      	movs	r2, #29
   169f0:	4904      	ldr	r1, [pc, #16]	; (16a04 <__chk_fail+0x18>)
   169f2:	2002      	movs	r0, #2
   169f4:	f00d fcc1 	bl	2437a <_write>
	k_oops();
   169f8:	4040      	eors	r0, r0
   169fa:	f380 8811 	msr	BASEPRI, r0
   169fe:	f04f 0003 	mov.w	r0, #3
   16a02:	df02      	svc	2
	CODE_UNREACHABLE;
   16a04:	000294cc 	.word	0x000294cc

00016a08 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   16a08:	f04f 0340 	mov.w	r3, #64	; 0x40
   16a0c:	f3ef 8211 	mrs	r2, BASEPRI
   16a10:	f383 8812 	msr	BASEPRI_MAX, r3
   16a14:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16a18:	2301      	movs	r3, #1
   16a1a:	4906      	ldr	r1, [pc, #24]	; (16a34 <nordicsemi_nrf52_init+0x2c>)
   16a1c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16a20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   16a24:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   16a28:	f382 8811 	msr	BASEPRI, r2
   16a2c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16a30:	2000      	movs	r0, #0
   16a32:	4770      	bx	lr
   16a34:	4001e000 	.word	0x4001e000

00016a38 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16a38:	b130      	cbz	r0, 16a48 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   16a3a:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16a3c:	0180      	lsls	r0, r0, #6
   16a3e:	4b03      	ldr	r3, [pc, #12]	; (16a4c <arch_busy_wait+0x14>)
   16a40:	f043 0301 	orr.w	r3, r3, #1
   16a44:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   16a46:	bd08      	pop	{r3, pc}
   16a48:	4770      	bx	lr
   16a4a:	bf00      	nop
   16a4c:	00028a80 	.word	0x00028a80

00016a50 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16a50:	2940      	cmp	r1, #64	; 0x40
   16a52:	bf28      	it	cs
   16a54:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   16a56:	2300      	movs	r3, #0
   16a58:	428b      	cmp	r3, r1
   16a5a:	d217      	bcs.n	16a8c <bt_hex_real+0x3c>
{
   16a5c:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   16a5e:	5cc4      	ldrb	r4, [r0, r3]
   16a60:	0924      	lsrs	r4, r4, #4
   16a62:	005a      	lsls	r2, r3, #1
   16a64:	4e0c      	ldr	r6, [pc, #48]	; (16a98 <bt_hex_real+0x48>)
   16a66:	5d34      	ldrb	r4, [r6, r4]
   16a68:	4d0c      	ldr	r5, [pc, #48]	; (16a9c <bt_hex_real+0x4c>)
   16a6a:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16a6e:	5cc4      	ldrb	r4, [r0, r3]
   16a70:	f004 040f 	and.w	r4, r4, #15
   16a74:	3201      	adds	r2, #1
   16a76:	5d34      	ldrb	r4, [r6, r4]
   16a78:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   16a7a:	3301      	adds	r3, #1
   16a7c:	428b      	cmp	r3, r1
   16a7e:	d3ee      	bcc.n	16a5e <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   16a80:	4806      	ldr	r0, [pc, #24]	; (16a9c <bt_hex_real+0x4c>)
   16a82:	2200      	movs	r2, #0
   16a84:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   16a88:	bc70      	pop	{r4, r5, r6}
   16a8a:	4770      	bx	lr
	str[i * 2] = '\0';
   16a8c:	4803      	ldr	r0, [pc, #12]	; (16a9c <bt_hex_real+0x4c>)
   16a8e:	2200      	movs	r2, #0
   16a90:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   16a94:	4770      	bx	lr
   16a96:	bf00      	nop
   16a98:	0002956c 	.word	0x0002956c
   16a9c:	200029dc 	.word	0x200029dc

00016aa0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   16aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   16aa2:	b08b      	sub	sp, #44	; 0x2c
   16aa4:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   16aa6:	7803      	ldrb	r3, [r0, #0]
   16aa8:	2b03      	cmp	r3, #3
   16aaa:	d838      	bhi.n	16b1e <bt_addr_le_str_real+0x7e>
   16aac:	e8df f003 	tbb	[pc, r3]
   16ab0:	312b2102 	.word	0x312b2102
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   16ab4:	4b1d      	ldr	r3, [pc, #116]	; (16b2c <bt_addr_le_str_real+0x8c>)
   16ab6:	e893 0003 	ldmia.w	r3, {r0, r1}
   16aba:	9007      	str	r0, [sp, #28]
   16abc:	f8ad 1020 	strh.w	r1, [sp, #32]
   16ac0:	0c09      	lsrs	r1, r1, #16
   16ac2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16ac6:	7963      	ldrb	r3, [r4, #5]
   16ac8:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16aca:	78e1      	ldrb	r1, [r4, #3]
   16acc:	78a0      	ldrb	r0, [r4, #2]
   16ace:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16ad0:	4d17      	ldr	r5, [pc, #92]	; (16b30 <bt_addr_le_str_real+0x90>)
   16ad2:	af07      	add	r7, sp, #28
   16ad4:	9705      	str	r7, [sp, #20]
   16ad6:	9604      	str	r6, [sp, #16]
   16ad8:	9003      	str	r0, [sp, #12]
   16ada:	9102      	str	r1, [sp, #8]
   16adc:	9201      	str	r2, [sp, #4]
   16ade:	9300      	str	r3, [sp, #0]
   16ae0:	79a3      	ldrb	r3, [r4, #6]
   16ae2:	4a14      	ldr	r2, [pc, #80]	; (16b34 <bt_addr_le_str_real+0x94>)
   16ae4:	211e      	movs	r1, #30
   16ae6:	4628      	mov	r0, r5
   16ae8:	f00c fe04 	bl	236f4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   16aec:	4628      	mov	r0, r5
   16aee:	b00b      	add	sp, #44	; 0x2c
   16af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   16af2:	4b11      	ldr	r3, [pc, #68]	; (16b38 <bt_addr_le_str_real+0x98>)
   16af4:	e893 0003 	ldmia.w	r3, {r0, r1}
   16af8:	9007      	str	r0, [sp, #28]
   16afa:	f8ad 1020 	strh.w	r1, [sp, #32]
   16afe:	0c09      	lsrs	r1, r1, #16
   16b00:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
		break;
   16b04:	e7df      	b.n	16ac6 <bt_addr_le_str_real+0x26>
		strcpy(type, "public-id");
   16b06:	4a0d      	ldr	r2, [pc, #52]	; (16b3c <bt_addr_le_str_real+0x9c>)
   16b08:	ab07      	add	r3, sp, #28
   16b0a:	ca07      	ldmia	r2, {r0, r1, r2}
   16b0c:	c303      	stmia	r3!, {r0, r1}
   16b0e:	801a      	strh	r2, [r3, #0]
		break;
   16b10:	e7d9      	b.n	16ac6 <bt_addr_le_str_real+0x26>
		strcpy(type, "random-id");
   16b12:	4a0b      	ldr	r2, [pc, #44]	; (16b40 <bt_addr_le_str_real+0xa0>)
   16b14:	ab07      	add	r3, sp, #28
   16b16:	ca07      	ldmia	r2, {r0, r1, r2}
   16b18:	c303      	stmia	r3!, {r0, r1}
   16b1a:	801a      	strh	r2, [r3, #0]
		break;
   16b1c:	e7d3      	b.n	16ac6 <bt_addr_le_str_real+0x26>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16b1e:	4a09      	ldr	r2, [pc, #36]	; (16b44 <bt_addr_le_str_real+0xa4>)
   16b20:	210a      	movs	r1, #10
   16b22:	a807      	add	r0, sp, #28
   16b24:	f00c fde6 	bl	236f4 <snprintk>
		break;
   16b28:	e7cd      	b.n	16ac6 <bt_addr_le_str_real+0x26>
   16b2a:	bf00      	nop
   16b2c:	00029520 	.word	0x00029520
   16b30:	20002a60 	.word	0x20002a60
   16b34:	00029530 	.word	0x00029530
   16b38:	00029528 	.word	0x00029528
   16b3c:	00029554 	.word	0x00029554
   16b40:	00029560 	.word	0x00029560
   16b44:	0002a580 	.word	0x0002a580

00016b48 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16b48:	b470      	push	{r4, r5, r6}
   16b4a:	4605      	mov	r5, r0
   16b4c:	460c      	mov	r4, r1
	switch (src->type) {
   16b4e:	7803      	ldrb	r3, [r0, #0]
   16b50:	2b01      	cmp	r3, #1
   16b52:	d011      	beq.n	16b78 <uuid_to_uuid128+0x30>
   16b54:	2b02      	cmp	r3, #2
   16b56:	d021      	beq.n	16b9c <uuid_to_uuid128+0x54>
   16b58:	b10b      	cbz	r3, 16b5e <uuid_to_uuid128+0x16>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16b5a:	bc70      	pop	{r4, r5, r6}
   16b5c:	4770      	bx	lr
		*dst = uuid128_base;
   16b5e:	4e15      	ldr	r6, [pc, #84]	; (16bb4 <uuid_to_uuid128+0x6c>)
   16b60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16b62:	6020      	str	r0, [r4, #0]
   16b64:	6061      	str	r1, [r4, #4]
   16b66:	60a2      	str	r2, [r4, #8]
   16b68:	60e3      	str	r3, [r4, #12]
   16b6a:	7833      	ldrb	r3, [r6, #0]
   16b6c:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   16b6e:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16b70:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   16b72:	0a1b      	lsrs	r3, r3, #8
   16b74:	73a3      	strb	r3, [r4, #14]
}
   16b76:	e7f0      	b.n	16b5a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   16b78:	4e0e      	ldr	r6, [pc, #56]	; (16bb4 <uuid_to_uuid128+0x6c>)
   16b7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16b7c:	6020      	str	r0, [r4, #0]
   16b7e:	6061      	str	r1, [r4, #4]
   16b80:	60a2      	str	r2, [r4, #8]
   16b82:	60e3      	str	r3, [r4, #12]
   16b84:	7833      	ldrb	r3, [r6, #0]
   16b86:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   16b88:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   16b8a:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   16b8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   16b90:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16b92:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16b94:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   16b96:	0e1b      	lsrs	r3, r3, #24
   16b98:	7423      	strb	r3, [r4, #16]
}
   16b9a:	e7de      	b.n	16b5a <uuid_to_uuid128+0x12>
   16b9c:	6800      	ldr	r0, [r0, #0]
   16b9e:	6869      	ldr	r1, [r5, #4]
   16ba0:	68aa      	ldr	r2, [r5, #8]
   16ba2:	68eb      	ldr	r3, [r5, #12]
   16ba4:	6020      	str	r0, [r4, #0]
   16ba6:	6061      	str	r1, [r4, #4]
   16ba8:	60a2      	str	r2, [r4, #8]
   16baa:	60e3      	str	r3, [r4, #12]
   16bac:	7c2b      	ldrb	r3, [r5, #16]
   16bae:	7423      	strb	r3, [r4, #16]
   16bb0:	e7d3      	b.n	16b5a <uuid_to_uuid128+0x12>
   16bb2:	bf00      	nop
   16bb4:	00029588 	.word	0x00029588

00016bb8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   16bb8:	b538      	push	{r3, r4, r5, lr}
   16bba:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16bbc:	4805      	ldr	r0, [pc, #20]	; (16bd4 <bt_buf_get_rx+0x1c>)
   16bbe:	f00f fcb2 	bl	26526 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   16bc2:	4605      	mov	r5, r0
   16bc4:	b120      	cbz	r0, 16bd0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16bc6:	2100      	movs	r1, #0
   16bc8:	3008      	adds	r0, #8
   16bca:	f00f fcce 	bl	2656a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16bce:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   16bd0:	4628      	mov	r0, r5
   16bd2:	bd38      	pop	{r3, r4, r5, pc}
   16bd4:	20000978 	.word	0x20000978

00016bd8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16bd8:	b510      	push	{r4, lr}
   16bda:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16bdc:	4b0a      	ldr	r3, [pc, #40]	; (16c08 <bt_buf_get_cmd_complete+0x30>)
   16bde:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16be2:	b158      	cbz	r0, 16bfc <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16be4:	f00f fcf8 	bl	265d8 <net_buf_ref>
   16be8:	4604      	mov	r4, r0
   16bea:	2301      	movs	r3, #1
   16bec:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   16bee:	2100      	movs	r1, #0
   16bf0:	8181      	strh	r1, [r0, #12]
   16bf2:	3008      	adds	r0, #8
   16bf4:	f00f fcb9 	bl	2656a <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16bf8:	4620      	mov	r0, r4
   16bfa:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16bfc:	460b      	mov	r3, r1
   16bfe:	2001      	movs	r0, #1
   16c00:	f7ff ffda 	bl	16bb8 <bt_buf_get_rx>
   16c04:	4604      	mov	r4, r0
   16c06:	e7f7      	b.n	16bf8 <bt_buf_get_cmd_complete+0x20>
   16c08:	200002b0 	.word	0x200002b0

00016c0c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16c0c:	b510      	push	{r4, lr}
	switch (evt) {
   16c0e:	280f      	cmp	r0, #15
   16c10:	d90d      	bls.n	16c2e <bt_buf_get_evt+0x22>
   16c12:	2813      	cmp	r0, #19
   16c14:	d10d      	bne.n	16c32 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   16c16:	4814      	ldr	r0, [pc, #80]	; (16c68 <bt_buf_get_evt+0x5c>)
   16c18:	f00f fc85 	bl	26526 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16c1c:	4604      	mov	r4, r0
   16c1e:	b198      	cbz	r0, 16c48 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16c20:	2100      	movs	r1, #0
   16c22:	3008      	adds	r0, #8
   16c24:	f00f fca1 	bl	2656a <net_buf_simple_reserve>
   16c28:	2301      	movs	r3, #1
   16c2a:	7523      	strb	r3, [r4, #20]
}
   16c2c:	e00c      	b.n	16c48 <bt_buf_get_evt+0x3c>
	switch (evt) {
   16c2e:	280e      	cmp	r0, #14
   16c30:	d205      	bcs.n	16c3e <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   16c32:	b959      	cbnz	r1, 16c4c <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16c34:	2001      	movs	r0, #1
   16c36:	f7ff ffbf 	bl	16bb8 <bt_buf_get_rx>
   16c3a:	4604      	mov	r4, r0
   16c3c:	e004      	b.n	16c48 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   16c3e:	4610      	mov	r0, r2
   16c40:	4619      	mov	r1, r3
   16c42:	f7ff ffc9 	bl	16bd8 <bt_buf_get_cmd_complete>
   16c46:	4604      	mov	r4, r0
	}
}
   16c48:	4620      	mov	r0, r4
   16c4a:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   16c4c:	4807      	ldr	r0, [pc, #28]	; (16c6c <bt_buf_get_evt+0x60>)
   16c4e:	f00f fc6a 	bl	26526 <net_buf_alloc_fixed>
			if (buf) {
   16c52:	4604      	mov	r4, r0
   16c54:	2800      	cmp	r0, #0
   16c56:	d0f7      	beq.n	16c48 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16c58:	2100      	movs	r1, #0
   16c5a:	3008      	adds	r0, #8
   16c5c:	f00f fc85 	bl	2656a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16c60:	2301      	movs	r3, #1
   16c62:	7523      	strb	r3, [r4, #20]
			return buf;
   16c64:	e7f0      	b.n	16c48 <bt_buf_get_evt+0x3c>
   16c66:	bf00      	nop
   16c68:	200009a4 	.word	0x200009a4
   16c6c:	200008f4 	.word	0x200008f4

00016c70 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c70:	2300      	movs	r3, #0
   16c72:	2b00      	cmp	r3, #0
   16c74:	dd00      	ble.n	16c78 <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   16c76:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   16c78:	4a05      	ldr	r2, [pc, #20]	; (16c90 <conn_handle_disconnected+0x20>)
   16c7a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16c7e:	b922      	cbnz	r2, 16c8a <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16c80:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   16c84:	4902      	ldr	r1, [pc, #8]	; (16c90 <conn_handle_disconnected+0x20>)
   16c86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c8a:	3301      	adds	r3, #1
   16c8c:	e7f1      	b.n	16c72 <conn_handle_disconnected+0x2>
   16c8e:	bf00      	nop
   16c90:	20002a98 	.word	0x20002a98

00016c94 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   16c94:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16c98:	2300      	movs	r3, #0
   16c9a:	2b00      	cmp	r3, #0
   16c9c:	dd01      	ble.n	16ca2 <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   16c9e:	2000      	movs	r0, #0
}
   16ca0:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   16ca2:	4a06      	ldr	r2, [pc, #24]	; (16cbc <conn_handle_is_disconnected+0x28>)
   16ca4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   16ca8:	4282      	cmp	r2, r0
   16caa:	d001      	beq.n	16cb0 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16cac:	3301      	adds	r3, #1
   16cae:	e7f4      	b.n	16c9a <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   16cb0:	4a02      	ldr	r2, [pc, #8]	; (16cbc <conn_handle_is_disconnected+0x28>)
   16cb2:	2100      	movs	r1, #0
   16cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   16cb8:	2001      	movs	r0, #1
   16cba:	4770      	bx	lr
   16cbc:	20002a98 	.word	0x20002a98

00016cc0 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   16cc0:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   16cc2:	7851      	ldrb	r1, [r2, #1]
   16cc4:	4b08      	ldr	r3, [pc, #32]	; (16ce8 <read_local_ver_complete+0x28>)
   16cc6:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   16cca:	8851      	ldrh	r1, [r2, #2]
   16ccc:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   16cd0:	7911      	ldrb	r1, [r2, #4]
   16cd2:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   16cd6:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   16cda:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16cde:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16ce2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   16ce6:	4770      	bx	lr
   16ce8:	200002b0 	.word	0x200002b0

00016cec <read_le_features_complete>:
{
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   16cec:	4b03      	ldr	r3, [pc, #12]	; (16cfc <read_le_features_complete+0x10>)
   16cee:	6882      	ldr	r2, [r0, #8]
   16cf0:	f852 0f01 	ldr.w	r0, [r2, #1]!
   16cf4:	6851      	ldr	r1, [r2, #4]
   16cf6:	c303      	stmia	r3!, {r0, r1}
}
   16cf8:	4770      	bx	lr
   16cfa:	bf00      	nop
   16cfc:	20000380 	.word	0x20000380

00016d00 <read_supported_commands_complete>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_FEATURE, buf, NULL);
}

static void read_supported_commands_complete(struct net_buf *buf)
{
   16d00:	b4f0      	push	{r4, r5, r6, r7}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   16d02:	6886      	ldr	r6, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.supported_commands, rp->commands,
   16d04:	1c74      	adds	r4, r6, #1
   16d06:	4f07      	ldr	r7, [pc, #28]	; (16d24 <read_supported_commands_complete+0x24>)
   16d08:	3641      	adds	r6, #65	; 0x41
   16d0a:	463d      	mov	r5, r7
   16d0c:	6820      	ldr	r0, [r4, #0]
   16d0e:	6861      	ldr	r1, [r4, #4]
   16d10:	68a2      	ldr	r2, [r4, #8]
   16d12:	68e3      	ldr	r3, [r4, #12]
   16d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16d16:	3410      	adds	r4, #16
   16d18:	462f      	mov	r7, r5
   16d1a:	42b4      	cmp	r4, r6
   16d1c:	d1f5      	bne.n	16d0a <read_supported_commands_complete+0xa>
	 * supported if TinyCrypt ECC is used for emulation.
	 */
	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
	}
}
   16d1e:	bcf0      	pop	{r4, r5, r6, r7}
   16d20:	4770      	bx	lr
   16d22:	bf00      	nop
   16d24:	20000328 	.word	0x20000328

00016d28 <read_local_features_complete>:
{
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;

	BT_DBG("status 0x%02x", rp->status);

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16d28:	4b03      	ldr	r3, [pc, #12]	; (16d38 <read_local_features_complete+0x10>)
   16d2a:	6882      	ldr	r2, [r0, #8]
   16d2c:	f852 0f01 	ldr.w	r0, [r2, #1]!
   16d30:	6851      	ldr	r1, [r2, #4]
   16d32:	c303      	stmia	r3!, {r0, r1}
}
   16d34:	4770      	bx	lr
   16d36:	bf00      	nop
   16d38:	20000320 	.word	0x20000320

00016d3c <le_read_supp_states_complete>:

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   16d3c:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   16d3e:	7a19      	ldrb	r1, [r3, #8]
   16d40:	79da      	ldrb	r2, [r3, #7]
   16d42:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   16d46:	7998      	ldrb	r0, [r3, #6]
   16d48:	795a      	ldrb	r2, [r3, #5]
   16d4a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16d4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   16d52:	7918      	ldrb	r0, [r3, #4]
   16d54:	78d9      	ldrb	r1, [r3, #3]
   16d56:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   16d5a:	7898      	ldrb	r0, [r3, #2]
   16d5c:	785b      	ldrb	r3, [r3, #1]
   16d5e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   16d66:	4903      	ldr	r1, [pc, #12]	; (16d74 <le_read_supp_states_complete+0x38>)
   16d68:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   16d6c:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   16d70:	4770      	bx	lr
   16d72:	bf00      	nop
   16d74:	200002b0 	.word	0x200002b0

00016d78 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   16d78:	b470      	push	{r4, r5, r6}
   16d7a:	b08f      	sub	sp, #60	; 0x3c
   16d7c:	4606      	mov	r6, r0
	const char * const str[] = {
   16d7e:	ac01      	add	r4, sp, #4
   16d80:	4d0a      	ldr	r5, [pc, #40]	; (16dac <ver_str+0x34>)
   16d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16d8e:	682b      	ldr	r3, [r5, #0]
   16d90:	6023      	str	r3, [r4, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   16d92:	2e0c      	cmp	r6, #12
   16d94:	d903      	bls.n	16d9e <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
   16d96:	4806      	ldr	r0, [pc, #24]	; (16db0 <ver_str+0x38>)
}
   16d98:	b00f      	add	sp, #60	; 0x3c
   16d9a:	bc70      	pop	{r4, r5, r6}
   16d9c:	4770      	bx	lr
		return str[ver];
   16d9e:	ab0e      	add	r3, sp, #56	; 0x38
   16da0:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   16da4:	f856 0c34 	ldr.w	r0, [r6, #-52]
   16da8:	e7f6      	b.n	16d98 <ver_str+0x20>
   16daa:	bf00      	nop
   16dac:	00028a10 	.word	0x00028a10
   16db0:	000296d8 	.word	0x000296d8

00016db4 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   16db4:	2803      	cmp	r0, #3
   16db6:	d901      	bls.n	16dbc <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   16db8:	4802      	ldr	r0, [pc, #8]	; (16dc4 <vs_hw_platform+0x10>)
}
   16dba:	4770      	bx	lr
		return plat_str[platform];
   16dbc:	4b02      	ldr	r3, [pc, #8]	; (16dc8 <vs_hw_platform+0x14>)
   16dbe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16dc2:	4770      	bx	lr
   16dc4:	000296d8 	.word	0x000296d8
   16dc8:	00029dd4 	.word	0x00029dd4

00016dcc <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   16dcc:	2802      	cmp	r0, #2
   16dce:	d107      	bne.n	16de0 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   16dd0:	2903      	cmp	r1, #3
   16dd2:	d901      	bls.n	16dd8 <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   16dd4:	4803      	ldr	r0, [pc, #12]	; (16de4 <vs_hw_variant+0x18>)
}
   16dd6:	4770      	bx	lr
		return nordic_str[variant];
   16dd8:	4b03      	ldr	r3, [pc, #12]	; (16de8 <vs_hw_variant+0x1c>)
   16dda:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   16dde:	4770      	bx	lr
		return "unknown";
   16de0:	4800      	ldr	r0, [pc, #0]	; (16de4 <vs_hw_variant+0x18>)
   16de2:	4770      	bx	lr
   16de4:	000296d8 	.word	0x000296d8
   16de8:	00029da4 	.word	0x00029da4

00016dec <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   16dec:	2803      	cmp	r0, #3
   16dee:	d901      	bls.n	16df4 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   16df0:	4802      	ldr	r0, [pc, #8]	; (16dfc <vs_fw_variant+0x10>)
}
   16df2:	4770      	bx	lr
		return var_str[variant];
   16df4:	4b02      	ldr	r3, [pc, #8]	; (16e00 <vs_fw_variant+0x14>)
   16df6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16dfa:	4770      	bx	lr
   16dfc:	000296d8 	.word	0x000296d8
   16e00:	00029e0c 	.word	0x00029e0c

00016e04 <hci_data_buf_overflow>:
{
   16e04:	b500      	push	{lr}
   16e06:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   16e08:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16e0a:	4a14      	ldr	r2, [pc, #80]	; (16e5c <hci_data_buf_overflow+0x58>)
   16e0c:	9206      	str	r2, [sp, #24]
   16e0e:	781b      	ldrb	r3, [r3, #0]
   16e10:	9307      	str	r3, [sp, #28]
   16e12:	2300      	movs	r3, #0
   16e14:	f8ad 3005 	strh.w	r3, [sp, #5]
   16e18:	f88d 3007 	strb.w	r3, [sp, #7]
   16e1c:	2203      	movs	r2, #3
   16e1e:	f88d 2004 	strb.w	r2, [sp, #4]
   16e22:	f88d 3006 	strb.w	r3, [sp, #6]
   16e26:	9a01      	ldr	r2, [sp, #4]
   16e28:	9205      	str	r2, [sp, #20]
   16e2a:	461a      	mov	r2, r3
   16e2c:	f363 0200 	bfi	r2, r3, #0, #1
   16e30:	f363 0241 	bfi	r2, r3, #1, #1
   16e34:	f363 0282 	bfi	r2, r3, #2, #1
   16e38:	f363 02c5 	bfi	r2, r3, #3, #3
   16e3c:	2102      	movs	r1, #2
   16e3e:	f361 1288 	bfi	r2, r1, #6, #3
   16e42:	210c      	movs	r1, #12
   16e44:	f361 2252 	bfi	r2, r1, #9, #10
   16e48:	f3c2 0212 	ubfx	r2, r2, #0, #19
   16e4c:	4904      	ldr	r1, [pc, #16]	; (16e60 <hci_data_buf_overflow+0x5c>)
   16e4e:	a802      	add	r0, sp, #8
   16e50:	f00d f87c 	bl	23f4c <z_log_msg2_finalize>
}
   16e54:	b009      	add	sp, #36	; 0x24
   16e56:	f85d fb04 	ldr.w	pc, [sp], #4
   16e5a:	bf00      	nop
   16e5c:	000296e0 	.word	0x000296e0
   16e60:	000288a4 	.word	0x000288a4

00016e64 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   16e64:	6883      	ldr	r3, [r0, #8]
   16e66:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   16e68:	b993      	cbnz	r3, 16e90 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16e6a:	f3bf 8f5b 	dmb	ish
   16e6e:	4b09      	ldr	r3, [pc, #36]	; (16e94 <hci_reset_complete+0x30>)
   16e70:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   16e74:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   16e78:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16e7c:	f3bf 8f5b 	dmb	ish
   16e80:	e853 1f00 	ldrex	r1, [r3]
   16e84:	e843 2000 	strex	r0, r2, [r3]
   16e88:	2800      	cmp	r0, #0
   16e8a:	d1f9      	bne.n	16e80 <hci_reset_complete+0x1c>
   16e8c:	f3bf 8f5b 	dmb	ish
}
   16e90:	4770      	bx	lr
   16e92:	bf00      	nop
   16e94:	200002b0 	.word	0x200002b0

00016e98 <le_read_buffer_size_complete>:
{
   16e98:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   16e9a:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16e9c:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16ea0:	b299      	uxth	r1, r3
   16ea2:	4806      	ldr	r0, [pc, #24]	; (16ebc <le_read_buffer_size_complete+0x24>)
   16ea4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   16ea8:	b901      	cbnz	r1, 16eac <le_read_buffer_size_complete+0x14>
}
   16eaa:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16eac:	78d1      	ldrb	r1, [r2, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
   16eae:	460a      	mov	r2, r1
   16eb0:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16eb4:	f010 fee1 	bl	27c7a <z_impl_k_sem_init>
   16eb8:	e7f7      	b.n	16eaa <le_read_buffer_size_complete+0x12>
   16eba:	bf00      	nop
   16ebc:	200002b0 	.word	0x200002b0

00016ec0 <read_buffer_size_complete>:
{
   16ec0:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   16ec2:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   16ec4:	4b08      	ldr	r3, [pc, #32]	; (16ee8 <read_buffer_size_complete+0x28>)
   16ec6:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   16eca:	b103      	cbz	r3, 16ece <read_buffer_size_complete+0xe>
}
   16ecc:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   16ece:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16ed2:	4805      	ldr	r0, [pc, #20]	; (16ee8 <read_buffer_size_complete+0x28>)
   16ed4:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   16ed8:	8891      	ldrh	r1, [r2, #4]
   16eda:	460a      	mov	r2, r1
   16edc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16ee0:	f010 fecb 	bl	27c7a <z_impl_k_sem_init>
   16ee4:	e7f2      	b.n	16ecc <read_buffer_size_complete+0xc>
   16ee6:	bf00      	nop
   16ee8:	200002b0 	.word	0x200002b0

00016eec <bt_dev_show_info>:
{
   16eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   16eee:	b087      	sub	sp, #28
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16ef0:	4b2d      	ldr	r3, [pc, #180]	; (16fa8 <bt_dev_show_info+0xbc>)
   16ef2:	79db      	ldrb	r3, [r3, #7]
   16ef4:	2b01      	cmp	r3, #1
   16ef6:	d926      	bls.n	16f46 <bt_dev_show_info+0x5a>
   16ef8:	4c2c      	ldr	r4, [pc, #176]	; (16fac <bt_dev_show_info+0xc0>)
   16efa:	482b      	ldr	r0, [pc, #172]	; (16fa8 <bt_dev_show_info+0xbc>)
   16efc:	f7ff fdd0 	bl	16aa0 <bt_addr_le_str_real>
   16f00:	9003      	str	r0, [sp, #12]
   16f02:	9402      	str	r4, [sp, #8]
   16f04:	4b2a      	ldr	r3, [pc, #168]	; (16fb0 <bt_dev_show_info+0xc4>)
   16f06:	9301      	str	r3, [sp, #4]
   16f08:	2000      	movs	r0, #0
   16f0a:	9000      	str	r0, [sp, #0]
   16f0c:	4603      	mov	r3, r0
   16f0e:	2203      	movs	r2, #3
   16f10:	4928      	ldr	r1, [pc, #160]	; (16fb4 <bt_dev_show_info+0xc8>)
   16f12:	f00d faca 	bl	244aa <z_log_msg2_runtime_create>
	for (i = 1; i < bt_dev.id_count; i++) {
   16f16:	2401      	movs	r4, #1
   16f18:	4b23      	ldr	r3, [pc, #140]	; (16fa8 <bt_dev_show_info+0xbc>)
   16f1a:	79db      	ldrb	r3, [r3, #7]
   16f1c:	42a3      	cmp	r3, r4
   16f1e:	dd14      	ble.n	16f4a <bt_dev_show_info+0x5e>
		BT_INFO("Identity[%d]: %s",
   16f20:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   16f24:	4820      	ldr	r0, [pc, #128]	; (16fa8 <bt_dev_show_info+0xbc>)
   16f26:	4418      	add	r0, r3
   16f28:	f7ff fdba 	bl	16aa0 <bt_addr_le_str_real>
   16f2c:	9003      	str	r0, [sp, #12]
   16f2e:	9402      	str	r4, [sp, #8]
   16f30:	4b21      	ldr	r3, [pc, #132]	; (16fb8 <bt_dev_show_info+0xcc>)
   16f32:	9301      	str	r3, [sp, #4]
   16f34:	2000      	movs	r0, #0
   16f36:	9000      	str	r0, [sp, #0]
   16f38:	4603      	mov	r3, r0
   16f3a:	2203      	movs	r2, #3
   16f3c:	491d      	ldr	r1, [pc, #116]	; (16fb4 <bt_dev_show_info+0xc8>)
   16f3e:	f00d fab4 	bl	244aa <z_log_msg2_runtime_create>
	for (i = 1; i < bt_dev.id_count; i++) {
   16f42:	3401      	adds	r4, #1
   16f44:	e7e8      	b.n	16f18 <bt_dev_show_info+0x2c>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16f46:	4c1d      	ldr	r4, [pc, #116]	; (16fbc <bt_dev_show_info+0xd0>)
   16f48:	e7d7      	b.n	16efa <bt_dev_show_info+0xe>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   16f4a:	4d17      	ldr	r5, [pc, #92]	; (16fa8 <bt_dev_show_info+0xbc>)
   16f4c:	f895 4068 	ldrb.w	r4, [r5, #104]	; 0x68
   16f50:	4620      	mov	r0, r4
   16f52:	f7ff ff11 	bl	16d78 <ver_str>
   16f56:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   16f5a:	f8b5 206e 	ldrh.w	r2, [r5, #110]	; 0x6e
   16f5e:	4e15      	ldr	r6, [pc, #84]	; (16fb4 <bt_dev_show_info+0xc8>)
   16f60:	9205      	str	r2, [sp, #20]
   16f62:	9304      	str	r3, [sp, #16]
   16f64:	9403      	str	r4, [sp, #12]
   16f66:	9002      	str	r0, [sp, #8]
   16f68:	4b15      	ldr	r3, [pc, #84]	; (16fc0 <bt_dev_show_info+0xd4>)
   16f6a:	9301      	str	r3, [sp, #4]
   16f6c:	2400      	movs	r4, #0
   16f6e:	9400      	str	r4, [sp, #0]
   16f70:	4623      	mov	r3, r4
   16f72:	2203      	movs	r2, #3
   16f74:	4631      	mov	r1, r6
   16f76:	4620      	mov	r0, r4
   16f78:	f00d fa97 	bl	244aa <z_log_msg2_runtime_create>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   16f7c:	f895 7069 	ldrb.w	r7, [r5, #105]	; 0x69
   16f80:	4638      	mov	r0, r7
   16f82:	f7ff fef9 	bl	16d78 <ver_str>
   16f86:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   16f8a:	9304      	str	r3, [sp, #16]
   16f8c:	9703      	str	r7, [sp, #12]
   16f8e:	9002      	str	r0, [sp, #8]
   16f90:	4b0c      	ldr	r3, [pc, #48]	; (16fc4 <bt_dev_show_info+0xd8>)
   16f92:	9301      	str	r3, [sp, #4]
   16f94:	9400      	str	r4, [sp, #0]
   16f96:	4623      	mov	r3, r4
   16f98:	2203      	movs	r2, #3
   16f9a:	4631      	mov	r1, r6
   16f9c:	4620      	mov	r0, r4
   16f9e:	f00d fa84 	bl	244aa <z_log_msg2_runtime_create>
}
   16fa2:	b007      	add	sp, #28
   16fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16fa6:	bf00      	nop
   16fa8:	200002b0 	.word	0x200002b0
   16fac:	00029708 	.word	0x00029708
   16fb0:	0002970c 	.word	0x0002970c
   16fb4:	000288a4 	.word	0x000288a4
   16fb8:	0002971c 	.word	0x0002971c
   16fbc:	0002995c 	.word	0x0002995c
   16fc0:	00029730 	.word	0x00029730
   16fc4:	00029770 	.word	0x00029770

00016fc8 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16fc8:	2801      	cmp	r0, #1
   16fca:	d001      	beq.n	16fd0 <find_pending_connect+0x8>
	return NULL;
   16fcc:	2000      	movs	r0, #0
}
   16fce:	4770      	bx	lr
{
   16fd0:	b500      	push	{lr}
   16fd2:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16fd4:	2205      	movs	r2, #5
   16fd6:	4b0d      	ldr	r3, [pc, #52]	; (1700c <find_pending_connect+0x44>)
   16fd8:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   16fdc:	f003 fdf4 	bl	1abc8 <bt_conn_lookup_state_le>
		if (!conn) {
   16fe0:	b110      	cbz	r0, 16fe8 <find_pending_connect+0x20>
}
   16fe2:	b003      	add	sp, #12
   16fe4:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   16fe8:	4b09      	ldr	r3, [pc, #36]	; (17010 <find_pending_connect+0x48>)
   16fea:	e893 0003 	ldmia.w	r3, {r0, r1}
   16fee:	9000      	str	r0, [sp, #0]
   16ff0:	f8ad 1004 	strh.w	r1, [sp, #4]
   16ff4:	0c09      	lsrs	r1, r1, #16
   16ff6:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16ffa:	2204      	movs	r2, #4
   16ffc:	4669      	mov	r1, sp
   16ffe:	4b03      	ldr	r3, [pc, #12]	; (1700c <find_pending_connect+0x44>)
   17000:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   17004:	f003 fde0 	bl	1abc8 <bt_conn_lookup_state_le>
		return conn;
   17008:	e7eb      	b.n	16fe2 <find_pending_connect+0x1a>
   1700a:	bf00      	nop
   1700c:	200002b0 	.word	0x200002b0
   17010:	00028a44 	.word	0x00028a44

00017014 <le_conn_complete_adv_timeout>:
{
   17014:	b510      	push	{r4, lr}
   17016:	b088      	sub	sp, #32
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   17018:	f002 fd5c 	bl	19ad4 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   1701c:	3010      	adds	r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1701e:	f3bf 8f5b 	dmb	ish
   17022:	e850 3f00 	ldrex	r3, [r0]
   17026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   1702a:	e840 3200 	strex	r2, r3, [r0]
   1702e:	2a00      	cmp	r2, #0
   17030:	d1f7      	bne.n	17022 <le_conn_complete_adv_timeout+0xe>
   17032:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   17036:	2100      	movs	r1, #0
   17038:	2001      	movs	r0, #1
   1703a:	f7ff ffc5 	bl	16fc8 <find_pending_connect>
		if (!conn) {
   1703e:	4604      	mov	r4, r0
   17040:	b148      	cbz	r0, 17056 <le_conn_complete_adv_timeout+0x42>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   17042:	233c      	movs	r3, #60	; 0x3c
   17044:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17046:	2100      	movs	r1, #0
   17048:	f003 fb5a 	bl	1a700 <bt_conn_set_state>
		bt_conn_unref(conn);
   1704c:	4620      	mov	r0, r4
   1704e:	f00d fe68 	bl	24d22 <bt_conn_unref>
}
   17052:	b008      	add	sp, #32
   17054:	bd10      	pop	{r4, pc}
			BT_ERR("No pending peripheral connection");
   17056:	4b12      	ldr	r3, [pc, #72]	; (170a0 <le_conn_complete_adv_timeout+0x8c>)
   17058:	9306      	str	r3, [sp, #24]
   1705a:	2300      	movs	r3, #0
   1705c:	f8ad 3005 	strh.w	r3, [sp, #5]
   17060:	f88d 3007 	strb.w	r3, [sp, #7]
   17064:	2202      	movs	r2, #2
   17066:	f88d 2004 	strb.w	r2, [sp, #4]
   1706a:	f88d 3006 	strb.w	r3, [sp, #6]
   1706e:	9a01      	ldr	r2, [sp, #4]
   17070:	9205      	str	r2, [sp, #20]
   17072:	461a      	mov	r2, r3
   17074:	f363 0200 	bfi	r2, r3, #0, #1
   17078:	f363 0241 	bfi	r2, r3, #1, #1
   1707c:	f363 0282 	bfi	r2, r3, #2, #1
   17080:	f363 02c5 	bfi	r2, r3, #3, #3
   17084:	2101      	movs	r1, #1
   17086:	f361 1288 	bfi	r2, r1, #6, #3
   1708a:	2108      	movs	r1, #8
   1708c:	f361 2252 	bfi	r2, r1, #9, #10
   17090:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17094:	4903      	ldr	r1, [pc, #12]	; (170a4 <le_conn_complete_adv_timeout+0x90>)
   17096:	a802      	add	r0, sp, #8
   17098:	f00c ff58 	bl	23f4c <z_log_msg2_finalize>
			return;
   1709c:	e7d9      	b.n	17052 <le_conn_complete_adv_timeout+0x3e>
   1709e:	bf00      	nop
   170a0:	00029798 	.word	0x00029798
   170a4:	000288a4 	.word	0x000288a4

000170a8 <hci_disconn_complete>:
{
   170a8:	b570      	push	{r4, r5, r6, lr}
   170aa:	b088      	sub	sp, #32
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   170ac:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   170ae:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   170b2:	7823      	ldrb	r3, [r4, #0]
   170b4:	b10b      	cbz	r3, 170ba <hci_disconn_complete+0x12>
}
   170b6:	b008      	add	sp, #32
   170b8:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   170ba:	4630      	mov	r0, r6
   170bc:	f003 fb16 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   170c0:	4605      	mov	r5, r0
   170c2:	b158      	cbz	r0, 170dc <hci_disconn_complete+0x34>
	conn->err = evt->reason;
   170c4:	78e3      	ldrb	r3, [r4, #3]
   170c6:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   170c8:	2100      	movs	r1, #0
   170ca:	f003 fb19 	bl	1a700 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   170ce:	78ab      	ldrb	r3, [r5, #2]
   170d0:	2b01      	cmp	r3, #1
   170d2:	d028      	beq.n	17126 <hci_disconn_complete+0x7e>
		bt_conn_unref(conn);
   170d4:	4628      	mov	r0, r5
   170d6:	f00d fe24 	bl	24d22 <bt_conn_unref>
		return;
   170da:	e7ec      	b.n	170b6 <hci_disconn_complete+0xe>
		BT_ERR("Unable to look up conn with handle %u", handle);
   170dc:	4b14      	ldr	r3, [pc, #80]	; (17130 <hci_disconn_complete+0x88>)
   170de:	9306      	str	r3, [sp, #24]
   170e0:	9607      	str	r6, [sp, #28]
   170e2:	2300      	movs	r3, #0
   170e4:	f8ad 3005 	strh.w	r3, [sp, #5]
   170e8:	f88d 3007 	strb.w	r3, [sp, #7]
   170ec:	2203      	movs	r2, #3
   170ee:	f88d 2004 	strb.w	r2, [sp, #4]
   170f2:	f88d 3006 	strb.w	r3, [sp, #6]
   170f6:	9a01      	ldr	r2, [sp, #4]
   170f8:	9205      	str	r2, [sp, #20]
   170fa:	461a      	mov	r2, r3
   170fc:	f363 0200 	bfi	r2, r3, #0, #1
   17100:	f363 0241 	bfi	r2, r3, #1, #1
   17104:	f363 0282 	bfi	r2, r3, #2, #1
   17108:	f363 02c5 	bfi	r2, r3, #3, #3
   1710c:	2101      	movs	r1, #1
   1710e:	f361 1288 	bfi	r2, r1, #6, #3
   17112:	210c      	movs	r1, #12
   17114:	f361 2252 	bfi	r2, r1, #9, #10
   17118:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1711c:	4905      	ldr	r1, [pc, #20]	; (17134 <hci_disconn_complete+0x8c>)
   1711e:	a802      	add	r0, sp, #8
   17120:	f00c ff14 	bl	23f4c <z_log_msg2_finalize>
		return;
   17124:	e7c7      	b.n	170b6 <hci_disconn_complete+0xe>
	bt_conn_unref(conn);
   17126:	4628      	mov	r0, r5
   17128:	f00d fdfb 	bl	24d22 <bt_conn_unref>
   1712c:	e7c3      	b.n	170b6 <hci_disconn_complete+0xe>
   1712e:	bf00      	nop
   17130:	000297bc 	.word	0x000297bc
   17134:	000288a4 	.word	0x000288a4

00017138 <le_data_len_change>:
{
   17138:	b510      	push	{r4, lr}
   1713a:	b088      	sub	sp, #32
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1713c:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1713e:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   17140:	4620      	mov	r0, r4
   17142:	f003 fad3 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   17146:	b118      	cbz	r0, 17150 <le_data_len_change+0x18>
	bt_conn_unref(conn);
   17148:	f00d fdeb 	bl	24d22 <bt_conn_unref>
}
   1714c:	b008      	add	sp, #32
   1714e:	bd10      	pop	{r4, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17150:	4b12      	ldr	r3, [pc, #72]	; (1719c <le_data_len_change+0x64>)
   17152:	9306      	str	r3, [sp, #24]
   17154:	9407      	str	r4, [sp, #28]
   17156:	2300      	movs	r3, #0
   17158:	f8ad 3005 	strh.w	r3, [sp, #5]
   1715c:	f88d 3007 	strb.w	r3, [sp, #7]
   17160:	2203      	movs	r2, #3
   17162:	f88d 2004 	strb.w	r2, [sp, #4]
   17166:	f88d 3006 	strb.w	r3, [sp, #6]
   1716a:	9a01      	ldr	r2, [sp, #4]
   1716c:	9205      	str	r2, [sp, #20]
   1716e:	461a      	mov	r2, r3
   17170:	f363 0200 	bfi	r2, r3, #0, #1
   17174:	f363 0241 	bfi	r2, r3, #1, #1
   17178:	f363 0282 	bfi	r2, r3, #2, #1
   1717c:	f363 02c5 	bfi	r2, r3, #3, #3
   17180:	2101      	movs	r1, #1
   17182:	f361 1288 	bfi	r2, r1, #6, #3
   17186:	210c      	movs	r1, #12
   17188:	f361 2252 	bfi	r2, r1, #9, #10
   1718c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17190:	4903      	ldr	r1, [pc, #12]	; (171a0 <le_data_len_change+0x68>)
   17192:	a802      	add	r0, sp, #8
   17194:	f00c feda 	bl	23f4c <z_log_msg2_finalize>
		return;
   17198:	e7d8      	b.n	1714c <le_data_len_change+0x14>
   1719a:	bf00      	nop
   1719c:	000297e4 	.word	0x000297e4
   171a0:	000288a4 	.word	0x000288a4

000171a4 <hci_num_completed_packets>:
{
   171a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171a8:	b08e      	sub	sp, #56	; 0x38
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   171aa:	f8d0 9008 	ldr.w	r9, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   171ae:	2700      	movs	r7, #0
   171b0:	e074      	b.n	1729c <hci_num_completed_packets+0xf8>
				conn->pending_no_cb--;
   171b2:	3b01      	subs	r3, #1
   171b4:	61e3      	str	r3, [r4, #28]
   171b6:	f382 8811 	msr	BASEPRI, r2
   171ba:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   171be:	4620      	mov	r0, r4
   171c0:	f002 ffba 	bl	1a138 <bt_conn_get_pkts>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   171c4:	f009 ff72 	bl	210ac <z_impl_k_sem_give>
				continue;
   171c8:	e026      	b.n	17218 <hci_num_completed_packets+0x74>
	list->tail = node;
   171ca:	61a1      	str	r1, [r4, #24]
   171cc:	f382 8811 	msr	BASEPRI, r2
   171d0:	f3bf 8f6f 	isb	sy
			if (!node) {
   171d4:	2b00      	cmp	r3, #0
   171d6:	d038      	beq.n	1724a <hci_num_completed_packets+0xa6>
	__asm__ volatile(
   171d8:	f04f 0240 	mov.w	r2, #64	; 0x40
   171dc:	f3ef 8111 	mrs	r1, BASEPRI
   171e0:	f382 8812 	msr	BASEPRI_MAX, r2
   171e4:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   171e8:	68da      	ldr	r2, [r3, #12]
   171ea:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   171ec:	2200      	movs	r2, #0
   171ee:	60da      	str	r2, [r3, #12]
	parent->next = child;
   171f0:	601a      	str	r2, [r3, #0]
	return list->tail;
   171f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   171f4:	2a00      	cmp	r2, #0
   171f6:	f000 8088 	beq.w	1730a <hci_num_completed_packets+0x166>
	parent->next = child;
   171fa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   171fc:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   171fe:	f381 8811 	msr	BASEPRI, r1
   17202:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   17206:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1720a:	f00a f919 	bl	21440 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   1720e:	4620      	mov	r0, r4
   17210:	f002 ff92 	bl	1a138 <bt_conn_get_pkts>
   17214:	f009 ff4a 	bl	210ac <z_impl_k_sem_give>
{
   17218:	462e      	mov	r6, r5
		while (count--) {
   1721a:	1e75      	subs	r5, r6, #1
   1721c:	b2ad      	uxth	r5, r5
   1721e:	2e00      	cmp	r6, #0
   17220:	d038      	beq.n	17294 <hci_num_completed_packets+0xf0>
	__asm__ volatile(
   17222:	f04f 0340 	mov.w	r3, #64	; 0x40
   17226:	f3ef 8211 	mrs	r2, BASEPRI
   1722a:	f383 8812 	msr	BASEPRI_MAX, r3
   1722e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   17232:	69e3      	ldr	r3, [r4, #28]
   17234:	2b00      	cmp	r3, #0
   17236:	d1bc      	bne.n	171b2 <hci_num_completed_packets+0xe>
	return list->head;
   17238:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   1723a:	2b00      	cmp	r3, #0
   1723c:	d0c6      	beq.n	171cc <hci_num_completed_packets+0x28>
	return node->next;
   1723e:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   17240:	6161      	str	r1, [r4, #20]
	return list->tail;
   17242:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17244:	4283      	cmp	r3, r0
   17246:	d1c1      	bne.n	171cc <hci_num_completed_packets+0x28>
   17248:	e7bf      	b.n	171ca <hci_num_completed_packets+0x26>
				BT_ERR("packets count mismatch");
   1724a:	4b33      	ldr	r3, [pc, #204]	; (17318 <hci_num_completed_packets+0x174>)
   1724c:	9306      	str	r3, [sp, #24]
   1724e:	2300      	movs	r3, #0
   17250:	f8ad 3005 	strh.w	r3, [sp, #5]
   17254:	f88d 3007 	strb.w	r3, [sp, #7]
   17258:	2202      	movs	r2, #2
   1725a:	f88d 2004 	strb.w	r2, [sp, #4]
   1725e:	f88d 3006 	strb.w	r3, [sp, #6]
   17262:	9a01      	ldr	r2, [sp, #4]
   17264:	9205      	str	r2, [sp, #20]
   17266:	f363 0800 	bfi	r8, r3, #0, #1
   1726a:	f363 0841 	bfi	r8, r3, #1, #1
   1726e:	f363 0882 	bfi	r8, r3, #2, #1
   17272:	f363 08c5 	bfi	r8, r3, #3, #3
   17276:	2201      	movs	r2, #1
   17278:	f362 1888 	bfi	r8, r2, #6, #3
   1727c:	2208      	movs	r2, #8
   1727e:	f362 2852 	bfi	r8, r2, #9, #10
   17282:	f363 48de 	bfi	r8, r3, #19, #12
   17286:	f363 78df 	bfi	r8, r3, #31, #1
   1728a:	4642      	mov	r2, r8
   1728c:	4923      	ldr	r1, [pc, #140]	; (1731c <hci_num_completed_packets+0x178>)
   1728e:	a802      	add	r0, sp, #8
   17290:	f00c fe5c 	bl	23f4c <z_log_msg2_finalize>
		bt_conn_unref(conn);
   17294:	4620      	mov	r0, r4
   17296:	f00d fd44 	bl	24d22 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   1729a:	3701      	adds	r7, #1
   1729c:	f899 3000 	ldrb.w	r3, [r9]
   172a0:	429f      	cmp	r7, r3
   172a2:	da35      	bge.n	17310 <hci_num_completed_packets+0x16c>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   172a4:	eb09 0387 	add.w	r3, r9, r7, lsl #2
   172a8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   172ac:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   172b0:	4628      	mov	r0, r5
   172b2:	f003 fa1b 	bl	1a6ec <bt_conn_lookup_handle>
		if (!conn) {
   172b6:	4604      	mov	r4, r0
   172b8:	2800      	cmp	r0, #0
   172ba:	d1ae      	bne.n	1721a <hci_num_completed_packets+0x76>
			BT_ERR("No connection for handle %u", handle);
   172bc:	4b18      	ldr	r3, [pc, #96]	; (17320 <hci_num_completed_packets+0x17c>)
   172be:	930c      	str	r3, [sp, #48]	; 0x30
   172c0:	950d      	str	r5, [sp, #52]	; 0x34
   172c2:	2300      	movs	r3, #0
   172c4:	f8ad 3005 	strh.w	r3, [sp, #5]
   172c8:	f88d 3007 	strb.w	r3, [sp, #7]
   172cc:	2203      	movs	r2, #3
   172ce:	f88d 2004 	strb.w	r2, [sp, #4]
   172d2:	f88d 3006 	strb.w	r3, [sp, #6]
   172d6:	9a01      	ldr	r2, [sp, #4]
   172d8:	920b      	str	r2, [sp, #44]	; 0x2c
   172da:	f363 0a00 	bfi	sl, r3, #0, #1
   172de:	f363 0a41 	bfi	sl, r3, #1, #1
   172e2:	f363 0a82 	bfi	sl, r3, #2, #1
   172e6:	f363 0ac5 	bfi	sl, r3, #3, #3
   172ea:	2201      	movs	r2, #1
   172ec:	f362 1a88 	bfi	sl, r2, #6, #3
   172f0:	220c      	movs	r2, #12
   172f2:	f362 2a52 	bfi	sl, r2, #9, #10
   172f6:	f363 4ade 	bfi	sl, r3, #19, #12
   172fa:	f363 7adf 	bfi	sl, r3, #31, #1
   172fe:	4652      	mov	r2, sl
   17300:	4906      	ldr	r1, [pc, #24]	; (1731c <hci_num_completed_packets+0x178>)
   17302:	a808      	add	r0, sp, #32
   17304:	f00c fe22 	bl	23f4c <z_log_msg2_finalize>
			continue;
   17308:	e7c7      	b.n	1729a <hci_num_completed_packets+0xf6>
	list->tail = node;
   1730a:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   1730c:	6223      	str	r3, [r4, #32]
}
   1730e:	e776      	b.n	171fe <hci_num_completed_packets+0x5a>
}
   17310:	b00e      	add	sp, #56	; 0x38
   17312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17316:	bf00      	nop
   17318:	00029824 	.word	0x00029824
   1731c:	000288a4 	.word	0x000288a4
   17320:	00029808 	.word	0x00029808

00017324 <hci_cmd_done>:
{
   17324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17328:	b082      	sub	sp, #8
   1732a:	af00      	add	r7, sp, #0
   1732c:	4606      	mov	r6, r0
   1732e:	460d      	mov	r5, r1
   17330:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   17332:	7990      	ldrb	r0, [r2, #6]
   17334:	f006 fb0c 	bl	1d950 <net_buf_pool_get>
   17338:	4b99      	ldr	r3, [pc, #612]	; (175a0 <hci_cmd_done+0x27c>)
   1733a:	4283      	cmp	r3, r0
   1733c:	d063      	beq.n	17406 <hci_cmd_done+0xe2>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1733e:	79a0      	ldrb	r0, [r4, #6]
   17340:	f006 fb06 	bl	1d950 <net_buf_pool_get>
   17344:	46ea      	mov	sl, sp
   17346:	b08a      	sub	sp, #40	; 0x28
   17348:	46e8      	mov	r8, sp
   1734a:	f118 050c 	adds.w	r5, r8, #12
   1734e:	d04e      	beq.n	173ee <hci_cmd_done+0xca>
   17350:	f04f 0918 	mov.w	r9, #24
   17354:	b12d      	cbz	r5, 17362 <hci_cmd_done+0x3e>
   17356:	f1b9 0f04 	cmp.w	r9, #4
   1735a:	dd02      	ble.n	17362 <hci_cmd_done+0x3e>
   1735c:	4b91      	ldr	r3, [pc, #580]	; (175a4 <hci_cmd_done+0x280>)
   1735e:	f8c8 3010 	str.w	r3, [r8, #16]
   17362:	b125      	cbz	r5, 1736e <hci_cmd_done+0x4a>
   17364:	f1b9 0f08 	cmp.w	r9, #8
   17368:	dd01      	ble.n	1736e <hci_cmd_done+0x4a>
   1736a:	f8c8 6014 	str.w	r6, [r8, #20]
   1736e:	79a3      	ldrb	r3, [r4, #6]
   17370:	b125      	cbz	r5, 1737c <hci_cmd_done+0x58>
   17372:	f1b9 0f0c 	cmp.w	r9, #12
   17376:	dd01      	ble.n	1737c <hci_cmd_done+0x58>
   17378:	f8c8 3018 	str.w	r3, [r8, #24]
   1737c:	79a0      	ldrb	r0, [r4, #6]
   1737e:	f006 fae7 	bl	1d950 <net_buf_pool_get>
   17382:	b115      	cbz	r5, 1738a <hci_cmd_done+0x66>
   17384:	f1b9 0f10 	cmp.w	r9, #16
   17388:	dc34      	bgt.n	173f4 <hci_cmd_done+0xd0>
   1738a:	b12d      	cbz	r5, 17398 <hci_cmd_done+0x74>
   1738c:	f1b9 0f14 	cmp.w	r9, #20
   17390:	dd02      	ble.n	17398 <hci_cmd_done+0x74>
   17392:	4b83      	ldr	r3, [pc, #524]	; (175a0 <hci_cmd_done+0x27c>)
   17394:	f8c8 3020 	str.w	r3, [r8, #32]
   17398:	f1b9 0f17 	cmp.w	r9, #23
   1739c:	dd30      	ble.n	17400 <hci_cmd_done+0xdc>
   1739e:	2318      	movs	r3, #24
   173a0:	b14d      	cbz	r5, 173b6 <hci_cmd_done+0x92>
   173a2:	2200      	movs	r2, #0
   173a4:	f8a7 2005 	strh.w	r2, [r7, #5]
   173a8:	71fa      	strb	r2, [r7, #7]
   173aa:	2106      	movs	r1, #6
   173ac:	7139      	strb	r1, [r7, #4]
   173ae:	71ba      	strb	r2, [r7, #6]
   173b0:	687a      	ldr	r2, [r7, #4]
   173b2:	f8c8 200c 	str.w	r2, [r8, #12]
   173b6:	2200      	movs	r2, #0
   173b8:	f36f 0200 	bfc	r2, #0, #1
   173bc:	f36f 0241 	bfc	r2, #1, #1
   173c0:	f36f 0282 	bfc	r2, #2, #1
   173c4:	f36f 02c5 	bfc	r2, #3, #3
   173c8:	2102      	movs	r1, #2
   173ca:	f361 1288 	bfi	r2, r1, #6, #3
   173ce:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
   173d2:	f363 2252 	bfi	r2, r3, #9, #10
   173d6:	2300      	movs	r3, #0
   173d8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   173dc:	4972      	ldr	r1, [pc, #456]	; (175a8 <hci_cmd_done+0x284>)
   173de:	4640      	mov	r0, r8
   173e0:	f00c fdb4 	bl	23f4c <z_log_msg2_finalize>
   173e4:	46d5      	mov	sp, sl
}
   173e6:	3708      	adds	r7, #8
   173e8:	46bd      	mov	sp, r7
   173ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   173ee:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   173f2:	e7af      	b.n	17354 <hci_cmd_done+0x30>
   173f4:	79a0      	ldrb	r0, [r4, #6]
   173f6:	f006 faab 	bl	1d950 <net_buf_pool_get>
   173fa:	f8c8 001c 	str.w	r0, [r8, #28]
   173fe:	e7c4      	b.n	1738a <hci_cmd_done+0x66>
   17400:	f06f 031b 	mvn.w	r3, #27
   17404:	e7cc      	b.n	173a0 <hci_cmd_done+0x7c>
	if (cmd(buf)->opcode != opcode) {
   17406:	4620      	mov	r0, r4
   17408:	f00e ffda 	bl	263c0 <net_buf_id>
   1740c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17410:	4b66      	ldr	r3, [pc, #408]	; (175ac <hci_cmd_done+0x288>)
   17412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17416:	8843      	ldrh	r3, [r0, #2]
   17418:	429e      	cmp	r6, r3
   1741a:	d133      	bne.n	17484 <hci_cmd_done+0x160>
	if (bt_dev.sent_cmd) {
   1741c:	4b64      	ldr	r3, [pc, #400]	; (175b0 <hci_cmd_done+0x28c>)
   1741e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   17422:	b128      	cbz	r0, 17430 <hci_cmd_done+0x10c>
		net_buf_unref(bt_dev.sent_cmd);
   17424:	f00f f8b2 	bl	2658c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17428:	4b61      	ldr	r3, [pc, #388]	; (175b0 <hci_cmd_done+0x28c>)
   1742a:	2200      	movs	r2, #0
   1742c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   17430:	4620      	mov	r0, r4
   17432:	f00e ffc5 	bl	263c0 <net_buf_id>
   17436:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1743a:	4b5c      	ldr	r3, [pc, #368]	; (175ac <hci_cmd_done+0x288>)
   1743c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17440:	6843      	ldr	r3, [r0, #4]
   17442:	b10b      	cbz	r3, 17448 <hci_cmd_done+0x124>
   17444:	2d00      	cmp	r5, #0
   17446:	d07a      	beq.n	1753e <hci_cmd_done+0x21a>
	if (cmd(buf)->sync) {
   17448:	4620      	mov	r0, r4
   1744a:	f00e ffb9 	bl	263c0 <net_buf_id>
   1744e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17452:	4b56      	ldr	r3, [pc, #344]	; (175ac <hci_cmd_done+0x288>)
   17454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17458:	6883      	ldr	r3, [r0, #8]
   1745a:	2b00      	cmp	r3, #0
   1745c:	d0c3      	beq.n	173e6 <hci_cmd_done+0xc2>
		cmd(buf)->status = status;
   1745e:	4620      	mov	r0, r4
   17460:	f00e ffae 	bl	263c0 <net_buf_id>
   17464:	4e51      	ldr	r6, [pc, #324]	; (175ac <hci_cmd_done+0x288>)
   17466:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1746a:	f806 5020 	strb.w	r5, [r6, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   1746e:	4620      	mov	r0, r4
   17470:	f00e ffa6 	bl	263c0 <net_buf_id>
   17474:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17478:	eb06 0680 	add.w	r6, r6, r0, lsl #2
   1747c:	68b0      	ldr	r0, [r6, #8]
   1747e:	f009 fe15 	bl	210ac <z_impl_k_sem_give>
}
   17482:	e7b0      	b.n	173e6 <hci_cmd_done+0xc2>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   17484:	4620      	mov	r0, r4
   17486:	f00e ff9b 	bl	263c0 <net_buf_id>
   1748a:	46ea      	mov	sl, sp
   1748c:	b088      	sub	sp, #32
   1748e:	466d      	mov	r5, sp
   17490:	f115 080c 	adds.w	r8, r5, #12
   17494:	d042      	beq.n	1751c <hci_cmd_done+0x1f8>
   17496:	f04f 0910 	mov.w	r9, #16
   1749a:	f1b8 0f00 	cmp.w	r8, #0
   1749e:	d004      	beq.n	174aa <hci_cmd_done+0x186>
   174a0:	f1b9 0f04 	cmp.w	r9, #4
   174a4:	dd01      	ble.n	174aa <hci_cmd_done+0x186>
   174a6:	4b43      	ldr	r3, [pc, #268]	; (175b4 <hci_cmd_done+0x290>)
   174a8:	612b      	str	r3, [r5, #16]
   174aa:	f1b8 0f00 	cmp.w	r8, #0
   174ae:	d003      	beq.n	174b8 <hci_cmd_done+0x194>
   174b0:	f1b9 0f08 	cmp.w	r9, #8
   174b4:	dd00      	ble.n	174b8 <hci_cmd_done+0x194>
   174b6:	616e      	str	r6, [r5, #20]
   174b8:	4620      	mov	r0, r4
   174ba:	f00e ff81 	bl	263c0 <net_buf_id>
   174be:	f1b8 0f00 	cmp.w	r8, #0
   174c2:	d002      	beq.n	174ca <hci_cmd_done+0x1a6>
   174c4:	f1b9 0f0c 	cmp.w	r9, #12
   174c8:	dc2b      	bgt.n	17522 <hci_cmd_done+0x1fe>
   174ca:	f1b9 0f0f 	cmp.w	r9, #15
   174ce:	dd33      	ble.n	17538 <hci_cmd_done+0x214>
   174d0:	2310      	movs	r3, #16
   174d2:	f1b8 0f00 	cmp.w	r8, #0
   174d6:	d008      	beq.n	174ea <hci_cmd_done+0x1c6>
   174d8:	2200      	movs	r2, #0
   174da:	f8a7 2005 	strh.w	r2, [r7, #5]
   174de:	71fa      	strb	r2, [r7, #7]
   174e0:	2104      	movs	r1, #4
   174e2:	7139      	strb	r1, [r7, #4]
   174e4:	71ba      	strb	r2, [r7, #6]
   174e6:	687a      	ldr	r2, [r7, #4]
   174e8:	60ea      	str	r2, [r5, #12]
   174ea:	2200      	movs	r2, #0
   174ec:	f36f 0200 	bfc	r2, #0, #1
   174f0:	f36f 0241 	bfc	r2, #1, #1
   174f4:	f36f 0282 	bfc	r2, #2, #1
   174f8:	f36f 02c5 	bfc	r2, #3, #3
   174fc:	2102      	movs	r1, #2
   174fe:	f361 1288 	bfi	r2, r1, #6, #3
   17502:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   17506:	f363 2252 	bfi	r2, r3, #9, #10
   1750a:	2300      	movs	r3, #0
   1750c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17510:	4925      	ldr	r1, [pc, #148]	; (175a8 <hci_cmd_done+0x284>)
   17512:	4628      	mov	r0, r5
   17514:	f00c fd1a 	bl	23f4c <z_log_msg2_finalize>
   17518:	46d5      	mov	sp, sl
		return;
   1751a:	e764      	b.n	173e6 <hci_cmd_done+0xc2>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   1751c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
   17520:	e7bb      	b.n	1749a <hci_cmd_done+0x176>
   17522:	4620      	mov	r0, r4
   17524:	f00e ff4c 	bl	263c0 <net_buf_id>
   17528:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1752c:	4b1f      	ldr	r3, [pc, #124]	; (175ac <hci_cmd_done+0x288>)
   1752e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17532:	8843      	ldrh	r3, [r0, #2]
   17534:	61ab      	str	r3, [r5, #24]
   17536:	e7c8      	b.n	174ca <hci_cmd_done+0x1a6>
   17538:	f06f 031b 	mvn.w	r3, #27
   1753c:	e7c9      	b.n	174d2 <hci_cmd_done+0x1ae>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1753e:	4620      	mov	r0, r4
   17540:	f00e ff3e 	bl	263c0 <net_buf_id>
   17544:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17548:	4b18      	ldr	r3, [pc, #96]	; (175ac <hci_cmd_done+0x288>)
   1754a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1754e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   17550:	6813      	ldr	r3, [r2, #0]
   17552:	6851      	ldr	r1, [r2, #4]
   17554:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   17556:	f001 061f 	and.w	r6, r1, #31
   1755a:	2201      	movs	r2, #1
   1755c:	40b2      	lsls	r2, r6

	if (val) {
   1755e:	b170      	cbz	r0, 1757e <hci_cmd_done+0x25a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   17560:	0949      	lsrs	r1, r1, #5
   17562:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17566:	f3bf 8f5b 	dmb	ish
   1756a:	e853 1f00 	ldrex	r1, [r3]
   1756e:	4311      	orrs	r1, r2
   17570:	e843 1000 	strex	r0, r1, [r3]
   17574:	2800      	cmp	r0, #0
   17576:	d1f8      	bne.n	1756a <hci_cmd_done+0x246>
   17578:	f3bf 8f5b 	dmb	ish
   1757c:	e764      	b.n	17448 <hci_cmd_done+0x124>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1757e:	0949      	lsrs	r1, r1, #5
   17580:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   17584:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17586:	f3bf 8f5b 	dmb	ish
   1758a:	e853 1f00 	ldrex	r1, [r3]
   1758e:	4011      	ands	r1, r2
   17590:	e843 1000 	strex	r0, r1, [r3]
   17594:	2800      	cmp	r0, #0
   17596:	d1f8      	bne.n	1758a <hci_cmd_done+0x266>
   17598:	f3bf 8f5b 	dmb	ish
	}
}
   1759c:	e754      	b.n	17448 <hci_cmd_done+0x124>
   1759e:	bf00      	nop
   175a0:	2000094c 	.word	0x2000094c
   175a4:	0002983c 	.word	0x0002983c
   175a8:	000288a4 	.word	0x000288a4
   175ac:	20002a80 	.word	0x20002a80
   175b0:	200002b0 	.word	0x200002b0
   175b4:	00029874 	.word	0x00029874

000175b8 <hci_cmd_status>:
{
   175b8:	b538      	push	{r3, r4, r5, lr}
   175ba:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   175bc:	2104      	movs	r1, #4
   175be:	3008      	adds	r0, #8
   175c0:	f00f f856 	bl	26670 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   175c4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   175c6:	4622      	mov	r2, r4
   175c8:	7801      	ldrb	r1, [r0, #0]
   175ca:	8840      	ldrh	r0, [r0, #2]
   175cc:	f7ff feaa 	bl	17324 <hci_cmd_done>
	if (ncmd) {
   175d0:	b905      	cbnz	r5, 175d4 <hci_cmd_status+0x1c>
}
   175d2:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   175d4:	4801      	ldr	r0, [pc, #4]	; (175dc <hci_cmd_status+0x24>)
   175d6:	f009 fd69 	bl	210ac <z_impl_k_sem_give>
   175da:	e7fa      	b.n	175d2 <hci_cmd_status+0x1a>
   175dc:	200003c8 	.word	0x200003c8

000175e0 <hci_cmd_complete>:
{
   175e0:	b538      	push	{r3, r4, r5, lr}
   175e2:	4604      	mov	r4, r0
   175e4:	2103      	movs	r1, #3
   175e6:	3008      	adds	r0, #8
   175e8:	f00f f842 	bl	26670 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   175ec:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   175ee:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   175f0:	4622      	mov	r2, r4
   175f2:	7819      	ldrb	r1, [r3, #0]
   175f4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   175f8:	f7ff fe94 	bl	17324 <hci_cmd_done>
	if (ncmd) {
   175fc:	b905      	cbnz	r5, 17600 <hci_cmd_complete+0x20>
}
   175fe:	bd38      	pop	{r3, r4, r5, pc}
   17600:	4801      	ldr	r0, [pc, #4]	; (17608 <hci_cmd_complete+0x28>)
   17602:	f009 fd53 	bl	210ac <z_impl_k_sem_give>
   17606:	e7fa      	b.n	175fe <hci_cmd_complete+0x1e>
   17608:	200003c8 	.word	0x200003c8

0001760c <hci_hardware_error>:
{
   1760c:	b500      	push	{lr}
   1760e:	b089      	sub	sp, #36	; 0x24
   17610:	2101      	movs	r1, #1
   17612:	3008      	adds	r0, #8
   17614:	f00f f82c 	bl	26670 <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17618:	4b13      	ldr	r3, [pc, #76]	; (17668 <hci_hardware_error+0x5c>)
   1761a:	9306      	str	r3, [sp, #24]
   1761c:	7803      	ldrb	r3, [r0, #0]
   1761e:	9307      	str	r3, [sp, #28]
   17620:	2300      	movs	r3, #0
   17622:	f8ad 3005 	strh.w	r3, [sp, #5]
   17626:	f88d 3007 	strb.w	r3, [sp, #7]
   1762a:	2203      	movs	r2, #3
   1762c:	f88d 2004 	strb.w	r2, [sp, #4]
   17630:	f88d 3006 	strb.w	r3, [sp, #6]
   17634:	9a01      	ldr	r2, [sp, #4]
   17636:	9205      	str	r2, [sp, #20]
   17638:	461a      	mov	r2, r3
   1763a:	f363 0200 	bfi	r2, r3, #0, #1
   1763e:	f363 0241 	bfi	r2, r3, #1, #1
   17642:	f363 0282 	bfi	r2, r3, #2, #1
   17646:	f363 02c5 	bfi	r2, r3, #3, #3
   1764a:	2101      	movs	r1, #1
   1764c:	f361 1288 	bfi	r2, r1, #6, #3
   17650:	210c      	movs	r1, #12
   17652:	f361 2252 	bfi	r2, r1, #9, #10
   17656:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1765a:	4904      	ldr	r1, [pc, #16]	; (1766c <hci_hardware_error+0x60>)
   1765c:	a802      	add	r0, sp, #8
   1765e:	f00c fc75 	bl	23f4c <z_log_msg2_finalize>
}
   17662:	b009      	add	sp, #36	; 0x24
   17664:	f85d fb04 	ldr.w	pc, [sp], #4
   17668:	000298a8 	.word	0x000298a8
   1766c:	000288a4 	.word	0x000288a4

00017670 <hci_vendor_event>:
{
   17670:	b500      	push	{lr}
   17672:	b085      	sub	sp, #20
		BT_WARN("Unhandled vendor-specific event: %s",
   17674:	8981      	ldrh	r1, [r0, #12]
   17676:	6880      	ldr	r0, [r0, #8]
   17678:	f7ff f9ea 	bl	16a50 <bt_hex_real>
   1767c:	9002      	str	r0, [sp, #8]
   1767e:	4b06      	ldr	r3, [pc, #24]	; (17698 <hci_vendor_event+0x28>)
   17680:	9301      	str	r3, [sp, #4]
   17682:	2000      	movs	r0, #0
   17684:	9000      	str	r0, [sp, #0]
   17686:	4603      	mov	r3, r0
   17688:	2202      	movs	r2, #2
   1768a:	4904      	ldr	r1, [pc, #16]	; (1769c <hci_vendor_event+0x2c>)
   1768c:	f00c ff0d 	bl	244aa <z_log_msg2_runtime_create>
}
   17690:	b005      	add	sp, #20
   17692:	f85d fb04 	ldr.w	pc, [sp], #4
   17696:	bf00      	nop
   17698:	000298cc 	.word	0x000298cc
   1769c:	000288a4 	.word	0x000288a4

000176a0 <hci_acl>:
{
   176a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   176a2:	b089      	sub	sp, #36	; 0x24
   176a4:	af00      	add	r7, sp, #0
   176a6:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   176a8:	8983      	ldrh	r3, [r0, #12]
   176aa:	2b03      	cmp	r3, #3
   176ac:	d94e      	bls.n	1774c <hci_acl+0xac>
   176ae:	2104      	movs	r1, #4
   176b0:	f104 0008 	add.w	r0, r4, #8
   176b4:	f00e ffdc 	bl	26670 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   176b8:	8841      	ldrh	r1, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   176ba:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   176bc:	0b05      	lsrs	r5, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   176be:	f3c0 000b 	ubfx	r0, r0, #0, #12
   176c2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   176c4:	23ff      	movs	r3, #255	; 0xff
   176c6:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   176c8:	89a3      	ldrh	r3, [r4, #12]
   176ca:	428b      	cmp	r3, r1
   176cc:	d052      	beq.n	17774 <hci_acl+0xd4>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   176ce:	466d      	mov	r5, sp
   176d0:	b088      	sub	sp, #32
   176d2:	4668      	mov	r0, sp
   176d4:	f110 030c 	adds.w	r3, r0, #12
   176d8:	d046      	beq.n	17768 <hci_acl+0xc8>
   176da:	2210      	movs	r2, #16
   176dc:	b11b      	cbz	r3, 176e6 <hci_acl+0x46>
   176de:	2a04      	cmp	r2, #4
   176e0:	dd01      	ble.n	176e6 <hci_acl+0x46>
   176e2:	4e40      	ldr	r6, [pc, #256]	; (177e4 <hci_acl+0x144>)
   176e4:	6106      	str	r6, [r0, #16]
   176e6:	89a6      	ldrh	r6, [r4, #12]
   176e8:	b113      	cbz	r3, 176f0 <hci_acl+0x50>
   176ea:	2a08      	cmp	r2, #8
   176ec:	dd00      	ble.n	176f0 <hci_acl+0x50>
   176ee:	6146      	str	r6, [r0, #20]
   176f0:	b113      	cbz	r3, 176f8 <hci_acl+0x58>
   176f2:	2a0c      	cmp	r2, #12
   176f4:	dd00      	ble.n	176f8 <hci_acl+0x58>
   176f6:	6181      	str	r1, [r0, #24]
   176f8:	2a0f      	cmp	r2, #15
   176fa:	dd38      	ble.n	1776e <hci_acl+0xce>
   176fc:	2110      	movs	r1, #16
   176fe:	b143      	cbz	r3, 17712 <hci_acl+0x72>
   17700:	2300      	movs	r3, #0
   17702:	f8a7 3005 	strh.w	r3, [r7, #5]
   17706:	71fb      	strb	r3, [r7, #7]
   17708:	2204      	movs	r2, #4
   1770a:	713a      	strb	r2, [r7, #4]
   1770c:	71bb      	strb	r3, [r7, #6]
   1770e:	687b      	ldr	r3, [r7, #4]
   17710:	60c3      	str	r3, [r0, #12]
   17712:	2200      	movs	r2, #0
   17714:	f36f 0200 	bfc	r2, #0, #1
   17718:	f36f 0241 	bfc	r2, #1, #1
   1771c:	f36f 0282 	bfc	r2, #2, #1
   17720:	f36f 02c5 	bfc	r2, #3, #3
   17724:	2301      	movs	r3, #1
   17726:	f363 1288 	bfi	r2, r3, #6, #3
   1772a:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   1772e:	f363 2252 	bfi	r2, r3, #9, #10
   17732:	2300      	movs	r3, #0
   17734:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17738:	492b      	ldr	r1, [pc, #172]	; (177e8 <hci_acl+0x148>)
   1773a:	f00c fc07 	bl	23f4c <z_log_msg2_finalize>
   1773e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17740:	4620      	mov	r0, r4
   17742:	f00e ff23 	bl	2658c <net_buf_unref>
}
   17746:	3724      	adds	r7, #36	; 0x24
   17748:	46bd      	mov	sp, r7
   1774a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1774c:	f240 13b5 	movw	r3, #437	; 0x1b5
   17750:	4a26      	ldr	r2, [pc, #152]	; (177ec <hci_acl+0x14c>)
   17752:	4927      	ldr	r1, [pc, #156]	; (177f0 <hci_acl+0x150>)
   17754:	4827      	ldr	r0, [pc, #156]	; (177f4 <hci_acl+0x154>)
   17756:	f00b ffbf 	bl	236d8 <printk>
   1775a:	4040      	eors	r0, r0
   1775c:	f380 8811 	msr	BASEPRI, r0
   17760:	f04f 0003 	mov.w	r0, #3
   17764:	df02      	svc	2
   17766:	e7a2      	b.n	176ae <hci_acl+0xe>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   17768:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1776c:	e7b6      	b.n	176dc <hci_acl+0x3c>
   1776e:	f06f 011b 	mvn.w	r1, #27
   17772:	e7c4      	b.n	176fe <hci_acl+0x5e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   17774:	f002 ffba 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   17778:	4606      	mov	r6, r0
   1777a:	b158      	cbz	r0, 17794 <hci_acl+0xf4>
	acl(buf)->index = bt_conn_index(conn);
   1777c:	f003 f8dc 	bl	1a938 <bt_conn_index>
   17780:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   17782:	462a      	mov	r2, r5
   17784:	4621      	mov	r1, r4
   17786:	4630      	mov	r0, r6
   17788:	f00d fa98 	bl	24cbc <bt_conn_recv>
	bt_conn_unref(conn);
   1778c:	4630      	mov	r0, r6
   1778e:	f00d fac8 	bl	24d22 <bt_conn_unref>
   17792:	e7d8      	b.n	17746 <hci_acl+0xa6>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17794:	8ae3      	ldrh	r3, [r4, #22]
   17796:	4a18      	ldr	r2, [pc, #96]	; (177f8 <hci_acl+0x158>)
   17798:	61ba      	str	r2, [r7, #24]
   1779a:	61fb      	str	r3, [r7, #28]
   1779c:	2300      	movs	r3, #0
   1779e:	f8a7 3005 	strh.w	r3, [r7, #5]
   177a2:	71fb      	strb	r3, [r7, #7]
   177a4:	2203      	movs	r2, #3
   177a6:	713a      	strb	r2, [r7, #4]
   177a8:	71bb      	strb	r3, [r7, #6]
   177aa:	687a      	ldr	r2, [r7, #4]
   177ac:	617a      	str	r2, [r7, #20]
   177ae:	461a      	mov	r2, r3
   177b0:	f363 0200 	bfi	r2, r3, #0, #1
   177b4:	f363 0241 	bfi	r2, r3, #1, #1
   177b8:	f363 0282 	bfi	r2, r3, #2, #1
   177bc:	f363 02c5 	bfi	r2, r3, #3, #3
   177c0:	2101      	movs	r1, #1
   177c2:	f361 1288 	bfi	r2, r1, #6, #3
   177c6:	210c      	movs	r1, #12
   177c8:	f361 2252 	bfi	r2, r1, #9, #10
   177cc:	f3c2 0212 	ubfx	r2, r2, #0, #19
   177d0:	4905      	ldr	r1, [pc, #20]	; (177e8 <hci_acl+0x148>)
   177d2:	f107 0008 	add.w	r0, r7, #8
   177d6:	f00c fbb9 	bl	23f4c <z_log_msg2_finalize>
		net_buf_unref(buf);
   177da:	4620      	mov	r0, r4
   177dc:	f00e fed6 	bl	2658c <net_buf_unref>
		return;
   177e0:	e7b1      	b.n	17746 <hci_acl+0xa6>
   177e2:	bf00      	nop
   177e4:	00029960 	.word	0x00029960
   177e8:	000288a4 	.word	0x000288a4
   177ec:	000298f0 	.word	0x000298f0
   177f0:	00029924 	.word	0x00029924
   177f4:	00029940 	.word	0x00029940
   177f8:	00029984 	.word	0x00029984

000177fc <le_conn_update_complete>:
{
   177fc:	b570      	push	{r4, r5, r6, lr}
   177fe:	b088      	sub	sp, #32
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17800:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17802:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   17806:	4630      	mov	r0, r6
   17808:	f002 ff70 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   1780c:	b148      	cbz	r0, 17822 <le_conn_update_complete+0x26>
   1780e:	4605      	mov	r5, r0
	if (!evt->status) {
   17810:	7823      	ldrb	r3, [r4, #0]
   17812:	b35b      	cbz	r3, 1786c <le_conn_update_complete+0x70>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   17814:	2b1a      	cmp	r3, #26
   17816:	d038      	beq.n	1788a <le_conn_update_complete+0x8e>
	bt_conn_unref(conn);
   17818:	4628      	mov	r0, r5
   1781a:	f00d fa82 	bl	24d22 <bt_conn_unref>
}
   1781e:	b008      	add	sp, #32
   17820:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17822:	4b2e      	ldr	r3, [pc, #184]	; (178dc <le_conn_update_complete+0xe0>)
   17824:	9306      	str	r3, [sp, #24]
   17826:	9607      	str	r6, [sp, #28]
   17828:	2300      	movs	r3, #0
   1782a:	f8ad 3001 	strh.w	r3, [sp, #1]
   1782e:	f88d 3003 	strb.w	r3, [sp, #3]
   17832:	2203      	movs	r2, #3
   17834:	f88d 2000 	strb.w	r2, [sp]
   17838:	f88d 3002 	strb.w	r3, [sp, #2]
   1783c:	9a00      	ldr	r2, [sp, #0]
   1783e:	9205      	str	r2, [sp, #20]
   17840:	461a      	mov	r2, r3
   17842:	f363 0200 	bfi	r2, r3, #0, #1
   17846:	f363 0241 	bfi	r2, r3, #1, #1
   1784a:	f363 0282 	bfi	r2, r3, #2, #1
   1784e:	f363 02c5 	bfi	r2, r3, #3, #3
   17852:	2101      	movs	r1, #1
   17854:	f361 1288 	bfi	r2, r1, #6, #3
   17858:	210c      	movs	r1, #12
   1785a:	f361 2252 	bfi	r2, r1, #9, #10
   1785e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17862:	491f      	ldr	r1, [pc, #124]	; (178e0 <le_conn_update_complete+0xe4>)
   17864:	a802      	add	r0, sp, #8
   17866:	f00c fb71 	bl	23f4c <z_log_msg2_finalize>
		return;
   1786a:	e7d8      	b.n	1781e <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1786c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   17870:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   17874:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   17878:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1787c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   17880:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   17884:	f003 f8a0 	bl	1a9c8 <notify_le_param_updated>
   17888:	e7c6      	b.n	17818 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1788a:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1788c:	2b01      	cmp	r3, #1
   1788e:	d1c3      	bne.n	17818 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   17890:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17892:	f3bf 8f5b 	dmb	ish
   17896:	e853 2f00 	ldrex	r2, [r3]
   1789a:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1789e:	e843 1000 	strex	r0, r1, [r3]
   178a2:	2800      	cmp	r0, #0
   178a4:	d1f7      	bne.n	17896 <le_conn_update_complete+0x9a>
   178a6:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   178aa:	f412 6f80 	tst.w	r2, #1024	; 0x400
   178ae:	d1b3      	bne.n	17818 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   178b0:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   178b4:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   178b8:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   178bc:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   178c0:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   178c4:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   178c8:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   178cc:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   178d0:	4669      	mov	r1, sp
   178d2:	4628      	mov	r0, r5
   178d4:	f00d fbc8 	bl	25068 <bt_l2cap_update_conn_param>
   178d8:	e79e      	b.n	17818 <le_conn_update_complete+0x1c>
   178da:	bf00      	nop
   178dc:	000297e4 	.word	0x000297e4
   178e0:	000288a4 	.word	0x000288a4

000178e4 <hci_le_meta_event>:
{
   178e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   178e6:	b089      	sub	sp, #36	; 0x24
   178e8:	af06      	add	r7, sp, #24
   178ea:	4604      	mov	r4, r0
   178ec:	2101      	movs	r1, #1
   178ee:	3008      	adds	r0, #8
   178f0:	f00e febe 	bl	26670 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   178f4:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   178f6:	2300      	movs	r3, #0
   178f8:	2b06      	cmp	r3, #6
   178fa:	d852      	bhi.n	179a2 <hci_le_meta_event+0xbe>
		const struct event_handler *handler = &handlers[i];
   178fc:	4a32      	ldr	r2, [pc, #200]	; (179c8 <hci_le_meta_event+0xe4>)
   178fe:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   17902:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17906:	4295      	cmp	r5, r2
   17908:	d109      	bne.n	1791e <hci_le_meta_event+0x3a>
		if (buf->len < handler->min_len) {
   1790a:	89a2      	ldrh	r2, [r4, #12]
   1790c:	784b      	ldrb	r3, [r1, #1]
   1790e:	429a      	cmp	r2, r3
   17910:	d307      	bcc.n	17922 <hci_le_meta_event+0x3e>
		handler->handler(buf);
   17912:	684b      	ldr	r3, [r1, #4]
   17914:	4620      	mov	r0, r4
   17916:	4798      	blx	r3
}
   17918:	370c      	adds	r7, #12
   1791a:	46bd      	mov	sp, r7
   1791c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   1791e:	3301      	adds	r3, #1
   17920:	e7ea      	b.n	178f8 <hci_le_meta_event+0x14>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17922:	466e      	mov	r6, sp
   17924:	b088      	sub	sp, #32
   17926:	a806      	add	r0, sp, #24
   17928:	466b      	mov	r3, sp
   1792a:	3324      	adds	r3, #36	; 0x24
   1792c:	d033      	beq.n	17996 <hci_le_meta_event+0xb2>
   1792e:	2210      	movs	r2, #16
   17930:	b11b      	cbz	r3, 1793a <hci_le_meta_event+0x56>
   17932:	2a04      	cmp	r2, #4
   17934:	dd01      	ble.n	1793a <hci_le_meta_event+0x56>
   17936:	4925      	ldr	r1, [pc, #148]	; (179cc <hci_le_meta_event+0xe8>)
   17938:	6101      	str	r1, [r0, #16]
   1793a:	89a1      	ldrh	r1, [r4, #12]
   1793c:	b113      	cbz	r3, 17944 <hci_le_meta_event+0x60>
   1793e:	2a08      	cmp	r2, #8
   17940:	dd00      	ble.n	17944 <hci_le_meta_event+0x60>
   17942:	6141      	str	r1, [r0, #20]
   17944:	b113      	cbz	r3, 1794c <hci_le_meta_event+0x68>
   17946:	2a0c      	cmp	r2, #12
   17948:	dd00      	ble.n	1794c <hci_le_meta_event+0x68>
   1794a:	6185      	str	r5, [r0, #24]
   1794c:	2a0f      	cmp	r2, #15
   1794e:	dd25      	ble.n	1799c <hci_le_meta_event+0xb8>
   17950:	2110      	movs	r1, #16
   17952:	b143      	cbz	r3, 17966 <hci_le_meta_event+0x82>
   17954:	2300      	movs	r3, #0
   17956:	f8a7 3005 	strh.w	r3, [r7, #5]
   1795a:	71fb      	strb	r3, [r7, #7]
   1795c:	2204      	movs	r2, #4
   1795e:	713a      	strb	r2, [r7, #4]
   17960:	71bb      	strb	r3, [r7, #6]
   17962:	687b      	ldr	r3, [r7, #4]
   17964:	60c3      	str	r3, [r0, #12]
   17966:	2200      	movs	r2, #0
   17968:	f36f 0200 	bfc	r2, #0, #1
   1796c:	f36f 0241 	bfc	r2, #1, #1
   17970:	f36f 0282 	bfc	r2, #2, #1
   17974:	f36f 02c5 	bfc	r2, #3, #3
   17978:	2301      	movs	r3, #1
   1797a:	f363 1288 	bfi	r2, r3, #6, #3
   1797e:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   17982:	f363 2252 	bfi	r2, r3, #9, #10
   17986:	2300      	movs	r3, #0
   17988:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1798c:	4910      	ldr	r1, [pc, #64]	; (179d0 <hci_le_meta_event+0xec>)
   1798e:	f00c fadd 	bl	23f4c <z_log_msg2_finalize>
   17992:	46b5      	mov	sp, r6
			return;
   17994:	e7c0      	b.n	17918 <hci_le_meta_event+0x34>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17996:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1799a:	e7c9      	b.n	17930 <hci_le_meta_event+0x4c>
   1799c:	f06f 011b 	mvn.w	r1, #27
   179a0:	e7d7      	b.n	17952 <hci_le_meta_event+0x6e>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   179a2:	89a6      	ldrh	r6, [r4, #12]
   179a4:	4631      	mov	r1, r6
   179a6:	68a0      	ldr	r0, [r4, #8]
   179a8:	f7ff f852 	bl	16a50 <bt_hex_real>
   179ac:	9004      	str	r0, [sp, #16]
   179ae:	9603      	str	r6, [sp, #12]
   179b0:	9502      	str	r5, [sp, #8]
   179b2:	4b08      	ldr	r3, [pc, #32]	; (179d4 <hci_le_meta_event+0xf0>)
   179b4:	9301      	str	r3, [sp, #4]
   179b6:	2000      	movs	r0, #0
   179b8:	9000      	str	r0, [sp, #0]
   179ba:	4603      	mov	r3, r0
   179bc:	2202      	movs	r2, #2
   179be:	4904      	ldr	r1, [pc, #16]	; (179d0 <hci_le_meta_event+0xec>)
   179c0:	f00c fd73 	bl	244aa <z_log_msg2_runtime_create>
}
   179c4:	e7a8      	b.n	17918 <hci_le_meta_event+0x34>
   179c6:	bf00      	nop
   179c8:	00029d5c 	.word	0x00029d5c
   179cc:	000299a8 	.word	0x000299a8
   179d0:	000288a4 	.word	0x000288a4
   179d4:	000299cc 	.word	0x000299cc

000179d8 <hci_event>:
{
   179d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   179da:	b089      	sub	sp, #36	; 0x24
   179dc:	af06      	add	r7, sp, #24
   179de:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   179e0:	8983      	ldrh	r3, [r0, #12]
   179e2:	2b01      	cmp	r3, #1
   179e4:	d916      	bls.n	17a14 <hci_event+0x3c>
   179e6:	2102      	movs	r1, #2
   179e8:	f104 0008 	add.w	r0, r4, #8
   179ec:	f00e fe40 	bl	26670 <net_buf_simple_pull_mem>
   179f0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   179f2:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   179f4:	3b05      	subs	r3, #5
   179f6:	2b15      	cmp	r3, #21
   179f8:	d81c      	bhi.n	17a34 <hci_event+0x5c>
   179fa:	e8df f003 	tbb	[pc, r3]
   179fe:	1b19      	.short	0x1b19
   17a00:	1b1b1b1b 	.word	0x1b1b1b1b
   17a04:	371b1b1b 	.word	0x371b1b1b
   17a08:	1b1b1b37 	.word	0x1b1b1b37
   17a0c:	1b1b1b37 	.word	0x1b1b1b37
   17a10:	371b1b1b 	.word	0x371b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17a14:	f640 1317 	movw	r3, #2327	; 0x917
   17a18:	4a46      	ldr	r2, [pc, #280]	; (17b34 <hci_event+0x15c>)
   17a1a:	4947      	ldr	r1, [pc, #284]	; (17b38 <hci_event+0x160>)
   17a1c:	4847      	ldr	r0, [pc, #284]	; (17b3c <hci_event+0x164>)
   17a1e:	f00b fe5b 	bl	236d8 <printk>
   17a22:	4040      	eors	r0, r0
   17a24:	f380 8811 	msr	BASEPRI, r0
   17a28:	f04f 0003 	mov.w	r0, #3
   17a2c:	df02      	svc	2
   17a2e:	e7da      	b.n	179e6 <hci_event+0xe>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17a30:	2303      	movs	r3, #3
   17a32:	e000      	b.n	17a36 <hci_event+0x5e>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   17a34:	2302      	movs	r3, #2
   17a36:	f013 0f02 	tst.w	r3, #2
   17a3a:	d019      	beq.n	17a70 <hci_event+0x98>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   17a3c:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   17a3e:	2300      	movs	r3, #0
   17a40:	2b03      	cmp	r3, #3
   17a42:	d865      	bhi.n	17b10 <hci_event+0x138>
		const struct event_handler *handler = &handlers[i];
   17a44:	4a3e      	ldr	r2, [pc, #248]	; (17b40 <hci_event+0x168>)
   17a46:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   17a4a:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17a4e:	4295      	cmp	r5, r2
   17a50:	d11c      	bne.n	17a8c <hci_event+0xb4>
		if (buf->len < handler->min_len) {
   17a52:	89a2      	ldrh	r2, [r4, #12]
   17a54:	784b      	ldrb	r3, [r1, #1]
   17a56:	429a      	cmp	r2, r3
   17a58:	d31a      	bcc.n	17a90 <hci_event+0xb8>
		handler->handler(buf);
   17a5a:	684b      	ldr	r3, [r1, #4]
   17a5c:	4620      	mov	r0, r4
   17a5e:	4798      	blx	r3
	net_buf_unref(buf);
   17a60:	4620      	mov	r0, r4
   17a62:	f00e fd93 	bl	2658c <net_buf_unref>
}
   17a66:	370c      	adds	r7, #12
   17a68:	46bd      	mov	sp, r7
   17a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   17a6c:	2301      	movs	r3, #1
   17a6e:	e7e2      	b.n	17a36 <hci_event+0x5e>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17a70:	f640 131b 	movw	r3, #2331	; 0x91b
   17a74:	4a2f      	ldr	r2, [pc, #188]	; (17b34 <hci_event+0x15c>)
   17a76:	4933      	ldr	r1, [pc, #204]	; (17b44 <hci_event+0x16c>)
   17a78:	4830      	ldr	r0, [pc, #192]	; (17b3c <hci_event+0x164>)
   17a7a:	f00b fe2d 	bl	236d8 <printk>
   17a7e:	4040      	eors	r0, r0
   17a80:	f380 8811 	msr	BASEPRI, r0
   17a84:	f04f 0003 	mov.w	r0, #3
   17a88:	df02      	svc	2
   17a8a:	e7d7      	b.n	17a3c <hci_event+0x64>
	for (i = 0; i < num_handlers; i++) {
   17a8c:	3301      	adds	r3, #1
   17a8e:	e7d7      	b.n	17a40 <hci_event+0x68>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17a90:	466e      	mov	r6, sp
   17a92:	b088      	sub	sp, #32
   17a94:	a806      	add	r0, sp, #24
   17a96:	466b      	mov	r3, sp
   17a98:	3324      	adds	r3, #36	; 0x24
   17a9a:	d033      	beq.n	17b04 <hci_event+0x12c>
   17a9c:	2210      	movs	r2, #16
   17a9e:	b11b      	cbz	r3, 17aa8 <hci_event+0xd0>
   17aa0:	2a04      	cmp	r2, #4
   17aa2:	dd01      	ble.n	17aa8 <hci_event+0xd0>
   17aa4:	4928      	ldr	r1, [pc, #160]	; (17b48 <hci_event+0x170>)
   17aa6:	6101      	str	r1, [r0, #16]
   17aa8:	89a1      	ldrh	r1, [r4, #12]
   17aaa:	b113      	cbz	r3, 17ab2 <hci_event+0xda>
   17aac:	2a08      	cmp	r2, #8
   17aae:	dd00      	ble.n	17ab2 <hci_event+0xda>
   17ab0:	6141      	str	r1, [r0, #20]
   17ab2:	b113      	cbz	r3, 17aba <hci_event+0xe2>
   17ab4:	2a0c      	cmp	r2, #12
   17ab6:	dd00      	ble.n	17aba <hci_event+0xe2>
   17ab8:	6185      	str	r5, [r0, #24]
   17aba:	2a0f      	cmp	r2, #15
   17abc:	dd25      	ble.n	17b0a <hci_event+0x132>
   17abe:	2110      	movs	r1, #16
   17ac0:	b143      	cbz	r3, 17ad4 <hci_event+0xfc>
   17ac2:	2300      	movs	r3, #0
   17ac4:	f8a7 3005 	strh.w	r3, [r7, #5]
   17ac8:	71fb      	strb	r3, [r7, #7]
   17aca:	2204      	movs	r2, #4
   17acc:	713a      	strb	r2, [r7, #4]
   17ace:	71bb      	strb	r3, [r7, #6]
   17ad0:	687b      	ldr	r3, [r7, #4]
   17ad2:	60c3      	str	r3, [r0, #12]
   17ad4:	2200      	movs	r2, #0
   17ad6:	f36f 0200 	bfc	r2, #0, #1
   17ada:	f36f 0241 	bfc	r2, #1, #1
   17ade:	f36f 0282 	bfc	r2, #2, #1
   17ae2:	f36f 02c5 	bfc	r2, #3, #3
   17ae6:	2301      	movs	r3, #1
   17ae8:	f363 1288 	bfi	r2, r3, #6, #3
   17aec:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   17af0:	f363 2252 	bfi	r2, r3, #9, #10
   17af4:	2300      	movs	r3, #0
   17af6:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17afa:	4914      	ldr	r1, [pc, #80]	; (17b4c <hci_event+0x174>)
   17afc:	f00c fa26 	bl	23f4c <z_log_msg2_finalize>
   17b00:	46b5      	mov	sp, r6
			return;
   17b02:	e7ad      	b.n	17a60 <hci_event+0x88>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17b04:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17b08:	e7c9      	b.n	17a9e <hci_event+0xc6>
   17b0a:	f06f 011b 	mvn.w	r1, #27
   17b0e:	e7d7      	b.n	17ac0 <hci_event+0xe8>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   17b10:	89a6      	ldrh	r6, [r4, #12]
   17b12:	4631      	mov	r1, r6
   17b14:	68a0      	ldr	r0, [r4, #8]
   17b16:	f7fe ff9b 	bl	16a50 <bt_hex_real>
   17b1a:	9004      	str	r0, [sp, #16]
   17b1c:	9603      	str	r6, [sp, #12]
   17b1e:	9502      	str	r5, [sp, #8]
   17b20:	4b0b      	ldr	r3, [pc, #44]	; (17b50 <hci_event+0x178>)
   17b22:	9301      	str	r3, [sp, #4]
   17b24:	2000      	movs	r0, #0
   17b26:	9000      	str	r0, [sp, #0]
   17b28:	4603      	mov	r3, r0
   17b2a:	2202      	movs	r2, #2
   17b2c:	4907      	ldr	r1, [pc, #28]	; (17b4c <hci_event+0x174>)
   17b2e:	f00c fcbc 	bl	244aa <z_log_msg2_runtime_create>
   17b32:	e795      	b.n	17a60 <hci_event+0x88>
   17b34:	000298f0 	.word	0x000298f0
   17b38:	00029924 	.word	0x00029924
   17b3c:	00029940 	.word	0x00029940
   17b40:	00029db4 	.word	0x00029db4
   17b44:	000299f0 	.word	0x000299f0
   17b48:	000299a8 	.word	0x000299a8
   17b4c:	000288a4 	.word	0x000288a4
   17b50:	000299cc 	.word	0x000299cc

00017b54 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   17b54:	b530      	push	{r4, r5, lr}
   17b56:	b089      	sub	sp, #36	; 0x24
   17b58:	e003      	b.n	17b62 <hci_rx_thread+0xe>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   17b5a:	f7ff ff3d 	bl	179d8 <hci_event>
	z_impl_k_yield();
   17b5e:	f009 ffc1 	bl	21ae4 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   17b62:	f04f 32ff 	mov.w	r2, #4294967295
   17b66:	f04f 33ff 	mov.w	r3, #4294967295
   17b6a:	481b      	ldr	r0, [pc, #108]	; (17bd8 <hci_rx_thread+0x84>)
   17b6c:	f00e fce2 	bl	26534 <net_buf_get>
   17b70:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17b72:	7d03      	ldrb	r3, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   17b74:	2b01      	cmp	r3, #1
   17b76:	d0f0      	beq.n	17b5a <hci_rx_thread+0x6>
   17b78:	2b03      	cmp	r3, #3
   17b7a:	d102      	bne.n	17b82 <hci_rx_thread+0x2e>
			hci_acl(buf);
   17b7c:	f7ff fd90 	bl	176a0 <hci_acl>
			break;
   17b80:	e7ed      	b.n	17b5e <hci_rx_thread+0xa>
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17b82:	4a16      	ldr	r2, [pc, #88]	; (17bdc <hci_rx_thread+0x88>)
   17b84:	9206      	str	r2, [sp, #24]
   17b86:	9307      	str	r3, [sp, #28]
   17b88:	2300      	movs	r3, #0
   17b8a:	f8ad 3005 	strh.w	r3, [sp, #5]
   17b8e:	f88d 3007 	strb.w	r3, [sp, #7]
   17b92:	2203      	movs	r2, #3
   17b94:	f88d 2004 	strb.w	r2, [sp, #4]
   17b98:	f88d 3006 	strb.w	r3, [sp, #6]
   17b9c:	9a01      	ldr	r2, [sp, #4]
   17b9e:	9205      	str	r2, [sp, #20]
   17ba0:	f363 0500 	bfi	r5, r3, #0, #1
   17ba4:	f363 0541 	bfi	r5, r3, #1, #1
   17ba8:	f363 0582 	bfi	r5, r3, #2, #1
   17bac:	f363 05c5 	bfi	r5, r3, #3, #3
   17bb0:	2201      	movs	r2, #1
   17bb2:	f362 1588 	bfi	r5, r2, #6, #3
   17bb6:	220c      	movs	r2, #12
   17bb8:	f362 2552 	bfi	r5, r2, #9, #10
   17bbc:	f363 45de 	bfi	r5, r3, #19, #12
   17bc0:	f363 75df 	bfi	r5, r3, #31, #1
   17bc4:	462a      	mov	r2, r5
   17bc6:	4906      	ldr	r1, [pc, #24]	; (17be0 <hci_rx_thread+0x8c>)
   17bc8:	a802      	add	r0, sp, #8
   17bca:	f00c f9bf 	bl	23f4c <z_log_msg2_finalize>
			net_buf_unref(buf);
   17bce:	4620      	mov	r0, r4
   17bd0:	f00e fcdc 	bl	2658c <net_buf_unref>
			break;
   17bd4:	e7c3      	b.n	17b5e <hci_rx_thread+0xa>
   17bd6:	bf00      	nop
   17bd8:	200003e4 	.word	0x200003e4
   17bdc:	00029a20 	.word	0x00029a20
   17be0:	000288a4 	.word	0x000288a4

00017be4 <bt_hci_cmd_state_set_init>:
{
   17be4:	b510      	push	{r4, lr}
   17be6:	460c      	mov	r4, r1
	state->target = target;
   17be8:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   17bea:	604b      	str	r3, [r1, #4]
	state->val = val;
   17bec:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17bf0:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   17bf2:	f00e fbe5 	bl	263c0 <net_buf_id>
   17bf6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17bfa:	4b02      	ldr	r3, [pc, #8]	; (17c04 <bt_hci_cmd_state_set_init+0x20>)
   17bfc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17c00:	6044      	str	r4, [r0, #4]
}
   17c02:	bd10      	pop	{r4, pc}
   17c04:	20002a80 	.word	0x20002a80

00017c08 <bt_hci_cmd_create>:
{
   17c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17c0c:	4682      	mov	sl, r0
   17c0e:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   17c10:	f04f 32ff 	mov.w	r2, #4294967295
   17c14:	f04f 33ff 	mov.w	r3, #4294967295
   17c18:	4817      	ldr	r0, [pc, #92]	; (17c78 <bt_hci_cmd_create+0x70>)
   17c1a:	f00e fc84 	bl	26526 <net_buf_alloc_fixed>
   17c1e:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   17c20:	f100 0808 	add.w	r8, r0, #8
   17c24:	2100      	movs	r1, #0
   17c26:	4640      	mov	r0, r8
   17c28:	f00e fc9f 	bl	2656a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17c2c:	2700      	movs	r7, #0
   17c2e:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   17c30:	4620      	mov	r0, r4
   17c32:	f00e fbc5 	bl	263c0 <net_buf_id>
   17c36:	4d11      	ldr	r5, [pc, #68]	; (17c7c <bt_hci_cmd_create+0x74>)
   17c38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17c3c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   17c40:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   17c44:	4620      	mov	r0, r4
   17c46:	f00e fbbb 	bl	263c0 <net_buf_id>
   17c4a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17c4e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   17c52:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   17c54:	4620      	mov	r0, r4
   17c56:	f00e fbb3 	bl	263c0 <net_buf_id>
   17c5a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17c5e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   17c62:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   17c64:	2103      	movs	r1, #3
   17c66:	4640      	mov	r0, r8
   17c68:	f00e fcda 	bl	26620 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   17c6c:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   17c70:	7086      	strb	r6, [r0, #2]
}
   17c72:	4620      	mov	r0, r4
   17c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17c78:	2000094c 	.word	0x2000094c
   17c7c:	20002a80 	.word	0x20002a80

00017c80 <bt_hci_cmd_send_sync>:
{
   17c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17c84:	b088      	sub	sp, #32
   17c86:	af00      	add	r7, sp, #0
   17c88:	4606      	mov	r6, r0
   17c8a:	4615      	mov	r5, r2
	if (!buf) {
   17c8c:	460c      	mov	r4, r1
   17c8e:	2900      	cmp	r1, #0
   17c90:	d06d      	beq.n	17d6e <bt_hci_cmd_send_sync+0xee>
	return z_impl_k_sem_init(sem, initial_count, limit);
   17c92:	f107 0808 	add.w	r8, r7, #8
   17c96:	2201      	movs	r2, #1
   17c98:	2100      	movs	r1, #0
   17c9a:	4640      	mov	r0, r8
   17c9c:	f00f ffed 	bl	27c7a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   17ca0:	4620      	mov	r0, r4
   17ca2:	f00e fb8d 	bl	263c0 <net_buf_id>
   17ca6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17caa:	4b48      	ldr	r3, [pc, #288]	; (17dcc <bt_hci_cmd_send_sync+0x14c>)
   17cac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17cb0:	f8c0 8008 	str.w	r8, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   17cb4:	4620      	mov	r0, r4
   17cb6:	f00e fc8f 	bl	265d8 <net_buf_ref>
   17cba:	4601      	mov	r1, r0
   17cbc:	4844      	ldr	r0, [pc, #272]	; (17dd0 <bt_hci_cmd_send_sync+0x150>)
   17cbe:	f00e fc58 	bl	26572 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   17cc2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   17cc6:	2300      	movs	r3, #0
   17cc8:	4640      	mov	r0, r8
   17cca:	f009 fa17 	bl	210fc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17cce:	4680      	mov	r8, r0
   17cd0:	2800      	cmp	r0, #0
   17cd2:	d154      	bne.n	17d7e <bt_hci_cmd_send_sync+0xfe>
	status = cmd(buf)->status;
   17cd4:	4620      	mov	r0, r4
   17cd6:	f00e fb73 	bl	263c0 <net_buf_id>
   17cda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17cde:	4b3b      	ldr	r3, [pc, #236]	; (17dcc <bt_hci_cmd_send_sync+0x14c>)
   17ce0:	f813 8020 	ldrb.w	r8, [r3, r0, lsl #2]
	if (status) {
   17ce4:	f1b8 0f00 	cmp.w	r8, #0
   17ce8:	d064      	beq.n	17db4 <bt_hci_cmd_send_sync+0x134>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   17cea:	466d      	mov	r5, sp
   17cec:	b088      	sub	sp, #32
   17cee:	4668      	mov	r0, sp
   17cf0:	f110 030c 	adds.w	r3, r0, #12
   17cf4:	d055      	beq.n	17da2 <bt_hci_cmd_send_sync+0x122>
   17cf6:	2210      	movs	r2, #16
   17cf8:	b11b      	cbz	r3, 17d02 <bt_hci_cmd_send_sync+0x82>
   17cfa:	2a04      	cmp	r2, #4
   17cfc:	dd01      	ble.n	17d02 <bt_hci_cmd_send_sync+0x82>
   17cfe:	4935      	ldr	r1, [pc, #212]	; (17dd4 <bt_hci_cmd_send_sync+0x154>)
   17d00:	6101      	str	r1, [r0, #16]
   17d02:	b113      	cbz	r3, 17d0a <bt_hci_cmd_send_sync+0x8a>
   17d04:	2a08      	cmp	r2, #8
   17d06:	dd00      	ble.n	17d0a <bt_hci_cmd_send_sync+0x8a>
   17d08:	6146      	str	r6, [r0, #20]
   17d0a:	b11b      	cbz	r3, 17d14 <bt_hci_cmd_send_sync+0x94>
   17d0c:	2a0c      	cmp	r2, #12
   17d0e:	dd01      	ble.n	17d14 <bt_hci_cmd_send_sync+0x94>
   17d10:	f8c0 8018 	str.w	r8, [r0, #24]
   17d14:	2a0f      	cmp	r2, #15
   17d16:	dd47      	ble.n	17da8 <bt_hci_cmd_send_sync+0x128>
   17d18:	2110      	movs	r1, #16
   17d1a:	b143      	cbz	r3, 17d2e <bt_hci_cmd_send_sync+0xae>
   17d1c:	2300      	movs	r3, #0
   17d1e:	f8a7 3005 	strh.w	r3, [r7, #5]
   17d22:	71fb      	strb	r3, [r7, #7]
   17d24:	2204      	movs	r2, #4
   17d26:	713a      	strb	r2, [r7, #4]
   17d28:	71bb      	strb	r3, [r7, #6]
   17d2a:	687b      	ldr	r3, [r7, #4]
   17d2c:	60c3      	str	r3, [r0, #12]
   17d2e:	2200      	movs	r2, #0
   17d30:	f36f 0200 	bfc	r2, #0, #1
   17d34:	f36f 0241 	bfc	r2, #1, #1
   17d38:	f36f 0282 	bfc	r2, #2, #1
   17d3c:	f36f 02c5 	bfc	r2, #3, #3
   17d40:	2302      	movs	r3, #2
   17d42:	f363 1288 	bfi	r2, r3, #6, #3
   17d46:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   17d4a:	f363 2252 	bfi	r2, r3, #9, #10
   17d4e:	2300      	movs	r3, #0
   17d50:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17d54:	4920      	ldr	r1, [pc, #128]	; (17dd8 <bt_hci_cmd_send_sync+0x158>)
   17d56:	f00c f8f9 	bl	23f4c <z_log_msg2_finalize>
   17d5a:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   17d5c:	4620      	mov	r0, r4
   17d5e:	f00e fc15 	bl	2658c <net_buf_unref>
		switch (status) {
   17d62:	f1b8 0f09 	cmp.w	r8, #9
   17d66:	d022      	beq.n	17dae <bt_hci_cmd_send_sync+0x12e>
			return -EIO;
   17d68:	f06f 0004 	mvn.w	r0, #4
   17d6c:	e025      	b.n	17dba <bt_hci_cmd_send_sync+0x13a>
		buf = bt_hci_cmd_create(opcode, 0);
   17d6e:	f7ff ff4b 	bl	17c08 <bt_hci_cmd_create>
		if (!buf) {
   17d72:	4604      	mov	r4, r0
   17d74:	2800      	cmp	r0, #0
   17d76:	d18c      	bne.n	17c92 <bt_hci_cmd_send_sync+0x12>
			return -ENOBUFS;
   17d78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17d7c:	e01d      	b.n	17dba <bt_hci_cmd_send_sync+0x13a>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   17d7e:	f240 1331 	movw	r3, #305	; 0x131
   17d82:	4a16      	ldr	r2, [pc, #88]	; (17ddc <bt_hci_cmd_send_sync+0x15c>)
   17d84:	4916      	ldr	r1, [pc, #88]	; (17de0 <bt_hci_cmd_send_sync+0x160>)
   17d86:	4817      	ldr	r0, [pc, #92]	; (17de4 <bt_hci_cmd_send_sync+0x164>)
   17d88:	f00b fca6 	bl	236d8 <printk>
   17d8c:	4641      	mov	r1, r8
   17d8e:	4816      	ldr	r0, [pc, #88]	; (17de8 <bt_hci_cmd_send_sync+0x168>)
   17d90:	f00b fca2 	bl	236d8 <printk>
   17d94:	4040      	eors	r0, r0
   17d96:	f380 8811 	msr	BASEPRI, r0
   17d9a:	f04f 0003 	mov.w	r0, #3
   17d9e:	df02      	svc	2
   17da0:	e798      	b.n	17cd4 <bt_hci_cmd_send_sync+0x54>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   17da2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17da6:	e7a7      	b.n	17cf8 <bt_hci_cmd_send_sync+0x78>
   17da8:	f06f 011b 	mvn.w	r1, #27
   17dac:	e7b5      	b.n	17d1a <bt_hci_cmd_send_sync+0x9a>
			return -ECONNREFUSED;
   17dae:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   17db2:	e002      	b.n	17dba <bt_hci_cmd_send_sync+0x13a>
	if (rsp) {
   17db4:	b12d      	cbz	r5, 17dc2 <bt_hci_cmd_send_sync+0x142>
		*rsp = buf;
   17db6:	602c      	str	r4, [r5, #0]
	return 0;
   17db8:	2000      	movs	r0, #0
}
   17dba:	3720      	adds	r7, #32
   17dbc:	46bd      	mov	sp, r7
   17dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   17dc2:	4620      	mov	r0, r4
   17dc4:	f00e fbe2 	bl	2658c <net_buf_unref>
	return 0;
   17dc8:	2000      	movs	r0, #0
   17dca:	e7f6      	b.n	17dba <bt_hci_cmd_send_sync+0x13a>
   17dcc:	20002a80 	.word	0x20002a80
   17dd0:	200003fc 	.word	0x200003fc
   17dd4:	00029a60 	.word	0x00029a60
   17dd8:	000288a4 	.word	0x000288a4
   17ddc:	000298f0 	.word	0x000298f0
   17de0:	00029a34 	.word	0x00029a34
   17de4:	00029940 	.word	0x00029940
   17de8:	00029a40 	.word	0x00029a40

00017dec <common_init>:
{
   17dec:	b510      	push	{r4, lr}
   17dee:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17df0:	4b22      	ldr	r3, [pc, #136]	; (17e7c <common_init+0x90>)
   17df2:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   17df6:	689b      	ldr	r3, [r3, #8]
   17df8:	f013 0f01 	tst.w	r3, #1
   17dfc:	d10d      	bne.n	17e1a <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   17dfe:	aa01      	add	r2, sp, #4
   17e00:	2100      	movs	r1, #0
   17e02:	f640 4003 	movw	r0, #3075	; 0xc03
   17e06:	f7ff ff3b 	bl	17c80 <bt_hci_cmd_send_sync>
		if (err) {
   17e0a:	4604      	mov	r4, r0
   17e0c:	b968      	cbnz	r0, 17e2a <common_init+0x3e>
		hci_reset_complete(rsp);
   17e0e:	9801      	ldr	r0, [sp, #4]
   17e10:	f7ff f828 	bl	16e64 <hci_reset_complete>
		net_buf_unref(rsp);
   17e14:	9801      	ldr	r0, [sp, #4]
   17e16:	f00e fbb9 	bl	2658c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   17e1a:	aa01      	add	r2, sp, #4
   17e1c:	2100      	movs	r1, #0
   17e1e:	f241 0003 	movw	r0, #4099	; 0x1003
   17e22:	f7ff ff2d 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   17e26:	4604      	mov	r4, r0
   17e28:	b110      	cbz	r0, 17e30 <common_init+0x44>
}
   17e2a:	4620      	mov	r0, r4
   17e2c:	b002      	add	sp, #8
   17e2e:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   17e30:	9801      	ldr	r0, [sp, #4]
   17e32:	f7fe ff79 	bl	16d28 <read_local_features_complete>
	net_buf_unref(rsp);
   17e36:	9801      	ldr	r0, [sp, #4]
   17e38:	f00e fba8 	bl	2658c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   17e3c:	aa01      	add	r2, sp, #4
   17e3e:	2100      	movs	r1, #0
   17e40:	f241 0001 	movw	r0, #4097	; 0x1001
   17e44:	f7ff ff1c 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   17e48:	4604      	mov	r4, r0
   17e4a:	2800      	cmp	r0, #0
   17e4c:	d1ed      	bne.n	17e2a <common_init+0x3e>
	read_local_ver_complete(rsp);
   17e4e:	9801      	ldr	r0, [sp, #4]
   17e50:	f7fe ff36 	bl	16cc0 <read_local_ver_complete>
	net_buf_unref(rsp);
   17e54:	9801      	ldr	r0, [sp, #4]
   17e56:	f00e fb99 	bl	2658c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   17e5a:	aa01      	add	r2, sp, #4
   17e5c:	2100      	movs	r1, #0
   17e5e:	f241 0002 	movw	r0, #4098	; 0x1002
   17e62:	f7ff ff0d 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   17e66:	4604      	mov	r4, r0
   17e68:	2800      	cmp	r0, #0
   17e6a:	d1de      	bne.n	17e2a <common_init+0x3e>
	read_supported_commands_complete(rsp);
   17e6c:	9801      	ldr	r0, [sp, #4]
   17e6e:	f7fe ff47 	bl	16d00 <read_supported_commands_complete>
	net_buf_unref(rsp);
   17e72:	9801      	ldr	r0, [sp, #4]
   17e74:	f00e fb8a 	bl	2658c <net_buf_unref>
	return 0;
   17e78:	e7d7      	b.n	17e2a <common_init+0x3e>
   17e7a:	bf00      	nop
   17e7c:	200002b0 	.word	0x200002b0

00017e80 <hci_le_read_max_data_len>:
{
   17e80:	b570      	push	{r4, r5, r6, lr}
   17e82:	b088      	sub	sp, #32
   17e84:	4605      	mov	r5, r0
   17e86:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17e88:	aa01      	add	r2, sp, #4
   17e8a:	2100      	movs	r1, #0
   17e8c:	f242 002f 	movw	r0, #8239	; 0x202f
   17e90:	f7ff fef6 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   17e94:	4606      	mov	r6, r0
   17e96:	b960      	cbnz	r0, 17eb2 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   17e98:	9801      	ldr	r0, [sp, #4]
   17e9a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17e9c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17ea0:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17ea2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17ea6:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   17ea8:	f00e fb70 	bl	2658c <net_buf_unref>
}
   17eac:	4630      	mov	r0, r6
   17eae:	b008      	add	sp, #32
   17eb0:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Failed to read DLE max data len");
   17eb2:	4b12      	ldr	r3, [pc, #72]	; (17efc <hci_le_read_max_data_len+0x7c>)
   17eb4:	9306      	str	r3, [sp, #24]
   17eb6:	2300      	movs	r3, #0
   17eb8:	f8ad 3001 	strh.w	r3, [sp, #1]
   17ebc:	f88d 3003 	strb.w	r3, [sp, #3]
   17ec0:	2202      	movs	r2, #2
   17ec2:	f88d 2000 	strb.w	r2, [sp]
   17ec6:	f88d 3002 	strb.w	r3, [sp, #2]
   17eca:	9a00      	ldr	r2, [sp, #0]
   17ecc:	9205      	str	r2, [sp, #20]
   17ece:	461a      	mov	r2, r3
   17ed0:	f363 0200 	bfi	r2, r3, #0, #1
   17ed4:	f363 0241 	bfi	r2, r3, #1, #1
   17ed8:	f363 0282 	bfi	r2, r3, #2, #1
   17edc:	f363 02c5 	bfi	r2, r3, #3, #3
   17ee0:	2101      	movs	r1, #1
   17ee2:	f361 1288 	bfi	r2, r1, #6, #3
   17ee6:	2108      	movs	r1, #8
   17ee8:	f361 2252 	bfi	r2, r1, #9, #10
   17eec:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17ef0:	4903      	ldr	r1, [pc, #12]	; (17f00 <hci_le_read_max_data_len+0x80>)
   17ef2:	a802      	add	r0, sp, #8
   17ef4:	f00c f82a 	bl	23f4c <z_log_msg2_finalize>
		return err;
   17ef8:	e7d8      	b.n	17eac <hci_le_read_max_data_len+0x2c>
   17efa:	bf00      	nop
   17efc:	00029a7c 	.word	0x00029a7c
   17f00:	000288a4 	.word	0x000288a4

00017f04 <le_set_event_mask>:
{
   17f04:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   17f06:	2108      	movs	r1, #8
   17f08:	f242 0001 	movw	r0, #8193	; 0x2001
   17f0c:	f7ff fe7c 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   17f10:	b398      	cbz	r0, 17f7a <le_set_event_mask+0x76>
   17f12:	4604      	mov	r4, r0
   17f14:	2108      	movs	r1, #8
   17f16:	4408      	add	r0, r1
   17f18:	f00e fb82 	bl	26620 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   17f1c:	4b18      	ldr	r3, [pc, #96]	; (17f80 <le_set_event_mask+0x7c>)
   17f1e:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   17f22:	f011 0f02 	tst.w	r1, #2
   17f26:	d125      	bne.n	17f74 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   17f28:	220f      	movs	r2, #15
   17f2a:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   17f2c:	f011 0f20 	tst.w	r1, #32
   17f30:	d001      	beq.n	17f36 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   17f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   17f36:	4912      	ldr	r1, [pc, #72]	; (17f80 <le_set_event_mask+0x7c>)
   17f38:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17f3c:	f011 0f09 	tst.w	r1, #9
   17f40:	d001      	beq.n	17f46 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   17f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   17f46:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   17f48:	f3c2 2107 	ubfx	r1, r2, #8, #8
   17f4c:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   17f4e:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   17f50:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   17f52:	0e12      	lsrs	r2, r2, #24
   17f54:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   17f56:	b29a      	uxth	r2, r3
	dst[0] = val;
   17f58:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   17f5a:	0a12      	lsrs	r2, r2, #8
   17f5c:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   17f5e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   17f60:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17f62:	0a13      	lsrs	r3, r2, #8
   17f64:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17f66:	2200      	movs	r2, #0
   17f68:	4621      	mov	r1, r4
   17f6a:	f242 0001 	movw	r0, #8193	; 0x2001
   17f6e:	f7ff fe87 	bl	17c80 <bt_hci_cmd_send_sync>
}
   17f72:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   17f74:	222f      	movs	r2, #47	; 0x2f
   17f76:	2300      	movs	r3, #0
   17f78:	e7d8      	b.n	17f2c <le_set_event_mask+0x28>
		return -ENOBUFS;
   17f7a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17f7e:	e7f8      	b.n	17f72 <le_set_event_mask+0x6e>
   17f80:	200002b0 	.word	0x200002b0

00017f84 <le_init>:
{
   17f84:	b510      	push	{r4, lr}
   17f86:	b08a      	sub	sp, #40	; 0x28
	if (!BT_FEAT_LE(bt_dev.features)) {
   17f88:	4b59      	ldr	r3, [pc, #356]	; (180f0 <le_init+0x16c>)
   17f8a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17f8e:	f013 0f40 	tst.w	r3, #64	; 0x40
   17f92:	d00a      	beq.n	17faa <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17f94:	aa03      	add	r2, sp, #12
   17f96:	2100      	movs	r1, #0
   17f98:	f242 0003 	movw	r0, #8195	; 0x2003
   17f9c:	f7ff fe70 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   17fa0:	4603      	mov	r3, r0
   17fa2:	b340      	cbz	r0, 17ff6 <le_init+0x72>
}
   17fa4:	4618      	mov	r0, r3
   17fa6:	b00a      	add	sp, #40	; 0x28
   17fa8:	bd10      	pop	{r4, pc}
		BT_ERR("Non-LE capable controller detected!");
   17faa:	4b52      	ldr	r3, [pc, #328]	; (180f4 <le_init+0x170>)
   17fac:	9308      	str	r3, [sp, #32]
   17fae:	2300      	movs	r3, #0
   17fb0:	f8ad 3009 	strh.w	r3, [sp, #9]
   17fb4:	f88d 300b 	strb.w	r3, [sp, #11]
   17fb8:	2202      	movs	r2, #2
   17fba:	f88d 2008 	strb.w	r2, [sp, #8]
   17fbe:	f88d 300a 	strb.w	r3, [sp, #10]
   17fc2:	9a02      	ldr	r2, [sp, #8]
   17fc4:	9207      	str	r2, [sp, #28]
   17fc6:	461a      	mov	r2, r3
   17fc8:	f363 0200 	bfi	r2, r3, #0, #1
   17fcc:	f363 0241 	bfi	r2, r3, #1, #1
   17fd0:	f363 0282 	bfi	r2, r3, #2, #1
   17fd4:	f363 02c5 	bfi	r2, r3, #3, #3
   17fd8:	2101      	movs	r1, #1
   17fda:	f361 1288 	bfi	r2, r1, #6, #3
   17fde:	2108      	movs	r1, #8
   17fe0:	f361 2252 	bfi	r2, r1, #9, #10
   17fe4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   17fe8:	4943      	ldr	r1, [pc, #268]	; (180f8 <le_init+0x174>)
   17fea:	a804      	add	r0, sp, #16
   17fec:	f00b ffae 	bl	23f4c <z_log_msg2_finalize>
		return -ENODEV;
   17ff0:	f06f 0312 	mvn.w	r3, #18
   17ff4:	e7d6      	b.n	17fa4 <le_init+0x20>
	read_le_features_complete(rsp);
   17ff6:	9803      	ldr	r0, [sp, #12]
   17ff8:	f7fe fe78 	bl	16cec <read_le_features_complete>
	net_buf_unref(rsp);
   17ffc:	9803      	ldr	r0, [sp, #12]
   17ffe:	f00e fac5 	bl	2658c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   18002:	aa03      	add	r2, sp, #12
   18004:	2100      	movs	r1, #0
   18006:	f242 0002 	movw	r0, #8194	; 0x2002
   1800a:	f7ff fe39 	bl	17c80 <bt_hci_cmd_send_sync>
		if (err) {
   1800e:	4603      	mov	r3, r0
   18010:	2800      	cmp	r0, #0
   18012:	d1c7      	bne.n	17fa4 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   18014:	9803      	ldr	r0, [sp, #12]
   18016:	f7fe ff3f 	bl	16e98 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   1801a:	9803      	ldr	r0, [sp, #12]
   1801c:	f00e fab6 	bl	2658c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18020:	4b33      	ldr	r3, [pc, #204]	; (180f0 <le_init+0x16c>)
   18022:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   18026:	f013 0f20 	tst.w	r3, #32
   1802a:	d032      	beq.n	18092 <le_init+0x10e>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   1802c:	4b30      	ldr	r3, [pc, #192]	; (180f0 <le_init+0x16c>)
   1802e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   18032:	f013 0f08 	tst.w	r3, #8
   18036:	d144      	bne.n	180c2 <le_init+0x13e>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   18038:	4b2d      	ldr	r3, [pc, #180]	; (180f0 <le_init+0x16c>)
   1803a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   1803e:	f013 0f20 	tst.w	r3, #32
   18042:	d022      	beq.n	1808a <le_init+0x106>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18044:	a902      	add	r1, sp, #8
   18046:	f10d 0006 	add.w	r0, sp, #6
   1804a:	f7ff ff19 	bl	17e80 <hci_le_read_max_data_len>
		if (err) {
   1804e:	4603      	mov	r3, r0
   18050:	2800      	cmp	r0, #0
   18052:	d1a7      	bne.n	17fa4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18054:	2104      	movs	r1, #4
   18056:	f242 0024 	movw	r0, #8228	; 0x2024
   1805a:	f7ff fdd5 	bl	17c08 <bt_hci_cmd_create>
		if (!buf) {
   1805e:	4604      	mov	r4, r0
   18060:	2800      	cmp	r0, #0
   18062:	d03f      	beq.n	180e4 <le_init+0x160>
   18064:	2104      	movs	r1, #4
   18066:	3008      	adds	r0, #8
   18068:	f00e fada 	bl	26620 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1806c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   18070:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18072:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   18076:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18078:	2200      	movs	r2, #0
   1807a:	4621      	mov	r1, r4
   1807c:	f242 0024 	movw	r0, #8228	; 0x2024
   18080:	f7ff fdfe 	bl	17c80 <bt_hci_cmd_send_sync>
		if (err) {
   18084:	4603      	mov	r3, r0
   18086:	2800      	cmp	r0, #0
   18088:	d18c      	bne.n	17fa4 <le_init+0x20>
	return  le_set_event_mask();
   1808a:	f7ff ff3b 	bl	17f04 <le_set_event_mask>
   1808e:	4603      	mov	r3, r0
   18090:	e788      	b.n	17fa4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   18092:	2102      	movs	r1, #2
   18094:	f640 406d 	movw	r0, #3181	; 0xc6d
   18098:	f7ff fdb6 	bl	17c08 <bt_hci_cmd_create>
		if (!buf) {
   1809c:	4604      	mov	r4, r0
   1809e:	b320      	cbz	r0, 180ea <le_init+0x166>
   180a0:	2102      	movs	r1, #2
   180a2:	3008      	adds	r0, #8
   180a4:	f00e fabc 	bl	26620 <net_buf_simple_add>
		cp_le->le = 0x01;
   180a8:	2301      	movs	r3, #1
   180aa:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   180ac:	2200      	movs	r2, #0
   180ae:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   180b0:	4621      	mov	r1, r4
   180b2:	f640 406d 	movw	r0, #3181	; 0xc6d
   180b6:	f7ff fde3 	bl	17c80 <bt_hci_cmd_send_sync>
		if (err) {
   180ba:	4603      	mov	r3, r0
   180bc:	2800      	cmp	r0, #0
   180be:	d0b5      	beq.n	1802c <le_init+0xa8>
   180c0:	e770      	b.n	17fa4 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   180c2:	aa03      	add	r2, sp, #12
   180c4:	2100      	movs	r1, #0
   180c6:	f242 001c 	movw	r0, #8220	; 0x201c
   180ca:	f7ff fdd9 	bl	17c80 <bt_hci_cmd_send_sync>
		if (err) {
   180ce:	4603      	mov	r3, r0
   180d0:	2800      	cmp	r0, #0
   180d2:	f47f af67 	bne.w	17fa4 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   180d6:	9803      	ldr	r0, [sp, #12]
   180d8:	f7fe fe30 	bl	16d3c <le_read_supp_states_complete>
		net_buf_unref(rsp);
   180dc:	9803      	ldr	r0, [sp, #12]
   180de:	f00e fa55 	bl	2658c <net_buf_unref>
   180e2:	e7a9      	b.n	18038 <le_init+0xb4>
			return -ENOBUFS;
   180e4:	f06f 0368 	mvn.w	r3, #104	; 0x68
   180e8:	e75c      	b.n	17fa4 <le_init+0x20>
			return -ENOBUFS;
   180ea:	f06f 0368 	mvn.w	r3, #104	; 0x68
   180ee:	e759      	b.n	17fa4 <le_init+0x20>
   180f0:	200002b0 	.word	0x200002b0
   180f4:	00029a9c 	.word	0x00029a9c
   180f8:	000288a4 	.word	0x000288a4

000180fc <bt_br_init>:
{
   180fc:	b510      	push	{r4, lr}
   180fe:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   18100:	4b0b      	ldr	r3, [pc, #44]	; (18130 <bt_br_init+0x34>)
   18102:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   18106:	b11b      	cbz	r3, 18110 <bt_br_init+0x14>
		return 0;
   18108:	2400      	movs	r4, #0
}
   1810a:	4620      	mov	r0, r4
   1810c:	b002      	add	sp, #8
   1810e:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   18110:	aa01      	add	r2, sp, #4
   18112:	2100      	movs	r1, #0
   18114:	f241 0005 	movw	r0, #4101	; 0x1005
   18118:	f7ff fdb2 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   1811c:	4604      	mov	r4, r0
   1811e:	2800      	cmp	r0, #0
   18120:	d1f3      	bne.n	1810a <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   18122:	9801      	ldr	r0, [sp, #4]
   18124:	f7fe fecc 	bl	16ec0 <read_buffer_size_complete>
	net_buf_unref(rsp);
   18128:	9801      	ldr	r0, [sp, #4]
   1812a:	f00e fa2f 	bl	2658c <net_buf_unref>
	return 0;
   1812e:	e7ec      	b.n	1810a <bt_br_init+0xe>
   18130:	200002b0 	.word	0x200002b0

00018134 <hci_vs_init>:
{
   18134:	b5f0      	push	{r4, r5, r6, r7, lr}
   18136:	b09d      	sub	sp, #116	; 0x74
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18138:	aa09      	add	r2, sp, #36	; 0x24
   1813a:	2100      	movs	r1, #0
   1813c:	f64f 4001 	movw	r0, #64513	; 0xfc01
   18140:	f7ff fd9e 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   18144:	2800      	cmp	r0, #0
   18146:	d166      	bne.n	18216 <hci_vs_init+0xe2>
	rp.info = (void *)rsp->data;
   18148:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1814a:	689d      	ldr	r5, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   1814c:	f8b5 4001 	ldrh.w	r4, [r5, #1]
   18150:	4620      	mov	r0, r4
   18152:	f7fe fe2f 	bl	16db4 <vs_hw_platform>
   18156:	4e65      	ldr	r6, [pc, #404]	; (182ec <hci_vs_init+0x1b8>)
   18158:	9403      	str	r4, [sp, #12]
   1815a:	9002      	str	r0, [sp, #8]
   1815c:	4b64      	ldr	r3, [pc, #400]	; (182f0 <hci_vs_init+0x1bc>)
   1815e:	9301      	str	r3, [sp, #4]
   18160:	2400      	movs	r4, #0
   18162:	9400      	str	r4, [sp, #0]
   18164:	4623      	mov	r3, r4
   18166:	2203      	movs	r2, #3
   18168:	4631      	mov	r1, r6
   1816a:	4620      	mov	r0, r4
   1816c:	f00c f99d 	bl	244aa <z_log_msg2_runtime_create>
	BT_INFO("HW Variant: %s (0x%04x)",
   18170:	f8b5 7003 	ldrh.w	r7, [r5, #3]
   18174:	4639      	mov	r1, r7
   18176:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1817a:	f7fe fe27 	bl	16dcc <vs_hw_variant>
   1817e:	9703      	str	r7, [sp, #12]
   18180:	9002      	str	r0, [sp, #8]
   18182:	4b5c      	ldr	r3, [pc, #368]	; (182f4 <hci_vs_init+0x1c0>)
   18184:	9301      	str	r3, [sp, #4]
   18186:	9400      	str	r4, [sp, #0]
   18188:	4623      	mov	r3, r4
   1818a:	2203      	movs	r2, #3
   1818c:	4631      	mov	r1, r6
   1818e:	4620      	mov	r0, r4
   18190:	f00c f98b 	bl	244aa <z_log_msg2_runtime_create>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   18194:	796f      	ldrb	r7, [r5, #5]
   18196:	4638      	mov	r0, r7
   18198:	f7fe fe28 	bl	16dec <vs_fw_variant>
   1819c:	79ab      	ldrb	r3, [r5, #6]
   1819e:	f8b5 2007 	ldrh.w	r2, [r5, #7]
   181a2:	f8d5 1009 	ldr.w	r1, [r5, #9]
   181a6:	9106      	str	r1, [sp, #24]
   181a8:	9205      	str	r2, [sp, #20]
   181aa:	9304      	str	r3, [sp, #16]
   181ac:	9703      	str	r7, [sp, #12]
   181ae:	9002      	str	r0, [sp, #8]
   181b0:	4b51      	ldr	r3, [pc, #324]	; (182f8 <hci_vs_init+0x1c4>)
   181b2:	9301      	str	r3, [sp, #4]
   181b4:	9400      	str	r4, [sp, #0]
   181b6:	4623      	mov	r3, r4
   181b8:	2203      	movs	r2, #3
   181ba:	4631      	mov	r1, r6
   181bc:	4620      	mov	r0, r4
   181be:	f00c f974 	bl	244aa <z_log_msg2_runtime_create>
	net_buf_unref(rsp);
   181c2:	9809      	ldr	r0, [sp, #36]	; 0x24
   181c4:	f00e f9e2 	bl	2658c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   181c8:	aa09      	add	r2, sp, #36	; 0x24
   181ca:	4621      	mov	r1, r4
   181cc:	f64f 4002 	movw	r0, #64514	; 0xfc02
   181d0:	f7ff fd56 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   181d4:	2800      	cmp	r0, #0
   181d6:	d142      	bne.n	1825e <hci_vs_init+0x12a>
	rp.cmds = (void *)rsp->data;
   181d8:	9809      	ldr	r0, [sp, #36]	; 0x24
   181da:	6883      	ldr	r3, [r0, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   181dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   181e0:	4c46      	ldr	r4, [pc, #280]	; (182fc <hci_vs_init+0x1c8>)
   181e2:	f8a4 30b9 	strh.w	r3, [r4, #185]	; 0xb9
	net_buf_unref(rsp);
   181e6:	f00e f9d1 	bl	2658c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   181ea:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   181ee:	f013 0f04 	tst.w	r3, #4
   181f2:	d032      	beq.n	1825a <hci_vs_init+0x126>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   181f4:	aa09      	add	r2, sp, #36	; 0x24
   181f6:	2100      	movs	r1, #0
   181f8:	f64f 4003 	movw	r0, #64515	; 0xfc03
   181fc:	f7ff fd40 	bl	17c80 <bt_hci_cmd_send_sync>
		if (err) {
   18200:	2800      	cmp	r0, #0
   18202:	d14f      	bne.n	182a4 <hci_vs_init+0x170>
		rp.feat = (void *)rsp->data;
   18204:	9809      	ldr	r0, [sp, #36]	; 0x24
   18206:	6883      	ldr	r3, [r0, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   18208:	785a      	ldrb	r2, [r3, #1]
   1820a:	4b3c      	ldr	r3, [pc, #240]	; (182fc <hci_vs_init+0x1c8>)
   1820c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		net_buf_unref(rsp);
   18210:	f00e f9bc 	bl	2658c <net_buf_unref>
   18214:	e021      	b.n	1825a <hci_vs_init+0x126>
		BT_WARN("Vendor HCI extensions not available");
   18216:	4b3a      	ldr	r3, [pc, #232]	; (18300 <hci_vs_init+0x1cc>)
   18218:	931a      	str	r3, [sp, #104]	; 0x68
   1821a:	2300      	movs	r3, #0
   1821c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
   18220:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   18224:	2102      	movs	r1, #2
   18226:	f88d 1020 	strb.w	r1, [sp, #32]
   1822a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   1822e:	9a08      	ldr	r2, [sp, #32]
   18230:	9219      	str	r2, [sp, #100]	; 0x64
   18232:	461a      	mov	r2, r3
   18234:	f363 0200 	bfi	r2, r3, #0, #1
   18238:	f363 0241 	bfi	r2, r3, #1, #1
   1823c:	f363 0282 	bfi	r2, r3, #2, #1
   18240:	f363 02c5 	bfi	r2, r3, #3, #3
   18244:	f361 1288 	bfi	r2, r1, #6, #3
   18248:	2108      	movs	r1, #8
   1824a:	f361 2252 	bfi	r2, r1, #9, #10
   1824e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18252:	4926      	ldr	r1, [pc, #152]	; (182ec <hci_vs_init+0x1b8>)
   18254:	a816      	add	r0, sp, #88	; 0x58
   18256:	f00b fe79 	bl	23f4c <z_log_msg2_finalize>
}
   1825a:	b01d      	add	sp, #116	; 0x74
   1825c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_WARN("Failed to read supported vendor commands");
   1825e:	4b29      	ldr	r3, [pc, #164]	; (18304 <hci_vs_init+0x1d0>)
   18260:	9314      	str	r3, [sp, #80]	; 0x50
   18262:	4623      	mov	r3, r4
   18264:	f8ad 4021 	strh.w	r4, [sp, #33]	; 0x21
   18268:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
   1826c:	2102      	movs	r1, #2
   1826e:	f88d 1020 	strb.w	r1, [sp, #32]
   18272:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
   18276:	9a08      	ldr	r2, [sp, #32]
   18278:	9213      	str	r2, [sp, #76]	; 0x4c
   1827a:	4622      	mov	r2, r4
   1827c:	f364 0200 	bfi	r2, r4, #0, #1
   18280:	f364 0241 	bfi	r2, r4, #1, #1
   18284:	f364 0282 	bfi	r2, r4, #2, #1
   18288:	f364 02c5 	bfi	r2, r4, #3, #3
   1828c:	f361 1288 	bfi	r2, r1, #6, #3
   18290:	2108      	movs	r1, #8
   18292:	f361 2252 	bfi	r2, r1, #9, #10
   18296:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1829a:	4631      	mov	r1, r6
   1829c:	a810      	add	r0, sp, #64	; 0x40
   1829e:	f00b fe55 	bl	23f4c <z_log_msg2_finalize>
		return;
   182a2:	e7da      	b.n	1825a <hci_vs_init+0x126>
			BT_WARN("Failed to read supported vendor features");
   182a4:	4b18      	ldr	r3, [pc, #96]	; (18308 <hci_vs_init+0x1d4>)
   182a6:	930e      	str	r3, [sp, #56]	; 0x38
   182a8:	2300      	movs	r3, #0
   182aa:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
   182ae:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   182b2:	2102      	movs	r1, #2
   182b4:	f88d 1020 	strb.w	r1, [sp, #32]
   182b8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
   182bc:	9a08      	ldr	r2, [sp, #32]
   182be:	920d      	str	r2, [sp, #52]	; 0x34
   182c0:	461a      	mov	r2, r3
   182c2:	f363 0200 	bfi	r2, r3, #0, #1
   182c6:	f363 0241 	bfi	r2, r3, #1, #1
   182ca:	f363 0282 	bfi	r2, r3, #2, #1
   182ce:	f363 02c5 	bfi	r2, r3, #3, #3
   182d2:	f361 1288 	bfi	r2, r1, #6, #3
   182d6:	2108      	movs	r1, #8
   182d8:	f361 2252 	bfi	r2, r1, #9, #10
   182dc:	f3c2 0212 	ubfx	r2, r2, #0, #19
   182e0:	4902      	ldr	r1, [pc, #8]	; (182ec <hci_vs_init+0x1b8>)
   182e2:	a80a      	add	r0, sp, #40	; 0x28
   182e4:	f00b fe32 	bl	23f4c <z_log_msg2_finalize>
			return;
   182e8:	e7b7      	b.n	1825a <hci_vs_init+0x126>
   182ea:	bf00      	nop
   182ec:	000288a4 	.word	0x000288a4
   182f0:	00029ae4 	.word	0x00029ae4
   182f4:	00029b00 	.word	0x00029b00
   182f8:	00029b18 	.word	0x00029b18
   182fc:	200002b0 	.word	0x200002b0
   18300:	00029ac0 	.word	0x00029ac0
   18304:	00029b48 	.word	0x00029b48
   18308:	00029b74 	.word	0x00029b74

0001830c <hci_init>:
{
   1830c:	b500      	push	{lr}
   1830e:	b089      	sub	sp, #36	; 0x24
	err = common_init();
   18310:	f7ff fd6c 	bl	17dec <common_init>
	if (err) {
   18314:	4603      	mov	r3, r0
   18316:	b118      	cbz	r0, 18320 <hci_init+0x14>
}
   18318:	4618      	mov	r0, r3
   1831a:	b009      	add	sp, #36	; 0x24
   1831c:	f85d fb04 	ldr.w	pc, [sp], #4
	err = le_init();
   18320:	f7ff fe30 	bl	17f84 <le_init>
	if (err) {
   18324:	4603      	mov	r3, r0
   18326:	2800      	cmp	r0, #0
   18328:	d1f6      	bne.n	18318 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1832a:	4b20      	ldr	r3, [pc, #128]	; (183ac <hci_init+0xa0>)
   1832c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   18330:	f013 0f20 	tst.w	r3, #32
   18334:	d00e      	beq.n	18354 <hci_init+0x48>
	else if (!bt_dev.le.acl_mtu) {
   18336:	4b1d      	ldr	r3, [pc, #116]	; (183ac <hci_init+0xa0>)
   18338:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1833c:	b183      	cbz	r3, 18360 <hci_init+0x54>
	err = set_event_mask();
   1833e:	f00c f8d8 	bl	244f2 <set_event_mask>
	if (err) {
   18342:	4603      	mov	r3, r0
   18344:	2800      	cmp	r0, #0
   18346:	d1e7      	bne.n	18318 <hci_init+0xc>
	hci_vs_init();
   18348:	f7ff fef4 	bl	18134 <hci_vs_init>
	err = bt_id_init();
   1834c:	f001 f9ec 	bl	19728 <bt_id_init>
   18350:	4603      	mov	r3, r0
	if (err) {
   18352:	e7e1      	b.n	18318 <hci_init+0xc>
		err = bt_br_init();
   18354:	f7ff fed2 	bl	180fc <bt_br_init>
		if (err) {
   18358:	4603      	mov	r3, r0
   1835a:	2800      	cmp	r0, #0
   1835c:	d0ef      	beq.n	1833e <hci_init+0x32>
   1835e:	e7db      	b.n	18318 <hci_init+0xc>
		BT_ERR("ACL BR/EDR buffers not initialized");
   18360:	4b13      	ldr	r3, [pc, #76]	; (183b0 <hci_init+0xa4>)
   18362:	9306      	str	r3, [sp, #24]
   18364:	2300      	movs	r3, #0
   18366:	f8ad 3005 	strh.w	r3, [sp, #5]
   1836a:	f88d 3007 	strb.w	r3, [sp, #7]
   1836e:	2202      	movs	r2, #2
   18370:	f88d 2004 	strb.w	r2, [sp, #4]
   18374:	f88d 3006 	strb.w	r3, [sp, #6]
   18378:	9a01      	ldr	r2, [sp, #4]
   1837a:	9205      	str	r2, [sp, #20]
   1837c:	461a      	mov	r2, r3
   1837e:	f363 0200 	bfi	r2, r3, #0, #1
   18382:	f363 0241 	bfi	r2, r3, #1, #1
   18386:	f363 0282 	bfi	r2, r3, #2, #1
   1838a:	f363 02c5 	bfi	r2, r3, #3, #3
   1838e:	2101      	movs	r1, #1
   18390:	f361 1288 	bfi	r2, r1, #6, #3
   18394:	2108      	movs	r1, #8
   18396:	f361 2252 	bfi	r2, r1, #9, #10
   1839a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1839e:	4905      	ldr	r1, [pc, #20]	; (183b4 <hci_init+0xa8>)
   183a0:	a802      	add	r0, sp, #8
   183a2:	f00b fdd3 	bl	23f4c <z_log_msg2_finalize>
		return -EIO;
   183a6:	f06f 0304 	mvn.w	r3, #4
   183aa:	e7b5      	b.n	18318 <hci_init+0xc>
   183ac:	200002b0 	.word	0x200002b0
   183b0:	00029ba0 	.word	0x00029ba0
   183b4:	000288a4 	.word	0x000288a4

000183b8 <bt_send>:
{
   183b8:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   183ba:	4b03      	ldr	r3, [pc, #12]	; (183c8 <bt_send+0x10>)
   183bc:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   183c0:	691b      	ldr	r3, [r3, #16]
   183c2:	4798      	blx	r3
}
   183c4:	bd08      	pop	{r3, pc}
   183c6:	bf00      	nop
   183c8:	200002b0 	.word	0x200002b0

000183cc <bt_hci_cmd_send>:
{
   183cc:	b530      	push	{r4, r5, lr}
   183ce:	b089      	sub	sp, #36	; 0x24
   183d0:	4604      	mov	r4, r0
	if (!buf) {
   183d2:	460d      	mov	r5, r1
   183d4:	b159      	cbz	r1, 183ee <bt_hci_cmd_send+0x22>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   183d6:	f640 4335 	movw	r3, #3125	; 0xc35
   183da:	429c      	cmp	r4, r3
   183dc:	d00f      	beq.n	183fe <bt_hci_cmd_send+0x32>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   183de:	4629      	mov	r1, r5
   183e0:	481e      	ldr	r0, [pc, #120]	; (1845c <bt_hci_cmd_send+0x90>)
   183e2:	f00e f8c6 	bl	26572 <net_buf_put>
	return 0;
   183e6:	2400      	movs	r4, #0
}
   183e8:	4620      	mov	r0, r4
   183ea:	b009      	add	sp, #36	; 0x24
   183ec:	bd30      	pop	{r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   183ee:	f7ff fc0b 	bl	17c08 <bt_hci_cmd_create>
		if (!buf) {
   183f2:	4605      	mov	r5, r0
   183f4:	2800      	cmp	r0, #0
   183f6:	d1ee      	bne.n	183d6 <bt_hci_cmd_send+0xa>
			return -ENOBUFS;
   183f8:	f06f 0468 	mvn.w	r4, #104	; 0x68
   183fc:	e7f4      	b.n	183e8 <bt_hci_cmd_send+0x1c>
		err = bt_send(buf);
   183fe:	4628      	mov	r0, r5
   18400:	f7ff ffda 	bl	183b8 <bt_send>
		if (err) {
   18404:	4604      	mov	r4, r0
   18406:	2800      	cmp	r0, #0
   18408:	d0ee      	beq.n	183e8 <bt_hci_cmd_send+0x1c>
			BT_ERR("Unable to send to driver (err %d)", err);
   1840a:	4b15      	ldr	r3, [pc, #84]	; (18460 <bt_hci_cmd_send+0x94>)
   1840c:	9306      	str	r3, [sp, #24]
   1840e:	9007      	str	r0, [sp, #28]
   18410:	2300      	movs	r3, #0
   18412:	f8ad 3005 	strh.w	r3, [sp, #5]
   18416:	f88d 3007 	strb.w	r3, [sp, #7]
   1841a:	2203      	movs	r2, #3
   1841c:	f88d 2004 	strb.w	r2, [sp, #4]
   18420:	f88d 3006 	strb.w	r3, [sp, #6]
   18424:	9a01      	ldr	r2, [sp, #4]
   18426:	9205      	str	r2, [sp, #20]
   18428:	461a      	mov	r2, r3
   1842a:	f363 0200 	bfi	r2, r3, #0, #1
   1842e:	f363 0241 	bfi	r2, r3, #1, #1
   18432:	f363 0282 	bfi	r2, r3, #2, #1
   18436:	f363 02c5 	bfi	r2, r3, #3, #3
   1843a:	2101      	movs	r1, #1
   1843c:	f361 1288 	bfi	r2, r1, #6, #3
   18440:	210c      	movs	r1, #12
   18442:	f361 2252 	bfi	r2, r1, #9, #10
   18446:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1844a:	4906      	ldr	r1, [pc, #24]	; (18464 <bt_hci_cmd_send+0x98>)
   1844c:	a802      	add	r0, sp, #8
   1844e:	f00b fd7d 	bl	23f4c <z_log_msg2_finalize>
			net_buf_unref(buf);
   18452:	4628      	mov	r0, r5
   18454:	f00e f89a 	bl	2658c <net_buf_unref>
		return err;
   18458:	e7c6      	b.n	183e8 <bt_hci_cmd_send+0x1c>
   1845a:	bf00      	nop
   1845c:	200003fc 	.word	0x200003fc
   18460:	00029bc4 	.word	0x00029bc4
   18464:	000288a4 	.word	0x000288a4

00018468 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   18468:	7a83      	ldrb	r3, [r0, #10]
   1846a:	2b07      	cmp	r3, #7
   1846c:	d000      	beq.n	18470 <conn_auto_initiate+0x8>
   1846e:	4770      	bx	lr
{
   18470:	b530      	push	{r4, r5, lr}
   18472:	b091      	sub	sp, #68	; 0x44
   18474:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   18476:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18478:	f3bf 8f5b 	dmb	ish
   1847c:	6843      	ldr	r3, [r0, #4]
   1847e:	f3bf 8f5b 	dmb	ish
   18482:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   18486:	d10b      	bne.n	184a0 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18488:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1848a:	b12b      	cbz	r3, 18498 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1848c:	4b4a      	ldr	r3, [pc, #296]	; (185b8 <conn_auto_initiate+0x150>)
   1848e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   18492:	f013 0f08 	tst.w	r3, #8
   18496:	d003      	beq.n	184a0 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   18498:	4620      	mov	r0, r4
   1849a:	f00c f8d0 	bl	2463e <hci_le_read_remote_features>
		if (!err) {
   1849e:	b1d0      	cbz	r0, 184d6 <conn_auto_initiate+0x6e>
   184a0:	f3bf 8f5b 	dmb	ish
   184a4:	6863      	ldr	r3, [r4, #4]
   184a6:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   184aa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   184ae:	d105      	bne.n	184bc <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   184b0:	4b41      	ldr	r3, [pc, #260]	; (185b8 <conn_auto_initiate+0x150>)
   184b2:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   184b6:	f013 0f01 	tst.w	r3, #1
   184ba:	d10e      	bne.n	184da <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   184bc:	4b3e      	ldr	r3, [pc, #248]	; (185b8 <conn_auto_initiate+0x150>)
   184be:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   184c2:	f013 0f20 	tst.w	r3, #32
   184c6:	d006      	beq.n	184d6 <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   184c8:	4b3b      	ldr	r3, [pc, #236]	; (185b8 <conn_auto_initiate+0x150>)
   184ca:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   184ce:	689b      	ldr	r3, [r3, #8]
   184d0:	f013 0f02 	tst.w	r3, #2
   184d4:	d13b      	bne.n	1854e <conn_auto_initiate+0xe6>
}
   184d6:	b011      	add	sp, #68	; 0x44
   184d8:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   184da:	2100      	movs	r1, #0
   184dc:	9100      	str	r1, [sp, #0]
   184de:	2302      	movs	r3, #2
   184e0:	461a      	mov	r2, r3
   184e2:	4620      	mov	r0, r4
   184e4:	f00c f887 	bl	245f6 <bt_le_set_phy>
		if (!err) {
   184e8:	b320      	cbz	r0, 18534 <conn_auto_initiate+0xcc>
		BT_ERR("Failed to set LE PHY (%d)", err);
   184ea:	4a34      	ldr	r2, [pc, #208]	; (185bc <conn_auto_initiate+0x154>)
   184ec:	9208      	str	r2, [sp, #32]
   184ee:	9009      	str	r0, [sp, #36]	; 0x24
   184f0:	2300      	movs	r3, #0
   184f2:	f8ad 300d 	strh.w	r3, [sp, #13]
   184f6:	f88d 300f 	strb.w	r3, [sp, #15]
   184fa:	2203      	movs	r2, #3
   184fc:	f88d 200c 	strb.w	r2, [sp, #12]
   18500:	f88d 300e 	strb.w	r3, [sp, #14]
   18504:	9a03      	ldr	r2, [sp, #12]
   18506:	9207      	str	r2, [sp, #28]
   18508:	461a      	mov	r2, r3
   1850a:	f363 0200 	bfi	r2, r3, #0, #1
   1850e:	f363 0241 	bfi	r2, r3, #1, #1
   18512:	f363 0282 	bfi	r2, r3, #2, #1
   18516:	f363 02c5 	bfi	r2, r3, #3, #3
   1851a:	2101      	movs	r1, #1
   1851c:	f361 1288 	bfi	r2, r1, #6, #3
   18520:	210c      	movs	r1, #12
   18522:	f361 2252 	bfi	r2, r1, #9, #10
   18526:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1852a:	4925      	ldr	r1, [pc, #148]	; (185c0 <conn_auto_initiate+0x158>)
   1852c:	a804      	add	r0, sp, #16
   1852e:	f00b fd0d 	bl	23f4c <z_log_msg2_finalize>
   18532:	e7c3      	b.n	184bc <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18534:	f3bf 8f5b 	dmb	ish
   18538:	e855 3f00 	ldrex	r3, [r5]
   1853c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18540:	e845 3200 	strex	r2, r3, [r5]
   18544:	2a00      	cmp	r2, #0
   18546:	d1f7      	bne.n	18538 <conn_auto_initiate+0xd0>
   18548:	f3bf 8f5b 	dmb	ish
			return;
   1854c:	e7c3      	b.n	184d6 <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1854e:	f10d 010a 	add.w	r1, sp, #10
   18552:	a802      	add	r0, sp, #8
   18554:	f7ff fc94 	bl	17e80 <hci_le_read_max_data_len>
			if (!err) {
   18558:	2800      	cmp	r0, #0
   1855a:	d1bc      	bne.n	184d6 <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   1855c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   18560:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   18564:	4620      	mov	r0, r4
   18566:	f00c f82a 	bl	245be <bt_le_set_data_len>
				if (err) {
   1856a:	2800      	cmp	r0, #0
   1856c:	d0b3      	beq.n	184d6 <conn_auto_initiate+0x6e>
					BT_ERR("Failed to set data len (%d)", err);
   1856e:	4a15      	ldr	r2, [pc, #84]	; (185c4 <conn_auto_initiate+0x15c>)
   18570:	920e      	str	r2, [sp, #56]	; 0x38
   18572:	900f      	str	r0, [sp, #60]	; 0x3c
   18574:	2300      	movs	r3, #0
   18576:	f8ad 300d 	strh.w	r3, [sp, #13]
   1857a:	f88d 300f 	strb.w	r3, [sp, #15]
   1857e:	2203      	movs	r2, #3
   18580:	f88d 200c 	strb.w	r2, [sp, #12]
   18584:	f88d 300e 	strb.w	r3, [sp, #14]
   18588:	9a03      	ldr	r2, [sp, #12]
   1858a:	920d      	str	r2, [sp, #52]	; 0x34
   1858c:	461a      	mov	r2, r3
   1858e:	f363 0200 	bfi	r2, r3, #0, #1
   18592:	f363 0241 	bfi	r2, r3, #1, #1
   18596:	f363 0282 	bfi	r2, r3, #2, #1
   1859a:	f363 02c5 	bfi	r2, r3, #3, #3
   1859e:	2101      	movs	r1, #1
   185a0:	f361 1288 	bfi	r2, r1, #6, #3
   185a4:	210c      	movs	r1, #12
   185a6:	f361 2252 	bfi	r2, r1, #9, #10
   185aa:	f3c2 0212 	ubfx	r2, r2, #0, #19
   185ae:	4904      	ldr	r1, [pc, #16]	; (185c0 <conn_auto_initiate+0x158>)
   185b0:	a80a      	add	r0, sp, #40	; 0x28
   185b2:	f00b fccb 	bl	23f4c <z_log_msg2_finalize>
		}
   185b6:	e78e      	b.n	184d6 <conn_auto_initiate+0x6e>
   185b8:	200002b0 	.word	0x200002b0
   185bc:	00029be8 	.word	0x00029be8
   185c0:	000288a4 	.word	0x000288a4
   185c4:	00029c04 	.word	0x00029c04

000185c8 <bt_hci_le_enh_conn_complete>:
{
   185c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   185cc:	b090      	sub	sp, #64	; 0x40
   185ce:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   185d0:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   185d4:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   185d8:	4640      	mov	r0, r8
   185da:	f7fe fb5b 	bl	16c94 <conn_handle_is_disconnected>
   185de:	4606      	mov	r6, r0
	if (evt->status) {
   185e0:	7820      	ldrb	r0, [r4, #0]
   185e2:	b350      	cbz	r0, 1863a <bt_hci_le_enh_conn_complete+0x72>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   185e4:	283c      	cmp	r0, #60	; 0x3c
   185e6:	d025      	beq.n	18634 <bt_hci_le_enh_conn_complete+0x6c>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   185e8:	4b76      	ldr	r3, [pc, #472]	; (187c4 <bt_hci_le_enh_conn_complete+0x1fc>)
   185ea:	930e      	str	r3, [sp, #56]	; 0x38
   185ec:	7823      	ldrb	r3, [r4, #0]
   185ee:	930f      	str	r3, [sp, #60]	; 0x3c
   185f0:	2300      	movs	r3, #0
   185f2:	f8ad 3015 	strh.w	r3, [sp, #21]
   185f6:	f88d 3017 	strb.w	r3, [sp, #23]
   185fa:	2203      	movs	r2, #3
   185fc:	f88d 2014 	strb.w	r2, [sp, #20]
   18600:	f88d 3016 	strb.w	r3, [sp, #22]
   18604:	9a05      	ldr	r2, [sp, #20]
   18606:	920d      	str	r2, [sp, #52]	; 0x34
   18608:	461a      	mov	r2, r3
   1860a:	f363 0200 	bfi	r2, r3, #0, #1
   1860e:	f363 0241 	bfi	r2, r3, #1, #1
   18612:	f363 0282 	bfi	r2, r3, #2, #1
   18616:	f363 02c5 	bfi	r2, r3, #3, #3
   1861a:	2102      	movs	r1, #2
   1861c:	f361 1288 	bfi	r2, r1, #6, #3
   18620:	210c      	movs	r1, #12
   18622:	f361 2252 	bfi	r2, r1, #9, #10
   18626:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1862a:	4967      	ldr	r1, [pc, #412]	; (187c8 <bt_hci_le_enh_conn_complete+0x200>)
   1862c:	a80a      	add	r0, sp, #40	; 0x28
   1862e:	f00b fc8d 	bl	23f4c <z_log_msg2_finalize>
		return;
   18632:	e056      	b.n	186e2 <bt_hci_le_enh_conn_complete+0x11a>
			le_conn_complete_adv_timeout();
   18634:	f7fe fcee 	bl	17014 <le_conn_complete_adv_timeout>
			return;
   18638:	e053      	b.n	186e2 <bt_hci_le_enh_conn_complete+0x11a>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1863a:	7923      	ldrb	r3, [r4, #4]
   1863c:	3b02      	subs	r3, #2
   1863e:	b2db      	uxtb	r3, r3
   18640:	2b01      	cmp	r3, #1
   18642:	d951      	bls.n	186e8 <bt_hci_le_enh_conn_complete+0x120>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18644:	78e3      	ldrb	r3, [r4, #3]
   18646:	2b01      	cmp	r3, #1
   18648:	d068      	beq.n	1871c <bt_hci_le_enh_conn_complete+0x154>
				bt_lookup_id_addr(id, &evt->peer_addr));
   1864a:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   1864c:	4629      	mov	r1, r5
   1864e:	f00c f882 	bl	24756 <bt_lookup_id_addr>
   18652:	4603      	mov	r3, r0
	memcpy(dst, src, sizeof(*dst));
   18654:	6800      	ldr	r0, [r0, #0]
   18656:	9006      	str	r0, [sp, #24]
   18658:	889a      	ldrh	r2, [r3, #4]
   1865a:	799b      	ldrb	r3, [r3, #6]
   1865c:	f8ad 201c 	strh.w	r2, [sp, #28]
   18660:	f88d 301e 	strb.w	r3, [sp, #30]
   18664:	6860      	ldr	r0, [r4, #4]
   18666:	9008      	str	r0, [sp, #32]
   18668:	8922      	ldrh	r2, [r4, #8]
   1866a:	7aa3      	ldrb	r3, [r4, #10]
   1866c:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   18670:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	conn = find_pending_connect(evt->role, &id_addr);
   18674:	a906      	add	r1, sp, #24
   18676:	78e0      	ldrb	r0, [r4, #3]
   18678:	f7fe fca6 	bl	16fc8 <find_pending_connect>
   1867c:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   1867e:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18680:	2b01      	cmp	r3, #1
   18682:	d04f      	beq.n	18724 <bt_hci_le_enh_conn_complete+0x15c>
	if (!conn) {
   18684:	2d00      	cmp	r5, #0
   18686:	d060      	beq.n	1874a <bt_hci_le_enh_conn_complete+0x182>
	conn->handle = handle;
   18688:	462b      	mov	r3, r5
   1868a:	f823 7b88 	strh.w	r7, [r3], #136
   1868e:	9806      	ldr	r0, [sp, #24]
   18690:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
   18694:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   18698:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1869c:	8099      	strh	r1, [r3, #4]
   1869e:	719a      	strb	r2, [r3, #6]
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   186a0:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   186a4:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   186a8:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   186ac:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   186b0:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   186b4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   186b8:	78e3      	ldrb	r3, [r4, #3]
   186ba:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   186bc:	2200      	movs	r2, #0
   186be:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   186c0:	2b01      	cmp	r3, #1
   186c2:	d054      	beq.n	1876e <bt_hci_le_enh_conn_complete+0x1a6>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   186c4:	2107      	movs	r1, #7
   186c6:	4628      	mov	r0, r5
   186c8:	f002 f81a 	bl	1a700 <bt_conn_set_state>
	if (is_disconnected) {
   186cc:	2e00      	cmp	r6, #0
   186ce:	d173      	bne.n	187b8 <bt_hci_le_enh_conn_complete+0x1f0>
	bt_conn_connected(conn);
   186d0:	4628      	mov	r0, r5
   186d2:	f00c fb6f 	bl	24db4 <bt_conn_connected>
	conn_auto_initiate(conn);
   186d6:	4628      	mov	r0, r5
   186d8:	f7ff fec6 	bl	18468 <conn_auto_initiate>
	bt_conn_unref(conn);
   186dc:	4628      	mov	r0, r5
   186de:	f00c fb20 	bl	24d22 <bt_conn_unref>
}
   186e2:	b010      	add	sp, #64	; 0x40
   186e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   186e8:	4623      	mov	r3, r4
   186ea:	f853 0f04 	ldr.w	r0, [r3, #4]!
   186ee:	9006      	str	r0, [sp, #24]
   186f0:	889a      	ldrh	r2, [r3, #4]
   186f2:	799b      	ldrb	r3, [r3, #6]
   186f4:	f8ad 201c 	strh.w	r2, [sp, #28]
   186f8:	f88d 301e 	strb.w	r3, [sp, #30]
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   186fc:	b2c0      	uxtb	r0, r0
   186fe:	3802      	subs	r0, #2
   18700:	f88d 0018 	strb.w	r0, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18704:	4623      	mov	r3, r4
	memcpy(dst, src, sizeof(*dst));
   18706:	f853 2f11 	ldr.w	r2, [r3, #17]!
   1870a:	f8cd 2021 	str.w	r2, [sp, #33]	; 0x21
   1870e:	889b      	ldrh	r3, [r3, #4]
   18710:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
		peer_addr.type = BT_ADDR_LE_RANDOM;
   18714:	2301      	movs	r3, #1
   18716:	f88d 3020 	strb.w	r3, [sp, #32]
   1871a:	e7ab      	b.n	18674 <bt_hci_le_enh_conn_complete+0xac>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1871c:	4b2b      	ldr	r3, [pc, #172]	; (187cc <bt_hci_le_enh_conn_complete+0x204>)
   1871e:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   18722:	e792      	b.n	1864a <bt_hci_le_enh_conn_complete+0x82>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18724:	f001 f9d6 	bl	19ad4 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   18728:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1872c:	f3bf 8f5b 	dmb	ish
   18730:	e853 2f00 	ldrex	r2, [r3]
   18734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   18738:	e843 2100 	strex	r1, r2, [r3]
   1873c:	2900      	cmp	r1, #0
   1873e:	d1f7      	bne.n	18730 <bt_hci_le_enh_conn_complete+0x168>
   18740:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   18744:	f00c f96d 	bl	24a22 <bt_le_lim_adv_cancel_timeout>
   18748:	e79c      	b.n	18684 <bt_hci_le_enh_conn_complete+0xbc>
		BT_ERR("No pending conn for peer %s",
   1874a:	1d20      	adds	r0, r4, #4
   1874c:	f7fe f9a8 	bl	16aa0 <bt_addr_le_str_real>
   18750:	9002      	str	r0, [sp, #8]
   18752:	4b1f      	ldr	r3, [pc, #124]	; (187d0 <bt_hci_le_enh_conn_complete+0x208>)
   18754:	9301      	str	r3, [sp, #4]
   18756:	2000      	movs	r0, #0
   18758:	9000      	str	r0, [sp, #0]
   1875a:	4603      	mov	r3, r0
   1875c:	2201      	movs	r2, #1
   1875e:	491a      	ldr	r1, [pc, #104]	; (187c8 <bt_hci_le_enh_conn_complete+0x200>)
   18760:	f00b fea3 	bl	244aa <z_log_msg2_runtime_create>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18764:	211f      	movs	r1, #31
   18766:	4640      	mov	r0, r8
   18768:	f00b fee5 	bl	24536 <bt_hci_disconnect>
		return;
   1876c:	e7b9      	b.n	186e2 <bt_hci_le_enh_conn_complete+0x11a>
   1876e:	9808      	ldr	r0, [sp, #32]
   18770:	f8c5 008f 	str.w	r0, [r5, #143]	; 0x8f
   18774:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   18778:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   1877c:	f8a5 2093 	strh.w	r2, [r5, #147]	; 0x93
   18780:	f885 3095 	strb.w	r3, [r5, #149]	; 0x95
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   18784:	f001 f9a6 	bl	19ad4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   18788:	7a2b      	ldrb	r3, [r5, #8]
   1878a:	4a10      	ldr	r2, [pc, #64]	; (187cc <bt_hci_le_enh_conn_complete+0x204>)
   1878c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18790:	18d1      	adds	r1, r2, r3
   18792:	58d3      	ldr	r3, [r2, r3]
   18794:	f8c5 3096 	str.w	r3, [r5, #150]	; 0x96
   18798:	8888      	ldrh	r0, [r1, #4]
   1879a:	798b      	ldrb	r3, [r1, #6]
   1879c:	f8a5 009a 	strh.w	r0, [r5, #154]	; 0x9a
   187a0:	f885 309c 	strb.w	r3, [r5, #156]	; 0x9c
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   187a4:	f8d2 10dc 	ldr.w	r1, [r2, #220]	; 0xdc
   187a8:	2200      	movs	r2, #0
   187aa:	f001 0340 	and.w	r3, r1, #64	; 0x40
   187ae:	4313      	orrs	r3, r2
   187b0:	d088      	beq.n	186c4 <bt_hci_le_enh_conn_complete+0xfc>
			bt_le_adv_resume();
   187b2:	f00c f93b 	bl	24a2c <bt_le_adv_resume>
   187b6:	e785      	b.n	186c4 <bt_hci_le_enh_conn_complete+0xfc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   187b8:	2101      	movs	r1, #1
   187ba:	4628      	mov	r0, r5
   187bc:	f001 ffa0 	bl	1a700 <bt_conn_set_state>
   187c0:	e786      	b.n	186d0 <bt_hci_le_enh_conn_complete+0x108>
   187c2:	bf00      	nop
   187c4:	00029c20 	.word	0x00029c20
   187c8:	000288a4 	.word	0x000288a4
   187cc:	200002b0 	.word	0x200002b0
   187d0:	00029c3c 	.word	0x00029c3c

000187d4 <le_phy_update_complete>:
{
   187d4:	b530      	push	{r4, r5, lr}
   187d6:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   187d8:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   187da:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   187de:	4628      	mov	r0, r5
   187e0:	f001 ff84 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   187e4:	b1a8      	cbz	r0, 18812 <le_phy_update_complete+0x3e>
   187e6:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   187e8:	1d03      	adds	r3, r0, #4
   187ea:	f3bf 8f5b 	dmb	ish
   187ee:	e853 2f00 	ldrex	r2, [r3]
   187f2:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   187f6:	e843 1000 	strex	r0, r1, [r3]
   187fa:	2800      	cmp	r0, #0
   187fc:	d1f7      	bne.n	187ee <le_phy_update_complete+0x1a>
   187fe:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   18802:	f012 0f80 	tst.w	r2, #128	; 0x80
   18806:	d129      	bne.n	1885c <le_phy_update_complete+0x88>
	bt_conn_unref(conn);
   18808:	4620      	mov	r0, r4
   1880a:	f00c fa8a 	bl	24d22 <bt_conn_unref>
}
   1880e:	b009      	add	sp, #36	; 0x24
   18810:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18812:	4b1a      	ldr	r3, [pc, #104]	; (1887c <le_phy_update_complete+0xa8>)
   18814:	9306      	str	r3, [sp, #24]
   18816:	9507      	str	r5, [sp, #28]
   18818:	2300      	movs	r3, #0
   1881a:	f8ad 3005 	strh.w	r3, [sp, #5]
   1881e:	f88d 3007 	strb.w	r3, [sp, #7]
   18822:	2203      	movs	r2, #3
   18824:	f88d 2004 	strb.w	r2, [sp, #4]
   18828:	f88d 3006 	strb.w	r3, [sp, #6]
   1882c:	9a01      	ldr	r2, [sp, #4]
   1882e:	9205      	str	r2, [sp, #20]
   18830:	461a      	mov	r2, r3
   18832:	f363 0200 	bfi	r2, r3, #0, #1
   18836:	f363 0241 	bfi	r2, r3, #1, #1
   1883a:	f363 0282 	bfi	r2, r3, #2, #1
   1883e:	f363 02c5 	bfi	r2, r3, #3, #3
   18842:	2101      	movs	r1, #1
   18844:	f361 1288 	bfi	r2, r1, #6, #3
   18848:	210c      	movs	r1, #12
   1884a:	f361 2252 	bfi	r2, r1, #9, #10
   1884e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18852:	490b      	ldr	r1, [pc, #44]	; (18880 <le_phy_update_complete+0xac>)
   18854:	a802      	add	r0, sp, #8
   18856:	f00b fb79 	bl	23f4c <z_log_msg2_finalize>
		return;
   1885a:	e7d8      	b.n	1880e <le_phy_update_complete+0x3a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1885c:	f3bf 8f5b 	dmb	ish
   18860:	e853 2f00 	ldrex	r2, [r3]
   18864:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   18868:	e843 2100 	strex	r1, r2, [r3]
   1886c:	2900      	cmp	r1, #0
   1886e:	d1f7      	bne.n	18860 <le_phy_update_complete+0x8c>
   18870:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   18874:	4620      	mov	r0, r4
   18876:	f7ff fdf7 	bl	18468 <conn_auto_initiate>
   1887a:	e7c5      	b.n	18808 <le_phy_update_complete+0x34>
   1887c:	000297e4 	.word	0x000297e4
   18880:	000288a4 	.word	0x000288a4

00018884 <le_remote_feat_complete>:
{
   18884:	b570      	push	{r4, r5, r6, lr}
   18886:	b088      	sub	sp, #32
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   18888:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1888a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   1888e:	4630      	mov	r0, r6
   18890:	f001 ff2c 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   18894:	b1f0      	cbz	r0, 188d4 <le_remote_feat_complete+0x50>
   18896:	4605      	mov	r5, r0
	if (!evt->status) {
   18898:	7823      	ldrb	r3, [r4, #0]
   1889a:	b933      	cbnz	r3, 188aa <le_remote_feat_complete+0x26>
   1889c:	f854 2f03 	ldr.w	r2, [r4, #3]!
   188a0:	6863      	ldr	r3, [r4, #4]
   188a2:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   188a6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   188aa:	1d2b      	adds	r3, r5, #4
   188ac:	f3bf 8f5b 	dmb	ish
   188b0:	e853 2f00 	ldrex	r2, [r3]
   188b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   188b8:	e843 2100 	strex	r1, r2, [r3]
   188bc:	2900      	cmp	r1, #0
   188be:	d1f7      	bne.n	188b0 <le_remote_feat_complete+0x2c>
   188c0:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   188c4:	4628      	mov	r0, r5
   188c6:	f7ff fdcf 	bl	18468 <conn_auto_initiate>
	bt_conn_unref(conn);
   188ca:	4628      	mov	r0, r5
   188cc:	f00c fa29 	bl	24d22 <bt_conn_unref>
}
   188d0:	b008      	add	sp, #32
   188d2:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   188d4:	4b12      	ldr	r3, [pc, #72]	; (18920 <le_remote_feat_complete+0x9c>)
   188d6:	9306      	str	r3, [sp, #24]
   188d8:	9607      	str	r6, [sp, #28]
   188da:	2300      	movs	r3, #0
   188dc:	f8ad 3005 	strh.w	r3, [sp, #5]
   188e0:	f88d 3007 	strb.w	r3, [sp, #7]
   188e4:	2203      	movs	r2, #3
   188e6:	f88d 2004 	strb.w	r2, [sp, #4]
   188ea:	f88d 3006 	strb.w	r3, [sp, #6]
   188ee:	9a01      	ldr	r2, [sp, #4]
   188f0:	9205      	str	r2, [sp, #20]
   188f2:	461a      	mov	r2, r3
   188f4:	f363 0200 	bfi	r2, r3, #0, #1
   188f8:	f363 0241 	bfi	r2, r3, #1, #1
   188fc:	f363 0282 	bfi	r2, r3, #2, #1
   18900:	f363 02c5 	bfi	r2, r3, #3, #3
   18904:	2101      	movs	r1, #1
   18906:	f361 1288 	bfi	r2, r1, #6, #3
   1890a:	210c      	movs	r1, #12
   1890c:	f361 2252 	bfi	r2, r1, #9, #10
   18910:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18914:	4903      	ldr	r1, [pc, #12]	; (18924 <le_remote_feat_complete+0xa0>)
   18916:	a802      	add	r0, sp, #8
   18918:	f00b fb18 	bl	23f4c <z_log_msg2_finalize>
		return;
   1891c:	e7d8      	b.n	188d0 <le_remote_feat_complete+0x4c>
   1891e:	bf00      	nop
   18920:	000297e4 	.word	0x000297e4
   18924:	000288a4 	.word	0x000288a4

00018928 <le_conn_param_neg_reply>:
{
   18928:	b570      	push	{r4, r5, r6, lr}
   1892a:	b088      	sub	sp, #32
   1892c:	4605      	mov	r5, r0
   1892e:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   18930:	2103      	movs	r1, #3
   18932:	f242 0021 	movw	r0, #8225	; 0x2021
   18936:	f7ff f967 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   1893a:	b168      	cbz	r0, 18958 <le_conn_param_neg_reply+0x30>
   1893c:	4606      	mov	r6, r0
   1893e:	2103      	movs	r1, #3
   18940:	3008      	adds	r0, #8
   18942:	f00d fe6d 	bl	26620 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   18946:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   18948:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1894a:	4631      	mov	r1, r6
   1894c:	f242 0021 	movw	r0, #8225	; 0x2021
   18950:	f7ff fd3c 	bl	183cc <bt_hci_cmd_send>
}
   18954:	b008      	add	sp, #32
   18956:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate buffer");
   18958:	4b11      	ldr	r3, [pc, #68]	; (189a0 <le_conn_param_neg_reply+0x78>)
   1895a:	9306      	str	r3, [sp, #24]
   1895c:	2300      	movs	r3, #0
   1895e:	f8ad 3005 	strh.w	r3, [sp, #5]
   18962:	f88d 3007 	strb.w	r3, [sp, #7]
   18966:	2202      	movs	r2, #2
   18968:	f88d 2004 	strb.w	r2, [sp, #4]
   1896c:	f88d 3006 	strb.w	r3, [sp, #6]
   18970:	9a01      	ldr	r2, [sp, #4]
   18972:	9205      	str	r2, [sp, #20]
   18974:	461a      	mov	r2, r3
   18976:	f363 0200 	bfi	r2, r3, #0, #1
   1897a:	f363 0241 	bfi	r2, r3, #1, #1
   1897e:	f363 0282 	bfi	r2, r3, #2, #1
   18982:	f363 02c5 	bfi	r2, r3, #3, #3
   18986:	2101      	movs	r1, #1
   18988:	f361 1288 	bfi	r2, r1, #6, #3
   1898c:	2108      	movs	r1, #8
   1898e:	f361 2252 	bfi	r2, r1, #9, #10
   18992:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18996:	4903      	ldr	r1, [pc, #12]	; (189a4 <le_conn_param_neg_reply+0x7c>)
   18998:	a802      	add	r0, sp, #8
   1899a:	f00b fad7 	bl	23f4c <z_log_msg2_finalize>
		return;
   1899e:	e7d9      	b.n	18954 <le_conn_param_neg_reply+0x2c>
   189a0:	00029c58 	.word	0x00029c58
   189a4:	000288a4 	.word	0x000288a4

000189a8 <le_conn_param_req>:
{
   189a8:	b530      	push	{r4, r5, lr}
   189aa:	b08b      	sub	sp, #44	; 0x2c
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   189ac:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   189ae:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   189b0:	885a      	ldrh	r2, [r3, #2]
   189b2:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   189b6:	889a      	ldrh	r2, [r3, #4]
   189b8:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
   189bc:	88da      	ldrh	r2, [r3, #6]
   189be:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   189c2:	891b      	ldrh	r3, [r3, #8]
   189c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
   189c8:	4620      	mov	r0, r4
   189ca:	f001 fe8f 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   189ce:	b168      	cbz	r0, 189ec <le_conn_param_req+0x44>
   189d0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   189d2:	a902      	add	r1, sp, #8
   189d4:	f002 f84a 	bl	1aa6c <le_param_req>
   189d8:	bb88      	cbnz	r0, 18a3e <le_conn_param_req+0x96>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   189da:	211e      	movs	r1, #30
   189dc:	4620      	mov	r0, r4
   189de:	f7ff ffa3 	bl	18928 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   189e2:	4628      	mov	r0, r5
   189e4:	f00c f99d 	bl	24d22 <bt_conn_unref>
}
   189e8:	b00b      	add	sp, #44	; 0x2c
   189ea:	bd30      	pop	{r4, r5, pc}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   189ec:	4b16      	ldr	r3, [pc, #88]	; (18a48 <le_conn_param_req+0xa0>)
   189ee:	9308      	str	r3, [sp, #32]
   189f0:	9409      	str	r4, [sp, #36]	; 0x24
   189f2:	2300      	movs	r3, #0
   189f4:	f8ad 3005 	strh.w	r3, [sp, #5]
   189f8:	f88d 3007 	strb.w	r3, [sp, #7]
   189fc:	2203      	movs	r2, #3
   189fe:	f88d 2004 	strb.w	r2, [sp, #4]
   18a02:	f88d 3006 	strb.w	r3, [sp, #6]
   18a06:	9a01      	ldr	r2, [sp, #4]
   18a08:	9207      	str	r2, [sp, #28]
   18a0a:	461a      	mov	r2, r3
   18a0c:	f363 0200 	bfi	r2, r3, #0, #1
   18a10:	f363 0241 	bfi	r2, r3, #1, #1
   18a14:	f363 0282 	bfi	r2, r3, #2, #1
   18a18:	f363 02c5 	bfi	r2, r3, #3, #3
   18a1c:	2101      	movs	r1, #1
   18a1e:	f361 1288 	bfi	r2, r1, #6, #3
   18a22:	210c      	movs	r1, #12
   18a24:	f361 2252 	bfi	r2, r1, #9, #10
   18a28:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18a2c:	4907      	ldr	r1, [pc, #28]	; (18a4c <le_conn_param_req+0xa4>)
   18a2e:	a804      	add	r0, sp, #16
   18a30:	f00b fa8c 	bl	23f4c <z_log_msg2_finalize>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   18a34:	2102      	movs	r1, #2
   18a36:	4620      	mov	r0, r4
   18a38:	f7ff ff76 	bl	18928 <le_conn_param_neg_reply>
		return;
   18a3c:	e7d4      	b.n	189e8 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   18a3e:	a902      	add	r1, sp, #8
   18a40:	4620      	mov	r0, r4
   18a42:	f00b fe52 	bl	246ea <le_conn_param_req_reply>
   18a46:	e7cc      	b.n	189e2 <le_conn_param_req+0x3a>
   18a48:	000297e4 	.word	0x000297e4
   18a4c:	000288a4 	.word	0x000288a4

00018a50 <send_cmd>:
{
   18a50:	b570      	push	{r4, r5, r6, lr}
   18a52:	b08e      	sub	sp, #56	; 0x38
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   18a54:	2200      	movs	r2, #0
   18a56:	2300      	movs	r3, #0
   18a58:	484b      	ldr	r0, [pc, #300]	; (18b88 <send_cmd+0x138>)
   18a5a:	f00d fd6b 	bl	26534 <net_buf_get>
	BT_ASSERT(buf);
   18a5e:	4605      	mov	r5, r0
   18a60:	2800      	cmp	r0, #0
   18a62:	d042      	beq.n	18aea <send_cmd+0x9a>
   18a64:	4c49      	ldr	r4, [pc, #292]	; (18b8c <send_cmd+0x13c>)
   18a66:	f04f 32ff 	mov.w	r2, #4294967295
   18a6a:	f04f 33ff 	mov.w	r3, #4294967295
   18a6e:	f504 708c 	add.w	r0, r4, #280	; 0x118
   18a72:	f008 fb43 	bl	210fc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   18a76:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   18a7a:	b353      	cbz	r3, 18ad2 <send_cmd+0x82>
		BT_ERR("Uncleared pending sent_cmd");
   18a7c:	4b44      	ldr	r3, [pc, #272]	; (18b90 <send_cmd+0x140>)
   18a7e:	9306      	str	r3, [sp, #24]
   18a80:	2400      	movs	r4, #0
   18a82:	f8ad 4005 	strh.w	r4, [sp, #5]
   18a86:	f88d 4007 	strb.w	r4, [sp, #7]
   18a8a:	2302      	movs	r3, #2
   18a8c:	f88d 3004 	strb.w	r3, [sp, #4]
   18a90:	f88d 4006 	strb.w	r4, [sp, #6]
   18a94:	9b01      	ldr	r3, [sp, #4]
   18a96:	9305      	str	r3, [sp, #20]
   18a98:	4622      	mov	r2, r4
   18a9a:	f364 0200 	bfi	r2, r4, #0, #1
   18a9e:	f364 0241 	bfi	r2, r4, #1, #1
   18aa2:	f364 0282 	bfi	r2, r4, #2, #1
   18aa6:	f364 02c5 	bfi	r2, r4, #3, #3
   18aaa:	2301      	movs	r3, #1
   18aac:	f363 1288 	bfi	r2, r3, #6, #3
   18ab0:	2308      	movs	r3, #8
   18ab2:	f363 2252 	bfi	r2, r3, #9, #10
   18ab6:	4623      	mov	r3, r4
   18ab8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18abc:	4935      	ldr	r1, [pc, #212]	; (18b94 <send_cmd+0x144>)
   18abe:	a802      	add	r0, sp, #8
   18ac0:	f00b fa44 	bl	23f4c <z_log_msg2_finalize>
		net_buf_unref(bt_dev.sent_cmd);
   18ac4:	4e31      	ldr	r6, [pc, #196]	; (18b8c <send_cmd+0x13c>)
   18ac6:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   18aca:	f00d fd5f 	bl	2658c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18ace:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   18ad2:	4628      	mov	r0, r5
   18ad4:	f00d fd80 	bl	265d8 <net_buf_ref>
   18ad8:	4b2c      	ldr	r3, [pc, #176]	; (18b8c <send_cmd+0x13c>)
   18ada:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   18ade:	4628      	mov	r0, r5
   18ae0:	f7ff fc6a 	bl	183b8 <bt_send>
	if (err) {
   18ae4:	b978      	cbnz	r0, 18b06 <send_cmd+0xb6>
}
   18ae6:	b00e      	add	sp, #56	; 0x38
   18ae8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf);
   18aea:	f640 132a 	movw	r3, #2346	; 0x92a
   18aee:	4a2a      	ldr	r2, [pc, #168]	; (18b98 <send_cmd+0x148>)
   18af0:	492a      	ldr	r1, [pc, #168]	; (18b9c <send_cmd+0x14c>)
   18af2:	482b      	ldr	r0, [pc, #172]	; (18ba0 <send_cmd+0x150>)
   18af4:	f00a fdf0 	bl	236d8 <printk>
   18af8:	4040      	eors	r0, r0
   18afa:	f380 8811 	msr	BASEPRI, r0
   18afe:	f04f 0003 	mov.w	r0, #3
   18b02:	df02      	svc	2
   18b04:	e7ae      	b.n	18a64 <send_cmd+0x14>
		BT_ERR("Unable to send to driver (err %d)", err);
   18b06:	4a27      	ldr	r2, [pc, #156]	; (18ba4 <send_cmd+0x154>)
   18b08:	920c      	str	r2, [sp, #48]	; 0x30
   18b0a:	900d      	str	r0, [sp, #52]	; 0x34
   18b0c:	2400      	movs	r4, #0
   18b0e:	f8ad 4005 	strh.w	r4, [sp, #5]
   18b12:	f88d 4007 	strb.w	r4, [sp, #7]
   18b16:	2303      	movs	r3, #3
   18b18:	f88d 3004 	strb.w	r3, [sp, #4]
   18b1c:	f88d 4006 	strb.w	r4, [sp, #6]
   18b20:	9b01      	ldr	r3, [sp, #4]
   18b22:	930b      	str	r3, [sp, #44]	; 0x2c
   18b24:	4622      	mov	r2, r4
   18b26:	f364 0200 	bfi	r2, r4, #0, #1
   18b2a:	f364 0241 	bfi	r2, r4, #1, #1
   18b2e:	f364 0282 	bfi	r2, r4, #2, #1
   18b32:	f364 02c5 	bfi	r2, r4, #3, #3
   18b36:	2301      	movs	r3, #1
   18b38:	f363 1288 	bfi	r2, r3, #6, #3
   18b3c:	230c      	movs	r3, #12
   18b3e:	f363 2252 	bfi	r2, r3, #9, #10
   18b42:	4623      	mov	r3, r4
   18b44:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18b48:	4912      	ldr	r1, [pc, #72]	; (18b94 <send_cmd+0x144>)
   18b4a:	a808      	add	r0, sp, #32
   18b4c:	f00b f9fe 	bl	23f4c <z_log_msg2_finalize>
	z_impl_k_sem_give(sem);
   18b50:	4e0e      	ldr	r6, [pc, #56]	; (18b8c <send_cmd+0x13c>)
   18b52:	f506 708c 	add.w	r0, r6, #280	; 0x118
   18b56:	f008 faa9 	bl	210ac <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   18b5a:	4628      	mov	r0, r5
   18b5c:	f00d fc30 	bl	263c0 <net_buf_id>
   18b60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   18b64:	4b10      	ldr	r3, [pc, #64]	; (18ba8 <send_cmd+0x158>)
   18b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   18b6a:	462a      	mov	r2, r5
   18b6c:	211f      	movs	r1, #31
   18b6e:	8840      	ldrh	r0, [r0, #2]
   18b70:	f7fe fbd8 	bl	17324 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   18b74:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   18b78:	f00d fd08 	bl	2658c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18b7c:	f8c6 4130 	str.w	r4, [r6, #304]	; 0x130
		net_buf_unref(buf);
   18b80:	4628      	mov	r0, r5
   18b82:	f00d fd03 	bl	2658c <net_buf_unref>
   18b86:	e7ae      	b.n	18ae6 <send_cmd+0x96>
   18b88:	200003fc 	.word	0x200003fc
   18b8c:	200002b0 	.word	0x200002b0
   18b90:	00029c74 	.word	0x00029c74
   18b94:	000288a4 	.word	0x000288a4
   18b98:	000298f0 	.word	0x000298f0
   18b9c:	0002a924 	.word	0x0002a924
   18ba0:	00029940 	.word	0x00029940
   18ba4:	00029bc4 	.word	0x00029bc4
   18ba8:	20002a80 	.word	0x20002a80

00018bac <process_events>:
{
   18bac:	b570      	push	{r4, r5, r6, lr}
   18bae:	b088      	sub	sp, #32
   18bb0:	4604      	mov	r4, r0
   18bb2:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   18bb4:	e02d      	b.n	18c12 <process_events+0x66>
				send_cmd();
   18bb6:	f7ff ff4b 	bl	18a50 <send_cmd>
   18bba:	e028      	b.n	18c0e <process_events+0x62>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   18bbc:	4b1f      	ldr	r3, [pc, #124]	; (18c3c <process_events+0x90>)
   18bbe:	9306      	str	r3, [sp, #24]
   18bc0:	68e3      	ldr	r3, [r4, #12]
   18bc2:	f3c3 3345 	ubfx	r3, r3, #13, #6
   18bc6:	9307      	str	r3, [sp, #28]
   18bc8:	2300      	movs	r3, #0
   18bca:	f8ad 3005 	strh.w	r3, [sp, #5]
   18bce:	f88d 3007 	strb.w	r3, [sp, #7]
   18bd2:	2203      	movs	r2, #3
   18bd4:	f88d 2004 	strb.w	r2, [sp, #4]
   18bd8:	f88d 3006 	strb.w	r3, [sp, #6]
   18bdc:	9a01      	ldr	r2, [sp, #4]
   18bde:	9205      	str	r2, [sp, #20]
   18be0:	f363 0600 	bfi	r6, r3, #0, #1
   18be4:	f363 0641 	bfi	r6, r3, #1, #1
   18be8:	f363 0682 	bfi	r6, r3, #2, #1
   18bec:	f363 06c5 	bfi	r6, r3, #3, #3
   18bf0:	2202      	movs	r2, #2
   18bf2:	f362 1688 	bfi	r6, r2, #6, #3
   18bf6:	220c      	movs	r2, #12
   18bf8:	f362 2652 	bfi	r6, r2, #9, #10
   18bfc:	f363 46de 	bfi	r6, r3, #19, #12
   18c00:	f363 76df 	bfi	r6, r3, #31, #1
   18c04:	4632      	mov	r2, r6
   18c06:	490e      	ldr	r1, [pc, #56]	; (18c40 <process_events+0x94>)
   18c08:	a802      	add	r0, sp, #8
   18c0a:	f00b f99f 	bl	23f4c <z_log_msg2_finalize>
	for (; count; ev++, count--) {
   18c0e:	3414      	adds	r4, #20
   18c10:	3d01      	subs	r5, #1
   18c12:	b185      	cbz	r5, 18c36 <process_events+0x8a>
		switch (ev->state) {
   18c14:	68e3      	ldr	r3, [r4, #12]
   18c16:	f3c3 3345 	ubfx	r3, r3, #13, #6
   18c1a:	2b01      	cmp	r3, #1
   18c1c:	d9f7      	bls.n	18c0e <process_events+0x62>
   18c1e:	2b04      	cmp	r3, #4
   18c20:	d1cc      	bne.n	18bbc <process_events+0x10>
			if (ev->tag == BT_EVENT_CMD_TX) {
   18c22:	7b23      	ldrb	r3, [r4, #12]
   18c24:	2b00      	cmp	r3, #0
   18c26:	d0c6      	beq.n	18bb6 <process_events+0xa>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   18c28:	2b01      	cmp	r3, #1
   18c2a:	d1f0      	bne.n	18c0e <process_events+0x62>
					conn = CONTAINER_OF(ev->fifo,
   18c2c:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   18c2e:	3838      	subs	r0, #56	; 0x38
   18c30:	f002 f906 	bl	1ae40 <bt_conn_process_tx>
   18c34:	e7eb      	b.n	18c0e <process_events+0x62>
}
   18c36:	b008      	add	sp, #32
   18c38:	bd70      	pop	{r4, r5, r6, pc}
   18c3a:	bf00      	nop
   18c3c:	00029c90 	.word	0x00029c90
   18c40:	000288a4 	.word	0x000288a4

00018c44 <hci_tx_thread>:
{
   18c44:	b538      	push	{r3, r4, r5, lr}
   18c46:	e005      	b.n	18c54 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   18c48:	4621      	mov	r1, r4
   18c4a:	4813      	ldr	r0, [pc, #76]	; (18c98 <hci_tx_thread+0x54>)
   18c4c:	f7ff ffae 	bl	18bac <process_events>
	z_impl_k_yield();
   18c50:	f008 ff48 	bl	21ae4 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   18c54:	4d10      	ldr	r5, [pc, #64]	; (18c98 <hci_tx_thread+0x54>)
   18c56:	68eb      	ldr	r3, [r5, #12]
   18c58:	f36f 3352 	bfc	r3, #13, #6
   18c5c:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18c5e:	f105 0014 	add.w	r0, r5, #20
   18c62:	f001 fd21 	bl	1a6a8 <bt_conn_prepare_events>
   18c66:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   18c68:	f04f 32ff 	mov.w	r2, #4294967295
   18c6c:	f04f 33ff 	mov.w	r3, #4294967295
   18c70:	4621      	mov	r1, r4
   18c72:	4628      	mov	r0, r5
   18c74:	f009 f9d4 	bl	22020 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   18c78:	2800      	cmp	r0, #0
   18c7a:	d0e5      	beq.n	18c48 <hci_tx_thread+0x4>
   18c7c:	f640 1393 	movw	r3, #2451	; 0x993
   18c80:	4a06      	ldr	r2, [pc, #24]	; (18c9c <hci_tx_thread+0x58>)
   18c82:	4907      	ldr	r1, [pc, #28]	; (18ca0 <hci_tx_thread+0x5c>)
   18c84:	4807      	ldr	r0, [pc, #28]	; (18ca4 <hci_tx_thread+0x60>)
   18c86:	f00a fd27 	bl	236d8 <printk>
   18c8a:	4040      	eors	r0, r0
   18c8c:	f380 8811 	msr	BASEPRI, r0
   18c90:	f04f 0003 	mov.w	r0, #3
   18c94:	df02      	svc	2
   18c96:	e7d7      	b.n	18c48 <hci_tx_thread+0x4>
   18c98:	20000598 	.word	0x20000598
   18c9c:	000298f0 	.word	0x000298f0
   18ca0:	00029a34 	.word	0x00029a34
   18ca4:	00029940 	.word	0x00029940

00018ca8 <hci_event_prio>:
{
   18ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18cac:	b088      	sub	sp, #32
   18cae:	af06      	add	r7, sp, #24
   18cb0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   18cb2:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   18cb6:	4628      	mov	r0, r5
   18cb8:	f00d fcea 	bl	26690 <net_buf_simple_headroom>
   18cbc:	80b8      	strh	r0, [r7, #4]
	state->len = buf->len;
   18cbe:	89a3      	ldrh	r3, [r4, #12]
   18cc0:	80fb      	strh	r3, [r7, #6]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18cc2:	2b01      	cmp	r3, #1
   18cc4:	d915      	bls.n	18cf2 <hci_event_prio+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   18cc6:	2102      	movs	r1, #2
   18cc8:	4628      	mov	r0, r5
   18cca:	f00d fcd1 	bl	26670 <net_buf_simple_pull_mem>
   18cce:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18cd0:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   18cd2:	3b05      	subs	r3, #5
   18cd4:	2b15      	cmp	r3, #21
   18cd6:	d81c      	bhi.n	18d12 <hci_event_prio+0x6a>
   18cd8:	e8df f003 	tbb	[pc, r3]
   18cdc:	1b1b1b19 	.word	0x1b1b1b19
   18ce0:	1b1b1b1b 	.word	0x1b1b1b1b
   18ce4:	1b3e3e1b 	.word	0x1b3e3e1b
   18ce8:	1b3e1b1b 	.word	0x1b3e1b1b
   18cec:	1b1b1b1b 	.word	0x1b1b1b1b
   18cf0:	3e1b      	.short	0x3e1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18cf2:	f640 5327 	movw	r3, #3367	; 0xd27
   18cf6:	4a4d      	ldr	r2, [pc, #308]	; (18e2c <hci_event_prio+0x184>)
   18cf8:	494d      	ldr	r1, [pc, #308]	; (18e30 <hci_event_prio+0x188>)
   18cfa:	484e      	ldr	r0, [pc, #312]	; (18e34 <hci_event_prio+0x18c>)
   18cfc:	f00a fcec 	bl	236d8 <printk>
   18d00:	4040      	eors	r0, r0
   18d02:	f380 8811 	msr	BASEPRI, r0
   18d06:	f04f 0003 	mov.w	r0, #3
   18d0a:	df02      	svc	2
   18d0c:	e7db      	b.n	18cc6 <hci_event_prio+0x1e>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18d0e:	2603      	movs	r6, #3
   18d10:	e000      	b.n	18d14 <hci_event_prio+0x6c>
		return BT_HCI_EVT_FLAG_RECV;
   18d12:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18d14:	f016 0f01 	tst.w	r6, #1
   18d18:	d020      	beq.n	18d5c <hci_event_prio+0xb4>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   18d1a:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   18d1c:	2300      	movs	r3, #0
   18d1e:	2b04      	cmp	r3, #4
   18d20:	d86c      	bhi.n	18dfc <hci_event_prio+0x154>
		const struct event_handler *handler = &handlers[i];
   18d22:	4a45      	ldr	r2, [pc, #276]	; (18e38 <hci_event_prio+0x190>)
   18d24:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
		if (handler->event != event) {
   18d28:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   18d2c:	4295      	cmp	r5, r2
   18d2e:	d123      	bne.n	18d78 <hci_event_prio+0xd0>
		if (buf->len < handler->min_len) {
   18d30:	89a2      	ldrh	r2, [r4, #12]
   18d32:	784b      	ldrb	r3, [r1, #1]
   18d34:	429a      	cmp	r2, r3
   18d36:	d321      	bcc.n	18d7c <hci_event_prio+0xd4>
		handler->handler(buf);
   18d38:	684b      	ldr	r3, [r1, #4]
   18d3a:	4620      	mov	r0, r4
   18d3c:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18d3e:	f016 0f02 	tst.w	r6, #2
   18d42:	d06f      	beq.n	18e24 <hci_event_prio+0x17c>
	buf->data = buf->__buf + state->offset;
   18d44:	6923      	ldr	r3, [r4, #16]
   18d46:	88ba      	ldrh	r2, [r7, #4]
   18d48:	4413      	add	r3, r2
   18d4a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   18d4c:	88fb      	ldrh	r3, [r7, #6]
   18d4e:	81a3      	strh	r3, [r4, #12]
}
   18d50:	3708      	adds	r7, #8
   18d52:	46bd      	mov	sp, r7
   18d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   18d58:	2601      	movs	r6, #1
   18d5a:	e7db      	b.n	18d14 <hci_event_prio+0x6c>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   18d5c:	f640 532b 	movw	r3, #3371	; 0xd2b
   18d60:	4a32      	ldr	r2, [pc, #200]	; (18e2c <hci_event_prio+0x184>)
   18d62:	4936      	ldr	r1, [pc, #216]	; (18e3c <hci_event_prio+0x194>)
   18d64:	4833      	ldr	r0, [pc, #204]	; (18e34 <hci_event_prio+0x18c>)
   18d66:	f00a fcb7 	bl	236d8 <printk>
   18d6a:	4040      	eors	r0, r0
   18d6c:	f380 8811 	msr	BASEPRI, r0
   18d70:	f04f 0003 	mov.w	r0, #3
   18d74:	df02      	svc	2
   18d76:	e7d0      	b.n	18d1a <hci_event_prio+0x72>
	for (i = 0; i < num_handlers; i++) {
   18d78:	3301      	adds	r3, #1
   18d7a:	e7d0      	b.n	18d1e <hci_event_prio+0x76>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   18d7c:	46e8      	mov	r8, sp
   18d7e:	b088      	sub	sp, #32
   18d80:	a806      	add	r0, sp, #24
   18d82:	466b      	mov	r3, sp
   18d84:	3324      	adds	r3, #36	; 0x24
   18d86:	d033      	beq.n	18df0 <hci_event_prio+0x148>
   18d88:	2210      	movs	r2, #16
   18d8a:	b11b      	cbz	r3, 18d94 <hci_event_prio+0xec>
   18d8c:	2a04      	cmp	r2, #4
   18d8e:	dd01      	ble.n	18d94 <hci_event_prio+0xec>
   18d90:	492b      	ldr	r1, [pc, #172]	; (18e40 <hci_event_prio+0x198>)
   18d92:	6101      	str	r1, [r0, #16]
   18d94:	89a1      	ldrh	r1, [r4, #12]
   18d96:	b113      	cbz	r3, 18d9e <hci_event_prio+0xf6>
   18d98:	2a08      	cmp	r2, #8
   18d9a:	dd00      	ble.n	18d9e <hci_event_prio+0xf6>
   18d9c:	6141      	str	r1, [r0, #20]
   18d9e:	b113      	cbz	r3, 18da6 <hci_event_prio+0xfe>
   18da0:	2a0c      	cmp	r2, #12
   18da2:	dd00      	ble.n	18da6 <hci_event_prio+0xfe>
   18da4:	6185      	str	r5, [r0, #24]
   18da6:	2a0f      	cmp	r2, #15
   18da8:	dd25      	ble.n	18df6 <hci_event_prio+0x14e>
   18daa:	2110      	movs	r1, #16
   18dac:	b143      	cbz	r3, 18dc0 <hci_event_prio+0x118>
   18dae:	2300      	movs	r3, #0
   18db0:	f8a7 3001 	strh.w	r3, [r7, #1]
   18db4:	70fb      	strb	r3, [r7, #3]
   18db6:	2204      	movs	r2, #4
   18db8:	703a      	strb	r2, [r7, #0]
   18dba:	70bb      	strb	r3, [r7, #2]
   18dbc:	683b      	ldr	r3, [r7, #0]
   18dbe:	60c3      	str	r3, [r0, #12]
   18dc0:	2200      	movs	r2, #0
   18dc2:	f36f 0200 	bfc	r2, #0, #1
   18dc6:	f36f 0241 	bfc	r2, #1, #1
   18dca:	f36f 0282 	bfc	r2, #2, #1
   18dce:	f36f 02c5 	bfc	r2, #3, #3
   18dd2:	2301      	movs	r3, #1
   18dd4:	f363 1288 	bfi	r2, r3, #6, #3
   18dd8:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   18ddc:	f363 2252 	bfi	r2, r3, #9, #10
   18de0:	2300      	movs	r3, #0
   18de2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18de6:	4917      	ldr	r1, [pc, #92]	; (18e44 <hci_event_prio+0x19c>)
   18de8:	f00b f8b0 	bl	23f4c <z_log_msg2_finalize>
   18dec:	46c5      	mov	sp, r8
			return;
   18dee:	e7a6      	b.n	18d3e <hci_event_prio+0x96>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   18df0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18df4:	e7c9      	b.n	18d8a <hci_event_prio+0xe2>
   18df6:	f06f 011b 	mvn.w	r1, #27
   18dfa:	e7d7      	b.n	18dac <hci_event_prio+0x104>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   18dfc:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   18e00:	4641      	mov	r1, r8
   18e02:	68a0      	ldr	r0, [r4, #8]
   18e04:	f7fd fe24 	bl	16a50 <bt_hex_real>
   18e08:	9004      	str	r0, [sp, #16]
   18e0a:	f8cd 800c 	str.w	r8, [sp, #12]
   18e0e:	9502      	str	r5, [sp, #8]
   18e10:	4b0d      	ldr	r3, [pc, #52]	; (18e48 <hci_event_prio+0x1a0>)
   18e12:	9301      	str	r3, [sp, #4]
   18e14:	2000      	movs	r0, #0
   18e16:	9000      	str	r0, [sp, #0]
   18e18:	4603      	mov	r3, r0
   18e1a:	2202      	movs	r2, #2
   18e1c:	4909      	ldr	r1, [pc, #36]	; (18e44 <hci_event_prio+0x19c>)
   18e1e:	f00b fb44 	bl	244aa <z_log_msg2_runtime_create>
   18e22:	e78c      	b.n	18d3e <hci_event_prio+0x96>
		net_buf_unref(buf);
   18e24:	4620      	mov	r0, r4
   18e26:	f00d fbb1 	bl	2658c <net_buf_unref>
}
   18e2a:	e791      	b.n	18d50 <hci_event_prio+0xa8>
   18e2c:	000298f0 	.word	0x000298f0
   18e30:	00029924 	.word	0x00029924
   18e34:	00029940 	.word	0x00029940
   18e38:	00029de4 	.word	0x00029de4
   18e3c:	00029cb4 	.word	0x00029cb4
   18e40:	000299a8 	.word	0x000299a8
   18e44:	000288a4 	.word	0x000288a4
   18e48:	000299cc 	.word	0x000299cc

00018e4c <bt_recv>:
{
   18e4c:	b530      	push	{r4, r5, lr}
   18e4e:	b089      	sub	sp, #36	; 0x24
   18e50:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   18e52:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   18e54:	2d01      	cmp	r5, #1
   18e56:	d008      	beq.n	18e6a <bt_recv+0x1e>
   18e58:	2d03      	cmp	r5, #3
   18e5a:	d12d      	bne.n	18eb8 <bt_recv+0x6c>
		net_buf_put(&bt_dev.rx_queue, buf);
   18e5c:	4601      	mov	r1, r0
   18e5e:	482b      	ldr	r0, [pc, #172]	; (18f0c <bt_recv+0xc0>)
   18e60:	f00d fb87 	bl	26572 <net_buf_put>
		return 0;
   18e64:	2000      	movs	r0, #0
}
   18e66:	b009      	add	sp, #36	; 0x24
   18e68:	bd30      	pop	{r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   18e6a:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18e6c:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   18e6e:	3b05      	subs	r3, #5
   18e70:	2b15      	cmp	r3, #21
   18e72:	d80e      	bhi.n	18e92 <bt_recv+0x46>
   18e74:	e8df f003 	tbb	[pc, r3]
   18e78:	0d0d0d0b 	.word	0x0d0d0d0b
   18e7c:	0d0d0d0d 	.word	0x0d0d0d0d
   18e80:	0d0e0e0d 	.word	0x0d0e0e0d
   18e84:	0d0e0d0d 	.word	0x0d0e0d0d
   18e88:	0d0d0d0d 	.word	0x0d0d0d0d
   18e8c:	0e0d      	.short	0x0e0d
   18e8e:	2503      	movs	r5, #3
   18e90:	e000      	b.n	18e94 <bt_recv+0x48>
		return BT_HCI_EVT_FLAG_RECV;
   18e92:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   18e94:	f015 0f01 	tst.w	r5, #1
   18e98:	d104      	bne.n	18ea4 <bt_recv+0x58>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18e9a:	f015 0f02 	tst.w	r5, #2
   18e9e:	d105      	bne.n	18eac <bt_recv+0x60>
		return 0;
   18ea0:	2000      	movs	r0, #0
   18ea2:	e7e0      	b.n	18e66 <bt_recv+0x1a>
			hci_event_prio(buf);
   18ea4:	4620      	mov	r0, r4
   18ea6:	f7ff feff 	bl	18ca8 <hci_event_prio>
   18eaa:	e7f6      	b.n	18e9a <bt_recv+0x4e>
			net_buf_put(&bt_dev.rx_queue, buf);
   18eac:	4621      	mov	r1, r4
   18eae:	4817      	ldr	r0, [pc, #92]	; (18f0c <bt_recv+0xc0>)
   18eb0:	f00d fb5f 	bl	26572 <net_buf_put>
		return 0;
   18eb4:	2000      	movs	r0, #0
   18eb6:	e7d6      	b.n	18e66 <bt_recv+0x1a>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   18eb8:	4a15      	ldr	r2, [pc, #84]	; (18f10 <bt_recv+0xc4>)
   18eba:	9206      	str	r2, [sp, #24]
   18ebc:	9507      	str	r5, [sp, #28]
   18ebe:	2300      	movs	r3, #0
   18ec0:	f8ad 3005 	strh.w	r3, [sp, #5]
   18ec4:	f88d 3007 	strb.w	r3, [sp, #7]
   18ec8:	2203      	movs	r2, #3
   18eca:	f88d 2004 	strb.w	r2, [sp, #4]
   18ece:	f88d 3006 	strb.w	r3, [sp, #6]
   18ed2:	9a01      	ldr	r2, [sp, #4]
   18ed4:	9205      	str	r2, [sp, #20]
   18ed6:	461a      	mov	r2, r3
   18ed8:	f363 0200 	bfi	r2, r3, #0, #1
   18edc:	f363 0241 	bfi	r2, r3, #1, #1
   18ee0:	f363 0282 	bfi	r2, r3, #2, #1
   18ee4:	f363 02c5 	bfi	r2, r3, #3, #3
   18ee8:	2101      	movs	r1, #1
   18eea:	f361 1288 	bfi	r2, r1, #6, #3
   18eee:	210c      	movs	r1, #12
   18ef0:	f361 2252 	bfi	r2, r1, #9, #10
   18ef4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   18ef8:	4906      	ldr	r1, [pc, #24]	; (18f14 <bt_recv+0xc8>)
   18efa:	a802      	add	r0, sp, #8
   18efc:	f00b f826 	bl	23f4c <z_log_msg2_finalize>
		net_buf_unref(buf);
   18f00:	4620      	mov	r0, r4
   18f02:	f00d fb43 	bl	2658c <net_buf_unref>
		return -EINVAL;
   18f06:	f06f 0015 	mvn.w	r0, #21
   18f0a:	e7ac      	b.n	18e66 <bt_recv+0x1a>
   18f0c:	200003e4 	.word	0x200003e4
   18f10:	00029cd0 	.word	0x00029cd0
   18f14:	000288a4 	.word	0x000288a4

00018f18 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   18f18:	4b0a      	ldr	r3, [pc, #40]	; (18f44 <bt_hci_driver_register+0x2c>)
   18f1a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   18f1e:	b943      	cbnz	r3, 18f32 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   18f20:	68c3      	ldr	r3, [r0, #12]
   18f22:	b14b      	cbz	r3, 18f38 <bt_hci_driver_register+0x20>
   18f24:	6903      	ldr	r3, [r0, #16]
   18f26:	b153      	cbz	r3, 18f3e <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   18f28:	4b06      	ldr	r3, [pc, #24]	; (18f44 <bt_hci_driver_register+0x2c>)
   18f2a:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   18f2e:	2000      	movs	r0, #0
   18f30:	4770      	bx	lr
		return -EALREADY;
   18f32:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18f36:	4770      	bx	lr
		return -EINVAL;
   18f38:	f06f 0015 	mvn.w	r0, #21
   18f3c:	4770      	bx	lr
   18f3e:	f06f 0015 	mvn.w	r0, #21
}
   18f42:	4770      	bx	lr
   18f44:	200002b0 	.word	0x200002b0

00018f48 <bt_finalize_init>:
{
   18f48:	b508      	push	{r3, lr}
   18f4a:	4b08      	ldr	r3, [pc, #32]	; (18f6c <bt_finalize_init+0x24>)
   18f4c:	f3bf 8f5b 	dmb	ish
   18f50:	e853 2f00 	ldrex	r2, [r3]
   18f54:	f042 0202 	orr.w	r2, r2, #2
   18f58:	e843 2100 	strex	r1, r2, [r3]
   18f5c:	2900      	cmp	r1, #0
   18f5e:	d1f7      	bne.n	18f50 <bt_finalize_init+0x8>
   18f60:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
   18f64:	f7fd ffc2 	bl	16eec <bt_dev_show_info>
}
   18f68:	bd08      	pop	{r3, pc}
   18f6a:	bf00      	nop
   18f6c:	2000037c 	.word	0x2000037c

00018f70 <init_work>:
{
   18f70:	b508      	push	{r3, lr}
	err = bt_init();
   18f72:	f00b fbdf 	bl	24734 <bt_init>
	if (ready_cb) {
   18f76:	4b02      	ldr	r3, [pc, #8]	; (18f80 <init_work+0x10>)
   18f78:	681b      	ldr	r3, [r3, #0]
   18f7a:	b103      	cbz	r3, 18f7e <init_work+0xe>
		ready_cb(err);
   18f7c:	4798      	blx	r3
}
   18f7e:	bd08      	pop	{r3, pc}
   18f80:	20002a9c 	.word	0x20002a9c

00018f84 <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   18f84:	b570      	push	{r4, r5, r6, lr}
   18f86:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   18f88:	f7f3 fb4c 	bl	c624 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   18f8c:	2841      	cmp	r0, #65	; 0x41
   18f8e:	d813      	bhi.n	18fb8 <bt_set_name+0x34>
   18f90:	4604      	mov	r4, r0
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   18f92:	4629      	mov	r1, r5
   18f94:	480a      	ldr	r0, [pc, #40]	; (18fc0 <bt_set_name+0x3c>)
   18f96:	f7f3 fb3b 	bl	c610 <strcmp>
   18f9a:	b900      	cbnz	r0, 18f9e <bt_set_name+0x1a>

	return 0;
#else
	return -ENOMEM;
#endif
}
   18f9c:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   18f9e:	4e09      	ldr	r6, [pc, #36]	; (18fc4 <bt_set_name+0x40>)
   18fa0:	2348      	movs	r3, #72	; 0x48
   18fa2:	4622      	mov	r2, r4
   18fa4:	4629      	mov	r1, r5
   18fa6:	f506 70b4 	add.w	r0, r6, #360	; 0x168
   18faa:	f00f fab4 	bl	28516 <__strncpy_chk>
	bt_dev.name[len] = '\0';
   18fae:	4434      	add	r4, r6
   18fb0:	2000      	movs	r0, #0
   18fb2:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
	return 0;
   18fb6:	e7f1      	b.n	18f9c <bt_set_name+0x18>
		return -ENOMEM;
   18fb8:	f06f 000b 	mvn.w	r0, #11
   18fbc:	e7ee      	b.n	18f9c <bt_set_name+0x18>
   18fbe:	bf00      	nop
   18fc0:	20000418 	.word	0x20000418
   18fc4:	200002b0 	.word	0x200002b0

00018fc8 <bt_enable>:
{
   18fc8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   18fcc:	b09c      	sub	sp, #112	; 0x70
	if (!bt_dev.drv) {
   18fce:	4b6a      	ldr	r3, [pc, #424]	; (19178 <bt_enable+0x1b0>)
   18fd0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   18fd4:	2b00      	cmp	r3, #0
   18fd6:	d058      	beq.n	1908a <bt_enable+0xc2>
   18fd8:	4605      	mov	r5, r0
   18fda:	4b68      	ldr	r3, [pc, #416]	; (1917c <bt_enable+0x1b4>)
   18fdc:	f3bf 8f5b 	dmb	ish
   18fe0:	e853 2f00 	ldrex	r2, [r3]
   18fe4:	f042 0101 	orr.w	r1, r2, #1
   18fe8:	e843 1000 	strex	r0, r1, [r3]
   18fec:	2800      	cmp	r0, #0
   18fee:	d1f7      	bne.n	18fe0 <bt_enable+0x18>
   18ff0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18ff4:	f012 0f01 	tst.w	r2, #1
   18ff8:	f040 80bb 	bne.w	19172 <bt_enable+0x1aa>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   18ffc:	4860      	ldr	r0, [pc, #384]	; (19180 <bt_enable+0x1b8>)
   18ffe:	f7ff ffc1 	bl	18f84 <bt_set_name>
		if (err) {
   19002:	2800      	cmp	r0, #0
   19004:	d167      	bne.n	190d6 <bt_enable+0x10e>
	ready_cb = cb;
   19006:	4b5f      	ldr	r3, [pc, #380]	; (19184 <bt_enable+0x1bc>)
   19008:	601d      	str	r5, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   1900a:	f04f 0800 	mov.w	r8, #0
   1900e:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19012:	4e5d      	ldr	r6, [pc, #372]	; (19188 <bt_enable+0x1c0>)
   19014:	e9cd 8906 	strd	r8, r9, [sp, #24]
   19018:	2400      	movs	r4, #0
   1901a:	9404      	str	r4, [sp, #16]
   1901c:	f06f 0308 	mvn.w	r3, #8
   19020:	9303      	str	r3, [sp, #12]
   19022:	9402      	str	r4, [sp, #8]
   19024:	9401      	str	r4, [sp, #4]
   19026:	9400      	str	r4, [sp, #0]
   19028:	4b58      	ldr	r3, [pc, #352]	; (1918c <bt_enable+0x1c4>)
   1902a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   1902e:	4958      	ldr	r1, [pc, #352]	; (19190 <bt_enable+0x1c8>)
   19030:	4630      	mov	r0, r6
   19032:	f00e fd03 	bl	27a3c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19036:	4957      	ldr	r1, [pc, #348]	; (19194 <bt_enable+0x1cc>)
   19038:	4630      	mov	r0, r6
   1903a:	f007 fe3f 	bl	20cbc <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1903e:	4e56      	ldr	r6, [pc, #344]	; (19198 <bt_enable+0x1d0>)
   19040:	e9cd 8906 	strd	r8, r9, [sp, #24]
   19044:	9404      	str	r4, [sp, #16]
   19046:	f06f 0307 	mvn.w	r3, #7
   1904a:	9303      	str	r3, [sp, #12]
   1904c:	9402      	str	r4, [sp, #8]
   1904e:	9401      	str	r4, [sp, #4]
   19050:	9400      	str	r4, [sp, #0]
   19052:	4b52      	ldr	r3, [pc, #328]	; (1919c <bt_enable+0x1d4>)
   19054:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19058:	4951      	ldr	r1, [pc, #324]	; (191a0 <bt_enable+0x1d8>)
   1905a:	4630      	mov	r0, r6
   1905c:	f00e fcee 	bl	27a3c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19060:	4950      	ldr	r1, [pc, #320]	; (191a4 <bt_enable+0x1dc>)
   19062:	4630      	mov	r0, r6
   19064:	f007 fe2a 	bl	20cbc <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   19068:	4b43      	ldr	r3, [pc, #268]	; (19178 <bt_enable+0x1b0>)
   1906a:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   1906e:	68db      	ldr	r3, [r3, #12]
   19070:	4798      	blx	r3
	if (err) {
   19072:	4604      	mov	r4, r0
   19074:	2800      	cmp	r0, #0
   19076:	d153      	bne.n	19120 <bt_enable+0x158>
	if (!cb) {
   19078:	2d00      	cmp	r5, #0
   1907a:	d076      	beq.n	1916a <bt_enable+0x1a2>
	k_work_submit(&bt_dev.init);
   1907c:	484a      	ldr	r0, [pc, #296]	; (191a8 <bt_enable+0x1e0>)
   1907e:	f008 f9df 	bl	21440 <k_work_submit>
}
   19082:	4620      	mov	r0, r4
   19084:	b01c      	add	sp, #112	; 0x70
   19086:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
		BT_ERR("No HCI driver registered");
   1908a:	4b48      	ldr	r3, [pc, #288]	; (191ac <bt_enable+0x1e4>)
   1908c:	931a      	str	r3, [sp, #104]	; 0x68
   1908e:	2300      	movs	r3, #0
   19090:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
   19094:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   19098:	2202      	movs	r2, #2
   1909a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   1909e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   190a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   190a4:	9219      	str	r2, [sp, #100]	; 0x64
   190a6:	461a      	mov	r2, r3
   190a8:	f363 0200 	bfi	r2, r3, #0, #1
   190ac:	f363 0241 	bfi	r2, r3, #1, #1
   190b0:	f363 0282 	bfi	r2, r3, #2, #1
   190b4:	f363 02c5 	bfi	r2, r3, #3, #3
   190b8:	2101      	movs	r1, #1
   190ba:	f361 1288 	bfi	r2, r1, #6, #3
   190be:	2108      	movs	r1, #8
   190c0:	f361 2252 	bfi	r2, r1, #9, #10
   190c4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   190c8:	4939      	ldr	r1, [pc, #228]	; (191b0 <bt_enable+0x1e8>)
   190ca:	a816      	add	r0, sp, #88	; 0x58
   190cc:	f00a ff3e 	bl	23f4c <z_log_msg2_finalize>
		return -ENODEV;
   190d0:	f06f 0412 	mvn.w	r4, #18
   190d4:	e7d5      	b.n	19082 <bt_enable+0xba>
			BT_WARN("Failed to set device name (%d)", err);
   190d6:	4a37      	ldr	r2, [pc, #220]	; (191b4 <bt_enable+0x1ec>)
   190d8:	920e      	str	r2, [sp, #56]	; 0x38
   190da:	900f      	str	r0, [sp, #60]	; 0x3c
   190dc:	2300      	movs	r3, #0
   190de:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
   190e2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   190e6:	2203      	movs	r2, #3
   190e8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   190ec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   190f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   190f2:	920d      	str	r2, [sp, #52]	; 0x34
   190f4:	461a      	mov	r2, r3
   190f6:	f363 0200 	bfi	r2, r3, #0, #1
   190fa:	f363 0241 	bfi	r2, r3, #1, #1
   190fe:	f363 0282 	bfi	r2, r3, #2, #1
   19102:	f363 02c5 	bfi	r2, r3, #3, #3
   19106:	2102      	movs	r1, #2
   19108:	f361 1288 	bfi	r2, r1, #6, #3
   1910c:	210c      	movs	r1, #12
   1910e:	f361 2252 	bfi	r2, r1, #9, #10
   19112:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19116:	4926      	ldr	r1, [pc, #152]	; (191b0 <bt_enable+0x1e8>)
   19118:	a80a      	add	r0, sp, #40	; 0x28
   1911a:	f00a ff17 	bl	23f4c <z_log_msg2_finalize>
   1911e:	e772      	b.n	19006 <bt_enable+0x3e>
		BT_ERR("HCI driver open failed (%d)", err);
   19120:	4b25      	ldr	r3, [pc, #148]	; (191b8 <bt_enable+0x1f0>)
   19122:	9314      	str	r3, [sp, #80]	; 0x50
   19124:	9015      	str	r0, [sp, #84]	; 0x54
   19126:	2300      	movs	r3, #0
   19128:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
   1912c:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   19130:	2203      	movs	r2, #3
   19132:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   19136:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1913a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1913c:	9213      	str	r2, [sp, #76]	; 0x4c
   1913e:	461a      	mov	r2, r3
   19140:	f363 0200 	bfi	r2, r3, #0, #1
   19144:	f363 0241 	bfi	r2, r3, #1, #1
   19148:	f363 0282 	bfi	r2, r3, #2, #1
   1914c:	f363 02c5 	bfi	r2, r3, #3, #3
   19150:	2101      	movs	r1, #1
   19152:	f361 1288 	bfi	r2, r1, #6, #3
   19156:	210c      	movs	r1, #12
   19158:	f361 2252 	bfi	r2, r1, #9, #10
   1915c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19160:	4913      	ldr	r1, [pc, #76]	; (191b0 <bt_enable+0x1e8>)
   19162:	a810      	add	r0, sp, #64	; 0x40
   19164:	f00a fef2 	bl	23f4c <z_log_msg2_finalize>
		return err;
   19168:	e78b      	b.n	19082 <bt_enable+0xba>
		return bt_init();
   1916a:	f00b fae3 	bl	24734 <bt_init>
   1916e:	4604      	mov	r4, r0
   19170:	e787      	b.n	19082 <bt_enable+0xba>
		return -EALREADY;
   19172:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19176:	e784      	b.n	19082 <bt_enable+0xba>
   19178:	200002b0 	.word	0x200002b0
   1917c:	2000037c 	.word	0x2000037c
   19180:	00029d00 	.word	0x00029d00
   19184:	20002a9c 	.word	0x20002a9c
   19188:	20001808 	.word	0x20001808
   1918c:	00018c45 	.word	0x00018c45
   19190:	200058e0 	.word	0x200058e0
   19194:	00029d30 	.word	0x00029d30
   19198:	20001750 	.word	0x20001750
   1919c:	00017b55 	.word	0x00017b55
   191a0:	200050c0 	.word	0x200050c0
   191a4:	00029d38 	.word	0x00029d38
   191a8:	2000036c 	.word	0x2000036c
   191ac:	00029ce4 	.word	0x00029ce4
   191b0:	000288a4 	.word	0x000288a4
   191b4:	00029d10 	.word	0x00029d10
   191b8:	00029d40 	.word	0x00029d40

000191bc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   191bc:	4800      	ldr	r0, [pc, #0]	; (191c0 <bt_get_name+0x4>)
   191be:	4770      	bx	lr
   191c0:	20000418 	.word	0x20000418

000191c4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   191c4:	b570      	push	{r4, r5, r6, lr}
   191c6:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   191c8:	2400      	movs	r4, #0
   191ca:	4b0a      	ldr	r3, [pc, #40]	; (191f4 <id_find+0x30>)
   191cc:	79db      	ldrb	r3, [r3, #7]
   191ce:	42a3      	cmp	r3, r4
   191d0:	d90c      	bls.n	191ec <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   191d2:	4626      	mov	r6, r4
   191d4:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   191d8:	2207      	movs	r2, #7
   191da:	4b06      	ldr	r3, [pc, #24]	; (191f4 <id_find+0x30>)
   191dc:	4419      	add	r1, r3
   191de:	4628      	mov	r0, r5
   191e0:	f00f f94f 	bl	28482 <memcmp>
   191e4:	b120      	cbz	r0, 191f0 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   191e6:	3401      	adds	r4, #1
   191e8:	b2e4      	uxtb	r4, r4
   191ea:	e7ee      	b.n	191ca <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   191ec:	f06f 0601 	mvn.w	r6, #1
}
   191f0:	4630      	mov	r0, r6
   191f2:	bd70      	pop	{r4, r5, r6, pc}
   191f4:	200002b0 	.word	0x200002b0

000191f8 <set_random_address>:
{
   191f8:	b538      	push	{r3, r4, r5, lr}
   191fa:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   191fc:	2206      	movs	r2, #6
   191fe:	4913      	ldr	r1, [pc, #76]	; (1924c <set_random_address+0x54>)
   19200:	f00f f93f 	bl	28482 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19204:	b900      	cbnz	r0, 19208 <set_random_address+0x10>
}
   19206:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19208:	2106      	movs	r1, #6
   1920a:	f242 0005 	movw	r0, #8197	; 0x2005
   1920e:	f7fe fcfb 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   19212:	4605      	mov	r5, r0
   19214:	b1b8      	cbz	r0, 19246 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19216:	2206      	movs	r2, #6
   19218:	4621      	mov	r1, r4
   1921a:	3008      	adds	r0, #8
   1921c:	f00d fa06 	bl	2662c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19220:	2200      	movs	r2, #0
   19222:	4629      	mov	r1, r5
   19224:	f242 0005 	movw	r0, #8197	; 0x2005
   19228:	f7fe fd2a 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   1922c:	2800      	cmp	r0, #0
   1922e:	d1ea      	bne.n	19206 <set_random_address+0xe>
	memcpy(dst, src, sizeof(*dst));
   19230:	4b07      	ldr	r3, [pc, #28]	; (19250 <set_random_address+0x58>)
   19232:	6822      	ldr	r2, [r4, #0]
   19234:	f8c3 2061 	str.w	r2, [r3, #97]	; 0x61
   19238:	88a2      	ldrh	r2, [r4, #4]
   1923a:	f8a3 2065 	strh.w	r2, [r3, #101]	; 0x65
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   1923e:	2201      	movs	r2, #1
   19240:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	return 0;
   19244:	e7df      	b.n	19206 <set_random_address+0xe>
		return -ENOBUFS;
   19246:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1924a:	e7dc      	b.n	19206 <set_random_address+0xe>
   1924c:	20000311 	.word	0x20000311
   19250:	200002b0 	.word	0x200002b0

00019254 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19254:	b530      	push	{r4, r5, lr}
   19256:	b085      	sub	sp, #20
   19258:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   1925a:	460d      	mov	r5, r1
   1925c:	b149      	cbz	r1, 19272 <id_create+0x1e>
   1925e:	2300      	movs	r3, #0
   19260:	9302      	str	r3, [sp, #8]
   19262:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   19266:	2207      	movs	r2, #7
   19268:	a902      	add	r1, sp, #8
   1926a:	4628      	mov	r0, r5
   1926c:	f00f f909 	bl	28482 <memcmp>
   19270:	bb00      	cbnz	r0, 192b4 <id_create+0x60>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   19272:	4668      	mov	r0, sp
   19274:	f00b f90b 	bl	2448e <bt_addr_le_create_static>
			if (err) {
   19278:	4603      	mov	r3, r0
   1927a:	b9c0      	cbnz	r0, 192ae <id_create+0x5a>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   1927c:	4668      	mov	r0, sp
   1927e:	f7ff ffa1 	bl	191c4 <id_find>
   19282:	2800      	cmp	r0, #0
   19284:	daf5      	bge.n	19272 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   19286:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1928a:	4a10      	ldr	r2, [pc, #64]	; (192cc <id_create+0x78>)
   1928c:	18a3      	adds	r3, r4, r2
   1928e:	9800      	ldr	r0, [sp, #0]
   19290:	50a0      	str	r0, [r4, r2]
   19292:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   19296:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1929a:	8099      	strh	r1, [r3, #4]
   1929c:	719a      	strb	r2, [r3, #6]

		if (addr) {
   1929e:	b12d      	cbz	r5, 192ac <id_create+0x58>
   192a0:	681a      	ldr	r2, [r3, #0]
   192a2:	602a      	str	r2, [r5, #0]
   192a4:	889a      	ldrh	r2, [r3, #4]
   192a6:	799b      	ldrb	r3, [r3, #6]
   192a8:	80aa      	strh	r2, [r5, #4]
   192aa:	71ab      	strb	r3, [r5, #6]
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   192ac:	2300      	movs	r3, #0
}
   192ae:	4618      	mov	r0, r3
   192b0:	b005      	add	sp, #20
   192b2:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   192b4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   192b8:	4a04      	ldr	r2, [pc, #16]	; (192cc <id_create+0x78>)
   192ba:	18a3      	adds	r3, r4, r2
   192bc:	6829      	ldr	r1, [r5, #0]
   192be:	50a1      	str	r1, [r4, r2]
   192c0:	88a9      	ldrh	r1, [r5, #4]
   192c2:	79aa      	ldrb	r2, [r5, #6]
   192c4:	8099      	strh	r1, [r3, #4]
   192c6:	719a      	strb	r2, [r3, #6]
}
   192c8:	e7f0      	b.n	192ac <id_create+0x58>
   192ca:	bf00      	nop
   192cc:	200002b0 	.word	0x200002b0

000192d0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   192d0:	b570      	push	{r4, r5, r6, lr}
   192d2:	b08c      	sub	sp, #48	; 0x30
   192d4:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   192d6:	4605      	mov	r5, r0
   192d8:	2800      	cmp	r0, #0
   192da:	d03b      	beq.n	19354 <bt_id_create+0x84>
   192dc:	2300      	movs	r3, #0
   192de:	9302      	str	r3, [sp, #8]
   192e0:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   192e4:	2207      	movs	r2, #7
   192e6:	a902      	add	r1, sp, #8
   192e8:	f00f f8cb 	bl	28482 <memcmp>
   192ec:	b390      	cbz	r0, 19354 <bt_id_create+0x84>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   192ee:	782b      	ldrb	r3, [r5, #0]
   192f0:	2b01      	cmp	r3, #1
   192f2:	d104      	bne.n	192fe <bt_id_create+0x2e>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   192f4:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   192f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   192fa:	2bc0      	cmp	r3, #192	; 0xc0
   192fc:	d025      	beq.n	1934a <bt_id_create+0x7a>
			BT_ERR("Only static random identity address supported");
   192fe:	4b2e      	ldr	r3, [pc, #184]	; (193b8 <bt_id_create+0xe8>)
   19300:	930a      	str	r3, [sp, #40]	; 0x28
   19302:	2300      	movs	r3, #0
   19304:	f8ad 3005 	strh.w	r3, [sp, #5]
   19308:	f88d 3007 	strb.w	r3, [sp, #7]
   1930c:	2202      	movs	r2, #2
   1930e:	f88d 2004 	strb.w	r2, [sp, #4]
   19312:	f88d 3006 	strb.w	r3, [sp, #6]
   19316:	9a01      	ldr	r2, [sp, #4]
   19318:	9209      	str	r2, [sp, #36]	; 0x24
   1931a:	461a      	mov	r2, r3
   1931c:	f363 0200 	bfi	r2, r3, #0, #1
   19320:	f363 0241 	bfi	r2, r3, #1, #1
   19324:	f363 0282 	bfi	r2, r3, #2, #1
   19328:	f363 02c5 	bfi	r2, r3, #3, #3
   1932c:	2101      	movs	r1, #1
   1932e:	f361 1288 	bfi	r2, r1, #6, #3
   19332:	2108      	movs	r1, #8
   19334:	f361 2252 	bfi	r2, r1, #9, #10
   19338:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1933c:	491f      	ldr	r1, [pc, #124]	; (193bc <bt_id_create+0xec>)
   1933e:	a806      	add	r0, sp, #24
   19340:	f00a fe04 	bl	23f4c <z_log_msg2_finalize>
			return -EINVAL;
   19344:	f06f 0015 	mvn.w	r0, #21
   19348:	e028      	b.n	1939c <bt_id_create+0xcc>
		}

		if (id_find(addr) >= 0) {
   1934a:	4628      	mov	r0, r5
   1934c:	f7ff ff3a 	bl	191c4 <id_find>
   19350:	2800      	cmp	r0, #0
   19352:	da25      	bge.n	193a0 <bt_id_create+0xd0>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   19354:	bb54      	cbnz	r4, 193ac <bt_id_create+0xdc>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   19356:	4b1a      	ldr	r3, [pc, #104]	; (193c0 <bt_id_create+0xf0>)
   19358:	79db      	ldrb	r3, [r3, #7]
   1935a:	2b01      	cmp	r3, #1
   1935c:	d029      	beq.n	193b2 <bt_id_create+0xe2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1935e:	f3bf 8f5b 	dmb	ish
   19362:	4b18      	ldr	r3, [pc, #96]	; (193c4 <bt_id_create+0xf4>)
   19364:	681b      	ldr	r3, [r3, #0]
   19366:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   1936a:	f013 0f01 	tst.w	r3, #1
   1936e:	d10a      	bne.n	19386 <bt_id_create+0xb6>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   19370:	b1cd      	cbz	r5, 193a6 <bt_id_create+0xd6>
   19372:	2300      	movs	r3, #0
   19374:	9304      	str	r3, [sp, #16]
   19376:	f8cd 3013 	str.w	r3, [sp, #19]
   1937a:	2207      	movs	r2, #7
   1937c:	a904      	add	r1, sp, #16
   1937e:	4628      	mov	r0, r5
   19380:	f00f f87f 	bl	28482 <memcmp>
   19384:	b178      	cbz	r0, 193a6 <bt_id_create+0xd6>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   19386:	4b0e      	ldr	r3, [pc, #56]	; (193c0 <bt_id_create+0xf0>)
   19388:	79de      	ldrb	r6, [r3, #7]
   1938a:	1c72      	adds	r2, r6, #1
   1938c:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   1938e:	4622      	mov	r2, r4
   19390:	4629      	mov	r1, r5
   19392:	4630      	mov	r0, r6
   19394:	f7ff ff5e 	bl	19254 <id_create>
	if (err) {
   19398:	b900      	cbnz	r0, 1939c <bt_id_create+0xcc>
		return err;
	}

	return new_id;
   1939a:	4630      	mov	r0, r6
}
   1939c:	b00c      	add	sp, #48	; 0x30
   1939e:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   193a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   193a4:	e7fa      	b.n	1939c <bt_id_create+0xcc>
			return -EINVAL;
   193a6:	f06f 0015 	mvn.w	r0, #21
   193aa:	e7f7      	b.n	1939c <bt_id_create+0xcc>
		return -EINVAL;
   193ac:	f06f 0015 	mvn.w	r0, #21
   193b0:	e7f4      	b.n	1939c <bt_id_create+0xcc>
		return -ENOMEM;
   193b2:	f06f 000b 	mvn.w	r0, #11
   193b6:	e7f1      	b.n	1939c <bt_id_create+0xcc>
   193b8:	00029e1c 	.word	0x00029e1c
   193bc:	000288ac 	.word	0x000288ac
   193c0:	200002b0 	.word	0x200002b0
   193c4:	2000037c 	.word	0x2000037c

000193c8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   193c8:	b530      	push	{r4, r5, lr}
   193ca:	b08d      	sub	sp, #52	; 0x34
   193cc:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   193ce:	aa01      	add	r2, sp, #4
   193d0:	2100      	movs	r1, #0
   193d2:	f241 0009 	movw	r0, #4105	; 0x1009
   193d6:	f7fe fc53 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   193da:	b9f0      	cbnz	r0, 1941a <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   193dc:	9b01      	ldr	r3, [sp, #4]
   193de:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   193e0:	3401      	adds	r4, #1
   193e2:	2300      	movs	r3, #0
   193e4:	9302      	str	r3, [sp, #8]
   193e6:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   193ea:	2206      	movs	r2, #6
   193ec:	a902      	add	r1, sp, #8
   193ee:	4620      	mov	r0, r4
   193f0:	f00f f847 	bl	28482 <memcmp>
   193f4:	b158      	cbz	r0, 1940e <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   193f6:	4b22      	ldr	r3, [pc, #136]	; (19480 <bt_id_read_public_addr+0xb8>)
   193f8:	e893 0003 	ldmia.w	r3, {r0, r1}
   193fc:	9004      	str	r0, [sp, #16]
   193fe:	f8ad 1014 	strh.w	r1, [sp, #20]
   19402:	2206      	movs	r2, #6
   19404:	a904      	add	r1, sp, #16
   19406:	4620      	mov	r0, r4
   19408:	f00f f83b 	bl	28482 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1940c:	bb50      	cbnz	r0, 19464 <bt_id_read_public_addr+0x9c>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1940e:	9801      	ldr	r0, [sp, #4]
   19410:	f00d f8bc 	bl	2658c <net_buf_unref>
		return 0U;
   19414:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   19416:	b00d      	add	sp, #52	; 0x34
   19418:	bd30      	pop	{r4, r5, pc}
		BT_WARN("Failed to read public address");
   1941a:	4b1a      	ldr	r3, [pc, #104]	; (19484 <bt_id_read_public_addr+0xbc>)
   1941c:	930a      	str	r3, [sp, #40]	; 0x28
   1941e:	2400      	movs	r4, #0
   19420:	f8ad 4001 	strh.w	r4, [sp, #1]
   19424:	f88d 4003 	strb.w	r4, [sp, #3]
   19428:	2302      	movs	r3, #2
   1942a:	f88d 3000 	strb.w	r3, [sp]
   1942e:	f88d 4002 	strb.w	r4, [sp, #2]
   19432:	9a00      	ldr	r2, [sp, #0]
   19434:	9209      	str	r2, [sp, #36]	; 0x24
   19436:	4622      	mov	r2, r4
   19438:	f364 0200 	bfi	r2, r4, #0, #1
   1943c:	f364 0241 	bfi	r2, r4, #1, #1
   19440:	f364 0282 	bfi	r2, r4, #2, #1
   19444:	f364 02c5 	bfi	r2, r4, #3, #3
   19448:	f363 1288 	bfi	r2, r3, #6, #3
   1944c:	2308      	movs	r3, #8
   1944e:	f363 2252 	bfi	r2, r3, #9, #10
   19452:	4623      	mov	r3, r4
   19454:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19458:	490b      	ldr	r1, [pc, #44]	; (19488 <bt_id_read_public_addr+0xc0>)
   1945a:	a806      	add	r0, sp, #24
   1945c:	f00a fd76 	bl	23f4c <z_log_msg2_finalize>
		return 0U;
   19460:	4620      	mov	r0, r4
   19462:	e7d8      	b.n	19416 <bt_id_read_public_addr+0x4e>
   19464:	6823      	ldr	r3, [r4, #0]
   19466:	f8c5 3001 	str.w	r3, [r5, #1]
   1946a:	88a3      	ldrh	r3, [r4, #4]
   1946c:	f8a5 3005 	strh.w	r3, [r5, #5]
	addr->type = BT_ADDR_LE_PUBLIC;
   19470:	2300      	movs	r3, #0
   19472:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   19474:	9801      	ldr	r0, [sp, #4]
   19476:	f00d f889 	bl	2658c <net_buf_unref>
	return 1U;
   1947a:	2001      	movs	r0, #1
   1947c:	e7cb      	b.n	19416 <bt_id_read_public_addr+0x4e>
   1947e:	bf00      	nop
   19480:	00028a4c 	.word	0x00028a4c
   19484:	00029e4c 	.word	0x00029e4c
   19488:	000288ac 	.word	0x000288ac

0001948c <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1948c:	b500      	push	{lr}
   1948e:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   19490:	4668      	mov	r0, sp
   19492:	f7ff ff99 	bl	193c8 <bt_id_read_public_addr>
   19496:	4b06      	ldr	r3, [pc, #24]	; (194b0 <bt_setup_public_id_addr+0x24>)
   19498:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1949a:	b918      	cbnz	r0, 194a4 <bt_setup_public_id_addr+0x18>
		return 0;
   1949c:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   1949e:	b003      	add	sp, #12
   194a0:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   194a4:	2200      	movs	r2, #0
   194a6:	4669      	mov	r1, sp
   194a8:	4610      	mov	r0, r2
   194aa:	f7ff fed3 	bl	19254 <id_create>
   194ae:	e7f6      	b.n	1949e <bt_setup_public_id_addr+0x12>
   194b0:	200002b0 	.word	0x200002b0

000194b4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   194b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194b8:	b094      	sub	sp, #80	; 0x50
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   194ba:	4b52      	ldr	r3, [pc, #328]	; (19604 <bt_read_static_addr+0x150>)
   194bc:	f893 70ba 	ldrb.w	r7, [r3, #186]	; 0xba
   194c0:	f017 0701 	ands.w	r7, r7, #1
   194c4:	d012      	beq.n	194ec <bt_read_static_addr+0x38>
   194c6:	4680      	mov	r8, r0
   194c8:	460c      	mov	r4, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   194ca:	aa01      	add	r2, sp, #4
   194cc:	2100      	movs	r1, #0
   194ce:	f64f 4009 	movw	r0, #64521	; 0xfc09
   194d2:	f7fe fbd5 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   194d6:	4605      	mov	r5, r0
   194d8:	bb58      	cbnz	r0, 19532 <bt_read_static_addr+0x7e>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   194da:	9b01      	ldr	r3, [sp, #4]
   194dc:	f8d3 e008 	ldr.w	lr, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   194e0:	f89e 7001 	ldrb.w	r7, [lr, #1]
   194e4:	42a7      	cmp	r7, r4
   194e6:	bf28      	it	cs
   194e8:	4627      	movcs	r7, r4
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   194ea:	e05d      	b.n	195a8 <bt_read_static_addr+0xf4>
		BT_WARN("Read Static Addresses command not available");
   194ec:	4b46      	ldr	r3, [pc, #280]	; (19608 <bt_read_static_addr+0x154>)
   194ee:	9312      	str	r3, [sp, #72]	; 0x48
   194f0:	2300      	movs	r3, #0
   194f2:	f8ad 3001 	strh.w	r3, [sp, #1]
   194f6:	f88d 3003 	strb.w	r3, [sp, #3]
   194fa:	2102      	movs	r1, #2
   194fc:	f88d 1000 	strb.w	r1, [sp]
   19500:	f88d 3002 	strb.w	r3, [sp, #2]
   19504:	9a00      	ldr	r2, [sp, #0]
   19506:	9211      	str	r2, [sp, #68]	; 0x44
   19508:	461a      	mov	r2, r3
   1950a:	f363 0200 	bfi	r2, r3, #0, #1
   1950e:	f363 0241 	bfi	r2, r3, #1, #1
   19512:	f363 0282 	bfi	r2, r3, #2, #1
   19516:	f363 02c5 	bfi	r2, r3, #3, #3
   1951a:	f361 1288 	bfi	r2, r1, #6, #3
   1951e:	2108      	movs	r1, #8
   19520:	f361 2252 	bfi	r2, r1, #9, #10
   19524:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19528:	4938      	ldr	r1, [pc, #224]	; (1960c <bt_read_static_addr+0x158>)
   1952a:	a80e      	add	r0, sp, #56	; 0x38
   1952c:	f00a fd0e 	bl	23f4c <z_log_msg2_finalize>
		return 0;
   19530:	e040      	b.n	195b4 <bt_read_static_addr+0x100>
		BT_WARN("Failed to read static addresses");
   19532:	4b37      	ldr	r3, [pc, #220]	; (19610 <bt_read_static_addr+0x15c>)
   19534:	930c      	str	r3, [sp, #48]	; 0x30
   19536:	2700      	movs	r7, #0
   19538:	f8ad 7001 	strh.w	r7, [sp, #1]
   1953c:	f88d 7003 	strb.w	r7, [sp, #3]
   19540:	2302      	movs	r3, #2
   19542:	f88d 3000 	strb.w	r3, [sp]
   19546:	f88d 7002 	strb.w	r7, [sp, #2]
   1954a:	9a00      	ldr	r2, [sp, #0]
   1954c:	920b      	str	r2, [sp, #44]	; 0x2c
   1954e:	463a      	mov	r2, r7
   19550:	f367 0200 	bfi	r2, r7, #0, #1
   19554:	f367 0241 	bfi	r2, r7, #1, #1
   19558:	f367 0282 	bfi	r2, r7, #2, #1
   1955c:	f367 02c5 	bfi	r2, r7, #3, #3
   19560:	f363 1288 	bfi	r2, r3, #6, #3
   19564:	2308      	movs	r3, #8
   19566:	f363 2252 	bfi	r2, r3, #9, #10
   1956a:	463b      	mov	r3, r7
   1956c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19570:	4926      	ldr	r1, [pc, #152]	; (1960c <bt_read_static_addr+0x158>)
   19572:	a808      	add	r0, sp, #32
   19574:	f00a fcea 	bl	23f4c <z_log_msg2_finalize>
		return 0;
   19578:	e01c      	b.n	195b4 <bt_read_static_addr+0x100>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1957a:	2416      	movs	r4, #22
   1957c:	fb04 f405 	mul.w	r4, r4, r5
   19580:	eb08 0104 	add.w	r1, r8, r4
   19584:	4672      	mov	r2, lr
   19586:	f852 6f02 	ldr.w	r6, [r2, #2]!
   1958a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1958e:	6890      	ldr	r0, [r2, #8]
   19590:	68d3      	ldr	r3, [r2, #12]
   19592:	f848 6004 	str.w	r6, [r8, r4]
   19596:	f8c1 c004 	str.w	ip, [r1, #4]
   1959a:	6088      	str	r0, [r1, #8]
   1959c:	60cb      	str	r3, [r1, #12]
   1959e:	6916      	ldr	r6, [r2, #16]
   195a0:	610e      	str	r6, [r1, #16]
   195a2:	8a93      	ldrh	r3, [r2, #20]
   195a4:	828b      	strh	r3, [r1, #20]
	for (i = 0; i < cnt; i++) {
   195a6:	3501      	adds	r5, #1
   195a8:	42af      	cmp	r7, r5
   195aa:	dce6      	bgt.n	1957a <bt_read_static_addr+0xc6>
	}

	net_buf_unref(rsp);
   195ac:	9801      	ldr	r0, [sp, #4]
   195ae:	f00c ffed 	bl	2658c <net_buf_unref>
	if (!cnt) {
   195b2:	b11f      	cbz	r7, 195bc <bt_read_static_addr+0x108>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   195b4:	4638      	mov	r0, r7
   195b6:	b014      	add	sp, #80	; 0x50
   195b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_WARN("No static addresses stored in controller");
   195bc:	4b15      	ldr	r3, [pc, #84]	; (19614 <bt_read_static_addr+0x160>)
   195be:	9306      	str	r3, [sp, #24]
   195c0:	2300      	movs	r3, #0
   195c2:	f8ad 3001 	strh.w	r3, [sp, #1]
   195c6:	f88d 3003 	strb.w	r3, [sp, #3]
   195ca:	2102      	movs	r1, #2
   195cc:	f88d 1000 	strb.w	r1, [sp]
   195d0:	f88d 3002 	strb.w	r3, [sp, #2]
   195d4:	9a00      	ldr	r2, [sp, #0]
   195d6:	9205      	str	r2, [sp, #20]
   195d8:	461a      	mov	r2, r3
   195da:	f363 0200 	bfi	r2, r3, #0, #1
   195de:	f363 0241 	bfi	r2, r3, #1, #1
   195e2:	f363 0282 	bfi	r2, r3, #2, #1
   195e6:	f363 02c5 	bfi	r2, r3, #3, #3
   195ea:	f361 1288 	bfi	r2, r1, #6, #3
   195ee:	2108      	movs	r1, #8
   195f0:	f361 2252 	bfi	r2, r1, #9, #10
   195f4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   195f8:	4904      	ldr	r1, [pc, #16]	; (1960c <bt_read_static_addr+0x158>)
   195fa:	a802      	add	r0, sp, #8
   195fc:	f00a fca6 	bl	23f4c <z_log_msg2_finalize>
   19600:	e7d8      	b.n	195b4 <bt_read_static_addr+0x100>
   19602:	bf00      	nop
   19604:	200002b0 	.word	0x200002b0
   19608:	00029e6c 	.word	0x00029e6c
   1960c:	000288ac 	.word	0x000288ac
   19610:	00029e98 	.word	0x00029e98
   19614:	00029eb8 	.word	0x00029eb8

00019618 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   19618:	b510      	push	{r4, lr}
   1961a:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1961c:	4b17      	ldr	r3, [pc, #92]	; (1967c <bt_setup_random_id_addr+0x64>)
   1961e:	79dc      	ldrb	r4, [r3, #7]
   19620:	b934      	cbnz	r4, 19630 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   19622:	2101      	movs	r1, #1
   19624:	a802      	add	r0, sp, #8
   19626:	f7ff ff45 	bl	194b4 <bt_read_static_addr>
   1962a:	4b14      	ldr	r3, [pc, #80]	; (1967c <bt_setup_random_id_addr+0x64>)
   1962c:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   1962e:	b938      	cbnz	r0, 19640 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   19630:	2100      	movs	r1, #0
   19632:	4608      	mov	r0, r1
   19634:	f7ff fe4c 	bl	192d0 <bt_id_create>
   19638:	4603      	mov	r3, r0
}
   1963a:	4618      	mov	r0, r3
   1963c:	b008      	add	sp, #32
   1963e:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   19640:	4b0e      	ldr	r3, [pc, #56]	; (1967c <bt_setup_random_id_addr+0x64>)
   19642:	79db      	ldrb	r3, [r3, #7]
   19644:	42a3      	cmp	r3, r4
   19646:	d917      	bls.n	19678 <bt_setup_random_id_addr+0x60>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   19648:	2316      	movs	r3, #22
   1964a:	aa02      	add	r2, sp, #8
   1964c:	fb03 2304 	mla	r3, r3, r4, r2
	memcpy(dst, src, sizeof(*dst));
   19650:	681a      	ldr	r2, [r3, #0]
   19652:	f8cd 2001 	str.w	r2, [sp, #1]
   19656:	889b      	ldrh	r3, [r3, #4]
   19658:	f8ad 3005 	strh.w	r3, [sp, #5]
				addr.type = BT_ADDR_LE_RANDOM;
   1965c:	2301      	movs	r3, #1
   1965e:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   19662:	2200      	movs	r2, #0
   19664:	4669      	mov	r1, sp
   19666:	4620      	mov	r0, r4
   19668:	f7ff fdf4 	bl	19254 <id_create>
				if (err) {
   1966c:	4603      	mov	r3, r0
   1966e:	2800      	cmp	r0, #0
   19670:	d1e3      	bne.n	1963a <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   19672:	3401      	adds	r4, #1
   19674:	b2e4      	uxtb	r4, r4
   19676:	e7e3      	b.n	19640 <bt_setup_random_id_addr+0x28>
			return 0;
   19678:	2300      	movs	r3, #0
   1967a:	e7de      	b.n	1963a <bt_setup_random_id_addr+0x22>
   1967c:	200002b0 	.word	0x200002b0

00019680 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   19680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19682:	460d      	mov	r5, r1
   19684:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   19686:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   19688:	f011 0f01 	tst.w	r1, #1
   1968c:	d027      	beq.n	196de <bt_id_set_adv_own_addr+0x5e>
   1968e:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   19690:	b142      	cbz	r2, 196a4 <bt_id_set_adv_own_addr+0x24>
   19692:	f011 0f20 	tst.w	r1, #32
   19696:	d005      	beq.n	196a4 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   19698:	4b22      	ldr	r3, [pc, #136]	; (19724 <bt_id_set_adv_own_addr+0xa4>)
   1969a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   1969e:	f013 0f40 	tst.w	r3, #64	; 0x40
   196a2:	d038      	beq.n	19716 <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   196a4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   196a8:	4a1e      	ldr	r2, [pc, #120]	; (19724 <bt_id_set_adv_own_addr+0xa4>)
   196aa:	5cd3      	ldrb	r3, [r2, r3]
   196ac:	2b01      	cmp	r3, #1
   196ae:	d00d      	beq.n	196cc <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   196b0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   196b4:	4b1b      	ldr	r3, [pc, #108]	; (19724 <bt_id_set_adv_own_addr+0xa4>)
   196b6:	5d1b      	ldrb	r3, [r3, r4]
   196b8:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   196ba:	b37f      	cbz	r7, 1971c <bt_id_set_adv_own_addr+0x9c>
   196bc:	f015 0f20 	tst.w	r5, #32
   196c0:	d02e      	beq.n	19720 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   196c2:	f043 0302 	orr.w	r3, r3, #2
   196c6:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   196c8:	2000      	movs	r0, #0
   196ca:	e017      	b.n	196fc <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   196cc:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   196d0:	4411      	add	r1, r2
   196d2:	3101      	adds	r1, #1
   196d4:	f00b f841 	bl	2475a <bt_id_set_adv_random_addr>
				if (err) {
   196d8:	2800      	cmp	r0, #0
   196da:	d0e9      	beq.n	196b0 <bt_id_set_adv_own_addr+0x30>
   196dc:	e00e      	b.n	196fc <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   196de:	f011 0f04 	tst.w	r1, #4
   196e2:	d013      	beq.n	1970c <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   196e4:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   196e8:	4a0e      	ldr	r2, [pc, #56]	; (19724 <bt_id_set_adv_own_addr+0xa4>)
   196ea:	5cd3      	ldrb	r3, [r2, r3]
   196ec:	2b01      	cmp	r3, #1
   196ee:	d006      	beq.n	196fe <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   196f0:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   196f2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   196f6:	4b0b      	ldr	r3, [pc, #44]	; (19724 <bt_id_set_adv_own_addr+0xa4>)
   196f8:	5d1b      	ldrb	r3, [r3, r4]
   196fa:	7033      	strb	r3, [r6, #0]
}
   196fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   196fe:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   19702:	4411      	add	r1, r2
   19704:	3101      	adds	r1, #1
   19706:	f00b f828 	bl	2475a <bt_id_set_adv_random_addr>
   1970a:	e7f2      	b.n	196f2 <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   1970c:	f00b f82a 	bl	24764 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   19710:	2301      	movs	r3, #1
   19712:	7033      	strb	r3, [r6, #0]
		if (err) {
   19714:	e7f2      	b.n	196fc <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   19716:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1971a:	e7ef      	b.n	196fc <bt_id_set_adv_own_addr+0x7c>
	return 0;
   1971c:	2000      	movs	r0, #0
   1971e:	e7ed      	b.n	196fc <bt_id_set_adv_own_addr+0x7c>
   19720:	2000      	movs	r0, #0
   19722:	e7eb      	b.n	196fc <bt_id_set_adv_own_addr+0x7c>
   19724:	200002b0 	.word	0x200002b0

00019728 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   19728:	b510      	push	{r4, lr}
   1972a:	b094      	sub	sp, #80	; 0x50
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1972c:	4b42      	ldr	r3, [pc, #264]	; (19838 <bt_id_init+0x110>)
   1972e:	79db      	ldrb	r3, [r3, #7]
   19730:	b133      	cbz	r3, 19740 <bt_id_init+0x18>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   19732:	4b41      	ldr	r3, [pc, #260]	; (19838 <bt_id_init+0x110>)
   19734:	79db      	ldrb	r3, [r3, #7]
   19736:	b363      	cbz	r3, 19792 <bt_id_init+0x6a>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   19738:	2400      	movs	r4, #0
}
   1973a:	4620      	mov	r0, r4
   1973c:	b014      	add	sp, #80	; 0x50
   1973e:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   19740:	f7ff fea4 	bl	1948c <bt_setup_public_id_addr>
		if (err) {
   19744:	4604      	mov	r4, r0
   19746:	2800      	cmp	r0, #0
   19748:	d0f3      	beq.n	19732 <bt_id_init+0xa>
			BT_ERR("Unable to set identity address");
   1974a:	4b3c      	ldr	r3, [pc, #240]	; (1983c <bt_id_init+0x114>)
   1974c:	9306      	str	r3, [sp, #24]
   1974e:	2300      	movs	r3, #0
   19750:	f8ad 3005 	strh.w	r3, [sp, #5]
   19754:	f88d 3007 	strb.w	r3, [sp, #7]
   19758:	2202      	movs	r2, #2
   1975a:	f88d 2004 	strb.w	r2, [sp, #4]
   1975e:	f88d 3006 	strb.w	r3, [sp, #6]
   19762:	9a01      	ldr	r2, [sp, #4]
   19764:	9205      	str	r2, [sp, #20]
   19766:	461a      	mov	r2, r3
   19768:	f363 0200 	bfi	r2, r3, #0, #1
   1976c:	f363 0241 	bfi	r2, r3, #1, #1
   19770:	f363 0282 	bfi	r2, r3, #2, #1
   19774:	f363 02c5 	bfi	r2, r3, #3, #3
   19778:	2101      	movs	r1, #1
   1977a:	f361 1288 	bfi	r2, r1, #6, #3
   1977e:	2108      	movs	r1, #8
   19780:	f361 2252 	bfi	r2, r1, #9, #10
   19784:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19788:	492d      	ldr	r1, [pc, #180]	; (19840 <bt_id_init+0x118>)
   1978a:	a802      	add	r0, sp, #8
   1978c:	f00a fbde 	bl	23f4c <z_log_msg2_finalize>
			return err;
   19790:	e7d3      	b.n	1973a <bt_id_init+0x12>
		err = bt_setup_random_id_addr();
   19792:	f7ff ff41 	bl	19618 <bt_setup_random_id_addr>
		if (err) {
   19796:	4604      	mov	r4, r0
   19798:	bb48      	cbnz	r0, 197ee <bt_id_init+0xc6>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1979a:	482a      	ldr	r0, [pc, #168]	; (19844 <bt_id_init+0x11c>)
   1979c:	f7ff fd2c 	bl	191f8 <set_random_address>
		if (err) {
   197a0:	4604      	mov	r4, r0
   197a2:	2800      	cmp	r0, #0
   197a4:	d0c9      	beq.n	1973a <bt_id_init+0x12>
			BT_ERR("Unable to set random address");
   197a6:	4b28      	ldr	r3, [pc, #160]	; (19848 <bt_id_init+0x120>)
   197a8:	930c      	str	r3, [sp, #48]	; 0x30
   197aa:	2300      	movs	r3, #0
   197ac:	f8ad 3005 	strh.w	r3, [sp, #5]
   197b0:	f88d 3007 	strb.w	r3, [sp, #7]
   197b4:	2202      	movs	r2, #2
   197b6:	f88d 2004 	strb.w	r2, [sp, #4]
   197ba:	f88d 3006 	strb.w	r3, [sp, #6]
   197be:	9a01      	ldr	r2, [sp, #4]
   197c0:	920b      	str	r2, [sp, #44]	; 0x2c
   197c2:	461a      	mov	r2, r3
   197c4:	f363 0200 	bfi	r2, r3, #0, #1
   197c8:	f363 0241 	bfi	r2, r3, #1, #1
   197cc:	f363 0282 	bfi	r2, r3, #2, #1
   197d0:	f363 02c5 	bfi	r2, r3, #3, #3
   197d4:	2101      	movs	r1, #1
   197d6:	f361 1288 	bfi	r2, r1, #6, #3
   197da:	2108      	movs	r1, #8
   197dc:	f361 2252 	bfi	r2, r1, #9, #10
   197e0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   197e4:	4916      	ldr	r1, [pc, #88]	; (19840 <bt_id_init+0x118>)
   197e6:	a808      	add	r0, sp, #32
   197e8:	f00a fbb0 	bl	23f4c <z_log_msg2_finalize>
			return err;
   197ec:	e7a5      	b.n	1973a <bt_id_init+0x12>
			BT_ERR("Unable to set identity address");
   197ee:	4b13      	ldr	r3, [pc, #76]	; (1983c <bt_id_init+0x114>)
   197f0:	9312      	str	r3, [sp, #72]	; 0x48
   197f2:	2300      	movs	r3, #0
   197f4:	f8ad 3005 	strh.w	r3, [sp, #5]
   197f8:	f88d 3007 	strb.w	r3, [sp, #7]
   197fc:	2202      	movs	r2, #2
   197fe:	f88d 2004 	strb.w	r2, [sp, #4]
   19802:	f88d 3006 	strb.w	r3, [sp, #6]
   19806:	9a01      	ldr	r2, [sp, #4]
   19808:	9211      	str	r2, [sp, #68]	; 0x44
   1980a:	461a      	mov	r2, r3
   1980c:	f363 0200 	bfi	r2, r3, #0, #1
   19810:	f363 0241 	bfi	r2, r3, #1, #1
   19814:	f363 0282 	bfi	r2, r3, #2, #1
   19818:	f363 02c5 	bfi	r2, r3, #3, #3
   1981c:	2101      	movs	r1, #1
   1981e:	f361 1288 	bfi	r2, r1, #6, #3
   19822:	2108      	movs	r1, #8
   19824:	f361 2252 	bfi	r2, r1, #9, #10
   19828:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1982c:	4904      	ldr	r1, [pc, #16]	; (19840 <bt_id_init+0x118>)
   1982e:	a80e      	add	r0, sp, #56	; 0x38
   19830:	f00a fb8c 	bl	23f4c <z_log_msg2_finalize>
			return err;
   19834:	e781      	b.n	1973a <bt_id_init+0x12>
   19836:	bf00      	nop
   19838:	200002b0 	.word	0x200002b0
   1983c:	00029ee4 	.word	0x00029ee4
   19840:	000288ac 	.word	0x000288ac
   19844:	200002b1 	.word	0x200002b1
   19848:	00029f04 	.word	0x00029f04

0001984c <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   1984c:	4800      	ldr	r0, [pc, #0]	; (19850 <adv_new_legacy+0x4>)
   1984e:	4770      	bx	lr
   19850:	200002c8 	.word	0x200002c8

00019854 <set_data_add_complete>:
	return valid_adv_ext_param(param);
}

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   19854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19858:	b08b      	sub	sp, #44	; 0x2c
   1985a:	4606      	mov	r6, r0
   1985c:	4688      	mov	r8, r1
   1985e:	9201      	str	r2, [sp, #4]
   19860:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   19862:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   19866:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   19868:	9a00      	ldr	r2, [sp, #0]
   1986a:	4592      	cmp	sl, r2
   1986c:	d25e      	bcs.n	1992c <set_data_add_complete+0xd8>
		const struct bt_data *data = ad[i].data;
   1986e:	9a01      	ldr	r2, [sp, #4]
   19870:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   19874:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   19878:	2400      	movs	r4, #0
   1987a:	e016      	b.n	198aa <set_data_add_complete+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   1987c:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   19880:	b2d5      	uxtb	r5, r2
   19882:	1c59      	adds	r1, r3, #1
   19884:	b2c9      	uxtb	r1, r1
   19886:	f105 0b01 	add.w	fp, r5, #1
   1988a:	f806 b00e 	strb.w	fp, [r6, lr]
			set_data[set_data_len++] = type;
   1988e:	3302      	adds	r3, #2
   19890:	fa5f fb83 	uxtb.w	fp, r3
   19894:	f806 c001 	strb.w	ip, [r6, r1]
   19898:	6841      	ldr	r1, [r0, #4]
   1989a:	eb06 000b 	add.w	r0, r6, fp
   1989e:	f00e fdfe 	bl	2849e <memcpy>

			memcpy(&set_data[set_data_len], data[j].data, len);
			set_data_len += len;
   198a2:	eb05 030b 	add.w	r3, r5, fp
   198a6:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   198a8:	3401      	adds	r4, #1
   198aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
   198ae:	4294      	cmp	r4, r2
   198b0:	d239      	bcs.n	19926 <set_data_add_complete+0xd2>
			size_t len = data[j].data_len;
   198b2:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   198b6:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   198b8:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   198bc:	469e      	mov	lr, r3
   198be:	1899      	adds	r1, r3, r2
   198c0:	3102      	adds	r1, #2
   198c2:	4541      	cmp	r1, r8
   198c4:	d9dc      	bls.n	19880 <set_data_add_complete+0x2c>
				ssize_t shortened_len = set_data_len_max -
   198c6:	eba8 0203 	sub.w	r2, r8, r3
   198ca:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   198cc:	f1bc 0f09 	cmp.w	ip, #9
   198d0:	d101      	bne.n	198d6 <set_data_add_complete+0x82>
   198d2:	2a00      	cmp	r2, #0
   198d4:	dcd2      	bgt.n	1987c <set_data_add_complete+0x28>
					BT_ERR("Too big advertising data");
   198d6:	4b17      	ldr	r3, [pc, #92]	; (19934 <set_data_add_complete+0xe0>)
   198d8:	9308      	str	r3, [sp, #32]
   198da:	2300      	movs	r3, #0
   198dc:	f8ad 300d 	strh.w	r3, [sp, #13]
   198e0:	f88d 300f 	strb.w	r3, [sp, #15]
   198e4:	2202      	movs	r2, #2
   198e6:	f88d 200c 	strb.w	r2, [sp, #12]
   198ea:	f88d 300e 	strb.w	r3, [sp, #14]
   198ee:	9a03      	ldr	r2, [sp, #12]
   198f0:	9207      	str	r2, [sp, #28]
   198f2:	461a      	mov	r2, r3
   198f4:	f363 0200 	bfi	r2, r3, #0, #1
   198f8:	f363 0241 	bfi	r2, r3, #1, #1
   198fc:	f363 0282 	bfi	r2, r3, #2, #1
   19900:	f363 02c5 	bfi	r2, r3, #3, #3
   19904:	2101      	movs	r1, #1
   19906:	f361 1288 	bfi	r2, r1, #6, #3
   1990a:	2108      	movs	r1, #8
   1990c:	f361 2252 	bfi	r2, r1, #9, #10
   19910:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19914:	4908      	ldr	r1, [pc, #32]	; (19938 <set_data_add_complete+0xe4>)
   19916:	a804      	add	r0, sp, #16
   19918:	f00a fb18 	bl	23f4c <z_log_msg2_finalize>
					return -EINVAL;
   1991c:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   19920:	b00b      	add	sp, #44	; 0x2c
   19922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   19926:	f10a 0a01 	add.w	sl, sl, #1
   1992a:	e79d      	b.n	19868 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   1992c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1992e:	7013      	strb	r3, [r2, #0]
	return 0;
   19930:	2000      	movs	r0, #0
   19932:	e7f5      	b.n	19920 <set_data_add_complete+0xcc>
   19934:	00029f2c 	.word	0x00029f2c
   19938:	0002887c 	.word	0x0002887c

0001993c <valid_adv_ext_param>:
{
   1993c:	b510      	push	{r4, lr}
   1993e:	b082      	sub	sp, #8
   19940:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   19942:	7800      	ldrb	r0, [r0, #0]
   19944:	4b23      	ldr	r3, [pc, #140]	; (199d4 <valid_adv_ext_param+0x98>)
   19946:	79db      	ldrb	r3, [r3, #7]
   19948:	4298      	cmp	r0, r3
   1994a:	d302      	bcc.n	19952 <valid_adv_ext_param+0x16>
		return false;
   1994c:	2000      	movs	r0, #0
}
   1994e:	b002      	add	sp, #8
   19950:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   19952:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   19956:	2300      	movs	r3, #0
   19958:	9300      	str	r3, [sp, #0]
   1995a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1995e:	2207      	movs	r2, #7
   19960:	4669      	mov	r1, sp
   19962:	4b1c      	ldr	r3, [pc, #112]	; (199d4 <valid_adv_ext_param+0x98>)
   19964:	4418      	add	r0, r3
   19966:	f00e fd8c 	bl	28482 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1996a:	2800      	cmp	r0, #0
   1996c:	d0ee      	beq.n	1994c <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1996e:	6863      	ldr	r3, [r4, #4]
   19970:	f013 0f01 	tst.w	r3, #1
   19974:	d107      	bne.n	19986 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   19976:	4a17      	ldr	r2, [pc, #92]	; (199d4 <valid_adv_ext_param+0x98>)
   19978:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   1997c:	2a08      	cmp	r2, #8
   1997e:	d802      	bhi.n	19986 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   19980:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   19982:	2a9f      	cmp	r2, #159	; 0x9f
   19984:	d91b      	bls.n	199be <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   19986:	f013 0f30 	tst.w	r3, #48	; 0x30
   1998a:	d001      	beq.n	19990 <valid_adv_ext_param+0x54>
	    !param->peer) {
   1998c:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1998e:	b1c2      	cbz	r2, 199c2 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   19990:	f013 0f10 	tst.w	r3, #16
   19994:	d108      	bne.n	199a8 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   19996:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   19998:	b132      	cbz	r2, 199a8 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1999a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1999e:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   199a2:	d014      	beq.n	199ce <valid_adv_ext_param+0x92>
	return true;
   199a4:	2001      	movs	r0, #1
   199a6:	e7d2      	b.n	1994e <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   199a8:	68a2      	ldr	r2, [r4, #8]
   199aa:	68e1      	ldr	r1, [r4, #12]
   199ac:	428a      	cmp	r2, r1
   199ae:	d80a      	bhi.n	199c6 <valid_adv_ext_param+0x8a>
   199b0:	2a1f      	cmp	r2, #31
   199b2:	d90a      	bls.n	199ca <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   199b4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   199b8:	d9ef      	bls.n	1999a <valid_adv_ext_param+0x5e>
			return false;
   199ba:	2000      	movs	r0, #0
   199bc:	e7c7      	b.n	1994e <valid_adv_ext_param+0x12>
			return false;
   199be:	2000      	movs	r0, #0
   199c0:	e7c5      	b.n	1994e <valid_adv_ext_param+0x12>
		return false;
   199c2:	2000      	movs	r0, #0
   199c4:	e7c3      	b.n	1994e <valid_adv_ext_param+0x12>
			return false;
   199c6:	2000      	movs	r0, #0
   199c8:	e7c1      	b.n	1994e <valid_adv_ext_param+0x12>
   199ca:	2000      	movs	r0, #0
   199cc:	e7bf      	b.n	1994e <valid_adv_ext_param+0x12>
		return false;
   199ce:	2000      	movs	r0, #0
   199d0:	e7bd      	b.n	1994e <valid_adv_ext_param+0x12>
   199d2:	bf00      	nop
   199d4:	200002b0 	.word	0x200002b0

000199d8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   199d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   199da:	b085      	sub	sp, #20
   199dc:	4604      	mov	r4, r0
   199de:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   199e0:	4605      	mov	r5, r0
   199e2:	f815 2b09 	ldrb.w	r2, [r5], #9
   199e6:	4b1f      	ldr	r3, [pc, #124]	; (19a64 <le_adv_start_add_conn+0x8c>)
   199e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   199ec:	2300      	movs	r3, #0
   199ee:	9300      	str	r3, [sp, #0]
   199f0:	f8cd 3003 	str.w	r3, [sp, #3]
   199f4:	2207      	movs	r2, #7
   199f6:	4669      	mov	r1, sp
   199f8:	4628      	mov	r0, r5
   199fa:	f00e fd42 	bl	28482 <memcmp>
   199fe:	b9b8      	cbnz	r0, 19a30 <le_adv_start_add_conn+0x58>
   19a00:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   19a02:	4b19      	ldr	r3, [pc, #100]	; (19a68 <le_adv_start_add_conn+0x90>)
   19a04:	e893 0003 	ldmia.w	r3, {r0, r1}
   19a08:	9002      	str	r0, [sp, #8]
   19a0a:	f8ad 100c 	strh.w	r1, [sp, #12]
   19a0e:	0c09      	lsrs	r1, r1, #16
   19a10:	f88d 100e 	strb.w	r1, [sp, #14]
   19a14:	a902      	add	r1, sp, #8
   19a16:	7820      	ldrb	r0, [r4, #0]
   19a18:	f00b f9d6 	bl	24dc8 <bt_conn_add_le>
		if (!conn) {
   19a1c:	4604      	mov	r4, r0
   19a1e:	b120      	cbz	r0, 19a2a <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   19a20:	2104      	movs	r1, #4
   19a22:	f000 fe6d 	bl	1a700 <bt_conn_set_state>
		*out_conn = conn;
   19a26:	603c      	str	r4, [r7, #0]
		return 0;
   19a28:	e012      	b.n	19a50 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   19a2a:	f06f 060b 	mvn.w	r6, #11
   19a2e:	e00f      	b.n	19a50 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   19a30:	4629      	mov	r1, r5
   19a32:	7820      	ldrb	r0, [r4, #0]
   19a34:	f001 f87a 	bl	1ab2c <bt_conn_exists_le>
   19a38:	b968      	cbnz	r0, 19a56 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   19a3a:	4629      	mov	r1, r5
   19a3c:	7820      	ldrb	r0, [r4, #0]
   19a3e:	f00b f9c3 	bl	24dc8 <bt_conn_add_le>
	if (!conn) {
   19a42:	4604      	mov	r4, r0
   19a44:	b150      	cbz	r0, 19a5c <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   19a46:	2105      	movs	r1, #5
   19a48:	f000 fe5a 	bl	1a700 <bt_conn_set_state>
	*out_conn = conn;
   19a4c:	603c      	str	r4, [r7, #0]
	return 0;
   19a4e:	2600      	movs	r6, #0
}
   19a50:	4630      	mov	r0, r6
   19a52:	b005      	add	sp, #20
   19a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   19a56:	f06f 0615 	mvn.w	r6, #21
   19a5a:	e7f9      	b.n	19a50 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   19a5c:	f06f 060b 	mvn.w	r6, #11
   19a60:	e7f6      	b.n	19a50 <le_adv_start_add_conn+0x78>
   19a62:	bf00      	nop
   19a64:	200002b0 	.word	0x200002b0
   19a68:	00028a54 	.word	0x00028a54

00019a6c <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   19a6c:	b570      	push	{r4, r5, r6, lr}
   19a6e:	b084      	sub	sp, #16
   19a70:	4604      	mov	r4, r0
   19a72:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   19a74:	f100 0509 	add.w	r5, r0, #9
   19a78:	2300      	movs	r3, #0
   19a7a:	9300      	str	r3, [sp, #0]
   19a7c:	f8cd 3003 	str.w	r3, [sp, #3]
   19a80:	2207      	movs	r2, #7
   19a82:	4669      	mov	r1, sp
   19a84:	4628      	mov	r0, r5
   19a86:	f00e fcfc 	bl	28482 <memcmp>
   19a8a:	b9c8      	cbnz	r0, 19ac0 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   19a8c:	4b10      	ldr	r3, [pc, #64]	; (19ad0 <le_adv_stop_free_conn+0x64>)
   19a8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   19a92:	9002      	str	r0, [sp, #8]
   19a94:	f8ad 100c 	strh.w	r1, [sp, #12]
   19a98:	0c09      	lsrs	r1, r1, #16
   19a9a:	f88d 100e 	strb.w	r1, [sp, #14]
   19a9e:	2204      	movs	r2, #4
   19aa0:	a902      	add	r1, sp, #8
   19aa2:	7820      	ldrb	r0, [r4, #0]
   19aa4:	f001 f890 	bl	1abc8 <bt_conn_lookup_state_le>
   19aa8:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   19aaa:	b13c      	cbz	r4, 19abc <le_adv_stop_free_conn+0x50>
		conn->err = status;
   19aac:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19aae:	2100      	movs	r1, #0
   19ab0:	4620      	mov	r0, r4
   19ab2:	f000 fe25 	bl	1a700 <bt_conn_set_state>
		bt_conn_unref(conn);
   19ab6:	4620      	mov	r0, r4
   19ab8:	f00b f933 	bl	24d22 <bt_conn_unref>
	}
}
   19abc:	b004      	add	sp, #16
   19abe:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   19ac0:	2205      	movs	r2, #5
   19ac2:	4629      	mov	r1, r5
   19ac4:	7820      	ldrb	r0, [r4, #0]
   19ac6:	f001 f87f 	bl	1abc8 <bt_conn_lookup_state_le>
   19aca:	4604      	mov	r4, r0
   19acc:	e7ed      	b.n	19aaa <le_adv_stop_free_conn+0x3e>
   19ace:	bf00      	nop
   19ad0:	00028a54 	.word	0x00028a54

00019ad4 <bt_le_adv_lookup_legacy>:
}
   19ad4:	4800      	ldr	r0, [pc, #0]	; (19ad8 <bt_le_adv_lookup_legacy+0x4>)
   19ad6:	4770      	bx	lr
   19ad8:	200002c8 	.word	0x200002c8

00019adc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   19adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ae0:	b095      	sub	sp, #84	; 0x54
   19ae2:	9205      	str	r2, [sp, #20]
   19ae4:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   19ae6:	2300      	movs	r3, #0
   19ae8:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   19aea:	690f      	ldr	r7, [r1, #16]
   19aec:	ebb7 0b03 	subs.w	fp, r7, r3
   19af0:	bf18      	it	ne
   19af2:	f04f 0b01 	movne.w	fp, #1
   19af6:	f3bf 8f5b 	dmb	ish
   19afa:	4bc5      	ldr	r3, [pc, #788]	; (19e10 <bt_le_adv_start_legacy+0x334>)
   19afc:	681b      	ldr	r3, [r3, #0]
   19afe:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19b02:	f013 0f02 	tst.w	r3, #2
   19b06:	f000 81d9 	beq.w	19ebc <bt_le_adv_start_legacy+0x3e0>
   19b0a:	4605      	mov	r5, r0
   19b0c:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   19b0e:	4608      	mov	r0, r1
   19b10:	f00a ff36 	bl	24980 <valid_adv_param>
   19b14:	2800      	cmp	r0, #0
   19b16:	f000 81d4 	beq.w	19ec2 <bt_le_adv_start_legacy+0x3e6>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   19b1a:	4620      	mov	r0, r4
   19b1c:	f00a fe37 	bl	2478e <bt_id_adv_random_addr_check>
   19b20:	4682      	mov	sl, r0
   19b22:	2800      	cmp	r0, #0
   19b24:	f000 81d0 	beq.w	19ec8 <bt_le_adv_start_legacy+0x3ec>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19b28:	f105 0610 	add.w	r6, r5, #16
   19b2c:	f3bf 8f5b 	dmb	ish
   19b30:	692b      	ldr	r3, [r5, #16]
   19b32:	f3bf 8f5b 	dmb	ish
   19b36:	f013 0f40 	tst.w	r3, #64	; 0x40
   19b3a:	f040 81c8 	bne.w	19ece <bt_le_adv_start_legacy+0x3f2>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   19b3e:	2300      	movs	r3, #0
   19b40:	9309      	str	r3, [sp, #36]	; 0x24
   19b42:	930a      	str	r3, [sp, #40]	; 0x28
   19b44:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   19b48:	68a3      	ldr	r3, [r4, #8]
   19b4a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   19b4e:	68e3      	ldr	r3, [r4, #12]
   19b50:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   19b54:	f8d4 9004 	ldr.w	r9, [r4, #4]
   19b58:	4648      	mov	r0, r9
   19b5a:	f00a fe3a 	bl	247d2 <get_adv_channel_map>
   19b5e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   19b62:	4648      	mov	r0, r9
   19b64:	f00a fe33 	bl	247ce <get_filter_policy>
   19b68:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   19b6c:	782a      	ldrb	r2, [r5, #0]
   19b6e:	7823      	ldrb	r3, [r4, #0]
   19b70:	429a      	cmp	r2, r3
   19b72:	d00c      	beq.n	19b8e <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19b74:	4ba6      	ldr	r3, [pc, #664]	; (19e10 <bt_le_adv_start_legacy+0x334>)
   19b76:	f3bf 8f5b 	dmb	ish
   19b7a:	e853 2f00 	ldrex	r2, [r3]
   19b7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   19b82:	e843 2100 	strex	r1, r2, [r3]
   19b86:	2900      	cmp	r1, #0
   19b88:	d1f7      	bne.n	19b7a <bt_le_adv_start_legacy+0x9e>
   19b8a:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   19b8e:	7823      	ldrb	r3, [r4, #0]
   19b90:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   19b92:	4aa0      	ldr	r2, [pc, #640]	; (19e14 <bt_le_adv_start_legacy+0x338>)
   19b94:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   19b98:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   19b9c:	465a      	mov	r2, fp
   19b9e:	6861      	ldr	r1, [r4, #4]
   19ba0:	4628      	mov	r0, r5
   19ba2:	f7ff fd6d 	bl	19680 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   19ba6:	4681      	mov	r9, r0
   19ba8:	2800      	cmp	r0, #0
   19baa:	f040 80f8 	bne.w	19d9e <bt_le_adv_start_legacy+0x2c2>
		return err;
	}

	if (dir_adv) {
   19bae:	b327      	cbz	r7, 19bfa <bt_le_adv_start_legacy+0x11e>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   19bb0:	6923      	ldr	r3, [r4, #16]
   19bb2:	681a      	ldr	r2, [r3, #0]
   19bb4:	f8c5 2009 	str.w	r2, [r5, #9]
   19bb8:	889a      	ldrh	r2, [r3, #4]
   19bba:	799b      	ldrb	r3, [r3, #6]
   19bbc:	f8a5 200d 	strh.w	r2, [r5, #13]
   19bc0:	73eb      	strb	r3, [r5, #15]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   19bc2:	4620      	mov	r0, r4
   19bc4:	f00a feed 	bl	249a2 <get_adv_name_type_param>
   19bc8:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   19bca:	6863      	ldr	r3, [r4, #4]
   19bcc:	f013 0f01 	tst.w	r3, #1
   19bd0:	d023      	beq.n	19c1a <bt_le_adv_start_legacy+0x13e>
		if (dir_adv) {
   19bd2:	b1f7      	cbz	r7, 19c12 <bt_le_adv_start_legacy+0x136>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   19bd4:	f013 0f10 	tst.w	r3, #16
   19bd8:	d017      	beq.n	19c0a <bt_le_adv_start_legacy+0x12e>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   19bda:	2304      	movs	r3, #4
   19bdc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
   19be0:	6923      	ldr	r3, [r4, #16]
	memcpy(dst, src, sizeof(*dst));
   19be2:	681a      	ldr	r2, [r3, #0]
   19be4:	f8cd 2026 	str.w	r2, [sp, #38]	; 0x26
   19be8:	889a      	ldrh	r2, [r3, #4]
   19bea:	799b      	ldrb	r3, [r3, #6]
   19bec:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   19bf0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bool dir_adv = (param->peer != NULL), scannable = false;
   19bf4:	f04f 0a00 	mov.w	sl, #0
}
   19bf8:	e017      	b.n	19c2a <bt_le_adv_start_legacy+0x14e>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   19bfa:	2300      	movs	r3, #0
   19bfc:	930c      	str	r3, [sp, #48]	; 0x30
   19bfe:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
   19c02:	f8c5 3009 	str.w	r3, [r5, #9]
   19c06:	60eb      	str	r3, [r5, #12]
   19c08:	e7db      	b.n	19bc2 <bt_le_adv_start_legacy+0xe6>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   19c0a:	2301      	movs	r3, #1
   19c0c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19c10:	e7e6      	b.n	19be0 <bt_le_adv_start_legacy+0x104>
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   19c12:	2300      	movs	r3, #0
   19c14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   19c18:	e007      	b.n	19c2a <bt_le_adv_start_legacy+0x14e>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   19c1a:	f413 7f00 	tst.w	r3, #512	; 0x200
   19c1e:	d101      	bne.n	19c24 <bt_le_adv_start_legacy+0x148>
   19c20:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   19c22:	b35b      	cbz	r3, 19c7c <bt_le_adv_start_legacy+0x1a0>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   19c24:	2302      	movs	r3, #2
   19c26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   19c2a:	210f      	movs	r1, #15
   19c2c:	f242 0006 	movw	r0, #8198	; 0x2006
   19c30:	f7fd ffea 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   19c34:	4681      	mov	r9, r0
   19c36:	2800      	cmp	r0, #0
   19c38:	f000 814c 	beq.w	19ed4 <bt_le_adv_start_legacy+0x3f8>
   19c3c:	220f      	movs	r2, #15
   19c3e:	a908      	add	r1, sp, #32
   19c40:	3008      	adds	r0, #8
   19c42:	f00c fcf3 	bl	2662c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   19c46:	2200      	movs	r2, #0
   19c48:	4649      	mov	r1, r9
   19c4a:	f242 0006 	movw	r0, #8198	; 0x2006
   19c4e:	f7fe f817 	bl	17c80 <bt_hci_cmd_send_sync>
	if (err) {
   19c52:	4681      	mov	r9, r0
   19c54:	2800      	cmp	r0, #0
   19c56:	f040 80a2 	bne.w	19d9e <bt_le_adv_start_legacy+0x2c2>
		return err;
	}

	if (!dir_adv) {
   19c5a:	b1bf      	cbz	r7, 19c8c <bt_le_adv_start_legacy+0x1b0>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   19c5c:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19c5e:	f013 0f01 	tst.w	r3, #1
   19c62:	d02b      	beq.n	19cbc <bt_le_adv_start_legacy+0x1e0>
		err = le_adv_start_add_conn(adv, &conn);
   19c64:	a907      	add	r1, sp, #28
   19c66:	4628      	mov	r0, r5
   19c68:	f7ff feb6 	bl	199d8 <le_adv_start_add_conn>
		if (err) {
   19c6c:	b330      	cbz	r0, 19cbc <bt_le_adv_start_legacy+0x1e0>
			if (err == -ENOMEM && !dir_adv &&
   19c6e:	f110 0f0c 	cmn.w	r0, #12
   19c72:	f040 8132 	bne.w	19eda <bt_le_adv_start_legacy+0x3fe>
   19c76:	b1df      	cbz	r7, 19cb0 <bt_le_adv_start_legacy+0x1d4>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   19c78:	4681      	mov	r9, r0
   19c7a:	e090      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   19c7c:	2802      	cmp	r0, #2
   19c7e:	d0d1      	beq.n	19c24 <bt_le_adv_start_legacy+0x148>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   19c80:	2303      	movs	r3, #3
   19c82:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   19c86:	f04f 0a00 	mov.w	sl, #0
   19c8a:	e7ce      	b.n	19c2a <bt_le_adv_start_legacy+0x14e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   19c8c:	f8cd b00c 	str.w	fp, [sp, #12]
   19c90:	f8cd a008 	str.w	sl, [sp, #8]
   19c94:	2300      	movs	r3, #0
   19c96:	9301      	str	r3, [sp, #4]
   19c98:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   19c9a:	9300      	str	r3, [sp, #0]
   19c9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   19c9e:	4642      	mov	r2, r8
   19ca0:	9905      	ldr	r1, [sp, #20]
   19ca2:	4628      	mov	r0, r5
   19ca4:	f00a fde1 	bl	2486a <le_adv_update>
		if (err) {
   19ca8:	2800      	cmp	r0, #0
   19caa:	d0d7      	beq.n	19c5c <bt_le_adv_start_legacy+0x180>
			return err;
   19cac:	4681      	mov	r9, r0
   19cae:	e076      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   19cb0:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   19cb2:	f012 0f02 	tst.w	r2, #2
   19cb6:	d00c      	beq.n	19cd2 <bt_le_adv_start_legacy+0x1f6>
			return err;
   19cb8:	4681      	mov	r9, r0
   19cba:	e070      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   19cbc:	2101      	movs	r1, #1
   19cbe:	4628      	mov	r0, r5
   19cc0:	f00a feab 	bl	24a1a <bt_le_adv_set_enable>
	if (err) {
   19cc4:	4605      	mov	r5, r0
   19cc6:	2800      	cmp	r0, #0
   19cc8:	d16d      	bne.n	19da6 <bt_le_adv_start_legacy+0x2ca>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   19cca:	9807      	ldr	r0, [sp, #28]
   19ccc:	b108      	cbz	r0, 19cd2 <bt_le_adv_start_legacy+0x1f6>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   19cce:	f00b f828 	bl	24d22 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   19cd2:	2f00      	cmp	r7, #0
   19cd4:	f000 8094 	beq.w	19e00 <bt_le_adv_start_legacy+0x324>
   19cd8:	464b      	mov	r3, r9
	if (val) {
   19cda:	f013 0f01 	tst.w	r3, #1
   19cde:	f000 809f 	beq.w	19e20 <bt_le_adv_start_legacy+0x344>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19ce2:	f3bf 8f5b 	dmb	ish
   19ce6:	e856 3f00 	ldrex	r3, [r6]
   19cea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   19cee:	e846 3200 	strex	r2, r3, [r6]
   19cf2:	2a00      	cmp	r2, #0
   19cf4:	d1f7      	bne.n	19ce6 <bt_le_adv_start_legacy+0x20a>
   19cf6:	f3bf 8f5b 	dmb	ish
   19cfa:	f1bb 0f01 	cmp.w	fp, #1
   19cfe:	f040 809c 	bne.w	19e3a <bt_le_adv_start_legacy+0x35e>
   19d02:	f3bf 8f5b 	dmb	ish
   19d06:	e856 3f00 	ldrex	r3, [r6]
   19d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19d0e:	e846 3200 	strex	r2, r3, [r6]
   19d12:	2a00      	cmp	r2, #0
   19d14:	d1f7      	bne.n	19d06 <bt_le_adv_start_legacy+0x22a>
   19d16:	f3bf 8f5b 	dmb	ish
   19d1a:	f1bb 0f02 	cmp.w	fp, #2
   19d1e:	f040 8099 	bne.w	19e54 <bt_le_adv_start_legacy+0x378>
   19d22:	f3bf 8f5b 	dmb	ish
   19d26:	e856 3f00 	ldrex	r3, [r6]
   19d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19d2e:	e846 3200 	strex	r2, r3, [r6]
   19d32:	2a00      	cmp	r2, #0
   19d34:	d1f7      	bne.n	19d26 <bt_le_adv_start_legacy+0x24a>
   19d36:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   19d3a:	6863      	ldr	r3, [r4, #4]
   19d3c:	f013 0f01 	tst.w	r3, #1
   19d40:	f000 8095 	beq.w	19e6e <bt_le_adv_start_legacy+0x392>
   19d44:	f3bf 8f5b 	dmb	ish
   19d48:	e856 3f00 	ldrex	r3, [r6]
   19d4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   19d50:	e846 3200 	strex	r2, r3, [r6]
   19d54:	2a00      	cmp	r2, #0
   19d56:	d1f7      	bne.n	19d48 <bt_le_adv_start_legacy+0x26c>
   19d58:	f3bf 8f5b 	dmb	ish
   19d5c:	f1ba 0f00 	cmp.w	sl, #0
   19d60:	f000 8092 	beq.w	19e88 <bt_le_adv_start_legacy+0x3ac>
   19d64:	f3bf 8f5b 	dmb	ish
   19d68:	e856 3f00 	ldrex	r3, [r6]
   19d6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   19d70:	e846 3200 	strex	r2, r3, [r6]
   19d74:	2a00      	cmp	r2, #0
   19d76:	d1f7      	bne.n	19d68 <bt_le_adv_start_legacy+0x28c>
   19d78:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   19d7c:	6863      	ldr	r3, [r4, #4]
   19d7e:	f013 0f04 	tst.w	r3, #4
   19d82:	f000 808e 	beq.w	19ea2 <bt_le_adv_start_legacy+0x3c6>
   19d86:	f3bf 8f5b 	dmb	ish
   19d8a:	e856 3f00 	ldrex	r3, [r6]
   19d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   19d92:	e846 3200 	strex	r2, r3, [r6]
   19d96:	2a00      	cmp	r2, #0
   19d98:	d1f7      	bne.n	19d8a <bt_le_adv_start_legacy+0x2ae>
   19d9a:	f3bf 8f5b 	dmb	ish

	return 0;
}
   19d9e:	4648      	mov	r0, r9
   19da0:	b015      	add	sp, #84	; 0x54
   19da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		BT_ERR("Failed to start advertiser");
   19da6:	4b1c      	ldr	r3, [pc, #112]	; (19e18 <bt_le_adv_start_legacy+0x33c>)
   19da8:	9312      	str	r3, [sp, #72]	; 0x48
   19daa:	2300      	movs	r3, #0
   19dac:	f8ad 3019 	strh.w	r3, [sp, #25]
   19db0:	f88d 301b 	strb.w	r3, [sp, #27]
   19db4:	2202      	movs	r2, #2
   19db6:	f88d 2018 	strb.w	r2, [sp, #24]
   19dba:	f88d 301a 	strb.w	r3, [sp, #26]
   19dbe:	9a06      	ldr	r2, [sp, #24]
   19dc0:	9211      	str	r2, [sp, #68]	; 0x44
   19dc2:	461a      	mov	r2, r3
   19dc4:	f363 0200 	bfi	r2, r3, #0, #1
   19dc8:	f363 0241 	bfi	r2, r3, #1, #1
   19dcc:	f363 0282 	bfi	r2, r3, #2, #1
   19dd0:	f363 02c5 	bfi	r2, r3, #3, #3
   19dd4:	2101      	movs	r1, #1
   19dd6:	f361 1288 	bfi	r2, r1, #6, #3
   19dda:	2108      	movs	r1, #8
   19ddc:	f361 2252 	bfi	r2, r1, #9, #10
   19de0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19de4:	490d      	ldr	r1, [pc, #52]	; (19e1c <bt_le_adv_start_legacy+0x340>)
   19de6:	a80e      	add	r0, sp, #56	; 0x38
   19de8:	f00a f8b0 	bl	23f4c <z_log_msg2_finalize>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   19dec:	9807      	ldr	r0, [sp, #28]
   19dee:	b128      	cbz	r0, 19dfc <bt_le_adv_start_legacy+0x320>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19df0:	2100      	movs	r1, #0
   19df2:	f000 fc85 	bl	1a700 <bt_conn_set_state>
			bt_conn_unref(conn);
   19df6:	9807      	ldr	r0, [sp, #28]
   19df8:	f00a ff93 	bl	24d22 <bt_conn_unref>
		return err;
   19dfc:	46a9      	mov	r9, r5
   19dfe:	e7ce      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   19e00:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   19e02:	f013 0f02 	tst.w	r3, #2
   19e06:	d001      	beq.n	19e0c <bt_le_adv_start_legacy+0x330>
   19e08:	464b      	mov	r3, r9
   19e0a:	e766      	b.n	19cda <bt_le_adv_start_legacy+0x1fe>
   19e0c:	2301      	movs	r3, #1
   19e0e:	e764      	b.n	19cda <bt_le_adv_start_legacy+0x1fe>
   19e10:	2000037c 	.word	0x2000037c
   19e14:	200002b0 	.word	0x200002b0
   19e18:	00029f48 	.word	0x00029f48
   19e1c:	0002887c 	.word	0x0002887c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19e20:	f3bf 8f5b 	dmb	ish
   19e24:	e856 3f00 	ldrex	r3, [r6]
   19e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   19e2c:	e846 3200 	strex	r2, r3, [r6]
   19e30:	2a00      	cmp	r2, #0
   19e32:	d1f7      	bne.n	19e24 <bt_le_adv_start_legacy+0x348>
   19e34:	f3bf 8f5b 	dmb	ish
   19e38:	e75f      	b.n	19cfa <bt_le_adv_start_legacy+0x21e>
   19e3a:	f3bf 8f5b 	dmb	ish
   19e3e:	e856 3f00 	ldrex	r3, [r6]
   19e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   19e46:	e846 3200 	strex	r2, r3, [r6]
   19e4a:	2a00      	cmp	r2, #0
   19e4c:	d1f7      	bne.n	19e3e <bt_le_adv_start_legacy+0x362>
   19e4e:	f3bf 8f5b 	dmb	ish
   19e52:	e762      	b.n	19d1a <bt_le_adv_start_legacy+0x23e>
   19e54:	f3bf 8f5b 	dmb	ish
   19e58:	e856 3f00 	ldrex	r3, [r6]
   19e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   19e60:	e846 3200 	strex	r2, r3, [r6]
   19e64:	2a00      	cmp	r2, #0
   19e66:	d1f7      	bne.n	19e58 <bt_le_adv_start_legacy+0x37c>
   19e68:	f3bf 8f5b 	dmb	ish
   19e6c:	e765      	b.n	19d3a <bt_le_adv_start_legacy+0x25e>
   19e6e:	f3bf 8f5b 	dmb	ish
   19e72:	e856 3f00 	ldrex	r3, [r6]
   19e76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   19e7a:	e846 3200 	strex	r2, r3, [r6]
   19e7e:	2a00      	cmp	r2, #0
   19e80:	d1f7      	bne.n	19e72 <bt_le_adv_start_legacy+0x396>
   19e82:	f3bf 8f5b 	dmb	ish
   19e86:	e769      	b.n	19d5c <bt_le_adv_start_legacy+0x280>
   19e88:	f3bf 8f5b 	dmb	ish
   19e8c:	e856 3f00 	ldrex	r3, [r6]
   19e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   19e94:	e846 3200 	strex	r2, r3, [r6]
   19e98:	2a00      	cmp	r2, #0
   19e9a:	d1f7      	bne.n	19e8c <bt_le_adv_start_legacy+0x3b0>
   19e9c:	f3bf 8f5b 	dmb	ish
   19ea0:	e76c      	b.n	19d7c <bt_le_adv_start_legacy+0x2a0>
   19ea2:	f3bf 8f5b 	dmb	ish
   19ea6:	e856 3f00 	ldrex	r3, [r6]
   19eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   19eae:	e846 3200 	strex	r2, r3, [r6]
   19eb2:	2a00      	cmp	r2, #0
   19eb4:	d1f7      	bne.n	19ea6 <bt_le_adv_start_legacy+0x3ca>
   19eb6:	f3bf 8f5b 	dmb	ish
}
   19eba:	e770      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
		return -EAGAIN;
   19ebc:	f06f 090a 	mvn.w	r9, #10
   19ec0:	e76d      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
		return -EINVAL;
   19ec2:	f06f 0915 	mvn.w	r9, #21
   19ec6:	e76a      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
		return -EINVAL;
   19ec8:	f06f 0915 	mvn.w	r9, #21
   19ecc:	e767      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
		return -EALREADY;
   19ece:	f06f 0977 	mvn.w	r9, #119	; 0x77
   19ed2:	e764      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
		return -ENOBUFS;
   19ed4:	f06f 0968 	mvn.w	r9, #104	; 0x68
   19ed8:	e761      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
			return err;
   19eda:	4681      	mov	r9, r0
   19edc:	e75f      	b.n	19d9e <bt_le_adv_start_legacy+0x2c2>
   19ede:	bf00      	nop

00019ee0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   19ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ee4:	b082      	sub	sp, #8
   19ee6:	4606      	mov	r6, r0
   19ee8:	460c      	mov	r4, r1
   19eea:	4615      	mov	r5, r2
   19eec:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   19eee:	f7ff fcad 	bl	1984c <adv_new_legacy>
	int err;

	if (!adv) {
   19ef2:	b1f8      	cbz	r0, 19f34 <bt_le_adv_start+0x54>
   19ef4:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   19ef6:	9b08      	ldr	r3, [sp, #32]
   19ef8:	9301      	str	r3, [sp, #4]
   19efa:	9700      	str	r7, [sp, #0]
   19efc:	462b      	mov	r3, r5
   19efe:	4622      	mov	r2, r4
   19f00:	4631      	mov	r1, r6
   19f02:	f7ff fdeb 	bl	19adc <bt_le_adv_start_legacy>
   19f06:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   19f08:	4629      	mov	r1, r5
   19f0a:	4620      	mov	r0, r4
   19f0c:	f00a fc41 	bl	24792 <ad_is_limited>
   19f10:	b918      	cbnz	r0, 19f1a <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   19f12:	4630      	mov	r0, r6
   19f14:	b002      	add	sp, #8
   19f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   19f1a:	f108 0818 	add.w	r8, r8, #24
   19f1e:	4907      	ldr	r1, [pc, #28]	; (19f3c <bt_le_adv_start+0x5c>)
   19f20:	4640      	mov	r0, r8
   19f22:	f00d ff59 	bl	27dd8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   19f26:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   19f2a:	2300      	movs	r3, #0
   19f2c:	4640      	mov	r0, r8
   19f2e:	f007 fad5 	bl	214dc <k_work_reschedule>
   19f32:	e7ee      	b.n	19f12 <bt_le_adv_start+0x32>
		return -ENOMEM;
   19f34:	f06f 060b 	mvn.w	r6, #11
   19f38:	e7eb      	b.n	19f12 <bt_le_adv_start+0x32>
   19f3a:	bf00      	nop
   19f3c:	00019ffd 	.word	0x00019ffd

00019f40 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   19f40:	b510      	push	{r4, lr}
   19f42:	b088      	sub	sp, #32
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   19f44:	f7ff fdc6 	bl	19ad4 <bt_le_adv_lookup_legacy>
   19f48:	4604      	mov	r4, r0
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   19f4a:	f00a fd6a 	bl	24a22 <bt_le_lim_adv_cancel_timeout>

	if (!adv) {
   19f4e:	b1cc      	cbz	r4, 19f84 <bt_le_adv_stop+0x44>
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   19f50:	f104 0310 	add.w	r3, r4, #16
   19f54:	f3bf 8f5b 	dmb	ish
   19f58:	e853 2f00 	ldrex	r2, [r3]
   19f5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   19f60:	e843 2100 	strex	r1, r2, [r3]
   19f64:	2900      	cmp	r1, #0
   19f66:	d1f7      	bne.n	19f58 <bt_le_adv_stop+0x18>
   19f68:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19f6c:	f3bf 8f5b 	dmb	ish
   19f70:	6923      	ldr	r3, [r4, #16]
   19f72:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   19f76:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   19f7a:	f013 0f40 	tst.w	r3, #64	; 0x40
   19f7e:	d126      	bne.n	19fce <bt_le_adv_stop+0x8e>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   19f80:	b008      	add	sp, #32
   19f82:	bd10      	pop	{r4, pc}
		BT_ERR("No valid legacy adv");
   19f84:	4b1b      	ldr	r3, [pc, #108]	; (19ff4 <bt_le_adv_stop+0xb4>)
   19f86:	9306      	str	r3, [sp, #24]
   19f88:	f8ad 4005 	strh.w	r4, [sp, #5]
   19f8c:	f88d 4007 	strb.w	r4, [sp, #7]
   19f90:	2302      	movs	r3, #2
   19f92:	f88d 3004 	strb.w	r3, [sp, #4]
   19f96:	f88d 4006 	strb.w	r4, [sp, #6]
   19f9a:	9b01      	ldr	r3, [sp, #4]
   19f9c:	9305      	str	r3, [sp, #20]
   19f9e:	4622      	mov	r2, r4
   19fa0:	f364 0200 	bfi	r2, r4, #0, #1
   19fa4:	f364 0241 	bfi	r2, r4, #1, #1
   19fa8:	f364 0282 	bfi	r2, r4, #2, #1
   19fac:	f364 02c5 	bfi	r2, r4, #3, #3
   19fb0:	2301      	movs	r3, #1
   19fb2:	f363 1288 	bfi	r2, r3, #6, #3
   19fb6:	2308      	movs	r3, #8
   19fb8:	f363 2252 	bfi	r2, r3, #9, #10
   19fbc:	4623      	mov	r3, r4
   19fbe:	f3c2 0212 	ubfx	r2, r2, #0, #19
   19fc2:	490d      	ldr	r1, [pc, #52]	; (19ff8 <bt_le_adv_stop+0xb8>)
   19fc4:	a802      	add	r0, sp, #8
   19fc6:	f009 ffc1 	bl	23f4c <z_log_msg2_finalize>
		return 0;
   19fca:	4620      	mov	r0, r4
   19fcc:	e7d8      	b.n	19f80 <bt_le_adv_stop+0x40>
   19fce:	f3bf 8f5b 	dmb	ish
   19fd2:	6923      	ldr	r3, [r4, #16]
   19fd4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   19fd8:	f413 7f00 	tst.w	r3, #512	; 0x200
   19fdc:	d104      	bne.n	19fe8 <bt_le_adv_stop+0xa8>
		err = bt_le_adv_set_enable_legacy(adv, false);
   19fde:	2100      	movs	r1, #0
   19fe0:	4620      	mov	r0, r4
   19fe2:	f00a fcf2 	bl	249ca <bt_le_adv_set_enable_legacy>
		if (err) {
   19fe6:	e7cb      	b.n	19f80 <bt_le_adv_stop+0x40>
		le_adv_stop_free_conn(adv, 0);
   19fe8:	2100      	movs	r1, #0
   19fea:	4620      	mov	r0, r4
   19fec:	f7ff fd3e 	bl	19a6c <le_adv_stop_free_conn>
   19ff0:	e7f5      	b.n	19fde <bt_le_adv_stop+0x9e>
   19ff2:	bf00      	nop
   19ff4:	00029f64 	.word	0x00029f64
   19ff8:	0002887c 	.word	0x0002887c

00019ffc <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   19ffc:	b500      	push	{lr}
   19ffe:	b089      	sub	sp, #36	; 0x24
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   1a000:	f7ff ff9e 	bl	19f40 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   1a004:	4b13      	ldr	r3, [pc, #76]	; (1a054 <adv_timeout+0x58>)
   1a006:	9306      	str	r3, [sp, #24]
   1a008:	9007      	str	r0, [sp, #28]
   1a00a:	2300      	movs	r3, #0
   1a00c:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a010:	f88d 3007 	strb.w	r3, [sp, #7]
   1a014:	2203      	movs	r2, #3
   1a016:	f88d 2004 	strb.w	r2, [sp, #4]
   1a01a:	f88d 3006 	strb.w	r3, [sp, #6]
   1a01e:	9a01      	ldr	r2, [sp, #4]
   1a020:	9205      	str	r2, [sp, #20]
   1a022:	461a      	mov	r2, r3
   1a024:	f363 0200 	bfi	r2, r3, #0, #1
   1a028:	f363 0241 	bfi	r2, r3, #1, #1
   1a02c:	f363 0282 	bfi	r2, r3, #2, #1
   1a030:	f363 02c5 	bfi	r2, r3, #3, #3
   1a034:	2102      	movs	r1, #2
   1a036:	f361 1288 	bfi	r2, r1, #6, #3
   1a03a:	210c      	movs	r1, #12
   1a03c:	f361 2252 	bfi	r2, r1, #9, #10
   1a040:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a044:	4904      	ldr	r1, [pc, #16]	; (1a058 <adv_timeout+0x5c>)
   1a046:	a802      	add	r0, sp, #8
   1a048:	f009 ff80 	bl	23f4c <z_log_msg2_finalize>
}
   1a04c:	b009      	add	sp, #36	; 0x24
   1a04e:	f85d fb04 	ldr.w	pc, [sp], #4
   1a052:	bf00      	nop
   1a054:	00029f78 	.word	0x00029f78
   1a058:	0002887c 	.word	0x0002887c

0001a05c <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   1a05c:	b538      	push	{r3, r4, r5, lr}
   1a05e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a060:	4b0c      	ldr	r3, [pc, #48]	; (1a094 <notify_disconnected+0x38>)
   1a062:	681c      	ldr	r4, [r3, #0]
   1a064:	e000      	b.n	1a068 <notify_disconnected+0xc>
   1a066:	6924      	ldr	r4, [r4, #16]
   1a068:	b134      	cbz	r4, 1a078 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   1a06a:	6863      	ldr	r3, [r4, #4]
   1a06c:	2b00      	cmp	r3, #0
   1a06e:	d0fa      	beq.n	1a066 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   1a070:	7a69      	ldrb	r1, [r5, #9]
   1a072:	4628      	mov	r0, r5
   1a074:	4798      	blx	r3
   1a076:	e7f6      	b.n	1a066 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a078:	4c07      	ldr	r4, [pc, #28]	; (1a098 <notify_disconnected+0x3c>)
   1a07a:	e000      	b.n	1a07e <notify_disconnected+0x22>
   1a07c:	3414      	adds	r4, #20
   1a07e:	4b07      	ldr	r3, [pc, #28]	; (1a09c <notify_disconnected+0x40>)
   1a080:	429c      	cmp	r4, r3
   1a082:	d206      	bcs.n	1a092 <notify_disconnected+0x36>
		if (cb->disconnected) {
   1a084:	6863      	ldr	r3, [r4, #4]
   1a086:	2b00      	cmp	r3, #0
   1a088:	d0f8      	beq.n	1a07c <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1a08a:	7a69      	ldrb	r1, [r5, #9]
   1a08c:	4628      	mov	r0, r5
   1a08e:	4798      	blx	r3
   1a090:	e7f4      	b.n	1a07c <notify_disconnected+0x20>
		}
	}
}
   1a092:	bd38      	pop	{r3, r4, r5, pc}
   1a094:	20002aa0 	.word	0x20002aa0
   1a098:	00028848 	.word	0x00028848
   1a09c:	0002885c 	.word	0x0002885c

0001a0a0 <tx_free>:
{
   1a0a0:	b508      	push	{r3, lr}
   1a0a2:	4601      	mov	r1, r0
	tx->cb = NULL;
   1a0a4:	2300      	movs	r3, #0
   1a0a6:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   1a0a8:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1a0aa:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1a0ac:	4801      	ldr	r0, [pc, #4]	; (1a0b4 <tx_free+0x14>)
   1a0ae:	f00d fd91 	bl	27bd4 <k_queue_append>
}
   1a0b2:	bd08      	pop	{r3, pc}
   1a0b4:	200008b0 	.word	0x200008b0

0001a0b8 <conn_tx_alloc>:
{
   1a0b8:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1a0ba:	f007 fdd3 	bl	21c64 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a0be:	4b08      	ldr	r3, [pc, #32]	; (1a0e0 <conn_tx_alloc+0x28>)
   1a0c0:	4283      	cmp	r3, r0
   1a0c2:	d007      	beq.n	1a0d4 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   1a0c4:	f04f 32ff 	mov.w	r2, #4294967295
   1a0c8:	f04f 33ff 	mov.w	r3, #4294967295
   1a0cc:	4805      	ldr	r0, [pc, #20]	; (1a0e4 <conn_tx_alloc+0x2c>)
   1a0ce:	f006 ffb1 	bl	21034 <z_impl_k_queue_get>
}
   1a0d2:	bd08      	pop	{r3, pc}
   1a0d4:	2200      	movs	r2, #0
   1a0d6:	2300      	movs	r3, #0
   1a0d8:	4802      	ldr	r0, [pc, #8]	; (1a0e4 <conn_tx_alloc+0x2c>)
   1a0da:	f006 ffab 	bl	21034 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1a0de:	e7f8      	b.n	1a0d2 <conn_tx_alloc+0x1a>
   1a0e0:	20001f10 	.word	0x20001f10
   1a0e4:	200008b0 	.word	0x200008b0

0001a0e8 <notify_connected>:
{
   1a0e8:	b538      	push	{r3, r4, r5, lr}
   1a0ea:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1a0ec:	4b0f      	ldr	r3, [pc, #60]	; (1a12c <notify_connected+0x44>)
   1a0ee:	681c      	ldr	r4, [r3, #0]
   1a0f0:	e000      	b.n	1a0f4 <notify_connected+0xc>
   1a0f2:	6924      	ldr	r4, [r4, #16]
   1a0f4:	b134      	cbz	r4, 1a104 <notify_connected+0x1c>
		if (cb->connected) {
   1a0f6:	6823      	ldr	r3, [r4, #0]
   1a0f8:	2b00      	cmp	r3, #0
   1a0fa:	d0fa      	beq.n	1a0f2 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   1a0fc:	7a69      	ldrb	r1, [r5, #9]
   1a0fe:	4628      	mov	r0, r5
   1a100:	4798      	blx	r3
   1a102:	e7f6      	b.n	1a0f2 <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a104:	4c0a      	ldr	r4, [pc, #40]	; (1a130 <notify_connected+0x48>)
   1a106:	e000      	b.n	1a10a <notify_connected+0x22>
   1a108:	3414      	adds	r4, #20
   1a10a:	4b0a      	ldr	r3, [pc, #40]	; (1a134 <notify_connected+0x4c>)
   1a10c:	429c      	cmp	r4, r3
   1a10e:	d206      	bcs.n	1a11e <notify_connected+0x36>
		if (cb->connected) {
   1a110:	6823      	ldr	r3, [r4, #0]
   1a112:	2b00      	cmp	r3, #0
   1a114:	d0f8      	beq.n	1a108 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   1a116:	7a69      	ldrb	r1, [r5, #9]
   1a118:	4628      	mov	r0, r5
   1a11a:	4798      	blx	r3
   1a11c:	e7f4      	b.n	1a108 <notify_connected+0x20>
	if (!conn->err) {
   1a11e:	7a6b      	ldrb	r3, [r5, #9]
   1a120:	b103      	cbz	r3, 1a124 <notify_connected+0x3c>
}
   1a122:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   1a124:	4628      	mov	r0, r5
   1a126:	f003 fb49 	bl	1d7bc <bt_gatt_connected>
}
   1a12a:	e7fa      	b.n	1a122 <notify_connected+0x3a>
   1a12c:	20002aa0 	.word	0x20002aa0
   1a130:	00028848 	.word	0x00028848
   1a134:	0002885c 	.word	0x0002885c

0001a138 <bt_conn_get_pkts>:
}
   1a138:	4800      	ldr	r0, [pc, #0]	; (1a13c <bt_conn_get_pkts+0x4>)
   1a13a:	4770      	bx	lr
   1a13c:	200003b0 	.word	0x200003b0

0001a140 <send_frag>:
{
   1a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a144:	b088      	sub	sp, #32
   1a146:	4605      	mov	r5, r0
   1a148:	460e      	mov	r6, r1
   1a14a:	4691      	mov	r9, r2
   1a14c:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a14e:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   1a150:	f7ff fff2 	bl	1a138 <bt_conn_get_pkts>
   1a154:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   1a156:	f04f 32ff 	mov.w	r2, #4294967295
   1a15a:	f04f 33ff 	mov.w	r3, #4294967295
   1a15e:	f006 ffcd 	bl	210fc <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1a162:	7aab      	ldrb	r3, [r5, #10]
   1a164:	2b07      	cmp	r3, #7
   1a166:	d16c      	bne.n	1a242 <send_frag+0x102>
   1a168:	f04f 0240 	mov.w	r2, #64	; 0x40
   1a16c:	f3ef 8311 	mrs	r3, BASEPRI
   1a170:	f382 8812 	msr	BASEPRI_MAX, r2
   1a174:	f3bf 8f6f 	isb	sy
	if (tx) {
   1a178:	b1a7      	cbz	r7, 1a1a4 <send_frag+0x64>
	parent->next = child;
   1a17a:	2200      	movs	r2, #0
   1a17c:	603a      	str	r2, [r7, #0]
	return list->tail;
   1a17e:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   1a180:	b16a      	cbz	r2, 1a19e <send_frag+0x5e>
	parent->next = child;
   1a182:	6017      	str	r7, [r2, #0]
	list->tail = node;
   1a184:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   1a186:	f383 8811 	msr	BASEPRI, r3
   1a18a:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1a18e:	464a      	mov	r2, r9
   1a190:	4631      	mov	r1, r6
   1a192:	4628      	mov	r0, r5
   1a194:	f00a fcd3 	bl	24b3e <send_acl>
	if (err) {
   1a198:	b988      	cbnz	r0, 1a1be <send_frag+0x7e>
	return true;
   1a19a:	2001      	movs	r0, #1
   1a19c:	e05a      	b.n	1a254 <send_frag+0x114>
   1a19e:	61af      	str	r7, [r5, #24]
	list->head = node;
   1a1a0:	616f      	str	r7, [r5, #20]
}
   1a1a2:	e7f0      	b.n	1a186 <send_frag+0x46>
	return list->tail;
   1a1a4:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   1a1a6:	b13a      	cbz	r2, 1a1b8 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   1a1a8:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   1a1ac:	f8da 2000 	ldr.w	r2, [sl]
   1a1b0:	3201      	adds	r2, #1
   1a1b2:	f8ca 2000 	str.w	r2, [sl]
   1a1b6:	e7e6      	b.n	1a186 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
   1a1b8:	f105 0a1c 	add.w	sl, r5, #28
   1a1bc:	e7f6      	b.n	1a1ac <send_frag+0x6c>
		BT_ERR("Unable to send to driver (err %d)", err);
   1a1be:	4a31      	ldr	r2, [pc, #196]	; (1a284 <send_frag+0x144>)
   1a1c0:	9206      	str	r2, [sp, #24]
   1a1c2:	9007      	str	r0, [sp, #28]
   1a1c4:	2300      	movs	r3, #0
   1a1c6:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a1ca:	f88d 3007 	strb.w	r3, [sp, #7]
   1a1ce:	2203      	movs	r2, #3
   1a1d0:	f88d 2004 	strb.w	r2, [sp, #4]
   1a1d4:	f88d 3006 	strb.w	r3, [sp, #6]
   1a1d8:	9a01      	ldr	r2, [sp, #4]
   1a1da:	9205      	str	r2, [sp, #20]
   1a1dc:	461a      	mov	r2, r3
   1a1de:	f363 0200 	bfi	r2, r3, #0, #1
   1a1e2:	f363 0241 	bfi	r2, r3, #1, #1
   1a1e6:	f363 0282 	bfi	r2, r3, #2, #1
   1a1ea:	f363 02c5 	bfi	r2, r3, #3, #3
   1a1ee:	2101      	movs	r1, #1
   1a1f0:	f361 1288 	bfi	r2, r1, #6, #3
   1a1f4:	210c      	movs	r1, #12
   1a1f6:	f361 2252 	bfi	r2, r1, #9, #10
   1a1fa:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a1fe:	4922      	ldr	r1, [pc, #136]	; (1a288 <send_frag+0x148>)
   1a200:	a802      	add	r0, sp, #8
   1a202:	f009 fea3 	bl	23f4c <z_log_msg2_finalize>
	__asm__ volatile(
   1a206:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a20a:	f3ef 8011 	mrs	r0, BASEPRI
   1a20e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a212:	f3bf 8f6f 	isb	sy
		if (tx) {
   1a216:	b34f      	cbz	r7, 1a26c <send_frag+0x12c>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   1a218:	4639      	mov	r1, r7
	return list->head;
   1a21a:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a21c:	2200      	movs	r2, #0
   1a21e:	b163      	cbz	r3, 1a23a <send_frag+0xfa>
   1a220:	428b      	cmp	r3, r1
   1a222:	d002      	beq.n	1a22a <send_frag+0xea>
   1a224:	461a      	mov	r2, r3
   1a226:	681b      	ldr	r3, [r3, #0]
   1a228:	e7f9      	b.n	1a21e <send_frag+0xde>
Z_GENLIST_REMOVE(slist, snode)
   1a22a:	b1b2      	cbz	r2, 1a25a <send_frag+0x11a>
	return node->next;
   1a22c:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   1a22e:	6013      	str	r3, [r2, #0]
	return list->tail;
   1a230:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1a232:	42bb      	cmp	r3, r7
   1a234:	d018      	beq.n	1a268 <send_frag+0x128>
	parent->next = child;
   1a236:	2300      	movs	r3, #0
   1a238:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   1a23a:	f380 8811 	msr	BASEPRI, r0
   1a23e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1a242:	4640      	mov	r0, r8
   1a244:	f006 ff32 	bl	210ac <z_impl_k_sem_give>
	if (tx) {
   1a248:	b117      	cbz	r7, 1a250 <send_frag+0x110>
		tx_free(tx);
   1a24a:	4638      	mov	r0, r7
   1a24c:	f7ff ff28 	bl	1a0a0 <tx_free>
	if (always_consume) {
   1a250:	b994      	cbnz	r4, 1a278 <send_frag+0x138>
	return false;
   1a252:	4620      	mov	r0, r4
}
   1a254:	b008      	add	sp, #32
   1a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   1a25a:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   1a25c:	616b      	str	r3, [r5, #20]
	return list->tail;
   1a25e:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1a260:	42ba      	cmp	r2, r7
   1a262:	d1e8      	bne.n	1a236 <send_frag+0xf6>
	list->tail = node;
   1a264:	61ab      	str	r3, [r5, #24]
}
   1a266:	e7e6      	b.n	1a236 <send_frag+0xf6>
	list->tail = node;
   1a268:	61aa      	str	r2, [r5, #24]
}
   1a26a:	e7e4      	b.n	1a236 <send_frag+0xf6>
			(*pending_no_cb)--;
   1a26c:	f8da 3000 	ldr.w	r3, [sl]
   1a270:	3b01      	subs	r3, #1
   1a272:	f8ca 3000 	str.w	r3, [sl]
   1a276:	e7e0      	b.n	1a23a <send_frag+0xfa>
		net_buf_unref(buf);
   1a278:	4630      	mov	r0, r6
   1a27a:	f00c f987 	bl	2658c <net_buf_unref>
	return false;
   1a27e:	2000      	movs	r0, #0
   1a280:	e7e8      	b.n	1a254 <send_frag+0x114>
   1a282:	bf00      	nop
   1a284:	00029bc4 	.word	0x00029bc4
   1a288:	00028894 	.word	0x00028894

0001a28c <bt_conn_new>:
{
   1a28c:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   1a28e:	2300      	movs	r3, #0
   1a290:	428b      	cmp	r3, r1
   1a292:	d228      	bcs.n	1a2e6 <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1a294:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1a298:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   1a29c:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a2a0:	2501      	movs	r5, #1
   1a2a2:	f3bf 8f5b 	dmb	ish
   1a2a6:	e852 6f00 	ldrex	r6, [r2]
   1a2aa:	2e00      	cmp	r6, #0
   1a2ac:	d104      	bne.n	1a2b8 <bt_conn_new+0x2c>
   1a2ae:	e842 5c00 	strex	ip, r5, [r2]
   1a2b2:	f1bc 0f00 	cmp.w	ip, #0
   1a2b6:	d1f6      	bne.n	1a2a6 <bt_conn_new+0x1a>
   1a2b8:	f3bf 8f5b 	dmb	ish
   1a2bc:	d111      	bne.n	1a2e2 <bt_conn_new+0x56>
	if (!conn) {
   1a2be:	b174      	cbz	r4, 1a2de <bt_conn_new+0x52>
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   1a2c0:	22b8      	movs	r2, #184	; 0xb8
   1a2c2:	2100      	movs	r1, #0
   1a2c4:	4620      	mov	r0, r4
   1a2c6:	f00e f90b 	bl	284e0 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1a2ca:	4908      	ldr	r1, [pc, #32]	; (1a2ec <bt_conn_new+0x60>)
   1a2cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a2d0:	f00d fd82 	bl	27dd8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1a2d4:	4906      	ldr	r1, [pc, #24]	; (1a2f0 <bt_conn_new+0x64>)
   1a2d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a2da:	f00d fd57 	bl	27d8c <k_work_init>
}
   1a2de:	4620      	mov	r0, r4
   1a2e0:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   1a2e2:	442b      	add	r3, r5
   1a2e4:	e7d4      	b.n	1a290 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   1a2e6:	2400      	movs	r4, #0
   1a2e8:	e7e9      	b.n	1a2be <bt_conn_new+0x32>
   1a2ea:	bf00      	nop
   1a2ec:	0001aca1 	.word	0x0001aca1
   1a2f0:	00024b1b 	.word	0x00024b1b

0001a2f4 <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   1a2f4:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1a2f6:	2101      	movs	r1, #1
   1a2f8:	4801      	ldr	r0, [pc, #4]	; (1a300 <acl_conn_new+0xc>)
   1a2fa:	f7ff ffc7 	bl	1a28c <bt_conn_new>
}
   1a2fe:	bd08      	pop	{r3, pc}
   1a300:	200018c0 	.word	0x200018c0

0001a304 <bt_acl_recv>:
{
   1a304:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a306:	b09b      	sub	sp, #108	; 0x6c
   1a308:	af00      	add	r7, sp, #0
   1a30a:	4604      	mov	r4, r0
   1a30c:	460d      	mov	r5, r1
	switch (flags) {
   1a30e:	2a01      	cmp	r2, #1
   1a310:	d079      	beq.n	1a406 <bt_acl_recv+0x102>
   1a312:	2a02      	cmp	r2, #2
   1a314:	f040 80e2 	bne.w	1a4dc <bt_acl_recv+0x1d8>
		if (conn->rx) {
   1a318:	6903      	ldr	r3, [r0, #16]
   1a31a:	b313      	cbz	r3, 1a362 <bt_acl_recv+0x5e>
			BT_ERR("Unexpected first L2CAP frame");
   1a31c:	4b8b      	ldr	r3, [pc, #556]	; (1a54c <bt_acl_recv+0x248>)
   1a31e:	61bb      	str	r3, [r7, #24]
   1a320:	2300      	movs	r3, #0
   1a322:	f8a7 3005 	strh.w	r3, [r7, #5]
   1a326:	71fb      	strb	r3, [r7, #7]
   1a328:	713a      	strb	r2, [r7, #4]
   1a32a:	71bb      	strb	r3, [r7, #6]
   1a32c:	687a      	ldr	r2, [r7, #4]
   1a32e:	617a      	str	r2, [r7, #20]
   1a330:	461a      	mov	r2, r3
   1a332:	f363 0200 	bfi	r2, r3, #0, #1
   1a336:	f363 0241 	bfi	r2, r3, #1, #1
   1a33a:	f363 0282 	bfi	r2, r3, #2, #1
   1a33e:	f363 02c5 	bfi	r2, r3, #3, #3
   1a342:	2101      	movs	r1, #1
   1a344:	f361 1288 	bfi	r2, r1, #6, #3
   1a348:	2108      	movs	r1, #8
   1a34a:	f361 2252 	bfi	r2, r1, #9, #10
   1a34e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a352:	497f      	ldr	r1, [pc, #508]	; (1a550 <bt_acl_recv+0x24c>)
   1a354:	f107 0008 	add.w	r0, r7, #8
   1a358:	f009 fdf8 	bl	23f4c <z_log_msg2_finalize>
			bt_conn_reset_rx_state(conn);
   1a35c:	4620      	mov	r0, r4
   1a35e:	f00a fc51 	bl	24c04 <bt_conn_reset_rx_state>
		conn->rx = buf;
   1a362:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1a364:	6921      	ldr	r1, [r4, #16]
   1a366:	898a      	ldrh	r2, [r1, #12]
   1a368:	2a01      	cmp	r2, #1
   1a36a:	f240 80df 	bls.w	1a52c <bt_acl_recv+0x228>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1a36e:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1a370:	7845      	ldrb	r5, [r0, #1]
   1a372:	7803      	ldrb	r3, [r0, #0]
   1a374:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1a378:	3304      	adds	r3, #4
   1a37a:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1a37c:	4293      	cmp	r3, r2
   1a37e:	f200 80d5 	bhi.w	1a52c <bt_acl_recv+0x228>
	if (conn->rx->len > acl_total_len) {
   1a382:	f080 80dc 	bcs.w	1a53e <bt_acl_recv+0x23a>
		BT_ERR("ACL len mismatch (%u > %u)",
   1a386:	466d      	mov	r5, sp
   1a388:	b088      	sub	sp, #32
   1a38a:	4668      	mov	r0, sp
   1a38c:	f110 020c 	adds.w	r2, r0, #12
   1a390:	f000 80cf 	beq.w	1a532 <bt_acl_recv+0x22e>
   1a394:	2110      	movs	r1, #16
   1a396:	b11a      	cbz	r2, 1a3a0 <bt_acl_recv+0x9c>
   1a398:	2904      	cmp	r1, #4
   1a39a:	dd01      	ble.n	1a3a0 <bt_acl_recv+0x9c>
   1a39c:	4e6d      	ldr	r6, [pc, #436]	; (1a554 <bt_acl_recv+0x250>)
   1a39e:	6106      	str	r6, [r0, #16]
   1a3a0:	6926      	ldr	r6, [r4, #16]
   1a3a2:	89b6      	ldrh	r6, [r6, #12]
   1a3a4:	b112      	cbz	r2, 1a3ac <bt_acl_recv+0xa8>
   1a3a6:	2908      	cmp	r1, #8
   1a3a8:	dd00      	ble.n	1a3ac <bt_acl_recv+0xa8>
   1a3aa:	6146      	str	r6, [r0, #20]
   1a3ac:	b112      	cbz	r2, 1a3b4 <bt_acl_recv+0xb0>
   1a3ae:	290c      	cmp	r1, #12
   1a3b0:	dd00      	ble.n	1a3b4 <bt_acl_recv+0xb0>
   1a3b2:	6183      	str	r3, [r0, #24]
   1a3b4:	290f      	cmp	r1, #15
   1a3b6:	f340 80bf 	ble.w	1a538 <bt_acl_recv+0x234>
   1a3ba:	2310      	movs	r3, #16
   1a3bc:	b142      	cbz	r2, 1a3d0 <bt_acl_recv+0xcc>
   1a3be:	2200      	movs	r2, #0
   1a3c0:	f8a7 2005 	strh.w	r2, [r7, #5]
   1a3c4:	71fa      	strb	r2, [r7, #7]
   1a3c6:	2104      	movs	r1, #4
   1a3c8:	7139      	strb	r1, [r7, #4]
   1a3ca:	71ba      	strb	r2, [r7, #6]
   1a3cc:	687a      	ldr	r2, [r7, #4]
   1a3ce:	60c2      	str	r2, [r0, #12]
   1a3d0:	2200      	movs	r2, #0
   1a3d2:	f36f 0200 	bfc	r2, #0, #1
   1a3d6:	f36f 0241 	bfc	r2, #1, #1
   1a3da:	f36f 0282 	bfc	r2, #2, #1
   1a3de:	f36f 02c5 	bfc	r2, #3, #3
   1a3e2:	2101      	movs	r1, #1
   1a3e4:	f361 1288 	bfi	r2, r1, #6, #3
   1a3e8:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1a3ec:	f363 2252 	bfi	r2, r3, #9, #10
   1a3f0:	2300      	movs	r3, #0
   1a3f2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a3f6:	4956      	ldr	r1, [pc, #344]	; (1a550 <bt_acl_recv+0x24c>)
   1a3f8:	f009 fda8 	bl	23f4c <z_log_msg2_finalize>
   1a3fc:	46ad      	mov	sp, r5
		bt_conn_reset_rx_state(conn);
   1a3fe:	4620      	mov	r0, r4
   1a400:	f00a fc00 	bl	24c04 <bt_conn_reset_rx_state>
		return;
   1a404:	e092      	b.n	1a52c <bt_acl_recv+0x228>
		if (!conn->rx) {
   1a406:	6900      	ldr	r0, [r0, #16]
   1a408:	b180      	cbz	r0, 1a42c <bt_acl_recv+0x128>
		if (!buf->len) {
   1a40a:	898e      	ldrh	r6, [r1, #12]
   1a40c:	b3b6      	cbz	r6, 1a47c <bt_acl_recv+0x178>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1a40e:	3008      	adds	r0, #8
   1a410:	f00c f942 	bl	26698 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1a414:	42b0      	cmp	r0, r6
   1a416:	d335      	bcc.n	1a484 <bt_acl_recv+0x180>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1a418:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a41a:	89aa      	ldrh	r2, [r5, #12]
   1a41c:	68a9      	ldr	r1, [r5, #8]
   1a41e:	3008      	adds	r0, #8
   1a420:	f00c f904 	bl	2662c <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1a424:	4628      	mov	r0, r5
   1a426:	f00c f8b1 	bl	2658c <net_buf_unref>
		break;
   1a42a:	e79b      	b.n	1a364 <bt_acl_recv+0x60>
			BT_ERR("Unexpected L2CAP continuation");
   1a42c:	4b4a      	ldr	r3, [pc, #296]	; (1a558 <bt_acl_recv+0x254>)
   1a42e:	64bb      	str	r3, [r7, #72]	; 0x48
   1a430:	2300      	movs	r3, #0
   1a432:	f8a7 3005 	strh.w	r3, [r7, #5]
   1a436:	71fb      	strb	r3, [r7, #7]
   1a438:	2202      	movs	r2, #2
   1a43a:	713a      	strb	r2, [r7, #4]
   1a43c:	71bb      	strb	r3, [r7, #6]
   1a43e:	687a      	ldr	r2, [r7, #4]
   1a440:	647a      	str	r2, [r7, #68]	; 0x44
   1a442:	461a      	mov	r2, r3
   1a444:	f363 0200 	bfi	r2, r3, #0, #1
   1a448:	f363 0241 	bfi	r2, r3, #1, #1
   1a44c:	f363 0282 	bfi	r2, r3, #2, #1
   1a450:	f363 02c5 	bfi	r2, r3, #3, #3
   1a454:	2101      	movs	r1, #1
   1a456:	f361 1288 	bfi	r2, r1, #6, #3
   1a45a:	2108      	movs	r1, #8
   1a45c:	f361 2252 	bfi	r2, r1, #9, #10
   1a460:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a464:	493a      	ldr	r1, [pc, #232]	; (1a550 <bt_acl_recv+0x24c>)
   1a466:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1a46a:	f009 fd6f 	bl	23f4c <z_log_msg2_finalize>
			bt_conn_reset_rx_state(conn);
   1a46e:	4620      	mov	r0, r4
   1a470:	f00a fbc8 	bl	24c04 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1a474:	4628      	mov	r0, r5
   1a476:	f00c f889 	bl	2658c <net_buf_unref>
			return;
   1a47a:	e057      	b.n	1a52c <bt_acl_recv+0x228>
			net_buf_unref(buf);
   1a47c:	4608      	mov	r0, r1
   1a47e:	f00c f885 	bl	2658c <net_buf_unref>
			return;
   1a482:	e053      	b.n	1a52c <bt_acl_recv+0x228>
			BT_ERR("Not enough buffer space for L2CAP data");
   1a484:	4b35      	ldr	r3, [pc, #212]	; (1a55c <bt_acl_recv+0x258>)
   1a486:	633b      	str	r3, [r7, #48]	; 0x30
   1a488:	2600      	movs	r6, #0
   1a48a:	f8a7 6005 	strh.w	r6, [r7, #5]
   1a48e:	71fe      	strb	r6, [r7, #7]
   1a490:	2302      	movs	r3, #2
   1a492:	713b      	strb	r3, [r7, #4]
   1a494:	71be      	strb	r6, [r7, #6]
   1a496:	687b      	ldr	r3, [r7, #4]
   1a498:	62fb      	str	r3, [r7, #44]	; 0x2c
   1a49a:	4632      	mov	r2, r6
   1a49c:	f366 0200 	bfi	r2, r6, #0, #1
   1a4a0:	f366 0241 	bfi	r2, r6, #1, #1
   1a4a4:	f366 0282 	bfi	r2, r6, #2, #1
   1a4a8:	f366 02c5 	bfi	r2, r6, #3, #3
   1a4ac:	2301      	movs	r3, #1
   1a4ae:	f363 1288 	bfi	r2, r3, #6, #3
   1a4b2:	2308      	movs	r3, #8
   1a4b4:	f363 2252 	bfi	r2, r3, #9, #10
   1a4b8:	4633      	mov	r3, r6
   1a4ba:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a4be:	4924      	ldr	r1, [pc, #144]	; (1a550 <bt_acl_recv+0x24c>)
   1a4c0:	f107 0020 	add.w	r0, r7, #32
   1a4c4:	f009 fd42 	bl	23f4c <z_log_msg2_finalize>
			bt_l2cap_recv(conn, conn->rx, false);
   1a4c8:	4632      	mov	r2, r6
   1a4ca:	6921      	ldr	r1, [r4, #16]
   1a4cc:	4620      	mov	r0, r4
   1a4ce:	f000 ff73 	bl	1b3b8 <bt_l2cap_recv>
			conn->rx = NULL;
   1a4d2:	6126      	str	r6, [r4, #16]
			net_buf_unref(buf);
   1a4d4:	4628      	mov	r0, r5
   1a4d6:	f00c f859 	bl	2658c <net_buf_unref>
			return;
   1a4da:	e027      	b.n	1a52c <bt_acl_recv+0x228>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1a4dc:	4b20      	ldr	r3, [pc, #128]	; (1a560 <bt_acl_recv+0x25c>)
   1a4de:	663b      	str	r3, [r7, #96]	; 0x60
   1a4e0:	667a      	str	r2, [r7, #100]	; 0x64
   1a4e2:	2300      	movs	r3, #0
   1a4e4:	f8a7 3005 	strh.w	r3, [r7, #5]
   1a4e8:	71fb      	strb	r3, [r7, #7]
   1a4ea:	2203      	movs	r2, #3
   1a4ec:	713a      	strb	r2, [r7, #4]
   1a4ee:	71bb      	strb	r3, [r7, #6]
   1a4f0:	687a      	ldr	r2, [r7, #4]
   1a4f2:	65fa      	str	r2, [r7, #92]	; 0x5c
   1a4f4:	461a      	mov	r2, r3
   1a4f6:	f363 0200 	bfi	r2, r3, #0, #1
   1a4fa:	f363 0241 	bfi	r2, r3, #1, #1
   1a4fe:	f363 0282 	bfi	r2, r3, #2, #1
   1a502:	f363 02c5 	bfi	r2, r3, #3, #3
   1a506:	2101      	movs	r1, #1
   1a508:	f361 1288 	bfi	r2, r1, #6, #3
   1a50c:	210c      	movs	r1, #12
   1a50e:	f361 2252 	bfi	r2, r1, #9, #10
   1a512:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a516:	490e      	ldr	r1, [pc, #56]	; (1a550 <bt_acl_recv+0x24c>)
   1a518:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1a51c:	f009 fd16 	bl	23f4c <z_log_msg2_finalize>
		bt_conn_reset_rx_state(conn);
   1a520:	4620      	mov	r0, r4
   1a522:	f00a fb6f 	bl	24c04 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   1a526:	4628      	mov	r0, r5
   1a528:	f00c f830 	bl	2658c <net_buf_unref>
}
   1a52c:	376c      	adds	r7, #108	; 0x6c
   1a52e:	46bd      	mov	sp, r7
   1a530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("ACL len mismatch (%u > %u)",
   1a532:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a536:	e72e      	b.n	1a396 <bt_acl_recv+0x92>
   1a538:	f06f 031b 	mvn.w	r3, #27
   1a53c:	e73e      	b.n	1a3bc <bt_acl_recv+0xb8>
	conn->rx = NULL;
   1a53e:	2300      	movs	r3, #0
   1a540:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1a542:	2201      	movs	r2, #1
   1a544:	4620      	mov	r0, r4
   1a546:	f000 ff37 	bl	1b3b8 <bt_l2cap_recv>
   1a54a:	e7ef      	b.n	1a52c <bt_acl_recv+0x228>
   1a54c:	00029fa0 	.word	0x00029fa0
   1a550:	00028894 	.word	0x00028894
   1a554:	0002a028 	.word	0x0002a028
   1a558:	00029fc0 	.word	0x00029fc0
   1a55c:	00029fe0 	.word	0x00029fe0
   1a560:	0002a008 	.word	0x0002a008

0001a564 <bt_conn_send_cb>:
{
   1a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a568:	b094      	sub	sp, #80	; 0x50
   1a56a:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1a56c:	7a83      	ldrb	r3, [r0, #10]
   1a56e:	2b07      	cmp	r3, #7
   1a570:	d11b      	bne.n	1a5aa <bt_conn_send_cb+0x46>
   1a572:	4604      	mov	r4, r0
   1a574:	460d      	mov	r5, r1
   1a576:	4616      	mov	r6, r2
	if (cb) {
   1a578:	2a00      	cmp	r2, #0
   1a57a:	f000 808a 	beq.w	1a692 <bt_conn_send_cb+0x12e>
		tx = conn_tx_alloc();
   1a57e:	f7ff fd9b 	bl	1a0b8 <conn_tx_alloc>
		if (!tx) {
   1a582:	4680      	mov	r8, r0
   1a584:	2800      	cmp	r0, #0
   1a586:	d036      	beq.n	1a5f6 <bt_conn_send_cb+0x92>
		if (conn->state != BT_CONN_CONNECTED) {
   1a588:	7aa3      	ldrb	r3, [r4, #10]
   1a58a:	2b07      	cmp	r3, #7
   1a58c:	d159      	bne.n	1a642 <bt_conn_send_cb+0xde>
		tx->cb = cb;
   1a58e:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   1a590:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   1a592:	2300      	movs	r3, #0
   1a594:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1a596:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   1a598:	4629      	mov	r1, r5
   1a59a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1a59e:	f00b ffe8 	bl	26572 <net_buf_put>
	return 0;
   1a5a2:	2000      	movs	r0, #0
}
   1a5a4:	b014      	add	sp, #80	; 0x50
   1a5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		BT_ERR("not connected!");
   1a5aa:	4b3b      	ldr	r3, [pc, #236]	; (1a698 <bt_conn_send_cb+0x134>)
   1a5ac:	9312      	str	r3, [sp, #72]	; 0x48
   1a5ae:	2300      	movs	r3, #0
   1a5b0:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a5b4:	f88d 3007 	strb.w	r3, [sp, #7]
   1a5b8:	2202      	movs	r2, #2
   1a5ba:	f88d 2004 	strb.w	r2, [sp, #4]
   1a5be:	f88d 3006 	strb.w	r3, [sp, #6]
   1a5c2:	9a01      	ldr	r2, [sp, #4]
   1a5c4:	9211      	str	r2, [sp, #68]	; 0x44
   1a5c6:	461a      	mov	r2, r3
   1a5c8:	f363 0200 	bfi	r2, r3, #0, #1
   1a5cc:	f363 0241 	bfi	r2, r3, #1, #1
   1a5d0:	f363 0282 	bfi	r2, r3, #2, #1
   1a5d4:	f363 02c5 	bfi	r2, r3, #3, #3
   1a5d8:	2101      	movs	r1, #1
   1a5da:	f361 1288 	bfi	r2, r1, #6, #3
   1a5de:	2108      	movs	r1, #8
   1a5e0:	f361 2252 	bfi	r2, r1, #9, #10
   1a5e4:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a5e8:	492c      	ldr	r1, [pc, #176]	; (1a69c <bt_conn_send_cb+0x138>)
   1a5ea:	a80e      	add	r0, sp, #56	; 0x38
   1a5ec:	f009 fcae 	bl	23f4c <z_log_msg2_finalize>
		return -ENOTCONN;
   1a5f0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a5f4:	e7d6      	b.n	1a5a4 <bt_conn_send_cb+0x40>
			BT_ERR("Unable to allocate TX context");
   1a5f6:	4b2a      	ldr	r3, [pc, #168]	; (1a6a0 <bt_conn_send_cb+0x13c>)
   1a5f8:	930c      	str	r3, [sp, #48]	; 0x30
   1a5fa:	2300      	movs	r3, #0
   1a5fc:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a600:	f88d 3007 	strb.w	r3, [sp, #7]
   1a604:	2202      	movs	r2, #2
   1a606:	f88d 2004 	strb.w	r2, [sp, #4]
   1a60a:	f88d 3006 	strb.w	r3, [sp, #6]
   1a60e:	9a01      	ldr	r2, [sp, #4]
   1a610:	920b      	str	r2, [sp, #44]	; 0x2c
   1a612:	461a      	mov	r2, r3
   1a614:	f363 0200 	bfi	r2, r3, #0, #1
   1a618:	f363 0241 	bfi	r2, r3, #1, #1
   1a61c:	f363 0282 	bfi	r2, r3, #2, #1
   1a620:	f363 02c5 	bfi	r2, r3, #3, #3
   1a624:	2101      	movs	r1, #1
   1a626:	f361 1288 	bfi	r2, r1, #6, #3
   1a62a:	2108      	movs	r1, #8
   1a62c:	f361 2252 	bfi	r2, r1, #9, #10
   1a630:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a634:	4919      	ldr	r1, [pc, #100]	; (1a69c <bt_conn_send_cb+0x138>)
   1a636:	a808      	add	r0, sp, #32
   1a638:	f009 fc88 	bl	23f4c <z_log_msg2_finalize>
			return -ENOBUFS;
   1a63c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a640:	e7b0      	b.n	1a5a4 <bt_conn_send_cb+0x40>
			BT_WARN("Disconnected while allocating context");
   1a642:	4b18      	ldr	r3, [pc, #96]	; (1a6a4 <bt_conn_send_cb+0x140>)
   1a644:	9306      	str	r3, [sp, #24]
   1a646:	2300      	movs	r3, #0
   1a648:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a64c:	f88d 3007 	strb.w	r3, [sp, #7]
   1a650:	2102      	movs	r1, #2
   1a652:	f88d 1004 	strb.w	r1, [sp, #4]
   1a656:	f88d 3006 	strb.w	r3, [sp, #6]
   1a65a:	9a01      	ldr	r2, [sp, #4]
   1a65c:	9205      	str	r2, [sp, #20]
   1a65e:	461a      	mov	r2, r3
   1a660:	f363 0200 	bfi	r2, r3, #0, #1
   1a664:	f363 0241 	bfi	r2, r3, #1, #1
   1a668:	f363 0282 	bfi	r2, r3, #2, #1
   1a66c:	f363 02c5 	bfi	r2, r3, #3, #3
   1a670:	f361 1288 	bfi	r2, r1, #6, #3
   1a674:	2108      	movs	r1, #8
   1a676:	f361 2252 	bfi	r2, r1, #9, #10
   1a67a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a67e:	4907      	ldr	r1, [pc, #28]	; (1a69c <bt_conn_send_cb+0x138>)
   1a680:	a802      	add	r0, sp, #8
   1a682:	f009 fc63 	bl	23f4c <z_log_msg2_finalize>
			tx_free(tx);
   1a686:	4640      	mov	r0, r8
   1a688:	f7ff fd0a 	bl	1a0a0 <tx_free>
			return -ENOTCONN;
   1a68c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a690:	e788      	b.n	1a5a4 <bt_conn_send_cb+0x40>
		tx_data(buf)->tx = NULL;
   1a692:	2300      	movs	r3, #0
   1a694:	614b      	str	r3, [r1, #20]
   1a696:	e77f      	b.n	1a598 <bt_conn_send_cb+0x34>
   1a698:	0002a044 	.word	0x0002a044
   1a69c:	00028894 	.word	0x00028894
   1a6a0:	0002a054 	.word	0x0002a054
   1a6a4:	0002a074 	.word	0x0002a074

0001a6a8 <bt_conn_prepare_events>:
{
   1a6a8:	b570      	push	{r4, r5, r6, lr}
   1a6aa:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   1a6ac:	4b0d      	ldr	r3, [pc, #52]	; (1a6e4 <bt_conn_prepare_events+0x3c>)
   1a6ae:	2400      	movs	r4, #0
   1a6b0:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1a6b2:	4622      	mov	r2, r4
   1a6b4:	2101      	movs	r1, #1
   1a6b6:	f00d fe9f 	bl	283f8 <k_poll_event_init>
   1a6ba:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a6bc:	2c00      	cmp	r4, #0
   1a6be:	dd01      	ble.n	1a6c4 <bt_conn_prepare_events+0x1c>
}
   1a6c0:	4628      	mov	r0, r5
   1a6c2:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   1a6c4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1a6c8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1a6cc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   1a6d0:	4b05      	ldr	r3, [pc, #20]	; (1a6e8 <bt_conn_prepare_events+0x40>)
   1a6d2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1a6d6:	f00a fabc 	bl	24c52 <conn_prepare_events>
   1a6da:	b900      	cbnz	r0, 1a6de <bt_conn_prepare_events+0x36>
			ev_count++;
   1a6dc:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1a6de:	3401      	adds	r4, #1
   1a6e0:	e7ec      	b.n	1a6bc <bt_conn_prepare_events+0x14>
   1a6e2:	bf00      	nop
   1a6e4:	200005d4 	.word	0x200005d4
   1a6e8:	200018c0 	.word	0x200018c0

0001a6ec <bt_conn_lookup_handle>:
{
   1a6ec:	b508      	push	{r3, lr}
   1a6ee:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1a6f0:	2101      	movs	r1, #1
   1a6f2:	4802      	ldr	r0, [pc, #8]	; (1a6fc <bt_conn_lookup_handle+0x10>)
   1a6f4:	f00a fb32 	bl	24d5c <conn_lookup_handle>
}
   1a6f8:	bd08      	pop	{r3, pc}
   1a6fa:	bf00      	nop
   1a6fc:	200018c0 	.word	0x200018c0

0001a700 <bt_conn_set_state>:
{
   1a700:	b570      	push	{r4, r5, r6, lr}
   1a702:	b092      	sub	sp, #72	; 0x48
   1a704:	460d      	mov	r5, r1
	if (conn->state == state) {
   1a706:	7a86      	ldrb	r6, [r0, #10]
   1a708:	428e      	cmp	r6, r1
   1a70a:	d010      	beq.n	1a72e <bt_conn_set_state+0x2e>
   1a70c:	4604      	mov	r4, r0
	conn->state = state;
   1a70e:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1a710:	b916      	cbnz	r6, 1a718 <bt_conn_set_state+0x18>
		if (conn->type != BT_CONN_TYPE_ISO) {
   1a712:	7883      	ldrb	r3, [r0, #2]
   1a714:	2b08      	cmp	r3, #8
   1a716:	d131      	bne.n	1a77c <bt_conn_set_state+0x7c>
	switch (conn->state) {
   1a718:	7aa3      	ldrb	r3, [r4, #10]
   1a71a:	2b08      	cmp	r3, #8
   1a71c:	f200 80c9 	bhi.w	1a8b2 <bt_conn_set_state+0x1b2>
   1a720:	e8df f003 	tbb	[pc, r3]
   1a724:	c5c5c24a 	.word	0xc5c5c24a
   1a728:	2fc5c5c5 	.word	0x2fc5c5c5
   1a72c:	c5          	.byte	0xc5
   1a72d:	00          	.byte	0x00
	switch (state) {
   1a72e:	2908      	cmp	r1, #8
   1a730:	d820      	bhi.n	1a774 <bt_conn_set_state+0x74>
   1a732:	e8df f001 	tbb	[pc, r1]
   1a736:	2105      	.short	0x2105
   1a738:	13151711 	.word	0x13151711
   1a73c:	1b19      	.short	0x1b19
   1a73e:	1d          	.byte	0x1d
   1a73f:	00          	.byte	0x00
	if (conn->state == state) {
   1a740:	4b6e      	ldr	r3, [pc, #440]	; (1a8fc <bt_conn_set_state+0x1fc>)
		BT_WARN("no transition %s", state2str(state));
   1a742:	9302      	str	r3, [sp, #8]
   1a744:	4b6e      	ldr	r3, [pc, #440]	; (1a900 <bt_conn_set_state+0x200>)
   1a746:	9301      	str	r3, [sp, #4]
   1a748:	2000      	movs	r0, #0
   1a74a:	9000      	str	r0, [sp, #0]
   1a74c:	4603      	mov	r3, r0
   1a74e:	2202      	movs	r2, #2
   1a750:	496c      	ldr	r1, [pc, #432]	; (1a904 <bt_conn_set_state+0x204>)
   1a752:	f00a f9e7 	bl	24b24 <z_log_msg2_runtime_create>
		return;
   1a756:	e0aa      	b.n	1a8ae <bt_conn_set_state+0x1ae>
		return "connect-scan";
   1a758:	4b6b      	ldr	r3, [pc, #428]	; (1a908 <bt_conn_set_state+0x208>)
   1a75a:	e7f2      	b.n	1a742 <bt_conn_set_state+0x42>
		return "connect-dir-adv";
   1a75c:	4b6b      	ldr	r3, [pc, #428]	; (1a90c <bt_conn_set_state+0x20c>)
   1a75e:	e7f0      	b.n	1a742 <bt_conn_set_state+0x42>
		return "connect-adv";
   1a760:	4b6b      	ldr	r3, [pc, #428]	; (1a910 <bt_conn_set_state+0x210>)
   1a762:	e7ee      	b.n	1a742 <bt_conn_set_state+0x42>
		return "connect-auto";
   1a764:	4b6b      	ldr	r3, [pc, #428]	; (1a914 <bt_conn_set_state+0x214>)
   1a766:	e7ec      	b.n	1a742 <bt_conn_set_state+0x42>
		return "connect";
   1a768:	4b6b      	ldr	r3, [pc, #428]	; (1a918 <bt_conn_set_state+0x218>)
   1a76a:	e7ea      	b.n	1a742 <bt_conn_set_state+0x42>
		return "connected";
   1a76c:	4b6b      	ldr	r3, [pc, #428]	; (1a91c <bt_conn_set_state+0x21c>)
   1a76e:	e7e8      	b.n	1a742 <bt_conn_set_state+0x42>
		return "disconnect";
   1a770:	4b6b      	ldr	r3, [pc, #428]	; (1a920 <bt_conn_set_state+0x220>)
   1a772:	e7e6      	b.n	1a742 <bt_conn_set_state+0x42>
		return "(unknown)";
   1a774:	4b6b      	ldr	r3, [pc, #428]	; (1a924 <bt_conn_set_state+0x224>)
   1a776:	e7e4      	b.n	1a742 <bt_conn_set_state+0x42>
		return "disconnect-complete";
   1a778:	4b6b      	ldr	r3, [pc, #428]	; (1a928 <bt_conn_set_state+0x228>)
   1a77a:	e7e2      	b.n	1a742 <bt_conn_set_state+0x42>
			bt_conn_ref(conn);
   1a77c:	f00a faaa 	bl	24cd4 <bt_conn_ref>
   1a780:	e7ca      	b.n	1a718 <bt_conn_set_state+0x18>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a782:	78a3      	ldrb	r3, [r4, #2]
   1a784:	2b04      	cmp	r3, #4
   1a786:	f000 8092 	beq.w	1a8ae <bt_conn_set_state+0x1ae>
		k_fifo_init(&conn->tx_queue);
   1a78a:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   1a78e:	f00d fa15 	bl	27bbc <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1a792:	2100      	movs	r1, #0
   1a794:	4865      	ldr	r0, [pc, #404]	; (1a92c <bt_conn_set_state+0x22c>)
   1a796:	f007 fee5 	bl	22564 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1a79a:	2300      	movs	r3, #0
   1a79c:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   1a79e:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   1a7a0:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1a7a2:	2b01      	cmp	r3, #1
   1a7a4:	f040 8083 	bne.w	1a8ae <bt_conn_set_state+0x1ae>
			k_work_schedule(&conn->deferred_work,
   1a7a8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   1a7ac:	2300      	movs	r3, #0
   1a7ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a7b2:	f006 fe8b 	bl	214cc <k_work_schedule>
   1a7b6:	e07a      	b.n	1a8ae <bt_conn_set_state+0x1ae>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1a7b8:	78a3      	ldrb	r3, [r4, #2]
   1a7ba:	2b04      	cmp	r3, #4
   1a7bc:	d008      	beq.n	1a7d0 <bt_conn_set_state+0xd0>
		switch (old_state) {
   1a7be:	2e08      	cmp	r6, #8
   1a7c0:	d875      	bhi.n	1a8ae <bt_conn_set_state+0x1ae>
   1a7c2:	e8df f006 	tbb	[pc, r6]
   1a7c6:	094c      	.short	0x094c
   1a7c8:	3a484430 	.word	0x3a484430
   1a7cc:	4c26      	.short	0x4c26
   1a7ce:	4c          	.byte	0x4c
   1a7cf:	00          	.byte	0x00
			bt_conn_unref(conn);
   1a7d0:	4620      	mov	r0, r4
   1a7d2:	f00a faa6 	bl	24d22 <bt_conn_unref>
			break;
   1a7d6:	e06a      	b.n	1a8ae <bt_conn_set_state+0x1ae>
			tx_notify(conn);
   1a7d8:	4620      	mov	r0, r4
   1a7da:	f00a f979 	bl	24ad0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1a7de:	78a3      	ldrb	r3, [r4, #2]
   1a7e0:	2b01      	cmp	r3, #1
   1a7e2:	d011      	beq.n	1a808 <bt_conn_set_state+0x108>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   1a7e4:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a7e6:	f3bf 8f5b 	dmb	ish
   1a7ea:	e854 3f00 	ldrex	r3, [r4]
   1a7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1a7f2:	e844 3200 	strex	r2, r3, [r4]
   1a7f6:	2a00      	cmp	r2, #0
   1a7f8:	d1f7      	bne.n	1a7ea <bt_conn_set_state+0xea>
   1a7fa:	f3bf 8f5b 	dmb	ish
   1a7fe:	2100      	movs	r1, #0
   1a800:	484a      	ldr	r0, [pc, #296]	; (1a92c <bt_conn_set_state+0x22c>)
   1a802:	f007 feaf 	bl	22564 <z_impl_k_poll_signal_raise>
   1a806:	e052      	b.n	1a8ae <bt_conn_set_state+0x1ae>
				k_work_cancel_delayable(&conn->deferred_work);
   1a808:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1a80c:	f00d fb30 	bl	27e70 <k_work_cancel_delayable>
   1a810:	e7e8      	b.n	1a7e4 <bt_conn_set_state+0xe4>
			if (conn->err) {
   1a812:	7a63      	ldrb	r3, [r4, #9]
   1a814:	b91b      	cbnz	r3, 1a81e <bt_conn_set_state+0x11e>
			bt_conn_unref(conn);
   1a816:	4620      	mov	r0, r4
   1a818:	f00a fa83 	bl	24d22 <bt_conn_unref>
			break;
   1a81c:	e047      	b.n	1a8ae <bt_conn_set_state+0x1ae>
				notify_connected(conn);
   1a81e:	4620      	mov	r0, r4
   1a820:	f7ff fc62 	bl	1a0e8 <notify_connected>
   1a824:	e7f7      	b.n	1a816 <bt_conn_set_state+0x116>
			if (conn->err) {
   1a826:	7a63      	ldrb	r3, [r4, #9]
   1a828:	b91b      	cbnz	r3, 1a832 <bt_conn_set_state+0x132>
			bt_conn_unref(conn);
   1a82a:	4620      	mov	r0, r4
   1a82c:	f00a fa79 	bl	24d22 <bt_conn_unref>
			break;
   1a830:	e03d      	b.n	1a8ae <bt_conn_set_state+0x1ae>
				notify_connected(conn);
   1a832:	4620      	mov	r0, r4
   1a834:	f7ff fc58 	bl	1a0e8 <notify_connected>
   1a838:	e7f7      	b.n	1a82a <bt_conn_set_state+0x12a>
			if (conn->err) {
   1a83a:	7a63      	ldrb	r3, [r4, #9]
   1a83c:	b91b      	cbnz	r3, 1a846 <bt_conn_set_state+0x146>
			bt_conn_unref(conn);
   1a83e:	4620      	mov	r0, r4
   1a840:	f00a fa6f 	bl	24d22 <bt_conn_unref>
			break;
   1a844:	e033      	b.n	1a8ae <bt_conn_set_state+0x1ae>
				notify_connected(conn);
   1a846:	4620      	mov	r0, r4
   1a848:	f7ff fc4e 	bl	1a0e8 <notify_connected>
   1a84c:	e7f7      	b.n	1a83e <bt_conn_set_state+0x13e>
			bt_conn_unref(conn);
   1a84e:	4620      	mov	r0, r4
   1a850:	f00a fa67 	bl	24d22 <bt_conn_unref>
			break;
   1a854:	e02b      	b.n	1a8ae <bt_conn_set_state+0x1ae>
			bt_conn_unref(conn);
   1a856:	4620      	mov	r0, r4
   1a858:	f00a fa63 	bl	24d22 <bt_conn_unref>
			break;
   1a85c:	e027      	b.n	1a8ae <bt_conn_set_state+0x1ae>
			BT_WARN("Invalid (%u) old state", state);
   1a85e:	4b34      	ldr	r3, [pc, #208]	; (1a930 <bt_conn_set_state+0x230>)
   1a860:	930a      	str	r3, [sp, #40]	; 0x28
   1a862:	950b      	str	r5, [sp, #44]	; 0x2c
   1a864:	2300      	movs	r3, #0
   1a866:	f8ad 3015 	strh.w	r3, [sp, #21]
   1a86a:	f88d 3017 	strb.w	r3, [sp, #23]
   1a86e:	2203      	movs	r2, #3
   1a870:	f88d 2014 	strb.w	r2, [sp, #20]
   1a874:	f88d 3016 	strb.w	r3, [sp, #22]
   1a878:	9a05      	ldr	r2, [sp, #20]
   1a87a:	9209      	str	r2, [sp, #36]	; 0x24
   1a87c:	461a      	mov	r2, r3
   1a87e:	f363 0200 	bfi	r2, r3, #0, #1
   1a882:	f363 0241 	bfi	r2, r3, #1, #1
   1a886:	f363 0282 	bfi	r2, r3, #2, #1
   1a88a:	f363 02c5 	bfi	r2, r3, #3, #3
   1a88e:	2102      	movs	r1, #2
   1a890:	f361 1288 	bfi	r2, r1, #6, #3
   1a894:	210c      	movs	r1, #12
   1a896:	f361 2252 	bfi	r2, r1, #9, #10
   1a89a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a89e:	4919      	ldr	r1, [pc, #100]	; (1a904 <bt_conn_set_state+0x204>)
   1a8a0:	a806      	add	r0, sp, #24
   1a8a2:	f009 fb53 	bl	23f4c <z_log_msg2_finalize>
			break;
   1a8a6:	e002      	b.n	1a8ae <bt_conn_set_state+0x1ae>
		process_unack_tx(conn);
   1a8a8:	4620      	mov	r0, r4
   1a8aa:	f00a f96a 	bl	24b82 <process_unack_tx>
}
   1a8ae:	b012      	add	sp, #72	; 0x48
   1a8b0:	bd70      	pop	{r4, r5, r6, pc}
		BT_WARN("no valid (%u) state was set", state);
   1a8b2:	4b20      	ldr	r3, [pc, #128]	; (1a934 <bt_conn_set_state+0x234>)
   1a8b4:	9310      	str	r3, [sp, #64]	; 0x40
   1a8b6:	9511      	str	r5, [sp, #68]	; 0x44
   1a8b8:	2300      	movs	r3, #0
   1a8ba:	f8ad 3015 	strh.w	r3, [sp, #21]
   1a8be:	f88d 3017 	strb.w	r3, [sp, #23]
   1a8c2:	2203      	movs	r2, #3
   1a8c4:	f88d 2014 	strb.w	r2, [sp, #20]
   1a8c8:	f88d 3016 	strb.w	r3, [sp, #22]
   1a8cc:	9a05      	ldr	r2, [sp, #20]
   1a8ce:	920f      	str	r2, [sp, #60]	; 0x3c
   1a8d0:	461a      	mov	r2, r3
   1a8d2:	f363 0200 	bfi	r2, r3, #0, #1
   1a8d6:	f363 0241 	bfi	r2, r3, #1, #1
   1a8da:	f363 0282 	bfi	r2, r3, #2, #1
   1a8de:	f363 02c5 	bfi	r2, r3, #3, #3
   1a8e2:	2102      	movs	r1, #2
   1a8e4:	f361 1288 	bfi	r2, r1, #6, #3
   1a8e8:	210c      	movs	r1, #12
   1a8ea:	f361 2252 	bfi	r2, r1, #9, #10
   1a8ee:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a8f2:	4904      	ldr	r1, [pc, #16]	; (1a904 <bt_conn_set_state+0x204>)
   1a8f4:	a80c      	add	r0, sp, #48	; 0x30
   1a8f6:	f009 fb29 	bl	23f4c <z_log_msg2_finalize>
		break;
   1a8fa:	e7d8      	b.n	1a8ae <bt_conn_set_state+0x1ae>
   1a8fc:	0002a10c 	.word	0x0002a10c
   1a900:	0002a11c 	.word	0x0002a11c
   1a904:	00028894 	.word	0x00028894
   1a908:	0002a0bc 	.word	0x0002a0bc
   1a90c:	0002a0cc 	.word	0x0002a0cc
   1a910:	0002a0dc 	.word	0x0002a0dc
   1a914:	0002a0e8 	.word	0x0002a0e8
   1a918:	0002a0f8 	.word	0x0002a0f8
   1a91c:	0002a3b4 	.word	0x0002a3b4
   1a920:	0002a100 	.word	0x0002a100
   1a924:	0002a09c 	.word	0x0002a09c
   1a928:	0002a0a8 	.word	0x0002a0a8
   1a92c:	200005d4 	.word	0x200005d4
   1a930:	0002a130 	.word	0x0002a130
   1a934:	0002a148 	.word	0x0002a148

0001a938 <bt_conn_index>:
		index = conn - acl_conns;
   1a938:	4b03      	ldr	r3, [pc, #12]	; (1a948 <bt_conn_index+0x10>)
   1a93a:	1ac0      	subs	r0, r0, r3
   1a93c:	1180      	asrs	r0, r0, #6
   1a93e:	4b03      	ldr	r3, [pc, #12]	; (1a94c <bt_conn_index+0x14>)
   1a940:	fb03 f000 	mul.w	r0, r3, r0
}
   1a944:	b2c0      	uxtb	r0, r0
   1a946:	4770      	bx	lr
   1a948:	200018c0 	.word	0x200018c0
   1a94c:	aaaaaaab 	.word	0xaaaaaaab

0001a950 <bt_conn_create_pdu_timeout>:
{
   1a950:	b530      	push	{r4, r5, lr}
   1a952:	b089      	sub	sp, #36	; 0x24
   1a954:	460c      	mov	r4, r1
	if (!pool) {
   1a956:	4601      	mov	r1, r0
   1a958:	b158      	cbz	r0, 1a972 <bt_conn_create_pdu_timeout+0x22>
	return net_buf_alloc_fixed(pool, timeout);
   1a95a:	4608      	mov	r0, r1
   1a95c:	f00b fde3 	bl	26526 <net_buf_alloc_fixed>
	if (!buf) {
   1a960:	4605      	mov	r5, r0
   1a962:	b140      	cbz	r0, 1a976 <bt_conn_create_pdu_timeout+0x26>
	net_buf_simple_reserve(&buf->b, reserve);
   1a964:	1d21      	adds	r1, r4, #4
   1a966:	3008      	adds	r0, #8
   1a968:	f00b fdff 	bl	2656a <net_buf_simple_reserve>
}
   1a96c:	4628      	mov	r0, r5
   1a96e:	b009      	add	sp, #36	; 0x24
   1a970:	bd30      	pop	{r4, r5, pc}
		pool = &acl_tx_pool;
   1a972:	4912      	ldr	r1, [pc, #72]	; (1a9bc <bt_conn_create_pdu_timeout+0x6c>)
   1a974:	e7f1      	b.n	1a95a <bt_conn_create_pdu_timeout+0xa>
		BT_WARN("Unable to allocate buffer within timeout");
   1a976:	4b12      	ldr	r3, [pc, #72]	; (1a9c0 <bt_conn_create_pdu_timeout+0x70>)
   1a978:	9306      	str	r3, [sp, #24]
   1a97a:	2300      	movs	r3, #0
   1a97c:	f8ad 3005 	strh.w	r3, [sp, #5]
   1a980:	f88d 3007 	strb.w	r3, [sp, #7]
   1a984:	2102      	movs	r1, #2
   1a986:	f88d 1004 	strb.w	r1, [sp, #4]
   1a98a:	f88d 3006 	strb.w	r3, [sp, #6]
   1a98e:	9a01      	ldr	r2, [sp, #4]
   1a990:	9205      	str	r2, [sp, #20]
   1a992:	461a      	mov	r2, r3
   1a994:	f363 0200 	bfi	r2, r3, #0, #1
   1a998:	f363 0241 	bfi	r2, r3, #1, #1
   1a99c:	f363 0282 	bfi	r2, r3, #2, #1
   1a9a0:	f363 02c5 	bfi	r2, r3, #3, #3
   1a9a4:	f361 1288 	bfi	r2, r1, #6, #3
   1a9a8:	2108      	movs	r1, #8
   1a9aa:	f361 2252 	bfi	r2, r1, #9, #10
   1a9ae:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1a9b2:	4904      	ldr	r1, [pc, #16]	; (1a9c4 <bt_conn_create_pdu_timeout+0x74>)
   1a9b4:	a802      	add	r0, sp, #8
   1a9b6:	f009 fac9 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1a9ba:	e7d7      	b.n	1a96c <bt_conn_create_pdu_timeout+0x1c>
   1a9bc:	200008c8 	.word	0x200008c8
   1a9c0:	0002a164 	.word	0x0002a164
   1a9c4:	00028894 	.word	0x00028894

0001a9c8 <notify_le_param_updated>:
{
   1a9c8:	b570      	push	{r4, r5, r6, lr}
   1a9ca:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a9cc:	f3bf 8f5b 	dmb	ish
   1a9d0:	6843      	ldr	r3, [r0, #4]
   1a9d2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a9d6:	f413 7f00 	tst.w	r3, #512	; 0x200
   1a9da:	d010      	beq.n	1a9fe <notify_le_param_updated+0x36>
   1a9dc:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   1a9de:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   1a9e2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1a9e6:	428b      	cmp	r3, r1
   1a9e8:	d309      	bcc.n	1a9fe <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   1a9ea:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   1a9ee:	428b      	cmp	r3, r1
   1a9f0:	d805      	bhi.n	1a9fe <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   1a9f2:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   1a9f6:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   1a9fa:	4299      	cmp	r1, r3
   1a9fc:	d002      	beq.n	1aa04 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a9fe:	4b18      	ldr	r3, [pc, #96]	; (1aa60 <notify_le_param_updated+0x98>)
   1aa00:	681d      	ldr	r5, [r3, #0]
   1aa02:	e00d      	b.n	1aa20 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1aa04:	f3bf 8f5b 	dmb	ish
   1aa08:	e852 3f00 	ldrex	r3, [r2]
   1aa0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1aa10:	e842 3100 	strex	r1, r3, [r2]
   1aa14:	2900      	cmp	r1, #0
   1aa16:	d1f7      	bne.n	1aa08 <notify_le_param_updated+0x40>
   1aa18:	f3bf 8f5b 	dmb	ish
}
   1aa1c:	e7ef      	b.n	1a9fe <notify_le_param_updated+0x36>
   1aa1e:	692d      	ldr	r5, [r5, #16]
   1aa20:	b15d      	cbz	r5, 1aa3a <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   1aa22:	68ee      	ldr	r6, [r5, #12]
   1aa24:	2e00      	cmp	r6, #0
   1aa26:	d0fa      	beq.n	1aa1e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   1aa28:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1aa2c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1aa30:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1aa34:	4620      	mov	r0, r4
   1aa36:	47b0      	blx	r6
   1aa38:	e7f1      	b.n	1aa1e <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1aa3a:	4d0a      	ldr	r5, [pc, #40]	; (1aa64 <notify_le_param_updated+0x9c>)
   1aa3c:	e000      	b.n	1aa40 <notify_le_param_updated+0x78>
   1aa3e:	3514      	adds	r5, #20
   1aa40:	4b09      	ldr	r3, [pc, #36]	; (1aa68 <notify_le_param_updated+0xa0>)
   1aa42:	429d      	cmp	r5, r3
   1aa44:	d20b      	bcs.n	1aa5e <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   1aa46:	68ee      	ldr	r6, [r5, #12]
   1aa48:	2e00      	cmp	r6, #0
   1aa4a:	d0f8      	beq.n	1aa3e <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   1aa4c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1aa50:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   1aa54:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   1aa58:	4620      	mov	r0, r4
   1aa5a:	47b0      	blx	r6
   1aa5c:	e7ef      	b.n	1aa3e <notify_le_param_updated+0x76>
}
   1aa5e:	bd70      	pop	{r4, r5, r6, pc}
   1aa60:	20002aa0 	.word	0x20002aa0
   1aa64:	00028848 	.word	0x00028848
   1aa68:	0002885c 	.word	0x0002885c

0001aa6c <le_param_req>:
{
   1aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aa6e:	4606      	mov	r6, r0
   1aa70:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1aa72:	4608      	mov	r0, r1
   1aa74:	f009 fd79 	bl	2456a <bt_le_conn_params_valid>
   1aa78:	4607      	mov	r7, r0
   1aa7a:	b338      	cbz	r0, 1aacc <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1aa7c:	4b15      	ldr	r3, [pc, #84]	; (1aad4 <le_param_req+0x68>)
   1aa7e:	681c      	ldr	r4, [r3, #0]
   1aa80:	e000      	b.n	1aa84 <le_param_req+0x18>
   1aa82:	6924      	ldr	r4, [r4, #16]
   1aa84:	b16c      	cbz	r4, 1aaa2 <le_param_req+0x36>
		if (!cb->le_param_req) {
   1aa86:	68a3      	ldr	r3, [r4, #8]
   1aa88:	2b00      	cmp	r3, #0
   1aa8a:	d0fa      	beq.n	1aa82 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1aa8c:	4629      	mov	r1, r5
   1aa8e:	4630      	mov	r0, r6
   1aa90:	4798      	blx	r3
   1aa92:	b1d0      	cbz	r0, 1aaca <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1aa94:	4628      	mov	r0, r5
   1aa96:	f009 fd68 	bl	2456a <bt_le_conn_params_valid>
   1aa9a:	2800      	cmp	r0, #0
   1aa9c:	d1f1      	bne.n	1aa82 <le_param_req+0x16>
			return false;
   1aa9e:	4607      	mov	r7, r0
   1aaa0:	e014      	b.n	1aacc <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1aaa2:	4c0d      	ldr	r4, [pc, #52]	; (1aad8 <le_param_req+0x6c>)
   1aaa4:	e000      	b.n	1aaa8 <le_param_req+0x3c>
   1aaa6:	3414      	adds	r4, #20
   1aaa8:	4b0c      	ldr	r3, [pc, #48]	; (1aadc <le_param_req+0x70>)
   1aaaa:	429c      	cmp	r4, r3
   1aaac:	d20e      	bcs.n	1aacc <le_param_req+0x60>
		if (!cb->le_param_req) {
   1aaae:	68a3      	ldr	r3, [r4, #8]
   1aab0:	2b00      	cmp	r3, #0
   1aab2:	d0f8      	beq.n	1aaa6 <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1aab4:	4629      	mov	r1, r5
   1aab6:	4630      	mov	r0, r6
   1aab8:	4798      	blx	r3
   1aaba:	b148      	cbz	r0, 1aad0 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   1aabc:	4628      	mov	r0, r5
   1aabe:	f009 fd54 	bl	2456a <bt_le_conn_params_valid>
   1aac2:	2800      	cmp	r0, #0
   1aac4:	d1ef      	bne.n	1aaa6 <le_param_req+0x3a>
			return false;
   1aac6:	4607      	mov	r7, r0
   1aac8:	e000      	b.n	1aacc <le_param_req+0x60>
			return false;
   1aaca:	4607      	mov	r7, r0
}
   1aacc:	4638      	mov	r0, r7
   1aace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   1aad0:	4607      	mov	r7, r0
   1aad2:	e7fb      	b.n	1aacc <le_param_req+0x60>
   1aad4:	20002aa0 	.word	0x20002aa0
   1aad8:	00028848 	.word	0x00028848
   1aadc:	0002885c 	.word	0x0002885c

0001aae0 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1aae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aae2:	4607      	mov	r7, r0
   1aae4:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1aae6:	2400      	movs	r4, #0
   1aae8:	2c00      	cmp	r4, #0
   1aaea:	dd02      	ble.n	1aaf2 <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   1aaec:	2500      	movs	r5, #0
}
   1aaee:	4628      	mov	r0, r5
   1aaf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1aaf2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1aaf6:	480c      	ldr	r0, [pc, #48]	; (1ab28 <bt_conn_lookup_addr_le+0x48>)
   1aaf8:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1aafc:	f00a f8ea 	bl	24cd4 <bt_conn_ref>
		if (!conn) {
   1ab00:	4605      	mov	r5, r0
   1ab02:	b170      	cbz	r0, 1ab22 <bt_conn_lookup_addr_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
   1ab04:	7883      	ldrb	r3, [r0, #2]
   1ab06:	2b01      	cmp	r3, #1
   1ab08:	d109      	bne.n	1ab1e <bt_conn_lookup_addr_le+0x3e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1ab0a:	4632      	mov	r2, r6
   1ab0c:	4639      	mov	r1, r7
   1ab0e:	f00a f976 	bl	24dfe <bt_conn_is_peer_addr_le>
   1ab12:	2800      	cmp	r0, #0
   1ab14:	d1eb      	bne.n	1aaee <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   1ab16:	4628      	mov	r0, r5
   1ab18:	f00a f903 	bl	24d22 <bt_conn_unref>
			continue;
   1ab1c:	e001      	b.n	1ab22 <bt_conn_lookup_addr_le+0x42>
			bt_conn_unref(conn);
   1ab1e:	f00a f900 	bl	24d22 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1ab22:	3401      	adds	r4, #1
   1ab24:	e7e0      	b.n	1aae8 <bt_conn_lookup_addr_le+0x8>
   1ab26:	bf00      	nop
   1ab28:	200018c0 	.word	0x200018c0

0001ab2c <bt_conn_exists_le>:
{
   1ab2c:	b510      	push	{r4, lr}
   1ab2e:	b084      	sub	sp, #16
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1ab30:	f7ff ffd6 	bl	1aae0 <bt_conn_lookup_addr_le>
	if (conn) {
   1ab34:	b910      	cbnz	r0, 1ab3c <bt_conn_exists_le+0x10>
	return false;
   1ab36:	2000      	movs	r0, #0
}
   1ab38:	b004      	add	sp, #16
   1ab3a:	bd10      	pop	{r4, pc}
   1ab3c:	4604      	mov	r4, r0
		BT_WARN("Found valid connection in %s state",
   1ab3e:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   1ab40:	2b08      	cmp	r3, #8
   1ab42:	d824      	bhi.n	1ab8e <bt_conn_exists_le+0x62>
   1ab44:	e8df f003 	tbb	[pc, r3]
   1ab48:	1b152505 	.word	0x1b152505
   1ab4c:	1f1d1719 	.word	0x1f1d1719
   1ab50:	21          	.byte	0x21
   1ab51:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   1ab52:	4b11      	ldr	r3, [pc, #68]	; (1ab98 <bt_conn_exists_le+0x6c>)
   1ab54:	9302      	str	r3, [sp, #8]
   1ab56:	4b11      	ldr	r3, [pc, #68]	; (1ab9c <bt_conn_exists_le+0x70>)
   1ab58:	9301      	str	r3, [sp, #4]
   1ab5a:	2000      	movs	r0, #0
   1ab5c:	9000      	str	r0, [sp, #0]
   1ab5e:	4603      	mov	r3, r0
   1ab60:	2202      	movs	r2, #2
   1ab62:	490f      	ldr	r1, [pc, #60]	; (1aba0 <bt_conn_exists_le+0x74>)
   1ab64:	f009 ffde 	bl	24b24 <z_log_msg2_runtime_create>
		bt_conn_unref(conn);
   1ab68:	4620      	mov	r0, r4
   1ab6a:	f00a f8da 	bl	24d22 <bt_conn_unref>
		return true;
   1ab6e:	2001      	movs	r0, #1
   1ab70:	e7e2      	b.n	1ab38 <bt_conn_exists_le+0xc>
		return "connect-scan";
   1ab72:	4b0c      	ldr	r3, [pc, #48]	; (1aba4 <bt_conn_exists_le+0x78>)
   1ab74:	e7ee      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "connect-dir-adv";
   1ab76:	4b0c      	ldr	r3, [pc, #48]	; (1aba8 <bt_conn_exists_le+0x7c>)
   1ab78:	e7ec      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "connect-adv";
   1ab7a:	4b0c      	ldr	r3, [pc, #48]	; (1abac <bt_conn_exists_le+0x80>)
   1ab7c:	e7ea      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "connect-auto";
   1ab7e:	4b0c      	ldr	r3, [pc, #48]	; (1abb0 <bt_conn_exists_le+0x84>)
   1ab80:	e7e8      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "connect";
   1ab82:	4b0c      	ldr	r3, [pc, #48]	; (1abb4 <bt_conn_exists_le+0x88>)
   1ab84:	e7e6      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "connected";
   1ab86:	4b0c      	ldr	r3, [pc, #48]	; (1abb8 <bt_conn_exists_le+0x8c>)
   1ab88:	e7e4      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "disconnect";
   1ab8a:	4b0c      	ldr	r3, [pc, #48]	; (1abbc <bt_conn_exists_le+0x90>)
   1ab8c:	e7e2      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "(unknown)";
   1ab8e:	4b0c      	ldr	r3, [pc, #48]	; (1abc0 <bt_conn_exists_le+0x94>)
   1ab90:	e7e0      	b.n	1ab54 <bt_conn_exists_le+0x28>
		return "disconnect-complete";
   1ab92:	4b0c      	ldr	r3, [pc, #48]	; (1abc4 <bt_conn_exists_le+0x98>)
   1ab94:	e7de      	b.n	1ab54 <bt_conn_exists_le+0x28>
   1ab96:	bf00      	nop
   1ab98:	0002a10c 	.word	0x0002a10c
   1ab9c:	0002a190 	.word	0x0002a190
   1aba0:	00028894 	.word	0x00028894
   1aba4:	0002a0bc 	.word	0x0002a0bc
   1aba8:	0002a0cc 	.word	0x0002a0cc
   1abac:	0002a0dc 	.word	0x0002a0dc
   1abb0:	0002a0e8 	.word	0x0002a0e8
   1abb4:	0002a0f8 	.word	0x0002a0f8
   1abb8:	0002a3b4 	.word	0x0002a3b4
   1abbc:	0002a100 	.word	0x0002a100
   1abc0:	0002a09c 	.word	0x0002a09c
   1abc4:	0002a0a8 	.word	0x0002a0a8

0001abc8 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1abc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abcc:	4607      	mov	r7, r0
   1abce:	460e      	mov	r6, r1
   1abd0:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1abd2:	2400      	movs	r4, #0
   1abd4:	2c00      	cmp	r4, #0
   1abd6:	dd03      	ble.n	1abe0 <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   1abd8:	2500      	movs	r5, #0
}
   1abda:	4628      	mov	r0, r5
   1abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1abe0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1abe4:	4b10      	ldr	r3, [pc, #64]	; (1ac28 <bt_conn_lookup_state_le+0x60>)
   1abe6:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1abea:	f00a f873 	bl	24cd4 <bt_conn_ref>
		if (!conn) {
   1abee:	4605      	mov	r5, r0
   1abf0:	b188      	cbz	r0, 1ac16 <bt_conn_lookup_state_le+0x4e>
		if (conn->type != BT_CONN_TYPE_LE) {
   1abf2:	7883      	ldrb	r3, [r0, #2]
   1abf4:	2b01      	cmp	r3, #1
   1abf6:	d110      	bne.n	1ac1a <bt_conn_lookup_state_le+0x52>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1abf8:	b126      	cbz	r6, 1ac04 <bt_conn_lookup_state_le+0x3c>
   1abfa:	4632      	mov	r2, r6
   1abfc:	4639      	mov	r1, r7
   1abfe:	f00a f8fe 	bl	24dfe <bt_conn_is_peer_addr_le>
   1ac02:	b168      	cbz	r0, 1ac20 <bt_conn_lookup_state_le+0x58>
		if (!(conn->state == state && conn->id == id)) {
   1ac04:	7aab      	ldrb	r3, [r5, #10]
   1ac06:	4543      	cmp	r3, r8
   1ac08:	d102      	bne.n	1ac10 <bt_conn_lookup_state_le+0x48>
   1ac0a:	7a2b      	ldrb	r3, [r5, #8]
   1ac0c:	42bb      	cmp	r3, r7
   1ac0e:	d0e4      	beq.n	1abda <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   1ac10:	4628      	mov	r0, r5
   1ac12:	f00a f886 	bl	24d22 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1ac16:	3401      	adds	r4, #1
   1ac18:	e7dc      	b.n	1abd4 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   1ac1a:	f00a f882 	bl	24d22 <bt_conn_unref>
			continue;
   1ac1e:	e7fa      	b.n	1ac16 <bt_conn_lookup_state_le+0x4e>
			bt_conn_unref(conn);
   1ac20:	4628      	mov	r0, r5
   1ac22:	f00a f87e 	bl	24d22 <bt_conn_unref>
			continue;
   1ac26:	e7f6      	b.n	1ac16 <bt_conn_lookup_state_le+0x4e>
   1ac28:	200018c0 	.word	0x200018c0

0001ac2c <send_conn_le_param_update>:
{
   1ac2c:	b538      	push	{r3, r4, r5, lr}
   1ac2e:	4604      	mov	r4, r0
   1ac30:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1ac32:	4608      	mov	r0, r1
   1ac34:	f009 fc99 	bl	2456a <bt_le_conn_params_valid>
   1ac38:	b360      	cbz	r0, 1ac94 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1ac3a:	4b18      	ldr	r3, [pc, #96]	; (1ac9c <send_conn_le_param_update+0x70>)
   1ac3c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1ac40:	f013 0f02 	tst.w	r3, #2
   1ac44:	d004      	beq.n	1ac50 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1ac46:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1ac4a:	f013 0f02 	tst.w	r3, #2
   1ac4e:	d113      	bne.n	1ac78 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1ac50:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1ac52:	b9d3      	cbnz	r3, 1ac8a <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   1ac54:	4629      	mov	r1, r5
   1ac56:	4620      	mov	r0, r4
   1ac58:	f00a f8f8 	bl	24e4c <bt_conn_le_conn_update>
		if (rc == 0) {
   1ac5c:	b9c8      	cbnz	r0, 1ac92 <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   1ac5e:	882b      	ldrh	r3, [r5, #0]
   1ac60:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   1ac64:	886b      	ldrh	r3, [r5, #2]
   1ac66:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   1ac6a:	88ab      	ldrh	r3, [r5, #4]
   1ac6c:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   1ac70:	88eb      	ldrh	r3, [r5, #6]
   1ac72:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1ac76:	e00c      	b.n	1ac92 <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac78:	f3bf 8f5b 	dmb	ish
   1ac7c:	6863      	ldr	r3, [r4, #4]
   1ac7e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1ac82:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1ac86:	d1e3      	bne.n	1ac50 <send_conn_le_param_update+0x24>
   1ac88:	e7e4      	b.n	1ac54 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1ac8a:	4629      	mov	r1, r5
   1ac8c:	4620      	mov	r0, r4
   1ac8e:	f00a f9eb 	bl	25068 <bt_l2cap_update_conn_param>
}
   1ac92:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1ac94:	f06f 0015 	mvn.w	r0, #21
   1ac98:	e7fb      	b.n	1ac92 <send_conn_le_param_update+0x66>
   1ac9a:	bf00      	nop
   1ac9c:	200002b0 	.word	0x200002b0

0001aca0 <deferred_work>:
{
   1aca0:	b530      	push	{r4, r5, lr}
   1aca2:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1aca4:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1aca8:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   1acac:	b3b3      	cbz	r3, 1ad1c <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   1acae:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   1acb2:	2b01      	cmp	r3, #1
   1acb4:	d130      	bne.n	1ad18 <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   1acb6:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1acba:	f3bf 8f5b 	dmb	ish
   1acbe:	e855 3f00 	ldrex	r3, [r5]
   1acc2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1acc6:	e845 2100 	strex	r1, r2, [r5]
   1acca:	2900      	cmp	r1, #0
   1accc:	d1f7      	bne.n	1acbe <deferred_work+0x1e>
   1acce:	f3bf 8f5b 	dmb	ish
   1acd2:	f413 7f00 	tst.w	r3, #512	; 0x200
   1acd6:	d02b      	beq.n	1ad30 <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1acd8:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1acdc:	f8ad 3000 	strh.w	r3, [sp]
   1ace0:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   1ace4:	f8ad 3002 	strh.w	r3, [sp, #2]
   1ace8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   1acec:	f8ad 3004 	strh.w	r3, [sp, #4]
   1acf0:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   1acf4:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1acf8:	4669      	mov	r1, sp
   1acfa:	4620      	mov	r0, r4
   1acfc:	f7ff ff96 	bl	1ac2c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ad00:	f3bf 8f5b 	dmb	ish
   1ad04:	e855 3f00 	ldrex	r3, [r5]
   1ad08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1ad0c:	e845 3200 	strex	r2, r3, [r5]
   1ad10:	2a00      	cmp	r2, #0
   1ad12:	d1f7      	bne.n	1ad04 <deferred_work+0x64>
   1ad14:	f3bf 8f5b 	dmb	ish
}
   1ad18:	b005      	add	sp, #20
   1ad1a:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   1ad1c:	4620      	mov	r0, r4
   1ad1e:	f00a f915 	bl	24f4c <bt_l2cap_disconnected>
		notify_disconnected(conn);
   1ad22:	4620      	mov	r0, r4
   1ad24:	f7ff f99a 	bl	1a05c <notify_disconnected>
		bt_conn_unref(conn);
   1ad28:	4620      	mov	r0, r4
   1ad2a:	f009 fffa 	bl	24d22 <bt_conn_unref>
		return;
   1ad2e:	e7f3      	b.n	1ad18 <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   1ad30:	4a05      	ldr	r2, [pc, #20]	; (1ad48 <deferred_work+0xa8>)
   1ad32:	ab02      	add	r3, sp, #8
   1ad34:	e892 0003 	ldmia.w	r2, {r0, r1}
   1ad38:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   1ad3c:	4619      	mov	r1, r3
   1ad3e:	4620      	mov	r0, r4
   1ad40:	f7ff ff74 	bl	1ac2c <send_conn_le_param_update>
   1ad44:	e7dc      	b.n	1ad00 <deferred_work+0x60>
   1ad46:	bf00      	nop
   1ad48:	00028a5c 	.word	0x00028a5c

0001ad4c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1ad4c:	b508      	push	{r3, lr}
   1ad4e:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1ad50:	4801      	ldr	r0, [pc, #4]	; (1ad58 <bt_conn_create_frag_timeout+0xc>)
   1ad52:	f7ff fdfd 	bl	1a950 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   1ad56:	bd08      	pop	{r3, pc}
   1ad58:	20000920 	.word	0x20000920

0001ad5c <create_frag>:
{
   1ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad5e:	4606      	mov	r6, r0
   1ad60:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   1ad62:	f04f 32ff 	mov.w	r2, #4294967295
   1ad66:	f04f 33ff 	mov.w	r3, #4294967295
   1ad6a:	2000      	movs	r0, #0
   1ad6c:	f7ff ffee 	bl	1ad4c <bt_conn_create_frag_timeout>
   1ad70:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1ad72:	7ab3      	ldrb	r3, [r6, #10]
   1ad74:	2b07      	cmp	r3, #7
   1ad76:	d11a      	bne.n	1adae <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1ad78:	2300      	movs	r3, #0
   1ad7a:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   1ad7c:	4b10      	ldr	r3, [pc, #64]	; (1adc0 <create_frag+0x64>)
   1ad7e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   1ad82:	f100 0708 	add.w	r7, r0, #8
   1ad86:	4638      	mov	r0, r7
   1ad88:	f00b fc86 	bl	26698 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1ad8c:	4286      	cmp	r6, r0
   1ad8e:	d212      	bcs.n	1adb6 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   1ad90:	4b0b      	ldr	r3, [pc, #44]	; (1adc0 <create_frag+0x64>)
   1ad92:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ad96:	4632      	mov	r2, r6
   1ad98:	f855 1f08 	ldr.w	r1, [r5, #8]!
   1ad9c:	4638      	mov	r0, r7
   1ad9e:	f00b fc45 	bl	2662c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1ada2:	4631      	mov	r1, r6
   1ada4:	4628      	mov	r0, r5
   1ada6:	f00b fc5b 	bl	26660 <net_buf_simple_pull>
}
   1adaa:	4620      	mov	r0, r4
   1adac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1adae:	f00b fbed 	bl	2658c <net_buf_unref>
		return NULL;
   1adb2:	2400      	movs	r4, #0
   1adb4:	e7f9      	b.n	1adaa <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1adb6:	4638      	mov	r0, r7
   1adb8:	f00b fc6e 	bl	26698 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1adbc:	b286      	uxth	r6, r0
   1adbe:	e7ea      	b.n	1ad96 <create_frag+0x3a>
   1adc0:	200002b0 	.word	0x200002b0

0001adc4 <send_buf>:
{
   1adc4:	b538      	push	{r3, r4, r5, lr}
   1adc6:	4605      	mov	r5, r0
   1adc8:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1adca:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   1adcc:	4a1b      	ldr	r2, [pc, #108]	; (1ae3c <send_buf+0x78>)
   1adce:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   1add2:	429a      	cmp	r2, r3
   1add4:	d21f      	bcs.n	1ae16 <send_buf+0x52>
	frag = create_frag(conn, buf);
   1add6:	f7ff ffc1 	bl	1ad5c <create_frag>
	if (!frag) {
   1adda:	4601      	mov	r1, r0
   1addc:	b350      	cbz	r0, 1ae34 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1adde:	2301      	movs	r3, #1
   1ade0:	2200      	movs	r2, #0
   1ade2:	4628      	mov	r0, r5
   1ade4:	f7ff f9ac 	bl	1a140 <send_frag>
   1ade8:	4603      	mov	r3, r0
   1adea:	b1c8      	cbz	r0, 1ae20 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1adec:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1adee:	4a13      	ldr	r2, [pc, #76]	; (1ae3c <send_buf+0x78>)
   1adf0:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   1adf4:	429a      	cmp	r2, r3
   1adf6:	d215      	bcs.n	1ae24 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1adf8:	4621      	mov	r1, r4
   1adfa:	4628      	mov	r0, r5
   1adfc:	f7ff ffae 	bl	1ad5c <create_frag>
		if (!frag) {
   1ae00:	4601      	mov	r1, r0
   1ae02:	b1c8      	cbz	r0, 1ae38 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1ae04:	2301      	movs	r3, #1
   1ae06:	461a      	mov	r2, r3
   1ae08:	4628      	mov	r0, r5
   1ae0a:	f7ff f999 	bl	1a140 <send_frag>
   1ae0e:	4603      	mov	r3, r0
   1ae10:	2800      	cmp	r0, #0
   1ae12:	d1eb      	bne.n	1adec <send_buf+0x28>
   1ae14:	e004      	b.n	1ae20 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1ae16:	2300      	movs	r3, #0
   1ae18:	2202      	movs	r2, #2
   1ae1a:	f7ff f991 	bl	1a140 <send_frag>
   1ae1e:	4603      	mov	r3, r0
}
   1ae20:	4618      	mov	r0, r3
   1ae22:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   1ae24:	2300      	movs	r3, #0
   1ae26:	2203      	movs	r2, #3
   1ae28:	4621      	mov	r1, r4
   1ae2a:	4628      	mov	r0, r5
   1ae2c:	f7ff f988 	bl	1a140 <send_frag>
   1ae30:	4603      	mov	r3, r0
   1ae32:	e7f5      	b.n	1ae20 <send_buf+0x5c>
		return false;
   1ae34:	2300      	movs	r3, #0
   1ae36:	e7f3      	b.n	1ae20 <send_buf+0x5c>
			return false;
   1ae38:	2300      	movs	r3, #0
   1ae3a:	e7f1      	b.n	1ae20 <send_buf+0x5c>
   1ae3c:	200002b0 	.word	0x200002b0

0001ae40 <bt_conn_process_tx>:
{
   1ae40:	b538      	push	{r3, r4, r5, lr}
   1ae42:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1ae44:	7a83      	ldrb	r3, [r0, #10]
   1ae46:	b97b      	cbnz	r3, 1ae68 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1ae48:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ae4a:	f3bf 8f5b 	dmb	ish
   1ae4e:	e853 2f00 	ldrex	r2, [r3]
   1ae52:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1ae56:	e843 1000 	strex	r0, r1, [r3]
   1ae5a:	2800      	cmp	r0, #0
   1ae5c:	d1f7      	bne.n	1ae4e <bt_conn_process_tx+0xe>
   1ae5e:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   1ae62:	f012 0f40 	tst.w	r2, #64	; 0x40
   1ae66:	d10d      	bne.n	1ae84 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1ae68:	2200      	movs	r2, #0
   1ae6a:	2300      	movs	r3, #0
   1ae6c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1ae70:	f00b fb60 	bl	26534 <net_buf_get>
	BT_ASSERT(buf);
   1ae74:	4605      	mov	r5, r0
   1ae76:	b148      	cbz	r0, 1ae8c <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   1ae78:	4629      	mov	r1, r5
   1ae7a:	4620      	mov	r0, r4
   1ae7c:	f7ff ffa2 	bl	1adc4 <send_buf>
   1ae80:	b190      	cbz	r0, 1aea8 <bt_conn_process_tx+0x68>
}
   1ae82:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   1ae84:	4620      	mov	r0, r4
   1ae86:	f009 fec6 	bl	24c16 <conn_cleanup>
		return;
   1ae8a:	e7fa      	b.n	1ae82 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   1ae8c:	f240 23e7 	movw	r3, #743	; 0x2e7
   1ae90:	4a07      	ldr	r2, [pc, #28]	; (1aeb0 <bt_conn_process_tx+0x70>)
   1ae92:	4908      	ldr	r1, [pc, #32]	; (1aeb4 <bt_conn_process_tx+0x74>)
   1ae94:	4808      	ldr	r0, [pc, #32]	; (1aeb8 <bt_conn_process_tx+0x78>)
   1ae96:	f008 fc1f 	bl	236d8 <printk>
   1ae9a:	4040      	eors	r0, r0
   1ae9c:	f380 8811 	msr	BASEPRI, r0
   1aea0:	f04f 0003 	mov.w	r0, #3
   1aea4:	df02      	svc	2
   1aea6:	e7e7      	b.n	1ae78 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   1aea8:	4628      	mov	r0, r5
   1aeaa:	f00b fb6f 	bl	2658c <net_buf_unref>
   1aeae:	e7e8      	b.n	1ae82 <bt_conn_process_tx+0x42>
   1aeb0:	0002a1b4 	.word	0x0002a1b4
   1aeb4:	0002a924 	.word	0x0002a924
   1aeb8:	00029940 	.word	0x00029940

0001aebc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1aebc:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1aebe:	2400      	movs	r4, #0
   1aec0:	e006      	b.n	1aed0 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   1aec2:	490a      	ldr	r1, [pc, #40]	; (1aeec <bt_conn_init+0x30>)
   1aec4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1aec8:	4809      	ldr	r0, [pc, #36]	; (1aef0 <bt_conn_init+0x34>)
   1aeca:	f00c fe83 	bl	27bd4 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1aece:	3401      	adds	r4, #1
   1aed0:	2c02      	cmp	r4, #2
   1aed2:	ddf6      	ble.n	1aec2 <bt_conn_init+0x6>
	}

	bt_att_init();
   1aed4:	f00a fe0e 	bl	25af4 <bt_att_init>

	err = bt_smp_init();
   1aed8:	f00b fa4a 	bl	26370 <bt_smp_init>
	if (err) {
   1aedc:	4604      	mov	r4, r0
   1aede:	b108      	cbz	r0, 1aee4 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1aee0:	4620      	mov	r0, r4
   1aee2:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   1aee4:	f00a f8ed 	bl	250c2 <bt_l2cap_init>
	return 0;
   1aee8:	e7fa      	b.n	1aee0 <bt_conn_init+0x24>
   1aeea:	bf00      	nop
   1aeec:	20002aa4 	.word	0x20002aa4
   1aef0:	200008b0 	.word	0x200008b0

0001aef4 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   1aef4:	4a05      	ldr	r2, [pc, #20]	; (1af0c <get_ident+0x18>)
   1aef6:	7813      	ldrb	r3, [r2, #0]
   1aef8:	3301      	adds	r3, #1
   1aefa:	b2db      	uxtb	r3, r3
   1aefc:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   1aefe:	b90b      	cbnz	r3, 1af04 <get_ident+0x10>
		ident++;
   1af00:	3301      	adds	r3, #1
   1af02:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   1af04:	4b01      	ldr	r3, [pc, #4]	; (1af0c <get_ident+0x18>)
   1af06:	7818      	ldrb	r0, [r3, #0]
   1af08:	4770      	bx	lr
   1af0a:	bf00      	nop
   1af0c:	20003c7b 	.word	0x20003c7b

0001af10 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1af10:	b510      	push	{r4, lr}
   1af12:	b088      	sub	sp, #32
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1af14:	2300      	movs	r3, #0
   1af16:	2b00      	cmp	r3, #0
   1af18:	dd27      	ble.n	1af6a <l2cap_accept+0x5a>
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   1af1a:	4b1c      	ldr	r3, [pc, #112]	; (1af8c <l2cap_accept+0x7c>)
   1af1c:	9306      	str	r3, [sp, #24]
   1af1e:	9007      	str	r0, [sp, #28]
   1af20:	2300      	movs	r3, #0
   1af22:	f8ad 3005 	strh.w	r3, [sp, #5]
   1af26:	f88d 3007 	strb.w	r3, [sp, #7]
   1af2a:	2203      	movs	r2, #3
   1af2c:	f88d 2004 	strb.w	r2, [sp, #4]
   1af30:	f88d 3006 	strb.w	r3, [sp, #6]
   1af34:	9a01      	ldr	r2, [sp, #4]
   1af36:	9205      	str	r2, [sp, #20]
   1af38:	461a      	mov	r2, r3
   1af3a:	f363 0200 	bfi	r2, r3, #0, #1
   1af3e:	f363 0241 	bfi	r2, r3, #1, #1
   1af42:	f363 0282 	bfi	r2, r3, #2, #1
   1af46:	f363 02c5 	bfi	r2, r3, #3, #3
   1af4a:	2101      	movs	r1, #1
   1af4c:	f361 1288 	bfi	r2, r1, #6, #3
   1af50:	210c      	movs	r1, #12
   1af52:	f361 2252 	bfi	r2, r1, #9, #10
   1af56:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1af5a:	490d      	ldr	r1, [pc, #52]	; (1af90 <l2cap_accept+0x80>)
   1af5c:	a802      	add	r0, sp, #8
   1af5e:	f008 fff5 	bl	23f4c <z_log_msg2_finalize>

	return -ENOMEM;
   1af62:	f06f 000b 	mvn.w	r0, #11
}
   1af66:	b008      	add	sp, #32
   1af68:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   1af6a:	22e8      	movs	r2, #232	; 0xe8
   1af6c:	fb02 f203 	mul.w	r2, r2, r3
   1af70:	4c08      	ldr	r4, [pc, #32]	; (1af94 <l2cap_accept+0x84>)
   1af72:	58a2      	ldr	r2, [r4, r2]
   1af74:	b10a      	cbz	r2, 1af7a <l2cap_accept+0x6a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1af76:	3301      	adds	r3, #1
   1af78:	e7cd      	b.n	1af16 <l2cap_accept+0x6>
		l2cap->chan.chan.ops = &ops;
   1af7a:	4a06      	ldr	r2, [pc, #24]	; (1af94 <l2cap_accept+0x84>)
   1af7c:	20e8      	movs	r0, #232	; 0xe8
   1af7e:	fb00 2303 	mla	r3, r0, r3, r2
   1af82:	4a05      	ldr	r2, [pc, #20]	; (1af98 <l2cap_accept+0x88>)
   1af84:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   1af86:	600b      	str	r3, [r1, #0]
		return 0;
   1af88:	2000      	movs	r0, #0
   1af8a:	e7ec      	b.n	1af66 <l2cap_accept+0x56>
   1af8c:	0002a20c 	.word	0x0002a20c
   1af90:	000288b4 	.word	0x000288b4
   1af94:	20001980 	.word	0x20001980
   1af98:	0002a38c 	.word	0x0002a38c

0001af9c <le_conn_param_rsp>:
	if (buf->len < sizeof(*rsp)) {
   1af9c:	898b      	ldrh	r3, [r1, #12]
   1af9e:	2b01      	cmp	r3, #1
   1afa0:	d900      	bls.n	1afa4 <le_conn_param_rsp+0x8>
   1afa2:	4770      	bx	lr
{
   1afa4:	b500      	push	{lr}
   1afa6:	b089      	sub	sp, #36	; 0x24
		BT_ERR("Too small LE conn param rsp");
   1afa8:	4b12      	ldr	r3, [pc, #72]	; (1aff4 <le_conn_param_rsp+0x58>)
   1afaa:	9306      	str	r3, [sp, #24]
   1afac:	2300      	movs	r3, #0
   1afae:	f8ad 3005 	strh.w	r3, [sp, #5]
   1afb2:	f88d 3007 	strb.w	r3, [sp, #7]
   1afb6:	2202      	movs	r2, #2
   1afb8:	f88d 2004 	strb.w	r2, [sp, #4]
   1afbc:	f88d 3006 	strb.w	r3, [sp, #6]
   1afc0:	9a01      	ldr	r2, [sp, #4]
   1afc2:	9205      	str	r2, [sp, #20]
   1afc4:	461a      	mov	r2, r3
   1afc6:	f363 0200 	bfi	r2, r3, #0, #1
   1afca:	f363 0241 	bfi	r2, r3, #1, #1
   1afce:	f363 0282 	bfi	r2, r3, #2, #1
   1afd2:	f363 02c5 	bfi	r2, r3, #3, #3
   1afd6:	2101      	movs	r1, #1
   1afd8:	f361 1288 	bfi	r2, r1, #6, #3
   1afdc:	2108      	movs	r1, #8
   1afde:	f361 2252 	bfi	r2, r1, #9, #10
   1afe2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1afe6:	4904      	ldr	r1, [pc, #16]	; (1aff8 <le_conn_param_rsp+0x5c>)
   1afe8:	a802      	add	r0, sp, #8
   1afea:	f008 ffaf 	bl	23f4c <z_log_msg2_finalize>
}
   1afee:	b009      	add	sp, #36	; 0x24
   1aff0:	f85d fb04 	ldr.w	pc, [sp], #4
   1aff4:	0002a234 	.word	0x0002a234
   1aff8:	000288b4 	.word	0x000288b4

0001affc <l2cap_rtx_timeout>:
{
   1affc:	b530      	push	{r4, r5, lr}
   1affe:	b089      	sub	sp, #36	; 0x24
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   1b000:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   1b004:	f850 5c10 	ldr.w	r5, [r0, #-16]
	BT_ERR("chan %p timeout", chan);
   1b008:	4b16      	ldr	r3, [pc, #88]	; (1b064 <l2cap_rtx_timeout+0x68>)
   1b00a:	9306      	str	r3, [sp, #24]
   1b00c:	9407      	str	r4, [sp, #28]
   1b00e:	2300      	movs	r3, #0
   1b010:	f8ad 3005 	strh.w	r3, [sp, #5]
   1b014:	f88d 3007 	strb.w	r3, [sp, #7]
   1b018:	2203      	movs	r2, #3
   1b01a:	f88d 2004 	strb.w	r2, [sp, #4]
   1b01e:	f88d 3006 	strb.w	r3, [sp, #6]
   1b022:	9a01      	ldr	r2, [sp, #4]
   1b024:	9205      	str	r2, [sp, #20]
   1b026:	461a      	mov	r2, r3
   1b028:	f363 0200 	bfi	r2, r3, #0, #1
   1b02c:	f363 0241 	bfi	r2, r3, #1, #1
   1b030:	f363 0282 	bfi	r2, r3, #2, #1
   1b034:	f363 02c5 	bfi	r2, r3, #3, #3
   1b038:	2101      	movs	r1, #1
   1b03a:	f361 1288 	bfi	r2, r1, #6, #3
   1b03e:	210c      	movs	r1, #12
   1b040:	f361 2252 	bfi	r2, r1, #9, #10
   1b044:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b048:	4907      	ldr	r1, [pc, #28]	; (1b068 <l2cap_rtx_timeout+0x6c>)
   1b04a:	a802      	add	r0, sp, #8
   1b04c:	f008 ff7e 	bl	23f4c <z_log_msg2_finalize>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1b050:	4621      	mov	r1, r4
   1b052:	4628      	mov	r0, r5
   1b054:	f009 ff2f 	bl	24eb6 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1b058:	4620      	mov	r0, r4
   1b05a:	f009 ff54 	bl	24f06 <bt_l2cap_chan_del>
}
   1b05e:	b009      	add	sp, #36	; 0x24
   1b060:	bd30      	pop	{r4, r5, pc}
   1b062:	bf00      	nop
   1b064:	0002a250 	.word	0x0002a250
   1b068:	000288b4 	.word	0x000288b4

0001b06c <l2cap_chan_add>:
{
   1b06c:	b570      	push	{r4, r5, r6, lr}
   1b06e:	b088      	sub	sp, #32
	if (!ch) {
   1b070:	b1e1      	cbz	r1, 1b0ac <l2cap_chan_add+0x40>
   1b072:	4604      	mov	r4, r0
   1b074:	4615      	mov	r5, r2
   1b076:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1b078:	491f      	ldr	r1, [pc, #124]	; (1b0f8 <l2cap_chan_add+0x8c>)
   1b07a:	f106 0010 	add.w	r0, r6, #16
   1b07e:	f00c feab 	bl	27dd8 <k_work_init_delayable>
	atomic_clear(chan->status);
   1b082:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b086:	2200      	movs	r2, #0
   1b088:	f3bf 8f5b 	dmb	ish
   1b08c:	e853 1f00 	ldrex	r1, [r3]
   1b090:	e843 2000 	strex	r0, r2, [r3]
   1b094:	2800      	cmp	r0, #0
   1b096:	d1f9      	bne.n	1b08c <l2cap_chan_add+0x20>
   1b098:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   1b09c:	462a      	mov	r2, r5
   1b09e:	4631      	mov	r1, r6
   1b0a0:	4620      	mov	r0, r4
   1b0a2:	f009 ff43 	bl	24f2c <bt_l2cap_chan_add>
	return true;
   1b0a6:	2001      	movs	r0, #1
}
   1b0a8:	b008      	add	sp, #32
   1b0aa:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unable to allocate L2CAP channel ID");
   1b0ac:	4b13      	ldr	r3, [pc, #76]	; (1b0fc <l2cap_chan_add+0x90>)
   1b0ae:	9306      	str	r3, [sp, #24]
   1b0b0:	2400      	movs	r4, #0
   1b0b2:	f8ad 4005 	strh.w	r4, [sp, #5]
   1b0b6:	f88d 4007 	strb.w	r4, [sp, #7]
   1b0ba:	2302      	movs	r3, #2
   1b0bc:	f88d 3004 	strb.w	r3, [sp, #4]
   1b0c0:	f88d 4006 	strb.w	r4, [sp, #6]
   1b0c4:	9b01      	ldr	r3, [sp, #4]
   1b0c6:	9305      	str	r3, [sp, #20]
   1b0c8:	4622      	mov	r2, r4
   1b0ca:	f364 0200 	bfi	r2, r4, #0, #1
   1b0ce:	f364 0241 	bfi	r2, r4, #1, #1
   1b0d2:	f364 0282 	bfi	r2, r4, #2, #1
   1b0d6:	f364 02c5 	bfi	r2, r4, #3, #3
   1b0da:	2301      	movs	r3, #1
   1b0dc:	f363 1288 	bfi	r2, r3, #6, #3
   1b0e0:	2308      	movs	r3, #8
   1b0e2:	f363 2252 	bfi	r2, r3, #9, #10
   1b0e6:	4623      	mov	r3, r4
   1b0e8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b0ec:	4904      	ldr	r1, [pc, #16]	; (1b100 <l2cap_chan_add+0x94>)
   1b0ee:	a802      	add	r0, sp, #8
   1b0f0:	f008 ff2c 	bl	23f4c <z_log_msg2_finalize>
		return false;
   1b0f4:	4620      	mov	r0, r4
   1b0f6:	e7d7      	b.n	1b0a8 <l2cap_chan_add+0x3c>
   1b0f8:	0001affd 	.word	0x0001affd
   1b0fc:	0002a260 	.word	0x0002a260
   1b100:	000288b4 	.word	0x000288b4

0001b104 <bt_l2cap_connected>:
{
   1b104:	b530      	push	{r4, r5, lr}
   1b106:	b083      	sub	sp, #12
   1b108:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b10a:	4c1a      	ldr	r4, [pc, #104]	; (1b174 <bt_l2cap_connected+0x70>)
   1b10c:	e000      	b.n	1b110 <bt_l2cap_connected+0xc>
   1b10e:	340c      	adds	r4, #12
   1b110:	4b19      	ldr	r3, [pc, #100]	; (1b178 <bt_l2cap_connected+0x74>)
   1b112:	429c      	cmp	r4, r3
   1b114:	d22c      	bcs.n	1b170 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   1b116:	6863      	ldr	r3, [r4, #4]
   1b118:	a901      	add	r1, sp, #4
   1b11a:	4628      	mov	r0, r5
   1b11c:	4798      	blx	r3
   1b11e:	2800      	cmp	r0, #0
   1b120:	dbf5      	blt.n	1b10e <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   1b122:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   1b124:	8823      	ldrh	r3, [r4, #0]
   1b126:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1b12a:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1b12e:	68a2      	ldr	r2, [r4, #8]
   1b130:	4628      	mov	r0, r5
   1b132:	f7ff ff9b 	bl	1b06c <l2cap_chan_add>
   1b136:	b1d8      	cbz	r0, 1b170 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   1b138:	9801      	ldr	r0, [sp, #4]
   1b13a:	6843      	ldr	r3, [r0, #4]
   1b13c:	681b      	ldr	r3, [r3, #0]
   1b13e:	b103      	cbz	r3, 1b142 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   1b140:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   1b142:	9b01      	ldr	r3, [sp, #4]
   1b144:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b146:	f3bf 8f5b 	dmb	ish
   1b14a:	e853 2f00 	ldrex	r2, [r3]
   1b14e:	f042 0201 	orr.w	r2, r2, #1
   1b152:	e843 2100 	strex	r1, r2, [r3]
   1b156:	2900      	cmp	r1, #0
   1b158:	d1f7      	bne.n	1b14a <bt_l2cap_connected+0x46>
   1b15a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1b15e:	9801      	ldr	r0, [sp, #4]
   1b160:	6843      	ldr	r3, [r0, #4]
   1b162:	699b      	ldr	r3, [r3, #24]
   1b164:	2b00      	cmp	r3, #0
   1b166:	d0d2      	beq.n	1b10e <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1b168:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1b16c:	4798      	blx	r3
   1b16e:	e7ce      	b.n	1b10e <bt_l2cap_connected+0xa>
}
   1b170:	b003      	add	sp, #12
   1b172:	bd30      	pop	{r4, r5, pc}
   1b174:	00028824 	.word	0x00028824
   1b178:	00028848 	.word	0x00028848

0001b17c <l2cap_create_le_sig_pdu>:
{
   1b17c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b17e:	b089      	sub	sp, #36	; 0x24
   1b180:	460c      	mov	r4, r1
   1b182:	4616      	mov	r6, r2
   1b184:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   1b186:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b18a:	2300      	movs	r3, #0
   1b18c:	2100      	movs	r1, #0
   1b18e:	4608      	mov	r0, r1
   1b190:	f009 fefd 	bl	24f8e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1b194:	4607      	mov	r7, r0
   1b196:	b148      	cbz	r0, 1b1ac <l2cap_create_le_sig_pdu+0x30>
	return net_buf_simple_add(&buf->b, len);
   1b198:	2104      	movs	r1, #4
   1b19a:	3008      	adds	r0, #8
   1b19c:	f00b fa40 	bl	26620 <net_buf_simple_add>
	hdr->code = code;
   1b1a0:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   1b1a2:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1b1a4:	8045      	strh	r5, [r0, #2]
}
   1b1a6:	4638      	mov	r0, r7
   1b1a8:	b009      	add	sp, #36	; 0x24
   1b1aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b1ac:	4b12      	ldr	r3, [pc, #72]	; (1b1f8 <l2cap_create_le_sig_pdu+0x7c>)
   1b1ae:	9306      	str	r3, [sp, #24]
   1b1b0:	9407      	str	r4, [sp, #28]
   1b1b2:	2300      	movs	r3, #0
   1b1b4:	f8ad 3005 	strh.w	r3, [sp, #5]
   1b1b8:	f88d 3007 	strb.w	r3, [sp, #7]
   1b1bc:	2203      	movs	r2, #3
   1b1be:	f88d 2004 	strb.w	r2, [sp, #4]
   1b1c2:	f88d 3006 	strb.w	r3, [sp, #6]
   1b1c6:	9a01      	ldr	r2, [sp, #4]
   1b1c8:	9205      	str	r2, [sp, #20]
   1b1ca:	461a      	mov	r2, r3
   1b1cc:	f363 0200 	bfi	r2, r3, #0, #1
   1b1d0:	f363 0241 	bfi	r2, r3, #1, #1
   1b1d4:	f363 0282 	bfi	r2, r3, #2, #1
   1b1d8:	f363 02c5 	bfi	r2, r3, #3, #3
   1b1dc:	2101      	movs	r1, #1
   1b1de:	f361 1288 	bfi	r2, r1, #6, #3
   1b1e2:	210c      	movs	r1, #12
   1b1e4:	f361 2252 	bfi	r2, r1, #9, #10
   1b1e8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b1ec:	4903      	ldr	r1, [pc, #12]	; (1b1fc <l2cap_create_le_sig_pdu+0x80>)
   1b1ee:	a802      	add	r0, sp, #8
   1b1f0:	f008 feac 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1b1f4:	e7d7      	b.n	1b1a6 <l2cap_create_le_sig_pdu+0x2a>
   1b1f6:	bf00      	nop
   1b1f8:	0002a284 	.word	0x0002a284
   1b1fc:	000288b4 	.word	0x000288b4

0001b200 <l2cap_recv>:
{
   1b200:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b202:	b097      	sub	sp, #92	; 0x5c
   1b204:	af02      	add	r7, sp, #8
	if (buf->len < sizeof(*hdr)) {
   1b206:	898b      	ldrh	r3, [r1, #12]
   1b208:	2b03      	cmp	r3, #3
   1b20a:	d945      	bls.n	1b298 <l2cap_recv+0x98>
   1b20c:	4606      	mov	r6, r0
   1b20e:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   1b210:	2104      	movs	r1, #4
   1b212:	f104 0008 	add.w	r0, r4, #8
   1b216:	f00b fa2b 	bl	26670 <net_buf_simple_pull_mem>
   1b21a:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1b21c:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   1b21e:	89a3      	ldrh	r3, [r4, #12]
   1b220:	4293      	cmp	r3, r2
   1b222:	d064      	beq.n	1b2ee <l2cap_recv+0xee>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1b224:	466d      	mov	r5, sp
   1b226:	b088      	sub	sp, #32
   1b228:	a802      	add	r0, sp, #8
   1b22a:	466b      	mov	r3, sp
   1b22c:	3314      	adds	r3, #20
   1b22e:	d058      	beq.n	1b2e2 <l2cap_recv+0xe2>
   1b230:	2110      	movs	r1, #16
   1b232:	b11b      	cbz	r3, 1b23c <l2cap_recv+0x3c>
   1b234:	2904      	cmp	r1, #4
   1b236:	dd01      	ble.n	1b23c <l2cap_recv+0x3c>
   1b238:	4e5a      	ldr	r6, [pc, #360]	; (1b3a4 <l2cap_recv+0x1a4>)
   1b23a:	6106      	str	r6, [r0, #16]
   1b23c:	89a4      	ldrh	r4, [r4, #12]
   1b23e:	b113      	cbz	r3, 1b246 <l2cap_recv+0x46>
   1b240:	2908      	cmp	r1, #8
   1b242:	dd00      	ble.n	1b246 <l2cap_recv+0x46>
   1b244:	6144      	str	r4, [r0, #20]
   1b246:	b113      	cbz	r3, 1b24e <l2cap_recv+0x4e>
   1b248:	290c      	cmp	r1, #12
   1b24a:	dd00      	ble.n	1b24e <l2cap_recv+0x4e>
   1b24c:	6182      	str	r2, [r0, #24]
   1b24e:	290f      	cmp	r1, #15
   1b250:	dd4a      	ble.n	1b2e8 <l2cap_recv+0xe8>
   1b252:	2110      	movs	r1, #16
   1b254:	b143      	cbz	r3, 1b268 <l2cap_recv+0x68>
   1b256:	2300      	movs	r3, #0
   1b258:	f8a7 3005 	strh.w	r3, [r7, #5]
   1b25c:	71fb      	strb	r3, [r7, #7]
   1b25e:	2204      	movs	r2, #4
   1b260:	713a      	strb	r2, [r7, #4]
   1b262:	71bb      	strb	r3, [r7, #6]
   1b264:	687b      	ldr	r3, [r7, #4]
   1b266:	60c3      	str	r3, [r0, #12]
   1b268:	2200      	movs	r2, #0
   1b26a:	f36f 0200 	bfc	r2, #0, #1
   1b26e:	f36f 0241 	bfc	r2, #1, #1
   1b272:	f36f 0282 	bfc	r2, #2, #1
   1b276:	f36f 02c5 	bfc	r2, #3, #3
   1b27a:	2301      	movs	r3, #1
   1b27c:	f363 1288 	bfi	r2, r3, #6, #3
   1b280:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   1b284:	f363 2252 	bfi	r2, r3, #9, #10
   1b288:	2300      	movs	r3, #0
   1b28a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b28e:	4946      	ldr	r1, [pc, #280]	; (1b3a8 <l2cap_recv+0x1a8>)
   1b290:	f008 fe5c 	bl	23f4c <z_log_msg2_finalize>
   1b294:	46ad      	mov	sp, r5
		return 0;
   1b296:	e020      	b.n	1b2da <l2cap_recv+0xda>
		BT_ERR("Too small L2CAP signaling PDU");
   1b298:	4b44      	ldr	r3, [pc, #272]	; (1b3ac <l2cap_recv+0x1ac>)
   1b29a:	64bb      	str	r3, [r7, #72]	; 0x48
   1b29c:	2300      	movs	r3, #0
   1b29e:	f8a7 3005 	strh.w	r3, [r7, #5]
   1b2a2:	71fb      	strb	r3, [r7, #7]
   1b2a4:	2202      	movs	r2, #2
   1b2a6:	713a      	strb	r2, [r7, #4]
   1b2a8:	71bb      	strb	r3, [r7, #6]
   1b2aa:	687a      	ldr	r2, [r7, #4]
   1b2ac:	647a      	str	r2, [r7, #68]	; 0x44
   1b2ae:	461a      	mov	r2, r3
   1b2b0:	f363 0200 	bfi	r2, r3, #0, #1
   1b2b4:	f363 0241 	bfi	r2, r3, #1, #1
   1b2b8:	f363 0282 	bfi	r2, r3, #2, #1
   1b2bc:	f363 02c5 	bfi	r2, r3, #3, #3
   1b2c0:	2101      	movs	r1, #1
   1b2c2:	f361 1288 	bfi	r2, r1, #6, #3
   1b2c6:	2108      	movs	r1, #8
   1b2c8:	f361 2252 	bfi	r2, r1, #9, #10
   1b2cc:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b2d0:	4935      	ldr	r1, [pc, #212]	; (1b3a8 <l2cap_recv+0x1a8>)
   1b2d2:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1b2d6:	f008 fe39 	bl	23f4c <z_log_msg2_finalize>
}
   1b2da:	2000      	movs	r0, #0
   1b2dc:	3754      	adds	r7, #84	; 0x54
   1b2de:	46bd      	mov	sp, r7
   1b2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1b2e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b2e6:	e7a4      	b.n	1b232 <l2cap_recv+0x32>
   1b2e8:	f06f 011b 	mvn.w	r1, #27
   1b2ec:	e7b2      	b.n	1b254 <l2cap_recv+0x54>
	if (!hdr->ident) {
   1b2ee:	7843      	ldrb	r3, [r0, #1]
   1b2f0:	b14b      	cbz	r3, 1b306 <l2cap_recv+0x106>
	switch (hdr->code) {
   1b2f2:	7803      	ldrb	r3, [r0, #0]
   1b2f4:	2b01      	cmp	r3, #1
   1b2f6:	d0f0      	beq.n	1b2da <l2cap_recv+0xda>
   1b2f8:	2b13      	cmp	r3, #19
   1b2fa:	d126      	bne.n	1b34a <l2cap_recv+0x14a>
		le_conn_param_rsp(l2cap, buf);
   1b2fc:	4621      	mov	r1, r4
   1b2fe:	4630      	mov	r0, r6
   1b300:	f7ff fe4c 	bl	1af9c <le_conn_param_rsp>
		break;
   1b304:	e7e9      	b.n	1b2da <l2cap_recv+0xda>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1b306:	4b2a      	ldr	r3, [pc, #168]	; (1b3b0 <l2cap_recv+0x1b0>)
   1b308:	633b      	str	r3, [r7, #48]	; 0x30
   1b30a:	2300      	movs	r3, #0
   1b30c:	f8a7 3005 	strh.w	r3, [r7, #5]
   1b310:	71fb      	strb	r3, [r7, #7]
   1b312:	2202      	movs	r2, #2
   1b314:	713a      	strb	r2, [r7, #4]
   1b316:	71bb      	strb	r3, [r7, #6]
   1b318:	687a      	ldr	r2, [r7, #4]
   1b31a:	62fa      	str	r2, [r7, #44]	; 0x2c
   1b31c:	461a      	mov	r2, r3
   1b31e:	f363 0200 	bfi	r2, r3, #0, #1
   1b322:	f363 0241 	bfi	r2, r3, #1, #1
   1b326:	f363 0282 	bfi	r2, r3, #2, #1
   1b32a:	f363 02c5 	bfi	r2, r3, #3, #3
   1b32e:	2101      	movs	r1, #1
   1b330:	f361 1288 	bfi	r2, r1, #6, #3
   1b334:	2108      	movs	r1, #8
   1b336:	f361 2252 	bfi	r2, r1, #9, #10
   1b33a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b33e:	491a      	ldr	r1, [pc, #104]	; (1b3a8 <l2cap_recv+0x1a8>)
   1b340:	f107 0020 	add.w	r0, r7, #32
   1b344:	f008 fe02 	bl	23f4c <z_log_msg2_finalize>
		return 0;
   1b348:	e7c7      	b.n	1b2da <l2cap_recv+0xda>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1b34a:	4b1a      	ldr	r3, [pc, #104]	; (1b3b4 <l2cap_recv+0x1b4>)
   1b34c:	61bb      	str	r3, [r7, #24]
   1b34e:	7803      	ldrb	r3, [r0, #0]
   1b350:	61fb      	str	r3, [r7, #28]
   1b352:	2400      	movs	r4, #0
   1b354:	f8a7 4005 	strh.w	r4, [r7, #5]
   1b358:	71fc      	strb	r4, [r7, #7]
   1b35a:	2303      	movs	r3, #3
   1b35c:	713b      	strb	r3, [r7, #4]
   1b35e:	71bc      	strb	r4, [r7, #6]
   1b360:	687b      	ldr	r3, [r7, #4]
   1b362:	617b      	str	r3, [r7, #20]
   1b364:	4622      	mov	r2, r4
   1b366:	f364 0200 	bfi	r2, r4, #0, #1
   1b36a:	f364 0241 	bfi	r2, r4, #1, #1
   1b36e:	f364 0282 	bfi	r2, r4, #2, #1
   1b372:	f364 02c5 	bfi	r2, r4, #3, #3
   1b376:	2302      	movs	r3, #2
   1b378:	f363 1288 	bfi	r2, r3, #6, #3
   1b37c:	230c      	movs	r3, #12
   1b37e:	f363 2252 	bfi	r2, r3, #9, #10
   1b382:	4623      	mov	r3, r4
   1b384:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b388:	4907      	ldr	r1, [pc, #28]	; (1b3a8 <l2cap_recv+0x1a8>)
   1b38a:	f107 0008 	add.w	r0, r7, #8
   1b38e:	f008 fddd 	bl	23f4c <z_log_msg2_finalize>
		l2cap_send_reject(chan->conn, hdr->ident,
   1b392:	7869      	ldrb	r1, [r5, #1]
   1b394:	6830      	ldr	r0, [r6, #0]
   1b396:	9400      	str	r4, [sp, #0]
   1b398:	4623      	mov	r3, r4
   1b39a:	4622      	mov	r2, r4
   1b39c:	f009 fe11 	bl	24fc2 <l2cap_send_reject>
		break;
   1b3a0:	e79b      	b.n	1b2da <l2cap_recv+0xda>
   1b3a2:	bf00      	nop
   1b3a4:	0002a2cc 	.word	0x0002a2cc
   1b3a8:	000288b4 	.word	0x000288b4
   1b3ac:	0002a2ac 	.word	0x0002a2ac
   1b3b0:	0002a2f0 	.word	0x0002a2f0
   1b3b4:	0002a314 	.word	0x0002a314

0001b3b8 <bt_l2cap_recv>:
{
   1b3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b3ba:	b08f      	sub	sp, #60	; 0x3c
   1b3bc:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1b3be:	898b      	ldrh	r3, [r1, #12]
   1b3c0:	2b03      	cmp	r3, #3
   1b3c2:	d912      	bls.n	1b3ea <bt_l2cap_recv+0x32>
   1b3c4:	4605      	mov	r5, r0
   1b3c6:	4616      	mov	r6, r2
   1b3c8:	2104      	movs	r1, #4
   1b3ca:	f104 0008 	add.w	r0, r4, #8
   1b3ce:	f00b f94f 	bl	26670 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1b3d2:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1b3d4:	4639      	mov	r1, r7
   1b3d6:	4628      	mov	r0, r5
   1b3d8:	f009 fe33 	bl	25042 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b3dc:	b360      	cbz	r0, 1b438 <bt_l2cap_recv+0x80>
	l2cap_chan_recv(chan, buf, complete);
   1b3de:	4632      	mov	r2, r6
   1b3e0:	4621      	mov	r1, r4
   1b3e2:	f009 fd5a 	bl	24e9a <l2cap_chan_recv>
}
   1b3e6:	b00f      	add	sp, #60	; 0x3c
   1b3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Too small L2CAP PDU received");
   1b3ea:	4b27      	ldr	r3, [pc, #156]	; (1b488 <bt_l2cap_recv+0xd0>)
   1b3ec:	930c      	str	r3, [sp, #48]	; 0x30
   1b3ee:	2300      	movs	r3, #0
   1b3f0:	f8ad 3005 	strh.w	r3, [sp, #5]
   1b3f4:	f88d 3007 	strb.w	r3, [sp, #7]
   1b3f8:	2202      	movs	r2, #2
   1b3fa:	f88d 2004 	strb.w	r2, [sp, #4]
   1b3fe:	f88d 3006 	strb.w	r3, [sp, #6]
   1b402:	9a01      	ldr	r2, [sp, #4]
   1b404:	920b      	str	r2, [sp, #44]	; 0x2c
   1b406:	461a      	mov	r2, r3
   1b408:	f363 0200 	bfi	r2, r3, #0, #1
   1b40c:	f363 0241 	bfi	r2, r3, #1, #1
   1b410:	f363 0282 	bfi	r2, r3, #2, #1
   1b414:	f363 02c5 	bfi	r2, r3, #3, #3
   1b418:	2101      	movs	r1, #1
   1b41a:	f361 1288 	bfi	r2, r1, #6, #3
   1b41e:	2108      	movs	r1, #8
   1b420:	f361 2252 	bfi	r2, r1, #9, #10
   1b424:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b428:	4918      	ldr	r1, [pc, #96]	; (1b48c <bt_l2cap_recv+0xd4>)
   1b42a:	a808      	add	r0, sp, #32
   1b42c:	f008 fd8e 	bl	23f4c <z_log_msg2_finalize>
		net_buf_unref(buf);
   1b430:	4620      	mov	r0, r4
   1b432:	f00b f8ab 	bl	2658c <net_buf_unref>
		return;
   1b436:	e7d6      	b.n	1b3e6 <bt_l2cap_recv+0x2e>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1b438:	4b15      	ldr	r3, [pc, #84]	; (1b490 <bt_l2cap_recv+0xd8>)
   1b43a:	9306      	str	r3, [sp, #24]
   1b43c:	9707      	str	r7, [sp, #28]
   1b43e:	2300      	movs	r3, #0
   1b440:	f8ad 3005 	strh.w	r3, [sp, #5]
   1b444:	f88d 3007 	strb.w	r3, [sp, #7]
   1b448:	2203      	movs	r2, #3
   1b44a:	f88d 2004 	strb.w	r2, [sp, #4]
   1b44e:	f88d 3006 	strb.w	r3, [sp, #6]
   1b452:	9a01      	ldr	r2, [sp, #4]
   1b454:	9205      	str	r2, [sp, #20]
   1b456:	461a      	mov	r2, r3
   1b458:	f363 0200 	bfi	r2, r3, #0, #1
   1b45c:	f363 0241 	bfi	r2, r3, #1, #1
   1b460:	f363 0282 	bfi	r2, r3, #2, #1
   1b464:	f363 02c5 	bfi	r2, r3, #3, #3
   1b468:	2102      	movs	r1, #2
   1b46a:	f361 1288 	bfi	r2, r1, #6, #3
   1b46e:	210c      	movs	r1, #12
   1b470:	f361 2252 	bfi	r2, r1, #9, #10
   1b474:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b478:	4904      	ldr	r1, [pc, #16]	; (1b48c <bt_l2cap_recv+0xd4>)
   1b47a:	a802      	add	r0, sp, #8
   1b47c:	f008 fd66 	bl	23f4c <z_log_msg2_finalize>
		net_buf_unref(buf);
   1b480:	4620      	mov	r0, r4
   1b482:	f00b f883 	bl	2658c <net_buf_unref>
		return;
   1b486:	e7ae      	b.n	1b3e6 <bt_l2cap_recv+0x2e>
   1b488:	0002a334 	.word	0x0002a334
   1b48c:	000288b4 	.word	0x000288b4
   1b490:	0002a354 	.word	0x0002a354

0001b494 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   1b494:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1b496:	4b03      	ldr	r3, [pc, #12]	; (1b4a4 <att_cfm_sent+0x10>)
   1b498:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1b49c:	f009 fe12 	bl	250c4 <att_sent>
}
   1b4a0:	bd08      	pop	{r3, pc}
   1b4a2:	bf00      	nop
   1b4a4:	000253bf 	.word	0x000253bf

0001b4a8 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   1b4a8:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1b4aa:	4b03      	ldr	r3, [pc, #12]	; (1b4b8 <att_rsp_sent+0x10>)
   1b4ac:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1b4b0:	f009 fe08 	bl	250c4 <att_sent>
}
   1b4b4:	bd08      	pop	{r3, pc}
   1b4b6:	bf00      	nop
   1b4b8:	000253db 	.word	0x000253db

0001b4bc <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   1b4bc:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1b4be:	4b03      	ldr	r3, [pc, #12]	; (1b4cc <att_req_sent+0x10>)
   1b4c0:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   1b4c4:	f009 fdfe 	bl	250c4 <att_sent>
}
   1b4c8:	bd08      	pop	{r3, pc}
   1b4ca:	bf00      	nop
   1b4cc:	000253a7 	.word	0x000253a7

0001b4d0 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   1b4d0:	4b08      	ldr	r3, [pc, #32]	; (1b4f4 <att_cb+0x24>)
   1b4d2:	4298      	cmp	r0, r3
   1b4d4:	d009      	beq.n	1b4ea <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   1b4d6:	4b08      	ldr	r3, [pc, #32]	; (1b4f8 <att_cb+0x28>)
   1b4d8:	4298      	cmp	r0, r3
   1b4da:	d008      	beq.n	1b4ee <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   1b4dc:	4b07      	ldr	r3, [pc, #28]	; (1b4fc <att_cb+0x2c>)
   1b4de:	4298      	cmp	r0, r3
   1b4e0:	d001      	beq.n	1b4e6 <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   1b4e2:	4807      	ldr	r0, [pc, #28]	; (1b500 <att_cb+0x30>)
	}
}
   1b4e4:	4770      	bx	lr
		return att_req_sent;
   1b4e6:	4807      	ldr	r0, [pc, #28]	; (1b504 <att_cb+0x34>)
   1b4e8:	4770      	bx	lr
		return att_rsp_sent;
   1b4ea:	4807      	ldr	r0, [pc, #28]	; (1b508 <att_cb+0x38>)
   1b4ec:	4770      	bx	lr
		return att_cfm_sent;
   1b4ee:	4807      	ldr	r0, [pc, #28]	; (1b50c <att_cb+0x3c>)
   1b4f0:	4770      	bx	lr
   1b4f2:	bf00      	nop
   1b4f4:	000253db 	.word	0x000253db
   1b4f8:	000253bf 	.word	0x000253bf
   1b4fc:	000253a7 	.word	0x000253a7
   1b500:	000250c5 	.word	0x000250c5
   1b504:	0001b4bd 	.word	0x0001b4bd
   1b508:	0001b4a9 	.word	0x0001b4a9
   1b50c:	0001b495 	.word	0x0001b495

0001b510 <chan_cb>:
{
   1b510:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   1b512:	6883      	ldr	r3, [r0, #8]
   1b514:	7818      	ldrb	r0, [r3, #0]
   1b516:	f009 fe1e 	bl	25156 <att_op_get_type>
   1b51a:	3801      	subs	r0, #1
   1b51c:	2804      	cmp	r0, #4
   1b51e:	d808      	bhi.n	1b532 <chan_cb+0x22>
   1b520:	e8df f000 	tbb	[pc, r0]
   1b524:	09070305 	.word	0x09070305
   1b528:	05          	.byte	0x05
   1b529:	00          	.byte	0x00
   1b52a:	4804      	ldr	r0, [pc, #16]	; (1b53c <chan_cb+0x2c>)
   1b52c:	e000      	b.n	1b530 <chan_cb+0x20>
		return chan_req_sent;
   1b52e:	4804      	ldr	r0, [pc, #16]	; (1b540 <chan_cb+0x30>)
}
   1b530:	bd08      	pop	{r3, pc}
		return NULL;
   1b532:	2000      	movs	r0, #0
   1b534:	e7fc      	b.n	1b530 <chan_cb+0x20>
		return chan_cfm_sent;
   1b536:	4803      	ldr	r0, [pc, #12]	; (1b544 <chan_cb+0x34>)
   1b538:	e7fa      	b.n	1b530 <chan_cb+0x20>
   1b53a:	bf00      	nop
   1b53c:	000253db 	.word	0x000253db
   1b540:	000253a7 	.word	0x000253a7
   1b544:	000253bf 	.word	0x000253bf

0001b548 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   1b548:	b510      	push	{r4, lr}
   1b54a:	b094      	sub	sp, #80	; 0x50
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   1b54c:	7a83      	ldrb	r3, [r0, #10]
   1b54e:	2b07      	cmp	r3, #7
   1b550:	d112      	bne.n	1b578 <att_get+0x30>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b552:	2104      	movs	r1, #4
   1b554:	f009 fd75 	bl	25042 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b558:	4604      	mov	r4, r0
   1b55a:	b388      	cbz	r0, 1b5c0 <att_get+0x78>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b55c:	f3bf 8f5b 	dmb	ish
   1b560:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1b564:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1b568:	f013 0f04 	tst.w	r3, #4
   1b56c:	d14c      	bne.n	1b608 <att_get+0xc0>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   1b56e:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   1b572:	4620      	mov	r0, r4
   1b574:	b014      	add	sp, #80	; 0x50
   1b576:	bd10      	pop	{r4, pc}
		BT_WARN("Not connected");
   1b578:	4b35      	ldr	r3, [pc, #212]	; (1b650 <att_get+0x108>)
   1b57a:	9312      	str	r3, [sp, #72]	; 0x48
   1b57c:	2400      	movs	r4, #0
   1b57e:	f8ad 4005 	strh.w	r4, [sp, #5]
   1b582:	f88d 4007 	strb.w	r4, [sp, #7]
   1b586:	2302      	movs	r3, #2
   1b588:	f88d 3004 	strb.w	r3, [sp, #4]
   1b58c:	f88d 4006 	strb.w	r4, [sp, #6]
   1b590:	9a01      	ldr	r2, [sp, #4]
   1b592:	9211      	str	r2, [sp, #68]	; 0x44
   1b594:	4622      	mov	r2, r4
   1b596:	f364 0200 	bfi	r2, r4, #0, #1
   1b59a:	f364 0241 	bfi	r2, r4, #1, #1
   1b59e:	f364 0282 	bfi	r2, r4, #2, #1
   1b5a2:	f364 02c5 	bfi	r2, r4, #3, #3
   1b5a6:	f363 1288 	bfi	r2, r3, #6, #3
   1b5aa:	2308      	movs	r3, #8
   1b5ac:	f363 2252 	bfi	r2, r3, #9, #10
   1b5b0:	4623      	mov	r3, r4
   1b5b2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b5b6:	4927      	ldr	r1, [pc, #156]	; (1b654 <att_get+0x10c>)
   1b5b8:	a80e      	add	r0, sp, #56	; 0x38
   1b5ba:	f008 fcc7 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1b5be:	e7d8      	b.n	1b572 <att_get+0x2a>
		BT_ERR("Unable to find ATT channel");
   1b5c0:	4b25      	ldr	r3, [pc, #148]	; (1b658 <att_get+0x110>)
   1b5c2:	930c      	str	r3, [sp, #48]	; 0x30
   1b5c4:	2300      	movs	r3, #0
   1b5c6:	f8ad 3005 	strh.w	r3, [sp, #5]
   1b5ca:	f88d 3007 	strb.w	r3, [sp, #7]
   1b5ce:	2202      	movs	r2, #2
   1b5d0:	f88d 2004 	strb.w	r2, [sp, #4]
   1b5d4:	f88d 3006 	strb.w	r3, [sp, #6]
   1b5d8:	9a01      	ldr	r2, [sp, #4]
   1b5da:	920b      	str	r2, [sp, #44]	; 0x2c
   1b5dc:	461a      	mov	r2, r3
   1b5de:	f363 0200 	bfi	r2, r3, #0, #1
   1b5e2:	f363 0241 	bfi	r2, r3, #1, #1
   1b5e6:	f363 0282 	bfi	r2, r3, #2, #1
   1b5ea:	f363 02c5 	bfi	r2, r3, #3, #3
   1b5ee:	2101      	movs	r1, #1
   1b5f0:	f361 1288 	bfi	r2, r1, #6, #3
   1b5f4:	2108      	movs	r1, #8
   1b5f6:	f361 2252 	bfi	r2, r1, #9, #10
   1b5fa:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b5fe:	4915      	ldr	r1, [pc, #84]	; (1b654 <att_get+0x10c>)
   1b600:	a808      	add	r0, sp, #32
   1b602:	f008 fca3 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1b606:	e7b4      	b.n	1b572 <att_get+0x2a>
		BT_WARN("ATT channel flagged as disconnected");
   1b608:	4b14      	ldr	r3, [pc, #80]	; (1b65c <att_get+0x114>)
   1b60a:	9306      	str	r3, [sp, #24]
   1b60c:	2400      	movs	r4, #0
   1b60e:	f8ad 4005 	strh.w	r4, [sp, #5]
   1b612:	f88d 4007 	strb.w	r4, [sp, #7]
   1b616:	2302      	movs	r3, #2
   1b618:	f88d 3004 	strb.w	r3, [sp, #4]
   1b61c:	f88d 4006 	strb.w	r4, [sp, #6]
   1b620:	9a01      	ldr	r2, [sp, #4]
   1b622:	9205      	str	r2, [sp, #20]
   1b624:	4622      	mov	r2, r4
   1b626:	f364 0200 	bfi	r2, r4, #0, #1
   1b62a:	f364 0241 	bfi	r2, r4, #1, #1
   1b62e:	f364 0282 	bfi	r2, r4, #2, #1
   1b632:	f364 02c5 	bfi	r2, r4, #3, #3
   1b636:	f363 1288 	bfi	r2, r3, #6, #3
   1b63a:	2308      	movs	r3, #8
   1b63c:	f363 2252 	bfi	r2, r3, #9, #10
   1b640:	4623      	mov	r3, r4
   1b642:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b646:	4903      	ldr	r1, [pc, #12]	; (1b654 <att_get+0x10c>)
   1b648:	a802      	add	r0, sp, #8
   1b64a:	f008 fc7f 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1b64e:	e790      	b.n	1b572 <att_get+0x2a>
   1b650:	0002a3b0 	.word	0x0002a3b0
   1b654:	00028884 	.word	0x00028884
   1b658:	0002a3c0 	.word	0x0002a3c0
   1b65c:	0002a3dc 	.word	0x0002a3dc

0001b660 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   1b660:	b570      	push	{r4, r5, r6, lr}
   1b662:	b08e      	sub	sp, #56	; 0x38
   1b664:	4605      	mov	r5, r0
   1b666:	460e      	mov	r6, r1
	return list->head;
   1b668:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b66a:	b10b      	cbz	r3, 1b670 <att_chan_new+0x10>
   1b66c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1b670:	9301      	str	r3, [sp, #4]
	int quota = 0;
   1b672:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b674:	e028      	b.n	1b6c8 <att_chan_new+0x68>
		if (chan->att == att) {
			quota++;
   1b676:	3201      	adds	r2, #1
   1b678:	e02b      	b.n	1b6d2 <att_chan_new+0x72>
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   1b67a:	4b41      	ldr	r3, [pc, #260]	; (1b780 <att_chan_new+0x120>)
   1b67c:	930c      	str	r3, [sp, #48]	; 0x30
   1b67e:	920d      	str	r2, [sp, #52]	; 0x34
   1b680:	2400      	movs	r4, #0
   1b682:	f8ad 4001 	strh.w	r4, [sp, #1]
   1b686:	f88d 4003 	strb.w	r4, [sp, #3]
   1b68a:	2303      	movs	r3, #3
   1b68c:	f88d 3000 	strb.w	r3, [sp]
   1b690:	f88d 4002 	strb.w	r4, [sp, #2]
   1b694:	9b00      	ldr	r3, [sp, #0]
   1b696:	930b      	str	r3, [sp, #44]	; 0x2c
   1b698:	4622      	mov	r2, r4
   1b69a:	f364 0200 	bfi	r2, r4, #0, #1
   1b69e:	f364 0241 	bfi	r2, r4, #1, #1
   1b6a2:	f364 0282 	bfi	r2, r4, #2, #1
   1b6a6:	f364 02c5 	bfi	r2, r4, #3, #3
   1b6aa:	2301      	movs	r3, #1
   1b6ac:	f363 1288 	bfi	r2, r3, #6, #3
   1b6b0:	230c      	movs	r3, #12
   1b6b2:	f363 2252 	bfi	r2, r3, #9, #10
   1b6b6:	4623      	mov	r3, r4
   1b6b8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b6bc:	4931      	ldr	r1, [pc, #196]	; (1b784 <att_chan_new+0x124>)
   1b6be:	a808      	add	r0, sp, #32
   1b6c0:	f008 fc44 	bl	23f4c <z_log_msg2_finalize>
			return NULL;
   1b6c4:	e033      	b.n	1b72e <att_chan_new+0xce>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b6c6:	9301      	str	r3, [sp, #4]
   1b6c8:	9c01      	ldr	r4, [sp, #4]
   1b6ca:	b174      	cbz	r4, 1b6ea <att_chan_new+0x8a>
		if (chan->att == att) {
   1b6cc:	6823      	ldr	r3, [r4, #0]
   1b6ce:	42ab      	cmp	r3, r5
   1b6d0:	d0d1      	beq.n	1b676 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   1b6d2:	2a01      	cmp	r2, #1
   1b6d4:	d0d1      	beq.n	1b67a <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b6d6:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1b6da:	d0f4      	beq.n	1b6c6 <att_chan_new+0x66>
	return node->next;
   1b6dc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b6e0:	2b00      	cmp	r3, #0
   1b6e2:	d0f0      	beq.n	1b6c6 <att_chan_new+0x66>
   1b6e4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1b6e8:	e7ed      	b.n	1b6c6 <att_chan_new+0x66>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1b6ea:	2200      	movs	r2, #0
   1b6ec:	2300      	movs	r3, #0
   1b6ee:	a901      	add	r1, sp, #4
   1b6f0:	4825      	ldr	r0, [pc, #148]	; (1b788 <att_chan_new+0x128>)
   1b6f2:	f005 fa8d 	bl	20c10 <k_mem_slab_alloc>
   1b6f6:	b9e8      	cbnz	r0, 1b734 <att_chan_new+0xd4>
   1b6f8:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b6fc:	2100      	movs	r1, #0
   1b6fe:	9801      	ldr	r0, [sp, #4]
   1b700:	f00c feee 	bl	284e0 <memset>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
	chan->chan.chan.ops = &ops;
   1b704:	9801      	ldr	r0, [sp, #4]
   1b706:	4b21      	ldr	r3, [pc, #132]	; (1b78c <att_chan_new+0x12c>)
   1b708:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   1b70a:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   1b70c:	f00c fa56 	bl	27bbc <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   1b710:	9b01      	ldr	r3, [sp, #4]
   1b712:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b714:	f3bf 8f5b 	dmb	ish
   1b718:	e853 2f00 	ldrex	r2, [r3]
   1b71c:	e843 6100 	strex	r1, r6, [r3]
   1b720:	2900      	cmp	r1, #0
   1b722:	d1f9      	bne.n	1b718 <att_chan_new+0xb8>
   1b724:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1b728:	9b01      	ldr	r3, [sp, #4]
   1b72a:	601d      	str	r5, [r3, #0]

	return chan;
   1b72c:	9c01      	ldr	r4, [sp, #4]
}
   1b72e:	4620      	mov	r0, r4
   1b730:	b00e      	add	sp, #56	; 0x38
   1b732:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1b734:	4b16      	ldr	r3, [pc, #88]	; (1b790 <att_chan_new+0x130>)
   1b736:	9306      	str	r3, [sp, #24]
   1b738:	682b      	ldr	r3, [r5, #0]
   1b73a:	9307      	str	r3, [sp, #28]
   1b73c:	2300      	movs	r3, #0
   1b73e:	f8ad 3001 	strh.w	r3, [sp, #1]
   1b742:	f88d 3003 	strb.w	r3, [sp, #3]
   1b746:	2203      	movs	r2, #3
   1b748:	f88d 2000 	strb.w	r2, [sp]
   1b74c:	f88d 3002 	strb.w	r3, [sp, #2]
   1b750:	9a00      	ldr	r2, [sp, #0]
   1b752:	9205      	str	r2, [sp, #20]
   1b754:	461a      	mov	r2, r3
   1b756:	f363 0200 	bfi	r2, r3, #0, #1
   1b75a:	f363 0241 	bfi	r2, r3, #1, #1
   1b75e:	f363 0282 	bfi	r2, r3, #2, #1
   1b762:	f363 02c5 	bfi	r2, r3, #3, #3
   1b766:	2101      	movs	r1, #1
   1b768:	f361 1288 	bfi	r2, r1, #6, #3
   1b76c:	210c      	movs	r1, #12
   1b76e:	f361 2252 	bfi	r2, r1, #9, #10
   1b772:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b776:	4903      	ldr	r1, [pc, #12]	; (1b784 <att_chan_new+0x124>)
   1b778:	a802      	add	r0, sp, #8
   1b77a:	f008 fbe7 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1b77e:	e7d6      	b.n	1b72e <att_chan_new+0xce>
   1b780:	0002a400 	.word	0x0002a400
   1b784:	00028884 	.word	0x00028884
   1b788:	20000834 	.word	0x20000834
   1b78c:	200005e4 	.word	0x200005e4
   1b790:	0002a428 	.word	0x0002a428

0001b794 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1b794:	b570      	push	{r4, r5, r6, lr}
   1b796:	b088      	sub	sp, #32
   1b798:	4604      	mov	r4, r0
   1b79a:	460d      	mov	r5, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1b79c:	2200      	movs	r2, #0
   1b79e:	2300      	movs	r3, #0
   1b7a0:	a901      	add	r1, sp, #4
   1b7a2:	4822      	ldr	r0, [pc, #136]	; (1b82c <bt_att_accept+0x98>)
   1b7a4:	f005 fa34 	bl	20c10 <k_mem_slab_alloc>
   1b7a8:	b9b0      	cbnz	r0, 1b7d8 <bt_att_accept+0x44>
   1b7aa:	4606      	mov	r6, r0
   1b7ac:	222c      	movs	r2, #44	; 0x2c
   1b7ae:	2100      	movs	r1, #0
   1b7b0:	9801      	ldr	r0, [sp, #4]
   1b7b2:	f00c fe95 	bl	284e0 <memset>
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   1b7b6:	9b01      	ldr	r3, [sp, #4]
   1b7b8:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1b7ba:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   1b7bc:	2100      	movs	r1, #0
   1b7be:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   1b7c0:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   1b7c2:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   1b7c4:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   1b7c6:	f7ff ff4b 	bl	1b660 <att_chan_new>
	if (!chan) {
   1b7ca:	4603      	mov	r3, r0
   1b7cc:	b358      	cbz	r0, 1b826 <bt_att_accept+0x92>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1b7ce:	3308      	adds	r3, #8
   1b7d0:	602b      	str	r3, [r5, #0]

	return 0;
}
   1b7d2:	4630      	mov	r0, r6
   1b7d4:	b008      	add	sp, #32
   1b7d6:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("No available ATT context for conn %p", conn);
   1b7d8:	4b15      	ldr	r3, [pc, #84]	; (1b830 <bt_att_accept+0x9c>)
   1b7da:	9306      	str	r3, [sp, #24]
   1b7dc:	9407      	str	r4, [sp, #28]
   1b7de:	2300      	movs	r3, #0
   1b7e0:	f8ad 3001 	strh.w	r3, [sp, #1]
   1b7e4:	f88d 3003 	strb.w	r3, [sp, #3]
   1b7e8:	2203      	movs	r2, #3
   1b7ea:	f88d 2000 	strb.w	r2, [sp]
   1b7ee:	f88d 3002 	strb.w	r3, [sp, #2]
   1b7f2:	9a00      	ldr	r2, [sp, #0]
   1b7f4:	9205      	str	r2, [sp, #20]
   1b7f6:	461a      	mov	r2, r3
   1b7f8:	f363 0200 	bfi	r2, r3, #0, #1
   1b7fc:	f363 0241 	bfi	r2, r3, #1, #1
   1b800:	f363 0282 	bfi	r2, r3, #2, #1
   1b804:	f363 02c5 	bfi	r2, r3, #3, #3
   1b808:	2101      	movs	r1, #1
   1b80a:	f361 1288 	bfi	r2, r1, #6, #3
   1b80e:	210c      	movs	r1, #12
   1b810:	f361 2252 	bfi	r2, r1, #9, #10
   1b814:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b818:	4906      	ldr	r1, [pc, #24]	; (1b834 <bt_att_accept+0xa0>)
   1b81a:	a802      	add	r0, sp, #8
   1b81c:	f008 fb96 	bl	23f4c <z_log_msg2_finalize>
		return -ENOMEM;
   1b820:	f06f 060b 	mvn.w	r6, #11
   1b824:	e7d5      	b.n	1b7d2 <bt_att_accept+0x3e>
		return -ENOMEM;
   1b826:	f06f 060b 	mvn.w	r6, #11
   1b82a:	e7d2      	b.n	1b7d2 <bt_att_accept+0x3e>
   1b82c:	20000818 	.word	0x20000818
   1b830:	0002a450 	.word	0x0002a450
   1b834:	00028884 	.word	0x00028884

0001b838 <bt_att_released>:
{
   1b838:	b500      	push	{lr}
   1b83a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1b83c:	3808      	subs	r0, #8
   1b83e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1b840:	a901      	add	r1, sp, #4
   1b842:	4803      	ldr	r0, [pc, #12]	; (1b850 <bt_att_released+0x18>)
   1b844:	f00c f8a5 	bl	27992 <k_mem_slab_free>
}
   1b848:	b003      	add	sp, #12
   1b84a:	f85d fb04 	ldr.w	pc, [sp], #4
   1b84e:	bf00      	nop
   1b850:	20000834 	.word	0x20000834

0001b854 <chan_send>:
{
   1b854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b858:	b08b      	sub	sp, #44	; 0x2c
   1b85a:	4604      	mov	r4, r0
   1b85c:	460d      	mov	r5, r1
   1b85e:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   1b860:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1b862:	781b      	ldrb	r3, [r3, #0]
   1b864:	2bd2      	cmp	r3, #210	; 0xd2
   1b866:	d022      	beq.n	1b8ae <chan_send+0x5a>
	state->offset = net_buf_simple_headroom(buf);
   1b868:	f105 0008 	add.w	r0, r5, #8
   1b86c:	f00a ff10 	bl	26690 <net_buf_simple_headroom>
   1b870:	b287      	uxth	r7, r0
	state->len = buf->len;
   1b872:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   1b876:	2e00      	cmp	r6, #0
   1b878:	d047      	beq.n	1b90a <chan_send+0xb6>
   1b87a:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1b87e:	f854 8b08 	ldr.w	r8, [r4], #8
   1b882:	4630      	mov	r0, r6
   1b884:	f7ff fe24 	bl	1b4d0 <att_cb>
   1b888:	4603      	mov	r3, r0
   1b88a:	f8d8 0000 	ldr.w	r0, [r8]
   1b88e:	9400      	str	r4, [sp, #0]
   1b890:	462a      	mov	r2, r5
   1b892:	2104      	movs	r1, #4
   1b894:	f009 fb80 	bl	24f98 <bt_l2cap_send_cb>
	if (err) {
   1b898:	4680      	mov	r8, r0
   1b89a:	b120      	cbz	r0, 1b8a6 <chan_send+0x52>
	buf->data = buf->__buf + state->offset;
   1b89c:	6928      	ldr	r0, [r5, #16]
   1b89e:	4438      	add	r0, r7
   1b8a0:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   1b8a2:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   1b8a6:	4640      	mov	r0, r8
   1b8a8:	b00b      	add	sp, #44	; 0x2c
   1b8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1b8ae:	6803      	ldr	r3, [r0, #0]
   1b8b0:	6818      	ldr	r0, [r3, #0]
   1b8b2:	f00a fd5a 	bl	2636a <bt_smp_sign>
		if (err) {
   1b8b6:	4680      	mov	r8, r0
   1b8b8:	2800      	cmp	r0, #0
   1b8ba:	d0d5      	beq.n	1b868 <chan_send+0x14>
			BT_ERR("Error signing data");
   1b8bc:	4b15      	ldr	r3, [pc, #84]	; (1b914 <chan_send+0xc0>)
   1b8be:	9308      	str	r3, [sp, #32]
   1b8c0:	2300      	movs	r3, #0
   1b8c2:	f8ad 300d 	strh.w	r3, [sp, #13]
   1b8c6:	f88d 300f 	strb.w	r3, [sp, #15]
   1b8ca:	2202      	movs	r2, #2
   1b8cc:	f88d 200c 	strb.w	r2, [sp, #12]
   1b8d0:	f88d 300e 	strb.w	r3, [sp, #14]
   1b8d4:	9a03      	ldr	r2, [sp, #12]
   1b8d6:	9207      	str	r2, [sp, #28]
   1b8d8:	461a      	mov	r2, r3
   1b8da:	f363 0200 	bfi	r2, r3, #0, #1
   1b8de:	f363 0241 	bfi	r2, r3, #1, #1
   1b8e2:	f363 0282 	bfi	r2, r3, #2, #1
   1b8e6:	f363 02c5 	bfi	r2, r3, #3, #3
   1b8ea:	2101      	movs	r1, #1
   1b8ec:	f361 1288 	bfi	r2, r1, #6, #3
   1b8f0:	2108      	movs	r1, #8
   1b8f2:	f361 2252 	bfi	r2, r1, #9, #10
   1b8f6:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1b8fa:	4907      	ldr	r1, [pc, #28]	; (1b918 <chan_send+0xc4>)
   1b8fc:	a804      	add	r0, sp, #16
   1b8fe:	f008 fb25 	bl	23f4c <z_log_msg2_finalize>
			net_buf_unref(buf);
   1b902:	4628      	mov	r0, r5
   1b904:	f00a fe42 	bl	2658c <net_buf_unref>
			return err;
   1b908:	e7cd      	b.n	1b8a6 <chan_send+0x52>
	chan->sent = cb ? cb : chan_cb(buf);
   1b90a:	4628      	mov	r0, r5
   1b90c:	f7ff fe00 	bl	1b510 <chan_cb>
   1b910:	4606      	mov	r6, r0
   1b912:	e7b2      	b.n	1b87a <chan_send+0x26>
   1b914:	0002a478 	.word	0x0002a478
   1b918:	00028884 	.word	0x00028884

0001b91c <read_group_cb>:
{
   1b91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b91e:	b085      	sub	sp, #20
   1b920:	4605      	mov	r5, r0
   1b922:	460e      	mov	r6, r1
   1b924:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b926:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b928:	2300      	movs	r3, #0
   1b92a:	f88d 3008 	strb.w	r3, [sp, #8]
   1b92e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b932:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b936:	a902      	add	r1, sp, #8
   1b938:	6800      	ldr	r0, [r0, #0]
   1b93a:	f008 fd59 	bl	243f0 <bt_uuid_cmp>
   1b93e:	b158      	cbz	r0, 1b958 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b940:	2300      	movs	r3, #0
   1b942:	f88d 300c 	strb.w	r3, [sp, #12]
   1b946:	f642 0301 	movw	r3, #10241	; 0x2801
   1b94a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b94e:	a903      	add	r1, sp, #12
   1b950:	6828      	ldr	r0, [r5, #0]
   1b952:	f008 fd4d 	bl	243f0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b956:	bb30      	cbnz	r0, 1b9a6 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b958:	6861      	ldr	r1, [r4, #4]
   1b95a:	6828      	ldr	r0, [r5, #0]
   1b95c:	f008 fd48 	bl	243f0 <bt_uuid_cmp>
   1b960:	bb48      	cbnz	r0, 1b9b6 <read_group_cb+0x9a>
	if (data->rsp->len &&
   1b962:	68e3      	ldr	r3, [r4, #12]
   1b964:	781a      	ldrb	r2, [r3, #0]
   1b966:	b132      	cbz	r2, 1b976 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1b968:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1b96c:	68a1      	ldr	r1, [r4, #8]
   1b96e:	8989      	ldrh	r1, [r1, #12]
   1b970:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1b972:	4293      	cmp	r3, r2
   1b974:	db24      	blt.n	1b9c0 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1b976:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1b978:	2104      	movs	r1, #4
   1b97a:	3008      	adds	r0, #8
   1b97c:	f00a fe50 	bl	26620 <net_buf_simple_add>
   1b980:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1b982:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1b984:	6923      	ldr	r3, [r4, #16]
   1b986:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1b988:	9401      	str	r4, [sp, #4]
   1b98a:	4b10      	ldr	r3, [pc, #64]	; (1b9cc <read_group_cb+0xb0>)
   1b98c:	9300      	str	r3, [sp, #0]
   1b98e:	2300      	movs	r3, #0
   1b990:	68a2      	ldr	r2, [r4, #8]
   1b992:	4629      	mov	r1, r5
   1b994:	4638      	mov	r0, r7
   1b996:	f009 fe03 	bl	255a0 <att_chan_read>
	if (read < 0) {
   1b99a:	2800      	cmp	r0, #0
   1b99c:	db12      	blt.n	1b9c4 <read_group_cb+0xa8>
	if (!data->group) {
   1b99e:	6923      	ldr	r3, [r4, #16]
   1b9a0:	b193      	cbz	r3, 1b9c8 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   1b9a2:	2001      	movs	r0, #1
   1b9a4:	e00a      	b.n	1b9bc <read_group_cb+0xa0>
		if (data->group &&
   1b9a6:	6923      	ldr	r3, [r4, #16]
   1b9a8:	b11b      	cbz	r3, 1b9b2 <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1b9aa:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1b9ac:	42b2      	cmp	r2, r6
   1b9ae:	d200      	bcs.n	1b9b2 <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1b9b0:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1b9b2:	2001      	movs	r0, #1
   1b9b4:	e002      	b.n	1b9bc <read_group_cb+0xa0>
		data->group = NULL;
   1b9b6:	2300      	movs	r3, #0
   1b9b8:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1b9ba:	2001      	movs	r0, #1
}
   1b9bc:	b005      	add	sp, #20
   1b9be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1b9c0:	2000      	movs	r0, #0
   1b9c2:	e7fb      	b.n	1b9bc <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1b9c4:	2000      	movs	r0, #0
   1b9c6:	e7f9      	b.n	1b9bc <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1b9c8:	2000      	movs	r0, #0
   1b9ca:	e7f7      	b.n	1b9bc <read_group_cb+0xa0>
   1b9cc:	00025129 	.word	0x00025129

0001b9d0 <read_type_cb>:
{
   1b9d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b9d4:	b083      	sub	sp, #12
   1b9d6:	4606      	mov	r6, r0
   1b9d8:	4688      	mov	r8, r1
   1b9da:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1b9dc:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b9de:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1b9e0:	6851      	ldr	r1, [r2, #4]
   1b9e2:	6800      	ldr	r0, [r0, #0]
   1b9e4:	f008 fd04 	bl	243f0 <bt_uuid_cmp>
   1b9e8:	b120      	cbz	r0, 1b9f4 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1b9ea:	2501      	movs	r5, #1
}
   1b9ec:	4628      	mov	r0, r5
   1b9ee:	b003      	add	sp, #12
   1b9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1b9f4:	2215      	movs	r2, #21
   1b9f6:	4631      	mov	r1, r6
   1b9f8:	4628      	mov	r0, r5
   1b9fa:	f00a fc15 	bl	26228 <bt_gatt_check_perm>
   1b9fe:	4605      	mov	r5, r0
   1ba00:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1ba02:	b130      	cbz	r0, 1ba12 <read_type_cb+0x42>
		if (data->rsp->len) {
   1ba04:	68e3      	ldr	r3, [r4, #12]
   1ba06:	781b      	ldrb	r3, [r3, #0]
   1ba08:	b10b      	cbz	r3, 1ba0e <read_type_cb+0x3e>
			data->err = 0x00;
   1ba0a:	2300      	movs	r3, #0
   1ba0c:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ba0e:	2500      	movs	r5, #0
   1ba10:	e7ec      	b.n	1b9ec <read_type_cb+0x1c>
	data->err = 0x00;
   1ba12:	f04f 0900 	mov.w	r9, #0
   1ba16:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ba1a:	68a0      	ldr	r0, [r4, #8]
   1ba1c:	f00a fde0 	bl	265e0 <net_buf_frag_last>
   1ba20:	2102      	movs	r1, #2
   1ba22:	3008      	adds	r0, #8
   1ba24:	f00a fdfc 	bl	26620 <net_buf_simple_add>
   1ba28:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1ba2a:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ba2e:	9401      	str	r4, [sp, #4]
   1ba30:	4b11      	ldr	r3, [pc, #68]	; (1ba78 <read_type_cb+0xa8>)
   1ba32:	9300      	str	r3, [sp, #0]
   1ba34:	464b      	mov	r3, r9
   1ba36:	68a2      	ldr	r2, [r4, #8]
   1ba38:	4631      	mov	r1, r6
   1ba3a:	4638      	mov	r0, r7
   1ba3c:	f009 fdb0 	bl	255a0 <att_chan_read>
	if (read < 0) {
   1ba40:	2800      	cmp	r0, #0
   1ba42:	db07      	blt.n	1ba54 <read_type_cb+0x84>
	if (!data->item) {
   1ba44:	6923      	ldr	r3, [r4, #16]
   1ba46:	2b00      	cmp	r3, #0
   1ba48:	d0d0      	beq.n	1b9ec <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ba4a:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   1ba4e:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1ba50:	2200      	movs	r2, #0

	while (buf) {
   1ba52:	e006      	b.n	1ba62 <read_type_cb+0x92>
		data->err = err_to_att(read);
   1ba54:	f009 fb4c 	bl	250f0 <err_to_att>
   1ba58:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ba5a:	e7c7      	b.n	1b9ec <read_type_cb+0x1c>
		bytes += buf->len;
   1ba5c:	8999      	ldrh	r1, [r3, #12]
   1ba5e:	440a      	add	r2, r1
		buf = buf->frags;
   1ba60:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1ba62:	2b00      	cmp	r3, #0
   1ba64:	d1fa      	bne.n	1ba5c <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ba66:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ba68:	68e3      	ldr	r3, [r4, #12]
   1ba6a:	781d      	ldrb	r5, [r3, #0]
   1ba6c:	42aa      	cmp	r2, r5
   1ba6e:	bf94      	ite	ls
   1ba70:	2500      	movls	r5, #0
   1ba72:	2501      	movhi	r5, #1
   1ba74:	e7ba      	b.n	1b9ec <read_type_cb+0x1c>
   1ba76:	bf00      	nop
   1ba78:	00025101 	.word	0x00025101

0001ba7c <find_type_cb>:
{
   1ba7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba80:	b0a1      	sub	sp, #132	; 0x84
   1ba82:	4606      	mov	r6, r0
   1ba84:	460f      	mov	r7, r1
   1ba86:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   1ba88:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ba8c:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ba90:	2300      	movs	r3, #0
   1ba92:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1ba96:	f642 0301 	movw	r3, #10241	; 0x2801
   1ba9a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   1ba9e:	a912      	add	r1, sp, #72	; 0x48
   1baa0:	6800      	ldr	r0, [r0, #0]
   1baa2:	f008 fca5 	bl	243f0 <bt_uuid_cmp>
   1baa6:	b928      	cbnz	r0, 1bab4 <find_type_cb+0x38>
	data->group = NULL;
   1baa8:	2300      	movs	r3, #0
   1baaa:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   1baac:	2001      	movs	r0, #1
}
   1baae:	b021      	add	sp, #132	; 0x84
   1bab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1bab4:	2300      	movs	r3, #0
   1bab6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
   1baba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1babe:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
   1bac2:	a913      	add	r1, sp, #76	; 0x4c
   1bac4:	6830      	ldr	r0, [r6, #0]
   1bac6:	f008 fc93 	bl	243f0 <bt_uuid_cmp>
   1baca:	b928      	cbnz	r0, 1bad8 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1bacc:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   1bad0:	6868      	ldr	r0, [r5, #4]
   1bad2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1bad4:	2400      	movs	r4, #0
	while (buf) {
   1bad6:	e00a      	b.n	1baee <find_type_cb+0x72>
		if (data->group &&
   1bad8:	68ab      	ldr	r3, [r5, #8]
   1bada:	b11b      	cbz	r3, 1bae4 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1badc:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1bade:	42ba      	cmp	r2, r7
   1bae0:	d200      	bcs.n	1bae4 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1bae2:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1bae4:	2001      	movs	r0, #1
   1bae6:	e7e2      	b.n	1baae <find_type_cb+0x32>
		bytes += buf->len;
   1bae8:	899a      	ldrh	r2, [r3, #12]
   1baea:	4414      	add	r4, r2
		buf = buf->frags;
   1baec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1baee:	2b00      	cmp	r3, #0
   1baf0:	d1fa      	bne.n	1bae8 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1baf2:	1b0c      	subs	r4, r1, r4
   1baf4:	2c03      	cmp	r4, #3
   1baf6:	d801      	bhi.n	1bafc <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   1baf8:	2000      	movs	r0, #0
   1bafa:	e7d8      	b.n	1baae <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   1bafc:	f00a fd70 	bl	265e0 <net_buf_frag_last>
   1bb00:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1bb02:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   1bb06:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1bb08:	2200      	movs	r2, #0
	while (buf) {
   1bb0a:	b11b      	cbz	r3, 1bb14 <find_type_cb+0x98>
		bytes += buf->len;
   1bb0c:	8999      	ldrh	r1, [r3, #12]
   1bb0e:	440a      	add	r2, r1
		buf = buf->frags;
   1bb10:	681b      	ldr	r3, [r3, #0]
   1bb12:	e7fa      	b.n	1bb0a <find_type_cb+0x8e>
   1bb14:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1bb18:	f104 0b08 	add.w	fp, r4, #8
   1bb1c:	4658      	mov	r0, fp
   1bb1e:	f00a fdbb 	bl	26698 <net_buf_simple_tailroom>
   1bb22:	4582      	cmp	sl, r0
   1bb24:	d22c      	bcs.n	1bb80 <find_type_cb+0x104>
   1bb26:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   1bb2a:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1bb2c:	2200      	movs	r2, #0
	while (buf) {
   1bb2e:	e002      	b.n	1bb36 <find_type_cb+0xba>
		bytes += buf->len;
   1bb30:	8999      	ldrh	r1, [r3, #12]
   1bb32:	440a      	add	r2, r1
		buf = buf->frags;
   1bb34:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1bb36:	2b00      	cmp	r3, #0
   1bb38:	d1fa      	bne.n	1bb30 <find_type_cb+0xb4>
   1bb3a:	1a80      	subs	r0, r0, r2
	if (!len) {
   1bb3c:	b320      	cbz	r0, 1bb88 <find_type_cb+0x10c>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1bb3e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1bb42:	2300      	movs	r3, #0
   1bb44:	9300      	str	r3, [sp, #0]
   1bb46:	2310      	movs	r3, #16
   1bb48:	aa0e      	add	r2, sp, #56	; 0x38
   1bb4a:	4631      	mov	r1, r6
   1bb4c:	4648      	mov	r0, r9
   1bb4e:	47c0      	blx	r8
	if (read < 0) {
   1bb50:	1e06      	subs	r6, r0, #0
   1bb52:	dba9      	blt.n	1baa8 <find_type_cb+0x2c>
	if (read != data->value_len) {
   1bb54:	7c2a      	ldrb	r2, [r5, #16]
   1bb56:	4296      	cmp	r6, r2
   1bb58:	d071      	beq.n	1bc3e <find_type_cb+0x1c2>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1bb5a:	68e9      	ldr	r1, [r5, #12]
   1bb5c:	a809      	add	r0, sp, #36	; 0x24
   1bb5e:	f008 fc65 	bl	2442c <bt_uuid_create>
   1bb62:	b308      	cbz	r0, 1bba8 <find_type_cb+0x12c>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1bb64:	b2f2      	uxtb	r2, r6
   1bb66:	a90e      	add	r1, sp, #56	; 0x38
   1bb68:	a804      	add	r0, sp, #16
   1bb6a:	f008 fc5f 	bl	2442c <bt_uuid_create>
   1bb6e:	2800      	cmp	r0, #0
   1bb70:	d040      	beq.n	1bbf4 <find_type_cb+0x178>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1bb72:	a904      	add	r1, sp, #16
   1bb74:	a809      	add	r0, sp, #36	; 0x24
   1bb76:	f008 fc3b 	bl	243f0 <bt_uuid_cmp>
   1bb7a:	2800      	cmp	r0, #0
   1bb7c:	d067      	beq.n	1bc4e <find_type_cb+0x1d2>
   1bb7e:	e793      	b.n	1baa8 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1bb80:	4658      	mov	r0, fp
   1bb82:	f00a fd89 	bl	26698 <net_buf_simple_tailroom>
   1bb86:	e7d9      	b.n	1bb3c <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1bb88:	686b      	ldr	r3, [r5, #4]
   1bb8a:	7998      	ldrb	r0, [r3, #6]
   1bb8c:	f001 fee0 	bl	1d950 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1bb90:	2200      	movs	r2, #0
   1bb92:	2300      	movs	r3, #0
   1bb94:	f00a fcc7 	bl	26526 <net_buf_alloc_fixed>
		if (!frag) {
   1bb98:	4604      	mov	r4, r0
   1bb9a:	2800      	cmp	r0, #0
   1bb9c:	d087      	beq.n	1baae <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   1bb9e:	4601      	mov	r1, r0
   1bba0:	6868      	ldr	r0, [r5, #4]
   1bba2:	f00a fd2e 	bl	26602 <net_buf_frag_add>
   1bba6:	e7ca      	b.n	1bb3e <find_type_cb+0xc2>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1bba8:	4b2f      	ldr	r3, [pc, #188]	; (1bc68 <find_type_cb+0x1ec>)
   1bbaa:	931e      	str	r3, [sp, #120]	; 0x78
   1bbac:	7c2b      	ldrb	r3, [r5, #16]
   1bbae:	931f      	str	r3, [sp, #124]	; 0x7c
   1bbb0:	2300      	movs	r3, #0
   1bbb2:	f8ad 3011 	strh.w	r3, [sp, #17]
   1bbb6:	f88d 3013 	strb.w	r3, [sp, #19]
   1bbba:	2203      	movs	r2, #3
   1bbbc:	f88d 2010 	strb.w	r2, [sp, #16]
   1bbc0:	f88d 3012 	strb.w	r3, [sp, #18]
   1bbc4:	9a04      	ldr	r2, [sp, #16]
   1bbc6:	921d      	str	r2, [sp, #116]	; 0x74
   1bbc8:	461a      	mov	r2, r3
   1bbca:	f363 0200 	bfi	r2, r3, #0, #1
   1bbce:	f363 0241 	bfi	r2, r3, #1, #1
   1bbd2:	f363 0282 	bfi	r2, r3, #2, #1
   1bbd6:	f363 02c5 	bfi	r2, r3, #3, #3
   1bbda:	2102      	movs	r1, #2
   1bbdc:	f361 1288 	bfi	r2, r1, #6, #3
   1bbe0:	210c      	movs	r1, #12
   1bbe2:	f361 2252 	bfi	r2, r1, #9, #10
   1bbe6:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bbea:	4920      	ldr	r1, [pc, #128]	; (1bc6c <find_type_cb+0x1f0>)
   1bbec:	a81a      	add	r0, sp, #104	; 0x68
   1bbee:	f008 f9ad 	bl	23f4c <z_log_msg2_finalize>
			goto skip;
   1bbf2:	e759      	b.n	1baa8 <find_type_cb+0x2c>
			BT_WARN("Unable to create UUID: size %d", read);
   1bbf4:	4b1e      	ldr	r3, [pc, #120]	; (1bc70 <find_type_cb+0x1f4>)
   1bbf6:	9318      	str	r3, [sp, #96]	; 0x60
   1bbf8:	9619      	str	r6, [sp, #100]	; 0x64
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	f8ad 300d 	strh.w	r3, [sp, #13]
   1bc00:	f88d 300f 	strb.w	r3, [sp, #15]
   1bc04:	2203      	movs	r2, #3
   1bc06:	f88d 200c 	strb.w	r2, [sp, #12]
   1bc0a:	f88d 300e 	strb.w	r3, [sp, #14]
   1bc0e:	9a03      	ldr	r2, [sp, #12]
   1bc10:	9217      	str	r2, [sp, #92]	; 0x5c
   1bc12:	461a      	mov	r2, r3
   1bc14:	f363 0200 	bfi	r2, r3, #0, #1
   1bc18:	f363 0241 	bfi	r2, r3, #1, #1
   1bc1c:	f363 0282 	bfi	r2, r3, #2, #1
   1bc20:	f363 02c5 	bfi	r2, r3, #3, #3
   1bc24:	2102      	movs	r1, #2
   1bc26:	f361 1288 	bfi	r2, r1, #6, #3
   1bc2a:	210c      	movs	r1, #12
   1bc2c:	f361 2252 	bfi	r2, r1, #9, #10
   1bc30:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bc34:	490d      	ldr	r1, [pc, #52]	; (1bc6c <find_type_cb+0x1f0>)
   1bc36:	a814      	add	r0, sp, #80	; 0x50
   1bc38:	f008 f988 	bl	23f4c <z_log_msg2_finalize>
			goto skip;
   1bc3c:	e734      	b.n	1baa8 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   1bc3e:	4632      	mov	r2, r6
   1bc40:	a90e      	add	r1, sp, #56	; 0x38
   1bc42:	68e8      	ldr	r0, [r5, #12]
   1bc44:	f00c fc1d 	bl	28482 <memcmp>
   1bc48:	2800      	cmp	r0, #0
   1bc4a:	f47f af2d 	bne.w	1baa8 <find_type_cb+0x2c>
	data->err = 0x00;
   1bc4e:	2300      	movs	r3, #0
   1bc50:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   1bc52:	2104      	movs	r1, #4
   1bc54:	f104 0008 	add.w	r0, r4, #8
   1bc58:	f00a fce2 	bl	26620 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1bc5c:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1bc5e:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1bc60:	68ab      	ldr	r3, [r5, #8]
   1bc62:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1bc64:	2001      	movs	r0, #1
   1bc66:	e722      	b.n	1baae <find_type_cb+0x32>
   1bc68:	0002a48c 	.word	0x0002a48c
   1bc6c:	00028884 	.word	0x00028884
   1bc70:	0002a4ac 	.word	0x0002a4ac

0001bc74 <bt_att_connected>:
{
   1bc74:	b538      	push	{r3, r4, r5, lr}
   1bc76:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   1bc78:	4605      	mov	r5, r0
   1bc7a:	f855 0908 	ldr.w	r0, [r5], #-8
   1bc7e:	f009 fe08 	bl	25892 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   1bc82:	4629      	mov	r1, r5
   1bc84:	6800      	ldr	r0, [r0, #0]
   1bc86:	f009 fae7 	bl	25258 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bc8a:	f3bf 8f5b 	dmb	ish
   1bc8e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1bc92:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1bc96:	f013 0f08 	tst.w	r3, #8
   1bc9a:	d104      	bne.n	1bca6 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1bc9c:	2317      	movs	r3, #23
   1bc9e:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1bca2:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1bca6:	4628      	mov	r0, r5
   1bca8:	f009 fdad 	bl	25806 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1bcac:	4902      	ldr	r1, [pc, #8]	; (1bcb8 <bt_att_connected+0x44>)
   1bcae:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1bcb2:	f00c f891 	bl	27dd8 <k_work_init_delayable>
}
   1bcb6:	bd38      	pop	{r3, r4, r5, pc}
   1bcb8:	0001c7b1 	.word	0x0001c7b1

0001bcbc <bt_att_chan_create_pdu>:
{
   1bcbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcbe:	b089      	sub	sp, #36	; 0x24
   1bcc0:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1bcc2:	3201      	adds	r2, #1
   1bcc4:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1bcc8:	429a      	cmp	r2, r3
   1bcca:	d811      	bhi.n	1bcf0 <bt_att_chan_create_pdu+0x34>
   1bccc:	460d      	mov	r5, r1
	switch (att_op_get_type(op)) {
   1bcce:	4608      	mov	r0, r1
   1bcd0:	f009 fa41 	bl	25156 <att_op_get_type>
   1bcd4:	2802      	cmp	r0, #2
   1bcd6:	d04e      	beq.n	1bd76 <bt_att_chan_create_pdu+0xba>
   1bcd8:	2804      	cmp	r0, #4
   1bcda:	d04c      	beq.n	1bd76 <bt_att_chan_create_pdu+0xba>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1bcdc:	f04f 32ff 	mov.w	r2, #4294967295
   1bce0:	f04f 33ff 	mov.w	r3, #4294967295
   1bce4:	2100      	movs	r1, #0
   1bce6:	4608      	mov	r0, r1
   1bce8:	f009 f951 	bl	24f8e <bt_l2cap_create_pdu_timeout>
   1bcec:	4604      	mov	r4, r0
   1bcee:	e04a      	b.n	1bd86 <bt_att_chan_create_pdu+0xca>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1bcf0:	466d      	mov	r5, sp
   1bcf2:	b088      	sub	sp, #32
   1bcf4:	466c      	mov	r4, sp
   1bcf6:	f114 030c 	adds.w	r3, r4, #12
   1bcfa:	d036      	beq.n	1bd6a <bt_att_chan_create_pdu+0xae>
   1bcfc:	2110      	movs	r1, #16
   1bcfe:	b11b      	cbz	r3, 1bd08 <bt_att_chan_create_pdu+0x4c>
   1bd00:	2904      	cmp	r1, #4
   1bd02:	dd01      	ble.n	1bd08 <bt_att_chan_create_pdu+0x4c>
   1bd04:	4e37      	ldr	r6, [pc, #220]	; (1bde4 <bt_att_chan_create_pdu+0x128>)
   1bd06:	6126      	str	r6, [r4, #16]
   1bd08:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
   1bd0c:	b113      	cbz	r3, 1bd14 <bt_att_chan_create_pdu+0x58>
   1bd0e:	2908      	cmp	r1, #8
   1bd10:	dd00      	ble.n	1bd14 <bt_att_chan_create_pdu+0x58>
   1bd12:	6160      	str	r0, [r4, #20]
   1bd14:	b113      	cbz	r3, 1bd1c <bt_att_chan_create_pdu+0x60>
   1bd16:	290c      	cmp	r1, #12
   1bd18:	dd00      	ble.n	1bd1c <bt_att_chan_create_pdu+0x60>
   1bd1a:	61a2      	str	r2, [r4, #24]
   1bd1c:	290f      	cmp	r1, #15
   1bd1e:	dd27      	ble.n	1bd70 <bt_att_chan_create_pdu+0xb4>
   1bd20:	2110      	movs	r1, #16
   1bd22:	b143      	cbz	r3, 1bd36 <bt_att_chan_create_pdu+0x7a>
   1bd24:	2300      	movs	r3, #0
   1bd26:	f8a7 3005 	strh.w	r3, [r7, #5]
   1bd2a:	71fb      	strb	r3, [r7, #7]
   1bd2c:	2204      	movs	r2, #4
   1bd2e:	713a      	strb	r2, [r7, #4]
   1bd30:	71bb      	strb	r3, [r7, #6]
   1bd32:	687b      	ldr	r3, [r7, #4]
   1bd34:	60e3      	str	r3, [r4, #12]
   1bd36:	2200      	movs	r2, #0
   1bd38:	f36f 0200 	bfc	r2, #0, #1
   1bd3c:	f36f 0241 	bfc	r2, #1, #1
   1bd40:	f36f 0282 	bfc	r2, #2, #1
   1bd44:	f36f 02c5 	bfc	r2, #3, #3
   1bd48:	2302      	movs	r3, #2
   1bd4a:	f363 1288 	bfi	r2, r3, #6, #3
   1bd4e:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   1bd52:	f363 2252 	bfi	r2, r3, #9, #10
   1bd56:	2300      	movs	r3, #0
   1bd58:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bd5c:	4922      	ldr	r1, [pc, #136]	; (1bde8 <bt_att_chan_create_pdu+0x12c>)
   1bd5e:	4620      	mov	r0, r4
   1bd60:	f008 f8f4 	bl	23f4c <z_log_msg2_finalize>
   1bd64:	46ad      	mov	sp, r5
		return NULL;
   1bd66:	2400      	movs	r4, #0
   1bd68:	e014      	b.n	1bd94 <bt_att_chan_create_pdu+0xd8>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1bd6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bd6e:	e7c6      	b.n	1bcfe <bt_att_chan_create_pdu+0x42>
   1bd70:	f06f 011b 	mvn.w	r1, #27
   1bd74:	e7d5      	b.n	1bd22 <bt_att_chan_create_pdu+0x66>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1bd76:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1bd7a:	2300      	movs	r3, #0
   1bd7c:	2100      	movs	r1, #0
   1bd7e:	4608      	mov	r0, r1
   1bd80:	f009 f905 	bl	24f8e <bt_l2cap_create_pdu_timeout>
   1bd84:	4604      	mov	r4, r0
	if (!buf) {
   1bd86:	b14c      	cbz	r4, 1bd9c <bt_att_chan_create_pdu+0xe0>
   1bd88:	2101      	movs	r1, #1
   1bd8a:	f104 0008 	add.w	r0, r4, #8
   1bd8e:	f00a fc47 	bl	26620 <net_buf_simple_add>
	hdr->code = op;
   1bd92:	7005      	strb	r5, [r0, #0]
}
   1bd94:	4620      	mov	r0, r4
   1bd96:	3724      	adds	r7, #36	; 0x24
   1bd98:	46bd      	mov	sp, r7
   1bd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1bd9c:	4b13      	ldr	r3, [pc, #76]	; (1bdec <bt_att_chan_create_pdu+0x130>)
   1bd9e:	61bb      	str	r3, [r7, #24]
   1bda0:	61fd      	str	r5, [r7, #28]
   1bda2:	2300      	movs	r3, #0
   1bda4:	f8a7 3005 	strh.w	r3, [r7, #5]
   1bda8:	71fb      	strb	r3, [r7, #7]
   1bdaa:	2203      	movs	r2, #3
   1bdac:	713a      	strb	r2, [r7, #4]
   1bdae:	71bb      	strb	r3, [r7, #6]
   1bdb0:	687a      	ldr	r2, [r7, #4]
   1bdb2:	617a      	str	r2, [r7, #20]
   1bdb4:	461a      	mov	r2, r3
   1bdb6:	f363 0200 	bfi	r2, r3, #0, #1
   1bdba:	f363 0241 	bfi	r2, r3, #1, #1
   1bdbe:	f363 0282 	bfi	r2, r3, #2, #1
   1bdc2:	f363 02c5 	bfi	r2, r3, #3, #3
   1bdc6:	2101      	movs	r1, #1
   1bdc8:	f361 1288 	bfi	r2, r1, #6, #3
   1bdcc:	210c      	movs	r1, #12
   1bdce:	f361 2252 	bfi	r2, r1, #9, #10
   1bdd2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bdd6:	4904      	ldr	r1, [pc, #16]	; (1bde8 <bt_att_chan_create_pdu+0x12c>)
   1bdd8:	f107 0008 	add.w	r0, r7, #8
   1bddc:	f008 f8b6 	bl	23f4c <z_log_msg2_finalize>
		return NULL;
   1bde0:	e7d8      	b.n	1bd94 <bt_att_chan_create_pdu+0xd8>
   1bde2:	bf00      	nop
   1bde4:	0002a4cc 	.word	0x0002a4cc
   1bde8:	00028884 	.word	0x00028884
   1bdec:	0002a284 	.word	0x0002a284

0001bdf0 <send_err_rsp>:
	if (!req) {
   1bdf0:	b901      	cbnz	r1, 1bdf4 <send_err_rsp+0x4>
   1bdf2:	4770      	bx	lr
{
   1bdf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdf8:	4606      	mov	r6, r0
   1bdfa:	4615      	mov	r5, r2
   1bdfc:	461c      	mov	r4, r3
   1bdfe:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1be00:	2204      	movs	r2, #4
   1be02:	2101      	movs	r1, #1
   1be04:	f7ff ff5a 	bl	1bcbc <bt_att_chan_create_pdu>
	if (!buf) {
   1be08:	4680      	mov	r8, r0
   1be0a:	b160      	cbz	r0, 1be26 <send_err_rsp+0x36>
   1be0c:	2104      	movs	r1, #4
   1be0e:	3008      	adds	r0, #8
   1be10:	f00a fc06 	bl	26620 <net_buf_simple_add>
	rsp->request = req;
   1be14:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   1be16:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1be1a:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1be1c:	4a03      	ldr	r2, [pc, #12]	; (1be2c <send_err_rsp+0x3c>)
   1be1e:	4641      	mov	r1, r8
   1be20:	4630      	mov	r0, r6
   1be22:	f009 fbb0 	bl	25586 <bt_att_chan_send_rsp>
}
   1be26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be2a:	bf00      	nop
   1be2c:	000253db 	.word	0x000253db

0001be30 <bt_att_recv>:
{
   1be30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1be34:	b09b      	sub	sp, #108	; 0x6c
   1be36:	af00      	add	r7, sp, #0
	if (buf->len < sizeof(*hdr)) {
   1be38:	898b      	ldrh	r3, [r1, #12]
   1be3a:	b1bb      	cbz	r3, 1be6c <bt_att_recv+0x3c>
   1be3c:	4680      	mov	r8, r0
   1be3e:	460e      	mov	r6, r1
   1be40:	f1a0 0908 	sub.w	r9, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   1be44:	2101      	movs	r1, #1
   1be46:	f106 0008 	add.w	r0, r6, #8
   1be4a:	f00a fc11 	bl	26670 <net_buf_simple_pull_mem>
   1be4e:	4605      	mov	r5, r0
	if (!att_chan->att) {
   1be50:	f858 3c08 	ldr.w	r3, [r8, #-8]
   1be54:	b35b      	cbz	r3, 1beae <bt_att_recv+0x7e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1be56:	2300      	movs	r3, #0
   1be58:	2b0c      	cmp	r3, #12
   1be5a:	d831      	bhi.n	1bec0 <bt_att_recv+0x90>
		if (hdr->code == handlers[i].op) {
   1be5c:	782c      	ldrb	r4, [r5, #0]
   1be5e:	4a97      	ldr	r2, [pc, #604]	; (1c0bc <bt_att_recv+0x28c>)
   1be60:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1be64:	4294      	cmp	r4, r2
   1be66:	d027      	beq.n	1beb8 <bt_att_recv+0x88>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1be68:	3301      	adds	r3, #1
   1be6a:	e7f5      	b.n	1be58 <bt_att_recv+0x28>
		BT_ERR("Too small ATT PDU received");
   1be6c:	4b94      	ldr	r3, [pc, #592]	; (1c0c0 <bt_att_recv+0x290>)
   1be6e:	663b      	str	r3, [r7, #96]	; 0x60
   1be70:	2300      	movs	r3, #0
   1be72:	f8a7 3005 	strh.w	r3, [r7, #5]
   1be76:	71fb      	strb	r3, [r7, #7]
   1be78:	2202      	movs	r2, #2
   1be7a:	713a      	strb	r2, [r7, #4]
   1be7c:	71bb      	strb	r3, [r7, #6]
   1be7e:	687a      	ldr	r2, [r7, #4]
   1be80:	65fa      	str	r2, [r7, #92]	; 0x5c
   1be82:	461a      	mov	r2, r3
   1be84:	f363 0200 	bfi	r2, r3, #0, #1
   1be88:	f363 0241 	bfi	r2, r3, #1, #1
   1be8c:	f363 0282 	bfi	r2, r3, #2, #1
   1be90:	f363 02c5 	bfi	r2, r3, #3, #3
   1be94:	2101      	movs	r1, #1
   1be96:	f361 1288 	bfi	r2, r1, #6, #3
   1be9a:	2108      	movs	r1, #8
   1be9c:	f361 2252 	bfi	r2, r1, #9, #10
   1bea0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bea4:	4987      	ldr	r1, [pc, #540]	; (1c0c4 <bt_att_recv+0x294>)
   1bea6:	f107 0050 	add.w	r0, r7, #80	; 0x50
   1beaa:	f008 f84f 	bl	23f4c <z_log_msg2_finalize>
}
   1beae:	2000      	movs	r0, #0
   1beb0:	376c      	adds	r7, #108	; 0x6c
   1beb2:	46bd      	mov	sp, r7
   1beb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			handler = &handlers[i];
   1beb8:	4c80      	ldr	r4, [pc, #512]	; (1c0bc <bt_att_recv+0x28c>)
   1beba:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   1bebe:	e000      	b.n	1bec2 <bt_att_recv+0x92>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1bec0:	2400      	movs	r4, #0
	if (!handler) {
   1bec2:	2c00      	cmp	r4, #0
   1bec4:	d055      	beq.n	1bf72 <bt_att_recv+0x142>
		if (handler->type == ATT_REQUEST &&
   1bec6:	78a3      	ldrb	r3, [r4, #2]
   1bec8:	2b01      	cmp	r3, #1
   1beca:	f000 8086 	beq.w	1bfda <bt_att_recv+0x1aa>
		} else if (handler->type == ATT_INDICATION &&
   1bece:	78a3      	ldrb	r3, [r4, #2]
   1bed0:	2b05      	cmp	r3, #5
   1bed2:	f000 80b5 	beq.w	1c040 <bt_att_recv+0x210>
	if (buf->len < handler->expect_len) {
   1bed6:	89b2      	ldrh	r2, [r6, #12]
   1bed8:	7863      	ldrb	r3, [r4, #1]
   1beda:	429a      	cmp	r2, r3
   1bedc:	f080 80e9 	bcs.w	1c0b2 <bt_att_recv+0x282>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1bee0:	46e8      	mov	r8, sp
   1bee2:	b088      	sub	sp, #32
   1bee4:	4668      	mov	r0, sp
   1bee6:	f110 030c 	adds.w	r3, r0, #12
   1beea:	f000 80dc 	beq.w	1c0a6 <bt_att_recv+0x276>
   1beee:	2210      	movs	r2, #16
   1bef0:	b11b      	cbz	r3, 1befa <bt_att_recv+0xca>
   1bef2:	2a04      	cmp	r2, #4
   1bef4:	dd01      	ble.n	1befa <bt_att_recv+0xca>
   1bef6:	4974      	ldr	r1, [pc, #464]	; (1c0c8 <bt_att_recv+0x298>)
   1bef8:	6101      	str	r1, [r0, #16]
   1befa:	89b1      	ldrh	r1, [r6, #12]
   1befc:	b113      	cbz	r3, 1bf04 <bt_att_recv+0xd4>
   1befe:	2a08      	cmp	r2, #8
   1bf00:	dd00      	ble.n	1bf04 <bt_att_recv+0xd4>
   1bf02:	6141      	str	r1, [r0, #20]
   1bf04:	7829      	ldrb	r1, [r5, #0]
   1bf06:	b113      	cbz	r3, 1bf0e <bt_att_recv+0xde>
   1bf08:	2a0c      	cmp	r2, #12
   1bf0a:	dd00      	ble.n	1bf0e <bt_att_recv+0xde>
   1bf0c:	6181      	str	r1, [r0, #24]
   1bf0e:	2a0f      	cmp	r2, #15
   1bf10:	f340 80cc 	ble.w	1c0ac <bt_att_recv+0x27c>
   1bf14:	2110      	movs	r1, #16
   1bf16:	b143      	cbz	r3, 1bf2a <bt_att_recv+0xfa>
   1bf18:	2300      	movs	r3, #0
   1bf1a:	f8a7 3005 	strh.w	r3, [r7, #5]
   1bf1e:	71fb      	strb	r3, [r7, #7]
   1bf20:	2204      	movs	r2, #4
   1bf22:	713a      	strb	r2, [r7, #4]
   1bf24:	71bb      	strb	r3, [r7, #6]
   1bf26:	687b      	ldr	r3, [r7, #4]
   1bf28:	60c3      	str	r3, [r0, #12]
   1bf2a:	2200      	movs	r2, #0
   1bf2c:	f36f 0200 	bfc	r2, #0, #1
   1bf30:	f36f 0241 	bfc	r2, #1, #1
   1bf34:	f36f 0282 	bfc	r2, #2, #1
   1bf38:	f36f 02c5 	bfc	r2, #3, #3
   1bf3c:	2301      	movs	r3, #1
   1bf3e:	f363 1288 	bfi	r2, r3, #6, #3
   1bf42:	f401 737d 	and.w	r3, r1, #1012	; 0x3f4
   1bf46:	f363 2252 	bfi	r2, r3, #9, #10
   1bf4a:	2300      	movs	r3, #0
   1bf4c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bf50:	495c      	ldr	r1, [pc, #368]	; (1c0c4 <bt_att_recv+0x294>)
   1bf52:	f007 fffb 	bl	23f4c <z_log_msg2_finalize>
   1bf56:	46c5      	mov	sp, r8
		err = BT_ATT_ERR_INVALID_PDU;
   1bf58:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
   1bf5a:	78a3      	ldrb	r3, [r4, #2]
   1bf5c:	2b01      	cmp	r3, #1
   1bf5e:	d1a6      	bne.n	1beae <bt_att_recv+0x7e>
   1bf60:	2800      	cmp	r0, #0
   1bf62:	d0a4      	beq.n	1beae <bt_att_recv+0x7e>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1bf64:	4603      	mov	r3, r0
   1bf66:	2200      	movs	r2, #0
   1bf68:	7829      	ldrb	r1, [r5, #0]
   1bf6a:	4648      	mov	r0, r9
   1bf6c:	f7ff ff40 	bl	1bdf0 <send_err_rsp>
   1bf70:	e79d      	b.n	1beae <bt_att_recv+0x7e>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1bf72:	4b56      	ldr	r3, [pc, #344]	; (1c0cc <bt_att_recv+0x29c>)
   1bf74:	64bb      	str	r3, [r7, #72]	; 0x48
   1bf76:	782b      	ldrb	r3, [r5, #0]
   1bf78:	64fb      	str	r3, [r7, #76]	; 0x4c
   1bf7a:	2300      	movs	r3, #0
   1bf7c:	f8a7 3005 	strh.w	r3, [r7, #5]
   1bf80:	71fb      	strb	r3, [r7, #7]
   1bf82:	2203      	movs	r2, #3
   1bf84:	713a      	strb	r2, [r7, #4]
   1bf86:	71bb      	strb	r3, [r7, #6]
   1bf88:	687a      	ldr	r2, [r7, #4]
   1bf8a:	647a      	str	r2, [r7, #68]	; 0x44
   1bf8c:	461a      	mov	r2, r3
   1bf8e:	f363 0200 	bfi	r2, r3, #0, #1
   1bf92:	f363 0241 	bfi	r2, r3, #1, #1
   1bf96:	f363 0282 	bfi	r2, r3, #2, #1
   1bf9a:	f363 02c5 	bfi	r2, r3, #3, #3
   1bf9e:	2102      	movs	r1, #2
   1bfa0:	f361 1288 	bfi	r2, r1, #6, #3
   1bfa4:	210c      	movs	r1, #12
   1bfa6:	f361 2252 	bfi	r2, r1, #9, #10
   1bfaa:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1bfae:	4945      	ldr	r1, [pc, #276]	; (1c0c4 <bt_att_recv+0x294>)
   1bfb0:	f107 0038 	add.w	r0, r7, #56	; 0x38
   1bfb4:	f007 ffca 	bl	23f4c <z_log_msg2_finalize>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1bfb8:	782c      	ldrb	r4, [r5, #0]
   1bfba:	4620      	mov	r0, r4
   1bfbc:	f009 f8cb 	bl	25156 <att_op_get_type>
   1bfc0:	2800      	cmp	r0, #0
   1bfc2:	f43f af74 	beq.w	1beae <bt_att_recv+0x7e>
   1bfc6:	2805      	cmp	r0, #5
   1bfc8:	f43f af71 	beq.w	1beae <bt_att_recv+0x7e>
			send_err_rsp(att_chan, hdr->code, 0,
   1bfcc:	2306      	movs	r3, #6
   1bfce:	2200      	movs	r2, #0
   1bfd0:	4621      	mov	r1, r4
   1bfd2:	4648      	mov	r0, r9
   1bfd4:	f7ff ff0c 	bl	1bdf0 <send_err_rsp>
		return 0;
   1bfd8:	e769      	b.n	1beae <bt_att_recv+0x7e>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1bfda:	f108 03e8 	add.w	r3, r8, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1bfde:	f3bf 8f5b 	dmb	ish
   1bfe2:	e853 2f00 	ldrex	r2, [r3]
   1bfe6:	f042 0101 	orr.w	r1, r2, #1
   1bfea:	e843 1000 	strex	r0, r1, [r3]
   1bfee:	2800      	cmp	r0, #0
   1bff0:	d1f7      	bne.n	1bfe2 <bt_att_recv+0x1b2>
   1bff2:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1bff6:	f012 0f01 	tst.w	r2, #1
   1bffa:	f43f af68 	beq.w	1bece <bt_att_recv+0x9e>
			BT_WARN("Ignoring unexpected request");
   1bffe:	4b34      	ldr	r3, [pc, #208]	; (1c0d0 <bt_att_recv+0x2a0>)
   1c000:	61bb      	str	r3, [r7, #24]
   1c002:	2300      	movs	r3, #0
   1c004:	f8a7 3005 	strh.w	r3, [r7, #5]
   1c008:	71fb      	strb	r3, [r7, #7]
   1c00a:	2102      	movs	r1, #2
   1c00c:	7139      	strb	r1, [r7, #4]
   1c00e:	71bb      	strb	r3, [r7, #6]
   1c010:	687a      	ldr	r2, [r7, #4]
   1c012:	617a      	str	r2, [r7, #20]
   1c014:	461a      	mov	r2, r3
   1c016:	f363 0200 	bfi	r2, r3, #0, #1
   1c01a:	f363 0241 	bfi	r2, r3, #1, #1
   1c01e:	f363 0282 	bfi	r2, r3, #2, #1
   1c022:	f363 02c5 	bfi	r2, r3, #3, #3
   1c026:	f361 1288 	bfi	r2, r1, #6, #3
   1c02a:	2108      	movs	r1, #8
   1c02c:	f361 2252 	bfi	r2, r1, #9, #10
   1c030:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1c034:	4923      	ldr	r1, [pc, #140]	; (1c0c4 <bt_att_recv+0x294>)
   1c036:	f107 0008 	add.w	r0, r7, #8
   1c03a:	f007 ff87 	bl	23f4c <z_log_msg2_finalize>
			return 0;
   1c03e:	e736      	b.n	1beae <bt_att_recv+0x7e>
			   atomic_test_and_set_bit(att_chan->flags,
   1c040:	f108 08e8 	add.w	r8, r8, #232	; 0xe8
   1c044:	f3bf 8f5b 	dmb	ish
   1c048:	e858 3f00 	ldrex	r3, [r8]
   1c04c:	f043 0202 	orr.w	r2, r3, #2
   1c050:	e848 2100 	strex	r1, r2, [r8]
   1c054:	2900      	cmp	r1, #0
   1c056:	d1f7      	bne.n	1c048 <bt_att_recv+0x218>
   1c058:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   1c05c:	f013 0f02 	tst.w	r3, #2
   1c060:	f43f af39 	beq.w	1bed6 <bt_att_recv+0xa6>
			BT_WARN("Ignoring unexpected indication");
   1c064:	4b1b      	ldr	r3, [pc, #108]	; (1c0d4 <bt_att_recv+0x2a4>)
   1c066:	633b      	str	r3, [r7, #48]	; 0x30
   1c068:	2300      	movs	r3, #0
   1c06a:	f8a7 3005 	strh.w	r3, [r7, #5]
   1c06e:	71fb      	strb	r3, [r7, #7]
   1c070:	2102      	movs	r1, #2
   1c072:	7139      	strb	r1, [r7, #4]
   1c074:	71bb      	strb	r3, [r7, #6]
   1c076:	687a      	ldr	r2, [r7, #4]
   1c078:	62fa      	str	r2, [r7, #44]	; 0x2c
   1c07a:	461a      	mov	r2, r3
   1c07c:	f363 0200 	bfi	r2, r3, #0, #1
   1c080:	f363 0241 	bfi	r2, r3, #1, #1
   1c084:	f363 0282 	bfi	r2, r3, #2, #1
   1c088:	f363 02c5 	bfi	r2, r3, #3, #3
   1c08c:	f361 1288 	bfi	r2, r1, #6, #3
   1c090:	2108      	movs	r1, #8
   1c092:	f361 2252 	bfi	r2, r1, #9, #10
   1c096:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1c09a:	490a      	ldr	r1, [pc, #40]	; (1c0c4 <bt_att_recv+0x294>)
   1c09c:	f107 0020 	add.w	r0, r7, #32
   1c0a0:	f007 ff54 	bl	23f4c <z_log_msg2_finalize>
			return 0;
   1c0a4:	e703      	b.n	1beae <bt_att_recv+0x7e>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c0a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1c0aa:	e721      	b.n	1bef0 <bt_att_recv+0xc0>
   1c0ac:	f06f 011b 	mvn.w	r1, #27
   1c0b0:	e731      	b.n	1bf16 <bt_att_recv+0xe6>
		err = handler->func(att_chan, buf);
   1c0b2:	6863      	ldr	r3, [r4, #4]
   1c0b4:	4631      	mov	r1, r6
   1c0b6:	4648      	mov	r0, r9
   1c0b8:	4798      	blx	r3
   1c0ba:	e74e      	b.n	1bf5a <bt_att_recv+0x12a>
   1c0bc:	0002a5d0 	.word	0x0002a5d0
   1c0c0:	0002a4f4 	.word	0x0002a4f4
   1c0c4:	00028884 	.word	0x00028884
   1c0c8:	0002a568 	.word	0x0002a568
   1c0cc:	0002a510 	.word	0x0002a510
   1c0d0:	0002a52c 	.word	0x0002a52c
   1c0d4:	0002a548 	.word	0x0002a548

0001c0d8 <att_write_rsp>:
{
   1c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0dc:	b08a      	sub	sp, #40	; 0x28
   1c0de:	4604      	mov	r4, r0
   1c0e0:	4616      	mov	r6, r2
   1c0e2:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c0e4:	6803      	ldr	r3, [r0, #0]
   1c0e6:	4688      	mov	r8, r1
   1c0e8:	3900      	subs	r1, #0
   1c0ea:	bf18      	it	ne
   1c0ec:	2101      	movne	r1, #1
   1c0ee:	6818      	ldr	r0, [r3, #0]
   1c0f0:	f00a f8c6 	bl	26280 <bt_gatt_change_aware>
   1c0f4:	2800      	cmp	r0, #0
   1c0f6:	d051      	beq.n	1c19c <att_write_rsp+0xc4>
	if (!handle) {
   1c0f8:	b925      	cbnz	r5, 1c104 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c0fa:	2701      	movs	r7, #1
}
   1c0fc:	4638      	mov	r0, r7
   1c0fe:	b00a      	add	sp, #40	; 0x28
   1c100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1c104:	2300      	movs	r3, #0
   1c106:	9304      	str	r3, [sp, #16]
   1c108:	9305      	str	r3, [sp, #20]
   1c10a:	9306      	str	r3, [sp, #24]
   1c10c:	9307      	str	r3, [sp, #28]
   1c10e:	9308      	str	r3, [sp, #32]
   1c110:	9309      	str	r3, [sp, #36]	; 0x24
	if (rsp) {
   1c112:	b13e      	cbz	r6, 1c124 <att_write_rsp+0x4c>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1c114:	461a      	mov	r2, r3
   1c116:	4631      	mov	r1, r6
   1c118:	4620      	mov	r0, r4
   1c11a:	f7ff fdcf 	bl	1bcbc <bt_att_chan_create_pdu>
   1c11e:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1c120:	2800      	cmp	r0, #0
   1c122:	d03d      	beq.n	1c1a0 <att_write_rsp+0xc8>
	data.conn = chan->att->conn;
   1c124:	6823      	ldr	r3, [r4, #0]
   1c126:	681b      	ldr	r3, [r3, #0]
   1c128:	9304      	str	r3, [sp, #16]
	data.req = req;
   1c12a:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1c12e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1c132:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1c136:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1c138:	9307      	str	r3, [sp, #28]
	data.len = len;
   1c13a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1c13e:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c142:	2301      	movs	r3, #1
   1c144:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1c148:	ab04      	add	r3, sp, #16
   1c14a:	9302      	str	r3, [sp, #8]
   1c14c:	4b15      	ldr	r3, [pc, #84]	; (1c1a4 <att_write_rsp+0xcc>)
   1c14e:	9301      	str	r3, [sp, #4]
   1c150:	2200      	movs	r2, #0
   1c152:	9200      	str	r2, [sp, #0]
   1c154:	4613      	mov	r3, r2
   1c156:	4629      	mov	r1, r5
   1c158:	4628      	mov	r0, r5
   1c15a:	f000 fe77 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c15e:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1c162:	b93f      	cbnz	r7, 1c174 <att_write_rsp+0x9c>
	if (data.buf) {
   1c164:	9905      	ldr	r1, [sp, #20]
   1c166:	2900      	cmp	r1, #0
   1c168:	d0c8      	beq.n	1c0fc <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c16a:	4a0f      	ldr	r2, [pc, #60]	; (1c1a8 <att_write_rsp+0xd0>)
   1c16c:	4620      	mov	r0, r4
   1c16e:	f009 fa0a 	bl	25586 <bt_att_chan_send_rsp>
   1c172:	e7c3      	b.n	1c0fc <att_write_rsp+0x24>
		if (rsp) {
   1c174:	b926      	cbnz	r6, 1c180 <att_write_rsp+0xa8>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1c176:	f1b8 0f18 	cmp.w	r8, #24
   1c17a:	d00c      	beq.n	1c196 <att_write_rsp+0xbe>
   1c17c:	2700      	movs	r7, #0
   1c17e:	e7bd      	b.n	1c0fc <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   1c180:	9805      	ldr	r0, [sp, #20]
   1c182:	f00a fa03 	bl	2658c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1c186:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1c18a:	462a      	mov	r2, r5
   1c18c:	4641      	mov	r1, r8
   1c18e:	4620      	mov	r0, r4
   1c190:	f7ff fe2e 	bl	1bdf0 <send_err_rsp>
   1c194:	e7ef      	b.n	1c176 <att_write_rsp+0x9e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1c196:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
   1c19a:	e7af      	b.n	1c0fc <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c19c:	2712      	movs	r7, #18
   1c19e:	e7ad      	b.n	1c0fc <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   1c1a0:	270e      	movs	r7, #14
   1c1a2:	e7ab      	b.n	1c0fc <att_write_rsp+0x24>
   1c1a4:	00025529 	.word	0x00025529
   1c1a8:	000253db 	.word	0x000253db

0001c1ac <bt_att_create_pdu>:
{
   1c1ac:	b570      	push	{r4, r5, r6, lr}
   1c1ae:	b088      	sub	sp, #32
   1c1b0:	460e      	mov	r6, r1
   1c1b2:	4615      	mov	r5, r2
	att = att_get(conn);
   1c1b4:	f7ff f9c8 	bl	1b548 <att_get>
	if (!att) {
   1c1b8:	4604      	mov	r4, r0
   1c1ba:	b360      	cbz	r0, 1c216 <bt_att_create_pdu+0x6a>
	return list->head;
   1c1bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c1be:	b15c      	cbz	r4, 1c1d8 <bt_att_create_pdu+0x2c>
   1c1c0:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   1c1c4:	d00a      	beq.n	1c1dc <bt_att_create_pdu+0x30>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c1c6:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   1c1ca:	d00c      	beq.n	1c1e6 <bt_att_create_pdu+0x3a>
	return node->next;
   1c1cc:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   1c1d0:	b148      	cbz	r0, 1c1e6 <bt_att_create_pdu+0x3a>
   1c1d2:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1c1d6:	e006      	b.n	1c1e6 <bt_att_create_pdu+0x3a>
   1c1d8:	4620      	mov	r0, r4
   1c1da:	e004      	b.n	1c1e6 <bt_att_create_pdu+0x3a>
   1c1dc:	4620      	mov	r0, r4
   1c1de:	e002      	b.n	1c1e6 <bt_att_create_pdu+0x3a>
   1c1e0:	4603      	mov	r3, r0
   1c1e2:	4604      	mov	r4, r0
   1c1e4:	4618      	mov	r0, r3
   1c1e6:	b1cc      	cbz	r4, 1c21c <bt_att_create_pdu+0x70>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c1e8:	1c6b      	adds	r3, r5, #1
   1c1ea:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   1c1ee:	4293      	cmp	r3, r2
   1c1f0:	d90b      	bls.n	1c20a <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c1f2:	2800      	cmp	r0, #0
   1c1f4:	d0f4      	beq.n	1c1e0 <bt_att_create_pdu+0x34>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c1f6:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   1c1fa:	d0f2      	beq.n	1c1e2 <bt_att_create_pdu+0x36>
	return node->next;
   1c1fc:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   1c200:	2b00      	cmp	r3, #0
   1c202:	d0ee      	beq.n	1c1e2 <bt_att_create_pdu+0x36>
   1c204:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1c208:	e7eb      	b.n	1c1e2 <bt_att_create_pdu+0x36>
		return bt_att_chan_create_pdu(chan, op, len);
   1c20a:	462a      	mov	r2, r5
   1c20c:	4631      	mov	r1, r6
   1c20e:	4620      	mov	r0, r4
   1c210:	f7ff fd54 	bl	1bcbc <bt_att_chan_create_pdu>
   1c214:	4604      	mov	r4, r0
}
   1c216:	4620      	mov	r0, r4
   1c218:	b008      	add	sp, #32
   1c21a:	bd70      	pop	{r4, r5, r6, pc}
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1c21c:	3501      	adds	r5, #1
   1c21e:	4b12      	ldr	r3, [pc, #72]	; (1c268 <bt_att_create_pdu+0xbc>)
   1c220:	9306      	str	r3, [sp, #24]
   1c222:	9507      	str	r5, [sp, #28]
   1c224:	2300      	movs	r3, #0
   1c226:	f8ad 3005 	strh.w	r3, [sp, #5]
   1c22a:	f88d 3007 	strb.w	r3, [sp, #7]
   1c22e:	2203      	movs	r2, #3
   1c230:	f88d 2004 	strb.w	r2, [sp, #4]
   1c234:	f88d 3006 	strb.w	r3, [sp, #6]
   1c238:	9a01      	ldr	r2, [sp, #4]
   1c23a:	9205      	str	r2, [sp, #20]
   1c23c:	461a      	mov	r2, r3
   1c23e:	f363 0200 	bfi	r2, r3, #0, #1
   1c242:	f363 0241 	bfi	r2, r3, #1, #1
   1c246:	f363 0282 	bfi	r2, r3, #2, #1
   1c24a:	f363 02c5 	bfi	r2, r3, #3, #3
   1c24e:	2102      	movs	r1, #2
   1c250:	f361 1288 	bfi	r2, r1, #6, #3
   1c254:	210c      	movs	r1, #12
   1c256:	f361 2252 	bfi	r2, r1, #9, #10
   1c25a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1c25e:	4903      	ldr	r1, [pc, #12]	; (1c26c <bt_att_create_pdu+0xc0>)
   1c260:	a802      	add	r0, sp, #8
   1c262:	f007 fe73 	bl	23f4c <z_log_msg2_finalize>
	return NULL;
   1c266:	e7d6      	b.n	1c216 <bt_att_create_pdu+0x6a>
   1c268:	0002a588 	.word	0x0002a588
   1c26c:	00028884 	.word	0x00028884

0001c270 <att_read_group_rsp>:
{
   1c270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c274:	b08a      	sub	sp, #40	; 0x28
   1c276:	4605      	mov	r5, r0
   1c278:	4688      	mov	r8, r1
   1c27a:	4616      	mov	r6, r2
   1c27c:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1c27e:	2400      	movs	r4, #0
   1c280:	9405      	str	r4, [sp, #20]
   1c282:	9406      	str	r4, [sp, #24]
   1c284:	9407      	str	r4, [sp, #28]
   1c286:	9408      	str	r4, [sp, #32]
   1c288:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1c28a:	2201      	movs	r2, #1
   1c28c:	2111      	movs	r1, #17
   1c28e:	6880      	ldr	r0, [r0, #8]
   1c290:	f7ff ff8c 	bl	1c1ac <bt_att_create_pdu>
   1c294:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1c296:	b358      	cbz	r0, 1c2f0 <att_read_group_rsp+0x80>
	data.chan = chan;
   1c298:	9505      	str	r5, [sp, #20]
	data.uuid = uuid;
   1c29a:	f8cd 8018 	str.w	r8, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1c29e:	2101      	movs	r1, #1
   1c2a0:	3008      	adds	r0, #8
   1c2a2:	f00a f9bd 	bl	26620 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c2a6:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1c2a8:	4622      	mov	r2, r4
   1c2aa:	7004      	strb	r4, [r0, #0]
	data.group = NULL;
   1c2ac:	9409      	str	r4, [sp, #36]	; 0x24
   1c2ae:	ab05      	add	r3, sp, #20
   1c2b0:	9302      	str	r3, [sp, #8]
   1c2b2:	4b10      	ldr	r3, [pc, #64]	; (1c2f4 <att_read_group_rsp+0x84>)
   1c2b4:	9301      	str	r3, [sp, #4]
   1c2b6:	9400      	str	r4, [sp, #0]
   1c2b8:	4623      	mov	r3, r4
   1c2ba:	4639      	mov	r1, r7
   1c2bc:	4630      	mov	r0, r6
   1c2be:	f000 fdc5 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1c2c2:	9b08      	ldr	r3, [sp, #32]
   1c2c4:	781c      	ldrb	r4, [r3, #0]
   1c2c6:	b14c      	cbz	r4, 1c2dc <att_read_group_rsp+0x6c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c2c8:	4a0b      	ldr	r2, [pc, #44]	; (1c2f8 <att_read_group_rsp+0x88>)
   1c2ca:	9907      	ldr	r1, [sp, #28]
   1c2cc:	4628      	mov	r0, r5
   1c2ce:	f009 f95a 	bl	25586 <bt_att_chan_send_rsp>
	return 0;
   1c2d2:	2400      	movs	r4, #0
}
   1c2d4:	4620      	mov	r0, r4
   1c2d6:	b00a      	add	sp, #40	; 0x28
   1c2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1c2dc:	9807      	ldr	r0, [sp, #28]
   1c2de:	f00a f955 	bl	2658c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1c2e2:	230a      	movs	r3, #10
   1c2e4:	4632      	mov	r2, r6
   1c2e6:	2110      	movs	r1, #16
   1c2e8:	4628      	mov	r0, r5
   1c2ea:	f7ff fd81 	bl	1bdf0 <send_err_rsp>
		return 0;
   1c2ee:	e7f1      	b.n	1c2d4 <att_read_group_rsp+0x64>
		return BT_ATT_ERR_UNLIKELY;
   1c2f0:	240e      	movs	r4, #14
   1c2f2:	e7ef      	b.n	1c2d4 <att_read_group_rsp+0x64>
   1c2f4:	0001b91d 	.word	0x0001b91d
   1c2f8:	000253db 	.word	0x000253db

0001c2fc <att_read_mult_req>:
{
   1c2fc:	b570      	push	{r4, r5, r6, lr}
   1c2fe:	b088      	sub	sp, #32
   1c300:	4606      	mov	r6, r0
   1c302:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1c304:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1c306:	2101      	movs	r1, #1
   1c308:	4620      	mov	r0, r4
   1c30a:	f009 ffb9 	bl	26280 <bt_gatt_change_aware>
   1c30e:	2800      	cmp	r0, #0
   1c310:	d037      	beq.n	1c382 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
   1c312:	2200      	movs	r2, #0
   1c314:	9204      	str	r2, [sp, #16]
   1c316:	9205      	str	r2, [sp, #20]
   1c318:	9206      	str	r2, [sp, #24]
   1c31a:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1c31c:	210f      	movs	r1, #15
   1c31e:	4620      	mov	r0, r4
   1c320:	f7ff ff44 	bl	1c1ac <bt_att_create_pdu>
   1c324:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c326:	b378      	cbz	r0, 1c388 <att_read_mult_req+0x8c>
	data.chan = chan;
   1c328:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1c32a:	89ab      	ldrh	r3, [r5, #12]
   1c32c:	2b01      	cmp	r3, #1
   1c32e:	d921      	bls.n	1c374 <att_read_mult_req+0x78>
	return net_buf_simple_pull_le16(&buf->b);
   1c330:	f105 0008 	add.w	r0, r5, #8
   1c334:	f00a f9a4 	bl	26680 <net_buf_simple_pull_le16>
   1c338:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c33a:	2301      	movs	r3, #1
   1c33c:	f88d 301c 	strb.w	r3, [sp, #28]
   1c340:	ab04      	add	r3, sp, #16
   1c342:	9302      	str	r3, [sp, #8]
   1c344:	4b11      	ldr	r3, [pc, #68]	; (1c38c <att_read_mult_req+0x90>)
   1c346:	9301      	str	r3, [sp, #4]
   1c348:	2200      	movs	r2, #0
   1c34a:	9200      	str	r2, [sp, #0]
   1c34c:	4613      	mov	r3, r2
   1c34e:	4601      	mov	r1, r0
   1c350:	f000 fd7c 	bl	1ce4c <bt_gatt_foreach_attr_type>
		if (data.err) {
   1c354:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c358:	2b00      	cmp	r3, #0
   1c35a:	d0e6      	beq.n	1c32a <att_read_mult_req+0x2e>
			net_buf_unref(data.buf);
   1c35c:	9806      	ldr	r0, [sp, #24]
   1c35e:	f00a f915 	bl	2658c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1c362:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c366:	4622      	mov	r2, r4
   1c368:	210e      	movs	r1, #14
   1c36a:	4630      	mov	r0, r6
   1c36c:	f7ff fd40 	bl	1bdf0 <send_err_rsp>
			return 0;
   1c370:	2000      	movs	r0, #0
   1c372:	e007      	b.n	1c384 <att_read_mult_req+0x88>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c374:	4a06      	ldr	r2, [pc, #24]	; (1c390 <att_read_mult_req+0x94>)
   1c376:	9906      	ldr	r1, [sp, #24]
   1c378:	4630      	mov	r0, r6
   1c37a:	f009 f904 	bl	25586 <bt_att_chan_send_rsp>
	return 0;
   1c37e:	2000      	movs	r0, #0
   1c380:	e000      	b.n	1c384 <att_read_mult_req+0x88>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c382:	2012      	movs	r0, #18
}
   1c384:	b008      	add	sp, #32
   1c386:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   1c388:	200e      	movs	r0, #14
   1c38a:	e7fb      	b.n	1c384 <att_read_mult_req+0x88>
   1c38c:	000256f7 	.word	0x000256f7
   1c390:	000253db 	.word	0x000253db

0001c394 <att_read_rsp>:
{
   1c394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c398:	b088      	sub	sp, #32
   1c39a:	4604      	mov	r4, r0
   1c39c:	4688      	mov	r8, r1
   1c39e:	4616      	mov	r6, r2
   1c3a0:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1c3a2:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1c3a4:	2101      	movs	r1, #1
   1c3a6:	4638      	mov	r0, r7
   1c3a8:	f009 ff6a 	bl	26280 <bt_gatt_change_aware>
   1c3ac:	2800      	cmp	r0, #0
   1c3ae:	d038      	beq.n	1c422 <att_read_rsp+0x8e>
	if (!handle) {
   1c3b0:	b925      	cbnz	r5, 1c3bc <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c3b2:	2601      	movs	r6, #1
}
   1c3b4:	4630      	mov	r0, r6
   1c3b6:	b008      	add	sp, #32
   1c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1c3bc:	2200      	movs	r2, #0
   1c3be:	9204      	str	r2, [sp, #16]
   1c3c0:	9205      	str	r2, [sp, #20]
   1c3c2:	9206      	str	r2, [sp, #24]
   1c3c4:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1c3c6:	4631      	mov	r1, r6
   1c3c8:	4638      	mov	r0, r7
   1c3ca:	f7ff feef 	bl	1c1ac <bt_att_create_pdu>
   1c3ce:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c3d0:	b348      	cbz	r0, 1c426 <att_read_rsp+0x92>
	data.chan = chan;
   1c3d2:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1c3d4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1c3d8:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c3dc:	2301      	movs	r3, #1
   1c3de:	f88d 301c 	strb.w	r3, [sp, #28]
   1c3e2:	ab04      	add	r3, sp, #16
   1c3e4:	9302      	str	r3, [sp, #8]
   1c3e6:	4b11      	ldr	r3, [pc, #68]	; (1c42c <att_read_rsp+0x98>)
   1c3e8:	9301      	str	r3, [sp, #4]
   1c3ea:	2200      	movs	r2, #0
   1c3ec:	9200      	str	r2, [sp, #0]
   1c3ee:	4613      	mov	r3, r2
   1c3f0:	4629      	mov	r1, r5
   1c3f2:	4628      	mov	r0, r5
   1c3f4:	f000 fd2a 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c3f8:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1c3fc:	b92e      	cbnz	r6, 1c40a <att_read_rsp+0x76>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c3fe:	4a0c      	ldr	r2, [pc, #48]	; (1c430 <att_read_rsp+0x9c>)
   1c400:	9906      	ldr	r1, [sp, #24]
   1c402:	4620      	mov	r0, r4
   1c404:	f009 f8bf 	bl	25586 <bt_att_chan_send_rsp>
	return 0;
   1c408:	e7d4      	b.n	1c3b4 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   1c40a:	9806      	ldr	r0, [sp, #24]
   1c40c:	f00a f8be 	bl	2658c <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1c410:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1c414:	462a      	mov	r2, r5
   1c416:	4641      	mov	r1, r8
   1c418:	4620      	mov	r0, r4
   1c41a:	f7ff fce9 	bl	1bdf0 <send_err_rsp>
		return 0;
   1c41e:	2600      	movs	r6, #0
   1c420:	e7c8      	b.n	1c3b4 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c422:	2612      	movs	r6, #18
   1c424:	e7c6      	b.n	1c3b4 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   1c426:	260e      	movs	r6, #14
   1c428:	e7c4      	b.n	1c3b4 <att_read_rsp+0x20>
   1c42a:	bf00      	nop
   1c42c:	000256f7 	.word	0x000256f7
   1c430:	000253db 	.word	0x000253db

0001c434 <att_read_type_rsp>:
{
   1c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c438:	b08a      	sub	sp, #40	; 0x28
   1c43a:	4605      	mov	r5, r0
   1c43c:	4688      	mov	r8, r1
   1c43e:	4616      	mov	r6, r2
   1c440:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1c442:	2400      	movs	r4, #0
   1c444:	9404      	str	r4, [sp, #16]
   1c446:	9405      	str	r4, [sp, #20]
   1c448:	9406      	str	r4, [sp, #24]
   1c44a:	9407      	str	r4, [sp, #28]
   1c44c:	9408      	str	r4, [sp, #32]
   1c44e:	9409      	str	r4, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1c450:	2201      	movs	r2, #1
   1c452:	2109      	movs	r1, #9
   1c454:	6880      	ldr	r0, [r0, #8]
   1c456:	f7ff fea9 	bl	1c1ac <bt_att_create_pdu>
   1c45a:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c45c:	b370      	cbz	r0, 1c4bc <att_read_type_rsp+0x88>
	data.chan = chan;
   1c45e:	9504      	str	r5, [sp, #16]
	data.uuid = uuid;
   1c460:	f8cd 8014 	str.w	r8, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1c464:	2101      	movs	r1, #1
   1c466:	3008      	adds	r0, #8
   1c468:	f00a f8da 	bl	26620 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c46c:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1c46e:	4622      	mov	r2, r4
   1c470:	7004      	strb	r4, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c472:	230a      	movs	r3, #10
   1c474:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1c478:	ab04      	add	r3, sp, #16
   1c47a:	9302      	str	r3, [sp, #8]
   1c47c:	4b10      	ldr	r3, [pc, #64]	; (1c4c0 <att_read_type_rsp+0x8c>)
   1c47e:	9301      	str	r3, [sp, #4]
   1c480:	9400      	str	r4, [sp, #0]
   1c482:	4623      	mov	r3, r4
   1c484:	4639      	mov	r1, r7
   1c486:	4630      	mov	r0, r6
   1c488:	f000 fce0 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c48c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
   1c490:	b944      	cbnz	r4, 1c4a4 <att_read_type_rsp+0x70>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c492:	4a0c      	ldr	r2, [pc, #48]	; (1c4c4 <att_read_type_rsp+0x90>)
   1c494:	9906      	ldr	r1, [sp, #24]
   1c496:	4628      	mov	r0, r5
   1c498:	f009 f875 	bl	25586 <bt_att_chan_send_rsp>
}
   1c49c:	4620      	mov	r0, r4
   1c49e:	b00a      	add	sp, #40	; 0x28
   1c4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1c4a4:	9806      	ldr	r0, [sp, #24]
   1c4a6:	f00a f871 	bl	2658c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1c4aa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1c4ae:	4632      	mov	r2, r6
   1c4b0:	2108      	movs	r1, #8
   1c4b2:	4628      	mov	r0, r5
   1c4b4:	f7ff fc9c 	bl	1bdf0 <send_err_rsp>
		return 0;
   1c4b8:	2400      	movs	r4, #0
   1c4ba:	e7ef      	b.n	1c49c <att_read_type_rsp+0x68>
		return BT_ATT_ERR_UNLIKELY;
   1c4bc:	240e      	movs	r4, #14
   1c4be:	e7ed      	b.n	1c49c <att_read_type_rsp+0x68>
   1c4c0:	0001b9d1 	.word	0x0001b9d1
   1c4c4:	000253db 	.word	0x000253db

0001c4c8 <att_find_type_rsp>:
{
   1c4c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4ca:	b08b      	sub	sp, #44	; 0x2c
   1c4cc:	4604      	mov	r4, r0
   1c4ce:	460d      	mov	r5, r1
   1c4d0:	4616      	mov	r6, r2
   1c4d2:	461f      	mov	r7, r3
	(void)memset(&data, 0, sizeof(data));
   1c4d4:	2200      	movs	r2, #0
   1c4d6:	9205      	str	r2, [sp, #20]
   1c4d8:	9206      	str	r2, [sp, #24]
   1c4da:	9207      	str	r2, [sp, #28]
   1c4dc:	9208      	str	r2, [sp, #32]
   1c4de:	9209      	str	r2, [sp, #36]	; 0x24
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1c4e0:	2107      	movs	r1, #7
   1c4e2:	6880      	ldr	r0, [r0, #8]
   1c4e4:	f7ff fe62 	bl	1c1ac <bt_att_create_pdu>
   1c4e8:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1c4ea:	b358      	cbz	r0, 1c544 <att_find_type_rsp+0x7c>
	data.chan = chan;
   1c4ec:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1c4ee:	2200      	movs	r2, #0
   1c4f0:	9207      	str	r2, [sp, #28]
	data.value = value;
   1c4f2:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1c4f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1c4f8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1c4fc:	230a      	movs	r3, #10
   1c4fe:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1c502:	ab05      	add	r3, sp, #20
   1c504:	9302      	str	r3, [sp, #8]
   1c506:	4b10      	ldr	r3, [pc, #64]	; (1c548 <att_find_type_rsp+0x80>)
   1c508:	9301      	str	r3, [sp, #4]
   1c50a:	9200      	str	r2, [sp, #0]
   1c50c:	4613      	mov	r3, r2
   1c50e:	4631      	mov	r1, r6
   1c510:	4628      	mov	r0, r5
   1c512:	f000 fc9b 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (data.err) {
   1c516:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1c51a:	b93e      	cbnz	r6, 1c52c <att_find_type_rsp+0x64>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c51c:	4a0b      	ldr	r2, [pc, #44]	; (1c54c <att_find_type_rsp+0x84>)
   1c51e:	9906      	ldr	r1, [sp, #24]
   1c520:	4620      	mov	r0, r4
   1c522:	f009 f830 	bl	25586 <bt_att_chan_send_rsp>
}
   1c526:	4630      	mov	r0, r6
   1c528:	b00b      	add	sp, #44	; 0x2c
   1c52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   1c52c:	9806      	ldr	r0, [sp, #24]
   1c52e:	f00a f82d 	bl	2658c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1c532:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1c536:	462a      	mov	r2, r5
   1c538:	2106      	movs	r1, #6
   1c53a:	4620      	mov	r0, r4
   1c53c:	f7ff fc58 	bl	1bdf0 <send_err_rsp>
		return 0;
   1c540:	2600      	movs	r6, #0
   1c542:	e7f0      	b.n	1c526 <att_find_type_rsp+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   1c544:	260e      	movs	r6, #14
   1c546:	e7ee      	b.n	1c526 <att_find_type_rsp+0x5e>
   1c548:	0001ba7d 	.word	0x0001ba7d
   1c54c:	000253db 	.word	0x000253db

0001c550 <att_find_info_rsp>:
{
   1c550:	b570      	push	{r4, r5, r6, lr}
   1c552:	b088      	sub	sp, #32
   1c554:	4604      	mov	r4, r0
   1c556:	460e      	mov	r6, r1
   1c558:	4615      	mov	r5, r2
	(void)memset(&data, 0, sizeof(data));
   1c55a:	2200      	movs	r2, #0
   1c55c:	9204      	str	r2, [sp, #16]
   1c55e:	9205      	str	r2, [sp, #20]
   1c560:	9206      	str	r2, [sp, #24]
   1c562:	9207      	str	r2, [sp, #28]
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1c564:	2105      	movs	r1, #5
   1c566:	6880      	ldr	r0, [r0, #8]
   1c568:	f7ff fe20 	bl	1c1ac <bt_att_create_pdu>
   1c56c:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1c56e:	b300      	cbz	r0, 1c5b2 <att_find_info_rsp+0x62>
	data.chan = chan;
   1c570:	9404      	str	r4, [sp, #16]
   1c572:	ab04      	add	r3, sp, #16
   1c574:	9302      	str	r3, [sp, #8]
   1c576:	4b10      	ldr	r3, [pc, #64]	; (1c5b8 <att_find_info_rsp+0x68>)
   1c578:	9301      	str	r3, [sp, #4]
   1c57a:	2200      	movs	r2, #0
   1c57c:	9200      	str	r2, [sp, #0]
   1c57e:	4613      	mov	r3, r2
   1c580:	4629      	mov	r1, r5
   1c582:	4630      	mov	r0, r6
   1c584:	f000 fc62 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1c588:	9b06      	ldr	r3, [sp, #24]
   1c58a:	b13b      	cbz	r3, 1c59c <att_find_info_rsp+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c58c:	4a0b      	ldr	r2, [pc, #44]	; (1c5bc <att_find_info_rsp+0x6c>)
   1c58e:	9905      	ldr	r1, [sp, #20]
   1c590:	4620      	mov	r0, r4
   1c592:	f008 fff8 	bl	25586 <bt_att_chan_send_rsp>
	return 0;
   1c596:	2000      	movs	r0, #0
}
   1c598:	b008      	add	sp, #32
   1c59a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(data.buf);
   1c59c:	9805      	ldr	r0, [sp, #20]
   1c59e:	f009 fff5 	bl	2658c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1c5a2:	230a      	movs	r3, #10
   1c5a4:	4632      	mov	r2, r6
   1c5a6:	2104      	movs	r1, #4
   1c5a8:	4620      	mov	r0, r4
   1c5aa:	f7ff fc21 	bl	1bdf0 <send_err_rsp>
		return 0;
   1c5ae:	2000      	movs	r0, #0
   1c5b0:	e7f2      	b.n	1c598 <att_find_info_rsp+0x48>
		return BT_ATT_ERR_UNLIKELY;
   1c5b2:	200e      	movs	r0, #14
   1c5b4:	e7f0      	b.n	1c598 <att_find_info_rsp+0x48>
   1c5b6:	bf00      	nop
   1c5b8:	0002573f 	.word	0x0002573f
   1c5bc:	000253db 	.word	0x000253db

0001c5c0 <att_mtu_req>:
{
   1c5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c5c2:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1c5c4:	6803      	ldr	r3, [r0, #0]
   1c5c6:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c5c8:	f3bf 8f5b 	dmb	ish
   1c5cc:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c5d0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1c5d4:	f013 0f08 	tst.w	r3, #8
   1c5d8:	d123      	bne.n	1c622 <att_mtu_req+0x62>
	req = (void *)buf->data;
   1c5da:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   1c5dc:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1c5de:	2e16      	cmp	r6, #22
   1c5e0:	d921      	bls.n	1c626 <att_mtu_req+0x66>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1c5e2:	2202      	movs	r2, #2
   1c5e4:	2103      	movs	r1, #3
   1c5e6:	f7ff fde1 	bl	1c1ac <bt_att_create_pdu>
	if (!pdu) {
   1c5ea:	4607      	mov	r7, r0
   1c5ec:	b1e8      	cbz	r0, 1c62a <att_mtu_req+0x6a>
   1c5ee:	2102      	movs	r1, #2
   1c5f0:	3008      	adds	r0, #8
   1c5f2:	f00a f815 	bl	26620 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1c5f6:	2500      	movs	r5, #0
   1c5f8:	f06f 0308 	mvn.w	r3, #8
   1c5fc:	7003      	strb	r3, [r0, #0]
   1c5fe:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1c600:	4a0b      	ldr	r2, [pc, #44]	; (1c630 <att_mtu_req+0x70>)
   1c602:	4639      	mov	r1, r7
   1c604:	4620      	mov	r0, r4
   1c606:	f008 ffbe 	bl	25586 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1c60a:	2ef7      	cmp	r6, #247	; 0xf7
   1c60c:	bf28      	it	cs
   1c60e:	26f7      	movcs	r6, #247	; 0xf7
   1c610:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1c614:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1c618:	4620      	mov	r0, r4
   1c61a:	f009 f8f4 	bl	25806 <att_chan_mtu_updated>
	return 0;
   1c61e:	4628      	mov	r0, r5
}
   1c620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1c622:	2006      	movs	r0, #6
   1c624:	e7fc      	b.n	1c620 <att_mtu_req+0x60>
		return BT_ATT_ERR_INVALID_PDU;
   1c626:	2004      	movs	r0, #4
   1c628:	e7fa      	b.n	1c620 <att_mtu_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1c62a:	200e      	movs	r0, #14
   1c62c:	e7f8      	b.n	1c620 <att_mtu_req+0x60>
   1c62e:	bf00      	nop
   1c630:	000253db 	.word	0x000253db

0001c634 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1c634:	b500      	push	{lr}
   1c636:	b083      	sub	sp, #12
   1c638:	4602      	mov	r2, r0
   1c63a:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   1c63c:	2100      	movs	r1, #0
   1c63e:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1c640:	a901      	add	r1, sp, #4
   1c642:	4808      	ldr	r0, [pc, #32]	; (1c664 <bt_att_req_alloc+0x30>)
   1c644:	f004 fae4 	bl	20c10 <k_mem_slab_alloc>
   1c648:	b948      	cbnz	r0, 1c65e <bt_att_req_alloc+0x2a>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1c64a:	9b01      	ldr	r3, [sp, #4]
   1c64c:	2200      	movs	r2, #0
   1c64e:	601a      	str	r2, [r3, #0]
   1c650:	605a      	str	r2, [r3, #4]
   1c652:	609a      	str	r2, [r3, #8]
   1c654:	60da      	str	r2, [r3, #12]

	return req;
   1c656:	9801      	ldr	r0, [sp, #4]
}
   1c658:	b003      	add	sp, #12
   1c65a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1c65e:	2000      	movs	r0, #0
   1c660:	e7fa      	b.n	1c658 <bt_att_req_alloc+0x24>
   1c662:	bf00      	nop
   1c664:	20000850 	.word	0x20000850

0001c668 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1c668:	b500      	push	{lr}
   1c66a:	b083      	sub	sp, #12
   1c66c:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1c66e:	6880      	ldr	r0, [r0, #8]
   1c670:	b120      	cbz	r0, 1c67c <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   1c672:	f009 ff8b 	bl	2658c <net_buf_unref>
		req->buf = NULL;
   1c676:	9b01      	ldr	r3, [sp, #4]
   1c678:	2200      	movs	r2, #0
   1c67a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1c67c:	a901      	add	r1, sp, #4
   1c67e:	4803      	ldr	r0, [pc, #12]	; (1c68c <bt_att_req_free+0x24>)
   1c680:	f00b f987 	bl	27992 <k_mem_slab_free>
}
   1c684:	b003      	add	sp, #12
   1c686:	f85d fb04 	ldr.w	pc, [sp], #4
   1c68a:	bf00      	nop
   1c68c:	20000850 	.word	0x20000850

0001c690 <att_handle_rsp>:
{
   1c690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c694:	b08a      	sub	sp, #40	; 0x28
   1c696:	4604      	mov	r4, r0
   1c698:	460f      	mov	r7, r1
   1c69a:	4691      	mov	r9, r2
   1c69c:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1c69e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1c6a2:	f00b fbe5 	bl	27e70 <k_work_cancel_delayable>
	if (!chan->req) {
   1c6a6:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   1c6aa:	b1f8      	cbz	r0, 1c6ec <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   1c6ac:	4b23      	ldr	r3, [pc, #140]	; (1c73c <att_handle_rsp+0xac>)
   1c6ae:	4298      	cmp	r0, r3
   1c6b0:	d040      	beq.n	1c734 <att_handle_rsp+0xa4>
	func = chan->req->func;
   1c6b2:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1c6b4:	f04f 0a00 	mov.w	sl, #0
   1c6b8:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1c6bc:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   1c6c0:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1c6c4:	f7ff ffd0 	bl	1c668 <bt_att_req_free>
	chan->req = NULL;
   1c6c8:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   1c6cc:	6820      	ldr	r0, [r4, #0]
   1c6ce:	f008 fe26 	bl	2531e <att_req_send_process>
	if (func) {
   1c6d2:	b13d      	cbz	r5, 1c6e4 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   1c6d4:	6823      	ldr	r3, [r4, #0]
   1c6d6:	6818      	ldr	r0, [r3, #0]
   1c6d8:	f8cd 8000 	str.w	r8, [sp]
   1c6dc:	464b      	mov	r3, r9
   1c6de:	463a      	mov	r2, r7
   1c6e0:	4631      	mov	r1, r6
   1c6e2:	47a8      	blx	r5
}
   1c6e4:	2000      	movs	r0, #0
   1c6e6:	b00a      	add	sp, #40	; 0x28
   1c6e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("No pending ATT request");
   1c6ec:	4b14      	ldr	r3, [pc, #80]	; (1c740 <att_handle_rsp+0xb0>)
   1c6ee:	9308      	str	r3, [sp, #32]
   1c6f0:	2500      	movs	r5, #0
   1c6f2:	f8ad 500d 	strh.w	r5, [sp, #13]
   1c6f6:	f88d 500f 	strb.w	r5, [sp, #15]
   1c6fa:	2302      	movs	r3, #2
   1c6fc:	f88d 300c 	strb.w	r3, [sp, #12]
   1c700:	f88d 500e 	strb.w	r5, [sp, #14]
   1c704:	9a03      	ldr	r2, [sp, #12]
   1c706:	9207      	str	r2, [sp, #28]
   1c708:	462a      	mov	r2, r5
   1c70a:	f365 0200 	bfi	r2, r5, #0, #1
   1c70e:	f365 0241 	bfi	r2, r5, #1, #1
   1c712:	f365 0282 	bfi	r2, r5, #2, #1
   1c716:	f365 02c5 	bfi	r2, r5, #3, #3
   1c71a:	f363 1288 	bfi	r2, r3, #6, #3
   1c71e:	2308      	movs	r3, #8
   1c720:	f363 2252 	bfi	r2, r3, #9, #10
   1c724:	462b      	mov	r3, r5
   1c726:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1c72a:	4906      	ldr	r1, [pc, #24]	; (1c744 <att_handle_rsp+0xb4>)
   1c72c:	a804      	add	r0, sp, #16
   1c72e:	f007 fc0d 	bl	23f4c <z_log_msg2_finalize>
		goto process;
   1c732:	e7cb      	b.n	1c6cc <att_handle_rsp+0x3c>
		chan->req = NULL;
   1c734:	2500      	movs	r5, #0
   1c736:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   1c73a:	e7c7      	b.n	1c6cc <att_handle_rsp+0x3c>
   1c73c:	20002ad4 	.word	0x20002ad4
   1c740:	0002a5a4 	.word	0x0002a5a4
   1c744:	00028884 	.word	0x00028884

0001c748 <att_reset>:
{
   1c748:	b530      	push	{r4, r5, lr}
   1c74a:	b085      	sub	sp, #20
   1c74c:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1c74e:	2200      	movs	r2, #0
   1c750:	2300      	movs	r3, #0
   1c752:	9803      	ldr	r0, [sp, #12]
   1c754:	300c      	adds	r0, #12
   1c756:	f009 feed 	bl	26534 <net_buf_get>
   1c75a:	4603      	mov	r3, r0
   1c75c:	b118      	cbz	r0, 1c766 <att_reset+0x1e>
		net_buf_unref(buf);
   1c75e:	4618      	mov	r0, r3
   1c760:	f009 ff14 	bl	2658c <net_buf_unref>
   1c764:	e7f3      	b.n	1c74e <att_reset+0x6>
	att->conn = NULL;
   1c766:	9b03      	ldr	r3, [sp, #12]
   1c768:	2200      	movs	r2, #0
   1c76a:	601a      	str	r2, [r3, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   1c76c:	e004      	b.n	1c778 <att_reset+0x30>
	list->tail = node;
   1c76e:	609a      	str	r2, [r3, #8]
}
   1c770:	e00a      	b.n	1c788 <att_reset+0x40>
		bt_att_req_free(req);
   1c772:	4620      	mov	r0, r4
   1c774:	f7ff ff78 	bl	1c668 <bt_att_req_free>
	while (!sys_slist_is_empty(&att->reqs)) {
   1c778:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1c77a:	685c      	ldr	r4, [r3, #4]
   1c77c:	b17c      	cbz	r4, 1c79e <att_reset+0x56>
	return node->next;
   1c77e:	6822      	ldr	r2, [r4, #0]
	list->head = node;
   1c780:	605a      	str	r2, [r3, #4]
	return list->tail;
   1c782:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c784:	42a1      	cmp	r1, r4
   1c786:	d0f2      	beq.n	1c76e <att_reset+0x26>
		if (req->func) {
   1c788:	6865      	ldr	r5, [r4, #4]
   1c78a:	2d00      	cmp	r5, #0
   1c78c:	d0f1      	beq.n	1c772 <att_reset+0x2a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1c78e:	68e3      	ldr	r3, [r4, #12]
   1c790:	9300      	str	r3, [sp, #0]
   1c792:	2300      	movs	r3, #0
   1c794:	461a      	mov	r2, r3
   1c796:	210e      	movs	r1, #14
   1c798:	4618      	mov	r0, r3
   1c79a:	47a8      	blx	r5
   1c79c:	e7e9      	b.n	1c772 <att_reset+0x2a>
	k_mem_slab_free(&att_slab, (void **)&att);
   1c79e:	a903      	add	r1, sp, #12
   1c7a0:	4802      	ldr	r0, [pc, #8]	; (1c7ac <att_reset+0x64>)
   1c7a2:	f00b f8f6 	bl	27992 <k_mem_slab_free>
}
   1c7a6:	b005      	add	sp, #20
   1c7a8:	bd30      	pop	{r4, r5, pc}
   1c7aa:	bf00      	nop
   1c7ac:	20000818 	.word	0x20000818

0001c7b0 <att_timeout>:
{
   1c7b0:	b510      	push	{r4, lr}
   1c7b2:	b088      	sub	sp, #32
   1c7b4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1c7b6:	4b14      	ldr	r3, [pc, #80]	; (1c808 <att_timeout+0x58>)
   1c7b8:	9306      	str	r3, [sp, #24]
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	f8ad 3005 	strh.w	r3, [sp, #5]
   1c7c0:	f88d 3007 	strb.w	r3, [sp, #7]
   1c7c4:	2202      	movs	r2, #2
   1c7c6:	f88d 2004 	strb.w	r2, [sp, #4]
   1c7ca:	f88d 3006 	strb.w	r3, [sp, #6]
   1c7ce:	9a01      	ldr	r2, [sp, #4]
   1c7d0:	9205      	str	r2, [sp, #20]
   1c7d2:	461a      	mov	r2, r3
   1c7d4:	f363 0200 	bfi	r2, r3, #0, #1
   1c7d8:	f363 0241 	bfi	r2, r3, #1, #1
   1c7dc:	f363 0282 	bfi	r2, r3, #2, #1
   1c7e0:	f363 02c5 	bfi	r2, r3, #3, #3
   1c7e4:	2101      	movs	r1, #1
   1c7e6:	f361 1288 	bfi	r2, r1, #6, #3
   1c7ea:	2108      	movs	r1, #8
   1c7ec:	f361 2252 	bfi	r2, r1, #9, #10
   1c7f0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1c7f4:	4905      	ldr	r1, [pc, #20]	; (1c80c <att_timeout+0x5c>)
   1c7f6:	a802      	add	r0, sp, #8
   1c7f8:	f007 fba8 	bl	23f4c <z_log_msg2_finalize>
	bt_att_disconnected(&chan->chan.chan);
   1c7fc:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   1c800:	f009 f9bd 	bl	25b7e <bt_att_disconnected>
}
   1c804:	b008      	add	sp, #32
   1c806:	bd10      	pop	{r4, pc}
   1c808:	0002a5bc 	.word	0x0002a5bc
   1c80c:	00028884 	.word	0x00028884

0001c810 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c810:	4b0d      	ldr	r3, [pc, #52]	; (1c848 <bt_gatt_service_init+0x38>)
   1c812:	2201      	movs	r2, #1
   1c814:	f3bf 8f5b 	dmb	ish
   1c818:	e853 1f00 	ldrex	r1, [r3]
   1c81c:	2900      	cmp	r1, #0
   1c81e:	d103      	bne.n	1c828 <bt_gatt_service_init+0x18>
   1c820:	e843 2000 	strex	r0, r2, [r3]
   1c824:	2800      	cmp	r0, #0
   1c826:	d1f7      	bne.n	1c818 <bt_gatt_service_init+0x8>
   1c828:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1c82c:	d101      	bne.n	1c832 <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c82e:	4b07      	ldr	r3, [pc, #28]	; (1c84c <bt_gatt_service_init+0x3c>)
   1c830:	e006      	b.n	1c840 <bt_gatt_service_init+0x30>
   1c832:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1c834:	685a      	ldr	r2, [r3, #4]
   1c836:	4906      	ldr	r1, [pc, #24]	; (1c850 <bt_gatt_service_init+0x40>)
   1c838:	8808      	ldrh	r0, [r1, #0]
   1c83a:	4402      	add	r2, r0
   1c83c:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c83e:	3308      	adds	r3, #8
   1c840:	4a04      	ldr	r2, [pc, #16]	; (1c854 <bt_gatt_service_init+0x44>)
   1c842:	4293      	cmp	r3, r2
   1c844:	d3f6      	bcc.n	1c834 <bt_gatt_service_init+0x24>
	}
}
   1c846:	4770      	bx	lr
   1c848:	20002b24 	.word	0x20002b24
   1c84c:	0002885c 	.word	0x0002885c
   1c850:	20003c72 	.word	0x20003c72
   1c854:	00028874 	.word	0x00028874

0001c858 <find_cf_cfg>:
{
   1c858:	b570      	push	{r4, r5, r6, lr}
   1c85a:	b082      	sub	sp, #8
   1c85c:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1c85e:	2400      	movs	r4, #0
   1c860:	2c00      	cmp	r4, #0
   1c862:	dd03      	ble.n	1c86c <find_cf_cfg+0x14>
	return NULL;
   1c864:	2500      	movs	r5, #0
}
   1c866:	4628      	mov	r0, r5
   1c868:	b002      	add	sp, #8
   1c86a:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1c86c:	4d0e      	ldr	r5, [pc, #56]	; (1c8a8 <find_cf_cfg+0x50>)
   1c86e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1c872:	b166      	cbz	r6, 1c88e <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c874:	490c      	ldr	r1, [pc, #48]	; (1c8a8 <find_cf_cfg+0x50>)
   1c876:	0123      	lsls	r3, r4, #4
   1c878:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1c87c:	3201      	adds	r2, #1
   1c87e:	5cc9      	ldrb	r1, [r1, r3]
   1c880:	4630      	mov	r0, r6
   1c882:	f008 fabc 	bl	24dfe <bt_conn_is_peer_addr_le>
   1c886:	2800      	cmp	r0, #0
   1c888:	d1ed      	bne.n	1c866 <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1c88a:	3401      	adds	r4, #1
   1c88c:	e7e8      	b.n	1c860 <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c88e:	4628      	mov	r0, r5
   1c890:	2300      	movs	r3, #0
   1c892:	9300      	str	r3, [sp, #0]
   1c894:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1c898:	2207      	movs	r2, #7
   1c89a:	4669      	mov	r1, sp
   1c89c:	3001      	adds	r0, #1
   1c89e:	f00b fdf0 	bl	28482 <memcmp>
   1c8a2:	2800      	cmp	r0, #0
   1c8a4:	d1f1      	bne.n	1c88a <find_cf_cfg+0x32>
   1c8a6:	e7de      	b.n	1c866 <find_cf_cfg+0xe>
   1c8a8:	20002aec 	.word	0x20002aec

0001c8ac <find_sc_cfg>:
{
   1c8ac:	b570      	push	{r4, r5, r6, lr}
   1c8ae:	4606      	mov	r6, r0
   1c8b0:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c8b2:	2400      	movs	r4, #0
   1c8b4:	b10c      	cbz	r4, 1c8ba <find_sc_cfg+0xe>
	return NULL;
   1c8b6:	2000      	movs	r0, #0
}
   1c8b8:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   1c8ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1c8be:	4a0c      	ldr	r2, [pc, #48]	; (1c8f0 <find_sc_cfg+0x44>)
   1c8c0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1c8c4:	429e      	cmp	r6, r3
   1c8c6:	d001      	beq.n	1c8cc <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c8c8:	3401      	adds	r4, #1
   1c8ca:	e7f3      	b.n	1c8b4 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1c8cc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1c8d0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1c8d4:	2207      	movs	r2, #7
   1c8d6:	4629      	mov	r1, r5
   1c8d8:	3001      	adds	r0, #1
   1c8da:	f00b fdd2 	bl	28482 <memcmp>
		if (id == sc_cfg[i].id &&
   1c8de:	2800      	cmp	r0, #0
   1c8e0:	d1f2      	bne.n	1c8c8 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1c8e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1c8e6:	4802      	ldr	r0, [pc, #8]	; (1c8f0 <find_sc_cfg+0x44>)
   1c8e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1c8ec:	e7e4      	b.n	1c8b8 <find_sc_cfg+0xc>
   1c8ee:	bf00      	nop
   1c8f0:	20002b00 	.word	0x20002b00

0001c8f4 <sc_clear>:
{
   1c8f4:	b530      	push	{r4, r5, lr}
   1c8f6:	b089      	sub	sp, #36	; 0x24
   1c8f8:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c8fa:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1c8fe:	4629      	mov	r1, r5
   1c900:	7a00      	ldrb	r0, [r0, #8]
   1c902:	f007 ff26 	bl	24752 <bt_addr_le_is_bonded>
   1c906:	b358      	cbz	r0, 1c960 <sc_clear+0x6c>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1c908:	4629      	mov	r1, r5
   1c90a:	7a20      	ldrb	r0, [r4, #8]
   1c90c:	f009 fabd 	bl	25e8a <bt_gatt_clear_sc>
		if (err) {
   1c910:	b908      	cbnz	r0, 1c916 <sc_clear+0x22>
}
   1c912:	b009      	add	sp, #36	; 0x24
   1c914:	bd30      	pop	{r4, r5, pc}
			BT_ERR("Failed to clear SC %d", err);
   1c916:	4a17      	ldr	r2, [pc, #92]	; (1c974 <sc_clear+0x80>)
   1c918:	9206      	str	r2, [sp, #24]
   1c91a:	9007      	str	r0, [sp, #28]
   1c91c:	2300      	movs	r3, #0
   1c91e:	f8ad 3005 	strh.w	r3, [sp, #5]
   1c922:	f88d 3007 	strb.w	r3, [sp, #7]
   1c926:	2203      	movs	r2, #3
   1c928:	f88d 2004 	strb.w	r2, [sp, #4]
   1c92c:	f88d 3006 	strb.w	r3, [sp, #6]
   1c930:	9a01      	ldr	r2, [sp, #4]
   1c932:	9205      	str	r2, [sp, #20]
   1c934:	461a      	mov	r2, r3
   1c936:	f363 0200 	bfi	r2, r3, #0, #1
   1c93a:	f363 0241 	bfi	r2, r3, #1, #1
   1c93e:	f363 0282 	bfi	r2, r3, #2, #1
   1c942:	f363 02c5 	bfi	r2, r3, #3, #3
   1c946:	2101      	movs	r1, #1
   1c948:	f361 1288 	bfi	r2, r1, #6, #3
   1c94c:	210c      	movs	r1, #12
   1c94e:	f361 2252 	bfi	r2, r1, #9, #10
   1c952:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1c956:	4908      	ldr	r1, [pc, #32]	; (1c978 <sc_clear+0x84>)
   1c958:	a802      	add	r0, sp, #8
   1c95a:	f007 faf7 	bl	23f4c <z_log_msg2_finalize>
   1c95e:	e7d8      	b.n	1c912 <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1c960:	4629      	mov	r1, r5
   1c962:	7a20      	ldrb	r0, [r4, #8]
   1c964:	f7ff ffa2 	bl	1c8ac <find_sc_cfg>
		if (cfg) {
   1c968:	2800      	cmp	r0, #0
   1c96a:	d0d2      	beq.n	1c912 <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   1c96c:	f009 fa88 	bl	25e80 <clear_sc_cfg>
}
   1c970:	e7cf      	b.n	1c912 <sc_clear+0x1e>
   1c972:	bf00      	nop
   1c974:	0002a638 	.word	0x0002a638
   1c978:	0002889c 	.word	0x0002889c

0001c97c <sc_indicate_rsp>:
{
   1c97c:	b510      	push	{r4, lr}
   1c97e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c980:	4b19      	ldr	r3, [pc, #100]	; (1c9e8 <sc_indicate_rsp+0x6c>)
   1c982:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1c986:	f3bf 8f5b 	dmb	ish
   1c98a:	e852 1f00 	ldrex	r1, [r2]
   1c98e:	f021 0102 	bic.w	r1, r1, #2
   1c992:	e842 1000 	strex	r0, r1, [r2]
   1c996:	2800      	cmp	r0, #0
   1c998:	d1f7      	bne.n	1c98a <sc_indicate_rsp+0xe>
   1c99a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c99e:	f3bf 8f5b 	dmb	ish
   1c9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1c9a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c9a8:	f013 0f01 	tst.w	r3, #1
   1c9ac:	d116      	bne.n	1c9dc <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   1c9ae:	4620      	mov	r0, r4
   1c9b0:	f7ff ff52 	bl	1c858 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c9b4:	4603      	mov	r3, r0
   1c9b6:	b180      	cbz	r0, 1c9da <sc_indicate_rsp+0x5e>
   1c9b8:	7a02      	ldrb	r2, [r0, #8]
   1c9ba:	f012 0f01 	tst.w	r2, #1
   1c9be:	d00c      	beq.n	1c9da <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c9c0:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c9c2:	f3bf 8f5b 	dmb	ish
   1c9c6:	e853 2f00 	ldrex	r2, [r3]
   1c9ca:	f042 0201 	orr.w	r2, r2, #1
   1c9ce:	e843 2100 	strex	r1, r2, [r3]
   1c9d2:	2900      	cmp	r1, #0
   1c9d4:	d1f7      	bne.n	1c9c6 <sc_indicate_rsp+0x4a>
   1c9d6:	f3bf 8f5b 	dmb	ish
}
   1c9da:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1c9dc:	2200      	movs	r2, #0
   1c9de:	2300      	movs	r3, #0
   1c9e0:	4802      	ldr	r0, [pc, #8]	; (1c9ec <sc_indicate_rsp+0x70>)
   1c9e2:	f004 fd7b 	bl	214dc <k_work_reschedule>
   1c9e6:	e7e2      	b.n	1c9ae <sc_indicate_rsp+0x32>
   1c9e8:	20001ad0 	.word	0x20001ad0
   1c9ec:	20001af0 	.word	0x20001af0

0001c9f0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1c9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9f4:	b083      	sub	sp, #12
   1c9f6:	4615      	mov	r5, r2
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c9f8:	6882      	ldr	r2, [r0, #8]
   1c9fa:	4b30      	ldr	r3, [pc, #192]	; (1cabc <disconnected_cb+0xcc>)
   1c9fc:	429a      	cmp	r2, r3
   1c9fe:	d003      	beq.n	1ca08 <disconnected_cb+0x18>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1ca00:	2001      	movs	r0, #1
   1ca02:	b003      	add	sp, #12
   1ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca08:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1ca0a:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1ca0c:	897b      	ldrh	r3, [r7, #10]
   1ca0e:	2b00      	cmp	r3, #0
   1ca10:	d0f6      	beq.n	1ca00 <disconnected_cb+0x10>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ca12:	2600      	movs	r6, #0
	value_used = false;
   1ca14:	46b1      	mov	r9, r6
   1ca16:	e021      	b.n	1ca5c <disconnected_cb+0x6c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ca18:	eb06 0886 	add.w	r8, r6, r6, lsl #2
   1ca1c:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1ca20:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1ca24:	b1cb      	cbz	r3, 1ca5a <disconnected_cb+0x6a>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ca26:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1ca2a:	f108 0a01 	add.w	sl, r8, #1
   1ca2e:	4652      	mov	r2, sl
   1ca30:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1ca34:	4628      	mov	r0, r5
   1ca36:	f008 f9e2 	bl	24dfe <bt_conn_is_peer_addr_le>
   1ca3a:	bb00      	cbnz	r0, 1ca7e <disconnected_cb+0x8e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ca3c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
   1ca40:	4651      	mov	r1, sl
   1ca42:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1ca46:	f7fe f84b 	bl	1aae0 <bt_conn_lookup_addr_le>
			if (tmp) {
   1ca4a:	4603      	mov	r3, r0
   1ca4c:	b128      	cbz	r0, 1ca5a <disconnected_cb+0x6a>
				if (tmp->state == BT_CONN_CONNECTED) {
   1ca4e:	7a82      	ldrb	r2, [r0, #10]
   1ca50:	2a07      	cmp	r2, #7
   1ca52:	d011      	beq.n	1ca78 <disconnected_cb+0x88>
				bt_conn_unref(tmp);
   1ca54:	4618      	mov	r0, r3
   1ca56:	f008 f964 	bl	24d22 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ca5a:	3601      	adds	r6, #1
   1ca5c:	2e00      	cmp	r6, #0
   1ca5e:	d0db      	beq.n	1ca18 <disconnected_cb+0x28>
	if (!value_used) {
   1ca60:	f1b9 0f00 	cmp.w	r9, #0
   1ca64:	d1cc      	bne.n	1ca00 <disconnected_cb+0x10>
		ccc->value = 0U;
   1ca66:	2300      	movs	r3, #0
   1ca68:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1ca6a:	68fb      	ldr	r3, [r7, #12]
   1ca6c:	2b00      	cmp	r3, #0
   1ca6e:	d0c7      	beq.n	1ca00 <disconnected_cb+0x10>
			ccc->cfg_changed(attr, ccc->value);
   1ca70:	2100      	movs	r1, #0
   1ca72:	4620      	mov	r0, r4
   1ca74:	4798      	blx	r3
   1ca76:	e7c3      	b.n	1ca00 <disconnected_cb+0x10>
					value_used = true;
   1ca78:	f04f 0901 	mov.w	r9, #1
   1ca7c:	e7ea      	b.n	1ca54 <disconnected_cb+0x64>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1ca7e:	f105 0388 	add.w	r3, r5, #136	; 0x88
   1ca82:	9301      	str	r3, [sp, #4]
   1ca84:	4619      	mov	r1, r3
   1ca86:	7a28      	ldrb	r0, [r5, #8]
   1ca88:	f007 fe63 	bl	24752 <bt_addr_le_is_bonded>
   1ca8c:	b950      	cbnz	r0, 1caa4 <disconnected_cb+0xb4>
				if (ccc == &sc_ccc) {
   1ca8e:	4b0c      	ldr	r3, [pc, #48]	; (1cac0 <disconnected_cb+0xd0>)
   1ca90:	429f      	cmp	r7, r3
   1ca92:	d003      	beq.n	1ca9c <disconnected_cb+0xac>
				clear_ccc_cfg(cfg);
   1ca94:	4640      	mov	r0, r8
   1ca96:	f009 fa60 	bl	25f5a <clear_ccc_cfg>
   1ca9a:	e7de      	b.n	1ca5a <disconnected_cb+0x6a>
					sc_clear(conn);
   1ca9c:	4628      	mov	r0, r5
   1ca9e:	f7ff ff29 	bl	1c8f4 <sc_clear>
   1caa2:	e7f7      	b.n	1ca94 <disconnected_cb+0xa4>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1caa4:	9a01      	ldr	r2, [sp, #4]
   1caa6:	6813      	ldr	r3, [r2, #0]
   1caa8:	f8c8 3001 	str.w	r3, [r8, #1]
   1caac:	4613      	mov	r3, r2
   1caae:	8892      	ldrh	r2, [r2, #4]
   1cab0:	799b      	ldrb	r3, [r3, #6]
   1cab2:	f8aa 2004 	strh.w	r2, [sl, #4]
   1cab6:	f88a 3006 	strb.w	r3, [sl, #6]
}
   1caba:	e7ce      	b.n	1ca5a <disconnected_cb+0x6a>
   1cabc:	0001cc59 	.word	0x0001cc59
   1cac0:	20000694 	.word	0x20000694

0001cac4 <cf_write>:
{
   1cac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cac8:	b088      	sub	sp, #32
   1caca:	461d      	mov	r5, r3
   1cacc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
   1cad0:	2b01      	cmp	r3, #1
   1cad2:	d857      	bhi.n	1cb84 <cf_write+0xc0>
   1cad4:	4606      	mov	r6, r0
   1cad6:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   1cad8:	462f      	mov	r7, r5
   1cada:	442b      	add	r3, r5
   1cadc:	2b01      	cmp	r3, #1
   1cade:	d854      	bhi.n	1cb8a <cf_write+0xc6>
	cfg = find_cf_cfg(conn);
   1cae0:	f7ff feba 	bl	1c858 <find_cf_cfg>
	if (!cfg) {
   1cae4:	4604      	mov	r4, r0
   1cae6:	b320      	cbz	r0, 1cb32 <cf_write+0x6e>
	if (!cfg) {
   1cae8:	b33c      	cbz	r4, 1cb3a <cf_write+0x76>
	if (!cf_set_value(cfg, value, len)) {
   1caea:	462a      	mov	r2, r5
   1caec:	4641      	mov	r1, r8
   1caee:	4620      	mov	r0, r4
   1caf0:	f009 f8a8 	bl	25c44 <cf_set_value>
   1caf4:	2800      	cmp	r0, #0
   1caf6:	d04b      	beq.n	1cb90 <cf_write+0xcc>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1caf8:	4633      	mov	r3, r6
   1cafa:	f853 2f88 	ldr.w	r2, [r3, #136]!
   1cafe:	f8c4 2001 	str.w	r2, [r4, #1]
   1cb02:	889a      	ldrh	r2, [r3, #4]
   1cb04:	799b      	ldrb	r3, [r3, #6]
   1cb06:	f8a4 2005 	strh.w	r2, [r4, #5]
   1cb0a:	71e3      	strb	r3, [r4, #7]
	cfg->id = conn->id;
   1cb0c:	7a33      	ldrb	r3, [r6, #8]
   1cb0e:	f804 3b0c 	strb.w	r3, [r4], #12
   1cb12:	f3bf 8f5b 	dmb	ish
   1cb16:	e854 3f00 	ldrex	r3, [r4]
   1cb1a:	f043 0301 	orr.w	r3, r3, #1
   1cb1e:	e844 3200 	strex	r2, r3, [r4]
   1cb22:	2a00      	cmp	r2, #0
   1cb24:	d1f7      	bne.n	1cb16 <cf_write+0x52>
   1cb26:	f3bf 8f5b 	dmb	ish
}
   1cb2a:	4638      	mov	r0, r7
   1cb2c:	b008      	add	sp, #32
   1cb2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1cb32:	f7ff fe91 	bl	1c858 <find_cf_cfg>
   1cb36:	4604      	mov	r4, r0
   1cb38:	e7d6      	b.n	1cae8 <cf_write+0x24>
		BT_WARN("No space to store Client Supported Features");
   1cb3a:	4b17      	ldr	r3, [pc, #92]	; (1cb98 <cf_write+0xd4>)
   1cb3c:	9306      	str	r3, [sp, #24]
   1cb3e:	2300      	movs	r3, #0
   1cb40:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cb44:	f88d 3007 	strb.w	r3, [sp, #7]
   1cb48:	2102      	movs	r1, #2
   1cb4a:	f88d 1004 	strb.w	r1, [sp, #4]
   1cb4e:	f88d 3006 	strb.w	r3, [sp, #6]
   1cb52:	9a01      	ldr	r2, [sp, #4]
   1cb54:	9205      	str	r2, [sp, #20]
   1cb56:	461a      	mov	r2, r3
   1cb58:	f363 0200 	bfi	r2, r3, #0, #1
   1cb5c:	f363 0241 	bfi	r2, r3, #1, #1
   1cb60:	f363 0282 	bfi	r2, r3, #2, #1
   1cb64:	f363 02c5 	bfi	r2, r3, #3, #3
   1cb68:	f361 1288 	bfi	r2, r1, #6, #3
   1cb6c:	2108      	movs	r1, #8
   1cb6e:	f361 2252 	bfi	r2, r1, #9, #10
   1cb72:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1cb76:	4909      	ldr	r1, [pc, #36]	; (1cb9c <cf_write+0xd8>)
   1cb78:	a802      	add	r0, sp, #8
   1cb7a:	f007 f9e7 	bl	23f4c <z_log_msg2_finalize>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1cb7e:	f06f 0710 	mvn.w	r7, #16
   1cb82:	e7d2      	b.n	1cb2a <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cb84:	f06f 0706 	mvn.w	r7, #6
   1cb88:	e7cf      	b.n	1cb2a <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1cb8a:	f06f 070c 	mvn.w	r7, #12
   1cb8e:	e7cc      	b.n	1cb2a <cf_write+0x66>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1cb90:	f06f 0712 	mvn.w	r7, #18
   1cb94:	e7c9      	b.n	1cb2a <cf_write+0x66>
   1cb96:	bf00      	nop
   1cb98:	0002a650 	.word	0x0002a650
   1cb9c:	0002889c 	.word	0x0002889c

0001cba0 <sc_save>:
{
   1cba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cba4:	b08a      	sub	sp, #40	; 0x28
   1cba6:	4607      	mov	r7, r0
   1cba8:	4688      	mov	r8, r1
   1cbaa:	4616      	mov	r6, r2
   1cbac:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1cbae:	f7ff fe7d 	bl	1c8ac <find_sc_cfg>
	if (!cfg) {
   1cbb2:	4604      	mov	r4, r0
   1cbb4:	b178      	cbz	r0, 1cbd6 <sc_save+0x36>
	if (!(cfg->data.start || cfg->data.end)) {
   1cbb6:	8923      	ldrh	r3, [r4, #8]
   1cbb8:	b913      	cbnz	r3, 1cbc0 <sc_save+0x20>
   1cbba:	8963      	ldrh	r3, [r4, #10]
   1cbbc:	2b00      	cmp	r3, #0
   1cbbe:	d044      	beq.n	1cc4a <sc_save+0xaa>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1cbc0:	462b      	mov	r3, r5
   1cbc2:	4632      	mov	r2, r6
   1cbc4:	f104 010a 	add.w	r1, r4, #10
   1cbc8:	f104 0008 	add.w	r0, r4, #8
   1cbcc:	f009 f825 	bl	25c1a <update_range>
}
   1cbd0:	b00a      	add	sp, #40	; 0x28
   1cbd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1cbd6:	9002      	str	r0, [sp, #8]
   1cbd8:	f8cd 000b 	str.w	r0, [sp, #11]
   1cbdc:	a902      	add	r1, sp, #8
   1cbde:	f7ff fe65 	bl	1c8ac <find_sc_cfg>
		if (!cfg) {
   1cbe2:	4604      	mov	r4, r0
   1cbe4:	b168      	cbz	r0, 1cc02 <sc_save+0x62>
		cfg->id = id;
   1cbe6:	4603      	mov	r3, r0
   1cbe8:	f803 7b01 	strb.w	r7, [r3], #1
   1cbec:	f8d8 2000 	ldr.w	r2, [r8]
   1cbf0:	f8c0 2001 	str.w	r2, [r0, #1]
   1cbf4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1cbf8:	f898 2006 	ldrb.w	r2, [r8, #6]
   1cbfc:	8099      	strh	r1, [r3, #4]
   1cbfe:	719a      	strb	r2, [r3, #6]
   1cc00:	e7d9      	b.n	1cbb6 <sc_save+0x16>
			BT_ERR("unable to save SC: no cfg left");
   1cc02:	4b13      	ldr	r3, [pc, #76]	; (1cc50 <sc_save+0xb0>)
   1cc04:	9308      	str	r3, [sp, #32]
   1cc06:	2300      	movs	r3, #0
   1cc08:	f8ad 3005 	strh.w	r3, [sp, #5]
   1cc0c:	f88d 3007 	strb.w	r3, [sp, #7]
   1cc10:	2202      	movs	r2, #2
   1cc12:	f88d 2004 	strb.w	r2, [sp, #4]
   1cc16:	f88d 3006 	strb.w	r3, [sp, #6]
   1cc1a:	9a01      	ldr	r2, [sp, #4]
   1cc1c:	9207      	str	r2, [sp, #28]
   1cc1e:	461a      	mov	r2, r3
   1cc20:	f363 0200 	bfi	r2, r3, #0, #1
   1cc24:	f363 0241 	bfi	r2, r3, #1, #1
   1cc28:	f363 0282 	bfi	r2, r3, #2, #1
   1cc2c:	f363 02c5 	bfi	r2, r3, #3, #3
   1cc30:	2101      	movs	r1, #1
   1cc32:	f361 1288 	bfi	r2, r1, #6, #3
   1cc36:	2108      	movs	r1, #8
   1cc38:	f361 2252 	bfi	r2, r1, #9, #10
   1cc3c:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1cc40:	4904      	ldr	r1, [pc, #16]	; (1cc54 <sc_save+0xb4>)
   1cc42:	a804      	add	r0, sp, #16
   1cc44:	f007 f982 	bl	23f4c <z_log_msg2_finalize>
			return;
   1cc48:	e7c2      	b.n	1cbd0 <sc_save+0x30>
		cfg->data.start = start;
   1cc4a:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1cc4c:	8165      	strh	r5, [r4, #10]
		goto done;
   1cc4e:	e7bf      	b.n	1cbd0 <sc_save+0x30>
   1cc50:	0002a67c 	.word	0x0002a67c
   1cc54:	0002889c 	.word	0x0002889c

0001cc58 <bt_gatt_attr_write_ccc>:
{
   1cc58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc5c:	b089      	sub	sp, #36	; 0x24
   1cc5e:	461c      	mov	r4, r3
   1cc60:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1cc64:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1cc66:	2b00      	cmp	r3, #0
   1cc68:	d16e      	bne.n	1cd48 <bt_gatt_attr_write_ccc+0xf0>
   1cc6a:	4681      	mov	r9, r0
   1cc6c:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1cc6e:	1e63      	subs	r3, r4, #1
   1cc70:	b29b      	uxth	r3, r3
   1cc72:	2b01      	cmp	r3, #1
   1cc74:	d86b      	bhi.n	1cd4e <bt_gatt_attr_write_ccc+0xf6>
	if (len < sizeof(uint16_t)) {
   1cc76:	2c01      	cmp	r4, #1
   1cc78:	d91f      	bls.n	1ccba <bt_gatt_attr_write_ccc+0x62>
   1cc7a:	7853      	ldrb	r3, [r2, #1]
   1cc7c:	7815      	ldrb	r5, [r2, #0]
   1cc7e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1cc82:	4639      	mov	r1, r7
   1cc84:	4648      	mov	r0, r9
   1cc86:	f009 f8cf 	bl	25e28 <find_ccc_cfg>
	if (!cfg) {
   1cc8a:	4680      	mov	r8, r0
   1cc8c:	b1b8      	cbz	r0, 1ccbe <bt_gatt_attr_write_ccc+0x66>
	if (ccc->cfg_write) {
   1cc8e:	693b      	ldr	r3, [r7, #16]
   1cc90:	b143      	cbz	r3, 1cca4 <bt_gatt_attr_write_ccc+0x4c>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1cc92:	462a      	mov	r2, r5
   1cc94:	4631      	mov	r1, r6
   1cc96:	4648      	mov	r0, r9
   1cc98:	4798      	blx	r3
		if (write < 0) {
   1cc9a:	2800      	cmp	r0, #0
   1cc9c:	db0a      	blt.n	1ccb4 <bt_gatt_attr_write_ccc+0x5c>
		if (write != sizeof(value) && write != 1) {
   1cc9e:	3801      	subs	r0, #1
   1cca0:	2801      	cmp	r0, #1
   1cca2:	d857      	bhi.n	1cd54 <bt_gatt_attr_write_ccc+0xfc>
	cfg->value = value;
   1cca4:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1cca8:	897b      	ldrh	r3, [r7, #10]
   1ccaa:	429d      	cmp	r5, r3
   1ccac:	d143      	bne.n	1cd36 <bt_gatt_attr_write_ccc+0xde>
	if (!value) {
   1ccae:	2d00      	cmp	r5, #0
   1ccb0:	d046      	beq.n	1cd40 <bt_gatt_attr_write_ccc+0xe8>
	return len;
   1ccb2:	4620      	mov	r0, r4
}
   1ccb4:	b009      	add	sp, #36	; 0x24
   1ccb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1ccba:	7815      	ldrb	r5, [r2, #0]
   1ccbc:	e7e1      	b.n	1cc82 <bt_gatt_attr_write_ccc+0x2a>
		if (!value) {
   1ccbe:	b90d      	cbnz	r5, 1ccc4 <bt_gatt_attr_write_ccc+0x6c>
			return len;
   1ccc0:	4620      	mov	r0, r4
   1ccc2:	e7f7      	b.n	1ccb4 <bt_gatt_attr_write_ccc+0x5c>
		cfg = find_ccc_cfg(NULL, ccc);
   1ccc4:	4639      	mov	r1, r7
   1ccc6:	2000      	movs	r0, #0
   1ccc8:	f009 f8ae 	bl	25e28 <find_ccc_cfg>
		if (!cfg) {
   1cccc:	4680      	mov	r8, r0
   1ccce:	b168      	cbz	r0, 1ccec <bt_gatt_attr_write_ccc+0x94>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ccd0:	464b      	mov	r3, r9
   1ccd2:	f853 2f88 	ldr.w	r2, [r3, #136]!
   1ccd6:	f8c0 2001 	str.w	r2, [r0, #1]
   1ccda:	889a      	ldrh	r2, [r3, #4]
   1ccdc:	799b      	ldrb	r3, [r3, #6]
   1ccde:	f8a0 2005 	strh.w	r2, [r0, #5]
   1cce2:	71c3      	strb	r3, [r0, #7]
		cfg->id = conn->id;
   1cce4:	f899 3008 	ldrb.w	r3, [r9, #8]
   1cce8:	7003      	strb	r3, [r0, #0]
   1ccea:	e7d0      	b.n	1cc8e <bt_gatt_attr_write_ccc+0x36>
			BT_WARN("No space to store CCC cfg");
   1ccec:	4b1b      	ldr	r3, [pc, #108]	; (1cd5c <bt_gatt_attr_write_ccc+0x104>)
   1ccee:	9306      	str	r3, [sp, #24]
   1ccf0:	2300      	movs	r3, #0
   1ccf2:	f8ad 3005 	strh.w	r3, [sp, #5]
   1ccf6:	f88d 3007 	strb.w	r3, [sp, #7]
   1ccfa:	2102      	movs	r1, #2
   1ccfc:	f88d 1004 	strb.w	r1, [sp, #4]
   1cd00:	f88d 3006 	strb.w	r3, [sp, #6]
   1cd04:	9a01      	ldr	r2, [sp, #4]
   1cd06:	9205      	str	r2, [sp, #20]
   1cd08:	461a      	mov	r2, r3
   1cd0a:	f363 0200 	bfi	r2, r3, #0, #1
   1cd0e:	f363 0241 	bfi	r2, r3, #1, #1
   1cd12:	f363 0282 	bfi	r2, r3, #2, #1
   1cd16:	f363 02c5 	bfi	r2, r3, #3, #3
   1cd1a:	f361 1288 	bfi	r2, r1, #6, #3
   1cd1e:	2108      	movs	r1, #8
   1cd20:	f361 2252 	bfi	r2, r1, #9, #10
   1cd24:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1cd28:	490d      	ldr	r1, [pc, #52]	; (1cd60 <bt_gatt_attr_write_ccc+0x108>)
   1cd2a:	a802      	add	r0, sp, #8
   1cd2c:	f007 f90e 	bl	23f4c <z_log_msg2_finalize>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1cd30:	f06f 0010 	mvn.w	r0, #16
   1cd34:	e7be      	b.n	1ccb4 <bt_gatt_attr_write_ccc+0x5c>
		gatt_ccc_changed(attr, ccc);
   1cd36:	4639      	mov	r1, r7
   1cd38:	4630      	mov	r0, r6
   1cd3a:	f008 ffb4 	bl	25ca6 <gatt_ccc_changed>
   1cd3e:	e7b6      	b.n	1ccae <bt_gatt_attr_write_ccc+0x56>
		clear_ccc_cfg(cfg);
   1cd40:	4640      	mov	r0, r8
   1cd42:	f009 f90a 	bl	25f5a <clear_ccc_cfg>
   1cd46:	e7b4      	b.n	1ccb2 <bt_gatt_attr_write_ccc+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1cd48:	f06f 0006 	mvn.w	r0, #6
   1cd4c:	e7b2      	b.n	1ccb4 <bt_gatt_attr_write_ccc+0x5c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1cd4e:	f06f 000c 	mvn.w	r0, #12
   1cd52:	e7af      	b.n	1ccb4 <bt_gatt_attr_write_ccc+0x5c>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1cd54:	f06f 000d 	mvn.w	r0, #13
   1cd58:	e7ac      	b.n	1ccb4 <bt_gatt_attr_write_ccc+0x5c>
   1cd5a:	bf00      	nop
   1cd5c:	0002a69c 	.word	0x0002a69c
   1cd60:	0002889c 	.word	0x0002889c

0001cd64 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1cd64:	4b13      	ldr	r3, [pc, #76]	; (1cdb4 <bt_gatt_init+0x50>)
   1cd66:	2201      	movs	r2, #1
   1cd68:	f3bf 8f5b 	dmb	ish
   1cd6c:	e853 1f00 	ldrex	r1, [r3]
   1cd70:	2900      	cmp	r1, #0
   1cd72:	d103      	bne.n	1cd7c <bt_gatt_init+0x18>
   1cd74:	e843 2000 	strex	r0, r2, [r3]
   1cd78:	2800      	cmp	r0, #0
   1cd7a:	d1f7      	bne.n	1cd6c <bt_gatt_init+0x8>
   1cd7c:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1cd80:	d116      	bne.n	1cdb0 <bt_gatt_init+0x4c>
{
   1cd82:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1cd84:	f7ff fd44 	bl	1c810 <bt_gatt_service_init>
	list->head = NULL;
   1cd88:	4b0b      	ldr	r3, [pc, #44]	; (1cdb8 <bt_gatt_init+0x54>)
   1cd8a:	2200      	movs	r2, #0
   1cd8c:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1cd8e:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1cd90:	4c0a      	ldr	r4, [pc, #40]	; (1cdbc <bt_gatt_init+0x58>)
   1cd92:	490b      	ldr	r1, [pc, #44]	; (1cdc0 <bt_gatt_init+0x5c>)
   1cd94:	4620      	mov	r0, r4
   1cd96:	f00b f81f 	bl	27dd8 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1cd9a:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1cd9e:	2300      	movs	r3, #0
   1cda0:	4620      	mov	r0, r4
   1cda2:	f004 fb93 	bl	214cc <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1cda6:	4907      	ldr	r1, [pc, #28]	; (1cdc4 <bt_gatt_init+0x60>)
   1cda8:	4807      	ldr	r0, [pc, #28]	; (1cdc8 <bt_gatt_init+0x64>)
   1cdaa:	f00b f815 	bl	27dd8 <k_work_init_delayable>
}
   1cdae:	bd10      	pop	{r4, pc}
   1cdb0:	4770      	bx	lr
   1cdb2:	bf00      	nop
   1cdb4:	20002afc 	.word	0x20002afc
   1cdb8:	20002ae4 	.word	0x20002ae4
   1cdbc:	20001a78 	.word	0x20001a78
   1cdc0:	0002621f 	.word	0x0002621f
   1cdc4:	0001d24d 	.word	0x0001d24d
   1cdc8:	20001af0 	.word	0x20001af0

0001cdcc <bt_gatt_cb_register>:
	sys_slist_append(&callback_list, &cb->node);
   1cdcc:	1d03      	adds	r3, r0, #4
	parent->next = child;
   1cdce:	2200      	movs	r2, #0
   1cdd0:	6042      	str	r2, [r0, #4]
	return list->tail;
   1cdd2:	4a05      	ldr	r2, [pc, #20]	; (1cde8 <bt_gatt_cb_register+0x1c>)
   1cdd4:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
   1cdd6:	b11a      	cbz	r2, 1cde0 <bt_gatt_cb_register+0x14>
	parent->next = child;
   1cdd8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1cdda:	4a03      	ldr	r2, [pc, #12]	; (1cde8 <bt_gatt_cb_register+0x1c>)
   1cddc:	6053      	str	r3, [r2, #4]
}
   1cdde:	4770      	bx	lr
   1cde0:	4a01      	ldr	r2, [pc, #4]	; (1cde8 <bt_gatt_cb_register+0x1c>)
   1cde2:	6053      	str	r3, [r2, #4]
	list->head = node;
   1cde4:	6013      	str	r3, [r2, #0]
}
   1cde6:	4770      	bx	lr
   1cde8:	20002ae4 	.word	0x20002ae4

0001cdec <bt_gatt_attr_get_handle>:
	if (!attr) {
   1cdec:	b328      	cbz	r0, 1ce3a <bt_gatt_attr_get_handle+0x4e>
{
   1cdee:	b4f0      	push	{r4, r5, r6, r7}
   1cdf0:	4606      	mov	r6, r0
	if (attr->handle) {
   1cdf2:	8a00      	ldrh	r0, [r0, #16]
   1cdf4:	bb20      	cbnz	r0, 1ce40 <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cdf6:	4d13      	ldr	r5, [pc, #76]	; (1ce44 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   1cdf8:	2201      	movs	r2, #1
   1cdfa:	e003      	b.n	1ce04 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1cdfc:	686b      	ldr	r3, [r5, #4]
   1cdfe:	441a      	add	r2, r3
   1ce00:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ce02:	3508      	adds	r5, #8
   1ce04:	4b10      	ldr	r3, [pc, #64]	; (1ce48 <bt_gatt_attr_get_handle+0x5c>)
   1ce06:	429d      	cmp	r5, r3
   1ce08:	d21a      	bcs.n	1ce40 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1ce0a:	682c      	ldr	r4, [r5, #0]
   1ce0c:	42b4      	cmp	r4, r6
   1ce0e:	d8f5      	bhi.n	1cdfc <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1ce10:	686f      	ldr	r7, [r5, #4]
   1ce12:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1ce16:	009b      	lsls	r3, r3, #2
   1ce18:	3b14      	subs	r3, #20
   1ce1a:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1ce1c:	42b3      	cmp	r3, r6
   1ce1e:	d3ed      	bcc.n	1cdfc <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ce20:	2300      	movs	r3, #0
   1ce22:	429f      	cmp	r7, r3
   1ce24:	d9ed      	bls.n	1ce02 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1ce26:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ce2a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1ce2e:	42b1      	cmp	r1, r6
   1ce30:	d005      	beq.n	1ce3e <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ce32:	3301      	adds	r3, #1
   1ce34:	3201      	adds	r2, #1
   1ce36:	b292      	uxth	r2, r2
   1ce38:	e7f3      	b.n	1ce22 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1ce3a:	2000      	movs	r0, #0
}
   1ce3c:	4770      	bx	lr
				return handle;
   1ce3e:	4610      	mov	r0, r2
}
   1ce40:	bcf0      	pop	{r4, r5, r6, r7}
   1ce42:	4770      	bx	lr
   1ce44:	0002885c 	.word	0x0002885c
   1ce48:	00028874 	.word	0x00028874

0001ce4c <bt_gatt_foreach_attr_type>:
{
   1ce4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce50:	b089      	sub	sp, #36	; 0x24
   1ce52:	4607      	mov	r7, r0
   1ce54:	468a      	mov	sl, r1
   1ce56:	4690      	mov	r8, r2
   1ce58:	4699      	mov	r9, r3
   1ce5a:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1ce5e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1ce62:	b91b      	cbnz	r3, 1ce6c <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   1ce64:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ce68:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1ce6c:	4b19      	ldr	r3, [pc, #100]	; (1ced4 <bt_gatt_foreach_attr_type+0x88>)
   1ce6e:	881b      	ldrh	r3, [r3, #0]
   1ce70:	42bb      	cmp	r3, r7
   1ce72:	d22c      	bcs.n	1cece <bt_gatt_foreach_attr_type+0x82>
}
   1ce74:	b009      	add	sp, #36	; 0x24
   1ce76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1ce7a:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ce7c:	3608      	adds	r6, #8
   1ce7e:	4b16      	ldr	r3, [pc, #88]	; (1ced8 <bt_gatt_foreach_attr_type+0x8c>)
   1ce80:	429e      	cmp	r6, r3
   1ce82:	d2f7      	bcs.n	1ce74 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   1ce84:	6873      	ldr	r3, [r6, #4]
   1ce86:	18e2      	adds	r2, r4, r3
   1ce88:	42ba      	cmp	r2, r7
   1ce8a:	d3f6      	bcc.n	1ce7a <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ce8c:	2500      	movs	r5, #0
   1ce8e:	9707      	str	r7, [sp, #28]
   1ce90:	6873      	ldr	r3, [r6, #4]
   1ce92:	42ab      	cmp	r3, r5
   1ce94:	d919      	bls.n	1ceca <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ce96:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1ce9a:	f8cd b010 	str.w	fp, [sp, #16]
   1ce9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1cea0:	9303      	str	r3, [sp, #12]
   1cea2:	ab12      	add	r3, sp, #72	; 0x48
   1cea4:	9302      	str	r3, [sp, #8]
   1cea6:	f8cd 9004 	str.w	r9, [sp, #4]
   1ceaa:	f8cd 8000 	str.w	r8, [sp]
   1ceae:	4653      	mov	r3, sl
   1ceb0:	9a07      	ldr	r2, [sp, #28]
   1ceb2:	4621      	mov	r1, r4
   1ceb4:	6837      	ldr	r7, [r6, #0]
   1ceb6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1ceba:	f009 f815 	bl	25ee8 <gatt_foreach_iter>
   1cebe:	2800      	cmp	r0, #0
   1cec0:	d0d8      	beq.n	1ce74 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1cec2:	3501      	adds	r5, #1
   1cec4:	3401      	adds	r4, #1
   1cec6:	b2a4      	uxth	r4, r4
   1cec8:	e7e2      	b.n	1ce90 <bt_gatt_foreach_attr_type+0x44>
   1ceca:	9f07      	ldr	r7, [sp, #28]
   1cecc:	e7d6      	b.n	1ce7c <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1cece:	4e03      	ldr	r6, [pc, #12]	; (1cedc <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   1ced0:	2401      	movs	r4, #1
   1ced2:	e7d4      	b.n	1ce7e <bt_gatt_foreach_attr_type+0x32>
   1ced4:	20003c72 	.word	0x20003c72
   1ced8:	00028874 	.word	0x00028874
   1cedc:	0002885c 	.word	0x0002885c

0001cee0 <db_hash_gen>:
{
   1cee0:	b510      	push	{r4, lr}
   1cee2:	b0da      	sub	sp, #360	; 0x168
	uint8_t key[16] = {};
   1cee4:	2300      	movs	r3, #0
   1cee6:	934a      	str	r3, [sp, #296]	; 0x128
   1cee8:	934b      	str	r3, [sp, #300]	; 0x12c
   1ceea:	934c      	str	r3, [sp, #304]	; 0x130
   1ceec:	934d      	str	r3, [sp, #308]	; 0x134
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ceee:	aa1e      	add	r2, sp, #120	; 0x78
   1cef0:	a94a      	add	r1, sp, #296	; 0x128
   1cef2:	a806      	add	r0, sp, #24
   1cef4:	f007 f8e3 	bl	240be <tc_cmac_setup>
   1cef8:	b190      	cbz	r0, 1cf20 <db_hash_gen+0x40>
   1cefa:	ac06      	add	r4, sp, #24
   1cefc:	9402      	str	r4, [sp, #8]
   1cefe:	4b39      	ldr	r3, [pc, #228]	; (1cfe4 <db_hash_gen+0x104>)
   1cf00:	9301      	str	r3, [sp, #4]
   1cf02:	2200      	movs	r2, #0
   1cf04:	9200      	str	r2, [sp, #0]
   1cf06:	4613      	mov	r3, r2
   1cf08:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1cf0c:	2001      	movs	r0, #1
   1cf0e:	f7ff ff9d 	bl	1ce4c <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1cf12:	4621      	mov	r1, r4
   1cf14:	4834      	ldr	r0, [pc, #208]	; (1cfe8 <db_hash_gen+0x108>)
   1cf16:	f007 f96d 	bl	241f4 <tc_cmac_final>
   1cf1a:	b328      	cbz	r0, 1cf68 <db_hash_gen+0x88>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1cf1c:	2300      	movs	r3, #0
   1cf1e:	e04f      	b.n	1cfc0 <db_hash_gen+0xe0>
		BT_ERR("Unable to setup AES CMAC");
   1cf20:	4b32      	ldr	r3, [pc, #200]	; (1cfec <db_hash_gen+0x10c>)
   1cf22:	9358      	str	r3, [sp, #352]	; 0x160
   1cf24:	2300      	movs	r3, #0
   1cf26:	f8ad 3015 	strh.w	r3, [sp, #21]
   1cf2a:	f88d 3017 	strb.w	r3, [sp, #23]
   1cf2e:	2202      	movs	r2, #2
   1cf30:	f88d 2014 	strb.w	r2, [sp, #20]
   1cf34:	f88d 3016 	strb.w	r3, [sp, #22]
   1cf38:	9a05      	ldr	r2, [sp, #20]
   1cf3a:	9257      	str	r2, [sp, #348]	; 0x15c
   1cf3c:	461a      	mov	r2, r3
   1cf3e:	f363 0200 	bfi	r2, r3, #0, #1
   1cf42:	f363 0241 	bfi	r2, r3, #1, #1
   1cf46:	f363 0282 	bfi	r2, r3, #2, #1
   1cf4a:	f363 02c5 	bfi	r2, r3, #3, #3
   1cf4e:	2101      	movs	r1, #1
   1cf50:	f361 1288 	bfi	r2, r1, #6, #3
   1cf54:	2108      	movs	r1, #8
   1cf56:	f361 2252 	bfi	r2, r1, #9, #10
   1cf5a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1cf5e:	4924      	ldr	r1, [pc, #144]	; (1cff0 <db_hash_gen+0x110>)
   1cf60:	a854      	add	r0, sp, #336	; 0x150
   1cf62:	f006 fff3 	bl	23f4c <z_log_msg2_finalize>
		return;
   1cf66:	e03a      	b.n	1cfde <db_hash_gen+0xfe>
		BT_ERR("Unable to calculate hash");
   1cf68:	4b22      	ldr	r3, [pc, #136]	; (1cff4 <db_hash_gen+0x114>)
   1cf6a:	9352      	str	r3, [sp, #328]	; 0x148
   1cf6c:	2300      	movs	r3, #0
   1cf6e:	f8ad 3015 	strh.w	r3, [sp, #21]
   1cf72:	f88d 3017 	strb.w	r3, [sp, #23]
   1cf76:	2202      	movs	r2, #2
   1cf78:	f88d 2014 	strb.w	r2, [sp, #20]
   1cf7c:	f88d 3016 	strb.w	r3, [sp, #22]
   1cf80:	9a05      	ldr	r2, [sp, #20]
   1cf82:	9251      	str	r2, [sp, #324]	; 0x144
   1cf84:	461a      	mov	r2, r3
   1cf86:	f363 0200 	bfi	r2, r3, #0, #1
   1cf8a:	f363 0241 	bfi	r2, r3, #1, #1
   1cf8e:	f363 0282 	bfi	r2, r3, #2, #1
   1cf92:	f363 02c5 	bfi	r2, r3, #3, #3
   1cf96:	2101      	movs	r1, #1
   1cf98:	f361 1288 	bfi	r2, r1, #6, #3
   1cf9c:	2108      	movs	r1, #8
   1cf9e:	f361 2252 	bfi	r2, r1, #9, #10
   1cfa2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1cfa6:	4912      	ldr	r1, [pc, #72]	; (1cff0 <db_hash_gen+0x110>)
   1cfa8:	a84e      	add	r0, sp, #312	; 0x138
   1cfaa:	f006 ffcf 	bl	23f4c <z_log_msg2_finalize>
		return;
   1cfae:	e016      	b.n	1cfde <db_hash_gen+0xfe>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1cfb0:	4a0d      	ldr	r2, [pc, #52]	; (1cfe8 <db_hash_gen+0x108>)
   1cfb2:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1cfb4:	f1c3 010f 	rsb	r1, r3, #15
   1cfb8:	5c54      	ldrb	r4, [r2, r1]
   1cfba:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1cfbc:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1cfbe:	3301      	adds	r3, #1
   1cfc0:	2b07      	cmp	r3, #7
   1cfc2:	d9f5      	bls.n	1cfb0 <db_hash_gen+0xd0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1cfc4:	4b0c      	ldr	r3, [pc, #48]	; (1cff8 <db_hash_gen+0x118>)
   1cfc6:	f3bf 8f5b 	dmb	ish
   1cfca:	e853 2f00 	ldrex	r2, [r3]
   1cfce:	f042 0204 	orr.w	r2, r2, #4
   1cfd2:	e843 2100 	strex	r1, r2, [r3]
   1cfd6:	2900      	cmp	r1, #0
   1cfd8:	d1f7      	bne.n	1cfca <db_hash_gen+0xea>
   1cfda:	f3bf 8f5b 	dmb	ish
}
   1cfde:	b05a      	add	sp, #360	; 0x168
   1cfe0:	bd10      	pop	{r4, pc}
   1cfe2:	bf00      	nop
   1cfe4:	00025d49 	.word	0x00025d49
   1cfe8:	20001a68 	.word	0x20001a68
   1cfec:	0002a6b8 	.word	0x0002a6b8
   1cff0:	0002889c 	.word	0x0002889c
   1cff4:	0002a6d4 	.word	0x0002a6d4
   1cff8:	20001b20 	.word	0x20001b20

0001cffc <gatt_find_by_uuid>:
{
   1cffc:	b510      	push	{r4, lr}
   1cffe:	b084      	sub	sp, #16
   1d000:	4604      	mov	r4, r0
   1d002:	460a      	mov	r2, r1
	found->attr = NULL;
   1d004:	2300      	movs	r3, #0
   1d006:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d008:	9002      	str	r0, [sp, #8]
   1d00a:	4907      	ldr	r1, [pc, #28]	; (1d028 <gatt_find_by_uuid+0x2c>)
   1d00c:	9101      	str	r1, [sp, #4]
   1d00e:	2101      	movs	r1, #1
   1d010:	9100      	str	r1, [sp, #0]
   1d012:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d016:	8880      	ldrh	r0, [r0, #4]
   1d018:	f7ff ff18 	bl	1ce4c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1d01c:	6820      	ldr	r0, [r4, #0]
}
   1d01e:	3800      	subs	r0, #0
   1d020:	bf18      	it	ne
   1d022:	2001      	movne	r0, #1
   1d024:	b004      	add	sp, #16
   1d026:	bd10      	pop	{r4, pc}
   1d028:	00025cf9 	.word	0x00025cf9

0001d02c <gatt_indicate>:
{
   1d02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d030:	b090      	sub	sp, #64	; 0x40
   1d032:	4606      	mov	r6, r0
   1d034:	460f      	mov	r7, r1
   1d036:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1d038:	2214      	movs	r2, #20
   1d03a:	6861      	ldr	r1, [r4, #4]
   1d03c:	f009 f8f4 	bl	26228 <bt_gatt_check_perm>
   1d040:	bb90      	cbnz	r0, 1d0a8 <gatt_indicate+0x7c>
	len = sizeof(*ind) + params->len;
   1d042:	8aa5      	ldrh	r5, [r4, #20]
   1d044:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1d046:	9500      	str	r5, [sp, #0]
   1d048:	231d      	movs	r3, #29
   1d04a:	2200      	movs	r2, #0
   1d04c:	4621      	mov	r1, r4
   1d04e:	4840      	ldr	r0, [pc, #256]	; (1d150 <gatt_indicate+0x124>)
   1d050:	f008 ff75 	bl	25f3e <gatt_req_alloc>
	if (!req) {
   1d054:	4680      	mov	r8, r0
   1d056:	2800      	cmp	r0, #0
   1d058:	d077      	beq.n	1d14a <gatt_indicate+0x11e>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1d05a:	462a      	mov	r2, r5
   1d05c:	211d      	movs	r1, #29
   1d05e:	4630      	mov	r0, r6
   1d060:	f7ff f8a4 	bl	1c1ac <bt_att_create_pdu>
	if (!buf) {
   1d064:	4681      	mov	r9, r0
   1d066:	2800      	cmp	r0, #0
   1d068:	d043      	beq.n	1d0f2 <gatt_indicate+0xc6>
   1d06a:	f100 0a08 	add.w	sl, r0, #8
   1d06e:	2102      	movs	r1, #2
   1d070:	4650      	mov	r0, sl
   1d072:	f009 fad5 	bl	26620 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1d076:	4605      	mov	r5, r0
   1d078:	f825 7b02 	strh.w	r7, [r5], #2
   1d07c:	8aa1      	ldrh	r1, [r4, #20]
   1d07e:	4650      	mov	r0, sl
   1d080:	f009 face 	bl	26620 <net_buf_simple_add>
   1d084:	8aa2      	ldrh	r2, [r4, #20]
   1d086:	6921      	ldr	r1, [r4, #16]
   1d088:	4628      	mov	r0, r5
   1d08a:	f00b fa08 	bl	2849e <memcpy>
	req->buf = buf;
   1d08e:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   1d092:	4641      	mov	r1, r8
   1d094:	4630      	mov	r0, r6
   1d096:	f008 fda9 	bl	25bec <bt_att_req_send>
	if (err) {
   1d09a:	4604      	mov	r4, r0
   1d09c:	2800      	cmp	r0, #0
   1d09e:	d150      	bne.n	1d142 <gatt_indicate+0x116>
}
   1d0a0:	4620      	mov	r0, r4
   1d0a2:	b010      	add	sp, #64	; 0x40
   1d0a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		BT_WARN("Link is not encrypted");
   1d0a8:	4b2a      	ldr	r3, [pc, #168]	; (1d154 <gatt_indicate+0x128>)
   1d0aa:	930e      	str	r3, [sp, #56]	; 0x38
   1d0ac:	2300      	movs	r3, #0
   1d0ae:	f8ad 300d 	strh.w	r3, [sp, #13]
   1d0b2:	f88d 300f 	strb.w	r3, [sp, #15]
   1d0b6:	2102      	movs	r1, #2
   1d0b8:	f88d 100c 	strb.w	r1, [sp, #12]
   1d0bc:	f88d 300e 	strb.w	r3, [sp, #14]
   1d0c0:	9a03      	ldr	r2, [sp, #12]
   1d0c2:	920d      	str	r2, [sp, #52]	; 0x34
   1d0c4:	461a      	mov	r2, r3
   1d0c6:	f363 0200 	bfi	r2, r3, #0, #1
   1d0ca:	f363 0241 	bfi	r2, r3, #1, #1
   1d0ce:	f363 0282 	bfi	r2, r3, #2, #1
   1d0d2:	f363 02c5 	bfi	r2, r3, #3, #3
   1d0d6:	f361 1288 	bfi	r2, r1, #6, #3
   1d0da:	2108      	movs	r1, #8
   1d0dc:	f361 2252 	bfi	r2, r1, #9, #10
   1d0e0:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1d0e4:	491c      	ldr	r1, [pc, #112]	; (1d158 <gatt_indicate+0x12c>)
   1d0e6:	a80a      	add	r0, sp, #40	; 0x28
   1d0e8:	f006 ff30 	bl	23f4c <z_log_msg2_finalize>
		return -EPERM;
   1d0ec:	f04f 34ff 	mov.w	r4, #4294967295
   1d0f0:	e7d6      	b.n	1d0a0 <gatt_indicate+0x74>
		BT_WARN("No buffer available to send indication");
   1d0f2:	4b1a      	ldr	r3, [pc, #104]	; (1d15c <gatt_indicate+0x130>)
   1d0f4:	9308      	str	r3, [sp, #32]
   1d0f6:	2300      	movs	r3, #0
   1d0f8:	f8ad 300d 	strh.w	r3, [sp, #13]
   1d0fc:	f88d 300f 	strb.w	r3, [sp, #15]
   1d100:	2102      	movs	r1, #2
   1d102:	f88d 100c 	strb.w	r1, [sp, #12]
   1d106:	f88d 300e 	strb.w	r3, [sp, #14]
   1d10a:	9a03      	ldr	r2, [sp, #12]
   1d10c:	9207      	str	r2, [sp, #28]
   1d10e:	461a      	mov	r2, r3
   1d110:	f363 0200 	bfi	r2, r3, #0, #1
   1d114:	f363 0241 	bfi	r2, r3, #1, #1
   1d118:	f363 0282 	bfi	r2, r3, #2, #1
   1d11c:	f363 02c5 	bfi	r2, r3, #3, #3
   1d120:	f361 1288 	bfi	r2, r1, #6, #3
   1d124:	2108      	movs	r1, #8
   1d126:	f361 2252 	bfi	r2, r1, #9, #10
   1d12a:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1d12e:	490a      	ldr	r1, [pc, #40]	; (1d158 <gatt_indicate+0x12c>)
   1d130:	a804      	add	r0, sp, #16
   1d132:	f006 ff0b 	bl	23f4c <z_log_msg2_finalize>
		bt_att_req_free(req);
   1d136:	4640      	mov	r0, r8
   1d138:	f7ff fa96 	bl	1c668 <bt_att_req_free>
		return -ENOMEM;
   1d13c:	f06f 040b 	mvn.w	r4, #11
   1d140:	e7ae      	b.n	1d0a0 <gatt_indicate+0x74>
		bt_att_req_free(req);
   1d142:	4640      	mov	r0, r8
   1d144:	f7ff fa90 	bl	1c668 <bt_att_req_free>
   1d148:	e7aa      	b.n	1d0a0 <gatt_indicate+0x74>
		return -ENOMEM;
   1d14a:	f06f 040b 	mvn.w	r4, #11
   1d14e:	e7a7      	b.n	1d0a0 <gatt_indicate+0x74>
   1d150:	00025cd7 	.word	0x00025cd7
   1d154:	0002a6f0 	.word	0x0002a6f0
   1d158:	0002889c 	.word	0x0002889c
   1d15c:	0002a708 	.word	0x0002a708

0001d160 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d160:	f3bf 8f5b 	dmb	ish
   1d164:	4b37      	ldr	r3, [pc, #220]	; (1d244 <bt_gatt_indicate+0xe4>)
   1d166:	681b      	ldr	r3, [r3, #0]
   1d168:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d16c:	f013 0f02 	tst.w	r3, #2
   1d170:	d05e      	beq.n	1d230 <bt_gatt_indicate+0xd0>
{
   1d172:	b530      	push	{r4, r5, lr}
   1d174:	b08d      	sub	sp, #52	; 0x34
   1d176:	4605      	mov	r5, r0
   1d178:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d17a:	b110      	cbz	r0, 1d182 <bt_gatt_indicate+0x22>
   1d17c:	7a83      	ldrb	r3, [r0, #10]
   1d17e:	2b07      	cmp	r3, #7
   1d180:	d159      	bne.n	1d236 <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1d182:	6860      	ldr	r0, [r4, #4]
   1d184:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d186:	f7ff fe31 	bl	1cdec <bt_gatt_attr_get_handle>
   1d18a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1d18e:	6821      	ldr	r1, [r4, #0]
   1d190:	b341      	cbz	r1, 1d1e4 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d192:	a805      	add	r0, sp, #20
   1d194:	f7ff ff32 	bl	1cffc <gatt_find_by_uuid>
   1d198:	2800      	cmp	r0, #0
   1d19a:	d04f      	beq.n	1d23c <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1d19c:	9b05      	ldr	r3, [sp, #20]
   1d19e:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d1a0:	9b05      	ldr	r3, [sp, #20]
   1d1a2:	6818      	ldr	r0, [r3, #0]
   1d1a4:	2300      	movs	r3, #0
   1d1a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1d1aa:	f642 0303 	movw	r3, #10243	; 0x2803
   1d1ae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1d1b2:	a90b      	add	r1, sp, #44	; 0x2c
   1d1b4:	f007 f91c 	bl	243f0 <bt_uuid_cmp>
   1d1b8:	b948      	cbnz	r0, 1d1ce <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d1ba:	9805      	ldr	r0, [sp, #20]
   1d1bc:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1d1be:	799b      	ldrb	r3, [r3, #6]
   1d1c0:	f013 0f20 	tst.w	r3, #32
   1d1c4:	d013      	beq.n	1d1ee <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d1c6:	f008 ffd4 	bl	26172 <bt_gatt_attr_value_handle>
   1d1ca:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1d1ce:	b18d      	cbz	r5, 1d1f4 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1d1d0:	2301      	movs	r3, #1
   1d1d2:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1d1d4:	4622      	mov	r2, r4
   1d1d6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d1da:	4628      	mov	r0, r5
   1d1dc:	f7ff ff26 	bl	1d02c <gatt_indicate>
}
   1d1e0:	b00d      	add	sp, #52	; 0x34
   1d1e2:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1d1e4:	2800      	cmp	r0, #0
   1d1e6:	d1db      	bne.n	1d1a0 <bt_gatt_indicate+0x40>
			return -ENOENT;
   1d1e8:	f06f 0001 	mvn.w	r0, #1
   1d1ec:	e7f8      	b.n	1d1e0 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1d1ee:	f06f 0015 	mvn.w	r0, #21
   1d1f2:	e7f5      	b.n	1d1e0 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1d1f4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d1f8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1d1fa:	2302      	movs	r3, #2
   1d1fc:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1d200:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1d202:	2300      	movs	r3, #0
   1d204:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d206:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1d20a:	f642 1202 	movw	r2, #10498	; 0x2902
   1d20e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1d212:	aa05      	add	r2, sp, #20
   1d214:	9202      	str	r2, [sp, #8]
   1d216:	4a0c      	ldr	r2, [pc, #48]	; (1d248 <bt_gatt_indicate+0xe8>)
   1d218:	9201      	str	r2, [sp, #4]
   1d21a:	2201      	movs	r2, #1
   1d21c:	9200      	str	r2, [sp, #0]
   1d21e:	aa0a      	add	r2, sp, #40	; 0x28
   1d220:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d224:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d228:	f7ff fe10 	bl	1ce4c <bt_gatt_foreach_attr_type>
	return data.err;
   1d22c:	9807      	ldr	r0, [sp, #28]
   1d22e:	e7d7      	b.n	1d1e0 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1d230:	f06f 000a 	mvn.w	r0, #10
}
   1d234:	4770      	bx	lr
		return -ENOTCONN;
   1d236:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d23a:	e7d1      	b.n	1d1e0 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1d23c:	f06f 0001 	mvn.w	r0, #1
   1d240:	e7ce      	b.n	1d1e0 <bt_gatt_indicate+0x80>
   1d242:	bf00      	nop
   1d244:	2000037c 	.word	0x2000037c
   1d248:	0001d565 	.word	0x0001d565

0001d24c <sc_process>:
{
   1d24c:	b510      	push	{r4, lr}
   1d24e:	b082      	sub	sp, #8
   1d250:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1d252:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1d256:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1d25a:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1d25e:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1d262:	f1a0 0120 	sub.w	r1, r0, #32
   1d266:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d26a:	f3bf 8f5b 	dmb	ish
   1d26e:	e854 2f00 	ldrex	r2, [r4]
   1d272:	f022 0201 	bic.w	r2, r2, #1
   1d276:	e844 2000 	strex	r0, r2, [r4]
   1d27a:	2800      	cmp	r0, #0
   1d27c:	d1f7      	bne.n	1d26e <sc_process+0x22>
   1d27e:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1d282:	2000      	movs	r0, #0
   1d284:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1d288:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d28c:	4a0e      	ldr	r2, [pc, #56]	; (1d2c8 <sc_process+0x7c>)
   1d28e:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1d292:	4a0e      	ldr	r2, [pc, #56]	; (1d2cc <sc_process+0x80>)
   1d294:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1d298:	aa01      	add	r2, sp, #4
   1d29a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1d29e:	2204      	movs	r2, #4
   1d2a0:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1d2a4:	f7ff ff5c 	bl	1d160 <bt_gatt_indicate>
   1d2a8:	b108      	cbz	r0, 1d2ae <sc_process+0x62>
}
   1d2aa:	b002      	add	sp, #8
   1d2ac:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d2ae:	f3bf 8f5b 	dmb	ish
   1d2b2:	e854 3f00 	ldrex	r3, [r4]
   1d2b6:	f043 0302 	orr.w	r3, r3, #2
   1d2ba:	e844 3200 	strex	r2, r3, [r4]
   1d2be:	2a00      	cmp	r2, #0
   1d2c0:	d1f7      	bne.n	1d2b2 <sc_process+0x66>
   1d2c2:	f3bf 8f5b 	dmb	ish
   1d2c6:	e7f0      	b.n	1d2aa <sc_process+0x5e>
   1d2c8:	0002a7c8 	.word	0x0002a7c8
   1d2cc:	0001c97d 	.word	0x0001c97d

0001d2d0 <sc_restore>:
{
   1d2d0:	b510      	push	{r4, lr}
   1d2d2:	b088      	sub	sp, #32
   1d2d4:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d2d6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1d2da:	7a00      	ldrb	r0, [r0, #8]
   1d2dc:	f7ff fae6 	bl	1c8ac <find_sc_cfg>
	if (!cfg) {
   1d2e0:	b1f0      	cbz	r0, 1d320 <sc_restore+0x50>
   1d2e2:	4603      	mov	r3, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1d2e4:	8902      	ldrh	r2, [r0, #8]
   1d2e6:	b90a      	cbnz	r2, 1d2ec <sc_restore+0x1c>
   1d2e8:	8941      	ldrh	r1, [r0, #10]
   1d2ea:	b1c9      	cbz	r1, 1d320 <sc_restore+0x50>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1d2ec:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1d2f0:	895b      	ldrh	r3, [r3, #10]
   1d2f2:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1d2f6:	4620      	mov	r0, r4
   1d2f8:	f7fd fb1e 	bl	1a938 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1d2fc:	491b      	ldr	r1, [pc, #108]	; (1d36c <sc_restore+0x9c>)
   1d2fe:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1d302:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1d306:	4a1a      	ldr	r2, [pc, #104]	; (1d370 <sc_restore+0xa0>)
   1d308:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1d30a:	4a1a      	ldr	r2, [pc, #104]	; (1d374 <sc_restore+0xa4>)
   1d30c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1d30e:	aa01      	add	r2, sp, #4
   1d310:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1d312:	2204      	movs	r2, #4
   1d314:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1d316:	4619      	mov	r1, r3
   1d318:	4620      	mov	r0, r4
   1d31a:	f7ff ff21 	bl	1d160 <bt_gatt_indicate>
   1d31e:	b908      	cbnz	r0, 1d324 <sc_restore+0x54>
}
   1d320:	b008      	add	sp, #32
   1d322:	bd10      	pop	{r4, pc}
		BT_ERR("SC restore indication failed");
   1d324:	4b14      	ldr	r3, [pc, #80]	; (1d378 <sc_restore+0xa8>)
   1d326:	9306      	str	r3, [sp, #24]
   1d328:	2300      	movs	r3, #0
   1d32a:	f8ad 3001 	strh.w	r3, [sp, #1]
   1d32e:	f88d 3003 	strb.w	r3, [sp, #3]
   1d332:	2202      	movs	r2, #2
   1d334:	f88d 2000 	strb.w	r2, [sp]
   1d338:	f88d 3002 	strb.w	r3, [sp, #2]
   1d33c:	9a00      	ldr	r2, [sp, #0]
   1d33e:	9205      	str	r2, [sp, #20]
   1d340:	461a      	mov	r2, r3
   1d342:	f363 0200 	bfi	r2, r3, #0, #1
   1d346:	f363 0241 	bfi	r2, r3, #1, #1
   1d34a:	f363 0282 	bfi	r2, r3, #2, #1
   1d34e:	f363 02c5 	bfi	r2, r3, #3, #3
   1d352:	2101      	movs	r1, #1
   1d354:	f361 1288 	bfi	r2, r1, #6, #3
   1d358:	2108      	movs	r1, #8
   1d35a:	f361 2252 	bfi	r2, r1, #9, #10
   1d35e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1d362:	4906      	ldr	r1, [pc, #24]	; (1d37c <sc_restore+0xac>)
   1d364:	a802      	add	r0, sp, #8
   1d366:	f006 fdf1 	bl	23f4c <z_log_msg2_finalize>
   1d36a:	e7d9      	b.n	1d320 <sc_restore+0x50>
   1d36c:	20002b0c 	.word	0x20002b0c
   1d370:	0002a7c8 	.word	0x0002a7c8
   1d374:	00025ea1 	.word	0x00025ea1
   1d378:	0002a730 	.word	0x0002a730
   1d37c:	0002889c 	.word	0x0002889c

0001d380 <gatt_notify>:
{
   1d380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d384:	b08f      	sub	sp, #60	; 0x3c
   1d386:	4606      	mov	r6, r0
   1d388:	460f      	mov	r7, r1
   1d38a:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1d38c:	2214      	movs	r2, #20
   1d38e:	6861      	ldr	r1, [r4, #4]
   1d390:	f008 ff4a 	bl	26228 <bt_gatt_check_perm>
   1d394:	bb18      	cbnz	r0, 1d3de <gatt_notify+0x5e>
				sizeof(*nfy) + params->len);
   1d396:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d398:	3202      	adds	r2, #2
   1d39a:	211b      	movs	r1, #27
   1d39c:	4630      	mov	r0, r6
   1d39e:	f7fe ff05 	bl	1c1ac <bt_att_create_pdu>
	if (!buf) {
   1d3a2:	4680      	mov	r8, r0
   1d3a4:	2800      	cmp	r0, #0
   1d3a6:	d03f      	beq.n	1d428 <gatt_notify+0xa8>
   1d3a8:	f100 0908 	add.w	r9, r0, #8
   1d3ac:	2102      	movs	r1, #2
   1d3ae:	4648      	mov	r0, r9
   1d3b0:	f009 f936 	bl	26620 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d3b4:	4605      	mov	r5, r0
   1d3b6:	f825 7b02 	strh.w	r7, [r5], #2
   1d3ba:	89a1      	ldrh	r1, [r4, #12]
   1d3bc:	4648      	mov	r0, r9
   1d3be:	f009 f92f 	bl	26620 <net_buf_simple_add>
   1d3c2:	89a2      	ldrh	r2, [r4, #12]
   1d3c4:	68a1      	ldr	r1, [r4, #8]
   1d3c6:	4628      	mov	r0, r5
   1d3c8:	f00b f869 	bl	2849e <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1d3cc:	6963      	ldr	r3, [r4, #20]
   1d3ce:	6922      	ldr	r2, [r4, #16]
   1d3d0:	4641      	mov	r1, r8
   1d3d2:	4630      	mov	r0, r6
   1d3d4:	f008 fbe5 	bl	25ba2 <bt_att_send>
}
   1d3d8:	b00f      	add	sp, #60	; 0x3c
   1d3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_WARN("Link is not encrypted");
   1d3de:	4b25      	ldr	r3, [pc, #148]	; (1d474 <gatt_notify+0xf4>)
   1d3e0:	930c      	str	r3, [sp, #48]	; 0x30
   1d3e2:	2300      	movs	r3, #0
   1d3e4:	f8ad 3005 	strh.w	r3, [sp, #5]
   1d3e8:	f88d 3007 	strb.w	r3, [sp, #7]
   1d3ec:	2102      	movs	r1, #2
   1d3ee:	f88d 1004 	strb.w	r1, [sp, #4]
   1d3f2:	f88d 3006 	strb.w	r3, [sp, #6]
   1d3f6:	9a01      	ldr	r2, [sp, #4]
   1d3f8:	920b      	str	r2, [sp, #44]	; 0x2c
   1d3fa:	461a      	mov	r2, r3
   1d3fc:	f363 0200 	bfi	r2, r3, #0, #1
   1d400:	f363 0241 	bfi	r2, r3, #1, #1
   1d404:	f363 0282 	bfi	r2, r3, #2, #1
   1d408:	f363 02c5 	bfi	r2, r3, #3, #3
   1d40c:	f361 1288 	bfi	r2, r1, #6, #3
   1d410:	2108      	movs	r1, #8
   1d412:	f361 2252 	bfi	r2, r1, #9, #10
   1d416:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1d41a:	4917      	ldr	r1, [pc, #92]	; (1d478 <gatt_notify+0xf8>)
   1d41c:	a808      	add	r0, sp, #32
   1d41e:	f006 fd95 	bl	23f4c <z_log_msg2_finalize>
		return -EPERM;
   1d422:	f04f 30ff 	mov.w	r0, #4294967295
   1d426:	e7d7      	b.n	1d3d8 <gatt_notify+0x58>
		BT_WARN("No buffer available to send notification");
   1d428:	4b14      	ldr	r3, [pc, #80]	; (1d47c <gatt_notify+0xfc>)
   1d42a:	9306      	str	r3, [sp, #24]
   1d42c:	2300      	movs	r3, #0
   1d42e:	f8ad 3005 	strh.w	r3, [sp, #5]
   1d432:	f88d 3007 	strb.w	r3, [sp, #7]
   1d436:	2102      	movs	r1, #2
   1d438:	f88d 1004 	strb.w	r1, [sp, #4]
   1d43c:	f88d 3006 	strb.w	r3, [sp, #6]
   1d440:	9a01      	ldr	r2, [sp, #4]
   1d442:	9205      	str	r2, [sp, #20]
   1d444:	461a      	mov	r2, r3
   1d446:	f363 0200 	bfi	r2, r3, #0, #1
   1d44a:	f363 0241 	bfi	r2, r3, #1, #1
   1d44e:	f363 0282 	bfi	r2, r3, #2, #1
   1d452:	f363 02c5 	bfi	r2, r3, #3, #3
   1d456:	f361 1288 	bfi	r2, r1, #6, #3
   1d45a:	2108      	movs	r1, #8
   1d45c:	f361 2252 	bfi	r2, r1, #9, #10
   1d460:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1d464:	4904      	ldr	r1, [pc, #16]	; (1d478 <gatt_notify+0xf8>)
   1d466:	a802      	add	r0, sp, #8
   1d468:	f006 fd70 	bl	23f4c <z_log_msg2_finalize>
		return -ENOMEM;
   1d46c:	f06f 000b 	mvn.w	r0, #11
   1d470:	e7b2      	b.n	1d3d8 <gatt_notify+0x58>
   1d472:	bf00      	nop
   1d474:	0002a6f0 	.word	0x0002a6f0
   1d478:	0002889c 	.word	0x0002889c
   1d47c:	0002a750 	.word	0x0002a750

0001d480 <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d480:	f3bf 8f5b 	dmb	ish
   1d484:	4b35      	ldr	r3, [pc, #212]	; (1d55c <bt_gatt_notify_cb+0xdc>)
   1d486:	681b      	ldr	r3, [r3, #0]
   1d488:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d48c:	f013 0f02 	tst.w	r3, #2
   1d490:	d05a      	beq.n	1d548 <bt_gatt_notify_cb+0xc8>
{
   1d492:	b530      	push	{r4, r5, lr}
   1d494:	b08d      	sub	sp, #52	; 0x34
   1d496:	4605      	mov	r5, r0
   1d498:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d49a:	b110      	cbz	r0, 1d4a2 <bt_gatt_notify_cb+0x22>
   1d49c:	7a83      	ldrb	r3, [r0, #10]
   1d49e:	2b07      	cmp	r3, #7
   1d4a0:	d155      	bne.n	1d54e <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
   1d4a2:	6860      	ldr	r0, [r4, #4]
   1d4a4:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d4a6:	f7ff fca1 	bl	1cdec <bt_gatt_attr_get_handle>
   1d4aa:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1d4ae:	6821      	ldr	r1, [r4, #0]
   1d4b0:	b331      	cbz	r1, 1d500 <bt_gatt_notify_cb+0x80>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d4b2:	a805      	add	r0, sp, #20
   1d4b4:	f7ff fda2 	bl	1cffc <gatt_find_by_uuid>
   1d4b8:	2800      	cmp	r0, #0
   1d4ba:	d04b      	beq.n	1d554 <bt_gatt_notify_cb+0xd4>
		params->attr = data.attr;
   1d4bc:	9b05      	ldr	r3, [sp, #20]
   1d4be:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d4c0:	9b05      	ldr	r3, [sp, #20]
   1d4c2:	6818      	ldr	r0, [r3, #0]
   1d4c4:	2300      	movs	r3, #0
   1d4c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1d4ca:	f642 0303 	movw	r3, #10243	; 0x2803
   1d4ce:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1d4d2:	a90b      	add	r1, sp, #44	; 0x2c
   1d4d4:	f006 ff8c 	bl	243f0 <bt_uuid_cmp>
   1d4d8:	b948      	cbnz	r0, 1d4ee <bt_gatt_notify_cb+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d4da:	9805      	ldr	r0, [sp, #20]
   1d4dc:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   1d4de:	799b      	ldrb	r3, [r3, #6]
   1d4e0:	f013 0f10 	tst.w	r3, #16
   1d4e4:	d011      	beq.n	1d50a <bt_gatt_notify_cb+0x8a>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d4e6:	f008 fe44 	bl	26172 <bt_gatt_attr_value_handle>
   1d4ea:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1d4ee:	b17d      	cbz	r5, 1d510 <bt_gatt_notify_cb+0x90>
		return gatt_notify(conn, data.handle, params);
   1d4f0:	4622      	mov	r2, r4
   1d4f2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1d4f6:	4628      	mov	r0, r5
   1d4f8:	f7ff ff42 	bl	1d380 <gatt_notify>
}
   1d4fc:	b00d      	add	sp, #52	; 0x34
   1d4fe:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1d500:	2800      	cmp	r0, #0
   1d502:	d1dd      	bne.n	1d4c0 <bt_gatt_notify_cb+0x40>
			return -ENOENT;
   1d504:	f06f 0001 	mvn.w	r0, #1
   1d508:	e7f8      	b.n	1d4fc <bt_gatt_notify_cb+0x7c>
			return -EINVAL;
   1d50a:	f06f 0015 	mvn.w	r0, #21
   1d50e:	e7f5      	b.n	1d4fc <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
   1d510:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d514:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   1d516:	2201      	movs	r2, #1
   1d518:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   1d51c:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d51e:	2300      	movs	r3, #0
   1d520:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1d524:	f642 1102 	movw	r1, #10498	; 0x2902
   1d528:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   1d52c:	a905      	add	r1, sp, #20
   1d52e:	9102      	str	r1, [sp, #8]
   1d530:	490b      	ldr	r1, [pc, #44]	; (1d560 <bt_gatt_notify_cb+0xe0>)
   1d532:	9101      	str	r1, [sp, #4]
   1d534:	9200      	str	r2, [sp, #0]
   1d536:	aa0a      	add	r2, sp, #40	; 0x28
   1d538:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d53c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d540:	f7ff fc84 	bl	1ce4c <bt_gatt_foreach_attr_type>
	return data.err;
   1d544:	9807      	ldr	r0, [sp, #28]
   1d546:	e7d9      	b.n	1d4fc <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   1d548:	f06f 000a 	mvn.w	r0, #10
}
   1d54c:	4770      	bx	lr
		return -ENOTCONN;
   1d54e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d552:	e7d3      	b.n	1d4fc <bt_gatt_notify_cb+0x7c>
			return -ENOENT;
   1d554:	f06f 0001 	mvn.w	r0, #1
   1d558:	e7d0      	b.n	1d4fc <bt_gatt_notify_cb+0x7c>
   1d55a:	bf00      	nop
   1d55c:	2000037c 	.word	0x2000037c
   1d560:	0001d565 	.word	0x0001d565

0001d564 <notify_cb>:
{
   1d564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d568:	b08b      	sub	sp, #44	; 0x2c
   1d56a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d56c:	6882      	ldr	r2, [r0, #8]
   1d56e:	4b5a      	ldr	r3, [pc, #360]	; (1d6d8 <notify_cb+0x174>)
   1d570:	429a      	cmp	r2, r3
   1d572:	d005      	beq.n	1d580 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1d574:	f04f 0a01 	mov.w	sl, #1
}
   1d578:	4650      	mov	r0, sl
   1d57a:	b00b      	add	sp, #44	; 0x2c
   1d57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d580:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1d582:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1d584:	4b55      	ldr	r3, [pc, #340]	; (1d6dc <notify_cb+0x178>)
   1d586:	429d      	cmp	r5, r3
   1d588:	d031      	beq.n	1d5ee <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d58a:	2400      	movs	r4, #0
   1d58c:	e071      	b.n	1d672 <notify_cb+0x10e>
				sc = (struct sc_data *)data->ind_params->data;
   1d58e:	6933      	ldr	r3, [r6, #16]
   1d590:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1d592:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1d596:	8853      	ldrh	r3, [r2, #2]
   1d598:	8812      	ldrh	r2, [r2, #0]
   1d59a:	4649      	mov	r1, r9
   1d59c:	f8df c140 	ldr.w	ip, [pc, #320]	; 1d6e0 <notify_cb+0x17c>
   1d5a0:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1d5a4:	f7ff fafc 	bl	1cba0 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d5a8:	3401      	adds	r4, #1
   1d5aa:	2c00      	cmp	r4, #0
   1d5ac:	d1ed      	bne.n	1d58a <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d5ae:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   1d5b2:	4b4b      	ldr	r3, [pc, #300]	; (1d6e0 <notify_cb+0x17c>)
   1d5b4:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   1d5b8:	f109 0901 	add.w	r9, r9, #1
   1d5bc:	2300      	movs	r3, #0
   1d5be:	9302      	str	r3, [sp, #8]
   1d5c0:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   1d5c4:	2207      	movs	r2, #7
   1d5c6:	a902      	add	r1, sp, #8
   1d5c8:	4648      	mov	r0, r9
   1d5ca:	f00a ff5a 	bl	28482 <memcmp>
   1d5ce:	2800      	cmp	r0, #0
   1d5d0:	d0ea      	beq.n	1d5a8 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1d5d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1d5d6:	2207      	movs	r2, #7
   1d5d8:	4649      	mov	r1, r9
   1d5da:	4841      	ldr	r0, [pc, #260]	; (1d6e0 <notify_cb+0x17c>)
   1d5dc:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1d5e0:	f7fd faf2 	bl	1abc8 <bt_conn_lookup_state_le>
			if (!conn) {
   1d5e4:	2800      	cmp	r0, #0
   1d5e6:	d0d2      	beq.n	1d58e <notify_cb+0x2a>
			bt_conn_unref(conn);
   1d5e8:	f007 fb9b 	bl	24d22 <bt_conn_unref>
   1d5ec:	e7dc      	b.n	1d5a8 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1d5ee:	2400      	movs	r4, #0
   1d5f0:	e7db      	b.n	1d5aa <notify_cb+0x46>
			bt_conn_unref(conn);
   1d5f2:	f007 fb96 	bl	24d22 <bt_conn_unref>
			continue;
   1d5f6:	e03b      	b.n	1d670 <notify_cb+0x10c>
			bt_conn_unref(conn);
   1d5f8:	4648      	mov	r0, r9
   1d5fa:	f007 fb92 	bl	24d22 <bt_conn_unref>
			continue;
   1d5fe:	e037      	b.n	1d670 <notify_cb+0x10c>
			BT_WARN("Link is not encrypted");
   1d600:	4b38      	ldr	r3, [pc, #224]	; (1d6e4 <notify_cb+0x180>)
   1d602:	9308      	str	r3, [sp, #32]
   1d604:	2300      	movs	r3, #0
   1d606:	f8ad 3005 	strh.w	r3, [sp, #5]
   1d60a:	f88d 3007 	strb.w	r3, [sp, #7]
   1d60e:	2202      	movs	r2, #2
   1d610:	f88d 2004 	strb.w	r2, [sp, #4]
   1d614:	f88d 3006 	strb.w	r3, [sp, #6]
   1d618:	9901      	ldr	r1, [sp, #4]
   1d61a:	9107      	str	r1, [sp, #28]
   1d61c:	f363 0800 	bfi	r8, r3, #0, #1
   1d620:	f363 0841 	bfi	r8, r3, #1, #1
   1d624:	f363 0882 	bfi	r8, r3, #2, #1
   1d628:	f363 08c5 	bfi	r8, r3, #3, #3
   1d62c:	f362 1888 	bfi	r8, r2, #6, #3
   1d630:	2208      	movs	r2, #8
   1d632:	f362 2852 	bfi	r8, r2, #9, #10
   1d636:	f363 48de 	bfi	r8, r3, #19, #12
   1d63a:	f363 78df 	bfi	r8, r3, #31, #1
   1d63e:	4642      	mov	r2, r8
   1d640:	4929      	ldr	r1, [pc, #164]	; (1d6e8 <notify_cb+0x184>)
   1d642:	a804      	add	r0, sp, #16
   1d644:	f006 fc82 	bl	23f4c <z_log_msg2_finalize>
			continue;
   1d648:	e012      	b.n	1d670 <notify_cb+0x10c>
			err = gatt_indicate(conn, data->handle,
   1d64a:	6932      	ldr	r2, [r6, #16]
   1d64c:	88b1      	ldrh	r1, [r6, #4]
   1d64e:	4648      	mov	r0, r9
   1d650:	f7ff fcec 	bl	1d02c <gatt_indicate>
			if (err == 0) {
   1d654:	4683      	mov	fp, r0
   1d656:	b918      	cbnz	r0, 1d660 <notify_cb+0xfc>
				data->ind_params->_ref++;
   1d658:	6932      	ldr	r2, [r6, #16]
   1d65a:	7d93      	ldrb	r3, [r2, #22]
   1d65c:	3301      	adds	r3, #1
   1d65e:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1d660:	4648      	mov	r0, r9
   1d662:	f007 fb5e 	bl	24d22 <bt_conn_unref>
		if (err < 0) {
   1d666:	f1bb 0f00 	cmp.w	fp, #0
   1d66a:	db85      	blt.n	1d578 <notify_cb+0x14>
		data->err = 0;
   1d66c:	2300      	movs	r3, #0
   1d66e:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d670:	3401      	adds	r4, #1
   1d672:	bb74      	cbnz	r4, 1d6d2 <notify_cb+0x16e>
		if (cfg->value != data->type) {
   1d674:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d678:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1d67c:	891a      	ldrh	r2, [r3, #8]
   1d67e:	89b3      	ldrh	r3, [r6, #12]
   1d680:	429a      	cmp	r2, r3
   1d682:	d1f5      	bne.n	1d670 <notify_cb+0x10c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d684:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1d688:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1d68c:	3101      	adds	r1, #1
   1d68e:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1d692:	f7fd fa25 	bl	1aae0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1d696:	4681      	mov	r9, r0
   1d698:	2800      	cmp	r0, #0
   1d69a:	d0e9      	beq.n	1d670 <notify_cb+0x10c>
		if (conn->state != BT_CONN_CONNECTED) {
   1d69c:	7a83      	ldrb	r3, [r0, #10]
   1d69e:	2b07      	cmp	r3, #7
   1d6a0:	d1a7      	bne.n	1d5f2 <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1d6a2:	696b      	ldr	r3, [r5, #20]
   1d6a4:	b11b      	cbz	r3, 1d6ae <notify_cb+0x14a>
   1d6a6:	4639      	mov	r1, r7
   1d6a8:	4798      	blx	r3
   1d6aa:	2800      	cmp	r0, #0
   1d6ac:	d0a4      	beq.n	1d5f8 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   1d6ae:	2214      	movs	r2, #20
   1d6b0:	4639      	mov	r1, r7
   1d6b2:	4648      	mov	r0, r9
   1d6b4:	f008 fdb8 	bl	26228 <bt_gatt_check_perm>
   1d6b8:	4682      	mov	sl, r0
   1d6ba:	2800      	cmp	r0, #0
   1d6bc:	d1a0      	bne.n	1d600 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1d6be:	89b3      	ldrh	r3, [r6, #12]
   1d6c0:	2b02      	cmp	r3, #2
   1d6c2:	d0c2      	beq.n	1d64a <notify_cb+0xe6>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1d6c4:	6932      	ldr	r2, [r6, #16]
   1d6c6:	88b1      	ldrh	r1, [r6, #4]
   1d6c8:	4648      	mov	r0, r9
   1d6ca:	f7ff fe59 	bl	1d380 <gatt_notify>
   1d6ce:	4683      	mov	fp, r0
   1d6d0:	e7c6      	b.n	1d660 <notify_cb+0xfc>
	return BT_GATT_ITER_CONTINUE;
   1d6d2:	f04f 0a01 	mov.w	sl, #1
   1d6d6:	e74f      	b.n	1d578 <notify_cb+0x14>
   1d6d8:	0001cc59 	.word	0x0001cc59
   1d6dc:	20000694 	.word	0x20000694
   1d6e0:	20002b00 	.word	0x20002b00
   1d6e4:	0002a6f0 	.word	0x0002a6f0
   1d6e8:	0002889c 	.word	0x0002889c

0001d6ec <update_ccc>:
{
   1d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6f0:	b088      	sub	sp, #32
	struct bt_conn *conn = data->conn;
   1d6f2:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d6f4:	6882      	ldr	r2, [r0, #8]
   1d6f6:	4b2d      	ldr	r3, [pc, #180]	; (1d7ac <update_ccc+0xc0>)
   1d6f8:	429a      	cmp	r2, r3
   1d6fa:	d003      	beq.n	1d704 <update_ccc+0x18>
}
   1d6fc:	2001      	movs	r0, #1
   1d6fe:	b008      	add	sp, #32
   1d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d704:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1d706:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d70a:	2500      	movs	r5, #0
   1d70c:	2d00      	cmp	r5, #0
   1d70e:	d1f5      	bne.n	1d6fc <update_ccc+0x10>
		if (!cfg->value ||
   1d710:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1d714:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1d718:	891b      	ldrh	r3, [r3, #8]
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d044      	beq.n	1d7a8 <update_ccc+0xbc>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d71e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1d722:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   1d726:	3201      	adds	r2, #1
   1d728:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   1d72c:	4638      	mov	r0, r7
   1d72e:	f007 fb66 	bl	24dfe <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1d732:	2800      	cmp	r0, #0
   1d734:	d038      	beq.n	1d7a8 <update_ccc+0xbc>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1d736:	222a      	movs	r2, #42	; 0x2a
   1d738:	4621      	mov	r1, r4
   1d73a:	4638      	mov	r0, r7
   1d73c:	f008 fd74 	bl	26228 <bt_gatt_check_perm>
		if (err) {
   1d740:	b108      	cbz	r0, 1d746 <update_ccc+0x5a>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1d742:	2803      	cmp	r0, #3
   1d744:	d00a      	beq.n	1d75c <update_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   1d746:	4641      	mov	r1, r8
   1d748:	4620      	mov	r0, r4
   1d74a:	f008 faac 	bl	25ca6 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1d74e:	4b18      	ldr	r3, [pc, #96]	; (1d7b0 <update_ccc+0xc4>)
   1d750:	4598      	cmp	r8, r3
   1d752:	d1d3      	bne.n	1d6fc <update_ccc+0x10>
			sc_restore(conn);
   1d754:	4638      	mov	r0, r7
   1d756:	f7ff fdbb 	bl	1d2d0 <sc_restore>
   1d75a:	e7cf      	b.n	1d6fc <update_ccc+0x10>
				BT_WARN("CCC %p not writable", attr);
   1d75c:	4b15      	ldr	r3, [pc, #84]	; (1d7b4 <update_ccc+0xc8>)
   1d75e:	9306      	str	r3, [sp, #24]
   1d760:	9407      	str	r4, [sp, #28]
   1d762:	2300      	movs	r3, #0
   1d764:	f8ad 3005 	strh.w	r3, [sp, #5]
   1d768:	f88d 3007 	strb.w	r3, [sp, #7]
   1d76c:	2203      	movs	r2, #3
   1d76e:	f88d 2004 	strb.w	r2, [sp, #4]
   1d772:	f88d 3006 	strb.w	r3, [sp, #6]
   1d776:	9a01      	ldr	r2, [sp, #4]
   1d778:	9205      	str	r2, [sp, #20]
   1d77a:	f363 0600 	bfi	r6, r3, #0, #1
   1d77e:	f363 0641 	bfi	r6, r3, #1, #1
   1d782:	f363 0682 	bfi	r6, r3, #2, #1
   1d786:	f363 06c5 	bfi	r6, r3, #3, #3
   1d78a:	2202      	movs	r2, #2
   1d78c:	f362 1688 	bfi	r6, r2, #6, #3
   1d790:	220c      	movs	r2, #12
   1d792:	f362 2652 	bfi	r6, r2, #9, #10
   1d796:	f363 46de 	bfi	r6, r3, #19, #12
   1d79a:	f363 76df 	bfi	r6, r3, #31, #1
   1d79e:	4632      	mov	r2, r6
   1d7a0:	4905      	ldr	r1, [pc, #20]	; (1d7b8 <update_ccc+0xcc>)
   1d7a2:	a802      	add	r0, sp, #8
   1d7a4:	f006 fbd2 	bl	23f4c <z_log_msg2_finalize>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1d7a8:	3501      	adds	r5, #1
   1d7aa:	e7af      	b.n	1d70c <update_ccc+0x20>
   1d7ac:	0001cc59 	.word	0x0001cc59
   1d7b0:	20000694 	.word	0x20000694
   1d7b4:	0002a77c 	.word	0x0002a77c
   1d7b8:	0002889c 	.word	0x0002889c

0001d7bc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1d7bc:	b500      	push	{lr}
   1d7be:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1d7c0:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1d7c2:	2001      	movs	r0, #1
   1d7c4:	f88d 0014 	strb.w	r0, [sp, #20]
   1d7c8:	ab04      	add	r3, sp, #16
   1d7ca:	9302      	str	r3, [sp, #8]
   1d7cc:	4b05      	ldr	r3, [pc, #20]	; (1d7e4 <bt_gatt_connected+0x28>)
   1d7ce:	9301      	str	r3, [sp, #4]
   1d7d0:	2200      	movs	r2, #0
   1d7d2:	9200      	str	r2, [sp, #0]
   1d7d4:	4613      	mov	r3, r2
   1d7d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d7da:	f7ff fb37 	bl	1ce4c <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1d7de:	b007      	add	sp, #28
   1d7e0:	f85d fb04 	ldr.w	pc, [sp], #4
   1d7e4:	0001d6ed 	.word	0x0001d6ed

0001d7e8 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1d7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d7ea:	4605      	mov	r5, r0
   1d7ec:	460e      	mov	r6, r1
   1d7ee:	4617      	mov	r7, r2
	return list->head;
   1d7f0:	4b0a      	ldr	r3, [pc, #40]	; (1d81c <bt_gatt_att_max_mtu_changed+0x34>)
   1d7f2:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d7f4:	b134      	cbz	r4, 1d804 <bt_gatt_att_max_mtu_changed+0x1c>
   1d7f6:	3c04      	subs	r4, #4
   1d7f8:	e004      	b.n	1d804 <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d7fa:	1d23      	adds	r3, r4, #4
   1d7fc:	d00b      	beq.n	1d816 <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1d7fe:	6864      	ldr	r4, [r4, #4]
   1d800:	b15c      	cbz	r4, 1d81a <bt_gatt_att_max_mtu_changed+0x32>
   1d802:	3c04      	subs	r4, #4
   1d804:	b14c      	cbz	r4, 1d81a <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1d806:	6823      	ldr	r3, [r4, #0]
   1d808:	2b00      	cmp	r3, #0
   1d80a:	d0f6      	beq.n	1d7fa <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1d80c:	463a      	mov	r2, r7
   1d80e:	4631      	mov	r1, r6
   1d810:	4628      	mov	r0, r5
   1d812:	4798      	blx	r3
   1d814:	e7f1      	b.n	1d7fa <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1d816:	461c      	mov	r4, r3
   1d818:	e7f4      	b.n	1d804 <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   1d81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d81c:	20002ae4 	.word	0x20002ae4

0001d820 <db_hash_read>:
{
   1d820:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d822:	b085      	sub	sp, #20
   1d824:	4604      	mov	r4, r0
   1d826:	460d      	mov	r5, r1
   1d828:	4616      	mov	r6, r2
   1d82a:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1d82c:	4812      	ldr	r0, [pc, #72]	; (1d878 <db_hash_read+0x58>)
   1d82e:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1d832:	3010      	adds	r0, #16
   1d834:	f00a fb2c 	bl	27e90 <k_work_cancel_delayable_sync>
   1d838:	f3bf 8f5b 	dmb	ish
   1d83c:	4b0f      	ldr	r3, [pc, #60]	; (1d87c <db_hash_read+0x5c>)
   1d83e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1d840:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1d844:	f013 0f04 	tst.w	r3, #4
   1d848:	d012      	beq.n	1d870 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   1d84a:	2101      	movs	r1, #1
   1d84c:	4620      	mov	r0, r4
   1d84e:	f008 fd17 	bl	26280 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1d852:	2310      	movs	r3, #16
   1d854:	9302      	str	r3, [sp, #8]
   1d856:	4b08      	ldr	r3, [pc, #32]	; (1d878 <db_hash_read+0x58>)
   1d858:	9301      	str	r3, [sp, #4]
   1d85a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d85e:	9300      	str	r3, [sp, #0]
   1d860:	463b      	mov	r3, r7
   1d862:	4632      	mov	r2, r6
   1d864:	4629      	mov	r1, r5
   1d866:	4620      	mov	r0, r4
   1d868:	f008 fbca 	bl	26000 <bt_gatt_attr_read>
}
   1d86c:	b005      	add	sp, #20
   1d86e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1d870:	2001      	movs	r0, #1
   1d872:	f7ff fb35 	bl	1cee0 <db_hash_gen>
   1d876:	e7e8      	b.n	1d84a <db_hash_read+0x2a>
   1d878:	20001a68 	.word	0x20001a68
   1d87c:	20001ad0 	.word	0x20001ad0

0001d880 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1d880:	b510      	push	{r4, lr}
   1d882:	b084      	sub	sp, #16
   1d884:	4604      	mov	r4, r0
   1d886:	9002      	str	r0, [sp, #8]
   1d888:	4b07      	ldr	r3, [pc, #28]	; (1d8a8 <bt_gatt_disconnected+0x28>)
   1d88a:	9301      	str	r3, [sp, #4]
   1d88c:	2200      	movs	r2, #0
   1d88e:	9200      	str	r2, [sp, #0]
   1d890:	4613      	mov	r3, r2
   1d892:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d896:	2001      	movs	r0, #1
   1d898:	f7ff fad8 	bl	1ce4c <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1d89c:	4620      	mov	r0, r4
   1d89e:	f008 fb79 	bl	25f94 <remove_cf_cfg>
#endif
}
   1d8a2:	b004      	add	sp, #16
   1d8a4:	bd10      	pop	{r4, pc}
   1d8a6:	bf00      	nop
   1d8a8:	0001c9f1 	.word	0x0001c9f1

0001d8ac <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1d8ac:	b510      	push	{r4, lr}
   1d8ae:	b088      	sub	sp, #32
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d8b0:	2300      	movs	r3, #0
   1d8b2:	2b00      	cmp	r3, #0
   1d8b4:	dd27      	ble.n	1d906 <bt_smp_accept+0x5a>
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1d8b6:	4b1c      	ldr	r3, [pc, #112]	; (1d928 <bt_smp_accept+0x7c>)
   1d8b8:	9306      	str	r3, [sp, #24]
   1d8ba:	9007      	str	r0, [sp, #28]
   1d8bc:	2300      	movs	r3, #0
   1d8be:	f8ad 3005 	strh.w	r3, [sp, #5]
   1d8c2:	f88d 3007 	strb.w	r3, [sp, #7]
   1d8c6:	2203      	movs	r2, #3
   1d8c8:	f88d 2004 	strb.w	r2, [sp, #4]
   1d8cc:	f88d 3006 	strb.w	r3, [sp, #6]
   1d8d0:	9a01      	ldr	r2, [sp, #4]
   1d8d2:	9205      	str	r2, [sp, #20]
   1d8d4:	461a      	mov	r2, r3
   1d8d6:	f363 0200 	bfi	r2, r3, #0, #1
   1d8da:	f363 0241 	bfi	r2, r3, #1, #1
   1d8de:	f363 0282 	bfi	r2, r3, #2, #1
   1d8e2:	f363 02c5 	bfi	r2, r3, #3, #3
   1d8e6:	2101      	movs	r1, #1
   1d8e8:	f361 1288 	bfi	r2, r1, #6, #3
   1d8ec:	210c      	movs	r1, #12
   1d8ee:	f361 2252 	bfi	r2, r1, #9, #10
   1d8f2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1d8f6:	490d      	ldr	r1, [pc, #52]	; (1d92c <bt_smp_accept+0x80>)
   1d8f8:	a802      	add	r0, sp, #8
   1d8fa:	f006 fb27 	bl	23f4c <z_log_msg2_finalize>

	return -ENOMEM;
   1d8fe:	f06f 000b 	mvn.w	r0, #11
}
   1d902:	b008      	add	sp, #32
   1d904:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   1d906:	22e8      	movs	r2, #232	; 0xe8
   1d908:	fb02 f203 	mul.w	r2, r2, r3
   1d90c:	4c08      	ldr	r4, [pc, #32]	; (1d930 <bt_smp_accept+0x84>)
   1d90e:	58a2      	ldr	r2, [r4, r2]
   1d910:	b10a      	cbz	r2, 1d916 <bt_smp_accept+0x6a>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1d912:	3301      	adds	r3, #1
   1d914:	e7cd      	b.n	1d8b2 <bt_smp_accept+0x6>
		smp->chan.ops = &ops;
   1d916:	4a06      	ldr	r2, [pc, #24]	; (1d930 <bt_smp_accept+0x84>)
   1d918:	20e8      	movs	r0, #232	; 0xe8
   1d91a:	fb00 2303 	mla	r3, r0, r3, r2
   1d91e:	4a05      	ldr	r2, [pc, #20]	; (1d934 <bt_smp_accept+0x88>)
   1d920:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   1d922:	600b      	str	r3, [r1, #0]
		return 0;
   1d924:	2000      	movs	r0, #0
   1d926:	e7ec      	b.n	1d902 <bt_smp_accept+0x56>
   1d928:	0002a8cc 	.word	0x0002a8cc
   1d92c:	000288c4 	.word	0x000288c4
   1d930:	20001b28 	.word	0x20001b28
   1d934:	0002a8fc 	.word	0x0002a8fc

0001d938 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1d938:	4b03      	ldr	r3, [pc, #12]	; (1d948 <pool_id+0x10>)
   1d93a:	1ac0      	subs	r0, r0, r3
   1d93c:	1080      	asrs	r0, r0, #2
}
   1d93e:	4b03      	ldr	r3, [pc, #12]	; (1d94c <pool_id+0x14>)
   1d940:	fb03 f000 	mul.w	r0, r3, r0
   1d944:	4770      	bx	lr
   1d946:	bf00      	nop
   1d948:	200008c8 	.word	0x200008c8
   1d94c:	ba2e8ba3 	.word	0xba2e8ba3

0001d950 <net_buf_pool_get>:
}
   1d950:	222c      	movs	r2, #44	; 0x2c
   1d952:	4b02      	ldr	r3, [pc, #8]	; (1d95c <net_buf_pool_get+0xc>)
   1d954:	fb02 3000 	mla	r0, r2, r0, r3
   1d958:	4770      	bx	lr
   1d95a:	bf00      	nop
   1d95c:	200008c8 	.word	0x200008c8

0001d960 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1d960:	4800      	ldr	r0, [pc, #0]	; (1d964 <get_hf_flags+0x4>)
   1d962:	4770      	bx	lr
   1d964:	20002b78 	.word	0x20002b78

0001d968 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d968:	4b03      	ldr	r3, [pc, #12]	; (1d978 <get_subsys+0x10>)
   1d96a:	1ac0      	subs	r0, r0, r3
   1d96c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1d96e:	4b03      	ldr	r3, [pc, #12]	; (1d97c <get_subsys+0x14>)
   1d970:	fb03 f000 	mul.w	r0, r3, r0
   1d974:	4770      	bx	lr
   1d976:	bf00      	nop
   1d978:	20002b38 	.word	0x20002b38
   1d97c:	b6db6db7 	.word	0xb6db6db7

0001d980 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d980:	b538      	push	{r3, r4, r5, lr}
   1d982:	4605      	mov	r5, r0
   1d984:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d986:	f7ff ffef 	bl	1d968 <get_subsys>
   1d98a:	4601      	mov	r1, r0
   1d98c:	2240      	movs	r2, #64	; 0x40
   1d98e:	4803      	ldr	r0, [pc, #12]	; (1d99c <onoff_stop+0x1c>)
   1d990:	f008 ff04 	bl	2679c <stop>
   1d994:	4601      	mov	r1, r0
	notify(mgr, res);
   1d996:	4628      	mov	r0, r5
   1d998:	47a0      	blx	r4
}
   1d99a:	bd38      	pop	{r3, r4, r5, pc}
   1d99c:	000285fc 	.word	0x000285fc

0001d9a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d9a0:	b530      	push	{r4, r5, lr}
   1d9a2:	b083      	sub	sp, #12
   1d9a4:	4605      	mov	r5, r0
   1d9a6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d9a8:	f7ff ffde 	bl	1d968 <get_subsys>
   1d9ac:	4601      	mov	r1, r0
   1d9ae:	2340      	movs	r3, #64	; 0x40
   1d9b0:	9300      	str	r3, [sp, #0]
   1d9b2:	4623      	mov	r3, r4
   1d9b4:	4a05      	ldr	r2, [pc, #20]	; (1d9cc <onoff_start+0x2c>)
   1d9b6:	4806      	ldr	r0, [pc, #24]	; (1d9d0 <onoff_start+0x30>)
   1d9b8:	f008 ff0a 	bl	267d0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d9bc:	1e01      	subs	r1, r0, #0
   1d9be:	db01      	blt.n	1d9c4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1d9c0:	b003      	add	sp, #12
   1d9c2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1d9c4:	4628      	mov	r0, r5
   1d9c6:	47a0      	blx	r4
}
   1d9c8:	e7fa      	b.n	1d9c0 <onoff_start+0x20>
   1d9ca:	bf00      	nop
   1d9cc:	00026819 	.word	0x00026819
   1d9d0:	000285fc 	.word	0x000285fc

0001d9d4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1d9d4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1d9d6:	b110      	cbz	r0, 1d9de <clock_event_handler+0xa>
   1d9d8:	2801      	cmp	r0, #1
   1d9da:	d00d      	beq.n	1d9f8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1d9dc:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d9de:	2100      	movs	r1, #0
   1d9e0:	4808      	ldr	r0, [pc, #32]	; (1da04 <clock_event_handler+0x30>)
   1d9e2:	f008 fe62 	bl	266aa <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d9e6:	6883      	ldr	r3, [r0, #8]
   1d9e8:	f013 0f07 	tst.w	r3, #7
   1d9ec:	d1f6      	bne.n	1d9dc <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d9ee:	2100      	movs	r1, #0
   1d9f0:	4804      	ldr	r0, [pc, #16]	; (1da04 <clock_event_handler+0x30>)
   1d9f2:	f008 fec1 	bl	26778 <clkstarted_handle>
   1d9f6:	e7f1      	b.n	1d9dc <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d9f8:	2101      	movs	r1, #1
   1d9fa:	4802      	ldr	r0, [pc, #8]	; (1da04 <clock_event_handler+0x30>)
   1d9fc:	f008 febc 	bl	26778 <clkstarted_handle>
}
   1da00:	e7ec      	b.n	1d9dc <clock_event_handler+0x8>
   1da02:	bf00      	nop
   1da04:	000285fc 	.word	0x000285fc

0001da08 <generic_hfclk_start>:
{
   1da08:	b510      	push	{r4, lr}
	__asm__ volatile(
   1da0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1da0e:	f3ef 8411 	mrs	r4, BASEPRI
   1da12:	f383 8812 	msr	BASEPRI_MAX, r3
   1da16:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1da1a:	4a13      	ldr	r2, [pc, #76]	; (1da68 <generic_hfclk_start+0x60>)
   1da1c:	6813      	ldr	r3, [r2, #0]
   1da1e:	f043 0302 	orr.w	r3, r3, #2
   1da22:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1da24:	f013 0f01 	tst.w	r3, #1
   1da28:	d108      	bne.n	1da3c <generic_hfclk_start+0x34>
	bool already_started = false;
   1da2a:	2300      	movs	r3, #0
	__asm__ volatile(
   1da2c:	f384 8811 	msr	BASEPRI, r4
   1da30:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1da34:	b99b      	cbnz	r3, 1da5e <generic_hfclk_start+0x56>
	hfclk_start();
   1da36:	f008 fef7 	bl	26828 <hfclk_start>
}
   1da3a:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1da3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1da40:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1da44:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1da48:	f012 0f01 	tst.w	r2, #1
   1da4c:	d101      	bne.n	1da52 <generic_hfclk_start+0x4a>
	bool already_started = false;
   1da4e:	2300      	movs	r3, #0
   1da50:	e7ec      	b.n	1da2c <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1da52:	f7ff ff85 	bl	1d960 <get_hf_flags>
   1da56:	f008 fe7c 	bl	26752 <set_on_state>
			already_started = true;
   1da5a:	2301      	movs	r3, #1
   1da5c:	e7e6      	b.n	1da2c <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1da5e:	2100      	movs	r1, #0
   1da60:	4802      	ldr	r0, [pc, #8]	; (1da6c <generic_hfclk_start+0x64>)
   1da62:	f008 fe89 	bl	26778 <clkstarted_handle>
		return;
   1da66:	e7e8      	b.n	1da3a <generic_hfclk_start+0x32>
   1da68:	20002b88 	.word	0x20002b88
   1da6c:	000285fc 	.word	0x000285fc

0001da70 <generic_hfclk_stop>:
{
   1da70:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1da72:	4b0a      	ldr	r3, [pc, #40]	; (1da9c <generic_hfclk_stop+0x2c>)
   1da74:	f3bf 8f5b 	dmb	ish
   1da78:	e853 2f00 	ldrex	r2, [r3]
   1da7c:	f022 0102 	bic.w	r1, r2, #2
   1da80:	e843 1000 	strex	r0, r1, [r3]
   1da84:	2800      	cmp	r0, #0
   1da86:	d1f7      	bne.n	1da78 <generic_hfclk_stop+0x8>
   1da88:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1da8c:	f012 0f01 	tst.w	r2, #1
   1da90:	d000      	beq.n	1da94 <generic_hfclk_stop+0x24>
}
   1da92:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1da94:	f008 fed2 	bl	2683c <hfclk_stop>
   1da98:	e7fb      	b.n	1da92 <generic_hfclk_stop+0x22>
   1da9a:	bf00      	nop
   1da9c:	20002b88 	.word	0x20002b88

0001daa0 <api_blocking_start>:
{
   1daa0:	b500      	push	{lr}
   1daa2:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1daa4:	f8cd d000 	str.w	sp, [sp]
   1daa8:	f8cd d004 	str.w	sp, [sp, #4]
   1daac:	2300      	movs	r3, #0
   1daae:	9302      	str	r3, [sp, #8]
   1dab0:	2301      	movs	r3, #1
   1dab2:	9303      	str	r3, [sp, #12]
   1dab4:	ab04      	add	r3, sp, #16
   1dab6:	9304      	str	r3, [sp, #16]
   1dab8:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1daba:	466b      	mov	r3, sp
   1dabc:	4a06      	ldr	r2, [pc, #24]	; (1dad8 <api_blocking_start+0x38>)
   1dabe:	f008 fea3 	bl	26808 <api_start>
	if (err < 0) {
   1dac2:	2800      	cmp	r0, #0
   1dac4:	db05      	blt.n	1dad2 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1dac6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1daca:	2300      	movs	r3, #0
   1dacc:	4668      	mov	r0, sp
   1dace:	f003 fb15 	bl	210fc <z_impl_k_sem_take>
}
   1dad2:	b007      	add	sp, #28
   1dad4:	f85d fb04 	ldr.w	pc, [sp], #4
   1dad8:	00026851 	.word	0x00026851

0001dadc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1dadc:	b570      	push	{r4, r5, r6, lr}
   1dade:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1dae0:	2200      	movs	r2, #0
   1dae2:	2101      	movs	r1, #1
   1dae4:	4610      	mov	r0, r2
   1dae6:	f7f7 fe8b 	bl	15800 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1daea:	2000      	movs	r0, #0
   1daec:	f7f7 fe56 	bl	1579c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1daf0:	4811      	ldr	r0, [pc, #68]	; (1db38 <clk_init+0x5c>)
   1daf2:	f001 fd43 	bl	1f57c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1daf6:	4b11      	ldr	r3, [pc, #68]	; (1db3c <clk_init+0x60>)
   1daf8:	4298      	cmp	r0, r3
   1dafa:	d11a      	bne.n	1db32 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1dafc:	f009 fd2b 	bl	27556 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1db00:	2400      	movs	r4, #0
   1db02:	e003      	b.n	1db0c <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1db04:	2301      	movs	r3, #1
   1db06:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1db08:	441c      	add	r4, r3
   1db0a:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   1db0c:	2c01      	cmp	r4, #1
   1db0e:	d80e      	bhi.n	1db2e <clk_init+0x52>
						get_sub_data(dev, i);
   1db10:	4621      	mov	r1, r4
   1db12:	4630      	mov	r0, r6
   1db14:	f008 fdc9 	bl	266aa <get_sub_data>
   1db18:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1db1a:	4621      	mov	r1, r4
   1db1c:	4630      	mov	r0, r6
   1db1e:	f008 fdd1 	bl	266c4 <get_onoff_manager>
   1db22:	4907      	ldr	r1, [pc, #28]	; (1db40 <clk_init+0x64>)
   1db24:	f005 fecf 	bl	238c6 <onoff_manager_init>
		if (err < 0) {
   1db28:	2800      	cmp	r0, #0
   1db2a:	daeb      	bge.n	1db04 <clk_init+0x28>
   1db2c:	e000      	b.n	1db30 <clk_init+0x54>
	}

	return 0;
   1db2e:	2000      	movs	r0, #0
}
   1db30:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1db32:	f06f 0004 	mvn.w	r0, #4
   1db36:	e7fb      	b.n	1db30 <clk_init+0x54>
   1db38:	0001d9d5 	.word	0x0001d9d5
   1db3c:	0bad0000 	.word	0x0bad0000
   1db40:	0002a98c 	.word	0x0002a98c

0001db44 <lfclk_spinwait>:
{
   1db44:	b570      	push	{r4, r5, r6, lr}
   1db46:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1db48:	2801      	cmp	r0, #1
   1db4a:	d107      	bne.n	1db5c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1db4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db50:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1db54:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1db58:	2b01      	cmp	r3, #1
   1db5a:	d058      	beq.n	1dc0e <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1db5c:	f009 ff57 	bl	27a0e <k_is_in_isr>
   1db60:	b928      	cbnz	r0, 1db6e <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1db62:	4b2e      	ldr	r3, [pc, #184]	; (1dc1c <lfclk_spinwait+0xd8>)
   1db64:	781b      	ldrb	r3, [r3, #0]
   1db66:	2b00      	cmp	r3, #0
   1db68:	d041      	beq.n	1dbee <lfclk_spinwait+0xaa>
   1db6a:	2300      	movs	r3, #0
   1db6c:	e000      	b.n	1db70 <lfclk_spinwait+0x2c>
   1db6e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   1db70:	461c      	mov	r4, r3
   1db72:	2b00      	cmp	r3, #0
   1db74:	d03d      	beq.n	1dbf2 <lfclk_spinwait+0xae>
	__asm__ volatile(
   1db76:	f04f 0340 	mov.w	r3, #64	; 0x40
   1db7a:	f3ef 8611 	mrs	r6, BASEPRI
   1db7e:	f383 8812 	msr	BASEPRI_MAX, r3
   1db82:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1db86:	b924      	cbnz	r4, 1db92 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1db88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1db8c:	2202      	movs	r2, #2
   1db8e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1db92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1db96:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1db9a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1db9e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1dba2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1dba6:	d12b      	bne.n	1dc00 <lfclk_spinwait+0xbc>
    return false;
   1dba8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1dbaa:	b11a      	cbz	r2, 1dbb4 <lfclk_spinwait+0x70>
   1dbac:	2b01      	cmp	r3, #1
   1dbae:	d029      	beq.n	1dc04 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1dbb0:	2d01      	cmp	r5, #1
   1dbb2:	d027      	beq.n	1dc04 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1dbb4:	b1fc      	cbz	r4, 1dbf6 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1dbb6:	4630      	mov	r0, r6
   1dbb8:	f7f7 fcfc 	bl	155b4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1dbbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dbc0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1dbc4:	2b00      	cmp	r3, #0
   1dbc6:	d1e4      	bne.n	1db92 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1dbc8:	4b15      	ldr	r3, [pc, #84]	; (1dc20 <lfclk_spinwait+0xdc>)
   1dbca:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1dbcc:	2b00      	cmp	r3, #0
   1dbce:	d0e0      	beq.n	1db92 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1dbd0:	4b13      	ldr	r3, [pc, #76]	; (1dc20 <lfclk_spinwait+0xdc>)
   1dbd2:	2200      	movs	r2, #0
   1dbd4:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1dbd6:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1dbd8:	2301      	movs	r3, #1
   1dbda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1dbde:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dbe2:	4a10      	ldr	r2, [pc, #64]	; (1dc24 <lfclk_spinwait+0xe0>)
   1dbe4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1dbe8:	4a0f      	ldr	r2, [pc, #60]	; (1dc28 <lfclk_spinwait+0xe4>)
   1dbea:	6013      	str	r3, [r2, #0]
}
   1dbec:	e7d1      	b.n	1db92 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1dbee:	2301      	movs	r3, #1
   1dbf0:	e7be      	b.n	1db70 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   1dbf2:	2600      	movs	r6, #0
   1dbf4:	e7c7      	b.n	1db86 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1dbf6:	2021      	movs	r0, #33	; 0x21
   1dbf8:	2100      	movs	r1, #0
   1dbfa:	f004 f807 	bl	21c0c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1dbfe:	e7dd      	b.n	1dbbc <lfclk_spinwait+0x78>
                return true;
   1dc00:	2201      	movs	r2, #1
   1dc02:	e7d2      	b.n	1dbaa <lfclk_spinwait+0x66>
	if (isr_mode) {
   1dc04:	b124      	cbz	r4, 1dc10 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1dc06:	f386 8811 	msr	BASEPRI, r6
   1dc0a:	f3bf 8f6f 	isb	sy
}
   1dc0e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1dc10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dc14:	2202      	movs	r2, #2
   1dc16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dc1a:	e7f8      	b.n	1dc0e <lfclk_spinwait+0xca>
   1dc1c:	20003c7c 	.word	0x20003c7c
   1dc20:	40000104 	.word	0x40000104
   1dc24:	e000e100 	.word	0xe000e100
   1dc28:	40000008 	.word	0x40000008

0001dc2c <z_nrf_clock_control_lf_on>:
{
   1dc2c:	b510      	push	{r4, lr}
   1dc2e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dc30:	4b10      	ldr	r3, [pc, #64]	; (1dc74 <z_nrf_clock_control_lf_on+0x48>)
   1dc32:	2101      	movs	r1, #1
   1dc34:	f3bf 8f5b 	dmb	ish
   1dc38:	e853 2f00 	ldrex	r2, [r3]
   1dc3c:	e843 1000 	strex	r0, r1, [r3]
   1dc40:	2800      	cmp	r0, #0
   1dc42:	d1f9      	bne.n	1dc38 <z_nrf_clock_control_lf_on+0xc>
   1dc44:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1dc48:	b11a      	cbz	r2, 1dc52 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1dc4a:	1e63      	subs	r3, r4, #1
   1dc4c:	2b01      	cmp	r3, #1
   1dc4e:	d90c      	bls.n	1dc6a <z_nrf_clock_control_lf_on+0x3e>
}
   1dc50:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1dc52:	4809      	ldr	r0, [pc, #36]	; (1dc78 <z_nrf_clock_control_lf_on+0x4c>)
   1dc54:	f008 fd36 	bl	266c4 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1dc58:	4908      	ldr	r1, [pc, #32]	; (1dc7c <z_nrf_clock_control_lf_on+0x50>)
   1dc5a:	2300      	movs	r3, #0
   1dc5c:	604b      	str	r3, [r1, #4]
   1dc5e:	60cb      	str	r3, [r1, #12]
   1dc60:	2301      	movs	r3, #1
   1dc62:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1dc64:	f005 fe4b 	bl	238fe <onoff_request>
   1dc68:	e7ef      	b.n	1dc4a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1dc6a:	4620      	mov	r0, r4
   1dc6c:	f7ff ff6a 	bl	1db44 <lfclk_spinwait>
		break;
   1dc70:	e7ee      	b.n	1dc50 <z_nrf_clock_control_lf_on+0x24>
   1dc72:	bf00      	nop
   1dc74:	20002b8c 	.word	0x20002b8c
   1dc78:	000285fc 	.word	0x000285fc
   1dc7c:	20002b28 	.word	0x20002b28

0001dc80 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1dc80:	b510      	push	{r4, lr}
   1dc82:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1dc84:	280a      	cmp	r0, #10
   1dc86:	d007      	beq.n	1dc98 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1dc88:	4b07      	ldr	r3, [pc, #28]	; (1dca8 <console_out+0x28>)
   1dc8a:	6818      	ldr	r0, [r3, #0]
   1dc8c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1dc8e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1dc90:	685b      	ldr	r3, [r3, #4]
   1dc92:	4798      	blx	r3

	return c;
}
   1dc94:	4620      	mov	r0, r4
   1dc96:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1dc98:	4b03      	ldr	r3, [pc, #12]	; (1dca8 <console_out+0x28>)
   1dc9a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1dc9c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1dc9e:	685b      	ldr	r3, [r3, #4]
   1dca0:	210d      	movs	r1, #13
   1dca2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1dca4:	e7f0      	b.n	1dc88 <console_out+0x8>
   1dca6:	bf00      	nop
   1dca8:	20002b90 	.word	0x20002b90

0001dcac <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   1dcac:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
   1dcae:	4c04      	ldr	r4, [pc, #16]	; (1dcc0 <uart_console_hook_install+0x14>)
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	f7f8 fe7b 	bl	169ac <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
   1dcb6:	4620      	mov	r0, r4
   1dcb8:	f7f5 fac8 	bl	1324c <__printk_hook_install>
#endif
}
   1dcbc:	bd10      	pop	{r4, pc}
   1dcbe:	bf00      	nop
   1dcc0:	0001dc81 	.word	0x0001dc81

0001dcc4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1dcc4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1dcc6:	4806      	ldr	r0, [pc, #24]	; (1dce0 <uart_console_init+0x1c>)
   1dcc8:	4b06      	ldr	r3, [pc, #24]	; (1dce4 <uart_console_init+0x20>)
   1dcca:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1dccc:	f009 fdb7 	bl	2783e <z_device_ready>
   1dcd0:	b118      	cbz	r0, 1dcda <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   1dcd2:	f7ff ffeb 	bl	1dcac <uart_console_hook_install>

	return 0;
   1dcd6:	2000      	movs	r0, #0
}
   1dcd8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1dcda:	f06f 0012 	mvn.w	r0, #18
   1dcde:	e7fb      	b.n	1dcd8 <uart_console_init+0x14>
   1dce0:	00028674 	.word	0x00028674
   1dce4:	20002b90 	.word	0x20002b90

0001dce8 <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dce8:	4b1f      	ldr	r3, [pc, #124]	; (1dd68 <get_drive+0x80>)
   1dcea:	4003      	ands	r3, r0
   1dcec:	4a1f      	ldr	r2, [pc, #124]	; (1dd6c <get_drive+0x84>)
   1dcee:	4293      	cmp	r3, r2
   1dcf0:	d032      	beq.n	1dd58 <get_drive+0x70>
   1dcf2:	d816      	bhi.n	1dd22 <get_drive+0x3a>
   1dcf4:	2b06      	cmp	r3, #6
   1dcf6:	d02b      	beq.n	1dd50 <get_drive+0x68>
   1dcf8:	d906      	bls.n	1dd08 <get_drive+0x20>
   1dcfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1dcfe:	d10d      	bne.n	1dd1c <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
   1dd00:	2301      	movs	r3, #1
   1dd02:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd04:	2000      	movs	r0, #0
		break;
   1dd06:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dd08:	b1fb      	cbz	r3, 1dd4a <get_drive+0x62>
   1dd0a:	2b02      	cmp	r3, #2
   1dd0c:	d103      	bne.n	1dd16 <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
   1dd0e:	2304      	movs	r3, #4
   1dd10:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd12:	2000      	movs	r0, #0
		break;
   1dd14:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dd16:	f06f 0015 	mvn.w	r0, #21
   1dd1a:	4770      	bx	lr
   1dd1c:	f06f 0015 	mvn.w	r0, #21
   1dd20:	4770      	bx	lr
   1dd22:	4a13      	ldr	r2, [pc, #76]	; (1dd70 <get_drive+0x88>)
   1dd24:	4293      	cmp	r3, r2
   1dd26:	d01b      	beq.n	1dd60 <get_drive+0x78>
   1dd28:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1dd2c:	d103      	bne.n	1dd36 <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
   1dd2e:	2303      	movs	r3, #3
   1dd30:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd32:	2000      	movs	r0, #0
		break;
   1dd34:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dd36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1dd3a:	d103      	bne.n	1dd44 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
   1dd3c:	2302      	movs	r3, #2
   1dd3e:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd40:	2000      	movs	r0, #0
		break;
   1dd42:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1dd44:	f06f 0015 	mvn.w	r0, #21
   1dd48:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
   1dd4a:	2000      	movs	r0, #0
   1dd4c:	7008      	strb	r0, [r1, #0]
		break;
   1dd4e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
   1dd50:	2306      	movs	r3, #6
   1dd52:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd54:	2000      	movs	r0, #0
		break;
   1dd56:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
   1dd58:	2307      	movs	r3, #7
   1dd5a:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd5c:	2000      	movs	r0, #0
		break;
   1dd5e:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
   1dd60:	2305      	movs	r3, #5
   1dd62:	700b      	strb	r3, [r1, #0]
	int err = 0;
   1dd64:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
   1dd66:	4770      	bx	lr
   1dd68:	00f00006 	.word	0x00f00006
   1dd6c:	00100006 	.word	0x00100006
   1dd70:	00400002 	.word	0x00400002

0001dd74 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dd74:	b128      	cbz	r0, 1dd82 <get_dev+0xe>
   1dd76:	2801      	cmp	r0, #1
   1dd78:	d101      	bne.n	1dd7e <get_dev+0xa>
   1dd7a:	4803      	ldr	r0, [pc, #12]	; (1dd88 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
   1dd7c:	4770      	bx	lr
	const struct device *dev = NULL;
   1dd7e:	2000      	movs	r0, #0
   1dd80:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1dd82:	4802      	ldr	r0, [pc, #8]	; (1dd8c <get_dev+0x18>)
   1dd84:	4770      	bx	lr
   1dd86:	bf00      	nop
   1dd88:	00028614 	.word	0x00028614
   1dd8c:	0002862c 	.word	0x0002862c

0001dd90 <gpio_nrfx_pin_interrupt_configure>:
{
   1dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dd92:	b085      	sub	sp, #20
   1dd94:	460e      	mov	r6, r1
   1dd96:	4619      	mov	r1, r3
	return port->config;
   1dd98:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dd9a:	7b1b      	ldrb	r3, [r3, #12]
   1dd9c:	f006 051f 	and.w	r5, r6, #31
   1dda0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1dda4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1dda8:	d022      	beq.n	1ddf0 <gpio_nrfx_pin_interrupt_configure+0x60>
   1ddaa:	4607      	mov	r7, r0
   1ddac:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ddae:	2300      	movs	r3, #0
   1ddb0:	9302      	str	r3, [sp, #8]
   1ddb2:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
   1ddb4:	4610      	mov	r0, r2
   1ddb6:	f008 fd83 	bl	268c0 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1ddba:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
   1ddbe:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1ddc0:	6899      	ldr	r1, [r3, #8]
   1ddc2:	40f1      	lsrs	r1, r6
   1ddc4:	f011 0f01 	tst.w	r1, #1
   1ddc8:	d102      	bne.n	1ddd0 <gpio_nrfx_pin_interrupt_configure+0x40>
   1ddca:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1ddce:	d014      	beq.n	1ddfa <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ddd0:	2300      	movs	r3, #0
   1ddd2:	aa02      	add	r2, sp, #8
   1ddd4:	4619      	mov	r1, r3
   1ddd6:	4628      	mov	r0, r5
   1ddd8:	f001 ff14 	bl	1fc04 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1dddc:	4b1b      	ldr	r3, [pc, #108]	; (1de4c <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1ddde:	4298      	cmp	r0, r3
   1dde0:	d131      	bne.n	1de46 <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1dde2:	2101      	movs	r1, #1
   1dde4:	4628      	mov	r0, r5
   1dde6:	f002 f8e5 	bl	1ffb4 <nrfx_gpiote_trigger_enable>
	return 0;
   1ddea:	2000      	movs	r0, #0
}
   1ddec:	b005      	add	sp, #20
   1ddee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
   1ddf0:	4628      	mov	r0, r5
   1ddf2:	f002 f943 	bl	2007c <nrfx_gpiote_trigger_disable>
		return 0;
   1ddf6:	2000      	movs	r0, #0
   1ddf8:	e7f8      	b.n	1ddec <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1ddfa:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
   1ddfe:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1de00:	2a01      	cmp	r2, #1
   1de02:	d014      	beq.n	1de2e <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
   1de04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1de08:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1de0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1de10:	f013 0f01 	tst.w	r3, #1
   1de14:	d1dc      	bne.n	1ddd0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1de16:	f10d 0107 	add.w	r1, sp, #7
   1de1a:	4628      	mov	r0, r5
   1de1c:	f002 f86e 	bl	1fefc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1de20:	4b0b      	ldr	r3, [pc, #44]	; (1de50 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   1de22:	4298      	cmp	r0, r3
   1de24:	d005      	beq.n	1de32 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
   1de26:	f10d 0307 	add.w	r3, sp, #7
   1de2a:	9303      	str	r3, [sp, #12]
   1de2c:	e7d0      	b.n	1ddd0 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
   1de2e:	4a09      	ldr	r2, [pc, #36]	; (1de54 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   1de30:	e7ea      	b.n	1de08 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
   1de32:	f10d 0007 	add.w	r0, sp, #7
   1de36:	f002 f8b5 	bl	1ffa4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1de3a:	4b04      	ldr	r3, [pc, #16]	; (1de4c <gpio_nrfx_pin_interrupt_configure+0xbc>)
   1de3c:	4298      	cmp	r0, r3
   1de3e:	d0f2      	beq.n	1de26 <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
   1de40:	f06f 000b 	mvn.w	r0, #11
   1de44:	e7d2      	b.n	1ddec <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
   1de46:	f06f 0004 	mvn.w	r0, #4
   1de4a:	e7cf      	b.n	1ddec <gpio_nrfx_pin_interrupt_configure+0x5c>
   1de4c:	0bad0000 	.word	0x0bad0000
   1de50:	0bad0004 	.word	0x0bad0004
   1de54:	50000300 	.word	0x50000300

0001de58 <pin_uninit>:
{
   1de58:	b530      	push	{r4, r5, lr}
   1de5a:	b083      	sub	sp, #12
   1de5c:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
   1de5e:	f10d 0107 	add.w	r1, sp, #7
   1de62:	f002 f84b 	bl	1fefc <nrfx_gpiote_channel_get>
   1de66:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
   1de68:	4620      	mov	r0, r4
   1de6a:	f002 f937 	bl	200dc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   1de6e:	4b0b      	ldr	r3, [pc, #44]	; (1de9c <pin_uninit+0x44>)
   1de70:	4298      	cmp	r0, r3
   1de72:	d10f      	bne.n	1de94 <pin_uninit+0x3c>
	if (free_ch) {
   1de74:	429d      	cmp	r5, r3
   1de76:	d005      	beq.n	1de84 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1de78:	4b08      	ldr	r3, [pc, #32]	; (1de9c <pin_uninit+0x44>)
   1de7a:	4298      	cmp	r0, r3
   1de7c:	d107      	bne.n	1de8e <pin_uninit+0x36>
   1de7e:	2000      	movs	r0, #0
}
   1de80:	b003      	add	sp, #12
   1de82:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
   1de84:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1de88:	f002 f884 	bl	1ff94 <nrfx_gpiote_channel_free>
   1de8c:	e7f4      	b.n	1de78 <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   1de8e:	f06f 0004 	mvn.w	r0, #4
   1de92:	e7f5      	b.n	1de80 <pin_uninit+0x28>
		return -EIO;
   1de94:	f06f 0004 	mvn.w	r0, #4
   1de98:	e7f2      	b.n	1de80 <pin_uninit+0x28>
   1de9a:	bf00      	nop
   1de9c:	0bad0000 	.word	0x0bad0000

0001dea0 <gpio_nrfx_pin_configure>:
{
   1dea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dea4:	b087      	sub	sp, #28
	return port->config;
   1dea6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1deaa:	f898 300c 	ldrb.w	r3, [r8, #12]
   1deae:	f001 051f 	and.w	r5, r1, #31
   1deb2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   1deb6:	2a00      	cmp	r2, #0
   1deb8:	d044      	beq.n	1df44 <gpio_nrfx_pin_configure+0xa4>
   1deba:	460c      	mov	r4, r1
   1debc:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1debe:	2600      	movs	r6, #0
   1dec0:	9603      	str	r6, [sp, #12]
   1dec2:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
   1dec4:	f10d 0117 	add.w	r1, sp, #23
   1dec8:	4620      	mov	r0, r4
   1deca:	f002 f817 	bl	1fefc <nrfx_gpiote_channel_get>
   1dece:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1ded0:	4633      	mov	r3, r6
   1ded2:	aa03      	add	r2, sp, #12
   1ded4:	4631      	mov	r1, r6
   1ded6:	4628      	mov	r0, r5
   1ded8:	f001 fe94 	bl	1fc04 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1dedc:	4b30      	ldr	r3, [pc, #192]	; (1dfa0 <gpio_nrfx_pin_configure+0x100>)
   1dede:	4298      	cmp	r0, r3
   1dee0:	d15b      	bne.n	1df9a <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
   1dee2:	4599      	cmp	r9, r3
   1dee4:	d036      	beq.n	1df54 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
   1dee6:	f417 7f00 	tst.w	r7, #512	; 0x200
   1deea:	d043      	beq.n	1df74 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
   1deec:	f10d 0103 	add.w	r1, sp, #3
   1def0:	4638      	mov	r0, r7
   1def2:	f7ff fef9 	bl	1dce8 <get_drive>
		if (rv != 0) {
   1def6:	4606      	mov	r6, r0
   1def8:	bb40      	cbnz	r0, 1df4c <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
   1defa:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1defe:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1df02:	f417 7f80 	tst.w	r7, #256	; 0x100
   1df06:	bf0c      	ite	eq
   1df08:	2301      	moveq	r3, #1
   1df0a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
   1df0c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
   1df10:	4638      	mov	r0, r7
   1df12:	f008 fca2 	bl	2685a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
   1df16:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1df1a:	f417 6f00 	tst.w	r7, #2048	; 0x800
   1df1e:	d01e      	beq.n	1df5e <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1df20:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1df24:	2101      	movs	r1, #1
   1df26:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
   1df2a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1df2e:	2200      	movs	r2, #0
   1df30:	a901      	add	r1, sp, #4
   1df32:	4628      	mov	r0, r5
   1df34:	f001 ff1c 	bl	1fd70 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1df38:	4b19      	ldr	r3, [pc, #100]	; (1dfa0 <gpio_nrfx_pin_configure+0x100>)
   1df3a:	4298      	cmp	r0, r3
   1df3c:	d006      	beq.n	1df4c <gpio_nrfx_pin_configure+0xac>
   1df3e:	f06f 0615 	mvn.w	r6, #21
   1df42:	e003      	b.n	1df4c <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
   1df44:	4628      	mov	r0, r5
   1df46:	f7ff ff87 	bl	1de58 <pin_uninit>
   1df4a:	4606      	mov	r6, r0
}
   1df4c:	4630      	mov	r0, r6
   1df4e:	b007      	add	sp, #28
   1df50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
   1df54:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1df58:	f002 f81c 	bl	1ff94 <nrfx_gpiote_channel_free>
   1df5c:	e7c3      	b.n	1dee6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1df5e:	f417 6f80 	tst.w	r7, #1024	; 0x400
   1df62:	d0e4      	beq.n	1df2e <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1df64:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1df68:	2301      	movs	r3, #1
   1df6a:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
   1df6e:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
   1df72:	e7dc      	b.n	1df2e <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
   1df74:	4638      	mov	r0, r7
   1df76:	f008 fc70 	bl	2685a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
   1df7a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1df7e:	2300      	movs	r3, #0
   1df80:	461a      	mov	r2, r3
   1df82:	a902      	add	r1, sp, #8
   1df84:	4628      	mov	r0, r5
   1df86:	f001 fe3d 	bl	1fc04 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1df8a:	4b05      	ldr	r3, [pc, #20]	; (1dfa0 <gpio_nrfx_pin_configure+0x100>)
   1df8c:	4298      	cmp	r0, r3
   1df8e:	d101      	bne.n	1df94 <gpio_nrfx_pin_configure+0xf4>
   1df90:	2600      	movs	r6, #0
   1df92:	e7db      	b.n	1df4c <gpio_nrfx_pin_configure+0xac>
   1df94:	f06f 0615 	mvn.w	r6, #21
   1df98:	e7d8      	b.n	1df4c <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
   1df9a:	f06f 0615 	mvn.w	r6, #21
   1df9e:	e7d5      	b.n	1df4c <gpio_nrfx_pin_configure+0xac>
   1dfa0:	0bad0000 	.word	0x0bad0000

0001dfa4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1dfa4:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1dfa6:	f001 ffeb 	bl	1ff80 <nrfx_gpiote_is_init>
   1dfaa:	b108      	cbz	r0, 1dfb0 <gpio_nrfx_init+0xc>
		return 0;
   1dfac:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1dfae:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
   1dfb0:	f001 ffbc 	bl	1ff2c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1dfb4:	4b08      	ldr	r3, [pc, #32]	; (1dfd8 <gpio_nrfx_init+0x34>)
   1dfb6:	4298      	cmp	r0, r3
   1dfb8:	d10a      	bne.n	1dfd0 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1dfba:	2100      	movs	r1, #0
   1dfbc:	4807      	ldr	r0, [pc, #28]	; (1dfdc <gpio_nrfx_init+0x38>)
   1dfbe:	f001 ff97 	bl	1fef0 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1dfc2:	2200      	movs	r2, #0
   1dfc4:	2105      	movs	r1, #5
   1dfc6:	2006      	movs	r0, #6
   1dfc8:	f7f7 fc1a 	bl	15800 <z_arm_irq_priority_set>
	return 0;
   1dfcc:	2000      	movs	r0, #0
   1dfce:	e7ee      	b.n	1dfae <gpio_nrfx_init+0xa>
		return -EIO;
   1dfd0:	f06f 0004 	mvn.w	r0, #4
   1dfd4:	e7eb      	b.n	1dfae <gpio_nrfx_init+0xa>
   1dfd6:	bf00      	nop
   1dfd8:	0bad0000 	.word	0x0bad0000
   1dfdc:	00026951 	.word	0x00026951

0001dfe0 <i2c_nrfx_twi_recover_bus>:

	return 0;
}

static int i2c_nrfx_twi_recover_bus(const struct device *dev)
{
   1dfe0:	b508      	push	{r3, lr}
	return dev->config;
   1dfe2:	6843      	ldr	r3, [r0, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   1dfe4:	68d9      	ldr	r1, [r3, #12]
   1dfe6:	6898      	ldr	r0, [r3, #8]
   1dfe8:	f002 fabe 	bl	20568 <nrfx_twi_twim_bus_recover>
	nrfx_err_t err = nrfx_twi_bus_recover(get_dev_config(dev)->config.scl,
					      get_dev_config(dev)->config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1dfec:	4b03      	ldr	r3, [pc, #12]	; (1dffc <i2c_nrfx_twi_recover_bus+0x1c>)
   1dfee:	4298      	cmp	r0, r3
   1dff0:	d101      	bne.n	1dff6 <i2c_nrfx_twi_recover_bus+0x16>
   1dff2:	2000      	movs	r0, #0
}
   1dff4:	bd08      	pop	{r3, pc}
	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   1dff6:	f06f 000f 	mvn.w	r0, #15
   1dffa:	e7fb      	b.n	1dff4 <i2c_nrfx_twi_recover_bus+0x14>
   1dffc:	0bad0000 	.word	0x0bad0000

0001e000 <i2c_nrfx_twi_configure>:
	return dev->config;
   1e000:	6842      	ldr	r2, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1e002:	f011 0f01 	tst.w	r1, #1
   1e006:	d13e      	bne.n	1e086 <i2c_nrfx_twi_configure+0x86>
	switch (I2C_SPEED_GET(dev_config)) {
   1e008:	f3c1 0342 	ubfx	r3, r1, #1, #3
   1e00c:	2b01      	cmp	r3, #1
   1e00e:	d02b      	beq.n	1e068 <i2c_nrfx_twi_configure+0x68>
   1e010:	2b02      	cmp	r3, #2
   1e012:	d032      	beq.n	1e07a <i2c_nrfx_twi_configure+0x7a>
{
   1e014:	b500      	push	{lr}
   1e016:	b089      	sub	sp, #36	; 0x24
		LOG_ERR("unsupported speed");
   1e018:	4b1c      	ldr	r3, [pc, #112]	; (1e08c <i2c_nrfx_twi_configure+0x8c>)
   1e01a:	9306      	str	r3, [sp, #24]
   1e01c:	2300      	movs	r3, #0
   1e01e:	f8ad 3005 	strh.w	r3, [sp, #5]
   1e022:	f88d 3007 	strb.w	r3, [sp, #7]
   1e026:	2202      	movs	r2, #2
   1e028:	f88d 2004 	strb.w	r2, [sp, #4]
   1e02c:	f88d 3006 	strb.w	r3, [sp, #6]
   1e030:	9a01      	ldr	r2, [sp, #4]
   1e032:	9205      	str	r2, [sp, #20]
   1e034:	461a      	mov	r2, r3
   1e036:	f363 0200 	bfi	r2, r3, #0, #1
   1e03a:	f363 0241 	bfi	r2, r3, #1, #1
   1e03e:	f363 0282 	bfi	r2, r3, #2, #1
   1e042:	f363 02c5 	bfi	r2, r3, #3, #3
   1e046:	2101      	movs	r1, #1
   1e048:	f361 1288 	bfi	r2, r1, #6, #3
   1e04c:	2108      	movs	r1, #8
   1e04e:	f361 2252 	bfi	r2, r1, #9, #10
   1e052:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1e056:	490e      	ldr	r1, [pc, #56]	; (1e090 <i2c_nrfx_twi_configure+0x90>)
   1e058:	a802      	add	r0, sp, #8
   1e05a:	f005 ff77 	bl	23f4c <z_log_msg2_finalize>
		return -EINVAL;
   1e05e:	f06f 0015 	mvn.w	r0, #21
}
   1e062:	b009      	add	sp, #36	; 0x24
   1e064:	f85d fb04 	ldr.w	pc, [sp], #4
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1e068:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1e06a:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1e06e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return dev->data;
   1e072:	6903      	ldr	r3, [r0, #16]
	get_dev_data(dev)->dev_config = dev_config;
   1e074:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   1e076:	2000      	movs	r0, #0
   1e078:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1e07a:	6813      	ldr	r3, [r2, #0]
   1e07c:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1e080:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
   1e084:	e7f5      	b.n	1e072 <i2c_nrfx_twi_configure+0x72>
		return -EINVAL;
   1e086:	f06f 0015 	mvn.w	r0, #21
}
   1e08a:	4770      	bx	lr
   1e08c:	0002a9f0 	.word	0x0002a9f0
   1e090:	000288dc 	.word	0x000288dc

0001e094 <i2c_nrfx_twi_transfer>:
{
   1e094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e098:	b08d      	sub	sp, #52	; 0x34
   1e09a:	af00      	add	r7, sp, #0
   1e09c:	4680      	mov	r8, r0
   1e09e:	4689      	mov	r9, r1
   1e0a0:	4692      	mov	sl, r2
   1e0a2:	469b      	mov	fp, r3
	return dev->data;
   1e0a4:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
   1e0a6:	f04f 32ff 	mov.w	r2, #4294967295
   1e0aa:	f04f 33ff 	mov.w	r3, #4294967295
   1e0ae:	f003 f825 	bl	210fc <z_impl_k_sem_take>
   1e0b2:	f8d8 0010 	ldr.w	r0, [r8, #16]
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1e0b6:	3018      	adds	r0, #24
   1e0b8:	2200      	movs	r2, #0
   1e0ba:	2300      	movs	r3, #0
   1e0bc:	f003 f81e 	bl	210fc <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1e0c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e0c4:	f002 fa06 	bl	204d4 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1e0c8:	2400      	movs	r4, #0
	int ret = 0;
   1e0ca:	4625      	mov	r5, r4
	for (size_t i = 0; i < num_msgs; i++) {
   1e0cc:	e01e      	b.n	1e10c <i2c_nrfx_twi_transfer+0x78>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1e0ce:	f013 0f01 	tst.w	r3, #1
   1e0d2:	f040 80d2 	bne.w	1e27a <i2c_nrfx_twi_transfer+0x1e6>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1e0d6:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1e0d8:	1d39      	adds	r1, r7, #4
   1e0da:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e0de:	f002 fa29 	bl	20534 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1e0e2:	4b67      	ldr	r3, [pc, #412]	; (1e280 <i2c_nrfx_twi_transfer+0x1ec>)
   1e0e4:	4298      	cmp	r0, r3
   1e0e6:	d140      	bne.n	1e16a <i2c_nrfx_twi_transfer+0xd6>
	return dev->data;
   1e0e8:	f8d8 0010 	ldr.w	r0, [r8, #16]
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1e0ec:	3018      	adds	r0, #24
   1e0ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1e0f2:	2300      	movs	r3, #0
   1e0f4:	f003 f802 	bl	210fc <z_impl_k_sem_take>
		if (ret != 0) {
   1e0f8:	4605      	mov	r5, r0
   1e0fa:	2800      	cmp	r0, #0
   1e0fc:	d13e      	bne.n	1e17c <i2c_nrfx_twi_transfer+0xe8>
	return dev->data;
   1e0fe:	f8d8 3010 	ldr.w	r3, [r8, #16]
		res = get_dev_data(dev)->res;
   1e102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1e104:	4a5e      	ldr	r2, [pc, #376]	; (1e280 <i2c_nrfx_twi_transfer+0x1ec>)
   1e106:	4293      	cmp	r3, r2
   1e108:	d167      	bne.n	1e1da <i2c_nrfx_twi_transfer+0x146>
	for (size_t i = 0; i < num_msgs; i++) {
   1e10a:	3401      	adds	r4, #1
   1e10c:	4554      	cmp	r4, sl
   1e10e:	f080 80a7 	bcs.w	1e260 <i2c_nrfx_twi_transfer+0x1cc>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1e112:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1e116:	eb09 0582 	add.w	r5, r9, r2, lsl #2
   1e11a:	7a2b      	ldrb	r3, [r5, #8]
   1e11c:	f013 0f08 	tst.w	r3, #8
   1e120:	f040 809c 	bne.w	1e25c <i2c_nrfx_twi_transfer+0x1c8>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1e124:	2600      	movs	r6, #0
   1e126:	607e      	str	r6, [r7, #4]
   1e128:	60fe      	str	r6, [r7, #12]
   1e12a:	617e      	str	r6, [r7, #20]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
   1e12c:	7a2b      	ldrb	r3, [r5, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1e12e:	f003 0101 	and.w	r1, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1e132:	7139      	strb	r1, [r7, #4]
   1e134:	f887 b005 	strb.w	fp, [r7, #5]
			.primary_length = msgs[i].len,
   1e138:	6869      	ldr	r1, [r5, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
   1e13a:	60b9      	str	r1, [r7, #8]
			.p_primary_buf  = msgs[i].buf,
   1e13c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
		nrfx_twi_xfer_desc_t cur_xfer = {
   1e140:	613a      	str	r2, [r7, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1e142:	f013 0f02 	tst.w	r3, #2
   1e146:	d10e      	bne.n	1e166 <i2c_nrfx_twi_transfer+0xd2>
			if ((i < (num_msgs - 1)) &&
   1e148:	f10a 32ff 	add.w	r2, sl, #4294967295
   1e14c:	42a2      	cmp	r2, r4
   1e14e:	d9be      	bls.n	1e0ce <i2c_nrfx_twi_transfer+0x3a>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
   1e150:	1c62      	adds	r2, r4, #1
   1e152:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1e156:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   1e15a:	7a12      	ldrb	r2, [r2, #8]
			if ((i < (num_msgs - 1)) &&
   1e15c:	f012 0f04 	tst.w	r2, #4
   1e160:	d1b5      	bne.n	1e0ce <i2c_nrfx_twi_transfer+0x3a>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1e162:	2240      	movs	r2, #64	; 0x40
   1e164:	e7b8      	b.n	1e0d8 <i2c_nrfx_twi_transfer+0x44>
		uint32_t xfer_flags = 0;
   1e166:	2200      	movs	r2, #0
   1e168:	e7b6      	b.n	1e0d8 <i2c_nrfx_twi_transfer+0x44>
			if (res == NRFX_ERROR_BUSY) {
   1e16a:	330b      	adds	r3, #11
   1e16c:	4298      	cmp	r0, r3
   1e16e:	d002      	beq.n	1e176 <i2c_nrfx_twi_transfer+0xe2>
				ret = -EIO;
   1e170:	f06f 0504 	mvn.w	r5, #4
   1e174:	e074      	b.n	1e260 <i2c_nrfx_twi_transfer+0x1cc>
				ret = -EBUSY;
   1e176:	f06f 050f 	mvn.w	r5, #15
   1e17a:	e071      	b.n	1e260 <i2c_nrfx_twi_transfer+0x1cc>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1e17c:	4b41      	ldr	r3, [pc, #260]	; (1e284 <i2c_nrfx_twi_transfer+0x1f0>)
   1e17e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e180:	62fc      	str	r4, [r7, #44]	; 0x2c
   1e182:	2300      	movs	r3, #0
   1e184:	f8a7 3001 	strh.w	r3, [r7, #1]
   1e188:	70fb      	strb	r3, [r7, #3]
   1e18a:	2203      	movs	r2, #3
   1e18c:	703a      	strb	r2, [r7, #0]
   1e18e:	70bb      	strb	r3, [r7, #2]
   1e190:	683a      	ldr	r2, [r7, #0]
   1e192:	627a      	str	r2, [r7, #36]	; 0x24
   1e194:	461a      	mov	r2, r3
   1e196:	f363 0200 	bfi	r2, r3, #0, #1
   1e19a:	f363 0241 	bfi	r2, r3, #1, #1
   1e19e:	f363 0282 	bfi	r2, r3, #2, #1
   1e1a2:	f363 02c5 	bfi	r2, r3, #3, #3
   1e1a6:	2101      	movs	r1, #1
   1e1a8:	f361 1288 	bfi	r2, r1, #6, #3
   1e1ac:	210c      	movs	r1, #12
   1e1ae:	f361 2252 	bfi	r2, r1, #9, #10
   1e1b2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1e1b6:	4934      	ldr	r1, [pc, #208]	; (1e288 <i2c_nrfx_twi_transfer+0x1f4>)
   1e1b8:	f107 0018 	add.w	r0, r7, #24
   1e1bc:	f005 fec6 	bl	23f4c <z_log_msg2_finalize>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
   1e1c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e1c4:	f002 f996 	bl	204f4 <nrfx_twi_disable>
	return dev->config;
   1e1c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e1cc:	68d9      	ldr	r1, [r3, #12]
   1e1ce:	6898      	ldr	r0, [r3, #8]
   1e1d0:	f002 f9ca 	bl	20568 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   1e1d4:	f06f 0504 	mvn.w	r5, #4
			break;
   1e1d8:	e042      	b.n	1e260 <i2c_nrfx_twi_transfer+0x1cc>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1e1da:	466d      	mov	r5, sp
   1e1dc:	b088      	sub	sp, #32
   1e1de:	4668      	mov	r0, sp
   1e1e0:	f110 020c 	adds.w	r2, r0, #12
   1e1e4:	d034      	beq.n	1e250 <i2c_nrfx_twi_transfer+0x1bc>
   1e1e6:	2110      	movs	r1, #16
   1e1e8:	b11a      	cbz	r2, 1e1f2 <i2c_nrfx_twi_transfer+0x15e>
   1e1ea:	2904      	cmp	r1, #4
   1e1ec:	dd01      	ble.n	1e1f2 <i2c_nrfx_twi_transfer+0x15e>
   1e1ee:	4e27      	ldr	r6, [pc, #156]	; (1e28c <i2c_nrfx_twi_transfer+0x1f8>)
   1e1f0:	6106      	str	r6, [r0, #16]
   1e1f2:	b112      	cbz	r2, 1e1fa <i2c_nrfx_twi_transfer+0x166>
   1e1f4:	2908      	cmp	r1, #8
   1e1f6:	dd00      	ble.n	1e1fa <i2c_nrfx_twi_transfer+0x166>
   1e1f8:	6143      	str	r3, [r0, #20]
   1e1fa:	b112      	cbz	r2, 1e202 <i2c_nrfx_twi_transfer+0x16e>
   1e1fc:	290c      	cmp	r1, #12
   1e1fe:	dd00      	ble.n	1e202 <i2c_nrfx_twi_transfer+0x16e>
   1e200:	6184      	str	r4, [r0, #24]
   1e202:	290f      	cmp	r1, #15
   1e204:	dd27      	ble.n	1e256 <i2c_nrfx_twi_transfer+0x1c2>
   1e206:	2310      	movs	r3, #16
   1e208:	b142      	cbz	r2, 1e21c <i2c_nrfx_twi_transfer+0x188>
   1e20a:	2200      	movs	r2, #0
   1e20c:	f8a7 2001 	strh.w	r2, [r7, #1]
   1e210:	70fa      	strb	r2, [r7, #3]
   1e212:	2104      	movs	r1, #4
   1e214:	7039      	strb	r1, [r7, #0]
   1e216:	70ba      	strb	r2, [r7, #2]
   1e218:	683a      	ldr	r2, [r7, #0]
   1e21a:	60c2      	str	r2, [r0, #12]
   1e21c:	2200      	movs	r2, #0
   1e21e:	f36f 0200 	bfc	r2, #0, #1
   1e222:	f36f 0241 	bfc	r2, #1, #1
   1e226:	f36f 0282 	bfc	r2, #2, #1
   1e22a:	f36f 02c5 	bfc	r2, #3, #3
   1e22e:	2101      	movs	r1, #1
   1e230:	f361 1288 	bfi	r2, r1, #6, #3
   1e234:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1e238:	f363 2252 	bfi	r2, r3, #9, #10
   1e23c:	2300      	movs	r3, #0
   1e23e:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1e242:	4911      	ldr	r1, [pc, #68]	; (1e288 <i2c_nrfx_twi_transfer+0x1f4>)
   1e244:	f005 fe82 	bl	23f4c <z_log_msg2_finalize>
   1e248:	46ad      	mov	sp, r5
			ret = -EIO;
   1e24a:	f06f 0504 	mvn.w	r5, #4
			break;
   1e24e:	e007      	b.n	1e260 <i2c_nrfx_twi_transfer+0x1cc>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   1e250:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1e254:	e7c8      	b.n	1e1e8 <i2c_nrfx_twi_transfer+0x154>
   1e256:	f06f 031b 	mvn.w	r3, #27
   1e25a:	e7d5      	b.n	1e208 <i2c_nrfx_twi_transfer+0x174>
			ret = -ENOTSUP;
   1e25c:	f06f 0585 	mvn.w	r5, #133	; 0x85
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1e260:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1e264:	f002 f946 	bl	204f4 <nrfx_twi_disable>
	return dev->data;
   1e268:	f8d8 0010 	ldr.w	r0, [r8, #16]
	z_impl_k_sem_give(sem);
   1e26c:	f002 ff1e 	bl	210ac <z_impl_k_sem_give>
}
   1e270:	4628      	mov	r0, r5
   1e272:	3734      	adds	r7, #52	; 0x34
   1e274:	46bd      	mov	sp, r7
   1e276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ret = -ENOTSUP;
   1e27a:	f06f 0585 	mvn.w	r5, #133	; 0x85
   1e27e:	e7ef      	b.n	1e260 <i2c_nrfx_twi_transfer+0x1cc>
   1e280:	0bad0000 	.word	0x0bad0000
   1e284:	0002aa04 	.word	0x0002aa04
   1e288:	000288dc 	.word	0x000288dc
   1e28c:	0002aa30 	.word	0x0002aa30

0001e290 <event_handler>:
{
   1e290:	b508      	push	{r3, lr}
	switch (p_event->type) {
   1e292:	7803      	ldrb	r3, [r0, #0]
   1e294:	2b01      	cmp	r3, #1
   1e296:	d00c      	beq.n	1e2b2 <event_handler+0x22>
   1e298:	2b02      	cmp	r3, #2
   1e29a:	d00d      	beq.n	1e2b8 <event_handler+0x28>
   1e29c:	b113      	cbz	r3, 1e2a4 <event_handler+0x14>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1e29e:	4b08      	ldr	r3, [pc, #32]	; (1e2c0 <event_handler+0x30>)
   1e2a0:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   1e2a2:	e001      	b.n	1e2a8 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
   1e2a4:	4b07      	ldr	r3, [pc, #28]	; (1e2c4 <event_handler+0x34>)
   1e2a6:	630b      	str	r3, [r1, #48]	; 0x30
	k_sem_give(&dev_data->completion_sync);
   1e2a8:	f101 0018 	add.w	r0, r1, #24
   1e2ac:	f002 fefe 	bl	210ac <z_impl_k_sem_give>
}
   1e2b0:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1e2b2:	4b05      	ldr	r3, [pc, #20]	; (1e2c8 <event_handler+0x38>)
   1e2b4:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   1e2b6:	e7f7      	b.n	1e2a8 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1e2b8:	4b04      	ldr	r3, [pc, #16]	; (1e2cc <event_handler+0x3c>)
   1e2ba:	630b      	str	r3, [r1, #48]	; 0x30
		break;
   1e2bc:	e7f4      	b.n	1e2a8 <event_handler+0x18>
   1e2be:	bf00      	nop
   1e2c0:	0bad0001 	.word	0x0bad0001
   1e2c4:	0bad0000 	.word	0x0bad0000
   1e2c8:	0bae0001 	.word	0x0bae0001
   1e2cc:	0bae0002 	.word	0x0bae0002

0001e2d0 <init_twi>:
	.transfer    = i2c_nrfx_twi_transfer,
	.recover_bus = i2c_nrfx_twi_recover_bus,
};

static int init_twi(const struct device *dev)
{
   1e2d0:	b510      	push	{r4, lr}
   1e2d2:	b084      	sub	sp, #16
   1e2d4:	4604      	mov	r4, r0
	return dev->config;
   1e2d6:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1e2d8:	6923      	ldr	r3, [r4, #16]
   1e2da:	4a0c      	ldr	r2, [pc, #48]	; (1e30c <init_twi+0x3c>)
   1e2dc:	f100 0108 	add.w	r1, r0, #8
   1e2e0:	f002 f890 	bl	20404 <nrfx_twi_init>
					  &get_dev_config(dev)->config,
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
   1e2e4:	4b0a      	ldr	r3, [pc, #40]	; (1e310 <init_twi+0x40>)
   1e2e6:	4298      	cmp	r0, r3
   1e2e8:	d102      	bne.n	1e2f0 <init_twi+0x20>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
   1e2ea:	2000      	movs	r0, #0
}
   1e2ec:	b004      	add	sp, #16
   1e2ee:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to initialize device: %s",
   1e2f0:	6823      	ldr	r3, [r4, #0]
   1e2f2:	9302      	str	r3, [sp, #8]
   1e2f4:	4b07      	ldr	r3, [pc, #28]	; (1e314 <init_twi+0x44>)
   1e2f6:	9301      	str	r3, [sp, #4]
   1e2f8:	2000      	movs	r0, #0
   1e2fa:	9000      	str	r0, [sp, #0]
   1e2fc:	4603      	mov	r3, r0
   1e2fe:	2201      	movs	r2, #1
   1e300:	4905      	ldr	r1, [pc, #20]	; (1e318 <init_twi+0x48>)
   1e302:	f008 fb49 	bl	26998 <z_log_msg2_runtime_create>
		return -EBUSY;
   1e306:	f06f 000f 	mvn.w	r0, #15
   1e30a:	e7ef      	b.n	1e2ec <init_twi+0x1c>
   1e30c:	0001e291 	.word	0x0001e291
   1e310:	0bad0000 	.word	0x0bad0000
   1e314:	0002aa58 	.word	0x0002aa58
   1e318:	000288dc 	.word	0x000288dc

0001e31c <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
   1e31c:	b410      	push	{r4}
	return dev->config;
   1e31e:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
   1e320:	2900      	cmp	r1, #0
   1e322:	d17e      	bne.n	1e422 <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e324:	68da      	ldr	r2, [r3, #12]
   1e326:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e32a:	d017      	beq.n	1e35c <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
   1e32c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e330:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e332:	2a01      	cmp	r2, #1
   1e334:	d065      	beq.n	1e402 <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
   1e336:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e33a:	2201      	movs	r2, #1
   1e33c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1e33e:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
   1e342:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
   1e344:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e348:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e34a:	2a01      	cmp	r2, #1
   1e34c:	d05b      	beq.n	1e406 <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
   1e34e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e352:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e356:	2103      	movs	r1, #3
   1e358:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e35c:	691a      	ldr	r2, [r3, #16]
   1e35e:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e362:	d00f      	beq.n	1e384 <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
   1e364:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
   1e366:	2900      	cmp	r1, #0
   1e368:	d04f      	beq.n	1e40a <uarte_nrfx_pins_configure+0xee>
   1e36a:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   1e36c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e370:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e372:	2a01      	cmp	r2, #1
   1e374:	d04b      	beq.n	1e40e <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
   1e376:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e37a:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e37c:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e380:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e384:	695a      	ldr	r2, [r3, #20]
   1e386:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e38a:	d017      	beq.n	1e3bc <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
   1e38c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e390:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e392:	2a01      	cmp	r2, #1
   1e394:	d03d      	beq.n	1e412 <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
   1e396:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e39a:	2201      	movs	r2, #1
   1e39c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   1e39e:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
   1e3a2:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
   1e3a4:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e3a8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e3aa:	2a01      	cmp	r2, #1
   1e3ac:	d033      	beq.n	1e416 <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
   1e3ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e3b2:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e3b6:	2103      	movs	r1, #3
   1e3b8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e3bc:	699a      	ldr	r2, [r3, #24]
   1e3be:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e3c2:	d00e      	beq.n	1e3e2 <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
   1e3c4:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
   1e3c6:	b341      	cbz	r1, 1e41a <uarte_nrfx_pins_configure+0xfe>
   1e3c8:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   1e3ca:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e3ce:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e3d0:	2a01      	cmp	r2, #1
   1e3d2:	d024      	beq.n	1e41e <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
   1e3d4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e3d8:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e3da:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e3de:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   1e3e2:	681a      	ldr	r2, [r3, #0]
   1e3e4:	68d8      	ldr	r0, [r3, #12]
   1e3e6:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
   1e3e8:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e3ec:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   1e3f0:	681a      	ldr	r2, [r3, #0]
   1e3f2:	6959      	ldr	r1, [r3, #20]
   1e3f4:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
   1e3f6:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1e3fa:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
   1e3fe:	bc10      	pop	{r4}
   1e400:	4770      	bx	lr
        case 1: return NRF_P1;
   1e402:	482c      	ldr	r0, [pc, #176]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e404:	e799      	b.n	1e33a <uarte_nrfx_pins_configure+0x1e>
   1e406:	482b      	ldr	r0, [pc, #172]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e408:	e7a3      	b.n	1e352 <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
   1e40a:	2000      	movs	r0, #0
   1e40c:	e7ae      	b.n	1e36c <uarte_nrfx_pins_configure+0x50>
   1e40e:	4c29      	ldr	r4, [pc, #164]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e410:	e7b3      	b.n	1e37a <uarte_nrfx_pins_configure+0x5e>
   1e412:	4828      	ldr	r0, [pc, #160]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e414:	e7c1      	b.n	1e39a <uarte_nrfx_pins_configure+0x7e>
   1e416:	4827      	ldr	r0, [pc, #156]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e418:	e7cb      	b.n	1e3b2 <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
   1e41a:	2000      	movs	r0, #0
   1e41c:	e7d5      	b.n	1e3ca <uarte_nrfx_pins_configure+0xae>
   1e41e:	4c25      	ldr	r4, [pc, #148]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e420:	e7da      	b.n	1e3d8 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e422:	68da      	ldr	r2, [r3, #12]
   1e424:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e428:	d00b      	beq.n	1e442 <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
   1e42a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e42e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e430:	2a01      	cmp	r2, #1
   1e432:	d037      	beq.n	1e4a4 <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
   1e434:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e438:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e43c:	2102      	movs	r1, #2
   1e43e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e442:	691a      	ldr	r2, [r3, #16]
   1e444:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e448:	d00b      	beq.n	1e462 <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
   1e44a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e44e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e450:	2a01      	cmp	r2, #1
   1e452:	d029      	beq.n	1e4a8 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
   1e454:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e458:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e45c:	2102      	movs	r1, #2
   1e45e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e462:	695a      	ldr	r2, [r3, #20]
   1e464:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e468:	d00b      	beq.n	1e482 <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
   1e46a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e46e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e470:	2a01      	cmp	r2, #1
   1e472:	d01b      	beq.n	1e4ac <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
   1e474:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e478:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e47c:	2102      	movs	r1, #2
   1e47e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   1e482:	699a      	ldr	r2, [r3, #24]
   1e484:	f1b2 3fff 	cmp.w	r2, #4294967295
   1e488:	d0ab      	beq.n	1e3e2 <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
   1e48a:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
   1e48e:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e490:	2a01      	cmp	r2, #1
   1e492:	d00d      	beq.n	1e4b0 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
   1e494:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e498:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
   1e49c:	2102      	movs	r1, #2
   1e49e:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   1e4a2:	e79e      	b.n	1e3e2 <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
   1e4a4:	4803      	ldr	r0, [pc, #12]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e4a6:	e7c7      	b.n	1e438 <uarte_nrfx_pins_configure+0x11c>
   1e4a8:	4802      	ldr	r0, [pc, #8]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e4aa:	e7d5      	b.n	1e458 <uarte_nrfx_pins_configure+0x13c>
   1e4ac:	4801      	ldr	r0, [pc, #4]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e4ae:	e7e3      	b.n	1e478 <uarte_nrfx_pins_configure+0x15c>
   1e4b0:	4800      	ldr	r0, [pc, #0]	; (1e4b4 <uarte_nrfx_pins_configure+0x198>)
   1e4b2:	e7f1      	b.n	1e498 <uarte_nrfx_pins_configure+0x17c>
   1e4b4:	50000300 	.word	0x50000300

0001e4b8 <baudrate_set>:
	return dev->config;
   1e4b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1e4ba:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1e4bc:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1e4c0:	d06f      	beq.n	1e5a2 <baudrate_set+0xea>
   1e4c2:	d83a      	bhi.n	1e53a <baudrate_set+0x82>
   1e4c4:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1e4c8:	d06e      	beq.n	1e5a8 <baudrate_set+0xf0>
   1e4ca:	d90a      	bls.n	1e4e2 <baudrate_set+0x2a>
   1e4cc:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1e4d0:	d075      	beq.n	1e5be <baudrate_set+0x106>
   1e4d2:	d924      	bls.n	1e51e <baudrate_set+0x66>
   1e4d4:	f647 2312 	movw	r3, #31250	; 0x7a12
   1e4d8:	4299      	cmp	r1, r3
   1e4da:	d12b      	bne.n	1e534 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e4dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e4e0:	e013      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e4e2:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1e4e6:	d061      	beq.n	1e5ac <baudrate_set+0xf4>
   1e4e8:	d907      	bls.n	1e4fa <baudrate_set+0x42>
   1e4ea:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1e4ee:	d063      	beq.n	1e5b8 <baudrate_set+0x100>
   1e4f0:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1e4f4:	d110      	bne.n	1e518 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e4f6:	4b3c      	ldr	r3, [pc, #240]	; (1e5e8 <baudrate_set+0x130>)
   1e4f8:	e007      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e4fa:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1e4fe:	d058      	beq.n	1e5b2 <baudrate_set+0xfa>
   1e500:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1e504:	d105      	bne.n	1e512 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1e506:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e50a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1e50e:	2000      	movs	r0, #0
   1e510:	4770      	bx	lr
	switch (baudrate) {
   1e512:	f06f 0015 	mvn.w	r0, #21
   1e516:	4770      	bx	lr
   1e518:	f06f 0015 	mvn.w	r0, #21
   1e51c:	4770      	bx	lr
   1e51e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1e522:	d04e      	beq.n	1e5c2 <baudrate_set+0x10a>
   1e524:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1e528:	d101      	bne.n	1e52e <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e52a:	4b30      	ldr	r3, [pc, #192]	; (1e5ec <baudrate_set+0x134>)
   1e52c:	e7ed      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e52e:	f06f 0015 	mvn.w	r0, #21
   1e532:	4770      	bx	lr
   1e534:	f06f 0015 	mvn.w	r0, #21
   1e538:	4770      	bx	lr
   1e53a:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1e53e:	d042      	beq.n	1e5c6 <baudrate_set+0x10e>
   1e540:	d909      	bls.n	1e556 <baudrate_set+0x9e>
   1e542:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1e546:	d046      	beq.n	1e5d6 <baudrate_set+0x11e>
   1e548:	d91f      	bls.n	1e58a <baudrate_set+0xd2>
   1e54a:	4b29      	ldr	r3, [pc, #164]	; (1e5f0 <baudrate_set+0x138>)
   1e54c:	4299      	cmp	r1, r3
   1e54e:	d148      	bne.n	1e5e2 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e550:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1e554:	e7d9      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e556:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1e55a:	d037      	beq.n	1e5cc <baudrate_set+0x114>
   1e55c:	d905      	bls.n	1e56a <baudrate_set+0xb2>
   1e55e:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1e562:	d10f      	bne.n	1e584 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e564:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e568:	e7cf      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e56a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1e56e:	4299      	cmp	r1, r3
   1e570:	d02e      	beq.n	1e5d0 <baudrate_set+0x118>
   1e572:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1e576:	d102      	bne.n	1e57e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e578:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e57c:	e7c5      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e57e:	f06f 0015 	mvn.w	r0, #21
   1e582:	4770      	bx	lr
   1e584:	f06f 0015 	mvn.w	r0, #21
   1e588:	4770      	bx	lr
   1e58a:	4b1a      	ldr	r3, [pc, #104]	; (1e5f4 <baudrate_set+0x13c>)
   1e58c:	4299      	cmp	r1, r3
   1e58e:	d025      	beq.n	1e5dc <baudrate_set+0x124>
   1e590:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1e594:	d102      	bne.n	1e59c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e596:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e59a:	e7b6      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e59c:	f06f 0015 	mvn.w	r0, #21
   1e5a0:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e5a2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e5a6:	e7b0      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e5a8:	4b13      	ldr	r3, [pc, #76]	; (1e5f8 <baudrate_set+0x140>)
   1e5aa:	e7ae      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e5ac:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e5b0:	e7ab      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e5b2:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e5b6:	e7a8      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e5b8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e5bc:	e7a5      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e5be:	4b0f      	ldr	r3, [pc, #60]	; (1e5fc <baudrate_set+0x144>)
   1e5c0:	e7a3      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e5c2:	4b0f      	ldr	r3, [pc, #60]	; (1e600 <baudrate_set+0x148>)
   1e5c4:	e7a1      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e5c6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e5ca:	e79e      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e5cc:	4b0d      	ldr	r3, [pc, #52]	; (1e604 <baudrate_set+0x14c>)
   1e5ce:	e79c      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e5d0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e5d4:	e799      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e5d6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e5da:	e796      	b.n	1e50a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e5dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e5e0:	e793      	b.n	1e50a <baudrate_set+0x52>
	switch (baudrate) {
   1e5e2:	f06f 0015 	mvn.w	r0, #21
}
   1e5e6:	4770      	bx	lr
   1e5e8:	0013b000 	.word	0x0013b000
   1e5ec:	004ea000 	.word	0x004ea000
   1e5f0:	000f4240 	.word	0x000f4240
   1e5f4:	0003d090 	.word	0x0003d090
   1e5f8:	00275000 	.word	0x00275000
   1e5fc:	0075c000 	.word	0x0075c000
   1e600:	003af000 	.word	0x003af000
   1e604:	013a9000 	.word	0x013a9000

0001e608 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e60c:	4605      	mov	r5, r0
   1e60e:	460f      	mov	r7, r1
	return dev->data;
   1e610:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e614:	f009 f9fb 	bl	27a0e <k_is_in_isr>
   1e618:	b920      	cbnz	r0, 1e624 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1e61a:	4b16      	ldr	r3, [pc, #88]	; (1e674 <uarte_nrfx_poll_out+0x6c>)
   1e61c:	781b      	ldrb	r3, [r3, #0]
   1e61e:	b1ab      	cbz	r3, 1e64c <uarte_nrfx_poll_out+0x44>
   1e620:	2300      	movs	r3, #0
   1e622:	e000      	b.n	1e626 <uarte_nrfx_poll_out+0x1e>
   1e624:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1e626:	b19b      	cbz	r3, 1e650 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   1e628:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e62c:	f3ef 8411 	mrs	r4, BASEPRI
   1e630:	f383 8812 	msr	BASEPRI_MAX, r3
   1e634:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1e638:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1e63a:	4628      	mov	r0, r5
   1e63c:	f008 fa79 	bl	26b32 <is_tx_ready>
   1e640:	b950      	cbnz	r0, 1e658 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1e642:	f384 8811 	msr	BASEPRI, r4
   1e646:	f3bf 8f6f 	isb	sy
}
   1e64a:	e7ed      	b.n	1e628 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e64c:	2301      	movs	r3, #1
   1e64e:	e7ea      	b.n	1e626 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1e650:	4628      	mov	r0, r5
   1e652:	f008 fabd 	bl	26bd0 <wait_tx_ready>
   1e656:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1e658:	4641      	mov	r1, r8
   1e65a:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   1e65e:	2201      	movs	r2, #1
   1e660:	4628      	mov	r0, r5
   1e662:	f008 fa80 	bl	26b66 <tx_start>
	__asm__ volatile(
   1e666:	f386 8811 	msr	BASEPRI, r6
   1e66a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1e66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e672:	bf00      	nop
   1e674:	20003c7c 	.word	0x20003c7c

0001e678 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1e678:	b530      	push	{r4, r5, lr}
   1e67a:	b089      	sub	sp, #36	; 0x24
   1e67c:	4604      	mov	r4, r0
   1e67e:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e680:	f101 0012 	add.w	r0, r1, #18
   1e684:	f001 fd7e 	bl	20184 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e688:	4b1d      	ldr	r3, [pc, #116]	; (1e700 <endtx_stoptx_ppi_init+0x88>)
   1e68a:	4298      	cmp	r0, r3
   1e68c:	d112      	bne.n	1e6b4 <endtx_stoptx_ppi_init+0x3c>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e68e:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e690:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1e694:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e696:	4a1b      	ldr	r2, [pc, #108]	; (1e704 <endtx_stoptx_ppi_init+0x8c>)
   1e698:	33a2      	adds	r3, #162	; 0xa2
   1e69a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e69e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e6a2:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e6a4:	7ca9      	ldrb	r1, [r5, #18]
   1e6a6:	2301      	movs	r3, #1
   1e6a8:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1e6aa:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1e6ae:	2000      	movs	r0, #0
}
   1e6b0:	b009      	add	sp, #36	; 0x24
   1e6b2:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
   1e6b4:	4b14      	ldr	r3, [pc, #80]	; (1e708 <endtx_stoptx_ppi_init+0x90>)
   1e6b6:	9306      	str	r3, [sp, #24]
   1e6b8:	2300      	movs	r3, #0
   1e6ba:	f8ad 3005 	strh.w	r3, [sp, #5]
   1e6be:	f88d 3007 	strb.w	r3, [sp, #7]
   1e6c2:	2202      	movs	r2, #2
   1e6c4:	f88d 2004 	strb.w	r2, [sp, #4]
   1e6c8:	f88d 3006 	strb.w	r3, [sp, #6]
   1e6cc:	9a01      	ldr	r2, [sp, #4]
   1e6ce:	9205      	str	r2, [sp, #20]
   1e6d0:	461a      	mov	r2, r3
   1e6d2:	f363 0200 	bfi	r2, r3, #0, #1
   1e6d6:	f363 0241 	bfi	r2, r3, #1, #1
   1e6da:	f363 0282 	bfi	r2, r3, #2, #1
   1e6de:	f363 02c5 	bfi	r2, r3, #3, #3
   1e6e2:	2101      	movs	r1, #1
   1e6e4:	f361 1288 	bfi	r2, r1, #6, #3
   1e6e8:	2108      	movs	r1, #8
   1e6ea:	f361 2252 	bfi	r2, r1, #9, #10
   1e6ee:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1e6f2:	4906      	ldr	r1, [pc, #24]	; (1e70c <endtx_stoptx_ppi_init+0x94>)
   1e6f4:	a802      	add	r0, sp, #8
   1e6f6:	f005 fc29 	bl	23f4c <z_log_msg2_finalize>
		return -EIO;
   1e6fa:	f06f 0004 	mvn.w	r0, #4
   1e6fe:	e7d7      	b.n	1e6b0 <endtx_stoptx_ppi_init+0x38>
   1e700:	0bad0000 	.word	0x0bad0000
   1e704:	4001f000 	.word	0x4001f000
   1e708:	0002aac0 	.word	0x0002aac0
   1e70c:	0002893c 	.word	0x0002893c

0001e710 <random_byte_get>:
	__asm__ volatile(
   1e710:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e714:	f3ef 8211 	mrs	r2, BASEPRI
   1e718:	f383 8812 	msr	BASEPRI_MAX, r3
   1e71c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e720:	4b09      	ldr	r3, [pc, #36]	; (1e748 <random_byte_get+0x38>)
   1e722:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e724:	b16b      	cbz	r3, 1e742 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e726:	4b09      	ldr	r3, [pc, #36]	; (1e74c <random_byte_get+0x3c>)
   1e728:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e72c:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e72e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1e732:	2100      	movs	r1, #0
   1e734:	6019      	str	r1, [r3, #0]
   1e736:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1e738:	f382 8811 	msr	BASEPRI, r2
   1e73c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e740:	4770      	bx	lr
	int retval = -EAGAIN;
   1e742:	f06f 000a 	mvn.w	r0, #10
   1e746:	e7f7      	b.n	1e738 <random_byte_get+0x28>
   1e748:	4000d100 	.word	0x4000d100
   1e74c:	4000d000 	.word	0x4000d000

0001e750 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e754:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1e756:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e75a:	78c5      	ldrb	r5, [r0, #3]
   1e75c:	462f      	mov	r7, r5
	__asm__ volatile(
   1e75e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e762:	f3ef 8811 	mrs	r8, BASEPRI
   1e766:	f383 8812 	msr	BASEPRI_MAX, r3
   1e76a:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e76e:	7800      	ldrb	r0, [r0, #0]
   1e770:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e772:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1e776:	ebac 0c00 	sub.w	ip, ip, r0
   1e77a:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1e77e:	4562      	cmp	r2, ip
   1e780:	d901      	bls.n	1e786 <rng_pool_get+0x36>
		len = available;
   1e782:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e786:	1883      	adds	r3, r0, r2
   1e788:	402b      	ands	r3, r5
   1e78a:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1e78c:	f388 8811 	msr	BASEPRI, r8
   1e790:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1e794:	460b      	mov	r3, r1
}
   1e796:	e006      	b.n	1e7a6 <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1e798:	1932      	adds	r2, r6, r4
   1e79a:	7952      	ldrb	r2, [r2, #5]
   1e79c:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1e7a0:	3401      	adds	r4, #1
   1e7a2:	403c      	ands	r4, r7
	while (likely(len--)) {
   1e7a4:	462a      	mov	r2, r5
   1e7a6:	1e55      	subs	r5, r2, #1
   1e7a8:	b2ad      	uxth	r5, r5
   1e7aa:	2a00      	cmp	r2, #0
   1e7ac:	d1f4      	bne.n	1e798 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e7ae:	4570      	cmp	r0, lr
   1e7b0:	d10d      	bne.n	1e7ce <rng_pool_get+0x7e>
	__asm__ volatile(
   1e7b2:	f04f 0040 	mov.w	r0, #64	; 0x40
   1e7b6:	f3ef 8211 	mrs	r2, BASEPRI
   1e7ba:	f380 8812 	msr	BASEPRI_MAX, r0
   1e7be:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e7c2:	7830      	ldrb	r0, [r6, #0]
   1e7c4:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1e7c6:	f382 8811 	msr	BASEPRI, r2
   1e7ca:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e7ce:	1a5b      	subs	r3, r3, r1
   1e7d0:	b298      	uxth	r0, r3
	available = available - len;
   1e7d2:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1e7d6:	7933      	ldrb	r3, [r6, #4]
   1e7d8:	4563      	cmp	r3, ip
   1e7da:	d302      	bcc.n	1e7e2 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e7dc:	4b02      	ldr	r3, [pc, #8]	; (1e7e8 <rng_pool_get+0x98>)
   1e7de:	2201      	movs	r2, #1
   1e7e0:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e7e6:	bf00      	nop
   1e7e8:	4000d000 	.word	0x4000d000

0001e7ec <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7ee:	460d      	mov	r5, r1
   1e7f0:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e7f2:	f013 0f01 	tst.w	r3, #1
   1e7f6:	d103      	bne.n	1e800 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e7f8:	4822      	ldr	r0, [pc, #136]	; (1e884 <entropy_nrf5_get_entropy_isr+0x98>)
   1e7fa:	f7ff ffa9 	bl	1e750 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1e800:	b90a      	cbnz	r2, 1e806 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   1e802:	4620      	mov	r0, r4
   1e804:	e7fb      	b.n	1e7fe <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1e806:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e80a:	f3ef 8611 	mrs	r6, BASEPRI
   1e80e:	f383 8812 	msr	BASEPRI_MAX, r3
   1e812:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e816:	200d      	movs	r0, #13
   1e818:	f7f6 ffe4 	bl	157e4 <arch_irq_is_enabled>
   1e81c:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e81e:	200d      	movs	r0, #13
   1e820:	f7f6 ffcc 	bl	157bc <arch_irq_disable>
	__asm__ volatile(
   1e824:	f386 8811 	msr	BASEPRI, r6
   1e828:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e82c:	4b16      	ldr	r3, [pc, #88]	; (1e888 <entropy_nrf5_get_entropy_isr+0x9c>)
   1e82e:	2200      	movs	r2, #0
   1e830:	601a      	str	r2, [r3, #0]
   1e832:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e834:	4b15      	ldr	r3, [pc, #84]	; (1e88c <entropy_nrf5_get_entropy_isr+0xa0>)
   1e836:	2201      	movs	r2, #1
   1e838:	601a      	str	r2, [r3, #0]
   1e83a:	4b15      	ldr	r3, [pc, #84]	; (1e890 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e83c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e840:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e844:	4626      	mov	r6, r4
   1e846:	e004      	b.n	1e852 <entropy_nrf5_get_entropy_isr+0x66>
  __ASM volatile ("dsb 0xF":::"memory");
   1e848:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e84c:	bf20      	wfe
				__SEV();
   1e84e:	bf40      	sev
				__WFE();
   1e850:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e852:	4b0d      	ldr	r3, [pc, #52]	; (1e888 <entropy_nrf5_get_entropy_isr+0x9c>)
   1e854:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1e856:	2b00      	cmp	r3, #0
   1e858:	d0f6      	beq.n	1e848 <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   1e85a:	f7ff ff59 	bl	1e710 <random_byte_get>
   1e85e:	4b0c      	ldr	r3, [pc, #48]	; (1e890 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e864:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1e868:	2800      	cmp	r0, #0
   1e86a:	db02      	blt.n	1e872 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1e86c:	3e01      	subs	r6, #1
   1e86e:	b2b6      	uxth	r6, r6
   1e870:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1e872:	2e00      	cmp	r6, #0
   1e874:	d1ed      	bne.n	1e852 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1e876:	2f00      	cmp	r7, #0
   1e878:	d0c3      	beq.n	1e802 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1e87a:	200d      	movs	r0, #13
   1e87c:	f7f6 ff8e 	bl	1579c <arch_irq_enable>
   1e880:	e7bf      	b.n	1e802 <entropy_nrf5_get_entropy_isr+0x16>
   1e882:	bf00      	nop
   1e884:	20002bdc 	.word	0x20002bdc
   1e888:	4000d100 	.word	0x4000d100
   1e88c:	4000d000 	.word	0x4000d000
   1e890:	e000e100 	.word	0xe000e100

0001e894 <isr>:
{
   1e894:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e896:	f7ff ff3b 	bl	1e710 <random_byte_get>
	if (byte < 0) {
   1e89a:	2800      	cmp	r0, #0
   1e89c:	db06      	blt.n	1e8ac <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e89e:	b2c4      	uxtb	r4, r0
   1e8a0:	4621      	mov	r1, r4
   1e8a2:	480a      	ldr	r0, [pc, #40]	; (1e8cc <isr+0x38>)
   1e8a4:	f008 fa23 	bl	26cee <rng_pool_put>
	if (ret < 0) {
   1e8a8:	2800      	cmp	r0, #0
   1e8aa:	db00      	blt.n	1e8ae <isr+0x1a>
}
   1e8ac:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1e8ae:	4621      	mov	r1, r4
   1e8b0:	4807      	ldr	r0, [pc, #28]	; (1e8d0 <isr+0x3c>)
   1e8b2:	f008 fa1c 	bl	26cee <rng_pool_put>
		if (ret < 0) {
   1e8b6:	2800      	cmp	r0, #0
   1e8b8:	db03      	blt.n	1e8c2 <isr+0x2e>
   1e8ba:	4806      	ldr	r0, [pc, #24]	; (1e8d4 <isr+0x40>)
   1e8bc:	f002 fbf6 	bl	210ac <z_impl_k_sem_give>
}
   1e8c0:	e7f4      	b.n	1e8ac <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e8c2:	4b05      	ldr	r3, [pc, #20]	; (1e8d8 <isr+0x44>)
   1e8c4:	2201      	movs	r2, #1
   1e8c6:	601a      	str	r2, [r3, #0]
}
   1e8c8:	e7f7      	b.n	1e8ba <isr+0x26>
   1e8ca:	bf00      	nop
   1e8cc:	20002bdc 	.word	0x20002bdc
   1e8d0:	20002bf1 	.word	0x20002bf1
   1e8d4:	20002bc4 	.word	0x20002bc4
   1e8d8:	4000d004 	.word	0x4000d004

0001e8dc <entropy_nrf5_get_entropy>:
{
   1e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e8de:	460f      	mov	r7, r1
   1e8e0:	4614      	mov	r4, r2
	while (len) {
   1e8e2:	e002      	b.n	1e8ea <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   1e8e4:	1b64      	subs	r4, r4, r5
   1e8e6:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e8e8:	442f      	add	r7, r5
	while (len) {
   1e8ea:	b1e4      	cbz	r4, 1e926 <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   1e8ec:	4e0f      	ldr	r6, [pc, #60]	; (1e92c <entropy_nrf5_get_entropy+0x50>)
   1e8ee:	f04f 32ff 	mov.w	r2, #4294967295
   1e8f2:	f04f 33ff 	mov.w	r3, #4294967295
   1e8f6:	4630      	mov	r0, r6
   1e8f8:	f002 fc00 	bl	210fc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e8fc:	4622      	mov	r2, r4
   1e8fe:	4639      	mov	r1, r7
   1e900:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1e904:	f7ff ff24 	bl	1e750 <rng_pool_get>
   1e908:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1e90a:	4630      	mov	r0, r6
   1e90c:	f002 fbce 	bl	210ac <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e910:	2d00      	cmp	r5, #0
   1e912:	d1e7      	bne.n	1e8e4 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1e914:	f04f 32ff 	mov.w	r2, #4294967295
   1e918:	f04f 33ff 	mov.w	r3, #4294967295
   1e91c:	f106 0018 	add.w	r0, r6, #24
   1e920:	f002 fbec 	bl	210fc <z_impl_k_sem_take>
			continue;
   1e924:	e7e1      	b.n	1e8ea <entropy_nrf5_get_entropy+0xe>
}
   1e926:	2000      	movs	r0, #0
   1e928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e92a:	bf00      	nop
   1e92c:	20002bac 	.word	0x20002bac

0001e930 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e930:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e932:	4c18      	ldr	r4, [pc, #96]	; (1e994 <entropy_nrf5_init+0x64>)
   1e934:	2201      	movs	r2, #1
   1e936:	4611      	mov	r1, r2
   1e938:	4620      	mov	r0, r4
   1e93a:	f009 f99e 	bl	27c7a <z_impl_k_sem_init>
   1e93e:	2201      	movs	r2, #1
   1e940:	2100      	movs	r1, #0
   1e942:	f104 0018 	add.w	r0, r4, #24
   1e946:	f009 f998 	bl	27c7a <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1e94a:	2204      	movs	r2, #4
   1e94c:	2108      	movs	r1, #8
   1e94e:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1e952:	f008 f9e0 	bl	26d16 <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1e956:	220c      	movs	r2, #12
   1e958:	2110      	movs	r1, #16
   1e95a:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e95e:	f008 f9da 	bl	26d16 <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e962:	4b0d      	ldr	r3, [pc, #52]	; (1e998 <entropy_nrf5_init+0x68>)
   1e964:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e968:	f022 0201 	bic.w	r2, r2, #1
   1e96c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e970:	4a0a      	ldr	r2, [pc, #40]	; (1e99c <entropy_nrf5_init+0x6c>)
   1e972:	2400      	movs	r4, #0
   1e974:	6014      	str	r4, [r2, #0]
   1e976:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1e978:	2101      	movs	r1, #1
   1e97a:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e97e:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e980:	4622      	mov	r2, r4
   1e982:	200d      	movs	r0, #13
   1e984:	f7f6 ff3c 	bl	15800 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e988:	200d      	movs	r0, #13
   1e98a:	f7f6 ff07 	bl	1579c <arch_irq_enable>

	return 0;
}
   1e98e:	4620      	mov	r0, r4
   1e990:	bd10      	pop	{r4, pc}
   1e992:	bf00      	nop
   1e994:	20002bac 	.word	0x20002bac
   1e998:	4000d000 	.word	0x4000d000
   1e99c:	4000d100 	.word	0x4000d100

0001e9a0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e9a0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1e9a4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e9a8:	4b01      	ldr	r3, [pc, #4]	; (1e9b0 <set_comparator+0x10>)
   1e9aa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1e9ae:	4770      	bx	lr
   1e9b0:	40011000 	.word	0x40011000

0001e9b4 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1e9b4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e9b8:	4b01      	ldr	r3, [pc, #4]	; (1e9c0 <get_comparator+0xc>)
   1e9ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1e9be:	4770      	bx	lr
   1e9c0:	40011000 	.word	0x40011000

0001e9c4 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e9c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e9c8:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e9ca:	4a02      	ldr	r2, [pc, #8]	; (1e9d4 <event_enable+0x10>)
   1e9cc:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1e9d0:	4770      	bx	lr
   1e9d2:	bf00      	nop
   1e9d4:	40011000 	.word	0x40011000

0001e9d8 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e9d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e9dc:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e9de:	4a02      	ldr	r2, [pc, #8]	; (1e9e8 <event_disable+0x10>)
   1e9e0:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1e9e4:	4770      	bx	lr
   1e9e6:	bf00      	nop
   1e9e8:	40011000 	.word	0x40011000

0001e9ec <counter>:
     return p_reg->COUNTER;
   1e9ec:	4b01      	ldr	r3, [pc, #4]	; (1e9f4 <counter+0x8>)
   1e9ee:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1e9f2:	4770      	bx	lr
   1e9f4:	40011000 	.word	0x40011000

0001e9f8 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1e9f8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e9fa:	2301      	movs	r3, #1
   1e9fc:	4083      	lsls	r3, r0
   1e9fe:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ea00:	4a10      	ldr	r2, [pc, #64]	; (1ea44 <compare_int_lock+0x4c>)
   1ea02:	f3bf 8f5b 	dmb	ish
   1ea06:	e852 1f00 	ldrex	r1, [r2]
   1ea0a:	ea01 0c04 	and.w	ip, r1, r4
   1ea0e:	e842 ce00 	strex	lr, ip, [r2]
   1ea12:	f1be 0f00 	cmp.w	lr, #0
   1ea16:	d1f6      	bne.n	1ea06 <compare_int_lock+0xe>
   1ea18:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ea1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ea20:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1ea24:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1ea28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1ea2c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1ea30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ea34:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1ea38:	420b      	tst	r3, r1
}
   1ea3a:	bf14      	ite	ne
   1ea3c:	2001      	movne	r0, #1
   1ea3e:	2000      	moveq	r0, #0
   1ea40:	bd10      	pop	{r4, pc}
   1ea42:	bf00      	nop
   1ea44:	20002c04 	.word	0x20002c04

0001ea48 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1ea48:	b570      	push	{r4, r5, r6, lr}
   1ea4a:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1ea4c:	f008 f97f 	bl	26d4e <full_int_lock>
   1ea50:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1ea52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1ea56:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1ea58:	4a17      	ldr	r2, [pc, #92]	; (1eab8 <channel_processing_check_and_clear+0x70>)
   1ea5a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1ea5e:	4213      	tst	r3, r2
   1ea60:	d105      	bne.n	1ea6e <channel_processing_check_and_clear+0x26>
	bool result = false;
   1ea62:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1ea64:	4628      	mov	r0, r5
   1ea66:	f008 f976 	bl	26d56 <full_int_unlock>

	return result;
}
   1ea6a:	4630      	mov	r0, r6
   1ea6c:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1ea6e:	2301      	movs	r3, #1
   1ea70:	40a3      	lsls	r3, r4
   1ea72:	43db      	mvns	r3, r3
   1ea74:	4a11      	ldr	r2, [pc, #68]	; (1eabc <channel_processing_check_and_clear+0x74>)
   1ea76:	f3bf 8f5b 	dmb	ish
   1ea7a:	e852 1f00 	ldrex	r1, [r2]
   1ea7e:	ea01 0003 	and.w	r0, r1, r3
   1ea82:	e842 0600 	strex	r6, r0, [r2]
   1ea86:	2e00      	cmp	r6, #0
   1ea88:	d1f7      	bne.n	1ea7a <channel_processing_check_and_clear+0x32>
   1ea8a:	f3bf 8f5b 	dmb	ish
   1ea8e:	b959      	cbnz	r1, 1eaa8 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1ea90:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1ea94:	009b      	lsls	r3, r3, #2
   1ea96:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ea98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ea9c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1eaa0:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1eaa2:	b113      	cbz	r3, 1eaaa <channel_processing_check_and_clear+0x62>
   1eaa4:	2301      	movs	r3, #1
   1eaa6:	e000      	b.n	1eaaa <channel_processing_check_and_clear+0x62>
   1eaa8:	2301      	movs	r3, #1
		if (result) {
   1eaaa:	461e      	mov	r6, r3
   1eaac:	2b00      	cmp	r3, #0
   1eaae:	d0d9      	beq.n	1ea64 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1eab0:	4620      	mov	r0, r4
   1eab2:	f008 f93d 	bl	26d30 <event_clear>
   1eab6:	e7d5      	b.n	1ea64 <channel_processing_check_and_clear+0x1c>
   1eab8:	40011000 	.word	0x40011000
   1eabc:	20002c00 	.word	0x20002c00

0001eac0 <compare_int_unlock>:
	if (key) {
   1eac0:	b901      	cbnz	r1, 1eac4 <compare_int_unlock+0x4>
}
   1eac2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1eac4:	2301      	movs	r3, #1
   1eac6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eac8:	4a11      	ldr	r2, [pc, #68]	; (1eb10 <compare_int_unlock+0x50>)
   1eaca:	f3bf 8f5b 	dmb	ish
   1eace:	e852 1f00 	ldrex	r1, [r2]
   1ead2:	4319      	orrs	r1, r3
   1ead4:	e842 1c00 	strex	ip, r1, [r2]
   1ead8:	f1bc 0f00 	cmp.w	ip, #0
   1eadc:	d1f7      	bne.n	1eace <compare_int_unlock+0xe>
   1eade:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1eae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1eae6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1eae8:	4a0a      	ldr	r2, [pc, #40]	; (1eb14 <compare_int_unlock+0x54>)
   1eaea:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eaee:	f3bf 8f5b 	dmb	ish
   1eaf2:	4b09      	ldr	r3, [pc, #36]	; (1eb18 <compare_int_unlock+0x58>)
   1eaf4:	681b      	ldr	r3, [r3, #0]
   1eaf6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1eafa:	fa23 f000 	lsr.w	r0, r3, r0
   1eafe:	f010 0f01 	tst.w	r0, #1
   1eb02:	d0de      	beq.n	1eac2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1eb04:	4b05      	ldr	r3, [pc, #20]	; (1eb1c <compare_int_unlock+0x5c>)
   1eb06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1eb0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1eb0e:	e7d8      	b.n	1eac2 <compare_int_unlock+0x2>
   1eb10:	20002c04 	.word	0x20002c04
   1eb14:	40011000 	.word	0x40011000
   1eb18:	20002c00 	.word	0x20002c00
   1eb1c:	e000e100 	.word	0xe000e100

0001eb20 <sys_clock_timeout_handler>:
{
   1eb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb22:	4607      	mov	r7, r0
   1eb24:	4614      	mov	r4, r2
   1eb26:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1eb28:	4610      	mov	r0, r2
   1eb2a:	4619      	mov	r1, r3
   1eb2c:	f008 f90c 	bl	26d48 <absolute_time_to_cc>
   1eb30:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1eb32:	4b15      	ldr	r3, [pc, #84]	; (1eb88 <sys_clock_timeout_handler+0x68>)
   1eb34:	681a      	ldr	r2, [r3, #0]
   1eb36:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1eb38:	601c      	str	r4, [r3, #0]
   1eb3a:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1eb3c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1eb40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1eb44:	d308      	bcc.n	1eb58 <sys_clock_timeout_handler+0x38>
	return false;
   1eb46:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1eb48:	f003 f9e8 	bl	21f1c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1eb4c:	4638      	mov	r0, r7
   1eb4e:	f7ff ff31 	bl	1e9b4 <get_comparator>
   1eb52:	42a8      	cmp	r0, r5
   1eb54:	d00c      	beq.n	1eb70 <sys_clock_timeout_handler+0x50>
}
   1eb56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1eb58:	4b0c      	ldr	r3, [pc, #48]	; (1eb8c <sys_clock_timeout_handler+0x6c>)
   1eb5a:	6819      	ldr	r1, [r3, #0]
   1eb5c:	0a0b      	lsrs	r3, r1, #8
   1eb5e:	060a      	lsls	r2, r1, #24
   1eb60:	1952      	adds	r2, r2, r5
   1eb62:	f143 0300 	adc.w	r3, r3, #0
   1eb66:	490a      	ldr	r1, [pc, #40]	; (1eb90 <sys_clock_timeout_handler+0x70>)
   1eb68:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1eb6c:	2401      	movs	r4, #1
   1eb6e:	e7eb      	b.n	1eb48 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1eb70:	b11c      	cbz	r4, 1eb7a <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1eb72:	4638      	mov	r0, r7
   1eb74:	f7ff ff26 	bl	1e9c4 <event_enable>
}
   1eb78:	e7ed      	b.n	1eb56 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1eb7a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1eb7e:	4638      	mov	r0, r7
   1eb80:	f7ff ff0e 	bl	1e9a0 <set_comparator>
   1eb84:	e7f5      	b.n	1eb72 <sys_clock_timeout_handler+0x52>
   1eb86:	bf00      	nop
   1eb88:	20001c28 	.word	0x20001c28
   1eb8c:	20002c08 	.word	0x20002c08
   1eb90:	20001c10 	.word	0x20001c10

0001eb94 <z_nrf_rtc_timer_read>:
{
   1eb94:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1eb96:	4b0d      	ldr	r3, [pc, #52]	; (1ebcc <z_nrf_rtc_timer_read+0x38>)
   1eb98:	681b      	ldr	r3, [r3, #0]
   1eb9a:	0a1d      	lsrs	r5, r3, #8
   1eb9c:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1eb9e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1eba2:	f7ff ff23 	bl	1e9ec <counter>
   1eba6:	4603      	mov	r3, r0
	val += cntr;
   1eba8:	1820      	adds	r0, r4, r0
   1ebaa:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1ebae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1ebb2:	d20a      	bcs.n	1ebca <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1ebb4:	4b06      	ldr	r3, [pc, #24]	; (1ebd0 <z_nrf_rtc_timer_read+0x3c>)
   1ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ebba:	4299      	cmp	r1, r3
   1ebbc:	bf08      	it	eq
   1ebbe:	4290      	cmpeq	r0, r2
   1ebc0:	d203      	bcs.n	1ebca <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1ebc2:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1ebc6:	f141 0100 	adc.w	r1, r1, #0
}
   1ebca:	bd38      	pop	{r3, r4, r5, pc}
   1ebcc:	20002c08 	.word	0x20002c08
   1ebd0:	20001c10 	.word	0x20001c10

0001ebd4 <compare_set_nolocks>:
{
   1ebd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ebd8:	4606      	mov	r6, r0
   1ebda:	4614      	mov	r4, r2
   1ebdc:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1ebde:	4610      	mov	r0, r2
   1ebe0:	4619      	mov	r1, r3
   1ebe2:	f008 f8b1 	bl	26d48 <absolute_time_to_cc>
   1ebe6:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1ebe8:	f7ff ffd4 	bl	1eb94 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1ebec:	42a9      	cmp	r1, r5
   1ebee:	bf08      	it	eq
   1ebf0:	42a0      	cmpeq	r0, r4
   1ebf2:	d21e      	bcs.n	1ec32 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1ebf4:	ebb4 0800 	subs.w	r8, r4, r0
   1ebf8:	eb65 0901 	sbc.w	r9, r5, r1
   1ebfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1ec00:	2300      	movs	r3, #0
   1ec02:	454b      	cmp	r3, r9
   1ec04:	bf08      	it	eq
   1ec06:	4542      	cmpeq	r2, r8
   1ec08:	d32e      	bcc.n	1ec68 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1ec0a:	4b19      	ldr	r3, [pc, #100]	; (1ec70 <compare_set_nolocks+0x9c>)
   1ec0c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1ec10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1ec14:	42ab      	cmp	r3, r5
   1ec16:	bf08      	it	eq
   1ec18:	42a2      	cmpeq	r2, r4
   1ec1a:	d018      	beq.n	1ec4e <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1ec1c:	4639      	mov	r1, r7
   1ec1e:	4630      	mov	r0, r6
   1ec20:	f008 f89c 	bl	26d5c <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1ec24:	4639      	mov	r1, r7
   1ec26:	f008 f87f 	bl	26d28 <counter_sub>
   1ec2a:	1824      	adds	r4, r4, r0
   1ec2c:	f145 0500 	adc.w	r5, r5, #0
   1ec30:	e00d      	b.n	1ec4e <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1ec32:	2301      	movs	r3, #1
   1ec34:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ec36:	4a0f      	ldr	r2, [pc, #60]	; (1ec74 <compare_set_nolocks+0xa0>)
   1ec38:	f3bf 8f5b 	dmb	ish
   1ec3c:	e852 1f00 	ldrex	r1, [r2]
   1ec40:	4319      	orrs	r1, r3
   1ec42:	e842 1000 	strex	r0, r1, [r2]
   1ec46:	2800      	cmp	r0, #0
   1ec48:	d1f8      	bne.n	1ec3c <compare_set_nolocks+0x68>
   1ec4a:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1ec4e:	4b08      	ldr	r3, [pc, #32]	; (1ec70 <compare_set_nolocks+0x9c>)
   1ec50:	0132      	lsls	r2, r6, #4
   1ec52:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1ec56:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1ec5a:	9908      	ldr	r1, [sp, #32]
   1ec5c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1ec5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ec60:	6073      	str	r3, [r6, #4]
	return ret;
   1ec62:	2000      	movs	r0, #0
}
   1ec64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1ec68:	f06f 0015 	mvn.w	r0, #21
   1ec6c:	e7fa      	b.n	1ec64 <compare_set_nolocks+0x90>
   1ec6e:	bf00      	nop
   1ec70:	20001c18 	.word	0x20001c18
   1ec74:	20002c00 	.word	0x20002c00

0001ec78 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   1ec78:	b530      	push	{r4, r5, lr}
   1ec7a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1ec7c:	2300      	movs	r3, #0
   1ec7e:	4a1e      	ldr	r2, [pc, #120]	; (1ecf8 <sys_clock_driver_init+0x80>)
   1ec80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ec84:	2b00      	cmp	r3, #0
   1ec86:	dd25      	ble.n	1ecd4 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
   1ec88:	4c1b      	ldr	r4, [pc, #108]	; (1ecf8 <sys_clock_driver_init+0x80>)
   1ec8a:	2502      	movs	r5, #2
   1ec8c:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ec90:	4b1a      	ldr	r3, [pc, #104]	; (1ecfc <sys_clock_driver_init+0x84>)
   1ec92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ec96:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1ec9a:	2200      	movs	r2, #0
   1ec9c:	2101      	movs	r1, #1
   1ec9e:	2011      	movs	r0, #17
   1eca0:	f7f6 fdae 	bl	15800 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1eca4:	2011      	movs	r0, #17
   1eca6:	f7f6 fd79 	bl	1579c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ecaa:	2301      	movs	r3, #1
   1ecac:	4a14      	ldr	r2, [pc, #80]	; (1ed00 <sys_clock_driver_init+0x88>)
   1ecae:	6013      	str	r3, [r2, #0]
   1ecb0:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1ecb2:	4a14      	ldr	r2, [pc, #80]	; (1ed04 <sys_clock_driver_init+0x8c>)
   1ecb4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1ecb6:	2400      	movs	r4, #0
   1ecb8:	9401      	str	r4, [sp, #4]
   1ecba:	4b13      	ldr	r3, [pc, #76]	; (1ed08 <sys_clock_driver_init+0x90>)
   1ecbc:	9300      	str	r3, [sp, #0]
   1ecbe:	4a13      	ldr	r2, [pc, #76]	; (1ed0c <sys_clock_driver_init+0x94>)
   1ecc0:	2300      	movs	r3, #0
   1ecc2:	4620      	mov	r0, r4
   1ecc4:	f008 f885 	bl	26dd2 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1ecc8:	4628      	mov	r0, r5
   1ecca:	f7fe ffaf 	bl	1dc2c <z_nrf_clock_control_lf_on>

	return 0;
}
   1ecce:	4620      	mov	r0, r4
   1ecd0:	b003      	add	sp, #12
   1ecd2:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ecd4:	4a0e      	ldr	r2, [pc, #56]	; (1ed10 <sys_clock_driver_init+0x98>)
   1ecd6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1ecda:	f04f 30ff 	mov.w	r0, #4294967295
   1ecde:	f04f 31ff 	mov.w	r1, #4294967295
   1ece2:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1ece6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ecea:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1ecec:	4902      	ldr	r1, [pc, #8]	; (1ecf8 <sys_clock_driver_init+0x80>)
   1ecee:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1ecf2:	3301      	adds	r3, #1
   1ecf4:	e7c6      	b.n	1ec84 <sys_clock_driver_init+0xc>
   1ecf6:	bf00      	nop
   1ecf8:	40011000 	.word	0x40011000
   1ecfc:	e000e100 	.word	0xe000e100
   1ed00:	40011008 	.word	0x40011008
   1ed04:	20002c04 	.word	0x20002c04
   1ed08:	0001eb21 	.word	0x0001eb21
   1ed0c:	007fffff 	.word	0x007fffff
   1ed10:	20001c18 	.word	0x20001c18

0001ed14 <process_channel>:
{
   1ed14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ed18:	b082      	sub	sp, #8
   1ed1a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1ed1c:	f7ff fe94 	bl	1ea48 <channel_processing_check_and_clear>
   1ed20:	b910      	cbnz	r0, 1ed28 <process_channel+0x14>
}
   1ed22:	b002      	add	sp, #8
   1ed24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1ed28:	f7ff ff34 	bl	1eb94 <z_nrf_rtc_timer_read>
   1ed2c:	4606      	mov	r6, r0
   1ed2e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1ed30:	f008 f80d 	bl	26d4e <full_int_lock>
   1ed34:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1ed36:	4b13      	ldr	r3, [pc, #76]	; (1ed84 <process_channel+0x70>)
   1ed38:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1ed3c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1ed40:	454f      	cmp	r7, r9
   1ed42:	bf08      	it	eq
   1ed44:	4546      	cmpeq	r6, r8
   1ed46:	d20b      	bcs.n	1ed60 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1ed48:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1ed4a:	4650      	mov	r0, sl
   1ed4c:	f008 f803 	bl	26d56 <full_int_unlock>
		if (handler) {
   1ed50:	2e00      	cmp	r6, #0
   1ed52:	d0e6      	beq.n	1ed22 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1ed54:	9500      	str	r5, [sp, #0]
   1ed56:	4642      	mov	r2, r8
   1ed58:	464b      	mov	r3, r9
   1ed5a:	4620      	mov	r0, r4
   1ed5c:	47b0      	blx	r6
}
   1ed5e:	e7e0      	b.n	1ed22 <process_channel+0xe>
			handler = cc_data[chan].callback;
   1ed60:	4a08      	ldr	r2, [pc, #32]	; (1ed84 <process_channel+0x70>)
   1ed62:	0123      	lsls	r3, r4, #4
   1ed64:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1ed68:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1ed6a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1ed6c:	2000      	movs	r0, #0
   1ed6e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1ed70:	f04f 32ff 	mov.w	r2, #4294967295
   1ed74:	f04f 33ff 	mov.w	r3, #4294967295
   1ed78:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1ed7c:	4620      	mov	r0, r4
   1ed7e:	f7ff fe2b 	bl	1e9d8 <event_disable>
   1ed82:	e7e2      	b.n	1ed4a <process_channel+0x36>
   1ed84:	20001c18 	.word	0x20001c18

0001ed88 <rtc_nrf_isr>:
{
   1ed88:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1ed8a:	4b0d      	ldr	r3, [pc, #52]	; (1edc0 <rtc_nrf_isr+0x38>)
   1ed8c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1ed90:	f013 0f02 	tst.w	r3, #2
   1ed94:	d00a      	beq.n	1edac <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ed96:	4b0b      	ldr	r3, [pc, #44]	; (1edc4 <rtc_nrf_isr+0x3c>)
   1ed98:	681b      	ldr	r3, [r3, #0]
   1ed9a:	b13b      	cbz	r3, 1edac <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1ed9c:	4b09      	ldr	r3, [pc, #36]	; (1edc4 <rtc_nrf_isr+0x3c>)
   1ed9e:	2200      	movs	r2, #0
   1eda0:	601a      	str	r2, [r3, #0]
   1eda2:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
   1eda4:	4a08      	ldr	r2, [pc, #32]	; (1edc8 <rtc_nrf_isr+0x40>)
   1eda6:	6813      	ldr	r3, [r2, #0]
   1eda8:	3301      	adds	r3, #1
   1edaa:	6013      	str	r3, [r2, #0]
{
   1edac:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1edae:	2c00      	cmp	r4, #0
   1edb0:	dd00      	ble.n	1edb4 <rtc_nrf_isr+0x2c>
}
   1edb2:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1edb4:	4620      	mov	r0, r4
   1edb6:	f7ff ffad 	bl	1ed14 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1edba:	3401      	adds	r4, #1
   1edbc:	e7f7      	b.n	1edae <rtc_nrf_isr+0x26>
   1edbe:	bf00      	nop
   1edc0:	40011000 	.word	0x40011000
   1edc4:	40011104 	.word	0x40011104
   1edc8:	20002c08 	.word	0x20002c08

0001edcc <sys_clock_set_timeout>:
{
   1edcc:	b510      	push	{r4, lr}
   1edce:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1edd0:	f1b0 3fff 	cmp.w	r0, #4294967295
   1edd4:	d007      	beq.n	1ede6 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1edd6:	1e44      	subs	r4, r0, #1
   1edd8:	2c00      	cmp	r4, #0
   1edda:	dd07      	ble.n	1edec <sys_clock_set_timeout+0x20>
   1eddc:	4b11      	ldr	r3, [pc, #68]	; (1ee24 <sys_clock_set_timeout+0x58>)
   1edde:	429c      	cmp	r4, r3
   1ede0:	dd05      	ble.n	1edee <sys_clock_set_timeout+0x22>
   1ede2:	4c11      	ldr	r4, [pc, #68]	; (1ee28 <sys_clock_set_timeout+0x5c>)
   1ede4:	e003      	b.n	1edee <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1ede6:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1edea:	e7f4      	b.n	1edd6 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1edec:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1edee:	f7ff fed1 	bl	1eb94 <z_nrf_rtc_timer_read>
   1edf2:	4b0e      	ldr	r3, [pc, #56]	; (1ee2c <sys_clock_set_timeout+0x60>)
   1edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1edf8:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
   1edfa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1edfe:	d300      	bcc.n	1ee02 <sys_clock_set_timeout+0x36>
		ticks = 0;
   1ee00:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1ee02:	4404      	add	r4, r0
   1ee04:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
   1ee06:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1ee0a:	d300      	bcc.n	1ee0e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1ee0c:	4c06      	ldr	r4, [pc, #24]	; (1ee28 <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1ee0e:	2000      	movs	r0, #0
   1ee10:	9001      	str	r0, [sp, #4]
   1ee12:	4907      	ldr	r1, [pc, #28]	; (1ee30 <sys_clock_set_timeout+0x64>)
   1ee14:	9100      	str	r1, [sp, #0]
   1ee16:	1912      	adds	r2, r2, r4
   1ee18:	f143 0300 	adc.w	r3, r3, #0
   1ee1c:	f007 ffd9 	bl	26dd2 <compare_set>
}
   1ee20:	b002      	add	sp, #8
   1ee22:	bd10      	pop	{r4, pc}
   1ee24:	007ffffe 	.word	0x007ffffe
   1ee28:	007fffff 	.word	0x007fffff
   1ee2c:	20001c28 	.word	0x20001c28
   1ee30:	0001eb21 	.word	0x0001eb21

0001ee34 <sys_clock_elapsed>:
{
   1ee34:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1ee36:	f7ff fead 	bl	1eb94 <z_nrf_rtc_timer_read>
   1ee3a:	4b02      	ldr	r3, [pc, #8]	; (1ee44 <sys_clock_elapsed+0x10>)
   1ee3c:	681b      	ldr	r3, [r3, #0]
}
   1ee3e:	1ac0      	subs	r0, r0, r3
   1ee40:	bd08      	pop	{r3, pc}
   1ee42:	bf00      	nop
   1ee44:	20001c28 	.word	0x20001c28

0001ee48 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1ee48:	b508      	push	{r3, lr}
   1ee4a:	4602      	mov	r2, r0
   1ee4c:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1ee4e:	4802      	ldr	r0, [pc, #8]	; (1ee58 <multithreading_lock_acquire+0x10>)
   1ee50:	f002 f822 	bl	20e98 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1ee54:	bd08      	pop	{r3, pc}
   1ee56:	bf00      	nop
   1ee58:	2000086c 	.word	0x2000086c

0001ee5c <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1ee5c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1ee5e:	4802      	ldr	r0, [pc, #8]	; (1ee68 <multithreading_lock_release+0xc>)
   1ee60:	f002 f8a4 	bl	20fac <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1ee64:	bd08      	pop	{r3, pc}
   1ee66:	bf00      	nop
   1ee68:	2000086c 	.word	0x2000086c

0001ee6c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1ee6c:	b510      	push	{r4, lr}
   1ee6e:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1ee70:	4a03      	ldr	r2, [pc, #12]	; (1ee80 <rand_prio_low_vector_get_blocking+0x14>)
   1ee72:	6810      	ldr	r0, [r2, #0]
   1ee74:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1ee76:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ee78:	680c      	ldr	r4, [r1, #0]
   1ee7a:	4619      	mov	r1, r3
   1ee7c:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1ee7e:	bd10      	pop	{r4, pc}
   1ee80:	20002c0c 	.word	0x20002c0c

0001ee84 <sdc_assertion_handler>:
{
   1ee84:	b500      	push	{lr}
   1ee86:	b085      	sub	sp, #20
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1ee88:	9103      	str	r1, [sp, #12]
   1ee8a:	9002      	str	r0, [sp, #8]
   1ee8c:	4b08      	ldr	r3, [pc, #32]	; (1eeb0 <sdc_assertion_handler+0x2c>)
   1ee8e:	9301      	str	r3, [sp, #4]
   1ee90:	2000      	movs	r0, #0
   1ee92:	9000      	str	r0, [sp, #0]
   1ee94:	4603      	mov	r3, r0
   1ee96:	2201      	movs	r2, #1
   1ee98:	4906      	ldr	r1, [pc, #24]	; (1eeb4 <sdc_assertion_handler+0x30>)
   1ee9a:	f007 ffcc 	bl	26e36 <z_log_msg2_runtime_create>
	k_oops();
   1ee9e:	4040      	eors	r0, r0
   1eea0:	f380 8811 	msr	BASEPRI, r0
   1eea4:	f04f 0003 	mov.w	r0, #3
   1eea8:	df02      	svc	2
}
   1eeaa:	b005      	add	sp, #20
   1eeac:	f85d fb04 	ldr.w	pc, [sp], #4
   1eeb0:	0002ab60 	.word	0x0002ab60
   1eeb4:	00028924 	.word	0x00028924

0001eeb8 <host_signal>:
{
   1eeb8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1eeba:	4802      	ldr	r0, [pc, #8]	; (1eec4 <host_signal+0xc>)
   1eebc:	f002 f8f6 	bl	210ac <z_impl_k_sem_give>
}
   1eec0:	bd08      	pop	{r3, pc}
   1eec2:	bf00      	nop
   1eec4:	20000880 	.word	0x20000880

0001eec8 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1eec8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1eeca:	4803      	ldr	r0, [pc, #12]	; (1eed8 <hci_driver_init+0x10>)
   1eecc:	f7fa f824 	bl	18f18 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1eed0:	4802      	ldr	r0, [pc, #8]	; (1eedc <hci_driver_init+0x14>)
   1eed2:	f7e5 fe91 	bl	4bf8 <sdc_init>
	return err;
}
   1eed6:	bd08      	pop	{r3, pc}
   1eed8:	0002ac80 	.word	0x0002ac80
   1eedc:	0001ee85 	.word	0x0001ee85

0001eee0 <acl_handle>:
{
   1eee0:	b538      	push	{r3, r4, r5, lr}
   1eee2:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eee4:	f04f 30ff 	mov.w	r0, #4294967295
   1eee8:	f04f 31ff 	mov.w	r1, #4294967295
   1eeec:	f7ff ffac 	bl	1ee48 <multithreading_lock_acquire>
	if (!errcode) {
   1eef0:	4605      	mov	r5, r0
   1eef2:	b108      	cbz	r0, 1eef8 <acl_handle+0x18>
}
   1eef4:	4628      	mov	r0, r5
   1eef6:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1eef8:	68a0      	ldr	r0, [r4, #8]
   1eefa:	f7ee f8e9 	bl	d0d0 <sdc_hci_data_put>
   1eefe:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1ef00:	f7ff ffac 	bl	1ee5c <multithreading_lock_release>
		if (errcode) {
   1ef04:	2d00      	cmp	r5, #0
   1ef06:	d0f5      	beq.n	1eef4 <acl_handle+0x14>
   1ef08:	4801      	ldr	r0, [pc, #4]	; (1ef10 <acl_handle+0x30>)
   1ef0a:	f002 f8cf 	bl	210ac <z_impl_k_sem_give>
}
   1ef0e:	e7f1      	b.n	1eef4 <acl_handle+0x14>
   1ef10:	20000880 	.word	0x20000880

0001ef14 <cmd_handle>:
{
   1ef14:	b538      	push	{r3, r4, r5, lr}
   1ef16:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ef18:	f04f 30ff 	mov.w	r0, #4294967295
   1ef1c:	f04f 31ff 	mov.w	r1, #4294967295
   1ef20:	f7ff ff92 	bl	1ee48 <multithreading_lock_acquire>
	if (!errcode) {
   1ef24:	4604      	mov	r4, r0
   1ef26:	b110      	cbz	r0, 1ef2e <cmd_handle+0x1a>
	if (errcode) {
   1ef28:	b144      	cbz	r4, 1ef3c <cmd_handle+0x28>
}
   1ef2a:	4620      	mov	r0, r4
   1ef2c:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1ef2e:	68a8      	ldr	r0, [r5, #8]
   1ef30:	f000 fa34 	bl	1f39c <hci_internal_cmd_put>
   1ef34:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ef36:	f7ff ff91 	bl	1ee5c <multithreading_lock_release>
   1ef3a:	e7f5      	b.n	1ef28 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1ef3c:	4801      	ldr	r0, [pc, #4]	; (1ef44 <cmd_handle+0x30>)
   1ef3e:	f002 f8b5 	bl	210ac <z_impl_k_sem_give>
	return 0;
   1ef42:	e7f2      	b.n	1ef2a <cmd_handle+0x16>
   1ef44:	20000880 	.word	0x20000880

0001ef48 <rand_prio_high_vector_get>:
{
   1ef48:	b538      	push	{r3, r4, r5, lr}
   1ef4a:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ef4c:	4b07      	ldr	r3, [pc, #28]	; (1ef6c <rand_prio_high_vector_get+0x24>)
   1ef4e:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1ef50:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ef52:	685d      	ldr	r5, [r3, #4]
   1ef54:	b13d      	cbz	r5, 1ef66 <rand_prio_high_vector_get+0x1e>
   1ef56:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ef58:	2300      	movs	r3, #0
   1ef5a:	4621      	mov	r1, r4
   1ef5c:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1ef5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1ef62:	b2c0      	uxtb	r0, r0
   1ef64:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ef66:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ef6a:	e7f8      	b.n	1ef5e <rand_prio_high_vector_get+0x16>
   1ef6c:	20002c0c 	.word	0x20002c0c

0001ef70 <rand_prio_low_vector_get>:
{
   1ef70:	b538      	push	{r3, r4, r5, lr}
   1ef72:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ef74:	4b07      	ldr	r3, [pc, #28]	; (1ef94 <rand_prio_low_vector_get+0x24>)
   1ef76:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1ef78:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1ef7a:	685d      	ldr	r5, [r3, #4]
   1ef7c:	b13d      	cbz	r5, 1ef8e <rand_prio_low_vector_get+0x1e>
   1ef7e:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1ef80:	2300      	movs	r3, #0
   1ef82:	4621      	mov	r1, r4
   1ef84:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1ef86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1ef8a:	b2c0      	uxtb	r0, r0
   1ef8c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ef8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ef92:	e7f8      	b.n	1ef86 <rand_prio_low_vector_get+0x16>
   1ef94:	20002c0c 	.word	0x20002c0c

0001ef98 <event_packet_process>:
{
   1ef98:	b570      	push	{r4, r5, r6, lr}
   1ef9a:	b088      	sub	sp, #32
   1ef9c:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1ef9e:	f007 ff35 	bl	26e0c <event_packet_is_discardable>
   1efa2:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1efa4:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1efa6:	461d      	mov	r5, r3
   1efa8:	b18b      	cbz	r3, 1efce <event_packet_process+0x36>
   1efaa:	2200      	movs	r2, #0
   1efac:	2300      	movs	r3, #0
   1efae:	4629      	mov	r1, r5
   1efb0:	f7f7 fe2c 	bl	16c0c <bt_buf_get_evt>
	if (!evt_buf) {
   1efb4:	4606      	mov	r6, r0
   1efb6:	b178      	cbz	r0, 1efd8 <event_packet_process+0x40>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1efb8:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1efba:	3202      	adds	r2, #2
   1efbc:	4621      	mov	r1, r4
   1efbe:	3008      	adds	r0, #8
   1efc0:	f007 fb34 	bl	2662c <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1efc4:	4630      	mov	r0, r6
   1efc6:	f7f9 ff41 	bl	18e4c <bt_recv>
}
   1efca:	b008      	add	sp, #32
   1efcc:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1efce:	f04f 32ff 	mov.w	r2, #4294967295
   1efd2:	f04f 33ff 	mov.w	r3, #4294967295
   1efd6:	e7ea      	b.n	1efae <event_packet_process+0x16>
		if (discardable) {
   1efd8:	2d00      	cmp	r5, #0
   1efda:	d1f6      	bne.n	1efca <event_packet_process+0x32>
		BT_ERR("No event buffer available");
   1efdc:	4b11      	ldr	r3, [pc, #68]	; (1f024 <event_packet_process+0x8c>)
   1efde:	9306      	str	r3, [sp, #24]
   1efe0:	2300      	movs	r3, #0
   1efe2:	f8ad 3005 	strh.w	r3, [sp, #5]
   1efe6:	f88d 3007 	strb.w	r3, [sp, #7]
   1efea:	2202      	movs	r2, #2
   1efec:	f88d 2004 	strb.w	r2, [sp, #4]
   1eff0:	f88d 3006 	strb.w	r3, [sp, #6]
   1eff4:	9a01      	ldr	r2, [sp, #4]
   1eff6:	9205      	str	r2, [sp, #20]
   1eff8:	461a      	mov	r2, r3
   1effa:	f363 0200 	bfi	r2, r3, #0, #1
   1effe:	f363 0241 	bfi	r2, r3, #1, #1
   1f002:	f363 0282 	bfi	r2, r3, #2, #1
   1f006:	f363 02c5 	bfi	r2, r3, #3, #3
   1f00a:	2101      	movs	r1, #1
   1f00c:	f361 1288 	bfi	r2, r1, #6, #3
   1f010:	2108      	movs	r1, #8
   1f012:	f361 2252 	bfi	r2, r1, #9, #10
   1f016:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1f01a:	4903      	ldr	r1, [pc, #12]	; (1f028 <event_packet_process+0x90>)
   1f01c:	a802      	add	r0, sp, #8
   1f01e:	f004 ff95 	bl	23f4c <z_log_msg2_finalize>
		return;
   1f022:	e7d2      	b.n	1efca <event_packet_process+0x32>
   1f024:	0002ab88 	.word	0x0002ab88
   1f028:	00028924 	.word	0x00028924

0001f02c <data_packet_process>:
{
   1f02c:	b530      	push	{r4, r5, lr}
   1f02e:	b089      	sub	sp, #36	; 0x24
   1f030:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1f032:	f04f 32ff 	mov.w	r2, #4294967295
   1f036:	f04f 33ff 	mov.w	r3, #4294967295
   1f03a:	2003      	movs	r0, #3
   1f03c:	f7f7 fdbc 	bl	16bb8 <bt_buf_get_rx>
	if (!data_buf) {
   1f040:	b158      	cbz	r0, 1f05a <data_packet_process+0x2e>
   1f042:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1f044:	8862      	ldrh	r2, [r4, #2]
   1f046:	3204      	adds	r2, #4
   1f048:	4621      	mov	r1, r4
   1f04a:	3008      	adds	r0, #8
   1f04c:	f007 faee 	bl	2662c <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1f050:	4628      	mov	r0, r5
   1f052:	f7f9 fefb 	bl	18e4c <bt_recv>
}
   1f056:	b009      	add	sp, #36	; 0x24
   1f058:	bd30      	pop	{r4, r5, pc}
		BT_ERR("No data buffer available");
   1f05a:	4b12      	ldr	r3, [pc, #72]	; (1f0a4 <data_packet_process+0x78>)
   1f05c:	9306      	str	r3, [sp, #24]
   1f05e:	2300      	movs	r3, #0
   1f060:	f8ad 3005 	strh.w	r3, [sp, #5]
   1f064:	f88d 3007 	strb.w	r3, [sp, #7]
   1f068:	2202      	movs	r2, #2
   1f06a:	f88d 2004 	strb.w	r2, [sp, #4]
   1f06e:	f88d 3006 	strb.w	r3, [sp, #6]
   1f072:	9a01      	ldr	r2, [sp, #4]
   1f074:	9205      	str	r2, [sp, #20]
   1f076:	461a      	mov	r2, r3
   1f078:	f363 0200 	bfi	r2, r3, #0, #1
   1f07c:	f363 0241 	bfi	r2, r3, #1, #1
   1f080:	f363 0282 	bfi	r2, r3, #2, #1
   1f084:	f363 02c5 	bfi	r2, r3, #3, #3
   1f088:	2101      	movs	r1, #1
   1f08a:	f361 1288 	bfi	r2, r1, #6, #3
   1f08e:	2108      	movs	r1, #8
   1f090:	f361 2252 	bfi	r2, r1, #9, #10
   1f094:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1f098:	4903      	ldr	r1, [pc, #12]	; (1f0a8 <data_packet_process+0x7c>)
   1f09a:	a802      	add	r0, sp, #8
   1f09c:	f004 ff56 	bl	23f4c <z_log_msg2_finalize>
		return;
   1f0a0:	e7d9      	b.n	1f056 <data_packet_process+0x2a>
   1f0a2:	bf00      	nop
   1f0a4:	0002aba4 	.word	0x0002aba4
   1f0a8:	00028924 	.word	0x00028924

0001f0ac <recv_thread>:
{
   1f0ac:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1f0ae:	2500      	movs	r5, #0
	bool received_evt = false;
   1f0b0:	462c      	mov	r4, r5
   1f0b2:	e00a      	b.n	1f0ca <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1f0b4:	4d0b      	ldr	r5, [pc, #44]	; (1f0e4 <recv_thread+0x38>)
   1f0b6:	4628      	mov	r0, r5
   1f0b8:	f007 fee5 	bl	26e86 <fetch_and_process_hci_evt>
   1f0bc:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1f0be:	4628      	mov	r0, r5
   1f0c0:	f007 fefa 	bl	26eb8 <fetch_and_process_acl_data>
   1f0c4:	4605      	mov	r5, r0
	z_impl_k_yield();
   1f0c6:	f002 fd0d 	bl	21ae4 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1f0ca:	2c00      	cmp	r4, #0
   1f0cc:	d1f2      	bne.n	1f0b4 <recv_thread+0x8>
   1f0ce:	2d00      	cmp	r5, #0
   1f0d0:	d1f0      	bne.n	1f0b4 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1f0d2:	f04f 32ff 	mov.w	r2, #4294967295
   1f0d6:	f04f 33ff 	mov.w	r3, #4294967295
   1f0da:	4803      	ldr	r0, [pc, #12]	; (1f0e8 <recv_thread+0x3c>)
   1f0dc:	f002 f80e 	bl	210fc <z_impl_k_sem_take>
   1f0e0:	e7e8      	b.n	1f0b4 <recv_thread+0x8>
   1f0e2:	bf00      	nop
   1f0e4:	20002c10 	.word	0x20002c10
   1f0e8:	20000880 	.word	0x20000880

0001f0ec <configure_memory_usage>:
{
   1f0ec:	b5b0      	push	{r4, r5, r7, lr}
   1f0ee:	b082      	sub	sp, #8
   1f0f0:	af00      	add	r7, sp, #0
	cfg.master_count.count = SDC_MASTER_COUNT;
   1f0f2:	2000      	movs	r0, #0
   1f0f4:	7138      	strb	r0, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f0f6:	1d3a      	adds	r2, r7, #4
   1f0f8:	2101      	movs	r1, #1
   1f0fa:	f7e5 fcf9 	bl	4af0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f0fe:	2800      	cmp	r0, #0
   1f100:	db36      	blt.n	1f170 <configure_memory_usage+0x84>
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1f102:	2301      	movs	r3, #1
   1f104:	713b      	strb	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f106:	1d3a      	adds	r2, r7, #4
   1f108:	2102      	movs	r1, #2
   1f10a:	2000      	movs	r0, #0
   1f10c:	f7e5 fcf0 	bl	4af0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f110:	2800      	cmp	r0, #0
   1f112:	db2d      	blt.n	1f170 <configure_memory_usage+0x84>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1f114:	23fb      	movs	r3, #251	; 0xfb
   1f116:	717b      	strb	r3, [r7, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1f118:	713b      	strb	r3, [r7, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   1f11a:	2302      	movs	r3, #2
   1f11c:	71fb      	strb	r3, [r7, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   1f11e:	2103      	movs	r1, #3
   1f120:	71b9      	strb	r1, [r7, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f122:	1d3a      	adds	r2, r7, #4
   1f124:	2000      	movs	r0, #0
   1f126:	f7e5 fce3 	bl	4af0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f12a:	2800      	cmp	r0, #0
   1f12c:	db20      	blt.n	1f170 <configure_memory_usage+0x84>
	cfg.event_length.event_length_us =
   1f12e:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1f132:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f134:	1d3a      	adds	r2, r7, #4
   1f136:	2104      	movs	r1, #4
   1f138:	2000      	movs	r0, #0
   1f13a:	f7e5 fcd9 	bl	4af0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f13e:	2800      	cmp	r0, #0
   1f140:	db16      	blt.n	1f170 <configure_memory_usage+0x84>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1f142:	2301      	movs	r3, #1
   1f144:	713b      	strb	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f146:	1d3a      	adds	r2, r7, #4
   1f148:	2105      	movs	r1, #5
   1f14a:	2000      	movs	r0, #0
   1f14c:	f7e5 fcd0 	bl	4af0 <sdc_cfg_set>
	if (required_memory < 0) {
   1f150:	2800      	cmp	r0, #0
   1f152:	db0d      	blt.n	1f170 <configure_memory_usage+0x84>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1f154:	231f      	movs	r3, #31
   1f156:	80bb      	strh	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1f158:	1d3a      	adds	r2, r7, #4
   1f15a:	2107      	movs	r1, #7
   1f15c:	2000      	movs	r0, #0
   1f15e:	f7e5 fcc7 	bl	4af0 <sdc_cfg_set>
		if (required_memory < 0) {
   1f162:	2800      	cmp	r0, #0
   1f164:	db04      	blt.n	1f170 <configure_memory_usage+0x84>
	if (required_memory > sizeof(sdc_mempool)) {
   1f166:	f640 13d8 	movw	r3, #2520	; 0x9d8
   1f16a:	4298      	cmp	r0, r3
   1f16c:	d803      	bhi.n	1f176 <configure_memory_usage+0x8a>
	return 0;
   1f16e:	2000      	movs	r0, #0
}
   1f170:	3708      	adds	r7, #8
   1f172:	46bd      	mov	sp, r7
   1f174:	bdb0      	pop	{r4, r5, r7, pc}
		BT_ERR("Allocated memory too low: %u < %u",
   1f176:	466d      	mov	r5, sp
   1f178:	b088      	sub	sp, #32
   1f17a:	466c      	mov	r4, sp
   1f17c:	f114 020c 	adds.w	r2, r4, #12
   1f180:	d03d      	beq.n	1f1fe <configure_memory_usage+0x112>
   1f182:	2310      	movs	r3, #16
   1f184:	b11a      	cbz	r2, 1f18e <configure_memory_usage+0xa2>
   1f186:	2b04      	cmp	r3, #4
   1f188:	dd01      	ble.n	1f18e <configure_memory_usage+0xa2>
   1f18a:	4920      	ldr	r1, [pc, #128]	; (1f20c <configure_memory_usage+0x120>)
   1f18c:	6121      	str	r1, [r4, #16]
   1f18e:	b122      	cbz	r2, 1f19a <configure_memory_usage+0xae>
   1f190:	2b08      	cmp	r3, #8
   1f192:	dd02      	ble.n	1f19a <configure_memory_usage+0xae>
   1f194:	f640 11d8 	movw	r1, #2520	; 0x9d8
   1f198:	6161      	str	r1, [r4, #20]
   1f19a:	b112      	cbz	r2, 1f1a2 <configure_memory_usage+0xb6>
   1f19c:	2b0c      	cmp	r3, #12
   1f19e:	dd00      	ble.n	1f1a2 <configure_memory_usage+0xb6>
   1f1a0:	61a0      	str	r0, [r4, #24]
   1f1a2:	2b0f      	cmp	r3, #15
   1f1a4:	dd2e      	ble.n	1f204 <configure_memory_usage+0x118>
   1f1a6:	2310      	movs	r3, #16
   1f1a8:	b142      	cbz	r2, 1f1bc <configure_memory_usage+0xd0>
   1f1aa:	2200      	movs	r2, #0
   1f1ac:	f8a7 2001 	strh.w	r2, [r7, #1]
   1f1b0:	70fa      	strb	r2, [r7, #3]
   1f1b2:	2104      	movs	r1, #4
   1f1b4:	7039      	strb	r1, [r7, #0]
   1f1b6:	70ba      	strb	r2, [r7, #2]
   1f1b8:	683a      	ldr	r2, [r7, #0]
   1f1ba:	60e2      	str	r2, [r4, #12]
   1f1bc:	2200      	movs	r2, #0
   1f1be:	f36f 0200 	bfc	r2, #0, #1
   1f1c2:	f36f 0241 	bfc	r2, #1, #1
   1f1c6:	f36f 0282 	bfc	r2, #2, #1
   1f1ca:	f36f 02c5 	bfc	r2, #3, #3
   1f1ce:	2101      	movs	r1, #1
   1f1d0:	f361 1288 	bfi	r2, r1, #6, #3
   1f1d4:	f403 737d 	and.w	r3, r3, #1012	; 0x3f4
   1f1d8:	f363 2252 	bfi	r2, r3, #9, #10
   1f1dc:	2300      	movs	r3, #0
   1f1de:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1f1e2:	490b      	ldr	r1, [pc, #44]	; (1f210 <configure_memory_usage+0x124>)
   1f1e4:	4620      	mov	r0, r4
   1f1e6:	f004 feb1 	bl	23f4c <z_log_msg2_finalize>
   1f1ea:	46ad      	mov	sp, r5
		k_panic();
   1f1ec:	4040      	eors	r0, r0
   1f1ee:	f380 8811 	msr	BASEPRI, r0
   1f1f2:	f04f 0004 	mov.w	r0, #4
   1f1f6:	df02      	svc	2
		return -ENOMEM;
   1f1f8:	f06f 000b 	mvn.w	r0, #11
   1f1fc:	e7b8      	b.n	1f170 <configure_memory_usage+0x84>
		BT_ERR("Allocated memory too low: %u < %u",
   1f1fe:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1f202:	e7bf      	b.n	1f184 <configure_memory_usage+0x98>
   1f204:	f06f 031b 	mvn.w	r3, #27
   1f208:	e7ce      	b.n	1f1a8 <configure_memory_usage+0xbc>
   1f20a:	bf00      	nop
   1f20c:	0002abc0 	.word	0x0002abc0
   1f210:	00028924 	.word	0x00028924

0001f214 <hci_driver_open>:
{
   1f214:	b530      	push	{r4, r5, lr}
   1f216:	b09f      	sub	sp, #124	; 0x7c
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f218:	4d52      	ldr	r5, [pc, #328]	; (1f364 <hci_driver_open+0x150>)
   1f21a:	2200      	movs	r2, #0
   1f21c:	2300      	movs	r3, #0
   1f21e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f222:	2400      	movs	r4, #0
   1f224:	9404      	str	r4, [sp, #16]
   1f226:	f06f 0309 	mvn.w	r3, #9
   1f22a:	9303      	str	r3, [sp, #12]
   1f22c:	9402      	str	r4, [sp, #8]
   1f22e:	9401      	str	r4, [sp, #4]
   1f230:	9400      	str	r4, [sp, #0]
   1f232:	4b4d      	ldr	r3, [pc, #308]	; (1f368 <hci_driver_open+0x154>)
   1f234:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f238:	494c      	ldr	r1, [pc, #304]	; (1f36c <hci_driver_open+0x158>)
   1f23a:	4628      	mov	r0, r5
   1f23c:	f008 fbfe 	bl	27a3c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f240:	494b      	ldr	r1, [pc, #300]	; (1f370 <hci_driver_open+0x15c>)
   1f242:	4628      	mov	r0, r5
   1f244:	f001 fd3a 	bl	20cbc <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1f248:	a80d      	add	r0, sp, #52	; 0x34
   1f24a:	f7e5 fc43 	bl	4ad4 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1f24e:	4b49      	ldr	r3, [pc, #292]	; (1f374 <hci_driver_open+0x160>)
   1f250:	9302      	str	r3, [sp, #8]
   1f252:	4b49      	ldr	r3, [pc, #292]	; (1f378 <hci_driver_open+0x164>)
   1f254:	9301      	str	r3, [sp, #4]
   1f256:	2314      	movs	r3, #20
   1f258:	9300      	str	r3, [sp, #0]
   1f25a:	ab0d      	add	r3, sp, #52	; 0x34
   1f25c:	2203      	movs	r2, #3
   1f25e:	4947      	ldr	r1, [pc, #284]	; (1f37c <hci_driver_open+0x168>)
   1f260:	4620      	mov	r0, r4
   1f262:	f007 fde8 	bl	26e36 <z_log_msg2_runtime_create>
	err = configure_supported_features();
   1f266:	f007 fe40 	bl	26eea <configure_supported_features>
	if (err) {
   1f26a:	4604      	mov	r4, r0
   1f26c:	b110      	cbz	r0, 1f274 <hci_driver_open+0x60>
}
   1f26e:	4620      	mov	r0, r4
   1f270:	b01f      	add	sp, #124	; 0x7c
   1f272:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1f274:	f7ff ff3a 	bl	1f0ec <configure_memory_usage>
	if (err) {
   1f278:	4604      	mov	r4, r0
   1f27a:	2800      	cmp	r0, #0
   1f27c:	d1f7      	bne.n	1f26e <hci_driver_open+0x5a>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1f27e:	4840      	ldr	r0, [pc, #256]	; (1f380 <hci_driver_open+0x16c>)
   1f280:	f001 faa8 	bl	207d4 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1f284:	4b3f      	ldr	r3, [pc, #252]	; (1f384 <hci_driver_open+0x170>)
   1f286:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1f288:	b1b0      	cbz	r0, 1f2b8 <hci_driver_open+0xa4>
	sdc_rand_source_t rand_functions = {
   1f28a:	4a3f      	ldr	r2, [pc, #252]	; (1f388 <hci_driver_open+0x174>)
   1f28c:	ab0a      	add	r3, sp, #40	; 0x28
   1f28e:	ca07      	ldmia	r2, {r0, r1, r2}
   1f290:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1f294:	4618      	mov	r0, r3
   1f296:	f7e5 fdb1 	bl	4dfc <sdc_rand_source_register>
	if (err) {
   1f29a:	4604      	mov	r4, r0
   1f29c:	bb90      	cbnz	r0, 1f304 <hci_driver_open+0xf0>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1f29e:	f04f 30ff 	mov.w	r0, #4294967295
   1f2a2:	f04f 31ff 	mov.w	r1, #4294967295
   1f2a6:	f7ff fdcf 	bl	1ee48 <multithreading_lock_acquire>
	if (!err) {
   1f2aa:	4605      	mov	r5, r0
   1f2ac:	2800      	cmp	r0, #0
   1f2ae:	d050      	beq.n	1f352 <hci_driver_open+0x13e>
	if (err < 0) {
   1f2b0:	2d00      	cmp	r5, #0
   1f2b2:	dadc      	bge.n	1f26e <hci_driver_open+0x5a>
		return err;
   1f2b4:	462c      	mov	r4, r5
   1f2b6:	e7da      	b.n	1f26e <hci_driver_open+0x5a>
		BT_ERR("An entropy source is required");
   1f2b8:	4b34      	ldr	r3, [pc, #208]	; (1f38c <hci_driver_open+0x178>)
   1f2ba:	931c      	str	r3, [sp, #112]	; 0x70
   1f2bc:	2300      	movs	r3, #0
   1f2be:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
   1f2c2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1f2c6:	2202      	movs	r2, #2
   1f2c8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   1f2cc:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1f2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f2d2:	921b      	str	r2, [sp, #108]	; 0x6c
   1f2d4:	461a      	mov	r2, r3
   1f2d6:	f363 0200 	bfi	r2, r3, #0, #1
   1f2da:	f363 0241 	bfi	r2, r3, #1, #1
   1f2de:	f363 0282 	bfi	r2, r3, #2, #1
   1f2e2:	f363 02c5 	bfi	r2, r3, #3, #3
   1f2e6:	2101      	movs	r1, #1
   1f2e8:	f361 1288 	bfi	r2, r1, #6, #3
   1f2ec:	2108      	movs	r1, #8
   1f2ee:	f361 2252 	bfi	r2, r1, #9, #10
   1f2f2:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1f2f6:	4921      	ldr	r1, [pc, #132]	; (1f37c <hci_driver_open+0x168>)
   1f2f8:	a818      	add	r0, sp, #96	; 0x60
   1f2fa:	f004 fe27 	bl	23f4c <z_log_msg2_finalize>
		return -ENODEV;
   1f2fe:	f06f 0412 	mvn.w	r4, #18
   1f302:	e7b4      	b.n	1f26e <hci_driver_open+0x5a>
		BT_ERR("Failed to register rand source (%d)", err);
   1f304:	4b22      	ldr	r3, [pc, #136]	; (1f390 <hci_driver_open+0x17c>)
   1f306:	9316      	str	r3, [sp, #88]	; 0x58
   1f308:	9017      	str	r0, [sp, #92]	; 0x5c
   1f30a:	2300      	movs	r3, #0
   1f30c:	f8ad 3025 	strh.w	r3, [sp, #37]	; 0x25
   1f310:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
   1f314:	2203      	movs	r2, #3
   1f316:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
   1f31a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   1f31e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f320:	9215      	str	r2, [sp, #84]	; 0x54
   1f322:	461a      	mov	r2, r3
   1f324:	f363 0200 	bfi	r2, r3, #0, #1
   1f328:	f363 0241 	bfi	r2, r3, #1, #1
   1f32c:	f363 0282 	bfi	r2, r3, #2, #1
   1f330:	f363 02c5 	bfi	r2, r3, #3, #3
   1f334:	2101      	movs	r1, #1
   1f336:	f361 1288 	bfi	r2, r1, #6, #3
   1f33a:	210c      	movs	r1, #12
   1f33c:	f361 2252 	bfi	r2, r1, #9, #10
   1f340:	f3c2 0212 	ubfx	r2, r2, #0, #19
   1f344:	490d      	ldr	r1, [pc, #52]	; (1f37c <hci_driver_open+0x168>)
   1f346:	a812      	add	r0, sp, #72	; 0x48
   1f348:	f004 fe00 	bl	23f4c <z_log_msg2_finalize>
		return -EINVAL;
   1f34c:	f06f 0415 	mvn.w	r4, #21
   1f350:	e78d      	b.n	1f26e <hci_driver_open+0x5a>
		err = sdc_enable(host_signal, sdc_mempool);
   1f352:	4910      	ldr	r1, [pc, #64]	; (1f394 <hci_driver_open+0x180>)
   1f354:	4810      	ldr	r0, [pc, #64]	; (1f398 <hci_driver_open+0x184>)
   1f356:	f7e5 fc27 	bl	4ba8 <sdc_enable>
   1f35a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1f35c:	f7ff fd7e 	bl	1ee5c <multithreading_lock_release>
   1f360:	e7a6      	b.n	1f2b0 <hci_driver_open+0x9c>
   1f362:	bf00      	nop
   1f364:	20001c30 	.word	0x20001c30
   1f368:	0001f0ad 	.word	0x0001f0ad
   1f36c:	20005f00 	.word	0x20005f00
   1f370:	0002abe4 	.word	0x0002abe4
   1f374:	0002abec 	.word	0x0002abec
   1f378:	00029718 	.word	0x00029718
   1f37c:	00028924 	.word	0x00028924
   1f380:	0002ab54 	.word	0x0002ab54
   1f384:	20002c0c 	.word	0x20002c0c
   1f388:	00028a64 	.word	0x00028a64
   1f38c:	0002ac14 	.word	0x0002ac14
   1f390:	0002ac34 	.word	0x0002ac34
   1f394:	20002d10 	.word	0x20002d10
   1f398:	0001eeb9 	.word	0x0001eeb9

0001f39c <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1f39c:	4b0b      	ldr	r3, [pc, #44]	; (1f3cc <hci_internal_cmd_put+0x30>)
   1f39e:	781b      	ldrb	r3, [r3, #0]
   1f3a0:	b96b      	cbnz	r3, 1f3be <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1f3a2:	7883      	ldrb	r3, [r0, #2]
   1f3a4:	3303      	adds	r3, #3
   1f3a6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1f3aa:	dc0b      	bgt.n	1f3c4 <hci_internal_cmd_put+0x28>
{
   1f3ac:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1f3ae:	4c07      	ldr	r4, [pc, #28]	; (1f3cc <hci_internal_cmd_put+0x30>)
   1f3b0:	1c61      	adds	r1, r4, #1
   1f3b2:	f008 f838 	bl	27426 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1f3b6:	2301      	movs	r3, #1
   1f3b8:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1f3ba:	2000      	movs	r0, #0
}
   1f3bc:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1f3be:	f04f 30ff 	mov.w	r0, #4294967295
   1f3c2:	4770      	bx	lr
		return -EINVAL;
   1f3c4:	f06f 0015 	mvn.w	r0, #21
}
   1f3c8:	4770      	bx	lr
   1f3ca:	bf00      	nop
   1f3cc:	200036e8 	.word	0x200036e8

0001f3d0 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1f3d0:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1f3d2:	4b07      	ldr	r3, [pc, #28]	; (1f3f0 <hci_internal_evt_get+0x20>)
   1f3d4:	781b      	ldrb	r3, [r3, #0]
   1f3d6:	b143      	cbz	r3, 1f3ea <hci_internal_evt_get+0x1a>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   1f3d8:	4c05      	ldr	r4, [pc, #20]	; (1f3f0 <hci_internal_evt_get+0x20>)
   1f3da:	78a2      	ldrb	r2, [r4, #2]
   1f3dc:	3202      	adds	r2, #2
   1f3de:	1c61      	adds	r1, r4, #1
   1f3e0:	f009 f85d 	bl	2849e <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   1f3e4:	2000      	movs	r0, #0
   1f3e6:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   1f3e8:	bd10      	pop	{r4, pc}
	return sdc_hci_evt_get(evt_out);
   1f3ea:	f7ed fe7c 	bl	d0e6 <sdc_hci_evt_get>
   1f3ee:	e7fb      	b.n	1f3e8 <hci_internal_evt_get+0x18>
   1f3f0:	200036e8 	.word	0x200036e8

0001f3f4 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1f3f4:	b538      	push	{r3, r4, r5, lr}
   1f3f6:	4605      	mov	r5, r0
   1f3f8:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1f3fa:	4b0a      	ldr	r3, [pc, #40]	; (1f424 <bt_rand+0x30>)
   1f3fc:	681b      	ldr	r3, [r3, #0]
   1f3fe:	b13b      	cbz	r3, 1f410 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1f400:	4b08      	ldr	r3, [pc, #32]	; (1f424 <bt_rand+0x30>)
   1f402:	6818      	ldr	r0, [r3, #0]
   1f404:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1f406:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1f408:	681b      	ldr	r3, [r3, #0]
   1f40a:	4629      	mov	r1, r5
   1f40c:	4798      	blx	r3
}
   1f40e:	bd38      	pop	{r3, r4, r5, pc}
   1f410:	4805      	ldr	r0, [pc, #20]	; (1f428 <bt_rand+0x34>)
   1f412:	f001 f9df 	bl	207d4 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1f416:	4b03      	ldr	r3, [pc, #12]	; (1f424 <bt_rand+0x30>)
   1f418:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1f41a:	2800      	cmp	r0, #0
   1f41c:	d1f0      	bne.n	1f400 <bt_rand+0xc>
			return -ENODEV;
   1f41e:	f06f 0012 	mvn.w	r0, #18
   1f422:	e7f4      	b.n	1f40e <bt_rand+0x1a>
   1f424:	20003730 	.word	0x20003730
   1f428:	0002ab54 	.word	0x0002ab54

0001f42c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1f42c:	b510      	push	{r4, lr}
   1f42e:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1f430:	f008 f850 	bl	274d4 <m_config_clock_source_get>
   1f434:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1f438:	2332      	movs	r3, #50	; 0x32
   1f43a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1f43e:	2300      	movs	r3, #0
   1f440:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1f444:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1f448:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f44c:	4a0c      	ldr	r2, [pc, #48]	; (1f480 <mpsl_lib_init+0x54>)
   1f44e:	2119      	movs	r1, #25
   1f450:	4668      	mov	r0, sp
   1f452:	f7e5 f995 	bl	4780 <mpsl_init>
	if (err) {
   1f456:	4604      	mov	r4, r0
   1f458:	b110      	cbz	r0, 1f460 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1f45a:	4620      	mov	r0, r4
   1f45c:	b002      	add	sp, #8
   1f45e:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f460:	2201      	movs	r2, #1
   1f462:	2100      	movs	r1, #0
   1f464:	2008      	movs	r0, #8
   1f466:	f7f6 f9cb 	bl	15800 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f46a:	2201      	movs	r2, #1
   1f46c:	2100      	movs	r1, #0
   1f46e:	200b      	movs	r0, #11
   1f470:	f7f6 f9c6 	bl	15800 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f474:	2201      	movs	r2, #1
   1f476:	2100      	movs	r1, #0
   1f478:	4610      	mov	r0, r2
   1f47a:	f7f6 f9c1 	bl	15800 <z_arm_irq_priority_set>
	return 0;
   1f47e:	e7ec      	b.n	1f45a <mpsl_lib_init+0x2e>
   1f480:	0001f485 	.word	0x0001f485

0001f484 <m_assert_handler>:
{
   1f484:	b500      	push	{lr}
   1f486:	b085      	sub	sp, #20
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1f488:	9103      	str	r1, [sp, #12]
   1f48a:	9002      	str	r0, [sp, #8]
   1f48c:	4b08      	ldr	r3, [pc, #32]	; (1f4b0 <m_assert_handler+0x2c>)
   1f48e:	9301      	str	r3, [sp, #4]
   1f490:	2000      	movs	r0, #0
   1f492:	9000      	str	r0, [sp, #0]
   1f494:	4603      	mov	r3, r0
   1f496:	2201      	movs	r2, #1
   1f498:	4906      	ldr	r1, [pc, #24]	; (1f4b4 <m_assert_handler+0x30>)
   1f49a:	f008 f848 	bl	2752e <z_log_msg2_runtime_create>
	k_oops();
   1f49e:	4040      	eors	r0, r0
   1f4a0:	f380 8811 	msr	BASEPRI, r0
   1f4a4:	f04f 0003 	mov.w	r0, #3
   1f4a8:	df02      	svc	2
}
   1f4aa:	b005      	add	sp, #20
   1f4ac:	f85d fb04 	ldr.w	pc, [sp], #4
   1f4b0:	0002acb4 	.word	0x0002acb4
   1f4b4:	000288f4 	.word	0x000288f4

0001f4b8 <signal_thread>:
{
   1f4b8:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1f4ba:	f04f 34ff 	mov.w	r4, #4294967295
   1f4be:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1f4c2:	4622      	mov	r2, r4
   1f4c4:	462b      	mov	r3, r5
   1f4c6:	4806      	ldr	r0, [pc, #24]	; (1f4e0 <signal_thread+0x28>)
   1f4c8:	f001 fe18 	bl	210fc <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f4cc:	4620      	mov	r0, r4
   1f4ce:	4629      	mov	r1, r5
   1f4d0:	f7ff fcba 	bl	1ee48 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1f4d4:	f7ed f9b3 	bl	c83e <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1f4d8:	f7ff fcc0 	bl	1ee5c <multithreading_lock_release>
	while (true) {
   1f4dc:	e7ed      	b.n	1f4ba <signal_thread+0x2>
   1f4de:	bf00      	nop
   1f4e0:	20000898 	.word	0x20000898

0001f4e4 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1f4e4:	b530      	push	{r4, r5, lr}
   1f4e6:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f4e8:	4d0f      	ldr	r5, [pc, #60]	; (1f528 <mpsl_signal_thread_init+0x44>)
   1f4ea:	2200      	movs	r2, #0
   1f4ec:	2300      	movs	r3, #0
   1f4ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f4f2:	2400      	movs	r4, #0
   1f4f4:	9404      	str	r4, [sp, #16]
   1f4f6:	f06f 0309 	mvn.w	r3, #9
   1f4fa:	9303      	str	r3, [sp, #12]
   1f4fc:	9402      	str	r4, [sp, #8]
   1f4fe:	9401      	str	r4, [sp, #4]
   1f500:	9400      	str	r4, [sp, #0]
   1f502:	4b0a      	ldr	r3, [pc, #40]	; (1f52c <mpsl_signal_thread_init+0x48>)
   1f504:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f508:	4909      	ldr	r1, [pc, #36]	; (1f530 <mpsl_signal_thread_init+0x4c>)
   1f50a:	4628      	mov	r0, r5
   1f50c:	f008 fa96 	bl	27a3c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f510:	4908      	ldr	r1, [pc, #32]	; (1f534 <mpsl_signal_thread_init+0x50>)
   1f512:	4628      	mov	r0, r5
   1f514:	f001 fbd2 	bl	20cbc <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f518:	4622      	mov	r2, r4
   1f51a:	2104      	movs	r1, #4
   1f51c:	2019      	movs	r0, #25
   1f51e:	f7f6 f96f 	bl	15800 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f522:	4620      	mov	r0, r4
   1f524:	b009      	add	sp, #36	; 0x24
   1f526:	bd30      	pop	{r4, r5, pc}
   1f528:	20001ce8 	.word	0x20001ce8
   1f52c:	0001f4b9 	.word	0x0001f4b9
   1f530:	20006320 	.word	0x20006320
   1f534:	0002acc8 	.word	0x0002acc8

0001f538 <mpsl_low_prio_irq_handler>:
{
   1f538:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1f53a:	4802      	ldr	r0, [pc, #8]	; (1f544 <mpsl_low_prio_irq_handler+0xc>)
   1f53c:	f001 fdb6 	bl	210ac <z_impl_k_sem_give>
}
   1f540:	bd08      	pop	{r3, pc}
   1f542:	bf00      	nop
   1f544:	20000898 	.word	0x20000898

0001f548 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1f548:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f54a:	4b02      	ldr	r3, [pc, #8]	; (1f554 <mpsl_hfclk_callback+0xc>)
   1f54c:	681b      	ldr	r3, [r3, #0]
   1f54e:	2000      	movs	r0, #0
   1f550:	4798      	blx	r3
}
   1f552:	bd08      	pop	{r3, pc}
   1f554:	20003734 	.word	0x20003734

0001f558 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f558:	b508      	push	{r3, lr}
	switch (domain) {
   1f55a:	b128      	cbz	r0, 1f568 <nrfx_clock_start+0x10>
   1f55c:	2801      	cmp	r0, #1
   1f55e:	d102      	bne.n	1f566 <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f560:	4804      	ldr	r0, [pc, #16]	; (1f574 <nrfx_clock_start+0x1c>)
   1f562:	f7e4 ff59 	bl	4418 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f566:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f568:	4b03      	ldr	r3, [pc, #12]	; (1f578 <nrfx_clock_start+0x20>)
   1f56a:	681b      	ldr	r3, [r3, #0]
   1f56c:	2001      	movs	r0, #1
   1f56e:	4798      	blx	r3
}
   1f570:	e7f9      	b.n	1f566 <nrfx_clock_start+0xe>
   1f572:	bf00      	nop
   1f574:	0001f549 	.word	0x0001f549
   1f578:	20003734 	.word	0x20003734

0001f57c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1f57c:	4b01      	ldr	r3, [pc, #4]	; (1f584 <nrfx_clock_init+0x8>)
   1f57e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1f580:	4801      	ldr	r0, [pc, #4]	; (1f588 <nrfx_clock_init+0xc>)
   1f582:	4770      	bx	lr
   1f584:	20003734 	.word	0x20003734
   1f588:	0bad0000 	.word	0x0bad0000

0001f58c <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f58c:	4b03      	ldr	r3, [pc, #12]	; (1f59c <nrf52_errata_36+0x10>)
   1f58e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1f590:	2b0d      	cmp	r3, #13
   1f592:	d001      	beq.n	1f598 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f594:	2000      	movs	r0, #0
   1f596:	4770      	bx	lr
                        return true;
   1f598:	2001      	movs	r0, #1
    #endif
}
   1f59a:	4770      	bx	lr
   1f59c:	10000130 	.word	0x10000130

0001f5a0 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f5a0:	4b03      	ldr	r3, [pc, #12]	; (1f5b0 <nrf52_errata_66+0x10>)
   1f5a2:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1f5a4:	2b0d      	cmp	r3, #13
   1f5a6:	d001      	beq.n	1f5ac <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f5a8:	2000      	movs	r0, #0
   1f5aa:	4770      	bx	lr
                        return true;
   1f5ac:	2001      	movs	r0, #1
    #endif
}
   1f5ae:	4770      	bx	lr
   1f5b0:	10000130 	.word	0x10000130

0001f5b4 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f5b4:	4b03      	ldr	r3, [pc, #12]	; (1f5c4 <nrf52_errata_136+0x10>)
   1f5b6:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1f5b8:	2b0d      	cmp	r3, #13
   1f5ba:	d001      	beq.n	1f5c0 <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f5bc:	2000      	movs	r0, #0
   1f5be:	4770      	bx	lr
                        return true;
   1f5c0:	2001      	movs	r0, #1
    #endif
}
   1f5c2:	4770      	bx	lr
   1f5c4:	10000130 	.word	0x10000130

0001f5c8 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f5c8:	4b06      	ldr	r3, [pc, #24]	; (1f5e4 <nrf52_configuration_249+0x1c>)
   1f5ca:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f5cc:	4a06      	ldr	r2, [pc, #24]	; (1f5e8 <nrf52_configuration_249+0x20>)
   1f5ce:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1f5d0:	2b0d      	cmp	r3, #13
   1f5d2:	d001      	beq.n	1f5d8 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f5d4:	2000      	movs	r0, #0
   1f5d6:	4770      	bx	lr
                switch(var2)
   1f5d8:	b10a      	cbz	r2, 1f5de <nrf52_configuration_249+0x16>
                        return true;
   1f5da:	2001      	movs	r0, #1
    #endif
}
   1f5dc:	4770      	bx	lr
                switch(var2)
   1f5de:	2000      	movs	r0, #0
   1f5e0:	4770      	bx	lr
   1f5e2:	bf00      	nop
   1f5e4:	10000130 	.word	0x10000130
   1f5e8:	10000134 	.word	0x10000134

0001f5ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f5ec:	4b02      	ldr	r3, [pc, #8]	; (1f5f8 <nvmc_wait+0xc>)
   1f5ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1f5f2:	2b00      	cmp	r3, #0
   1f5f4:	d0fa      	beq.n	1f5ec <nvmc_wait>
}
   1f5f6:	4770      	bx	lr
   1f5f8:	4001e000 	.word	0x4001e000

0001f5fc <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1f5fc:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f5fe:	4b03      	ldr	r3, [pc, #12]	; (1f60c <nvmc_config+0x10>)
   1f600:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1f604:	f7ff fff2 	bl	1f5ec <nvmc_wait>
}
   1f608:	bd08      	pop	{r3, pc}
   1f60a:	bf00      	nop
   1f60c:	4001e000 	.word	0x4001e000

0001f610 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f610:	4b01      	ldr	r3, [pc, #4]	; (1f618 <SystemCoreClockUpdate+0x8>)
   1f612:	4a02      	ldr	r2, [pc, #8]	; (1f61c <SystemCoreClockUpdate+0xc>)
   1f614:	601a      	str	r2, [r3, #0]
}
   1f616:	4770      	bx	lr
   1f618:	2000070c 	.word	0x2000070c
   1f61c:	03d09000 	.word	0x03d09000

0001f620 <SystemInit>:

void SystemInit(void)
{
   1f620:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f622:	f7ff ffb3 	bl	1f58c <nrf52_errata_36>
   1f626:	b140      	cbz	r0, 1f63a <__kernel_ram_size+0xa>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f628:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f62c:	2200      	movs	r2, #0
   1f62e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f632:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f636:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f63a:	f7ff ffb1 	bl	1f5a0 <nrf52_errata_66>
   1f63e:	2800      	cmp	r0, #0
   1f640:	d046      	beq.n	1f6d0 <__kernel_ram_size+0xa0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f646:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f64a:	4b45      	ldr	r3, [pc, #276]	; (1f760 <__kernel_ram_size+0x130>)
   1f64c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f650:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f654:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f658:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f65c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f660:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f664:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f668:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f66c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f670:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f674:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f678:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f67c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f680:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f684:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f688:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f68c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f690:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f694:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f698:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f69c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f6a0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f6a4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f6a8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f6ac:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f6b0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f6b4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f6b8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f6bc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f6c0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f6c4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f6c8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f6cc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f6d0:	f7ff ff70 	bl	1f5b4 <nrf52_errata_136>
   1f6d4:	b160      	cbz	r0, 1f6f0 <__kernel_ram_size+0xc0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f6d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f6da:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1f6de:	f013 0f01 	tst.w	r3, #1
   1f6e2:	d005      	beq.n	1f6f0 <__kernel_ram_size+0xc0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f6e8:	f06f 0201 	mvn.w	r2, #1
   1f6ec:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f6f0:	f7ff ff6a 	bl	1f5c8 <nrf52_configuration_249>
   1f6f4:	b138      	cbz	r0, 1f706 <__kernel_ram_size+0xd6>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f6f6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f6fa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f6fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f702:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f706:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f70a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1f70e:	2b00      	cmp	r3, #0
   1f710:	db08      	blt.n	1f724 <__kernel_ram_size+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f712:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f716:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f71a:	2b00      	cmp	r3, #0
   1f71c:	db02      	blt.n	1f724 <__kernel_ram_size+0xf4>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1f71e:	f7ff ff77 	bl	1f610 <SystemCoreClockUpdate>
}
   1f722:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1f724:	2001      	movs	r0, #1
   1f726:	f7ff ff69 	bl	1f5fc <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f72a:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1f72e:	2512      	movs	r5, #18
   1f730:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1f734:	f7ff ff5a 	bl	1f5ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f738:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1f73c:	f7ff ff56 	bl	1f5ec <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1f740:	2000      	movs	r0, #0
   1f742:	f7ff ff5b 	bl	1f5fc <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   1f746:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f74a:	4906      	ldr	r1, [pc, #24]	; (1f764 <__kernel_ram_size+0x134>)
   1f74c:	68ca      	ldr	r2, [r1, #12]
   1f74e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f752:	4b05      	ldr	r3, [pc, #20]	; (1f768 <__kernel_ram_size+0x138>)
   1f754:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f756:	60cb      	str	r3, [r1, #12]
   1f758:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1f75c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f75e:	e7fd      	b.n	1f75c <__kernel_ram_size+0x12c>
   1f760:	4000c000 	.word	0x4000c000
   1f764:	e000ed00 	.word	0xe000ed00
   1f768:	05fa0004 	.word	0x05fa0004

0001f76c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f76c:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1f76e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   1f770:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
   1f774:	f1d3 031f 	rsbs	r3, r3, #31
   1f778:	d415      	bmi.n	1f7a6 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f77a:	2201      	movs	r2, #1
   1f77c:	409a      	lsls	r2, r3
   1f77e:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f782:	f3bf 8f5b 	dmb	ish
   1f786:	e850 5f00 	ldrex	r5, [r0]
   1f78a:	42a5      	cmp	r5, r4
   1f78c:	d104      	bne.n	1f798 <nrfx_flag32_alloc+0x2c>
   1f78e:	e840 2c00 	strex	ip, r2, [r0]
   1f792:	f1bc 0f00 	cmp.w	ip, #0
   1f796:	d1f6      	bne.n	1f786 <nrfx_flag32_alloc+0x1a>
   1f798:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f79c:	d1e7      	bne.n	1f76e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
   1f79e:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
   1f7a0:	4802      	ldr	r0, [pc, #8]	; (1f7ac <nrfx_flag32_alloc+0x40>)
}
   1f7a2:	bc30      	pop	{r4, r5}
   1f7a4:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
   1f7a6:	4802      	ldr	r0, [pc, #8]	; (1f7b0 <nrfx_flag32_alloc+0x44>)
   1f7a8:	e7fb      	b.n	1f7a2 <nrfx_flag32_alloc+0x36>
   1f7aa:	bf00      	nop
   1f7ac:	0bad0000 	.word	0x0bad0000
   1f7b0:	0bad0002 	.word	0x0bad0002

0001f7b4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1f7b4:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f7b6:	6803      	ldr	r3, [r0, #0]
   1f7b8:	460c      	mov	r4, r1
   1f7ba:	fa23 f101 	lsr.w	r1, r3, r1
   1f7be:	f011 0f01 	tst.w	r1, #1
   1f7c2:	d114      	bne.n	1f7ee <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
   1f7c4:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
   1f7c6:	2301      	movs	r3, #1
   1f7c8:	40a3      	lsls	r3, r4
   1f7ca:	4313      	orrs	r3, r2
   1f7cc:	f3bf 8f5b 	dmb	ish
   1f7d0:	e850 1f00 	ldrex	r1, [r0]
   1f7d4:	4291      	cmp	r1, r2
   1f7d6:	d104      	bne.n	1f7e2 <nrfx_flag32_free+0x2e>
   1f7d8:	e840 3c00 	strex	ip, r3, [r0]
   1f7dc:	f1bc 0f00 	cmp.w	ip, #0
   1f7e0:	d1f6      	bne.n	1f7d0 <nrfx_flag32_free+0x1c>
   1f7e2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f7e6:	d1ed      	bne.n	1f7c4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   1f7e8:	4802      	ldr	r0, [pc, #8]	; (1f7f4 <nrfx_flag32_free+0x40>)
}
   1f7ea:	bc10      	pop	{r4}
   1f7ec:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
   1f7ee:	4802      	ldr	r0, [pc, #8]	; (1f7f8 <nrfx_flag32_free+0x44>)
   1f7f0:	e7fb      	b.n	1f7ea <nrfx_flag32_free+0x36>
   1f7f2:	bf00      	nop
   1f7f4:	0bad0000 	.word	0x0bad0000
   1f7f8:	0bad0004 	.word	0x0bad0004

0001f7fc <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1f7fc:	3008      	adds	r0, #8
   1f7fe:	4b03      	ldr	r3, [pc, #12]	; (1f80c <pin_in_use+0x10>)
   1f800:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f804:	f000 0001 	and.w	r0, r0, #1
   1f808:	4770      	bx	lr
   1f80a:	bf00      	nop
   1f80c:	20000710 	.word	0x20000710

0001f810 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f810:	3008      	adds	r0, #8
   1f812:	4b03      	ldr	r3, [pc, #12]	; (1f820 <pin_in_use_by_te+0x10>)
   1f814:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f818:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f81c:	4770      	bx	lr
   1f81e:	bf00      	nop
   1f820:	20000710 	.word	0x20000710

0001f824 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f824:	3008      	adds	r0, #8
   1f826:	4b04      	ldr	r3, [pc, #16]	; (1f838 <pin_has_trigger+0x14>)
   1f828:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f82c:	f010 001c 	ands.w	r0, r0, #28
   1f830:	bf18      	it	ne
   1f832:	2001      	movne	r0, #1
   1f834:	4770      	bx	lr
   1f836:	bf00      	nop
   1f838:	20000710 	.word	0x20000710

0001f83c <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f83c:	3008      	adds	r0, #8
   1f83e:	4b03      	ldr	r3, [pc, #12]	; (1f84c <pin_is_output+0x10>)
   1f840:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f844:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f848:	4770      	bx	lr
   1f84a:	bf00      	nop
   1f84c:	20000710 	.word	0x20000710

0001f850 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f850:	3008      	adds	r0, #8
   1f852:	4b02      	ldr	r3, [pc, #8]	; (1f85c <pin_te_get+0xc>)
   1f854:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f858:	0b40      	lsrs	r0, r0, #13
   1f85a:	4770      	bx	lr
   1f85c:	20000710 	.word	0x20000710

0001f860 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f860:	2200      	movs	r2, #0
   1f862:	e004      	b.n	1f86e <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f864:	f04f 33ff 	mov.w	r3, #4294967295
   1f868:	4283      	cmp	r3, r0
   1f86a:	d00f      	beq.n	1f88c <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f86c:	3201      	adds	r2, #1
   1f86e:	2a29      	cmp	r2, #41	; 0x29
   1f870:	d80a      	bhi.n	1f888 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f872:	f102 0308 	add.w	r3, r2, #8
   1f876:	4906      	ldr	r1, [pc, #24]	; (1f890 <handler_in_use+0x30>)
   1f878:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1f87c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f880:	d0f0      	beq.n	1f864 <handler_in_use+0x4>
   1f882:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f886:	e7ef      	b.n	1f868 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
   1f888:	2000      	movs	r0, #0
   1f88a:	4770      	bx	lr
            return true;
   1f88c:	2001      	movs	r0, #1
}
   1f88e:	4770      	bx	lr
   1f890:	20000710 	.word	0x20000710

0001f894 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1f894:	2300      	movs	r3, #0
   1f896:	b113      	cbz	r3, 1f89e <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
   1f898:	f04f 30ff 	mov.w	r0, #4294967295
}
   1f89c:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f89e:	4a07      	ldr	r2, [pc, #28]	; (1f8bc <find_handler+0x28>)
   1f8a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   1f8a4:	4282      	cmp	r2, r0
   1f8a6:	d001      	beq.n	1f8ac <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
   1f8a8:	3301      	adds	r3, #1
   1f8aa:	e7f4      	b.n	1f896 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f8ac:	4a03      	ldr	r2, [pc, #12]	; (1f8bc <find_handler+0x28>)
   1f8ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1f8b2:	6852      	ldr	r2, [r2, #4]
   1f8b4:	428a      	cmp	r2, r1
   1f8b6:	d1f7      	bne.n	1f8a8 <find_handler+0x14>
            return i;
   1f8b8:	4618      	mov	r0, r3
   1f8ba:	4770      	bx	lr
   1f8bc:	20000710 	.word	0x20000710

0001f8c0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f8c0:	3008      	adds	r0, #8
   1f8c2:	4b06      	ldr	r3, [pc, #24]	; (1f8dc <channel_handler_get+0x1c>)
   1f8c4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1f8c8:	f410 7f80 	tst.w	r0, #256	; 0x100
   1f8cc:	d004      	beq.n	1f8d8 <channel_handler_get+0x18>
   1f8ce:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
   1f8d2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1f8d6:	4770      	bx	lr
        return NULL;
   1f8d8:	2000      	movs	r0, #0
}
   1f8da:	4770      	bx	lr
   1f8dc:	20000710 	.word	0x20000710

0001f8e0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f8e0:	b570      	push	{r4, r5, r6, lr}
   1f8e2:	4604      	mov	r4, r0
   1f8e4:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
   1f8e6:	f7ff ffeb 	bl	1f8c0 <channel_handler_get>

    if (handler)
   1f8ea:	b120      	cbz	r0, 1f8f6 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
   1f8ec:	6806      	ldr	r6, [r0, #0]
   1f8ee:	6842      	ldr	r2, [r0, #4]
   1f8f0:	4629      	mov	r1, r5
   1f8f2:	4620      	mov	r0, r4
   1f8f4:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
   1f8f6:	4b04      	ldr	r3, [pc, #16]	; (1f908 <call_handler+0x28>)
   1f8f8:	689b      	ldr	r3, [r3, #8]
   1f8fa:	b123      	cbz	r3, 1f906 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f8fc:	4a02      	ldr	r2, [pc, #8]	; (1f908 <call_handler+0x28>)
   1f8fe:	68d2      	ldr	r2, [r2, #12]
   1f900:	4629      	mov	r1, r5
   1f902:	4620      	mov	r0, r4
   1f904:	4798      	blx	r3
    }
}
   1f906:	bd70      	pop	{r4, r5, r6, pc}
   1f908:	20000710 	.word	0x20000710

0001f90c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
   1f90c:	b570      	push	{r4, r5, r6, lr}
   1f90e:	4604      	mov	r4, r0
   1f910:	460d      	mov	r5, r1
   1f912:	4616      	mov	r6, r2
    if (is_level(trigger))
   1f914:	4608      	mov	r0, r1
   1f916:	f007 fe42 	bl	2759e <is_level>
   1f91a:	b9d0      	cbnz	r0, 1f952 <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f91c:	2e02      	cmp	r6, #2
   1f91e:	d03e      	beq.n	1f99e <next_sense_cond_call_handler+0x92>
   1f920:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
   1f922:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1f926:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f928:	2901      	cmp	r1, #1
   1f92a:	d03a      	beq.n	1f9a2 <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
   1f92c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f930:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1f934:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   1f938:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f93c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1f940:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f944:	2d03      	cmp	r5, #3
   1f946:	d030      	beq.n	1f9aa <next_sense_cond_call_handler+0x9e>
   1f948:	2e02      	cmp	r6, #2
   1f94a:	d02c      	beq.n	1f9a6 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f94c:	2e03      	cmp	r6, #3
   1f94e:	d031      	beq.n	1f9b4 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
   1f950:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
   1f952:	4629      	mov	r1, r5
   1f954:	4620      	mov	r0, r4
   1f956:	f7ff ffc3 	bl	1f8e0 <call_handler>
    *p_pin = pin_number & 0x1F;
   1f95a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   1f95e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f960:	2c01      	cmp	r4, #1
   1f962:	d01a      	beq.n	1f99a <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
   1f964:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f968:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   1f96c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1f970:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1f974:	4296      	cmp	r6, r2
   1f976:	d1eb      	bne.n	1f950 <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f978:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f97c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1f980:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   1f984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f988:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   1f98c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1f990:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   1f994:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
   1f998:	e7da      	b.n	1f950 <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
   1f99a:	4908      	ldr	r1, [pc, #32]	; (1f9bc <next_sense_cond_call_handler+0xb0>)
   1f99c:	e7e4      	b.n	1f968 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f99e:	2003      	movs	r0, #3
   1f9a0:	e7bf      	b.n	1f922 <next_sense_cond_call_handler+0x16>
   1f9a2:	4906      	ldr	r1, [pc, #24]	; (1f9bc <next_sense_cond_call_handler+0xb0>)
   1f9a4:	e7c4      	b.n	1f930 <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f9a6:	2d01      	cmp	r5, #1
   1f9a8:	d1d0      	bne.n	1f94c <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
   1f9aa:	4629      	mov	r1, r5
   1f9ac:	4620      	mov	r0, r4
   1f9ae:	f7ff ff97 	bl	1f8e0 <call_handler>
}
   1f9b2:	e7cd      	b.n	1f950 <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f9b4:	2d02      	cmp	r5, #2
   1f9b6:	d1cb      	bne.n	1f950 <next_sense_cond_call_handler+0x44>
   1f9b8:	e7f7      	b.n	1f9aa <next_sense_cond_call_handler+0x9e>
   1f9ba:	bf00      	nop
   1f9bc:	50000300 	.word	0x50000300

0001f9c0 <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
   1f9c0:	b410      	push	{r4}
   1f9c2:	b083      	sub	sp, #12
   1f9c4:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1f9c6:	4b12      	ldr	r3, [pc, #72]	; (1fa10 <latch_pending_read_and_check+0x50>)
   1f9c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   1f9cc:	ab02      	add	r3, sp, #8
   1f9ce:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1f9d2:	4620      	mov	r0, r4
   1f9d4:	2300      	movs	r3, #0
   1f9d6:	e00b      	b.n	1f9f0 <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
   1f9d8:	aa02      	add	r2, sp, #8
   1f9da:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1f9de:	f852 2c08 	ldr.w	r2, [r2, #-8]
   1f9e2:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1f9e6:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1f9ea:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1f9ee:	3301      	adds	r3, #1
   1f9f0:	2b01      	cmp	r3, #1
   1f9f2:	d9f1      	bls.n	1f9d8 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1f9f4:	2300      	movs	r3, #0
   1f9f6:	2b01      	cmp	r3, #1
   1f9f8:	d804      	bhi.n	1fa04 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
   1f9fa:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1f9fe:	b92a      	cbnz	r2, 1fa0c <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
   1fa00:	3301      	adds	r3, #1
   1fa02:	e7f8      	b.n	1f9f6 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
   1fa04:	2000      	movs	r0, #0
}
   1fa06:	b003      	add	sp, #12
   1fa08:	bc10      	pop	{r4}
   1fa0a:	4770      	bx	lr
            return true;
   1fa0c:	2001      	movs	r0, #1
   1fa0e:	e7fa      	b.n	1fa06 <latch_pending_read_and_check+0x46>
   1fa10:	00028a70 	.word	0x00028a70

0001fa14 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fa14:	f100 0208 	add.w	r2, r0, #8
   1fa18:	4b0e      	ldr	r3, [pc, #56]	; (1fa54 <release_handler+0x40>)
   1fa1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1fa1e:	f413 7f80 	tst.w	r3, #256	; 0x100
   1fa22:	d016      	beq.n	1fa52 <release_handler+0x3e>
{
   1fa24:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1fa26:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1fa2a:	4610      	mov	r0, r2
   1fa2c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1fa30:	4a08      	ldr	r2, [pc, #32]	; (1fa54 <release_handler+0x40>)
   1fa32:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
   1fa36:	4620      	mov	r0, r4
   1fa38:	f7ff ff12 	bl	1f860 <handler_in_use>
   1fa3c:	b100      	cbz	r0, 1fa40 <release_handler+0x2c>
}
   1fa3e:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
   1fa40:	4804      	ldr	r0, [pc, #16]	; (1fa54 <release_handler+0x40>)
   1fa42:	2300      	movs	r3, #0
   1fa44:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1fa48:	4621      	mov	r1, r4
   1fa4a:	3068      	adds	r0, #104	; 0x68
   1fa4c:	f7ff feb2 	bl	1f7b4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1fa50:	e7f5      	b.n	1fa3e <release_handler+0x2a>
   1fa52:	4770      	bx	lr
   1fa54:	20000710 	.word	0x20000710

0001fa58 <pin_handler_trigger_uninit>:
{
   1fa58:	b510      	push	{r4, lr}
   1fa5a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
   1fa5c:	f7ff fed8 	bl	1f810 <pin_in_use_by_te>
   1fa60:	b140      	cbz	r0, 1fa74 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1fa62:	4620      	mov	r0, r4
   1fa64:	f7ff fef4 	bl	1f850 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1fa68:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1fa6c:	4b06      	ldr	r3, [pc, #24]	; (1fa88 <pin_handler_trigger_uninit+0x30>)
   1fa6e:	2200      	movs	r2, #0
   1fa70:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1fa74:	4620      	mov	r0, r4
   1fa76:	f7ff ffcd 	bl	1fa14 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1fa7a:	3408      	adds	r4, #8
   1fa7c:	4b03      	ldr	r3, [pc, #12]	; (1fa8c <pin_handler_trigger_uninit+0x34>)
   1fa7e:	2200      	movs	r2, #0
   1fa80:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
   1fa84:	bd10      	pop	{r4, pc}
   1fa86:	bf00      	nop
   1fa88:	40006000 	.word	0x40006000
   1fa8c:	20000710 	.word	0x20000710

0001fa90 <pin_handler_set>:
{
   1fa90:	b570      	push	{r4, r5, r6, lr}
   1fa92:	b082      	sub	sp, #8
   1fa94:	4606      	mov	r6, r0
   1fa96:	460c      	mov	r4, r1
   1fa98:	4615      	mov	r5, r2
    release_handler(pin);
   1fa9a:	f7ff ffbb 	bl	1fa14 <release_handler>
    if (!handler)
   1fa9e:	b324      	cbz	r4, 1faea <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
   1faa0:	4629      	mov	r1, r5
   1faa2:	4620      	mov	r0, r4
   1faa4:	f7ff fef6 	bl	1f894 <find_handler>
    if (handler_id < 0)
   1faa8:	1e03      	subs	r3, r0, #0
   1faaa:	db13      	blt.n	1fad4 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
   1faac:	4a10      	ldr	r2, [pc, #64]	; (1faf0 <pin_handler_set+0x60>)
   1faae:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1fab2:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1fab6:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1fab8:	025b      	lsls	r3, r3, #9
   1faba:	b29b      	uxth	r3, r3
   1fabc:	f106 0008 	add.w	r0, r6, #8
   1fac0:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
   1fac4:	430b      	orrs	r3, r1
   1fac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1faca:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
   1face:	4809      	ldr	r0, [pc, #36]	; (1faf4 <pin_handler_set+0x64>)
}
   1fad0:	b002      	add	sp, #8
   1fad2:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1fad4:	f10d 0107 	add.w	r1, sp, #7
   1fad8:	4807      	ldr	r0, [pc, #28]	; (1faf8 <pin_handler_set+0x68>)
   1fada:	f7ff fe47 	bl	1f76c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1fade:	4b05      	ldr	r3, [pc, #20]	; (1faf4 <pin_handler_set+0x64>)
   1fae0:	4298      	cmp	r0, r3
   1fae2:	d1f5      	bne.n	1fad0 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
   1fae4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1fae8:	e7e0      	b.n	1faac <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
   1faea:	4802      	ldr	r0, [pc, #8]	; (1faf4 <pin_handler_set+0x64>)
   1faec:	e7f0      	b.n	1fad0 <pin_handler_set+0x40>
   1faee:	bf00      	nop
   1faf0:	20000710 	.word	0x20000710
   1faf4:	0bad0000 	.word	0x0bad0000
   1faf8:	20000778 	.word	0x20000778

0001fafc <port_event_handle>:

static void port_event_handle(void)
{
   1fafc:	b570      	push	{r4, r5, r6, lr}
   1fafe:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
   1fb00:	4a2c      	ldr	r2, [pc, #176]	; (1fbb4 <port_event_handle+0xb8>)
   1fb02:	466b      	mov	r3, sp
   1fb04:	e892 0003 	ldmia.w	r2, {r0, r1}
   1fb08:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
   1fb0c:	2300      	movs	r3, #0
   1fb0e:	a802      	add	r0, sp, #8
   1fb10:	e00b      	b.n	1fb2a <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
   1fb12:	aa04      	add	r2, sp, #16
   1fb14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1fb18:	f852 2c10 	ldr.w	r2, [r2, #-16]
   1fb1c:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
   1fb20:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
   1fb24:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
   1fb28:	3301      	adds	r3, #1
   1fb2a:	2b01      	cmp	r3, #1
   1fb2c:	d9f1      	bls.n	1fb12 <port_event_handle+0x16>
   1fb2e:	e03d      	b.n	1fbac <port_event_handle+0xb0>
        case 1: return NRF_P1;
   1fb30:	4e21      	ldr	r6, [pc, #132]	; (1fbb8 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fb32:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   1fb36:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
   1fb3a:	f3c2 4201 	ubfx	r2, r2, #16, #2
   1fb3e:	f7ff fee5 	bl	1f90c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
   1fb42:	2301      	movs	r3, #1
   1fb44:	40ab      	lsls	r3, r5
   1fb46:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
   1fb4a:	ab04      	add	r3, sp, #16
   1fb4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1fb50:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1fb54:	b1f8      	cbz	r0, 1fb96 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
   1fb56:	fa90 f0a0 	rbit	r0, r0
   1fb5a:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
   1fb5e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fb62:	f100 0208 	add.w	r2, r0, #8
   1fb66:	4b15      	ldr	r3, [pc, #84]	; (1fbbc <port_event_handle+0xc0>)
   1fb68:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   1fb6c:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1fb70:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
   1fb72:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1fb76:	ae02      	add	r6, sp, #8
   1fb78:	2301      	movs	r3, #1
   1fb7a:	fa03 f202 	lsl.w	r2, r3, r2
   1fb7e:	5d73      	ldrb	r3, [r6, r5]
   1fb80:	ea23 0302 	bic.w	r3, r3, r2
   1fb84:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
   1fb86:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
   1fb8a:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fb8c:	2b01      	cmp	r3, #1
   1fb8e:	d0cf      	beq.n	1fb30 <port_event_handle+0x34>
        case 0: return NRF_P0;
   1fb90:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1fb94:	e7cd      	b.n	1fb32 <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1fb96:	3401      	adds	r4, #1
   1fb98:	2c01      	cmp	r4, #1
   1fb9a:	d9d6      	bls.n	1fb4a <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fb9c:	4b08      	ldr	r3, [pc, #32]	; (1fbc0 <port_event_handle+0xc4>)
   1fb9e:	2200      	movs	r2, #0
   1fba0:	601a      	str	r2, [r3, #0]
   1fba2:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
   1fba4:	a802      	add	r0, sp, #8
   1fba6:	f7ff ff0b 	bl	1f9c0 <latch_pending_read_and_check>
   1fbaa:	b108      	cbz	r0, 1fbb0 <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1fbac:	2400      	movs	r4, #0
   1fbae:	e7f3      	b.n	1fb98 <port_event_handle+0x9c>
}
   1fbb0:	b004      	add	sp, #16
   1fbb2:	bd70      	pop	{r4, r5, r6, pc}
   1fbb4:	00028a70 	.word	0x00028a70
   1fbb8:	50000300 	.word	0x50000300
   1fbbc:	20000710 	.word	0x20000710
   1fbc0:	4000617c 	.word	0x4000617c

0001fbc4 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
   1fbc4:	b538      	push	{r3, r4, r5, lr}
   1fbc6:	4604      	mov	r4, r0
    while (mask)
   1fbc8:	b1cc      	cbz	r4, 1fbfe <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
   1fbca:	fa94 f3a4 	rbit	r3, r4
   1fbce:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1fbd2:	2201      	movs	r2, #1
   1fbd4:	409a      	lsls	r2, r3
   1fbd6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1fbda:	4a09      	ldr	r2, [pc, #36]	; (1fc00 <gpiote_evt_handle+0x3c>)
   1fbdc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1fbe0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1fbe4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1fbe8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1fbec:	f3c0 4001 	ubfx	r0, r0, #16, #2
   1fbf0:	f007 fcd3 	bl	2759a <gpiote_polarity_to_trigger>
   1fbf4:	4601      	mov	r1, r0
   1fbf6:	4628      	mov	r0, r5
   1fbf8:	f7ff fe72 	bl	1f8e0 <call_handler>
   1fbfc:	e7e4      	b.n	1fbc8 <gpiote_evt_handle+0x4>
    }
}
   1fbfe:	bd38      	pop	{r3, r4, r5, pc}
   1fc00:	40006000 	.word	0x40006000

0001fc04 <nrfx_gpiote_input_configure>:
{
   1fc04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fc08:	4604      	mov	r4, r0
   1fc0a:	4615      	mov	r5, r2
   1fc0c:	461e      	mov	r6, r3
    if (p_input_config)
   1fc0e:	b361      	cbz	r1, 1fc6a <nrfx_gpiote_input_configure+0x66>
   1fc10:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
   1fc12:	f007 fcac 	bl	2756e <pin_is_task_output>
   1fc16:	2800      	cmp	r0, #0
   1fc18:	f040 8097 	bne.w	1fd4a <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
   1fc1c:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1fc20:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fc22:	2b01      	cmp	r3, #1
   1fc24:	d042      	beq.n	1fcac <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
   1fc26:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1fc2a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1fc2e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1fc32:	2f00      	cmp	r7, #0
   1fc34:	d03c      	beq.n	1fcb0 <nrfx_gpiote_input_configure+0xac>
   1fc36:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1fc38:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
   1fc3c:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fc40:	2f00      	cmp	r7, #0
   1fc42:	d037      	beq.n	1fcb4 <nrfx_gpiote_input_configure+0xb0>
   1fc44:	7839      	ldrb	r1, [r7, #0]
   1fc46:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1fc48:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
   1fc4a:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1fc4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1fc52:	4a42      	ldr	r2, [pc, #264]	; (1fd5c <nrfx_gpiote_input_configure+0x158>)
   1fc54:	f104 0108 	add.w	r1, r4, #8
   1fc58:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1fc5c:	f023 0302 	bic.w	r3, r3, #2
   1fc60:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1fc62:	f043 0301 	orr.w	r3, r3, #1
   1fc66:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1fc6a:	b1b5      	cbz	r5, 1fc9a <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1fc6c:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1fc70:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
   1fc74:	4620      	mov	r0, r4
   1fc76:	f7ff fde1 	bl	1f83c <pin_is_output>
   1fc7a:	b1e8      	cbz	r0, 1fcb8 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
   1fc7c:	f1b9 0f00 	cmp.w	r9, #0
   1fc80:	d165      	bne.n	1fd4e <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1fc82:	4b36      	ldr	r3, [pc, #216]	; (1fd5c <nrfx_gpiote_input_configure+0x158>)
   1fc84:	f104 0208 	add.w	r2, r4, #8
   1fc88:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   1fc8c:	f020 001c 	bic.w	r0, r0, #28
   1fc90:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1fc92:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
   1fc96:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
   1fc9a:	2e00      	cmp	r6, #0
   1fc9c:	d05b      	beq.n	1fd56 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1fc9e:	6872      	ldr	r2, [r6, #4]
   1fca0:	6831      	ldr	r1, [r6, #0]
   1fca2:	4620      	mov	r0, r4
   1fca4:	f7ff fef4 	bl	1fa90 <pin_handler_set>
}
   1fca8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
   1fcac:	482c      	ldr	r0, [pc, #176]	; (1fd60 <nrfx_gpiote_input_configure+0x15c>)
   1fcae:	e7bc      	b.n	1fc2a <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1fcb0:	2100      	movs	r1, #0
   1fcb2:	e7c1      	b.n	1fc38 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fcb4:	2100      	movs	r1, #0
   1fcb6:	e7c7      	b.n	1fc48 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1fcb8:	4b28      	ldr	r3, [pc, #160]	; (1fd5c <nrfx_gpiote_input_configure+0x158>)
   1fcba:	f104 0208 	add.w	r2, r4, #8
   1fcbe:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
   1fcc2:	f027 0720 	bic.w	r7, r7, #32
   1fcc6:	04ff      	lsls	r7, r7, #19
   1fcc8:	0cff      	lsrs	r7, r7, #19
   1fcca:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
   1fcce:	f1b9 0f00 	cmp.w	r9, #0
   1fcd2:	d0d6      	beq.n	1fc82 <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
   1fcd4:	f1b8 0f03 	cmp.w	r8, #3
   1fcd8:	d83b      	bhi.n	1fd52 <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1fcda:	686b      	ldr	r3, [r5, #4]
   1fcdc:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1fcde:	f1b8 0f00 	cmp.w	r8, #0
   1fce2:	d106      	bne.n	1fcf2 <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
   1fce4:	f505 75a2 	add.w	r5, r5, #324	; 0x144
   1fce8:	4b1e      	ldr	r3, [pc, #120]	; (1fd64 <nrfx_gpiote_input_configure+0x160>)
   1fcea:	2200      	movs	r2, #0
   1fcec:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   1fcf0:	e7c7      	b.n	1fc82 <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
   1fcf2:	4640      	mov	r0, r8
   1fcf4:	f007 fc52 	bl	2759c <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fcf8:	4b1a      	ldr	r3, [pc, #104]	; (1fd64 <nrfx_gpiote_input_configure+0x160>)
   1fcfa:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1fcfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1fd02:	f021 0103 	bic.w	r1, r1, #3
   1fd06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1fd0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1fd0e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1fd12:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1fd16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fd1a:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
   1fd1e:	0221      	lsls	r1, r4, #8
   1fd20:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1fd24:	0400      	lsls	r0, r0, #16
   1fd26:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fd2a:	4301      	orrs	r1, r0
   1fd2c:	ea4c 0101 	orr.w	r1, ip, r1
   1fd30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1fd34:	036d      	lsls	r5, r5, #13
   1fd36:	b2ad      	uxth	r5, r5
   1fd38:	f104 0308 	add.w	r3, r4, #8
   1fd3c:	432f      	orrs	r7, r5
   1fd3e:	f047 0720 	orr.w	r7, r7, #32
   1fd42:	4a06      	ldr	r2, [pc, #24]	; (1fd5c <nrfx_gpiote_input_configure+0x158>)
   1fd44:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
   1fd48:	e79b      	b.n	1fc82 <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
   1fd4a:	4807      	ldr	r0, [pc, #28]	; (1fd68 <nrfx_gpiote_input_configure+0x164>)
   1fd4c:	e7ac      	b.n	1fca8 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
   1fd4e:	4806      	ldr	r0, [pc, #24]	; (1fd68 <nrfx_gpiote_input_configure+0x164>)
   1fd50:	e7aa      	b.n	1fca8 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
   1fd52:	4805      	ldr	r0, [pc, #20]	; (1fd68 <nrfx_gpiote_input_configure+0x164>)
   1fd54:	e7a8      	b.n	1fca8 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
   1fd56:	4805      	ldr	r0, [pc, #20]	; (1fd6c <nrfx_gpiote_input_configure+0x168>)
   1fd58:	e7a6      	b.n	1fca8 <nrfx_gpiote_input_configure+0xa4>
   1fd5a:	bf00      	nop
   1fd5c:	20000710 	.word	0x20000710
   1fd60:	50000300 	.word	0x50000300
   1fd64:	40006000 	.word	0x40006000
   1fd68:	0bad0004 	.word	0x0bad0004
   1fd6c:	0bad0000 	.word	0x0bad0000

0001fd70 <nrfx_gpiote_output_configure>:
{
   1fd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd72:	4604      	mov	r4, r0
   1fd74:	4615      	mov	r5, r2
    if (p_config)
   1fd76:	2900      	cmp	r1, #0
   1fd78:	d052      	beq.n	1fe20 <nrfx_gpiote_output_configure+0xb0>
   1fd7a:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1fd7c:	f007 fc06 	bl	2758c <pin_is_input>
   1fd80:	b128      	cbz	r0, 1fd8e <nrfx_gpiote_output_configure+0x1e>
   1fd82:	4620      	mov	r0, r4
   1fd84:	f7ff fd44 	bl	1f810 <pin_in_use_by_te>
   1fd88:	2800      	cmp	r0, #0
   1fd8a:	f040 809d 	bne.w	1fec8 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1fd8e:	4620      	mov	r0, r4
   1fd90:	f7ff fd48 	bl	1f824 <pin_has_trigger>
   1fd94:	b118      	cbz	r0, 1fd9e <nrfx_gpiote_output_configure+0x2e>
   1fd96:	7873      	ldrb	r3, [r6, #1]
   1fd98:	2b01      	cmp	r3, #1
   1fd9a:	f000 8097 	beq.w	1fecc <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1fd9e:	f106 0c01 	add.w	ip, r6, #1
   1fda2:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
   1fda4:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   1fda8:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1fdaa:	2b01      	cmp	r3, #1
   1fdac:	d07c      	beq.n	1fea8 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
   1fdae:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1fdb2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1fdb6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1fdba:	f1bc 0f00 	cmp.w	ip, #0
   1fdbe:	d075      	beq.n	1feac <nrfx_gpiote_output_configure+0x13c>
   1fdc0:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   1fdc2:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1fdc6:	2f00      	cmp	r7, #0
   1fdc8:	d072      	beq.n	1feb0 <nrfx_gpiote_output_configure+0x140>
   1fdca:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1fdce:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1fdd2:	2e00      	cmp	r6, #0
   1fdd4:	d06f      	beq.n	1feb6 <nrfx_gpiote_output_configure+0x146>
   1fdd6:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1fdda:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
   1fdde:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1fde2:	f1bc 0f00 	cmp.w	ip, #0
   1fde6:	d069      	beq.n	1febc <nrfx_gpiote_output_configure+0x14c>
   1fde8:	7873      	ldrb	r3, [r6, #1]
   1fdea:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1fdec:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fdf0:	2f00      	cmp	r7, #0
   1fdf2:	d065      	beq.n	1fec0 <nrfx_gpiote_output_configure+0x150>
   1fdf4:	78b7      	ldrb	r7, [r6, #2]
   1fdf6:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1fdf8:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1fdfa:	2e00      	cmp	r6, #0
   1fdfc:	d062      	beq.n	1fec4 <nrfx_gpiote_output_configure+0x154>
   1fdfe:	7836      	ldrb	r6, [r6, #0]
   1fe00:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fe02:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   1fe04:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
   1fe06:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   1fe0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1fe0e:	4a33      	ldr	r2, [pc, #204]	; (1fedc <nrfx_gpiote_output_configure+0x16c>)
   1fe10:	f104 0108 	add.w	r1, r4, #8
   1fe14:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1fe18:	f043 0303 	orr.w	r3, r3, #3
   1fe1c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1fe20:	2d00      	cmp	r5, #0
   1fe22:	d055      	beq.n	1fed0 <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
   1fe24:	4620      	mov	r0, r4
   1fe26:	f007 fbb1 	bl	2758c <pin_is_input>
   1fe2a:	2800      	cmp	r0, #0
   1fe2c:	d152      	bne.n	1fed4 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
   1fe2e:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
   1fe30:	f502 71a2 	add.w	r1, r2, #324	; 0x144
   1fe34:	4b2a      	ldr	r3, [pc, #168]	; (1fee0 <nrfx_gpiote_output_configure+0x170>)
   1fe36:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1fe3a:	4928      	ldr	r1, [pc, #160]	; (1fedc <nrfx_gpiote_output_configure+0x16c>)
   1fe3c:	f104 0008 	add.w	r0, r4, #8
   1fe40:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
   1fe44:	f023 0320 	bic.w	r3, r3, #32
   1fe48:	04db      	lsls	r3, r3, #19
   1fe4a:	0cdb      	lsrs	r3, r3, #19
   1fe4c:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1fe50:	7869      	ldrb	r1, [r5, #1]
   1fe52:	2900      	cmp	r1, #0
   1fe54:	d040      	beq.n	1fed8 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   1fe56:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1fe5a:	4d21      	ldr	r5, [pc, #132]	; (1fee0 <nrfx_gpiote_output_configure+0x170>)
   1fe5c:	f502 76a2 	add.w	r6, r2, #324	; 0x144
   1fe60:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
   1fe64:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
   1fe68:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
   1fe6c:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fe70:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
   1fe74:	0220      	lsls	r0, r4, #8
   1fe76:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1fe7a:	0409      	lsls	r1, r1, #16
   1fe7c:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fe80:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1fe82:	ea4f 500c 	mov.w	r0, ip, lsl #20
   1fe86:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1fe8a:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fe8c:	4339      	orrs	r1, r7
   1fe8e:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1fe92:	0352      	lsls	r2, r2, #13
   1fe94:	b292      	uxth	r2, r2
   1fe96:	3408      	adds	r4, #8
   1fe98:	431a      	orrs	r2, r3
   1fe9a:	f042 0220 	orr.w	r2, r2, #32
   1fe9e:	4b0f      	ldr	r3, [pc, #60]	; (1fedc <nrfx_gpiote_output_configure+0x16c>)
   1fea0:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
   1fea4:	480f      	ldr	r0, [pc, #60]	; (1fee4 <nrfx_gpiote_output_configure+0x174>)
   1fea6:	e014      	b.n	1fed2 <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
   1fea8:	490f      	ldr	r1, [pc, #60]	; (1fee8 <nrfx_gpiote_output_configure+0x178>)
   1feaa:	e782      	b.n	1fdb2 <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   1feac:	2300      	movs	r3, #0
   1feae:	e788      	b.n	1fdc2 <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   1feb0:	f04f 0e00 	mov.w	lr, #0
   1feb4:	e78b      	b.n	1fdce <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   1feb6:	f04f 0e00 	mov.w	lr, #0
   1feba:	e78e      	b.n	1fdda <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   1febc:	2300      	movs	r3, #0
   1febe:	e795      	b.n	1fdec <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   1fec0:	2700      	movs	r7, #0
   1fec2:	e799      	b.n	1fdf8 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   1fec4:	2600      	movs	r6, #0
   1fec6:	e79c      	b.n	1fe02 <nrfx_gpiote_output_configure+0x92>
   1fec8:	4808      	ldr	r0, [pc, #32]	; (1feec <nrfx_gpiote_output_configure+0x17c>)
   1feca:	e002      	b.n	1fed2 <nrfx_gpiote_output_configure+0x162>
   1fecc:	4807      	ldr	r0, [pc, #28]	; (1feec <nrfx_gpiote_output_configure+0x17c>)
   1fece:	e000      	b.n	1fed2 <nrfx_gpiote_output_configure+0x162>
   1fed0:	4804      	ldr	r0, [pc, #16]	; (1fee4 <nrfx_gpiote_output_configure+0x174>)
}
   1fed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
   1fed4:	4805      	ldr	r0, [pc, #20]	; (1feec <nrfx_gpiote_output_configure+0x17c>)
   1fed6:	e7fc      	b.n	1fed2 <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
   1fed8:	4802      	ldr	r0, [pc, #8]	; (1fee4 <nrfx_gpiote_output_configure+0x174>)
   1feda:	e7fa      	b.n	1fed2 <nrfx_gpiote_output_configure+0x162>
   1fedc:	20000710 	.word	0x20000710
   1fee0:	40006000 	.word	0x40006000
   1fee4:	0bad0000 	.word	0x0bad0000
   1fee8:	50000300 	.word	0x50000300
   1feec:	0bad0004 	.word	0x0bad0004

0001fef0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1fef0:	4b01      	ldr	r3, [pc, #4]	; (1fef8 <nrfx_gpiote_global_callback_set+0x8>)
   1fef2:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
   1fef4:	60d9      	str	r1, [r3, #12]
}
   1fef6:	4770      	bx	lr
   1fef8:	20000710 	.word	0x20000710

0001fefc <nrfx_gpiote_channel_get>:
{
   1fefc:	b538      	push	{r3, r4, r5, lr}
   1fefe:	4604      	mov	r4, r0
   1ff00:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
   1ff02:	f7ff fc85 	bl	1f810 <pin_in_use_by_te>
   1ff06:	b140      	cbz	r0, 1ff1a <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1ff08:	f104 0008 	add.w	r0, r4, #8
   1ff0c:	4b04      	ldr	r3, [pc, #16]	; (1ff20 <nrfx_gpiote_channel_get+0x24>)
   1ff0e:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
   1ff12:	0b5b      	lsrs	r3, r3, #13
   1ff14:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
   1ff16:	4803      	ldr	r0, [pc, #12]	; (1ff24 <nrfx_gpiote_channel_get+0x28>)
}
   1ff18:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ff1a:	4803      	ldr	r0, [pc, #12]	; (1ff28 <nrfx_gpiote_channel_get+0x2c>)
   1ff1c:	e7fc      	b.n	1ff18 <nrfx_gpiote_channel_get+0x1c>
   1ff1e:	bf00      	nop
   1ff20:	20000710 	.word	0x20000710
   1ff24:	0bad0000 	.word	0x0bad0000
   1ff28:	0bad0004 	.word	0x0bad0004

0001ff2c <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1ff2c:	4b0f      	ldr	r3, [pc, #60]	; (1ff6c <nrfx_gpiote_init+0x40>)
   1ff2e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
   1ff32:	b10b      	cbz	r3, 1ff38 <nrfx_gpiote_init+0xc>
        return err_code;
   1ff34:	480e      	ldr	r0, [pc, #56]	; (1ff70 <nrfx_gpiote_init+0x44>)
}
   1ff36:	4770      	bx	lr
{
   1ff38:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1ff3a:	4c0c      	ldr	r4, [pc, #48]	; (1ff6c <nrfx_gpiote_init+0x40>)
   1ff3c:	2254      	movs	r2, #84	; 0x54
   1ff3e:	2100      	movs	r1, #0
   1ff40:	f104 0010 	add.w	r0, r4, #16
   1ff44:	f008 facc 	bl	284e0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1ff48:	2006      	movs	r0, #6
   1ff4a:	f7f5 fc27 	bl	1579c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ff4e:	4b09      	ldr	r3, [pc, #36]	; (1ff74 <nrfx_gpiote_init+0x48>)
   1ff50:	2200      	movs	r2, #0
   1ff52:	601a      	str	r2, [r3, #0]
   1ff54:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1ff56:	4b08      	ldr	r3, [pc, #32]	; (1ff78 <nrfx_gpiote_init+0x4c>)
   1ff58:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1ff5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1ff60:	2301      	movs	r3, #1
   1ff62:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1ff66:	66a3      	str	r3, [r4, #104]	; 0x68
    return err_code;
   1ff68:	4804      	ldr	r0, [pc, #16]	; (1ff7c <nrfx_gpiote_init+0x50>)
}
   1ff6a:	bd10      	pop	{r4, pc}
   1ff6c:	20000710 	.word	0x20000710
   1ff70:	0bad0005 	.word	0x0bad0005
   1ff74:	4000617c 	.word	0x4000617c
   1ff78:	40006000 	.word	0x40006000
   1ff7c:	0bad0000 	.word	0x0bad0000

0001ff80 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1ff80:	4b03      	ldr	r3, [pc, #12]	; (1ff90 <nrfx_gpiote_is_init+0x10>)
   1ff82:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   1ff86:	3800      	subs	r0, #0
   1ff88:	bf18      	it	ne
   1ff8a:	2001      	movne	r0, #1
   1ff8c:	4770      	bx	lr
   1ff8e:	bf00      	nop
   1ff90:	20000710 	.word	0x20000710

0001ff94 <nrfx_gpiote_channel_free>:
{
   1ff94:	b508      	push	{r3, lr}
   1ff96:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1ff98:	4801      	ldr	r0, [pc, #4]	; (1ffa0 <nrfx_gpiote_channel_free+0xc>)
   1ff9a:	f7ff fc0b 	bl	1f7b4 <nrfx_flag32_free>
}
   1ff9e:	bd08      	pop	{r3, pc}
   1ffa0:	20000774 	.word	0x20000774

0001ffa4 <nrfx_gpiote_channel_alloc>:
{
   1ffa4:	b508      	push	{r3, lr}
   1ffa6:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1ffa8:	4801      	ldr	r0, [pc, #4]	; (1ffb0 <nrfx_gpiote_channel_alloc+0xc>)
   1ffaa:	f7ff fbdf 	bl	1f76c <nrfx_flag32_alloc>
}
   1ffae:	bd08      	pop	{r3, pc}
   1ffb0:	20000774 	.word	0x20000774

0001ffb4 <nrfx_gpiote_trigger_enable>:
{
   1ffb4:	b538      	push	{r3, r4, r5, lr}
   1ffb6:	4604      	mov	r4, r0
   1ffb8:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1ffba:	f7ff fc29 	bl	1f810 <pin_in_use_by_te>
   1ffbe:	b308      	cbz	r0, 20004 <CONFIG_PM_SRAM_SIZE+0x4>
   1ffc0:	4620      	mov	r0, r4
   1ffc2:	f007 fae3 	bl	2758c <pin_is_input>
   1ffc6:	b1e8      	cbz	r0, 20004 <CONFIG_PM_SRAM_SIZE+0x4>
        uint8_t ch = pin_te_get(pin);
   1ffc8:	4620      	mov	r0, r4
   1ffca:	f7ff fc41 	bl	1f850 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1ffce:	0083      	lsls	r3, r0, #2
   1ffd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
   1ffd4:	b29b      	uxth	r3, r3
   1ffd6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ffda:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ffde:	2200      	movs	r2, #0
   1ffe0:	601a      	str	r2, [r3, #0]
   1ffe2:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1ffe4:	4a22      	ldr	r2, [pc, #136]	; (20070 <CONFIG_PM_SRAM_SIZE+0x70>)
   1ffe6:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1ffea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1ffee:	f043 0301 	orr.w	r3, r3, #1
   1fff2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
   1fff6:	b39d      	cbz	r5, 20060 <CONFIG_PM_SRAM_SIZE+0x60>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1fff8:	2301      	movs	r3, #1
   1fffa:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
   1fffe:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
   20002:	e02d      	b.n	20060 <CONFIG_PM_SRAM_SIZE+0x60>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   20004:	f104 0308 	add.w	r3, r4, #8
   20008:	4a1a      	ldr	r2, [pc, #104]	; (20074 <CONFIG_PM_SRAM_SIZE+0x74>)
   2000a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   2000e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   20012:	2b04      	cmp	r3, #4
   20014:	d012      	beq.n	2003c <CONFIG_PM_SRAM_SIZE+0x3c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   20016:	2b05      	cmp	r3, #5
   20018:	d023      	beq.n	20062 <CONFIG_PM_SRAM_SIZE+0x62>
    *p_pin = pin_number & 0x1F;
   2001a:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   2001e:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20020:	2b01      	cmp	r3, #1
   20022:	d009      	beq.n	20038 <CONFIG_PM_SRAM_SIZE+0x38>
        case 0: return NRF_P0;
   20024:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
   20028:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   2002c:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2002e:	f013 0f01 	tst.w	r3, #1
   20032:	d018      	beq.n	20066 <CONFIG_PM_SRAM_SIZE+0x66>
   20034:	2003      	movs	r0, #3
   20036:	e002      	b.n	2003e <CONFIG_PM_SRAM_SIZE+0x3e>
        case 1: return NRF_P1;
   20038:	4b0f      	ldr	r3, [pc, #60]	; (20078 <CONFIG_PM_SRAM_SIZE+0x78>)
   2003a:	e7f5      	b.n	20028 <CONFIG_PM_SRAM_SIZE+0x28>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   2003c:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
   2003e:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
   20042:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20044:	2c01      	cmp	r4, #1
   20046:	d010      	beq.n	2006a <CONFIG_PM_SRAM_SIZE+0x6a>
        case 0: return NRF_P0;
   20048:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2004c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   20050:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
   20054:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20058:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2005c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
   20060:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   20062:	2002      	movs	r0, #2
   20064:	e7eb      	b.n	2003e <CONFIG_PM_SRAM_SIZE+0x3e>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   20066:	2002      	movs	r0, #2
   20068:	e7e9      	b.n	2003e <CONFIG_PM_SRAM_SIZE+0x3e>
        case 1: return NRF_P1;
   2006a:	4903      	ldr	r1, [pc, #12]	; (20078 <CONFIG_PM_SRAM_SIZE+0x78>)
   2006c:	e7ee      	b.n	2004c <CONFIG_PM_SRAM_SIZE+0x4c>
   2006e:	bf00      	nop
   20070:	40006000 	.word	0x40006000
   20074:	20000710 	.word	0x20000710
   20078:	50000300 	.word	0x50000300

0002007c <nrfx_gpiote_trigger_disable>:
{
   2007c:	b510      	push	{r4, lr}
   2007e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   20080:	f7ff fbc6 	bl	1f810 <pin_in_use_by_te>
   20084:	b1a0      	cbz	r0, 200b0 <nrfx_gpiote_trigger_disable+0x34>
   20086:	4620      	mov	r0, r4
   20088:	f007 fa80 	bl	2758c <pin_is_input>
   2008c:	b180      	cbz	r0, 200b0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
   2008e:	4620      	mov	r0, r4
   20090:	f7ff fbde 	bl	1f850 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   20094:	2201      	movs	r2, #1
   20096:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
   20098:	4b0e      	ldr	r3, [pc, #56]	; (200d4 <nrfx_gpiote_trigger_disable+0x58>)
   2009a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2009e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   200a2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   200a6:	f022 0203 	bic.w	r2, r2, #3
   200aa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
   200ae:	e00e      	b.n	200ce <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
   200b0:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   200b4:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200b6:	2c01      	cmp	r4, #1
   200b8:	d00a      	beq.n	200d0 <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
   200ba:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   200be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   200c2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
   200c6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
   200ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   200ce:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   200d0:	4901      	ldr	r1, [pc, #4]	; (200d8 <nrfx_gpiote_trigger_disable+0x5c>)
   200d2:	e7f4      	b.n	200be <nrfx_gpiote_trigger_disable+0x42>
   200d4:	40006000 	.word	0x40006000
   200d8:	50000300 	.word	0x50000300

000200dc <nrfx_gpiote_pin_uninit>:
{
   200dc:	b510      	push	{r4, lr}
   200de:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   200e0:	f7ff fb8c 	bl	1f7fc <pin_in_use>
   200e4:	b908      	cbnz	r0, 200ea <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
   200e6:	480c      	ldr	r0, [pc, #48]	; (20118 <nrfx_gpiote_pin_uninit+0x3c>)
}
   200e8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
   200ea:	4620      	mov	r0, r4
   200ec:	f7ff ffc6 	bl	2007c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   200f0:	4620      	mov	r0, r4
   200f2:	f7ff fcb1 	bl	1fa58 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
   200f6:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
   200fa:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   200fc:	2c01      	cmp	r4, #1
   200fe:	d008      	beq.n	20112 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
   20100:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   20104:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20108:	2102      	movs	r1, #2
   2010a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
   2010e:	4803      	ldr	r0, [pc, #12]	; (2011c <nrfx_gpiote_pin_uninit+0x40>)
   20110:	e7ea      	b.n	200e8 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
   20112:	4a03      	ldr	r2, [pc, #12]	; (20120 <nrfx_gpiote_pin_uninit+0x44>)
   20114:	e7f6      	b.n	20104 <nrfx_gpiote_pin_uninit+0x28>
   20116:	bf00      	nop
   20118:	0bad0004 	.word	0x0bad0004
   2011c:	0bad0000 	.word	0x0bad0000
   20120:	50000300 	.word	0x50000300

00020124 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
   20124:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   20126:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
   20128:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2012c:	2100      	movs	r1, #0
    uint32_t status = 0;
   2012e:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20130:	e003      	b.n	2013a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
   20132:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
   20134:	3304      	adds	r3, #4
   20136:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   20138:	3101      	adds	r1, #1
   2013a:	2907      	cmp	r1, #7
   2013c:	d814      	bhi.n	20168 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2013e:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   20142:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
   20146:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   20148:	2a00      	cmp	r2, #0
   2014a:	d0f2      	beq.n	20132 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
   2014c:	4a0b      	ldr	r2, [pc, #44]	; (2017c <nrfx_gpiote_irq_handler+0x58>)
   2014e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   20152:	4210      	tst	r0, r2
   20154:	d0ed      	beq.n	20132 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
   20156:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
   2015a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2015e:	2400      	movs	r4, #0
   20160:	6014      	str	r4, [r2, #0]
   20162:	6812      	ldr	r2, [r2, #0]
            status |= mask;
   20164:	4305      	orrs	r5, r0
   20166:	e7e4      	b.n	20132 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20168:	4b05      	ldr	r3, [pc, #20]	; (20180 <nrfx_gpiote_irq_handler+0x5c>)
   2016a:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   2016c:	b91b      	cbnz	r3, 20176 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
   2016e:	4628      	mov	r0, r5
   20170:	f7ff fd28 	bl	1fbc4 <gpiote_evt_handle>
}
   20174:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
   20176:	f7ff fcc1 	bl	1fafc <port_event_handle>
   2017a:	e7f8      	b.n	2016e <nrfx_gpiote_irq_handler+0x4a>
   2017c:	40006000 	.word	0x40006000
   20180:	4000617c 	.word	0x4000617c

00020184 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   20184:	b508      	push	{r3, lr}
   20186:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   20188:	4801      	ldr	r0, [pc, #4]	; (20190 <nrfx_ppi_channel_alloc+0xc>)
   2018a:	f7ff faef 	bl	1f76c <nrfx_flag32_alloc>
}
   2018e:	bd08      	pop	{r3, pc}
   20190:	20000780 	.word	0x20000780

00020194 <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
   20194:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   20196:	f010 0f01 	tst.w	r0, #1
   2019a:	d108      	bne.n	201ae <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
   2019c:	4806      	ldr	r0, [pc, #24]	; (201b8 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   2019e:	f013 0f02 	tst.w	r3, #2
   201a2:	d000      	beq.n	201a6 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   201a4:	4805      	ldr	r0, [pc, #20]	; (201bc <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   201a6:	f013 0f04 	tst.w	r3, #4
   201aa:	d102      	bne.n	201b2 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
   201ac:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   201ae:	4804      	ldr	r0, [pc, #16]	; (201c0 <twi_process_error+0x2c>)
   201b0:	e7f5      	b.n	2019e <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   201b2:	4804      	ldr	r0, [pc, #16]	; (201c4 <twi_process_error+0x30>)
    return ret;
   201b4:	e7fa      	b.n	201ac <twi_process_error+0x18>
   201b6:	bf00      	nop
   201b8:	0bad0001 	.word	0x0bad0001
   201bc:	0bae0001 	.word	0x0bae0001
   201c0:	0bae0000 	.word	0x0bae0000
   201c4:	0bae0002 	.word	0x0bae0002

000201c8 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   201c8:	b530      	push	{r4, r5, lr}
   201ca:	b083      	sub	sp, #12
   201cc:	4604      	mov	r4, r0
   201ce:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   201d0:	4b29      	ldr	r3, [pc, #164]	; (20278 <twi_tx_start_transfer+0xb0>)
   201d2:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   201d4:	2300      	movs	r3, #0
   201d6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   201da:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   201de:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   201e2:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   201e6:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   201ea:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   201ee:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   201f2:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   201f6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   201fa:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   201fc:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20200:	2301      	movs	r3, #1
   20202:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   20204:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   20208:	2b01      	cmp	r3, #1
   2020a:	d001      	beq.n	20210 <twi_tx_start_transfer+0x48>
   2020c:	2301      	movs	r3, #1
   2020e:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   20210:	4629      	mov	r1, r5
   20212:	4620      	mov	r0, r4
   20214:	f007 f9d6 	bl	275c4 <twi_send_byte>

    if (p_cb->handler)
   20218:	682b      	ldr	r3, [r5, #0]
   2021a:	b143      	cbz	r3, 2022e <twi_tx_start_transfer+0x66>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   2021c:	f240 2386 	movw	r3, #646	; 0x286
   20220:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   20222:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   20224:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   20228:	4814      	ldr	r0, [pc, #80]	; (2027c <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   2022a:	b003      	add	sp, #12
   2022c:	bd30      	pop	{r4, r5, pc}
        while ((hw_timeout > 0) &&
   2022e:	9b01      	ldr	r3, [sp, #4]
   20230:	2b00      	cmp	r3, #0
   20232:	dd08      	ble.n	20246 <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
   20234:	4629      	mov	r1, r5
   20236:	4620      	mov	r0, r4
   20238:	f007 fa14 	bl	27664 <twi_transfer>
        while ((hw_timeout > 0) &&
   2023c:	b118      	cbz	r0, 20246 <twi_tx_start_transfer+0x7e>
            hw_timeout--;
   2023e:	9b01      	ldr	r3, [sp, #4]
   20240:	3b01      	subs	r3, #1
   20242:	9301      	str	r3, [sp, #4]
   20244:	e7f3      	b.n	2022e <twi_tx_start_transfer+0x66>
        if (p_cb->error)
   20246:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   2024a:	b13b      	cbz	r3, 2025c <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
   2024c:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   20250:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   20254:	b170      	cbz	r0, 20274 <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
   20256:	f7ff ff9d 	bl	20194 <twi_process_error>
   2025a:	e000      	b.n	2025e <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   2025c:	4807      	ldr	r0, [pc, #28]	; (2027c <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
   2025e:	9b01      	ldr	r3, [sp, #4]
   20260:	2b00      	cmp	r3, #0
   20262:	dce2      	bgt.n	2022a <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   20264:	2300      	movs	r3, #0
   20266:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   2026a:	2305      	movs	r3, #5
   2026c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   20270:	4803      	ldr	r0, [pc, #12]	; (20280 <twi_tx_start_transfer+0xb8>)
    return ret_code;
   20272:	e7da      	b.n	2022a <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   20274:	4802      	ldr	r0, [pc, #8]	; (20280 <twi_tx_start_transfer+0xb8>)
   20276:	e7f2      	b.n	2025e <twi_tx_start_transfer+0x96>
   20278:	000186a0 	.word	0x000186a0
   2027c:	0bad0000 	.word	0x0bad0000
   20280:	0bad0001 	.word	0x0bad0001

00020284 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   20284:	b530      	push	{r4, r5, lr}
   20286:	b083      	sub	sp, #12
   20288:	4604      	mov	r4, r0
   2028a:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   2028c:	4b2d      	ldr	r3, [pc, #180]	; (20344 <twi_rx_start_transfer+0xc0>)
   2028e:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20290:	2300      	movs	r3, #0
   20292:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   20296:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   2029a:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   2029e:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   202a2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   202a6:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   202aa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   202ae:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   202b2:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   202b4:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   202b8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   202ba:	2b01      	cmp	r3, #1
   202bc:	d015      	beq.n	202ea <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
   202be:	2301      	movs	r3, #1
   202c0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202c4:	2301      	movs	r3, #1
   202c6:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   202c8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   202cc:	2b02      	cmp	r3, #2
   202ce:	d001      	beq.n	202d4 <twi_rx_start_transfer+0x50>
   202d0:	2301      	movs	r3, #1
   202d2:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   202d4:	682b      	ldr	r3, [r5, #0]
   202d6:	b183      	cbz	r3, 202fa <twi_rx_start_transfer+0x76>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   202d8:	f240 2386 	movw	r3, #646	; 0x286
   202dc:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   202de:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   202e0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
   202e4:	4818      	ldr	r0, [pc, #96]	; (20348 <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   202e6:	b003      	add	sp, #12
   202e8:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   202ea:	6a0b      	ldr	r3, [r1, #32]
   202ec:	f013 0f40 	tst.w	r3, #64	; 0x40
   202f0:	d1e5      	bne.n	202be <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
   202f2:	2302      	movs	r3, #2
   202f4:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
   202f8:	e7e4      	b.n	202c4 <twi_rx_start_transfer+0x40>
        while ((hw_timeout > 0) &&
   202fa:	9b01      	ldr	r3, [sp, #4]
   202fc:	2b00      	cmp	r3, #0
   202fe:	dd08      	ble.n	20312 <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
   20300:	4629      	mov	r1, r5
   20302:	4620      	mov	r0, r4
   20304:	f007 f9ae 	bl	27664 <twi_transfer>
        while ((hw_timeout > 0) &&
   20308:	b118      	cbz	r0, 20312 <twi_rx_start_transfer+0x8e>
               hw_timeout--;
   2030a:	9b01      	ldr	r3, [sp, #4]
   2030c:	3b01      	subs	r3, #1
   2030e:	9301      	str	r3, [sp, #4]
   20310:	e7f3      	b.n	202fa <twi_rx_start_transfer+0x76>
        if (p_cb->error)
   20312:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   20316:	b13b      	cbz	r3, 20328 <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
   20318:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   2031c:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
   20320:	b170      	cbz	r0, 20340 <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
   20322:	f7ff ff37 	bl	20194 <twi_process_error>
   20326:	e000      	b.n	2032a <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   20328:	4807      	ldr	r0, [pc, #28]	; (20348 <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
   2032a:	9b01      	ldr	r3, [sp, #4]
   2032c:	2b00      	cmp	r3, #0
   2032e:	dcda      	bgt.n	202e6 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   20330:	2300      	movs	r3, #0
   20332:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   20336:	2305      	movs	r3, #5
   20338:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
   2033c:	4803      	ldr	r0, [pc, #12]	; (2034c <twi_rx_start_transfer+0xc8>)
    return ret_code;
   2033e:	e7d2      	b.n	202e6 <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
   20340:	4802      	ldr	r0, [pc, #8]	; (2034c <twi_rx_start_transfer+0xc8>)
   20342:	e7f2      	b.n	2032a <twi_rx_start_transfer+0xa6>
   20344:	000186a0 	.word	0x000186a0
   20348:	0bad0000 	.word	0x0bad0000
   2034c:	0bad0001 	.word	0x0bad0001

00020350 <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
   20350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20352:	4686      	mov	lr, r0
   20354:	460c      	mov	r4, r1
   20356:	4615      	mov	r5, r2
   20358:	469c      	mov	ip, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   2035a:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
   2035e:	2b01      	cmp	r3, #1
   20360:	d027      	beq.n	203b2 <twi_xfer+0x62>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   20362:	2b02      	cmp	r3, #2
   20364:	d02a      	beq.n	203bc <twi_xfer+0x6c>
    p_reg->INTENCLR = mask;
   20366:	4b24      	ldr	r3, [pc, #144]	; (203f8 <twi_xfer+0xa8>)
   20368:	f8ce 3308 	str.w	r3, [lr, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
   2036c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   20370:	bb4b      	cbnz	r3, 203c6 <twi_xfer+0x76>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   20372:	f01c 0f04 	tst.w	ip, #4
   20376:	bf0c      	ite	eq
   20378:	2301      	moveq	r3, #1
   2037a:	2300      	movne	r3, #0
   2037c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
   20380:	f8c4 c020 	str.w	ip, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   20384:	f104 060c 	add.w	r6, r4, #12
   20388:	462f      	mov	r7, r5
   2038a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2038c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2038e:	683b      	ldr	r3, [r7, #0]
   20390:	6033      	str	r3, [r6, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
   20392:	686b      	ldr	r3, [r5, #4]
   20394:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   20396:	68eb      	ldr	r3, [r5, #12]
   20398:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
   2039a:	786b      	ldrb	r3, [r5, #1]
    p_reg->ADDRESS = address;
   2039c:	f8ce 3588 	str.w	r3, [lr, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   203a0:	782b      	ldrb	r3, [r5, #0]
   203a2:	2b01      	cmp	r3, #1
   203a4:	d020      	beq.n	203e8 <twi_xfer+0x98>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   203a6:	b99b      	cbnz	r3, 203d0 <twi_xfer+0x80>
   203a8:	f01c 0f20 	tst.w	ip, #32
   203ac:	d01a      	beq.n	203e4 <twi_xfer+0x94>
   203ae:	2301      	movs	r3, #1
   203b0:	e00f      	b.n	203d2 <twi_xfer+0x82>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   203b2:	7812      	ldrb	r2, [r2, #0]
   203b4:	2a01      	cmp	r2, #1
   203b6:	d1d4      	bne.n	20362 <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
   203b8:	4810      	ldr	r0, [pc, #64]	; (203fc <twi_xfer+0xac>)
   203ba:	e012      	b.n	203e2 <twi_xfer+0x92>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   203bc:	782b      	ldrb	r3, [r5, #0]
   203be:	2b01      	cmp	r3, #1
   203c0:	d0d1      	beq.n	20366 <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
   203c2:	480e      	ldr	r0, [pc, #56]	; (203fc <twi_xfer+0xac>)
   203c4:	e00d      	b.n	203e2 <twi_xfer+0x92>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   203c6:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   203c8:	f8ce 3304 	str.w	r3, [lr, #772]	; 0x304
        return err_code;
   203cc:	480c      	ldr	r0, [pc, #48]	; (20400 <twi_xfer+0xb0>)
   203ce:	e008      	b.n	203e2 <twi_xfer+0x92>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   203d0:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   203d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
   203d6:	4621      	mov	r1, r4
   203d8:	4670      	mov	r0, lr
   203da:	f7ff fef5 	bl	201c8 <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
   203de:	6823      	ldr	r3, [r4, #0]
   203e0:	b13b      	cbz	r3, 203f2 <twi_xfer+0xa2>
    {
        p_cb->busy = false;
    }
    return err_code;
}
   203e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   203e4:	2300      	movs	r3, #0
   203e6:	e7f4      	b.n	203d2 <twi_xfer+0x82>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   203e8:	4621      	mov	r1, r4
   203ea:	4670      	mov	r0, lr
   203ec:	f7ff ff4a 	bl	20284 <twi_rx_start_transfer>
   203f0:	e7f5      	b.n	203de <twi_xfer+0x8e>
        p_cb->busy = false;
   203f2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   203f6:	e7f4      	b.n	203e2 <twi_xfer+0x92>
   203f8:	00044286 	.word	0x00044286
   203fc:	0bad0005 	.word	0x0bad0005
   20400:	0bad000b 	.word	0x0bad000b

00020404 <nrfx_twi_init>:
{
   20404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   20406:	7904      	ldrb	r4, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   20408:	6806      	ldr	r6, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   2040a:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
   2040e:	4d2d      	ldr	r5, [pc, #180]	; (204c4 <nrfx_twi_init+0xc0>)
   20410:	eb05 0587 	add.w	r5, r5, r7, lsl #2
   20414:	f895 502e 	ldrb.w	r5, [r5, #46]	; 0x2e
   20418:	2d00      	cmp	r5, #0
   2041a:	d151      	bne.n	204c0 <nrfx_twi_init+0xbc>
    p_cb->handler         = event_handler;
   2041c:	4f29      	ldr	r7, [pc, #164]	; (204c4 <nrfx_twi_init+0xc0>)
   2041e:	ebc4 1c04 	rsb	ip, r4, r4, lsl #4
   20422:	eb07 058c 	add.w	r5, r7, ip, lsl #2
   20426:	f847 202c 	str.w	r2, [r7, ip, lsl #2]
    p_cb->p_context       = p_context;
   2042a:	606b      	str	r3, [r5, #4]
    p_cb->int_mask        = 0;
   2042c:	2300      	movs	r3, #0
   2042e:	60ab      	str	r3, [r5, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   20430:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    p_cb->repeated        = false;
   20434:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    p_cb->busy            = false;
   20438:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   2043c:	7b4b      	ldrb	r3, [r1, #13]
   2043e:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   20442:	7b8b      	ldrb	r3, [r1, #14]
   20444:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
    if (!p_config->skip_gpio_cfg)
   20448:	b9db      	cbnz	r3, 20482 <nrfx_twi_init+0x7e>
        TWI_PIN_INIT(p_config->scl);
   2044a:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
   2044c:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
   20450:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20452:	2b01      	cmp	r3, #1
   20454:	d030      	beq.n	204b8 <nrfx_twi_init+0xb4>
        case 0: return NRF_P0;
   20456:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   2045a:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   2045e:	f240 650c 	movw	r5, #1548	; 0x60c
   20462:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
        TWI_PIN_INIT(p_config->sda);
   20466:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
   20468:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
   2046c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   2046e:	2b01      	cmp	r3, #1
   20470:	d024      	beq.n	204bc <nrfx_twi_init+0xb8>
        case 0: return NRF_P0;
   20472:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   20476:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
   2047a:	f240 650c 	movw	r5, #1548	; 0x60c
   2047e:	f847 5023 	str.w	r5, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   20482:	7bcb      	ldrb	r3, [r1, #15]
   20484:	b92b      	cbnz	r3, 20492 <nrfx_twi_init+0x8e>
        nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
   20486:	680d      	ldr	r5, [r1, #0]
   20488:	684b      	ldr	r3, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
   2048a:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   2048e:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
   20492:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   20494:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
    if (p_cb->handler)
   20498:	b122      	cbz	r2, 204a4 <nrfx_twi_init+0xa0>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   2049a:	6800      	ldr	r0, [r0, #0]
   2049c:	f340 3007 	sbfx	r0, r0, #12, #8
   204a0:	f7f5 f97c 	bl	1579c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   204a4:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   204a8:	4b06      	ldr	r3, [pc, #24]	; (204c4 <nrfx_twi_init+0xc0>)
   204aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   204ae:	2301      	movs	r3, #1
   204b0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return err_code;
   204b4:	4804      	ldr	r0, [pc, #16]	; (204c8 <nrfx_twi_init+0xc4>)
}
   204b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   204b8:	4f04      	ldr	r7, [pc, #16]	; (204cc <nrfx_twi_init+0xc8>)
   204ba:	e7ce      	b.n	2045a <nrfx_twi_init+0x56>
   204bc:	4f03      	ldr	r7, [pc, #12]	; (204cc <nrfx_twi_init+0xc8>)
   204be:	e7da      	b.n	20476 <nrfx_twi_init+0x72>
        return err_code;
   204c0:	4803      	ldr	r0, [pc, #12]	; (204d0 <nrfx_twi_init+0xcc>)
   204c2:	e7f8      	b.n	204b6 <nrfx_twi_init+0xb2>
   204c4:	20003738 	.word	0x20003738
   204c8:	0bad0000 	.word	0x0bad0000
   204cc:	50000300 	.word	0x50000300
   204d0:	0bad0005 	.word	0x0bad0005

000204d4 <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   204d4:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   204d6:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   204d8:	2105      	movs	r1, #5
   204da:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   204de:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   204e2:	4a03      	ldr	r2, [pc, #12]	; (204f0 <nrfx_twi_enable+0x1c>)
   204e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   204e8:	2202      	movs	r2, #2
   204ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   204ee:	4770      	bx	lr
   204f0:	20003738 	.word	0x20003738

000204f4 <nrfx_twi_disable>:
{
   204f4:	b410      	push	{r4}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   204f6:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   204f8:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
   204fa:	490c      	ldr	r1, [pc, #48]	; (2052c <nrfx_twi_disable+0x38>)
   204fc:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   20500:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   20504:	f021 0103 	bic.w	r1, r1, #3
   20508:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   2050c:	2000      	movs	r0, #0
   2050e:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   20512:	4a07      	ldr	r2, [pc, #28]	; (20530 <nrfx_twi_disable+0x3c>)
   20514:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   20518:	eb02 0181 	add.w	r1, r2, r1, lsl #2
   2051c:	2401      	movs	r4, #1
   2051e:	f881 402e 	strb.w	r4, [r1, #46]	; 0x2e
    p_cb->busy = false;
   20522:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
   20526:	bc10      	pop	{r4}
   20528:	4770      	bx	lr
   2052a:	bf00      	nop
   2052c:	00044286 	.word	0x00044286
   20530:	20003738 	.word	0x20003738

00020534 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   20534:	b510      	push	{r4, lr}
   20536:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   20538:	7904      	ldrb	r4, [r0, #4]
   2053a:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   2053e:	460a      	mov	r2, r1
   20540:	4903      	ldr	r1, [pc, #12]	; (20550 <nrfx_twi_xfer+0x1c>)
   20542:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   20546:	6800      	ldr	r0, [r0, #0]
   20548:	f7ff ff02 	bl	20350 <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2054c:	bd10      	pop	{r4, pc}
   2054e:	bf00      	nop
   20550:	20003738 	.word	0x20003738

00020554 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   20554:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
   20556:	4902      	ldr	r1, [pc, #8]	; (20560 <nrfx_twi_0_irq_handler+0xc>)
   20558:	4802      	ldr	r0, [pc, #8]	; (20564 <nrfx_twi_0_irq_handler+0x10>)
   2055a:	f007 f8ff 	bl	2775c <twi_irq_handler>
}
   2055e:	bd08      	pop	{r3, pc}
   20560:	20003738 	.word	0x20003738
   20564:	40003000 	.word	0x40003000

00020568 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   20568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
   2056c:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
   20570:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20572:	2801      	cmp	r0, #1
   20574:	d036      	beq.n	205e4 <nrfx_twi_twim_bus_recover+0x7c>
        case 0: return NRF_P0;
   20576:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2057a:	2501      	movs	r5, #1
   2057c:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
   2057e:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   20582:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
   20586:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20588:	2901      	cmp	r1, #1
   2058a:	d02d      	beq.n	205e8 <nrfx_twi_twim_bus_recover+0x80>
        case 0: return NRF_P0;
   2058c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20590:	f04f 0901 	mov.w	r9, #1
   20594:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
   20598:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   2059c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   205a0:	f240 620d 	movw	r2, #1549	; 0x60d
   205a4:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
   205a8:	f508 73e0 	add.w	r3, r8, #448	; 0x1c0
   205ac:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   205b0:	2004      	movs	r0, #4
   205b2:	f006 ffd8 	bl	27566 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
   205b6:	2400      	movs	r4, #0
   205b8:	2c08      	cmp	r4, #8
   205ba:	d817      	bhi.n	205ec <nrfx_twi_twim_bus_recover+0x84>
    return p_reg->IN;
   205bc:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   205c0:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
   205c4:	f013 0f01 	tst.w	r3, #1
   205c8:	d110      	bne.n	205ec <nrfx_twi_twim_bus_recover+0x84>
    p_reg->OUTCLR = clr_mask;
   205ca:	f8c6 550c 	str.w	r5, [r6, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   205ce:	2004      	movs	r0, #4
   205d0:	f006 ffc9 	bl	27566 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   205d4:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   205d8:	2004      	movs	r0, #4
   205da:	f006 ffc4 	bl	27566 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   205de:	3401      	adds	r4, #1
   205e0:	b2e4      	uxtb	r4, r4
   205e2:	e7e9      	b.n	205b8 <nrfx_twi_twim_bus_recover+0x50>
        case 1: return NRF_P1;
   205e4:	4e0c      	ldr	r6, [pc, #48]	; (20618 <nrfx_twi_twim_bus_recover+0xb0>)
   205e6:	e7c8      	b.n	2057a <nrfx_twi_twim_bus_recover+0x12>
   205e8:	4f0b      	ldr	r7, [pc, #44]	; (20618 <nrfx_twi_twim_bus_recover+0xb0>)
   205ea:	e7d1      	b.n	20590 <nrfx_twi_twim_bus_recover+0x28>
    p_reg->OUTCLR = clr_mask;
   205ec:	f8c7 950c 	str.w	r9, [r7, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   205f0:	2004      	movs	r0, #4
   205f2:	f006 ffb8 	bl	27566 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   205f6:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   205fa:	2004      	movs	r0, #4
   205fc:	f006 ffb3 	bl	27566 <nrfx_busy_wait>
    return p_reg->IN;
   20600:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   20604:	fa23 f808 	lsr.w	r8, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
   20608:	f018 0f01 	tst.w	r8, #1
   2060c:	d002      	beq.n	20614 <nrfx_twi_twim_bus_recover+0xac>
    {
        return NRFX_SUCCESS;
   2060e:	4803      	ldr	r0, [pc, #12]	; (2061c <nrfx_twi_twim_bus_recover+0xb4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   20610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
   20614:	4802      	ldr	r0, [pc, #8]	; (20620 <nrfx_twi_twim_bus_recover+0xb8>)
   20616:	e7fb      	b.n	20610 <nrfx_twi_twim_bus_recover+0xa8>
   20618:	50000300 	.word	0x50000300
   2061c:	0bad0000 	.word	0x0bad0000
   20620:	0bad0001 	.word	0x0bad0001

00020624 <_DoInit>:
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   20624:	4b11      	ldr	r3, [pc, #68]	; (2066c <_DoInit+0x48>)
   20626:	2203      	movs	r2, #3
   20628:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   2062a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   2062c:	4910      	ldr	r1, [pc, #64]	; (20670 <_DoInit+0x4c>)
   2062e:	6199      	str	r1, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   20630:	4a10      	ldr	r2, [pc, #64]	; (20674 <_DoInit+0x50>)
   20632:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   20634:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20638:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
   2063a:	2200      	movs	r2, #0
   2063c:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   2063e:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20640:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   20642:	6619      	str	r1, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   20644:	490c      	ldr	r1, [pc, #48]	; (20678 <_DoInit+0x54>)
   20646:	6659      	str	r1, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   20648:	2110      	movs	r1, #16
   2064a:	6699      	str	r1, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   2064c:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   2064e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   20650:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   20652:	4a0a      	ldr	r2, [pc, #40]	; (2067c <_DoInit+0x58>)
   20654:	6810      	ldr	r0, [r2, #0]
   20656:	f8c3 0007 	str.w	r0, [r3, #7]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   2065a:	4a09      	ldr	r2, [pc, #36]	; (20680 <_DoInit+0x5c>)
   2065c:	e892 0003 	ldmia.w	r2, {r0, r1}
   20660:	6018      	str	r0, [r3, #0]
   20662:	8099      	strh	r1, [r3, #4]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   20664:	2220      	movs	r2, #32
   20666:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   20668:	4770      	bx	lr
   2066a:	bf00      	nop
   2066c:	20003774 	.word	0x20003774
   20670:	0002ace0 	.word	0x0002ace0
   20674:	2000382c 	.word	0x2000382c
   20678:	2000381c 	.word	0x2000381c
   2067c:	0002acec 	.word	0x0002acec
   20680:	0002acf0 	.word	0x0002acf0

00020684 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   20684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20688:	4604      	mov	r4, r0
   2068a:	460e      	mov	r6, r1
   2068c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   2068e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   20692:	4a2d      	ldr	r2, [pc, #180]	; (20748 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   20694:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   20698:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   2069a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2069c:	42bb      	cmp	r3, r7
   2069e:	d84b      	bhi.n	20738 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   206a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   206a4:	4928      	ldr	r1, [pc, #160]	; (20748 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   206a6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   206aa:	f8d2 8020 	ldr.w	r8, [r2, #32]
   206ae:	eba8 0907 	sub.w	r9, r8, r7
   206b2:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   206b6:	4295      	cmp	r5, r2
   206b8:	d904      	bls.n	206c4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   206ba:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   206bc:	429d      	cmp	r5, r3
   206be:	d917      	bls.n	206f0 <SEGGER_RTT_WriteSkipNoLock+0x6c>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   206c0:	2000      	movs	r0, #0
   206c2:	e03e      	b.n	20742 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   206c4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 20748 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   206c8:	1c63      	adds	r3, r4, #1
   206ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   206ce:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   206d2:	6858      	ldr	r0, [r3, #4]
   206d4:	462a      	mov	r2, r5
   206d6:	4631      	mov	r1, r6
   206d8:	4438      	add	r0, r7
   206da:	f007 fee0 	bl	2849e <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   206de:	443d      	add	r5, r7
   206e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   206e4:	eb08 08c4 	add.w	r8, r8, r4, lsl #3
   206e8:	f8c8 5024 	str.w	r5, [r8, #36]	; 0x24
      return 1;
   206ec:	2001      	movs	r0, #1
   206ee:	e028      	b.n	20742 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   206f0:	1c43      	adds	r3, r0, #1
   206f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   206f6:	4a14      	ldr	r2, [pc, #80]	; (20748 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   206f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   206fc:	6858      	ldr	r0, [r3, #4]
   206fe:	464a      	mov	r2, r9
   20700:	4631      	mov	r1, r6
   20702:	4438      	add	r0, r7
   20704:	f007 fecb 	bl	2849e <memcpy>
      NumBytes -= Rem;
   20708:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
   2070c:	197f      	adds	r7, r7, r5
   2070e:	d00b      	beq.n	20728 <SEGGER_RTT_WriteSkipNoLock+0xa4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   20710:	1c63      	adds	r3, r4, #1
   20712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   20716:	4a0c      	ldr	r2, [pc, #48]	; (20748 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   20718:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2071c:	463a      	mov	r2, r7
   2071e:	eb06 0109 	add.w	r1, r6, r9
   20722:	6858      	ldr	r0, [r3, #4]
   20724:	f007 febb 	bl	2849e <memcpy>
      pRing->WrOff = NumBytes;
   20728:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   2072c:	4b06      	ldr	r3, [pc, #24]	; (20748 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   2072e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   20732:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   20734:	2001      	movs	r0, #1
   20736:	e004      	b.n	20742 <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = RdOff - WrOff - 1u;
   20738:	1bdb      	subs	r3, r3, r7
   2073a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2073c:	42ab      	cmp	r3, r5
   2073e:	d2c1      	bcs.n	206c4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   20740:	2000      	movs	r0, #0
}
   20742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20746:	bf00      	nop
   20748:	20003774 	.word	0x20003774

0002074c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   2074c:	4b06      	ldr	r3, [pc, #24]	; (20768 <SEGGER_RTT_HasDataUp+0x1c>)
   2074e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   20752:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   20756:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   20758:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2075c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   20760:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   20762:	1a80      	subs	r0, r0, r2
   20764:	4770      	bx	lr
   20766:	bf00      	nop
   20768:	20003774 	.word	0x20003774

0002076c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   2076c:	4b03      	ldr	r3, [pc, #12]	; (2077c <z_device_state_init+0x10>)

	while (dev < __device_end) {
   2076e:	4a04      	ldr	r2, [pc, #16]	; (20780 <z_device_state_init+0x14>)
   20770:	4293      	cmp	r3, r2
   20772:	d201      	bcs.n	20778 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   20774:	3318      	adds	r3, #24
   20776:	e7fa      	b.n	2076e <z_device_state_init+0x2>
	}
}
   20778:	4770      	bx	lr
   2077a:	bf00      	nop
   2077c:	000285fc 	.word	0x000285fc
   20780:	000286a4 	.word	0x000286a4

00020784 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   20784:	b570      	push	{r4, r5, r6, lr}
   20786:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   20788:	4b11      	ldr	r3, [pc, #68]	; (207d0 <z_sys_init_run_level+0x4c>)
   2078a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2078e:	e009      	b.n	207a4 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   20790:	4240      	negs	r0, r0
   20792:	e017      	b.n	207c4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   20794:	68eb      	ldr	r3, [r5, #12]
   20796:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   20798:	68ea      	ldr	r2, [r5, #12]
   2079a:	7853      	ldrb	r3, [r2, #1]
   2079c:	f043 0301 	orr.w	r3, r3, #1
   207a0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   207a2:	3408      	adds	r4, #8
   207a4:	1c73      	adds	r3, r6, #1
   207a6:	4a0a      	ldr	r2, [pc, #40]	; (207d0 <z_sys_init_run_level+0x4c>)
   207a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   207ac:	42a3      	cmp	r3, r4
   207ae:	d90d      	bls.n	207cc <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   207b0:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   207b2:	6823      	ldr	r3, [r4, #0]
   207b4:	4628      	mov	r0, r5
   207b6:	4798      	blx	r3
		if (dev != NULL) {
   207b8:	2d00      	cmp	r5, #0
   207ba:	d0f2      	beq.n	207a2 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   207bc:	2800      	cmp	r0, #0
   207be:	d0eb      	beq.n	20798 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   207c0:	2800      	cmp	r0, #0
   207c2:	dbe5      	blt.n	20790 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   207c4:	28ff      	cmp	r0, #255	; 0xff
   207c6:	dde5      	ble.n	20794 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   207c8:	20ff      	movs	r0, #255	; 0xff
   207ca:	e7e3      	b.n	20794 <z_sys_init_run_level+0x10>
		}
	}
}
   207cc:	bd70      	pop	{r4, r5, r6, pc}
   207ce:	bf00      	nop
   207d0:	0002acf8 	.word	0x0002acf8

000207d4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   207d4:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   207d6:	4605      	mov	r5, r0
   207d8:	b328      	cbz	r0, 20826 <z_impl_device_get_binding+0x52>
   207da:	7803      	ldrb	r3, [r0, #0]
   207dc:	b32b      	cbz	r3, 2082a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   207de:	4c14      	ldr	r4, [pc, #80]	; (20830 <z_impl_device_get_binding+0x5c>)
   207e0:	e000      	b.n	207e4 <z_impl_device_get_binding+0x10>
   207e2:	3418      	adds	r4, #24
   207e4:	4b13      	ldr	r3, [pc, #76]	; (20834 <z_impl_device_get_binding+0x60>)
   207e6:	429c      	cmp	r4, r3
   207e8:	d008      	beq.n	207fc <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   207ea:	4620      	mov	r0, r4
   207ec:	f007 f827 	bl	2783e <z_device_ready>
   207f0:	2800      	cmp	r0, #0
   207f2:	d0f6      	beq.n	207e2 <z_impl_device_get_binding+0xe>
   207f4:	6823      	ldr	r3, [r4, #0]
   207f6:	42ab      	cmp	r3, r5
   207f8:	d1f3      	bne.n	207e2 <z_impl_device_get_binding+0xe>
   207fa:	e012      	b.n	20822 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   207fc:	4c0c      	ldr	r4, [pc, #48]	; (20830 <z_impl_device_get_binding+0x5c>)
   207fe:	e000      	b.n	20802 <z_impl_device_get_binding+0x2e>
   20800:	3418      	adds	r4, #24
   20802:	4b0c      	ldr	r3, [pc, #48]	; (20834 <z_impl_device_get_binding+0x60>)
   20804:	429c      	cmp	r4, r3
   20806:	d00b      	beq.n	20820 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   20808:	4620      	mov	r0, r4
   2080a:	f007 f818 	bl	2783e <z_device_ready>
   2080e:	2800      	cmp	r0, #0
   20810:	d0f6      	beq.n	20800 <z_impl_device_get_binding+0x2c>
   20812:	6821      	ldr	r1, [r4, #0]
   20814:	4628      	mov	r0, r5
   20816:	f7eb fefb 	bl	c610 <strcmp>
   2081a:	2800      	cmp	r0, #0
   2081c:	d1f0      	bne.n	20800 <z_impl_device_get_binding+0x2c>
   2081e:	e000      	b.n	20822 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   20820:	2400      	movs	r4, #0
}
   20822:	4620      	mov	r0, r4
   20824:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   20826:	4604      	mov	r4, r0
   20828:	e7fb      	b.n	20822 <z_impl_device_get_binding+0x4e>
   2082a:	2400      	movs	r4, #0
   2082c:	e7f9      	b.n	20822 <z_impl_device_get_binding+0x4e>
   2082e:	bf00      	nop
   20830:	000285fc 	.word	0x000285fc
   20834:	000286a4 	.word	0x000286a4

00020838 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   20838:	4b01      	ldr	r3, [pc, #4]	; (20840 <z_impl_z_errno+0x8>)
   2083a:	6898      	ldr	r0, [r3, #8]
}
   2083c:	3098      	adds	r0, #152	; 0x98
   2083e:	4770      	bx	lr
   20840:	20003c2c 	.word	0x20003c2c

00020844 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   20844:	2804      	cmp	r0, #4
   20846:	d80c      	bhi.n	20862 <reason_to_str+0x1e>
   20848:	e8df f000 	tbb	[pc, r0]
   2084c:	07050d03 	.word	0x07050d03
   20850:	09          	.byte	0x09
   20851:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   20852:	4806      	ldr	r0, [pc, #24]	; (2086c <reason_to_str+0x28>)
   20854:	4770      	bx	lr
		return "Stack overflow";
   20856:	4806      	ldr	r0, [pc, #24]	; (20870 <reason_to_str+0x2c>)
   20858:	4770      	bx	lr
		return "Kernel oops";
   2085a:	4806      	ldr	r0, [pc, #24]	; (20874 <reason_to_str+0x30>)
   2085c:	4770      	bx	lr
		return "Kernel panic";
   2085e:	4806      	ldr	r0, [pc, #24]	; (20878 <reason_to_str+0x34>)
   20860:	4770      	bx	lr
	default:
		return "Unknown error";
   20862:	4806      	ldr	r0, [pc, #24]	; (2087c <reason_to_str+0x38>)
   20864:	4770      	bx	lr
		return "Unhandled interrupt";
   20866:	4806      	ldr	r0, [pc, #24]	; (20880 <reason_to_str+0x3c>)
	}
}
   20868:	4770      	bx	lr
   2086a:	bf00      	nop
   2086c:	0002ad60 	.word	0x0002ad60
   20870:	0002ad34 	.word	0x0002ad34
   20874:	0002ad44 	.word	0x0002ad44
   20878:	0002ad50 	.word	0x0002ad50
   2087c:	0002ad10 	.word	0x0002ad10
   20880:	0002ad20 	.word	0x0002ad20

00020884 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20884:	b130      	cbz	r0, 20894 <thread_name_get+0x10>
{
   20886:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20888:	f007 f8c7 	bl	27a1a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   2088c:	b120      	cbz	r0, 20898 <thread_name_get+0x14>
   2088e:	7803      	ldrb	r3, [r0, #0]
   20890:	b123      	cbz	r3, 2089c <thread_name_get+0x18>
}
   20892:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   20894:	4802      	ldr	r0, [pc, #8]	; (208a0 <thread_name_get+0x1c>)
}
   20896:	4770      	bx	lr
		thread_name = "unknown";
   20898:	4801      	ldr	r0, [pc, #4]	; (208a0 <thread_name_get+0x1c>)
   2089a:	e7fa      	b.n	20892 <thread_name_get+0xe>
   2089c:	4800      	ldr	r0, [pc, #0]	; (208a0 <thread_name_get+0x1c>)
	return thread_name;
   2089e:	e7f8      	b.n	20892 <thread_name_get+0xe>
   208a0:	000296d8 	.word	0x000296d8

000208a4 <k_sys_fatal_error_handler>:
{
   208a4:	b510      	push	{r4, lr}
   208a6:	b088      	sub	sp, #32
   208a8:	4604      	mov	r4, r0
		arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   208aa:	f7f3 fe6d 	bl	14588 <z_impl_log_panic>
	LOG_ERR("Halting system");
   208ae:	4b13      	ldr	r3, [pc, #76]	; (208fc <k_sys_fatal_error_handler+0x58>)
   208b0:	9306      	str	r3, [sp, #24]
   208b2:	2300      	movs	r3, #0
   208b4:	f8ad 3005 	strh.w	r3, [sp, #5]
   208b8:	f88d 3007 	strb.w	r3, [sp, #7]
   208bc:	2202      	movs	r2, #2
   208be:	f88d 2004 	strb.w	r2, [sp, #4]
   208c2:	f88d 3006 	strb.w	r3, [sp, #6]
   208c6:	9a01      	ldr	r2, [sp, #4]
   208c8:	9205      	str	r2, [sp, #20]
   208ca:	461a      	mov	r2, r3
   208cc:	f363 0200 	bfi	r2, r3, #0, #1
   208d0:	f363 0241 	bfi	r2, r3, #1, #1
   208d4:	f363 0282 	bfi	r2, r3, #2, #1
   208d8:	f363 02c5 	bfi	r2, r3, #3, #3
   208dc:	2101      	movs	r1, #1
   208de:	f361 1288 	bfi	r2, r1, #6, #3
   208e2:	2108      	movs	r1, #8
   208e4:	f361 2252 	bfi	r2, r1, #9, #10
   208e8:	f3c2 0212 	ubfx	r2, r2, #0, #19
   208ec:	4904      	ldr	r1, [pc, #16]	; (20900 <k_sys_fatal_error_handler+0x5c>)
   208ee:	a802      	add	r0, sp, #8
   208f0:	f003 fb2c 	bl	23f4c <z_log_msg2_finalize>
	arch_system_halt(reason);
   208f4:	4620      	mov	r0, r4
   208f6:	f006 ffbc 	bl	27872 <arch_system_halt>
   208fa:	bf00      	nop
   208fc:	0002ad70 	.word	0x0002ad70
   20900:	0002890c 	.word	0x0002890c

00020904 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   20904:	b5f0      	push	{r4, r5, r6, r7, lr}
   20906:	b08f      	sub	sp, #60	; 0x3c
   20908:	4605      	mov	r5, r0
   2090a:	460e      	mov	r6, r1
	__asm__ volatile(
   2090c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20910:	f3ef 8711 	mrs	r7, BASEPRI
   20914:	f383 8812 	msr	BASEPRI_MAX, r3
   20918:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   2091c:	f001 f9a2 	bl	21c64 <z_impl_z_current_get>
   20920:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   20922:	4628      	mov	r0, r5
   20924:	f7ff ff8e 	bl	20844 <reason_to_str>
   20928:	2300      	movs	r3, #0
   2092a:	9304      	str	r3, [sp, #16]
   2092c:	9003      	str	r0, [sp, #12]
   2092e:	9502      	str	r5, [sp, #8]
   20930:	4a25      	ldr	r2, [pc, #148]	; (209c8 <z_fatal_error+0xc4>)
   20932:	9201      	str	r2, [sp, #4]
   20934:	9300      	str	r3, [sp, #0]
   20936:	2201      	movs	r2, #1
   20938:	4924      	ldr	r1, [pc, #144]	; (209cc <z_fatal_error+0xc8>)
   2093a:	4618      	mov	r0, r3
   2093c:	f006 ff8c 	bl	27858 <z_log_msg2_runtime_create>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20940:	b11e      	cbz	r6, 2094a <z_fatal_error+0x46>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20942:	69f3      	ldr	r3, [r6, #28]
   20944:	f3c3 0308 	ubfx	r3, r3, #0, #9
   20948:	b9d3      	cbnz	r3, 20980 <z_fatal_error+0x7c>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   2094a:	4620      	mov	r0, r4
   2094c:	f7ff ff9a 	bl	20884 <thread_name_get>
   20950:	9003      	str	r0, [sp, #12]
   20952:	9402      	str	r4, [sp, #8]
   20954:	4b1e      	ldr	r3, [pc, #120]	; (209d0 <z_fatal_error+0xcc>)
   20956:	9301      	str	r3, [sp, #4]
   20958:	2000      	movs	r0, #0
   2095a:	9000      	str	r0, [sp, #0]
   2095c:	4603      	mov	r3, r0
   2095e:	2201      	movs	r2, #1
   20960:	491a      	ldr	r1, [pc, #104]	; (209cc <z_fatal_error+0xc8>)
   20962:	f006 ff79 	bl	27858 <z_log_msg2_runtime_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   20966:	4631      	mov	r1, r6
   20968:	4628      	mov	r0, r5
   2096a:	f7ff ff9b 	bl	208a4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   2096e:	f387 8811 	msr	BASEPRI, r7
   20972:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   20976:	4620      	mov	r0, r4
   20978:	f7f5 fef4 	bl	16764 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   2097c:	b00f      	add	sp, #60	; 0x3c
   2097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
   20980:	4b14      	ldr	r3, [pc, #80]	; (209d4 <z_fatal_error+0xd0>)
   20982:	930c      	str	r3, [sp, #48]	; 0x30
   20984:	2300      	movs	r3, #0
   20986:	f8ad 301d 	strh.w	r3, [sp, #29]
   2098a:	f88d 301f 	strb.w	r3, [sp, #31]
   2098e:	2202      	movs	r2, #2
   20990:	f88d 201c 	strb.w	r2, [sp, #28]
   20994:	f88d 301e 	strb.w	r3, [sp, #30]
   20998:	9a07      	ldr	r2, [sp, #28]
   2099a:	920b      	str	r2, [sp, #44]	; 0x2c
   2099c:	461a      	mov	r2, r3
   2099e:	f363 0200 	bfi	r2, r3, #0, #1
   209a2:	f363 0241 	bfi	r2, r3, #1, #1
   209a6:	f363 0282 	bfi	r2, r3, #2, #1
   209aa:	f363 02c5 	bfi	r2, r3, #3, #3
   209ae:	2101      	movs	r1, #1
   209b0:	f361 1288 	bfi	r2, r1, #6, #3
   209b4:	2108      	movs	r1, #8
   209b6:	f361 2252 	bfi	r2, r1, #9, #10
   209ba:	f3c2 0212 	ubfx	r2, r2, #0, #19
   209be:	4903      	ldr	r1, [pc, #12]	; (209cc <z_fatal_error+0xc8>)
   209c0:	a808      	add	r0, sp, #32
   209c2:	f003 fac3 	bl	23f4c <z_log_msg2_finalize>
   209c6:	e7c0      	b.n	2094a <z_fatal_error+0x46>
   209c8:	0002ad80 	.word	0x0002ad80
   209cc:	0002890c 	.word	0x0002890c
   209d0:	0002adcc 	.word	0x0002adcc
   209d4:	0002ada8 	.word	0x0002ada8

000209d8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   209d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   209da:	b089      	sub	sp, #36	; 0x24
   209dc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   209de:	4b15      	ldr	r3, [pc, #84]	; (20a34 <init_idle_thread+0x5c>)
   209e0:	25b8      	movs	r5, #184	; 0xb8
   209e2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   209e6:	4b14      	ldr	r3, [pc, #80]	; (20a38 <init_idle_thread+0x60>)
   209e8:	f44f 76b0 	mov.w	r6, #352	; 0x160
   209ec:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   209f0:	af06      	add	r7, sp, #24
   209f2:	4603      	mov	r3, r0
   209f4:	4a11      	ldr	r2, [pc, #68]	; (20a3c <init_idle_thread+0x64>)
   209f6:	2108      	movs	r1, #8
   209f8:	4638      	mov	r0, r7
   209fa:	f002 fe7b 	bl	236f4 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   209fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   20a02:	480f      	ldr	r0, [pc, #60]	; (20a40 <init_idle_thread+0x68>)
   20a04:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   20a08:	9705      	str	r7, [sp, #20]
   20a0a:	2301      	movs	r3, #1
   20a0c:	9304      	str	r3, [sp, #16]
   20a0e:	230f      	movs	r3, #15
   20a10:	9303      	str	r3, [sp, #12]
   20a12:	2300      	movs	r3, #0
   20a14:	9302      	str	r3, [sp, #8]
   20a16:	9301      	str	r3, [sp, #4]
   20a18:	9400      	str	r4, [sp, #0]
   20a1a:	4b0a      	ldr	r3, [pc, #40]	; (20a44 <init_idle_thread+0x6c>)
   20a1c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   20a20:	4631      	mov	r1, r6
   20a22:	4628      	mov	r0, r5
   20a24:	f000 f96e 	bl	20d04 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   20a28:	7b6b      	ldrb	r3, [r5, #13]
   20a2a:	f023 0304 	bic.w	r3, r3, #4
   20a2e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   20a30:	b009      	add	sp, #36	; 0x24
   20a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a34:	20001da0 	.word	0x20001da0
   20a38:	20006b60 	.word	0x20006b60
   20a3c:	0002ade4 	.word	0x0002ade4
   20a40:	20003c2c 	.word	0x20003c2c
   20a44:	00020e69 	.word	0x00020e69

00020a48 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   20a48:	b570      	push	{r4, r5, r6, lr}
   20a4a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   20a4c:	f001 f83e 	bl	21acc <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   20a50:	4d1b      	ldr	r5, [pc, #108]	; (20ac0 <prepare_multithreading+0x78>)
   20a52:	4b1c      	ldr	r3, [pc, #112]	; (20ac4 <prepare_multithreading+0x7c>)
   20a54:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20a56:	4b1c      	ldr	r3, [pc, #112]	; (20ac8 <prepare_multithreading+0x80>)
   20a58:	9305      	str	r3, [sp, #20]
   20a5a:	2301      	movs	r3, #1
   20a5c:	9304      	str	r3, [sp, #16]
   20a5e:	2400      	movs	r4, #0
   20a60:	9403      	str	r4, [sp, #12]
   20a62:	9402      	str	r4, [sp, #8]
   20a64:	9401      	str	r4, [sp, #4]
   20a66:	9400      	str	r4, [sp, #0]
   20a68:	4b18      	ldr	r3, [pc, #96]	; (20acc <prepare_multithreading+0x84>)
   20a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20a6e:	4918      	ldr	r1, [pc, #96]	; (20ad0 <prepare_multithreading+0x88>)
   20a70:	4628      	mov	r0, r5
   20a72:	f000 f947 	bl	20d04 <z_setup_new_thread>
   20a76:	4606      	mov	r6, r0
   20a78:	7b6b      	ldrb	r3, [r5, #13]
   20a7a:	f023 0304 	bic.w	r3, r3, #4
   20a7e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   20a80:	4628      	mov	r0, r5
   20a82:	f007 fa85 	bl	27f90 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   20a86:	2c00      	cmp	r4, #0
   20a88:	dd02      	ble.n	20a90 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   20a8a:	4630      	mov	r0, r6
   20a8c:	b006      	add	sp, #24
   20a8e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   20a90:	4620      	mov	r0, r4
   20a92:	f7ff ffa1 	bl	209d8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   20a96:	4b0f      	ldr	r3, [pc, #60]	; (20ad4 <prepare_multithreading+0x8c>)
   20a98:	22b8      	movs	r2, #184	; 0xb8
   20a9a:	fb02 3204 	mla	r2, r2, r4, r3
   20a9e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   20aa2:	4b08      	ldr	r3, [pc, #32]	; (20ac4 <prepare_multithreading+0x7c>)
   20aa4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   20aa8:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   20aaa:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   20aac:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   20ab0:	4a09      	ldr	r2, [pc, #36]	; (20ad8 <prepare_multithreading+0x90>)
   20ab2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   20ab6:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   20aba:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   20abc:	3401      	adds	r4, #1
   20abe:	e7e2      	b.n	20a86 <prepare_multithreading+0x3e>
   20ac0:	20001e58 	.word	0x20001e58
   20ac4:	20003c2c 	.word	0x20003c2c
   20ac8:	0002adf0 	.word	0x0002adf0
   20acc:	00020add 	.word	0x00020add
   20ad0:	20006740 	.word	0x20006740
   20ad4:	20001da0 	.word	0x20001da0
   20ad8:	20006cc0 	.word	0x20006cc0

00020adc <bg_thread_main>:
{
   20adc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   20ade:	4b0a      	ldr	r3, [pc, #40]	; (20b08 <bg_thread_main+0x2c>)
   20ae0:	2201      	movs	r2, #1
   20ae2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   20ae4:	2002      	movs	r0, #2
   20ae6:	f7ff fe4d 	bl	20784 <z_sys_init_run_level>
	boot_banner();
   20aea:	f001 fd79 	bl	225e0 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   20aee:	2003      	movs	r0, #3
   20af0:	f7ff fe48 	bl	20784 <z_sys_init_run_level>
	z_init_static_threads();
   20af4:	f000 f96a 	bl	20dcc <z_init_static_threads>
	main();
   20af8:	f7f1 fd84 	bl	12604 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20afc:	4a03      	ldr	r2, [pc, #12]	; (20b0c <bg_thread_main+0x30>)
   20afe:	7b13      	ldrb	r3, [r2, #12]
   20b00:	f023 0301 	bic.w	r3, r3, #1
   20b04:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20b06:	bd08      	pop	{r3, pc}
   20b08:	20003c7c 	.word	0x20003c7c
   20b0c:	20001e58 	.word	0x20001e58

00020b10 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   20b10:	b508      	push	{r3, lr}
   20b12:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20b14:	4a01      	ldr	r2, [pc, #4]	; (20b1c <switch_to_main_thread+0xc>)
   20b16:	4802      	ldr	r0, [pc, #8]	; (20b20 <switch_to_main_thread+0x10>)
   20b18:	f7f4 ff66 	bl	159e8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20b1c:	00020add 	.word	0x00020add
   20b20:	20001e58 	.word	0x20001e58

00020b24 <z_bss_zero>:
{
   20b24:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   20b26:	4803      	ldr	r0, [pc, #12]	; (20b34 <z_bss_zero+0x10>)
__ssp_bos_icheck3(memset, void *, int)
   20b28:	4a03      	ldr	r2, [pc, #12]	; (20b38 <z_bss_zero+0x14>)
   20b2a:	1a12      	subs	r2, r2, r0
   20b2c:	2100      	movs	r1, #0
   20b2e:	f007 fcd7 	bl	284e0 <memset>
}
   20b32:	bd08      	pop	{r3, pc}
   20b34:	200009d0 	.word	0x200009d0
   20b38:	20003c80 	.word	0x20003c80

00020b3c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   20b3c:	b500      	push	{lr}
   20b3e:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   20b40:	f7f3 fd10 	bl	14564 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   20b44:	4b1d      	ldr	r3, [pc, #116]	; (20bbc <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   20b46:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   20b4a:	4c1d      	ldr	r4, [pc, #116]	; (20bc0 <z_cstart+0x84>)
   20b4c:	6963      	ldr	r3, [r4, #20]
   20b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   20b52:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   20b54:	23e0      	movs	r3, #224	; 0xe0
   20b56:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   20b5a:	2320      	movs	r3, #32
   20b5c:	77e3      	strb	r3, [r4, #31]
   20b5e:	2500      	movs	r5, #0
   20b60:	7625      	strb	r5, [r4, #24]
   20b62:	7665      	strb	r5, [r4, #25]
   20b64:	76a5      	strb	r5, [r4, #26]
   20b66:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20b6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20b6c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   20b70:	6263      	str	r3, [r4, #36]	; 0x24
   20b72:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20b76:	f7f5 fd65 	bl	16644 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20b7a:	f7f4 fd07 	bl	1558c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   20b7e:	f04f 33ff 	mov.w	r3, #4294967295
   20b82:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20b84:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20b86:	f7f5 feef 	bl	16968 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   20b8a:	f7f5 fe01 	bl	16790 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   20b8e:	2401      	movs	r4, #1
   20b90:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   20b94:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   20b98:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   20b9a:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   20b9c:	4b09      	ldr	r3, [pc, #36]	; (20bc4 <z_cstart+0x88>)
   20b9e:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20ba2:	f7ff fde3 	bl	2076c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   20ba6:	4628      	mov	r0, r5
   20ba8:	f7ff fdec 	bl	20784 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   20bac:	4620      	mov	r0, r4
   20bae:	f7ff fde9 	bl	20784 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   20bb2:	f7ff ff49 	bl	20a48 <prepare_multithreading>
   20bb6:	f7ff ffab 	bl	20b10 <switch_to_main_thread>
   20bba:	bf00      	nop
   20bbc:	200074e0 	.word	0x200074e0
   20bc0:	e000ed00 	.word	0xe000ed00
   20bc4:	20003c2c 	.word	0x20003c2c

00020bc8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   20bc8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20bca:	4c06      	ldr	r4, [pc, #24]	; (20be4 <statics_init+0x1c>)
   20bcc:	4b06      	ldr	r3, [pc, #24]	; (20be8 <statics_init+0x20>)
   20bce:	429c      	cmp	r4, r3
   20bd0:	d206      	bcs.n	20be0 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   20bd2:	68a2      	ldr	r2, [r4, #8]
   20bd4:	6861      	ldr	r1, [r4, #4]
   20bd6:	4620      	mov	r0, r4
   20bd8:	f006 fe54 	bl	27884 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   20bdc:	3414      	adds	r4, #20
   20bde:	e7f5      	b.n	20bcc <statics_init+0x4>
		}
	}
	return 0;
}
   20be0:	2000      	movs	r0, #0
   20be2:	bd10      	pop	{r4, pc}
   20be4:	2000086c 	.word	0x2000086c
   20be8:	2000086c 	.word	0x2000086c

00020bec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   20bec:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20bee:	4c06      	ldr	r4, [pc, #24]	; (20c08 <init_mem_slab_module+0x1c>)
	int rc = 0;
   20bf0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20bf2:	4b06      	ldr	r3, [pc, #24]	; (20c0c <init_mem_slab_module+0x20>)
   20bf4:	429c      	cmp	r4, r3
   20bf6:	d206      	bcs.n	20c06 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   20bf8:	4620      	mov	r0, r4
   20bfa:	f006 feb3 	bl	27964 <create_free_list>
		if (rc < 0) {
   20bfe:	2800      	cmp	r0, #0
   20c00:	db01      	blt.n	20c06 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   20c02:	341c      	adds	r4, #28
   20c04:	e7f5      	b.n	20bf2 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   20c06:	bd10      	pop	{r4, pc}
   20c08:	20000818 	.word	0x20000818
   20c0c:	2000086c 	.word	0x2000086c

00020c10 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   20c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   20c12:	b083      	sub	sp, #12
   20c14:	460c      	mov	r4, r1
   20c16:	461f      	mov	r7, r3
	__asm__ volatile(
   20c18:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c1c:	f3ef 8111 	mrs	r1, BASEPRI
   20c20:	f383 8812 	msr	BASEPRI_MAX, r3
   20c24:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20c28:	6943      	ldr	r3, [r0, #20]
   20c2a:	b16b      	cbz	r3, 20c48 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   20c2c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   20c2e:	6943      	ldr	r3, [r0, #20]
   20c30:	681b      	ldr	r3, [r3, #0]
   20c32:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   20c34:	6983      	ldr	r3, [r0, #24]
   20c36:	3301      	adds	r3, #1
   20c38:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20c3a:	2000      	movs	r0, #0
	__asm__ volatile(
   20c3c:	f381 8811 	msr	BASEPRI, r1
   20c40:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   20c44:	b003      	add	sp, #12
   20c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20c48:	4616      	mov	r6, r2
   20c4a:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   20c4e:	ea56 0307 	orrs.w	r3, r6, r7
   20c52:	d104      	bne.n	20c5e <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   20c54:	2300      	movs	r3, #0
   20c56:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   20c58:	f06f 000b 	mvn.w	r0, #11
   20c5c:	e7ee      	b.n	20c3c <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   20c5e:	e9cd 6700 	strd	r6, r7, [sp]
   20c62:	4602      	mov	r2, r0
   20c64:	4628      	mov	r0, r5
   20c66:	f000 fe07 	bl	21878 <z_pend_curr>
		if (result == 0) {
   20c6a:	2800      	cmp	r0, #0
   20c6c:	d1ea      	bne.n	20c44 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   20c6e:	4b02      	ldr	r3, [pc, #8]	; (20c78 <k_mem_slab_alloc+0x68>)
   20c70:	689b      	ldr	r3, [r3, #8]
   20c72:	695b      	ldr	r3, [r3, #20]
   20c74:	6023      	str	r3, [r4, #0]
		return result;
   20c76:	e7e5      	b.n	20c44 <k_mem_slab_alloc+0x34>
   20c78:	20003c2c 	.word	0x20003c2c

00020c7c <z_thread_monitor_exit>:
	__asm__ volatile(
   20c7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c80:	f3ef 8111 	mrs	r1, BASEPRI
   20c84:	f383 8812 	msr	BASEPRI_MAX, r3
   20c88:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   20c8c:	4b0a      	ldr	r3, [pc, #40]	; (20cb8 <z_thread_monitor_exit+0x3c>)
   20c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20c90:	4283      	cmp	r3, r0
   20c92:	d104      	bne.n	20c9e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   20c94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   20c96:	4b08      	ldr	r3, [pc, #32]	; (20cb8 <z_thread_monitor_exit+0x3c>)
   20c98:	629a      	str	r2, [r3, #40]	; 0x28
   20c9a:	e007      	b.n	20cac <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   20c9c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   20c9e:	b113      	cbz	r3, 20ca6 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   20ca0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   20ca2:	4282      	cmp	r2, r0
   20ca4:	d1fa      	bne.n	20c9c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   20ca6:	b10b      	cbz	r3, 20cac <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   20ca8:	6f42      	ldr	r2, [r0, #116]	; 0x74
   20caa:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   20cac:	f381 8811 	msr	BASEPRI, r1
   20cb0:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   20cb4:	4770      	bx	lr
   20cb6:	bf00      	nop
   20cb8:	20003c2c 	.word	0x20003c2c

00020cbc <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   20cbc:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   20cbe:	4604      	mov	r4, r0
   20cc0:	b140      	cbz	r0, 20cd4 <z_impl_k_thread_name_set+0x18>
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   20cc2:	2220      	movs	r2, #32
   20cc4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   20cc8:	f007 fc12 	bl	284f0 <strncpy>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   20ccc:	2000      	movs	r0, #0
   20cce:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   20cd2:	bd10      	pop	{r4, pc}
		thread = _current;
   20cd4:	4b01      	ldr	r3, [pc, #4]	; (20cdc <z_impl_k_thread_name_set+0x20>)
   20cd6:	689c      	ldr	r4, [r3, #8]
   20cd8:	e7f3      	b.n	20cc2 <z_impl_k_thread_name_set+0x6>
   20cda:	bf00      	nop
   20cdc:	20003c2c 	.word	0x20003c2c

00020ce0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   20ce0:	b538      	push	{r3, r4, r5, lr}
   20ce2:	4614      	mov	r4, r2
   20ce4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20ce6:	ea54 0305 	orrs.w	r3, r4, r5
   20cea:	d102      	bne.n	20cf2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   20cec:	f006 fe97 	bl	27a1e <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   20cf0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20cf2:	462b      	mov	r3, r5
   20cf4:	4902      	ldr	r1, [pc, #8]	; (20d00 <schedule_new_thread+0x20>)
   20cf6:	3018      	adds	r0, #24
   20cf8:	f001 f866 	bl	21dc8 <z_add_timeout>
   20cfc:	e7f8      	b.n	20cf0 <schedule_new_thread+0x10>
   20cfe:	bf00      	nop
   20d00:	00027fc9 	.word	0x00027fc9

00020d04 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d08:	b085      	sub	sp, #20
   20d0a:	4604      	mov	r4, r0
   20d0c:	460f      	mov	r7, r1
   20d0e:	4615      	mov	r5, r2
   20d10:	461e      	mov	r6, r3
   20d12:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   20d16:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   20d1a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   20d1e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20d22:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   20d26:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   20d28:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   20d2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20d2c:	2204      	movs	r2, #4
   20d2e:	9911      	ldr	r1, [sp, #68]	; 0x44
   20d30:	f006 fe79 	bl	27a26 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   20d34:	462a      	mov	r2, r5
   20d36:	4639      	mov	r1, r7
   20d38:	4620      	mov	r0, r4
   20d3a:	f006 fe56 	bl	279ea <setup_thread_stack>
   20d3e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20d40:	f8cd 8008 	str.w	r8, [sp, #8]
   20d44:	f8cd 9004 	str.w	r9, [sp, #4]
   20d48:	f8cd a000 	str.w	sl, [sp]
   20d4c:	4633      	mov	r3, r6
   20d4e:	4602      	mov	r2, r0
   20d50:	4639      	mov	r1, r7
   20d52:	4620      	mov	r0, r4
   20d54:	f7f4 fdf8 	bl	15948 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   20d58:	2300      	movs	r3, #0
   20d5a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   20d5c:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   20d5e:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   20d62:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   20d66:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   20d6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d6e:	f3ef 8211 	mrs	r2, BASEPRI
   20d72:	f383 8812 	msr	BASEPRI_MAX, r3
   20d76:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   20d7a:	4b13      	ldr	r3, [pc, #76]	; (20dc8 <z_setup_new_thread+0xc4>)
   20d7c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   20d7e:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   20d80:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   20d82:	f382 8811 	msr	BASEPRI, r2
   20d86:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   20d8a:	f1bb 0f00 	cmp.w	fp, #0
   20d8e:	d013      	beq.n	20db8 <z_setup_new_thread+0xb4>
   20d90:	221f      	movs	r2, #31
   20d92:	4659      	mov	r1, fp
   20d94:	f104 0078 	add.w	r0, r4, #120	; 0x78
   20d98:	f007 fbaa 	bl	284f0 <strncpy>
		strncpy(new_thread->name, name,
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   20d9c:	2300      	movs	r3, #0
   20d9e:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   20da2:	4b09      	ldr	r3, [pc, #36]	; (20dc8 <z_setup_new_thread+0xc4>)
   20da4:	689b      	ldr	r3, [r3, #8]
   20da6:	b15b      	cbz	r3, 20dc0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   20da8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   20dac:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
   20db0:	4628      	mov	r0, r5
   20db2:	b005      	add	sp, #20
   20db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   20db8:	2300      	movs	r3, #0
   20dba:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   20dbe:	e7f0      	b.n	20da2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   20dc0:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   20dc4:	e7f4      	b.n	20db0 <z_setup_new_thread+0xac>
   20dc6:	bf00      	nop
   20dc8:	20003c2c 	.word	0x20003c2c

00020dcc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   20dcc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   20dd0:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   20dd2:	4c23      	ldr	r4, [pc, #140]	; (20e60 <z_init_static_threads+0x94>)
   20dd4:	4b23      	ldr	r3, [pc, #140]	; (20e64 <z_init_static_threads+0x98>)
   20dd6:	429c      	cmp	r4, r3
   20dd8:	d215      	bcs.n	20e06 <z_init_static_threads+0x3a>
		z_setup_new_thread(
   20dda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   20ddc:	9305      	str	r3, [sp, #20]
   20dde:	6a23      	ldr	r3, [r4, #32]
   20de0:	9304      	str	r3, [sp, #16]
   20de2:	69e3      	ldr	r3, [r4, #28]
   20de4:	9303      	str	r3, [sp, #12]
   20de6:	69a3      	ldr	r3, [r4, #24]
   20de8:	9302      	str	r3, [sp, #8]
   20dea:	6963      	ldr	r3, [r4, #20]
   20dec:	9301      	str	r3, [sp, #4]
   20dee:	6923      	ldr	r3, [r4, #16]
   20df0:	9300      	str	r3, [sp, #0]
   20df2:	68e3      	ldr	r3, [r4, #12]
   20df4:	68a2      	ldr	r2, [r4, #8]
   20df6:	6861      	ldr	r1, [r4, #4]
   20df8:	6820      	ldr	r0, [r4, #0]
   20dfa:	f7ff ff83 	bl	20d04 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   20dfe:	6823      	ldr	r3, [r4, #0]
   20e00:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20e02:	3430      	adds	r4, #48	; 0x30
   20e04:	e7e6      	b.n	20dd4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   20e06:	f000 fbef 	bl	215e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   20e0a:	4c15      	ldr	r4, [pc, #84]	; (20e60 <z_init_static_threads+0x94>)
   20e0c:	e01b      	b.n	20e46 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   20e0e:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   20e10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20e14:	ea4f 79e3 	mov.w	r9, r3, asr #31
			return (t * to_hz + off) / from_hz;
   20e18:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   20e1c:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   20e20:	03d8      	lsls	r0, r3, #15
   20e22:	f240 35e7 	movw	r5, #999	; 0x3e7
   20e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20e2a:	2300      	movs	r3, #0
   20e2c:	1940      	adds	r0, r0, r5
   20e2e:	f04f 0500 	mov.w	r5, #0
   20e32:	eb45 0101 	adc.w	r1, r5, r1
   20e36:	f7e0 f925 	bl	1084 <__aeabi_uldivmod>
   20e3a:	4602      	mov	r2, r0
   20e3c:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   20e3e:	4630      	mov	r0, r6
   20e40:	f7ff ff4e 	bl	20ce0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   20e44:	3430      	adds	r4, #48	; 0x30
   20e46:	4b07      	ldr	r3, [pc, #28]	; (20e64 <z_init_static_threads+0x98>)
   20e48:	429c      	cmp	r4, r3
   20e4a:	d204      	bcs.n	20e56 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20e4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
   20e52:	d0f7      	beq.n	20e44 <z_init_static_threads+0x78>
   20e54:	e7db      	b.n	20e0e <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   20e56:	f000 fdc5 	bl	219e4 <k_sched_unlock>
}
   20e5a:	b006      	add	sp, #24
   20e5c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   20e60:	200007b8 	.word	0x200007b8
   20e64:	20000818 	.word	0x20000818

00020e68 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20e68:	b508      	push	{r3, lr}
   20e6a:	e001      	b.n	20e70 <idle+0x8>
	arch_cpu_idle();
   20e6c:	f7f4 fb94 	bl	15598 <arch_cpu_idle>
	__asm__ volatile(
   20e70:	f04f 0240 	mov.w	r2, #64	; 0x40
   20e74:	f3ef 8311 	mrs	r3, BASEPRI
   20e78:	f382 8812 	msr	BASEPRI_MAX, r2
   20e7c:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20e80:	f007 f9cd 	bl	2821e <z_get_next_timeout_expiry>
   20e84:	4b03      	ldr	r3, [pc, #12]	; (20e94 <idle+0x2c>)
   20e86:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   20e88:	f7f3 febe 	bl	14c08 <pm_system_suspend>
   20e8c:	2800      	cmp	r0, #0
   20e8e:	d1ef      	bne.n	20e70 <idle+0x8>
   20e90:	e7ec      	b.n	20e6c <idle+0x4>
   20e92:	bf00      	nop
   20e94:	20003c2c 	.word	0x20003c2c

00020e98 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20e9c:	b083      	sub	sp, #12
   20e9e:	4604      	mov	r4, r0
   20ea0:	461d      	mov	r5, r3
   20ea2:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ea6:	f3ef 8711 	mrs	r7, BASEPRI
   20eaa:	f383 8812 	msr	BASEPRI_MAX, r3
   20eae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20eb2:	68c1      	ldr	r1, [r0, #12]
   20eb4:	b999      	cbnz	r1, 20ede <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   20eb6:	2900      	cmp	r1, #0
   20eb8:	d14f      	bne.n	20f5a <z_impl_k_mutex_lock+0xc2>
   20eba:	4b3a      	ldr	r3, [pc, #232]	; (20fa4 <z_impl_k_mutex_lock+0x10c>)
   20ebc:	689b      	ldr	r3, [r3, #8]
   20ebe:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20ec2:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   20ec4:	3101      	adds	r1, #1
   20ec6:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   20ec8:	4b36      	ldr	r3, [pc, #216]	; (20fa4 <z_impl_k_mutex_lock+0x10c>)
   20eca:	689b      	ldr	r3, [r3, #8]
   20ecc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   20ece:	f387 8811 	msr	BASEPRI, r7
   20ed2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   20ed6:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   20ed8:	b003      	add	sp, #12
   20eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20ede:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20ee0:	6882      	ldr	r2, [r0, #8]
   20ee2:	4b30      	ldr	r3, [pc, #192]	; (20fa4 <z_impl_k_mutex_lock+0x10c>)
   20ee4:	689b      	ldr	r3, [r3, #8]
   20ee6:	429a      	cmp	r2, r3
   20ee8:	d0e5      	beq.n	20eb6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20eea:	ea55 0106 	orrs.w	r1, r5, r6
   20eee:	bf0c      	ite	eq
   20ef0:	f04f 0801 	moveq.w	r8, #1
   20ef4:	f04f 0800 	movne.w	r8, #0
   20ef8:	d031      	beq.n	20f5e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   20efa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20efe:	4649      	mov	r1, r9
   20f00:	f993 000e 	ldrsb.w	r0, [r3, #14]
   20f04:	f006 fdc2 	bl	27a8c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20f08:	4581      	cmp	r9, r0
   20f0a:	dc2f      	bgt.n	20f6c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   20f0c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20f10:	9600      	str	r6, [sp, #0]
   20f12:	9501      	str	r5, [sp, #4]
   20f14:	4622      	mov	r2, r4
   20f16:	4639      	mov	r1, r7
   20f18:	4823      	ldr	r0, [pc, #140]	; (20fa8 <z_impl_k_mutex_lock+0x110>)
   20f1a:	f000 fcad 	bl	21878 <z_pend_curr>
	if (got_mutex == 0) {
   20f1e:	2800      	cmp	r0, #0
   20f20:	d0da      	beq.n	20ed8 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   20f22:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f26:	f3ef 8511 	mrs	r5, BASEPRI
   20f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f2e:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20f32:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20f34:	429c      	cmp	r4, r3
   20f36:	d01f      	beq.n	20f78 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20f38:	b1f3      	cbz	r3, 20f78 <z_impl_k_mutex_lock+0xe0>
   20f3a:	6921      	ldr	r1, [r4, #16]
   20f3c:	f993 000e 	ldrsb.w	r0, [r3, #14]
   20f40:	f006 fda4 	bl	27a8c <new_prio_for_inheritance>
   20f44:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20f46:	4620      	mov	r0, r4
   20f48:	f006 fdab 	bl	27aa2 <adjust_owner_prio>
   20f4c:	b9b0      	cbnz	r0, 20f7c <z_impl_k_mutex_lock+0xe4>
   20f4e:	f1b9 0f00 	cmp.w	r9, #0
   20f52:	d015      	beq.n	20f80 <z_impl_k_mutex_lock+0xe8>
   20f54:	f04f 0801 	mov.w	r8, #1
   20f58:	e012      	b.n	20f80 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   20f5a:	6923      	ldr	r3, [r4, #16]
   20f5c:	e7b1      	b.n	20ec2 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   20f5e:	f387 8811 	msr	BASEPRI, r7
   20f62:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   20f66:	f06f 000f 	mvn.w	r0, #15
   20f6a:	e7b5      	b.n	20ed8 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   20f6c:	4601      	mov	r1, r0
   20f6e:	4620      	mov	r0, r4
   20f70:	f006 fd97 	bl	27aa2 <adjust_owner_prio>
   20f74:	4681      	mov	r9, r0
   20f76:	e7cb      	b.n	20f10 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20f78:	6921      	ldr	r1, [r4, #16]
   20f7a:	e7e4      	b.n	20f46 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   20f7c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   20f80:	f1b8 0f00 	cmp.w	r8, #0
   20f84:	d106      	bne.n	20f94 <z_impl_k_mutex_lock+0xfc>
   20f86:	f385 8811 	msr	BASEPRI, r5
   20f8a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   20f8e:	f06f 000a 	mvn.w	r0, #10
   20f92:	e7a1      	b.n	20ed8 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   20f94:	4629      	mov	r1, r5
   20f96:	4804      	ldr	r0, [pc, #16]	; (20fa8 <z_impl_k_mutex_lock+0x110>)
   20f98:	f000 fb0a 	bl	215b0 <z_reschedule>
	return -EAGAIN;
   20f9c:	f06f 000a 	mvn.w	r0, #10
   20fa0:	e79a      	b.n	20ed8 <z_impl_k_mutex_lock+0x40>
   20fa2:	bf00      	nop
   20fa4:	20003c2c 	.word	0x20003c2c
   20fa8:	20003c58 	.word	0x20003c58

00020fac <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   20fac:	6882      	ldr	r2, [r0, #8]
   20fae:	2a00      	cmp	r2, #0
   20fb0:	d035      	beq.n	2101e <z_impl_k_mutex_unlock+0x72>
{
   20fb2:	b538      	push	{r3, r4, r5, lr}
   20fb4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   20fb6:	4b1d      	ldr	r3, [pc, #116]	; (2102c <z_impl_k_mutex_unlock+0x80>)
   20fb8:	689b      	ldr	r3, [r3, #8]
   20fba:	429a      	cmp	r2, r3
   20fbc:	d132      	bne.n	21024 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   20fbe:	7bda      	ldrb	r2, [r3, #15]
   20fc0:	3a01      	subs	r2, #1
   20fc2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   20fc4:	68c3      	ldr	r3, [r0, #12]
   20fc6:	2b01      	cmp	r3, #1
   20fc8:	d905      	bls.n	20fd6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   20fca:	3b01      	subs	r3, #1
   20fcc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   20fce:	f000 fd09 	bl	219e4 <k_sched_unlock>

	return 0;
   20fd2:	2000      	movs	r0, #0
}
   20fd4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   20fd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20fda:	f3ef 8511 	mrs	r5, BASEPRI
   20fde:	f383 8812 	msr	BASEPRI_MAX, r3
   20fe2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20fe6:	6901      	ldr	r1, [r0, #16]
   20fe8:	f006 fd5b 	bl	27aa2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20fec:	4620      	mov	r0, r4
   20fee:	f007 f86a 	bl	280c6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   20ff2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20ff4:	b160      	cbz	r0, 21010 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   20ff6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20ffa:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20ffc:	2300      	movs	r3, #0
   20ffe:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   21002:	f006 ffc5 	bl	27f90 <z_ready_thread>
		z_reschedule(&lock, key);
   21006:	4629      	mov	r1, r5
   21008:	4809      	ldr	r0, [pc, #36]	; (21030 <z_impl_k_mutex_unlock+0x84>)
   2100a:	f000 fad1 	bl	215b0 <z_reschedule>
   2100e:	e7de      	b.n	20fce <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   21010:	2300      	movs	r3, #0
   21012:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   21014:	f385 8811 	msr	BASEPRI, r5
   21018:	f3bf 8f6f 	isb	sy
   2101c:	e7d7      	b.n	20fce <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   2101e:	f06f 0015 	mvn.w	r0, #21
}
   21022:	4770      	bx	lr
		return -EPERM;
   21024:	f04f 30ff 	mov.w	r0, #4294967295
   21028:	e7d4      	b.n	20fd4 <z_impl_k_mutex_unlock+0x28>
   2102a:	bf00      	nop
   2102c:	20003c2c 	.word	0x20003c2c
   21030:	20003c58 	.word	0x20003c58

00021034 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21034:	b5d0      	push	{r4, r6, r7, lr}
   21036:	b082      	sub	sp, #8
   21038:	4601      	mov	r1, r0
   2103a:	4616      	mov	r6, r2
   2103c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2103e:	4602      	mov	r2, r0
	__asm__ volatile(
   21040:	f04f 0340 	mov.w	r3, #64	; 0x40
   21044:	f3ef 8411 	mrs	r4, BASEPRI
   21048:	f383 8812 	msr	BASEPRI_MAX, r3
   2104c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   21050:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   21054:	b188      	cbz	r0, 2107a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21056:	6803      	ldr	r3, [r0, #0]
   21058:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   2105c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   2105e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21060:	4290      	cmp	r0, r2
   21062:	d008      	beq.n	21076 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   21064:	2101      	movs	r1, #1
   21066:	f006 fd9a 	bl	27b9e <z_queue_node_peek>
	__asm__ volatile(
   2106a:	f384 8811 	msr	BASEPRI, r4
   2106e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   21072:	b002      	add	sp, #8
   21074:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   21076:	604b      	str	r3, [r1, #4]
}
   21078:	e7f4      	b.n	21064 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2107a:	ea56 0307 	orrs.w	r3, r6, r7
   2107e:	d00a      	beq.n	21096 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21080:	e9cd 6700 	strd	r6, r7, [sp]
   21084:	4621      	mov	r1, r4
   21086:	4610      	mov	r0, r2
   21088:	f000 fbf6 	bl	21878 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   2108c:	b948      	cbnz	r0, 210a2 <z_impl_k_queue_get+0x6e>
   2108e:	4b06      	ldr	r3, [pc, #24]	; (210a8 <z_impl_k_queue_get+0x74>)
   21090:	689b      	ldr	r3, [r3, #8]
   21092:	6958      	ldr	r0, [r3, #20]
   21094:	e7ed      	b.n	21072 <z_impl_k_queue_get+0x3e>
   21096:	f384 8811 	msr	BASEPRI, r4
   2109a:	f3bf 8f6f 	isb	sy
		return NULL;
   2109e:	2000      	movs	r0, #0
   210a0:	e7e7      	b.n	21072 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   210a2:	2000      	movs	r0, #0
   210a4:	e7e5      	b.n	21072 <z_impl_k_queue_get+0x3e>
   210a6:	bf00      	nop
   210a8:	20003c2c 	.word	0x20003c2c

000210ac <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   210ac:	b538      	push	{r3, r4, r5, lr}
   210ae:	4604      	mov	r4, r0
	__asm__ volatile(
   210b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   210b4:	f3ef 8511 	mrs	r5, BASEPRI
   210b8:	f383 8812 	msr	BASEPRI_MAX, r3
   210bc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   210c0:	f007 f801 	bl	280c6 <z_unpend_first_thread>

	if (thread != NULL) {
   210c4:	b148      	cbz	r0, 210da <z_impl_k_sem_give+0x2e>
   210c6:	2200      	movs	r2, #0
   210c8:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   210cc:	f006 ff60 	bl	27f90 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   210d0:	4629      	mov	r1, r5
   210d2:	4809      	ldr	r0, [pc, #36]	; (210f8 <z_impl_k_sem_give+0x4c>)
   210d4:	f000 fa6c 	bl	215b0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   210d8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   210da:	68a3      	ldr	r3, [r4, #8]
   210dc:	68e2      	ldr	r2, [r4, #12]
   210de:	4293      	cmp	r3, r2
   210e0:	d008      	beq.n	210f4 <z_impl_k_sem_give+0x48>
   210e2:	2201      	movs	r2, #1
   210e4:	4413      	add	r3, r2
   210e6:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   210e8:	2102      	movs	r1, #2
   210ea:	f104 0010 	add.w	r0, r4, #16
   210ee:	f007 f99a 	bl	28426 <z_handle_obj_poll_events>
}
   210f2:	e7ed      	b.n	210d0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   210f4:	2200      	movs	r2, #0
   210f6:	e7f5      	b.n	210e4 <z_impl_k_sem_give+0x38>
   210f8:	20003c58 	.word	0x20003c58

000210fc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   210fc:	b530      	push	{r4, r5, lr}
   210fe:	b083      	sub	sp, #12
   21100:	461d      	mov	r5, r3
   21102:	f04f 0340 	mov.w	r3, #64	; 0x40
   21106:	f3ef 8111 	mrs	r1, BASEPRI
   2110a:	f383 8812 	msr	BASEPRI_MAX, r3
   2110e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21112:	6883      	ldr	r3, [r0, #8]
   21114:	b143      	cbz	r3, 21128 <z_impl_k_sem_take+0x2c>
		sem->count--;
   21116:	3b01      	subs	r3, #1
   21118:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   2111a:	f381 8811 	msr	BASEPRI, r1
   2111e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21122:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21124:	b003      	add	sp, #12
   21126:	bd30      	pop	{r4, r5, pc}
   21128:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2112a:	ea54 0305 	orrs.w	r3, r4, r5
   2112e:	d006      	beq.n	2113e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21130:	e9cd 4500 	strd	r4, r5, [sp]
   21134:	4602      	mov	r2, r0
   21136:	4805      	ldr	r0, [pc, #20]	; (2114c <z_impl_k_sem_take+0x50>)
   21138:	f000 fb9e 	bl	21878 <z_pend_curr>
	return ret;
   2113c:	e7f2      	b.n	21124 <z_impl_k_sem_take+0x28>
   2113e:	f381 8811 	msr	BASEPRI, r1
   21142:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21146:	f06f 000f 	mvn.w	r0, #15
   2114a:	e7eb      	b.n	21124 <z_impl_k_sem_take+0x28>
   2114c:	20003c58 	.word	0x20003c58

00021150 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21150:	b510      	push	{r4, lr}
   21152:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21154:	4b08      	ldr	r3, [pc, #32]	; (21178 <k_sys_work_q_init+0x28>)
   21156:	9302      	str	r3, [sp, #8]
   21158:	2400      	movs	r4, #0
   2115a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2115e:	ab02      	add	r3, sp, #8
   21160:	9300      	str	r3, [sp, #0]
   21162:	f04f 33ff 	mov.w	r3, #4294967295
   21166:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2116a:	4904      	ldr	r1, [pc, #16]	; (2117c <k_sys_work_q_init+0x2c>)
   2116c:	4804      	ldr	r0, [pc, #16]	; (21180 <k_sys_work_q_init+0x30>)
   2116e:	f000 f96f 	bl	21450 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21172:	4620      	mov	r0, r4
   21174:	b004      	add	sp, #16
   21176:	bd10      	pop	{r4, pc}
   21178:	0002adfc 	.word	0x0002adfc
   2117c:	200074e0 	.word	0x200074e0
   21180:	20001f10 	.word	0x20001f10

00021184 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   21184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21186:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   21188:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2118a:	f013 0f02 	tst.w	r3, #2
   2118e:	d15b      	bne.n	21248 <submit_to_queue_locked+0xc4>
   21190:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21192:	f013 0f04 	tst.w	r3, #4
   21196:	d15c      	bne.n	21252 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   21198:	680b      	ldr	r3, [r1, #0]
   2119a:	2b00      	cmp	r3, #0
   2119c:	d037      	beq.n	2120e <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   2119e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   211a0:	f013 0f01 	tst.w	r3, #1
   211a4:	d036      	beq.n	21214 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   211a6:	68a3      	ldr	r3, [r4, #8]
   211a8:	602b      	str	r3, [r5, #0]
			ret = 2;
   211aa:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   211ac:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   211ae:	2e00      	cmp	r6, #0
   211b0:	d03e      	beq.n	21230 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   211b2:	4b29      	ldr	r3, [pc, #164]	; (21258 <submit_to_queue_locked+0xd4>)
   211b4:	689b      	ldr	r3, [r3, #8]
   211b6:	42b3      	cmp	r3, r6
   211b8:	d02e      	beq.n	21218 <submit_to_queue_locked+0x94>
   211ba:	2300      	movs	r3, #0
   211bc:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   211be:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   211c2:	f3c3 0180 	ubfx	r1, r3, #2, #1
   211c6:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   211ca:	f013 0f01 	tst.w	r3, #1
   211ce:	d032      	beq.n	21236 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   211d0:	b101      	cbz	r1, 211d4 <submit_to_queue_locked+0x50>
   211d2:	b39a      	cbz	r2, 2123c <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   211d4:	b100      	cbz	r0, 211d8 <submit_to_queue_locked+0x54>
   211d6:	b3a1      	cbz	r1, 21242 <submit_to_queue_locked+0xbe>
	parent->next = child;
   211d8:	2300      	movs	r3, #0
   211da:	6023      	str	r3, [r4, #0]
	return list->tail;
   211dc:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   211e0:	b30b      	cbz	r3, 21226 <submit_to_queue_locked+0xa2>
	parent->next = child;
   211e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   211e4:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   211e8:	2200      	movs	r2, #0
   211ea:	4611      	mov	r1, r2
   211ec:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   211f0:	f006 ffa9 	bl	28146 <z_sched_wake>
		ret = 1;
   211f4:	2001      	movs	r0, #1

		if (rc < 0) {
   211f6:	2800      	cmp	r0, #0
   211f8:	db06      	blt.n	21208 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   211fa:	68e3      	ldr	r3, [r4, #12]
   211fc:	f043 0304 	orr.w	r3, r3, #4
   21200:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   21202:	682b      	ldr	r3, [r5, #0]
   21204:	60a3      	str	r3, [r4, #8]
   21206:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   21208:	2800      	cmp	r0, #0
   2120a:	dc21      	bgt.n	21250 <submit_to_queue_locked+0xcc>
   2120c:	e01e      	b.n	2124c <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   2120e:	6883      	ldr	r3, [r0, #8]
   21210:	600b      	str	r3, [r1, #0]
   21212:	e7c4      	b.n	2119e <submit_to_queue_locked+0x1a>
		ret = 1;
   21214:	2701      	movs	r7, #1
   21216:	e7c9      	b.n	211ac <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21218:	f006 fbf9 	bl	27a0e <k_is_in_isr>
   2121c:	b908      	cbnz	r0, 21222 <submit_to_queue_locked+0x9e>
   2121e:	2301      	movs	r3, #1
   21220:	e7cc      	b.n	211bc <submit_to_queue_locked+0x38>
   21222:	2300      	movs	r3, #0
   21224:	e7ca      	b.n	211bc <submit_to_queue_locked+0x38>
   21226:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   2122a:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   2122e:	e7db      	b.n	211e8 <submit_to_queue_locked+0x64>
		return -EINVAL;
   21230:	f06f 0015 	mvn.w	r0, #21
   21234:	e7df      	b.n	211f6 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   21236:	f06f 0012 	mvn.w	r0, #18
   2123a:	e7dc      	b.n	211f6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   2123c:	f06f 000f 	mvn.w	r0, #15
   21240:	e7d9      	b.n	211f6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   21242:	f06f 000f 	mvn.w	r0, #15
   21246:	e7d6      	b.n	211f6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   21248:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   2124c:	2300      	movs	r3, #0
   2124e:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   21250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   21252:	2000      	movs	r0, #0
   21254:	e7fa      	b.n	2124c <submit_to_queue_locked+0xc8>
   21256:	bf00      	nop
   21258:	20003c2c 	.word	0x20003c2c

0002125c <finalize_cancel_locked>:
{
   2125c:	b570      	push	{r4, r5, r6, lr}
   2125e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   21260:	68c3      	ldr	r3, [r0, #12]
   21262:	f023 0302 	bic.w	r3, r3, #2
   21266:	60c3      	str	r3, [r0, #12]
	return list->head;
   21268:	4b19      	ldr	r3, [pc, #100]	; (212d0 <finalize_cancel_locked+0x74>)
   2126a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2126c:	b1e8      	cbz	r0, 212aa <finalize_cancel_locked+0x4e>
   2126e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   21270:	b100      	cbz	r0, 21274 <finalize_cancel_locked+0x18>
	return node->next;
   21272:	6804      	ldr	r4, [r0, #0]
   21274:	2600      	movs	r6, #0
   21276:	e01d      	b.n	212b4 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   21278:	b15e      	cbz	r6, 21292 <finalize_cancel_locked+0x36>
	return node->next;
   2127a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   2127c:	6033      	str	r3, [r6, #0]
	return list->tail;
   2127e:	4b14      	ldr	r3, [pc, #80]	; (212d0 <finalize_cancel_locked+0x74>)
   21280:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   21282:	4298      	cmp	r0, r3
   21284:	d00e      	beq.n	212a4 <finalize_cancel_locked+0x48>
	parent->next = child;
   21286:	2300      	movs	r3, #0
   21288:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   2128c:	f7ff ff0e 	bl	210ac <z_impl_k_sem_give>
}
   21290:	e015      	b.n	212be <finalize_cancel_locked+0x62>
	return node->next;
   21292:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21294:	4b0e      	ldr	r3, [pc, #56]	; (212d0 <finalize_cancel_locked+0x74>)
   21296:	601a      	str	r2, [r3, #0]
	return list->tail;
   21298:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2129a:	4298      	cmp	r0, r3
   2129c:	d1f3      	bne.n	21286 <finalize_cancel_locked+0x2a>
	list->tail = node;
   2129e:	4b0c      	ldr	r3, [pc, #48]	; (212d0 <finalize_cancel_locked+0x74>)
   212a0:	605a      	str	r2, [r3, #4]
}
   212a2:	e7f0      	b.n	21286 <finalize_cancel_locked+0x2a>
	list->tail = node;
   212a4:	4b0a      	ldr	r3, [pc, #40]	; (212d0 <finalize_cancel_locked+0x74>)
   212a6:	605e      	str	r6, [r3, #4]
}
   212a8:	e7ed      	b.n	21286 <finalize_cancel_locked+0x2a>
   212aa:	4604      	mov	r4, r0
   212ac:	e7e2      	b.n	21274 <finalize_cancel_locked+0x18>
   212ae:	4623      	mov	r3, r4
   212b0:	4620      	mov	r0, r4
   212b2:	461c      	mov	r4, r3
   212b4:	b150      	cbz	r0, 212cc <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   212b6:	6843      	ldr	r3, [r0, #4]
   212b8:	42ab      	cmp	r3, r5
   212ba:	d0dd      	beq.n	21278 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   212bc:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   212be:	2c00      	cmp	r4, #0
   212c0:	d0f5      	beq.n	212ae <finalize_cancel_locked+0x52>
   212c2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   212c4:	2c00      	cmp	r4, #0
   212c6:	d0f3      	beq.n	212b0 <finalize_cancel_locked+0x54>
	return node->next;
   212c8:	6823      	ldr	r3, [r4, #0]
   212ca:	e7f1      	b.n	212b0 <finalize_cancel_locked+0x54>
}
   212cc:	bd70      	pop	{r4, r5, r6, pc}
   212ce:	bf00      	nop
   212d0:	20003c58 	.word	0x20003c58

000212d4 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   212d4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   212d6:	68c5      	ldr	r5, [r0, #12]
   212d8:	f015 0f02 	tst.w	r5, #2
   212dc:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   212e0:	d101      	bne.n	212e6 <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   212e2:	4628      	mov	r0, r5
   212e4:	bd70      	pop	{r4, r5, r6, pc}
   212e6:	4604      	mov	r4, r0
   212e8:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   212ea:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   212ee:	2201      	movs	r2, #1
   212f0:	2100      	movs	r1, #0
   212f2:	f006 fcc2 	bl	27c7a <z_impl_k_sem_init>
	canceler->work = work;
   212f6:	6074      	str	r4, [r6, #4]
	parent->next = child;
   212f8:	2300      	movs	r3, #0
   212fa:	6033      	str	r3, [r6, #0]
	return list->tail;
   212fc:	4b05      	ldr	r3, [pc, #20]	; (21314 <cancel_sync_locked+0x40>)
   212fe:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21300:	b11b      	cbz	r3, 2130a <cancel_sync_locked+0x36>
	parent->next = child;
   21302:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21304:	4b03      	ldr	r3, [pc, #12]	; (21314 <cancel_sync_locked+0x40>)
   21306:	605e      	str	r6, [r3, #4]
}
   21308:	e7eb      	b.n	212e2 <cancel_sync_locked+0xe>
   2130a:	4b02      	ldr	r3, [pc, #8]	; (21314 <cancel_sync_locked+0x40>)
   2130c:	605e      	str	r6, [r3, #4]
	list->head = node;
   2130e:	601e      	str	r6, [r3, #0]
}
   21310:	e7e7      	b.n	212e2 <cancel_sync_locked+0xe>
   21312:	bf00      	nop
   21314:	20003c58 	.word	0x20003c58

00021318 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21318:	b5f0      	push	{r4, r5, r6, r7, lr}
   2131a:	b085      	sub	sp, #20
   2131c:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   2131e:	e016      	b.n	2134e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   21320:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   21324:	f023 0204 	bic.w	r2, r3, #4
   21328:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2132c:	f013 0f04 	tst.w	r3, #4
   21330:	d158      	bne.n	213e4 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21332:	2300      	movs	r3, #0
   21334:	9302      	str	r3, [sp, #8]
   21336:	f04f 32ff 	mov.w	r2, #4294967295
   2133a:	f04f 33ff 	mov.w	r3, #4294967295
   2133e:	e9cd 2300 	strd	r2, r3, [sp]
   21342:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   21346:	4631      	mov	r1, r6
   21348:	482e      	ldr	r0, [pc, #184]	; (21404 <work_queue_main+0xec>)
   2134a:	f000 fcc9 	bl	21ce0 <z_sched_wait>
	__asm__ volatile(
   2134e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21352:	f3ef 8611 	mrs	r6, BASEPRI
   21356:	f383 8812 	msr	BASEPRI_MAX, r3
   2135a:	f3bf 8f6f 	isb	sy
	return list->head;
   2135e:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   21362:	2c00      	cmp	r4, #0
   21364:	d0dc      	beq.n	21320 <work_queue_main+0x8>
	return node->next;
   21366:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   21368:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   2136c:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21370:	4294      	cmp	r4, r2
   21372:	d034      	beq.n	213de <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   21374:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   21378:	f043 0302 	orr.w	r3, r3, #2
   2137c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   21380:	68e3      	ldr	r3, [r4, #12]
   21382:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   21386:	f023 0304 	bic.w	r3, r3, #4
   2138a:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   2138c:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   2138e:	2c00      	cmp	r4, #0
   21390:	d0cf      	beq.n	21332 <work_queue_main+0x1a>
	__asm__ volatile(
   21392:	f386 8811 	msr	BASEPRI, r6
   21396:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   2139a:	4620      	mov	r0, r4
   2139c:	4798      	blx	r3
	__asm__ volatile(
   2139e:	f04f 0340 	mov.w	r3, #64	; 0x40
   213a2:	f3ef 8611 	mrs	r6, BASEPRI
   213a6:	f383 8812 	msr	BASEPRI_MAX, r3
   213aa:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   213ae:	68e3      	ldr	r3, [r4, #12]
   213b0:	f023 0301 	bic.w	r3, r3, #1
   213b4:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   213b6:	f013 0f02 	tst.w	r3, #2
   213ba:	d11e      	bne.n	213fa <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   213bc:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   213c0:	f023 0302 	bic.w	r3, r3, #2
   213c4:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   213c8:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   213cc:	f386 8811 	msr	BASEPRI, r6
   213d0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   213d4:	2b00      	cmp	r3, #0
   213d6:	d1ba      	bne.n	2134e <work_queue_main+0x36>
	z_impl_k_yield();
   213d8:	f000 fb84 	bl	21ae4 <z_impl_k_yield>
}
   213dc:	e7b7      	b.n	2134e <work_queue_main+0x36>
	list->tail = node;
   213de:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   213e2:	e7c7      	b.n	21374 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   213e4:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   213e8:	2200      	movs	r2, #0
   213ea:	2101      	movs	r1, #1
   213ec:	4638      	mov	r0, r7
   213ee:	f006 feaa 	bl	28146 <z_sched_wake>
   213f2:	2800      	cmp	r0, #0
   213f4:	d1f8      	bne.n	213e8 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   213f6:	2300      	movs	r3, #0
   213f8:	e7c9      	b.n	2138e <work_queue_main+0x76>
			finalize_cancel_locked(work);
   213fa:	4620      	mov	r0, r4
   213fc:	f7ff ff2e 	bl	2125c <finalize_cancel_locked>
   21400:	e7dc      	b.n	213bc <work_queue_main+0xa4>
   21402:	bf00      	nop
   21404:	20003c58 	.word	0x20003c58

00021408 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21408:	b570      	push	{r4, r5, r6, lr}
   2140a:	4606      	mov	r6, r0
   2140c:	4608      	mov	r0, r1
   2140e:	4614      	mov	r4, r2
   21410:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21412:	ea54 0305 	orrs.w	r3, r4, r5
   21416:	d00c      	beq.n	21432 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   21418:	68cb      	ldr	r3, [r1, #12]
   2141a:	f043 0308 	orr.w	r3, r3, #8
   2141e:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   21420:	6833      	ldr	r3, [r6, #0]
   21422:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21424:	462b      	mov	r3, r5
   21426:	4905      	ldr	r1, [pc, #20]	; (2143c <schedule_for_queue_locked+0x34>)
   21428:	3010      	adds	r0, #16
   2142a:	f000 fccd 	bl	21dc8 <z_add_timeout>

	return ret;
   2142e:	2001      	movs	r0, #1
}
   21430:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   21432:	4631      	mov	r1, r6
   21434:	f7ff fea6 	bl	21184 <submit_to_queue_locked>
   21438:	e7fa      	b.n	21430 <schedule_for_queue_locked+0x28>
   2143a:	bf00      	nop
   2143c:	00027d25 	.word	0x00027d25

00021440 <k_work_submit>:
{
   21440:	b508      	push	{r3, lr}
   21442:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   21444:	4801      	ldr	r0, [pc, #4]	; (2144c <k_work_submit+0xc>)
   21446:	f006 fca7 	bl	27d98 <k_work_submit_to_queue>
}
   2144a:	bd08      	pop	{r3, pc}
   2144c:	20001f10 	.word	0x20001f10

00021450 <k_work_queue_start>:
{
   21450:	b5f0      	push	{r4, r5, r6, r7, lr}
   21452:	b089      	sub	sp, #36	; 0x24
   21454:	4604      	mov	r4, r0
   21456:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   21458:	2000      	movs	r0, #0
   2145a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   2145e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   21462:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   21466:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   2146a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   2146e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   21472:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   21476:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   2147a:	b1fd      	cbz	r5, 214bc <k_work_queue_start+0x6c>
   2147c:	7928      	ldrb	r0, [r5, #4]
   2147e:	b9f8      	cbnz	r0, 214c0 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   21480:	2001      	movs	r0, #1
	*flagp = flags;
   21482:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21486:	f04f 36ff 	mov.w	r6, #4294967295
   2148a:	f04f 37ff 	mov.w	r7, #4294967295
   2148e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   21492:	2000      	movs	r0, #0
   21494:	9004      	str	r0, [sp, #16]
   21496:	9303      	str	r3, [sp, #12]
   21498:	9002      	str	r0, [sp, #8]
   2149a:	9001      	str	r0, [sp, #4]
   2149c:	9400      	str	r4, [sp, #0]
   2149e:	4b0a      	ldr	r3, [pc, #40]	; (214c8 <k_work_queue_start+0x78>)
   214a0:	4620      	mov	r0, r4
   214a2:	f006 facb 	bl	27a3c <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   214a6:	b125      	cbz	r5, 214b2 <k_work_queue_start+0x62>
   214a8:	6829      	ldr	r1, [r5, #0]
   214aa:	b111      	cbz	r1, 214b2 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   214ac:	4620      	mov	r0, r4
   214ae:	f7ff fc05 	bl	20cbc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   214b2:	4620      	mov	r0, r4
   214b4:	f006 fab3 	bl	27a1e <z_impl_k_thread_start>
}
   214b8:	b009      	add	sp, #36	; 0x24
   214ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   214bc:	2001      	movs	r0, #1
   214be:	e7e0      	b.n	21482 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   214c0:	f240 1001 	movw	r0, #257	; 0x101
   214c4:	e7dd      	b.n	21482 <k_work_queue_start+0x32>
   214c6:	bf00      	nop
   214c8:	00021319 	.word	0x00021319

000214cc <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   214cc:	b508      	push	{r3, lr}
   214ce:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   214d0:	4801      	ldr	r0, [pc, #4]	; (214d8 <k_work_schedule+0xc>)
   214d2:	f006 fc8d 	bl	27df0 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   214d6:	bd08      	pop	{r3, pc}
   214d8:	20001f10 	.word	0x20001f10

000214dc <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   214dc:	b508      	push	{r3, lr}
   214de:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   214e0:	4801      	ldr	r0, [pc, #4]	; (214e8 <k_work_reschedule+0xc>)
   214e2:	f006 fc9f 	bl	27e24 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   214e6:	bd08      	pop	{r3, pc}
   214e8:	20001f10 	.word	0x20001f10

000214ec <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   214ec:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   214ee:	f1b3 3fff 	cmp.w	r3, #4294967295
   214f2:	bf08      	it	eq
   214f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   214f8:	d100      	bne.n	214fc <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   214fa:	bd38      	pop	{r3, r4, r5, pc}
   214fc:	4902      	ldr	r1, [pc, #8]	; (21508 <add_thread_timeout+0x1c>)
   214fe:	3018      	adds	r0, #24
   21500:	f000 fc62 	bl	21dc8 <z_add_timeout>
   21504:	e7f9      	b.n	214fa <add_thread_timeout+0xe>
   21506:	bf00      	nop
   21508:	00027fc9 	.word	0x00027fc9

0002150c <z_reset_time_slice>:
{
   2150c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   2150e:	4b08      	ldr	r3, [pc, #32]	; (21530 <z_reset_time_slice+0x24>)
   21510:	681b      	ldr	r3, [r3, #0]
   21512:	b903      	cbnz	r3, 21516 <z_reset_time_slice+0xa>
}
   21514:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   21516:	f7fd fc8d 	bl	1ee34 <sys_clock_elapsed>
   2151a:	4603      	mov	r3, r0
   2151c:	4a04      	ldr	r2, [pc, #16]	; (21530 <z_reset_time_slice+0x24>)
   2151e:	6810      	ldr	r0, [r2, #0]
   21520:	4403      	add	r3, r0
   21522:	4a04      	ldr	r2, [pc, #16]	; (21534 <z_reset_time_slice+0x28>)
   21524:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   21526:	2100      	movs	r1, #0
   21528:	f006 fe8f 	bl	2824a <z_set_timeout_expiry>
}
   2152c:	e7f2      	b.n	21514 <z_reset_time_slice+0x8>
   2152e:	bf00      	nop
   21530:	20003c68 	.word	0x20003c68
   21534:	20003c2c 	.word	0x20003c2c

00021538 <k_sched_time_slice_set>:
{
   21538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2153c:	4606      	mov	r6, r0
   2153e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   21540:	2300      	movs	r3, #0
	__asm__ volatile(
   21542:	f04f 0240 	mov.w	r2, #64	; 0x40
   21546:	f3ef 8711 	mrs	r7, BASEPRI
   2154a:	f382 8812 	msr	BASEPRI_MAX, r2
   2154e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   21552:	e009      	b.n	21568 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   21554:	4b13      	ldr	r3, [pc, #76]	; (215a4 <k_sched_time_slice_set+0x6c>)
   21556:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   2155a:	f7ff ffd7 	bl	2150c <z_reset_time_slice>
	__asm__ volatile(
   2155e:	f387 8811 	msr	BASEPRI, r7
   21562:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   21566:	2301      	movs	r3, #1
   21568:	b9cb      	cbnz	r3, 2159e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   2156a:	2300      	movs	r3, #0
   2156c:	4a0e      	ldr	r2, [pc, #56]	; (215a8 <k_sched_time_slice_set+0x70>)
   2156e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   21570:	0c75      	lsrs	r5, r6, #17
   21572:	03f4      	lsls	r4, r6, #15
   21574:	f240 30e7 	movw	r0, #999	; 0x3e7
   21578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2157c:	2300      	movs	r3, #0
   2157e:	1820      	adds	r0, r4, r0
   21580:	f04f 0100 	mov.w	r1, #0
   21584:	eb45 0101 	adc.w	r1, r5, r1
   21588:	f7df fd7c 	bl	1084 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   2158c:	4b07      	ldr	r3, [pc, #28]	; (215ac <k_sched_time_slice_set+0x74>)
   2158e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   21590:	2e00      	cmp	r6, #0
   21592:	dddf      	ble.n	21554 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   21594:	2802      	cmp	r0, #2
   21596:	bfb8      	it	lt
   21598:	2002      	movlt	r0, #2
   2159a:	6018      	str	r0, [r3, #0]
   2159c:	e7da      	b.n	21554 <k_sched_time_slice_set+0x1c>
}
   2159e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   215a2:	bf00      	nop
   215a4:	20003c64 	.word	0x20003c64
   215a8:	20003c2c 	.word	0x20003c2c
   215ac:	20003c68 	.word	0x20003c68

000215b0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   215b0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   215b2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   215b4:	b921      	cbnz	r1, 215c0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   215b6:	f3ef 8305 	mrs	r3, IPSR
   215ba:	b913      	cbnz	r3, 215c2 <z_reschedule+0x12>
   215bc:	2101      	movs	r1, #1
   215be:	e000      	b.n	215c2 <z_reschedule+0x12>
   215c0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   215c2:	f011 0f01 	tst.w	r1, #1
   215c6:	d007      	beq.n	215d8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   215c8:	4b06      	ldr	r3, [pc, #24]	; (215e4 <z_reschedule+0x34>)
   215ca:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   215cc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   215ce:	429a      	cmp	r2, r3
   215d0:	d002      	beq.n	215d8 <z_reschedule+0x28>
	ret = arch_swap(key);
   215d2:	f7f4 f961 	bl	15898 <arch_swap>
		z_swap(lock, key);
   215d6:	e003      	b.n	215e0 <z_reschedule+0x30>
   215d8:	f380 8811 	msr	BASEPRI, r0
   215dc:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   215e0:	bd08      	pop	{r3, pc}
   215e2:	bf00      	nop
   215e4:	20003c2c 	.word	0x20003c2c

000215e8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   215e8:	2300      	movs	r3, #0
	__asm__ volatile(
   215ea:	f04f 0240 	mov.w	r2, #64	; 0x40
   215ee:	f3ef 8111 	mrs	r1, BASEPRI
   215f2:	f382 8812 	msr	BASEPRI_MAX, r2
   215f6:	f3bf 8f6f 	isb	sy
   215fa:	b953      	cbnz	r3, 21612 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   215fc:	4b05      	ldr	r3, [pc, #20]	; (21614 <k_sched_lock+0x2c>)
   215fe:	689a      	ldr	r2, [r3, #8]
   21600:	7bd3      	ldrb	r3, [r2, #15]
   21602:	3b01      	subs	r3, #1
   21604:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   21606:	f381 8811 	msr	BASEPRI, r1
   2160a:	f3bf 8f6f 	isb	sy
   2160e:	2301      	movs	r3, #1
   21610:	e7f3      	b.n	215fa <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21612:	4770      	bx	lr
   21614:	20003c2c 	.word	0x20003c2c

00021618 <update_cache>:
{
   21618:	b538      	push	{r3, r4, r5, lr}
   2161a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
   2161c:	480f      	ldr	r0, [pc, #60]	; (2165c <update_cache+0x44>)
   2161e:	f006 fcb0 	bl	27f82 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21622:	4605      	mov	r5, r0
   21624:	b170      	cbz	r0, 21644 <update_cache+0x2c>
	if (preempt_ok != 0) {
   21626:	b984      	cbnz	r4, 2164a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   21628:	4b0d      	ldr	r3, [pc, #52]	; (21660 <update_cache+0x48>)
   2162a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   2162c:	7b5a      	ldrb	r2, [r3, #13]
   2162e:	f012 0f1f 	tst.w	r2, #31
   21632:	d10a      	bne.n	2164a <update_cache+0x32>
	return node->next != NULL;
   21634:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21636:	b942      	cbnz	r2, 2164a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   21638:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   2163a:	2a7f      	cmp	r2, #127	; 0x7f
   2163c:	d905      	bls.n	2164a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   2163e:	4a08      	ldr	r2, [pc, #32]	; (21660 <update_cache+0x48>)
   21640:	61d3      	str	r3, [r2, #28]
   21642:	e00a      	b.n	2165a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21644:	4b06      	ldr	r3, [pc, #24]	; (21660 <update_cache+0x48>)
   21646:	68dd      	ldr	r5, [r3, #12]
   21648:	e7ed      	b.n	21626 <update_cache+0xe>
		if (thread != _current) {
   2164a:	4b05      	ldr	r3, [pc, #20]	; (21660 <update_cache+0x48>)
   2164c:	689b      	ldr	r3, [r3, #8]
   2164e:	42ab      	cmp	r3, r5
   21650:	d001      	beq.n	21656 <update_cache+0x3e>
			z_reset_time_slice();
   21652:	f7ff ff5b 	bl	2150c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   21656:	4b02      	ldr	r3, [pc, #8]	; (21660 <update_cache+0x48>)
   21658:	61dd      	str	r5, [r3, #28]
}
   2165a:	bd38      	pop	{r3, r4, r5, pc}
   2165c:	20003c4c 	.word	0x20003c4c
   21660:	20003c2c 	.word	0x20003c2c

00021664 <move_thread_to_end_of_prio_q>:
{
   21664:	b538      	push	{r3, r4, r5, lr}
   21666:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   21668:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2166a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2166e:	2b00      	cmp	r3, #0
   21670:	db28      	blt.n	216c4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   21672:	7b6b      	ldrb	r3, [r5, #13]
   21674:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21678:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   2167a:	4b1a      	ldr	r3, [pc, #104]	; (216e4 <move_thread_to_end_of_prio_q+0x80>)
   2167c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21680:	429c      	cmp	r4, r3
   21682:	d02d      	beq.n	216e0 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21684:	b16c      	cbz	r4, 216a2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21686:	4621      	mov	r1, r4
   21688:	4628      	mov	r0, r5
   2168a:	f006 fc30 	bl	27eee <z_sched_prio_cmp>
   2168e:	2800      	cmp	r0, #0
   21690:	dc20      	bgt.n	216d4 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21692:	b134      	cbz	r4, 216a2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   21694:	4b13      	ldr	r3, [pc, #76]	; (216e4 <move_thread_to_end_of_prio_q+0x80>)
   21696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21698:	429c      	cmp	r4, r3
   2169a:	d002      	beq.n	216a2 <move_thread_to_end_of_prio_q+0x3e>
   2169c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2169e:	2c00      	cmp	r4, #0
   216a0:	d1f0      	bne.n	21684 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   216a2:	4b10      	ldr	r3, [pc, #64]	; (216e4 <move_thread_to_end_of_prio_q+0x80>)
   216a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   216a6:	f103 0120 	add.w	r1, r3, #32
   216aa:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   216ac:	606a      	str	r2, [r5, #4]

	tail->next = node;
   216ae:	6015      	str	r5, [r2, #0]
	list->tail = node;
   216b0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   216b2:	4b0c      	ldr	r3, [pc, #48]	; (216e4 <move_thread_to_end_of_prio_q+0x80>)
   216b4:	6898      	ldr	r0, [r3, #8]
   216b6:	42a8      	cmp	r0, r5
   216b8:	bf14      	ite	ne
   216ba:	2000      	movne	r0, #0
   216bc:	2001      	moveq	r0, #1
   216be:	f7ff ffab 	bl	21618 <update_cache>
}
   216c2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   216c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   216c8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   216ca:	4601      	mov	r1, r0
   216cc:	4806      	ldr	r0, [pc, #24]	; (216e8 <move_thread_to_end_of_prio_q+0x84>)
   216ce:	f006 fc2d 	bl	27f2c <z_priq_dumb_remove>
}
   216d2:	e7ce      	b.n	21672 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   216d4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   216d6:	606b      	str	r3, [r5, #4]
	node->next = successor;
   216d8:	602c      	str	r4, [r5, #0]
	prev->next = node;
   216da:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   216dc:	6065      	str	r5, [r4, #4]
}
   216de:	e7e8      	b.n	216b2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   216e0:	2400      	movs	r4, #0
   216e2:	e7cf      	b.n	21684 <move_thread_to_end_of_prio_q+0x20>
   216e4:	20003c2c 	.word	0x20003c2c
   216e8:	20003c4c 	.word	0x20003c4c

000216ec <z_time_slice>:
{
   216ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   216ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   216f2:	f3ef 8411 	mrs	r4, BASEPRI
   216f6:	f383 8812 	msr	BASEPRI_MAX, r3
   216fa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   216fe:	4b1c      	ldr	r3, [pc, #112]	; (21770 <z_time_slice+0x84>)
   21700:	689b      	ldr	r3, [r3, #8]
   21702:	4a1c      	ldr	r2, [pc, #112]	; (21774 <z_time_slice+0x88>)
   21704:	6812      	ldr	r2, [r2, #0]
   21706:	4293      	cmp	r3, r2
   21708:	d01d      	beq.n	21746 <z_time_slice+0x5a>
	pending_current = NULL;
   2170a:	4a1a      	ldr	r2, [pc, #104]	; (21774 <z_time_slice+0x88>)
   2170c:	2100      	movs	r1, #0
   2170e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   21710:	4a19      	ldr	r2, [pc, #100]	; (21778 <z_time_slice+0x8c>)
   21712:	6812      	ldr	r2, [r2, #0]
   21714:	b322      	cbz	r2, 21760 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   21716:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   21718:	2a7f      	cmp	r2, #127	; 0x7f
   2171a:	d821      	bhi.n	21760 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   2171c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   2171e:	f012 0f1f 	tst.w	r2, #31
   21722:	d11d      	bne.n	21760 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21724:	f993 100e 	ldrsb.w	r1, [r3, #14]
   21728:	4a14      	ldr	r2, [pc, #80]	; (2177c <z_time_slice+0x90>)
   2172a:	6812      	ldr	r2, [r2, #0]
   2172c:	4291      	cmp	r1, r2
   2172e:	db17      	blt.n	21760 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   21730:	4a13      	ldr	r2, [pc, #76]	; (21780 <z_time_slice+0x94>)
   21732:	4293      	cmp	r3, r2
   21734:	d014      	beq.n	21760 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   21736:	4a0e      	ldr	r2, [pc, #56]	; (21770 <z_time_slice+0x84>)
   21738:	6912      	ldr	r2, [r2, #16]
   2173a:	4282      	cmp	r2, r0
   2173c:	dd0a      	ble.n	21754 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   2173e:	1a10      	subs	r0, r2, r0
   21740:	4b0b      	ldr	r3, [pc, #44]	; (21770 <z_time_slice+0x84>)
   21742:	6118      	str	r0, [r3, #16]
   21744:	e00f      	b.n	21766 <z_time_slice+0x7a>
		z_reset_time_slice();
   21746:	f7ff fee1 	bl	2150c <z_reset_time_slice>
	__asm__ volatile(
   2174a:	f384 8811 	msr	BASEPRI, r4
   2174e:	f3bf 8f6f 	isb	sy
		return;
   21752:	e00c      	b.n	2176e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   21754:	4618      	mov	r0, r3
   21756:	f7ff ff85 	bl	21664 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   2175a:	f7ff fed7 	bl	2150c <z_reset_time_slice>
   2175e:	e002      	b.n	21766 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   21760:	4b03      	ldr	r3, [pc, #12]	; (21770 <z_time_slice+0x84>)
   21762:	2200      	movs	r2, #0
   21764:	611a      	str	r2, [r3, #16]
   21766:	f384 8811 	msr	BASEPRI, r4
   2176a:	f3bf 8f6f 	isb	sy
}
   2176e:	bd10      	pop	{r4, pc}
   21770:	20003c2c 	.word	0x20003c2c
   21774:	20003c60 	.word	0x20003c60
   21778:	20003c68 	.word	0x20003c68
   2177c:	20003c64 	.word	0x20003c64
   21780:	20001da0 	.word	0x20001da0

00021784 <ready_thread>:
{
   21784:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   21786:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21788:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2178c:	2a00      	cmp	r2, #0
   2178e:	db2d      	blt.n	217ec <ready_thread+0x68>
   21790:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21792:	f013 0f1f 	tst.w	r3, #31
   21796:	d105      	bne.n	217a4 <ready_thread+0x20>
	return node->next != NULL;
   21798:	6982      	ldr	r2, [r0, #24]
   2179a:	b10a      	cbz	r2, 217a0 <ready_thread+0x1c>
   2179c:	2200      	movs	r2, #0
   2179e:	e002      	b.n	217a6 <ready_thread+0x22>
   217a0:	2201      	movs	r2, #1
   217a2:	e000      	b.n	217a6 <ready_thread+0x22>
   217a4:	2200      	movs	r2, #0
   217a6:	b30a      	cbz	r2, 217ec <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   217a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   217ac:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   217ae:	4b14      	ldr	r3, [pc, #80]	; (21800 <ready_thread+0x7c>)
   217b0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   217b4:	429d      	cmp	r5, r3
   217b6:	d020      	beq.n	217fa <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217b8:	b16d      	cbz	r5, 217d6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   217ba:	4629      	mov	r1, r5
   217bc:	4620      	mov	r0, r4
   217be:	f006 fb96 	bl	27eee <z_sched_prio_cmp>
   217c2:	2800      	cmp	r0, #0
   217c4:	dc13      	bgt.n	217ee <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   217c6:	b135      	cbz	r5, 217d6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   217c8:	4b0d      	ldr	r3, [pc, #52]	; (21800 <ready_thread+0x7c>)
   217ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   217cc:	429d      	cmp	r5, r3
   217ce:	d002      	beq.n	217d6 <ready_thread+0x52>
   217d0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217d2:	2d00      	cmp	r5, #0
   217d4:	d1f0      	bne.n	217b8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   217d6:	4b0a      	ldr	r3, [pc, #40]	; (21800 <ready_thread+0x7c>)
   217d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   217da:	f103 0120 	add.w	r1, r3, #32
   217de:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   217e0:	6062      	str	r2, [r4, #4]
	tail->next = node;
   217e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   217e4:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   217e6:	2000      	movs	r0, #0
   217e8:	f7ff ff16 	bl	21618 <update_cache>
}
   217ec:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   217ee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   217f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   217f2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   217f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   217f6:	606c      	str	r4, [r5, #4]
}
   217f8:	e7f5      	b.n	217e6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217fa:	2500      	movs	r5, #0
   217fc:	e7dc      	b.n	217b8 <ready_thread+0x34>
   217fe:	bf00      	nop
   21800:	20003c2c 	.word	0x20003c2c

00021804 <z_sched_start>:
{
   21804:	b510      	push	{r4, lr}
	__asm__ volatile(
   21806:	f04f 0340 	mov.w	r3, #64	; 0x40
   2180a:	f3ef 8411 	mrs	r4, BASEPRI
   2180e:	f383 8812 	msr	BASEPRI_MAX, r3
   21812:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21816:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   21818:	f013 0f04 	tst.w	r3, #4
   2181c:	d104      	bne.n	21828 <z_sched_start+0x24>
	__asm__ volatile(
   2181e:	f384 8811 	msr	BASEPRI, r4
   21822:	f3bf 8f6f 	isb	sy
}
   21826:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21828:	f023 0304 	bic.w	r3, r3, #4
   2182c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   2182e:	f7ff ffa9 	bl	21784 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21832:	4621      	mov	r1, r4
   21834:	4801      	ldr	r0, [pc, #4]	; (2183c <z_sched_start+0x38>)
   21836:	f7ff febb 	bl	215b0 <z_reschedule>
   2183a:	e7f4      	b.n	21826 <z_sched_start+0x22>
   2183c:	20003c64 	.word	0x20003c64

00021840 <unready_thread>:
{
   21840:	b510      	push	{r4, lr}
   21842:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   21844:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   21846:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2184a:	2b00      	cmp	r3, #0
   2184c:	db08      	blt.n	21860 <unready_thread+0x20>
	update_cache(thread == _current);
   2184e:	4b08      	ldr	r3, [pc, #32]	; (21870 <unready_thread+0x30>)
   21850:	6898      	ldr	r0, [r3, #8]
   21852:	42a0      	cmp	r0, r4
   21854:	bf14      	ite	ne
   21856:	2000      	movne	r0, #0
   21858:	2001      	moveq	r0, #1
   2185a:	f7ff fedd 	bl	21618 <update_cache>
}
   2185e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   21864:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21866:	4601      	mov	r1, r0
   21868:	4802      	ldr	r0, [pc, #8]	; (21874 <unready_thread+0x34>)
   2186a:	f006 fb5f 	bl	27f2c <z_priq_dumb_remove>
}
   2186e:	e7ee      	b.n	2184e <unready_thread+0xe>
   21870:	20003c2c 	.word	0x20003c2c
   21874:	20003c4c 	.word	0x20003c4c

00021878 <z_pend_curr>:
{
   21878:	b510      	push	{r4, lr}
   2187a:	460c      	mov	r4, r1
   2187c:	4611      	mov	r1, r2
	pending_current = _current;
   2187e:	4b06      	ldr	r3, [pc, #24]	; (21898 <z_pend_curr+0x20>)
   21880:	6898      	ldr	r0, [r3, #8]
   21882:	4b06      	ldr	r3, [pc, #24]	; (2189c <z_pend_curr+0x24>)
   21884:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   21886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2188a:	f006 fbfb 	bl	28084 <pend>
   2188e:	4620      	mov	r0, r4
   21890:	f7f4 f802 	bl	15898 <arch_swap>
}
   21894:	bd10      	pop	{r4, pc}
   21896:	bf00      	nop
   21898:	20003c2c 	.word	0x20003c2c
   2189c:	20003c60 	.word	0x20003c60

000218a0 <z_set_prio>:
{
   218a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   218a4:	4604      	mov	r4, r0
   218a6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   218a8:	2300      	movs	r3, #0
	__asm__ volatile(
   218aa:	f04f 0240 	mov.w	r2, #64	; 0x40
   218ae:	f3ef 8611 	mrs	r6, BASEPRI
   218b2:	f382 8812 	msr	BASEPRI_MAX, r2
   218b6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   218ba:	4698      	mov	r8, r3
   218bc:	e008      	b.n	218d0 <z_set_prio+0x30>
		if (need_sched) {
   218be:	f012 0801 	ands.w	r8, r2, #1
   218c2:	d111      	bne.n	218e8 <z_set_prio+0x48>
			thread->base.prio = prio;
   218c4:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   218c6:	f386 8811 	msr	BASEPRI, r6
   218ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   218ce:	2301      	movs	r3, #1
   218d0:	461a      	mov	r2, r3
   218d2:	2b00      	cmp	r3, #0
   218d4:	d13d      	bne.n	21952 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   218d6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   218d8:	f013 0f1f 	tst.w	r3, #31
   218dc:	d1ef      	bne.n	218be <z_set_prio+0x1e>
	return node->next != NULL;
   218de:	69a1      	ldr	r1, [r4, #24]
   218e0:	2900      	cmp	r1, #0
   218e2:	d1ec      	bne.n	218be <z_set_prio+0x1e>
   218e4:	2201      	movs	r2, #1
   218e6:	e7ea      	b.n	218be <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   218e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   218ec:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   218ee:	f8df 906c 	ldr.w	r9, [pc, #108]	; 2195c <z_set_prio+0xbc>
   218f2:	4621      	mov	r1, r4
   218f4:	4648      	mov	r0, r9
   218f6:	f006 fb19 	bl	27f2c <z_priq_dumb_remove>
				thread->base.prio = prio;
   218fa:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   218fc:	7b63      	ldrb	r3, [r4, #13]
   218fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21902:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   21904:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21908:	454d      	cmp	r5, r9
   2190a:	d020      	beq.n	2194e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2190c:	b16d      	cbz	r5, 2192a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2190e:	4629      	mov	r1, r5
   21910:	4620      	mov	r0, r4
   21912:	f006 faec 	bl	27eee <z_sched_prio_cmp>
   21916:	2800      	cmp	r0, #0
   21918:	dc13      	bgt.n	21942 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2191a:	b135      	cbz	r5, 2192a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   2191c:	4b0e      	ldr	r3, [pc, #56]	; (21958 <z_set_prio+0xb8>)
   2191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21920:	429d      	cmp	r5, r3
   21922:	d002      	beq.n	2192a <z_set_prio+0x8a>
   21924:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21926:	2d00      	cmp	r5, #0
   21928:	d1f0      	bne.n	2190c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   2192a:	4b0b      	ldr	r3, [pc, #44]	; (21958 <z_set_prio+0xb8>)
   2192c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   2192e:	f103 0120 	add.w	r1, r3, #32
   21932:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   21934:	6062      	str	r2, [r4, #4]
	tail->next = node;
   21936:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21938:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   2193a:	2001      	movs	r0, #1
   2193c:	f7ff fe6c 	bl	21618 <update_cache>
   21940:	e7c1      	b.n	218c6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   21942:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   21944:	6063      	str	r3, [r4, #4]
	node->next = successor;
   21946:	6025      	str	r5, [r4, #0]
	prev->next = node;
   21948:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2194a:	606c      	str	r4, [r5, #4]
}
   2194c:	e7f5      	b.n	2193a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2194e:	2500      	movs	r5, #0
   21950:	e7dc      	b.n	2190c <z_set_prio+0x6c>
}
   21952:	4640      	mov	r0, r8
   21954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21958:	20003c2c 	.word	0x20003c2c
   2195c:	20003c4c 	.word	0x20003c4c

00021960 <z_impl_k_thread_suspend>:
{
   21960:	b538      	push	{r3, r4, r5, lr}
   21962:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21964:	3018      	adds	r0, #24
   21966:	f006 fc3c 	bl	281e2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   2196a:	2300      	movs	r3, #0
	__asm__ volatile(
   2196c:	f04f 0240 	mov.w	r2, #64	; 0x40
   21970:	f3ef 8511 	mrs	r5, BASEPRI
   21974:	f382 8812 	msr	BASEPRI_MAX, r2
   21978:	f3bf 8f6f 	isb	sy
   2197c:	e010      	b.n	219a0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2197e:	7b63      	ldrb	r3, [r4, #13]
   21980:	f043 0310 	orr.w	r3, r3, #16
   21984:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   21986:	4b15      	ldr	r3, [pc, #84]	; (219dc <z_impl_k_thread_suspend+0x7c>)
   21988:	6898      	ldr	r0, [r3, #8]
   2198a:	42a0      	cmp	r0, r4
   2198c:	bf14      	ite	ne
   2198e:	2000      	movne	r0, #0
   21990:	2001      	moveq	r0, #1
   21992:	f7ff fe41 	bl	21618 <update_cache>
	__asm__ volatile(
   21996:	f385 8811 	msr	BASEPRI, r5
   2199a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2199e:	2301      	movs	r3, #1
   219a0:	b963      	cbnz	r3, 219bc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   219a2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   219a4:	f994 300d 	ldrsb.w	r3, [r4, #13]
   219a8:	2b00      	cmp	r3, #0
   219aa:	dae8      	bge.n	2197e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   219ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   219b0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   219b2:	4621      	mov	r1, r4
   219b4:	480a      	ldr	r0, [pc, #40]	; (219e0 <z_impl_k_thread_suspend+0x80>)
   219b6:	f006 fab9 	bl	27f2c <z_priq_dumb_remove>
}
   219ba:	e7e0      	b.n	2197e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   219bc:	4b07      	ldr	r3, [pc, #28]	; (219dc <z_impl_k_thread_suspend+0x7c>)
   219be:	689b      	ldr	r3, [r3, #8]
   219c0:	42a3      	cmp	r3, r4
   219c2:	d000      	beq.n	219c6 <z_impl_k_thread_suspend+0x66>
}
   219c4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   219c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   219ca:	f3ef 8011 	mrs	r0, BASEPRI
   219ce:	f383 8812 	msr	BASEPRI_MAX, r3
   219d2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   219d6:	f006 fa94 	bl	27f02 <z_reschedule_irqlock>
   219da:	e7f3      	b.n	219c4 <z_impl_k_thread_suspend+0x64>
   219dc:	20003c2c 	.word	0x20003c2c
   219e0:	20003c4c 	.word	0x20003c4c

000219e4 <k_sched_unlock>:

void k_sched_unlock(void)
{
   219e4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   219e6:	2300      	movs	r3, #0
   219e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   219ec:	f3ef 8411 	mrs	r4, BASEPRI
   219f0:	f382 8812 	msr	BASEPRI_MAX, r2
   219f4:	f3bf 8f6f 	isb	sy
   219f8:	b96b      	cbnz	r3, 21a16 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   219fa:	4b0c      	ldr	r3, [pc, #48]	; (21a2c <k_sched_unlock+0x48>)
   219fc:	689a      	ldr	r2, [r3, #8]
   219fe:	7bd3      	ldrb	r3, [r2, #15]
   21a00:	3301      	adds	r3, #1
   21a02:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   21a04:	2000      	movs	r0, #0
   21a06:	f7ff fe07 	bl	21618 <update_cache>
	__asm__ volatile(
   21a0a:	f384 8811 	msr	BASEPRI, r4
   21a0e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   21a12:	2301      	movs	r3, #1
   21a14:	e7f0      	b.n	219f8 <k_sched_unlock+0x14>
	__asm__ volatile(
   21a16:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a1a:	f3ef 8011 	mrs	r0, BASEPRI
   21a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   21a22:	f3bf 8f6f 	isb	sy
   21a26:	f006 fa6c 	bl	27f02 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   21a2a:	bd10      	pop	{r4, pc}
   21a2c:	20003c2c 	.word	0x20003c2c

00021a30 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   21a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   21a32:	7b43      	ldrb	r3, [r0, #13]
   21a34:	f013 0f08 	tst.w	r3, #8
   21a38:	d145      	bne.n	21ac6 <end_thread+0x96>
   21a3a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   21a3c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   21a40:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   21a44:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   21a46:	f013 0f80 	tst.w	r3, #128	; 0x80
   21a4a:	d114      	bne.n	21a76 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
   21a4c:	68ab      	ldr	r3, [r5, #8]
   21a4e:	b15b      	cbz	r3, 21a68 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21a50:	4628      	mov	r0, r5
   21a52:	f006 fa4a 	bl	27eea <pended_on_thread>
   21a56:	4629      	mov	r1, r5
   21a58:	f006 fa68 	bl	27f2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21a5c:	7b6b      	ldrb	r3, [r5, #13]
   21a5e:	f023 0302 	bic.w	r3, r3, #2
   21a62:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   21a64:	2300      	movs	r3, #0
   21a66:	60ab      	str	r3, [r5, #8]
   21a68:	f105 0018 	add.w	r0, r5, #24
   21a6c:	f006 fbb9 	bl	281e2 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   21a70:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21a74:	e01c      	b.n	21ab0 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21a7a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21a7c:	4601      	mov	r1, r0
   21a7e:	4812      	ldr	r0, [pc, #72]	; (21ac8 <end_thread+0x98>)
   21a80:	f006 fa54 	bl	27f2c <z_priq_dumb_remove>
}
   21a84:	e7e2      	b.n	21a4c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21a86:	4620      	mov	r0, r4
   21a88:	f006 fa2f 	bl	27eea <pended_on_thread>
   21a8c:	4621      	mov	r1, r4
   21a8e:	f006 fa4d 	bl	27f2c <z_priq_dumb_remove>
   21a92:	7b63      	ldrb	r3, [r4, #13]
   21a94:	f023 0302 	bic.w	r3, r3, #2
   21a98:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21a9a:	2600      	movs	r6, #0
   21a9c:	60a6      	str	r6, [r4, #8]
   21a9e:	f104 0018 	add.w	r0, r4, #24
   21aa2:	f006 fb9e 	bl	281e2 <z_abort_timeout>
   21aa6:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   21aaa:	4620      	mov	r0, r4
   21aac:	f7ff fe6a 	bl	21784 <ready_thread>
	return list->head == list;
   21ab0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21ab2:	42bc      	cmp	r4, r7
   21ab4:	d001      	beq.n	21aba <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   21ab6:	2c00      	cmp	r4, #0
   21ab8:	d1e5      	bne.n	21a86 <end_thread+0x56>
		update_cache(1);
   21aba:	2001      	movs	r0, #1
   21abc:	f7ff fdac 	bl	21618 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   21ac0:	4628      	mov	r0, r5
   21ac2:	f7ff f8db 	bl	20c7c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   21ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21ac8:	20003c4c 	.word	0x20003c4c

00021acc <z_sched_init>:
{
   21acc:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
   21ace:	4804      	ldr	r0, [pc, #16]	; (21ae0 <z_sched_init+0x14>)
   21ad0:	f006 fb35 	bl	2813e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   21ad4:	2100      	movs	r1, #0
   21ad6:	4608      	mov	r0, r1
   21ad8:	f7ff fd2e 	bl	21538 <k_sched_time_slice_set>
}
   21adc:	bd08      	pop	{r3, pc}
   21ade:	bf00      	nop
   21ae0:	20003c48 	.word	0x20003c48

00021ae4 <z_impl_k_yield>:
{
   21ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ae6:	f04f 0340 	mov.w	r3, #64	; 0x40
   21aea:	f3ef 8611 	mrs	r6, BASEPRI
   21aee:	f383 8812 	msr	BASEPRI_MAX, r3
   21af2:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
   21af6:	4c1c      	ldr	r4, [pc, #112]	; (21b68 <z_impl_k_yield+0x84>)
   21af8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21afa:	7b4b      	ldrb	r3, [r1, #13]
   21afc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21b00:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21b02:	f104 0720 	add.w	r7, r4, #32
   21b06:	4638      	mov	r0, r7
   21b08:	f006 fa10 	bl	27f2c <z_priq_dumb_remove>
	queue_thread(_current);
   21b0c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   21b0e:	7b6b      	ldrb	r3, [r5, #13]
   21b10:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21b14:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   21b16:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b18:	42bc      	cmp	r4, r7
   21b1a:	d023      	beq.n	21b64 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b1c:	b16c      	cbz	r4, 21b3a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21b1e:	4621      	mov	r1, r4
   21b20:	4628      	mov	r0, r5
   21b22:	f006 f9e4 	bl	27eee <z_sched_prio_cmp>
   21b26:	2800      	cmp	r0, #0
   21b28:	dc16      	bgt.n	21b58 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21b2a:	b134      	cbz	r4, 21b3a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   21b2c:	4b0e      	ldr	r3, [pc, #56]	; (21b68 <z_impl_k_yield+0x84>)
   21b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   21b30:	429c      	cmp	r4, r3
   21b32:	d002      	beq.n	21b3a <z_impl_k_yield+0x56>
   21b34:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b36:	2c00      	cmp	r4, #0
   21b38:	d1f0      	bne.n	21b1c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   21b3a:	4b0b      	ldr	r3, [pc, #44]	; (21b68 <z_impl_k_yield+0x84>)
   21b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   21b3e:	f103 0120 	add.w	r1, r3, #32
   21b42:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   21b44:	606a      	str	r2, [r5, #4]
	tail->next = node;
   21b46:	6015      	str	r5, [r2, #0]
	list->tail = node;
   21b48:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   21b4a:	2001      	movs	r0, #1
   21b4c:	f7ff fd64 	bl	21618 <update_cache>
   21b50:	4630      	mov	r0, r6
   21b52:	f7f3 fea1 	bl	15898 <arch_swap>
}
   21b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   21b58:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   21b5a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   21b5c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   21b5e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   21b60:	6065      	str	r5, [r4, #4]
}
   21b62:	e7f2      	b.n	21b4a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21b64:	2400      	movs	r4, #0
   21b66:	e7d9      	b.n	21b1c <z_impl_k_yield+0x38>
   21b68:	20003c2c 	.word	0x20003c2c

00021b6c <z_tick_sleep>:
{
   21b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b70:	4604      	mov	r4, r0
   21b72:	460d      	mov	r5, r1
	if (ticks == 0) {
   21b74:	ea54 0105 	orrs.w	r1, r4, r5
   21b78:	d037      	beq.n	21bea <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   21b7a:	f06f 0101 	mvn.w	r1, #1
   21b7e:	1a0a      	subs	r2, r1, r0
   21b80:	f04f 31ff 	mov.w	r1, #4294967295
   21b84:	eb61 0305 	sbc.w	r3, r1, r5
   21b88:	2a01      	cmp	r2, #1
   21b8a:	f173 0300 	sbcs.w	r3, r3, #0
   21b8e:	db30      	blt.n	21bf2 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   21b90:	f06f 0601 	mvn.w	r6, #1
   21b94:	1a36      	subs	r6, r6, r0
   21b96:	f04f 0340 	mov.w	r3, #64	; 0x40
   21b9a:	f3ef 8811 	mrs	r8, BASEPRI
   21b9e:	f383 8812 	msr	BASEPRI_MAX, r3
   21ba2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   21ba6:	4f16      	ldr	r7, [pc, #88]	; (21c00 <z_tick_sleep+0x94>)
   21ba8:	68b8      	ldr	r0, [r7, #8]
   21baa:	4b16      	ldr	r3, [pc, #88]	; (21c04 <z_tick_sleep+0x98>)
   21bac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   21bae:	f7ff fe47 	bl	21840 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   21bb2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   21bb4:	4622      	mov	r2, r4
   21bb6:	462b      	mov	r3, r5
   21bb8:	4913      	ldr	r1, [pc, #76]	; (21c08 <z_tick_sleep+0x9c>)
   21bba:	3018      	adds	r0, #24
   21bbc:	f000 f904 	bl	21dc8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   21bc0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21bc2:	7b53      	ldrb	r3, [r2, #13]
   21bc4:	f043 0310 	orr.w	r3, r3, #16
   21bc8:	7353      	strb	r3, [r2, #13]
   21bca:	4640      	mov	r0, r8
   21bcc:	f7f3 fe64 	bl	15898 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   21bd0:	2500      	movs	r5, #0
   21bd2:	f006 fb65 	bl	282a0 <sys_clock_tick_get_32>
   21bd6:	1a34      	subs	r4, r6, r0
   21bd8:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   21bdc:	2c01      	cmp	r4, #1
   21bde:	f175 0300 	sbcs.w	r3, r5, #0
   21be2:	da0a      	bge.n	21bfa <z_tick_sleep+0x8e>
	return 0;
   21be4:	2000      	movs	r0, #0
}
   21be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   21bea:	f7ff ff7b 	bl	21ae4 <z_impl_k_yield>
		return 0;
   21bee:	2000      	movs	r0, #0
   21bf0:	e7f9      	b.n	21be6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   21bf2:	f006 fb55 	bl	282a0 <sys_clock_tick_get_32>
   21bf6:	1906      	adds	r6, r0, r4
   21bf8:	e7cd      	b.n	21b96 <z_tick_sleep+0x2a>
		return ticks;
   21bfa:	4620      	mov	r0, r4
   21bfc:	e7f3      	b.n	21be6 <z_tick_sleep+0x7a>
   21bfe:	bf00      	nop
   21c00:	20003c2c 	.word	0x20003c2c
   21c04:	20003c60 	.word	0x20003c60
   21c08:	00027fc9 	.word	0x00027fc9

00021c0c <z_impl_k_sleep>:
{
   21c0c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c0e:	f1b1 3fff 	cmp.w	r1, #4294967295
   21c12:	bf08      	it	eq
   21c14:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   21c18:	d01a      	beq.n	21c50 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   21c1a:	f7ff ffa7 	bl	21b6c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   21c1e:	4604      	mov	r4, r0
   21c20:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   21c22:	0169      	lsls	r1, r5, #5
   21c24:	0143      	lsls	r3, r0, #5
   21c26:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   21c2a:	1a18      	subs	r0, r3, r0
   21c2c:	eb62 0305 	sbc.w	r3, r2, r5
   21c30:	009a      	lsls	r2, r3, #2
   21c32:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   21c36:	0081      	lsls	r1, r0, #2
   21c38:	4613      	mov	r3, r2
   21c3a:	1908      	adds	r0, r1, r4
   21c3c:	eb45 0303 	adc.w	r3, r5, r3
   21c40:	00da      	lsls	r2, r3, #3
   21c42:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   21c46:	00c1      	lsls	r1, r0, #3
   21c48:	0bc8      	lsrs	r0, r1, #15
   21c4a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   21c4e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   21c50:	4b03      	ldr	r3, [pc, #12]	; (21c60 <z_impl_k_sleep+0x54>)
   21c52:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   21c54:	f7ff fe84 	bl	21960 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   21c58:	f04f 30ff 	mov.w	r0, #4294967295
   21c5c:	e7f7      	b.n	21c4e <z_impl_k_sleep+0x42>
   21c5e:	bf00      	nop
   21c60:	20003c2c 	.word	0x20003c2c

00021c64 <z_impl_z_current_get>:
}
   21c64:	4b01      	ldr	r3, [pc, #4]	; (21c6c <z_impl_z_current_get+0x8>)
   21c66:	6898      	ldr	r0, [r3, #8]
   21c68:	4770      	bx	lr
   21c6a:	bf00      	nop
   21c6c:	20003c2c 	.word	0x20003c2c

00021c70 <z_impl_k_is_preempt_thread>:
   21c70:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   21c74:	b933      	cbnz	r3, 21c84 <z_impl_k_is_preempt_thread+0x14>
   21c76:	4b05      	ldr	r3, [pc, #20]	; (21c8c <z_impl_k_is_preempt_thread+0x1c>)
   21c78:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   21c7a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   21c7c:	2b7f      	cmp	r3, #127	; 0x7f
   21c7e:	d803      	bhi.n	21c88 <z_impl_k_is_preempt_thread+0x18>
   21c80:	2001      	movs	r0, #1
   21c82:	4770      	bx	lr
   21c84:	2000      	movs	r0, #0
   21c86:	4770      	bx	lr
   21c88:	2000      	movs	r0, #0
}
   21c8a:	4770      	bx	lr
   21c8c:	20003c2c 	.word	0x20003c2c

00021c90 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   21c90:	b538      	push	{r3, r4, r5, lr}
   21c92:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c96:	f3ef 8511 	mrs	r5, BASEPRI
   21c9a:	f383 8812 	msr	BASEPRI_MAX, r3
   21c9e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   21ca2:	7b43      	ldrb	r3, [r0, #13]
   21ca4:	f013 0f08 	tst.w	r3, #8
   21ca8:	d004      	beq.n	21cb4 <z_thread_abort+0x24>
	__asm__ volatile(
   21caa:	f385 8811 	msr	BASEPRI, r5
   21cae:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   21cb2:	bd38      	pop	{r3, r4, r5, pc}
   21cb4:	4604      	mov	r4, r0
	end_thread(thread);
   21cb6:	f7ff febb 	bl	21a30 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   21cba:	4b08      	ldr	r3, [pc, #32]	; (21cdc <z_thread_abort+0x4c>)
   21cbc:	689b      	ldr	r3, [r3, #8]
   21cbe:	42a3      	cmp	r3, r4
   21cc0:	d004      	beq.n	21ccc <z_thread_abort+0x3c>
   21cc2:	f385 8811 	msr	BASEPRI, r5
   21cc6:	f3bf 8f6f 	isb	sy
   21cca:	e7f2      	b.n	21cb2 <z_thread_abort+0x22>
   21ccc:	f3ef 8305 	mrs	r3, IPSR
   21cd0:	2b00      	cmp	r3, #0
   21cd2:	d1f6      	bne.n	21cc2 <z_thread_abort+0x32>
   21cd4:	4628      	mov	r0, r5
   21cd6:	f7f3 fddf 	bl	15898 <arch_swap>
	return ret;
   21cda:	e7f2      	b.n	21cc2 <z_thread_abort+0x32>
   21cdc:	20003c2c 	.word	0x20003c2c

00021ce0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   21ce0:	b5d0      	push	{r4, r6, r7, lr}
   21ce2:	b082      	sub	sp, #8
   21ce4:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   21ce6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   21cea:	e9cd 6700 	strd	r6, r7, [sp]
   21cee:	f7ff fdc3 	bl	21878 <z_pend_curr>

	if (data != NULL) {
   21cf2:	b11c      	cbz	r4, 21cfc <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   21cf4:	4b02      	ldr	r3, [pc, #8]	; (21d00 <z_sched_wait+0x20>)
   21cf6:	689b      	ldr	r3, [r3, #8]
   21cf8:	695b      	ldr	r3, [r3, #20]
   21cfa:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   21cfc:	b002      	add	sp, #8
   21cfe:	bdd0      	pop	{r4, r6, r7, pc}
   21d00:	20003c2c 	.word	0x20003c2c

00021d04 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   21d04:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   21d06:	4806      	ldr	r0, [pc, #24]	; (21d20 <z_data_copy+0x1c>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21d08:	4a06      	ldr	r2, [pc, #24]	; (21d24 <z_data_copy+0x20>)
   21d0a:	1a12      	subs	r2, r2, r0
   21d0c:	4906      	ldr	r1, [pc, #24]	; (21d28 <z_data_copy+0x24>)
   21d0e:	f006 fbc6 	bl	2849e <memcpy>
   21d12:	4a06      	ldr	r2, [pc, #24]	; (21d2c <z_data_copy+0x28>)
   21d14:	4906      	ldr	r1, [pc, #24]	; (21d30 <z_data_copy+0x2c>)
   21d16:	4807      	ldr	r0, [pc, #28]	; (21d34 <z_data_copy+0x30>)
   21d18:	f006 fbc1 	bl	2849e <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   21d1c:	bd08      	pop	{r3, pc}
   21d1e:	bf00      	nop
   21d20:	20000000 	.word	0x20000000
   21d24:	200009d0 	.word	0x200009d0
   21d28:	0002af4c 	.word	0x0002af4c
   21d2c:	00000000 	.word	0x00000000
   21d30:	0002af4c 	.word	0x0002af4c
   21d34:	20000000 	.word	0x20000000

00021d38 <first>:
	return list->head == list;
   21d38:	4b03      	ldr	r3, [pc, #12]	; (21d48 <first+0x10>)
   21d3a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21d3c:	4298      	cmp	r0, r3
   21d3e:	d000      	beq.n	21d42 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   21d40:	4770      	bx	lr
   21d42:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   21d44:	e7fc      	b.n	21d40 <first+0x8>
   21d46:	bf00      	nop
   21d48:	20000784 	.word	0x20000784

00021d4c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   21d4c:	b130      	cbz	r0, 21d5c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   21d4e:	4a04      	ldr	r2, [pc, #16]	; (21d60 <next+0x14>)
   21d50:	6852      	ldr	r2, [r2, #4]
   21d52:	4290      	cmp	r0, r2
   21d54:	d001      	beq.n	21d5a <next+0xe>
   21d56:	6800      	ldr	r0, [r0, #0]
   21d58:	4770      	bx	lr
   21d5a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   21d5c:	4770      	bx	lr
   21d5e:	bf00      	nop
   21d60:	20000784 	.word	0x20000784

00021d64 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   21d64:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21d66:	4b04      	ldr	r3, [pc, #16]	; (21d78 <elapsed+0x14>)
   21d68:	681b      	ldr	r3, [r3, #0]
   21d6a:	b10b      	cbz	r3, 21d70 <elapsed+0xc>
   21d6c:	2000      	movs	r0, #0
}
   21d6e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   21d70:	f7fd f860 	bl	1ee34 <sys_clock_elapsed>
   21d74:	e7fb      	b.n	21d6e <elapsed+0xa>
   21d76:	bf00      	nop
   21d78:	20003c6c 	.word	0x20003c6c

00021d7c <next_timeout>:

static int32_t next_timeout(void)
{
   21d7c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   21d7e:	f7ff ffdb 	bl	21d38 <first>
   21d82:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   21d84:	f7ff ffee 	bl	21d64 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   21d88:	b18c      	cbz	r4, 21dae <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   21d8a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   21d8e:	1a12      	subs	r2, r2, r0
   21d90:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   21d94:	2a01      	cmp	r2, #1
   21d96:	f173 0100 	sbcs.w	r1, r3, #0
   21d9a:	db11      	blt.n	21dc0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   21d9c:	4610      	mov	r0, r2
   21d9e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   21da2:	f173 0300 	sbcs.w	r3, r3, #0
   21da6:	db04      	blt.n	21db2 <next_timeout+0x36>
   21da8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   21dac:	e001      	b.n	21db2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   21dae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   21db2:	4b04      	ldr	r3, [pc, #16]	; (21dc4 <next_timeout+0x48>)
   21db4:	691b      	ldr	r3, [r3, #16]
   21db6:	b113      	cbz	r3, 21dbe <next_timeout+0x42>
   21db8:	4283      	cmp	r3, r0
   21dba:	da00      	bge.n	21dbe <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   21dbc:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   21dbe:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   21dc0:	2000      	movs	r0, #0
   21dc2:	e7f6      	b.n	21db2 <next_timeout+0x36>
   21dc4:	20003c2c 	.word	0x20003c2c

00021dc8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   21dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21dcc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21dce:	f1b3 3fff 	cmp.w	r3, #4294967295
   21dd2:	bf08      	it	eq
   21dd4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   21dd8:	f000 8096 	beq.w	21f08 <z_add_timeout+0x140>
   21ddc:	4682      	mov	sl, r0
   21dde:	4614      	mov	r4, r2
   21de0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   21de2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   21de4:	2300      	movs	r3, #0
	__asm__ volatile(
   21de6:	f04f 0240 	mov.w	r2, #64	; 0x40
   21dea:	f3ef 8b11 	mrs	fp, BASEPRI
   21dee:	f382 8812 	msr	BASEPRI_MAX, r2
   21df2:	f3bf 8f6f 	isb	sy
   21df6:	e02e      	b.n	21e56 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   21df8:	2201      	movs	r2, #1
   21dfa:	2300      	movs	r3, #0
   21dfc:	e04b      	b.n	21e96 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   21dfe:	f7ff ffb1 	bl	21d64 <elapsed>
   21e02:	1822      	adds	r2, r4, r0
   21e04:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   21e08:	3201      	adds	r2, #1
   21e0a:	f143 0300 	adc.w	r3, r3, #0
   21e0e:	f8ca 2010 	str.w	r2, [sl, #16]
   21e12:	f8ca 3014 	str.w	r3, [sl, #20]
   21e16:	e042      	b.n	21e9e <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   21e18:	9b00      	ldr	r3, [sp, #0]
   21e1a:	1ac2      	subs	r2, r0, r3
   21e1c:	9b01      	ldr	r3, [sp, #4]
   21e1e:	eb61 0303 	sbc.w	r3, r1, r3
   21e22:	f8cc 2010 	str.w	r2, [ip, #16]
   21e26:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   21e2a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   21e2e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   21e32:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   21e36:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   21e3a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   21e3e:	f1bc 0f00 	cmp.w	ip, #0
   21e42:	d049      	beq.n	21ed8 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   21e44:	f7ff ff78 	bl	21d38 <first>
   21e48:	4582      	cmp	sl, r0
   21e4a:	d050      	beq.n	21eee <z_add_timeout+0x126>
	__asm__ volatile(
   21e4c:	f38b 8811 	msr	BASEPRI, fp
   21e50:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   21e54:	2301      	movs	r3, #1
   21e56:	2b00      	cmp	r3, #0
   21e58:	d156      	bne.n	21f08 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   21e5a:	f06f 0301 	mvn.w	r3, #1
   21e5e:	ebb3 0804 	subs.w	r8, r3, r4
   21e62:	f04f 30ff 	mov.w	r0, #4294967295
   21e66:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   21e6a:	f1b8 0f00 	cmp.w	r8, #0
   21e6e:	f179 0300 	sbcs.w	r3, r9, #0
   21e72:	dbc4      	blt.n	21dfe <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   21e74:	4a26      	ldr	r2, [pc, #152]	; (21f10 <z_add_timeout+0x148>)
   21e76:	6813      	ldr	r3, [r2, #0]
   21e78:	6852      	ldr	r2, [r2, #4]
   21e7a:	18e3      	adds	r3, r4, r3
   21e7c:	eb45 0202 	adc.w	r2, r5, r2
   21e80:	f06f 0101 	mvn.w	r1, #1
   21e84:	1ace      	subs	r6, r1, r3
   21e86:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   21e8a:	4632      	mov	r2, r6
   21e8c:	463b      	mov	r3, r7
   21e8e:	2e01      	cmp	r6, #1
   21e90:	f177 0100 	sbcs.w	r1, r7, #0
   21e94:	dbb0      	blt.n	21df8 <z_add_timeout+0x30>
   21e96:	f8ca 2010 	str.w	r2, [sl, #16]
   21e9a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   21e9e:	f7ff ff4b 	bl	21d38 <first>
   21ea2:	4684      	mov	ip, r0
   21ea4:	f1bc 0f00 	cmp.w	ip, #0
   21ea8:	d0c9      	beq.n	21e3e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   21eaa:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   21eae:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   21eb2:	e9cd 2300 	strd	r2, r3, [sp]
   21eb6:	4282      	cmp	r2, r0
   21eb8:	418b      	sbcs	r3, r1
   21eba:	dbad      	blt.n	21e18 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   21ebc:	9b00      	ldr	r3, [sp, #0]
   21ebe:	1a1a      	subs	r2, r3, r0
   21ec0:	9b01      	ldr	r3, [sp, #4]
   21ec2:	eb63 0301 	sbc.w	r3, r3, r1
   21ec6:	f8ca 2010 	str.w	r2, [sl, #16]
   21eca:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   21ece:	4660      	mov	r0, ip
   21ed0:	f7ff ff3c 	bl	21d4c <next>
   21ed4:	4684      	mov	ip, r0
   21ed6:	e7e5      	b.n	21ea4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   21ed8:	4b0e      	ldr	r3, [pc, #56]	; (21f14 <z_add_timeout+0x14c>)
   21eda:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   21edc:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   21ee0:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   21ee4:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   21ee8:	f8c3 a004 	str.w	sl, [r3, #4]
}
   21eec:	e7aa      	b.n	21e44 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   21eee:	f7ff ff45 	bl	21d7c <next_timeout>

			if (next_time == 0 ||
   21ef2:	4603      	mov	r3, r0
   21ef4:	b118      	cbz	r0, 21efe <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   21ef6:	4a08      	ldr	r2, [pc, #32]	; (21f18 <z_add_timeout+0x150>)
   21ef8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   21efa:	4282      	cmp	r2, r0
   21efc:	d0a6      	beq.n	21e4c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   21efe:	2100      	movs	r1, #0
   21f00:	4618      	mov	r0, r3
   21f02:	f7fc ff63 	bl	1edcc <sys_clock_set_timeout>
   21f06:	e7a1      	b.n	21e4c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   21f08:	b003      	add	sp, #12
   21f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f0e:	bf00      	nop
   21f10:	20001fe8 	.word	0x20001fe8
   21f14:	20000784 	.word	0x20000784
   21f18:	20003c2c 	.word	0x20003c2c

00021f1c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   21f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21f1e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   21f20:	f7ff fbe4 	bl	216ec <z_time_slice>
	__asm__ volatile(
   21f24:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f28:	f3ef 8511 	mrs	r5, BASEPRI
   21f2c:	f383 8812 	msr	BASEPRI_MAX, r3
   21f30:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   21f34:	4b28      	ldr	r3, [pc, #160]	; (21fd8 <sys_clock_announce+0xbc>)
   21f36:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   21f38:	f7ff fefe 	bl	21d38 <first>
   21f3c:	4604      	mov	r4, r0
   21f3e:	b350      	cbz	r0, 21f96 <sys_clock_announce+0x7a>
   21f40:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   21f44:	4b24      	ldr	r3, [pc, #144]	; (21fd8 <sys_clock_announce+0xbc>)
   21f46:	681b      	ldr	r3, [r3, #0]
   21f48:	17d9      	asrs	r1, r3, #31
   21f4a:	42b3      	cmp	r3, r6
   21f4c:	eb71 0207 	sbcs.w	r2, r1, r7
   21f50:	db21      	blt.n	21f96 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   21f52:	4a22      	ldr	r2, [pc, #136]	; (21fdc <sys_clock_announce+0xc0>)
   21f54:	e9d2 0100 	ldrd	r0, r1, [r2]
   21f58:	1980      	adds	r0, r0, r6
   21f5a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   21f5e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   21f62:	1b9b      	subs	r3, r3, r6
   21f64:	4a1c      	ldr	r2, [pc, #112]	; (21fd8 <sys_clock_announce+0xbc>)
   21f66:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   21f68:	2200      	movs	r2, #0
   21f6a:	2300      	movs	r3, #0
   21f6c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   21f70:	4620      	mov	r0, r4
   21f72:	f006 f91f 	bl	281b4 <remove_timeout>
	__asm__ volatile(
   21f76:	f385 8811 	msr	BASEPRI, r5
   21f7a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   21f7e:	68a3      	ldr	r3, [r4, #8]
   21f80:	4620      	mov	r0, r4
   21f82:	4798      	blx	r3
	__asm__ volatile(
   21f84:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f88:	f3ef 8511 	mrs	r5, BASEPRI
   21f8c:	f383 8812 	msr	BASEPRI_MAX, r3
   21f90:	f3bf 8f6f 	isb	sy
   21f94:	e7d0      	b.n	21f38 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   21f96:	b144      	cbz	r4, 21faa <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   21f98:	4b0f      	ldr	r3, [pc, #60]	; (21fd8 <sys_clock_announce+0xbc>)
   21f9a:	6819      	ldr	r1, [r3, #0]
   21f9c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   21fa0:	1a52      	subs	r2, r2, r1
   21fa2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   21fa6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   21faa:	480c      	ldr	r0, [pc, #48]	; (21fdc <sys_clock_announce+0xc0>)
   21fac:	490a      	ldr	r1, [pc, #40]	; (21fd8 <sys_clock_announce+0xbc>)
   21fae:	680c      	ldr	r4, [r1, #0]
   21fb0:	e9d0 2300 	ldrd	r2, r3, [r0]
   21fb4:	1912      	adds	r2, r2, r4
   21fb6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   21fba:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   21fbe:	2400      	movs	r4, #0
   21fc0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   21fc2:	f7ff fedb 	bl	21d7c <next_timeout>
   21fc6:	4621      	mov	r1, r4
   21fc8:	f7fc ff00 	bl	1edcc <sys_clock_set_timeout>
	__asm__ volatile(
   21fcc:	f385 8811 	msr	BASEPRI, r5
   21fd0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   21fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21fd6:	bf00      	nop
   21fd8:	20003c6c 	.word	0x20003c6c
   21fdc:	20001fe8 	.word	0x20001fe8

00021fe0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   21fe0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   21fe2:	2100      	movs	r1, #0
	__asm__ volatile(
   21fe4:	f04f 0340 	mov.w	r3, #64	; 0x40
   21fe8:	f3ef 8411 	mrs	r4, BASEPRI
   21fec:	f383 8812 	msr	BASEPRI_MAX, r3
   21ff0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   21ff4:	2200      	movs	r2, #0
   21ff6:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   21ff8:	b969      	cbnz	r1, 22016 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   21ffa:	f7fc ff1b 	bl	1ee34 <sys_clock_elapsed>
   21ffe:	4b07      	ldr	r3, [pc, #28]	; (2201c <sys_clock_tick_get+0x3c>)
   22000:	e9d3 2300 	ldrd	r2, r3, [r3]
   22004:	1812      	adds	r2, r2, r0
   22006:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   2200a:	f384 8811 	msr	BASEPRI, r4
   2200e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22012:	2101      	movs	r1, #1
   22014:	e7f0      	b.n	21ff8 <sys_clock_tick_get+0x18>
	}
	return t;
}
   22016:	4610      	mov	r0, r2
   22018:	4619      	mov	r1, r3
   2201a:	bd10      	pop	{r4, pc}
   2201c:	20001fe8 	.word	0x20001fe8

00022020 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22024:	b08d      	sub	sp, #52	; 0x34
   22026:	4605      	mov	r5, r0
   22028:	9107      	str	r1, [sp, #28]
   2202a:	9202      	str	r2, [sp, #8]
   2202c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2202e:	4ba4      	ldr	r3, [pc, #656]	; (222c0 <z_impl_k_poll+0x2a0>)
   22030:	f8d3 9008 	ldr.w	r9, [r3, #8]
   22034:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   22038:	2301      	movs	r3, #1
   2203a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   2203e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22042:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   22046:	4613      	mov	r3, r2
   22048:	430b      	orrs	r3, r1
   2204a:	bf0c      	ite	eq
   2204c:	2301      	moveq	r3, #1
   2204e:	2300      	movne	r3, #0
   22050:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   22052:	2600      	movs	r6, #0
	int events_registered = 0;
   22054:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   22056:	e02e      	b.n	220b6 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   22058:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   2205a:	689b      	ldr	r3, [r3, #8]
   2205c:	b1c3      	cbz	r3, 22090 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2205e:	2302      	movs	r3, #2
   22060:	9305      	str	r3, [sp, #20]
			return true;
   22062:	2301      	movs	r3, #1
   22064:	e014      	b.n	22090 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   22066:	6923      	ldr	r3, [r4, #16]
	return list->head;
   22068:	681b      	ldr	r3, [r3, #0]
   2206a:	b18b      	cbz	r3, 22090 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2206c:	2304      	movs	r3, #4
   2206e:	9305      	str	r3, [sp, #20]
			return true;
   22070:	2301      	movs	r3, #1
   22072:	e00d      	b.n	22090 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   22074:	6923      	ldr	r3, [r4, #16]
   22076:	689b      	ldr	r3, [r3, #8]
   22078:	b153      	cbz	r3, 22090 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   2207a:	2301      	movs	r3, #1
   2207c:	9305      	str	r3, [sp, #20]
   2207e:	e007      	b.n	22090 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   22080:	6923      	ldr	r3, [r4, #16]
   22082:	6a1b      	ldr	r3, [r3, #32]
   22084:	b123      	cbz	r3, 22090 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   22086:	2310      	movs	r3, #16
   22088:	9305      	str	r3, [sp, #20]
			return true;
   2208a:	2301      	movs	r3, #1
   2208c:	e000      	b.n	22090 <z_impl_k_poll+0x70>
	switch (event->type) {
   2208e:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   22090:	2b00      	cmp	r3, #0
   22092:	d03d      	beq.n	22110 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   22094:	2100      	movs	r1, #0
   22096:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   22098:	68e3      	ldr	r3, [r4, #12]
   2209a:	f3c3 3245 	ubfx	r2, r3, #13, #6
   2209e:	9805      	ldr	r0, [sp, #20]
   220a0:	4302      	orrs	r2, r0
   220a2:	f362 3352 	bfi	r3, r2, #13, #6
   220a6:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   220a8:	7039      	strb	r1, [r7, #0]
   220aa:	9b08      	ldr	r3, [sp, #32]
   220ac:	f383 8811 	msr	BASEPRI, r3
   220b0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   220b4:	3601      	adds	r6, #1
   220b6:	9b07      	ldr	r3, [sp, #28]
   220b8:	42b3      	cmp	r3, r6
   220ba:	f340 81bf 	ble.w	2243c <z_impl_k_poll+0x41c>
	__asm__ volatile(
   220be:	f04f 0340 	mov.w	r3, #64	; 0x40
   220c2:	f3ef 8211 	mrs	r2, BASEPRI
   220c6:	f383 8812 	msr	BASEPRI_MAX, r3
   220ca:	f3bf 8f6f 	isb	sy
   220ce:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   220d0:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   220d4:	00a3      	lsls	r3, r4, #2
   220d6:	9309      	str	r3, [sp, #36]	; 0x24
   220d8:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   220dc:	7b63      	ldrb	r3, [r4, #13]
   220de:	f003 031f 	and.w	r3, r3, #31
   220e2:	3b01      	subs	r3, #1
   220e4:	2b07      	cmp	r3, #7
   220e6:	d8d2      	bhi.n	2208e <z_impl_k_poll+0x6e>
   220e8:	a201      	add	r2, pc, #4	; (adr r2, 220f0 <z_impl_k_poll+0xd0>)
   220ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   220ee:	bf00      	nop
   220f0:	00022075 	.word	0x00022075
   220f4:	00022059 	.word	0x00022059
   220f8:	0002208f 	.word	0x0002208f
   220fc:	00022067 	.word	0x00022067
   22100:	0002208f 	.word	0x0002208f
   22104:	0002208f 	.word	0x0002208f
   22108:	0002208f 	.word	0x0002208f
   2210c:	00022081 	.word	0x00022081
		} else if (!just_check && poller->is_polling) {
   22110:	9b06      	ldr	r3, [sp, #24]
   22112:	2b00      	cmp	r3, #0
   22114:	d1c9      	bne.n	220aa <z_impl_k_poll+0x8a>
   22116:	783b      	ldrb	r3, [r7, #0]
   22118:	2b00      	cmp	r3, #0
   2211a:	d0c6      	beq.n	220aa <z_impl_k_poll+0x8a>
	switch (event->type) {
   2211c:	7b63      	ldrb	r3, [r4, #13]
   2211e:	f003 031f 	and.w	r3, r3, #31
   22122:	3b01      	subs	r3, #1
   22124:	2b07      	cmp	r3, #7
   22126:	d846      	bhi.n	221b6 <z_impl_k_poll+0x196>
   22128:	e8df f013 	tbh	[pc, r3, lsl #1]
   2212c:	000800cc 	.word	0x000800cc
   22130:	006a0045 	.word	0x006a0045
   22134:	00450045 	.word	0x00450045
   22138:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   2213c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22140:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   22144:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22148:	4598      	cmp	r8, r3
   2214a:	d02b      	beq.n	221a4 <z_impl_k_poll+0x184>
   2214c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   22150:	b343      	cbz	r3, 221a4 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22152:	6898      	ldr	r0, [r3, #8]
   22154:	f006 f8de 	bl	28314 <poller_thread>
   22158:	900b      	str	r0, [sp, #44]	; 0x2c
   2215a:	4638      	mov	r0, r7
   2215c:	f006 f8da 	bl	28314 <poller_thread>
   22160:	4601      	mov	r1, r0
   22162:	900a      	str	r0, [sp, #40]	; 0x28
   22164:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22166:	f005 fec2 	bl	27eee <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2216a:	2800      	cmp	r0, #0
   2216c:	dc1a      	bgt.n	221a4 <z_impl_k_poll+0x184>
	return list->head == list;
   2216e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22172:	45d0      	cmp	r8, sl
   22174:	d02f      	beq.n	221d6 <z_impl_k_poll+0x1b6>
   22176:	4653      	mov	r3, sl
   22178:	46a2      	mov	sl, r4
   2217a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2217c:	b38c      	cbz	r4, 221e2 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   2217e:	68a0      	ldr	r0, [r4, #8]
   22180:	f006 f8c8 	bl	28314 <poller_thread>
   22184:	4601      	mov	r1, r0
   22186:	980a      	ldr	r0, [sp, #40]	; 0x28
   22188:	f005 feb1 	bl	27eee <z_sched_prio_cmp>
   2218c:	2800      	cmp	r0, #0
   2218e:	dc16      	bgt.n	221be <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22190:	b34c      	cbz	r4, 221e6 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   22192:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22196:	429c      	cmp	r4, r3
   22198:	d030      	beq.n	221fc <z_impl_k_poll+0x1dc>
   2219a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2219c:	2c00      	cmp	r4, #0
   2219e:	d1ed      	bne.n	2217c <z_impl_k_poll+0x15c>
   221a0:	4654      	mov	r4, sl
   221a2:	e021      	b.n	221e8 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   221a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   221a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   221aa:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   221ae:	6063      	str	r3, [r4, #4]
	tail->next = node;
   221b0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   221b2:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   221b6:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   221b8:	f10b 0b01 	add.w	fp, fp, #1
   221bc:	e775      	b.n	220aa <z_impl_k_poll+0x8a>
   221be:	4623      	mov	r3, r4
   221c0:	4654      	mov	r4, sl
   221c2:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   221c4:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   221c6:	6063      	str	r3, [r4, #4]
	node->next = successor;
   221c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   221ca:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   221ce:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   221d0:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   221d4:	e7ef      	b.n	221b6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   221d6:	f04f 0a00 	mov.w	sl, #0
   221da:	4653      	mov	r3, sl
   221dc:	46a2      	mov	sl, r4
   221de:	461c      	mov	r4, r3
   221e0:	e7cc      	b.n	2217c <z_impl_k_poll+0x15c>
   221e2:	4654      	mov	r4, sl
   221e4:	e000      	b.n	221e8 <z_impl_k_poll+0x1c8>
   221e6:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   221e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   221ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   221ee:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   221f2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   221f4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   221f6:	f8c8 4004 	str.w	r4, [r8, #4]
}
   221fa:	e7dc      	b.n	221b6 <z_impl_k_poll+0x196>
   221fc:	4654      	mov	r4, sl
   221fe:	e7f3      	b.n	221e8 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   22200:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22204:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   22208:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2220c:	4598      	cmp	r8, r3
   2220e:	d02b      	beq.n	22268 <z_impl_k_poll+0x248>
   22210:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   22214:	b343      	cbz	r3, 22268 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22216:	6898      	ldr	r0, [r3, #8]
   22218:	f006 f87c 	bl	28314 <poller_thread>
   2221c:	900b      	str	r0, [sp, #44]	; 0x2c
   2221e:	4638      	mov	r0, r7
   22220:	f006 f878 	bl	28314 <poller_thread>
   22224:	4601      	mov	r1, r0
   22226:	900a      	str	r0, [sp, #40]	; 0x28
   22228:	980b      	ldr	r0, [sp, #44]	; 0x2c
   2222a:	f005 fe60 	bl	27eee <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2222e:	2800      	cmp	r0, #0
   22230:	dc1a      	bgt.n	22268 <z_impl_k_poll+0x248>
	return list->head == list;
   22232:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22236:	45d0      	cmp	r8, sl
   22238:	d02c      	beq.n	22294 <z_impl_k_poll+0x274>
   2223a:	4653      	mov	r3, sl
   2223c:	46a2      	mov	sl, r4
   2223e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22240:	b374      	cbz	r4, 222a0 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   22242:	68a0      	ldr	r0, [r4, #8]
   22244:	f006 f866 	bl	28314 <poller_thread>
   22248:	4601      	mov	r1, r0
   2224a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2224c:	f005 fe4f 	bl	27eee <z_sched_prio_cmp>
   22250:	2800      	cmp	r0, #0
   22252:	dc13      	bgt.n	2227c <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22254:	b334      	cbz	r4, 222a4 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   22256:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2225a:	429c      	cmp	r4, r3
   2225c:	d02d      	beq.n	222ba <z_impl_k_poll+0x29a>
   2225e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22260:	2c00      	cmp	r4, #0
   22262:	d1ed      	bne.n	22240 <z_impl_k_poll+0x220>
   22264:	4654      	mov	r4, sl
   22266:	e01e      	b.n	222a6 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   22268:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2226c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2226e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22272:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22274:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22276:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   2227a:	e79c      	b.n	221b6 <z_impl_k_poll+0x196>
   2227c:	4623      	mov	r3, r4
   2227e:	4654      	mov	r4, sl
   22280:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22282:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   22284:	6063      	str	r3, [r4, #4]
	node->next = successor;
   22286:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22288:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2228c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2228e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22292:	e790      	b.n	221b6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22294:	f04f 0a00 	mov.w	sl, #0
   22298:	4653      	mov	r3, sl
   2229a:	46a2      	mov	sl, r4
   2229c:	461c      	mov	r4, r3
   2229e:	e7cf      	b.n	22240 <z_impl_k_poll+0x220>
   222a0:	4654      	mov	r4, sl
   222a2:	e000      	b.n	222a6 <z_impl_k_poll+0x286>
   222a4:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   222a6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   222aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   222ac:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   222b0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   222b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   222b4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   222b8:	e77d      	b.n	221b6 <z_impl_k_poll+0x196>
   222ba:	4654      	mov	r4, sl
   222bc:	e7f3      	b.n	222a6 <z_impl_k_poll+0x286>
   222be:	bf00      	nop
   222c0:	20003c2c 	.word	0x20003c2c
		add_event(&event->signal->poll_events, event, poller);
   222c4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   222c8:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   222cc:	4598      	cmp	r8, r3
   222ce:	d02b      	beq.n	22328 <z_impl_k_poll+0x308>
   222d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   222d4:	b343      	cbz	r3, 22328 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   222d6:	6898      	ldr	r0, [r3, #8]
   222d8:	f006 f81c 	bl	28314 <poller_thread>
   222dc:	4682      	mov	sl, r0
   222de:	4638      	mov	r0, r7
   222e0:	f006 f818 	bl	28314 <poller_thread>
   222e4:	4601      	mov	r1, r0
   222e6:	900a      	str	r0, [sp, #40]	; 0x28
   222e8:	4650      	mov	r0, sl
   222ea:	f005 fe00 	bl	27eee <z_sched_prio_cmp>
	if ((pending == NULL) ||
   222ee:	2800      	cmp	r0, #0
   222f0:	dc1a      	bgt.n	22328 <z_impl_k_poll+0x308>
	return list->head == list;
   222f2:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222f6:	45d0      	cmp	r8, sl
   222f8:	d02c      	beq.n	22354 <z_impl_k_poll+0x334>
   222fa:	4653      	mov	r3, sl
   222fc:	46a2      	mov	sl, r4
   222fe:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22300:	b374      	cbz	r4, 22360 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   22302:	68a0      	ldr	r0, [r4, #8]
   22304:	f006 f806 	bl	28314 <poller_thread>
   22308:	4601      	mov	r1, r0
   2230a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2230c:	f005 fdef 	bl	27eee <z_sched_prio_cmp>
   22310:	2800      	cmp	r0, #0
   22312:	dc13      	bgt.n	2233c <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22314:	b334      	cbz	r4, 22364 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   22316:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2231a:	429c      	cmp	r4, r3
   2231c:	d02d      	beq.n	2237a <z_impl_k_poll+0x35a>
   2231e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22320:	2c00      	cmp	r4, #0
   22322:	d1ed      	bne.n	22300 <z_impl_k_poll+0x2e0>
   22324:	4654      	mov	r4, sl
   22326:	e01e      	b.n	22366 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   22328:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2232c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2232e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22332:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22334:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22336:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   2233a:	e73c      	b.n	221b6 <z_impl_k_poll+0x196>
   2233c:	4623      	mov	r3, r4
   2233e:	4654      	mov	r4, sl
   22340:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22342:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   22344:	6063      	str	r3, [r4, #4]
	node->next = successor;
   22346:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22348:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2234c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2234e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22352:	e730      	b.n	221b6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22354:	f04f 0a00 	mov.w	sl, #0
   22358:	4653      	mov	r3, sl
   2235a:	46a2      	mov	sl, r4
   2235c:	461c      	mov	r4, r3
   2235e:	e7cf      	b.n	22300 <z_impl_k_poll+0x2e0>
   22360:	4654      	mov	r4, sl
   22362:	e000      	b.n	22366 <z_impl_k_poll+0x346>
   22364:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   22366:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2236a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2236c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22370:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22372:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22374:	f8c8 4004 	str.w	r4, [r8, #4]
}
   22378:	e71d      	b.n	221b6 <z_impl_k_poll+0x196>
   2237a:	4654      	mov	r4, sl
   2237c:	e7f3      	b.n	22366 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   2237e:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22382:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   22386:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2238a:	4598      	cmp	r8, r3
   2238c:	d02b      	beq.n	223e6 <z_impl_k_poll+0x3c6>
   2238e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   22392:	b343      	cbz	r3, 223e6 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22394:	6898      	ldr	r0, [r3, #8]
   22396:	f005 ffbd 	bl	28314 <poller_thread>
   2239a:	900b      	str	r0, [sp, #44]	; 0x2c
   2239c:	4638      	mov	r0, r7
   2239e:	f005 ffb9 	bl	28314 <poller_thread>
   223a2:	4601      	mov	r1, r0
   223a4:	900a      	str	r0, [sp, #40]	; 0x28
   223a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   223a8:	f005 fda1 	bl	27eee <z_sched_prio_cmp>
	if ((pending == NULL) ||
   223ac:	2800      	cmp	r0, #0
   223ae:	dc1a      	bgt.n	223e6 <z_impl_k_poll+0x3c6>
	return list->head == list;
   223b0:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   223b4:	45d0      	cmp	r8, sl
   223b6:	d02c      	beq.n	22412 <z_impl_k_poll+0x3f2>
   223b8:	4653      	mov	r3, sl
   223ba:	46a2      	mov	sl, r4
   223bc:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   223be:	b374      	cbz	r4, 2241e <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   223c0:	68a0      	ldr	r0, [r4, #8]
   223c2:	f005 ffa7 	bl	28314 <poller_thread>
   223c6:	4601      	mov	r1, r0
   223c8:	980a      	ldr	r0, [sp, #40]	; 0x28
   223ca:	f005 fd90 	bl	27eee <z_sched_prio_cmp>
   223ce:	2800      	cmp	r0, #0
   223d0:	dc13      	bgt.n	223fa <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   223d2:	b334      	cbz	r4, 22422 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   223d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   223d8:	429c      	cmp	r4, r3
   223da:	d02d      	beq.n	22438 <z_impl_k_poll+0x418>
   223dc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   223de:	2c00      	cmp	r4, #0
   223e0:	d1ed      	bne.n	223be <z_impl_k_poll+0x39e>
   223e2:	4654      	mov	r4, sl
   223e4:	e01e      	b.n	22424 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   223e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   223ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
   223ec:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   223f0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   223f2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   223f4:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   223f8:	e6dd      	b.n	221b6 <z_impl_k_poll+0x196>
   223fa:	4623      	mov	r3, r4
   223fc:	4654      	mov	r4, sl
   223fe:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22400:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   22402:	6063      	str	r3, [r4, #4]
	node->next = successor;
   22404:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22406:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2240a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2240c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22410:	e6d1      	b.n	221b6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22412:	f04f 0a00 	mov.w	sl, #0
   22416:	4653      	mov	r3, sl
   22418:	46a2      	mov	sl, r4
   2241a:	461c      	mov	r4, r3
   2241c:	e7cf      	b.n	223be <z_impl_k_poll+0x39e>
   2241e:	4654      	mov	r4, sl
   22420:	e000      	b.n	22424 <z_impl_k_poll+0x404>
   22422:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   22424:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22428:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2242a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2242e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22430:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22432:	f8c8 4004 	str.w	r4, [r8, #4]
}
   22436:	e6be      	b.n	221b6 <z_impl_k_poll+0x196>
   22438:	4654      	mov	r4, sl
   2243a:	e7f3      	b.n	22424 <z_impl_k_poll+0x404>
   2243c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22440:	f3ef 8111 	mrs	r1, BASEPRI
   22444:	f383 8812 	msr	BASEPRI_MAX, r3
   22448:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2244c:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   22450:	b1cb      	cbz	r3, 22486 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   22452:	2300      	movs	r3, #0
   22454:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22458:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2245c:	4323      	orrs	r3, r4
   2245e:	d045      	beq.n	224ec <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   22460:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   22464:	e9cd 3400 	strd	r3, r4, [sp]
   22468:	4a3c      	ldr	r2, [pc, #240]	; (2255c <z_impl_k_poll+0x53c>)
   2246a:	483d      	ldr	r0, [pc, #244]	; (22560 <z_impl_k_poll+0x540>)
   2246c:	f7ff fa04 	bl	21878 <z_pend_curr>
   22470:	f04f 0340 	mov.w	r3, #64	; 0x40
   22474:	f3ef 8c11 	mrs	ip, BASEPRI
   22478:	f383 8812 	msr	BASEPRI_MAX, r3
   2247c:	f3bf 8f6f 	isb	sy
   22480:	4661      	mov	r1, ip
	while (num_events--) {
   22482:	465b      	mov	r3, fp
   22484:	e04e      	b.n	22524 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   22486:	4608      	mov	r0, r1
	while (num_events--) {
   22488:	465b      	mov	r3, fp
   2248a:	e014      	b.n	224b6 <z_impl_k_poll+0x496>
	return node->next != NULL;
   2248c:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2248e:	b12a      	cbz	r2, 2249c <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   22490:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   22492:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   22494:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   22496:	2200      	movs	r2, #0
   22498:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   2249a:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   2249c:	f380 8811 	msr	BASEPRI, r0
   224a0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   224a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   224a8:	f3ef 8011 	mrs	r0, BASEPRI
   224ac:	f383 8812 	msr	BASEPRI_MAX, r3
   224b0:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   224b4:	463b      	mov	r3, r7
   224b6:	1e5f      	subs	r7, r3, #1
   224b8:	b193      	cbz	r3, 224e0 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   224ba:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   224be:	009e      	lsls	r6, r3, #2
   224c0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   224c4:	2200      	movs	r2, #0
   224c6:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   224c8:	7b5a      	ldrb	r2, [r3, #13]
   224ca:	f002 021f 	and.w	r2, r2, #31
   224ce:	2a08      	cmp	r2, #8
   224d0:	d8e4      	bhi.n	2249c <z_impl_k_poll+0x47c>
   224d2:	2401      	movs	r4, #1
   224d4:	fa04 f202 	lsl.w	r2, r4, r2
   224d8:	f412 7f8b 	tst.w	r2, #278	; 0x116
   224dc:	d0de      	beq.n	2249c <z_impl_k_poll+0x47c>
   224de:	e7d5      	b.n	2248c <z_impl_k_poll+0x46c>
	__asm__ volatile(
   224e0:	f381 8811 	msr	BASEPRI, r1
   224e4:	f3bf 8f6f 	isb	sy
		return 0;
   224e8:	4618      	mov	r0, r3
   224ea:	e034      	b.n	22556 <z_impl_k_poll+0x536>
   224ec:	f381 8811 	msr	BASEPRI, r1
   224f0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   224f4:	f06f 000a 	mvn.w	r0, #10
   224f8:	e02d      	b.n	22556 <z_impl_k_poll+0x536>
	return node->next != NULL;
   224fa:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   224fc:	b12a      	cbz	r2, 2250a <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   224fe:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   22500:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   22502:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   22504:	2200      	movs	r2, #0
   22506:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   22508:	605a      	str	r2, [r3, #4]
   2250a:	f381 8811 	msr	BASEPRI, r1
   2250e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   22512:	f04f 0340 	mov.w	r3, #64	; 0x40
   22516:	f3ef 8111 	mrs	r1, BASEPRI
   2251a:	f383 8812 	msr	BASEPRI_MAX, r3
   2251e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   22522:	4623      	mov	r3, r4
   22524:	1e5c      	subs	r4, r3, #1
   22526:	b193      	cbz	r3, 2254e <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   22528:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2252c:	009f      	lsls	r7, r3, #2
   2252e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   22532:	2200      	movs	r2, #0
   22534:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   22536:	7b5a      	ldrb	r2, [r3, #13]
   22538:	f002 021f 	and.w	r2, r2, #31
   2253c:	2a08      	cmp	r2, #8
   2253e:	d8e4      	bhi.n	2250a <z_impl_k_poll+0x4ea>
   22540:	2601      	movs	r6, #1
   22542:	fa06 f202 	lsl.w	r2, r6, r2
   22546:	f412 7f8b 	tst.w	r2, #278	; 0x116
   2254a:	d0de      	beq.n	2250a <z_impl_k_poll+0x4ea>
   2254c:	e7d5      	b.n	224fa <z_impl_k_poll+0x4da>
	__asm__ volatile(
   2254e:	f38c 8811 	msr	BASEPRI, ip
   22552:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   22556:	b00d      	add	sp, #52	; 0x34
   22558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2255c:	2000078c 	.word	0x2000078c
   22560:	20003c70 	.word	0x20003c70

00022564 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   22564:	b538      	push	{r3, r4, r5, lr}
   22566:	4603      	mov	r3, r0
	__asm__ volatile(
   22568:	f04f 0240 	mov.w	r2, #64	; 0x40
   2256c:	f3ef 8511 	mrs	r5, BASEPRI
   22570:	f382 8812 	msr	BASEPRI_MAX, r2
   22574:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   22578:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   2257a:	2201      	movs	r2, #1
   2257c:	6082      	str	r2, [r0, #8]
	return list->head == list;
   2257e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   22580:	4283      	cmp	r3, r0
   22582:	d011      	beq.n	225a8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   22584:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   22586:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   22588:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2258a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2258c:	2300      	movs	r3, #0
   2258e:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   22590:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   22592:	b148      	cbz	r0, 225a8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   22594:	2101      	movs	r1, #1
   22596:	f005 ff0d 	bl	283b4 <signal_poll_event>
   2259a:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2259c:	4629      	mov	r1, r5
   2259e:	4805      	ldr	r0, [pc, #20]	; (225b4 <z_impl_k_poll_signal_raise+0x50>)
   225a0:	f7ff f806 	bl	215b0 <z_reschedule>
	return rc;
}
   225a4:	4620      	mov	r0, r4
   225a6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   225a8:	f385 8811 	msr	BASEPRI, r5
   225ac:	f3bf 8f6f 	isb	sy
		return 0;
   225b0:	2400      	movs	r4, #0
   225b2:	e7f7      	b.n	225a4 <z_impl_k_poll_signal_raise+0x40>
   225b4:	20003c70 	.word	0x20003c70

000225b8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   225b8:	b538      	push	{r3, r4, r5, lr}
   225ba:	4604      	mov	r4, r0
   225bc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   225be:	f005 fa26 	bl	27a0e <k_is_in_isr>
   225c2:	b948      	cbnz	r0, 225d8 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   225c4:	4b05      	ldr	r3, [pc, #20]	; (225dc <z_thread_aligned_alloc+0x24>)
   225c6:	689b      	ldr	r3, [r3, #8]
   225c8:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   225cc:	b118      	cbz	r0, 225d6 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   225ce:	462a      	mov	r2, r5
   225d0:	4621      	mov	r1, r4
   225d2:	f005 ff38 	bl	28446 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   225d6:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   225d8:	2000      	movs	r0, #0
	return ret;
   225da:	e7fc      	b.n	225d6 <z_thread_aligned_alloc+0x1e>
   225dc:	20003c2c 	.word	0x20003c2c

000225e0 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   225e0:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   225e2:	4a03      	ldr	r2, [pc, #12]	; (225f0 <boot_banner+0x10>)
   225e4:	4903      	ldr	r1, [pc, #12]	; (225f4 <boot_banner+0x14>)
   225e6:	4804      	ldr	r0, [pc, #16]	; (225f8 <boot_banner+0x18>)
   225e8:	f001 f876 	bl	236d8 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   225ec:	bd08      	pop	{r3, pc}
   225ee:	bf00      	nop
   225f0:	0002995c 	.word	0x0002995c
   225f4:	0002ae08 	.word	0x0002ae08
   225f8:	0002ae18 	.word	0x0002ae18

000225fc <fabs>:
   225fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   22600:	4770      	bx	lr
   22602:	bf00      	nop

00022604 <round>:
   22604:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   22608:	f3c1 570a 	ubfx	r7, r1, #20, #11
   2260c:	f2a7 34ff 	subw	r4, r7, #1023	; 0x3ff
   22610:	2c13      	cmp	r4, #19
   22612:	460b      	mov	r3, r1
   22614:	460d      	mov	r5, r1
   22616:	4602      	mov	r2, r0
   22618:	dc0f      	bgt.n	2263a <round+0x36>
   2261a:	2c00      	cmp	r4, #0
   2261c:	db2a      	blt.n	22674 <round+0x70>
   2261e:	491d      	ldr	r1, [pc, #116]	; (22694 <round+0x90>)
   22620:	4121      	asrs	r1, r4
   22622:	ea03 0001 	and.w	r0, r3, r1
   22626:	4310      	orrs	r0, r2
   22628:	d02f      	beq.n	2268a <round+0x86>
   2262a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   2262e:	4123      	asrs	r3, r4
   22630:	441d      	add	r5, r3
   22632:	ea25 0501 	bic.w	r5, r5, r1
   22636:	2300      	movs	r3, #0
   22638:	e025      	b.n	22686 <round+0x82>
   2263a:	2c33      	cmp	r4, #51	; 0x33
   2263c:	dd07      	ble.n	2264e <round+0x4a>
   2263e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   22642:	d122      	bne.n	2268a <round+0x86>
   22644:	f7dd fd62 	bl	10c <__adddf3>
   22648:	4602      	mov	r2, r0
   2264a:	460b      	mov	r3, r1
   2264c:	e01d      	b.n	2268a <round+0x86>
   2264e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
   22652:	f04f 31ff 	mov.w	r1, #4294967295
   22656:	fa21 f707 	lsr.w	r7, r1, r7
   2265a:	4238      	tst	r0, r7
   2265c:	d015      	beq.n	2268a <round+0x86>
   2265e:	2201      	movs	r2, #1
   22660:	f1c4 0333 	rsb	r3, r4, #51	; 0x33
   22664:	fa02 f303 	lsl.w	r3, r2, r3
   22668:	18c3      	adds	r3, r0, r3
   2266a:	bf28      	it	cs
   2266c:	18ad      	addcs	r5, r5, r2
   2266e:	ea23 0307 	bic.w	r3, r3, r7
   22672:	e008      	b.n	22686 <round+0x82>
   22674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   22678:	3401      	adds	r4, #1
   2267a:	bf04      	itt	eq
   2267c:	f045 557f 	orreq.w	r5, r5, #1069547520	; 0x3fc00000
   22680:	f445 1540 	orreq.w	r5, r5, #3145728	; 0x300000
   22684:	2300      	movs	r3, #0
   22686:	461a      	mov	r2, r3
   22688:	462b      	mov	r3, r5
   2268a:	4610      	mov	r0, r2
   2268c:	4619      	mov	r1, r3
   2268e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
   22692:	bf00      	nop
   22694:	000fffff 	.word	0x000fffff

00022698 <pow>:
   22698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2269c:	b08f      	sub	sp, #60	; 0x3c
   2269e:	461d      	mov	r5, r3
   226a0:	4606      	mov	r6, r0
   226a2:	460f      	mov	r7, r1
   226a4:	4614      	mov	r4, r2
   226a6:	f7ee fd97 	bl	111d8 <__ieee754_pow>
   226aa:	4ba3      	ldr	r3, [pc, #652]	; (22938 <pow+0x2a0>)
   226ac:	f993 9000 	ldrsb.w	r9, [r3]
   226b0:	f1b9 3fff 	cmp.w	r9, #4294967295
   226b4:	e9cd 0100 	strd	r0, r1, [sp]
   226b8:	d039      	beq.n	2272e <pow+0x96>
   226ba:	4622      	mov	r2, r4
   226bc:	462b      	mov	r3, r5
   226be:	4620      	mov	r0, r4
   226c0:	4629      	mov	r1, r5
   226c2:	f7de fe59 	bl	1378 <__aeabi_dcmpun>
   226c6:	4683      	mov	fp, r0
   226c8:	2800      	cmp	r0, #0
   226ca:	d130      	bne.n	2272e <pow+0x96>
   226cc:	4632      	mov	r2, r6
   226ce:	463b      	mov	r3, r7
   226d0:	4630      	mov	r0, r6
   226d2:	4639      	mov	r1, r7
   226d4:	f7de fe50 	bl	1378 <__aeabi_dcmpun>
   226d8:	4680      	mov	r8, r0
   226da:	2800      	cmp	r0, #0
   226dc:	f040 80dc 	bne.w	22898 <pow+0x200>
   226e0:	f04f 0a00 	mov.w	sl, #0
   226e4:	f04f 0b00 	mov.w	fp, #0
   226e8:	4652      	mov	r2, sl
   226ea:	465b      	mov	r3, fp
   226ec:	4630      	mov	r0, r6
   226ee:	4639      	mov	r1, r7
   226f0:	f7de f92a 	bl	948 <__aeabi_dcmpeq>
   226f4:	b300      	cbz	r0, 22738 <pow+0xa0>
   226f6:	4652      	mov	r2, sl
   226f8:	465b      	mov	r3, fp
   226fa:	4620      	mov	r0, r4
   226fc:	4629      	mov	r1, r5
   226fe:	f7de f923 	bl	948 <__aeabi_dcmpeq>
   22702:	9003      	str	r0, [sp, #12]
   22704:	2800      	cmp	r0, #0
   22706:	d051      	beq.n	227ac <pow+0x114>
   22708:	4b8c      	ldr	r3, [pc, #560]	; (2293c <pow+0x2a4>)
   2270a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   2270e:	2201      	movs	r2, #1
   22710:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22714:	e9cd 4508 	strd	r4, r5, [sp, #32]
   22718:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   2271c:	9204      	str	r2, [sp, #16]
   2271e:	9305      	str	r3, [sp, #20]
   22720:	f1b9 0f00 	cmp.w	r9, #0
   22724:	d069      	beq.n	227fa <pow+0x162>
   22726:	4c86      	ldr	r4, [pc, #536]	; (22940 <pow+0x2a8>)
   22728:	2300      	movs	r3, #0
   2272a:	e9cd 3400 	strd	r3, r4, [sp]
   2272e:	e9dd 0100 	ldrd	r0, r1, [sp]
   22732:	b00f      	add	sp, #60	; 0x3c
   22734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22738:	e9dd 0100 	ldrd	r0, r1, [sp]
   2273c:	f000 fa6c 	bl	22c18 <finite>
   22740:	4680      	mov	r8, r0
   22742:	2800      	cmp	r0, #0
   22744:	d06d      	beq.n	22822 <pow+0x18a>
   22746:	f04f 0800 	mov.w	r8, #0
   2274a:	f04f 0900 	mov.w	r9, #0
   2274e:	e9dd 0100 	ldrd	r0, r1, [sp]
   22752:	4642      	mov	r2, r8
   22754:	464b      	mov	r3, r9
   22756:	f7de f8f7 	bl	948 <__aeabi_dcmpeq>
   2275a:	2800      	cmp	r0, #0
   2275c:	d0e7      	beq.n	2272e <pow+0x96>
   2275e:	4630      	mov	r0, r6
   22760:	4639      	mov	r1, r7
   22762:	f000 fa59 	bl	22c18 <finite>
   22766:	2800      	cmp	r0, #0
   22768:	d0e1      	beq.n	2272e <pow+0x96>
   2276a:	4620      	mov	r0, r4
   2276c:	4629      	mov	r1, r5
   2276e:	f000 fa53 	bl	22c18 <finite>
   22772:	2800      	cmp	r0, #0
   22774:	d0db      	beq.n	2272e <pow+0x96>
   22776:	4b70      	ldr	r3, [pc, #448]	; (22938 <pow+0x2a0>)
   22778:	4a70      	ldr	r2, [pc, #448]	; (2293c <pow+0x2a4>)
   2277a:	f993 3000 	ldrsb.w	r3, [r3]
   2277e:	9205      	str	r2, [sp, #20]
   22780:	2104      	movs	r1, #4
   22782:	2200      	movs	r2, #0
   22784:	2b02      	cmp	r3, #2
   22786:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2278a:	e9cd 4508 	strd	r4, r5, [sp, #32]
   2278e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
   22792:	9104      	str	r1, [sp, #16]
   22794:	920c      	str	r2, [sp, #48]	; 0x30
   22796:	d004      	beq.n	227a2 <pow+0x10a>
   22798:	a804      	add	r0, sp, #16
   2279a:	f000 fa43 	bl	22c24 <matherr>
   2279e:	2800      	cmp	r0, #0
   227a0:	d130      	bne.n	22804 <pow+0x16c>
   227a2:	f001 fdf0 	bl	24386 <__errno>
   227a6:	2322      	movs	r3, #34	; 0x22
   227a8:	6003      	str	r3, [r0, #0]
   227aa:	e02b      	b.n	22804 <pow+0x16c>
   227ac:	4620      	mov	r0, r4
   227ae:	4629      	mov	r1, r5
   227b0:	f000 fa32 	bl	22c18 <finite>
   227b4:	2800      	cmp	r0, #0
   227b6:	d0ba      	beq.n	2272e <pow+0x96>
   227b8:	4652      	mov	r2, sl
   227ba:	465b      	mov	r3, fp
   227bc:	4620      	mov	r0, r4
   227be:	4629      	mov	r1, r5
   227c0:	f7de f8cc 	bl	95c <__aeabi_dcmplt>
   227c4:	2800      	cmp	r0, #0
   227c6:	d0b2      	beq.n	2272e <pow+0x96>
   227c8:	4b5b      	ldr	r3, [pc, #364]	; (22938 <pow+0x2a0>)
   227ca:	9903      	ldr	r1, [sp, #12]
   227cc:	4a5b      	ldr	r2, [pc, #364]	; (2293c <pow+0x2a4>)
   227ce:	f993 3000 	ldrsb.w	r3, [r3]
   227d2:	910c      	str	r1, [sp, #48]	; 0x30
   227d4:	2101      	movs	r1, #1
   227d6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   227da:	e9cd 4508 	strd	r4, r5, [sp, #32]
   227de:	e9cd 1204 	strd	r1, r2, [sp, #16]
   227e2:	2b00      	cmp	r3, #0
   227e4:	d175      	bne.n	228d2 <pow+0x23a>
   227e6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   227ea:	a804      	add	r0, sp, #16
   227ec:	f000 fa1a 	bl	22c24 <matherr>
   227f0:	2800      	cmp	r0, #0
   227f2:	d074      	beq.n	228de <pow+0x246>
   227f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   227f6:	b15b      	cbz	r3, 22810 <pow+0x178>
   227f8:	e006      	b.n	22808 <pow+0x170>
   227fa:	a804      	add	r0, sp, #16
   227fc:	f000 fa12 	bl	22c24 <matherr>
   22800:	2800      	cmp	r0, #0
   22802:	d071      	beq.n	228e8 <pow+0x250>
   22804:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22806:	b11b      	cbz	r3, 22810 <pow+0x178>
   22808:	f001 fdbd 	bl	24386 <__errno>
   2280c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2280e:	6003      	str	r3, [r0, #0]
   22810:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
   22814:	e9cd 3400 	strd	r3, r4, [sp]
   22818:	e9dd 0100 	ldrd	r0, r1, [sp]
   2281c:	b00f      	add	sp, #60	; 0x3c
   2281e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22822:	4630      	mov	r0, r6
   22824:	4639      	mov	r1, r7
   22826:	f000 f9f7 	bl	22c18 <finite>
   2282a:	2800      	cmp	r0, #0
   2282c:	d08b      	beq.n	22746 <pow+0xae>
   2282e:	4620      	mov	r0, r4
   22830:	4629      	mov	r1, r5
   22832:	f000 f9f1 	bl	22c18 <finite>
   22836:	2800      	cmp	r0, #0
   22838:	d085      	beq.n	22746 <pow+0xae>
   2283a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2283e:	4619      	mov	r1, r3
   22840:	4610      	mov	r0, r2
   22842:	f7de fd99 	bl	1378 <__aeabi_dcmpun>
   22846:	4b3c      	ldr	r3, [pc, #240]	; (22938 <pow+0x2a0>)
   22848:	2800      	cmp	r0, #0
   2284a:	f040 809c 	bne.w	22986 <pow+0x2ee>
   2284e:	f993 8000 	ldrsb.w	r8, [r3]
   22852:	900c      	str	r0, [sp, #48]	; 0x30
   22854:	2303      	movs	r3, #3
   22856:	9304      	str	r3, [sp, #16]
   22858:	4b38      	ldr	r3, [pc, #224]	; (2293c <pow+0x2a4>)
   2285a:	9305      	str	r3, [sp, #20]
   2285c:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22860:	e9cd 4508 	strd	r4, r5, [sp, #32]
   22864:	4652      	mov	r2, sl
   22866:	465b      	mov	r3, fp
   22868:	4630      	mov	r0, r6
   2286a:	4639      	mov	r1, r7
   2286c:	f1b8 0f00 	cmp.w	r8, #0
   22870:	d13f      	bne.n	228f2 <pow+0x25a>
   22872:	4f34      	ldr	r7, [pc, #208]	; (22944 <pow+0x2ac>)
   22874:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   22878:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   2287c:	f7de f86e 	bl	95c <__aeabi_dcmplt>
   22880:	2800      	cmp	r0, #0
   22882:	d141      	bne.n	22908 <pow+0x270>
   22884:	a804      	add	r0, sp, #16
   22886:	f000 f9cd 	bl	22c24 <matherr>
   2288a:	2800      	cmp	r0, #0
   2288c:	d1b2      	bne.n	227f4 <pow+0x15c>
   2288e:	f001 fd7a 	bl	24386 <__errno>
   22892:	2322      	movs	r3, #34	; 0x22
   22894:	6003      	str	r3, [r0, #0]
   22896:	e7ad      	b.n	227f4 <pow+0x15c>
   22898:	2200      	movs	r2, #0
   2289a:	2300      	movs	r3, #0
   2289c:	4620      	mov	r0, r4
   2289e:	4629      	mov	r1, r5
   228a0:	f7de f852 	bl	948 <__aeabi_dcmpeq>
   228a4:	2800      	cmp	r0, #0
   228a6:	f43f af42 	beq.w	2272e <pow+0x96>
   228aa:	4925      	ldr	r1, [pc, #148]	; (22940 <pow+0x2a8>)
   228ac:	4b23      	ldr	r3, [pc, #140]	; (2293c <pow+0x2a4>)
   228ae:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   228b2:	2201      	movs	r2, #1
   228b4:	2000      	movs	r0, #0
   228b6:	f1b9 0f02 	cmp.w	r9, #2
   228ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
   228be:	e9cd 4508 	strd	r4, r5, [sp, #32]
   228c2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   228c6:	9204      	str	r2, [sp, #16]
   228c8:	9305      	str	r3, [sp, #20]
   228ca:	d196      	bne.n	227fa <pow+0x162>
   228cc:	e9cd 0100 	strd	r0, r1, [sp]
   228d0:	e72d      	b.n	2272e <pow+0x96>
   228d2:	491d      	ldr	r1, [pc, #116]	; (22948 <pow+0x2b0>)
   228d4:	2000      	movs	r0, #0
   228d6:	2b02      	cmp	r3, #2
   228d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   228dc:	d185      	bne.n	227ea <pow+0x152>
   228de:	f001 fd52 	bl	24386 <__errno>
   228e2:	2321      	movs	r3, #33	; 0x21
   228e4:	6003      	str	r3, [r0, #0]
   228e6:	e785      	b.n	227f4 <pow+0x15c>
   228e8:	f001 fd4d 	bl	24386 <__errno>
   228ec:	2321      	movs	r3, #33	; 0x21
   228ee:	6003      	str	r3, [r0, #0]
   228f0:	e788      	b.n	22804 <pow+0x16c>
   228f2:	4f16      	ldr	r7, [pc, #88]	; (2294c <pow+0x2b4>)
   228f4:	2600      	movs	r6, #0
   228f6:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
   228fa:	f7de f82f 	bl	95c <__aeabi_dcmplt>
   228fe:	bb58      	cbnz	r0, 22958 <pow+0x2c0>
   22900:	f1b8 0f02 	cmp.w	r8, #2
   22904:	d0c3      	beq.n	2288e <pow+0x1f6>
   22906:	e7bd      	b.n	22884 <pow+0x1ec>
   22908:	4b11      	ldr	r3, [pc, #68]	; (22950 <pow+0x2b8>)
   2290a:	2200      	movs	r2, #0
   2290c:	4620      	mov	r0, r4
   2290e:	4629      	mov	r1, r5
   22910:	f7dd fdb2 	bl	478 <__aeabi_dmul>
   22914:	4604      	mov	r4, r0
   22916:	460d      	mov	r5, r1
   22918:	f000 f98c 	bl	22c34 <rint>
   2291c:	4622      	mov	r2, r4
   2291e:	462b      	mov	r3, r5
   22920:	f7de f812 	bl	948 <__aeabi_dcmpeq>
   22924:	bb58      	cbnz	r0, 2297e <pow+0x2e6>
   22926:	4b0b      	ldr	r3, [pc, #44]	; (22954 <pow+0x2bc>)
   22928:	4903      	ldr	r1, [pc, #12]	; (22938 <pow+0x2a0>)
   2292a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   2292e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   22932:	f991 8000 	ldrsb.w	r8, [r1]
   22936:	e7e3      	b.n	22900 <pow+0x268>
   22938:	2000079a 	.word	0x2000079a
   2293c:	0002ae40 	.word	0x0002ae40
   22940:	3ff00000 	.word	0x3ff00000
   22944:	47efffff 	.word	0x47efffff
   22948:	fff00000 	.word	0xfff00000
   2294c:	7ff00000 	.word	0x7ff00000
   22950:	3fe00000 	.word	0x3fe00000
   22954:	c7efffff 	.word	0xc7efffff
   22958:	4b19      	ldr	r3, [pc, #100]	; (229c0 <pow+0x328>)
   2295a:	2200      	movs	r2, #0
   2295c:	4620      	mov	r0, r4
   2295e:	4629      	mov	r1, r5
   22960:	f7dd fd8a 	bl	478 <__aeabi_dmul>
   22964:	4604      	mov	r4, r0
   22966:	460d      	mov	r5, r1
   22968:	f000 f964 	bl	22c34 <rint>
   2296c:	4622      	mov	r2, r4
   2296e:	462b      	mov	r3, r5
   22970:	f7dd ffea 	bl	948 <__aeabi_dcmpeq>
   22974:	b918      	cbnz	r0, 2297e <pow+0x2e6>
   22976:	4b13      	ldr	r3, [pc, #76]	; (229c4 <pow+0x32c>)
   22978:	2200      	movs	r2, #0
   2297a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   2297e:	4b12      	ldr	r3, [pc, #72]	; (229c8 <pow+0x330>)
   22980:	f993 8000 	ldrsb.w	r8, [r3]
   22984:	e7bc      	b.n	22900 <pow+0x268>
   22986:	f993 9000 	ldrsb.w	r9, [r3]
   2298a:	4b10      	ldr	r3, [pc, #64]	; (229cc <pow+0x334>)
   2298c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   22990:	2201      	movs	r2, #1
   22992:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22996:	e9cd 4508 	strd	r4, r5, [sp, #32]
   2299a:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2299e:	f1b9 0f00 	cmp.w	r9, #0
   229a2:	f43f af20 	beq.w	227e6 <pow+0x14e>
   229a6:	4652      	mov	r2, sl
   229a8:	465b      	mov	r3, fp
   229aa:	4650      	mov	r0, sl
   229ac:	4659      	mov	r1, fp
   229ae:	f7dd fe8d 	bl	6cc <__aeabi_ddiv>
   229b2:	f1b9 0f02 	cmp.w	r9, #2
   229b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   229ba:	d090      	beq.n	228de <pow+0x246>
   229bc:	e715      	b.n	227ea <pow+0x152>
   229be:	bf00      	nop
   229c0:	3fe00000 	.word	0x3fe00000
   229c4:	fff00000 	.word	0xfff00000
   229c8:	2000079a 	.word	0x2000079a
   229cc:	0002ae40 	.word	0x0002ae40

000229d0 <sqrt>:
   229d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229d4:	b08b      	sub	sp, #44	; 0x2c
   229d6:	4604      	mov	r4, r0
   229d8:	460d      	mov	r5, r1
   229da:	f000 f859 	bl	22a90 <__ieee754_sqrt>
   229de:	4b2a      	ldr	r3, [pc, #168]	; (22a88 <sqrt+0xb8>)
   229e0:	f993 b000 	ldrsb.w	fp, [r3]
   229e4:	f1bb 3fff 	cmp.w	fp, #4294967295
   229e8:	4606      	mov	r6, r0
   229ea:	460f      	mov	r7, r1
   229ec:	d012      	beq.n	22a14 <sqrt+0x44>
   229ee:	4622      	mov	r2, r4
   229f0:	462b      	mov	r3, r5
   229f2:	4620      	mov	r0, r4
   229f4:	4629      	mov	r1, r5
   229f6:	f7de fcbf 	bl	1378 <__aeabi_dcmpun>
   229fa:	4682      	mov	sl, r0
   229fc:	b950      	cbnz	r0, 22a14 <sqrt+0x44>
   229fe:	f04f 0800 	mov.w	r8, #0
   22a02:	f04f 0900 	mov.w	r9, #0
   22a06:	4642      	mov	r2, r8
   22a08:	464b      	mov	r3, r9
   22a0a:	4620      	mov	r0, r4
   22a0c:	4629      	mov	r1, r5
   22a0e:	f7dd ffa5 	bl	95c <__aeabi_dcmplt>
   22a12:	b920      	cbnz	r0, 22a1e <sqrt+0x4e>
   22a14:	4630      	mov	r0, r6
   22a16:	4639      	mov	r1, r7
   22a18:	b00b      	add	sp, #44	; 0x2c
   22a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a1e:	4b1b      	ldr	r3, [pc, #108]	; (22a8c <sqrt+0xbc>)
   22a20:	f8cd a020 	str.w	sl, [sp, #32]
   22a24:	2201      	movs	r2, #1
   22a26:	e9cd 4504 	strd	r4, r5, [sp, #16]
   22a2a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   22a2e:	9200      	str	r2, [sp, #0]
   22a30:	9301      	str	r3, [sp, #4]
   22a32:	f1bb 0f00 	cmp.w	fp, #0
   22a36:	d017      	beq.n	22a68 <sqrt+0x98>
   22a38:	4642      	mov	r2, r8
   22a3a:	464b      	mov	r3, r9
   22a3c:	4640      	mov	r0, r8
   22a3e:	4649      	mov	r1, r9
   22a40:	f7dd fe44 	bl	6cc <__aeabi_ddiv>
   22a44:	f1bb 0f02 	cmp.w	fp, #2
   22a48:	e9cd 0106 	strd	r0, r1, [sp, #24]
   22a4c:	d10e      	bne.n	22a6c <sqrt+0x9c>
   22a4e:	f001 fc9a 	bl	24386 <__errno>
   22a52:	2321      	movs	r3, #33	; 0x21
   22a54:	6003      	str	r3, [r0, #0]
   22a56:	9b08      	ldr	r3, [sp, #32]
   22a58:	b983      	cbnz	r3, 22a7c <sqrt+0xac>
   22a5a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   22a5e:	4630      	mov	r0, r6
   22a60:	4639      	mov	r1, r7
   22a62:	b00b      	add	sp, #44	; 0x2c
   22a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a68:	e9cd 8906 	strd	r8, r9, [sp, #24]
   22a6c:	4668      	mov	r0, sp
   22a6e:	f000 f8d9 	bl	22c24 <matherr>
   22a72:	2800      	cmp	r0, #0
   22a74:	d0eb      	beq.n	22a4e <sqrt+0x7e>
   22a76:	9b08      	ldr	r3, [sp, #32]
   22a78:	2b00      	cmp	r3, #0
   22a7a:	d0ee      	beq.n	22a5a <sqrt+0x8a>
   22a7c:	f001 fc83 	bl	24386 <__errno>
   22a80:	9b08      	ldr	r3, [sp, #32]
   22a82:	6003      	str	r3, [r0, #0]
   22a84:	e7e9      	b.n	22a5a <sqrt+0x8a>
   22a86:	bf00      	nop
   22a88:	2000079a 	.word	0x2000079a
   22a8c:	0002ae44 	.word	0x0002ae44

00022a90 <__ieee754_sqrt>:
   22a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a94:	4f5f      	ldr	r7, [pc, #380]	; (22c14 <__ieee754_sqrt+0x184>)
   22a96:	ea37 0201 	bics.w	r2, r7, r1
   22a9a:	460e      	mov	r6, r1
   22a9c:	4605      	mov	r5, r0
   22a9e:	f000 8097 	beq.w	22bd0 <__ieee754_sqrt+0x140>
   22aa2:	2900      	cmp	r1, #0
   22aa4:	460b      	mov	r3, r1
   22aa6:	4604      	mov	r4, r0
   22aa8:	dd4e      	ble.n	22b48 <__ieee754_sqrt+0xb8>
   22aaa:	1509      	asrs	r1, r1, #20
   22aac:	d05a      	beq.n	22b64 <__ieee754_sqrt+0xd4>
   22aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
   22ab2:	07ca      	lsls	r2, r1, #31
   22ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   22ab8:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   22abc:	d403      	bmi.n	22ac6 <__ieee754_sqrt+0x36>
   22abe:	005b      	lsls	r3, r3, #1
   22ac0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   22ac4:	0064      	lsls	r4, r4, #1
   22ac6:	0fe2      	lsrs	r2, r4, #31
   22ac8:	f04f 0c00 	mov.w	ip, #0
   22acc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   22ad0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   22ad4:	0064      	lsls	r4, r4, #1
   22ad6:	4666      	mov	r6, ip
   22ad8:	2516      	movs	r5, #22
   22ada:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   22ade:	18b1      	adds	r1, r6, r2
   22ae0:	4299      	cmp	r1, r3
   22ae2:	dc02      	bgt.n	22aea <__ieee754_sqrt+0x5a>
   22ae4:	1a5b      	subs	r3, r3, r1
   22ae6:	188e      	adds	r6, r1, r2
   22ae8:	4494      	add	ip, r2
   22aea:	005b      	lsls	r3, r3, #1
   22aec:	3d01      	subs	r5, #1
   22aee:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   22af2:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22af6:	ea4f 0444 	mov.w	r4, r4, lsl #1
   22afa:	d1f0      	bne.n	22ade <__ieee754_sqrt+0x4e>
   22afc:	462f      	mov	r7, r5
   22afe:	2020      	movs	r0, #32
   22b00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   22b04:	e009      	b.n	22b1a <__ieee754_sqrt+0x8a>
   22b06:	d03d      	beq.n	22b84 <__ieee754_sqrt+0xf4>
   22b08:	0fe1      	lsrs	r1, r4, #31
   22b0a:	3801      	subs	r0, #1
   22b0c:	ea4f 0252 	mov.w	r2, r2, lsr #1
   22b10:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   22b14:	ea4f 0444 	mov.w	r4, r4, lsl #1
   22b18:	d03d      	beq.n	22b96 <__ieee754_sqrt+0x106>
   22b1a:	42b3      	cmp	r3, r6
   22b1c:	eb02 0105 	add.w	r1, r2, r5
   22b20:	ddf1      	ble.n	22b06 <__ieee754_sqrt+0x76>
   22b22:	2900      	cmp	r1, #0
   22b24:	eb01 0502 	add.w	r5, r1, r2
   22b28:	db09      	blt.n	22b3e <__ieee754_sqrt+0xae>
   22b2a:	46b0      	mov	r8, r6
   22b2c:	1b9b      	subs	r3, r3, r6
   22b2e:	42a1      	cmp	r1, r4
   22b30:	bf88      	it	hi
   22b32:	f103 33ff 	addhi.w	r3, r3, #4294967295
   22b36:	1a64      	subs	r4, r4, r1
   22b38:	4417      	add	r7, r2
   22b3a:	4646      	mov	r6, r8
   22b3c:	e7e4      	b.n	22b08 <__ieee754_sqrt+0x78>
   22b3e:	2d00      	cmp	r5, #0
   22b40:	dbf3      	blt.n	22b2a <__ieee754_sqrt+0x9a>
   22b42:	f106 0801 	add.w	r8, r6, #1
   22b46:	e7f1      	b.n	22b2c <__ieee754_sqrt+0x9c>
   22b48:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
   22b4c:	4302      	orrs	r2, r0
   22b4e:	d057      	beq.n	22c00 <__ieee754_sqrt+0x170>
   22b50:	2900      	cmp	r1, #0
   22b52:	d14b      	bne.n	22bec <__ieee754_sqrt+0x15c>
   22b54:	0ae2      	lsrs	r2, r4, #11
   22b56:	3915      	subs	r1, #21
   22b58:	0564      	lsls	r4, r4, #21
   22b5a:	4613      	mov	r3, r2
   22b5c:	2a00      	cmp	r2, #0
   22b5e:	d0f9      	beq.n	22b54 <__ieee754_sqrt+0xc4>
   22b60:	02d7      	lsls	r7, r2, #11
   22b62:	d452      	bmi.n	22c0a <__ieee754_sqrt+0x17a>
   22b64:	2000      	movs	r0, #0
   22b66:	005b      	lsls	r3, r3, #1
   22b68:	02de      	lsls	r6, r3, #11
   22b6a:	4605      	mov	r5, r0
   22b6c:	f100 0001 	add.w	r0, r0, #1
   22b70:	d5f9      	bpl.n	22b66 <__ieee754_sqrt+0xd6>
   22b72:	461a      	mov	r2, r3
   22b74:	4623      	mov	r3, r4
   22b76:	4084      	lsls	r4, r0
   22b78:	f1c0 0020 	rsb	r0, r0, #32
   22b7c:	40c3      	lsrs	r3, r0
   22b7e:	4313      	orrs	r3, r2
   22b80:	1b49      	subs	r1, r1, r5
   22b82:	e794      	b.n	22aae <__ieee754_sqrt+0x1e>
   22b84:	42a1      	cmp	r1, r4
   22b86:	d8bf      	bhi.n	22b08 <__ieee754_sqrt+0x78>
   22b88:	2900      	cmp	r1, #0
   22b8a:	eb01 0502 	add.w	r5, r1, r2
   22b8e:	dbd6      	blt.n	22b3e <__ieee754_sqrt+0xae>
   22b90:	4698      	mov	r8, r3
   22b92:	2300      	movs	r3, #0
   22b94:	e7cf      	b.n	22b36 <__ieee754_sqrt+0xa6>
   22b96:	4323      	orrs	r3, r4
   22b98:	d113      	bne.n	22bc2 <__ieee754_sqrt+0x132>
   22b9a:	0878      	lsrs	r0, r7, #1
   22b9c:	ea4f 036c 	mov.w	r3, ip, asr #1
   22ba0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   22ba4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   22ba8:	f01c 0f01 	tst.w	ip, #1
   22bac:	bf18      	it	ne
   22bae:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   22bb2:	eb03 550e 	add.w	r5, r3, lr, lsl #20
   22bb6:	4602      	mov	r2, r0
   22bb8:	462b      	mov	r3, r5
   22bba:	4610      	mov	r0, r2
   22bbc:	4619      	mov	r1, r3
   22bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22bc2:	1c7b      	adds	r3, r7, #1
   22bc4:	bf16      	itet	ne
   22bc6:	1c78      	addne	r0, r7, #1
   22bc8:	f10c 0c01 	addeq.w	ip, ip, #1
   22bcc:	0840      	lsrne	r0, r0, #1
   22bce:	e7e5      	b.n	22b9c <__ieee754_sqrt+0x10c>
   22bd0:	4602      	mov	r2, r0
   22bd2:	460b      	mov	r3, r1
   22bd4:	f7dd fc50 	bl	478 <__aeabi_dmul>
   22bd8:	462a      	mov	r2, r5
   22bda:	4633      	mov	r3, r6
   22bdc:	f7dd fa96 	bl	10c <__adddf3>
   22be0:	4602      	mov	r2, r0
   22be2:	460b      	mov	r3, r1
   22be4:	4610      	mov	r0, r2
   22be6:	4619      	mov	r1, r3
   22be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22bec:	4602      	mov	r2, r0
   22bee:	f7dd fa8b 	bl	108 <__aeabi_dsub>
   22bf2:	4602      	mov	r2, r0
   22bf4:	460b      	mov	r3, r1
   22bf6:	f7dd fd69 	bl	6cc <__aeabi_ddiv>
   22bfa:	4602      	mov	r2, r0
   22bfc:	460b      	mov	r3, r1
   22bfe:	e7dc      	b.n	22bba <__ieee754_sqrt+0x12a>
   22c00:	4602      	mov	r2, r0
   22c02:	4610      	mov	r0, r2
   22c04:	4619      	mov	r1, r3
   22c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22c0a:	4623      	mov	r3, r4
   22c0c:	2020      	movs	r0, #32
   22c0e:	f04f 35ff 	mov.w	r5, #4294967295
   22c12:	e7b3      	b.n	22b7c <__ieee754_sqrt+0xec>
   22c14:	7ff00000 	.word	0x7ff00000

00022c18 <finite>:
   22c18:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
   22c1c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   22c20:	0fc0      	lsrs	r0, r0, #31
   22c22:	4770      	bx	lr

00022c24 <matherr>:
   22c24:	2000      	movs	r0, #0
   22c26:	4770      	bx	lr

00022c28 <nan>:
   22c28:	4901      	ldr	r1, [pc, #4]	; (22c30 <nan+0x8>)
   22c2a:	2000      	movs	r0, #0
   22c2c:	4770      	bx	lr
   22c2e:	bf00      	nop
   22c30:	7ff80000 	.word	0x7ff80000

00022c34 <rint>:
   22c34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22c38:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
   22c3c:	f2ac 36ff 	subw	r6, ip, #1023	; 0x3ff
   22c40:	2e13      	cmp	r6, #19
   22c42:	b083      	sub	sp, #12
   22c44:	4602      	mov	r2, r0
   22c46:	460b      	mov	r3, r1
   22c48:	460d      	mov	r5, r1
   22c4a:	ea4f 74d1 	mov.w	r4, r1, lsr #31
   22c4e:	4607      	mov	r7, r0
   22c50:	dc31      	bgt.n	22cb6 <rint+0x82>
   22c52:	2e00      	cmp	r6, #0
   22c54:	db4f      	blt.n	22cf6 <rint+0xc2>
   22c56:	493d      	ldr	r1, [pc, #244]	; (22d4c <rint+0x118>)
   22c58:	4131      	asrs	r1, r6
   22c5a:	ea03 0001 	and.w	r0, r3, r1
   22c5e:	4310      	orrs	r0, r2
   22c60:	d02e      	beq.n	22cc0 <rint+0x8c>
   22c62:	ea03 0351 	and.w	r3, r3, r1, lsr #1
   22c66:	ea52 0703 	orrs.w	r7, r2, r3
   22c6a:	ea4f 0151 	mov.w	r1, r1, lsr #1
   22c6e:	d00c      	beq.n	22c8a <rint+0x56>
   22c70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   22c74:	2e13      	cmp	r6, #19
   22c76:	ea25 0101 	bic.w	r1, r5, r1
   22c7a:	fa43 f506 	asr.w	r5, r3, r6
   22c7e:	ea45 0501 	orr.w	r5, r5, r1
   22c82:	bf0c      	ite	eq
   22c84:	f04f 4700 	moveq.w	r7, #2147483648	; 0x80000000
   22c88:	2700      	movne	r7, #0
   22c8a:	4931      	ldr	r1, [pc, #196]	; (22d50 <rint+0x11c>)
   22c8c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   22c90:	462b      	mov	r3, r5
   22c92:	e9d4 4500 	ldrd	r4, r5, [r4]
   22c96:	463a      	mov	r2, r7
   22c98:	4620      	mov	r0, r4
   22c9a:	4629      	mov	r1, r5
   22c9c:	f7dd fa36 	bl	10c <__adddf3>
   22ca0:	e9cd 0100 	strd	r0, r1, [sp]
   22ca4:	e9dd 0100 	ldrd	r0, r1, [sp]
   22ca8:	4622      	mov	r2, r4
   22caa:	462b      	mov	r3, r5
   22cac:	f7dd fa2c 	bl	108 <__aeabi_dsub>
   22cb0:	b003      	add	sp, #12
   22cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22cb6:	2e33      	cmp	r6, #51	; 0x33
   22cb8:	dd07      	ble.n	22cca <rint+0x96>
   22cba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   22cbe:	d042      	beq.n	22d46 <rint+0x112>
   22cc0:	4610      	mov	r0, r2
   22cc2:	4619      	mov	r1, r3
   22cc4:	b003      	add	sp, #12
   22cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22cca:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
   22cce:	f04f 31ff 	mov.w	r1, #4294967295
   22cd2:	fa21 f10c 	lsr.w	r1, r1, ip
   22cd6:	4208      	tst	r0, r1
   22cd8:	d0f2      	beq.n	22cc0 <rint+0x8c>
   22cda:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
   22cde:	ea4f 0351 	mov.w	r3, r1, lsr #1
   22ce2:	d0d2      	beq.n	22c8a <rint+0x56>
   22ce4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22ce8:	ea20 0703 	bic.w	r7, r0, r3
   22cec:	fa42 fc0c 	asr.w	ip, r2, ip
   22cf0:	ea47 070c 	orr.w	r7, r7, ip
   22cf4:	e7c9      	b.n	22c8a <rint+0x56>
   22cf6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   22cfa:	4301      	orrs	r1, r0
   22cfc:	d0e0      	beq.n	22cc0 <rint+0x8c>
   22cfe:	f3c3 0113 	ubfx	r1, r3, #0, #20
   22d02:	4301      	orrs	r1, r0
   22d04:	4812      	ldr	r0, [pc, #72]	; (22d50 <rint+0x11c>)
   22d06:	424f      	negs	r7, r1
   22d08:	430f      	orrs	r7, r1
   22d0a:	eb00 01c4 	add.w	r1, r0, r4, lsl #3
   22d0e:	e9d1 8900 	ldrd	r8, r9, [r1]
   22d12:	0c5d      	lsrs	r5, r3, #17
   22d14:	0b3f      	lsrs	r7, r7, #12
   22d16:	046d      	lsls	r5, r5, #17
   22d18:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
   22d1c:	ea47 0305 	orr.w	r3, r7, r5
   22d20:	4640      	mov	r0, r8
   22d22:	4649      	mov	r1, r9
   22d24:	f7dd f9f2 	bl	10c <__adddf3>
   22d28:	e9cd 0100 	strd	r0, r1, [sp]
   22d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
   22d30:	4642      	mov	r2, r8
   22d32:	464b      	mov	r3, r9
   22d34:	f7dd f9e8 	bl	108 <__aeabi_dsub>
   22d38:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
   22d3c:	ea45 71c4 	orr.w	r1, r5, r4, lsl #31
   22d40:	b003      	add	sp, #12
   22d42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   22d46:	f7dd f9e1 	bl	10c <__adddf3>
   22d4a:	e7bb      	b.n	22cc4 <rint+0x90>
   22d4c:	000fffff 	.word	0x000fffff
   22d50:	00028a88 	.word	0x00028a88

00022d54 <HammingDecode>:
{
   22d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d58:	b093      	sub	sp, #76	; 0x4c
   22d5a:	9009      	str	r0, [sp, #36]	; 0x24
    for (int addr=16; addr<832; addr++)
   22d5c:	f04f 0a10 	mov.w	sl, #16
    int error = 0;
   22d60:	2300      	movs	r3, #0
   22d62:	930c      	str	r3, [sp, #48]	; 0x30
    for (int addr=16; addr<832; addr++)
   22d64:	e097      	b.n	22e96 <HammingDecode+0x142>
        parity[0] = D[0]^D[1]^D[3]^D[4]^D[6]^D[8]^D[10]^D[11];
   22d66:	f99d 1038 	ldrsb.w	r1, [sp, #56]	; 0x38
   22d6a:	910d      	str	r1, [sp, #52]	; 0x34
   22d6c:	f99d 0039 	ldrsb.w	r0, [sp, #57]	; 0x39
   22d70:	460b      	mov	r3, r1
   22d72:	9004      	str	r0, [sp, #16]
   22d74:	4043      	eors	r3, r0
   22d76:	f99d 503b 	ldrsb.w	r5, [sp, #59]	; 0x3b
   22d7a:	f99d b03c 	ldrsb.w	fp, [sp, #60]	; 0x3c
   22d7e:	f99d 603e 	ldrsb.w	r6, [sp, #62]	; 0x3e
   22d82:	f99d 7040 	ldrsb.w	r7, [sp, #64]	; 0x40
   22d86:	f99d 4042 	ldrsb.w	r4, [sp, #66]	; 0x42
   22d8a:	f99d c043 	ldrsb.w	ip, [sp, #67]	; 0x43
   22d8e:	f8cd c014 	str.w	ip, [sp, #20]
   22d92:	ea83 0005 	eor.w	r0, r3, r5
   22d96:	ea8b 0000 	eor.w	r0, fp, r0
   22d9a:	4070      	eors	r0, r6
   22d9c:	4078      	eors	r0, r7
   22d9e:	ea84 0c00 	eor.w	ip, r4, r0
   22da2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
        parity[1] = D[0]^D[2]^D[3]^D[5]^D[6]^D[9]^D[10]^D[12];
   22da6:	f99d e03a 	ldrsb.w	lr, [sp, #58]	; 0x3a
   22daa:	f99d 803d 	ldrsb.w	r8, [sp, #61]	; 0x3d
   22dae:	f99d c041 	ldrsb.w	ip, [sp, #65]	; 0x41
   22db2:	f99d 9044 	ldrsb.w	r9, [sp, #68]	; 0x44
   22db6:	f8cd 9000 	str.w	r9, [sp]
   22dba:	ea81 000e 	eor.w	r0, r1, lr
   22dbe:	4068      	eors	r0, r5
   22dc0:	ea88 0000 	eor.w	r0, r8, r0
   22dc4:	4070      	eors	r0, r6
   22dc6:	ea8c 0000 	eor.w	r0, ip, r0
   22dca:	4060      	eors	r0, r4
   22dcc:	9900      	ldr	r1, [sp, #0]
   22dce:	ea81 0900 	eor.w	r9, r1, r0
   22dd2:	f8cd 9004 	str.w	r9, [sp, #4]
        parity[2] = D[1]^D[2]^D[3]^D[7]^D[8]^D[9]^D[10]^D[13];
   22dd6:	f99d 903f 	ldrsb.w	r9, [sp, #63]	; 0x3f
   22dda:	f99d 1045 	ldrsb.w	r1, [sp, #69]	; 0x45
   22dde:	9804      	ldr	r0, [sp, #16]
   22de0:	ea80 000e 	eor.w	r0, r0, lr
   22de4:	4068      	eors	r0, r5
   22de6:	ea89 0000 	eor.w	r0, r9, r0
   22dea:	4078      	eors	r0, r7
   22dec:	ea8c 0000 	eor.w	r0, ip, r0
   22df0:	4060      	eors	r0, r4
   22df2:	9106      	str	r1, [sp, #24]
   22df4:	4048      	eors	r0, r1
   22df6:	9002      	str	r0, [sp, #8]
        parity[3] = D[4]^D[5]^D[6]^D[7]^D[8]^D[9]^D[10]^D[14];
   22df8:	f99d 0046 	ldrsb.w	r0, [sp, #70]	; 0x46
   22dfc:	ea8b 0108 	eor.w	r1, fp, r8
   22e00:	4071      	eors	r1, r6
   22e02:	ea89 0101 	eor.w	r1, r9, r1
   22e06:	4079      	eors	r1, r7
   22e08:	ea8c 0101 	eor.w	r1, ip, r1
   22e0c:	4061      	eors	r1, r4
   22e0e:	9007      	str	r0, [sp, #28]
   22e10:	4041      	eors	r1, r0
   22e12:	9103      	str	r1, [sp, #12]
        parity[4] = D[0]^D[1]^D[2]^D[3]^D[4]^D[5]^D[6]^D[7]^D[8]^D[9]^D[10]^D[11]^D[12]^D[13]^D[14]^D[15];
   22e14:	f99d 0047 	ldrsb.w	r0, [sp, #71]	; 0x47
   22e18:	9008      	str	r0, [sp, #32]
   22e1a:	ea83 030e 	eor.w	r3, r3, lr
   22e1e:	406b      	eors	r3, r5
   22e20:	ea8b 0303 	eor.w	r3, fp, r3
   22e24:	ea88 0303 	eor.w	r3, r8, r3
   22e28:	4073      	eors	r3, r6
   22e2a:	ea89 0303 	eor.w	r3, r9, r3
   22e2e:	407b      	eors	r3, r7
   22e30:	ea8c 0303 	eor.w	r3, ip, r3
   22e34:	4063      	eors	r3, r4
   22e36:	9805      	ldr	r0, [sp, #20]
   22e38:	4043      	eors	r3, r0
   22e3a:	9900      	ldr	r1, [sp, #0]
   22e3c:	404b      	eors	r3, r1
   22e3e:	9906      	ldr	r1, [sp, #24]
   22e40:	404b      	eors	r3, r1
   22e42:	9907      	ldr	r1, [sp, #28]
   22e44:	404b      	eors	r3, r1
   22e46:	9908      	ldr	r1, [sp, #32]
   22e48:	404b      	eors	r3, r1
        if ((parity[0]!=0) || (parity[1]!=0) || (parity[2]!=0) || (parity[3]!=0) || (parity[4]!=0))
   22e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   22e4c:	4048      	eors	r0, r1
   22e4e:	d106      	bne.n	22e5e <HammingDecode+0x10a>
   22e50:	9901      	ldr	r1, [sp, #4]
   22e52:	b921      	cbnz	r1, 22e5e <HammingDecode+0x10a>
   22e54:	9902      	ldr	r1, [sp, #8]
   22e56:	b911      	cbnz	r1, 22e5e <HammingDecode+0x10a>
   22e58:	9903      	ldr	r1, [sp, #12]
   22e5a:	b901      	cbnz	r1, 22e5e <HammingDecode+0x10a>
   22e5c:	b1a3      	cbz	r3, 22e88 <HammingDecode+0x134>
            check = (parity[0]<<0) + (parity[1]<<1) + (parity[2]<<2) + (parity[3]<<3) + (parity[4]<<4);
   22e5e:	9901      	ldr	r1, [sp, #4]
   22e60:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   22e64:	9902      	ldr	r1, [sp, #8]
   22e66:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   22e6a:	9903      	ldr	r1, [sp, #12]
   22e6c:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   22e70:	011b      	lsls	r3, r3, #4
   22e72:	fa00 f383 	sxtah	r3, r0, r3
   22e76:	b21b      	sxth	r3, r3
            if ((check > 15)&&(check < 32))
   22e78:	f1a3 0110 	sub.w	r1, r3, #16
   22e7c:	b289      	uxth	r1, r1
   22e7e:	290f      	cmp	r1, #15
   22e80:	d923      	bls.n	22eca <HammingDecode+0x176>
                error = -10;                
   22e82:	f06f 0309 	mvn.w	r3, #9
   22e86:	930c      	str	r3, [sp, #48]	; 0x30
        eeData[addr] = data & 0x07FF;
   22e88:	f3c2 020a 	ubfx	r2, r2, #0, #11
   22e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22e8e:	990a      	ldr	r1, [sp, #40]	; 0x28
   22e90:	525a      	strh	r2, [r3, r1]
    for (int addr=16; addr<832; addr++)
   22e92:	f10a 0a01 	add.w	sl, sl, #1
   22e96:	f5ba 7f50 	cmp.w	sl, #832	; 0x340
   22e9a:	f280 808f 	bge.w	22fbc <HammingDecode+0x268>
        data = eeData[addr];
   22e9e:	ea4f 034a 	mov.w	r3, sl, lsl #1
   22ea2:	930a      	str	r3, [sp, #40]	; 0x28
   22ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22ea6:	f833 201a 	ldrh.w	r2, [r3, sl, lsl #1]
        for( int i = 0; i < 16; i++)
   22eaa:	2300      	movs	r3, #0
        mask = 1;
   22eac:	2101      	movs	r1, #1
        for( int i = 0; i < 16; i++)
   22eae:	2b0f      	cmp	r3, #15
   22eb0:	f73f af59 	bgt.w	22d66 <HammingDecode+0x12>
          D[i] = (data & mask) >> i;
   22eb4:	ea01 0002 	and.w	r0, r1, r2
   22eb8:	4118      	asrs	r0, r3
   22eba:	ac12      	add	r4, sp, #72	; 0x48
   22ebc:	441c      	add	r4, r3
   22ebe:	f804 0c10 	strb.w	r0, [r4, #-16]
          mask = mask << 1;
   22ec2:	0049      	lsls	r1, r1, #1
   22ec4:	b289      	uxth	r1, r1
        for( int i = 0; i < 16; i++)
   22ec6:	3301      	adds	r3, #1
   22ec8:	e7f1      	b.n	22eae <HammingDecode+0x15a>
                switch (check)
   22eca:	3b10      	subs	r3, #16
   22ecc:	2b0f      	cmp	r3, #15
   22ece:	d80e      	bhi.n	22eee <HammingDecode+0x19a>
   22ed0:	e8df f003 	tbb	[pc, r3]
   22ed4:	6e2f3508 	.word	0x6e2f3508
   22ed8:	5e636829 	.word	0x5e636829
   22edc:	4f545923 	.word	0x4f545923
   22ee0:	3b40454a 	.word	0x3b40454a
                        D[15] = 1 - D[15];
   22ee4:	9b08      	ldr	r3, [sp, #32]
   22ee6:	f1c3 0301 	rsb	r3, r3, #1
   22eea:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
                if(error == 0)
   22eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22ef0:	b913      	cbnz	r3, 22ef8 <HammingDecode+0x1a4>
                    error = -9;
   22ef2:	f06f 0308 	mvn.w	r3, #8
   22ef6:	930c      	str	r3, [sp, #48]	; 0x30
                for( int i = 0; i < 16; i++)
   22ef8:	2000      	movs	r0, #0
                mask = 1;
   22efa:	2101      	movs	r1, #1
                data = 0;
   22efc:	4602      	mov	r2, r0
                for( int i = 0; i < 16; i++)
   22efe:	280f      	cmp	r0, #15
   22f00:	dcc2      	bgt.n	22e88 <HammingDecode+0x134>
                    data = data + D[i]*mask;
   22f02:	ab12      	add	r3, sp, #72	; 0x48
   22f04:	4403      	add	r3, r0
   22f06:	f913 3c10 	ldrsb.w	r3, [r3, #-16]
   22f0a:	fb13 f301 	smulbb	r3, r3, r1
   22f0e:	441a      	add	r2, r3
   22f10:	b292      	uxth	r2, r2
                    mask = mask << 1;
   22f12:	0049      	lsls	r1, r1, #1
   22f14:	b289      	uxth	r1, r1
                for( int i = 0; i < 16; i++)
   22f16:	3001      	adds	r0, #1
   22f18:	e7f1      	b.n	22efe <HammingDecode+0x1aa>
                        D[14] = 1 - D[14];
   22f1a:	9b07      	ldr	r3, [sp, #28]
   22f1c:	f1c3 0b01 	rsb	fp, r3, #1
   22f20:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
                        break;
   22f24:	e7e3      	b.n	22eee <HammingDecode+0x19a>
                        D[13] = 1 - D[13];
   22f26:	9b06      	ldr	r3, [sp, #24]
   22f28:	f1c3 0301 	rsb	r3, r3, #1
   22f2c:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
                        break;
   22f30:	e7dd      	b.n	22eee <HammingDecode+0x19a>
                        D[12] = 1 - D[12];
   22f32:	9b00      	ldr	r3, [sp, #0]
   22f34:	f1c3 0301 	rsb	r3, r3, #1
   22f38:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
                        break;                                
   22f3c:	e7d7      	b.n	22eee <HammingDecode+0x19a>
                        D[11] = 1 - D[11];
   22f3e:	9b05      	ldr	r3, [sp, #20]
   22f40:	f1c3 0301 	rsb	r3, r3, #1
   22f44:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
                        break;
   22f48:	e7d1      	b.n	22eee <HammingDecode+0x19a>
                        D[10] = 1 - D[10];
   22f4a:	f1c4 0401 	rsb	r4, r4, #1
   22f4e:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
                        break;
   22f52:	e7cc      	b.n	22eee <HammingDecode+0x19a>
                        D[9] = 1 - D[9];
   22f54:	f1cc 0c01 	rsb	ip, ip, #1
   22f58:	f88d c041 	strb.w	ip, [sp, #65]	; 0x41
                        break;
   22f5c:	e7c7      	b.n	22eee <HammingDecode+0x19a>
                        D[8] = 1 - D[8];
   22f5e:	f1c7 0701 	rsb	r7, r7, #1
   22f62:	f88d 7040 	strb.w	r7, [sp, #64]	; 0x40
                        break;                
   22f66:	e7c2      	b.n	22eee <HammingDecode+0x19a>
                        D[7] = 1 - D[7];
   22f68:	f1c9 0901 	rsb	r9, r9, #1
   22f6c:	f88d 903f 	strb.w	r9, [sp, #63]	; 0x3f
                        break;
   22f70:	e7bd      	b.n	22eee <HammingDecode+0x19a>
                        D[6] = 1 - D[6];
   22f72:	f1c6 0601 	rsb	r6, r6, #1
   22f76:	f88d 603e 	strb.w	r6, [sp, #62]	; 0x3e
                        break;
   22f7a:	e7b8      	b.n	22eee <HammingDecode+0x19a>
                        D[5] = 1 - D[5];
   22f7c:	f1c8 0801 	rsb	r8, r8, #1
   22f80:	f88d 803d 	strb.w	r8, [sp, #61]	; 0x3d
                        break;    
   22f84:	e7b3      	b.n	22eee <HammingDecode+0x19a>
                        D[4] = 1 - D[4];
   22f86:	f1cb 0301 	rsb	r3, fp, #1
   22f8a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
                        break;     
   22f8e:	e7ae      	b.n	22eee <HammingDecode+0x19a>
                        D[3] = 1 - D[3];
   22f90:	f1c5 0501 	rsb	r5, r5, #1
   22f94:	f88d 503b 	strb.w	r5, [sp, #59]	; 0x3b
                        break; 
   22f98:	e7a9      	b.n	22eee <HammingDecode+0x19a>
                        D[2] = 1 - D[2];
   22f9a:	f1ce 0e01 	rsb	lr, lr, #1
   22f9e:	f88d e03a 	strb.w	lr, [sp, #58]	; 0x3a
                        break; 
   22fa2:	e7a4      	b.n	22eee <HammingDecode+0x19a>
                        D[1] = 1 - D[1];
   22fa4:	9b04      	ldr	r3, [sp, #16]
   22fa6:	f1c3 0301 	rsb	r3, r3, #1
   22faa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
                        break; 
   22fae:	e79e      	b.n	22eee <HammingDecode+0x19a>
                        D[0] = 1 - D[0];
   22fb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22fb2:	f1c3 0301 	rsb	r3, r3, #1
   22fb6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
                        break;     
   22fba:	e798      	b.n	22eee <HammingDecode+0x19a>
}
   22fbc:	980c      	ldr	r0, [sp, #48]	; 0x30
   22fbe:	b013      	add	sp, #76	; 0x4c
   22fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022fc4 <MLX90641_DumpEE>:
{
   22fc4:	b510      	push	{r4, lr}
   22fc6:	460c      	mov	r4, r1
     error = MLX90641_I2CRead(slaveAddr, 0x2400, 832, eeData);
   22fc8:	460b      	mov	r3, r1
   22fca:	f44f 7250 	mov.w	r2, #832	; 0x340
   22fce:	f44f 5110 	mov.w	r1, #9216	; 0x2400
   22fd2:	f7ef f9f5 	bl	123c0 <MLX90641_I2CRead>
     if (error == 0)
   22fd6:	b100      	cbz	r0, 22fda <MLX90641_DumpEE+0x16>
}
   22fd8:	bd10      	pop	{r4, pc}
        error = HammingDecode(eeData);  
   22fda:	4620      	mov	r0, r4
   22fdc:	f7ff feba 	bl	22d54 <HammingDecode>
     return error;
   22fe0:	e7fa      	b.n	22fd8 <MLX90641_DumpEE+0x14>

00022fe2 <ValidateFrameData>:
    for(int i=0; i<192; i+=16)
   22fe2:	2300      	movs	r3, #0
   22fe4:	2bbf      	cmp	r3, #191	; 0xbf
   22fe6:	dc07      	bgt.n	22ff8 <ValidateFrameData+0x16>
        if(frameData[i] == 0x7FFF) return -8;
   22fe8:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
   22fec:	f647 72ff 	movw	r2, #32767	; 0x7fff
   22ff0:	4291      	cmp	r1, r2
   22ff2:	d003      	beq.n	22ffc <ValidateFrameData+0x1a>
    for(int i=0; i<192; i+=16)
   22ff4:	3310      	adds	r3, #16
   22ff6:	e7f5      	b.n	22fe4 <ValidateFrameData+0x2>
    return 0;    
   22ff8:	2000      	movs	r0, #0
   22ffa:	4770      	bx	lr
        if(frameData[i] == 0x7FFF) return -8;
   22ffc:	f06f 0007 	mvn.w	r0, #7
}
   23000:	4770      	bx	lr

00023002 <ValidateAuxData>:
    if(auxData[0] == 0x7FFF) return -8;    
   23002:	8802      	ldrh	r2, [r0, #0]
   23004:	f647 73ff 	movw	r3, #32767	; 0x7fff
   23008:	429a      	cmp	r2, r3
   2300a:	d02d      	beq.n	23068 <ValidateAuxData+0x66>
    for(int i=8; i<19; i++)
   2300c:	2308      	movs	r3, #8
   2300e:	2b12      	cmp	r3, #18
   23010:	dc07      	bgt.n	23022 <ValidateAuxData+0x20>
        if(auxData[i] == 0x7FFF) return -8;
   23012:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
   23016:	f647 72ff 	movw	r2, #32767	; 0x7fff
   2301a:	4291      	cmp	r1, r2
   2301c:	d027      	beq.n	2306e <ValidateAuxData+0x6c>
    for(int i=8; i<19; i++)
   2301e:	3301      	adds	r3, #1
   23020:	e7f5      	b.n	2300e <ValidateAuxData+0xc>
    for(int i=20; i<23; i++)
   23022:	2314      	movs	r3, #20
   23024:	2b16      	cmp	r3, #22
   23026:	dc07      	bgt.n	23038 <ValidateAuxData+0x36>
        if(auxData[i] == 0x7FFF) return -8;
   23028:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
   2302c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   23030:	4291      	cmp	r1, r2
   23032:	d01f      	beq.n	23074 <ValidateAuxData+0x72>
    for(int i=20; i<23; i++)
   23034:	3301      	adds	r3, #1
   23036:	e7f5      	b.n	23024 <ValidateAuxData+0x22>
    for(int i=24; i<33; i++)
   23038:	2318      	movs	r3, #24
   2303a:	2b20      	cmp	r3, #32
   2303c:	dc07      	bgt.n	2304e <ValidateAuxData+0x4c>
        if(auxData[i] == 0x7FFF) return -8;
   2303e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
   23042:	f647 72ff 	movw	r2, #32767	; 0x7fff
   23046:	4291      	cmp	r1, r2
   23048:	d017      	beq.n	2307a <ValidateAuxData+0x78>
    for(int i=24; i<33; i++)
   2304a:	3301      	adds	r3, #1
   2304c:	e7f5      	b.n	2303a <ValidateAuxData+0x38>
    for(int i=40; i<48; i++)
   2304e:	2328      	movs	r3, #40	; 0x28
   23050:	2b2f      	cmp	r3, #47	; 0x2f
   23052:	dc07      	bgt.n	23064 <ValidateAuxData+0x62>
        if(auxData[i] == 0x7FFF) return -8;
   23054:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
   23058:	f647 72ff 	movw	r2, #32767	; 0x7fff
   2305c:	4291      	cmp	r1, r2
   2305e:	d00f      	beq.n	23080 <ValidateAuxData+0x7e>
    for(int i=40; i<48; i++)
   23060:	3301      	adds	r3, #1
   23062:	e7f5      	b.n	23050 <ValidateAuxData+0x4e>
    return 0;
   23064:	2000      	movs	r0, #0
   23066:	4770      	bx	lr
    if(auxData[0] == 0x7FFF) return -8;    
   23068:	f06f 0007 	mvn.w	r0, #7
   2306c:	4770      	bx	lr
        if(auxData[i] == 0x7FFF) return -8;
   2306e:	f06f 0007 	mvn.w	r0, #7
   23072:	4770      	bx	lr
        if(auxData[i] == 0x7FFF) return -8;
   23074:	f06f 0007 	mvn.w	r0, #7
   23078:	4770      	bx	lr
        if(auxData[i] == 0x7FFF) return -8;
   2307a:	f06f 0007 	mvn.w	r0, #7
   2307e:	4770      	bx	lr
        if(auxData[i] == 0x7FFF) return -8;
   23080:	f06f 0007 	mvn.w	r0, #7
}
   23084:	4770      	bx	lr

00023086 <MLX90641_GetFrameData>:
{
   23086:	b570      	push	{r4, r5, r6, lr}
   23088:	b09a      	sub	sp, #104	; 0x68
   2308a:	4604      	mov	r4, r0
   2308c:	460d      	mov	r5, r1
    dataReady = 0;
   2308e:	2300      	movs	r3, #0
    while(dataReady == 0)
   23090:	b96b      	cbnz	r3, 230ae <MLX90641_GetFrameData+0x28>
        error = MLX90641_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
   23092:	ab19      	add	r3, sp, #100	; 0x64
   23094:	2201      	movs	r2, #1
   23096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   2309a:	4620      	mov	r0, r4
   2309c:	f7ef f990 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   230a0:	4603      	mov	r3, r0
   230a2:	b9e8      	cbnz	r0, 230e0 <MLX90641_GetFrameData+0x5a>
        dataReady = statusRegister & 0x0008;
   230a4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   230a8:	f003 0308 	and.w	r3, r3, #8
   230ac:	e7f0      	b.n	23090 <MLX90641_GetFrameData+0xa>
    subPage = statusRegister & 0x0001;
   230ae:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   230b2:	f003 0601 	and.w	r6, r3, #1
    error = MLX90641_I2CWrite(slaveAddr, 0x8000, 0x0030);
   230b6:	2230      	movs	r2, #48	; 0x30
   230b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   230bc:	4620      	mov	r0, r4
   230be:	f7ef f9c9 	bl	12454 <MLX90641_I2CWrite>
   230c2:	4603      	mov	r3, r0
    if(error == -1)
   230c4:	f1b0 3fff 	cmp.w	r0, #4294967295
   230c8:	d00a      	beq.n	230e0 <MLX90641_GetFrameData+0x5a>
    if(subPage == 0)
   230ca:	2e00      	cmp	r6, #0
   230cc:	d16b      	bne.n	231a6 <MLX90641_GetFrameData+0x120>
        error = MLX90641_I2CRead(slaveAddr, 0x0400, 32, frameData); 
   230ce:	462b      	mov	r3, r5
   230d0:	2220      	movs	r2, #32
   230d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   230d6:	4620      	mov	r0, r4
   230d8:	f7ef f972 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   230dc:	4603      	mov	r3, r0
   230de:	b110      	cbz	r0, 230e6 <MLX90641_GetFrameData+0x60>
}
   230e0:	4618      	mov	r0, r3
   230e2:	b01a      	add	sp, #104	; 0x68
   230e4:	bd70      	pop	{r4, r5, r6, pc}
        error = MLX90641_I2CRead(slaveAddr, 0x0440, 32, frameData+32); 
   230e6:	f105 0340 	add.w	r3, r5, #64	; 0x40
   230ea:	2220      	movs	r2, #32
   230ec:	f44f 6188 	mov.w	r1, #1088	; 0x440
   230f0:	4620      	mov	r0, r4
   230f2:	f7ef f965 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   230f6:	4603      	mov	r3, r0
   230f8:	2800      	cmp	r0, #0
   230fa:	d1f1      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0480, 32, frameData+64); 
   230fc:	f105 0380 	add.w	r3, r5, #128	; 0x80
   23100:	2220      	movs	r2, #32
   23102:	f44f 6190 	mov.w	r1, #1152	; 0x480
   23106:	4620      	mov	r0, r4
   23108:	f7ef f95a 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   2310c:	4603      	mov	r3, r0
   2310e:	2800      	cmp	r0, #0
   23110:	d1e6      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x04C0, 32, frameData+96); 
   23112:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   23116:	2220      	movs	r2, #32
   23118:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
   2311c:	4620      	mov	r0, r4
   2311e:	f7ef f94f 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   23122:	4603      	mov	r3, r0
   23124:	2800      	cmp	r0, #0
   23126:	d1db      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0500, 32, frameData+128); 
   23128:	f505 7380 	add.w	r3, r5, #256	; 0x100
   2312c:	2220      	movs	r2, #32
   2312e:	f44f 61a0 	mov.w	r1, #1280	; 0x500
   23132:	4620      	mov	r0, r4
   23134:	f7ef f944 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   23138:	4603      	mov	r3, r0
   2313a:	2800      	cmp	r0, #0
   2313c:	d1d0      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0540, 32, frameData+160); 
   2313e:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   23142:	2220      	movs	r2, #32
   23144:	f44f 61a8 	mov.w	r1, #1344	; 0x540
   23148:	4620      	mov	r0, r4
   2314a:	f7ef f939 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   2314e:	4603      	mov	r3, r0
   23150:	2800      	cmp	r0, #0
   23152:	d1c5      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
    error = MLX90641_I2CRead(slaveAddr, 0x0580, 48, data); 
   23154:	ab01      	add	r3, sp, #4
   23156:	2230      	movs	r2, #48	; 0x30
   23158:	f44f 61b0 	mov.w	r1, #1408	; 0x580
   2315c:	4620      	mov	r0, r4
   2315e:	f7ef f92f 	bl	123c0 <MLX90641_I2CRead>
    if(error != 0)
   23162:	4603      	mov	r3, r0
   23164:	2800      	cmp	r0, #0
   23166:	d1bb      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
    error = MLX90641_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
   23168:	f10d 0366 	add.w	r3, sp, #102	; 0x66
   2316c:	2201      	movs	r2, #1
   2316e:	f248 010d 	movw	r1, #32781	; 0x800d
   23172:	4620      	mov	r0, r4
   23174:	f7ef f924 	bl	123c0 <MLX90641_I2CRead>
    frameData[240] = controlRegister1;
   23178:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   2317c:	f8a5 31e0 	strh.w	r3, [r5, #480]	; 0x1e0
    frameData[241] = subPage;
   23180:	f8a5 61e2 	strh.w	r6, [r5, #482]	; 0x1e2
    if(error != 0)
   23184:	4603      	mov	r3, r0
   23186:	2800      	cmp	r0, #0
   23188:	d1aa      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
    error = ValidateAuxData(data);
   2318a:	a801      	add	r0, sp, #4
   2318c:	f7ff ff39 	bl	23002 <ValidateAuxData>
    if(error == 0)
   23190:	2800      	cmp	r0, #0
   23192:	d05b      	beq.n	2324c <MLX90641_GetFrameData+0x1c6>
    error = ValidateFrameData(frameData);
   23194:	4628      	mov	r0, r5
   23196:	f7ff ff24 	bl	22fe2 <ValidateFrameData>
    if (error != 0)
   2319a:	4603      	mov	r3, r0
   2319c:	2800      	cmp	r0, #0
   2319e:	d19f      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
    return frameData[241];    
   231a0:	f8b5 31e2 	ldrh.w	r3, [r5, #482]	; 0x1e2
   231a4:	e79c      	b.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0420, 32, frameData); 
   231a6:	462b      	mov	r3, r5
   231a8:	2220      	movs	r2, #32
   231aa:	f44f 6184 	mov.w	r1, #1056	; 0x420
   231ae:	4620      	mov	r0, r4
   231b0:	f7ef f906 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   231b4:	4603      	mov	r3, r0
   231b6:	2800      	cmp	r0, #0
   231b8:	d192      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0460, 32, frameData+32); 
   231ba:	f105 0340 	add.w	r3, r5, #64	; 0x40
   231be:	2220      	movs	r2, #32
   231c0:	f44f 618c 	mov.w	r1, #1120	; 0x460
   231c4:	4620      	mov	r0, r4
   231c6:	f7ef f8fb 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   231ca:	4603      	mov	r3, r0
   231cc:	2800      	cmp	r0, #0
   231ce:	d187      	bne.n	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x04A0, 32, frameData+64); 
   231d0:	f105 0380 	add.w	r3, r5, #128	; 0x80
   231d4:	2220      	movs	r2, #32
   231d6:	f44f 6194 	mov.w	r1, #1184	; 0x4a0
   231da:	4620      	mov	r0, r4
   231dc:	f7ef f8f0 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   231e0:	4603      	mov	r3, r0
   231e2:	2800      	cmp	r0, #0
   231e4:	f47f af7c 	bne.w	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x04E0, 32, frameData+96); 
   231e8:	f105 03c0 	add.w	r3, r5, #192	; 0xc0
   231ec:	2220      	movs	r2, #32
   231ee:	f44f 619c 	mov.w	r1, #1248	; 0x4e0
   231f2:	4620      	mov	r0, r4
   231f4:	f7ef f8e4 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   231f8:	4603      	mov	r3, r0
   231fa:	2800      	cmp	r0, #0
   231fc:	f47f af70 	bne.w	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0520, 32, frameData+128); 
   23200:	f505 7380 	add.w	r3, r5, #256	; 0x100
   23204:	2220      	movs	r2, #32
   23206:	f44f 61a4 	mov.w	r1, #1312	; 0x520
   2320a:	4620      	mov	r0, r4
   2320c:	f7ef f8d8 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   23210:	4603      	mov	r3, r0
   23212:	2800      	cmp	r0, #0
   23214:	f47f af64 	bne.w	230e0 <MLX90641_GetFrameData+0x5a>
        error = MLX90641_I2CRead(slaveAddr, 0x0560, 32, frameData+160); 
   23218:	f505 73a0 	add.w	r3, r5, #320	; 0x140
   2321c:	2220      	movs	r2, #32
   2321e:	f44f 61ac 	mov.w	r1, #1376	; 0x560
   23222:	4620      	mov	r0, r4
   23224:	f7ef f8cc 	bl	123c0 <MLX90641_I2CRead>
        if(error != 0)
   23228:	4603      	mov	r3, r0
   2322a:	2800      	cmp	r0, #0
   2322c:	d092      	beq.n	23154 <MLX90641_GetFrameData+0xce>
   2322e:	e757      	b.n	230e0 <MLX90641_GetFrameData+0x5a>
            frameData[cnt+192] = data[cnt];
   23230:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
   23234:	a91a      	add	r1, sp, #104	; 0x68
   23236:	eb01 0143 	add.w	r1, r1, r3, lsl #1
   2323a:	f831 1c64 	ldrh.w	r1, [r1, #-100]
   2323e:	f825 1012 	strh.w	r1, [r5, r2, lsl #1]
        for(cnt=0; cnt<48; cnt++)
   23242:	3301      	adds	r3, #1
   23244:	b2db      	uxtb	r3, r3
   23246:	2b2f      	cmp	r3, #47	; 0x2f
   23248:	d9f2      	bls.n	23230 <MLX90641_GetFrameData+0x1aa>
   2324a:	e7a3      	b.n	23194 <MLX90641_GetFrameData+0x10e>
   2324c:	2300      	movs	r3, #0
   2324e:	e7fa      	b.n	23246 <MLX90641_GetFrameData+0x1c0>

00023250 <MLX90641_SetRefreshRate>:
{
   23250:	b530      	push	{r4, r5, lr}
   23252:	b083      	sub	sp, #12
   23254:	4605      	mov	r5, r0
    value = (refreshRate & 0x07)<<7;
   23256:	01c9      	lsls	r1, r1, #7
   23258:	f401 7460 	and.w	r4, r1, #896	; 0x380
    error = MLX90641_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
   2325c:	f10d 0306 	add.w	r3, sp, #6
   23260:	2201      	movs	r2, #1
   23262:	f248 010d 	movw	r1, #32781	; 0x800d
   23266:	f7ef f8ab 	bl	123c0 <MLX90641_I2CRead>
    if(error == 0)
   2326a:	b108      	cbz	r0, 23270 <MLX90641_SetRefreshRate+0x20>
}
   2326c:	b003      	add	sp, #12
   2326e:	bd30      	pop	{r4, r5, pc}
        value = (controlRegister1 & 0xFC7F) | value;
   23270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   23274:	f422 7260 	bic.w	r2, r2, #896	; 0x380
        error = MLX90641_I2CWrite(slaveAddr, 0x800D, value);
   23278:	4322      	orrs	r2, r4
   2327a:	f248 010d 	movw	r1, #32781	; 0x800d
   2327e:	4628      	mov	r0, r5
   23280:	f7ef f8e8 	bl	12454 <MLX90641_I2CWrite>
    return error;
   23284:	e7f2      	b.n	2326c <MLX90641_SetRefreshRate+0x1c>

00023286 <ExtractVDDParameters>:
    kVdd = eeData[39];
   23286:	f9b0 304e 	ldrsh.w	r3, [r0, #78]	; 0x4e
    if(kVdd > 1023)
   2328a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2328e:	db02      	blt.n	23296 <ExtractVDDParameters+0x10>
        kVdd = kVdd - 2048;
   23290:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
   23294:	b21b      	sxth	r3, r3
    kVdd = 32 * kVdd;
   23296:	015b      	lsls	r3, r3, #5
   23298:	b21b      	sxth	r3, r3
    vdd25 = eeData[38];
   2329a:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
    if(vdd25 > 1023)
   2329e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   232a2:	db02      	blt.n	232aa <ExtractVDDParameters+0x24>
        vdd25 = vdd25 - 2048;
   232a4:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
   232a8:	b212      	sxth	r2, r2
    vdd25 = 32 * vdd25;
   232aa:	0152      	lsls	r2, r2, #5
    mlx90641->kVdd = kVdd;
   232ac:	800b      	strh	r3, [r1, #0]
    mlx90641->vdd25 = vdd25; 
   232ae:	804a      	strh	r2, [r1, #2]
}
   232b0:	4770      	bx	lr

000232b2 <ExtractPTATParameters>:
{
   232b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   232b6:	4605      	mov	r5, r0
   232b8:	460e      	mov	r6, r1
    KvPTAT = eeData[43];
   232ba:	f8b0 4056 	ldrh.w	r4, [r0, #86]	; 0x56
   232be:	4620      	mov	r0, r4
   232c0:	f7dd fcc2 	bl	c48 <__aeabi_ui2f>
    if(KvPTAT > 1023)
   232c4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   232c8:	d303      	bcc.n	232d2 <ExtractPTATParameters+0x20>
        KvPTAT = KvPTAT - 2048;
   232ca:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
   232ce:	f7dd fc09 	bl	ae4 <__aeabi_fsub>
    KvPTAT = KvPTAT/4096;
   232d2:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
   232d6:	f7dd fd0f 	bl	cf8 <__aeabi_fmul>
   232da:	4607      	mov	r7, r0
    KtPTAT = eeData[42];
   232dc:	f8b5 4054 	ldrh.w	r4, [r5, #84]	; 0x54
   232e0:	4620      	mov	r0, r4
   232e2:	f7dd fcb1 	bl	c48 <__aeabi_ui2f>
    if(KtPTAT > 1023)
   232e6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   232ea:	d303      	bcc.n	232f4 <ExtractPTATParameters+0x42>
        KtPTAT = KtPTAT - 2048;
   232ec:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
   232f0:	f7dd fbf8 	bl	ae4 <__aeabi_fsub>
    KtPTAT = KtPTAT/8;
   232f4:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
   232f8:	f7dd fcfe 	bl	cf8 <__aeabi_fmul>
   232fc:	4680      	mov	r8, r0
    vPTAT25 = 32 * eeData[40] + eeData[41];
   232fe:	f8b5 4050 	ldrh.w	r4, [r5, #80]	; 0x50
   23302:	0164      	lsls	r4, r4, #5
   23304:	f9b5 3052 	ldrsh.w	r3, [r5, #82]	; 0x52
   23308:	fa03 f484 	sxtah	r4, r3, r4
   2330c:	b224      	sxth	r4, r4
    alphaPTAT = eeData[44] / 128.0f;
   2330e:	f8b5 0058 	ldrh.w	r0, [r5, #88]	; 0x58
   23312:	f7dd fc9d 	bl	c50 <__aeabi_i2f>
   23316:	f04f 5170 	mov.w	r1, #1006632960	; 0x3c000000
   2331a:	f7dd fced 	bl	cf8 <__aeabi_fmul>
    mlx90641->KvPTAT = KvPTAT;
   2331e:	6077      	str	r7, [r6, #4]
    mlx90641->KtPTAT = KtPTAT;    
   23320:	f8c6 8008 	str.w	r8, [r6, #8]
    mlx90641->vPTAT25 = vPTAT25;
   23324:	81b4      	strh	r4, [r6, #12]
    mlx90641->alphaPTAT = alphaPTAT;   
   23326:	6130      	str	r0, [r6, #16]
}
   23328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002332c <ExtractGainParameters>:
    gainEE = 32 * eeData[36] + eeData[37];
   2332c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   23330:	015b      	lsls	r3, r3, #5
   23332:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
   23336:	fa02 f383 	sxtah	r3, r2, r3
    mlx90641->gainEE = gainEE;    
   2333a:	828b      	strh	r3, [r1, #20]
}
   2333c:	4770      	bx	lr

0002333e <ExtractEmissivityParameters>:
{
   2333e:	b538      	push	{r3, r4, r5, lr}
   23340:	460c      	mov	r4, r1
    emissivity = eeData[35];
   23342:	f8b0 5046 	ldrh.w	r5, [r0, #70]	; 0x46
   23346:	4628      	mov	r0, r5
   23348:	f7dd fc7e 	bl	c48 <__aeabi_ui2f>
    if(emissivity > 1023)
   2334c:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   23350:	d303      	bcc.n	2335a <ExtractEmissivityParameters+0x1c>
        emissivity = emissivity - 2048;
   23352:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
   23356:	f7dd fbc5 	bl	ae4 <__aeabi_fsub>
    emissivity = emissivity/512;
   2335a:	f04f 516c 	mov.w	r1, #989855744	; 0x3b000000
   2335e:	f7dd fccb 	bl	cf8 <__aeabi_fmul>
    mlx90641->emissivityEE = emissivity;
   23362:	f8c4 0668 	str.w	r0, [r4, #1640]	; 0x668
}
   23366:	bd38      	pop	{r3, r4, r5, pc}

00023368 <ExtractResolutionParameters>:
    resolutionEE = (eeData[51] & 0x0600) >> 9;    
   23368:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
   2336c:	f3c3 2341 	ubfx	r3, r3, #9, #2
    mlx90641->resolutionEE = resolutionEE;
   23370:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
}
   23374:	4770      	bx	lr

00023376 <ExtractKsTaParameters>:
{
   23376:	b538      	push	{r3, r4, r5, lr}
   23378:	460c      	mov	r4, r1
    KsTa = eeData[34];
   2337a:	f8b0 5044 	ldrh.w	r5, [r0, #68]	; 0x44
   2337e:	4628      	mov	r0, r5
   23380:	f7dd fc62 	bl	c48 <__aeabi_ui2f>
    if(KsTa > 1023)
   23384:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
   23388:	d303      	bcc.n	23392 <ExtractKsTaParameters+0x1c>
        KsTa = KsTa - 2048;
   2338a:	f04f 418a 	mov.w	r1, #1157627904	; 0x45000000
   2338e:	f7dd fba9 	bl	ae4 <__aeabi_fsub>
    KsTa = KsTa / 32768.0f;
   23392:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   23396:	f7dd fcaf 	bl	cf8 <__aeabi_fmul>
    mlx90641->KsTa = KsTa;
   2339a:	62a0      	str	r0, [r4, #40]	; 0x28
}
   2339c:	bd38      	pop	{r3, r4, r5, pc}

0002339e <ExtractOffsetParameters>:
{
   2339e:	b4f0      	push	{r4, r5, r6, r7}
    scaleOffset = eeData[16] >> 5;
   233a0:	8c03      	ldrh	r3, [r0, #32]
   233a2:	095b      	lsrs	r3, r3, #5
    scaleOffset = 1 << scaleOffset;
   233a4:	2701      	movs	r7, #1
   233a6:	409f      	lsls	r7, r3
    offsetRef = 32 * eeData[17] + eeData[18];
   233a8:	8c46      	ldrh	r6, [r0, #34]	; 0x22
   233aa:	0176      	lsls	r6, r6, #5
   233ac:	f9b0 3024 	ldrsh.w	r3, [r0, #36]	; 0x24
   233b0:	fa03 f686 	sxtah	r6, r3, r6
   233b4:	b236      	sxth	r6, r6
    for(int i = 0; i < 192; i++)
   233b6:	2300      	movs	r3, #0
   233b8:	e007      	b.n	233ca <ExtractOffsetParameters+0x2c>
        mlx90641->offset[1][i] = tempOffset * scaleOffset + offsetRef;
   233ba:	fb0c 6202 	mla	r2, ip, r2, r6
   233be:	f503 74d6 	add.w	r4, r3, #428	; 0x1ac
   233c2:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   233c6:	80e2      	strh	r2, [r4, #6]
    for(int i = 0; i < 192; i++)
   233c8:	3301      	adds	r3, #1
   233ca:	2bbf      	cmp	r3, #191	; 0xbf
   233cc:	dc1d      	bgt.n	2340a <ExtractOffsetParameters+0x6c>
        tempOffset = eeData[64 + i];
   233ce:	f103 0240 	add.w	r2, r3, #64	; 0x40
   233d2:	f930 4012 	ldrsh.w	r4, [r0, r2, lsl #1]
        if(tempOffset > 1023)
   233d6:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
   233da:	db02      	blt.n	233e2 <ExtractOffsetParameters+0x44>
           tempOffset = eeData[64 + i] - 2048; 
   233dc:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
   233e0:	b224      	sxth	r4, r4
        mlx90641->offset[0][i] = tempOffset * scaleOffset + offsetRef;
   233e2:	fa0f fc87 	sxth.w	ip, r7
   233e6:	fb0c 6404 	mla	r4, ip, r4, r6
   233ea:	f103 05ec 	add.w	r5, r3, #236	; 0xec
   233ee:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   233f2:	80ec      	strh	r4, [r5, #6]
        tempOffset = eeData[640 + i];
   233f4:	f503 7220 	add.w	r2, r3, #640	; 0x280
   233f8:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
        if(tempOffset > 1023)
   233fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   23400:	dbdb      	blt.n	233ba <ExtractOffsetParameters+0x1c>
           tempOffset = eeData[640 + i] - 2048; 
   23402:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
   23406:	b212      	sxth	r2, r2
   23408:	e7d7      	b.n	233ba <ExtractOffsetParameters+0x1c>
}
   2340a:	bcf0      	pop	{r4, r5, r6, r7}
   2340c:	4770      	bx	lr

0002340e <ExtractDeviatingPixels>:
}

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90641 *mlx90641)
{
   2340e:	b430      	push	{r4, r5}
    uint16_t pixCnt = 0;
    uint16_t brokenPixCnt = 0;

    int warn = 0;
    
    mlx90641->brokenPixel = 0xFFFF;
   23410:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23414:	f8a1 366c 	strh.w	r3, [r1, #1644]	; 0x66c
    uint16_t brokenPixCnt = 0;
   23418:	2500      	movs	r5, #0
        
    pixCnt = 0;    
   2341a:	462b      	mov	r3, r5
    while (pixCnt < 192 && brokenPixCnt < 2)
   2341c:	e001      	b.n	23422 <ExtractDeviatingPixels+0x14>
        {
            mlx90641->brokenPixel = pixCnt;
            brokenPixCnt = brokenPixCnt + 1;
        }    
        
        pixCnt = pixCnt + 1;
   2341e:	3301      	adds	r3, #1
   23420:	b29b      	uxth	r3, r3
    while (pixCnt < 192 && brokenPixCnt < 2)
   23422:	2bbf      	cmp	r3, #191	; 0xbf
   23424:	d81e      	bhi.n	23464 <ExtractDeviatingPixels+0x56>
   23426:	2d01      	cmp	r5, #1
   23428:	d81c      	bhi.n	23464 <ExtractDeviatingPixels+0x56>
        if((eeData[pixCnt+64] == 0) && (eeData[pixCnt+256] == 0) && (eeData[pixCnt+448] == 0) && (eeData[pixCnt+640] == 0))
   2342a:	f103 0240 	add.w	r2, r3, #64	; 0x40
   2342e:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
   23432:	2a00      	cmp	r2, #0
   23434:	d1f3      	bne.n	2341e <ExtractDeviatingPixels+0x10>
   23436:	f503 7280 	add.w	r2, r3, #256	; 0x100
   2343a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
   2343e:	2a00      	cmp	r2, #0
   23440:	d1ed      	bne.n	2341e <ExtractDeviatingPixels+0x10>
   23442:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
   23446:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
   2344a:	2a00      	cmp	r2, #0
   2344c:	d1e7      	bne.n	2341e <ExtractDeviatingPixels+0x10>
   2344e:	f503 7420 	add.w	r4, r3, #640	; 0x280
   23452:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
   23456:	2a00      	cmp	r2, #0
   23458:	d1e1      	bne.n	2341e <ExtractDeviatingPixels+0x10>
            mlx90641->brokenPixel = pixCnt;
   2345a:	f8a1 366c 	strh.w	r3, [r1, #1644]	; 0x66c
            brokenPixCnt = brokenPixCnt + 1;
   2345e:	3501      	adds	r5, #1
   23460:	b2ad      	uxth	r5, r5
   23462:	e7dc      	b.n	2341e <ExtractDeviatingPixels+0x10>
    } 
    
    if(brokenPixCnt > 1)  
   23464:	2d01      	cmp	r5, #1
   23466:	d802      	bhi.n	2346e <ExtractDeviatingPixels+0x60>
    int warn = 0;
   23468:	2000      	movs	r0, #0
        warn = -3;
    }         
    
    return warn;
       
}
   2346a:	bc30      	pop	{r4, r5}
   2346c:	4770      	bx	lr
        warn = -3;
   2346e:	f06f 0002 	mvn.w	r0, #2
    return warn;
   23472:	e7fa      	b.n	2346a <ExtractDeviatingPixels+0x5c>

00023474 <CheckEEPROMValid>:
 //------------------------------------------------------------------------------
 
 int CheckEEPROMValid(uint16_t *eeData)  
 {
     int deviceSelect;
     deviceSelect = eeData[10] & 0x0040;
   23474:	8a83      	ldrh	r3, [r0, #20]
     if(deviceSelect != 0)
   23476:	f013 0f40 	tst.w	r3, #64	; 0x40
   2347a:	d001      	beq.n	23480 <CheckEEPROMValid+0xc>
     {
         return 0;
   2347c:	2000      	movs	r0, #0
     }
     
     return -7;    
   2347e:	4770      	bx	lr
     return -7;    
   23480:	f06f 0006 	mvn.w	r0, #6
   23484:	4770      	bx	lr

00023486 <MLX90641_ExtractParameters>:
{
   23486:	b538      	push	{r3, r4, r5, lr}
   23488:	4604      	mov	r4, r0
   2348a:	460d      	mov	r5, r1
    int error = CheckEEPROMValid(eeData);
   2348c:	f7ff fff2 	bl	23474 <CheckEEPROMValid>
    if(error == 0)
   23490:	b100      	cbz	r0, 23494 <MLX90641_ExtractParameters+0xe>
}
   23492:	bd38      	pop	{r3, r4, r5, pc}
        ExtractVDDParameters(eeData, mlx90641);
   23494:	4629      	mov	r1, r5
   23496:	4620      	mov	r0, r4
   23498:	f7ff fef5 	bl	23286 <ExtractVDDParameters>
        ExtractPTATParameters(eeData, mlx90641);
   2349c:	4629      	mov	r1, r5
   2349e:	4620      	mov	r0, r4
   234a0:	f7ff ff07 	bl	232b2 <ExtractPTATParameters>
        ExtractGainParameters(eeData, mlx90641);
   234a4:	4629      	mov	r1, r5
   234a6:	4620      	mov	r0, r4
   234a8:	f7ff ff40 	bl	2332c <ExtractGainParameters>
        ExtractTgcParameters(eeData, mlx90641);
   234ac:	4629      	mov	r1, r5
   234ae:	4620      	mov	r0, r4
   234b0:	f7ee fc8c 	bl	11dcc <ExtractTgcParameters>
        ExtractEmissivityParameters(eeData, mlx90641);
   234b4:	4629      	mov	r1, r5
   234b6:	4620      	mov	r0, r4
   234b8:	f7ff ff41 	bl	2333e <ExtractEmissivityParameters>
        ExtractResolutionParameters(eeData, mlx90641);
   234bc:	4629      	mov	r1, r5
   234be:	4620      	mov	r0, r4
   234c0:	f7ff ff52 	bl	23368 <ExtractResolutionParameters>
        ExtractKsTaParameters(eeData, mlx90641);
   234c4:	4629      	mov	r1, r5
   234c6:	4620      	mov	r0, r4
   234c8:	f7ff ff55 	bl	23376 <ExtractKsTaParameters>
        ExtractKsToParameters(eeData, mlx90641);
   234cc:	4629      	mov	r1, r5
   234ce:	4620      	mov	r0, r4
   234d0:	f7ee fc98 	bl	11e04 <ExtractKsToParameters>
        ExtractCPParameters(eeData, mlx90641);
   234d4:	4629      	mov	r1, r5
   234d6:	4620      	mov	r0, r4
   234d8:	f7ee fee8 	bl	122ac <ExtractCPParameters>
        ExtractAlphaParameters(eeData, mlx90641);
   234dc:	4629      	mov	r1, r5
   234de:	4620      	mov	r0, r4
   234e0:	f7ed fd9a 	bl	11018 <ExtractAlphaParameters>
        ExtractOffsetParameters(eeData, mlx90641);
   234e4:	4629      	mov	r1, r5
   234e6:	4620      	mov	r0, r4
   234e8:	f7ff ff59 	bl	2339e <ExtractOffsetParameters>
        ExtractKtaPixelParameters(eeData, mlx90641);
   234ec:	4629      	mov	r1, r5
   234ee:	4620      	mov	r0, r4
   234f0:	f7ee fd02 	bl	11ef8 <ExtractKtaPixelParameters>
        ExtractKvPixelParameters(eeData, mlx90641);        
   234f4:	4629      	mov	r1, r5
   234f6:	4620      	mov	r0, r4
   234f8:	f7ee fdea 	bl	120d0 <ExtractKvPixelParameters>
        error = ExtractDeviatingPixels(eeData, mlx90641);  
   234fc:	4629      	mov	r1, r5
   234fe:	4620      	mov	r0, r4
   23500:	f7ff ff85 	bl	2340e <ExtractDeviatingPixels>
    return error;
   23504:	e7c5      	b.n	23492 <MLX90641_ExtractParameters+0xc>

00023506 <z_log_msg2_runtime_create>:
{
   23506:	b510      	push	{r4, lr}
   23508:	b086      	sub	sp, #24
	va_start(ap, fmt);
   2350a:	ac0a      	add	r4, sp, #40	; 0x28
   2350c:	9405      	str	r4, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2350e:	9402      	str	r4, [sp, #8]
   23510:	9c09      	ldr	r4, [sp, #36]	; 0x24
   23512:	9401      	str	r4, [sp, #4]
   23514:	9c08      	ldr	r4, [sp, #32]
   23516:	9400      	str	r4, [sp, #0]
   23518:	f000 fd31 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   2351c:	b006      	add	sp, #24
   2351e:	bd10      	pop	{r4, pc}

00023520 <write_pressure_freq>:
{
   23520:	b570      	push	{r4, r5, r6, lr}
   23522:	4608      	mov	r0, r1
   23524:	4611      	mov	r1, r2
   23526:	461c      	mov	r4, r3
   23528:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	uint8_t *value = attr->user_data;
   2352c:	68c6      	ldr	r6, [r0, #12]
   2352e:	461a      	mov	r2, r3
   23530:	1970      	adds	r0, r6, r5
   23532:	f004 ffb4 	bl	2849e <memcpy>
	value[offset + len] = 0;
   23536:	4425      	add	r5, r4
   23538:	2300      	movs	r3, #0
   2353a:	5573      	strb	r3, [r6, r5]
}
   2353c:	4620      	mov	r0, r4
   2353e:	bd70      	pop	{r4, r5, r6, pc}

00023540 <read_pressure_freq>:
{
   23540:	b530      	push	{r4, r5, lr}
   23542:	b085      	sub	sp, #20
	const char *value = attr->user_data;
   23544:	68cc      	ldr	r4, [r1, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   23546:	2501      	movs	r5, #1
   23548:	9502      	str	r5, [sp, #8]
   2354a:	9401      	str	r4, [sp, #4]
   2354c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   23550:	9400      	str	r4, [sp, #0]
   23552:	f002 fd55 	bl	26000 <bt_gatt_attr_read>
}
   23556:	b005      	add	sp, #20
   23558:	bd30      	pop	{r4, r5, pc}

0002355a <read_temp_freq>:
{
   2355a:	b530      	push	{r4, r5, lr}
   2355c:	b085      	sub	sp, #20
	const char *value = attr->user_data;
   2355e:	68cc      	ldr	r4, [r1, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   23560:	2501      	movs	r5, #1
   23562:	9502      	str	r5, [sp, #8]
   23564:	9401      	str	r4, [sp, #4]
   23566:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2356a:	9400      	str	r4, [sp, #0]
   2356c:	f002 fd48 	bl	26000 <bt_gatt_attr_read>
}
   23570:	b005      	add	sp, #20
   23572:	bd30      	pop	{r4, r5, pc}

00023574 <read_battery>:
{
   23574:	b530      	push	{r4, r5, lr}
   23576:	b085      	sub	sp, #20
	const char *value = attr->user_data;
   23578:	68cc      	ldr	r4, [r1, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   2357a:	2502      	movs	r5, #2
   2357c:	9502      	str	r5, [sp, #8]
   2357e:	9401      	str	r4, [sp, #4]
   23580:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   23584:	9400      	str	r4, [sp, #0]
   23586:	f002 fd3b 	bl	26000 <bt_gatt_attr_read>
}
   2358a:	b005      	add	sp, #20
   2358c:	bd30      	pop	{r4, r5, pc}

0002358e <read_pressure>:
{
   2358e:	b530      	push	{r4, r5, lr}
   23590:	b085      	sub	sp, #20
	const char *value = attr->user_data;
   23592:	68cc      	ldr	r4, [r1, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   23594:	2502      	movs	r5, #2
   23596:	9502      	str	r5, [sp, #8]
   23598:	9401      	str	r4, [sp, #4]
   2359a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2359e:	9400      	str	r4, [sp, #0]
   235a0:	f002 fd2e 	bl	26000 <bt_gatt_attr_read>
}
   235a4:	b005      	add	sp, #20
   235a6:	bd30      	pop	{r4, r5, pc}

000235a8 <read_temp>:
{
   235a8:	b530      	push	{r4, r5, lr}
   235aa:	b085      	sub	sp, #20
	const char *value = attr->user_data;
   235ac:	68cc      	ldr	r4, [r1, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   235ae:	2518      	movs	r5, #24
   235b0:	9502      	str	r5, [sp, #8]
   235b2:	9401      	str	r4, [sp, #4]
   235b4:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   235b8:	9400      	str	r4, [sp, #0]
   235ba:	f002 fd21 	bl	26000 <bt_gatt_attr_read>
}
   235be:	b005      	add	sp, #20
   235c0:	bd30      	pop	{r4, r5, pc}

000235c2 <z_log_msg2_runtime_create>:
{
   235c2:	b510      	push	{r4, lr}
   235c4:	b086      	sub	sp, #24
	va_start(ap, fmt);
   235c6:	ac0a      	add	r4, sp, #40	; 0x28
   235c8:	9405      	str	r4, [sp, #20]
   235ca:	9402      	str	r4, [sp, #8]
   235cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   235ce:	9401      	str	r4, [sp, #4]
   235d0:	9c08      	ldr	r4, [sp, #32]
   235d2:	9400      	str	r4, [sp, #0]
   235d4:	f000 fcd3 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   235d8:	b006      	add	sp, #24
   235da:	bd10      	pop	{r4, pc}

000235dc <cbprintf_via_va_list>:
{
   235dc:	b508      	push	{r3, lr}
	return cbvprintf(out, ctx, fmt, u.ap);
   235de:	f7f0 f9ab 	bl	13938 <cbvprintf>
}
   235e2:	bd08      	pop	{r3, pc}

000235e4 <cbpprintf>:
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	char *buf = packaged, *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (!buf) {
   235e4:	b31a      	cbz	r2, 2362e <cbpprintf+0x4a>
{
   235e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   235ea:	4607      	mov	r7, r0
   235ec:	4688      	mov	r8, r1
   235ee:	4615      	mov	r5, r2
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = ((uint8_t *)buf)[0] * sizeof(int);
   235f0:	7813      	ldrb	r3, [r2, #0]
	s_nbr     = ((uint8_t *)buf)[1];
   235f2:	7856      	ldrb	r6, [r2, #1]
	ros_nbr   = ((uint8_t *)buf)[2];
   235f4:	7894      	ldrb	r4, [r2, #2]

	/* Locate the string table */
	s = buf + args_size + ros_nbr;
   235f6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   235fa:	4414      	add	r4, r2

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   235fc:	f04f 0900 	mov.w	r9, #0
   23600:	45b1      	cmp	r9, r6
   23602:	d20b      	bcs.n	2361c <cbpprintf+0x38>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
   23604:	f814 3b01 	ldrb.w	r3, [r4], #1
		ps = (char **)(buf + s_idx * sizeof(int));
		/* update the pointer with current string location */
		*ps = s;
   23608:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		/* move to next string */
		s += strlen(s) + 1;
   2360c:	4620      	mov	r0, r4
   2360e:	f7e9 f809 	bl	c624 <strlen>
   23612:	3001      	adds	r0, #1
   23614:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   23616:	f109 0901 	add.w	r9, r9, #1
   2361a:	e7f1      	b.n	23600 <cbpprintf+0x1c>

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, ctx, fmt, buf);
   2361c:	f105 0308 	add.w	r3, r5, #8
   23620:	686a      	ldr	r2, [r5, #4]
   23622:	4641      	mov	r1, r8
   23624:	4638      	mov	r0, r7
   23626:	f7ff ffd9 	bl	235dc <cbprintf_via_va_list>
}
   2362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
   2362e:	f06f 0015 	mvn.w	r0, #21
}
   23632:	4770      	bx	lr

00023634 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   23634:	4602      	mov	r2, r0
   23636:	b1b0      	cbz	r0, 23666 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23638:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2363a:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   2363e:	2b02      	cmp	r3, #2
   23640:	d00b      	beq.n	2365a <sys_notify_validate+0x26>
   23642:	2b03      	cmp	r3, #3
   23644:	d004      	beq.n	23650 <sys_notify_validate+0x1c>
   23646:	2b01      	cmp	r3, #1
   23648:	d004      	beq.n	23654 <sys_notify_validate+0x20>
   2364a:	f06f 0015 	mvn.w	r0, #21
   2364e:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   23650:	6803      	ldr	r3, [r0, #0]
   23652:	b15b      	cbz	r3, 2366c <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   23654:	2000      	movs	r0, #0
   23656:	6090      	str	r0, [r2, #8]
   23658:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2365a:	6803      	ldr	r3, [r0, #0]
   2365c:	2b00      	cmp	r3, #0
   2365e:	d1f9      	bne.n	23654 <sys_notify_validate+0x20>
			rv = -EINVAL;
   23660:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   23664:	4770      	bx	lr
		return -EINVAL;
   23666:	f06f 0015 	mvn.w	r0, #21
   2366a:	4770      	bx	lr
			rv = -EINVAL;
   2366c:	f06f 0015 	mvn.w	r0, #21
   23670:	4770      	bx	lr

00023672 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   23672:	b510      	push	{r4, lr}
   23674:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   23676:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   23678:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   2367c:	6081      	str	r1, [r0, #8]
	switch (method) {
   2367e:	2a02      	cmp	r2, #2
   23680:	d004      	beq.n	2368c <sys_notify_finalize+0x1a>
   23682:	2a03      	cmp	r2, #3
   23684:	d105      	bne.n	23692 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   23686:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   23688:	2000      	movs	r0, #0
		break;
   2368a:	e004      	b.n	23696 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   2368c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   2368e:	2400      	movs	r4, #0
		break;
   23690:	e001      	b.n	23696 <sys_notify_finalize+0x24>
	switch (method) {
   23692:	2400      	movs	r4, #0
   23694:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   23696:	2200      	movs	r2, #0
   23698:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   2369a:	b108      	cbz	r0, 236a0 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   2369c:	f7fe ff62 	bl	22564 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   236a0:	4620      	mov	r0, r4
   236a2:	bd10      	pop	{r4, pc}

000236a4 <arch_printk_char_out>:
}
   236a4:	2000      	movs	r0, #0
   236a6:	4770      	bx	lr

000236a8 <str_out>:
{
   236a8:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   236aa:	680c      	ldr	r4, [r1, #0]
   236ac:	b154      	cbz	r4, 236c4 <str_out+0x1c>
   236ae:	688a      	ldr	r2, [r1, #8]
   236b0:	684b      	ldr	r3, [r1, #4]
   236b2:	429a      	cmp	r2, r3
   236b4:	da06      	bge.n	236c4 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   236b6:	3b01      	subs	r3, #1
   236b8:	429a      	cmp	r2, r3
   236ba:	d008      	beq.n	236ce <str_out+0x26>
		ctx->str[ctx->count++] = c;
   236bc:	1c53      	adds	r3, r2, #1
   236be:	608b      	str	r3, [r1, #8]
   236c0:	54a0      	strb	r0, [r4, r2]
   236c2:	e002      	b.n	236ca <str_out+0x22>
		ctx->count++;
   236c4:	688b      	ldr	r3, [r1, #8]
   236c6:	3301      	adds	r3, #1
   236c8:	608b      	str	r3, [r1, #8]
}
   236ca:	bc10      	pop	{r4}
   236cc:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   236ce:	1c53      	adds	r3, r2, #1
   236d0:	608b      	str	r3, [r1, #8]
   236d2:	2300      	movs	r3, #0
   236d4:	54a3      	strb	r3, [r4, r2]
   236d6:	e7f8      	b.n	236ca <str_out+0x22>

000236d8 <printk>:
{
   236d8:	b40f      	push	{r0, r1, r2, r3}
   236da:	b500      	push	{lr}
   236dc:	b083      	sub	sp, #12
   236de:	a904      	add	r1, sp, #16
   236e0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   236e4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   236e6:	f7ef fdb7 	bl	13258 <vprintk>
}
   236ea:	b003      	add	sp, #12
   236ec:	f85d eb04 	ldr.w	lr, [sp], #4
   236f0:	b004      	add	sp, #16
   236f2:	4770      	bx	lr

000236f4 <snprintk>:
{
   236f4:	b40c      	push	{r2, r3}
   236f6:	b500      	push	{lr}
   236f8:	b083      	sub	sp, #12
   236fa:	ab04      	add	r3, sp, #16
   236fc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   23700:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   23702:	f7ef fdb9 	bl	13278 <vsnprintk>
}
   23706:	b003      	add	sp, #12
   23708:	f85d eb04 	ldr.w	lr, [sp], #4
   2370c:	b002      	add	sp, #8
   2370e:	4770      	bx	lr

00023710 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   23710:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   23714:	8b01      	ldrh	r1, [r0, #24]
   23716:	f021 0107 	bic.w	r1, r1, #7
   2371a:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   2371c:	8301      	strh	r1, [r0, #24]
}
   2371e:	4770      	bx	lr

00023720 <notify_monitors>:
{
   23720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23724:	4606      	mov	r6, r0
   23726:	460f      	mov	r7, r1
   23728:	4690      	mov	r8, r2
	return list->head;
   2372a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2372c:	b119      	cbz	r1, 23736 <notify_monitors+0x16>
   2372e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   23730:	b131      	cbz	r1, 23740 <notify_monitors+0x20>
	return node->next;
   23732:	680c      	ldr	r4, [r1, #0]
   23734:	e004      	b.n	23740 <notify_monitors+0x20>
   23736:	460c      	mov	r4, r1
   23738:	e002      	b.n	23740 <notify_monitors+0x20>
   2373a:	4623      	mov	r3, r4
   2373c:	4621      	mov	r1, r4
   2373e:	461c      	mov	r4, r3
   23740:	b159      	cbz	r1, 2375a <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   23742:	684d      	ldr	r5, [r1, #4]
   23744:	4643      	mov	r3, r8
   23746:	463a      	mov	r2, r7
   23748:	4630      	mov	r0, r6
   2374a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   2374c:	2c00      	cmp	r4, #0
   2374e:	d0f4      	beq.n	2373a <notify_monitors+0x1a>
   23750:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   23752:	2c00      	cmp	r4, #0
   23754:	d0f2      	beq.n	2373c <notify_monitors+0x1c>
	return node->next;
   23756:	6823      	ldr	r3, [r4, #0]
   23758:	e7f0      	b.n	2373c <notify_monitors+0x1c>
}
   2375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002375e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2375e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   23760:	f013 0307 	ands.w	r3, r3, #7
   23764:	d103      	bne.n	2376e <process_recheck+0x10>
	return list->head;
   23766:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   23768:	b10a      	cbz	r2, 2376e <process_recheck+0x10>
		evt = EVT_START;
   2376a:	2003      	movs	r0, #3
   2376c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2376e:	2b02      	cmp	r3, #2
   23770:	d003      	beq.n	2377a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   23772:	2b01      	cmp	r3, #1
   23774:	d006      	beq.n	23784 <process_recheck+0x26>
	int evt = EVT_NOP;
   23776:	2000      	movs	r0, #0
   23778:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   2377a:	8b42      	ldrh	r2, [r0, #26]
   2377c:	2a00      	cmp	r2, #0
   2377e:	d1f8      	bne.n	23772 <process_recheck+0x14>
		evt = EVT_STOP;
   23780:	2004      	movs	r0, #4
   23782:	4770      	bx	lr
   23784:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   23786:	b10b      	cbz	r3, 2378c <process_recheck+0x2e>
		evt = EVT_RESET;
   23788:	2005      	movs	r0, #5
}
   2378a:	4770      	bx	lr
	int evt = EVT_NOP;
   2378c:	2000      	movs	r0, #0
   2378e:	4770      	bx	lr

00023790 <process_complete>:
{
   23790:	b538      	push	{r3, r4, r5, lr}
   23792:	4604      	mov	r4, r0
   23794:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   23796:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   23798:	2a00      	cmp	r2, #0
   2379a:	db07      	blt.n	237ac <process_complete+0x1c>
   2379c:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   237a0:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   237a2:	2a01      	cmp	r2, #1
   237a4:	d90e      	bls.n	237c4 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   237a6:	2b04      	cmp	r3, #4
   237a8:	d032      	beq.n	23810 <process_complete+0x80>
}
   237aa:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   237ac:	e9d0 0100 	ldrd	r0, r1, [r0]
   237b0:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   237b4:	2300      	movs	r3, #0
   237b6:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   237b8:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   237ba:	2101      	movs	r1, #1
   237bc:	4620      	mov	r0, r4
   237be:	f7ff ffa7 	bl	23710 <set_state>
   237c2:	e7f2      	b.n	237aa <process_complete+0x1a>
		*clients = mgr->clients;
   237c4:	e9d0 0100 	ldrd	r0, r1, [r0]
   237c8:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   237cc:	2200      	movs	r2, #0
   237ce:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   237d0:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   237d2:	2b06      	cmp	r3, #6
   237d4:	d117      	bne.n	23806 <process_complete+0x76>
	return list->head;
   237d6:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   237d8:	b13b      	cbz	r3, 237ea <process_complete+0x5a>
				mgr->refs += 1U;
   237da:	8b62      	ldrh	r2, [r4, #26]
   237dc:	3201      	adds	r2, #1
   237de:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   237e0:	2b00      	cmp	r3, #0
   237e2:	d0f9      	beq.n	237d8 <process_complete+0x48>
	return node->next;
   237e4:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   237e6:	2b00      	cmp	r3, #0
   237e8:	d1f6      	bne.n	237d8 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   237ea:	2102      	movs	r1, #2
   237ec:	4620      	mov	r0, r4
   237ee:	f7ff ff8f 	bl	23710 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   237f2:	4620      	mov	r0, r4
   237f4:	f7ff ffb3 	bl	2375e <process_recheck>
   237f8:	2800      	cmp	r0, #0
   237fa:	d0d6      	beq.n	237aa <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   237fc:	8b23      	ldrh	r3, [r4, #24]
   237fe:	f043 0320 	orr.w	r3, r3, #32
   23802:	8323      	strh	r3, [r4, #24]
   23804:	e7d1      	b.n	237aa <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   23806:	2100      	movs	r1, #0
   23808:	4620      	mov	r0, r4
   2380a:	f7ff ff81 	bl	23710 <set_state>
   2380e:	e7f0      	b.n	237f2 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   23810:	2100      	movs	r1, #0
   23812:	f7ff ff7d 	bl	23710 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   23816:	4620      	mov	r0, r4
   23818:	f7ff ffa1 	bl	2375e <process_recheck>
   2381c:	2800      	cmp	r0, #0
   2381e:	d0c4      	beq.n	237aa <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   23820:	8b23      	ldrh	r3, [r4, #24]
   23822:	f043 0320 	orr.w	r3, r3, #32
   23826:	8323      	strh	r3, [r4, #24]
}
   23828:	e7bf      	b.n	237aa <process_complete+0x1a>

0002382a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   2382a:	b158      	cbz	r0, 23844 <validate_args+0x1a>
{
   2382c:	b510      	push	{r4, lr}
   2382e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   23830:	b159      	cbz	r1, 2384a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   23832:	1d08      	adds	r0, r1, #4
   23834:	f7ff fefe 	bl	23634 <sys_notify_validate>
	if ((rv == 0)
   23838:	b918      	cbnz	r0, 23842 <validate_args+0x18>
	    && ((cli->notify.flags
   2383a:	68a3      	ldr	r3, [r4, #8]
   2383c:	f033 0303 	bics.w	r3, r3, #3
   23840:	d106      	bne.n	23850 <validate_args+0x26>
}
   23842:	bd10      	pop	{r4, pc}
		return -EINVAL;
   23844:	f06f 0015 	mvn.w	r0, #21
}
   23848:	4770      	bx	lr
		return -EINVAL;
   2384a:	f06f 0015 	mvn.w	r0, #21
   2384e:	e7f8      	b.n	23842 <validate_args+0x18>
		rv = -EINVAL;
   23850:	f06f 0015 	mvn.w	r0, #21
   23854:	e7f5      	b.n	23842 <validate_args+0x18>

00023856 <notify_one>:
{
   23856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2385a:	4607      	mov	r7, r0
   2385c:	460c      	mov	r4, r1
   2385e:	4616      	mov	r6, r2
   23860:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   23862:	4619      	mov	r1, r3
   23864:	1d20      	adds	r0, r4, #4
   23866:	f7ff ff04 	bl	23672 <sys_notify_finalize>
	if (cb) {
   2386a:	b128      	cbz	r0, 23878 <notify_one+0x22>
   2386c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   2386e:	462b      	mov	r3, r5
   23870:	4632      	mov	r2, r6
   23872:	4621      	mov	r1, r4
   23874:	4638      	mov	r0, r7
   23876:	47c0      	blx	r8
}
   23878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002387c <notify_all>:
{
   2387c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23880:	4681      	mov	r9, r0
   23882:	460c      	mov	r4, r1
   23884:	4690      	mov	r8, r2
   23886:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   23888:	e005      	b.n	23896 <notify_all+0x1a>
	list->tail = node;
   2388a:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   2388c:	463b      	mov	r3, r7
   2388e:	4642      	mov	r2, r8
   23890:	4648      	mov	r0, r9
   23892:	f7ff ffe0 	bl	23856 <notify_one>
	return list->head;
   23896:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   23898:	b129      	cbz	r1, 238a6 <notify_all+0x2a>
	return node->next;
   2389a:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   2389c:	6025      	str	r5, [r4, #0]
	return list->tail;
   2389e:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   238a0:	428e      	cmp	r6, r1
   238a2:	d1f3      	bne.n	2388c <notify_all+0x10>
   238a4:	e7f1      	b.n	2388a <notify_all+0xe>
}
   238a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000238aa <transition_complete>:
{
   238aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   238ac:	f04f 0440 	mov.w	r4, #64	; 0x40
   238b0:	f3ef 8211 	mrs	r2, BASEPRI
   238b4:	f384 8812 	msr	BASEPRI_MAX, r4
   238b8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   238bc:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   238be:	2101      	movs	r1, #1
   238c0:	f7ef fcf0 	bl	132a4 <process_event>
}
   238c4:	bd10      	pop	{r4, pc}

000238c6 <onoff_manager_init>:
	if ((mgr == NULL)
   238c6:	4603      	mov	r3, r0
   238c8:	b168      	cbz	r0, 238e6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   238ca:	b179      	cbz	r1, 238ec <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   238cc:	680a      	ldr	r2, [r1, #0]
   238ce:	b182      	cbz	r2, 238f2 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   238d0:	684a      	ldr	r2, [r1, #4]
   238d2:	b18a      	cbz	r2, 238f8 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   238d4:	2000      	movs	r0, #0
   238d6:	6018      	str	r0, [r3, #0]
   238d8:	6058      	str	r0, [r3, #4]
   238da:	6098      	str	r0, [r3, #8]
   238dc:	60d8      	str	r0, [r3, #12]
   238de:	6158      	str	r0, [r3, #20]
   238e0:	6198      	str	r0, [r3, #24]
   238e2:	6119      	str	r1, [r3, #16]
	return 0;
   238e4:	4770      	bx	lr
		return -EINVAL;
   238e6:	f06f 0015 	mvn.w	r0, #21
   238ea:	4770      	bx	lr
   238ec:	f06f 0015 	mvn.w	r0, #21
   238f0:	4770      	bx	lr
   238f2:	f06f 0015 	mvn.w	r0, #21
   238f6:	4770      	bx	lr
   238f8:	f06f 0015 	mvn.w	r0, #21
}
   238fc:	4770      	bx	lr

000238fe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   238fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23900:	4604      	mov	r4, r0
   23902:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   23904:	f7ff ff91 	bl	2382a <validate_args>

	if (rv < 0) {
   23908:	1e06      	subs	r6, r0, #0
   2390a:	db37      	blt.n	2397c <onoff_request+0x7e>
   2390c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23910:	f3ef 8211 	mrs	r2, BASEPRI
   23914:	f383 8812 	msr	BASEPRI_MAX, r3
   23918:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2391c:	8b25      	ldrh	r5, [r4, #24]
   2391e:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   23922:	8b63      	ldrh	r3, [r4, #26]
   23924:	f64f 71ff 	movw	r1, #65535	; 0xffff
   23928:	428b      	cmp	r3, r1
   2392a:	d02f      	beq.n	2398c <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   2392c:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   2392e:	2d02      	cmp	r5, #2
   23930:	d00c      	beq.n	2394c <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   23932:	b18d      	cbz	r5, 23958 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   23934:	2d04      	cmp	r5, #4
   23936:	d00f      	beq.n	23958 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   23938:	2d06      	cmp	r5, #6
   2393a:	d00d      	beq.n	23958 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   2393c:	2d05      	cmp	r5, #5
   2393e:	d01f      	beq.n	23980 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   23940:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   23944:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   23946:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   23948:	4608      	mov	r0, r1
   2394a:	e00a      	b.n	23962 <onoff_request+0x64>
		mgr->refs += 1U;
   2394c:	3301      	adds	r3, #1
   2394e:	8363      	strh	r3, [r4, #26]
		notify = true;
   23950:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   23952:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   23954:	4618      	mov	r0, r3
   23956:	e004      	b.n	23962 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   23958:	fab5 f385 	clz	r3, r5
   2395c:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   2395e:	2100      	movs	r1, #0
		add_client = true;
   23960:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   23962:	b128      	cbz	r0, 23970 <onoff_request+0x72>
	parent->next = child;
   23964:	2000      	movs	r0, #0
   23966:	6038      	str	r0, [r7, #0]
	return list->tail;
   23968:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2396a:	b1a8      	cbz	r0, 23998 <onoff_request+0x9a>
	parent->next = child;
   2396c:	6007      	str	r7, [r0, #0]
	list->tail = node;
   2396e:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   23970:	b9ab      	cbnz	r3, 2399e <onoff_request+0xa0>
	__asm__ volatile(
   23972:	f382 8811 	msr	BASEPRI, r2
   23976:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   2397a:	b9a9      	cbnz	r1, 239a8 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   2397c:	4630      	mov	r0, r6
   2397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   23980:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   23984:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   23986:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   23988:	4608      	mov	r0, r1
   2398a:	e7ea      	b.n	23962 <onoff_request+0x64>
		rv = -EAGAIN;
   2398c:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   23990:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   23992:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   23994:	4608      	mov	r0, r1
   23996:	e7e4      	b.n	23962 <onoff_request+0x64>
   23998:	6067      	str	r7, [r4, #4]
	list->head = node;
   2399a:	6027      	str	r7, [r4, #0]
}
   2399c:	e7e8      	b.n	23970 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   2399e:	2102      	movs	r1, #2
   239a0:	4620      	mov	r0, r4
   239a2:	f7ef fc7f 	bl	132a4 <process_event>
   239a6:	e7e9      	b.n	2397c <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   239a8:	2300      	movs	r3, #0
   239aa:	462a      	mov	r2, r5
   239ac:	4639      	mov	r1, r7
   239ae:	4620      	mov	r0, r4
   239b0:	f7ff ff51 	bl	23856 <notify_one>
   239b4:	e7e2      	b.n	2397c <onoff_request+0x7e>

000239b6 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   239b6:	b508      	push	{r3, lr}
   239b8:	4604      	mov	r4, r0
   239ba:	4608      	mov	r0, r1
   239bc:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   239be:	461a      	mov	r2, r3
   239c0:	47a0      	blx	r4
	return z_impl_z_current_get();
   239c2:	f7fe f94f 	bl	21c64 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   239c6:	f7f2 fecd 	bl	16764 <z_impl_k_thread_abort>

000239ca <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   239ca:	00c9      	lsls	r1, r1, #3
   239cc:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   239ce:	4408      	add	r0, r1
   239d0:	4770      	bx	lr

000239d2 <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   239d2:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   239d6:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
   239d8:	4299      	cmp	r1, r3
   239da:	d00e      	beq.n	239fa <free_list_remove_bidx+0x28>
{
   239dc:	b410      	push	{r4}
   239de:	00cc      	lsls	r4, r1, #3
   239e0:	4404      	add	r4, r0
   239e2:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   239e4:	3204      	adds	r2, #4
   239e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   239ea:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   239ec:	3206      	adds	r2, #6
   239ee:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
   239f0:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   239f2:	3304      	adds	r3, #4
   239f4:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   239f6:	bc10      	pop	{r4}
   239f8:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
   239fa:	2301      	movs	r3, #1
   239fc:	fa03 f102 	lsl.w	r1, r3, r2
   23a00:	68c3      	ldr	r3, [r0, #12]
   23a02:	ea23 0301 	bic.w	r3, r3, r1
   23a06:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   23a08:	3204      	adds	r2, #4
   23a0a:	2300      	movs	r3, #0
   23a0c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
   23a10:	4770      	bx	lr

00023a12 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   23a12:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   23a14:	1d13      	adds	r3, r2, #4
   23a16:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23a1a:	b984      	cbnz	r4, 23a3e <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
   23a1c:	2301      	movs	r3, #1
   23a1e:	fa03 f402 	lsl.w	r4, r3, r2
   23a22:	68c3      	ldr	r3, [r0, #12]
   23a24:	4323      	orrs	r3, r4
   23a26:	60c3      	str	r3, [r0, #12]
		b->next = c;
   23a28:	3204      	adds	r2, #4
   23a2a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   23a2e:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
   23a30:	1d1a      	adds	r2, r3, #4
   23a32:	b289      	uxth	r1, r1
   23a34:	5281      	strh	r1, [r0, r2]
   23a36:	3306      	adds	r3, #6
   23a38:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
   23a3a:	bc70      	pop	{r4, r5, r6}
   23a3c:	4770      	bx	lr
	void *cmem = &buf[c];
   23a3e:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
   23a40:	3204      	adds	r2, #4
   23a42:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
   23a44:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
   23a46:	1d2e      	adds	r6, r5, #4
   23a48:	5383      	strh	r3, [r0, r6]
   23a4a:	3506      	adds	r5, #6
   23a4c:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
   23a4e:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
   23a50:	3306      	adds	r3, #6
   23a52:	b289      	uxth	r1, r1
   23a54:	52c1      	strh	r1, [r0, r3]
   23a56:	5281      	strh	r1, [r0, r2]
   23a58:	e7ef      	b.n	23a3a <free_list_add_bidx+0x28>

00023a5a <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   23a5a:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   23a5c:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
   23a5e:	3302      	adds	r3, #2
   23a60:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   23a62:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
   23a64:	1a89      	subs	r1, r1, r2
   23a66:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23a6a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23a6c:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23a6e:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
   23a70:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
   23a72:	3402      	adds	r4, #2
   23a74:	5303      	strh	r3, [r0, r4]
   23a76:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   23a7a:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   23a7e:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
   23a80:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   23a84:	bc30      	pop	{r4, r5}
   23a86:	4770      	bx	lr

00023a88 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   23a88:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   23a8a:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
   23a8c:	3102      	adds	r1, #2
   23a8e:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
   23a90:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
   23a92:	3402      	adds	r4, #2
   23a94:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   23a96:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23a98:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23a9c:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
   23a9e:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
   23aa0:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
   23aa2:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
   23aa6:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   23aaa:	bc30      	pop	{r4, r5}
   23aac:	4770      	bx	lr

00023aae <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23aae:	3904      	subs	r1, #4
   23ab0:	1a08      	subs	r0, r1, r0
}
   23ab2:	08c0      	lsrs	r0, r0, #3
   23ab4:	4770      	bx	lr

00023ab6 <free_list_remove>:
{
   23ab6:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   23ab8:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   23abc:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   23abe:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   23ac0:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   23ac4:	f1c2 021f 	rsb	r2, r2, #31
   23ac8:	f7ff ff83 	bl	239d2 <free_list_remove_bidx>
}
   23acc:	bd08      	pop	{r3, pc}

00023ace <free_list_add>:
{
   23ace:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
   23ad0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   23ad4:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   23ad6:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
   23ad8:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   23adc:	f1c2 021f 	rsb	r2, r2, #31
   23ae0:	f7ff ff97 	bl	23a12 <free_list_add_bidx>
}
   23ae4:	bd08      	pop	{r3, pc}

00023ae6 <free_chunk>:
{
   23ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23ae8:	4604      	mov	r4, r0
   23aea:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   23aec:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
   23aee:	1cb7      	adds	r7, r6, #2
   23af0:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
   23af2:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
   23af6:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
   23afa:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   23afc:	f013 0f01 	tst.w	r3, #1
   23b00:	d00c      	beq.n	23b1c <free_chunk+0x36>
   23b02:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   23b04:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
   23b06:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
   23b0a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   23b0c:	f013 0f01 	tst.w	r3, #1
   23b10:	d00e      	beq.n	23b30 <free_chunk+0x4a>
	free_list_add(h, c);
   23b12:	4629      	mov	r1, r5
   23b14:	4620      	mov	r0, r4
   23b16:	f7ff ffda 	bl	23ace <free_list_add>
}
   23b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
   23b1c:	f7ff ffcb 	bl	23ab6 <free_list_remove>
   23b20:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
   23b22:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   23b26:	4629      	mov	r1, r5
   23b28:	4620      	mov	r0, r4
   23b2a:	f7ff ffad 	bl	23a88 <merge_chunks>
   23b2e:	e7e8      	b.n	23b02 <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
   23b30:	4620      	mov	r0, r4
   23b32:	f7ff ffc0 	bl	23ab6 <free_list_remove>
   23b36:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   23b38:	462a      	mov	r2, r5
   23b3a:	1a69      	subs	r1, r5, r1
   23b3c:	4620      	mov	r0, r4
   23b3e:	f7ff ffa3 	bl	23a88 <merge_chunks>
   23b42:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   23b44:	1aed      	subs	r5, r5, r3
   23b46:	e7e4      	b.n	23b12 <free_chunk+0x2c>

00023b48 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   23b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
   23b4a:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   23b4e:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   23b52:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
   23b56:	b1b7      	cbz	r7, 23b86 <alloc_chunk+0x3e>
   23b58:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   23b5c:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
   23b5e:	1d14      	adds	r4, r2, #4
   23b60:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   23b64:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
   23b66:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
   23b6a:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
   23b6e:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
   23b72:	d912      	bls.n	23b9a <alloc_chunk+0x52>
   23b74:	4405      	add	r5, r0
   23b76:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
   23b78:	1d15      	adds	r5, r2, #4
   23b7a:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   23b7e:	3e01      	subs	r6, #1
   23b80:	d001      	beq.n	23b86 <alloc_chunk+0x3e>
   23b82:	42a7      	cmp	r7, r4
   23b84:	d1eb      	bne.n	23b5e <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23b86:	68c4      	ldr	r4, [r0, #12]
   23b88:	f1c3 0220 	rsb	r2, r3, #32
   23b8c:	2301      	movs	r3, #1
   23b8e:	4093      	lsls	r3, r2
   23b90:	425b      	negs	r3, r3

	if (bmask != 0U) {
   23b92:	401c      	ands	r4, r3
   23b94:	d105      	bne.n	23ba2 <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   23b96:	4620      	mov	r0, r4
   23b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
   23b9a:	4621      	mov	r1, r4
   23b9c:	f7ff ff19 	bl	239d2 <free_list_remove_bidx>
				return c;
   23ba0:	e7f9      	b.n	23b96 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
   23ba2:	fa94 f2a4 	rbit	r2, r4
   23ba6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23baa:	1d13      	adds	r3, r2, #4
   23bac:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   23bb0:	4621      	mov	r1, r4
   23bb2:	f7ff ff0e 	bl	239d2 <free_list_remove_bidx>
		return c;
   23bb6:	e7ee      	b.n	23b96 <alloc_chunk+0x4e>

00023bb8 <sys_heap_free>:
	if (mem == NULL) {
   23bb8:	b179      	cbz	r1, 23bda <sys_heap_free+0x22>
{
   23bba:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   23bbc:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   23bbe:	4620      	mov	r0, r4
   23bc0:	f7ff ff75 	bl	23aae <mem_to_chunkid>
   23bc4:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   23bc6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   23bca:	8853      	ldrh	r3, [r2, #2]
   23bcc:	f023 0301 	bic.w	r3, r3, #1
   23bd0:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
   23bd2:	4620      	mov	r0, r4
   23bd4:	f7ff ff87 	bl	23ae6 <free_chunk>
}
   23bd8:	bd10      	pop	{r4, pc}
   23bda:	4770      	bx	lr

00023bdc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   23bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   23bde:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   23be0:	b341      	cbz	r1, 23c34 <sys_heap_alloc+0x58>
   23be2:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   23be4:	68aa      	ldr	r2, [r5, #8]
   23be6:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   23bea:	d925      	bls.n	23c38 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23bec:	330b      	adds	r3, #11
   23bee:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   23bf0:	4621      	mov	r1, r4
   23bf2:	4628      	mov	r0, r5
   23bf4:	f7ff ffa8 	bl	23b48 <alloc_chunk>
	if (c == 0U) {
   23bf8:	4607      	mov	r7, r0
   23bfa:	b1f8      	cbz	r0, 23c3c <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
   23bfc:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
   23bfe:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
   23c02:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   23c04:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   23c08:	d309      	bcc.n	23c1e <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
   23c0a:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23c0c:	885a      	ldrh	r2, [r3, #2]
   23c0e:	f042 0201 	orr.w	r2, r2, #1
   23c12:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
   23c14:	4639      	mov	r1, r7
   23c16:	4628      	mov	r0, r5
   23c18:	f7ff fed7 	bl	239ca <chunk_mem>
}
   23c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
   23c1e:	4404      	add	r4, r0
   23c20:	4622      	mov	r2, r4
   23c22:	4601      	mov	r1, r0
   23c24:	4628      	mov	r0, r5
   23c26:	f7ff ff18 	bl	23a5a <split_chunks>
		free_list_add(h, c + chunk_sz);
   23c2a:	4621      	mov	r1, r4
   23c2c:	4628      	mov	r0, r5
   23c2e:	f7ff ff4e 	bl	23ace <free_list_add>
   23c32:	e7ea      	b.n	23c0a <sys_heap_alloc+0x2e>
		return NULL;
   23c34:	2000      	movs	r0, #0
   23c36:	e7f1      	b.n	23c1c <sys_heap_alloc+0x40>
   23c38:	2000      	movs	r0, #0
   23c3a:	e7ef      	b.n	23c1c <sys_heap_alloc+0x40>
		return NULL;
   23c3c:	2000      	movs	r0, #0
   23c3e:	e7ed      	b.n	23c1c <sys_heap_alloc+0x40>

00023c40 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c44:	460d      	mov	r5, r1
   23c46:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   23c48:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   23c4a:	424b      	negs	r3, r1
   23c4c:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   23c50:	ea31 0303 	bics.w	r3, r1, r3
   23c54:	d03e      	beq.n	23cd4 <sys_heap_aligned_alloc+0x94>
		align -= rew;
   23c56:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
   23c5a:	f1b8 0f03 	cmp.w	r8, #3
   23c5e:	d844      	bhi.n	23cea <sys_heap_aligned_alloc+0xaa>
   23c60:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   23c62:	2c00      	cmp	r4, #0
   23c64:	d057      	beq.n	23d16 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   23c66:	68b3      	ldr	r3, [r6, #8]
   23c68:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   23c6c:	d955      	bls.n	23d1a <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   23c6e:	1929      	adds	r1, r5, r4
   23c70:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23c72:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23c74:	08c9      	lsrs	r1, r1, #3
   23c76:	4630      	mov	r0, r6
   23c78:	f7ff ff66 	bl	23b48 <alloc_chunk>

	if (c0 == 0) {
   23c7c:	4607      	mov	r7, r0
   23c7e:	2800      	cmp	r0, #0
   23c80:	d04d      	beq.n	23d1e <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   23c82:	4601      	mov	r1, r0
   23c84:	4630      	mov	r0, r6
   23c86:	f7ff fea0 	bl	239ca <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   23c8a:	4440      	add	r0, r8
   23c8c:	4428      	add	r0, r5
   23c8e:	3801      	subs	r0, #1
   23c90:	426d      	negs	r5, r5
   23c92:	4005      	ands	r5, r0
   23c94:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23c98:	442c      	add	r4, r5
   23c9a:	3407      	adds	r4, #7
   23c9c:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   23ca0:	4629      	mov	r1, r5
   23ca2:	4630      	mov	r0, r6
   23ca4:	f7ff ff03 	bl	23aae <mem_to_chunkid>
   23ca8:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   23caa:	1ba4      	subs	r4, r4, r6
   23cac:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   23cae:	4287      	cmp	r7, r0
   23cb0:	d31d      	bcc.n	23cee <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
   23cb2:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
   23cb6:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
   23cba:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
   23cbc:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   23cc0:	429c      	cmp	r4, r3
   23cc2:	d31e      	bcc.n	23d02 <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
   23cc4:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23cc6:	8873      	ldrh	r3, [r6, #2]
   23cc8:	f043 0301 	orr.w	r3, r3, #1
   23ccc:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   23cce:	4628      	mov	r0, r5
   23cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
   23cd4:	2904      	cmp	r1, #4
   23cd6:	d903      	bls.n	23ce0 <sys_heap_aligned_alloc+0xa0>
		rew = 0;
   23cd8:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
   23cdc:	2204      	movs	r2, #4
   23cde:	e7c0      	b.n	23c62 <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
   23ce0:	4611      	mov	r1, r2
   23ce2:	f7ff ff7b 	bl	23bdc <sys_heap_alloc>
   23ce6:	4605      	mov	r5, r0
   23ce8:	e7f1      	b.n	23cce <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
   23cea:	2204      	movs	r2, #4
   23cec:	e7b9      	b.n	23c62 <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
   23cee:	4602      	mov	r2, r0
   23cf0:	4639      	mov	r1, r7
   23cf2:	4630      	mov	r0, r6
   23cf4:	f7ff feb1 	bl	23a5a <split_chunks>
		free_list_add(h, c0);
   23cf8:	4639      	mov	r1, r7
   23cfa:	4630      	mov	r0, r6
   23cfc:	f7ff fee7 	bl	23ace <free_list_add>
   23d00:	e7d7      	b.n	23cb2 <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
   23d02:	4622      	mov	r2, r4
   23d04:	4641      	mov	r1, r8
   23d06:	4630      	mov	r0, r6
   23d08:	f7ff fea7 	bl	23a5a <split_chunks>
		free_list_add(h, c_end);
   23d0c:	4621      	mov	r1, r4
   23d0e:	4630      	mov	r0, r6
   23d10:	f7ff fedd 	bl	23ace <free_list_add>
   23d14:	e7d6      	b.n	23cc4 <sys_heap_aligned_alloc+0x84>
		return NULL;
   23d16:	2500      	movs	r5, #0
   23d18:	e7d9      	b.n	23cce <sys_heap_aligned_alloc+0x8e>
   23d1a:	2500      	movs	r5, #0
   23d1c:	e7d7      	b.n	23cce <sys_heap_aligned_alloc+0x8e>
		return NULL;
   23d1e:	2500      	movs	r5, #0
   23d20:	e7d5      	b.n	23cce <sys_heap_aligned_alloc+0x8e>

00023d22 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   23d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d24:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   23d26:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23d28:	1dc8      	adds	r0, r1, #7
   23d2a:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23d2e:	440d      	add	r5, r1
   23d30:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   23d34:	1a2d      	subs	r5, r5, r0
   23d36:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   23d3a:	4607      	mov	r7, r0
	heap->heap = h;
   23d3c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   23d3e:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
   23d42:	2300      	movs	r3, #0
   23d44:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
   23d46:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   23d4a:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   23d4e:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
   23d52:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23d54:	f102 0c07 	add.w	ip, r2, #7
   23d58:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   23d5c:	42b3      	cmp	r3, r6
   23d5e:	da05      	bge.n	23d6c <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
   23d60:	1d1a      	adds	r2, r3, #4
   23d62:	2400      	movs	r4, #0
   23d64:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   23d68:	3301      	adds	r3, #1
   23d6a:	e7f7      	b.n	23d5c <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23d6c:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
   23d6e:	b29b      	uxth	r3, r3
   23d70:	2200      	movs	r2, #0
   23d72:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23d74:	f043 0301 	orr.w	r3, r3, #1
   23d78:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   23d7a:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23d7e:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
   23d80:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
   23d84:	1c94      	adds	r4, r2, #2
   23d86:	5306      	strh	r6, [r0, r4]
   23d88:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
   23d8a:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
   23d8e:	4405      	add	r5, r0
   23d90:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   23d92:	2301      	movs	r3, #1
   23d94:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   23d96:	f7ff fe9a 	bl	23ace <free_list_add>
}
   23d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023d9c <_ldiv5>:
{
   23d9c:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t v_lo = *v;
   23d9e:	6806      	ldr	r6, [r0, #0]
   23da0:	6845      	ldr	r5, [r0, #4]
	uint32_t v_hi = *v >> 32;
   23da2:	f04f 0c00 	mov.w	ip, #0
	__asm__ ("" : "+r" (m));
   23da6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
	result = ((uint64_t)m << 32) | m;
   23daa:	4611      	mov	r1, r2
	result += (uint64_t)v_lo * m;
   23dac:	fba6 6702 	umull	r6, r7, r6, r2
   23db0:	1871      	adds	r1, r6, r1
   23db2:	eb47 0102 	adc.w	r1, r7, r2
	result >>= 32;
   23db6:	4664      	mov	r4, ip
	result += (uint64_t)v_lo * m;
   23db8:	1871      	adds	r1, r6, r1
   23dba:	eb47 0404 	adc.w	r4, r7, r4
	result += (uint64_t)v_hi * m;
   23dbe:	fba5 2302 	umull	r2, r3, r5, r2
   23dc2:	1851      	adds	r1, r2, r1
   23dc4:	eb43 0404 	adc.w	r4, r3, r4
	result >>= 32;
   23dc8:	4665      	mov	r5, ip
	result += (uint64_t)v_hi * m;
   23dca:	1911      	adds	r1, r2, r4
   23dcc:	eb43 0505 	adc.w	r5, r3, r5
	*v = result;
   23dd0:	6001      	str	r1, [r0, #0]
   23dd2:	6045      	str	r5, [r0, #4]
}
   23dd4:	bcf0      	pop	{r4, r5, r6, r7}
   23dd6:	4770      	bx	lr

00023dd8 <_ldiv10>:
{
   23dd8:	b508      	push	{r3, lr}
	*v >>= 1;
   23dda:	6802      	ldr	r2, [r0, #0]
   23ddc:	6841      	ldr	r1, [r0, #4]
   23dde:	0852      	lsrs	r2, r2, #1
   23de0:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   23de4:	0849      	lsrs	r1, r1, #1
   23de6:	6002      	str	r2, [r0, #0]
   23de8:	6041      	str	r1, [r0, #4]
	_ldiv5(v);
   23dea:	f7ff ffd7 	bl	23d9c <_ldiv5>
}
   23dee:	bd08      	pop	{r3, pc}

00023df0 <_get_digit>:
	if (*digit_count > 0) {
   23df0:	680b      	ldr	r3, [r1, #0]
   23df2:	2b00      	cmp	r3, #0
   23df4:	dd16      	ble.n	23e24 <_get_digit+0x34>
{
   23df6:	b430      	push	{r4, r5}
   23df8:	4604      	mov	r4, r0
		--*digit_count;
   23dfa:	3b01      	subs	r3, #1
   23dfc:	600b      	str	r3, [r1, #0]
		*fr *= 10U;
   23dfe:	6801      	ldr	r1, [r0, #0]
   23e00:	6840      	ldr	r0, [r0, #4]
   23e02:	0085      	lsls	r5, r0, #2
   23e04:	008b      	lsls	r3, r1, #2
   23e06:	ea45 7291 	orr.w	r2, r5, r1, lsr #30
   23e0a:	185b      	adds	r3, r3, r1
   23e0c:	eb40 0202 	adc.w	r2, r0, r2
   23e10:	18db      	adds	r3, r3, r3
   23e12:	4152      	adcs	r2, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   23e14:	0f10      	lsrs	r0, r2, #28
   23e16:	3030      	adds	r0, #48	; 0x30
		*fr &= (BIT64(60) - 1U);
   23e18:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   23e1c:	6023      	str	r3, [r4, #0]
   23e1e:	6062      	str	r2, [r4, #4]
}
   23e20:	bc30      	pop	{r4, r5}
   23e22:	4770      	bx	lr
		rval = '0';
   23e24:	2030      	movs	r0, #48	; 0x30
}
   23e26:	4770      	bx	lr

00023e28 <outs>:
{
   23e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e2c:	4607      	mov	r7, r0
   23e2e:	460e      	mov	r6, r1
   23e30:	4614      	mov	r4, r2
   23e32:	4698      	mov	r8, r3
	size_t count = 0;
   23e34:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23e36:	e006      	b.n	23e46 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   23e38:	4631      	mov	r1, r6
   23e3a:	f814 0b01 	ldrb.w	r0, [r4], #1
   23e3e:	47b8      	blx	r7
		if (rc < 0) {
   23e40:	2800      	cmp	r0, #0
   23e42:	db09      	blt.n	23e58 <outs+0x30>
		++count;
   23e44:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23e46:	4544      	cmp	r4, r8
   23e48:	d3f6      	bcc.n	23e38 <outs+0x10>
   23e4a:	f1b8 0f00 	cmp.w	r8, #0
   23e4e:	d102      	bne.n	23e56 <outs+0x2e>
   23e50:	7823      	ldrb	r3, [r4, #0]
   23e52:	2b00      	cmp	r3, #0
   23e54:	d1f0      	bne.n	23e38 <outs+0x10>
	return (int)count;
   23e56:	4628      	mov	r0, r5
}
   23e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e5c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   23e5c:	4770      	bx	lr

00023e5e <dummy_timestamp>:
}
   23e5e:	2000      	movs	r0, #0
   23e60:	4770      	bx	lr

00023e62 <msg_filter_check>:
}
   23e62:	2001      	movs	r0, #1
   23e64:	4770      	bx	lr

00023e66 <default_get_timestamp>:
{
   23e66:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   23e68:	f002 ffcc 	bl	26e04 <sys_clock_cycle_get_32>
}
   23e6c:	bd08      	pop	{r3, pc}

00023e6e <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   23e6e:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
   23e70:	f7f0 fb32 	bl	144d8 <log_init>
	}

	return 0;
}
   23e74:	2000      	movs	r0, #0
   23e76:	bd08      	pop	{r3, pc}

00023e78 <z_log_get_tag>:
}
   23e78:	2000      	movs	r0, #0
   23e7a:	4770      	bx	lr

00023e7c <out_func>:
{
   23e7c:	b500      	push	{lr}
   23e7e:	b083      	sub	sp, #12
   23e80:	9001      	str	r0, [sp, #4]
		out_ctx->func((uint8_t *)&c, 1, out_ctx->control_block->ctx);
   23e82:	680b      	ldr	r3, [r1, #0]
   23e84:	684a      	ldr	r2, [r1, #4]
   23e86:	6852      	ldr	r2, [r2, #4]
   23e88:	2101      	movs	r1, #1
   23e8a:	a801      	add	r0, sp, #4
   23e8c:	4798      	blx	r3
}
   23e8e:	2000      	movs	r0, #0
   23e90:	b003      	add	sp, #12
   23e92:	f85d fb04 	ldr.w	pc, [sp], #4

00023e96 <cr_out_func>:
{
   23e96:	b538      	push	{r3, r4, r5, lr}
   23e98:	4604      	mov	r4, r0
   23e9a:	460d      	mov	r5, r1
	out_func(c, ctx);
   23e9c:	f7ff ffee 	bl	23e7c <out_func>
	if (c == '\n') {
   23ea0:	2c0a      	cmp	r4, #10
   23ea2:	d001      	beq.n	23ea8 <cr_out_func+0x12>
}
   23ea4:	2000      	movs	r0, #0
   23ea6:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
   23ea8:	4629      	mov	r1, r5
   23eaa:	200d      	movs	r0, #13
   23eac:	f7ff ffe6 	bl	23e7c <out_func>
   23eb0:	e7f8      	b.n	23ea4 <cr_out_func+0xe>

00023eb2 <buffer_write>:
{
   23eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23eb4:	4607      	mov	r7, r0
   23eb6:	460d      	mov	r5, r1
   23eb8:	4614      	mov	r4, r2
   23eba:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   23ebc:	4632      	mov	r2, r6
   23ebe:	4621      	mov	r1, r4
   23ec0:	4628      	mov	r0, r5
   23ec2:	47b8      	blx	r7
		buf += processed;
   23ec4:	4405      	add	r5, r0
	} while (len != 0);
   23ec6:	1a24      	subs	r4, r4, r0
   23ec8:	d1f8      	bne.n	23ebc <buffer_write+0xa>
}
   23eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023ecc <color_prefix>:
{
   23ecc:	b508      	push	{r3, lr}
   23ece:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   23ed0:	2201      	movs	r2, #1
   23ed2:	f7f0 fc2d 	bl	14730 <color_print>
}
   23ed6:	bd08      	pop	{r3, pc}

00023ed8 <color_postfix>:
{
   23ed8:	b508      	push	{r3, lr}
   23eda:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   23edc:	2200      	movs	r2, #0
   23ede:	f7f0 fc27 	bl	14730 <color_print>
}
   23ee2:	bd08      	pop	{r3, pc}

00023ee4 <postfix_print>:
{
   23ee4:	b538      	push	{r3, r4, r5, lr}
   23ee6:	4605      	mov	r5, r0
   23ee8:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   23eea:	f001 0101 	and.w	r1, r1, #1
   23eee:	f7ff fff3 	bl	23ed8 <color_postfix>
	newline_print(output, flags);
   23ef2:	4621      	mov	r1, r4
   23ef4:	4628      	mov	r0, r5
   23ef6:	f7f0 fc31 	bl	1475c <newline_print>
}
   23efa:	bd38      	pop	{r3, r4, r5, pc}

00023efc <log_msg2_hexdump>:
{
   23efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23f00:	b083      	sub	sp, #12
   23f02:	4680      	mov	r8, r0
   23f04:	460e      	mov	r6, r1
   23f06:	4615      	mov	r5, r2
   23f08:	461f      	mov	r7, r3
   23f0a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   23f0e:	462c      	mov	r4, r5
   23f10:	2d10      	cmp	r5, #16
   23f12:	bf28      	it	cs
   23f14:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
   23f16:	f8cd 9000 	str.w	r9, [sp]
   23f1a:	463b      	mov	r3, r7
   23f1c:	4622      	mov	r2, r4
   23f1e:	4631      	mov	r1, r6
   23f20:	4640      	mov	r0, r8
   23f22:	f7f0 fc2f 	bl	14784 <hexdump_line_print>
		data += length;
   23f26:	4426      	add	r6, r4
	} while (len);
   23f28:	1b2d      	subs	r5, r5, r4
   23f2a:	d1f0      	bne.n	23f0e <log_msg2_hexdump+0x12>
}
   23f2c:	b003      	add	sp, #12
   23f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00023f32 <log_output_flush>:
{
   23f32:	b510      	push	{r4, lr}
   23f34:	4604      	mov	r4, r0
		     output->control_block->offset,
   23f36:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   23f38:	6853      	ldr	r3, [r2, #4]
   23f3a:	6812      	ldr	r2, [r2, #0]
   23f3c:	6881      	ldr	r1, [r0, #8]
   23f3e:	6800      	ldr	r0, [r0, #0]
   23f40:	f7ff ffb7 	bl	23eb2 <buffer_write>
	output->control_block->offset = 0;
   23f44:	6863      	ldr	r3, [r4, #4]
   23f46:	2200      	movs	r2, #0
   23f48:	601a      	str	r2, [r3, #0]
}
   23f4a:	bd10      	pop	{r4, pc}

00023f4c <z_log_msg2_finalize>:
#include <logging/log_internal.h>
#include <logging/log_ctrl.h>

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
   23f4c:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
   23f4e:	b198      	cbz	r0, 23f78 <z_log_msg2_finalize+0x2c>
   23f50:	460e      	mov	r6, r1
   23f52:	4614      	mov	r4, r2
   23f54:	4619      	mov	r1, r3
   23f56:	4605      	mov	r5, r0
		z_log_dropped();

		return;
	}

	if (data) {
   23f58:	b143      	cbz	r3, 23f6c <z_log_msg2_finalize+0x20>
		uint8_t *d = msg->data + desc.package_len;
   23f5a:	f100 030c 	add.w	r3, r0, #12
   23f5e:	f3c2 2049 	ubfx	r0, r2, #9, #10
   23f62:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   23f66:	4418      	add	r0, r3
   23f68:	f004 fa99 	bl	2849e <memcpy>

		memcpy(d, data, desc.data_len);
	}

	msg->hdr.desc = desc;
   23f6c:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
   23f6e:	606e      	str	r6, [r5, #4]
	z_log_msg2_commit(msg);
   23f70:	4628      	mov	r0, r5
   23f72:	f7f0 fb55 	bl	14620 <z_log_msg2_commit>
}
   23f76:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped();
   23f78:	f7f0 fb34 	bl	145e4 <z_log_dropped>
		return;
   23f7c:	e7fb      	b.n	23f76 <z_log_msg2_finalize+0x2a>

00023f7e <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
   23f7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f82:	b085      	sub	sp, #20
   23f84:	af02      	add	r7, sp, #8
   23f86:	4682      	mov	sl, r0
   23f88:	460e      	mov	r6, r1
   23f8a:	4691      	mov	r9, r2
   23f8c:	4698      	mov	r8, r3
   23f8e:	f8d7 b030 	ldr.w	fp, [r7, #48]	; 0x30
   23f92:	6b7d      	ldr	r5, [r7, #52]	; 0x34
	int plen;

	if (fmt) {
   23f94:	b3c5      	cbz	r5, 24008 <z_impl_z_log_msg2_runtime_vcreate+0x8a>
		va_list ap2;

		va_copy(ap2, ap);
   23f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23f98:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
   23f9a:	9300      	str	r3, [sp, #0]
   23f9c:	462b      	mov	r3, r5
   23f9e:	2200      	movs	r2, #0
   23fa0:	210c      	movs	r1, #12
   23fa2:	4610      	mov	r0, r2
   23fa4:	f7ee ff02 	bl	12dac <cbvprintf_package>
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   23fa8:	4601      	mov	r1, r0
   23faa:	eb00 030b 	add.w	r3, r0, fp
   23fae:	3313      	adds	r3, #19
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
   23fb0:	2400      	movs	r4, #0
   23fb2:	f36f 0400 	bfc	r4, #0, #1
   23fb6:	f36f 0441 	bfc	r4, #1, #1
   23fba:	f36f 0482 	bfc	r4, #2, #1
   23fbe:	f36a 04c5 	bfi	r4, sl, #3, #3
   23fc2:	f369 1488 	bfi	r4, r9, #6, #3
   23fc6:	f360 2452 	bfi	r4, r0, #9, #10
   23fca:	f36b 44de 	bfi	r4, fp, #19, #12
   23fce:	f36f 74df 	bfc	r4, #31, #1
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG2_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
   23fd2:	f023 0307 	bic.w	r3, r3, #7
   23fd6:	ebad 0d03 	sub.w	sp, sp, r3
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
	}

	if (msg && fmt) {
   23fda:	466b      	mov	r3, sp
   23fdc:	f113 0908 	adds.w	r9, r3, #8
   23fe0:	d008      	beq.n	23ff4 <z_impl_z_log_msg2_runtime_vcreate+0x76>
   23fe2:	b13d      	cbz	r5, 23ff4 <z_impl_z_log_msg2_runtime_vcreate+0x76>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
   23fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23fe6:	9300      	str	r3, [sp, #0]
   23fe8:	462b      	mov	r3, r5
   23fea:	2200      	movs	r2, #0
   23fec:	f109 000c 	add.w	r0, r9, #12
   23ff0:	f7ee fedc 	bl	12dac <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
   23ff4:	4643      	mov	r3, r8
   23ff6:	4622      	mov	r2, r4
   23ff8:	4631      	mov	r1, r6
   23ffa:	4648      	mov	r0, r9
   23ffc:	f7ff ffa6 	bl	23f4c <z_log_msg2_finalize>
}
   24000:	370c      	adds	r7, #12
   24002:	46bd      	mov	sp, r7
   24004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   24008:	2000      	movs	r0, #0
   2400a:	e7cd      	b.n	23fa8 <z_impl_z_log_msg2_runtime_vcreate+0x2a>

0002400c <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2400c:	2200      	movs	r2, #0
   2400e:	6002      	str	r2, [r0, #0]
   24010:	6042      	str	r2, [r0, #4]
   24012:	6082      	str	r2, [r0, #8]
}
   24014:	4770      	bx	lr

00024016 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   24016:	428b      	cmp	r3, r1
   24018:	d808      	bhi.n	2402c <_copy+0x16>
{
   2401a:	b538      	push	{r3, r4, r5, lr}
   2401c:	4615      	mov	r5, r2
   2401e:	461c      	mov	r4, r3
   24020:	461a      	mov	r2, r3
   24022:	4629      	mov	r1, r5
   24024:	f004 fa3b 	bl	2849e <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
   24028:	4620      	mov	r0, r4
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2402a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2402c:	2000      	movs	r0, #0
}
   2402e:	4770      	bx	lr

00024030 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   24030:	b508      	push	{r3, lr}
__ssp_bos_icheck3(memset, void *, int)
   24032:	f004 fa55 	bl	284e0 <memset>
	(void)memset(to, val, len);
}
   24036:	bd08      	pop	{r3, pc}

00024038 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   24038:	09c3      	lsrs	r3, r0, #7
   2403a:	005a      	lsls	r2, r3, #1
   2403c:	4413      	add	r3, r2
   2403e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   24042:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   24046:	b2c0      	uxtb	r0, r0
   24048:	4770      	bx	lr

0002404a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2404a:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   2404c:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2404e:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   24052:	2a00      	cmp	r2, #0
   24054:	db03      	blt.n	2405e <gf_double+0x14>
   24056:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   24058:	f100 020f 	add.w	r2, r0, #15
   2405c:	e004      	b.n	24068 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2405e:	2487      	movs	r4, #135	; 0x87
   24060:	e7fa      	b.n	24058 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   24062:	f813 0901 	ldrb.w	r0, [r3], #-1
   24066:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   24068:	7818      	ldrb	r0, [r3, #0]
   2406a:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   2406e:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   24072:	428b      	cmp	r3, r1
   24074:	d1f5      	bne.n	24062 <gf_double+0x18>
	}
}
   24076:	bc10      	pop	{r4}
   24078:	4770      	bx	lr

0002407a <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   2407a:	b130      	cbz	r0, 2408a <tc_cmac_erase+0x10>
{
   2407c:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2407e:	2258      	movs	r2, #88	; 0x58
   24080:	2100      	movs	r1, #0
   24082:	f7ff ffd5 	bl	24030 <_set>

	return TC_CRYPTO_SUCCESS;
   24086:	2001      	movs	r0, #1
}
   24088:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   2408a:	2000      	movs	r0, #0
}
   2408c:	4770      	bx	lr

0002408e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2408e:	b1a0      	cbz	r0, 240ba <tc_cmac_init+0x2c>
{
   24090:	b510      	push	{r4, lr}
   24092:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24094:	2210      	movs	r2, #16
   24096:	2100      	movs	r1, #0
   24098:	f7ff ffca 	bl	24030 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2409c:	2210      	movs	r2, #16
   2409e:	2100      	movs	r1, #0
   240a0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   240a4:	f7ff ffc4 	bl	24030 <_set>
	s->leftover_offset = 0;
   240a8:	2300      	movs	r3, #0
   240aa:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   240ac:	2200      	movs	r2, #0
   240ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   240b2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   240b6:	2001      	movs	r0, #1
}
   240b8:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   240ba:	2000      	movs	r0, #0
}
   240bc:	4770      	bx	lr

000240be <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   240be:	b338      	cbz	r0, 24110 <tc_cmac_setup+0x52>
{
   240c0:	b570      	push	{r4, r5, r6, lr}
   240c2:	460d      	mov	r5, r1
   240c4:	4616      	mov	r6, r2
   240c6:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   240c8:	b321      	cbz	r1, 24114 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   240ca:	2258      	movs	r2, #88	; 0x58
   240cc:	2100      	movs	r1, #0
   240ce:	f7ff ffaf 	bl	24030 <_set>
	s->sched = sched;
   240d2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   240d4:	4629      	mov	r1, r5
   240d6:	4630      	mov	r0, r6
   240d8:	f7f0 fe54 	bl	14d84 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   240dc:	2210      	movs	r2, #16
   240de:	2100      	movs	r1, #0
   240e0:	4620      	mov	r0, r4
   240e2:	f7ff ffa5 	bl	24030 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   240e6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   240e8:	4621      	mov	r1, r4
   240ea:	4620      	mov	r0, r4
   240ec:	f7f0 fea8 	bl	14e40 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   240f0:	f104 0510 	add.w	r5, r4, #16
   240f4:	4621      	mov	r1, r4
   240f6:	4628      	mov	r0, r5
   240f8:	f7ff ffa7 	bl	2404a <gf_double>
	gf_double (s->K2, s->K1);
   240fc:	4629      	mov	r1, r5
   240fe:	f104 0020 	add.w	r0, r4, #32
   24102:	f7ff ffa2 	bl	2404a <gf_double>
	tc_cmac_init(s);
   24106:	4620      	mov	r0, r4
   24108:	f7ff ffc1 	bl	2408e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2410c:	2001      	movs	r0, #1
}
   2410e:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24110:	2000      	movs	r0, #0
}
   24112:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   24114:	2000      	movs	r0, #0
   24116:	e7fa      	b.n	2410e <tc_cmac_setup+0x50>

00024118 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24118:	2800      	cmp	r0, #0
   2411a:	d062      	beq.n	241e2 <tc_cmac_update+0xca>
{
   2411c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24120:	460e      	mov	r6, r1
   24122:	4617      	mov	r7, r2
   24124:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24126:	2a00      	cmp	r2, #0
   24128:	d05d      	beq.n	241e6 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   2412a:	2900      	cmp	r1, #0
   2412c:	d05e      	beq.n	241ec <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   2412e:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   24132:	ea50 0301 	orrs.w	r3, r0, r1
   24136:	d05b      	beq.n	241f0 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   24138:	f110 32ff 	adds.w	r2, r0, #4294967295
   2413c:	f141 33ff 	adc.w	r3, r1, #4294967295
   24140:	6522      	str	r2, [r4, #80]	; 0x50
   24142:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   24144:	6c65      	ldr	r5, [r4, #68]	; 0x44
   24146:	b3a5      	cbz	r5, 241b2 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24148:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   2414c:	4547      	cmp	r7, r8
   2414e:	d30d      	bcc.n	2416c <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   24150:	f105 0030 	add.w	r0, r5, #48	; 0x30
   24154:	4643      	mov	r3, r8
   24156:	4632      	mov	r2, r6
   24158:	4641      	mov	r1, r8
   2415a:	4420      	add	r0, r4
   2415c:	f7ff ff5b 	bl	24016 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   24160:	3d10      	subs	r5, #16
   24162:	442f      	add	r7, r5
		data += remaining_space;
   24164:	4446      	add	r6, r8
		s->leftover_offset = 0;
   24166:	2300      	movs	r3, #0
   24168:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2416a:	e013      	b.n	24194 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2416c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   24170:	463b      	mov	r3, r7
   24172:	4632      	mov	r2, r6
   24174:	4639      	mov	r1, r7
   24176:	4420      	add	r0, r4
   24178:	f7ff ff4d 	bl	24016 <_copy>
			s->leftover_offset += data_length;
   2417c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2417e:	443b      	add	r3, r7
   24180:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24182:	2001      	movs	r0, #1
   24184:	e030      	b.n	241e8 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   24186:	18e2      	adds	r2, r4, r3
   24188:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   2418c:	5ce1      	ldrb	r1, [r4, r3]
   2418e:	404a      	eors	r2, r1
   24190:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24192:	3301      	adds	r3, #1
   24194:	2b0f      	cmp	r3, #15
   24196:	d9f6      	bls.n	24186 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24198:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2419a:	4621      	mov	r1, r4
   2419c:	4620      	mov	r0, r4
   2419e:	f7f0 fe4f 	bl	14e40 <tc_aes_encrypt>
   241a2:	e006      	b.n	241b2 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   241a4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   241a6:	4621      	mov	r1, r4
   241a8:	4620      	mov	r0, r4
   241aa:	f7f0 fe49 	bl	14e40 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   241ae:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   241b0:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   241b2:	2f10      	cmp	r7, #16
   241b4:	d908      	bls.n	241c8 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   241b6:	2300      	movs	r3, #0
   241b8:	2b0f      	cmp	r3, #15
   241ba:	d8f3      	bhi.n	241a4 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   241bc:	5cf0      	ldrb	r0, [r6, r3]
   241be:	5ce5      	ldrb	r5, [r4, r3]
   241c0:	4068      	eors	r0, r5
   241c2:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   241c4:	3301      	adds	r3, #1
   241c6:	e7f7      	b.n	241b8 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   241c8:	b90f      	cbnz	r7, 241ce <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   241ca:	2001      	movs	r0, #1
   241cc:	e00c      	b.n	241e8 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   241ce:	463b      	mov	r3, r7
   241d0:	4632      	mov	r2, r6
   241d2:	4639      	mov	r1, r7
   241d4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   241d8:	f7ff ff1d 	bl	24016 <_copy>
		s->leftover_offset = data_length;
   241dc:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   241de:	2001      	movs	r0, #1
   241e0:	e002      	b.n	241e8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   241e2:	2000      	movs	r0, #0
}
   241e4:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   241e6:	2001      	movs	r0, #1
}
   241e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   241ec:	2000      	movs	r0, #0
   241ee:	e7fb      	b.n	241e8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   241f0:	2000      	movs	r0, #0
   241f2:	e7f9      	b.n	241e8 <tc_cmac_update+0xd0>

000241f4 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   241f4:	b370      	cbz	r0, 24254 <tc_cmac_final+0x60>
{
   241f6:	b538      	push	{r3, r4, r5, lr}
   241f8:	460c      	mov	r4, r1
   241fa:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   241fc:	b361      	cbz	r1, 24258 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   241fe:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24200:	2a10      	cmp	r2, #16
   24202:	d10d      	bne.n	24220 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24204:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24206:	2300      	movs	r3, #0
   24208:	2b0f      	cmp	r3, #15
   2420a:	d819      	bhi.n	24240 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2420c:	18e2      	adds	r2, r4, r3
   2420e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   24212:	5cc8      	ldrb	r0, [r1, r3]
   24214:	4050      	eors	r0, r2
   24216:	5ce2      	ldrb	r2, [r4, r3]
   24218:	4042      	eors	r2, r0
   2421a:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2421c:	3301      	adds	r3, #1
   2421e:	e7f3      	b.n	24208 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24220:	f102 0030 	add.w	r0, r2, #48	; 0x30
   24224:	f1c2 0210 	rsb	r2, r2, #16
   24228:	2100      	movs	r1, #0
   2422a:	4420      	add	r0, r4
   2422c:	f7ff ff00 	bl	24030 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24230:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24232:	4423      	add	r3, r4
   24234:	2280      	movs	r2, #128	; 0x80
   24236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2423a:	f104 0120 	add.w	r1, r4, #32
   2423e:	e7e2      	b.n	24206 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24240:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24242:	4621      	mov	r1, r4
   24244:	4628      	mov	r0, r5
   24246:	f7f0 fdfb 	bl	14e40 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2424a:	4620      	mov	r0, r4
   2424c:	f7ff ff15 	bl	2407a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24250:	2001      	movs	r0, #1
}
   24252:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   24254:	2000      	movs	r0, #0
}
   24256:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   24258:	2000      	movs	r0, #0
   2425a:	e7fa      	b.n	24252 <tc_cmac_final+0x5e>

0002425c <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2425c:	b538      	push	{r3, r4, r5, lr}
   2425e:	4604      	mov	r4, r0

	if (esf != NULL) {
   24260:	460d      	mov	r5, r1
   24262:	b111      	cbz	r1, 2426a <z_arm_fatal_error+0xe>
		esf_dump(esf);
   24264:	4608      	mov	r0, r1
   24266:	f7f1 f9af 	bl	155c8 <esf_dump>
	}
	z_fatal_error(reason, esf);
   2426a:	4629      	mov	r1, r5
   2426c:	4620      	mov	r0, r4
   2426e:	f7fc fb49 	bl	20904 <z_fatal_error>
}
   24272:	bd38      	pop	{r3, r4, r5, pc}

00024274 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24274:	b508      	push	{r3, lr}
   24276:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24278:	6800      	ldr	r0, [r0, #0]
   2427a:	f7ff ffef 	bl	2425c <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   2427e:	bd08      	pop	{r3, pc}

00024280 <z_irq_spurious>:
{
   24280:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24282:	2100      	movs	r1, #0
   24284:	2001      	movs	r0, #1
   24286:	f7ff ffe9 	bl	2425c <z_arm_fatal_error>
}
   2428a:	bd08      	pop	{r3, pc}

0002428c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2428c:	b508      	push	{r3, lr}
	handler();
   2428e:	f7f1 fae3 	bl	15858 <z_SysNmiOnReset>
	z_arm_int_exit();
   24292:	f7f1 fbdf 	bl	15a54 <z_arm_exc_exit>
}
   24296:	bd08      	pop	{r3, pc}

00024298 <memory_fault_recoverable>:
}
   24298:	2000      	movs	r0, #0
   2429a:	4770      	bx	lr

0002429c <z_log_msg2_runtime_create>:
{
   2429c:	b510      	push	{r4, lr}
   2429e:	b086      	sub	sp, #24
	va_start(ap, fmt);
   242a0:	ac0a      	add	r4, sp, #40	; 0x28
   242a2:	9405      	str	r4, [sp, #20]
   242a4:	9402      	str	r4, [sp, #8]
   242a6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   242a8:	9401      	str	r4, [sp, #4]
   242aa:	9c08      	ldr	r4, [sp, #32]
   242ac:	9400      	str	r4, [sp, #0]
   242ae:	f7ff fe66 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   242b2:	b006      	add	sp, #24
   242b4:	bd10      	pop	{r4, pc}

000242b6 <fault_handle>:
{
   242b6:	b508      	push	{r3, lr}
	*recoverable = false;
   242b8:	2300      	movs	r3, #0
   242ba:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   242bc:	1ecb      	subs	r3, r1, #3
   242be:	2b09      	cmp	r3, #9
   242c0:	d81a      	bhi.n	242f8 <fault_handle+0x42>
   242c2:	e8df f003 	tbb	[pc, r3]
   242c6:	0905      	.short	0x0905
   242c8:	1919110d 	.word	0x1919110d
   242cc:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   242d0:	4611      	mov	r1, r2
   242d2:	f7f2 f839 	bl	16348 <hard_fault>
}
   242d6:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   242d8:	2100      	movs	r1, #0
   242da:	f7f1 fec7 	bl	1606c <mem_manage_fault>
		break;
   242de:	e7fa      	b.n	242d6 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   242e0:	2100      	movs	r1, #0
   242e2:	f7f1 fbc5 	bl	15a70 <bus_fault>
		break;
   242e6:	e7f6      	b.n	242d6 <fault_handle+0x20>
		reason = usage_fault(esf);
   242e8:	f7f1 fd38 	bl	15d5c <usage_fault>
		break;
   242ec:	e7f3      	b.n	242d6 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   242ee:	4611      	mov	r1, r2
   242f0:	f7f1 fe70 	bl	15fd4 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   242f4:	2000      	movs	r0, #0
		break;
   242f6:	e7ee      	b.n	242d6 <fault_handle+0x20>
		reserved_exception(esf, fault);
   242f8:	f7f1 fe9a 	bl	16030 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   242fc:	2000      	movs	r0, #0
	return reason;
   242fe:	e7ea      	b.n	242d6 <fault_handle+0x20>

00024300 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   24300:	6843      	ldr	r3, [r0, #4]
   24302:	1e5a      	subs	r2, r3, #1
		&&
   24304:	4213      	tst	r3, r2
   24306:	d106      	bne.n	24316 <mpu_partition_is_valid+0x16>
		&&
   24308:	2b1f      	cmp	r3, #31
   2430a:	d906      	bls.n	2431a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   2430c:	6803      	ldr	r3, [r0, #0]
		&&
   2430e:	421a      	tst	r2, r3
   24310:	d005      	beq.n	2431e <mpu_partition_is_valid+0x1e>
   24312:	2000      	movs	r0, #0
   24314:	4770      	bx	lr
   24316:	2000      	movs	r0, #0
   24318:	4770      	bx	lr
   2431a:	2000      	movs	r0, #0
   2431c:	4770      	bx	lr
   2431e:	2001      	movs	r0, #1
}
   24320:	4770      	bx	lr

00024322 <mpu_configure_region>:
{
   24322:	b500      	push	{lr}
   24324:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   24326:	680b      	ldr	r3, [r1, #0]
   24328:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   2432a:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   2432c:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   2432e:	2b20      	cmp	r3, #32
   24330:	d912      	bls.n	24358 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   24332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   24336:	d811      	bhi.n	2435c <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   24338:	3b01      	subs	r3, #1
   2433a:	fab3 f383 	clz	r3, r3
   2433e:	f1c3 031f 	rsb	r3, r3, #31
   24342:	005b      	lsls	r3, r3, #1
   24344:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   24348:	4313      	orrs	r3, r2
   2434a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   2434c:	a901      	add	r1, sp, #4
   2434e:	f7f2 fa4f 	bl	167f0 <region_allocate_and_init>
}
   24352:	b005      	add	sp, #20
   24354:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   24358:	2308      	movs	r3, #8
   2435a:	e7f5      	b.n	24348 <mpu_configure_region+0x26>
		return REGION_4G;
   2435c:	233e      	movs	r3, #62	; 0x3e
   2435e:	e7f3      	b.n	24348 <mpu_configure_region+0x26>

00024360 <arm_core_mpu_configure_static_mpu_regions>:
{
   24360:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   24362:	f7f2 facd 	bl	16900 <mpu_configure_static_mpu_regions>
}
   24366:	bd08      	pop	{r3, pc}

00024368 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   24368:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   2436a:	f7f2 fad3 	bl	16914 <mpu_configure_dynamic_mpu_regions>
}
   2436e:	bd08      	pop	{r3, pc}

00024370 <malloc_prepare>:
}
   24370:	2000      	movs	r0, #0
   24372:	4770      	bx	lr

00024374 <_stdout_hook_default>:
}
   24374:	f04f 30ff 	mov.w	r0, #4294967295
   24378:	4770      	bx	lr

0002437a <_write>:
{
   2437a:	b508      	push	{r3, lr}
   2437c:	4608      	mov	r0, r1
   2437e:	4611      	mov	r1, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
   24380:	f7f2 fb1a 	bl	169b8 <z_impl_zephyr_write_stdout>
}
   24384:	bd08      	pop	{r3, pc}

00024386 <__errno>:
{
   24386:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24388:	f7fc fa56 	bl	20838 <z_impl_z_errno>
}
   2438c:	bd08      	pop	{r3, pc}

0002438e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2438e:	b084      	sub	sp, #16
   24390:	ab04      	add	r3, sp, #16
   24392:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   24396:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2439a:	2b06      	cmp	r3, #6
   2439c:	d001      	beq.n	243a2 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2439e:	b004      	add	sp, #16
   243a0:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   243a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   243a6:	2201      	movs	r2, #1
   243a8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   243ac:	f3bf 8f4f 	dsb	sy
        __WFE();
   243b0:	bf20      	wfe
    while (true)
   243b2:	e7fd      	b.n	243b0 <pm_power_state_set+0x22>

000243b4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   243b4:	b084      	sub	sp, #16
   243b6:	ab04      	add	r3, sp, #16
   243b8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   243bc:	2300      	movs	r3, #0
   243be:	f383 8811 	msr	BASEPRI, r3
   243c2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   243c6:	b004      	add	sp, #16
   243c8:	4770      	bx	lr

000243ca <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   243ca:	b510      	push	{r4, lr}
   243cc:	b08a      	sub	sp, #40	; 0x28
   243ce:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   243d0:	a905      	add	r1, sp, #20
   243d2:	f7f2 fbb9 	bl	16b48 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   243d6:	4669      	mov	r1, sp
   243d8:	4620      	mov	r0, r4
   243da:	f7f2 fbb5 	bl	16b48 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   243de:	2210      	movs	r2, #16
   243e0:	f10d 0101 	add.w	r1, sp, #1
   243e4:	f10d 0015 	add.w	r0, sp, #21
   243e8:	f004 f84b 	bl	28482 <memcmp>
}
   243ec:	b00a      	add	sp, #40	; 0x28
   243ee:	bd10      	pop	{r4, pc}

000243f0 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   243f0:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   243f2:	7803      	ldrb	r3, [r0, #0]
   243f4:	780a      	ldrb	r2, [r1, #0]
   243f6:	4293      	cmp	r3, r2
   243f8:	d107      	bne.n	2440a <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   243fa:	2b01      	cmp	r3, #1
   243fc:	d00c      	beq.n	24418 <bt_uuid_cmp+0x28>
   243fe:	2b02      	cmp	r3, #2
   24400:	d00e      	beq.n	24420 <bt_uuid_cmp+0x30>
   24402:	b12b      	cbz	r3, 24410 <bt_uuid_cmp+0x20>
   24404:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24408:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   2440a:	f7ff ffde 	bl	243ca <uuid128_cmp>
   2440e:	e7fb      	b.n	24408 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24410:	8840      	ldrh	r0, [r0, #2]
   24412:	884b      	ldrh	r3, [r1, #2]
   24414:	1ac0      	subs	r0, r0, r3
   24416:	e7f7      	b.n	24408 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24418:	6840      	ldr	r0, [r0, #4]
   2441a:	684b      	ldr	r3, [r1, #4]
   2441c:	1ac0      	subs	r0, r0, r3
   2441e:	e7f3      	b.n	24408 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24420:	2210      	movs	r2, #16
   24422:	3101      	adds	r1, #1
   24424:	3001      	adds	r0, #1
   24426:	f004 f82c 	bl	28482 <memcmp>
   2442a:	e7ed      	b.n	24408 <bt_uuid_cmp+0x18>

0002442c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   2442c:	b470      	push	{r4, r5, r6}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   2442e:	2a04      	cmp	r2, #4
   24430:	d00f      	beq.n	24452 <bt_uuid_create+0x26>
   24432:	2a10      	cmp	r2, #16
   24434:	d01c      	beq.n	24470 <bt_uuid_create+0x44>
   24436:	2a02      	cmp	r2, #2
   24438:	d002      	beq.n	24440 <bt_uuid_create+0x14>
   2443a:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   2443c:	bc70      	pop	{r4, r5, r6}
   2443e:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_16;
   24440:	2300      	movs	r3, #0
   24442:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   24444:	784a      	ldrb	r2, [r1, #1]
   24446:	780b      	ldrb	r3, [r1, #0]
   24448:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2444c:	8043      	strh	r3, [r0, #2]
	return true;
   2444e:	2001      	movs	r0, #1
		break;
   24450:	e7f4      	b.n	2443c <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   24452:	2301      	movs	r3, #1
   24454:	7003      	strb	r3, [r0, #0]
   24456:	78cc      	ldrb	r4, [r1, #3]
   24458:	788a      	ldrb	r2, [r1, #2]
   2445a:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   2445e:	784d      	ldrb	r5, [r1, #1]
   24460:	780a      	ldrb	r2, [r1, #0]
   24462:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24466:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2446a:	6042      	str	r2, [r0, #4]
	return true;
   2446c:	4618      	mov	r0, r3
		break;
   2446e:	e7e5      	b.n	2443c <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   24470:	4603      	mov	r3, r0
   24472:	2202      	movs	r2, #2
   24474:	f803 2b01 	strb.w	r2, [r3], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24478:	680e      	ldr	r6, [r1, #0]
   2447a:	684d      	ldr	r5, [r1, #4]
   2447c:	688c      	ldr	r4, [r1, #8]
   2447e:	68ca      	ldr	r2, [r1, #12]
   24480:	f8c0 6001 	str.w	r6, [r0, #1]
   24484:	605d      	str	r5, [r3, #4]
   24486:	609c      	str	r4, [r3, #8]
   24488:	60da      	str	r2, [r3, #12]
	return true;
   2448a:	2001      	movs	r0, #1
   2448c:	e7d6      	b.n	2443c <bt_uuid_create+0x10>

0002448e <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2448e:	b510      	push	{r4, lr}
   24490:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24492:	2301      	movs	r3, #1
   24494:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24498:	2106      	movs	r1, #6
   2449a:	f7fa ffab 	bl	1f3f4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2449e:	b918      	cbnz	r0, 244a8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   244a0:	79a3      	ldrb	r3, [r4, #6]
   244a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   244a6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   244a8:	bd10      	pop	{r4, pc}

000244aa <z_log_msg2_runtime_create>:
{
   244aa:	b510      	push	{r4, lr}
   244ac:	b086      	sub	sp, #24
	va_start(ap, fmt);
   244ae:	ac0a      	add	r4, sp, #40	; 0x28
   244b0:	9405      	str	r4, [sp, #20]
   244b2:	9402      	str	r4, [sp, #8]
   244b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   244b6:	9401      	str	r4, [sp, #4]
   244b8:	9c08      	ldr	r4, [sp, #32]
   244ba:	9400      	str	r4, [sp, #0]
   244bc:	f7ff fd5f 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   244c0:	b006      	add	sp, #24
   244c2:	bd10      	pop	{r4, pc}

000244c4 <hci_disconn_complete_prio>:
{
   244c4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   244c6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   244c8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   244cc:	781b      	ldrb	r3, [r3, #0]
   244ce:	b103      	cbz	r3, 244d2 <hci_disconn_complete_prio+0xe>
}
   244d0:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   244d2:	4620      	mov	r0, r4
   244d4:	f7f6 f90a 	bl	1a6ec <bt_conn_lookup_handle>
	if (!conn) {
   244d8:	4605      	mov	r5, r0
   244da:	b130      	cbz	r0, 244ea <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   244dc:	2101      	movs	r1, #1
   244de:	f7f6 f90f 	bl	1a700 <bt_conn_set_state>
	bt_conn_unref(conn);
   244e2:	4628      	mov	r0, r5
   244e4:	f000 fc1d 	bl	24d22 <bt_conn_unref>
   244e8:	e7f2      	b.n	244d0 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   244ea:	4620      	mov	r0, r4
   244ec:	f7f2 fbc0 	bl	16c70 <conn_handle_disconnected>
		return;
   244f0:	e7ee      	b.n	244d0 <hci_disconn_complete_prio+0xc>

000244f2 <set_event_mask>:
{
   244f2:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   244f4:	2108      	movs	r1, #8
   244f6:	f640 4001 	movw	r0, #3073	; 0xc01
   244fa:	f7f3 fb85 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   244fe:	b1b8      	cbz	r0, 24530 <set_event_mask+0x3e>
   24500:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   24502:	2108      	movs	r1, #8
   24504:	4408      	add	r0, r1
   24506:	f002 f88b 	bl	26620 <net_buf_simple_add>
	dst[0] = val;
   2450a:	2310      	movs	r3, #16
   2450c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   2450e:	2388      	movs	r3, #136	; 0x88
   24510:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   24512:	2200      	movs	r2, #0
   24514:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   24516:	2302      	movs	r3, #2
   24518:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   2451a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   2451c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   2451e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   24520:	2320      	movs	r3, #32
   24522:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   24524:	4621      	mov	r1, r4
   24526:	f640 4001 	movw	r0, #3073	; 0xc01
   2452a:	f7f3 fba9 	bl	17c80 <bt_hci_cmd_send_sync>
}
   2452e:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   24530:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24534:	e7fb      	b.n	2452e <set_event_mask+0x3c>

00024536 <bt_hci_disconnect>:
{
   24536:	b570      	push	{r4, r5, r6, lr}
   24538:	4605      	mov	r5, r0
   2453a:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2453c:	2103      	movs	r1, #3
   2453e:	f240 4006 	movw	r0, #1030	; 0x406
   24542:	f7f3 fb61 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   24546:	b168      	cbz	r0, 24564 <bt_hci_disconnect+0x2e>
   24548:	4606      	mov	r6, r0
   2454a:	2103      	movs	r1, #3
   2454c:	3008      	adds	r0, #8
   2454e:	f002 f867 	bl	26620 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   24552:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   24554:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24556:	2200      	movs	r2, #0
   24558:	4631      	mov	r1, r6
   2455a:	f240 4006 	movw	r0, #1030	; 0x406
   2455e:	f7f3 fb8f 	bl	17c80 <bt_hci_cmd_send_sync>
}
   24562:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   24564:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24568:	e7fb      	b.n	24562 <bt_hci_disconnect+0x2c>

0002456a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2456a:	8802      	ldrh	r2, [r0, #0]
   2456c:	8843      	ldrh	r3, [r0, #2]
   2456e:	429a      	cmp	r2, r3
   24570:	d819      	bhi.n	245a6 <bt_le_conn_params_valid+0x3c>
   24572:	2a05      	cmp	r2, #5
   24574:	d919      	bls.n	245aa <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24576:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2457a:	d818      	bhi.n	245ae <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   2457c:	8881      	ldrh	r1, [r0, #4]
   2457e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   24582:	d216      	bcs.n	245b2 <bt_le_conn_params_valid+0x48>
{
   24584:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   24586:	88c0      	ldrh	r0, [r0, #6]
   24588:	f1a0 020a 	sub.w	r2, r0, #10
   2458c:	b292      	uxth	r2, r2
   2458e:	f640 4476 	movw	r4, #3190	; 0xc76
   24592:	42a2      	cmp	r2, r4
   24594:	d80f      	bhi.n	245b6 <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   24596:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2459a:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2459e:	d20c      	bcs.n	245ba <bt_le_conn_params_valid+0x50>
	return true;
   245a0:	2001      	movs	r0, #1
}
   245a2:	bc10      	pop	{r4}
   245a4:	4770      	bx	lr
		return false;
   245a6:	2000      	movs	r0, #0
   245a8:	4770      	bx	lr
   245aa:	2000      	movs	r0, #0
   245ac:	4770      	bx	lr
   245ae:	2000      	movs	r0, #0
   245b0:	4770      	bx	lr
		return false;
   245b2:	2000      	movs	r0, #0
}
   245b4:	4770      	bx	lr
		return false;
   245b6:	2000      	movs	r0, #0
   245b8:	e7f3      	b.n	245a2 <bt_le_conn_params_valid+0x38>
   245ba:	2000      	movs	r0, #0
   245bc:	e7f1      	b.n	245a2 <bt_le_conn_params_valid+0x38>

000245be <bt_le_set_data_len>:
{
   245be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245c0:	4606      	mov	r6, r0
   245c2:	460f      	mov	r7, r1
   245c4:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   245c6:	2106      	movs	r1, #6
   245c8:	f242 0022 	movw	r0, #8226	; 0x2022
   245cc:	f7f3 fb1c 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   245d0:	b170      	cbz	r0, 245f0 <bt_le_set_data_len+0x32>
   245d2:	4605      	mov	r5, r0
   245d4:	2106      	movs	r1, #6
   245d6:	3008      	adds	r0, #8
   245d8:	f002 f822 	bl	26620 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   245dc:	8833      	ldrh	r3, [r6, #0]
   245de:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   245e0:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   245e2:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   245e4:	4629      	mov	r1, r5
   245e6:	f242 0022 	movw	r0, #8226	; 0x2022
   245ea:	f7f3 feef 	bl	183cc <bt_hci_cmd_send>
}
   245ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   245f0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   245f4:	e7fb      	b.n	245ee <bt_le_set_data_len+0x30>

000245f6 <bt_le_set_phy>:
{
   245f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   245fa:	4607      	mov	r7, r0
   245fc:	460e      	mov	r6, r1
   245fe:	4615      	mov	r5, r2
   24600:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24602:	2107      	movs	r1, #7
   24604:	f242 0032 	movw	r0, #8242	; 0x2032
   24608:	f7f3 fafe 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   2460c:	b1a0      	cbz	r0, 24638 <bt_le_set_phy+0x42>
   2460e:	4680      	mov	r8, r0
   24610:	2107      	movs	r1, #7
   24612:	3008      	adds	r0, #8
   24614:	f002 f804 	bl	26620 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24618:	883b      	ldrh	r3, [r7, #0]
   2461a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   2461c:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2461e:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24620:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   24622:	f89d 3018 	ldrb.w	r3, [sp, #24]
   24626:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2462a:	4641      	mov	r1, r8
   2462c:	f242 0032 	movw	r0, #8242	; 0x2032
   24630:	f7f3 fecc 	bl	183cc <bt_hci_cmd_send>
}
   24634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   24638:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2463c:	e7fa      	b.n	24634 <bt_le_set_phy+0x3e>

0002463e <hci_le_read_remote_features>:
{
   2463e:	b538      	push	{r3, r4, r5, lr}
   24640:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   24642:	2102      	movs	r1, #2
   24644:	f242 0016 	movw	r0, #8214	; 0x2016
   24648:	f7f3 fade 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   2464c:	b168      	cbz	r0, 2466a <hci_le_read_remote_features+0x2c>
   2464e:	4605      	mov	r5, r0
   24650:	2102      	movs	r1, #2
   24652:	3008      	adds	r0, #8
   24654:	f001 ffe4 	bl	26620 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24658:	8823      	ldrh	r3, [r4, #0]
   2465a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   2465c:	4629      	mov	r1, r5
   2465e:	f242 0016 	movw	r0, #8214	; 0x2016
   24662:	f7f3 feb3 	bl	183cc <bt_hci_cmd_send>
	return 0;
   24666:	2000      	movs	r0, #0
}
   24668:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   2466a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2466e:	e7fb      	b.n	24668 <hci_le_read_remote_features+0x2a>

00024670 <enh_conn_complete>:
{
   24670:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   24672:	f7f3 ffa9 	bl	185c8 <bt_hci_le_enh_conn_complete>
}
   24676:	bd08      	pop	{r3, pc}

00024678 <le_enh_conn_complete>:
{
   24678:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   2467a:	6880      	ldr	r0, [r0, #8]
   2467c:	f7ff fff8 	bl	24670 <enh_conn_complete>
}
   24680:	bd08      	pop	{r3, pc}

00024682 <le_legacy_conn_complete>:
{
   24682:	b500      	push	{lr}
   24684:	b089      	sub	sp, #36	; 0x24
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   24686:	6883      	ldr	r3, [r0, #8]
	enh.status         = evt->status;
   24688:	781a      	ldrb	r2, [r3, #0]
   2468a:	f88d 2000 	strb.w	r2, [sp]
	enh.handle         = evt->handle;
   2468e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   24692:	f8ad 2001 	strh.w	r2, [sp, #1]
	enh.role           = evt->role;
   24696:	78da      	ldrb	r2, [r3, #3]
   24698:	f88d 2003 	strb.w	r2, [sp, #3]
	enh.interval       = evt->interval;
   2469c:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   246a0:	f8ad 2017 	strh.w	r2, [sp, #23]
	enh.latency        = evt->latency;
   246a4:	f8b3 200d 	ldrh.w	r2, [r3, #13]
   246a8:	f8ad 2019 	strh.w	r2, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   246ac:	f8b3 200f 	ldrh.w	r2, [r3, #15]
   246b0:	f8ad 201b 	strh.w	r2, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   246b4:	7c5a      	ldrb	r2, [r3, #17]
   246b6:	f88d 201d 	strb.w	r2, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   246ba:	f853 0f04 	ldr.w	r0, [r3, #4]!
   246be:	9001      	str	r0, [sp, #4]
   246c0:	889a      	ldrh	r2, [r3, #4]
   246c2:	799b      	ldrb	r3, [r3, #6]
   246c4:	f8ad 2008 	strh.w	r2, [sp, #8]
   246c8:	f88d 300a 	strb.w	r3, [sp, #10]
	memcpy(dst, src, sizeof(*dst));
   246cc:	2300      	movs	r3, #0
   246ce:	f8cd 300b 	str.w	r3, [sp, #11]
   246d2:	f8ad 300f 	strh.w	r3, [sp, #15]
   246d6:	f8cd 3011 	str.w	r3, [sp, #17]
   246da:	f8ad 3015 	strh.w	r3, [sp, #21]
	enh_conn_complete(&enh);
   246de:	4668      	mov	r0, sp
   246e0:	f7ff ffc6 	bl	24670 <enh_conn_complete>
}
   246e4:	b009      	add	sp, #36	; 0x24
   246e6:	f85d fb04 	ldr.w	pc, [sp], #4

000246ea <le_conn_param_req_reply>:
{
   246ea:	b570      	push	{r4, r5, r6, lr}
   246ec:	4605      	mov	r5, r0
   246ee:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   246f0:	210e      	movs	r1, #14
   246f2:	f242 0020 	movw	r0, #8224	; 0x2020
   246f6:	f7f3 fa87 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   246fa:	b1c0      	cbz	r0, 2472e <le_conn_param_req_reply+0x44>
   246fc:	4606      	mov	r6, r0
   246fe:	210e      	movs	r1, #14
   24700:	3008      	adds	r0, #8
   24702:	f001 ff8d 	bl	26620 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   24706:	2300      	movs	r3, #0
   24708:	6003      	str	r3, [r0, #0]
   2470a:	6043      	str	r3, [r0, #4]
   2470c:	6083      	str	r3, [r0, #8]
   2470e:	8183      	strh	r3, [r0, #12]
	cp->handle = sys_cpu_to_le16(handle);
   24710:	8005      	strh	r5, [r0, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   24712:	8823      	ldrh	r3, [r4, #0]
   24714:	8043      	strh	r3, [r0, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   24716:	8863      	ldrh	r3, [r4, #2]
   24718:	8083      	strh	r3, [r0, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2471a:	88a3      	ldrh	r3, [r4, #4]
   2471c:	80c3      	strh	r3, [r0, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   2471e:	88e3      	ldrh	r3, [r4, #6]
   24720:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   24722:	4631      	mov	r1, r6
   24724:	f242 0020 	movw	r0, #8224	; 0x2020
   24728:	f7f3 fe50 	bl	183cc <bt_hci_cmd_send>
}
   2472c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   2472e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24732:	e7fb      	b.n	2472c <le_conn_param_req_reply+0x42>

00024734 <bt_init>:
{
   24734:	b510      	push	{r4, lr}
	err = hci_init();
   24736:	f7f3 fde9 	bl	1830c <hci_init>
	if (err) {
   2473a:	4604      	mov	r4, r0
   2473c:	b108      	cbz	r0, 24742 <bt_init+0xe>
}
   2473e:	4620      	mov	r0, r4
   24740:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   24742:	f7f6 fbbb 	bl	1aebc <bt_conn_init>
		if (err) {
   24746:	4604      	mov	r4, r0
   24748:	2800      	cmp	r0, #0
   2474a:	d1f8      	bne.n	2473e <bt_init+0xa>
	bt_finalize_init();
   2474c:	f7f4 fbfc 	bl	18f48 <bt_finalize_init>
	return 0;
   24750:	e7f5      	b.n	2473e <bt_init+0xa>

00024752 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   24752:	2000      	movs	r0, #0
   24754:	4770      	bx	lr

00024756 <bt_lookup_id_addr>:
}
   24756:	4608      	mov	r0, r1
   24758:	4770      	bx	lr

0002475a <bt_id_set_adv_random_addr>:
{
   2475a:	b508      	push	{r3, lr}
		return set_random_address(addr);
   2475c:	4608      	mov	r0, r1
   2475e:	f7f4 fd4b 	bl	191f8 <set_random_address>
}
   24762:	bd08      	pop	{r3, pc}

00024764 <bt_id_set_adv_private_addr>:
{
   24764:	b510      	push	{r4, lr}
   24766:	b082      	sub	sp, #8
   24768:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2476a:	2106      	movs	r1, #6
   2476c:	4668      	mov	r0, sp
   2476e:	f7fa fe41 	bl	1f3f4 <bt_rand>
	if (err) {
   24772:	b108      	cbz	r0, 24778 <bt_id_set_adv_private_addr+0x14>
}
   24774:	b002      	add	sp, #8
   24776:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   24778:	f89d 3005 	ldrb.w	r3, [sp, #5]
   2477c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24780:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24784:	4669      	mov	r1, sp
   24786:	4620      	mov	r0, r4
   24788:	f7ff ffe7 	bl	2475a <bt_id_set_adv_random_addr>
	if (err) {
   2478c:	e7f2      	b.n	24774 <bt_id_set_adv_private_addr+0x10>

0002478e <bt_id_adv_random_addr_check>:
}
   2478e:	2001      	movs	r0, #1
   24790:	4770      	bx	lr

00024792 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   24792:	2300      	movs	r3, #0
   24794:	428b      	cmp	r3, r1
   24796:	d218      	bcs.n	247ca <ad_is_limited+0x38>
{
   24798:	b430      	push	{r4, r5}
   2479a:	e002      	b.n	247a2 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   2479c:	3301      	adds	r3, #1
   2479e:	428b      	cmp	r3, r1
   247a0:	d210      	bcs.n	247c4 <ad_is_limited+0x32>
		if (ad[i].type == BT_DATA_FLAGS &&
   247a2:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   247a6:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
   247aa:	f240 1201 	movw	r2, #257	; 0x101
   247ae:	4294      	cmp	r4, r2
   247b0:	d1f4      	bne.n	2479c <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   247b2:	686a      	ldr	r2, [r5, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   247b4:	2a00      	cmp	r2, #0
   247b6:	d0f1      	beq.n	2479c <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   247b8:	7812      	ldrb	r2, [r2, #0]
   247ba:	f012 0f01 	tst.w	r2, #1
   247be:	d0ed      	beq.n	2479c <ad_is_limited+0xa>
				return true;
   247c0:	2001      	movs	r0, #1
   247c2:	e000      	b.n	247c6 <ad_is_limited+0x34>
	return false;
   247c4:	2000      	movs	r0, #0
}
   247c6:	bc30      	pop	{r4, r5}
   247c8:	4770      	bx	lr
	return false;
   247ca:	2000      	movs	r0, #0
}
   247cc:	4770      	bx	lr

000247ce <get_filter_policy>:
}
   247ce:	2000      	movs	r0, #0
   247d0:	4770      	bx	lr

000247d2 <get_adv_channel_map>:
{
   247d2:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   247d4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   247d8:	d10b      	bne.n	247f2 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   247da:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   247dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   247e0:	d001      	beq.n	247e6 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   247e2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   247e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   247ea:	d001      	beq.n	247f0 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   247ec:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   247f0:	4770      	bx	lr
		channel_map &= ~0x01;
   247f2:	2006      	movs	r0, #6
   247f4:	e7f2      	b.n	247dc <get_adv_channel_map+0xa>

000247f6 <hci_set_ad>:
{
   247f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   247fa:	b082      	sub	sp, #8
   247fc:	4607      	mov	r7, r0
   247fe:	460d      	mov	r5, r1
   24800:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   24802:	2120      	movs	r1, #32
   24804:	f7f3 fa00 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   24808:	b300      	cbz	r0, 2484c <hci_set_ad+0x56>
   2480a:	4680      	mov	r8, r0
   2480c:	2120      	movs	r1, #32
   2480e:	3008      	adds	r0, #8
   24810:	f001 ff06 	bl	26620 <net_buf_simple_add>
   24814:	4604      	mov	r4, r0
   24816:	2220      	movs	r2, #32
   24818:	2100      	movs	r1, #0
   2481a:	f003 fe61 	bl	284e0 <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   2481e:	9400      	str	r4, [sp, #0]
   24820:	4633      	mov	r3, r6
   24822:	462a      	mov	r2, r5
   24824:	211f      	movs	r1, #31
   24826:	1c60      	adds	r0, r4, #1
   24828:	f7f5 f814 	bl	19854 <set_data_add_complete>
	if (err) {
   2482c:	4604      	mov	r4, r0
   2482e:	b948      	cbnz	r0, 24844 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   24830:	2200      	movs	r2, #0
   24832:	4641      	mov	r1, r8
   24834:	4638      	mov	r0, r7
   24836:	f7f3 fa23 	bl	17c80 <bt_hci_cmd_send_sync>
   2483a:	4604      	mov	r4, r0
}
   2483c:	4620      	mov	r0, r4
   2483e:	b002      	add	sp, #8
   24840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   24844:	4640      	mov	r0, r8
   24846:	f001 fea1 	bl	2658c <net_buf_unref>
		return err;
   2484a:	e7f7      	b.n	2483c <hci_set_ad+0x46>
		return -ENOBUFS;
   2484c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   24850:	e7f4      	b.n	2483c <hci_set_ad+0x46>

00024852 <set_ad>:
{
   24852:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   24854:	f242 0008 	movw	r0, #8200	; 0x2008
   24858:	f7ff ffcd 	bl	247f6 <hci_set_ad>
}
   2485c:	bd08      	pop	{r3, pc}

0002485e <set_sd>:
{
   2485e:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24860:	f242 0009 	movw	r0, #8201	; 0x2009
   24864:	f7ff ffc7 	bl	247f6 <hci_set_ad>
}
   24868:	bd08      	pop	{r3, pc}

0002486a <le_adv_update>:
{
   2486a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2486e:	b089      	sub	sp, #36	; 0x24
   24870:	4604      	mov	r4, r0
   24872:	460e      	mov	r6, r1
   24874:	4617      	mov	r7, r2
   24876:	461d      	mov	r5, r3
   24878:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   2487c:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   24880:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   24884:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   24888:	2300      	movs	r3, #0
   2488a:	9304      	str	r3, [sp, #16]
   2488c:	9305      	str	r3, [sp, #20]
   2488e:	9306      	str	r3, [sp, #24]
   24890:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   24892:	f1b9 0f00 	cmp.w	r9, #0
   24896:	d133      	bne.n	24900 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   24898:	f1bb 0f00 	cmp.w	fp, #0
   2489c:	d002      	beq.n	248a4 <le_adv_update+0x3a>
   2489e:	f1ba 0f00 	cmp.w	sl, #0
   248a2:	d10b      	bne.n	248bc <le_adv_update+0x52>
		d[0].data = ad;
   248a4:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   248a6:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   248a8:	f1b9 0f01 	cmp.w	r9, #1
   248ac:	d056      	beq.n	2495c <le_adv_update+0xf2>
		d_len = 1;
   248ae:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   248b0:	a904      	add	r1, sp, #16
   248b2:	4620      	mov	r0, r4
   248b4:	f7ff ffcd 	bl	24852 <set_ad>
		if (err) {
   248b8:	4603      	mov	r3, r0
   248ba:	b9e8      	cbnz	r0, 248f8 <le_adv_update+0x8e>
	if (scannable) {
   248bc:	f1ba 0f00 	cmp.w	sl, #0
   248c0:	d00c      	beq.n	248dc <le_adv_update+0x72>
		d[0].data = sd;
   248c2:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   248c4:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   248c8:	f1b9 0f02 	cmp.w	r9, #2
   248cc:	d04c      	beq.n	24968 <le_adv_update+0xfe>
		d_len = 1;
   248ce:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   248d0:	a904      	add	r1, sp, #16
   248d2:	4620      	mov	r0, r4
   248d4:	f7ff ffc3 	bl	2485e <set_sd>
		if (err) {
   248d8:	4603      	mov	r3, r0
   248da:	b968      	cbnz	r0, 248f8 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   248dc:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   248de:	f3bf 8f5b 	dmb	ish
   248e2:	e854 3f00 	ldrex	r3, [r4]
   248e6:	f043 0304 	orr.w	r3, r3, #4
   248ea:	e844 3200 	strex	r2, r3, [r4]
   248ee:	2a00      	cmp	r2, #0
   248f0:	d1f7      	bne.n	248e2 <le_adv_update+0x78>
   248f2:	f3bf 8f5b 	dmb	ish
	return 0;
   248f6:	2300      	movs	r3, #0
}
   248f8:	4618      	mov	r0, r3
   248fa:	b009      	add	sp, #36	; 0x24
   248fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   24900:	f7f4 fc5c 	bl	191bc <bt_get_name>
   24904:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   24906:	b166      	cbz	r6, 24922 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   24908:	2200      	movs	r2, #0
   2490a:	4297      	cmp	r7, r2
   2490c:	d907      	bls.n	2491e <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2490e:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   24912:	3b08      	subs	r3, #8
   24914:	b2db      	uxtb	r3, r3
   24916:	2b01      	cmp	r3, #1
   24918:	d90f      	bls.n	2493a <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   2491a:	3201      	adds	r2, #1
   2491c:	e7f5      	b.n	2490a <le_adv_update+0xa0>
	return false;
   2491e:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   24920:	bb43      	cbnz	r3, 24974 <le_adv_update+0x10a>
   24922:	b175      	cbz	r5, 24942 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   24924:	2200      	movs	r2, #0
   24926:	4590      	cmp	r8, r2
   24928:	d909      	bls.n	2493e <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2492a:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   2492e:	3b08      	subs	r3, #8
   24930:	b2db      	uxtb	r3, r3
   24932:	2b01      	cmp	r3, #1
   24934:	d910      	bls.n	24958 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   24936:	3201      	adds	r2, #1
   24938:	e7f5      	b.n	24926 <le_adv_update+0xbc>
			return true;
   2493a:	2301      	movs	r3, #1
   2493c:	e7f0      	b.n	24920 <le_adv_update+0xb6>
	return false;
   2493e:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   24940:	b9db      	cbnz	r3, 2497a <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   24942:	9801      	ldr	r0, [sp, #4]
   24944:	f7e7 fe6e 	bl	c624 <strlen>
   24948:	2309      	movs	r3, #9
   2494a:	f88d 3008 	strb.w	r3, [sp, #8]
   2494e:	f88d 0009 	strb.w	r0, [sp, #9]
   24952:	9b01      	ldr	r3, [sp, #4]
   24954:	9303      	str	r3, [sp, #12]
   24956:	e79f      	b.n	24898 <le_adv_update+0x2e>
			return true;
   24958:	2301      	movs	r3, #1
   2495a:	e7f1      	b.n	24940 <le_adv_update+0xd6>
			d[1].data = &data;
   2495c:	ab02      	add	r3, sp, #8
   2495e:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   24960:	2301      	movs	r3, #1
   24962:	9307      	str	r3, [sp, #28]
			d_len = 2;
   24964:	2202      	movs	r2, #2
   24966:	e7a3      	b.n	248b0 <le_adv_update+0x46>
			d[1].data = &data;
   24968:	ab02      	add	r3, sp, #8
   2496a:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   2496c:	2301      	movs	r3, #1
   2496e:	9307      	str	r3, [sp, #28]
			d_len = 2;
   24970:	2202      	movs	r2, #2
   24972:	e7ad      	b.n	248d0 <le_adv_update+0x66>
			return -EINVAL;
   24974:	f06f 0315 	mvn.w	r3, #21
   24978:	e7be      	b.n	248f8 <le_adv_update+0x8e>
   2497a:	f06f 0315 	mvn.w	r3, #21
   2497e:	e7bb      	b.n	248f8 <le_adv_update+0x8e>

00024980 <valid_adv_param>:
{
   24980:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   24982:	6843      	ldr	r3, [r0, #4]
   24984:	f413 6f80 	tst.w	r3, #1024	; 0x400
   24988:	d107      	bne.n	2499a <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   2498a:	6902      	ldr	r2, [r0, #16]
   2498c:	b112      	cbz	r2, 24994 <valid_adv_param+0x14>
   2498e:	f013 0f01 	tst.w	r3, #1
   24992:	d004      	beq.n	2499e <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   24994:	f7f4 ffd2 	bl	1993c <valid_adv_ext_param>
}
   24998:	bd08      	pop	{r3, pc}
		return false;
   2499a:	2000      	movs	r0, #0
   2499c:	e7fc      	b.n	24998 <valid_adv_param+0x18>
		return false;
   2499e:	2000      	movs	r0, #0
   249a0:	e7fa      	b.n	24998 <valid_adv_param+0x18>

000249a2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   249a2:	6843      	ldr	r3, [r0, #4]
   249a4:	f013 0f08 	tst.w	r3, #8
   249a8:	d00b      	beq.n	249c2 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   249aa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   249ae:	d10a      	bne.n	249c6 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   249b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   249b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   249b8:	d001      	beq.n	249be <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   249ba:	2002      	movs	r0, #2
}
   249bc:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   249be:	2001      	movs	r0, #1
   249c0:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   249c2:	2000      	movs	r0, #0
   249c4:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   249c6:	2001      	movs	r0, #1
   249c8:	4770      	bx	lr

000249ca <bt_le_adv_set_enable_legacy>:
{
   249ca:	b570      	push	{r4, r5, r6, lr}
   249cc:	b086      	sub	sp, #24
   249ce:	4605      	mov	r5, r0
   249d0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   249d2:	2101      	movs	r1, #1
   249d4:	f242 000a 	movw	r0, #8202	; 0x200a
   249d8:	f7f3 f916 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   249dc:	b1d0      	cbz	r0, 24a14 <bt_le_adv_set_enable_legacy+0x4a>
   249de:	4606      	mov	r6, r0
	if (enable) {
   249e0:	b19c      	cbz	r4, 24a0a <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   249e2:	2101      	movs	r1, #1
   249e4:	3008      	adds	r0, #8
   249e6:	f001 fe2c 	bl	26642 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   249ea:	9400      	str	r4, [sp, #0]
   249ec:	2306      	movs	r3, #6
   249ee:	f105 0210 	add.w	r2, r5, #16
   249f2:	a903      	add	r1, sp, #12
   249f4:	4630      	mov	r0, r6
   249f6:	f7f3 f8f5 	bl	17be4 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   249fa:	2200      	movs	r2, #0
   249fc:	4631      	mov	r1, r6
   249fe:	f242 000a 	movw	r0, #8202	; 0x200a
   24a02:	f7f3 f93d 	bl	17c80 <bt_hci_cmd_send_sync>
}
   24a06:	b006      	add	sp, #24
   24a08:	bd70      	pop	{r4, r5, r6, pc}
   24a0a:	2100      	movs	r1, #0
   24a0c:	3008      	adds	r0, #8
   24a0e:	f001 fe18 	bl	26642 <net_buf_simple_add_u8>
   24a12:	e7ea      	b.n	249ea <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   24a14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24a18:	e7f5      	b.n	24a06 <bt_le_adv_set_enable_legacy+0x3c>

00024a1a <bt_le_adv_set_enable>:
{
   24a1a:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   24a1c:	f7ff ffd5 	bl	249ca <bt_le_adv_set_enable_legacy>
}
   24a20:	bd08      	pop	{r3, pc}

00024a22 <bt_le_lim_adv_cancel_timeout>:
{
   24a22:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   24a24:	3018      	adds	r0, #24
   24a26:	f003 fa23 	bl	27e70 <k_work_cancel_delayable>
}
   24a2a:	bd08      	pop	{r3, pc}

00024a2c <bt_le_adv_resume>:
{
   24a2c:	b530      	push	{r4, r5, lr}
   24a2e:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   24a30:	f7f5 f850 	bl	19ad4 <bt_le_adv_lookup_legacy>
	if (!adv) {
   24a34:	b150      	cbz	r0, 24a4c <bt_le_adv_resume+0x20>
   24a36:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   24a38:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24a3c:	f3bf 8f5b 	dmb	ish
   24a40:	6903      	ldr	r3, [r0, #16]
   24a42:	f3bf 8f5b 	dmb	ish
   24a46:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24a4a:	d101      	bne.n	24a50 <bt_le_adv_resume+0x24>
}
   24a4c:	b003      	add	sp, #12
   24a4e:	bd30      	pop	{r4, r5, pc}
   24a50:	f3bf 8f5b 	dmb	ish
   24a54:	6903      	ldr	r3, [r0, #16]
   24a56:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   24a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
   24a5e:	d1f5      	bne.n	24a4c <bt_le_adv_resume+0x20>
   24a60:	f3bf 8f5b 	dmb	ish
   24a64:	6903      	ldr	r3, [r0, #16]
   24a66:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   24a6a:	f413 7f00 	tst.w	r3, #512	; 0x200
   24a6e:	d0ed      	beq.n	24a4c <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   24a70:	a901      	add	r1, sp, #4
   24a72:	f7f4 ffb1 	bl	199d8 <le_adv_start_add_conn>
	if (err) {
   24a76:	2800      	cmp	r0, #0
   24a78:	d1e8      	bne.n	24a4c <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   24a7a:	2101      	movs	r1, #1
   24a7c:	4620      	mov	r0, r4
   24a7e:	f7ff ffcc 	bl	24a1a <bt_le_adv_set_enable>
	if (err) {
   24a82:	b908      	cbnz	r0, 24a88 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   24a84:	2400      	movs	r4, #0
   24a86:	e011      	b.n	24aac <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   24a88:	2100      	movs	r1, #0
   24a8a:	9801      	ldr	r0, [sp, #4]
   24a8c:	f7f5 fe38 	bl	1a700 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24a90:	f3bf 8f5b 	dmb	ish
   24a94:	e855 4f00 	ldrex	r4, [r5]
   24a98:	f424 5300 	bic.w	r3, r4, #8192	; 0x2000
   24a9c:	e845 3200 	strex	r2, r3, [r5]
   24aa0:	2a00      	cmp	r2, #0
   24aa2:	d1f7      	bne.n	24a94 <bt_le_adv_resume+0x68>
   24aa4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   24aa8:	f3c4 3440 	ubfx	r4, r4, #13, #1
	bt_conn_unref(conn);
   24aac:	9801      	ldr	r0, [sp, #4]
   24aae:	f000 f938 	bl	24d22 <bt_conn_unref>
	if (persist_paused) {
   24ab2:	2c00      	cmp	r4, #0
   24ab4:	d0ca      	beq.n	24a4c <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24ab6:	f3bf 8f5b 	dmb	ish
   24aba:	e855 3f00 	ldrex	r3, [r5]
   24abe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   24ac2:	e845 3200 	strex	r2, r3, [r5]
   24ac6:	2a00      	cmp	r2, #0
   24ac8:	d1f7      	bne.n	24aba <bt_le_adv_resume+0x8e>
   24aca:	f3bf 8f5b 	dmb	ish
}
   24ace:	e7bd      	b.n	24a4c <bt_le_adv_resume+0x20>

00024ad0 <tx_notify>:
{
   24ad0:	b570      	push	{r4, r5, r6, lr}
   24ad2:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   24ad4:	e010      	b.n	24af8 <tx_notify+0x28>
   24ad6:	f383 8811 	msr	BASEPRI, r3
   24ada:	f3bf 8f6f 	isb	sy
}
   24ade:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   24ae0:	6262      	str	r2, [r4, #36]	; 0x24
   24ae2:	f383 8811 	msr	BASEPRI, r3
   24ae6:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   24aea:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   24aec:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   24aee:	f7f5 fad7 	bl	1a0a0 <tx_free>
		cb(conn, user_data);
   24af2:	4631      	mov	r1, r6
   24af4:	4620      	mov	r0, r4
   24af6:	47a8      	blx	r5
	__asm__ volatile(
   24af8:	f04f 0240 	mov.w	r2, #64	; 0x40
   24afc:	f3ef 8311 	mrs	r3, BASEPRI
   24b00:	f382 8812 	msr	BASEPRI_MAX, r2
   24b04:	f3bf 8f6f 	isb	sy
	return list->head;
   24b08:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   24b0a:	2800      	cmp	r0, #0
   24b0c:	d0e3      	beq.n	24ad6 <tx_notify+0x6>
	return node->next;
   24b0e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24b10:	6222      	str	r2, [r4, #32]
	return list->tail;
   24b12:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24b14:	4281      	cmp	r1, r0
   24b16:	d1e4      	bne.n	24ae2 <tx_notify+0x12>
   24b18:	e7e2      	b.n	24ae0 <tx_notify+0x10>

00024b1a <tx_complete_work>:
{
   24b1a:	b508      	push	{r3, lr}
	tx_notify(conn);
   24b1c:	3828      	subs	r0, #40	; 0x28
   24b1e:	f7ff ffd7 	bl	24ad0 <tx_notify>
}
   24b22:	bd08      	pop	{r3, pc}

00024b24 <z_log_msg2_runtime_create>:
{
   24b24:	b510      	push	{r4, lr}
   24b26:	b086      	sub	sp, #24
	va_start(ap, fmt);
   24b28:	ac0a      	add	r4, sp, #40	; 0x28
   24b2a:	9405      	str	r4, [sp, #20]
   24b2c:	9402      	str	r4, [sp, #8]
   24b2e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   24b30:	9401      	str	r4, [sp, #4]
   24b32:	9c08      	ldr	r4, [sp, #32]
   24b34:	9400      	str	r4, [sp, #0]
   24b36:	f7ff fa22 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   24b3a:	b006      	add	sp, #24
   24b3c:	bd10      	pop	{r4, pc}

00024b3e <send_acl>:
{
   24b3e:	b570      	push	{r4, r5, r6, lr}
   24b40:	4605      	mov	r5, r0
   24b42:	460c      	mov	r4, r1
	switch (flags) {
   24b44:	2a03      	cmp	r2, #3
   24b46:	d819      	bhi.n	24b7c <send_acl+0x3e>
   24b48:	e8df f002 	tbb	[pc, r2]
   24b4c:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
   24b50:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   24b52:	2104      	movs	r1, #4
   24b54:	f104 0008 	add.w	r0, r4, #8
   24b58:	f001 fd7a 	bl	26650 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   24b5c:	f9b5 3000 	ldrsh.w	r3, [r5]
   24b60:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   24b64:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24b66:	89a3      	ldrh	r3, [r4, #12]
   24b68:	3b04      	subs	r3, #4
   24b6a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   24b6c:	2302      	movs	r3, #2
   24b6e:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   24b70:	4620      	mov	r0, r4
   24b72:	f7f3 fc21 	bl	183b8 <bt_send>
}
   24b76:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   24b78:	2601      	movs	r6, #1
   24b7a:	e7ea      	b.n	24b52 <send_acl+0x14>
   24b7c:	f06f 0015 	mvn.w	r0, #21
   24b80:	e7f9      	b.n	24b76 <send_acl+0x38>

00024b82 <process_unack_tx>:
{
   24b82:	b510      	push	{r4, lr}
   24b84:	4604      	mov	r4, r0
   24b86:	e028      	b.n	24bda <process_unack_tx+0x58>
			conn->pending_no_cb--;
   24b88:	3b01      	subs	r3, #1
   24b8a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   24b8c:	f382 8811 	msr	BASEPRI, r2
   24b90:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   24b94:	4620      	mov	r0, r4
   24b96:	f7f5 facf 	bl	1a138 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   24b9a:	f7fc fa87 	bl	210ac <z_impl_k_sem_give>
			continue;
   24b9e:	e01c      	b.n	24bda <process_unack_tx+0x58>
	list->tail = node;
   24ba0:	61a3      	str	r3, [r4, #24]
   24ba2:	f382 8811 	msr	BASEPRI, r2
   24ba6:	f3bf 8f6f 	isb	sy
		if (!node) {
   24baa:	b350      	cbz	r0, 24c02 <process_unack_tx+0x80>
	__asm__ volatile(
   24bac:	f04f 0240 	mov.w	r2, #64	; 0x40
   24bb0:	f3ef 8311 	mrs	r3, BASEPRI
   24bb4:	f382 8812 	msr	BASEPRI_MAX, r2
   24bb8:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   24bbc:	68c2      	ldr	r2, [r0, #12]
   24bbe:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   24bc0:	2200      	movs	r2, #0
   24bc2:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   24bc4:	f383 8811 	msr	BASEPRI, r3
   24bc8:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   24bcc:	f7f5 fa68 	bl	1a0a0 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   24bd0:	4620      	mov	r0, r4
   24bd2:	f7f5 fab1 	bl	1a138 <bt_conn_get_pkts>
   24bd6:	f7fc fa69 	bl	210ac <z_impl_k_sem_give>
	__asm__ volatile(
   24bda:	f04f 0340 	mov.w	r3, #64	; 0x40
   24bde:	f3ef 8211 	mrs	r2, BASEPRI
   24be2:	f383 8812 	msr	BASEPRI_MAX, r3
   24be6:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   24bea:	69e3      	ldr	r3, [r4, #28]
   24bec:	2b00      	cmp	r3, #0
   24bee:	d1cb      	bne.n	24b88 <process_unack_tx+0x6>
	return list->head;
   24bf0:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   24bf2:	2800      	cmp	r0, #0
   24bf4:	d0d5      	beq.n	24ba2 <process_unack_tx+0x20>
	return node->next;
   24bf6:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   24bf8:	6163      	str	r3, [r4, #20]
	return list->tail;
   24bfa:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24bfc:	4288      	cmp	r0, r1
   24bfe:	d1d0      	bne.n	24ba2 <process_unack_tx+0x20>
   24c00:	e7ce      	b.n	24ba0 <process_unack_tx+0x1e>
}
   24c02:	bd10      	pop	{r4, pc}

00024c04 <bt_conn_reset_rx_state>:
{
   24c04:	b510      	push	{r4, lr}
   24c06:	4604      	mov	r4, r0
	if (!conn->rx) {
   24c08:	6900      	ldr	r0, [r0, #16]
   24c0a:	b118      	cbz	r0, 24c14 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24c0c:	f001 fcbe 	bl	2658c <net_buf_unref>
	conn->rx = NULL;
   24c10:	2300      	movs	r3, #0
   24c12:	6123      	str	r3, [r4, #16]
}
   24c14:	bd10      	pop	{r4, pc}

00024c16 <conn_cleanup>:
{
   24c16:	b538      	push	{r3, r4, r5, lr}
   24c18:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   24c1a:	e004      	b.n	24c26 <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   24c1c:	f7f5 fa40 	bl	1a0a0 <tx_free>
		net_buf_unref(buf);
   24c20:	4620      	mov	r0, r4
   24c22:	f001 fcb3 	bl	2658c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   24c26:	2200      	movs	r2, #0
   24c28:	2300      	movs	r3, #0
   24c2a:	f105 0038 	add.w	r0, r5, #56	; 0x38
   24c2e:	f001 fc81 	bl	26534 <net_buf_get>
   24c32:	4604      	mov	r4, r0
   24c34:	b118      	cbz	r0, 24c3e <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   24c36:	6960      	ldr	r0, [r4, #20]
   24c38:	2800      	cmp	r0, #0
   24c3a:	d1ef      	bne.n	24c1c <conn_cleanup+0x6>
   24c3c:	e7f0      	b.n	24c20 <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   24c3e:	4628      	mov	r0, r5
   24c40:	f7ff ffe0 	bl	24c04 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   24c44:	2200      	movs	r2, #0
   24c46:	2300      	movs	r3, #0
   24c48:	f105 0058 	add.w	r0, r5, #88	; 0x58
   24c4c:	f7fc fc46 	bl	214dc <k_work_reschedule>
}
   24c50:	bd38      	pop	{r3, r4, r5, pc}

00024c52 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24c52:	f3bf 8f5b 	dmb	ish
   24c56:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24c5a:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   24c5e:	b33b      	cbz	r3, 24cb0 <conn_prepare_events+0x5e>
{
   24c60:	b510      	push	{r4, lr}
   24c62:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   24c64:	7a83      	ldrb	r3, [r0, #10]
   24c66:	b983      	cbnz	r3, 24c8a <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   24c68:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24c6a:	f3bf 8f5b 	dmb	ish
   24c6e:	e853 2f00 	ldrex	r2, [r3]
   24c72:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   24c76:	e843 1c00 	strex	ip, r1, [r3]
   24c7a:	f1bc 0f00 	cmp.w	ip, #0
   24c7e:	d1f6      	bne.n	24c6e <conn_prepare_events+0x1c>
   24c80:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   24c84:	f012 0f40 	tst.w	r2, #64	; 0x40
   24c88:	d10d      	bne.n	24ca6 <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   24c8a:	7a83      	ldrb	r3, [r0, #10]
   24c8c:	2b07      	cmp	r3, #7
   24c8e:	d112      	bne.n	24cb6 <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   24c90:	f100 0338 	add.w	r3, r0, #56	; 0x38
   24c94:	2200      	movs	r2, #0
   24c96:	2104      	movs	r1, #4
   24c98:	4620      	mov	r0, r4
   24c9a:	f003 fbad 	bl	283f8 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   24c9e:	2301      	movs	r3, #1
   24ca0:	7323      	strb	r3, [r4, #12]
	return 0;
   24ca2:	2000      	movs	r0, #0
}
   24ca4:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   24ca6:	f7ff ffb6 	bl	24c16 <conn_cleanup>
		return -ENOTCONN;
   24caa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24cae:	e7f9      	b.n	24ca4 <conn_prepare_events+0x52>
		return -ENOTCONN;
   24cb0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   24cb4:	4770      	bx	lr
		return -ENOTCONN;
   24cb6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   24cba:	e7f3      	b.n	24ca4 <conn_prepare_events+0x52>

00024cbc <bt_conn_recv>:
{
   24cbc:	b570      	push	{r4, r5, r6, lr}
   24cbe:	4604      	mov	r4, r0
   24cc0:	460d      	mov	r5, r1
   24cc2:	4616      	mov	r6, r2
	tx_notify(conn);
   24cc4:	f7ff ff04 	bl	24ad0 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   24cc8:	4632      	mov	r2, r6
   24cca:	4629      	mov	r1, r5
   24ccc:	4620      	mov	r0, r4
   24cce:	f7f5 fb19 	bl	1a304 <bt_acl_recv>
}
   24cd2:	bd70      	pop	{r4, r5, r6, pc}

00024cd4 <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24cd4:	f3bf 8f5b 	dmb	ish
   24cd8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24cdc:	f3bf 8f5b 	dmb	ish
		if (!old) {
   24ce0:	b1eb      	cbz	r3, 24d1e <bt_conn_ref+0x4a>
{
   24ce2:	b410      	push	{r4}
   24ce4:	e006      	b.n	24cf4 <bt_conn_ref+0x20>
   24ce6:	f3bf 8f5b 	dmb	ish
   24cea:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24cee:	f3bf 8f5b 	dmb	ish
		if (!old) {
   24cf2:	b193      	cbz	r3, 24d1a <bt_conn_ref+0x46>
   24cf4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24cf8:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24cfa:	f3bf 8f5b 	dmb	ish
   24cfe:	e852 4f00 	ldrex	r4, [r2]
   24d02:	429c      	cmp	r4, r3
   24d04:	d104      	bne.n	24d10 <bt_conn_ref+0x3c>
   24d06:	e842 1c00 	strex	ip, r1, [r2]
   24d0a:	f1bc 0f00 	cmp.w	ip, #0
   24d0e:	d1f6      	bne.n	24cfe <bt_conn_ref+0x2a>
   24d10:	f3bf 8f5b 	dmb	ish
   24d14:	d1e7      	bne.n	24ce6 <bt_conn_ref+0x12>
}
   24d16:	bc10      	pop	{r4}
   24d18:	4770      	bx	lr
			return NULL;
   24d1a:	2000      	movs	r0, #0
   24d1c:	e7fb      	b.n	24d16 <bt_conn_ref+0x42>
   24d1e:	2000      	movs	r0, #0
}
   24d20:	4770      	bx	lr

00024d22 <bt_conn_unref>:
{
   24d22:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   24d24:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24d28:	f3bf 8f5b 	dmb	ish
   24d2c:	e853 2f00 	ldrex	r2, [r3]
   24d30:	3a01      	subs	r2, #1
   24d32:	e843 2100 	strex	r1, r2, [r3]
   24d36:	2900      	cmp	r1, #0
   24d38:	d1f8      	bne.n	24d2c <bt_conn_unref+0xa>
   24d3a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   24d3e:	7883      	ldrb	r3, [r0, #2]
   24d40:	2b01      	cmp	r3, #1
   24d42:	d000      	beq.n	24d46 <bt_conn_unref+0x24>
}
   24d44:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24d46:	f3bf 8f5b 	dmb	ish
   24d4a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24d4e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   24d52:	2b00      	cmp	r3, #0
   24d54:	d1f6      	bne.n	24d44 <bt_conn_unref+0x22>
		bt_le_adv_resume();
   24d56:	f7ff fe69 	bl	24a2c <bt_le_adv_resume>
}
   24d5a:	e7f3      	b.n	24d44 <bt_conn_unref+0x22>

00024d5c <conn_lookup_handle>:
{
   24d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d60:	4607      	mov	r7, r0
   24d62:	460e      	mov	r6, r1
   24d64:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24d66:	2400      	movs	r4, #0
   24d68:	e003      	b.n	24d72 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24d6a:	4628      	mov	r0, r5
   24d6c:	f7ff ffd9 	bl	24d22 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24d70:	3401      	adds	r4, #1
   24d72:	42b4      	cmp	r4, r6
   24d74:	d21c      	bcs.n	24db0 <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24d76:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   24d7a:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   24d7e:	f7ff ffa9 	bl	24cd4 <bt_conn_ref>
		if (!conn) {
   24d82:	4605      	mov	r5, r0
   24d84:	2800      	cmp	r0, #0
   24d86:	d0f3      	beq.n	24d70 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24d88:	7a83      	ldrb	r3, [r0, #10]
   24d8a:	2b01      	cmp	r3, #1
   24d8c:	d006      	beq.n	24d9c <conn_lookup_handle+0x40>
   24d8e:	b25a      	sxtb	r2, r3
   24d90:	2a00      	cmp	r2, #0
   24d92:	d0ea      	beq.n	24d6a <conn_lookup_handle+0xe>
   24d94:	3b07      	subs	r3, #7
   24d96:	b2db      	uxtb	r3, r3
   24d98:	2b01      	cmp	r3, #1
   24d9a:	d8e6      	bhi.n	24d6a <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   24d9c:	882b      	ldrh	r3, [r5, #0]
   24d9e:	4543      	cmp	r3, r8
   24da0:	d102      	bne.n	24da8 <conn_lookup_handle+0x4c>
}
   24da2:	4628      	mov	r0, r5
   24da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   24da8:	4628      	mov	r0, r5
   24daa:	f7ff ffba 	bl	24d22 <bt_conn_unref>
			continue;
   24dae:	e7df      	b.n	24d70 <conn_lookup_handle+0x14>
	return NULL;
   24db0:	2500      	movs	r5, #0
   24db2:	e7f6      	b.n	24da2 <conn_lookup_handle+0x46>

00024db4 <bt_conn_connected>:
{
   24db4:	b510      	push	{r4, lr}
   24db6:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   24db8:	f7f6 f9a4 	bl	1b104 <bt_l2cap_connected>
	notify_connected(conn);
   24dbc:	4620      	mov	r0, r4
   24dbe:	f7f5 f993 	bl	1a0e8 <notify_connected>
}
   24dc2:	bd10      	pop	{r4, pc}

00024dc4 <bt_conn_get_security>:
}
   24dc4:	2001      	movs	r0, #1
   24dc6:	4770      	bx	lr

00024dc8 <bt_conn_add_le>:
{
   24dc8:	b538      	push	{r3, r4, r5, lr}
   24dca:	4605      	mov	r5, r0
   24dcc:	460c      	mov	r4, r1
	struct bt_conn *conn = acl_conn_new();
   24dce:	f7f5 fa91 	bl	1a2f4 <acl_conn_new>
	if (!conn) {
   24dd2:	4603      	mov	r3, r0
   24dd4:	b188      	cbz	r0, 24dfa <bt_conn_add_le+0x32>
	conn->id = id;
   24dd6:	7205      	strb	r5, [r0, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24dd8:	6822      	ldr	r2, [r4, #0]
   24dda:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   24dde:	88a1      	ldrh	r1, [r4, #4]
   24de0:	79a2      	ldrb	r2, [r4, #6]
   24de2:	f8a0 108c 	strh.w	r1, [r0, #140]	; 0x8c
   24de6:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
	conn->type = BT_CONN_TYPE_LE;
   24dea:	2201      	movs	r2, #1
   24dec:	7082      	strb	r2, [r0, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   24dee:	2218      	movs	r2, #24
   24df0:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   24df4:	2228      	movs	r2, #40	; 0x28
   24df6:	f8a0 20a2 	strh.w	r2, [r0, #162]	; 0xa2
}
   24dfa:	4618      	mov	r0, r3
   24dfc:	bd38      	pop	{r3, r4, r5, pc}

00024dfe <bt_conn_is_peer_addr_le>:
{
   24dfe:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24e00:	7a03      	ldrb	r3, [r0, #8]
   24e02:	428b      	cmp	r3, r1
   24e04:	d001      	beq.n	24e0a <bt_conn_is_peer_addr_le+0xc>
		return false;
   24e06:	2000      	movs	r0, #0
}
   24e08:	bd38      	pop	{r3, r4, r5, pc}
   24e0a:	4604      	mov	r4, r0
   24e0c:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   24e0e:	2207      	movs	r2, #7
   24e10:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24e14:	4628      	mov	r0, r5
   24e16:	f003 fb34 	bl	28482 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   24e1a:	b1a8      	cbz	r0, 24e48 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   24e1c:	78e3      	ldrb	r3, [r4, #3]
   24e1e:	b14b      	cbz	r3, 24e34 <bt_conn_is_peer_addr_le+0x36>
   24e20:	2207      	movs	r2, #7
   24e22:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   24e26:	4628      	mov	r0, r5
   24e28:	f003 fb2b 	bl	28482 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   24e2c:	fab0 f080 	clz	r0, r0
   24e30:	0940      	lsrs	r0, r0, #5
   24e32:	e7e9      	b.n	24e08 <bt_conn_is_peer_addr_le+0xa>
   24e34:	2207      	movs	r2, #7
   24e36:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24e3a:	4628      	mov	r0, r5
   24e3c:	f003 fb21 	bl	28482 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   24e40:	fab0 f080 	clz	r0, r0
   24e44:	0940      	lsrs	r0, r0, #5
   24e46:	e7df      	b.n	24e08 <bt_conn_is_peer_addr_le+0xa>
		return true;
   24e48:	2001      	movs	r0, #1
   24e4a:	e7dd      	b.n	24e08 <bt_conn_is_peer_addr_le+0xa>

00024e4c <bt_conn_le_conn_update>:
{
   24e4c:	b570      	push	{r4, r5, r6, lr}
   24e4e:	4605      	mov	r5, r0
   24e50:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24e52:	210e      	movs	r1, #14
   24e54:	f242 0013 	movw	r0, #8211	; 0x2013
   24e58:	f7f2 fed6 	bl	17c08 <bt_hci_cmd_create>
	if (!buf) {
   24e5c:	b1c8      	cbz	r0, 24e92 <bt_conn_le_conn_update+0x46>
   24e5e:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   24e60:	210e      	movs	r1, #14
   24e62:	3008      	adds	r0, #8
   24e64:	f001 fbdc 	bl	26620 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   24e68:	2200      	movs	r2, #0
   24e6a:	6002      	str	r2, [r0, #0]
   24e6c:	6042      	str	r2, [r0, #4]
   24e6e:	6082      	str	r2, [r0, #8]
   24e70:	8182      	strh	r2, [r0, #12]
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24e72:	882b      	ldrh	r3, [r5, #0]
   24e74:	8003      	strh	r3, [r0, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24e76:	8823      	ldrh	r3, [r4, #0]
   24e78:	8043      	strh	r3, [r0, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24e7a:	8863      	ldrh	r3, [r4, #2]
   24e7c:	8083      	strh	r3, [r0, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24e7e:	88a3      	ldrh	r3, [r4, #4]
   24e80:	80c3      	strh	r3, [r0, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24e82:	88e3      	ldrh	r3, [r4, #6]
   24e84:	8103      	strh	r3, [r0, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24e86:	4631      	mov	r1, r6
   24e88:	f242 0013 	movw	r0, #8211	; 0x2013
   24e8c:	f7f2 fef8 	bl	17c80 <bt_hci_cmd_send_sync>
}
   24e90:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   24e92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24e96:	e7fb      	b.n	24e90 <bt_conn_le_conn_update+0x44>

00024e98 <l2cap_connected>:
}
   24e98:	4770      	bx	lr

00024e9a <l2cap_chan_recv>:
{
   24e9a:	b510      	push	{r4, lr}
   24e9c:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   24e9e:	6843      	ldr	r3, [r0, #4]
   24ea0:	691b      	ldr	r3, [r3, #16]
   24ea2:	4798      	blx	r3
	net_buf_unref(buf);
   24ea4:	4620      	mov	r0, r4
   24ea6:	f001 fb71 	bl	2658c <net_buf_unref>
}
   24eaa:	bd10      	pop	{r4, pc}

00024eac <l2cap_disconnected>:
{
   24eac:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   24eae:	3010      	adds	r0, #16
   24eb0:	f002 ffde 	bl	27e70 <k_work_cancel_delayable>
}
   24eb4:	bd08      	pop	{r3, pc}

00024eb6 <bt_l2cap_chan_remove>:
	return list->head;
   24eb6:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24eb8:	b103      	cbz	r3, 24ebc <bt_l2cap_chan_remove+0x6>
   24eba:	3b08      	subs	r3, #8
   24ebc:	2200      	movs	r2, #0
   24ebe:	e016      	b.n	24eee <bt_l2cap_chan_remove+0x38>
{
   24ec0:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   24ec2:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   24ec6:	b142      	cbz	r2, 24eda <bt_l2cap_chan_remove+0x24>
	return node->next;
   24ec8:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   24eca:	6014      	str	r4, [r2, #0]
	return list->tail;
   24ecc:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   24ece:	42a1      	cmp	r1, r4
   24ed0:	d00a      	beq.n	24ee8 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   24ed2:	2200      	movs	r2, #0
   24ed4:	609a      	str	r2, [r3, #8]
}
   24ed6:	bc10      	pop	{r4}
   24ed8:	4770      	bx	lr
	return node->next;
   24eda:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   24edc:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   24ede:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   24ee0:	42a1      	cmp	r1, r4
   24ee2:	d1f6      	bne.n	24ed2 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   24ee4:	6542      	str	r2, [r0, #84]	; 0x54
}
   24ee6:	e7f4      	b.n	24ed2 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   24ee8:	6542      	str	r2, [r0, #84]	; 0x54
}
   24eea:	e7f2      	b.n	24ed2 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24eec:	4613      	mov	r3, r2
   24eee:	b14b      	cbz	r3, 24f04 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   24ef0:	428b      	cmp	r3, r1
   24ef2:	d0e5      	beq.n	24ec0 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24ef4:	f113 0208 	adds.w	r2, r3, #8
   24ef8:	d0f8      	beq.n	24eec <bt_l2cap_chan_remove+0x36>
	return node->next;
   24efa:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24efc:	2b00      	cmp	r3, #0
   24efe:	d0f6      	beq.n	24eee <bt_l2cap_chan_remove+0x38>
   24f00:	3b08      	subs	r3, #8
   24f02:	e7f4      	b.n	24eee <bt_l2cap_chan_remove+0x38>
   24f04:	4770      	bx	lr

00024f06 <bt_l2cap_chan_del>:
{
   24f06:	b538      	push	{r3, r4, r5, lr}
   24f08:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   24f0a:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   24f0c:	6803      	ldr	r3, [r0, #0]
   24f0e:	b123      	cbz	r3, 24f1a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24f10:	686b      	ldr	r3, [r5, #4]
   24f12:	b103      	cbz	r3, 24f16 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24f14:	4798      	blx	r3
	chan->conn = NULL;
   24f16:	2300      	movs	r3, #0
   24f18:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24f1a:	68e3      	ldr	r3, [r4, #12]
   24f1c:	b10b      	cbz	r3, 24f22 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24f1e:	4620      	mov	r0, r4
   24f20:	4798      	blx	r3
	if (ops->released) {
   24f22:	69eb      	ldr	r3, [r5, #28]
   24f24:	b10b      	cbz	r3, 24f2a <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   24f26:	4620      	mov	r0, r4
   24f28:	4798      	blx	r3
}
   24f2a:	bd38      	pop	{r3, r4, r5, pc}

00024f2c <bt_l2cap_chan_add>:
{
   24f2c:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   24f2e:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   24f32:	2400      	movs	r4, #0
   24f34:	608c      	str	r4, [r1, #8]
	return list->tail;
   24f36:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   24f38:	b12c      	cbz	r4, 24f46 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   24f3a:	6023      	str	r3, [r4, #0]
	list->tail = node;
   24f3c:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   24f3e:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   24f40:	60ca      	str	r2, [r1, #12]
}
   24f42:	bc10      	pop	{r4}
   24f44:	4770      	bx	lr
   24f46:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   24f48:	6503      	str	r3, [r0, #80]	; 0x50
}
   24f4a:	e7f8      	b.n	24f3e <bt_l2cap_chan_add+0x12>

00024f4c <bt_l2cap_disconnected>:
{
   24f4c:	b510      	push	{r4, lr}
	return list->head;
   24f4e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24f50:	b140      	cbz	r0, 24f64 <bt_l2cap_disconnected+0x18>
   24f52:	3808      	subs	r0, #8
   24f54:	d008      	beq.n	24f68 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24f56:	f110 0408 	adds.w	r4, r0, #8
   24f5a:	d00a      	beq.n	24f72 <bt_l2cap_disconnected+0x26>
	return node->next;
   24f5c:	6884      	ldr	r4, [r0, #8]
   24f5e:	b144      	cbz	r4, 24f72 <bt_l2cap_disconnected+0x26>
   24f60:	3c08      	subs	r4, #8
   24f62:	e006      	b.n	24f72 <bt_l2cap_disconnected+0x26>
   24f64:	4604      	mov	r4, r0
   24f66:	e004      	b.n	24f72 <bt_l2cap_disconnected+0x26>
   24f68:	4604      	mov	r4, r0
   24f6a:	e002      	b.n	24f72 <bt_l2cap_disconnected+0x26>
   24f6c:	4623      	mov	r3, r4
   24f6e:	4620      	mov	r0, r4
   24f70:	461c      	mov	r4, r3
   24f72:	b158      	cbz	r0, 24f8c <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   24f74:	f7ff ffc7 	bl	24f06 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24f78:	2c00      	cmp	r4, #0
   24f7a:	d0f7      	beq.n	24f6c <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24f7c:	f114 0308 	adds.w	r3, r4, #8
   24f80:	d0f5      	beq.n	24f6e <bt_l2cap_disconnected+0x22>
	return node->next;
   24f82:	68a3      	ldr	r3, [r4, #8]
   24f84:	2b00      	cmp	r3, #0
   24f86:	d0f2      	beq.n	24f6e <bt_l2cap_disconnected+0x22>
   24f88:	3b08      	subs	r3, #8
   24f8a:	e7f0      	b.n	24f6e <bt_l2cap_disconnected+0x22>
}
   24f8c:	bd10      	pop	{r4, pc}

00024f8e <bt_l2cap_create_pdu_timeout>:
{
   24f8e:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   24f90:	3104      	adds	r1, #4
   24f92:	f7f5 fcdd 	bl	1a950 <bt_conn_create_pdu_timeout>
}
   24f96:	bd08      	pop	{r3, pc}

00024f98 <bt_l2cap_send_cb>:
{
   24f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24f9a:	4605      	mov	r5, r0
   24f9c:	460f      	mov	r7, r1
   24f9e:	4614      	mov	r4, r2
   24fa0:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   24fa2:	2104      	movs	r1, #4
   24fa4:	f102 0008 	add.w	r0, r2, #8
   24fa8:	f001 fb52 	bl	26650 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24fac:	89a3      	ldrh	r3, [r4, #12]
   24fae:	3b04      	subs	r3, #4
   24fb0:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   24fb2:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24fb4:	9b06      	ldr	r3, [sp, #24]
   24fb6:	4632      	mov	r2, r6
   24fb8:	4621      	mov	r1, r4
   24fba:	4628      	mov	r0, r5
   24fbc:	f7f5 fad2 	bl	1a564 <bt_conn_send_cb>
}
   24fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024fc2 <l2cap_send_reject>:
{
   24fc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24fc6:	b083      	sub	sp, #12
   24fc8:	4605      	mov	r5, r0
   24fca:	4690      	mov	r8, r2
   24fcc:	461c      	mov	r4, r3
   24fce:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   24fd2:	1cbb      	adds	r3, r7, #2
   24fd4:	460a      	mov	r2, r1
   24fd6:	2101      	movs	r1, #1
   24fd8:	2000      	movs	r0, #0
   24fda:	f7f6 f8cf 	bl	1b17c <l2cap_create_le_sig_pdu>
	if (!buf) {
   24fde:	b1b0      	cbz	r0, 2500e <l2cap_send_reject+0x4c>
   24fe0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   24fe2:	f100 0908 	add.w	r9, r0, #8
   24fe6:	2102      	movs	r1, #2
   24fe8:	4648      	mov	r0, r9
   24fea:	f001 fb19 	bl	26620 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   24fee:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   24ff2:	b124      	cbz	r4, 24ffe <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   24ff4:	463a      	mov	r2, r7
   24ff6:	4621      	mov	r1, r4
   24ff8:	4648      	mov	r0, r9
   24ffa:	f001 fb17 	bl	2662c <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   24ffe:	2300      	movs	r3, #0
   25000:	9300      	str	r3, [sp, #0]
   25002:	4632      	mov	r2, r6
   25004:	2105      	movs	r1, #5
   25006:	4628      	mov	r0, r5
   25008:	f7ff ffc6 	bl	24f98 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2500c:	b910      	cbnz	r0, 25014 <l2cap_send_reject+0x52>
}
   2500e:	b003      	add	sp, #12
   25010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   25014:	4630      	mov	r0, r6
   25016:	f001 fab9 	bl	2658c <net_buf_unref>
}
   2501a:	e7f8      	b.n	2500e <l2cap_send_reject+0x4c>

0002501c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2501c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2501e:	b110      	cbz	r0, 25026 <bt_l2cap_le_lookup_tx_cid+0xa>
   25020:	3808      	subs	r0, #8
   25022:	e000      	b.n	25026 <bt_l2cap_le_lookup_tx_cid+0xa>
   25024:	3808      	subs	r0, #8
   25026:	b148      	cbz	r0, 2503c <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   25028:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2502c:	428b      	cmp	r3, r1
   2502e:	d005      	beq.n	2503c <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25030:	f110 0308 	adds.w	r3, r0, #8
   25034:	d003      	beq.n	2503e <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   25036:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25038:	2800      	cmp	r0, #0
   2503a:	d1f3      	bne.n	25024 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   2503c:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2503e:	4618      	mov	r0, r3
   25040:	e7f1      	b.n	25026 <bt_l2cap_le_lookup_tx_cid+0xa>

00025042 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   25042:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25044:	b110      	cbz	r0, 2504c <bt_l2cap_le_lookup_rx_cid+0xa>
   25046:	3808      	subs	r0, #8
   25048:	e000      	b.n	2504c <bt_l2cap_le_lookup_rx_cid+0xa>
   2504a:	3808      	subs	r0, #8
   2504c:	b148      	cbz	r0, 25062 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2504e:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   25052:	428b      	cmp	r3, r1
   25054:	d005      	beq.n	25062 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25056:	f110 0308 	adds.w	r3, r0, #8
   2505a:	d003      	beq.n	25064 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   2505c:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2505e:	2800      	cmp	r0, #0
   25060:	d1f3      	bne.n	2504a <bt_l2cap_le_lookup_rx_cid+0x8>
}
   25062:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25064:	4618      	mov	r0, r3
   25066:	e7f1      	b.n	2504c <bt_l2cap_le_lookup_rx_cid+0xa>

00025068 <bt_l2cap_update_conn_param>:
{
   25068:	b570      	push	{r4, r5, r6, lr}
   2506a:	b082      	sub	sp, #8
   2506c:	4605      	mov	r5, r0
   2506e:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   25070:	f7f5 ff40 	bl	1aef4 <get_ident>
   25074:	4602      	mov	r2, r0
   25076:	2308      	movs	r3, #8
   25078:	2112      	movs	r1, #18
   2507a:	2000      	movs	r0, #0
   2507c:	f7f6 f87e 	bl	1b17c <l2cap_create_le_sig_pdu>
	if (!buf) {
   25080:	b1e0      	cbz	r0, 250bc <bt_l2cap_update_conn_param+0x54>
   25082:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   25084:	2108      	movs	r1, #8
   25086:	4408      	add	r0, r1
   25088:	f001 faca 	bl	26620 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   2508c:	8823      	ldrh	r3, [r4, #0]
   2508e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   25090:	8863      	ldrh	r3, [r4, #2]
   25092:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   25094:	88a3      	ldrh	r3, [r4, #4]
   25096:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   25098:	88e3      	ldrh	r3, [r4, #6]
   2509a:	80c3      	strh	r3, [r0, #6]
   2509c:	2300      	movs	r3, #0
   2509e:	9300      	str	r3, [sp, #0]
   250a0:	4632      	mov	r2, r6
   250a2:	2105      	movs	r1, #5
   250a4:	4628      	mov	r0, r5
   250a6:	f7ff ff77 	bl	24f98 <bt_l2cap_send_cb>
	if (err) {
   250aa:	4604      	mov	r4, r0
   250ac:	b910      	cbnz	r0, 250b4 <bt_l2cap_update_conn_param+0x4c>
}
   250ae:	4620      	mov	r0, r4
   250b0:	b002      	add	sp, #8
   250b2:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   250b4:	4630      	mov	r0, r6
   250b6:	f001 fa69 	bl	2658c <net_buf_unref>
		return err;
   250ba:	e7f8      	b.n	250ae <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   250bc:	f06f 040b 	mvn.w	r4, #11
   250c0:	e7f5      	b.n	250ae <bt_l2cap_update_conn_param+0x46>

000250c2 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   250c2:	4770      	bx	lr

000250c4 <att_sent>:
{
   250c4:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   250c6:	684b      	ldr	r3, [r1, #4]
   250c8:	695b      	ldr	r3, [r3, #20]
   250ca:	b10b      	cbz	r3, 250d0 <att_sent+0xc>
   250cc:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   250ce:	4798      	blx	r3
}
   250d0:	bd08      	pop	{r3, pc}

000250d2 <range_is_valid>:
	if (!start || !end) {
   250d2:	b120      	cbz	r0, 250de <range_is_valid+0xc>
   250d4:	b119      	cbz	r1, 250de <range_is_valid+0xc>
	if (start > end) {
   250d6:	4288      	cmp	r0, r1
   250d8:	d806      	bhi.n	250e8 <range_is_valid+0x16>
	return true;
   250da:	2001      	movs	r0, #1
}
   250dc:	4770      	bx	lr
		if (err) {
   250de:	b10a      	cbz	r2, 250e4 <range_is_valid+0x12>
			*err = 0U;
   250e0:	2300      	movs	r3, #0
   250e2:	8013      	strh	r3, [r2, #0]
		return false;
   250e4:	2000      	movs	r0, #0
   250e6:	4770      	bx	lr
		if (err) {
   250e8:	b102      	cbz	r2, 250ec <range_is_valid+0x1a>
			*err = start;
   250ea:	8010      	strh	r0, [r2, #0]
		return false;
   250ec:	2000      	movs	r0, #0
   250ee:	4770      	bx	lr

000250f0 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   250f0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   250f4:	d201      	bcs.n	250fa <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   250f6:	200e      	movs	r0, #14
}
   250f8:	4770      	bx	lr
		return -err;
   250fa:	4240      	negs	r0, r0
   250fc:	b2c0      	uxtb	r0, r0
   250fe:	4770      	bx	lr

00025100 <attr_read_type_cb>:
{
   25100:	b410      	push	{r4}
	if (!data->rsp->len) {
   25102:	68d4      	ldr	r4, [r2, #12]
   25104:	7823      	ldrb	r3, [r4, #0]
   25106:	b923      	cbnz	r3, 25112 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   25108:	3102      	adds	r1, #2
   2510a:	7021      	strb	r1, [r4, #0]
	return true;
   2510c:	2001      	movs	r0, #1
}
   2510e:	bc10      	pop	{r4}
   25110:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25112:	3102      	adds	r1, #2
   25114:	428b      	cmp	r3, r1
   25116:	d005      	beq.n	25124 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   25118:	8983      	ldrh	r3, [r0, #12]
   2511a:	3b02      	subs	r3, #2
   2511c:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2511e:	2000      	movs	r0, #0
   25120:	6110      	str	r0, [r2, #16]
		return false;
   25122:	e7f4      	b.n	2510e <attr_read_type_cb+0xe>
	return true;
   25124:	2001      	movs	r0, #1
   25126:	e7f2      	b.n	2510e <attr_read_type_cb+0xe>

00025128 <attr_read_group_cb>:
	if (!data->rsp->len) {
   25128:	68d0      	ldr	r0, [r2, #12]
   2512a:	7803      	ldrb	r3, [r0, #0]
   2512c:	b91b      	cbnz	r3, 25136 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2512e:	3104      	adds	r1, #4
   25130:	7001      	strb	r1, [r0, #0]
	return true;
   25132:	2001      	movs	r0, #1
   25134:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25136:	3104      	adds	r1, #4
   25138:	428b      	cmp	r3, r1
   2513a:	d006      	beq.n	2514a <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   2513c:	6891      	ldr	r1, [r2, #8]
   2513e:	898b      	ldrh	r3, [r1, #12]
   25140:	3b04      	subs	r3, #4
   25142:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   25144:	2000      	movs	r0, #0
   25146:	6110      	str	r0, [r2, #16]
		return false;
   25148:	4770      	bx	lr
	return true;
   2514a:	2001      	movs	r0, #1
}
   2514c:	4770      	bx	lr

0002514e <att_prepare_write_req>:
}
   2514e:	2006      	movs	r0, #6
   25150:	4770      	bx	lr

00025152 <att_exec_write_req>:
}
   25152:	2006      	movs	r0, #6
   25154:	4770      	bx	lr

00025156 <att_op_get_type>:
	switch (op) {
   25156:	1e43      	subs	r3, r0, #1
   25158:	2bd1      	cmp	r3, #209	; 0xd1
   2515a:	d874      	bhi.n	25246 <att_op_get_type+0xf0>
   2515c:	e8df f003 	tbb	[pc, r3]
   25160:	696d696d 	.word	0x696d696d
   25164:	696d696d 	.word	0x696d696d
   25168:	696d696d 	.word	0x696d696d
   2516c:	696d696d 	.word	0x696d696d
   25170:	736d696d 	.word	0x736d696d
   25174:	696d6973 	.word	0x696d6973
   25178:	736f736d 	.word	0x736f736d
   2517c:	73737871 	.word	0x73737871
   25180:	73737373 	.word	0x73737373
   25184:	73737373 	.word	0x73737373
   25188:	73737373 	.word	0x73737373
   2518c:	73737373 	.word	0x73737373
   25190:	73737373 	.word	0x73737373
   25194:	73737373 	.word	0x73737373
   25198:	73737373 	.word	0x73737373
   2519c:	73737373 	.word	0x73737373
   251a0:	73737373 	.word	0x73737373
   251a4:	73737373 	.word	0x73737373
   251a8:	73737373 	.word	0x73737373
   251ac:	73737373 	.word	0x73737373
   251b0:	73736b73 	.word	0x73736b73
   251b4:	73737373 	.word	0x73737373
   251b8:	73737373 	.word	0x73737373
   251bc:	73737373 	.word	0x73737373
   251c0:	73737373 	.word	0x73737373
   251c4:	73737373 	.word	0x73737373
   251c8:	73737373 	.word	0x73737373
   251cc:	73737373 	.word	0x73737373
   251d0:	73737373 	.word	0x73737373
   251d4:	73737373 	.word	0x73737373
   251d8:	73737373 	.word	0x73737373
   251dc:	73737373 	.word	0x73737373
   251e0:	73737373 	.word	0x73737373
   251e4:	73737373 	.word	0x73737373
   251e8:	73737373 	.word	0x73737373
   251ec:	73737373 	.word	0x73737373
   251f0:	73737373 	.word	0x73737373
   251f4:	73737373 	.word	0x73737373
   251f8:	73737373 	.word	0x73737373
   251fc:	73737373 	.word	0x73737373
   25200:	73737373 	.word	0x73737373
   25204:	73737373 	.word	0x73737373
   25208:	73737373 	.word	0x73737373
   2520c:	73737373 	.word	0x73737373
   25210:	73737373 	.word	0x73737373
   25214:	73737373 	.word	0x73737373
   25218:	73737373 	.word	0x73737373
   2521c:	73737373 	.word	0x73737373
   25220:	73737373 	.word	0x73737373
   25224:	73737373 	.word	0x73737373
   25228:	73737373 	.word	0x73737373
   2522c:	73737373 	.word	0x73737373
   25230:	6b73      	.short	0x6b73
{
   25232:	2001      	movs	r0, #1
   25234:	4770      	bx	lr
		return ATT_COMMAND;
   25236:	2000      	movs	r0, #0
   25238:	4770      	bx	lr
		return ATT_RESPONSE;
   2523a:	2002      	movs	r0, #2
   2523c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2523e:	2003      	movs	r0, #3
   25240:	4770      	bx	lr
		return ATT_INDICATION;
   25242:	2005      	movs	r0, #5
   25244:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   25246:	f010 0f40 	tst.w	r0, #64	; 0x40
   2524a:	d103      	bne.n	25254 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   2524c:	2006      	movs	r0, #6
   2524e:	4770      	bx	lr
		return ATT_CONFIRMATION;
   25250:	2004      	movs	r0, #4
   25252:	4770      	bx	lr
		return ATT_COMMAND;
   25254:	2000      	movs	r0, #0
}
   25256:	4770      	bx	lr

00025258 <att_chan_attach>:
{
   25258:	b538      	push	{r3, r4, r5, lr}
   2525a:	4604      	mov	r4, r0
   2525c:	460d      	mov	r5, r1
	return list->head;
   2525e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   25260:	b143      	cbz	r3, 25274 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   25262:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   25266:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   25268:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   2526c:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   2526e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   25270:	b122      	cbz	r2, 2527c <att_chan_attach+0x24>
}
   25272:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   25274:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   25276:	f002 fca1 	bl	27bbc <z_impl_k_queue_init>
}
   2527a:	e7f2      	b.n	25262 <att_chan_attach+0xa>
	list->tail = node;
   2527c:	62a3      	str	r3, [r4, #40]	; 0x28
}
   2527e:	e7f8      	b.n	25272 <att_chan_attach+0x1a>

00025280 <chan_req_send>:
{
   25280:	b570      	push	{r4, r5, r6, lr}
   25282:	4606      	mov	r6, r0
   25284:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25286:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2528a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2528c:	2200      	movs	r2, #0
	while (buf) {
   2528e:	b11b      	cbz	r3, 25298 <chan_req_send+0x18>
		bytes += buf->len;
   25290:	899c      	ldrh	r4, [r3, #12]
   25292:	4422      	add	r2, r4
		buf = buf->frags;
   25294:	681b      	ldr	r3, [r3, #0]
   25296:	e7fa      	b.n	2528e <chan_req_send+0xe>
   25298:	4291      	cmp	r1, r2
   2529a:	d30e      	bcc.n	252ba <chan_req_send+0x3a>
	chan->req = req;
   2529c:	f8c6 50f4 	str.w	r5, [r6, #244]	; 0xf4
	buf = req->buf;
   252a0:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   252a2:	2200      	movs	r2, #0
   252a4:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   252a6:	4621      	mov	r1, r4
   252a8:	4630      	mov	r0, r6
   252aa:	f7f6 fad3 	bl	1b854 <chan_send>
	if (err) {
   252ae:	b118      	cbz	r0, 252b8 <chan_req_send+0x38>
		req->buf = buf;
   252b0:	60ac      	str	r4, [r5, #8]
		chan->req = NULL;
   252b2:	2300      	movs	r3, #0
   252b4:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
}
   252b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   252ba:	f06f 0079 	mvn.w	r0, #121	; 0x79
   252be:	e7fb      	b.n	252b8 <chan_req_send+0x38>

000252c0 <bt_att_chan_req_send>:
{
   252c0:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   252c2:	f7ff ffdd 	bl	25280 <chan_req_send>
}
   252c6:	bd08      	pop	{r3, pc}

000252c8 <bt_att_status>:
{
   252c8:	b538      	push	{r3, r4, r5, lr}
   252ca:	f3bf 8f5b 	dmb	ish
   252ce:	680b      	ldr	r3, [r1, #0]
   252d0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   252d4:	f013 0f01 	tst.w	r3, #1
   252d8:	d007      	beq.n	252ea <bt_att_status+0x22>
   252da:	4604      	mov	r4, r0
   252dc:	3808      	subs	r0, #8
	if (!chan->att) {
   252de:	f854 3c08 	ldr.w	r3, [r4, #-8]
   252e2:	b113      	cbz	r3, 252ea <bt_att_status+0x22>
	if (chan->req) {
   252e4:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   252e8:	b102      	cbz	r2, 252ec <bt_att_status+0x24>
}
   252ea:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   252ec:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   252ee:	2d00      	cmp	r5, #0
   252f0:	d0fb      	beq.n	252ea <bt_att_status+0x22>
	return node->next;
   252f2:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   252f4:	605a      	str	r2, [r3, #4]
	return list->tail;
   252f6:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   252f8:	42a9      	cmp	r1, r5
   252fa:	d00e      	beq.n	2531a <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   252fc:	4629      	mov	r1, r5
   252fe:	f7ff ffdf 	bl	252c0 <bt_att_chan_req_send>
   25302:	2800      	cmp	r0, #0
   25304:	daf1      	bge.n	252ea <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   25306:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   2530a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2530c:	602a      	str	r2, [r5, #0]
	list->head = node;
   2530e:	605d      	str	r5, [r3, #4]
	return list->tail;
   25310:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   25312:	2a00      	cmp	r2, #0
   25314:	d1e9      	bne.n	252ea <bt_att_status+0x22>
	list->tail = node;
   25316:	609d      	str	r5, [r3, #8]
}
   25318:	e7e7      	b.n	252ea <bt_att_status+0x22>
	list->tail = node;
   2531a:	609a      	str	r2, [r3, #8]
}
   2531c:	e7ee      	b.n	252fc <bt_att_status+0x34>

0002531e <att_req_send_process>:
{
   2531e:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   25320:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   25322:	2e00      	cmp	r6, #0
   25324:	d038      	beq.n	25398 <att_req_send_process+0x7a>
   25326:	4605      	mov	r5, r0
	return node->next;
   25328:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   2532a:	6043      	str	r3, [r0, #4]
	return list->tail;
   2532c:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2532e:	4296      	cmp	r6, r2
   25330:	d00d      	beq.n	2534e <att_req_send_process+0x30>
	return list->head;
   25332:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25334:	b198      	cbz	r0, 2535e <att_req_send_process+0x40>
   25336:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   2533a:	d012      	beq.n	25362 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2533c:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   25340:	d014      	beq.n	2536c <att_req_send_process+0x4e>
	return node->next;
   25342:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   25346:	b18c      	cbz	r4, 2536c <att_req_send_process+0x4e>
   25348:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   2534c:	e00e      	b.n	2536c <att_req_send_process+0x4e>
	list->tail = node;
   2534e:	6083      	str	r3, [r0, #8]
}
   25350:	e7ef      	b.n	25332 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25352:	4631      	mov	r1, r6
   25354:	f7ff ffb4 	bl	252c0 <bt_att_chan_req_send>
   25358:	2800      	cmp	r0, #0
   2535a:	db0c      	blt.n	25376 <att_req_send_process+0x58>
   2535c:	e01c      	b.n	25398 <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2535e:	4604      	mov	r4, r0
   25360:	e004      	b.n	2536c <att_req_send_process+0x4e>
   25362:	4604      	mov	r4, r0
   25364:	e002      	b.n	2536c <att_req_send_process+0x4e>
   25366:	4623      	mov	r3, r4
   25368:	4620      	mov	r0, r4
   2536a:	461c      	mov	r4, r3
   2536c:	b178      	cbz	r0, 2538e <att_req_send_process+0x70>
		if (!chan->req) {
   2536e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   25372:	2b00      	cmp	r3, #0
   25374:	d0ed      	beq.n	25352 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25376:	2c00      	cmp	r4, #0
   25378:	d0f5      	beq.n	25366 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2537a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   2537e:	d0f3      	beq.n	25368 <att_req_send_process+0x4a>
	return node->next;
   25380:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   25384:	2b00      	cmp	r3, #0
   25386:	d0ef      	beq.n	25368 <att_req_send_process+0x4a>
   25388:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   2538c:	e7ec      	b.n	25368 <att_req_send_process+0x4a>
	return list->head;
   2538e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   25390:	6033      	str	r3, [r6, #0]
	list->head = node;
   25392:	606e      	str	r6, [r5, #4]
	return list->tail;
   25394:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   25396:	b103      	cbz	r3, 2539a <att_req_send_process+0x7c>
}
   25398:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   2539a:	60ae      	str	r6, [r5, #8]
}
   2539c:	e7fc      	b.n	25398 <att_req_send_process+0x7a>

0002539e <bt_att_chan_send>:
{
   2539e:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   253a0:	f7f6 fa58 	bl	1b854 <chan_send>
}
   253a4:	bd08      	pop	{r3, pc}

000253a6 <chan_req_sent>:
{
   253a6:	b508      	push	{r3, lr}
	if (chan->req) {
   253a8:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   253ac:	b133      	cbz	r3, 253bc <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   253ae:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   253b2:	2300      	movs	r3, #0
   253b4:	f500 7088 	add.w	r0, r0, #272	; 0x110
   253b8:	f7fc f890 	bl	214dc <k_work_reschedule>
}
   253bc:	bd08      	pop	{r3, pc}

000253be <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   253be:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   253c0:	f3bf 8f5b 	dmb	ish
   253c4:	e850 3f00 	ldrex	r3, [r0]
   253c8:	f023 0302 	bic.w	r3, r3, #2
   253cc:	e840 3200 	strex	r2, r3, [r0]
   253d0:	2a00      	cmp	r2, #0
   253d2:	d1f7      	bne.n	253c4 <chan_cfm_sent+0x6>
   253d4:	f3bf 8f5b 	dmb	ish
}
   253d8:	4770      	bx	lr

000253da <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   253da:	30f0      	adds	r0, #240	; 0xf0
   253dc:	f3bf 8f5b 	dmb	ish
   253e0:	e850 3f00 	ldrex	r3, [r0]
   253e4:	f023 0301 	bic.w	r3, r3, #1
   253e8:	e840 3200 	strex	r2, r3, [r0]
   253ec:	2a00      	cmp	r2, #0
   253ee:	d1f7      	bne.n	253e0 <chan_rsp_sent+0x6>
   253f0:	f3bf 8f5b 	dmb	ish
}
   253f4:	4770      	bx	lr

000253f6 <process_queue>:
{
   253f6:	b570      	push	{r4, r5, r6, lr}
   253f8:	4605      	mov	r5, r0
   253fa:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   253fc:	2200      	movs	r2, #0
   253fe:	2300      	movs	r3, #0
   25400:	4608      	mov	r0, r1
   25402:	f001 f897 	bl	26534 <net_buf_get>
	if (buf) {
   25406:	b170      	cbz	r0, 25426 <process_queue+0x30>
   25408:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   2540a:	2200      	movs	r2, #0
   2540c:	4601      	mov	r1, r0
   2540e:	4628      	mov	r0, r5
   25410:	f7f6 fa20 	bl	1b854 <chan_send>
		if (err) {
   25414:	4605      	mov	r5, r0
   25416:	b908      	cbnz	r0, 2541c <process_queue+0x26>
}
   25418:	4628      	mov	r0, r5
   2541a:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   2541c:	4631      	mov	r1, r6
   2541e:	4620      	mov	r0, r4
   25420:	f002 fbe4 	bl	27bec <k_queue_prepend>
			return err;
   25424:	e7f8      	b.n	25418 <process_queue+0x22>
	return -ENOENT;
   25426:	f06f 0501 	mvn.w	r5, #1
   2542a:	e7f5      	b.n	25418 <process_queue+0x22>

0002542c <bt_att_sent>:
{
   2542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2542e:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25430:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   25434:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   25438:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   2543c:	b10b      	cbz	r3, 25442 <bt_att_sent+0x16>
		chan->sent(chan);
   2543e:	4630      	mov	r0, r6
   25440:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   25442:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   25446:	f3bf 8f5b 	dmb	ish
   2544a:	e853 2f00 	ldrex	r2, [r3]
   2544e:	f022 0210 	bic.w	r2, r2, #16
   25452:	e843 2100 	strex	r1, r2, [r3]
   25456:	2900      	cmp	r1, #0
   25458:	d1f7      	bne.n	2544a <bt_att_sent+0x1e>
   2545a:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2545e:	b145      	cbz	r5, 25472 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25460:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   25464:	b133      	cbz	r3, 25474 <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   25466:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   2546a:	4630      	mov	r0, r6
   2546c:	f7ff ffc3 	bl	253f6 <process_queue>
	if (!err) {
   25470:	b9c0      	cbnz	r0, 254a4 <bt_att_sent+0x78>
}
   25472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   25474:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25476:	2f00      	cmp	r7, #0
   25478:	d0f5      	beq.n	25466 <bt_att_sent+0x3a>
	return node->next;
   2547a:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   2547c:	606b      	str	r3, [r5, #4]
	return list->tail;
   2547e:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25480:	4297      	cmp	r7, r2
   25482:	d00d      	beq.n	254a0 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25484:	4639      	mov	r1, r7
   25486:	4630      	mov	r0, r6
   25488:	f7ff fefa 	bl	25280 <chan_req_send>
   2548c:	2800      	cmp	r0, #0
   2548e:	daf0      	bge.n	25472 <bt_att_sent+0x46>
	return list->head;
   25490:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   25492:	603b      	str	r3, [r7, #0]
	list->head = node;
   25494:	606f      	str	r7, [r5, #4]
	return list->tail;
   25496:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   25498:	2b00      	cmp	r3, #0
   2549a:	d1e4      	bne.n	25466 <bt_att_sent+0x3a>
	list->tail = node;
   2549c:	60af      	str	r7, [r5, #8]
}
   2549e:	e7e2      	b.n	25466 <bt_att_sent+0x3a>
	list->tail = node;
   254a0:	60ab      	str	r3, [r5, #8]
}
   254a2:	e7ef      	b.n	25484 <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   254a4:	f105 010c 	add.w	r1, r5, #12
   254a8:	4630      	mov	r0, r6
   254aa:	f7ff ffa4 	bl	253f6 <process_queue>
   254ae:	e7e0      	b.n	25472 <bt_att_sent+0x46>

000254b0 <att_send_process>:
{
   254b0:	b570      	push	{r4, r5, r6, lr}
   254b2:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   254b4:	2200      	movs	r2, #0
   254b6:	2300      	movs	r3, #0
   254b8:	300c      	adds	r0, #12
   254ba:	f001 f83b 	bl	26534 <net_buf_get>
	if (!buf) {
   254be:	b360      	cbz	r0, 2551a <att_send_process+0x6a>
   254c0:	4605      	mov	r5, r0
	return list->head;
   254c2:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   254c4:	b158      	cbz	r0, 254de <att_send_process+0x2e>
   254c6:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   254ca:	d00c      	beq.n	254e6 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   254cc:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   254d0:	d006      	beq.n	254e0 <att_send_process+0x30>
	return node->next;
   254d2:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   254d6:	b11c      	cbz	r4, 254e0 <att_send_process+0x30>
   254d8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   254dc:	e000      	b.n	254e0 <att_send_process+0x30>
   254de:	4604      	mov	r4, r0
   254e0:	f06f 0301 	mvn.w	r3, #1
   254e4:	e004      	b.n	254f0 <att_send_process+0x40>
   254e6:	4604      	mov	r4, r0
   254e8:	e7fa      	b.n	254e0 <att_send_process+0x30>
   254ea:	4622      	mov	r2, r4
   254ec:	4620      	mov	r0, r4
   254ee:	4614      	mov	r4, r2
   254f0:	b188      	cbz	r0, 25516 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   254f2:	2200      	movs	r2, #0
   254f4:	4629      	mov	r1, r5
   254f6:	f7ff ff52 	bl	2539e <bt_att_chan_send>
		if (err >= 0) {
   254fa:	1e03      	subs	r3, r0, #0
   254fc:	da0b      	bge.n	25516 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   254fe:	2c00      	cmp	r4, #0
   25500:	d0f3      	beq.n	254ea <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25502:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   25506:	d0f1      	beq.n	254ec <att_send_process+0x3c>
	return node->next;
   25508:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   2550c:	2a00      	cmp	r2, #0
   2550e:	d0ed      	beq.n	254ec <att_send_process+0x3c>
   25510:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   25514:	e7ea      	b.n	254ec <att_send_process+0x3c>
	if (err < 0) {
   25516:	2b00      	cmp	r3, #0
   25518:	db00      	blt.n	2551c <att_send_process+0x6c>
}
   2551a:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   2551c:	4629      	mov	r1, r5
   2551e:	f106 000c 	add.w	r0, r6, #12
   25522:	f002 fb63 	bl	27bec <k_queue_prepend>
   25526:	e7f8      	b.n	2551a <att_send_process+0x6a>

00025528 <write_cb>:
{
   25528:	b5f0      	push	{r4, r5, r6, r7, lr}
   2552a:	b083      	sub	sp, #12
   2552c:	4606      	mov	r6, r0
   2552e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25530:	222a      	movs	r2, #42	; 0x2a
   25532:	4601      	mov	r1, r0
   25534:	6820      	ldr	r0, [r4, #0]
   25536:	f000 fe77 	bl	26228 <bt_gatt_check_perm>
   2553a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2553c:	bb08      	cbnz	r0, 25582 <write_cb+0x5a>
   2553e:	4605      	mov	r5, r0
	if (!data->req) {
   25540:	7a23      	ldrb	r3, [r4, #8]
   25542:	b11b      	cbz	r3, 2554c <write_cb+0x24>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   25544:	2b18      	cmp	r3, #24
   25546:	d016      	beq.n	25576 <write_cb+0x4e>
	uint8_t flags = 0U;
   25548:	4603      	mov	r3, r0
   2554a:	e000      	b.n	2554e <write_cb+0x26>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2554c:	2302      	movs	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2554e:	68b7      	ldr	r7, [r6, #8]
   25550:	9301      	str	r3, [sp, #4]
   25552:	8a63      	ldrh	r3, [r4, #18]
   25554:	9300      	str	r3, [sp, #0]
   25556:	8a23      	ldrh	r3, [r4, #16]
   25558:	68e2      	ldr	r2, [r4, #12]
   2555a:	4631      	mov	r1, r6
   2555c:	6820      	ldr	r0, [r4, #0]
   2555e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   25560:	2800      	cmp	r0, #0
   25562:	db02      	blt.n	2556a <write_cb+0x42>
   25564:	8a23      	ldrh	r3, [r4, #16]
   25566:	4298      	cmp	r0, r3
   25568:	d007      	beq.n	2557a <write_cb+0x52>
		data->err = err_to_att(write);
   2556a:	f7ff fdc1 	bl	250f0 <err_to_att>
   2556e:	7520      	strb	r0, [r4, #20]
}
   25570:	4628      	mov	r0, r5
   25572:	b003      	add	sp, #12
   25574:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   25576:	2304      	movs	r3, #4
   25578:	e7e9      	b.n	2554e <write_cb+0x26>
	data->err = 0U;
   2557a:	2300      	movs	r3, #0
   2557c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2557e:	2501      	movs	r5, #1
   25580:	e7f6      	b.n	25570 <write_cb+0x48>
		return BT_GATT_ITER_STOP;
   25582:	2500      	movs	r5, #0
   25584:	e7f4      	b.n	25570 <write_cb+0x48>

00025586 <bt_att_chan_send_rsp>:
{
   25586:	b538      	push	{r3, r4, r5, lr}
   25588:	4604      	mov	r4, r0
   2558a:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   2558c:	f7ff ff07 	bl	2539e <bt_att_chan_send>
	if (err) {
   25590:	b900      	cbnz	r0, 25594 <bt_att_chan_send_rsp+0xe>
}
   25592:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   25594:	4629      	mov	r1, r5
   25596:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   2559a:	f000 ffea 	bl	26572 <net_buf_put>
}
   2559e:	e7f8      	b.n	25592 <bt_att_chan_send_rsp+0xc>

000255a0 <att_chan_read>:
{
   255a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255a4:	b085      	sub	sp, #20
   255a6:	4680      	mov	r8, r0
   255a8:	4689      	mov	r9, r1
   255aa:	9202      	str	r2, [sp, #8]
   255ac:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   255ae:	6881      	ldr	r1, [r0, #8]
   255b0:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   255b2:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   255b6:	4613      	mov	r3, r2
	size_t bytes = 0;
   255b8:	2200      	movs	r2, #0
	while (buf) {
   255ba:	b11b      	cbz	r3, 255c4 <att_chan_read+0x24>
		bytes += buf->len;
   255bc:	8999      	ldrh	r1, [r3, #12]
   255be:	440a      	add	r2, r1
		buf = buf->frags;
   255c0:	681b      	ldr	r3, [r3, #0]
   255c2:	e7fa      	b.n	255ba <att_chan_read+0x1a>
   255c4:	4290      	cmp	r0, r2
   255c6:	d804      	bhi.n	255d2 <att_chan_read+0x32>
		return 0;
   255c8:	2400      	movs	r4, #0
}
   255ca:	4620      	mov	r0, r4
   255cc:	b005      	add	sp, #20
   255ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   255d2:	9802      	ldr	r0, [sp, #8]
   255d4:	f001 f804 	bl	265e0 <net_buf_frag_last>
   255d8:	4607      	mov	r7, r0
	size_t len, total = 0;
   255da:	f04f 0a00 	mov.w	sl, #0
   255de:	e083      	b.n	256e8 <att_chan_read+0x148>
		bytes += buf->len;
   255e0:	8999      	ldrh	r1, [r3, #12]
   255e2:	440a      	add	r2, r1
		buf = buf->frags;
   255e4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   255e6:	2b00      	cmp	r3, #0
   255e8:	d1fa      	bne.n	255e0 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   255ea:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   255ec:	f107 0608 	add.w	r6, r7, #8
   255f0:	4630      	mov	r0, r6
   255f2:	f001 f851 	bl	26698 <net_buf_simple_tailroom>
   255f6:	4284      	cmp	r4, r0
   255f8:	d32c      	bcc.n	25654 <att_chan_read+0xb4>
   255fa:	4630      	mov	r0, r6
   255fc:	f001 f84c 	bl	26698 <net_buf_simple_tailroom>
   25600:	4606      	mov	r6, r0
		if (!len) {
   25602:	2e00      	cmp	r6, #0
   25604:	d032      	beq.n	2566c <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25606:	f8d9 4004 	ldr.w	r4, [r9, #4]
   2560a:	68b9      	ldr	r1, [r7, #8]
   2560c:	89ba      	ldrh	r2, [r7, #12]
   2560e:	9500      	str	r5, [sp, #0]
   25610:	b2b3      	uxth	r3, r6
   25612:	440a      	add	r2, r1
   25614:	4649      	mov	r1, r9
   25616:	9803      	ldr	r0, [sp, #12]
   25618:	47a0      	blx	r4
		if (read < 0) {
   2561a:	1e04      	subs	r4, r0, #0
   2561c:	db5a      	blt.n	256d4 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   2561e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25620:	b12b      	cbz	r3, 2562e <att_chan_read+0x8e>
   25622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25624:	4621      	mov	r1, r4
   25626:	4638      	mov	r0, r7
   25628:	4798      	blx	r3
   2562a:	2800      	cmp	r0, #0
   2562c:	d061      	beq.n	256f2 <att_chan_read+0x152>
		net_buf_add(frag, read);
   2562e:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   25630:	4621      	mov	r1, r4
   25632:	f107 0008 	add.w	r0, r7, #8
   25636:	f000 fff3 	bl	26620 <net_buf_simple_add>
		total += read;
   2563a:	44a2      	add	sl, r4
		offset += read;
   2563c:	4425      	add	r5, r4
   2563e:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25640:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   25644:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   25646:	2200      	movs	r2, #0
	while (buf) {
   25648:	2b00      	cmp	r3, #0
   2564a:	d049      	beq.n	256e0 <att_chan_read+0x140>
		bytes += buf->len;
   2564c:	8999      	ldrh	r1, [r3, #12]
   2564e:	440a      	add	r2, r1
		buf = buf->frags;
   25650:	681b      	ldr	r3, [r3, #0]
   25652:	e7f9      	b.n	25648 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25654:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   25658:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   2565a:	2200      	movs	r2, #0
	while (buf) {
   2565c:	e002      	b.n	25664 <att_chan_read+0xc4>
		bytes += buf->len;
   2565e:	8999      	ldrh	r1, [r3, #12]
   25660:	440a      	add	r2, r1
		buf = buf->frags;
   25662:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   25664:	2b00      	cmp	r3, #0
   25666:	d1fa      	bne.n	2565e <att_chan_read+0xbe>
   25668:	1ab6      	subs	r6, r6, r2
   2566a:	e7ca      	b.n	25602 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2566c:	9b02      	ldr	r3, [sp, #8]
   2566e:	7998      	ldrb	r0, [r3, #6]
   25670:	f7f8 f96e 	bl	1d950 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   25674:	2200      	movs	r2, #0
   25676:	2300      	movs	r3, #0
   25678:	f000 ff55 	bl	26526 <net_buf_alloc_fixed>
			if (!frag) {
   2567c:	4607      	mov	r7, r0
   2567e:	b150      	cbz	r0, 25696 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   25680:	4601      	mov	r1, r0
   25682:	f8dd b008 	ldr.w	fp, [sp, #8]
   25686:	4658      	mov	r0, fp
   25688:	f000 ffbb 	bl	26602 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2568c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   25690:	4632      	mov	r2, r6
	while (buf) {
   25692:	465b      	mov	r3, fp
   25694:	e004      	b.n	256a0 <att_chan_read+0x100>
				return total;
   25696:	4654      	mov	r4, sl
   25698:	e797      	b.n	255ca <att_chan_read+0x2a>
		bytes += buf->len;
   2569a:	8999      	ldrh	r1, [r3, #12]
   2569c:	440a      	add	r2, r1
		buf = buf->frags;
   2569e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   256a0:	2b00      	cmp	r3, #0
   256a2:	d1fa      	bne.n	2569a <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   256a4:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   256a6:	f107 0b08 	add.w	fp, r7, #8
   256aa:	4658      	mov	r0, fp
   256ac:	f000 fff4 	bl	26698 <net_buf_simple_tailroom>
   256b0:	4284      	cmp	r4, r0
   256b2:	d304      	bcc.n	256be <att_chan_read+0x11e>
   256b4:	4658      	mov	r0, fp
   256b6:	f000 ffef 	bl	26698 <net_buf_simple_tailroom>
   256ba:	4606      	mov	r6, r0
   256bc:	e7a3      	b.n	25606 <att_chan_read+0x66>
   256be:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   256c2:	9b02      	ldr	r3, [sp, #8]
   256c4:	e002      	b.n	256cc <att_chan_read+0x12c>
		bytes += buf->len;
   256c6:	899a      	ldrh	r2, [r3, #12]
   256c8:	4416      	add	r6, r2
		buf = buf->frags;
   256ca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   256cc:	2b00      	cmp	r3, #0
   256ce:	d1fa      	bne.n	256c6 <att_chan_read+0x126>
   256d0:	1b8e      	subs	r6, r1, r6
   256d2:	e798      	b.n	25606 <att_chan_read+0x66>
			if (total) {
   256d4:	f1ba 0f00 	cmp.w	sl, #0
   256d8:	f43f af77 	beq.w	255ca <att_chan_read+0x2a>
				return total;
   256dc:	4654      	mov	r4, sl
   256de:	e774      	b.n	255ca <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   256e0:	4290      	cmp	r0, r2
   256e2:	d906      	bls.n	256f2 <att_chan_read+0x152>
   256e4:	45b3      	cmp	fp, r6
   256e6:	d104      	bne.n	256f2 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   256e8:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   256ec:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   256ee:	2200      	movs	r2, #0
	while (buf) {
   256f0:	e779      	b.n	255e6 <att_chan_read+0x46>
	return total;
   256f2:	4654      	mov	r4, sl
   256f4:	e769      	b.n	255ca <att_chan_read+0x2a>

000256f6 <read_cb>:
{
   256f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   256f8:	b083      	sub	sp, #12
   256fa:	4606      	mov	r6, r0
   256fc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   256fe:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   25700:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   25702:	2300      	movs	r3, #0
   25704:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25706:	2215      	movs	r2, #21
   25708:	4631      	mov	r1, r6
   2570a:	f000 fd8d 	bl	26228 <bt_gatt_check_perm>
   2570e:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25710:	b118      	cbz	r0, 2571a <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   25712:	2500      	movs	r5, #0
}
   25714:	4628      	mov	r0, r5
   25716:	b003      	add	sp, #12
   25718:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2571a:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2571c:	2300      	movs	r3, #0
   2571e:	9301      	str	r3, [sp, #4]
   25720:	9300      	str	r3, [sp, #0]
   25722:	88a3      	ldrh	r3, [r4, #4]
   25724:	68a2      	ldr	r2, [r4, #8]
   25726:	4631      	mov	r1, r6
   25728:	4638      	mov	r0, r7
   2572a:	f7ff ff39 	bl	255a0 <att_chan_read>
	if (ret < 0) {
   2572e:	2800      	cmp	r0, #0
   25730:	db01      	blt.n	25736 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   25732:	2501      	movs	r5, #1
   25734:	e7ee      	b.n	25714 <read_cb+0x1e>
		data->err = err_to_att(ret);
   25736:	f7ff fcdb 	bl	250f0 <err_to_att>
   2573a:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   2573c:	e7ea      	b.n	25714 <read_cb+0x1e>

0002573e <find_info_cb>:
{
   2573e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25742:	4606      	mov	r6, r0
   25744:	460f      	mov	r7, r1
   25746:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   25748:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   2574c:	6893      	ldr	r3, [r2, #8]
   2574e:	b14b      	cbz	r3, 25764 <find_info_cb+0x26>
	switch (data->rsp->format) {
   25750:	68a3      	ldr	r3, [r4, #8]
   25752:	781d      	ldrb	r5, [r3, #0]
   25754:	2d01      	cmp	r5, #1
   25756:	d013      	beq.n	25780 <find_info_cb+0x42>
   25758:	2d02      	cmp	r5, #2
   2575a:	d02d      	beq.n	257b8 <find_info_cb+0x7a>
   2575c:	2500      	movs	r5, #0
}
   2575e:	4628      	mov	r0, r5
   25760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25764:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   25766:	2101      	movs	r1, #1
   25768:	3008      	adds	r0, #8
   2576a:	f000 ff59 	bl	26620 <net_buf_simple_add>
   2576e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25770:	6833      	ldr	r3, [r6, #0]
   25772:	781b      	ldrb	r3, [r3, #0]
   25774:	b913      	cbnz	r3, 2577c <find_info_cb+0x3e>
   25776:	2301      	movs	r3, #1
   25778:	7003      	strb	r3, [r0, #0]
   2577a:	e7e9      	b.n	25750 <find_info_cb+0x12>
   2577c:	2302      	movs	r3, #2
   2577e:	e7fb      	b.n	25778 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25780:	6833      	ldr	r3, [r6, #0]
   25782:	f893 9000 	ldrb.w	r9, [r3]
   25786:	f1b9 0f00 	cmp.w	r9, #0
   2578a:	d001      	beq.n	25790 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   2578c:	2500      	movs	r5, #0
   2578e:	e7e6      	b.n	2575e <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25790:	6860      	ldr	r0, [r4, #4]
   25792:	2104      	movs	r1, #4
   25794:	3008      	adds	r0, #8
   25796:	f000 ff43 	bl	26620 <net_buf_simple_add>
   2579a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2579c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2579e:	6832      	ldr	r2, [r6, #0]
   257a0:	68e3      	ldr	r3, [r4, #12]
   257a2:	8852      	ldrh	r2, [r2, #2]
   257a4:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   257a6:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   257aa:	6862      	ldr	r2, [r4, #4]
   257ac:	8992      	ldrh	r2, [r2, #12]
   257ae:	1a9b      	subs	r3, r3, r2
   257b0:	2b04      	cmp	r3, #4
   257b2:	d8d4      	bhi.n	2575e <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   257b4:	464d      	mov	r5, r9
   257b6:	e7d2      	b.n	2575e <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   257b8:	6833      	ldr	r3, [r6, #0]
   257ba:	781b      	ldrb	r3, [r3, #0]
   257bc:	2b02      	cmp	r3, #2
   257be:	d001      	beq.n	257c4 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   257c0:	2500      	movs	r5, #0
   257c2:	e7cc      	b.n	2575e <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   257c4:	6860      	ldr	r0, [r4, #4]
   257c6:	2112      	movs	r1, #18
   257c8:	3008      	adds	r0, #8
   257ca:	f000 ff29 	bl	26620 <net_buf_simple_add>
   257ce:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   257d0:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   257d2:	68e2      	ldr	r2, [r4, #12]
   257d4:	6833      	ldr	r3, [r6, #0]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   257d6:	f853 5f01 	ldr.w	r5, [r3, #1]!
   257da:	6858      	ldr	r0, [r3, #4]
   257dc:	6899      	ldr	r1, [r3, #8]
   257de:	68db      	ldr	r3, [r3, #12]
   257e0:	f8c2 5002 	str.w	r5, [r2, #2]
   257e4:	f8c2 0006 	str.w	r0, [r2, #6]
   257e8:	f8c2 100a 	str.w	r1, [r2, #10]
   257ec:	f8c2 300e 	str.w	r3, [r2, #14]
		if (chan->chan.tx.mtu - data->buf->len >
   257f0:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   257f4:	6862      	ldr	r2, [r4, #4]
   257f6:	8992      	ldrh	r2, [r2, #12]
   257f8:	1a9b      	subs	r3, r3, r2
   257fa:	2b12      	cmp	r3, #18
   257fc:	d801      	bhi.n	25802 <find_info_cb+0xc4>
	return BT_GATT_ITER_STOP;
   257fe:	2500      	movs	r5, #0
   25800:	e7ad      	b.n	2575e <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   25802:	2501      	movs	r5, #1
   25804:	e7ab      	b.n	2575e <find_info_cb+0x20>

00025806 <att_chan_mtu_updated>:
{
   25806:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   25808:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2580a:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2580c:	b15c      	cbz	r4, 25826 <att_chan_mtu_updated+0x20>
   2580e:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   25812:	d00c      	beq.n	2582e <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25814:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   25818:	d006      	beq.n	25828 <att_chan_mtu_updated+0x22>
	return node->next;
   2581a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2581e:	b11b      	cbz	r3, 25828 <att_chan_mtu_updated+0x22>
   25820:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   25824:	e000      	b.n	25828 <att_chan_mtu_updated+0x22>
   25826:	4623      	mov	r3, r4
   25828:	2200      	movs	r2, #0
   2582a:	4611      	mov	r1, r2
   2582c:	e004      	b.n	25838 <att_chan_mtu_updated+0x32>
   2582e:	4623      	mov	r3, r4
   25830:	e7fa      	b.n	25828 <att_chan_mtu_updated+0x22>
   25832:	461d      	mov	r5, r3
   25834:	461c      	mov	r4, r3
   25836:	462b      	mov	r3, r5
   25838:	b1bc      	cbz	r4, 2586a <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   2583a:	4284      	cmp	r4, r0
   2583c:	d009      	beq.n	25852 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2583e:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   25842:	42a9      	cmp	r1, r5
   25844:	bf38      	it	cc
   25846:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   25848:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   2584c:	42a2      	cmp	r2, r4
   2584e:	bf38      	it	cc
   25850:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25852:	2b00      	cmp	r3, #0
   25854:	d0ed      	beq.n	25832 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25856:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   2585a:	d0eb      	beq.n	25834 <att_chan_mtu_updated+0x2e>
	return node->next;
   2585c:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   25860:	2d00      	cmp	r5, #0
   25862:	d0e7      	beq.n	25834 <att_chan_mtu_updated+0x2e>
   25864:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   25868:	e7e4      	b.n	25834 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2586a:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2586e:	428b      	cmp	r3, r1
   25870:	d803      	bhi.n	2587a <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   25872:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25876:	4294      	cmp	r4, r2
   25878:	d90a      	bls.n	25890 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   2587a:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2587e:	4282      	cmp	r2, r0
   25880:	bf38      	it	cc
   25882:	4602      	movcc	r2, r0
   25884:	4299      	cmp	r1, r3
   25886:	bf38      	it	cc
   25888:	4619      	movcc	r1, r3
   2588a:	6830      	ldr	r0, [r6, #0]
   2588c:	f7f7 ffac 	bl	1d7e8 <bt_gatt_att_max_mtu_changed>
}
   25890:	bd70      	pop	{r4, r5, r6, pc}

00025892 <att_get_fixed_chan>:
{
   25892:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   25894:	2104      	movs	r1, #4
   25896:	f7ff fbc1 	bl	2501c <bt_l2cap_le_lookup_tx_cid>
}
   2589a:	3808      	subs	r0, #8
   2589c:	bd08      	pop	{r3, pc}

0002589e <att_write_cmd>:
{
   2589e:	b530      	push	{r4, r5, lr}
   258a0:	b085      	sub	sp, #20
   258a2:	4605      	mov	r5, r0
   258a4:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   258a6:	f101 0008 	add.w	r0, r1, #8
   258aa:	f000 fee9 	bl	26680 <net_buf_simple_pull_le16>
   258ae:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   258b0:	68a2      	ldr	r2, [r4, #8]
   258b2:	89a1      	ldrh	r1, [r4, #12]
   258b4:	9102      	str	r1, [sp, #8]
   258b6:	9201      	str	r2, [sp, #4]
   258b8:	2100      	movs	r1, #0
   258ba:	9100      	str	r1, [sp, #0]
   258bc:	460a      	mov	r2, r1
   258be:	4628      	mov	r0, r5
   258c0:	f7f6 fc0a 	bl	1c0d8 <att_write_rsp>
}
   258c4:	b005      	add	sp, #20
   258c6:	bd30      	pop	{r4, r5, pc}

000258c8 <att_write_req>:
{
   258c8:	b530      	push	{r4, r5, lr}
   258ca:	b085      	sub	sp, #20
   258cc:	4605      	mov	r5, r0
   258ce:	460c      	mov	r4, r1
   258d0:	f101 0008 	add.w	r0, r1, #8
   258d4:	f000 fed4 	bl	26680 <net_buf_simple_pull_le16>
   258d8:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   258da:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   258dc:	89a1      	ldrh	r1, [r4, #12]
   258de:	9102      	str	r1, [sp, #8]
   258e0:	9201      	str	r2, [sp, #4]
   258e2:	2200      	movs	r2, #0
   258e4:	9200      	str	r2, [sp, #0]
   258e6:	2213      	movs	r2, #19
   258e8:	2112      	movs	r1, #18
   258ea:	4628      	mov	r0, r5
   258ec:	f7f6 fbf4 	bl	1c0d8 <att_write_rsp>
}
   258f0:	b005      	add	sp, #20
   258f2:	bd30      	pop	{r4, r5, pc}

000258f4 <att_read_group_req>:
{
   258f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   258f6:	b089      	sub	sp, #36	; 0x24
   258f8:	4605      	mov	r5, r0
   258fa:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   258fc:	7b0c      	ldrb	r4, [r1, #12]
   258fe:	3c04      	subs	r4, #4
   25900:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   25902:	2c02      	cmp	r4, #2
   25904:	d001      	beq.n	2590a <att_read_group_req+0x16>
   25906:	2c10      	cmp	r4, #16
   25908:	d142      	bne.n	25990 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2590a:	2104      	movs	r1, #4
   2590c:	3008      	adds	r0, #8
   2590e:	f000 feaf 	bl	26670 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   25912:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   25914:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   25916:	4622      	mov	r2, r4
   25918:	1d01      	adds	r1, r0, #4
   2591a:	a801      	add	r0, sp, #4
   2591c:	f7fe fd86 	bl	2442c <bt_uuid_create>
   25920:	b3c8      	cbz	r0, 25996 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   25922:	f10d 0216 	add.w	r2, sp, #22
   25926:	4639      	mov	r1, r7
   25928:	4630      	mov	r0, r6
   2592a:	f7ff fbd2 	bl	250d2 <range_is_valid>
   2592e:	b1f0      	cbz	r0, 2596e <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   25930:	2300      	movs	r3, #0
   25932:	f88d 3018 	strb.w	r3, [sp, #24]
   25936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2593a:	f8ad 301a 	strh.w	r3, [sp, #26]
   2593e:	a906      	add	r1, sp, #24
   25940:	a801      	add	r0, sp, #4
   25942:	f7fe fd55 	bl	243f0 <bt_uuid_cmp>
   25946:	b158      	cbz	r0, 25960 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   25948:	2300      	movs	r3, #0
   2594a:	f88d 301c 	strb.w	r3, [sp, #28]
   2594e:	f642 0301 	movw	r3, #10241	; 0x2801
   25952:	f8ad 301e 	strh.w	r3, [sp, #30]
   25956:	a907      	add	r1, sp, #28
   25958:	a801      	add	r0, sp, #4
   2595a:	f7fe fd49 	bl	243f0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   2595e:	b978      	cbnz	r0, 25980 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   25960:	463b      	mov	r3, r7
   25962:	4632      	mov	r2, r6
   25964:	a901      	add	r1, sp, #4
   25966:	4628      	mov	r0, r5
   25968:	f7f6 fc82 	bl	1c270 <att_read_group_rsp>
   2596c:	e011      	b.n	25992 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   2596e:	2301      	movs	r3, #1
   25970:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   25974:	2110      	movs	r1, #16
   25976:	4628      	mov	r0, r5
   25978:	f7f6 fa3a 	bl	1bdf0 <send_err_rsp>
		return 0;
   2597c:	2000      	movs	r0, #0
   2597e:	e008      	b.n	25992 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   25980:	2310      	movs	r3, #16
   25982:	4632      	mov	r2, r6
   25984:	4619      	mov	r1, r3
   25986:	4628      	mov	r0, r5
   25988:	f7f6 fa32 	bl	1bdf0 <send_err_rsp>
		return 0;
   2598c:	2000      	movs	r0, #0
   2598e:	e000      	b.n	25992 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   25990:	2004      	movs	r0, #4
}
   25992:	b009      	add	sp, #36	; 0x24
   25994:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   25996:	200e      	movs	r0, #14
   25998:	e7fb      	b.n	25992 <att_read_group_req+0x9e>

0002599a <att_read_blob_req>:
{
   2599a:	b500      	push	{lr}
   2599c:	b083      	sub	sp, #12
	req = (void *)buf->data;
   2599e:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   259a0:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   259a2:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   259a4:	9200      	str	r2, [sp, #0]
   259a6:	220d      	movs	r2, #13
   259a8:	210c      	movs	r1, #12
   259aa:	f7f6 fcf3 	bl	1c394 <att_read_rsp>
}
   259ae:	b003      	add	sp, #12
   259b0:	f85d fb04 	ldr.w	pc, [sp], #4

000259b4 <att_read_req>:
{
   259b4:	b500      	push	{lr}
   259b6:	b083      	sub	sp, #12
	req = (void *)buf->data;
   259b8:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   259ba:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   259bc:	2200      	movs	r2, #0
   259be:	9200      	str	r2, [sp, #0]
   259c0:	220b      	movs	r2, #11
   259c2:	210a      	movs	r1, #10
   259c4:	f7f6 fce6 	bl	1c394 <att_read_rsp>
}
   259c8:	b003      	add	sp, #12
   259ca:	f85d fb04 	ldr.w	pc, [sp], #4

000259ce <att_read_type_req>:
{
   259ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   259d0:	b087      	sub	sp, #28
   259d2:	4605      	mov	r5, r0
   259d4:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   259d6:	7b0c      	ldrb	r4, [r1, #12]
   259d8:	3c04      	subs	r4, #4
   259da:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   259dc:	2c02      	cmp	r4, #2
   259de:	d001      	beq.n	259e4 <att_read_type_req+0x16>
   259e0:	2c10      	cmp	r4, #16
   259e2:	d123      	bne.n	25a2c <att_read_type_req+0x5e>
   259e4:	2104      	movs	r1, #4
   259e6:	3008      	adds	r0, #8
   259e8:	f000 fe42 	bl	26670 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   259ec:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   259ee:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   259f0:	4622      	mov	r2, r4
   259f2:	1d01      	adds	r1, r0, #4
   259f4:	a801      	add	r0, sp, #4
   259f6:	f7fe fd19 	bl	2442c <bt_uuid_create>
   259fa:	b1c8      	cbz	r0, 25a30 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   259fc:	f10d 0216 	add.w	r2, sp, #22
   25a00:	4639      	mov	r1, r7
   25a02:	4630      	mov	r0, r6
   25a04:	f7ff fb65 	bl	250d2 <range_is_valid>
   25a08:	b138      	cbz	r0, 25a1a <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   25a0a:	463b      	mov	r3, r7
   25a0c:	4632      	mov	r2, r6
   25a0e:	a901      	add	r1, sp, #4
   25a10:	4628      	mov	r0, r5
   25a12:	f7f6 fd0f 	bl	1c434 <att_read_type_rsp>
}
   25a16:	b007      	add	sp, #28
   25a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   25a1a:	2301      	movs	r3, #1
   25a1c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   25a20:	2108      	movs	r1, #8
   25a22:	4628      	mov	r0, r5
   25a24:	f7f6 f9e4 	bl	1bdf0 <send_err_rsp>
		return 0;
   25a28:	2000      	movs	r0, #0
   25a2a:	e7f4      	b.n	25a16 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   25a2c:	2004      	movs	r0, #4
   25a2e:	e7f2      	b.n	25a16 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   25a30:	200e      	movs	r0, #14
   25a32:	e7f0      	b.n	25a16 <att_read_type_req+0x48>

00025a34 <att_find_type_req>:
{
   25a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25a38:	b087      	sub	sp, #28
   25a3a:	4607      	mov	r7, r0
   25a3c:	460c      	mov	r4, r1
   25a3e:	2106      	movs	r1, #6
   25a40:	f104 0008 	add.w	r0, r4, #8
   25a44:	f000 fe14 	bl	26670 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   25a48:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   25a4a:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   25a4c:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   25a50:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   25a54:	f10d 020e 	add.w	r2, sp, #14
   25a58:	4631      	mov	r1, r6
   25a5a:	4628      	mov	r0, r5
   25a5c:	f7ff fb39 	bl	250d2 <range_is_valid>
   25a60:	b1d0      	cbz	r0, 25a98 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   25a62:	2300      	movs	r3, #0
   25a64:	f88d 3010 	strb.w	r3, [sp, #16]
   25a68:	f8ad 8012 	strh.w	r8, [sp, #18]
   25a6c:	f88d 3014 	strb.w	r3, [sp, #20]
   25a70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   25a74:	f8ad 3016 	strh.w	r3, [sp, #22]
   25a78:	a905      	add	r1, sp, #20
   25a7a:	a804      	add	r0, sp, #16
   25a7c:	f7fe fcb8 	bl	243f0 <bt_uuid_cmp>
   25a80:	b998      	cbnz	r0, 25aaa <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   25a82:	7b23      	ldrb	r3, [r4, #12]
   25a84:	9300      	str	r3, [sp, #0]
   25a86:	464b      	mov	r3, r9
   25a88:	4632      	mov	r2, r6
   25a8a:	4629      	mov	r1, r5
   25a8c:	4638      	mov	r0, r7
   25a8e:	f7f6 fd1b 	bl	1c4c8 <att_find_type_rsp>
}
   25a92:	b007      	add	sp, #28
   25a94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   25a98:	2301      	movs	r3, #1
   25a9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   25a9e:	2106      	movs	r1, #6
   25aa0:	4638      	mov	r0, r7
   25aa2:	f7f6 f9a5 	bl	1bdf0 <send_err_rsp>
		return 0;
   25aa6:	2000      	movs	r0, #0
   25aa8:	e7f3      	b.n	25a92 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   25aaa:	230a      	movs	r3, #10
   25aac:	462a      	mov	r2, r5
   25aae:	2106      	movs	r1, #6
   25ab0:	4638      	mov	r0, r7
   25ab2:	f7f6 f99d 	bl	1bdf0 <send_err_rsp>
		return 0;
   25ab6:	2000      	movs	r0, #0
   25ab8:	e7eb      	b.n	25a92 <att_find_type_req+0x5e>

00025aba <att_find_info_req>:
{
   25aba:	b570      	push	{r4, r5, r6, lr}
   25abc:	b082      	sub	sp, #8
   25abe:	4604      	mov	r4, r0
	req = (void *)buf->data;
   25ac0:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   25ac2:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   25ac4:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   25ac6:	f10d 0206 	add.w	r2, sp, #6
   25aca:	4631      	mov	r1, r6
   25acc:	4628      	mov	r0, r5
   25ace:	f7ff fb00 	bl	250d2 <range_is_valid>
   25ad2:	b130      	cbz	r0, 25ae2 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   25ad4:	4632      	mov	r2, r6
   25ad6:	4629      	mov	r1, r5
   25ad8:	4620      	mov	r0, r4
   25ada:	f7f6 fd39 	bl	1c550 <att_find_info_rsp>
}
   25ade:	b002      	add	sp, #8
   25ae0:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   25ae2:	2301      	movs	r3, #1
   25ae4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25ae8:	2104      	movs	r1, #4
   25aea:	4620      	mov	r0, r4
   25aec:	f7f6 f980 	bl	1bdf0 <send_err_rsp>
		return 0;
   25af0:	2000      	movs	r0, #0
   25af2:	e7f4      	b.n	25ade <att_find_info_req+0x24>

00025af4 <bt_att_init>:
{
   25af4:	b508      	push	{r3, lr}
	bt_gatt_init();
   25af6:	f7f7 f935 	bl	1cd64 <bt_gatt_init>
}
   25afa:	bd08      	pop	{r3, pc}

00025afc <att_confirm>:
{
   25afc:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25afe:	2300      	movs	r3, #0
   25b00:	898a      	ldrh	r2, [r1, #12]
   25b02:	6889      	ldr	r1, [r1, #8]
   25b04:	f7f6 fdc4 	bl	1c690 <att_handle_rsp>
}
   25b08:	bd08      	pop	{r3, pc}

00025b0a <att_chan_detach>:
{
   25b0a:	b510      	push	{r4, lr}
   25b0c:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   25b0e:	6800      	ldr	r0, [r0, #0]
   25b10:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   25b14:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25b16:	2100      	movs	r1, #0
   25b18:	b1e3      	cbz	r3, 25b54 <att_chan_detach+0x4a>
   25b1a:	4293      	cmp	r3, r2
   25b1c:	d002      	beq.n	25b24 <att_chan_detach+0x1a>
   25b1e:	4619      	mov	r1, r3
   25b20:	681b      	ldr	r3, [r3, #0]
   25b22:	e7f9      	b.n	25b18 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   25b24:	b149      	cbz	r1, 25b3a <att_chan_detach+0x30>
	return node->next;
   25b26:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   25b2a:	600b      	str	r3, [r1, #0]
	return list->tail;
   25b2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   25b2e:	4293      	cmp	r3, r2
   25b30:	d00b      	beq.n	25b4a <att_chan_detach+0x40>
	parent->next = child;
   25b32:	2300      	movs	r3, #0
   25b34:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25b38:	e00c      	b.n	25b54 <att_chan_detach+0x4a>
	return node->next;
   25b3a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   25b3e:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   25b40:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   25b42:	4291      	cmp	r1, r2
   25b44:	d1f5      	bne.n	25b32 <att_chan_detach+0x28>
	list->tail = node;
   25b46:	6283      	str	r3, [r0, #40]	; 0x28
}
   25b48:	e7f3      	b.n	25b32 <att_chan_detach+0x28>
	list->tail = node;
   25b4a:	6281      	str	r1, [r0, #40]	; 0x28
}
   25b4c:	e7f1      	b.n	25b32 <att_chan_detach+0x28>
		net_buf_unref(buf);
   25b4e:	4618      	mov	r0, r3
   25b50:	f000 fd1c 	bl	2658c <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   25b54:	2200      	movs	r2, #0
   25b56:	2300      	movs	r3, #0
   25b58:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   25b5c:	f000 fcea 	bl	26534 <net_buf_get>
   25b60:	4603      	mov	r3, r0
   25b62:	2800      	cmp	r0, #0
   25b64:	d1f3      	bne.n	25b4e <att_chan_detach+0x44>
	if (chan->req) {
   25b66:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   25b6a:	b12b      	cbz	r3, 25b78 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   25b6c:	230e      	movs	r3, #14
   25b6e:	2200      	movs	r2, #0
   25b70:	4611      	mov	r1, r2
   25b72:	4620      	mov	r0, r4
   25b74:	f7f6 fd8c 	bl	1c690 <att_handle_rsp>
	chan->att = NULL;
   25b78:	2300      	movs	r3, #0
   25b7a:	6023      	str	r3, [r4, #0]
}
   25b7c:	bd10      	pop	{r4, pc}

00025b7e <bt_att_disconnected>:
{
   25b7e:	b538      	push	{r3, r4, r5, lr}
   25b80:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   25b82:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   25b86:	b125      	cbz	r5, 25b92 <bt_att_disconnected+0x14>
   25b88:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   25b8a:	f7ff ffbe 	bl	25b0a <att_chan_detach>
	return list->head;
   25b8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   25b90:	b103      	cbz	r3, 25b94 <bt_att_disconnected+0x16>
}
   25b92:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   25b94:	4628      	mov	r0, r5
   25b96:	f7f6 fdd7 	bl	1c748 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   25b9a:	6820      	ldr	r0, [r4, #0]
   25b9c:	f7f7 fe70 	bl	1d880 <bt_gatt_disconnected>
   25ba0:	e7f7      	b.n	25b92 <bt_att_disconnected+0x14>

00025ba2 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   25ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ba6:	b082      	sub	sp, #8
   25ba8:	4607      	mov	r7, r0
   25baa:	460d      	mov	r5, r1
   25bac:	4614      	mov	r4, r2
   25bae:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   25bb0:	f7f5 fcca 	bl	1b548 <att_get>
	if (!att) {
   25bb4:	b158      	cbz	r0, 25bce <bt_att_send+0x2c>
   25bb6:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   25bb8:	b17c      	cbz	r4, 25bda <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   25bba:	9600      	str	r6, [sp, #0]
   25bbc:	4623      	mov	r3, r4
   25bbe:	462a      	mov	r2, r5
   25bc0:	2104      	movs	r1, #4
   25bc2:	4638      	mov	r0, r7
   25bc4:	f7ff f9e8 	bl	24f98 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   25bc8:	b002      	add	sp, #8
   25bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   25bce:	4628      	mov	r0, r5
   25bd0:	f000 fcdc 	bl	2658c <net_buf_unref>
		return -ENOTCONN;
   25bd4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25bd8:	e7f6      	b.n	25bc8 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   25bda:	4629      	mov	r1, r5
   25bdc:	300c      	adds	r0, #12
   25bde:	f000 fcc8 	bl	26572 <net_buf_put>
	att_send_process(att);
   25be2:	4640      	mov	r0, r8
   25be4:	f7ff fc64 	bl	254b0 <att_send_process>
	return 0;
   25be8:	2000      	movs	r0, #0
   25bea:	e7ed      	b.n	25bc8 <bt_att_send+0x26>

00025bec <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   25bec:	b510      	push	{r4, lr}
   25bee:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   25bf0:	f7f5 fcaa 	bl	1b548 <att_get>
	if (!att) {
   25bf4:	b170      	cbz	r0, 25c14 <bt_att_req_send+0x28>
   25bf6:	4603      	mov	r3, r0
	parent->next = child;
   25bf8:	2200      	movs	r2, #0
   25bfa:	6022      	str	r2, [r4, #0]
	return list->tail;
   25bfc:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   25bfe:	b132      	cbz	r2, 25c0e <bt_att_req_send+0x22>
	parent->next = child;
   25c00:	6014      	str	r4, [r2, #0]
	list->tail = node;
   25c02:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   25c04:	4618      	mov	r0, r3
   25c06:	f7ff fb8a 	bl	2531e <att_req_send_process>

	return 0;
   25c0a:	2000      	movs	r0, #0
}
   25c0c:	bd10      	pop	{r4, pc}
   25c0e:	6084      	str	r4, [r0, #8]
	list->head = node;
   25c10:	6044      	str	r4, [r0, #4]
}
   25c12:	e7f7      	b.n	25c04 <bt_att_req_send+0x18>
		return -ENOTCONN;
   25c14:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25c18:	e7f8      	b.n	25c0c <bt_att_req_send+0x20>

00025c1a <update_range>:
{
   25c1a:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   25c1c:	8804      	ldrh	r4, [r0, #0]
   25c1e:	42a2      	cmp	r2, r4
   25c20:	d302      	bcc.n	25c28 <update_range+0xe>
   25c22:	880d      	ldrh	r5, [r1, #0]
   25c24:	42ab      	cmp	r3, r5
   25c26:	d908      	bls.n	25c3a <update_range+0x20>
	if (*start > new_start) {
   25c28:	42a2      	cmp	r2, r4
   25c2a:	d200      	bcs.n	25c2e <update_range+0x14>
		*start = new_start;
   25c2c:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   25c2e:	880a      	ldrh	r2, [r1, #0]
   25c30:	4293      	cmp	r3, r2
   25c32:	d904      	bls.n	25c3e <update_range+0x24>
		*end = new_end;
   25c34:	800b      	strh	r3, [r1, #0]
	return true;
   25c36:	2001      	movs	r0, #1
   25c38:	e002      	b.n	25c40 <update_range+0x26>
		return false;
   25c3a:	2000      	movs	r0, #0
   25c3c:	e000      	b.n	25c40 <update_range+0x26>
	return true;
   25c3e:	2001      	movs	r0, #1
}
   25c40:	bc30      	pop	{r4, r5}
   25c42:	4770      	bx	lr

00025c44 <cf_set_value>:
{
   25c44:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   25c46:	2300      	movs	r3, #0
   25c48:	e001      	b.n	25c4e <cf_set_value+0xa>
   25c4a:	3301      	adds	r3, #1
   25c4c:	b29b      	uxth	r3, r3
   25c4e:	2b02      	cmp	r3, #2
   25c50:	d824      	bhi.n	25c9c <cf_set_value+0x58>
   25c52:	08dd      	lsrs	r5, r3, #3
   25c54:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   25c58:	d90f      	bls.n	25c7a <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   25c5a:	1944      	adds	r4, r0, r5
   25c5c:	7a24      	ldrb	r4, [r4, #8]
   25c5e:	f003 0607 	and.w	r6, r3, #7
   25c62:	40f4      	lsrs	r4, r6
   25c64:	f014 0f01 	tst.w	r4, #1
   25c68:	d0ef      	beq.n	25c4a <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   25c6a:	5d4c      	ldrb	r4, [r1, r5]
   25c6c:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   25c70:	f016 0f01 	tst.w	r6, #1
   25c74:	d1e9      	bne.n	25c4a <cf_set_value+0x6>
			return false;
   25c76:	2000      	movs	r0, #0
   25c78:	e013      	b.n	25ca2 <cf_set_value+0x5e>
   25c7a:	2300      	movs	r3, #0
   25c7c:	e008      	b.n	25c90 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   25c7e:	5ccc      	ldrb	r4, [r1, r3]
   25c80:	f004 0407 	and.w	r4, r4, #7
   25c84:	18c5      	adds	r5, r0, r3
   25c86:	7a2e      	ldrb	r6, [r5, #8]
   25c88:	4334      	orrs	r4, r6
   25c8a:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   25c8c:	3301      	adds	r3, #1
   25c8e:	b29b      	uxth	r3, r3
   25c90:	4293      	cmp	r3, r2
   25c92:	d205      	bcs.n	25ca0 <cf_set_value+0x5c>
   25c94:	2b00      	cmp	r3, #0
   25c96:	d0f2      	beq.n	25c7e <cf_set_value+0x3a>
	return true;
   25c98:	2001      	movs	r0, #1
   25c9a:	e002      	b.n	25ca2 <cf_set_value+0x5e>
   25c9c:	2300      	movs	r3, #0
   25c9e:	e7f7      	b.n	25c90 <cf_set_value+0x4c>
   25ca0:	2001      	movs	r0, #1
}
   25ca2:	bc70      	pop	{r4, r5, r6}
   25ca4:	4770      	bx	lr

00025ca6 <gatt_ccc_changed>:
{
   25ca6:	b510      	push	{r4, lr}
   25ca8:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   25caa:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   25cac:	460b      	mov	r3, r1
   25cae:	2b00      	cmp	r3, #0
   25cb0:	dd07      	ble.n	25cc2 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   25cb2:	8953      	ldrh	r3, [r2, #10]
   25cb4:	4299      	cmp	r1, r3
   25cb6:	d003      	beq.n	25cc0 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   25cb8:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   25cba:	68d3      	ldr	r3, [r2, #12]
   25cbc:	b103      	cbz	r3, 25cc0 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   25cbe:	4798      	blx	r3
}
   25cc0:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   25cc2:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   25cc6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   25cca:	8924      	ldrh	r4, [r4, #8]
   25ccc:	428c      	cmp	r4, r1
   25cce:	d900      	bls.n	25cd2 <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   25cd0:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   25cd2:	3301      	adds	r3, #1
   25cd4:	e7eb      	b.n	25cae <gatt_ccc_changed+0x8>

00025cd6 <gatt_indicate_rsp>:
{
   25cd6:	b510      	push	{r4, lr}
   25cd8:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25cda:	68a3      	ldr	r3, [r4, #8]
   25cdc:	b113      	cbz	r3, 25ce4 <gatt_indicate_rsp+0xe>
   25cde:	460a      	mov	r2, r1
		params->func(conn, params, err);
   25ce0:	4621      	mov	r1, r4
   25ce2:	4798      	blx	r3
	params->_ref--;
   25ce4:	7da3      	ldrb	r3, [r4, #22]
   25ce6:	3b01      	subs	r3, #1
   25ce8:	b2db      	uxtb	r3, r3
   25cea:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25cec:	68e2      	ldr	r2, [r4, #12]
   25cee:	b112      	cbz	r2, 25cf6 <gatt_indicate_rsp+0x20>
   25cf0:	b90b      	cbnz	r3, 25cf6 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   25cf2:	4620      	mov	r0, r4
   25cf4:	4790      	blx	r2
}
   25cf6:	bd10      	pop	{r4, pc}

00025cf8 <match_uuid>:
	data->attr = attr;
   25cf8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25cfa:	8091      	strh	r1, [r2, #4]
}
   25cfc:	2000      	movs	r0, #0
   25cfe:	4770      	bx	lr

00025d00 <write_name>:
{
   25d00:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d02:	b093      	sub	sp, #76	; 0x4c
   25d04:	4616      	mov	r6, r2
   25d06:	461c      	mov	r4, r3
   25d08:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25d0c:	2100      	movs	r1, #0
   25d0e:	9101      	str	r1, [sp, #4]
   25d10:	223d      	movs	r2, #61	; 0x3d
   25d12:	a802      	add	r0, sp, #8
   25d14:	f002 fbe4 	bl	284e0 <memset>
	if (offset >= sizeof(value)) {
   25d18:	2d40      	cmp	r5, #64	; 0x40
   25d1a:	d80f      	bhi.n	25d3c <write_name+0x3c>
	if (offset + len >= sizeof(value)) {
   25d1c:	4627      	mov	r7, r4
   25d1e:	4425      	add	r5, r4
   25d20:	2d40      	cmp	r5, #64	; 0x40
   25d22:	d80e      	bhi.n	25d42 <write_name+0x42>
	memcpy(value, buf, len);
   25d24:	2341      	movs	r3, #65	; 0x41
   25d26:	4622      	mov	r2, r4
   25d28:	4631      	mov	r1, r6
   25d2a:	a801      	add	r0, sp, #4
   25d2c:	f002 fbc5 	bl	284ba <__memcpy_chk>
	bt_set_name(value);
   25d30:	a801      	add	r0, sp, #4
   25d32:	f7f3 f927 	bl	18f84 <bt_set_name>
}
   25d36:	4638      	mov	r0, r7
   25d38:	b013      	add	sp, #76	; 0x4c
   25d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25d3c:	f06f 0706 	mvn.w	r7, #6
   25d40:	e7f9      	b.n	25d36 <write_name+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   25d42:	f06f 070c 	mvn.w	r7, #12
   25d46:	e7f6      	b.n	25d36 <write_name+0x36>

00025d48 <gen_hash_m>:
{
   25d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d4a:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25d4c:	6806      	ldr	r6, [r0, #0]
   25d4e:	7835      	ldrb	r5, [r6, #0]
   25d50:	2d00      	cmp	r5, #0
   25d52:	d161      	bne.n	25e18 <gen_hash_m+0xd0>
   25d54:	4607      	mov	r7, r0
   25d56:	4614      	mov	r4, r2
	switch (u16->val) {
   25d58:	8873      	ldrh	r3, [r6, #2]
   25d5a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25d5e:	d019      	beq.n	25d94 <gen_hash_m+0x4c>
   25d60:	d913      	bls.n	25d8a <gen_hash_m+0x42>
   25d62:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25d66:	33ff      	adds	r3, #255	; 0xff
   25d68:	b29b      	uxth	r3, r3
   25d6a:	2b04      	cmp	r3, #4
   25d6c:	d85a      	bhi.n	25e24 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   25d6e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25d72:	2202      	movs	r2, #2
   25d74:	f10d 010e 	add.w	r1, sp, #14
   25d78:	4620      	mov	r0, r4
   25d7a:	f7fe f9cd 	bl	24118 <tc_cmac_update>
   25d7e:	2800      	cmp	r0, #0
   25d80:	d13a      	bne.n	25df8 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   25d82:	f06f 0315 	mvn.w	r3, #21
   25d86:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25d88:	e047      	b.n	25e1a <gen_hash_m+0xd2>
	switch (u16->val) {
   25d8a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25d8e:	b29b      	uxth	r3, r3
   25d90:	2b03      	cmp	r3, #3
   25d92:	d845      	bhi.n	25e20 <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   25d94:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25d98:	2202      	movs	r2, #2
   25d9a:	f10d 010e 	add.w	r1, sp, #14
   25d9e:	4620      	mov	r0, r4
   25da0:	f7fe f9ba 	bl	24118 <tc_cmac_update>
   25da4:	b918      	cbnz	r0, 25dae <gen_hash_m+0x66>
			state->err = -EINVAL;
   25da6:	f06f 0315 	mvn.w	r3, #21
   25daa:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25dac:	e035      	b.n	25e1a <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   25dae:	8873      	ldrh	r3, [r6, #2]
   25db0:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25db4:	2202      	movs	r2, #2
   25db6:	f10d 010e 	add.w	r1, sp, #14
   25dba:	4620      	mov	r0, r4
   25dbc:	f7fe f9ac 	bl	24118 <tc_cmac_update>
   25dc0:	b180      	cbz	r0, 25de4 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25dc2:	687e      	ldr	r6, [r7, #4]
   25dc4:	2000      	movs	r0, #0
   25dc6:	9000      	str	r0, [sp, #0]
   25dc8:	2310      	movs	r3, #16
   25dca:	eb0d 0203 	add.w	r2, sp, r3
   25dce:	4639      	mov	r1, r7
   25dd0:	47b0      	blx	r6
		if (len < 0) {
   25dd2:	1e02      	subs	r2, r0, #0
   25dd4:	db0a      	blt.n	25dec <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   25dd6:	a904      	add	r1, sp, #16
   25dd8:	4620      	mov	r0, r4
   25dda:	f7fe f99d 	bl	24118 <tc_cmac_update>
   25dde:	b138      	cbz	r0, 25df0 <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   25de0:	2501      	movs	r5, #1
   25de2:	e01a      	b.n	25e1a <gen_hash_m+0xd2>
			state->err = -EINVAL;
   25de4:	f06f 0315 	mvn.w	r3, #21
   25de8:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25dea:	e016      	b.n	25e1a <gen_hash_m+0xd2>
			state->err = len;
   25dec:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25dee:	e014      	b.n	25e1a <gen_hash_m+0xd2>
			state->err = -EINVAL;
   25df0:	f06f 0315 	mvn.w	r3, #21
   25df4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25df6:	e010      	b.n	25e1a <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   25df8:	8873      	ldrh	r3, [r6, #2]
   25dfa:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25dfe:	2202      	movs	r2, #2
   25e00:	f10d 010e 	add.w	r1, sp, #14
   25e04:	4620      	mov	r0, r4
   25e06:	f7fe f987 	bl	24118 <tc_cmac_update>
   25e0a:	b108      	cbz	r0, 25e10 <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   25e0c:	2501      	movs	r5, #1
   25e0e:	e004      	b.n	25e1a <gen_hash_m+0xd2>
			state->err = -EINVAL;
   25e10:	f06f 0315 	mvn.w	r3, #21
   25e14:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25e16:	e000      	b.n	25e1a <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   25e18:	2501      	movs	r5, #1
}
   25e1a:	4628      	mov	r0, r5
   25e1c:	b009      	add	sp, #36	; 0x24
   25e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   25e20:	2501      	movs	r5, #1
   25e22:	e7fa      	b.n	25e1a <gen_hash_m+0xd2>
   25e24:	2501      	movs	r5, #1
   25e26:	e7f8      	b.n	25e1a <gen_hash_m+0xd2>

00025e28 <find_ccc_cfg>:
{
   25e28:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e2a:	b083      	sub	sp, #12
   25e2c:	4607      	mov	r7, r0
   25e2e:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   25e30:	2400      	movs	r4, #0
   25e32:	b11c      	cbz	r4, 25e3c <find_ccc_cfg+0x14>
	return NULL;
   25e34:	2600      	movs	r6, #0
}
   25e36:	4630      	mov	r0, r6
   25e38:	b003      	add	sp, #12
   25e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   25e3c:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   25e40:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   25e44:	b167      	cbz	r7, 25e60 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   25e46:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   25e4a:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25e4c:	3201      	adds	r2, #1
   25e4e:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   25e52:	4638      	mov	r0, r7
   25e54:	f7fe ffd3 	bl	24dfe <bt_conn_is_peer_addr_le>
   25e58:	2800      	cmp	r0, #0
   25e5a:	d1ec      	bne.n	25e36 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   25e5c:	3401      	adds	r4, #1
   25e5e:	e7e8      	b.n	25e32 <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25e60:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   25e64:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   25e68:	2300      	movs	r3, #0
   25e6a:	9300      	str	r3, [sp, #0]
   25e6c:	f8cd 3003 	str.w	r3, [sp, #3]
   25e70:	2207      	movs	r2, #7
   25e72:	4669      	mov	r1, sp
   25e74:	3001      	adds	r0, #1
   25e76:	f002 fb04 	bl	28482 <memcmp>
   25e7a:	2800      	cmp	r0, #0
   25e7c:	d1ee      	bne.n	25e5c <find_ccc_cfg+0x34>
   25e7e:	e7da      	b.n	25e36 <find_ccc_cfg+0xe>

00025e80 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   25e80:	2300      	movs	r3, #0
   25e82:	6003      	str	r3, [r0, #0]
   25e84:	6043      	str	r3, [r0, #4]
   25e86:	6083      	str	r3, [r0, #8]
}
   25e88:	4770      	bx	lr

00025e8a <bt_gatt_clear_sc>:
{
   25e8a:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   25e8c:	f7f6 fd0e 	bl	1c8ac <find_sc_cfg>
	if (!cfg) {
   25e90:	b108      	cbz	r0, 25e96 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   25e92:	f7ff fff5 	bl	25e80 <clear_sc_cfg>
}
   25e96:	2000      	movs	r0, #0
   25e98:	bd08      	pop	{r3, pc}

00025e9a <sc_reset>:
   25e9a:	2300      	movs	r3, #0
   25e9c:	6083      	str	r3, [r0, #8]
}
   25e9e:	4770      	bx	lr

00025ea0 <sc_restore_rsp>:
{
   25ea0:	b538      	push	{r3, r4, r5, lr}
   25ea2:	4605      	mov	r5, r0
   25ea4:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   25ea6:	f7f6 fcd7 	bl	1c858 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   25eaa:	b188      	cbz	r0, 25ed0 <sc_restore_rsp+0x30>
   25eac:	4603      	mov	r3, r0
   25eae:	7a02      	ldrb	r2, [r0, #8]
   25eb0:	f012 0f01 	tst.w	r2, #1
   25eb4:	d00c      	beq.n	25ed0 <sc_restore_rsp+0x30>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25eb6:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25eb8:	f3bf 8f5b 	dmb	ish
   25ebc:	e853 2f00 	ldrex	r2, [r3]
   25ec0:	f042 0201 	orr.w	r2, r2, #1
   25ec4:	e843 2100 	strex	r1, r2, [r3]
   25ec8:	2900      	cmp	r1, #0
   25eca:	d1f7      	bne.n	25ebc <sc_restore_rsp+0x1c>
   25ecc:	f3bf 8f5b 	dmb	ish
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   25ed0:	b104      	cbz	r4, 25ed4 <sc_restore_rsp+0x34>
}
   25ed2:	bd38      	pop	{r3, r4, r5, pc}
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25ed4:	f105 0188 	add.w	r1, r5, #136	; 0x88
   25ed8:	7a28      	ldrb	r0, [r5, #8]
   25eda:	f7f6 fce7 	bl	1c8ac <find_sc_cfg>
		if (sc_cfg) {
   25ede:	2800      	cmp	r0, #0
   25ee0:	d0f7      	beq.n	25ed2 <sc_restore_rsp+0x32>
			sc_reset(sc_cfg);
   25ee2:	f7ff ffda 	bl	25e9a <sc_reset>
}
   25ee6:	e7f4      	b.n	25ed2 <sc_restore_rsp+0x32>

00025ee8 <gatt_foreach_iter>:
	if (handle > end_handle) {
   25ee8:	4299      	cmp	r1, r3
   25eea:	d822      	bhi.n	25f32 <gatt_foreach_iter+0x4a>
{
   25eec:	b538      	push	{r3, r4, r5, lr}
   25eee:	4605      	mov	r5, r0
   25ef0:	460c      	mov	r4, r1
	if (handle < start_handle) {
   25ef2:	4291      	cmp	r1, r2
   25ef4:	d31f      	bcc.n	25f36 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   25ef6:	9b04      	ldr	r3, [sp, #16]
   25ef8:	b123      	cbz	r3, 25f04 <gatt_foreach_iter+0x1c>
   25efa:	6801      	ldr	r1, [r0, #0]
   25efc:	4618      	mov	r0, r3
   25efe:	f7fe fa77 	bl	243f0 <bt_uuid_cmp>
   25f02:	b9d0      	cbnz	r0, 25f3a <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   25f04:	9b05      	ldr	r3, [sp, #20]
   25f06:	b12b      	cbz	r3, 25f14 <gatt_foreach_iter+0x2c>
   25f08:	68eb      	ldr	r3, [r5, #12]
   25f0a:	9a05      	ldr	r2, [sp, #20]
   25f0c:	4293      	cmp	r3, r2
   25f0e:	d001      	beq.n	25f14 <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   25f10:	2001      	movs	r0, #1
   25f12:	e011      	b.n	25f38 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   25f14:	9b06      	ldr	r3, [sp, #24]
   25f16:	881b      	ldrh	r3, [r3, #0]
   25f18:	3b01      	subs	r3, #1
   25f1a:	9a06      	ldr	r2, [sp, #24]
   25f1c:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   25f1e:	9a08      	ldr	r2, [sp, #32]
   25f20:	4621      	mov	r1, r4
   25f22:	4628      	mov	r0, r5
   25f24:	9b07      	ldr	r3, [sp, #28]
   25f26:	4798      	blx	r3
	if (!*num_matches) {
   25f28:	9b06      	ldr	r3, [sp, #24]
   25f2a:	881b      	ldrh	r3, [r3, #0]
   25f2c:	b923      	cbnz	r3, 25f38 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   25f2e:	2000      	movs	r0, #0
   25f30:	e002      	b.n	25f38 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   25f32:	2000      	movs	r0, #0
}
   25f34:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   25f36:	2001      	movs	r0, #1
}
   25f38:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   25f3a:	2001      	movs	r0, #1
   25f3c:	e7fc      	b.n	25f38 <gatt_foreach_iter+0x50>

00025f3e <gatt_req_alloc>:
{
   25f3e:	b538      	push	{r3, r4, r5, lr}
   25f40:	4605      	mov	r5, r0
   25f42:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   25f44:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   25f48:	2100      	movs	r1, #0
   25f4a:	f7f6 fb73 	bl	1c634 <bt_att_req_alloc>
	if (!req) {
   25f4e:	4603      	mov	r3, r0
   25f50:	b108      	cbz	r0, 25f56 <gatt_req_alloc+0x18>
	req->func = func;
   25f52:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   25f54:	60c4      	str	r4, [r0, #12]
}
   25f56:	4618      	mov	r0, r3
   25f58:	bd38      	pop	{r3, r4, r5, pc}

00025f5a <clear_ccc_cfg>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25f5a:	2300      	movs	r3, #0
   25f5c:	f8c0 3001 	str.w	r3, [r0, #1]
   25f60:	6043      	str	r3, [r0, #4]
	cfg->id = 0U;
   25f62:	7003      	strb	r3, [r0, #0]
	cfg->value = 0U;
   25f64:	8103      	strh	r3, [r0, #8]
}
   25f66:	4770      	bx	lr

00025f68 <clear_cf_cfg>:
{
   25f68:	b082      	sub	sp, #8
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25f6a:	2300      	movs	r3, #0
   25f6c:	9300      	str	r3, [sp, #0]
   25f6e:	f8cd 3003 	str.w	r3, [sp, #3]
   25f72:	f8c0 3001 	str.w	r3, [r0, #1]
   25f76:	6043      	str	r3, [r0, #4]
__ssp_bos_icheck3(memset, void *, int)
   25f78:	7203      	strb	r3, [r0, #8]
	atomic_set(cfg->flags, 0);
   25f7a:	300c      	adds	r0, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25f7c:	f3bf 8f5b 	dmb	ish
   25f80:	e850 2f00 	ldrex	r2, [r0]
   25f84:	e840 3100 	strex	r1, r3, [r0]
   25f88:	2900      	cmp	r1, #0
   25f8a:	d1f9      	bne.n	25f80 <clear_cf_cfg+0x18>
   25f8c:	f3bf 8f5b 	dmb	ish
}
   25f90:	b002      	add	sp, #8
   25f92:	4770      	bx	lr

00025f94 <remove_cf_cfg>:
{
   25f94:	b570      	push	{r4, r5, r6, lr}
   25f96:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   25f98:	f7f6 fc5e 	bl	1c858 <find_cf_cfg>
	if (!cfg) {
   25f9c:	b300      	cbz	r0, 25fe0 <remove_cf_cfg+0x4c>
   25f9e:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25fa0:	f104 0688 	add.w	r6, r4, #136	; 0x88
   25fa4:	4631      	mov	r1, r6
   25fa6:	7a20      	ldrb	r0, [r4, #8]
   25fa8:	f7fe fbd3 	bl	24752 <bt_addr_le_is_bonded>
   25fac:	b918      	cbnz	r0, 25fb6 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   25fae:	4628      	mov	r0, r5
   25fb0:	f7ff ffda 	bl	25f68 <clear_cf_cfg>
   25fb4:	e014      	b.n	25fe0 <remove_cf_cfg+0x4c>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25fb6:	6833      	ldr	r3, [r6, #0]
   25fb8:	f8c5 3001 	str.w	r3, [r5, #1]
   25fbc:	88b2      	ldrh	r2, [r6, #4]
   25fbe:	79b3      	ldrb	r3, [r6, #6]
   25fc0:	f8a5 2005 	strh.w	r2, [r5, #5]
   25fc4:	71eb      	strb	r3, [r5, #7]
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   25fc6:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25fc8:	f3bf 8f5b 	dmb	ish
   25fcc:	e855 3f00 	ldrex	r3, [r5]
   25fd0:	f023 0302 	bic.w	r3, r3, #2
   25fd4:	e845 3200 	strex	r2, r3, [r5]
   25fd8:	2a00      	cmp	r2, #0
   25fda:	d1f7      	bne.n	25fcc <remove_cf_cfg+0x38>
   25fdc:	f3bf 8f5b 	dmb	ish
}
   25fe0:	bd70      	pop	{r4, r5, r6, pc}

00025fe2 <sc_ccc_cfg_write>:
{
   25fe2:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25fe4:	2a02      	cmp	r2, #2
   25fe6:	d003      	beq.n	25ff0 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   25fe8:	f7f6 fc84 	bl	1c8f4 <sc_clear>
}
   25fec:	2002      	movs	r0, #2
   25fee:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25ff0:	2300      	movs	r3, #0
   25ff2:	461a      	mov	r2, r3
   25ff4:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25ff8:	7a00      	ldrb	r0, [r0, #8]
   25ffa:	f7f6 fdd1 	bl	1cba0 <sc_save>
   25ffe:	e7f5      	b.n	25fec <sc_ccc_cfg_write+0xa>

00026000 <bt_gatt_attr_read>:
{
   26000:	b510      	push	{r4, lr}
   26002:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   26006:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   2600a:	428c      	cmp	r4, r1
   2600c:	d30c      	bcc.n	26028 <bt_gatt_attr_read+0x28>
   2600e:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   26010:	1a64      	subs	r4, r4, r1
   26012:	42a3      	cmp	r3, r4
   26014:	bfa8      	it	ge
   26016:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   26018:	b29c      	uxth	r4, r3
   2601a:	4622      	mov	r2, r4
   2601c:	9b03      	ldr	r3, [sp, #12]
   2601e:	4419      	add	r1, r3
   26020:	f002 fa3d 	bl	2849e <memcpy>
	return len;
   26024:	4620      	mov	r0, r4
}
   26026:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   26028:	f06f 0006 	mvn.w	r0, #6
   2602c:	e7fb      	b.n	26026 <bt_gatt_attr_read+0x26>

0002602e <read_ppcp>:
{
   2602e:	b510      	push	{r4, lr}
   26030:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   26032:	2418      	movs	r4, #24
   26034:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   26038:	2428      	movs	r4, #40	; 0x28
   2603a:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2603e:	2400      	movs	r4, #0
   26040:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   26044:	242a      	movs	r4, #42	; 0x2a
   26046:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2604a:	2408      	movs	r4, #8
   2604c:	9402      	str	r4, [sp, #8]
   2604e:	ac04      	add	r4, sp, #16
   26050:	9401      	str	r4, [sp, #4]
   26052:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   26056:	9400      	str	r4, [sp, #0]
   26058:	f7ff ffd2 	bl	26000 <bt_gatt_attr_read>
}
   2605c:	b006      	add	sp, #24
   2605e:	bd10      	pop	{r4, pc}

00026060 <read_appearance>:
{
   26060:	b510      	push	{r4, lr}
   26062:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   26064:	f240 5452 	movw	r4, #1362	; 0x552
   26068:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2606c:	2402      	movs	r4, #2
   2606e:	9402      	str	r4, [sp, #8]
   26070:	f10d 0416 	add.w	r4, sp, #22
   26074:	9401      	str	r4, [sp, #4]
   26076:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   2607a:	9400      	str	r4, [sp, #0]
   2607c:	f7ff ffc0 	bl	26000 <bt_gatt_attr_read>
}
   26080:	b006      	add	sp, #24
   26082:	bd10      	pop	{r4, pc}

00026084 <read_name>:
{
   26084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26088:	b084      	sub	sp, #16
   2608a:	4604      	mov	r4, r0
   2608c:	460d      	mov	r5, r1
   2608e:	4616      	mov	r6, r2
   26090:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   26092:	f7f3 f893 	bl	191bc <bt_get_name>
   26096:	4680      	mov	r8, r0
				 strlen(name));
   26098:	f7e6 fac4 	bl	c624 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2609c:	b280      	uxth	r0, r0
   2609e:	9002      	str	r0, [sp, #8]
   260a0:	f8cd 8004 	str.w	r8, [sp, #4]
   260a4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   260a8:	9300      	str	r3, [sp, #0]
   260aa:	463b      	mov	r3, r7
   260ac:	4632      	mov	r2, r6
   260ae:	4629      	mov	r1, r5
   260b0:	4620      	mov	r0, r4
   260b2:	f7ff ffa5 	bl	26000 <bt_gatt_attr_read>
}
   260b6:	b004      	add	sp, #16
   260b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000260bc <cf_read>:
{
   260bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   260be:	b087      	sub	sp, #28
   260c0:	4604      	mov	r4, r0
   260c2:	460d      	mov	r5, r1
   260c4:	4616      	mov	r6, r2
   260c6:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   260c8:	2300      	movs	r3, #0
   260ca:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   260ce:	f7f6 fbc3 	bl	1c858 <find_cf_cfg>
	if (cfg) {
   260d2:	b110      	cbz	r0, 260da <cf_read+0x1e>
		memcpy(data, cfg->data, sizeof(data));
   260d4:	7a03      	ldrb	r3, [r0, #8]
   260d6:	f88d 3014 	strb.w	r3, [sp, #20]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   260da:	2301      	movs	r3, #1
   260dc:	9302      	str	r3, [sp, #8]
   260de:	ab05      	add	r3, sp, #20
   260e0:	9301      	str	r3, [sp, #4]
   260e2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   260e6:	9300      	str	r3, [sp, #0]
   260e8:	463b      	mov	r3, r7
   260ea:	4632      	mov	r2, r6
   260ec:	4629      	mov	r1, r5
   260ee:	4620      	mov	r0, r4
   260f0:	f7ff ff86 	bl	26000 <bt_gatt_attr_read>
}
   260f4:	b007      	add	sp, #28
   260f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000260f8 <bt_gatt_attr_read_service>:
{
   260f8:	b570      	push	{r4, r5, r6, lr}
   260fa:	b086      	sub	sp, #24
   260fc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   26100:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   26102:	7826      	ldrb	r6, [r4, #0]
   26104:	b146      	cbz	r6, 26118 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   26106:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   26108:	2610      	movs	r6, #16
   2610a:	9602      	str	r6, [sp, #8]
   2610c:	9401      	str	r4, [sp, #4]
   2610e:	9500      	str	r5, [sp, #0]
   26110:	f7ff ff76 	bl	26000 <bt_gatt_attr_read>
}
   26114:	b006      	add	sp, #24
   26116:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   26118:	8864      	ldrh	r4, [r4, #2]
   2611a:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2611e:	2402      	movs	r4, #2
   26120:	9402      	str	r4, [sp, #8]
   26122:	f10d 0416 	add.w	r4, sp, #22
   26126:	9401      	str	r4, [sp, #4]
   26128:	9500      	str	r5, [sp, #0]
   2612a:	f7ff ff69 	bl	26000 <bt_gatt_attr_read>
   2612e:	e7f1      	b.n	26114 <bt_gatt_attr_read_service+0x1c>

00026130 <bt_gatt_attr_read_ccc>:
{
   26130:	b5f0      	push	{r4, r5, r6, r7, lr}
   26132:	b087      	sub	sp, #28
   26134:	4605      	mov	r5, r0
   26136:	460c      	mov	r4, r1
   26138:	4616      	mov	r6, r2
   2613a:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   2613c:	68c9      	ldr	r1, [r1, #12]
   2613e:	f7ff fe73 	bl	25e28 <find_ccc_cfg>
	if (cfg) {
   26142:	b190      	cbz	r0, 2616a <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   26144:	8903      	ldrh	r3, [r0, #8]
   26146:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2614a:	2302      	movs	r3, #2
   2614c:	9302      	str	r3, [sp, #8]
   2614e:	f10d 0316 	add.w	r3, sp, #22
   26152:	9301      	str	r3, [sp, #4]
   26154:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   26158:	9300      	str	r3, [sp, #0]
   2615a:	463b      	mov	r3, r7
   2615c:	4632      	mov	r2, r6
   2615e:	4621      	mov	r1, r4
   26160:	4628      	mov	r0, r5
   26162:	f7ff ff4d 	bl	26000 <bt_gatt_attr_read>
}
   26166:	b007      	add	sp, #28
   26168:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   2616a:	2300      	movs	r3, #0
   2616c:	f8ad 3016 	strh.w	r3, [sp, #22]
   26170:	e7eb      	b.n	2614a <bt_gatt_attr_read_ccc+0x1a>

00026172 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   26172:	b1b8      	cbz	r0, 261a4 <bt_gatt_attr_value_handle+0x32>
{
   26174:	b510      	push	{r4, lr}
   26176:	b082      	sub	sp, #8
   26178:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2617a:	2300      	movs	r3, #0
   2617c:	f88d 3004 	strb.w	r3, [sp, #4]
   26180:	f642 0303 	movw	r3, #10243	; 0x2803
   26184:	f8ad 3006 	strh.w	r3, [sp, #6]
   26188:	a901      	add	r1, sp, #4
   2618a:	6800      	ldr	r0, [r0, #0]
   2618c:	f7fe f930 	bl	243f0 <bt_uuid_cmp>
   26190:	b950      	cbnz	r0, 261a8 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   26192:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   26194:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   26196:	b940      	cbnz	r0, 261aa <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   26198:	4620      	mov	r0, r4
   2619a:	f7f6 fe27 	bl	1cdec <bt_gatt_attr_get_handle>
   2619e:	3001      	adds	r0, #1
   261a0:	b280      	uxth	r0, r0
   261a2:	e002      	b.n	261aa <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   261a4:	2000      	movs	r0, #0
}
   261a6:	4770      	bx	lr
	uint16_t handle = 0;
   261a8:	2000      	movs	r0, #0
}
   261aa:	b002      	add	sp, #8
   261ac:	bd10      	pop	{r4, pc}

000261ae <bt_gatt_attr_read_chrc>:
{
   261ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   261b2:	b08a      	sub	sp, #40	; 0x28
   261b4:	4605      	mov	r5, r0
   261b6:	460c      	mov	r4, r1
   261b8:	4616      	mov	r6, r2
   261ba:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   261bc:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   261c0:	f898 3006 	ldrb.w	r3, [r8, #6]
   261c4:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   261c8:	4608      	mov	r0, r1
   261ca:	f7ff ffd2 	bl	26172 <bt_gatt_attr_value_handle>
   261ce:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   261d2:	f8d8 1000 	ldr.w	r1, [r8]
   261d6:	780b      	ldrb	r3, [r1, #0]
   261d8:	b993      	cbnz	r3, 26200 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   261da:	884b      	ldrh	r3, [r1, #2]
   261dc:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   261e0:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   261e2:	9302      	str	r3, [sp, #8]
   261e4:	ab05      	add	r3, sp, #20
   261e6:	9301      	str	r3, [sp, #4]
   261e8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   261ec:	9300      	str	r3, [sp, #0]
   261ee:	463b      	mov	r3, r7
   261f0:	4632      	mov	r2, r6
   261f2:	4621      	mov	r1, r4
   261f4:	4628      	mov	r0, r5
   261f6:	f7ff ff03 	bl	26000 <bt_gatt_attr_read>
}
   261fa:	b00a      	add	sp, #40	; 0x28
   261fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   26200:	f851 cf01 	ldr.w	ip, [r1, #1]!
   26204:	6848      	ldr	r0, [r1, #4]
   26206:	688a      	ldr	r2, [r1, #8]
   26208:	68cb      	ldr	r3, [r1, #12]
   2620a:	f8cd c017 	str.w	ip, [sp, #23]
   2620e:	f8cd 001b 	str.w	r0, [sp, #27]
   26212:	f8cd 201f 	str.w	r2, [sp, #31]
   26216:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
		value_len += 16U;
   2621a:	2313      	movs	r3, #19
   2621c:	e7e1      	b.n	261e2 <bt_gatt_attr_read_chrc+0x34>

0002621e <db_hash_process>:
{
   2621e:	b508      	push	{r3, lr}
	db_hash_gen(true);
   26220:	2001      	movs	r0, #1
   26222:	f7f6 fe5d 	bl	1cee0 <db_hash_gen>
}
   26226:	bd08      	pop	{r3, pc}

00026228 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   26228:	f012 0f01 	tst.w	r2, #1
   2622c:	d005      	beq.n	2623a <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2622e:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   26230:	f013 0f15 	tst.w	r3, #21
   26234:	d01a      	beq.n	2626c <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   26236:	684b      	ldr	r3, [r1, #4]
   26238:	b1d3      	cbz	r3, 26270 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2623a:	f012 0f02 	tst.w	r2, #2
   2623e:	d005      	beq.n	2624c <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26240:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   26242:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   26246:	d015      	beq.n	26274 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   26248:	688b      	ldr	r3, [r1, #8]
   2624a:	b1ab      	cbz	r3, 26278 <bt_gatt_check_perm+0x50>
{
   2624c:	b510      	push	{r4, lr}
	mask &= attr->perm;
   2624e:	7c8c      	ldrb	r4, [r1, #18]
   26250:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   26252:	f014 0f30 	tst.w	r4, #48	; 0x30
   26256:	d103      	bne.n	26260 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   26258:	f014 000c 	ands.w	r0, r4, #12
   2625c:	d10e      	bne.n	2627c <bt_gatt_check_perm+0x54>
}
   2625e:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   26260:	f7fe fdb0 	bl	24dc4 <bt_conn_get_security>
   26264:	2802      	cmp	r0, #2
   26266:	d8f7      	bhi.n	26258 <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   26268:	2005      	movs	r0, #5
   2626a:	e7f8      	b.n	2625e <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2626c:	2002      	movs	r0, #2
   2626e:	4770      	bx	lr
   26270:	2002      	movs	r0, #2
   26272:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   26274:	2003      	movs	r0, #3
   26276:	4770      	bx	lr
   26278:	2003      	movs	r0, #3
}
   2627a:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2627c:	200f      	movs	r0, #15
   2627e:	e7ee      	b.n	2625e <bt_gatt_check_perm+0x36>

00026280 <bt_gatt_change_aware>:
{
   26280:	b510      	push	{r4, lr}
   26282:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   26284:	f7f6 fae8 	bl	1c858 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   26288:	2800      	cmp	r0, #0
   2628a:	d042      	beq.n	26312 <bt_gatt_change_aware+0x92>
   2628c:	7a02      	ldrb	r2, [r0, #8]
   2628e:	f012 0f01 	tst.w	r2, #1
   26292:	d101      	bne.n	26298 <bt_gatt_change_aware+0x18>
		return true;
   26294:	2001      	movs	r0, #1
}
   26296:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   26298:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2629c:	f3bf 8f5b 	dmb	ish
   262a0:	68c2      	ldr	r2, [r0, #12]
   262a2:	f3bf 8f5b 	dmb	ish
   262a6:	f012 0f01 	tst.w	r2, #1
   262aa:	d134      	bne.n	26316 <bt_gatt_change_aware+0x96>
	if (!req) {
   262ac:	b90c      	cbnz	r4, 262b2 <bt_gatt_change_aware+0x32>
		return false;
   262ae:	4620      	mov	r0, r4
   262b0:	e7f1      	b.n	26296 <bt_gatt_change_aware+0x16>
   262b2:	f3bf 8f5b 	dmb	ish
   262b6:	68c3      	ldr	r3, [r0, #12]
   262b8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   262bc:	f013 0f02 	tst.w	r3, #2
   262c0:	d10d      	bne.n	262de <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262c2:	f3bf 8f5b 	dmb	ish
   262c6:	e851 3f00 	ldrex	r3, [r1]
   262ca:	f043 0302 	orr.w	r3, r3, #2
   262ce:	e841 3200 	strex	r2, r3, [r1]
   262d2:	2a00      	cmp	r2, #0
   262d4:	d1f7      	bne.n	262c6 <bt_gatt_change_aware+0x46>
   262d6:	f3bf 8f5b 	dmb	ish
	return false;
   262da:	2000      	movs	r0, #0
   262dc:	e7db      	b.n	26296 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   262de:	f3bf 8f5b 	dmb	ish
   262e2:	e851 3f00 	ldrex	r3, [r1]
   262e6:	f023 0302 	bic.w	r3, r3, #2
   262ea:	e841 3200 	strex	r2, r3, [r1]
   262ee:	2a00      	cmp	r2, #0
   262f0:	d1f7      	bne.n	262e2 <bt_gatt_change_aware+0x62>
   262f2:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   262f6:	f3bf 8f5b 	dmb	ish
   262fa:	e851 3f00 	ldrex	r3, [r1]
   262fe:	f043 0301 	orr.w	r3, r3, #1
   26302:	e841 3200 	strex	r2, r3, [r1]
   26306:	2a00      	cmp	r2, #0
   26308:	d1f7      	bne.n	262fa <bt_gatt_change_aware+0x7a>
   2630a:	f3bf 8f5b 	dmb	ish
		return true;
   2630e:	4620      	mov	r0, r4
   26310:	e7c1      	b.n	26296 <bt_gatt_change_aware+0x16>
		return true;
   26312:	2001      	movs	r0, #1
   26314:	e7bf      	b.n	26296 <bt_gatt_change_aware+0x16>
		return true;
   26316:	2001      	movs	r0, #1
   26318:	e7bd      	b.n	26296 <bt_gatt_change_aware+0x16>

0002631a <bt_smp_recv>:
{
   2631a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2631c:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   2631e:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   26320:	f04f 32ff 	mov.w	r2, #4294967295
   26324:	f04f 33ff 	mov.w	r3, #4294967295
   26328:	2100      	movs	r1, #0
   2632a:	4608      	mov	r0, r1
   2632c:	f7fe fe2f 	bl	24f8e <bt_l2cap_create_pdu_timeout>
   26330:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   26332:	f100 0608 	add.w	r6, r0, #8
   26336:	2101      	movs	r1, #1
   26338:	4630      	mov	r0, r6
   2633a:	f000 f971 	bl	26620 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2633e:	2505      	movs	r5, #5
   26340:	7005      	strb	r5, [r0, #0]
   26342:	2101      	movs	r1, #1
   26344:	4630      	mov	r0, r6
   26346:	f000 f96b 	bl	26620 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2634a:	7005      	strb	r5, [r0, #0]
   2634c:	2300      	movs	r3, #0
   2634e:	9300      	str	r3, [sp, #0]
   26350:	4622      	mov	r2, r4
   26352:	2106      	movs	r1, #6
   26354:	4638      	mov	r0, r7
   26356:	f7fe fe1f 	bl	24f98 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2635a:	b910      	cbnz	r0, 26362 <bt_smp_recv+0x48>
}
   2635c:	2000      	movs	r0, #0
   2635e:	b003      	add	sp, #12
   26360:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   26362:	4620      	mov	r0, r4
   26364:	f000 f912 	bl	2658c <net_buf_unref>
   26368:	e7f8      	b.n	2635c <bt_smp_recv+0x42>

0002636a <bt_smp_sign>:
}
   2636a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2636e:	4770      	bx	lr

00026370 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   26370:	2000      	movs	r0, #0
   26372:	4770      	bx	lr

00026374 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   26374:	4770      	bx	lr

00026376 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   26376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2637a:	4604      	mov	r4, r0
   2637c:	460d      	mov	r5, r1
   2637e:	4617      	mov	r7, r2
   26380:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   26382:	7980      	ldrb	r0, [r0, #6]
   26384:	f7f7 fae4 	bl	1d950 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   26388:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2638a:	681b      	ldr	r3, [r3, #0]
   2638c:	f8d3 8000 	ldr.w	r8, [r3]
   26390:	463a      	mov	r2, r7
   26392:	4633      	mov	r3, r6
   26394:	4629      	mov	r1, r5
   26396:	4620      	mov	r0, r4
   26398:	47c0      	blx	r8
}
   2639a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002639e <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   2639e:	b538      	push	{r3, r4, r5, lr}
   263a0:	4604      	mov	r4, r0
   263a2:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   263a4:	7980      	ldrb	r0, [r0, #6]
   263a6:	f7f7 fad3 	bl	1d950 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   263aa:	7963      	ldrb	r3, [r4, #5]
   263ac:	f013 0f02 	tst.w	r3, #2
   263b0:	d105      	bne.n	263be <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   263b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
   263b4:	681b      	ldr	r3, [r3, #0]
   263b6:	689b      	ldr	r3, [r3, #8]
   263b8:	4629      	mov	r1, r5
   263ba:	4620      	mov	r0, r4
   263bc:	4798      	blx	r3
}
   263be:	bd38      	pop	{r3, r4, r5, pc}

000263c0 <net_buf_id>:
{
   263c0:	b510      	push	{r4, lr}
   263c2:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   263c4:	7980      	ldrb	r0, [r0, #6]
   263c6:	f7f7 fac3 	bl	1d950 <net_buf_pool_get>
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   263ca:	7f03      	ldrb	r3, [r0, #28]
   263cc:	3317      	adds	r3, #23
   263ce:	f023 0303 	bic.w	r3, r3, #3
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   263d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   263d4:	1a20      	subs	r0, r4, r0
}
   263d6:	fbb0 f0f3 	udiv	r0, r0, r3
   263da:	bd10      	pop	{r4, pc}

000263dc <fixed_data_alloc>:
{
   263dc:	b570      	push	{r4, r5, r6, lr}
   263de:	4604      	mov	r4, r0
   263e0:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   263e2:	7980      	ldrb	r0, [r0, #6]
   263e4:	f7f7 fab4 	bl	1d950 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   263e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   263ea:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   263ec:	682a      	ldr	r2, [r5, #0]
   263ee:	6819      	ldr	r1, [r3, #0]
   263f0:	428a      	cmp	r2, r1
   263f2:	bf28      	it	cs
   263f4:	460a      	movcs	r2, r1
   263f6:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   263f8:	685d      	ldr	r5, [r3, #4]
   263fa:	681e      	ldr	r6, [r3, #0]
   263fc:	4620      	mov	r0, r4
   263fe:	f7ff ffdf 	bl	263c0 <net_buf_id>
}
   26402:	fb00 5006 	mla	r0, r0, r6, r5
   26406:	bd70      	pop	{r4, r5, r6, pc}

00026408 <net_buf_reset>:
	buf->len  = 0U;
   26408:	2300      	movs	r3, #0
   2640a:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   2640c:	6903      	ldr	r3, [r0, #16]
   2640e:	6083      	str	r3, [r0, #8]
}
   26410:	4770      	bx	lr

00026412 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   26412:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26416:	b083      	sub	sp, #12
   26418:	4605      	mov	r5, r0
   2641a:	9101      	str	r1, [sp, #4]
   2641c:	4616      	mov	r6, r2
   2641e:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   26420:	4610      	mov	r0, r2
   26422:	4619      	mov	r1, r3
   26424:	f001 ff46 	bl	282b4 <sys_clock_timeout_end_calc>
   26428:	4682      	mov	sl, r0
   2642a:	9100      	str	r1, [sp, #0]
   2642c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26430:	f3ef 8211 	mrs	r2, BASEPRI
   26434:	f383 8812 	msr	BASEPRI_MAX, r3
   26438:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2643c:	8b6b      	ldrh	r3, [r5, #26]
   2643e:	2b00      	cmp	r3, #0
   26440:	d042      	beq.n	264c8 <net_buf_alloc_len+0xb6>
   26442:	4693      	mov	fp, r2

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   26444:	8b2a      	ldrh	r2, [r5, #24]
   26446:	4293      	cmp	r3, r2
   26448:	d20b      	bcs.n	26462 <net_buf_alloc_len+0x50>
	return z_impl_k_queue_get(queue, timeout);
   2644a:	2200      	movs	r2, #0
   2644c:	2300      	movs	r3, #0
   2644e:	4628      	mov	r0, r5
   26450:	f7fa fdf0 	bl	21034 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   26454:	4604      	mov	r4, r0
   26456:	b120      	cbz	r0, 26462 <net_buf_alloc_len+0x50>
	__asm__ volatile(
   26458:	f38b 8811 	msr	BASEPRI, fp
   2645c:	f3bf 8f6f 	isb	sy
				k_spin_unlock(&pool->lock, key);
				goto success;
   26460:	e015      	b.n	2648e <net_buf_alloc_len+0x7c>
			}
		}

		uninit_count = pool->uninit_count--;
   26462:	8b6a      	ldrh	r2, [r5, #26]
   26464:	1e53      	subs	r3, r2, #1
   26466:	836b      	strh	r3, [r5, #26]
   26468:	f38b 8811 	msr	BASEPRI, fp
   2646c:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   26470:	7f2c      	ldrb	r4, [r5, #28]
   26472:	3417      	adds	r4, #23
   26474:	f024 0403 	bic.w	r4, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   26478:	8b2b      	ldrh	r3, [r5, #24]
   2647a:	1a9b      	subs	r3, r3, r2
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   2647c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   2647e:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   26482:	4628      	mov	r0, r5
   26484:	f7f7 fa58 	bl	1d938 <pool_id>
   26488:	71a0      	strb	r0, [r4, #6]
	buf->user_data_size = pool->user_data_size;
   2648a:	7f2b      	ldrb	r3, [r5, #28]
   2648c:	71e3      	strb	r3, [r4, #7]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2648e:	9b01      	ldr	r3, [sp, #4]
   26490:	2b00      	cmp	r3, #0
   26492:	d038      	beq.n	26506 <net_buf_alloc_len+0xf4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   26494:	ea56 0307 	orrs.w	r3, r6, r7
   26498:	d005      	beq.n	264a6 <net_buf_alloc_len+0x94>
   2649a:	f1b7 3fff 	cmp.w	r7, #4294967295
   2649e:	bf08      	it	eq
   264a0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   264a4:	d11d      	bne.n	264e2 <net_buf_alloc_len+0xd0>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   264a6:	4632      	mov	r2, r6
   264a8:	463b      	mov	r3, r7
   264aa:	a901      	add	r1, sp, #4
   264ac:	4620      	mov	r0, r4
   264ae:	f7ff ff62 	bl	26376 <data_alloc>
   264b2:	4605      	mov	r5, r0
   264b4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   264b6:	bb40      	cbnz	r0, 2650a <net_buf_alloc_len+0xf8>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   264b8:	79a0      	ldrb	r0, [r4, #6]
   264ba:	f7f7 fa49 	bl	1d950 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   264be:	4621      	mov	r1, r4
   264c0:	f001 fb94 	bl	27bec <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   264c4:	462c      	mov	r4, r5
}
   264c6:	e02a      	b.n	2651e <net_buf_alloc_len+0x10c>
   264c8:	f382 8811 	msr	BASEPRI, r2
   264cc:	f3bf 8f6f 	isb	sy
   264d0:	4632      	mov	r2, r6
   264d2:	463b      	mov	r3, r7
   264d4:	4628      	mov	r0, r5
   264d6:	f7fa fdad 	bl	21034 <z_impl_k_queue_get>
	if (!buf) {
   264da:	4604      	mov	r4, r0
   264dc:	2800      	cmp	r0, #0
   264de:	d1d6      	bne.n	2648e <net_buf_alloc_len+0x7c>
   264e0:	e01d      	b.n	2651e <net_buf_alloc_len+0x10c>
			int64_t remaining = end - sys_clock_tick_get();
   264e2:	f7fb fd7d 	bl	21fe0 <sys_clock_tick_get>
   264e6:	ebba 0800 	subs.w	r8, sl, r0
   264ea:	9b00      	ldr	r3, [sp, #0]
   264ec:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   264f0:	f1b8 0f01 	cmp.w	r8, #1
   264f4:	f179 0300 	sbcs.w	r3, r9, #0
   264f8:	db02      	blt.n	26500 <net_buf_alloc_len+0xee>
				timeout = Z_TIMEOUT_TICKS(remaining);
   264fa:	4646      	mov	r6, r8
   264fc:	464f      	mov	r7, r9
   264fe:	e7d2      	b.n	264a6 <net_buf_alloc_len+0x94>
				timeout = K_NO_WAIT;
   26500:	2600      	movs	r6, #0
   26502:	2700      	movs	r7, #0
   26504:	e7cf      	b.n	264a6 <net_buf_alloc_len+0x94>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   26506:	2300      	movs	r3, #0
   26508:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   2650a:	2301      	movs	r3, #1
   2650c:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   2650e:	2300      	movs	r3, #0
   26510:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   26512:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   26514:	9b01      	ldr	r3, [sp, #4]
   26516:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   26518:	4620      	mov	r0, r4
   2651a:	f7ff ff75 	bl	26408 <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2651e:	4620      	mov	r0, r4
   26520:	b003      	add	sp, #12
   26522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026526 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   26526:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26528:	6a41      	ldr	r1, [r0, #36]	; 0x24
   2652a:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2652c:	6809      	ldr	r1, [r1, #0]
   2652e:	f7ff ff70 	bl	26412 <net_buf_alloc_len>
}
   26532:	bd08      	pop	{r3, pc}

00026534 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   26534:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   26536:	4605      	mov	r5, r0
   26538:	f7fa fd7c 	bl	21034 <z_impl_k_queue_get>
	if (!buf) {
   2653c:	4606      	mov	r6, r0
   2653e:	b190      	cbz	r0, 26566 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   26540:	4604      	mov	r4, r0
   26542:	e00a      	b.n	2655a <net_buf_get+0x26>
   26544:	2200      	movs	r2, #0
   26546:	2300      	movs	r3, #0
   26548:	4628      	mov	r0, r5
   2654a:	f7fa fd73 	bl	21034 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2654e:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   26550:	7963      	ldrb	r3, [r4, #5]
   26552:	f023 0301 	bic.w	r3, r3, #1
   26556:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   26558:	4604      	mov	r4, r0
   2655a:	7963      	ldrb	r3, [r4, #5]
   2655c:	f013 0f01 	tst.w	r3, #1
   26560:	d1f0      	bne.n	26544 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   26562:	2300      	movs	r3, #0
   26564:	6023      	str	r3, [r4, #0]

	return buf;
}
   26566:	4630      	mov	r0, r6
   26568:	bd70      	pop	{r4, r5, r6, pc}

0002656a <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2656a:	6883      	ldr	r3, [r0, #8]
   2656c:	440b      	add	r3, r1
   2656e:	6003      	str	r3, [r0, #0]
}
   26570:	4770      	bx	lr

00026572 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   26572:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   26574:	460a      	mov	r2, r1
   26576:	6814      	ldr	r4, [r2, #0]
   26578:	b12c      	cbz	r4, 26586 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   2657a:	7953      	ldrb	r3, [r2, #5]
   2657c:	f043 0301 	orr.w	r3, r3, #1
   26580:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   26582:	4622      	mov	r2, r4
   26584:	e7f7      	b.n	26576 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   26586:	f001 fb3c 	bl	27c02 <k_queue_append_list>
}
   2658a:	bd10      	pop	{r4, pc}

0002658c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2658c:	b538      	push	{r3, r4, r5, lr}
   2658e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   26590:	e00f      	b.n	265b2 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   26592:	4620      	mov	r0, r4
   26594:	f7ff ff03 	bl	2639e <data_unref>
			buf->__buf = NULL;
   26598:	2300      	movs	r3, #0
   2659a:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   2659c:	2300      	movs	r3, #0
   2659e:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   265a0:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   265a2:	79a0      	ldrb	r0, [r4, #6]
   265a4:	f7f7 f9d4 	bl	1d950 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   265a8:	6a03      	ldr	r3, [r0, #32]
   265aa:	b16b      	cbz	r3, 265c8 <net_buf_unref+0x3c>
			pool->destroy(buf);
   265ac:	4620      	mov	r0, r4
   265ae:	4798      	blx	r3
{
   265b0:	462c      	mov	r4, r5
	while (buf) {
   265b2:	b184      	cbz	r4, 265d6 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   265b4:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   265b6:	7923      	ldrb	r3, [r4, #4]
   265b8:	3b01      	subs	r3, #1
   265ba:	b2db      	uxtb	r3, r3
   265bc:	7123      	strb	r3, [r4, #4]
   265be:	b953      	cbnz	r3, 265d6 <net_buf_unref+0x4a>
		if (buf->__buf) {
   265c0:	6921      	ldr	r1, [r4, #16]
   265c2:	2900      	cmp	r1, #0
   265c4:	d1e5      	bne.n	26592 <net_buf_unref+0x6>
   265c6:	e7e9      	b.n	2659c <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   265c8:	79a0      	ldrb	r0, [r4, #6]
   265ca:	f7f7 f9c1 	bl	1d950 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   265ce:	4621      	mov	r1, r4
   265d0:	f001 fb0c 	bl	27bec <k_queue_prepend>
}
   265d4:	e7ec      	b.n	265b0 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   265d6:	bd38      	pop	{r3, r4, r5, pc}

000265d8 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   265d8:	7902      	ldrb	r2, [r0, #4]
   265da:	3201      	adds	r2, #1
   265dc:	7102      	strb	r2, [r0, #4]
	return buf;
}
   265de:	4770      	bx	lr

000265e0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   265e0:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   265e2:	4618      	mov	r0, r3
   265e4:	681b      	ldr	r3, [r3, #0]
   265e6:	2b00      	cmp	r3, #0
   265e8:	d1fb      	bne.n	265e2 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   265ea:	4770      	bx	lr

000265ec <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   265ec:	b570      	push	{r4, r5, r6, lr}
   265ee:	4604      	mov	r4, r0
   265f0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   265f2:	6806      	ldr	r6, [r0, #0]
   265f4:	b11e      	cbz	r6, 265fe <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   265f6:	4608      	mov	r0, r1
   265f8:	f7ff fff2 	bl	265e0 <net_buf_frag_last>
   265fc:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   265fe:	6025      	str	r5, [r4, #0]
}
   26600:	bd70      	pop	{r4, r5, r6, pc}

00026602 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   26602:	b538      	push	{r3, r4, r5, lr}
   26604:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   26606:	b138      	cbz	r0, 26618 <net_buf_frag_add+0x16>
   26608:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2660a:	f7ff ffe9 	bl	265e0 <net_buf_frag_last>
   2660e:	4629      	mov	r1, r5
   26610:	f7ff ffec 	bl	265ec <net_buf_frag_insert>

	return head;
   26614:	4620      	mov	r0, r4
}
   26616:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   26618:	4608      	mov	r0, r1
   2661a:	f7ff ffdd 	bl	265d8 <net_buf_ref>
   2661e:	e7fa      	b.n	26616 <net_buf_frag_add+0x14>

00026620 <net_buf_simple_add>:
	return buf->data + buf->len;
   26620:	6802      	ldr	r2, [r0, #0]
   26622:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   26624:	4419      	add	r1, r3
   26626:	8081      	strh	r1, [r0, #4]
	return tail;
}
   26628:	18d0      	adds	r0, r2, r3
   2662a:	4770      	bx	lr

0002662c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2662c:	b538      	push	{r3, r4, r5, lr}
   2662e:	460d      	mov	r5, r1
   26630:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26632:	4611      	mov	r1, r2
   26634:	f7ff fff4 	bl	26620 <net_buf_simple_add>
   26638:	4622      	mov	r2, r4
   2663a:	4629      	mov	r1, r5
   2663c:	f001 ff2f 	bl	2849e <memcpy>
}
   26640:	bd38      	pop	{r3, r4, r5, pc}

00026642 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   26642:	b510      	push	{r4, lr}
   26644:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   26646:	2101      	movs	r1, #1
   26648:	f7ff ffea 	bl	26620 <net_buf_simple_add>
	*u8 = val;
   2664c:	7004      	strb	r4, [r0, #0]

	return u8;
}
   2664e:	bd10      	pop	{r4, pc}

00026650 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   26650:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   26652:	6800      	ldr	r0, [r0, #0]
   26654:	1a40      	subs	r0, r0, r1
   26656:	6018      	str	r0, [r3, #0]
	buf->len += len;
   26658:	889a      	ldrh	r2, [r3, #4]
   2665a:	4411      	add	r1, r2
   2665c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2665e:	4770      	bx	lr

00026660 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   26660:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26662:	8882      	ldrh	r2, [r0, #4]
   26664:	1a52      	subs	r2, r2, r1
   26666:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   26668:	6800      	ldr	r0, [r0, #0]
   2666a:	4408      	add	r0, r1
   2666c:	6018      	str	r0, [r3, #0]
}
   2666e:	4770      	bx	lr

00026670 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   26670:	4603      	mov	r3, r0
	void *data = buf->data;
   26672:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26674:	889a      	ldrh	r2, [r3, #4]
   26676:	1a52      	subs	r2, r2, r1
   26678:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2667a:	4401      	add	r1, r0
   2667c:	6019      	str	r1, [r3, #0]

	return data;
}
   2667e:	4770      	bx	lr

00026680 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   26680:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   26682:	6803      	ldr	r3, [r0, #0]
   26684:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26686:	2102      	movs	r1, #2
   26688:	f7ff ffea 	bl	26660 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2668c:	4620      	mov	r0, r4
   2668e:	bd10      	pop	{r4, pc}

00026690 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   26690:	6802      	ldr	r2, [r0, #0]
   26692:	6880      	ldr	r0, [r0, #8]
}
   26694:	1a10      	subs	r0, r2, r0
   26696:	4770      	bx	lr

00026698 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   26698:	b538      	push	{r3, r4, r5, lr}
   2669a:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2669c:	88c5      	ldrh	r5, [r0, #6]
   2669e:	f7ff fff7 	bl	26690 <net_buf_simple_headroom>
   266a2:	1a2d      	subs	r5, r5, r0
   266a4:	88a0      	ldrh	r0, [r4, #4]
}
   266a6:	1a28      	subs	r0, r5, r0
   266a8:	bd38      	pop	{r3, r4, r5, pc}

000266aa <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   266aa:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   266ac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   266b0:	0089      	lsls	r1, r1, #2
   266b2:	3138      	adds	r1, #56	; 0x38
}
   266b4:	4408      	add	r0, r1
   266b6:	4770      	bx	lr

000266b8 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   266b8:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   266ba:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   266be:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   266c2:	4770      	bx	lr

000266c4 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   266c4:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   266c6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   266ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   266ce:	4770      	bx	lr

000266d0 <get_status>:
{
   266d0:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   266d2:	b2c9      	uxtb	r1, r1
   266d4:	f7ff ffe9 	bl	266aa <get_sub_data>
   266d8:	6880      	ldr	r0, [r0, #8]
}
   266da:	f000 0007 	and.w	r0, r0, #7
   266de:	bd08      	pop	{r3, pc}

000266e0 <set_off_state>:
	__asm__ volatile(
   266e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   266e4:	f3ef 8211 	mrs	r2, BASEPRI
   266e8:	f383 8812 	msr	BASEPRI_MAX, r3
   266ec:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   266f0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   266f2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   266f6:	d001      	beq.n	266fc <set_off_state+0x1c>
   266f8:	428b      	cmp	r3, r1
   266fa:	d107      	bne.n	2670c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   266fc:	2301      	movs	r3, #1
   266fe:	6003      	str	r3, [r0, #0]
	int err = 0;
   26700:	2000      	movs	r0, #0
	__asm__ volatile(
   26702:	f382 8811 	msr	BASEPRI, r2
   26706:	f3bf 8f6f 	isb	sy
}
   2670a:	4770      	bx	lr
		err = -EPERM;
   2670c:	f04f 30ff 	mov.w	r0, #4294967295
   26710:	e7f7      	b.n	26702 <set_off_state+0x22>

00026712 <set_starting_state>:
{
   26712:	b410      	push	{r4}
	__asm__ volatile(
   26714:	f04f 0340 	mov.w	r3, #64	; 0x40
   26718:	f3ef 8211 	mrs	r2, BASEPRI
   2671c:	f383 8812 	msr	BASEPRI_MAX, r3
   26720:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   26724:	6803      	ldr	r3, [r0, #0]
   26726:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2672a:	f003 0307 	and.w	r3, r3, #7
   2672e:	2b01      	cmp	r3, #1
   26730:	d009      	beq.n	26746 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   26732:	428c      	cmp	r4, r1
   26734:	d00a      	beq.n	2674c <set_starting_state+0x3a>
		err = -EPERM;
   26736:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2673a:	f382 8811 	msr	BASEPRI, r2
   2673e:	f3bf 8f6f 	isb	sy
}
   26742:	bc10      	pop	{r4}
   26744:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   26746:	6001      	str	r1, [r0, #0]
	int err = 0;
   26748:	2000      	movs	r0, #0
   2674a:	e7f6      	b.n	2673a <set_starting_state+0x28>
		err = -EALREADY;
   2674c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   26750:	e7f3      	b.n	2673a <set_starting_state+0x28>

00026752 <set_on_state>:
	__asm__ volatile(
   26752:	f04f 0340 	mov.w	r3, #64	; 0x40
   26756:	f3ef 8211 	mrs	r2, BASEPRI
   2675a:	f383 8812 	msr	BASEPRI_MAX, r3
   2675e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   26762:	6803      	ldr	r3, [r0, #0]
   26764:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   26768:	f043 0302 	orr.w	r3, r3, #2
   2676c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2676e:	f382 8811 	msr	BASEPRI, r2
   26772:	f3bf 8f6f 	isb	sy
}
   26776:	4770      	bx	lr

00026778 <clkstarted_handle>:
{
   26778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2677a:	4606      	mov	r6, r0
   2677c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2677e:	f7ff ff94 	bl	266aa <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   26782:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   26784:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   26786:	2300      	movs	r3, #0
   26788:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2678c:	f7ff ffe1 	bl	26752 <set_on_state>
	if (callback) {
   26790:	b11d      	cbz	r5, 2679a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   26792:	463a      	mov	r2, r7
   26794:	4621      	mov	r1, r4
   26796:	4630      	mov	r0, r6
   26798:	47a8      	blx	r5
}
   2679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002679c <stop>:
{
   2679c:	b570      	push	{r4, r5, r6, lr}
   2679e:	4606      	mov	r6, r0
   267a0:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   267a2:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   267a4:	4621      	mov	r1, r4
   267a6:	f7ff ff80 	bl	266aa <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   267aa:	4629      	mov	r1, r5
   267ac:	3008      	adds	r0, #8
   267ae:	f7ff ff97 	bl	266e0 <set_off_state>
	if (err < 0) {
   267b2:	2800      	cmp	r0, #0
   267b4:	db06      	blt.n	267c4 <stop+0x28>
	get_sub_config(dev, type)->stop();
   267b6:	4621      	mov	r1, r4
   267b8:	4630      	mov	r0, r6
   267ba:	f7ff ff7d 	bl	266b8 <get_sub_config>
   267be:	6843      	ldr	r3, [r0, #4]
   267c0:	4798      	blx	r3
	return 0;
   267c2:	2000      	movs	r0, #0
}
   267c4:	bd70      	pop	{r4, r5, r6, pc}

000267c6 <api_stop>:
{
   267c6:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   267c8:	2280      	movs	r2, #128	; 0x80
   267ca:	f7ff ffe7 	bl	2679c <stop>
}
   267ce:	bd08      	pop	{r3, pc}

000267d0 <async_start>:
{
   267d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267d4:	4606      	mov	r6, r0
   267d6:	4690      	mov	r8, r2
   267d8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   267da:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   267dc:	4629      	mov	r1, r5
   267de:	f7ff ff64 	bl	266aa <get_sub_data>
   267e2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   267e4:	9906      	ldr	r1, [sp, #24]
   267e6:	3008      	adds	r0, #8
   267e8:	f7ff ff93 	bl	26712 <set_starting_state>
	if (err < 0) {
   267ec:	2800      	cmp	r0, #0
   267ee:	db09      	blt.n	26804 <async_start+0x34>
	subdata->cb = cb;
   267f0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   267f4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   267f6:	4629      	mov	r1, r5
   267f8:	4630      	mov	r0, r6
   267fa:	f7ff ff5d 	bl	266b8 <get_sub_config>
   267fe:	6803      	ldr	r3, [r0, #0]
   26800:	4798      	blx	r3
	return 0;
   26802:	2000      	movs	r0, #0
}
   26804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026808 <api_start>:
{
   26808:	b510      	push	{r4, lr}
   2680a:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2680c:	2480      	movs	r4, #128	; 0x80
   2680e:	9400      	str	r4, [sp, #0]
   26810:	f7ff ffde 	bl	267d0 <async_start>
}
   26814:	b002      	add	sp, #8
   26816:	bd10      	pop	{r4, pc}

00026818 <onoff_started_callback>:
{
   26818:	b510      	push	{r4, lr}
   2681a:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2681c:	b2c9      	uxtb	r1, r1
   2681e:	f7ff ff51 	bl	266c4 <get_onoff_manager>
	notify(mgr, 0);
   26822:	2100      	movs	r1, #0
   26824:	47a0      	blx	r4
}
   26826:	bd10      	pop	{r4, pc}

00026828 <hfclk_start>:
{
   26828:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2682a:	2001      	movs	r0, #1
   2682c:	f7f8 fe94 	bl	1f558 <nrfx_clock_start>
}
   26830:	bd08      	pop	{r3, pc}

00026832 <lfclk_start>:
{
   26832:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   26834:	2000      	movs	r0, #0
   26836:	f7f8 fe8f 	bl	1f558 <nrfx_clock_start>
}
   2683a:	bd08      	pop	{r3, pc}

0002683c <hfclk_stop>:
{
   2683c:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2683e:	2001      	movs	r0, #1
   26840:	f000 fe82 	bl	27548 <nrfx_clock_stop>
}
   26844:	bd08      	pop	{r3, pc}

00026846 <lfclk_stop>:
{
   26846:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   26848:	2000      	movs	r0, #0
   2684a:	f000 fe7d 	bl	27548 <nrfx_clock_stop>
}
   2684e:	bd08      	pop	{r3, pc}

00026850 <blocking_start_callback>:
{
   26850:	b508      	push	{r3, lr}
   26852:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   26854:	f7fa fc2a 	bl	210ac <z_impl_k_sem_give>
}
   26858:	bd08      	pop	{r3, pc}

0002685a <get_pull>:
	if (flags & GPIO_PULL_UP) {
   2685a:	f010 0f10 	tst.w	r0, #16
   2685e:	d104      	bne.n	2686a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
   26860:	f010 0f20 	tst.w	r0, #32
   26864:	d103      	bne.n	2686e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
   26866:	2000      	movs	r0, #0
   26868:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
   2686a:	2003      	movs	r0, #3
   2686c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
   2686e:	2001      	movs	r0, #1
}
   26870:	4770      	bx	lr

00026872 <gpio_nrfx_port_get_raw>:
	return port->config;
   26872:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26874:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26876:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2687a:	600b      	str	r3, [r1, #0]
}
   2687c:	2000      	movs	r0, #0
   2687e:	4770      	bx	lr

00026880 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   26880:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26882:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26884:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26888:	4042      	eors	r2, r0
   2688a:	400a      	ands	r2, r1
   2688c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2688e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   26892:	2000      	movs	r0, #0
   26894:	4770      	bx	lr

00026896 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   26896:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26898:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2689a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2689e:	2000      	movs	r0, #0
   268a0:	4770      	bx	lr

000268a2 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   268a2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268a4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   268a6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   268aa:	2000      	movs	r0, #0
   268ac:	4770      	bx	lr

000268ae <gpio_nrfx_port_toggle_bits>:
	return port->config;
   268ae:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   268b0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   268b2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   268b6:	404b      	eors	r3, r1
    p_reg->OUT = value;
   268b8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   268bc:	2000      	movs	r0, #0
   268be:	4770      	bx	lr

000268c0 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
   268c0:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
   268c4:	d007      	beq.n	268d6 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   268c6:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
   268ca:	d00d      	beq.n	268e8 <get_trigger+0x28>
   268cc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   268d0:	d008      	beq.n	268e4 <get_trigger+0x24>
   268d2:	2001      	movs	r0, #1
}
   268d4:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   268d6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
   268da:	d001      	beq.n	268e0 <get_trigger+0x20>
   268dc:	2005      	movs	r0, #5
   268de:	4770      	bx	lr
   268e0:	2004      	movs	r0, #4
   268e2:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   268e4:	2002      	movs	r0, #2
   268e6:	4770      	bx	lr
   268e8:	2003      	movs	r0, #3
   268ea:	4770      	bx	lr

000268ec <gpio_nrfx_manage_callback>:
{
   268ec:	b470      	push	{r4, r5, r6}
	return port->data;
   268ee:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   268f0:	1d05      	adds	r5, r0, #4
	return list->head;
   268f2:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   268f4:	b1db      	cbz	r3, 2692e <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   268f6:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   268f8:	2400      	movs	r4, #0
   268fa:	e00a      	b.n	26912 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   268fc:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   268fe:	6043      	str	r3, [r0, #4]
	return list->tail;
   26900:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   26902:	42a1      	cmp	r1, r4
   26904:	d10f      	bne.n	26926 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   26906:	606b      	str	r3, [r5, #4]
}
   26908:	e00d      	b.n	26926 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2690a:	606c      	str	r4, [r5, #4]
}
   2690c:	e00b      	b.n	26926 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2690e:	461c      	mov	r4, r3
   26910:	681b      	ldr	r3, [r3, #0]
   26912:	b15b      	cbz	r3, 2692c <gpio_nrfx_manage_callback+0x40>
   26914:	429e      	cmp	r6, r3
   26916:	d1fa      	bne.n	2690e <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   26918:	2c00      	cmp	r4, #0
   2691a:	d0ef      	beq.n	268fc <gpio_nrfx_manage_callback+0x10>
	return node->next;
   2691c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   2691e:	6023      	str	r3, [r4, #0]
	return list->tail;
   26920:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   26922:	4299      	cmp	r1, r3
   26924:	d0f1      	beq.n	2690a <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   26926:	2300      	movs	r3, #0
   26928:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2692a:	e000      	b.n	2692e <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   2692c:	b152      	cbz	r2, 26944 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
   2692e:	b162      	cbz	r2, 2694a <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   26930:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   26932:	600b      	str	r3, [r1, #0]
	list->head = node;
   26934:	6041      	str	r1, [r0, #4]
	return list->tail;
   26936:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   26938:	b10b      	cbz	r3, 2693e <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2693a:	2000      	movs	r0, #0
   2693c:	e006      	b.n	2694c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2693e:	6069      	str	r1, [r5, #4]
   26940:	2000      	movs	r0, #0
}
   26942:	e003      	b.n	2694c <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   26944:	f06f 0015 	mvn.w	r0, #21
   26948:	e000      	b.n	2694c <gpio_nrfx_manage_callback+0x60>
	return 0;
   2694a:	2000      	movs	r0, #0
}
   2694c:	bc70      	pop	{r4, r5, r6}
   2694e:	4770      	bx	lr

00026950 <nrfx_gpio_handler>:
{
   26950:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
   26952:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
   26956:	0940      	lsrs	r0, r0, #5
   26958:	f7f7 fa0c 	bl	1dd74 <get_dev>
	if (port == NULL) {
   2695c:	b1d8      	cbz	r0, 26996 <nrfx_gpio_handler+0x46>
   2695e:	4606      	mov	r6, r0
	return port->data;
   26960:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
   26962:	2501      	movs	r5, #1
   26964:	40a5      	lsls	r5, r4
	return list->head;
   26966:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26968:	b119      	cbz	r1, 26972 <nrfx_gpio_handler+0x22>
   2696a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   2696c:	b149      	cbz	r1, 26982 <nrfx_gpio_handler+0x32>
	return node->next;
   2696e:	680c      	ldr	r4, [r1, #0]
   26970:	e007      	b.n	26982 <nrfx_gpio_handler+0x32>
   26972:	460c      	mov	r4, r1
   26974:	e005      	b.n	26982 <nrfx_gpio_handler+0x32>
   26976:	b164      	cbz	r4, 26992 <nrfx_gpio_handler+0x42>
   26978:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   2697a:	b104      	cbz	r4, 2697e <nrfx_gpio_handler+0x2e>
	return node->next;
   2697c:	6823      	ldr	r3, [r4, #0]
   2697e:	4621      	mov	r1, r4
   26980:	461c      	mov	r4, r3
   26982:	b141      	cbz	r1, 26996 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
   26984:	688a      	ldr	r2, [r1, #8]
   26986:	402a      	ands	r2, r5
   26988:	d0f5      	beq.n	26976 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2698a:	684b      	ldr	r3, [r1, #4]
   2698c:	4630      	mov	r0, r6
   2698e:	4798      	blx	r3
   26990:	e7f1      	b.n	26976 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26992:	4623      	mov	r3, r4
   26994:	e7f3      	b.n	2697e <nrfx_gpio_handler+0x2e>
}
   26996:	bd70      	pop	{r4, r5, r6, pc}

00026998 <z_log_msg2_runtime_create>:
{
   26998:	b510      	push	{r4, lr}
   2699a:	b086      	sub	sp, #24
	va_start(ap, fmt);
   2699c:	ac0a      	add	r4, sp, #40	; 0x28
   2699e:	9405      	str	r4, [sp, #20]
   269a0:	9402      	str	r4, [sp, #8]
   269a2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   269a4:	9401      	str	r4, [sp, #4]
   269a6:	9c08      	ldr	r4, [sp, #32]
   269a8:	9400      	str	r4, [sp, #0]
   269aa:	f7fd fae8 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   269ae:	b006      	add	sp, #24
   269b0:	bd10      	pop	{r4, pc}

000269b2 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   269b2:	b510      	push	{r4, lr}
   269b4:	4604      	mov	r4, r0
   269b6:	2200      	movs	r2, #0
   269b8:	2101      	movs	r1, #1
   269ba:	2003      	movs	r0, #3
   269bc:	f7ee ff20 	bl	15800 <z_arm_irq_priority_set>
   269c0:	4620      	mov	r0, r4
   269c2:	f7f7 fc85 	bl	1e2d0 <init_twi>
   269c6:	bd10      	pop	{r4, pc}

000269c8 <endtx_isr>:
	return dev->config;
   269c8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   269ca:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   269cc:	f04f 0140 	mov.w	r1, #64	; 0x40
   269d0:	f3ef 8211 	mrs	r2, BASEPRI
   269d4:	f381 8812 	msr	BASEPRI_MAX, r1
   269d8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   269dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   269e0:	b131      	cbz	r1, 269f0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   269e2:	2100      	movs	r1, #0
   269e4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   269e8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   269ec:	2101      	movs	r1, #1
   269ee:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   269f0:	f382 8811 	msr	BASEPRI, r2
   269f4:	f3bf 8f6f 	isb	sy
}
   269f8:	4770      	bx	lr

000269fa <uarte_nrfx_isr_int>:
{
   269fa:	b538      	push	{r3, r4, r5, lr}
   269fc:	4604      	mov	r4, r0
	return dev->config;
   269fe:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26a00:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   26a02:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26a06:	f413 7f80 	tst.w	r3, #256	; 0x100
   26a0a:	d002      	beq.n	26a12 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a0c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   26a10:	b9db      	cbnz	r3, 26a4a <uarte_nrfx_isr_int+0x50>
	return dev->config;
   26a12:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26a14:	685b      	ldr	r3, [r3, #4]
   26a16:	f013 0f10 	tst.w	r3, #16
   26a1a:	d015      	beq.n	26a48 <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   26a1c:	f04f 0240 	mov.w	r2, #64	; 0x40
   26a20:	f3ef 8311 	mrs	r3, BASEPRI
   26a24:	f382 8812 	msr	BASEPRI_MAX, r2
   26a28:	f3bf 8f6f 	isb	sy
   26a2c:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   26a30:	b112      	cbz	r2, 26a38 <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26a32:	2200      	movs	r2, #0
   26a34:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   26a38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   26a3c:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   26a40:	f383 8811 	msr	BASEPRI, r3
   26a44:	f3bf 8f6f 	isb	sy
}
   26a48:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   26a4a:	f7ff ffbd 	bl	269c8 <endtx_isr>
   26a4e:	e7e0      	b.n	26a12 <uarte_nrfx_isr_int+0x18>

00026a50 <uarte_nrfx_configure>:
{
   26a50:	b530      	push	{r4, r5, lr}
   26a52:	b083      	sub	sp, #12
   26a54:	4605      	mov	r5, r0
   26a56:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   26a58:	794b      	ldrb	r3, [r1, #5]
   26a5a:	2b01      	cmp	r3, #1
   26a5c:	d006      	beq.n	26a6c <uarte_nrfx_configure+0x1c>
   26a5e:	2b03      	cmp	r3, #3
   26a60:	d011      	beq.n	26a86 <uarte_nrfx_configure+0x36>
   26a62:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   26a66:	4610      	mov	r0, r2
   26a68:	b003      	add	sp, #12
   26a6a:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   26a6c:	2300      	movs	r3, #0
   26a6e:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   26a72:	79a3      	ldrb	r3, [r4, #6]
   26a74:	2b03      	cmp	r3, #3
   26a76:	d147      	bne.n	26b08 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
   26a78:	79e3      	ldrb	r3, [r4, #7]
   26a7a:	b143      	cbz	r3, 26a8e <uarte_nrfx_configure+0x3e>
   26a7c:	2b01      	cmp	r3, #1
   26a7e:	d015      	beq.n	26aac <uarte_nrfx_configure+0x5c>
   26a80:	f06f 0285 	mvn.w	r2, #133	; 0x85
   26a84:	e7ef      	b.n	26a66 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   26a86:	2310      	movs	r3, #16
   26a88:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   26a8c:	e7f1      	b.n	26a72 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   26a8e:	2300      	movs	r3, #0
   26a90:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   26a94:	2300      	movs	r3, #0
   26a96:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   26a9a:	7923      	ldrb	r3, [r4, #4]
   26a9c:	2b01      	cmp	r3, #1
   26a9e:	d02b      	beq.n	26af8 <uarte_nrfx_configure+0xa8>
   26aa0:	2b02      	cmp	r3, #2
   26aa2:	d025      	beq.n	26af0 <uarte_nrfx_configure+0xa0>
   26aa4:	b133      	cbz	r3, 26ab4 <uarte_nrfx_configure+0x64>
   26aa6:	f06f 0285 	mvn.w	r2, #133	; 0x85
   26aaa:	e7dc      	b.n	26a66 <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   26aac:	2301      	movs	r3, #1
   26aae:	f88d 3000 	strb.w	r3, [sp]
		break;
   26ab2:	e7ef      	b.n	26a94 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   26ab4:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   26ab8:	6821      	ldr	r1, [r4, #0]
   26aba:	4628      	mov	r0, r5
   26abc:	f7f7 fcfc 	bl	1e4b8 <baudrate_set>
   26ac0:	4602      	mov	r2, r0
   26ac2:	bb20      	cbnz	r0, 26b0e <uarte_nrfx_configure+0xbe>
	return dev->config;
   26ac4:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   26ac6:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   26ac8:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   26acc:	f89d 0002 	ldrb.w	r0, [sp, #2]
   26ad0:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   26ad2:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   26ad6:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   26ad8:	f89d 0000 	ldrb.w	r0, [sp]
   26adc:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   26ade:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
   26ae2:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   26ae4:	3304      	adds	r3, #4
   26ae6:	e894 0003 	ldmia.w	r4, {r0, r1}
   26aea:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   26aee:	e7ba      	b.n	26a66 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   26af0:	230e      	movs	r3, #14
   26af2:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   26af6:	e7df      	b.n	26ab8 <uarte_nrfx_configure+0x68>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   26af8:	230e      	movs	r3, #14
   26afa:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   26afe:	f44f 7380 	mov.w	r3, #256	; 0x100
   26b02:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   26b06:	e7d7      	b.n	26ab8 <uarte_nrfx_configure+0x68>
		return -ENOTSUP;
   26b08:	f06f 0285 	mvn.w	r2, #133	; 0x85
   26b0c:	e7ab      	b.n	26a66 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   26b0e:	f06f 0285 	mvn.w	r2, #133	; 0x85
   26b12:	e7a8      	b.n	26a66 <uarte_nrfx_configure+0x16>

00026b14 <uarte_nrfx_config_get>:
{
   26b14:	460b      	mov	r3, r1
	return dev->data;
   26b16:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   26b18:	6891      	ldr	r1, [r2, #8]
   26b1a:	6850      	ldr	r0, [r2, #4]
   26b1c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26b20:	2000      	movs	r0, #0
   26b22:	4770      	bx	lr

00026b24 <uarte_nrfx_err_check>:
	return dev->config;
   26b24:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26b26:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26b28:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26b2c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26b30:	4770      	bx	lr

00026b32 <is_tx_ready>:
	return dev->config;
   26b32:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26b34:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   26b36:	685b      	ldr	r3, [r3, #4]
   26b38:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b3c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26b40:	b929      	cbnz	r1, 26b4e <is_tx_ready+0x1c>
   26b42:	b933      	cbnz	r3, 26b52 <is_tx_ready+0x20>
   26b44:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   26b48:	b92b      	cbnz	r3, 26b56 <is_tx_ready+0x24>
   26b4a:	2000      	movs	r0, #0
   26b4c:	4770      	bx	lr
   26b4e:	2001      	movs	r0, #1
   26b50:	4770      	bx	lr
   26b52:	2000      	movs	r0, #0
   26b54:	4770      	bx	lr
   26b56:	2001      	movs	r0, #1
}
   26b58:	4770      	bx	lr

00026b5a <uarte_enable>:
	return dev->config;
   26b5a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26b5c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26b5e:	2208      	movs	r2, #8
   26b60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   26b64:	4770      	bx	lr

00026b66 <tx_start>:
{
   26b66:	b510      	push	{r4, lr}
	return dev->config;
   26b68:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26b6a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26b6c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26b70:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b74:	2300      	movs	r3, #0
   26b76:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   26b7a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   26b7e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   26b82:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   26b86:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26b88:	685b      	ldr	r3, [r3, #4]
   26b8a:	f013 0f10 	tst.w	r3, #16
   26b8e:	d102      	bne.n	26b96 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b90:	2301      	movs	r3, #1
   26b92:	60a3      	str	r3, [r4, #8]
}
   26b94:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   26b96:	2101      	movs	r1, #1
   26b98:	f7ff ffdf 	bl	26b5a <uarte_enable>
    p_reg->INTENSET = mask;
   26b9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   26ba0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   26ba4:	e7f4      	b.n	26b90 <tx_start+0x2a>

00026ba6 <uarte_nrfx_poll_in>:
{
   26ba6:	b410      	push	{r4}
	return dev->data;
   26ba8:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   26baa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   26bac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26bb2:	b152      	cbz	r2, 26bca <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   26bb4:	7c62      	ldrb	r2, [r4, #17]
   26bb6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bb8:	2000      	movs	r0, #0
   26bba:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26bbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26bc2:	2201      	movs	r2, #1
   26bc4:	601a      	str	r2, [r3, #0]
}
   26bc6:	bc10      	pop	{r4}
   26bc8:	4770      	bx	lr
		return -1;
   26bca:	f04f 30ff 	mov.w	r0, #4294967295
   26bce:	e7fa      	b.n	26bc6 <uarte_nrfx_poll_in+0x20>

00026bd0 <wait_tx_ready>:
{
   26bd0:	b570      	push	{r4, r5, r6, lr}
   26bd2:	4606      	mov	r6, r0
   26bd4:	e014      	b.n	26c00 <wait_tx_ready+0x30>
		if (res) {
   26bd6:	b17d      	cbz	r5, 26bf8 <wait_tx_ready+0x28>
	__asm__ volatile(
   26bd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   26bdc:	f3ef 8411 	mrs	r4, BASEPRI
   26be0:	f383 8812 	msr	BASEPRI_MAX, r3
   26be4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   26be8:	4630      	mov	r0, r6
   26bea:	f7ff ffa2 	bl	26b32 <is_tx_ready>
   26bee:	b9a0      	cbnz	r0, 26c1a <wait_tx_ready+0x4a>
	__asm__ volatile(
   26bf0:	f384 8811 	msr	BASEPRI, r4
   26bf4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   26bf8:	2021      	movs	r0, #33	; 0x21
   26bfa:	2100      	movs	r1, #0
   26bfc:	f7fb f806 	bl	21c0c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   26c00:	2464      	movs	r4, #100	; 0x64
   26c02:	4630      	mov	r0, r6
   26c04:	f7ff ff95 	bl	26b32 <is_tx_ready>
   26c08:	4605      	mov	r5, r0
   26c0a:	2800      	cmp	r0, #0
   26c0c:	d1e3      	bne.n	26bd6 <wait_tx_ready+0x6>
   26c0e:	2001      	movs	r0, #1
   26c10:	f000 fca9 	bl	27566 <nrfx_busy_wait>
   26c14:	3c01      	subs	r4, #1
   26c16:	d1f4      	bne.n	26c02 <wait_tx_ready+0x32>
   26c18:	e7dd      	b.n	26bd6 <wait_tx_ready+0x6>
}
   26c1a:	4620      	mov	r0, r4
   26c1c:	bd70      	pop	{r4, r5, r6, pc}

00026c1e <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   26c1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c20:	4604      	mov	r4, r0
	return dev->config;
   26c22:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
   26c24:	6835      	ldr	r5, [r6, #0]
	return dev->data;
   26c26:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26c28:	2100      	movs	r1, #0
   26c2a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   26c2e:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   26c30:	f7f7 fb74 	bl	1e31c <uarte_nrfx_pins_configure>
	return dev->data;
   26c34:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   26c36:	3104      	adds	r1, #4
   26c38:	4620      	mov	r0, r4
   26c3a:	f7ff ff09 	bl	26a50 <uarte_nrfx_configure>
	if (err) {
   26c3e:	4604      	mov	r4, r0
   26c40:	bb68      	cbnz	r0, 26c9e <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   26c42:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   26c44:	f013 0f02 	tst.w	r3, #2
   26c48:	d12b      	bne.n	26ca2 <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   26c4a:	2308      	movs	r3, #8
   26c4c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
   26c50:	7a33      	ldrb	r3, [r6, #8]
   26c52:	b95b      	cbnz	r3, 26c6c <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26c54:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   26c58:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   26c5c:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   26c60:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   26c64:	2301      	movs	r3, #1
   26c66:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26c6a:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   26c6c:	6873      	ldr	r3, [r6, #4]
   26c6e:	f013 0f02 	tst.w	r3, #2
   26c72:	d103      	bne.n	26c7c <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
   26c74:	f44f 7380 	mov.w	r3, #256	; 0x100
   26c78:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   26c7c:	6873      	ldr	r3, [r6, #4]
   26c7e:	f013 0f10 	tst.w	r3, #16
   26c82:	d003      	beq.n	26c8c <uarte_instance_init+0x6e>
   26c84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   26c88:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   26c8c:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26c8e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26c92:	2300      	movs	r3, #0
   26c94:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26c98:	2301      	movs	r3, #1
   26c9a:	60ab      	str	r3, [r5, #8]
   26c9c:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   26c9e:	4620      	mov	r0, r4
   26ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
   26ca2:	4639      	mov	r1, r7
   26ca4:	4628      	mov	r0, r5
   26ca6:	f7f7 fce7 	bl	1e678 <endtx_stoptx_ppi_init>
		if (err < 0) {
   26caa:	2800      	cmp	r0, #0
   26cac:	dacd      	bge.n	26c4a <uarte_instance_init+0x2c>
			return err;
   26cae:	4604      	mov	r4, r0
   26cb0:	e7f5      	b.n	26c9e <uarte_instance_init+0x80>

00026cb2 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   26cb2:	b510      	push	{r4, lr}
   26cb4:	4604      	mov	r4, r0
   26cb6:	2200      	movs	r2, #0
   26cb8:	2101      	movs	r1, #1
   26cba:	2002      	movs	r0, #2
   26cbc:	f7ee fda0 	bl	15800 <z_arm_irq_priority_set>
   26cc0:	2002      	movs	r0, #2
   26cc2:	f7ee fd6b 	bl	1579c <arch_irq_enable>
   26cc6:	2100      	movs	r1, #0
   26cc8:	4620      	mov	r0, r4
   26cca:	f7ff ffa8 	bl	26c1e <uarte_instance_init>
   26cce:	bd10      	pop	{r4, pc}

00026cd0 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   26cd0:	b510      	push	{r4, lr}
   26cd2:	4604      	mov	r4, r0
   26cd4:	2200      	movs	r2, #0
   26cd6:	2101      	movs	r1, #1
   26cd8:	2028      	movs	r0, #40	; 0x28
   26cda:	f7ee fd91 	bl	15800 <z_arm_irq_priority_set>
   26cde:	2028      	movs	r0, #40	; 0x28
   26ce0:	f7ee fd5c 	bl	1579c <arch_irq_enable>
   26ce4:	2100      	movs	r1, #0
   26ce6:	4620      	mov	r0, r4
   26ce8:	f7ff ff99 	bl	26c1e <uarte_instance_init>
   26cec:	bd10      	pop	{r4, pc}

00026cee <rng_pool_put>:
{
   26cee:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   26cf0:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   26cf2:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   26cf4:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   26cf6:	1a9a      	subs	r2, r3, r2
   26cf8:	ea34 0202 	bics.w	r2, r4, r2
   26cfc:	d008      	beq.n	26d10 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   26cfe:	18c2      	adds	r2, r0, r3
   26d00:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   26d02:	3301      	adds	r3, #1
   26d04:	b25b      	sxtb	r3, r3
   26d06:	4023      	ands	r3, r4
   26d08:	7083      	strb	r3, [r0, #2]
	return 0;
   26d0a:	2000      	movs	r0, #0
}
   26d0c:	bc10      	pop	{r4}
   26d0e:	4770      	bx	lr
		return -ENOBUFS;
   26d10:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26d14:	e7fa      	b.n	26d0c <rng_pool_put+0x1e>

00026d16 <rng_pool_init>:
	rngp->first_alloc = 0U;
   26d16:	2300      	movs	r3, #0
   26d18:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   26d1a:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   26d1c:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   26d1e:	3901      	subs	r1, #1
   26d20:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   26d22:	7102      	strb	r2, [r0, #4]
}
   26d24:	4770      	bx	lr

00026d26 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   26d26:	4770      	bx	lr

00026d28 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   26d28:	1a40      	subs	r0, r0, r1
}
   26d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   26d2e:	4770      	bx	lr

00026d30 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   26d30:	f100 0350 	add.w	r3, r0, #80	; 0x50
   26d34:	009b      	lsls	r3, r3, #2
   26d36:	b29b      	uxth	r3, r3
   26d38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26d3c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   26d40:	2200      	movs	r2, #0
   26d42:	601a      	str	r2, [r3, #0]
   26d44:	681b      	ldr	r3, [r3, #0]
}
   26d46:	4770      	bx	lr

00026d48 <absolute_time_to_cc>:
}
   26d48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   26d4c:	4770      	bx	lr

00026d4e <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26d4e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   26d52:	b672      	cpsid	i
}
   26d54:	4770      	bx	lr

00026d56 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   26d56:	f380 8810 	msr	PRIMASK, r0
}
   26d5a:	4770      	bx	lr

00026d5c <set_absolute_alarm>:
{
   26d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d5e:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   26d60:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   26d64:	f7f7 fe26 	bl	1e9b4 <get_comparator>
   26d68:	4607      	mov	r7, r0
   26d6a:	e019      	b.n	26da0 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   26d6c:	2013      	movs	r0, #19
   26d6e:	f001 fa9b 	bl	282a8 <z_impl_k_busy_wait>
}
   26d72:	e022      	b.n	26dba <set_absolute_alarm+0x5e>
		event_clear(chan);
   26d74:	4630      	mov	r0, r6
   26d76:	f7ff ffdb 	bl	26d30 <event_clear>
		event_enable(chan);
   26d7a:	4630      	mov	r0, r6
   26d7c:	f7f7 fe22 	bl	1e9c4 <event_enable>
		set_comparator(chan, cc_val);
   26d80:	4629      	mov	r1, r5
   26d82:	4630      	mov	r0, r6
   26d84:	f7f7 fe0c 	bl	1e9a0 <set_comparator>
		now2 = counter();
   26d88:	f7f7 fe30 	bl	1e9ec <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   26d8c:	4284      	cmp	r4, r0
   26d8e:	d01e      	beq.n	26dce <set_absolute_alarm+0x72>
   26d90:	1c81      	adds	r1, r0, #2
   26d92:	4628      	mov	r0, r5
   26d94:	f7ff ffc8 	bl	26d28 <counter_sub>
	} while ((now2 != now) &&
   26d98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   26d9c:	d917      	bls.n	26dce <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   26d9e:	462f      	mov	r7, r5
		now = counter();
   26da0:	f7f7 fe24 	bl	1e9ec <counter>
   26da4:	4604      	mov	r4, r0
		set_comparator(chan, now);
   26da6:	4601      	mov	r1, r0
   26da8:	4630      	mov	r0, r6
   26daa:	f7f7 fdf9 	bl	1e9a0 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   26dae:	4621      	mov	r1, r4
   26db0:	4638      	mov	r0, r7
   26db2:	f7ff ffb9 	bl	26d28 <counter_sub>
   26db6:	2801      	cmp	r0, #1
   26db8:	d0d8      	beq.n	26d6c <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   26dba:	1ca7      	adds	r7, r4, #2
   26dbc:	4639      	mov	r1, r7
   26dbe:	4628      	mov	r0, r5
   26dc0:	f7ff ffb2 	bl	26d28 <counter_sub>
   26dc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   26dc8:	d9d4      	bls.n	26d74 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   26dca:	463d      	mov	r5, r7
   26dcc:	e7d2      	b.n	26d74 <set_absolute_alarm+0x18>
}
   26dce:	4628      	mov	r0, r5
   26dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026dd2 <compare_set>:
{
   26dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
   26dd4:	b083      	sub	sp, #12
   26dd6:	4604      	mov	r4, r0
   26dd8:	4617      	mov	r7, r2
   26dda:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   26ddc:	f7f7 fe0c 	bl	1e9f8 <compare_int_lock>
   26de0:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   26de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26de4:	9301      	str	r3, [sp, #4]
   26de6:	9b08      	ldr	r3, [sp, #32]
   26de8:	9300      	str	r3, [sp, #0]
   26dea:	463a      	mov	r2, r7
   26dec:	462b      	mov	r3, r5
   26dee:	4620      	mov	r0, r4
   26df0:	f7f7 fef0 	bl	1ebd4 <compare_set_nolocks>
   26df4:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   26df6:	4631      	mov	r1, r6
   26df8:	4620      	mov	r0, r4
   26dfa:	f7f7 fe61 	bl	1eac0 <compare_int_unlock>
}
   26dfe:	4628      	mov	r0, r5
   26e00:	b003      	add	sp, #12
   26e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026e04 <sys_clock_cycle_get_32>:
{
   26e04:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   26e06:	f7f7 fec5 	bl	1eb94 <z_nrf_rtc_timer_read>
}
   26e0a:	bd08      	pop	{r3, pc}

00026e0c <event_packet_is_discardable>:
	switch (hdr->evt) {
   26e0c:	7803      	ldrb	r3, [r0, #0]
   26e0e:	2b3e      	cmp	r3, #62	; 0x3e
   26e10:	d003      	beq.n	26e1a <event_packet_is_discardable+0xe>
   26e12:	2bff      	cmp	r3, #255	; 0xff
   26e14:	d008      	beq.n	26e28 <event_packet_is_discardable+0x1c>
   26e16:	2000      	movs	r0, #0
   26e18:	4770      	bx	lr
		switch (me->subevent) {
   26e1a:	7883      	ldrb	r3, [r0, #2]
   26e1c:	2b02      	cmp	r3, #2
   26e1e:	d001      	beq.n	26e24 <event_packet_is_discardable+0x18>
			return false;
   26e20:	2000      	movs	r0, #0
   26e22:	4770      	bx	lr
			return true;
   26e24:	2001      	movs	r0, #1
   26e26:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   26e28:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   26e2a:	2b80      	cmp	r3, #128	; 0x80
   26e2c:	d001      	beq.n	26e32 <event_packet_is_discardable+0x26>
			return false;
   26e2e:	2000      	movs	r0, #0
}
   26e30:	4770      	bx	lr
			return true;
   26e32:	2001      	movs	r0, #1
   26e34:	4770      	bx	lr

00026e36 <z_log_msg2_runtime_create>:
{
   26e36:	b510      	push	{r4, lr}
   26e38:	b086      	sub	sp, #24
	va_start(ap, fmt);
   26e3a:	ac0a      	add	r4, sp, #40	; 0x28
   26e3c:	9405      	str	r4, [sp, #20]
   26e3e:	9402      	str	r4, [sp, #8]
   26e40:	9c09      	ldr	r4, [sp, #36]	; 0x24
   26e42:	9401      	str	r4, [sp, #4]
   26e44:	9c08      	ldr	r4, [sp, #32]
   26e46:	9400      	str	r4, [sp, #0]
   26e48:	f7fd f899 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   26e4c:	b006      	add	sp, #24
   26e4e:	bd10      	pop	{r4, pc}

00026e50 <hci_driver_send>:
{
   26e50:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   26e52:	8983      	ldrh	r3, [r0, #12]
   26e54:	b183      	cbz	r3, 26e78 <hci_driver_send+0x28>
   26e56:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   26e58:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   26e5a:	b14b      	cbz	r3, 26e70 <hci_driver_send+0x20>
   26e5c:	2b02      	cmp	r3, #2
   26e5e:	d10e      	bne.n	26e7e <hci_driver_send+0x2e>
		err = acl_handle(buf);
   26e60:	f7f8 f83e 	bl	1eee0 <acl_handle>
   26e64:	4605      	mov	r5, r0
	if (!err) {
   26e66:	b965      	cbnz	r5, 26e82 <hci_driver_send+0x32>
		net_buf_unref(buf);
   26e68:	4620      	mov	r0, r4
   26e6a:	f7ff fb8f 	bl	2658c <net_buf_unref>
   26e6e:	e008      	b.n	26e82 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   26e70:	f7f8 f850 	bl	1ef14 <cmd_handle>
   26e74:	4605      	mov	r5, r0
		break;
   26e76:	e7f6      	b.n	26e66 <hci_driver_send+0x16>
		return -EINVAL;
   26e78:	f06f 0515 	mvn.w	r5, #21
   26e7c:	e001      	b.n	26e82 <hci_driver_send+0x32>
	switch (type) {
   26e7e:	f06f 0515 	mvn.w	r5, #21
}
   26e82:	4628      	mov	r0, r5
   26e84:	bd38      	pop	{r3, r4, r5, pc}

00026e86 <fetch_and_process_hci_evt>:
{
   26e86:	b538      	push	{r3, r4, r5, lr}
   26e88:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   26e8a:	f04f 30ff 	mov.w	r0, #4294967295
   26e8e:	f04f 31ff 	mov.w	r1, #4294967295
   26e92:	f7f7 ffd9 	bl	1ee48 <multithreading_lock_acquire>
	if (!errcode) {
   26e96:	4605      	mov	r5, r0
   26e98:	b110      	cbz	r0, 26ea0 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   26e9a:	b145      	cbz	r5, 26eae <fetch_and_process_hci_evt+0x28>
		return false;
   26e9c:	2000      	movs	r0, #0
}
   26e9e:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   26ea0:	4620      	mov	r0, r4
   26ea2:	f7f8 fa95 	bl	1f3d0 <hci_internal_evt_get>
   26ea6:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   26ea8:	f7f7 ffd8 	bl	1ee5c <multithreading_lock_release>
   26eac:	e7f5      	b.n	26e9a <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   26eae:	4620      	mov	r0, r4
   26eb0:	f7f8 f872 	bl	1ef98 <event_packet_process>
	return true;
   26eb4:	2001      	movs	r0, #1
   26eb6:	e7f2      	b.n	26e9e <fetch_and_process_hci_evt+0x18>

00026eb8 <fetch_and_process_acl_data>:
{
   26eb8:	b538      	push	{r3, r4, r5, lr}
   26eba:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   26ebc:	f04f 30ff 	mov.w	r0, #4294967295
   26ec0:	f04f 31ff 	mov.w	r1, #4294967295
   26ec4:	f7f7 ffc0 	bl	1ee48 <multithreading_lock_acquire>
	if (!errcode) {
   26ec8:	4605      	mov	r5, r0
   26eca:	b110      	cbz	r0, 26ed2 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   26ecc:	b145      	cbz	r5, 26ee0 <fetch_and_process_acl_data+0x28>
		return false;
   26ece:	2000      	movs	r0, #0
}
   26ed0:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   26ed2:	4620      	mov	r0, r4
   26ed4:	f7e6 f8ef 	bl	d0b6 <sdc_hci_data_get>
   26ed8:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   26eda:	f7f7 ffbf 	bl	1ee5c <multithreading_lock_release>
   26ede:	e7f5      	b.n	26ecc <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   26ee0:	4620      	mov	r0, r4
   26ee2:	f7f8 f8a3 	bl	1f02c <data_packet_process>
	return true;
   26ee6:	2001      	movs	r0, #1
   26ee8:	e7f2      	b.n	26ed0 <fetch_and_process_acl_data+0x18>

00026eea <configure_supported_features>:
{
   26eea:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   26eec:	f7dd ff04 	bl	4cf8 <sdc_support_adv>
			if (err) {
   26ef0:	b948      	cbnz	r0, 26f06 <configure_supported_features+0x1c>
		err = sdc_support_slave();
   26ef2:	f7dd ff31 	bl	4d58 <sdc_support_slave>
		if (err) {
   26ef6:	b948      	cbnz	r0, 26f0c <configure_supported_features+0x22>
		err = sdc_support_dle();
   26ef8:	f7dd ff0e 	bl	4d18 <sdc_support_dle>
		if (err) {
   26efc:	b948      	cbnz	r0, 26f12 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   26efe:	f7dd ff1b 	bl	4d38 <sdc_support_le_2m_phy>
		if (err) {
   26f02:	b948      	cbnz	r0, 26f18 <configure_supported_features+0x2e>
}
   26f04:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   26f06:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26f0a:	e7fb      	b.n	26f04 <configure_supported_features+0x1a>
			return -ENOTSUP;
   26f0c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26f10:	e7f8      	b.n	26f04 <configure_supported_features+0x1a>
			return -ENOTSUP;
   26f12:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26f16:	e7f5      	b.n	26f04 <configure_supported_features+0x1a>
			return -ENOTSUP;
   26f18:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26f1c:	e7f2      	b.n	26f04 <configure_supported_features+0x1a>

00026f1e <command_generates_command_complete_event>:
	switch (hci_opcode) {
   26f1e:	f242 0344 	movw	r3, #8260	; 0x2044
   26f22:	4298      	cmp	r0, r3
   26f24:	d834      	bhi.n	26f90 <command_generates_command_complete_event+0x72>
   26f26:	f242 030d 	movw	r3, #8205	; 0x200d
   26f2a:	4298      	cmp	r0, r3
   26f2c:	d20b      	bcs.n	26f46 <command_generates_command_complete_event+0x28>
   26f2e:	f240 4306 	movw	r3, #1030	; 0x406
   26f32:	4298      	cmp	r0, r3
   26f34:	d02e      	beq.n	26f94 <command_generates_command_complete_event+0x76>
   26f36:	f240 431d 	movw	r3, #1053	; 0x41d
   26f3a:	4298      	cmp	r0, r3
   26f3c:	d001      	beq.n	26f42 <command_generates_command_complete_event+0x24>
		return true;
   26f3e:	2001      	movs	r0, #1
   26f40:	4770      	bx	lr
	switch (hci_opcode) {
   26f42:	2000      	movs	r0, #0
   26f44:	4770      	bx	lr
   26f46:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   26f4a:	380d      	subs	r0, #13
   26f4c:	2837      	cmp	r0, #55	; 0x37
   26f4e:	d823      	bhi.n	26f98 <command_generates_command_complete_event+0x7a>
   26f50:	e8df f000 	tbb	[pc, r0]
   26f54:	2222221c 	.word	0x2222221c
   26f58:	221c2222 	.word	0x221c2222
   26f5c:	22221c22 	.word	0x22221c22
   26f60:	2222221c 	.word	0x2222221c
   26f64:	22222222 	.word	0x22222222
   26f68:	22222222 	.word	0x22222222
   26f6c:	22222222 	.word	0x22222222
   26f70:	22222222 	.word	0x22222222
   26f74:	22222222 	.word	0x22222222
   26f78:	22221c22 	.word	0x22221c22
   26f7c:	22222222 	.word	0x22222222
   26f80:	22222222 	.word	0x22222222
   26f84:	22222222 	.word	0x22222222
   26f88:	1c1c2222 	.word	0x1c1c2222
   26f8c:	2000      	movs	r0, #0
   26f8e:	4770      	bx	lr
		return true;
   26f90:	2001      	movs	r0, #1
   26f92:	4770      	bx	lr
	switch (hci_opcode) {
   26f94:	2000      	movs	r0, #0
   26f96:	4770      	bx	lr
		return true;
   26f98:	2001      	movs	r0, #1
}
   26f9a:	4770      	bx	lr

00026f9c <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26f9c:	230f      	movs	r3, #15
   26f9e:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   26fa0:	2304      	movs	r3, #4
   26fa2:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   26fa4:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   26fa6:	2301      	movs	r3, #1
   26fa8:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   26faa:	8081      	strh	r1, [r0, #4]
}
   26fac:	4770      	bx	lr

00026fae <encode_command_complete_header>:
{
   26fae:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   26fb0:	240e      	movs	r4, #14
   26fb2:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   26fb4:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   26fb6:	2201      	movs	r2, #1
   26fb8:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   26fba:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   26fbe:	7143      	strb	r3, [r0, #5]
}
   26fc0:	bc10      	pop	{r4}
   26fc2:	4770      	bx	lr

00026fc4 <le_read_supported_states>:
	*buf = states1;
   26fc4:	238f      	movs	r3, #143	; 0x8f
   26fc6:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   26fc8:	23c0      	movs	r3, #192	; 0xc0
   26fca:	7103      	strb	r3, [r0, #4]
}
   26fcc:	4770      	bx	lr

00026fce <status_param_cmd_put>:
}
   26fce:	2001      	movs	r0, #1
   26fd0:	4770      	bx	lr

00026fd2 <link_control_cmd_put>:
{
   26fd2:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   26fd4:	7842      	ldrb	r2, [r0, #1]
   26fd6:	f810 3b03 	ldrb.w	r3, [r0], #3
   26fda:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   26fde:	b21b      	sxth	r3, r3
	switch (opcode)	{
   26fe0:	f240 4206 	movw	r2, #1030	; 0x406
   26fe4:	4293      	cmp	r3, r2
   26fe6:	d005      	beq.n	26ff4 <link_control_cmd_put+0x22>
   26fe8:	f240 421d 	movw	r2, #1053	; 0x41d
   26fec:	4293      	cmp	r3, r2
   26fee:	d004      	beq.n	26ffa <link_control_cmd_put+0x28>
   26ff0:	2001      	movs	r0, #1
}
   26ff2:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   26ff4:	f7e6 f992 	bl	d31c <sdc_hci_cmd_lc_disconnect>
   26ff8:	e7fb      	b.n	26ff2 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   26ffa:	f7e6 f991 	bl	d320 <sdc_hci_cmd_lc_read_remote_version_information>
   26ffe:	e7f8      	b.n	26ff2 <link_control_cmd_put+0x20>

00027000 <controller_and_baseband_cmd_put>:
{
   27000:	b538      	push	{r3, r4, r5, lr}
   27002:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   27004:	3003      	adds	r0, #3
   27006:	7865      	ldrb	r5, [r4, #1]
   27008:	7823      	ldrb	r3, [r4, #0]
   2700a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2700e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   27010:	f640 4463 	movw	r4, #3171	; 0xc63
   27014:	42a3      	cmp	r3, r4
   27016:	d02c      	beq.n	27072 <controller_and_baseband_cmd_put+0x72>
   27018:	f101 0106 	add.w	r1, r1, #6
   2701c:	dc16      	bgt.n	2704c <controller_and_baseband_cmd_put+0x4c>
   2701e:	f640 4403 	movw	r4, #3075	; 0xc03
   27022:	42a3      	cmp	r3, r4
   27024:	d022      	beq.n	2706c <controller_and_baseband_cmd_put+0x6c>
   27026:	f640 442d 	movw	r4, #3117	; 0xc2d
   2702a:	42a3      	cmp	r3, r4
   2702c:	d105      	bne.n	2703a <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2702e:	7813      	ldrb	r3, [r2, #0]
   27030:	3303      	adds	r3, #3
   27032:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   27034:	f7e6 f866 	bl	d104 <sdc_hci_cmd_cb_read_transmit_power_level>
   27038:	e007      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2703a:	f640 4201 	movw	r2, #3073	; 0xc01
   2703e:	4293      	cmp	r3, r2
   27040:	d102      	bne.n	27048 <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   27042:	f7e6 f861 	bl	d108 <sdc_hci_cmd_cb_set_event_mask>
   27046:	e000      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   27048:	2001      	movs	r0, #1
}
   2704a:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   2704c:	f640 447b 	movw	r4, #3195	; 0xc7b
   27050:	42a3      	cmp	r3, r4
   27052:	d011      	beq.n	27078 <controller_and_baseband_cmd_put+0x78>
   27054:	f640 447c 	movw	r4, #3196	; 0xc7c
   27058:	42a3      	cmp	r3, r4
   2705a:	d105      	bne.n	27068 <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   2705c:	7813      	ldrb	r3, [r2, #0]
   2705e:	3302      	adds	r3, #2
   27060:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   27062:	f7e6 f85b 	bl	d11c <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   27066:	e7f0      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   27068:	2001      	movs	r0, #1
   2706a:	e7ee      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   2706c:	f7dd ffba 	bl	4fe4 <sdc_hci_cmd_cb_reset>
   27070:	e7eb      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   27072:	f7e6 f84e 	bl	d112 <sdc_hci_cmd_cb_set_event_mask_page_2>
   27076:	e7e8      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   27078:	7813      	ldrb	r3, [r2, #0]
   2707a:	3304      	adds	r3, #4
   2707c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2707e:	f7e6 f83f 	bl	d100 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   27082:	e7e2      	b.n	2704a <controller_and_baseband_cmd_put+0x4a>

00027084 <supported_commands>:
{
   27084:	b510      	push	{r4, lr}
   27086:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   27088:	222e      	movs	r2, #46	; 0x2e
   2708a:	2100      	movs	r1, #0
   2708c:	f001 fa28 	bl	284e0 <memset>
	cmds->hci_disconnect = 1;
   27090:	2320      	movs	r3, #32
   27092:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   27094:	2380      	movs	r3, #128	; 0x80
   27096:	70a3      	strb	r3, [r4, #2]
	cmds->hci_reset = 1;
   27098:	23c0      	movs	r3, #192	; 0xc0
   2709a:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2709c:	2304      	movs	r3, #4
   2709e:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_supported_features = 1;
   270a0:	2328      	movs	r3, #40	; 0x28
   270a2:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   270a4:	2302      	movs	r3, #2
   270a6:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   270a8:	2304      	movs	r3, #4
   270aa:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_advertising_data = 1;
   270ac:	23f7      	movs	r3, #247	; 0xf7
   270ae:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_clear_white_list = 1;
   270b0:	23c3      	movs	r3, #195	; 0xc3
   270b2:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   270b4:	23f3      	movs	r3, #243	; 0xf3
   270b6:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_test_end = 1;
   270b8:	237e      	movs	r3, #126	; 0x7e
   270ba:	7723      	strb	r3, [r4, #28]
	cmds->hci_write_authenticated_payload_timeout = 1;
   270bc:	2330      	movs	r3, #48	; 0x30
   270be:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_read_suggested_default_data_length = 1;
   270c2:	23c0      	movs	r3, #192	; 0xc0
   270c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_resolving_list_size = 1;
   270c8:	2379      	movs	r3, #121	; 0x79
   270ca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_receiver_test_v2 = 1;
   270ce:	23fe      	movs	r3, #254	; 0xfe
   270d0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   270d4:	2301      	movs	r3, #1
   270d6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   270da:	2380      	movs	r3, #128	; 0x80
   270dc:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   270e0:	2304      	movs	r3, #4
   270e2:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   270e6:	bd10      	pop	{r4, pc}

000270e8 <supported_features>:
   270e8:	2300      	movs	r3, #0
   270ea:	6003      	str	r3, [r0, #0]
   270ec:	6043      	str	r3, [r0, #4]
	features->bdedr_not_supported = 1;
   270ee:	7903      	ldrb	r3, [r0, #4]
	features->le_supported = 1;
   270f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   270f4:	7103      	strb	r3, [r0, #4]
}
   270f6:	4770      	bx	lr

000270f8 <info_param_cmd_put>:
{
   270f8:	b538      	push	{r3, r4, r5, lr}
   270fa:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   270fc:	1d88      	adds	r0, r1, #6
   270fe:	7865      	ldrb	r5, [r4, #1]
   27100:	7823      	ldrb	r3, [r4, #0]
   27102:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   27106:	b21b      	sxth	r3, r3
	switch (opcode)	{
   27108:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2710c:	3b01      	subs	r3, #1
   2710e:	2b08      	cmp	r3, #8
   27110:	d820      	bhi.n	27154 <info_param_cmd_put+0x5c>
   27112:	e8df f003 	tbb	[pc, r3]
   27116:	0b05      	.short	0x0b05
   27118:	1f1f1f12 	.word	0x1f1f1f12
   2711c:	1f1f      	.short	0x1f1f
   2711e:	19          	.byte	0x19
   2711f:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   27120:	7813      	ldrb	r3, [r2, #0]
   27122:	3308      	adds	r3, #8
   27124:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   27126:	f7e6 f8ae 	bl	d286 <sdc_hci_cmd_ip_read_local_version_information>
   2712a:	e014      	b.n	27156 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2712c:	7813      	ldrb	r3, [r2, #0]
   2712e:	3340      	adds	r3, #64	; 0x40
   27130:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   27132:	f7ff ffa7 	bl	27084 <supported_commands>
		return 0;
   27136:	2000      	movs	r0, #0
   27138:	e00d      	b.n	27156 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2713a:	7813      	ldrb	r3, [r2, #0]
   2713c:	3308      	adds	r3, #8
   2713e:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   27140:	f7ff ffd2 	bl	270e8 <supported_features>
		return 0;
   27144:	2000      	movs	r0, #0
   27146:	e006      	b.n	27156 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   27148:	7813      	ldrb	r3, [r2, #0]
   2714a:	3306      	adds	r3, #6
   2714c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2714e:	f7e6 f898 	bl	d282 <sdc_hci_cmd_ip_read_bd_addr>
   27152:	e000      	b.n	27156 <info_param_cmd_put+0x5e>
   27154:	2001      	movs	r0, #1
}
   27156:	bd38      	pop	{r3, r4, r5, pc}

00027158 <le_supported_features>:
   27158:	2300      	movs	r3, #0
   2715a:	6003      	str	r3, [r0, #0]
   2715c:	7103      	strb	r3, [r0, #4]
	features->le_encryption = 1;
   2715e:	7803      	ldrb	r3, [r0, #0]
	features->ll_privacy = 1;
   27160:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   27164:	7003      	strb	r3, [r0, #0]
	features->le_2m_phy = 1;
   27166:	7843      	ldrb	r3, [r0, #1]
	features->channel_selection_algorithm_2 = 1;
   27168:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2716c:	7043      	strb	r3, [r0, #1]
}
   2716e:	4770      	bx	lr

00027170 <vs_zephyr_supported_commands>:
   27170:	2300      	movs	r3, #0
   27172:	8003      	strh	r3, [r0, #0]
	cmds->read_version_info = 1;
   27174:	7803      	ldrb	r3, [r0, #0]
	cmds->write_bd_addr = 1;
   27176:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2717a:	7003      	strb	r3, [r0, #0]
	cmds->read_static_addresses = 1;
   2717c:	7843      	ldrb	r3, [r0, #1]
	cmds->read_chip_temperature = 1;
   2717e:	f043 0307 	orr.w	r3, r3, #7
   27182:	7043      	strb	r3, [r0, #1]
}
   27184:	4770      	bx	lr

00027186 <vs_supported_commands>:
	cmds->event_length_set = 1;
   27186:	233f      	movs	r3, #63	; 0x3f
   27188:	7003      	strb	r3, [r0, #0]
}
   2718a:	4770      	bx	lr

0002718c <le_controller_cmd_put>:
{
   2718c:	b538      	push	{r3, r4, r5, lr}
   2718e:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   27190:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   27192:	3106      	adds	r1, #6
   27194:	7865      	ldrb	r5, [r4, #1]
   27196:	7823      	ldrb	r3, [r4, #0]
   27198:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2719c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2719e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   271a2:	3b01      	subs	r3, #1
   271a4:	2b4d      	cmp	r3, #77	; 0x4d
   271a6:	f200 80ce 	bhi.w	27346 <le_controller_cmd_put+0x1ba>
   271aa:	e8df f003 	tbb	[pc, r3]
   271ae:	2a27      	.short	0x2a27
   271b0:	3c39cc31 	.word	0x3c39cc31
   271b4:	4c49463f 	.word	0x4c49463f
   271b8:	cccccccc 	.word	0xcccccccc
   271bc:	5c59564f 	.word	0x5c59564f
   271c0:	655fcccc 	.word	0x655fcccc
   271c4:	75cc6e68 	.word	0x75cc6e68
   271c8:	cccc817b 	.word	0xcccc817b
   271cc:	89cccccc 	.word	0x89cccccc
   271d0:	cccc968f 	.word	0xcccc968f
   271d4:	a29f9c99 	.word	0xa29f9c99
   271d8:	aca9cccc 	.word	0xaca9cccc
   271dc:	bfbcb6af 	.word	0xbfbcb6af
   271e0:	cccccccc 	.word	0xcccccccc
   271e4:	cccccccc 	.word	0xcccccccc
   271e8:	cccccccc 	.word	0xcccccccc
   271ec:	cccccccc 	.word	0xcccccccc
   271f0:	cccccccc 	.word	0xcccccccc
   271f4:	cccccccc 	.word	0xcccccccc
   271f8:	c9ccccc2 	.word	0xc9ccccc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   271fc:	f7e6 f87d 	bl	d2fa <sdc_hci_cmd_le_set_event_mask>
   27200:	e0a2      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   27202:	7813      	ldrb	r3, [r2, #0]
   27204:	3303      	adds	r3, #3
   27206:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   27208:	4608      	mov	r0, r1
   2720a:	f7e6 f854 	bl	d2b6 <sdc_hci_cmd_le_read_buffer_size>
   2720e:	e09b      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   27210:	7813      	ldrb	r3, [r2, #0]
   27212:	3308      	adds	r3, #8
   27214:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   27216:	4608      	mov	r0, r1
   27218:	f7ff ff9e 	bl	27158 <le_supported_features>
		return 0;
   2721c:	2000      	movs	r0, #0
   2721e:	e093      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   27220:	f7e6 f874 	bl	d30c <sdc_hci_cmd_le_set_random_address>
   27224:	e090      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   27226:	f7e6 f862 	bl	d2ee <sdc_hci_cmd_le_set_adv_params>
   2722a:	e08d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   2722c:	7813      	ldrb	r3, [r2, #0]
   2722e:	3301      	adds	r3, #1
   27230:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   27232:	4608      	mov	r0, r1
   27234:	f7e6 f83d 	bl	d2b2 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   27238:	e086      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   2723a:	f7e6 f854 	bl	d2e6 <sdc_hci_cmd_le_set_adv_data>
   2723e:	e083      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   27240:	f7e6 f868 	bl	d314 <sdc_hci_cmd_le_set_scan_response_data>
   27244:	e080      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   27246:	f7e6 f850 	bl	d2ea <sdc_hci_cmd_le_set_adv_enable>
   2724a:	e07d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   2724c:	7813      	ldrb	r3, [r2, #0]
   2724e:	3301      	adds	r3, #1
   27250:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   27252:	4608      	mov	r0, r1
   27254:	f7e6 f83f 	bl	d2d6 <sdc_hci_cmd_le_read_white_list_size>
   27258:	e076      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   2725a:	f7e6 f81c 	bl	d296 <sdc_hci_cmd_le_clear_white_list>
   2725e:	e073      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   27260:	f7e6 f815 	bl	d28e <sdc_hci_cmd_le_add_device_to_white_list>
   27264:	e070      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   27266:	f7e6 f83a 	bl	d2de <sdc_hci_cmd_le_remove_device_from_white_list>
   2726a:	e06d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2726c:	7813      	ldrb	r3, [r2, #0]
   2726e:	3307      	adds	r3, #7
   27270:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   27272:	f7e6 f822 	bl	d2ba <sdc_hci_cmd_le_read_channel_map>
   27276:	e067      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   27278:	f7e6 f825 	bl	d2c6 <sdc_hci_cmd_le_read_remote_features>
   2727c:	e064      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2727e:	7813      	ldrb	r3, [r2, #0]
   27280:	3310      	adds	r3, #16
   27282:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   27284:	f7e6 f809 	bl	d29a <sdc_hci_cmd_le_encrypt>
   27288:	e05e      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2728a:	7813      	ldrb	r3, [r2, #0]
   2728c:	3308      	adds	r3, #8
   2728e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   27290:	4608      	mov	r0, r1
   27292:	f7e6 f80c 	bl	d2ae <sdc_hci_cmd_le_rand>
   27296:	e057      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   27298:	7813      	ldrb	r3, [r2, #0]
   2729a:	3302      	adds	r3, #2
   2729c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   2729e:	f7e6 f802 	bl	d2a6 <sdc_hci_cmd_le_long_term_key_request_reply>
   272a2:	e051      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   272a4:	7813      	ldrb	r3, [r2, #0]
   272a6:	3302      	adds	r3, #2
   272a8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   272aa:	f7e5 fff8 	bl	d29e <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   272ae:	e04b      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   272b0:	7813      	ldrb	r3, [r2, #0]
   272b2:	3308      	adds	r3, #8
   272b4:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   272b6:	4608      	mov	r0, r1
   272b8:	f7ff fe84 	bl	26fc4 <le_read_supported_states>
		return 0;
   272bc:	2000      	movs	r0, #0
   272be:	e043      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   272c0:	7813      	ldrb	r3, [r2, #0]
   272c2:	3302      	adds	r3, #2
   272c4:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   272c6:	f7e6 f814 	bl	d2f2 <sdc_hci_cmd_le_set_data_length>
   272ca:	e03d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   272cc:	7813      	ldrb	r3, [r2, #0]
   272ce:	3304      	adds	r3, #4
   272d0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   272d2:	4608      	mov	r0, r1
   272d4:	f7e5 fffb 	bl	d2ce <sdc_hci_cmd_le_read_suggested_default_data_length>
   272d8:	e036      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   272da:	f7e6 f81d 	bl	d318 <sdc_hci_cmd_le_write_suggested_default_data_length>
   272de:	e033      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   272e0:	f7e5 ffd3 	bl	d28a <sdc_hci_cmd_le_add_device_to_resolving_list>
   272e4:	e030      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   272e6:	f7e5 fff8 	bl	d2da <sdc_hci_cmd_le_remove_device_from_resolving_list>
   272ea:	e02d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   272ec:	f7e5 ffd1 	bl	d292 <sdc_hci_cmd_le_clear_resolving_list>
   272f0:	e02a      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   272f2:	7813      	ldrb	r3, [r2, #0]
   272f4:	3301      	adds	r3, #1
   272f6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   272f8:	4608      	mov	r0, r1
   272fa:	f7e5 ffe6 	bl	d2ca <sdc_hci_cmd_le_read_resolving_list_size>
   272fe:	e023      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   27300:	f7e5 ffef 	bl	d2e2 <sdc_hci_cmd_le_set_address_resolution_enable>
   27304:	e020      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   27306:	f7e6 f803 	bl	d310 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2730a:	e01d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2730c:	7813      	ldrb	r3, [r2, #0]
   2730e:	3308      	adds	r3, #8
   27310:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   27312:	4608      	mov	r0, r1
   27314:	f7e5 ffd3 	bl	d2be <sdc_hci_cmd_le_read_max_data_length>
   27318:	e016      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2731a:	7813      	ldrb	r3, [r2, #0]
   2731c:	3304      	adds	r3, #4
   2731e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   27320:	f7e5 ffcf 	bl	d2c2 <sdc_hci_cmd_le_read_phy>
   27324:	e010      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   27326:	f7e5 ffe6 	bl	d2f6 <sdc_hci_cmd_le_set_default_phy>
   2732a:	e00d      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2732c:	f7e5 ffea 	bl	d304 <sdc_hci_cmd_le_set_phy>
   27330:	e00a      	b.n	27348 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   27332:	7813      	ldrb	r3, [r2, #0]
   27334:	3302      	adds	r3, #2
   27336:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   27338:	4608      	mov	r0, r1
   2733a:	f7e5 ffca 	bl	d2d2 <sdc_hci_cmd_le_read_transmit_power>
   2733e:	e003      	b.n	27348 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   27340:	f7e5 ffe2 	bl	d308 <sdc_hci_cmd_le_set_privacy_mode>
   27344:	e000      	b.n	27348 <le_controller_cmd_put+0x1bc>
   27346:	2001      	movs	r0, #1
}
   27348:	bd38      	pop	{r3, r4, r5, pc}

0002734a <vs_cmd_put>:
{
   2734a:	b538      	push	{r3, r4, r5, lr}
   2734c:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2734e:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   27350:	3106      	adds	r1, #6
   27352:	7865      	ldrb	r5, [r4, #1]
   27354:	7823      	ldrb	r3, [r4, #0]
   27356:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   2735a:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   2735e:	42a3      	cmp	r3, r4
   27360:	d90f      	bls.n	27382 <vs_cmd_put+0x38>
   27362:	f64f 5405 	movw	r4, #64773	; 0xfd05
   27366:	42a3      	cmp	r3, r4
   27368:	d85b      	bhi.n	27422 <vs_cmd_put+0xd8>
   2736a:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2736e:	d319      	bcc.n	273a4 <vs_cmd_put+0x5a>
   27370:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   27374:	2b05      	cmp	r3, #5
   27376:	d850      	bhi.n	2741a <vs_cmd_put+0xd0>
   27378:	e8df f003 	tbb	[pc, r3]
   2737c:	46434038 	.word	0x46434038
   27380:	4c49      	.short	0x4c49
   27382:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   27386:	d801      	bhi.n	2738c <vs_cmd_put+0x42>
   27388:	2001      	movs	r0, #1
}
   2738a:	bd38      	pop	{r3, r4, r5, pc}
   2738c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   27390:	3b01      	subs	r3, #1
   27392:	2b09      	cmp	r3, #9
   27394:	d843      	bhi.n	2741e <vs_cmd_put+0xd4>
   27396:	e8df f003 	tbb	[pc, r3]
   2739a:	0e07      	.short	0x0e07
   2739c:	26424242 	.word	0x26424242
   273a0:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   273a4:	2001      	movs	r0, #1
   273a6:	e7f0      	b.n	2738a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   273a8:	7813      	ldrb	r3, [r2, #0]
   273aa:	330c      	adds	r3, #12
   273ac:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   273ae:	4608      	mov	r0, r1
   273b0:	f7dd fe2c 	bl	500c <sdc_hci_cmd_vs_zephyr_read_version_info>
   273b4:	e7e9      	b.n	2738a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   273b6:	7813      	ldrb	r3, [r2, #0]
   273b8:	3340      	adds	r3, #64	; 0x40
   273ba:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   273bc:	4608      	mov	r0, r1
   273be:	f7ff fed7 	bl	27170 <vs_zephyr_supported_commands>
		return 0;
   273c2:	2000      	movs	r0, #0
   273c4:	e7e1      	b.n	2738a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   273c6:	7813      	ldrb	r3, [r2, #0]
   273c8:	3301      	adds	r3, #1
   273ca:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   273cc:	3316      	adds	r3, #22
   273ce:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   273d0:	4608      	mov	r0, r1
   273d2:	f7e5 ff05 	bl	d1e0 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   273d6:	e7d8      	b.n	2738a <vs_cmd_put+0x40>
		*param_length_out +=
   273d8:	7813      	ldrb	r3, [r2, #0]
   273da:	3320      	adds	r3, #32
   273dc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   273de:	4608      	mov	r0, r1
   273e0:	f7e5 feb1 	bl	d146 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   273e4:	e7d1      	b.n	2738a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   273e6:	f7e5 ff4a 	bl	d27e <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   273ea:	e7ce      	b.n	2738a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   273ec:	7813      	ldrb	r3, [r2, #0]
   273ee:	3340      	adds	r3, #64	; 0x40
   273f0:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   273f2:	4608      	mov	r0, r1
   273f4:	f7ff fec7 	bl	27186 <vs_supported_commands>
		return 0;
   273f8:	2000      	movs	r0, #0
   273fa:	e7c6      	b.n	2738a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   273fc:	f7e5 fe9c 	bl	d138 <sdc_hci_cmd_vs_llpm_mode_set>
   27400:	e7c3      	b.n	2738a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   27402:	f7e5 fe95 	bl	d130 <sdc_hci_cmd_vs_conn_update>
   27406:	e7c0      	b.n	2738a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   27408:	f7e5 fe8a 	bl	d120 <sdc_hci_cmd_vs_conn_event_extend>
   2740c:	e7bd      	b.n	2738a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2740e:	f7e5 fe95 	bl	d13c <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   27412:	e7ba      	b.n	2738a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   27414:	f7e5 fe8e 	bl	d134 <sdc_hci_cmd_vs_event_length_set>
   27418:	e7b7      	b.n	2738a <vs_cmd_put+0x40>
	switch (opcode)	{
   2741a:	2001      	movs	r0, #1
   2741c:	e7b5      	b.n	2738a <vs_cmd_put+0x40>
   2741e:	2001      	movs	r0, #1
   27420:	e7b3      	b.n	2738a <vs_cmd_put+0x40>
   27422:	2001      	movs	r0, #1
   27424:	e7b1      	b.n	2738a <vs_cmd_put+0x40>

00027426 <cmd_put>:
{
   27426:	b570      	push	{r4, r5, r6, lr}
   27428:	b082      	sub	sp, #8
   2742a:	460e      	mov	r6, r1
   2742c:	7842      	ldrb	r2, [r0, #1]
   2742e:	7805      	ldrb	r5, [r0, #0]
   27430:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   27434:	2304      	movs	r3, #4
   27436:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   2743a:	0893      	lsrs	r3, r2, #2
   2743c:	2a23      	cmp	r2, #35	; 0x23
   2743e:	d80b      	bhi.n	27458 <cmd_put+0x32>
   27440:	b21a      	sxth	r2, r3
   27442:	2a00      	cmp	r2, #0
   27444:	d03a      	beq.n	274bc <cmd_put+0x96>
   27446:	3b01      	subs	r3, #1
   27448:	2b07      	cmp	r3, #7
   2744a:	d839      	bhi.n	274c0 <cmd_put+0x9a>
   2744c:	e8df f003 	tbb	[pc, r3]
   27450:	241e381a 	.word	0x241e381a
   27454:	3038382a 	.word	0x3038382a
   27458:	2b3f      	cmp	r3, #63	; 0x3f
   2745a:	d105      	bne.n	27468 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   2745c:	f10d 0207 	add.w	r2, sp, #7
   27460:	f7ff ff73 	bl	2734a <vs_cmd_put>
   27464:	4604      	mov	r4, r0
		break;
   27466:	e000      	b.n	2746a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   27468:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   2746a:	4628      	mov	r0, r5
   2746c:	f7ff fd57 	bl	26f1e <command_generates_command_complete_event>
   27470:	b108      	cbz	r0, 27476 <cmd_put+0x50>
   27472:	2c01      	cmp	r4, #1
   27474:	d126      	bne.n	274c4 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   27476:	4622      	mov	r2, r4
   27478:	4629      	mov	r1, r5
   2747a:	4630      	mov	r0, r6
   2747c:	f7ff fd8e 	bl	26f9c <encode_command_status>
}
   27480:	b002      	add	sp, #8
   27482:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   27484:	f7ff fda5 	bl	26fd2 <link_control_cmd_put>
   27488:	4604      	mov	r4, r0
		break;
   2748a:	e7ee      	b.n	2746a <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   2748c:	f10d 0207 	add.w	r2, sp, #7
   27490:	f7ff fdb6 	bl	27000 <controller_and_baseband_cmd_put>
   27494:	4604      	mov	r4, r0
		break;
   27496:	e7e8      	b.n	2746a <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   27498:	f10d 0207 	add.w	r2, sp, #7
   2749c:	f7ff fe2c 	bl	270f8 <info_param_cmd_put>
   274a0:	4604      	mov	r4, r0
		break;
   274a2:	e7e2      	b.n	2746a <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   274a4:	f10d 0207 	add.w	r2, sp, #7
   274a8:	f7ff fd91 	bl	26fce <status_param_cmd_put>
   274ac:	4604      	mov	r4, r0
		break;
   274ae:	e7dc      	b.n	2746a <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   274b0:	f10d 0207 	add.w	r2, sp, #7
   274b4:	f7ff fe6a 	bl	2718c <le_controller_cmd_put>
   274b8:	4604      	mov	r4, r0
		break;
   274ba:	e7d6      	b.n	2746a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   274bc:	2401      	movs	r4, #1
   274be:	e7d4      	b.n	2746a <cmd_put+0x44>
   274c0:	2401      	movs	r4, #1
   274c2:	e7d2      	b.n	2746a <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   274c4:	4623      	mov	r3, r4
   274c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
   274ca:	4629      	mov	r1, r5
   274cc:	4630      	mov	r0, r6
   274ce:	f7ff fd6e 	bl	26fae <encode_command_complete_header>
}
   274d2:	e7d5      	b.n	27480 <cmd_put+0x5a>

000274d4 <m_config_clock_source_get>:
}
   274d4:	2001      	movs	r0, #1
   274d6:	4770      	bx	lr

000274d8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   274d8:	4668      	mov	r0, sp
   274da:	f020 0107 	bic.w	r1, r0, #7
   274de:	468d      	mov	sp, r1
   274e0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   274e2:	f7dc f973 	bl	37cc <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   274e6:	f7ee f9a7 	bl	15838 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   274ea:	f7ee fab3 	bl	15a54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   274ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   274f2:	4685      	mov	sp, r0
   274f4:	4770      	bx	lr

000274f6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   274f6:	4668      	mov	r0, sp
   274f8:	f020 0107 	bic.w	r1, r0, #7
   274fc:	468d      	mov	sp, r1
   274fe:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   27500:	f7dc f8e6 	bl	36d0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   27504:	f7ee f998 	bl	15838 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   27508:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2750c:	4685      	mov	sp, r0
   2750e:	4770      	bx	lr

00027510 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27510:	4668      	mov	r0, sp
   27512:	f020 0107 	bic.w	r1, r0, #7
   27516:	468d      	mov	sp, r1
   27518:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2751a:	f7e5 f8b8 	bl	c68e <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2751e:	f7ee f98b 	bl	15838 <_arch_isr_direct_pm>
   27522:	f7ee fa97 	bl	15a54 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   27526:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2752a:	4685      	mov	sp, r0
   2752c:	4770      	bx	lr

0002752e <z_log_msg2_runtime_create>:
{
   2752e:	b510      	push	{r4, lr}
   27530:	b086      	sub	sp, #24
	va_start(ap, fmt);
   27532:	ac0a      	add	r4, sp, #40	; 0x28
   27534:	9405      	str	r4, [sp, #20]
   27536:	9402      	str	r4, [sp, #8]
   27538:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2753a:	9401      	str	r4, [sp, #4]
   2753c:	9c08      	ldr	r4, [sp, #32]
   2753e:	9400      	str	r4, [sp, #0]
   27540:	f7fc fd1d 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   27544:	b006      	add	sp, #24
   27546:	bd10      	pop	{r4, pc}

00027548 <nrfx_clock_stop>:
	switch (domain) {
   27548:	2801      	cmp	r0, #1
   2754a:	d000      	beq.n	2754e <nrfx_clock_stop+0x6>
   2754c:	4770      	bx	lr
{
   2754e:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   27550:	f7dc ff54 	bl	43fc <mpsl_clock_hfclk_release>
}
   27554:	bd08      	pop	{r3, pc}

00027556 <nrfx_clock_enable>:
}
   27556:	4770      	bx	lr

00027558 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   27558:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2755a:	f7dc fd6d 	bl	4038 <MPSL_IRQ_CLOCK_Handler>
}
   2755e:	bd08      	pop	{r3, pc}

00027560 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   27560:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   27562:	4780      	blx	r0
}
   27564:	bd08      	pop	{r3, pc}

00027566 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   27566:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   27568:	f000 fe9e 	bl	282a8 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   2756c:	bd08      	pop	{r3, pc}

0002756e <pin_is_task_output>:
{
   2756e:	b510      	push	{r4, lr}
   27570:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   27572:	f7f8 f963 	bl	1f83c <pin_is_output>
   27576:	b128      	cbz	r0, 27584 <pin_is_task_output+0x16>
   27578:	4620      	mov	r0, r4
   2757a:	f7f8 f949 	bl	1f810 <pin_in_use_by_te>
   2757e:	b118      	cbz	r0, 27588 <pin_is_task_output+0x1a>
   27580:	2001      	movs	r0, #1
   27582:	e000      	b.n	27586 <pin_is_task_output+0x18>
   27584:	2000      	movs	r0, #0
}
   27586:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   27588:	2000      	movs	r0, #0
   2758a:	e7fc      	b.n	27586 <pin_is_task_output+0x18>

0002758c <pin_is_input>:
{
   2758c:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
   2758e:	f7f8 f955 	bl	1f83c <pin_is_output>
   27592:	f080 0001 	eor.w	r0, r0, #1
}
   27596:	b2c0      	uxtb	r0, r0
   27598:	bd08      	pop	{r3, pc}

0002759a <gpiote_polarity_to_trigger>:
}
   2759a:	4770      	bx	lr

0002759c <gpiote_trigger_to_polarity>:
}
   2759c:	4770      	bx	lr

0002759e <is_level>:
}
   2759e:	2803      	cmp	r0, #3
   275a0:	bf94      	ite	ls
   275a2:	2000      	movls	r0, #0
   275a4:	2001      	movhi	r0, #1
   275a6:	4770      	bx	lr

000275a8 <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   275a8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   275aa:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   275ac:	429a      	cmp	r2, r3
   275ae:	d007      	beq.n	275c0 <xfer_completeness_check+0x18>
   275b0:	2300      	movs	r3, #0
   275b2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   275b6:	2205      	movs	r2, #5
   275b8:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   275bc:	4618      	mov	r0, r3
   275be:	4770      	bx	lr
        return true;
   275c0:	2001      	movs	r0, #1
}
   275c2:	4770      	bx	lr

000275c4 <twi_send_byte>:
{
   275c4:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   275c6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   275c8:	6a88      	ldr	r0, [r1, #40]	; 0x28
   275ca:	4282      	cmp	r2, r0
   275cc:	d205      	bcs.n	275da <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   275ce:	6a49      	ldr	r1, [r1, #36]	; 0x24
   275d0:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   275d2:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   275d6:	2001      	movs	r0, #1
}
   275d8:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   275da:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   275de:	b930      	cbnz	r0, 275ee <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   275e0:	6a0a      	ldr	r2, [r1, #32]
   275e2:	f012 0f40 	tst.w	r2, #64	; 0x40
   275e6:	d106      	bne.n	275f6 <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   275e8:	2001      	movs	r0, #1
   275ea:	6158      	str	r0, [r3, #20]
}
   275ec:	4770      	bx	lr
   275ee:	2201      	movs	r2, #1
   275f0:	61da      	str	r2, [r3, #28]
            return false;
   275f2:	2000      	movs	r0, #0
   275f4:	4770      	bx	lr
   275f6:	2201      	movs	r2, #1
   275f8:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   275fa:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   275fe:	4770      	bx	lr

00027600 <twi_receive_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   27600:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   27602:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   27604:	4293      	cmp	r3, r2
   27606:	d22b      	bcs.n	27660 <twi_receive_byte+0x60>
{
   27608:	b410      	push	{r4}
   2760a:	4604      	mov	r4, r0
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   2760c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   2760e:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   27612:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   27614:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   27616:	3301      	adds	r3, #1
   27618:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   2761a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   2761c:	1e50      	subs	r0, r2, #1
   2761e:	4283      	cmp	r3, r0
   27620:	d007      	beq.n	27632 <twi_receive_byte+0x32>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27622:	4293      	cmp	r3, r2
   27624:	d00d      	beq.n	27642 <twi_receive_byte+0x42>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   27626:	4293      	cmp	r3, r2
   27628:	d011      	beq.n	2764e <twi_receive_byte+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2762a:	2001      	movs	r0, #1
   2762c:	6220      	str	r0, [r4, #32]
}
   2762e:	bc10      	pop	{r4}
   27630:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27632:	6a08      	ldr	r0, [r1, #32]
   27634:	f010 0f40 	tst.w	r0, #64	; 0x40
   27638:	d1f3      	bne.n	27622 <twi_receive_byte+0x22>
    p_reg->SHORTS = mask;
   2763a:	2302      	movs	r3, #2
   2763c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
   27640:	e7f3      	b.n	2762a <twi_receive_byte+0x2a>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   27642:	6a08      	ldr	r0, [r1, #32]
   27644:	f010 0f40 	tst.w	r0, #64	; 0x40
   27648:	d1ed      	bne.n	27626 <twi_receive_byte+0x26>
            return true;
   2764a:	2001      	movs	r0, #1
   2764c:	e7ef      	b.n	2762e <twi_receive_byte+0x2e>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   2764e:	6a0b      	ldr	r3, [r1, #32]
   27650:	f013 0f40 	tst.w	r3, #64	; 0x40
   27654:	d0e9      	beq.n	2762a <twi_receive_byte+0x2a>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   27656:	2302      	movs	r3, #2
   27658:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   2765c:	2000      	movs	r0, #0
   2765e:	e7e6      	b.n	2762e <twi_receive_byte+0x2e>
    return true;
   27660:	2001      	movs	r0, #1
}
   27662:	4770      	bx	lr

00027664 <twi_transfer>:
{
   27664:	b570      	push	{r4, r5, r6, lr}
   27666:	4604      	mov	r4, r0
   27668:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2766a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   2766e:	b1cb      	cbz	r3, 276a4 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27670:	2300      	movs	r3, #0
   27672:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   27676:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   2767a:	2601      	movs	r6, #1
    if (p_cb->error)
   2767c:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   27680:	b193      	cbz	r3, 276a8 <twi_transfer+0x44>
   27682:	2300      	movs	r3, #0
   27684:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   27688:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   2768c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   27690:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   27694:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   27698:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   2769c:	2e00      	cmp	r6, #0
   2769e:	d14c      	bne.n	2773a <twi_transfer+0xd6>
    return true;
   276a0:	2001      	movs	r0, #1
}
   276a2:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   276a4:	2600      	movs	r6, #0
   276a6:	e7e9      	b.n	2767c <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   276a8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   276ac:	b14b      	cbz	r3, 276c2 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   276ae:	2300      	movs	r3, #0
   276b0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   276b4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   276b8:	2301      	movs	r3, #1
   276ba:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   276bc:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   276c0:	e7ec      	b.n	2769c <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   276c2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   276c6:	b1db      	cbz	r3, 27700 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   276c8:	2300      	movs	r3, #0
   276ca:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   276ce:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   276d2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   276d4:	3301      	adds	r3, #1
   276d6:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   276d8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   276dc:	b14b      	cbz	r3, 276f2 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   276de:	2300      	movs	r3, #0
   276e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   276e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   276e8:	2301      	movs	r3, #1
   276ea:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   276ec:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   276f0:	e7d4      	b.n	2769c <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   276f2:	4629      	mov	r1, r5
   276f4:	4620      	mov	r0, r4
   276f6:	f7ff ff65 	bl	275c4 <twi_send_byte>
   276fa:	2800      	cmp	r0, #0
   276fc:	d1ce      	bne.n	2769c <twi_transfer+0x38>
   276fe:	e7d0      	b.n	276a2 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27700:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   27704:	2b00      	cmp	r3, #0
   27706:	d0c9      	beq.n	2769c <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27708:	2300      	movs	r3, #0
   2770a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   2770e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27712:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   27716:	b14b      	cbz	r3, 2772c <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27718:	2300      	movs	r3, #0
   2771a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   2771e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27722:	2301      	movs	r3, #1
   27724:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   27726:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   2772a:	e7b7      	b.n	2769c <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   2772c:	4629      	mov	r1, r5
   2772e:	4620      	mov	r0, r4
   27730:	f7ff ff66 	bl	27600 <twi_receive_byte>
   27734:	2800      	cmp	r0, #0
   27736:	d1b1      	bne.n	2769c <twi_transfer+0x38>
   27738:	e7b3      	b.n	276a2 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   2773a:	2300      	movs	r3, #0
   2773c:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   27740:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   27744:	b10b      	cbz	r3, 2774a <twi_transfer+0xe6>
        return false;
   27746:	2000      	movs	r0, #0
   27748:	e7ab      	b.n	276a2 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   2774a:	4629      	mov	r1, r5
   2774c:	4620      	mov	r0, r4
   2774e:	f7ff ff2b 	bl	275a8 <xfer_completeness_check>
   27752:	f080 0001 	eor.w	r0, r0, #1
   27756:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   2775a:	e7f4      	b.n	27746 <twi_transfer+0xe2>

0002775c <twi_irq_handler>:
{
   2775c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2775e:	b087      	sub	sp, #28
   27760:	4607      	mov	r7, r0
   27762:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   27764:	f7ff ff7e 	bl	27664 <twi_transfer>
   27768:	2800      	cmp	r0, #0
   2776a:	d15d      	bne.n	27828 <twi_irq_handler+0xcc>
    if (!p_cb->error &&
   2776c:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
   27770:	f1bc 0f00 	cmp.w	ip, #0
   27774:	d104      	bne.n	27780 <twi_irq_handler+0x24>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   27776:	7b22      	ldrb	r2, [r4, #12]
   27778:	1e93      	subs	r3, r2, #2
   2777a:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   2777c:	2b01      	cmp	r3, #1
   2777e:	d914      	bls.n	277aa <twi_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
   27780:	ad01      	add	r5, sp, #4
   27782:	f104 060c 	add.w	r6, r4, #12
   27786:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   27788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2778a:	6833      	ldr	r3, [r6, #0]
   2778c:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   2778e:	f1bc 0f00 	cmp.w	ip, #0
   27792:	d038      	beq.n	27806 <twi_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   27794:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   27798:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   2779c:	f013 0f02 	tst.w	r3, #2
   277a0:	d01f      	beq.n	277e2 <twi_irq_handler+0x86>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   277a2:	2301      	movs	r3, #1
   277a4:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   277a8:	e030      	b.n	2780c <twi_irq_handler+0xb0>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   277aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
   277ac:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   277ae:	4299      	cmp	r1, r3
   277b0:	d1e6      	bne.n	27780 <twi_irq_handler+0x24>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   277b2:	69e3      	ldr	r3, [r4, #28]
   277b4:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   277b6:	6963      	ldr	r3, [r4, #20]
   277b8:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   277ba:	6a23      	ldr	r3, [r4, #32]
   277bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
   277c0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   277c4:	2300      	movs	r3, #0
   277c6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   277ca:	2a03      	cmp	r2, #3
   277cc:	d004      	beq.n	277d8 <twi_irq_handler+0x7c>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   277ce:	4621      	mov	r1, r4
   277d0:	4638      	mov	r0, r7
   277d2:	f7f8 fd57 	bl	20284 <twi_rx_start_transfer>
   277d6:	e027      	b.n	27828 <twi_irq_handler+0xcc>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   277d8:	4621      	mov	r1, r4
   277da:	4638      	mov	r0, r7
   277dc:	f7f8 fcf4 	bl	201c8 <twi_tx_start_transfer>
   277e0:	e022      	b.n	27828 <twi_irq_handler+0xcc>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   277e2:	f013 0f04 	tst.w	r3, #4
   277e6:	d003      	beq.n	277f0 <twi_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   277e8:	2302      	movs	r3, #2
   277ea:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   277ee:	e00d      	b.n	2780c <twi_irq_handler+0xb0>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   277f0:	f013 0f01 	tst.w	r3, #1
   277f4:	d003      	beq.n	277fe <twi_irq_handler+0xa2>
                event.type = NRFX_TWI_EVT_OVERRUN;
   277f6:	2303      	movs	r3, #3
   277f8:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   277fc:	e006      	b.n	2780c <twi_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   277fe:	2304      	movs	r3, #4
   27800:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   27804:	e002      	b.n	2780c <twi_irq_handler+0xb0>
            event.type = NRFX_TWI_EVT_DONE;
   27806:	2300      	movs	r3, #0
   27808:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   2780c:	2300      	movs	r3, #0
   2780e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   27812:	6a23      	ldr	r3, [r4, #32]
   27814:	f013 0f04 	tst.w	r3, #4
   27818:	d002      	beq.n	27820 <twi_irq_handler+0xc4>
   2781a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   2781e:	b11b      	cbz	r3, 27828 <twi_irq_handler+0xcc>
            p_cb->handler(&event, p_cb->p_context);
   27820:	6823      	ldr	r3, [r4, #0]
   27822:	6861      	ldr	r1, [r4, #4]
   27824:	4668      	mov	r0, sp
   27826:	4798      	blx	r3
}
   27828:	b007      	add	sp, #28
   2782a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002782c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   2782c:	b508      	push	{r3, lr}
  _DoInit();
   2782e:	f7f8 fef9 	bl	20624 <_DoInit>
}
   27832:	bd08      	pop	{r3, pc}

00027834 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   27834:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   27836:	f7ff fff9 	bl	2782c <SEGGER_RTT_Init>

	return 0;
}
   2783a:	2000      	movs	r0, #0
   2783c:	bd08      	pop	{r3, pc}

0002783e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2783e:	b148      	cbz	r0, 27854 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   27840:	68c3      	ldr	r3, [r0, #12]
   27842:	8818      	ldrh	r0, [r3, #0]
   27844:	f3c0 0008 	ubfx	r0, r0, #0, #9
   27848:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2784c:	bf14      	ite	ne
   2784e:	2000      	movne	r0, #0
   27850:	2001      	moveq	r0, #1
   27852:	4770      	bx	lr
		return false;
   27854:	2000      	movs	r0, #0
}
   27856:	4770      	bx	lr

00027858 <z_log_msg2_runtime_create>:
{
   27858:	b510      	push	{r4, lr}
   2785a:	b086      	sub	sp, #24
	va_start(ap, fmt);
   2785c:	ac0a      	add	r4, sp, #40	; 0x28
   2785e:	9405      	str	r4, [sp, #20]
   27860:	9402      	str	r4, [sp, #8]
   27862:	9c09      	ldr	r4, [sp, #36]	; 0x24
   27864:	9401      	str	r4, [sp, #4]
   27866:	9c08      	ldr	r4, [sp, #32]
   27868:	9400      	str	r4, [sp, #0]
   2786a:	f7fc fb88 	bl	23f7e <z_impl_z_log_msg2_runtime_vcreate>
}
   2786e:	b006      	add	sp, #24
   27870:	bd10      	pop	{r4, pc}

00027872 <arch_system_halt>:
	__asm__ volatile(
   27872:	f04f 0240 	mov.w	r2, #64	; 0x40
   27876:	f3ef 8311 	mrs	r3, BASEPRI
   2787a:	f382 8812 	msr	BASEPRI_MAX, r2
   2787e:	f3bf 8f6f 	isb	sy
	for (;;) {
   27882:	e7fe      	b.n	27882 <arch_system_halt+0x10>

00027884 <k_heap_init>:
{
   27884:	b510      	push	{r4, lr}
   27886:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2788a:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2788c:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2788e:	f7fc fa48 	bl	23d22 <sys_heap_init>
}
   27892:	bd10      	pop	{r4, pc}

00027894 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   27894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27898:	b087      	sub	sp, #28
   2789a:	4680      	mov	r8, r0
   2789c:	9103      	str	r1, [sp, #12]
   2789e:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   278a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   278a4:	f000 fd06 	bl	282b4 <sys_clock_timeout_end_calc>
   278a8:	4681      	mov	r9, r0
   278aa:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   278ac:	f108 0314 	add.w	r3, r8, #20
   278b0:	9305      	str	r3, [sp, #20]
   278b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   278b6:	f3ef 8511 	mrs	r5, BASEPRI
   278ba:	f383 8812 	msr	BASEPRI_MAX, r3
   278be:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   278c2:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   278c6:	4654      	mov	r4, sl

	while (ret == NULL) {
   278c8:	e00f      	b.n	278ea <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   278ca:	e9cd 6700 	strd	r6, r7, [sp]
   278ce:	f108 020c 	add.w	r2, r8, #12
   278d2:	4629      	mov	r1, r5
   278d4:	9805      	ldr	r0, [sp, #20]
   278d6:	f7f9 ffcf 	bl	21878 <z_pend_curr>
   278da:	f04f 0340 	mov.w	r3, #64	; 0x40
   278de:	f3ef 8511 	mrs	r5, BASEPRI
   278e2:	f383 8812 	msr	BASEPRI_MAX, r3
   278e6:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   278ea:	b9b4      	cbnz	r4, 2791a <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   278ec:	9a04      	ldr	r2, [sp, #16]
   278ee:	9903      	ldr	r1, [sp, #12]
   278f0:	4640      	mov	r0, r8
   278f2:	f7fc f9a5 	bl	23c40 <sys_heap_aligned_alloc>
   278f6:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   278f8:	f7fa fb72 	bl	21fe0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   278fc:	b96c      	cbnz	r4, 2791a <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   278fe:	ebb9 0600 	subs.w	r6, r9, r0
   27902:	eb6b 0701 	sbc.w	r7, fp, r1
   27906:	2e01      	cmp	r6, #1
   27908:	f177 0300 	sbcs.w	r3, r7, #0
   2790c:	db05      	blt.n	2791a <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   2790e:	f1ba 0f00 	cmp.w	sl, #0
   27912:	d1da      	bne.n	278ca <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   27914:	f04f 0a01 	mov.w	sl, #1
   27918:	e7d7      	b.n	278ca <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   2791a:	f385 8811 	msr	BASEPRI, r5
   2791e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   27922:	4620      	mov	r0, r4
   27924:	b007      	add	sp, #28
   27926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002792a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2792a:	b570      	push	{r4, r5, r6, lr}
   2792c:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2792e:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   27932:	f04f 0340 	mov.w	r3, #64	; 0x40
   27936:	f3ef 8511 	mrs	r5, BASEPRI
   2793a:	f383 8812 	msr	BASEPRI_MAX, r3
   2793e:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   27942:	f7fc f939 	bl	23bb8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   27946:	f104 000c 	add.w	r0, r4, #12
   2794a:	f000 fbe7 	bl	2811c <z_unpend_all>
   2794e:	b920      	cbnz	r0, 2795a <k_heap_free+0x30>
	__asm__ volatile(
   27950:	f385 8811 	msr	BASEPRI, r5
   27954:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   27958:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   2795a:	4629      	mov	r1, r5
   2795c:	4630      	mov	r0, r6
   2795e:	f7f9 fe27 	bl	215b0 <z_reschedule>
   27962:	e7f9      	b.n	27958 <k_heap_free+0x2e>

00027964 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   27964:	68c2      	ldr	r2, [r0, #12]
   27966:	6903      	ldr	r3, [r0, #16]
   27968:	431a      	orrs	r2, r3
   2796a:	f012 0203 	ands.w	r2, r2, #3
   2796e:	d10d      	bne.n	2798c <create_free_list+0x28>
	slab->free_list = NULL;
   27970:	2100      	movs	r1, #0
   27972:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   27974:	e005      	b.n	27982 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   27976:	6941      	ldr	r1, [r0, #20]
   27978:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2797a:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2797c:	68c1      	ldr	r1, [r0, #12]
   2797e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   27980:	3201      	adds	r2, #1
   27982:	6881      	ldr	r1, [r0, #8]
   27984:	4291      	cmp	r1, r2
   27986:	d8f6      	bhi.n	27976 <create_free_list+0x12>
	return 0;
   27988:	2000      	movs	r0, #0
   2798a:	4770      	bx	lr
		return -EINVAL;
   2798c:	f06f 0015 	mvn.w	r0, #21
}
   27990:	4770      	bx	lr

00027992 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27994:	4604      	mov	r4, r0
   27996:	460d      	mov	r5, r1
	__asm__ volatile(
   27998:	f04f 0340 	mov.w	r3, #64	; 0x40
   2799c:	f3ef 8611 	mrs	r6, BASEPRI
   279a0:	f383 8812 	msr	BASEPRI_MAX, r3
   279a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   279a8:	6943      	ldr	r3, [r0, #20]
   279aa:	b163      	cbz	r3, 279c6 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   279ac:	682b      	ldr	r3, [r5, #0]
   279ae:	6962      	ldr	r2, [r4, #20]
   279b0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   279b2:	682b      	ldr	r3, [r5, #0]
   279b4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   279b6:	69a3      	ldr	r3, [r4, #24]
   279b8:	3b01      	subs	r3, #1
   279ba:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   279bc:	f386 8811 	msr	BASEPRI, r6
   279c0:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   279c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   279c6:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   279ca:	f000 fb7c 	bl	280c6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   279ce:	2800      	cmp	r0, #0
   279d0:	d0ec      	beq.n	279ac <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   279d2:	682a      	ldr	r2, [r5, #0]
   279d4:	2100      	movs	r1, #0
   279d6:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   279da:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   279dc:	f000 fad8 	bl	27f90 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   279e0:	4631      	mov	r1, r6
   279e2:	4638      	mov	r0, r7
   279e4:	f7f9 fde4 	bl	215b0 <z_reschedule>
			return;
   279e8:	e7ec      	b.n	279c4 <k_mem_slab_free+0x32>

000279ea <setup_thread_stack>:
{
   279ea:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   279ec:	3207      	adds	r2, #7
   279ee:	f022 0207 	bic.w	r2, r2, #7
   279f2:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   279f6:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   279fa:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   279fe:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   27a02:	2200      	movs	r2, #0
   27a04:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   27a08:	18c8      	adds	r0, r1, r3
   27a0a:	bc10      	pop	{r4}
   27a0c:	4770      	bx	lr

00027a0e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27a0e:	f3ef 8005 	mrs	r0, IPSR
}
   27a12:	3800      	subs	r0, #0
   27a14:	bf18      	it	ne
   27a16:	2001      	movne	r0, #1
   27a18:	4770      	bx	lr

00027a1a <k_thread_name_get>:
}
   27a1a:	3078      	adds	r0, #120	; 0x78
   27a1c:	4770      	bx	lr

00027a1e <z_impl_k_thread_start>:
{
   27a1e:	b508      	push	{r3, lr}
	z_sched_start(thread);
   27a20:	f7f9 fef0 	bl	21804 <z_sched_start>
}
   27a24:	bd08      	pop	{r3, pc}

00027a26 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   27a26:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   27a28:	2400      	movs	r4, #0
   27a2a:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   27a2c:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   27a2e:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   27a30:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   27a32:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   27a34:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   27a36:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   27a38:	bc10      	pop	{r4}
   27a3a:	4770      	bx	lr

00027a3c <z_impl_k_thread_create>:
{
   27a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   27a3e:	b087      	sub	sp, #28
   27a40:	4604      	mov	r4, r0
   27a42:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   27a46:	2500      	movs	r5, #0
   27a48:	9505      	str	r5, [sp, #20]
   27a4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   27a4c:	9504      	str	r5, [sp, #16]
   27a4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   27a50:	9503      	str	r5, [sp, #12]
   27a52:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   27a54:	9502      	str	r5, [sp, #8]
   27a56:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   27a58:	9501      	str	r5, [sp, #4]
   27a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   27a5c:	9500      	str	r5, [sp, #0]
   27a5e:	f7f9 f951 	bl	20d04 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   27a62:	f1b7 3fff 	cmp.w	r7, #4294967295
   27a66:	bf08      	it	eq
   27a68:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   27a6c:	d102      	bne.n	27a74 <z_impl_k_thread_create+0x38>
}
   27a6e:	4620      	mov	r0, r4
   27a70:	b007      	add	sp, #28
   27a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   27a74:	4632      	mov	r2, r6
   27a76:	463b      	mov	r3, r7
   27a78:	4620      	mov	r0, r4
   27a7a:	f7f9 f931 	bl	20ce0 <schedule_new_thread>
   27a7e:	e7f6      	b.n	27a6e <z_impl_k_thread_create+0x32>

00027a80 <z_pm_save_idle_exit>:
{
   27a80:	b508      	push	{r3, lr}
	pm_system_resume();
   27a82:	f7ed f85b 	bl	14b3c <pm_system_resume>
	sys_clock_idle_exit();
   27a86:	f7ff f94e 	bl	26d26 <sys_clock_idle_exit>
}
   27a8a:	bd08      	pop	{r3, pc}

00027a8c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   27a8c:	4288      	cmp	r0, r1
   27a8e:	da00      	bge.n	27a92 <new_prio_for_inheritance+0x6>
   27a90:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   27a92:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   27a96:	db01      	blt.n	27a9c <new_prio_for_inheritance+0x10>
   27a98:	4608      	mov	r0, r1
   27a9a:	4770      	bx	lr
   27a9c:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   27aa0:	4770      	bx	lr

00027aa2 <adjust_owner_prio>:
{
   27aa2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   27aa4:	6880      	ldr	r0, [r0, #8]
   27aa6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   27aaa:	428b      	cmp	r3, r1
   27aac:	d101      	bne.n	27ab2 <adjust_owner_prio+0x10>
	return false;
   27aae:	2000      	movs	r0, #0
}
   27ab0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   27ab2:	f7f9 fef5 	bl	218a0 <z_set_prio>
   27ab6:	e7fb      	b.n	27ab0 <adjust_owner_prio+0xe>

00027ab8 <prepare_thread_to_run>:
{
   27ab8:	b508      	push	{r3, lr}
   27aba:	2200      	movs	r2, #0
   27abc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   27ac0:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   27ac2:	f000 fa65 	bl	27f90 <z_ready_thread>
}
   27ac6:	bd08      	pop	{r3, pc}

00027ac8 <queue_insert>:
{
   27ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27acc:	4605      	mov	r5, r0
   27ace:	460e      	mov	r6, r1
   27ad0:	4614      	mov	r4, r2
   27ad2:	461f      	mov	r7, r3
   27ad4:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27ad8:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
   27adc:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ae0:	f3ef 8911 	mrs	r9, BASEPRI
   27ae4:	f383 8812 	msr	BASEPRI_MAX, r3
   27ae8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   27aec:	b102      	cbz	r2, 27af0 <queue_insert+0x28>
	return list->tail;
   27aee:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   27af0:	4640      	mov	r0, r8
   27af2:	f000 fae8 	bl	280c6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   27af6:	b9a0      	cbnz	r0, 27b22 <queue_insert+0x5a>
	if (alloc) {
   27af8:	b9e7      	cbnz	r7, 27b34 <queue_insert+0x6c>
	node->next_and_flags = flags;
   27afa:	2300      	movs	r3, #0
   27afc:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27afe:	b356      	cbz	r6, 27b56 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27b00:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   27b02:	f033 0303 	bics.w	r3, r3, #3
   27b06:	d134      	bne.n	27b72 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27b08:	6823      	ldr	r3, [r4, #0]
   27b0a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27b0e:	6023      	str	r3, [r4, #0]
	return list->tail;
   27b10:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   27b12:	b35a      	cbz	r2, 27b6c <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27b14:	6813      	ldr	r3, [r2, #0]
   27b16:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27b1a:	4323      	orrs	r3, r4
   27b1c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   27b1e:	606c      	str	r4, [r5, #4]
}
   27b20:	e031      	b.n	27b86 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   27b22:	4621      	mov	r1, r4
   27b24:	f7ff ffc8 	bl	27ab8 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   27b28:	4649      	mov	r1, r9
   27b2a:	4640      	mov	r0, r8
   27b2c:	f7f9 fd40 	bl	215b0 <z_reschedule>
		return 0;
   27b30:	2000      	movs	r0, #0
   27b32:	e032      	b.n	27b9a <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   27b34:	2108      	movs	r1, #8
   27b36:	2000      	movs	r0, #0
   27b38:	f7fa fd3e 	bl	225b8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   27b3c:	b120      	cbz	r0, 27b48 <queue_insert+0x80>
		anode->data = data;
   27b3e:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   27b40:	2201      	movs	r2, #1
   27b42:	6002      	str	r2, [r0, #0]
		data = anode;
   27b44:	4604      	mov	r4, r0
   27b46:	e7da      	b.n	27afe <queue_insert+0x36>
	__asm__ volatile(
   27b48:	f389 8811 	msr	BASEPRI, r9
   27b4c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   27b50:	f06f 000b 	mvn.w	r0, #11
   27b54:	e021      	b.n	27b9a <queue_insert+0xd2>
	return list->head;
   27b56:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27b58:	6823      	ldr	r3, [r4, #0]
   27b5a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27b5e:	4313      	orrs	r3, r2
   27b60:	6023      	str	r3, [r4, #0]
	list->head = node;
   27b62:	602c      	str	r4, [r5, #0]
	return list->tail;
   27b64:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   27b66:	b973      	cbnz	r3, 27b86 <queue_insert+0xbe>
	list->tail = node;
   27b68:	606c      	str	r4, [r5, #4]
}
   27b6a:	e00c      	b.n	27b86 <queue_insert+0xbe>
	list->tail = node;
   27b6c:	606c      	str	r4, [r5, #4]
	list->head = node;
   27b6e:	602c      	str	r4, [r5, #0]
}
   27b70:	e009      	b.n	27b86 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27b72:	6822      	ldr	r2, [r4, #0]
   27b74:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27b78:	4313      	orrs	r3, r2
   27b7a:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27b7c:	6833      	ldr	r3, [r6, #0]
   27b7e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27b82:	431c      	orrs	r4, r3
   27b84:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27b86:	2104      	movs	r1, #4
   27b88:	f105 0010 	add.w	r0, r5, #16
   27b8c:	f000 fc4b 	bl	28426 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   27b90:	4649      	mov	r1, r9
   27b92:	4640      	mov	r0, r8
   27b94:	f7f9 fd0c 	bl	215b0 <z_reschedule>
	return 0;
   27b98:	2000      	movs	r0, #0
}
   27b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00027b9e <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   27b9e:	b160      	cbz	r0, 27bba <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27ba0:	6803      	ldr	r3, [r0, #0]
   27ba2:	f013 0f03 	tst.w	r3, #3
   27ba6:	d008      	beq.n	27bba <z_queue_node_peek+0x1c>
{
   27ba8:	b510      	push	{r4, lr}
		ret = anode->data;
   27baa:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   27bac:	b909      	cbnz	r1, 27bb2 <z_queue_node_peek+0x14>
		ret = anode->data;
   27bae:	4620      	mov	r0, r4
}
   27bb0:	bd10      	pop	{r4, pc}
			k_free(anode);
   27bb2:	f000 fc5c 	bl	2846e <k_free>
		ret = anode->data;
   27bb6:	4620      	mov	r0, r4
   27bb8:	e7fa      	b.n	27bb0 <z_queue_node_peek+0x12>
}
   27bba:	4770      	bx	lr

00027bbc <z_impl_k_queue_init>:
	list->head = NULL;
   27bbc:	2300      	movs	r3, #0
   27bbe:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   27bc0:	6043      	str	r3, [r0, #4]
   27bc2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   27bc6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   27bc8:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   27bca:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   27bce:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   27bd0:	6143      	str	r3, [r0, #20]
}
   27bd2:	4770      	bx	lr

00027bd4 <k_queue_append>:
{
   27bd4:	b500      	push	{lr}
   27bd6:	b083      	sub	sp, #12
   27bd8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   27bda:	2301      	movs	r3, #1
   27bdc:	9300      	str	r3, [sp, #0]
   27bde:	2300      	movs	r3, #0
   27be0:	4619      	mov	r1, r3
   27be2:	f7ff ff71 	bl	27ac8 <queue_insert>
}
   27be6:	b003      	add	sp, #12
   27be8:	f85d fb04 	ldr.w	pc, [sp], #4

00027bec <k_queue_prepend>:
{
   27bec:	b500      	push	{lr}
   27bee:	b083      	sub	sp, #12
   27bf0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   27bf2:	2100      	movs	r1, #0
   27bf4:	9100      	str	r1, [sp, #0]
   27bf6:	460b      	mov	r3, r1
   27bf8:	f7ff ff66 	bl	27ac8 <queue_insert>
}
   27bfc:	b003      	add	sp, #12
   27bfe:	f85d fb04 	ldr.w	pc, [sp], #4

00027c02 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   27c02:	b3a1      	cbz	r1, 27c6e <k_queue_append_list+0x6c>
{
   27c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c08:	4606      	mov	r6, r0
   27c0a:	4617      	mov	r7, r2
   27c0c:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   27c0e:	b38a      	cbz	r2, 27c74 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   27c10:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   27c14:	f04f 0340 	mov.w	r3, #64	; 0x40
   27c18:	f3ef 8811 	mrs	r8, BASEPRI
   27c1c:	f383 8812 	msr	BASEPRI_MAX, r3
   27c20:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   27c24:	4628      	mov	r0, r5
   27c26:	f000 fa4e 	bl	280c6 <z_unpend_first_thread>
   27c2a:	e006      	b.n	27c3a <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   27c2c:	4621      	mov	r1, r4
   27c2e:	f7ff ff43 	bl	27ab8 <prepare_thread_to_run>
		head = *(void **)head;
   27c32:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   27c34:	4628      	mov	r0, r5
   27c36:	f000 fa46 	bl	280c6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   27c3a:	b10c      	cbz	r4, 27c40 <k_queue_append_list+0x3e>
   27c3c:	2800      	cmp	r0, #0
   27c3e:	d1f5      	bne.n	27c2c <k_queue_append_list+0x2a>
	if (head != NULL) {
   27c40:	b13c      	cbz	r4, 27c52 <k_queue_append_list+0x50>
	return list->tail;
   27c42:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   27c44:	b18a      	cbz	r2, 27c6a <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27c46:	6813      	ldr	r3, [r2, #0]
   27c48:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   27c4c:	431c      	orrs	r4, r3
   27c4e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   27c50:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   27c52:	2104      	movs	r1, #4
   27c54:	f106 0010 	add.w	r0, r6, #16
   27c58:	f000 fbe5 	bl	28426 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   27c5c:	4641      	mov	r1, r8
   27c5e:	4628      	mov	r0, r5
   27c60:	f7f9 fca6 	bl	215b0 <z_reschedule>
	return 0;
   27c64:	2000      	movs	r0, #0
}
   27c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   27c6a:	6034      	str	r4, [r6, #0]
}
   27c6c:	e7f0      	b.n	27c50 <k_queue_append_list+0x4e>
		return -EINVAL;
   27c6e:	f06f 0015 	mvn.w	r0, #21
}
   27c72:	4770      	bx	lr
		return -EINVAL;
   27c74:	f06f 0015 	mvn.w	r0, #21
   27c78:	e7f5      	b.n	27c66 <k_queue_append_list+0x64>

00027c7a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   27c7a:	b15a      	cbz	r2, 27c94 <z_impl_k_sem_init+0x1a>
   27c7c:	428a      	cmp	r2, r1
   27c7e:	d30c      	bcc.n	27c9a <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   27c80:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   27c82:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   27c84:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   27c86:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   27c88:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   27c8c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   27c8e:	6143      	str	r3, [r0, #20]
	return 0;
   27c90:	2000      	movs	r0, #0
   27c92:	4770      	bx	lr
		return -EINVAL;
   27c94:	f06f 0015 	mvn.w	r0, #21
   27c98:	4770      	bx	lr
   27c9a:	f06f 0015 	mvn.w	r0, #21
}
   27c9e:	4770      	bx	lr

00027ca0 <cancel_async_locked>:
{
   27ca0:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   27ca2:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   27ca4:	f012 0f02 	tst.w	r2, #2
   27ca8:	d009      	beq.n	27cbe <cancel_async_locked+0x1e>
	return *flagp;
   27caa:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   27cac:	f012 000f 	ands.w	r0, r2, #15
   27cb0:	d037      	beq.n	27d22 <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   27cb2:	f042 0202 	orr.w	r2, r2, #2
   27cb6:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   27cb8:	f002 000f 	and.w	r0, r2, #15
	return ret;
   27cbc:	4770      	bx	lr
{
   27cbe:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   27cc0:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   27cc2:	f022 0104 	bic.w	r1, r2, #4
   27cc6:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   27cc8:	f012 0f04 	tst.w	r2, #4
   27ccc:	d011      	beq.n	27cf2 <cancel_async_locked+0x52>
	return list->head;
   27cce:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27cd2:	2100      	movs	r1, #0
   27cd4:	b16a      	cbz	r2, 27cf2 <cancel_async_locked+0x52>
   27cd6:	4290      	cmp	r0, r2
   27cd8:	d002      	beq.n	27ce0 <cancel_async_locked+0x40>
   27cda:	4611      	mov	r1, r2
   27cdc:	6812      	ldr	r2, [r2, #0]
   27cde:	e7f9      	b.n	27cd4 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   27ce0:	b191      	cbz	r1, 27d08 <cancel_async_locked+0x68>
	return node->next;
   27ce2:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   27ce4:	600a      	str	r2, [r1, #0]
	return list->tail;
   27ce6:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   27cea:	4293      	cmp	r3, r2
   27cec:	d016      	beq.n	27d1c <cancel_async_locked+0x7c>
	parent->next = child;
   27cee:	2200      	movs	r2, #0
   27cf0:	601a      	str	r2, [r3, #0]
	return *flagp;
   27cf2:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   27cf4:	f012 000f 	ands.w	r0, r2, #15
   27cf8:	d004      	beq.n	27d04 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   27cfa:	f042 0202 	orr.w	r2, r2, #2
   27cfe:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   27d00:	f002 000f 	and.w	r0, r2, #15
}
   27d04:	bc10      	pop	{r4}
   27d06:	4770      	bx	lr
	return node->next;
   27d08:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   27d0a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   27d0e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   27d12:	428b      	cmp	r3, r1
   27d14:	d1eb      	bne.n	27cee <cancel_async_locked+0x4e>
	list->tail = node;
   27d16:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   27d1a:	e7e8      	b.n	27cee <cancel_async_locked+0x4e>
	list->tail = node;
   27d1c:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   27d20:	e7e5      	b.n	27cee <cancel_async_locked+0x4e>
   27d22:	4770      	bx	lr

00027d24 <work_timeout>:
{
   27d24:	b510      	push	{r4, lr}
   27d26:	b082      	sub	sp, #8
   27d28:	4603      	mov	r3, r0
   27d2a:	f04f 0240 	mov.w	r2, #64	; 0x40
   27d2e:	f3ef 8411 	mrs	r4, BASEPRI
   27d32:	f382 8812 	msr	BASEPRI_MAX, r2
   27d36:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   27d3a:	2200      	movs	r2, #0
   27d3c:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   27d3e:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   27d42:	f022 0108 	bic.w	r1, r2, #8
   27d46:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   27d4a:	f012 0f08 	tst.w	r2, #8
   27d4e:	d105      	bne.n	27d5c <work_timeout+0x38>
	__asm__ volatile(
   27d50:	f384 8811 	msr	BASEPRI, r4
   27d54:	f3bf 8f6f 	isb	sy
}
   27d58:	b002      	add	sp, #8
   27d5a:	bd10      	pop	{r4, pc}
   27d5c:	3810      	subs	r0, #16
		queue = dw->queue;
   27d5e:	699b      	ldr	r3, [r3, #24]
   27d60:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   27d62:	a901      	add	r1, sp, #4
   27d64:	f7f9 fa0e 	bl	21184 <submit_to_queue_locked>
   27d68:	e7f2      	b.n	27d50 <work_timeout+0x2c>

00027d6a <cancel_delayable_async_locked>:
{
   27d6a:	b510      	push	{r4, lr}
   27d6c:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   27d6e:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   27d70:	f023 0208 	bic.w	r2, r3, #8
   27d74:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27d76:	f013 0f08 	tst.w	r3, #8
   27d7a:	d103      	bne.n	27d84 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   27d7c:	4620      	mov	r0, r4
   27d7e:	f7ff ff8f 	bl	27ca0 <cancel_async_locked>
}
   27d82:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   27d84:	3010      	adds	r0, #16
   27d86:	f000 fa2c 	bl	281e2 <z_abort_timeout>
		ret = true;
   27d8a:	e7f7      	b.n	27d7c <cancel_delayable_async_locked+0x12>

00027d8c <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   27d8c:	2300      	movs	r3, #0
   27d8e:	6003      	str	r3, [r0, #0]
   27d90:	6083      	str	r3, [r0, #8]
   27d92:	60c3      	str	r3, [r0, #12]
   27d94:	6041      	str	r1, [r0, #4]
}
   27d96:	4770      	bx	lr

00027d98 <k_work_submit_to_queue>:
{
   27d98:	b530      	push	{r4, r5, lr}
   27d9a:	b083      	sub	sp, #12
   27d9c:	9001      	str	r0, [sp, #4]
   27d9e:	4608      	mov	r0, r1
	__asm__ volatile(
   27da0:	f04f 0340 	mov.w	r3, #64	; 0x40
   27da4:	f3ef 8511 	mrs	r5, BASEPRI
   27da8:	f383 8812 	msr	BASEPRI_MAX, r3
   27dac:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   27db0:	a901      	add	r1, sp, #4
   27db2:	f7f9 f9e7 	bl	21184 <submit_to_queue_locked>
   27db6:	4604      	mov	r4, r0
	__asm__ volatile(
   27db8:	f385 8811 	msr	BASEPRI, r5
   27dbc:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   27dc0:	2800      	cmp	r0, #0
   27dc2:	dc02      	bgt.n	27dca <k_work_submit_to_queue+0x32>
}
   27dc4:	4620      	mov	r0, r4
   27dc6:	b003      	add	sp, #12
   27dc8:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   27dca:	f7f9 ff51 	bl	21c70 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   27dce:	2800      	cmp	r0, #0
   27dd0:	d0f8      	beq.n	27dc4 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   27dd2:	f7f9 fe87 	bl	21ae4 <z_impl_k_yield>
	return ret;
   27dd6:	e7f5      	b.n	27dc4 <k_work_submit_to_queue+0x2c>

00027dd8 <k_work_init_delayable>:
{
   27dd8:	b538      	push	{r3, r4, r5, lr}
   27dda:	4604      	mov	r4, r0
   27ddc:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   27dde:	2230      	movs	r2, #48	; 0x30
   27de0:	2100      	movs	r1, #0
   27de2:	f000 fb7d 	bl	284e0 <memset>
   27de6:	6065      	str	r5, [r4, #4]
   27de8:	f44f 7380 	mov.w	r3, #256	; 0x100
   27dec:	60e3      	str	r3, [r4, #12]
}
   27dee:	bd38      	pop	{r3, r4, r5, pc}

00027df0 <k_work_schedule_for_queue>:
{
   27df0:	b510      	push	{r4, lr}
   27df2:	b082      	sub	sp, #8
   27df4:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   27df6:	f04f 0040 	mov.w	r0, #64	; 0x40
   27dfa:	f3ef 8411 	mrs	r4, BASEPRI
   27dfe:	f380 8812 	msr	BASEPRI_MAX, r0
   27e02:	f3bf 8f6f 	isb	sy
	return *flagp;
   27e06:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   27e08:	f010 0f0e 	tst.w	r0, #14
   27e0c:	d006      	beq.n	27e1c <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   27e0e:	2000      	movs	r0, #0
	__asm__ volatile(
   27e10:	f384 8811 	msr	BASEPRI, r4
   27e14:	f3bf 8f6f 	isb	sy
}
   27e18:	b002      	add	sp, #8
   27e1a:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   27e1c:	a801      	add	r0, sp, #4
   27e1e:	f7f9 faf3 	bl	21408 <schedule_for_queue_locked>
   27e22:	e7f5      	b.n	27e10 <k_work_schedule_for_queue+0x20>

00027e24 <k_work_reschedule_for_queue>:
{
   27e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   27e26:	b083      	sub	sp, #12
   27e28:	9001      	str	r0, [sp, #4]
   27e2a:	460c      	mov	r4, r1
   27e2c:	4616      	mov	r6, r2
   27e2e:	461d      	mov	r5, r3
	__asm__ volatile(
   27e30:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e34:	f3ef 8711 	mrs	r7, BASEPRI
   27e38:	f383 8812 	msr	BASEPRI_MAX, r3
   27e3c:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   27e40:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   27e42:	f023 0208 	bic.w	r2, r3, #8
   27e46:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   27e48:	f013 0f08 	tst.w	r3, #8
   27e4c:	d10b      	bne.n	27e66 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   27e4e:	4632      	mov	r2, r6
   27e50:	462b      	mov	r3, r5
   27e52:	4621      	mov	r1, r4
   27e54:	a801      	add	r0, sp, #4
   27e56:	f7f9 fad7 	bl	21408 <schedule_for_queue_locked>
	__asm__ volatile(
   27e5a:	f387 8811 	msr	BASEPRI, r7
   27e5e:	f3bf 8f6f 	isb	sy
}
   27e62:	b003      	add	sp, #12
   27e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   27e66:	f101 0010 	add.w	r0, r1, #16
   27e6a:	f000 f9ba 	bl	281e2 <z_abort_timeout>
		ret = true;
   27e6e:	e7ee      	b.n	27e4e <k_work_reschedule_for_queue+0x2a>

00027e70 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   27e70:	b510      	push	{r4, lr}
	__asm__ volatile(
   27e72:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e76:	f3ef 8411 	mrs	r4, BASEPRI
   27e7a:	f383 8812 	msr	BASEPRI_MAX, r3
   27e7e:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   27e82:	f7ff ff72 	bl	27d6a <cancel_delayable_async_locked>
	__asm__ volatile(
   27e86:	f384 8811 	msr	BASEPRI, r4
   27e8a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   27e8e:	bd10      	pop	{r4, pc}

00027e90 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   27e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27e92:	460f      	mov	r7, r1
	__asm__ volatile(
   27e94:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e98:	f3ef 8611 	mrs	r6, BASEPRI
   27e9c:	f383 8812 	msr	BASEPRI_MAX, r3
   27ea0:	f3bf 8f6f 	isb	sy
	return *flagp;
   27ea4:	68c3      	ldr	r3, [r0, #12]
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   27ea6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   27eaa:	2b00      	cmp	r3, #0
   27eac:	bf14      	ite	ne
   27eae:	2501      	movne	r5, #1
   27eb0:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   27eb2:	d107      	bne.n	27ec4 <k_work_cancel_delayable_sync+0x34>
	bool need_wait = false;
   27eb4:	2000      	movs	r0, #0
	__asm__ volatile(
   27eb6:	f386 8811 	msr	BASEPRI, r6
   27eba:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   27ebe:	b948      	cbnz	r0, 27ed4 <k_work_cancel_delayable_sync+0x44>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   27ec0:	4628      	mov	r0, r5
   27ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27ec4:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   27ec6:	f7ff ff50 	bl	27d6a <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   27eca:	4639      	mov	r1, r7
   27ecc:	4620      	mov	r0, r4
   27ece:	f7f9 fa01 	bl	212d4 <cancel_sync_locked>
   27ed2:	e7f0      	b.n	27eb6 <k_work_cancel_delayable_sync+0x26>
		k_sem_take(&canceller->sem, K_FOREVER);
   27ed4:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   27ed8:	f04f 32ff 	mov.w	r2, #4294967295
   27edc:	f04f 33ff 	mov.w	r3, #4294967295
   27ee0:	f7f9 f90c 	bl	210fc <z_impl_k_sem_take>
   27ee4:	e7ec      	b.n	27ec0 <k_work_cancel_delayable_sync+0x30>

00027ee6 <thread_active_elsewhere>:
}
   27ee6:	2000      	movs	r0, #0
   27ee8:	4770      	bx	lr

00027eea <pended_on_thread>:
}
   27eea:	6880      	ldr	r0, [r0, #8]
   27eec:	4770      	bx	lr

00027eee <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   27eee:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   27ef2:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   27ef6:	4283      	cmp	r3, r0
   27ef8:	d001      	beq.n	27efe <z_sched_prio_cmp+0x10>
		return b2 - b1;
   27efa:	1ac0      	subs	r0, r0, r3
   27efc:	4770      	bx	lr
	return 0;
   27efe:	2000      	movs	r0, #0
}
   27f00:	4770      	bx	lr

00027f02 <z_reschedule_irqlock>:
{
   27f02:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27f04:	4603      	mov	r3, r0
   27f06:	b920      	cbnz	r0, 27f12 <z_reschedule_irqlock+0x10>
   27f08:	f3ef 8205 	mrs	r2, IPSR
   27f0c:	b942      	cbnz	r2, 27f20 <z_reschedule_irqlock+0x1e>
   27f0e:	2201      	movs	r2, #1
   27f10:	e000      	b.n	27f14 <z_reschedule_irqlock+0x12>
   27f12:	2200      	movs	r2, #0
	if (resched(key)) {
   27f14:	b932      	cbnz	r2, 27f24 <z_reschedule_irqlock+0x22>
   27f16:	f383 8811 	msr	BASEPRI, r3
   27f1a:	f3bf 8f6f 	isb	sy
}
   27f1e:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27f20:	2200      	movs	r2, #0
   27f22:	e7f7      	b.n	27f14 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   27f24:	4618      	mov	r0, r3
   27f26:	f7ed fcb7 	bl	15898 <arch_swap>
	return ret;
   27f2a:	e7f8      	b.n	27f1e <z_reschedule_irqlock+0x1c>

00027f2c <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   27f2c:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   27f2e:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   27f30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27f32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27f34:	2300      	movs	r3, #0
   27f36:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   27f38:	604b      	str	r3, [r1, #4]
}
   27f3a:	4770      	bx	lr

00027f3c <z_unpend_thread>:
{
   27f3c:	b538      	push	{r3, r4, r5, lr}
   27f3e:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   27f40:	2300      	movs	r3, #0
	__asm__ volatile(
   27f42:	f04f 0240 	mov.w	r2, #64	; 0x40
   27f46:	f3ef 8511 	mrs	r5, BASEPRI
   27f4a:	f382 8812 	msr	BASEPRI_MAX, r2
   27f4e:	f3bf 8f6f 	isb	sy
   27f52:	b98b      	cbnz	r3, 27f78 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27f54:	4620      	mov	r0, r4
   27f56:	f7ff ffc8 	bl	27eea <pended_on_thread>
   27f5a:	4621      	mov	r1, r4
   27f5c:	f7ff ffe6 	bl	27f2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   27f60:	7b63      	ldrb	r3, [r4, #13]
   27f62:	f023 0302 	bic.w	r3, r3, #2
   27f66:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   27f68:	2300      	movs	r3, #0
   27f6a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   27f6c:	f385 8811 	msr	BASEPRI, r5
   27f70:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27f74:	2301      	movs	r3, #1
   27f76:	e7ec      	b.n	27f52 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   27f78:	f104 0018 	add.w	r0, r4, #24
   27f7c:	f000 f931 	bl	281e2 <z_abort_timeout>
}
   27f80:	bd38      	pop	{r3, r4, r5, pc}

00027f82 <z_priq_dumb_best>:
{
   27f82:	4603      	mov	r3, r0
	return list->head == list;
   27f84:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f86:	4283      	cmp	r3, r0
   27f88:	d000      	beq.n	27f8c <z_priq_dumb_best+0xa>
}
   27f8a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   27f8c:	2000      	movs	r0, #0
	return thread;
   27f8e:	e7fc      	b.n	27f8a <z_priq_dumb_best+0x8>

00027f90 <z_ready_thread>:
{
   27f90:	b538      	push	{r3, r4, r5, lr}
   27f92:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   27f94:	2300      	movs	r3, #0
	__asm__ volatile(
   27f96:	f04f 0240 	mov.w	r2, #64	; 0x40
   27f9a:	f3ef 8511 	mrs	r5, BASEPRI
   27f9e:	f382 8812 	msr	BASEPRI_MAX, r2
   27fa2:	f3bf 8f6f 	isb	sy
   27fa6:	e007      	b.n	27fb8 <z_ready_thread+0x28>
			ready_thread(thread);
   27fa8:	4620      	mov	r0, r4
   27faa:	f7f9 fbeb 	bl	21784 <ready_thread>
	__asm__ volatile(
   27fae:	f385 8811 	msr	BASEPRI, r5
   27fb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   27fb6:	2301      	movs	r3, #1
   27fb8:	b92b      	cbnz	r3, 27fc6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   27fba:	4620      	mov	r0, r4
   27fbc:	f7ff ff93 	bl	27ee6 <thread_active_elsewhere>
   27fc0:	2800      	cmp	r0, #0
   27fc2:	d1f4      	bne.n	27fae <z_ready_thread+0x1e>
   27fc4:	e7f0      	b.n	27fa8 <z_ready_thread+0x18>
}
   27fc6:	bd38      	pop	{r3, r4, r5, pc}

00027fc8 <z_thread_timeout>:
{
   27fc8:	b570      	push	{r4, r5, r6, lr}
   27fca:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   27fcc:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   27fd0:	2300      	movs	r3, #0
	__asm__ volatile(
   27fd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   27fd6:	f3ef 8611 	mrs	r6, BASEPRI
   27fda:	f382 8812 	msr	BASEPRI_MAX, r2
   27fde:	f3bf 8f6f 	isb	sy
   27fe2:	e019      	b.n	28018 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   27fe4:	4628      	mov	r0, r5
   27fe6:	f7ff ff80 	bl	27eea <pended_on_thread>
   27fea:	4629      	mov	r1, r5
   27fec:	f7ff ff9e 	bl	27f2c <z_priq_dumb_remove>
   27ff0:	7b6b      	ldrb	r3, [r5, #13]
   27ff2:	f023 0302 	bic.w	r3, r3, #2
   27ff6:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   27ff8:	2300      	movs	r3, #0
   27ffa:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27ffc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   28000:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   28004:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   28008:	4628      	mov	r0, r5
   2800a:	f7f9 fbbb 	bl	21784 <ready_thread>
	__asm__ volatile(
   2800e:	f386 8811 	msr	BASEPRI, r6
   28012:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   28016:	2301      	movs	r3, #1
   28018:	b94b      	cbnz	r3, 2802e <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   2801a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2801e:	f013 0f28 	tst.w	r3, #40	; 0x28
   28022:	d1f4      	bne.n	2800e <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   28024:	f854 3c10 	ldr.w	r3, [r4, #-16]
   28028:	2b00      	cmp	r3, #0
   2802a:	d1db      	bne.n	27fe4 <z_thread_timeout+0x1c>
   2802c:	e7e6      	b.n	27ffc <z_thread_timeout+0x34>
}
   2802e:	bd70      	pop	{r4, r5, r6, pc}

00028030 <add_to_waitq_locked>:
{
   28030:	b570      	push	{r4, r5, r6, lr}
   28032:	4605      	mov	r5, r0
   28034:	460e      	mov	r6, r1
	unready_thread(thread);
   28036:	f7f9 fc03 	bl	21840 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2803a:	7b6b      	ldrb	r3, [r5, #13]
   2803c:	f043 0302 	orr.w	r3, r3, #2
   28040:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   28042:	b1b6      	cbz	r6, 28072 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   28044:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   28046:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28048:	42a6      	cmp	r6, r4
   2804a:	d019      	beq.n	28080 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2804c:	b164      	cbz	r4, 28068 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2804e:	4621      	mov	r1, r4
   28050:	4628      	mov	r0, r5
   28052:	f7ff ff4c 	bl	27eee <z_sched_prio_cmp>
   28056:	2800      	cmp	r0, #0
   28058:	dc0c      	bgt.n	28074 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2805a:	b12c      	cbz	r4, 28068 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   2805c:	6873      	ldr	r3, [r6, #4]
   2805e:	429c      	cmp	r4, r3
   28060:	d002      	beq.n	28068 <add_to_waitq_locked+0x38>
   28062:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28064:	2c00      	cmp	r4, #0
   28066:	d1f1      	bne.n	2804c <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   28068:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2806a:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2806c:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2806e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   28070:	6075      	str	r5, [r6, #4]
}
   28072:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   28074:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   28076:	606b      	str	r3, [r5, #4]
	node->next = successor;
   28078:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2807a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2807c:	6065      	str	r5, [r4, #4]
}
   2807e:	e7f8      	b.n	28072 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   28080:	2400      	movs	r4, #0
   28082:	e7e3      	b.n	2804c <add_to_waitq_locked+0x1c>

00028084 <pend>:
{
   28084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28088:	4605      	mov	r5, r0
   2808a:	460f      	mov	r7, r1
   2808c:	4691      	mov	r9, r2
   2808e:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   28090:	2400      	movs	r4, #0
	__asm__ volatile(
   28092:	f04f 0340 	mov.w	r3, #64	; 0x40
   28096:	f3ef 8611 	mrs	r6, BASEPRI
   2809a:	f383 8812 	msr	BASEPRI_MAX, r3
   2809e:	f3bf 8f6f 	isb	sy
   280a2:	b94c      	cbnz	r4, 280b8 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   280a4:	4639      	mov	r1, r7
   280a6:	4628      	mov	r0, r5
   280a8:	f7ff ffc2 	bl	28030 <add_to_waitq_locked>
	__asm__ volatile(
   280ac:	f386 8811 	msr	BASEPRI, r6
   280b0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   280b4:	2401      	movs	r4, #1
   280b6:	e7f4      	b.n	280a2 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   280b8:	464a      	mov	r2, r9
   280ba:	4643      	mov	r3, r8
   280bc:	4628      	mov	r0, r5
   280be:	f7f9 fa15 	bl	214ec <add_thread_timeout>
}
   280c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000280c6 <z_unpend_first_thread>:
{
   280c6:	b570      	push	{r4, r5, r6, lr}
   280c8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   280ca:	2300      	movs	r3, #0
	__asm__ volatile(
   280cc:	f04f 0240 	mov.w	r2, #64	; 0x40
   280d0:	f3ef 8511 	mrs	r5, BASEPRI
   280d4:	f382 8812 	msr	BASEPRI_MAX, r2
   280d8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   280dc:	461c      	mov	r4, r3
   280de:	e013      	b.n	28108 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   280e0:	f7ff ff03 	bl	27eea <pended_on_thread>
   280e4:	4621      	mov	r1, r4
   280e6:	f7ff ff21 	bl	27f2c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   280ea:	7b63      	ldrb	r3, [r4, #13]
   280ec:	f023 0302 	bic.w	r3, r3, #2
   280f0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   280f2:	2300      	movs	r3, #0
   280f4:	60a3      	str	r3, [r4, #8]
   280f6:	f104 0018 	add.w	r0, r4, #24
   280fa:	f000 f872 	bl	281e2 <z_abort_timeout>
	__asm__ volatile(
   280fe:	f385 8811 	msr	BASEPRI, r5
   28102:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   28106:	2301      	movs	r3, #1
   28108:	b933      	cbnz	r3, 28118 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   2810a:	4630      	mov	r0, r6
   2810c:	f7ff ff39 	bl	27f82 <z_priq_dumb_best>
		if (thread != NULL) {
   28110:	4604      	mov	r4, r0
   28112:	2800      	cmp	r0, #0
   28114:	d1e4      	bne.n	280e0 <z_unpend_first_thread+0x1a>
   28116:	e7f2      	b.n	280fe <z_unpend_first_thread+0x38>
}
   28118:	4620      	mov	r0, r4
   2811a:	bd70      	pop	{r4, r5, r6, pc}

0002811c <z_unpend_all>:
{
   2811c:	b538      	push	{r3, r4, r5, lr}
   2811e:	4605      	mov	r5, r0
	int need_sched = 0;
   28120:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28122:	e006      	b.n	28132 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   28124:	4620      	mov	r0, r4
   28126:	f7ff ff09 	bl	27f3c <z_unpend_thread>
		z_ready_thread(thread);
   2812a:	4620      	mov	r0, r4
   2812c:	f7ff ff30 	bl	27f90 <z_ready_thread>
		need_sched = 1;
   28130:	2001      	movs	r0, #1
	return list->head == list;
   28132:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28134:	42a5      	cmp	r5, r4
   28136:	d001      	beq.n	2813c <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   28138:	2c00      	cmp	r4, #0
   2813a:	d1f3      	bne.n	28124 <z_unpend_all+0x8>
}
   2813c:	bd38      	pop	{r3, r4, r5, pc}

0002813e <init_ready_q>:
	sys_dlist_init(&rq->runq);
   2813e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
   28140:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
   28142:	6083      	str	r3, [r0, #8]
}
   28144:	4770      	bx	lr

00028146 <z_sched_wake>:
{
   28146:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2814a:	4606      	mov	r6, r0
   2814c:	4688      	mov	r8, r1
   2814e:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   28150:	2300      	movs	r3, #0
	__asm__ volatile(
   28152:	f04f 0240 	mov.w	r2, #64	; 0x40
   28156:	f3ef 8511 	mrs	r5, BASEPRI
   2815a:	f382 8812 	msr	BASEPRI_MAX, r2
   2815e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   28162:	4699      	mov	r9, r3
   28164:	e01b      	b.n	2819e <z_sched_wake+0x58>
   28166:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2816a:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2816c:	f7ff febd 	bl	27eea <pended_on_thread>
   28170:	4621      	mov	r1, r4
   28172:	f7ff fedb 	bl	27f2c <z_priq_dumb_remove>
   28176:	7b63      	ldrb	r3, [r4, #13]
   28178:	f023 0302 	bic.w	r3, r3, #2
   2817c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2817e:	2300      	movs	r3, #0
   28180:	60a3      	str	r3, [r4, #8]
   28182:	f104 0018 	add.w	r0, r4, #24
   28186:	f000 f82c 	bl	281e2 <z_abort_timeout>
			ready_thread(thread);
   2818a:	4620      	mov	r0, r4
   2818c:	f7f9 fafa 	bl	21784 <ready_thread>
			ret = true;
   28190:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   28194:	f385 8811 	msr	BASEPRI, r5
   28198:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2819c:	2301      	movs	r3, #1
   2819e:	b933      	cbnz	r3, 281ae <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   281a0:	4630      	mov	r0, r6
   281a2:	f7ff feee 	bl	27f82 <z_priq_dumb_best>
		if (thread != NULL) {
   281a6:	4604      	mov	r4, r0
   281a8:	2800      	cmp	r0, #0
   281aa:	d1dc      	bne.n	28166 <z_sched_wake+0x20>
   281ac:	e7f2      	b.n	28194 <z_sched_wake+0x4e>
}
   281ae:	4648      	mov	r0, r9
   281b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000281b4 <remove_timeout>:
{
   281b4:	b538      	push	{r3, r4, r5, lr}
   281b6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   281b8:	f7f9 fdc8 	bl	21d4c <next>
   281bc:	b148      	cbz	r0, 281d2 <remove_timeout+0x1e>
   281be:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   281c0:	6920      	ldr	r0, [r4, #16]
   281c2:	6965      	ldr	r5, [r4, #20]
   281c4:	6913      	ldr	r3, [r2, #16]
   281c6:	6951      	ldr	r1, [r2, #20]
   281c8:	181b      	adds	r3, r3, r0
   281ca:	eb45 0101 	adc.w	r1, r5, r1
   281ce:	6113      	str	r3, [r2, #16]
   281d0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   281d2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   281d4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   281d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   281d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   281da:	2300      	movs	r3, #0
   281dc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   281de:	6063      	str	r3, [r4, #4]
}
   281e0:	bd38      	pop	{r3, r4, r5, pc}

000281e2 <z_abort_timeout>:
{
   281e2:	b570      	push	{r4, r5, r6, lr}
   281e4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   281e6:	2300      	movs	r3, #0
	__asm__ volatile(
   281e8:	f04f 0240 	mov.w	r2, #64	; 0x40
   281ec:	f3ef 8611 	mrs	r6, BASEPRI
   281f0:	f382 8812 	msr	BASEPRI_MAX, r2
   281f4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   281f8:	f06f 0015 	mvn.w	r0, #21
   281fc:	e008      	b.n	28210 <z_abort_timeout+0x2e>
			remove_timeout(to);
   281fe:	4620      	mov	r0, r4
   28200:	f7ff ffd8 	bl	281b4 <remove_timeout>
			ret = 0;
   28204:	4628      	mov	r0, r5
	__asm__ volatile(
   28206:	f386 8811 	msr	BASEPRI, r6
   2820a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2820e:	2301      	movs	r3, #1
   28210:	461d      	mov	r5, r3
   28212:	b91b      	cbnz	r3, 2821c <z_abort_timeout+0x3a>
	return node->next != NULL;
   28214:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   28216:	2b00      	cmp	r3, #0
   28218:	d1f1      	bne.n	281fe <z_abort_timeout+0x1c>
   2821a:	e7f4      	b.n	28206 <z_abort_timeout+0x24>
}
   2821c:	bd70      	pop	{r4, r5, r6, pc}

0002821e <z_get_next_timeout_expiry>:
{
   2821e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   28220:	2300      	movs	r3, #0
	__asm__ volatile(
   28222:	f04f 0240 	mov.w	r2, #64	; 0x40
   28226:	f3ef 8411 	mrs	r4, BASEPRI
   2822a:	f382 8812 	msr	BASEPRI_MAX, r2
   2822e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   28232:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   28236:	b93b      	cbnz	r3, 28248 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   28238:	f7f9 fda0 	bl	21d7c <next_timeout>
	__asm__ volatile(
   2823c:	f384 8811 	msr	BASEPRI, r4
   28240:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28244:	2301      	movs	r3, #1
   28246:	e7f6      	b.n	28236 <z_get_next_timeout_expiry+0x18>
}
   28248:	bd10      	pop	{r4, pc}

0002824a <z_set_timeout_expiry>:
{
   2824a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2824c:	4606      	mov	r6, r0
   2824e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   28250:	2300      	movs	r3, #0
	__asm__ volatile(
   28252:	f04f 0240 	mov.w	r2, #64	; 0x40
   28256:	f3ef 8511 	mrs	r5, BASEPRI
   2825a:	f382 8812 	msr	BASEPRI_MAX, r2
   2825e:	f3bf 8f6f 	isb	sy
   28262:	e00a      	b.n	2827a <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   28264:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   28266:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2826a:	2801      	cmp	r0, #1
   2826c:	dd00      	ble.n	28270 <z_set_timeout_expiry+0x26>
   2826e:	b97c      	cbnz	r4, 28290 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   28270:	f385 8811 	msr	BASEPRI, r5
   28274:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   28278:	2301      	movs	r3, #1
   2827a:	461c      	mov	r4, r3
   2827c:	b97b      	cbnz	r3, 2829e <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2827e:	f7f9 fd7d 	bl	21d7c <next_timeout>
			      || (ticks <= next_to);
   28282:	f1b0 3fff 	cmp.w	r0, #4294967295
   28286:	d0ed      	beq.n	28264 <z_set_timeout_expiry+0x1a>
   28288:	42b0      	cmp	r0, r6
   2828a:	dbec      	blt.n	28266 <z_set_timeout_expiry+0x1c>
   2828c:	2401      	movs	r4, #1
   2828e:	e7ea      	b.n	28266 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   28290:	4639      	mov	r1, r7
   28292:	42b0      	cmp	r0, r6
   28294:	bfa8      	it	ge
   28296:	4630      	movge	r0, r6
   28298:	f7f6 fd98 	bl	1edcc <sys_clock_set_timeout>
   2829c:	e7e8      	b.n	28270 <z_set_timeout_expiry+0x26>
}
   2829e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000282a0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   282a0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   282a2:	f7f9 fe9d 	bl	21fe0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   282a6:	bd08      	pop	{r3, pc}

000282a8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   282a8:	b900      	cbnz	r0, 282ac <z_impl_k_busy_wait+0x4>
   282aa:	4770      	bx	lr
{
   282ac:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   282ae:	f7ee fbc3 	bl	16a38 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   282b2:	bd08      	pop	{r3, pc}

000282b4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   282b4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   282b6:	f1b1 3fff 	cmp.w	r1, #4294967295
   282ba:	bf08      	it	eq
   282bc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   282c0:	d024      	beq.n	2830c <sys_clock_timeout_end_calc+0x58>
   282c2:	4604      	mov	r4, r0
   282c4:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   282c6:	ea54 0105 	orrs.w	r1, r4, r5
   282ca:	d00d      	beq.n	282e8 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   282cc:	f06f 0101 	mvn.w	r1, #1
   282d0:	1a0a      	subs	r2, r1, r0
   282d2:	f04f 31ff 	mov.w	r1, #4294967295
   282d6:	eb61 0305 	sbc.w	r3, r1, r5
   282da:	2a00      	cmp	r2, #0
   282dc:	f173 0100 	sbcs.w	r1, r3, #0
   282e0:	db05      	blt.n	282ee <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   282e2:	4610      	mov	r0, r2
   282e4:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   282e6:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   282e8:	f7f9 fe7a 	bl	21fe0 <sys_clock_tick_get>
   282ec:	e7fb      	b.n	282e6 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   282ee:	f7f9 fe77 	bl	21fe0 <sys_clock_tick_get>
   282f2:	4623      	mov	r3, r4
   282f4:	462a      	mov	r2, r5
   282f6:	2c01      	cmp	r4, #1
   282f8:	f175 0400 	sbcs.w	r4, r5, #0
   282fc:	db03      	blt.n	28306 <sys_clock_timeout_end_calc+0x52>
   282fe:	18c0      	adds	r0, r0, r3
   28300:	eb42 0101 	adc.w	r1, r2, r1
   28304:	e7ef      	b.n	282e6 <sys_clock_timeout_end_calc+0x32>
   28306:	2301      	movs	r3, #1
   28308:	2200      	movs	r2, #0
   2830a:	e7f8      	b.n	282fe <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   2830c:	f04f 30ff 	mov.w	r0, #4294967295
   28310:	4601      	mov	r1, r0
   28312:	e7e8      	b.n	282e6 <sys_clock_timeout_end_calc+0x32>

00028314 <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   28314:	b108      	cbz	r0, 2831a <poller_thread+0x6>
   28316:	3860      	subs	r0, #96	; 0x60
   28318:	4770      	bx	lr
}
   2831a:	4770      	bx	lr

0002831c <signal_poller>:
{
   2831c:	b538      	push	{r3, r4, r5, lr}
   2831e:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   28320:	6880      	ldr	r0, [r0, #8]
   28322:	f7ff fff7 	bl	28314 <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   28326:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   28328:	f013 0f02 	tst.w	r3, #2
   2832c:	d028      	beq.n	28380 <signal_poller+0x64>
   2832e:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   28330:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   28334:	f06f 0001 	mvn.w	r0, #1
   28338:	f04f 31ff 	mov.w	r1, #4294967295
   2833c:	428b      	cmp	r3, r1
   2833e:	bf08      	it	eq
   28340:	4282      	cmpeq	r2, r0
   28342:	d01f      	beq.n	28384 <signal_poller+0x68>
	z_unpend_thread(thread);
   28344:	4620      	mov	r0, r4
   28346:	f7ff fdf9 	bl	27f3c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2834a:	2d08      	cmp	r5, #8
   2834c:	d00a      	beq.n	28364 <signal_poller+0x48>
   2834e:	2300      	movs	r3, #0
   28350:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   28354:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28356:	f013 0f1f 	tst.w	r3, #31
   2835a:	d108      	bne.n	2836e <signal_poller+0x52>
   2835c:	69a3      	ldr	r3, [r4, #24]
   2835e:	b123      	cbz	r3, 2836a <signal_poller+0x4e>
   28360:	2300      	movs	r3, #0
   28362:	e005      	b.n	28370 <signal_poller+0x54>
   28364:	f06f 0303 	mvn.w	r3, #3
   28368:	e7f2      	b.n	28350 <signal_poller+0x34>
   2836a:	2301      	movs	r3, #1
   2836c:	e000      	b.n	28370 <signal_poller+0x54>
   2836e:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   28370:	b90b      	cbnz	r3, 28376 <signal_poller+0x5a>
		return 0;
   28372:	2000      	movs	r0, #0
   28374:	e005      	b.n	28382 <signal_poller+0x66>
	z_ready_thread(thread);
   28376:	4620      	mov	r0, r4
   28378:	f7ff fe0a 	bl	27f90 <z_ready_thread>
	return 0;
   2837c:	2000      	movs	r0, #0
   2837e:	e000      	b.n	28382 <signal_poller+0x66>
		return 0;
   28380:	2000      	movs	r0, #0
}
   28382:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   28384:	f06f 000a 	mvn.w	r0, #10
   28388:	e7fb      	b.n	28382 <signal_poller+0x66>

0002838a <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2838a:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2838c:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2838e:	7823      	ldrb	r3, [r4, #0]
   28390:	b173      	cbz	r3, 283b0 <signal_triggered_work+0x26>
   28392:	f854 5c04 	ldr.w	r5, [r4, #-4]
   28396:	b15d      	cbz	r5, 283b0 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   28398:	f1a4 0614 	sub.w	r6, r4, #20
   2839c:	f104 0014 	add.w	r0, r4, #20
   283a0:	f7ff ff1f 	bl	281e2 <z_abort_timeout>
		twork->poll_result = 0;
   283a4:	2300      	movs	r3, #0
   283a6:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   283a8:	4631      	mov	r1, r6
   283aa:	4628      	mov	r0, r5
   283ac:	f7ff fcf4 	bl	27d98 <k_work_submit_to_queue>
	}

	return 0;
}
   283b0:	2000      	movs	r0, #0
   283b2:	bd70      	pop	{r4, r5, r6, pc}

000283b4 <signal_poll_event>:
{
   283b4:	b570      	push	{r4, r5, r6, lr}
   283b6:	4604      	mov	r4, r0
   283b8:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   283ba:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   283bc:	b1d6      	cbz	r6, 283f4 <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   283be:	7873      	ldrb	r3, [r6, #1]
   283c0:	2b01      	cmp	r3, #1
   283c2:	d00d      	beq.n	283e0 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   283c4:	2b02      	cmp	r3, #2
   283c6:	d012      	beq.n	283ee <signal_poll_event+0x3a>
		poller->is_polling = false;
   283c8:	2000      	movs	r0, #0
   283ca:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   283cc:	2300      	movs	r3, #0
   283ce:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   283d0:	68e3      	ldr	r3, [r4, #12]
   283d2:	f3c3 3145 	ubfx	r1, r3, #13, #6
   283d6:	430d      	orrs	r5, r1
   283d8:	f365 3352 	bfi	r3, r5, #13, #6
   283dc:	60e3      	str	r3, [r4, #12]
}
   283de:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   283e0:	f7ff ff9c 	bl	2831c <signal_poller>
		poller->is_polling = false;
   283e4:	2300      	movs	r3, #0
   283e6:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   283e8:	4298      	cmp	r0, r3
   283ea:	daef      	bge.n	283cc <signal_poll_event+0x18>
   283ec:	e7f7      	b.n	283de <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   283ee:	f7ff ffcc 	bl	2838a <signal_triggered_work>
   283f2:	e7f7      	b.n	283e4 <signal_poll_event+0x30>
	int retcode = 0;
   283f4:	2000      	movs	r0, #0
   283f6:	e7e9      	b.n	283cc <signal_poll_event+0x18>

000283f8 <k_poll_event_init>:
{
   283f8:	b430      	push	{r4, r5}
	event->poller = NULL;
   283fa:	2400      	movs	r4, #0
   283fc:	6084      	str	r4, [r0, #8]
	event->type = type;
   283fe:	7b45      	ldrb	r5, [r0, #13]
   28400:	f361 0504 	bfi	r5, r1, #0, #5
   28404:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   28406:	68c1      	ldr	r1, [r0, #12]
   28408:	f364 3152 	bfi	r1, r4, #13, #6
   2840c:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2840e:	f3c1 4107 	ubfx	r1, r1, #16, #8
   28412:	f362 01c3 	bfi	r1, r2, #3, #1
   28416:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   28418:	89c2      	ldrh	r2, [r0, #14]
   2841a:	f364 120f 	bfi	r2, r4, #4, #12
   2841e:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   28420:	6103      	str	r3, [r0, #16]
}
   28422:	bc30      	pop	{r4, r5}
   28424:	4770      	bx	lr

00028426 <z_handle_obj_poll_events>:
{
   28426:	b508      	push	{r3, lr}
   28428:	4603      	mov	r3, r0
	return list->head == list;
   2842a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2842c:	4283      	cmp	r3, r0
   2842e:	d009      	beq.n	28444 <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   28430:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   28432:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   28434:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28436:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28438:	2300      	movs	r3, #0
   2843a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2843c:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   2843e:	b108      	cbz	r0, 28444 <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   28440:	f7ff ffb8 	bl	283b4 <signal_poll_event>
}
   28444:	bd08      	pop	{r3, pc}

00028446 <z_heap_aligned_alloc>:
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   28446:	3204      	adds	r2, #4
   28448:	d20f      	bcs.n	2846a <z_heap_aligned_alloc+0x24>
{
   2844a:	b5d0      	push	{r4, r6, r7, lr}
   2844c:	b082      	sub	sp, #8
   2844e:	4604      	mov	r4, r0
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28450:	2600      	movs	r6, #0
   28452:	2700      	movs	r7, #0
   28454:	e9cd 6700 	strd	r6, r7, [sp]
   28458:	f041 0104 	orr.w	r1, r1, #4
   2845c:	f7ff fa1a 	bl	27894 <k_heap_aligned_alloc>
	if (mem == NULL) {
   28460:	b108      	cbz	r0, 28466 <z_heap_aligned_alloc+0x20>
	*heap_ref = heap;
   28462:	f840 4b04 	str.w	r4, [r0], #4
}
   28466:	b002      	add	sp, #8
   28468:	bdd0      	pop	{r4, r6, r7, pc}
		return NULL;
   2846a:	2000      	movs	r0, #0
}
   2846c:	4770      	bx	lr

0002846e <k_free>:
	if (ptr != NULL) {
   2846e:	b130      	cbz	r0, 2847e <k_free+0x10>
{
   28470:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   28472:	1f01      	subs	r1, r0, #4
   28474:	f850 0c04 	ldr.w	r0, [r0, #-4]
   28478:	f7ff fa57 	bl	2792a <k_heap_free>
}
   2847c:	bd08      	pop	{r3, pc}
   2847e:	4770      	bx	lr

00028480 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   28480:	4770      	bx	lr

00028482 <memcmp>:
   28482:	b530      	push	{r4, r5, lr}
   28484:	3901      	subs	r1, #1
   28486:	2400      	movs	r4, #0
   28488:	42a2      	cmp	r2, r4
   2848a:	d101      	bne.n	28490 <memcmp+0xe>
   2848c:	2000      	movs	r0, #0
   2848e:	e005      	b.n	2849c <memcmp+0x1a>
   28490:	5d03      	ldrb	r3, [r0, r4]
   28492:	3401      	adds	r4, #1
   28494:	5d0d      	ldrb	r5, [r1, r4]
   28496:	42ab      	cmp	r3, r5
   28498:	d0f6      	beq.n	28488 <memcmp+0x6>
   2849a:	1b58      	subs	r0, r3, r5
   2849c:	bd30      	pop	{r4, r5, pc}

0002849e <memcpy>:
   2849e:	440a      	add	r2, r1
   284a0:	4291      	cmp	r1, r2
   284a2:	f100 33ff 	add.w	r3, r0, #4294967295
   284a6:	d100      	bne.n	284aa <memcpy+0xc>
   284a8:	4770      	bx	lr
   284aa:	b510      	push	{r4, lr}
   284ac:	f811 4b01 	ldrb.w	r4, [r1], #1
   284b0:	f803 4f01 	strb.w	r4, [r3, #1]!
   284b4:	4291      	cmp	r1, r2
   284b6:	d1f9      	bne.n	284ac <memcpy+0xe>
   284b8:	bd10      	pop	{r4, pc}

000284ba <__memcpy_chk>:
   284ba:	429a      	cmp	r2, r3
   284bc:	b508      	push	{r3, lr}
   284be:	d901      	bls.n	284c4 <__memcpy_chk+0xa>
   284c0:	f7ee fa94 	bl	169ec <__chk_fail>
   284c4:	4281      	cmp	r1, r0
   284c6:	d804      	bhi.n	284d2 <__memcpy_chk+0x18>
   284c8:	188b      	adds	r3, r1, r2
   284ca:	4298      	cmp	r0, r3
   284cc:	d3f8      	bcc.n	284c0 <__memcpy_chk+0x6>
   284ce:	4281      	cmp	r1, r0
   284d0:	d102      	bne.n	284d8 <__memcpy_chk+0x1e>
   284d2:	1883      	adds	r3, r0, r2
   284d4:	4299      	cmp	r1, r3
   284d6:	d3f3      	bcc.n	284c0 <__memcpy_chk+0x6>
   284d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   284dc:	f7ff bfdf 	b.w	2849e <memcpy>

000284e0 <memset>:
   284e0:	4402      	add	r2, r0
   284e2:	4603      	mov	r3, r0
   284e4:	4293      	cmp	r3, r2
   284e6:	d100      	bne.n	284ea <memset+0xa>
   284e8:	4770      	bx	lr
   284ea:	f803 1b01 	strb.w	r1, [r3], #1
   284ee:	e7f9      	b.n	284e4 <memset+0x4>

000284f0 <strncpy>:
   284f0:	b510      	push	{r4, lr}
   284f2:	3901      	subs	r1, #1
   284f4:	4603      	mov	r3, r0
   284f6:	b132      	cbz	r2, 28506 <strncpy+0x16>
   284f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   284fc:	f803 4b01 	strb.w	r4, [r3], #1
   28500:	3a01      	subs	r2, #1
   28502:	2c00      	cmp	r4, #0
   28504:	d1f7      	bne.n	284f6 <strncpy+0x6>
   28506:	441a      	add	r2, r3
   28508:	2100      	movs	r1, #0
   2850a:	4293      	cmp	r3, r2
   2850c:	d100      	bne.n	28510 <strncpy+0x20>
   2850e:	bd10      	pop	{r4, pc}
   28510:	f803 1b01 	strb.w	r1, [r3], #1
   28514:	e7f9      	b.n	2850a <strncpy+0x1a>

00028516 <__strncpy_chk>:
   28516:	429a      	cmp	r2, r3
   28518:	b508      	push	{r3, lr}
   2851a:	d901      	bls.n	28520 <__strncpy_chk+0xa>
   2851c:	f7ee fa66 	bl	169ec <__chk_fail>
   28520:	4281      	cmp	r1, r0
   28522:	d804      	bhi.n	2852e <__strncpy_chk+0x18>
   28524:	188b      	adds	r3, r1, r2
   28526:	4298      	cmp	r0, r3
   28528:	d3f8      	bcc.n	2851c <__strncpy_chk+0x6>
   2852a:	4281      	cmp	r1, r0
   2852c:	d102      	bne.n	28534 <__strncpy_chk+0x1e>
   2852e:	1883      	adds	r3, r0, r2
   28530:	4299      	cmp	r1, r3
   28532:	d3f3      	bcc.n	2851c <__strncpy_chk+0x6>
   28534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   28538:	f7ff bfda 	b.w	284f0 <strncpy>

0002853c <strnlen>:
   2853c:	b510      	push	{r4, lr}
   2853e:	4602      	mov	r2, r0
   28540:	4401      	add	r1, r0
   28542:	428a      	cmp	r2, r1
   28544:	4613      	mov	r3, r2
   28546:	d101      	bne.n	2854c <strnlen+0x10>
   28548:	1a18      	subs	r0, r3, r0
   2854a:	bd10      	pop	{r4, pc}
   2854c:	781c      	ldrb	r4, [r3, #0]
   2854e:	3201      	adds	r2, #1
   28550:	2c00      	cmp	r4, #0
   28552:	d1f6      	bne.n	28542 <strnlen+0x6>
   28554:	e7f8      	b.n	28548 <strnlen+0xc>
	...

00028558 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   28558:	f7f7 b862 	b.w	1f620 <SystemInit>
