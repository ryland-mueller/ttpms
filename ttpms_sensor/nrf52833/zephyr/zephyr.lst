
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	20004b60 	.word	0x20004b60
   4:	000127f1 	.word	0x000127f1

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	0001dcb1 	.word	0x0001dcb1
   c:	000127a9 	.word	0x000127a9
	(void)memset(res + 3, 0, 13);
  10:	000127a9 	.word	0x000127a9
  14:	000127a9 	.word	0x000127a9
  18:	000127a9 	.word	0x000127a9
	...
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  2c:	00011eed 	.word	0x00011eed
	memcpy(out, res, 3);
  30:	000127a9 	.word	0x000127a9
  34:	00000000 	.word	0x00000000
  38:	00011e95 	.word	0x00011e95
  3c:	0002068d 	.word	0x0002068d

00000040 <_irq_vector_table>:
  40:	00011fd9 00020ee1 00011fd9 00011fd9     ................
  50:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  60:	00020ea9 00011fd9 00011fd9 00020ec7     ................
  70:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  80:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  90:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  a0:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  b0:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  c0:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  d0:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  e0:	00011fd9 00011fd9 00011fd9 00011fd9     ................
  f0:	00011fd9 00011fd9 00011fd9 00011fd9     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <CONFIG_FLASH_SIZE+0x46>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <CONFIG_FLASH_SIZE+0x82>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_FLASH_SIZE+0x14>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_FLASH_SIZE+0x12>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <CONFIG_FLASH_SIZE+0x3c>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_FLASH_SIZE+0x3a>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <CONFIG_FLASH_SIZE+0x5c>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <CONFIG_FLASH_SIZE+0xfc>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <CONFIG_FLASH_SIZE+0x6e>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <CONFIG_FLASH_SIZE+0xf4>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <CONFIG_FLASH_SIZE+0xf4>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_FLASH_SIZE+0x14>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <CONFIG_FLASH_SIZE+0x3c>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     3f6:	4615      	mov	r5, r2
     3f8:	4a0a      	ldr	r2, [pc, #40]	; (424 <CONFIG_BT_RX_STACK_SIZE+0x24>)
     3fa:	461c      	mov	r4, r3
     3fc:	6856      	ldr	r6, [r2, #4]
     3fe:	b12e      	cbz	r6, 40c <CONFIG_BT_RX_STACK_SIZE+0xc>
     400:	b001      	add	sp, #4
     402:	462a      	mov	r2, r5
     404:	46b4      	mov	ip, r6
     406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     40a:	4760      	bx	ip
     40c:	2000      	movs	r0, #0
     40e:	f88d 0000 	strb.w	r0, [sp]
     412:	4668      	mov	r0, sp
     414:	f00b f8f8 	bl	b608 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     418:	f89d 0000 	ldrb.w	r0, [sp]
     41c:	1a28      	subs	r0, r5, r0
     41e:	7020      	strb	r0, [r4, #0]
     420:	2000      	movs	r0, #0
     422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     424:	20000000 	.word	0x20000000

00000428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     428:	4801      	ldr	r0, [pc, #4]	; (430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     42a:	7800      	ldrb	r0, [r0, #0]
     42c:	4770      	bx	lr
     42e:	0000      	.short	0x0000
     430:	20000008 	.word	0x20000008

00000434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     434:	4905      	ldr	r1, [pc, #20]	; (44c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     436:	780a      	ldrb	r2, [r1, #0]
     438:	4290      	cmp	r0, r2
     43a:	d301      	bcc.n	440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     43c:	2000      	movs	r0, #0
     43e:	4770      	bx	lr
     440:	6849      	ldr	r1, [r1, #4]
     442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     44a:	4770      	bx	lr
     44c:	20000008 	.word	0x20000008
     450:	b570      	push	{r4, r5, r6, lr}
     452:	4605      	mov	r5, r0
     454:	2a20      	cmp	r2, #32
     456:	d027      	beq.n	4a8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x34>
     458:	4819      	ldr	r0, [pc, #100]	; (4c0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4c>)
     45a:	4c1a      	ldr	r4, [pc, #104]	; (4c4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x50>)
     45c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     468:	2920      	cmp	r1, #32
     46a:	d022      	beq.n	4b2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x3e>
     46c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     470:	7840      	ldrb	r0, [r0, #1]
     472:	784c      	ldrb	r4, [r1, #1]
     474:	7048      	strb	r0, [r1, #1]
     476:	4620      	mov	r0, r4
     478:	4601      	mov	r1, r0
     47a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     47e:	4291      	cmp	r1, r2
     480:	7005      	strb	r5, [r0, #0]
     482:	7840      	ldrb	r0, [r0, #1]
     484:	d1f8      	bne.n	478 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     48a:	2a20      	cmp	r2, #32
     48c:	bf1a      	itte	ne
     48e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     492:	7054      	strbne	r4, [r2, #1]
     494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     498:	2220      	movs	r2, #32
     49a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     49e:	f88c 2001 	strb.w	r2, [ip, #1]
     4a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     4a6:	bd70      	pop	{r4, r5, r6, pc}
     4a8:	f240 217e 	movw	r1, #638	; 0x27e
     4ac:	2070      	movs	r0, #112	; 0x70
     4ae:	f003 f93b 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     4b2:	f893 4020 	ldrb.w	r4, [r3, #32]
     4b6:	7840      	ldrb	r0, [r0, #1]
     4b8:	f883 0020 	strb.w	r0, [r3, #32]
     4bc:	e7db      	b.n	476 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x2>
     4be:	0000      	.short	0x0000
     4c0:	20000cd4 	.word	0x20000cd4
     4c4:	20000d54 	.word	0x20000d54
     4c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4cc:	b085      	sub	sp, #20
     4ce:	4615      	mov	r5, r2
     4d0:	460c      	mov	r4, r1
     4d2:	f002 f8e1 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     4d6:	4428      	add	r0, r5
     4d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     4dc:	9002      	str	r0, [sp, #8]
     4de:	6821      	ldr	r1, [r4, #0]
     4e0:	1a08      	subs	r0, r1, r0
     4e2:	0200      	lsls	r0, r0, #8
     4e4:	17c1      	asrs	r1, r0, #31
     4e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     4ea:	1200      	asrs	r0, r0, #8
     4ec:	2800      	cmp	r0, #0
     4ee:	f300 80d5 	bgt.w	69c <__data_size+0x18>
     4f2:	48ac      	ldr	r0, [pc, #688]	; (7a4 <__data_size+0x120>)
     4f4:	9f08      	ldr	r7, [sp, #32]
     4f6:	4eac      	ldr	r6, [pc, #688]	; (7a8 <__data_size+0x124>)
     4f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     4fc:	9003      	str	r0, [sp, #12]
     4fe:	f890 5020 	ldrb.w	r5, [r0, #32]
     502:	2020      	movs	r0, #32
     504:	46e9      	mov	r9, sp
     506:	f10d 0804 	add.w	r8, sp, #4
     50a:	f88d 0000 	strb.w	r0, [sp]
     50e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     512:	2d20      	cmp	r5, #32
     514:	bf18      	it	ne
     516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     51a:	d025      	beq.n	568 <CONFIG_BT_DEVICE_APPEARANCE+0x16>
     51c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     524:	6822      	ldr	r2, [r4, #0]
     526:	68c1      	ldr	r1, [r0, #12]
     528:	1a51      	subs	r1, r2, r1
     52a:	0209      	lsls	r1, r1, #8
     52c:	17ca      	asrs	r2, r1, #31
     52e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     532:	3008      	adds	r0, #8
     534:	1209      	asrs	r1, r1, #8
     536:	d417      	bmi.n	568 <CONFIG_BT_DEVICE_APPEARANCE+0x16>
     538:	8961      	ldrh	r1, [r4, #10]
     53a:	b171      	cbz	r1, 55a <CONFIG_BT_DEVICE_APPEARANCE+0x8>
     53c:	8941      	ldrh	r1, [r0, #10]
     53e:	b961      	cbnz	r1, 55a <CONFIG_BT_DEVICE_APPEARANCE+0x8>
     540:	f000 fdba 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     544:	f002 f8a8 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     548:	6821      	ldr	r1, [r4, #0]
     54a:	1a08      	subs	r0, r1, r0
     54c:	0200      	lsls	r0, r0, #8
     54e:	17c1      	asrs	r1, r0, #31
     550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     554:	1200      	asrs	r0, r0, #8
     556:	2833      	cmp	r0, #51	; 0x33
     558:	db06      	blt.n	568 <CONFIG_BT_DEVICE_APPEARANCE+0x16>
     55a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     55e:	f889 5000 	strb.w	r5, [r9]
     562:	7845      	ldrb	r5, [r0, #1]
     564:	2d20      	cmp	r5, #32
     566:	d1d9      	bne.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     568:	f899 0000 	ldrb.w	r0, [r9]
     56c:	f888 0000 	strb.w	r0, [r8]
     570:	46a1      	mov	r9, r4
     572:	2d20      	cmp	r5, #32
     574:	bf1c      	itt	ne
     576:	488d      	ldrne	r0, [pc, #564]	; (7ac <__data_size+0x128>)
     578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     57c:	f000 810e 	beq.w	79c <__data_size+0x118>
     580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     588:	f8d9 2004 	ldr.w	r2, [r9, #4]
     58c:	f8da 1008 	ldr.w	r1, [sl, #8]
     590:	4648      	mov	r0, r9
     592:	1a89      	subs	r1, r1, r2
     594:	0209      	lsls	r1, r1, #8
     596:	17ca      	asrs	r2, r1, #31
     598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     59c:	f10a 0708 	add.w	r7, sl, #8
     5a0:	1209      	asrs	r1, r1, #8
     5a2:	d415      	bmi.n	5d0 <CONFIG_BT_DEVICE_APPEARANCE+0x7e>
     5a4:	8979      	ldrh	r1, [r7, #10]
     5a6:	2900      	cmp	r1, #0
     5a8:	f000 80f8 	beq.w	79c <__data_size+0x118>
     5ac:	8941      	ldrh	r1, [r0, #10]
     5ae:	2900      	cmp	r1, #0
     5b0:	f040 80f4 	bne.w	79c <__data_size+0x118>
     5b4:	f000 fd80 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     5b8:	f002 f86e 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     5bc:	6839      	ldr	r1, [r7, #0]
     5be:	1a08      	subs	r0, r1, r0
     5c0:	0200      	lsls	r0, r0, #8
     5c2:	17c1      	asrs	r1, r0, #31
     5c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     5c8:	1200      	asrs	r0, r0, #8
     5ca:	2833      	cmp	r0, #51	; 0x33
     5cc:	f280 80e6 	bge.w	79c <__data_size+0x118>
     5d0:	f888 5000 	strb.w	r5, [r8]
     5d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
     5d8:	f899 000c 	ldrb.w	r0, [r9, #12]
     5dc:	4281      	cmp	r1, r0
     5de:	d906      	bls.n	5ee <CONFIG_BT_DEVICE_APPEARANCE+0x9c>
     5e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     5e4:	7845      	ldrb	r5, [r0, #1]
     5e6:	2d20      	cmp	r5, #32
     5e8:	d1ca      	bne.n	580 <CONFIG_BT_DEVICE_APPEARANCE+0x2e>
     5ea:	f000 b8d7 	b.w	79c <__data_size+0x118>
     5ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
     5f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     5f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     5fa:	8a68      	ldrh	r0, [r5, #18]
     5fc:	68ef      	ldr	r7, [r5, #12]
     5fe:	2800      	cmp	r0, #0
     600:	d143      	bne.n	68a <__data_size+0x6>
     602:	8960      	ldrh	r0, [r4, #10]
     604:	b3e8      	cbz	r0, 682 <CONFIG_BT_HCI_TX_STACK_SIZE+0x82>
     606:	68a8      	ldr	r0, [r5, #8]
     608:	f00b f81e 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     60c:	8a69      	ldrh	r1, [r5, #18]
     60e:	7c2a      	ldrb	r2, [r5, #16]
     610:	4b67      	ldr	r3, [pc, #412]	; (7b0 <__data_size+0x12c>)
     612:	4411      	add	r1, r2
     614:	1c49      	adds	r1, r1, #1
     616:	1842      	adds	r2, r0, r1
     618:	4298      	cmp	r0, r3
     61a:	d904      	bls.n	626 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     61c:	f240 6109 	movw	r1, #1545	; 0x609
     620:	2070      	movs	r0, #112	; 0x70
     622:	f003 f881 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     626:	4863      	ldr	r0, [pc, #396]	; (7b4 <__data_size+0x130>)
     628:	4281      	cmp	r1, r0
     62a:	dd04      	ble.n	636 <CONFIG_BT_HCI_TX_STACK_SIZE+0x36>
     62c:	f240 610a 	movw	r1, #1546	; 0x60a
     630:	2070      	movs	r0, #112	; 0x70
     632:	f003 f879 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     636:	4860      	ldr	r0, [pc, #384]	; (7b8 <__data_size+0x134>)
     638:	4281      	cmp	r1, r0
     63a:	da04      	bge.n	646 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     63c:	f240 610b 	movw	r1, #1547	; 0x60b
     640:	2070      	movs	r0, #112	; 0x70
     642:	f003 f871 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     646:	485d      	ldr	r0, [pc, #372]	; (7bc <__data_size+0x138>)
     648:	4290      	cmp	r0, r2
     64a:	bfdc      	itt	le
     64c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     654:	dd05      	ble.n	662 <CONFIG_BT_HCI_TX_STACK_SIZE+0x62>
     656:	2a00      	cmp	r2, #0
     658:	bfbc      	itt	lt
     65a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     65e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     662:	4610      	mov	r0, r2
     664:	f002 f818 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     66c:	1a78      	subs	r0, r7, r1
     66e:	0200      	lsls	r0, r0, #8
     670:	17c2      	asrs	r2, r0, #31
     672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     676:	1200      	asrs	r0, r0, #8
     678:	2833      	cmp	r0, #51	; 0x33
     67a:	bfb8      	it	lt
     67c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     680:	e000      	b.n	684 <__data_size>
     682:	e002      	b.n	68a <__data_size+0x6>
     684:	bfb8      	it	lt
     686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     68a:	9802      	ldr	r0, [sp, #8]
     68c:	1a38      	subs	r0, r7, r0
     68e:	0200      	lsls	r0, r0, #8
     690:	17c1      	asrs	r1, r0, #31
     692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     696:	1200      	asrs	r0, r0, #8
     698:	2800      	cmp	r0, #0
     69a:	dd03      	ble.n	6a4 <__data_size+0x20>
     69c:	b009      	add	sp, #36	; 0x24
     69e:	2000      	movs	r0, #0
     6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6a4:	e9d4 1000 	ldrd	r1, r0, [r4]
     6a8:	1a40      	subs	r0, r0, r1
     6aa:	4438      	add	r0, r7
     6ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     6b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     6b4:	e9c4 1000 	strd	r1, r0, [r4]
     6b8:	9803      	ldr	r0, [sp, #12]
     6ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
     6be:	466f      	mov	r7, sp
     6c0:	f890 5020 	ldrb.w	r5, [r0, #32]
     6c4:	2020      	movs	r0, #32
     6c6:	f10d 0a04 	add.w	sl, sp, #4
     6ca:	f88d 0000 	strb.w	r0, [sp]
     6ce:	2d20      	cmp	r5, #32
     6d0:	bf1c      	itt	ne
     6d2:	4836      	ldrne	r0, [pc, #216]	; (7ac <__data_size+0x128>)
     6d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     6d8:	d025      	beq.n	726 <__data_size+0xa2>
     6da:	bf00      	nop
     6dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     6e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     6e4:	6822      	ldr	r2, [r4, #0]
     6e6:	68c1      	ldr	r1, [r0, #12]
     6e8:	1a51      	subs	r1, r2, r1
     6ea:	0209      	lsls	r1, r1, #8
     6ec:	17ca      	asrs	r2, r1, #31
     6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6f2:	3008      	adds	r0, #8
     6f4:	1209      	asrs	r1, r1, #8
     6f6:	d416      	bmi.n	726 <__data_size+0xa2>
     6f8:	8961      	ldrh	r1, [r4, #10]
     6fa:	b171      	cbz	r1, 71a <__data_size+0x96>
     6fc:	8941      	ldrh	r1, [r0, #10]
     6fe:	b961      	cbnz	r1, 71a <__data_size+0x96>
     700:	f000 fcda 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     704:	f001 ffc8 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     708:	6821      	ldr	r1, [r4, #0]
     70a:	1a08      	subs	r0, r1, r0
     70c:	0200      	lsls	r0, r0, #8
     70e:	17c1      	asrs	r1, r0, #31
     710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     714:	1200      	asrs	r0, r0, #8
     716:	2833      	cmp	r0, #51	; 0x33
     718:	db05      	blt.n	726 <__data_size+0xa2>
     71a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     71e:	703d      	strb	r5, [r7, #0]
     720:	7845      	ldrb	r5, [r0, #1]
     722:	2d20      	cmp	r5, #32
     724:	d1da      	bne.n	6dc <__data_size+0x58>
     726:	7838      	ldrb	r0, [r7, #0]
     728:	f88a 0000 	strb.w	r0, [sl]
     72c:	4627      	mov	r7, r4
     72e:	2d20      	cmp	r5, #32
     730:	bf1c      	itt	ne
     732:	481e      	ldrne	r0, [pc, #120]	; (7ac <__data_size+0x128>)
     734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     738:	d030      	beq.n	79c <__data_size+0x118>
     73a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     73e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     742:	6879      	ldr	r1, [r7, #4]
     744:	f8d9 2008 	ldr.w	r2, [r9, #8]
     748:	4638      	mov	r0, r7
     74a:	1a51      	subs	r1, r2, r1
     74c:	0209      	lsls	r1, r1, #8
     74e:	17ca      	asrs	r2, r1, #31
     750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     754:	f109 0808 	add.w	r8, r9, #8
     758:	1209      	asrs	r1, r1, #8
     75a:	d412      	bmi.n	782 <__data_size+0xfe>
     75c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     760:	b1e1      	cbz	r1, 79c <__data_size+0x118>
     762:	8941      	ldrh	r1, [r0, #10]
     764:	b9d1      	cbnz	r1, 79c <__data_size+0x118>
     766:	f000 fca7 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     76a:	f001 ff95 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     76e:	f8d8 1000 	ldr.w	r1, [r8]
     772:	1a08      	subs	r0, r1, r0
     774:	0200      	lsls	r0, r0, #8
     776:	17c1      	asrs	r1, r0, #31
     778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     77c:	1200      	asrs	r0, r0, #8
     77e:	2833      	cmp	r0, #51	; 0x33
     780:	da0c      	bge.n	79c <__data_size+0x118>
     782:	f88a 5000 	strb.w	r5, [sl]
     786:	f899 0014 	ldrb.w	r0, [r9, #20]
     78a:	7b39      	ldrb	r1, [r7, #12]
     78c:	4288      	cmp	r0, r1
     78e:	f67f af2e 	bls.w	5ee <CONFIG_BT_DEVICE_APPEARANCE+0x9c>
     792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     796:	7845      	ldrb	r5, [r0, #1]
     798:	2d20      	cmp	r5, #32
     79a:	d1ce      	bne.n	73a <__data_size+0xb6>
     79c:	b009      	add	sp, #36	; 0x24
     79e:	2001      	movs	r0, #1
     7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7a4:	20000d54 	.word	0x20000d54
     7a8:	200009d4 	.word	0x200009d4
     7ac:	20000cd4 	.word	0x20000cd4
     7b0:	1e847fff 	.word	0x1e847fff
     7b4:	07a12000 	.word	0x07a12000
     7b8:	f85ee000 	.word	0xf85ee000
     7bc:	1e848000 	.word	0x1e848000
     7c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     7c4:	4604      	mov	r4, r0
     7c6:	483c      	ldr	r0, [pc, #240]	; (8b8 <CONFIG_ISR_STACK_SIZE+0xb8>)
     7c8:	460e      	mov	r6, r1
     7ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     7ce:	4f3b      	ldr	r7, [pc, #236]	; (8bc <CONFIG_ISR_STACK_SIZE+0xbc>)
     7d0:	f890 5020 	ldrb.w	r5, [r0, #32]
     7d4:	2020      	movs	r0, #32
     7d6:	4698      	mov	r8, r3
     7d8:	4692      	mov	sl, r2
     7da:	7010      	strb	r0, [r2, #0]
     7dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
     7e0:	2d20      	cmp	r5, #32
     7e2:	bf18      	it	ne
     7e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     7e8:	d028      	beq.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     7ea:	bf00      	nop
     7ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     7f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     7f4:	f100 0108 	add.w	r1, r0, #8
     7f8:	68c0      	ldr	r0, [r0, #12]
     7fa:	6822      	ldr	r2, [r4, #0]
     7fc:	1a10      	subs	r0, r2, r0
     7fe:	0200      	lsls	r0, r0, #8
     800:	17c2      	asrs	r2, r0, #31
     802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     806:	1200      	asrs	r0, r0, #8
     808:	d418      	bmi.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     80a:	8960      	ldrh	r0, [r4, #10]
     80c:	b178      	cbz	r0, 82e <CONFIG_ISR_STACK_SIZE+0x2e>
     80e:	8948      	ldrh	r0, [r1, #10]
     810:	b968      	cbnz	r0, 82e <CONFIG_ISR_STACK_SIZE+0x2e>
     812:	4608      	mov	r0, r1
     814:	f000 fc50 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     818:	f001 ff3e 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     81c:	6821      	ldr	r1, [r4, #0]
     81e:	1a08      	subs	r0, r1, r0
     820:	0200      	lsls	r0, r0, #8
     822:	17c1      	asrs	r1, r0, #31
     824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     828:	1200      	asrs	r0, r0, #8
     82a:	2833      	cmp	r0, #51	; 0x33
     82c:	db06      	blt.n	83c <CONFIG_ISR_STACK_SIZE+0x3c>
     82e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     832:	f88a 5000 	strb.w	r5, [sl]
     836:	7845      	ldrb	r5, [r0, #1]
     838:	2d20      	cmp	r5, #32
     83a:	d1d7      	bne.n	7ec <__data_size+0x168>
     83c:	f89a 0000 	ldrb.w	r0, [sl]
     840:	f888 0000 	strb.w	r0, [r8]
     844:	2d20      	cmp	r5, #32
     846:	bf18      	it	ne
     848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     84c:	d030      	beq.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     84e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     856:	6861      	ldr	r1, [r4, #4]
     858:	f8d9 2008 	ldr.w	r2, [r9, #8]
     85c:	4620      	mov	r0, r4
     85e:	1a51      	subs	r1, r2, r1
     860:	0209      	lsls	r1, r1, #8
     862:	17ca      	asrs	r2, r1, #31
     864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     868:	f109 0608 	add.w	r6, r9, #8
     86c:	1209      	asrs	r1, r1, #8
     86e:	d410      	bmi.n	892 <CONFIG_ISR_STACK_SIZE+0x92>
     870:	8971      	ldrh	r1, [r6, #10]
     872:	b1e9      	cbz	r1, 8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     874:	8941      	ldrh	r1, [r0, #10]
     876:	b9d9      	cbnz	r1, 8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     878:	f000 fc1e 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     87c:	f001 ff0c 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     880:	6831      	ldr	r1, [r6, #0]
     882:	1a08      	subs	r0, r1, r0
     884:	0200      	lsls	r0, r0, #8
     886:	17c1      	asrs	r1, r0, #31
     888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     88c:	1200      	asrs	r0, r0, #8
     88e:	2833      	cmp	r0, #51	; 0x33
     890:	da0e      	bge.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     892:	f888 5000 	strb.w	r5, [r8]
     896:	f899 0014 	ldrb.w	r0, [r9, #20]
     89a:	7b21      	ldrb	r1, [r4, #12]
     89c:	4288      	cmp	r0, r1
     89e:	d802      	bhi.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     8a0:	2000      	movs	r0, #0
     8a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     8aa:	7845      	ldrb	r5, [r0, #1]
     8ac:	2d20      	cmp	r5, #32
     8ae:	d1ce      	bne.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
     8b0:	2001      	movs	r0, #1
     8b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     8b6:	0000      	.short	0x0000
     8b8:	20000d54 	.word	0x20000d54
     8bc:	200009d4 	.word	0x200009d4
     8c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8c4:	f04f 0800 	mov.w	r8, #0
     8c8:	b098      	sub	sp, #96	; 0x60
     8ca:	4616      	mov	r6, r2
     8cc:	460d      	mov	r5, r1
     8ce:	46c3      	mov	fp, r8
     8d0:	f002 f95a 	bl	2b88 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     8d4:	4604      	mov	r4, r0
     8d6:	2d01      	cmp	r5, #1
     8d8:	bf18      	it	ne
     8da:	2d02      	cmpne	r5, #2
     8dc:	d005      	beq.n	8ea <CONFIG_ISR_STACK_SIZE+0xea>
     8de:	f640 1194 	movw	r1, #2452	; 0x994
     8e2:	f04f 0070 	mov.w	r0, #112	; 0x70
     8e6:	f002 ff1f 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     8ea:	49fd      	ldr	r1, [pc, #1012]	; (ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>)
     8ec:	2001      	movs	r0, #1
     8ee:	6008      	str	r0, [r1, #0]
     8f0:	49fc      	ldr	r1, [pc, #1008]	; (ce4 <CONFIG_ISR_STACK_SIZE+0x4e4>)
     8f2:	6889      	ldr	r1, [r1, #8]
     8f4:	6008      	str	r0, [r1, #0]
     8f6:	2000      	movs	r0, #0
     8f8:	900c      	str	r0, [sp, #48]	; 0x30
     8fa:	1e40      	subs	r0, r0, #1
     8fc:	900e      	str	r0, [sp, #56]	; 0x38
     8fe:	49fa      	ldr	r1, [pc, #1000]	; (ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>)
     900:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     904:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     908:	3308      	adds	r3, #8
     90a:	af0f      	add	r7, sp, #60	; 0x3c
     90c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     90e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     912:	a80f      	add	r0, sp, #60	; 0x3c
     914:	f000 fbd0 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
     918:	900d      	str	r0, [sp, #52]	; 0x34
     91a:	48f3      	ldr	r0, [pc, #972]	; (ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>)
     91c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     920:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     924:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     928:	f1b9 0f00 	cmp.w	r9, #0
     92c:	bf14      	ite	ne
     92e:	f04f 0a01 	movne.w	sl, #1
     932:	f04f 0a00 	moveq.w	sl, #0
     936:	980f      	ldr	r0, [sp, #60]	; 0x3c
     938:	9014      	str	r0, [sp, #80]	; 0x50
     93a:	f1ba 0f00 	cmp.w	sl, #0
     93e:	d009      	beq.n	954 <CONFIG_ISR_STACK_SIZE+0x154>
     940:	48ea      	ldr	r0, [pc, #936]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     942:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     946:	b928      	cbnz	r0, 954 <CONFIG_ISR_STACK_SIZE+0x154>
     948:	f002 fe8a 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     94c:	2800      	cmp	r0, #0
     94e:	bf08      	it	eq
     950:	2701      	moveq	r7, #1
     952:	d000      	beq.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     954:	2700      	movs	r7, #0
     956:	48e6      	ldr	r0, [pc, #920]	; (cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>)
     958:	2200      	movs	r2, #0
     95a:	9215      	str	r2, [sp, #84]	; 0x54
     95c:	7800      	ldrb	r0, [r0, #0]
     95e:	4616      	mov	r6, r2
     960:	2801      	cmp	r0, #1
     962:	bf18      	it	ne
     964:	2803      	cmpne	r0, #3
     966:	d140      	bne.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
     968:	48e1      	ldr	r0, [pc, #900]	; (cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>)
     96a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     96e:	eba8 0009 	sub.w	r0, r8, r9
     972:	9015      	str	r0, [sp, #84]	; 0x54
     974:	45c8      	cmp	r8, r9
     976:	d938      	bls.n	9ea <CONFIG_ISR_STACK_SIZE+0x1ea>
     978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     97a:	ea6f 0108 	mvn.w	r1, r8
     97e:	f8df e374 	ldr.w	lr, [pc, #884]	; cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>
     982:	1858      	adds	r0, r3, r1
     984:	f10d 0c0c 	add.w	ip, sp, #12
     988:	aa17      	add	r2, sp, #92	; 0x5c
     98a:	4573      	cmp	r3, lr
     98c:	d904      	bls.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
     98e:	f240 6109 	movw	r1, #1545	; 0x609
     992:	2070      	movs	r0, #112	; 0x70
     994:	f002 fec8 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     998:	4bd7      	ldr	r3, [pc, #860]	; (cf8 <CONFIG_ISR_STACK_SIZE+0x4f8>)
     99a:	4299      	cmp	r1, r3
     99c:	dd04      	ble.n	9a8 <CONFIG_ISR_STACK_SIZE+0x1a8>
     99e:	f240 610a 	movw	r1, #1546	; 0x60a
     9a2:	2070      	movs	r0, #112	; 0x70
     9a4:	f002 fec0 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9a8:	4bd4      	ldr	r3, [pc, #848]	; (cfc <CONFIG_ISR_STACK_SIZE+0x4fc>)
     9aa:	4299      	cmp	r1, r3
     9ac:	da04      	bge.n	9b8 <CONFIG_ISR_STACK_SIZE+0x1b8>
     9ae:	f240 610b 	movw	r1, #1547	; 0x60b
     9b2:	2070      	movs	r0, #112	; 0x70
     9b4:	f002 feb8 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     9b8:	49d1      	ldr	r1, [pc, #836]	; (d00 <CONFIG_ISR_STACK_SIZE+0x500>)
     9ba:	4281      	cmp	r1, r0
     9bc:	bfdc      	itt	le
     9be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     9c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     9c6:	dd05      	ble.n	9d4 <CONFIG_ISR_STACK_SIZE+0x1d4>
     9c8:	2800      	cmp	r0, #0
     9ca:	bfbc      	itt	lt
     9cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     9d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     9d4:	4661      	mov	r1, ip
     9d6:	f001 fe7b 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     9da:	9803      	ldr	r0, [sp, #12]
     9dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
     9de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9e2:	9003      	str	r0, [sp, #12]
     9e4:	1a08      	subs	r0, r1, r0
     9e6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     9ea:	2f00      	cmp	r7, #0
     9ec:	bf18      	it	ne
     9ee:	2632      	movne	r6, #50	; 0x32
     9f0:	d104      	bne.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
     9f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     9f6:	2800      	cmp	r0, #0
     9f8:	bf18      	it	ne
     9fa:	2602      	movne	r6, #2
     9fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     a00:	d008      	beq.n	a14 <CONFIG_ISR_STACK_SIZE+0x214>
     a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a04:	1b00      	subs	r0, r0, r4
     a06:	0200      	lsls	r0, r0, #8
     a08:	17c1      	asrs	r1, r0, #31
     a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a0e:	1200      	asrs	r0, r0, #8
     a10:	2801      	cmp	r0, #1
     a12:	da02      	bge.n	a1a <CONFIG_ISR_STACK_SIZE+0x21a>
     a14:	2104      	movs	r1, #4
     a16:	9818      	ldr	r0, [sp, #96]	; 0x60
     a18:	e00b      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
     a1a:	b147      	cbz	r7, a2e <CONFIG_ISR_STACK_SIZE+0x22e>
     a1c:	48b3      	ldr	r0, [pc, #716]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     a1e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     a22:	b120      	cbz	r0, a2e <CONFIG_ISR_STACK_SIZE+0x22e>
     a24:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     a28:	1c06      	adds	r6, r0, #0
     a2a:	bf18      	it	ne
     a2c:	2602      	movne	r6, #2
     a2e:	4620      	mov	r0, r4
     a30:	2101      	movs	r1, #1
     a32:	f1b9 0f00 	cmp.w	r9, #0
     a36:	d002      	beq.n	a3e <CONFIG_ISR_STACK_SIZE+0x23e>
     a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
     a3a:	2b1e      	cmp	r3, #30
     a3c:	da02      	bge.n	a44 <CONFIG_ISR_STACK_SIZE+0x244>
     a3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     a42:	b113      	cbz	r3, a4a <CONFIG_ISR_STACK_SIZE+0x24a>
     a44:	f04f 0b01 	mov.w	fp, #1
     a48:	1e49      	subs	r1, r1, #1
     a4a:	198b      	adds	r3, r1, r6
     a4c:	49a8      	ldr	r1, [pc, #672]	; (cf0 <CONFIG_ISR_STACK_SIZE+0x4f0>)
     a4e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     a52:	7809      	ldrb	r1, [r1, #0]
     a54:	9115      	str	r1, [sp, #84]	; 0x54
     a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
     a58:	1a89      	subs	r1, r1, r2
     a5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
     a5e:	ebac 0100 	sub.w	r1, ip, r0
     a62:	0209      	lsls	r1, r1, #8
     a64:	17ce      	asrs	r6, r1, #31
     a66:	eb01 6116 	add.w	r1, r1, r6, lsr #24
     a6a:	1209      	asrs	r1, r1, #8
     a6c:	4299      	cmp	r1, r3
     a6e:	db18      	blt.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
     a70:	2a00      	cmp	r2, #0
     a72:	bf18      	it	ne
     a74:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     a78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     a7a:	9705      	str	r7, [sp, #20]
     a7c:	2700      	movs	r7, #0
     a7e:	f001 ff7d 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     a82:	1a30      	subs	r0, r6, r0
     a84:	0200      	lsls	r0, r0, #8
     a86:	17c1      	asrs	r1, r0, #31
     a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     a8c:	1200      	asrs	r0, r0, #8
     a8e:	283e      	cmp	r0, #62	; 0x3e
     a90:	da3f      	bge.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
     a92:	2d01      	cmp	r5, #1
     a94:	d020      	beq.n	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
     a96:	1e70      	subs	r0, r6, #1
     a98:	9905      	ldr	r1, [sp, #20]
     a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a9e:	b319      	cbz	r1, ae8 <CONFIG_ISR_STACK_SIZE+0x2e8>
     aa0:	e02d      	b.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     aa2:	b182      	cbz	r2, ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
     aa4:	f1be 0f00 	cmp.w	lr, #0
     aa8:	bf04      	itt	eq
     aaa:	9915      	ldreq	r1, [sp, #84]	; 0x54
     aac:	2903      	cmpeq	r1, #3
     aae:	d00a      	beq.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
     ab0:	b927      	cbnz	r7, abc <CONFIG_ISR_STACK_SIZE+0x2bc>
     ab2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     ab6:	2900      	cmp	r1, #0
     ab8:	bf18      	it	ne
     aba:	1e9b      	subne	r3, r3, #2
     abc:	2200      	movs	r2, #0
     abe:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     ac2:	4690      	mov	r8, r2
     ac4:	e7c7      	b.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
     ac6:	bb07      	cbnz	r7, b0a <CONFIG_ISR_STACK_SIZE+0x30a>
     ac8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
     acc:	b1e9      	cbz	r1, b0a <CONFIG_ISR_STACK_SIZE+0x30a>
     ace:	2100      	movs	r1, #0
     ad0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
     ad4:	1e9b      	subs	r3, r3, #2
     ad6:	e7be      	b.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
     ad8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     adc:	d120      	bne.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
     ade:	f640 110d 	movw	r1, #2317	; 0x90d
     ae2:	2070      	movs	r0, #112	; 0x70
     ae4:	f002 fe20 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ae8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     aec:	d007      	beq.n	afe <CONFIG_ISR_STACK_SIZE+0x2fe>
     aee:	1a21      	subs	r1, r4, r0
     af0:	0209      	lsls	r1, r1, #8
     af2:	17ca      	asrs	r2, r1, #31
     af4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     af8:	1209      	asrs	r1, r1, #8
     afa:	2904      	cmp	r1, #4
     afc:	dd03      	ble.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
     afe:	4604      	mov	r4, r0
     b00:	f001 ff42 	bl	2988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b04:	e00c      	b.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
     b06:	2900      	cmp	r1, #0
     b08:	dd0a      	ble.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
     b0a:	b01b      	add	sp, #108	; 0x6c
     b0c:	2000      	movs	r0, #0
     b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b12:	1e70      	subs	r0, r6, #1
     b14:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     b18:	4620      	mov	r0, r4
     b1a:	f001 ff35 	bl	2988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     b1e:	4657      	mov	r7, sl
     b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b24:	d028      	beq.n	b78 <CONFIG_ISR_STACK_SIZE+0x378>
     b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
     b2c:	1b00      	subs	r0, r0, r4
     b2e:	f08b 0301 	eor.w	r3, fp, #1
     b32:	4a74      	ldr	r2, [pc, #464]	; (d04 <CONFIG_ISR_STACK_SIZE+0x504>)
     b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b38:	ebac 0c04 	sub.w	ip, ip, r4
     b3c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
     b40:	4283      	cmp	r3, r0
     b42:	bf98      	it	ls
     b44:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     b48:	d2df      	bcs.n	b0a <CONFIG_ISR_STACK_SIZE+0x30a>
     b4a:	4562      	cmp	r2, ip
     b4c:	d3dd      	bcc.n	b0a <CONFIG_ISR_STACK_SIZE+0x30a>
     b4e:	4620      	mov	r0, r4
     b50:	f00a fd7a 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     b54:	4967      	ldr	r1, [pc, #412]	; (cf4 <CONFIG_ISR_STACK_SIZE+0x4f4>)
     b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     b58:	1c4b      	adds	r3, r1, #1
     b5a:	1a16      	subs	r6, r2, r0
     b5c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     b60:	bf24      	itt	cs
     b62:	eba0 0c02 	subcs.w	ip, r0, r2
     b66:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     b6a:	d310      	bcc.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
     b6c:	42b1      	cmp	r1, r6
     b6e:	d208      	bcs.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
     b70:	1a08      	subs	r0, r1, r0
     b72:	4410      	add	r0, r2
     b74:	1c46      	adds	r6, r0, #1
     b76:	e00a      	b.n	b8e <CONFIG_ISR_STACK_SIZE+0x38e>
     b78:	f640 212c 	movw	r1, #2604	; 0xa2c
     b7c:	2070      	movs	r0, #112	; 0x70
     b7e:	f002 fdd3 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     b82:	4561      	cmp	r1, ip
     b84:	d22c      	bcs.n	be0 <CONFIG_ISR_STACK_SIZE+0x3e0>
     b86:	1a89      	subs	r1, r1, r2
     b88:	4408      	add	r0, r1
     b8a:	1c40      	adds	r0, r0, #1
     b8c:	4246      	negs	r6, r0
     b8e:	4857      	ldr	r0, [pc, #348]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     b90:	7f80      	ldrb	r0, [r0, #30]
     b92:	b350      	cbz	r0, bea <CONFIG_ISR_STACK_SIZE+0x3ea>
     b94:	4628      	mov	r0, r5
     b96:	4645      	mov	r5, r8
     b98:	f04f 0b00 	mov.w	fp, #0
     b9c:	46d8      	mov	r8, fp
     b9e:	2801      	cmp	r0, #1
     ba0:	d005      	beq.n	bae <CONFIG_ISR_STACK_SIZE+0x3ae>
     ba2:	2002      	movs	r0, #2
     ba4:	f002 f938 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ba8:	2001      	movs	r0, #1
     baa:	f002 f935 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     bae:	45a9      	cmp	r9, r5
     bb0:	d22c      	bcs.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
     bb2:	eba6 0105 	sub.w	r1, r6, r5
     bb6:	f04f 0301 	mov.w	r3, #1
     bba:	f04f 0203 	mov.w	r2, #3
     bbe:	f04f 0002 	mov.w	r0, #2
     bc2:	f002 f861 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     bc6:	2800      	cmp	r0, #0
     bc8:	bf08      	it	eq
     bca:	f04f 0801 	moveq.w	r8, #1
     bce:	f1b9 0f00 	cmp.w	r9, #0
     bd2:	d035      	beq.n	c40 <CONFIG_ISR_STACK_SIZE+0x440>
     bd4:	2301      	movs	r3, #1
     bd6:	eba6 0109 	sub.w	r1, r6, r9
     bda:	2203      	movs	r2, #3
     bdc:	4618      	mov	r0, r3
     bde:	e023      	b.n	c28 <CONFIG_ISR_STACK_SIZE+0x428>
     be0:	f640 310c 	movw	r1, #2828	; 0xb0c
     be4:	2070      	movs	r0, #112	; 0x70
     be6:	f002 fd9f 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     bea:	45c1      	cmp	r9, r8
     bec:	bf34      	ite	cc
     bee:	4640      	movcc	r0, r8
     bf0:	4648      	movcs	r0, r9
     bf2:	f1bb 0f00 	cmp.w	fp, #0
     bf6:	bf14      	ite	ne
     bf8:	2100      	movne	r1, #0
     bfa:	211e      	moveq	r1, #30
     bfc:	4408      	add	r0, r1
     bfe:	42b0      	cmp	r0, r6
     c00:	dbc8      	blt.n	b94 <CONFIG_ISR_STACK_SIZE+0x394>
     c02:	f640 213f 	movw	r1, #2623	; 0xa3f
     c06:	2070      	movs	r0, #112	; 0x70
     c08:	f002 fd8e 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c0c:	d910      	bls.n	c30 <CONFIG_ISR_STACK_SIZE+0x430>
     c0e:	2301      	movs	r3, #1
     c10:	eba6 0109 	sub.w	r1, r6, r9
     c14:	2203      	movs	r2, #3
     c16:	4618      	mov	r0, r3
     c18:	f002 f836 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c1c:	b328      	cbz	r0, c6a <CONFIG_ISR_STACK_SIZE+0x46a>
     c1e:	b17d      	cbz	r5, c40 <CONFIG_ISR_STACK_SIZE+0x440>
     c20:	1b71      	subs	r1, r6, r5
     c22:	2301      	movs	r3, #1
     c24:	2203      	movs	r2, #3
     c26:	2002      	movs	r0, #2
     c28:	f002 f82e 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c2c:	b1e8      	cbz	r0, c6a <CONFIG_ISR_STACK_SIZE+0x46a>
     c2e:	e007      	b.n	c40 <CONFIG_ISR_STACK_SIZE+0x440>
     c30:	ea55 0009 	orrs.w	r0, r5, r9
     c34:	d004      	beq.n	c40 <CONFIG_ISR_STACK_SIZE+0x440>
     c36:	f640 1177 	movw	r1, #2423	; 0x977
     c3a:	2070      	movs	r0, #112	; 0x70
     c3c:	f002 fd74 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c40:	2301      	movs	r3, #1
     c42:	2203      	movs	r2, #3
     c44:	4631      	mov	r1, r6
     c46:	2000      	movs	r0, #0
     c48:	f002 f81e 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     c4c:	b168      	cbz	r0, c6a <CONFIG_ISR_STACK_SIZE+0x46a>
     c4e:	2501      	movs	r5, #1
     c50:	f1b8 0f00 	cmp.w	r8, #0
     c54:	d003      	beq.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
     c56:	9814      	ldr	r0, [sp, #80]	; 0x50
     c58:	900f      	str	r0, [sp, #60]	; 0x3c
     c5a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     c5e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; d08 <CONFIG_ISR_STACK_SIZE+0x508>
     c62:	f1ba 0f00 	cmp.w	sl, #0
     c66:	d10e      	bne.n	c86 <CONFIG_ISR_STACK_SIZE+0x486>
     c68:	e009      	b.n	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
     c6a:	2002      	movs	r0, #2
     c6c:	f002 f8d4 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c70:	2001      	movs	r0, #1
     c72:	f002 f8d1 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     c76:	b01b      	add	sp, #108	; 0x6c
     c78:	2000      	movs	r0, #0
     c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c7e:	481b      	ldr	r0, [pc, #108]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     c80:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     c84:	b100      	cbz	r0, c88 <CONFIG_ISR_STACK_SIZE+0x488>
     c86:	b34f      	cbz	r7, cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
     c88:	f8df a060 	ldr.w	sl, [pc, #96]	; cec <CONFIG_ISR_STACK_SIZE+0x4ec>
     c8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     c90:	b118      	cbz	r0, c9a <CONFIG_ISR_STACK_SIZE+0x49a>
     c92:	f002 fb8f 	bl	33b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     c96:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     c9a:	b307      	cbz	r7, cde <CONFIG_ISR_STACK_SIZE+0x4de>
     c9c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     ca0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ca4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     ca8:	f8c8 0000 	str.w	r0, [r8]
     cac:	2300      	movs	r3, #0
     cae:	2203      	movs	r2, #3
     cb0:	2005      	movs	r0, #5
     cb2:	f001 ffe9 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     cb6:	b368      	cbz	r0, d14 <CONFIG_ISR_STACK_SIZE+0x514>
     cb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     cbc:	2005      	movs	r0, #5
     cbe:	f002 f971 	bl	2fa4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     cc2:	4912      	ldr	r1, [pc, #72]	; (d0c <CONFIG_ISR_STACK_SIZE+0x50c>)
     cc4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     cc8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     ccc:	4910      	ldr	r1, [pc, #64]	; (d10 <CONFIG_ISR_STACK_SIZE+0x510>)
     cce:	12e0      	asrs	r0, r4, #11
     cd0:	6008      	str	r0, [r1, #0]
     cd2:	4c06      	ldr	r4, [pc, #24]	; (cec <CONFIG_ISR_STACK_SIZE+0x4ec>)
     cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     cd8:	b3f0      	cbz	r0, d58 <CONFIG_ISR_STACK_SIZE+0x558>
     cda:	e05b      	b.n	d94 <CONFIG_ISR_STACK_SIZE+0x594>
     cdc:	e01b      	b.n	d16 <CONFIG_ISR_STACK_SIZE+0x516>
     cde:	e01f      	b.n	d20 <CONFIG_ISR_STACK_SIZE+0x520>
     ce0:	40000508 	.word	0x40000508
     ce4:	20000010 	.word	0x20000010
     ce8:	200009d4 	.word	0x200009d4
     cec:	20000d54 	.word	0x20000d54
     cf0:	20000012 	.word	0x20000012
     cf4:	1e847fff 	.word	0x1e847fff
     cf8:	07a12000 	.word	0x07a12000
     cfc:	f85ee000 	.word	0xf85ee000
     d00:	1e848000 	.word	0x1e848000
     d04:	003fffff 	.word	0x003fffff
     d08:	4001f508 	.word	0x4001f508
     d0c:	4001f098 	.word	0x4001f098
     d10:	4001f504 	.word	0x4001f504
     d14:	e035      	b.n	d82 <CONFIG_ISR_STACK_SIZE+0x582>
     d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; dd0 <CONFIG_ISR_STACK_SIZE+0x5d0>
     d1a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     d1e:	b358      	cbz	r0, d78 <CONFIG_ISR_STACK_SIZE+0x578>
     d20:	4c2b      	ldr	r4, [pc, #172]	; (dd0 <CONFIG_ISR_STACK_SIZE+0x5d0>)
     d22:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     d26:	b150      	cbz	r0, d3e <CONFIG_ISR_STACK_SIZE+0x53e>
     d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     d2c:	f8c8 0000 	str.w	r0, [r8]
     d30:	2005      	movs	r0, #5
     d32:	f002 f871 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     d36:	f002 fba5 	bl	3484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     d3a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     d3e:	ac0c      	add	r4, sp, #48	; 0x30
     d40:	4824      	ldr	r0, [pc, #144]	; (dd4 <CONFIG_ISR_STACK_SIZE+0x5d4>)
     d42:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d46:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     d4a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     d4e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     d52:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     d56:	e000      	b.n	d5a <CONFIG_ISR_STACK_SIZE+0x55a>
     d58:	e018      	b.n	d8c <CONFIG_ISR_STACK_SIZE+0x58c>
     d5a:	ac10      	add	r4, sp, #64	; 0x40
     d5c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     d60:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     d64:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     d68:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     d6c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     d70:	b01b      	add	sp, #108	; 0x6c
     d72:	2001      	movs	r0, #1
     d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d78:	f002 fb38 	bl	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     d7c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     d80:	e78b      	b.n	c9a <CONFIG_ISR_STACK_SIZE+0x49a>
     d82:	f240 313e 	movw	r1, #830	; 0x33e
     d86:	2070      	movs	r0, #112	; 0x70
     d88:	f002 fcce 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d8c:	f002 fb6c 	bl	3468 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     d90:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     d94:	eba6 0009 	sub.w	r0, r6, r9
     d98:	f1a0 0119 	sub.w	r1, r0, #25
     d9c:	2900      	cmp	r1, #0
     d9e:	dc04      	bgt.n	daa <CONFIG_ISR_STACK_SIZE+0x5aa>
     da0:	f640 2169 	movw	r1, #2665	; 0xa69
     da4:	2070      	movs	r0, #112	; 0x70
     da6:	f002 fcbf 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     daa:	2203      	movs	r2, #3
     dac:	2301      	movs	r3, #1
     dae:	4610      	mov	r0, r2
     db0:	f001 ff6a 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     db4:	b138      	cbz	r0, dc6 <CONFIG_ISR_STACK_SIZE+0x5c6>
     db6:	4808      	ldr	r0, [pc, #32]	; (dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>)
     db8:	6880      	ldr	r0, [r0, #8]
     dba:	f8c0 b000 	str.w	fp, [r0]
     dbe:	4807      	ldr	r0, [pc, #28]	; (ddc <CONFIG_ISR_STACK_SIZE+0x5dc>)
     dc0:	f8c0 b000 	str.w	fp, [r0]
     dc4:	e7bb      	b.n	d3e <CONFIG_ISR_STACK_SIZE+0x53e>
     dc6:	f640 2174 	movw	r1, #2676	; 0xa74
     dca:	2070      	movs	r0, #112	; 0x70
     dcc:	f002 fcac 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     dd0:	20000d54 	.word	0x20000d54
     dd4:	200009d4 	.word	0x200009d4
     dd8:	20000010 	.word	0x20000010
     ddc:	40000508 	.word	0x40000508
     de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     de4:	4606      	mov	r6, r0
     de6:	b083      	sub	sp, #12
     de8:	7808      	ldrb	r0, [r1, #0]
     dea:	7390      	strb	r0, [r2, #14]
     dec:	7acf      	ldrb	r7, [r1, #11]
     dee:	7357      	strb	r7, [r2, #13]
     df0:	7a88      	ldrb	r0, [r1, #10]
     df2:	7310      	strb	r0, [r2, #12]
     df4:	8908      	ldrh	r0, [r1, #8]
     df6:	4614      	mov	r4, r2
     df8:	8150      	strh	r0, [r2, #10]
     dfa:	460d      	mov	r5, r1
     dfc:	780a      	ldrb	r2, [r1, #0]
     dfe:	495f      	ldr	r1, [pc, #380]	; (f7c <CONFIG_ISR_STACK_SIZE+0x77c>)
     e00:	4699      	mov	r9, r3
     e02:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     e06:	424b      	negs	r3, r1
     e08:	f1ac 0801 	sub.w	r8, ip, #1
     e0c:	b15a      	cbz	r2, e26 <CONFIG_ISR_STACK_SIZE+0x626>
     e0e:	43c0      	mvns	r0, r0
     e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
     e14:	f104 0208 	add.w	r2, r4, #8
     e18:	4288      	cmp	r0, r1
     e1a:	dd3d      	ble.n	e98 <CONFIG_ISR_STACK_SIZE+0x698>
     e1c:	f240 610a 	movw	r1, #1546	; 0x60a
     e20:	2070      	movs	r0, #112	; 0x70
     e22:	f002 fc81 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e26:	68ee      	ldr	r6, [r5, #12]
     e28:	686d      	ldr	r5, [r5, #4]
     e2a:	ea6f 0900 	mvn.w	r9, r0
     e2e:	f104 0208 	add.w	r2, r4, #8
     e32:	eb06 0009 	add.w	r0, r6, r9
     e36:	4546      	cmp	r6, r8
     e38:	d904      	bls.n	e44 <CONFIG_ISR_STACK_SIZE+0x644>
     e3a:	f240 6109 	movw	r1, #1545	; 0x609
     e3e:	2070      	movs	r0, #112	; 0x70
     e40:	f002 fc72 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e44:	4589      	cmp	r9, r1
     e46:	dce9      	bgt.n	e1c <CONFIG_ISR_STACK_SIZE+0x61c>
     e48:	4599      	cmp	r9, r3
     e4a:	db28      	blt.n	e9e <CONFIG_ISR_STACK_SIZE+0x69e>
     e4c:	4584      	cmp	ip, r0
     e4e:	bfdc      	itt	le
     e50:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     e54:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     e58:	dd05      	ble.n	e66 <CONFIG_ISR_STACK_SIZE+0x666>
     e5a:	2800      	cmp	r0, #0
     e5c:	bfbc      	itt	lt
     e5e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     e62:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     e66:	4621      	mov	r1, r4
     e68:	f001 fc32 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     e6c:	6820      	ldr	r0, [r4, #0]
     e6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     e72:	1970      	adds	r0, r6, r5
     e74:	1c40      	adds	r0, r0, #1
     e76:	6021      	str	r1, [r4, #0]
     e78:	2f00      	cmp	r7, #0
     e7a:	bf08      	it	eq
     e7c:	307a      	addeq	r0, #122	; 0x7a
     e7e:	d003      	beq.n	e88 <CONFIG_ISR_STACK_SIZE+0x688>
     e80:	2f01      	cmp	r7, #1
     e82:	bf08      	it	eq
     e84:	3044      	addeq	r0, #68	; 0x44
     e86:	d12d      	bne.n	ee4 <CONFIG_ISR_STACK_SIZE+0x6e4>
     e88:	f001 fc06 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     e90:	6060      	str	r0, [r4, #4]
     e92:	b003      	add	sp, #12
     e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     e98:	4601      	mov	r1, r0
     e9a:	4298      	cmp	r0, r3
     e9c:	da04      	bge.n	ea8 <CONFIG_ISR_STACK_SIZE+0x6a8>
     e9e:	f240 610b 	movw	r1, #1547	; 0x60b
     ea2:	2070      	movs	r0, #112	; 0x70
     ea4:	f002 fc40 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ea8:	4584      	cmp	ip, r0
     eaa:	bfdc      	itt	le
     eac:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     eb0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     eb4:	dd05      	ble.n	ec2 <CONFIG_ISR_STACK_SIZE+0x6c2>
     eb6:	2800      	cmp	r0, #0
     eb8:	bfbc      	itt	lt
     eba:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     ebe:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     ec2:	4621      	mov	r1, r4
     ec4:	f001 fc04 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ec8:	6820      	ldr	r0, [r4, #0]
     eca:	2f00      	cmp	r7, #0
     ecc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ed0:	f108 0001 	add.w	r0, r8, #1
     ed4:	6021      	str	r1, [r4, #0]
     ed6:	bf08      	it	eq
     ed8:	307a      	addeq	r0, #122	; 0x7a
     eda:	d008      	beq.n	eee <CONFIG_ISR_STACK_SIZE+0x6ee>
     edc:	2f01      	cmp	r7, #1
     ede:	bf08      	it	eq
     ee0:	3044      	addeq	r0, #68	; 0x44
     ee2:	d004      	beq.n	eee <CONFIG_ISR_STACK_SIZE+0x6ee>
     ee4:	f240 61b1 	movw	r1, #1713	; 0x6b1
     ee8:	2070      	movs	r0, #112	; 0x70
     eea:	f002 fc1d 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     eee:	f001 fbd3 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     ef2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     ef6:	6061      	str	r1, [r4, #4]
     ef8:	8960      	ldrh	r0, [r4, #10]
     efa:	aa01      	add	r2, sp, #4
     efc:	4669      	mov	r1, sp
     efe:	f001 fbe7 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     f02:	481f      	ldr	r0, [pc, #124]	; (f80 <CONFIG_ISR_STACK_SIZE+0x780>)
     f04:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
     f08:	2920      	cmp	r1, #32
     f0a:	d023      	beq.n	f54 <CONFIG_ISR_STACK_SIZE+0x754>
     f0c:	6900      	ldr	r0, [r0, #16]
     f0e:	1d40      	adds	r0, r0, #5
     f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f14:	e9d4 2100 	ldrd	r2, r1, [r4]
     f18:	1a89      	subs	r1, r1, r2
     f1a:	6020      	str	r0, [r4, #0]
     f1c:	4408      	add	r0, r1
     f1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f22:	6060      	str	r0, [r4, #4]
     f24:	464b      	mov	r3, r9
     f26:	4632      	mov	r2, r6
     f28:	4621      	mov	r1, r4
     f2a:	68e8      	ldr	r0, [r5, #12]
     f2c:	f7ff facc 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
     f30:	2800      	cmp	r0, #0
     f32:	bf1c      	itt	ne
     f34:	b003      	addne	sp, #12
     f36:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f3a:	e9d4 1000 	ldrd	r1, r0, [r4]
     f3e:	1a40      	subs	r0, r0, r1
     f40:	4430      	add	r0, r6
     f42:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
     f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f4a:	e9c4 1000 	strd	r1, r0, [r4]
     f4e:	b003      	add	sp, #12
     f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f54:	8960      	ldrh	r0, [r4, #10]
     f56:	f106 0709 	add.w	r7, r6, #9
     f5a:	b120      	cbz	r0, f66 <CONFIG_ISR_STACK_SIZE+0x766>
     f5c:	f002 fb80 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     f60:	2800      	cmp	r0, #0
     f62:	bf08      	it	eq
     f64:	3732      	addeq	r7, #50	; 0x32
     f66:	4807      	ldr	r0, [pc, #28]	; (f84 <CONFIG_ISR_STACK_SIZE+0x784>)
     f68:	7841      	ldrb	r1, [r0, #1]
     f6a:	9800      	ldr	r0, [sp, #0]
     f6c:	4281      	cmp	r1, r0
     f6e:	bf84      	itt	hi
     f70:	1a08      	subhi	r0, r1, r0
     f72:	4407      	addhi	r7, r0
     f74:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
     f78:	e7cc      	b.n	f14 <CONFIG_ISR_STACK_SIZE+0x714>
     f7a:	0000      	.short	0x0000
     f7c:	07a12000 	.word	0x07a12000
     f80:	20000d54 	.word	0x20000d54
     f84:	20000012 	.word	0x20000012
     f88:	b510      	push	{r4, lr}
     f8a:	4c15      	ldr	r4, [pc, #84]	; (fe0 <CONFIG_ISR_STACK_SIZE+0x7e0>)
     f8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
     f90:	2820      	cmp	r0, #32
     f92:	bf18      	it	ne
     f94:	bd10      	popne	{r4, pc}
     f96:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
     f9a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
     f9e:	f890 1020 	ldrb.w	r1, [r0, #32]
     fa2:	2920      	cmp	r1, #32
     fa4:	d017      	beq.n	fd6 <CONFIG_ISR_STACK_SIZE+0x7d6>
     fa6:	f8df c03c 	ldr.w	ip, [pc, #60]	; fe4 <CONFIG_ISR_STACK_SIZE+0x7e4>
     faa:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
     fae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
     fb2:	785b      	ldrb	r3, [r3, #1]
     fb4:	f880 3020 	strb.w	r3, [r0, #32]
     fb8:	2301      	movs	r3, #1
     fba:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
     fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
     fc2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
     fc6:	2002      	movs	r0, #2
     fc8:	f000 f8b0 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
     fcc:	2000      	movs	r0, #0
     fce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
     fd2:	77a0      	strb	r0, [r4, #30]
     fd4:	bd10      	pop	{r4, pc}
     fd6:	f240 318b 	movw	r1, #907	; 0x38b
     fda:	2070      	movs	r0, #112	; 0x70
     fdc:	f002 fba4 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fe0:	20000d54 	.word	0x20000d54
     fe4:	20000cd4 	.word	0x20000cd4
     fe8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 10a8 <CONFIG_FPROTECT_BLOCK_SIZE+0xa8>
     ff0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
     ff4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
     ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
     ffc:	2c20      	cmp	r4, #32
     ffe:	bf08      	it	eq
    1000:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1004:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1008:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
    100c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1010:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1014:	2607      	movs	r6, #7
    1016:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    101a:	2801      	cmp	r0, #1
    101c:	d00e      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    101e:	2804      	cmp	r0, #4
    1020:	bf08      	it	eq
    1022:	2602      	moveq	r6, #2
    1024:	d00a      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1026:	2805      	cmp	r0, #5
    1028:	bf0c      	ite	eq
    102a:	2603      	moveq	r6, #3
    102c:	2806      	cmpne	r0, #6
    102e:	d005      	beq.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1030:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1034:	f04f 0070 	mov.w	r0, #112	; 0x70
    1038:	f002 fb76 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    103c:	f1bb 0f00 	cmp.w	fp, #0
    1040:	bf18      	it	ne
    1042:	f3af 8000 	nopne.w
    1046:	f3ef 8010 	mrs	r0, PRIMASK
    104a:	b672      	cpsid	i
    104c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1050:	784a      	ldrb	r2, [r1, #1]
    1052:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    1056:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    105a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    105e:	42a2      	cmp	r2, r4
    1060:	bf04      	itt	eq
    1062:	2220      	moveq	r2, #32
    1064:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    1068:	b1b8      	cbz	r0, 109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    106a:	462a      	mov	r2, r5
    106c:	4621      	mov	r1, r4
    106e:	2001      	movs	r0, #1
    1070:	f000 f85c 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1074:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1078:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    107c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    1080:	6840      	ldr	r0, [r0, #4]
    1082:	4631      	mov	r1, r6
    1084:	4790      	blx	r2
    1086:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    108a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    108e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1092:	2c20      	cmp	r4, #32
    1094:	d1bc      	bne.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    1096:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    109a:	4806      	ldr	r0, [pc, #24]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    109c:	2800      	cmp	r0, #0
    109e:	bf18      	it	ne
    10a0:	f3af 8000 	nopne.w
    10a4:	b662      	cpsie	i
    10a6:	e7e0      	b.n	106a <CONFIG_FPROTECT_BLOCK_SIZE+0x6a>
    10a8:	20000d54 	.word	0x20000d54
    10ac:	00000000 	.word	0x00000000
    10b0:	20000cd4 	.word	0x20000cd4
    10b4:	00000000 	.word	0x00000000
    10b8:	b510      	push	{r4, lr}
    10ba:	4604      	mov	r4, r0
    10bc:	6800      	ldr	r0, [r0, #0]
    10be:	f00a fac3 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    10c2:	4602      	mov	r2, r0
    10c4:	8960      	ldrh	r0, [r4, #10]
    10c6:	7a21      	ldrb	r1, [r4, #8]
    10c8:	4b14      	ldr	r3, [pc, #80]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
    10ca:	4408      	add	r0, r1
    10cc:	1c41      	adds	r1, r0, #1
    10ce:	1850      	adds	r0, r2, r1
    10d0:	429a      	cmp	r2, r3
    10d2:	d904      	bls.n	10de <CONFIG_FPROTECT_BLOCK_SIZE+0xde>
    10d4:	f240 6109 	movw	r1, #1545	; 0x609
    10d8:	2070      	movs	r0, #112	; 0x70
    10da:	f002 fb25 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10de:	4a10      	ldr	r2, [pc, #64]	; (1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>)
    10e0:	4291      	cmp	r1, r2
    10e2:	dd04      	ble.n	10ee <CONFIG_FPROTECT_BLOCK_SIZE+0xee>
    10e4:	f240 610a 	movw	r1, #1546	; 0x60a
    10e8:	2070      	movs	r0, #112	; 0x70
    10ea:	f002 fb1d 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10ee:	4a0d      	ldr	r2, [pc, #52]	; (1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>)
    10f0:	4291      	cmp	r1, r2
    10f2:	da04      	bge.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
    10f4:	f240 610b 	movw	r1, #1547	; 0x60b
    10f8:	2070      	movs	r0, #112	; 0x70
    10fa:	f002 fb15 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    10fe:	490a      	ldr	r1, [pc, #40]	; (1128 <CONFIG_FPROTECT_BLOCK_SIZE+0x128>)
    1100:	4281      	cmp	r1, r0
    1102:	bfde      	ittt	le
    1104:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1108:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    110c:	bd10      	pople	{r4, pc}
    110e:	2800      	cmp	r0, #0
    1110:	bfbc      	itt	lt
    1112:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1116:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    111a:	bd10      	pop	{r4, pc}
    111c:	1e847fff 	.word	0x1e847fff
    1120:	07a12000 	.word	0x07a12000
    1124:	f85ee000 	.word	0xf85ee000
    1128:	1e848000 	.word	0x1e848000
    112c:	f8df c054 	ldr.w	ip, [pc, #84]	; 1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
    1130:	b510      	push	{r4, lr}
    1132:	2300      	movs	r3, #0
    1134:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    1138:	2807      	cmp	r0, #7
    113a:	d21e      	bcs.n	117a <CONFIG_FPROTECT_BLOCK_SIZE+0x17a>
    113c:	e8df f000 	tbb	[pc, r0]
    1140:	05050505 	.word	0x05050505
    1144:	00040404 	.word	0x00040404
    1148:	2301      	movs	r3, #1
    114a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    114e:	2b00      	cmp	r3, #0
    1150:	bf08      	it	eq
    1152:	bd10      	popeq	{r4, pc}
    1154:	480c      	ldr	r0, [pc, #48]	; (1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>)
    1156:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    115a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    115e:	2820      	cmp	r0, #32
    1160:	bf0e      	itee	eq
    1162:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    1166:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    116a:	7041      	strbne	r1, [r0, #1]
    116c:	2020      	movs	r0, #32
    116e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    1172:	7058      	strb	r0, [r3, #1]
    1174:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1178:	bd10      	pop	{r4, pc}
    117a:	f44f 7115 	mov.w	r1, #596	; 0x254
    117e:	2070      	movs	r0, #112	; 0x70
    1180:	f002 fad2 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1184:	20000cd4 	.word	0x20000cd4
    1188:	20000d54 	.word	0x20000d54
    118c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1190:	b083      	sub	sp, #12
    1192:	485c      	ldr	r0, [pc, #368]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    1194:	9904      	ldr	r1, [sp, #16]
    1196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    119a:	9001      	str	r0, [sp, #4]
    119c:	f890 4020 	ldrb.w	r4, [r0, #32]
    11a0:	9803      	ldr	r0, [sp, #12]
    11a2:	4625      	mov	r5, r4
    11a4:	2801      	cmp	r0, #1
    11a6:	bf18      	it	ne
    11a8:	2802      	cmpne	r0, #2
    11aa:	d005      	beq.n	11b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b8>
    11ac:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    11b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    11b4:	f002 fab8 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    11b8:	2700      	movs	r7, #0
    11ba:	2d20      	cmp	r5, #32
    11bc:	d04a      	beq.n	1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>
    11be:	4851      	ldr	r0, [pc, #324]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    11c0:	9100      	str	r1, [sp, #0]
    11c2:	2600      	movs	r6, #0
    11c4:	7f80      	ldrb	r0, [r0, #30]
    11c6:	2800      	cmp	r0, #0
    11c8:	bf08      	it	eq
    11ca:	2602      	moveq	r6, #2
    11cc:	f001 fbd6 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    11d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    11d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11d8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    11dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    11e0:	688a      	ldr	r2, [r1, #8]
    11e2:	68c9      	ldr	r1, [r1, #12]
    11e4:	1a12      	subs	r2, r2, r0
    11e6:	1a09      	subs	r1, r1, r0
    11e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    11ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    11f0:	4296      	cmp	r6, r2
    11f2:	bf98      	it	ls
    11f4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    11f8:	d201      	bcs.n	11fe <CONFIG_FPROTECT_BLOCK_SIZE+0x1fe>
    11fa:	4589      	cmp	r9, r1
    11fc:	d228      	bcs.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    11fe:	4a44      	ldr	r2, [pc, #272]	; (1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>)
    1200:	9900      	ldr	r1, [sp, #0]
    1202:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    1206:	4622      	mov	r2, r4
    1208:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    120c:	784c      	ldrb	r4, [r1, #1]
    120e:	2c20      	cmp	r4, #32
    1210:	d016      	beq.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
    1212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    1216:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    121a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    121e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1222:	eba8 0800 	sub.w	r8, r8, r0
    1226:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    122a:	ebac 0100 	sub.w	r1, ip, r0
    122e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1232:	4546      	cmp	r6, r8
    1234:	bf98      	it	ls
    1236:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    123a:	d2e4      	bcs.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    123c:	4589      	cmp	r9, r1
    123e:	d3e2      	bcc.n	1206 <CONFIG_FPROTECT_BLOCK_SIZE+0x206>
    1240:	2a20      	cmp	r2, #32
    1242:	d005      	beq.n	1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>
    1244:	2120      	movs	r1, #32
    1246:	2004      	movs	r0, #4
    1248:	9b00      	ldr	r3, [sp, #0]
    124a:	f7ff f901 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    124e:	4604      	mov	r4, r0
    1250:	42ac      	cmp	r4, r5
    1252:	d115      	bne.n	1280 <CONFIG_FPROTECT_BLOCK_SIZE+0x280>
    1254:	482f      	ldr	r0, [pc, #188]	; (1314 <CONFIG_FPROTECT_BLOCK_SIZE+0x314>)
    1256:	2800      	cmp	r0, #0
    1258:	bf18      	it	ne
    125a:	f3af 8000 	nopne.w
    125e:	f001 fb8d 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1262:	4c28      	ldr	r4, [pc, #160]	; (1304 <CONFIG_FPROTECT_BLOCK_SIZE+0x304>)
    1264:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    1268:	2920      	cmp	r1, #32
    126a:	d00d      	beq.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    126c:	68e1      	ldr	r1, [r4, #12]
    126e:	1c82      	adds	r2, r0, #2
    1270:	1a51      	subs	r1, r2, r1
    1272:	0209      	lsls	r1, r1, #8
    1274:	17ca      	asrs	r2, r1, #31
    1276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    127a:	1209      	asrs	r1, r1, #8
    127c:	2900      	cmp	r1, #0
    127e:	dd03      	ble.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
    1280:	b005      	add	sp, #20
    1282:	2000      	movs	r0, #0
    1284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1288:	2d20      	cmp	r5, #32
    128a:	d00d      	beq.n	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
    128c:	462a      	mov	r2, r5
    128e:	9903      	ldr	r1, [sp, #12]
    1290:	f7ff fb16 	bl	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
    1294:	b358      	cbz	r0, 12ee <CONFIG_FPROTECT_BLOCK_SIZE+0x2ee>
    1296:	9801      	ldr	r0, [sp, #4]
    1298:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    129c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    12a0:	b005      	add	sp, #20
    12a2:	2001      	movs	r0, #1
    12a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    12a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    12ac:	b118      	cbz	r0, 12b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b6>
    12ae:	f002 f881 	bl	33b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    12b2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    12b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    12ba:	b150      	cbz	r0, 12d2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d2>
    12bc:	4916      	ldr	r1, [pc, #88]	; (1318 <CONFIG_FPROTECT_BLOCK_SIZE+0x318>)
    12be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    12c2:	6008      	str	r0, [r1, #0]
    12c4:	2005      	movs	r0, #5
    12c6:	f001 fda7 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12ca:	f002 f8db 	bl	3484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    12ce:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    12d2:	2004      	movs	r0, #4
    12d4:	f001 fda0 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    12d8:	f001 fe06 	bl	2ee8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    12dc:	2020      	movs	r0, #32
    12de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    12e2:	480e      	ldr	r0, [pc, #56]	; (131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>)
    12e4:	6880      	ldr	r0, [r0, #8]
    12e6:	6007      	str	r7, [r0, #0]
    12e8:	480d      	ldr	r0, [pc, #52]	; (1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>)
    12ea:	6007      	str	r7, [r0, #0]
    12ec:	e7d8      	b.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
    12ee:	462a      	mov	r2, r5
    12f0:	2120      	movs	r1, #32
    12f2:	2004      	movs	r0, #4
    12f4:	9b04      	ldr	r3, [sp, #16]
    12f6:	f7ff f8ab 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    12fa:	b005      	add	sp, #20
    12fc:	2000      	movs	r0, #0
    12fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1302:	0000      	.short	0x0000
    1304:	20000d54 	.word	0x20000d54
    1308:	003fffff 	.word	0x003fffff
    130c:	200009d4 	.word	0x200009d4
    1310:	20000cd4 	.word	0x20000cd4
    1314:	00000000 	.word	0x00000000
    1318:	4001f508 	.word	0x4001f508
    131c:	20000010 	.word	0x20000010
    1320:	40000508 	.word	0x40000508

00001324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1324:	4906      	ldr	r1, [pc, #24]	; (1340 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    1326:	b510      	push	{r4, lr}
    1328:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    132c:	2a20      	cmp	r2, #32
    132e:	bf1c      	itt	ne
    1330:	7788      	strbne	r0, [r1, #30]
    1332:	bd10      	popne	{r4, pc}
    1334:	f240 31ea 	movw	r1, #1002	; 0x3ea
    1338:	2070      	movs	r0, #112	; 0x70
    133a:	f002 f9f5 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    133e:	0000      	.short	0x0000
    1340:	20000d54 	.word	0x20000d54

00001344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1348:	4e5b      	ldr	r6, [pc, #364]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    134a:	4681      	mov	r9, r0
    134c:	b085      	sub	sp, #20
    134e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1352:	468a      	mov	sl, r1
    1354:	2820      	cmp	r0, #32
    1356:	d04d      	beq.n	13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>
    1358:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    135c:	f106 040c 	add.w	r4, r6, #12
    1360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1364:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    1368:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    136c:	2020      	movs	r0, #32
    136e:	f88d 0000 	strb.w	r0, [sp]
    1372:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    1376:	aa03      	add	r2, sp, #12
    1378:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    137c:	a901      	add	r1, sp, #4
    137e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1382:	6930      	ldr	r0, [r6, #16]
    1384:	9002      	str	r0, [sp, #8]
    1386:	6830      	ldr	r0, [r6, #0]
    1388:	4448      	add	r0, r9
    138a:	f001 f9a1 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    138e:	68f8      	ldr	r0, [r7, #12]
    1390:	9901      	ldr	r1, [sp, #4]
    1392:	4a4a      	ldr	r2, [pc, #296]	; (14bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134>)
    1394:	4408      	add	r0, r1
    1396:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    139a:	4291      	cmp	r1, r2
    139c:	d82f      	bhi.n	13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
    139e:	68b9      	ldr	r1, [r7, #8]
    13a0:	1a41      	subs	r1, r0, r1
    13a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    13a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    13aa:	d228      	bcs.n	13fe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x76>
    13ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    13b0:	6060      	str	r0, [r4, #4]
    13b2:	4630      	mov	r0, r6
    13b4:	f884 a00c 	strb.w	sl, [r4, #12]
    13b8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    13bc:	46ea      	mov	sl, sp
    13be:	2d20      	cmp	r5, #32
    13c0:	bf1c      	itt	ne
    13c2:	493f      	ldrne	r1, [pc, #252]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    13c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    13c8:	d03c      	beq.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    13ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    13ce:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    13d2:	6860      	ldr	r0, [r4, #4]
    13d4:	68ba      	ldr	r2, [r7, #8]
    13d6:	4621      	mov	r1, r4
    13d8:	1a10      	subs	r0, r2, r0
    13da:	0200      	lsls	r0, r0, #8
    13dc:	17c2      	asrs	r2, r0, #31
    13de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    13e2:	f107 0608 	add.w	r6, r7, #8
    13e6:	1200      	asrs	r0, r0, #8
    13e8:	d41b      	bmi.n	1422 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a>
    13ea:	8970      	ldrh	r0, [r6, #10]
    13ec:	b350      	cbz	r0, 1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    13ee:	8948      	ldrh	r0, [r1, #10]
    13f0:	b148      	cbz	r0, 1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13f2:	e027      	b.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    13f4:	f640 317b 	movw	r1, #2939	; 0xb7b
    13f8:	2070      	movs	r0, #112	; 0x70
    13fa:	f002 f995 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    13fe:	b005      	add	sp, #20
    1400:	2001      	movs	r0, #1
    1402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1406:	4620      	mov	r0, r4
    1408:	f7ff fe56 	bl	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    140c:	f001 f944 	bl	2698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1410:	6831      	ldr	r1, [r6, #0]
    1412:	1a08      	subs	r0, r1, r0
    1414:	0200      	lsls	r0, r0, #8
    1416:	17c1      	asrs	r1, r0, #31
    1418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    141c:	1200      	asrs	r0, r0, #8
    141e:	2833      	cmp	r0, #51	; 0x33
    1420:	da10      	bge.n	1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>
    1422:	f88a 5000 	strb.w	r5, [sl]
    1426:	7d39      	ldrb	r1, [r7, #20]
    1428:	7b20      	ldrb	r0, [r4, #12]
    142a:	4281      	cmp	r1, r0
    142c:	d805      	bhi.n	143a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb2>
    142e:	9802      	ldr	r0, [sp, #8]
    1430:	6060      	str	r0, [r4, #4]
    1432:	b005      	add	sp, #20
    1434:	2002      	movs	r0, #2
    1436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    143a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    143e:	7845      	ldrb	r5, [r0, #1]
    1440:	2d20      	cmp	r5, #32
    1442:	d1c2      	bne.n	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
    1444:	2005      	movs	r0, #5
    1446:	f001 fce7 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    144a:	4c1b      	ldr	r4, [pc, #108]	; (14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>)
    144c:	f04f 30ff 	mov.w	r0, #4294967295
    1450:	60a0      	str	r0, [r4, #8]
    1452:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    1456:	f89d 2000 	ldrb.w	r2, [sp]
    145a:	2120      	movs	r1, #32
    145c:	2a20      	cmp	r2, #32
    145e:	bf13      	iteet	ne
    1460:	2005      	movne	r0, #5
    1462:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    1466:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    146a:	f7fe fff1 	blne	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    146e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1472:	4913      	ldr	r1, [pc, #76]	; (14c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x138>)
    1474:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    1478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    147c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    1480:	7048      	strb	r0, [r1, #1]
    1482:	6820      	ldr	r0, [r4, #0]
    1484:	4448      	add	r0, r9
    1486:	6020      	str	r0, [r4, #0]
    1488:	2001      	movs	r0, #1
    148a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    148e:	7e60      	ldrb	r0, [r4, #25]
    1490:	2801      	cmp	r0, #1
    1492:	d105      	bne.n	14a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x118>
    1494:	6920      	ldr	r0, [r4, #16]
    1496:	1e40      	subs	r0, r0, #1
    1498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    149c:	f001 fb0e 	bl	2abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    14a0:	f89d 0000 	ldrb.w	r0, [sp]
    14a4:	2820      	cmp	r0, #32
    14a6:	d003      	beq.n	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
    14a8:	4806      	ldr	r0, [pc, #24]	; (14c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c>)
    14aa:	7840      	ldrb	r0, [r0, #1]
    14ac:	f002 fa0c 	bl	38c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    14b0:	b005      	add	sp, #20
    14b2:	2000      	movs	r0, #0
    14b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14b8:	20000d54 	.word	0x20000d54
    14bc:	07a11f9c 	.word	0x07a11f9c
    14c0:	20000cd4 	.word	0x20000cd4
    14c4:	20000010 	.word	0x20000010

000014c8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    14c8:	4806      	ldr	r0, [pc, #24]	; (14e4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    14ca:	b510      	push	{r4, lr}
    14cc:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    14d0:	2920      	cmp	r1, #32
    14d2:	bf1c      	itt	ne
    14d4:	7e00      	ldrbne	r0, [r0, #24]
    14d6:	bd10      	popne	{r4, pc}
    14d8:	f640 3174 	movw	r1, #2932	; 0xb74
    14dc:	2070      	movs	r0, #112	; 0x70
    14de:	f002 f923 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14e2:	0000      	.short	0x0000
    14e4:	20000d54 	.word	0x20000d54

000014e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    14e8:	4602      	mov	r2, r0
    14ea:	4b14      	ldr	r3, [pc, #80]	; (153c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    14ec:	b510      	push	{r4, lr}
    14ee:	4408      	add	r0, r1
    14f0:	429a      	cmp	r2, r3
    14f2:	d904      	bls.n	14fe <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    14f4:	f240 6109 	movw	r1, #1545	; 0x609
    14f8:	2070      	movs	r0, #112	; 0x70
    14fa:	f002 f915 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14fe:	4a10      	ldr	r2, [pc, #64]	; (1540 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    1500:	4291      	cmp	r1, r2
    1502:	dd04      	ble.n	150e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    1504:	f240 610a 	movw	r1, #1546	; 0x60a
    1508:	2070      	movs	r0, #112	; 0x70
    150a:	f002 f90d 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    150e:	4a0d      	ldr	r2, [pc, #52]	; (1544 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    1510:	4291      	cmp	r1, r2
    1512:	da04      	bge.n	151e <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    1514:	f240 610b 	movw	r1, #1547	; 0x60b
    1518:	2070      	movs	r0, #112	; 0x70
    151a:	f002 f905 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    151e:	490a      	ldr	r1, [pc, #40]	; (1548 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    1520:	4281      	cmp	r1, r0
    1522:	bfde      	ittt	le
    1524:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1528:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    152c:	bd10      	pople	{r4, pc}
    152e:	2800      	cmp	r0, #0
    1530:	bfbc      	itt	lt
    1532:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1536:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    153a:	bd10      	pop	{r4, pc}
    153c:	1e847fff 	.word	0x1e847fff
    1540:	07a12000 	.word	0x07a12000
    1544:	f85ee000 	.word	0xf85ee000
    1548:	1e848000 	.word	0x1e848000

0000154c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    154c:	4a10      	ldr	r2, [pc, #64]	; (1590 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    154e:	1a0b      	subs	r3, r1, r0
    1550:	f102 0c01 	add.w	ip, r2, #1
    1554:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1558:	bf3c      	itt	cc
    155a:	4618      	movcc	r0, r3
    155c:	4770      	bxcc	lr
    155e:	b510      	push	{r4, lr}
    1560:	1a44      	subs	r4, r0, r1
    1562:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    1566:	bf3c      	itt	cc
    1568:	4618      	movcc	r0, r3
    156a:	bd10      	popcc	{r4, pc}
    156c:	429a      	cmp	r2, r3
    156e:	d203      	bcs.n	1578 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1570:	1a10      	subs	r0, r2, r0
    1572:	4408      	add	r0, r1
    1574:	1c40      	adds	r0, r0, #1
    1576:	bd10      	pop	{r4, pc}
    1578:	42a2      	cmp	r2, r4
    157a:	d204      	bcs.n	1586 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    157c:	1a51      	subs	r1, r2, r1
    157e:	4408      	add	r0, r1
    1580:	1c40      	adds	r0, r0, #1
    1582:	4240      	negs	r0, r0
    1584:	bd10      	pop	{r4, pc}
    1586:	f640 310c 	movw	r1, #2828	; 0xb0c
    158a:	2070      	movs	r0, #112	; 0x70
    158c:	f002 f8cc 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1590:	1e847fff 	.word	0x1e847fff

00001594 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1594:	490e      	ldr	r1, [pc, #56]	; (15d0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1596:	b510      	push	{r4, lr}
    1598:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    159c:	2820      	cmp	r0, #32
    159e:	d012      	beq.n	15c6 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    15a0:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    15a4:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    15a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15ac:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    15b0:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    15b4:	6840      	ldr	r0, [r0, #4]
    15b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    15ba:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    15be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    15c2:	2104      	movs	r1, #4
    15c4:	4710      	bx	r2
    15c6:	f640 01bc 	movw	r1, #2236	; 0x8bc
    15ca:	2070      	movs	r0, #112	; 0x70
    15cc:	f002 f8ac 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15d0:	20000d54 	.word	0x20000d54

000015d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    15d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15d6:	4d6d      	ldr	r5, [pc, #436]	; (178c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    15d8:	496d      	ldr	r1, [pc, #436]	; (1790 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    15da:	2601      	movs	r6, #1
    15dc:	f505 7460 	add.w	r4, r5, #896	; 0x380
    15e0:	2808      	cmp	r0, #8
    15e2:	d273      	bcs.n	16cc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    15e4:	e8df f000 	tbb	[pc, r0]
    15e8:	af9d6704 	.word	0xaf9d6704
    15ec:	b9b444cd 	.word	0xb9b444cd
    15f0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    15f4:	b918      	cbnz	r0, 15fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    15f6:	f001 fef9 	bl	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    15fa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    15fe:	8ae0      	ldrh	r0, [r4, #22]
    1600:	b110      	cbz	r0, 1608 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    1602:	f002 f82d 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1606:	b188      	cbz	r0, 162c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    1608:	f7ff fcbe 	bl	f88 <CONFIG_ISR_STACK_SIZE+0x788>
    160c:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1610:	68a1      	ldr	r1, [r4, #8]
    1612:	f1b1 3fff 	cmp.w	r1, #4294967295
    1616:	d005      	beq.n	1624 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1618:	2301      	movs	r3, #1
    161a:	2203      	movs	r2, #3
    161c:	2005      	movs	r0, #5
    161e:	f001 fb33 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1622:	b140      	cbz	r0, 1636 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1624:	7e60      	ldrb	r0, [r4, #25]
    1626:	2801      	cmp	r0, #1
    1628:	d110      	bne.n	164c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    162a:	e009      	b.n	1640 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    162c:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1630:	2070      	movs	r0, #112	; 0x70
    1632:	f002 f879 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1636:	f640 0175 	movw	r1, #2165	; 0x875
    163a:	2070      	movs	r0, #112	; 0x70
    163c:	f002 f874 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1640:	6920      	ldr	r0, [r4, #16]
    1642:	1e40      	subs	r0, r0, #1
    1644:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1648:	f001 fa38 	bl	2abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    164c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1650:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1654:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1658:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    165c:	6840      	ldr	r0, [r0, #4]
    165e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1662:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1666:	b001      	add	sp, #4
    1668:	2101      	movs	r1, #1
    166a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    166e:	4710      	bx	r2
    1670:	f7ff fc8a 	bl	f88 <CONFIG_ISR_STACK_SIZE+0x788>
    1674:	f04f 30ff 	mov.w	r0, #4294967295
    1678:	60a0      	str	r0, [r4, #8]
    167a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    167e:	f88d 0000 	strb.w	r0, [sp]
    1682:	f89d 0000 	ldrb.w	r0, [sp]
    1686:	b188      	cbz	r0, 16ac <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1688:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    168c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1690:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1694:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1698:	6840      	ldr	r0, [r0, #4]
    169a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    169e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    16a2:	b001      	add	sp, #4
    16a4:	2106      	movs	r1, #6
    16a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    16aa:	4710      	bx	r2
    16ac:	f640 0186 	movw	r1, #2182	; 0x886
    16b0:	2070      	movs	r0, #112	; 0x70
    16b2:	f002 f839 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16b6:	f7ff fc67 	bl	f88 <CONFIG_ISR_STACK_SIZE+0x788>
    16ba:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    16be:	f001 ffcf 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    16c2:	b120      	cbz	r0, 16ce <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    16c4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    16c8:	b130      	cbz	r0, 16d8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    16ca:	e009      	b.n	16e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    16cc:	e059      	b.n	1782 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    16ce:	f640 0196 	movw	r1, #2198	; 0x896
    16d2:	2070      	movs	r0, #112	; 0x70
    16d4:	f002 f828 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16d8:	f001 fe88 	bl	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    16dc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    16e0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    16e4:	b158      	cbz	r0, 16fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    16e6:	492b      	ldr	r1, [pc, #172]	; (1794 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    16e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    16ec:	6008      	str	r0, [r1, #0]
    16ee:	2005      	movs	r0, #5
    16f0:	f001 fb92 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    16f4:	f001 fec6 	bl	3484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    16f8:	2000      	movs	r0, #0
    16fa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    16fe:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1702:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    170a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    170e:	6840      	ldr	r0, [r0, #4]
    1710:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1714:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1718:	b001      	add	sp, #4
    171a:	2100      	movs	r1, #0
    171c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1720:	4710      	bx	r2
    1722:	f001 fc2b 	bl	2f7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1726:	8ae0      	ldrh	r0, [r4, #22]
    1728:	b110      	cbz	r0, 1730 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    172a:	f001 ff99 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    172e:	b128      	cbz	r0, 173c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1730:	4819      	ldr	r0, [pc, #100]	; (1798 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    1732:	7800      	ldrb	r0, [r0, #0]
    1734:	2803      	cmp	r0, #3
    1736:	bf08      	it	eq
    1738:	7766      	strbeq	r6, [r4, #29]
    173a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    173c:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1740:	2070      	movs	r0, #112	; 0x70
    1742:	f001 fff1 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1746:	4815      	ldr	r0, [pc, #84]	; (179c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1748:	6006      	str	r6, [r0, #0]
    174a:	6888      	ldr	r0, [r1, #8]
    174c:	6006      	str	r6, [r0, #0]
    174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1750:	7808      	ldrb	r0, [r1, #0]
    1752:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1756:	f002 b8b7 	b.w	38c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    175a:	f7ff fc15 	bl	f88 <CONFIG_ISR_STACK_SIZE+0x788>
    175e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1762:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1766:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    176a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    176e:	6840      	ldr	r0, [r0, #4]
    1770:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1774:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1778:	b001      	add	sp, #4
    177a:	2105      	movs	r1, #5
    177c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1780:	4710      	bx	r2
    1782:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1786:	2070      	movs	r0, #112	; 0x70
    1788:	f001 ffce 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    178c:	200009d4 	.word	0x200009d4
    1790:	20000010 	.word	0x20000010
    1794:	4001f508 	.word	0x4001f508
    1798:	20000012 	.word	0x20000012
    179c:	40000508 	.word	0x40000508

000017a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
    17a0:	4803      	ldr	r0, [pc, #12]	; (17b0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI+0x10>)
    17a2:	b510      	push	{r4, lr}
    17a4:	7840      	ldrb	r0, [r0, #1]
    17a6:	f009 ff4f 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    17aa:	b280      	uxth	r0, r0
    17ac:	bd10      	pop	{r4, pc}
    17ae:	0000      	.short	0x0000
    17b0:	20000012 	.word	0x20000012

000017b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    17b4:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17b8:	4682      	mov	sl, r0
    17ba:	48dc      	ldr	r0, [pc, #880]	; (1b2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    17bc:	b08b      	sub	sp, #44	; 0x2c
    17be:	6800      	ldr	r0, [r0, #0]
    17c0:	4ddb      	ldr	r5, [pc, #876]	; (1b30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    17c2:	05c0      	lsls	r0, r0, #23
    17c4:	0dc0      	lsrs	r0, r0, #23
    17c6:	d00e      	beq.n	17e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    17c8:	3810      	subs	r0, #16
    17ca:	b240      	sxtb	r0, r0
    17cc:	2800      	cmp	r0, #0
    17ce:	bfb8      	it	lt
    17d0:	f000 000f 	andlt.w	r0, r0, #15
    17d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    17d8:	bfac      	ite	ge
    17da:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    17de:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    17e2:	0940      	lsrs	r0, r0, #5
    17e4:	d00d      	beq.n	1802 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    17e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    17e8:	f04f 0b00 	mov.w	fp, #0
    17ec:	7800      	ldrb	r0, [r0, #0]
    17ee:	2800      	cmp	r0, #0
    17f0:	bf18      	it	ne
    17f2:	2801      	cmpne	r0, #1
    17f4:	d018      	beq.n	1828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    17f6:	f240 714f 	movw	r1, #1871	; 0x74f
    17fa:	f04f 0070 	mov.w	r0, #112	; 0x70
    17fe:	f001 ff93 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1802:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1806:	f04f 0b01 	mov.w	fp, #1
    180a:	2820      	cmp	r0, #32
    180c:	d007      	beq.n	181e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    180e:	980c      	ldr	r0, [sp, #48]	; 0x30
    1810:	7800      	ldrb	r0, [r0, #0]
    1812:	b148      	cbz	r0, 1828 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    1814:	f240 714b 	movw	r1, #1867	; 0x74b
    1818:	2070      	movs	r0, #112	; 0x70
    181a:	f001 ff85 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    181e:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    1822:	2070      	movs	r0, #112	; 0x70
    1824:	f001 ff80 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1828:	4cc2      	ldr	r4, [pc, #776]	; (1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    182a:	b124      	cbz	r4, 1836 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    182c:	2100      	movs	r1, #0
    182e:	f240 7052 	movw	r0, #1874	; 0x752
    1832:	f3af 8000 	nop.w
    1836:	49c0      	ldr	r1, [pc, #768]	; (1b38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    1838:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    183c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1840:	f04f 0801 	mov.w	r8, #1
    1844:	9000      	str	r0, [sp, #0]
    1846:	b124      	cbz	r4, 1852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1848:	2100      	movs	r1, #0
    184a:	f240 705a 	movw	r0, #1882	; 0x75a
    184e:	f3af 8000 	nop.w
    1852:	f1b8 0f00 	cmp.w	r8, #0
    1856:	d009      	beq.n	186c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1858:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    185c:	f04f 0900 	mov.w	r9, #0
    1860:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1864:	f1bb 0f00 	cmp.w	fp, #0
    1868:	d007      	beq.n	187a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    186a:	e032      	b.n	18d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    186c:	48b3      	ldr	r0, [pc, #716]	; (1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    186e:	2800      	cmp	r0, #0
    1870:	bf18      	it	ne
    1872:	f3af 8000 	nopne.w
    1876:	b662      	cpsie	i
    1878:	e7ee      	b.n	1858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    187a:	4637      	mov	r7, r6
    187c:	2001      	movs	r0, #1
    187e:	ea20 0607 	bic.w	r6, r0, r7
    1882:	48af      	ldr	r0, [pc, #700]	; (1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1884:	2240      	movs	r2, #64	; 0x40
    1886:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    188a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    188e:	f00a f849 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1892:	b124      	cbz	r4, 189e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1894:	2100      	movs	r1, #0
    1896:	f240 50cd 	movw	r0, #1485	; 0x5cd
    189a:	f3af 8000 	nop.w
    189e:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    18a2:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    18a6:	6a09      	ldr	r1, [r1, #32]
    18a8:	6201      	str	r1, [r0, #32]
    18aa:	b124      	cbz	r4, 18b6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    18ac:	2100      	movs	r1, #0
    18ae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    18b2:	f3af 8000 	nop.w
    18b6:	b124      	cbz	r4, 18c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    18b8:	2100      	movs	r1, #0
    18ba:	f240 7064 	movw	r0, #1892	; 0x764
    18be:	f3af 8000 	nop.w
    18c2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    18c6:	f88d 0004 	strb.w	r0, [sp, #4]
    18ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    18ce:	2800      	cmp	r0, #0
    18d0:	d1b9      	bne.n	1846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    18d2:	b124      	cbz	r4, 18de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    18d4:	2100      	movs	r1, #0
    18d6:	f240 706e 	movw	r0, #1902	; 0x76e
    18da:	f3af 8000 	nop.w
    18de:	f001 f84d 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    18e2:	4680      	mov	r8, r0
    18e4:	4633      	mov	r3, r6
    18e6:	aa06      	add	r2, sp, #24
    18e8:	990c      	ldr	r1, [sp, #48]	; 0x30
    18ea:	f7ff fa79 	bl	de0 <CONFIG_ISR_STACK_SIZE+0x5e0>
    18ee:	b124      	cbz	r4, 18fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    18f0:	2100      	movs	r1, #0
    18f2:	f240 7075 	movw	r0, #1909	; 0x775
    18f6:	f3af 8000 	nop.w
    18fa:	4991      	ldr	r1, [pc, #580]	; (1b40 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    18fc:	a806      	add	r0, sp, #24
    18fe:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1902:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1906:	2901      	cmp	r1, #1
    1908:	bf18      	it	ne
    190a:	2902      	cmpne	r1, #2
    190c:	d13c      	bne.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    190e:	9906      	ldr	r1, [sp, #24]
    1910:	9b07      	ldr	r3, [sp, #28]
    1912:	eba1 0108 	sub.w	r1, r1, r8
    1916:	4a8b      	ldr	r2, [pc, #556]	; (1b44 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1918:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    191c:	eba3 0308 	sub.w	r3, r3, r8
    1920:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1924:	2902      	cmp	r1, #2
    1926:	d371      	bcc.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1928:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    192c:	d26e      	bcs.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    192e:	429a      	cmp	r2, r3
    1930:	d36c      	bcc.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1932:	f04f 0901 	mov.w	r9, #1
    1936:	ab01      	add	r3, sp, #4
    1938:	aa05      	add	r2, sp, #20
    193a:	4631      	mov	r1, r6
    193c:	f7fe ff40 	bl	7c0 <__data_size+0x13c>
    1940:	2800      	cmp	r0, #0
    1942:	d06b      	beq.n	1a1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1944:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1948:	f89d 2004 	ldrb.w	r2, [sp, #4]
    194c:	4633      	mov	r3, r6
    194e:	428a      	cmp	r2, r1
    1950:	d068      	beq.n	1a24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1952:	2005      	movs	r0, #5
    1954:	f7fe fd7c 	bl	450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1958:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    195c:	7048      	strb	r0, [r1, #1]
    195e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1962:	2820      	cmp	r0, #32
    1964:	bf03      	ittte	eq
    1966:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    196a:	f880 a020 	strbeq.w	sl, [r0, #32]
    196e:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1972:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1976:	bf18      	it	ne
    1978:	f880 a001 	strbne.w	sl, [r0, #1]
    197c:	4632      	mov	r2, r6
    197e:	4651      	mov	r1, sl
    1980:	f05f 0003 	movs.w	r0, #3
    1984:	f7ff fbd2 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1988:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    198c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1990:	f88d 0004 	strb.w	r0, [sp, #4]
    1994:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1998:	b124      	cbz	r4, 19a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    199a:	2100      	movs	r1, #0
    199c:	f240 707c 	movw	r0, #1916	; 0x77c
    19a0:	f3af 8000 	nop.w
    19a4:	4868      	ldr	r0, [pc, #416]	; (1b48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    19a6:	2800      	cmp	r0, #0
    19a8:	bf18      	it	ne
    19aa:	f3af 8000 	nopne.w
    19ae:	f3ef 8810 	mrs	r8, PRIMASK
    19b2:	b672      	cpsid	i
    19b4:	b124      	cbz	r4, 19c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    19b6:	2100      	movs	r1, #0
    19b8:	f240 7082 	movw	r0, #1922	; 0x782
    19bc:	f3af 8000 	nop.w
    19c0:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    19c4:	f88d 0004 	strb.w	r0, [sp, #4]
    19c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    19cc:	2800      	cmp	r0, #0
    19ce:	f47f af3a 	bne.w	1846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    19d2:	b124      	cbz	r4, 19de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    19d4:	2100      	movs	r1, #0
    19d6:	f240 708a 	movw	r0, #1930	; 0x78a
    19da:	f3af 8000 	nop.w
    19de:	f10d 0e18 	add.w	lr, sp, #24
    19e2:	9800      	ldr	r0, [sp, #0]
    19e4:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    19e8:	f100 0008 	add.w	r0, r0, #8
    19ec:	f1b9 0f00 	cmp.w	r9, #0
    19f0:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    19f4:	d044      	beq.n	1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    19f6:	b124      	cbz	r4, 1a02 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    19f8:	2100      	movs	r1, #0
    19fa:	f240 7097 	movw	r0, #1943	; 0x797
    19fe:	f3af 8000 	nop.w
    1a02:	f1bb 0f00 	cmp.w	fp, #0
    1a06:	d12c      	bne.n	1a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a08:	e016      	b.n	1a38 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1a0a:	e7ff      	b.n	1a0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1a0c:	4632      	mov	r2, r6
    1a0e:	4651      	mov	r1, sl
    1a10:	2004      	movs	r0, #4
    1a12:	f7ff fb8b 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1a16:	f04f 0901 	mov.w	r9, #1
    1a1a:	e7b5      	b.n	1988 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1a1c:	4632      	mov	r2, r6
    1a1e:	4651      	mov	r1, sl
    1a20:	2004      	movs	r0, #4
    1a22:	e7af      	b.n	1984 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1a24:	2920      	cmp	r1, #32
    1a26:	bf19      	ittee	ne
    1a28:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1a2c:	7840      	ldrbne	r0, [r0, #1]
    1a2e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1a32:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1a36:	e78f      	b.n	1958 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1a38:	b19f      	cbz	r7, 1a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a3a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1a3e:	2820      	cmp	r0, #32
    1a40:	d10f      	bne.n	1a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a42:	b124      	cbz	r4, 1a4e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1a44:	2100      	movs	r1, #0
    1a46:	f240 709c 	movw	r0, #1948	; 0x79c
    1a4a:	f3af 8000 	nop.w
    1a4e:	4631      	mov	r1, r6
    1a50:	2002      	movs	r0, #2
    1a52:	f7ff fb9b 	bl	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    1a56:	b920      	cbnz	r0, 1a62 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1a58:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a5a:	7800      	ldrb	r0, [r0, #0]
    1a5c:	b3f0      	cbz	r0, 1adc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1a5e:	2801      	cmp	r0, #1
    1a60:	d04c      	beq.n	1afc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1a62:	b124      	cbz	r4, 1a6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1a64:	2100      	movs	r1, #0
    1a66:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1a6a:	f3af 8000 	nop.w
    1a6e:	f1bb 0f00 	cmp.w	fp, #0
    1a72:	bf18      	it	ne
    1a74:	2001      	movne	r0, #1
    1a76:	d04a      	beq.n	1b0e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1a78:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1a7c:	f04f 0901 	mov.w	r9, #1
    1a80:	b124      	cbz	r4, 1a8c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1a82:	2100      	movs	r1, #0
    1a84:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1a88:	f3af 8000 	nop.w
    1a8c:	f1b8 0f00 	cmp.w	r8, #0
    1a90:	d045      	beq.n	1b1e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1a92:	b124      	cbz	r4, 1a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1a94:	2100      	movs	r1, #0
    1a96:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1a9a:	f3af 8000 	nop.w
    1a9e:	f1b9 0f00 	cmp.w	r9, #0
    1aa2:	d011      	beq.n	1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1aa4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1aa8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1aac:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1ab0:	2820      	cmp	r0, #32
    1ab2:	d009      	beq.n	1ac8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1ab4:	b124      	cbz	r4, 1ac0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1ab6:	2100      	movs	r1, #0
    1ab8:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1abc:	f3af 8000 	nop.w
    1ac0:	4822      	ldr	r0, [pc, #136]	; (1b4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1ac2:	7840      	ldrb	r0, [r0, #1]
    1ac4:	f001 ff00 	bl	38c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ac8:	b124      	cbz	r4, 1ad4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1aca:	2100      	movs	r1, #0
    1acc:	f240 70da 	movw	r0, #2010	; 0x7da
    1ad0:	f3af 8000 	nop.w
    1ad4:	b00d      	add	sp, #52	; 0x34
    1ad6:	4648      	mov	r0, r9
    1ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1adc:	e7ff      	b.n	1ade <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1ade:	b124      	cbz	r4, 1aea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1ae0:	2100      	movs	r1, #0
    1ae2:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1ae6:	f3af 8000 	nop.w
    1aea:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1aee:	4651      	mov	r1, sl
    1af0:	2004      	movs	r0, #4
    1af2:	f7ff fb1b 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1af6:	f04f 0901 	mov.w	r9, #1
    1afa:	e7c1      	b.n	1a80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1afc:	2c00      	cmp	r4, #0
    1afe:	f43f aea2 	beq.w	1846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b02:	2100      	movs	r1, #0
    1b04:	f240 70af 	movw	r0, #1967	; 0x7af
    1b08:	f3af 8000 	nop.w
    1b0c:	e69b      	b.n	1846 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1b0e:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1b12:	2001      	movs	r0, #1
    1b14:	ea20 0101 	bic.w	r1, r0, r1
    1b18:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1b1c:	e7ac      	b.n	1a78 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1b1e:	4807      	ldr	r0, [pc, #28]	; (1b3c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1b20:	2800      	cmp	r0, #0
    1b22:	bf18      	it	ne
    1b24:	f3af 8000 	nopne.w
    1b28:	b662      	cpsie	i
    1b2a:	e7b2      	b.n	1a92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1b2c:	e000ed04 	.word	0xe000ed04
    1b30:	20000d54 	.word	0x20000d54
    1b34:	00000000 	.word	0x00000000
    1b38:	200009d4 	.word	0x200009d4
    1b3c:	00000000 	.word	0x00000000
    1b40:	20000cd4 	.word	0x20000cd4
    1b44:	003fffff 	.word	0x003fffff
    1b48:	00000000 	.word	0x00000000
    1b4c:	20000010 	.word	0x20000010

00001b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1b50:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b54:	48a5      	ldr	r0, [pc, #660]	; (1dec <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>)
    1b56:	b08c      	sub	sp, #48	; 0x30
    1b58:	6800      	ldr	r0, [r0, #0]
    1b5a:	05c0      	lsls	r0, r0, #23
    1b5c:	0dc0      	lsrs	r0, r0, #23
    1b5e:	d011      	beq.n	1b84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    1b60:	3810      	subs	r0, #16
    1b62:	b240      	sxtb	r0, r0
    1b64:	2800      	cmp	r0, #0
    1b66:	bfb8      	it	lt
    1b68:	f000 000f 	andlt.w	r0, r0, #15
    1b6c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1b70:	bfac      	ite	ge
    1b72:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1b76:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1b7a:	0940      	lsrs	r0, r0, #5
    1b7c:	bf08      	it	eq
    1b7e:	f04f 0901 	moveq.w	r9, #1
    1b82:	d001      	beq.n	1b88 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    1b84:	f04f 0900 	mov.w	r9, #0
    1b88:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b8a:	7800      	ldrb	r0, [r0, #0]
    1b8c:	2800      	cmp	r0, #0
    1b8e:	f04f 0000 	mov.w	r0, #0
    1b92:	bf1c      	itt	ne
    1b94:	b00d      	addne	sp, #52	; 0x34
    1b96:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b9a:	f8df a254 	ldr.w	sl, [pc, #596]	; 1df0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa4>
    1b9e:	4d95      	ldr	r5, [pc, #596]	; (1df4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa8>)
    1ba0:	4c95      	ldr	r4, [pc, #596]	; (1df8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xac>)
    1ba2:	f04f 0b00 	mov.w	fp, #0
    1ba6:	900b      	str	r0, [sp, #44]	; 0x2c
    1ba8:	b125      	cbz	r5, 1bb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    1baa:	2100      	movs	r1, #0
    1bac:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1bb0:	f3af 8000 	nop.w
    1bb4:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1bb8:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1bbc:	f04f 0800 	mov.w	r8, #0
    1bc0:	b125      	cbz	r5, 1bcc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    1bc2:	2100      	movs	r1, #0
    1bc4:	f240 605d 	movw	r0, #1629	; 0x65d
    1bc8:	f3af 8000 	nop.w
    1bcc:	f1b9 0f00 	cmp.w	r9, #0
    1bd0:	d11d      	bne.n	1c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1bd2:	4637      	mov	r7, r6
    1bd4:	2001      	movs	r0, #1
    1bd6:	ea20 0607 	bic.w	r6, r0, r7
    1bda:	4888      	ldr	r0, [pc, #544]	; (1dfc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb0>)
    1bdc:	2240      	movs	r2, #64	; 0x40
    1bde:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1be2:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1be6:	f009 fe9d 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1bea:	b125      	cbz	r5, 1bf6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    1bec:	2100      	movs	r1, #0
    1bee:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1bf2:	f3af 8000 	nop.w
    1bf6:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1bfa:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1bfe:	6a09      	ldr	r1, [r1, #32]
    1c00:	6201      	str	r1, [r0, #32]
    1c02:	b125      	cbz	r5, 1c0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    1c04:	2100      	movs	r1, #0
    1c06:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1c0a:	f3af 8000 	nop.w
    1c0e:	b125      	cbz	r5, 1c1a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    1c10:	2100      	movs	r1, #0
    1c12:	f240 6065 	movw	r0, #1637	; 0x665
    1c16:	f3af 8000 	nop.w
    1c1a:	f000 feaf 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1c1e:	4607      	mov	r7, r0
    1c20:	4633      	mov	r3, r6
    1c22:	466a      	mov	r2, sp
    1c24:	990c      	ldr	r1, [sp, #48]	; 0x30
    1c26:	f7ff f8db 	bl	de0 <CONFIG_ISR_STACK_SIZE+0x5e0>
    1c2a:	b125      	cbz	r5, 1c36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    1c2c:	2100      	movs	r1, #0
    1c2e:	f240 606b 	movw	r0, #1643	; 0x66b
    1c32:	f3af 8000 	nop.w
    1c36:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1c3a:	2820      	cmp	r0, #32
    1c3c:	d014      	beq.n	1c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1c3e:	6920      	ldr	r0, [r4, #16]
    1c40:	9900      	ldr	r1, [sp, #0]
    1c42:	1a09      	subs	r1, r1, r0
    1c44:	0209      	lsls	r1, r1, #8
    1c46:	17ca      	asrs	r2, r1, #31
    1c48:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1c4c:	1209      	asrs	r1, r1, #8
    1c4e:	d50b      	bpl.n	1c68 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    1c50:	e9dd 2100 	ldrd	r2, r1, [sp]
    1c54:	1a89      	subs	r1, r1, r2
    1c56:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1c5a:	4408      	add	r0, r1
    1c5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c60:	e9cd 2000 	strd	r2, r0, [sp]
    1c64:	f04f 0801 	mov.w	r8, #1
    1c68:	b14d      	cbz	r5, 1c7e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    1c6a:	2100      	movs	r1, #0
    1c6c:	f240 6075 	movw	r0, #1653	; 0x675
    1c70:	f3af 8000 	nop.w
    1c74:	2100      	movs	r1, #0
    1c76:	f240 607b 	movw	r0, #1659	; 0x67b
    1c7a:	f3af 8000 	nop.w
    1c7e:	9800      	ldr	r0, [sp, #0]
    1c80:	9901      	ldr	r1, [sp, #4]
    1c82:	1bc0      	subs	r0, r0, r7
    1c84:	1bc9      	subs	r1, r1, r7
    1c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c8a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1c8e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1c92:	d205      	bcs.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c94:	458a      	cmp	sl, r1
    1c96:	d303      	bcc.n	1ca0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    1c98:	f1b9 0f00 	cmp.w	r9, #0
    1c9c:	d10c      	bne.n	1cb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    1c9e:	e003      	b.n	1ca8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    1ca0:	f1b9 0f00 	cmp.w	r9, #0
    1ca4:	d038      	beq.n	1d18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    1ca6:	e094      	b.n	1dd2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1ca8:	4633      	mov	r3, r6
    1caa:	463a      	mov	r2, r7
    1cac:	4669      	mov	r1, sp
    1cae:	4854      	ldr	r0, [pc, #336]	; (1e00 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>)
    1cb0:	f7fe fc0a 	bl	4c8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x54>
    1cb4:	ea48 0800 	orr.w	r8, r8, r0
    1cb8:	f1b8 0f00 	cmp.w	r8, #0
    1cbc:	d022      	beq.n	1d04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    1cbe:	9800      	ldr	r0, [sp, #0]
    1cc0:	f009 fcc2 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1cc4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1cc8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1ccc:	4b4d      	ldr	r3, [pc, #308]	; (1e04 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1cce:	4411      	add	r1, r2
    1cd0:	1c49      	adds	r1, r1, #1
    1cd2:	1842      	adds	r2, r0, r1
    1cd4:	4298      	cmp	r0, r3
    1cd6:	d841      	bhi.n	1d5c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1cd8:	4849      	ldr	r0, [pc, #292]	; (1e00 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>)
    1cda:	4281      	cmp	r1, r0
    1cdc:	dc5a      	bgt.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1cde:	4240      	negs	r0, r0
    1ce0:	4281      	cmp	r1, r0
    1ce2:	db5f      	blt.n	1da4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x58>
    1ce4:	1c58      	adds	r0, r3, #1
    1ce6:	4290      	cmp	r0, r2
    1ce8:	bfdc      	itt	le
    1cea:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1cee:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1cf2:	dd05      	ble.n	1d00 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    1cf4:	2a00      	cmp	r2, #0
    1cf6:	bfbc      	itt	lt
    1cf8:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1cfc:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1d00:	980c      	ldr	r0, [sp, #48]	; 0x30
    1d02:	60c2      	str	r2, [r0, #12]
    1d04:	2001      	movs	r0, #1
    1d06:	900b      	str	r0, [sp, #44]	; 0x2c
    1d08:	2d00      	cmp	r5, #0
    1d0a:	d062      	beq.n	1dd2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1d0c:	2100      	movs	r1, #0
    1d0e:	f240 608e 	movw	r0, #1678	; 0x68e
    1d12:	f3af 8000 	nop.w
    1d16:	e05c      	b.n	1dd2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1d18:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1d1c:	aa08      	add	r2, sp, #32
    1d1e:	a907      	add	r1, sp, #28
    1d20:	f000 fcd6 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1d24:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1d28:	2820      	cmp	r0, #32
    1d2a:	d01c      	beq.n	1d66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a>
    1d2c:	6920      	ldr	r0, [r4, #16]
    1d2e:	1d40      	adds	r0, r0, #5
    1d30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1d34:	e9dd 2100 	ldrd	r2, r1, [sp]
    1d38:	1a89      	subs	r1, r1, r2
    1d3a:	4401      	add	r1, r0
    1d3c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1d40:	e9cd 0100 	strd	r0, r1, [sp]
    1d44:	f009 fc80 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1d48:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1d4c:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1d50:	4b2c      	ldr	r3, [pc, #176]	; (1e04 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb8>)
    1d52:	4411      	add	r1, r2
    1d54:	1c4a      	adds	r2, r1, #1
    1d56:	1881      	adds	r1, r0, r2
    1d58:	4298      	cmp	r0, r3
    1d5a:	d918      	bls.n	1d8e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42>
    1d5c:	f240 6109 	movw	r1, #1545	; 0x609
    1d60:	2070      	movs	r0, #112	; 0x70
    1d62:	f001 fce1 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d66:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1d6a:	f107 0609 	add.w	r6, r7, #9
    1d6e:	b120      	cbz	r0, 1d7a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e>
    1d70:	f001 fc76 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1d74:	2800      	cmp	r0, #0
    1d76:	bf08      	it	eq
    1d78:	3632      	addeq	r6, #50	; 0x32
    1d7a:	4823      	ldr	r0, [pc, #140]	; (1e08 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xbc>)
    1d7c:	7841      	ldrb	r1, [r0, #1]
    1d7e:	9807      	ldr	r0, [sp, #28]
    1d80:	4281      	cmp	r1, r0
    1d82:	bf84      	itt	hi
    1d84:	1a08      	subhi	r0, r1, r0
    1d86:	4406      	addhi	r6, r0
    1d88:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1d8c:	e7d2      	b.n	1d34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    1d8e:	481c      	ldr	r0, [pc, #112]	; (1e00 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb4>)
    1d90:	4282      	cmp	r2, r0
    1d92:	dd04      	ble.n	1d9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1d94:	f240 610a 	movw	r1, #1546	; 0x60a
    1d98:	2070      	movs	r0, #112	; 0x70
    1d9a:	f001 fcc5 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d9e:	481b      	ldr	r0, [pc, #108]	; (1e0c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>)
    1da0:	4282      	cmp	r2, r0
    1da2:	da04      	bge.n	1dae <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x62>
    1da4:	f240 610b 	movw	r1, #1547	; 0x60b
    1da8:	2070      	movs	r0, #112	; 0x70
    1daa:	f001 fcbd 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dae:	4818      	ldr	r0, [pc, #96]	; (1e10 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>)
    1db0:	4288      	cmp	r0, r1
    1db2:	bfdc      	itt	le
    1db4:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1db8:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1dbc:	dd05      	ble.n	1dca <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7e>
    1dbe:	2900      	cmp	r1, #0
    1dc0:	bfbc      	itt	lt
    1dc2:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1dc6:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1dca:	980c      	ldr	r0, [sp, #48]	; 0x30
    1dcc:	60c1      	str	r1, [r0, #12]
    1dce:	2001      	movs	r0, #1
    1dd0:	900b      	str	r0, [sp, #44]	; 0x2c
    1dd2:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1dd6:	f88d 0010 	strb.w	r0, [sp, #16]
    1dda:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1dde:	2800      	cmp	r0, #0
    1de0:	f47f aee2 	bne.w	1ba8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    1de4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1de6:	b00d      	add	sp, #52	; 0x34
    1de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dec:	e000ed04 	.word	0xe000ed04
    1df0:	003fffff 	.word	0x003fffff
    1df4:	00000000 	.word	0x00000000
    1df8:	20000d54 	.word	0x20000d54
    1dfc:	20000cd4 	.word	0x20000cd4
    1e00:	07a12000 	.word	0x07a12000
    1e04:	1e847fff 	.word	0x1e847fff
    1e08:	20000012 	.word	0x20000012
    1e0c:	f85ee000 	.word	0xf85ee000
    1e10:	1e848000 	.word	0x1e848000

00001e14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1e14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e18:	4d88      	ldr	r5, [pc, #544]	; (203c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1e1a:	b08c      	sub	sp, #48	; 0x30
    1e1c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1e20:	2000      	movs	r0, #0
    1e22:	9009      	str	r0, [sp, #36]	; 0x24
    1e24:	2001      	movs	r0, #1
    1e26:	4c86      	ldr	r4, [pc, #536]	; (2040 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    1e28:	f04f 0900 	mov.w	r9, #0
    1e2c:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    1e30:	4680      	mov	r8, r0
    1e32:	9008      	str	r0, [sp, #32]
    1e34:	b124      	cbz	r4, 1e40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    1e36:	2100      	movs	r1, #0
    1e38:	f240 70e9 	movw	r0, #2025	; 0x7e9
    1e3c:	f3af 8000 	nop.w
    1e40:	9808      	ldr	r0, [sp, #32]
    1e42:	2800      	cmp	r0, #0
    1e44:	d037      	beq.n	1eb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    1e46:	bf00      	nop
    1e48:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1e4c:	b124      	cbz	r4, 1e58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    1e4e:	2100      	movs	r1, #0
    1e50:	f240 70ee 	movw	r0, #2030	; 0x7ee
    1e54:	f3af 8000 	nop.w
    1e58:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    1e5c:	2240      	movs	r2, #64	; 0x40
    1e5e:	ea28 060a 	bic.w	r6, r8, sl
    1e62:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    1e66:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    1e6a:	4683      	mov	fp, r0
    1e6c:	f009 fd5a 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1e70:	b124      	cbz	r4, 1e7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    1e72:	2100      	movs	r1, #0
    1e74:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1e78:	f3af 8000 	nop.w
    1e7c:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1e80:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    1e84:	9000      	str	r0, [sp, #0]
    1e86:	6a09      	ldr	r1, [r1, #32]
    1e88:	6201      	str	r1, [r0, #32]
    1e8a:	b124      	cbz	r4, 1e96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    1e8c:	2100      	movs	r1, #0
    1e8e:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1e92:	f3af 8000 	nop.w
    1e96:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1e9a:	f88d 0008 	strb.w	r0, [sp, #8]
    1e9e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ea2:	b178      	cbz	r0, 1ec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    1ea4:	2c00      	cmp	r4, #0
    1ea6:	bf1c      	itt	ne
    1ea8:	2100      	movne	r1, #0
    1eaa:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    1eae:	d0c1      	beq.n	1e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1eb0:	f3af 8000 	nop.w
    1eb4:	e7be      	b.n	1e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1eb6:	4863      	ldr	r0, [pc, #396]	; (2044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    1eb8:	2800      	cmp	r0, #0
    1eba:	bf18      	it	ne
    1ebc:	f3af 8000 	nopne.w
    1ec0:	b662      	cpsie	i
    1ec2:	e7c1      	b.n	1e48 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    1ec4:	b124      	cbz	r4, 1ed0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    1ec6:	2100      	movs	r1, #0
    1ec8:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    1ecc:	f3af 8000 	nop.w
    1ed0:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ed2:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    1ed6:	2803      	cmp	r0, #3
    1ed8:	d172      	bne.n	1fc0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    1eda:	f8dd a000 	ldr.w	sl, [sp]
    1ede:	f8cd a018 	str.w	sl, [sp, #24]
    1ee2:	990c      	ldr	r1, [sp, #48]	; 0x30
    1ee4:	f89a 0020 	ldrb.w	r0, [sl, #32]
    1ee8:	4288      	cmp	r0, r1
    1eea:	bf14      	ite	ne
    1eec:	f04f 0b00 	movne.w	fp, #0
    1ef0:	f04f 0b01 	moveq.w	fp, #1
    1ef4:	f10a 0c20 	add.w	ip, sl, #32
    1ef8:	4686      	mov	lr, r0
    1efa:	2220      	movs	r2, #32
    1efc:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    1f00:	e003      	b.n	1f0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    1f02:	4602      	mov	r2, r0
    1f04:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    1f08:	7840      	ldrb	r0, [r0, #1]
    1f0a:	4288      	cmp	r0, r1
    1f0c:	d002      	beq.n	1f14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    1f0e:	2820      	cmp	r0, #32
    1f10:	d00a      	beq.n	1f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f12:	e7f6      	b.n	1f02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    1f14:	2820      	cmp	r0, #32
    1f16:	d007      	beq.n	1f28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    1f18:	4586      	cmp	lr, r0
    1f1a:	d107      	bne.n	1f2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    1f1c:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    1f20:	7840      	ldrb	r0, [r0, #1]
    1f22:	f88c 0000 	strb.w	r0, [ip]
    1f26:	e007      	b.n	1f38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    1f28:	4648      	mov	r0, r9
    1f2a:	e00c      	b.n	1f46 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    1f2c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    1f30:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    1f34:	7840      	ldrb	r0, [r0, #1]
    1f36:	7048      	strb	r0, [r1, #1]
    1f38:	b124      	cbz	r4, 1f44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    1f3a:	2100      	movs	r1, #0
    1f3c:	f240 5037 	movw	r0, #1335	; 0x537
    1f40:	f3af 8000 	nop.w
    1f44:	4640      	mov	r0, r8
    1f46:	ea10 0f0b 	tst.w	r0, fp
    1f4a:	bf18      	it	ne
    1f4c:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    1f50:	2800      	cmp	r0, #0
    1f52:	d052      	beq.n	1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1f54:	b124      	cbz	r4, 1f60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    1f56:	2100      	movs	r1, #0
    1f58:	f240 70fd 	movw	r0, #2045	; 0x7fd
    1f5c:	f3af 8000 	nop.w
    1f60:	4632      	mov	r2, r6
    1f62:	2001      	movs	r0, #1
    1f64:	990c      	ldr	r1, [sp, #48]	; 0x30
    1f66:	f7ff f8e1 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    1f6a:	9806      	ldr	r0, [sp, #24]
    1f6c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1f70:	f88d 0008 	strb.w	r0, [sp, #8]
    1f74:	f89d a008 	ldrb.w	sl, [sp, #8]
    1f78:	b124      	cbz	r4, 1f84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    1f7a:	2100      	movs	r1, #0
    1f7c:	f640 0008 	movw	r0, #2056	; 0x808
    1f80:	f3af 8000 	nop.w
    1f84:	4830      	ldr	r0, [pc, #192]	; (2048 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    1f86:	2800      	cmp	r0, #0
    1f88:	bf18      	it	ne
    1f8a:	f3af 8000 	nopne.w
    1f8e:	f3ef 8010 	mrs	r0, PRIMASK
    1f92:	b672      	cpsid	i
    1f94:	9008      	str	r0, [sp, #32]
    1f96:	b124      	cbz	r4, 1fa2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    1f98:	2100      	movs	r1, #0
    1f9a:	f640 000d 	movw	r0, #2061	; 0x80d
    1f9e:	f3af 8000 	nop.w
    1fa2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1fa6:	f88d 0008 	strb.w	r0, [sp, #8]
    1faa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1fae:	b140      	cbz	r0, 1fc2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    1fb0:	2c00      	cmp	r4, #0
    1fb2:	bf1c      	itt	ne
    1fb4:	2100      	movne	r1, #0
    1fb6:	f640 0011 	movwne	r0, #2065	; 0x811
    1fba:	f43f af3b 	beq.w	1e34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    1fbe:	e777      	b.n	1eb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    1fc0:	e01b      	b.n	1ffa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    1fc2:	f1ba 0f00 	cmp.w	sl, #0
    1fc6:	d008      	beq.n	1fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1fc8:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1fcc:	2820      	cmp	r0, #32
    1fce:	d104      	bne.n	1fda <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    1fd0:	4631      	mov	r1, r6
    1fd2:	2002      	movs	r0, #2
    1fd4:	f7ff f8da 	bl	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    1fd8:	b308      	cbz	r0, 201e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    1fda:	b124      	cbz	r4, 1fe6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    1fdc:	2100      	movs	r1, #0
    1fde:	f640 0025 	movw	r0, #2085	; 0x825
    1fe2:	f3af 8000 	nop.w
    1fe6:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1fea:	ea28 0000 	bic.w	r0, r8, r0
    1fee:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    1ff2:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    1ff6:	2001      	movs	r0, #1
    1ff8:	9009      	str	r0, [sp, #36]	; 0x24
    1ffa:	b124      	cbz	r4, 2006 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    1ffc:	2100      	movs	r1, #0
    1ffe:	f640 002e 	movw	r0, #2094	; 0x82e
    2002:	f3af 8000 	nop.w
    2006:	9808      	ldr	r0, [sp, #32]
    2008:	b188      	cbz	r0, 202e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    200a:	b124      	cbz	r4, 2016 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    200c:	2100      	movs	r1, #0
    200e:	f640 0032 	movw	r0, #2098	; 0x832
    2012:	f3af 8000 	nop.w
    2016:	9809      	ldr	r0, [sp, #36]	; 0x24
    2018:	b00d      	add	sp, #52	; 0x34
    201a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    201e:	2c00      	cmp	r4, #0
    2020:	d0f1      	beq.n	2006 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    2022:	2100      	movs	r1, #0
    2024:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2028:	f3af 8000 	nop.w
    202c:	e7e6      	b.n	1ffc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    202e:	4805      	ldr	r0, [pc, #20]	; (2044 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2030:	2800      	cmp	r0, #0
    2032:	bf18      	it	ne
    2034:	f3af 8000 	nopne.w
    2038:	b662      	cpsie	i
    203a:	e7e6      	b.n	200a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    203c:	20000d54 	.word	0x20000d54
	...

0000204c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    204c:	2820      	cmp	r0, #32
    204e:	bf24      	itt	cs
    2050:	2000      	movcs	r0, #0
    2052:	4770      	bxcs	lr
    2054:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2058:	4b03      	ldr	r3, [pc, #12]	; (2068 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x1c>)
    205a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
    205e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2062:	6042      	str	r2, [r0, #4]
    2064:	2001      	movs	r0, #1
    2066:	4770      	bx	lr
    2068:	200009d4 	.word	0x200009d4

0000206c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    206c:	b510      	push	{r4, lr}
    206e:	2820      	cmp	r0, #32
    2070:	d211      	bcs.n	2096 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2072:	490e      	ldr	r1, [pc, #56]	; (20ac <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2074:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2078:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    207c:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    2080:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2084:	b13b      	cbz	r3, 2096 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2086:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    208a:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    208e:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    2092:	2a01      	cmp	r2, #1
    2094:	d001      	beq.n	209a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2096:	2000      	movs	r0, #0
    2098:	bd10      	pop	{r4, pc}
    209a:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    209e:	4601      	mov	r1, r0
    20a0:	2000      	movs	r0, #0
    20a2:	f7ff f843 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    20a6:	2001      	movs	r0, #1
    20a8:	bd10      	pop	{r4, pc}
    20aa:	0000      	.short	0x0000
    20ac:	20000d54 	.word	0x20000d54

000020b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    20b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20b4:	4e80      	ldr	r6, [pc, #512]	; (22b8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    20b6:	4680      	mov	r8, r0
    20b8:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    20bc:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    20c0:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    20c4:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    20c8:	2800      	cmp	r0, #0
    20ca:	d068      	beq.n	219e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    20cc:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    20d0:	4d7a      	ldr	r5, [pc, #488]	; (22bc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    20d2:	b125      	cbz	r5, 20de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    20d4:	2100      	movs	r1, #0
    20d6:	f640 30c1 	movw	r0, #3009	; 0xbc1
    20da:	f3af 8000 	nop.w
    20de:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    20e2:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    20e6:	2801      	cmp	r0, #1
    20e8:	d018      	beq.n	211c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    20ea:	b2c0      	uxtb	r0, r0
    20ec:	2804      	cmp	r0, #4
    20ee:	bf1c      	itt	ne
    20f0:	2805      	cmpne	r0, #5
    20f2:	2806      	cmpne	r0, #6
    20f4:	d058      	beq.n	21a8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    20f6:	b12d      	cbz	r5, 2104 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    20f8:	f04f 0100 	mov.w	r1, #0
    20fc:	f640 30cd 	movw	r0, #3021	; 0xbcd
    2100:	f3af 8000 	nop.w
    2104:	f001 fc36 	bl	3974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    2108:	b125      	cbz	r5, 2114 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    210a:	2100      	movs	r1, #0
    210c:	f640 30d1 	movw	r0, #3025	; 0xbd1
    2110:	f3af 8000 	nop.w
    2114:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    2118:	2801      	cmp	r0, #1
    211a:	d1e6      	bne.n	20ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    211c:	2401      	movs	r4, #1
    211e:	b125      	cbz	r5, 212a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    2120:	2100      	movs	r1, #0
    2122:	f640 30d8 	movw	r0, #3032	; 0xbd8
    2126:	f3af 8000 	nop.w
    212a:	2c00      	cmp	r4, #0
    212c:	d042      	beq.n	21b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    212e:	2000      	movs	r0, #0
    2130:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2134:	b125      	cbz	r5, 2140 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    2136:	2100      	movs	r1, #0
    2138:	f640 30dd 	movw	r0, #3037	; 0xbdd
    213c:	f3af 8000 	nop.w
    2140:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2144:	2001      	movs	r0, #1
    2146:	ea20 090b 	bic.w	r9, r0, fp
    214a:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    214e:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    2152:	2240      	movs	r2, #64	; 0x40
    2154:	f009 fbe6 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2158:	b125      	cbz	r5, 2164 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    215a:	2100      	movs	r1, #0
    215c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2160:	f3af 8000 	nop.w
    2164:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2168:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    216c:	6a00      	ldr	r0, [r0, #32]
    216e:	f8ca 0020 	str.w	r0, [sl, #32]
    2172:	b125      	cbz	r5, 217e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2174:	2100      	movs	r1, #0
    2176:	f240 50d1 	movw	r0, #1489	; 0x5d1
    217a:	f3af 8000 	nop.w
    217e:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    2182:	f88d 0000 	strb.w	r0, [sp]
    2186:	f89d 0000 	ldrb.w	r0, [sp]
    218a:	b1d0      	cbz	r0, 21c2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    218c:	2d00      	cmp	r5, #0
    218e:	bf1c      	itt	ne
    2190:	2100      	movne	r1, #0
    2192:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2196:	d0c2      	beq.n	211e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2198:	f3af 8000 	nop.w
    219c:	e7bf      	b.n	211e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    219e:	f640 31b8 	movw	r1, #3000	; 0xbb8
    21a2:	2070      	movs	r0, #112	; 0x70
    21a4:	f001 fac0 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21a8:	464a      	mov	r2, r9
    21aa:	4641      	mov	r1, r8
    21ac:	2001      	movs	r0, #1
    21ae:	f7fe ffbd 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    21b2:	e7a9      	b.n	2108 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    21b4:	4842      	ldr	r0, [pc, #264]	; (22c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    21b6:	2800      	cmp	r0, #0
    21b8:	bf18      	it	ne
    21ba:	f3af 8000 	nopne.w
    21be:	b662      	cpsie	i
    21c0:	e7b5      	b.n	212e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    21c2:	b125      	cbz	r5, 21ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    21c4:	2100      	movs	r1, #0
    21c6:	f640 30e7 	movw	r0, #3047	; 0xbe7
    21ca:	f3af 8000 	nop.w
    21ce:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    21d2:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    21d6:	4614      	mov	r4, r2
    21d8:	f04f 0b20 	mov.w	fp, #32
    21dc:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    21e0:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    21e4:	e003      	b.n	21ee <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    21e6:	46a3      	mov	fp, r4
    21e8:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    21ec:	785c      	ldrb	r4, [r3, #1]
    21ee:	4544      	cmp	r4, r8
    21f0:	d002      	beq.n	21f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    21f2:	2c20      	cmp	r4, #32
    21f4:	d02b      	beq.n	224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    21f6:	e7f6      	b.n	21e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    21f8:	2c20      	cmp	r4, #32
    21fa:	d028      	beq.n	224e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    21fc:	42a2      	cmp	r2, r4
    21fe:	d104      	bne.n	220a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    2200:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    2204:	7840      	ldrb	r0, [r0, #1]
    2206:	7008      	strb	r0, [r1, #0]
    2208:	e005      	b.n	2216 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    220a:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    220e:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    2212:	7849      	ldrb	r1, [r1, #1]
    2214:	7041      	strb	r1, [r0, #1]
    2216:	f1ba 0f00 	cmp.w	sl, #0
    221a:	d011      	beq.n	2240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    221c:	b125      	cbz	r5, 2228 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    221e:	2100      	movs	r1, #0
    2220:	f240 502f 	movw	r0, #1327	; 0x52f
    2224:	f3af 8000 	nop.w
    2228:	f89a 0000 	ldrb.w	r0, [sl]
    222c:	42a0      	cmp	r0, r4
    222e:	d107      	bne.n	2240 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    2230:	b125      	cbz	r5, 223c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    2232:	2100      	movs	r1, #0
    2234:	f240 5032 	movw	r0, #1330	; 0x532
    2238:	f3af 8000 	nop.w
    223c:	f88a b000 	strb.w	fp, [sl]
    2240:	b15d      	cbz	r5, 225a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2242:	2100      	movs	r1, #0
    2244:	f240 5037 	movw	r0, #1335	; 0x537
    2248:	f3af 8000 	nop.w
    224c:	e000      	b.n	2250 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    224e:	b125      	cbz	r5, 225a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    2250:	2100      	movs	r1, #0
    2252:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2256:	f3af 8000 	nop.w
    225a:	481a      	ldr	r0, [pc, #104]	; (22c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    225c:	2800      	cmp	r0, #0
    225e:	bf18      	it	ne
    2260:	f3af 8000 	nopne.w
    2264:	f3ef 8410 	mrs	r4, PRIMASK
    2268:	b672      	cpsid	i
    226a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    226e:	f88d 0000 	strb.w	r0, [sp]
    2272:	f89d 0000 	ldrb.w	r0, [sp]
    2276:	b138      	cbz	r0, 2288 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2278:	2d00      	cmp	r5, #0
    227a:	bf1c      	itt	ne
    227c:	2100      	movne	r1, #0
    227e:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    2282:	f43f af4c 	beq.w	211e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2286:	e787      	b.n	2198 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2288:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    228c:	2001      	movs	r0, #1
    228e:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    2292:	b154      	cbz	r4, 22aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2294:	2d00      	cmp	r5, #0
    2296:	bf08      	it	eq
    2298:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    229c:	2100      	movs	r1, #0
    229e:	f640 30fe 	movw	r0, #3070	; 0xbfe
    22a2:	f3af 8000 	nop.w
    22a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22aa:	4805      	ldr	r0, [pc, #20]	; (22c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    22ac:	2800      	cmp	r0, #0
    22ae:	bf18      	it	ne
    22b0:	f3af 8000 	nopne.w
    22b4:	b662      	cpsie	i
    22b6:	e7ed      	b.n	2294 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    22b8:	20000d54 	.word	0x20000d54
	...

000022c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    22c8:	b570      	push	{r4, r5, r6, lr}
    22ca:	460d      	mov	r5, r1
    22cc:	4606      	mov	r6, r0
    22ce:	f001 f9b5 	bl	363c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    22d2:	480f      	ldr	r0, [pc, #60]	; (2310 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    22d4:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    22d8:	2400      	movs	r4, #0
    22da:	3880      	subs	r0, #128	; 0x80
    22dc:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    22e0:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    22e4:	b129      	cbz	r1, 22f2 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    22e6:	1c61      	adds	r1, r4, #1
    22e8:	b2cc      	uxtb	r4, r1
    22ea:	2c20      	cmp	r4, #32
    22ec:	d3f8      	bcc.n	22e0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    22ee:	2020      	movs	r0, #32
    22f0:	bd70      	pop	{r4, r5, r6, pc}
    22f2:	4808      	ldr	r0, [pc, #32]	; (2314 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    22f4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    22f8:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    22fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    2300:	4621      	mov	r1, r4
    2302:	6045      	str	r5, [r0, #4]
    2304:	2001      	movs	r0, #1
    2306:	f7fe ff11 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    230a:	4620      	mov	r0, r4
    230c:	bd70      	pop	{r4, r5, r6, pc}
    230e:	0000      	.short	0x0000
    2310:	20000d54 	.word	0x20000d54
    2314:	200009d4 	.word	0x200009d4

00002318 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    2318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    231c:	b083      	sub	sp, #12
    231e:	f000 fb2d 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2322:	4605      	mov	r5, r0
    2324:	f000 fde0 	bl	2ee8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2328:	4c67      	ldr	r4, [pc, #412]	; (24c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    232a:	68a0      	ldr	r0, [r4, #8]
    232c:	f1b0 3fff 	cmp.w	r0, #4294967295
    2330:	bf1c      	itt	ne
    2332:	f04f 30ff 	movne.w	r0, #4294967295
    2336:	60a0      	strne	r0, [r4, #8]
    2338:	7fa0      	ldrb	r0, [r4, #30]
    233a:	f8df b190 	ldr.w	fp, [pc, #400]	; 24cc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    233e:	b9a8      	cbnz	r0, 236c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    2340:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2344:	1a08      	subs	r0, r1, r0
    2346:	0200      	lsls	r0, r0, #8
    2348:	17c1      	asrs	r1, r0, #31
    234a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    234e:	1200      	asrs	r0, r0, #8
    2350:	f44f 710c 	mov.w	r1, #560	; 0x230
    2354:	f009 f9a5 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2358:	6921      	ldr	r1, [r4, #16]
    235a:	4408      	add	r0, r1
    235c:	1a28      	subs	r0, r5, r0
    235e:	0200      	lsls	r0, r0, #8
    2360:	17c1      	asrs	r1, r0, #31
    2362:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2366:	1200      	asrs	r0, r0, #8
    2368:	0fc0      	lsrs	r0, r0, #31
    236a:	d013      	beq.n	2394 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    236c:	7e60      	ldrb	r0, [r4, #25]
    236e:	b328      	cbz	r0, 23bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    2370:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2374:	f88d 0000 	strb.w	r0, [sp]
    2378:	f89d 0000 	ldrb.w	r0, [sp]
    237c:	b1f0      	cbz	r0, 23bc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    237e:	f000 fc09 	bl	2b94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    2382:	bf00      	nop
    2384:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2388:	b1f0      	cbz	r0, 23c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    238a:	f240 4147 	movw	r1, #1095	; 0x447
    238e:	2070      	movs	r0, #112	; 0x70
    2390:	f001 f9ca 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2394:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2398:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    239c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    23a0:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    23a4:	6840      	ldr	r0, [r0, #4]
    23a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    23aa:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    23ae:	2108      	movs	r1, #8
    23b0:	4790      	blx	r2
    23b2:	f44f 6186 	mov.w	r1, #1072	; 0x430
    23b6:	2070      	movs	r0, #112	; 0x70
    23b8:	f001 f9b6 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23bc:	1ce8      	adds	r0, r5, #3
    23be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23c2:	f000 fae1 	bl	2988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    23c6:	e7dd      	b.n	2384 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    23c8:	f04f 0a01 	mov.w	sl, #1
    23cc:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    23d0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    23d4:	2820      	cmp	r0, #32
    23d6:	d024      	beq.n	2422 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    23d8:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    23dc:	2020      	movs	r0, #32
    23de:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    23e2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    23e6:	2600      	movs	r6, #0
    23e8:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    23ec:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    23f0:	4837      	ldr	r0, [pc, #220]	; (24d0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    23f2:	6026      	str	r6, [r4, #0]
    23f4:	7800      	ldrb	r0, [r0, #0]
    23f6:	2802      	cmp	r0, #2
    23f8:	bf16      	itet	ne
    23fa:	2803      	cmpne	r0, #3
    23fc:	2001      	moveq	r0, #1
    23fe:	2000      	movne	r0, #0
    2400:	7720      	strb	r0, [r4, #28]
    2402:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    2406:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    240a:	f899 0020 	ldrb.w	r0, [r9, #32]
    240e:	2820      	cmp	r0, #32
    2410:	d031      	beq.n	2476 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2412:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2416:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    241a:	7d81      	ldrb	r1, [r0, #22]
    241c:	2901      	cmp	r1, #1
    241e:	d005      	beq.n	242c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    2420:	e029      	b.n	2476 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2422:	f240 414a 	movw	r1, #1098	; 0x44a
    2426:	2070      	movs	r0, #112	; 0x70
    2428:	f001 f97e 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    242c:	46ab      	mov	fp, r5
    242e:	f100 0508 	add.w	r5, r0, #8
    2432:	8a40      	ldrh	r0, [r0, #18]
    2434:	aa01      	add	r2, sp, #4
    2436:	4669      	mov	r1, sp
    2438:	f000 f94a 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    243c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2440:	2820      	cmp	r0, #32
    2442:	d004      	beq.n	244e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2444:	6920      	ldr	r0, [r4, #16]
    2446:	1d40      	adds	r0, r0, #5
    2448:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    244c:	e00b      	b.n	2466 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    244e:	8968      	ldrh	r0, [r5, #10]
    2450:	f10b 0b09 	add.w	fp, fp, #9
    2454:	b128      	cbz	r0, 2462 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2456:	f001 f903 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    245a:	2800      	cmp	r0, #0
    245c:	bf08      	it	eq
    245e:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    2462:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2466:	e9d5 2100 	ldrd	r2, r1, [r5]
    246a:	1a89      	subs	r1, r1, r2
    246c:	6028      	str	r0, [r5, #0]
    246e:	4408      	add	r0, r1
    2470:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2474:	6068      	str	r0, [r5, #4]
    2476:	4639      	mov	r1, r7
    2478:	2001      	movs	r0, #1
    247a:	f7fe fe87 	bl	118c <CONFIG_FPROTECT_BLOCK_SIZE+0x18c>
    247e:	2800      	cmp	r0, #0
    2480:	d0f9      	beq.n	2476 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    2482:	4814      	ldr	r0, [pc, #80]	; (24d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2484:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2488:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    248c:	2802      	cmp	r0, #2
    248e:	d104      	bne.n	249a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    2490:	463a      	mov	r2, r7
    2492:	4641      	mov	r1, r8
    2494:	2006      	movs	r0, #6
    2496:	f7fe fe49 	bl	112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
    249a:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    249e:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    24a2:	2820      	cmp	r0, #32
    24a4:	d003      	beq.n	24ae <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    24a6:	480c      	ldr	r0, [pc, #48]	; (24d8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    24a8:	7840      	ldrb	r0, [r0, #1]
    24aa:	f001 fa0d 	bl	38c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24ae:	7f20      	ldrb	r0, [r4, #28]
    24b0:	2800      	cmp	r0, #0
    24b2:	bf04      	itt	eq
    24b4:	b003      	addeq	sp, #12
    24b6:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24ba:	f000 fd5f 	bl	2f7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    24be:	7726      	strb	r6, [r4, #28]
    24c0:	7766      	strb	r6, [r4, #29]
    24c2:	b003      	add	sp, #12
    24c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24c8:	20000d54 	.word	0x20000d54
    24cc:	200009d4 	.word	0x200009d4
    24d0:	20000012 	.word	0x20000012
    24d4:	20000cd4 	.word	0x20000cd4
    24d8:	20000010 	.word	0x20000010

000024dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    24dc:	b510      	push	{r4, lr}
    24de:	4c32      	ldr	r4, [pc, #200]	; (25a8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    24e0:	b082      	sub	sp, #8
    24e2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    24e6:	2920      	cmp	r1, #32
    24e8:	d008      	beq.n	24fc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    24ea:	68a1      	ldr	r1, [r4, #8]
    24ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    24f0:	d009      	beq.n	2506 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    24f2:	f640 21e9 	movw	r1, #2793	; 0xae9
    24f6:	2070      	movs	r0, #112	; 0x70
    24f8:	f001 f916 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    24fc:	f640 21e8 	movw	r1, #2792	; 0xae8
    2500:	2070      	movs	r0, #112	; 0x70
    2502:	f001 f911 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2506:	6862      	ldr	r2, [r4, #4]
    2508:	4601      	mov	r1, r0
    250a:	4b28      	ldr	r3, [pc, #160]	; (25ac <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    250c:	1850      	adds	r0, r2, r1
    250e:	429a      	cmp	r2, r3
    2510:	d904      	bls.n	251c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    2512:	f240 6109 	movw	r1, #1545	; 0x609
    2516:	2070      	movs	r0, #112	; 0x70
    2518:	f001 f906 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    251c:	4a24      	ldr	r2, [pc, #144]	; (25b0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    251e:	4291      	cmp	r1, r2
    2520:	dd04      	ble.n	252c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    2522:	f240 610a 	movw	r1, #1546	; 0x60a
    2526:	2070      	movs	r0, #112	; 0x70
    2528:	f001 f8fe 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    252c:	4a21      	ldr	r2, [pc, #132]	; (25b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    252e:	4291      	cmp	r1, r2
    2530:	da04      	bge.n	253c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    2532:	f240 610b 	movw	r1, #1547	; 0x60b
    2536:	2070      	movs	r0, #112	; 0x70
    2538:	f001 f8f6 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    253c:	491e      	ldr	r1, [pc, #120]	; (25b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    253e:	4281      	cmp	r1, r0
    2540:	bfdc      	itt	le
    2542:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2546:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    254a:	dd05      	ble.n	2558 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    254c:	2800      	cmp	r0, #0
    254e:	bfbc      	itt	lt
    2550:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2554:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2558:	aa01      	add	r2, sp, #4
    255a:	4669      	mov	r1, sp
    255c:	f000 f8b8 	bl	26d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2560:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2564:	280f      	cmp	r0, #15
    2566:	bf8c      	ite	hi
    2568:	2001      	movhi	r0, #1
    256a:	2000      	movls	r0, #0
    256c:	9900      	ldr	r1, [sp, #0]
    256e:	4408      	add	r0, r1
    2570:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2574:	60a1      	str	r1, [r4, #8]
    2576:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    257a:	f88d 0000 	strb.w	r0, [sp]
    257e:	f89d 0000 	ldrb.w	r0, [sp]
    2582:	2800      	cmp	r0, #0
    2584:	bf04      	itt	eq
    2586:	b002      	addeq	sp, #8
    2588:	bd10      	popeq	{r4, pc}
    258a:	2301      	movs	r3, #1
    258c:	2203      	movs	r2, #3
    258e:	2005      	movs	r0, #5
    2590:	f000 fb7a 	bl	2c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2594:	2800      	cmp	r0, #0
    2596:	bf1c      	itt	ne
    2598:	b002      	addne	sp, #8
    259a:	bd10      	popne	{r4, pc}
    259c:	f640 21f1 	movw	r1, #2801	; 0xaf1
    25a0:	2070      	movs	r0, #112	; 0x70
    25a2:	f001 f8c1 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a6:	0000      	.short	0x0000
    25a8:	20000d54 	.word	0x20000d54
    25ac:	1e847fff 	.word	0x1e847fff
    25b0:	07a12000 	.word	0x07a12000
    25b4:	f85ee000 	.word	0xf85ee000
    25b8:	1e848000 	.word	0x1e848000

000025bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    25bc:	b570      	push	{r4, r5, r6, lr}
    25be:	4c1e      	ldr	r4, [pc, #120]	; (2638 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    25c0:	2120      	movs	r1, #32
    25c2:	f884 1020 	strb.w	r1, [r4, #32]
    25c6:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    25ca:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    25ce:	2000      	movs	r0, #0
    25d0:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    25d4:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    25d8:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    25dc:	1e42      	subs	r2, r0, #1
    25de:	60a2      	str	r2, [r4, #8]
    25e0:	6020      	str	r0, [r4, #0]
    25e2:	77a0      	strb	r0, [r4, #30]
    25e4:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    25e8:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    25ec:	7720      	strb	r0, [r4, #28]
    25ee:	7760      	strb	r0, [r4, #29]
    25f0:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    25f4:	4911      	ldr	r1, [pc, #68]	; (263c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    25f6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    25fa:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    25fe:	7008      	strb	r0, [r1, #0]
    2600:	7048      	strb	r0, [r1, #1]
    2602:	8048      	strh	r0, [r1, #2]
    2604:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    2608:	2210      	movs	r2, #16
    260a:	7088      	strb	r0, [r1, #2]
    260c:	f801 0f04 	strb.w	r0, [r1, #4]!
    2610:	1e52      	subs	r2, r2, #1
    2612:	d1fa      	bne.n	260a <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    2614:	4d0a      	ldr	r5, [pc, #40]	; (2640 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    2616:	2601      	movs	r6, #1
    2618:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    261c:	20ff      	movs	r0, #255	; 0xff
    261e:	7028      	strb	r0, [r5, #0]
    2620:	4808      	ldr	r0, [pc, #32]	; (2644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    2622:	f001 f933 	bl	388c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    2626:	7068      	strb	r0, [r5, #1]
    2628:	f001 f98e 	bl	3948 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    262c:	60a8      	str	r0, [r5, #8]
    262e:	f000 fcd3 	bl	2fd8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    2632:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    2636:	bd70      	pop	{r4, r5, r6, pc}
    2638:	20000d54 	.word	0x20000d54
    263c:	20000012 	.word	0x20000012
    2640:	20000010 	.word	0x20000010
    2644:	00000fe9 	.word	0x00000fe9

00002648 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    2648:	b570      	push	{r4, r5, r6, lr}
    264a:	4604      	mov	r4, r0
    264c:	4615      	mov	r5, r2
    264e:	4608      	mov	r0, r1
    2650:	f008 fffa 	bl	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2654:	4a0f      	ldr	r2, [pc, #60]	; (2694 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x4c>)
    2656:	1b01      	subs	r1, r0, r4
    2658:	1c53      	adds	r3, r2, #1
    265a:	ebb1 0f93 	cmp.w	r1, r3, lsr #2
    265e:	bf24      	itt	cs
    2660:	eba4 0c00 	subcs.w	ip, r4, r0
    2664:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    2668:	d30b      	bcc.n	2682 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    266a:	428a      	cmp	r2, r1
    266c:	d203      	bcs.n	2676 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x2e>
    266e:	1b11      	subs	r1, r2, r4
    2670:	4408      	add	r0, r1
    2672:	1c41      	adds	r1, r0, #1
    2674:	e005      	b.n	2682 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x3a>
    2676:	4562      	cmp	r2, ip
    2678:	d207      	bcs.n	268a <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x42>
    267a:	1a10      	subs	r0, r2, r0
    267c:	4420      	add	r0, r4
    267e:	1c40      	adds	r0, r0, #1
    2680:	4241      	negs	r1, r0
    2682:	f101 000f 	add.w	r0, r1, #15
    2686:	1a28      	subs	r0, r5, r0
    2688:	bd70      	pop	{r4, r5, r6, pc}
    268a:	f640 310c 	movw	r1, #2828	; 0xb0c
    268e:	2070      	movs	r0, #112	; 0x70
    2690:	f001 f84a 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2694:	1e847fff 	.word	0x1e847fff

00002698 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2698:	0b41      	lsrs	r1, r0, #13
    269a:	f248 6237 	movw	r2, #34359	; 0x8637
    269e:	4351      	muls	r1, r2
    26a0:	0c0a      	lsrs	r2, r1, #16
    26a2:	4b09      	ldr	r3, [pc, #36]	; (26c8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    26a4:	0251      	lsls	r1, r2, #9
    26a6:	fb02 0203 	mla	r2, r2, r3, r0
    26aa:	4808      	ldr	r0, [pc, #32]	; (26cc <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    26ac:	4350      	muls	r0, r2
    26ae:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    26b2:	306e      	adds	r0, #110	; 0x6e
    26b4:	0d40      	lsrs	r0, r0, #21
    26b6:	425b      	negs	r3, r3
    26b8:	fb10 f303 	smulbb	r3, r0, r3
    26bc:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    26c0:	bf88      	it	hi
    26c2:	1c49      	addhi	r1, r1, #1
    26c4:	4408      	add	r0, r1
    26c6:	4770      	bx	lr
    26c8:	ffffc2f7 	.word	0xffffc2f7
    26cc:	00010c6f 	.word	0x00010c6f

000026d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    26d0:	0b43      	lsrs	r3, r0, #13
    26d2:	f248 6c37 	movw	ip, #34359	; 0x8637
    26d6:	fb03 f30c 	mul.w	r3, r3, ip
    26da:	b430      	push	{r4, r5}
    26dc:	0c1b      	lsrs	r3, r3, #16
    26de:	f8df c044 	ldr.w	ip, [pc, #68]	; 2724 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    26e2:	025c      	lsls	r4, r3, #9
    26e4:	fb03 030c 	mla	r3, r3, ip, r0
    26e8:	480f      	ldr	r0, [pc, #60]	; (2728 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    26ea:	4358      	muls	r0, r3
    26ec:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    26f0:	eb04 000c 	add.w	r0, r4, ip
    26f4:	f643 5409 	movw	r4, #15625	; 0x3d09
    26f8:	fb1c f404 	smulbb	r4, ip, r4
    26fc:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    2700:	f643 5508 	movw	r5, #15624	; 0x3d08
    2704:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    2708:	442c      	add	r4, r5
    270a:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    270e:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    2712:	bf84      	itt	hi
    2714:	f04f 0c00 	movhi.w	ip, #0
    2718:	1c40      	addhi	r0, r0, #1
    271a:	6008      	str	r0, [r1, #0]
    271c:	f882 c000 	strb.w	ip, [r2]
    2720:	bc30      	pop	{r4, r5}
    2722:	4770      	bx	lr
    2724:	ffffc2f7 	.word	0xffffc2f7
    2728:	00010c6f 	.word	0x00010c6f

0000272c <MPSL_IRQ_RTC0_Handler>:
    272c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2730:	4c38      	ldr	r4, [pc, #224]	; (2814 <MPSL_IRQ_RTC0_Handler+0xe8>)
    2732:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2736:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2818 <MPSL_IRQ_RTC0_Handler+0xec>
    273a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    273e:	f44f 6600 	mov.w	r6, #2048	; 0x800
    2742:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    2746:	f04f 0500 	mov.w	r5, #0
    274a:	bf1c      	itt	ne
    274c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    2750:	2800      	cmpne	r0, #0
    2752:	d017      	beq.n	2784 <MPSL_IRQ_RTC0_Handler+0x58>
    2754:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2758:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    275c:	482f      	ldr	r0, [pc, #188]	; (281c <MPSL_IRQ_RTC0_Handler+0xf0>)
    275e:	6800      	ldr	r0, [r0, #0]
    2760:	f8d8 1000 	ldr.w	r1, [r8]
    2764:	eba0 0001 	sub.w	r0, r0, r1
    2768:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    276c:	2802      	cmp	r0, #2
    276e:	d302      	bcc.n	2776 <MPSL_IRQ_RTC0_Handler+0x4a>
    2770:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2774:	d306      	bcc.n	2784 <MPSL_IRQ_RTC0_Handler+0x58>
    2776:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    277a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    277e:	2004      	movs	r0, #4
    2780:	f7fe ff28 	bl	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2784:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2788:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    278c:	bf1c      	itt	ne
    278e:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    2792:	2800      	cmpne	r0, #0
    2794:	d017      	beq.n	27c6 <MPSL_IRQ_RTC0_Handler+0x9a>
    2796:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    279a:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    279e:	4820      	ldr	r0, [pc, #128]	; (2820 <MPSL_IRQ_RTC0_Handler+0xf4>)
    27a0:	6800      	ldr	r0, [r0, #0]
    27a2:	f8d8 1000 	ldr.w	r1, [r8]
    27a6:	eba0 0001 	sub.w	r0, r0, r1
    27aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27ae:	2802      	cmp	r0, #2
    27b0:	d302      	bcc.n	27b8 <MPSL_IRQ_RTC0_Handler+0x8c>
    27b2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27b6:	d306      	bcc.n	27c6 <MPSL_IRQ_RTC0_Handler+0x9a>
    27b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    27bc:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    27c0:	2005      	movs	r0, #5
    27c2:	f7fe ff07 	bl	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    27c6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    27ca:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    27ce:	bf1a      	itte	ne
    27d0:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    27d4:	2800      	cmpne	r0, #0
    27d6:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    27da:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    27de:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    27e2:	4810      	ldr	r0, [pc, #64]	; (2824 <MPSL_IRQ_RTC0_Handler+0xf8>)
    27e4:	6800      	ldr	r0, [r0, #0]
    27e6:	f8d8 1000 	ldr.w	r1, [r8]
    27ea:	eba0 0001 	sub.w	r0, r0, r1
    27ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    27f2:	2802      	cmp	r0, #2
    27f4:	d304      	bcc.n	2800 <MPSL_IRQ_RTC0_Handler+0xd4>
    27f6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    27fa:	bf38      	it	cc
    27fc:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    2800:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    2804:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    2808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    280c:	2006      	movs	r0, #6
    280e:	f7fe bee1 	b.w	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2812:	0000      	.short	0x0000
    2814:	4000b000 	.word	0x4000b000
    2818:	4000b504 	.word	0x4000b504
    281c:	4000b540 	.word	0x4000b540
    2820:	4000b544 	.word	0x4000b544
    2824:	4000b548 	.word	0x4000b548

00002828 <MPSL_IRQ_TIMER0_Handler>:
    2828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    282c:	4d3a      	ldr	r5, [pc, #232]	; (2918 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    282e:	7828      	ldrb	r0, [r5, #0]
    2830:	2804      	cmp	r0, #4
    2832:	d06c      	beq.n	290e <MPSL_IRQ_TIMER0_Handler+0xe6>
    2834:	1ce8      	adds	r0, r5, #3
    2836:	2201      	movs	r2, #1
    2838:	7801      	ldrb	r1, [r0, #0]
    283a:	b159      	cbz	r1, 2854 <MPSL_IRQ_TIMER0_Handler+0x2c>
    283c:	2901      	cmp	r1, #1
    283e:	bf08      	it	eq
    2840:	706a      	strbeq	r2, [r5, #1]
    2842:	d002      	beq.n	284a <MPSL_IRQ_TIMER0_Handler+0x22>
    2844:	7869      	ldrb	r1, [r5, #1]
    2846:	2900      	cmp	r1, #0
    2848:	d05c      	beq.n	2904 <MPSL_IRQ_TIMER0_Handler+0xdc>
    284a:	2102      	movs	r1, #2
    284c:	7001      	strb	r1, [r0, #0]
    284e:	7840      	ldrb	r0, [r0, #1]
    2850:	f000 fae2 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2854:	4c31      	ldr	r4, [pc, #196]	; (291c <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2856:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    285a:	f04f 0800 	mov.w	r8, #0
    285e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2862:	f44f 7680 	mov.w	r6, #256	; 0x100
    2866:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    286a:	bf1c      	itt	ne
    286c:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    2870:	2800      	cmpne	r0, #0
    2872:	d008      	beq.n	2886 <MPSL_IRQ_TIMER0_Handler+0x5e>
    2874:	f04f 0003 	mov.w	r0, #3
    2878:	f000 face 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    287c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2880:	2003      	movs	r0, #3
    2882:	f7fe fea7 	bl	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2886:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    288a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    288e:	bf1c      	itt	ne
    2890:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    2894:	2800      	cmpne	r0, #0
    2896:	d008      	beq.n	28aa <MPSL_IRQ_TIMER0_Handler+0x82>
    2898:	f04f 0002 	mov.w	r0, #2
    289c:	f000 fabc 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28a0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28a4:	2002      	movs	r0, #2
    28a6:	f7fe fe95 	bl	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28aa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28ae:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    28b2:	bf1c      	itt	ne
    28b4:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    28b8:	2800      	cmpne	r0, #0
    28ba:	d008      	beq.n	28ce <MPSL_IRQ_TIMER0_Handler+0xa6>
    28bc:	f04f 0001 	mov.w	r0, #1
    28c0:	f000 faaa 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28c4:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28c8:	2001      	movs	r0, #1
    28ca:	f7fe fe83 	bl	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    28ce:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28d2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    28d6:	bf1a      	itte	ne
    28d8:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    28dc:	2800      	cmpne	r0, #0
    28de:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    28e2:	f04f 0000 	mov.w	r0, #0
    28e6:	f000 fa97 	bl	2e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28ea:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28ee:	2004      	movs	r0, #4
    28f0:	7028      	strb	r0, [r5, #0]
    28f2:	f8c5 8008 	str.w	r8, [r5, #8]
    28f6:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    28fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28fe:	2000      	movs	r0, #0
    2900:	f7fe be68 	b.w	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2904:	f44f 715a 	mov.w	r1, #872	; 0x368
    2908:	206c      	movs	r0, #108	; 0x6c
    290a:	f000 ff0d 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    290e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2912:	2007      	movs	r0, #7
    2914:	f7fe be5e 	b.w	15d4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2918:	2000001c 	.word	0x2000001c
    291c:	40008000 	.word	0x40008000
    2920:	2201      	movs	r2, #1
    2922:	0213      	lsls	r3, r2, #8
    2924:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    2928:	2000      	movs	r0, #0
    292a:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    292e:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    2932:	f3bf 8f4f 	dsb	sy
    2936:	f3bf 8f6f 	isb	sy
    293a:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    293e:	490c      	ldr	r1, [pc, #48]	; (2970 <MPSL_IRQ_TIMER0_Handler+0x148>)
    2940:	604a      	str	r2, [r1, #4]
    2942:	1e43      	subs	r3, r0, #1
    2944:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2948:	4b0a      	ldr	r3, [pc, #40]	; (2974 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    294a:	6018      	str	r0, [r3, #0]
    294c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2950:	1d1b      	adds	r3, r3, #4
    2952:	6018      	str	r0, [r3, #0]
    2954:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2958:	1d1b      	adds	r3, r3, #4
    295a:	6018      	str	r0, [r3, #0]
    295c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2960:	1d1b      	adds	r3, r3, #4
    2962:	6018      	str	r0, [r3, #0]
    2964:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2968:	610a      	str	r2, [r1, #16]
    296a:	4903      	ldr	r1, [pc, #12]	; (2978 <MPSL_IRQ_TIMER0_Handler+0x150>)
    296c:	7048      	strb	r0, [r1, #1]
    296e:	4770      	bx	lr
    2970:	40008000 	.word	0x40008000
    2974:	40008540 	.word	0x40008540
    2978:	2000001c 	.word	0x2000001c

0000297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    297c:	4801      	ldr	r0, [pc, #4]	; (2984 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    297e:	6800      	ldr	r0, [r0, #0]
    2980:	4770      	bx	lr
    2982:	0000      	.short	0x0000
    2984:	4000b504 	.word	0x4000b504

00002988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2988:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    298c:	4e41      	ldr	r6, [pc, #260]	; (2a94 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    298e:	4604      	mov	r4, r0
    2990:	1ef7      	subs	r7, r6, #3
    2992:	f896 c000 	ldrb.w	ip, [r6]
    2996:	68f8      	ldr	r0, [r7, #12]
    2998:	f1bc 0f01 	cmp.w	ip, #1
    299c:	bf04      	itt	eq
    299e:	42a0      	cmpeq	r0, r4
    29a0:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    29a4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    29a8:	4a3b      	ldr	r2, [pc, #236]	; (2a98 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    29aa:	6011      	str	r1, [r2, #0]
    29ac:	493b      	ldr	r1, [pc, #236]	; (2a9c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    29ae:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    29b2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29b6:	4a3a      	ldr	r2, [pc, #232]	; (2aa0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    29b8:	f04f 0500 	mov.w	r5, #0
    29bc:	f1bc 0f00 	cmp.w	ip, #0
    29c0:	d057      	beq.n	2a72 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xea>
    29c2:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    29c6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    29ca:	6015      	str	r5, [r2, #0]
    29cc:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    29d0:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    29d4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    29d8:	f04f 0801 	mov.w	r8, #1
    29dc:	2a00      	cmp	r2, #0
    29de:	bf04      	itt	eq
    29e0:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    29e4:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    29e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    29ec:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    29f0:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    29f4:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    29f8:	4a2a      	ldr	r2, [pc, #168]	; (2aa4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x11c>)
    29fa:	f8d2 a000 	ldr.w	sl, [r2]
    29fe:	eba4 0a0a 	sub.w	sl, r4, sl
    2a02:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    2a06:	f1bb 0f02 	cmp.w	fp, #2
    2a0a:	d33c      	bcc.n	2a86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a0c:	f04f 0a02 	mov.w	sl, #2
    2a10:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    2a14:	d237      	bcs.n	2a86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfe>
    2a16:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2a1a:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2a1e:	f1bc 0f00 	cmp.w	ip, #0
    2a22:	d005      	beq.n	2a30 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa8>
    2a24:	6811      	ldr	r1, [r2, #0]
    2a26:	1a41      	subs	r1, r0, r1
    2a28:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2a2c:	2902      	cmp	r1, #2
    2a2e:	d3f9      	bcc.n	2a24 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9c>
    2a30:	f8c7 8008 	str.w	r8, [r7, #8]
    2a34:	703d      	strb	r5, [r7, #0]
    2a36:	f7ff ff73 	bl	2920 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2a3a:	481b      	ldr	r0, [pc, #108]	; (2aa8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x120>)
    2a3c:	6005      	str	r5, [r0, #0]
    2a3e:	1d00      	adds	r0, r0, #4
    2a40:	f8c0 a000 	str.w	sl, [r0]
    2a44:	4919      	ldr	r1, [pc, #100]	; (2aac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2a46:	2004      	movs	r0, #4
    2a48:	6008      	str	r0, [r1, #0]
    2a4a:	4919      	ldr	r1, [pc, #100]	; (2ab0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2a4c:	f8c1 800c 	str.w	r8, [r1, #12]
    2a50:	68ba      	ldr	r2, [r7, #8]
    2a52:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    2a56:	0181      	lsls	r1, r0, #6
    2a58:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    2a5c:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    2a60:	4a14      	ldr	r2, [pc, #80]	; (2ab4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2a62:	0741      	lsls	r1, r0, #29
    2a64:	6011      	str	r1, [r2, #0]
    2a66:	60fc      	str	r4, [r7, #12]
    2a68:	7070      	strb	r0, [r6, #1]
    2a6a:	f886 8000 	strb.w	r8, [r6]
    2a6e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2a72:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2a76:	4b10      	ldr	r3, [pc, #64]	; (2ab8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2a78:	601d      	str	r5, [r3, #0]
    2a7a:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    2a7e:	6015      	str	r5, [r2, #0]
    2a80:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    2a84:	e7a4      	b.n	29d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    2a86:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    2a8a:	f240 11f1 	movw	r1, #497	; 0x1f1
    2a8e:	206c      	movs	r0, #108	; 0x6c
    2a90:	f000 fe4a 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a94:	2000001f 	.word	0x2000001f
    2a98:	4001f508 	.word	0x4001f508
    2a9c:	4000b000 	.word	0x4000b000
    2aa0:	4000b544 	.word	0x4000b544
    2aa4:	4000b504 	.word	0x4000b504
    2aa8:	40008504 	.word	0x40008504
    2aac:	40008510 	.word	0x40008510
    2ab0:	40008000 	.word	0x40008000
    2ab4:	4001f504 	.word	0x4001f504
    2ab8:	4000b540 	.word	0x4000b540

00002abc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ac0:	4c2b      	ldr	r4, [pc, #172]	; (2b70 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2ac2:	68e1      	ldr	r1, [r4, #12]
    2ac4:	4281      	cmp	r1, r0
    2ac6:	bf14      	ite	ne
    2ac8:	2201      	movne	r2, #1
    2aca:	2200      	moveq	r2, #0
    2acc:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 2b74 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2ad0:	f89c 7000 	ldrb.w	r7, [ip]
    2ad4:	2f02      	cmp	r7, #2
    2ad6:	d002      	beq.n	2ade <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    2ad8:	2a00      	cmp	r2, #0
    2ada:	d038      	beq.n	2b4e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    2adc:	e003      	b.n	2ae6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    2ade:	2a00      	cmp	r2, #0
    2ae0:	bf08      	it	eq
    2ae2:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ae6:	7862      	ldrb	r2, [r4, #1]
    2ae8:	b382      	cbz	r2, 2b4c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    2aea:	4b23      	ldr	r3, [pc, #140]	; (2b78 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2af0:	601a      	str	r2, [r3, #0]
    2af2:	4b22      	ldr	r3, [pc, #136]	; (2b7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2af4:	1395      	asrs	r5, r2, #14
    2af6:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    2afa:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    2afe:	2600      	movs	r6, #0
    2b00:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    2b04:	4a1e      	ldr	r2, [pc, #120]	; (2b80 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2b06:	f8d2 8000 	ldr.w	r8, [r2]
    2b0a:	eba0 0808 	sub.w	r8, r0, r8
    2b0e:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    2b12:	f1b8 0f02 	cmp.w	r8, #2
    2b16:	d324      	bcc.n	2b62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b18:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    2b1c:	d221      	bcs.n	2b62 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    2b1e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b22:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    2b26:	b12f      	cbz	r7, 2b34 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    2b28:	6813      	ldr	r3, [r2, #0]
    2b2a:	1acb      	subs	r3, r1, r3
    2b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b30:	2b02      	cmp	r3, #2
    2b32:	d3f9      	bcc.n	2b28 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    2b34:	4b13      	ldr	r3, [pc, #76]	; (2b84 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    2b36:	2102      	movs	r1, #2
    2b38:	074a      	lsls	r2, r1, #29
    2b3a:	601a      	str	r2, [r3, #0]
    2b3c:	60e0      	str	r0, [r4, #12]
    2b3e:	2004      	movs	r0, #4
    2b40:	f88c 0001 	strb.w	r0, [ip, #1]
    2b44:	f88c 1000 	strb.w	r1, [ip]
    2b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2b4c:	e004      	b.n	2b58 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    2b4e:	f240 11ff 	movw	r1, #511	; 0x1ff
    2b52:	206c      	movs	r0, #108	; 0x6c
    2b54:	f000 fde8 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b58:	f240 2103 	movw	r1, #515	; 0x203
    2b5c:	206c      	movs	r0, #108	; 0x6c
    2b5e:	f000 fde3 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b62:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    2b66:	f240 210f 	movw	r1, #527	; 0x20f
    2b6a:	206c      	movs	r0, #108	; 0x6c
    2b6c:	f000 fddc 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2b70:	2000001c 	.word	0x2000001c
    2b74:	2000001f 	.word	0x2000001f
    2b78:	4001f508 	.word	0x4001f508
    2b7c:	4000b000 	.word	0x4000b000
    2b80:	4000b504 	.word	0x4000b504
    2b84:	4001f504 	.word	0x4001f504

00002b88 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2b88:	4801      	ldr	r0, [pc, #4]	; (2b90 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2b8a:	68c0      	ldr	r0, [r0, #12]
    2b8c:	4770      	bx	lr
    2b8e:	0000      	.short	0x0000
    2b90:	2000001c 	.word	0x2000001c

00002b94 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b98:	4833      	ldr	r0, [pc, #204]	; (2c68 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    2b9a:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    2b9e:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    2ba2:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 2c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    2ba6:	4a32      	ldr	r2, [pc, #200]	; (2c70 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    2ba8:	2100      	movs	r1, #0
    2baa:	f89c 3000 	ldrb.w	r3, [ip]
    2bae:	b163      	cbz	r3, 2bca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    2bb0:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    2bb4:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2bb8:	6011      	str	r1, [r2, #0]
    2bba:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2bbe:	bf00      	nop
    2bc0:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    2bc4:	2201      	movs	r2, #1
    2bc6:	b980      	cbnz	r0, 2bea <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    2bc8:	e009      	b.n	2bde <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    2bca:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    2bce:	4c29      	ldr	r4, [pc, #164]	; (2c74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2bd0:	6021      	str	r1, [r4, #0]
    2bd2:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    2bd6:	6011      	str	r1, [r2, #0]
    2bd8:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    2bdc:	e7f0      	b.n	2bc0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    2bde:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2be2:	f44f 6000 	mov.w	r0, #2048	; 0x800
    2be6:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    2bea:	2b02      	cmp	r3, #2
    2bec:	d004      	beq.n	2bf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    2bee:	f240 211b 	movw	r1, #539	; 0x21b
    2bf2:	206c      	movs	r0, #108	; 0x6c
    2bf4:	f000 fd98 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2bf8:	4e1f      	ldr	r6, [pc, #124]	; (2c78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2bfa:	6830      	ldr	r0, [r6, #0]
    2bfc:	4c1f      	ldr	r4, [pc, #124]	; (2c7c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2bfe:	1cc0      	adds	r0, r0, #3
    2c00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c04:	68e3      	ldr	r3, [r4, #12]
    2c06:	4d1e      	ldr	r5, [pc, #120]	; (2c80 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2c08:	4298      	cmp	r0, r3
    2c0a:	d00b      	beq.n	2c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c0c:	6837      	ldr	r7, [r6, #0]
    2c0e:	1bdf      	subs	r7, r3, r7
    2c10:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2c14:	2f04      	cmp	r7, #4
    2c16:	d305      	bcc.n	2c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c18:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2c1c:	d202      	bcs.n	2c24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    2c1e:	f7ff feb3 	bl	2988 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2c22:	e01b      	b.n	2c5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2c24:	6830      	ldr	r0, [r6, #0]
    2c26:	1a18      	subs	r0, r3, r0
    2c28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c2c:	2802      	cmp	r0, #2
    2c2e:	d313      	bcc.n	2c58 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2c30:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2c34:	d210      	bcs.n	2c58 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    2c36:	4b13      	ldr	r3, [pc, #76]	; (2c84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2c38:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2c3c:	6018      	str	r0, [r3, #0]
    2c3e:	60a2      	str	r2, [r4, #8]
    2c40:	7021      	strb	r1, [r4, #0]
    2c42:	606a      	str	r2, [r5, #4]
    2c44:	60ea      	str	r2, [r5, #12]
    2c46:	0040      	lsls	r0, r0, #1
    2c48:	1f19      	subs	r1, r3, #4
    2c4a:	6008      	str	r0, [r1, #0]
    2c4c:	2004      	movs	r0, #4
    2c4e:	f88c 0001 	strb.w	r0, [ip, #1]
    2c52:	f88c 2000 	strb.w	r2, [ip]
    2c56:	e001      	b.n	2c5c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    2c58:	60a2      	str	r2, [r4, #8]
    2c5a:	7021      	strb	r1, [r4, #0]
    2c5c:	68a0      	ldr	r0, [r4, #8]
    2c5e:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    2c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c66:	0000      	.short	0x0000
    2c68:	4000b000 	.word	0x4000b000
    2c6c:	2000001f 	.word	0x2000001f
    2c70:	4000b544 	.word	0x4000b544
    2c74:	4000b540 	.word	0x4000b540
    2c78:	4000b504 	.word	0x4000b504
    2c7c:	2000001c 	.word	0x2000001c
    2c80:	40008000 	.word	0x40008000
    2c84:	4001f508 	.word	0x4001f508

00002c88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c8c:	f8df c174 	ldr.w	ip, [pc, #372]	; 2e04 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    2c90:	2701      	movs	r7, #1
    2c92:	f04f 0800 	mov.w	r8, #0
    2c96:	f89c 5000 	ldrb.w	r5, [ip]
    2c9a:	f89c c001 	ldrb.w	ip, [ip, #1]
    2c9e:	2807      	cmp	r0, #7
    2ca0:	d27e      	bcs.n	2da0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    2ca2:	e8df f000 	tbb	[pc, r0]
    2ca6:	0404      	.short	0x0404
    2ca8:	6a6a0404 	.word	0x6a6a0404
    2cac:	006a      	.short	0x006a
    2cae:	4c56      	ldr	r4, [pc, #344]	; (2e08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    2cb0:	68e6      	ldr	r6, [r4, #12]
    2cb2:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    2cb6:	bf04      	itt	eq
    2cb8:	7864      	ldrbeq	r4, [r4, #1]
    2cba:	2c00      	cmpeq	r4, #0
    2cbc:	d002      	beq.n	2cc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    2cbe:	2d02      	cmp	r5, #2
    2cc0:	d005      	beq.n	2cce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2cc2:	e03c      	b.n	2d3e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    2cc4:	f240 214e 	movw	r1, #590	; 0x24e
    2cc8:	206c      	movs	r0, #108	; 0x6c
    2cca:	f000 fd2d 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2cce:	ea4f 048c 	mov.w	r4, ip, lsl #2
    2cd2:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    2cd6:	f1ac 0404 	sub.w	r4, ip, #4
    2cda:	0624      	lsls	r4, r4, #24
    2cdc:	0da4      	lsrs	r4, r4, #22
    2cde:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    2ce2:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    2ce6:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    2cea:	2400      	movs	r4, #0
    2cec:	2d01      	cmp	r5, #1
    2cee:	d002      	beq.n	2cf6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    2cf0:	2d02      	cmp	r5, #2
    2cf2:	d011      	beq.n	2d18 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    2cf4:	e020      	b.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2cf6:	f1bc 0f04 	cmp.w	ip, #4
    2cfa:	d205      	bcs.n	2d08 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    2cfc:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d00:	f1ba 0f00 	cmp.w	sl, #0
    2d04:	d118      	bne.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d06:	e004      	b.n	2d12 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    2d08:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d0c:	f1ba 0f00 	cmp.w	sl, #0
    2d10:	d112      	bne.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d12:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    2d16:	e00f      	b.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d18:	f1bc 0f04 	cmp.w	ip, #4
    2d1c:	d205      	bcs.n	2d2a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    2d1e:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    2d22:	f1ba 0f00 	cmp.w	sl, #0
    2d26:	d107      	bne.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d28:	e004      	b.n	2d34 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    2d2a:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    2d2e:	f1ba 0f00 	cmp.w	sl, #0
    2d32:	d101      	bne.n	2d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    2d34:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    2d38:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    2d3c:	d1d5      	bne.n	2cea <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    2d3e:	4c33      	ldr	r4, [pc, #204]	; (2e0c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    2d40:	f100 0c10 	add.w	ip, r0, #16
    2d44:	fa07 fc0c 	lsl.w	ip, r7, ip
    2d48:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2d4c:	0080      	lsls	r0, r0, #2
    2d4e:	4420      	add	r0, r4
    2d50:	b152      	cbz	r2, 2d68 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    2d52:	6407      	str	r7, [r0, #64]	; 0x40
    2d54:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    2d58:	1b8d      	subs	r5, r1, r6
    2d5a:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2d5e:	42aa      	cmp	r2, r5
    2d60:	bf98      	it	ls
    2d62:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2d66:	d243      	bcs.n	2df0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2d68:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2d6c:	2b01      	cmp	r3, #1
    2d6e:	bf08      	it	eq
    2d70:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2d74:	2001      	movs	r0, #1
    2d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d7a:	b135      	cbz	r5, 2d8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2d7c:	4584      	cmp	ip, r0
    2d7e:	d104      	bne.n	2d8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    2d80:	f240 2171 	movw	r1, #625	; 0x271
    2d84:	206c      	movs	r0, #108	; 0x6c
    2d86:	f000 fccf 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d8a:	1f00      	subs	r0, r0, #4
    2d8c:	b2c0      	uxtb	r0, r0
    2d8e:	2b01      	cmp	r3, #1
    2d90:	bf0c      	ite	eq
    2d92:	2401      	moveq	r4, #1
    2d94:	2400      	movne	r4, #0
    2d96:	2803      	cmp	r0, #3
    2d98:	d306      	bcc.n	2da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    2d9a:	f240 114b 	movw	r1, #331	; 0x14b
    2d9e:	e000      	b.n	2da2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    2da0:	e02b      	b.n	2dfa <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    2da2:	206c      	movs	r0, #108	; 0x6c
    2da4:	f000 fcc0 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2da8:	f8df c064 	ldr.w	ip, [pc, #100]	; 2e10 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2dac:	f100 0310 	add.w	r3, r0, #16
    2db0:	fa07 f303 	lsl.w	r3, r7, r3
    2db4:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2db8:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2dbc:	0080      	lsls	r0, r0, #2
    2dbe:	4460      	add	r0, ip
    2dc0:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    2dc4:	b14a      	cbz	r2, 2dda <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    2dc6:	4d13      	ldr	r5, [pc, #76]	; (2e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    2dc8:	682e      	ldr	r6, [r5, #0]
    2dca:	1b8d      	subs	r5, r1, r6
    2dcc:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    2dd0:	42aa      	cmp	r2, r5
    2dd2:	bf98      	it	ls
    2dd4:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    2dd8:	d20a      	bcs.n	2df0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    2dda:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2dde:	2c00      	cmp	r4, #0
    2de0:	bf18      	it	ne
    2de2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2de6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2dea:	2001      	movs	r0, #1
    2dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2df0:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    2df4:	2000      	movs	r0, #0
    2df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2dfa:	f240 2176 	movw	r1, #630	; 0x276
    2dfe:	206c      	movs	r0, #108	; 0x6c
    2e00:	f000 fc92 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e04:	2000001f 	.word	0x2000001f
    2e08:	2000001c 	.word	0x2000001c
    2e0c:	40008000 	.word	0x40008000
    2e10:	4000b000 	.word	0x4000b000
    2e14:	4000b504 	.word	0x4000b504

00002e18 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e1a:	2701      	movs	r7, #1
    2e1c:	2400      	movs	r4, #0
    2e1e:	2807      	cmp	r0, #7
    2e20:	d24c      	bcs.n	2ebc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    2e22:	e8df f000 	tbb	[pc, r0]
    2e26:	0404      	.short	0x0404
    2e28:	16160404 	.word	0x16160404
    2e2c:	0016      	.short	0x0016
    2e2e:	4a26      	ldr	r2, [pc, #152]	; (2ec8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    2e30:	f100 0110 	add.w	r1, r0, #16
    2e34:	fa07 f101 	lsl.w	r1, r7, r1
    2e38:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    2e3c:	0081      	lsls	r1, r0, #2
    2e3e:	4411      	add	r1, r2
    2e40:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    2e44:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    2e48:	4920      	ldr	r1, [pc, #128]	; (2ecc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    2e4a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    2e4e:	9000      	str	r0, [sp, #0]
    2e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2e52:	4d1f      	ldr	r5, [pc, #124]	; (2ed0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    2e54:	1f01      	subs	r1, r0, #4
    2e56:	b2ce      	uxtb	r6, r1
    2e58:	7829      	ldrb	r1, [r5, #0]
    2e5a:	b179      	cbz	r1, 2e7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2e5c:	786a      	ldrb	r2, [r5, #1]
    2e5e:	4282      	cmp	r2, r0
    2e60:	d10c      	bne.n	2e7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    2e62:	4a1c      	ldr	r2, [pc, #112]	; (2ed4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    2e64:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2e68:	6010      	str	r0, [r2, #0]
    2e6a:	2901      	cmp	r1, #1
    2e6c:	bf08      	it	eq
    2e6e:	f7ff fd57 	bleq	2920 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2e72:	702c      	strb	r4, [r5, #0]
    2e74:	4918      	ldr	r1, [pc, #96]	; (2ed8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    2e76:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    2e7a:	60c8      	str	r0, [r1, #12]
    2e7c:	f106 0010 	add.w	r0, r6, #16
    2e80:	fa07 f100 	lsl.w	r1, r7, r0
    2e84:	4815      	ldr	r0, [pc, #84]	; (2edc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    2e86:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    2e8a:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    2e8e:	00b0      	lsls	r0, r6, #2
    2e90:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    2e94:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    2e98:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    2e9c:	4a10      	ldr	r2, [pc, #64]	; (2ee0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    2e9e:	6812      	ldr	r2, [r2, #0]
    2ea0:	1a89      	subs	r1, r1, r2
    2ea2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2ea6:	2902      	cmp	r1, #2
    2ea8:	bf24      	itt	cs
    2eaa:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    2eae:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    2eb2:	480c      	ldr	r0, [pc, #48]	; (2ee4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    2eb4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    2eb8:	9000      	str	r0, [sp, #0]
    2eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ebc:	f240 21ef 	movw	r1, #751	; 0x2ef
    2ec0:	206c      	movs	r0, #108	; 0x6c
    2ec2:	f000 fc31 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2ec6:	0000      	.short	0x0000
    2ec8:	40008000 	.word	0x40008000
    2ecc:	40008140 	.word	0x40008140
    2ed0:	2000001f 	.word	0x2000001f
    2ed4:	4001f508 	.word	0x4001f508
    2ed8:	2000001c 	.word	0x2000001c
    2edc:	4000b000 	.word	0x4000b000
    2ee0:	4000b504 	.word	0x4000b504
    2ee4:	4000b140 	.word	0x4000b140

00002ee8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    2ee8:	491e      	ldr	r1, [pc, #120]	; (2f64 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    2eea:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2eee:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2ef2:	481d      	ldr	r0, [pc, #116]	; (2f68 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    2ef4:	4a1d      	ldr	r2, [pc, #116]	; (2f6c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    2ef6:	f890 c000 	ldrb.w	ip, [r0]
    2efa:	2000      	movs	r0, #0
    2efc:	f1bc 0f00 	cmp.w	ip, #0
    2f00:	d00a      	beq.n	2f18 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    2f02:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    2f06:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f0a:	6010      	str	r0, [r2, #0]
    2f0c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f10:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    2f14:	b981      	cbnz	r1, 2f38 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    2f16:	e009      	b.n	2f2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    2f18:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2f1c:	4b14      	ldr	r3, [pc, #80]	; (2f70 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    2f1e:	6018      	str	r0, [r3, #0]
    2f20:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f24:	6010      	str	r0, [r2, #0]
    2f26:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f2a:	e7f1      	b.n	2f10 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    2f2c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    2f30:	f44f 6100 	mov.w	r1, #2048	; 0x800
    2f34:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    2f38:	490e      	ldr	r1, [pc, #56]	; (2f74 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    2f3a:	f04f 32ff 	mov.w	r2, #4294967295
    2f3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    2f42:	4a0d      	ldr	r2, [pc, #52]	; (2f78 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    2f44:	6010      	str	r0, [r2, #0]
    2f46:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2f4a:	1d12      	adds	r2, r2, #4
    2f4c:	6010      	str	r0, [r2, #0]
    2f4e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2f52:	1d12      	adds	r2, r2, #4
    2f54:	6010      	str	r0, [r2, #0]
    2f56:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2f5a:	1d12      	adds	r2, r2, #4
    2f5c:	6010      	str	r0, [r2, #0]
    2f5e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    2f62:	4770      	bx	lr
    2f64:	4000b000 	.word	0x4000b000
    2f68:	2000001f 	.word	0x2000001f
    2f6c:	4000b544 	.word	0x4000b544
    2f70:	4000b540 	.word	0x4000b540
    2f74:	40008000 	.word	0x40008000
    2f78:	40008540 	.word	0x40008540

00002f7c <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    2f7c:	4808      	ldr	r0, [pc, #32]	; (2fa0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    2f7e:	f990 0002 	ldrsb.w	r0, [r0, #2]
    2f82:	2800      	cmp	r0, #0
    2f84:	bfb8      	it	lt
    2f86:	4770      	bxlt	lr
    2f88:	f000 011f 	and.w	r1, r0, #31
    2f8c:	2201      	movs	r2, #1
    2f8e:	fa02 f101 	lsl.w	r1, r2, r1
    2f92:	0940      	lsrs	r0, r0, #5
    2f94:	0080      	lsls	r0, r0, #2
    2f96:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2f9a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2f9e:	4770      	bx	lr
    2fa0:	2000001c 	.word	0x2000001c

00002fa4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    2fa4:	b510      	push	{r4, lr}
    2fa6:	2807      	cmp	r0, #7
    2fa8:	d20d      	bcs.n	2fc6 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    2faa:	e8df f000 	tbb	[pc, r0]
    2fae:	0404      	.short	0x0404
    2fb0:	06060404 	.word	0x06060404
    2fb4:	0006      	.short	0x0006
    2fb6:	4906      	ldr	r1, [pc, #24]	; (2fd0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    2fb8:	e002      	b.n	2fc0 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    2fba:	1f00      	subs	r0, r0, #4
    2fbc:	4905      	ldr	r1, [pc, #20]	; (2fd4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    2fbe:	b2c0      	uxtb	r0, r0
    2fc0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    2fc4:	bd10      	pop	{r4, pc}
    2fc6:	f240 219a 	movw	r1, #666	; 0x29a
    2fca:	206c      	movs	r0, #108	; 0x6c
    2fcc:	f000 fbac 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fd0:	40008140 	.word	0x40008140
    2fd4:	4000b140 	.word	0x4000b140

00002fd8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    2fd8:	b570      	push	{r4, r5, r6, lr}
    2fda:	4819      	ldr	r0, [pc, #100]	; (3040 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    2fdc:	2400      	movs	r4, #0
    2fde:	2104      	movs	r1, #4
    2fe0:	7004      	strb	r4, [r0, #0]
    2fe2:	1ec0      	subs	r0, r0, #3
    2fe4:	7001      	strb	r1, [r0, #0]
    2fe6:	0589      	lsls	r1, r1, #22
    2fe8:	60c1      	str	r1, [r0, #12]
    2fea:	f7ff fc99 	bl	2920 <MPSL_IRQ_TIMER0_Handler+0xf8>
    2fee:	2501      	movs	r5, #1
    2ff0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    2ff4:	02eb      	lsls	r3, r5, #11
    2ff6:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    2ffa:	f3bf 8f4f 	dsb	sy
    2ffe:	f3bf 8f6f 	isb	sy
    3002:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    3006:	4a0f      	ldr	r2, [pc, #60]	; (3044 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    3008:	6055      	str	r5, [r2, #4]
    300a:	6095      	str	r5, [r2, #8]
    300c:	480e      	ldr	r0, [pc, #56]	; (3048 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    300e:	6801      	ldr	r1, [r0, #0]
    3010:	2900      	cmp	r1, #0
    3012:	d1fc      	bne.n	300e <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    3014:	1e48      	subs	r0, r1, #1
    3016:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    301a:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    301e:	480b      	ldr	r0, [pc, #44]	; (304c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    3020:	6004      	str	r4, [r0, #0]
    3022:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    3026:	1d00      	adds	r0, r0, #4
    3028:	6004      	str	r4, [r0, #0]
    302a:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    302e:	1d00      	adds	r0, r0, #4
    3030:	6004      	str	r4, [r0, #0]
    3032:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    3036:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    303a:	6015      	str	r5, [r2, #0]
    303c:	bd70      	pop	{r4, r5, r6, pc}
    303e:	0000      	.short	0x0000
    3040:	2000001f 	.word	0x2000001f
    3044:	4000b000 	.word	0x4000b000
    3048:	4000b504 	.word	0x4000b504
    304c:	4000b540 	.word	0x4000b540

00003050 <MPSL_IRQ_CLOCK_Handler>:
    3050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3054:	4c16      	ldr	r4, [pc, #88]	; (30b0 <MPSL_IRQ_CLOCK_Handler+0x60>)
    3056:	7a60      	ldrb	r0, [r4, #9]
    3058:	2800      	cmp	r0, #0
    305a:	d027      	beq.n	30ac <MPSL_IRQ_CLOCK_Handler+0x5c>
    305c:	f44f 7180 	mov.w	r1, #256	; 0x100
    3060:	058d      	lsls	r5, r1, #22
    3062:	4628      	mov	r0, r5
    3064:	f008 fb41 	bl	b6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3068:	4680      	mov	r8, r0
    306a:	f44f 7182 	mov.w	r1, #260	; 0x104
    306e:	4628      	mov	r0, r5
    3070:	f008 fb3b 	bl	b6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3074:	2600      	movs	r6, #0
    3076:	4607      	mov	r7, r0
    3078:	f1b8 0f00 	cmp.w	r8, #0
    307c:	d009      	beq.n	3092 <MPSL_IRQ_CLOCK_Handler+0x42>
    307e:	2001      	movs	r0, #1
    3080:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3084:	7920      	ldrb	r0, [r4, #4]
    3086:	b120      	cbz	r0, 3092 <MPSL_IRQ_CLOCK_Handler+0x42>
    3088:	7126      	strb	r6, [r4, #4]
    308a:	69e0      	ldr	r0, [r4, #28]
    308c:	b108      	cbz	r0, 3092 <MPSL_IRQ_CLOCK_Handler+0x42>
    308e:	4780      	blx	r0
    3090:	61e6      	str	r6, [r4, #28]
    3092:	b137      	cbz	r7, 30a2 <MPSL_IRQ_CLOCK_Handler+0x52>
    3094:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3098:	2002      	movs	r0, #2
    309a:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    309e:	f000 fa8b 	bl	35b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    30a2:	4640      	mov	r0, r8
    30a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    30a8:	f000 b85a 	b.w	3160 <MPSL_IRQ_CLOCK_Handler+0x110>
    30ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30b0:	2000002c 	.word	0x2000002c
    30b4:	b510      	push	{r4, lr}
    30b6:	f008 fbc2 	bl	b83e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    30ba:	b930      	cbnz	r0, 30ca <MPSL_IRQ_CLOCK_Handler+0x7a>
    30bc:	f008 fbe0 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    30c0:	b918      	cbnz	r0, 30ca <MPSL_IRQ_CLOCK_Handler+0x7a>
    30c2:	f008 fc13 	bl	b8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    30c6:	2800      	cmp	r0, #0
    30c8:	d002      	beq.n	30d0 <MPSL_IRQ_CLOCK_Handler+0x80>
    30ca:	4902      	ldr	r1, [pc, #8]	; (30d4 <MPSL_IRQ_CLOCK_Handler+0x84>)
    30cc:	2002      	movs	r0, #2
    30ce:	6008      	str	r0, [r1, #0]
    30d0:	bd10      	pop	{r4, pc}
    30d2:	0000      	.short	0x0000
    30d4:	40000c34 	.word	0x40000c34
    30d8:	b570      	push	{r4, r5, r6, lr}
    30da:	f000 f987 	bl	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    30de:	f000 fabf 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    30e2:	4c09      	ldr	r4, [pc, #36]	; (3108 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    30e4:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    30e8:	b130      	cbz	r0, 30f8 <MPSL_IRQ_CLOCK_Handler+0xa8>
    30ea:	f7ff ffe3 	bl	30b4 <MPSL_IRQ_CLOCK_Handler+0x64>
    30ee:	2001      	movs	r0, #1
    30f0:	6128      	str	r0, [r5, #16]
    30f2:	2004      	movs	r0, #4
    30f4:	72a0      	strb	r0, [r4, #10]
    30f6:	e004      	b.n	3102 <MPSL_IRQ_CLOCK_Handler+0xb2>
    30f8:	2003      	movs	r0, #3
    30fa:	72a0      	strb	r0, [r4, #10]
    30fc:	2001      	movs	r0, #1
    30fe:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3102:	2000      	movs	r0, #0
    3104:	71e0      	strb	r0, [r4, #7]
    3106:	bd70      	pop	{r4, r5, r6, pc}
    3108:	2000002c 	.word	0x2000002c
    310c:	b570      	push	{r4, r5, r6, lr}
    310e:	4c13      	ldr	r4, [pc, #76]	; (315c <MPSL_IRQ_CLOCK_Handler+0x10c>)
    3110:	79a0      	ldrb	r0, [r4, #6]
    3112:	b1f0      	cbz	r0, 3152 <MPSL_IRQ_CLOCK_Handler+0x102>
    3114:	2801      	cmp	r0, #1
    3116:	d003      	beq.n	3120 <MPSL_IRQ_CLOCK_Handler+0xd0>
    3118:	79e1      	ldrb	r1, [r4, #7]
    311a:	1e40      	subs	r0, r0, #1
    311c:	4281      	cmp	r1, r0
    311e:	da18      	bge.n	3152 <MPSL_IRQ_CLOCK_Handler+0x102>
    3120:	f000 fa9e 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3124:	4605      	mov	r5, r0
    3126:	f000 fb6f 	bl	3808 <mpsl_temperature_get>
    312a:	79a1      	ldrb	r1, [r4, #6]
    312c:	2901      	cmp	r1, #1
    312e:	d902      	bls.n	3136 <MPSL_IRQ_CLOCK_Handler+0xe6>
    3130:	79e1      	ldrb	r1, [r4, #7]
    3132:	1c49      	adds	r1, r1, #1
    3134:	71e1      	strb	r1, [r4, #7]
    3136:	b10d      	cbz	r5, 313c <MPSL_IRQ_CLOCK_Handler+0xec>
    3138:	6961      	ldr	r1, [r4, #20]
    313a:	e000      	b.n	313e <MPSL_IRQ_CLOCK_Handler+0xee>
    313c:	6921      	ldr	r1, [r4, #16]
    313e:	1a41      	subs	r1, r0, r1
    3140:	2902      	cmp	r1, #2
    3142:	da02      	bge.n	314a <MPSL_IRQ_CLOCK_Handler+0xfa>
    3144:	f111 0f02 	cmn.w	r1, #2
    3148:	dc07      	bgt.n	315a <MPSL_IRQ_CLOCK_Handler+0x10a>
    314a:	b10d      	cbz	r5, 3150 <MPSL_IRQ_CLOCK_Handler+0x100>
    314c:	6160      	str	r0, [r4, #20]
    314e:	e000      	b.n	3152 <MPSL_IRQ_CLOCK_Handler+0x102>
    3150:	6120      	str	r0, [r4, #16]
    3152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3156:	f7ff bfbf 	b.w	30d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    315a:	bd70      	pop	{r4, r5, r6, pc}
    315c:	2000002c 	.word	0x2000002c
    3160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3164:	4606      	mov	r6, r0
    3166:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    316a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    316e:	4628      	mov	r0, r5
    3170:	f008 fabb 	bl	b6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3174:	4680      	mov	r8, r0
    3176:	f44f 7188 	mov.w	r1, #272	; 0x110
    317a:	4628      	mov	r0, r5
    317c:	f008 fab5 	bl	b6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3180:	4c27      	ldr	r4, [pc, #156]	; (3220 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3182:	4682      	mov	sl, r0
    3184:	7827      	ldrb	r7, [r4, #0]
    3186:	f104 0008 	add.w	r0, r4, #8
    318a:	f008 fb22 	bl	b7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    318e:	b110      	cbz	r0, 3196 <MPSL_IRQ_CLOCK_Handler+0x146>
    3190:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3194:	e016      	b.n	31c4 <MPSL_IRQ_CLOCK_Handler+0x174>
    3196:	f04f 0901 	mov.w	r9, #1
    319a:	b146      	cbz	r6, 31ae <MPSL_IRQ_CLOCK_Handler+0x15e>
    319c:	7aa0      	ldrb	r0, [r4, #10]
    319e:	2803      	cmp	r0, #3
    31a0:	d105      	bne.n	31ae <MPSL_IRQ_CLOCK_Handler+0x15e>
    31a2:	2004      	movs	r0, #4
    31a4:	72a0      	strb	r0, [r4, #10]
    31a6:	f7ff ff85 	bl	30b4 <MPSL_IRQ_CLOCK_Handler+0x64>
    31aa:	f8c5 9010 	str.w	r9, [r5, #16]
    31ae:	2600      	movs	r6, #0
    31b0:	f1b8 0f00 	cmp.w	r8, #0
    31b4:	d018      	beq.n	31e8 <MPSL_IRQ_CLOCK_Handler+0x198>
    31b6:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    31ba:	7aa0      	ldrb	r0, [r4, #10]
    31bc:	2804      	cmp	r0, #4
    31be:	d004      	beq.n	31ca <MPSL_IRQ_CLOCK_Handler+0x17a>
    31c0:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    31c4:	206d      	movs	r0, #109	; 0x6d
    31c6:	f000 faaf 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31ca:	f008 fb38 	bl	b83e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    31ce:	b928      	cbnz	r0, 31dc <MPSL_IRQ_CLOCK_Handler+0x18c>
    31d0:	f008 fb56 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    31d4:	b910      	cbnz	r0, 31dc <MPSL_IRQ_CLOCK_Handler+0x18c>
    31d6:	f008 fb89 	bl	b8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    31da:	b108      	cbz	r0, 31e0 <MPSL_IRQ_CLOCK_Handler+0x190>
    31dc:	4811      	ldr	r0, [pc, #68]	; (3224 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    31de:	6006      	str	r6, [r0, #0]
    31e0:	2002      	movs	r0, #2
    31e2:	72a0      	strb	r0, [r4, #10]
    31e4:	f000 f8e6 	bl	33b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    31e8:	f1ba 0f00 	cmp.w	sl, #0
    31ec:	d008      	beq.n	3200 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    31ee:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    31f2:	7aa0      	ldrb	r0, [r4, #10]
    31f4:	2802      	cmp	r0, #2
    31f6:	d101      	bne.n	31fc <MPSL_IRQ_CLOCK_Handler+0x1ac>
    31f8:	f7ff ff88 	bl	310c <MPSL_IRQ_CLOCK_Handler+0xbc>
    31fc:	f8c5 9014 	str.w	r9, [r5, #20]
    3200:	b13f      	cbz	r7, 3212 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    3202:	7026      	strb	r6, [r4, #0]
    3204:	7aa0      	ldrb	r0, [r4, #10]
    3206:	2802      	cmp	r0, #2
    3208:	d101      	bne.n	320e <MPSL_IRQ_CLOCK_Handler+0x1be>
    320a:	f7ff ff65 	bl	30d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    320e:	f000 f8d1 	bl	33b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3212:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3216:	4802      	ldr	r0, [pc, #8]	; (3220 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3218:	3008      	adds	r0, #8
    321a:	f008 baf1 	b.w	b800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    321e:	0000      	.short	0x0000
    3220:	2000002c 	.word	0x2000002c
    3224:	40000c34 	.word	0x40000c34
    3228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    322c:	4c5c      	ldr	r4, [pc, #368]	; (33a0 <MPSL_IRQ_CLOCK_Handler+0x350>)
    322e:	f04f 0800 	mov.w	r8, #0
    3232:	4606      	mov	r6, r0
    3234:	f8c4 8018 	str.w	r8, [r4, #24]
    3238:	7843      	ldrb	r3, [r0, #1]
    323a:	7882      	ldrb	r2, [r0, #2]
    323c:	7800      	ldrb	r0, [r0, #0]
    323e:	72e0      	strb	r0, [r4, #11]
    3240:	7163      	strb	r3, [r4, #5]
    3242:	2701      	movs	r7, #1
    3244:	71a2      	strb	r2, [r4, #6]
    3246:	07bd      	lsls	r5, r7, #30
    3248:	f884 8007 	strb.w	r8, [r4, #7]
    324c:	2805      	cmp	r0, #5
    324e:	d224      	bcs.n	329a <MPSL_IRQ_CLOCK_Handler+0x24a>
    3250:	e8df f000 	tbb	[pc, r0]
    3254:	1f05030f 	.word	0x1f05030f
    3258:	0021      	.short	0x0021
    325a:	61a7      	str	r7, [r4, #24]
    325c:	e009      	b.n	3272 <MPSL_IRQ_CLOCK_Handler+0x222>
    325e:	f000 f8c5 	bl	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3262:	2101      	movs	r1, #1
    3264:	4628      	mov	r0, r5
    3266:	f008 fa45 	bl	b6f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    326a:	2800      	cmp	r0, #0
    326c:	d0f9      	beq.n	3262 <MPSL_IRQ_CLOCK_Handler+0x212>
    326e:	2002      	movs	r0, #2
    3270:	61a0      	str	r0, [r4, #24]
    3272:	f008 fa6b 	bl	b74c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3276:	b1b0      	cbz	r0, 32a6 <MPSL_IRQ_CLOCK_Handler+0x256>
    3278:	f000 fa0c 	bl	3694 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    327c:	7e21      	ldrb	r1, [r4, #24]
    327e:	f001 0103 	and.w	r1, r1, #3
    3282:	4288      	cmp	r0, r1
    3284:	d10f      	bne.n	32a6 <MPSL_IRQ_CLOCK_Handler+0x256>
    3286:	79b0      	ldrb	r0, [r6, #6]
    3288:	b150      	cbz	r0, 32a0 <MPSL_IRQ_CLOCK_Handler+0x250>
    328a:	2002      	movs	r0, #2
    328c:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3290:	e06a      	b.n	3368 <MPSL_IRQ_CLOCK_Handler+0x318>
    3292:	4844      	ldr	r0, [pc, #272]	; (33a4 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3294:	e7ec      	b.n	3270 <MPSL_IRQ_CLOCK_Handler+0x220>
    3296:	4844      	ldr	r0, [pc, #272]	; (33a8 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3298:	e7ea      	b.n	3270 <MPSL_IRQ_CLOCK_Handler+0x220>
    329a:	f44f 714c 	mov.w	r1, #816	; 0x330
    329e:	e049      	b.n	3334 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    32a0:	f000 f9cc 	bl	363c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    32a4:	e060      	b.n	3368 <MPSL_IRQ_CLOCK_Handler+0x318>
    32a6:	60ef      	str	r7, [r5, #12]
    32a8:	f44f 7a82 	mov.w	sl, #260	; 0x104
    32ac:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    32b0:	69a0      	ldr	r0, [r4, #24]
    32b2:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    32b6:	f008 faae 	bl	b816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    32ba:	b940      	cbnz	r0, 32ce <MPSL_IRQ_CLOCK_Handler+0x27e>
    32bc:	f008 fab5 	bl	b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    32c0:	b928      	cbnz	r0, 32ce <MPSL_IRQ_CLOCK_Handler+0x27e>
    32c2:	f008 fac9 	bl	b858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    32c6:	b910      	cbnz	r0, 32ce <MPSL_IRQ_CLOCK_Handler+0x27e>
    32c8:	f008 fada 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    32cc:	b138      	cbz	r0, 32de <MPSL_IRQ_CLOCK_Handler+0x28e>
    32ce:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    32d2:	4836      	ldr	r0, [pc, #216]	; (33ac <MPSL_IRQ_CLOCK_Handler+0x35c>)
    32d4:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    32d8:	f3c1 3142 	ubfx	r1, r1, #13, #3
    32dc:	6001      	str	r1, [r0, #0]
    32de:	f008 fa9a 	bl	b816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    32e2:	b940      	cbnz	r0, 32f6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    32e4:	f008 faa1 	bl	b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    32e8:	b928      	cbnz	r0, 32f6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    32ea:	f008 fab5 	bl	b858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    32ee:	b910      	cbnz	r0, 32f6 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    32f0:	f008 fac6 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    32f4:	b110      	cbz	r0, 32fc <MPSL_IRQ_CLOCK_Handler+0x2ac>
    32f6:	482d      	ldr	r0, [pc, #180]	; (33ac <MPSL_IRQ_CLOCK_Handler+0x35c>)
    32f8:	3010      	adds	r0, #16
    32fa:	6007      	str	r7, [r0, #0]
    32fc:	60af      	str	r7, [r5, #8]
    32fe:	2002      	movs	r0, #2
    3300:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    3304:	79b0      	ldrb	r0, [r6, #6]
    3306:	bb78      	cbnz	r0, 3368 <MPSL_IRQ_CLOCK_Handler+0x318>
    3308:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    330c:	f010 0f02 	tst.w	r0, #2
    3310:	d00e      	beq.n	3330 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    3312:	f8df 909c 	ldr.w	r9, [pc, #156]	; 33b0 <MPSL_IRQ_CLOCK_Handler+0x360>
    3316:	f8d9 1000 	ldr.w	r1, [r9]
    331a:	43c9      	mvns	r1, r1
    331c:	f341 1700 	sbfx	r7, r1, #4, #1
    3320:	f8d9 1000 	ldr.w	r1, [r9]
    3324:	f041 0110 	orr.w	r1, r1, #16
    3328:	f8c9 1000 	str.w	r1, [r9]
    332c:	1c7f      	adds	r7, r7, #1
    332e:	e007      	b.n	3340 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    3330:	f240 21f1 	movw	r1, #753	; 0x2f1
    3334:	206d      	movs	r0, #109	; 0x6d
    3336:	f000 f9f7 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    333a:	bf00      	nop
    333c:	f000 fb1a 	bl	3974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3340:	4651      	mov	r1, sl
    3342:	4628      	mov	r0, r5
    3344:	f008 f9d1 	bl	b6ea <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3348:	2800      	cmp	r0, #0
    334a:	d0f7      	beq.n	333c <MPSL_IRQ_CLOCK_Handler+0x2ec>
    334c:	f000 f976 	bl	363c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3350:	b92f      	cbnz	r7, 335e <MPSL_IRQ_CLOCK_Handler+0x30e>
    3352:	f8d9 1000 	ldr.w	r1, [r9]
    3356:	f021 0110 	bic.w	r1, r1, #16
    335a:	f8c9 1000 	str.w	r1, [r9]
    335e:	2002      	movs	r0, #2
    3360:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3364:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3368:	79a0      	ldrb	r0, [r4, #6]
    336a:	b170      	cbz	r0, 338a <MPSL_IRQ_CLOCK_Handler+0x33a>
    336c:	7830      	ldrb	r0, [r6, #0]
    336e:	b960      	cbnz	r0, 338a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3370:	f000 f976 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3374:	4606      	mov	r6, r0
    3376:	f000 fa47 	bl	3808 <mpsl_temperature_get>
    337a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    337e:	b116      	cbz	r6, 3386 <MPSL_IRQ_CLOCK_Handler+0x336>
    3380:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3384:	e001      	b.n	338a <MPSL_IRQ_CLOCK_Handler+0x33a>
    3386:	e9c4 0204 	strd	r0, r2, [r4, #16]
    338a:	2101      	movs	r1, #1
    338c:	4628      	mov	r0, r5
    338e:	f008 f9b1 	bl	b6f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3392:	b108      	cbz	r0, 3398 <MPSL_IRQ_CLOCK_Handler+0x348>
    3394:	f000 f95e 	bl	3654 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3398:	f884 800a 	strb.w	r8, [r4, #10]
    339c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    33a0:	2000002c 	.word	0x2000002c
    33a4:	00020001 	.word	0x00020001
    33a8:	00030001 	.word	0x00030001
    33ac:	4000053c 	.word	0x4000053c
    33b0:	e000ed10 	.word	0xe000ed10

000033b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    33b4:	b510      	push	{r4, lr}
    33b6:	f3ef 8410 	mrs	r4, PRIMASK
    33ba:	b672      	cpsid	i
    33bc:	480a      	ldr	r0, [pc, #40]	; (33e8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    33be:	7841      	ldrb	r1, [r0, #1]
    33c0:	b129      	cbz	r1, 33ce <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    33c2:	7841      	ldrb	r1, [r0, #1]
    33c4:	1e49      	subs	r1, r1, #1
    33c6:	7041      	strb	r1, [r0, #1]
    33c8:	7841      	ldrb	r1, [r0, #1]
    33ca:	b129      	cbz	r1, 33d8 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    33cc:	e008      	b.n	33e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    33ce:	f240 110d 	movw	r1, #269	; 0x10d
    33d2:	206d      	movs	r0, #109	; 0x6d
    33d4:	f000 f9a8 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33d8:	7880      	ldrb	r0, [r0, #2]
    33da:	b908      	cbnz	r0, 33e0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    33dc:	f000 f94e 	bl	367c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    33e0:	2c00      	cmp	r4, #0
    33e2:	d100      	bne.n	33e6 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    33e4:	b662      	cpsie	i
    33e6:	bd10      	pop	{r4, pc}
    33e8:	2000002c 	.word	0x2000002c

000033ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    33ec:	b510      	push	{r4, lr}
    33ee:	f3ef 8410 	mrs	r4, PRIMASK
    33f2:	b672      	cpsid	i
    33f4:	4806      	ldr	r0, [pc, #24]	; (3410 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    33f6:	7841      	ldrb	r1, [r0, #1]
    33f8:	1c49      	adds	r1, r1, #1
    33fa:	7041      	strb	r1, [r0, #1]
    33fc:	7840      	ldrb	r0, [r0, #1]
    33fe:	2801      	cmp	r0, #1
    3400:	d101      	bne.n	3406 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    3402:	f008 f98e 	bl	b722 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    3406:	2c00      	cmp	r4, #0
    3408:	d100      	bne.n	340c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    340a:	b662      	cpsie	i
    340c:	bd10      	pop	{r4, pc}
    340e:	0000      	.short	0x0000
    3410:	2000002c 	.word	0x2000002c

00003414 <mpsl_clock_hfclk_release>:
    3414:	4805      	ldr	r0, [pc, #20]	; (342c <mpsl_clock_hfclk_release+0x18>)
    3416:	b510      	push	{r4, lr}
    3418:	78c1      	ldrb	r1, [r0, #3]
    341a:	b121      	cbz	r1, 3426 <mpsl_clock_hfclk_release+0x12>
    341c:	2100      	movs	r1, #0
    341e:	7101      	strb	r1, [r0, #4]
    3420:	70c1      	strb	r1, [r0, #3]
    3422:	f7ff ffc7 	bl	33b4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3426:	2000      	movs	r0, #0
    3428:	bd10      	pop	{r4, pc}
    342a:	0000      	.short	0x0000
    342c:	2000002c 	.word	0x2000002c

00003430 <mpsl_clock_hfclk_request>:
    3430:	b570      	push	{r4, r5, r6, lr}
    3432:	4c0c      	ldr	r4, [pc, #48]	; (3464 <mpsl_clock_hfclk_request+0x34>)
    3434:	78e1      	ldrb	r1, [r4, #3]
    3436:	b961      	cbnz	r1, 3452 <mpsl_clock_hfclk_request+0x22>
    3438:	2501      	movs	r5, #1
    343a:	70e5      	strb	r5, [r4, #3]
    343c:	61e0      	str	r0, [r4, #28]
    343e:	f7ff ffd5 	bl	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    3442:	f000 f90d 	bl	3660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3446:	b130      	cbz	r0, 3456 <mpsl_clock_hfclk_request+0x26>
    3448:	69e0      	ldr	r0, [r4, #28]
    344a:	b110      	cbz	r0, 3452 <mpsl_clock_hfclk_request+0x22>
    344c:	4780      	blx	r0
    344e:	2000      	movs	r0, #0
    3450:	61e0      	str	r0, [r4, #28]
    3452:	2000      	movs	r0, #0
    3454:	bd70      	pop	{r4, r5, r6, pc}
    3456:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    345a:	7125      	strb	r5, [r4, #4]
    345c:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    3460:	e7f7      	b.n	3452 <mpsl_clock_hfclk_request+0x22>
    3462:	0000      	.short	0x0000
    3464:	2000002c 	.word	0x2000002c

00003468 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3468:	f3ef 8010 	mrs	r0, PRIMASK
    346c:	b672      	cpsid	i
    346e:	4904      	ldr	r1, [pc, #16]	; (3480 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    3470:	788a      	ldrb	r2, [r1, #2]
    3472:	1c52      	adds	r2, r2, #1
    3474:	708a      	strb	r2, [r1, #2]
    3476:	2800      	cmp	r0, #0
    3478:	d100      	bne.n	347c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    347a:	b662      	cpsie	i
    347c:	4770      	bx	lr
    347e:	0000      	.short	0x0000
    3480:	2000002c 	.word	0x2000002c

00003484 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3484:	b510      	push	{r4, lr}
    3486:	f3ef 8410 	mrs	r4, PRIMASK
    348a:	b672      	cpsid	i
    348c:	480a      	ldr	r0, [pc, #40]	; (34b8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    348e:	7881      	ldrb	r1, [r0, #2]
    3490:	b129      	cbz	r1, 349e <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    3492:	7881      	ldrb	r1, [r0, #2]
    3494:	1e49      	subs	r1, r1, #1
    3496:	7081      	strb	r1, [r0, #2]
    3498:	7841      	ldrb	r1, [r0, #1]
    349a:	b129      	cbz	r1, 34a8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    349c:	e008      	b.n	34b0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    349e:	f240 1125 	movw	r1, #293	; 0x125
    34a2:	206d      	movs	r0, #109	; 0x6d
    34a4:	f000 f940 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34a8:	7880      	ldrb	r0, [r0, #2]
    34aa:	b908      	cbnz	r0, 34b0 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    34ac:	f000 f8e6 	bl	367c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    34b0:	2c00      	cmp	r4, #0
    34b2:	d100      	bne.n	34b6 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    34b4:	b662      	cpsie	i
    34b6:	bd10      	pop	{r4, pc}
    34b8:	2000002c 	.word	0x2000002c

000034bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    34bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    34c0:	0004      	movs	r4, r0
    34c2:	f06f 0015 	mvn.w	r0, #21
    34c6:	d03c      	beq.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34c8:	7821      	ldrb	r1, [r4, #0]
    34ca:	2904      	cmp	r1, #4
    34cc:	d839      	bhi.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34ce:	2900      	cmp	r1, #0
    34d0:	7861      	ldrb	r1, [r4, #1]
    34d2:	d038      	beq.n	3546 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    34d4:	2900      	cmp	r1, #0
    34d6:	d134      	bne.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34d8:	78a1      	ldrb	r1, [r4, #2]
    34da:	2900      	cmp	r1, #0
    34dc:	d131      	bne.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    34de:	2000      	movs	r0, #0
    34e0:	f008 f8ce 	bl	b680 <MPSL_IRQ_RADIO_Handler+0x1e>
    34e4:	2000      	movs	r0, #0
    34e6:	f008 f8be 	bl	b666 <MPSL_IRQ_RADIO_Handler+0x4>
    34ea:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    34ee:	f04f 31ff 	mov.w	r1, #4294967295
    34f2:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    34f6:	2600      	movs	r6, #0
    34f8:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    34fc:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    3500:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    3504:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    3508:	4f14      	ldr	r7, [pc, #80]	; (355c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    350a:	707e      	strb	r6, [r7, #1]
    350c:	88a0      	ldrh	r0, [r4, #4]
    350e:	81b8      	strh	r0, [r7, #12]
    3510:	f008 f8fe 	bl	b710 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3514:	2501      	movs	r5, #1
    3516:	b108      	cbz	r0, 351c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3518:	70fd      	strb	r5, [r7, #3]
    351a:	707d      	strb	r5, [r7, #1]
    351c:	2101      	movs	r1, #1
    351e:	4640      	mov	r0, r8
    3520:	f008 f8e8 	bl	b6f4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3524:	b108      	cbz	r0, 352a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3526:	f000 f895 	bl	3654 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    352a:	4620      	mov	r0, r4
    352c:	f7ff fe7c 	bl	3228 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    3530:	727d      	strb	r5, [r7, #9]
    3532:	2000      	movs	r0, #0
    3534:	f008 f897 	bl	b666 <MPSL_IRQ_RADIO_Handler+0x4>
    3538:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    353c:	4630      	mov	r0, r6
    353e:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    3542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3546:	2900      	cmp	r1, #0
    3548:	d0fb      	beq.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    354a:	2920      	cmp	r1, #32
    354c:	d8f9      	bhi.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    354e:	78a1      	ldrb	r1, [r4, #2]
    3550:	2921      	cmp	r1, #33	; 0x21
    3552:	d8f6      	bhi.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3554:	2901      	cmp	r1, #1
    3556:	d1c2      	bne.n	34de <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3558:	e7f3      	b.n	3542 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    355a:	0000      	.short	0x0000
    355c:	2000002c 	.word	0x2000002c

00003560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    3560:	4801      	ldr	r0, [pc, #4]	; (3568 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    3562:	8980      	ldrh	r0, [r0, #12]
    3564:	4770      	bx	lr
    3566:	0000      	.short	0x0000
    3568:	2000002c 	.word	0x2000002c

0000356c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    356c:	b510      	push	{r4, lr}
    356e:	480d      	ldr	r0, [pc, #52]	; (35a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3570:	f008 f92f 	bl	b7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    3574:	490b      	ldr	r1, [pc, #44]	; (35a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    3576:	3908      	subs	r1, #8
    3578:	b148      	cbz	r0, 358e <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    357a:	2001      	movs	r0, #1
    357c:	7008      	strb	r0, [r1, #0]
    357e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3582:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    3586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    358a:	f7ff bf2f 	b.w	33ec <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    358e:	7a88      	ldrb	r0, [r1, #10]
    3590:	2802      	cmp	r0, #2
    3592:	d101      	bne.n	3598 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    3594:	f7ff fda0 	bl	30d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    359c:	4801      	ldr	r0, [pc, #4]	; (35a4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    359e:	f008 b92f 	b.w	b800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    35a2:	0000      	.short	0x0000
    35a4:	20000034 	.word	0x20000034

000035a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    35a8:	4802      	ldr	r0, [pc, #8]	; (35b4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    35aa:	7a80      	ldrb	r0, [r0, #10]
    35ac:	2800      	cmp	r0, #0
    35ae:	d000      	beq.n	35b2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    35b0:	2001      	movs	r0, #1
    35b2:	4770      	bx	lr
    35b4:	2000002c 	.word	0x2000002c

000035b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    35b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35ba:	4d1f      	ldr	r5, [pc, #124]	; (3638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    35bc:	7ae8      	ldrb	r0, [r5, #11]
    35be:	2800      	cmp	r0, #0
    35c0:	d10f      	bne.n	35e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35c2:	7e28      	ldrb	r0, [r5, #24]
    35c4:	f000 0003 	and.w	r0, r0, #3
    35c8:	f008 f8b0 	bl	b72c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    35cc:	2800      	cmp	r0, #0
    35ce:	d008      	beq.n	35e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35d0:	f3ef 8110 	mrs	r1, PRIMASK
    35d4:	b672      	cpsid	i
    35d6:	f7ff ffe7 	bl	35a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    35da:	b118      	cbz	r0, 35e4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    35dc:	2900      	cmp	r1, #0
    35de:	d100      	bne.n	35e2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    35e0:	b662      	cpsie	i
    35e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    35e4:	2601      	movs	r6, #1
    35e6:	72ae      	strb	r6, [r5, #10]
    35e8:	b901      	cbnz	r1, 35ec <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    35ea:	b662      	cpsie	i
    35ec:	2018      	movs	r0, #24
    35ee:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    35f2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    35f6:	61a6      	str	r6, [r4, #24]
    35f8:	f44f 7020 	mov.w	r0, #640	; 0x280
    35fc:	f8ad 0000 	strh.w	r0, [sp]
    3600:	f8bd 0000 	ldrh.w	r0, [sp]
    3604:	1e41      	subs	r1, r0, #1
    3606:	f8ad 1000 	strh.w	r1, [sp]
    360a:	d2f9      	bcs.n	3600 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    360c:	2700      	movs	r7, #0
    360e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    3612:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    3616:	4808      	ldr	r0, [pc, #32]	; (3638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    3618:	3008      	adds	r0, #8
    361a:	f008 f8ed 	bl	b7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    361e:	702f      	strb	r7, [r5, #0]
    3620:	f7ff fd5a 	bl	30d8 <MPSL_IRQ_CLOCK_Handler+0x88>
    3624:	6166      	str	r6, [r4, #20]
    3626:	7968      	ldrb	r0, [r5, #5]
    3628:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    362c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    3630:	2018      	movs	r0, #24
    3632:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    3636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3638:	2000002c 	.word	0x2000002c

0000363c <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    363c:	b510      	push	{r4, lr}
    363e:	4c04      	ldr	r4, [pc, #16]	; (3650 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    3640:	7e20      	ldrb	r0, [r4, #24]
    3642:	f000 0003 	and.w	r0, r0, #3
    3646:	f008 f871 	bl	b72c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    364a:	2800      	cmp	r0, #0
    364c:	d0f8      	beq.n	3640 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    364e:	bd10      	pop	{r4, pc}
    3650:	2000002c 	.word	0x2000002c

00003654 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3654:	4901      	ldr	r1, [pc, #4]	; (365c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3656:	2001      	movs	r0, #1
    3658:	7008      	strb	r0, [r1, #0]
    365a:	4770      	bx	lr
    365c:	20000284 	.word	0x20000284

00003660 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3660:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3664:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3668:	b918      	cbnz	r0, 3672 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    366a:	4803      	ldr	r0, [pc, #12]	; (3678 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    366c:	7800      	ldrb	r0, [r0, #0]
    366e:	2800      	cmp	r0, #0
    3670:	d000      	beq.n	3674 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3672:	2001      	movs	r0, #1
    3674:	4770      	bx	lr
    3676:	0000      	.short	0x0000
    3678:	20000284 	.word	0x20000284

0000367c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    367c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3680:	2101      	movs	r1, #1
    3682:	6041      	str	r1, [r0, #4]
    3684:	2100      	movs	r1, #0
    3686:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    368a:	4801      	ldr	r0, [pc, #4]	; (3690 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    368c:	7001      	strb	r1, [r0, #0]
    368e:	4770      	bx	lr
    3690:	20000284 	.word	0x20000284

00003694 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3694:	4802      	ldr	r0, [pc, #8]	; (36a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3696:	6800      	ldr	r0, [r0, #0]
    3698:	f000 0003 	and.w	r0, r0, #3
    369c:	4770      	bx	lr
    369e:	0000      	.short	0x0000
    36a0:	4000041c 	.word	0x4000041c
    36a4:	b510      	push	{r4, lr}
    36a6:	b131      	cbz	r1, 36b6 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    36a8:	2901      	cmp	r1, #1
    36aa:	d007      	beq.n	36bc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    36ac:	f240 3102 	movw	r1, #770	; 0x302
    36b0:	a005      	add	r0, pc, #20	; (adr r0, 36c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    36b2:	f000 f80f 	bl	36d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    36b6:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    36ba:	e001      	b.n	36c0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    36bc:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    36c0:	f000 0001 	and.w	r0, r0, #1
    36c4:	bd10      	pop	{r4, pc}
    36c6:	0000      	.short	0x0000
    36c8:	5f66726e 	.word	0x5f66726e
    36cc:	636f6c63 	.word	0x636f6c63
    36d0:	00682e6b 	.word	0x00682e6b

000036d4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    36d4:	4a02      	ldr	r2, [pc, #8]	; (36e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    36d6:	6852      	ldr	r2, [r2, #4]
    36d8:	b102      	cbz	r2, 36dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    36da:	4710      	bx	r2
    36dc:	e7fe      	b.n	36dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    36de:	0000      	.short	0x0000
    36e0:	2000004c 	.word	0x2000004c
    36e4:	4806      	ldr	r0, [pc, #24]	; (3700 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    36e6:	b510      	push	{r4, lr}
    36e8:	2100      	movs	r1, #0
    36ea:	6001      	str	r1, [r0, #0]
    36ec:	2101      	movs	r1, #1
    36ee:	6001      	str	r1, [r0, #0]
    36f0:	4608      	mov	r0, r1
    36f2:	f008 f842 	bl	b77a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    36f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    36fa:	2001      	movs	r0, #1
    36fc:	f008 b830 	b.w	b760 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3700:	40001ffc 	.word	0x40001ffc
    3704:	4807      	ldr	r0, [pc, #28]	; (3724 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    3706:	b510      	push	{r4, lr}
    3708:	2101      	movs	r1, #1
    370a:	6041      	str	r1, [r0, #4]
    370c:	1e89      	subs	r1, r1, #2
    370e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3712:	200c      	movs	r0, #12
    3714:	f008 f831 	bl	b77a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    3718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    371c:	200c      	movs	r0, #12
    371e:	f008 b81f 	b.w	b760 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3722:	0000      	.short	0x0000
    3724:	4000c000 	.word	0x4000c000

00003728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3728:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    372a:	4a10      	ldr	r2, [pc, #64]	; (376c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    372c:	6855      	ldr	r5, [r2, #4]
    372e:	b1e5      	cbz	r5, 376a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    3730:	2200      	movs	r2, #0
    3732:	4603      	mov	r3, r0
    3734:	466e      	mov	r6, sp
    3736:	240a      	movs	r4, #10
    3738:	e003      	b.n	3742 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    373a:	fbb0 f0f4 	udiv	r0, r0, r4
    373e:	1c52      	adds	r2, r2, #1
    3740:	b2d2      	uxtb	r2, r2
    3742:	2800      	cmp	r0, #0
    3744:	d1f9      	bne.n	373a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    3746:	54b0      	strb	r0, [r6, r2]
    3748:	e00a      	b.n	3760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    374a:	bf00      	nop
    374c:	fbb3 f0f4 	udiv	r0, r3, r4
    3750:	fb04 3010 	mls	r0, r4, r0, r3
    3754:	fbb3 f3f4 	udiv	r3, r3, r4
    3758:	1e52      	subs	r2, r2, #1
    375a:	b2d2      	uxtb	r2, r2
    375c:	3030      	adds	r0, #48	; 0x30
    375e:	54b0      	strb	r0, [r6, r2]
    3760:	2a00      	cmp	r2, #0
    3762:	d1f3      	bne.n	374c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    3764:	4630      	mov	r0, r6
    3766:	47a8      	blx	r5
    3768:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    376a:	e7fe      	b.n	376a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    376c:	2000004c 	.word	0x2000004c

00003770 <mpsl_init>:
    3770:	b570      	push	{r4, r5, r6, lr}
    3772:	4c17      	ldr	r4, [pc, #92]	; (37d0 <mpsl_init+0x60>)
    3774:	4606      	mov	r6, r0
    3776:	460d      	mov	r5, r1
    3778:	7860      	ldrb	r0, [r4, #1]
    377a:	b110      	cbz	r0, 3782 <mpsl_init+0x12>
    377c:	f04f 30ff 	mov.w	r0, #4294967295
    3780:	bd70      	pop	{r4, r5, r6, pc}
    3782:	b906      	cbnz	r6, 3786 <mpsl_init+0x16>
    3784:	4e13      	ldr	r6, [pc, #76]	; (37d4 <mpsl_init+0x64>)
    3786:	6062      	str	r2, [r4, #4]
    3788:	7025      	strb	r5, [r4, #0]
    378a:	f7ff ffab 	bl	36e4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    378e:	f7ff ffb9 	bl	3704 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    3792:	4630      	mov	r0, r6
    3794:	f7ff fe92 	bl	34bc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3798:	0006      	movs	r6, r0
    379a:	d1f1      	bne.n	3780 <mpsl_init+0x10>
    379c:	f7fe ff0e 	bl	25bc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    37a0:	f7ff ff0a 	bl	35b8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    37a4:	f007 ff36 	bl	b614 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    37a8:	4628      	mov	r0, r5
    37aa:	f007 ffd9 	bl	b760 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    37ae:	2001      	movs	r0, #1
    37b0:	2d00      	cmp	r5, #0
    37b2:	db09      	blt.n	37c8 <mpsl_init+0x58>
    37b4:	f005 011f 	and.w	r1, r5, #31
    37b8:	fa00 f101 	lsl.w	r1, r0, r1
    37bc:	096a      	lsrs	r2, r5, #5
    37be:	0092      	lsls	r2, r2, #2
    37c0:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    37c4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    37c8:	7060      	strb	r0, [r4, #1]
    37ca:	4630      	mov	r0, r6
    37cc:	bd70      	pop	{r4, r5, r6, pc}
    37ce:	0000      	.short	0x0000
    37d0:	2000004c 	.word	0x2000004c
    37d4:	0000b79c 	.word	0x0000b79c

000037d8 <mpsl_is_initialized>:
    37d8:	4801      	ldr	r0, [pc, #4]	; (37e0 <mpsl_is_initialized+0x8>)
    37da:	7840      	ldrb	r0, [r0, #1]
    37dc:	4770      	bx	lr
    37de:	0000      	.short	0x0000
    37e0:	2000004c 	.word	0x2000004c

000037e4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    37e4:	4807      	ldr	r0, [pc, #28]	; (3804 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    37e6:	f990 0000 	ldrsb.w	r0, [r0]
    37ea:	2800      	cmp	r0, #0
    37ec:	db09      	blt.n	3802 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    37ee:	f000 021f 	and.w	r2, r0, #31
    37f2:	2101      	movs	r1, #1
    37f4:	4091      	lsls	r1, r2
    37f6:	0940      	lsrs	r0, r0, #5
    37f8:	0080      	lsls	r0, r0, #2
    37fa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    37fe:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3802:	4770      	bx	lr
    3804:	2000004c 	.word	0x2000004c

00003808 <mpsl_temperature_get>:
    3808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    380c:	2601      	movs	r6, #1
    380e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3812:	0331      	lsls	r1, r6, #12
    3814:	f04f 0800 	mov.w	r8, #0
    3818:	4640      	mov	r0, r8
    381a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    381e:	f3bf 8f4f 	dsb	sy
    3822:	f3bf 8f6f 	isb	sy
    3826:	4c16      	ldr	r4, [pc, #88]	; (3880 <mpsl_temperature_get+0x78>)
    3828:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    382c:	200c      	movs	r0, #12
    382e:	f007 ffc3 	bl	b7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3832:	4d14      	ldr	r5, [pc, #80]	; (3884 <mpsl_temperature_get+0x7c>)
    3834:	6828      	ldr	r0, [r5, #0]
    3836:	43c0      	mvns	r0, r0
    3838:	f340 1700 	sbfx	r7, r0, #4, #1
    383c:	6828      	ldr	r0, [r5, #0]
    383e:	f040 0010 	orr.w	r0, r0, #16
    3842:	6028      	str	r0, [r5, #0]
    3844:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3848:	6026      	str	r6, [r4, #0]
    384a:	1c7f      	adds	r7, r7, #1
    384c:	e002      	b.n	3854 <mpsl_temperature_get+0x4c>
    384e:	bf00      	nop
    3850:	f000 f890 	bl	3974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3854:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3858:	2800      	cmp	r0, #0
    385a:	d0f9      	beq.n	3850 <mpsl_temperature_get+0x48>
    385c:	b91f      	cbnz	r7, 3866 <mpsl_temperature_get+0x5e>
    385e:	6828      	ldr	r0, [r5, #0]
    3860:	f020 0010 	bic.w	r0, r0, #16
    3864:	6028      	str	r0, [r5, #0]
    3866:	4808      	ldr	r0, [pc, #32]	; (3888 <mpsl_temperature_get+0x80>)
    3868:	6805      	ldr	r5, [r0, #0]
    386a:	6066      	str	r6, [r4, #4]
    386c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3870:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3874:	200c      	movs	r0, #12
    3876:	f007 ff9f 	bl	b7b8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    387a:	4628      	mov	r0, r5
    387c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3880:	4000c000 	.word	0x4000c000
    3884:	e000ed10 	.word	0xe000ed10
    3888:	4000c508 	.word	0x4000c508

0000388c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    388c:	b510      	push	{r4, lr}
    388e:	4602      	mov	r2, r0
    3890:	2005      	movs	r0, #5
    3892:	490c      	ldr	r1, [pc, #48]	; (38c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    3894:	e004      	b.n	38a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3896:	bf00      	nop
    3898:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    389c:	791b      	ldrb	r3, [r3, #4]
    389e:	b133      	cbz	r3, 38ae <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    38a0:	1e40      	subs	r0, r0, #1
    38a2:	b2c0      	uxtb	r0, r0
    38a4:	d2f8      	bcs.n	3898 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    38a6:	214b      	movs	r1, #75	; 0x4b
    38a8:	2069      	movs	r0, #105	; 0x69
    38aa:	f7ff ff3d 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38ae:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    38b2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    38b6:	2200      	movs	r2, #0
    38b8:	714a      	strb	r2, [r1, #5]
    38ba:	718a      	strb	r2, [r1, #6]
    38bc:	2201      	movs	r2, #1
    38be:	710a      	strb	r2, [r1, #4]
    38c0:	bd10      	pop	{r4, pc}
    38c2:	0000      	.short	0x0000
    38c4:	20000d88 	.word	0x20000d88

000038c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    38c8:	b510      	push	{r4, lr}
    38ca:	2805      	cmp	r0, #5
    38cc:	d301      	bcc.n	38d2 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    38ce:	215a      	movs	r1, #90	; 0x5a
    38d0:	e006      	b.n	38e0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    38d2:	490a      	ldr	r1, [pc, #40]	; (38fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    38d4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    38d8:	7901      	ldrb	r1, [r0, #4]
    38da:	2901      	cmp	r1, #1
    38dc:	d003      	beq.n	38e6 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    38de:	215b      	movs	r1, #91	; 0x5b
    38e0:	2069      	movs	r0, #105	; 0x69
    38e2:	f7ff ff21 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    38e6:	7941      	ldrb	r1, [r0, #5]
    38e8:	7982      	ldrb	r2, [r0, #6]
    38ea:	1c49      	adds	r1, r1, #1
    38ec:	b2c9      	uxtb	r1, r1
    38ee:	428a      	cmp	r2, r1
    38f0:	d000      	beq.n	38f4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    38f2:	7141      	strb	r1, [r0, #5]
    38f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38f8:	f7ff bf74 	b.w	37e4 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    38fc:	20000d88 	.word	0x20000d88

00003900 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3900:	b570      	push	{r4, r5, r6, lr}
    3902:	2505      	movs	r5, #5
    3904:	4e0e      	ldr	r6, [pc, #56]	; (3940 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3906:	4c0f      	ldr	r4, [pc, #60]	; (3944 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3908:	e016      	b.n	3938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    390a:	7821      	ldrb	r1, [r4, #0]
    390c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3910:	7902      	ldrb	r2, [r0, #4]
    3912:	2a01      	cmp	r2, #1
    3914:	d108      	bne.n	3928 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3916:	7942      	ldrb	r2, [r0, #5]
    3918:	7983      	ldrb	r3, [r0, #6]
    391a:	429a      	cmp	r2, r3
    391c:	d004      	beq.n	3928 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    391e:	7942      	ldrb	r2, [r0, #5]
    3920:	7182      	strb	r2, [r0, #6]
    3922:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3926:	4780      	blx	r0
    3928:	7820      	ldrb	r0, [r4, #0]
    392a:	1c40      	adds	r0, r0, #1
    392c:	b2c0      	uxtb	r0, r0
    392e:	7020      	strb	r0, [r4, #0]
    3930:	2805      	cmp	r0, #5
    3932:	d301      	bcc.n	3938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3934:	2000      	movs	r0, #0
    3936:	7020      	strb	r0, [r4, #0]
    3938:	1e6d      	subs	r5, r5, #1
    393a:	b2ed      	uxtb	r5, r5
    393c:	d2e5      	bcs.n	390a <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    393e:	bd70      	pop	{r4, r5, r6, pc}
    3940:	20000d88 	.word	0x20000d88
    3944:	20000285 	.word	0x20000285

00003948 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3948:	b500      	push	{lr}
    394a:	f007 ff64 	bl	b816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    394e:	b940      	cbnz	r0, 3962 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3950:	f007 ff6b 	bl	b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3954:	b928      	cbnz	r0, 3962 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3956:	f007 ff7f 	bl	b858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    395a:	b910      	cbnz	r0, 3962 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    395c:	f007 ff90 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3960:	b108      	cbz	r0, 3966 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3962:	4802      	ldr	r0, [pc, #8]	; (396c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3964:	bd00      	pop	{pc}
    3966:	4802      	ldr	r0, [pc, #8]	; (3970 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3968:	bd00      	pop	{pc}
    396a:	0000      	.short	0x0000
    396c:	4000050c 	.word	0x4000050c
    3970:	4001e700 	.word	0x4001e700

00003974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3974:	b510      	push	{r4, lr}
    3976:	f007 ff83 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    397a:	b330      	cbz	r0, 39ca <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    397c:	f3ef 8010 	mrs	r0, PRIMASK
    3980:	b1c8      	cbz	r0, 39b6 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3982:	2100      	movs	r1, #0
    3984:	b672      	cpsid	i
    3986:	4812      	ldr	r0, [pc, #72]	; (39d0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3988:	6802      	ldr	r2, [r0, #0]
    398a:	6803      	ldr	r3, [r0, #0]
    398c:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3990:	f043 0310 	orr.w	r3, r3, #16
    3994:	6003      	str	r3, [r0, #0]
    3996:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    399a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    399e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    39a2:	431c      	orrs	r4, r3
    39a4:	d000      	beq.n	39a8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    39a6:	bf40      	sev
    39a8:	bf20      	wfe
    39aa:	bf00      	nop
    39ac:	bf00      	nop
    39ae:	bf00      	nop
    39b0:	bf00      	nop
    39b2:	b112      	cbz	r2, 39ba <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    39b4:	e005      	b.n	39c2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    39b6:	2101      	movs	r1, #1
    39b8:	e7e4      	b.n	3984 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    39ba:	6802      	ldr	r2, [r0, #0]
    39bc:	f022 0210 	bic.w	r2, r2, #16
    39c0:	6002      	str	r2, [r0, #0]
    39c2:	2900      	cmp	r1, #0
    39c4:	d000      	beq.n	39c8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    39c6:	b662      	cpsie	i
    39c8:	bd10      	pop	{r4, pc}
    39ca:	bf20      	wfe
    39cc:	bd10      	pop	{r4, pc}
    39ce:	0000      	.short	0x0000
    39d0:	e000ed10 	.word	0xe000ed10

000039d4 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    39d4:	0000baf1 0000bb0d 0000bafb 0000bb07     ................
    39e4:	0000baf5 0000baef 0000baed 0000bb13     ................
    39f4:	0000bb01 0000bae7 0000badf 0000bae3     ................
    3a04:	0000bad9                                ....

00003a08 <mpsl_fem_disable>:
    3a08:	4801      	ldr	r0, [pc, #4]	; (3a10 <mpsl_fem_disable+0x8>)
    3a0a:	6800      	ldr	r0, [r0, #0]
    3a0c:	6800      	ldr	r0, [r0, #0]
    3a0e:	4700      	bx	r0
    3a10:	20000054 	.word	0x20000054

00003a14 <mpsl_fem_lna_configuration_clear>:
    3a14:	4801      	ldr	r0, [pc, #4]	; (3a1c <mpsl_fem_lna_configuration_clear+0x8>)
    3a16:	6800      	ldr	r0, [r0, #0]
    3a18:	6900      	ldr	r0, [r0, #16]
    3a1a:	4700      	bx	r0
    3a1c:	20000054 	.word	0x20000054

00003a20 <mpsl_fem_lna_configuration_set>:
    3a20:	4a01      	ldr	r2, [pc, #4]	; (3a28 <mpsl_fem_lna_configuration_set+0x8>)
    3a22:	6812      	ldr	r2, [r2, #0]
    3a24:	6892      	ldr	r2, [r2, #8]
    3a26:	4710      	bx	r2
    3a28:	20000054 	.word	0x20000054

00003a2c <mpsl_fem_pa_configuration_clear>:
    3a2c:	4801      	ldr	r0, [pc, #4]	; (3a34 <mpsl_fem_pa_configuration_clear+0x8>)
    3a2e:	6800      	ldr	r0, [r0, #0]
    3a30:	68c0      	ldr	r0, [r0, #12]
    3a32:	4700      	bx	r0
    3a34:	20000054 	.word	0x20000054

00003a38 <mpsl_fem_pa_configuration_set>:
    3a38:	4a01      	ldr	r2, [pc, #4]	; (3a40 <mpsl_fem_pa_configuration_set+0x8>)
    3a3a:	6812      	ldr	r2, [r2, #0]
    3a3c:	6852      	ldr	r2, [r2, #4]
    3a3e:	4710      	bx	r2
    3a40:	20000054 	.word	0x20000054

00003a44 <mpsl_fem_pa_is_configured>:
    3a44:	4901      	ldr	r1, [pc, #4]	; (3a4c <mpsl_fem_pa_is_configured+0x8>)
    3a46:	6809      	ldr	r1, [r1, #0]
    3a48:	6a09      	ldr	r1, [r1, #32]
    3a4a:	4708      	bx	r1
    3a4c:	20000054 	.word	0x20000054

00003a50 <mpsl_fem_device_config_254_apply_get>:
    3a50:	4801      	ldr	r0, [pc, #4]	; (3a58 <mpsl_fem_device_config_254_apply_get+0x8>)
    3a52:	7800      	ldrb	r0, [r0, #0]
    3a54:	4770      	bx	lr
    3a56:	0000      	.short	0x0000
    3a58:	20000286 	.word	0x20000286
    3a5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a5e:	4c17      	ldr	r4, [pc, #92]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a60:	7a20      	ldrb	r0, [r4, #8]
    3a62:	2802      	cmp	r0, #2
    3a64:	d200      	bcs.n	3a68 <mpsl_fem_device_config_254_apply_get+0x18>
    3a66:	2002      	movs	r0, #2
    3a68:	f88d 0001 	strb.w	r0, [sp, #1]
    3a6c:	79e0      	ldrb	r0, [r4, #7]
    3a6e:	2803      	cmp	r0, #3
    3a70:	d200      	bcs.n	3a74 <mpsl_fem_device_config_254_apply_get+0x24>
    3a72:	2003      	movs	r0, #3
    3a74:	f88d 0000 	strb.w	r0, [sp]
    3a78:	79a0      	ldrb	r0, [r4, #6]
    3a7a:	f8ad 0004 	strh.w	r0, [sp, #4]
    3a7e:	7960      	ldrb	r0, [r4, #5]
    3a80:	f8ad 0002 	strh.w	r0, [sp, #2]
    3a84:	4668      	mov	r0, sp
    3a86:	f006 f95b 	bl	9d40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3a8a:	b108      	cbz	r0, 3a90 <mpsl_fem_device_config_254_apply_get+0x40>
    3a8c:	2180      	movs	r1, #128	; 0x80
    3a8e:	e010      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3a90:	68e0      	ldr	r0, [r4, #12]
    3a92:	9002      	str	r0, [sp, #8]
    3a94:	a802      	add	r0, sp, #8
    3a96:	f006 f969 	bl	9d6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3a9a:	b108      	cbz	r0, 3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
    3a9c:	2184      	movs	r1, #132	; 0x84
    3a9e:	e008      	b.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3aa0:	4807      	ldr	r0, [pc, #28]	; (3ac0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x28>)
    3aa2:	6800      	ldr	r0, [r0, #0]
    3aa4:	9003      	str	r0, [sp, #12]
    3aa6:	a803      	add	r0, sp, #12
    3aa8:	f00b f877 	bl	eb9a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3aac:	2800      	cmp	r0, #0
    3aae:	d003      	beq.n	3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>
    3ab0:	2188      	movs	r1, #136	; 0x88
    3ab2:	2003      	movs	r0, #3
    3ab4:	f000 f8e0 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ab8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3aba:	0000      	.short	0x0000
    3abc:	20000db0 	.word	0x20000db0
    3ac0:	00003d60 	.word	0x00003d60

00003ac4 <sdc_build_revision_get>:
    3ac4:	b510      	push	{r4, lr}
    3ac6:	b128      	cbz	r0, 3ad4 <sdc_build_revision_get+0x10>
    3ac8:	2214      	movs	r2, #20
    3aca:	4904      	ldr	r1, [pc, #16]	; (3adc <sdc_build_revision_get+0x18>)
    3acc:	f007 ff2a 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3ad0:	2000      	movs	r0, #0
    3ad2:	bd10      	pop	{r4, pc}
    3ad4:	f06f 0015 	mvn.w	r0, #21
    3ad8:	bd10      	pop	{r4, pc}
    3ada:	0000      	.short	0x0000
    3adc:	00003d7c 	.word	0x00003d7c

00003ae0 <sdc_cfg_set>:
    3ae0:	b570      	push	{r4, r5, r6, lr}
    3ae2:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    3ae6:	bb78      	cbnz	r0, 3b48 <sdc_cfg_set+0x68>
    3ae8:	4c27      	ldr	r4, [pc, #156]	; (3b88 <sdc_cfg_set+0xa8>)
    3aea:	7860      	ldrb	r0, [r4, #1]
    3aec:	b108      	cbz	r0, 3af2 <sdc_cfg_set+0x12>
    3aee:	1198      	asrs	r0, r3, #6
    3af0:	bd70      	pop	{r4, r5, r6, pc}
    3af2:	b301      	cbz	r1, 3b36 <sdc_cfg_set+0x56>
    3af4:	f06f 0515 	mvn.w	r5, #21
    3af8:	b33a      	cbz	r2, 3b4a <sdc_cfg_set+0x6a>
    3afa:	4824      	ldr	r0, [pc, #144]	; (3b8c <sdc_cfg_set+0xac>)
    3afc:	290b      	cmp	r1, #11
    3afe:	d23d      	bcs.n	3b7c <sdc_cfg_set+0x9c>
    3b00:	e8df f001 	tbb	[pc, r1]
    3b04:	0c09063c 	.word	0x0c09063c
    3b08:	241a1310 	.word	0x241a1310
    3b0c:	002d2716 	.word	0x002d2716
    3b10:	7811      	ldrb	r1, [r2, #0]
    3b12:	7001      	strb	r1, [r0, #0]
    3b14:	e027      	b.n	3b66 <sdc_cfg_set+0x86>
    3b16:	7811      	ldrb	r1, [r2, #0]
    3b18:	7041      	strb	r1, [r0, #1]
    3b1a:	e024      	b.n	3b66 <sdc_cfg_set+0x86>
    3b1c:	6811      	ldr	r1, [r2, #0]
    3b1e:	f8c0 1005 	str.w	r1, [r0, #5]
    3b22:	e020      	b.n	3b66 <sdc_cfg_set+0x86>
    3b24:	6811      	ldr	r1, [r2, #0]
    3b26:	60c1      	str	r1, [r0, #12]
    3b28:	e01d      	b.n	3b66 <sdc_cfg_set+0x86>
    3b2a:	7811      	ldrb	r1, [r2, #0]
    3b2c:	7081      	strb	r1, [r0, #2]
    3b2e:	e01a      	b.n	3b66 <sdc_cfg_set+0x86>
    3b30:	7811      	ldrb	r1, [r2, #0]
    3b32:	b949      	cbnz	r1, 3b48 <sdc_cfg_set+0x68>
    3b34:	70c1      	strb	r1, [r0, #3]
    3b36:	e016      	b.n	3b66 <sdc_cfg_set+0x86>
    3b38:	78e1      	ldrb	r1, [r4, #3]
    3b3a:	b111      	cbz	r1, 3b42 <sdc_cfg_set+0x62>
    3b3c:	7811      	ldrb	r1, [r2, #0]
    3b3e:	2902      	cmp	r1, #2
    3b40:	d31c      	bcc.n	3b7c <sdc_cfg_set+0x9c>
    3b42:	7811      	ldrb	r1, [r2, #0]
    3b44:	7401      	strb	r1, [r0, #16]
    3b46:	e00e      	b.n	3b66 <sdc_cfg_set+0x86>
    3b48:	e005      	b.n	3b56 <sdc_cfg_set+0x76>
    3b4a:	e017      	b.n	3b7c <sdc_cfg_set+0x9c>
    3b4c:	8811      	ldrh	r1, [r2, #0]
    3b4e:	8241      	strh	r1, [r0, #18]
    3b50:	e009      	b.n	3b66 <sdc_cfg_set+0x86>
    3b52:	7811      	ldrb	r1, [r2, #0]
    3b54:	b109      	cbz	r1, 3b5a <sdc_cfg_set+0x7a>
    3b56:	4618      	mov	r0, r3
    3b58:	bd70      	pop	{r4, r5, r6, pc}
    3b5a:	7101      	strb	r1, [r0, #4]
    3b5c:	e003      	b.n	3b66 <sdc_cfg_set+0x86>
    3b5e:	7811      	ldrb	r1, [r2, #0]
    3b60:	2902      	cmp	r1, #2
    3b62:	d30b      	bcc.n	3b7c <sdc_cfg_set+0x9c>
    3b64:	7501      	strb	r1, [r0, #20]
    3b66:	2201      	movs	r2, #1
    3b68:	4908      	ldr	r1, [pc, #32]	; (3b8c <sdc_cfg_set+0xac>)
    3b6a:	2000      	movs	r0, #0
    3b6c:	f007 ffd3 	bl	bb16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3b70:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3b74:	db04      	blt.n	3b80 <sdc_cfg_set+0xa0>
    3b76:	f06f 000b 	mvn.w	r0, #11
    3b7a:	bd70      	pop	{r4, r5, r6, pc}
    3b7c:	4628      	mov	r0, r5
    3b7e:	bd70      	pop	{r4, r5, r6, pc}
    3b80:	2101      	movs	r1, #1
    3b82:	70a1      	strb	r1, [r4, #2]
    3b84:	bd70      	pop	{r4, r5, r6, pc}
    3b86:	0000      	.short	0x0000
    3b88:	20000058 	.word	0x20000058
    3b8c:	20000db0 	.word	0x20000db0

00003b90 <sdc_enable>:
    3b90:	b570      	push	{r4, r5, r6, lr}
    3b92:	460c      	mov	r4, r1
    3b94:	0005      	movs	r5, r0
    3b96:	d019      	beq.n	3bcc <sdc_enable+0x3c>
    3b98:	b1c4      	cbz	r4, 3bcc <sdc_enable+0x3c>
    3b9a:	f000 f923 	bl	3de4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3b9e:	b1c0      	cbz	r0, 3bd2 <sdc_enable+0x42>
    3ba0:	4628      	mov	r0, r5
    3ba2:	f7ff fe73 	bl	388c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3ba6:	4d0c      	ldr	r5, [pc, #48]	; (3bd8 <sdc_enable+0x48>)
    3ba8:	2200      	movs	r2, #0
    3baa:	490c      	ldr	r1, [pc, #48]	; (3bdc <sdc_enable+0x4c>)
    3bac:	7028      	strb	r0, [r5, #0]
    3bae:	4620      	mov	r0, r4
    3bb0:	f007 ffb1 	bl	bb16 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3bb4:	f00b fc5b 	bl	f46e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3bb8:	2100      	movs	r1, #0
    3bba:	7828      	ldrb	r0, [r5, #0]
    3bbc:	f006 fb30 	bl	a220 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3bc0:	f7ff ff4c 	bl	3a5c <mpsl_fem_device_config_254_apply_get+0xc>
    3bc4:	2001      	movs	r0, #1
    3bc6:	7068      	strb	r0, [r5, #1]
    3bc8:	2000      	movs	r0, #0
    3bca:	bd70      	pop	{r4, r5, r6, pc}
    3bcc:	f06f 0015 	mvn.w	r0, #21
    3bd0:	bd70      	pop	{r4, r5, r6, pc}
    3bd2:	f04f 30ff 	mov.w	r0, #4294967295
    3bd6:	bd70      	pop	{r4, r5, r6, pc}
    3bd8:	20000058 	.word	0x20000058
    3bdc:	20000db0 	.word	0x20000db0

00003be0 <sdc_init>:
    3be0:	b530      	push	{r4, r5, lr}
    3be2:	b087      	sub	sp, #28
    3be4:	0005      	movs	r5, r0
    3be6:	d00c      	beq.n	3c02 <sdc_init+0x22>
    3be8:	f7ff fdf6 	bl	37d8 <mpsl_is_initialized>
    3bec:	f04f 34ff 	mov.w	r4, #4294967295
    3bf0:	b120      	cbz	r0, 3bfc <sdc_init+0x1c>
    3bf2:	f7ff fcb5 	bl	3560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3bf6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3bfa:	d905      	bls.n	3c08 <sdc_init+0x28>
    3bfc:	4620      	mov	r0, r4
    3bfe:	b007      	add	sp, #28
    3c00:	bd30      	pop	{r4, r5, pc}
    3c02:	f06f 0015 	mvn.w	r0, #21
    3c06:	e7fa      	b.n	3bfe <sdc_init+0x1e>
    3c08:	4c15      	ldr	r4, [pc, #84]	; (3c60 <sdc_init+0x80>)
    3c0a:	4816      	ldr	r0, [pc, #88]	; (3c64 <sdc_init+0x84>)
    3c0c:	6065      	str	r5, [r4, #4]
    3c0e:	f000 f9f9 	bl	4004 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3c12:	2000      	movs	r0, #0
    3c14:	7060      	strb	r0, [r4, #1]
    3c16:	70a0      	strb	r0, [r4, #2]
    3c18:	70e0      	strb	r0, [r4, #3]
    3c1a:	4601      	mov	r1, r0
    3c1c:	2218      	movs	r2, #24
    3c1e:	4668      	mov	r0, sp
    3c20:	f007 fefa 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3c24:	2218      	movs	r2, #24
    3c26:	4910      	ldr	r1, [pc, #64]	; (3c68 <sdc_init+0x88>)
    3c28:	4668      	mov	r0, sp
    3c2a:	f007 fe7b 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c2e:	2218      	movs	r2, #24
    3c30:	4669      	mov	r1, sp
    3c32:	480e      	ldr	r0, [pc, #56]	; (3c6c <sdc_init+0x8c>)
    3c34:	f007 fe76 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c38:	f3ef 8410 	mrs	r4, PRIMASK
    3c3c:	b672      	cpsid	i
    3c3e:	480c      	ldr	r0, [pc, #48]	; (3c70 <sdc_init+0x90>)
    3c40:	f06f 010c 	mvn.w	r1, #12
    3c44:	f000 fdac 	bl	47a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3c48:	480a      	ldr	r0, [pc, #40]	; (3c74 <sdc_init+0x94>)
    3c4a:	f000 fe6d 	bl	4928 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3c4e:	b118      	cbz	r0, 3c58 <sdc_init+0x78>
    3c50:	2196      	movs	r1, #150	; 0x96
    3c52:	2003      	movs	r0, #3
    3c54:	f000 f810 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c58:	b904      	cbnz	r4, 3c5c <sdc_init+0x7c>
    3c5a:	b662      	cpsie	i
    3c5c:	2000      	movs	r0, #0
    3c5e:	e7ce      	b.n	3bfe <sdc_init+0x1e>
    3c60:	20000058 	.word	0x20000058
    3c64:	00003a5d 	.word	0x00003a5d
    3c68:	00003d64 	.word	0x00003d64
    3c6c:	20000db0 	.word	0x20000db0
    3c70:	4000c000 	.word	0x4000c000
    3c74:	00003e11 	.word	0x00003e11

00003c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3c78:	b50e      	push	{r1, r2, r3, lr}
    3c7a:	b672      	cpsid	i
    3c7c:	4a15      	ldr	r2, [pc, #84]	; (3cd4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3c7e:	6855      	ldr	r5, [r2, #4]
    3c80:	b1d5      	cbz	r5, 3cb8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3c82:	2200      	movs	r2, #0
    3c84:	4603      	mov	r3, r0
    3c86:	466e      	mov	r6, sp
    3c88:	240a      	movs	r4, #10
    3c8a:	e003      	b.n	3c94 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3c8c:	fbb0 f0f4 	udiv	r0, r0, r4
    3c90:	1c52      	adds	r2, r2, #1
    3c92:	b2d2      	uxtb	r2, r2
    3c94:	2800      	cmp	r0, #0
    3c96:	d1f9      	bne.n	3c8c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3c98:	54b0      	strb	r0, [r6, r2]
    3c9a:	e009      	b.n	3cb0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3c9c:	fbb3 f0f4 	udiv	r0, r3, r4
    3ca0:	fb04 3010 	mls	r0, r4, r0, r3
    3ca4:	fbb3 f3f4 	udiv	r3, r3, r4
    3ca8:	1e52      	subs	r2, r2, #1
    3caa:	b2d2      	uxtb	r2, r2
    3cac:	3030      	adds	r0, #48	; 0x30
    3cae:	54b0      	strb	r0, [r6, r2]
    3cb0:	2a00      	cmp	r2, #0
    3cb2:	d1f3      	bne.n	3c9c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3cb4:	4630      	mov	r0, r6
    3cb6:	47a8      	blx	r5
    3cb8:	f3bf 8f4f 	dsb	sy
    3cbc:	4806      	ldr	r0, [pc, #24]	; (3cd8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3cbe:	6801      	ldr	r1, [r0, #0]
    3cc0:	4a06      	ldr	r2, [pc, #24]	; (3cdc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3cc2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3cc6:	4311      	orrs	r1, r2
    3cc8:	6001      	str	r1, [r0, #0]
    3cca:	f3bf 8f4f 	dsb	sy
    3cce:	bf00      	nop
    3cd0:	e7fd      	b.n	3cce <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3cd2:	0000      	.short	0x0000
    3cd4:	20000058 	.word	0x20000058
    3cd8:	e000ed0c 	.word	0xe000ed0c
    3cdc:	05fa0004 	.word	0x05fa0004

00003ce0 <sdc_support_adv>:
    3ce0:	4806      	ldr	r0, [pc, #24]	; (3cfc <sdc_support_adv+0x1c>)
    3ce2:	b510      	push	{r4, lr}
    3ce4:	7881      	ldrb	r1, [r0, #2]
    3ce6:	7840      	ldrb	r0, [r0, #1]
    3ce8:	4301      	orrs	r1, r0
    3cea:	d002      	beq.n	3cf2 <sdc_support_adv+0x12>
    3cec:	f04f 30ff 	mov.w	r0, #4294967295
    3cf0:	bd10      	pop	{r4, pc}
    3cf2:	f006 fab5 	bl	a260 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    3cf6:	2000      	movs	r0, #0
    3cf8:	bd10      	pop	{r4, pc}
    3cfa:	0000      	.short	0x0000
    3cfc:	20000058 	.word	0x20000058

00003d00 <sdc_support_dle>:
    3d00:	4806      	ldr	r0, [pc, #24]	; (3d1c <sdc_support_dle+0x1c>)
    3d02:	b510      	push	{r4, lr}
    3d04:	7881      	ldrb	r1, [r0, #2]
    3d06:	7840      	ldrb	r0, [r0, #1]
    3d08:	4301      	orrs	r1, r0
    3d0a:	d002      	beq.n	3d12 <sdc_support_dle+0x12>
    3d0c:	f04f 30ff 	mov.w	r0, #4294967295
    3d10:	bd10      	pop	{r4, pc}
    3d12:	f006 f843 	bl	9d9c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3d16:	2000      	movs	r0, #0
    3d18:	bd10      	pop	{r4, pc}
    3d1a:	0000      	.short	0x0000
    3d1c:	20000058 	.word	0x20000058

00003d20 <sdc_support_le_2m_phy>:
    3d20:	4806      	ldr	r0, [pc, #24]	; (3d3c <sdc_support_le_2m_phy+0x1c>)
    3d22:	b510      	push	{r4, lr}
    3d24:	7881      	ldrb	r1, [r0, #2]
    3d26:	7840      	ldrb	r0, [r0, #1]
    3d28:	4301      	orrs	r1, r0
    3d2a:	d002      	beq.n	3d32 <sdc_support_le_2m_phy+0x12>
    3d2c:	f04f 30ff 	mov.w	r0, #4294967295
    3d30:	bd10      	pop	{r4, pc}
    3d32:	f00b f902 	bl	ef3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3d36:	2000      	movs	r0, #0
    3d38:	bd10      	pop	{r4, pc}
    3d3a:	0000      	.short	0x0000
    3d3c:	20000058 	.word	0x20000058

00003d40 <sdc_support_slave>:
    3d40:	4806      	ldr	r0, [pc, #24]	; (3d5c <sdc_support_slave+0x1c>)
    3d42:	b510      	push	{r4, lr}
    3d44:	7881      	ldrb	r1, [r0, #2]
    3d46:	7840      	ldrb	r0, [r0, #1]
    3d48:	4301      	orrs	r1, r0
    3d4a:	d002      	beq.n	3d52 <sdc_support_slave+0x12>
    3d4c:	f04f 30ff 	mov.w	r0, #4294967295
    3d50:	bd10      	pop	{r4, pc}
    3d52:	f006 fa97 	bl	a284 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    3d56:	2000      	movs	r0, #0
    3d58:	bd10      	pop	{r4, pc}
    3d5a:	0000      	.short	0x0000
    3d5c:	20000058 	.word	0x20000058
    3d60:	00000001 	.word	0x00000001
    3d64:	00010101 	.word	0x00010101
    3d68:	031b1b00 	.word	0x031b1b00
    3d6c:	00000002 	.word	0x00000002
    3d70:	00001d4c 	.word	0x00001d4c
    3d74:	001f0003 	.word	0x001f0003
    3d78:	00000000 	.word	0x00000000
    3d7c:	d64ec0df 	.word	0xd64ec0df
    3d80:	09667c1f 	.word	0x09667c1f
    3d84:	a02bf50a 	.word	0xa02bf50a
    3d88:	6443f298 	.word	0x6443f298
    3d8c:	2aa6c562 	.word	0x2aa6c562

00003d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3d90:	4a05      	ldr	r2, [pc, #20]	; (3da8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3d92:	b510      	push	{r4, lr}
    3d94:	6852      	ldr	r2, [r2, #4]
    3d96:	b112      	cbz	r2, 3d9e <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3d9c:	4710      	bx	r2
    3d9e:	2183      	movs	r1, #131	; 0x83
    3da0:	2004      	movs	r0, #4
    3da2:	f7ff ff69 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3da6:	0000      	.short	0x0000
    3da8:	20000dc8 	.word	0x20000dc8

00003dac <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3dac:	4a05      	ldr	r2, [pc, #20]	; (3dc4 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3dae:	b510      	push	{r4, lr}
    3db0:	6812      	ldr	r2, [r2, #0]
    3db2:	b112      	cbz	r2, 3dba <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    3db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3db8:	4710      	bx	r2
    3dba:	217d      	movs	r1, #125	; 0x7d
    3dbc:	2004      	movs	r0, #4
    3dbe:	f7ff ff5b 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dc2:	0000      	.short	0x0000
    3dc4:	20000dc8 	.word	0x20000dc8

00003dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    3dc8:	4a05      	ldr	r2, [pc, #20]	; (3de0 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    3dca:	b510      	push	{r4, lr}
    3dcc:	6892      	ldr	r2, [r2, #8]
    3dce:	b112      	cbz	r2, 3dd6 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    3dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3dd4:	4710      	bx	r2
    3dd6:	2189      	movs	r1, #137	; 0x89
    3dd8:	2004      	movs	r0, #4
    3dda:	f7ff ff4d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dde:	0000      	.short	0x0000
    3de0:	20000dc8 	.word	0x20000dc8

00003de4 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    3de4:	4805      	ldr	r0, [pc, #20]	; (3dfc <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    3de6:	6801      	ldr	r1, [r0, #0]
    3de8:	b129      	cbz	r1, 3df6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3dea:	6841      	ldr	r1, [r0, #4]
    3dec:	b119      	cbz	r1, 3df6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3dee:	6880      	ldr	r0, [r0, #8]
    3df0:	b108      	cbz	r0, 3df6 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    3df2:	2001      	movs	r0, #1
    3df4:	4770      	bx	lr
    3df6:	2000      	movs	r0, #0
    3df8:	4770      	bx	lr
    3dfa:	0000      	.short	0x0000
    3dfc:	20000dc8 	.word	0x20000dc8

00003e00 <sdc_rand_source_register>:
    3e00:	4902      	ldr	r1, [pc, #8]	; (3e0c <sdc_rand_source_register+0xc>)
    3e02:	c80d      	ldmia	r0, {r0, r2, r3}
    3e04:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    3e08:	2000      	movs	r0, #0
    3e0a:	4770      	bx	lr
    3e0c:	20000dc8 	.word	0x20000dc8

00003e10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    3e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e12:	4c12      	ldr	r4, [pc, #72]	; (3e5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    3e14:	2600      	movs	r6, #0
    3e16:	6825      	ldr	r5, [r4, #0]
    3e18:	e011      	b.n	3e3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3e1a:	9800      	ldr	r0, [sp, #0]
    3e1c:	2802      	cmp	r0, #2
    3e1e:	d002      	beq.n	3e26 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    3e20:	2803      	cmp	r0, #3
    3e22:	d10c      	bne.n	3e3e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    3e24:	e006      	b.n	3e34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    3e26:	6820      	ldr	r0, [r4, #0]
    3e28:	b110      	cbz	r0, 3e30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    3e2a:	2000      	movs	r0, #0
    3e2c:	6026      	str	r6, [r4, #0]
    3e2e:	e005      	b.n	3e3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    3e30:	2128      	movs	r1, #40	; 0x28
    3e32:	e00c      	b.n	3e4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3e34:	6820      	ldr	r0, [r4, #0]
    3e36:	b168      	cbz	r0, 3e54 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    3e38:	2001      	movs	r0, #1
    3e3a:	6026      	str	r6, [r4, #0]
    3e3c:	47a8      	blx	r5
    3e3e:	4668      	mov	r0, sp
    3e40:	f000 fd44 	bl	48cc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    3e44:	2800      	cmp	r0, #0
    3e46:	d0e8      	beq.n	3e1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    3e48:	2805      	cmp	r0, #5
    3e4a:	d005      	beq.n	3e58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    3e4c:	2135      	movs	r1, #53	; 0x35
    3e4e:	2004      	movs	r0, #4
    3e50:	f7ff ff12 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e54:	212d      	movs	r1, #45	; 0x2d
    3e56:	e7fa      	b.n	3e4e <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    3e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e5a:	0000      	.short	0x0000
    3e5c:	20000060 	.word	0x20000060
    3e60:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3e62:	4c1f      	ldr	r4, [pc, #124]	; (3ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd0>)
    3e64:	4605      	mov	r5, r0
    3e66:	7820      	ldrb	r0, [r4, #0]
    3e68:	b140      	cbz	r0, 3e7c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    3e6a:	78a2      	ldrb	r2, [r4, #2]
    3e6c:	1c61      	adds	r1, r4, #1
    3e6e:	4628      	mov	r0, r5
    3e70:	1c92      	adds	r2, r2, #2
    3e72:	f007 fd57 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e76:	2000      	movs	r0, #0
    3e78:	7020      	strb	r0, [r4, #0]
    3e7a:	e021      	b.n	3ec0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    3e7c:	4819      	ldr	r0, [pc, #100]	; (3ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3e7e:	f005 ffc5 	bl	9e0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    3e82:	2800      	cmp	r0, #0
    3e84:	d01d      	beq.n	3ec2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3e86:	4c17      	ldr	r4, [pc, #92]	; (3ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3e88:	7820      	ldrb	r0, [r4, #0]
    3e8a:	2811      	cmp	r0, #17
    3e8c:	d104      	bne.n	3e98 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    3e8e:	210a      	movs	r1, #10
    3e90:	203e      	movs	r0, #62	; 0x3e
    3e92:	f007 fec8 	bl	bc26 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3e96:	b118      	cbz	r0, 3ea0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x90>
    3e98:	7820      	ldrb	r0, [r4, #0]
    3e9a:	2808      	cmp	r0, #8
    3e9c:	d005      	beq.n	3eaa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x9a>
    3e9e:	e009      	b.n	3eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>
    3ea0:	4910      	ldr	r1, [pc, #64]	; (3ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3ea2:	4628      	mov	r0, r5
    3ea4:	f008 f8c7 	bl	c036 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    3ea8:	e00a      	b.n	3ec0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb0>
    3eaa:	2105      	movs	r1, #5
    3eac:	203e      	movs	r0, #62	; 0x3e
    3eae:	f007 feba 	bl	bc26 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    3eb2:	b138      	cbz	r0, 3ec4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb4>
    3eb4:	490b      	ldr	r1, [pc, #44]	; (3ee4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd4>)
    3eb6:	4628      	mov	r0, r5
    3eb8:	f007 ff13 	bl	bce2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    3ebc:	2800      	cmp	r0, #0
    3ebe:	d000      	beq.n	3ec2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3ec0:	2001      	movs	r0, #1
    3ec2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3ec4:	88a0      	ldrh	r0, [r4, #4]
    3ec6:	f8ad 0000 	strh.w	r0, [sp]
    3eca:	a901      	add	r1, sp, #4
    3ecc:	4668      	mov	r0, sp
    3ece:	f008 f9cc 	bl	c26a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    3ed2:	2800      	cmp	r0, #0
    3ed4:	d0f5      	beq.n	3ec2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xb2>
    3ed6:	219a      	movs	r1, #154	; 0x9a
    3ed8:	2008      	movs	r0, #8
    3eda:	f7ff fecd 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ede:	0000      	.short	0x0000
    3ee0:	20000f66 	.word	0x20000f66
    3ee4:	20000e64 	.word	0x20000e64
    3ee8:	b570      	push	{r4, r5, r6, lr}
    3eea:	780a      	ldrb	r2, [r1, #0]
    3eec:	7082      	strb	r2, [r0, #2]
    3eee:	b33a      	cbz	r2, 3f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    3ef0:	2a01      	cmp	r2, #1
    3ef2:	d825      	bhi.n	3f40 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x130>
    3ef4:	2313      	movs	r3, #19
    3ef6:	7003      	strb	r3, [r0, #0]
    3ef8:	2300      	movs	r3, #0
    3efa:	e00a      	b.n	3f12 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x102>
    3efc:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    3f00:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    3f04:	78a6      	ldrb	r6, [r4, #2]
    3f06:	70ee      	strb	r6, [r5, #3]
    3f08:	8864      	ldrh	r4, [r4, #2]
    3f0a:	0a24      	lsrs	r4, r4, #8
    3f0c:	1c5b      	adds	r3, r3, #1
    3f0e:	712c      	strb	r4, [r5, #4]
    3f10:	b2db      	uxtb	r3, r3
    3f12:	4293      	cmp	r3, r2
    3f14:	d3f2      	bcc.n	3efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xec>
    3f16:	2300      	movs	r3, #0
    3f18:	e00b      	b.n	3f32 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x122>
    3f1a:	bf00      	nop
    3f1c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    3f20:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    3f24:	792e      	ldrb	r6, [r5, #4]
    3f26:	7166      	strb	r6, [r4, #5]
    3f28:	88ad      	ldrh	r5, [r5, #4]
    3f2a:	0a2d      	lsrs	r5, r5, #8
    3f2c:	1c5b      	adds	r3, r3, #1
    3f2e:	71a5      	strb	r5, [r4, #6]
    3f30:	b2db      	uxtb	r3, r3
    3f32:	4293      	cmp	r3, r2
    3f34:	d3f2      	bcc.n	3f1c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x10c>
    3f36:	2101      	movs	r1, #1
    3f38:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    3f3c:	b2c0      	uxtb	r0, r0
    3f3e:	bd70      	pop	{r4, r5, r6, pc}
    3f40:	2000      	movs	r0, #0
    3f42:	bd70      	pop	{r4, r5, r6, pc}

00003f44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    3f44:	2101      	movs	r1, #1
    3f46:	4a0c      	ldr	r2, [pc, #48]	; (3f78 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    3f48:	2840      	cmp	r0, #64	; 0x40
    3f4a:	d20c      	bcs.n	3f66 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    3f4c:	2820      	cmp	r0, #32
    3f4e:	d803      	bhi.n	3f58 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    3f50:	1e40      	subs	r0, r0, #1
    3f52:	4081      	lsls	r1, r0
    3f54:	6810      	ldr	r0, [r2, #0]
    3f56:	e002      	b.n	3f5e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3f58:	3821      	subs	r0, #33	; 0x21
    3f5a:	4081      	lsls	r1, r0
    3f5c:	6850      	ldr	r0, [r2, #4]
    3f5e:	4201      	tst	r1, r0
    3f60:	d107      	bne.n	3f72 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3f62:	2000      	movs	r0, #0
    3f64:	4770      	bx	lr
    3f66:	28ff      	cmp	r0, #255	; 0xff
    3f68:	d003      	beq.n	3f72 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    3f6a:	3840      	subs	r0, #64	; 0x40
    3f6c:	4081      	lsls	r1, r0
    3f6e:	6890      	ldr	r0, [r2, #8]
    3f70:	e7f5      	b.n	3f5e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    3f72:	2001      	movs	r0, #1
    3f74:	4770      	bx	lr
    3f76:	0000      	.short	0x0000
    3f78:	20000064 	.word	0x20000064

00003f7c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    3f7c:	2101      	movs	r1, #1
    3f7e:	1e40      	subs	r0, r0, #1
    3f80:	4081      	lsls	r1, r0
    3f82:	4804      	ldr	r0, [pc, #16]	; (3f94 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    3f84:	68c0      	ldr	r0, [r0, #12]
    3f86:	4201      	tst	r1, r0
    3f88:	d001      	beq.n	3f8e <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    3f8a:	2001      	movs	r0, #1
    3f8c:	4770      	bx	lr
    3f8e:	2000      	movs	r0, #0
    3f90:	4770      	bx	lr
    3f92:	0000      	.short	0x0000
    3f94:	20000064 	.word	0x20000064

00003f98 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    3f98:	4901      	ldr	r1, [pc, #4]	; (3fa0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    3f9a:	6800      	ldr	r0, [r0, #0]
    3f9c:	60c8      	str	r0, [r1, #12]
    3f9e:	4770      	bx	lr
    3fa0:	20000064 	.word	0x20000064

00003fa4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    3fa4:	4904      	ldr	r1, [pc, #16]	; (3fb8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    3fa6:	6802      	ldr	r2, [r0, #0]
    3fa8:	6840      	ldr	r0, [r0, #4]
    3faa:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    3fae:	600a      	str	r2, [r1, #0]
    3fb0:	4a02      	ldr	r2, [pc, #8]	; (3fbc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    3fb2:	4310      	orrs	r0, r2
    3fb4:	6048      	str	r0, [r1, #4]
    3fb6:	4770      	bx	lr
    3fb8:	20000064 	.word	0x20000064
    3fbc:	024007f8 	.word	0x024007f8

00003fc0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    3fc0:	4901      	ldr	r1, [pc, #4]	; (3fc8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    3fc2:	6800      	ldr	r0, [r0, #0]
    3fc4:	6088      	str	r0, [r1, #8]
    3fc6:	4770      	bx	lr
    3fc8:	20000064 	.word	0x20000064

00003fcc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    3fcc:	4805      	ldr	r0, [pc, #20]	; (3fe4 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    3fce:	f04f 31ff 	mov.w	r1, #4294967295
    3fd2:	6001      	str	r1, [r0, #0]
    3fd4:	0cc9      	lsrs	r1, r1, #19
    3fd6:	6041      	str	r1, [r0, #4]
    3fd8:	2100      	movs	r1, #0
    3fda:	6081      	str	r1, [r0, #8]
    3fdc:	211f      	movs	r1, #31
    3fde:	60c1      	str	r1, [r0, #12]
    3fe0:	4770      	bx	lr
    3fe2:	0000      	.short	0x0000
    3fe4:	20000064 	.word	0x20000064

00003fe8 <sdc_hci_cmd_cb_reset>:
    3fe8:	b510      	push	{r4, lr}
    3fea:	f7ff ffef 	bl	3fcc <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    3fee:	f00a ff18 	bl	ee22 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    3ff2:	4604      	mov	r4, r0
    3ff4:	4802      	ldr	r0, [pc, #8]	; (4000 <sdc_hci_cmd_cb_reset+0x18>)
    3ff6:	6800      	ldr	r0, [r0, #0]
    3ff8:	b100      	cbz	r0, 3ffc <sdc_hci_cmd_cb_reset+0x14>
    3ffa:	4780      	blx	r0
    3ffc:	4620      	mov	r0, r4
    3ffe:	bd10      	pop	{r4, pc}
    4000:	20000074 	.word	0x20000074

00004004 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4004:	4901      	ldr	r1, [pc, #4]	; (400c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4006:	6008      	str	r0, [r1, #0]
    4008:	4770      	bx	lr
    400a:	0000      	.short	0x0000
    400c:	20000074 	.word	0x20000074

00004010 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4010:	2102      	movs	r1, #2
    4012:	8001      	strh	r1, [r0, #0]
    4014:	8041      	strh	r1, [r0, #2]
    4016:	2100      	movs	r1, #0
    4018:	7101      	strb	r1, [r0, #4]
    401a:	21df      	movs	r1, #223	; 0xdf
    401c:	7141      	strb	r1, [r0, #5]
    401e:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    4022:	80c1      	strh	r1, [r0, #6]
    4024:	4901      	ldr	r1, [pc, #4]	; (402c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4026:	6081      	str	r1, [r0, #8]
    4028:	2000      	movs	r0, #0
    402a:	4770      	bx	lr
    402c:	667c1fd6 	.word	0x667c1fd6

00004030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4030:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4032:	4604      	mov	r4, r0
    4034:	4669      	mov	r1, sp
    4036:	f008 fc76 	bl	c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    403a:	b170      	cbz	r0, 405a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    403c:	f240 215a 	movw	r1, #602	; 0x25a
    4040:	e008      	b.n	4054 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4042:	bf00      	nop
    4044:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4048:	4621      	mov	r1, r4
    404a:	f000 f8ab 	bl	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    404e:	b120      	cbz	r0, 405a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4050:	f240 215f 	movw	r1, #607	; 0x25f
    4054:	2017      	movs	r0, #23
    4056:	f7ff fe0f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    405a:	4668      	mov	r0, sp
    405c:	f000 f852 	bl	4104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4060:	2800      	cmp	r0, #0
    4062:	d0ef      	beq.n	4044 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4064:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4068:	b510      	push	{r4, lr}
    406a:	2802      	cmp	r0, #2
    406c:	d304      	bcc.n	4078 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x10>
    406e:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4072:	2017      	movs	r0, #23
    4074:	f7ff fe00 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4078:	4901      	ldr	r1, [pc, #4]	; (4080 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x18>)
    407a:	5c08      	ldrb	r0, [r1, r0]
    407c:	bd10      	pop	{r4, pc}
    407e:	0000      	.short	0x0000
    4080:	20000dd4 	.word	0x20000dd4

00004084 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    4084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4086:	0005      	movs	r5, r0
    4088:	9500      	str	r5, [sp, #0]
    408a:	d010      	beq.n	40ae <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2a>
    408c:	2600      	movs	r6, #0
    408e:	7808      	ldrb	r0, [r1, #0]
    4090:	7849      	ldrb	r1, [r1, #1]
    4092:	4604      	mov	r4, r0
    4094:	42a1      	cmp	r1, r4
    4096:	d900      	bls.n	409a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x16>
    4098:	460c      	mov	r4, r1
    409a:	1cea      	adds	r2, r5, #3
    409c:	f022 0203 	bic.w	r2, r2, #3
    40a0:	42aa      	cmp	r2, r5
    40a2:	d006      	beq.n	40b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    40a4:	f240 1179 	movw	r1, #377	; 0x179
    40a8:	2017      	movs	r0, #23
    40aa:	f7ff fde5 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ae:	2601      	movs	r6, #1
    40b0:	e7ed      	b.n	408e <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xa>
    40b2:	4f13      	ldr	r7, [pc, #76]	; (4100 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    40b4:	7038      	strb	r0, [r7, #0]
    40b6:	7079      	strb	r1, [r7, #1]
    40b8:	4631      	mov	r1, r6
    40ba:	4668      	mov	r0, sp
    40bc:	f000 f8ee 	bl	429c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf8>
    40c0:	2100      	movs	r1, #0
    40c2:	460b      	mov	r3, r1
    40c4:	9800      	ldr	r0, [sp, #0]
    40c6:	1cc0      	adds	r0, r0, #3
    40c8:	f020 0003 	bic.w	r0, r0, #3
    40cc:	9000      	str	r0, [sp, #0]
    40ce:	b96e      	cbnz	r6, 40ec <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    40d0:	eb07 0281 	add.w	r2, r7, r1, lsl #2
    40d4:	60d0      	str	r0, [r2, #12]
    40d6:	2000      	movs	r0, #0
    40d8:	e006      	b.n	40e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    40da:	bf00      	nop
    40dc:	f8d2 c00c 	ldr.w	ip, [r2, #12]
    40e0:	f84c 3020 	str.w	r3, [ip, r0, lsl #2]
    40e4:	1c40      	adds	r0, r0, #1
    40e6:	b2c0      	uxtb	r0, r0
    40e8:	42a0      	cmp	r0, r4
    40ea:	d3f7      	bcc.n	40dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    40ec:	9800      	ldr	r0, [sp, #0]
    40ee:	1c49      	adds	r1, r1, #1
    40f0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    40f4:	b2c9      	uxtb	r1, r1
    40f6:	9000      	str	r0, [sp, #0]
    40f8:	2902      	cmp	r1, #2
    40fa:	d3e3      	bcc.n	40c4 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x40>
    40fc:	1b40      	subs	r0, r0, r5
    40fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4100:	20000dd4 	.word	0x20000dd4

00004104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4104:	b570      	push	{r4, r5, r6, lr}
    4106:	4604      	mov	r4, r0
    4108:	f008 fd81 	bl	cc0e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    410c:	b108      	cbz	r0, 4112 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    410e:	2010      	movs	r0, #16
    4110:	bd70      	pop	{r4, r5, r6, pc}
    4112:	7825      	ldrb	r5, [r4, #0]
    4114:	f000 f8fe 	bl	4314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    4118:	4602      	mov	r2, r0
    411a:	480c      	ldr	r0, [pc, #48]	; (414c <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    411c:	8861      	ldrh	r1, [r4, #2]
    411e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4122:	e00e      	b.n	4142 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4124:	68c3      	ldr	r3, [r0, #12]
    4126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    412a:	b143      	cbz	r3, 413e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    412c:	1c4a      	adds	r2, r1, #1
    412e:	8062      	strh	r2, [r4, #2]
    4130:	80a1      	strh	r1, [r4, #4]
    4132:	68c0      	ldr	r0, [r0, #12]
    4134:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4138:	60a0      	str	r0, [r4, #8]
    413a:	2000      	movs	r0, #0
    413c:	bd70      	pop	{r4, r5, r6, pc}
    413e:	1c49      	adds	r1, r1, #1
    4140:	b289      	uxth	r1, r1
    4142:	4291      	cmp	r1, r2
    4144:	d3ee      	bcc.n	4124 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4146:	8061      	strh	r1, [r4, #2]
    4148:	2005      	movs	r0, #5
    414a:	bd70      	pop	{r4, r5, r6, pc}
    414c:	20000dd4 	.word	0x20000dd4

00004150 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    4150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4154:	b121      	cbz	r1, 4160 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    4156:	2901      	cmp	r1, #1
    4158:	d002      	beq.n	4160 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x10>
    415a:	2000      	movs	r0, #0
    415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4160:	4c0f      	ldr	r4, [pc, #60]	; (41a0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>)
    4162:	2700      	movs	r7, #0
    4164:	463b      	mov	r3, r7
    4166:	f64f 76ff 	movw	r6, #65535	; 0xffff
    416a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    416e:	f814 c001 	ldrb.w	ip, [r4, r1]
    4172:	e00a      	b.n	418a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3a>
    4174:	19dc      	adds	r4, r3, r7
    4176:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    417a:	b2a4      	uxth	r4, r4
    417c:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4180:	f1be 0f00 	cmp.w	lr, #0
    4184:	d004      	beq.n	4190 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x40>
    4186:	1c5b      	adds	r3, r3, #1
    4188:	b29b      	uxth	r3, r3
    418a:	459c      	cmp	ip, r3
    418c:	d8f2      	bhi.n	4174 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x24>
    418e:	4634      	mov	r4, r6
    4190:	8004      	strh	r4, [r0, #0]
    4192:	4620      	mov	r0, r4
    4194:	42b4      	cmp	r4, r6
    4196:	d0e0      	beq.n	415a <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0xa>
    4198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    419c:	f000 b834 	b.w	4208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>
    41a0:	20000dd4 	.word	0x20000dd4

000041a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    41a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    41a8:	4606      	mov	r6, r0
    41aa:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    41ae:	460c      	mov	r4, r1
    41b0:	f243 0702 	movw	r7, #12290	; 0x3002
    41b4:	38ff      	subs	r0, #255	; 0xff
    41b6:	d020      	beq.n	41fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    41b8:	2c02      	cmp	r4, #2
    41ba:	d302      	bcc.n	41c2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1e>
    41bc:	2007      	movs	r0, #7
    41be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41c2:	4630      	mov	r0, r6
    41c4:	f000 f85a 	bl	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>
    41c8:	0005      	movs	r5, r0
    41ca:	d016      	beq.n	41fa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x56>
    41cc:	480c      	ldr	r0, [pc, #48]	; (4200 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x5c>)
    41ce:	4629      	mov	r1, r5
    41d0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
    41d4:	4630      	mov	r0, r6
    41d6:	4790      	blx	r2
    41d8:	480a      	ldr	r0, [pc, #40]	; (4204 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x60>)
    41da:	2100      	movs	r1, #0
    41dc:	eb00 0784 	add.w	r7, r0, r4, lsl #2
    41e0:	68f8      	ldr	r0, [r7, #12]
    41e2:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
    41e6:	4620      	mov	r0, r4
    41e8:	f000 f88a 	bl	4300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    41ec:	4602      	mov	r2, r0
    41ee:	4629      	mov	r1, r5
    41f0:	6878      	ldr	r0, [r7, #4]
    41f2:	f008 fb77 	bl	c8e4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    41f6:	2000      	movs	r0, #0
    41f8:	e7e1      	b.n	41be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    41fa:	4638      	mov	r0, r7
    41fc:	e7df      	b.n	41be <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x1a>
    41fe:	0000      	.short	0x0000
    4200:	00004334 	.word	0x00004334
    4204:	20000dd4 	.word	0x20000dd4
    4208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    420c:	4690      	mov	r8, r2
    420e:	460d      	mov	r5, r1
    4210:	4607      	mov	r7, r0
    4212:	f008 fb99 	bl	c948 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4216:	b148      	cbz	r0, 422c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x88>
    4218:	4816      	ldr	r0, [pc, #88]	; (4274 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>)
    421a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    421e:	68f0      	ldr	r0, [r6, #12]
    4220:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    4224:	b128      	cbz	r0, 4232 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x8e>
    4226:	f44f 719d 	mov.w	r1, #314	; 0x13a
    422a:	e015      	b.n	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    422c:	f240 1139 	movw	r1, #313	; 0x139
    4230:	e012      	b.n	4258 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4232:	6870      	ldr	r0, [r6, #4]
    4234:	2800      	cmp	r0, #0
    4236:	d01a      	beq.n	426e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xca>
    4238:	4628      	mov	r0, r5
    423a:	f000 f861 	bl	4300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    423e:	4601      	mov	r1, r0
    4240:	6870      	ldr	r0, [r6, #4]
    4242:	f008 fb01 	bl	c848 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4246:	0004      	movs	r4, r0
    4248:	d010      	beq.n	426c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc8>
    424a:	68f0      	ldr	r0, [r6, #12]
    424c:	2d02      	cmp	r5, #2
    424e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4252:	d304      	bcc.n	425e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xba>
    4254:	f240 1145 	movw	r1, #325	; 0x145
    4258:	2017      	movs	r0, #23
    425a:	f7ff fd0d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    425e:	4806      	ldr	r0, [pc, #24]	; (4278 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd4>)
    4260:	4642      	mov	r2, r8
    4262:	4621      	mov	r1, r4
    4264:	f850 3025 	ldr.w	r3, [r0, r5, lsl #2]
    4268:	4638      	mov	r0, r7
    426a:	4798      	blx	r3
    426c:	4620      	mov	r0, r4
    426e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4272:	0000      	.short	0x0000
    4274:	20000dd4 	.word	0x20000dd4
    4278:	0000432c 	.word	0x0000432c
    427c:	b570      	push	{r4, r5, r6, lr}
    427e:	460c      	mov	r4, r1
    4280:	4605      	mov	r5, r0
    4282:	f008 fb61 	bl	c948 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x22>
    4286:	2800      	cmp	r0, #0
    4288:	d005      	beq.n	4296 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf2>
    428a:	4803      	ldr	r0, [pc, #12]	; (4298 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf4>)
    428c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4290:	68c0      	ldr	r0, [r0, #12]
    4292:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    4296:	bd70      	pop	{r4, r5, r6, pc}
    4298:	20000dd4 	.word	0x20000dd4
    429c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    42a0:	4e16      	ldr	r6, [pc, #88]	; (42fc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    42a2:	4688      	mov	r8, r1
    42a4:	4605      	mov	r5, r0
    42a6:	2400      	movs	r4, #0
    42a8:	6828      	ldr	r0, [r5, #0]
    42aa:	1cc0      	adds	r0, r0, #3
    42ac:	f020 0003 	bic.w	r0, r0, #3
    42b0:	6028      	str	r0, [r5, #0]
    42b2:	4620      	mov	r0, r4
    42b4:	f000 f824 	bl	4300 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    42b8:	5d31      	ldrb	r1, [r6, r4]
    42ba:	4348      	muls	r0, r1
    42bc:	f1b8 0f00 	cmp.w	r8, #0
    42c0:	d001      	beq.n	42c6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x122>
    42c2:	2200      	movs	r2, #0
    42c4:	e000      	b.n	42c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    42c6:	682a      	ldr	r2, [r5, #0]
    42c8:	4601      	mov	r1, r0
    42ca:	9200      	str	r2, [sp, #0]
    42cc:	b132      	cbz	r2, 42dc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x138>
    42ce:	2700      	movs	r7, #0
    42d0:	ea4f 000d 	mov.w	r0, sp
    42d4:	f008 fae5 	bl	c8a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    42d8:	b11f      	cbz	r7, 42e2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x13e>
    42da:	e006      	b.n	42ea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x146>
    42dc:	2701      	movs	r7, #1
    42de:	2000      	movs	r0, #0
    42e0:	e7f8      	b.n	42d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x130>
    42e2:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    42e6:	9a00      	ldr	r2, [sp, #0]
    42e8:	604a      	str	r2, [r1, #4]
    42ea:	6829      	ldr	r1, [r5, #0]
    42ec:	1c64      	adds	r4, r4, #1
    42ee:	4408      	add	r0, r1
    42f0:	b2e4      	uxtb	r4, r4
    42f2:	6028      	str	r0, [r5, #0]
    42f4:	2c02      	cmp	r4, #2
    42f6:	d3d7      	bcc.n	42a8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x104>
    42f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    42fc:	20000dd4 	.word	0x20000dd4
    4300:	4903      	ldr	r1, [pc, #12]	; (4310 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16c>)
    4302:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4306:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    430a:	1cc0      	adds	r0, r0, #3
    430c:	4008      	ands	r0, r1
    430e:	4770      	bx	lr
    4310:	00004328 	.word	0x00004328
    4314:	4903      	ldr	r1, [pc, #12]	; (4324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x180>)
    4316:	7808      	ldrb	r0, [r1, #0]
    4318:	7849      	ldrb	r1, [r1, #1]
    431a:	4288      	cmp	r0, r1
    431c:	d200      	bcs.n	4320 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x17c>
    431e:	4608      	mov	r0, r1
    4320:	4770      	bx	lr
    4322:	0000      	.short	0x0000
    4324:	20000dd4 	.word	0x20000dd4
    4328:	00d40218 	.word	0x00d40218
    432c:	0000c95d 	.word	0x0000c95d
    4330:	0000c95d 	.word	0x0000c95d
    4334:	0000e405 	.word	0x0000e405
    4338:	0000d87d 	.word	0x0000d87d

0000433c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    433c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4340:	4c26      	ldr	r4, [pc, #152]	; (43dc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4342:	4680      	mov	r8, r0
    4344:	b081      	sub	sp, #4
    4346:	6820      	ldr	r0, [r4, #0]
    4348:	469a      	mov	sl, r3
    434a:	4693      	mov	fp, r2
    434c:	b158      	cbz	r0, 4366 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    434e:	7a02      	ldrb	r2, [r0, #8]
    4350:	4542      	cmp	r2, r8
    4352:	d903      	bls.n	435c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4354:	6841      	ldr	r1, [r0, #4]
    4356:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    435a:	b140      	cbz	r0, 436e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    435c:	f243 0002 	movw	r0, #12290	; 0x3002
    4360:	b005      	add	sp, #20
    4362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4366:	21a5      	movs	r1, #165	; 0xa5
    4368:	2018      	movs	r0, #24
    436a:	f7ff fc85 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    436e:	4619      	mov	r1, r3
    4370:	9802      	ldr	r0, [sp, #8]
    4372:	f008 fb0b 	bl	c98c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    4376:	b286      	uxth	r6, r0
    4378:	4658      	mov	r0, fp
    437a:	990e      	ldr	r1, [sp, #56]	; 0x38
    437c:	f008 fafd 	bl	c97a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4380:	b285      	uxth	r5, r0
    4382:	1970      	adds	r0, r6, r5
    4384:	1d00      	adds	r0, r0, #4
    4386:	b287      	uxth	r7, r0
    4388:	6820      	ldr	r0, [r4, #0]
    438a:	46a1      	mov	r9, r4
    438c:	4639      	mov	r1, r7
    438e:	6800      	ldr	r0, [r0, #0]
    4390:	f008 fa5a 	bl	c848 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4394:	0004      	movs	r4, r0
    4396:	d01f      	beq.n	43d8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    4398:	8067      	strh	r7, [r4, #2]
    439a:	8025      	strh	r5, [r4, #0]
    439c:	4629      	mov	r1, r5
    439e:	1d20      	adds	r0, r4, #4
    43a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    43a2:	4607      	mov	r7, r0
    43a4:	465a      	mov	r2, fp
    43a6:	2301      	movs	r3, #1
    43a8:	9500      	str	r5, [sp, #0]
    43aa:	f008 f9ad 	bl	c708 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    43ae:	8820      	ldrh	r0, [r4, #0]
    43b0:	4631      	mov	r1, r6
    43b2:	4438      	add	r0, r7
    43b4:	2301      	movs	r3, #1
    43b6:	9a02      	ldr	r2, [sp, #8]
    43b8:	f8cd a000 	str.w	sl, [sp]
    43bc:	f008 f9a4 	bl	c708 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    43c0:	8820      	ldrh	r0, [r4, #0]
    43c2:	19c1      	adds	r1, r0, r7
    43c4:	4638      	mov	r0, r7
    43c6:	f008 f9d0 	bl	c76a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    43ca:	f8d9 0000 	ldr.w	r0, [r9]
    43ce:	6841      	ldr	r1, [r0, #4]
    43d0:	2000      	movs	r0, #0
    43d2:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    43d6:	e7c3      	b.n	4360 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    43d8:	2004      	movs	r0, #4
    43da:	e7c1      	b.n	4360 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    43dc:	20000078 	.word	0x20000078

000043e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    43e0:	b570      	push	{r4, r5, r6, lr}
    43e2:	4c14      	ldr	r4, [pc, #80]	; (4434 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    43e4:	6823      	ldr	r3, [r4, #0]
    43e6:	b18b      	cbz	r3, 440c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    43e8:	7a19      	ldrb	r1, [r3, #8]
    43ea:	4281      	cmp	r1, r0
    43ec:	d912      	bls.n	4414 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    43ee:	685a      	ldr	r2, [r3, #4]
    43f0:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    43f4:	b171      	cbz	r1, 4414 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    43f6:	2500      	movs	r5, #0
    43f8:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    43fc:	884a      	ldrh	r2, [r1, #2]
    43fe:	6818      	ldr	r0, [r3, #0]
    4400:	f008 fa70 	bl	c8e4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    4404:	6821      	ldr	r1, [r4, #0]
    4406:	2000      	movs	r0, #0
    4408:	7a0a      	ldrb	r2, [r1, #8]
    440a:	e00c      	b.n	4426 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    440c:	21c8      	movs	r1, #200	; 0xc8
    440e:	2018      	movs	r0, #24
    4410:	f7ff fc32 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4414:	f243 0002 	movw	r0, #12290	; 0x3002
    4418:	bd70      	pop	{r4, r5, r6, pc}
    441a:	684b      	ldr	r3, [r1, #4]
    441c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4420:	b933      	cbnz	r3, 4430 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4422:	1c40      	adds	r0, r0, #1
    4424:	b2c0      	uxtb	r0, r0
    4426:	4282      	cmp	r2, r0
    4428:	d8f7      	bhi.n	441a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    442a:	6808      	ldr	r0, [r1, #0]
    442c:	f008 fa4f 	bl	c8ce <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4430:	2000      	movs	r0, #0
    4432:	bd70      	pop	{r4, r5, r6, pc}
    4434:	20000078 	.word	0x20000078

00004438 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    4438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    443c:	460d      	mov	r5, r1
    443e:	0004      	movs	r4, r0
    4440:	4690      	mov	r8, r2
    4442:	f04f 0600 	mov.w	r6, #0
    4446:	d009      	beq.n	445c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    4448:	2700      	movs	r7, #0
    444a:	1ce0      	adds	r0, r4, #3
    444c:	f020 0003 	bic.w	r0, r0, #3
    4450:	42a0      	cmp	r0, r4
    4452:	d005      	beq.n	4460 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4454:	2186      	movs	r1, #134	; 0x86
    4456:	2018      	movs	r0, #24
    4458:	f7ff fc0e 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    445c:	2701      	movs	r7, #1
    445e:	e7f4      	b.n	444a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4460:	b1cd      	cbz	r5, 4496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4462:	4611      	mov	r1, r2
    4464:	2000      	movs	r0, #0
    4466:	f008 fa1c 	bl	c8a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    446a:	300c      	adds	r0, #12
    446c:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4470:	b98f      	cbnz	r7, 4496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4472:	4f0a      	ldr	r7, [pc, #40]	; (449c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4474:	f104 000c 	add.w	r0, r4, #12
    4478:	00aa      	lsls	r2, r5, #2
    447a:	603c      	str	r4, [r7, #0]
    447c:	7225      	strb	r5, [r4, #8]
    447e:	6060      	str	r0, [r4, #4]
    4480:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4484:	6020      	str	r0, [r4, #0]
    4486:	2100      	movs	r1, #0
    4488:	6860      	ldr	r0, [r4, #4]
    448a:	f007 fac5 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    448e:	4641      	mov	r1, r8
    4490:	6838      	ldr	r0, [r7, #0]
    4492:	f008 fa06 	bl	c8a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    4496:	4630      	mov	r0, r6
    4498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    449c:	20000078 	.word	0x20000078

000044a0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    44a0:	b570      	push	{r4, r5, r6, lr}
    44a2:	4d08      	ldr	r5, [pc, #32]	; (44c4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    44a4:	6828      	ldr	r0, [r5, #0]
    44a6:	2800      	cmp	r0, #0
    44a8:	d00a      	beq.n	44c0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    44aa:	2400      	movs	r4, #0
    44ac:	e004      	b.n	44b8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    44ae:	4620      	mov	r0, r4
    44b0:	f7ff ff96 	bl	43e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    44b4:	1c64      	adds	r4, r4, #1
    44b6:	b2e4      	uxtb	r4, r4
    44b8:	6828      	ldr	r0, [r5, #0]
    44ba:	7a00      	ldrb	r0, [r0, #8]
    44bc:	42a0      	cmp	r0, r4
    44be:	d8f6      	bhi.n	44ae <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    44c0:	bd70      	pop	{r4, r5, r6, pc}
    44c2:	0000      	.short	0x0000
    44c4:	20000078 	.word	0x20000078

000044c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    44c8:	4909      	ldr	r1, [pc, #36]	; (44f0 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    44ca:	b510      	push	{r4, lr}
    44cc:	4602      	mov	r2, r0
    44ce:	6809      	ldr	r1, [r1, #0]
    44d0:	2000      	movs	r0, #0
    44d2:	b149      	cbz	r1, 44e8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    44d4:	7a0b      	ldrb	r3, [r1, #8]
    44d6:	4293      	cmp	r3, r2
    44d8:	d905      	bls.n	44e6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    44da:	6849      	ldr	r1, [r1, #4]
    44dc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    44e0:	2900      	cmp	r1, #0
    44e2:	d000      	beq.n	44e6 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    44e4:	1d08      	adds	r0, r1, #4
    44e6:	bd10      	pop	{r4, pc}
    44e8:	21ee      	movs	r1, #238	; 0xee
    44ea:	2018      	movs	r0, #24
    44ec:	f7ff fbc4 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    44f0:	20000078 	.word	0x20000078

000044f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    44f4:	490a      	ldr	r1, [pc, #40]	; (4520 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    44f6:	b510      	push	{r4, lr}
    44f8:	4602      	mov	r2, r0
    44fa:	6809      	ldr	r1, [r1, #0]
    44fc:	2000      	movs	r0, #0
    44fe:	b159      	cbz	r1, 4518 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    4500:	7a0b      	ldrb	r3, [r1, #8]
    4502:	4293      	cmp	r3, r2
    4504:	d907      	bls.n	4516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4506:	6849      	ldr	r1, [r1, #4]
    4508:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    450c:	2900      	cmp	r1, #0
    450e:	d002      	beq.n	4516 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4510:	f831 0b04 	ldrh.w	r0, [r1], #4
    4514:	4408      	add	r0, r1
    4516:	bd10      	pop	{r4, pc}
    4518:	21fc      	movs	r1, #252	; 0xfc
    451a:	2018      	movs	r0, #24
    451c:	f7ff fbac 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4520:	20000078 	.word	0x20000078
    4524:	b570      	push	{r4, r5, r6, lr}
    4526:	4b1e      	ldr	r3, [pc, #120]	; (45a0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    4528:	6845      	ldr	r5, [r0, #4]
    452a:	4604      	mov	r4, r0
    452c:	2200      	movs	r2, #0
    452e:	b1a1      	cbz	r1, 455a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    4530:	2001      	movs	r0, #1
    4532:	7060      	strb	r0, [r4, #1]
    4534:	8858      	ldrh	r0, [r3, #2]
    4536:	0881      	lsrs	r1, r0, #2
    4538:	f05f 0000 	movs.w	r0, #0
    453c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    4540:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    4544:	831a      	strh	r2, [r3, #24]
    4546:	8419      	strh	r1, [r3, #32]
    4548:	fb00 5301 	mla	r3, r0, r1, r5
    454c:	6073      	str	r3, [r6, #4]
    454e:	1823      	adds	r3, r4, r0
    4550:	1c40      	adds	r0, r0, #1
    4552:	751a      	strb	r2, [r3, #20]
    4554:	2804      	cmp	r0, #4
    4556:	d3f1      	bcc.n	453c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    4558:	bd70      	pop	{r4, r5, r6, pc}
    455a:	7062      	strb	r2, [r4, #1]
    455c:	f05f 0000 	movs.w	r0, #0
    4560:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    4564:	830a      	strh	r2, [r1, #24]
    4566:	840a      	strh	r2, [r1, #32]
    4568:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    456c:	604a      	str	r2, [r1, #4]
    456e:	1821      	adds	r1, r4, r0
    4570:	1c40      	adds	r0, r0, #1
    4572:	750a      	strb	r2, [r1, #20]
    4574:	2804      	cmp	r0, #4
    4576:	d3f3      	bcc.n	4560 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    4578:	8858      	ldrh	r0, [r3, #2]
    457a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    457e:	d201      	bcs.n	4584 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    4580:	0846      	lsrs	r6, r0, #1
    4582:	e000      	b.n	4586 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    4584:	26ff      	movs	r6, #255	; 0xff
    4586:	f008 fa74 	bl	ca72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    458a:	6065      	str	r5, [r4, #4]
    458c:	8420      	strh	r0, [r4, #32]
    458e:	1829      	adds	r1, r5, r0
    4590:	60a1      	str	r1, [r4, #8]
    4592:	8466      	strh	r6, [r4, #34]	; 0x22
    4594:	60e5      	str	r5, [r4, #12]
    4596:	84a0      	strh	r0, [r4, #36]	; 0x24
    4598:	6121      	str	r1, [r4, #16]
    459a:	84e6      	strh	r6, [r4, #38]	; 0x26
    459c:	bd70      	pop	{r4, r5, r6, pc}
    459e:	0000      	.short	0x0000
    45a0:	2000007c 	.word	0x2000007c

000045a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    45a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45a8:	b170      	cbz	r0, 45c8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x24>
    45aa:	2500      	movs	r5, #0
    45ac:	4411      	add	r1, r2
    45ae:	b2cc      	uxtb	r4, r1
    45b0:	4e24      	ldr	r6, [pc, #144]	; (4644 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0xa0>)
    45b2:	1cc1      	adds	r1, r0, #3
    45b4:	2700      	movs	r7, #0
    45b6:	f021 0103 	bic.w	r1, r1, #3
    45ba:	7034      	strb	r4, [r6, #0]
    45bc:	4281      	cmp	r1, r0
    45be:	d005      	beq.n	45cc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x28>
    45c0:	214e      	movs	r1, #78	; 0x4e
    45c2:	2009      	movs	r0, #9
    45c4:	f7ff fb58 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45c8:	2501      	movs	r5, #1
    45ca:	e7ef      	b.n	45ac <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    45cc:	2b1f      	cmp	r3, #31
    45ce:	d804      	bhi.n	45da <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x36>
    45d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    45d4:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    45d8:	e009      	b.n	45ee <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x4a>
    45da:	0059      	lsls	r1, r3, #1
    45dc:	2bff      	cmp	r3, #255	; 0xff
    45de:	d90b      	bls.n	45f8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x54>
    45e0:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    45e4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    45e8:	d200      	bcs.n	45ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    45ea:	4611      	mov	r1, r2
    45ec:	b289      	uxth	r1, r1
    45ee:	1cc9      	adds	r1, r1, #3
    45f0:	f021 0303 	bic.w	r3, r1, #3
    45f4:	b135      	cbz	r5, 4604 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    45f6:	e007      	b.n	4608 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x64>
    45f8:	227c      	movs	r2, #124	; 0x7c
    45fa:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    45fe:	d3f5      	bcc.n	45ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4600:	217c      	movs	r1, #124	; 0x7c
    4602:	e7f3      	b.n	45ec <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x48>
    4604:	6070      	str	r0, [r6, #4]
    4606:	8073      	strh	r3, [r6, #2]
    4608:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    460c:	eb07 02c1 	add.w	r2, r7, r1, lsl #3
    4610:	2100      	movs	r1, #0
    4612:	6876      	ldr	r6, [r6, #4]
    4614:	f04f 0c01 	mov.w	ip, #1
    4618:	e00d      	b.n	4636 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x92>
    461a:	b94d      	cbnz	r5, 4630 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8c>
    461c:	eb01 0781 	add.w	r7, r1, r1, lsl #2
    4620:	eb00 0e02 	add.w	lr, r0, r2
    4624:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    4628:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    462c:	f8c7 e004 	str.w	lr, [r7, #4]
    4630:	1c49      	adds	r1, r1, #1
    4632:	441a      	add	r2, r3
    4634:	b2c9      	uxtb	r1, r1
    4636:	42a1      	cmp	r1, r4
    4638:	d3ef      	bcc.n	461a <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x76>
    463a:	1dd2      	adds	r2, r2, #7
    463c:	f022 0007 	bic.w	r0, r2, #7
    4640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4644:	2000007c 	.word	0x2000007c

00004648 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    4648:	b570      	push	{r4, r5, r6, lr}
    464a:	4a10      	ldr	r2, [pc, #64]	; (468c <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    464c:	2000      	movs	r0, #0
    464e:	6851      	ldr	r1, [r2, #4]
    4650:	7812      	ldrb	r2, [r2, #0]
    4652:	e014      	b.n	467e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    4654:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    4658:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    465c:	b16b      	cbz	r3, 467a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    465e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4662:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    4666:	d00c      	beq.n	4682 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    4668:	2500      	movs	r5, #0
    466a:	70a5      	strb	r5, [r4, #2]
    466c:	2101      	movs	r1, #1
    466e:	4620      	mov	r0, r4
    4670:	f7ff ff58 	bl	4524 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    4674:	7025      	strb	r5, [r4, #0]
    4676:	4620      	mov	r0, r4
    4678:	bd70      	pop	{r4, r5, r6, pc}
    467a:	1c40      	adds	r0, r0, #1
    467c:	b2c0      	uxtb	r0, r0
    467e:	4290      	cmp	r0, r2
    4680:	d3e8      	bcc.n	4654 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    4682:	21a9      	movs	r1, #169	; 0xa9
    4684:	2009      	movs	r0, #9
    4686:	f7ff faf7 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    468a:	0000      	.short	0x0000
    468c:	2000007c 	.word	0x2000007c

00004690 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    4690:	4804      	ldr	r0, [pc, #16]	; (46a4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    4692:	b510      	push	{r4, lr}
    4694:	8840      	ldrh	r0, [r0, #2]
    4696:	0884      	lsrs	r4, r0, #2
    4698:	f008 f9eb 	bl	ca72 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x114>
    469c:	4284      	cmp	r4, r0
    469e:	d300      	bcc.n	46a2 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    46a0:	4620      	mov	r0, r4
    46a2:	bd10      	pop	{r4, pc}
    46a4:	2000007c 	.word	0x2000007c
    46a8:	4909      	ldr	r1, [pc, #36]	; (46d0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x40>)
    46aa:	b510      	push	{r4, lr}
    46ac:	4807      	ldr	r0, [pc, #28]	; (46cc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x3c>)
    46ae:	6008      	str	r0, [r1, #0]
    46b0:	4b08      	ldr	r3, [pc, #32]	; (46d4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x44>)
    46b2:	2011      	movs	r0, #17
    46b4:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    46b8:	2200      	movs	r2, #0
    46ba:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    46be:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    46c2:	1c40      	adds	r0, r0, #1
    46c4:	b2c0      	uxtb	r0, r0
    46c6:	2814      	cmp	r0, #20
    46c8:	d3f4      	bcc.n	46b4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x24>
    46ca:	bd10      	pop	{r4, pc}
    46cc:	fffe0000 	.word	0xfffe0000
    46d0:	4001f508 	.word	0x4001f508
    46d4:	4001f000 	.word	0x4001f000
    46d8:	b570      	push	{r4, r5, r6, lr}
    46da:	2420      	movs	r4, #32
    46dc:	2100      	movs	r1, #0
    46de:	2301      	movs	r3, #1
    46e0:	fa20 f201 	lsr.w	r2, r0, r1
    46e4:	07d2      	lsls	r2, r2, #31
    46e6:	d020      	beq.n	472a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    46e8:	b24a      	sxtb	r2, r1
    46ea:	2a00      	cmp	r2, #0
    46ec:	db10      	blt.n	4710 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x80>
    46ee:	bf00      	nop
    46f0:	ea4f 1652 	mov.w	r6, r2, lsr #5
    46f4:	ea4f 0686 	mov.w	r6, r6, lsl #2
    46f8:	f002 051f 	and.w	r5, r2, #31
    46fc:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    4700:	fa03 f505 	lsl.w	r5, r3, r5
    4704:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    4708:	f3bf 8f4f 	dsb	sy
    470c:	f3bf 8f6f 	isb	sy
    4710:	db0b      	blt.n	472a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x9a>
    4712:	f002 051f 	and.w	r5, r2, #31
    4716:	ea4f 1252 	mov.w	r2, r2, lsr #5
    471a:	ea4f 0282 	mov.w	r2, r2, lsl #2
    471e:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    4722:	fa03 f505 	lsl.w	r5, r3, r5
    4726:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    472a:	f101 0101 	add.w	r1, r1, #1
    472e:	42a1      	cmp	r1, r4
    4730:	d3d6      	bcc.n	46e0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>
    4732:	bd70      	pop	{r4, r5, r6, pc}
    4734:	b570      	push	{r4, r5, r6, lr}
    4736:	0042      	lsls	r2, r0, #1
    4738:	f04f 0100 	mov.w	r1, #0
    473c:	d501      	bpl.n	4742 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xb2>
    473e:	4a14      	ldr	r2, [pc, #80]	; (4790 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x100>)
    4740:	6011      	str	r1, [r2, #0]
    4742:	f3c0 3280 	ubfx	r2, r0, #14, #1
    4746:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    474a:	429a      	cmp	r2, r3
    474c:	d003      	beq.n	4756 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xc6>
    474e:	2166      	movs	r1, #102	; 0x66
    4750:	201b      	movs	r0, #27
    4752:	f7ff fa91 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4756:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    475a:	d014      	beq.n	4786 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xf6>
    475c:	4a0d      	ldr	r2, [pc, #52]	; (4794 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x104>)
    475e:	2001      	movs	r0, #1
    4760:	6050      	str	r0, [r2, #4]
    4762:	1e83      	subs	r3, r0, #2
    4764:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4768:	4a0b      	ldr	r2, [pc, #44]	; (4798 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x108>)
    476a:	6090      	str	r0, [r2, #8]
    476c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4770:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4774:	4c09      	ldr	r4, [pc, #36]	; (479c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x10c>)
    4776:	6021      	str	r1, [r4, #0]
    4778:	1d25      	adds	r5, r4, #4
    477a:	6028      	str	r0, [r5, #0]
    477c:	6090      	str	r0, [r2, #8]
    477e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4782:	6021      	str	r1, [r4, #0]
    4784:	6028      	str	r0, [r5, #0]
    4786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    478a:	f7ff bf8d 	b.w	46a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    478e:	0000      	.short	0x0000
    4790:	4001e504 	.word	0x4001e504
    4794:	4000e000 	.word	0x4000e000
    4798:	4000f000 	.word	0x4000f000
    479c:	4000f500 	.word	0x4000f500

000047a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    47a0:	b570      	push	{r4, r5, r6, lr}
    47a2:	4c0a      	ldr	r4, [pc, #40]	; (47cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    47a4:	460d      	mov	r5, r1
    47a6:	6020      	str	r0, [r4, #0]
    47a8:	f7ff ffc4 	bl	4734 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0xa4>
    47ac:	6820      	ldr	r0, [r4, #0]
    47ae:	f7ff ff93 	bl	46d8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x48>
    47b2:	f000 f877 	bl	48a4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    47b6:	f7ff ff77 	bl	46a8 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    47ba:	f008 fa1d 	bl	cbf8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    47be:	4628      	mov	r0, r5
    47c0:	f000 f8aa 	bl	4918 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    47c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    47c8:	f000 b8c2 	b.w	4950 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    47cc:	20000084 	.word	0x20000084

000047d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    47d0:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    47d4:	4e2f      	ldr	r6, [pc, #188]	; (4894 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    47d6:	4683      	mov	fp, r0
    47d8:	6830      	ldr	r0, [r6, #0]
    47da:	9001      	str	r0, [sp, #4]
    47dc:	2701      	movs	r7, #1
    47de:	482e      	ldr	r0, [pc, #184]	; (4898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    47e0:	f006 fff7 	bl	b7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    47e4:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 4898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    47e8:	b920      	cbnz	r0, 47f4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    47ea:	2700      	movs	r7, #0
    47ec:	f108 0001 	add.w	r0, r8, #1
    47f0:	f007 f806 	bl	b800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    47f4:	4c29      	ldr	r4, [pc, #164]	; (489c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    47f6:	2500      	movs	r5, #0
    47f8:	f04f 0903 	mov.w	r9, #3
    47fc:	2001      	movs	r0, #1
    47fe:	6060      	str	r0, [r4, #4]
    4800:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4804:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    4808:	f8c6 b000 	str.w	fp, [r6]
    480c:	6020      	str	r0, [r4, #0]
    480e:	f8df a090 	ldr.w	sl, [pc, #144]	; 48a0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    4812:	e017      	b.n	4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4814:	f8da 0000 	ldr.w	r0, [sl]
    4818:	06c0      	lsls	r0, r0, #27
    481a:	d513      	bpl.n	4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    481c:	200e      	movs	r0, #14
    481e:	f008 f9dc 	bl	cbda <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4822:	f3ef 8010 	mrs	r0, PRIMASK
    4826:	9000      	str	r0, [sp, #0]
    4828:	b672      	cpsid	i
    482a:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    482e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4832:	b920      	cbnz	r0, 483e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    4834:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4838:	b908      	cbnz	r0, 483e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    483a:	f7ff f89b 	bl	3974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    483e:	9800      	ldr	r0, [sp, #0]
    4840:	b900      	cbnz	r0, 4844 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    4842:	b662      	cpsie	i
    4844:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4848:	b918      	cbnz	r0, 4852 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    484a:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    484e:	2800      	cmp	r0, #0
    4850:	d0e0      	beq.n	4814 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    4852:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    4856:	2800      	cmp	r0, #0
    4858:	d1d0      	bne.n	47fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    485a:	b137      	cbz	r7, 486a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    485c:	9801      	ldr	r0, [sp, #4]
    485e:	6030      	str	r0, [r6, #0]
    4860:	f108 0001 	add.w	r0, r8, #1
    4864:	f006 ffb5 	bl	b7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4868:	e011      	b.n	488e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    486a:	f108 0001 	add.w	r0, r8, #1
    486e:	f006 ffb0 	bl	b7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4872:	2800      	cmp	r0, #0
    4874:	d1ba      	bne.n	47ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4876:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    487a:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    487e:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    4882:	200e      	movs	r0, #14
    4884:	f008 f9a9 	bl	cbda <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    4888:	4803      	ldr	r0, [pc, #12]	; (4898 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    488a:	f006 ffb9 	bl	b800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    488e:	2000      	movs	r0, #0
    4890:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    4894:	4000e504 	.word	0x4000e504
    4898:	20000287 	.word	0x20000287
    489c:	4000e000 	.word	0x4000e000
    48a0:	e000ed10 	.word	0xe000ed10

000048a4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    48a4:	b510      	push	{r4, lr}
    48a6:	4808      	ldr	r0, [pc, #32]	; (48c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    48a8:	f006 ffa6 	bl	b7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48ac:	b108      	cbz	r0, 48b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    48ae:	2124      	movs	r1, #36	; 0x24
    48b0:	e006      	b.n	48c0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    48b2:	4805      	ldr	r0, [pc, #20]	; (48c8 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    48b4:	1c40      	adds	r0, r0, #1
    48b6:	f006 ff9f 	bl	b7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    48ba:	2800      	cmp	r0, #0
    48bc:	d003      	beq.n	48c6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    48be:	2128      	movs	r1, #40	; 0x28
    48c0:	201d      	movs	r0, #29
    48c2:	f7ff f9d9 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48c6:	bd10      	pop	{r4, pc}
    48c8:	20000287 	.word	0x20000287

000048cc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    48cc:	b570      	push	{r4, r5, r6, lr}
    48ce:	4911      	ldr	r1, [pc, #68]	; (4914 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    48d0:	680a      	ldr	r2, [r1, #0]
    48d2:	b1ea      	cbz	r2, 4910 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    48d4:	2300      	movs	r3, #0
    48d6:	461d      	mov	r5, r3
    48d8:	2401      	movs	r4, #1
    48da:	684a      	ldr	r2, [r1, #4]
    48dc:	1c52      	adds	r2, r2, #1
    48de:	604a      	str	r2, [r1, #4]
    48e0:	2a09      	cmp	r2, #9
    48e2:	d300      	bcc.n	48e6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    48e4:	604d      	str	r5, [r1, #4]
    48e6:	790e      	ldrb	r6, [r1, #4]
    48e8:	fa04 f206 	lsl.w	r2, r4, r6
    48ec:	680e      	ldr	r6, [r1, #0]
    48ee:	4216      	tst	r6, r2
    48f0:	d00b      	beq.n	490a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    48f2:	f3ef 8310 	mrs	r3, PRIMASK
    48f6:	b672      	cpsid	i
    48f8:	680c      	ldr	r4, [r1, #0]
    48fa:	4394      	bics	r4, r2
    48fc:	600c      	str	r4, [r1, #0]
    48fe:	b903      	cbnz	r3, 4902 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    4900:	b662      	cpsie	i
    4902:	6849      	ldr	r1, [r1, #4]
    4904:	6001      	str	r1, [r0, #0]
    4906:	2000      	movs	r0, #0
    4908:	bd70      	pop	{r4, r5, r6, pc}
    490a:	1c5b      	adds	r3, r3, #1
    490c:	2b09      	cmp	r3, #9
    490e:	d3e4      	bcc.n	48da <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    4910:	2005      	movs	r0, #5
    4912:	bd70      	pop	{r4, r5, r6, pc}
    4914:	20000088 	.word	0x20000088

00004918 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4918:	4802      	ldr	r0, [pc, #8]	; (4924 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    491a:	2100      	movs	r1, #0
    491c:	6001      	str	r1, [r0, #0]
    491e:	6041      	str	r1, [r0, #4]
    4920:	4770      	bx	lr
    4922:	0000      	.short	0x0000
    4924:	20000088 	.word	0x20000088

00004928 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4928:	b510      	push	{r4, lr}
    492a:	4c08      	ldr	r4, [pc, #32]	; (494c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    492c:	7861      	ldrb	r1, [r4, #1]
    492e:	b109      	cbz	r1, 4934 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4930:	200f      	movs	r0, #15
    4932:	bd10      	pop	{r4, pc}
    4934:	f7fe ffaa 	bl	388c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4938:	7020      	strb	r0, [r4, #0]
    493a:	28ff      	cmp	r0, #255	; 0xff
    493c:	d001      	beq.n	4942 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    493e:	2000      	movs	r0, #0
    4940:	bd10      	pop	{r4, pc}
    4942:	2176      	movs	r1, #118	; 0x76
    4944:	201f      	movs	r0, #31
    4946:	f7ff f997 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    494a:	0000      	.short	0x0000
    494c:	20000090 	.word	0x20000090

00004950 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4950:	4901      	ldr	r1, [pc, #4]	; (4958 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4952:	2000      	movs	r0, #0
    4954:	7048      	strb	r0, [r1, #1]
    4956:	4770      	bx	lr
    4958:	20000090 	.word	0x20000090

0000495c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    495c:	4806      	ldr	r0, [pc, #24]	; (4978 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    495e:	4a07      	ldr	r2, [pc, #28]	; (497c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4960:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4962:	8852      	ldrh	r2, [r2, #2]
    4964:	4291      	cmp	r1, r2
    4966:	d104      	bne.n	4972 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4968:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    496c:	b108      	cbz	r0, 4972 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    496e:	2000      	movs	r0, #0
    4970:	4770      	bx	lr
    4972:	2001      	movs	r0, #1
    4974:	4770      	bx	lr
    4976:	0000      	.short	0x0000
    4978:	20001068 	.word	0x20001068
    497c:	20000274 	.word	0x20000274

00004980 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4980:	4901      	ldr	r1, [pc, #4]	; (4988 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4982:	8048      	strh	r0, [r1, #2]
    4984:	4770      	bx	lr
    4986:	0000      	.short	0x0000
    4988:	20000274 	.word	0x20000274

0000498c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    498c:	4808      	ldr	r0, [pc, #32]	; (49b0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    498e:	4a09      	ldr	r2, [pc, #36]	; (49b4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4990:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4992:	8852      	ldrh	r2, [r2, #2]
    4994:	4291      	cmp	r1, r2
    4996:	d109      	bne.n	49ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4998:	f64f 71ff 	movw	r1, #65535	; 0xffff
    499c:	8481      	strh	r1, [r0, #36]	; 0x24
    499e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    49a2:	b119      	cbz	r1, 49ac <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    49a4:	2100      	movs	r1, #0
    49a6:	7001      	strb	r1, [r0, #0]
    49a8:	2001      	movs	r0, #1
    49aa:	4770      	bx	lr
    49ac:	2000      	movs	r0, #0
    49ae:	4770      	bx	lr
    49b0:	20001068 	.word	0x20001068
    49b4:	20000274 	.word	0x20000274

000049b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    49b8:	4807      	ldr	r0, [pc, #28]	; (49d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    49ba:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    49be:	2901      	cmp	r1, #1
    49c0:	d007      	beq.n	49d2 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    49c2:	2101      	movs	r1, #1
    49c4:	7001      	strb	r1, [r0, #0]
    49c6:	4805      	ldr	r0, [pc, #20]	; (49dc <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    49c8:	4903      	ldr	r1, [pc, #12]	; (49d8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    49ca:	8800      	ldrh	r0, [r0, #0]
    49cc:	8488      	strh	r0, [r1, #36]	; 0x24
    49ce:	2001      	movs	r0, #1
    49d0:	4770      	bx	lr
    49d2:	2000      	movs	r0, #0
    49d4:	4770      	bx	lr
    49d6:	0000      	.short	0x0000
    49d8:	20001068 	.word	0x20001068
    49dc:	20000274 	.word	0x20000274

000049e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    49e0:	4906      	ldr	r1, [pc, #24]	; (49fc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    49e2:	4b07      	ldr	r3, [pc, #28]	; (4a00 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    49e4:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    49e6:	885b      	ldrh	r3, [r3, #2]
    49e8:	429a      	cmp	r2, r3
    49ea:	d105      	bne.n	49f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49ec:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    49f0:	b112      	cbz	r2, 49f8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    49f2:	6001      	str	r1, [r0, #0]
    49f4:	2001      	movs	r0, #1
    49f6:	4770      	bx	lr
    49f8:	2000      	movs	r0, #0
    49fa:	4770      	bx	lr
    49fc:	20001068 	.word	0x20001068
    4a00:	20000274 	.word	0x20000274

00004a04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4a04:	4909      	ldr	r1, [pc, #36]	; (4a2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a06:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a08:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4a0c:	3bff      	subs	r3, #255	; 0xff
    4a0e:	d002      	beq.n	4a16 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4a10:	2100      	movs	r1, #0
    4a12:	6001      	str	r1, [r0, #0]
    4a14:	e007      	b.n	4a26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a16:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4a1a:	4904      	ldr	r1, [pc, #16]	; (4a2c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4a1c:	2a01      	cmp	r2, #1
    4a1e:	d002      	beq.n	4a26 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4a20:	6001      	str	r1, [r0, #0]
    4a22:	2001      	movs	r0, #1
    4a24:	4770      	bx	lr
    4a26:	2000      	movs	r0, #0
    4a28:	4770      	bx	lr
    4a2a:	0000      	.short	0x0000
    4a2c:	20001068 	.word	0x20001068

00004a30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4a30:	4901      	ldr	r1, [pc, #4]	; (4a38 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4a32:	8008      	strh	r0, [r1, #0]
    4a34:	4770      	bx	lr
    4a36:	0000      	.short	0x0000
    4a38:	20000274 	.word	0x20000274

00004a3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4a3c:	4905      	ldr	r1, [pc, #20]	; (4a54 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4a3e:	2000      	movs	r0, #0
    4a40:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a44:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a48:	8488      	strh	r0, [r1, #36]	; 0x24
    4a4a:	4903      	ldr	r1, [pc, #12]	; (4a58 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4a4c:	8008      	strh	r0, [r1, #0]
    4a4e:	8048      	strh	r0, [r1, #2]
    4a50:	4770      	bx	lr
    4a52:	0000      	.short	0x0000
    4a54:	20001068 	.word	0x20001068
    4a58:	20000274 	.word	0x20000274
    4a5c:	4905      	ldr	r1, [pc, #20]	; (4a74 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4a5e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4a60:	4282      	cmp	r2, r0
    4a62:	d105      	bne.n	4a70 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4a64:	2000      	movs	r0, #0
    4a66:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4a6a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4a6e:	8488      	strh	r0, [r1, #36]	; 0x24
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	20001068 	.word	0x20001068

00004a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4a78:	4a0a      	ldr	r2, [pc, #40]	; (4aa4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4a7a:	b110      	cbz	r0, 4a82 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4a7c:	2801      	cmp	r0, #1
    4a7e:	d007      	beq.n	4a90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4a80:	e00e      	b.n	4aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a82:	7850      	ldrb	r0, [r2, #1]
    4a84:	b160      	cbz	r0, 4aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a86:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4a8a:	6008      	str	r0, [r1, #0]
    4a8c:	88d0      	ldrh	r0, [r2, #6]
    4a8e:	e004      	b.n	4a9a <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4a90:	7810      	ldrb	r0, [r2, #0]
    4a92:	b128      	cbz	r0, 4aa0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4a94:	6890      	ldr	r0, [r2, #8]
    4a96:	6008      	str	r0, [r1, #0]
    4a98:	8990      	ldrh	r0, [r2, #12]
    4a9a:	8088      	strh	r0, [r1, #4]
    4a9c:	2001      	movs	r0, #1
    4a9e:	4770      	bx	lr
    4aa0:	2000      	movs	r0, #0
    4aa2:	4770      	bx	lr
    4aa4:	20000289 	.word	0x20000289

00004aa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4aa8:	4a08      	ldr	r2, [pc, #32]	; (4acc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4aaa:	2301      	movs	r3, #1
    4aac:	b138      	cbz	r0, 4abe <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4aae:	2801      	cmp	r0, #1
    4ab0:	d104      	bne.n	4abc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4ab2:	7013      	strb	r3, [r2, #0]
    4ab4:	6808      	ldr	r0, [r1, #0]
    4ab6:	6090      	str	r0, [r2, #8]
    4ab8:	8888      	ldrh	r0, [r1, #4]
    4aba:	8190      	strh	r0, [r2, #12]
    4abc:	4770      	bx	lr
    4abe:	7053      	strb	r3, [r2, #1]
    4ac0:	6808      	ldr	r0, [r1, #0]
    4ac2:	f8c2 0002 	str.w	r0, [r2, #2]
    4ac6:	8888      	ldrh	r0, [r1, #4]
    4ac8:	80d0      	strh	r0, [r2, #6]
    4aca:	4770      	bx	lr
    4acc:	20000289 	.word	0x20000289

00004ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4ad0:	4906      	ldr	r1, [pc, #24]	; (4aec <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4ad2:	b110      	cbz	r0, 4ada <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4ad4:	2801      	cmp	r0, #1
    4ad6:	d002      	beq.n	4ade <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4ad8:	e005      	b.n	4ae6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4ada:	7848      	ldrb	r0, [r1, #1]
    4adc:	e000      	b.n	4ae0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4ade:	7808      	ldrb	r0, [r1, #0]
    4ae0:	b108      	cbz	r0, 4ae6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4ae2:	2001      	movs	r0, #1
    4ae4:	4770      	bx	lr
    4ae6:	2000      	movs	r0, #0
    4ae8:	4770      	bx	lr
    4aea:	0000      	.short	0x0000
    4aec:	20000289 	.word	0x20000289

00004af0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4af0:	4901      	ldr	r1, [pc, #4]	; (4af8 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4af2:	7448      	strb	r0, [r1, #17]
    4af4:	4770      	bx	lr
    4af6:	0000      	.short	0x0000
    4af8:	200009c2 	.word	0x200009c2

00004afc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>:
    4afc:	4801      	ldr	r0, [pc, #4]	; (4b04 <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ+0x8>)
    4afe:	78c0      	ldrb	r0, [r0, #3]
    4b00:	4770      	bx	lr
    4b02:	0000      	.short	0x0000
    4b04:	200000ac 	.word	0x200000ac

00004b08 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>:
    4b08:	4801      	ldr	r0, [pc, #4]	; (4b10 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY+0x8>)
    4b0a:	7900      	ldrb	r0, [r0, #4]
    4b0c:	4770      	bx	lr
    4b0e:	0000      	.short	0x0000
    4b10:	200000ac 	.word	0x200000ac

00004b14 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4b14:	b578      	push	{r3, r4, r5, r6, lr}
    4b16:	4913      	ldr	r1, [pc, #76]	; (4b64 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4b18:	7c4a      	ldrb	r2, [r1, #17]
    4b1a:	b30a      	cbz	r2, 4b60 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b1c:	7c0a      	ldrb	r2, [r1, #16]
    4b1e:	f88d 2000 	strb.w	r2, [sp]
    4b22:	9a00      	ldr	r2, [sp, #0]
    4b24:	9200      	str	r2, [sp, #0]
    4b26:	f89d 2000 	ldrb.w	r2, [sp]
    4b2a:	b1ca      	cbz	r2, 4b60 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4b2c:	2300      	movs	r3, #0
    4b2e:	f101 0210 	add.w	r2, r1, #16
    4b32:	241a      	movs	r4, #26
    4b34:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4b38:	7c0e      	ldrb	r6, [r1, #16]
    4b3a:	f88d 6000 	strb.w	r6, [sp]
    4b3e:	9e00      	ldr	r6, [sp, #0]
    4b40:	9600      	str	r6, [sp, #0]
    4b42:	f89d 6000 	ldrb.w	r6, [sp]
    4b46:	b14e      	cbz	r6, 4b5c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4b48:	7013      	strb	r3, [r2, #0]
    4b4a:	7043      	strb	r3, [r0, #1]
    4b4c:	7004      	strb	r4, [r0, #0]
    4b4e:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4b52:	6046      	str	r6, [r0, #4]
    4b54:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4b58:	6086      	str	r6, [r0, #8]
    4b5a:	e7ed      	b.n	4b38 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4b5c:	2001      	movs	r0, #1
    4b5e:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b60:	2000      	movs	r0, #0
    4b62:	bd78      	pop	{r3, r4, r5, r6, pc}
    4b64:	200009c2 	.word	0x200009c2

00004b68 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4b68:	b510      	push	{r4, lr}
    4b6a:	4604      	mov	r4, r0
    4b6c:	f000 f95c 	bl	4e28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4b70:	b118      	cbz	r0, 4b7a <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4b72:	21bd      	movs	r1, #189	; 0xbd
    4b74:	2027      	movs	r0, #39	; 0x27
    4b76:	f7ff f87f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b7a:	4803      	ldr	r0, [pc, #12]	; (4b88 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4b7c:	2101      	movs	r1, #1
    4b7e:	f008 fc03 	bl	d388 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4b82:	4802      	ldr	r0, [pc, #8]	; (4b8c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4b84:	62c4      	str	r4, [r0, #44]	; 0x2c
    4b86:	bd10      	pop	{r4, pc}
    4b88:	200009a0 	.word	0x200009a0
    4b8c:	200000ac 	.word	0x200000ac

00004b90 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4b90:	4901      	ldr	r1, [pc, #4]	; (4b98 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4b92:	2001      	movs	r0, #1
    4b94:	7188      	strb	r0, [r1, #6]
    4b96:	4770      	bx	lr
    4b98:	200000ac 	.word	0x200000ac

00004b9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ba0:	4d62      	ldr	r5, [pc, #392]	; (4d2c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>)
    4ba2:	9c08      	ldr	r4, [sp, #32]
    4ba4:	782e      	ldrb	r6, [r5, #0]
    4ba6:	2e00      	cmp	r6, #0
    4ba8:	d16b      	bne.n	4c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4baa:	2a00      	cmp	r2, #0
    4bac:	d069      	beq.n	4c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4bae:	2b00      	cmp	r3, #0
    4bb0:	d067      	beq.n	4c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4bb2:	2c00      	cmp	r4, #0
    4bb4:	d065      	beq.n	4c82 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xe6>
    4bb6:	f105 0614 	add.w	r6, r5, #20
    4bba:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4bbe:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4bc2:	2700      	movs	r7, #0
    4bc4:	71af      	strb	r7, [r5, #6]
    4bc6:	716f      	strb	r7, [r5, #5]
    4bc8:	70ef      	strb	r7, [r5, #3]
    4bca:	70af      	strb	r7, [r5, #2]
    4bcc:	712f      	strb	r7, [r5, #4]
    4bce:	81af      	strh	r7, [r5, #12]
    4bd0:	81ef      	strh	r7, [r5, #14]
    4bd2:	f000 f961 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4bd6:	4606      	mov	r6, r0
    4bd8:	f000 f958 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4bdc:	4604      	mov	r4, r0
    4bde:	f006 f84b 	bl	ac78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4be2:	f005 fcf3 	bl	a5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4be6:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4bea:	f006 f8cf 	bl	ad8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4bee:	f104 0018 	add.w	r0, r4, #24
    4bf2:	f006 f9a5 	bl	af40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4bf6:	6920      	ldr	r0, [r4, #16]
    4bf8:	f006 f998 	bl	af2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4bfc:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4c00:	f006 f9b8 	bl	af74 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4c04:	f105 0038 	add.w	r0, r5, #56	; 0x38
    4c08:	6840      	ldr	r0, [r0, #4]
    4c0a:	f890 0174 	ldrb.w	r0, [r0, #372]	; 0x174
    4c0e:	b108      	cbz	r0, 4c14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x78>
    4c10:	f005 ff8c 	bl	ab2c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    4c14:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4c18:	2001      	movs	r0, #1
    4c1a:	f005 feb7 	bl	a98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4c1e:	2800      	cmp	r0, #0
    4c20:	d07c      	beq.n	4d1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x180>
    4c22:	4843      	ldr	r0, [pc, #268]	; (4d30 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>)
    4c24:	f005 ff2e 	bl	aa84 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4c28:	8820      	ldrh	r0, [r4, #0]
    4c2a:	f7ff fc63 	bl	44f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4c2e:	6328      	str	r0, [r5, #48]	; 0x30
    4c30:	8820      	ldrh	r0, [r4, #0]
    4c32:	f7ff fc49 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4c36:	f106 0160 	add.w	r1, r6, #96	; 0x60
    4c3a:	6368      	str	r0, [r5, #52]	; 0x34
    4c3c:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 4d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>
    4c40:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4c44:	f109 0808 	add.w	r8, r9, #8
    4c48:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4c4c:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4c4e:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4c52:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4c54:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4c58:	f000 f990 	bl	4f7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    4c5c:	4601      	mov	r1, r0
    4c5e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4c60:	46ba      	mov	sl, r7
    4c62:	f008 f929 	bl	ceb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c66:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4c68:	4281      	cmp	r1, r0
    4c6a:	d200      	bcs.n	4c6e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xd2>
    4c6c:	4608      	mov	r0, r1
    4c6e:	7228      	strb	r0, [r5, #8]
    4c70:	46a8      	mov	r8, r5
    4c72:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4c76:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4c78:	7cf7      	ldrb	r7, [r6, #19]
    4c7a:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4c7c:	2908      	cmp	r1, #8
    4c7e:	d104      	bne.n	4c8a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xee>
    4c80:	e002      	b.n	4c88 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xec>
    4c82:	f44f 718a 	mov.w	r1, #276	; 0x114
    4c86:	e04d      	b.n	4d24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>
    4c88:	2104      	movs	r1, #4
    4c8a:	f008 f915 	bl	ceb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4c8e:	b90f      	cbnz	r7, 4c94 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xf8>
    4c90:	1d00      	adds	r0, r0, #4
    4c92:	b280      	uxth	r0, r0
    4c94:	4285      	cmp	r5, r0
    4c96:	d200      	bcs.n	4c9a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfe>
    4c98:	4628      	mov	r0, r5
    4c9a:	b2c5      	uxtb	r5, r0
    4c9c:	f888 5009 	strb.w	r5, [r8, #9]
    4ca0:	7cf1      	ldrb	r1, [r6, #19]
    4ca2:	b109      	cbz	r1, 4ca8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10c>
    4ca4:	2204      	movs	r2, #4
    4ca6:	e000      	b.n	4caa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x10e>
    4ca8:	2200      	movs	r2, #0
    4caa:	442a      	add	r2, r5
    4cac:	b2d2      	uxtb	r2, r2
    4cae:	f888 2007 	strb.w	r2, [r8, #7]
    4cb2:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    4cb6:	1d00      	adds	r0, r0, #4
    4cb8:	4290      	cmp	r0, r2
    4cba:	d202      	bcs.n	4cc2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    4cbc:	f240 119f 	movw	r1, #415	; 0x19f
    4cc0:	e030      	b.n	4d24 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x188>
    4cc2:	4657      	mov	r7, sl
    4cc4:	b1a1      	cbz	r1, 4cf0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x154>
    4cc6:	481b      	ldr	r0, [pc, #108]	; (4d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    4cc8:	2101      	movs	r1, #1
    4cca:	3008      	adds	r0, #8
    4ccc:	7601      	strb	r1, [r0, #24]
    4cce:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    4cd2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    4cd6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4cda:	f007 fff3 	bl	ccc4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    4cde:	4915      	ldr	r1, [pc, #84]	; (4d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    4ce0:	4603      	mov	r3, r0
    4ce2:	462a      	mov	r2, r5
    4ce4:	3108      	adds	r1, #8
    4ce6:	2001      	movs	r0, #1
    4ce8:	f005 fcba 	bl	a660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4cec:	f005 fcee 	bl	a6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4cf0:	2001      	movs	r0, #1
    4cf2:	f000 fb73 	bl	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    4cf6:	4810      	ldr	r0, [pc, #64]	; (4d38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    4cf8:	6800      	ldr	r0, [r0, #0]
    4cfa:	2803      	cmp	r0, #3
    4cfc:	d010      	beq.n	4d20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>
    4cfe:	280b      	cmp	r0, #11
    4d00:	d00e      	beq.n	4d20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x184>
    4d02:	4648      	mov	r0, r9
    4d04:	f840 7f52 	str.w	r7, [r0, #82]!
    4d08:	6047      	str	r7, [r0, #4]
    4d0a:	480a      	ldr	r0, [pc, #40]	; (4d34 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x198>)
    4d0c:	88b1      	ldrh	r1, [r6, #4]
    4d0e:	3052      	adds	r0, #82	; 0x52
    4d10:	8041      	strh	r1, [r0, #2]
    4d12:	8821      	ldrh	r1, [r4, #0]
    4d14:	8001      	strh	r1, [r0, #0]
    4d16:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4d1a:	7101      	strb	r1, [r0, #4]
    4d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d20:	f240 11c7 	movw	r1, #455	; 0x1c7
    4d24:	2027      	movs	r0, #39	; 0x27
    4d26:	f7fe ffa7 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d2a:	0000      	.short	0x0000
    4d2c:	200000ac 	.word	0x200000ac
    4d30:	000055e0 	.word	0x000055e0
    4d34:	20000970 	.word	0x20000970
    4d38:	40001550 	.word	0x40001550

00004d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d40:	4605      	mov	r5, r0
    4d42:	f000 f8a9 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4d46:	4e33      	ldr	r6, [pc, #204]	; (4e14 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4d48:	4604      	mov	r4, r0
    4d4a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4d4c:	7847      	ldrb	r7, [r0, #1]
    4d4e:	b10d      	cbz	r5, 4d54 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4d50:	2d01      	cmp	r5, #1
    4d52:	d103      	bne.n	4d5c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4d54:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4d56:	f006 ff3e 	bl	bbd6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4d5a:	7070      	strb	r0, [r6, #1]
    4d5c:	7870      	ldrb	r0, [r6, #1]
    4d5e:	f04f 0800 	mov.w	r8, #0
    4d62:	f04f 0901 	mov.w	r9, #1
    4d66:	b150      	cbz	r0, 4d7e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4d68:	2801      	cmp	r0, #1
    4d6a:	d01a      	beq.n	4da2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4d6c:	2802      	cmp	r0, #2
    4d6e:	d034      	beq.n	4dda <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4d70:	2803      	cmp	r0, #3
    4d72:	d048      	beq.n	4e06 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4d74:	f240 4114 	movw	r1, #1044	; 0x414
    4d78:	2027      	movs	r0, #39	; 0x27
    4d7a:	f7fe ff7d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4d7e:	2d01      	cmp	r5, #1
    4d80:	d032      	beq.n	4de8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4d82:	f000 f8e7 	bl	4f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4d86:	4639      	mov	r1, r7
    4d88:	2201      	movs	r2, #1
    4d8a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4d8c:	f007 fb46 	bl	c41c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4d90:	e028      	b.n	4de4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4d92:	bf00      	nop
    4d94:	f884 8008 	strb.w	r8, [r4, #8]
    4d98:	e031      	b.n	4dfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4d9a:	bf00      	nop
    4d9c:	f884 9008 	strb.w	r9, [r4, #8]
    4da0:	e02d      	b.n	4dfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4da2:	2d01      	cmp	r5, #1
    4da4:	d008      	beq.n	4db8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4da6:	f000 f8d5 	bl	4f54 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x110>
    4daa:	4639      	mov	r1, r7
    4dac:	2200      	movs	r2, #0
    4dae:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4db0:	f007 fb34 	bl	c41c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4db4:	2d02      	cmp	r5, #2
    4db6:	d00b      	beq.n	4dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4db8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4dbc:	1c40      	adds	r0, r0, #1
    4dbe:	f141 0100 	adc.w	r1, r1, #0
    4dc2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4dc6:	7a20      	ldrb	r0, [r4, #8]
    4dc8:	2801      	cmp	r0, #1
    4dca:	d003      	beq.n	4dd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4dcc:	f884 9008 	strb.w	r9, [r4, #8]
    4dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dd4:	f884 8008 	strb.w	r8, [r4, #8]
    4dd8:	e7fa      	b.n	4dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4dda:	2d01      	cmp	r5, #1
    4ddc:	d004      	beq.n	4de8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4dde:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4de0:	f007 fd2d 	bl	c83e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4de4:	2d02      	cmp	r5, #2
    4de6:	d0f3      	beq.n	4dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4de8:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    4dec:	1c40      	adds	r0, r0, #1
    4dee:	f141 0100 	adc.w	r1, r1, #0
    4df2:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    4df6:	7a20      	ldrb	r0, [r4, #8]
    4df8:	2801      	cmp	r0, #1
    4dfa:	d1cf      	bne.n	4d9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4dfc:	e7ca      	b.n	4d94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4dfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e02:	f004 bf03 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4e06:	2d01      	cmp	r5, #1
    4e08:	d0e2      	beq.n	4dd0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e0a:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e0c:	f007 fd17 	bl	c83e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4e10:	e7f5      	b.n	4dfe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e12:	0000      	.short	0x0000
    4e14:	200000ac 	.word	0x200000ac

00004e18 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>:
    4e18:	4802      	ldr	r0, [pc, #8]	; (4e24 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI+0xc>)
    4e1a:	89c0      	ldrh	r0, [r0, #14]
    4e1c:	f3c0 2080 	ubfx	r0, r0, #10, #1
    4e20:	4770      	bx	lr
    4e22:	0000      	.short	0x0000
    4e24:	200000ac 	.word	0x200000ac

00004e28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4e28:	4804      	ldr	r0, [pc, #16]	; (4e3c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4e2a:	7800      	ldrb	r0, [r0, #0]
    4e2c:	b108      	cbz	r0, 4e32 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4e2e:	200c      	movs	r0, #12
    4e30:	4770      	bx	lr
    4e32:	4903      	ldr	r1, [pc, #12]	; (4e40 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4e34:	2000      	movs	r0, #0
    4e36:	7448      	strb	r0, [r1, #17]
    4e38:	4770      	bx	lr
    4e3a:	0000      	.short	0x0000
    4e3c:	200000ac 	.word	0x200000ac
    4e40:	200009c2 	.word	0x200009c2

00004e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4e44:	480c      	ldr	r0, [pc, #48]	; (4e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34>)
    4e46:	b510      	push	{r4, lr}
    4e48:	7801      	ldrb	r1, [r0, #0]
    4e4a:	b149      	cbz	r1, 4e60 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4e4c:	f100 0138 	add.w	r1, r0, #56	; 0x38
    4e50:	7800      	ldrb	r0, [r0, #0]
    4e52:	2802      	cmp	r0, #2
    4e54:	d008      	beq.n	4e68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24>
    4e56:	f240 11e3 	movw	r1, #483	; 0x1e3
    4e5a:	2027      	movs	r0, #39	; 0x27
    4e5c:	f7fe ff0c 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e64:	f000 b9d8 	b.w	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    4e68:	6848      	ldr	r0, [r1, #4]
    4e6a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    4e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e72:	f005 be0f 	b.w	aa94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    4e76:	0000      	.short	0x0000
    4e78:	200000ac 	.word	0x200000ac
    4e7c:	4a02      	ldr	r2, [pc, #8]	; (4e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44>)
    4e7e:	8993      	ldrh	r3, [r2, #12]
    4e80:	4303      	orrs	r3, r0
    4e82:	8193      	strh	r3, [r2, #12]
    4e84:	6952      	ldr	r2, [r2, #20]
    4e86:	4710      	bx	r2
    4e88:	200000ac 	.word	0x200000ac
    4e8c:	4801      	ldr	r0, [pc, #4]	; (4e94 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>)
    4e8e:	6840      	ldr	r0, [r0, #4]
    4e90:	4770      	bx	lr
    4e92:	0000      	.short	0x0000
    4e94:	200000e4 	.word	0x200000e4
    4e98:	4801      	ldr	r0, [pc, #4]	; (4ea0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4e9a:	6840      	ldr	r0, [r0, #4]
    4e9c:	3070      	adds	r0, #112	; 0x70
    4e9e:	4770      	bx	lr
    4ea0:	200000e4 	.word	0x200000e4
    4ea4:	4a01      	ldr	r2, [pc, #4]	; (4eac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4ea6:	2100      	movs	r1, #0
    4ea8:	6952      	ldr	r2, [r2, #20]
    4eaa:	4710      	bx	r2
    4eac:	200000ac 	.word	0x200000ac
    4eb0:	b570      	push	{r4, r5, r6, lr}
    4eb2:	f7ff fff1 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4eb6:	4604      	mov	r4, r0
    4eb8:	f7ff ffe8 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4ebc:	4605      	mov	r5, r0
    4ebe:	4621      	mov	r1, r4
    4ec0:	f008 f87d 	bl	cfbe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4ec4:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4ec8:	2901      	cmp	r1, #1
    4eca:	d114      	bne.n	4ef6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    4ecc:	2800      	cmp	r0, #0
    4ece:	d012      	beq.n	4ef6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb2>
    4ed0:	4809      	ldr	r0, [pc, #36]	; (4ef8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    4ed2:	6842      	ldr	r2, [r0, #4]
    4ed4:	8828      	ldrh	r0, [r5, #0]
    4ed6:	f8a2 01f6 	strh.w	r0, [r2, #502]	; 0x1f6
    4eda:	7a60      	ldrb	r0, [r4, #9]
    4edc:	f882 01f8 	strb.w	r0, [r2, #504]	; 0x1f8
    4ee0:	7aa0      	ldrb	r0, [r4, #10]
    4ee2:	f882 01f9 	strb.w	r0, [r2, #505]	; 0x1f9
    4ee6:	f502 72fa 	add.w	r2, r2, #500	; 0x1f4
    4eea:	2001      	movs	r0, #1
    4eec:	7010      	strb	r0, [r2, #0]
    4eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4ef2:	f004 be8b 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4ef6:	bd70      	pop	{r4, r5, r6, pc}
    4ef8:	200000e4 	.word	0x200000e4
    4efc:	b570      	push	{r4, r5, r6, lr}
    4efe:	4605      	mov	r5, r0
    4f00:	2901      	cmp	r1, #1
    4f02:	d818      	bhi.n	4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f04:	4c12      	ldr	r4, [pc, #72]	; (4f50 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>)
    4f06:	69a1      	ldr	r1, [r4, #24]
    4f08:	4788      	blx	r1
    4f0a:	b1a0      	cbz	r0, 4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f0c:	7960      	ldrb	r0, [r4, #5]
    4f0e:	b990      	cbnz	r0, 4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f10:	b9e5      	cbnz	r5, 4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4f12:	f104 0010 	add.w	r0, r4, #16
    4f16:	7801      	ldrb	r1, [r0, #0]
    4f18:	06c8      	lsls	r0, r1, #27
    4f1a:	d405      	bmi.n	4f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f1c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4f1e:	7800      	ldrb	r0, [r0, #0]
    4f20:	06c0      	lsls	r0, r0, #27
    4f22:	d401      	bmi.n	4f28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe4>
    4f24:	2001      	movs	r0, #1
    4f26:	e000      	b.n	4f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    4f28:	2000      	movs	r0, #0
    4f2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4f2c:	b92a      	cbnz	r2, 4f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f2e:	8962      	ldrh	r2, [r4, #10]
    4f30:	b11a      	cbz	r2, 4f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f32:	06c9      	lsls	r1, r1, #27
    4f34:	d401      	bmi.n	4f3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf6>
    4f36:	2001      	movs	r0, #1
    4f38:	bd70      	pop	{r4, r5, r6, pc}
    4f3a:	89a1      	ldrh	r1, [r4, #12]
    4f3c:	078a      	lsls	r2, r1, #30
    4f3e:	d503      	bpl.n	4f48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>
    4f40:	6a22      	ldr	r2, [r4, #32]
    4f42:	78d2      	ldrb	r2, [r2, #3]
    4f44:	2a02      	cmp	r2, #2
    4f46:	d001      	beq.n	4f4c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    4f48:	4308      	orrs	r0, r1
    4f4a:	d1f4      	bne.n	4f36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf2>
    4f4c:	2000      	movs	r0, #0
    4f4e:	bd70      	pop	{r4, r5, r6, pc}
    4f50:	200000ac 	.word	0x200000ac
    4f54:	b510      	push	{r4, lr}
    4f56:	4c08      	ldr	r4, [pc, #32]	; (4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>)
    4f58:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f5a:	b138      	cbz	r0, 4f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x128>
    4f5c:	8962      	ldrh	r2, [r4, #10]
    4f5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    4f60:	1cd2      	adds	r2, r2, #3
    4f62:	f006 fcdf 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    4f68:	6260      	str	r0, [r4, #36]	; 0x24
    4f6a:	bd10      	pop	{r4, pc}
    4f6c:	f240 415a 	movw	r1, #1114	; 0x45a
    4f70:	2027      	movs	r0, #39	; 0x27
    4f72:	f7fe fe81 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f76:	0000      	.short	0x0000
    4f78:	200000ac 	.word	0x200000ac
    4f7c:	b510      	push	{r4, lr}
    4f7e:	f7ff ff85 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    4f82:	4604      	mov	r4, r0
    4f84:	f7ff ff88 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4f88:	4601      	mov	r1, r0
    4f8a:	7b42      	ldrb	r2, [r0, #13]
    4f8c:	4815      	ldr	r0, [pc, #84]	; (4fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1a0>)
    4f8e:	2a24      	cmp	r2, #36	; 0x24
    4f90:	d00e      	beq.n	4fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f92:	7b89      	ldrb	r1, [r1, #14]
    4f94:	2924      	cmp	r1, #36	; 0x24
    4f96:	d00b      	beq.n	4fb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    4f98:	2a1f      	cmp	r2, #31
    4f9a:	d00d      	beq.n	4fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4f9c:	2a20      	cmp	r2, #32
    4f9e:	d00b      	beq.n	4fb8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x174>
    4fa0:	2922      	cmp	r1, #34	; 0x22
    4fa2:	d00f      	beq.n	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4fa4:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4fa8:	2804      	cmp	r0, #4
    4faa:	d100      	bne.n	4fae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16a>
    4fac:	2008      	movs	r0, #8
    4fae:	bd10      	pop	{r4, pc}
    4fb0:	6840      	ldr	r0, [r0, #4]
    4fb2:	f890 1196 	ldrb.w	r1, [r0, #406]	; 0x196
    4fb6:	e00e      	b.n	4fd6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x192>
    4fb8:	2922      	cmp	r1, #34	; 0x22
    4fba:	d003      	beq.n	4fc4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>
    4fbc:	6840      	ldr	r0, [r0, #4]
    4fbe:	f890 01b0 	ldrb.w	r0, [r0, #432]	; 0x1b0
    4fc2:	e005      	b.n	4fd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    4fc4:	6841      	ldr	r1, [r0, #4]
    4fc6:	f891 01b0 	ldrb.w	r0, [r1, #432]	; 0x1b0
    4fca:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    4fce:	4008      	ands	r0, r1
    4fd0:	f007 fe6e 	bl	ccb0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4fd4:	4601      	mov	r1, r0
    4fd6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fde:	f007 be7f 	b.w	cce0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    4fe2:	0000      	.short	0x0000
    4fe4:	200000e4 	.word	0x200000e4
    4fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4fec:	4688      	mov	r8, r1
    4fee:	4607      	mov	r7, r0
    4ff0:	f7ff ff52 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    4ff4:	4c57      	ldr	r4, [pc, #348]	; (5154 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x310>)
    4ff6:	2600      	movs	r6, #0
    4ff8:	4605      	mov	r5, r0
    4ffa:	f88d 6000 	strb.w	r6, [sp]
    4ffe:	7820      	ldrb	r0, [r4, #0]
    5000:	2802      	cmp	r0, #2
    5002:	d004      	beq.n	500e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ca>
    5004:	f240 41b9 	movw	r1, #1209	; 0x4b9
    5008:	2027      	movs	r0, #39	; 0x27
    500a:	f7fe fe35 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    500e:	7ba0      	ldrb	r0, [r4, #14]
    5010:	0640      	lsls	r0, r0, #25
    5012:	d406      	bmi.n	5022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1de>
    5014:	2040      	movs	r0, #64	; 0x40
    5016:	f7ff ff45 	bl	4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    501a:	89e0      	ldrh	r0, [r4, #14]
    501c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5020:	81e0      	strh	r0, [r4, #14]
    5022:	7ce8      	ldrb	r0, [r5, #19]
    5024:	b3c7      	cbz	r7, 5098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x254>
    5026:	f005 fb81 	bl	a72c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    502a:	f005 fb65 	bl	a6f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    502e:	b968      	cbnz	r0, 504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5030:	7ce8      	ldrb	r0, [r5, #19]
    5032:	b158      	cbz	r0, 504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5034:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5036:	7841      	ldrb	r1, [r0, #1]
    5038:	b141      	cbz	r1, 504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    503a:	7800      	ldrb	r0, [r0, #0]
    503c:	7a29      	ldrb	r1, [r5, #8]
    503e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5042:	4288      	cmp	r0, r1
    5044:	d102      	bne.n	504c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x208>
    5046:	2001      	movs	r0, #1
    5048:	70a0      	strb	r0, [r4, #2]
    504a:	e063      	b.n	5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    504c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    504e:	7841      	ldrb	r1, [r0, #1]
    5050:	8161      	strh	r1, [r4, #10]
    5052:	b121      	cbz	r1, 505e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21a>
    5054:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5056:	f007 fbbf 	bl	c7d8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    505a:	62a0      	str	r0, [r4, #40]	; 0x28
    505c:	e000      	b.n	5060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x21c>
    505e:	62a6      	str	r6, [r4, #40]	; 0x28
    5060:	89e0      	ldrh	r0, [r4, #14]
    5062:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5066:	81e0      	strh	r0, [r4, #14]
    5068:	6a60      	ldr	r0, [r4, #36]	; 0x24
    506a:	79e9      	ldrb	r1, [r5, #7]
    506c:	7800      	ldrb	r0, [r0, #0]
    506e:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5072:	4288      	cmp	r0, r1
    5074:	d005      	beq.n	5082 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23e>
    5076:	f000 f963 	bl	5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4fc>
    507a:	89e0      	ldrh	r0, [r4, #14]
    507c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5080:	81e0      	strh	r0, [r4, #14]
    5082:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5084:	7a29      	ldrb	r1, [r5, #8]
    5086:	7800      	ldrb	r0, [r0, #0]
    5088:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    508c:	4288      	cmp	r0, r1
    508e:	d10e      	bne.n	50ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5090:	4668      	mov	r0, sp
    5092:	f000 f917 	bl	52c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x480>
    5096:	e00a      	b.n	50ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26a>
    5098:	e7ff      	b.n	509a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x256>
    509a:	b108      	cbz	r0, 50a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25c>
    509c:	f005 fb40 	bl	a720 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    50a0:	78e0      	ldrb	r0, [r4, #3]
    50a2:	1c40      	adds	r0, r0, #1
    50a4:	70e0      	strb	r0, [r4, #3]
    50a6:	89e0      	ldrh	r0, [r4, #14]
    50a8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    50ac:	81e0      	strh	r0, [r4, #14]
    50ae:	7ca8      	ldrb	r0, [r5, #18]
    50b0:	b198      	cbz	r0, 50da <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x296>
    50b2:	f7ff feeb 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    50b6:	4928      	ldr	r1, [pc, #160]	; (5158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    50b8:	760e      	strb	r6, [r1, #24]
    50ba:	e9d5 2314 	ldrd	r2, r3, [r5, #80]	; 0x50
    50be:	e9c1 2304 	strd	r2, r3, [r1, #16]
    50c2:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    50c6:	f007 fdfd 	bl	ccc4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    50ca:	4603      	mov	r3, r0
    50cc:	22fb      	movs	r2, #251	; 0xfb
    50ce:	4922      	ldr	r1, [pc, #136]	; (5158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    50d0:	2000      	movs	r0, #0
    50d2:	f005 fac5 	bl	a660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    50d6:	f005 faf9 	bl	a6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    50da:	4d1f      	ldr	r5, [pc, #124]	; (5158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>)
    50dc:	354a      	adds	r5, #74	; 0x4a
    50de:	f1b8 0f00 	cmp.w	r8, #0
    50e2:	d104      	bne.n	50ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2aa>
    50e4:	78e1      	ldrb	r1, [r4, #3]
    50e6:	2001      	movs	r0, #1
    50e8:	f7ff ff08 	bl	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    50ec:	b1b0      	cbz	r0, 511c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d8>
    50ee:	f005 fefb 	bl	aee8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    50f2:	f89d 0000 	ldrb.w	r0, [sp]
    50f6:	b110      	cbz	r0, 50fe <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    50f8:	2000      	movs	r0, #0
    50fa:	f7ff fe1f 	bl	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    50fe:	b137      	cbz	r7, 510e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    5100:	70e6      	strb	r6, [r4, #3]
    5102:	7968      	ldrb	r0, [r5, #5]
    5104:	1c40      	adds	r0, r0, #1
    5106:	7168      	strb	r0, [r5, #5]
    5108:	f7ff fed2 	bl	4eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    510c:	e002      	b.n	5114 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d0>
    510e:	79a8      	ldrb	r0, [r5, #6]
    5110:	1c40      	adds	r0, r0, #1
    5112:	71a8      	strb	r0, [r5, #6]
    5114:	f000 f880 	bl	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    511c:	f89d 0000 	ldrb.w	r0, [sp]
    5120:	b110      	cbz	r0, 5128 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    5122:	2001      	movs	r0, #1
    5124:	f7ff fe0a 	bl	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5128:	2000      	movs	r0, #0
    512a:	f000 f995 	bl	5458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x614>
    512e:	f89d 0000 	ldrb.w	r0, [sp]
    5132:	b110      	cbz	r0, 513a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f6>
    5134:	2002      	movs	r0, #2
    5136:	f7ff fe01 	bl	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    513a:	b137      	cbz	r7, 514a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x306>
    513c:	70e6      	strb	r6, [r4, #3]
    513e:	7968      	ldrb	r0, [r5, #5]
    5140:	1c40      	adds	r0, r0, #1
    5142:	7168      	strb	r0, [r5, #5]
    5144:	f7ff feb4 	bl	4eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5148:	e7e6      	b.n	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    514a:	79a8      	ldrb	r0, [r5, #6]
    514c:	1c40      	adds	r0, r0, #1
    514e:	71a8      	strb	r0, [r5, #6]
    5150:	e7e2      	b.n	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2d4>
    5152:	0000      	.short	0x0000
    5154:	200000ac 	.word	0x200000ac
    5158:	20000978 	.word	0x20000978
    515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5160:	460f      	mov	r7, r1
    5162:	4680      	mov	r8, r0
    5164:	f7ff fe98 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5168:	4d29      	ldr	r5, [pc, #164]	; (5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3cc>)
    516a:	4604      	mov	r4, r0
    516c:	7828      	ldrb	r0, [r5, #0]
    516e:	2801      	cmp	r0, #1
    5170:	d004      	beq.n	517c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x338>
    5172:	f240 4169 	movw	r1, #1129	; 0x469
    5176:	2027      	movs	r0, #39	; 0x27
    5178:	f7fe fd7e 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    517c:	7861      	ldrb	r1, [r4, #1]
    517e:	2000      	movs	r0, #0
    5180:	2601      	movs	r6, #1
    5182:	b129      	cbz	r1, 5190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5184:	7060      	strb	r0, [r4, #1]
    5186:	2100      	movs	r1, #0
    5188:	2004      	movs	r0, #4
    518a:	f7ff fe77 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    518e:	70e6      	strb	r6, [r4, #3]
    5190:	6a29      	ldr	r1, [r5, #32]
    5192:	7808      	ldrb	r0, [r1, #0]
    5194:	43c0      	mvns	r0, r0
    5196:	0780      	lsls	r0, r0, #30
    5198:	d109      	bne.n	51ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x36a>
    519a:	79a0      	ldrb	r0, [r4, #6]
    519c:	bb88      	cbnz	r0, 5202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    519e:	2002      	movs	r0, #2
    51a0:	f7ff fe6c 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    51a4:	6a28      	ldr	r0, [r5, #32]
    51a6:	7800      	ldrb	r0, [r0, #0]
    51a8:	43c0      	mvns	r0, r0
    51aa:	0780      	lsls	r0, r0, #30
    51ac:	d029      	beq.n	5202 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3be>
    51ae:	6a28      	ldr	r0, [r5, #32]
    51b0:	7840      	ldrb	r0, [r0, #1]
    51b2:	b110      	cbz	r0, 51ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x376>
    51b4:	2002      	movs	r0, #2
    51b6:	71a0      	strb	r0, [r4, #6]
    51b8:	e000      	b.n	51bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x378>
    51ba:	71a6      	strb	r6, [r4, #6]
    51bc:	7ce0      	ldrb	r0, [r4, #19]
    51be:	b1a0      	cbz	r0, 51ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a6>
    51c0:	f7ff fe64 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    51c4:	4913      	ldr	r1, [pc, #76]	; (5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    51c6:	7a6d      	ldrb	r5, [r5, #9]
    51c8:	760e      	strb	r6, [r1, #24]
    51ca:	e9d4 2316 	ldrd	r2, r3, [r4, #88]	; 0x58
    51ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
    51d2:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    51d6:	f007 fd75 	bl	ccc4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    51da:	4603      	mov	r3, r0
    51dc:	462a      	mov	r2, r5
    51de:	490d      	ldr	r1, [pc, #52]	; (5214 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d0>)
    51e0:	2001      	movs	r0, #1
    51e2:	f005 fa3d 	bl	a660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    51e6:	f005 fa71 	bl	a6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    51ea:	ea37 0708 	bics.w	r7, r7, r8
    51ee:	d004      	beq.n	51fa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b6>
    51f0:	2100      	movs	r1, #0
    51f2:	4608      	mov	r0, r1
    51f4:	f7ff fe82 	bl	4efc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    51f8:	b128      	cbz	r0, 5206 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3c2>
    51fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    51fe:	f000 b80b 	b.w	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5202:	2003      	movs	r0, #3
    5204:	e7d7      	b.n	51b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x372>
    5206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    520a:	2000      	movs	r0, #0
    520c:	f000 b8e6 	b.w	53dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x598>
    5210:	200000ac 	.word	0x200000ac
    5214:	20000978 	.word	0x20000978
    5218:	b510      	push	{r4, lr}
    521a:	f005 fb23 	bl	a864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    521e:	f005 f9d5 	bl	a5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5222:	4c0d      	ldr	r4, [pc, #52]	; (5258 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>)
    5224:	89e0      	ldrh	r0, [r4, #14]
    5226:	f7ff fe3d 	bl	4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    522a:	69e2      	ldr	r2, [r4, #28]
    522c:	7961      	ldrb	r1, [r4, #5]
    522e:	78a0      	ldrb	r0, [r4, #2]
    5230:	4790      	blx	r2
    5232:	480a      	ldr	r0, [pc, #40]	; (525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5234:	7c40      	ldrb	r0, [r0, #17]
    5236:	b158      	cbz	r0, 5250 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x40c>
    5238:	4808      	ldr	r0, [pc, #32]	; (525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    523a:	3852      	subs	r0, #82	; 0x52
    523c:	f850 1f52 	ldr.w	r1, [r0, #82]!
    5240:	6081      	str	r1, [r0, #8]
    5242:	6841      	ldr	r1, [r0, #4]
    5244:	60c1      	str	r1, [r0, #12]
    5246:	4805      	ldr	r0, [pc, #20]	; (525c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x418>)
    5248:	2101      	movs	r1, #1
    524a:	7401      	strb	r1, [r0, #16]
    524c:	f004 fcde 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5250:	2000      	movs	r0, #0
    5252:	7020      	strb	r0, [r4, #0]
    5254:	bd10      	pop	{r4, pc}
    5256:	0000      	.short	0x0000
    5258:	200000ac 	.word	0x200000ac
    525c:	200009c2 	.word	0x200009c2
    5260:	4808      	ldr	r0, [pc, #32]	; (5284 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x440>)
    5262:	b510      	push	{r4, lr}
    5264:	7800      	ldrb	r0, [r0, #0]
    5266:	2802      	cmp	r0, #2
    5268:	d004      	beq.n	5274 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x430>
    526a:	f240 2117 	movw	r1, #535	; 0x217
    526e:	2027      	movs	r0, #39	; 0x27
    5270:	f7fe fd02 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5274:	4904      	ldr	r1, [pc, #16]	; (5288 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>)
    5276:	2001      	movs	r0, #1
    5278:	71c8      	strb	r0, [r1, #7]
    527a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    527e:	f7ff bfcb 	b.w	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    5282:	0000      	.short	0x0000
    5284:	200000ac 	.word	0x200000ac
    5288:	200009c2 	.word	0x200009c2
    528c:	b430      	push	{r4, r5}
    528e:	4b0c      	ldr	r3, [pc, #48]	; (52c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x47c>)
    5290:	b942      	cbnz	r2, 52a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5292:	79da      	ldrb	r2, [r3, #7]
    5294:	2aff      	cmp	r2, #255	; 0xff
    5296:	d105      	bne.n	52a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>
    5298:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    529c:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    52a0:	42a2      	cmp	r2, r4
    52a2:	d00b      	beq.n	52bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x478>
    52a4:	b131      	cbz	r1, 52b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x470>
    52a6:	79da      	ldrb	r2, [r3, #7]
    52a8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    52ac:	bc30      	pop	{r4, r5}
    52ae:	4610      	mov	r0, r2
    52b0:	f005 be4e 	b.w	af50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    52b4:	22ff      	movs	r2, #255	; 0xff
    52b6:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    52ba:	e7f7      	b.n	52ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x468>
    52bc:	bc30      	pop	{r4, r5}
    52be:	4770      	bx	lr
    52c0:	200000ac 	.word	0x200000ac
    52c4:	b570      	push	{r4, r5, r6, lr}
    52c6:	4606      	mov	r6, r0
    52c8:	f7ff fde6 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    52cc:	4a1b      	ldr	r2, [pc, #108]	; (533c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f8>)
    52ce:	4604      	mov	r4, r0
    52d0:	2501      	movs	r5, #1
    52d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
    52d4:	7808      	ldrb	r0, [r1, #0]
    52d6:	f000 0003 	and.w	r0, r0, #3
    52da:	2801      	cmp	r0, #1
    52dc:	d00c      	beq.n	52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    52de:	2802      	cmp	r0, #2
    52e0:	d00a      	beq.n	52f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4b4>
    52e2:	2803      	cmp	r0, #3
    52e4:	d121      	bne.n	532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    52e6:	7065      	strb	r5, [r4, #1]
    52e8:	89d0      	ldrh	r0, [r2, #14]
    52ea:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    52ee:	81d0      	strh	r0, [r2, #14]
    52f0:	2001      	movs	r0, #1
    52f2:	f7ff fdc3 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    52f6:	e018      	b.n	532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    52f8:	7848      	ldrb	r0, [r1, #1]
    52fa:	b1b0      	cbz	r0, 532a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e6>
    52fc:	89d1      	ldrh	r1, [r2, #14]
    52fe:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    5302:	81d1      	strh	r1, [r2, #14]
    5304:	6a91      	ldr	r1, [r2, #40]	; 0x28
    5306:	2900      	cmp	r1, #0
    5308:	d009      	beq.n	531e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4da>
    530a:	28fb      	cmp	r0, #251	; 0xfb
    530c:	d808      	bhi.n	5320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>
    530e:	7990      	ldrb	r0, [r2, #6]
    5310:	b120      	cbz	r0, 531c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d8>
    5312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5316:	2020      	movs	r0, #32
    5318:	f7ff bdc4 	b.w	4ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    531c:	7035      	strb	r5, [r6, #0]
    531e:	bd70      	pop	{r4, r5, r6, pc}
    5320:	7950      	ldrb	r0, [r2, #5]
    5322:	f040 0010 	orr.w	r0, r0, #16
    5326:	7150      	strb	r0, [r2, #5]
    5328:	bd70      	pop	{r4, r5, r6, pc}
    532a:	7a20      	ldrb	r0, [r4, #8]
    532c:	2801      	cmp	r0, #1
    532e:	d001      	beq.n	5334 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4f0>
    5330:	7225      	strb	r5, [r4, #8]
    5332:	bd70      	pop	{r4, r5, r6, pc}
    5334:	2000      	movs	r0, #0
    5336:	7220      	strb	r0, [r4, #8]
    5338:	bd70      	pop	{r4, r5, r6, pc}
    533a:	0000      	.short	0x0000
    533c:	200000ac 	.word	0x200000ac
    5340:	b570      	push	{r4, r5, r6, lr}
    5342:	f7ff fda9 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5346:	4604      	mov	r4, r0
    5348:	7980      	ldrb	r0, [r0, #6]
    534a:	2800      	cmp	r0, #0
    534c:	d02e      	beq.n	53ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>
    534e:	2802      	cmp	r0, #2
    5350:	d10d      	bne.n	536e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x52a>
    5352:	481c      	ldr	r0, [pc, #112]	; (53c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x580>)
    5354:	6b00      	ldr	r0, [r0, #48]	; 0x30
    5356:	f007 f83a 	bl	c3ce <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    535a:	b340      	cbz	r0, 53ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56a>
    535c:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5360:	1c40      	adds	r0, r0, #1
    5362:	f141 0100 	adc.w	r1, r1, #0
    5366:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    536a:	f004 fc4f 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    536e:	2500      	movs	r5, #0
    5370:	71a5      	strb	r5, [r4, #6]
    5372:	78e0      	ldrb	r0, [r4, #3]
    5374:	b120      	cbz	r0, 5380 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53c>
    5376:	70e5      	strb	r5, [r4, #3]
    5378:	2100      	movs	r1, #0
    537a:	2010      	movs	r0, #16
    537c:	f7ff fd7e 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5380:	78a0      	ldrb	r0, [r4, #2]
    5382:	b170      	cbz	r0, 53a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x55e>
    5384:	70a5      	strb	r5, [r4, #2]
    5386:	f7ff fb01 	bl	498c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    538a:	b198      	cbz	r0, 53b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x570>
    538c:	2100      	movs	r1, #0
    538e:	2008      	movs	r0, #8
    5390:	f7ff fd74 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    5394:	e9d4 0114 	ldrd	r0, r1, [r4, #80]	; 0x50
    5398:	1c40      	adds	r0, r0, #1
    539a:	f141 0100 	adc.w	r1, r1, #0
    539e:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
    53a2:	79e0      	ldrb	r0, [r4, #7]
    53a4:	2801      	cmp	r0, #1
    53a6:	d00a      	beq.n	53be <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x57a>
    53a8:	2001      	movs	r0, #1
    53aa:	71e0      	strb	r0, [r4, #7]
    53ac:	bd70      	pop	{r4, r5, r6, pc}
    53ae:	f240 31af 	movw	r1, #943	; 0x3af
    53b2:	e001      	b.n	53b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x574>
    53b4:	f240 31c7 	movw	r1, #967	; 0x3c7
    53b8:	2027      	movs	r0, #39	; 0x27
    53ba:	f7fe fc5d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53be:	71e5      	strb	r5, [r4, #7]
    53c0:	bd70      	pop	{r4, r5, r6, pc}
    53c2:	0000      	.short	0x0000
    53c4:	200000ac 	.word	0x200000ac
    53c8:	4803      	ldr	r0, [pc, #12]	; (53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x594>)
    53ca:	7800      	ldrb	r0, [r0, #0]
    53cc:	2800      	cmp	r0, #0
    53ce:	d001      	beq.n	53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x590>
    53d0:	f7ff bf22 	b.w	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    53d4:	4770      	bx	lr
    53d6:	0000      	.short	0x0000
    53d8:	200000ac 	.word	0x200000ac
    53dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53e0:	4606      	mov	r6, r0
    53e2:	f7ff fd53 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    53e6:	4680      	mov	r8, r0
    53e8:	f7ff fd56 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    53ec:	4c17      	ldr	r4, [pc, #92]	; (544c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x608>)
    53ee:	4605      	mov	r5, r0
    53f0:	4632      	mov	r2, r6
    53f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    53f4:	6260      	str	r0, [r4, #36]	; 0x24
    53f6:	2101      	movs	r1, #1
    53f8:	4640      	mov	r0, r8
    53fa:	f7ff ff47 	bl	528c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    53fe:	7ce8      	ldrb	r0, [r5, #19]
    5400:	2700      	movs	r7, #0
    5402:	b180      	cbz	r0, 5426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e2>
    5404:	4812      	ldr	r0, [pc, #72]	; (5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    5406:	f005 fcc7 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    540a:	4812      	ldr	r0, [pc, #72]	; (5454 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x610>)
    540c:	2101      	movs	r1, #1
    540e:	7601      	strb	r1, [r0, #24]
    5410:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5414:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5418:	490d      	ldr	r1, [pc, #52]	; (5450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60c>)
    541a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    541c:	f005 f8a8 	bl	a570 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    5420:	f005 f8ba 	bl	a598 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    5424:	e004      	b.n	5430 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5ec>
    5426:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5428:	f005 fcb6 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    542c:	f005 f8ce 	bl	a5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5430:	b916      	cbnz	r6, 5438 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5f4>
    5432:	4638      	mov	r0, r7
    5434:	f005 fb52 	bl	aadc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    5438:	2100      	movs	r1, #0
    543a:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    543e:	4608      	mov	r0, r1
    5440:	f005 fd34 	bl	aeac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5444:	2002      	movs	r0, #2
    5446:	7020      	strb	r0, [r4, #0]
    5448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    544c:	200000ac 	.word	0x200000ac
    5450:	20000870 	.word	0x20000870
    5454:	20000978 	.word	0x20000978
    5458:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    545c:	4604      	mov	r4, r0
    545e:	f7ff fd1b 	bl	4e98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54>
    5462:	4605      	mov	r5, r0
    5464:	f7ff fd12 	bl	4e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x48>
    5468:	4606      	mov	r6, r0
    546a:	f8df 9168 	ldr.w	r9, [pc, #360]	; 55d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x790>
    546e:	4622      	mov	r2, r4
    5470:	2100      	movs	r1, #0
    5472:	f7ff ff0b 	bl	528c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x448>
    5476:	79a8      	ldrb	r0, [r5, #6]
    5478:	2701      	movs	r7, #1
    547a:	f04f 0800 	mov.w	r8, #0
    547e:	f1a9 0420 	sub.w	r4, r9, #32
    5482:	b140      	cbz	r0, 5496 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x652>
    5484:	2801      	cmp	r0, #1
    5486:	d01f      	beq.n	54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    5488:	2802      	cmp	r0, #2
    548a:	d030      	beq.n	54ee <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6aa>
    548c:	2803      	cmp	r0, #3
    548e:	d03c      	beq.n	550a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c6>
    5490:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5494:	e058      	b.n	5548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5496:	7a20      	ldrb	r0, [r4, #8]
    5498:	2150      	movs	r1, #80	; 0x50
    549a:	f8ad 0004 	strh.w	r0, [sp, #4]
    549e:	5388      	strh	r0, [r1, r6]
    54a0:	4648      	mov	r0, r9
    54a2:	f7ff fa9d 	bl	49e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    54a6:	b128      	cbz	r0, 54b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x670>
    54a8:	2080      	movs	r0, #128	; 0x80
    54aa:	6a21      	ldr	r1, [r4, #32]
    54ac:	f7ff fce6 	bl	4e7c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x38>
    54b0:	70af      	strb	r7, [r5, #2]
    54b2:	e02e      	b.n	5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    54b4:	466a      	mov	r2, sp
    54b6:	a901      	add	r1, sp, #4
    54b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54ba:	f007 fc1b 	bl	ccf4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    54be:	6220      	str	r0, [r4, #32]
    54c0:	b110      	cbz	r0, 54c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x684>
    54c2:	f895 1043 	ldrb.w	r1, [r5, #67]	; 0x43
    54c6:	b111      	cbz	r1, 54ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68a>
    54c8:	4843      	ldr	r0, [pc, #268]	; (55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    54ca:	6220      	str	r0, [r4, #32]
    54cc:	e021      	b.n	5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    54ce:	f89d 1000 	ldrb.w	r1, [sp]
    54d2:	b931      	cbnz	r1, 54e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69e>
    54d4:	f8a0 8000 	strh.w	r8, [r0]
    54d8:	f880 8002 	strb.w	r8, [r0, #2]
    54dc:	2101      	movs	r1, #1
    54de:	f007 ff53 	bl	d388 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    54e2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    54e6:	6a20      	ldr	r0, [r4, #32]
    54e8:	f007 ff12 	bl	d310 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    54ec:	e011      	b.n	5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    54ee:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    54f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    54f6:	466a      	mov	r2, sp
    54f8:	a901      	add	r1, sp, #4
    54fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    54fc:	f007 fbfa 	bl	ccf4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x48>
    5500:	6220      	str	r0, [r4, #32]
    5502:	b930      	cbnz	r0, 5512 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6ce>
    5504:	f240 21a5 	movw	r1, #677	; 0x2a5
    5508:	e01e      	b.n	5548 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    550a:	4648      	mov	r0, r9
    550c:	f7ff fa68 	bl	49e0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    5510:	b1c0      	cbz	r0, 5544 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x700>
    5512:	6a20      	ldr	r0, [r4, #32]
    5514:	2308      	movs	r3, #8
    5516:	7801      	ldrb	r1, [r0, #0]
    5518:	f021 0108 	bic.w	r1, r1, #8
    551c:	7001      	strb	r1, [r0, #0]
    551e:	79ea      	ldrb	r2, [r5, #7]
    5520:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    5524:	4311      	orrs	r1, r2
    5526:	f021 0104 	bic.w	r1, r1, #4
    552a:	7001      	strb	r1, [r0, #0]
    552c:	7a2a      	ldrb	r2, [r5, #8]
    552e:	2304      	movs	r3, #4
    5530:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    5534:	4311      	orrs	r1, r2
    5536:	f021 0110 	bic.w	r1, r1, #16
    553a:	7001      	strb	r1, [r0, #0]
    553c:	43c9      	mvns	r1, r1
    553e:	0789      	lsls	r1, r1, #30
    5540:	d005      	beq.n	554e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x70a>
    5542:	e007      	b.n	5554 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x710>
    5544:	f240 21ae 	movw	r1, #686	; 0x2ae
    5548:	2027      	movs	r0, #39	; 0x27
    554a:	f7fe fb95 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    554e:	78c0      	ldrb	r0, [r0, #3]
    5550:	2802      	cmp	r0, #2
    5552:	d00f      	beq.n	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    5554:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5556:	f007 f862 	bl	c61e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    555a:	b108      	cbz	r0, 5560 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x71c>
    555c:	2101      	movs	r1, #1
    555e:	e00a      	b.n	5576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    5560:	6a20      	ldr	r0, [r4, #32]
    5562:	7800      	ldrb	r0, [r0, #0]
    5564:	43c0      	mvns	r0, r0
    5566:	0780      	lsls	r0, r0, #30
    5568:	d004      	beq.n	5574 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x730>
    556a:	f7ff f9f7 	bl	495c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    556e:	f080 0101 	eor.w	r1, r0, #1
    5572:	e000      	b.n	5576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x732>
    5574:	2100      	movs	r1, #0
    5576:	6a20      	ldr	r0, [r4, #32]
    5578:	7802      	ldrb	r2, [r0, #0]
    557a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    557e:	7001      	strb	r1, [r0, #0]
    5580:	7ca9      	ldrb	r1, [r5, #18]
    5582:	b199      	cbz	r1, 55ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5584:	7841      	ldrb	r1, [r0, #1]
    5586:	b189      	cbz	r1, 55ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>
    5588:	4814      	ldr	r0, [pc, #80]	; (55dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    558a:	f005 fc05 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    558e:	4812      	ldr	r0, [pc, #72]	; (55d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x794>)
    5590:	3828      	subs	r0, #40	; 0x28
    5592:	f880 8018 	strb.w	r8, [r0, #24]
    5596:	e9d5 1214 	ldrd	r1, r2, [r5, #80]	; 0x50
    559a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    559e:	480f      	ldr	r0, [pc, #60]	; (55dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x798>)
    55a0:	6a21      	ldr	r1, [r4, #32]
    55a2:	f004 ffe5 	bl	a570 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    55a6:	f005 f82f 	bl	a608 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    55aa:	e003      	b.n	55b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x770>
    55ac:	f005 fbf4 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    55b0:	f005 f80c 	bl	a5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    55b4:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    55b8:	2101      	movs	r1, #1
    55ba:	2000      	movs	r0, #0
    55bc:	f005 fc76 	bl	aeac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    55c0:	7127      	strb	r7, [r4, #4]
    55c2:	6a20      	ldr	r0, [r4, #32]
    55c4:	8801      	ldrh	r1, [r0, #0]
    55c6:	8221      	strh	r1, [r4, #16]
    55c8:	7880      	ldrb	r0, [r0, #2]
    55ca:	74a0      	strb	r0, [r4, #18]
    55cc:	7027      	strb	r7, [r4, #0]
    55ce:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    55d2:	0000      	.short	0x0000
    55d4:	200000cc 	.word	0x200000cc
    55d8:	200009a0 	.word	0x200009a0
    55dc:	20000870 	.word	0x20000870
    55e0:	00005261 	.word	0x00005261
    55e4:	00004fe9 	.word	0x00004fe9
    55e8:	0000515d 	.word	0x0000515d
    55ec:	000053c9 	.word	0x000053c9

000055f0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    55f0:	4800      	ldr	r0, [pc, #0]	; (55f4 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    55f2:	4770      	bx	lr
    55f4:	20001261 	.word	0x20001261

000055f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    55f8:	4904      	ldr	r1, [pc, #16]	; (560c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    55fa:	788a      	ldrb	r2, [r1, #2]
    55fc:	4282      	cmp	r2, r0
    55fe:	d903      	bls.n	5608 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    5600:	4408      	add	r0, r1
    5602:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5606:	4770      	bx	lr
    5608:	2000      	movs	r0, #0
    560a:	4770      	bx	lr
    560c:	2000108e 	.word	0x2000108e

00005610 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5610:	4904      	ldr	r1, [pc, #16]	; (5624 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5612:	788a      	ldrb	r2, [r1, #2]
    5614:	4282      	cmp	r2, r0
    5616:	d903      	bls.n	5620 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5618:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    561c:	3083      	adds	r0, #131	; 0x83
    561e:	4770      	bx	lr
    5620:	2000      	movs	r0, #0
    5622:	4770      	bx	lr
    5624:	2000108e 	.word	0x2000108e

00005628 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5628:	4a05      	ldr	r2, [pc, #20]	; (5640 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    562a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    562e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5632:	6802      	ldr	r2, [r0, #0]
    5634:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5638:	8880      	ldrh	r0, [r0, #4]
    563a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    563e:	4770      	bx	lr
    5640:	2000108e 	.word	0x2000108e

00005644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5648:	460e      	mov	r6, r1
    564a:	4607      	mov	r7, r0
    564c:	4615      	mov	r5, r2
    564e:	2106      	movs	r1, #6
    5650:	4630      	mov	r0, r6
    5652:	f007 fd3e 	bl	d0d2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5656:	4c0d      	ldr	r4, [pc, #52]	; (568c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5658:	b160      	cbz	r0, 5674 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    565a:	2000      	movs	r0, #0
    565c:	e004      	b.n	5668 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    565e:	1821      	adds	r1, r4, r0
    5660:	1c40      	adds	r0, r0, #1
    5662:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    5666:	b2c0      	uxtb	r0, r0
    5668:	78a1      	ldrb	r1, [r4, #2]
    566a:	4281      	cmp	r1, r0
    566c:	d8f7      	bhi.n	565e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    566e:	2001      	movs	r0, #1
    5670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5674:	4631      	mov	r1, r6
    5676:	4638      	mov	r0, r7
    5678:	f007 fb4b 	bl	cd12 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    567c:	2808      	cmp	r0, #8
    567e:	d003      	beq.n	5688 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    5680:	4420      	add	r0, r4
    5682:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    5686:	e7f2      	b.n	566e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    5688:	2000      	movs	r0, #0
    568a:	e7f1      	b.n	5670 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    568c:	2000108e 	.word	0x2000108e

00005690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    5690:	4904      	ldr	r1, [pc, #16]	; (56a4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    5692:	788a      	ldrb	r2, [r1, #2]
    5694:	4282      	cmp	r2, r0
    5696:	d903      	bls.n	56a0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    5698:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    569c:	1cc0      	adds	r0, r0, #3
    569e:	4770      	bx	lr
    56a0:	2000      	movs	r0, #0
    56a2:	4770      	bx	lr
    56a4:	2000108e 	.word	0x2000108e

000056a8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    56a8:	b510      	push	{r4, lr}
    56aa:	f240 12d3 	movw	r2, #467	; 0x1d3
    56ae:	2100      	movs	r1, #0
    56b0:	4808      	ldr	r0, [pc, #32]	; (56d4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    56b2:	f006 f9b1 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56b6:	2208      	movs	r2, #8
    56b8:	21ff      	movs	r1, #255	; 0xff
    56ba:	4807      	ldr	r0, [pc, #28]	; (56d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56bc:	f006 f9ac 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    56c0:	4805      	ldr	r0, [pc, #20]	; (56d8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    56c2:	2100      	movs	r1, #0
    56c4:	1f00      	subs	r0, r0, #4
    56c6:	7001      	strb	r1, [r0, #0]
    56c8:	7041      	strb	r1, [r0, #1]
    56ca:	f44f 7161 	mov.w	r1, #900	; 0x384
    56ce:	8041      	strh	r1, [r0, #2]
    56d0:	bd10      	pop	{r4, pc}
    56d2:	0000      	.short	0x0000
    56d4:	2000108e 	.word	0x2000108e
    56d8:	2000027c 	.word	0x2000027c

000056dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    56dc:	4901      	ldr	r1, [pc, #4]	; (56e4 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    56de:	7008      	strb	r0, [r1, #0]
    56e0:	4770      	bx	lr
    56e2:	0000      	.short	0x0000
    56e4:	20000278 	.word	0x20000278

000056e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    56e8:	4801      	ldr	r0, [pc, #4]	; (56f0 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    56ea:	7800      	ldrb	r0, [r0, #0]
    56ec:	4770      	bx	lr
    56ee:	0000      	.short	0x0000
    56f0:	20000278 	.word	0x20000278

000056f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    56f4:	4b0b      	ldr	r3, [pc, #44]	; (5724 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    56f6:	b510      	push	{r4, lr}
    56f8:	789c      	ldrb	r4, [r3, #2]
    56fa:	4284      	cmp	r4, r0
    56fc:	d90f      	bls.n	571e <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    56fe:	4418      	add	r0, r3
    5700:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5704:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5708:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    570c:	700b      	strb	r3, [r1, #0]
    570e:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    5712:	6011      	str	r1, [r2, #0]
    5714:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5718:	8090      	strh	r0, [r2, #4]
    571a:	2001      	movs	r0, #1
    571c:	bd10      	pop	{r4, pc}
    571e:	2000      	movs	r0, #0
    5720:	bd10      	pop	{r4, pc}
    5722:	0000      	.short	0x0000
    5724:	2000108e 	.word	0x2000108e

00005728 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5728:	4907      	ldr	r1, [pc, #28]	; (5748 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    572a:	788a      	ldrb	r2, [r1, #2]
    572c:	4282      	cmp	r2, r0
    572e:	d909      	bls.n	5744 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5730:	4408      	add	r0, r1
    5732:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    5736:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    573a:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    573e:	f000 0001 	and.w	r0, r0, #1
    5742:	4770      	bx	lr
    5744:	2000      	movs	r0, #0
    5746:	4770      	bx	lr
    5748:	2000108e 	.word	0x2000108e

0000574c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5750:	4698      	mov	r8, r3
    5752:	4691      	mov	r9, r2
    5754:	460c      	mov	r4, r1
    5756:	4605      	mov	r5, r0
    5758:	f000 f936 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    575c:	4606      	mov	r6, r0
    575e:	2810      	cmp	r0, #16
    5760:	d006      	beq.n	5770 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    5762:	f000 f901 	bl	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5766:	2810      	cmp	r0, #16
    5768:	d002      	beq.n	5770 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    576a:	2012      	movs	r0, #18
    576c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5770:	4f18      	ldr	r7, [pc, #96]	; (57d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    5772:	78b8      	ldrb	r0, [r7, #2]
    5774:	2808      	cmp	r0, #8
    5776:	d22a      	bcs.n	57ce <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    5778:	2e10      	cmp	r6, #16
    577a:	d105      	bne.n	5788 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    577c:	2200      	movs	r2, #0
    577e:	4621      	mov	r1, r4
    5780:	4628      	mov	r0, r5
    5782:	f000 f905 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5786:	4606      	mov	r6, r0
    5788:	78bc      	ldrb	r4, [r7, #2]
    578a:	2210      	movs	r2, #16
    578c:	1c60      	adds	r0, r4, #1
    578e:	70b8      	strb	r0, [r7, #2]
    5790:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    5794:	1ce8      	adds	r0, r5, #3
    5796:	4649      	mov	r1, r9
    5798:	f007 fc04 	bl	cfa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    579c:	f105 0083 	add.w	r0, r5, #131	; 0x83
    57a0:	2210      	movs	r2, #16
    57a2:	4641      	mov	r1, r8
    57a4:	f007 fbfe 	bl	cfa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    57a8:	2110      	movs	r1, #16
    57aa:	4640      	mov	r0, r8
    57ac:	f007 fc91 	bl	d0d2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57b0:	443c      	add	r4, r7
    57b2:	2110      	movs	r1, #16
    57b4:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    57b8:	4648      	mov	r0, r9
    57ba:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    57be:	f007 fc88 	bl	d0d2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    57c2:	77e0      	strb	r0, [r4, #31]
    57c4:	f804 6c29 	strb.w	r6, [r4, #-41]
    57c8:	2000      	movs	r0, #0
    57ca:	73e0      	strb	r0, [r4, #15]
    57cc:	e7ce      	b.n	576c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    57ce:	2007      	movs	r0, #7
    57d0:	e7cc      	b.n	576c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    57d2:	0000      	.short	0x0000
    57d4:	2000108e 	.word	0x2000108e

000057d8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    57d8:	4806      	ldr	r0, [pc, #24]	; (57f4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    57da:	b510      	push	{r4, lr}
    57dc:	7880      	ldrb	r0, [r0, #2]
    57de:	1e40      	subs	r0, r0, #1
    57e0:	b244      	sxtb	r4, r0
    57e2:	e004      	b.n	57ee <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    57e4:	b2e0      	uxtb	r0, r4
    57e6:	f000 f937 	bl	5a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    57ea:	1e64      	subs	r4, r4, #1
    57ec:	b264      	sxtb	r4, r4
    57ee:	2c00      	cmp	r4, #0
    57f0:	daf8      	bge.n	57e4 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    57f2:	bd10      	pop	{r4, pc}
    57f4:	2000108e 	.word	0x2000108e

000057f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    57f8:	4801      	ldr	r0, [pc, #4]	; (5800 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    57fa:	8840      	ldrh	r0, [r0, #2]
    57fc:	4770      	bx	lr
    57fe:	0000      	.short	0x0000
    5800:	20000278 	.word	0x20000278

00005804 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    5804:	b138      	cbz	r0, 5816 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5806:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    580a:	4288      	cmp	r0, r1
    580c:	d803      	bhi.n	5816 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    580e:	4903      	ldr	r1, [pc, #12]	; (581c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5810:	8048      	strh	r0, [r1, #2]
    5812:	2001      	movs	r0, #1
    5814:	4770      	bx	lr
    5816:	2000      	movs	r0, #0
    5818:	4770      	bx	lr
    581a:	0000      	.short	0x0000
    581c:	20000278 	.word	0x20000278

00005820 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    5820:	4905      	ldr	r1, [pc, #20]	; (5838 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    5822:	788a      	ldrb	r2, [r1, #2]
    5824:	4282      	cmp	r2, r0
    5826:	d903      	bls.n	5830 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    5828:	4408      	add	r0, r1
    582a:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    582e:	b108      	cbz	r0, 5834 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    5830:	2000      	movs	r0, #0
    5832:	4770      	bx	lr
    5834:	2001      	movs	r0, #1
    5836:	4770      	bx	lr
    5838:	2000108e 	.word	0x2000108e

0000583c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    583c:	b570      	push	{r4, r5, r6, lr}
    583e:	460d      	mov	r5, r1
    5840:	4606      	mov	r6, r0
    5842:	f000 f8c1 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5846:	4c10      	ldr	r4, [pc, #64]	; (5888 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5848:	2810      	cmp	r0, #16
    584a:	d007      	beq.n	585c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    584c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5850:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5854:	07c9      	lsls	r1, r1, #31
    5856:	d001      	beq.n	585c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5858:	2001      	movs	r0, #1
    585a:	bd70      	pop	{r4, r5, r6, pc}
    585c:	7861      	ldrb	r1, [r4, #1]
    585e:	2908      	cmp	r1, #8
    5860:	d210      	bcs.n	5884 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5862:	2810      	cmp	r0, #16
    5864:	d008      	beq.n	5878 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5866:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    586a:	2101      	movs	r1, #1
    586c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5870:	7860      	ldrb	r0, [r4, #1]
    5872:	1c40      	adds	r0, r0, #1
    5874:	7060      	strb	r0, [r4, #1]
    5876:	e7ef      	b.n	5858 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5878:	2201      	movs	r2, #1
    587a:	4629      	mov	r1, r5
    587c:	4630      	mov	r0, r6
    587e:	f000 f887 	bl	5990 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5882:	e7f5      	b.n	5870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5884:	2000      	movs	r0, #0
    5886:	bd70      	pop	{r4, r5, r6, pc}
    5888:	2000108e 	.word	0x2000108e

0000588c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    588c:	b570      	push	{r4, r5, r6, lr}
    588e:	4d0b      	ldr	r5, [pc, #44]	; (58bc <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5890:	7828      	ldrb	r0, [r5, #0]
    5892:	1e40      	subs	r0, r0, #1
    5894:	b244      	sxtb	r4, r0
    5896:	e00a      	b.n	58ae <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5898:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    589c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58a0:	07c0      	lsls	r0, r0, #31
    58a2:	d002      	beq.n	58aa <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    58a4:	b2e0      	uxtb	r0, r4
    58a6:	f000 f91f 	bl	5ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    58aa:	1e64      	subs	r4, r4, #1
    58ac:	b264      	sxtb	r4, r4
    58ae:	2c00      	cmp	r4, #0
    58b0:	daf2      	bge.n	5898 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    58b2:	4903      	ldr	r1, [pc, #12]	; (58c0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    58b4:	2000      	movs	r0, #0
    58b6:	7048      	strb	r0, [r1, #1]
    58b8:	bd70      	pop	{r4, r5, r6, pc}
    58ba:	0000      	.short	0x0000
    58bc:	2000108e 	.word	0x2000108e
    58c0:	20000278 	.word	0x20000278

000058c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    58c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    58c8:	2400      	movs	r4, #0
    58ca:	4625      	mov	r5, r4
    58cc:	4e18      	ldr	r6, [pc, #96]	; (5930 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    58ce:	e029      	b.n	5924 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    58d0:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    58d4:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    58d8:	07c0      	lsls	r0, r0, #31
    58da:	d021      	beq.n	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    58dc:	4628      	mov	r0, r5
    58de:	f000 f843 	bl	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58e2:	4603      	mov	r3, r0
    58e4:	f7ff fed4 	bl	5690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    58e8:	4601      	mov	r1, r0
    58ea:	2000      	movs	r0, #0
    58ec:	2b10      	cmp	r3, #16
    58ee:	d009      	beq.n	5904 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    58f0:	18f2      	adds	r2, r6, r3
    58f2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    58f6:	f1bc 0f01 	cmp.w	ip, #1
    58fa:	d002      	beq.n	5902 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    58fc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5900:	b102      	cbz	r2, 5904 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5902:	2001      	movs	r0, #1
    5904:	1e40      	subs	r0, r0, #1
    5906:	4201      	tst	r1, r0
    5908:	d10a      	bne.n	5920 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    590a:	480a      	ldr	r0, [pc, #40]	; (5934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    590c:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5910:	5503      	strb	r3, [r0, r4]
    5912:	4620      	mov	r0, r4
    5914:	1c64      	adds	r4, r4, #1
    5916:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    591a:	b2e4      	uxtb	r4, r4
    591c:	f005 fbe6 	bl	b0ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5920:	1c6d      	adds	r5, r5, #1
    5922:	b2ed      	uxtb	r5, r5
    5924:	7830      	ldrb	r0, [r6, #0]
    5926:	42a8      	cmp	r0, r5
    5928:	d8d2      	bhi.n	58d0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    592a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    592e:	0000      	.short	0x0000
    5930:	2000108e 	.word	0x2000108e
    5934:	2000027c 	.word	0x2000027c
    5938:	4602      	mov	r2, r0
    593a:	4809      	ldr	r0, [pc, #36]	; (5960 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    593c:	b510      	push	{r4, lr}
    593e:	7800      	ldrb	r0, [r0, #0]
    5940:	460b      	mov	r3, r1
    5942:	b158      	cbz	r0, 595c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5944:	4807      	ldr	r0, [pc, #28]	; (5964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5946:	7881      	ldrb	r1, [r0, #2]
    5948:	b141      	cbz	r1, 595c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    594a:	b10b      	cbz	r3, 5950 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    594c:	1cc0      	adds	r0, r0, #3
    594e:	e001      	b.n	5954 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5950:	4804      	ldr	r0, [pc, #16]	; (5964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5952:	3083      	adds	r0, #131	; 0x83
    5954:	f004 fd2e 	bl	a3b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5958:	2001      	movs	r0, #1
    595a:	bd10      	pop	{r4, pc}
    595c:	2000      	movs	r0, #0
    595e:	bd10      	pop	{r4, pc}
    5960:	20000278 	.word	0x20000278
    5964:	2000108e 	.word	0x2000108e
    5968:	4908      	ldr	r1, [pc, #32]	; (598c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    596a:	b510      	push	{r4, lr}
    596c:	4603      	mov	r3, r0
    596e:	2000      	movs	r0, #0
    5970:	788a      	ldrb	r2, [r1, #2]
    5972:	e006      	b.n	5982 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5974:	180c      	adds	r4, r1, r0
    5976:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    597a:	429c      	cmp	r4, r3
    597c:	d004      	beq.n	5988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    597e:	1c40      	adds	r0, r0, #1
    5980:	b2c0      	uxtb	r0, r0
    5982:	4282      	cmp	r2, r0
    5984:	d8f6      	bhi.n	5974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5986:	2010      	movs	r0, #16
    5988:	bd10      	pop	{r4, pc}
    598a:	0000      	.short	0x0000
    598c:	2000108e 	.word	0x2000108e
    5990:	b570      	push	{r4, r5, r6, lr}
    5992:	4b0c      	ldr	r3, [pc, #48]	; (59c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5994:	4604      	mov	r4, r0
    5996:	7818      	ldrb	r0, [r3, #0]
    5998:	1c45      	adds	r5, r0, #1
    599a:	701d      	strb	r5, [r3, #0]
    599c:	2810      	cmp	r0, #16
    599e:	d303      	bcc.n	59a8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    59a0:	2146      	movs	r1, #70	; 0x46
    59a2:	2028      	movs	r0, #40	; 0x28
    59a4:	f7fe f968 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    59ac:	680d      	ldr	r5, [r1, #0]
    59ae:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    59b2:	8889      	ldrh	r1, [r1, #4]
    59b4:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    59b8:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    59bc:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    59c0:	bd70      	pop	{r4, r5, r6, pc}
    59c2:	0000      	.short	0x0000
    59c4:	2000108e 	.word	0x2000108e
    59c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59cc:	460f      	mov	r7, r1
    59ce:	4606      	mov	r6, r0
    59d0:	2400      	movs	r4, #0
    59d2:	4d0d      	ldr	r5, [pc, #52]	; (5a08 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    59d4:	e00f      	b.n	59f6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    59d6:	bf00      	nop
    59d8:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    59dc:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    59e0:	42b1      	cmp	r1, r6
    59e2:	d106      	bne.n	59f2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    59e4:	2206      	movs	r2, #6
    59e6:	4639      	mov	r1, r7
    59e8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    59ec:	f005 ff88 	bl	b900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    59f0:	b138      	cbz	r0, 5a02 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    59f2:	1c64      	adds	r4, r4, #1
    59f4:	b2e4      	uxtb	r4, r4
    59f6:	7828      	ldrb	r0, [r5, #0]
    59f8:	42a0      	cmp	r0, r4
    59fa:	d8ed      	bhi.n	59d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    59fc:	2010      	movs	r0, #16
    59fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a02:	4620      	mov	r0, r4
    5a04:	e7fb      	b.n	59fe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5a06:	0000      	.short	0x0000
    5a08:	2000108e 	.word	0x2000108e
    5a0c:	b570      	push	{r4, r5, r6, lr}
    5a0e:	4605      	mov	r5, r0
    5a10:	f7ff ffaa 	bl	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a14:	2810      	cmp	r0, #16
    5a16:	d11c      	bne.n	5a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a18:	4c0e      	ldr	r4, [pc, #56]	; (5a54 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5a1a:	7820      	ldrb	r0, [r4, #0]
    5a1c:	1e40      	subs	r0, r0, #1
    5a1e:	b2c0      	uxtb	r0, r0
    5a20:	7020      	strb	r0, [r4, #0]
    5a22:	42a8      	cmp	r0, r5
    5a24:	d015      	beq.n	5a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a26:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5a2a:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5a2e:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5a32:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5a36:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5a3a:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5a3e:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5a42:	7820      	ldrb	r0, [r4, #0]
    5a44:	f7ff ff90 	bl	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5a48:	2810      	cmp	r0, #16
    5a4a:	d002      	beq.n	5a52 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5a4c:	4420      	add	r0, r4
    5a4e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5a52:	bd70      	pop	{r4, r5, r6, pc}
    5a54:	2000108e 	.word	0x2000108e
    5a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5a5c:	4c21      	ldr	r4, [pc, #132]	; (5ae4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5a5e:	4606      	mov	r6, r0
    5a60:	19a7      	adds	r7, r4, r6
    5a62:	78a0      	ldrb	r0, [r4, #2]
    5a64:	1e40      	subs	r0, r0, #1
    5a66:	b2c5      	uxtb	r5, r0
    5a68:	70a5      	strb	r5, [r4, #2]
    5a6a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5a6e:	42ae      	cmp	r6, r5
    5a70:	d02a      	beq.n	5ac8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5a72:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5a76:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5a7a:	f10a 0103 	add.w	r1, sl, #3
    5a7e:	f109 0003 	add.w	r0, r9, #3
    5a82:	2210      	movs	r2, #16
    5a84:	f005 ff4e 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a88:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5a8c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5a90:	2210      	movs	r2, #16
    5a92:	f005 ff47 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5a96:	1960      	adds	r0, r4, r5
    5a98:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5a9c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5aa0:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5aa4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5aa8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5aac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5ab0:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5ab4:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5ab8:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5abc:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5ac0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5ac4:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5ac8:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5acc:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5ad0:	07c0      	lsls	r0, r0, #31
    5ad2:	d104      	bne.n	5ade <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5ad4:	4640      	mov	r0, r8
    5ad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ada:	f7ff bf97 	b.w	5a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ae2:	0000      	.short	0x0000
    5ae4:	2000108e 	.word	0x2000108e
    5ae8:	4905      	ldr	r1, [pc, #20]	; (5b00 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5aea:	784a      	ldrb	r2, [r1, #1]
    5aec:	1e52      	subs	r2, r2, #1
    5aee:	704a      	strb	r2, [r1, #1]
    5af0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5af4:	2200      	movs	r2, #0
    5af6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5afa:	f7ff bf87 	b.w	5a0c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5afe:	0000      	.short	0x0000
    5b00:	2000108e 	.word	0x2000108e

00005b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    5b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b08:	4604      	mov	r4, r0
    5b0a:	f100 0570 	add.w	r5, r0, #112	; 0x70
    5b0e:	f04f 0901 	mov.w	r9, #1
    5b12:	b171      	cbz	r1, 5b32 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    5b14:	f104 0786 	add.w	r7, r4, #134	; 0x86
    5b18:	1e7e      	subs	r6, r7, #1
    5b1a:	2901      	cmp	r1, #1
    5b1c:	d021      	beq.n	5b62 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5e>
    5b1e:	2902      	cmp	r1, #2
    5b20:	d046      	beq.n	5bb0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xac>
    5b22:	2903      	cmp	r1, #3
    5b24:	d11b      	bne.n	5b5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5b26:	4639      	mov	r1, r7
    5b28:	4630      	mov	r0, r6
    5b2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5b2e:	f007 bb00 	b.w	d132 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b32:	f44f 7206 	mov.w	r2, #536	; 0x218
    5b36:	2100      	movs	r1, #0
    5b38:	f005 ff6e 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5b3c:	f004 fc10 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    5b40:	f644 112b 	movw	r1, #18731	; 0x492b
    5b44:	4008      	ands	r0, r1
    5b46:	f885 9015 	strb.w	r9, [r5, #21]
    5b4a:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
    5b4e:	0a00      	lsrs	r0, r0, #8
    5b50:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
    5b54:	20fe      	movs	r0, #254	; 0xfe
    5b56:	f885 007c 	strb.w	r0, [r5, #124]	; 0x7c
    5b5a:	207f      	movs	r0, #127	; 0x7f
    5b5c:	7268      	strb	r0, [r5, #9]
    5b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5b62:	f04f 0800 	mov.w	r8, #0
    5b66:	f8a4 810e 	strh.w	r8, [r4, #270]	; 0x10e
    5b6a:	f884 8103 	strb.w	r8, [r4, #259]	; 0x103
    5b6e:	68e1      	ldr	r1, [r4, #12]
    5b70:	4814      	ldr	r0, [pc, #80]	; (5bc4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc0>)
    5b72:	460a      	mov	r2, r1
    5b74:	4408      	add	r0, r1
    5b76:	fbb0 f0f1 	udiv	r0, r0, r1
    5b7a:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
    5b7e:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5b82:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
    5b86:	8ae3      	ldrh	r3, [r4, #22]
    5b88:	4628      	mov	r0, r5
    5b8a:	f000 f81d 	bl	5bc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5b8e:	4639      	mov	r1, r7
    5b90:	4630      	mov	r0, r6
    5b92:	f007 face 	bl	d132 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5b96:	f005 fe8f 	bl	b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    5b9a:	b118      	cbz	r0, 5ba4 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa0>
    5b9c:	6920      	ldr	r0, [r4, #16]
    5b9e:	f000 fb39 	bl	6214 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    5ba2:	b110      	cbz	r0, 5baa <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xa6>
    5ba4:	f884 8174 	strb.w	r8, [r4, #372]	; 0x174
    5ba8:	e7d9      	b.n	5b5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5baa:	f884 9174 	strb.w	r9, [r4, #372]	; 0x174
    5bae:	e7d6      	b.n	5b5e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x5a>
    5bb0:	68c1      	ldr	r1, [r0, #12]
    5bb2:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
    5bb6:	f8d4 219c 	ldr.w	r2, [r4, #412]	; 0x19c
    5bba:	4628      	mov	r0, r5
    5bbc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5bc0:	f000 b802 	b.w	5bc8 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xc4>
    5bc4:	01c9c37f 	.word	0x01c9c37f
    5bc8:	b530      	push	{r4, r5, lr}
    5bca:	2400      	movs	r4, #0
    5bcc:	8684      	strh	r4, [r0, #52]	; 0x34
    5bce:	8f04      	ldrh	r4, [r0, #56]	; 0x38
    5bd0:	4d13      	ldr	r5, [pc, #76]	; (5c20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x11c>)
    5bd2:	434c      	muls	r4, r1
    5bd4:	fbb4 f4f2 	udiv	r4, r4, r2
    5bd8:	8704      	strh	r4, [r0, #56]	; 0x38
    5bda:	f242 7410 	movw	r4, #10000	; 0x2710
    5bde:	4363      	muls	r3, r4
    5be0:	fbb3 f3f2 	udiv	r3, r3, r2
    5be4:	1c5b      	adds	r3, r3, #1
    5be6:	b29b      	uxth	r3, r3
    5be8:	fb03 f402 	mul.w	r4, r3, r2
    5bec:	86c3      	strh	r3, [r0, #54]	; 0x36
    5bee:	42ac      	cmp	r4, r5
    5bf0:	d901      	bls.n	5bf6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xf2>
    5bf2:	1e5b      	subs	r3, r3, #1
    5bf4:	86c3      	strh	r3, [r0, #54]	; 0x36
    5bf6:	4b0b      	ldr	r3, [pc, #44]	; (5c24 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x120>)
    5bf8:	f240 2471 	movw	r4, #625	; 0x271
    5bfc:	fbb3 f3f2 	udiv	r3, r3, r2
    5c00:	1c5b      	adds	r3, r3, #1
    5c02:	8783      	strh	r3, [r0, #60]	; 0x3c
    5c04:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5c06:	4363      	muls	r3, r4
    5c08:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5c0c:	1e5b      	subs	r3, r3, #1
    5c0e:	fbb3 f3f2 	udiv	r3, r3, r2
    5c12:	62c3      	str	r3, [r0, #44]	; 0x2c
    5c14:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5c16:	434b      	muls	r3, r1
    5c18:	fbb3 f1f2 	udiv	r1, r3, r2
    5c1c:	6281      	str	r1, [r0, #40]	; 0x28
    5c1e:	bd30      	pop	{r4, r5, pc}
    5c20:	01e84800 	.word	0x01e84800
    5c24:	02625a00 	.word	0x02625a00

00005c28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5c28:	b570      	push	{r4, r5, r6, lr}
    5c2a:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5c2e:	b28b      	uxth	r3, r1
    5c30:	7ac5      	ldrb	r5, [r0, #11]
    5c32:	ea83 0102 	eor.w	r1, r3, r2
    5c36:	2200      	movs	r2, #0
    5c38:	b2cc      	uxtb	r4, r1
    5c3a:	0a09      	lsrs	r1, r1, #8
    5c3c:	fa94 f4a4 	rbit	r4, r4
    5c40:	fa91 f1a1 	rbit	r1, r1
    5c44:	0e24      	lsrs	r4, r4, #24
    5c46:	0e09      	lsrs	r1, r1, #24
    5c48:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5c4c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5c50:	1c52      	adds	r2, r2, #1
    5c52:	4419      	add	r1, r3
    5c54:	b2d2      	uxtb	r2, r2
    5c56:	b289      	uxth	r1, r1
    5c58:	2a03      	cmp	r2, #3
    5c5a:	d3ed      	bcc.n	5c38 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5c5c:	4059      	eors	r1, r3
    5c5e:	2225      	movs	r2, #37	; 0x25
    5c60:	fbb1 f3f2 	udiv	r3, r1, r2
    5c64:	fb02 1213 	mls	r2, r2, r3, r1
    5c68:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5c6c:	f002 0607 	and.w	r6, r2, #7
    5c70:	785b      	ldrb	r3, [r3, #1]
    5c72:	2401      	movs	r4, #1
    5c74:	fa04 f606 	lsl.w	r6, r4, r6
    5c78:	4233      	tst	r3, r6
    5c7a:	d001      	beq.n	5c80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5c7c:	4610      	mov	r0, r2
    5c7e:	bd70      	pop	{r4, r5, r6, pc}
    5c80:	434d      	muls	r5, r1
    5c82:	0c29      	lsrs	r1, r5, #16
    5c84:	1c49      	adds	r1, r1, #1
    5c86:	b2c9      	uxtb	r1, r1
    5c88:	2200      	movs	r2, #0
    5c8a:	1885      	adds	r5, r0, r2
    5c8c:	79ab      	ldrb	r3, [r5, #6]
    5c8e:	428b      	cmp	r3, r1
    5c90:	d312      	bcc.n	5cb8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5c92:	f895 5001 	ldrb.w	r5, [r5, #1]
    5c96:	2300      	movs	r3, #0
    5c98:	fa04 f603 	lsl.w	r6, r4, r3
    5c9c:	4235      	tst	r5, r6
    5c9e:	d001      	beq.n	5ca4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5ca0:	1e49      	subs	r1, r1, #1
    5ca2:	b2c9      	uxtb	r1, r1
    5ca4:	b121      	cbz	r1, 5cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5ca6:	1c5b      	adds	r3, r3, #1
    5ca8:	b2db      	uxtb	r3, r3
    5caa:	2b08      	cmp	r3, #8
    5cac:	d3f4      	bcc.n	5c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5cae:	e005      	b.n	5cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5cb0:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5cb4:	b2c0      	uxtb	r0, r0
    5cb6:	bd70      	pop	{r4, r5, r6, pc}
    5cb8:	1ac9      	subs	r1, r1, r3
    5cba:	b2c9      	uxtb	r1, r1
    5cbc:	1c52      	adds	r2, r2, #1
    5cbe:	b2d2      	uxtb	r2, r2
    5cc0:	2a05      	cmp	r2, #5
    5cc2:	d3e2      	bcc.n	5c8a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5cc4:	f240 110d 	movw	r1, #269	; 0x10d
    5cc8:	2046      	movs	r0, #70	; 0x46
    5cca:	f7fd ffd5 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cce:	0000      	movs	r0, r0
    5cd0:	b570      	push	{r4, r5, r6, lr}
    5cd2:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5cd6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5cda:	2401      	movs	r4, #1
    5cdc:	fb03 2101 	mla	r1, r3, r1, r2
    5ce0:	2225      	movs	r2, #37	; 0x25
    5ce2:	fbb1 f3f2 	udiv	r3, r1, r2
    5ce6:	fb02 1113 	mls	r1, r2, r3, r1
    5cea:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5cee:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5cf2:	f001 0307 	and.w	r3, r1, #7
    5cf6:	7d92      	ldrb	r2, [r2, #22]
    5cf8:	fa04 f303 	lsl.w	r3, r4, r3
    5cfc:	421a      	tst	r2, r3
    5cfe:	d003      	beq.n	5d08 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5d00:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5d04:	2000      	movs	r0, #0
    5d06:	bd70      	pop	{r4, r5, r6, pc}
    5d08:	f890 2020 	ldrb.w	r2, [r0, #32]
    5d0c:	fbb1 f3f2 	udiv	r3, r1, r2
    5d10:	fb02 1113 	mls	r1, r2, r3, r1
    5d14:	1c49      	adds	r1, r1, #1
    5d16:	b2c9      	uxtb	r1, r1
    5d18:	2300      	movs	r3, #0
    5d1a:	18c5      	adds	r5, r0, r3
    5d1c:	7eea      	ldrb	r2, [r5, #27]
    5d1e:	428a      	cmp	r2, r1
    5d20:	d311      	bcc.n	5d46 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5d22:	f895 5016 	ldrb.w	r5, [r5, #22]
    5d26:	2200      	movs	r2, #0
    5d28:	fa04 f602 	lsl.w	r6, r4, r2
    5d2c:	4235      	tst	r5, r6
    5d2e:	d001      	beq.n	5d34 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5d30:	1e49      	subs	r1, r1, #1
    5d32:	b2c9      	uxtb	r1, r1
    5d34:	b121      	cbz	r1, 5d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5d36:	1c52      	adds	r2, r2, #1
    5d38:	b2d2      	uxtb	r2, r2
    5d3a:	2a08      	cmp	r2, #8
    5d3c:	d3f4      	bcc.n	5d28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5d3e:	e004      	b.n	5d4a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5d40:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5d44:	e7dc      	b.n	5d00 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5d46:	1a89      	subs	r1, r1, r2
    5d48:	b2c9      	uxtb	r1, r1
    5d4a:	1c5b      	adds	r3, r3, #1
    5d4c:	b2db      	uxtb	r3, r3
    5d4e:	2b05      	cmp	r3, #5
    5d50:	d3e3      	bcc.n	5d1a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5d52:	201f      	movs	r0, #31
    5d54:	bd70      	pop	{r4, r5, r6, pc}
	...

00005d58 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5d58:	7841      	ldrb	r1, [r0, #1]
    5d5a:	b141      	cbz	r1, 5d6e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d5c:	78c0      	ldrb	r0, [r0, #3]
    5d5e:	2819      	cmp	r0, #25
    5d60:	d203      	bcs.n	5d6a <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5d62:	4a04      	ldr	r2, [pc, #16]	; (5d74 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5d64:	5c10      	ldrb	r0, [r2, r0]
    5d66:	4288      	cmp	r0, r1
    5d68:	d101      	bne.n	5d6e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5d6a:	2001      	movs	r0, #1
    5d6c:	4770      	bx	lr
    5d6e:	2000      	movs	r0, #0
    5d70:	4770      	bx	lr
    5d72:	0000      	.short	0x0000
    5d74:	0000f6c8 	.word	0x0000f6c8

00005d78 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>:
    5d78:	b50c      	push	{r2, r3, lr}
    5d7a:	a20b      	add	r2, pc, #44	; (adr r2, 5da8 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x30>)
    5d7c:	e9d2 1200 	ldrd	r1, r2, [r2]
    5d80:	e9cd 1200 	strd	r1, r2, [sp]
    5d84:	7901      	ldrb	r1, [r0, #4]
    5d86:	7940      	ldrb	r0, [r0, #5]
    5d88:	f001 0207 	and.w	r2, r1, #7
    5d8c:	4669      	mov	r1, sp
    5d8e:	f81d 2002 	ldrb.w	r2, [sp, r2]
    5d92:	2a01      	cmp	r2, #1
    5d94:	d804      	bhi.n	5da0 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x28>
    5d96:	f000 0007 	and.w	r0, r0, #7
    5d9a:	5c08      	ldrb	r0, [r1, r0]
    5d9c:	2801      	cmp	r0, #1
    5d9e:	d901      	bls.n	5da4 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI+0x2c>
    5da0:	2000      	movs	r0, #0
    5da2:	bd0c      	pop	{r2, r3, pc}
    5da4:	2001      	movs	r0, #1
    5da6:	bd0c      	pop	{r2, r3, pc}
    5da8:	02010100 	.word	0x02010100
    5dac:	03020201 	.word	0x03020201

00005db0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5db0:	b510      	push	{r4, lr}
    5db2:	2201      	movs	r2, #1
    5db4:	70c1      	strb	r1, [r0, #3]
    5db6:	2919      	cmp	r1, #25
    5db8:	d202      	bcs.n	5dc0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5dba:	4a06      	ldr	r2, [pc, #24]	; (5dd4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5dbc:	5c52      	ldrb	r2, [r2, r1]
    5dbe:	e006      	b.n	5dce <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5dc0:	29ff      	cmp	r1, #255	; 0xff
    5dc2:	d004      	beq.n	5dce <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5dc4:	f240 31d5 	movw	r1, #981	; 0x3d5
    5dc8:	202a      	movs	r0, #42	; 0x2a
    5dca:	f7fd ff55 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5dce:	7042      	strb	r2, [r0, #1]
    5dd0:	bd10      	pop	{r4, pc}
    5dd2:	0000      	.short	0x0000
    5dd4:	0000f6c8 	.word	0x0000f6c8

00005dd8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    5dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ddc:	ea5f 0900 	movs.w	r9, r0
    5de0:	d006      	beq.n	5df0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    5de2:	4d21      	ldr	r5, [pc, #132]	; (5e68 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    5de4:	f105 0010 	add.w	r0, r5, #16
    5de8:	7b69      	ldrb	r1, [r5, #13]
    5dea:	4682      	mov	sl, r0
    5dec:	b119      	cbz	r1, 5df6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    5dee:	e00b      	b.n	5e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5df0:	f240 3193 	movw	r1, #915	; 0x393
    5df4:	e005      	b.n	5e02 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    5df6:	2100      	movs	r1, #0
    5df8:	f007 fb9b 	bl	d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5dfc:	b120      	cbz	r0, 5e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    5dfe:	f240 3196 	movw	r1, #918	; 0x396
    5e02:	202b      	movs	r0, #43	; 0x2b
    5e04:	f7fd ff38 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e08:	8a2e      	ldrh	r6, [r5, #16]
    5e0a:	2000      	movs	r0, #0
    5e0c:	f7fe f92c 	bl	4068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    5e10:	4f16      	ldr	r7, [pc, #88]	; (5e6c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    5e12:	f8df 805c 	ldr.w	r8, [pc, #92]	; 5e70 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    5e16:	4604      	mov	r4, r0
    5e18:	6838      	ldr	r0, [r7, #0]
    5e1a:	b158      	cbz	r0, 5e34 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5e1c:	8a28      	ldrh	r0, [r5, #16]
    5e1e:	42a0      	cmp	r0, r4
    5e20:	d308      	bcc.n	5e34 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    5e22:	1b00      	subs	r0, r0, r4
    5e24:	b2c0      	uxtb	r0, r0
    5e26:	2101      	movs	r1, #1
    5e28:	f006 fd73 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5e2c:	b148      	cbz	r0, 5e42 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5e2e:	4649      	mov	r1, r9
    5e30:	683a      	ldr	r2, [r7, #0]
    5e32:	e004      	b.n	5e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x66>
    5e34:	f8d8 2000 	ldr.w	r2, [r8]
    5e38:	b11a      	cbz	r2, 5e42 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6a>
    5e3a:	8a28      	ldrh	r0, [r5, #16]
    5e3c:	4649      	mov	r1, r9
    5e3e:	4790      	blx	r2
    5e40:	b968      	cbnz	r0, 5e5e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    5e42:	2100      	movs	r1, #0
    5e44:	4650      	mov	r0, sl
    5e46:	f007 fb74 	bl	d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>
    5e4a:	b910      	cbnz	r0, 5e52 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    5e4c:	8a28      	ldrh	r0, [r5, #16]
    5e4e:	42b0      	cmp	r0, r6
    5e50:	d1e2      	bne.n	5e18 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    5e52:	4808      	ldr	r0, [pc, #32]	; (5e74 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    5e54:	6801      	ldr	r1, [r0, #0]
    5e56:	b129      	cbz	r1, 5e64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5e58:	4648      	mov	r0, r9
    5e5a:	4788      	blx	r1
    5e5c:	b110      	cbz	r0, 5e64 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    5e5e:	2001      	movs	r0, #1
    5e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5e64:	2000      	movs	r0, #0
    5e66:	e7fb      	b.n	5e60 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    5e68:	20000de8 	.word	0x20000de8
    5e6c:	20000228 	.word	0x20000228
    5e70:	2000022c 	.word	0x2000022c
    5e74:	20000234 	.word	0x20000234

00005e78 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI>:
    5e78:	b570      	push	{r4, r5, r6, lr}
    5e7a:	0005      	movs	r5, r0
    5e7c:	460c      	mov	r4, r1
    5e7e:	d02e      	beq.n	5ede <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e80:	4818      	ldr	r0, [pc, #96]	; (5ee4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x6c>)
    5e82:	6802      	ldr	r2, [r0, #0]
    5e84:	b35a      	cbz	r2, 5ede <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e86:	4628      	mov	r0, r5
    5e88:	4790      	blx	r2
    5e8a:	b340      	cbz	r0, 5ede <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x66>
    5e8c:	7820      	ldrb	r0, [r4, #0]
    5e8e:	2811      	cmp	r0, #17
    5e90:	d002      	beq.n	5e98 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x20>
    5e92:	2814      	cmp	r0, #20
    5e94:	d003      	beq.n	5e9e <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x26>
    5e96:	e020      	b.n	5eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e98:	7920      	ldrb	r0, [r4, #4]
    5e9a:	b1f0      	cbz	r0, 5eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5e9c:	e00a      	b.n	5eb4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5e9e:	7920      	ldrb	r0, [r4, #4]
    5ea0:	b120      	cbz	r0, 5eac <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x34>
    5ea2:	4628      	mov	r0, r5
    5ea4:	f007 fd4e 	bl	d944 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    5ea8:	b120      	cbz	r0, 5eb4 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x3c>
    5eaa:	e016      	b.n	5eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5eac:	490e      	ldr	r1, [pc, #56]	; (5ee8 <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x70>)
    5eae:	2000      	movs	r0, #0
    5eb0:	7348      	strb	r0, [r1, #13]
    5eb2:	e012      	b.n	5eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5eb4:	88e4      	ldrh	r4, [r4, #6]
    5eb6:	2100      	movs	r1, #0
    5eb8:	4620      	mov	r0, r4
    5eba:	f006 fd2a 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    5ebe:	b160      	cbz	r0, 5eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ec0:	8800      	ldrh	r0, [r0, #0]
    5ec2:	f006 fea9 	bl	cc18 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5ec6:	2100      	movs	r1, #0
    5ec8:	4620      	mov	r0, r4
    5eca:	f7fe f96b 	bl	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5ece:	b120      	cbz	r0, 5eda <sym_ADAOR2PXB5YPMJS5MYFIWVIQAXMEM4PRXEVX3JI+0x62>
    5ed0:	f44f 719a 	mov.w	r1, #308	; 0x134
    5ed4:	202b      	movs	r0, #43	; 0x2b
    5ed6:	f7fd fecf 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eda:	2001      	movs	r0, #1
    5edc:	bd70      	pop	{r4, r5, r6, pc}
    5ede:	2000      	movs	r0, #0
    5ee0:	bd70      	pop	{r4, r5, r6, pc}
    5ee2:	0000      	.short	0x0000
    5ee4:	20000224 	.word	0x20000224
    5ee8:	20000de8 	.word	0x20000de8

00005eec <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    5eec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ef0:	b087      	sub	sp, #28
    5ef2:	460c      	mov	r4, r1
    5ef4:	a902      	add	r1, sp, #8
    5ef6:	9807      	ldr	r0, [sp, #28]
    5ef8:	f006 ff4e 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5efc:	2800      	cmp	r0, #0
    5efe:	d17d      	bne.n	5ffc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5f00:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6024 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    5f04:	f04f 0a01 	mov.w	sl, #1
    5f08:	4680      	mov	r8, r0
    5f0a:	9803      	ldr	r0, [sp, #12]
    5f0c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    5f10:	2800      	cmp	r0, #0
    5f12:	d00c      	beq.n	5f2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    5f14:	f8d9 2000 	ldr.w	r2, [r9]
    5f18:	b162      	cbz	r2, 5f34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5f1a:	4621      	mov	r1, r4
    5f1c:	9807      	ldr	r0, [sp, #28]
    5f1e:	4790      	blx	r2
    5f20:	b140      	cbz	r0, 5f34 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    5f22:	4620      	mov	r0, r4
    5f24:	f000 f91a 	bl	615c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe0>
    5f28:	2800      	cmp	r0, #0
    5f2a:	d1ee      	bne.n	5f0a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    5f2c:	2001      	movs	r0, #1
    5f2e:	b009      	add	sp, #36	; 0x24
    5f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5f34:	9d03      	ldr	r5, [sp, #12]
    5f36:	f895 0134 	ldrb.w	r0, [r5, #308]	; 0x134
    5f3a:	3570      	adds	r5, #112	; 0x70
    5f3c:	b950      	cbnz	r0, 5f54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5f3e:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    5f42:	f88d 0004 	strb.w	r0, [sp, #4]
    5f46:	9801      	ldr	r0, [sp, #4]
    5f48:	9001      	str	r0, [sp, #4]
    5f4a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    5f4e:	b108      	cbz	r0, 5f54 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    5f50:	2001      	movs	r0, #1
    5f52:	e000      	b.n	5f56 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    5f54:	2000      	movs	r0, #0
    5f56:	4683      	mov	fp, r0
    5f58:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
    5f5c:	b1c0      	cbz	r0, 5f90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5f5e:	f895 0046 	ldrb.w	r0, [r5, #70]	; 0x46
    5f62:	0780      	lsls	r0, r0, #30
    5f64:	d514      	bpl.n	5f90 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    5f66:	f884 8001 	strb.w	r8, [r4, #1]
    5f6a:	f884 a000 	strb.w	sl, [r4]
    5f6e:	f884 8004 	strb.w	r8, [r4, #4]
    5f72:	9907      	ldr	r1, [sp, #28]
    5f74:	f8a4 1005 	strh.w	r1, [r4, #5]
    5f78:	f895 1047 	ldrb.w	r1, [r5, #71]	; 0x47
    5f7c:	71e1      	strb	r1, [r4, #7]
    5f7e:	f8b5 1048 	ldrh.w	r1, [r5, #72]	; 0x48
    5f82:	8121      	strh	r1, [r4, #8]
    5f84:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    5f88:	8161      	strh	r1, [r4, #10]
    5f8a:	f885 8045 	strb.w	r8, [r5, #69]	; 0x45
    5f8e:	e7c8      	b.n	5f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5f90:	9807      	ldr	r0, [sp, #28]
    5f92:	f7fe faaf 	bl	44f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f96:	0007      	movs	r7, r0
    5f98:	d00d      	beq.n	5fb6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    5f9a:	f006 fad3 	bl	c544 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    5f9e:	0006      	movs	r6, r0
    5fa0:	d015      	beq.n	5fce <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    5fa2:	f884 8001 	strb.w	r8, [r4, #1]
    5fa6:	200d      	movs	r0, #13
    5fa8:	7020      	strb	r0, [r4, #0]
    5faa:	9807      	ldr	r0, [sp, #28]
    5fac:	80e0      	strh	r0, [r4, #6]
    5fae:	8126      	strh	r6, [r4, #8]
    5fb0:	f884 a004 	strb.w	sl, [r4, #4]
    5fb4:	e007      	b.n	5fc6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    5fb6:	f240 213a 	movw	r1, #570	; 0x23a
    5fba:	e02d      	b.n	6018 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    5fbc:	2100      	movs	r1, #0
    5fbe:	4638      	mov	r0, r7
    5fc0:	460a      	mov	r2, r1
    5fc2:	f006 fbd5 	bl	c770 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    5fc6:	1e76      	subs	r6, r6, #1
    5fc8:	b2b6      	uxth	r6, r6
    5fca:	d2f7      	bcs.n	5fbc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    5fcc:	e7a9      	b.n	5f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    5fce:	9807      	ldr	r0, [sp, #28]
    5fd0:	f7fe fa7a 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5fd4:	b1f0      	cbz	r0, 6014 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    5fd6:	f1bb 0f00 	cmp.w	fp, #0
    5fda:	d020      	beq.n	601e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5fdc:	f006 f9e7 	bl	c3ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    5fe0:	b160      	cbz	r0, 5ffc <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    5fe2:	9807      	ldr	r0, [sp, #28]
    5fe4:	f006 fe18 	bl	cc18 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    5fe8:	2100      	movs	r1, #0
    5fea:	9807      	ldr	r0, [sp, #28]
    5fec:	f7fe f8da 	bl	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    5ff0:	f884 8001 	strb.w	r8, [r4, #1]
    5ff4:	210a      	movs	r1, #10
    5ff6:	4640      	mov	r0, r8
    5ff8:	7021      	strb	r1, [r4, #0]
    5ffa:	e000      	b.n	5ffe <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    5ffc:	e00f      	b.n	601e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    5ffe:	f884 8004 	strb.w	r8, [r4, #4]
    6002:	9907      	ldr	r1, [sp, #28]
    6004:	f8a4 1005 	strh.w	r1, [r4, #5]
    6008:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    600c:	71e1      	strb	r1, [r4, #7]
    600e:	3524      	adds	r5, #36	; 0x24
    6010:	7028      	strb	r0, [r5, #0]
    6012:	e786      	b.n	5f22 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6014:	f44f 7116 	mov.w	r1, #600	; 0x258
    6018:	202b      	movs	r0, #43	; 0x2b
    601a:	f7fd fe2d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    601e:	2000      	movs	r0, #0
    6020:	e785      	b.n	5f2e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6022:	0000      	.short	0x0000
    6024:	20000230 	.word	0x20000230

00006028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    602c:	4c12      	ldr	r4, [pc, #72]	; (6078 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    602e:	4607      	mov	r7, r0
    6030:	460e      	mov	r6, r1
    6032:	7de0      	ldrb	r0, [r4, #23]
    6034:	b110      	cbz	r0, 603c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6036:	8b20      	ldrh	r0, [r4, #24]
    6038:	2800      	cmp	r0, #0
    603a:	d012      	beq.n	6062 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    603c:	480e      	ldr	r0, [pc, #56]	; (6078 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    603e:	300e      	adds	r0, #14
    6040:	4680      	mov	r8, r0
    6042:	f007 fa20 	bl	d486 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6046:	b9a8      	cbnz	r0, 6074 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6048:	89e5      	ldrh	r5, [r4, #14]
    604a:	89e0      	ldrh	r0, [r4, #14]
    604c:	4632      	mov	r2, r6
    604e:	4639      	mov	r1, r7
    6050:	f007 fa28 	bl	d4a4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x18>
    6054:	b138      	cbz	r0, 6066 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6056:	7de0      	ldrb	r0, [r4, #23]
    6058:	b110      	cbz	r0, 6060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    605a:	8b20      	ldrh	r0, [r4, #24]
    605c:	1e40      	subs	r0, r0, #1
    605e:	8320      	strh	r0, [r4, #24]
    6060:	2001      	movs	r0, #1
    6062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6066:	4640      	mov	r0, r8
    6068:	f007 fa0d 	bl	d486 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    606c:	b910      	cbnz	r0, 6074 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    606e:	89e0      	ldrh	r0, [r4, #14]
    6070:	42a8      	cmp	r0, r5
    6072:	d1ea      	bne.n	604a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6074:	2000      	movs	r0, #0
    6076:	e7f4      	b.n	6062 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6078:	20000de8 	.word	0x20000de8

0000607c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    607c:	b510      	push	{r4, lr}
    607e:	7901      	ldrb	r1, [r0, #4]
    6080:	b119      	cbz	r1, 608a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    6082:	2901      	cmp	r1, #1
    6084:	d006      	beq.n	6094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    6086:	2000      	movs	r0, #0
    6088:	bd10      	pop	{r4, pc}
    608a:	8842      	ldrh	r2, [r0, #2]
    608c:	6883      	ldr	r3, [r0, #8]
    608e:	8800      	ldrh	r0, [r0, #0]
    6090:	2102      	movs	r1, #2
    6092:	e003      	b.n	609c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    6094:	8842      	ldrh	r2, [r0, #2]
    6096:	6883      	ldr	r3, [r0, #8]
    6098:	8800      	ldrh	r0, [r0, #0]
    609a:	2101      	movs	r1, #1
    609c:	f000 f808 	bl	60b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    60a0:	b910      	cbnz	r0, 60a8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    60a2:	4902      	ldr	r1, [pc, #8]	; (60ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    60a4:	2001      	movs	r0, #1
    60a6:	7008      	strb	r0, [r1, #0]
    60a8:	2001      	movs	r0, #1
    60aa:	bd10      	pop	{r4, pc}
    60ac:	20000de8 	.word	0x20000de8
    60b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    60b4:	468a      	mov	sl, r1
    60b6:	4699      	mov	r9, r3
    60b8:	4615      	mov	r5, r2
    60ba:	4604      	mov	r4, r0
    60bc:	a901      	add	r1, sp, #4
    60be:	f006 fe6b 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    60c2:	bbe0      	cbnz	r0, 613e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc2>
    60c4:	9f02      	ldr	r7, [sp, #8]
    60c6:	f04f 0800 	mov.w	r8, #0
    60ca:	3770      	adds	r7, #112	; 0x70
    60cc:	b18d      	cbz	r5, 60f2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x76>
    60ce:	4620      	mov	r0, r4
    60d0:	f7fe fa10 	bl	44f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    60d4:	0004      	movs	r4, r0
    60d6:	d00f      	beq.n	60f8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7c>
    60d8:	4629      	mov	r1, r5
    60da:	f006 fa72 	bl	c5c2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    60de:	0006      	movs	r6, r0
    60e0:	d003      	beq.n	60ea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    60e2:	481d      	ldr	r0, [pc, #116]	; (6158 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xdc>)
    60e4:	8880      	ldrh	r0, [r0, #4]
    60e6:	42a8      	cmp	r0, r5
    60e8:	d208      	bcs.n	60fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x80>
    60ea:	2000      	movs	r0, #0
    60ec:	b004      	add	sp, #16
    60ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60f2:	2001      	movs	r0, #1
    60f4:	7538      	strb	r0, [r7, #20]
    60f6:	e029      	b.n	614c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    60f8:	2189      	movs	r1, #137	; 0x89
    60fa:	e02a      	b.n	6152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd6>
    60fc:	4620      	mov	r0, r4
    60fe:	4631      	mov	r1, r6
    6100:	aa03      	add	r2, sp, #12
    6102:	f006 fa57 	bl	c5b4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    6106:	9803      	ldr	r0, [sp, #12]
    6108:	f8a0 8000 	strh.w	r8, [r0]
    610c:	f880 8002 	strb.w	r8, [r0, #2]
    6110:	7d39      	ldrb	r1, [r7, #20]
    6112:	b109      	cbz	r1, 6118 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x9c>
    6114:	f04f 0a02 	mov.w	sl, #2
    6118:	4651      	mov	r1, sl
    611a:	f007 f935 	bl	d388 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    611e:	4631      	mov	r1, r6
    6120:	2603      	movs	r6, #3
    6122:	4620      	mov	r0, r4
    6124:	464a      	mov	r2, r9
    6126:	462b      	mov	r3, r5
    6128:	9600      	str	r6, [sp, #0]
    612a:	f006 f929 	bl	c380 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    612e:	4620      	mov	r0, r4
    6130:	4629      	mov	r1, r5
    6132:	f006 f9e3 	bl	c4fc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    6136:	b158      	cbz	r0, 6150 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd4>
    6138:	4644      	mov	r4, r8
    613a:	a801      	add	r0, sp, #4
    613c:	e000      	b.n	6140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    613e:	e005      	b.n	614c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    6140:	f007 f9a4 	bl	d48c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    6144:	9802      	ldr	r0, [sp, #8]
    6146:	f8a0 40fa 	strh.w	r4, [r0, #250]	; 0xfa
    614a:	753c      	strb	r4, [r7, #20]
    614c:	2001      	movs	r0, #1
    614e:	e7cd      	b.n	60ec <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x70>
    6150:	219f      	movs	r1, #159	; 0x9f
    6152:	202b      	movs	r0, #43	; 0x2b
    6154:	f7fd fd90 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6158:	20000de8 	.word	0x20000de8
    615c:	b510      	push	{r4, lr}
    615e:	492c      	ldr	r1, [pc, #176]	; (6210 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x194>)
    6160:	b086      	sub	sp, #24
    6162:	7d8a      	ldrb	r2, [r1, #22]
    6164:	7801      	ldrb	r1, [r0, #0]
    6166:	07d3      	lsls	r3, r2, #31
    6168:	d101      	bne.n	616e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf2>
    616a:	2919      	cmp	r1, #25
    616c:	d004      	beq.n	6178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfc>
    616e:	2918      	cmp	r1, #24
    6170:	d01e      	beq.n	61b0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x134>
    6172:	2912      	cmp	r1, #18
    6174:	d045      	beq.n	6202 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x186>
    6176:	e049      	b.n	620c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6178:	8880      	ldrh	r0, [r0, #4]
    617a:	f8ad 0000 	strh.w	r0, [sp]
    617e:	a902      	add	r1, sp, #8
    6180:	f006 fe0a 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6184:	b108      	cbz	r0, 618a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x10e>
    6186:	2158      	movs	r1, #88	; 0x58
    6188:	e035      	b.n	61f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    618a:	9803      	ldr	r0, [sp, #12]
    618c:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    6190:	f88d 1002 	strb.w	r1, [sp, #2]
    6194:	7841      	ldrb	r1, [r0, #1]
    6196:	f88d 1003 	strb.w	r1, [sp, #3]
    619a:	8840      	ldrh	r0, [r0, #2]
    619c:	f8ad 0004 	strh.w	r0, [sp, #4]
    61a0:	2102      	movs	r1, #2
    61a2:	4668      	mov	r0, sp
    61a4:	f008 fe64 	bl	ee70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    61a8:	b340      	cbz	r0, 61fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    61aa:	f240 114d 	movw	r1, #333	; 0x14d
    61ae:	e022      	b.n	61f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    61b0:	0791      	lsls	r1, r2, #30
    61b2:	d42b      	bmi.n	620c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    61b4:	8884      	ldrh	r4, [r0, #4]
    61b6:	a903      	add	r1, sp, #12
    61b8:	4620      	mov	r0, r4
    61ba:	f008 fc78 	bl	eaae <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    61be:	b110      	cbz	r0, 61c6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14a>
    61c0:	f44f 71aa 	mov.w	r1, #340	; 0x154
    61c4:	e017      	b.n	61f6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17a>
    61c6:	f8ad 4000 	strh.w	r4, [sp]
    61ca:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    61ce:	f8ad 0002 	strh.w	r0, [sp, #2]
    61d2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    61d6:	f8ad 0004 	strh.w	r0, [sp, #4]
    61da:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    61de:	f8ad 0006 	strh.w	r0, [sp, #6]
    61e2:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    61e6:	f8ad 0008 	strh.w	r0, [sp, #8]
    61ea:	4668      	mov	r0, sp
    61ec:	f008 fcdd 	bl	ebaa <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    61f0:	b120      	cbz	r0, 61fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    61f2:	f240 115d 	movw	r1, #349	; 0x15d
    61f6:	202b      	movs	r0, #43	; 0x2b
    61f8:	f7fd fd3e 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    61fc:	2001      	movs	r0, #1
    61fe:	b006      	add	sp, #24
    6200:	bd10      	pop	{r4, pc}
    6202:	0751      	lsls	r1, r2, #29
    6204:	d402      	bmi.n	620c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x190>
    6206:	7b80      	ldrb	r0, [r0, #14]
    6208:	07c0      	lsls	r0, r0, #31
    620a:	d0f7      	beq.n	61fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x180>
    620c:	2000      	movs	r0, #0
    620e:	e7f6      	b.n	61fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x182>
    6210:	20000de8 	.word	0x20000de8

00006214 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    6214:	b5f0      	push	{r4, r5, r6, r7, lr}
    6216:	f06f 021f 	mvn.w	r2, #31
    621a:	0c01      	lsrs	r1, r0, #16
    621c:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    6220:	251f      	movs	r5, #31
    6222:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    6226:	3854      	subs	r0, #84	; 0x54
    6228:	d00d      	beq.n	6246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    622a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    622e:	3855      	subs	r0, #85	; 0x55
    6230:	d009      	beq.n	6246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6232:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6236:	38aa      	subs	r0, #170	; 0xaa
    6238:	d005      	beq.n	6246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    623a:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    623e:	38aa      	subs	r0, #170	; 0xaa
    6240:	d001      	beq.n	6246 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6242:	2001      	movs	r0, #1
    6244:	e000      	b.n	6248 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6246:	2000      	movs	r0, #0
    6248:	2200      	movs	r2, #0
    624a:	4613      	mov	r3, r2
    624c:	ea4f 0402 	mov.w	r4, r2
    6250:	ea82 0701 	eor.w	r7, r2, r1
    6254:	43ff      	mvns	r7, r7
    6256:	431f      	orrs	r7, r3
    6258:	1c7f      	adds	r7, r7, #1
    625a:	d00f      	beq.n	627c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    625c:	f006 0701 	and.w	r7, r6, #1
    6260:	0852      	lsrs	r2, r2, #1
    6262:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6266:	f005 0701 	and.w	r7, r5, #1
    626a:	085b      	lsrs	r3, r3, #1
    626c:	0876      	lsrs	r6, r6, #1
    626e:	086d      	lsrs	r5, r5, #1
    6270:	1c64      	adds	r4, r4, #1
    6272:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6276:	2c16      	cmp	r4, #22
    6278:	d3ea      	bcc.n	6250 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    627a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    627c:	2000      	movs	r0, #0
    627e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006280 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    6280:	b570      	push	{r4, r5, r6, lr}
    6282:	4604      	mov	r4, r0
    6284:	7c00      	ldrb	r0, [r0, #16]
    6286:	b300      	cbz	r0, 62ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    6288:	2802      	cmp	r0, #2
    628a:	d01e      	beq.n	62ca <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    628c:	f05f 0001 	movs.w	r0, #1
    6290:	f104 0149 	add.w	r1, r4, #73	; 0x49
    6294:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    6298:	460d      	mov	r5, r1
    629a:	b1c0      	cbz	r0, 62ce <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    629c:	7de0      	ldrb	r0, [r4, #23]
    629e:	b1f0      	cbz	r0, 62de <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    62a0:	f8d4 0011 	ldr.w	r0, [r4, #17]
    62a4:	f8c4 0049 	str.w	r0, [r4, #73]	; 0x49
    62a8:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    62ac:	f8a4 004d 	strh.w	r0, [r4, #77]	; 0x4d
    62b0:	7c20      	ldrb	r0, [r4, #16]
    62b2:	f007 faaa 	bl	d80a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    62b6:	7620      	strb	r0, [r4, #24]
    62b8:	2008      	movs	r0, #8
    62ba:	7660      	strb	r0, [r4, #25]
    62bc:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    62c0:	4629      	mov	r1, r5
    62c2:	f007 fa8e 	bl	d7e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    62c6:	b9a8      	cbnz	r0, 62f4 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    62c8:	e00e      	b.n	62e8 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    62ca:	2000      	movs	r0, #0
    62cc:	e7e0      	b.n	6290 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    62ce:	2000      	movs	r0, #0
    62d0:	f7fe fbd2 	bl	4a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    62d4:	2800      	cmp	r0, #0
    62d6:	d1eb      	bne.n	62b0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    62d8:	f240 41aa 	movw	r1, #1194	; 0x4aa
    62dc:	e001      	b.n	62e2 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    62de:	f240 41ae 	movw	r1, #1198	; 0x4ae
    62e2:	202d      	movs	r0, #45	; 0x2d
    62e4:	f7fd fcc8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62e8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    62ec:	4629      	mov	r1, r5
    62ee:	f007 fa81 	bl	d7f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    62f2:	b100      	cbz	r0, 62f6 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    62f4:	2001      	movs	r0, #1
    62f6:	76a0      	strb	r0, [r4, #26]
    62f8:	7e20      	ldrb	r0, [r4, #24]
    62fa:	b910      	cbnz	r0, 6302 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x82>
    62fc:	78a0      	ldrb	r0, [r4, #2]
    62fe:	0740      	lsls	r0, r0, #29
    6300:	d506      	bpl.n	6310 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x90>
    6302:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    6306:	f104 0150 	add.w	r1, r4, #80	; 0x50
    630a:	f006 fd02 	bl	cd12 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    630e:	7660      	strb	r0, [r4, #25]
    6310:	2500      	movs	r5, #0
    6312:	6425      	str	r5, [r4, #64]	; 0x40
    6314:	f005 f991 	bl	b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    6318:	6460      	str	r0, [r4, #68]	; 0x44
    631a:	2100      	movs	r1, #0
    631c:	4620      	mov	r0, r4
    631e:	f007 fb93 	bl	da48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    6322:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
    6326:	78a0      	ldrb	r0, [r4, #2]
    6328:	0740      	lsls	r0, r0, #29
    632a:	d508      	bpl.n	633e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    632c:	7e20      	ldrb	r0, [r4, #24]
    632e:	2800      	cmp	r0, #0
    6330:	d005      	beq.n	633e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbe>
    6332:	4620      	mov	r0, r4
    6334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6338:	2100      	movs	r1, #0
    633a:	f000 bdff 	b.w	6f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    633e:	bd70      	pop	{r4, r5, r6, pc}

00006340 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA>:
    6340:	b508      	push	{r3, lr}
    6342:	f890 2094 	ldrb.w	r2, [r0, #148]	; 0x94
    6346:	f88d 2000 	strb.w	r2, [sp]
    634a:	9a00      	ldr	r2, [sp, #0]
    634c:	9200      	str	r2, [sp, #0]
    634e:	f89d 3000 	ldrb.w	r3, [sp]
    6352:	2200      	movs	r2, #0
    6354:	b163      	cbz	r3, 6370 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x30>
    6356:	704a      	strb	r2, [r1, #1]
    6358:	2317      	movs	r3, #23
    635a:	700b      	strb	r3, [r1, #0]
    635c:	f850 3f95 	ldr.w	r3, [r0, #149]!
    6360:	604b      	str	r3, [r1, #4]
    6362:	6843      	ldr	r3, [r0, #4]
    6364:	608b      	str	r3, [r1, #8]
    6366:	7a03      	ldrb	r3, [r0, #8]
    6368:	730b      	strb	r3, [r1, #12]
    636a:	f800 2c01 	strb.w	r2, [r0, #-1]
    636e:	e03b      	b.n	63e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6370:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
    6374:	f88d 3000 	strb.w	r3, [sp]
    6378:	9b00      	ldr	r3, [sp, #0]
    637a:	9300      	str	r3, [sp, #0]
    637c:	f89d 3000 	ldrb.w	r3, [sp]
    6380:	b143      	cbz	r3, 6394 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x54>
    6382:	704a      	strb	r2, [r1, #1]
    6384:	2305      	movs	r3, #5
    6386:	700b      	strb	r3, [r1, #0]
    6388:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    638c:	604b      	str	r3, [r1, #4]
    638e:	f880 208e 	strb.w	r2, [r0, #142]	; 0x8e
    6392:	e029      	b.n	63e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    6394:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    6398:	f88d 3000 	strb.w	r3, [sp]
    639c:	9b00      	ldr	r3, [sp, #0]
    639e:	9300      	str	r3, [sp, #0]
    63a0:	f89d 3000 	ldrb.w	r3, [sp]
    63a4:	b11b      	cbz	r3, 63ae <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x6e>
    63a6:	bf00      	nop
    63a8:	f007 fb25 	bl	d9f6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x3c>
    63ac:	e01c      	b.n	63e8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xa8>
    63ae:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    63b2:	f88d 3000 	strb.w	r3, [sp]
    63b6:	9b00      	ldr	r3, [sp, #0]
    63b8:	9300      	str	r3, [sp, #0]
    63ba:	f89d 3000 	ldrb.w	r3, [sp]
    63be:	b1ab      	cbz	r3, 63ec <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0xac>
    63c0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
    63c4:	f88d 3000 	strb.w	r3, [sp]
    63c8:	9b00      	ldr	r3, [sp, #0]
    63ca:	9300      	str	r3, [sp, #0]
    63cc:	f89d 3000 	ldrb.w	r3, [sp]
    63d0:	2b00      	cmp	r3, #0
    63d2:	d1e9      	bne.n	63a8 <sym_J4NWMRMCG7RYO342PTMJRJ2HQEKT7SCETMBVQDA+0x68>
    63d4:	704a      	strb	r2, [r1, #1]
    63d6:	2314      	movs	r3, #20
    63d8:	700b      	strb	r3, [r1, #0]
    63da:	f850 3f88 	ldr.w	r3, [r0, #136]!
    63de:	604b      	str	r3, [r1, #4]
    63e0:	8883      	ldrh	r3, [r0, #4]
    63e2:	810b      	strh	r3, [r1, #8]
    63e4:	f800 2c02 	strb.w	r2, [r0, #-2]
    63e8:	2001      	movs	r0, #1
    63ea:	bd08      	pop	{r3, pc}
    63ec:	2000      	movs	r0, #0
    63ee:	bd08      	pop	{r3, pc}

000063f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    63f0:	b530      	push	{r4, r5, lr}
    63f2:	460c      	mov	r4, r1
    63f4:	b08d      	sub	sp, #52	; 0x34
    63f6:	4605      	mov	r5, r0
    63f8:	4601      	mov	r1, r0
    63fa:	2220      	movs	r2, #32
    63fc:	a802      	add	r0, sp, #8
    63fe:	f005 fa91 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6402:	a80a      	add	r0, sp, #40	; 0x28
    6404:	f007 fbcd 	bl	dba2 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    6408:	7aa0      	ldrb	r0, [r4, #10]
    640a:	f88d 0018 	strb.w	r0, [sp, #24]
    640e:	7820      	ldrb	r0, [r4, #0]
    6410:	f88d 0008 	strb.w	r0, [sp, #8]
    6414:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    6418:	f8ad 0000 	strh.w	r0, [sp]
    641c:	f89d 0000 	ldrb.w	r0, [sp]
    6420:	f000 0101 	and.w	r1, r0, #1
    6424:	f3c0 0240 	ubfx	r2, r0, #1, #1
    6428:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    642c:	f3c0 0280 	ubfx	r2, r0, #2, #1
    6430:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    6434:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    6438:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    643c:	f3c0 1200 	ubfx	r2, r0, #4, #1
    6440:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    6444:	f3c0 1240 	ubfx	r2, r0, #5, #1
    6448:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    644c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6450:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    6454:	f8ad 000a 	strh.w	r0, [sp, #10]
    6458:	7d20      	ldrb	r0, [r4, #20]
    645a:	2801      	cmp	r0, #1
    645c:	d006      	beq.n	646c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    645e:	2802      	cmp	r0, #2
    6460:	d004      	beq.n	646c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    6462:	f240 2175 	movw	r1, #629	; 0x275
    6466:	2006      	movs	r0, #6
    6468:	f7fd fc06 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    646c:	f88d 000c 	strb.w	r0, [sp, #12]
    6470:	7a61      	ldrb	r1, [r4, #9]
    6472:	a80a      	add	r0, sp, #40	; 0x28
    6474:	f007 fb7c 	bl	db70 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    6478:	7d20      	ldrb	r0, [r4, #20]
    647a:	2101      	movs	r1, #1
    647c:	2802      	cmp	r0, #2
    647e:	d102      	bne.n	6486 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    6480:	7d60      	ldrb	r0, [r4, #21]
    6482:	1c40      	adds	r0, r0, #1
    6484:	b2c1      	uxtb	r1, r0
    6486:	7ea0      	ldrb	r0, [r4, #26]
    6488:	1c40      	adds	r0, r0, #1
    648a:	b2c2      	uxtb	r2, r0
    648c:	a80a      	add	r0, sp, #40	; 0x28
    648e:	f007 fb36 	bl	dafe <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    6492:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    6496:	0700      	lsls	r0, r0, #28
    6498:	d501      	bpl.n	649e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    649a:	2000      	movs	r0, #0
    649c:	e020      	b.n	64e0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    649e:	a80a      	add	r0, sp, #40	; 0x28
    64a0:	f007 fb3f 	bl	db22 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    64a4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    64a8:	2228      	movs	r2, #40	; 0x28
    64aa:	f000 fded 	bl	7088 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    64ae:	f240 2171 	movw	r1, #625	; 0x271
    64b2:	f200 20d5 	addw	r0, r0, #725	; 0x2d5
    64b6:	fbb0 f0f1 	udiv	r0, r0, r1
    64ba:	4348      	muls	r0, r1
    64bc:	f8d4 1002 	ldr.w	r1, [r4, #2]
    64c0:	f240 2371 	movw	r3, #625	; 0x271
    64c4:	0a0a      	lsrs	r2, r1, #8
    64c6:	f240 2171 	movw	r1, #625	; 0x271
    64ca:	434a      	muls	r2, r1
    64cc:	f8d4 1005 	ldr.w	r1, [r4, #5]
    64d0:	0a09      	lsrs	r1, r1, #8
    64d2:	4359      	muls	r1, r3
    64d4:	4290      	cmp	r0, r2
    64d6:	d801      	bhi.n	64dc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    64d8:	9204      	str	r2, [sp, #16]
    64da:	e004      	b.n	64e6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    64dc:	4288      	cmp	r0, r1
    64de:	d801      	bhi.n	64e4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    64e0:	9004      	str	r0, [sp, #16]
    64e2:	e000      	b.n	64e6 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    64e4:	9104      	str	r1, [sp, #16]
    64e6:	7ca0      	ldrb	r0, [r4, #18]
    64e8:	f88d 0017 	strb.w	r0, [sp, #23]
    64ec:	7e20      	ldrb	r0, [r4, #24]
    64ee:	2801      	cmp	r0, #1
    64f0:	d000      	beq.n	64f4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    64f2:	2000      	movs	r0, #0
    64f4:	f88d 0014 	strb.w	r0, [sp, #20]
    64f8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    64fa:	f006 fac8 	bl	ca8e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    64fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    6500:	f006 fb68 	bl	cbd4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    6504:	2220      	movs	r2, #32
    6506:	a902      	add	r1, sp, #8
    6508:	4628      	mov	r0, r5
    650a:	f005 fa0b 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    650e:	980a      	ldr	r0, [sp, #40]	; 0x28
    6510:	6228      	str	r0, [r5, #32]
    6512:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    6516:	84a8      	strh	r0, [r5, #36]	; 0x24
    6518:	7ae0      	ldrb	r0, [r4, #11]
    651a:	b168      	cbz	r0, 6538 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    651c:	2802      	cmp	r0, #2
    651e:	d00b      	beq.n	6538 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    6520:	f05f 0001 	movs.w	r0, #1
    6524:	f885 004f 	strb.w	r0, [r5, #79]	; 0x4f
    6528:	68e0      	ldr	r0, [r4, #12]
    652a:	6528      	str	r0, [r5, #80]	; 0x50
    652c:	8a20      	ldrh	r0, [r4, #16]
    652e:	f8a5 0054 	strh.w	r0, [r5, #84]	; 0x54
    6532:	b00d      	add	sp, #52	; 0x34
    6534:	2000      	movs	r0, #0
    6536:	bd30      	pop	{r4, r5, pc}
    6538:	2000      	movs	r0, #0
    653a:	e7f3      	b.n	6524 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

0000653c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    653c:	4a0a      	ldr	r2, [pc, #40]	; (6568 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    653e:	b510      	push	{r4, lr}
    6540:	2100      	movs	r1, #0
    6542:	7011      	strb	r1, [r2, #0]
    6544:	4c09      	ldr	r4, [pc, #36]	; (656c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    6546:	6060      	str	r0, [r4, #4]
    6548:	f000 f822 	bl	6590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    654c:	b110      	cbz	r0, 6554 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    654e:	f240 312a 	movw	r1, #810	; 0x32a
    6552:	e004      	b.n	655e <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    6554:	68a0      	ldr	r0, [r4, #8]
    6556:	2800      	cmp	r0, #0
    6558:	d104      	bne.n	6564 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    655a:	f240 312d 	movw	r1, #813	; 0x32d
    655e:	202d      	movs	r0, #45	; 0x2d
    6560:	f7fd fb8a 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6564:	bd10      	pop	{r4, pc}
    6566:	0000      	.short	0x0000
    6568:	20000e04 	.word	0x20000e04
    656c:	200000ec 	.word	0x200000ec

00006570 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    6570:	4902      	ldr	r1, [pc, #8]	; (657c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    6572:	4801      	ldr	r0, [pc, #4]	; (6578 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    6574:	6088      	str	r0, [r1, #8]
    6576:	4770      	bx	lr
    6578:	00007070 	.word	0x00007070
    657c:	200000ec 	.word	0x200000ec

00006580 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    6580:	4902      	ldr	r1, [pc, #8]	; (658c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    6582:	6008      	str	r0, [r1, #0]
    6584:	6889      	ldr	r1, [r1, #8]
    6586:	6809      	ldr	r1, [r1, #0]
    6588:	4708      	bx	r1
    658a:	0000      	.short	0x0000
    658c:	200000ec 	.word	0x200000ec

00006590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    6590:	4808      	ldr	r0, [pc, #32]	; (65b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    6592:	b510      	push	{r4, lr}
    6594:	7800      	ldrb	r0, [r0, #0]
    6596:	b110      	cbz	r0, 659e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    6598:	240c      	movs	r4, #12
    659a:	4620      	mov	r0, r4
    659c:	bd10      	pop	{r4, pc}
    659e:	2400      	movs	r4, #0
    65a0:	2218      	movs	r2, #24
    65a2:	4621      	mov	r1, r4
    65a4:	4803      	ldr	r0, [pc, #12]	; (65b4 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    65a6:	f005 fa37 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    65aa:	f004 f937 	bl	a81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    65ae:	f003 ff19 	bl	a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    65b2:	e7f2      	b.n	659a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    65b4:	20000e04 	.word	0x20000e04

000065b8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    65b8:	4904      	ldr	r1, [pc, #16]	; (65cc <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    65ba:	b510      	push	{r4, lr}
    65bc:	7809      	ldrb	r1, [r1, #0]
    65be:	2901      	cmp	r1, #1
    65c0:	d101      	bne.n	65c6 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    65c2:	f000 fb83 	bl	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    65c6:	2000      	movs	r0, #0
    65c8:	bd10      	pop	{r4, pc}
    65ca:	0000      	.short	0x0000
    65cc:	20000e04 	.word	0x20000e04

000065d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    65d0:	4902      	ldr	r1, [pc, #8]	; (65dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    65d2:	4801      	ldr	r0, [pc, #4]	; (65d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    65d4:	6008      	str	r0, [r1, #0]
    65d6:	4770      	bx	lr
    65d8:	00006e19 	.word	0x00006e19
    65dc:	200000f8 	.word	0x200000f8
    65e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65e4:	000f      	movs	r7, r1
    65e6:	4604      	mov	r4, r0
    65e8:	d023      	beq.n	6632 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x62>
    65ea:	f104 0020 	add.w	r0, r4, #32
    65ee:	4605      	mov	r5, r0
    65f0:	f007 fac0 	bl	db74 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    65f4:	b9b0      	cbnz	r0, 6624 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x54>
    65f6:	78a0      	ldrb	r0, [r4, #2]
    65f8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    65fc:	b350      	cbz	r0, 6654 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x84>
    65fe:	4628      	mov	r0, r5
    6600:	f007 fa8f 	bl	db22 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6604:	4606      	mov	r6, r0
    6606:	4628      	mov	r0, r5
    6608:	f007 fab4 	bl	db74 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    660c:	1a30      	subs	r0, r6, r0
    660e:	b2c0      	uxtb	r0, r0
    6610:	f007 fb05 	bl	dc1e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    6614:	4601      	mov	r1, r0
    6616:	4835      	ldr	r0, [pc, #212]	; (66ec <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x11c>)
    6618:	6842      	ldr	r2, [r0, #4]
    661a:	4411      	add	r1, r2
    661c:	6041      	str	r1, [r0, #4]
    661e:	4628      	mov	r0, r5
    6620:	f007 fac6 	bl	dbb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6624:	4628      	mov	r0, r5
    6626:	f007 fa88 	bl	db3a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    662a:	4601      	mov	r1, r0
    662c:	4620      	mov	r0, r4
    662e:	f007 fa47 	bl	dac0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6632:	4d2f      	ldr	r5, [pc, #188]	; (66f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x120>)
    6634:	f894 6056 	ldrb.w	r6, [r4, #86]	; 0x56
    6638:	2100      	movs	r1, #0
    663a:	6868      	ldr	r0, [r5, #4]
    663c:	8001      	strh	r1, [r0, #0]
    663e:	f007 fa55 	bl	daec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6642:	8860      	ldrh	r0, [r4, #2]
    6644:	2813      	cmp	r0, #19
    6646:	d013      	beq.n	6670 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xa0>
    6648:	dc09      	bgt.n	665e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8e>
    664a:	2810      	cmp	r0, #16
    664c:	d036      	beq.n	66bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xec>
    664e:	2812      	cmp	r0, #18
    6650:	d109      	bne.n	6666 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x96>
    6652:	e031      	b.n	66b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe8>
    6654:	4620      	mov	r0, r4
    6656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    665a:	f000 bb37 	b.w	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    665e:	2815      	cmp	r0, #21
    6660:	d00f      	beq.n	6682 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6662:	281d      	cmp	r0, #29
    6664:	d00d      	beq.n	6682 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xb2>
    6666:	f240 6171 	movw	r1, #1649	; 0x671
    666a:	202d      	movs	r0, #45	; 0x2d
    666c:	f7fd fb04 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6670:	2100      	movs	r1, #0
    6672:	6868      	ldr	r0, [r5, #4]
    6674:	f006 fec0 	bl	d3f8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6678:	2101      	movs	r1, #1
    667a:	6868      	ldr	r0, [r5, #4]
    667c:	f007 fa36 	bl	daec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6680:	e020      	b.n	66c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    6682:	2101      	movs	r1, #1
    6684:	6868      	ldr	r0, [r5, #4]
    6686:	f006 feb7 	bl	d3f8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    668a:	2101      	movs	r1, #1
    668c:	6868      	ldr	r0, [r5, #4]
    668e:	f007 fa2d 	bl	daec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x132>
    6692:	b136      	cbz	r6, 66a2 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xd2>
    6694:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6698:	6868      	ldr	r0, [r5, #4]
    669a:	f006 fec8 	bl	d42e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    669e:	2101      	movs	r1, #1
    66a0:	e006      	b.n	66b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xe0>
    66a2:	f104 0150 	add.w	r1, r4, #80	; 0x50
    66a6:	6868      	ldr	r0, [r5, #4]
    66a8:	f006 fec1 	bl	d42e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    66ac:	f894 104f 	ldrb.w	r1, [r4, #79]	; 0x4f
    66b0:	6868      	ldr	r0, [r5, #4]
    66b2:	f006 fec2 	bl	d43a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    66b6:	e005      	b.n	66c4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xf4>
    66b8:	2106      	movs	r1, #6
    66ba:	e000      	b.n	66be <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xee>
    66bc:	2102      	movs	r1, #2
    66be:	6868      	ldr	r0, [r5, #4]
    66c0:	f006 fe9a 	bl	d3f8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    66c4:	4620      	mov	r0, r4
    66c6:	f000 fcaf 	bl	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    66ca:	8860      	ldrh	r0, [r4, #2]
    66cc:	281d      	cmp	r0, #29
    66ce:	d006      	beq.n	66de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    66d0:	2815      	cmp	r0, #21
    66d2:	d004      	beq.n	66de <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10e>
    66d4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    66d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    66d8:	6868      	ldr	r0, [r5, #4]
    66da:	f006 fe7d 	bl	d3d8 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>
    66de:	4639      	mov	r1, r7
    66e0:	4620      	mov	r0, r4
    66e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    66e6:	f000 b9e7 	b.w	6ab8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d8>
    66ea:	0000      	.short	0x0000
    66ec:	20000e04 	.word	0x20000e04
    66f0:	200000ec 	.word	0x200000ec
    66f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66f8:	4d2e      	ldr	r5, [pc, #184]	; (67b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e4>)
    66fa:	4607      	mov	r7, r0
    66fc:	7828      	ldrb	r0, [r5, #0]
    66fe:	2802      	cmp	r0, #2
    6700:	d005      	beq.n	670e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6702:	7828      	ldrb	r0, [r5, #0]
    6704:	2803      	cmp	r0, #3
    6706:	d002      	beq.n	670e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x13e>
    6708:	f44f 6150 	mov.w	r1, #3328	; 0xd00
    670c:	e029      	b.n	6762 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x192>
    670e:	4c2a      	ldr	r4, [pc, #168]	; (67b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e8>)
    6710:	6820      	ldr	r0, [r4, #0]
    6712:	7b01      	ldrb	r1, [r0, #12]
    6714:	b109      	cbz	r1, 671a <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14a>
    6716:	f007 f9de 	bl	dad6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    671a:	6860      	ldr	r0, [r4, #4]
    671c:	f04f 0800 	mov.w	r8, #0
    6720:	7802      	ldrb	r2, [r0, #0]
    6722:	f002 060f 	and.w	r6, r2, #15
    6726:	b357      	cbz	r7, 677e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6728:	6821      	ldr	r1, [r4, #0]
    672a:	f101 0349 	add.w	r3, r1, #73	; 0x49
    672e:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
    6732:	ebb1 1fd2 	cmp.w	r1, r2, lsr #7
    6736:	d122      	bne.n	677e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6738:	2206      	movs	r2, #6
    673a:	4619      	mov	r1, r3
    673c:	3009      	adds	r0, #9
    673e:	f005 f8df 	bl	b900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6742:	b9e0      	cbnz	r0, 677e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    6744:	4641      	mov	r1, r8
    6746:	6860      	ldr	r0, [r4, #4]
    6748:	f006 fe36 	bl	d3b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>
    674c:	b1b8      	cbz	r0, 677e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1ae>
    674e:	782a      	ldrb	r2, [r5, #0]
    6750:	6820      	ldr	r0, [r4, #0]
    6752:	4631      	mov	r1, r6
    6754:	2a02      	cmp	r2, #2
    6756:	d007      	beq.n	6768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    6758:	782a      	ldrb	r2, [r5, #0]
    675a:	2a03      	cmp	r2, #3
    675c:	d004      	beq.n	6768 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x198>
    675e:	f640 41d9 	movw	r1, #3289	; 0xcd9
    6762:	202d      	movs	r0, #45	; 0x2d
    6764:	f7fd fa88 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6768:	68a2      	ldr	r2, [r4, #8]
    676a:	782b      	ldrb	r3, [r5, #0]
    676c:	6952      	ldr	r2, [r2, #20]
    676e:	f06f 0607 	mvn.w	r6, #7
    6772:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    6776:	58d2      	ldr	r2, [r2, r3]
    6778:	4790      	blx	r2
    677a:	4606      	mov	r6, r0
    677c:	e000      	b.n	6780 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1b0>
    677e:	2601      	movs	r6, #1
    6780:	7ba8      	ldrb	r0, [r5, #14]
    6782:	b118      	cbz	r0, 678c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1bc>
    6784:	f004 f84a 	bl	a81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6788:	f003 fe2c 	bl	a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    678c:	2e00      	cmp	r6, #0
    678e:	d00f      	beq.n	67b0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1e0>
    6790:	6820      	ldr	r0, [r4, #0]
    6792:	f007 fa5a 	bl	dc4a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6796:	b130      	cbz	r0, 67a6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1d6>
    6798:	f004 f864 	bl	a864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    679c:	68a0      	ldr	r0, [r4, #8]
    679e:	6880      	ldr	r0, [r0, #8]
    67a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67a4:	4700      	bx	r0
    67a6:	6820      	ldr	r0, [r4, #0]
    67a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67ac:	f000 ba8e 	b.w	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    67b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67b4:	20000e04 	.word	0x20000e04
    67b8:	200000ec 	.word	0x200000ec
    67bc:	b510      	push	{r4, lr}
    67be:	2903      	cmp	r1, #3
    67c0:	d002      	beq.n	67c8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1f8>
    67c2:	2905      	cmp	r1, #5
    67c4:	d10a      	bne.n	67dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    67c6:	e002      	b.n	67ce <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1fe>
    67c8:	f000 fb7e 	bl	6ec8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e8>
    67cc:	e003      	b.n	67d6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x206>
    67ce:	4904      	ldr	r1, [pc, #16]	; (67e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x210>)
    67d0:	6809      	ldr	r1, [r1, #0]
    67d2:	b109      	cbz	r1, 67d8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x208>
    67d4:	4788      	blx	r1
    67d6:	b108      	cbz	r0, 67dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x20c>
    67d8:	2000      	movs	r0, #0
    67da:	bd10      	pop	{r4, pc}
    67dc:	2001      	movs	r0, #1
    67de:	bd10      	pop	{r4, pc}
    67e0:	200000f8 	.word	0x200000f8
    67e4:	4a09      	ldr	r2, [pc, #36]	; (680c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x23c>)
    67e6:	0003      	movs	r3, r0
    67e8:	6810      	ldr	r0, [r2, #0]
    67ea:	d001      	beq.n	67f0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x220>
    67ec:	f000 ba6e 	b.w	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    67f0:	2900      	cmp	r1, #0
    67f2:	d009      	beq.n	6808 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x238>
    67f4:	6891      	ldr	r1, [r2, #8]
    67f6:	4a06      	ldr	r2, [pc, #24]	; (6810 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x240>)
    67f8:	6909      	ldr	r1, [r1, #16]
    67fa:	7812      	ldrb	r2, [r2, #0]
    67fc:	f06f 030f 	mvn.w	r3, #15
    6800:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    6804:	5889      	ldr	r1, [r1, r2]
    6806:	4708      	bx	r1
    6808:	4770      	bx	lr
    680a:	0000      	.short	0x0000
    680c:	200000ec 	.word	0x200000ec
    6810:	20000e04 	.word	0x20000e04
    6814:	b570      	push	{r4, r5, r6, lr}
    6816:	4604      	mov	r4, r0
    6818:	8840      	ldrh	r0, [r0, #2]
    681a:	2810      	cmp	r0, #16
    681c:	d019      	beq.n	6852 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x282>
    681e:	4d10      	ldr	r5, [pc, #64]	; (6860 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x290>)
    6820:	7ba8      	ldrb	r0, [r5, #14]
    6822:	b120      	cbz	r0, 682e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x25e>
    6824:	f003 fdfe 	bl	a424 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    6828:	2040      	movs	r0, #64	; 0x40
    682a:	f004 f807 	bl	a83c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    682e:	480d      	ldr	r0, [pc, #52]	; (6864 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x294>)
    6830:	6840      	ldr	r0, [r0, #4]
    6832:	f004 fab1 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6836:	78a0      	ldrb	r0, [r4, #2]
    6838:	0740      	lsls	r0, r0, #29
    683a:	d404      	bmi.n	6846 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x276>
    683c:	2100      	movs	r1, #0
    683e:	7922      	ldrb	r2, [r4, #4]
    6840:	4608      	mov	r0, r1
    6842:	f004 fb33 	bl	aeac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6846:	2000      	movs	r0, #0
    6848:	f004 f948 	bl	aadc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    684c:	2002      	movs	r0, #2
    684e:	7028      	strb	r0, [r5, #0]
    6850:	bd70      	pop	{r4, r5, r6, pc}
    6852:	4620      	mov	r0, r4
    6854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6858:	2101      	movs	r1, #1
    685a:	f7ff bec1 	b.w	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    685e:	0000      	.short	0x0000
    6860:	20000e04 	.word	0x20000e04
    6864:	200000ec 	.word	0x200000ec
    6868:	b510      	push	{r4, lr}
    686a:	4c12      	ldr	r4, [pc, #72]	; (68b4 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e4>)
    686c:	6820      	ldr	r0, [r4, #0]
    686e:	f000 f825 	bl	68bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6872:	6820      	ldr	r0, [r4, #0]
    6874:	f007 f9e9 	bl	dc4a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    6878:	2800      	cmp	r0, #0
    687a:	6820      	ldr	r0, [r4, #0]
    687c:	d00b      	beq.n	6896 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2c6>
    687e:	490e      	ldr	r1, [pc, #56]	; (68b8 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2e8>)
    6880:	780a      	ldrb	r2, [r1, #0]
    6882:	2a02      	cmp	r2, #2
    6884:	d00b      	beq.n	689e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    6886:	780a      	ldrb	r2, [r1, #0]
    6888:	2a03      	cmp	r2, #3
    688a:	d008      	beq.n	689e <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ce>
    688c:	f640 4107 	movw	r1, #3079	; 0xc07
    6890:	202d      	movs	r0, #45	; 0x2d
    6892:	f7fd f9f1 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    689a:	f000 ba17 	b.w	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    689e:	68a2      	ldr	r2, [r4, #8]
    68a0:	7809      	ldrb	r1, [r1, #0]
    68a2:	68d2      	ldr	r2, [r2, #12]
    68a4:	f06f 0307 	mvn.w	r3, #7
    68a8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    68ac:	5851      	ldr	r1, [r2, r1]
    68ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68b2:	4708      	bx	r1
    68b4:	200000ec 	.word	0x200000ec
    68b8:	20000e04 	.word	0x20000e04
    68bc:	b510      	push	{r4, lr}
    68be:	7b01      	ldrb	r1, [r0, #12]
    68c0:	b109      	cbz	r1, 68c6 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2f6>
    68c2:	f007 f908 	bl	dad6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x11c>
    68c6:	4805      	ldr	r0, [pc, #20]	; (68dc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30c>)
    68c8:	7b80      	ldrb	r0, [r0, #14]
    68ca:	2800      	cmp	r0, #0
    68cc:	d005      	beq.n	68da <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x30a>
    68ce:	f003 ffa5 	bl	a81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    68d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68d6:	f003 bd85 	b.w	a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    68da:	bd10      	pop	{r4, pc}
    68dc:	20000e04 	.word	0x20000e04

000068e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    68e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68e4:	4d59      	ldr	r5, [pc, #356]	; (6a4c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16c>)
    68e6:	4604      	mov	r4, r0
    68e8:	b088      	sub	sp, #32
    68ea:	7828      	ldrb	r0, [r5, #0]
    68ec:	bbf0      	cbnz	r0, 696c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    68ee:	7820      	ldrb	r0, [r4, #0]
    68f0:	28ff      	cmp	r0, #255	; 0xff
    68f2:	d03c      	beq.n	696e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    68f4:	2600      	movs	r6, #0
    68f6:	81ae      	strh	r6, [r5, #12]
    68f8:	606e      	str	r6, [r5, #4]
    68fa:	706e      	strb	r6, [r5, #1]
    68fc:	70ae      	strb	r6, [r5, #2]
    68fe:	f884 6061 	strb.w	r6, [r4, #97]	; 0x61
    6902:	4b53      	ldr	r3, [pc, #332]	; (6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    6904:	f8df 814c 	ldr.w	r8, [pc, #332]	; 6a54 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>
    6908:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    690a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    690e:	f8d8 0008 	ldr.w	r0, [r8, #8]
    6912:	6840      	ldr	r0, [r0, #4]
    6914:	9003      	str	r0, [sp, #12]
    6916:	4668      	mov	r0, sp
    6918:	f004 f8b4 	bl	aa84 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    691c:	f004 f9ac 	bl	ac78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    6920:	f004 fc0c 	bl	b13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    6924:	f003 ff7a 	bl	a81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6928:	f003 fd5c 	bl	a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    692c:	484a      	ldr	r0, [pc, #296]	; (6a58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    692e:	f004 fafd 	bl	af2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    6932:	4847      	ldr	r0, [pc, #284]	; (6a50 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x170>)
    6934:	1f00      	subs	r0, r0, #4
    6936:	f004 fb03 	bl	af40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    693a:	f104 0020 	add.w	r0, r4, #32
    693e:	4607      	mov	r7, r0
    6940:	f007 f936 	bl	dbb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    6944:	4638      	mov	r0, r7
    6946:	f007 f8f8 	bl	db3a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    694a:	4601      	mov	r1, r0
    694c:	4620      	mov	r0, r4
    694e:	f007 f8b7 	bl	dac0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x106>
    6952:	f994 000e 	ldrsb.w	r0, [r4, #14]
    6956:	f004 fa19 	bl	ad8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    695a:	7921      	ldrb	r1, [r4, #4]
    695c:	2000      	movs	r0, #0
    695e:	f004 f815 	bl	a98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6962:	60a8      	str	r0, [r5, #8]
    6964:	b138      	cbz	r0, 6976 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x96>
    6966:	7ea0      	ldrb	r0, [r4, #26]
    6968:	b968      	cbnz	r0, 6986 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    696a:	e007      	b.n	697c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x9c>
    696c:	e7ff      	b.n	696e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8e>
    696e:	200c      	movs	r0, #12
    6970:	b008      	add	sp, #32
    6972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6976:	2001      	movs	r0, #1
    6978:	7028      	strb	r0, [r5, #0]
    697a:	e064      	b.n	6a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    697c:	7e20      	ldrb	r0, [r4, #24]
    697e:	b910      	cbnz	r0, 6986 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xa6>
    6980:	78a0      	ldrb	r0, [r4, #2]
    6982:	0740      	lsls	r0, r0, #29
    6984:	d52b      	bpl.n	69de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    6986:	f004 fe58 	bl	b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    698a:	4682      	mov	sl, r0
    698c:	4651      	mov	r1, sl
    698e:	6c60      	ldr	r0, [r4, #68]	; 0x44
    6990:	f7fa fddc 	bl	154c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    6994:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 6a5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>
    6998:	4607      	mov	r7, r0
    699a:	fb90 f1f9 	sdiv	r1, r0, r9
    699e:	fb09 7011 	mls	r0, r9, r1, r7
    69a2:	4241      	negs	r1, r0
    69a4:	4650      	mov	r0, sl
    69a6:	f7fa fd9f 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    69aa:	6460      	str	r0, [r4, #68]	; 0x44
    69ac:	fb97 f0f9 	sdiv	r0, r7, r9
    69b0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    69b2:	4408      	add	r0, r1
    69b4:	6420      	str	r0, [r4, #64]	; 0x40
    69b6:	f7fe ff1f 	bl	57f8 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    69ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
    69bc:	4288      	cmp	r0, r1
    69be:	d80e      	bhi.n	69de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    69c0:	e9c4 6a10 	strd	r6, sl, [r4, #64]	; 0x40
    69c4:	2101      	movs	r1, #1
    69c6:	4620      	mov	r0, r4
    69c8:	f007 f83e 	bl	da48 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8e>
    69cc:	78a0      	ldrb	r0, [r4, #2]
    69ce:	0740      	lsls	r0, r0, #29
    69d0:	d505      	bpl.n	69de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    69d2:	7e20      	ldrb	r0, [r4, #24]
    69d4:	b118      	cbz	r0, 69de <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xfe>
    69d6:	2101      	movs	r1, #1
    69d8:	4620      	mov	r0, r4
    69da:	f000 faaf 	bl	6f3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x65c>
    69de:	f104 0130 	add.w	r1, r4, #48	; 0x30
    69e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    69e4:	f006 f8c5 	bl	cb72 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    69e8:	f104 0138 	add.w	r1, r4, #56	; 0x38
    69ec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    69ee:	f006 f8c3 	bl	cb78 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    69f2:	f7fe ff67 	bl	58c4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    69f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    69fa:	1cc0      	adds	r0, r0, #3
    69fc:	f006 f97c 	bl	ccf8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    6a00:	73a8      	strb	r0, [r5, #14]
    6a02:	78a0      	ldrb	r0, [r4, #2]
    6a04:	07c0      	lsls	r0, r0, #31
    6a06:	d01e      	beq.n	6a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    6a08:	a904      	add	r1, sp, #16
    6a0a:	2000      	movs	r0, #0
    6a0c:	f005 ff8b 	bl	c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    6a10:	b120      	cbz	r0, 6a1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    6a12:	f640 11ce 	movw	r1, #2510	; 0x9ce
    6a16:	202d      	movs	r0, #45	; 0x2d
    6a18:	f7fd f92e 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a1c:	20ff      	movs	r0, #255	; 0xff
    6a1e:	73e8      	strb	r0, [r5, #15]
    6a20:	e00c      	b.n	6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    6a22:	9806      	ldr	r0, [sp, #24]
    6a24:	69e1      	ldr	r1, [r4, #28]
    6a26:	4281      	cmp	r1, r0
    6a28:	d008      	beq.n	6a3c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x15c>
    6a2a:	7881      	ldrb	r1, [r0, #2]
    6a2c:	73e9      	strb	r1, [r5, #15]
    6a2e:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6a32:	6129      	str	r1, [r5, #16]
    6a34:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6a38:	82a8      	strh	r0, [r5, #20]
    6a3a:	e004      	b.n	6a46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x166>
    6a3c:	a804      	add	r0, sp, #16
    6a3e:	f7fd fb61 	bl	4104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    6a42:	2800      	cmp	r0, #0
    6a44:	d0ed      	beq.n	6a22 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x142>
    6a46:	2000      	movs	r0, #0
    6a48:	e792      	b.n	6970 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x90>
    6a4a:	0000      	.short	0x0000
    6a4c:	20000e04 	.word	0x20000e04
    6a50:	00007050 	.word	0x00007050
    6a54:	200000ec 	.word	0x200000ec
    6a58:	8e89bed6 	.word	0x8e89bed6
    6a5c:	000f4240 	.word	0x000f4240
    6a60:	b510      	push	{r4, lr}
    6a62:	4604      	mov	r4, r0
    6a64:	f7ff ff3c 	bl	68e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    6a68:	2800      	cmp	r0, #0
    6a6a:	d108      	bne.n	6a7e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19e>
    6a6c:	4804      	ldr	r0, [pc, #16]	; (6a80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1a0>)
    6a6e:	7800      	ldrb	r0, [r0, #0]
    6a70:	2801      	cmp	r0, #1
    6a72:	d003      	beq.n	6a7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x19c>
    6a74:	2100      	movs	r1, #0
    6a76:	4620      	mov	r0, r4
    6a78:	f7ff fdb2 	bl	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6a7c:	2000      	movs	r0, #0
    6a7e:	bd10      	pop	{r4, pc}
    6a80:	20000e04 	.word	0x20000e04
    6a84:	480a      	ldr	r0, [pc, #40]	; (6ab0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d0>)
    6a86:	b510      	push	{r4, lr}
    6a88:	490a      	ldr	r1, [pc, #40]	; (6ab4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>)
    6a8a:	6804      	ldr	r4, [r0, #0]
    6a8c:	7808      	ldrb	r0, [r1, #0]
    6a8e:	2800      	cmp	r0, #0
    6a90:	d00d      	beq.n	6aae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    6a92:	7808      	ldrb	r0, [r1, #0]
    6a94:	2802      	cmp	r0, #2
    6a96:	d002      	beq.n	6a9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1be>
    6a98:	7808      	ldrb	r0, [r1, #0]
    6a9a:	2803      	cmp	r0, #3
    6a9c:	d102      	bne.n	6aa4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1c4>
    6a9e:	4620      	mov	r0, r4
    6aa0:	f7ff ff0c 	bl	68bc <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x2ec>
    6aa4:	4620      	mov	r0, r4
    6aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6aaa:	f000 b90f 	b.w	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>
    6aae:	bd10      	pop	{r4, pc}
    6ab0:	200000ec 	.word	0x200000ec
    6ab4:	20000e04 	.word	0x20000e04
    6ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6abc:	4604      	mov	r4, r0
    6abe:	4827      	ldr	r0, [pc, #156]	; (6b5c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    6ac0:	460d      	mov	r5, r1
    6ac2:	6840      	ldr	r0, [r0, #4]
    6ac4:	f004 f968 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ac8:	4e25      	ldr	r6, [pc, #148]	; (6b60 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>)
    6aca:	2004      	movs	r0, #4
    6acc:	7030      	strb	r0, [r6, #0]
    6ace:	b325      	cbz	r5, 6b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6ad0:	8860      	ldrh	r0, [r4, #2]
    6ad2:	2810      	cmp	r0, #16
    6ad4:	d02a      	beq.n	6b2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24c>
    6ad6:	f104 0020 	add.w	r0, r4, #32
    6ada:	4680      	mov	r8, r0
    6adc:	68b5      	ldr	r5, [r6, #8]
    6ade:	f007 f820 	bl	db22 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    6ae2:	4607      	mov	r7, r0
    6ae4:	4640      	mov	r0, r8
    6ae6:	f007 f845 	bl	db74 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    6aea:	1a38      	subs	r0, r7, r0
    6aec:	1e40      	subs	r0, r0, #1
    6aee:	b2c0      	uxtb	r0, r0
    6af0:	8861      	ldrh	r1, [r4, #2]
    6af2:	2228      	movs	r2, #40	; 0x28
    6af4:	f000 fae8 	bl	70c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    6af8:	4405      	add	r5, r0
    6afa:	78a0      	ldrb	r0, [r4, #2]
    6afc:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6b00:	b130      	cbz	r0, 6b10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x230>
    6b02:	6870      	ldr	r0, [r6, #4]
    6b04:	4405      	add	r5, r0
    6b06:	f007 f88e 	bl	dc26 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    6b0a:	4428      	add	r0, r5
    6b0c:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    6b10:	7922      	ldrb	r2, [r4, #4]
    6b12:	4629      	mov	r1, r5
    6b14:	2000      	movs	r0, #0
    6b16:	f004 f94d 	bl	adb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    6b1a:	8860      	ldrh	r0, [r4, #2]
    6b1c:	2813      	cmp	r0, #19
    6b1e:	d013      	beq.n	6b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6b20:	dc09      	bgt.n	6b36 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    6b22:	2810      	cmp	r0, #16
    6b24:	d017      	beq.n	6b56 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    6b26:	2812      	cmp	r0, #18
    6b28:	d109      	bne.n	6b3e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x25e>
    6b2a:	e00d      	b.n	6b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6b2c:	7921      	ldrb	r1, [r4, #4]
    6b2e:	2000      	movs	r0, #0
    6b30:	f003 fee0 	bl	a8f4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6b34:	e7f1      	b.n	6b1a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    6b36:	2815      	cmp	r0, #21
    6b38:	d006      	beq.n	6b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6b3a:	281d      	cmp	r0, #29
    6b3c:	d004      	beq.n	6b48 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    6b3e:	f640 518e 	movw	r1, #3470	; 0xd8e
    6b42:	202d      	movs	r0, #45	; 0x2d
    6b44:	f7fd f898 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b48:	7922      	ldrb	r2, [r4, #4]
    6b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b4e:	2101      	movs	r1, #1
    6b50:	2000      	movs	r0, #0
    6b52:	f004 b9ab 	b.w	aeac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b5a:	0000      	.short	0x0000
    6b5c:	200000ec 	.word	0x200000ec
    6b60:	20000e04 	.word	0x20000e04
    6b64:	b510      	push	{r4, lr}
    6b66:	4604      	mov	r4, r0
    6b68:	7800      	ldrb	r0, [r0, #0]
    6b6a:	460b      	mov	r3, r1
    6b6c:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    6b70:	29ff      	cmp	r1, #255	; 0xff
    6b72:	d010      	beq.n	6b96 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b6>
    6b74:	f104 0297 	add.w	r2, r4, #151	; 0x97
    6b78:	1e51      	subs	r1, r2, #1
    6b7a:	4618      	mov	r0, r3
    6b7c:	f7fe fdba 	bl	56f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6b80:	b130      	cbz	r0, 6b90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>
    6b82:	f894 0096 	ldrb.w	r0, [r4, #150]	; 0x96
    6b86:	f040 0002 	orr.w	r0, r0, #2
    6b8a:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    6b8e:	e011      	b.n	6bb4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2d4>
    6b90:	f640 71c5 	movw	r1, #4037	; 0xfc5
    6b94:	e020      	b.n	6bd8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f8>
    6b96:	4812      	ldr	r0, [pc, #72]	; (6be0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>)
    6b98:	6840      	ldr	r0, [r0, #4]
    6b9a:	7801      	ldrb	r1, [r0, #0]
    6b9c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6ba0:	f884 1096 	strb.w	r1, [r4, #150]	; 0x96
    6ba4:	f8d0 1003 	ldr.w	r1, [r0, #3]
    6ba8:	f8c4 1097 	str.w	r1, [r4, #151]	; 0x97
    6bac:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    6bb0:	f8a4 009b 	strh.w	r0, [r4, #155]	; 0x9b
    6bb4:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
    6bb8:	287f      	cmp	r0, #127	; 0x7f
    6bba:	d00b      	beq.n	6bd4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2f4>
    6bbc:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
    6bc0:	207f      	movs	r0, #127	; 0x7f
    6bc2:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    6bc6:	347e      	adds	r4, #126	; 0x7e
    6bc8:	2001      	movs	r0, #1
    6bca:	75a0      	strb	r0, [r4, #22]
    6bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6bd0:	f003 b81c 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6bd4:	f44f 6164 	mov.w	r1, #3648	; 0xe40
    6bd8:	202d      	movs	r0, #45	; 0x2d
    6bda:	f7fd f84d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bde:	0000      	.short	0x0000
    6be0:	200000ec 	.word	0x200000ec
    6be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6be8:	4690      	mov	r8, r2
    6bea:	460e      	mov	r6, r1
    6bec:	4604      	mov	r4, r0
    6bee:	2903      	cmp	r1, #3
    6bf0:	d004      	beq.n	6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    6bf2:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
    6bf6:	b108      	cbz	r0, 6bfc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31c>
    6bf8:	2001      	movs	r0, #1
    6bfa:	e000      	b.n	6bfe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31e>
    6bfc:	2000      	movs	r0, #0
    6bfe:	4681      	mov	r9, r0
    6c00:	f003 fe2a 	bl	a858 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>
    6c04:	4605      	mov	r5, r0
    6c06:	2e03      	cmp	r6, #3
    6c08:	d003      	beq.n	6c12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x332>
    6c0a:	2701      	movs	r7, #1
    6c0c:	2e05      	cmp	r6, #5
    6c0e:	d005      	beq.n	6c1c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33c>
    6c10:	e008      	b.n	6c24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x344>
    6c12:	78a0      	ldrb	r0, [r4, #2]
    6c14:	2702      	movs	r7, #2
    6c16:	f3c0 0040 	ubfx	r0, r0, #1, #1
    6c1a:	e001      	b.n	6c20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x340>
    6c1c:	78a0      	ldrb	r0, [r4, #2]
    6c1e:	07c0      	lsls	r0, r0, #31
    6c20:	2800      	cmp	r0, #0
    6c22:	d04a      	beq.n	6cba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6c24:	f1b9 0f00 	cmp.w	r9, #0
    6c28:	d146      	bne.n	6cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6c2a:	4826      	ldr	r0, [pc, #152]	; (6cc4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e4>)
    6c2c:	7b80      	ldrb	r0, [r0, #14]
    6c2e:	b140      	cbz	r0, 6c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    6c30:	f006 f865 	bl	ccfe <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6c34:	f888 0000 	strb.w	r0, [r8]
    6c38:	28ff      	cmp	r0, #255	; 0xff
    6c3a:	d002      	beq.n	6c42 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x362>
    6c3c:	f7fe fd74 	bl	5728 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6c40:	4305      	orrs	r5, r0
    6c42:	4e21      	ldr	r6, [pc, #132]	; (6cc8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3e8>)
    6c44:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
    6c48:	6870      	ldr	r0, [r6, #4]
    6c4a:	7801      	ldrb	r1, [r0, #0]
    6c4c:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6c50:	4291      	cmp	r1, r2
    6c52:	d106      	bne.n	6c62 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x382>
    6c54:	2206      	movs	r2, #6
    6c56:	f104 0150 	add.w	r1, r4, #80	; 0x50
    6c5a:	1cc0      	adds	r0, r0, #3
    6c5c:	f004 fe50 	bl	b900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6c60:	b130      	cbz	r0, 6c70 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x390>
    6c62:	2000      	movs	r0, #0
    6c64:	f898 1000 	ldrb.w	r1, [r8]
    6c68:	29ff      	cmp	r1, #255	; 0xff
    6c6a:	d007      	beq.n	6c7c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x39c>
    6c6c:	b9a8      	cbnz	r0, 6c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6c6e:	e001      	b.n	6c74 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x394>
    6c70:	2001      	movs	r0, #1
    6c72:	e7f7      	b.n	6c64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x384>
    6c74:	7e60      	ldrb	r0, [r4, #25]
    6c76:	4288      	cmp	r0, r1
    6c78:	d00f      	beq.n	6c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6c7a:	e008      	b.n	6c8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    6c7c:	b138      	cbz	r0, 6c8e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    6c7e:	6871      	ldr	r1, [r6, #4]
    6c80:	f811 0b03 	ldrb.w	r0, [r1], #3
    6c84:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6c88:	f006 fe9c 	bl	d9c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6c8c:	b128      	cbz	r0, 6c9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ba>
    6c8e:	2000      	movs	r0, #0
    6c90:	78a1      	ldrb	r1, [r4, #2]
    6c92:	0749      	lsls	r1, r1, #29
    6c94:	d503      	bpl.n	6c9e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3be>
    6c96:	b990      	cbnz	r0, 6cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6c98:	e00e      	b.n	6cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6c9a:	2001      	movs	r0, #1
    6c9c:	e7f8      	b.n	6c90 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b0>
    6c9e:	b975      	cbnz	r5, 6cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6ca0:	7be0      	ldrb	r0, [r4, #15]
    6ca2:	b108      	cbz	r0, 6ca8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c8>
    6ca4:	42b8      	cmp	r0, r7
    6ca6:	d107      	bne.n	6cb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3d8>
    6ca8:	6871      	ldr	r1, [r6, #4]
    6caa:	f811 0b03 	ldrb.w	r0, [r1], #3
    6cae:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6cb2:	f006 fe87 	bl	d9c4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    6cb6:	b110      	cbz	r0, 6cbe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3de>
    6cb8:	2000      	movs	r0, #0
    6cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6cbe:	2001      	movs	r0, #1
    6cc0:	e7fb      	b.n	6cba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3da>
    6cc2:	0000      	.short	0x0000
    6cc4:	20000e04 	.word	0x20000e04
    6cc8:	200000ec 	.word	0x200000ec
    6ccc:	b570      	push	{r4, r5, r6, lr}
    6cce:	4604      	mov	r4, r0
    6cd0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6cd2:	4d13      	ldr	r5, [pc, #76]	; (6d20 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x440>)
    6cd4:	1c40      	adds	r0, r0, #1
    6cd6:	62a0      	str	r0, [r4, #40]	; 0x28
    6cd8:	7ba8      	ldrb	r0, [r5, #14]
    6cda:	2600      	movs	r6, #0
    6cdc:	b120      	cbz	r0, 6ce8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    6cde:	f003 fd9d 	bl	a81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6ce2:	f003 fb7f 	bl	a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6ce6:	73ae      	strb	r6, [r5, #14]
    6ce8:	702e      	strb	r6, [r5, #0]
    6cea:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
    6cee:	b108      	cbz	r0, 6cf4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x414>
    6cf0:	2101      	movs	r1, #1
    6cf2:	e00f      	b.n	6d14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    6cf4:	7b60      	ldrb	r0, [r4, #13]
    6cf6:	b160      	cbz	r0, 6d12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x432>
    6cf8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6cfa:	4288      	cmp	r0, r1
    6cfc:	d809      	bhi.n	6d12 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x432>
    6cfe:	2101      	movs	r1, #1
    6d00:	4620      	mov	r0, r4
    6d02:	f006 ffb7 	bl	dc74 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6d06:	78a0      	ldrb	r0, [r4, #2]
    6d08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d0c:	07c0      	lsls	r0, r0, #31
    6d0e:	f002 bf7d 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6d12:	2100      	movs	r1, #0
    6d14:	4620      	mov	r0, r4
    6d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6d1a:	f006 bfab 	b.w	dc74 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    6d1e:	0000      	.short	0x0000
    6d20:	20000e04 	.word	0x20000e04
    6d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d28:	4604      	mov	r4, r0
    6d2a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6d2e:	4617      	mov	r7, r2
    6d30:	460d      	mov	r5, r1
    6d32:	f88d 0000 	strb.w	r0, [sp]
    6d36:	9800      	ldr	r0, [sp, #0]
    6d38:	9000      	str	r0, [sp, #0]
    6d3a:	f89d 0000 	ldrb.w	r0, [sp]
    6d3e:	b110      	cbz	r0, 6d46 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x466>
    6d40:	f640 413b 	movw	r1, #3131	; 0xc3b
    6d44:	e054      	b.n	6df0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
    6d46:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    6d4a:	8828      	ldrh	r0, [r5, #0]
    6d4c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    6d50:	2b00      	cmp	r3, #0
    6d52:	d15d      	bne.n	6e10 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x530>
    6d54:	68e8      	ldr	r0, [r5, #12]
    6d56:	f006 f830 	bl	cdba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6d5a:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    6d5e:	8aa8      	ldrh	r0, [r5, #20]
    6d60:	f8a4 0080 	strh.w	r0, [r4, #128]	; 0x80
    6d64:	8ae8      	ldrh	r0, [r5, #22]
    6d66:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    6d6a:	f895 0175 	ldrb.w	r0, [r5, #373]	; 0x175
    6d6e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    6d72:	7e21      	ldrb	r1, [r4, #24]
    6d74:	f104 0849 	add.w	r8, r4, #73	; 0x49
    6d78:	2600      	movs	r6, #0
    6d7a:	b129      	cbz	r1, 6d88 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a8>
    6d7c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6d80:	4641      	mov	r1, r8
    6d82:	f006 fd37 	bl	d7f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    6d86:	b940      	cbnz	r0, 6d9a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ba>
    6d88:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    6d8c:	b170      	cbz	r0, 6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    6d8e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    6d92:	4641      	mov	r1, r8
    6d94:	f006 fd25 	bl	d7e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    6d98:	b140      	cbz	r0, 6dac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4cc>
    6d9a:	f8d4 0049 	ldr.w	r0, [r4, #73]	; 0x49
    6d9e:	f8c4 0072 	str.w	r0, [r4, #114]	; 0x72
    6da2:	f8b4 004d 	ldrh.w	r0, [r4, #77]	; 0x4d
    6da6:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    6daa:	e003      	b.n	6db4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d4>
    6dac:	f8c4 6072 	str.w	r6, [r4, #114]	; 0x72
    6db0:	f8a4 6076 	strh.w	r6, [r4, #118]	; 0x76
    6db4:	4817      	ldr	r0, [pc, #92]	; (6e14 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x534>)
    6db6:	2fff      	cmp	r7, #255	; 0xff
    6db8:	6840      	ldr	r0, [r0, #4]
    6dba:	7801      	ldrb	r1, [r0, #0]
    6dbc:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6dc0:	f884 106b 	strb.w	r1, [r4, #107]	; 0x6b
    6dc4:	f850 1f03 	ldr.w	r1, [r0, #3]!
    6dc8:	d015      	beq.n	6df6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x516>
    6dca:	67a1      	str	r1, [r4, #120]	; 0x78
    6dcc:	8880      	ldrh	r0, [r0, #4]
    6dce:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    6dd2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    6dd6:	1e51      	subs	r1, r2, #1
    6dd8:	4638      	mov	r0, r7
    6dda:	f7fe fc8b 	bl	56f4 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6dde:	b128      	cbz	r0, 6dec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    6de0:	f814 0f6b 	ldrb.w	r0, [r4, #107]!
    6de4:	f040 0002 	orr.w	r0, r0, #2
    6de8:	7020      	strb	r0, [r4, #0]
    6dea:	e00a      	b.n	6e02 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x522>
    6dec:	f640 415c 	movw	r1, #3164	; 0xc5c
    6df0:	202d      	movs	r0, #45	; 0x2d
    6df2:	f7fc ff41 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6df6:	f844 1f6c 	str.w	r1, [r4, #108]!
    6dfa:	8880      	ldrh	r0, [r0, #4]
    6dfc:	80a0      	strh	r0, [r4, #4]
    6dfe:	60e6      	str	r6, [r4, #12]
    6e00:	8226      	strh	r6, [r4, #16]
    6e02:	8828      	ldrh	r0, [r5, #0]
    6e04:	f7fd fb60 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6e08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e0c:	f005 bc68 	b.w	c6e0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6e10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6e14:	200000ec 	.word	0x200000ec
    6e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6e1c:	4604      	mov	r4, r0
    6e1e:	20ff      	movs	r0, #255	; 0xff
    6e20:	f88d 0000 	strb.w	r0, [sp]
    6e24:	2601      	movs	r6, #1
    6e26:	466a      	mov	r2, sp
    6e28:	2105      	movs	r1, #5
    6e2a:	4620      	mov	r0, r4
    6e2c:	f7ff feda 	bl	6be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    6e30:	b3f0      	cbz	r0, 6eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d0>
    6e32:	4d23      	ldr	r5, [pc, #140]	; (6ec0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e0>)
    6e34:	4f23      	ldr	r7, [pc, #140]	; (6ec4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5e4>)
    6e36:	46b0      	mov	r8, r6
    6e38:	6868      	ldr	r0, [r5, #4]
    6e3a:	7bfa      	ldrb	r2, [r7, #15]
    6e3c:	f04f 0900 	mov.w	r9, #0
    6e40:	7801      	ldrb	r1, [r0, #0]
    6e42:	f3c1 1180 	ubfx	r1, r1, #6, #1
    6e46:	4291      	cmp	r1, r2
    6e48:	d106      	bne.n	6e58 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x578>
    6e4a:	2206      	movs	r2, #6
    6e4c:	f107 0110 	add.w	r1, r7, #16
    6e50:	1cc0      	adds	r0, r0, #3
    6e52:	f004 fd55 	bl	b900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6e56:	b358      	cbz	r0, 6eb0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d0>
    6e58:	686a      	ldr	r2, [r5, #4]
    6e5a:	69e0      	ldr	r0, [r4, #28]
    6e5c:	7812      	ldrb	r2, [r2, #0]
    6e5e:	f810 1f85 	ldrb.w	r1, [r0, #133]!
    6e62:	f3c2 1240 	ubfx	r2, r2, #5, #1
    6e66:	4011      	ands	r1, r2
    6e68:	7001      	strb	r1, [r0, #0]
    6e6a:	2201      	movs	r2, #1
    6e6c:	4620      	mov	r0, r4
    6e6e:	69e1      	ldr	r1, [r4, #28]
    6e70:	f000 f892 	bl	6f98 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b8>
    6e74:	2300      	movs	r3, #0
    6e76:	f89d 2000 	ldrb.w	r2, [sp]
    6e7a:	4620      	mov	r0, r4
    6e7c:	69e1      	ldr	r1, [r4, #28]
    6e7e:	f7ff ff51 	bl	6d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    6e82:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
    6e86:	f002 fec1 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6e8a:	f887 9000 	strb.w	r9, [r7]
    6e8e:	2105      	movs	r1, #5
    6e90:	69e0      	ldr	r0, [r4, #28]
    6e92:	f000 fa1d 	bl	72d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6e96:	6868      	ldr	r0, [r5, #4]
    6e98:	69e1      	ldr	r1, [r4, #28]
    6e9a:	f8d0 2003 	ldr.w	r2, [r0, #3]
    6e9e:	f841 2f03 	str.w	r2, [r1, #3]!
    6ea2:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    6ea6:	808a      	strh	r2, [r1, #4]
    6ea8:	7800      	ldrb	r0, [r0, #0]
    6eaa:	f3c0 1080 	ubfx	r0, r0, #6, #1
    6eae:	e000      	b.n	6eb2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d2>
    6eb0:	e002      	b.n	6eb8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5d8>
    6eb2:	69e1      	ldr	r1, [r4, #28]
    6eb4:	7088      	strb	r0, [r1, #2]
    6eb6:	e000      	b.n	6eba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5da>
    6eb8:	2600      	movs	r6, #0
    6eba:	4630      	mov	r0, r6
    6ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ec0:	200000ec 	.word	0x200000ec
    6ec4:	20000e04 	.word	0x20000e04
    6ec8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6eca:	4604      	mov	r4, r0
    6ecc:	20ff      	movs	r0, #255	; 0xff
    6ece:	f88d 0000 	strb.w	r0, [sp]
    6ed2:	2501      	movs	r5, #1
    6ed4:	466a      	mov	r2, sp
    6ed6:	2103      	movs	r1, #3
    6ed8:	4620      	mov	r0, r4
    6eda:	f7ff fe83 	bl	6be4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x304>
    6ede:	b328      	cbz	r0, 6f2c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64c>
    6ee0:	7b20      	ldrb	r0, [r4, #12]
    6ee2:	b168      	cbz	r0, 6f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6ee4:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
    6ee8:	f88d 0004 	strb.w	r0, [sp, #4]
    6eec:	9801      	ldr	r0, [sp, #4]
    6eee:	9001      	str	r0, [sp, #4]
    6ef0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6ef4:	b920      	cbnz	r0, 6f00 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x620>
    6ef6:	f89d 1000 	ldrb.w	r1, [sp]
    6efa:	4620      	mov	r0, r4
    6efc:	f7ff fe32 	bl	6b64 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x284>
    6f00:	4e0c      	ldr	r6, [pc, #48]	; (6f34 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x654>)
    6f02:	2100      	movs	r1, #0
    6f04:	6870      	ldr	r0, [r6, #4]
    6f06:	8001      	strh	r1, [r0, #0]
    6f08:	2104      	movs	r1, #4
    6f0a:	f006 fa75 	bl	d3f8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6f0e:	4620      	mov	r0, r4
    6f10:	f000 f88a 	bl	7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    6f14:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    6f16:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6f18:	6870      	ldr	r0, [r6, #4]
    6f1a:	f006 faa4 	bl	d466 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>
    6f1e:	4906      	ldr	r1, [pc, #24]	; (6f38 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x658>)
    6f20:	2005      	movs	r0, #5
    6f22:	7008      	strb	r0, [r1, #0]
    6f24:	6870      	ldr	r0, [r6, #4]
    6f26:	f003 ff37 	bl	ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6f2a:	e000      	b.n	6f2e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x64e>
    6f2c:	2500      	movs	r5, #0
    6f2e:	4628      	mov	r0, r5
    6f30:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    6f32:	0000      	.short	0x0000
    6f34:	200000ec 	.word	0x200000ec
    6f38:	20000e04 	.word	0x20000e04
    6f3c:	b570      	push	{r4, r5, r6, lr}
    6f3e:	4604      	mov	r4, r0
    6f40:	460e      	mov	r6, r1
    6f42:	7e40      	ldrb	r0, [r0, #25]
    6f44:	f7fe fba4 	bl	5690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6f48:	0005      	movs	r5, r0
    6f4a:	d019      	beq.n	6f80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    6f4c:	2110      	movs	r1, #16
    6f4e:	f006 f8c0 	bl	d0d2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6f52:	2800      	cmp	r0, #0
    6f54:	d114      	bne.n	6f80 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    6f56:	2001      	movs	r0, #1
    6f58:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    6f5c:	f104 0157 	add.w	r1, r4, #87	; 0x57
    6f60:	4632      	mov	r2, r6
    6f62:	460c      	mov	r4, r1
    6f64:	4628      	mov	r0, r5
    6f66:	f005 fe6c 	bl	cc42 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6f6a:	4621      	mov	r1, r4
    6f6c:	4c05      	ldr	r4, [pc, #20]	; (6f84 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    6f6e:	6860      	ldr	r0, [r4, #4]
    6f70:	f006 fa5d 	bl	d42e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6f74:	6860      	ldr	r0, [r4, #4]
    6f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6f7a:	2101      	movs	r1, #1
    6f7c:	f006 ba5d 	b.w	d43a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6f80:	bd70      	pop	{r4, r5, r6, pc}
    6f82:	0000      	.short	0x0000
    6f84:	200000ec 	.word	0x200000ec
    6f88:	4802      	ldr	r0, [pc, #8]	; (6f94 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6b4>)
    6f8a:	2101      	movs	r1, #1
    6f8c:	6800      	ldr	r0, [r0, #0]
    6f8e:	f7ff bb27 	b.w	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    6f92:	0000      	.short	0x0000
    6f94:	200000ec 	.word	0x200000ec
    6f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f9c:	4e21      	ldr	r6, [pc, #132]	; (7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    6f9e:	4680      	mov	r8, r0
    6fa0:	460c      	mov	r4, r1
    6fa2:	6870      	ldr	r0, [r6, #4]
    6fa4:	4615      	mov	r5, r2
    6fa6:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    6faa:	6121      	str	r1, [r4, #16]
    6fac:	8881      	ldrh	r1, [r0, #4]
    6fae:	8321      	strh	r1, [r4, #24]
    6fb0:	7981      	ldrb	r1, [r0, #6]
    6fb2:	76a1      	strb	r1, [r4, #26]
    6fb4:	8940      	ldrh	r0, [r0, #10]
    6fb6:	f005 fefc 	bl	cdb2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6fba:	4607      	mov	r7, r0
    6fbc:	60e0      	str	r0, [r4, #12]
    6fbe:	6870      	ldr	r0, [r6, #4]
    6fc0:	4639      	mov	r1, r7
    6fc2:	7d80      	ldrb	r0, [r0, #22]
    6fc4:	f006 f880 	bl	d0c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6fc8:	83a0      	strh	r0, [r4, #28]
    6fca:	6870      	ldr	r0, [r6, #4]
    6fcc:	4639      	mov	r1, r7
    6fce:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    6fd2:	f006 f875 	bl	d0c0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6fd6:	6220      	str	r0, [r4, #32]
    6fd8:	6870      	ldr	r0, [r6, #4]
    6fda:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    6fde:	82a1      	strh	r1, [r4, #20]
    6fe0:	8841      	ldrh	r1, [r0, #2]
    6fe2:	82e1      	strh	r1, [r4, #22]
    6fe4:	6841      	ldr	r1, [r0, #4]
    6fe6:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    6fea:	7a01      	ldrb	r1, [r0, #8]
    6fec:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
    6ff0:	7a41      	ldrb	r1, [r0, #9]
    6ff2:	f001 011f 	and.w	r1, r1, #31
    6ff6:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    6ffa:	7a40      	ldrb	r0, [r0, #9]
    6ffc:	0940      	lsrs	r0, r0, #5
    6ffe:	f884 0175 	strb.w	r0, [r4, #373]	; 0x175
    7002:	f104 0062 	add.w	r0, r4, #98	; 0x62
    7006:	7205      	strb	r5, [r0, #8]
    7008:	7245      	strb	r5, [r0, #9]
    700a:	2101      	movs	r1, #1
    700c:	7281      	strb	r1, [r0, #10]
    700e:	2100      	movs	r1, #0
    7010:	3836      	subs	r0, #54	; 0x36
    7012:	f006 fb67 	bl	d6e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    7016:	f898 000e 	ldrb.w	r0, [r8, #14]
    701a:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    701e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7022:	0000      	.short	0x0000
    7024:	200000ec 	.word	0x200000ec
    7028:	b570      	push	{r4, r5, r6, lr}
    702a:	4d07      	ldr	r5, [pc, #28]	; (7048 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48>)
    702c:	4604      	mov	r4, r0
    702e:	f100 0149 	add.w	r1, r0, #73	; 0x49
    7032:	6868      	ldr	r0, [r5, #4]
    7034:	f006 fa08 	bl	d448 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7038:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    703c:	6868      	ldr	r0, [r5, #4]
    703e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7042:	f006 ba07 	b.w	d454 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    7046:	0000      	.short	0x0000
    7048:	200000ec 	.word	0x200000ec
    704c:	00555555 	.word	0x00555555
    7050:	00006869 	.word	0x00006869
    7054:	000066f5 	.word	0x000066f5
    7058:	000067e5 	.word	0x000067e5
    705c:	00000000 	.word	0x00000000
    7060:	000067bd 	.word	0x000067bd
    7064:	00006815 	.word	0x00006815
    7068:	0000d9eb 	.word	0x0000d9eb
    706c:	0000d9f1 	.word	0x0000d9f1
    7070:	00006a61 	.word	0x00006a61
    7074:	00006a85 	.word	0x00006a85
    7078:	00006f89 	.word	0x00006f89
    707c:	0000706c 	.word	0x0000706c
    7080:	00007064 	.word	0x00007064
    7084:	00007060 	.word	0x00007060

00007088 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    7088:	b510      	push	{r4, lr}
    708a:	1e42      	subs	r2, r0, #1
    708c:	2a02      	cmp	r2, #2
    708e:	d901      	bls.n	7094 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    7090:	21ca      	movs	r1, #202	; 0xca
    7092:	e009      	b.n	70a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    7094:	1e40      	subs	r0, r0, #1
    7096:	2910      	cmp	r1, #16
    7098:	d009      	beq.n	70ae <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    709a:	2912      	cmp	r1, #18
    709c:	d00c      	beq.n	70b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    709e:	2913      	cmp	r1, #19
    70a0:	d00a      	beq.n	70b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    70a2:	2915      	cmp	r1, #21
    70a4:	d005      	beq.n	70b2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    70a6:	21d8      	movs	r1, #216	; 0xd8
    70a8:	202f      	movs	r0, #47	; 0x2f
    70aa:	f7fc fde5 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70ae:	4905      	ldr	r1, [pc, #20]	; (70c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    70b0:	e004      	b.n	70bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    70b2:	4904      	ldr	r1, [pc, #16]	; (70c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    70b4:	1d89      	adds	r1, r1, #6
    70b6:	e001      	b.n	70bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    70b8:	4902      	ldr	r1, [pc, #8]	; (70c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    70ba:	1f89      	subs	r1, r1, #6
    70bc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    70c0:	bd10      	pop	{r4, pc}
    70c2:	0000      	.short	0x0000
    70c4:	0000dc3e 	.word	0x0000dc3e

000070c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    70c8:	1e42      	subs	r2, r0, #1
    70ca:	b510      	push	{r4, lr}
    70cc:	b2d2      	uxtb	r2, r2
    70ce:	2a01      	cmp	r2, #1
    70d0:	d903      	bls.n	70da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    70d2:	291d      	cmp	r1, #29
    70d4:	d001      	beq.n	70da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    70d6:	21ee      	movs	r1, #238	; 0xee
    70d8:	e00d      	b.n	70f6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    70da:	2913      	cmp	r1, #19
    70dc:	d013      	beq.n	7106 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    70de:	dc04      	bgt.n	70ea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    70e0:	2910      	cmp	r1, #16
    70e2:	d00b      	beq.n	70fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    70e4:	2912      	cmp	r1, #18
    70e6:	d104      	bne.n	70f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    70e8:	e00d      	b.n	7106 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    70ea:	2915      	cmp	r1, #21
    70ec:	d008      	beq.n	7100 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    70ee:	291d      	cmp	r1, #29
    70f0:	d00e      	beq.n	7110 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    70f2:	f44f 7181 	mov.w	r1, #258	; 0x102
    70f6:	202f      	movs	r0, #47	; 0x2f
    70f8:	f7fc fdbe 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    70fc:	4807      	ldr	r0, [pc, #28]	; (711c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    70fe:	e004      	b.n	710a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7100:	4806      	ldr	r0, [pc, #24]	; (711c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7102:	3008      	adds	r0, #8
    7104:	e001      	b.n	710a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    7106:	4805      	ldr	r0, [pc, #20]	; (711c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    7108:	1d00      	adds	r0, r0, #4
    710a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    710e:	bd10      	pop	{r4, pc}
    7110:	f240 315a 	movw	r1, #858	; 0x35a
    7114:	fb10 f001 	smulbb	r0, r0, r1
    7118:	bd10      	pop	{r4, pc}
    711a:	0000      	.short	0x0000
    711c:	0000dc2c 	.word	0x0000dc2c

00007120 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>:
    7120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7124:	4604      	mov	r4, r0
    7126:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    712a:	4615      	mov	r5, r2
    712c:	460f      	mov	r7, r1
    712e:	2800      	cmp	r0, #0
    7130:	d15b      	bne.n	71ea <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xca>
    7132:	4621      	mov	r1, r4
    7134:	4843      	ldr	r0, [pc, #268]	; (7244 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x124>)
    7136:	f7fb f8c7 	bl	22c8 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    713a:	4606      	mov	r6, r0
    713c:	2820      	cmp	r0, #32
    713e:	d054      	beq.n	71ea <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xca>
    7140:	2234      	movs	r2, #52	; 0x34
    7142:	2100      	movs	r1, #0
    7144:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    7148:	f004 fc66 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    714c:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
    7150:	2601      	movs	r6, #1
    7152:	f8c4 70a4 	str.w	r7, [r4, #164]	; 0xa4
    7156:	f884 60b4 	strb.w	r6, [r4, #180]	; 0xb4
    715a:	b15f      	cbz	r7, 7174 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x54>
    715c:	2101      	movs	r1, #1
    715e:	f507 7092 	add.w	r0, r7, #292	; 0x124
    7162:	f7fc fe31 	bl	3dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7166:	f897 0124 	ldrb.w	r0, [r7, #292]	; 0x124
    716a:	f000 0007 	and.w	r0, r0, #7
    716e:	1c40      	adds	r0, r0, #1
    7170:	f887 0124 	strb.w	r0, [r7, #292]	; 0x124
    7174:	4620      	mov	r0, r4
    7176:	f006 ff42 	bl	dffe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    717a:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    717e:	2003      	movs	r0, #3
    7180:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    7184:	f884 60c3 	strb.w	r6, [r4, #195]	; 0xc3
    7188:	2700      	movs	r7, #0
    718a:	f804 7fb8 	strb.w	r7, [r4, #184]!
    718e:	f7fa fb07 	bl	17a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    7192:	8921      	ldrh	r1, [r4, #8]
    7194:	3cb8      	subs	r4, #184	; 0xb8
    7196:	4288      	cmp	r0, r1
    7198:	d800      	bhi.n	719c <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x7c>
    719a:	4608      	mov	r0, r1
    719c:	f200 60bf 	addw	r0, r0, #1727	; 0x6bf
    71a0:	fa1f f880 	uxth.w	r8, r0
    71a4:	4620      	mov	r0, r4
    71a6:	f006 fbcd 	bl	d944 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    71aa:	b308      	cbz	r0, 71f0 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xd0>
    71ac:	f008 f945 	bl	f43a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    71b0:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    71b4:	b281      	uxth	r1, r0
    71b6:	4628      	mov	r0, r5
    71b8:	f004 fa73 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    71bc:	4428      	add	r0, r5
    71be:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    71c2:	34a4      	adds	r4, #164	; 0xa4
    71c4:	f004 fa39 	bl	b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    71c8:	4641      	mov	r1, r8
    71ca:	f7fa f98d 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    71ce:	6220      	str	r0, [r4, #32]
    71d0:	f804 7c03 	strb.w	r7, [r4, #-3]
    71d4:	7126      	strb	r6, [r4, #4]
    71d6:	2001      	movs	r0, #1
    71d8:	f006 fd21 	bl	dc1e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    71dc:	f500 7084 	add.w	r0, r0, #264	; 0x108
    71e0:	1a28      	subs	r0, r5, r0
    71e2:	62a7      	str	r7, [r4, #40]	; 0x28
    71e4:	60a0      	str	r0, [r4, #8]
    71e6:	3ca4      	subs	r4, #164	; 0xa4
    71e8:	e017      	b.n	721a <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xfa>
    71ea:	200c      	movs	r0, #12
    71ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    71f0:	4620      	mov	r0, r4
    71f2:	f006 fe57 	bl	dea4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    71f6:	f844 0fbc 	str.w	r0, [r4, #188]!
    71fa:	f804 6c1b 	strb.w	r6, [r4, #-27]
    71fe:	f004 fa1c 	bl	b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7202:	4606      	mov	r6, r0
    7204:	2000      	movs	r0, #0
    7206:	f006 ffa6 	bl	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x434>
    720a:	eb00 0108 	add.w	r1, r0, r8
    720e:	4630      	mov	r0, r6
    7210:	f7fa f96a 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7214:	6125      	str	r5, [r4, #16]
    7216:	60a0      	str	r0, [r4, #8]
    7218:	3cbc      	subs	r4, #188	; 0xbc
    721a:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    721e:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    7222:	f006 feea 	bl	dffa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    7226:	b138      	cbz	r0, 7238 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0x118>
    7228:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
    722c:	2100      	movs	r1, #0
    722e:	4620      	mov	r0, r4
    7230:	f006 fbaa 	bl	d988 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    7234:	2000      	movs	r0, #0
    7236:	e7d9      	b.n	71ec <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA+0xcc>
    7238:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
    723c:	2030      	movs	r0, #48	; 0x30
    723e:	f7fc fd1b 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7242:	0000      	.short	0x0000
    7244:	00007941 	.word	0x00007941

00007248 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>:
    7248:	4803      	ldr	r0, [pc, #12]	; (7258 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY+0x10>)
    724a:	2100      	movs	r1, #0
    724c:	7001      	strb	r1, [r0, #0]
    724e:	2201      	movs	r2, #1
    7250:	7082      	strb	r2, [r0, #2]
    7252:	7041      	strb	r1, [r0, #1]
    7254:	f006 bd4e 	b.w	dcf4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    7258:	200000fc 	.word	0x200000fc

0000725c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>:
    725c:	4901      	ldr	r1, [pc, #4]	; (7264 <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A+0x8>)
    725e:	7008      	strb	r0, [r1, #0]
    7260:	4770      	bx	lr
    7262:	0000      	.short	0x0000
    7264:	200000fc 	.word	0x200000fc

00007268 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>:
    7268:	4905      	ldr	r1, [pc, #20]	; (7280 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ+0x18>)
    726a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    726e:	fbb1 f1f2 	udiv	r1, r1, r2
    7272:	b510      	push	{r4, lr}
    7274:	f501 7123 	add.w	r1, r1, #652	; 0x28c
    7278:	f006 fa4d 	bl	d716 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    727c:	b280      	uxth	r0, r0
    727e:	bd10      	pop	{r4, pc}
    7280:	0001527d 	.word	0x0001527d

00007284 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    7284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7288:	4c10      	ldr	r4, [pc, #64]	; (72cc <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x48>)
    728a:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
    728e:	f003 fc8d 	bl	abac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7292:	4606      	mov	r6, r0
    7294:	7820      	ldrb	r0, [r4, #0]
    7296:	b128      	cbz	r0, 72a4 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x20>
    7298:	4632      	mov	r2, r6
    729a:	4639      	mov	r1, r7
    729c:	4628      	mov	r0, r5
    729e:	f005 fd92 	bl	cdc6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    72a2:	4605      	mov	r5, r0
    72a4:	6860      	ldr	r0, [r4, #4]
    72a6:	4285      	cmp	r5, r0
    72a8:	d005      	beq.n	72b6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x32>
    72aa:	68e1      	ldr	r1, [r4, #12]
    72ac:	1a28      	subs	r0, r5, r0
    72ae:	4408      	add	r0, r1
    72b0:	60e0      	str	r0, [r4, #12]
    72b2:	f7fb f913 	bl	24dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    72b6:	6065      	str	r5, [r4, #4]
    72b8:	42ae      	cmp	r6, r5
    72ba:	d801      	bhi.n	72c0 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3c>
    72bc:	7860      	ldrb	r0, [r4, #1]
    72be:	b110      	cbz	r0, 72c6 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x42>
    72c0:	2000      	movs	r0, #0
    72c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72c6:	2001      	movs	r0, #1
    72c8:	e7fb      	b.n	72c2 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x3e>
    72ca:	0000      	.short	0x0000
    72cc:	200000fc 	.word	0x200000fc

000072d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    72d0:	b570      	push	{r4, r5, r6, lr}
    72d2:	4c22      	ldr	r4, [pc, #136]	; (735c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x8c>)
    72d4:	4605      	mov	r5, r0
    72d6:	2906      	cmp	r1, #6
    72d8:	d23c      	bcs.n	7354 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x84>
    72da:	e8df f001 	tbb	[pc, r1]
    72de:	0b05      	.short	0x0b05
    72e0:	250f0e03 	.word	0x250f0e03
    72e4:	2100      	movs	r1, #0
    72e6:	e000      	b.n	72ea <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1a>
    72e8:	2101      	movs	r1, #1
    72ea:	4628      	mov	r0, r5
    72ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72f0:	f000 b8ec 	b.w	74cc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1fc>
    72f4:	2003      	movs	r0, #3
    72f6:	f885 0134 	strb.w	r0, [r5, #308]	; 0x134
    72fa:	bd70      	pop	{r4, r5, r6, pc}
    72fc:	f003 fc8a 	bl	ac14 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    7300:	f8c5 0170 	str.w	r0, [r5, #368]	; 0x170
    7304:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    7308:	f008 f930 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    730c:	f8d5 1170 	ldr.w	r1, [r5, #368]	; 0x170
    7310:	1a08      	subs	r0, r1, r0
    7312:	6861      	ldr	r1, [r4, #4]
    7314:	4401      	add	r1, r0
    7316:	6061      	str	r1, [r4, #4]
    7318:	68a1      	ldr	r1, [r4, #8]
    731a:	4408      	add	r0, r1
    731c:	60a0      	str	r0, [r4, #8]
    731e:	4628      	mov	r0, r5
    7320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7324:	f006 bdfc 	b.w	df20 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1fe>
    7328:	f003 fc40 	bl	abac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    732c:	4601      	mov	r1, r0
    732e:	2200      	movs	r2, #0
    7330:	69a0      	ldr	r0, [r4, #24]
    7332:	f006 fec6 	bl	e0c2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x3a0>
    7336:	69a0      	ldr	r0, [r4, #24]
    7338:	4909      	ldr	r1, [pc, #36]	; (7360 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x90>)
    733a:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
    733e:	f890 00a0 	ldrb.w	r0, [r0, #160]	; 0xa0
    7342:	f7fa fe83 	bl	204c <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    7346:	2800      	cmp	r0, #0
    7348:	d1d7      	bne.n	72fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2a>
    734a:	f240 7161 	movw	r1, #1889	; 0x761
    734e:	2030      	movs	r0, #48	; 0x30
    7350:	f7fc fc92 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7354:	f44f 61ef 	mov.w	r1, #1912	; 0x778
    7358:	e7f9      	b.n	734e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7e>
    735a:	0000      	.short	0x0000
    735c:	200000fc 	.word	0x200000fc
    7360:	0000e181 	.word	0x0000e181
    7364:	b510      	push	{r4, lr}
    7366:	280c      	cmp	r0, #12
    7368:	d304      	bcc.n	7374 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xa4>
    736a:	f240 3103 	movw	r1, #771	; 0x303
    736e:	2006      	movs	r0, #6
    7370:	f7fc fc82 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7374:	4901      	ldr	r1, [pc, #4]	; (737c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xac>)
    7376:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    737a:	bd10      	pop	{r4, pc}
    737c:	0000e37a 	.word	0x0000e37a
    7380:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7382:	4c18      	ldr	r4, [pc, #96]	; (73e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x114>)
    7384:	2001      	movs	r0, #1
    7386:	7060      	strb	r0, [r4, #1]
    7388:	f64f 75ff 	movw	r5, #65535	; 0xffff
    738c:	e00b      	b.n	73a6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xd6>
    738e:	2100      	movs	r1, #0
    7390:	f005 fabf 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7394:	0006      	movs	r6, r0
    7396:	d010      	beq.n	73ba <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xea>
    7398:	f896 0168 	ldrb.w	r0, [r6, #360]	; 0x168
    739c:	f7fa fe88 	bl	20b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    73a0:	4630      	mov	r0, r6
    73a2:	f006 fe81 	bl	e0a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    73a6:	4669      	mov	r1, sp
    73a8:	2000      	movs	r0, #0
    73aa:	f005 fabc 	bl	c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    73ae:	b180      	cbz	r0, 73d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    73b0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    73b4:	2030      	movs	r0, #48	; 0x30
    73b6:	f7fc fc5f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73ba:	f44f 7197 	mov.w	r1, #302	; 0x12e
    73be:	e7f9      	b.n	73b4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xe4>
    73c0:	9802      	ldr	r0, [sp, #8]
    73c2:	b130      	cbz	r0, 73d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    73c4:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    73c8:	b119      	cbz	r1, 73d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x102>
    73ca:	8800      	ldrh	r0, [r0, #0]
    73cc:	42a8      	cmp	r0, r5
    73ce:	d1de      	bne.n	738e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xbe>
    73d0:	e004      	b.n	73dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x10c>
    73d2:	4668      	mov	r0, sp
    73d4:	f7fc fe96 	bl	4104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    73d8:	2800      	cmp	r0, #0
    73da:	d0f1      	beq.n	73c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xf0>
    73dc:	2000      	movs	r0, #0
    73de:	7060      	strb	r0, [r4, #1]
    73e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    73e2:	0000      	.short	0x0000
    73e4:	200000fc 	.word	0x200000fc
    73e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    73ec:	4604      	mov	r4, r0
    73ee:	4836      	ldr	r0, [pc, #216]	; (74c8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f8>)
    73f0:	461e      	mov	r6, r3
    73f2:	4690      	mov	r8, r2
    73f4:	7880      	ldrb	r0, [r0, #2]
    73f6:	4689      	mov	r9, r1
    73f8:	2500      	movs	r5, #0
    73fa:	b368      	cbz	r0, 7458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    73fc:	f7fc f8d4 	bl	35a8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    7400:	b350      	cbz	r0, 7458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7402:	f8b4 0120 	ldrh.w	r0, [r4, #288]	; 0x120
    7406:	2802      	cmp	r0, #2
    7408:	d326      	bcc.n	7458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    740a:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    740e:	2802      	cmp	r0, #2
    7410:	d022      	beq.n	7458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7412:	f894 014a 	ldrb.w	r0, [r4, #330]	; 0x14a
    7416:	b9f8      	cbnz	r0, 7458 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x188>
    7418:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    741c:	f7ff ffa2 	bl	7364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7420:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    7424:	b281      	uxth	r1, r0
    7426:	8031      	strh	r1, [r6, #0]
    7428:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    742c:	2700      	movs	r7, #0
    742e:	2801      	cmp	r0, #1
    7430:	d015      	beq.n	745e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x18e>
    7432:	68e0      	ldr	r0, [r4, #12]
    7434:	f004 f935 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7438:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    743c:	b280      	uxth	r0, r0
    743e:	4442      	add	r2, r8
    7440:	eba2 0109 	sub.w	r1, r2, r9
    7444:	f8d4 213c 	ldr.w	r2, [r4, #316]	; 0x13c
    7448:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    744c:	1a82      	subs	r2, r0, r2
    744e:	fb01 7502 	mla	r5, r1, r2, r7
    7452:	2001      	movs	r0, #1
    7454:	f884 014a 	strb.w	r0, [r4, #330]	; 0x14a
    7458:	4628      	mov	r0, r5
    745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    745e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    7462:	2803      	cmp	r0, #3
    7464:	d02c      	beq.n	74c0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x1f0>
    7466:	2101      	movs	r1, #1
    7468:	2000      	movs	r0, #0
    746a:	f005 fd66 	bl	cf3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    746e:	6a21      	ldr	r1, [r4, #32]
    7470:	1847      	adds	r7, r0, r1
    7472:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7476:	8831      	ldrh	r1, [r6, #0]
    7478:	34d0      	adds	r4, #208	; 0xd0
    747a:	f004 f912 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    747e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    7480:	6e21      	ldr	r1, [r4, #96]	; 0x60
    7482:	1a82      	subs	r2, r0, r2
    7484:	fb01 5502 	mla	r5, r1, r2, r5
    7488:	65a0      	str	r0, [r4, #88]	; 0x58
    748a:	8831      	ldrh	r1, [r6, #0]
    748c:	4638      	mov	r0, r7
    748e:	f004 f908 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7492:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    7494:	66a0      	str	r0, [r4, #104]	; 0x68
    7496:	1a41      	subs	r1, r0, r1
    7498:	440d      	add	r5, r1
    749a:	8831      	ldrh	r1, [r6, #0]
    749c:	f854 0cc4 	ldr.w	r0, [r4, #-196]
    74a0:	f004 f8ff 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    74a4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    74a6:	4442      	add	r2, r8
    74a8:	eba2 0109 	sub.w	r1, r2, r9
    74ac:	6e22      	ldr	r2, [r4, #96]	; 0x60
    74ae:	1a89      	subs	r1, r1, r2
    74b0:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    74b2:	1e49      	subs	r1, r1, #1
    74b4:	1a82      	subs	r2, r0, r2
    74b6:	fb01 5502 	mla	r5, r1, r2, r5
    74ba:	66e0      	str	r0, [r4, #108]	; 0x6c
    74bc:	3cd0      	subs	r4, #208	; 0xd0
    74be:	e7c8      	b.n	7452 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x182>
    74c0:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    74c4:	e7d3      	b.n	746e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x19e>
    74c6:	0000      	.short	0x0000
    74c8:	200000fc 	.word	0x200000fc
    74cc:	b538      	push	{r3, r4, r5, lr}
    74ce:	2500      	movs	r5, #0
    74d0:	4604      	mov	r4, r0
    74d2:	2901      	cmp	r1, #1
    74d4:	d102      	bne.n	74dc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x20c>
    74d6:	4811      	ldr	r0, [pc, #68]	; (751c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24c>)
    74d8:	7840      	ldrb	r0, [r0, #1]
    74da:	b178      	cbz	r0, 74fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22c>
    74dc:	2004      	movs	r0, #4
    74de:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    74e2:	bf00      	nop
    74e4:	f006 fd15 	bl	df12 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    74e8:	f8a4 5166 	strh.w	r5, [r4, #358]	; 0x166
    74ec:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    74f0:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    74f4:	f504 7495 	add.w	r4, r4, #298	; 0x12a
    74f8:	77e5      	strb	r5, [r4, #31]
    74fa:	bd38      	pop	{r3, r4, r5, pc}
    74fc:	9500      	str	r5, [sp, #0]
    74fe:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    7502:	2301      	movs	r3, #1
    7504:	2200      	movs	r2, #0
    7506:	4620      	mov	r0, r4
    7508:	f000 f80a 	bl	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    750c:	2800      	cmp	r0, #0
    750e:	d0e9      	beq.n	74e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x214>
    7510:	f240 61d4 	movw	r1, #1748	; 0x6d4
    7514:	2030      	movs	r0, #48	; 0x30
    7516:	f7fc fbaf 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    751a:	0000      	.short	0x0000
    751c:	200000fc 	.word	0x200000fc
    7520:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7524:	4604      	mov	r4, r0
    7526:	b085      	sub	sp, #20
    7528:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    752c:	469a      	mov	sl, r3
    752e:	e9cd 3000 	strd	r3, r0, [sp]
    7532:	460f      	mov	r7, r1
    7534:	f007 ff81 	bl	f43a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    7538:	4605      	mov	r5, r0
    753a:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    753e:	f7ff ff11 	bl	7364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    7542:	4428      	add	r0, r5
    7544:	f8ad 0008 	strh.w	r0, [sp, #8]
    7548:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    754c:	280d      	cmp	r0, #13
    754e:	d004      	beq.n	755a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x28a>
    7550:	2000      	movs	r0, #0
    7552:	9003      	str	r0, [sp, #12]
    7554:	9807      	ldr	r0, [sp, #28]
    7556:	b110      	cbz	r0, 755e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x28e>
    7558:	e02e      	b.n	75b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    755a:	2001      	movs	r0, #1
    755c:	e7f9      	b.n	7552 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x282>
    755e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    7562:	2803      	cmp	r0, #3
    7564:	d128      	bne.n	75b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    7566:	9803      	ldr	r0, [sp, #12]
    7568:	b330      	cbz	r0, 75b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    756a:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    756e:	42b8      	cmp	r0, r7
    7570:	d122      	bne.n	75b8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x2e8>
    7572:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    7576:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    757a:	68e0      	ldr	r0, [r4, #12]
    757c:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
    7580:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    7584:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    7588:	4408      	add	r0, r1
    758a:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
    758e:	4620      	mov	r0, r4
    7590:	f006 ff09 	bl	e3a6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    7594:	f8d4 0198 	ldr.w	r0, [r4, #408]	; 0x198
    7598:	6220      	str	r0, [r4, #32]
    759a:	f8b4 0196 	ldrh.w	r0, [r4, #406]	; 0x196
    759e:	83a0      	strh	r0, [r4, #28]
    75a0:	f8d4 019c 	ldr.w	r0, [r4, #412]	; 0x19c
    75a4:	60e0      	str	r0, [r4, #12]
    75a6:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    75aa:	82a0      	strh	r0, [r4, #20]
    75ac:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    75b0:	82e0      	strh	r0, [r4, #22]
    75b2:	2002      	movs	r0, #2
    75b4:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    75b8:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    75bc:	f504 75a6 	add.w	r5, r4, #332	; 0x14c
    75c0:	1a38      	subs	r0, r7, r0
    75c2:	fa0f f980 	sxth.w	r9, r0
    75c6:	f8b4 0164 	ldrh.w	r0, [r4, #356]	; 0x164
    75ca:	1a38      	subs	r0, r7, r0
    75cc:	fa0f f880 	sxth.w	r8, r0
    75d0:	f1b8 0f00 	cmp.w	r8, #0
    75d4:	da06      	bge.n	75e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x314>
    75d6:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    75da:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    75de:	2001      	movs	r0, #1
    75e0:	46c8      	mov	r8, r9
    75e2:	9000      	str	r0, [sp, #0]
    75e4:	ab02      	add	r3, sp, #8
    75e6:	464a      	mov	r2, r9
    75e8:	4641      	mov	r1, r8
    75ea:	4620      	mov	r0, r4
    75ec:	f7ff fefc 	bl	73e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x118>
    75f0:	9004      	str	r0, [sp, #16]
    75f2:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    75f6:	f8df b344 	ldr.w	fp, [pc, #836]	; 793c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x66c>
    75fa:	b140      	cbz	r0, 760e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x33e>
    75fc:	2801      	cmp	r0, #1
    75fe:	d07d      	beq.n	76fc <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x42c>
    7600:	2802      	cmp	r0, #2
    7602:	d052      	beq.n	76aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x3da>
    7604:	2803      	cmp	r0, #3
    7606:	d07a      	beq.n	76fe <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x42e>
    7608:	f240 5157 	movw	r1, #1367	; 0x557
    760c:	e192      	b.n	7934 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    760e:	2101      	movs	r1, #1
    7610:	2000      	movs	r0, #0
    7612:	f005 fc92 	bl	cf3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    7616:	4606      	mov	r6, r0
    7618:	6a20      	ldr	r0, [r4, #32]
    761a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    761e:	4430      	add	r0, r6
    7620:	f004 f83f 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7624:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    7628:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    762c:	68e0      	ldr	r0, [r4, #12]
    762e:	f004 f838 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    7632:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    7636:	a901      	add	r1, sp, #4
    7638:	4668      	mov	r0, sp
    763a:	f003 fa1b 	bl	aa74 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    763e:	e9dd 1200 	ldrd	r1, r2, [sp]
    7642:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    7646:	f7fa ffff 	bl	2648 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    764a:	4681      	mov	r9, r0
    764c:	4620      	mov	r0, r4
    764e:	f006 fc52 	bl	def6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    7652:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7656:	f8d4 816c 	ldr.w	r8, [r4, #364]	; 0x16c
    765a:	f007 ff95 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    765e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    7662:	4401      	add	r1, r0
    7664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7668:	fbb1 f0f0 	udiv	r0, r1, r0
    766c:	6a21      	ldr	r1, [r4, #32]
    766e:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    7672:	4431      	add	r1, r6
    7674:	1a08      	subs	r0, r1, r0
    7676:	1a81      	subs	r1, r0, r2
    7678:	4441      	add	r1, r8
    767a:	3920      	subs	r1, #32
    767c:	eba1 0609 	sub.w	r6, r1, r9
    7680:	0050      	lsls	r0, r2, #1
    7682:	8ba1      	ldrh	r1, [r4, #28]
    7684:	3060      	adds	r0, #96	; 0x60
    7686:	4401      	add	r1, r0
    7688:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    768c:	f006 fca3 	bl	dfd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    7690:	3022      	adds	r0, #34	; 0x22
    7692:	f8cb 0010 	str.w	r0, [fp, #16]
    7696:	f8d4 016c 	ldr.w	r0, [r4, #364]	; 0x16c
    769a:	4659      	mov	r1, fp
    769c:	1a30      	subs	r0, r6, r0
    769e:	f5b0 7fd8 	cmp.w	r0, #432	; 0x1b0
    76a2:	d259      	bcs.n	7758 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x488>
    76a4:	f44f 619e 	mov.w	r1, #1264	; 0x4f0
    76a8:	e144      	b.n	7934 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    76aa:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    76ae:	6a20      	ldr	r0, [r4, #32]
    76b0:	4408      	add	r0, r1
    76b2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    76b6:	f003 fff4 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76ba:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
    76be:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    76c2:	68e0      	ldr	r0, [r4, #12]
    76c4:	f003 ffed 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    76c8:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    76cc:	4620      	mov	r0, r4
    76ce:	f006 fc12 	bl	def6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d4>
    76d2:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    76d6:	bb10      	cbnz	r0, 771e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44e>
    76d8:	f1ba 0f00 	cmp.w	sl, #0
    76dc:	d01f      	beq.n	771e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x44e>
    76de:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    76e2:	4640      	mov	r0, r8
    76e4:	f007 ff50 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    76e8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    76ec:	4401      	add	r1, r0
    76ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    76f2:	fbb1 f0f0 	udiv	r0, r1, r0
    76f6:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    76fa:	e001      	b.n	7700 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x430>
    76fc:	e02d      	b.n	775a <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x48a>
    76fe:	e049      	b.n	7794 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4c4>
    7700:	4408      	add	r0, r1
    7702:	6a22      	ldr	r2, [r4, #32]
    7704:	f8d4 112c 	ldr.w	r1, [r4, #300]	; 0x12c
    7708:	4411      	add	r1, r2
    770a:	1a0e      	subs	r6, r1, r0
    770c:	4640      	mov	r0, r8
    770e:	f007 ff2d 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    7712:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    7716:	1a08      	subs	r0, r1, r0
    7718:	4406      	add	r6, r0
    771a:	3e20      	subs	r6, #32
    771c:	e006      	b.n	772c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x45c>
    771e:	6a21      	ldr	r1, [r4, #32]
    7720:	f8d4 012c 	ldr.w	r0, [r4, #300]	; 0x12c
    7724:	4408      	add	r0, r1
    7726:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
    772a:	1a46      	subs	r6, r0, r1
    772c:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    7730:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
    7734:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    7738:	fb01 0002 	mla	r0, r1, r2, r0
    773c:	0040      	lsls	r0, r0, #1
    773e:	8ba1      	ldrh	r1, [r4, #28]
    7740:	3060      	adds	r0, #96	; 0x60
    7742:	4401      	add	r1, r0
    7744:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7748:	f006 fc45 	bl	dfd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    774c:	f8cb 0010 	str.w	r0, [fp, #16]
    7750:	2001      	movs	r0, #1
    7752:	4659      	mov	r1, fp
    7754:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    7758:	e062      	b.n	7820 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x550>
    775a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    775e:	68e0      	ldr	r0, [r4, #12]
    7760:	f8b4 210e 	ldrh.w	r2, [r4, #270]	; 0x10e
    7764:	1a46      	subs	r6, r0, r1
    7766:	eb02 0009 	add.w	r0, r2, r9
    776a:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
    776e:	f8d4 c128 	ldr.w	ip, [r4, #296]	; 0x128
    7772:	1a80      	subs	r0, r0, r2
    7774:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    7778:	1e40      	subs	r0, r0, #1
    777a:	fb0c 3202 	mla	r2, ip, r2, r3
    777e:	fb00 2001 	mla	r0, r0, r1, r2
    7782:	0040      	lsls	r0, r0, #1
    7784:	8ba1      	ldrh	r1, [r4, #28]
    7786:	3060      	adds	r0, #96	; 0x60
    7788:	4401      	add	r1, r0
    778a:	fb06 f608 	mul.w	r6, r6, r8
    778e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7792:	e040      	b.n	7816 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x546>
    7794:	68e0      	ldr	r0, [r4, #12]
    7796:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    779a:	fb00 f008 	mul.w	r0, r0, r8
    779e:	fb08 0611 	mls	r6, r8, r1, r0
    77a2:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    77a6:	2824      	cmp	r0, #36	; 0x24
    77a8:	d003      	beq.n	77b2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4e2>
    77aa:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    77ae:	2824      	cmp	r0, #36	; 0x24
    77b0:	d109      	bne.n	77c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    77b2:	f8b4 0194 	ldrh.w	r0, [r4, #404]	; 0x194
    77b6:	1a38      	subs	r0, r7, r0
    77b8:	b200      	sxth	r0, r0
    77ba:	2800      	cmp	r0, #0
    77bc:	db03      	blt.n	77c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    77be:	f894 0197 	ldrb.w	r0, [r4, #407]	; 0x197
    77c2:	b100      	cbz	r0, 77c6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x4f6>
    77c4:	9001      	str	r0, [sp, #4]
    77c6:	9800      	ldr	r0, [sp, #0]
    77c8:	b1d8      	cbz	r0, 7802 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x532>
    77ca:	f8b4 010e 	ldrh.w	r0, [r4, #270]	; 0x10e
    77ce:	b9c0      	cbnz	r0, 7802 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x532>
    77d0:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
    77d4:	2800      	cmp	r0, #0
    77d6:	d07c      	beq.n	78d2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x602>
    77d8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    77dc:	f007 fed4 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    77e0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    77e4:	4401      	add	r1, r0
    77e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77ea:	fbb1 f0f0 	udiv	r0, r1, r0
    77ee:	1a36      	subs	r6, r6, r0
    77f0:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    77f4:	f007 feba 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    77f8:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    77fc:	1a08      	subs	r0, r1, r0
    77fe:	4406      	add	r6, r0
    7800:	3e20      	subs	r6, #32
    7802:	f8b4 110e 	ldrh.w	r1, [r4, #270]	; 0x10e
    7806:	eb01 0009 	add.w	r0, r1, r9
    780a:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    780e:	4348      	muls	r0, r1
    7810:	0041      	lsls	r1, r0, #1
    7812:	3160      	adds	r1, #96	; 0x60
    7814:	9801      	ldr	r0, [sp, #4]
    7816:	f006 fbde 	bl	dfd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b4>
    781a:	4659      	mov	r1, fp
    781c:	f8cb 0010 	str.w	r0, [fp, #16]
    7820:	9804      	ldr	r0, [sp, #16]
    7822:	6909      	ldr	r1, [r1, #16]
    7824:	1a33      	subs	r3, r6, r0
    7826:	f8d4 613c 	ldr.w	r6, [r4, #316]	; 0x13c
    782a:	68e0      	ldr	r0, [r4, #12]
    782c:	1b80      	subs	r0, r0, r6
    782e:	f2a0 203e 	subw	r0, r0, #574	; 0x23e
    7832:	f8cb 0014 	str.w	r0, [fp, #20]
    7836:	4281      	cmp	r1, r0
    7838:	d800      	bhi.n	783c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x56c>
    783a:	4608      	mov	r0, r1
    783c:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    7840:	2000      	movs	r0, #0
    7842:	7028      	strb	r0, [r5, #0]
    7844:	2064      	movs	r0, #100	; 0x64
    7846:	8128      	strh	r0, [r5, #8]
    7848:	4619      	mov	r1, r3
    784a:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    784e:	f7f9 fe4b 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7852:	60e8      	str	r0, [r5, #12]
    7854:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7858:	f005 ff2e 	bl	d6b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    785c:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    7860:	4408      	add	r0, r1
    7862:	6068      	str	r0, [r5, #4]
    7864:	68e8      	ldr	r0, [r5, #12]
    7866:	f8c4 0160 	str.w	r0, [r4, #352]	; 0x160
    786a:	f8a4 7164 	strh.w	r7, [r4, #356]	; 0x164
    786e:	2001      	movs	r0, #1
    7870:	72a8      	strb	r0, [r5, #10]
    7872:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    7876:	1bc9      	subs	r1, r1, r7
    7878:	b209      	sxth	r1, r1
    787a:	2900      	cmp	r1, #0
    787c:	dd01      	ble.n	7882 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5b2>
    787e:	2103      	movs	r1, #3
    7880:	72a9      	strb	r1, [r5, #10]
    7882:	9903      	ldr	r1, [sp, #12]
    7884:	b331      	cbz	r1, 78d4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x604>
    7886:	f1ba 0f00 	cmp.w	sl, #0
    788a:	d026      	beq.n	78da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    788c:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
    7890:	b392      	cbz	r2, 78f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x628>
    7892:	f8b4 1122 	ldrh.w	r1, [r4, #290]	; 0x122
    7896:	bf00      	nop
    7898:	f8a4 1122 	strh.w	r1, [r4, #290]	; 0x122
    789c:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    78a0:	1c49      	adds	r1, r1, #1
    78a2:	434b      	muls	r3, r1
    78a4:	4293      	cmp	r3, r2
    78a6:	d218      	bcs.n	78da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    78a8:	7aa9      	ldrb	r1, [r5, #10]
    78aa:	1e49      	subs	r1, r1, #1
    78ac:	2900      	cmp	r1, #0
    78ae:	dd14      	ble.n	78da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    78b0:	72a8      	strb	r0, [r5, #10]
    78b2:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    78b6:	2101      	movs	r1, #1
    78b8:	1c40      	adds	r0, r0, #1
    78ba:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    78be:	f504 7092 	add.w	r0, r4, #292	; 0x124
    78c2:	f7fc fa65 	bl	3d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    78c6:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
    78ca:	f000 0007 	and.w	r0, r0, #7
    78ce:	1c40      	adds	r0, r0, #1
    78d0:	e001      	b.n	78d6 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x606>
    78d2:	e012      	b.n	78fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x62a>
    78d4:	e014      	b.n	7900 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x630>
    78d6:	f884 0124 	strb.w	r0, [r4, #292]	; 0x124
    78da:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    78de:	4629      	mov	r1, r5
    78e0:	f006 fb8b 	bl	dffa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    78e4:	b320      	cbz	r0, 7930 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x660>
    78e6:	9807      	ldr	r0, [sp, #28]
    78e8:	f080 0001 	eor.w	r0, r0, #1
    78ec:	f884 0148 	strb.w	r0, [r4, #328]	; 0x148
    78f0:	2000      	movs	r0, #0
    78f2:	b009      	add	sp, #36	; 0x24
    78f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    78f8:	e018      	b.n	792c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x65c>
    78fa:	f240 5142 	movw	r1, #1346	; 0x542
    78fe:	e019      	b.n	7934 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x664>
    7900:	f1ba 0f00 	cmp.w	sl, #0
    7904:	d1c2      	bne.n	788c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5bc>
    7906:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    790a:	2800      	cmp	r0, #0
    790c:	d0e5      	beq.n	78da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    790e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7912:	68e0      	ldr	r0, [r4, #12]
    7914:	1a41      	subs	r1, r0, r1
    7916:	4628      	mov	r0, r5
    7918:	f005 fb21 	bl	cf5e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    791c:	0400      	lsls	r0, r0, #16
    791e:	0c00      	lsrs	r0, r0, #16
    7920:	d0db      	beq.n	78da <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x60a>
    7922:	9912      	ldr	r1, [sp, #72]	; 0x48
    7924:	b101      	cbz	r1, 7928 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x658>
    7926:	8008      	strh	r0, [r1, #0]
    7928:	2001      	movs	r0, #1
    792a:	e7e2      	b.n	78f2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x622>
    792c:	2100      	movs	r1, #0
    792e:	e7b3      	b.n	7898 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x5c8>
    7930:	f240 51a2 	movw	r1, #1442	; 0x5a2
    7934:	2030      	movs	r0, #48	; 0x30
    7936:	f7fc f99f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    793a:	0000      	.short	0x0000
    793c:	200000fc 	.word	0x200000fc
    7940:	b570      	push	{r4, r5, r6, lr}
    7942:	b140      	cbz	r0, 7956 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x686>
    7944:	2909      	cmp	r1, #9
    7946:	d24a      	bcs.n	79de <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x70e>
    7948:	e8df f001 	tbb	[pc, r1]
    794c:	3d3d1707 	.word	0x3d3d1707
    7950:	412b4939 	.word	0x412b4939
    7954:	0045      	.short	0x0045
    7956:	21d3      	movs	r1, #211	; 0xd3
    7958:	e03e      	b.n	79d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    795a:	4922      	ldr	r1, [pc, #136]	; (79e4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x714>)
    795c:	4604      	mov	r4, r0
    795e:	6188      	str	r0, [r1, #24]
    7960:	f7fe fe0e 	bl	6580 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    7964:	b110      	cbz	r0, 796c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x69c>
    7966:	f240 217f 	movw	r1, #639	; 0x27f
    796a:	e035      	b.n	79d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    796c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
    7970:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7974:	38f7      	subs	r0, #247	; 0xf7
    7976:	f7fa bdb1 	b.w	24dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    797a:	4605      	mov	r5, r0
    797c:	f005 ffe2 	bl	d944 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7980:	b9a8      	cbnz	r0, 79ae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6de>
    7982:	4628      	mov	r0, r5
    7984:	f006 fa8e 	bl	dea4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    7988:	4604      	mov	r4, r0
    798a:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    798e:	42a0      	cmp	r0, r4
    7990:	d20b      	bcs.n	79aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6da>
    7992:	1a20      	subs	r0, r4, r0
    7994:	2104      	movs	r1, #4
    7996:	f7f9 fcd5 	bl	1344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    799a:	b130      	cbz	r0, 79aa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x6da>
    799c:	4628      	mov	r0, r5
    799e:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    79a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79a6:	f005 bfa2 	b.w	d8ee <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    79aa:	f8c5 40bc 	str.w	r4, [r5, #188]	; 0xbc
    79ae:	4628      	mov	r0, r5
    79b0:	f7fe fe02 	bl	65b8 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    79b4:	2800      	cmp	r0, #0
    79b6:	d014      	beq.n	79e2 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x712>
    79b8:	f240 21b3 	movw	r1, #691	; 0x2b3
    79bc:	e00c      	b.n	79d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    79be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79c2:	f003 badd 	b.w	af80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    79c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79ca:	f006 ba07 	b.w	dddc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xba>
    79ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79d2:	f006 ba5e 	b.w	de92 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    79d6:	21f5      	movs	r1, #245	; 0xf5
    79d8:	2030      	movs	r0, #48	; 0x30
    79da:	f7fc f94d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79de:	21f9      	movs	r1, #249	; 0xf9
    79e0:	e7fa      	b.n	79d8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x708>
    79e2:	bd70      	pop	{r4, r5, r6, pc}
    79e4:	200000fc 	.word	0x200000fc
    79e8:	b570      	push	{r4, r5, r6, lr}
    79ea:	4604      	mov	r4, r0
    79ec:	f7f9 fed8 	bl	17a0 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    79f0:	2864      	cmp	r0, #100	; 0x64
    79f2:	d901      	bls.n	79f8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x728>
    79f4:	4605      	mov	r5, r0
    79f6:	e000      	b.n	79fa <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x72a>
    79f8:	2564      	movs	r5, #100	; 0x64
    79fa:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    79fe:	2128      	movs	r1, #40	; 0x28
    7a00:	f006 f9ea 	bl	ddd8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7a04:	4428      	add	r0, r5
    7a06:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
    7a0a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    7a0e:	180e      	adds	r6, r1, r0
    7a10:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    7a14:	2128      	movs	r1, #40	; 0x28
    7a16:	f006 f9df 	bl	ddd8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb6>
    7a1a:	f500 7227 	add.w	r2, r0, #668	; 0x29c
    7a1e:	4620      	mov	r0, r4
    7a20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7a22:	f005 fde8 	bl	d5f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7a26:	4605      	mov	r5, r0
    7a28:	4632      	mov	r2, r6
    7a2a:	4620      	mov	r0, r4
    7a2c:	68e1      	ldr	r1, [r4, #12]
    7a2e:	f005 fde2 	bl	d5f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    7a32:	4907      	ldr	r1, [pc, #28]	; (7a50 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x780>)
    7a34:	4285      	cmp	r5, r0
    7a36:	6088      	str	r0, [r1, #8]
    7a38:	d200      	bcs.n	7a3c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x76c>
    7a3a:	4628      	mov	r0, r5
    7a3c:	6048      	str	r0, [r1, #4]
    7a3e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7a42:	f2a0 1065 	subw	r0, r0, #357	; 0x165
    7a46:	60c8      	str	r0, [r1, #12]
    7a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a4c:	f7fa bd46 	b.w	24dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7a50:	200000fc 	.word	0x200000fc

00007a54 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    7a54:	4806      	ldr	r0, [pc, #24]	; (7a70 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    7a56:	4905      	ldr	r1, [pc, #20]	; (7a6c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    7a58:	6501      	str	r1, [r0, #80]	; 0x50
    7a5a:	4906      	ldr	r1, [pc, #24]	; (7a74 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    7a5c:	6541      	str	r1, [r0, #84]	; 0x54
    7a5e:	4807      	ldr	r0, [pc, #28]	; (7a7c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    7a60:	4905      	ldr	r1, [pc, #20]	; (7a78 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    7a62:	6501      	str	r1, [r0, #80]	; 0x50
    7a64:	4906      	ldr	r1, [pc, #24]	; (7a80 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    7a66:	6541      	str	r1, [r0, #84]	; 0x54
    7a68:	4770      	bx	lr
    7a6a:	0000      	.short	0x0000
    7a6c:	00008fb5 	.word	0x00008fb5
    7a70:	2000012c 	.word	0x2000012c
    7a74:	00009091 	.word	0x00009091
    7a78:	000096ed 	.word	0x000096ed
    7a7c:	20000190 	.word	0x20000190
    7a80:	0000971d 	.word	0x0000971d

00007a84 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA>:
    7a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a86:	460d      	mov	r5, r1
    7a88:	4607      	mov	r7, r0
    7a8a:	2100      	movs	r1, #0
    7a8c:	f004 ff41 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7a90:	1e04      	subs	r4, r0, #0
    7a92:	d04f      	beq.n	7b34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7a94:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
    7a98:	2800      	cmp	r0, #0
    7a9a:	d04b      	beq.n	7b34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7a9c:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7aa0:	f88d 0000 	strb.w	r0, [sp]
    7aa4:	9800      	ldr	r0, [sp, #0]
    7aa6:	9000      	str	r0, [sp, #0]
    7aa8:	f89d 0000 	ldrb.w	r0, [sp]
    7aac:	2600      	movs	r6, #0
    7aae:	b1d8      	cbz	r0, 7ae8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x64>
    7ab0:	706e      	strb	r6, [r5, #1]
    7ab2:	2007      	movs	r0, #7
    7ab4:	7028      	strb	r0, [r5, #0]
    7ab6:	e00b      	b.n	7ad0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x4c>
    7ab8:	f884 61b8 	strb.w	r6, [r4, #440]	; 0x1b8
    7abc:	84a6      	strh	r6, [r4, #36]	; 0x24
    7abe:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    7ac2:	6068      	str	r0, [r5, #4]
    7ac4:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    7ac8:	60a8      	str	r0, [r5, #8]
    7aca:	f8b4 01c2 	ldrh.w	r0, [r4, #450]	; 0x1c2
    7ace:	81a8      	strh	r0, [r5, #12]
    7ad0:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    7ad4:	f88d 0000 	strb.w	r0, [sp]
    7ad8:	9800      	ldr	r0, [sp, #0]
    7ada:	9000      	str	r0, [sp, #0]
    7adc:	f89d 0000 	ldrb.w	r0, [sp]
    7ae0:	2800      	cmp	r0, #0
    7ae2:	d1e9      	bne.n	7ab8 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x34>
    7ae4:	712e      	strb	r6, [r5, #4]
    7ae6:	e10b      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7ae8:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7aec:	b3a0      	cbz	r0, 7b58 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd4>
    7aee:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    7af2:	280b      	cmp	r0, #11
    7af4:	d016      	beq.n	7b24 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xa0>
    7af6:	280c      	cmp	r0, #12
    7af8:	d004      	beq.n	7b04 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x80>
    7afa:	f640 21e9 	movw	r1, #2793	; 0xae9
    7afe:	2031      	movs	r0, #49	; 0x31
    7b00:	f7fc f8ba 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b04:	8820      	ldrh	r0, [r4, #0]
    7b06:	f7fc fcdf 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7b0a:	4607      	mov	r7, r0
    7b0c:	f004 fdc7 	bl	c69e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7b10:	b978      	cbnz	r0, 7b32 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xae>
    7b12:	706e      	strb	r6, [r5, #1]
    7b14:	200c      	movs	r0, #12
    7b16:	7028      	strb	r0, [r5, #0]
    7b18:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7b1c:	7128      	strb	r0, [r5, #4]
    7b1e:	8820      	ldrh	r0, [r4, #0]
    7b20:	80e8      	strh	r0, [r5, #6]
    7b22:	e013      	b.n	7b4c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xc8>
    7b24:	8820      	ldrh	r0, [r4, #0]
    7b26:	f7fc fccf 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7b2a:	4607      	mov	r7, r0
    7b2c:	f004 fdb7 	bl	c69e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    7b30:	b108      	cbz	r0, 7b36 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb2>
    7b32:	2000      	movs	r0, #0
    7b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b36:	706e      	strb	r6, [r5, #1]
    7b38:	200b      	movs	r0, #11
    7b3a:	7028      	strb	r0, [r5, #0]
    7b3c:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    7b40:	7128      	strb	r0, [r5, #4]
    7b42:	8820      	ldrh	r0, [r4, #0]
    7b44:	80e8      	strh	r0, [r5, #6]
    7b46:	f894 01ca 	ldrb.w	r0, [r4, #458]	; 0x1ca
    7b4a:	7228      	strb	r0, [r5, #8]
    7b4c:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
    7b50:	4638      	mov	r0, r7
    7b52:	f004 fdbf 	bl	c6d4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7b56:	e0d3      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b58:	e7ff      	b.n	7b5a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xd6>
    7b5a:	f894 01fa 	ldrb.w	r0, [r4, #506]	; 0x1fa
    7b5e:	f88d 0000 	strb.w	r0, [sp]
    7b62:	9800      	ldr	r0, [sp, #0]
    7b64:	9000      	str	r0, [sp, #0]
    7b66:	f89d 0000 	ldrb.w	r0, [sp]
    7b6a:	b130      	cbz	r0, 7b7a <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xf6>
    7b6c:	706e      	strb	r6, [r5, #1]
    7b6e:	200e      	movs	r0, #14
    7b70:	7028      	strb	r0, [r5, #0]
    7b72:	80af      	strh	r7, [r5, #4]
    7b74:	f884 61fa 	strb.w	r6, [r4, #506]	; 0x1fa
    7b78:	e0c2      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7b7a:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    7b7e:	f88d 0000 	strb.w	r0, [sp]
    7b82:	9800      	ldr	r0, [sp, #0]
    7b84:	9000      	str	r0, [sp, #0]
    7b86:	f89d 0000 	ldrb.w	r0, [sp]
    7b8a:	b198      	cbz	r0, 7bb4 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x130>
    7b8c:	706e      	strb	r6, [r5, #1]
    7b8e:	2008      	movs	r0, #8
    7b90:	7028      	strb	r0, [r5, #0]
    7b92:	8820      	ldrh	r0, [r4, #0]
    7b94:	80a8      	strh	r0, [r5, #4]
    7b96:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
    7b9a:	f8c5 1006 	str.w	r1, [r5, #6]
    7b9e:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
    7ba2:	f8c5 100a 	str.w	r1, [r5, #10]
    7ba6:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    7baa:	81e8      	strh	r0, [r5, #14]
    7bac:	f504 74e6 	add.w	r4, r4, #460	; 0x1cc
    7bb0:	7026      	strb	r6, [r4, #0]
    7bb2:	e0a5      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bb4:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7bb8:	f88d 0000 	strb.w	r0, [sp]
    7bbc:	9800      	ldr	r0, [sp, #0]
    7bbe:	9000      	str	r0, [sp, #0]
    7bc0:	f89d 0000 	ldrb.w	r0, [sp]
    7bc4:	b1a0      	cbz	r0, 7bf0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x16c>
    7bc6:	706e      	strb	r6, [r5, #1]
    7bc8:	2016      	movs	r0, #22
    7bca:	7028      	strb	r0, [r5, #0]
    7bcc:	e005      	b.n	7bda <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x156>
    7bce:	bf00      	nop
    7bd0:	f884 61f4 	strb.w	r6, [r4, #500]	; 0x1f4
    7bd4:	f8d4 01f6 	ldr.w	r0, [r4, #502]	; 0x1f6
    7bd8:	6068      	str	r0, [r5, #4]
    7bda:	f894 01f4 	ldrb.w	r0, [r4, #500]	; 0x1f4
    7bde:	f88d 0000 	strb.w	r0, [sp]
    7be2:	9800      	ldr	r0, [sp, #0]
    7be4:	9000      	str	r0, [sp, #0]
    7be6:	f89d 0000 	ldrb.w	r0, [sp]
    7bea:	2800      	cmp	r0, #0
    7bec:	d1f0      	bne.n	7bd0 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x14c>
    7bee:	e087      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7bf0:	f894 020a 	ldrb.w	r0, [r4, #522]	; 0x20a
    7bf4:	f88d 0000 	strb.w	r0, [sp]
    7bf8:	9800      	ldr	r0, [sp, #0]
    7bfa:	9000      	str	r0, [sp, #0]
    7bfc:	f89d 0000 	ldrb.w	r0, [sp]
    7c00:	b170      	cbz	r0, 7c20 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x19c>
    7c02:	706e      	strb	r6, [r5, #1]
    7c04:	2006      	movs	r0, #6
    7c06:	7028      	strb	r0, [r5, #0]
    7c08:	f8d4 020c 	ldr.w	r0, [r4, #524]	; 0x20c
    7c0c:	6068      	str	r0, [r5, #4]
    7c0e:	f8d4 0210 	ldr.w	r0, [r4, #528]	; 0x210
    7c12:	60a8      	str	r0, [r5, #8]
    7c14:	f8d4 0214 	ldr.w	r0, [r4, #532]	; 0x214
    7c18:	60e8      	str	r0, [r5, #12]
    7c1a:	f504 7403 	add.w	r4, r4, #524	; 0x20c
    7c1e:	e03a      	b.n	7c96 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x212>
    7c20:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7c24:	f88d 0000 	strb.w	r0, [sp]
    7c28:	9800      	ldr	r0, [sp, #0]
    7c2a:	9000      	str	r0, [sp, #0]
    7c2c:	f89d 0000 	ldrb.w	r0, [sp]
    7c30:	b1d0      	cbz	r0, 7c68 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1e4>
    7c32:	706e      	strb	r6, [r5, #1]
    7c34:	2012      	movs	r0, #18
    7c36:	7028      	strb	r0, [r5, #0]
    7c38:	e00b      	b.n	7c52 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1ce>
    7c3a:	bf00      	nop
    7c3c:	f884 61da 	strb.w	r6, [r4, #474]	; 0x1da
    7c40:	f8d4 01dc 	ldr.w	r0, [r4, #476]	; 0x1dc
    7c44:	6068      	str	r0, [r5, #4]
    7c46:	f8d4 01e0 	ldr.w	r0, [r4, #480]	; 0x1e0
    7c4a:	60a8      	str	r0, [r5, #8]
    7c4c:	f8d4 01e4 	ldr.w	r0, [r4, #484]	; 0x1e4
    7c50:	60e8      	str	r0, [r5, #12]
    7c52:	f894 01da 	ldrb.w	r0, [r4, #474]	; 0x1da
    7c56:	f88d 0000 	strb.w	r0, [sp]
    7c5a:	9800      	ldr	r0, [sp, #0]
    7c5c:	9000      	str	r0, [sp, #0]
    7c5e:	f89d 0000 	ldrb.w	r0, [sp]
    7c62:	2800      	cmp	r0, #0
    7c64:	d1ea      	bne.n	7c3c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x1b8>
    7c66:	e04b      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c68:	f894 01e8 	ldrb.w	r0, [r4, #488]	; 0x1e8
    7c6c:	f88d 0000 	strb.w	r0, [sp]
    7c70:	9800      	ldr	r0, [sp, #0]
    7c72:	9000      	str	r0, [sp, #0]
    7c74:	f89d 0000 	ldrb.w	r0, [sp]
    7c78:	b180      	cbz	r0, 7c9c <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x218>
    7c7a:	706e      	strb	r6, [r5, #1]
    7c7c:	2018      	movs	r0, #24
    7c7e:	7028      	strb	r0, [r5, #0]
    7c80:	f8d4 01ea 	ldr.w	r0, [r4, #490]	; 0x1ea
    7c84:	6068      	str	r0, [r5, #4]
    7c86:	f8d4 01ee 	ldr.w	r0, [r4, #494]	; 0x1ee
    7c8a:	60a8      	str	r0, [r5, #8]
    7c8c:	f8b4 01f2 	ldrh.w	r0, [r4, #498]	; 0x1f2
    7c90:	81a8      	strh	r0, [r5, #12]
    7c92:	f504 74f5 	add.w	r4, r4, #490	; 0x1ea
    7c96:	f804 6c02 	strb.w	r6, [r4, #-2]
    7c9a:	e031      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7c9c:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
    7ca0:	f88d 0000 	strb.w	r0, [sp]
    7ca4:	9800      	ldr	r0, [sp, #0]
    7ca6:	9000      	str	r0, [sp, #0]
    7ca8:	f89d 0000 	ldrb.w	r0, [sp]
    7cac:	b138      	cbz	r0, 7cbe <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x23a>
    7cae:	2019      	movs	r0, #25
    7cb0:	7028      	strb	r0, [r5, #0]
    7cb2:	f8d4 01fe 	ldr.w	r0, [r4, #510]	; 0x1fe
    7cb6:	6068      	str	r0, [r5, #4]
    7cb8:	f884 61fc 	strb.w	r6, [r4, #508]	; 0x1fc
    7cbc:	e020      	b.n	7d00 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x27c>
    7cbe:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7cc2:	f88d 0000 	strb.w	r0, [sp]
    7cc6:	9800      	ldr	r0, [sp, #0]
    7cc8:	9000      	str	r0, [sp, #0]
    7cca:	f89d 0000 	ldrb.w	r0, [sp]
    7cce:	2800      	cmp	r0, #0
    7cd0:	f43f af30 	beq.w	7b34 <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0xb0>
    7cd4:	706e      	strb	r6, [r5, #1]
    7cd6:	2013      	movs	r0, #19
    7cd8:	7028      	strb	r0, [r5, #0]
    7cda:	e007      	b.n	7cec <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x268>
    7cdc:	f884 6202 	strb.w	r6, [r4, #514]	; 0x202
    7ce0:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
    7ce4:	6068      	str	r0, [r5, #4]
    7ce6:	f8b4 0208 	ldrh.w	r0, [r4, #520]	; 0x208
    7cea:	8128      	strh	r0, [r5, #8]
    7cec:	f894 0202 	ldrb.w	r0, [r4, #514]	; 0x202
    7cf0:	f88d 0000 	strb.w	r0, [sp]
    7cf4:	9800      	ldr	r0, [sp, #0]
    7cf6:	9000      	str	r0, [sp, #0]
    7cf8:	f89d 0000 	ldrb.w	r0, [sp]
    7cfc:	2800      	cmp	r0, #0
    7cfe:	d1ed      	bne.n	7cdc <sym_I4MPPJWE5TYSC2ELQNUWYVNFYJKDDDI4E2NHKYA+0x258>
    7d00:	2001      	movs	r0, #1
    7d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007d04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    7d04:	481b      	ldr	r0, [pc, #108]	; (7d74 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x70>)
    7d06:	491a      	ldr	r1, [pc, #104]	; (7d70 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x6c>)
    7d08:	6081      	str	r1, [r0, #8]
    7d0a:	491b      	ldr	r1, [pc, #108]	; (7d78 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x74>)
    7d0c:	6041      	str	r1, [r0, #4]
    7d0e:	491b      	ldr	r1, [pc, #108]	; (7d7c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    7d10:	6001      	str	r1, [r0, #0]
    7d12:	491b      	ldr	r1, [pc, #108]	; (7d80 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    7d14:	6281      	str	r1, [r0, #40]	; 0x28
    7d16:	491b      	ldr	r1, [pc, #108]	; (7d84 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    7d18:	62c1      	str	r1, [r0, #44]	; 0x2c
    7d1a:	491b      	ldr	r1, [pc, #108]	; (7d88 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    7d1c:	60c1      	str	r1, [r0, #12]
    7d1e:	491b      	ldr	r1, [pc, #108]	; (7d8c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    7d20:	6181      	str	r1, [r0, #24]
    7d22:	491b      	ldr	r1, [pc, #108]	; (7d90 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    7d24:	6301      	str	r1, [r0, #48]	; 0x30
    7d26:	491b      	ldr	r1, [pc, #108]	; (7d94 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    7d28:	6201      	str	r1, [r0, #32]
    7d2a:	491b      	ldr	r1, [pc, #108]	; (7d98 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    7d2c:	64c1      	str	r1, [r0, #76]	; 0x4c
    7d2e:	491b      	ldr	r1, [pc, #108]	; (7d9c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    7d30:	6481      	str	r1, [r0, #72]	; 0x48
    7d32:	491b      	ldr	r1, [pc, #108]	; (7da0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    7d34:	6441      	str	r1, [r0, #68]	; 0x44
    7d36:	491b      	ldr	r1, [pc, #108]	; (7da4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    7d38:	6341      	str	r1, [r0, #52]	; 0x34
    7d3a:	491b      	ldr	r1, [pc, #108]	; (7da8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    7d3c:	61c1      	str	r1, [r0, #28]
    7d3e:	481c      	ldr	r0, [pc, #112]	; (7db0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    7d40:	491a      	ldr	r1, [pc, #104]	; (7dac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    7d42:	6081      	str	r1, [r0, #8]
    7d44:	491b      	ldr	r1, [pc, #108]	; (7db4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    7d46:	61c1      	str	r1, [r0, #28]
    7d48:	491b      	ldr	r1, [pc, #108]	; (7db8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    7d4a:	6241      	str	r1, [r0, #36]	; 0x24
    7d4c:	491b      	ldr	r1, [pc, #108]	; (7dbc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    7d4e:	62c1      	str	r1, [r0, #44]	; 0x2c
    7d50:	491b      	ldr	r1, [pc, #108]	; (7dc0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    7d52:	6101      	str	r1, [r0, #16]
    7d54:	491b      	ldr	r1, [pc, #108]	; (7dc4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    7d56:	6141      	str	r1, [r0, #20]
    7d58:	491b      	ldr	r1, [pc, #108]	; (7dc8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    7d5a:	6441      	str	r1, [r0, #68]	; 0x44
    7d5c:	6341      	str	r1, [r0, #52]	; 0x34
    7d5e:	491b      	ldr	r1, [pc, #108]	; (7dcc <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    7d60:	6181      	str	r1, [r0, #24]
    7d62:	491b      	ldr	r1, [pc, #108]	; (7dd0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    7d64:	6301      	str	r1, [r0, #48]	; 0x30
    7d66:	491b      	ldr	r1, [pc, #108]	; (7dd4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    7d68:	6481      	str	r1, [r0, #72]	; 0x48
    7d6a:	491b      	ldr	r1, [pc, #108]	; (7dd8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    7d6c:	64c1      	str	r1, [r0, #76]	; 0x4c
    7d6e:	4770      	bx	lr
    7d70:	00009441 	.word	0x00009441
    7d74:	2000012c 	.word	0x2000012c
    7d78:	00008d7d 	.word	0x00008d7d
    7d7c:	00008dd9 	.word	0x00008dd9
    7d80:	00009159 	.word	0x00009159
    7d84:	0000919d 	.word	0x0000919d
    7d88:	00008e85 	.word	0x00008e85
    7d8c:	00009419 	.word	0x00009419
    7d90:	0000955d 	.word	0x0000955d
    7d94:	00008f31 	.word	0x00008f31
    7d98:	0000912d 	.word	0x0000912d
    7d9c:	00009101 	.word	0x00009101
    7da0:	000093d9 	.word	0x000093d9
    7da4:	00009409 	.word	0x00009409
    7da8:	00009475 	.word	0x00009475
    7dac:	000098d5 	.word	0x000098d5
    7db0:	20000190 	.word	0x20000190
    7db4:	000098fd 	.word	0x000098fd
    7db8:	000096bd 	.word	0x000096bd
    7dbc:	00009795 	.word	0x00009795
    7dc0:	00009691 	.word	0x00009691
    7dc4:	0000983d 	.word	0x0000983d
    7dc8:	00009819 	.word	0x00009819
    7dcc:	00009861 	.word	0x00009861
    7dd0:	00009955 	.word	0x00009955
    7dd4:	0000974d 	.word	0x0000974d
    7dd8:	0000977d 	.word	0x0000977d

00007ddc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    7ddc:	4806      	ldr	r0, [pc, #24]	; (7df8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    7dde:	4905      	ldr	r1, [pc, #20]	; (7df4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    7de0:	6581      	str	r1, [r0, #88]	; 0x58
    7de2:	4906      	ldr	r1, [pc, #24]	; (7dfc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    7de4:	6601      	str	r1, [r0, #96]	; 0x60
    7de6:	4807      	ldr	r0, [pc, #28]	; (7e04 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    7de8:	4905      	ldr	r1, [pc, #20]	; (7e00 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    7dea:	6581      	str	r1, [r0, #88]	; 0x58
    7dec:	4906      	ldr	r1, [pc, #24]	; (7e08 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    7dee:	65c1      	str	r1, [r0, #92]	; 0x5c
    7df0:	4770      	bx	lr
    7df2:	0000      	.short	0x0000
    7df4:	000091bd 	.word	0x000091bd
    7df8:	2000012c 	.word	0x2000012c
    7dfc:	00009295 	.word	0x00009295
    7e00:	000097c1 	.word	0x000097c1
    7e04:	20000190 	.word	0x20000190
    7e08:	000097f1 	.word	0x000097f1

00007e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    7e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7e10:	2601      	movs	r6, #1
    7e12:	4c7c      	ldr	r4, [pc, #496]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7e14:	2500      	movs	r5, #0
    7e16:	f366 0107 	bfi	r1, r6, #0, #8
    7e1a:	8065      	strh	r5, [r4, #2]
    7e1c:	7065      	strb	r5, [r4, #1]
    7e1e:	7025      	strb	r5, [r4, #0]
    7e20:	60a0      	str	r0, [r4, #8]
    7e22:	4689      	mov	r9, r1
    7e24:	4680      	mov	r8, r0
    7e26:	f880 6103 	strb.w	r6, [r0, #259]	; 0x103
    7e2a:	8800      	ldrh	r0, [r0, #0]
    7e2c:	f7fc fb62 	bl	44f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    7e30:	b180      	cbz	r0, 7e54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x48>
    7e32:	68a0      	ldr	r0, [r4, #8]
    7e34:	8800      	ldrh	r0, [r0, #0]
    7e36:	f7fc fdfb 	bl	4a30 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    7e3a:	68a0      	ldr	r0, [r4, #8]
    7e3c:	8800      	ldrh	r0, [r0, #0]
    7e3e:	f7fc fd9f 	bl	4980 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    7e42:	68a0      	ldr	r0, [r4, #8]
    7e44:	f8b0 10fa 	ldrh.w	r1, [r0, #250]	; 0xfa
    7e48:	b1c9      	cbz	r1, 7e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7e4a:	3070      	adds	r0, #112	; 0x70
    7e4c:	f006 faef 	bl	e42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7e50:	b118      	cbz	r0, 7e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4e>
    7e52:	e014      	b.n	7e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7e54:	f640 31c4 	movw	r1, #3012	; 0xbc4
    7e58:	e06b      	b.n	7f32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126>
    7e5a:	68a0      	ldr	r0, [r4, #8]
    7e5c:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    7e60:	f88d 1000 	strb.w	r1, [sp]
    7e64:	9900      	ldr	r1, [sp, #0]
    7e66:	9100      	str	r1, [sp, #0]
    7e68:	f89d 1000 	ldrb.w	r1, [sp]
    7e6c:	b139      	cbz	r1, 7e7e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x72>
    7e6e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    7e72:	2301      	movs	r3, #1
    7e74:	4619      	mov	r1, r3
    7e76:	3070      	adds	r0, #112	; 0x70
    7e78:	f004 ffb8 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7e7c:	b180      	cbz	r0, 7ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x94>
    7e7e:	68a0      	ldr	r0, [r4, #8]
    7e80:	3070      	adds	r0, #112	; 0x70
    7e82:	f006 fad4 	bl	e42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    7e86:	b128      	cbz	r0, 7e94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x88>
    7e88:	68a0      	ldr	r0, [r4, #8]
    7e8a:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    7e8e:	bf00      	nop
    7e90:	f000 fbb0 	bl	85f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f4>
    7e94:	68a0      	ldr	r0, [r4, #8]
    7e96:	f890 1105 	ldrb.w	r1, [r0, #261]	; 0x105
    7e9a:	b189      	cbz	r1, 7ec0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb4>
    7e9c:	80a5      	strh	r5, [r4, #4]
    7e9e:	e01e      	b.n	7ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd2>
    7ea0:	68a0      	ldr	r0, [r4, #8]
    7ea2:	f8a0 50a8 	strh.w	r5, [r0, #168]	; 0xa8
    7ea6:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    7eaa:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    7eae:	2100      	movs	r1, #0
    7eb0:	2002      	movs	r0, #2
    7eb2:	f000 fe41 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    7eb6:	68a0      	ldr	r0, [r4, #8]
    7eb8:	f880 5102 	strb.w	r5, [r0, #258]	; 0x102
    7ebc:	2002      	movs	r0, #2
    7ebe:	e7e7      	b.n	7e90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    7ec0:	f890 11b8 	ldrb.w	r1, [r0, #440]	; 0x1b8
    7ec4:	f88d 1000 	strb.w	r1, [sp]
    7ec8:	9900      	ldr	r1, [sp, #0]
    7eca:	9100      	str	r1, [sp, #0]
    7ecc:	f89d 1000 	ldrb.w	r1, [sp]
    7ed0:	b919      	cbnz	r1, 7eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    7ed2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    7ed4:	8a82      	ldrh	r2, [r0, #20]
    7ed6:	4291      	cmp	r1, r2
    7ed8:	d800      	bhi.n	7edc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0>
    7eda:	8a81      	ldrh	r1, [r0, #20]
    7edc:	80a1      	strh	r1, [r4, #4]
    7ede:	f830 1ffe 	ldrh.w	r1, [r0, #254]!
    7ee2:	1e49      	subs	r1, r1, #1
    7ee4:	b28f      	uxth	r7, r1
    7ee6:	f830 1f02 	ldrh.w	r1, [r0, #2]!
    7eea:	4439      	add	r1, r7
    7eec:	f820 195c 	strh.w	r1, [r0], #-92
    7ef0:	8801      	ldrh	r1, [r0, #0]
    7ef2:	4439      	add	r1, r7
    7ef4:	8001      	strh	r1, [r0, #0]
    7ef6:	f001 fd5b 	bl	99b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19b0>
    7efa:	b120      	cbz	r0, 7f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfa>
    7efc:	68a0      	ldr	r0, [r4, #8]
    7efe:	f850 1f98 	ldr.w	r1, [r0, #152]!
    7f02:	4439      	add	r1, r7
    7f04:	6001      	str	r1, [r0, #0]
    7f06:	68a1      	ldr	r1, [r4, #8]
    7f08:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    7f0c:	2801      	cmp	r0, #1
    7f0e:	d802      	bhi.n	7f16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10a>
    7f10:	1c40      	adds	r0, r0, #1
    7f12:	f8a1 00fa 	strh.w	r0, [r1, #250]	; 0xfa
    7f16:	b10f      	cbz	r7, 7f1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x110>
    7f18:	f881 510c 	strb.w	r5, [r1, #268]	; 0x10c
    7f1c:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    7f20:	f8b1 20fe 	ldrh.w	r2, [r1, #254]	; 0xfe
    7f24:	f101 0070 	add.w	r0, r1, #112	; 0x70
    7f28:	f005 f8e2 	bl	d0f0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    7f2c:	b120      	cbz	r0, 7f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12c>
    7f2e:	f640 4108 	movw	r1, #3080	; 0xc08
    7f32:	2031      	movs	r0, #49	; 0x31
    7f34:	f7fb fea0 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f38:	68a0      	ldr	r0, [r4, #8]
    7f3a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    7f3e:	290b      	cmp	r1, #11
    7f40:	d001      	beq.n	7f46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13a>
    7f42:	290c      	cmp	r1, #12
    7f44:	d118      	bne.n	7f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    7f46:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    7f4a:	f8b0 3194 	ldrh.w	r3, [r0, #404]	; 0x194
    7f4e:	1ad2      	subs	r2, r2, r3
    7f50:	b212      	sxth	r2, r2
    7f52:	2a00      	cmp	r2, #0
    7f54:	db10      	blt.n	7f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    7f56:	f8d0 1196 	ldr.w	r1, [r0, #406]	; 0x196
    7f5a:	f8c0 1086 	str.w	r1, [r0, #134]	; 0x86
    7f5e:	f890 119a 	ldrb.w	r1, [r0, #410]	; 0x19a
    7f62:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    7f66:	2103      	movs	r1, #3
    7f68:	f7fd fdcc 	bl	5b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    7f6c:	68a0      	ldr	r0, [r4, #8]
    7f6e:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    7f72:	f880 60be 	strb.w	r6, [r0, #190]	; 0xbe
    7f76:	e026      	b.n	7fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    7f78:	2924      	cmp	r1, #36	; 0x24
    7f7a:	d111      	bne.n	7fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7f7c:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    7f80:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    7f84:	1a89      	subs	r1, r1, r2
    7f86:	b209      	sxth	r1, r1
    7f88:	2900      	cmp	r1, #0
    7f8a:	db09      	blt.n	7fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    7f8c:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    7f90:	f000 fe82 	bl	8c98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc98>
    7f94:	2800      	cmp	r0, #0
    7f96:	68a0      	ldr	r0, [r4, #8]
    7f98:	f880 51ae 	strb.w	r5, [r0, #430]	; 0x1ae
    7f9c:	d029      	beq.n	7ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    7f9e:	e012      	b.n	7fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    7fa0:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    7fa4:	2924      	cmp	r1, #36	; 0x24
    7fa6:	d001      	beq.n	7fac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    7fa8:	2925      	cmp	r1, #37	; 0x25
    7faa:	d10c      	bne.n	7fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    7fac:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    7fb0:	f8b0 2194 	ldrh.w	r2, [r0, #404]	; 0x194
    7fb4:	1a89      	subs	r1, r1, r2
    7fb6:	b209      	sxth	r1, r1
    7fb8:	2900      	cmp	r1, #0
    7fba:	db04      	blt.n	7fc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    7fbc:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    7fc0:	f000 fe6a 	bl	8c98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc98>
    7fc4:	b1a8      	cbz	r0, 7ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    7fc6:	4810      	ldr	r0, [pc, #64]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
    7fc8:	9000      	str	r0, [sp, #0]
    7fca:	4b10      	ldr	r3, [pc, #64]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7fcc:	4a10      	ldr	r2, [pc, #64]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7fce:	4641      	mov	r1, r8
    7fd0:	4648      	mov	r0, r9
    7fd2:	f7fc fde3 	bl	4b9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    7fd6:	68a0      	ldr	r0, [r4, #8]
    7fd8:	2301      	movs	r3, #1
    7fda:	2105      	movs	r1, #5
    7fdc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    7fe0:	3070      	adds	r0, #112	; 0x70
    7fe2:	f004 ff03 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7fe6:	2800      	cmp	r0, #0
    7fe8:	d009      	beq.n	7ffe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    7fea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7fee:	f7fc bdcf 	b.w	4b90 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    7ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ff6:	2100      	movs	r1, #0
    7ff8:	4608      	mov	r0, r1
    7ffa:	f000 bbd5 	b.w	87a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a8>
    7ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8002:	0000      	.short	0x0000
    8004:	20000118 	.word	0x20000118
    8008:	000087a9 	.word	0x000087a9
    800c:	000082ad 	.word	0x000082ad
    8010:	00008be5 	.word	0x00008be5
    8014:	b570      	push	{r4, r5, r6, lr}
    8016:	4c0f      	ldr	r4, [pc, #60]	; (8054 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54>)
    8018:	68a5      	ldr	r5, [r4, #8]
    801a:	f895 107d 	ldrb.w	r1, [r5, #125]	; 0x7d
    801e:	2920      	cmp	r1, #32
    8020:	d002      	beq.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    8022:	2926      	cmp	r1, #38	; 0x26
    8024:	d003      	beq.n	802e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e>
    8026:	e011      	b.n	804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>
    8028:	f000 fe84 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    802c:	e008      	b.n	8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>
    802e:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    8032:	2301      	movs	r3, #1
    8034:	210b      	movs	r1, #11
    8036:	f105 0070 	add.w	r0, r5, #112	; 0x70
    803a:	f004 fed7 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    803e:	b138      	cbz	r0, 8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>
    8040:	68a1      	ldr	r1, [r4, #8]
    8042:	2000      	movs	r0, #0
    8044:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8048:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    804c:	2000      	movs	r0, #0
    804e:	bd70      	pop	{r4, r5, r6, pc}
    8050:	202a      	movs	r0, #42	; 0x2a
    8052:	e7e9      	b.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    8054:	20000118 	.word	0x20000118
    8058:	4804      	ldr	r0, [pc, #16]	; (806c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c>)
    805a:	2100      	movs	r1, #0
    805c:	6880      	ldr	r0, [r0, #8]
    805e:	f820 1fb0 	strh.w	r1, [r0, #176]!
    8062:	7881      	ldrb	r1, [r0, #2]
    8064:	1c49      	adds	r1, r1, #1
    8066:	7081      	strb	r1, [r0, #2]
    8068:	4770      	bx	lr
    806a:	0000      	.short	0x0000
    806c:	20000118 	.word	0x20000118
    8070:	4807      	ldr	r0, [pc, #28]	; (8090 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x90>)
    8072:	b510      	push	{r4, lr}
    8074:	6881      	ldr	r1, [r0, #8]
    8076:	f811 0fb2 	ldrb.w	r0, [r1, #178]!
    807a:	1e40      	subs	r0, r0, #1
    807c:	b240      	sxtb	r0, r0
    807e:	7008      	strb	r0, [r1, #0]
    8080:	2800      	cmp	r0, #0
    8082:	da04      	bge.n	808e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8e>
    8084:	f44f 71c9 	mov.w	r1, #402	; 0x192
    8088:	2031      	movs	r0, #49	; 0x31
    808a:	f7fb fdf5 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    808e:	bd10      	pop	{r4, pc}
    8090:	20000118 	.word	0x20000118
    8094:	491a      	ldr	r1, [pc, #104]	; (8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>)
    8096:	b508      	push	{r3, lr}
    8098:	6889      	ldr	r1, [r1, #8]
    809a:	f891 207e 	ldrb.w	r2, [r1, #126]	; 0x7e
    809e:	b1b8      	cbz	r0, 80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>
    80a0:	2a10      	cmp	r2, #16
    80a2:	d006      	beq.n	80b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2>
    80a4:	2a14      	cmp	r2, #20
    80a6:	d007      	beq.n	80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>
    80a8:	2a15      	cmp	r2, #21
    80aa:	d008      	beq.n	80be <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe>
    80ac:	2a1b      	cmp	r2, #27
    80ae:	d122      	bne.n	80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
    80b0:	e008      	b.n	80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>
    80b2:	2101      	movs	r1, #1
    80b4:	200b      	movs	r0, #11
    80b6:	e007      	b.n	80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>
    80b8:	f001 faac 	bl	9614 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1614>
    80bc:	e006      	b.n	80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    80be:	f000 fd59 	bl	8b74 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb74>
    80c2:	e003      	b.n	80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>
    80c4:	2101      	movs	r1, #1
    80c6:	2006      	movs	r0, #6
    80c8:	f000 fd36 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    80cc:	2001      	movs	r0, #1
    80ce:	bd08      	pop	{r3, pc}
    80d0:	2a21      	cmp	r2, #33	; 0x21
    80d2:	d110      	bne.n	80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
    80d4:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    80d8:	2802      	cmp	r0, #2
    80da:	d00e      	beq.n	80fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa>
    80dc:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    80e0:	2801      	cmp	r0, #1
    80e2:	d108      	bne.n	80f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf6>
    80e4:	f891 01af 	ldrb.w	r0, [r1, #431]	; 0x1af
    80e8:	f88d 0000 	strb.w	r0, [sp]
    80ec:	9800      	ldr	r0, [sp, #0]
    80ee:	9000      	str	r0, [sp, #0]
    80f0:	f89d 0000 	ldrb.w	r0, [sp]
    80f4:	b108      	cbz	r0, 80fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa>
    80f6:	2000      	movs	r0, #0
    80f8:	bd08      	pop	{r3, pc}
    80fa:	2101      	movs	r1, #1
    80fc:	2017      	movs	r0, #23
    80fe:	e7e3      	b.n	80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>
    8100:	20000118 	.word	0x20000118
    8104:	b538      	push	{r3, r4, r5, lr}
    8106:	2800      	cmp	r0, #0
    8108:	d16b      	bne.n	81e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e2>
    810a:	4c37      	ldr	r4, [pc, #220]	; (81e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e8>)
    810c:	68a0      	ldr	r0, [r4, #8]
    810e:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8112:	07ca      	lsls	r2, r1, #31
    8114:	d002      	beq.n	811c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11c>
    8116:	2101      	movs	r1, #1
    8118:	2009      	movs	r0, #9
    811a:	e05b      	b.n	81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>
    811c:	078a      	lsls	r2, r1, #30
    811e:	d50a      	bpl.n	8136 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136>
    8120:	2101      	movs	r1, #1
    8122:	200c      	movs	r0, #12
    8124:	f000 fd08 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8128:	68a0      	ldr	r0, [r4, #8]
    812a:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    812e:	f041 0101 	orr.w	r1, r1, #1
    8132:	7001      	strb	r1, [r0, #0]
    8134:	e050      	b.n	81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>
    8136:	074a      	lsls	r2, r1, #29
    8138:	d502      	bpl.n	8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>
    813a:	2101      	movs	r1, #1
    813c:	2013      	movs	r0, #19
    813e:	e049      	b.n	81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>
    8140:	070a      	lsls	r2, r1, #28
    8142:	d505      	bpl.n	8150 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x150>
    8144:	f810 1fe9 	ldrb.w	r1, [r0, #233]!
    8148:	7141      	strb	r1, [r0, #5]
    814a:	2101      	movs	r1, #1
    814c:	2007      	movs	r0, #7
    814e:	e041      	b.n	81d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d4>
    8150:	f011 0f30 	tst.w	r1, #48	; 0x30
    8154:	d045      	beq.n	81e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e2>
    8156:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    815a:	f88d 1000 	strb.w	r1, [sp]
    815e:	9900      	ldr	r1, [sp, #0]
    8160:	9100      	str	r1, [sp, #0]
    8162:	f89d 1000 	ldrb.w	r1, [sp]
    8166:	bbc9      	cbnz	r1, 81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>
    8168:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    816c:	f88d 1000 	strb.w	r1, [sp]
    8170:	9900      	ldr	r1, [sp, #0]
    8172:	9100      	str	r1, [sp, #0]
    8174:	f89d 1000 	ldrb.w	r1, [sp]
    8178:	b1c9      	cbz	r1, 81ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ae>
    817a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    817e:	2924      	cmp	r1, #36	; 0x24
    8180:	d02d      	beq.n	81de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1de>
    8182:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8186:	2924      	cmp	r1, #36	; 0x24
    8188:	d029      	beq.n	81de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1de>
    818a:	2300      	movs	r3, #0
    818c:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8190:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8194:	f005 fa21 	bl	d5da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8198:	68a0      	ldr	r0, [r4, #8]
    819a:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    819e:	f021 0120 	bic.w	r1, r1, #32
    81a2:	f041 0110 	orr.w	r1, r1, #16
    81a6:	7001      	strb	r1, [r0, #0]
    81a8:	2100      	movs	r1, #0
    81aa:	f880 1125 	strb.w	r1, [r0, #293]	; 0x125
    81ae:	68a0      	ldr	r0, [r4, #8]
    81b0:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    81b4:	06c9      	lsls	r1, r1, #27
    81b6:	d514      	bpl.n	81e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e2>
    81b8:	f005 fa2a 	bl	d610 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    81bc:	f000 f910 	bl	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
    81c0:	68a1      	ldr	r1, [r4, #8]
    81c2:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    81c6:	8bc2      	ldrh	r2, [r0, #30]
    81c8:	f821 2fee 	strh.w	r2, [r1, #238]!
    81cc:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    81ce:	8048      	strh	r0, [r1, #2]
    81d0:	2101      	movs	r1, #1
    81d2:	2015      	movs	r0, #21
    81d4:	f000 fcb0 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    81d8:	2001      	movs	r0, #1
    81da:	bd38      	pop	{r3, r4, r5, pc}
    81dc:	e001      	b.n	81e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e2>
    81de:	2301      	movs	r3, #1
    81e0:	e7d4      	b.n	818c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18c>
    81e2:	2000      	movs	r0, #0
    81e4:	e7f9      	b.n	81da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1da>
    81e6:	0000      	.short	0x0000
    81e8:	20000118 	.word	0x20000118
    81ec:	b570      	push	{r4, r5, r6, lr}
    81ee:	460d      	mov	r5, r1
    81f0:	4606      	mov	r6, r0
    81f2:	f005 f869 	bl	d2c8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    81f6:	4604      	mov	r4, r0
    81f8:	4630      	mov	r0, r6
    81fa:	f005 f871 	bl	d2e0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    81fe:	4629      	mov	r1, r5
    8200:	f000 f81e 	bl	8240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x240>
    8204:	b1b8      	cbz	r0, 8236 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x236>
    8206:	4620      	mov	r0, r4
    8208:	f004 fe89 	bl	cf1e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    820c:	0001      	movs	r1, r0
    820e:	d00d      	beq.n	822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
    8210:	480a      	ldr	r0, [pc, #40]	; (823c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x23c>)
    8212:	6880      	ldr	r0, [r0, #8]
    8214:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    8218:	428a      	cmp	r2, r1
    821a:	d007      	beq.n	822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>
    821c:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8220:	2901      	cmp	r1, #1
    8222:	d005      	beq.n	8230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x230>
    8224:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8228:	4220      	tst	r0, r4
    822a:	d004      	beq.n	8236 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x236>
    822c:	2001      	movs	r0, #1
    822e:	bd70      	pop	{r4, r5, r6, pc}
    8230:	f890 01b1 	ldrb.w	r0, [r0, #433]	; 0x1b1
    8234:	e7f8      	b.n	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
    8236:	2000      	movs	r0, #0
    8238:	bd70      	pop	{r4, r5, r6, pc}
    823a:	0000      	.short	0x0000
    823c:	20000118 	.word	0x20000118
    8240:	b570      	push	{r4, r5, r6, lr}
    8242:	460d      	mov	r5, r1
    8244:	4604      	mov	r4, r0
    8246:	f004 fe6a 	bl	cf1e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    824a:	b350      	cbz	r0, 82a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a2>
    824c:	4916      	ldr	r1, [pc, #88]	; (82a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a8>)
    824e:	6889      	ldr	r1, [r1, #8]
    8250:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    8254:	4282      	cmp	r2, r0
    8256:	d024      	beq.n	82a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a2>
    8258:	f891 31ae 	ldrb.w	r3, [r1, #430]	; 0x1ae
    825c:	2b01      	cmp	r3, #1
    825e:	d005      	beq.n	826c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26c>
    8260:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    8264:	4223      	tst	r3, r4
    8266:	d013      	beq.n	8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
    8268:	b11d      	cbz	r5, 8272 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x272>
    826a:	e01a      	b.n	82a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a2>
    826c:	f891 31b0 	ldrb.w	r3, [r1, #432]	; 0x1b0
    8270:	e7f8      	b.n	8264 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x264>
    8272:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    8276:	4221      	tst	r1, r4
    8278:	d113      	bne.n	82a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a2>
    827a:	b15a      	cbz	r2, 8294 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x294>
    827c:	2a04      	cmp	r2, #4
    827e:	d00e      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    8280:	2804      	cmp	r0, #4
    8282:	d00c      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    8284:	2a08      	cmp	r2, #8
    8286:	d00a      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    8288:	2808      	cmp	r0, #8
    828a:	d008      	beq.n	829e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29e>
    828c:	4282      	cmp	r2, r0
    828e:	d908      	bls.n	82a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2a2>
    8290:	2000      	movs	r0, #0
    8292:	bd70      	pop	{r4, r5, r6, pc}
    8294:	f240 1155 	movw	r1, #341	; 0x155
    8298:	2006      	movs	r0, #6
    829a:	f7fb fced 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    829e:	4282      	cmp	r2, r0
    82a0:	d3f6      	bcc.n	8290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x290>
    82a2:	2001      	movs	r0, #1
    82a4:	bd70      	pop	{r4, r5, r6, pc}
    82a6:	0000      	.short	0x0000
    82a8:	20000118 	.word	0x20000118
    82ac:	490c      	ldr	r1, [pc, #48]	; (82e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e0>)
    82ae:	4602      	mov	r2, r0
    82b0:	7848      	ldrb	r0, [r1, #1]
    82b2:	b998      	cbnz	r0, 82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    82b4:	4608      	mov	r0, r1
    82b6:	6880      	ldr	r0, [r0, #8]
    82b8:	b142      	cbz	r2, 82cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2cc>
    82ba:	7889      	ldrb	r1, [r1, #2]
    82bc:	0709      	lsls	r1, r1, #28
    82be:	d503      	bpl.n	82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>
    82c0:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
    82c4:	2808      	cmp	r0, #8
    82c6:	d009      	beq.n	82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    82c8:	2001      	movs	r0, #1
    82ca:	4770      	bx	lr
    82cc:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    82d0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    82d2:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    82d4:	428a      	cmp	r2, r1
    82d6:	d801      	bhi.n	82dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2dc>
    82d8:	f7fe bfd4 	b.w	7284 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    82dc:	2000      	movs	r0, #0
    82de:	4770      	bx	lr
    82e0:	20000118 	.word	0x20000118
    82e4:	b538      	push	{r3, r4, r5, lr}
    82e6:	4c3d      	ldr	r4, [pc, #244]	; (83dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3dc>)
    82e8:	4605      	mov	r5, r0
    82ea:	68a0      	ldr	r0, [r4, #8]
    82ec:	3070      	adds	r0, #112	; 0x70
    82ee:	f006 f89e 	bl	e42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    82f2:	2800      	cmp	r0, #0
    82f4:	d170      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    82f6:	2d00      	cmp	r5, #0
    82f8:	d16e      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    82fa:	68a0      	ldr	r0, [r4, #8]
    82fc:	2301      	movs	r3, #1
    82fe:	4619      	mov	r1, r3
    8300:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8304:	3070      	adds	r0, #112	; 0x70
    8306:	f004 fd71 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    830a:	2800      	cmp	r0, #0
    830c:	d164      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    830e:	68a0      	ldr	r0, [r4, #8]
    8310:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    8314:	f88d 1000 	strb.w	r1, [sp]
    8318:	9900      	ldr	r1, [sp, #0]
    831a:	9100      	str	r1, [sp, #0]
    831c:	f89d 1000 	ldrb.w	r1, [sp]
    8320:	b149      	cbz	r1, 8336 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x336>
    8322:	2100      	movs	r1, #0
    8324:	f8a0 10a8 	strh.w	r1, [r0, #168]	; 0xa8
    8328:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    832c:	f880 10ee 	strb.w	r1, [r0, #238]	; 0xee
    8330:	2100      	movs	r1, #0
    8332:	2002      	movs	r0, #2
    8334:	e045      	b.n	83c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c2>
    8336:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    833a:	2301      	movs	r3, #1
    833c:	2104      	movs	r1, #4
    833e:	3070      	adds	r0, #112	; 0x70
    8340:	f004 fd54 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8344:	4605      	mov	r5, r0
    8346:	f7ff fedd 	bl	8104 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x104>
    834a:	2800      	cmp	r0, #0
    834c:	d144      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    834e:	4628      	mov	r0, r5
    8350:	f7ff fea0 	bl	8094 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x94>
    8354:	2800      	cmp	r0, #0
    8356:	d13f      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    8358:	68a0      	ldr	r0, [r4, #8]
    835a:	2301      	movs	r3, #1
    835c:	2100      	movs	r1, #0
    835e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8362:	3070      	adds	r0, #112	; 0x70
    8364:	f004 fd42 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8368:	b178      	cbz	r0, 838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
    836a:	68a0      	ldr	r0, [r4, #8]
    836c:	2301      	movs	r3, #1
    836e:	2104      	movs	r1, #4
    8370:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8374:	3070      	adds	r0, #112	; 0x70
    8376:	f004 fd39 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    837a:	b930      	cbnz	r0, 838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
    837c:	68a0      	ldr	r0, [r4, #8]
    837e:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
    8382:	b110      	cbz	r0, 838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
    8384:	2100      	movs	r1, #0
    8386:	2012      	movs	r0, #18
    8388:	e01b      	b.n	83c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c2>
    838a:	68a0      	ldr	r0, [r4, #8]
    838c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8390:	290a      	cmp	r1, #10
    8392:	d01a      	beq.n	83ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3ca>
    8394:	2d00      	cmp	r5, #0
    8396:	d11f      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    8398:	f000 fb1a 	bl	89d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9d0>
    839c:	2800      	cmp	r0, #0
    839e:	d11b      	bne.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    83a0:	68a0      	ldr	r0, [r4, #8]
    83a2:	2301      	movs	r3, #1
    83a4:	2100      	movs	r1, #0
    83a6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    83aa:	3070      	adds	r0, #112	; 0x70
    83ac:	f004 fd1e 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    83b0:	2800      	cmp	r0, #0
    83b2:	d011      	beq.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    83b4:	68a0      	ldr	r0, [r4, #8]
    83b6:	f890 018c 	ldrb.w	r0, [r0, #396]	; 0x18c
    83ba:	2800      	cmp	r0, #0
    83bc:	d00c      	beq.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    83be:	2100      	movs	r1, #0
    83c0:	20ff      	movs	r0, #255	; 0xff
    83c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    83c6:	f000 bbb7 	b.w	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    83ca:	f810 1fea 	ldrb.w	r1, [r0, #234]!
    83ce:	7101      	strb	r1, [r0, #4]
    83d0:	2100      	movs	r1, #0
    83d2:	2007      	movs	r0, #7
    83d4:	e7f5      	b.n	83c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c2>
    83d6:	e7ff      	b.n	83d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3d8>
    83d8:	bd38      	pop	{r3, r4, r5, pc}
    83da:	0000      	.short	0x0000
    83dc:	20000118 	.word	0x20000118
    83e0:	480a      	ldr	r0, [pc, #40]	; (840c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40c>)
    83e2:	b510      	push	{r4, lr}
    83e4:	6881      	ldr	r1, [r0, #8]
    83e6:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    83ea:	2801      	cmp	r0, #1
    83ec:	d009      	beq.n	8402 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x402>
    83ee:	8808      	ldrh	r0, [r1, #0]
    83f0:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    83f4:	312c      	adds	r1, #44	; 0x2c
    83f6:	f005 f8cc 	bl	d592 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    83fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83fe:	f001 bc05 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8402:	2002      	movs	r0, #2
    8404:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    8408:	bd10      	pop	{r4, pc}
    840a:	0000      	.short	0x0000
    840c:	20000118 	.word	0x20000118
    8410:	b570      	push	{r4, r5, r6, lr}
    8412:	4c25      	ldr	r4, [pc, #148]	; (84a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a8>)
    8414:	0005      	movs	r5, r0
    8416:	d12f      	bne.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8418:	f000 f8a4 	bl	8564 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x564>
    841c:	f000 f848 	bl	84b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4b0>
    8420:	0005      	movs	r5, r0
    8422:	d129      	bne.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8424:	8860      	ldrh	r0, [r4, #2]
    8426:	0741      	lsls	r1, r0, #29
    8428:	d506      	bpl.n	8438 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x438>
    842a:	68a1      	ldr	r1, [r4, #8]
    842c:	f891 1080 	ldrb.w	r1, [r1, #128]	; 0x80
    8430:	2907      	cmp	r1, #7
    8432:	d101      	bne.n	8438 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x438>
    8434:	2101      	movs	r1, #1
    8436:	7021      	strb	r1, [r4, #0]
    8438:	0780      	lsls	r0, r0, #30
    843a:	d512      	bpl.n	8462 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x462>
    843c:	68e0      	ldr	r0, [r4, #12]
    843e:	78c0      	ldrb	r0, [r0, #3]
    8440:	2819      	cmp	r0, #25
    8442:	d205      	bcs.n	8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
    8444:	4919      	ldr	r1, [pc, #100]	; (84ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ac>)
    8446:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    844a:	b109      	cbz	r1, 8450 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x450>
    844c:	4788      	blx	r1
    844e:	e008      	b.n	8462 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x462>
    8450:	28ff      	cmp	r0, #255	; 0xff
    8452:	d004      	beq.n	845e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x45e>
    8454:	f240 714d 	movw	r1, #1869	; 0x74d
    8458:	2031      	movs	r0, #49	; 0x31
    845a:	f7fb fc0d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    845e:	f001 f90b 	bl	9678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1678>
    8462:	78a0      	ldrb	r0, [r4, #2]
    8464:	06c0      	lsls	r0, r0, #27
    8466:	d507      	bpl.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8468:	68a0      	ldr	r0, [r4, #8]
    846a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    846e:	290b      	cmp	r1, #11
    8470:	d102      	bne.n	8478 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x478>
    8472:	210c      	movs	r1, #12
    8474:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    8478:	7860      	ldrb	r0, [r4, #1]
    847a:	0700      	lsls	r0, r0, #28
    847c:	d511      	bpl.n	84a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a2>
    847e:	68a0      	ldr	r0, [r4, #8]
    8480:	2301      	movs	r3, #1
    8482:	2105      	movs	r1, #5
    8484:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8488:	3070      	adds	r0, #112	; 0x70
    848a:	f004 fcaf 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    848e:	b128      	cbz	r0, 849c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x49c>
    8490:	68a1      	ldr	r1, [r4, #8]
    8492:	2508      	movs	r5, #8
    8494:	2000      	movs	r0, #0
    8496:	f881 01c4 	strb.w	r0, [r1, #452]	; 0x1c4
    849a:	e002      	b.n	84a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4a2>
    849c:	2000      	movs	r0, #0
    849e:	f7fc fc4d 	bl	4d3c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    84a2:	4628      	mov	r0, r5
    84a4:	bd70      	pop	{r4, r5, r6, pc}
    84a6:	0000      	.short	0x0000
    84a8:	20000118 	.word	0x20000118
    84ac:	20000190 	.word	0x20000190
    84b0:	b570      	push	{r4, r5, r6, lr}
    84b2:	4c2a      	ldr	r4, [pc, #168]	; (855c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x55c>)
    84b4:	2000      	movs	r0, #0
    84b6:	78a1      	ldrb	r1, [r4, #2]
    84b8:	07c9      	lsls	r1, r1, #31
    84ba:	d015      	beq.n	84e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e8>
    84bc:	6920      	ldr	r0, [r4, #16]
    84be:	2301      	movs	r3, #1
    84c0:	2105      	movs	r1, #5
    84c2:	78c5      	ldrb	r5, [r0, #3]
    84c4:	68a0      	ldr	r0, [r4, #8]
    84c6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    84ca:	3070      	adds	r0, #112	; 0x70
    84cc:	f004 fc8e 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    84d0:	b158      	cbz	r0, 84ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4ea>
    84d2:	1ead      	subs	r5, r5, #2
    84d4:	2d0a      	cmp	r5, #10
    84d6:	d206      	bcs.n	84e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4e6>
    84d8:	e8df f005 	tbb	[pc, r5]
    84dc:	05050707 	.word	0x05050707
    84e0:	05050707 	.word	0x05050707
    84e4:	0707      	.short	0x0707
    84e6:	2008      	movs	r0, #8
    84e8:	bd70      	pop	{r4, r5, r6, pc}
    84ea:	6920      	ldr	r0, [r4, #16]
    84ec:	f7fd fc34 	bl	5d58 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    84f0:	b138      	cbz	r0, 8502 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x502>
    84f2:	6920      	ldr	r0, [r4, #16]
    84f4:	78c5      	ldrb	r5, [r0, #3]
    84f6:	b145      	cbz	r5, 850a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50a>
    84f8:	2d01      	cmp	r5, #1
    84fa:	d006      	beq.n	850a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50a>
    84fc:	2d16      	cmp	r5, #22
    84fe:	d118      	bne.n	8532 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x532>
    8500:	e003      	b.n	850a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50a>
    8502:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8506:	f000 bd3d 	b.w	8f84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf84>
    850a:	68a0      	ldr	r0, [r4, #8]
    850c:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    8510:	f004 fcba 	bl	ce88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8514:	b168      	cbz	r0, 8532 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x532>
    8516:	68a1      	ldr	r1, [r4, #8]
    8518:	f891 007d 	ldrb.w	r0, [r1, #125]	; 0x7d
    851c:	281f      	cmp	r0, #31
    851e:	d008      	beq.n	8532 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x532>
    8520:	2820      	cmp	r0, #32
    8522:	d003      	beq.n	852c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x52c>
    8524:	2d16      	cmp	r5, #22
    8526:	d00c      	beq.n	8542 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x542>
    8528:	2002      	movs	r0, #2
    852a:	bd70      	pop	{r4, r5, r6, pc}
    852c:	2026      	movs	r0, #38	; 0x26
    852e:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    8532:	2d19      	cmp	r5, #25
    8534:	d207      	bcs.n	8546 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x546>
    8536:	480a      	ldr	r0, [pc, #40]	; (8560 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x560>)
    8538:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    853c:	b118      	cbz	r0, 8546 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x546>
    853e:	4780      	blx	r0
    8540:	e003      	b.n	854a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x54a>
    8542:	2020      	movs	r0, #32
    8544:	bd70      	pop	{r4, r5, r6, pc}
    8546:	f000 fd1d 	bl	8f84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf84>
    854a:	68a2      	ldr	r2, [r4, #8]
    854c:	e9f2 1332 	ldrd	r1, r3, [r2, #200]!	; 0xc8
    8550:	1c49      	adds	r1, r1, #1
    8552:	f143 0300 	adc.w	r3, r3, #0
    8556:	e9c2 1300 	strd	r1, r3, [r2]
    855a:	bd70      	pop	{r4, r5, r6, pc}
    855c:	20000118 	.word	0x20000118
    8560:	2000012c 	.word	0x2000012c
    8564:	b570      	push	{r4, r5, r6, lr}
    8566:	4c22      	ldr	r4, [pc, #136]	; (85f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f0>)
    8568:	78a0      	ldrb	r0, [r4, #2]
    856a:	0700      	lsls	r0, r0, #28
    856c:	d53e      	bpl.n	85ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ec>
    856e:	68a0      	ldr	r0, [r4, #8]
    8570:	3070      	adds	r0, #112	; 0x70
    8572:	f005 ff5c 	bl	e42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8576:	b148      	cbz	r0, 858c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58c>
    8578:	68a0      	ldr	r0, [r4, #8]
    857a:	21fe      	movs	r1, #254	; 0xfe
    857c:	2500      	movs	r5, #0
    857e:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    8582:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8586:	2919      	cmp	r1, #25
    8588:	d10c      	bne.n	85a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a4>
    858a:	e004      	b.n	8596 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x596>
    858c:	f240 7157 	movw	r1, #1879	; 0x757
    8590:	2031      	movs	r0, #49	; 0x31
    8592:	f7fb fb71 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8596:	f880 50b3 	strb.w	r5, [r0, #179]	; 0xb3
    859a:	f7ff fd69 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    859e:	68a0      	ldr	r0, [r4, #8]
    85a0:	f880 507e 	strb.w	r5, [r0, #126]	; 0x7e
    85a4:	68a0      	ldr	r0, [r4, #8]
    85a6:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    85aa:	291f      	cmp	r1, #31
    85ac:	d002      	beq.n	85b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b4>
    85ae:	2927      	cmp	r1, #39	; 0x27
    85b0:	d113      	bne.n	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
    85b2:	e00b      	b.n	85cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5cc>
    85b4:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    85b8:	f004 fc66 	bl	ce88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    85bc:	b108      	cbz	r0, 85c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c2>
    85be:	2026      	movs	r0, #38	; 0x26
    85c0:	e000      	b.n	85c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5c4>
    85c2:	2020      	movs	r0, #32
    85c4:	68a1      	ldr	r1, [r4, #8]
    85c6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    85ca:	e006      	b.n	85da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5da>
    85cc:	2101      	movs	r1, #1
    85ce:	f880 118d 	strb.w	r1, [r0, #397]	; 0x18d
    85d2:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    85d6:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    85da:	68a0      	ldr	r0, [r4, #8]
    85dc:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    85e0:	2908      	cmp	r1, #8
    85e2:	d103      	bne.n	85ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ec>
    85e4:	2102      	movs	r1, #2
    85e6:	7021      	strb	r1, [r4, #0]
    85e8:	f880 10ec 	strb.w	r1, [r0, #236]	; 0xec
    85ec:	bd70      	pop	{r4, r5, r6, pc}
    85ee:	0000      	.short	0x0000
    85f0:	20000118 	.word	0x20000118
    85f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    85f6:	4605      	mov	r5, r0
    85f8:	4668      	mov	r0, sp
    85fa:	f7fc fa03 	bl	4a04 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    85fe:	b318      	cbz	r0, 8648 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x648>
    8600:	2222      	movs	r2, #34	; 0x22
    8602:	2100      	movs	r1, #0
    8604:	9800      	ldr	r0, [sp, #0]
    8606:	f003 fa07 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    860a:	2103      	movs	r1, #3
    860c:	9800      	ldr	r0, [sp, #0]
    860e:	f004 febb 	bl	d388 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    8612:	9800      	ldr	r0, [sp, #0]
    8614:	7801      	ldrb	r1, [r0, #0]
    8616:	f021 0110 	bic.w	r1, r1, #16
    861a:	7001      	strb	r1, [r0, #0]
    861c:	4629      	mov	r1, r5
    861e:	f7fd fbc7 	bl	5db0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    8622:	2100      	movs	r1, #0
    8624:	4c5f      	ldr	r4, [pc, #380]	; (87a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a4>)
    8626:	f644 162f 	movw	r6, #18735	; 0x492f
    862a:	2d0e      	cmp	r5, #14
    862c:	d07e      	beq.n	872c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72c>
    862e:	dc0e      	bgt.n	864e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x64e>
    8630:	f1a5 0502 	sub.w	r5, r5, #2
    8634:	2d0c      	cmp	r5, #12
    8636:	d21c      	bcs.n	8672 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x672>
    8638:	e8df f005 	tbb	[pc, r5]
    863c:	aa491b1e 	.word	0xaa491b1e
    8640:	551b1eaa 	.word	0x551b1eaa
    8644:	3034aa1b 	.word	0x3034aa1b
    8648:	f640 1182 	movw	r1, #2434	; 0x982
    864c:	e0a6      	b.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
    864e:	2d15      	cmp	r5, #21
    8650:	d05c      	beq.n	870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>
    8652:	dc08      	bgt.n	8666 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x666>
    8654:	2d11      	cmp	r5, #17
    8656:	d014      	beq.n	8682 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x682>
    8658:	2d12      	cmp	r5, #18
    865a:	d01e      	beq.n	869a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69a>
    865c:	2d13      	cmp	r5, #19
    865e:	d01c      	beq.n	869a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x69a>
    8660:	2d14      	cmp	r5, #20
    8662:	d106      	bne.n	8672 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x672>
    8664:	e052      	b.n	870c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70c>
    8666:	2d16      	cmp	r5, #22
    8668:	d027      	beq.n	86ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ba>
    866a:	2d17      	cmp	r5, #23
    866c:	d069      	beq.n	8742 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x742>
    866e:	2dff      	cmp	r5, #255	; 0xff
    8670:	d072      	beq.n	8758 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x758>
    8672:	f640 11f8 	movw	r1, #2552	; 0x9f8
    8676:	e091      	b.n	879c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x79c>
    8678:	68a1      	ldr	r1, [r4, #8]
    867a:	9800      	ldr	r0, [sp, #0]
    867c:	f891 10ee 	ldrb.w	r1, [r1, #238]	; 0xee
    8680:	e00e      	b.n	86a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6a0>
    8682:	68a0      	ldr	r0, [r4, #8]
    8684:	f890 10ee 	ldrb.w	r1, [r0, #238]	; 0xee
    8688:	9800      	ldr	r0, [sp, #0]
    868a:	f004 fe59 	bl	d340 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    868e:	68a0      	ldr	r0, [r4, #8]
    8690:	f890 10ef 	ldrb.w	r1, [r0, #239]	; 0xef
    8694:	9800      	ldr	r0, [sp, #0]
    8696:	f004 fe55 	bl	d344 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    869a:	e079      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    869c:	9800      	ldr	r0, [sp, #0]
    869e:	2106      	movs	r1, #6
    86a0:	7101      	strb	r1, [r0, #4]
    86a2:	e075      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    86a4:	9800      	ldr	r0, [sp, #0]
    86a6:	220b      	movs	r2, #11
    86a8:	7102      	strb	r2, [r0, #4]
    86aa:	2259      	movs	r2, #89	; 0x59
    86ac:	7142      	strb	r2, [r0, #5]
    86ae:	7181      	strb	r1, [r0, #6]
    86b0:	21b0      	movs	r1, #176	; 0xb0
    86b2:	71c1      	strb	r1, [r0, #7]
    86b4:	2112      	movs	r1, #18
    86b6:	7201      	strb	r1, [r0, #8]
    86b8:	e06a      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    86ba:	9800      	ldr	r0, [sp, #0]
    86bc:	f8d4 1008 	ldr.w	r1, [r4, #8]
    86c0:	f891 21b0 	ldrb.w	r2, [r1, #432]	; 0x1b0
    86c4:	7102      	strb	r2, [r0, #4]
    86c6:	f891 11b1 	ldrb.w	r1, [r1, #433]	; 0x1b1
    86ca:	7141      	strb	r1, [r0, #5]
    86cc:	e060      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    86ce:	68a1      	ldr	r1, [r4, #8]
    86d0:	9800      	ldr	r0, [sp, #0]
    86d2:	f501 718c 	add.w	r1, r1, #280	; 0x118
    86d6:	f004 fe48 	bl	d36a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>
    86da:	68a1      	ldr	r1, [r4, #8]
    86dc:	9800      	ldr	r0, [sp, #0]
    86de:	31e4      	adds	r1, #228	; 0xe4
    86e0:	f004 fe40 	bl	d364 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>
    86e4:	e054      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    86e6:	9101      	str	r1, [sp, #4]
    86e8:	9102      	str	r1, [sp, #8]
    86ea:	f001 fe39 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    86ee:	68a1      	ldr	r1, [r4, #8]
    86f0:	4030      	ands	r0, r6
    86f2:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    86f6:	4001      	ands	r1, r0
    86f8:	f88d 1004 	strb.w	r1, [sp, #4]
    86fc:	0a00      	lsrs	r0, r0, #8
    86fe:	f88d 0005 	strb.w	r0, [sp, #5]
    8702:	a901      	add	r1, sp, #4
    8704:	9800      	ldr	r0, [sp, #0]
    8706:	f004 fe3a 	bl	d37e <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>
    870a:	e041      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    870c:	68a0      	ldr	r0, [r4, #8]
    870e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    8712:	9800      	ldr	r0, [sp, #0]
    8714:	f004 fe40 	bl	d398 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    8718:	68a0      	ldr	r0, [r4, #8]
    871a:	f8b0 10f0 	ldrh.w	r1, [r0, #240]	; 0xf0
    871e:	9800      	ldr	r0, [sp, #0]
    8720:	f004 fe3e 	bl	d3a0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    8724:	68a0      	ldr	r0, [r4, #8]
    8726:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    872a:	e000      	b.n	872e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72e>
    872c:	e015      	b.n	875a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x75a>
    872e:	9800      	ldr	r0, [sp, #0]
    8730:	f004 fe3a 	bl	d3a8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    8734:	68a0      	ldr	r0, [r4, #8]
    8736:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
    873a:	9800      	ldr	r0, [sp, #0]
    873c:	f004 fe38 	bl	d3b0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    8740:	e026      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    8742:	68a1      	ldr	r1, [r4, #8]
    8744:	f891 01ae 	ldrb.w	r0, [r1, #430]	; 0x1ae
    8748:	2801      	cmp	r0, #1
    874a:	9800      	ldr	r0, [sp, #0]
    874c:	d0b8      	beq.n	86c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c0>
    874e:	f811 2f66 	ldrb.w	r2, [r1, #102]!
    8752:	7102      	strb	r2, [r0, #4]
    8754:	7849      	ldrb	r1, [r1, #1]
    8756:	e7b8      	b.n	86ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ca>
    8758:	e012      	b.n	8780 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x780>
    875a:	9101      	str	r1, [sp, #4]
    875c:	9102      	str	r1, [sp, #8]
    875e:	f001 fdff 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8762:	68a1      	ldr	r1, [r4, #8]
    8764:	4030      	ands	r0, r6
    8766:	f891 10bc 	ldrb.w	r1, [r1, #188]	; 0xbc
    876a:	4001      	ands	r1, r0
    876c:	f88d 1004 	strb.w	r1, [sp, #4]
    8770:	0a00      	lsrs	r0, r0, #8
    8772:	f88d 0005 	strb.w	r0, [sp, #5]
    8776:	a901      	add	r1, sp, #4
    8778:	9800      	ldr	r0, [sp, #0]
    877a:	f004 fdfb 	bl	d374 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    877e:	e007      	b.n	8790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x790>
    8780:	68a0      	ldr	r0, [r4, #8]
    8782:	f890 218f 	ldrb.w	r2, [r0, #399]	; 0x18f
    8786:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
    878a:	9800      	ldr	r0, [sp, #0]
    878c:	f004 fddc 	bl	d348 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>
    8790:	f7fc f912 	bl	49b8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    8794:	2800      	cmp	r0, #0
    8796:	d104      	bne.n	87a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7a2>
    8798:	f640 11fc 	movw	r1, #2556	; 0x9fc
    879c:	2031      	movs	r0, #49	; 0x31
    879e:	f7fb fa6b 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    87a4:	20000118 	.word	0x20000118
    87a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    87ac:	4c87      	ldr	r4, [pc, #540]	; (89cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9cc>)
    87ae:	4682      	mov	sl, r0
    87b0:	4689      	mov	r9, r1
    87b2:	68a0      	ldr	r0, [r4, #8]
    87b4:	8800      	ldrh	r0, [r0, #0]
    87b6:	f7fb fe9d 	bl	44f4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    87ba:	0006      	movs	r6, r0
    87bc:	d00a      	beq.n	87d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7d4>
    87be:	8860      	ldrh	r0, [r4, #2]
    87c0:	f04f 0500 	mov.w	r5, #0
    87c4:	05c0      	lsls	r0, r0, #23
    87c6:	68a0      	ldr	r0, [r4, #8]
    87c8:	d509      	bpl.n	87de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7de>
    87ca:	f8a0 50a4 	strh.w	r5, [r0, #164]	; 0xa4
    87ce:	f880 510c 	strb.w	r5, [r0, #268]	; 0x10c
    87d2:	e008      	b.n	87e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7e6>
    87d4:	f640 51a2 	movw	r1, #3490	; 0xda2
    87d8:	2031      	movs	r0, #49	; 0x31
    87da:	f7fb fa4d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87de:	f830 1fa4 	ldrh.w	r1, [r0, #164]!
    87e2:	1c49      	adds	r1, r1, #1
    87e4:	8001      	strh	r1, [r0, #0]
    87e6:	f001 f8e3 	bl	99b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19b0>
    87ea:	f04f 0801 	mov.w	r8, #1
    87ee:	b320      	cbz	r0, 883a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83a>
    87f0:	8860      	ldrh	r0, [r4, #2]
    87f2:	0500      	lsls	r0, r0, #20
    87f4:	d506      	bpl.n	8804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x804>
    87f6:	68a0      	ldr	r0, [r4, #8]
    87f8:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    87fc:	b111      	cbz	r1, 8804 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x804>
    87fe:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    8802:	e01a      	b.n	883a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83a>
    8804:	68a0      	ldr	r0, [r4, #8]
    8806:	f8d0 1098 	ldr.w	r1, [r0, #152]	; 0x98
    880a:	1c49      	adds	r1, r1, #1
    880c:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
    8810:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    8814:	428b      	cmp	r3, r1
    8816:	d301      	bcc.n	881c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x81c>
    8818:	1a5a      	subs	r2, r3, r1
    881a:	e000      	b.n	881e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x81e>
    881c:	2200      	movs	r2, #0
    881e:	88a7      	ldrh	r7, [r4, #4]
    8820:	1d7f      	adds	r7, r7, #5
    8822:	42ba      	cmp	r2, r7
    8824:	d801      	bhi.n	882a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x82a>
    8826:	f880 80a2 	strb.w	r8, [r0, #162]	; 0xa2
    882a:	4299      	cmp	r1, r3
    882c:	d305      	bcc.n	883a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x83a>
    882e:	f8c0 5098 	str.w	r5, [r0, #152]	; 0x98
    8832:	f880 81fa 	strb.w	r8, [r0, #506]	; 0x1fa
    8836:	f001 f9e9 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    883a:	8860      	ldrh	r0, [r4, #2]
    883c:	f04f 0702 	mov.w	r7, #2
    8840:	f410 7f40 	tst.w	r0, #768	; 0x300
    8844:	d00e      	beq.n	8864 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x864>
    8846:	68a0      	ldr	r0, [r4, #8]
    8848:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    884c:	b111      	cbz	r1, 8854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x854>
    884e:	2903      	cmp	r1, #3
    8850:	d108      	bne.n	8864 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x864>
    8852:	e002      	b.n	885a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85a>
    8854:	f880 8081 	strb.w	r8, [r0, #129]	; 0x81
    8858:	e001      	b.n	885e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85e>
    885a:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    885e:	2101      	movs	r1, #1
    8860:	f7fe fd36 	bl	72d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8864:	68a0      	ldr	r0, [r4, #8]
    8866:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    886a:	2901      	cmp	r1, #1
    886c:	d104      	bne.n	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    886e:	8861      	ldrh	r1, [r4, #2]
    8870:	0549      	lsls	r1, r1, #21
    8872:	d501      	bpl.n	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    8874:	f880 7081 	strb.w	r7, [r0, #129]	; 0x81
    8878:	f1ba 0f00 	cmp.w	sl, #0
    887c:	d176      	bne.n	896c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96c>
    887e:	78a1      	ldrb	r1, [r4, #2]
    8880:	0649      	lsls	r1, r1, #25
    8882:	d502      	bpl.n	888a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x88a>
    8884:	f8a0 5120 	strh.w	r5, [r0, #288]	; 0x120
    8888:	e004      	b.n	8894 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x894>
    888a:	f8b0 1120 	ldrh.w	r1, [r0, #288]	; 0x120
    888e:	1c49      	adds	r1, r1, #1
    8890:	f8a0 1120 	strh.w	r1, [r0, #288]	; 0x120
    8894:	4648      	mov	r0, r9
    8896:	f7ff fdbb 	bl	8410 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x410>
    889a:	ea40 0009 	orr.w	r0, r0, r9
    889e:	4681      	mov	r9, r0
    88a0:	f7ff fd20 	bl	82e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2e4>
    88a4:	68a7      	ldr	r7, [r4, #8]
    88a6:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
    88aa:	1c40      	adds	r0, r0, #1
    88ac:	f8a7 0100 	strh.w	r0, [r7, #256]	; 0x100
    88b0:	f897 0104 	ldrb.w	r0, [r7, #260]	; 0x104
    88b4:	b128      	cbz	r0, 88c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c2>
    88b6:	f7fc faaf 	bl	4e18 <sym_ZWLSMB33C6NPFOBZGVPV4PN4UKQGSPLLR4WLDFI>
    88ba:	b1b0      	cbz	r0, 88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88bc:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    88c0:	e013      	b.n	88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88c2:	f7fc f921 	bl	4b08 <sym_Q3RLGT2MQM6S4H2ODVJHPDU44HGSYVXJV7676ZY>
    88c6:	b108      	cbz	r0, 88cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8cc>
    88c8:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    88cc:	f7fc f916 	bl	4afc <sym_IHWHOAENEU2EYZP2UWQTUC6SSXGS5NNQSIFSEAQ>
    88d0:	b158      	cbz	r0, 88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88d2:	f897 010c 	ldrb.w	r0, [r7, #268]	; 0x10c
    88d6:	1c40      	adds	r0, r0, #1
    88d8:	b2c0      	uxtb	r0, r0
    88da:	f887 010c 	strb.w	r0, [r7, #268]	; 0x10c
    88de:	2802      	cmp	r0, #2
    88e0:	d903      	bls.n	88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88e2:	f8a7 5100 	strh.w	r5, [r7, #256]	; 0x100
    88e6:	f887 510c 	strb.w	r5, [r7, #268]	; 0x10c
    88ea:	68a0      	ldr	r0, [r4, #8]
    88ec:	2301      	movs	r3, #1
    88ee:	2100      	movs	r1, #0
    88f0:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    88f4:	3070      	adds	r0, #112	; 0x70
    88f6:	f004 fa79 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    88fa:	b920      	cbnz	r0, 8906 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x906>
    88fc:	68a0      	ldr	r0, [r4, #8]
    88fe:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    8902:	280c      	cmp	r0, #12
    8904:	d15e      	bne.n	89c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c4>
    8906:	68a0      	ldr	r0, [r4, #8]
    8908:	2301      	movs	r3, #1
    890a:	2100      	movs	r1, #0
    890c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    8910:	3070      	adds	r0, #112	; 0x70
    8912:	f004 fa6b 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8916:	b350      	cbz	r0, 896e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96e>
    8918:	68a0      	ldr	r0, [r4, #8]
    891a:	2301      	movs	r3, #1
    891c:	2100      	movs	r1, #0
    891e:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    8922:	3070      	adds	r0, #112	; 0x70
    8924:	f004 fa62 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8928:	b308      	cbz	r0, 896e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96e>
    892a:	68a0      	ldr	r0, [r4, #8]
    892c:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    8930:	2902      	cmp	r1, #2
    8932:	d147      	bne.n	89c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c4>
    8934:	f890 010c 	ldrb.w	r0, [r0, #268]	; 0x10c
    8938:	b9c8      	cbnz	r0, 896e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96e>
    893a:	4630      	mov	r0, r6
    893c:	f003 fd37 	bl	c3ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    8940:	b1a8      	cbz	r0, 896e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96e>
    8942:	68a0      	ldr	r0, [r4, #8]
    8944:	3070      	adds	r0, #112	; 0x70
    8946:	f005 fd72 	bl	e42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    894a:	b980      	cbnz	r0, 896e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x96e>
    894c:	68a1      	ldr	r1, [r4, #8]
    894e:	f8b1 00fa 	ldrh.w	r0, [r1, #250]	; 0xfa
    8952:	2801      	cmp	r0, #1
    8954:	d936      	bls.n	89c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c4>
    8956:	f881 8102 	strb.w	r8, [r1, #258]	; 0x102
    895a:	f8b1 20a6 	ldrh.w	r2, [r1, #166]	; 0xa6
    895e:	f8b1 00a4 	ldrh.w	r0, [r1, #164]	; 0xa4
    8962:	1e93      	subs	r3, r2, #2
    8964:	4298      	cmp	r0, r3
    8966:	db03      	blt.n	8970 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x970>
    8968:	2001      	movs	r0, #1
    896a:	e004      	b.n	8976 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x976>
    896c:	e01c      	b.n	89a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a8>
    896e:	e029      	b.n	89c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9c4>
    8970:	1a10      	subs	r0, r2, r0
    8972:	1e40      	subs	r0, r0, #1
    8974:	b280      	uxth	r0, r0
    8976:	f8b1 2100 	ldrh.w	r2, [r1, #256]	; 0x100
    897a:	88a3      	ldrh	r3, [r4, #4]
    897c:	429a      	cmp	r2, r3
    897e:	d301      	bcc.n	8984 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x984>
    8980:	2201      	movs	r2, #1
    8982:	e002      	b.n	898a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x98a>
    8984:	1a9a      	subs	r2, r3, r2
    8986:	1c52      	adds	r2, r2, #1
    8988:	b292      	uxth	r2, r2
    898a:	4290      	cmp	r0, r2
    898c:	d900      	bls.n	8990 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x990>
    898e:	4610      	mov	r0, r2
    8990:	2801      	cmp	r0, #1
    8992:	d101      	bne.n	8998 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x998>
    8994:	f881 5102 	strb.w	r5, [r1, #258]	; 0x102
    8998:	68a1      	ldr	r1, [r4, #8]
    899a:	f8b1 2074 	ldrh.w	r2, [r1, #116]	; 0x74
    899e:	4410      	add	r0, r2
    89a0:	f8a1 00fc 	strh.w	r0, [r1, #252]	; 0xfc
    89a4:	f001 f8ce 	bl	9b44 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b44>
    89a8:	78a0      	ldrb	r0, [r4, #2]
    89aa:	464a      	mov	r2, r9
    89ac:	f3c0 1180 	ubfx	r1, r0, #6, #1
    89b0:	4650      	mov	r0, sl
    89b2:	f001 f811 	bl	99d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d8>
    89b6:	68a0      	ldr	r0, [r4, #8]
    89b8:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    89bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89c0:	f7fb bfe4 	b.w	498c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    89c4:	2001      	movs	r0, #1
    89c6:	68a1      	ldr	r1, [r4, #8]
    89c8:	e7e4      	b.n	8994 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x994>
    89ca:	0000      	.short	0x0000
    89cc:	20000118 	.word	0x20000118
    89d0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    89d2:	4c58      	ldr	r4, [pc, #352]	; (8b34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb34>)
    89d4:	2301      	movs	r3, #1
    89d6:	2100      	movs	r1, #0
    89d8:	68a0      	ldr	r0, [r4, #8]
    89da:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    89de:	3070      	adds	r0, #112	; 0x70
    89e0:	f004 fa04 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    89e4:	2800      	cmp	r0, #0
    89e6:	d07d      	beq.n	8ae4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae4>
    89e8:	68a0      	ldr	r0, [r4, #8]
    89ea:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
    89ee:	2500      	movs	r5, #0
    89f0:	b139      	cbz	r1, 8a02 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa02>
    89f2:	2100      	movs	r1, #0
    89f4:	200e      	movs	r0, #14
    89f6:	f000 f89f 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    89fa:	68a0      	ldr	r0, [r4, #8]
    89fc:	f880 51b5 	strb.w	r5, [r0, #437]	; 0x1b5
    8a00:	e095      	b.n	8b2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2e>
    8a02:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    8a06:	b119      	cbz	r1, 8a10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa10>
    8a08:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    8a0c:	0789      	lsls	r1, r1, #30
    8a0e:	d016      	beq.n	8a3e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa3e>
    8a10:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
    8a14:	f88d 1004 	strb.w	r1, [sp, #4]
    8a18:	9901      	ldr	r1, [sp, #4]
    8a1a:	9101      	str	r1, [sp, #4]
    8a1c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8a20:	b141      	cbz	r1, 8a34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa34>
    8a22:	f890 11a5 	ldrb.w	r1, [r0, #421]	; 0x1a5
    8a26:	f88d 1000 	strb.w	r1, [sp]
    8a2a:	9900      	ldr	r1, [sp, #0]
    8a2c:	9100      	str	r1, [sp, #0]
    8a2e:	f89d 1000 	ldrb.w	r1, [sp]
    8a32:	b189      	cbz	r1, 8a58 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa58>
    8a34:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    8a38:	2901      	cmp	r1, #1
    8a3a:	d02f      	beq.n	8a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa9c>
    8a3c:	e071      	b.n	8b22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb22>
    8a3e:	2100      	movs	r1, #0
    8a40:	200c      	movs	r0, #12
    8a42:	f000 f879 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8a46:	68a0      	ldr	r0, [r4, #8]
    8a48:	f810 1fb6 	ldrb.w	r1, [r0, #182]!
    8a4c:	f041 0101 	orr.w	r1, r1, #1
    8a50:	7001      	strb	r1, [r0, #0]
    8a52:	f880 50fe 	strb.w	r5, [r0, #254]	; 0xfe
    8a56:	e06a      	b.n	8b2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2e>
    8a58:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8a5c:	2924      	cmp	r1, #36	; 0x24
    8a5e:	d01b      	beq.n	8a98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa98>
    8a60:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    8a64:	2924      	cmp	r1, #36	; 0x24
    8a66:	d017      	beq.n	8a98 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa98>
    8a68:	f05f 0300 	movs.w	r3, #0
    8a6c:	f500 72cb 	add.w	r2, r0, #406	; 0x196
    8a70:	f500 71d2 	add.w	r1, r0, #420	; 0x1a4
    8a74:	f004 fdb1 	bl	d5da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    8a78:	68a0      	ldr	r0, [r4, #8]
    8a7a:	f880 51a4 	strb.w	r5, [r0, #420]	; 0x1a4
    8a7e:	2100      	movs	r1, #0
    8a80:	2014      	movs	r0, #20
    8a82:	f000 f859 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8a86:	68a1      	ldr	r1, [r4, #8]
    8a88:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    8a8c:	8bc2      	ldrh	r2, [r0, #30]
    8a8e:	f821 2fee 	strh.w	r2, [r1, #238]!
    8a92:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    8a94:	8048      	strh	r0, [r1, #2]
    8a96:	e04a      	b.n	8b2e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb2e>
    8a98:	2301      	movs	r3, #1
    8a9a:	e7e7      	b.n	8a6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa6c>
    8a9c:	f890 11af 	ldrb.w	r1, [r0, #431]	; 0x1af
    8aa0:	f88d 1000 	strb.w	r1, [sp]
    8aa4:	9900      	ldr	r1, [sp, #0]
    8aa6:	9100      	str	r1, [sp, #0]
    8aa8:	f89d 1000 	ldrb.w	r1, [sp]
    8aac:	bb31      	cbnz	r1, 8afc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xafc>
    8aae:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ab2:	2301      	movs	r3, #1
    8ab4:	210b      	movs	r1, #11
    8ab6:	3070      	adds	r0, #112	; 0x70
    8ab8:	f004 f998 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8abc:	b9f0      	cbnz	r0, 8afc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xafc>
    8abe:	68a0      	ldr	r0, [r4, #8]
    8ac0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    8ac4:	f005 fcbb 	bl	e43e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8ac8:	4605      	mov	r5, r0
    8aca:	68a0      	ldr	r0, [r4, #8]
    8acc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    8ad0:	f005 fcb5 	bl	e43e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8ad4:	4606      	mov	r6, r0
    8ad6:	68a0      	ldr	r0, [r4, #8]
    8ad8:	f890 11b0 	ldrb.w	r1, [r0, #432]	; 0x1b0
    8adc:	4628      	mov	r0, r5
    8ade:	f005 fcb9 	bl	e454 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8ae2:	e000      	b.n	8ae6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae6>
    8ae4:	e01e      	b.n	8b24 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb24>
    8ae6:	b150      	cbz	r0, 8afe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xafe>
    8ae8:	68a0      	ldr	r0, [r4, #8]
    8aea:	f890 11b1 	ldrb.w	r1, [r0, #433]	; 0x1b1
    8aee:	4630      	mov	r0, r6
    8af0:	f005 fcb0 	bl	e454 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    8af4:	b118      	cbz	r0, 8afe <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xafe>
    8af6:	2000      	movs	r0, #0
    8af8:	f000 f91c 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    8afc:	e011      	b.n	8b22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb22>
    8afe:	68a0      	ldr	r0, [r4, #8]
    8b00:	2301      	movs	r3, #1
    8b02:	2103      	movs	r1, #3
    8b04:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8b08:	3070      	adds	r0, #112	; 0x70
    8b0a:	f004 f96f 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b0e:	b940      	cbnz	r0, 8b22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb22>
    8b10:	68a0      	ldr	r0, [r4, #8]
    8b12:	2301      	movs	r3, #1
    8b14:	2102      	movs	r1, #2
    8b16:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8b1a:	3070      	adds	r0, #112	; 0x70
    8b1c:	f004 f966 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8b20:	b108      	cbz	r0, 8b26 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb26>
    8b22:	2000      	movs	r0, #0
    8b24:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8b26:	2100      	movs	r1, #0
    8b28:	2016      	movs	r0, #22
    8b2a:	f000 f805 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8b2e:	2001      	movs	r0, #1
    8b30:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8b32:	0000      	.short	0x0000
    8b34:	20000118 	.word	0x20000118
    8b38:	b570      	push	{r4, r5, r6, lr}
    8b3a:	4c0d      	ldr	r4, [pc, #52]	; (8b70 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb70>)
    8b3c:	4606      	mov	r6, r0
    8b3e:	460d      	mov	r5, r1
    8b40:	68a0      	ldr	r0, [r4, #8]
    8b42:	3070      	adds	r0, #112	; 0x70
    8b44:	f005 fc73 	bl	e42e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    8b48:	b120      	cbz	r0, 8b54 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb54>
    8b4a:	f640 210f 	movw	r1, #2575	; 0xa0f
    8b4e:	2031      	movs	r0, #49	; 0x31
    8b50:	f7fb f892 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b54:	68a2      	ldr	r2, [r4, #8]
    8b56:	2000      	movs	r0, #0
    8b58:	f882 60ec 	strb.w	r6, [r2, #236]	; 0xec
    8b5c:	b115      	cbz	r5, 8b64 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb64>
    8b5e:	f8a2 00b0 	strh.w	r0, [r2, #176]	; 0xb0
    8b62:	bd70      	pop	{r4, r5, r6, pc}
    8b64:	f822 0faa 	strh.w	r0, [r2, #170]!
    8b68:	2001      	movs	r0, #1
    8b6a:	7110      	strb	r0, [r2, #4]
    8b6c:	bd70      	pop	{r4, r5, r6, pc}
    8b6e:	0000      	.short	0x0000
    8b70:	20000118 	.word	0x20000118
    8b74:	b570      	push	{r4, r5, r6, lr}
    8b76:	4d1a      	ldr	r5, [pc, #104]	; (8be0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbe0>)
    8b78:	2600      	movs	r6, #0
    8b7a:	68ac      	ldr	r4, [r5, #8]
    8b7c:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    8b80:	2801      	cmp	r0, #1
    8b82:	d00a      	beq.n	8b9a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb9a>
    8b84:	2802      	cmp	r0, #2
    8b86:	d129      	bne.n	8bdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbdc>
    8b88:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    8b8c:	2106      	movs	r1, #6
    8b8e:	b1a0      	cbz	r0, 8bba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbba>
    8b90:	f884 10ee 	strb.w	r1, [r4, #238]	; 0xee
    8b94:	2101      	movs	r1, #1
    8b96:	2002      	movs	r0, #2
    8b98:	e01b      	b.n	8bd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd2>
    8b9a:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
    8b9e:	2800      	cmp	r0, #0
    8ba0:	d11c      	bne.n	8bdc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbdc>
    8ba2:	2200      	movs	r2, #0
    8ba4:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    8ba8:	f504 7188 	add.w	r1, r4, #272	; 0x110
    8bac:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    8bb0:	f004 f8d4 	bl	cd5c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    8bb4:	2101      	movs	r1, #1
    8bb6:	2005      	movs	r0, #5
    8bb8:	e00b      	b.n	8bd2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd2>
    8bba:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    8bbe:	0740      	lsls	r0, r0, #29
    8bc0:	d505      	bpl.n	8bce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbce>
    8bc2:	2011      	movs	r0, #17
    8bc4:	2203      	movs	r2, #3
    8bc6:	f804 2fee 	strb.w	r2, [r4, #238]!
    8bca:	7061      	strb	r1, [r4, #1]
    8bcc:	e000      	b.n	8bd0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbd0>
    8bce:	200d      	movs	r0, #13
    8bd0:	2101      	movs	r1, #1
    8bd2:	f7ff ffb1 	bl	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    8bd6:	68a8      	ldr	r0, [r5, #8]
    8bd8:	f880 617b 	strb.w	r6, [r0, #379]	; 0x17b
    8bdc:	bd70      	pop	{r4, r5, r6, pc}
    8bde:	0000      	.short	0x0000
    8be0:	20000118 	.word	0x20000118
    8be4:	b570      	push	{r4, r5, r6, lr}
    8be6:	4a2b      	ldr	r2, [pc, #172]	; (8c94 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc94>)
    8be8:	4603      	mov	r3, r0
    8bea:	8850      	ldrh	r0, [r2, #2]
    8bec:	4318      	orrs	r0, r3
    8bee:	8050      	strh	r0, [r2, #2]
    8bf0:	4610      	mov	r0, r2
    8bf2:	2b40      	cmp	r3, #64	; 0x40
    8bf4:	6880      	ldr	r0, [r0, #8]
    8bf6:	d00d      	beq.n	8c14 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc14>
    8bf8:	079e      	lsls	r6, r3, #30
    8bfa:	f04f 0500 	mov.w	r5, #0
    8bfe:	f04f 0401 	mov.w	r4, #1
    8c02:	ea4f 76c3 	mov.w	r6, r3, lsl #31
    8c06:	d50c      	bpl.n	8c22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc22>
    8c08:	b14e      	cbz	r6, 8c1e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc1e>
    8c0a:	f640 510f 	movw	r1, #3343	; 0xd0f
    8c0e:	2031      	movs	r0, #49	; 0x31
    8c10:	f7fb f832 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8c18:	2104      	movs	r1, #4
    8c1a:	f7fe bb59 	b.w	72d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    8c1e:	60d1      	str	r1, [r2, #12]
    8c20:	e01c      	b.n	8c5c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc5c>
    8c22:	b1c6      	cbz	r6, 8c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc56>
    8c24:	6111      	str	r1, [r2, #16]
    8c26:	78c9      	ldrb	r1, [r1, #3]
    8c28:	2906      	cmp	r1, #6
    8c2a:	d002      	beq.n	8c32 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc32>
    8c2c:	290b      	cmp	r1, #11
    8c2e:	d112      	bne.n	8c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc56>
    8c30:	e009      	b.n	8c46 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc46>
    8c32:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c36:	2917      	cmp	r1, #23
    8c38:	d10d      	bne.n	8c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc56>
    8c3a:	2100      	movs	r1, #0
    8c3c:	e9c0 1130 	strd	r1, r1, [r0, #192]	; 0xc0
    8c40:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
    8c44:	e007      	b.n	8c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc56>
    8c46:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c4a:	2911      	cmp	r1, #17
    8c4c:	d103      	bne.n	8c56 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc56>
    8c4e:	f880 5082 	strb.w	r5, [r0, #130]	; 0x82
    8c52:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    8c56:	0799      	lsls	r1, r3, #30
    8c58:	d516      	bpl.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8c5a:	68d1      	ldr	r1, [r2, #12]
    8c5c:	78c9      	ldrb	r1, [r1, #3]
    8c5e:	2905      	cmp	r1, #5
    8c60:	d002      	beq.n	8c68 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc68>
    8c62:	290b      	cmp	r1, #11
    8c64:	d110      	bne.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8c66:	e009      	b.n	8c7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc7c>
    8c68:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c6c:	2915      	cmp	r1, #21
    8c6e:	d10b      	bne.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8c70:	2100      	movs	r1, #0
    8c72:	e9e0 1132 	strd	r1, r1, [r0, #200]!	; 0xc8
    8c76:	f800 4c45 	strb.w	r4, [r0, #-69]
    8c7a:	e005      	b.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8c7c:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    8c80:	2910      	cmp	r1, #16
    8c82:	d101      	bne.n	8c88 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc88>
    8c84:	f880 5083 	strb.w	r5, [r0, #131]	; 0x83
    8c88:	0698      	lsls	r0, r3, #26
    8c8a:	d501      	bpl.n	8c90 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc90>
    8c8c:	2008      	movs	r0, #8
    8c8e:	7050      	strb	r0, [r2, #1]
    8c90:	bd70      	pop	{r4, r5, r6, pc}
    8c92:	0000      	.short	0x0000
    8c94:	20000118 	.word	0x20000118
    8c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c9c:	4c24      	ldr	r4, [pc, #144]	; (8d30 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd30>)
    8c9e:	2501      	movs	r5, #1
    8ca0:	68a2      	ldr	r2, [r4, #8]
    8ca2:	f892 0196 	ldrb.w	r0, [r2, #406]	; 0x196
    8ca6:	b108      	cbz	r0, 8cac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcac>
    8ca8:	2701      	movs	r7, #1
    8caa:	e000      	b.n	8cae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcae>
    8cac:	2700      	movs	r7, #0
    8cae:	f892 1197 	ldrb.w	r1, [r2, #407]	; 0x197
    8cb2:	b109      	cbz	r1, 8cb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcb8>
    8cb4:	2601      	movs	r6, #1
    8cb6:	e000      	b.n	8cba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcba>
    8cb8:	2600      	movs	r6, #0
    8cba:	b90f      	cbnz	r7, 8cc0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc0>
    8cbc:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    8cc0:	b90e      	cbnz	r6, 8cc6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc6>
    8cc2:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    8cc6:	f102 0362 	add.w	r3, r2, #98	; 0x62
    8cca:	7218      	strb	r0, [r3, #8]
    8ccc:	7259      	strb	r1, [r3, #9]
    8cce:	2001      	movs	r0, #1
    8cd0:	7298      	strb	r0, [r3, #10]
    8cd2:	f892 01ae 	ldrb.w	r0, [r2, #430]	; 0x1ae
    8cd6:	2801      	cmp	r0, #1
    8cd8:	d001      	beq.n	8cde <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcde>
    8cda:	b907      	cbnz	r7, 8cde <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcde>
    8cdc:	b116      	cbz	r6, 8ce4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xce4>
    8cde:	2000      	movs	r0, #0
    8ce0:	f000 f828 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    8ce4:	68a0      	ldr	r0, [r4, #8]
    8ce6:	302c      	adds	r0, #44	; 0x2c
    8ce8:	f004 fce6 	bl	d6b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8cec:	4606      	mov	r6, r0
    8cee:	68a0      	ldr	r0, [r4, #8]
    8cf0:	f004 fc8e 	bl	d610 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    8cf4:	b1c0      	cbz	r0, 8d28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd28>
    8cf6:	68a0      	ldr	r0, [r4, #8]
    8cf8:	302c      	adds	r0, #44	; 0x2c
    8cfa:	f004 fcdd 	bl	d6b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    8cfe:	68a1      	ldr	r1, [r4, #8]
    8d00:	4607      	mov	r7, r0
    8d02:	f501 72ed 	add.w	r2, r1, #474	; 0x1da
    8d06:	8808      	ldrh	r0, [r1, #0]
    8d08:	312c      	adds	r1, #44	; 0x2c
    8d0a:	f004 fc42 	bl	d592 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    8d0e:	42be      	cmp	r6, r7
    8d10:	d20a      	bcs.n	8d28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd28>
    8d12:	f7f8 fbd9 	bl	14c8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    8d16:	4601      	mov	r1, r0
    8d18:	1bb8      	subs	r0, r7, r6
    8d1a:	2864      	cmp	r0, #100	; 0x64
    8d1c:	d200      	bcs.n	8d20 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd20>
    8d1e:	2064      	movs	r0, #100	; 0x64
    8d20:	f7f8 fb10 	bl	1344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    8d24:	b100      	cbz	r0, 8d28 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd28>
    8d26:	2500      	movs	r5, #0
    8d28:	4628      	mov	r0, r5
    8d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d2e:	0000      	.short	0x0000
    8d30:	20000118 	.word	0x20000118
    8d34:	b510      	push	{r4, lr}
    8d36:	4c10      	ldr	r4, [pc, #64]	; (8d78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd78>)
    8d38:	68a1      	ldr	r1, [r4, #8]
    8d3a:	880a      	ldrh	r2, [r1, #0]
    8d3c:	f8a1 2206 	strh.w	r2, [r1, #518]	; 0x206
    8d40:	f881 0204 	strb.w	r0, [r1, #516]	; 0x204
    8d44:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    8d48:	f005 fb79 	bl	e43e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d4c:	68a1      	ldr	r1, [r4, #8]
    8d4e:	f881 0208 	strb.w	r0, [r1, #520]	; 0x208
    8d52:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    8d56:	f005 fb72 	bl	e43e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    8d5a:	68a2      	ldr	r2, [r4, #8]
    8d5c:	f202 2102 	addw	r1, r2, #514	; 0x202
    8d60:	f882 0209 	strb.w	r0, [r2, #521]	; 0x209
    8d64:	2001      	movs	r0, #1
    8d66:	7008      	strb	r0, [r1, #0]
    8d68:	2000      	movs	r0, #0
    8d6a:	f882 01ae 	strb.w	r0, [r2, #430]	; 0x1ae
    8d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8d72:	f000 bf4b 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8d76:	0000      	.short	0x0000
    8d78:	20000118 	.word	0x20000118
    8d7c:	b510      	push	{r4, lr}
    8d7e:	4c15      	ldr	r4, [pc, #84]	; (8dd4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdd4>)
    8d80:	2301      	movs	r3, #1
    8d82:	2100      	movs	r1, #0
    8d84:	68a0      	ldr	r0, [r4, #8]
    8d86:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8d8a:	3070      	adds	r0, #112	; 0x70
    8d8c:	f004 f82e 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8d90:	b190      	cbz	r0, 8db8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdb8>
    8d92:	6920      	ldr	r0, [r4, #16]
    8d94:	f004 fa71 	bl	d27a <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>
    8d98:	68a1      	ldr	r1, [r4, #8]
    8d9a:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8d9e:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8da2:	f005 fb65 	bl	e470 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8da6:	b148      	cbz	r0, 8dbc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdbc>
    8da8:	68a0      	ldr	r0, [r4, #8]
    8daa:	2128      	movs	r1, #40	; 0x28
    8dac:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8db0:	3076      	adds	r0, #118	; 0x76
    8db2:	2101      	movs	r1, #1
    8db4:	7781      	strb	r1, [r0, #30]
    8db6:	e00b      	b.n	8dd0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdd0>
    8db8:	2001      	movs	r0, #1
    8dba:	bd10      	pop	{r4, pc}
    8dbc:	68a1      	ldr	r1, [r4, #8]
    8dbe:	6920      	ldr	r0, [r4, #16]
    8dc0:	f501 71cb 	add.w	r1, r1, #406	; 0x196
    8dc4:	f004 fa54 	bl	d270 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>
    8dc8:	68a1      	ldr	r1, [r4, #8]
    8dca:	200b      	movs	r0, #11
    8dcc:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8dd0:	2000      	movs	r0, #0
    8dd2:	bd10      	pop	{r4, pc}
    8dd4:	20000118 	.word	0x20000118
    8dd8:	b570      	push	{r4, r5, r6, lr}
    8dda:	4c29      	ldr	r4, [pc, #164]	; (8e80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe80>)
    8ddc:	2301      	movs	r3, #1
    8dde:	2100      	movs	r1, #0
    8de0:	68a0      	ldr	r0, [r4, #8]
    8de2:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8de6:	3070      	adds	r0, #112	; 0x70
    8de8:	f004 f800 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8dec:	b1b8      	cbz	r0, 8e1e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe1e>
    8dee:	2100      	movs	r1, #0
    8df0:	6920      	ldr	r0, [r4, #16]
    8df2:	f004 fa15 	bl	d220 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>
    8df6:	b1a0      	cbz	r0, 8e22 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe22>
    8df8:	6920      	ldr	r0, [r4, #16]
    8dfa:	68a1      	ldr	r1, [r4, #8]
    8dfc:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    8e00:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    8e04:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    8e08:	f005 fb32 	bl	e470 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    8e0c:	b168      	cbz	r0, 8e2a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe2a>
    8e0e:	68a0      	ldr	r0, [r4, #8]
    8e10:	2128      	movs	r1, #40	; 0x28
    8e12:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    8e16:	3076      	adds	r0, #118	; 0x76
    8e18:	2101      	movs	r1, #1
    8e1a:	7781      	strb	r1, [r0, #30]
    8e1c:	e02e      	b.n	8e7c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe7c>
    8e1e:	2001      	movs	r0, #1
    8e20:	bd70      	pop	{r4, r5, r6, pc}
    8e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e26:	f000 b8ad 	b.w	8f84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf84>
    8e2a:	6920      	ldr	r0, [r4, #16]
    8e2c:	f004 fa28 	bl	d280 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>
    8e30:	f003 ffbf 	bl	cdb2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    8e34:	4605      	mov	r5, r0
    8e36:	68a0      	ldr	r0, [r4, #8]
    8e38:	4629      	mov	r1, r5
    8e3a:	f8c0 519c 	str.w	r5, [r0, #412]	; 0x19c
    8e3e:	6920      	ldr	r0, [r4, #16]
    8e40:	7900      	ldrb	r0, [r0, #4]
    8e42:	f004 f941 	bl	d0c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8e46:	68a1      	ldr	r1, [r4, #8]
    8e48:	f8a1 0196 	strh.w	r0, [r1, #406]	; 0x196
    8e4c:	6920      	ldr	r0, [r4, #16]
    8e4e:	4629      	mov	r1, r5
    8e50:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    8e54:	f004 f934 	bl	d0c0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8e58:	68a1      	ldr	r1, [r4, #8]
    8e5a:	f8c1 0198 	str.w	r0, [r1, #408]	; 0x198
    8e5e:	6920      	ldr	r0, [r4, #16]
    8e60:	f004 fa11 	bl	d286 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>
    8e64:	68a1      	ldr	r1, [r4, #8]
    8e66:	f8a1 01a0 	strh.w	r0, [r1, #416]	; 0x1a0
    8e6a:	6920      	ldr	r0, [r4, #16]
    8e6c:	f004 fa0e 	bl	d28c <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>
    8e70:	68a1      	ldr	r1, [r4, #8]
    8e72:	f8a1 01a2 	strh.w	r0, [r1, #418]	; 0x1a2
    8e76:	200d      	movs	r0, #13
    8e78:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8e7c:	2000      	movs	r0, #0
    8e7e:	bd70      	pop	{r4, r5, r6, pc}
    8e80:	20000118 	.word	0x20000118
    8e84:	b538      	push	{r3, r4, r5, lr}
    8e86:	4c29      	ldr	r4, [pc, #164]	; (8f2c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf2c>)
    8e88:	2301      	movs	r3, #1
    8e8a:	2100      	movs	r1, #0
    8e8c:	68a0      	ldr	r0, [r4, #8]
    8e8e:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8e92:	3070      	adds	r0, #112	; 0x70
    8e94:	f003 ffaa 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e98:	b970      	cbnz	r0, 8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>
    8e9a:	68a0      	ldr	r0, [r4, #8]
    8e9c:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    8ea0:	2a12      	cmp	r2, #18
    8ea2:	d009      	beq.n	8eb8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb8>
    8ea4:	2301      	movs	r3, #1
    8ea6:	2105      	movs	r1, #5
    8ea8:	3070      	adds	r0, #112	; 0x70
    8eaa:	f003 ff9f 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8eae:	b108      	cbz	r0, 8eb4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xeb4>
    8eb0:	2008      	movs	r0, #8
    8eb2:	bd38      	pop	{r3, r4, r5, pc}
    8eb4:	2001      	movs	r0, #1
    8eb6:	bd38      	pop	{r3, r4, r5, pc}
    8eb8:	68a0      	ldr	r0, [r4, #8]
    8eba:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    8ebe:	b908      	cbnz	r0, 8ec4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xec4>
    8ec0:	f7ff f8ca 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    8ec4:	68a1      	ldr	r1, [r4, #8]
    8ec6:	6920      	ldr	r0, [r4, #16]
    8ec8:	f501 7188 	add.w	r1, r1, #272	; 0x110
    8ecc:	f004 f9ed 	bl	d2aa <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>
    8ed0:	68a1      	ldr	r1, [r4, #8]
    8ed2:	6920      	ldr	r0, [r4, #16]
    8ed4:	31e0      	adds	r1, #224	; 0xe0
    8ed6:	f004 f9df 	bl	d298 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>
    8eda:	68a1      	ldr	r1, [r4, #8]
    8edc:	f891 01cc 	ldrb.w	r0, [r1, #460]	; 0x1cc
    8ee0:	f88d 0000 	strb.w	r0, [sp]
    8ee4:	9800      	ldr	r0, [sp, #0]
    8ee6:	9000      	str	r0, [sp, #0]
    8ee8:	f89d 0000 	ldrb.w	r0, [sp]
    8eec:	b120      	cbz	r0, 8ef8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xef8>
    8eee:	f44f 7128 	mov.w	r1, #672	; 0x2a0
    8ef2:	2031      	movs	r0, #49	; 0x31
    8ef4:	f7fa fec0 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ef8:	8808      	ldrh	r0, [r1, #0]
    8efa:	f8a1 01ce 	strh.w	r0, [r1, #462]	; 0x1ce
    8efe:	f501 71e8 	add.w	r1, r1, #464	; 0x1d0
    8f02:	6920      	ldr	r0, [r4, #16]
    8f04:	f004 f9cc 	bl	d2a0 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>
    8f08:	68a1      	ldr	r1, [r4, #8]
    8f0a:	6920      	ldr	r0, [r4, #16]
    8f0c:	f501 71ec 	add.w	r1, r1, #472	; 0x1d8
    8f10:	f004 f9bf 	bl	d292 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>
    8f14:	68a0      	ldr	r0, [r4, #8]
    8f16:	4601      	mov	r1, r0
    8f18:	2201      	movs	r2, #1
    8f1a:	f880 21cc 	strb.w	r2, [r0, #460]	; 0x1cc
    8f1e:	2014      	movs	r0, #20
    8f20:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    8f24:	f000 fe72 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8f28:	2000      	movs	r0, #0
    8f2a:	bd38      	pop	{r3, r4, r5, pc}
    8f2c:	20000118 	.word	0x20000118
    8f30:	b51c      	push	{r2, r3, r4, lr}
    8f32:	4c13      	ldr	r4, [pc, #76]	; (8f80 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf80>)
    8f34:	68a0      	ldr	r0, [r4, #8]
    8f36:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    8f3a:	07c0      	lsls	r0, r0, #31
    8f3c:	d001      	beq.n	8f42 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf42>
    8f3e:	2001      	movs	r0, #1
    8f40:	bd1c      	pop	{r2, r3, r4, pc}
    8f42:	4669      	mov	r1, sp
    8f44:	6920      	ldr	r0, [r4, #16]
    8f46:	f004 f9b6 	bl	d2b6 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>
    8f4a:	f001 fa09 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    8f4e:	f644 112f 	movw	r1, #18735	; 0x492f
    8f52:	4008      	ands	r0, r1
    8f54:	f89d 2000 	ldrb.w	r2, [sp]
    8f58:	68a1      	ldr	r1, [r4, #8]
    8f5a:	4002      	ands	r2, r0
    8f5c:	f801 2fbc 	strb.w	r2, [r1, #188]!
    8f60:	f89d 2001 	ldrb.w	r2, [sp, #1]
    8f64:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    8f68:	7048      	strb	r0, [r1, #1]
    8f6a:	f7ff f875 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    8f6e:	68a0      	ldr	r0, [r4, #8]
    8f70:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    8f74:	f041 0101 	orr.w	r1, r1, #1
    8f78:	7001      	strb	r1, [r0, #0]
    8f7a:	2000      	movs	r0, #0
    8f7c:	bd1c      	pop	{r2, r3, r4, pc}
    8f7e:	0000      	.short	0x0000
    8f80:	20000118 	.word	0x20000118
    8f84:	4a0a      	ldr	r2, [pc, #40]	; (8fb0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfb0>)
    8f86:	b510      	push	{r4, lr}
    8f88:	6890      	ldr	r0, [r2, #8]
    8f8a:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    8f8e:	070b      	lsls	r3, r1, #28
    8f90:	d501      	bpl.n	8f96 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf96>
    8f92:	2001      	movs	r0, #1
    8f94:	bd10      	pop	{r4, pc}
    8f96:	f041 0108 	orr.w	r1, r1, #8
    8f9a:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    8f9e:	6911      	ldr	r1, [r2, #16]
    8fa0:	78c9      	ldrb	r1, [r1, #3]
    8fa2:	f880 10e9 	strb.w	r1, [r0, #233]	; 0xe9
    8fa6:	f7ff f857 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    8faa:	2000      	movs	r0, #0
    8fac:	bd10      	pop	{r4, pc}
    8fae:	0000      	.short	0x0000
    8fb0:	20000118 	.word	0x20000118
    8fb4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    8fb8:	4c34      	ldr	r4, [pc, #208]	; (908c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x108c>)
    8fba:	68a0      	ldr	r0, [r4, #8]
    8fbc:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    8fc0:	f010 0f30 	tst.w	r0, #48	; 0x30
    8fc4:	d002      	beq.n	8fcc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfcc>
    8fc6:	2001      	movs	r0, #1
    8fc8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    8fcc:	6920      	ldr	r0, [r4, #16]
    8fce:	f004 f98d 	bl	d2ec <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    8fd2:	b318      	cbz	r0, 901c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x101c>
    8fd4:	6920      	ldr	r0, [r4, #16]
    8fd6:	f004 f97b 	bl	d2d0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    8fda:	4607      	mov	r7, r0
    8fdc:	6920      	ldr	r0, [r4, #16]
    8fde:	f004 f97b 	bl	d2d8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    8fe2:	4606      	mov	r6, r0
    8fe4:	6920      	ldr	r0, [r4, #16]
    8fe6:	f004 f971 	bl	d2cc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    8fea:	4605      	mov	r5, r0
    8fec:	6920      	ldr	r0, [r4, #16]
    8fee:	f004 f971 	bl	d2d4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    8ff2:	4601      	mov	r1, r0
    8ff4:	9700      	str	r7, [sp, #0]
    8ff6:	68a0      	ldr	r0, [r4, #8]
    8ff8:	4633      	mov	r3, r6
    8ffa:	462a      	mov	r2, r5
    8ffc:	302c      	adds	r0, #44	; 0x2c
    8ffe:	f004 fb95 	bl	d72c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9002:	78a0      	ldrb	r0, [r4, #2]
    9004:	0780      	lsls	r0, r0, #30
    9006:	d503      	bpl.n	9010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1010>
    9008:	68e0      	ldr	r0, [r4, #12]
    900a:	78c0      	ldrb	r0, [r0, #3]
    900c:	2814      	cmp	r0, #20
    900e:	d009      	beq.n	9024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1024>
    9010:	68a0      	ldr	r0, [r4, #8]
    9012:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    9016:	281c      	cmp	r0, #28
    9018:	d004      	beq.n	9024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1024>
    901a:	e007      	b.n	902c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x102c>
    901c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9020:	f7ff bfb0 	b.w	8f84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf84>
    9024:	68a1      	ldr	r1, [r4, #8]
    9026:	2001      	movs	r0, #1
    9028:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    902c:	68a1      	ldr	r1, [r4, #8]
    902e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9032:	2801      	cmp	r0, #1
    9034:	d011      	beq.n	905a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105a>
    9036:	f891 01a5 	ldrb.w	r0, [r1, #421]	; 0x1a5
    903a:	f88d 0004 	strb.w	r0, [sp, #4]
    903e:	9801      	ldr	r0, [sp, #4]
    9040:	9001      	str	r0, [sp, #4]
    9042:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9046:	b940      	cbnz	r0, 905a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x105a>
    9048:	f891 01a4 	ldrb.w	r0, [r1, #420]	; 0x1a4
    904c:	f88d 0000 	strb.w	r0, [sp]
    9050:	9800      	ldr	r0, [sp, #0]
    9052:	9000      	str	r0, [sp, #0]
    9054:	f89d 0000 	ldrb.w	r0, [sp]
    9058:	b128      	cbz	r0, 9066 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1066>
    905a:	f811 0f7f 	ldrb.w	r0, [r1, #127]!
    905e:	f040 0010 	orr.w	r0, r0, #16
    9062:	7008      	strb	r0, [r1, #0]
    9064:	e00d      	b.n	9082 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1082>
    9066:	f891 007f 	ldrb.w	r0, [r1, #127]	; 0x7f
    906a:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
    906e:	f040 0020 	orr.w	r0, r0, #32
    9072:	f881 007f 	strb.w	r0, [r1, #127]	; 0x7f
    9076:	f831 0b2c 	ldrh.w	r0, [r1], #44
    907a:	f004 fb5e 	bl	d73a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    907e:	f000 fdc5 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9082:	f7fe ffe9 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    9086:	2000      	movs	r0, #0
    9088:	e79e      	b.n	8fc8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfc8>
    908a:	0000      	.short	0x0000
    908c:	20000118 	.word	0x20000118
    9090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9092:	4c1a      	ldr	r4, [pc, #104]	; (90fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10fc>)
    9094:	2301      	movs	r3, #1
    9096:	210a      	movs	r1, #10
    9098:	68a0      	ldr	r0, [r4, #8]
    909a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    909e:	3070      	adds	r0, #112	; 0x70
    90a0:	f003 fea4 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    90a4:	b338      	cbz	r0, 90f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10f6>
    90a6:	6920      	ldr	r0, [r4, #16]
    90a8:	f004 f920 	bl	d2ec <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    90ac:	b1c8      	cbz	r0, 90e2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10e2>
    90ae:	6920      	ldr	r0, [r4, #16]
    90b0:	f004 f90e 	bl	d2d0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    90b4:	4607      	mov	r7, r0
    90b6:	6920      	ldr	r0, [r4, #16]
    90b8:	f004 f90e 	bl	d2d8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    90bc:	4606      	mov	r6, r0
    90be:	6920      	ldr	r0, [r4, #16]
    90c0:	f004 f904 	bl	d2cc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    90c4:	4605      	mov	r5, r0
    90c6:	6920      	ldr	r0, [r4, #16]
    90c8:	f004 f904 	bl	d2d4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    90cc:	4601      	mov	r1, r0
    90ce:	9700      	str	r7, [sp, #0]
    90d0:	68a0      	ldr	r0, [r4, #8]
    90d2:	4633      	mov	r3, r6
    90d4:	462a      	mov	r2, r5
    90d6:	302c      	adds	r0, #44	; 0x2c
    90d8:	f004 fb28 	bl	d72c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    90dc:	68a0      	ldr	r0, [r4, #8]
    90de:	f004 fa97 	bl	d610 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    90e2:	68a1      	ldr	r1, [r4, #8]
    90e4:	2000      	movs	r0, #0
    90e6:	f881 00ae 	strb.w	r0, [r1, #174]	; 0xae
    90ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    90ee:	f7ff f977 	bl	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
    90f2:	2000      	movs	r0, #0
    90f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90f6:	2001      	movs	r0, #1
    90f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    90fa:	0000      	.short	0x0000
    90fc:	20000118 	.word	0x20000118
    9100:	b510      	push	{r4, lr}
    9102:	4c09      	ldr	r4, [pc, #36]	; (9128 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1128>)
    9104:	68a0      	ldr	r0, [r4, #8]
    9106:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    910a:	0740      	lsls	r0, r0, #29
    910c:	d501      	bpl.n	9112 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1112>
    910e:	2001      	movs	r0, #1
    9110:	bd10      	pop	{r4, pc}
    9112:	f7fe ffa1 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    9116:	68a0      	ldr	r0, [r4, #8]
    9118:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    911c:	f041 0104 	orr.w	r1, r1, #4
    9120:	7001      	strb	r1, [r0, #0]
    9122:	2000      	movs	r0, #0
    9124:	bd10      	pop	{r4, pc}
    9126:	0000      	.short	0x0000
    9128:	20000118 	.word	0x20000118
    912c:	b510      	push	{r4, lr}
    912e:	4c09      	ldr	r4, [pc, #36]	; (9154 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1154>)
    9130:	2301      	movs	r3, #1
    9132:	2109      	movs	r1, #9
    9134:	68a0      	ldr	r0, [r4, #8]
    9136:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    913a:	3070      	adds	r0, #112	; 0x70
    913c:	f003 fe56 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9140:	2800      	cmp	r0, #0
    9142:	d006      	beq.n	9152 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1152>
    9144:	68a1      	ldr	r1, [r4, #8]
    9146:	2000      	movs	r0, #0
    9148:	f801 0fa2 	strb.w	r0, [r1, #162]!
    914c:	7308      	strb	r0, [r1, #12]
    914e:	f801 0c25 	strb.w	r0, [r1, #-37]
    9152:	bd10      	pop	{r4, pc}
    9154:	20000118 	.word	0x20000118
    9158:	b510      	push	{r4, lr}
    915a:	4c0f      	ldr	r4, [pc, #60]	; (9198 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1198>)
    915c:	2301      	movs	r3, #1
    915e:	2100      	movs	r1, #0
    9160:	68a0      	ldr	r0, [r4, #8]
    9162:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9166:	3070      	adds	r0, #112	; 0x70
    9168:	f003 fe40 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    916c:	b138      	cbz	r0, 917e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x117e>
    916e:	f7fe ff73 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    9172:	68a1      	ldr	r1, [r4, #8]
    9174:	2010      	movs	r0, #16
    9176:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    917a:	2000      	movs	r0, #0
    917c:	bd10      	pop	{r4, pc}
    917e:	68a0      	ldr	r0, [r4, #8]
    9180:	2301      	movs	r3, #1
    9182:	2105      	movs	r1, #5
    9184:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    9188:	3070      	adds	r0, #112	; 0x70
    918a:	f003 fe2f 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    918e:	b108      	cbz	r0, 9194 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1194>
    9190:	2008      	movs	r0, #8
    9192:	bd10      	pop	{r4, pc}
    9194:	2001      	movs	r0, #1
    9196:	bd10      	pop	{r4, pc}
    9198:	20000118 	.word	0x20000118
    919c:	4806      	ldr	r0, [pc, #24]	; (91b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11b8>)
    919e:	6880      	ldr	r0, [r0, #8]
    91a0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    91a4:	2911      	cmp	r1, #17
    91a6:	d001      	beq.n	91ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x11ac>
    91a8:	2002      	movs	r0, #2
    91aa:	4770      	bx	lr
    91ac:	2112      	movs	r1, #18
    91ae:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    91b2:	2000      	movs	r0, #0
    91b4:	4770      	bx	lr
    91b6:	0000      	.short	0x0000
    91b8:	20000118 	.word	0x20000118
    91bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91be:	4c34      	ldr	r4, [pc, #208]	; (9290 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1290>)
    91c0:	2301      	movs	r3, #1
    91c2:	210b      	movs	r1, #11
    91c4:	68a0      	ldr	r0, [r4, #8]
    91c6:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    91ca:	3070      	adds	r0, #112	; 0x70
    91cc:	f003 fe0e 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91d0:	bb78      	cbnz	r0, 9232 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1232>
    91d2:	68a0      	ldr	r0, [r4, #8]
    91d4:	2301      	movs	r3, #1
    91d6:	2100      	movs	r1, #0
    91d8:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    91dc:	3070      	adds	r0, #112	; 0x70
    91de:	f003 fe05 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    91e2:	b320      	cbz	r0, 922e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x122e>
    91e4:	68a0      	ldr	r0, [r4, #8]
    91e6:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    91ea:	2824      	cmp	r0, #36	; 0x24
    91ec:	d022      	beq.n	9234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1234>
    91ee:	6920      	ldr	r0, [r4, #16]
    91f0:	f004 f898 	bl	d324 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    91f4:	b300      	cbz	r0, 9238 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1238>
    91f6:	68a0      	ldr	r0, [r4, #8]
    91f8:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    91fc:	f041 0104 	orr.w	r1, r1, #4
    9200:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    9204:	6921      	ldr	r1, [r4, #16]
    9206:	794a      	ldrb	r2, [r1, #5]
    9208:	f002 0207 	and.w	r2, r2, #7
    920c:	f880 2063 	strb.w	r2, [r0, #99]	; 0x63
    9210:	7909      	ldrb	r1, [r1, #4]
    9212:	f001 0107 	and.w	r1, r1, #7
    9216:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
    921a:	f890 31af 	ldrb.w	r3, [r0, #431]	; 0x1af
    921e:	f88d 3000 	strb.w	r3, [sp]
    9222:	9b00      	ldr	r3, [sp, #0]
    9224:	9300      	str	r3, [sp, #0]
    9226:	f89d 3000 	ldrb.w	r3, [sp]
    922a:	bb43      	cbnz	r3, 927e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x127e>
    922c:	e008      	b.n	9240 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1240>
    922e:	2001      	movs	r0, #1
    9230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9232:	e7ff      	b.n	9234 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1234>
    9234:	2020      	movs	r0, #32
    9236:	e7fb      	b.n	9230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1230>
    9238:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    923c:	f7ff bea2 	b.w	8f84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf84>
    9240:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
    9244:	2b01      	cmp	r3, #1
    9246:	d01a      	beq.n	927e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x127e>
    9248:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    924c:	2501      	movs	r5, #1
    924e:	785e      	ldrb	r6, [r3, #1]
    9250:	428e      	cmp	r6, r1
    9252:	d106      	bne.n	9262 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1262>
    9254:	7819      	ldrb	r1, [r3, #0]
    9256:	4291      	cmp	r1, r2
    9258:	d103      	bne.n	9262 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1262>
    925a:	2102      	movs	r1, #2
    925c:	f880 11ae 	strb.w	r1, [r0, #430]	; 0x1ae
    9260:	e00d      	b.n	927e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x127e>
    9262:	f500 71ff 	add.w	r1, r0, #510	; 0x1fe
    9266:	8802      	ldrh	r2, [r0, #0]
    9268:	f821 2902 	strh.w	r2, [r1], #-2
    926c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9270:	710a      	strb	r2, [r1, #4]
    9272:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9276:	7148      	strb	r0, [r1, #5]
    9278:	700d      	strb	r5, [r1, #0]
    927a:	f000 fcc7 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    927e:	68a1      	ldr	r1, [r4, #8]
    9280:	2021      	movs	r0, #33	; 0x21
    9282:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9286:	f7fe fee7 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    928a:	2000      	movs	r0, #0
    928c:	e7d0      	b.n	9230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1230>
    928e:	0000      	.short	0x0000
    9290:	20000118 	.word	0x20000118
    9294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9298:	4c4e      	ldr	r4, [pc, #312]	; (93d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d4>)
    929a:	68a0      	ldr	r0, [r4, #8]
    929c:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    92a0:	2920      	cmp	r1, #32
    92a2:	d009      	beq.n	92b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12b8>
    92a4:	f05f 0700 	movs.w	r7, #0
    92a8:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    92ac:	2922      	cmp	r1, #34	; 0x22
    92ae:	d005      	beq.n	92bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12bc>
    92b0:	b387      	cbz	r7, 9314 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1314>
    92b2:	f100 057d 	add.w	r5, r0, #125	; 0x7d
    92b6:	e003      	b.n	92c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12c0>
    92b8:	2701      	movs	r7, #1
    92ba:	e7f5      	b.n	92a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x12a8>
    92bc:	f100 057e 	add.w	r5, r0, #126	; 0x7e
    92c0:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    92c4:	f041 0104 	orr.w	r1, r1, #4
    92c8:	7001      	strb	r1, [r0, #0]
    92ca:	6920      	ldr	r0, [r4, #16]
    92cc:	f7fc fd54 	bl	5d78 <sym_OIELJZXQUH4XDAK7XBXBJX4CE2IIXWLOTEZEOSI>
    92d0:	f04f 0801 	mov.w	r8, #1
    92d4:	2600      	movs	r6, #0
    92d6:	b308      	cbz	r0, 931c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x131c>
    92d8:	4639      	mov	r1, r7
    92da:	6920      	ldr	r0, [r4, #16]
    92dc:	f7fe ff86 	bl	81ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ec>
    92e0:	b1e0      	cbz	r0, 931c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x131c>
    92e2:	466a      	mov	r2, sp
    92e4:	6921      	ldr	r1, [r4, #16]
    92e6:	68a0      	ldr	r0, [r4, #8]
    92e8:	f003 fea4 	bl	d034 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    92ec:	b388      	cbz	r0, 9352 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1352>
    92ee:	6920      	ldr	r0, [r4, #16]
    92f0:	f003 fff4 	bl	d2dc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    92f4:	68a1      	ldr	r1, [r4, #8]
    92f6:	f8a1 0194 	strh.w	r0, [r1, #404]	; 0x194
    92fa:	f8b1 1074 	ldrh.w	r1, [r1, #116]	; 0x74
    92fe:	f005 f8b7 	bl	e470 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    9302:	b338      	cbz	r0, 9354 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1354>
    9304:	68a0      	ldr	r0, [r4, #8]
    9306:	2128      	movs	r1, #40	; 0x28
    9308:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    930c:	3076      	adds	r0, #118	; 0x76
    930e:	f880 801e 	strb.w	r8, [r0, #30]
    9312:	e053      	b.n	93bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13bc>
    9314:	e7ff      	b.n	9316 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1316>
    9316:	2002      	movs	r0, #2
    9318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    931c:	68a0      	ldr	r0, [r4, #8]
    931e:	f04f 0900 	mov.w	r9, #0
    9322:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9326:	2901      	cmp	r1, #1
    9328:	d015      	beq.n	9356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1356>
    932a:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    932e:	b1f7      	cbz	r7, 936e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x136e>
    9330:	6920      	ldr	r0, [r4, #16]
    9332:	68a1      	ldr	r1, [r4, #8]
    9334:	78c0      	ldrb	r0, [r0, #3]
    9336:	f881 00ea 	strb.w	r0, [r1, #234]	; 0xea
    933a:	fa08 f200 	lsl.w	r2, r8, r0
    933e:	f3c2 6000 	ubfx	r0, r2, #24, #1
    9342:	b160      	cbz	r0, 935e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x135e>
    9344:	200a      	movs	r0, #10
    9346:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    934a:	f891 00ae 	ldrb.w	r0, [r1, #174]	; 0xae
    934e:	b9a0      	cbnz	r0, 937a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x137a>
    9350:	e008      	b.n	9364 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1364>
    9352:	e014      	b.n	937e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x137e>
    9354:	e027      	b.n	93a6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13a6>
    9356:	201e      	movs	r0, #30
    9358:	f7ff fcec 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    935c:	e7e7      	b.n	932e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x132e>
    935e:	f240 31cb 	movw	r1, #971	; 0x3cb
    9362:	e001      	b.n	9368 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1368>
    9364:	f240 31d3 	movw	r1, #979	; 0x3d3
    9368:	2031      	movs	r0, #49	; 0x31
    936a:	f7fa fc85 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    936e:	702e      	strb	r6, [r5, #0]
    9370:	f7fe fe7e 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    9374:	f7ff fe06 	bl	8f84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xf84>
    9378:	4681      	mov	r9, r0
    937a:	4648      	mov	r0, r9
    937c:	e7cc      	b.n	9318 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1318>
    937e:	68a0      	ldr	r0, [r4, #8]
    9380:	f890 11ae 	ldrb.w	r1, [r0, #430]	; 0x1ae
    9384:	2901      	cmp	r1, #1
    9386:	d009      	beq.n	939c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x139c>
    9388:	f880 61ae 	strb.w	r6, [r0, #430]	; 0x1ae
    938c:	68a0      	ldr	r0, [r4, #8]
    938e:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    9392:	428d      	cmp	r5, r1
    9394:	d112      	bne.n	93bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13bc>
    9396:	f880 607e 	strb.w	r6, [r0, #126]	; 0x7e
    939a:	e00f      	b.n	93bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13bc>
    939c:	2000      	movs	r0, #0
    939e:	f7ff fcc9 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    93a2:	702e      	strb	r6, [r5, #0]
    93a4:	e7f2      	b.n	938c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x138c>
    93a6:	68a0      	ldr	r0, [r4, #8]
    93a8:	f89d 1000 	ldrb.w	r1, [sp]
    93ac:	f880 1196 	strb.w	r1, [r0, #406]	; 0x196
    93b0:	f89d 1001 	ldrb.w	r1, [sp, #1]
    93b4:	f880 1197 	strb.w	r1, [r0, #407]	; 0x197
    93b8:	2024      	movs	r0, #36	; 0x24
    93ba:	7028      	strb	r0, [r5, #0]
    93bc:	68a0      	ldr	r0, [r4, #8]
    93be:	f100 017e 	add.w	r1, r0, #126	; 0x7e
    93c2:	428d      	cmp	r5, r1
    93c4:	d102      	bne.n	93cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13cc>
    93c6:	f7fe fe53 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    93ca:	e001      	b.n	93d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13d0>
    93cc:	f880 60ae 	strb.w	r6, [r0, #174]	; 0xae
    93d0:	2000      	movs	r0, #0
    93d2:	e7a1      	b.n	9318 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1318>
    93d4:	20000118 	.word	0x20000118
    93d8:	b510      	push	{r4, lr}
    93da:	4c0a      	ldr	r4, [pc, #40]	; (9404 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1404>)
    93dc:	68a0      	ldr	r0, [r4, #8]
    93de:	f810 1fbc 	ldrb.w	r1, [r0, #188]!
    93e2:	f041 0104 	orr.w	r1, r1, #4
    93e6:	7001      	strb	r1, [r0, #0]
    93e8:	6920      	ldr	r0, [r4, #16]
    93ea:	f003 ffa5 	bl	d338 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    93ee:	2816      	cmp	r0, #22
    93f0:	d001      	beq.n	93f6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13f6>
    93f2:	2000      	movs	r0, #0
    93f4:	bd10      	pop	{r4, pc}
    93f6:	6920      	ldr	r0, [r4, #16]
    93f8:	f003 ffa0 	bl	d33c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    93fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9400:	f7fe be08 	b.w	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    9404:	20000118 	.word	0x20000118
    9408:	4802      	ldr	r0, [pc, #8]	; (9414 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1414>)
    940a:	6900      	ldr	r0, [r0, #16]
    940c:	7900      	ldrb	r0, [r0, #4]
    940e:	f7fe be01 	b.w	8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>
    9412:	0000      	.short	0x0000
    9414:	20000118 	.word	0x20000118
    9418:	b510      	push	{r4, lr}
    941a:	4c08      	ldr	r4, [pc, #32]	; (943c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x143c>)
    941c:	68a0      	ldr	r0, [r4, #8]
    941e:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
    9422:	2817      	cmp	r0, #23
    9424:	d001      	beq.n	942a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x142a>
    9426:	2002      	movs	r0, #2
    9428:	bd10      	pop	{r4, pc}
    942a:	f7fe fe21 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    942e:	68a1      	ldr	r1, [r4, #8]
    9430:	201b      	movs	r0, #27
    9432:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    9436:	2000      	movs	r0, #0
    9438:	bd10      	pop	{r4, pc}
    943a:	0000      	.short	0x0000
    943c:	20000118 	.word	0x20000118
    9440:	b510      	push	{r4, lr}
    9442:	4c0b      	ldr	r4, [pc, #44]	; (9470 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1470>)
    9444:	2301      	movs	r3, #1
    9446:	4619      	mov	r1, r3
    9448:	68a0      	ldr	r0, [r4, #8]
    944a:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    944e:	3070      	adds	r0, #112	; 0x70
    9450:	f003 fccc 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9454:	b108      	cbz	r0, 945a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x145a>
    9456:	2000      	movs	r0, #0
    9458:	bd10      	pop	{r4, pc}
    945a:	6920      	ldr	r0, [r4, #16]
    945c:	f003 ff42 	bl	d2e4 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9460:	68a1      	ldr	r1, [r4, #8]
    9462:	f881 017a 	strb.w	r0, [r1, #378]	; 0x17a
    9466:	2007      	movs	r0, #7
    9468:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    946c:	e7f3      	b.n	9456 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1456>
    946e:	0000      	.short	0x0000
    9470:	20000118 	.word	0x20000118
    9474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9478:	4d37      	ldr	r5, [pc, #220]	; (9558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1558>)
    947a:	2600      	movs	r6, #0
    947c:	4628      	mov	r0, r5
    947e:	68a9      	ldr	r1, [r5, #8]
    9480:	6900      	ldr	r0, [r0, #16]
    9482:	2701      	movs	r7, #1
    9484:	f891 307d 	ldrb.w	r3, [r1, #125]	; 0x7d
    9488:	7900      	ldrb	r0, [r0, #4]
    948a:	2b0e      	cmp	r3, #14
    948c:	d101      	bne.n	9492 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1492>
    948e:	2812      	cmp	r0, #18
    9490:	d006      	beq.n	94a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14a0>
    9492:	4a31      	ldr	r2, [pc, #196]	; (9558 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1558>)
    9494:	2400      	movs	r4, #0
    9496:	6892      	ldr	r2, [r2, #8]
    9498:	32bc      	adds	r2, #188	; 0xbc
    949a:	2b1c      	cmp	r3, #28
    949c:	d004      	beq.n	94a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14a8>
    949e:	e005      	b.n	94ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14ac>
    94a0:	f7ff fe44 	bl	912c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x112c>
    94a4:	4606      	mov	r6, r0
    94a6:	e053      	b.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    94a8:	2814      	cmp	r0, #20
    94aa:	d002      	beq.n	94b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14b2>
    94ac:	2b04      	cmp	r3, #4
    94ae:	d00b      	beq.n	94c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14c8>
    94b0:	e00c      	b.n	94cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14cc>
    94b2:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    94b6:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    94ba:	2105      	movs	r1, #5
    94bc:	4610      	mov	r0, r2
    94be:	f004 ff68 	bl	e392 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    94c2:	f7fe ff8d 	bl	83e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e0>
    94c6:	e043      	b.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    94c8:	280e      	cmp	r0, #14
    94ca:	d002      	beq.n	94d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14d2>
    94cc:	2b20      	cmp	r3, #32
    94ce:	d00f      	beq.n	94f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f0>
    94d0:	e010      	b.n	94f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14f4>
    94d2:	f881 407d 	strb.w	r4, [r1, #125]	; 0x7d
    94d6:	f881 40ae 	strb.w	r4, [r1, #174]	; 0xae
    94da:	8808      	ldrh	r0, [r1, #0]
    94dc:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
    94e0:	201a      	movs	r0, #26
    94e2:	f881 020c 	strb.w	r0, [r1, #524]	; 0x20c
    94e6:	f881 720a 	strb.w	r7, [r1, #522]	; 0x20a
    94ea:	f000 fb8f 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    94ee:	e02f      	b.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    94f0:	2816      	cmp	r0, #22
    94f2:	d006      	beq.n	9502 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1502>
    94f4:	2b26      	cmp	r3, #38	; 0x26
    94f6:	d101      	bne.n	94fc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14fc>
    94f8:	2816      	cmp	r0, #22
    94fa:	d002      	beq.n	9502 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1502>
    94fc:	2817      	cmp	r0, #23
    94fe:	d014      	beq.n	952a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x152a>
    9500:	e026      	b.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    9502:	f801 4f7d 	strb.w	r4, [r1, #125]!
    9506:	f881 4031 	strb.w	r4, [r1, #49]	; 0x31
    950a:	7848      	ldrb	r0, [r1, #1]
    950c:	2821      	cmp	r0, #33	; 0x21
    950e:	d01f      	beq.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    9510:	2108      	movs	r1, #8
    9512:	4610      	mov	r0, r2
    9514:	f004 ff3d 	bl	e392 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    9518:	68a8      	ldr	r0, [r5, #8]
    951a:	210b      	movs	r1, #11
    951c:	30bc      	adds	r0, #188	; 0xbc
    951e:	f004 ff38 	bl	e392 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x670>
    9522:	201a      	movs	r0, #26
    9524:	f7ff fc06 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    9528:	e012      	b.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    952a:	f891 007e 	ldrb.w	r0, [r1, #126]	; 0x7e
    952e:	2822      	cmp	r0, #34	; 0x22
    9530:	d10e      	bne.n	9550 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1550>
    9532:	f881 407e 	strb.w	r4, [r1, #126]	; 0x7e
    9536:	f7fe fd9b 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    953a:	68a8      	ldr	r0, [r5, #8]
    953c:	f890 01ae 	ldrb.w	r0, [r0, #430]	; 0x1ae
    9540:	2801      	cmp	r0, #1
    9542:	d102      	bne.n	954a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x154a>
    9544:	2000      	movs	r0, #0
    9546:	f7ff fbf5 	bl	8d34 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd34>
    954a:	68a8      	ldr	r0, [r5, #8]
    954c:	f880 41ae 	strb.w	r4, [r0, #430]	; 0x1ae
    9550:	4630      	mov	r0, r6
    9552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9556:	0000      	.short	0x0000
    9558:	20000118 	.word	0x20000118
    955c:	b570      	push	{r4, r5, r6, lr}
    955e:	4c2c      	ldr	r4, [pc, #176]	; (9610 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1610>)
    9560:	68a0      	ldr	r0, [r4, #8]
    9562:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9566:	0789      	lsls	r1, r1, #30
    9568:	d507      	bpl.n	957a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x157a>
    956a:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    956e:	2301      	movs	r3, #1
    9570:	2108      	movs	r1, #8
    9572:	3070      	adds	r0, #112	; 0x70
    9574:	f003 fc3a 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9578:	b1e8      	cbz	r0, 95b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15b6>
    957a:	68a0      	ldr	r0, [r4, #8]
    957c:	f890 00b6 	ldrb.w	r0, [r0, #182]	; 0xb6
    9580:	0780      	lsls	r0, r0, #30
    9582:	d412      	bmi.n	95aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15aa>
    9584:	6920      	ldr	r0, [r4, #16]
    9586:	f003 feaf 	bl	d2e8 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    958a:	68a1      	ldr	r1, [r4, #8]
    958c:	f881 00b7 	strb.w	r0, [r1, #183]	; 0xb7
    9590:	6920      	ldr	r0, [r4, #16]
    9592:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    9596:	f8a1 20b8 	strh.w	r2, [r1, #184]	; 0xb8
    959a:	8840      	ldrh	r0, [r0, #2]
    959c:	f8a1 00ba 	strh.w	r0, [r1, #186]	; 0xba
    95a0:	f811 0fb6 	ldrb.w	r0, [r1, #182]!
    95a4:	f040 0002 	orr.w	r0, r0, #2
    95a8:	7008      	strb	r0, [r1, #0]
    95aa:	68a0      	ldr	r0, [r4, #8]
    95ac:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    95b0:	07c9      	lsls	r1, r1, #31
    95b2:	d002      	beq.n	95ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15ba>
    95b4:	e010      	b.n	95d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15d8>
    95b6:	2001      	movs	r0, #1
    95b8:	bd70      	pop	{r4, r5, r6, pc}
    95ba:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    95be:	078a      	lsls	r2, r1, #30
    95c0:	d504      	bpl.n	95cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15cc>
    95c2:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    95c6:	2031      	movs	r0, #49	; 0x31
    95c8:	f7fa fb56 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    95cc:	f041 0102 	orr.w	r1, r1, #2
    95d0:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    95d4:	f7fe fd40 	bl	8058 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x58>
    95d8:	68a0      	ldr	r0, [r4, #8]
    95da:	2500      	movs	r5, #0
    95dc:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    95e0:	2906      	cmp	r1, #6
    95e2:	d105      	bne.n	95f0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15f0>
    95e4:	f880 507d 	strb.w	r5, [r0, #125]	; 0x7d
    95e8:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    95ec:	f000 fb0e 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    95f0:	68a0      	ldr	r0, [r4, #8]
    95f2:	f890 11b4 	ldrb.w	r1, [r0, #436]	; 0x1b4
    95f6:	b149      	cbz	r1, 960c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160c>
    95f8:	f880 51b4 	strb.w	r5, [r0, #436]	; 0x1b4
    95fc:	f000 fb06 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9600:	68a0      	ldr	r0, [r4, #8]
    9602:	f890 107d 	ldrb.w	r1, [r0, #125]	; 0x7d
    9606:	b909      	cbnz	r1, 960c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160c>
    9608:	f880 50ae 	strb.w	r5, [r0, #174]	; 0xae
    960c:	2000      	movs	r0, #0
    960e:	bd70      	pop	{r4, r5, r6, pc}
    9610:	20000118 	.word	0x20000118
    9614:	b510      	push	{r4, lr}
    9616:	4c17      	ldr	r4, [pc, #92]	; (9674 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1674>)
    9618:	68a3      	ldr	r3, [r4, #8]
    961a:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    961e:	2808      	cmp	r0, #8
    9620:	d20e      	bcs.n	9640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1640>
    9622:	f100 0208 	add.w	r2, r0, #8
    9626:	f1c0 0008 	rsb	r0, r0, #8
    962a:	b2c1      	uxtb	r1, r0
    962c:	1898      	adds	r0, r3, r2
    962e:	f500 7088 	add.w	r0, r0, #272	; 0x110
    9632:	f7fa fbad 	bl	3d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    9636:	68a1      	ldr	r1, [r4, #8]
    9638:	f811 2ff2 	ldrb.w	r2, [r1, #242]!
    963c:	4410      	add	r0, r2
    963e:	7008      	strb	r0, [r1, #0]
    9640:	68a3      	ldr	r3, [r4, #8]
    9642:	f893 00f2 	ldrb.w	r0, [r3, #242]	; 0xf2
    9646:	3808      	subs	r0, #8
    9648:	2804      	cmp	r0, #4
    964a:	d211      	bcs.n	9670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1670>
    964c:	1d02      	adds	r2, r0, #4
    964e:	f1c0 0004 	rsb	r0, r0, #4
    9652:	b2c1      	uxtb	r1, r0
    9654:	1898      	adds	r0, r3, r2
    9656:	30e0      	adds	r0, #224	; 0xe0
    9658:	f7fa fb9a 	bl	3d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    965c:	68a0      	ldr	r0, [r4, #8]
    965e:	2100      	movs	r1, #0
    9660:	f880 10f2 	strb.w	r1, [r0, #242]	; 0xf2
    9664:	2101      	movs	r1, #1
    9666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    966a:	2004      	movs	r0, #4
    966c:	f7ff ba64 	b.w	8b38 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb38>
    9670:	bd10      	pop	{r4, pc}
    9672:	0000      	.short	0x0000
    9674:	20000118 	.word	0x20000118
    9678:	4804      	ldr	r0, [pc, #16]	; (968c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x168c>)
    967a:	2127      	movs	r1, #39	; 0x27
    967c:	6880      	ldr	r0, [r0, #8]
    967e:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    9682:	2100      	movs	r1, #0
    9684:	f880 118c 	strb.w	r1, [r0, #396]	; 0x18c
    9688:	4770      	bx	lr
    968a:	0000      	.short	0x0000
    968c:	20000118 	.word	0x20000118
    9690:	4809      	ldr	r0, [pc, #36]	; (96b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16b8>)
    9692:	b510      	push	{r4, lr}
    9694:	6880      	ldr	r0, [r0, #8]
    9696:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    969a:	2914      	cmp	r1, #20
    969c:	d004      	beq.n	96a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16a8>
    969e:	f240 619a 	movw	r1, #1690	; 0x69a
    96a2:	2031      	movs	r0, #49	; 0x31
    96a4:	f7fa fae8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96a8:	2101      	movs	r1, #1
    96aa:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    96ae:	2115      	movs	r1, #21
    96b0:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    96b4:	bd10      	pop	{r4, pc}
    96b6:	0000      	.short	0x0000
    96b8:	20000118 	.word	0x20000118
    96bc:	b510      	push	{r4, lr}
    96be:	4c0a      	ldr	r4, [pc, #40]	; (96e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16e8>)
    96c0:	68a0      	ldr	r0, [r4, #8]
    96c2:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    96c6:	07c0      	lsls	r0, r0, #31
    96c8:	d008      	beq.n	96dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x16dc>
    96ca:	f7fe fcd1 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    96ce:	68a0      	ldr	r0, [r4, #8]
    96d0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    96d4:	f021 0101 	bic.w	r1, r1, #1
    96d8:	7001      	strb	r1, [r0, #0]
    96da:	bd10      	pop	{r4, pc}
    96dc:	f240 6183 	movw	r1, #1667	; 0x683
    96e0:	2031      	movs	r0, #49	; 0x31
    96e2:	f7fa fac9 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96e6:	0000      	.short	0x0000
    96e8:	20000118 	.word	0x20000118
    96ec:	b510      	push	{r4, lr}
    96ee:	4c0a      	ldr	r4, [pc, #40]	; (9718 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1718>)
    96f0:	2301      	movs	r3, #1
    96f2:	2100      	movs	r1, #0
    96f4:	68a0      	ldr	r0, [r4, #8]
    96f6:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    96fa:	3070      	adds	r0, #112	; 0x70
    96fc:	f003 fb76 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9700:	b120      	cbz	r0, 970c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170c>
    9702:	68a1      	ldr	r1, [r4, #8]
    9704:	201c      	movs	r0, #28
    9706:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    970a:	bd10      	pop	{r4, pc}
    970c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
    9710:	2031      	movs	r0, #49	; 0x31
    9712:	f7fa fab1 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9716:	0000      	.short	0x0000
    9718:	20000118 	.word	0x20000118
    971c:	480a      	ldr	r0, [pc, #40]	; (9748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1748>)
    971e:	b510      	push	{r4, lr}
    9720:	6880      	ldr	r0, [r0, #8]
    9722:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    9726:	f3c1 1201 	ubfx	r2, r1, #4, #2
    972a:	2a01      	cmp	r2, #1
    972c:	d004      	beq.n	9738 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1738>
    972e:	f240 710f 	movw	r1, #1807	; 0x70f
    9732:	2031      	movs	r0, #49	; 0x31
    9734:	f7fa faa0 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9738:	f021 0110 	bic.w	r1, r1, #16
    973c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9744:	f7fe bc94 	b.w	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    9748:	20000118 	.word	0x20000118
    974c:	b510      	push	{r4, lr}
    974e:	4c0a      	ldr	r4, [pc, #40]	; (9778 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1778>)
    9750:	2301      	movs	r3, #1
    9752:	2100      	movs	r1, #0
    9754:	68a0      	ldr	r0, [r4, #8]
    9756:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    975a:	3070      	adds	r0, #112	; 0x70
    975c:	f003 fb46 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9760:	b120      	cbz	r0, 976c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x176c>
    9762:	68a1      	ldr	r1, [r4, #8]
    9764:	200e      	movs	r0, #14
    9766:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    976a:	bd10      	pop	{r4, pc}
    976c:	f240 61fb 	movw	r1, #1787	; 0x6fb
    9770:	2031      	movs	r0, #49	; 0x31
    9772:	f7fa fa81 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9776:	0000      	.short	0x0000
    9778:	20000118 	.word	0x20000118
    977c:	4804      	ldr	r0, [pc, #16]	; (9790 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1790>)
    977e:	6880      	ldr	r0, [r0, #8]
    9780:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    9784:	f021 0104 	bic.w	r1, r1, #4
    9788:	7001      	strb	r1, [r0, #0]
    978a:	f7fe bc71 	b.w	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    978e:	0000      	.short	0x0000
    9790:	20000118 	.word	0x20000118
    9794:	4809      	ldr	r0, [pc, #36]	; (97bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17bc>)
    9796:	b510      	push	{r4, lr}
    9798:	6880      	ldr	r0, [r0, #8]
    979a:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    979e:	2910      	cmp	r1, #16
    97a0:	d004      	beq.n	97ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17ac>
    97a2:	f240 6192 	movw	r1, #1682	; 0x692
    97a6:	2031      	movs	r0, #49	; 0x31
    97a8:	f7fa fa66 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ac:	2101      	movs	r1, #1
    97ae:	f880 10b3 	strb.w	r1, [r0, #179]	; 0xb3
    97b2:	2111      	movs	r1, #17
    97b4:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    97b8:	bd10      	pop	{r4, pc}
    97ba:	0000      	.short	0x0000
    97bc:	20000118 	.word	0x20000118
    97c0:	b510      	push	{r4, lr}
    97c2:	4c0a      	ldr	r4, [pc, #40]	; (97ec <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17ec>)
    97c4:	2301      	movs	r3, #1
    97c6:	2100      	movs	r1, #0
    97c8:	68a0      	ldr	r0, [r4, #8]
    97ca:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    97ce:	3070      	adds	r0, #112	; 0x70
    97d0:	f003 fb0c 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    97d4:	b120      	cbz	r0, 97e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x17e0>
    97d6:	68a1      	ldr	r1, [r4, #8]
    97d8:	201f      	movs	r0, #31
    97da:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    97de:	bd10      	pop	{r4, pc}
    97e0:	f240 711b 	movw	r1, #1819	; 0x71b
    97e4:	2031      	movs	r0, #49	; 0x31
    97e6:	f7fa fa47 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97ea:	0000      	.short	0x0000
    97ec:	20000118 	.word	0x20000118
    97f0:	4808      	ldr	r0, [pc, #32]	; (9814 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1814>)
    97f2:	b510      	push	{r4, lr}
    97f4:	6880      	ldr	r0, [r0, #8]
    97f6:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    97fa:	2921      	cmp	r1, #33	; 0x21
    97fc:	d005      	beq.n	980a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180a>
    97fe:	b121      	cbz	r1, 980a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x180a>
    9800:	f240 7122 	movw	r1, #1826	; 0x722
    9804:	2031      	movs	r0, #49	; 0x31
    9806:	f7fa fa37 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    980a:	2122      	movs	r1, #34	; 0x22
    980c:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9810:	bd10      	pop	{r4, pc}
    9812:	0000      	.short	0x0000
    9814:	20000118 	.word	0x20000118
    9818:	4807      	ldr	r0, [pc, #28]	; (9838 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1838>)
    981a:	b510      	push	{r4, lr}
    981c:	6880      	ldr	r0, [r0, #8]
    981e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9822:	2915      	cmp	r1, #21
    9824:	d004      	beq.n	9830 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1830>
    9826:	f240 61a7 	movw	r1, #1703	; 0x6a7
    982a:	2031      	movs	r0, #49	; 0x31
    982c:	f7fa fa24 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9830:	2119      	movs	r1, #25
    9832:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    9836:	bd10      	pop	{r4, pc}
    9838:	20000118 	.word	0x20000118
    983c:	4807      	ldr	r0, [pc, #28]	; (985c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x185c>)
    983e:	b510      	push	{r4, lr}
    9840:	6880      	ldr	r0, [r0, #8]
    9842:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    9846:	2915      	cmp	r1, #21
    9848:	d004      	beq.n	9854 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1854>
    984a:	f240 61a1 	movw	r1, #1697	; 0x6a1
    984e:	2031      	movs	r0, #49	; 0x31
    9850:	f7fa fa12 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9854:	2117      	movs	r1, #23
    9856:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    985a:	bd10      	pop	{r4, pc}
    985c:	20000118 	.word	0x20000118
    9860:	b570      	push	{r4, r5, r6, lr}
    9862:	4d1b      	ldr	r5, [pc, #108]	; (98d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18d0>)
    9864:	68a8      	ldr	r0, [r5, #8]
    9866:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    986a:	291b      	cmp	r1, #27
    986c:	d002      	beq.n	9874 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1874>
    986e:	f240 61c1 	movw	r1, #1729	; 0x6c1
    9872:	e007      	b.n	9884 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1884>
    9874:	2400      	movs	r4, #0
    9876:	f880 40b3 	strb.w	r4, [r0, #179]	; 0xb3
    987a:	f890 11c4 	ldrb.w	r1, [r0, #452]	; 0x1c4
    987e:	b121      	cbz	r1, 988a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x188a>
    9880:	f240 61c5 	movw	r1, #1733	; 0x6c5
    9884:	2031      	movs	r0, #49	; 0x31
    9886:	f7fa f9f7 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    988a:	f890 10b4 	ldrb.w	r1, [r0, #180]	; 0xb4
    988e:	b141      	cbz	r1, 98a2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a2>
    9890:	f880 40b4 	strb.w	r4, [r0, #180]	; 0xb4
    9894:	8801      	ldrh	r1, [r0, #0]
    9896:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    989a:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    989e:	210c      	movs	r1, #12
    98a0:	e008      	b.n	98b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18b4>
    98a2:	8801      	ldrh	r1, [r0, #0]
    98a4:	f8a0 11c8 	strh.w	r1, [r0, #456]	; 0x1c8
    98a8:	f880 41c6 	strb.w	r4, [r0, #454]	; 0x1c6
    98ac:	2101      	movs	r1, #1
    98ae:	f880 11ca 	strb.w	r1, [r0, #458]	; 0x1ca
    98b2:	210b      	movs	r1, #11
    98b4:	f880 11c4 	strb.w	r1, [r0, #452]	; 0x1c4
    98b8:	8800      	ldrh	r0, [r0, #0]
    98ba:	f7fa fe05 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    98be:	f002 ff0f 	bl	c6e0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    98c2:	f000 f9a3 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    98c6:	68a8      	ldr	r0, [r5, #8]
    98c8:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
    98cc:	bd70      	pop	{r4, r5, r6, pc}
    98ce:	0000      	.short	0x0000
    98d0:	20000118 	.word	0x20000118
    98d4:	b510      	push	{r4, lr}
    98d6:	4c08      	ldr	r4, [pc, #32]	; (98f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18f8>)
    98d8:	2301      	movs	r3, #1
    98da:	4619      	mov	r1, r3
    98dc:	68a0      	ldr	r0, [r4, #8]
    98de:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    98e2:	3070      	adds	r0, #112	; 0x70
    98e4:	f003 fa82 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    98e8:	2800      	cmp	r0, #0
    98ea:	d103      	bne.n	98f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18f4>
    98ec:	68a1      	ldr	r1, [r4, #8]
    98ee:	2008      	movs	r0, #8
    98f0:	f881 0080 	strb.w	r0, [r1, #128]	; 0x80
    98f4:	bd10      	pop	{r4, pc}
    98f6:	0000      	.short	0x0000
    98f8:	20000118 	.word	0x20000118
    98fc:	4814      	ldr	r0, [pc, #80]	; (9950 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1950>)
    98fe:	b510      	push	{r4, lr}
    9900:	68c1      	ldr	r1, [r0, #12]
    9902:	6880      	ldr	r0, [r0, #8]
    9904:	7909      	ldrb	r1, [r1, #4]
    9906:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    990a:	2a0a      	cmp	r2, #10
    990c:	d109      	bne.n	9922 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1922>
    990e:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
    9912:	428a      	cmp	r2, r1
    9914:	d105      	bne.n	9922 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1922>
    9916:	2100      	movs	r1, #0
    9918:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    991c:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    9920:	bd10      	pop	{r4, pc}
    9922:	f890 207f 	ldrb.w	r2, [r0, #127]	; 0x7f
    9926:	0713      	lsls	r3, r2, #28
    9928:	d507      	bpl.n	993a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x193a>
    992a:	f022 0108 	bic.w	r1, r2, #8
    992e:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    9932:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9936:	f7fe bb9b 	b.w	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    993a:	29ff      	cmp	r1, #255	; 0xff
    993c:	d004      	beq.n	9948 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1948>
    993e:	f240 617d 	movw	r1, #1661	; 0x67d
    9942:	2031      	movs	r0, #49	; 0x31
    9944:	f7fa f998 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    994c:	f7ff be94 	b.w	9678 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1678>
    9950:	20000118 	.word	0x20000118
    9954:	b510      	push	{r4, lr}
    9956:	4c15      	ldr	r4, [pc, #84]	; (99ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ac>)
    9958:	68a0      	ldr	r0, [r4, #8]
    995a:	f890 10b6 	ldrb.w	r1, [r0, #182]	; 0xb6
    995e:	0789      	lsls	r1, r1, #30
    9960:	d411      	bmi.n	9986 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1986>
    9962:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9966:	2301      	movs	r3, #1
    9968:	2100      	movs	r1, #0
    996a:	3070      	adds	r0, #112	; 0x70
    996c:	f003 fa3e 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9970:	b120      	cbz	r0, 997c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x197c>
    9972:	68a1      	ldr	r1, [r4, #8]
    9974:	2006      	movs	r0, #6
    9976:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    997a:	e009      	b.n	9990 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1990>
    997c:	f240 61e7 	movw	r1, #1767	; 0x6e7
    9980:	2031      	movs	r0, #49	; 0x31
    9982:	f7fa f979 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9986:	2100      	movs	r1, #0
    9988:	f880 10ae 	strb.w	r1, [r0, #174]	; 0xae
    998c:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
    9990:	68a0      	ldr	r0, [r4, #8]
    9992:	f890 007f 	ldrb.w	r0, [r0, #127]	; 0x7f
    9996:	0780      	lsls	r0, r0, #30
    9998:	d507      	bpl.n	99aa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19aa>
    999a:	f7fe fb69 	bl	8070 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x70>
    999e:	68a0      	ldr	r0, [r4, #8]
    99a0:	f810 1f7f 	ldrb.w	r1, [r0, #127]!
    99a4:	f021 0102 	bic.w	r1, r1, #2
    99a8:	7001      	strb	r1, [r0, #0]
    99aa:	bd10      	pop	{r4, pc}
    99ac:	20000118 	.word	0x20000118
    99b0:	4808      	ldr	r0, [pc, #32]	; (99d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d4>)
    99b2:	b510      	push	{r4, lr}
    99b4:	6880      	ldr	r0, [r0, #8]
    99b6:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
    99ba:	b941      	cbnz	r1, 99ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19ce>
    99bc:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
    99c0:	2301      	movs	r3, #1
    99c2:	2106      	movs	r1, #6
    99c4:	3070      	adds	r0, #112	; 0x70
    99c6:	f003 fa11 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99ca:	2800      	cmp	r0, #0
    99cc:	d000      	beq.n	99d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19d0>
    99ce:	2001      	movs	r0, #1
    99d0:	bd10      	pop	{r4, pc}
    99d2:	0000      	.short	0x0000
    99d4:	20000118 	.word	0x20000118
    99d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99da:	4c59      	ldr	r4, [pc, #356]	; (9b40 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b40>)
    99dc:	4606      	mov	r6, r0
    99de:	4615      	mov	r5, r2
    99e0:	68a0      	ldr	r0, [r4, #8]
    99e2:	b109      	cbz	r1, 99e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19e8>
    99e4:	2100      	movs	r1, #0
    99e6:	e004      	b.n	99f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19f2>
    99e8:	f8b0 110e 	ldrh.w	r1, [r0, #270]	; 0x10e
    99ec:	f8b0 20fe 	ldrh.w	r2, [r0, #254]	; 0xfe
    99f0:	4411      	add	r1, r2
    99f2:	f8a0 110e 	strh.w	r1, [r0, #270]	; 0x10e
    99f6:	f890 1178 	ldrb.w	r1, [r0, #376]	; 0x178
    99fa:	f88d 1000 	strb.w	r1, [sp]
    99fe:	9900      	ldr	r1, [sp, #0]
    9a00:	9100      	str	r1, [sp, #0]
    9a02:	f89d 1000 	ldrb.w	r1, [sp]
    9a06:	b939      	cbnz	r1, 9a18 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a18>
    9a08:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
    9a0c:	2301      	movs	r3, #1
    9a0e:	4619      	mov	r1, r3
    9a10:	3070      	adds	r0, #112	; 0x70
    9a12:	f003 f9eb 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a16:	b130      	cbz	r0, 9a26 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a26>
    9a18:	68a0      	ldr	r0, [r4, #8]
    9a1a:	f830 1fa8 	ldrh.w	r1, [r0, #168]!
    9a1e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
    9a22:	4411      	add	r1, r2
    9a24:	8001      	strh	r1, [r0, #0]
    9a26:	68a0      	ldr	r0, [r4, #8]
    9a28:	f890 20ae 	ldrb.w	r2, [r0, #174]	; 0xae
    9a2c:	b132      	cbz	r2, 9a3c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a3c>
    9a2e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
    9a32:	f8b0 30fe 	ldrh.w	r3, [r0, #254]	; 0xfe
    9a36:	4419      	add	r1, r3
    9a38:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    9a3c:	f990 30b2 	ldrsb.w	r3, [r0, #178]	; 0xb2
    9a40:	2b00      	cmp	r3, #0
    9a42:	dd06      	ble.n	9a52 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a52>
    9a44:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9a48:	f8b0 70fe 	ldrh.w	r7, [r0, #254]	; 0xfe
    9a4c:	4439      	add	r1, r7
    9a4e:	f8a0 10b0 	strh.w	r1, [r0, #176]	; 0xb0
    9a52:	2101      	movs	r1, #1
    9a54:	273d      	movs	r7, #61	; 0x3d
    9a56:	b116      	cbz	r6, 9a5e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a5e>
    9a58:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9a5c:	e012      	b.n	9a84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a84>
    9a5e:	7824      	ldrb	r4, [r4, #0]
    9a60:	2c02      	cmp	r4, #2
    9a62:	d009      	beq.n	9a78 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a78>
    9a64:	2c01      	cmp	r4, #1
    9a66:	d011      	beq.n	9a8c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a8c>
    9a68:	b33d      	cbz	r5, 9aba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aba>
    9a6a:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9a6e:	7011      	strb	r1, [r2, #0]
    9a70:	06e9      	lsls	r1, r5, #27
    9a72:	d50e      	bpl.n	9a92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a92>
    9a74:	211e      	movs	r1, #30
    9a76:	e018      	b.n	9aaa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aaa>
    9a78:	f890 20ee 	ldrb.w	r2, [r0, #238]	; 0xee
    9a7c:	2a06      	cmp	r2, #6
    9a7e:	d044      	beq.n	9b0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0a>
    9a80:	2216      	movs	r2, #22
    9a82:	e042      	b.n	9b0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0a>
    9a84:	f100 0294 	add.w	r2, r0, #148	; 0x94
    9a88:	7011      	strb	r1, [r2, #0]
    9a8a:	e047      	b.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9a8c:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    9a90:	e03b      	b.n	9b0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0a>
    9a92:	0729      	lsls	r1, r5, #28
    9a94:	d502      	bpl.n	9a9c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a9c>
    9a96:	f880 7095 	strb.w	r7, [r0, #149]	; 0x95
    9a9a:	e03f      	b.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9a9c:	06a9      	lsls	r1, r5, #26
    9a9e:	d501      	bpl.n	9aa4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aa4>
    9aa0:	2123      	movs	r1, #35	; 0x23
    9aa2:	e002      	b.n	9aaa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1aaa>
    9aa4:	07a9      	lsls	r1, r5, #30
    9aa6:	d003      	beq.n	9ab0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ab0>
    9aa8:	212a      	movs	r1, #42	; 0x2a
    9aaa:	f880 1095 	strb.w	r1, [r0, #149]	; 0x95
    9aae:	e035      	b.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9ab0:	f640 41bc 	movw	r1, #3260	; 0xcbc
    9ab4:	2031      	movs	r0, #49	; 0x31
    9ab6:	f7fa f8df 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9aba:	b12a      	cbz	r2, 9ac8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ac8>
    9abc:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
    9ac0:	f8b0 40ac 	ldrh.w	r4, [r0, #172]	; 0xac
    9ac4:	42a2      	cmp	r2, r4
    9ac6:	d216      	bcs.n	9af6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1af6>
    9ac8:	2b00      	cmp	r3, #0
    9aca:	dd05      	ble.n	9ad8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ad8>
    9acc:	f8b0 20b0 	ldrh.w	r2, [r0, #176]	; 0xb0
    9ad0:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
    9ad4:	429a      	cmp	r2, r3
    9ad6:	d20e      	bcs.n	9af6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1af6>
    9ad8:	f8b0 30a8 	ldrh.w	r3, [r0, #168]	; 0xa8
    9adc:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9ae0:	4293      	cmp	r3, r2
    9ae2:	d30a      	bcc.n	9afa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1afa>
    9ae4:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    9ae8:	f88d 3000 	strb.w	r3, [sp]
    9aec:	9b00      	ldr	r3, [sp, #0]
    9aee:	9300      	str	r3, [sp, #0]
    9af0:	f89d 3000 	ldrb.w	r3, [sp]
    9af4:	b10b      	cbz	r3, 9afa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1afa>
    9af6:	2222      	movs	r2, #34	; 0x22
    9af8:	e007      	b.n	9b0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0a>
    9afa:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
    9afe:	b13b      	cbz	r3, 9b10 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b10>
    9b00:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
    9b04:	4293      	cmp	r3, r2
    9b06:	d309      	bcc.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9b08:	2208      	movs	r2, #8
    9b0a:	f880 2095 	strb.w	r2, [r0, #149]	; 0x95
    9b0e:	e7b9      	b.n	9a84 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a84>
    9b10:	f8b0 20a4 	ldrh.w	r2, [r0, #164]	; 0xa4
    9b14:	2a06      	cmp	r2, #6
    9b16:	d301      	bcc.n	9b1c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b1c>
    9b18:	223e      	movs	r2, #62	; 0x3e
    9b1a:	e7f6      	b.n	9b0a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b0a>
    9b1c:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
    9b20:	f88d 1000 	strb.w	r1, [sp]
    9b24:	9900      	ldr	r1, [sp, #0]
    9b26:	9100      	str	r1, [sp, #0]
    9b28:	f89d 1000 	ldrb.w	r1, [sp]
    9b2c:	b119      	cbz	r1, 9b36 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b36>
    9b2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9b32:	f004 bc6d 	b.w	e410 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    9b36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9b3a:	2100      	movs	r1, #0
    9b3c:	f7fd bbc8 	b.w	72d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    9b40:	20000118 	.word	0x20000118
    9b44:	b570      	push	{r4, r5, r6, lr}
    9b46:	4d2d      	ldr	r5, [pc, #180]	; (9bfc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bfc>)
    9b48:	68a8      	ldr	r0, [r5, #8]
    9b4a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    9b4e:	b151      	cbz	r1, 9b66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b66>
    9b50:	2901      	cmp	r1, #1
    9b52:	d008      	beq.n	9b66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b66>
    9b54:	2902      	cmp	r1, #2
    9b56:	d009      	beq.n	9b6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6c>
    9b58:	2903      	cmp	r1, #3
    9b5a:	d007      	beq.n	9b6c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b6c>
    9b5c:	f640 217a 	movw	r1, #2682	; 0xa7a
    9b60:	2031      	movs	r0, #49	; 0x31
    9b62:	f7fa f889 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b66:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9b6a:	e035      	b.n	9bd8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bd8>
    9b6c:	f890 1080 	ldrb.w	r1, [r0, #128]	; 0x80
    9b70:	2908      	cmp	r1, #8
    9b72:	d034      	beq.n	9bde <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bde>
    9b74:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9b78:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
    9b7c:	2400      	movs	r4, #0
    9b7e:	1c8b      	adds	r3, r1, #2
    9b80:	429a      	cmp	r2, r3
    9b82:	d306      	bcc.n	9b92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b92>
    9b84:	1a51      	subs	r1, r2, r1
    9b86:	1e89      	subs	r1, r1, #2
    9b88:	040c      	lsls	r4, r1, #16
    9b8a:	0c24      	lsrs	r4, r4, #16
    9b8c:	d001      	beq.n	9b92 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b92>
    9b8e:	1e64      	subs	r4, r4, #1
    9b90:	b2a4      	uxth	r4, r4
    9b92:	f890 10a2 	ldrb.w	r1, [r0, #162]	; 0xa2
    9b96:	b139      	cbz	r1, 9ba8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1ba8>
    9b98:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    9b9c:	2301      	movs	r3, #1
    9b9e:	2109      	movs	r1, #9
    9ba0:	3070      	adds	r0, #112	; 0x70
    9ba2:	f003 f923 	bl	cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ba6:	b330      	cbz	r0, 9bf6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bf6>
    9ba8:	f7ff ff02 	bl	99b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x19b0>
    9bac:	b168      	cbz	r0, 9bca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bca>
    9bae:	68a9      	ldr	r1, [r5, #8]
    9bb0:	2000      	movs	r0, #0
    9bb2:	3198      	adds	r1, #152	; 0x98
    9bb4:	c906      	ldmia	r1, {r1, r2}
    9bb6:	1c8b      	adds	r3, r1, #2
    9bb8:	429a      	cmp	r2, r3
    9bba:	d303      	bcc.n	9bc4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc4>
    9bbc:	1a50      	subs	r0, r2, r1
    9bbe:	1e80      	subs	r0, r0, #2
    9bc0:	d000      	beq.n	9bc4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bc4>
    9bc2:	1e40      	subs	r0, r0, #1
    9bc4:	42a0      	cmp	r0, r4
    9bc6:	d200      	bcs.n	9bca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bca>
    9bc8:	b284      	uxth	r4, r0
    9bca:	b10c      	cbz	r4, 9bd0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bd0>
    9bcc:	1e64      	subs	r4, r4, #1
    9bce:	b2a4      	uxth	r4, r4
    9bd0:	68a8      	ldr	r0, [r5, #8]
    9bd2:	f8b0 10fc 	ldrh.w	r1, [r0, #252]	; 0xfc
    9bd6:	4421      	add	r1, r4
    9bd8:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    9bdc:	bd70      	pop	{r4, r5, r6, pc}
    9bde:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
    9be2:	2903      	cmp	r1, #3
    9be4:	d3bf      	bcc.n	9b66 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1b66>
    9be6:	f830 1f74 	ldrh.w	r1, [r0, #116]!
    9bea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
    9bec:	4411      	add	r1, r2
    9bee:	1c49      	adds	r1, r1, #1
    9bf0:	f8a0 1084 	strh.w	r1, [r0, #132]	; 0x84
    9bf4:	bd70      	pop	{r4, r5, r6, pc}
    9bf6:	2400      	movs	r4, #0
    9bf8:	e7ea      	b.n	9bd0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1bd0>
    9bfa:	0000      	.short	0x0000
    9bfc:	20000118 	.word	0x20000118

00009c00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    9c00:	4901      	ldr	r1, [pc, #4]	; (9c08 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    9c02:	7008      	strb	r0, [r1, #0]
    9c04:	4770      	bx	lr
    9c06:	0000      	.short	0x0000
    9c08:	20000297 	.word	0x20000297

00009c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    9c0c:	4801      	ldr	r0, [pc, #4]	; (9c14 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    9c0e:	7800      	ldrb	r0, [r0, #0]
    9c10:	f7f9 be5a 	b.w	38c8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9c14:	20000297 	.word	0x20000297

00009c18 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    9c18:	4903      	ldr	r1, [pc, #12]	; (9c28 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    9c1a:	888a      	ldrh	r2, [r1, #4]
    9c1c:	8002      	strh	r2, [r0, #0]
    9c1e:	7889      	ldrb	r1, [r1, #2]
    9c20:	7081      	strb	r1, [r0, #2]
    9c22:	2000      	movs	r0, #0
    9c24:	4770      	bx	lr
    9c26:	0000      	.short	0x0000
    9c28:	20000de8 	.word	0x20000de8

00009c2c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    9c2c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9c2e:	460c      	mov	r4, r1
    9c30:	4605      	mov	r5, r0
    9c32:	8800      	ldrh	r0, [r0, #0]
    9c34:	4669      	mov	r1, sp
    9c36:	f003 f8af 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c3a:	0001      	movs	r1, r0
    9c3c:	f04f 0000 	mov.w	r0, #0
    9c40:	d005      	beq.n	9c4e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    9c42:	f8c4 0002 	str.w	r0, [r4, #2]
    9c46:	71a0      	strb	r0, [r4, #6]
    9c48:	8020      	strh	r0, [r4, #0]
    9c4a:	2002      	movs	r0, #2
    9c4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9c4e:	9901      	ldr	r1, [sp, #4]
    9c50:	f111 0170 	adds.w	r1, r1, #112	; 0x70
    9c54:	f881 004e 	strb.w	r0, [r1, #78]	; 0x4e
    9c58:	f8d1 2016 	ldr.w	r2, [r1, #22]
    9c5c:	f8c4 2002 	str.w	r2, [r4, #2]
    9c60:	7e8a      	ldrb	r2, [r1, #26]
    9c62:	71a2      	strb	r2, [r4, #6]
    9c64:	882a      	ldrh	r2, [r5, #0]
    9c66:	8022      	strh	r2, [r4, #0]
    9c68:	f891 204e 	ldrb.w	r2, [r1, #78]	; 0x4e
    9c6c:	f88d 2008 	strb.w	r2, [sp, #8]
    9c70:	9a02      	ldr	r2, [sp, #8]
    9c72:	9202      	str	r2, [sp, #8]
    9c74:	f89d 2008 	ldrb.w	r2, [sp, #8]
    9c78:	2a00      	cmp	r2, #0
    9c7a:	d1eb      	bne.n	9c54 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    9c7c:	2000      	movs	r0, #0
    9c7e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00009c80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    9c80:	b51c      	push	{r2, r3, r4, lr}
    9c82:	8800      	ldrh	r0, [r0, #0]
    9c84:	4669      	mov	r1, sp
    9c86:	f003 f887 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    9c8a:	2800      	cmp	r0, #0
    9c8c:	d10b      	bne.n	9ca6 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x26>
    9c8e:	480b      	ldr	r0, [pc, #44]	; (9cbc <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x3c>)
    9c90:	7800      	ldrb	r0, [r0, #0]
    9c92:	b188      	cbz	r0, 9cb8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x38>
    9c94:	9801      	ldr	r0, [sp, #4]
    9c96:	f005 fae0 	bl	f25a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x320>
    9c9a:	b128      	cbz	r0, 9ca8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    9c9c:	9801      	ldr	r0, [sp, #4]
    9c9e:	f890 01b5 	ldrb.w	r0, [r0, #437]	; 0x1b5
    9ca2:	b118      	cbz	r0, 9cac <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    9ca4:	203a      	movs	r0, #58	; 0x3a
    9ca6:	bd1c      	pop	{r2, r3, r4, pc}
    9ca8:	2002      	movs	r0, #2
    9caa:	bd1c      	pop	{r2, r3, r4, pc}
    9cac:	9901      	ldr	r1, [sp, #4]
    9cae:	2001      	movs	r0, #1
    9cb0:	f881 01b5 	strb.w	r0, [r1, #437]	; 0x1b5
    9cb4:	2000      	movs	r0, #0
    9cb6:	bd1c      	pop	{r2, r3, r4, pc}
    9cb8:	2011      	movs	r0, #17
    9cba:	bd1c      	pop	{r2, r3, r4, pc}
    9cbc:	200001f4 	.word	0x200001f4

00009cc0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    9cc0:	b510      	push	{r4, lr}
    9cc2:	4604      	mov	r4, r0
    9cc4:	f005 fac0 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    9cc8:	b130      	cbz	r0, 9cd8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    9cca:	4804      	ldr	r0, [pc, #16]	; (9cdc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    9ccc:	8881      	ldrh	r1, [r0, #4]
    9cce:	8021      	strh	r1, [r4, #0]
    9cd0:	88c0      	ldrh	r0, [r0, #6]
    9cd2:	8060      	strh	r0, [r4, #2]
    9cd4:	2000      	movs	r0, #0
    9cd6:	bd10      	pop	{r4, pc}
    9cd8:	2001      	movs	r0, #1
    9cda:	bd10      	pop	{r4, pc}
    9cdc:	200001fc 	.word	0x200001fc

00009ce0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    9ce0:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    9ce2:	4605      	mov	r5, r0
    9ce4:	f000 fb3c 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9ce8:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9cec:	b310      	cbz	r0, 9d34 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    9cee:	2400      	movs	r4, #0
    9cf0:	a802      	add	r0, sp, #8
    9cf2:	f88d 4004 	strb.w	r4, [sp, #4]
    9cf6:	f88d 4008 	strb.w	r4, [sp, #8]
    9cfa:	9000      	str	r0, [sp, #0]
    9cfc:	78aa      	ldrb	r2, [r5, #2]
    9cfe:	7869      	ldrb	r1, [r5, #1]
    9d00:	7828      	ldrb	r0, [r5, #0]
    9d02:	ab01      	add	r3, sp, #4
    9d04:	f005 fafa 	bl	f2fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    9d08:	2800      	cmp	r0, #0
    9d0a:	d112      	bne.n	9d32 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    9d0c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9d10:	f005 f9fb 	bl	f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9d14:	b180      	cbz	r0, 9d38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d16:	f89d 0008 	ldrb.w	r0, [sp, #8]
    9d1a:	f005 f9f6 	bl	f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    9d1e:	b158      	cbz	r0, 9d38 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    9d20:	4806      	ldr	r0, [pc, #24]	; (9d3c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    9d22:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d26:	7481      	strb	r1, [r0, #18]
    9d28:	f89d 1008 	ldrb.w	r1, [sp, #8]
    9d2c:	74c1      	strb	r1, [r0, #19]
    9d2e:	8284      	strh	r4, [r0, #20]
    9d30:	2000      	movs	r0, #0
    9d32:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d34:	2001      	movs	r0, #1
    9d36:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d38:	2011      	movs	r0, #17
    9d3a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9d3c:	20000de8 	.word	0x20000de8

00009d40 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    9d40:	7801      	ldrb	r1, [r0, #0]
    9d42:	b179      	cbz	r1, 9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d44:	7841      	ldrb	r1, [r0, #1]
    9d46:	b169      	cbz	r1, 9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d48:	8841      	ldrh	r1, [r0, #2]
    9d4a:	291b      	cmp	r1, #27
    9d4c:	d30a      	bcc.n	9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d4e:	8881      	ldrh	r1, [r0, #4]
    9d50:	291b      	cmp	r1, #27
    9d52:	d307      	bcc.n	9d64 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    9d54:	4904      	ldr	r1, [pc, #16]	; (9d68 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    9d56:	6802      	ldr	r2, [r0, #0]
    9d58:	f8c1 2002 	str.w	r2, [r1, #2]
    9d5c:	8880      	ldrh	r0, [r0, #4]
    9d5e:	80c8      	strh	r0, [r1, #6]
    9d60:	2000      	movs	r0, #0
    9d62:	4770      	bx	lr
    9d64:	2012      	movs	r0, #18
    9d66:	4770      	bx	lr
    9d68:	20000de8 	.word	0x20000de8

00009d6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    9d6c:	6800      	ldr	r0, [r0, #0]
    9d6e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    9d72:	4288      	cmp	r0, r1
    9d74:	d303      	bcc.n	9d7e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    9d76:	4903      	ldr	r1, [pc, #12]	; (9d84 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    9d78:	6088      	str	r0, [r1, #8]
    9d7a:	2000      	movs	r0, #0
    9d7c:	4770      	bx	lr
    9d7e:	2012      	movs	r0, #18
    9d80:	4770      	bx	lr
    9d82:	0000      	.short	0x0000
    9d84:	20000de8 	.word	0x20000de8

00009d88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    9d88:	4a03      	ldr	r2, [pc, #12]	; (9d98 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    9d8a:	e9d2 1200 	ldrd	r1, r2, [r2]
    9d8e:	6001      	str	r1, [r0, #0]
    9d90:	6042      	str	r2, [r0, #4]
    9d92:	2000      	movs	r0, #0
    9d94:	4770      	bx	lr
    9d96:	0000      	.short	0x0000
    9d98:	0000a200 	.word	0x0000a200

00009d9c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    9d9c:	b510      	push	{r4, lr}
    9d9e:	2005      	movs	r0, #5
    9da0:	f000 fad4 	bl	a34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    9da4:	f7fd fe56 	bl	7a54 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    9da8:	4902      	ldr	r1, [pc, #8]	; (9db4 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    9daa:	4801      	ldr	r0, [pc, #4]	; (9db0 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    9dac:	6048      	str	r0, [r1, #4]
    9dae:	bd10      	pop	{r4, pc}
    9db0:	00009e41 	.word	0x00009e41
    9db4:	200001f4 	.word	0x200001f4

00009db8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    9db8:	b510      	push	{r4, lr}
    9dba:	f002 ff41 	bl	cc40 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    9dbe:	f7fb fc73 	bl	56a8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    9dc2:	f000 fadd 	bl	a380 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    9dc6:	480f      	ldr	r0, [pc, #60]	; (9e04 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4c>)
    9dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9dcc:	4b0e      	ldr	r3, [pc, #56]	; (9e08 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50>)
    9dce:	81c1      	strh	r1, [r0, #14]
    9dd0:	8201      	strh	r1, [r0, #16]
    9dd2:	2100      	movs	r1, #0
    9dd4:	75c1      	strb	r1, [r0, #23]
    9dd6:	8301      	strh	r1, [r0, #24]
    9dd8:	8001      	strh	r1, [r0, #0]
    9dda:	221b      	movs	r2, #27
    9ddc:	801a      	strh	r2, [r3, #0]
    9dde:	f44f 74a4 	mov.w	r4, #328	; 0x148
    9de2:	805c      	strh	r4, [r3, #2]
    9de4:	809a      	strh	r2, [r3, #4]
    9de6:	80dc      	strh	r4, [r3, #6]
    9de8:	7481      	strb	r1, [r0, #18]
    9dea:	74c1      	strb	r1, [r0, #19]
    9dec:	2303      	movs	r3, #3
    9dee:	7083      	strb	r3, [r0, #2]
    9df0:	2302      	movs	r3, #2
    9df2:	70c3      	strb	r3, [r0, #3]
    9df4:	8082      	strh	r2, [r0, #4]
    9df6:	80c2      	strh	r2, [r0, #6]
    9df8:	f640 62a6 	movw	r2, #3750	; 0xea6
    9dfc:	6082      	str	r2, [r0, #8]
    9dfe:	7581      	strb	r1, [r0, #22]
    9e00:	7301      	strb	r1, [r0, #12]
    9e02:	bd10      	pop	{r4, pc}
    9e04:	20000de8 	.word	0x20000de8
    9e08:	200001fc 	.word	0x200001fc

00009e0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    9e0c:	b510      	push	{r4, lr}
    9e0e:	b158      	cbz	r0, 9e28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    9e10:	490a      	ldr	r1, [pc, #40]	; (9e3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    9e12:	780a      	ldrb	r2, [r1, #0]
    9e14:	b16a      	cbz	r2, 9e32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    9e16:	2200      	movs	r2, #0
    9e18:	7042      	strb	r2, [r0, #1]
    9e1a:	2303      	movs	r3, #3
    9e1c:	7003      	strb	r3, [r0, #0]
    9e1e:	2301      	movs	r3, #1
    9e20:	7103      	strb	r3, [r0, #4]
    9e22:	700a      	strb	r2, [r1, #0]
    9e24:	4618      	mov	r0, r3
    9e26:	bd10      	pop	{r4, pc}
    9e28:	f641 1146 	movw	r1, #6470	; 0x1946
    9e2c:	2039      	movs	r0, #57	; 0x39
    9e2e:	f7f9 ff23 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9e36:	f7fb bfcf 	b.w	5dd8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    9e3a:	0000      	.short	0x0000
    9e3c:	20000de8 	.word	0x20000de8
    9e40:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e44:	4692      	mov	sl, r2
    9e46:	460f      	mov	r7, r1
    9e48:	4681      	mov	r9, r0
    9e4a:	f005 f9fd 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    9e4e:	2800      	cmp	r0, #0
    9e50:	d063      	beq.n	9f1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e52:	4933      	ldr	r1, [pc, #204]	; (9f20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    9e54:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    9e58:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    9e5c:	8808      	ldrh	r0, [r1, #0]
    9e5e:	4290      	cmp	r0, r2
    9e60:	d300      	bcc.n	9e64 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    9e62:	4610      	mov	r0, r2
    9e64:	4680      	mov	r8, r0
    9e66:	8888      	ldrh	r0, [r1, #4]
    9e68:	42b0      	cmp	r0, r6
    9e6a:	d200      	bcs.n	9e6e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    9e6c:	4606      	mov	r6, r0
    9e6e:	884c      	ldrh	r4, [r1, #2]
    9e70:	f640 0048 	movw	r0, #2120	; 0x848
    9e74:	4284      	cmp	r4, r0
    9e76:	d300      	bcc.n	9e7a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    9e78:	4604      	mov	r4, r0
    9e7a:	88cd      	ldrh	r5, [r1, #6]
    9e7c:	4285      	cmp	r5, r0
    9e7e:	d300      	bcc.n	9e82 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    9e80:	4605      	mov	r5, r0
    9e82:	4284      	cmp	r4, r0
    9e84:	d300      	bcc.n	9e88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    9e86:	4604      	mov	r4, r0
    9e88:	f44f 71a4 	mov.w	r1, #328	; 0x148
    9e8c:	2e1b      	cmp	r6, #27
    9e8e:	d001      	beq.n	9e94 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    9e90:	428d      	cmp	r5, r1
    9e92:	d104      	bne.n	9e9e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    9e94:	f1b8 0f1b 	cmp.w	r8, #27
    9e98:	d03f      	beq.n	9f1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e9a:	428c      	cmp	r4, r1
    9e9c:	d03d      	beq.n	9f1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9e9e:	466a      	mov	r2, sp
    9ea0:	4651      	mov	r1, sl
    9ea2:	4648      	mov	r0, r9
    9ea4:	f005 f954 	bl	f150 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    9ea8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    9eac:	4641      	mov	r1, r8
    9eae:	4540      	cmp	r0, r8
    9eb0:	d900      	bls.n	9eb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    9eb2:	4608      	mov	r0, r1
    9eb4:	80f8      	strh	r0, [r7, #6]
    9eb6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9eba:	42a1      	cmp	r1, r4
    9ebc:	d800      	bhi.n	9ec0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    9ebe:	460c      	mov	r4, r1
    9ec0:	813c      	strh	r4, [r7, #8]
    9ec2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    9ec6:	42b1      	cmp	r1, r6
    9ec8:	d800      	bhi.n	9ecc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    9eca:	460e      	mov	r6, r1
    9ecc:	807e      	strh	r6, [r7, #2]
    9ece:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    9ed2:	42a9      	cmp	r1, r5
    9ed4:	d900      	bls.n	9ed8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    9ed6:	4629      	mov	r1, r5
    9ed8:	80b9      	strh	r1, [r7, #4]
    9eda:	2201      	movs	r2, #1
    9edc:	703a      	strb	r2, [r7, #0]
    9ede:	381b      	subs	r0, #27
    9ee0:	28e0      	cmp	r0, #224	; 0xe0
    9ee2:	d902      	bls.n	9eea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    9ee4:	f640 4172 	movw	r1, #3186	; 0xc72
    9ee8:	e014      	b.n	9f14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9eea:	3e1b      	subs	r6, #27
    9eec:	2ee0      	cmp	r6, #224	; 0xe0
    9eee:	d902      	bls.n	9ef6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    9ef0:	f640 4174 	movw	r1, #3188	; 0xc74
    9ef4:	e00e      	b.n	9f14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9ef6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    9efa:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    9efe:	4284      	cmp	r4, r0
    9f00:	d902      	bls.n	9f08 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    9f02:	f640 4176 	movw	r1, #3190	; 0xc76
    9f06:	e005      	b.n	9f14 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    9f08:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    9f0c:	4281      	cmp	r1, r0
    9f0e:	d904      	bls.n	9f1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    9f10:	f640 4178 	movw	r1, #3192	; 0xc78
    9f14:	2039      	movs	r0, #57	; 0x39
    9f16:	f7f9 feaf 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f1a:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f1e:	0000      	.short	0x0000
    9f20:	200001fc 	.word	0x200001fc

00009f24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    9f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f28:	b088      	sub	sp, #32
    9f2a:	460c      	mov	r4, r1
    9f2c:	4606      	mov	r6, r0
    9f2e:	f003 fd16 	bl	d95e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    9f32:	b198      	cbz	r0, 9f5c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x38>
    9f34:	4630      	mov	r0, r6
    9f36:	f003 fd05 	bl	d944 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    9f3a:	b130      	cbz	r0, 9f4a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x26>
    9f3c:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    9f40:	2012      	movs	r0, #18
    9f42:	2900      	cmp	r1, #0
    9f44:	d00b      	beq.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f46:	2980      	cmp	r1, #128	; 0x80
    9f48:	d809      	bhi.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f4a:	4630      	mov	r0, r6
    9f4c:	f003 fce9 	bl	d922 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>
    9f50:	b140      	cbz	r0, 9f64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f52:	4630      	mov	r0, r6
    9f54:	f003 fc61 	bl	d81a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    9f58:	b130      	cbz	r0, 9f68 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x44>
    9f5a:	e009      	b.n	9f70 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x4c>
    9f5c:	2042      	movs	r0, #66	; 0x42
    9f5e:	b008      	add	sp, #32
    9f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9f64:	200c      	movs	r0, #12
    9f66:	e7fa      	b.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9f68:	4630      	mov	r0, r6
    9f6a:	f003 fce5 	bl	d938 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    9f6e:	b3a8      	cbz	r0, 9fdc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xb8>
    9f70:	4630      	mov	r0, r6
    9f72:	f003 febc 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    9f76:	2800      	cmp	r0, #0
    9f78:	d1f4      	bne.n	9f64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f7a:	4630      	mov	r0, r6
    9f7c:	f003 fc68 	bl	d850 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    9f80:	2800      	cmp	r0, #0
    9f82:	d1ef      	bne.n	9f64 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x40>
    9f84:	4630      	mov	r0, r6
    9f86:	f7fc f97b 	bl	6280 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    9f8a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    9f8e:	f242 7110 	movw	r1, #10000	; 0x2710
    9f92:	fb00 f801 	mul.w	r8, r0, r1
    9f96:	78e1      	ldrb	r1, [r4, #3]
    9f98:	4630      	mov	r0, r6
    9f9a:	f003 fcb9 	bl	d910 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    9f9e:	4630      	mov	r0, r6
    9fa0:	f003 fccc 	bl	d93c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    9fa4:	b1e8      	cbz	r0, 9fe2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xbe>
    9fa6:	2200      	movs	r2, #0
    9fa8:	4611      	mov	r1, r2
    9faa:	a801      	add	r0, sp, #4
    9fac:	f7fa f8d0 	bl	4150 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    9fb0:	0004      	movs	r4, r0
    9fb2:	d06a      	beq.n	a08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    9fb4:	2100      	movs	r1, #0
    9fb6:	f7fb fda5 	bl	5b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    9fba:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9fbe:	8020      	strh	r0, [r4, #0]
    9fc0:	4621      	mov	r1, r4
    9fc2:	4630      	mov	r0, r6
    9fc4:	f003 fcde 	bl	d984 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    9fc8:	f005 f93e 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    9fcc:	4d3a      	ldr	r5, [pc, #232]	; (a0b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x194>)
    9fce:	2800      	cmp	r0, #0
    9fd0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9fd4:	d00f      	beq.n	9ff6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd2>
    9fd6:	88aa      	ldrh	r2, [r5, #4]
    9fd8:	88e9      	ldrh	r1, [r5, #6]
    9fda:	e00e      	b.n	9ffa <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xd6>
    9fdc:	e7ff      	b.n	9fde <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xba>
    9fde:	2012      	movs	r0, #18
    9fe0:	e7bd      	b.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9fe2:	4642      	mov	r2, r8
    9fe4:	2100      	movs	r1, #0
    9fe6:	4630      	mov	r0, r6
    9fe8:	f7fd f89a 	bl	7120 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    9fec:	2800      	cmp	r0, #0
    9fee:	d0b6      	beq.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    9ff0:	f241 413b 	movw	r1, #5179	; 0x143b
    9ff4:	e053      	b.n	a09e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    9ff6:	221b      	movs	r2, #27
    9ff8:	4611      	mov	r1, r2
    9ffa:	84c2      	strh	r2, [r0, #38]	; 0x26
    9ffc:	8501      	strh	r1, [r0, #40]	; 0x28
    9ffe:	68a8      	ldr	r0, [r5, #8]
    a000:	62e0      	str	r0, [r4, #44]	; 0x2c
    a002:	f641 574c 	movw	r7, #7500	; 0x1d4c
    a006:	4630      	mov	r0, r6
    a008:	f003 fca0 	bl	d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    a00c:	b910      	cbnz	r0, a014 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xf0>
    a00e:	4630      	mov	r0, r6
    a010:	f003 fcb6 	bl	d980 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    a014:	60e7      	str	r7, [r4, #12]
    a016:	8821      	ldrh	r1, [r4, #0]
    a018:	f8ad 1008 	strh.w	r1, [sp, #8]
    a01c:	7ca9      	ldrb	r1, [r5, #18]
    a01e:	f88d 100a 	strb.w	r1, [sp, #10]
    a022:	7ce9      	ldrb	r1, [r5, #19]
    a024:	f88d 100b 	strb.w	r1, [sp, #11]
    a028:	8aa9      	ldrh	r1, [r5, #20]
    a02a:	f8ad 100c 	strh.w	r1, [sp, #12]
    a02e:	a905      	add	r1, sp, #20
    a030:	9100      	str	r1, [sp, #0]
    a032:	2001      	movs	r0, #1
    a034:	ab04      	add	r3, sp, #16
    a036:	aa02      	add	r2, sp, #8
    a038:	4621      	mov	r1, r4
    a03a:	f005 f8c6 	bl	f1ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x290>
    a03e:	b140      	cbz	r0, a052 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x12e>
    a040:	2100      	movs	r1, #0
    a042:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    a046:	f7fa f8ad 	bl	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    a04a:	b1f0      	cbz	r0, a08a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x166>
    a04c:	f241 4187 	movw	r1, #5255	; 0x1487
    a050:	e025      	b.n	a09e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a052:	f89d 0010 	ldrb.w	r0, [sp, #16]
    a056:	f88d 0018 	strb.w	r0, [sp, #24]
    a05a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a05e:	f88d 0019 	strb.w	r0, [sp, #25]
    a062:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    a066:	f8ad 001a 	strh.w	r0, [sp, #26]
    a06a:	a906      	add	r1, sp, #24
    a06c:	4620      	mov	r0, r4
    a06e:	f002 ff52 	bl	cf16 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    a072:	78e8      	ldrb	r0, [r5, #3]
    a074:	9000      	str	r0, [sp, #0]
    a076:	78ab      	ldrb	r3, [r5, #2]
    a078:	88ea      	ldrh	r2, [r5, #6]
    a07a:	88a9      	ldrh	r1, [r5, #4]
    a07c:	8820      	ldrh	r0, [r4, #0]
    a07e:	f7fa f95d 	bl	433c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    a082:	b120      	cbz	r0, a08e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x16a>
    a084:	f241 4192 	movw	r1, #5266	; 0x1492
    a088:	e009      	b.n	a09e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x17a>
    a08a:	2009      	movs	r0, #9
    a08c:	e767      	b.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a08e:	4642      	mov	r2, r8
    a090:	4621      	mov	r1, r4
    a092:	4630      	mov	r0, r6
    a094:	f7fd f844 	bl	7120 <sym_5AXOP4FMWSDQG27BL6BIS5GAVXQZMPGL37SAGQA>
    a098:	b120      	cbz	r0, a0a4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x180>
    a09a:	f241 4194 	movw	r1, #5268	; 0x1494
    a09e:	2039      	movs	r0, #57	; 0x39
    a0a0:	f7f9 fdea 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a0a4:	4805      	ldr	r0, [pc, #20]	; (a0bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x198>)
    a0a6:	6843      	ldr	r3, [r0, #4]
    a0a8:	b123      	cbz	r3, a0b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x190>
    a0aa:	2200      	movs	r2, #0
    a0ac:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
    a0b0:	4620      	mov	r0, r4
    a0b2:	4798      	blx	r3
    a0b4:	2000      	movs	r0, #0
    a0b6:	e752      	b.n	9f5e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    a0b8:	20000de8 	.word	0x20000de8
    a0bc:	200001f4 	.word	0x200001f4
    a0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0c4:	b088      	sub	sp, #32
    a0c6:	4604      	mov	r4, r0
    a0c8:	8800      	ldrh	r0, [r0, #0]
    a0ca:	a906      	add	r1, sp, #24
    a0cc:	f002 fe64 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a0d0:	2800      	cmp	r0, #0
    a0d2:	d147      	bne.n	a164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a0d4:	9807      	ldr	r0, [sp, #28]
    a0d6:	2700      	movs	r7, #0
    a0d8:	f890 11e8 	ldrb.w	r1, [r0, #488]	; 0x1e8
    a0dc:	f88d 1008 	strb.w	r1, [sp, #8]
    a0e0:	9902      	ldr	r1, [sp, #8]
    a0e2:	9102      	str	r1, [sp, #8]
    a0e4:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a0e8:	f88d 100c 	strb.w	r1, [sp, #12]
    a0ec:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
    a0f0:	3070      	adds	r0, #112	; 0x70
    a0f2:	0689      	lsls	r1, r1, #26
    a0f4:	d502      	bpl.n	a0fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d8>
    a0f6:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a0fa:	b149      	cbz	r1, a110 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    a0fc:	f05f 0100 	movs.w	r1, #0
    a100:	f88d 1004 	strb.w	r1, [sp, #4]
    a104:	2105      	movs	r1, #5
    a106:	304c      	adds	r0, #76	; 0x4c
    a108:	f004 f9be 	bl	e488 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    a10c:	b110      	cbz	r0, a114 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f0>
    a10e:	e004      	b.n	a11a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f6>
    a110:	2101      	movs	r1, #1
    a112:	e7f5      	b.n	a100 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1dc>
    a114:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a118:	b318      	cbz	r0, a162 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23e>
    a11a:	8921      	ldrh	r1, [r4, #8]
    a11c:	88e0      	ldrh	r0, [r4, #6]
    a11e:	f005 f809 	bl	f134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a122:	2800      	cmp	r0, #0
    a124:	d11e      	bne.n	a164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a126:	88a1      	ldrh	r1, [r4, #4]
    a128:	8860      	ldrh	r0, [r4, #2]
    a12a:	f005 f803 	bl	f134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a12e:	2800      	cmp	r0, #0
    a130:	d118      	bne.n	a164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a132:	8921      	ldrh	r1, [r4, #8]
    a134:	88e0      	ldrh	r0, [r4, #6]
    a136:	f004 fff3 	bl	f120 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a13a:	2800      	cmp	r0, #0
    a13c:	d112      	bne.n	a164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a13e:	88a1      	ldrh	r1, [r4, #4]
    a140:	8860      	ldrh	r0, [r4, #2]
    a142:	f004 ffed 	bl	f120 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e6>
    a146:	0006      	movs	r6, r0
    a148:	d10c      	bne.n	a164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a14a:	9807      	ldr	r0, [sp, #28]
    a14c:	f500 75d2 	add.w	r5, r0, #420	; 0x1a4
    a150:	f04f 0801 	mov.w	r8, #1
    a154:	f885 8001 	strb.w	r8, [r5, #1]
    a158:	f89d 100c 	ldrb.w	r1, [sp, #12]
    a15c:	b129      	cbz	r1, a16a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x246>
    a15e:	263a      	movs	r6, #58	; 0x3a
    a160:	e02f      	b.n	a1c2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x29e>
    a162:	201a      	movs	r0, #26
    a164:	b008      	add	sp, #32
    a166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a16a:	4639      	mov	r1, r7
    a16c:	aa03      	add	r2, sp, #12
    a16e:	f004 ffef 	bl	f150 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    a172:	8861      	ldrh	r1, [r4, #2]
    a174:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    a178:	4281      	cmp	r1, r0
    a17a:	d200      	bcs.n	a17e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x25a>
    a17c:	4608      	mov	r0, r1
    a17e:	80e8      	strh	r0, [r5, #6]
    a180:	88a1      	ldrh	r1, [r4, #4]
    a182:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    a186:	4281      	cmp	r1, r0
    a188:	d200      	bcs.n	a18c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x268>
    a18a:	4608      	mov	r0, r1
    a18c:	8128      	strh	r0, [r5, #8]
    a18e:	88e2      	ldrh	r2, [r4, #6]
    a190:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    a194:	428a      	cmp	r2, r1
    a196:	d200      	bcs.n	a19a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x276>
    a198:	4611      	mov	r1, r2
    a19a:	8069      	strh	r1, [r5, #2]
    a19c:	8922      	ldrh	r2, [r4, #8]
    a19e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    a1a2:	428a      	cmp	r2, r1
    a1a4:	d200      	bcs.n	a1a8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x284>
    a1a6:	4611      	mov	r1, r2
    a1a8:	f640 0248 	movw	r2, #2120	; 0x848
    a1ac:	80a9      	strh	r1, [r5, #4]
    a1ae:	4291      	cmp	r1, r2
    a1b0:	d300      	bcc.n	a1b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x290>
    a1b2:	4611      	mov	r1, r2
    a1b4:	80a9      	strh	r1, [r5, #4]
    a1b6:	4290      	cmp	r0, r2
    a1b8:	d200      	bcs.n	a1bc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x298>
    a1ba:	4602      	mov	r2, r0
    a1bc:	812a      	strh	r2, [r5, #8]
    a1be:	f885 8000 	strb.w	r8, [r5]
    a1c2:	706f      	strb	r7, [r5, #1]
    a1c4:	4630      	mov	r0, r6
    a1c6:	e7cd      	b.n	a164 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    a1c8:	b510      	push	{r4, lr}
    a1ca:	4604      	mov	r4, r0
    a1cc:	88c1      	ldrh	r1, [r0, #6]
    a1ce:	8880      	ldrh	r0, [r0, #4]
    a1d0:	f004 ffb0 	bl	f134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a1d4:	2800      	cmp	r0, #0
    a1d6:	d10f      	bne.n	a1f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a1d8:	8861      	ldrh	r1, [r4, #2]
    a1da:	8820      	ldrh	r0, [r4, #0]
    a1dc:	f004 ffaa 	bl	f134 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1fa>
    a1e0:	2800      	cmp	r0, #0
    a1e2:	d109      	bne.n	a1f8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d4>
    a1e4:	4805      	ldr	r0, [pc, #20]	; (a1fc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2d8>)
    a1e6:	88a1      	ldrh	r1, [r4, #4]
    a1e8:	8081      	strh	r1, [r0, #4]
    a1ea:	8821      	ldrh	r1, [r4, #0]
    a1ec:	8001      	strh	r1, [r0, #0]
    a1ee:	88e1      	ldrh	r1, [r4, #6]
    a1f0:	80c1      	strh	r1, [r0, #6]
    a1f2:	8861      	ldrh	r1, [r4, #2]
    a1f4:	8041      	strh	r1, [r0, #2]
    a1f6:	2000      	movs	r0, #0
    a1f8:	bd10      	pop	{r4, pc}
    a1fa:	0000      	.short	0x0000
    a1fc:	200001fc 	.word	0x200001fc
    a200:	0b12b00b 	.word	0x0b12b00b
    a204:	12b00059 	.word	0x12b00059
    a208:	05060708 	.word	0x05060708
    a20c:	00020304 	.word	0x00020304
    a210:	f0f4f8fc 	.word	0xf0f4f8fc
    a214:	0304d8ec 	.word	0x0304d8ec
    a218:	f4f8fc00 	.word	0xf4f8fc00
    a21c:	00d8ecf0 	.word	0x00d8ecf0

0000a220 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    a220:	b510      	push	{r4, lr}
    a222:	f7ff fced 	bl	9c00 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    a226:	4804      	ldr	r0, [pc, #16]	; (a238 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x18>)
    a228:	6840      	ldr	r0, [r0, #4]
    a22a:	f005 f8df 	bl	f3ec <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a232:	f004 be1b 	b.w	ee6c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    a236:	0000      	.short	0x0000
    a238:	20000204 	.word	0x20000204

0000a23c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    a23c:	b510      	push	{r4, lr}
    a23e:	4c07      	ldr	r4, [pc, #28]	; (a25c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    a240:	68a0      	ldr	r0, [r4, #8]
    a242:	f005 f8d3 	bl	f3ec <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a246:	68e0      	ldr	r0, [r4, #12]
    a248:	f005 f8d0 	bl	f3ec <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x3e>
    a24c:	f002 fcf8 	bl	cc40 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    a250:	f7fb fa2a 	bl	56a8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a258:	f7ff bdae 	b.w	9db8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    a25c:	20000204 	.word	0x20000204

0000a260 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    a260:	b500      	push	{lr}
    a262:	4905      	ldr	r1, [pc, #20]	; (a278 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    a264:	4805      	ldr	r0, [pc, #20]	; (a27c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a266:	f005 f8a2 	bl	f3ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a26a:	4804      	ldr	r0, [pc, #16]	; (a27c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    a26c:	4904      	ldr	r1, [pc, #16]	; (a280 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    a26e:	1d00      	adds	r0, r0, #4
    a270:	f85d eb04 	ldr.w	lr, [sp], #4
    a274:	f005 b89b 	b.w	f3ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a278:	20000214 	.word	0x20000214
    a27c:	20000208 	.word	0x20000208
    a280:	2000021c 	.word	0x2000021c

0000a284 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    a284:	b500      	push	{lr}
    a286:	4908      	ldr	r1, [pc, #32]	; (a2a8 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    a288:	4808      	ldr	r0, [pc, #32]	; (a2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a28a:	f005 f890 	bl	f3ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a28e:	4807      	ldr	r0, [pc, #28]	; (a2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a290:	4907      	ldr	r1, [pc, #28]	; (a2b0 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    a292:	1d00      	adds	r0, r0, #4
    a294:	f005 f88b 	bl	f3ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a298:	4804      	ldr	r0, [pc, #16]	; (a2ac <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    a29a:	4906      	ldr	r1, [pc, #24]	; (a2b4 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    a29c:	3008      	adds	r0, #8
    a29e:	f85d eb04 	ldr.w	lr, [sp], #4
    a2a2:	f005 b884 	b.w	f3ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    a2a6:	0000      	.short	0x0000
    a2a8:	20000240 	.word	0x20000240
    a2ac:	20000208 	.word	0x20000208
    a2b0:	20000248 	.word	0x20000248
    a2b4:	20000238 	.word	0x20000238

0000a2b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    a2b8:	4801      	ldr	r0, [pc, #4]	; (a2c0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    a2ba:	7800      	ldrb	r0, [r0, #0]
    a2bc:	4770      	bx	lr
    a2be:	0000      	.short	0x0000
    a2c0:	20000204 	.word	0x20000204
    a2c4:	b510      	push	{r4, lr}
    a2c6:	f7fc f953 	bl	6570 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    a2ca:	f7fc ffbd 	bl	7248 <sym_2MTQAETLPZUE4ZJFGJBDUADTDDEDQL67CNLDYRY>
    a2ce:	4805      	ldr	r0, [pc, #20]	; (a2e4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x2c>)
    a2d0:	f7fc f934 	bl	653c <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    a2d4:	4905      	ldr	r1, [pc, #20]	; (a2ec <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x34>)
    a2d6:	4804      	ldr	r0, [pc, #16]	; (a2e8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x30>)
    a2d8:	6008      	str	r0, [r1, #0]
    a2da:	4906      	ldr	r1, [pc, #24]	; (a2f4 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x3c>)
    a2dc:	4804      	ldr	r0, [pc, #16]	; (a2f0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x38>)
    a2de:	6008      	str	r0, [r1, #0]
    a2e0:	bd10      	pop	{r4, pc}
    a2e2:	0000      	.short	0x0000
    a2e4:	20001271 	.word	0x20001271
    a2e8:	00006341 	.word	0x00006341
    a2ec:	20000224 	.word	0x20000224
    a2f0:	00005e79 	.word	0x00005e79
    a2f4:	20000228 	.word	0x20000228
    a2f8:	490c      	ldr	r1, [pc, #48]	; (a32c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x74>)
    a2fa:	b510      	push	{r4, lr}
    a2fc:	2001      	movs	r0, #1
    a2fe:	7008      	strb	r0, [r1, #0]
    a300:	f7fc f966 	bl	65d0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    a304:	f7fd fcfe 	bl	7d04 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    a308:	f002 fc88 	bl	cc1c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    a30c:	4808      	ldr	r0, [pc, #32]	; (a330 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x78>)
    a30e:	f7fa fc2b 	bl	4b68 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    a312:	2000      	movs	r0, #0
    a314:	f7f9 fe8c 	bl	4030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    a318:	4907      	ldr	r1, [pc, #28]	; (a338 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x80>)
    a31a:	4806      	ldr	r0, [pc, #24]	; (a334 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x7c>)
    a31c:	6008      	str	r0, [r1, #0]
    a31e:	4908      	ldr	r1, [pc, #32]	; (a340 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x88>)
    a320:	4806      	ldr	r0, [pc, #24]	; (a33c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x84>)
    a322:	6008      	str	r0, [r1, #0]
    a324:	4908      	ldr	r1, [pc, #32]	; (a348 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x90>)
    a326:	4807      	ldr	r0, [pc, #28]	; (a344 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8c>)
    a328:	6008      	str	r0, [r1, #0]
    a32a:	bd10      	pop	{r4, pc}
    a32c:	20000204 	.word	0x20000204
    a330:	20001271 	.word	0x20001271
    a334:	00004b15 	.word	0x00004b15
    a338:	20000234 	.word	0x20000234
    a33c:	00007a85 	.word	0x00007a85
    a340:	20000230 	.word	0x20000230
    a344:	00005eed 	.word	0x00005eed
    a348:	2000022c 	.word	0x2000022c

0000a34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    a34c:	2101      	movs	r1, #1
    a34e:	4081      	lsls	r1, r0
    a350:	4802      	ldr	r0, [pc, #8]	; (a35c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    a352:	6802      	ldr	r2, [r0, #0]
    a354:	4311      	orrs	r1, r2
    a356:	6001      	str	r1, [r0, #0]
    a358:	4770      	bx	lr
    a35a:	0000      	.short	0x0000
    a35c:	20000250 	.word	0x20000250

0000a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    a360:	4801      	ldr	r0, [pc, #4]	; (a368 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    a362:	6800      	ldr	r0, [r0, #0]
    a364:	4770      	bx	lr
    a366:	0000      	.short	0x0000
    a368:	20000250 	.word	0x20000250

0000a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    a36c:	4803      	ldr	r0, [pc, #12]	; (a37c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    a36e:	8800      	ldrh	r0, [r0, #0]
    a370:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a374:	0040      	lsls	r0, r0, #1
    a376:	1c40      	adds	r0, r0, #1
    a378:	4770      	bx	lr
    a37a:	0000      	.short	0x0000
    a37c:	20000250 	.word	0x20000250

0000a380 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    a380:	b510      	push	{r4, lr}
    a382:	f7f9 f8ed 	bl	3560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    a386:	2200      	movs	r2, #0
    a388:	4b08      	ldr	r3, [pc, #32]	; (a3ac <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    a38a:	4611      	mov	r1, r2
    a38c:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    a390:	4284      	cmp	r4, r0
    a392:	d303      	bcc.n	a39c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    a394:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    a398:	7882      	ldrb	r2, [r0, #2]
    a39a:	e003      	b.n	a3a4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    a39c:	1c49      	adds	r1, r1, #1
    a39e:	b2c9      	uxtb	r1, r1
    a3a0:	290c      	cmp	r1, #12
    a3a2:	d3f3      	bcc.n	a38c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    a3a4:	4802      	ldr	r0, [pc, #8]	; (a3b0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    a3a6:	7002      	strb	r2, [r0, #0]
    a3a8:	bd10      	pop	{r4, pc}
    a3aa:	0000      	.short	0x0000
    a3ac:	0000f43e 	.word	0x0000f43e
    a3b0:	20000298 	.word	0x20000298

0000a3b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    a3b4:	b570      	push	{r4, r5, r6, lr}
    a3b6:	4605      	mov	r5, r0
    a3b8:	4616      	mov	r6, r2
    a3ba:	460c      	mov	r4, r1
    a3bc:	2002      	movs	r0, #2
    a3be:	f000 f9f9 	bl	a7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a3c2:	4906      	ldr	r1, [pc, #24]	; (a3dc <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    a3c4:	2001      	movs	r0, #1
    a3c6:	1ef6      	subs	r6, r6, #3
    a3c8:	7008      	strb	r0, [r1, #0]
    a3ca:	4805      	ldr	r0, [pc, #20]	; (a3e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a3cc:	6006      	str	r6, [r0, #0]
    a3ce:	4804      	ldr	r0, [pc, #16]	; (a3e0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    a3d0:	3808      	subs	r0, #8
    a3d2:	6005      	str	r5, [r0, #0]
    a3d4:	1f00      	subs	r0, r0, #4
    a3d6:	6004      	str	r4, [r0, #0]
    a3d8:	bd70      	pop	{r4, r5, r6, pc}
    a3da:	0000      	.short	0x0000
    a3dc:	20000299 	.word	0x20000299
    a3e0:	4000f510 	.word	0x4000f510

0000a3e4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    a3e4:	b510      	push	{r4, lr}
    a3e6:	4c0c      	ldr	r4, [pc, #48]	; (a418 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    a3e8:	7820      	ldrb	r0, [r4, #0]
    a3ea:	b180      	cbz	r0, a40e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    a3ec:	490b      	ldr	r1, [pc, #44]	; (a41c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    a3ee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a3f2:	6008      	str	r0, [r1, #0]
    a3f4:	f000 f86a 	bl	a4cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a3f8:	2100      	movs	r1, #0
    a3fa:	b120      	cbz	r0, a406 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    a3fc:	2001      	movs	r0, #1
    a3fe:	7060      	strb	r0, [r4, #1]
    a400:	4807      	ldr	r0, [pc, #28]	; (a420 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    a402:	6800      	ldr	r0, [r0, #0]
    a404:	e001      	b.n	a40a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    a406:	7061      	strb	r1, [r4, #1]
    a408:	2010      	movs	r0, #16
    a40a:	70a0      	strb	r0, [r4, #2]
    a40c:	7021      	strb	r1, [r4, #0]
    a40e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a412:	2000      	movs	r0, #0
    a414:	f000 b9ce 	b.w	a7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a418:	20000299 	.word	0x20000299
    a41c:	4001f508 	.word	0x4001f508
    a420:	4000f400 	.word	0x4000f400

0000a424 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    a424:	b510      	push	{r4, lr}
    a426:	2002      	movs	r0, #2
    a428:	f000 f9c4 	bl	a7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a42c:	4904      	ldr	r1, [pc, #16]	; (a440 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    a42e:	2001      	movs	r0, #1
    a430:	7008      	strb	r0, [r1, #0]
    a432:	f000 f859 	bl	a4e8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    a436:	4903      	ldr	r1, [pc, #12]	; (a444 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    a438:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a43c:	6008      	str	r0, [r1, #0]
    a43e:	bd10      	pop	{r4, pc}
    a440:	20000299 	.word	0x20000299
    a444:	4001f504 	.word	0x4001f504

0000a448 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    a448:	4803      	ldr	r0, [pc, #12]	; (a458 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    a44a:	2100      	movs	r1, #0
    a44c:	7001      	strb	r1, [r0, #0]
    a44e:	7041      	strb	r1, [r0, #1]
    a450:	2110      	movs	r1, #16
    a452:	7081      	strb	r1, [r0, #2]
    a454:	4770      	bx	lr
    a456:	0000      	.short	0x0000
    a458:	20000299 	.word	0x20000299

0000a45c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    a45c:	4807      	ldr	r0, [pc, #28]	; (a47c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    a45e:	b510      	push	{r4, lr}
    a460:	7801      	ldrb	r1, [r0, #0]
    a462:	b141      	cbz	r1, a476 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    a464:	f000 f832 	bl	a4cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    a468:	b118      	cbz	r0, a472 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    a46a:	4805      	ldr	r0, [pc, #20]	; (a480 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    a46c:	6800      	ldr	r0, [r0, #0]
    a46e:	b2c0      	uxtb	r0, r0
    a470:	bd10      	pop	{r4, pc}
    a472:	2010      	movs	r0, #16
    a474:	bd10      	pop	{r4, pc}
    a476:	7880      	ldrb	r0, [r0, #2]
    a478:	bd10      	pop	{r4, pc}
    a47a:	0000      	.short	0x0000
    a47c:	20000299 	.word	0x20000299
    a480:	4000f400 	.word	0x4000f400

0000a484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    a484:	4808      	ldr	r0, [pc, #32]	; (a4a8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    a486:	b510      	push	{r4, lr}
    a488:	7801      	ldrb	r1, [r0, #0]
    a48a:	b159      	cbz	r1, a4a4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    a48c:	4807      	ldr	r0, [pc, #28]	; (a4ac <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    a48e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a492:	b128      	cbz	r0, a4a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    a494:	f000 f80c 	bl	a4b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a498:	2800      	cmp	r0, #0
    a49a:	d000      	beq.n	a49e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    a49c:	2001      	movs	r0, #1
    a49e:	bd10      	pop	{r4, pc}
    a4a0:	2002      	movs	r0, #2
    a4a2:	bd10      	pop	{r4, pc}
    a4a4:	7840      	ldrb	r0, [r0, #1]
    a4a6:	bd10      	pop	{r4, pc}
    a4a8:	20000299 	.word	0x20000299
    a4ac:	4000f000 	.word	0x4000f000
    a4b0:	4805      	ldr	r0, [pc, #20]	; (a4c8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    a4b2:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    a4b6:	b111      	cbz	r1, a4be <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    a4b8:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    a4bc:	b108      	cbz	r0, a4c2 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    a4be:	2000      	movs	r0, #0
    a4c0:	4770      	bx	lr
    a4c2:	2001      	movs	r0, #1
    a4c4:	4770      	bx	lr
    a4c6:	0000      	.short	0x0000
    a4c8:	4000f000 	.word	0x4000f000
    a4cc:	4805      	ldr	r0, [pc, #20]	; (a4e4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    a4ce:	b510      	push	{r4, lr}
    a4d0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    a4d4:	b120      	cbz	r0, a4e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a4d6:	f7ff ffeb 	bl	a4b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    a4da:	b108      	cbz	r0, a4e0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    a4dc:	2001      	movs	r0, #1
    a4de:	bd10      	pop	{r4, pc}
    a4e0:	2000      	movs	r0, #0
    a4e2:	bd10      	pop	{r4, pc}
    a4e4:	4000f000 	.word	0x4000f000
    a4e8:	4804      	ldr	r0, [pc, #16]	; (a4fc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    a4ea:	2100      	movs	r1, #0
    a4ec:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    a4f0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    a4f4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    a4f8:	4770      	bx	lr
    a4fa:	0000      	.short	0x0000
    a4fc:	4000f000 	.word	0x4000f000

0000a500 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    a500:	4a08      	ldr	r2, [pc, #32]	; (a524 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    a502:	b510      	push	{r4, lr}
    a504:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a508:	4907      	ldr	r1, [pc, #28]	; (a528 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    a50a:	4610      	mov	r0, r2
    a50c:	f7f9 fa88 	bl	3a20 <mpsl_fem_lna_configuration_set>
    a510:	2800      	cmp	r0, #0
    a512:	d005      	beq.n	a520 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a514:	1c40      	adds	r0, r0, #1
    a516:	d003      	beq.n	a520 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    a518:	217d      	movs	r1, #125	; 0x7d
    a51a:	2040      	movs	r0, #64	; 0x40
    a51c:	f7f9 fbac 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a520:	bd10      	pop	{r4, pc}
    a522:	0000      	.short	0x0000
    a524:	20000254 	.word	0x20000254
    a528:	0000a558 	.word	0x0000a558

0000a52c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    a52c:	4a08      	ldr	r2, [pc, #32]	; (a550 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    a52e:	b510      	push	{r4, lr}
    a530:	e9c2 0102 	strd	r0, r1, [r2, #8]
    a534:	4907      	ldr	r1, [pc, #28]	; (a554 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    a536:	4610      	mov	r0, r2
    a538:	f7f9 fa7e 	bl	3a38 <mpsl_fem_pa_configuration_set>
    a53c:	2800      	cmp	r0, #0
    a53e:	d005      	beq.n	a54c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a540:	1c40      	adds	r0, r0, #1
    a542:	d003      	beq.n	a54c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    a544:	2172      	movs	r1, #114	; 0x72
    a546:	2040      	movs	r0, #64	; 0x40
    a548:	f7f9 fb96 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a54c:	bd10      	pop	{r4, pc}
    a54e:	0000      	.short	0x0000
    a550:	20000254 	.word	0x20000254
    a554:	0000a558 	.word	0x0000a558
    a558:	00000001 	.word	0x00000001
    a55c:	40001110 	.word	0x40001110
	...

0000a570 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    a570:	4a07      	ldr	r2, [pc, #28]	; (a590 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    a572:	b510      	push	{r4, lr}
    a574:	7853      	ldrb	r3, [r2, #1]
    a576:	b133      	cbz	r3, a586 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    a578:	4b06      	ldr	r3, [pc, #24]	; (a594 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    a57a:	6019      	str	r1, [r3, #0]
    a57c:	1d19      	adds	r1, r3, #4
    a57e:	6008      	str	r0, [r1, #0]
    a580:	2001      	movs	r0, #1
    a582:	7090      	strb	r0, [r2, #2]
    a584:	bd10      	pop	{r4, pc}
    a586:	21ba      	movs	r1, #186	; 0xba
    a588:	203c      	movs	r0, #60	; 0x3c
    a58a:	f7f9 fb75 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a58e:	0000      	.short	0x0000
    a590:	2000029c 	.word	0x2000029c
    a594:	4000f50c 	.word	0x4000f50c

0000a598 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    a598:	4809      	ldr	r0, [pc, #36]	; (a5c0 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    a59a:	b510      	push	{r4, lr}
    a59c:	7801      	ldrb	r1, [r0, #0]
    a59e:	b151      	cbz	r1, a5b6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a5a0:	7880      	ldrb	r0, [r0, #2]
    a5a2:	b140      	cbz	r0, a5b6 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    a5a4:	4907      	ldr	r1, [pc, #28]	; (a5c4 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    a5a6:	2000      	movs	r0, #0
    a5a8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a5ac:	4906      	ldr	r1, [pc, #24]	; (a5c8 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    a5ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    a5b2:	6008      	str	r0, [r1, #0]
    a5b4:	bd10      	pop	{r4, pc}
    a5b6:	21e1      	movs	r1, #225	; 0xe1
    a5b8:	203c      	movs	r0, #60	; 0x3c
    a5ba:	f7f9 fb5d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5be:	0000      	.short	0x0000
    a5c0:	2000029c 	.word	0x2000029c
    a5c4:	4000f000 	.word	0x4000f000
    a5c8:	4001f504 	.word	0x4001f504

0000a5cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    a5cc:	b570      	push	{r4, r5, r6, lr}
    a5ce:	4c0b      	ldr	r4, [pc, #44]	; (a5fc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    a5d0:	2500      	movs	r5, #0
    a5d2:	7820      	ldrb	r0, [r4, #0]
    a5d4:	b158      	cbz	r0, a5ee <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    a5d6:	f000 f8e5 	bl	a7a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a5da:	4809      	ldr	r0, [pc, #36]	; (a600 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    a5dc:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a5e0:	b118      	cbz	r0, a5ea <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    a5e2:	4808      	ldr	r0, [pc, #32]	; (a604 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    a5e4:	6800      	ldr	r0, [r0, #0]
    a5e6:	70e0      	strb	r0, [r4, #3]
    a5e8:	e000      	b.n	a5ec <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    a5ea:	70e5      	strb	r5, [r4, #3]
    a5ec:	7025      	strb	r5, [r4, #0]
    a5ee:	2000      	movs	r0, #0
    a5f0:	f000 f8e0 	bl	a7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a5f4:	7065      	strb	r5, [r4, #1]
    a5f6:	70a5      	strb	r5, [r4, #2]
    a5f8:	bd70      	pop	{r4, r5, r6, pc}
    a5fa:	0000      	.short	0x0000
    a5fc:	2000029c 	.word	0x2000029c
    a600:	4000f000 	.word	0x4000f000
    a604:	4000f400 	.word	0x4000f400

0000a608 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    a608:	480d      	ldr	r0, [pc, #52]	; (a640 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    a60a:	b510      	push	{r4, lr}
    a60c:	7801      	ldrb	r1, [r0, #0]
    a60e:	b191      	cbz	r1, a636 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a610:	7880      	ldrb	r0, [r0, #2]
    a612:	b180      	cbz	r0, a636 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    a614:	490b      	ldr	r1, [pc, #44]	; (a644 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    a616:	2000      	movs	r0, #0
    a618:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    a61c:	4a0a      	ldr	r2, [pc, #40]	; (a648 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a61e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    a622:	6010      	str	r0, [r2, #0]
    a624:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a628:	2a01      	cmp	r2, #1
    a62a:	d103      	bne.n	a634 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    a62c:	604a      	str	r2, [r1, #4]
    a62e:	4906      	ldr	r1, [pc, #24]	; (a648 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    a630:	1d09      	adds	r1, r1, #4
    a632:	6008      	str	r0, [r1, #0]
    a634:	bd10      	pop	{r4, pc}
    a636:	21d1      	movs	r1, #209	; 0xd1
    a638:	203c      	movs	r0, #60	; 0x3c
    a63a:	f7f9 fb1d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a63e:	0000      	.short	0x0000
    a640:	2000029c 	.word	0x2000029c
    a644:	4000f000 	.word	0x4000f000
    a648:	4001f504 	.word	0x4001f504

0000a64c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    a64c:	4803      	ldr	r0, [pc, #12]	; (a65c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    a64e:	2100      	movs	r1, #0
    a650:	7001      	strb	r1, [r0, #0]
    a652:	7041      	strb	r1, [r0, #1]
    a654:	7081      	strb	r1, [r0, #2]
    a656:	70c1      	strb	r1, [r0, #3]
    a658:	4770      	bx	lr
    a65a:	0000      	.short	0x0000
    a65c:	2000029c 	.word	0x2000029c

0000a660 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    a660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a664:	4605      	mov	r5, r0
    a666:	461c      	mov	r4, r3
    a668:	4690      	mov	r8, r2
    a66a:	460f      	mov	r7, r1
    a66c:	2001      	movs	r0, #1
    a66e:	f000 f8a1 	bl	a7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    a672:	4e12      	ldr	r6, [pc, #72]	; (a6bc <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    a674:	4812      	ldr	r0, [pc, #72]	; (a6c0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a676:	7134      	strb	r4, [r6, #4]
    a678:	6007      	str	r7, [r0, #0]
    a67a:	4911      	ldr	r1, [pc, #68]	; (a6c0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a67c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    a680:	1f09      	subs	r1, r1, #4
    a682:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    a686:	6008      	str	r0, [r1, #0]
    a688:	f001 f8fa 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    a68c:	b938      	cbnz	r0, a69e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    a68e:	480c      	ldr	r0, [pc, #48]	; (a6c0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    a690:	3010      	adds	r0, #16
    a692:	6801      	ldr	r1, [r0, #0]
    a694:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    a698:	ea41 0108 	orr.w	r1, r1, r8
    a69c:	6001      	str	r1, [r0, #0]
    a69e:	f000 f881 	bl	a7a4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    a6a2:	b93d      	cbnz	r5, a6b4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    a6a4:	4808      	ldr	r0, [pc, #32]	; (a6c8 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    a6a6:	4a07      	ldr	r2, [pc, #28]	; (a6c4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a6a8:	4906      	ldr	r1, [pc, #24]	; (a6c4 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    a6aa:	3afc      	subs	r2, #252	; 0xfc
    a6ac:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    a6b0:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    a6b4:	2001      	movs	r0, #1
    a6b6:	7070      	strb	r0, [r6, #1]
    a6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6bc:	2000029c 	.word	0x2000029c
    a6c0:	4000f508 	.word	0x4000f508
    a6c4:	4000f100 	.word	0x4000f100
    a6c8:	4001f088 	.word	0x4001f088

0000a6cc <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    a6cc:	4808      	ldr	r0, [pc, #32]	; (a6f0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    a6ce:	b510      	push	{r4, lr}
    a6d0:	7841      	ldrb	r1, [r0, #1]
    a6d2:	b149      	cbz	r1, a6e8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    a6d4:	2101      	movs	r1, #1
    a6d6:	7001      	strb	r1, [r0, #0]
    a6d8:	4806      	ldr	r0, [pc, #24]	; (a6f4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    a6da:	2200      	movs	r2, #0
    a6dc:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    a6e0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    a6e4:	6001      	str	r1, [r0, #0]
    a6e6:	bd10      	pop	{r4, pc}
    a6e8:	21c5      	movs	r1, #197	; 0xc5
    a6ea:	203c      	movs	r0, #60	; 0x3c
    a6ec:	f7f9 fac4 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6f0:	2000029c 	.word	0x2000029c
    a6f4:	4000f000 	.word	0x4000f000

0000a6f8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    a6f8:	4806      	ldr	r0, [pc, #24]	; (a714 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    a6fa:	7801      	ldrb	r1, [r0, #0]
    a6fc:	b141      	cbz	r1, a710 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    a6fe:	4806      	ldr	r0, [pc, #24]	; (a718 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    a700:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    a704:	2800      	cmp	r0, #0
    a706:	d002      	beq.n	a70e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    a708:	4804      	ldr	r0, [pc, #16]	; (a71c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    a70a:	6800      	ldr	r0, [r0, #0]
    a70c:	b2c0      	uxtb	r0, r0
    a70e:	4770      	bx	lr
    a710:	78c0      	ldrb	r0, [r0, #3]
    a712:	4770      	bx	lr
    a714:	2000029c 	.word	0x2000029c
    a718:	4000f000 	.word	0x4000f000
    a71c:	4000f400 	.word	0x4000f400

0000a720 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    a720:	4901      	ldr	r1, [pc, #4]	; (a728 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    a722:	2001      	movs	r0, #1
    a724:	6088      	str	r0, [r1, #8]
    a726:	4770      	bx	lr
    a728:	4000f000 	.word	0x4000f000

0000a72c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    a72c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a730:	2800      	cmp	r0, #0
    a732:	d02e      	beq.n	a792 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a734:	4818      	ldr	r0, [pc, #96]	; (a798 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    a736:	7800      	ldrb	r0, [r0, #0]
    a738:	b1b0      	cbz	r0, a768 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    a73a:	4d18      	ldr	r5, [pc, #96]	; (a79c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    a73c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a740:	2800      	cmp	r0, #0
    a742:	d126      	bne.n	a792 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    a744:	2702      	movs	r7, #2
    a746:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    a74a:	4c15      	ldr	r4, [pc, #84]	; (a7a0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    a74c:	6820      	ldr	r0, [r4, #0]
    a74e:	43c0      	mvns	r0, r0
    a750:	f340 1600 	sbfx	r6, r0, #4, #1
    a754:	6820      	ldr	r0, [r4, #0]
    a756:	f040 0010 	orr.w	r0, r0, #16
    a75a:	6020      	str	r0, [r4, #0]
    a75c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    a760:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    a764:	1c76      	adds	r6, r6, #1
    a766:	e009      	b.n	a77c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    a768:	f240 1153 	movw	r1, #339	; 0x153
    a76c:	203c      	movs	r0, #60	; 0x3c
    a76e:	f7f9 fa83 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a772:	bf00      	nop
    a774:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    a778:	f7f9 f8fc 	bl	3974 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    a77c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    a780:	2800      	cmp	r0, #0
    a782:	d0f7      	beq.n	a774 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    a784:	b91e      	cbnz	r6, a78e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    a786:	6820      	ldr	r0, [r4, #0]
    a788:	f020 0010 	bic.w	r0, r0, #16
    a78c:	6020      	str	r0, [r4, #0]
    a78e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    a792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a796:	0000      	.short	0x0000
    a798:	2000029c 	.word	0x2000029c
    a79c:	4000f000 	.word	0x4000f000
    a7a0:	e000ed10 	.word	0xe000ed10
    a7a4:	4902      	ldr	r1, [pc, #8]	; (a7b0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    a7a6:	4801      	ldr	r0, [pc, #4]	; (a7ac <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    a7a8:	6008      	str	r0, [r1, #0]
    a7aa:	4770      	bx	lr
    a7ac:	02020000 	.word	0x02020000
    a7b0:	4001f508 	.word	0x4001f508

0000a7b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    a7b4:	b510      	push	{r4, lr}
    a7b6:	4604      	mov	r4, r0
    a7b8:	f000 f822 	bl	a800 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    a7bc:	2c00      	cmp	r4, #0
    a7be:	d017      	beq.n	a7f0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    a7c0:	4a0c      	ldr	r2, [pc, #48]	; (a7f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a7c2:	480c      	ldr	r0, [pc, #48]	; (a7f4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    a7c4:	490c      	ldr	r1, [pc, #48]	; (a7f8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    a7c6:	3214      	adds	r2, #20
    a7c8:	4b0c      	ldr	r3, [pc, #48]	; (a7fc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    a7ca:	2c01      	cmp	r4, #1
    a7cc:	d005      	beq.n	a7da <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    a7ce:	2c02      	cmp	r4, #2
    a7d0:	d008      	beq.n	a7e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    a7d2:	2183      	movs	r1, #131	; 0x83
    a7d4:	203d      	movs	r0, #61	; 0x3d
    a7d6:	f7f9 fa4f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7da:	2402      	movs	r4, #2
    a7dc:	6004      	str	r4, [r0, #0]
    a7de:	6011      	str	r1, [r2, #0]
    a7e0:	0620      	lsls	r0, r4, #24
    a7e2:	e004      	b.n	a7ee <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    a7e4:	2403      	movs	r4, #3
    a7e6:	6004      	str	r4, [r0, #0]
    a7e8:	6011      	str	r1, [r2, #0]
    a7ea:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    a7ee:	6018      	str	r0, [r3, #0]
    a7f0:	bd10      	pop	{r4, pc}
    a7f2:	0000      	.short	0x0000
    a7f4:	4000f500 	.word	0x4000f500
    a7f8:	20001373 	.word	0x20001373
    a7fc:	4001f504 	.word	0x4001f504
    a800:	4804      	ldr	r0, [pc, #16]	; (a814 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    a802:	2100      	movs	r1, #0
    a804:	6001      	str	r1, [r0, #0]
    a806:	6001      	str	r1, [r0, #0]
    a808:	4903      	ldr	r1, [pc, #12]	; (a818 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    a80a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    a80e:	6008      	str	r0, [r1, #0]
    a810:	4770      	bx	lr
    a812:	0000      	.short	0x0000
    a814:	4000f500 	.word	0x4000f500
    a818:	4001f508 	.word	0x4001f508

0000a81c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    a81c:	4805      	ldr	r0, [pc, #20]	; (a834 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    a81e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a822:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    a826:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a82a:	4903      	ldr	r1, [pc, #12]	; (a838 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    a82c:	2000      	movs	r0, #0
    a82e:	6008      	str	r0, [r1, #0]
    a830:	4770      	bx	lr
    a832:	0000      	.short	0x0000
    a834:	40001000 	.word	0x40001000
    a838:	40001560 	.word	0x40001560

0000a83c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    a83c:	4904      	ldr	r1, [pc, #16]	; (a850 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    a83e:	6008      	str	r0, [r1, #0]
    a840:	4804      	ldr	r0, [pc, #16]	; (a854 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    a842:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    a846:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    a84a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    a84e:	4770      	bx	lr
    a850:	40001560 	.word	0x40001560
    a854:	40001000 	.word	0x40001000

0000a858 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I>:
    a858:	4801      	ldr	r0, [pc, #4]	; (a860 <sym_BNUQ5CI25DXEDLVOULTXPCKLL6P4CJJYO4G535I+0x8>)
    a85a:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    a85e:	4770      	bx	lr
    a860:	20000e2c 	.word	0x20000e2c

0000a864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a866:	4c1e      	ldr	r4, [pc, #120]	; (a8e0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    a868:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    a86c:	2710      	movs	r7, #16
    a86e:	f3c0 1600 	ubfx	r6, r0, #4, #1
    a872:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    a876:	2002      	movs	r0, #2
    a878:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    a87c:	4819      	ldr	r0, [pc, #100]	; (a8e4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    a87e:	2500      	movs	r5, #0
    a880:	491a      	ldr	r1, [pc, #104]	; (a8ec <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    a882:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    a886:	4818      	ldr	r0, [pc, #96]	; (a8e8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    a888:	6008      	str	r0, [r1, #0]
    a88a:	4819      	ldr	r0, [pc, #100]	; (a8f0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    a88c:	6800      	ldr	r0, [r0, #0]
    a88e:	b1b0      	cbz	r0, a8be <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    a890:	20ff      	movs	r0, #255	; 0xff
    a892:	f88d 0000 	strb.w	r0, [sp]
    a896:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a89a:	2001      	movs	r0, #1
    a89c:	6120      	str	r0, [r4, #16]
    a89e:	e004      	b.n	a8aa <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    a8a0:	f89d 0000 	ldrb.w	r0, [sp]
    a8a4:	1e40      	subs	r0, r0, #1
    a8a6:	f88d 0000 	strb.w	r0, [sp]
    a8aa:	f89d 0000 	ldrb.w	r0, [sp]
    a8ae:	b118      	cbz	r0, a8b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    a8b0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    a8b4:	2800      	cmp	r0, #0
    a8b6:	d0f3      	beq.n	a8a0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    a8b8:	f89d 0000 	ldrb.w	r0, [sp]
    a8bc:	b150      	cbz	r0, a8d4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    a8be:	f000 fcb1 	bl	b224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    a8c2:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    a8c6:	f000 fe29 	bl	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    a8ca:	2e00      	cmp	r6, #0
    a8cc:	d001      	beq.n	a8d2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    a8ce:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8d4:	f240 71a3 	movw	r1, #1955	; 0x7a3
    a8d8:	203e      	movs	r0, #62	; 0x3e
    a8da:	f7f9 f9cd 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8de:	0000      	.short	0x0000
    a8e0:	40001000 	.word	0x40001000
    a8e4:	20000e2c 	.word	0x20000e2c
    a8e8:	0c0e0000 	.word	0x0c0e0000
    a8ec:	4001f508 	.word	0x4001f508
    a8f0:	40001550 	.word	0x40001550

0000a8f4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a8f8:	4c1f      	ldr	r4, [pc, #124]	; (a978 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    a8fa:	4607      	mov	r7, r0
    a8fc:	4688      	mov	r8, r1
    a8fe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    a902:	07c1      	lsls	r1, r0, #31
    a904:	d018      	beq.n	a938 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    a906:	4a1d      	ldr	r2, [pc, #116]	; (a97c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    a908:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    a90c:	6011      	str	r1, [r2, #0]
    a90e:	4d1c      	ldr	r5, [pc, #112]	; (a980 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    a910:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    a914:	f041 0101 	orr.w	r1, r1, #1
    a918:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    a91c:	f040 0002 	orr.w	r0, r0, #2
    a920:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    a924:	4640      	mov	r0, r8
    a926:	f000 fe5d 	bl	b5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a92a:	f000 fc29 	bl	b180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a92e:	2601      	movs	r6, #1
    a930:	b13f      	cbz	r7, a942 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    a932:	2f01      	cmp	r7, #1
    a934:	d00e      	beq.n	a954 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    a936:	e016      	b.n	a966 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a938:	f240 612d 	movw	r1, #1581	; 0x62d
    a93c:	203e      	movs	r0, #62	; 0x3e
    a93e:	f7f9 f99b 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a942:	4640      	mov	r0, r8
    a944:	f000 fc3c 	bl	b1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    a948:	4640      	mov	r0, r8
    a94a:	f000 fbfd 	bl	b148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a94e:	7266      	strb	r6, [r4, #9]
    a950:	602e      	str	r6, [r5, #0]
    a952:	e008      	b.n	a966 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    a954:	f000 fc5c 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    a958:	f000 fdaa 	bl	b4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    a95c:	2002      	movs	r0, #2
    a95e:	7260      	strb	r0, [r4, #9]
    a960:	f000 fcd2 	bl	b308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    a964:	606e      	str	r6, [r5, #4]
    a966:	4807      	ldr	r0, [pc, #28]	; (a984 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    a968:	64c6      	str	r6, [r0, #76]	; 0x4c
    a96a:	4807      	ldr	r0, [pc, #28]	; (a988 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    a96c:	6801      	ldr	r1, [r0, #0]
    a96e:	4638      	mov	r0, r7
    a970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a974:	f004 be1a 	b.w	f5ac <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    a978:	20000e2c 	.word	0x20000e2c
    a97c:	4001f504 	.word	0x4001f504
    a980:	40001000 	.word	0x40001000
    a984:	40008000 	.word	0x40008000
    a988:	4000854c 	.word	0x4000854c

0000a98c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    a98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a990:	4d35      	ldr	r5, [pc, #212]	; (aa68 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    a992:	4606      	mov	r6, r0
    a994:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    a998:	4689      	mov	r9, r1
    a99a:	6028      	str	r0, [r5, #0]
    a99c:	4c33      	ldr	r4, [pc, #204]	; (aa6c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    a99e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    a9a2:	f040 0002 	orr.w	r0, r0, #2
    a9a6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    a9aa:	4608      	mov	r0, r1
    a9ac:	f000 fe1a 	bl	b5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    a9b0:	f000 fbe6 	bl	b180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    a9b4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; aa70 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    a9b8:	2700      	movs	r7, #0
    a9ba:	b116      	cbz	r6, a9c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    a9bc:	2e01      	cmp	r6, #1
    a9be:	d027      	beq.n	aa10 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    a9c0:	e03f      	b.n	aa42 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    a9c2:	4648      	mov	r0, r9
    a9c4:	f000 fbfc 	bl	b1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    a9c8:	79e0      	ldrb	r0, [r4, #7]
    a9ca:	2801      	cmp	r0, #1
    a9cc:	d105      	bne.n	a9da <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    a9ce:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    a9d2:	f041 0108 	orr.w	r1, r1, #8
    a9d6:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    a9da:	4648      	mov	r0, r9
    a9dc:	f000 fbb4 	bl	b148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    a9e0:	2001      	movs	r0, #1
    a9e2:	7260      	strb	r0, [r4, #9]
    a9e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    a9e6:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    a9ea:	62a0      	str	r0, [r4, #40]	; 0x28
    a9ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    a9f0:	6028      	str	r0, [r5, #0]
    a9f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    a9f6:	f1b9 0f02 	cmp.w	r9, #2
    a9fa:	d007      	beq.n	aa0c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    a9fc:	f640 0034 	movw	r0, #2100	; 0x834
    aa00:	f649 72ec 	movw	r2, #40940	; 0x9fec
    aa04:	4410      	add	r0, r2
    aa06:	fbb0 f7f1 	udiv	r7, r0, r1
    aa0a:	e01a      	b.n	aa42 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    aa0c:	4608      	mov	r0, r1
    aa0e:	e7f7      	b.n	aa00 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    aa10:	f000 fbfe 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    aa14:	f000 fd4c 	bl	b4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    aa18:	79e0      	ldrb	r0, [r4, #7]
    aa1a:	2801      	cmp	r0, #1
    aa1c:	d105      	bne.n	aa2a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    aa1e:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    aa22:	f041 0104 	orr.w	r1, r1, #4
    aa26:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    aa2a:	2002      	movs	r0, #2
    aa2c:	7260      	strb	r0, [r4, #9]
    aa2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    aa30:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    aa34:	62a0      	str	r0, [r4, #40]	; 0x28
    aa36:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    aa3a:	6028      	str	r0, [r5, #0]
    aa3c:	2729      	movs	r7, #41	; 0x29
    aa3e:	f000 fc63 	bl	b308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    aa42:	f000 fc4d 	bl	b2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    aa46:	f000 fdf5 	bl	b634 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    aa4a:	6800      	ldr	r0, [r0, #0]
    aa4c:	2801      	cmp	r0, #1
    aa4e:	d006      	beq.n	aa5e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    aa50:	2100      	movs	r1, #0
    aa52:	4630      	mov	r0, r6
    aa54:	f004 fdaa 	bl	f5ac <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    aa58:	4638      	mov	r0, r7
    aa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa5e:	f7ff ff01 	bl	a864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    aa62:	2000      	movs	r0, #0
    aa64:	e7f9      	b.n	aa5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    aa66:	0000      	.short	0x0000
    aa68:	4001f504 	.word	0x4001f504
    aa6c:	20000e2c 	.word	0x20000e2c
    aa70:	40001000 	.word	0x40001000

0000aa74 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    aa74:	4a02      	ldr	r2, [pc, #8]	; (aa80 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    aa76:	6b13      	ldr	r3, [r2, #48]	; 0x30
    aa78:	6003      	str	r3, [r0, #0]
    aa7a:	6b50      	ldr	r0, [r2, #52]	; 0x34
    aa7c:	6008      	str	r0, [r1, #0]
    aa7e:	4770      	bx	lr
    aa80:	20000e2c 	.word	0x20000e2c

0000aa84 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    aa84:	b510      	push	{r4, lr}
    aa86:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    aa88:	4901      	ldr	r1, [pc, #4]	; (aa90 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    aa8a:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    aa8e:	bd10      	pop	{r4, pc}
    aa90:	20000e1c 	.word	0x20000e1c

0000aa94 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    aa94:	490e      	ldr	r1, [pc, #56]	; (aad0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x3c>)
    aa96:	b510      	push	{r4, lr}
    aa98:	69ca      	ldr	r2, [r1, #28]
    aa9a:	4282      	cmp	r2, r0
    aa9c:	d302      	bcc.n	aaa4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    aa9e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    aaa2:	e00a      	b.n	aaba <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x26>
    aaa4:	2201      	movs	r2, #1
    aaa6:	730a      	strb	r2, [r1, #12]
    aaa8:	6108      	str	r0, [r1, #16]
    aaaa:	490a      	ldr	r1, [pc, #40]	; (aad4 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    aaac:	644a      	str	r2, [r1, #68]	; 0x44
    aaae:	4a0a      	ldr	r2, [pc, #40]	; (aad8 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    aab0:	6813      	ldr	r3, [r2, #0]
    aab2:	4283      	cmp	r3, r0
    aab4:	d304      	bcc.n	aac0 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2c>
    aab6:	f640 0129 	movw	r1, #2089	; 0x829
    aaba:	203e      	movs	r0, #62	; 0x3e
    aabc:	f7f9 f8dc 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aac0:	2300      	movs	r3, #0
    aac2:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    aac6:	6010      	str	r0, [r2, #0]
    aac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aacc:	f000 bcfe 	b.w	b4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    aad0:	20000e2c 	.word	0x20000e2c
    aad4:	40008000 	.word	0x40008000
    aad8:	40008544 	.word	0x40008544

0000aadc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    aadc:	b570      	push	{r4, r5, r6, lr}
    aade:	4c10      	ldr	r4, [pc, #64]	; (ab20 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    aae0:	4606      	mov	r6, r0
    aae2:	2002      	movs	r0, #2
    aae4:	7320      	strb	r0, [r4, #12]
    aae6:	2596      	movs	r5, #150	; 0x96
    aae8:	f000 f866 	bl	abb8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    aaec:	4602      	mov	r2, r0
    aaee:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    aaf2:	f894 1020 	ldrb.w	r1, [r4, #32]
    aaf6:	2801      	cmp	r0, #1
    aaf8:	d00d      	beq.n	ab16 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    aafa:	4628      	mov	r0, r5
    aafc:	f004 fd6e 	bl	f5dc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    ab00:	4908      	ldr	r1, [pc, #32]	; (ab24 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    ab02:	6120      	str	r0, [r4, #16]
    ab04:	2000      	movs	r0, #0
    ab06:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    ab0a:	6921      	ldr	r1, [r4, #16]
    ab0c:	69e0      	ldr	r0, [r4, #28]
    ab0e:	4408      	add	r0, r1
    ab10:	4905      	ldr	r1, [pc, #20]	; (ab28 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    ab12:	6008      	str	r0, [r1, #0]
    ab14:	bd70      	pop	{r4, r5, r6, pc}
    ab16:	4633      	mov	r3, r6
    ab18:	4628      	mov	r0, r5
    ab1a:	f004 fd7b 	bl	f614 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    ab1e:	e7ef      	b.n	ab00 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    ab20:	20000e2c 	.word	0x20000e2c
    ab24:	40008000 	.word	0x40008000
    ab28:	40008544 	.word	0x40008544

0000ab2c <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    ab2c:	b510      	push	{r4, lr}
    ab2e:	f000 fec3 	bl	b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ab32:	2800      	cmp	r0, #0
    ab34:	d006      	beq.n	ab44 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    ab36:	4804      	ldr	r0, [pc, #16]	; (ab48 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    ab38:	6801      	ldr	r1, [r0, #0]
    ab3a:	f021 0101 	bic.w	r1, r1, #1
    ab3e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    ab42:	6001      	str	r1, [r0, #0]
    ab44:	bd10      	pop	{r4, pc}
    ab46:	0000      	.short	0x0000
    ab48:	40001774 	.word	0x40001774

0000ab4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab50:	2238      	movs	r2, #56	; 0x38
    ab52:	2100      	movs	r1, #0
    ab54:	4813      	ldr	r0, [pc, #76]	; (aba4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    ab56:	f000 ff5f 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ab5a:	f000 fcdf 	bl	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    ab5e:	f000 fe64 	bl	b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    ab62:	4d11      	ldr	r5, [pc, #68]	; (aba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ab64:	4e10      	ldr	r6, [pc, #64]	; (aba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ab66:	2400      	movs	r4, #0
    ab68:	4f0f      	ldr	r7, [pc, #60]	; (aba8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    ab6a:	3508      	adds	r5, #8
    ab6c:	3610      	adds	r6, #16
    ab6e:	b928      	cbnz	r0, ab7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ab70:	f000 fe72 	bl	b858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    ab74:	b910      	cbnz	r0, ab7c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    ab76:	f000 fe79 	bl	b86c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    ab7a:	b108      	cbz	r0, ab80 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    ab7c:	2224      	movs	r2, #36	; 0x24
    ab7e:	e006      	b.n	ab8e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    ab80:	f000 feb4 	bl	b8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    ab84:	b910      	cbnz	r0, ab8c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    ab86:	f000 fea7 	bl	b8d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    ab8a:	b140      	cbz	r0, ab9e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    ab8c:	2240      	movs	r2, #64	; 0x40
    ab8e:	21ff      	movs	r1, #255	; 0xff
    ab90:	4638      	mov	r0, r7
    ab92:	f000 ff41 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ab96:	602c      	str	r4, [r5, #0]
    ab98:	6034      	str	r4, [r6, #0]
    ab9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab9e:	2238      	movs	r2, #56	; 0x38
    aba0:	e7f5      	b.n	ab8e <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    aba2:	0000      	.short	0x0000
    aba4:	20000e2c 	.word	0x20000e2c
    aba8:	40000e00 	.word	0x40000e00

0000abac <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    abac:	4801      	ldr	r0, [pc, #4]	; (abb4 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    abae:	69c0      	ldr	r0, [r0, #28]
    abb0:	4770      	bx	lr
    abb2:	0000      	.short	0x0000
    abb4:	20000e2c 	.word	0x20000e2c

0000abb8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    abb8:	4814      	ldr	r0, [pc, #80]	; (ac0c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    abba:	b510      	push	{r4, lr}
    abbc:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    abc0:	7a40      	ldrb	r0, [r0, #9]
    abc2:	b141      	cbz	r1, abd6 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    abc4:	2902      	cmp	r1, #2
    abc6:	d00b      	beq.n	abe0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    abc8:	2802      	cmp	r0, #2
    abca:	d009      	beq.n	abe0 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    abcc:	2901      	cmp	r1, #1
    abce:	d00b      	beq.n	abe8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    abd0:	2801      	cmp	r0, #1
    abd2:	d009      	beq.n	abe8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    abd4:	e015      	b.n	ac02 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    abd6:	2800      	cmp	r0, #0
    abd8:	d1f6      	bne.n	abc8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    abda:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    abde:	e00d      	b.n	abfc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    abe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    abe4:	f000 bc16 	b.w	b414 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    abe8:	4809      	ldr	r0, [pc, #36]	; (ac10 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    abea:	6800      	ldr	r0, [r0, #0]
    abec:	f000 000f 	and.w	r0, r0, #15
    abf0:	2803      	cmp	r0, #3
    abf2:	d006      	beq.n	ac02 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    abf4:	2804      	cmp	r0, #4
    abf6:	d006      	beq.n	ac06 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    abf8:	f240 11e7 	movw	r1, #487	; 0x1e7
    abfc:	203e      	movs	r0, #62	; 0x3e
    abfe:	f7f9 f83b 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac02:	2001      	movs	r0, #1
    ac04:	bd10      	pop	{r4, pc}
    ac06:	2002      	movs	r0, #2
    ac08:	bd10      	pop	{r4, pc}
    ac0a:	0000      	.short	0x0000
    ac0c:	20000e2c 	.word	0x20000e2c
    ac10:	40001510 	.word	0x40001510

0000ac14 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    ac14:	4801      	ldr	r0, [pc, #4]	; (ac1c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    ac16:	6980      	ldr	r0, [r0, #24]
    ac18:	4770      	bx	lr
    ac1a:	0000      	.short	0x0000
    ac1c:	20000e2c 	.word	0x20000e2c

0000ac20 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    ac20:	b510      	push	{r4, lr}
    ac22:	f000 fc61 	bl	b4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    ac26:	f7ff fe1d 	bl	a864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    ac2a:	f004 fc55 	bl	f4d8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    ac2e:	480f      	ldr	r0, [pc, #60]	; (ac6c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    ac30:	4a0f      	ldr	r2, [pc, #60]	; (ac70 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    ac32:	6a81      	ldr	r1, [r0, #40]	; 0x28
    ac34:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    ac38:	6011      	str	r1, [r2, #0]
    ac3a:	2400      	movs	r4, #0
    ac3c:	6284      	str	r4, [r0, #40]	; 0x28
    ac3e:	7304      	strb	r4, [r0, #12]
    ac40:	61c4      	str	r4, [r0, #28]
    ac42:	6184      	str	r4, [r0, #24]
    ac44:	f000 fc50 	bl	b4e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    ac48:	480a      	ldr	r0, [pc, #40]	; (ac74 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    ac4a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    ac4e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    ac52:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    ac56:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    ac5a:	2001      	movs	r0, #1
    ac5c:	f004 fc75 	bl	f54a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ac60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ac64:	2001      	movs	r0, #1
    ac66:	f004 bc63 	b.w	f530 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ac6a:	0000      	.short	0x0000
    ac6c:	20000e2c 	.word	0x20000e2c
    ac70:	4001f508 	.word	0x4001f508
    ac74:	40008000 	.word	0x40008000

0000ac78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac7c:	2001      	movs	r0, #1
    ac7e:	f004 fc64 	bl	f54a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    ac82:	4838      	ldr	r0, [pc, #224]	; (ad64 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ac84:	2400      	movs	r4, #0
    ac86:	6004      	str	r4, [r0, #0]
    ac88:	2601      	movs	r6, #1
    ac8a:	6006      	str	r6, [r0, #0]
    ac8c:	f000 fe04 	bl	b898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    ac90:	4d35      	ldr	r5, [pc, #212]	; (ad68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ac92:	b118      	cbz	r0, ac9c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    ac94:	6828      	ldr	r0, [r5, #0]
    ac96:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    ac9a:	6028      	str	r0, [r5, #0]
    ac9c:	f000 fdf0 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    aca0:	b128      	cbz	r0, acae <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    aca2:	6828      	ldr	r0, [r5, #0]
    aca4:	4931      	ldr	r1, [pc, #196]	; (ad6c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    aca6:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    acaa:	4308      	orrs	r0, r1
    acac:	6028      	str	r0, [r5, #0]
    acae:	f000 fe03 	bl	b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    acb2:	b138      	cbz	r0, acc4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    acb4:	482c      	ldr	r0, [pc, #176]	; (ad68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    acb6:	1d00      	adds	r0, r0, #4
    acb8:	6801      	ldr	r1, [r0, #0]
    acba:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    acbe:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    acc2:	6001      	str	r1, [r0, #0]
    acc4:	4928      	ldr	r1, [pc, #160]	; (ad68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    acc6:	482a      	ldr	r0, [pc, #168]	; (ad70 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    acc8:	313c      	adds	r1, #60	; 0x3c
    acca:	6008      	str	r0, [r1, #0]
    accc:	f7f8 fec0 	bl	3a50 <mpsl_fem_device_config_254_apply_get>
    acd0:	b140      	cbz	r0, ace4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    acd2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    acd6:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    acda:	1c41      	adds	r1, r0, #1
    acdc:	d002      	beq.n	ace4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    acde:	4922      	ldr	r1, [pc, #136]	; (ad68 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ace0:	3110      	adds	r1, #16
    ace2:	6008      	str	r0, [r1, #0]
    ace4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ace8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    acea:	1c41      	adds	r1, r0, #1
    acec:	d004      	beq.n	acf8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    acee:	4921      	ldr	r1, [pc, #132]	; (ad74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    acf0:	680a      	ldr	r2, [r1, #0]
    acf2:	f360 4217 	bfi	r2, r0, #16, #8
    acf6:	600a      	str	r2, [r1, #0]
    acf8:	491e      	ldr	r1, [pc, #120]	; (ad74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    acfa:	f240 605b 	movw	r0, #1627	; 0x65b
    acfe:	3954      	subs	r1, #84	; 0x54
    ad00:	6008      	str	r0, [r1, #0]
    ad02:	1f09      	subs	r1, r1, #4
    ad04:	f240 1003 	movw	r0, #259	; 0x103
    ad08:	6008      	str	r0, [r1, #0]
    ad0a:	1f08      	subs	r0, r1, #4
    ad0c:	6006      	str	r6, [r0, #0]
    ad0e:	2001      	movs	r0, #1
    ad10:	f000 fc68 	bl	b5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ad14:	4917      	ldr	r1, [pc, #92]	; (ad74 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ad16:	f240 1001 	movw	r0, #257	; 0x101
    ad1a:	31c4      	adds	r1, #196	; 0xc4
    ad1c:	6008      	str	r0, [r1, #0]
    ad1e:	4e16      	ldr	r6, [pc, #88]	; (ad78 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ad20:	2502      	movs	r5, #2
    ad22:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    ad26:	4916      	ldr	r1, [pc, #88]	; (ad80 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ad28:	4814      	ldr	r0, [pc, #80]	; (ad7c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ad2a:	6008      	str	r0, [r1, #0]
    ad2c:	4815      	ldr	r0, [pc, #84]	; (ad84 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    ad2e:	4f16      	ldr	r7, [pc, #88]	; (ad88 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    ad30:	f506 7600 	add.w	r6, r6, #512	; 0x200
    ad34:	8604      	strh	r4, [r0, #48]	; 0x30
    ad36:	3010      	adds	r0, #16
    ad38:	61c4      	str	r4, [r0, #28]
    ad3a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    ad3e:	703c      	strb	r4, [r7, #0]
    ad40:	2001      	movs	r0, #1
    ad42:	f004 fbf5 	bl	f530 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ad46:	2010      	movs	r0, #16
    ad48:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    ad4c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    ad50:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    ad54:	6878      	ldr	r0, [r7, #4]
    ad56:	2800      	cmp	r0, #0
    ad58:	d002      	beq.n	ad60 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    ad5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ad5e:	4700      	bx	r0
    ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ad64:	40001ffc 	.word	0x40001ffc
    ad68:	4000173c 	.word	0x4000173c
    ad6c:	80000096 	.word	0x80000096
    ad70:	8900002c 	.word	0x8900002c
    ad74:	4000158c 	.word	0x4000158c
    ad78:	40001000 	.word	0x40001000
    ad7c:	0c0e0000 	.word	0x0c0e0000
    ad80:	4001f508 	.word	0x4001f508
    ad84:	20000e1c 	.word	0x20000e1c
    ad88:	2000026c 	.word	0x2000026c

0000ad8c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    ad8c:	4901      	ldr	r1, [pc, #4]	; (ad94 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    ad8e:	7508      	strb	r0, [r1, #20]
    ad90:	4770      	bx	lr
    ad92:	0000      	.short	0x0000
    ad94:	20000e2c 	.word	0x20000e2c

0000ad98 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    ad98:	4904      	ldr	r1, [pc, #16]	; (adac <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    ad9a:	6008      	str	r0, [r1, #0]
    ad9c:	4804      	ldr	r0, [pc, #16]	; (adb0 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    ad9e:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    ada2:	f041 0101 	orr.w	r1, r1, #1
    ada6:	7001      	strb	r1, [r0, #0]
    ada8:	f000 ba62 	b.w	b270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    adac:	40001504 	.word	0x40001504
    adb0:	20000e2c 	.word	0x20000e2c

0000adb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    adb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adb8:	4e35      	ldr	r6, [pc, #212]	; (ae90 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    adba:	4607      	mov	r7, r0
    adbc:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    adc0:	468a      	mov	sl, r1
    adc2:	4614      	mov	r4, r2
    adc4:	6030      	str	r0, [r6, #0]
    adc6:	4610      	mov	r0, r2
    adc8:	f000 fc0c 	bl	b5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    adcc:	f000 f9d8 	bl	b180 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    add0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ae94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    add4:	4d30      	ldr	r5, [pc, #192]	; (ae98 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    add6:	f04f 0801 	mov.w	r8, #1
    adda:	b127      	cbz	r7, ade6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    addc:	2f01      	cmp	r7, #1
    adde:	d01d      	beq.n	ae1c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    ade0:	f240 7122 	movw	r1, #1826	; 0x722
    ade4:	e04a      	b.n	ae7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    ade6:	4620      	mov	r0, r4
    ade8:	f000 f9ea 	bl	b1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    adec:	4620      	mov	r0, r4
    adee:	f000 f9ab 	bl	b148 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    adf2:	2c02      	cmp	r4, #2
    adf4:	d00f      	beq.n	ae16 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    adf6:	f640 0034 	movw	r0, #2100	; 0x834
    adfa:	bf00      	nop
    adfc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    ae00:	4401      	add	r1, r0
    ae02:	4650      	mov	r0, sl
    ae04:	f000 fb92 	bl	b52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ae08:	4604      	mov	r4, r0
    ae0a:	4648      	mov	r0, r9
    ae0c:	f000 fb7a 	bl	b504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ae10:	f885 8009 	strb.w	r8, [r5, #9]
    ae14:	e014      	b.n	ae40 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    ae16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    ae1a:	e7ef      	b.n	adfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    ae1c:	f000 f9f8 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ae20:	f000 fb46 	bl	b4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ae24:	f000 fa70 	bl	b308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ae28:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ae2c:	4650      	mov	r0, sl
    ae2e:	f000 fb7d 	bl	b52c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ae32:	4604      	mov	r4, r0
    ae34:	4817      	ldr	r0, [pc, #92]	; (ae94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ae36:	1d00      	adds	r0, r0, #4
    ae38:	f000 fb64 	bl	b504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ae3c:	2002      	movs	r0, #2
    ae3e:	7268      	strb	r0, [r5, #9]
    ae40:	4816      	ldr	r0, [pc, #88]	; (ae9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ae42:	6004      	str	r4, [r0, #0]
    ae44:	4917      	ldr	r1, [pc, #92]	; (aea4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ae46:	4816      	ldr	r0, [pc, #88]	; (aea0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ae48:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ae4c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ae4e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ae52:	62a8      	str	r0, [r5, #40]	; 0x28
    ae54:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ae58:	6030      	str	r0, [r6, #0]
    ae5a:	2110      	movs	r1, #16
    ae5c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ae60:	1200      	asrs	r0, r0, #8
    ae62:	6030      	str	r0, [r6, #0]
    ae64:	f000 fa3c 	bl	b2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ae68:	490f      	ldr	r1, [pc, #60]	; (aea8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ae6a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ae6e:	480b      	ldr	r0, [pc, #44]	; (ae9c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ae70:	300c      	adds	r0, #12
    ae72:	6800      	ldr	r0, [r0, #0]
    ae74:	42a0      	cmp	r0, r4
    ae76:	d304      	bcc.n	ae82 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ae78:	f240 7149 	movw	r1, #1865	; 0x749
    ae7c:	203e      	movs	r0, #62	; 0x3e
    ae7e:	f7f8 fefb 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae82:	4621      	mov	r1, r4
    ae84:	4638      	mov	r0, r7
    ae86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ae8a:	f004 bb8f 	b.w	f5ac <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ae8e:	0000      	.short	0x0000
    ae90:	4001f504 	.word	0x4001f504
    ae94:	40001000 	.word	0x40001000
    ae98:	20000e2c 	.word	0x20000e2c
    ae9c:	40008540 	.word	0x40008540
    aea0:	40008140 	.word	0x40008140
    aea4:	4001f098 	.word	0x4001f098
    aea8:	40008000 	.word	0x40008000

0000aeac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    aeac:	4b0d      	ldr	r3, [pc, #52]	; (aee4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    aeae:	b510      	push	{r4, lr}
    aeb0:	71d8      	strb	r0, [r3, #7]
    aeb2:	729a      	strb	r2, [r3, #10]
    aeb4:	b151      	cbz	r1, aecc <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    aeb6:	2002      	movs	r0, #2
    aeb8:	7218      	strb	r0, [r3, #8]
    aeba:	2801      	cmp	r0, #1
    aebc:	d008      	beq.n	aed0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    aebe:	2802      	cmp	r0, #2
    aec0:	d00f      	beq.n	aee2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    aec2:	f640 112a 	movw	r1, #2346	; 0x92a
    aec6:	203e      	movs	r0, #62	; 0x3e
    aec8:	f7f8 fed6 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aecc:	2001      	movs	r0, #1
    aece:	e7f3      	b.n	aeb8 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    aed0:	7a58      	ldrb	r0, [r3, #9]
    aed2:	2802      	cmp	r0, #2
    aed4:	d105      	bne.n	aee2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    aed6:	f000 f99b 	bl	b210 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    aeda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aede:	f000 bae7 	b.w	b4b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    aee2:	bd10      	pop	{r4, pc}
    aee4:	20000e2c 	.word	0x20000e2c

0000aee8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    aee8:	4901      	ldr	r1, [pc, #4]	; (aef0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    aeea:	2000      	movs	r0, #0
    aeec:	6008      	str	r0, [r1, #0]
    aeee:	4770      	bx	lr
    aef0:	40008540 	.word	0x40008540

0000aef4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    aef4:	490a      	ldr	r1, [pc, #40]	; (af20 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    aef6:	b508      	push	{r3, lr}
    aef8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    aefc:	2a01      	cmp	r2, #1
    aefe:	d001      	beq.n	af04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    af00:	2000      	movs	r0, #0
    af02:	bd08      	pop	{r3, pc}
    af04:	4a07      	ldr	r2, [pc, #28]	; (af24 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    af06:	6812      	ldr	r2, [r2, #0]
    af08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    af0c:	4252      	negs	r2, r2
    af0e:	7002      	strb	r2, [r0, #0]
    af10:	2000      	movs	r0, #0
    af12:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    af16:	4804      	ldr	r0, [pc, #16]	; (af28 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    af18:	6800      	ldr	r0, [r0, #0]
    af1a:	9000      	str	r0, [sp, #0]
    af1c:	2001      	movs	r0, #1
    af1e:	bd08      	pop	{r3, pc}
    af20:	40001000 	.word	0x40001000
    af24:	40001548 	.word	0x40001548
    af28:	4000111c 	.word	0x4000111c

0000af2c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    af2c:	4a03      	ldr	r2, [pc, #12]	; (af3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    af2e:	0e01      	lsrs	r1, r0, #24
    af30:	6011      	str	r1, [r2, #0]
    af32:	4902      	ldr	r1, [pc, #8]	; (af3c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    af34:	0200      	lsls	r0, r0, #8
    af36:	3908      	subs	r1, #8
    af38:	6008      	str	r0, [r1, #0]
    af3a:	4770      	bx	lr
    af3c:	40001524 	.word	0x40001524

0000af40 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    af40:	6800      	ldr	r0, [r0, #0]
    af42:	4902      	ldr	r1, [pc, #8]	; (af4c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    af44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af48:	6008      	str	r0, [r1, #0]
    af4a:	4770      	bx	lr
    af4c:	4000153c 	.word	0x4000153c

0000af50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    af50:	b510      	push	{r4, lr}
    af52:	f000 fb23 	bl	b59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    af56:	4806      	ldr	r0, [pc, #24]	; (af70 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    af58:	6800      	ldr	r0, [r0, #0]
    af5a:	2803      	cmp	r0, #3
    af5c:	d001      	beq.n	af62 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    af5e:	280b      	cmp	r0, #11
    af60:	d104      	bne.n	af6c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    af62:	f240 218a 	movw	r1, #650	; 0x28a
    af66:	203e      	movs	r0, #62	; 0x3e
    af68:	f7f8 fe86 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af6c:	bd10      	pop	{r4, pc}
    af6e:	0000      	.short	0x0000
    af70:	40001550 	.word	0x40001550

0000af74 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    af74:	4901      	ldr	r1, [pc, #4]	; (af7c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    af76:	7548      	strb	r0, [r1, #21]
    af78:	4770      	bx	lr
    af7a:	0000      	.short	0x0000
    af7c:	20000e2c 	.word	0x20000e2c

0000af80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    af84:	4d51      	ldr	r5, [pc, #324]	; (b0cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    af86:	2701      	movs	r7, #1
    af88:	64ef      	str	r7, [r5, #76]	; 0x4c
    af8a:	4851      	ldr	r0, [pc, #324]	; (b0d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    af8c:	f8d0 9000 	ldr.w	r9, [r0]
    af90:	4850      	ldr	r0, [pc, #320]	; (b0d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    af92:	6800      	ldr	r0, [r0, #0]
    af94:	4c50      	ldr	r4, [pc, #320]	; (b0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    af96:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    af9a:	f000 f943 	bl	b224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    af9e:	494f      	ldr	r1, [pc, #316]	; (b0dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    afa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    afa2:	6008      	str	r0, [r1, #0]
    afa4:	f8df a138 	ldr.w	sl, [pc, #312]	; b0e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    afa8:	2600      	movs	r6, #0
    afaa:	62a6      	str	r6, [r4, #40]	; 0x28
    afac:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    afb0:	f240 121d 	movw	r2, #285	; 0x11d
    afb4:	4391      	bics	r1, r2
    afb6:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    afba:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    afbe:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    afc2:	b900      	cbnz	r0, afc6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    afc4:	64af      	str	r7, [r5, #72]	; 0x48
    afc6:	f000 f9b1 	bl	b32c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    afca:	4605      	mov	r5, r0
    afcc:	4840      	ldr	r0, [pc, #256]	; (b0d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    afce:	1f00      	subs	r0, r0, #4
    afd0:	6800      	ldr	r0, [r0, #0]
    afd2:	61e0      	str	r0, [r4, #28]
    afd4:	f7ff fdf0 	bl	abb8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    afd8:	f884 0020 	strb.w	r0, [r4, #32]
    afdc:	7a60      	ldrb	r0, [r4, #9]
    afde:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    afe2:	61a6      	str	r6, [r4, #24]
    afe4:	4e3f      	ldr	r6, [pc, #252]	; (b0e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    afe6:	07a8      	lsls	r0, r5, #30
    afe8:	d501      	bpl.n	afee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    afea:	6830      	ldr	r0, [r6, #0]
    afec:	61a0      	str	r0, [r4, #24]
    afee:	0728      	lsls	r0, r5, #28
    aff0:	d501      	bpl.n	aff6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    aff2:	6830      	ldr	r0, [r6, #0]
    aff4:	61a0      	str	r0, [r4, #24]
    aff6:	f04f 0800 	mov.w	r8, #0
    affa:	4649      	mov	r1, r9
    affc:	4628      	mov	r0, r5
    affe:	f000 fa1d 	bl	b43c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    b002:	b918      	cbnz	r0, b00c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    b004:	f8ca 7010 	str.w	r7, [sl, #16]
    b008:	f04f 0801 	mov.w	r8, #1
    b00c:	4f32      	ldr	r7, [pc, #200]	; (b0d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    b00e:	07e8      	lsls	r0, r5, #31
    b010:	f1a7 0710 	sub.w	r7, r7, #16
    b014:	d002      	beq.n	b01c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    b016:	6838      	ldr	r0, [r7, #0]
    b018:	4780      	blx	r0
    b01a:	e031      	b.n	b080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b01c:	07a8      	lsls	r0, r5, #30
    b01e:	d526      	bpl.n	b06e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    b020:	0768      	lsls	r0, r5, #29
    b022:	d41e      	bmi.n	b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b024:	f000 fc48 	bl	b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b028:	b9d8      	cbnz	r0, b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b02a:	f000 fc35 	bl	b898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b02e:	b9c0      	cbnz	r0, b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b030:	482d      	ldr	r0, [pc, #180]	; (b0e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b032:	6800      	ldr	r0, [r0, #0]
    b034:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    b038:	f3c0 6300 	ubfx	r3, r0, #24, #1
    b03c:	f000 020f 	and.w	r2, r0, #15
    b040:	f3c0 1103 	ubfx	r1, r0, #4, #4
    b044:	f3c0 2003 	ubfx	r0, r0, #8, #4
    b048:	b15b      	cbz	r3, b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b04a:	b10a      	cbz	r2, b050 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    b04c:	b101      	cbz	r1, b050 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    b04e:	b940      	cbnz	r0, b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b050:	4825      	ldr	r0, [pc, #148]	; (b0e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    b052:	1d00      	adds	r0, r0, #4
    b054:	6800      	ldr	r0, [r0, #0]
    b056:	b120      	cbz	r0, b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b058:	f1bc 0f03 	cmp.w	ip, #3
    b05c:	d201      	bcs.n	b062 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    b05e:	f045 0504 	orr.w	r5, r5, #4
    b062:	f345 0080 	sbfx	r0, r5, #2, #1
    b066:	4641      	mov	r1, r8
    b068:	1c40      	adds	r0, r0, #1
    b06a:	687a      	ldr	r2, [r7, #4]
    b06c:	e007      	b.n	b07e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    b06e:	f015 0f28 	tst.w	r5, #40	; 0x28
    b072:	d005      	beq.n	b080 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    b074:	f345 1140 	sbfx	r1, r5, #5, #1
    b078:	68ba      	ldr	r2, [r7, #8]
    b07a:	4640      	mov	r0, r8
    b07c:	1c49      	adds	r1, r1, #1
    b07e:	4790      	blx	r2
    b080:	06e8      	lsls	r0, r5, #27
    b082:	d501      	bpl.n	b088 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    b084:	68f8      	ldr	r0, [r7, #12]
    b086:	4780      	blx	r0
    b088:	7a60      	ldrb	r0, [r4, #9]
    b08a:	2802      	cmp	r0, #2
    b08c:	d11b      	bne.n	b0c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b08e:	7b20      	ldrb	r0, [r4, #12]
    b090:	2800      	cmp	r0, #0
    b092:	d018      	beq.n	b0c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    b094:	2802      	cmp	r0, #2
    b096:	d004      	beq.n	b0a2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    b098:	2801      	cmp	r0, #1
    b09a:	d006      	beq.n	b0aa <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    b09c:	f640 3103 	movw	r1, #2819	; 0xb03
    b0a0:	e009      	b.n	b0b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    b0a2:	6921      	ldr	r1, [r4, #16]
    b0a4:	69e0      	ldr	r0, [r4, #28]
    b0a6:	4408      	add	r0, r1
    b0a8:	e008      	b.n	b0bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b0aa:	69e1      	ldr	r1, [r4, #28]
    b0ac:	6920      	ldr	r0, [r4, #16]
    b0ae:	4288      	cmp	r0, r1
    b0b0:	d804      	bhi.n	b0bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    b0b2:	f640 3104 	movw	r1, #2820	; 0xb04
    b0b6:	203e      	movs	r0, #62	; 0x3e
    b0b8:	f7f8 fdde 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0bc:	6030      	str	r0, [r6, #0]
    b0be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b0c2:	f000 ba03 	b.w	b4cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    b0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b0ca:	0000      	.short	0x0000
    b0cc:	40008000 	.word	0x40008000
    b0d0:	4000854c 	.word	0x4000854c
    b0d4:	4000b504 	.word	0x4000b504
    b0d8:	20000e2c 	.word	0x20000e2c
    b0dc:	4001f508 	.word	0x4001f508
    b0e0:	40001000 	.word	0x40001000
    b0e4:	40008544 	.word	0x40008544
    b0e8:	40001450 	.word	0x40001450

0000b0ec <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    b0ec:	b570      	push	{r4, r5, r6, lr}
    b0ee:	4b11      	ldr	r3, [pc, #68]	; (b134 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    b0f0:	888c      	ldrh	r4, [r1, #4]
    b0f2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b0f6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    b0fa:	780c      	ldrb	r4, [r1, #0]
    b0fc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    b100:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    b104:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    b108:	4d0b      	ldr	r5, [pc, #44]	; (b138 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    b10a:	6829      	ldr	r1, [r5, #0]
    b10c:	f100 0608 	add.w	r6, r0, #8
    b110:	2401      	movs	r4, #1
    b112:	fa04 f306 	lsl.w	r3, r4, r6
    b116:	b132      	cbz	r2, b126 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    b118:	2a01      	cmp	r2, #1
    b11a:	d006      	beq.n	b12a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    b11c:	f240 41c1 	movw	r1, #1217	; 0x4c1
    b120:	203e      	movs	r0, #62	; 0x3e
    b122:	f7f8 fda9 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b126:	4399      	bics	r1, r3
    b128:	e000      	b.n	b12c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    b12a:	4319      	orrs	r1, r3
    b12c:	4084      	lsls	r4, r0
    b12e:	430c      	orrs	r4, r1
    b130:	602c      	str	r4, [r5, #0]
    b132:	bd70      	pop	{r4, r5, r6, pc}
    b134:	40001000 	.word	0x40001000
    b138:	40001640 	.word	0x40001640

0000b13c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    b13c:	4901      	ldr	r1, [pc, #4]	; (b144 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    b13e:	2001      	movs	r0, #1
    b140:	7008      	strb	r0, [r1, #0]
    b142:	4770      	bx	lr
    b144:	2000026c 	.word	0x2000026c
    b148:	b510      	push	{r4, lr}
    b14a:	4604      	mov	r4, r0
    b14c:	f000 fbb4 	bl	b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b150:	2800      	cmp	r0, #0
    b152:	d00e      	beq.n	b172 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    b154:	4a09      	ldr	r2, [pc, #36]	; (b17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    b156:	6811      	ldr	r1, [r2, #0]
    b158:	0650      	lsls	r0, r2, #25
    b15a:	2c02      	cmp	r4, #2
    b15c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    b160:	d008      	beq.n	b174 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    b162:	f3c0 2006 	ubfx	r0, r0, #8, #7
    b166:	bf00      	nop
    b168:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    b16c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    b170:	6010      	str	r0, [r2, #0]
    b172:	bd10      	pop	{r4, pc}
    b174:	f3c0 6006 	ubfx	r0, r0, #24, #7
    b178:	e7f6      	b.n	b168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    b17a:	0000      	.short	0x0000
    b17c:	40001588 	.word	0x40001588
    b180:	480d      	ldr	r0, [pc, #52]	; (b1b8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    b182:	7d40      	ldrb	r0, [r0, #21]
    b184:	2825      	cmp	r0, #37	; 0x25
    b186:	d007      	beq.n	b198 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    b188:	2826      	cmp	r0, #38	; 0x26
    b18a:	d007      	beq.n	b19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    b18c:	2827      	cmp	r0, #39	; 0x27
    b18e:	d007      	beq.n	b1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    b190:	280a      	cmp	r0, #10
    b192:	d807      	bhi.n	b1a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    b194:	2204      	movs	r2, #4
    b196:	e006      	b.n	b1a6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    b198:	2102      	movs	r1, #2
    b19a:	e007      	b.n	b1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    b19c:	211a      	movs	r1, #26
    b19e:	e005      	b.n	b1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    b1a0:	2150      	movs	r1, #80	; 0x50
    b1a2:	e003      	b.n	b1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    b1a4:	2206      	movs	r2, #6
    b1a6:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    b1aa:	b2c9      	uxtb	r1, r1
    b1ac:	4a03      	ldr	r2, [pc, #12]	; (b1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    b1ae:	6011      	str	r1, [r2, #0]
    b1b0:	4902      	ldr	r1, [pc, #8]	; (b1bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    b1b2:	314c      	adds	r1, #76	; 0x4c
    b1b4:	6008      	str	r0, [r1, #0]
    b1b6:	4770      	bx	lr
    b1b8:	20000e2c 	.word	0x20000e2c
    b1bc:	40001508 	.word	0x40001508
    b1c0:	4912      	ldr	r1, [pc, #72]	; (b20c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    b1c2:	b508      	push	{r3, lr}
    b1c4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    b1c8:	7d49      	ldrb	r1, [r1, #21]
    b1ca:	2801      	cmp	r0, #1
    b1cc:	d00a      	beq.n	b1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    b1ce:	2802      	cmp	r0, #2
    b1d0:	d00a      	beq.n	b1e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    b1d2:	2804      	cmp	r0, #4
    b1d4:	d00a      	beq.n	b1ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    b1d6:	2808      	cmp	r0, #8
    b1d8:	d00a      	beq.n	b1f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    b1da:	f240 31da 	movw	r1, #986	; 0x3da
    b1de:	2006      	movs	r0, #6
    b1e0:	f7f8 fd4a 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1e4:	2000      	movs	r0, #0
    b1e6:	e004      	b.n	b1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    b1e8:	2001      	movs	r0, #1
    b1ea:	e002      	b.n	b1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    b1ec:	2003      	movs	r0, #3
    b1ee:	e000      	b.n	b1f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    b1f0:	2002      	movs	r0, #2
    b1f2:	466b      	mov	r3, sp
    b1f4:	f7f5 f8fe 	bl	3f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    b1f8:	b118      	cbz	r0, b202 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    b1fa:	f240 41f3 	movw	r1, #1267	; 0x4f3
    b1fe:	203e      	movs	r0, #62	; 0x3e
    b200:	e7ee      	b.n	b1e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b202:	f99d 0000 	ldrsb.w	r0, [sp]
    b206:	f000 f9e7 	bl	b5d8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    b20a:	bd08      	pop	{r3, pc}
    b20c:	20000e2c 	.word	0x20000e2c
    b210:	4803      	ldr	r0, [pc, #12]	; (b220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    b212:	7a01      	ldrb	r1, [r0, #8]
    b214:	2901      	cmp	r1, #1
    b216:	d102      	bne.n	b21e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    b218:	7a80      	ldrb	r0, [r0, #10]
    b21a:	f7ff bfd1 	b.w	b1c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    b21e:	4770      	bx	lr
    b220:	20000e2c 	.word	0x20000e2c
    b224:	4805      	ldr	r0, [pc, #20]	; (b23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    b226:	7a40      	ldrb	r0, [r0, #9]
    b228:	2801      	cmp	r0, #1
    b22a:	d003      	beq.n	b234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    b22c:	2802      	cmp	r0, #2
    b22e:	d103      	bne.n	b238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    b230:	f004 b93a 	b.w	f4a8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    b234:	f004 b944 	b.w	f4c0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    b238:	4770      	bx	lr
    b23a:	0000      	.short	0x0000
    b23c:	20000e2c 	.word	0x20000e2c
    b240:	4809      	ldr	r0, [pc, #36]	; (b268 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    b242:	b508      	push	{r3, lr}
    b244:	2100      	movs	r1, #0
    b246:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b24a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    b24e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    b252:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b256:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    b25a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    b25e:	4803      	ldr	r0, [pc, #12]	; (b26c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    b260:	6800      	ldr	r0, [r0, #0]
    b262:	9000      	str	r0, [sp, #0]
    b264:	bd08      	pop	{r3, pc}
    b266:	0000      	.short	0x0000
    b268:	40001000 	.word	0x40001000
    b26c:	40001118 	.word	0x40001118
    b270:	4816      	ldr	r0, [pc, #88]	; (b2cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    b272:	b510      	push	{r4, lr}
    b274:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    b278:	07c1      	lsls	r1, r0, #31
    b27a:	d026      	beq.n	b2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b27c:	0781      	lsls	r1, r0, #30
    b27e:	d513      	bpl.n	b2a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    b280:	4813      	ldr	r0, [pc, #76]	; (b2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    b282:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b286:	f041 0101 	orr.w	r1, r1, #1
    b28a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b28e:	4811      	ldr	r0, [pc, #68]	; (b2d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    b290:	6800      	ldr	r0, [r0, #0]
    b292:	280b      	cmp	r0, #11
    b294:	d005      	beq.n	b2a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    b296:	280a      	cmp	r0, #10
    b298:	d003      	beq.n	b2a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    b29a:	2803      	cmp	r0, #3
    b29c:	d001      	beq.n	b2a2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    b29e:	2802      	cmp	r0, #2
    b2a0:	d113      	bne.n	b2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b2a2:	f240 5123 	movw	r1, #1315	; 0x523
    b2a6:	e00d      	b.n	b2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    b2a8:	0740      	lsls	r0, r0, #29
    b2aa:	d50e      	bpl.n	b2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b2ac:	4808      	ldr	r0, [pc, #32]	; (b2d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    b2ae:	490a      	ldr	r1, [pc, #40]	; (b2d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    b2b0:	3008      	adds	r0, #8
    b2b2:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b2b6:	4809      	ldr	r0, [pc, #36]	; (b2dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    b2b8:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    b2bc:	2801      	cmp	r0, #1
    b2be:	d104      	bne.n	b2ca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    b2c0:	f240 512a 	movw	r1, #1322	; 0x52a
    b2c4:	203e      	movs	r0, #62	; 0x3e
    b2c6:	f7f8 fcd7 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2ca:	bd10      	pop	{r4, pc}
    b2cc:	20000e2c 	.word	0x20000e2c
    b2d0:	40001000 	.word	0x40001000
    b2d4:	40001550 	.word	0x40001550
    b2d8:	4001f098 	.word	0x4001f098
    b2dc:	40008000 	.word	0x40008000
    b2e0:	4808      	ldr	r0, [pc, #32]	; (b304 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    b2e2:	4601      	mov	r1, r0
    b2e4:	79c2      	ldrb	r2, [r0, #7]
    b2e6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    b2ea:	b112      	cbz	r2, b2f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    b2ec:	2a01      	cmp	r2, #1
    b2ee:	d003      	beq.n	b2f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b2f0:	e006      	b.n	b300 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    b2f2:	f041 0102 	orr.w	r1, r1, #2
    b2f6:	e001      	b.n	b2fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    b2f8:	f041 0104 	orr.w	r1, r1, #4
    b2fc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    b300:	f7ff bfb6 	b.w	b270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    b304:	20000e2c 	.word	0x20000e2c
    b308:	b510      	push	{r4, lr}
    b30a:	f000 fad5 	bl	b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    b30e:	2800      	cmp	r0, #0
    b310:	d108      	bne.n	b324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b312:	f000 fac1 	bl	b898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b316:	2800      	cmp	r0, #0
    b318:	d104      	bne.n	b324 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    b31a:	4803      	ldr	r0, [pc, #12]	; (b328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    b31c:	6801      	ldr	r1, [r0, #0]
    b31e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    b322:	6001      	str	r1, [r0, #0]
    b324:	bd10      	pop	{r4, pc}
    b326:	0000      	.short	0x0000
    b328:	40001568 	.word	0x40001568
    b32c:	b538      	push	{r3, r4, r5, lr}
    b32e:	4d32      	ldr	r5, [pc, #200]	; (b3f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    b330:	2400      	movs	r4, #0
    b332:	7b28      	ldrb	r0, [r5, #12]
    b334:	b120      	cbz	r0, b340 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    b336:	4831      	ldr	r0, [pc, #196]	; (b3fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    b338:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    b33c:	2801      	cmp	r0, #1
    b33e:	d007      	beq.n	b350 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    b340:	2200      	movs	r2, #0
    b342:	7a69      	ldrb	r1, [r5, #9]
    b344:	482e      	ldr	r0, [pc, #184]	; (b400 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    b346:	2901      	cmp	r1, #1
    b348:	d004      	beq.n	b354 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    b34a:	2902      	cmp	r1, #2
    b34c:	d00a      	beq.n	b364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    b34e:	e019      	b.n	b384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b350:	2201      	movs	r2, #1
    b352:	e7f6      	b.n	b342 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    b354:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b358:	2901      	cmp	r1, #1
    b35a:	d001      	beq.n	b360 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    b35c:	2400      	movs	r4, #0
    b35e:	e011      	b.n	b384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b360:	2408      	movs	r4, #8
    b362:	e00f      	b.n	b384 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    b364:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    b368:	2901      	cmp	r1, #1
    b36a:	d006      	beq.n	b37a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    b36c:	2100      	movs	r1, #0
    b36e:	4b25      	ldr	r3, [pc, #148]	; (b404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    b370:	681b      	ldr	r3, [r3, #0]
    b372:	2b01      	cmp	r3, #1
    b374:	d003      	beq.n	b37e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    b376:	2404      	movs	r4, #4
    b378:	e002      	b.n	b380 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    b37a:	2102      	movs	r1, #2
    b37c:	e7f7      	b.n	b36e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    b37e:	2400      	movs	r4, #0
    b380:	430c      	orrs	r4, r1
    b382:	4314      	orrs	r4, r2
    b384:	f014 0f0b 	tst.w	r4, #11
    b388:	d105      	bne.n	b396 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    b38a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    b38e:	2901      	cmp	r1, #1
    b390:	d029      	beq.n	b3e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    b392:	2100      	movs	r1, #0
    b394:	430c      	orrs	r4, r1
    b396:	491c      	ldr	r1, [pc, #112]	; (b408 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    b398:	7809      	ldrb	r1, [r1, #0]
    b39a:	b1d1      	cbz	r1, b3d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    b39c:	491b      	ldr	r1, [pc, #108]	; (b40c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    b39e:	6809      	ldr	r1, [r1, #0]
    b3a0:	f011 0fff 	tst.w	r1, #255	; 0xff
    b3a4:	d003      	beq.n	b3ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    b3a6:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    b3aa:	2a01      	cmp	r2, #1
    b3ac:	d000      	beq.n	b3b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    b3ae:	2200      	movs	r2, #0
    b3b0:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    b3b4:	f011 0fff 	tst.w	r1, #255	; 0xff
    b3b8:	d003      	beq.n	b3c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    b3ba:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    b3be:	2801      	cmp	r0, #1
    b3c0:	d000      	beq.n	b3c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    b3c2:	2000      	movs	r0, #0
    b3c4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    b3c8:	480e      	ldr	r0, [pc, #56]	; (b404 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    b3ca:	3010      	adds	r0, #16
    b3cc:	6800      	ldr	r0, [r0, #0]
    b3ce:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    b3d2:	f7ff ff35 	bl	b240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    b3d6:	06e0      	lsls	r0, r4, #27
    b3d8:	d509      	bpl.n	b3ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    b3da:	0720      	lsls	r0, r4, #28
    b3dc:	d407      	bmi.n	b3ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    b3de:	7a68      	ldrb	r0, [r5, #9]
    b3e0:	2801      	cmp	r0, #1
    b3e2:	d002      	beq.n	b3ea <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    b3e4:	e003      	b.n	b3ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    b3e6:	2110      	movs	r1, #16
    b3e8:	e7d4      	b.n	b394 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    b3ea:	f044 0420 	orr.w	r4, r4, #32
    b3ee:	4808      	ldr	r0, [pc, #32]	; (b410 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    b3f0:	6800      	ldr	r0, [r0, #0]
    b3f2:	9000      	str	r0, [sp, #0]
    b3f4:	4620      	mov	r0, r4
    b3f6:	bd38      	pop	{r3, r4, r5, pc}
    b3f8:	20000e2c 	.word	0x20000e2c
    b3fc:	40008000 	.word	0x40008000
    b400:	40001000 	.word	0x40001000
    b404:	40001400 	.word	0x40001400
    b408:	2000026c 	.word	0x2000026c
    b40c:	40001640 	.word	0x40001640
    b410:	40008144 	.word	0x40008144
    b414:	4808      	ldr	r0, [pc, #32]	; (b438 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    b416:	b510      	push	{r4, lr}
    b418:	6800      	ldr	r0, [r0, #0]
    b41a:	f000 000f 	and.w	r0, r0, #15
    b41e:	2803      	cmp	r0, #3
    b420:	d006      	beq.n	b430 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b422:	2804      	cmp	r0, #4
    b424:	d006      	beq.n	b434 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    b426:	f240 2112 	movw	r1, #530	; 0x212
    b42a:	203e      	movs	r0, #62	; 0x3e
    b42c:	f7f8 fc24 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b430:	2001      	movs	r0, #1
    b432:	bd10      	pop	{r4, pc}
    b434:	2002      	movs	r0, #2
    b436:	bd10      	pop	{r4, pc}
    b438:	40001510 	.word	0x40001510
    b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b440:	4c19      	ldr	r4, [pc, #100]	; (b4a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    b442:	460d      	mov	r5, r1
    b444:	7a21      	ldrb	r1, [r4, #8]
    b446:	b129      	cbz	r1, b454 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    b448:	f010 0f11 	tst.w	r0, #17
    b44c:	d00b      	beq.n	b466 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    b44e:	f7ff fa09 	bl	a864 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b452:	e027      	b.n	b4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    b454:	4915      	ldr	r1, [pc, #84]	; (b4ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    b456:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b45a:	6008      	str	r0, [r1, #0]
    b45c:	f000 f85e 	bl	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b460:	2000      	movs	r0, #0
    b462:	7320      	strb	r0, [r4, #12]
    b464:	e01e      	b.n	b4a4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    b466:	2901      	cmp	r1, #1
    b468:	d001      	beq.n	b46e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    b46a:	2601      	movs	r6, #1
    b46c:	e000      	b.n	b470 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    b46e:	2600      	movs	r6, #0
    b470:	79e0      	ldrb	r0, [r4, #7]
    b472:	2801      	cmp	r0, #1
    b474:	d00e      	beq.n	b494 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    b476:	2700      	movs	r7, #0
    b478:	f000 f850 	bl	b51c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    b47c:	2196      	movs	r1, #150	; 0x96
    b47e:	4630      	mov	r0, r6
    b480:	f000 f862 	bl	b548 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    b484:	4601      	mov	r1, r0
    b486:	b14f      	cbz	r7, b49c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    b488:	353b      	adds	r5, #59	; 0x3b
    b48a:	428d      	cmp	r5, r1
    b48c:	d904      	bls.n	b498 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    b48e:	2000      	movs	r0, #0
    b490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b494:	2701      	movs	r7, #1
    b496:	e7ef      	b.n	b478 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    b498:	2001      	movs	r0, #1
    b49a:	71e0      	strb	r0, [r4, #7]
    b49c:	7aa2      	ldrb	r2, [r4, #10]
    b49e:	4630      	mov	r0, r6
    b4a0:	f7ff fc88 	bl	adb4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    b4a4:	2001      	movs	r0, #1
    b4a6:	e7f3      	b.n	b490 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    b4a8:	20000e2c 	.word	0x20000e2c
    b4ac:	4001f508 	.word	0x4001f508
    b4b0:	4805      	ldr	r0, [pc, #20]	; (b4c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    b4b2:	2100      	movs	r1, #0
    b4b4:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    b4b8:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b4bc:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    b4c0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	40001000 	.word	0x40001000
    b4cc:	4804      	ldr	r0, [pc, #16]	; (b4e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    b4ce:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b4d0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b4d4:	6281      	str	r1, [r0, #40]	; 0x28
    b4d6:	4903      	ldr	r1, [pc, #12]	; (b4e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    b4d8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    b4dc:	6008      	str	r0, [r1, #0]
    b4de:	4770      	bx	lr
    b4e0:	20000e2c 	.word	0x20000e2c
    b4e4:	4001f504 	.word	0x4001f504
    b4e8:	4905      	ldr	r1, [pc, #20]	; (b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b4ea:	2000      	movs	r0, #0
    b4ec:	6008      	str	r0, [r1, #0]
    b4ee:	1f09      	subs	r1, r1, #4
    b4f0:	6008      	str	r0, [r1, #0]
    b4f2:	1f09      	subs	r1, r1, #4
    b4f4:	6008      	str	r0, [r1, #0]
    b4f6:	4902      	ldr	r1, [pc, #8]	; (b500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    b4f8:	1d09      	adds	r1, r1, #4
    b4fa:	6008      	str	r0, [r1, #0]
    b4fc:	4770      	bx	lr
    b4fe:	0000      	.short	0x0000
    b500:	40008548 	.word	0x40008548
    b504:	4903      	ldr	r1, [pc, #12]	; (b514 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    b506:	79c9      	ldrb	r1, [r1, #7]
    b508:	2900      	cmp	r1, #0
    b50a:	d102      	bne.n	b512 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    b50c:	4902      	ldr	r1, [pc, #8]	; (b518 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    b50e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    b512:	4770      	bx	lr
    b514:	20000e2c 	.word	0x20000e2c
    b518:	4001f098 	.word	0x4001f098
    b51c:	4802      	ldr	r0, [pc, #8]	; (b528 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    b51e:	2100      	movs	r1, #0
    b520:	71c1      	strb	r1, [r0, #7]
    b522:	7201      	strb	r1, [r0, #8]
    b524:	7241      	strb	r1, [r0, #9]
    b526:	4770      	bx	lr
    b528:	20000e2c 	.word	0x20000e2c
    b52c:	4a05      	ldr	r2, [pc, #20]	; (b544 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    b52e:	79d2      	ldrb	r2, [r2, #7]
    b530:	2a01      	cmp	r2, #1
    b532:	d006      	beq.n	b542 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    b534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b538:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    b53c:	fbb1 f1f2 	udiv	r1, r1, r2
    b540:	1a40      	subs	r0, r0, r1
    b542:	4770      	bx	lr
    b544:	20000e2c 	.word	0x20000e2c
    b548:	b570      	push	{r4, r5, r6, lr}
    b54a:	4c13      	ldr	r4, [pc, #76]	; (b598 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    b54c:	4603      	mov	r3, r0
    b54e:	460d      	mov	r5, r1
    b550:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    b554:	2000      	movs	r0, #0
    b556:	b15a      	cbz	r2, b570 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    b558:	4621      	mov	r1, r4
    b55a:	f891 1020 	ldrb.w	r1, [r1, #32]
    b55e:	b163      	cbz	r3, b57a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    b560:	2b01      	cmp	r3, #1
    b562:	d111      	bne.n	b588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    b564:	2a01      	cmp	r2, #1
    b566:	4628      	mov	r0, r5
    b568:	d012      	beq.n	b590 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    b56a:	f004 f877 	bl	f65c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    b56e:	e009      	b.n	b584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    b570:	f240 7166 	movw	r1, #1894	; 0x766
    b574:	203e      	movs	r0, #62	; 0x3e
    b576:	f7f8 fb7f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b57a:	2a01      	cmp	r2, #1
    b57c:	4628      	mov	r0, r5
    b57e:	d004      	beq.n	b58a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    b580:	f004 f87a 	bl	f678 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    b584:	69e1      	ldr	r1, [r4, #28]
    b586:	4408      	add	r0, r1
    b588:	bd70      	pop	{r4, r5, r6, pc}
    b58a:	f004 f88f 	bl	f6ac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    b58e:	e7f9      	b.n	b584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    b590:	f004 f87d 	bl	f68e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    b594:	e7f6      	b.n	b584 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    b596:	0000      	.short	0x0000
    b598:	20000e2c 	.word	0x20000e2c
    b59c:	b510      	push	{r4, lr}
    b59e:	2200      	movs	r2, #0
    b5a0:	2901      	cmp	r1, #1
    b5a2:	d008      	beq.n	b5b6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    b5a4:	2902      	cmp	r1, #2
    b5a6:	d004      	beq.n	b5b2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    b5a8:	f240 2169 	movw	r1, #617	; 0x269
    b5ac:	203e      	movs	r0, #62	; 0x3e
    b5ae:	f7f8 fb63 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    b5b6:	4905      	ldr	r1, [pc, #20]	; (b5cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    b5b8:	430a      	orrs	r2, r1
    b5ba:	4905      	ldr	r1, [pc, #20]	; (b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    b5bc:	600a      	str	r2, [r1, #0]
    b5be:	4905      	ldr	r1, [pc, #20]	; (b5d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    b5c0:	4308      	orrs	r0, r1
    b5c2:	4903      	ldr	r1, [pc, #12]	; (b5d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    b5c4:	1d09      	adds	r1, r1, #4
    b5c6:	6008      	str	r0, [r1, #0]
    b5c8:	bd10      	pop	{r4, pc}
    b5ca:	0000      	.short	0x0000
    b5cc:	00100108 	.word	0x00100108
    b5d0:	40001514 	.word	0x40001514
    b5d4:	02030000 	.word	0x02030000

0000b5d8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    b5d8:	4901      	ldr	r1, [pc, #4]	; (b5e0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    b5da:	b2c0      	uxtb	r0, r0
    b5dc:	6008      	str	r0, [r1, #0]
    b5de:	4770      	bx	lr
    b5e0:	4000150c 	.word	0x4000150c

0000b5e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    b5e4:	b510      	push	{r4, lr}
    b5e6:	4907      	ldr	r1, [pc, #28]	; (b604 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    b5e8:	2801      	cmp	r0, #1
    b5ea:	d005      	beq.n	b5f8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    b5ec:	2802      	cmp	r0, #2
    b5ee:	d005      	beq.n	b5fc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    b5f0:	218b      	movs	r1, #139	; 0x8b
    b5f2:	203f      	movs	r0, #63	; 0x3f
    b5f4:	f7f8 fb40 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5f8:	2003      	movs	r0, #3
    b5fa:	e000      	b.n	b5fe <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    b5fc:	2004      	movs	r0, #4
    b5fe:	6008      	str	r0, [r1, #0]
    b600:	bd10      	pop	{r4, pc}
    b602:	0000      	.short	0x0000
    b604:	40001510 	.word	0x40001510

0000b608 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    b608:	4770      	bx	lr
    b60a:	2100      	movs	r1, #0
    b60c:	7081      	strb	r1, [r0, #2]
    b60e:	7001      	strb	r1, [r0, #0]
    b610:	7041      	strb	r1, [r0, #1]
    b612:	4770      	bx	lr

0000b614 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    b614:	b570      	push	{r4, r5, r6, lr}
    b616:	f7f4 ff07 	bl	428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    b61a:	4605      	mov	r5, r0
    b61c:	2400      	movs	r4, #0
    b61e:	e006      	b.n	b62e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    b620:	4620      	mov	r0, r4
    b622:	f7f4 ff07 	bl	434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    b626:	f7ff fff0 	bl	b60a <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    b62a:	1c64      	adds	r4, r4, #1
    b62c:	b2e4      	uxtb	r4, r4
    b62e:	42ac      	cmp	r4, r5
    b630:	d3f6      	bcc.n	b620 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    b632:	bd70      	pop	{r4, r5, r6, pc}

0000b634 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    b634:	2000      	movs	r0, #0
    b636:	f7f7 bcb5 	b.w	2fa4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    b63a:	b510      	push	{r4, lr}
    b63c:	f7f7 f99e 	bl	297c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    b640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b644:	f000 b800 	b.w	b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000b648 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    b648:	0a41      	lsrs	r1, r0, #9
    b64a:	f643 5209 	movw	r2, #15625	; 0x3d09
    b64e:	4351      	muls	r1, r2
    b650:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b654:	fb10 f002 	smulbb	r0, r0, r2
    b658:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b65c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    b660:	4770      	bx	lr

0000b662 <MPSL_IRQ_RADIO_Handler>:
    b662:	f7f5 bf97 	b.w	1594 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    b666:	2800      	cmp	r0, #0
    b668:	db09      	blt.n	b67e <MPSL_IRQ_RADIO_Handler+0x1c>
    b66a:	f000 021f 	and.w	r2, r0, #31
    b66e:	2101      	movs	r1, #1
    b670:	4091      	lsls	r1, r2
    b672:	0940      	lsrs	r0, r0, #5
    b674:	0080      	lsls	r0, r0, #2
    b676:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b67a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b67e:	4770      	bx	lr
    b680:	2800      	cmp	r0, #0
    b682:	db0d      	blt.n	b6a0 <MPSL_IRQ_RADIO_Handler+0x3e>
    b684:	f000 021f 	and.w	r2, r0, #31
    b688:	2101      	movs	r1, #1
    b68a:	4091      	lsls	r1, r2
    b68c:	0940      	lsrs	r0, r0, #5
    b68e:	0080      	lsls	r0, r0, #2
    b690:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b694:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b698:	f3bf 8f4f 	dsb	sy
    b69c:	f3bf 8f6f 	isb	sy
    b6a0:	4770      	bx	lr

0000b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    b6a2:	b570      	push	{r4, r5, r6, lr}
    b6a4:	4602      	mov	r2, r0
    b6a6:	2000      	movs	r0, #0
    b6a8:	2900      	cmp	r1, #0
    b6aa:	d01d      	beq.n	b6e8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    b6ac:	fba2 0101 	umull	r0, r1, r2, r1
    b6b0:	0a40      	lsrs	r0, r0, #9
    b6b2:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    b6b6:	0a49      	lsrs	r1, r1, #9
    b6b8:	1c40      	adds	r0, r0, #1
    b6ba:	f141 0100 	adc.w	r1, r1, #0
    b6be:	f240 72a1 	movw	r2, #1953	; 0x7a1
    b6c2:	1883      	adds	r3, r0, r2
    b6c4:	f141 0100 	adc.w	r1, r1, #0
    b6c8:	1c5b      	adds	r3, r3, #1
    b6ca:	f141 0400 	adc.w	r4, r1, #0
    b6ce:	2100      	movs	r1, #0
    b6d0:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    b6d4:	41a1      	sbcs	r1, r4
    b6d6:	d203      	bcs.n	b6e0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    b6d8:	2171      	movs	r1, #113	; 0x71
    b6da:	206d      	movs	r0, #109	; 0x6d
    b6dc:	f7f8 f824 	bl	3728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b6e0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    b6e4:	fbb0 f0f2 	udiv	r0, r0, r2
    b6e8:	bd70      	pop	{r4, r5, r6, pc}
    b6ea:	5840      	ldr	r0, [r0, r1]
    b6ec:	2800      	cmp	r0, #0
    b6ee:	d000      	beq.n	b6f2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    b6f0:	2001      	movs	r0, #1
    b6f2:	4770      	bx	lr
    b6f4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    b6f8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    b6fc:	f002 0201 	and.w	r2, r2, #1
    b700:	03c0      	lsls	r0, r0, #15
    b702:	d503      	bpl.n	b70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b704:	428a      	cmp	r2, r1
    b706:	d101      	bne.n	b70c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    b708:	2001      	movs	r0, #1
    b70a:	4770      	bx	lr
    b70c:	2000      	movs	r0, #0
    b70e:	4770      	bx	lr

0000b710 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    b710:	b510      	push	{r4, lr}
    b712:	2101      	movs	r1, #1
    b714:	0788      	lsls	r0, r1, #30
    b716:	f7f7 ffc5 	bl	36a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b71a:	2800      	cmp	r0, #0
    b71c:	d000      	beq.n	b720 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    b71e:	2001      	movs	r0, #1
    b720:	bd10      	pop	{r4, pc}

0000b722 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    b722:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b726:	2101      	movs	r1, #1
    b728:	6001      	str	r1, [r0, #0]
    b72a:	4770      	bx	lr

0000b72c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    b72c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b730:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    b734:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    b738:	f002 0203 	and.w	r2, r2, #3
    b73c:	03c9      	lsls	r1, r1, #15
    b73e:	d503      	bpl.n	b748 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b740:	4282      	cmp	r2, r0
    b742:	d101      	bne.n	b748 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    b744:	2001      	movs	r0, #1
    b746:	4770      	bx	lr
    b748:	2000      	movs	r0, #0
    b74a:	4770      	bx	lr

0000b74c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    b74c:	b510      	push	{r4, lr}
    b74e:	2100      	movs	r1, #0
    b750:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b754:	f7f7 ffa6 	bl	36a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    b758:	2800      	cmp	r0, #0
    b75a:	d000      	beq.n	b75e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    b75c:	2001      	movs	r0, #1
    b75e:	bd10      	pop	{r4, pc}
    b760:	2800      	cmp	r0, #0
    b762:	db09      	blt.n	b778 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    b764:	f000 021f 	and.w	r2, r0, #31
    b768:	2101      	movs	r1, #1
    b76a:	4091      	lsls	r1, r2
    b76c:	0940      	lsrs	r0, r0, #5
    b76e:	0080      	lsls	r0, r0, #2
    b770:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b774:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b778:	4770      	bx	lr
    b77a:	2800      	cmp	r0, #0
    b77c:	db0d      	blt.n	b79a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    b77e:	f000 021f 	and.w	r2, r0, #31
    b782:	2101      	movs	r1, #1
    b784:	4091      	lsls	r1, r2
    b786:	0940      	lsrs	r0, r0, #5
    b788:	0080      	lsls	r0, r0, #2
    b78a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b78e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    b792:	f3bf 8f4f 	dsb	sy
    b796:	f3bf 8f6f 	isb	sy
    b79a:	4770      	bx	lr
    b79c:	00021000 	.word	0x00021000
    b7a0:	000000fa 	.word	0x000000fa
    b7a4:	71a053fe 	.word	0x71a053fe
    b7a8:	1095eb1b 	.word	0x1095eb1b
    b7ac:	c946cf33 	.word	0xc946cf33
    b7b0:	5ebe9563 	.word	0x5ebe9563
    b7b4:	736e3829 	.word	0x736e3829
    b7b8:	2800      	cmp	r0, #0
    b7ba:	db09      	blt.n	b7d0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    b7bc:	f000 021f 	and.w	r2, r0, #31
    b7c0:	2101      	movs	r1, #1
    b7c2:	4091      	lsls	r1, r2
    b7c4:	0940      	lsrs	r0, r0, #5
    b7c6:	0080      	lsls	r0, r0, #2
    b7c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b7cc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b7d0:	4770      	bx	lr

0000b7d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    b7d2:	f3ef 8110 	mrs	r1, PRIMASK
    b7d6:	b672      	cpsid	i
    b7d8:	7802      	ldrb	r2, [r0, #0]
    b7da:	2a01      	cmp	r2, #1
    b7dc:	d001      	beq.n	b7e2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    b7de:	2201      	movs	r2, #1
    b7e0:	e000      	b.n	b7e4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    b7e2:	2200      	movs	r2, #0
    b7e4:	2301      	movs	r3, #1
    b7e6:	7003      	strb	r3, [r0, #0]
    b7e8:	b901      	cbnz	r1, b7ec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    b7ea:	b662      	cpsie	i
    b7ec:	b10a      	cbz	r2, b7f2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    b7ee:	2000      	movs	r0, #0
    b7f0:	4770      	bx	lr
    b7f2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    b7f6:	4770      	bx	lr

0000b7f8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    b7f8:	2100      	movs	r1, #0
    b7fa:	7001      	strb	r1, [r0, #0]
    b7fc:	4608      	mov	r0, r1
    b7fe:	4770      	bx	lr

0000b800 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    b800:	f3ef 8110 	mrs	r1, PRIMASK
    b804:	b672      	cpsid	i
    b806:	2200      	movs	r2, #0
    b808:	7002      	strb	r2, [r0, #0]
    b80a:	b901      	cbnz	r1, b80e <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    b80c:	b662      	cpsie	i
    b80e:	2000      	movs	r0, #0
    b810:	4770      	bx	lr

0000b812 <mpsl_low_priority_process>:
    b812:	f7f8 b875 	b.w	3900 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000b816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    b816:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b81a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b81e:	280f      	cmp	r0, #15
    b820:	d001      	beq.n	b826 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    b822:	2000      	movs	r0, #0
    b824:	4770      	bx	lr
    b826:	2001      	movs	r0, #1
    b828:	4770      	bx	lr

0000b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    b82a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b82e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b832:	280a      	cmp	r0, #10
    b834:	d001      	beq.n	b83a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    b836:	2000      	movs	r0, #0
    b838:	4770      	bx	lr
    b83a:	2001      	movs	r0, #1
    b83c:	4770      	bx	lr

0000b83e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    b83e:	b500      	push	{lr}
    b840:	f7ff fff3 	bl	b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b844:	b120      	cbz	r0, b850 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    b846:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b84a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b84e:	b108      	cbz	r0, b854 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    b850:	2000      	movs	r0, #0
    b852:	bd00      	pop	{pc}
    b854:	2001      	movs	r0, #1
    b856:	bd00      	pop	{pc}

0000b858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    b858:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b85c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b860:	280e      	cmp	r0, #14
    b862:	d001      	beq.n	b868 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    b864:	2000      	movs	r0, #0
    b866:	4770      	bx	lr
    b868:	2001      	movs	r0, #1
    b86a:	4770      	bx	lr

0000b86c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    b86c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b870:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b874:	2810      	cmp	r0, #16
    b876:	d001      	beq.n	b87c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    b878:	2000      	movs	r0, #0
    b87a:	4770      	bx	lr
    b87c:	2001      	movs	r0, #1
    b87e:	4770      	bx	lr

0000b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    b880:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b884:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b888:	2806      	cmp	r0, #6
    b88a:	d003      	beq.n	b894 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b88c:	1c40      	adds	r0, r0, #1
    b88e:	d001      	beq.n	b894 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    b890:	2000      	movs	r0, #0
    b892:	4770      	bx	lr
    b894:	2001      	movs	r0, #1
    b896:	4770      	bx	lr

0000b898 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    b898:	b500      	push	{lr}
    b89a:	f7ff fff1 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b89e:	b148      	cbz	r0, b8b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b8a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8a4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b8a8:	2806      	cmp	r0, #6
    b8aa:	d303      	bcc.n	b8b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b8ac:	1c40      	adds	r0, r0, #1
    b8ae:	d001      	beq.n	b8b4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    b8b0:	2001      	movs	r0, #1
    b8b2:	bd00      	pop	{pc}
    b8b4:	2000      	movs	r0, #0
    b8b6:	bd00      	pop	{pc}

0000b8b8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    b8b8:	b500      	push	{lr}
    b8ba:	f7ff ffe1 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b8be:	b138      	cbz	r0, b8d0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    b8c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8c4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    b8c8:	2806      	cmp	r0, #6
    b8ca:	d303      	bcc.n	b8d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b8cc:	1c40      	adds	r0, r0, #1
    b8ce:	d001      	beq.n	b8d4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    b8d0:	2000      	movs	r0, #0
    b8d2:	bd00      	pop	{pc}
    b8d4:	2001      	movs	r0, #1
    b8d6:	bd00      	pop	{pc}

0000b8d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    b8d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b8e0:	280d      	cmp	r0, #13
    b8e2:	d001      	beq.n	b8e8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    b8e4:	2000      	movs	r0, #0
    b8e6:	4770      	bx	lr
    b8e8:	2001      	movs	r0, #1
    b8ea:	4770      	bx	lr

0000b8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    b8ec:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b8f0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    b8f4:	2808      	cmp	r0, #8
    b8f6:	d001      	beq.n	b8fc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    b8f8:	2000      	movs	r0, #0
    b8fa:	4770      	bx	lr
    b8fc:	2001      	movs	r0, #1
    b8fe:	4770      	bx	lr

0000b900 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    b900:	2a00      	cmp	r2, #0
    b902:	bf04      	itt	eq
    b904:	2000      	moveq	r0, #0
    b906:	4770      	bxeq	lr
    b908:	1e52      	subs	r2, r2, #1
    b90a:	d007      	beq.n	b91c <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    b90c:	7803      	ldrb	r3, [r0, #0]
    b90e:	f891 c000 	ldrb.w	ip, [r1]
    b912:	4563      	cmp	r3, ip
    b914:	bf04      	itt	eq
    b916:	1c40      	addeq	r0, r0, #1
    b918:	1c49      	addeq	r1, r1, #1
    b91a:	d0f5      	beq.n	b908 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    b91c:	7800      	ldrb	r0, [r0, #0]
    b91e:	7809      	ldrb	r1, [r1, #0]
    b920:	1a40      	subs	r0, r0, r1
    b922:	4770      	bx	lr

0000b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    b924:	b4f0      	push	{r4, r5, r6, r7}
    b926:	ea80 0c01 	eor.w	ip, r0, r1
    b92a:	4603      	mov	r3, r0
    b92c:	f01c 0f03 	tst.w	ip, #3
    b930:	d13c      	bne.n	b9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b932:	f013 0f03 	tst.w	r3, #3
    b936:	d00b      	beq.n	b950 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    b938:	2a00      	cmp	r2, #0
    b93a:	bf04      	itt	eq
    b93c:	bcf0      	popeq	{r4, r5, r6, r7}
    b93e:	4770      	bxeq	lr
    b940:	f811 cb01 	ldrb.w	ip, [r1], #1
    b944:	f803 cb01 	strb.w	ip, [r3], #1
    b948:	1e52      	subs	r2, r2, #1
    b94a:	f013 0f03 	tst.w	r3, #3
    b94e:	d1f3      	bne.n	b938 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    b950:	2a03      	cmp	r2, #3
    b952:	d94f      	bls.n	b9f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b958:	d24c      	bcs.n	b9f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    b95a:	f1c2 0c00 	rsb	ip, r2, #0
    b95e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    b962:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    b966:	ea4f 0cac 	mov.w	ip, ip, asr #2
    b96a:	f1cc 0c00 	rsb	ip, ip, #0
    b96e:	f1bc 0f00 	cmp.w	ip, #0
    b972:	dd1b      	ble.n	b9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b974:	1f0d      	subs	r5, r1, #4
    b976:	1f1c      	subs	r4, r3, #4
    b978:	f01c 0f01 	tst.w	ip, #1
    b97c:	d003      	beq.n	b986 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    b97e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    b982:	f844 6f04 	str.w	r6, [r4, #4]!
    b986:	ea5f 066c 	movs.w	r6, ip, asr #1
    b98a:	d007      	beq.n	b99c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    b98c:	686f      	ldr	r7, [r5, #4]
    b98e:	6067      	str	r7, [r4, #4]
    b990:	f855 7f08 	ldr.w	r7, [r5, #8]!
    b994:	f844 7f08 	str.w	r7, [r4, #8]!
    b998:	1e76      	subs	r6, r6, #1
    b99a:	d1f7      	bne.n	b98c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    b99c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    b9a0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    b9a4:	f1cc 0c00 	rsb	ip, ip, #0
    b9a8:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    b9ac:	2a00      	cmp	r2, #0
    b9ae:	bf04      	itt	eq
    b9b0:	bcf0      	popeq	{r4, r5, r6, r7}
    b9b2:	4770      	bxeq	lr
    b9b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b9b8:	d226      	bcs.n	ba08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    b9ba:	2a00      	cmp	r2, #0
    b9bc:	bfdc      	itt	le
    b9be:	bcf0      	pople	{r4, r5, r6, r7}
    b9c0:	4770      	bxle	lr
    b9c2:	1e49      	subs	r1, r1, #1
    b9c4:	1e5b      	subs	r3, r3, #1
    b9c6:	f012 0f01 	tst.w	r2, #1
    b9ca:	d003      	beq.n	b9d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    b9cc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    b9d0:	f803 cf01 	strb.w	ip, [r3, #1]!
    b9d4:	1052      	asrs	r2, r2, #1
    b9d6:	bf04      	itt	eq
    b9d8:	bcf0      	popeq	{r4, r5, r6, r7}
    b9da:	4770      	bxeq	lr
    b9dc:	f891 c001 	ldrb.w	ip, [r1, #1]
    b9e0:	f883 c001 	strb.w	ip, [r3, #1]
    b9e4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    b9e8:	f803 cf02 	strb.w	ip, [r3, #2]!
    b9ec:	1e52      	subs	r2, r2, #1
    b9ee:	d1f5      	bne.n	b9dc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    b9f0:	bcf0      	pop	{r4, r5, r6, r7}
    b9f2:	4770      	bx	lr
    b9f4:	2a04      	cmp	r2, #4
    b9f6:	d3d9      	bcc.n	b9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    b9f8:	f851 cb04 	ldr.w	ip, [r1], #4
    b9fc:	1f12      	subs	r2, r2, #4
    b9fe:	f843 cb04 	str.w	ip, [r3], #4
    ba02:	2a04      	cmp	r2, #4
    ba04:	d2f8      	bcs.n	b9f8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    ba06:	e7d1      	b.n	b9ac <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    ba08:	f811 cb01 	ldrb.w	ip, [r1], #1
    ba0c:	f803 cb01 	strb.w	ip, [r3], #1
    ba10:	1e52      	subs	r2, r2, #1
    ba12:	d1f9      	bne.n	ba08 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    ba14:	bcf0      	pop	{r4, r5, r6, r7}
    ba16:	4770      	bx	lr

0000ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    ba18:	b470      	push	{r4, r5, r6}
    ba1a:	4603      	mov	r3, r0
    ba1c:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    ba20:	f010 0f03 	tst.w	r0, #3
    ba24:	d009      	beq.n	ba3a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    ba26:	2a00      	cmp	r2, #0
    ba28:	bf04      	itt	eq
    ba2a:	bc70      	popeq	{r4, r5, r6}
    ba2c:	4770      	bxeq	lr
    ba2e:	f803 cb01 	strb.w	ip, [r3], #1
    ba32:	1e52      	subs	r2, r2, #1
    ba34:	f013 0f03 	tst.w	r3, #3
    ba38:	d1f5      	bne.n	ba26 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    ba3a:	b2c9      	uxtb	r1, r1
    ba3c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ba40:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    ba44:	2a03      	cmp	r2, #3
    ba46:	d939      	bls.n	babc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ba48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ba4c:	d236      	bcs.n	babc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    ba4e:	4251      	negs	r1, r2
    ba50:	17cc      	asrs	r4, r1, #31
    ba52:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    ba56:	1089      	asrs	r1, r1, #2
    ba58:	424e      	negs	r6, r1
    ba5a:	2e00      	cmp	r6, #0
    ba5c:	dd11      	ble.n	ba82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    ba5e:	1f19      	subs	r1, r3, #4
    ba60:	f016 0f01 	tst.w	r6, #1
    ba64:	bf18      	it	ne
    ba66:	f841 5f04 	strne.w	r5, [r1, #4]!
    ba6a:	1074      	asrs	r4, r6, #1
    ba6c:	d004      	beq.n	ba78 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    ba6e:	604d      	str	r5, [r1, #4]
    ba70:	f841 5f08 	str.w	r5, [r1, #8]!
    ba74:	1e64      	subs	r4, r4, #1
    ba76:	d1fa      	bne.n	ba6e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    ba78:	4271      	negs	r1, r6
    ba7a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    ba7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ba82:	2a00      	cmp	r2, #0
    ba84:	bf04      	itt	eq
    ba86:	bc70      	popeq	{r4, r5, r6}
    ba88:	4770      	bxeq	lr
    ba8a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ba8e:	d21d      	bcs.n	bacc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    ba90:	2a00      	cmp	r2, #0
    ba92:	bfdc      	itt	le
    ba94:	bc70      	pople	{r4, r5, r6}
    ba96:	4770      	bxle	lr
    ba98:	1e59      	subs	r1, r3, #1
    ba9a:	f012 0f01 	tst.w	r2, #1
    ba9e:	bf18      	it	ne
    baa0:	f801 cf01 	strbne.w	ip, [r1, #1]!
    baa4:	1052      	asrs	r2, r2, #1
    baa6:	bf04      	itt	eq
    baa8:	bc70      	popeq	{r4, r5, r6}
    baaa:	4770      	bxeq	lr
    baac:	f881 c001 	strb.w	ip, [r1, #1]
    bab0:	f801 cf02 	strb.w	ip, [r1, #2]!
    bab4:	1e52      	subs	r2, r2, #1
    bab6:	d1f9      	bne.n	baac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    bab8:	bc70      	pop	{r4, r5, r6}
    baba:	4770      	bx	lr
    babc:	2a04      	cmp	r2, #4
    babe:	d3e0      	bcc.n	ba82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bac0:	1f12      	subs	r2, r2, #4
    bac2:	f843 5b04 	str.w	r5, [r3], #4
    bac6:	2a04      	cmp	r2, #4
    bac8:	d2fa      	bcs.n	bac0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    baca:	e7da      	b.n	ba82 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    bacc:	f803 cb01 	strb.w	ip, [r3], #1
    bad0:	1e52      	subs	r2, r2, #1
    bad2:	d1fb      	bne.n	bacc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    bad4:	bc70      	pop	{r4, r5, r6}
    bad6:	4770      	bx	lr
    bad8:	f04f 30ff 	mov.w	r0, #4294967295
    badc:	4770      	bx	lr
    bade:	2000      	movs	r0, #0
    bae0:	4770      	bx	lr
    bae2:	2000      	movs	r0, #0
    bae4:	4770      	bx	lr
    bae6:	f04f 30ff 	mov.w	r0, #4294967295
    baea:	4770      	bx	lr
    baec:	4770      	bx	lr
    baee:	4770      	bx	lr
    baf0:	2000      	movs	r0, #0
    baf2:	4770      	bx	lr
    baf4:	f04f 30ff 	mov.w	r0, #4294967295
    baf8:	4770      	bx	lr
    bafa:	f04f 30ff 	mov.w	r0, #4294967295
    bafe:	4770      	bx	lr
    bb00:	2100      	movs	r1, #0
    bb02:	7001      	strb	r1, [r0, #0]
    bb04:	4770      	bx	lr
    bb06:	f04f 30ff 	mov.w	r0, #4294967295
    bb0a:	4770      	bx	lr
    bb0c:	f04f 30ff 	mov.w	r0, #4294967295
    bb10:	4770      	bx	lr
    bb12:	2000      	movs	r0, #0
    bb14:	4770      	bx	lr
    bb16:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    bb1a:	4605      	mov	r5, r0
    bb1c:	f100 0003 	add.w	r0, r0, #3
    bb20:	f020 0003 	bic.w	r0, r0, #3
    bb24:	460c      	mov	r4, r1
    bb26:	9000      	str	r0, [sp, #0]
    bb28:	7849      	ldrb	r1, [r1, #1]
    bb2a:	f88d 1004 	strb.w	r1, [sp, #4]
    bb2e:	78a1      	ldrb	r1, [r4, #2]
    bb30:	0016      	movs	r6, r2
    bb32:	f88d 1005 	strb.w	r1, [sp, #5]
    bb36:	d000      	beq.n	bb3a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x122>
    bb38:	2000      	movs	r0, #0
    bb3a:	a901      	add	r1, sp, #4
    bb3c:	f7f8 faa2 	bl	4084 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    bb40:	9900      	ldr	r1, [sp, #0]
    bb42:	4408      	add	r0, r1
    bb44:	9000      	str	r0, [sp, #0]
    bb46:	78a1      	ldrb	r1, [r4, #2]
    bb48:	b141      	cbz	r1, bb5c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x144>
    bb4a:	8a63      	ldrh	r3, [r4, #18]
    bb4c:	78e2      	ldrb	r2, [r4, #3]
    bb4e:	b106      	cbz	r6, bb52 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x13a>
    bb50:	2000      	movs	r0, #0
    bb52:	f7f8 fd27 	bl	45a4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    bb56:	9900      	ldr	r1, [sp, #0]
    bb58:	4408      	add	r0, r1
    bb5a:	9000      	str	r0, [sp, #0]
    bb5c:	4632      	mov	r2, r6
    bb5e:	4621      	mov	r1, r4
    bb60:	4668      	mov	r0, sp
    bb62:	f000 f808 	bl	bb76 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x15e>
    bb66:	9800      	ldr	r0, [sp, #0]
    bb68:	1dc0      	adds	r0, r0, #7
    bb6a:	f020 0007 	bic.w	r0, r0, #7
    bb6e:	9000      	str	r0, [sp, #0]
    bb70:	1b40      	subs	r0, r0, r5
    bb72:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    bb76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb7a:	4606      	mov	r6, r0
    bb7c:	460c      	mov	r4, r1
    bb7e:	7808      	ldrb	r0, [r1, #0]
    bb80:	7849      	ldrb	r1, [r1, #1]
    bb82:	2700      	movs	r7, #0
    bb84:	4408      	add	r0, r1
    bb86:	4691      	mov	r9, r2
    bb88:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    bb8c:	463d      	mov	r5, r7
    bb8e:	e00e      	b.n	bbae <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x196>
    bb90:	7a23      	ldrb	r3, [r4, #8]
    bb92:	2b02      	cmp	r3, #2
    bb94:	d200      	bcs.n	bb98 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x180>
    bb96:	2302      	movs	r3, #2
    bb98:	79e2      	ldrb	r2, [r4, #7]
    bb9a:	2a03      	cmp	r2, #3
    bb9c:	d200      	bcs.n	bba0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x188>
    bb9e:	2203      	movs	r2, #3
    bba0:	79a1      	ldrb	r1, [r4, #6]
    bba2:	7960      	ldrb	r0, [r4, #5]
    bba4:	f000 fedb 	bl	c95e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    bba8:	1c6d      	adds	r5, r5, #1
    bbaa:	4407      	add	r7, r0
    bbac:	b2ed      	uxtb	r5, r5
    bbae:	4545      	cmp	r5, r8
    bbb0:	d3ee      	bcc.n	bb90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x178>
    bbb2:	6830      	ldr	r0, [r6, #0]
    bbb4:	1cc0      	adds	r0, r0, #3
    bbb6:	f020 0003 	bic.w	r0, r0, #3
    bbba:	6030      	str	r0, [r6, #0]
    bbbc:	f1b9 0f00 	cmp.w	r9, #0
    bbc0:	d000      	beq.n	bbc4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x1ac>
    bbc2:	2000      	movs	r0, #0
    bbc4:	463a      	mov	r2, r7
    bbc6:	4641      	mov	r1, r8
    bbc8:	f7f8 fc36 	bl	4438 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    bbcc:	6831      	ldr	r1, [r6, #0]
    bbce:	4408      	add	r0, r1
    bbd0:	6030      	str	r0, [r6, #0]
    bbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000bbd6 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    bbd6:	2000      	movs	r0, #0
    bbd8:	4770      	bx	lr

0000bbda <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    bbda:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    bbdc:	4604      	mov	r4, r0
    bbde:	1d01      	adds	r1, r0, #4
    bbe0:	4668      	mov	r0, sp
    bbe2:	f7fa fa21 	bl	6028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    bbe6:	2800      	cmp	r0, #0
    bbe8:	d004      	beq.n	bbf4 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    bbea:	4669      	mov	r1, sp
    bbec:	4620      	mov	r0, r4
    bbee:	f000 f848 	bl	bc82 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    bbf2:	2001      	movs	r0, #1
    bbf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000bbf6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    bbf6:	b50e      	push	{r1, r2, r3, lr}
    bbf8:	4601      	mov	r1, r0
    bbfa:	4668      	mov	r0, sp
    bbfc:	f000 f827 	bl	bc4e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    bc00:	4668      	mov	r0, sp
    bc02:	f7fa fa3b 	bl	607c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    bc06:	bd0e      	pop	{r1, r2, r3, pc}

0000bc08 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    bc08:	b510      	push	{r4, lr}
    bc0a:	4604      	mov	r4, r0
    bc0c:	4620      	mov	r0, r4
    bc0e:	f7f8 f927 	bl	3e60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    bc12:	2800      	cmp	r0, #0
    bc14:	d006      	beq.n	bc24 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    bc16:	78a1      	ldrb	r1, [r4, #2]
    bc18:	7820      	ldrb	r0, [r4, #0]
    bc1a:	f000 f804 	bl	bc26 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    bc1e:	2800      	cmp	r0, #0
    bc20:	d0f4      	beq.n	bc0c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    bc22:	2001      	movs	r0, #1
    bc24:	bd10      	pop	{r4, pc}
    bc26:	b570      	push	{r4, r5, r6, lr}
    bc28:	460c      	mov	r4, r1
    bc2a:	4605      	mov	r5, r0
    bc2c:	f7f8 f98a 	bl	3f44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    bc30:	2800      	cmp	r0, #0
    bc32:	d002      	beq.n	bc3a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    bc34:	2d3e      	cmp	r5, #62	; 0x3e
    bc36:	d001      	beq.n	bc3c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    bc38:	2001      	movs	r0, #1
    bc3a:	bd70      	pop	{r4, r5, r6, pc}
    bc3c:	2c12      	cmp	r4, #18
    bc3e:	d004      	beq.n	bc4a <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    bc40:	4620      	mov	r0, r4
    bc42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bc46:	f7f8 b999 	b.w	3f7c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    bc4a:	2000      	movs	r0, #0
    bc4c:	bd70      	pop	{r4, r5, r6, pc}

0000bc4e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    bc4e:	880a      	ldrh	r2, [r1, #0]
    bc50:	f3c2 020b 	ubfx	r2, r2, #0, #12
    bc54:	8002      	strh	r2, [r0, #0]
    bc56:	884a      	ldrh	r2, [r1, #2]
    bc58:	8042      	strh	r2, [r0, #2]
    bc5a:	784a      	ldrb	r2, [r1, #1]
    bc5c:	0993      	lsrs	r3, r2, #6
    bc5e:	2200      	movs	r2, #0
    bc60:	7142      	strb	r2, [r0, #5]
    bc62:	784b      	ldrb	r3, [r1, #1]
    bc64:	f3c3 1301 	ubfx	r3, r3, #4, #2
    bc68:	b11b      	cbz	r3, bc72 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bc6a:	2b01      	cmp	r3, #1
    bc6c:	d005      	beq.n	bc7a <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    bc6e:	2b02      	cmp	r3, #2
    bc70:	d005      	beq.n	bc7e <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    bc72:	7102      	strb	r2, [r0, #4]
    bc74:	1d09      	adds	r1, r1, #4
    bc76:	6081      	str	r1, [r0, #8]
    bc78:	4770      	bx	lr
    bc7a:	2201      	movs	r2, #1
    bc7c:	e7f9      	b.n	bc72 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    bc7e:	2202      	movs	r2, #2
    bc80:	e7f7      	b.n	bc72 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000bc82 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    bc82:	b510      	push	{r4, lr}
    bc84:	460c      	mov	r4, r1
    bc86:	7809      	ldrb	r1, [r1, #0]
    bc88:	7001      	strb	r1, [r0, #0]
    bc8a:	7841      	ldrb	r1, [r0, #1]
    bc8c:	f021 010f 	bic.w	r1, r1, #15
    bc90:	7041      	strb	r1, [r0, #1]
    bc92:	8822      	ldrh	r2, [r4, #0]
    bc94:	f3c2 2203 	ubfx	r2, r2, #8, #4
    bc98:	4311      	orrs	r1, r2
    bc9a:	7041      	strb	r1, [r0, #1]
    bc9c:	78a2      	ldrb	r2, [r4, #2]
    bc9e:	7082      	strb	r2, [r0, #2]
    bca0:	8862      	ldrh	r2, [r4, #2]
    bca2:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    bca6:	0a12      	lsrs	r2, r2, #8
    bca8:	70c2      	strb	r2, [r0, #3]
    bcaa:	7041      	strb	r1, [r0, #1]
    bcac:	7922      	ldrb	r2, [r4, #4]
    bcae:	f002 0203 	and.w	r2, r2, #3
    bcb2:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    bcb6:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    bcba:	7041      	strb	r1, [r0, #1]
    bcbc:	7962      	ldrb	r2, [r4, #5]
    bcbe:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    bcc2:	7041      	strb	r1, [r0, #1]
    bcc4:	68a1      	ldr	r1, [r4, #8]
    bcc6:	1d02      	adds	r2, r0, #4
    bcc8:	4291      	cmp	r1, r2
    bcca:	d006      	beq.n	bcda <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    bccc:	8862      	ldrh	r2, [r4, #2]
    bcce:	2afb      	cmp	r2, #251	; 0xfb
    bcd0:	d300      	bcc.n	bcd4 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    bcd2:	22fb      	movs	r2, #251	; 0xfb
    bcd4:	1d00      	adds	r0, r0, #4
    bcd6:	f7ff fe25 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    bcda:	78a0      	ldrb	r0, [r4, #2]
    bcdc:	1d00      	adds	r0, r0, #4
    bcde:	b2c0      	uxtb	r0, r0
    bce0:	bd10      	pop	{r4, pc}

0000bce2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bce6:	4604      	mov	r4, r0
    bce8:	780f      	ldrb	r7, [r1, #0]
    bcea:	2000      	movs	r0, #0
    bcec:	250c      	movs	r5, #12
    bcee:	2605      	movs	r6, #5
    bcf0:	223e      	movs	r2, #62	; 0x3e
    bcf2:	23ff      	movs	r3, #255	; 0xff
    bcf4:	2f1b      	cmp	r7, #27
    bcf6:	d27d      	bcs.n	bdf4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x112>
    bcf8:	e8df f007 	tbb	[pc, r7]
    bcfc:	27250eea 	.word	0x27250eea
    bd00:	816d632d 	.word	0x816d632d
    bd04:	bcb1af9b 	.word	0xbcb1af9b
    bd08:	eaf4e2c7 	.word	0xeaf4e2c7
    bd0c:	d5d231ea 	.word	0xd5d231ea
    bd10:	eff0f1fd 	.word	0xeff0f1fd
    bd14:	00ecedee 	.word	0x00ecedee
    bd18:	7025      	strb	r5, [r4, #0]
    bd1a:	7908      	ldrb	r0, [r1, #4]
    bd1c:	70a0      	strb	r0, [r4, #2]
    bd1e:	7948      	ldrb	r0, [r1, #5]
    bd20:	70e0      	strb	r0, [r4, #3]
    bd22:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    bd26:	0a00      	lsrs	r0, r0, #8
    bd28:	7120      	strb	r0, [r4, #4]
    bd2a:	79c8      	ldrb	r0, [r1, #7]
    bd2c:	7160      	strb	r0, [r4, #5]
    bd2e:	7a08      	ldrb	r0, [r1, #8]
    bd30:	71a0      	strb	r0, [r4, #6]
    bd32:	8908      	ldrh	r0, [r1, #8]
    bd34:	0a00      	lsrs	r0, r0, #8
    bd36:	71e0      	strb	r0, [r4, #7]
    bd38:	7a88      	ldrb	r0, [r1, #10]
    bd3a:	7220      	strb	r0, [r4, #8]
    bd3c:	8948      	ldrh	r0, [r1, #10]
    bd3e:	0a00      	lsrs	r0, r0, #8
    bd40:	7260      	strb	r0, [r4, #9]
    bd42:	2008      	movs	r0, #8
    bd44:	e0c2      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd46:	2010      	movs	r0, #16
    bd48:	e000      	b.n	bd4c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6a>
    bd4a:	201a      	movs	r0, #26
    bd4c:	7020      	strb	r0, [r4, #0]
    bd4e:	7908      	ldrb	r0, [r1, #4]
    bd50:	70a0      	strb	r0, [r4, #2]
    bd52:	2001      	movs	r0, #1
    bd54:	e0ba      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bd56:	4620      	mov	r0, r4
    bd58:	f000 f946 	bl	bfe8 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    bd5c:	e0b4      	b.n	bec8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e6>
    bd5e:	7022      	strb	r2, [r4, #0]
    bd60:	200a      	movs	r0, #10
    bd62:	70a0      	strb	r0, [r4, #2]
    bd64:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    bd68:	70e0      	strb	r0, [r4, #3]
    bd6a:	7888      	ldrb	r0, [r1, #2]
    bd6c:	7120      	strb	r0, [r4, #4]
    bd6e:	8848      	ldrh	r0, [r1, #2]
    bd70:	0a00      	lsrs	r0, r0, #8
    bd72:	7160      	strb	r0, [r4, #5]
    bd74:	7908      	ldrb	r0, [r1, #4]
    bd76:	71a0      	strb	r0, [r4, #6]
    bd78:	7948      	ldrb	r0, [r1, #5]
    bd7a:	71e0      	strb	r0, [r4, #7]
    bd7c:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bd80:	60a0      	str	r0, [r4, #8]
    bd82:	8948      	ldrh	r0, [r1, #10]
    bd84:	81a0      	strh	r0, [r4, #12]
    bd86:	68c8      	ldr	r0, [r1, #12]
    bd88:	f8c4 000e 	str.w	r0, [r4, #14]
    bd8c:	8a08      	ldrh	r0, [r1, #16]
    bd8e:	8260      	strh	r0, [r4, #18]
    bd90:	f8d1 0012 	ldr.w	r0, [r1, #18]
    bd94:	6160      	str	r0, [r4, #20]
    bd96:	8ac8      	ldrh	r0, [r1, #22]
    bd98:	8320      	strh	r0, [r4, #24]
    bd9a:	7e08      	ldrb	r0, [r1, #24]
    bd9c:	76a0      	strb	r0, [r4, #26]
    bd9e:	8b08      	ldrh	r0, [r1, #24]
    bda0:	0a00      	lsrs	r0, r0, #8
    bda2:	76e0      	strb	r0, [r4, #27]
    bda4:	7e88      	ldrb	r0, [r1, #26]
    bda6:	7720      	strb	r0, [r4, #28]
    bda8:	8b48      	ldrh	r0, [r1, #26]
    bdaa:	0a00      	lsrs	r0, r0, #8
    bdac:	7760      	strb	r0, [r4, #29]
    bdae:	7f08      	ldrb	r0, [r1, #28]
    bdb0:	77a0      	strb	r0, [r4, #30]
    bdb2:	8b88      	ldrh	r0, [r1, #28]
    bdb4:	0a00      	lsrs	r0, r0, #8
    bdb6:	77e0      	strb	r0, [r4, #31]
    bdb8:	7f88      	ldrb	r0, [r1, #30]
    bdba:	f884 0020 	strb.w	r0, [r4, #32]
    bdbe:	201f      	movs	r0, #31
    bdc0:	e084      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdc2:	7022      	strb	r2, [r4, #0]
    bdc4:	2014      	movs	r0, #20
    bdc6:	70a0      	strb	r0, [r4, #2]
    bdc8:	7908      	ldrb	r0, [r1, #4]
    bdca:	70e0      	strb	r0, [r4, #3]
    bdcc:	8888      	ldrh	r0, [r1, #4]
    bdce:	0a00      	lsrs	r0, r0, #8
    bdd0:	7120      	strb	r0, [r4, #4]
    bdd2:	7988      	ldrb	r0, [r1, #6]
    bdd4:	e0a7      	b.n	bf26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    bdd6:	7022      	strb	r2, [r4, #0]
    bdd8:	2004      	movs	r0, #4
    bdda:	70a0      	strb	r0, [r4, #2]
    bddc:	7908      	ldrb	r0, [r1, #4]
    bdde:	70e0      	strb	r0, [r4, #3]
    bde0:	7988      	ldrb	r0, [r1, #6]
    bde2:	7120      	strb	r0, [r4, #4]
    bde4:	88c8      	ldrh	r0, [r1, #6]
    bde6:	0a00      	lsrs	r0, r0, #8
    bde8:	7160      	strb	r0, [r4, #5]
    bdea:	6888      	ldr	r0, [r1, #8]
    bdec:	f8c4 0006 	str.w	r0, [r4, #6]
    bdf0:	68c8      	ldr	r0, [r1, #12]
    bdf2:	e000      	b.n	bdf6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    bdf4:	e06c      	b.n	bed0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    bdf6:	f8c4 000a 	str.w	r0, [r4, #10]
    bdfa:	200c      	movs	r0, #12
    bdfc:	e066      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bdfe:	7022      	strb	r2, [r4, #0]
    be00:	2003      	movs	r0, #3
    be02:	70a0      	strb	r0, [r4, #2]
    be04:	7908      	ldrb	r0, [r1, #4]
    be06:	70e0      	strb	r0, [r4, #3]
    be08:	7988      	ldrb	r0, [r1, #6]
    be0a:	7120      	strb	r0, [r4, #4]
    be0c:	88c8      	ldrh	r0, [r1, #6]
    be0e:	0a00      	lsrs	r0, r0, #8
    be10:	7160      	strb	r0, [r4, #5]
    be12:	7a08      	ldrb	r0, [r1, #8]
    be14:	71a0      	strb	r0, [r4, #6]
    be16:	8908      	ldrh	r0, [r1, #8]
    be18:	0a00      	lsrs	r0, r0, #8
    be1a:	71e0      	strb	r0, [r4, #7]
    be1c:	7a88      	ldrb	r0, [r1, #10]
    be1e:	7220      	strb	r0, [r4, #8]
    be20:	8948      	ldrh	r0, [r1, #10]
    be22:	0a00      	lsrs	r0, r0, #8
    be24:	7260      	strb	r0, [r4, #9]
    be26:	7b08      	ldrb	r0, [r1, #12]
    be28:	72a0      	strb	r0, [r4, #10]
    be2a:	8988      	ldrh	r0, [r1, #12]
    be2c:	0a00      	lsrs	r0, r0, #8
    be2e:	72e0      	strb	r0, [r4, #11]
    be30:	e0d8      	b.n	bfe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    be32:	7022      	strb	r2, [r4, #0]
    be34:	70a6      	strb	r6, [r4, #2]
    be36:	7908      	ldrb	r0, [r1, #4]
    be38:	70e0      	strb	r0, [r4, #3]
    be3a:	8888      	ldrh	r0, [r1, #4]
    be3c:	0a00      	lsrs	r0, r0, #8
    be3e:	7120      	strb	r0, [r4, #4]
    be40:	f8d1 0006 	ldr.w	r0, [r1, #6]
    be44:	f8c4 0005 	str.w	r0, [r4, #5]
    be48:	f8d1 000a 	ldr.w	r0, [r1, #10]
    be4c:	f8c4 0009 	str.w	r0, [r4, #9]
    be50:	89c8      	ldrh	r0, [r1, #14]
    be52:	f8a4 000d 	strh.w	r0, [r4, #13]
    be56:	200d      	movs	r0, #13
    be58:	e038      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    be5a:	2011      	movs	r0, #17
    be5c:	e043      	b.n	bee6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x204>
    be5e:	7026      	strb	r6, [r4, #0]
    be60:	7908      	ldrb	r0, [r1, #4]
    be62:	70a0      	strb	r0, [r4, #2]
    be64:	7948      	ldrb	r0, [r1, #5]
    be66:	70e0      	strb	r0, [r4, #3]
    be68:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    be6c:	0a00      	lsrs	r0, r0, #8
    be6e:	7120      	strb	r0, [r4, #4]
    be70:	79c8      	ldrb	r0, [r1, #7]
    be72:	e058      	b.n	bf26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    be74:	2008      	movs	r0, #8
    be76:	7020      	strb	r0, [r4, #0]
    be78:	7908      	ldrb	r0, [r1, #4]
    be7a:	70a0      	strb	r0, [r4, #2]
    be7c:	7988      	ldrb	r0, [r1, #6]
    be7e:	70e0      	strb	r0, [r4, #3]
    be80:	88c8      	ldrh	r0, [r1, #6]
    be82:	0a00      	lsrs	r0, r0, #8
    be84:	7120      	strb	r0, [r4, #4]
    be86:	7a08      	ldrb	r0, [r1, #8]
    be88:	e04d      	b.n	bf26 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    be8a:	2030      	movs	r0, #48	; 0x30
    be8c:	7020      	strb	r0, [r4, #0]
    be8e:	7908      	ldrb	r0, [r1, #4]
    be90:	70a0      	strb	r0, [r4, #2]
    be92:	7988      	ldrb	r0, [r1, #6]
    be94:	70e0      	strb	r0, [r4, #3]
    be96:	88c8      	ldrh	r0, [r1, #6]
    be98:	0a00      	lsrs	r0, r0, #8
    be9a:	7120      	strb	r0, [r4, #4]
    be9c:	2003      	movs	r0, #3
    be9e:	e015      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bea0:	7022      	strb	r2, [r4, #0]
    bea2:	2007      	movs	r0, #7
    bea4:	e044      	b.n	bf30 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24e>
    bea6:	7022      	strb	r2, [r4, #0]
    bea8:	70a5      	strb	r5, [r4, #2]
    beaa:	7908      	ldrb	r0, [r1, #4]
    beac:	70e0      	strb	r0, [r4, #3]
    beae:	7988      	ldrb	r0, [r1, #6]
    beb0:	7120      	strb	r0, [r4, #4]
    beb2:	88c8      	ldrh	r0, [r1, #6]
    beb4:	0a00      	lsrs	r0, r0, #8
    beb6:	7160      	strb	r0, [r4, #5]
    beb8:	7a08      	ldrb	r0, [r1, #8]
    beba:	71a0      	strb	r0, [r4, #6]
    bebc:	7a48      	ldrb	r0, [r1, #9]
    bebe:	e027      	b.n	bf10 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22e>
    bec0:	4620      	mov	r0, r4
    bec2:	1d09      	adds	r1, r1, #4
    bec4:	f7f8 f810 	bl	3ee8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd8>
    bec8:	2800      	cmp	r0, #0
    beca:	d001      	beq.n	bed0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ee>
    becc:	7060      	strb	r0, [r4, #1]
    bece:	1c80      	adds	r0, r0, #2
    bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bed4:	e073      	b.n	bfbe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    bed6:	e047      	b.n	bf68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    bed8:	e028      	b.n	bf2c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    beda:	e053      	b.n	bf84 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a2>
    bedc:	e061      	b.n	bfa2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    bede:	e01a      	b.n	bf16 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    bee0:	e009      	b.n	bef6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x214>
    bee2:	e7ff      	b.n	bee4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x202>
    bee4:	2057      	movs	r0, #87	; 0x57
    bee6:	7020      	strb	r0, [r4, #0]
    bee8:	7908      	ldrb	r0, [r1, #4]
    beea:	70a0      	strb	r0, [r4, #2]
    beec:	8888      	ldrh	r0, [r1, #4]
    beee:	0a00      	lsrs	r0, r0, #8
    bef0:	70e0      	strb	r0, [r4, #3]
    bef2:	2002      	movs	r0, #2
    bef4:	e7ea      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bef6:	7022      	strb	r2, [r4, #0]
    bef8:	2012      	movs	r0, #18
    befa:	70a0      	strb	r0, [r4, #2]
    befc:	7908      	ldrb	r0, [r1, #4]
    befe:	70e0      	strb	r0, [r4, #3]
    bf00:	7948      	ldrb	r0, [r1, #5]
    bf02:	7120      	strb	r0, [r4, #4]
    bf04:	7988      	ldrb	r0, [r1, #6]
    bf06:	7160      	strb	r0, [r4, #5]
    bf08:	88c8      	ldrh	r0, [r1, #6]
    bf0a:	0a00      	lsrs	r0, r0, #8
    bf0c:	71a0      	strb	r0, [r4, #6]
    bf0e:	7a08      	ldrb	r0, [r1, #8]
    bf10:	71e0      	strb	r0, [r4, #7]
    bf12:	2006      	movs	r0, #6
    bf14:	e7da      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf16:	7023      	strb	r3, [r4, #0]
    bf18:	20a1      	movs	r0, #161	; 0xa1
    bf1a:	70a0      	strb	r0, [r4, #2]
    bf1c:	7908      	ldrb	r0, [r1, #4]
    bf1e:	70e0      	strb	r0, [r4, #3]
    bf20:	7948      	ldrb	r0, [r1, #5]
    bf22:	7120      	strb	r0, [r4, #4]
    bf24:	2000      	movs	r0, #0
    bf26:	7160      	strb	r0, [r4, #5]
    bf28:	2004      	movs	r0, #4
    bf2a:	e7cf      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf2c:	7023      	strb	r3, [r4, #0]
    bf2e:	20a2      	movs	r0, #162	; 0xa2
    bf30:	70a0      	strb	r0, [r4, #2]
    bf32:	7908      	ldrb	r0, [r1, #4]
    bf34:	70e0      	strb	r0, [r4, #3]
    bf36:	8888      	ldrh	r0, [r1, #4]
    bf38:	0a00      	lsrs	r0, r0, #8
    bf3a:	7120      	strb	r0, [r4, #4]
    bf3c:	7988      	ldrb	r0, [r1, #6]
    bf3e:	7160      	strb	r0, [r4, #5]
    bf40:	88c8      	ldrh	r0, [r1, #6]
    bf42:	0a00      	lsrs	r0, r0, #8
    bf44:	71a0      	strb	r0, [r4, #6]
    bf46:	7a08      	ldrb	r0, [r1, #8]
    bf48:	71e0      	strb	r0, [r4, #7]
    bf4a:	8908      	ldrh	r0, [r1, #8]
    bf4c:	0a00      	lsrs	r0, r0, #8
    bf4e:	7220      	strb	r0, [r4, #8]
    bf50:	7a88      	ldrb	r0, [r1, #10]
    bf52:	7260      	strb	r0, [r4, #9]
    bf54:	8948      	ldrh	r0, [r1, #10]
    bf56:	0a00      	lsrs	r0, r0, #8
    bf58:	72a0      	strb	r0, [r4, #10]
    bf5a:	7b08      	ldrb	r0, [r1, #12]
    bf5c:	72e0      	strb	r0, [r4, #11]
    bf5e:	8988      	ldrh	r0, [r1, #12]
    bf60:	0a00      	lsrs	r0, r0, #8
    bf62:	7320      	strb	r0, [r4, #12]
    bf64:	200b      	movs	r0, #11
    bf66:	e7b1      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf68:	7023      	strb	r3, [r4, #0]
    bf6a:	20a3      	movs	r0, #163	; 0xa3
    bf6c:	70a0      	strb	r0, [r4, #2]
    bf6e:	7908      	ldrb	r0, [r1, #4]
    bf70:	70e0      	strb	r0, [r4, #3]
    bf72:	8888      	ldrh	r0, [r1, #4]
    bf74:	0a00      	lsrs	r0, r0, #8
    bf76:	7120      	strb	r0, [r4, #4]
    bf78:	7988      	ldrb	r0, [r1, #6]
    bf7a:	7160      	strb	r0, [r4, #5]
    bf7c:	79c8      	ldrb	r0, [r1, #7]
    bf7e:	71a0      	strb	r0, [r4, #6]
    bf80:	2005      	movs	r0, #5
    bf82:	e7a3      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bf84:	7022      	strb	r2, [r4, #0]
    bf86:	2013      	movs	r0, #19
    bf88:	70a0      	strb	r0, [r4, #2]
    bf8a:	7908      	ldrb	r0, [r1, #4]
    bf8c:	70e0      	strb	r0, [r4, #3]
    bf8e:	7948      	ldrb	r0, [r1, #5]
    bf90:	7120      	strb	r0, [r4, #4]
    bf92:	f8d1 0006 	ldr.w	r0, [r1, #6]
    bf96:	f8c4 0005 	str.w	r0, [r4, #5]
    bf9a:	8948      	ldrh	r0, [r1, #10]
    bf9c:	f8a4 0009 	strh.w	r0, [r4, #9]
    bfa0:	e020      	b.n	bfe4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x302>
    bfa2:	7023      	strb	r3, [r4, #0]
    bfa4:	20a4      	movs	r0, #164	; 0xa4
    bfa6:	70a0      	strb	r0, [r4, #2]
    bfa8:	7908      	ldrb	r0, [r1, #4]
    bfaa:	70e0      	strb	r0, [r4, #3]
    bfac:	8888      	ldrh	r0, [r1, #4]
    bfae:	0a00      	lsrs	r0, r0, #8
    bfb0:	7120      	strb	r0, [r4, #4]
    bfb2:	7988      	ldrb	r0, [r1, #6]
    bfb4:	7160      	strb	r0, [r4, #5]
    bfb6:	79c8      	ldrb	r0, [r1, #7]
    bfb8:	71a0      	strb	r0, [r4, #6]
    bfba:	2007      	movs	r0, #7
    bfbc:	e786      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>
    bfbe:	7023      	strb	r3, [r4, #0]
    bfc0:	2080      	movs	r0, #128	; 0x80
    bfc2:	70a0      	strb	r0, [r4, #2]
    bfc4:	888a      	ldrh	r2, [r1, #4]
    bfc6:	f8a4 2003 	strh.w	r2, [r4, #3]
    bfca:	88ca      	ldrh	r2, [r1, #6]
    bfcc:	f8a4 2005 	strh.w	r2, [r4, #5]
    bfd0:	7a0a      	ldrb	r2, [r1, #8]
    bfd2:	71e2      	strb	r2, [r4, #7]
    bfd4:	7a4a      	ldrb	r2, [r1, #9]
    bfd6:	8122      	strh	r2, [r4, #8]
    bfd8:	7a8a      	ldrb	r2, [r1, #10]
    bfda:	72a2      	strb	r2, [r4, #10]
    bfdc:	7ac9      	ldrb	r1, [r1, #11]
    bfde:	f001 0101 	and.w	r1, r1, #1
    bfe2:	72e1      	strb	r1, [r4, #11]
    bfe4:	200a      	movs	r0, #10
    bfe6:	e771      	b.n	becc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ea>

0000bfe8 <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    bfe8:	223e      	movs	r2, #62	; 0x3e
    bfea:	7002      	strb	r2, [r0, #0]
    bfec:	2201      	movs	r2, #1
    bfee:	7082      	strb	r2, [r0, #2]
    bff0:	790a      	ldrb	r2, [r1, #4]
    bff2:	70c2      	strb	r2, [r0, #3]
    bff4:	798a      	ldrb	r2, [r1, #6]
    bff6:	7102      	strb	r2, [r0, #4]
    bff8:	88ca      	ldrh	r2, [r1, #6]
    bffa:	0a12      	lsrs	r2, r2, #8
    bffc:	7142      	strb	r2, [r0, #5]
    bffe:	7a0a      	ldrb	r2, [r1, #8]
    c000:	7182      	strb	r2, [r0, #6]
    c002:	7a4a      	ldrb	r2, [r1, #9]
    c004:	71c2      	strb	r2, [r0, #7]
    c006:	f8d1 200a 	ldr.w	r2, [r1, #10]
    c00a:	6082      	str	r2, [r0, #8]
    c00c:	89ca      	ldrh	r2, [r1, #14]
    c00e:	8182      	strh	r2, [r0, #12]
    c010:	7c0a      	ldrb	r2, [r1, #16]
    c012:	7382      	strb	r2, [r0, #14]
    c014:	8a0a      	ldrh	r2, [r1, #16]
    c016:	0a12      	lsrs	r2, r2, #8
    c018:	73c2      	strb	r2, [r0, #15]
    c01a:	7c8a      	ldrb	r2, [r1, #18]
    c01c:	7402      	strb	r2, [r0, #16]
    c01e:	8a4a      	ldrh	r2, [r1, #18]
    c020:	0a12      	lsrs	r2, r2, #8
    c022:	7442      	strb	r2, [r0, #17]
    c024:	7d0a      	ldrb	r2, [r1, #20]
    c026:	7482      	strb	r2, [r0, #18]
    c028:	8a8a      	ldrh	r2, [r1, #20]
    c02a:	0a12      	lsrs	r2, r2, #8
    c02c:	74c2      	strb	r2, [r0, #19]
    c02e:	7d89      	ldrb	r1, [r1, #22]
    c030:	7501      	strb	r1, [r0, #20]
    c032:	2013      	movs	r0, #19
    c034:	4770      	bx	lr

0000c036 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    c036:	223e      	movs	r2, #62	; 0x3e
    c038:	7002      	strb	r2, [r0, #0]
    c03a:	2201      	movs	r2, #1
    c03c:	7082      	strb	r2, [r0, #2]
    c03e:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    c042:	70c2      	strb	r2, [r0, #3]
    c044:	788a      	ldrb	r2, [r1, #2]
    c046:	7102      	strb	r2, [r0, #4]
    c048:	884a      	ldrh	r2, [r1, #2]
    c04a:	0a12      	lsrs	r2, r2, #8
    c04c:	7142      	strb	r2, [r0, #5]
    c04e:	790a      	ldrb	r2, [r1, #4]
    c050:	7182      	strb	r2, [r0, #6]
    c052:	794a      	ldrb	r2, [r1, #5]
    c054:	71c2      	strb	r2, [r0, #7]
    c056:	f8d1 2006 	ldr.w	r2, [r1, #6]
    c05a:	6082      	str	r2, [r0, #8]
    c05c:	894a      	ldrh	r2, [r1, #10]
    c05e:	8182      	strh	r2, [r0, #12]
    c060:	7e0a      	ldrb	r2, [r1, #24]
    c062:	7382      	strb	r2, [r0, #14]
    c064:	8b0a      	ldrh	r2, [r1, #24]
    c066:	0a12      	lsrs	r2, r2, #8
    c068:	73c2      	strb	r2, [r0, #15]
    c06a:	7e8a      	ldrb	r2, [r1, #26]
    c06c:	7402      	strb	r2, [r0, #16]
    c06e:	8b4a      	ldrh	r2, [r1, #26]
    c070:	0a12      	lsrs	r2, r2, #8
    c072:	7442      	strb	r2, [r0, #17]
    c074:	7f0a      	ldrb	r2, [r1, #28]
    c076:	7482      	strb	r2, [r0, #18]
    c078:	8b8a      	ldrh	r2, [r1, #28]
    c07a:	0a12      	lsrs	r2, r2, #8
    c07c:	74c2      	strb	r2, [r0, #19]
    c07e:	7f89      	ldrb	r1, [r1, #30]
    c080:	7501      	strb	r1, [r0, #20]
    c082:	2113      	movs	r1, #19
    c084:	7041      	strb	r1, [r0, #1]
    c086:	4608      	mov	r0, r1
    c088:	4770      	bx	lr

0000c08a <sdc_hci_data_get>:
    c08a:	b510      	push	{r4, lr}
    c08c:	b120      	cbz	r0, c098 <sdc_hci_data_get+0xe>
    c08e:	f7ff fda4 	bl	bbda <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    c092:	b120      	cbz	r0, c09e <sdc_hci_data_get+0x14>
    c094:	2000      	movs	r0, #0
    c096:	bd10      	pop	{r4, pc}
    c098:	f06f 0015 	mvn.w	r0, #21
    c09c:	bd10      	pop	{r4, pc}
    c09e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c0a2:	bd10      	pop	{r4, pc}

0000c0a4 <sdc_hci_data_put>:
    c0a4:	b510      	push	{r4, lr}
    c0a6:	f06f 0415 	mvn.w	r4, #21
    c0aa:	b120      	cbz	r0, c0b6 <sdc_hci_data_put+0x12>
    c0ac:	f7ff fda3 	bl	bbf6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    c0b0:	b108      	cbz	r0, c0b6 <sdc_hci_data_put+0x12>
    c0b2:	2000      	movs	r0, #0
    c0b4:	bd10      	pop	{r4, pc}
    c0b6:	4620      	mov	r0, r4
    c0b8:	bd10      	pop	{r4, pc}

0000c0ba <sdc_hci_evt_get>:
    c0ba:	b510      	push	{r4, lr}
    c0bc:	b120      	cbz	r0, c0c8 <sdc_hci_evt_get+0xe>
    c0be:	f7ff fda3 	bl	bc08 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    c0c2:	b120      	cbz	r0, c0ce <sdc_hci_evt_get+0x14>
    c0c4:	2000      	movs	r0, #0
    c0c6:	bd10      	pop	{r4, pc}
    c0c8:	f06f 0015 	mvn.w	r0, #21
    c0cc:	bd10      	pop	{r4, pc}
    c0ce:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c0d2:	bd10      	pop	{r4, pc}

0000c0d4 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    c0d4:	f002 be4a 	b.w	ed6c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000c0d8 <sdc_hci_cmd_cb_read_transmit_power_level>:
    c0d8:	f002 be8c 	b.w	edf4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000c0dc <sdc_hci_cmd_cb_set_event_mask>:
    c0dc:	b510      	push	{r4, lr}
    c0de:	f7f7 ff61 	bl	3fa4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    c0e2:	2000      	movs	r0, #0
    c0e4:	bd10      	pop	{r4, pc}

0000c0e6 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    c0e6:	b510      	push	{r4, lr}
    c0e8:	f7f7 ff6a 	bl	3fc0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    c0ec:	2000      	movs	r0, #0
    c0ee:	bd10      	pop	{r4, pc}

0000c0f0 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    c0f0:	f002 be9c 	b.w	ee2c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000c0f4 <sdc_hci_cmd_vs_conn_event_extend>:
    c0f4:	b508      	push	{r3, lr}
    c0f6:	7800      	ldrb	r0, [r0, #0]
    c0f8:	f88d 0000 	strb.w	r0, [sp]
    c0fc:	4668      	mov	r0, sp
    c0fe:	f002 fd4c 	bl	eb9a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    c102:	bd08      	pop	{r3, pc}

0000c104 <sdc_hci_cmd_vs_conn_update>:
    c104:	2001      	movs	r0, #1
    c106:	4770      	bx	lr

0000c108 <sdc_hci_cmd_vs_event_length_set>:
    c108:	f7fd be30 	b.w	9d6c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000c10c <sdc_hci_cmd_vs_llpm_mode_set>:
    c10c:	2001      	movs	r0, #1
    c10e:	4770      	bx	lr

0000c110 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    c110:	7800      	ldrb	r0, [r0, #0]
    c112:	b100      	cbz	r0, c116 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    c114:	2001      	movs	r0, #1
    c116:	f002 bcc5 	b.w	eaa4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000c11a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    c11a:	b570      	push	{r4, r5, r6, lr}
    c11c:	4605      	mov	r5, r0
    c11e:	2210      	movs	r2, #16
    c120:	2100      	movs	r1, #0
    c122:	f7ff fc79 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c126:	2210      	movs	r2, #16
    c128:	2100      	movs	r1, #0
    c12a:	f105 0010 	add.w	r0, r5, #16
    c12e:	f7ff fc73 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c132:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    c136:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c13a:	1c40      	adds	r0, r0, #1
    c13c:	d10b      	bne.n	c156 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c13e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c142:	1c40      	adds	r0, r0, #1
    c144:	d107      	bne.n	c156 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c146:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c14a:	1c40      	adds	r0, r0, #1
    c14c:	d103      	bne.n	c156 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    c14e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c152:	1c40      	adds	r0, r0, #1
    c154:	d00b      	beq.n	c16e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    c156:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    c15a:	6128      	str	r0, [r5, #16]
    c15c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    c160:	6168      	str	r0, [r5, #20]
    c162:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    c166:	61a8      	str	r0, [r5, #24]
    c168:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    c16c:	61e8      	str	r0, [r5, #28]
    c16e:	2000      	movs	r0, #0
    c170:	f7f8 fcae 	bl	4ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c174:	b918      	cbnz	r0, c17e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    c176:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    c17a:	07c0      	lsls	r0, r0, #31
    c17c:	d118      	bne.n	c1b0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c17e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    c182:	1c40      	adds	r0, r0, #1
    c184:	d10b      	bne.n	c19e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c186:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    c18a:	1c40      	adds	r0, r0, #1
    c18c:	d107      	bne.n	c19e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c18e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    c192:	1c40      	adds	r0, r0, #1
    c194:	d103      	bne.n	c19e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    c196:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    c19a:	1c40      	adds	r0, r0, #1
    c19c:	d008      	beq.n	c1b0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    c19e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    c1a2:	6028      	str	r0, [r5, #0]
    c1a4:	6860      	ldr	r0, [r4, #4]
    c1a6:	6068      	str	r0, [r5, #4]
    c1a8:	68a0      	ldr	r0, [r4, #8]
    c1aa:	60a8      	str	r0, [r5, #8]
    c1ac:	68e0      	ldr	r0, [r4, #12]
    c1ae:	60e8      	str	r0, [r5, #12]
    c1b0:	2000      	movs	r0, #0
    c1b2:	bd70      	pop	{r4, r5, r6, pc}

0000c1b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    c1b4:	b570      	push	{r4, r5, r6, lr}
    c1b6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c1ba:	4604      	mov	r4, r0
    c1bc:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c1c0:	1c40      	adds	r0, r0, #1
    c1c2:	d105      	bne.n	c1d0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    c1c4:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c1c8:	43c0      	mvns	r0, r0
    c1ca:	0400      	lsls	r0, r0, #16
    c1cc:	0c00      	lsrs	r0, r0, #16
    c1ce:	d03a      	beq.n	c246 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c1d0:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    c1d4:	07c0      	lsls	r0, r0, #31
    c1d6:	d036      	beq.n	c246 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    c1d8:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    c1dc:	f8c4 0001 	str.w	r0, [r4, #1]
    c1e0:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    c1e4:	f8a4 0005 	strh.w	r0, [r4, #5]
    c1e8:	79a0      	ldrb	r0, [r4, #6]
    c1ea:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    c1ee:	71a0      	strb	r0, [r4, #6]
    c1f0:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    c1f4:	1c40      	adds	r0, r0, #1
    c1f6:	d00f      	beq.n	c218 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c1f8:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    c1fc:	1c40      	adds	r0, r0, #1
    c1fe:	d00b      	beq.n	c218 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c200:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    c204:	1c40      	adds	r0, r0, #1
    c206:	d007      	beq.n	c218 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c208:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    c20c:	1c40      	adds	r0, r0, #1
    c20e:	d003      	beq.n	c218 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    c210:	2000      	movs	r0, #0
    c212:	f7f8 fc5d 	bl	4ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    c216:	b140      	cbz	r0, c22a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    c218:	2210      	movs	r2, #16
    c21a:	2100      	movs	r1, #0
    c21c:	1de0      	adds	r0, r4, #7
    c21e:	f7ff fbfb 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c222:	2001      	movs	r0, #1
    c224:	7020      	strb	r0, [r4, #0]
    c226:	2000      	movs	r0, #0
    c228:	bd70      	pop	{r4, r5, r6, pc}
    c22a:	f855 0f90 	ldr.w	r0, [r5, #144]!
    c22e:	f8c4 0007 	str.w	r0, [r4, #7]
    c232:	6868      	ldr	r0, [r5, #4]
    c234:	f8c4 000b 	str.w	r0, [r4, #11]
    c238:	68a8      	ldr	r0, [r5, #8]
    c23a:	f8c4 000f 	str.w	r0, [r4, #15]
    c23e:	68e8      	ldr	r0, [r5, #12]
    c240:	f8c4 0013 	str.w	r0, [r4, #19]
    c244:	e7ed      	b.n	c222 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    c246:	2000      	movs	r0, #0
    c248:	e7ec      	b.n	c224 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000c24a <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    c24a:	f002 bc98 	b.w	eb7e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000c24e <sdc_hci_cmd_ip_read_bd_addr>:
    c24e:	f002 bd9e 	b.w	ed8e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000c252 <sdc_hci_cmd_ip_read_local_version_information>:
    c252:	f7fd bd99 	b.w	9d88 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000c256 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    c256:	f002 b97c 	b.w	e552 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000c25a <sdc_hci_cmd_le_add_device_to_white_list>:
    c25a:	f002 b995 	b.w	e588 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000c25e <sdc_hci_cmd_le_clear_resolving_list>:
    c25e:	f002 b9aa 	b.w	e5b6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000c262 <sdc_hci_cmd_le_clear_white_list>:
    c262:	f002 b9b5 	b.w	e5d0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000c266 <sdc_hci_cmd_le_encrypt>:
    c266:	f002 b9bd 	b.w	e5e4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000c26a <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    c26a:	8802      	ldrh	r2, [r0, #0]
    c26c:	800a      	strh	r2, [r1, #0]
    c26e:	f002 b9c2 	b.w	e5f6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000c272 <sdc_hci_cmd_le_long_term_key_request_reply>:
    c272:	8802      	ldrh	r2, [r0, #0]
    c274:	800a      	strh	r2, [r1, #0]
    c276:	f002 b9d7 	b.w	e628 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000c27a <sdc_hci_cmd_le_rand>:
    c27a:	f002 b9ff 	b.w	e67c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000c27e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    c27e:	f002 ba03 	b.w	e688 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000c282 <sdc_hci_cmd_le_read_buffer_size>:
    c282:	f7fd bcc9 	b.w	9c18 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000c286 <sdc_hci_cmd_le_read_channel_map>:
    c286:	f7fd bcd1 	b.w	9c2c <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000c28a <sdc_hci_cmd_le_read_max_data_length>:
    c28a:	f002 ba06 	b.w	e69a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000c28e <sdc_hci_cmd_le_read_phy>:
    c28e:	f002 ba14 	b.w	e6ba <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000c292 <sdc_hci_cmd_le_read_remote_features>:
    c292:	f7fd bcf5 	b.w	9c80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000c296 <sdc_hci_cmd_le_read_resolving_list_size>:
    c296:	f002 ba3b 	b.w	e710 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000c29a <sdc_hci_cmd_le_read_suggested_default_data_length>:
    c29a:	f7fd bd11 	b.w	9cc0 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000c29e <sdc_hci_cmd_le_read_transmit_power>:
    c29e:	f002 ba3b 	b.w	e718 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000c2a2 <sdc_hci_cmd_le_read_white_list_size>:
    c2a2:	f002 ba42 	b.w	e72a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000c2a6 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    c2a6:	f002 ba44 	b.w	e732 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000c2aa <sdc_hci_cmd_le_remove_device_from_white_list>:
    c2aa:	f002 ba5b 	b.w	e764 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000c2ae <sdc_hci_cmd_le_set_address_resolution_enable>:
    c2ae:	f002 ba6e 	b.w	e78e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000c2b2 <sdc_hci_cmd_le_set_adv_data>:
    c2b2:	f002 ba7a 	b.w	e7aa <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000c2b6 <sdc_hci_cmd_le_set_adv_enable>:
    c2b6:	f002 ba8d 	b.w	e7d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000c2ba <sdc_hci_cmd_le_set_adv_params>:
    c2ba:	f002 babe 	b.w	e83a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000c2be <sdc_hci_cmd_le_set_data_length>:
    c2be:	f002 bb51 	b.w	e964 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000c2c2 <sdc_hci_cmd_le_set_default_phy>:
    c2c2:	f7fd bd0d 	b.w	9ce0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000c2c6 <sdc_hci_cmd_le_set_event_mask>:
    c2c6:	b510      	push	{r4, lr}
    c2c8:	f7f7 fe66 	bl	3f98 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    c2cc:	2000      	movs	r0, #0
    c2ce:	bd10      	pop	{r4, pc}

0000c2d0 <sdc_hci_cmd_le_set_phy>:
    c2d0:	f002 bb6f 	b.w	e9b2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000c2d4 <sdc_hci_cmd_le_set_privacy_mode>:
    c2d4:	f002 bb8d 	b.w	e9f2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000c2d8 <sdc_hci_cmd_le_set_random_address>:
    c2d8:	f002 bba1 	b.w	ea1e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000c2dc <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    c2dc:	f002 bbad 	b.w	ea3a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000c2e0 <sdc_hci_cmd_le_set_scan_response_data>:
    c2e0:	f002 bbb4 	b.w	ea4c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000c2e4 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    c2e4:	f002 bbc7 	b.w	ea76 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000c2e8 <sdc_hci_cmd_lc_disconnect>:
    c2e8:	f002 b8df 	b.w	e4aa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000c2ec <sdc_hci_cmd_lc_read_remote_version_information>:
    c2ec:	f002 bd5b 	b.w	eda6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    c2f0:	b570      	push	{r4, r5, r6, lr}
    c2f2:	880b      	ldrh	r3, [r1, #0]
    c2f4:	7f04      	ldrb	r4, [r0, #28]
    c2f6:	f100 0524 	add.w	r5, r0, #36	; 0x24
    c2fa:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    c2fe:	8802      	ldrh	r2, [r0, #0]
    c300:	4435      	add	r5, r6
    c302:	1da4      	adds	r4, r4, #6
    c304:	882d      	ldrh	r5, [r5, #0]
    c306:	4422      	add	r2, r4
    c308:	b292      	uxth	r2, r2
    c30a:	4425      	add	r5, r4
    c30c:	1e54      	subs	r4, r2, #1
    c30e:	442c      	add	r4, r5
    c310:	fb94 f4f2 	sdiv	r4, r4, r2
    c314:	fb02 6204 	mla	r2, r2, r4, r6
    c318:	8840      	ldrh	r0, [r0, #2]
    c31a:	b292      	uxth	r2, r2
    c31c:	4290      	cmp	r0, r2
    c31e:	d903      	bls.n	c328 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    c320:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    c324:	4310      	orrs	r0, r2
    c326:	e002      	b.n	c32e <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    c328:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    c32c:	4398      	bics	r0, r3
    c32e:	8008      	strh	r0, [r1, #0]
    c330:	bd70      	pop	{r4, r5, r6, pc}
    c332:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    c336:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c33a:	429a      	cmp	r2, r3
    c33c:	d107      	bne.n	c34e <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c33e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    c342:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    c346:	4288      	cmp	r0, r1
    c348:	d001      	beq.n	c34e <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    c34a:	2001      	movs	r0, #1
    c34c:	4770      	bx	lr
    c34e:	2000      	movs	r0, #0
    c350:	4770      	bx	lr

0000c352 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    c352:	b570      	push	{r4, r5, r6, lr}
    c354:	7f00      	ldrb	r0, [r0, #28]
    c356:	461c      	mov	r4, r3
    c358:	1d80      	adds	r0, r0, #6
    c35a:	4408      	add	r0, r1
    c35c:	4613      	mov	r3, r2
    c35e:	8809      	ldrh	r1, [r1, #0]
    c360:	9a04      	ldr	r2, [sp, #16]
    c362:	1cc9      	adds	r1, r1, #3
    c364:	b289      	uxth	r1, r1
    c366:	1915      	adds	r5, r2, r4
    c368:	1ec0      	subs	r0, r0, #3
    c36a:	428d      	cmp	r5, r1
    c36c:	d805      	bhi.n	c37a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    c36e:	1881      	adds	r1, r0, r2
    c370:	4622      	mov	r2, r4
    c372:	4618      	mov	r0, r3
    c374:	f7ff fad6 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c378:	e000      	b.n	c37c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    c37a:	2400      	movs	r4, #0
    c37c:	4620      	mov	r0, r4
    c37e:	bd70      	pop	{r4, r5, r6, pc}

0000c380 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    c380:	b570      	push	{r4, r5, r6, lr}
    c382:	7f00      	ldrb	r0, [r0, #28]
    c384:	461c      	mov	r4, r3
    c386:	1d80      	adds	r0, r0, #6
    c388:	4408      	add	r0, r1
    c38a:	4613      	mov	r3, r2
    c38c:	8809      	ldrh	r1, [r1, #0]
    c38e:	9a04      	ldr	r2, [sp, #16]
    c390:	1cc9      	adds	r1, r1, #3
    c392:	b289      	uxth	r1, r1
    c394:	1915      	adds	r5, r2, r4
    c396:	1ec0      	subs	r0, r0, #3
    c398:	428d      	cmp	r5, r1
    c39a:	d805      	bhi.n	c3a8 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    c39c:	4410      	add	r0, r2
    c39e:	4622      	mov	r2, r4
    c3a0:	4619      	mov	r1, r3
    c3a2:	f7ff fabf 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c3a6:	e000      	b.n	c3aa <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    c3a8:	2400      	movs	r4, #0
    c3aa:	4620      	mov	r0, r4
    c3ac:	bd70      	pop	{r4, r5, r6, pc}

0000c3ae <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    c3ae:	8881      	ldrh	r1, [r0, #4]
    c3b0:	88c0      	ldrh	r0, [r0, #6]
    c3b2:	4288      	cmp	r0, r1
    c3b4:	d101      	bne.n	c3ba <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    c3b6:	2001      	movs	r0, #1
    c3b8:	4770      	bx	lr
    c3ba:	2000      	movs	r0, #0
    c3bc:	4770      	bx	lr

0000c3be <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    c3be:	8881      	ldrh	r1, [r0, #4]
    c3c0:	8900      	ldrh	r0, [r0, #8]
    c3c2:	4288      	cmp	r0, r1
    c3c4:	d101      	bne.n	c3ca <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    c3c6:	2001      	movs	r0, #1
    c3c8:	4770      	bx	lr
    c3ca:	2000      	movs	r0, #0
    c3cc:	4770      	bx	lr

0000c3ce <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    c3ce:	b570      	push	{r4, r5, r6, lr}
    c3d0:	4604      	mov	r4, r0
    c3d2:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c3d6:	8880      	ldrh	r0, [r0, #4]
    c3d8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c3dc:	4401      	add	r1, r0
    c3de:	8a20      	ldrh	r0, [r4, #16]
    c3e0:	2800      	cmp	r0, #0
    c3e2:	d01a      	beq.n	c41a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    c3e4:	89a2      	ldrh	r2, [r4, #12]
    c3e6:	2500      	movs	r5, #0
    c3e8:	4410      	add	r0, r2
    c3ea:	b280      	uxth	r0, r0
    c3ec:	81a0      	strh	r0, [r4, #12]
    c3ee:	880a      	ldrh	r2, [r1, #0]
    c3f0:	4290      	cmp	r0, r2
    c3f2:	d905      	bls.n	c400 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    c3f4:	f240 1163 	movw	r1, #355	; 0x163
    c3f8:	f04f 0014 	mov.w	r0, #20
    c3fc:	f7f7 fc3c 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c400:	d109      	bne.n	c416 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    c402:	69a0      	ldr	r0, [r4, #24]
    c404:	b108      	cbz	r0, c40a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    c406:	7f40      	ldrb	r0, [r0, #29]
    c408:	7088      	strb	r0, [r1, #2]
    c40a:	f104 0104 	add.w	r1, r4, #4
    c40e:	4620      	mov	r0, r4
    c410:	f7ff ff6e 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c414:	81a5      	strh	r5, [r4, #12]
    c416:	8225      	strh	r5, [r4, #16]
    c418:	2001      	movs	r0, #1
    c41a:	bd70      	pop	{r4, r5, r6, pc}

0000c41c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    c41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c41e:	4604      	mov	r4, r0
    c420:	f100 0324 	add.w	r3, r0, #36	; 0x24
    c424:	88c0      	ldrh	r0, [r0, #6]
    c426:	460e      	mov	r6, r1
    c428:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c42c:	8a60      	ldrh	r0, [r4, #18]
    c42e:	19d9      	adds	r1, r3, r7
    c430:	b108      	cbz	r0, c436 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    c432:	42b0      	cmp	r0, r6
    c434:	d201      	bcs.n	c43a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    c436:	2000      	movs	r0, #0
    c438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c43a:	89e0      	ldrh	r0, [r4, #14]
    c43c:	2500      	movs	r5, #0
    c43e:	b140      	cbz	r0, c452 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    c440:	f8b1 c000 	ldrh.w	ip, [r1]
    c444:	4560      	cmp	r0, ip
    c446:	d008      	beq.n	c45a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    c448:	f240 214b 	movw	r1, #587	; 0x24b
    c44c:	2014      	movs	r0, #20
    c44e:	f7f7 fc13 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c452:	7f60      	ldrb	r0, [r4, #29]
    c454:	7088      	strb	r0, [r1, #2]
    c456:	800d      	strh	r5, [r1, #0]
    c458:	e00e      	b.n	c478 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    c45a:	f894 c01c 	ldrb.w	ip, [r4, #28]
    c45e:	4418      	add	r0, r3
    c460:	f10c 0c06 	add.w	ip, ip, #6
    c464:	44bc      	add	ip, r7
    c466:	4460      	add	r0, ip
    c468:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    c46c:	f820 cc03 	strh.w	ip, [r0, #-3]
    c470:	f894 c020 	ldrb.w	ip, [r4, #32]
    c474:	f800 cc01 	strb.w	ip, [r0, #-1]
    c478:	89e0      	ldrh	r0, [r4, #14]
    c47a:	4430      	add	r0, r6
    c47c:	81e0      	strh	r0, [r4, #14]
    c47e:	8808      	ldrh	r0, [r1, #0]
    c480:	4430      	add	r0, r6
    c482:	8008      	strh	r0, [r1, #0]
    c484:	b19a      	cbz	r2, c4ae <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    c486:	1da1      	adds	r1, r4, #6
    c488:	4620      	mov	r0, r4
    c48a:	f7ff ff31 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c48e:	81e5      	strh	r5, [r4, #14]
    c490:	7f60      	ldrb	r0, [r4, #29]
    c492:	1c40      	adds	r0, r0, #1
    c494:	7760      	strb	r0, [r4, #29]
    c496:	7da0      	ldrb	r0, [r4, #22]
    c498:	f88d 0000 	strb.w	r0, [sp]
    c49c:	9800      	ldr	r0, [sp, #0]
    c49e:	9000      	str	r0, [sp, #0]
    c4a0:	f89d 0000 	ldrb.w	r0, [sp]
    c4a4:	b178      	cbz	r0, c4c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    c4a6:	88e0      	ldrh	r0, [r4, #6]
    c4a8:	82a0      	strh	r0, [r4, #20]
    c4aa:	75a5      	strb	r5, [r4, #22]
    c4ac:	e00b      	b.n	c4c6 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    c4ae:	7f20      	ldrb	r0, [r4, #28]
    c4b0:	89e1      	ldrh	r1, [r4, #14]
    c4b2:	1d80      	adds	r0, r0, #6
    c4b4:	4438      	add	r0, r7
    c4b6:	4419      	add	r1, r3
    c4b8:	4408      	add	r0, r1
    c4ba:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    c4be:	83e1      	strh	r1, [r4, #30]
    c4c0:	7880      	ldrb	r0, [r0, #2]
    c4c2:	f884 0020 	strb.w	r0, [r4, #32]
    c4c6:	8265      	strh	r5, [r4, #18]
    c4c8:	2001      	movs	r0, #1
    c4ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c4cc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    c4cc:	b510      	push	{r4, lr}
    c4ce:	4604      	mov	r4, r0
    c4d0:	88c0      	ldrh	r0, [r0, #6]
    c4d2:	88a1      	ldrh	r1, [r4, #4]
    c4d4:	4281      	cmp	r1, r0
    c4d6:	d007      	beq.n	c4e8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c4d8:	89a0      	ldrh	r0, [r4, #12]
    c4da:	b928      	cbnz	r0, c4e8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c4dc:	8a20      	ldrh	r0, [r4, #16]
    c4de:	b918      	cbnz	r0, c4e8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    c4e0:	88a0      	ldrh	r0, [r4, #4]
    c4e2:	8aa1      	ldrh	r1, [r4, #20]
    c4e4:	4288      	cmp	r0, r1
    c4e6:	d101      	bne.n	c4ec <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    c4e8:	2000      	movs	r0, #0
    c4ea:	bd10      	pop	{r4, pc}
    c4ec:	1d21      	adds	r1, r4, #4
    c4ee:	4620      	mov	r0, r4
    c4f0:	f7ff fefe 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c4f4:	2000      	movs	r0, #0
    c4f6:	8220      	strh	r0, [r4, #16]
    c4f8:	2001      	movs	r0, #1
    c4fa:	bd10      	pop	{r4, pc}

0000c4fc <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    c4fc:	b510      	push	{r4, lr}
    c4fe:	4604      	mov	r4, r0
    c500:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c504:	88c0      	ldrh	r0, [r0, #6]
    c506:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c50a:	4402      	add	r2, r0
    c50c:	8820      	ldrh	r0, [r4, #0]
    c50e:	2845      	cmp	r0, #69	; 0x45
    c510:	d200      	bcs.n	c514 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    c512:	2045      	movs	r0, #69	; 0x45
    c514:	4288      	cmp	r0, r1
    c516:	d204      	bcs.n	c522 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    c518:	f240 1119 	movw	r1, #281	; 0x119
    c51c:	2014      	movs	r0, #20
    c51e:	f7f7 fbab 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c522:	7de0      	ldrb	r0, [r4, #23]
    c524:	2800      	cmp	r0, #0
    c526:	d003      	beq.n	c530 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    c528:	8810      	ldrh	r0, [r2, #0]
    c52a:	4288      	cmp	r0, r1
    c52c:	d201      	bcs.n	c532 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    c52e:	2000      	movs	r0, #0
    c530:	bd10      	pop	{r4, pc}
    c532:	8011      	strh	r1, [r2, #0]
    c534:	1da1      	adds	r1, r4, #6
    c536:	4620      	mov	r0, r4
    c538:	f7ff feda 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c53c:	2000      	movs	r0, #0
    c53e:	75e0      	strb	r0, [r4, #23]
    c540:	2001      	movs	r0, #1
    c542:	bd10      	pop	{r4, pc}

0000c544 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c548:	8941      	ldrh	r1, [r0, #10]
    c54a:	8886      	ldrh	r6, [r0, #4]
    c54c:	4604      	mov	r4, r0
    c54e:	2500      	movs	r5, #0
    c550:	f100 070a 	add.w	r7, r0, #10
    c554:	e006      	b.n	c564 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    c556:	4639      	mov	r1, r7
    c558:	4620      	mov	r0, r4
    c55a:	f7ff fec9 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c55e:	1c6d      	adds	r5, r5, #1
    c560:	8961      	ldrh	r1, [r4, #10]
    c562:	b2ad      	uxth	r5, r5
    c564:	42b1      	cmp	r1, r6
    c566:	d1f6      	bne.n	c556 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    c568:	4628      	mov	r0, r5
    c56a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c56e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    c56e:	b530      	push	{r4, r5, lr}
    c570:	88c4      	ldrh	r4, [r0, #6]
    c572:	8881      	ldrh	r1, [r0, #4]
    c574:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c578:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c57c:	4413      	add	r3, r2
    c57e:	8882      	ldrh	r2, [r0, #4]
    c580:	8a85      	ldrh	r5, [r0, #20]
    c582:	42aa      	cmp	r2, r5
    c584:	d012      	beq.n	c5ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c586:	42a1      	cmp	r1, r4
    c588:	d010      	beq.n	c5ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c58a:	8981      	ldrh	r1, [r0, #12]
    c58c:	b971      	cbnz	r1, c5ac <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    c58e:	6982      	ldr	r2, [r0, #24]
    c590:	b172      	cbz	r2, c5b0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c592:	4610      	mov	r0, r2
    c594:	f7ff ff13 	bl	c3be <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    c598:	b950      	cbnz	r0, c5b0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c59a:	8910      	ldrh	r0, [r2, #8]
    c59c:	3224      	adds	r2, #36	; 0x24
    c59e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    c5a2:	4410      	add	r0, r2
    c5a4:	7899      	ldrb	r1, [r3, #2]
    c5a6:	7880      	ldrb	r0, [r0, #2]
    c5a8:	4288      	cmp	r0, r1
    c5aa:	d101      	bne.n	c5b0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    c5ac:	2000      	movs	r0, #0
    c5ae:	bd30      	pop	{r4, r5, pc}
    c5b0:	4618      	mov	r0, r3
    c5b2:	bd30      	pop	{r4, r5, pc}

0000c5b4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    c5b4:	7f00      	ldrb	r0, [r0, #28]
    c5b6:	1d80      	adds	r0, r0, #6
    c5b8:	4408      	add	r0, r1
    c5ba:	1ec0      	subs	r0, r0, #3
    c5bc:	6010      	str	r0, [r2, #0]
    c5be:	8808      	ldrh	r0, [r1, #0]
    c5c0:	4770      	bx	lr

0000c5c2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    c5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5c6:	460e      	mov	r6, r1
    c5c8:	88c1      	ldrh	r1, [r0, #6]
    c5ca:	8902      	ldrh	r2, [r0, #8]
    c5cc:	4604      	mov	r4, r0
    c5ce:	f100 0824 	add.w	r8, r0, #36	; 0x24
    c5d2:	8800      	ldrh	r0, [r0, #0]
    c5d4:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    c5d8:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    c5dc:	2845      	cmp	r0, #69	; 0x45
    c5de:	d200      	bcs.n	c5e2 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    c5e0:	2045      	movs	r0, #69	; 0x45
    c5e2:	42b0      	cmp	r0, r6
    c5e4:	d203      	bcs.n	c5ee <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    c5e6:	21db      	movs	r1, #219	; 0xdb
    c5e8:	2014      	movs	r0, #20
    c5ea:	f7f7 fb45 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5ee:	4610      	mov	r0, r2
    c5f0:	f7ff fe9f 	bl	c332 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c5f4:	b110      	cbz	r0, c5fc <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    c5f6:	2000      	movs	r0, #0
    c5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c5fc:	42af      	cmp	r7, r5
    c5fe:	d908      	bls.n	c612 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c600:	7f21      	ldrb	r1, [r4, #28]
    c602:	1b78      	subs	r0, r7, r5
    c604:	1a40      	subs	r0, r0, r1
    c606:	1f80      	subs	r0, r0, #6
    c608:	4286      	cmp	r6, r0
    c60a:	dd02      	ble.n	c612 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    c60c:	2000      	movs	r0, #0
    c60e:	75e0      	strb	r0, [r4, #23]
    c610:	e7f1      	b.n	c5f6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    c612:	eb08 0005 	add.w	r0, r8, r5
    c616:	2101      	movs	r1, #1
    c618:	8006      	strh	r6, [r0, #0]
    c61a:	75e1      	strb	r1, [r4, #23]
    c61c:	e7ec      	b.n	c5f8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000c61e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    c61e:	b538      	push	{r3, r4, r5, lr}
    c620:	88c4      	ldrh	r4, [r0, #6]
    c622:	8881      	ldrh	r1, [r0, #4]
    c624:	f100 0224 	add.w	r2, r0, #36	; 0x24
    c628:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    c62c:	441a      	add	r2, r3
    c62e:	42a1      	cmp	r1, r4
    c630:	d010      	beq.n	c654 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c632:	8983      	ldrh	r3, [r0, #12]
    c634:	8a05      	ldrh	r5, [r0, #16]
    c636:	8812      	ldrh	r2, [r2, #0]
    c638:	442b      	add	r3, r5
    c63a:	4293      	cmp	r3, r2
    c63c:	d308      	bcc.n	c650 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    c63e:	f8ad 1000 	strh.w	r1, [sp]
    c642:	4669      	mov	r1, sp
    c644:	f7ff fe54 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c648:	f8bd 0000 	ldrh.w	r0, [sp]
    c64c:	42a0      	cmp	r0, r4
    c64e:	d001      	beq.n	c654 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    c650:	2001      	movs	r0, #1
    c652:	bd38      	pop	{r3, r4, r5, pc}
    c654:	2000      	movs	r0, #0
    c656:	bd38      	pop	{r3, r4, r5, pc}

0000c658 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    c658:	b570      	push	{r4, r5, r6, lr}
    c65a:	88c6      	ldrh	r6, [r0, #6]
    c65c:	8885      	ldrh	r5, [r0, #4]
    c65e:	4603      	mov	r3, r0
    c660:	f100 0424 	add.w	r4, r0, #36	; 0x24
    c664:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    c668:	4420      	add	r0, r4
    c66a:	42b5      	cmp	r5, r6
    c66c:	d102      	bne.n	c674 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    c66e:	2000      	movs	r0, #0
    c670:	8218      	strh	r0, [r3, #16]
    c672:	bd70      	pop	{r4, r5, r6, pc}
    c674:	8804      	ldrh	r4, [r0, #0]
    c676:	899d      	ldrh	r5, [r3, #12]
    c678:	7f1e      	ldrb	r6, [r3, #28]
    c67a:	1b64      	subs	r4, r4, r5
    c67c:	4435      	add	r5, r6
    c67e:	4428      	add	r0, r5
    c680:	880d      	ldrh	r5, [r1, #0]
    c682:	b2a4      	uxth	r4, r4
    c684:	1cc0      	adds	r0, r0, #3
    c686:	42a5      	cmp	r5, r4
    c688:	d900      	bls.n	c68c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    c68a:	800c      	strh	r4, [r1, #0]
    c68c:	899c      	ldrh	r4, [r3, #12]
    c68e:	b124      	cbz	r4, c69a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    c690:	2400      	movs	r4, #0
    c692:	7014      	strb	r4, [r2, #0]
    c694:	8809      	ldrh	r1, [r1, #0]
    c696:	8219      	strh	r1, [r3, #16]
    c698:	bd70      	pop	{r4, r5, r6, pc}
    c69a:	2401      	movs	r4, #1
    c69c:	e7f9      	b.n	c692 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000c69e <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    c69e:	b508      	push	{r3, lr}
    c6a0:	8a81      	ldrh	r1, [r0, #20]
    c6a2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c6a6:	3aff      	subs	r2, #255	; 0xff
    c6a8:	d008      	beq.n	c6bc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    c6aa:	7d82      	ldrb	r2, [r0, #22]
    c6ac:	f88d 2000 	strb.w	r2, [sp]
    c6b0:	9a00      	ldr	r2, [sp, #0]
    c6b2:	9200      	str	r2, [sp, #0]
    c6b4:	f89d 2000 	ldrb.w	r2, [sp]
    c6b8:	b952      	cbnz	r2, c6d0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    c6ba:	e004      	b.n	c6c6 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    c6bc:	f44f 7162 	mov.w	r1, #904	; 0x388
    c6c0:	2014      	movs	r0, #20
    c6c2:	f7f7 fad9 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6c6:	8880      	ldrh	r0, [r0, #4]
    c6c8:	4281      	cmp	r1, r0
    c6ca:	d101      	bne.n	c6d0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    c6cc:	2000      	movs	r0, #0
    c6ce:	bd08      	pop	{r3, pc}
    c6d0:	2001      	movs	r0, #1
    c6d2:	bd08      	pop	{r3, pc}

0000c6d4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    c6d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c6d8:	8281      	strh	r1, [r0, #20]
    c6da:	2100      	movs	r1, #0
    c6dc:	7581      	strb	r1, [r0, #22]
    c6de:	4770      	bx	lr

0000c6e0 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    c6e0:	b510      	push	{r4, lr}
    c6e2:	8a81      	ldrh	r1, [r0, #20]
    c6e4:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    c6e8:	3aff      	subs	r2, #255	; 0xff
    c6ea:	d004      	beq.n	c6f6 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    c6ec:	f44f 7159 	mov.w	r1, #868	; 0x364
    c6f0:	2014      	movs	r0, #20
    c6f2:	f7f7 fac1 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6f6:	88c1      	ldrh	r1, [r0, #6]
    c6f8:	8281      	strh	r1, [r0, #20]
    c6fa:	89c1      	ldrh	r1, [r0, #14]
    c6fc:	b109      	cbz	r1, c702 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    c6fe:	2101      	movs	r1, #1
    c700:	e000      	b.n	c704 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    c702:	2100      	movs	r1, #0
    c704:	7581      	strb	r1, [r0, #22]
    c706:	bd10      	pop	{r4, pc}

0000c708 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    c708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c70c:	461d      	mov	r5, r3
    c70e:	4616      	mov	r6, r2
    c710:	9f06      	ldr	r7, [sp, #24]
    c712:	460b      	mov	r3, r1
    c714:	4604      	mov	r4, r0
    c716:	463a      	mov	r2, r7
    c718:	4629      	mov	r1, r5
    c71a:	4630      	mov	r0, r6
    c71c:	f000 f84f 	bl	c7be <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c720:	4283      	cmp	r3, r0
    c722:	d201      	bcs.n	c728 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    c724:	21a8      	movs	r1, #168	; 0xa8
    c726:	e018      	b.n	c75a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c728:	1ce0      	adds	r0, r4, #3
    c72a:	f020 0103 	bic.w	r1, r0, #3
    c72e:	4620      	mov	r0, r4
    c730:	42a1      	cmp	r1, r4
    c732:	d001      	beq.n	c738 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    c734:	21a9      	movs	r1, #169	; 0xa9
    c736:	e010      	b.n	c75a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    c738:	2224      	movs	r2, #36	; 0x24
    c73a:	2100      	movs	r1, #0
    c73c:	f7ff f96c 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c740:	f64f 70ff 	movw	r0, #65535	; 0xffff
    c744:	82a0      	strh	r0, [r4, #20]
    c746:	19a8      	adds	r0, r5, r6
    c748:	1d80      	adds	r0, r0, #6
    c74a:	4378      	muls	r0, r7
    c74c:	b280      	uxth	r0, r0
    c74e:	7725      	strb	r5, [r4, #28]
    c750:	8060      	strh	r0, [r4, #2]
    c752:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    c756:	d903      	bls.n	c760 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    c758:	21af      	movs	r1, #175	; 0xaf
    c75a:	2014      	movs	r0, #20
    c75c:	f7f7 fa8c 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c760:	8026      	strh	r6, [r4, #0]
    c762:	2000      	movs	r0, #0
    c764:	7760      	strb	r0, [r4, #29]
    c766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c76a <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    c76a:	6181      	str	r1, [r0, #24]
    c76c:	6188      	str	r0, [r1, #24]
    c76e:	4770      	bx	lr

0000c770 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c774:	460b      	mov	r3, r1
    c776:	4604      	mov	r4, r0
    c778:	f100 0124 	add.w	r1, r0, #36	; 0x24
    c77c:	8905      	ldrh	r5, [r0, #8]
    c77e:	8946      	ldrh	r6, [r0, #10]
    c780:	8880      	ldrh	r0, [r0, #4]
    c782:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    c786:	4439      	add	r1, r7
    c788:	460f      	mov	r7, r1
    c78a:	4285      	cmp	r5, r0
    c78c:	d102      	bne.n	c794 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    c78e:	2000      	movs	r0, #0
    c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c794:	b10a      	cbz	r2, c79a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    c796:	1cc8      	adds	r0, r1, #3
    c798:	6010      	str	r0, [r2, #0]
    c79a:	b123      	cbz	r3, c7a6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    c79c:	7f22      	ldrb	r2, [r4, #28]
    c79e:	1cf9      	adds	r1, r7, #3
    c7a0:	4618      	mov	r0, r3
    c7a2:	f7ff f8bf 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    c7a6:	883f      	ldrh	r7, [r7, #0]
    c7a8:	f104 0108 	add.w	r1, r4, #8
    c7ac:	4620      	mov	r0, r4
    c7ae:	f7ff fd9f 	bl	c2f0 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    c7b2:	42b5      	cmp	r5, r6
    c7b4:	d101      	bne.n	c7ba <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    c7b6:	8920      	ldrh	r0, [r4, #8]
    c7b8:	8160      	strh	r0, [r4, #10]
    c7ba:	4638      	mov	r0, r7
    c7bc:	e7e8      	b.n	c790 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000c7be <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    c7be:	4401      	add	r1, r0
    c7c0:	1d89      	adds	r1, r1, #6
    c7c2:	4351      	muls	r1, r2
    c7c4:	b28a      	uxth	r2, r1
    c7c6:	2100      	movs	r1, #0
    c7c8:	2845      	cmp	r0, #69	; 0x45
    c7ca:	d201      	bcs.n	c7d0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    c7cc:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    c7d0:	3224      	adds	r2, #36	; 0x24
    c7d2:	1850      	adds	r0, r2, r1
    c7d4:	b280      	uxth	r0, r0
    c7d6:	4770      	bx	lr

0000c7d8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    c7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7dc:	4688      	mov	r8, r1
    c7de:	88c1      	ldrh	r1, [r0, #6]
    c7e0:	4604      	mov	r4, r0
    c7e2:	8900      	ldrh	r0, [r0, #8]
    c7e4:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    c7e8:	f104 0524 	add.w	r5, r4, #36	; 0x24
    c7ec:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    c7f0:	eb05 0906 	add.w	r9, r5, r6
    c7f4:	f7ff fd9d 	bl	c332 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    c7f8:	2200      	movs	r2, #0
    c7fa:	b998      	cbnz	r0, c824 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    c7fc:	8820      	ldrh	r0, [r4, #0]
    c7fe:	2845      	cmp	r0, #69	; 0x45
    c800:	d200      	bcs.n	c804 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    c802:	2045      	movs	r0, #69	; 0x45
    c804:	42b7      	cmp	r7, r6
    c806:	d906      	bls.n	c816 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c808:	7f23      	ldrb	r3, [r4, #28]
    c80a:	1bb9      	subs	r1, r7, r6
    c80c:	1ac9      	subs	r1, r1, r3
    c80e:	1f89      	subs	r1, r1, #6
    c810:	4281      	cmp	r1, r0
    c812:	da00      	bge.n	c816 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    c814:	4608      	mov	r0, r1
    c816:	89e1      	ldrh	r1, [r4, #14]
    c818:	b111      	cbz	r1, c820 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    c81a:	f8b9 3000 	ldrh.w	r3, [r9]
    c81e:	1ac0      	subs	r0, r0, r3
    c820:	4540      	cmp	r0, r8
    c822:	da03      	bge.n	c82c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    c824:	8262      	strh	r2, [r4, #18]
    c826:	2000      	movs	r0, #0
    c828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c82c:	7f20      	ldrb	r0, [r4, #28]
    c82e:	4429      	add	r1, r5
    c830:	1d80      	adds	r0, r0, #6
    c832:	4430      	add	r0, r6
    c834:	4408      	add	r0, r1
    c836:	f8a4 8012 	strh.w	r8, [r4, #18]
    c83a:	1ec0      	subs	r0, r0, #3
    c83c:	e7f4      	b.n	c828 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000c83e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    c83e:	2100      	movs	r1, #0
    c840:	81c1      	strh	r1, [r0, #14]
    c842:	8241      	strh	r1, [r0, #18]
    c844:	7581      	strb	r1, [r0, #22]
    c846:	4770      	bx	lr

0000c848 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    c848:	b570      	push	{r4, r5, r6, lr}
    c84a:	2300      	movs	r3, #0
    c84c:	2908      	cmp	r1, #8
    c84e:	d204      	bcs.n	c85a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    c850:	f240 11cb 	movw	r1, #459	; 0x1cb
    c854:	2015      	movs	r0, #21
    c856:	f7f7 fa0f 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c85a:	6802      	ldr	r2, [r0, #0]
    c85c:	b90a      	cbnz	r2, c862 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    c85e:	e01e      	b.n	c89e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c860:	4610      	mov	r0, r2
    c862:	6802      	ldr	r2, [r0, #0]
    c864:	8893      	ldrh	r3, [r2, #4]
    c866:	428b      	cmp	r3, r1
    c868:	d002      	beq.n	c870 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    c86a:	6813      	ldr	r3, [r2, #0]
    c86c:	2b00      	cmp	r3, #0
    c86e:	d1f7      	bne.n	c860 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    c870:	8894      	ldrh	r4, [r2, #4]
    c872:	4613      	mov	r3, r2
    c874:	428c      	cmp	r4, r1
    c876:	d101      	bne.n	c87c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    c878:	6811      	ldr	r1, [r2, #0]
    c87a:	e00d      	b.n	c898 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    c87c:	f101 0508 	add.w	r5, r1, #8
    c880:	b2ae      	uxth	r6, r5
    c882:	2500      	movs	r5, #0
    c884:	42b4      	cmp	r4, r6
    c886:	d309      	bcc.n	c89c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    c888:	1a64      	subs	r4, r4, r1
    c88a:	4411      	add	r1, r2
    c88c:	600d      	str	r5, [r1, #0]
    c88e:	808c      	strh	r4, [r1, #4]
    c890:	6802      	ldr	r2, [r0, #0]
    c892:	6812      	ldr	r2, [r2, #0]
    c894:	6002      	str	r2, [r0, #0]
    c896:	600a      	str	r2, [r1, #0]
    c898:	6001      	str	r1, [r0, #0]
    c89a:	e000      	b.n	c89e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    c89c:	2300      	movs	r3, #0
    c89e:	4618      	mov	r0, r3
    c8a0:	bd70      	pop	{r4, r5, r6, pc}

0000c8a2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    c8a2:	b510      	push	{r4, lr}
    c8a4:	000c      	movs	r4, r1
    c8a6:	d006      	beq.n	c8b6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    c8a8:	2c08      	cmp	r4, #8
    c8aa:	d209      	bcs.n	c8c0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    c8ac:	f240 1195 	movw	r1, #405	; 0x195
    c8b0:	2015      	movs	r0, #21
    c8b2:	f7f7 f9e1 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c8b6:	b108      	cbz	r0, c8bc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    c8b8:	2100      	movs	r1, #0
    c8ba:	6001      	str	r1, [r0, #0]
    c8bc:	2000      	movs	r0, #0
    c8be:	bd10      	pop	{r4, pc}
    c8c0:	b118      	cbz	r0, c8ca <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    c8c2:	b2a1      	uxth	r1, r4
    c8c4:	6800      	ldr	r0, [r0, #0]
    c8c6:	f000 f814 	bl	c8f2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    c8ca:	1d20      	adds	r0, r4, #4
    c8cc:	bd10      	pop	{r4, pc}

0000c8ce <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    c8ce:	2100      	movs	r1, #0
    c8d0:	6802      	ldr	r2, [r0, #0]
    c8d2:	e003      	b.n	c8dc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    c8d4:	8893      	ldrh	r3, [r2, #4]
    c8d6:	6812      	ldr	r2, [r2, #0]
    c8d8:	4419      	add	r1, r3
    c8da:	b289      	uxth	r1, r1
    c8dc:	2a00      	cmp	r2, #0
    c8de:	d1f9      	bne.n	c8d4 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    c8e0:	f000 b807 	b.w	c8f2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000c8e4 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    c8e4:	2300      	movs	r3, #0
    c8e6:	600b      	str	r3, [r1, #0]
    c8e8:	808a      	strh	r2, [r1, #4]
    c8ea:	6802      	ldr	r2, [r0, #0]
    c8ec:	600a      	str	r2, [r1, #0]
    c8ee:	6001      	str	r1, [r0, #0]
    c8f0:	4770      	bx	lr
    c8f2:	2300      	movs	r3, #0
    c8f4:	6043      	str	r3, [r0, #4]
    c8f6:	1d02      	adds	r2, r0, #4
    c8f8:	8101      	strh	r1, [r0, #8]
    c8fa:	6002      	str	r2, [r0, #0]
    c8fc:	4770      	bx	lr

0000c8fe <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    c8fe:	f5a0 437f 	sub.w	r3, r0, #65280	; 0xff00
    c902:	3bff      	subs	r3, #255	; 0xff
    c904:	d001      	beq.n	c90a <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0xc>
    c906:	2902      	cmp	r1, #2
    c908:	d301      	bcc.n	c90e <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x10>
    c90a:	2000      	movs	r0, #0
    c90c:	4770      	bx	lr
    c90e:	f7f7 bc7b 	b.w	4208 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x64>

0000c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    c912:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    c916:	3aff      	subs	r2, #255	; 0xff
    c918:	d001      	beq.n	c91e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xc>
    c91a:	2902      	cmp	r1, #2
    c91c:	d301      	bcc.n	c922 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x10>
    c91e:	2000      	movs	r0, #0
    c920:	4770      	bx	lr
    c922:	f7f7 bcab 	b.w	427c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd8>

0000c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    c926:	b570      	push	{r4, r5, r6, lr}
    c928:	4605      	mov	r5, r0
    c92a:	460c      	mov	r4, r1
    c92c:	4608      	mov	r0, r1
    c92e:	f000 f96e 	bl	cc0e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    c932:	b108      	cbz	r0, c938 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    c934:	2010      	movs	r0, #16
    c936:	bd70      	pop	{r4, r5, r6, pc}
    c938:	2d02      	cmp	r5, #2
    c93a:	d301      	bcc.n	c940 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x1a>
    c93c:	2007      	movs	r0, #7
    c93e:	bd70      	pop	{r4, r5, r6, pc}
    c940:	7025      	strb	r5, [r4, #0]
    c942:	2000      	movs	r0, #0
    c944:	8060      	strh	r0, [r4, #2]
    c946:	bd70      	pop	{r4, r5, r6, pc}
    c948:	b510      	push	{r4, lr}
    c94a:	4604      	mov	r4, r0
    c94c:	f7f7 fce2 	bl	4314 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x170>
    c950:	42a0      	cmp	r0, r4
    c952:	d901      	bls.n	c958 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x32>
    c954:	2001      	movs	r0, #1
    c956:	bd10      	pop	{r4, pc}
    c958:	2000      	movs	r0, #0
    c95a:	bd10      	pop	{r4, pc}
    c95c:	4770      	bx	lr

0000c95e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    c95e:	b570      	push	{r4, r5, r6, lr}
    c960:	460e      	mov	r6, r1
    c962:	461d      	mov	r5, r3
    c964:	4611      	mov	r1, r2
    c966:	f000 f811 	bl	c98c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    c96a:	4604      	mov	r4, r0
    c96c:	4629      	mov	r1, r5
    c96e:	4630      	mov	r0, r6
    c970:	f000 f803 	bl	c97a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    c974:	4420      	add	r0, r4
    c976:	1d00      	adds	r0, r0, #4
    c978:	bd70      	pop	{r4, r5, r6, pc}
    c97a:	b510      	push	{r4, lr}
    c97c:	460a      	mov	r2, r1
    c97e:	2101      	movs	r1, #1
    c980:	f7ff ff1d 	bl	c7be <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c984:	1cc0      	adds	r0, r0, #3
    c986:	f020 0003 	bic.w	r0, r0, #3
    c98a:	bd10      	pop	{r4, pc}
    c98c:	b510      	push	{r4, lr}
    c98e:	460a      	mov	r2, r1
    c990:	2101      	movs	r1, #1
    c992:	f7ff ff14 	bl	c7be <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    c996:	1cc0      	adds	r0, r0, #3
    c998:	f020 0003 	bic.w	r0, r0, #3
    c99c:	bd10      	pop	{r4, pc}
    c99e:	b109      	cbz	r1, c9a4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    c9a0:	2100      	movs	r1, #0
    c9a2:	e000      	b.n	c9a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x48>
    c9a4:	2102      	movs	r1, #2
    c9a6:	1843      	adds	r3, r0, r1
    c9a8:	7d1a      	ldrb	r2, [r3, #20]
    c9aa:	2a02      	cmp	r2, #2
    c9ac:	d008      	beq.n	c9c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    c9ae:	7d5b      	ldrb	r3, [r3, #21]
    c9b0:	2b02      	cmp	r3, #2
    c9b2:	d009      	beq.n	c9c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    c9b4:	2a03      	cmp	r2, #3
    c9b6:	d003      	beq.n	c9c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    c9b8:	2b03      	cmp	r3, #3
    c9ba:	d005      	beq.n	c9c8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x6a>
    c9bc:	2000      	movs	r0, #0
    c9be:	4770      	bx	lr
    c9c0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    c9c4:	8b00      	ldrh	r0, [r0, #24]
    c9c6:	4770      	bx	lr
    c9c8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    c9cc:	8b40      	ldrh	r0, [r0, #26]
    c9ce:	4770      	bx	lr
    c9d0:	b109      	cbz	r1, c9d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    c9d2:	2100      	movs	r1, #0
    c9d4:	e000      	b.n	c9d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7a>
    c9d6:	2102      	movs	r1, #2
    c9d8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    c9dc:	8b01      	ldrh	r1, [r0, #24]
    c9de:	b911      	cbnz	r1, c9e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x88>
    c9e0:	8b40      	ldrh	r0, [r0, #26]
    c9e2:	2800      	cmp	r0, #0
    c9e4:	d000      	beq.n	c9e8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8a>
    c9e6:	2001      	movs	r0, #1
    c9e8:	4770      	bx	lr
    c9ea:	b538      	push	{r3, r4, r5, lr}
    c9ec:	7883      	ldrb	r3, [r0, #2]
    c9ee:	f88d 3000 	strb.w	r3, [sp]
    c9f2:	9b00      	ldr	r3, [sp, #0]
    c9f4:	9300      	str	r3, [sp, #0]
    c9f6:	f89d 3000 	ldrb.w	r3, [sp]
    c9fa:	b953      	cbnz	r3, ca12 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb4>
    c9fc:	b10a      	cbz	r2, ca02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa4>
    c9fe:	2300      	movs	r3, #0
    ca00:	e000      	b.n	ca04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa6>
    ca02:	2302      	movs	r3, #2
    ca04:	18c2      	adds	r2, r0, r3
    ca06:	7d14      	ldrb	r4, [r2, #20]
    ca08:	2c02      	cmp	r4, #2
    ca0a:	d004      	beq.n	ca16 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    ca0c:	7d52      	ldrb	r2, [r2, #21]
    ca0e:	2a02      	cmp	r2, #2
    ca10:	d004      	beq.n	ca1c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbe>
    ca12:	2000      	movs	r0, #0
    ca14:	bd38      	pop	{r3, r4, r5, pc}
    ca16:	461a      	mov	r2, r3
    ca18:	1c5b      	adds	r3, r3, #1
    ca1a:	e000      	b.n	ca1e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    ca1c:	1c5a      	adds	r2, r3, #1
    ca1e:	b181      	cbz	r1, ca42 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe4>
    ca20:	18c5      	adds	r5, r0, r3
    ca22:	2400      	movs	r4, #0
    ca24:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    ca28:	752c      	strb	r4, [r5, #20]
    ca2a:	831c      	strh	r4, [r3, #24]
    ca2c:	2303      	movs	r3, #3
    ca2e:	1884      	adds	r4, r0, r2
    ca30:	7523      	strb	r3, [r4, #20]
    ca32:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    ca36:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    ca3a:	685b      	ldr	r3, [r3, #4]
    ca3c:	600b      	str	r3, [r1, #0]
    ca3e:	8b00      	ldrh	r0, [r0, #24]
    ca40:	8088      	strh	r0, [r1, #4]
    ca42:	2001      	movs	r0, #1
    ca44:	bd38      	pop	{r3, r4, r5, pc}
    ca46:	b510      	push	{r4, lr}
    ca48:	b109      	cbz	r1, ca4e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf0>
    ca4a:	2100      	movs	r1, #0
    ca4c:	e000      	b.n	ca50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf2>
    ca4e:	2102      	movs	r1, #2
    ca50:	1843      	adds	r3, r0, r1
    ca52:	7d1c      	ldrb	r4, [r3, #20]
    ca54:	4294      	cmp	r4, r2
    ca56:	d103      	bne.n	ca60 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x102>
    ca58:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ca5c:	8b00      	ldrh	r0, [r0, #24]
    ca5e:	bd10      	pop	{r4, pc}
    ca60:	7d5b      	ldrb	r3, [r3, #21]
    ca62:	4293      	cmp	r3, r2
    ca64:	d103      	bne.n	ca6e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x110>
    ca66:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    ca6a:	8b40      	ldrh	r0, [r0, #26]
    ca6c:	bd10      	pop	{r4, pc}
    ca6e:	2000      	movs	r0, #0
    ca70:	bd10      	pop	{r4, pc}
    ca72:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    ca76:	d201      	bcs.n	ca7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11e>
    ca78:	0841      	lsrs	r1, r0, #1
    ca7a:	e000      	b.n	ca7e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x120>
    ca7c:	21ff      	movs	r1, #255	; 0xff
    ca7e:	1a40      	subs	r0, r0, r1
    ca80:	f240 6172 	movw	r1, #1650	; 0x672
    ca84:	4288      	cmp	r0, r1
    ca86:	db00      	blt.n	ca8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x12c>
    ca88:	4608      	mov	r0, r1
    ca8a:	b280      	uxth	r0, r0
    ca8c:	4770      	bx	lr

0000ca8e <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    ca8e:	2101      	movs	r1, #1
    ca90:	f7ff bf85 	b.w	c99e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>

0000ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    ca94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca98:	4606      	mov	r6, r0
    ca9a:	f342 0780 	sbfx	r7, r2, #2, #1
    ca9e:	7848      	ldrb	r0, [r1, #1]
    caa0:	460c      	mov	r4, r1
    caa2:	f022 0504 	bic.w	r5, r2, #4
    caa6:	1c7f      	adds	r7, r7, #1
    caa8:	b100      	cbz	r0, caac <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    caaa:	b90d      	cbnz	r5, cab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    caac:	4328      	orrs	r0, r5
    caae:	d104      	bne.n	caba <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    cab0:	b145      	cbz	r5, cac4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    cab2:	2100      	movs	r1, #0
    cab4:	4620      	mov	r0, r4
    cab6:	f7f7 fd35 	bl	4524 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    caba:	2101      	movs	r1, #1
    cabc:	70a1      	strb	r1, [r4, #2]
    cabe:	b11f      	cbz	r7, cac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    cac0:	2000      	movs	r0, #0
    cac2:	e002      	b.n	caca <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    cac4:	2101      	movs	r1, #1
    cac6:	e7f5      	b.n	cab4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    cac8:	2002      	movs	r0, #2
    caca:	1822      	adds	r2, r4, r0
    cacc:	7d12      	ldrb	r2, [r2, #20]
    cace:	2a03      	cmp	r2, #3
    cad0:	d102      	bne.n	cad8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cad2:	2d02      	cmp	r5, #2
    cad4:	d000      	beq.n	cad8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    cad6:	1c40      	adds	r0, r0, #1
    cad8:	1822      	adds	r2, r4, r0
    cada:	7511      	strb	r1, [r2, #20]
    cadc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    cae0:	2200      	movs	r2, #0
    cae2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cae6:	830a      	strh	r2, [r1, #24]
    cae8:	6840      	ldr	r0, [r0, #4]
    caea:	70a2      	strb	r2, [r4, #2]
    caec:	4631      	mov	r1, r6
    caee:	f362 010f 	bfi	r1, r2, #0, #16
    caf2:	e9c6 0100 	strd	r0, r1, [r6]
    caf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cafa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    cafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cafe:	461e      	mov	r6, r3
    cb00:	4613      	mov	r3, r2
    cb02:	4604      	mov	r4, r0
    cb04:	b109      	cbz	r1, cb0a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    cb06:	2000      	movs	r0, #0
    cb08:	e000      	b.n	cb0c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    cb0a:	2002      	movs	r0, #2
    cb0c:	2101      	movs	r1, #1
    cb0e:	70a1      	strb	r1, [r4, #2]
    cb10:	1821      	adds	r1, r4, r0
    cb12:	7d0a      	ldrb	r2, [r1, #20]
    cb14:	2a01      	cmp	r2, #1
    cb16:	d003      	beq.n	cb20 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    cb18:	7d49      	ldrb	r1, [r1, #21]
    cb1a:	2901      	cmp	r1, #1
    cb1c:	d10c      	bne.n	cb38 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    cb1e:	1c40      	adds	r0, r0, #1
    cb20:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    cb24:	2700      	movs	r7, #0
    cb26:	8b29      	ldrh	r1, [r5, #24]
    cb28:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    cb2c:	198a      	adds	r2, r1, r6
    cb2e:	4562      	cmp	r2, ip
    cb30:	d905      	bls.n	cb3e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    cb32:	4420      	add	r0, r4
    cb34:	832f      	strh	r7, [r5, #24]
    cb36:	7507      	strb	r7, [r0, #20]
    cb38:	2000      	movs	r0, #0
    cb3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cb3e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    cb42:	4632      	mov	r2, r6
    cb44:	6840      	ldr	r0, [r0, #4]
    cb46:	4408      	add	r0, r1
    cb48:	4619      	mov	r1, r3
    cb4a:	f7fe feeb 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb4e:	8b28      	ldrh	r0, [r5, #24]
    cb50:	4430      	add	r0, r6
    cb52:	8328      	strh	r0, [r5, #24]
    cb54:	70a7      	strb	r7, [r4, #2]
    cb56:	2001      	movs	r0, #1
    cb58:	e7ef      	b.n	cb3a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000cb5a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>:
    cb5a:	2202      	movs	r2, #2
    cb5c:	2100      	movs	r1, #0
    cb5e:	f7ff bf72 	b.w	ca46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000cb62 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    cb62:	b510      	push	{r4, lr}
    cb64:	2101      	movs	r1, #1
    cb66:	f7ff ff33 	bl	c9d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x72>
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d000      	beq.n	cb70 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    cb6e:	2001      	movs	r0, #1
    cb70:	bd10      	pop	{r4, pc}

0000cb72 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    cb72:	2201      	movs	r2, #1
    cb74:	f7ff bf39 	b.w	c9ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000cb78 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    cb78:	2200      	movs	r2, #0
    cb7a:	f7ff bf36 	b.w	c9ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8c>

0000cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    cb7e:	b570      	push	{r4, r5, r6, lr}
    cb80:	b109      	cbz	r1, cb86 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    cb82:	2300      	movs	r3, #0
    cb84:	e000      	b.n	cb88 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    cb86:	2302      	movs	r3, #2
    cb88:	2101      	movs	r1, #1
    cb8a:	7081      	strb	r1, [r0, #2]
    cb8c:	18c1      	adds	r1, r0, r3
    cb8e:	2402      	movs	r4, #2
    cb90:	7d0d      	ldrb	r5, [r1, #20]
    cb92:	2d01      	cmp	r5, #1
    cb94:	d007      	beq.n	cba6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    cb96:	7d4d      	ldrb	r5, [r1, #21]
    cb98:	2d01      	cmp	r5, #1
    cb9a:	d009      	beq.n	cbb0 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    cb9c:	f44f 718b 	mov.w	r1, #278	; 0x116
    cba0:	2009      	movs	r0, #9
    cba2:	f7f7 f869 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cba6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cbaa:	831a      	strh	r2, [r3, #24]
    cbac:	750c      	strb	r4, [r1, #20]
    cbae:	e003      	b.n	cbb8 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    cbb0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    cbb4:	835a      	strh	r2, [r3, #26]
    cbb6:	754c      	strb	r4, [r1, #21]
    cbb8:	2100      	movs	r1, #0
    cbba:	7081      	strb	r1, [r0, #2]
    cbbc:	bd70      	pop	{r4, r5, r6, pc}

0000cbbe <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    cbbe:	2101      	movs	r1, #1
    cbc0:	7001      	strb	r1, [r0, #0]
    cbc2:	4770      	bx	lr

0000cbc4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    cbc4:	2201      	movs	r2, #1
    cbc6:	4611      	mov	r1, r2
    cbc8:	f7ff bf3d 	b.w	ca46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000cbcc <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    cbcc:	2201      	movs	r2, #1
    cbce:	2100      	movs	r1, #0
    cbd0:	f7ff bf39 	b.w	ca46 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xe8>

0000cbd4 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    cbd4:	2100      	movs	r1, #0
    cbd6:	f7ff bee2 	b.w	c99e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    cbda:	2800      	cmp	r0, #0
    cbdc:	db09      	blt.n	cbf2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    cbde:	f000 021f 	and.w	r2, r0, #31
    cbe2:	2101      	movs	r1, #1
    cbe4:	4091      	lsls	r1, r2
    cbe6:	0940      	lsrs	r0, r0, #5
    cbe8:	0080      	lsls	r0, r0, #2
    cbea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    cbee:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    cbf2:	4770      	bx	lr

0000cbf4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    cbf4:	f7f7 bdec 	b.w	47d0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000cbf8 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    cbf8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    cbfc:	2000      	movs	r0, #0
    cbfe:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    cc02:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    cc06:	2001      	movs	r0, #1
    cc08:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    cc0c:	4770      	bx	lr

0000cc0e <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    cc0e:	b108      	cbz	r0, cc14 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    cc10:	2000      	movs	r0, #0
    cc12:	4770      	bx	lr
    cc14:	2001      	movs	r0, #1
    cc16:	4770      	bx	lr

0000cc18 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    cc18:	f7f7 bf20 	b.w	4a5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000cc1c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    cc1c:	f7f7 bf0e 	b.w	4a3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000cc20 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    cc20:	b510      	push	{r4, lr}
    cc22:	2900      	cmp	r1, #0
    cc24:	4604      	mov	r4, r0
    cc26:	f04f 0106 	mov.w	r1, #6
    cc2a:	d002      	beq.n	cc32 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    cc2c:	f7f7 f8b0 	bl	3d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cc30:	e001      	b.n	cc36 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    cc32:	f7f7 f8c9 	bl	3dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cc36:	7960      	ldrb	r0, [r4, #5]
    cc38:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    cc3c:	7160      	strb	r0, [r4, #5]
    cc3e:	bd10      	pop	{r4, pc}

0000cc40 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    cc40:	4770      	bx	lr

0000cc42 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    cc42:	b530      	push	{r4, r5, lr}
    cc44:	460c      	mov	r4, r1
    cc46:	4605      	mov	r5, r0
    cc48:	b08d      	sub	sp, #52	; 0x34
    cc4a:	f04f 0103 	mov.w	r1, #3
    cc4e:	f104 0003 	add.w	r0, r4, #3
    cc52:	b112      	cbz	r2, cc5a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    cc54:	f7f7 f89c 	bl	3d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    cc58:	e001      	b.n	cc5e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    cc5a:	f7f7 f8b5 	bl	3dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    cc5e:	7960      	ldrb	r0, [r4, #5]
    cc60:	220d      	movs	r2, #13
    cc62:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    cc66:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    cc6a:	7160      	strb	r0, [r4, #5]
    cc6c:	2100      	movs	r1, #0
    cc6e:	a804      	add	r0, sp, #16
    cc70:	f7fe fed2 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cc74:	78e0      	ldrb	r0, [r4, #3]
    cc76:	f88d 001f 	strb.w	r0, [sp, #31]
    cc7a:	7920      	ldrb	r0, [r4, #4]
    cc7c:	f88d 001e 	strb.w	r0, [sp, #30]
    cc80:	7960      	ldrb	r0, [r4, #5]
    cc82:	f88d 001d 	strb.w	r0, [sp, #29]
    cc86:	2210      	movs	r2, #16
    cc88:	4629      	mov	r1, r5
    cc8a:	4668      	mov	r0, sp
    cc8c:	f7fe fe4a 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cc90:	4668      	mov	r0, sp
    cc92:	f7ff ffaf 	bl	cbf4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cc96:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    cc9a:	7020      	strb	r0, [r4, #0]
    cc9c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    cca0:	7060      	strb	r0, [r4, #1]
    cca2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    cca6:	70a0      	strb	r0, [r4, #2]
    cca8:	b00d      	add	sp, #52	; 0x34
    ccaa:	bd30      	pop	{r4, r5, pc}

0000ccac <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    ccac:	f7f8 bab4 	b.w	5218 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3d4>
    ccb0:	07c1      	lsls	r1, r0, #31
    ccb2:	d001      	beq.n	ccb8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0xc>
    ccb4:	2001      	movs	r0, #1
    ccb6:	4770      	bx	lr
    ccb8:	0780      	lsls	r0, r0, #30
    ccba:	d501      	bpl.n	ccc0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x14>
    ccbc:	2002      	movs	r0, #2
    ccbe:	4770      	bx	lr
    ccc0:	2000      	movs	r0, #0
    ccc2:	4770      	bx	lr
    ccc4:	b510      	push	{r4, lr}
    ccc6:	2801      	cmp	r0, #1
    ccc8:	d008      	beq.n	ccdc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ccca:	2802      	cmp	r0, #2
    cccc:	d004      	beq.n	ccd8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2c>
    ccce:	f240 319a 	movw	r1, #922	; 0x39a
    ccd2:	2006      	movs	r0, #6
    ccd4:	f7f6 ffd0 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ccd8:	2001      	movs	r0, #1
    ccda:	bd10      	pop	{r4, pc}
    ccdc:	2000      	movs	r0, #0
    ccde:	bd10      	pop	{r4, pc}
    cce0:	2900      	cmp	r1, #0
    cce2:	d004      	beq.n	ccee <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x42>
    cce4:	2801      	cmp	r0, #1
    cce6:	d003      	beq.n	ccf0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    cce8:	2901      	cmp	r1, #1
    ccea:	d001      	beq.n	ccf0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x44>
    ccec:	2002      	movs	r0, #2
    ccee:	4770      	bx	lr
    ccf0:	2001      	movs	r0, #1
    ccf2:	4770      	bx	lr
    ccf4:	f7ff bcb0 	b.w	c658 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ccf8 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ccf8:	2101      	movs	r1, #1
    ccfa:	f7f8 be1d 	b.w	5938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ccfe <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ccfe:	b510      	push	{r4, lr}
    cd00:	f002 fbc0 	bl	f484 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    cd04:	b118      	cbz	r0, cd0e <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    cd06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cd0a:	f7fd bba7 	b.w	a45c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    cd0e:	20ff      	movs	r0, #255	; 0xff
    cd10:	bd10      	pop	{r4, pc}

0000cd12 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    cd12:	b510      	push	{r4, lr}
    cd14:	f7f8 fe58 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    cd18:	2810      	cmp	r0, #16
    cd1a:	d003      	beq.n	cd24 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    cd1c:	f7f8 fe24 	bl	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    cd20:	2810      	cmp	r0, #16
    cd22:	d100      	bne.n	cd26 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    cd24:	2008      	movs	r0, #8
    cd26:	bd10      	pop	{r4, pc}

0000cd28 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    cd28:	b510      	push	{r4, lr}
    cd2a:	f7f8 fe4d 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    cd2e:	2810      	cmp	r0, #16
    cd30:	d007      	beq.n	cd42 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cd32:	f7f8 fe19 	bl	5968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    cd36:	2810      	cmp	r0, #16
    cd38:	d003      	beq.n	cd42 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    cd3a:	f7f8 fe8d 	bl	5a58 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    cd3e:	2001      	movs	r0, #1
    cd40:	bd10      	pop	{r4, pc}
    cd42:	2000      	movs	r0, #0
    cd44:	bd10      	pop	{r4, pc}

0000cd46 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    cd46:	b510      	push	{r4, lr}
    cd48:	f7f8 fe3e 	bl	59c8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    cd4c:	2810      	cmp	r0, #16
    cd4e:	d003      	beq.n	cd58 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    cd50:	f7f8 feca 	bl	5ae8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    cd54:	2001      	movs	r0, #1
    cd56:	bd10      	pop	{r4, pc}
    cd58:	2000      	movs	r0, #0
    cd5a:	bd10      	pop	{r4, pc}

0000cd5c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    cd5c:	b570      	push	{r4, r5, r6, lr}
    cd5e:	460e      	mov	r6, r1
    cd60:	b08c      	sub	sp, #48	; 0x30
    cd62:	4614      	mov	r4, r2
    cd64:	4601      	mov	r1, r0
    cd66:	461d      	mov	r5, r3
    cd68:	2210      	movs	r2, #16
    cd6a:	4668      	mov	r0, sp
    cd6c:	f000 f91a 	bl	cfa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cd70:	2210      	movs	r2, #16
    cd72:	4631      	mov	r1, r6
    cd74:	a804      	add	r0, sp, #16
    cd76:	f000 f915 	bl	cfa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cd7a:	4668      	mov	r0, sp
    cd7c:	f7ff ff3a 	bl	cbf4 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    cd80:	a908      	add	r1, sp, #32
    cd82:	f04f 0210 	mov.w	r2, #16
    cd86:	4628      	mov	r0, r5
    cd88:	b11c      	cbz	r4, cd92 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    cd8a:	f000 f90b 	bl	cfa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    cd8e:	b00c      	add	sp, #48	; 0x30
    cd90:	bd70      	pop	{r4, r5, r6, pc}
    cd92:	f7fe fdc7 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd96:	e7fa      	b.n	cd8e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    cd98:	b510      	push	{r4, lr}
    cd9a:	460c      	mov	r4, r1
    cd9c:	2100      	movs	r1, #0
    cd9e:	f7ff fdb8 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    cda2:	6060      	str	r0, [r4, #4]
    cda4:	b118      	cbz	r0, cdae <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    cda6:	2001      	movs	r0, #1
    cda8:	7020      	strb	r0, [r4, #0]
    cdaa:	2000      	movs	r0, #0
    cdac:	bd10      	pop	{r4, pc}
    cdae:	2002      	movs	r0, #2
    cdb0:	bd10      	pop	{r4, pc}

0000cdb2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    cdb2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cdb6:	4348      	muls	r0, r1
    cdb8:	4770      	bx	lr

0000cdba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    cdba:	f240 41e2 	movw	r1, #1250	; 0x4e2
    cdbe:	fbb0 f0f1 	udiv	r0, r0, r1
    cdc2:	b280      	uxth	r0, r0
    cdc4:	4770      	bx	lr

0000cdc6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    cdc6:	b570      	push	{r4, r5, r6, lr}
    cdc8:	4604      	mov	r4, r0
    cdca:	4290      	cmp	r0, r2
    cdcc:	d20b      	bcs.n	cde6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    cdce:	1b10      	subs	r0, r2, r4
    cdd0:	2864      	cmp	r0, #100	; 0x64
    cdd2:	d200      	bcs.n	cdd6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    cdd4:	2064      	movs	r0, #100	; 0x64
    cdd6:	1825      	adds	r5, r4, r0
    cdd8:	428d      	cmp	r5, r1
    cdda:	d803      	bhi.n	cde4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    cddc:	2104      	movs	r1, #4
    cdde:	f7f4 fab1 	bl	1344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    cde2:	b108      	cbz	r0, cde8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    cde4:	4620      	mov	r0, r4
    cde6:	bd70      	pop	{r4, r5, r6, pc}
    cde8:	4628      	mov	r0, r5
    cdea:	bd70      	pop	{r4, r5, r6, pc}

0000cdec <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    cdec:	b510      	push	{r4, lr}
    cdee:	f1a2 030f 	sub.w	r3, r2, #15
    cdf2:	290c      	cmp	r1, #12
    cdf4:	d244      	bcs.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    cdf6:	e8df f001 	tbb	[pc, r1]
    cdfa:	0806      	.short	0x0806
    cdfc:	1815120d 	.word	0x1815120d
    ce00:	4127241c 	.word	0x4127241c
    ce04:	312a      	.short	0x312a
    ce06:	b3c2      	cbz	r2, ce7a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x8e>
    ce08:	e03a      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce0a:	2a07      	cmp	r2, #7
    ce0c:	d03a      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce0e:	2a08      	cmp	r2, #8
    ce10:	d038      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce12:	e035      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce14:	2a0c      	cmp	r2, #12
    ce16:	d035      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce18:	2a0b      	cmp	r2, #11
    ce1a:	d033      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce1c:	e030      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce1e:	2a0d      	cmp	r2, #13
    ce20:	d030      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce22:	e02d      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce24:	2b0c      	cmp	r3, #12
    ce26:	d92d      	bls.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce28:	e02a      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce2a:	3a10      	subs	r2, #16
    ce2c:	2a0b      	cmp	r2, #11
    ce2e:	d929      	bls.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce30:	e026      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce32:	2b03      	cmp	r3, #3
    ce34:	d926      	bls.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce36:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    ce3a:	b308      	cbz	r0, ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce3c:	2a1b      	cmp	r2, #27
    ce3e:	d921      	bls.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce40:	e01e      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce42:	2a04      	cmp	r2, #4
    ce44:	d01e      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce46:	e01b      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce48:	2a06      	cmp	r2, #6
    ce4a:	d01b      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce4c:	e018      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce4e:	2a1c      	cmp	r2, #28
    ce50:	d018      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce52:	2a1d      	cmp	r2, #29
    ce54:	d016      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce56:	2a1e      	cmp	r2, #30
    ce58:	d014      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce5a:	e011      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce5c:	2a1f      	cmp	r2, #31
    ce5e:	d011      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce60:	2a20      	cmp	r2, #32
    ce62:	d00f      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce64:	2a21      	cmp	r2, #33	; 0x21
    ce66:	d00d      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce68:	2a22      	cmp	r2, #34	; 0x22
    ce6a:	d00b      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce6c:	2a23      	cmp	r2, #35	; 0x23
    ce6e:	d009      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce70:	2a24      	cmp	r2, #36	; 0x24
    ce72:	d007      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce74:	2a26      	cmp	r2, #38	; 0x26
    ce76:	d005      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce78:	e002      	b.n	ce80 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x94>
    ce7a:	e003      	b.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce7c:	2a0e      	cmp	r2, #14
    ce7e:	d001      	beq.n	ce84 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x98>
    ce80:	2000      	movs	r0, #0
    ce82:	bd10      	pop	{r4, pc}
    ce84:	2001      	movs	r0, #1
    ce86:	bd10      	pop	{r4, pc}

0000ce88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ce88:	280c      	cmp	r0, #12
    ce8a:	d013      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ce8c:	280b      	cmp	r0, #11
    ce8e:	d011      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ce90:	280d      	cmp	r0, #13
    ce92:	d00f      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ce94:	281f      	cmp	r0, #31
    ce96:	d00d      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ce98:	2820      	cmp	r0, #32
    ce9a:	d00b      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ce9c:	2821      	cmp	r0, #33	; 0x21
    ce9e:	d009      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cea0:	2822      	cmp	r0, #34	; 0x22
    cea2:	d007      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cea4:	2823      	cmp	r0, #35	; 0x23
    cea6:	d005      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    cea8:	2824      	cmp	r0, #36	; 0x24
    ceaa:	d003      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ceac:	2826      	cmp	r0, #38	; 0x26
    ceae:	d001      	beq.n	ceb4 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ceb0:	2000      	movs	r0, #0
    ceb2:	4770      	bx	lr
    ceb4:	2001      	movs	r0, #1
    ceb6:	4770      	bx	lr

0000ceb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ceb8:	f011 0f0c 	tst.w	r1, #12
    cebc:	d016      	beq.n	ceec <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    cebe:	074a      	lsls	r2, r1, #29
    cec0:	f44f 7116 	mov.w	r1, #600	; 0x258
    cec4:	2a00      	cmp	r2, #0
    cec6:	da02      	bge.n	cece <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    cec8:	f04f 0210 	mov.w	r2, #16
    cecc:	e001      	b.n	ced2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    cece:	f04f 0240 	mov.w	r2, #64	; 0x40
    ced2:	da01      	bge.n	ced8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ced4:	f04f 0196 	mov.w	r1, #150	; 0x96
    ced8:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    cedc:	eba0 0301 	sub.w	r3, r0, r1
    cee0:	4288      	cmp	r0, r1
    cee2:	d910      	bls.n	cf06 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cee4:	fb93 f0f2 	sdiv	r0, r3, r2
    cee8:	b280      	uxth	r0, r0
    ceea:	4770      	bx	lr
    ceec:	2902      	cmp	r1, #2
    ceee:	d002      	beq.n	cef6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    cef0:	2870      	cmp	r0, #112	; 0x70
    cef2:	d80a      	bhi.n	cf0a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    cef4:	e007      	b.n	cf06 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cef6:	283c      	cmp	r0, #60	; 0x3c
    cef8:	d905      	bls.n	cf06 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    cefa:	383c      	subs	r0, #60	; 0x3c
    cefc:	17c1      	asrs	r1, r0, #31
    cefe:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    cf02:	1080      	asrs	r0, r0, #2
    cf04:	e7f0      	b.n	cee8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cf06:	2000      	movs	r0, #0
    cf08:	e7ee      	b.n	cee8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    cf0a:	3870      	subs	r0, #112	; 0x70
    cf0c:	17c1      	asrs	r1, r0, #31
    cf0e:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    cf12:	10c0      	asrs	r0, r0, #3
    cf14:	e7e8      	b.n	cee8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000cf16 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    cf16:	6809      	ldr	r1, [r1, #0]
    cf18:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    cf1c:	4770      	bx	lr

0000cf1e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    cf1e:	07c1      	lsls	r1, r0, #31
    cf20:	d001      	beq.n	cf26 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    cf22:	2001      	movs	r0, #1
    cf24:	4770      	bx	lr
    cf26:	0781      	lsls	r1, r0, #30
    cf28:	d501      	bpl.n	cf2e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    cf2a:	2002      	movs	r0, #2
    cf2c:	4770      	bx	lr
    cf2e:	0740      	lsls	r0, r0, #29
    cf30:	d501      	bpl.n	cf36 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    cf32:	2008      	movs	r0, #8
    cf34:	4770      	bx	lr
    cf36:	2000      	movs	r0, #0
    cf38:	4770      	bx	lr

0000cf3a <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    cf3a:	b510      	push	{r4, lr}
    cf3c:	f640 12c4 	movw	r2, #2500	; 0x9c4
    cf40:	2901      	cmp	r1, #1
    cf42:	d006      	beq.n	cf52 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    cf44:	2902      	cmp	r1, #2
    cf46:	d005      	beq.n	cf54 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    cf48:	f240 31c6 	movw	r1, #966	; 0x3c6
    cf4c:	2029      	movs	r0, #41	; 0x29
    cf4e:	f7f6 fe93 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf52:	b108      	cbz	r0, cf58 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    cf54:	4610      	mov	r0, r2
    cf56:	bd10      	pop	{r4, pc}
    cf58:	f240 40e2 	movw	r0, #1250	; 0x4e2
    cf5c:	bd10      	pop	{r4, pc}

0000cf5e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    cf5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cf62:	460c      	mov	r4, r1
    cf64:	4605      	mov	r5, r0
    cf66:	68c6      	ldr	r6, [r0, #12]
    cf68:	f7f4 fdf2 	bl	1b50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    cf6c:	b198      	cbz	r0, cf96 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    cf6e:	b1bc      	cbz	r4, cfa0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cf70:	4630      	mov	r0, r6
    cf72:	68e9      	ldr	r1, [r5, #12]
    cf74:	f7f4 faea 	bl	154c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    cf78:	2800      	cmp	r0, #0
    cf7a:	dd11      	ble.n	cfa0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    cf7c:	4420      	add	r0, r4
    cf7e:	1e40      	subs	r0, r0, #1
    cf80:	fbb0 f7f4 	udiv	r7, r0, r4
    cf84:	fb07 f104 	mul.w	r1, r7, r4
    cf88:	4630      	mov	r0, r6
    cf8a:	f7f4 faad 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    cf8e:	60e8      	str	r0, [r5, #12]
    cf90:	4638      	mov	r0, r7
    cf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf96:	f240 214b 	movw	r1, #587	; 0x24b
    cf9a:	2029      	movs	r0, #41	; 0x29
    cf9c:	f7f6 fe6c 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cfa0:	2000      	movs	r0, #0
    cfa2:	e7f6      	b.n	cf92 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000cfa4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    cfa4:	b530      	push	{r4, r5, lr}
    cfa6:	4613      	mov	r3, r2
    cfa8:	e006      	b.n	cfb8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    cfaa:	18cc      	adds	r4, r1, r3
    cfac:	1ad5      	subs	r5, r2, r3
    cfae:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    cfb2:	1e5b      	subs	r3, r3, #1
    cfb4:	5544      	strb	r4, [r0, r5]
    cfb6:	b2db      	uxtb	r3, r3
    cfb8:	2b00      	cmp	r3, #0
    cfba:	d1f6      	bne.n	cfaa <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    cfbc:	bd30      	pop	{r4, r5, pc}

0000cfbe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    cfbe:	b538      	push	{r3, r4, r5, lr}
    cfc0:	4605      	mov	r5, r0
    cfc2:	460c      	mov	r4, r1
    cfc4:	4668      	mov	r0, sp
    cfc6:	f7fd ff95 	bl	aef4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    cfca:	b310      	cbz	r0, d012 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    cfcc:	f99d 0000 	ldrsb.w	r0, [sp]
    cfd0:	7260      	strb	r0, [r4, #9]
    cfd2:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    cfd6:	72a1      	strb	r1, [r4, #10]
    cfd8:	f994 100b 	ldrsb.w	r1, [r4, #11]
    cfdc:	2200      	movs	r2, #0
    cfde:	1a41      	subs	r1, r0, r1
    cfe0:	d500      	bpl.n	cfe4 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    cfe2:	4249      	negs	r1, r1
    cfe4:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    cfe8:	428b      	cmp	r3, r1
    cfea:	dc10      	bgt.n	d00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    cfec:	2bff      	cmp	r3, #255	; 0xff
    cfee:	d00e      	beq.n	d00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    cff0:	7b21      	ldrb	r1, [r4, #12]
    cff2:	1c49      	adds	r1, r1, #1
    cff4:	b2c9      	uxtb	r1, r1
    cff6:	7321      	strb	r1, [r4, #12]
    cff8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    cffc:	4299      	cmp	r1, r3
    cffe:	d802      	bhi.n	d006 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    d000:	7ae1      	ldrb	r1, [r4, #11]
    d002:	297f      	cmp	r1, #127	; 0x7f
    d004:	d103      	bne.n	d00e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    d006:	72e0      	strb	r0, [r4, #11]
    d008:	2000      	movs	r0, #0
    d00a:	7320      	strb	r0, [r4, #12]
    d00c:	2201      	movs	r2, #1
    d00e:	4610      	mov	r0, r2
    d010:	bd38      	pop	{r3, r4, r5, pc}
    d012:	207f      	movs	r0, #127	; 0x7f
    d014:	7260      	strb	r0, [r4, #9]
    d016:	2000      	movs	r0, #0
    d018:	bd38      	pop	{r3, r4, r5, pc}

0000d01a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    d01a:	2300      	movs	r3, #0
    d01c:	6283      	str	r3, [r0, #40]	; 0x28
    d01e:	8602      	strh	r2, [r0, #48]	; 0x30
    d020:	f240 2371 	movw	r3, #625	; 0x271
    d024:	435a      	muls	r2, r3
    d026:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    d02a:	1e52      	subs	r2, r2, #1
    d02c:	fbb2 f1f1 	udiv	r1, r2, r1
    d030:	62c1      	str	r1, [r0, #44]	; 0x2c
    d032:	4770      	bx	lr

0000d034 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    d034:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    d038:	4607      	mov	r7, r0
    d03a:	4690      	mov	r8, r2
    d03c:	468b      	mov	fp, r1
    d03e:	2601      	movs	r6, #1
    d040:	4608      	mov	r0, r1
    d042:	f000 f941 	bl	d2c8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>
    d046:	4682      	mov	sl, r0
    d048:	4658      	mov	r0, fp
    d04a:	f000 f949 	bl	d2e0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>
    d04e:	4681      	mov	r9, r0
    d050:	f7ff ff65 	bl	cf1e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d054:	4604      	mov	r4, r0
    d056:	4650      	mov	r0, sl
    d058:	f7ff ff61 	bl	cf1e <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    d05c:	4605      	mov	r5, r0
    d05e:	ea54 0005 	orrs.w	r0, r4, r5
    d062:	d100      	bne.n	d066 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    d064:	2600      	movs	r6, #0
    d066:	f7fd f981 	bl	a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d06a:	ea10 0f09 	tst.w	r0, r9
    d06e:	d100      	bne.n	d072 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    d070:	2400      	movs	r4, #0
    d072:	f7fd f97b 	bl	a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    d076:	ea10 0f0a 	tst.w	r0, sl
    d07a:	d100      	bne.n	d07e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    d07c:	2500      	movs	r5, #0
    d07e:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    d082:	42a0      	cmp	r0, r4
    d084:	d100      	bne.n	d088 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    d086:	2400      	movs	r4, #0
    d088:	f888 4000 	strb.w	r4, [r8]
    d08c:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    d090:	42a8      	cmp	r0, r5
    d092:	d100      	bne.n	d096 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    d094:	2500      	movs	r5, #0
    d096:	f888 5001 	strb.w	r5, [r8, #1]
    d09a:	b974      	cbnz	r4, d0ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d09c:	b96d      	cbnz	r5, d0ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d09e:	4658      	mov	r0, fp
    d0a0:	f000 f91c 	bl	d2dc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>
    d0a4:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
    d0a8:	1a40      	subs	r0, r0, r1
    d0aa:	b200      	sxth	r0, r0
    d0ac:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    d0b0:	4288      	cmp	r0, r1
    d0b2:	dc01      	bgt.n	d0b8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    d0b4:	2800      	cmp	r0, #0
    d0b6:	dc00      	bgt.n	d0ba <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    d0b8:	2600      	movs	r6, #0
    d0ba:	4630      	mov	r0, r6
    d0bc:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000d0c0 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    d0c0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d0c4:	4348      	muls	r0, r1
    d0c6:	4770      	bx	lr

0000d0c8 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    d0c8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    d0cc:	fb10 f001 	smulbb	r0, r0, r1
    d0d0:	4770      	bx	lr

0000d0d2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    d0d2:	b510      	push	{r4, lr}
    d0d4:	2300      	movs	r3, #0
    d0d6:	461a      	mov	r2, r3
    d0d8:	e003      	b.n	d0e2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    d0da:	5c84      	ldrb	r4, [r0, r2]
    d0dc:	4323      	orrs	r3, r4
    d0de:	1c52      	adds	r2, r2, #1
    d0e0:	b2d2      	uxtb	r2, r2
    d0e2:	428a      	cmp	r2, r1
    d0e4:	d3f9      	bcc.n	d0da <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    d0e6:	b10b      	cbz	r3, d0ec <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    d0e8:	2000      	movs	r0, #0
    d0ea:	bd10      	pop	{r4, pc}
    d0ec:	2001      	movs	r0, #1
    d0ee:	bd10      	pop	{r4, pc}

0000d0f0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    d0f0:	b510      	push	{r4, lr}
    d0f2:	4604      	mov	r4, r0
    d0f4:	f890 0020 	ldrb.w	r0, [r0, #32]
    d0f8:	b108      	cbz	r0, d0fe <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    d0fa:	2825      	cmp	r0, #37	; 0x25
    d0fc:	d901      	bls.n	d102 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    d0fe:	2012      	movs	r0, #18
    d100:	bd10      	pop	{r4, pc}
    d102:	b12a      	cbz	r2, d110 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    d104:	7d60      	ldrb	r0, [r4, #21]
    d106:	b128      	cbz	r0, d114 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    d108:	2801      	cmp	r0, #1
    d10a:	d009      	beq.n	d120 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    d10c:	201f      	movs	r0, #31
    d10e:	bd10      	pop	{r4, pc}
    d110:	2000      	movs	r0, #0
    d112:	bd10      	pop	{r4, pc}
    d114:	4620      	mov	r0, r4
    d116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d11a:	4611      	mov	r1, r2
    d11c:	f7f8 bdd8 	b.w	5cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    d120:	88a2      	ldrh	r2, [r4, #4]
    d122:	6909      	ldr	r1, [r1, #16]
    d124:	f104 0015 	add.w	r0, r4, #21
    d128:	f7f8 fd7e 	bl	5c28 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    d12c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    d130:	e7ee      	b.n	d110 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000d132 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    d132:	b530      	push	{r4, r5, lr}
    d134:	1c42      	adds	r2, r0, #1
    d136:	428a      	cmp	r2, r1
    d138:	d004      	beq.n	d144 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    d13a:	680a      	ldr	r2, [r1, #0]
    d13c:	f8c0 2001 	str.w	r2, [r0, #1]
    d140:	7909      	ldrb	r1, [r1, #4]
    d142:	7141      	strb	r1, [r0, #5]
    d144:	7941      	ldrb	r1, [r0, #5]
    d146:	f001 011f 	and.w	r1, r1, #31
    d14a:	7141      	strb	r1, [r0, #5]
    d14c:	2100      	movs	r1, #0
    d14e:	72c1      	strb	r1, [r0, #11]
    d150:	1843      	adds	r3, r0, r1
    d152:	1c49      	adds	r1, r1, #1
    d154:	785c      	ldrb	r4, [r3, #1]
    d156:	b2c9      	uxtb	r1, r1
    d158:	f004 0201 	and.w	r2, r4, #1
    d15c:	0864      	lsrs	r4, r4, #1
    d15e:	f004 0501 	and.w	r5, r4, #1
    d162:	4415      	add	r5, r2
    d164:	0862      	lsrs	r2, r4, #1
    d166:	f002 0401 	and.w	r4, r2, #1
    d16a:	442c      	add	r4, r5
    d16c:	0852      	lsrs	r2, r2, #1
    d16e:	f002 0501 	and.w	r5, r2, #1
    d172:	442c      	add	r4, r5
    d174:	0852      	lsrs	r2, r2, #1
    d176:	f002 0501 	and.w	r5, r2, #1
    d17a:	442c      	add	r4, r5
    d17c:	0852      	lsrs	r2, r2, #1
    d17e:	f002 0501 	and.w	r5, r2, #1
    d182:	442c      	add	r4, r5
    d184:	0852      	lsrs	r2, r2, #1
    d186:	f002 0501 	and.w	r5, r2, #1
    d18a:	442c      	add	r4, r5
    d18c:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    d190:	719a      	strb	r2, [r3, #6]
    d192:	7ac3      	ldrb	r3, [r0, #11]
    d194:	2905      	cmp	r1, #5
    d196:	441a      	add	r2, r3
    d198:	72c2      	strb	r2, [r0, #11]
    d19a:	d3d9      	bcc.n	d150 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    d19c:	bd30      	pop	{r4, r5, pc}
    d19e:	b570      	push	{r4, r5, r6, lr}
    d1a0:	f8d0 201f 	ldr.w	r2, [r0, #31]
    d1a4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    d1a8:	f012 0fff 	tst.w	r2, #255	; 0xff
    d1ac:	f023 031f 	bic.w	r3, r3, #31
    d1b0:	d108      	bne.n	d1c4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d1b2:	f3c2 2407 	ubfx	r4, r2, #8, #8
    d1b6:	b92c      	cbnz	r4, d1c4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d1b8:	f3c2 4407 	ubfx	r4, r2, #16, #8
    d1bc:	b914      	cbnz	r4, d1c4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d1be:	0e12      	lsrs	r2, r2, #24
    d1c0:	d100      	bne.n	d1c4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x92>
    d1c2:	b35b      	cbz	r3, d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d1c4:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    d1c8:	f8b0 501b 	ldrh.w	r5, [r0, #27]
    d1cc:	f8b0 4017 	ldrh.w	r4, [r0, #23]
    d1d0:	7d83      	ldrb	r3, [r0, #22]
    d1d2:	b141      	cbz	r1, d1e6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d1d4:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d1d8:	d905      	bls.n	d1e6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d1da:	f640 5107 	movw	r1, #3335	; 0xd07
    d1de:	428a      	cmp	r2, r1
    d1e0:	d801      	bhi.n	d1e6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb4>
    d1e2:	2101      	movs	r1, #1
    d1e4:	e000      	b.n	d1e8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xb6>
    d1e6:	2100      	movs	r1, #0
    d1e8:	7846      	ldrb	r6, [r0, #1]
    d1ea:	2e22      	cmp	r6, #34	; 0x22
    d1ec:	d116      	bne.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d1ee:	b959      	cbnz	r1, d208 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xd6>
    d1f0:	1f91      	subs	r1, r2, #6
    d1f2:	f640 467a 	movw	r6, #3194	; 0xc7a
    d1f6:	42b1      	cmp	r1, r6
    d1f8:	d810      	bhi.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d1fa:	b17b      	cbz	r3, d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d1fc:	2b08      	cmp	r3, #8
    d1fe:	d80d      	bhi.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d200:	4293      	cmp	r3, r2
    d202:	d20b      	bcs.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d204:	4294      	cmp	r4, r2
    d206:	d809      	bhi.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d208:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d20c:	d206      	bcs.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d20e:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    d212:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d216:	d801      	bhi.n	d21c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0xea>
    d218:	2001      	movs	r0, #1
    d21a:	bd70      	pop	{r4, r5, r6, pc}
    d21c:	2000      	movs	r0, #0
    d21e:	bd70      	pop	{r4, r5, r6, pc}

0000d220 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ>:
    d220:	b570      	push	{r4, r5, r6, lr}
    d222:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    d226:	f8b0 5009 	ldrh.w	r5, [r0, #9]
    d22a:	f830 4f05 	ldrh.w	r4, [r0, #5]!
    d22e:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    d232:	88c0      	ldrh	r0, [r0, #6]
    d234:	b131      	cbz	r1, d244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d236:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    d23a:	d903      	bls.n	d244 <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x24>
    d23c:	f640 5107 	movw	r1, #3335	; 0xd07
    d240:	428a      	cmp	r2, r1
    d242:	d90b      	bls.n	d25c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x3c>
    d244:	1f91      	subs	r1, r2, #6
    d246:	f640 467a 	movw	r6, #3194	; 0xc7a
    d24a:	42b1      	cmp	r1, r6
    d24c:	d80e      	bhi.n	d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d24e:	b16b      	cbz	r3, d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d250:	2b08      	cmp	r3, #8
    d252:	d80b      	bhi.n	d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d254:	4293      	cmp	r3, r2
    d256:	d209      	bcs.n	d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d258:	4294      	cmp	r4, r2
    d25a:	d807      	bhi.n	d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d25c:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    d260:	d204      	bcs.n	d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d262:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
    d266:	d801      	bhi.n	d26c <sym_SYUCVPKBWJVHVFRFN5N4446ZSHSJVKBYOSWHGGQ+0x4c>
    d268:	2001      	movs	r0, #1
    d26a:	bd70      	pop	{r4, r5, r6, pc}
    d26c:	2000      	movs	r0, #0
    d26e:	bd70      	pop	{r4, r5, r6, pc}

0000d270 <sym_Z4ZI42RGZMV4HNY7AR3E37XXZ7IMFK22Y6ETFMA>:
    d270:	6842      	ldr	r2, [r0, #4]
    d272:	600a      	str	r2, [r1, #0]
    d274:	7a00      	ldrb	r0, [r0, #8]
    d276:	7108      	strb	r0, [r1, #4]
    d278:	4770      	bx	lr

0000d27a <sym_WMWALCDSCSGIPZVRYNPCN3Z65BL7HB3ZVUDUXCQ>:
    d27a:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d27e:	4770      	bx	lr

0000d280 <sym_O2B23O5JYMOMMFH6X6KNGJ752KMNUHBQLRFJPCA>:
    d280:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    d284:	4770      	bx	lr

0000d286 <sym_GKNOWO7GMUO66Z63YGKTWG2BRIW6TPGP7PUQ2RQ>:
    d286:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    d28a:	4770      	bx	lr

0000d28c <sym_CLMBK65KRQWY2JSWG7BYXAJVRACUXOCNFT2IPRY>:
    d28c:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    d290:	4770      	bx	lr

0000d292 <sym_RM2CYFWBBAMZ6QU7KT5244O7T6GTURMYRG2CBQQ>:
    d292:	8980      	ldrh	r0, [r0, #12]
    d294:	8008      	strh	r0, [r1, #0]
    d296:	4770      	bx	lr

0000d298 <sym_3TJYOSQOHQD2677U7JVMG6ZM2AEKI337QVGY7TA>:
    d298:	f8d0 0016 	ldr.w	r0, [r0, #22]
    d29c:	6008      	str	r0, [r1, #0]
    d29e:	4770      	bx	lr

0000d2a0 <sym_GVKSQ3HVAAAYIHJ3KPHNCAN4HXAZB6BCZZN5T2Q>:
    d2a0:	6842      	ldr	r2, [r0, #4]
    d2a2:	600a      	str	r2, [r1, #0]
    d2a4:	6880      	ldr	r0, [r0, #8]
    d2a6:	6048      	str	r0, [r1, #4]
    d2a8:	4770      	bx	lr

0000d2aa <sym_LSOEOXZGNVP5DB6ZYJ7WAAXWSU5HO7R25UQZZBQ>:
    d2aa:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    d2ae:	600a      	str	r2, [r1, #0]
    d2b0:	6840      	ldr	r0, [r0, #4]
    d2b2:	6048      	str	r0, [r1, #4]
    d2b4:	4770      	bx	lr

0000d2b6 <sym_MMYJZLVXCKMFPUNAECUW6DM3QIRIH47IIFXKCBY>:
    d2b6:	6842      	ldr	r2, [r0, #4]
    d2b8:	600a      	str	r2, [r1, #0]
    d2ba:	6880      	ldr	r0, [r0, #8]
    d2bc:	6048      	str	r0, [r1, #4]
    d2be:	4770      	bx	lr

0000d2c0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    d2c0:	7800      	ldrb	r0, [r0, #0]
    d2c2:	f000 0003 	and.w	r0, r0, #3
    d2c6:	4770      	bx	lr

0000d2c8 <sym_GRRIKVTWBW2KWQ7YPR62UQBT5XVQYKO2LIWXODY>:
    d2c8:	7900      	ldrb	r0, [r0, #4]
    d2ca:	4770      	bx	lr

0000d2cc <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    d2cc:	8880      	ldrh	r0, [r0, #4]
    d2ce:	4770      	bx	lr

0000d2d0 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    d2d0:	88c0      	ldrh	r0, [r0, #6]
    d2d2:	4770      	bx	lr

0000d2d4 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    d2d4:	8900      	ldrh	r0, [r0, #8]
    d2d6:	4770      	bx	lr

0000d2d8 <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    d2d8:	8940      	ldrh	r0, [r0, #10]
    d2da:	4770      	bx	lr

0000d2dc <sym_VMI6LAIHFJODZECDSALRIOKPVGLRUJ6WTCP43FY>:
    d2dc:	88c0      	ldrh	r0, [r0, #6]
    d2de:	4770      	bx	lr

0000d2e0 <sym_6HFAHFLWDMEYCQ4GR3OXMWUSK4H5E4C2QPT3NZA>:
    d2e0:	7940      	ldrb	r0, [r0, #5]
    d2e2:	4770      	bx	lr

0000d2e4 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    d2e4:	7900      	ldrb	r0, [r0, #4]
    d2e6:	4770      	bx	lr

0000d2e8 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    d2e8:	7900      	ldrb	r0, [r0, #4]
    d2ea:	4770      	bx	lr

0000d2ec <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    d2ec:	8901      	ldrh	r1, [r0, #8]
    d2ee:	291b      	cmp	r1, #27
    d2f0:	d30c      	bcc.n	d30c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d2f2:	8941      	ldrh	r1, [r0, #10]
    d2f4:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d2f8:	4291      	cmp	r1, r2
    d2fa:	d307      	bcc.n	d30c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d2fc:	8881      	ldrh	r1, [r0, #4]
    d2fe:	291b      	cmp	r1, #27
    d300:	d304      	bcc.n	d30c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d302:	88c0      	ldrh	r0, [r0, #6]
    d304:	4290      	cmp	r0, r2
    d306:	d301      	bcc.n	d30c <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    d308:	2001      	movs	r0, #1
    d30a:	4770      	bx	lr
    d30c:	2000      	movs	r0, #0
    d30e:	4770      	bx	lr

0000d310 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    d310:	b510      	push	{r4, lr}
    d312:	29fb      	cmp	r1, #251	; 0xfb
    d314:	d904      	bls.n	d320 <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    d316:	f44f 61af 	mov.w	r1, #1400	; 0x578
    d31a:	202a      	movs	r0, #42	; 0x2a
    d31c:	f7f6 fcac 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d320:	7041      	strb	r1, [r0, #1]
    d322:	bd10      	pop	{r4, pc}

0000d324 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    d324:	7901      	ldrb	r1, [r0, #4]
    d326:	0749      	lsls	r1, r1, #29
    d328:	d004      	beq.n	d334 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d32a:	7940      	ldrb	r0, [r0, #5]
    d32c:	0740      	lsls	r0, r0, #29
    d32e:	d001      	beq.n	d334 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    d330:	2001      	movs	r0, #1
    d332:	4770      	bx	lr
    d334:	2000      	movs	r0, #0
    d336:	4770      	bx	lr

0000d338 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    d338:	7900      	ldrb	r0, [r0, #4]
    d33a:	4770      	bx	lr

0000d33c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    d33c:	7940      	ldrb	r0, [r0, #5]
    d33e:	4770      	bx	lr

0000d340 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    d340:	7101      	strb	r1, [r0, #4]
    d342:	4770      	bx	lr

0000d344 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    d344:	7141      	strb	r1, [r0, #5]
    d346:	4770      	bx	lr

0000d348 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA>:
    d348:	b510      	push	{r4, lr}
    d34a:	2a1b      	cmp	r2, #27
    d34c:	d904      	bls.n	d358 <sym_KDG27CITYLRG66Y5P6H5BVIHPU5DAFDVHM7DSQA+0x10>
    d34e:	f240 31df 	movw	r1, #991	; 0x3df
    d352:	202a      	movs	r0, #42	; 0x2a
    d354:	f7f6 fc90 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d358:	7042      	strb	r2, [r0, #1]
    d35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d35e:	1cc0      	adds	r0, r0, #3
    d360:	f7fe bae0 	b.w	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000d364 <sym_VUV5X4H4Y5BCHQYQ2OODYEDUWFHSSL4GLPT4S5Q>:
    d364:	6809      	ldr	r1, [r1, #0]
    d366:	60c1      	str	r1, [r0, #12]
    d368:	4770      	bx	lr

0000d36a <sym_GACCOL6OK5AZZZEY5D5QPNSIBJI3JJRDH53DCCY>:
    d36a:	680a      	ldr	r2, [r1, #0]
    d36c:	6042      	str	r2, [r0, #4]
    d36e:	6849      	ldr	r1, [r1, #4]
    d370:	6081      	str	r1, [r0, #8]
    d372:	4770      	bx	lr

0000d374 <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    d374:	680a      	ldr	r2, [r1, #0]
    d376:	6042      	str	r2, [r0, #4]
    d378:	6849      	ldr	r1, [r1, #4]
    d37a:	6081      	str	r1, [r0, #8]
    d37c:	4770      	bx	lr

0000d37e <sym_ATMVKJRU6FJAJXHYSHEXCCKRTDJACEACYJQFGVQ>:
    d37e:	680a      	ldr	r2, [r1, #0]
    d380:	6042      	str	r2, [r0, #4]
    d382:	6849      	ldr	r1, [r1, #4]
    d384:	6081      	str	r1, [r0, #8]
    d386:	4770      	bx	lr

0000d388 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    d388:	7802      	ldrb	r2, [r0, #0]
    d38a:	f001 0103 	and.w	r1, r1, #3
    d38e:	f022 0203 	bic.w	r2, r2, #3
    d392:	430a      	orrs	r2, r1
    d394:	7002      	strb	r2, [r0, #0]
    d396:	4770      	bx	lr

0000d398 <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    d398:	7101      	strb	r1, [r0, #4]
    d39a:	0a09      	lsrs	r1, r1, #8
    d39c:	7141      	strb	r1, [r0, #5]
    d39e:	4770      	bx	lr

0000d3a0 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    d3a0:	7181      	strb	r1, [r0, #6]
    d3a2:	0a09      	lsrs	r1, r1, #8
    d3a4:	71c1      	strb	r1, [r0, #7]
    d3a6:	4770      	bx	lr

0000d3a8 <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    d3a8:	7201      	strb	r1, [r0, #8]
    d3aa:	0a09      	lsrs	r1, r1, #8
    d3ac:	7241      	strb	r1, [r0, #9]
    d3ae:	4770      	bx	lr

0000d3b0 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    d3b0:	7281      	strb	r1, [r0, #10]
    d3b2:	0a09      	lsrs	r1, r1, #8
    d3b4:	72c1      	strb	r1, [r0, #11]
    d3b6:	4770      	bx	lr

0000d3b8 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I>:
    d3b8:	7802      	ldrb	r2, [r0, #0]
    d3ba:	f002 020f 	and.w	r2, r2, #15
    d3be:	2a03      	cmp	r2, #3
    d3c0:	d003      	beq.n	d3ca <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x12>
    d3c2:	2a05      	cmp	r2, #5
    d3c4:	d104      	bne.n	d3d0 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x18>
    d3c6:	f7ff beea 	b.w	d19e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x6c>
    d3ca:	7840      	ldrb	r0, [r0, #1]
    d3cc:	280c      	cmp	r0, #12
    d3ce:	d001      	beq.n	d3d4 <sym_7FFMBSDVRVZYH5XO7CHX33376QMIMFS3BQD5N7I+0x1c>
    d3d0:	2000      	movs	r0, #0
    d3d2:	4770      	bx	lr
    d3d4:	2001      	movs	r0, #1
    d3d6:	4770      	bx	lr

0000d3d8 <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I>:
    d3d8:	b570      	push	{r4, r5, r6, lr}
    d3da:	4614      	mov	r4, r2
    d3dc:	4605      	mov	r5, r0
    d3de:	2a1f      	cmp	r2, #31
    d3e0:	d903      	bls.n	d3ea <sym_AIYUY22PH5CFYGFYYYX5TRDP6GAU3UXOBISKF2I+0x12>
    d3e2:	21b2      	movs	r1, #178	; 0xb2
    d3e4:	202a      	movs	r0, #42	; 0x2a
    d3e6:	f7f6 fc47 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d3ea:	f105 0009 	add.w	r0, r5, #9
    d3ee:	f7fe fa99 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d3f2:	1da4      	adds	r4, r4, #6
    d3f4:	706c      	strb	r4, [r5, #1]
    d3f6:	bd70      	pop	{r4, r5, r6, pc}

0000d3f8 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    d3f8:	b510      	push	{r4, lr}
    d3fa:	7802      	ldrb	r2, [r0, #0]
    d3fc:	f001 030f 	and.w	r3, r1, #15
    d400:	f022 020f 	bic.w	r2, r2, #15
    d404:	431a      	orrs	r2, r3
    d406:	7002      	strb	r2, [r0, #0]
    d408:	2907      	cmp	r1, #7
    d40a:	d20c      	bcs.n	d426 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    d40c:	e8df f001 	tbb	[pc, r1]
    d410:	06040604 	.word	0x06040604
    d414:	00040804 	.word	0x00040804
    d418:	2106      	movs	r1, #6
    d41a:	e002      	b.n	d422 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d41c:	210c      	movs	r1, #12
    d41e:	e000      	b.n	d422 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    d420:	2122      	movs	r1, #34	; 0x22
    d422:	7041      	strb	r1, [r0, #1]
    d424:	bd10      	pop	{r4, pc}
    d426:	216e      	movs	r1, #110	; 0x6e
    d428:	202a      	movs	r0, #42	; 0x2a
    d42a:	f7f6 fc25 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000d42e <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    d42e:	680a      	ldr	r2, [r1, #0]
    d430:	f840 2f09 	str.w	r2, [r0, #9]!
    d434:	8889      	ldrh	r1, [r1, #4]
    d436:	8081      	strh	r1, [r0, #4]
    d438:	4770      	bx	lr

0000d43a <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    d43a:	7802      	ldrb	r2, [r0, #0]
    d43c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    d440:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    d444:	7002      	strb	r2, [r0, #0]
    d446:	4770      	bx	lr

0000d448 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    d448:	680a      	ldr	r2, [r1, #0]
    d44a:	f840 2f03 	str.w	r2, [r0, #3]!
    d44e:	8889      	ldrh	r1, [r1, #4]
    d450:	8081      	strh	r1, [r0, #4]
    d452:	4770      	bx	lr

0000d454 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    d454:	7802      	ldrb	r2, [r0, #0]
    d456:	2340      	movs	r3, #64	; 0x40
    d458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    d45c:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    d460:	430a      	orrs	r2, r1
    d462:	7002      	strb	r2, [r0, #0]
    d464:	4770      	bx	lr

0000d466 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY>:
    d466:	b570      	push	{r4, r5, r6, lr}
    d468:	4614      	mov	r4, r2
    d46a:	4605      	mov	r5, r0
    d46c:	2a1f      	cmp	r2, #31
    d46e:	d903      	bls.n	d478 <sym_MAMY3D3622JJLMFKLRQXSRTVOPUNWAAGSSCAVMY+0x12>
    d470:	21d4      	movs	r1, #212	; 0xd4
    d472:	202a      	movs	r0, #42	; 0x2a
    d474:	f7f6 fc00 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d478:	f105 0009 	add.w	r0, r5, #9
    d47c:	f7fe fa52 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d480:	1da4      	adds	r4, r4, #6
    d482:	706c      	strb	r4, [r5, #1]
    d484:	bd70      	pop	{r4, r5, r6, pc}

0000d486 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    d486:	2101      	movs	r1, #1
    d488:	f000 b853 	b.w	d532 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa6>

0000d48c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    d48c:	6841      	ldr	r1, [r0, #4]
    d48e:	2200      	movs	r2, #0
    d490:	f891 3102 	ldrb.w	r3, [r1, #258]	; 0x102
    d494:	2b00      	cmp	r3, #0
    d496:	d004      	beq.n	d4a2 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    d498:	f881 2102 	strb.w	r2, [r1, #258]	; 0x102
    d49c:	6840      	ldr	r0, [r0, #4]
    d49e:	f000 bc40 	b.w	dd22 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>
    d4a2:	4770      	bx	lr
    d4a4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d4a8:	460e      	mov	r6, r1
    d4aa:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    d4ae:	4617      	mov	r7, r2
    d4b0:	39ff      	subs	r1, #255	; 0xff
    d4b2:	d014      	beq.n	d4de <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d4b4:	8030      	strh	r0, [r6, #0]
    d4b6:	2100      	movs	r1, #0
    d4b8:	7171      	strb	r1, [r6, #5]
    d4ba:	f7f7 f805 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    d4be:	4604      	mov	r4, r0
    d4c0:	f7ff f855 	bl	c56e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    d4c4:	0005      	movs	r5, r0
    d4c6:	d00a      	beq.n	d4de <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x52>
    d4c8:	4620      	mov	r0, r4
    d4ca:	4629      	mov	r1, r5
    d4cc:	aa01      	add	r2, sp, #4
    d4ce:	f7ff f871 	bl	c5b4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    d4d2:	8070      	strh	r0, [r6, #2]
    d4d4:	b130      	cbz	r0, d4e4 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x58>
    d4d6:	28fb      	cmp	r0, #251	; 0xfb
    d4d8:	d906      	bls.n	d4e8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x5c>
    d4da:	21c9      	movs	r1, #201	; 0xc9
    d4dc:	e026      	b.n	d52c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d4de:	2000      	movs	r0, #0
    d4e0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d4e4:	21c8      	movs	r1, #200	; 0xc8
    d4e6:	e021      	b.n	d52c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d4e8:	9801      	ldr	r0, [sp, #4]
    d4ea:	f7ff fee9 	bl	d2c0 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    d4ee:	2801      	cmp	r0, #1
    d4f0:	d003      	beq.n	d4fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d4f2:	2802      	cmp	r0, #2
    d4f4:	d001      	beq.n	d4fa <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x6e>
    d4f6:	21d8      	movs	r1, #216	; 0xd8
    d4f8:	e018      	b.n	d52c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d4fa:	7130      	strb	r0, [r6, #4]
    d4fc:	4629      	mov	r1, r5
    d4fe:	8873      	ldrh	r3, [r6, #2]
    d500:	2503      	movs	r5, #3
    d502:	4620      	mov	r0, r4
    d504:	463a      	mov	r2, r7
    d506:	9500      	str	r5, [sp, #0]
    d508:	f7fe ff23 	bl	c352 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    d50c:	4620      	mov	r0, r4
    d50e:	60b7      	str	r7, [r6, #8]
    d510:	f7fe ffdc 	bl	c4cc <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    d514:	b138      	cbz	r0, d526 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9a>
    d516:	2100      	movs	r1, #0
    d518:	4620      	mov	r0, r4
    d51a:	460a      	mov	r2, r1
    d51c:	f7ff f928 	bl	c770 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    d520:	b118      	cbz	r0, d52a <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x9e>
    d522:	2001      	movs	r0, #1
    d524:	e7dc      	b.n	d4e0 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x54>
    d526:	21e8      	movs	r1, #232	; 0xe8
    d528:	e000      	b.n	d52c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xa0>
    d52a:	21ed      	movs	r1, #237	; 0xed
    d52c:	202b      	movs	r0, #43	; 0x2b
    d52e:	f7f6 fba3 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d532:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    d536:	4604      	mov	r4, r0
    d538:	460e      	mov	r6, r1
    d53a:	2000      	movs	r0, #0
    d53c:	f7f6 fd94 	bl	4068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d540:	4605      	mov	r5, r0
    d542:	2000      	movs	r0, #0
    d544:	b916      	cbnz	r6, d54c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc0>
    d546:	2001      	movs	r0, #1
    d548:	f7f6 fd8e 	bl	4068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    d54c:	2600      	movs	r6, #0
    d54e:	46b0      	mov	r8, r6
    d550:	182f      	adds	r7, r5, r0
    d552:	e017      	b.n	d584 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xf8>
    d554:	8820      	ldrh	r0, [r4, #0]
    d556:	1c40      	adds	r0, r0, #1
    d558:	b280      	uxth	r0, r0
    d55a:	8020      	strh	r0, [r4, #0]
    d55c:	42b8      	cmp	r0, r7
    d55e:	d302      	bcc.n	d566 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xda>
    d560:	4640      	mov	r0, r8
    d562:	f8a4 8000 	strh.w	r8, [r4]
    d566:	b280      	uxth	r0, r0
    d568:	42a8      	cmp	r0, r5
    d56a:	d304      	bcc.n	d576 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d56c:	42b8      	cmp	r0, r7
    d56e:	d202      	bcs.n	d576 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xea>
    d570:	2000      	movs	r0, #0
    d572:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    d576:	4669      	mov	r1, sp
    d578:	f7ff fc0e 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    d57c:	2800      	cmp	r0, #0
    d57e:	d0f8      	beq.n	d572 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>
    d580:	1c76      	adds	r6, r6, #1
    d582:	b2f6      	uxtb	r6, r6
    d584:	42b7      	cmp	r7, r6
    d586:	d8e5      	bhi.n	d554 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xc8>
    d588:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d58c:	8020      	strh	r0, [r4, #0]
    d58e:	2012      	movs	r0, #18
    d590:	e7ef      	b.n	d572 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0xe6>

0000d592 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    d592:	b570      	push	{r4, r5, r6, lr}
    d594:	8050      	strh	r0, [r2, #2]
    d596:	890c      	ldrh	r4, [r1, #8]
    d598:	8094      	strh	r4, [r2, #4]
    d59a:	898b      	ldrh	r3, [r1, #12]
    d59c:	80d3      	strh	r3, [r2, #6]
    d59e:	8948      	ldrh	r0, [r1, #10]
    d5a0:	8110      	strh	r0, [r2, #8]
    d5a2:	89cd      	ldrh	r5, [r1, #14]
    d5a4:	8155      	strh	r5, [r2, #10]
    d5a6:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    d5a8:	42ae      	cmp	r6, r5
    d5aa:	d108      	bne.n	d5be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d5ac:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    d5ae:	4285      	cmp	r5, r0
    d5b0:	d105      	bne.n	d5be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d5b2:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    d5b4:	429d      	cmp	r5, r3
    d5b6:	d102      	bne.n	d5be <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    d5b8:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    d5ba:	42a3      	cmp	r3, r4
    d5bc:	d001      	beq.n	d5c2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    d5be:	2301      	movs	r3, #1
    d5c0:	e000      	b.n	d5c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    d5c2:	2300      	movs	r3, #0
    d5c4:	7313      	strb	r3, [r2, #12]
    d5c6:	8548      	strh	r0, [r1, #42]	; 0x2a
    d5c8:	8950      	ldrh	r0, [r2, #10]
    d5ca:	85c8      	strh	r0, [r1, #46]	; 0x2e
    d5cc:	8890      	ldrh	r0, [r2, #4]
    d5ce:	8588      	strh	r0, [r1, #44]	; 0x2c
    d5d0:	88d0      	ldrh	r0, [r2, #6]
    d5d2:	8608      	strh	r0, [r1, #48]	; 0x30
    d5d4:	2001      	movs	r0, #1
    d5d6:	7010      	strb	r0, [r2, #0]
    d5d8:	bd70      	pop	{r4, r5, r6, pc}

0000d5da <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    d5da:	b510      	push	{r4, lr}
    d5dc:	888c      	ldrh	r4, [r1, #4]
    d5de:	890a      	ldrh	r2, [r1, #8]
    d5e0:	884b      	ldrh	r3, [r1, #2]
    d5e2:	88c9      	ldrh	r1, [r1, #6]
    d5e4:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    d5e8:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    d5ec:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    d5f0:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    d5f4:	bd10      	pop	{r4, pc}

0000d5f6 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    d5f6:	b570      	push	{r4, r5, r6, lr}
    d5f8:	4615      	mov	r5, r2
    d5fa:	460c      	mov	r4, r1
    d5fc:	f000 f8c7 	bl	d78e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    d600:	3096      	adds	r0, #150	; 0x96
    d602:	4428      	add	r0, r5
    d604:	42a0      	cmp	r0, r4
    d606:	d801      	bhi.n	d60c <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    d608:	1a20      	subs	r0, r4, r0
    d60a:	bd70      	pop	{r4, r5, r6, pc}
    d60c:	2000      	movs	r0, #0
    d60e:	bd70      	pop	{r4, r5, r6, pc}

0000d610 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    d610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d614:	4604      	mov	r4, r0
    d616:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    d618:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    d61a:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    d61e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    d622:	4285      	cmp	r5, r0
    d624:	d300      	bcc.n	d628 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    d626:	4605      	mov	r5, r0
    d628:	4620      	mov	r0, r4
    d62a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    d62e:	f000 f89e 	bl	d76e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d632:	4601      	mov	r1, r0
    d634:	86e5      	strh	r5, [r4, #54]	; 0x36
    d636:	8761      	strh	r1, [r4, #58]	; 0x3a
    d638:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    d63a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    d63e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    d640:	4680      	mov	r8, r0
    d642:	42aa      	cmp	r2, r5
    d644:	d200      	bcs.n	d648 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    d646:	462a      	mov	r2, r5
    d648:	428b      	cmp	r3, r1
    d64a:	d200      	bcs.n	d64e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    d64c:	460b      	mov	r3, r1
    d64e:	8202      	strh	r2, [r0, #16]
    d650:	f8a8 3012 	strh.w	r3, [r8, #18]
    d654:	42bd      	cmp	r5, r7
    d656:	d101      	bne.n	d65c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    d658:	42b1      	cmp	r1, r6
    d65a:	d001      	beq.n	d660 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    d65c:	2001      	movs	r0, #1
    d65e:	e000      	b.n	d662 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    d660:	2000      	movs	r0, #0
    d662:	4681      	mov	r9, r0
    d664:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    d668:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    d66c:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    d66e:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    d670:	4285      	cmp	r5, r0
    d672:	d300      	bcc.n	d676 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    d674:	4605      	mov	r5, r0
    d676:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    d67a:	4620      	mov	r0, r4
    d67c:	f000 f87f 	bl	d77e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    d680:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    d684:	2902      	cmp	r1, #2
    d686:	d108      	bne.n	d69a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    d688:	42af      	cmp	r7, r5
    d68a:	d200      	bcs.n	d68e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    d68c:	463d      	mov	r5, r7
    d68e:	4286      	cmp	r6, r0
    d690:	d200      	bcs.n	d694 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    d692:	4630      	mov	r0, r6
    d694:	2100      	movs	r1, #0
    d696:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    d69a:	f8a8 5008 	strh.w	r5, [r8, #8]
    d69e:	f8a8 000c 	strh.w	r0, [r8, #12]
    d6a2:	42bd      	cmp	r5, r7
    d6a4:	d101      	bne.n	d6aa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    d6a6:	42b0      	cmp	r0, r6
    d6a8:	d001      	beq.n	d6ae <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    d6aa:	2001      	movs	r0, #1
    d6ac:	e000      	b.n	d6b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    d6ae:	2000      	movs	r0, #0
    d6b0:	ea40 0009 	orr.w	r0, r0, r9
    d6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d6b8 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    d6b8:	6840      	ldr	r0, [r0, #4]
    d6ba:	4770      	bx	lr

0000d6bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    d6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6c0:	4616      	mov	r6, r2
    d6c2:	460f      	mov	r7, r1
    d6c4:	4604      	mov	r4, r0
    d6c6:	f000 f862 	bl	d78e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    d6ca:	4605      	mov	r5, r0
    d6cc:	463a      	mov	r2, r7
    d6ce:	68e1      	ldr	r1, [r4, #12]
    d6d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d6d2:	f000 f847 	bl	d764 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    d6d6:	19a9      	adds	r1, r5, r6
    d6d8:	4281      	cmp	r1, r0
    d6da:	d300      	bcc.n	d6de <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    d6dc:	4608      	mov	r0, r1
    d6de:	6320      	str	r0, [r4, #48]	; 0x30
    d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d6e4 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    d6e4:	221b      	movs	r2, #27
    d6e6:	8402      	strh	r2, [r0, #32]
    d6e8:	8382      	strh	r2, [r0, #28]
    d6ea:	82c2      	strh	r2, [r0, #22]
    d6ec:	8282      	strh	r2, [r0, #20]
    d6ee:	8142      	strh	r2, [r0, #10]
    d6f0:	8202      	strh	r2, [r0, #16]
    d6f2:	8102      	strh	r2, [r0, #8]
    d6f4:	8542      	strh	r2, [r0, #42]	; 0x2a
    d6f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    d6f8:	8482      	strh	r2, [r0, #36]	; 0x24
    d6fa:	2900      	cmp	r1, #0
    d6fc:	d10a      	bne.n	d714 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    d6fe:	f44f 71a4 	mov.w	r1, #328	; 0x148
    d702:	8441      	strh	r1, [r0, #34]	; 0x22
    d704:	83c1      	strh	r1, [r0, #30]
    d706:	8341      	strh	r1, [r0, #26]
    d708:	8301      	strh	r1, [r0, #24]
    d70a:	81c1      	strh	r1, [r0, #14]
    d70c:	8241      	strh	r1, [r0, #18]
    d70e:	8181      	strh	r1, [r0, #12]
    d710:	85c1      	strh	r1, [r0, #46]	; 0x2e
    d712:	8601      	strh	r1, [r0, #48]	; 0x30
    d714:	4770      	bx	lr

0000d716 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    d716:	6800      	ldr	r0, [r0, #0]
    d718:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    d71c:	4290      	cmp	r0, r2
    d71e:	d903      	bls.n	d728 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    d720:	1a40      	subs	r0, r0, r1
    d722:	389c      	subs	r0, #156	; 0x9c
    d724:	0840      	lsrs	r0, r0, #1
    d726:	4770      	bx	lr
    d728:	2000      	movs	r0, #0
    d72a:	4770      	bx	lr

0000d72c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    d72c:	b510      	push	{r4, lr}
    d72e:	9c02      	ldr	r4, [sp, #8]
    d730:	8281      	strh	r1, [r0, #20]
    d732:	82c2      	strh	r2, [r0, #22]
    d734:	8303      	strh	r3, [r0, #24]
    d736:	8344      	strh	r4, [r0, #26]
    d738:	bd10      	pop	{r4, pc}

0000d73a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    d73a:	8050      	strh	r0, [r2, #2]
    d73c:	8a88      	ldrh	r0, [r1, #20]
    d73e:	8090      	strh	r0, [r2, #4]
    d740:	8ac8      	ldrh	r0, [r1, #22]
    d742:	80d0      	strh	r0, [r2, #6]
    d744:	8b08      	ldrh	r0, [r1, #24]
    d746:	8110      	strh	r0, [r2, #8]
    d748:	8b48      	ldrh	r0, [r1, #26]
    d74a:	8150      	strh	r0, [r2, #10]
    d74c:	2001      	movs	r0, #1
    d74e:	7010      	strb	r0, [r2, #0]
    d750:	4770      	bx	lr
    d752:	2902      	cmp	r1, #2
    d754:	d003      	beq.n	d75e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    d756:	00c0      	lsls	r0, r0, #3
    d758:	3070      	adds	r0, #112	; 0x70
    d75a:	b280      	uxth	r0, r0
    d75c:	4770      	bx	lr
    d75e:	0080      	lsls	r0, r0, #2
    d760:	303c      	adds	r0, #60	; 0x3c
    d762:	e7fa      	b.n	d75a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    d764:	4288      	cmp	r0, r1
    d766:	d300      	bcc.n	d76a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    d768:	4608      	mov	r0, r1
    d76a:	1a80      	subs	r0, r0, r2
    d76c:	4770      	bx	lr
    d76e:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    d772:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    d776:	4281      	cmp	r1, r0
    d778:	d200      	bcs.n	d77c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    d77a:	4608      	mov	r0, r1
    d77c:	4770      	bx	lr
    d77e:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    d782:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    d786:	4281      	cmp	r1, r0
    d788:	d200      	bcs.n	d78c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    d78a:	4608      	mov	r0, r1
    d78c:	4770      	bx	lr
    d78e:	2196      	movs	r1, #150	; 0x96
    d790:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    d794:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    d798:	f000 b800 	b.w	d79c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    d79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7a0:	460d      	mov	r5, r1
    d7a2:	4606      	mov	r6, r0
    d7a4:	4698      	mov	r8, r3
    d7a6:	4617      	mov	r7, r2
    d7a8:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    d7aa:	4611      	mov	r1, r2
    d7ac:	f7ff ffd1 	bl	d752 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d7b0:	4604      	mov	r4, r0
    d7b2:	4639      	mov	r1, r7
    d7b4:	4630      	mov	r0, r6
    d7b6:	f7ff ffe2 	bl	d77e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    d7ba:	42a0      	cmp	r0, r4
    d7bc:	d200      	bcs.n	d7c0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    d7be:	4604      	mov	r4, r0
    d7c0:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    d7c2:	4641      	mov	r1, r8
    d7c4:	f7ff ffc5 	bl	d752 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    d7c8:	4607      	mov	r7, r0
    d7ca:	4641      	mov	r1, r8
    d7cc:	4630      	mov	r0, r6
    d7ce:	f7ff ffce 	bl	d76e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    d7d2:	42b8      	cmp	r0, r7
    d7d4:	d300      	bcc.n	d7d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    d7d6:	4638      	mov	r0, r7
    d7d8:	4420      	add	r0, r4
    d7da:	4428      	add	r0, r5
    d7dc:	1d80      	adds	r0, r0, #6
    d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7e2:	2801      	cmp	r0, #1
    d7e4:	d102      	bne.n	d7ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    d7e6:	7948      	ldrb	r0, [r1, #5]
    d7e8:	0980      	lsrs	r0, r0, #6
    d7ea:	d001      	beq.n	d7f0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    d7ec:	2000      	movs	r0, #0
    d7ee:	4770      	bx	lr
    d7f0:	2001      	movs	r0, #1
    d7f2:	4770      	bx	lr
    d7f4:	2801      	cmp	r0, #1
    d7f6:	d106      	bne.n	d806 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    d7f8:	7948      	ldrb	r0, [r1, #5]
    d7fa:	2101      	movs	r1, #1
    d7fc:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    d800:	d101      	bne.n	d806 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    d802:	2001      	movs	r0, #1
    d804:	4770      	bx	lr
    d806:	2000      	movs	r0, #0
    d808:	4770      	bx	lr
    d80a:	2802      	cmp	r0, #2
    d80c:	d003      	beq.n	d816 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    d80e:	2803      	cmp	r0, #3
    d810:	d001      	beq.n	d816 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xdc>
    d812:	2000      	movs	r0, #0
    d814:	4770      	bx	lr
    d816:	2001      	movs	r0, #1
    d818:	4770      	bx	lr

0000d81a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    d81a:	b510      	push	{r4, lr}
    d81c:	4604      	mov	r4, r0
    d81e:	7c00      	ldrb	r0, [r0, #16]
    d820:	f7ff fff3 	bl	d80a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    d824:	b148      	cbz	r0, d83a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d826:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
    d82a:	f104 0150 	add.w	r1, r4, #80	; 0x50
    d82e:	f7ff fa70 	bl	cd12 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d832:	2808      	cmp	r0, #8
    d834:	d001      	beq.n	d83a <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    d836:	2001      	movs	r0, #1
    d838:	bd10      	pop	{r4, pc}
    d83a:	7c20      	ldrb	r0, [r4, #16]
    d83c:	b118      	cbz	r0, d846 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d83e:	2802      	cmp	r0, #2
    d840:	d001      	beq.n	d846 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    d842:	7de0      	ldrb	r0, [r4, #23]
    d844:	bd10      	pop	{r4, pc}
    d846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d84a:	2000      	movs	r0, #0
    d84c:	f7f7 b940 	b.w	4ad0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000d850 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    d850:	b508      	push	{r3, lr}
    d852:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
    d856:	f88d 1000 	strb.w	r1, [sp]
    d85a:	9900      	ldr	r1, [sp, #0]
    d85c:	9100      	str	r1, [sp, #0]
    d85e:	f89d 1000 	ldrb.w	r1, [sp]
    d862:	b109      	cbz	r1, d868 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x18>
    d864:	2001      	movs	r0, #1
    d866:	bd08      	pop	{r3, pc}
    d868:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    d86c:	f88d 0000 	strb.w	r0, [sp]
    d870:	9800      	ldr	r0, [sp, #0]
    d872:	9000      	str	r0, [sp, #0]
    d874:	f89d 0000 	ldrb.w	r0, [sp]
    d878:	2000      	movs	r0, #0
    d87a:	bd08      	pop	{r3, pc}

0000d87c <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    d87c:	20ff      	movs	r0, #255	; 0xff
    d87e:	7008      	strb	r0, [r1, #0]
    d880:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    d882:	f7ff b99c 	b.w	cbbe <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000d886 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    d886:	b51c      	push	{r2, r3, r4, lr}
    d888:	4604      	mov	r4, r0
    d88a:	22d4      	movs	r2, #212	; 0xd4
    d88c:	2100      	movs	r1, #0
    d88e:	f7fe f8c3 	bl	ba18 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d892:	20ff      	movs	r0, #255	; 0xff
    d894:	7020      	strb	r0, [r4, #0]
    d896:	207f      	movs	r0, #127	; 0x7f
    d898:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    d89c:	2013      	movs	r0, #19
    d89e:	8060      	strh	r0, [r4, #2]
    d8a0:	f7f6 fed2 	bl	4648 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    d8a4:	4601      	mov	r1, r0
    d8a6:	62e0      	str	r0, [r4, #44]	; 0x2c
    d8a8:	2200      	movs	r2, #0
    d8aa:	4668      	mov	r0, sp
    d8ac:	f7ff f8f2 	bl	ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    d8b0:	2200      	movs	r2, #0
    d8b2:	2101      	movs	r1, #1
    d8b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d8b6:	f7ff f962 	bl	cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    d8ba:	2204      	movs	r2, #4
    d8bc:	4668      	mov	r0, sp
    d8be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    d8c0:	f7ff f8e8 	bl	ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    d8c4:	2200      	movs	r2, #0
    d8c6:	4611      	mov	r1, r2
    d8c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d8ca:	f7ff f958 	bl	cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    d8ce:	2000      	movs	r0, #0
    d8d0:	73a0      	strb	r0, [r4, #14]
    d8d2:	f104 0020 	add.w	r0, r4, #32
    d8d6:	e8bd 401c 	ldmia.w	sp!, {r2, r3, r4, lr}
    d8da:	f000 b962 	b.w	dba2 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000d8de <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    d8de:	7880      	ldrb	r0, [r0, #2]
    d8e0:	f3c0 0080 	ubfx	r0, r0, #2, #1
    d8e4:	b108      	cbz	r0, d8ea <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    d8e6:	2000      	movs	r0, #0
    d8e8:	4770      	bx	lr
    d8ea:	201f      	movs	r0, #31
    d8ec:	4770      	bx	lr

0000d8ee <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    d8ee:	f7f9 b9ed 	b.w	6ccc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ec>

0000d8f2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    d8f2:	6880      	ldr	r0, [r0, #8]
    d8f4:	4770      	bx	lr

0000d8f6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    d8f6:	2001      	movs	r0, #1
    d8f8:	4770      	bx	lr

0000d8fa <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    d8fa:	b510      	push	{r4, lr}
    d8fc:	4604      	mov	r4, r0
    d8fe:	3020      	adds	r0, #32
    d900:	f000 f90f 	bl	db22 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    d904:	8861      	ldrh	r1, [r4, #2]
    d906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d90a:	2228      	movs	r2, #40	; 0x28
    d90c:	f7f9 bbbc 	b.w	7088 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000d910 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    d910:	2200      	movs	r2, #0
    d912:	6282      	str	r2, [r0, #40]	; 0x28
    d914:	8843      	ldrh	r3, [r0, #2]
    d916:	2b1d      	cmp	r3, #29
    d918:	d001      	beq.n	d91e <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    d91a:	7341      	strb	r1, [r0, #13]
    d91c:	4770      	bx	lr
    d91e:	7342      	strb	r2, [r0, #13]
    d920:	4770      	bx	lr

0000d922 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ>:
    d922:	b510      	push	{r4, lr}
    d924:	2400      	movs	r4, #0
    d926:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    d928:	f7ff f917 	bl	cb5a <sym_SYX5A4D5YT7FQ4PORL5PYZ5T6BOBVEZRWNZWOOA>
    d92c:	b100      	cbz	r0, d930 <sym_JWG2K5Z2IDS7IGZ34EUMCNHIOV34425FH263YQQ+0xe>
    d92e:	2001      	movs	r0, #1
    d930:	4384      	bics	r4, r0
    d932:	f084 0001 	eor.w	r0, r4, #1
    d936:	bd10      	pop	{r4, pc}

0000d938 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    d938:	2000      	movs	r0, #0
    d93a:	4770      	bx	lr

0000d93c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    d93c:	7880      	ldrb	r0, [r0, #2]
    d93e:	f000 0001 	and.w	r0, r0, #1
    d942:	4770      	bx	lr

0000d944 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    d944:	7880      	ldrb	r0, [r0, #2]
    d946:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d94a:	4770      	bx	lr

0000d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    d94c:	2001      	movs	r0, #1
    d94e:	4770      	bx	lr

0000d950 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    d950:	7880      	ldrb	r0, [r0, #2]
    d952:	f3c0 0040 	ubfx	r0, r0, #1, #1
    d956:	4770      	bx	lr

0000d958 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    d958:	f990 000e 	ldrsb.w	r0, [r0, #14]
    d95c:	4770      	bx	lr

0000d95e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    d95e:	7800      	ldrb	r0, [r0, #0]
    d960:	28ff      	cmp	r0, #255	; 0xff
    d962:	d001      	beq.n	d968 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    d964:	2001      	movs	r0, #1
    d966:	4770      	bx	lr
    d968:	2000      	movs	r0, #0
    d96a:	4770      	bx	lr

0000d96c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    d96c:	680a      	ldr	r2, [r1, #0]
    d96e:	f840 2f11 	str.w	r2, [r0, #17]!
    d972:	8889      	ldrh	r1, [r1, #4]
    d974:	8081      	strh	r1, [r0, #4]
    d976:	2101      	movs	r1, #1
    d978:	7181      	strb	r1, [r0, #6]
    d97a:	4770      	bx	lr

0000d97c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    d97c:	7b00      	ldrb	r0, [r0, #12]
    d97e:	4770      	bx	lr

0000d980 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    d980:	2001      	movs	r0, #1
    d982:	4770      	bx	lr

0000d984 <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    d984:	61c1      	str	r1, [r0, #28]
    d986:	4770      	bx	lr

0000d988 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    d988:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    d98c:	4770      	bx	lr

0000d98e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    d98e:	b570      	push	{r4, r5, r6, lr}
    d990:	4604      	mov	r4, r0
    d992:	7880      	ldrb	r0, [r0, #2]
    d994:	2501      	movs	r5, #1
    d996:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    d99a:	b138      	cbz	r0, d9ac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e>
    d99c:	233c      	movs	r3, #60	; 0x3c
    d99e:	22ff      	movs	r2, #255	; 0xff
    d9a0:	4620      	mov	r0, r4
    d9a2:	69e1      	ldr	r1, [r4, #28]
    d9a4:	f7f9 f9be 	bl	6d24 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    d9a8:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
    d9ac:	78a0      	ldrb	r0, [r4, #2]
    d9ae:	07c0      	lsls	r0, r0, #31
    d9b0:	f7fc f92c 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    d9b4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
    d9b8:	bd70      	pop	{r4, r5, r6, pc}

0000d9ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    d9ba:	7bc0      	ldrb	r0, [r0, #15]
    d9bc:	2800      	cmp	r0, #0
    d9be:	d000      	beq.n	d9c2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    d9c0:	2001      	movs	r0, #1
    d9c2:	4770      	bx	lr
    d9c4:	b510      	push	{r4, lr}
    d9c6:	f7ff f9a4 	bl	cd12 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    d9ca:	4604      	mov	r4, r0
    d9cc:	f7f7 ff28 	bl	5820 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    d9d0:	b138      	cbz	r0, d9e2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    d9d2:	4620      	mov	r0, r4
    d9d4:	f7f7 fe5c 	bl	5690 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    d9d8:	b118      	cbz	r0, d9e2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    d9da:	2110      	movs	r1, #16
    d9dc:	f7ff fb79 	bl	d0d2 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    d9e0:	b108      	cbz	r0, d9e6 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x2c>
    d9e2:	2000      	movs	r0, #0
    d9e4:	bd10      	pop	{r4, pc}
    d9e6:	2001      	movs	r0, #1
    d9e8:	bd10      	pop	{r4, pc}
    d9ea:	2101      	movs	r1, #1
    d9ec:	f7f8 bdf8 	b.w	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    d9f0:	2101      	movs	r1, #1
    d9f2:	f7f8 bdf5 	b.w	65e0 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>
    d9f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9fa:	4604      	mov	r4, r0
    d9fc:	2700      	movs	r7, #0
    d9fe:	704f      	strb	r7, [r1, #1]
    da00:	2011      	movs	r0, #17
    da02:	460d      	mov	r5, r1
    da04:	7008      	strb	r0, [r1, #0]
    da06:	2220      	movs	r2, #32
    da08:	f104 0166 	add.w	r1, r4, #102	; 0x66
    da0c:	1d28      	adds	r0, r5, #4
    da0e:	f7fd ff89 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da12:	2601      	movs	r6, #1
    da14:	722e      	strb	r6, [r5, #8]
    da16:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
    da1a:	7928      	ldrb	r0, [r5, #4]
    da1c:	2800      	cmp	r0, #0
    da1e:	d111      	bne.n	da44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8a>
    da20:	88e8      	ldrh	r0, [r5, #6]
    da22:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    da26:	69e0      	ldr	r0, [r4, #28]
    da28:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    da2c:	f884 1092 	strb.w	r1, [r4, #146]	; 0x92
    da30:	f884 608e 	strb.w	r6, [r4, #142]	; 0x8e
    da34:	8800      	ldrh	r0, [r0, #0]
    da36:	f7f6 fd47 	bl	44c8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    da3a:	f7fe fe4b 	bl	c6d4 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    da3e:	69e0      	ldr	r0, [r4, #28]
    da40:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
    da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    da48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da4c:	4604      	mov	r4, r0
    da4e:	460f      	mov	r7, r1
    da50:	7e40      	ldrb	r0, [r0, #25]
    da52:	f7f7 fddd 	bl	5610 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    da56:	4606      	mov	r6, r0
    da58:	7e20      	ldrb	r0, [r4, #24]
    da5a:	f104 0549 	add.w	r5, r4, #73	; 0x49
    da5e:	b120      	cbz	r0, da6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    da60:	b11e      	cbz	r6, da6a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xb0>
    da62:	7e60      	ldrb	r0, [r4, #25]
    da64:	f7f7 fdc8 	bl	55f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    da68:	b1a0      	cbz	r0, da94 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xda>
    da6a:	f894 0062 	ldrb.w	r0, [r4, #98]	; 0x62
    da6e:	2800      	cmp	r0, #0
    da70:	d024      	beq.n	dabc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    da72:	7ea0      	ldrb	r0, [r4, #26]
    da74:	2800      	cmp	r0, #0
    da76:	d021      	beq.n	dabc <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x102>
    da78:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    da7c:	4629      	mov	r1, r5
    da7e:	f7ff feb9 	bl	d7f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    da82:	b1a8      	cbz	r0, dab0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xf6>
    da84:	f7f7 fdb4 	bl	55f0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    da88:	463a      	mov	r2, r7
    da8a:	4629      	mov	r1, r5
    da8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    da90:	f7ff b8d7 	b.w	cc42 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    da94:	2001      	movs	r0, #1
    da96:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    da9a:	463a      	mov	r2, r7
    da9c:	4629      	mov	r1, r5
    da9e:	4630      	mov	r0, r6
    daa0:	f7ff f8cf 	bl	cc42 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    daa4:	7e61      	ldrb	r1, [r4, #25]
    daa6:	4628      	mov	r0, r5
    daa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    daac:	f7f7 bdbc 	b.w	5628 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    dab0:	4639      	mov	r1, r7
    dab2:	4628      	mov	r0, r5
    dab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dab8:	f7ff b8b2 	b.w	cc20 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    dabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dac0:	b510      	push	{r4, lr}
    dac2:	4604      	mov	r4, r0
    dac4:	4608      	mov	r0, r1
    dac6:	f7fd fa55 	bl	af74 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    daca:	7921      	ldrb	r1, [r4, #4]
    dacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dad0:	2025      	movs	r0, #37	; 0x25
    dad2:	f001 bd69 	b.w	f5a8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    dad6:	b510      	push	{r4, lr}
    dad8:	4604      	mov	r4, r0
    dada:	3026      	adds	r0, #38	; 0x26
    dadc:	f7fd fa0a 	bl	aef4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    dae0:	2800      	cmp	r0, #0
    dae2:	d102      	bne.n	daea <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x130>
    dae4:	207f      	movs	r0, #127	; 0x7f
    dae6:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    daea:	bd10      	pop	{r4, pc}
    daec:	7802      	ldrb	r2, [r0, #0]
    daee:	2320      	movs	r3, #32
    daf0:	f022 0220 	bic.w	r2, r2, #32
    daf4:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    daf8:	430a      	orrs	r2, r1
    dafa:	7002      	strb	r2, [r0, #0]
    dafc:	4770      	bx	lr

0000dafe <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    dafe:	b570      	push	{r4, r5, r6, lr}
    db00:	7001      	strb	r1, [r0, #0]
    db02:	7042      	strb	r2, [r0, #1]
    db04:	4614      	mov	r4, r2
    db06:	460d      	mov	r5, r1
    db08:	7880      	ldrb	r0, [r0, #2]
    db0a:	f000 f87f 	bl	dc0c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    db0e:	fb10 f005 	smulbb	r0, r0, r5
    db12:	4360      	muls	r0, r4
    db14:	28ff      	cmp	r0, #255	; 0xff
    db16:	d303      	bcc.n	db20 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    db18:	215c      	movs	r1, #92	; 0x5c
    db1a:	202e      	movs	r0, #46	; 0x2e
    db1c:	f7f6 f8ac 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db20:	bd70      	pop	{r4, r5, r6, pc}

0000db22 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    db22:	b510      	push	{r4, lr}
    db24:	4604      	mov	r4, r0
    db26:	7880      	ldrb	r0, [r0, #2]
    db28:	f000 f870 	bl	dc0c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    db2c:	7861      	ldrb	r1, [r4, #1]
    db2e:	7822      	ldrb	r2, [r4, #0]
    db30:	fb11 f102 	smulbb	r1, r1, r2
    db34:	4348      	muls	r0, r1
    db36:	b2c0      	uxtb	r0, r0
    db38:	bd10      	pop	{r4, pc}

0000db3a <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    db3a:	b510      	push	{r4, lr}
    db3c:	4604      	mov	r4, r0
    db3e:	f000 f84d 	bl	dbdc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    db42:	7961      	ldrb	r1, [r4, #5]
    db44:	1c49      	adds	r1, r1, #1
    db46:	b2c9      	uxtb	r1, r1
    db48:	7161      	strb	r1, [r4, #5]
    db4a:	7862      	ldrb	r2, [r4, #1]
    db4c:	4291      	cmp	r1, r2
    db4e:	d10b      	bne.n	db68 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    db50:	2200      	movs	r2, #0
    db52:	7162      	strb	r2, [r4, #5]
    db54:	78e1      	ldrb	r1, [r4, #3]
    db56:	4301      	orrs	r1, r0
    db58:	70e1      	strb	r1, [r4, #3]
    db5a:	78a3      	ldrb	r3, [r4, #2]
    db5c:	4299      	cmp	r1, r3
    db5e:	d103      	bne.n	db68 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    db60:	70e2      	strb	r2, [r4, #3]
    db62:	7921      	ldrb	r1, [r4, #4]
    db64:	1c49      	adds	r1, r1, #1
    db66:	7121      	strb	r1, [r4, #4]
    db68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    db6c:	f000 b825 	b.w	dbba <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000db70 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    db70:	7081      	strb	r1, [r0, #2]
    db72:	4770      	bx	lr

0000db74 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    db74:	b570      	push	{r4, r5, r6, lr}
    db76:	4604      	mov	r4, r0
    db78:	7880      	ldrb	r0, [r0, #2]
    db7a:	f000 f847 	bl	dc0c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    db7e:	7861      	ldrb	r1, [r4, #1]
    db80:	fb11 f500 	smulbb	r5, r1, r0
    db84:	78e0      	ldrb	r0, [r4, #3]
    db86:	f000 f841 	bl	dc0c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    db8a:	7861      	ldrb	r1, [r4, #1]
    db8c:	7962      	ldrb	r2, [r4, #5]
    db8e:	fb10 2001 	smlabb	r0, r0, r1, r2
    db92:	7821      	ldrb	r1, [r4, #0]
    db94:	7922      	ldrb	r2, [r4, #4]
    db96:	1a89      	subs	r1, r1, r2
    db98:	fb11 f105 	smulbb	r1, r1, r5
    db9c:	1a08      	subs	r0, r1, r0
    db9e:	b2c0      	uxtb	r0, r0
    dba0:	bd70      	pop	{r4, r5, r6, pc}

0000dba2 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    dba2:	2100      	movs	r1, #0
    dba4:	6001      	str	r1, [r0, #0]
    dba6:	8081      	strh	r1, [r0, #4]
    dba8:	2101      	movs	r1, #1
    dbaa:	7041      	strb	r1, [r0, #1]
    dbac:	7001      	strb	r1, [r0, #0]
    dbae:	4770      	bx	lr

0000dbb0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    dbb0:	2100      	movs	r1, #0
    dbb2:	70c1      	strb	r1, [r0, #3]
    dbb4:	7141      	strb	r1, [r0, #5]
    dbb6:	7101      	strb	r1, [r0, #4]
    dbb8:	4770      	bx	lr
    dbba:	b510      	push	{r4, lr}
    dbbc:	2801      	cmp	r0, #1
    dbbe:	d007      	beq.n	dbd0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    dbc0:	2802      	cmp	r0, #2
    dbc2:	d007      	beq.n	dbd4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    dbc4:	2804      	cmp	r0, #4
    dbc6:	d007      	beq.n	dbd8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    dbc8:	2139      	movs	r1, #57	; 0x39
    dbca:	202e      	movs	r0, #46	; 0x2e
    dbcc:	f7f6 f854 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbd0:	2025      	movs	r0, #37	; 0x25
    dbd2:	bd10      	pop	{r4, pc}
    dbd4:	2026      	movs	r0, #38	; 0x26
    dbd6:	bd10      	pop	{r4, pc}
    dbd8:	2027      	movs	r0, #39	; 0x27
    dbda:	bd10      	pop	{r4, pc}
    dbdc:	4601      	mov	r1, r0
    dbde:	2000      	movs	r0, #0
    dbe0:	788a      	ldrb	r2, [r1, #2]
    dbe2:	07d3      	lsls	r3, r2, #31
    dbe4:	d002      	beq.n	dbec <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    dbe6:	78cb      	ldrb	r3, [r1, #3]
    dbe8:	07db      	lsls	r3, r3, #31
    dbea:	d006      	beq.n	dbfa <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    dbec:	0793      	lsls	r3, r2, #30
    dbee:	d506      	bpl.n	dbfe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    dbf0:	78cb      	ldrb	r3, [r1, #3]
    dbf2:	079b      	lsls	r3, r3, #30
    dbf4:	d403      	bmi.n	dbfe <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    dbf6:	2002      	movs	r0, #2
    dbf8:	4770      	bx	lr
    dbfa:	2001      	movs	r0, #1
    dbfc:	4770      	bx	lr
    dbfe:	0752      	lsls	r2, r2, #29
    dc00:	d5fc      	bpl.n	dbfc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    dc02:	78c9      	ldrb	r1, [r1, #3]
    dc04:	0749      	lsls	r1, r1, #29
    dc06:	d4f9      	bmi.n	dbfc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    dc08:	2004      	movs	r0, #4
    dc0a:	4770      	bx	lr
    dc0c:	f3c0 0180 	ubfx	r1, r0, #2, #1
    dc10:	f3c0 0240 	ubfx	r2, r0, #1, #1
    dc14:	4411      	add	r1, r2
    dc16:	f000 0001 	and.w	r0, r0, #1
    dc1a:	4408      	add	r0, r1
    dc1c:	4770      	bx	lr

0000dc1e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    dc1e:	f240 315a 	movw	r1, #858	; 0x35a
    dc22:	4348      	muls	r0, r1
    dc24:	4770      	bx	lr

0000dc26 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    dc26:	f240 20ef 	movw	r0, #751	; 0x2ef
    dc2a:	4770      	bx	lr
    dc2c:	041c020e 	.word	0x041c020e
    dc30:	0c600630 	.word	0x0c600630
    dc34:	06b4035a 	.word	0x06b4035a
    dc38:	0bf505c5 	.word	0x0bf505c5
    dc3c:	01a31225 	.word	0x01a31225
    dc40:	05bf03b1 	.word	0x05bf03b1
    dc44:	064902ef 	.word	0x064902ef
    dc48:	09a3      	.short	0x09a3

0000dc4a <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    dc4a:	b510      	push	{r4, lr}
    dc4c:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    dc50:	b109      	cbz	r1, dc56 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    dc52:	2000      	movs	r0, #0
    dc54:	bd10      	pop	{r4, pc}
    dc56:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    dc5a:	b949      	cbnz	r1, dc70 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dc5c:	f890 10a8 	ldrb.w	r1, [r0, #168]	; 0xa8
    dc60:	b131      	cbz	r1, dc70 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dc62:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
    dc66:	428a      	cmp	r2, r1
    dc68:	d902      	bls.n	dc70 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x26>
    dc6a:	f7ff fe90 	bl	d98e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    dc6e:	e7f0      	b.n	dc52 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    dc70:	2001      	movs	r0, #1
    dc72:	bd10      	pop	{r4, pc}

0000dc74 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    dc74:	b510      	push	{r4, lr}
    dc76:	b131      	cbz	r1, dc86 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    dc78:	2901      	cmp	r1, #1
    dc7a:	d008      	beq.n	dc8e <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    dc7c:	f240 718a 	movw	r1, #1930	; 0x78a
    dc80:	2030      	movs	r0, #48	; 0x30
    dc82:	f7f5 fff9 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc8a:	f000 b9d4 	b.w	e036 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x314>
    dc8e:	2100      	movs	r1, #0
    dc90:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
    dc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc98:	f000 b93b 	b.w	df12 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>

0000dc9c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>:
    dc9c:	b510      	push	{r4, lr}
    dc9e:	4604      	mov	r4, r0
    dca0:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    dca4:	2800      	cmp	r0, #0
    dca6:	d019      	beq.n	dcdc <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x40>
    dca8:	2001      	movs	r0, #1
    dcaa:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    dcae:	4601      	mov	r1, r0
    dcb0:	4620      	mov	r0, r4
    dcb2:	f7ff fe69 	bl	d988 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    dcb6:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
    dcba:	b170      	cbz	r0, dcda <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x3e>
    dcbc:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    dcc0:	f7f4 f8a8 	bl	1e14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    dcc4:	7820      	ldrb	r0, [r4, #0]
    dcc6:	f7f4 f9f3 	bl	20b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    dcca:	f814 09a0 	ldrb.w	r0, [r4], #-160
    dcce:	f7f4 f9cd 	bl	206c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    dcd2:	b120      	cbz	r0, dcde <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI+0x42>
    dcd4:	2000      	movs	r0, #0
    dcd6:	f884 00b4 	strb.w	r0, [r4, #180]	; 0xb4
    dcda:	2000      	movs	r0, #0
    dcdc:	bd10      	pop	{r4, pc}
    dcde:	f240 210f 	movw	r1, #527	; 0x20f
    dce2:	2030      	movs	r0, #48	; 0x30
    dce4:	f7f5 ffc8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dce8 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>:
    dce8:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    dcec:	4770      	bx	lr

0000dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>:
    dcee:	f890 00b4 	ldrb.w	r0, [r0, #180]	; 0xb4
    dcf2:	4770      	bx	lr

0000dcf4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>:
    dcf4:	b50e      	push	{r1, r2, r3, lr}
    dcf6:	4669      	mov	r1, sp
    dcf8:	2001      	movs	r0, #1
    dcfa:	f7fe fe14 	bl	c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    dcfe:	b138      	cbz	r0, dd10 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x1c>
    dd00:	f44f 71a1 	mov.w	r1, #322	; 0x142
    dd04:	2030      	movs	r0, #48	; 0x30
    dd06:	f7f5 ffb7 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd0a:	9802      	ldr	r0, [sp, #8]
    dd0c:	f7ff ffc6 	bl	dc9c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    dd10:	4668      	mov	r0, sp
    dd12:	f7f6 f9f7 	bl	4104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    dd16:	2800      	cmp	r0, #0
    dd18:	d0f7      	beq.n	dd0a <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA+0x16>
    dd1a:	f7f9 fb31 	bl	7380 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0xb0>
    dd1e:	2000      	movs	r0, #0
    dd20:	bd0e      	pop	{r1, r2, r3, pc}

0000dd22 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY>:
    dd22:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    dd24:	4604      	mov	r4, r0
    dd26:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    dd2a:	2800      	cmp	r0, #0
    dd2c:	d153      	bne.n	ddd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dd2e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    dd32:	2803      	cmp	r0, #3
    dd34:	d14f      	bne.n	ddd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dd36:	f7fd fc80 	bl	b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    dd3a:	4601      	mov	r1, r0
    dd3c:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    dd40:	f7f3 fc04 	bl	154c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    dd44:	2800      	cmp	r0, #0
    dd46:	dd46      	ble.n	ddd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dd48:	68e1      	ldr	r1, [r4, #12]
    dd4a:	b111      	cbz	r1, dd52 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30>
    dd4c:	fbb0 f0f1 	udiv	r0, r0, r1
    dd50:	e000      	b.n	dd54 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x32>
    dd52:	2000      	movs	r0, #0
    dd54:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    dd58:	1c40      	adds	r0, r0, #1
    dd5a:	4408      	add	r0, r1
    dd5c:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    dd60:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    dd64:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    dd68:	1a08      	subs	r0, r1, r0
    dd6a:	b200      	sxth	r0, r0
    dd6c:	2800      	cmp	r0, #0
    dd6e:	dd32      	ble.n	ddd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dd70:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    dd74:	f7f4 f84e 	bl	1e14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    dd78:	2800      	cmp	r0, #0
    dd7a:	d02c      	beq.n	ddd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    dd7c:	2001      	movs	r0, #1
    dd7e:	f884 0149 	strb.w	r0, [r4, #329]	; 0x149
    dd82:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    dd86:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    dd8a:	ae01      	add	r6, sp, #4
    dd8c:	1a40      	subs	r0, r0, r1
    dd8e:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    dd92:	1e40      	subs	r0, r0, #1
    dd94:	4408      	add	r0, r1
    dd96:	b285      	uxth	r5, r0
    dd98:	e017      	b.n	ddca <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xa8>
    dd9a:	9600      	str	r6, [sp, #0]
    dd9c:	f8b4 1144 	ldrh.w	r1, [r4, #324]	; 0x144
    dda0:	2300      	movs	r3, #0
    dda2:	2201      	movs	r2, #1
    dda4:	4620      	mov	r0, r4
    dda6:	f7f9 fbbb 	bl	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    ddaa:	2800      	cmp	r0, #0
    ddac:	d013      	beq.n	ddd6 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xb4>
    ddae:	2801      	cmp	r0, #1
    ddb0:	d004      	beq.n	ddbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x9a>
    ddb2:	f240 610c 	movw	r1, #1548	; 0x60c
    ddb6:	2030      	movs	r0, #48	; 0x30
    ddb8:	f7f5 ff5e 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddbc:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ddc0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    ddc4:	4408      	add	r0, r1
    ddc6:	f8a4 0144 	strh.w	r0, [r4, #324]	; 0x144
    ddca:	f8b4 0144 	ldrh.w	r0, [r4, #324]	; 0x144
    ddce:	1a28      	subs	r0, r5, r0
    ddd0:	b200      	sxth	r0, r0
    ddd2:	2800      	cmp	r0, #0
    ddd4:	dae1      	bge.n	dd9a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x78>
    ddd6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ddd8:	2000      	movs	r0, #0
    ddda:	4770      	bx	lr
    dddc:	b570      	push	{r4, r5, r6, lr}
    ddde:	4604      	mov	r4, r0
    dde0:	2601      	movs	r6, #1
    dde2:	f000 f90c 	bl	dffe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    dde6:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    ddea:	2000      	movs	r0, #0
    ddec:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    ddf0:	2001      	movs	r0, #1
    ddf2:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    ddf6:	f894 00a8 	ldrb.w	r0, [r4, #168]	; 0xa8
    ddfa:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
    ddfe:	b160      	cbz	r0, de1a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0xf8>
    de00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    de04:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    de08:	f7f3 fb6e 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    de0c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    de10:	2100      	movs	r1, #0
    de12:	4628      	mov	r0, r5
    de14:	f7ff f8a3 	bl	cf5e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    de18:	e00f      	b.n	de3a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x118>
    de1a:	4620      	mov	r0, r4
    de1c:	f7ff fd69 	bl	d8f2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    de20:	4606      	mov	r6, r0
    de22:	4631      	mov	r1, r6
    de24:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    de28:	f7f3 fb5e 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    de2c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    de30:	4631      	mov	r1, r6
    de32:	4628      	mov	r0, r5
    de34:	f7ff f893 	bl	cf5e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    de38:	1c46      	adds	r6, r0, #1
    de3a:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    de3e:	1c41      	adds	r1, r0, #1
    de40:	290a      	cmp	r1, #10
    de42:	d202      	bcs.n	de4a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x128>
    de44:	4430      	add	r0, r6
    de46:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    de4a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
    de4e:	b130      	cbz	r0, de5e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    de50:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
    de54:	1c40      	adds	r0, r0, #1
    de56:	280a      	cmp	r0, #10
    de58:	d301      	bcc.n	de5e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13c>
    de5a:	2002      	movs	r0, #2
    de5c:	e000      	b.n	de60 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x13e>
    de5e:	2003      	movs	r0, #3
    de60:	f884 00c2 	strb.w	r0, [r4, #194]	; 0xc2
    de64:	2100      	movs	r1, #0
    de66:	4620      	mov	r0, r4
    de68:	f000 f822 	bl	deb0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18e>
    de6c:	b120      	cbz	r0, de78 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x156>
    de6e:	4620      	mov	r0, r4
    de70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de74:	f000 b80d 	b.w	de92 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x170>
    de78:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    de7c:	4629      	mov	r1, r5
    de7e:	f000 f8bc 	bl	dffa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    de82:	2800      	cmp	r0, #0
    de84:	d104      	bne.n	de90 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x16e>
    de86:	f240 61ad 	movw	r1, #1709	; 0x6ad
    de8a:	2030      	movs	r0, #48	; 0x30
    de8c:	f7f5 fef4 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    de90:	bd70      	pop	{r4, r5, r6, pc}
    de92:	b510      	push	{r4, lr}
    de94:	4604      	mov	r4, r0
    de96:	f814 0fa0 	ldrb.w	r0, [r4, #160]!
    de9a:	f7f4 f8e7 	bl	206c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    de9e:	2000      	movs	r0, #0
    dea0:	7520      	strb	r0, [r4, #20]
    dea2:	bd10      	pop	{r4, pc}
    dea4:	b510      	push	{r4, lr}
    dea6:	f7ff fd28 	bl	d8fa <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    deaa:	f500 7084 	add.w	r0, r0, #264	; 0x108
    deae:	bd10      	pop	{r4, pc}
    deb0:	b570      	push	{r4, r5, r6, lr}
    deb2:	4604      	mov	r4, r0
    deb4:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
    deb8:	460d      	mov	r5, r1
    deba:	b108      	cbz	r0, dec0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19e>
    debc:	2001      	movs	r0, #1
    debe:	bd70      	pop	{r4, r5, r6, pc}
    dec0:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    dec4:	b1a8      	cbz	r0, def2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1d0>
    dec6:	4620      	mov	r0, r4
    dec8:	f7ff fd13 	bl	d8f2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    decc:	4405      	add	r5, r0
    dece:	4620      	mov	r0, r4
    ded0:	f7ff ffe8 	bl	dea4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x182>
    ded4:	1941      	adds	r1, r0, r5
    ded6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    deda:	4288      	cmp	r0, r1
    dedc:	d206      	bcs.n	deec <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1ca>
    dede:	2001      	movs	r0, #1
    dee0:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    dee4:	4620      	mov	r0, r4
    dee6:	f7ff fd52 	bl	d98e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    deea:	e7e7      	b.n	debc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x19a>
    deec:	1b40      	subs	r0, r0, r5
    deee:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    def2:	2000      	movs	r0, #0
    def4:	bd70      	pop	{r4, r5, r6, pc}
    def6:	b510      	push	{r4, lr}
    def8:	4604      	mov	r4, r0
    defa:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    defe:	f000 f9a3 	bl	e248 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x526>
    df02:	4602      	mov	r2, r0
    df04:	4620      	mov	r0, r4
    df06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df0a:	f240 1117 	movw	r1, #279	; 0x117
    df0e:	f7ff bbd5 	b.w	d6bc <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    df12:	b510      	push	{r4, lr}
    df14:	f7fc fe84 	bl	ac20 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    df18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df1c:	f7f4 b9fc 	b.w	2318 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    df20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    df24:	4604      	mov	r4, r0
    df26:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    df2a:	2800      	cmp	r0, #0
    df2c:	d051      	beq.n	dfd2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b0>
    df2e:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    df32:	2803      	cmp	r0, #3
    df34:	d14d      	bne.n	dfd2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2b0>
    df36:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    df3a:	f001 fa7e 	bl	f43a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    df3e:	4605      	mov	r5, r0
    df40:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    df44:	f7f9 fa0e 	bl	7364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    df48:	4428      	add	r0, r5
    df4a:	b286      	uxth	r6, r0
    df4c:	f894 0175 	ldrb.w	r0, [r4, #373]	; 0x175
    df50:	f7f9 fa08 	bl	7364 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x94>
    df54:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    df58:	fa1f f880 	uxth.w	r8, r0
    df5c:	4648      	mov	r0, r9
    df5e:	f001 fb05 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    df62:	f8d4 1170 	ldr.w	r1, [r4, #368]	; 0x170
    df66:	1a0d      	subs	r5, r1, r0
    df68:	4648      	mov	r0, r9
    df6a:	f001 fb0d 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    df6e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    df72:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    df76:	fbb0 f0fa 	udiv	r0, r0, sl
    df7a:	1a2d      	subs	r5, r5, r0
    df7c:	4648      	mov	r0, r9
    df7e:	f001 faf5 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    df82:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    df86:	1a0f      	subs	r7, r1, r0
    df88:	4648      	mov	r0, r9
    df8a:	f001 fafd 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    df8e:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    df92:	4401      	add	r1, r0
    df94:	fbb1 f0fa 	udiv	r0, r1, sl
    df98:	1a39      	subs	r1, r7, r0
    df9a:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    df9e:	4370      	muls	r0, r6
    dfa0:	fbb0 f2f8 	udiv	r2, r0, r8
    dfa4:	2029      	movs	r0, #41	; 0x29
    dfa6:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    dfaa:	3260      	adds	r2, #96	; 0x60
    dfac:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    dfb0:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    dfb4:	42a9      	cmp	r1, r5
    dfb6:	d801      	bhi.n	dfbc <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x29a>
    dfb8:	4285      	cmp	r5, r0
    dfba:	d901      	bls.n	dfc0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x29e>
    dfbc:	f7f5 fad6 	bl	356c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    dfc0:	4631      	mov	r1, r6
    dfc2:	68e0      	ldr	r0, [r4, #12]
    dfc4:	f7fd fb6d 	bl	b6a2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    dfc8:	2100      	movs	r1, #0
    dfca:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
    dfce:	f884 114a 	strb.w	r1, [r4, #330]	; 0x14a
    dfd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dfd6:	b570      	push	{r4, r5, r6, lr}
    dfd8:	460c      	mov	r4, r1
    dfda:	4605      	mov	r5, r0
    dfdc:	f001 fad4 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    dfe0:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    dfe4:	4408      	add	r0, r1
    dfe6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    dfea:	fbb0 f6f1 	udiv	r6, r0, r1
    dfee:	4628      	mov	r0, r5
    dff0:	f001 fabc 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    dff4:	4430      	add	r0, r6
    dff6:	4420      	add	r0, r4
    dff8:	bd70      	pop	{r4, r5, r6, pc}
    dffa:	f7f3 bbdb 	b.w	17b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    dffe:	b510      	push	{r4, lr}
    e000:	4604      	mov	r4, r0
    e002:	f7ff fca3 	bl	d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    e006:	b1a0      	cbz	r0, e032 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x310>
    e008:	4620      	mov	r0, r4
    e00a:	f7ff fc97 	bl	d93c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e00e:	b918      	cbnz	r0, e018 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f6>
    e010:	4620      	mov	r0, r4
    e012:	f7ff fc9d 	bl	d950 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e016:	b120      	cbz	r0, e022 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x300>
    e018:	2449      	movs	r4, #73	; 0x49
    e01a:	f001 fa73 	bl	f504 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e01e:	b928      	cbnz	r0, e02c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30a>
    e020:	e001      	b.n	e026 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x304>
    e022:	2442      	movs	r4, #66	; 0x42
    e024:	e7f9      	b.n	e01a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2f8>
    e026:	f001 fa63 	bl	f4f0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e02a:	b100      	cbz	r0, e02e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x30c>
    e02c:	1de4      	adds	r4, r4, #7
    e02e:	4620      	mov	r0, r4
    e030:	bd10      	pop	{r4, pc}
    e032:	206b      	movs	r0, #107	; 0x6b
    e034:	bd10      	pop	{r4, pc}
    e036:	b570      	push	{r4, r5, r6, lr}
    e038:	4604      	mov	r4, r0
    e03a:	f890 00a1 	ldrb.w	r0, [r0, #161]	; 0xa1
    e03e:	2500      	movs	r5, #0
    e040:	b118      	cbz	r0, e04a <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x328>
    e042:	2001      	movs	r0, #1
    e044:	f000 f887 	bl	e156 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x434>
    e048:	4605      	mov	r5, r0
    e04a:	4620      	mov	r0, r4
    e04c:	f7ff fc51 	bl	d8f2 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    e050:	1941      	adds	r1, r0, r5
    e052:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
    e056:	34b8      	adds	r4, #184	; 0xb8
    e058:	f7f3 fa46 	bl	14e8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    e05c:	2600      	movs	r6, #0
    e05e:	60e0      	str	r0, [r4, #12]
    e060:	f804 6b0b 	strb.w	r6, [r4], #11
    e064:	2001      	movs	r0, #1
    e066:	f804 0901 	strb.w	r0, [r4], #-1
    e06a:	2003      	movs	r0, #3
    e06c:	f804 09c2 	strb.w	r0, [r4], #-194
    e070:	4620      	mov	r0, r4
    e072:	f7ff ffc4 	bl	dffe <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2dc>
    e076:	f8a4 00c0 	strh.w	r0, [r4, #192]	; 0xc0
    e07a:	4629      	mov	r1, r5
    e07c:	4620      	mov	r0, r4
    e07e:	f7ff ff17 	bl	deb0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x18e>
    e082:	b930      	cbnz	r0, e092 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x370>
    e084:	f894 00a0 	ldrb.w	r0, [r4, #160]	; 0xa0
    e088:	f104 01b8 	add.w	r1, r4, #184	; 0xb8
    e08c:	f7ff ffb5 	bl	dffa <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x2d8>
    e090:	b128      	cbz	r0, e09e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x37c>
    e092:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
    e096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e09a:	f7ff bf3a 	b.w	df12 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    e09e:	f240 61f6 	movw	r1, #1782	; 0x6f6
    e0a2:	2030      	movs	r0, #48	; 0x30
    e0a4:	f7f5 fde8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0a8:	b510      	push	{r4, lr}
    e0aa:	4604      	mov	r4, r0
    e0ac:	2000      	movs	r0, #0
    e0ae:	f884 0134 	strb.w	r0, [r4, #308]	; 0x134
    e0b2:	f894 0168 	ldrb.w	r0, [r4, #360]	; 0x168
    e0b6:	f7f3 ffd9 	bl	206c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e0ba:	2020      	movs	r0, #32
    e0bc:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
    e0c0:	bd10      	pop	{r4, pc}
    e0c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0c6:	2500      	movs	r5, #0
    e0c8:	f880 50a8 	strb.w	r5, [r0, #168]	; 0xa8
    e0cc:	f8d0 60c4 	ldr.w	r6, [r0, #196]	; 0xc4
    e0d0:	4688      	mov	r8, r1
    e0d2:	4604      	mov	r4, r0
    e0d4:	f880 50b4 	strb.w	r5, [r0, #180]	; 0xb4
    e0d8:	2701      	movs	r7, #1
    e0da:	f880 70b5 	strb.w	r7, [r0, #181]	; 0xb5
    e0de:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
    e0e2:	4639      	mov	r1, r7
    e0e4:	34a0      	adds	r4, #160	; 0xa0
    e0e6:	f7f7 fd0d 	bl	5b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e0ea:	6860      	ldr	r0, [r4, #4]
    e0ec:	f8c0 615c 	str.w	r6, [r0, #348]	; 0x15c
    e0f0:	6861      	ldr	r1, [r4, #4]
    e0f2:	7820      	ldrb	r0, [r4, #0]
    e0f4:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
    e0f8:	6861      	ldr	r1, [r4, #4]
    e0fa:	f8c1 816c 	str.w	r8, [r1, #364]	; 0x16c
    e0fe:	6860      	ldr	r0, [r4, #4]
    e100:	f8c0 6160 	str.w	r6, [r0, #352]	; 0x160
    e104:	6864      	ldr	r4, [r4, #4]
    e106:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
    e10a:	2300      	movs	r3, #0
    e10c:	f8a4 5164 	strh.w	r5, [r4, #356]	; 0x164
    e110:	461a      	mov	r2, r3
    e112:	4619      	mov	r1, r3
    e114:	4620      	mov	r0, r4
    e116:	9500      	str	r5, [sp, #0]
    e118:	f7f9 fa02 	bl	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    e11c:	b120      	cbz	r0, e128 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x406>
    e11e:	f240 2123 	movw	r1, #547	; 0x223
    e122:	2030      	movs	r0, #48	; 0x30
    e124:	f7f5 fda8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e128:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
    e12c:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
    e130:	f884 7134 	strb.w	r7, [r4, #308]	; 0x134
    e134:	f8a4 5146 	strh.w	r5, [r4, #326]	; 0x146
    e138:	f8a4 5144 	strh.w	r5, [r4, #324]	; 0x144
    e13c:	f504 7498 	add.w	r4, r4, #304	; 0x130
    e140:	7665      	strb	r5, [r4, #25]
    e142:	f834 0cbc 	ldrh.w	r0, [r4, #-188]
    e146:	1e40      	subs	r0, r0, #1
    e148:	f824 0cbc 	strh.w	r0, [r4, #-188]
    e14c:	86e5      	strh	r5, [r4, #54]	; 0x36
    e14e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e152:	f7ff bede 	b.w	df12 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x1f0>
    e156:	b508      	push	{r3, lr}
    e158:	2800      	cmp	r0, #0
    e15a:	f04f 0101 	mov.w	r1, #1
    e15e:	4668      	mov	r0, sp
    e160:	d002      	beq.n	e168 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x446>
    e162:	f7f5 fe15 	bl	3d90 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e166:	e001      	b.n	e16c <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x44a>
    e168:	f7f5 fe20 	bl	3dac <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    e16c:	f89d 0000 	ldrb.w	r0, [sp]
    e170:	f242 7110 	movw	r1, #10000	; 0x2710
    e174:	0200      	lsls	r0, r0, #8
    e176:	fbb0 f2f1 	udiv	r2, r0, r1
    e17a:	fb01 0012 	mls	r0, r1, r2, r0
    e17e:	bd08      	pop	{r3, pc}
    e180:	b510      	push	{r4, lr}
    e182:	0004      	movs	r4, r0
    e184:	d008      	beq.n	e198 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x476>
    e186:	2909      	cmp	r1, #9
    e188:	d25c      	bcs.n	e244 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x522>
    e18a:	e8df f001 	tbb	[pc, r1]
    e18e:	3607      	.short	0x3607
    e190:	5b3a3e3e 	.word	0x5b3a3e3e
    e194:	00574a43 	.word	0x00574a43
    e198:	219c      	movs	r1, #156	; 0x9c
    e19a:	e050      	b.n	e23e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    e19c:	2100      	movs	r1, #0
    e19e:	f8c4 1170 	str.w	r1, [r4, #368]	; 0x170
    e1a2:	f894 1148 	ldrb.w	r1, [r4, #328]	; 0x148
    e1a6:	4620      	mov	r0, r4
    e1a8:	b189      	cbz	r1, e1ce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4ac>
    e1aa:	f8b0 2146 	ldrh.w	r2, [r0, #326]	; 0x146
    e1ae:	f8b0 1074 	ldrh.w	r1, [r0, #116]	; 0x74
    e1b2:	428a      	cmp	r2, r1
    e1b4:	d106      	bne.n	e1c4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4a2>
    e1b6:	f8b0 20fc 	ldrh.w	r2, [r0, #252]	; 0xfc
    e1ba:	1a51      	subs	r1, r2, r1
    e1bc:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e1c0:	4611      	mov	r1, r2
    e1c2:	e00d      	b.n	e1e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4be>
    e1c4:	1a51      	subs	r1, r2, r1
    e1c6:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e1ca:	b291      	uxth	r1, r2
    e1cc:	e008      	b.n	e1e0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x4be>
    e1ce:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e1d2:	f8b0 2074 	ldrh.w	r2, [r0, #116]	; 0x74
    e1d6:	1a89      	subs	r1, r1, r2
    e1d8:	f8a0 10fe 	strh.w	r1, [r0, #254]	; 0xfe
    e1dc:	f8b0 1144 	ldrh.w	r1, [r0, #324]	; 0x144
    e1e0:	f8a0 1074 	strh.w	r1, [r0, #116]	; 0x74
    e1e4:	f8d0 1158 	ldr.w	r1, [r0, #344]	; 0x158
    e1e8:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
    e1ec:	f7f9 fe0e 	bl	7e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    e1f0:	4620      	mov	r0, r4
    e1f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1f6:	f7f9 bbf7 	b.w	79e8 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x718>
    e1fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1fe:	f000 b905 	b.w	e40c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    e202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e206:	f7fc bebb 	b.w	af80 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    e20a:	4620      	mov	r0, r4
    e20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e210:	f000 b827 	b.w	e262 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x540>
    e214:	2001      	movs	r0, #1
    e216:	f7f3 f885 	bl	1324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    e21a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e21e:	f7fe bd45 	b.w	ccac <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    e222:	f894 0134 	ldrb.w	r0, [r4, #308]	; 0x134
    e226:	2804      	cmp	r0, #4
    e228:	d001      	beq.n	e22e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x50c>
    e22a:	21be      	movs	r1, #190	; 0xbe
    e22c:	e007      	b.n	e23e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    e22e:	4620      	mov	r0, r4
    e230:	f7ff ff3a 	bl	e0a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    e234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e238:	f7fb bce8 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e23c:	21c7      	movs	r1, #199	; 0xc7
    e23e:	2030      	movs	r0, #48	; 0x30
    e240:	f7f5 fd1a 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e244:	21cb      	movs	r1, #203	; 0xcb
    e246:	e7fa      	b.n	e23e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x51c>
    e248:	b510      	push	{r4, lr}
    e24a:	f001 f99d 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e24e:	f64d 7141 	movw	r1, #57153	; 0xdf41
    e252:	4408      	add	r0, r1
    e254:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e258:	fbb0 f0f1 	udiv	r0, r0, r1
    e25c:	f200 1075 	addw	r0, r0, #373	; 0x175
    e260:	bd10      	pop	{r4, pc}
    e262:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    e264:	4604      	mov	r4, r0
    e266:	f7fd f9e8 	bl	b63a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    e26a:	4601      	mov	r1, r0
    e26c:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    e270:	f7f3 f96c 	bl	154c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    e274:	68e1      	ldr	r1, [r4, #12]
    e276:	b111      	cbz	r1, e27e <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x55c>
    e278:	fbb0 f0f1 	udiv	r0, r0, r1
    e27c:	e000      	b.n	e280 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x55e>
    e27e:	2000      	movs	r0, #0
    e280:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
    e284:	290d      	cmp	r1, #13
    e286:	d00c      	beq.n	e2a2 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x580>
    e288:	f8b4 2074 	ldrh.w	r2, [r4, #116]	; 0x74
    e28c:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e290:	1813      	adds	r3, r2, r0
    e292:	1acb      	subs	r3, r1, r3
    e294:	b21b      	sxth	r3, r3
    e296:	2b00      	cmp	r3, #0
    e298:	db06      	blt.n	e2a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x586>
    e29a:	1c49      	adds	r1, r1, #1
    e29c:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e2a0:	e006      	b.n	e2b0 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x58e>
    e2a2:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e2a6:	e012      	b.n	e2ce <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5ac>
    e2a8:	1c40      	adds	r0, r0, #1
    e2aa:	4410      	add	r0, r2
    e2ac:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e2b0:	f894 0149 	ldrb.w	r0, [r4, #329]	; 0x149
    e2b4:	f88d 0000 	strb.w	r0, [sp]
    e2b8:	9800      	ldr	r0, [sp, #0]
    e2ba:	9000      	str	r0, [sp, #0]
    e2bc:	f89d 0000 	ldrb.w	r0, [sp]
    e2c0:	b940      	cbnz	r0, e2d4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5b2>
    e2c2:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e2c6:	f8b4 10fc 	ldrh.w	r1, [r4, #252]	; 0xfc
    e2ca:	4288      	cmp	r0, r1
    e2cc:	d102      	bne.n	e2d4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5b2>
    e2ce:	1c40      	adds	r0, r0, #1
    e2d0:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e2d4:	f8b4 0166 	ldrh.w	r0, [r4, #358]	; 0x166
    e2d8:	1c40      	adds	r0, r0, #1
    e2da:	f8a4 0166 	strh.w	r0, [r4, #358]	; 0x166
    e2de:	f8b4 00a6 	ldrh.w	r0, [r4, #166]	; 0xa6
    e2e2:	f8b4 10a4 	ldrh.w	r1, [r4, #164]	; 0xa4
    e2e6:	1a40      	subs	r0, r0, r1
    e2e8:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    e2ec:	1e40      	subs	r0, r0, #1
    e2ee:	4408      	add	r0, r1
    e2f0:	b285      	uxth	r5, r0
    e2f2:	e026      	b.n	e342 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x620>
    e2f4:	a801      	add	r0, sp, #4
    e2f6:	2300      	movs	r3, #0
    e2f8:	9000      	str	r0, [sp, #0]
    e2fa:	461a      	mov	r2, r3
    e2fc:	4620      	mov	r0, r4
    e2fe:	f7f9 f90f 	bl	7520 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x250>
    e302:	2800      	cmp	r0, #0
    e304:	d038      	beq.n	e378 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x656>
    e306:	2801      	cmp	r0, #1
    e308:	d004      	beq.n	e314 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5f2>
    e30a:	f240 6159 	movw	r1, #1625	; 0x659
    e30e:	2030      	movs	r0, #48	; 0x30
    e310:	f7f5 fcb2 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e314:	f8b4 0146 	ldrh.w	r0, [r4, #326]	; 0x146
    e318:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
    e31c:	1a42      	subs	r2, r0, r1
    e31e:	b212      	sxth	r2, r2
    e320:	2a00      	cmp	r2, #0
    e322:	da09      	bge.n	e338 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x616>
    e324:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    e328:	4402      	add	r2, r0
    e32a:	1aaa      	subs	r2, r5, r2
    e32c:	b212      	sxth	r2, r2
    e32e:	2a00      	cmp	r2, #0
    e330:	da02      	bge.n	e338 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x616>
    e332:	f8a4 1146 	strh.w	r1, [r4, #326]	; 0x146
    e336:	e004      	b.n	e342 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x620>
    e338:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    e33c:	4408      	add	r0, r1
    e33e:	f8a4 0146 	strh.w	r0, [r4, #326]	; 0x146
    e342:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    e346:	1a68      	subs	r0, r5, r1
    e348:	b200      	sxth	r0, r0
    e34a:	2800      	cmp	r0, #0
    e34c:	dad2      	bge.n	e2f4 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x5d2>
    e34e:	f894 0081 	ldrb.w	r0, [r4, #129]	; 0x81
    e352:	b178      	cbz	r0, e374 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x652>
    e354:	2008      	movs	r0, #8
    e356:	f884 0095 	strb.w	r0, [r4, #149]	; 0x95
    e35a:	2001      	movs	r0, #1
    e35c:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
    e360:	4620      	mov	r0, r4
    e362:	f000 f855 	bl	e410 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    e366:	4620      	mov	r0, r4
    e368:	f7ff fe9e 	bl	e0a8 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x386>
    e36c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    e370:	f7fb bc4c 	b.w	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e374:	203e      	movs	r0, #62	; 0x3e
    e376:	e7ee      	b.n	e356 <sym_YK6IWY5GKQZZ2ZDYABW3XAEZQGAECOAED3HHDPY+0x634>
    e378:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    e37a:	01f4      	.short	0x01f4
    e37c:	009600fa 	.word	0x009600fa
    e380:	004b0064 	.word	0x004b0064
    e384:	001e0032 	.word	0x001e0032
    e388:	000a0014 	.word	0x000a0014
    e38c:	00020005 	.word	0x00020005
    e390:	0001      	.short	0x0001
    e392:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e396:	f001 0307 	and.w	r3, r1, #7
    e39a:	7802      	ldrb	r2, [r0, #0]
    e39c:	2101      	movs	r1, #1
    e39e:	4099      	lsls	r1, r3
    e3a0:	438a      	bics	r2, r1
    e3a2:	7002      	strb	r2, [r0, #0]
    e3a4:	4770      	bx	lr

0000e3a6 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    e3a6:	b510      	push	{r4, lr}
    e3a8:	4604      	mov	r4, r0
    e3aa:	f8d0 019c 	ldr.w	r0, [r0, #412]	; 0x19c
    e3ae:	68e1      	ldr	r1, [r4, #12]
    e3b0:	4288      	cmp	r0, r1
    e3b2:	d109      	bne.n	e3c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e3b4:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    e3b8:	8aa2      	ldrh	r2, [r4, #20]
    e3ba:	4291      	cmp	r1, r2
    e3bc:	d104      	bne.n	e3c8 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    e3be:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
    e3c2:	8ae2      	ldrh	r2, [r4, #22]
    e3c4:	4291      	cmp	r1, r2
    e3c6:	d013      	beq.n	e3f0 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4a>
    e3c8:	8821      	ldrh	r1, [r4, #0]
    e3ca:	f8a4 11bc 	strh.w	r1, [r4, #444]	; 0x1bc
    e3ce:	f7fe fcf4 	bl	cdba <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    e3d2:	f8a4 01be 	strh.w	r0, [r4, #446]	; 0x1be
    e3d6:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
    e3da:	f8a4 01c0 	strh.w	r0, [r4, #448]	; 0x1c0
    e3de:	f8b4 01a2 	ldrh.w	r0, [r4, #418]	; 0x1a2
    e3e2:	f8a4 01c2 	strh.w	r0, [r4, #450]	; 0x1c2
    e3e6:	2001      	movs	r0, #1
    e3e8:	f884 01b8 	strb.w	r0, [r4, #440]	; 0x1b8
    e3ec:	f7fb fc0e 	bl	9c0c <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    e3f0:	2102      	movs	r1, #2
    e3f2:	4620      	mov	r0, r4
    e3f4:	f7f7 fb86 	bl	5b04 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    e3f8:	2000      	movs	r0, #0
    e3fa:	f804 0f7e 	strb.w	r0, [r4, #126]!
    e3fe:	2003      	movs	r0, #3
    e400:	70e0      	strb	r0, [r4, #3]
    e402:	bd10      	pop	{r4, pc}

0000e404 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    e404:	f7f5 bfec 	b.w	43e0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000e408 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    e408:	2000      	movs	r0, #0
    e40a:	4770      	bx	lr

0000e40c <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    e40c:	f7f6 bd1a 	b.w	4e44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>

0000e410 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    e410:	2100      	movs	r1, #0
    e412:	f880 107d 	strb.w	r1, [r0, #125]	; 0x7d
    e416:	f880 107e 	strb.w	r1, [r0, #126]	; 0x7e
    e41a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    e41e:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    e422:	b109      	cbz	r1, e428 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    e424:	2102      	movs	r1, #2
    e426:	e000      	b.n	e42a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    e428:	2103      	movs	r1, #3
    e42a:	f7f8 bf51 	b.w	72d0 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e42e:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    e432:	28fe      	cmp	r0, #254	; 0xfe
    e434:	d001      	beq.n	e43a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    e436:	2001      	movs	r0, #1
    e438:	4770      	bx	lr
    e43a:	2000      	movs	r0, #0
    e43c:	4770      	bx	lr
    e43e:	b510      	push	{r4, lr}
    e440:	2801      	cmp	r0, #1
    e442:	d006      	beq.n	e452 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e444:	2802      	cmp	r0, #2
    e446:	d004      	beq.n	e452 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    e448:	f240 2163 	movw	r1, #611	; 0x263
    e44c:	2006      	movs	r0, #6
    e44e:	f7f5 fc13 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e452:	bd10      	pop	{r4, pc}
    e454:	2801      	cmp	r0, #1
    e456:	d002      	beq.n	e45e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    e458:	2802      	cmp	r0, #2
    e45a:	d105      	bne.n	e468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e45c:	e002      	b.n	e464 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    e45e:	2901      	cmp	r1, #1
    e460:	d004      	beq.n	e46c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e462:	e001      	b.n	e468 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    e464:	2902      	cmp	r1, #2
    e466:	d001      	beq.n	e46c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    e468:	2000      	movs	r0, #0
    e46a:	4770      	bx	lr
    e46c:	2001      	movs	r0, #1
    e46e:	4770      	bx	lr
    e470:	1a40      	subs	r0, r0, r1
    e472:	b200      	sxth	r0, r0
    e474:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e478:	4288      	cmp	r0, r1
    e47a:	dc01      	bgt.n	e480 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    e47c:	2800      	cmp	r0, #0
    e47e:	dc01      	bgt.n	e484 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    e480:	2001      	movs	r0, #1
    e482:	4770      	bx	lr
    e484:	2000      	movs	r0, #0
    e486:	4770      	bx	lr
    e488:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e48c:	f001 0107 	and.w	r1, r1, #7
    e490:	7800      	ldrb	r0, [r0, #0]
    e492:	2201      	movs	r2, #1
    e494:	408a      	lsls	r2, r1
    e496:	4010      	ands	r0, r2
    e498:	40c8      	lsrs	r0, r1
    e49a:	4770      	bx	lr
    e49c:	b118      	cbz	r0, e4a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e49e:	2802      	cmp	r0, #2
    e4a0:	d001      	beq.n	e4a6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x96>
    e4a2:	2001      	movs	r0, #1
    e4a4:	4770      	bx	lr
    e4a6:	2000      	movs	r0, #0
    e4a8:	4770      	bx	lr

0000e4aa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    e4aa:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e4ac:	7881      	ldrb	r1, [r0, #2]
    e4ae:	4604      	mov	r4, r0
    e4b0:	291a      	cmp	r1, #26
    e4b2:	d025      	beq.n	e500 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    e4b4:	dc0e      	bgt.n	e4d4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    e4b6:	2916      	cmp	r1, #22
    e4b8:	d22d      	bcs.n	e516 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e4ba:	e8df f001 	tbb	[pc, r1]
    e4be:	2c2c      	.short	0x2c2c
    e4c0:	212c2c2c 	.word	0x212c2c2c
    e4c4:	2c2c2c2c 	.word	0x2c2c2c2c
    e4c8:	2c2c2c2c 	.word	0x2c2c2c2c
    e4cc:	2c2c2c2c 	.word	0x2c2c2c2c
    e4d0:	2121212c 	.word	0x2121212c
    e4d4:	292a      	cmp	r1, #42	; 0x2a
    e4d6:	d01e      	beq.n	e516 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e4d8:	dc0b      	bgt.n	e4f2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    e4da:	f1a1 011e 	sub.w	r1, r1, #30
    e4de:	290c      	cmp	r1, #12
    e4e0:	d219      	bcs.n	e516 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e4e2:	e8df f001 	tbb	[pc, r1]
    e4e6:	1818      	.short	0x1818
    e4e8:	18181818 	.word	0x18181818
    e4ec:	18181818 	.word	0x18181818
    e4f0:	0d18      	.short	0x0d18
    e4f2:	393a      	subs	r1, #58	; 0x3a
    e4f4:	2904      	cmp	r1, #4
    e4f6:	d20e      	bcs.n	e516 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e4f8:	e8df f001 	tbb	[pc, r1]
    e4fc:	020d020d 	.word	0x020d020d
    e500:	8820      	ldrh	r0, [r4, #0]
    e502:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    e506:	d206      	bcs.n	e516 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    e508:	2701      	movs	r7, #1
    e50a:	4669      	mov	r1, sp
    e50c:	f7fe fc44 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e510:	b118      	cbz	r0, e51a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    e512:	2002      	movs	r0, #2
    e514:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e516:	2012      	movs	r0, #18
    e518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e51a:	9d01      	ldr	r5, [sp, #4]
    e51c:	4668      	mov	r0, sp
    e51e:	462e      	mov	r6, r5
    e520:	f505 75bc 	add.w	r5, r5, #376	; 0x178
    e524:	f206 1679 	addw	r6, r6, #377	; 0x179
    e528:	f000 fe94 	bl	f254 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31a>
    e52c:	b138      	cbz	r0, e53e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    e52e:	7828      	ldrb	r0, [r5, #0]
    e530:	f88d 0008 	strb.w	r0, [sp, #8]
    e534:	9802      	ldr	r0, [sp, #8]
    e536:	9002      	str	r0, [sp, #8]
    e538:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e53c:	b108      	cbz	r0, e542 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    e53e:	200c      	movs	r0, #12
    e540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e542:	702f      	strb	r7, [r5, #0]
    e544:	78a0      	ldrb	r0, [r4, #2]
    e546:	7030      	strb	r0, [r6, #0]
    e548:	4668      	mov	r0, sp
    e54a:	f7fe ff9f 	bl	d48c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    e54e:	2000      	movs	r0, #0
    e550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e552 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    e552:	b510      	push	{r4, lr}
    e554:	4604      	mov	r4, r0
    e556:	7800      	ldrb	r0, [r0, #0]
    e558:	b118      	cbz	r0, e562 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e55a:	2801      	cmp	r0, #1
    e55c:	d001      	beq.n	e562 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    e55e:	2012      	movs	r0, #18
    e560:	bd10      	pop	{r4, pc}
    e562:	f000 fe2b 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    e566:	b120      	cbz	r0, e572 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e568:	f7f7 f8be 	bl	56e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e56c:	b108      	cbz	r0, e572 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    e56e:	200c      	movs	r0, #12
    e570:	bd10      	pop	{r4, pc}
    e572:	7820      	ldrb	r0, [r4, #0]
    e574:	f7ff ff92 	bl	e49c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e578:	1de2      	adds	r2, r4, #7
    e57a:	f104 0317 	add.w	r3, r4, #23
    e57e:	1c61      	adds	r1, r4, #1
    e580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e584:	f7f7 b8e2 	b.w	574c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000e588 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    e588:	b510      	push	{r4, lr}
    e58a:	4604      	mov	r4, r0
    e58c:	f000 fef2 	bl	f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    e590:	b108      	cbz	r0, e596 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    e592:	200c      	movs	r0, #12
    e594:	bd10      	pop	{r4, pc}
    e596:	7820      	ldrb	r0, [r4, #0]
    e598:	b118      	cbz	r0, e5a2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e59a:	2801      	cmp	r0, #1
    e59c:	d001      	beq.n	e5a2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    e59e:	2012      	movs	r0, #18
    e5a0:	bd10      	pop	{r4, pc}
    e5a2:	f7ff ff7b 	bl	e49c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e5a6:	1c61      	adds	r1, r4, #1
    e5a8:	f7f7 f948 	bl	583c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    e5ac:	b108      	cbz	r0, e5b2 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    e5ae:	2000      	movs	r0, #0
    e5b0:	bd10      	pop	{r4, pc}
    e5b2:	2007      	movs	r0, #7
    e5b4:	bd10      	pop	{r4, pc}

0000e5b6 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    e5b6:	b510      	push	{r4, lr}
    e5b8:	f000 fe00 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    e5bc:	b120      	cbz	r0, e5c8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e5be:	f7f7 f893 	bl	56e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e5c2:	b108      	cbz	r0, e5c8 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    e5c4:	200c      	movs	r0, #12
    e5c6:	bd10      	pop	{r4, pc}
    e5c8:	f7f7 f906 	bl	57d8 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    e5cc:	2000      	movs	r0, #0
    e5ce:	bd10      	pop	{r4, pc}

0000e5d0 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    e5d0:	b510      	push	{r4, lr}
    e5d2:	f000 fecf 	bl	f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    e5d6:	b108      	cbz	r0, e5dc <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    e5d8:	200c      	movs	r0, #12
    e5da:	bd10      	pop	{r4, pc}
    e5dc:	f7f7 f956 	bl	588c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    e5e0:	2000      	movs	r0, #0
    e5e2:	bd10      	pop	{r4, pc}

0000e5e4 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    e5e4:	b510      	push	{r4, lr}
    e5e6:	460b      	mov	r3, r1
    e5e8:	2201      	movs	r2, #1
    e5ea:	f100 0110 	add.w	r1, r0, #16
    e5ee:	f7fe fbb5 	bl	cd5c <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    e5f2:	2000      	movs	r0, #0
    e5f4:	bd10      	pop	{r4, pc}

0000e5f6 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    e5f6:	b510      	push	{r4, lr}
    e5f8:	8800      	ldrh	r0, [r0, #0]
    e5fa:	2100      	movs	r1, #0
    e5fc:	f7fe f989 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e600:	b118      	cbz	r0, e60a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    e602:	f890 117b 	ldrb.w	r1, [r0, #379]	; 0x17b
    e606:	b111      	cbz	r1, e60e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    e608:	e007      	b.n	e61a <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    e60a:	2002      	movs	r0, #2
    e60c:	bd10      	pop	{r4, pc}
    e60e:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    e612:	2914      	cmp	r1, #20
    e614:	d003      	beq.n	e61e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e616:	2915      	cmp	r1, #21
    e618:	d001      	beq.n	e61e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    e61a:	200c      	movs	r0, #12
    e61c:	bd10      	pop	{r4, pc}
    e61e:	2102      	movs	r1, #2
    e620:	f880 117b 	strb.w	r1, [r0, #379]	; 0x17b
    e624:	2000      	movs	r0, #0
    e626:	bd10      	pop	{r4, pc}

0000e628 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    e628:	b538      	push	{r3, r4, r5, lr}
    e62a:	4605      	mov	r5, r0
    e62c:	8800      	ldrh	r0, [r0, #0]
    e62e:	2100      	movs	r1, #0
    e630:	f7fe f96f 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e634:	0004      	movs	r4, r0
    e636:	d003      	beq.n	e640 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    e638:	f894 017b 	ldrb.w	r0, [r4, #379]	; 0x17b
    e63c:	b110      	cbz	r0, e644 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    e63e:	e010      	b.n	e662 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e640:	2002      	movs	r0, #2
    e642:	bd38      	pop	{r3, r4, r5, pc}
    e644:	f894 007e 	ldrb.w	r0, [r4, #126]	; 0x7e
    e648:	2814      	cmp	r0, #20
    e64a:	d001      	beq.n	e650 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    e64c:	2815      	cmp	r0, #21
    e64e:	d108      	bne.n	e662 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3a>
    e650:	f894 01cc 	ldrb.w	r0, [r4, #460]	; 0x1cc
    e654:	f88d 0000 	strb.w	r0, [sp]
    e658:	9800      	ldr	r0, [sp, #0]
    e65a:	9000      	str	r0, [sp, #0]
    e65c:	f89d 0000 	ldrb.w	r0, [sp]
    e660:	b108      	cbz	r0, e666 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3e>
    e662:	200c      	movs	r0, #12
    e664:	bd38      	pop	{r3, r4, r5, pc}
    e666:	2210      	movs	r2, #16
    e668:	1ca9      	adds	r1, r5, #2
    e66a:	f504 70be 	add.w	r0, r4, #380	; 0x17c
    e66e:	f7fd f959 	bl	b924 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e672:	2001      	movs	r0, #1
    e674:	f884 017b 	strb.w	r0, [r4, #379]	; 0x17b
    e678:	2000      	movs	r0, #0
    e67a:	bd38      	pop	{r3, r4, r5, pc}

0000e67c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    e67c:	b510      	push	{r4, lr}
    e67e:	2108      	movs	r1, #8
    e680:	f7f5 fba2 	bl	3dc8 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e684:	2000      	movs	r0, #0
    e686:	bd10      	pop	{r4, pc}

0000e688 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    e688:	b510      	push	{r4, lr}
    e68a:	4604      	mov	r4, r0
    e68c:	f000 fdf9 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    e690:	f7ff f962 	bl	d958 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    e694:	7020      	strb	r0, [r4, #0]
    e696:	2000      	movs	r0, #0
    e698:	bd10      	pop	{r4, pc}

0000e69a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    e69a:	b510      	push	{r4, lr}
    e69c:	4604      	mov	r4, r0
    e69e:	f000 fdd3 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    e6a2:	b140      	cbz	r0, e6b6 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    e6a4:	20fb      	movs	r0, #251	; 0xfb
    e6a6:	8020      	strh	r0, [r4, #0]
    e6a8:	f640 0148 	movw	r1, #2120	; 0x848
    e6ac:	8061      	strh	r1, [r4, #2]
    e6ae:	80a0      	strh	r0, [r4, #4]
    e6b0:	80e1      	strh	r1, [r4, #6]
    e6b2:	2000      	movs	r0, #0
    e6b4:	bd10      	pop	{r4, pc}
    e6b6:	2001      	movs	r0, #1
    e6b8:	bd10      	pop	{r4, pc}

0000e6ba <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    e6ba:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e6bc:	460d      	mov	r5, r1
    e6be:	4606      	mov	r6, r0
    e6c0:	f7fb fe4e 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e6c4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e6c8:	b300      	cbz	r0, e70c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    e6ca:	8830      	ldrh	r0, [r6, #0]
    e6cc:	4669      	mov	r1, sp
    e6ce:	f7fe fb63 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e6d2:	2800      	cmp	r0, #0
    e6d4:	d119      	bne.n	e70a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    e6d6:	9c01      	ldr	r4, [sp, #4]
    e6d8:	2700      	movs	r7, #0
    e6da:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    e6de:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    e6e2:	f000 fc46 	bl	ef72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    e6e6:	70a8      	strb	r0, [r5, #2]
    e6e8:	7860      	ldrb	r0, [r4, #1]
    e6ea:	f000 fc42 	bl	ef72 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x38>
    e6ee:	70e8      	strb	r0, [r5, #3]
    e6f0:	78a0      	ldrb	r0, [r4, #2]
    e6f2:	f88d 0008 	strb.w	r0, [sp, #8]
    e6f6:	9802      	ldr	r0, [sp, #8]
    e6f8:	9002      	str	r0, [sp, #8]
    e6fa:	f89d 0008 	ldrb.w	r0, [sp, #8]
    e6fe:	3c6a      	subs	r4, #106	; 0x6a
    e700:	2800      	cmp	r0, #0
    e702:	d1ea      	bne.n	e6da <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    e704:	8830      	ldrh	r0, [r6, #0]
    e706:	8028      	strh	r0, [r5, #0]
    e708:	2000      	movs	r0, #0
    e70a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e70c:	2001      	movs	r0, #1
    e70e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000e710 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    e710:	2108      	movs	r1, #8
    e712:	7001      	strb	r1, [r0, #0]
    e714:	2000      	movs	r0, #0
    e716:	4770      	bx	lr

0000e718 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    e718:	b510      	push	{r4, lr}
    e71a:	4604      	mov	r4, r0
    e71c:	20d8      	movs	r0, #216	; 0xd8
    e71e:	7020      	strb	r0, [r4, #0]
    e720:	f000 fd73 	bl	f20a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d0>
    e724:	7060      	strb	r0, [r4, #1]
    e726:	2000      	movs	r0, #0
    e728:	bd10      	pop	{r4, pc}

0000e72a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    e72a:	2108      	movs	r1, #8
    e72c:	7001      	strb	r1, [r0, #0]
    e72e:	2000      	movs	r0, #0
    e730:	4770      	bx	lr

0000e732 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    e732:	b510      	push	{r4, lr}
    e734:	4604      	mov	r4, r0
    e736:	7800      	ldrb	r0, [r0, #0]
    e738:	b108      	cbz	r0, e73e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    e73a:	2801      	cmp	r0, #1
    e73c:	d110      	bne.n	e760 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e73e:	f000 fd3d 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    e742:	b120      	cbz	r0, e74e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e744:	f7f6 ffd0 	bl	56e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    e748:	b108      	cbz	r0, e74e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    e74a:	200c      	movs	r0, #12
    e74c:	bd10      	pop	{r4, pc}
    e74e:	7820      	ldrb	r0, [r4, #0]
    e750:	f7ff fea4 	bl	e49c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e754:	1c61      	adds	r1, r4, #1
    e756:	f7fe fae7 	bl	cd28 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    e75a:	b108      	cbz	r0, e760 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    e75c:	2000      	movs	r0, #0
    e75e:	bd10      	pop	{r4, pc}
    e760:	2012      	movs	r0, #18
    e762:	bd10      	pop	{r4, pc}

0000e764 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    e764:	b510      	push	{r4, lr}
    e766:	4604      	mov	r4, r0
    e768:	f000 fe04 	bl	f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x43a>
    e76c:	b108      	cbz	r0, e772 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    e76e:	200c      	movs	r0, #12
    e770:	bd10      	pop	{r4, pc}
    e772:	7820      	ldrb	r0, [r4, #0]
    e774:	b108      	cbz	r0, e77a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    e776:	2801      	cmp	r0, #1
    e778:	d107      	bne.n	e78a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e77a:	f7ff fe8f 	bl	e49c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    e77e:	1c61      	adds	r1, r4, #1
    e780:	f7fe fae1 	bl	cd46 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    e784:	b108      	cbz	r0, e78a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    e786:	2000      	movs	r0, #0
    e788:	bd10      	pop	{r4, pc}
    e78a:	2012      	movs	r0, #18
    e78c:	bd10      	pop	{r4, pc}

0000e78e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    e78e:	b510      	push	{r4, lr}
    e790:	4604      	mov	r4, r0
    e792:	f000 fd13 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    e796:	b108      	cbz	r0, e79c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    e798:	200c      	movs	r0, #12
    e79a:	bd10      	pop	{r4, pc}
    e79c:	7820      	ldrb	r0, [r4, #0]
    e79e:	f000 0001 	and.w	r0, r0, #1
    e7a2:	f7f6 ff9b 	bl	56dc <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    e7a6:	2000      	movs	r0, #0
    e7a8:	bd10      	pop	{r4, pc}

0000e7aa <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    e7aa:	b51c      	push	{r2, r3, r4, lr}
    e7ac:	4604      	mov	r4, r0
    e7ae:	f000 fd68 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    e7b2:	2000      	movs	r0, #0
    e7b4:	f88d 0002 	strb.w	r0, [sp, #2]
    e7b8:	2103      	movs	r1, #3
    e7ba:	f88d 1001 	strb.w	r1, [sp, #1]
    e7be:	f814 1b01 	ldrb.w	r1, [r4], #1
    e7c2:	f88d 1003 	strb.w	r1, [sp, #3]
    e7c6:	f88d 0000 	strb.w	r0, [sp]
    e7ca:	4668      	mov	r0, sp
    e7cc:	9401      	str	r4, [sp, #4]
    e7ce:	f000 f9f8 	bl	ebc2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    e7d2:	bd1c      	pop	{r2, r3, r4, pc}

0000e7d4 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    e7d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    e7d6:	4605      	mov	r5, r0
    e7d8:	f000 fd53 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    e7dc:	4606      	mov	r6, r0
    e7de:	7828      	ldrb	r0, [r5, #0]
    e7e0:	2400      	movs	r4, #0
    e7e2:	b160      	cbz	r0, e7fe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e7e4:	f88d 4000 	strb.w	r4, [sp]
    e7e8:	2001      	movs	r0, #1
    e7ea:	f10d 0101 	add.w	r1, sp, #1
    e7ee:	f7f6 f943 	bl	4a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    e7f2:	b120      	cbz	r0, e7fe <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    e7f4:	4668      	mov	r0, sp
    e7f6:	f000 f897 	bl	e928 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    e7fa:	2800      	cmp	r0, #0
    e7fc:	d112      	bne.n	e824 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e7fe:	f88d 400c 	strb.w	r4, [sp, #12]
    e802:	4630      	mov	r0, r6
    e804:	f7ff f89e 	bl	d944 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    e808:	b118      	cbz	r0, e812 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    e80a:	2080      	movs	r0, #128	; 0x80
    e80c:	f8ad 000d 	strh.w	r0, [sp, #13]
    e810:	e001      	b.n	e816 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    e812:	f8ad 400d 	strh.w	r4, [sp, #13]
    e816:	f88d 400f 	strb.w	r4, [sp, #15]
    e81a:	7828      	ldrb	r0, [r5, #0]
    e81c:	2801      	cmp	r0, #1
    e81e:	d003      	beq.n	e828 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    e820:	b138      	cbz	r0, e832 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    e822:	2012      	movs	r0, #18
    e824:	b004      	add	sp, #16
    e826:	bd70      	pop	{r4, r5, r6, pc}
    e828:	a903      	add	r1, sp, #12
    e82a:	4630      	mov	r0, r6
    e82c:	f7fb fb7a 	bl	9f24 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    e830:	e7f8      	b.n	e824 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    e832:	4630      	mov	r0, r6
    e834:	f000 fd3c 	bl	f2b0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x376>
    e838:	e7f4      	b.n	e824 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000e83a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    e83a:	b530      	push	{r4, r5, lr}
    e83c:	b08b      	sub	sp, #44	; 0x2c
    e83e:	4604      	mov	r4, r0
    e840:	f000 fd1f 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    e844:	4602      	mov	r2, r0
    e846:	7920      	ldrb	r0, [r4, #4]
    e848:	2804      	cmp	r0, #4
    e84a:	d803      	bhi.n	e854 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    e84c:	8860      	ldrh	r0, [r4, #2]
    e84e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    e852:	d902      	bls.n	e85a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    e854:	2012      	movs	r0, #18
    e856:	b00b      	add	sp, #44	; 0x2c
    e858:	bd30      	pop	{r4, r5, pc}
    e85a:	2500      	movs	r5, #0
    e85c:	f88d 5004 	strb.w	r5, [sp, #4]
    e860:	7921      	ldrb	r1, [r4, #4]
    e862:	9500      	str	r5, [sp, #0]
    e864:	f89d 0000 	ldrb.w	r0, [sp]
    e868:	2905      	cmp	r1, #5
    e86a:	f040 0010 	orr.w	r0, r0, #16
    e86e:	f88d 0000 	strb.w	r0, [sp]
    e872:	d254      	bcs.n	e91e <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    e874:	e8df f001 	tbb	[pc, r1]
    e878:	11050803 	.word	0x11050803
    e87c:	000b      	.short	0x000b
    e87e:	f040 0001 	orr.w	r0, r0, #1
    e882:	f040 0002 	orr.w	r0, r0, #2
    e886:	e006      	b.n	e896 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    e888:	f040 0009 	orr.w	r0, r0, #9
    e88c:	e001      	b.n	e892 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    e88e:	f040 0001 	orr.w	r0, r0, #1
    e892:	f040 0004 	orr.w	r0, r0, #4
    e896:	f88d 0000 	strb.w	r0, [sp]
    e89a:	f8bd 0000 	ldrh.w	r0, [sp]
    e89e:	9000      	str	r0, [sp, #0]
    e8a0:	f8bd 0000 	ldrh.w	r0, [sp]
    e8a4:	f8ad 0005 	strh.w	r0, [sp, #5]
    e8a8:	8821      	ldrh	r1, [r4, #0]
    e8aa:	f8dd 0006 	ldr.w	r0, [sp, #6]
    e8ae:	f361 201f 	bfi	r0, r1, #8, #24
    e8b2:	f8cd 0006 	str.w	r0, [sp, #6]
    e8b6:	8861      	ldrh	r1, [r4, #2]
    e8b8:	f8dd 0009 	ldr.w	r0, [sp, #9]
    e8bc:	f361 201f 	bfi	r0, r1, #8, #24
    e8c0:	f8cd 0009 	str.w	r0, [sp, #9]
    e8c4:	7b60      	ldrb	r0, [r4, #13]
    e8c6:	f88d 000d 	strb.w	r0, [sp, #13]
    e8ca:	7960      	ldrb	r0, [r4, #5]
    e8cc:	f88d 000e 	strb.w	r0, [sp, #14]
    e8d0:	79a0      	ldrb	r0, [r4, #6]
    e8d2:	f88d 000f 	strb.w	r0, [sp, #15]
    e8d6:	f8d4 0007 	ldr.w	r0, [r4, #7]
    e8da:	9004      	str	r0, [sp, #16]
    e8dc:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    e8e0:	f8ad 0014 	strh.w	r0, [sp, #20]
    e8e4:	7ba0      	ldrb	r0, [r4, #14]
    e8e6:	f88d 0016 	strb.w	r0, [sp, #22]
    e8ea:	207f      	movs	r0, #127	; 0x7f
    e8ec:	f88d 0017 	strb.w	r0, [sp, #23]
    e8f0:	2001      	movs	r0, #1
    e8f2:	f88d 0018 	strb.w	r0, [sp, #24]
    e8f6:	f88d 5019 	strb.w	r5, [sp, #25]
    e8fa:	f88d 001a 	strb.w	r0, [sp, #26]
    e8fe:	f88d 501b 	strb.w	r5, [sp, #27]
    e902:	4610      	mov	r0, r2
    e904:	f7ff f83a 	bl	d97c <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    e908:	f88d 001c 	strb.w	r0, [sp, #28]
    e90c:	f88d 501d 	strb.w	r5, [sp, #29]
    e910:	f88d 501e 	strb.w	r5, [sp, #30]
    e914:	a909      	add	r1, sp, #36	; 0x24
    e916:	a801      	add	r0, sp, #4
    e918:	f000 f8de 	bl	ead8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    e91c:	e79b      	b.n	e856 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    e91e:	f241 0193 	movw	r1, #4243	; 0x1093
    e922:	2039      	movs	r0, #57	; 0x39
    e924:	f7f5 f9a8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e928 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    e928:	b570      	push	{r4, r5, r6, lr}
    e92a:	4604      	mov	r4, r0
    e92c:	7800      	ldrb	r0, [r0, #0]
    e92e:	2101      	movs	r1, #1
    e930:	f7fd ffef 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e934:	0005      	movs	r5, r0
    e936:	d007      	beq.n	e948 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    e938:	f7ff f9d9 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    e93c:	b160      	cbz	r0, e958 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e93e:	4628      	mov	r0, r5
    e940:	f7ff f806 	bl	d950 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    e944:	b110      	cbz	r0, e94c <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    e946:	e005      	b.n	e954 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    e948:	2042      	movs	r0, #66	; 0x42
    e94a:	bd70      	pop	{r4, r5, r6, pc}
    e94c:	4628      	mov	r0, r5
    e94e:	f7fe fff5 	bl	d93c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    e952:	b108      	cbz	r0, e958 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    e954:	200c      	movs	r0, #12
    e956:	bd70      	pop	{r4, r5, r6, pc}
    e958:	1c61      	adds	r1, r4, #1
    e95a:	4628      	mov	r0, r5
    e95c:	f7ff f806 	bl	d96c <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    e960:	2000      	movs	r0, #0
    e962:	bd70      	pop	{r4, r5, r6, pc}

0000e964 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    e964:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e966:	460d      	mov	r5, r1
    e968:	4604      	mov	r4, r0
    e96a:	f000 fc6d 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    e96e:	b130      	cbz	r0, e97e <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    e970:	88a2      	ldrh	r2, [r4, #4]
    e972:	f244 2090 	movw	r0, #17040	; 0x4290
    e976:	4282      	cmp	r2, r0
    e978:	d903      	bls.n	e982 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    e97a:	2012      	movs	r0, #18
    e97c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e97e:	2001      	movs	r0, #1
    e980:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e982:	f640 0048 	movw	r0, #2120	; 0x848
    e986:	4282      	cmp	r2, r0
    e988:	d300      	bcc.n	e98c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    e98a:	4602      	mov	r2, r0
    e98c:	8820      	ldrh	r0, [r4, #0]
    e98e:	f8ad 0000 	strh.w	r0, [sp]
    e992:	8860      	ldrh	r0, [r4, #2]
    e994:	f8ad 0002 	strh.w	r0, [sp, #2]
    e998:	f8ad 2004 	strh.w	r2, [sp, #4]
    e99c:	8860      	ldrh	r0, [r4, #2]
    e99e:	f8ad 0006 	strh.w	r0, [sp, #6]
    e9a2:	f8ad 2008 	strh.w	r2, [sp, #8]
    e9a6:	8820      	ldrh	r0, [r4, #0]
    e9a8:	8028      	strh	r0, [r5, #0]
    e9aa:	4668      	mov	r0, sp
    e9ac:	f7fb fb88 	bl	a0c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    e9b0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e9b2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    e9b2:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    e9b4:	4604      	mov	r4, r0
    e9b6:	f7fb fcd3 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    e9ba:	f3c0 2000 	ubfx	r0, r0, #8, #1
    e9be:	b1b0      	cbz	r0, e9ee <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    e9c0:	f10d 0007 	add.w	r0, sp, #7
    e9c4:	9000      	str	r0, [sp, #0]
    e9c6:	7922      	ldrb	r2, [r4, #4]
    e9c8:	78e1      	ldrb	r1, [r4, #3]
    e9ca:	78a0      	ldrb	r0, [r4, #2]
    e9cc:	f10d 0306 	add.w	r3, sp, #6
    e9d0:	f000 fc94 	bl	f2fc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3c2>
    e9d4:	2800      	cmp	r0, #0
    e9d6:	d109      	bne.n	e9ec <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    e9d8:	8820      	ldrh	r0, [r4, #0]
    e9da:	f8ad 0004 	strh.w	r0, [sp, #4]
    e9de:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    e9e2:	f8ad 0008 	strh.w	r0, [sp, #8]
    e9e6:	a801      	add	r0, sp, #4
    e9e8:	f000 f9a6 	bl	ed38 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    e9ec:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e9ee:	2001      	movs	r0, #1
    e9f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000e9f2 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    e9f2:	b510      	push	{r4, lr}
    e9f4:	4604      	mov	r4, r0
    e9f6:	f000 fbe1 	bl	f1bc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x282>
    e9fa:	b120      	cbz	r0, ea06 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    e9fc:	f7f6 fe74 	bl	56e8 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ea00:	b108      	cbz	r0, ea06 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    ea02:	200c      	movs	r0, #12
    ea04:	bd10      	pop	{r4, pc}
    ea06:	7820      	ldrb	r0, [r4, #0]
    ea08:	f7ff fd48 	bl	e49c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x8c>
    ea0c:	79e2      	ldrb	r2, [r4, #7]
    ea0e:	1c61      	adds	r1, r4, #1
    ea10:	f7f6 fe18 	bl	5644 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    ea14:	b108      	cbz	r0, ea1a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    ea16:	2000      	movs	r0, #0
    ea18:	bd10      	pop	{r4, pc}
    ea1a:	2002      	movs	r0, #2
    ea1c:	bd10      	pop	{r4, pc}

0000ea1e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ea1e:	b510      	push	{r4, lr}
    ea20:	4604      	mov	r4, r0
    ea22:	2001      	movs	r0, #1
    ea24:	f000 fac8 	bl	efb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    ea28:	b128      	cbz	r0, ea36 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ea2a:	4621      	mov	r1, r4
    ea2c:	2001      	movs	r0, #1
    ea2e:	f7f6 f83b 	bl	4aa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ea32:	2000      	movs	r0, #0
    ea34:	bd10      	pop	{r4, pc}
    ea36:	200c      	movs	r0, #12
    ea38:	bd10      	pop	{r4, pc}

0000ea3a <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    ea3a:	b510      	push	{r4, lr}
    ea3c:	8800      	ldrh	r0, [r0, #0]
    ea3e:	f7f6 fee1 	bl	5804 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    ea42:	b108      	cbz	r0, ea48 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    ea44:	2000      	movs	r0, #0
    ea46:	bd10      	pop	{r4, pc}
    ea48:	2030      	movs	r0, #48	; 0x30
    ea4a:	bd10      	pop	{r4, pc}

0000ea4c <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ea4c:	b51c      	push	{r2, r3, r4, lr}
    ea4e:	4604      	mov	r4, r0
    ea50:	f000 fc17 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    ea54:	2000      	movs	r0, #0
    ea56:	f88d 0000 	strb.w	r0, [sp]
    ea5a:	f88d 0002 	strb.w	r0, [sp, #2]
    ea5e:	2003      	movs	r0, #3
    ea60:	f88d 0001 	strb.w	r0, [sp, #1]
    ea64:	f814 0b01 	ldrb.w	r0, [r4], #1
    ea68:	f88d 0003 	strb.w	r0, [sp, #3]
    ea6c:	4668      	mov	r0, sp
    ea6e:	9401      	str	r4, [sp, #4]
    ea70:	f000 f910 	bl	ec94 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ea74:	bd1c      	pop	{r2, r3, r4, pc}

0000ea76 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ea76:	b51c      	push	{r2, r3, r4, lr}
    ea78:	4604      	mov	r4, r0
    ea7a:	f000 fbe5 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ea7e:	b178      	cbz	r0, eaa0 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    ea80:	8820      	ldrh	r0, [r4, #0]
    ea82:	f8ad 0000 	strh.w	r0, [sp]
    ea86:	8860      	ldrh	r0, [r4, #2]
    ea88:	f8ad 0002 	strh.w	r0, [sp, #2]
    ea8c:	8820      	ldrh	r0, [r4, #0]
    ea8e:	f8ad 0004 	strh.w	r0, [sp, #4]
    ea92:	8860      	ldrh	r0, [r4, #2]
    ea94:	f8ad 0006 	strh.w	r0, [sp, #6]
    ea98:	4668      	mov	r0, sp
    ea9a:	f7fb fb95 	bl	a1c8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x2a4>
    ea9e:	bd1c      	pop	{r2, r3, r4, pc}
    eaa0:	2001      	movs	r0, #1
    eaa2:	bd1c      	pop	{r2, r3, r4, pc}

0000eaa4 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    eaa4:	b510      	push	{r4, lr}
    eaa6:	f7f6 f823 	bl	4af0 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    eaaa:	2000      	movs	r0, #0
    eaac:	bd10      	pop	{r4, pc}

0000eaae <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    eaae:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eab0:	460c      	mov	r4, r1
    eab2:	4605      	mov	r5, r0
    eab4:	f000 fbc8 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    eab8:	b160      	cbz	r0, ead4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    eaba:	4669      	mov	r1, sp
    eabc:	4628      	mov	r0, r5
    eabe:	f7fe f96b 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eac2:	2800      	cmp	r0, #0
    eac4:	d105      	bne.n	ead2 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    eac6:	2100      	movs	r1, #0
    eac8:	4622      	mov	r2, r4
    eaca:	9801      	ldr	r0, [sp, #4]
    eacc:	f000 fb40 	bl	f150 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x216>
    ead0:	2000      	movs	r0, #0
    ead2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ead4:	2001      	movs	r0, #1
    ead6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ead8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    ead8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    eadc:	460f      	mov	r7, r1
    eade:	4605      	mov	r5, r0
    eae0:	7806      	ldrb	r6, [r0, #0]
    eae2:	f000 fac5 	bl	f070 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x136>
    eae6:	2800      	cmp	r0, #0
    eae8:	d10a      	bne.n	eb00 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    eaea:	4628      	mov	r0, r5
    eaec:	f000 fa9a 	bl	f024 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xea>
    eaf0:	2800      	cmp	r0, #0
    eaf2:	d105      	bne.n	eb00 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    eaf4:	2001      	movs	r0, #1
    eaf6:	f7f5 fab7 	bl	4068 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    eafa:	4286      	cmp	r6, r0
    eafc:	d302      	bcc.n	eb04 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x2c>
    eafe:	2007      	movs	r0, #7
    eb00:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    eb04:	2101      	movs	r1, #1
    eb06:	4630      	mov	r0, r6
    eb08:	f7fd ff03 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb0c:	0004      	movs	r4, r0
    eb0e:	d004      	beq.n	eb1a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x42>
    eb10:	f7ff f8ed 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    eb14:	b150      	cbz	r0, eb2c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x54>
    eb16:	200c      	movs	r0, #12
    eb18:	e7f2      	b.n	eb00 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>
    eb1a:	2200      	movs	r2, #0
    eb1c:	2101      	movs	r1, #1
    eb1e:	4630      	mov	r0, r6
    eb20:	f7fd feed 	bl	c8fe <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    eb24:	0004      	movs	r4, r0
    eb26:	d00f      	beq.n	eb48 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x70>
    eb28:	f7fe fead 	bl	d886 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    eb2c:	4620      	mov	r0, r4
    eb2e:	f7fe ff13 	bl	d958 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    eb32:	7038      	strb	r0, [r7, #0]
    eb34:	74e8      	strb	r0, [r5, #19]
    eb36:	4629      	mov	r1, r5
    eb38:	4620      	mov	r0, r4
    eb3a:	f7f7 fc59 	bl	63f0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    eb3e:	4606      	mov	r6, r0
    eb40:	7e68      	ldrb	r0, [r5, #25]
    eb42:	b1d0      	cbz	r0, eb7a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    eb44:	b12e      	cbz	r6, eb52 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x7a>
    eb46:	e018      	b.n	eb7a <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa2>
    eb48:	f44f 5191 	mov.w	r1, #4640	; 0x1220
    eb4c:	2039      	movs	r0, #57	; 0x39
    eb4e:	f7f5 f893 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb52:	2200      	movs	r2, #0
    eb54:	4668      	mov	r0, sp
    eb56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    eb58:	f7fd ff9c 	bl	ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb5c:	2200      	movs	r2, #0
    eb5e:	2101      	movs	r1, #1
    eb60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eb62:	f7fe f80c 	bl	cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb66:	2204      	movs	r2, #4
    eb68:	4668      	mov	r0, sp
    eb6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    eb6c:	f7fd ff92 	bl	ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    eb70:	2200      	movs	r2, #0
    eb72:	4611      	mov	r1, r2
    eb74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    eb76:	f7fe f802 	bl	cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    eb7a:	4630      	mov	r0, r6
    eb7c:	e7c0      	b.n	eb00 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x28>

0000eb7e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    eb7e:	b510      	push	{r4, lr}
    eb80:	4604      	mov	r4, r0
    eb82:	2000      	movs	r0, #0
    eb84:	f000 fa18 	bl	efb8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x7e>
    eb88:	b128      	cbz	r0, eb96 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    eb8a:	4621      	mov	r1, r4
    eb8c:	2000      	movs	r0, #0
    eb8e:	f7f5 ff8b 	bl	4aa8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    eb92:	2000      	movs	r0, #0
    eb94:	bd10      	pop	{r4, pc}
    eb96:	200c      	movs	r0, #12
    eb98:	bd10      	pop	{r4, pc}

0000eb9a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    eb9a:	b510      	push	{r4, lr}
    eb9c:	7800      	ldrb	r0, [r0, #0]
    eb9e:	f000 0001 	and.w	r0, r0, #1
    eba2:	f7f8 fb5b 	bl	725c <sym_WMA2OWGJYGOIIQV6R2LKF37IWYQHWWBT5LUJG6A>
    eba6:	2000      	movs	r0, #0
    eba8:	bd10      	pop	{r4, pc}

0000ebaa <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    ebaa:	b510      	push	{r4, lr}
    ebac:	4604      	mov	r4, r0
    ebae:	f000 fb4b 	bl	f248 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x30e>
    ebb2:	b120      	cbz	r0, ebbe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    ebb4:	4620      	mov	r0, r4
    ebb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebba:	f7fb ba81 	b.w	a0c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x19c>
    ebbe:	2001      	movs	r0, #1
    ebc0:	bd10      	pop	{r4, pc}

0000ebc2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ebc2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ebc6:	4606      	mov	r6, r0
    ebc8:	7845      	ldrb	r5, [r0, #1]
    ebca:	7800      	ldrb	r0, [r0, #0]
    ebcc:	2101      	movs	r1, #1
    ebce:	f7fd fea0 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ebd2:	0004      	movs	r4, r0
    ebd4:	d01e      	beq.n	ec14 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    ebd6:	f7fe fe82 	bl	d8de <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ebda:	78f1      	ldrb	r1, [r6, #3]
    ebdc:	4281      	cmp	r1, r0
    ebde:	d800      	bhi.n	ebe2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    ebe0:	4608      	mov	r0, r1
    ebe2:	4607      	mov	r7, r0
    ebe4:	2d04      	cmp	r5, #4
    ebe6:	d018      	beq.n	ec1a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    ebe8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ebea:	f7fd ffeb 	bl	cbc4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ebee:	4438      	add	r0, r7
    ebf0:	b281      	uxth	r1, r0
    ebf2:	4620      	mov	r0, r4
    ebf4:	2201      	movs	r2, #1
    ebf6:	f000 f9f1 	bl	efdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    ebfa:	2800      	cmp	r0, #0
    ebfc:	d10b      	bne.n	ec16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ebfe:	2d03      	cmp	r5, #3
    ec00:	d000      	beq.n	ec04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ec02:	b1df      	cbz	r7, ec3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ec04:	4620      	mov	r0, r4
    ec06:	f7fe fea1 	bl	d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ec0a:	7871      	ldrb	r1, [r6, #1]
    ec0c:	2903      	cmp	r1, #3
    ec0e:	d010      	beq.n	ec32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ec10:	b9a0      	cbnz	r0, ec3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ec12:	e004      	b.n	ec1e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    ec14:	2042      	movs	r0, #66	; 0x42
    ec16:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ec1a:	b97f      	cbnz	r7, ec3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ec1c:	e7f2      	b.n	ec04 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ec1e:	2904      	cmp	r1, #4
    ec20:	d107      	bne.n	ec32 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ec22:	4620      	mov	r0, r4
    ec24:	f7ff f863 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ec28:	b140      	cbz	r0, ec3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ec2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec2c:	f7fd ff99 	bl	cb62 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    ec30:	b120      	cbz	r0, ec3c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ec32:	2d01      	cmp	r5, #1
    ec34:	d004      	beq.n	ec40 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    ec36:	2d03      	cmp	r5, #3
    ec38:	d002      	beq.n	ec40 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    ec3a:	e00e      	b.n	ec5a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    ec3c:	2012      	movs	r0, #18
    ec3e:	e7ea      	b.n	ec16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ec40:	4620      	mov	r0, r4
    ec42:	f7fe fe83 	bl	d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ec46:	b108      	cbz	r0, ec4c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    ec48:	2200      	movs	r2, #0
    ec4a:	e002      	b.n	ec52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ec4c:	2d01      	cmp	r5, #1
    ec4e:	d013      	beq.n	ec78 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    ec50:	2201      	movs	r2, #1
    ec52:	4668      	mov	r0, sp
    ec54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ec56:	f7fd ff1d 	bl	ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ec5a:	2d04      	cmp	r5, #4
    ec5c:	d018      	beq.n	ec90 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ec5e:	6872      	ldr	r2, [r6, #4]
    ec60:	463b      	mov	r3, r7
    ec62:	2101      	movs	r1, #1
    ec64:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec66:	f7fd ff48 	bl	cafa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ec6a:	b138      	cbz	r0, ec7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    ec6c:	7870      	ldrb	r0, [r6, #1]
    ec6e:	2802      	cmp	r0, #2
    ec70:	d006      	beq.n	ec80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ec72:	2803      	cmp	r0, #3
    ec74:	d004      	beq.n	ec80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ec76:	e00b      	b.n	ec90 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ec78:	2202      	movs	r2, #2
    ec7a:	e7ea      	b.n	ec52 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ec7c:	2007      	movs	r0, #7
    ec7e:	e7ca      	b.n	ec16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ec80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec82:	f7fd ff9f 	bl	cbc4 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ec86:	4602      	mov	r2, r0
    ec88:	2101      	movs	r1, #1
    ec8a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ec8c:	f7fd ff77 	bl	cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ec90:	2000      	movs	r0, #0
    ec92:	e7c0      	b.n	ec16 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ec94 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ec94:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ec98:	4607      	mov	r7, r0
    ec9a:	7845      	ldrb	r5, [r0, #1]
    ec9c:	78c6      	ldrb	r6, [r0, #3]
    ec9e:	7800      	ldrb	r0, [r0, #0]
    eca0:	2101      	movs	r1, #1
    eca2:	f7fd fe36 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eca6:	0004      	movs	r4, r0
    eca8:	d003      	beq.n	ecb2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ecaa:	f7fe fe51 	bl	d950 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ecae:	b118      	cbz	r0, ecb8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    ecb0:	e003      	b.n	ecba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    ecb2:	2042      	movs	r0, #66	; 0x42
    ecb4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ecb8:	2600      	movs	r6, #0
    ecba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ecbc:	f7fd ff86 	bl	cbcc <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
    ecc0:	4430      	add	r0, r6
    ecc2:	b281      	uxth	r1, r0
    ecc4:	4688      	mov	r8, r1
    ecc6:	4620      	mov	r0, r4
    ecc8:	2201      	movs	r2, #1
    ecca:	f000 f987 	bl	efdc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xa2>
    ecce:	2800      	cmp	r0, #0
    ecd0:	d1f0      	bne.n	ecb4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ecd2:	2d04      	cmp	r5, #4
    ecd4:	d008      	beq.n	ece8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ecd6:	2d03      	cmp	r5, #3
    ecd8:	d00a      	beq.n	ecf0 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
    ecda:	b12e      	cbz	r6, ece8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
    ecdc:	4620      	mov	r0, r4
    ecde:	f7ff f806 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    ece2:	b118      	cbz	r0, ecec <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
    ece4:	200c      	movs	r0, #12
    ece6:	e7e5      	b.n	ecb4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ece8:	2012      	movs	r0, #18
    ecea:	e7e3      	b.n	ecb4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ecec:	2d01      	cmp	r5, #1
    ecee:	d10c      	bne.n	ed0a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
    ecf0:	4620      	mov	r0, r4
    ecf2:	f7fe fe2b 	bl	d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ecf6:	b108      	cbz	r0, ecfc <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
    ecf8:	2204      	movs	r2, #4
    ecfa:	e002      	b.n	ed02 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ecfc:	2d01      	cmp	r5, #1
    ecfe:	d010      	beq.n	ed22 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
    ed00:	2205      	movs	r2, #5
    ed02:	4668      	mov	r0, sp
    ed04:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    ed06:	f7fd fec5 	bl	ca94 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ed0a:	687a      	ldr	r2, [r7, #4]
    ed0c:	4633      	mov	r3, r6
    ed0e:	2100      	movs	r1, #0
    ed10:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed12:	f7fd fef2 	bl	cafa <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ed16:	b130      	cbz	r0, ed26 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
    ed18:	2d02      	cmp	r5, #2
    ed1a:	d006      	beq.n	ed2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ed1c:	2d03      	cmp	r5, #3
    ed1e:	d004      	beq.n	ed2a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
    ed20:	e008      	b.n	ed34 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
    ed22:	2206      	movs	r2, #6
    ed24:	e7ed      	b.n	ed02 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
    ed26:	2007      	movs	r0, #7
    ed28:	e7c4      	b.n	ecb4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
    ed2a:	4642      	mov	r2, r8
    ed2c:	2100      	movs	r1, #0
    ed2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ed30:	f7fd ff25 	bl	cb7e <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ed34:	2000      	movs	r0, #0
    ed36:	e7bd      	b.n	ecb4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

0000ed38 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    ed38:	b510      	push	{r4, lr}
    ed3a:	4604      	mov	r4, r0
    ed3c:	8880      	ldrh	r0, [r0, #4]
    ed3e:	b128      	cbz	r0, ed4c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ed40:	2801      	cmp	r0, #1
    ed42:	d003      	beq.n	ed4c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ed44:	2802      	cmp	r0, #2
    ed46:	d001      	beq.n	ed4c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    ed48:	2012      	movs	r0, #18
    ed4a:	bd10      	pop	{r4, pc}
    ed4c:	78e0      	ldrb	r0, [r4, #3]
    ed4e:	f000 f9dc 	bl	f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ed52:	b148      	cbz	r0, ed68 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ed54:	78a0      	ldrb	r0, [r4, #2]
    ed56:	f000 f9d8 	bl	f10a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1d0>
    ed5a:	b128      	cbz	r0, ed68 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ed5c:	4620      	mov	r0, r4
    ed5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed62:	2101      	movs	r1, #1
    ed64:	f000 b884 	b.w	ee70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ed68:	2011      	movs	r0, #17
    ed6a:	bd10      	pop	{r4, pc}

0000ed6c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ed6c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed6e:	460c      	mov	r4, r1
    ed70:	4605      	mov	r5, r0
    ed72:	8800      	ldrh	r0, [r0, #0]
    ed74:	4669      	mov	r1, sp
    ed76:	f7fe f80f 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ed7a:	2800      	cmp	r0, #0
    ed7c:	d106      	bne.n	ed8c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ed7e:	9801      	ldr	r0, [sp, #4]
    ed80:	8829      	ldrh	r1, [r5, #0]
    ed82:	8021      	strh	r1, [r4, #0]
    ed84:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    ed88:	8060      	strh	r0, [r4, #2]
    ed8a:	2000      	movs	r0, #0
    ed8c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ed8e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ed8e:	b510      	push	{r4, lr}
    ed90:	4604      	mov	r4, r0
    ed92:	4601      	mov	r1, r0
    ed94:	2000      	movs	r0, #0
    ed96:	f7f5 fe6f 	bl	4a78 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ed9a:	b910      	cbnz	r0, eda2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ed9c:	2000      	movs	r0, #0
    ed9e:	6020      	str	r0, [r4, #0]
    eda0:	80a0      	strh	r0, [r4, #4]
    eda2:	2000      	movs	r0, #0
    eda4:	bd10      	pop	{r4, pc}

0000eda6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    eda6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eda8:	8800      	ldrh	r0, [r0, #0]
    edaa:	4669      	mov	r1, sp
    edac:	f7fd fff4 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    edb0:	b958      	cbnz	r0, edca <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    edb2:	4668      	mov	r0, sp
    edb4:	f000 fa4e 	bl	f254 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x31a>
    edb8:	b138      	cbz	r0, edca <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x24>
    edba:	9c01      	ldr	r4, [sp, #4]
    edbc:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
    edc0:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
    edc4:	3470      	adds	r4, #112	; 0x70
    edc6:	b929      	cbnz	r1, edd4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2e>
    edc8:	e001      	b.n	edce <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    edca:	2002      	movs	r0, #2
    edcc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
    edd2:	b109      	cbz	r1, edd8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    edd4:	203a      	movs	r0, #58	; 0x3a
    edd6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    edd8:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
    eddc:	f04f 0501 	mov.w	r5, #1
    ede0:	0789      	lsls	r1, r1, #30
    ede2:	d103      	bne.n	edec <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x46>
    ede4:	7005      	strb	r5, [r0, #0]
    ede6:	4668      	mov	r0, sp
    ede8:	f7fe fb50 	bl	d48c <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    edec:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
    edf0:	2000      	movs	r0, #0
    edf2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000edf4 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    edf4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    edf6:	460c      	mov	r4, r1
    edf8:	4605      	mov	r5, r0
    edfa:	8800      	ldrh	r0, [r0, #0]
    edfc:	4669      	mov	r1, sp
    edfe:	f7fd ffcb 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee02:	b108      	cbz	r0, ee08 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ee04:	2002      	movs	r0, #2
    ee06:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee08:	78a8      	ldrb	r0, [r5, #2]
    ee0a:	b130      	cbz	r0, ee1a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ee0c:	f000 f9fd 	bl	f20a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2d0>
    ee10:	70a0      	strb	r0, [r4, #2]
    ee12:	8828      	ldrh	r0, [r5, #0]
    ee14:	8020      	strh	r0, [r4, #0]
    ee16:	2000      	movs	r0, #0
    ee18:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ee1a:	9801      	ldr	r0, [sp, #4]
    ee1c:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    ee20:	e7f6      	b.n	ee10 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ee22 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ee22:	b510      	push	{r4, lr}
    ee24:	f7fb fa0a 	bl	a23c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ee28:	2000      	movs	r0, #0
    ee2a:	bd10      	pop	{r4, pc}

0000ee2c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ee2c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ee30:	4604      	mov	r4, r0
    ee32:	8840      	ldrh	r0, [r0, #2]
    ee34:	460d      	mov	r5, r1
    ee36:	b1b8      	cbz	r0, ee68 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    ee38:	8820      	ldrh	r0, [r4, #0]
    ee3a:	4669      	mov	r1, sp
    ee3c:	f7fd ffac 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee40:	2800      	cmp	r0, #0
    ee42:	d10f      	bne.n	ee64 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    ee44:	8820      	ldrh	r0, [r4, #0]
    ee46:	8028      	strh	r0, [r5, #0]
    ee48:	9e01      	ldr	r6, [sp, #4]
    ee4a:	f106 050c 	add.w	r5, r6, #12
    ee4e:	3670      	adds	r6, #112	; 0x70
    ee50:	682f      	ldr	r7, [r5, #0]
    ee52:	8862      	ldrh	r2, [r4, #2]
    ee54:	4639      	mov	r1, r7
    ee56:	4630      	mov	r0, r6
    ee58:	f7fe f8df 	bl	d01a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    ee5c:	6828      	ldr	r0, [r5, #0]
    ee5e:	42b8      	cmp	r0, r7
    ee60:	d1f6      	bne.n	ee50 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    ee62:	2000      	movs	r0, #0
    ee64:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ee68:	2012      	movs	r0, #18
    ee6a:	e7fb      	b.n	ee64 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000ee6c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    ee6c:	f7fa bfa4 	b.w	9db8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000ee70 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ee70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee74:	b086      	sub	sp, #24
    ee76:	468a      	mov	sl, r1
    ee78:	4606      	mov	r6, r0
    ee7a:	8800      	ldrh	r0, [r0, #0]
    ee7c:	a901      	add	r1, sp, #4
    ee7e:	f7fd ff8b 	bl	cd98 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ee82:	2800      	cmp	r0, #0
    ee84:	d138      	bne.n	eef8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ee86:	9802      	ldr	r0, [sp, #8]
    ee88:	f04f 0800 	mov.w	r8, #0
    ee8c:	4601      	mov	r1, r0
    ee8e:	4689      	mov	r9, r1
    ee90:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
    ee94:	f88d 1000 	strb.w	r1, [sp]
    ee98:	9900      	ldr	r1, [sp, #0]
    ee9a:	9100      	str	r1, [sp, #0]
    ee9c:	f89d 5000 	ldrb.w	r5, [sp]
    eea0:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
    eea4:	3070      	adds	r0, #112	; 0x70
    eea6:	2921      	cmp	r1, #33	; 0x21
    eea8:	d100      	bne.n	eeac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    eeaa:	b13d      	cbz	r5, eebc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    eeac:	2400      	movs	r4, #0
    eeae:	304c      	adds	r0, #76	; 0x4c
    eeb0:	2108      	movs	r1, #8
    eeb2:	4607      	mov	r7, r0
    eeb4:	f7ff fae8 	bl	e488 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    eeb8:	b110      	cbz	r0, eec0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    eeba:	e007      	b.n	eecc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    eebc:	2401      	movs	r4, #1
    eebe:	e7f6      	b.n	eeae <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    eec0:	210b      	movs	r1, #11
    eec2:	4638      	mov	r0, r7
    eec4:	f7ff fae0 	bl	e488 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x78>
    eec8:	b900      	cbnz	r0, eecc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    eeca:	b1a4      	cbz	r4, eef6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x86>
    eecc:	a804      	add	r0, sp, #16
    eece:	9000      	str	r0, [sp, #0]
    eed0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eed4:	ab03      	add	r3, sp, #12
    eed6:	4632      	mov	r2, r6
    eed8:	4649      	mov	r1, r9
    eeda:	f000 f976 	bl	f1ca <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x290>
    eede:	0007      	movs	r7, r0
    eee0:	d10a      	bne.n	eef8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    eee2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eee6:	9c02      	ldr	r4, [sp, #8]
    eee8:	b148      	cbz	r0, eefe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    eeea:	f504 74d7 	add.w	r4, r4, #430	; 0x1ae
    eeee:	2001      	movs	r0, #1
    eef0:	7060      	strb	r0, [r4, #1]
    eef2:	b94d      	cbnz	r5, ef08 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
    eef4:	e006      	b.n	ef04 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
    eef6:	201a      	movs	r0, #26
    eef8:	b006      	add	sp, #24
    eefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eefe:	f504 7497 	add.w	r4, r4, #302	; 0x12e
    ef02:	e7f4      	b.n	eeee <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x7e>
    ef04:	7820      	ldrb	r0, [r4, #0]
    ef06:	b108      	cbz	r0, ef0c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
    ef08:	273a      	movs	r7, #58	; 0x3a
    ef0a:	e012      	b.n	ef32 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
    ef0c:	f884 a000 	strb.w	sl, [r4]
    ef10:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ef14:	70a0      	strb	r0, [r4, #2]
    ef16:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ef1a:	70e1      	strb	r1, [r4, #3]
    ef1c:	f88d 0000 	strb.w	r0, [sp]
    ef20:	f88d 1001 	strb.w	r1, [sp, #1]
    ef24:	88b0      	ldrh	r0, [r6, #4]
    ef26:	f8ad 0002 	strh.w	r0, [sp, #2]
    ef2a:	4669      	mov	r1, sp
    ef2c:	4648      	mov	r0, r9
    ef2e:	f7fd fff2 	bl	cf16 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ef32:	f884 8001 	strb.w	r8, [r4, #1]
    ef36:	4638      	mov	r0, r7
    ef38:	e7de      	b.n	eef8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>

0000ef3a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    ef3a:	b510      	push	{r4, lr}
    ef3c:	2008      	movs	r0, #8
    ef3e:	f7fb fa05 	bl	a34c <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ef42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef46:	f7f8 bf49 	b.w	7ddc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
    ef4a:	f44f 71a4 	mov.w	r1, #328	; 0x148
    ef4e:	4288      	cmp	r0, r1
    ef50:	d303      	bcc.n	ef5a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20>
    ef52:	f640 0148 	movw	r1, #2120	; 0x848
    ef56:	4288      	cmp	r0, r1
    ef58:	d300      	bcc.n	ef5c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x22>
    ef5a:	4608      	mov	r0, r1
    ef5c:	4770      	bx	lr
    ef5e:	07c1      	lsls	r1, r0, #31
    ef60:	d001      	beq.n	ef66 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c>
    ef62:	2001      	movs	r0, #1
    ef64:	4770      	bx	lr
    ef66:	0780      	lsls	r0, r0, #30
    ef68:	d501      	bpl.n	ef6e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x34>
    ef6a:	2002      	movs	r0, #2
    ef6c:	4770      	bx	lr
    ef6e:	2000      	movs	r0, #0
    ef70:	4770      	bx	lr
    ef72:	b510      	push	{r4, lr}
    ef74:	2801      	cmp	r0, #1
    ef76:	d006      	beq.n	ef86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    ef78:	2802      	cmp	r0, #2
    ef7a:	d004      	beq.n	ef86 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4c>
    ef7c:	f240 2163 	movw	r1, #611	; 0x263
    ef80:	2006      	movs	r0, #6
    ef82:	f7f4 fe79 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef86:	bd10      	pop	{r4, pc}
    ef88:	b50e      	push	{r1, r2, r3, lr}
    ef8a:	4669      	mov	r1, sp
    ef8c:	2001      	movs	r0, #1
    ef8e:	f7fd fcca 	bl	c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    ef92:	b150      	cbz	r0, efaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    ef94:	f240 1141 	movw	r1, #321	; 0x141
    ef98:	2039      	movs	r0, #57	; 0x39
    ef9a:	f7f4 fe6d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef9e:	9802      	ldr	r0, [sp, #8]
    efa0:	f7fe fea5 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    efa4:	b108      	cbz	r0, efaa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x70>
    efa6:	2001      	movs	r0, #1
    efa8:	bd0e      	pop	{r1, r2, r3, pc}
    efaa:	4668      	mov	r0, sp
    efac:	f7f5 f8aa 	bl	4104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    efb0:	2800      	cmp	r0, #0
    efb2:	d0f4      	beq.n	ef9e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x64>
    efb4:	2000      	movs	r0, #0
    efb6:	bd0e      	pop	{r1, r2, r3, pc}
    efb8:	b510      	push	{r4, lr}
    efba:	f7ff ffe5 	bl	ef88 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    efbe:	b158      	cbz	r0, efd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    efc0:	f000 f95f 	bl	f282 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x348>
    efc4:	4604      	mov	r4, r0
    efc6:	f7fe fcc3 	bl	d950 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    efca:	b918      	cbnz	r0, efd4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9a>
    efcc:	4620      	mov	r0, r4
    efce:	f7fe fcb5 	bl	d93c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    efd2:	b108      	cbz	r0, efd8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x9e>
    efd4:	2000      	movs	r0, #0
    efd6:	bd10      	pop	{r4, pc}
    efd8:	2001      	movs	r0, #1
    efda:	bd10      	pop	{r4, pc}
    efdc:	b570      	push	{r4, r5, r6, lr}
    efde:	460c      	mov	r4, r1
    efe0:	4605      	mov	r5, r0
    efe2:	b112      	cbz	r2, efea <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xb0>
    efe4:	291f      	cmp	r1, #31
    efe6:	d80c      	bhi.n	f002 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xc8>
    efe8:	e016      	b.n	f018 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xde>
    efea:	f7f5 fb51 	bl	4690 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
    efee:	42a0      	cmp	r0, r4
    eff0:	d201      	bcs.n	eff6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xbc>
    eff2:	2007      	movs	r0, #7
    eff4:	bd70      	pop	{r4, r5, r6, pc}
    eff6:	4628      	mov	r0, r5
    eff8:	f7fe fca8 	bl	d94c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    effc:	b118      	cbz	r0, f006 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    effe:	2c1f      	cmp	r4, #31
    f000:	d901      	bls.n	f006 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xcc>
    f002:	2012      	movs	r0, #18
    f004:	bd70      	pop	{r4, r5, r6, pc}
    f006:	4628      	mov	r0, r5
    f008:	f7fe fca9 	bl	d95e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f00c:	b130      	cbz	r0, f01c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe2>
    f00e:	4621      	mov	r1, r4
    f010:	4628      	mov	r0, r5
    f012:	f7fe fc70 	bl	d8f6 <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
    f016:	b118      	cbz	r0, f020 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0xe6>
    f018:	2000      	movs	r0, #0
    f01a:	bd70      	pop	{r4, r5, r6, pc}
    f01c:	2042      	movs	r0, #66	; 0x42
    f01e:	bd70      	pop	{r4, r5, r6, pc}
    f020:	2045      	movs	r0, #69	; 0x45
    f022:	bd70      	pop	{r4, r5, r6, pc}
    f024:	b510      	push	{r4, lr}
    f026:	4604      	mov	r4, r0
    f028:	7840      	ldrb	r0, [r0, #1]
    f02a:	06c1      	lsls	r1, r0, #27
    f02c:	d51c      	bpl.n	f068 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f02e:	07c0      	lsls	r0, r0, #31
    f030:	d00b      	beq.n	f04a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f032:	f7fb f941 	bl	a2b8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
    f036:	b1b8      	cbz	r0, f068 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f038:	7860      	ldrb	r0, [r4, #1]
    f03a:	06c1      	lsls	r1, r0, #27
    f03c:	d405      	bmi.n	f04a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f03e:	0700      	lsls	r0, r0, #28
    f040:	d503      	bpl.n	f04a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x110>
    f042:	7d20      	ldrb	r0, [r4, #20]
    f044:	2802      	cmp	r0, #2
    f046:	d10f      	bne.n	f068 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f048:	e010      	b.n	f06c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f04a:	7d20      	ldrb	r0, [r4, #20]
    f04c:	2802      	cmp	r0, #2
    f04e:	d001      	beq.n	f054 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x11a>
    f050:	7ea0      	ldrb	r0, [r4, #26]
    f052:	b948      	cbnz	r0, f068 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x12e>
    f054:	7860      	ldrb	r0, [r4, #1]
    f056:	0700      	lsls	r0, r0, #28
    f058:	d408      	bmi.n	f06c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f05a:	f8d4 0005 	ldr.w	r0, [r4, #5]
    f05e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    f062:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
    f066:	d201      	bcs.n	f06c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x132>
    f068:	2011      	movs	r0, #17
    f06a:	bd10      	pop	{r4, pc}
    f06c:	2000      	movs	r0, #0
    f06e:	bd10      	pop	{r4, pc}
    f070:	b538      	push	{r3, r4, r5, lr}
    f072:	4604      	mov	r4, r0
    f074:	7800      	ldrb	r0, [r0, #0]
    f076:	28ef      	cmp	r0, #239	; 0xef
    f078:	d843      	bhi.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f07a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    f07e:	f8ad 0000 	strh.w	r0, [sp]
    f082:	9800      	ldr	r0, [sp, #0]
    f084:	f000 f951 	bl	f32a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3f0>
    f088:	b3a0      	cbz	r0, f0f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f08a:	7861      	ldrb	r1, [r4, #1]
    f08c:	0708      	lsls	r0, r1, #28
    f08e:	d40b      	bmi.n	f0a8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x16e>
    f090:	f8d4 0002 	ldr.w	r0, [r4, #2]
    f094:	f8d4 3005 	ldr.w	r3, [r4, #5]
    f098:	0a02      	lsrs	r2, r0, #8
    f09a:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
    f09e:	d830      	bhi.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0a0:	2220      	movs	r2, #32
    f0a2:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
    f0a6:	d82c      	bhi.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0a8:	7a60      	ldrb	r0, [r4, #9]
    f0aa:	b318      	cbz	r0, f0f4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ba>
    f0ac:	2807      	cmp	r0, #7
    f0ae:	d828      	bhi.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0b0:	7aa0      	ldrb	r0, [r4, #10]
    f0b2:	b128      	cbz	r0, f0c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f0b4:	2801      	cmp	r0, #1
    f0b6:	d003      	beq.n	f0c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f0b8:	2802      	cmp	r0, #2
    f0ba:	d001      	beq.n	f0c0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x186>
    f0bc:	2803      	cmp	r0, #3
    f0be:	d120      	bne.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0c0:	074a      	lsls	r2, r1, #29
    f0c2:	d403      	bmi.n	f0cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f0c4:	2802      	cmp	r0, #2
    f0c6:	d001      	beq.n	f0cc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x192>
    f0c8:	2803      	cmp	r0, #3
    f0ca:	d105      	bne.n	f0d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19e>
    f0cc:	7ae0      	ldrb	r0, [r4, #11]
    f0ce:	b108      	cbz	r0, f0d4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x19a>
    f0d0:	2801      	cmp	r0, #1
    f0d2:	d116      	bne.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0d4:	0748      	lsls	r0, r1, #29
    f0d6:	d407      	bmi.n	f0e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f0d8:	7ca0      	ldrb	r0, [r4, #18]
    f0da:	b128      	cbz	r0, f0e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f0dc:	2801      	cmp	r0, #1
    f0de:	d003      	beq.n	f0e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f0e0:	2802      	cmp	r0, #2
    f0e2:	d001      	beq.n	f0e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1ae>
    f0e4:	2803      	cmp	r0, #3
    f0e6:	d10c      	bne.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0e8:	06c8      	lsls	r0, r1, #27
    f0ea:	7d20      	ldrb	r0, [r4, #20]
    f0ec:	d503      	bpl.n	f0f6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1bc>
    f0ee:	2801      	cmp	r0, #1
    f0f0:	d107      	bne.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0f2:	e002      	b.n	f0fa <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c0>
    f0f4:	e005      	b.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0f6:	2802      	cmp	r0, #2
    f0f8:	d003      	beq.n	f102 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1c8>
    f0fa:	7e20      	ldrb	r0, [r4, #24]
    f0fc:	b118      	cbz	r0, f106 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f0fe:	2801      	cmp	r0, #1
    f100:	d001      	beq.n	f106 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1cc>
    f102:	2012      	movs	r0, #18
    f104:	bd38      	pop	{r3, r4, r5, pc}
    f106:	2000      	movs	r0, #0
    f108:	bd38      	pop	{r3, r4, r5, pc}
    f10a:	b510      	push	{r4, lr}
    f10c:	0004      	movs	r4, r0
    f10e:	d005      	beq.n	f11c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f110:	f7fb f92c 	bl	a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f114:	4384      	bics	r4, r0
    f116:	d001      	beq.n	f11c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1e2>
    f118:	2000      	movs	r0, #0
    f11a:	bd10      	pop	{r4, pc}
    f11c:	2001      	movs	r0, #1
    f11e:	bd10      	pop	{r4, pc}
    f120:	28fb      	cmp	r0, #251	; 0xfb
    f122:	d803      	bhi.n	f12c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f2>
    f124:	f640 0048 	movw	r0, #2120	; 0x848
    f128:	4281      	cmp	r1, r0
    f12a:	d901      	bls.n	f130 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x1f6>
    f12c:	2011      	movs	r0, #17
    f12e:	4770      	bx	lr
    f130:	2000      	movs	r0, #0
    f132:	4770      	bx	lr
    f134:	381b      	subs	r0, #27
    f136:	28e1      	cmp	r0, #225	; 0xe1
    f138:	d206      	bcs.n	f148 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f13a:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f13e:	d303      	bcc.n	f148 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x20e>
    f140:	f244 2090 	movw	r0, #17040	; 0x4290
    f144:	4281      	cmp	r1, r0
    f146:	d901      	bls.n	f14c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x212>
    f148:	2012      	movs	r0, #18
    f14a:	4770      	bx	lr
    f14c:	2000      	movs	r0, #0
    f14e:	4770      	bx	lr
    f150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f154:	4606      	mov	r6, r0
    f156:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f15a:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f15e:	4615      	mov	r5, r2
    f160:	302c      	adds	r0, #44	; 0x2c
    f162:	f7f8 f881 	bl	7268 <sym_2XQD73Z3W4NFFHWTLZCIS7IQ3ACFNR3KKEBKCJQ>
    f166:	4680      	mov	r8, r0
    f168:	2102      	movs	r1, #2
    f16a:	f7fd fea5 	bl	ceb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f16e:	4287      	cmp	r7, r0
    f170:	d200      	bcs.n	f174 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x23a>
    f172:	4638      	mov	r0, r7
    f174:	4607      	mov	r7, r0
    f176:	2102      	movs	r1, #2
    f178:	4640      	mov	r0, r8
    f17a:	f7fd fe9d 	bl	ceb8 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f17e:	4284      	cmp	r4, r0
    f180:	d200      	bcs.n	f184 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24a>
    f182:	4620      	mov	r0, r4
    f184:	8831      	ldrh	r1, [r6, #0]
    f186:	8029      	strh	r1, [r5, #0]
    f188:	2f1b      	cmp	r7, #27
    f18a:	d913      	bls.n	f1b4 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27a>
    f18c:	2ffb      	cmp	r7, #251	; 0xfb
    f18e:	d300      	bcc.n	f192 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f190:	27fb      	movs	r7, #251	; 0xfb
    f192:	806f      	strh	r7, [r5, #2]
    f194:	281b      	cmp	r0, #27
    f196:	d90f      	bls.n	f1b8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x27e>
    f198:	28fb      	cmp	r0, #251	; 0xfb
    f19a:	d300      	bcc.n	f19e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f19c:	20fb      	movs	r0, #251	; 0xfb
    f19e:	80e8      	strh	r0, [r5, #6]
    f1a0:	4640      	mov	r0, r8
    f1a2:	f7ff fed2 	bl	ef4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f1a6:	80a8      	strh	r0, [r5, #4]
    f1a8:	4640      	mov	r0, r8
    f1aa:	f7ff fece 	bl	ef4a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x10>
    f1ae:	8128      	strh	r0, [r5, #8]
    f1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f1b4:	271b      	movs	r7, #27
    f1b6:	e7ec      	b.n	f192 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x258>
    f1b8:	201b      	movs	r0, #27
    f1ba:	e7f0      	b.n	f19e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x264>
    f1bc:	b510      	push	{r4, lr}
    f1be:	f7ff fee3 	bl	ef88 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x4e>
    f1c2:	2800      	cmp	r0, #0
    f1c4:	d000      	beq.n	f1c8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x28e>
    f1c6:	2001      	movs	r0, #1
    f1c8:	bd10      	pop	{r4, pc}
    f1ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1ce:	7890      	ldrb	r0, [r2, #2]
    f1d0:	9e06      	ldr	r6, [sp, #24]
    f1d2:	461d      	mov	r5, r3
    f1d4:	4614      	mov	r4, r2
    f1d6:	b908      	cbnz	r0, f1dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2a2>
    f1d8:	f7fb f8c8 	bl	a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f1dc:	78e4      	ldrb	r4, [r4, #3]
    f1de:	4607      	mov	r7, r0
    f1e0:	b914      	cbnz	r4, f1e8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2ae>
    f1e2:	f7fb f8c3 	bl	a36c <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f1e6:	4604      	mov	r4, r0
    f1e8:	b16f      	cbz	r7, f206 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f1ea:	b164      	cbz	r4, f206 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f1ec:	4638      	mov	r0, r7
    f1ee:	f7ff feb6 	bl	ef5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f1f2:	4620      	mov	r0, r4
    f1f4:	f7ff feb3 	bl	ef5e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x24>
    f1f8:	b12f      	cbz	r7, f206 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f1fa:	b124      	cbz	r4, f206 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2cc>
    f1fc:	702f      	strb	r7, [r5, #0]
    f1fe:	7034      	strb	r4, [r6, #0]
    f200:	2000      	movs	r0, #0
    f202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f206:	2009      	movs	r0, #9
    f208:	e7fb      	b.n	f202 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2c8>
    f20a:	b510      	push	{r4, lr}
    f20c:	f7fc fb2e 	bl	b86c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f210:	b928      	cbnz	r0, f21e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f212:	f7fc fb61 	bl	b8d8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f216:	b910      	cbnz	r0, f21e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e4>
    f218:	f7fc fb68 	bl	b8ec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f21c:	b108      	cbz	r0, f222 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x2e8>
    f21e:	2008      	movs	r0, #8
    f220:	bd10      	pop	{r4, pc}
    f222:	f7fc faf8 	bl	b816 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f226:	b940      	cbnz	r0, f23a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f228:	f7fc faff 	bl	b82a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f22c:	b928      	cbnz	r0, f23a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f22e:	f7fc fb13 	bl	b858 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f232:	b910      	cbnz	r0, f23a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x300>
    f234:	f7fc fb24 	bl	b880 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f238:	b108      	cbz	r0, f23e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x304>
    f23a:	2004      	movs	r0, #4
    f23c:	bd10      	pop	{r4, pc}
    f23e:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    f242:	2039      	movs	r0, #57	; 0x39
    f244:	f7f4 fd18 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f248:	b510      	push	{r4, lr}
    f24a:	f7fb f889 	bl	a360 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f24e:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f252:	bd10      	pop	{r4, pc}
    f254:	6840      	ldr	r0, [r0, #4]
    f256:	f000 b800 	b.w	f25a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x320>
    f25a:	b508      	push	{r3, lr}
    f25c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    f260:	f890 0094 	ldrb.w	r0, [r0, #148]	; 0x94
    f264:	f88d 0000 	strb.w	r0, [sp]
    f268:	9800      	ldr	r0, [sp, #0]
    f26a:	9000      	str	r0, [sp, #0]
    f26c:	f89d 0000 	ldrb.w	r0, [sp]
    f270:	1e40      	subs	r0, r0, #1
    f272:	4208      	tst	r0, r1
    f274:	d003      	beq.n	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    f276:	2904      	cmp	r1, #4
    f278:	d001      	beq.n	f27e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x344>
    f27a:	2001      	movs	r0, #1
    f27c:	bd08      	pop	{r3, pc}
    f27e:	2000      	movs	r0, #0
    f280:	bd08      	pop	{r3, pc}
    f282:	b510      	push	{r4, lr}
    f284:	2101      	movs	r1, #1
    f286:	2000      	movs	r0, #0
    f288:	f7fd fb43 	bl	c912 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f28c:	0004      	movs	r4, r0
    f28e:	d108      	bne.n	f2a2 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x368>
    f290:	2200      	movs	r2, #0
    f292:	2101      	movs	r1, #1
    f294:	4610      	mov	r0, r2
    f296:	f7fd fb32 	bl	c8fe <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    f29a:	0004      	movs	r4, r0
    f29c:	d003      	beq.n	f2a6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x36c>
    f29e:	f7fe faf2 	bl	d886 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    f2a2:	4620      	mov	r0, r4
    f2a4:	bd10      	pop	{r4, pc}
    f2a6:	f44f 7108 	mov.w	r1, #544	; 0x220
    f2aa:	2039      	movs	r0, #57	; 0x39
    f2ac:	f7f4 fce4 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2b0:	b570      	push	{r4, r5, r6, lr}
    f2b2:	4605      	mov	r5, r0
    f2b4:	f7fe fb53 	bl	d95e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    f2b8:	b170      	cbz	r0, f2d8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39e>
    f2ba:	4628      	mov	r0, r5
    f2bc:	f7fe fd17 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f2c0:	2800      	cmp	r0, #0
    f2c2:	d008      	beq.n	f2d6 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x39c>
    f2c4:	4628      	mov	r0, r5
    f2c6:	f7fe fd0f 	bl	dce8 <sym_WI2RDLNIWKOV64CKFZ2EF2DRND265I3CYCBNK6A>
    f2ca:	4604      	mov	r4, r0
    f2cc:	4628      	mov	r0, r5
    f2ce:	f7fe fce5 	bl	dc9c <sym_IWCITVPPUY332JRWMVJAKISCC47TLWX26E2MXOI>
    f2d2:	b118      	cbz	r0, f2dc <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3a2>
    f2d4:	200c      	movs	r0, #12
    f2d6:	bd70      	pop	{r4, r5, r6, pc}
    f2d8:	2042      	movs	r0, #66	; 0x42
    f2da:	bd70      	pop	{r4, r5, r6, pc}
    f2dc:	b164      	cbz	r4, f2f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    f2de:	8820      	ldrh	r0, [r4, #0]
    f2e0:	f7fd fc9a 	bl	cc18 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f2e4:	8820      	ldrh	r0, [r4, #0]
    f2e6:	2100      	movs	r1, #0
    f2e8:	f7f4 ff5c 	bl	41a4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f2ec:	b120      	cbz	r0, f2f8 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3be>
    f2ee:	f241 41b9 	movw	r1, #5305	; 0x14b9
    f2f2:	2039      	movs	r0, #57	; 0x39
    f2f4:	f7f4 fcc0 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2f8:	2000      	movs	r0, #0
    f2fa:	bd70      	pop	{r4, r5, r6, pc}
    f2fc:	b530      	push	{r4, r5, lr}
    f2fe:	f340 0400 	sbfx	r4, r0, #0, #1
    f302:	f340 0040 	sbfx	r0, r0, #1, #1
    f306:	1c40      	adds	r0, r0, #1
    f308:	9d03      	ldr	r5, [sp, #12]
    f30a:	1c64      	adds	r4, r4, #1
    f30c:	d000      	beq.n	f310 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3d6>
    f30e:	b119      	cbz	r1, f318 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f310:	b100      	cbz	r0, f314 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3da>
    f312:	b10a      	cbz	r2, f318 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3de>
    f314:	b91c      	cbnz	r4, f31e <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e4>
    f316:	e001      	b.n	f31c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3e2>
    f318:	2011      	movs	r0, #17
    f31a:	bd30      	pop	{r4, r5, pc}
    f31c:	2100      	movs	r1, #0
    f31e:	7019      	strb	r1, [r3, #0]
    f320:	b900      	cbnz	r0, f324 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x3ea>
    f322:	2200      	movs	r2, #0
    f324:	702a      	strb	r2, [r5, #0]
    f326:	2000      	movs	r0, #0
    f328:	bd30      	pop	{r4, r5, pc}
    f32a:	b2c0      	uxtb	r0, r0
    f32c:	06c1      	lsls	r1, r0, #27
    f32e:	d40c      	bmi.n	f34a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x410>
    f330:	0681      	lsls	r1, r0, #26
    f332:	ea4f 71c0 	mov.w	r1, r0, lsl #31
    f336:	d503      	bpl.n	f340 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x406>
    f338:	b9d1      	cbnz	r1, f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f33a:	0781      	lsls	r1, r0, #30
    f33c:	d418      	bmi.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f33e:	e001      	b.n	f344 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x40a>
    f340:	2900      	cmp	r1, #0
    f342:	d1fa      	bne.n	f33a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x400>
    f344:	0700      	lsls	r0, r0, #28
    f346:	d413      	bmi.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f348:	e010      	b.n	f36c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    f34a:	0641      	lsls	r1, r0, #25
    f34c:	d410      	bmi.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f34e:	0681      	lsls	r1, r0, #26
    f350:	d40e      	bmi.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f352:	07c1      	lsls	r1, r0, #31
    f354:	ea4f 7180 	mov.w	r1, r0, lsl #30
    f358:	d004      	beq.n	f364 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    f35a:	2900      	cmp	r1, #0
    f35c:	db02      	blt.n	f364 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x42a>
    f35e:	0740      	lsls	r0, r0, #29
    f360:	d404      	bmi.n	f36c <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x432>
    f362:	e005      	b.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f364:	0701      	lsls	r1, r0, #28
    f366:	d403      	bmi.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f368:	0740      	lsls	r0, r0, #29
    f36a:	d401      	bmi.n	f370 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x436>
    f36c:	2001      	movs	r0, #1
    f36e:	4770      	bx	lr
    f370:	2000      	movs	r0, #0
    f372:	4770      	bx	lr
    f374:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f376:	4669      	mov	r1, sp
    f378:	2001      	movs	r0, #1
    f37a:	f7fd fad4 	bl	c926 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f37e:	b178      	cbz	r0, f3a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f380:	f240 115f 	movw	r1, #351	; 0x15f
    f384:	2039      	movs	r0, #57	; 0x39
    f386:	f7f4 fc77 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f38a:	9c02      	ldr	r4, [sp, #8]
    f38c:	4620      	mov	r0, r4
    f38e:	f7fe fcae 	bl	dcee <sym_GWLFBYMUVMRXAWJAYXMEGM7D57QYGUJF3J77TCA>
    f392:	b128      	cbz	r0, f3a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f394:	4620      	mov	r0, r4
    f396:	f7fe fb10 	bl	d9ba <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    f39a:	b108      	cbz	r0, f3a0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x466>
    f39c:	2001      	movs	r0, #1
    f39e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f3a0:	4668      	mov	r0, sp
    f3a2:	f7f4 feaf 	bl	4104 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f3a6:	2800      	cmp	r0, #0
    f3a8:	d0ef      	beq.n	f38a <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A+0x450>
    f3aa:	2000      	movs	r0, #0
    f3ac:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f3ae <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f3ae:	6802      	ldr	r2, [r0, #0]
    f3b0:	b912      	cbnz	r2, f3b8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f3b2:	6001      	str	r1, [r0, #0]
    f3b4:	4770      	bx	lr
    f3b6:	4602      	mov	r2, r0
    f3b8:	6850      	ldr	r0, [r2, #4]
    f3ba:	b108      	cbz	r0, f3c0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f3bc:	428a      	cmp	r2, r1
    f3be:	d1fa      	bne.n	f3b6 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f3c0:	428a      	cmp	r2, r1
    f3c2:	d0f7      	beq.n	f3b4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f3c4:	6051      	str	r1, [r2, #4]
    f3c6:	4770      	bx	lr
    f3c8:	b510      	push	{r4, lr}
    f3ca:	f7fe fc93 	bl	dcf4 <sym_6PZGCXLPPNIPYHSAJRHQXJCKUI2SGZWI2B4DQZA>
    f3ce:	b108      	cbz	r0, f3d4 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f3d0:	21f3      	movs	r1, #243	; 0xf3
    f3d2:	e003      	b.n	f3dc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x2e>
    f3d4:	f7f7 f8dc 	bl	6590 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    f3d8:	b118      	cbz	r0, f3e2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x34>
    f3da:	21f8      	movs	r1, #248	; 0xf8
    f3dc:	2001      	movs	r0, #1
    f3de:	f7f4 fc4b 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3e6:	2001      	movs	r0, #1
    f3e8:	f7f4 be22 	b.w	4030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f3ec:	b510      	push	{r4, lr}
    f3ee:	4604      	mov	r4, r0
    f3f0:	e002      	b.n	f3f8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4a>
    f3f2:	6820      	ldr	r0, [r4, #0]
    f3f4:	4780      	blx	r0
    f3f6:	6864      	ldr	r4, [r4, #4]
    f3f8:	2c00      	cmp	r4, #0
    f3fa:	d1fa      	bne.n	f3f2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x44>
    f3fc:	bd10      	pop	{r4, pc}
    f3fe:	b510      	push	{r4, lr}
    f400:	2000      	movs	r0, #0
    f402:	f7f4 fe15 	bl	4030 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f406:	f7f5 f84b 	bl	44a0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f40a:	f7f5 fb17 	bl	4a3c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f40e:	f7f5 fd0b 	bl	4e28 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f412:	2800      	cmp	r0, #0
    f414:	d003      	beq.n	f41e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x70>
    f416:	21d0      	movs	r1, #208	; 0xd0
    f418:	2001      	movs	r0, #1
    f41a:	f7f4 fc2d 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f41e:	bd10      	pop	{r4, pc}
    f420:	b510      	push	{r4, lr}
    f422:	f7ff ffd1 	bl	f3c8 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    f426:	f7fe ffef 	bl	e408 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
    f42a:	2800      	cmp	r0, #0
    f42c:	d004      	beq.n	f438 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8a>
    f42e:	f240 1111 	movw	r1, #273	; 0x111
    f432:	2001      	movs	r0, #1
    f434:	f7f4 fc20 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f438:	bd10      	pop	{r4, pc}

0000f43a <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
    f43a:	f7f4 b891 	b.w	3560 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    f43e:	0001      	.short	0x0001
    f440:	0002000b 	.word	0x0002000b
    f444:	0005000a 	.word	0x0005000a
    f448:	000a0009 	.word	0x000a0009
    f44c:	00140008 	.word	0x00140008
    f450:	001e0007 	.word	0x001e0007
    f454:	00320006 	.word	0x00320006
    f458:	004b0005 	.word	0x004b0005
    f45c:	00640004 	.word	0x00640004
    f460:	00960003 	.word	0x00960003
    f464:	00fa0002 	.word	0x00fa0002
    f468:	01f40001 	.word	0x01f40001
	...

0000f46e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    f46e:	b510      	push	{r4, lr}
    f470:	f7fb fb6c 	bl	ab4c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    f474:	f000 f850 	bl	f518 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    f478:	f7fa ffe6 	bl	a448 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    f47c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f480:	f7fb b8e4 	b.w	a64c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000f484 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    f484:	b510      	push	{r4, lr}
    f486:	24c8      	movs	r4, #200	; 0xc8
    f488:	1e64      	subs	r4, r4, #1
    f48a:	b2e4      	uxtb	r4, r4
    f48c:	f7fa fffa 	bl	a484 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    f490:	2802      	cmp	r0, #2
    f492:	d003      	beq.n	f49c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    f494:	2801      	cmp	r0, #1
    f496:	d000      	beq.n	f49a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    f498:	2000      	movs	r0, #0
    f49a:	bd10      	pop	{r4, pc}
    f49c:	2c00      	cmp	r4, #0
    f49e:	d1f3      	bne.n	f488 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    f4a0:	2193      	movs	r1, #147	; 0x93
    f4a2:	203b      	movs	r0, #59	; 0x3b
    f4a4:	f7f4 fbe8 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f4a8 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    f4a8:	b510      	push	{r4, lr}
    f4aa:	f7f4 fab3 	bl	3a14 <mpsl_fem_lna_configuration_clear>
    f4ae:	2800      	cmp	r0, #0
    f4b0:	d005      	beq.n	f4be <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f4b2:	1c40      	adds	r0, r0, #1
    f4b4:	d003      	beq.n	f4be <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    f4b6:	2150      	movs	r1, #80	; 0x50
    f4b8:	2040      	movs	r0, #64	; 0x40
    f4ba:	f7f4 fbdd 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4be:	bd10      	pop	{r4, pc}

0000f4c0 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    f4c0:	b510      	push	{r4, lr}
    f4c2:	f7f4 fab3 	bl	3a2c <mpsl_fem_pa_configuration_clear>
    f4c6:	2800      	cmp	r0, #0
    f4c8:	d005      	beq.n	f4d6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f4ca:	1c40      	adds	r0, r0, #1
    f4cc:	d003      	beq.n	f4d6 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    f4ce:	2149      	movs	r1, #73	; 0x49
    f4d0:	2040      	movs	r0, #64	; 0x40
    f4d2:	f7f4 fbd1 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4d6:	bd10      	pop	{r4, pc}

0000f4d8 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    f4d8:	b510      	push	{r4, lr}
    f4da:	f7f4 fa95 	bl	3a08 <mpsl_fem_disable>
    f4de:	2800      	cmp	r0, #0
    f4e0:	d005      	beq.n	f4ee <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f4e2:	1c40      	adds	r0, r0, #1
    f4e4:	d003      	beq.n	f4ee <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    f4e6:	2157      	movs	r1, #87	; 0x57
    f4e8:	2040      	movs	r0, #64	; 0x40
    f4ea:	f7f4 fbc5 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4ee:	bd10      	pop	{r4, pc}

0000f4f0 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    f4f0:	b510      	push	{r4, lr}
    f4f2:	2100      	movs	r1, #0
    f4f4:	4608      	mov	r0, r1
    f4f6:	f7f4 fa93 	bl	3a20 <mpsl_fem_lna_configuration_set>
    f4fa:	b108      	cbz	r0, f500 <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    f4fc:	2000      	movs	r0, #0
    f4fe:	bd10      	pop	{r4, pc}
    f500:	2001      	movs	r0, #1
    f502:	bd10      	pop	{r4, pc}

0000f504 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    f504:	b508      	push	{r3, lr}
    f506:	4668      	mov	r0, sp
    f508:	f7f4 fa9c 	bl	3a44 <mpsl_fem_pa_is_configured>
    f50c:	f89d 0000 	ldrb.w	r0, [sp]
    f510:	2800      	cmp	r0, #0
    f512:	d000      	beq.n	f516 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    f514:	2001      	movs	r0, #1
    f516:	bd08      	pop	{r3, pc}

0000f518 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    f518:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    f51c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f520:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    f524:	f3bf 8f4f 	dsb	sy
    f528:	f3bf 8f6f 	isb	sy
    f52c:	f7fb b968 	b.w	a800 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    f530:	2800      	cmp	r0, #0
    f532:	db09      	blt.n	f548 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    f534:	f000 021f 	and.w	r2, r0, #31
    f538:	2101      	movs	r1, #1
    f53a:	4091      	lsls	r1, r2
    f53c:	0940      	lsrs	r0, r0, #5
    f53e:	0080      	lsls	r0, r0, #2
    f540:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f544:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    f548:	4770      	bx	lr
    f54a:	2800      	cmp	r0, #0
    f54c:	db0d      	blt.n	f56a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    f54e:	f000 021f 	and.w	r2, r0, #31
    f552:	2101      	movs	r1, #1
    f554:	4091      	lsls	r1, r2
    f556:	0940      	lsrs	r0, r0, #5
    f558:	0080      	lsls	r0, r0, #2
    f55a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f55e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    f562:	f3bf 8f4f 	dsb	sy
    f566:	f3bf 8f6f 	isb	sy
    f56a:	4770      	bx	lr

0000f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    f56c:	b510      	push	{r4, lr}
    f56e:	2801      	cmp	r0, #1
    f570:	d006      	beq.n	f580 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    f572:	2802      	cmp	r0, #2
    f574:	d006      	beq.n	f584 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    f576:	f640 3164 	movw	r1, #2916	; 0xb64
    f57a:	203e      	movs	r0, #62	; 0x3e
    f57c:	f7f4 fb7c 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f580:	2028      	movs	r0, #40	; 0x28
    f582:	bd10      	pop	{r4, pc}
    f584:	2018      	movs	r0, #24
    f586:	bd10      	pop	{r4, pc}

0000f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    f588:	b510      	push	{r4, lr}
    f58a:	2801      	cmp	r0, #1
    f58c:	d006      	beq.n	f59c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    f58e:	2802      	cmp	r0, #2
    f590:	d007      	beq.n	f5a2 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    f592:	f640 3178 	movw	r1, #2936	; 0xb78
    f596:	203e      	movs	r0, #62	; 0x3e
    f598:	f7f4 fb6e 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f59c:	f641 6014 	movw	r0, #7700	; 0x1e14
    f5a0:	bd10      	pop	{r4, pc}
    f5a2:	f241 1030 	movw	r0, #4400	; 0x1130
    f5a6:	bd10      	pop	{r4, pc}

0000f5a8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    f5a8:	f7fb bff8 	b.w	b59c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    f5ac:	b510      	push	{r4, lr}
    f5ae:	460a      	mov	r2, r1
    f5b0:	b130      	cbz	r0, f5c0 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    f5b2:	2801      	cmp	r0, #1
    f5b4:	d00b      	beq.n	f5ce <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    f5b6:	f240 6127 	movw	r1, #1575	; 0x627
    f5ba:	203e      	movs	r0, #62	; 0x3e
    f5bc:	f7f4 fb5c 	bl	3c78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5c4:	f102 0128 	add.w	r1, r2, #40	; 0x28
    f5c8:	4610      	mov	r0, r2
    f5ca:	f7fa bfaf 	b.w	a52c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    f5ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f5d2:	f102 0129 	add.w	r1, r2, #41	; 0x29
    f5d6:	4610      	mov	r0, r2
    f5d8:	f7fa bf92 	b.w	a500 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

0000f5dc <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    f5dc:	b570      	push	{r4, r5, r6, lr}
    f5de:	4605      	mov	r5, r0
    f5e0:	4614      	mov	r4, r2
    f5e2:	4608      	mov	r0, r1
    f5e4:	f7ff ffd0 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f5e8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    f5ec:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    f5f0:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    f5f4:	4620      	mov	r0, r4
    f5f6:	f7ff ffc7 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f5fa:	4428      	add	r0, r5
    f5fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f600:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    f604:	fbb0 f5f1 	udiv	r5, r0, r1
    f608:	4620      	mov	r0, r4
    f60a:	f7ff ffaf 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f60e:	4428      	add	r0, r5
    f610:	1d40      	adds	r0, r0, #5
    f612:	bd70      	pop	{r4, r5, r6, pc}

0000f614 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    f614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f618:	4607      	mov	r7, r0
    f61a:	461d      	mov	r5, r3
    f61c:	460e      	mov	r6, r1
    f61e:	4614      	mov	r4, r2
    f620:	4610      	mov	r0, r2
    f622:	f7ff ffb1 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f626:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    f62a:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    f62e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    f632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    f636:	2e02      	cmp	r6, #2
    f638:	d00e      	beq.n	f658 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    f63a:	f240 52dc 	movw	r2, #1500	; 0x5dc
    f63e:	4411      	add	r1, r2
    f640:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    f644:	fbb1 f6f0 	udiv	r6, r1, r0
    f648:	4620      	mov	r0, r4
    f64a:	f7ff ff8f 	bl	f56c <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f64e:	4430      	add	r0, r6
    f650:	4428      	add	r0, r5
    f652:	1d40      	adds	r0, r0, #5
    f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f658:	4602      	mov	r2, r0
    f65a:	e7f0      	b.n	f63e <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000f65c <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    f65c:	b510      	push	{r4, lr}
    f65e:	4604      	mov	r4, r0
    f660:	4608      	mov	r0, r1
    f662:	f7ff ff91 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f666:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f66a:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f66e:	fbb0 f0f1 	udiv	r0, r0, r1
    f672:	1a20      	subs	r0, r4, r0
    f674:	1e80      	subs	r0, r0, #2
    f676:	bd10      	pop	{r4, pc}

0000f678 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    f678:	b510      	push	{r4, lr}
    f67a:	4604      	mov	r4, r0
    f67c:	4608      	mov	r0, r1
    f67e:	f7ff ff83 	bl	f588 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f682:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f686:	fbb0 f0f1 	udiv	r0, r0, r1
    f68a:	1a20      	subs	r0, r4, r0
    f68c:	bd10      	pop	{r4, pc}

0000f68e <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    f68e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f692:	2902      	cmp	r1, #2
    f694:	d008      	beq.n	f6a8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    f696:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f69a:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    f69e:	fbb1 f1f2 	udiv	r1, r1, r2
    f6a2:	4408      	add	r0, r1
    f6a4:	1e80      	subs	r0, r0, #2
    f6a6:	4770      	bx	lr
    f6a8:	4611      	mov	r1, r2
    f6aa:	e7f6      	b.n	f69a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000f6ac <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    f6ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f6b0:	2902      	cmp	r1, #2
    f6b2:	d007      	beq.n	f6c4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    f6b4:	f240 51dc 	movw	r1, #1500	; 0x5dc
    f6b8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    f6bc:	fbb1 f1f2 	udiv	r1, r1, r2
    f6c0:	4408      	add	r0, r1
    f6c2:	4770      	bx	lr
    f6c4:	4611      	mov	r1, r2
    f6c6:	e7f7      	b.n	f6b8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    f6c8:	1702080c 	.word	0x1702080c
    f6cc:	0201010d 	.word	0x0201010d
    f6d0:	01010909 	.word	0x01010909
    f6d4:	18090206 	.word	0x18090206
    f6d8:	01010318 	.word	0x01010318
    f6dc:	03030909 	.word	0x03030909
    f6e0:	00000005 	.word	0x00000005

0000f6e4 <temp_ccc_cfg_changed>:
	return len;
}

static void temp_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				       uint16_t value)
{
    f6e4:	b508      	push	{r3, lr}
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	printk("Temp Notifications %s\n", notif_enabled ? "enabled" : "disabled");
    f6e6:	2901      	cmp	r1, #1
    f6e8:	d004      	beq.n	f6f4 <temp_ccc_cfg_changed+0x10>
    f6ea:	4903      	ldr	r1, [pc, #12]	; (f6f8 <temp_ccc_cfg_changed+0x14>)
    f6ec:	4803      	ldr	r0, [pc, #12]	; (f6fc <temp_ccc_cfg_changed+0x18>)
    f6ee:	f00d f85d 	bl	1c7ac <printk>
}
    f6f2:	bd08      	pop	{r3, pc}
	printk("Temp Notifications %s\n", notif_enabled ? "enabled" : "disabled");
    f6f4:	4902      	ldr	r1, [pc, #8]	; (f700 <temp_ccc_cfg_changed+0x1c>)
    f6f6:	e7f9      	b.n	f6ec <temp_ccc_cfg_changed+0x8>
    f6f8:	00022178 	.word	0x00022178
    f6fc:	0002218c 	.word	0x0002218c
    f700:	00022184 	.word	0x00022184

0000f704 <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_FLAGS, (BT_LE_AD_GENERAL | BT_LE_AD_NO_BREDR)),	// Limited Discoverable, BR/EDR not supported
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, TTPMS_BASE_UUID),			// Our service
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    f704:	b508      	push	{r3, lr}
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
    f706:	4802      	ldr	r0, [pc, #8]	; (f710 <mtu_updated+0xc>)
    f708:	f00d f850 	bl	1c7ac <printk>
}
    f70c:	bd08      	pop	{r3, pc}
    f70e:	bf00      	nop
    f710:	000221a4 	.word	0x000221a4

0000f714 <disconnected>:
		printk("Connected\n");
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    f714:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
    f716:	4802      	ldr	r0, [pc, #8]	; (f720 <disconnected+0xc>)
    f718:	f00d f848 	bl	1c7ac <printk>
}
    f71c:	bd08      	pop	{r3, pc}
    f71e:	bf00      	nop
    f720:	000221c8 	.word	0x000221c8

0000f724 <connected>:
{
    f724:	b508      	push	{r3, lr}
	if (err) {
    f726:	b119      	cbz	r1, f730 <connected+0xc>
		printk("Connection failed (err 0x%02x)\n", err);
    f728:	4803      	ldr	r0, [pc, #12]	; (f738 <connected+0x14>)
    f72a:	f00d f83f 	bl	1c7ac <printk>
}
    f72e:	bd08      	pop	{r3, pc}
		printk("Connected\n");
    f730:	4802      	ldr	r0, [pc, #8]	; (f73c <connected+0x18>)
    f732:	f00d f83b 	bl	1c7ac <printk>
}
    f736:	e7fa      	b.n	f72e <connected+0xa>
    f738:	000221e8 	.word	0x000221e8
    f73c:	00022208 	.word	0x00022208

0000f740 <write_frequency>:
{
    f740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f744:	460f      	mov	r7, r1
    f746:	4616      	mov	r6, r2
    f748:	461c      	mov	r4, r3
    f74a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	printk("Writing frequency with length %d\n", len);
    f74e:	4619      	mov	r1, r3
    f750:	480f      	ldr	r0, [pc, #60]	; (f790 <write_frequency+0x50>)
    f752:	f00d f82b 	bl	1c7ac <printk>
	printk("Offset = %d\n", offset);
    f756:	4629      	mov	r1, r5
    f758:	480e      	ldr	r0, [pc, #56]	; (f794 <write_frequency+0x54>)
    f75a:	f00d f827 	bl	1c7ac <printk>
	printk("Old actual frequency value: %d\n", frequency);
    f75e:	f8df 8040 	ldr.w	r8, [pc, #64]	; f7a0 <write_frequency+0x60>
    f762:	f8b8 1000 	ldrh.w	r1, [r8]
    f766:	480c      	ldr	r0, [pc, #48]	; (f798 <write_frequency+0x58>)
    f768:	f00d f820 	bl	1c7ac <printk>
	uint8_t *value = attr->user_data;
    f76c:	68ff      	ldr	r7, [r7, #12]
	memcpy(value + offset, buf, len);
    f76e:	4622      	mov	r2, r4
    f770:	4631      	mov	r1, r6
    f772:	1978      	adds	r0, r7, r5
    f774:	f00e fb57 	bl	1de26 <memcpy>
	value[offset + len] = 0;
    f778:	4425      	add	r5, r4
    f77a:	2300      	movs	r3, #0
    f77c:	557b      	strb	r3, [r7, r5]
	printk("New actual frequency value: %d\n", frequency);
    f77e:	f8b8 1000 	ldrh.w	r1, [r8]
    f782:	4806      	ldr	r0, [pc, #24]	; (f79c <write_frequency+0x5c>)
    f784:	f00d f812 	bl	1c7ac <printk>
}
    f788:	4620      	mov	r0, r4
    f78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f78e:	bf00      	nop
    f790:	00022214 	.word	0x00022214
    f794:	00022238 	.word	0x00022238
    f798:	00022248 	.word	0x00022248
    f79c:	00022268 	.word	0x00022268
    f7a0:	20000682 	.word	0x20000682

0000f7a4 <read_frequency>:
{
    f7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7a6:	b085      	sub	sp, #20
    f7a8:	4605      	mov	r5, r0
    f7aa:	460c      	mov	r4, r1
    f7ac:	4616      	mov	r6, r2
    f7ae:	461f      	mov	r7, r3
	printk("Reading frequency\n");
    f7b0:	480b      	ldr	r0, [pc, #44]	; (f7e0 <read_frequency+0x3c>)
    f7b2:	f00c fffb 	bl	1c7ac <printk>
	printk("Actual frequency value: %d\n", frequency);
    f7b6:	4b0b      	ldr	r3, [pc, #44]	; (f7e4 <read_frequency+0x40>)
    f7b8:	8819      	ldrh	r1, [r3, #0]
    f7ba:	480b      	ldr	r0, [pc, #44]	; (f7e8 <read_frequency+0x44>)
    f7bc:	f00c fff6 	bl	1c7ac <printk>
	const char *value = attr->user_data;
    f7c0:	68e3      	ldr	r3, [r4, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    f7c2:	2202      	movs	r2, #2
    f7c4:	9202      	str	r2, [sp, #8]
    f7c6:	9301      	str	r3, [sp, #4]
    f7c8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f7cc:	9300      	str	r3, [sp, #0]
    f7ce:	463b      	mov	r3, r7
    f7d0:	4632      	mov	r2, r6
    f7d2:	4621      	mov	r1, r4
    f7d4:	4628      	mov	r0, r5
    f7d6:	f010 f978 	bl	1faca <bt_gatt_attr_read>
}
    f7da:	b005      	add	sp, #20
    f7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7de:	bf00      	nop
    f7e0:	00022288 	.word	0x00022288
    f7e4:	20000682 	.word	0x20000682
    f7e8:	0002229c 	.word	0x0002229c

0000f7ec <read_battery>:
{
    f7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f7ee:	b085      	sub	sp, #20
    f7f0:	4605      	mov	r5, r0
    f7f2:	460c      	mov	r4, r1
    f7f4:	4616      	mov	r6, r2
    f7f6:	461f      	mov	r7, r3
	printk("Reading battery\n");
    f7f8:	480b      	ldr	r0, [pc, #44]	; (f828 <read_battery+0x3c>)
    f7fa:	f00c ffd7 	bl	1c7ac <printk>
	printk("Actual frequency value: %d\n", battery);
    f7fe:	4b0b      	ldr	r3, [pc, #44]	; (f82c <read_battery+0x40>)
    f800:	8819      	ldrh	r1, [r3, #0]
    f802:	480b      	ldr	r0, [pc, #44]	; (f830 <read_battery+0x44>)
    f804:	f00c ffd2 	bl	1c7ac <printk>
	const char *value = attr->user_data;
    f808:	68e3      	ldr	r3, [r4, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    f80a:	2202      	movs	r2, #2
    f80c:	9202      	str	r2, [sp, #8]
    f80e:	9301      	str	r3, [sp, #4]
    f810:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f814:	9300      	str	r3, [sp, #0]
    f816:	463b      	mov	r3, r7
    f818:	4632      	mov	r2, r6
    f81a:	4621      	mov	r1, r4
    f81c:	4628      	mov	r0, r5
    f81e:	f010 f954 	bl	1faca <bt_gatt_attr_read>
}
    f822:	b005      	add	sp, #20
    f824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f826:	bf00      	nop
    f828:	000222b8 	.word	0x000222b8
    f82c:	20000680 	.word	0x20000680
    f830:	0002229c 	.word	0x0002229c

0000f834 <read_temp>:
{
    f834:	b5f0      	push	{r4, r5, r6, r7, lr}
    f836:	b085      	sub	sp, #20
    f838:	4605      	mov	r5, r0
    f83a:	460c      	mov	r4, r1
    f83c:	4616      	mov	r6, r2
    f83e:	461f      	mov	r7, r3
	printk("Reading temp\n");
    f840:	4808      	ldr	r0, [pc, #32]	; (f864 <read_temp+0x30>)
    f842:	f00c ffb3 	bl	1c7ac <printk>
	const char *value = attr->user_data;
    f846:	68e3      	ldr	r3, [r4, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,	// I think this function actually reads the value from temp?
    f848:	2218      	movs	r2, #24
    f84a:	9202      	str	r2, [sp, #8]
    f84c:	9301      	str	r3, [sp, #4]
    f84e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    f852:	9300      	str	r3, [sp, #0]
    f854:	463b      	mov	r3, r7
    f856:	4632      	mov	r2, r6
    f858:	4621      	mov	r1, r4
    f85a:	4628      	mov	r0, r5
    f85c:	f010 f935 	bl	1faca <bt_gatt_attr_read>
}
    f860:	b005      	add	sp, #20
    f862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f864:	000222cc 	.word	0x000222cc

0000f868 <bt_ready>:
	.connected = connected,
	.disconnected = disconnected,
};

static void bt_ready(void)
{
    f868:	b530      	push	{r4, r5, lr}
    f86a:	b089      	sub	sp, #36	; 0x24
	int err;

	printk("Bluetooth initialized\n");
    f86c:	480d      	ldr	r0, [pc, #52]	; (f8a4 <bt_ready+0x3c>)
    f86e:	f00c ff9d 	bl	1c7ac <printk>

	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    f872:	ac03      	add	r4, sp, #12
    f874:	4d0c      	ldr	r5, [pc, #48]	; (f8a8 <bt_ready+0x40>)
    f876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    f878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    f87a:	682b      	ldr	r3, [r5, #0]
    f87c:	6023      	str	r3, [r4, #0]
    f87e:	2300      	movs	r3, #0
    f880:	9300      	str	r3, [sp, #0]
    f882:	2202      	movs	r2, #2
    f884:	4909      	ldr	r1, [pc, #36]	; (f8ac <bt_ready+0x44>)
    f886:	a803      	add	r0, sp, #12
    f888:	f005 ff12 	bl	156b0 <bt_le_adv_start>
	if (err) {
    f88c:	b920      	cbnz	r0, f898 <bt_ready+0x30>
		printk("Advertising failed to start (err %d)\n", err);
		return;
	}

	printk("Advertising successfully started\n");
    f88e:	4808      	ldr	r0, [pc, #32]	; (f8b0 <bt_ready+0x48>)
    f890:	f00c ff8c 	bl	1c7ac <printk>
}
    f894:	b009      	add	sp, #36	; 0x24
    f896:	bd30      	pop	{r4, r5, pc}
    f898:	4601      	mov	r1, r0
		printk("Advertising failed to start (err %d)\n", err);
    f89a:	4806      	ldr	r0, [pc, #24]	; (f8b4 <bt_ready+0x4c>)
    f89c:	f00c ff86 	bl	1c7ac <printk>
		return;
    f8a0:	e7f8      	b.n	f894 <bt_ready+0x2c>
    f8a2:	bf00      	nop
    f8a4:	000222dc 	.word	0x000222dc
    f8a8:	000220d0 	.word	0x000220d0
    f8ac:	00022378 	.word	0x00022378
    f8b0:	0002231c 	.word	0x0002231c
    f8b4:	000222f4 	.word	0x000222f4

0000f8b8 <main>:

void main(void)
{
    f8b8:	b500      	push	{lr}
    f8ba:	b087      	sub	sp, #28
	int err;

	err = bt_enable(NULL);
    f8bc:	2000      	movs	r0, #0
    f8be:	f005 f875 	bl	149ac <bt_enable>
	if (err) {
    f8c2:	b9e8      	cbnz	r0, f900 <main+0x48>
		printk("Bluetooth init failed (err %d)\n", err);
		return;
	}

	bt_ready();
    f8c4:	f7ff ffd0 	bl	f868 <bt_ready>
	bt_gatt_cb_register(&gatt_callbacks);
    f8c8:	4811      	ldr	r0, [pc, #68]	; (f910 <main+0x58>)
    f8ca:	f008 fa69 	bl	17da0 <bt_gatt_cb_register>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    f8ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    f8d2:	2100      	movs	r1, #0
    f8d4:	f00c f974 	bl	1bbc0 <z_impl_k_sleep>

	while(1)
	{
		k_sleep(K_SECONDS(1));
		printk("Attempting to notify!\n");
    f8d8:	480e      	ldr	r0, [pc, #56]	; (f914 <main+0x5c>)
    f8da:	f00c ff67 	bl	1c7ac <printk>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    f8de:	2218      	movs	r2, #24
    f8e0:	2100      	movs	r1, #0
    f8e2:	4668      	mov	r0, sp
    f8e4:	f00e fac3 	bl	1de6e <memset>

	params.attr = attr;
    f8e8:	4b0b      	ldr	r3, [pc, #44]	; (f918 <main+0x60>)
    f8ea:	9301      	str	r3, [sp, #4]
	params.data = data;
    f8ec:	4b0b      	ldr	r3, [pc, #44]	; (f91c <main+0x64>)
    f8ee:	9302      	str	r3, [sp, #8]
	params.len = len;
    f8f0:	2318      	movs	r3, #24
    f8f2:	f8ad 300c 	strh.w	r3, [sp, #12]

	return bt_gatt_notify_cb(conn, &params);
    f8f6:	4669      	mov	r1, sp
    f8f8:	2000      	movs	r0, #0
    f8fa:	f008 fd2f 	bl	1835c <bt_gatt_notify_cb>
	while(1)
    f8fe:	e7e6      	b.n	f8ce <main+0x16>
    f900:	4601      	mov	r1, r0
		printk("Bluetooth init failed (err %d)\n", err);
    f902:	4807      	ldr	r0, [pc, #28]	; (f920 <main+0x68>)
    f904:	f00c ff52 	bl	1c7ac <printk>
		bt_gatt_notify(NULL, &ttpms_svc.attrs[2], temp, sizeof(temp));
	}
    f908:	b007      	add	sp, #28
    f90a:	f85d fb04 	ldr.w	pc, [sp], #4
    f90e:	bf00      	nop
    f910:	200004d8 	.word	0x200004d8
    f914:	00022360 	.word	0x00022360
    f918:	000223b0 	.word	0x000223b0
    f91c:	200004e0 	.word	0x200004e0
    f920:	00022340 	.word	0x00022340

0000f924 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    f924:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    f926:	680b      	ldr	r3, [r1, #0]
    f928:	3301      	adds	r3, #1
    f92a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    f92c:	4b01      	ldr	r3, [pc, #4]	; (f934 <char_out+0x10>)
    f92e:	681b      	ldr	r3, [r3, #0]
    f930:	4798      	blx	r3
}
    f932:	bd08      	pop	{r3, pc}
    f934:	20000520 	.word	0x20000520

0000f938 <__printk_hook_install>:
	_char_out = fn;
    f938:	4b01      	ldr	r3, [pc, #4]	; (f940 <__printk_hook_install+0x8>)
    f93a:	6018      	str	r0, [r3, #0]
}
    f93c:	4770      	bx	lr
    f93e:	bf00      	nop
    f940:	20000520 	.word	0x20000520

0000f944 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    f944:	b500      	push	{lr}
    f946:	b083      	sub	sp, #12
    f948:	4602      	mov	r2, r0
    f94a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    f94c:	2100      	movs	r1, #0
    f94e:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    f950:	a901      	add	r1, sp, #4
    f952:	4803      	ldr	r0, [pc, #12]	; (f960 <vprintk+0x1c>)
    f954:	f000 f8c8 	bl	fae8 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    f958:	b003      	add	sp, #12
    f95a:	f85d fb04 	ldr.w	pc, [sp], #4
    f95e:	bf00      	nop
    f960:	0000f925 	.word	0x0000f925

0000f964 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    f964:	b510      	push	{r4, lr}
    f966:	b084      	sub	sp, #16
    f968:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    f96a:	9001      	str	r0, [sp, #4]
    f96c:	9102      	str	r1, [sp, #8]
    f96e:	2100      	movs	r1, #0
    f970:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    f972:	a901      	add	r1, sp, #4
    f974:	4805      	ldr	r0, [pc, #20]	; (f98c <vsnprintk+0x28>)
    f976:	f000 f8b7 	bl	fae8 <cbvprintf>

	if (ctx.count < ctx.max) {
    f97a:	9b03      	ldr	r3, [sp, #12]
    f97c:	9a02      	ldr	r2, [sp, #8]
    f97e:	4293      	cmp	r3, r2
    f980:	da01      	bge.n	f986 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    f982:	2200      	movs	r2, #0
    f984:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    f986:	9803      	ldr	r0, [sp, #12]
    f988:	b004      	add	sp, #16
    f98a:	bd10      	pop	{r4, pc}
    f98c:	0001c77d 	.word	0x0001c77d

0000f990 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    f990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f994:	b083      	sub	sp, #12
    f996:	4604      	mov	r4, r0
    f998:	4608      	mov	r0, r1
    f99a:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f99c:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    f99e:	f013 0f08 	tst.w	r3, #8
    f9a2:	d105      	bne.n	f9b0 <process_event+0x20>
    f9a4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    f9a8:	2300      	movs	r3, #0
    f9aa:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    f9ac:	9301      	str	r3, [sp, #4]
}
    f9ae:	e069      	b.n	fa84 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    f9b0:	2901      	cmp	r1, #1
    f9b2:	d009      	beq.n	f9c8 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    f9b4:	f043 0320 	orr.w	r3, r3, #32
    f9b8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    f9ba:	f385 8811 	msr	BASEPRI, r5
    f9be:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    f9c2:	b003      	add	sp, #12
    f9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    f9c8:	f043 0310 	orr.w	r3, r3, #16
    f9cc:	8323      	strh	r3, [r4, #24]
    f9ce:	e7f4      	b.n	f9ba <process_event+0x2a>
			evt = process_recheck(mgr);
    f9d0:	4620      	mov	r0, r4
    f9d2:	f00c ff2e 	bl	1c832 <process_recheck>
    f9d6:	e057      	b.n	fa88 <process_event+0xf8>
			res = mgr->last_res;
    f9d8:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    f9dc:	464a      	mov	r2, r9
    f9de:	4669      	mov	r1, sp
    f9e0:	4620      	mov	r0, r4
    f9e2:	f00c ff3f 	bl	1c864 <process_complete>
		onoff_transition_fn transit = NULL;
    f9e6:	2700      	movs	r7, #0
    f9e8:	e05a      	b.n	faa0 <process_event+0x110>
			transit = mgr->transitions->start;
    f9ea:	6923      	ldr	r3, [r4, #16]
    f9ec:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    f9ee:	2106      	movs	r1, #6
    f9f0:	4620      	mov	r0, r4
    f9f2:	f00c fef7 	bl	1c7e4 <set_state>
		res = 0;
    f9f6:	f04f 0900 	mov.w	r9, #0
    f9fa:	e051      	b.n	faa0 <process_event+0x110>
			transit = mgr->transitions->stop;
    f9fc:	6923      	ldr	r3, [r4, #16]
    f9fe:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    fa00:	2104      	movs	r1, #4
    fa02:	4620      	mov	r0, r4
    fa04:	f00c feee 	bl	1c7e4 <set_state>
		res = 0;
    fa08:	f04f 0900 	mov.w	r9, #0
    fa0c:	e048      	b.n	faa0 <process_event+0x110>
			transit = mgr->transitions->reset;
    fa0e:	6923      	ldr	r3, [r4, #16]
    fa10:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    fa12:	2105      	movs	r1, #5
    fa14:	4620      	mov	r0, r4
    fa16:	f00c fee5 	bl	1c7e4 <set_state>
		res = 0;
    fa1a:	f04f 0900 	mov.w	r9, #0
    fa1e:	e03f      	b.n	faa0 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    fa20:	2200      	movs	r2, #0
    fa22:	e046      	b.n	fab2 <process_event+0x122>
    fa24:	2200      	movs	r2, #0
    fa26:	e044      	b.n	fab2 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    fa28:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    fa2c:	8323      	strh	r3, [r4, #24]
    fa2e:	f385 8811 	msr	BASEPRI, r5
    fa32:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    fa36:	2900      	cmp	r1, #0
    fa38:	d144      	bne.n	fac4 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    fa3a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    fa3c:	b12b      	cbz	r3, fa4a <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    fa3e:	464b      	mov	r3, r9
    fa40:	4642      	mov	r2, r8
    fa42:	4669      	mov	r1, sp
    fa44:	4620      	mov	r0, r4
    fa46:	f00c ff83 	bl	1c950 <notify_all>
			if (transit != NULL) {
    fa4a:	b117      	cbz	r7, fa52 <process_event+0xc2>
				transit(mgr, transition_complete);
    fa4c:	4925      	ldr	r1, [pc, #148]	; (fae4 <process_event+0x154>)
    fa4e:	4620      	mov	r0, r4
    fa50:	47b8      	blx	r7
	__asm__ volatile(
    fa52:	f04f 0340 	mov.w	r3, #64	; 0x40
    fa56:	f3ef 8511 	mrs	r5, BASEPRI
    fa5a:	f383 8812 	msr	BASEPRI_MAX, r3
    fa5e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    fa62:	8b23      	ldrh	r3, [r4, #24]
    fa64:	f023 0308 	bic.w	r3, r3, #8
    fa68:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    fa6a:	8b23      	ldrh	r3, [r4, #24]
    fa6c:	f013 0f10 	tst.w	r3, #16
    fa70:	d02e      	beq.n	fad0 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    fa72:	f023 0310 	bic.w	r3, r3, #16
    fa76:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    fa78:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    fa7a:	8b26      	ldrh	r6, [r4, #24]
    fa7c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    fa80:	2800      	cmp	r0, #0
    fa82:	d09a      	beq.n	f9ba <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    fa84:	2802      	cmp	r0, #2
    fa86:	d0a3      	beq.n	f9d0 <process_event+0x40>
		if (evt == EVT_NOP) {
    fa88:	2800      	cmp	r0, #0
    fa8a:	d096      	beq.n	f9ba <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    fa8c:	2801      	cmp	r0, #1
    fa8e:	d0a3      	beq.n	f9d8 <process_event+0x48>
		} else if (evt == EVT_START) {
    fa90:	2803      	cmp	r0, #3
    fa92:	d0aa      	beq.n	f9ea <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    fa94:	2804      	cmp	r0, #4
    fa96:	d0b1      	beq.n	f9fc <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    fa98:	2805      	cmp	r0, #5
    fa9a:	d0b8      	beq.n	fa0e <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    fa9c:	2700      	movs	r7, #0
		res = 0;
    fa9e:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    faa0:	8b23      	ldrh	r3, [r4, #24]
    faa2:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    faa6:	45b0      	cmp	r8, r6
    faa8:	d0ba      	beq.n	fa20 <process_event+0x90>
    faaa:	68a2      	ldr	r2, [r4, #8]
    faac:	2a00      	cmp	r2, #0
    faae:	d0b9      	beq.n	fa24 <process_event+0x94>
    fab0:	2201      	movs	r2, #1
		if (do_monitors
    fab2:	4611      	mov	r1, r2
    fab4:	2a00      	cmp	r2, #0
    fab6:	d1b7      	bne.n	fa28 <process_event+0x98>
    fab8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    faba:	2a00      	cmp	r2, #0
    fabc:	d1b4      	bne.n	fa28 <process_event+0x98>
		    || (transit != NULL)) {
    fabe:	2f00      	cmp	r7, #0
    fac0:	d1b2      	bne.n	fa28 <process_event+0x98>
    fac2:	e7d2      	b.n	fa6a <process_event+0xda>
				notify_monitors(mgr, state, res);
    fac4:	464a      	mov	r2, r9
    fac6:	4641      	mov	r1, r8
    fac8:	4620      	mov	r0, r4
    faca:	f00c fe93 	bl	1c7f4 <notify_monitors>
    face:	e7b4      	b.n	fa3a <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    fad0:	f013 0f20 	tst.w	r3, #32
    fad4:	d004      	beq.n	fae0 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    fad6:	f023 0320 	bic.w	r3, r3, #32
    fada:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    fadc:	2002      	movs	r0, #2
    fade:	e7cc      	b.n	fa7a <process_event+0xea>
		evt = EVT_NOP;
    fae0:	2000      	movs	r0, #0
    fae2:	e7ca      	b.n	fa7a <process_event+0xea>
    fae4:	0001c97f 	.word	0x0001c97f

0000fae8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    faec:	b093      	sub	sp, #76	; 0x4c
    faee:	4606      	mov	r6, r0
    faf0:	460d      	mov	r5, r1
    faf2:	4692      	mov	sl, r2
    faf4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    faf6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    faf8:	f89a 0000 	ldrb.w	r0, [sl]
    fafc:	2800      	cmp	r0, #0
    fafe:	f000 84d6 	beq.w	104ae <cbvprintf+0x9c6>
		if (*fp != '%') {
    fb02:	2825      	cmp	r0, #37	; 0x25
    fb04:	d008      	beq.n	fb18 <cbvprintf+0x30>
			OUTC(*fp++);
    fb06:	f10a 0a01 	add.w	sl, sl, #1
    fb0a:	4629      	mov	r1, r5
    fb0c:	47b0      	blx	r6
    fb0e:	2800      	cmp	r0, #0
    fb10:	f2c0 84ce 	blt.w	104b0 <cbvprintf+0x9c8>
    fb14:	3401      	adds	r4, #1
			continue;
    fb16:	e7ef      	b.n	faf8 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    fb18:	2300      	movs	r3, #0
    fb1a:	9306      	str	r3, [sp, #24]
    fb1c:	9307      	str	r3, [sp, #28]
    fb1e:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    fb20:	9308      	str	r3, [sp, #32]
    fb22:	9309      	str	r3, [sp, #36]	; 0x24
    fb24:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    fb26:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    fb2a:	f89a 3001 	ldrb.w	r3, [sl, #1]
    fb2e:	2b25      	cmp	r3, #37	; 0x25
    fb30:	d001      	beq.n	fb36 <cbvprintf+0x4e>
	bool loop = true;
    fb32:	2701      	movs	r7, #1
    fb34:	e02c      	b.n	fb90 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    fb36:	f10a 0802 	add.w	r8, sl, #2
    fb3a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    fb3e:	e1a8      	b.n	fe92 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    fb40:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fb44:	f043 0304 	orr.w	r3, r3, #4
    fb48:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    fb4c:	b1ff      	cbz	r7, fb8e <cbvprintf+0xa6>
			++sp;
    fb4e:	f108 0801 	add.w	r8, r8, #1
    fb52:	e01c      	b.n	fb8e <cbvprintf+0xa6>
			conv->flag_plus = true;
    fb54:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fb58:	f043 0308 	orr.w	r3, r3, #8
    fb5c:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    fb60:	e7f4      	b.n	fb4c <cbvprintf+0x64>
			conv->flag_space = true;
    fb62:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fb66:	f043 0310 	orr.w	r3, r3, #16
    fb6a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    fb6e:	e7ed      	b.n	fb4c <cbvprintf+0x64>
			conv->flag_hash = true;
    fb70:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fb74:	f043 0320 	orr.w	r3, r3, #32
    fb78:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    fb7c:	e7e6      	b.n	fb4c <cbvprintf+0x64>
			conv->flag_zero = true;
    fb7e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fb82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fb86:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    fb8a:	e7df      	b.n	fb4c <cbvprintf+0x64>
		switch (*sp) {
    fb8c:	2700      	movs	r7, #0
	} while (loop);
    fb8e:	b34f      	cbz	r7, fbe4 <cbvprintf+0xfc>
		switch (*sp) {
    fb90:	f898 3000 	ldrb.w	r3, [r8]
    fb94:	3b20      	subs	r3, #32
    fb96:	2b10      	cmp	r3, #16
    fb98:	d8f8      	bhi.n	fb8c <cbvprintf+0xa4>
    fb9a:	a201      	add	r2, pc, #4	; (adr r2, fba0 <cbvprintf+0xb8>)
    fb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    fba0:	0000fb63 	.word	0x0000fb63
    fba4:	0000fb8d 	.word	0x0000fb8d
    fba8:	0000fb8d 	.word	0x0000fb8d
    fbac:	0000fb71 	.word	0x0000fb71
    fbb0:	0000fb8d 	.word	0x0000fb8d
    fbb4:	0000fb8d 	.word	0x0000fb8d
    fbb8:	0000fb8d 	.word	0x0000fb8d
    fbbc:	0000fb8d 	.word	0x0000fb8d
    fbc0:	0000fb8d 	.word	0x0000fb8d
    fbc4:	0000fb8d 	.word	0x0000fb8d
    fbc8:	0000fb8d 	.word	0x0000fb8d
    fbcc:	0000fb55 	.word	0x0000fb55
    fbd0:	0000fb8d 	.word	0x0000fb8d
    fbd4:	0000fb41 	.word	0x0000fb41
    fbd8:	0000fb8d 	.word	0x0000fb8d
    fbdc:	0000fb8d 	.word	0x0000fb8d
    fbe0:	0000fb7f 	.word	0x0000fb7f
	if (conv->flag_zero && conv->flag_dash) {
    fbe4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fbe8:	f003 0344 	and.w	r3, r3, #68	; 0x44
    fbec:	2b44      	cmp	r3, #68	; 0x44
    fbee:	d06d      	beq.n	fccc <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    fbf0:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    fbf4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fbf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    fbfc:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    fc00:	f898 3000 	ldrb.w	r3, [r8]
    fc04:	2b2a      	cmp	r3, #42	; 0x2a
    fc06:	d068      	beq.n	fcda <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    fc08:	a805      	add	r0, sp, #20
    fc0a:	f00d fab5 	bl	1d178 <extract_decimal>
	if (sp != wp) {
    fc0e:	9b05      	ldr	r3, [sp, #20]
    fc10:	4598      	cmp	r8, r3
    fc12:	d012      	beq.n	fc3a <cbvprintf+0x152>
		conv->width_present = true;
    fc14:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fc18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    fc1c:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    fc20:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    fc22:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    fc26:	2800      	cmp	r0, #0
    fc28:	db60      	blt.n	fcec <cbvprintf+0x204>
    fc2a:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    fc2c:	4313      	orrs	r3, r2
    fc2e:	f89d 2020 	ldrb.w	r2, [sp, #32]
    fc32:	f363 0241 	bfi	r2, r3, #1, #1
    fc36:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    fc3a:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    fc3c:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    fc3e:	781b      	ldrb	r3, [r3, #0]
    fc40:	2b2e      	cmp	r3, #46	; 0x2e
    fc42:	bf14      	ite	ne
    fc44:	2300      	movne	r3, #0
    fc46:	2301      	moveq	r3, #1
    fc48:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    fc4c:	f363 0241 	bfi	r2, r3, #1, #1
    fc50:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    fc54:	2b00      	cmp	r3, #0
    fc56:	d04b      	beq.n	fcf0 <cbvprintf+0x208>
	++sp;
    fc58:	9b05      	ldr	r3, [sp, #20]
    fc5a:	1c5a      	adds	r2, r3, #1
    fc5c:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    fc5e:	785b      	ldrb	r3, [r3, #1]
    fc60:	2b2a      	cmp	r3, #42	; 0x2a
    fc62:	d048      	beq.n	fcf6 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    fc64:	a805      	add	r0, sp, #20
    fc66:	f00d fa87 	bl	1d178 <extract_decimal>
	conv->prec_value = prec;
    fc6a:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    fc6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fc70:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    fc74:	2800      	cmp	r0, #0
    fc76:	db47      	blt.n	fd08 <cbvprintf+0x220>
    fc78:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    fc7a:	4313      	orrs	r3, r2
    fc7c:	f89d 2020 	ldrb.w	r2, [sp, #32]
    fc80:	f363 0241 	bfi	r2, r3, #1, #1
    fc84:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    fc88:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    fc8c:	f898 3000 	ldrb.w	r3, [r8]
    fc90:	3b4c      	subs	r3, #76	; 0x4c
    fc92:	2b2e      	cmp	r3, #46	; 0x2e
    fc94:	f200 80dc 	bhi.w	fe50 <cbvprintf+0x368>
    fc98:	e8df f003 	tbb	[pc, r3]
    fc9c:	dadadaca 	.word	0xdadadaca
    fca0:	dadadada 	.word	0xdadadada
    fca4:	dadadada 	.word	0xdadadada
    fca8:	dadadada 	.word	0xdadadada
    fcac:	dadadada 	.word	0xdadadada
    fcb0:	dadadada 	.word	0xdadadada
    fcb4:	dadadada 	.word	0xdadadada
    fcb8:	da6ada38 	.word	0xda6ada38
    fcbc:	dadada51 	.word	0xdadada51
    fcc0:	dadadada 	.word	0xdadadada
    fcc4:	dadadac0 	.word	0xdadadac0
    fcc8:	dada      	.short	0xdada
    fcca:	b6          	.byte	0xb6
    fccb:	00          	.byte	0x00
		conv->flag_zero = false;
    fccc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fcd0:	f36f 1386 	bfc	r3, #6, #1
    fcd4:	f88d 3020 	strb.w	r3, [sp, #32]
    fcd8:	e78a      	b.n	fbf0 <cbvprintf+0x108>
		conv->width_star = true;
    fcda:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fcde:	f043 0301 	orr.w	r3, r3, #1
    fce2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    fce6:	4643      	mov	r3, r8
    fce8:	3301      	adds	r3, #1
    fcea:	e7a7      	b.n	fc3c <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    fcec:	2201      	movs	r2, #1
    fcee:	e79d      	b.n	fc2c <cbvprintf+0x144>
		return sp;
    fcf0:	f8dd 8014 	ldr.w	r8, [sp, #20]
    fcf4:	e7ca      	b.n	fc8c <cbvprintf+0x1a4>
		conv->prec_star = true;
    fcf6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fcfa:	f043 0304 	orr.w	r3, r3, #4
    fcfe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    fd02:	f102 0801 	add.w	r8, r2, #1
    fd06:	e7c1      	b.n	fc8c <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    fd08:	2201      	movs	r2, #1
    fd0a:	e7b6      	b.n	fc7a <cbvprintf+0x192>
		if (*++sp == 'h') {
    fd0c:	f108 0201 	add.w	r2, r8, #1
    fd10:	f898 3001 	ldrb.w	r3, [r8, #1]
    fd14:	2b68      	cmp	r3, #104	; 0x68
    fd16:	d008      	beq.n	fd2a <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    fd18:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fd1c:	2102      	movs	r1, #2
    fd1e:	f361 03c6 	bfi	r3, r1, #3, #4
    fd22:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    fd26:	4690      	mov	r8, r2
    fd28:	e02b      	b.n	fd82 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    fd2a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fd2e:	2201      	movs	r2, #1
    fd30:	f362 03c6 	bfi	r3, r2, #3, #4
    fd34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    fd38:	f108 0802 	add.w	r8, r8, #2
    fd3c:	e021      	b.n	fd82 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    fd3e:	f108 0201 	add.w	r2, r8, #1
    fd42:	f898 3001 	ldrb.w	r3, [r8, #1]
    fd46:	2b6c      	cmp	r3, #108	; 0x6c
    fd48:	d008      	beq.n	fd5c <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    fd4a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fd4e:	2103      	movs	r1, #3
    fd50:	f361 03c6 	bfi	r3, r1, #3, #4
    fd54:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    fd58:	4690      	mov	r8, r2
    fd5a:	e012      	b.n	fd82 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    fd5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fd60:	2204      	movs	r2, #4
    fd62:	f362 03c6 	bfi	r3, r2, #3, #4
    fd66:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    fd6a:	f108 0802 	add.w	r8, r8, #2
    fd6e:	e008      	b.n	fd82 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    fd70:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fd74:	2205      	movs	r2, #5
    fd76:	f362 03c6 	bfi	r3, r2, #3, #4
    fd7a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    fd7e:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    fd82:	f818 3b01 	ldrb.w	r3, [r8], #1
    fd86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    fd8a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    fd8e:	2a37      	cmp	r2, #55	; 0x37
    fd90:	f200 8150 	bhi.w	10034 <cbvprintf+0x54c>
    fd94:	e8df f012 	tbh	[pc, r2, lsl #1]
    fd98:	014e0126 	.word	0x014e0126
    fd9c:	014e014e 	.word	0x014e014e
    fda0:	01260126 	.word	0x01260126
    fda4:	014e0126 	.word	0x014e0126
    fda8:	014e014e 	.word	0x014e014e
    fdac:	014e014e 	.word	0x014e014e
    fdb0:	014e014e 	.word	0x014e014e
    fdb4:	014e014e 	.word	0x014e014e
    fdb8:	014e014e 	.word	0x014e014e
    fdbc:	014e014e 	.word	0x014e014e
    fdc0:	014e014e 	.word	0x014e014e
    fdc4:	0113014e 	.word	0x0113014e
    fdc8:	014e014e 	.word	0x014e014e
    fdcc:	014e014e 	.word	0x014e014e
    fdd0:	014e014e 	.word	0x014e014e
    fdd4:	014e014e 	.word	0x014e014e
    fdd8:	014e0126 	.word	0x014e0126
    fddc:	00630113 	.word	0x00630113
    fde0:	01260126 	.word	0x01260126
    fde4:	014e0126 	.word	0x014e0126
    fde8:	014e0063 	.word	0x014e0063
    fdec:	014e014e 	.word	0x014e014e
    fdf0:	012f014e 	.word	0x012f014e
    fdf4:	013f0113 	.word	0x013f0113
    fdf8:	014e014e 	.word	0x014e014e
    fdfc:	014e013f 	.word	0x014e013f
    fe00:	014e0113 	.word	0x014e0113
    fe04:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    fe08:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fe0c:	2206      	movs	r2, #6
    fe0e:	f362 03c6 	bfi	r3, r2, #3, #4
    fe12:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    fe16:	f108 0801 	add.w	r8, r8, #1
		break;
    fe1a:	e7b2      	b.n	fd82 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    fe1c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fe20:	2207      	movs	r2, #7
    fe22:	f362 03c6 	bfi	r3, r2, #3, #4
    fe26:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    fe2a:	f108 0801 	add.w	r8, r8, #1
		break;
    fe2e:	e7a8      	b.n	fd82 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    fe30:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fe34:	2208      	movs	r2, #8
    fe36:	f362 03c6 	bfi	r3, r2, #3, #4
    fe3a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    fe3e:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    fe42:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fe46:	f043 0302 	orr.w	r3, r3, #2
    fe4a:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    fe4e:	e798      	b.n	fd82 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    fe50:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fe54:	f36f 03c6 	bfc	r3, #3, #4
    fe58:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    fe5c:	e791      	b.n	fd82 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    fe5e:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    fe62:	2101      	movs	r1, #1
    fe64:	f361 0202 	bfi	r2, r1, #0, #3
    fe68:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    fe6c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    fe70:	f002 0278 	and.w	r2, r2, #120	; 0x78
    fe74:	2a40      	cmp	r2, #64	; 0x40
    fe76:	f000 80aa 	beq.w	ffce <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    fe7a:	2b63      	cmp	r3, #99	; 0x63
    fe7c:	f000 80ae 	beq.w	ffdc <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    fe80:	f89d 3020 	ldrb.w	r3, [sp, #32]
    fe84:	f3c3 0240 	ubfx	r2, r3, #1, #1
    fe88:	4317      	orrs	r7, r2
    fe8a:	f367 0341 	bfi	r3, r7, #1, #1
    fe8e:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    fe92:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    fe96:	f013 0f01 	tst.w	r3, #1
    fe9a:	f000 80da 	beq.w	10052 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    fe9e:	9b03      	ldr	r3, [sp, #12]
    fea0:	1d1a      	adds	r2, r3, #4
    fea2:	9203      	str	r2, [sp, #12]
    fea4:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    fea6:	2f00      	cmp	r7, #0
    fea8:	f2c0 80cb 	blt.w	10042 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    feac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    feb0:	f013 0f04 	tst.w	r3, #4
    feb4:	f000 80df 	beq.w	10076 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    feb8:	9b03      	ldr	r3, [sp, #12]
    feba:	1d1a      	adds	r2, r3, #4
    febc:	9203      	str	r2, [sp, #12]
    febe:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    fec2:	f1bb 0f00 	cmp.w	fp, #0
    fec6:	f2c0 80cd 	blt.w	10064 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    feca:	2300      	movs	r3, #0
    fecc:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    fece:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    fed0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    fed4:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    fed8:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    fedc:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    fee0:	2b01      	cmp	r3, #1
    fee2:	f000 80d1 	beq.w	10088 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    fee6:	2b02      	cmp	r3, #2
    fee8:	f000 8116 	beq.w	10118 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    feec:	2b04      	cmp	r3, #4
    feee:	f000 8167 	beq.w	101c0 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    fef2:	2b03      	cmp	r3, #3
    fef4:	f000 817e 	beq.w	101f4 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    fef8:	f89d 9020 	ldrb.w	r9, [sp, #32]
    fefc:	f019 0303 	ands.w	r3, r9, #3
    ff00:	9302      	str	r3, [sp, #8]
    ff02:	f040 817d 	bne.w	10200 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    ff06:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    ff0a:	3b25      	subs	r3, #37	; 0x25
    ff0c:	2b53      	cmp	r3, #83	; 0x53
    ff0e:	f200 8233 	bhi.w	10378 <cbvprintf+0x890>
    ff12:	e8df f013 	tbh	[pc, r3, lsl #1]
    ff16:	0181      	.short	0x0181
    ff18:	02310231 	.word	0x02310231
    ff1c:	02310231 	.word	0x02310231
    ff20:	02310231 	.word	0x02310231
    ff24:	02310231 	.word	0x02310231
    ff28:	02310231 	.word	0x02310231
    ff2c:	02310231 	.word	0x02310231
    ff30:	02310231 	.word	0x02310231
    ff34:	02310231 	.word	0x02310231
    ff38:	02310231 	.word	0x02310231
    ff3c:	02310231 	.word	0x02310231
    ff40:	02310231 	.word	0x02310231
    ff44:	02310231 	.word	0x02310231
    ff48:	02310231 	.word	0x02310231
    ff4c:	02310231 	.word	0x02310231
    ff50:	02310231 	.word	0x02310231
    ff54:	02310231 	.word	0x02310231
    ff58:	02310231 	.word	0x02310231
    ff5c:	02310231 	.word	0x02310231
    ff60:	02310231 	.word	0x02310231
    ff64:	02310231 	.word	0x02310231
    ff68:	02310231 	.word	0x02310231
    ff6c:	02310231 	.word	0x02310231
    ff70:	02310231 	.word	0x02310231
    ff74:	02310231 	.word	0x02310231
    ff78:	02310231 	.word	0x02310231
    ff7c:	023101c7 	.word	0x023101c7
    ff80:	02310231 	.word	0x02310231
    ff84:	02310231 	.word	0x02310231
    ff88:	02310231 	.word	0x02310231
    ff8c:	02310231 	.word	0x02310231
    ff90:	01a10231 	.word	0x01a10231
    ff94:	023101ab 	.word	0x023101ab
    ff98:	02310231 	.word	0x02310231
    ff9c:	01ab0231 	.word	0x01ab0231
    ffa0:	02310231 	.word	0x02310231
    ffa4:	02310231 	.word	0x02310231
    ffa8:	01c70208 	.word	0x01c70208
    ffac:	023101ea 	.word	0x023101ea
    ffb0:	018f0231 	.word	0x018f0231
    ffb4:	01c70231 	.word	0x01c70231
    ffb8:	02310231 	.word	0x02310231
    ffbc:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    ffbe:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    ffc2:	2102      	movs	r1, #2
    ffc4:	f361 0202 	bfi	r2, r1, #0, #3
    ffc8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    ffcc:	e74e      	b.n	fe6c <cbvprintf+0x384>
			conv->invalid = true;
    ffce:	f89d 1020 	ldrb.w	r1, [sp, #32]
    ffd2:	f041 0101 	orr.w	r1, r1, #1
    ffd6:	f88d 1020 	strb.w	r1, [sp, #32]
    ffda:	e74e      	b.n	fe7a <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    ffdc:	1e17      	subs	r7, r2, #0
    ffde:	bf18      	it	ne
    ffe0:	2701      	movne	r7, #1
    ffe2:	e74d      	b.n	fe80 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    ffe4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    ffe8:	2204      	movs	r2, #4
    ffea:	f362 0302 	bfi	r3, r2, #0, #3
    ffee:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    fff2:	2701      	movs	r7, #1
			break;
    fff4:	e744      	b.n	fe80 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    fff6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    fffa:	2203      	movs	r2, #3
    fffc:	f362 0302 	bfi	r3, r2, #0, #3
   10000:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   10004:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10008:	f003 0378 	and.w	r3, r3, #120	; 0x78
   1000c:	2b40      	cmp	r3, #64	; 0x40
   1000e:	f47f af37 	bne.w	fe80 <cbvprintf+0x398>
			unsupported = true;
   10012:	2701      	movs	r7, #1
   10014:	e734      	b.n	fe80 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   10016:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1001a:	2203      	movs	r2, #3
   1001c:	f362 0302 	bfi	r3, r2, #0, #3
   10020:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   10024:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10028:	f013 0f78 	tst.w	r3, #120	; 0x78
   1002c:	f43f af28 	beq.w	fe80 <cbvprintf+0x398>
			unsupported = true;
   10030:	2701      	movs	r7, #1
   10032:	e725      	b.n	fe80 <cbvprintf+0x398>
		conv->invalid = true;
   10034:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10038:	f043 0301 	orr.w	r3, r3, #1
   1003c:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   10040:	e71e      	b.n	fe80 <cbvprintf+0x398>
				conv->flag_dash = true;
   10042:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10046:	f043 0304 	orr.w	r3, r3, #4
   1004a:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   1004e:	427f      	negs	r7, r7
   10050:	e72c      	b.n	feac <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   10052:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   10056:	2b00      	cmp	r3, #0
   10058:	db02      	blt.n	10060 <cbvprintf+0x578>
		int width = -1;
   1005a:	f04f 37ff 	mov.w	r7, #4294967295
   1005e:	e725      	b.n	feac <cbvprintf+0x3c4>
			width = conv->width_value;
   10060:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10062:	e723      	b.n	feac <cbvprintf+0x3c4>
				conv->prec_present = false;
   10064:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   10068:	f36f 0341 	bfc	r3, #1, #1
   1006c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   10070:	f04f 3bff 	mov.w	fp, #4294967295
   10074:	e729      	b.n	feca <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   10076:	f013 0f02 	tst.w	r3, #2
   1007a:	d002      	beq.n	10082 <cbvprintf+0x59a>
			precision = conv->prec_value;
   1007c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10080:	e723      	b.n	feca <cbvprintf+0x3e2>
		int precision = -1;
   10082:	f04f 3bff 	mov.w	fp, #4294967295
   10086:	e720      	b.n	feca <cbvprintf+0x3e2>
			switch (length_mod) {
   10088:	1ecb      	subs	r3, r1, #3
   1008a:	2b04      	cmp	r3, #4
   1008c:	d804      	bhi.n	10098 <cbvprintf+0x5b0>
   1008e:	e8df f003 	tbb	[pc, r3]
   10092:	1d0b      	.short	0x1d0b
   10094:	3529      	.short	0x3529
   10096:	35          	.byte	0x35
   10097:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   10098:	9b03      	ldr	r3, [sp, #12]
   1009a:	1d1a      	adds	r2, r3, #4
   1009c:	9203      	str	r2, [sp, #12]
   1009e:	681a      	ldr	r2, [r3, #0]
   100a0:	17d3      	asrs	r3, r2, #31
   100a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   100a6:	e006      	b.n	100b6 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   100a8:	9b03      	ldr	r3, [sp, #12]
   100aa:	1d1a      	adds	r2, r3, #4
   100ac:	9203      	str	r2, [sp, #12]
   100ae:	681a      	ldr	r2, [r3, #0]
   100b0:	17d3      	asrs	r3, r2, #31
   100b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   100b6:	2901      	cmp	r1, #1
   100b8:	d028      	beq.n	1010c <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   100ba:	2902      	cmp	r1, #2
   100bc:	f47f af1c 	bne.w	fef8 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   100c0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   100c4:	17d3      	asrs	r3, r2, #31
   100c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   100ca:	e715      	b.n	fef8 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   100cc:	9b03      	ldr	r3, [sp, #12]
   100ce:	3307      	adds	r3, #7
   100d0:	f023 0307 	bic.w	r3, r3, #7
   100d4:	f103 0208 	add.w	r2, r3, #8
   100d8:	9203      	str	r2, [sp, #12]
   100da:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   100de:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   100e2:	e7e8      	b.n	100b6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   100e4:	9b03      	ldr	r3, [sp, #12]
   100e6:	3307      	adds	r3, #7
   100e8:	f023 0307 	bic.w	r3, r3, #7
   100ec:	f103 0208 	add.w	r2, r3, #8
   100f0:	9203      	str	r2, [sp, #12]
   100f2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   100f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   100fa:	e7dc      	b.n	100b6 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   100fc:	9b03      	ldr	r3, [sp, #12]
   100fe:	1d1a      	adds	r2, r3, #4
   10100:	9203      	str	r2, [sp, #12]
   10102:	681a      	ldr	r2, [r3, #0]
   10104:	17d3      	asrs	r3, r2, #31
				value->sint =
   10106:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1010a:	e7d4      	b.n	100b6 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   1010c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10110:	9306      	str	r3, [sp, #24]
   10112:	2300      	movs	r3, #0
   10114:	9307      	str	r3, [sp, #28]
   10116:	e6ef      	b.n	fef8 <cbvprintf+0x410>
			switch (length_mod) {
   10118:	1ecb      	subs	r3, r1, #3
   1011a:	2b04      	cmp	r3, #4
   1011c:	d804      	bhi.n	10128 <cbvprintf+0x640>
   1011e:	e8df f003 	tbb	[pc, r3]
   10122:	1f0b      	.short	0x1f0b
   10124:	4135      	.short	0x4135
   10126:	41          	.byte	0x41
   10127:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   10128:	9b03      	ldr	r3, [sp, #12]
   1012a:	1d1a      	adds	r2, r3, #4
   1012c:	9203      	str	r2, [sp, #12]
   1012e:	681b      	ldr	r3, [r3, #0]
   10130:	9306      	str	r3, [sp, #24]
   10132:	2300      	movs	r3, #0
   10134:	9307      	str	r3, [sp, #28]
				break;
   10136:	e01e      	b.n	10176 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   10138:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   1013c:	2b63      	cmp	r3, #99	; 0x63
   1013e:	d007      	beq.n	10150 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   10140:	9b03      	ldr	r3, [sp, #12]
   10142:	1d1a      	adds	r2, r3, #4
   10144:	9203      	str	r2, [sp, #12]
   10146:	681b      	ldr	r3, [r3, #0]
   10148:	9306      	str	r3, [sp, #24]
   1014a:	2300      	movs	r3, #0
   1014c:	9307      	str	r3, [sp, #28]
   1014e:	e012      	b.n	10176 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   10150:	9b03      	ldr	r3, [sp, #12]
   10152:	1d1a      	adds	r2, r3, #4
   10154:	9203      	str	r2, [sp, #12]
   10156:	681b      	ldr	r3, [r3, #0]
   10158:	9306      	str	r3, [sp, #24]
   1015a:	2300      	movs	r3, #0
   1015c:	9307      	str	r3, [sp, #28]
   1015e:	e00a      	b.n	10176 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   10160:	9b03      	ldr	r3, [sp, #12]
   10162:	3307      	adds	r3, #7
   10164:	f023 0307 	bic.w	r3, r3, #7
   10168:	f103 0208 	add.w	r2, r3, #8
   1016c:	9203      	str	r2, [sp, #12]
   1016e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   10172:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   10176:	2901      	cmp	r1, #1
   10178:	d01c      	beq.n	101b4 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   1017a:	2902      	cmp	r1, #2
   1017c:	f47f aebc 	bne.w	fef8 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   10180:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10184:	9306      	str	r3, [sp, #24]
   10186:	2300      	movs	r3, #0
   10188:	9307      	str	r3, [sp, #28]
   1018a:	e6b5      	b.n	fef8 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   1018c:	9b03      	ldr	r3, [sp, #12]
   1018e:	3307      	adds	r3, #7
   10190:	f023 0307 	bic.w	r3, r3, #7
   10194:	f103 0208 	add.w	r2, r3, #8
   10198:	9203      	str	r2, [sp, #12]
   1019a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   1019e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   101a2:	e7e8      	b.n	10176 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   101a4:	9b03      	ldr	r3, [sp, #12]
   101a6:	1d1a      	adds	r2, r3, #4
   101a8:	9203      	str	r2, [sp, #12]
   101aa:	681b      	ldr	r3, [r3, #0]
				value->uint =
   101ac:	9306      	str	r3, [sp, #24]
   101ae:	2300      	movs	r3, #0
   101b0:	9307      	str	r3, [sp, #28]
				break;
   101b2:	e7e0      	b.n	10176 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   101b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   101b8:	9306      	str	r3, [sp, #24]
   101ba:	2300      	movs	r3, #0
   101bc:	9307      	str	r3, [sp, #28]
   101be:	e69b      	b.n	fef8 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   101c0:	2908      	cmp	r1, #8
   101c2:	d00b      	beq.n	101dc <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   101c4:	9b03      	ldr	r3, [sp, #12]
   101c6:	3307      	adds	r3, #7
   101c8:	f023 0307 	bic.w	r3, r3, #7
   101cc:	f103 0208 	add.w	r2, r3, #8
   101d0:	9203      	str	r2, [sp, #12]
   101d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   101d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   101da:	e68d      	b.n	fef8 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   101dc:	9b03      	ldr	r3, [sp, #12]
   101de:	3307      	adds	r3, #7
   101e0:	f023 0307 	bic.w	r3, r3, #7
   101e4:	f103 0208 	add.w	r2, r3, #8
   101e8:	9203      	str	r2, [sp, #12]
   101ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   101ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
   101f2:	e681      	b.n	fef8 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   101f4:	9b03      	ldr	r3, [sp, #12]
   101f6:	1d1a      	adds	r2, r3, #4
   101f8:	9203      	str	r2, [sp, #12]
   101fa:	681b      	ldr	r3, [r3, #0]
   101fc:	9306      	str	r3, [sp, #24]
   101fe:	e67b      	b.n	fef8 <cbvprintf+0x410>
			OUTS(sp, fp);
   10200:	4643      	mov	r3, r8
   10202:	4652      	mov	r2, sl
   10204:	4629      	mov	r1, r5
   10206:	4630      	mov	r0, r6
   10208:	f00d f833 	bl	1d272 <outs>
   1020c:	2800      	cmp	r0, #0
   1020e:	f2c0 814f 	blt.w	104b0 <cbvprintf+0x9c8>
   10212:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   10214:	46c2      	mov	sl, r8
			continue;
   10216:	e46f      	b.n	faf8 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   10218:	4629      	mov	r1, r5
   1021a:	2025      	movs	r0, #37	; 0x25
   1021c:	47b0      	blx	r6
   1021e:	2800      	cmp	r0, #0
   10220:	f2c0 8146 	blt.w	104b0 <cbvprintf+0x9c8>
   10224:	3401      	adds	r4, #1
		char sign = 0;
   10226:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   1022a:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1022e:	f04f 0a00 	mov.w	sl, #0
			break;
   10232:	e0a7      	b.n	10384 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   10234:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   10238:	f1bb 0f00 	cmp.w	fp, #0
   1023c:	db08      	blt.n	10250 <cbvprintf+0x768>
				len = strnlen(bps, precision);
   1023e:	4659      	mov	r1, fp
   10240:	4650      	mov	r0, sl
   10242:	f00d fdc5 	bl	1ddd0 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   10246:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   1024a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   1024e:	e099      	b.n	10384 <cbvprintf+0x89c>
				len = strlen(bps);
   10250:	4650      	mov	r0, sl
   10252:	f00d fdb5 	bl	1ddc0 <strlen>
   10256:	e7f6      	b.n	10246 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   10258:	9b06      	ldr	r3, [sp, #24]
   1025a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   1025e:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   10262:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   10266:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   1026a:	e08b      	b.n	10384 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   1026c:	f019 0f08 	tst.w	r9, #8
   10270:	d105      	bne.n	1027e <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   10272:	f019 0910 	ands.w	r9, r9, #16
   10276:	d004      	beq.n	10282 <cbvprintf+0x79a>
				sign = ' ';
   10278:	f04f 0920 	mov.w	r9, #32
   1027c:	e001      	b.n	10282 <cbvprintf+0x79a>
				sign = '+';
   1027e:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   10282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   10286:	2a00      	cmp	r2, #0
   10288:	f173 0100 	sbcs.w	r1, r3, #0
   1028c:	db02      	blt.n	10294 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   1028e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10292:	e009      	b.n	102a8 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   10294:	4252      	negs	r2, r2
   10296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1029a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   1029e:	f04f 092d 	mov.w	r9, #45	; 0x2d
   102a2:	e001      	b.n	102a8 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   102a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   102a8:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   102ac:	9300      	str	r3, [sp, #0]
   102ae:	ab0c      	add	r3, sp, #48	; 0x30
   102b0:	aa08      	add	r2, sp, #32
   102b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   102b6:	f00c ff72 	bl	1d19e <encode_uint>
   102ba:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   102bc:	f1bb 0f00 	cmp.w	fp, #0
   102c0:	f2c0 8090 	blt.w	103e4 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   102c4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   102c8:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   102cc:	f89d 2020 	ldrb.w	r2, [sp, #32]
   102d0:	f36f 1286 	bfc	r2, #6, #1
   102d4:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   102d8:	459b      	cmp	fp, r3
   102da:	f240 8086 	bls.w	103ea <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   102de:	ebab 0303 	sub.w	r3, fp, r3
   102e2:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   102e4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   102e8:	e04c      	b.n	10384 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   102ea:	9806      	ldr	r0, [sp, #24]
   102ec:	b930      	cbnz	r0, 102fc <cbvprintf+0x814>
		char sign = 0;
   102ee:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   102f2:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 104b8 <cbvprintf+0x9d0>
			bps = "(nil)";
   102f6:	f1ab 0a05 	sub.w	sl, fp, #5
   102fa:	e043      	b.n	10384 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   102fc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   10300:	9300      	str	r3, [sp, #0]
   10302:	ab0c      	add	r3, sp, #48	; 0x30
   10304:	aa08      	add	r2, sp, #32
   10306:	2100      	movs	r1, #0
   10308:	f00c ff49 	bl	1d19e <encode_uint>
   1030c:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1030e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10312:	f043 0310 	orr.w	r3, r3, #16
   10316:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   1031a:	2378      	movs	r3, #120	; 0x78
   1031c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   10320:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   10324:	e7ca      	b.n	102bc <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   10326:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   10328:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1032c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   10330:	2b07      	cmp	r3, #7
   10332:	d806      	bhi.n	10342 <cbvprintf+0x85a>
   10334:	e8df f003 	tbb	[pc, r3]
   10338:	100e0c04 	.word	0x100e0c04
   1033c:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   10340:	6014      	str	r4, [r2, #0]
		char sign = 0;
   10342:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   10346:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1034a:	f04f 0a00 	mov.w	sl, #0
}
   1034e:	e019      	b.n	10384 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   10350:	7014      	strb	r4, [r2, #0]
		break;
   10352:	e7f6      	b.n	10342 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   10354:	8014      	strh	r4, [r2, #0]
		break;
   10356:	e7f4      	b.n	10342 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   10358:	6014      	str	r4, [r2, #0]
		break;
   1035a:	e7f2      	b.n	10342 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   1035c:	4620      	mov	r0, r4
   1035e:	17e1      	asrs	r1, r4, #31
   10360:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   10364:	e7ed      	b.n	10342 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   10366:	4620      	mov	r0, r4
   10368:	17e1      	asrs	r1, r4, #31
   1036a:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   1036e:	e7e8      	b.n	10342 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   10370:	6014      	str	r4, [r2, #0]
		break;
   10372:	e7e6      	b.n	10342 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   10374:	6014      	str	r4, [r2, #0]
		break;
   10376:	e7e4      	b.n	10342 <cbvprintf+0x85a>
		switch (conv->specifier) {
   10378:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1037c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   10380:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   10384:	f1ba 0f00 	cmp.w	sl, #0
   10388:	f000 808e 	beq.w	104a8 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   1038c:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   10390:	f1b9 0f00 	cmp.w	r9, #0
   10394:	d000      	beq.n	10398 <cbvprintf+0x8b0>
			nj_len += 1U;
   10396:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   10398:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   1039c:	f011 0f10 	tst.w	r1, #16
   103a0:	d026      	beq.n	103f0 <cbvprintf+0x908>
			nj_len += 2U;
   103a2:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   103a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103a6:	4413      	add	r3, r2
		if (conv->pad_fp) {
   103a8:	f011 0f40 	tst.w	r1, #64	; 0x40
   103ac:	d001      	beq.n	103b2 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   103ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103b0:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   103b2:	2f00      	cmp	r7, #0
   103b4:	dd32      	ble.n	1041c <cbvprintf+0x934>
			width -= (int)nj_len;
   103b6:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   103b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   103bc:	f013 0f04 	tst.w	r3, #4
   103c0:	d12c      	bne.n	1041c <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   103c2:	f013 0f40 	tst.w	r3, #64	; 0x40
   103c6:	d018      	beq.n	103fa <cbvprintf+0x912>
					if (sign != 0) {
   103c8:	f1b9 0f00 	cmp.w	r9, #0
   103cc:	d018      	beq.n	10400 <cbvprintf+0x918>
						OUTC(sign);
   103ce:	4629      	mov	r1, r5
   103d0:	4648      	mov	r0, r9
   103d2:	47b0      	blx	r6
   103d4:	2800      	cmp	r0, #0
   103d6:	db6b      	blt.n	104b0 <cbvprintf+0x9c8>
   103d8:	3401      	adds	r4, #1
						sign = 0;
   103da:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   103de:	2330      	movs	r3, #48	; 0x30
   103e0:	9302      	str	r3, [sp, #8]
   103e2:	e00f      	b.n	10404 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   103e4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   103e8:	e7cc      	b.n	10384 <cbvprintf+0x89c>
   103ea:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   103ee:	e7c9      	b.n	10384 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   103f0:	f011 0f08 	tst.w	r1, #8
   103f4:	d0d6      	beq.n	103a4 <cbvprintf+0x8bc>
			nj_len += 1U;
   103f6:	3201      	adds	r2, #1
   103f8:	e7d4      	b.n	103a4 <cbvprintf+0x8bc>
				char pad = ' ';
   103fa:	2320      	movs	r3, #32
   103fc:	9302      	str	r3, [sp, #8]
   103fe:	e001      	b.n	10404 <cbvprintf+0x91c>
					pad = '0';
   10400:	2330      	movs	r3, #48	; 0x30
   10402:	9302      	str	r3, [sp, #8]
   10404:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   10406:	1e5f      	subs	r7, r3, #1
   10408:	2b00      	cmp	r3, #0
   1040a:	dd07      	ble.n	1041c <cbvprintf+0x934>
					OUTC(pad);
   1040c:	4629      	mov	r1, r5
   1040e:	9802      	ldr	r0, [sp, #8]
   10410:	47b0      	blx	r6
   10412:	2800      	cmp	r0, #0
   10414:	db4c      	blt.n	104b0 <cbvprintf+0x9c8>
   10416:	3401      	adds	r4, #1
				while (width-- > 0) {
   10418:	463b      	mov	r3, r7
   1041a:	e7f4      	b.n	10406 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   1041c:	f1b9 0f00 	cmp.w	r9, #0
   10420:	d005      	beq.n	1042e <cbvprintf+0x946>
			OUTC(sign);
   10422:	4629      	mov	r1, r5
   10424:	4648      	mov	r0, r9
   10426:	47b0      	blx	r6
   10428:	2800      	cmp	r0, #0
   1042a:	db41      	blt.n	104b0 <cbvprintf+0x9c8>
   1042c:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1042e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   10432:	f3c3 1200 	ubfx	r2, r3, #4, #1
   10436:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1043a:	4313      	orrs	r3, r2
   1043c:	d005      	beq.n	1044a <cbvprintf+0x962>
				OUTC('0');
   1043e:	4629      	mov	r1, r5
   10440:	2030      	movs	r0, #48	; 0x30
   10442:	47b0      	blx	r6
   10444:	2800      	cmp	r0, #0
   10446:	db33      	blt.n	104b0 <cbvprintf+0x9c8>
   10448:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   1044a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1044e:	f013 0f10 	tst.w	r3, #16
   10452:	d006      	beq.n	10462 <cbvprintf+0x97a>
				OUTC(conv->specifier);
   10454:	4629      	mov	r1, r5
   10456:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   1045a:	47b0      	blx	r6
   1045c:	2800      	cmp	r0, #0
   1045e:	db27      	blt.n	104b0 <cbvprintf+0x9c8>
   10460:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   10462:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   10464:	f103 39ff 	add.w	r9, r3, #4294967295
   10468:	2b00      	cmp	r3, #0
   1046a:	dd07      	ble.n	1047c <cbvprintf+0x994>
				OUTC('0');
   1046c:	4629      	mov	r1, r5
   1046e:	2030      	movs	r0, #48	; 0x30
   10470:	47b0      	blx	r6
   10472:	2800      	cmp	r0, #0
   10474:	db1c      	blt.n	104b0 <cbvprintf+0x9c8>
   10476:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   10478:	464b      	mov	r3, r9
   1047a:	e7f3      	b.n	10464 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   1047c:	465b      	mov	r3, fp
   1047e:	4652      	mov	r2, sl
   10480:	4629      	mov	r1, r5
   10482:	4630      	mov	r0, r6
   10484:	f00c fef5 	bl	1d272 <outs>
   10488:	2800      	cmp	r0, #0
   1048a:	db11      	blt.n	104b0 <cbvprintf+0x9c8>
   1048c:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   1048e:	2f00      	cmp	r7, #0
   10490:	dd07      	ble.n	104a2 <cbvprintf+0x9ba>
			OUTC(' ');
   10492:	4629      	mov	r1, r5
   10494:	2020      	movs	r0, #32
   10496:	47b0      	blx	r6
   10498:	2800      	cmp	r0, #0
   1049a:	db09      	blt.n	104b0 <cbvprintf+0x9c8>
   1049c:	3401      	adds	r4, #1
			--width;
   1049e:	3f01      	subs	r7, #1
   104a0:	e7f5      	b.n	1048e <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   104a2:	46c2      	mov	sl, r8
   104a4:	f7ff bb28 	b.w	faf8 <cbvprintf+0x10>
   104a8:	46c2      	mov	sl, r8
   104aa:	f7ff bb25 	b.w	faf8 <cbvprintf+0x10>
		}
	}

	return count;
   104ae:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   104b0:	b013      	add	sp, #76	; 0x4c
   104b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104b6:	bf00      	nop
   104b8:	0002242d 	.word	0x0002242d

000104bc <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   104bc:	4b05      	ldr	r3, [pc, #20]	; (104d4 <is_rodata+0x18>)
   104be:	4298      	cmp	r0, r3
   104c0:	d304      	bcc.n	104cc <is_rodata+0x10>
   104c2:	4b05      	ldr	r3, [pc, #20]	; (104d8 <is_rodata+0x1c>)
   104c4:	4298      	cmp	r0, r3
   104c6:	d303      	bcc.n	104d0 <is_rodata+0x14>
   104c8:	2000      	movs	r0, #0
   104ca:	4770      	bx	lr
   104cc:	2000      	movs	r0, #0
   104ce:	4770      	bx	lr
   104d0:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   104d2:	4770      	bx	lr
   104d4:	00021c84 	.word	0x00021c84
   104d8:	000243b8 	.word	0x000243b8

000104dc <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   104dc:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   104de:	4b06      	ldr	r3, [pc, #24]	; (104f8 <thread_set+0x1c>)
   104e0:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   104e2:	b118      	cbz	r0, 104ec <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   104e4:	4b05      	ldr	r3, [pc, #20]	; (104fc <thread_set+0x20>)
   104e6:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   104e8:	2b09      	cmp	r3, #9
   104ea:	dc00      	bgt.n	104ee <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   104ec:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   104ee:	4804      	ldr	r0, [pc, #16]	; (10500 <thread_set+0x24>)
   104f0:	f00a fdb4 	bl	1b05c <z_impl_k_sem_give>
}
   104f4:	e7fa      	b.n	104ec <thread_set+0x10>
   104f6:	bf00      	nop
   104f8:	20001e40 	.word	0x20001e40
   104fc:	20001e10 	.word	0x20001e10
   10500:	2000071c 	.word	0x2000071c

00010504 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   10504:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   10506:	4802      	ldr	r0, [pc, #8]	; (10510 <log_process_thread_timer_expiry_fn+0xc>)
   10508:	f00a fda8 	bl	1b05c <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   1050c:	bd08      	pop	{r3, pc}
   1050e:	bf00      	nop
   10510:	2000071c 	.word	0x2000071c

00010514 <next_pending>:
{
   10514:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   10516:	4803      	ldr	r0, [pc, #12]	; (10524 <next_pending+0x10>)
   10518:	f00c fed4 	bl	1d2c4 <log_list_head_peek>
}
   1051c:	3800      	subs	r0, #0
   1051e:	bf18      	it	ne
   10520:	2001      	movne	r0, #1
   10522:	bd08      	pop	{r3, pc}
   10524:	20001e1c 	.word	0x20001e1c

00010528 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   10528:	b530      	push	{r4, r5, lr}
   1052a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1052c:	2200      	movs	r2, #0
   1052e:	490f      	ldr	r1, [pc, #60]	; (1056c <enable_logger+0x44>)
   10530:	480f      	ldr	r0, [pc, #60]	; (10570 <enable_logger+0x48>)
   10532:	f011 fabd 	bl	21ab0 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10536:	4d0f      	ldr	r5, [pc, #60]	; (10574 <enable_logger+0x4c>)
   10538:	2200      	movs	r2, #0
   1053a:	2300      	movs	r3, #0
   1053c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   10540:	2400      	movs	r4, #0
   10542:	9404      	str	r4, [sp, #16]
   10544:	230e      	movs	r3, #14
   10546:	9303      	str	r3, [sp, #12]
   10548:	9402      	str	r4, [sp, #8]
   1054a:	9401      	str	r4, [sp, #4]
   1054c:	9400      	str	r4, [sp, #0]
   1054e:	4b0a      	ldr	r3, [pc, #40]	; (10578 <enable_logger+0x50>)
   10550:	f44f 7240 	mov.w	r2, #768	; 0x300
   10554:	4909      	ldr	r1, [pc, #36]	; (1057c <enable_logger+0x54>)
   10556:	4628      	mov	r0, r5
   10558:	f010 fdec 	bl	21134 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1055c:	4908      	ldr	r1, [pc, #32]	; (10580 <enable_logger+0x58>)
   1055e:	4628      	mov	r0, r5
   10560:	f00a fb8e 	bl	1ac80 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   10564:	4620      	mov	r0, r4
   10566:	b009      	add	sp, #36	; 0x24
   10568:	bd30      	pop	{r4, r5, pc}
   1056a:	bf00      	nop
   1056c:	00010505 	.word	0x00010505
   10570:	20001480 	.word	0x20001480
   10574:	200014b8 	.word	0x200014b8
   10578:	00010c59 	.word	0x00010c59
   1057c:	200031c0 	.word	0x200031c0
   10580:	00022430 	.word	0x00022430

00010584 <log_core_init>:
{
   10584:	b508      	push	{r3, lr}
	panic_mode = false;
   10586:	2300      	movs	r3, #0
   10588:	4a0b      	ldr	r2, [pc, #44]	; (105b8 <log_core_init+0x34>)
   1058a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   1058c:	4a0b      	ldr	r2, [pc, #44]	; (105bc <log_core_init+0x38>)
   1058e:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
   10590:	4b0b      	ldr	r3, [pc, #44]	; (105c0 <log_core_init+0x3c>)
   10592:	4a0c      	ldr	r2, [pc, #48]	; (105c4 <log_core_init+0x40>)
   10594:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   10596:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1059a:	f000 fddd 	bl	11158 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   1059e:	f000 fbc1 	bl	10d24 <log_msg_pool_init>
		log_list_init(&list);
   105a2:	4809      	ldr	r0, [pc, #36]	; (105c8 <log_core_init+0x44>)
   105a4:	f00c fe80 	bl	1d2a8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   105a8:	2308      	movs	r3, #8
   105aa:	2248      	movs	r2, #72	; 0x48
   105ac:	4907      	ldr	r1, [pc, #28]	; (105cc <log_core_init+0x48>)
   105ae:	4808      	ldr	r0, [pc, #32]	; (105d0 <log_core_init+0x4c>)
   105b0:	f010 fd5d 	bl	2106e <k_mem_slab_init>
}
   105b4:	bd08      	pop	{r3, pc}
   105b6:	bf00      	nop
   105b8:	2000319f 	.word	0x2000319f
   105bc:	20001e14 	.word	0x20001e14
   105c0:	20000524 	.word	0x20000524
   105c4:	0001d2dd 	.word	0x0001d2dd
   105c8:	20001e1c 	.word	0x20001e1c
   105cc:	20005e68 	.word	0x20005e68
   105d0:	20001e24 	.word	0x20001e24

000105d4 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   105d4:	4b18      	ldr	r3, [pc, #96]	; (10638 <log_init+0x64>)
   105d6:	f3bf 8f5b 	dmb	ish
   105da:	e853 2f00 	ldrex	r2, [r3]
   105de:	1c51      	adds	r1, r2, #1
   105e0:	e843 1000 	strex	r0, r1, [r3]
   105e4:	2800      	cmp	r0, #0
   105e6:	d1f8      	bne.n	105da <log_init+0x6>
   105e8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   105ec:	bb1a      	cbnz	r2, 10636 <log_init+0x62>
{
   105ee:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   105f0:	2400      	movs	r4, #0
   105f2:	e009      	b.n	10608 <log_init+0x34>
					   backend->cb->ctx,
   105f4:	4b11      	ldr	r3, [pc, #68]	; (1063c <log_init+0x68>)
   105f6:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   105fa:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   105fc:	2204      	movs	r2, #4
   105fe:	6819      	ldr	r1, [r3, #0]
   10600:	4628      	mov	r0, r5
   10602:	f000 fb6d 	bl	10ce0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   10606:	3401      	adds	r4, #1
   10608:	4b0d      	ldr	r3, [pc, #52]	; (10640 <log_init+0x6c>)
   1060a:	4a0c      	ldr	r2, [pc, #48]	; (1063c <log_init+0x68>)
   1060c:	1a9b      	subs	r3, r3, r2
   1060e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10612:	da0f      	bge.n	10634 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   10614:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   10616:	4d09      	ldr	r5, [pc, #36]	; (1063c <log_init+0x68>)
   10618:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   1061c:	7b2b      	ldrb	r3, [r5, #12]
   1061e:	2b00      	cmp	r3, #0
   10620:	d0f1      	beq.n	10606 <log_init+0x32>
			if (backend->api->init != NULL) {
   10622:	0123      	lsls	r3, r4, #4
   10624:	4a05      	ldr	r2, [pc, #20]	; (1063c <log_init+0x68>)
   10626:	58d3      	ldr	r3, [r2, r3]
   10628:	699b      	ldr	r3, [r3, #24]
   1062a:	2b00      	cmp	r3, #0
   1062c:	d0e2      	beq.n	105f4 <log_init+0x20>
				backend->api->init(backend);
   1062e:	4628      	mov	r0, r5
   10630:	4798      	blx	r3
   10632:	e7df      	b.n	105f4 <log_init+0x20>
}
   10634:	bd70      	pop	{r4, r5, r6, pc}
   10636:	4770      	bx	lr
   10638:	20001e18 	.word	0x20001e18
   1063c:	0002203c 	.word	0x0002203c
   10640:	0002205c 	.word	0x0002205c

00010644 <get_msg>:
{
   10644:	b510      	push	{r4, lr}
   10646:	f04f 0340 	mov.w	r3, #64	; 0x40
   1064a:	f3ef 8411 	mrs	r4, BASEPRI
   1064e:	f383 8812 	msr	BASEPRI_MAX, r3
   10652:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   10656:	4804      	ldr	r0, [pc, #16]	; (10668 <get_msg+0x24>)
   10658:	f00c fe36 	bl	1d2c8 <log_list_head_get>
	__asm__ volatile(
   1065c:	f384 8811 	msr	BASEPRI, r4
   10660:	f3bf 8f6f 	isb	sy
}
   10664:	bd10      	pop	{r4, pc}
   10666:	bf00      	nop
   10668:	20001e1c 	.word	0x20001e1c

0001066c <z_log_notify_backend_enabled>:
{
   1066c:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1066e:	4b05      	ldr	r3, [pc, #20]	; (10684 <z_log_notify_backend_enabled+0x18>)
   10670:	781b      	ldrb	r3, [r3, #0]
   10672:	b11b      	cbz	r3, 1067c <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   10674:	4b03      	ldr	r3, [pc, #12]	; (10684 <z_log_notify_backend_enabled+0x18>)
   10676:	2201      	movs	r2, #1
   10678:	701a      	strb	r2, [r3, #0]
}
   1067a:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   1067c:	4802      	ldr	r0, [pc, #8]	; (10688 <z_log_notify_backend_enabled+0x1c>)
   1067e:	f00a fced 	bl	1b05c <z_impl_k_sem_give>
}
   10682:	e7f7      	b.n	10674 <z_log_notify_backend_enabled+0x8>
   10684:	2000319e 	.word	0x2000319e
   10688:	2000071c 	.word	0x2000071c

0001068c <z_log_dropped>:
   1068c:	4b0c      	ldr	r3, [pc, #48]	; (106c0 <z_log_dropped+0x34>)
   1068e:	f3bf 8f5b 	dmb	ish
   10692:	e853 2f00 	ldrex	r2, [r3]
   10696:	3201      	adds	r2, #1
   10698:	e843 2100 	strex	r1, r2, [r3]
   1069c:	2900      	cmp	r1, #0
   1069e:	d1f8      	bne.n	10692 <z_log_dropped+0x6>
   106a0:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   106a4:	4b07      	ldr	r3, [pc, #28]	; (106c4 <z_log_dropped+0x38>)
   106a6:	f3bf 8f5b 	dmb	ish
   106aa:	e853 2f00 	ldrex	r2, [r3]
   106ae:	3a01      	subs	r2, #1
   106b0:	e843 2100 	strex	r1, r2, [r3]
   106b4:	2900      	cmp	r1, #0
   106b6:	d1f8      	bne.n	106aa <z_log_dropped+0x1e>
   106b8:	f3bf 8f5b 	dmb	ish
}
   106bc:	4770      	bx	lr
   106be:	bf00      	nop
   106c0:	20001e14 	.word	0x20001e14
   106c4:	20001e10 	.word	0x20001e10

000106c8 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   106c8:	4b06      	ldr	r3, [pc, #24]	; (106e4 <z_log_dropped_read_and_clear+0x1c>)
}
   106ca:	2000      	movs	r0, #0
   106cc:	4602      	mov	r2, r0
   106ce:	f3bf 8f5b 	dmb	ish
   106d2:	e853 0f00 	ldrex	r0, [r3]
   106d6:	e843 2100 	strex	r1, r2, [r3]
   106da:	2900      	cmp	r1, #0
   106dc:	d1f9      	bne.n	106d2 <z_log_dropped_read_and_clear+0xa>
   106de:	f3bf 8f5b 	dmb	ish
   106e2:	4770      	bx	lr
   106e4:	20001e14 	.word	0x20001e14

000106e8 <dropped_notify>:
{
   106e8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   106ea:	f7ff ffed 	bl	106c8 <z_log_dropped_read_and_clear>
   106ee:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   106f0:	2400      	movs	r4, #0
   106f2:	e000      	b.n	106f6 <dropped_notify+0xe>
   106f4:	3401      	adds	r4, #1
   106f6:	4b0b      	ldr	r3, [pc, #44]	; (10724 <dropped_notify+0x3c>)
   106f8:	4a0b      	ldr	r2, [pc, #44]	; (10728 <dropped_notify+0x40>)
   106fa:	1a9b      	subs	r3, r3, r2
   106fc:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10700:	da0f      	bge.n	10722 <dropped_notify+0x3a>
   10702:	4809      	ldr	r0, [pc, #36]	; (10728 <dropped_notify+0x40>)
   10704:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   10708:	6843      	ldr	r3, [r0, #4]
   1070a:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   1070c:	2b00      	cmp	r3, #0
   1070e:	d0f1      	beq.n	106f4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   10710:	0123      	lsls	r3, r4, #4
   10712:	4a05      	ldr	r2, [pc, #20]	; (10728 <dropped_notify+0x40>)
   10714:	58d3      	ldr	r3, [r2, r3]
   10716:	691b      	ldr	r3, [r3, #16]
   10718:	2b00      	cmp	r3, #0
   1071a:	d0eb      	beq.n	106f4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   1071c:	4629      	mov	r1, r5
   1071e:	4798      	blx	r3
   10720:	e7e8      	b.n	106f4 <dropped_notify+0xc>
}
   10722:	bd38      	pop	{r3, r4, r5, pc}
   10724:	0002205c 	.word	0x0002205c
   10728:	0002203c 	.word	0x0002203c

0001072c <z_log_dropped_pending>:
	return dropped_cnt > 0;
   1072c:	4b03      	ldr	r3, [pc, #12]	; (1073c <z_log_dropped_pending+0x10>)
   1072e:	6818      	ldr	r0, [r3, #0]
}
   10730:	2800      	cmp	r0, #0
   10732:	bfd4      	ite	le
   10734:	2000      	movle	r0, #0
   10736:	2001      	movgt	r0, #1
   10738:	4770      	bx	lr
   1073a:	bf00      	nop
   1073c:	20001e14 	.word	0x20001e14

00010740 <z_log_strdup>:
{
   10740:	b510      	push	{r4, lr}
   10742:	b082      	sub	sp, #8
   10744:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   10746:	f7ff feb9 	bl	104bc <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1074a:	bb10      	cbnz	r0, 10792 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   1074c:	2200      	movs	r2, #0
   1074e:	2300      	movs	r3, #0
   10750:	a901      	add	r1, sp, #4
   10752:	4811      	ldr	r0, [pc, #68]	; (10798 <z_log_strdup+0x58>)
   10754:	f00a fa3e 	bl	1abd4 <k_mem_slab_alloc>
	if (err != 0) {
   10758:	b108      	cbz	r0, 1075e <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   1075a:	4c10      	ldr	r4, [pc, #64]	; (1079c <z_log_strdup+0x5c>)
   1075c:	e019      	b.n	10792 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   1075e:	9b01      	ldr	r3, [sp, #4]
   10760:	2201      	movs	r2, #1
   10762:	f3bf 8f5b 	dmb	ish
   10766:	e853 1f00 	ldrex	r1, [r3]
   1076a:	e843 2000 	strex	r0, r2, [r3]
   1076e:	2800      	cmp	r0, #0
   10770:	d1f9      	bne.n	10766 <z_log_strdup+0x26>
   10772:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   10776:	2241      	movs	r2, #65	; 0x41
   10778:	4621      	mov	r1, r4
   1077a:	9801      	ldr	r0, [sp, #4]
   1077c:	3004      	adds	r0, #4
   1077e:	f00d fb05 	bl	1dd8c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   10782:	9c01      	ldr	r4, [sp, #4]
   10784:	237e      	movs	r3, #126	; 0x7e
   10786:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1078a:	2300      	movs	r3, #0
   1078c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
   10790:	3404      	adds	r4, #4
}
   10792:	4620      	mov	r0, r4
   10794:	b002      	add	sp, #8
   10796:	bd10      	pop	{r4, pc}
   10798:	20001e24 	.word	0x20001e24
   1079c:	00022438 	.word	0x00022438

000107a0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   107a0:	b140      	cbz	r0, 107b4 <log_is_strdup+0x14>
   107a2:	4a07      	ldr	r2, [pc, #28]	; (107c0 <log_is_strdup+0x20>)
   107a4:	4290      	cmp	r0, r2
   107a6:	d307      	bcc.n	107b8 <log_is_strdup+0x18>
   107a8:	f502 7210 	add.w	r2, r2, #576	; 0x240
   107ac:	4290      	cmp	r0, r2
   107ae:	d305      	bcc.n	107bc <log_is_strdup+0x1c>
   107b0:	2000      	movs	r0, #0
   107b2:	4770      	bx	lr
   107b4:	2000      	movs	r0, #0
   107b6:	4770      	bx	lr
   107b8:	2000      	movs	r0, #0
   107ba:	4770      	bx	lr
   107bc:	2001      	movs	r0, #1
}
   107be:	4770      	bx	lr
   107c0:	20005e68 	.word	0x20005e68

000107c4 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   107c4:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   107c6:	f013 0f01 	tst.w	r3, #1
   107ca:	d000      	beq.n	107ce <detect_missed_strdup+0xa>
   107cc:	4770      	bx	lr
{
   107ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   107d2:	b083      	sub	sp, #12
   107d4:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   107d6:	f00c fe62 	bl	1d49e <log_msg_str_get>
   107da:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   107dc:	4630      	mov	r0, r6
   107de:	f00c fe49 	bl	1d474 <log_msg_nargs_get>
   107e2:	4601      	mov	r1, r0
   107e4:	4638      	mov	r0, r7
   107e6:	f00c fd7d 	bl	1d2e4 <z_log_get_s_mask>
   107ea:	4605      	mov	r5, r0
	while (mask) {
   107ec:	e004      	b.n	107f8 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   107ee:	2301      	movs	r3, #1
   107f0:	fa03 f404 	lsl.w	r4, r3, r4
   107f4:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   107f8:	b36d      	cbz	r5, 10856 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   107fa:	fab5 f485 	clz	r4, r5
   107fe:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   10802:	4621      	mov	r1, r4
   10804:	4630      	mov	r0, r6
   10806:	f00c fe38 	bl	1d47a <log_msg_arg_get>
   1080a:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1080c:	f7ff fe56 	bl	104bc <is_rodata>
   10810:	2800      	cmp	r0, #0
   10812:	d1ec      	bne.n	107ee <detect_missed_strdup+0x2a>
   10814:	4648      	mov	r0, r9
   10816:	f7ff ffc3 	bl	107a0 <log_is_strdup>
   1081a:	2800      	cmp	r0, #0
   1081c:	d1e7      	bne.n	107ee <detect_missed_strdup+0x2a>
   1081e:	4b0f      	ldr	r3, [pc, #60]	; (1085c <detect_missed_strdup+0x98>)
   10820:	4599      	cmp	r9, r3
   10822:	d0e4      	beq.n	107ee <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   10824:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   10826:	f3c1 1189 	ubfx	r1, r1, #6, #10
   1082a:	f000 fa49 	bl	10cc0 <log_source_name_get>
   1082e:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   10830:	4b0b      	ldr	r3, [pc, #44]	; (10860 <detect_missed_strdup+0x9c>)
   10832:	490c      	ldr	r1, [pc, #48]	; (10864 <detect_missed_strdup+0xa0>)
   10834:	1a5b      	subs	r3, r3, r1
   10836:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   10838:	2101      	movs	r1, #1
   1083a:	f361 0802 	bfi	r8, r1, #0, #3
   1083e:	f36f 08c5 	bfc	r8, #3, #3
   10842:	f363 188f 	bfi	r8, r3, #6, #10
   10846:	f8ad 8000 	strh.w	r8, [sp]
   1084a:	463b      	mov	r3, r7
   1084c:	4621      	mov	r1, r4
   1084e:	4806      	ldr	r0, [pc, #24]	; (10868 <detect_missed_strdup+0xa4>)
   10850:	f000 f8b2 	bl	109b8 <log_3>
   10854:	e7cb      	b.n	107ee <detect_missed_strdup+0x2a>
}
   10856:	b003      	add	sp, #12
   10858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1085c:	00022438 	.word	0x00022438
   10860:	00021fe4 	.word	0x00021fe4
   10864:	00021f84 	.word	0x00021f84
   10868:	00022454 	.word	0x00022454

0001086c <msg_process>:
{
   1086c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1086e:	4606      	mov	r6, r0
	if (!bypass) {
   10870:	bb19      	cbnz	r1, 108ba <msg_process+0x4e>
		    !panic_mode) {
   10872:	4b14      	ldr	r3, [pc, #80]	; (108c4 <msg_process+0x58>)
   10874:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   10876:	b10b      	cbz	r3, 1087c <msg_process+0x10>
{
   10878:	2400      	movs	r4, #0
   1087a:	e003      	b.n	10884 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   1087c:	f7ff ffa2 	bl	107c4 <detect_missed_strdup>
   10880:	e7fa      	b.n	10878 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   10882:	3401      	adds	r4, #1
   10884:	4b10      	ldr	r3, [pc, #64]	; (108c8 <msg_process+0x5c>)
   10886:	4a11      	ldr	r2, [pc, #68]	; (108cc <msg_process+0x60>)
   10888:	1a9b      	subs	r3, r3, r2
   1088a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   1088e:	da14      	bge.n	108ba <msg_process+0x4e>
	return &__log_backends_start[idx];
   10890:	4d0e      	ldr	r5, [pc, #56]	; (108cc <msg_process+0x60>)
   10892:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   10896:	686b      	ldr	r3, [r5, #4]
   10898:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   1089a:	2b00      	cmp	r3, #0
   1089c:	d0f1      	beq.n	10882 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   1089e:	4631      	mov	r1, r6
   108a0:	4628      	mov	r0, r5
   108a2:	f00c fd19 	bl	1d2d8 <msg_filter_check>
			if (log_backend_is_active(backend) &&
   108a6:	2800      	cmp	r0, #0
   108a8:	d0eb      	beq.n	10882 <msg_process+0x16>
	backend->api->put(backend, msg);
   108aa:	0127      	lsls	r7, r4, #4
   108ac:	4b07      	ldr	r3, [pc, #28]	; (108cc <msg_process+0x60>)
   108ae:	59db      	ldr	r3, [r3, r7]
   108b0:	685b      	ldr	r3, [r3, #4]
   108b2:	4631      	mov	r1, r6
   108b4:	4628      	mov	r0, r5
   108b6:	4798      	blx	r3
}
   108b8:	e7e3      	b.n	10882 <msg_process+0x16>
			log_msg_put(msg.msg);
   108ba:	4630      	mov	r0, r6
   108bc:	f00c fdf1 	bl	1d4a2 <log_msg_put>
}
   108c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   108c2:	bf00      	nop
   108c4:	2000319f 	.word	0x2000319f
   108c8:	0002205c 	.word	0x0002205c
   108cc:	0002203c 	.word	0x0002203c

000108d0 <z_impl_log_process>:
{
   108d0:	b510      	push	{r4, lr}
   108d2:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   108d4:	4b10      	ldr	r3, [pc, #64]	; (10918 <z_impl_log_process+0x48>)
   108d6:	781b      	ldrb	r3, [r3, #0]
   108d8:	b903      	cbnz	r3, 108dc <z_impl_log_process+0xc>
   108da:	b1c8      	cbz	r0, 10910 <z_impl_log_process+0x40>
	msg = get_msg();
   108dc:	f7ff feb2 	bl	10644 <get_msg>
	if (msg.msg) {
   108e0:	4602      	mov	r2, r0
   108e2:	b178      	cbz	r0, 10904 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   108e4:	4b0d      	ldr	r3, [pc, #52]	; (1091c <z_impl_log_process+0x4c>)
   108e6:	f3bf 8f5b 	dmb	ish
   108ea:	e853 1f00 	ldrex	r1, [r3]
   108ee:	3901      	subs	r1, #1
   108f0:	e843 1000 	strex	r0, r1, [r3]
   108f4:	2800      	cmp	r0, #0
   108f6:	d1f8      	bne.n	108ea <z_impl_log_process+0x1a>
   108f8:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   108fc:	4621      	mov	r1, r4
   108fe:	4610      	mov	r0, r2
   10900:	f7ff ffb4 	bl	1086c <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   10904:	b914      	cbnz	r4, 1090c <z_impl_log_process+0x3c>
   10906:	f7ff ff11 	bl	1072c <z_log_dropped_pending>
   1090a:	b910      	cbnz	r0, 10912 <z_impl_log_process+0x42>
	return next_pending();
   1090c:	f7ff fe02 	bl	10514 <next_pending>
}
   10910:	bd10      	pop	{r4, pc}
		dropped_notify();
   10912:	f7ff fee9 	bl	106e8 <dropped_notify>
   10916:	e7f9      	b.n	1090c <z_impl_log_process+0x3c>
   10918:	2000319e 	.word	0x2000319e
   1091c:	20001e10 	.word	0x20001e10

00010920 <z_log_msg_post_finalize>:
{
   10920:	b510      	push	{r4, lr}
   10922:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10924:	4b1f      	ldr	r3, [pc, #124]	; (109a4 <z_log_msg_post_finalize+0x84>)
   10926:	f3bf 8f5b 	dmb	ish
   1092a:	e853 2f00 	ldrex	r2, [r3]
   1092e:	3201      	adds	r2, #1
   10930:	e843 2100 	strex	r1, r2, [r3]
   10934:	2900      	cmp	r1, #0
   10936:	d1f8      	bne.n	1092a <z_log_msg_post_finalize+0xa>
   10938:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1093c:	4b1a      	ldr	r3, [pc, #104]	; (109a8 <z_log_msg_post_finalize+0x88>)
   1093e:	781b      	ldrb	r3, [r3, #0]
   10940:	b963      	cbnz	r3, 1095c <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   10942:	4b1a      	ldr	r3, [pc, #104]	; (109ac <z_log_msg_post_finalize+0x8c>)
   10944:	681b      	ldr	r3, [r3, #0]
   10946:	b11b      	cbz	r3, 10950 <z_log_msg_post_finalize+0x30>
   10948:	4a16      	ldr	r2, [pc, #88]	; (109a4 <z_log_msg_post_finalize+0x84>)
   1094a:	6812      	ldr	r2, [r2, #0]
   1094c:	2a01      	cmp	r2, #1
   1094e:	d015      	beq.n	1097c <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   10950:	4a14      	ldr	r2, [pc, #80]	; (109a4 <z_log_msg_post_finalize+0x84>)
   10952:	6812      	ldr	r2, [r2, #0]
   10954:	2a0a      	cmp	r2, #10
   10956:	d01c      	beq.n	10992 <z_log_msg_post_finalize+0x72>
}
   10958:	b002      	add	sp, #8
   1095a:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   1095c:	f04f 0340 	mov.w	r3, #64	; 0x40
   10960:	f3ef 8411 	mrs	r4, BASEPRI
   10964:	f383 8812 	msr	BASEPRI_MAX, r3
   10968:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   1096c:	2000      	movs	r0, #0
   1096e:	f7ff ffaf 	bl	108d0 <z_impl_log_process>
	__asm__ volatile(
   10972:	f384 8811 	msr	BASEPRI, r4
   10976:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1097a:	e7ed      	b.n	10958 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
   1097c:	2200      	movs	r2, #0
   1097e:	2300      	movs	r3, #0
   10980:	e9cd 2300 	strd	r2, r3, [sp]
   10984:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   10988:	2300      	movs	r3, #0
   1098a:	4809      	ldr	r0, [pc, #36]	; (109b0 <z_log_msg_post_finalize+0x90>)
   1098c:	f00b fb5e 	bl	1c04c <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   10990:	e7e2      	b.n	10958 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   10992:	2b00      	cmp	r3, #0
   10994:	d0e0      	beq.n	10958 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
   10996:	4806      	ldr	r0, [pc, #24]	; (109b0 <z_log_msg_post_finalize+0x90>)
   10998:	f011 f896 	bl	21ac8 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   1099c:	4805      	ldr	r0, [pc, #20]	; (109b4 <z_log_msg_post_finalize+0x94>)
   1099e:	f00a fb5d 	bl	1b05c <z_impl_k_sem_give>
}
   109a2:	e7d9      	b.n	10958 <z_log_msg_post_finalize+0x38>
   109a4:	20001e10 	.word	0x20001e10
   109a8:	2000319f 	.word	0x2000319f
   109ac:	20001e40 	.word	0x20001e40
   109b0:	20001480 	.word	0x20001480
   109b4:	2000071c 	.word	0x2000071c

000109b8 <log_3>:
{
   109b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109bc:	4680      	mov	r8, r0
   109be:	460f      	mov	r7, r1
   109c0:	4616      	mov	r6, r2
   109c2:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   109c4:	f000 f9d2 	bl	10d6c <log_msg_chunk_alloc>

	if (msg != NULL) {
   109c8:	4604      	mov	r4, r0
   109ca:	b140      	cbz	r0, 109de <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   109cc:	2301      	movs	r3, #1
   109ce:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   109d0:	2200      	movs	r2, #0
   109d2:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   109d4:	f04f 0300 	mov.w	r3, #0
   109d8:	f362 0300 	bfi	r3, r2, #0, #1
   109dc:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   109de:	b14c      	cbz	r4, 109f4 <log_3+0x3c>
		msg->str = str;
   109e0:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   109e4:	7a63      	ldrb	r3, [r4, #9]
   109e6:	2203      	movs	r2, #3
   109e8:	f362 1307 	bfi	r3, r2, #4, #4
   109ec:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   109ee:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   109f0:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   109f2:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   109f4:	b1c4      	cbz	r4, 10a28 <log_3+0x70>
	msg->hdr.ids = src_level;
   109f6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   109fa:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   109fc:	4b0b      	ldr	r3, [pc, #44]	; (10a2c <log_3+0x74>)
   109fe:	681b      	ldr	r3, [r3, #0]
   10a00:	4798      	blx	r3
   10a02:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10a04:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a08:	f3ef 8511 	mrs	r5, BASEPRI
   10a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   10a10:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10a14:	4621      	mov	r1, r4
   10a16:	4806      	ldr	r0, [pc, #24]	; (10a30 <log_3+0x78>)
   10a18:	f00c fc4a 	bl	1d2b0 <log_list_add_tail>
	__asm__ volatile(
   10a1c:	f385 8811 	msr	BASEPRI, r5
   10a20:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10a24:	f7ff ff7c 	bl	10920 <z_log_msg_post_finalize>
}
   10a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10a2c:	20000524 	.word	0x20000524
   10a30:	20001e1c 	.word	0x20001e1c

00010a34 <log_1>:
{
   10a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a36:	4606      	mov	r6, r0
   10a38:	460d      	mov	r5, r1
   10a3a:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10a3c:	f000 f996 	bl	10d6c <log_msg_chunk_alloc>
	if (msg != NULL) {
   10a40:	4604      	mov	r4, r0
   10a42:	b140      	cbz	r0, 10a56 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   10a44:	2301      	movs	r3, #1
   10a46:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10a48:	2100      	movs	r1, #0
   10a4a:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10a4c:	f04f 0300 	mov.w	r3, #0
   10a50:	f361 0300 	bfi	r3, r1, #0, #1
   10a54:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   10a56:	b134      	cbz	r4, 10a66 <log_1+0x32>
		msg->str = str;
   10a58:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   10a5a:	7a63      	ldrb	r3, [r4, #9]
   10a5c:	2201      	movs	r2, #1
   10a5e:	f362 1307 	bfi	r3, r2, #4, #4
   10a62:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   10a64:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   10a66:	b1b4      	cbz	r4, 10a96 <log_1+0x62>
	msg->hdr.ids = src_level;
   10a68:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10a6a:	4b0b      	ldr	r3, [pc, #44]	; (10a98 <log_1+0x64>)
   10a6c:	681b      	ldr	r3, [r3, #0]
   10a6e:	4798      	blx	r3
   10a70:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10a72:	f04f 0340 	mov.w	r3, #64	; 0x40
   10a76:	f3ef 8511 	mrs	r5, BASEPRI
   10a7a:	f383 8812 	msr	BASEPRI_MAX, r3
   10a7e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10a82:	4621      	mov	r1, r4
   10a84:	4805      	ldr	r0, [pc, #20]	; (10a9c <log_1+0x68>)
   10a86:	f00c fc13 	bl	1d2b0 <log_list_add_tail>
	__asm__ volatile(
   10a8a:	f385 8811 	msr	BASEPRI, r5
   10a8e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10a92:	f7ff ff45 	bl	10920 <z_log_msg_post_finalize>
}
   10a96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a98:	20000524 	.word	0x20000524
   10a9c:	20001e1c 	.word	0x20001e1c

00010aa0 <log_2>:
{
   10aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10aa4:	4607      	mov	r7, r0
   10aa6:	460e      	mov	r6, r1
   10aa8:	4615      	mov	r5, r2
   10aaa:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10aac:	f000 f95e 	bl	10d6c <log_msg_chunk_alloc>
	if (msg != NULL) {
   10ab0:	4604      	mov	r4, r0
   10ab2:	b140      	cbz	r0, 10ac6 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   10ab4:	2301      	movs	r3, #1
   10ab6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10ab8:	2200      	movs	r2, #0
   10aba:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10abc:	f04f 0300 	mov.w	r3, #0
   10ac0:	f362 0300 	bfi	r3, r2, #0, #1
   10ac4:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   10ac6:	b13c      	cbz	r4, 10ad8 <log_2+0x38>
		msg->str = str;
   10ac8:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   10aca:	7a63      	ldrb	r3, [r4, #9]
   10acc:	2202      	movs	r2, #2
   10ace:	f362 1307 	bfi	r3, r2, #4, #4
   10ad2:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   10ad4:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   10ad6:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   10ad8:	b1bc      	cbz	r4, 10b0a <log_2+0x6a>
	msg->hdr.ids = src_level;
   10ada:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10ade:	4b0c      	ldr	r3, [pc, #48]	; (10b10 <log_2+0x70>)
   10ae0:	681b      	ldr	r3, [r3, #0]
   10ae2:	4798      	blx	r3
   10ae4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10ae6:	f04f 0340 	mov.w	r3, #64	; 0x40
   10aea:	f3ef 8511 	mrs	r5, BASEPRI
   10aee:	f383 8812 	msr	BASEPRI_MAX, r3
   10af2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10af6:	4621      	mov	r1, r4
   10af8:	4806      	ldr	r0, [pc, #24]	; (10b14 <log_2+0x74>)
   10afa:	f00c fbd9 	bl	1d2b0 <log_list_add_tail>
	__asm__ volatile(
   10afe:	f385 8811 	msr	BASEPRI, r5
   10b02:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10b06:	f7ff ff0b 	bl	10920 <z_log_msg_post_finalize>
}
   10b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b0e:	bf00      	nop
   10b10:	20000524 	.word	0x20000524
   10b14:	20001e1c 	.word	0x20001e1c

00010b18 <log_n>:
{
   10b18:	b538      	push	{r3, r4, r5, lr}
   10b1a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   10b1c:	f00c fd05 	bl	1d52a <log_msg_create_n>
		if (msg == NULL) {
   10b20:	b1b8      	cbz	r0, 10b52 <log_n+0x3a>
   10b22:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   10b24:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   10b26:	4b0b      	ldr	r3, [pc, #44]	; (10b54 <log_n+0x3c>)
   10b28:	681b      	ldr	r3, [r3, #0]
   10b2a:	4798      	blx	r3
   10b2c:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   10b2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b32:	f3ef 8411 	mrs	r4, BASEPRI
   10b36:	f383 8812 	msr	BASEPRI_MAX, r3
   10b3a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10b3e:	4629      	mov	r1, r5
   10b40:	4805      	ldr	r0, [pc, #20]	; (10b58 <log_n+0x40>)
   10b42:	f00c fbb5 	bl	1d2b0 <log_list_add_tail>
	__asm__ volatile(
   10b46:	f384 8811 	msr	BASEPRI, r4
   10b4a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10b4e:	f7ff fee7 	bl	10920 <z_log_msg_post_finalize>
}
   10b52:	bd38      	pop	{r3, r4, r5, pc}
   10b54:	20000524 	.word	0x20000524
   10b58:	20001e1c 	.word	0x20001e1c

00010b5c <log_hexdump>:
{
   10b5c:	b538      	push	{r3, r4, r5, lr}
   10b5e:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   10b60:	f00c fcf7 	bl	1d552 <log_msg_hexdump_create>
		if (msg == NULL) {
   10b64:	b1b8      	cbz	r0, 10b96 <log_hexdump+0x3a>
   10b66:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   10b68:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   10b6a:	4b0b      	ldr	r3, [pc, #44]	; (10b98 <log_hexdump+0x3c>)
   10b6c:	681b      	ldr	r3, [r3, #0]
   10b6e:	4798      	blx	r3
   10b70:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   10b72:	f04f 0340 	mov.w	r3, #64	; 0x40
   10b76:	f3ef 8411 	mrs	r4, BASEPRI
   10b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   10b7e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10b82:	4629      	mov	r1, r5
   10b84:	4805      	ldr	r0, [pc, #20]	; (10b9c <log_hexdump+0x40>)
   10b86:	f00c fb93 	bl	1d2b0 <log_list_add_tail>
	__asm__ volatile(
   10b8a:	f384 8811 	msr	BASEPRI, r4
   10b8e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10b92:	f7ff fec5 	bl	10920 <z_log_msg_post_finalize>
}
   10b96:	bd38      	pop	{r3, r4, r5, pc}
   10b98:	20000524 	.word	0x20000524
   10b9c:	20001e1c 	.word	0x20001e1c

00010ba0 <log_0>:
{
   10ba0:	b570      	push	{r4, r5, r6, lr}
   10ba2:	4605      	mov	r5, r0
   10ba4:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   10ba6:	f000 f8e1 	bl	10d6c <log_msg_chunk_alloc>
	if (msg != NULL) {
   10baa:	4604      	mov	r4, r0
   10bac:	b140      	cbz	r0, 10bc0 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   10bae:	2301      	movs	r3, #1
   10bb0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   10bb2:	2200      	movs	r2, #0
   10bb4:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   10bb6:	f04f 0300 	mov.w	r3, #0
   10bba:	f362 0300 	bfi	r3, r2, #0, #1
   10bbe:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   10bc0:	b104      	cbz	r4, 10bc4 <log_0+0x24>
		msg->str = str;
   10bc2:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   10bc4:	b1b4      	cbz	r4, 10bf4 <log_0+0x54>
	msg->hdr.ids = src_level;
   10bc6:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   10bc8:	4b0b      	ldr	r3, [pc, #44]	; (10bf8 <log_0+0x58>)
   10bca:	681b      	ldr	r3, [r3, #0]
   10bcc:	4798      	blx	r3
   10bce:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   10bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   10bd4:	f3ef 8511 	mrs	r5, BASEPRI
   10bd8:	f383 8812 	msr	BASEPRI_MAX, r3
   10bdc:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   10be0:	4621      	mov	r1, r4
   10be2:	4806      	ldr	r0, [pc, #24]	; (10bfc <log_0+0x5c>)
   10be4:	f00c fb64 	bl	1d2b0 <log_list_add_tail>
	__asm__ volatile(
   10be8:	f385 8811 	msr	BASEPRI, r5
   10bec:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   10bf0:	f7ff fe96 	bl	10920 <z_log_msg_post_finalize>
}
   10bf4:	bd70      	pop	{r4, r5, r6, pc}
   10bf6:	bf00      	nop
   10bf8:	20000524 	.word	0x20000524
   10bfc:	20001e1c 	.word	0x20001e1c

00010c00 <z_impl_log_panic>:
	if (panic_mode) {
   10c00:	4b12      	ldr	r3, [pc, #72]	; (10c4c <z_impl_log_panic+0x4c>)
   10c02:	781b      	ldrb	r3, [r3, #0]
   10c04:	b103      	cbz	r3, 10c08 <z_impl_log_panic+0x8>
   10c06:	4770      	bx	lr
{
   10c08:	b510      	push	{r4, lr}
	log_init();
   10c0a:	f7ff fce3 	bl	105d4 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   10c0e:	2400      	movs	r4, #0
   10c10:	e000      	b.n	10c14 <z_impl_log_panic+0x14>
   10c12:	3401      	adds	r4, #1
   10c14:	4b0e      	ldr	r3, [pc, #56]	; (10c50 <z_impl_log_panic+0x50>)
   10c16:	4a0f      	ldr	r2, [pc, #60]	; (10c54 <z_impl_log_panic+0x54>)
   10c18:	1a9b      	subs	r3, r3, r2
   10c1a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   10c1e:	da0c      	bge.n	10c3a <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   10c20:	480c      	ldr	r0, [pc, #48]	; (10c54 <z_impl_log_panic+0x54>)
   10c22:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   10c26:	6843      	ldr	r3, [r0, #4]
   10c28:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   10c2a:	2b00      	cmp	r3, #0
   10c2c:	d0f1      	beq.n	10c12 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   10c2e:	0123      	lsls	r3, r4, #4
   10c30:	4a08      	ldr	r2, [pc, #32]	; (10c54 <z_impl_log_panic+0x54>)
   10c32:	58d3      	ldr	r3, [r2, r3]
   10c34:	695b      	ldr	r3, [r3, #20]
   10c36:	4798      	blx	r3
}
   10c38:	e7eb      	b.n	10c12 <z_impl_log_panic+0x12>
   10c3a:	2000      	movs	r0, #0
   10c3c:	f7ff fe48 	bl	108d0 <z_impl_log_process>
		while (log_process(false) == true) {
   10c40:	2800      	cmp	r0, #0
   10c42:	d1fa      	bne.n	10c3a <z_impl_log_panic+0x3a>
	panic_mode = true;
   10c44:	4b01      	ldr	r3, [pc, #4]	; (10c4c <z_impl_log_panic+0x4c>)
   10c46:	2201      	movs	r2, #1
   10c48:	701a      	strb	r2, [r3, #0]
}
   10c4a:	bd10      	pop	{r4, pc}
   10c4c:	2000319f 	.word	0x2000319f
   10c50:	0002205c 	.word	0x0002205c
   10c54:	0002203c 	.word	0x0002203c

00010c58 <log_process_thread_func>:
{
   10c58:	b508      	push	{r3, lr}
	log_init();
   10c5a:	f7ff fcbb 	bl	105d4 <log_init>
	return z_impl_z_current_get();
   10c5e:	f00a ffdb 	bl	1bc18 <z_impl_z_current_get>
	thread_set(k_current_get());
   10c62:	f7ff fc3b 	bl	104dc <thread_set>
   10c66:	e006      	b.n	10c76 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   10c68:	f04f 32ff 	mov.w	r2, #4294967295
   10c6c:	f04f 33ff 	mov.w	r3, #4294967295
   10c70:	4804      	ldr	r0, [pc, #16]	; (10c84 <log_process_thread_func+0x2c>)
   10c72:	f00a fa1b 	bl	1b0ac <z_impl_k_sem_take>
   10c76:	2000      	movs	r0, #0
   10c78:	f7ff fe2a 	bl	108d0 <z_impl_log_process>
		if (log_process(false) == false) {
   10c7c:	2800      	cmp	r0, #0
   10c7e:	d1fa      	bne.n	10c76 <log_process_thread_func+0x1e>
   10c80:	e7f2      	b.n	10c68 <log_process_thread_func+0x10>
   10c82:	bf00      	nop
   10c84:	2000071c 	.word	0x2000071c

00010c88 <log_free>:
{
   10c88:	b500      	push	{lr}
   10c8a:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   10c8c:	3804      	subs	r0, #4
   10c8e:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   10c90:	f3bf 8f5b 	dmb	ish
   10c94:	e850 3f00 	ldrex	r3, [r0]
   10c98:	1e5a      	subs	r2, r3, #1
   10c9a:	e840 2100 	strex	r1, r2, [r0]
   10c9e:	2900      	cmp	r1, #0
   10ca0:	d1f8      	bne.n	10c94 <log_free+0xc>
   10ca2:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   10ca6:	2b01      	cmp	r3, #1
   10ca8:	d002      	beq.n	10cb0 <log_free+0x28>
}
   10caa:	b003      	add	sp, #12
   10cac:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   10cb0:	a901      	add	r1, sp, #4
   10cb2:	4802      	ldr	r0, [pc, #8]	; (10cbc <log_free+0x34>)
   10cb4:	f010 f9e9 	bl	2108a <k_mem_slab_free>
}
   10cb8:	e7f7      	b.n	10caa <log_free+0x22>
   10cba:	bf00      	nop
   10cbc:	20001e24 	.word	0x20001e24

00010cc0 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   10cc0:	4b05      	ldr	r3, [pc, #20]	; (10cd8 <log_source_name_get+0x18>)
   10cc2:	4a06      	ldr	r2, [pc, #24]	; (10cdc <log_source_name_get+0x1c>)
   10cc4:	1a9b      	subs	r3, r3, r2
   10cc6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   10cca:	d202      	bcs.n	10cd2 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   10ccc:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   10cd0:	4770      	bx	lr
   10cd2:	2000      	movs	r0, #0
}
   10cd4:	4770      	bx	lr
   10cd6:	bf00      	nop
   10cd8:	0002203c 	.word	0x0002203c
   10cdc:	00021f84 	.word	0x00021f84

00010ce0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   10ce0:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   10ce2:	4b07      	ldr	r3, [pc, #28]	; (10d00 <log_backend_enable+0x20>)
   10ce4:	1ac3      	subs	r3, r0, r3
   10ce6:	111b      	asrs	r3, r3, #4
   10ce8:	3301      	adds	r3, #1
	backend->cb->id = id;
   10cea:	6842      	ldr	r2, [r0, #4]
   10cec:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   10cee:	6843      	ldr	r3, [r0, #4]
   10cf0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   10cf2:	6843      	ldr	r3, [r0, #4]
   10cf4:	2201      	movs	r2, #1
   10cf6:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   10cf8:	f7ff fcb8 	bl	1066c <z_log_notify_backend_enabled>
}
   10cfc:	bd08      	pop	{r3, pc}
   10cfe:	bf00      	nop
   10d00:	0002203c 	.word	0x0002203c

00010d04 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   10d04:	b510      	push	{r4, lr}
   10d06:	b082      	sub	sp, #8
   10d08:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   10d0a:	9b01      	ldr	r3, [sp, #4]
   10d0c:	b133      	cbz	r3, 10d1c <cont_free+0x18>
		next = cont->next;
   10d0e:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   10d10:	a901      	add	r1, sp, #4
   10d12:	4803      	ldr	r0, [pc, #12]	; (10d20 <cont_free+0x1c>)
   10d14:	f010 f9b9 	bl	2108a <k_mem_slab_free>
		cont = next;
   10d18:	9401      	str	r4, [sp, #4]
   10d1a:	e7f6      	b.n	10d0a <cont_free+0x6>
	}
}
   10d1c:	b002      	add	sp, #8
   10d1e:	bd10      	pop	{r4, pc}
   10d20:	20001e44 	.word	0x20001e44

00010d24 <log_msg_pool_init>:
{
   10d24:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   10d26:	2320      	movs	r3, #32
   10d28:	461a      	mov	r2, r3
   10d2a:	4902      	ldr	r1, [pc, #8]	; (10d34 <log_msg_pool_init+0x10>)
   10d2c:	4802      	ldr	r0, [pc, #8]	; (10d38 <log_msg_pool_init+0x14>)
   10d2e:	f010 f99e 	bl	2106e <k_mem_slab_init>
}
   10d32:	bd08      	pop	{r3, pc}
   10d34:	200060a8 	.word	0x200060a8
   10d38:	20001e44 	.word	0x20001e44

00010d3c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   10d3c:	b510      	push	{r4, lr}
   10d3e:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   10d40:	2300      	movs	r3, #0
   10d42:	9301      	str	r3, [sp, #4]
   10d44:	2001      	movs	r0, #1
   10d46:	f7ff fdc3 	bl	108d0 <z_impl_log_process>
   10d4a:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   10d4c:	f7ff fc9e 	bl	1068c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   10d50:	2200      	movs	r2, #0
   10d52:	2300      	movs	r3, #0
   10d54:	a901      	add	r1, sp, #4
   10d56:	4804      	ldr	r0, [pc, #16]	; (10d68 <log_msg_no_space_handle+0x2c>)
   10d58:	f009 ff3c 	bl	1abd4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   10d5c:	b108      	cbz	r0, 10d62 <log_msg_no_space_handle+0x26>
   10d5e:	2c00      	cmp	r4, #0
   10d60:	d1f0      	bne.n	10d44 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   10d62:	9801      	ldr	r0, [sp, #4]
   10d64:	b002      	add	sp, #8
   10d66:	bd10      	pop	{r4, pc}
   10d68:	20001e44 	.word	0x20001e44

00010d6c <log_msg_chunk_alloc>:
{
   10d6c:	b500      	push	{lr}
   10d6e:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   10d70:	2300      	movs	r3, #0
   10d72:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   10d74:	f00c fad7 	bl	1d326 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10d78:	b150      	cbz	r0, 10d90 <log_msg_chunk_alloc+0x24>
   10d7a:	2200      	movs	r2, #0
   10d7c:	2300      	movs	r3, #0
   10d7e:	a901      	add	r1, sp, #4
   10d80:	4807      	ldr	r0, [pc, #28]	; (10da0 <log_msg_chunk_alloc+0x34>)
   10d82:	f009 ff27 	bl	1abd4 <k_mem_slab_alloc>
	if (err != 0) {
   10d86:	b930      	cbnz	r0, 10d96 <log_msg_chunk_alloc+0x2a>
}
   10d88:	9801      	ldr	r0, [sp, #4]
   10d8a:	b003      	add	sp, #12
   10d8c:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   10d90:	2200      	movs	r2, #0
   10d92:	2300      	movs	r3, #0
   10d94:	e7f3      	b.n	10d7e <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   10d96:	f7ff ffd1 	bl	10d3c <log_msg_no_space_handle>
   10d9a:	9001      	str	r0, [sp, #4]
   10d9c:	e7f4      	b.n	10d88 <log_msg_chunk_alloc+0x1c>
   10d9e:	bf00      	nop
   10da0:	20001e44 	.word	0x20001e44

00010da4 <msg_free>:
{
   10da4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10da6:	b083      	sub	sp, #12
   10da8:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   10daa:	4604      	mov	r4, r0
   10dac:	f00c fb62 	bl	1d474 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10db0:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   10db2:	f013 0f01 	tst.w	r3, #1
   10db6:	d101      	bne.n	10dbc <msg_free+0x18>
   10db8:	4606      	mov	r6, r0
   10dba:	bb50      	cbnz	r0, 10e12 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   10dbc:	9b01      	ldr	r3, [sp, #4]
   10dbe:	7a1a      	ldrb	r2, [r3, #8]
   10dc0:	f012 0f02 	tst.w	r2, #2
   10dc4:	d128      	bne.n	10e18 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   10dc6:	a901      	add	r1, sp, #4
   10dc8:	4815      	ldr	r0, [pc, #84]	; (10e20 <msg_free+0x7c>)
   10dca:	f010 f95e 	bl	2108a <k_mem_slab_free>
}
   10dce:	b003      	add	sp, #12
   10dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   10dd2:	9801      	ldr	r0, [sp, #4]
   10dd4:	f00c fb63 	bl	1d49e <log_msg_str_get>
   10dd8:	4631      	mov	r1, r6
   10dda:	f00c fa83 	bl	1d2e4 <z_log_get_s_mask>
					if (smask == 0U) {
   10dde:	4607      	mov	r7, r0
   10de0:	b988      	cbnz	r0, 10e06 <msg_free+0x62>
   10de2:	e7eb      	b.n	10dbc <msg_free+0x18>
					log_free(buf);
   10de4:	4628      	mov	r0, r5
   10de6:	f7ff ff4f 	bl	10c88 <log_free>
		for (i = 0U; i < nargs; i++) {
   10dea:	3401      	adds	r4, #1
   10dec:	42b4      	cmp	r4, r6
   10dee:	d2e5      	bcs.n	10dbc <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   10df0:	4621      	mov	r1, r4
   10df2:	9801      	ldr	r0, [sp, #4]
   10df4:	f00c fb41 	bl	1d47a <log_msg_arg_get>
   10df8:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   10dfa:	f7ff fcd1 	bl	107a0 <log_is_strdup>
   10dfe:	2800      	cmp	r0, #0
   10e00:	d0f3      	beq.n	10dea <msg_free+0x46>
				if (smask == 0U) {
   10e02:	2f00      	cmp	r7, #0
   10e04:	d0e5      	beq.n	10dd2 <msg_free+0x2e>
				if (smask & BIT(i)) {
   10e06:	fa27 f304 	lsr.w	r3, r7, r4
   10e0a:	f013 0f01 	tst.w	r3, #1
   10e0e:	d0ec      	beq.n	10dea <msg_free+0x46>
   10e10:	e7e8      	b.n	10de4 <msg_free+0x40>
		uint32_t smask = 0U;
   10e12:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   10e14:	463c      	mov	r4, r7
   10e16:	e7e9      	b.n	10dec <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   10e18:	6958      	ldr	r0, [r3, #20]
   10e1a:	f7ff ff73 	bl	10d04 <cont_free>
   10e1e:	e7d2      	b.n	10dc6 <msg_free+0x22>
   10e20:	20001e44 	.word	0x20001e44

00010e24 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   10e24:	b40e      	push	{r1, r2, r3}
   10e26:	b500      	push	{lr}
   10e28:	b082      	sub	sp, #8
   10e2a:	4601      	mov	r1, r0
   10e2c:	ab03      	add	r3, sp, #12
   10e2e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   10e32:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   10e34:	4803      	ldr	r0, [pc, #12]	; (10e44 <print_formatted+0x20>)
   10e36:	f7fe fe57 	bl	fae8 <cbvprintf>
	va_end(args);

	return length;
}
   10e3a:	b002      	add	sp, #8
   10e3c:	f85d eb04 	ldr.w	lr, [sp], #4
   10e40:	b003      	add	sp, #12
   10e42:	4770      	bx	lr
   10e44:	0001d97b 	.word	0x0001d97b

00010e48 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   10e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e4a:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   10e4c:	f011 0f44 	tst.w	r1, #68	; 0x44
   10e50:	d005      	beq.n	10e5e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   10e52:	4b1a      	ldr	r3, [pc, #104]	; (10ebc <timestamp_print+0x74>)
   10e54:	681c      	ldr	r4, [r3, #0]
   10e56:	b934      	cbnz	r4, 10e66 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   10e58:	2000      	movs	r0, #0
	}

	return length;
}
   10e5a:	b005      	add	sp, #20
   10e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   10e5e:	4918      	ldr	r1, [pc, #96]	; (10ec0 <timestamp_print+0x78>)
   10e60:	f7ff ffe0 	bl	10e24 <print_formatted>
   10e64:	e7f9      	b.n	10e5a <timestamp_print+0x12>
		timestamp /= timestamp_div;
   10e66:	4b17      	ldr	r3, [pc, #92]	; (10ec4 <timestamp_print+0x7c>)
   10e68:	6819      	ldr	r1, [r3, #0]
   10e6a:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   10e6e:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   10e72:	4a15      	ldr	r2, [pc, #84]	; (10ec8 <timestamp_print+0x80>)
   10e74:	fba2 3205 	umull	r3, r2, r2, r5
   10e78:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   10e7a:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   10e7e:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   10e82:	4b12      	ldr	r3, [pc, #72]	; (10ecc <timestamp_print+0x84>)
   10e84:	fba3 7306 	umull	r7, r3, r3, r6
   10e88:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   10e8a:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   10e8e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   10e92:	fb05 f101 	mul.w	r1, r5, r1
   10e96:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   10e9a:	fb07 1114 	mls	r1, r7, r4, r1
   10e9e:	fb05 f101 	mul.w	r1, r5, r1
   10ea2:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   10ea6:	9402      	str	r4, [sp, #8]
   10ea8:	9701      	str	r7, [sp, #4]
   10eaa:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   10eae:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   10eb2:	9100      	str	r1, [sp, #0]
   10eb4:	4906      	ldr	r1, [pc, #24]	; (10ed0 <timestamp_print+0x88>)
   10eb6:	f7ff ffb5 	bl	10e24 <print_formatted>
   10eba:	e7ce      	b.n	10e5a <timestamp_print+0x12>
   10ebc:	20001e60 	.word	0x20001e60
   10ec0:	00022498 	.word	0x00022498
   10ec4:	20001e64 	.word	0x20001e64
   10ec8:	91a2b3c5 	.word	0x91a2b3c5
   10ecc:	88888889 	.word	0x88888889
   10ed0:	000224a4 	.word	0x000224a4

00010ed4 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   10ed4:	b161      	cbz	r1, 10ef0 <color_print+0x1c>
{
   10ed6:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   10ed8:	b12a      	cbz	r2, 10ee6 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   10eda:	4a06      	ldr	r2, [pc, #24]	; (10ef4 <color_print+0x20>)
   10edc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   10ee0:	b912      	cbnz	r2, 10ee8 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   10ee2:	4a05      	ldr	r2, [pc, #20]	; (10ef8 <color_print+0x24>)
   10ee4:	e000      	b.n	10ee8 <color_print+0x14>
   10ee6:	4a04      	ldr	r2, [pc, #16]	; (10ef8 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   10ee8:	4904      	ldr	r1, [pc, #16]	; (10efc <color_print+0x28>)
   10eea:	f7ff ff9b 	bl	10e24 <print_formatted>
	}
}
   10eee:	bd08      	pop	{r3, pc}
   10ef0:	4770      	bx	lr
   10ef2:	bf00      	nop
   10ef4:	00022518 	.word	0x00022518
   10ef8:	000224c0 	.word	0x000224c0
   10efc:	00022ed8 	.word	0x00022ed8

00010f00 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   10f00:	f011 0f10 	tst.w	r1, #16
   10f04:	d10b      	bne.n	10f1e <newline_print+0x1e>
{
   10f06:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   10f08:	f011 0f20 	tst.w	r1, #32
   10f0c:	d003      	beq.n	10f16 <newline_print+0x16>
		print_formatted(ctx, "\n");
   10f0e:	4904      	ldr	r1, [pc, #16]	; (10f20 <newline_print+0x20>)
   10f10:	f7ff ff88 	bl	10e24 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   10f14:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   10f16:	4903      	ldr	r1, [pc, #12]	; (10f24 <newline_print+0x24>)
   10f18:	f7ff ff84 	bl	10e24 <print_formatted>
   10f1c:	e7fa      	b.n	10f14 <newline_print+0x14>
   10f1e:	4770      	bx	lr
   10f20:	00022318 	.word	0x00022318
   10f24:	000224c8 	.word	0x000224c8

00010f28 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   10f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f2c:	4605      	mov	r5, r0
   10f2e:	460f      	mov	r7, r1
   10f30:	4616      	mov	r6, r2
   10f32:	4698      	mov	r8, r3
	newline_print(output, flags);
   10f34:	9906      	ldr	r1, [sp, #24]
   10f36:	f7ff ffe3 	bl	10f00 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   10f3a:	2400      	movs	r4, #0
   10f3c:	4544      	cmp	r4, r8
   10f3e:	da05      	bge.n	10f4c <hexdump_line_print+0x24>
		print_formatted(output, " ");
   10f40:	4923      	ldr	r1, [pc, #140]	; (10fd0 <hexdump_line_print+0xa8>)
   10f42:	4628      	mov	r0, r5
   10f44:	f7ff ff6e 	bl	10e24 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   10f48:	3401      	adds	r4, #1
   10f4a:	e7f7      	b.n	10f3c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10f4c:	2400      	movs	r4, #0
   10f4e:	e009      	b.n	10f64 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   10f50:	491f      	ldr	r1, [pc, #124]	; (10fd0 <hexdump_line_print+0xa8>)
   10f52:	4628      	mov	r0, r5
   10f54:	f7ff ff66 	bl	10e24 <print_formatted>
   10f58:	e00b      	b.n	10f72 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   10f5a:	491e      	ldr	r1, [pc, #120]	; (10fd4 <hexdump_line_print+0xac>)
   10f5c:	4628      	mov	r0, r5
   10f5e:	f7ff ff61 	bl	10e24 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10f62:	3401      	adds	r4, #1
   10f64:	2c0f      	cmp	r4, #15
   10f66:	dc0c      	bgt.n	10f82 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   10f68:	2c00      	cmp	r4, #0
   10f6a:	dd02      	ble.n	10f72 <hexdump_line_print+0x4a>
   10f6c:	f014 0f07 	tst.w	r4, #7
   10f70:	d0ee      	beq.n	10f50 <hexdump_line_print+0x28>
		if (i < length) {
   10f72:	42b4      	cmp	r4, r6
   10f74:	d2f1      	bcs.n	10f5a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   10f76:	5d3a      	ldrb	r2, [r7, r4]
   10f78:	4917      	ldr	r1, [pc, #92]	; (10fd8 <hexdump_line_print+0xb0>)
   10f7a:	4628      	mov	r0, r5
   10f7c:	f7ff ff52 	bl	10e24 <print_formatted>
   10f80:	e7ef      	b.n	10f62 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   10f82:	4916      	ldr	r1, [pc, #88]	; (10fdc <hexdump_line_print+0xb4>)
   10f84:	4628      	mov	r0, r5
   10f86:	f7ff ff4d 	bl	10e24 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10f8a:	2400      	movs	r4, #0
   10f8c:	e009      	b.n	10fa2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   10f8e:	4910      	ldr	r1, [pc, #64]	; (10fd0 <hexdump_line_print+0xa8>)
   10f90:	4628      	mov	r0, r5
   10f92:	f7ff ff47 	bl	10e24 <print_formatted>
   10f96:	e00b      	b.n	10fb0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   10f98:	4911      	ldr	r1, [pc, #68]	; (10fe0 <hexdump_line_print+0xb8>)
   10f9a:	4628      	mov	r0, r5
   10f9c:	f7ff ff42 	bl	10e24 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   10fa0:	3401      	adds	r4, #1
   10fa2:	2c0f      	cmp	r4, #15
   10fa4:	dc12      	bgt.n	10fcc <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   10fa6:	2c00      	cmp	r4, #0
   10fa8:	dd02      	ble.n	10fb0 <hexdump_line_print+0x88>
   10faa:	f014 0f07 	tst.w	r4, #7
   10fae:	d0ee      	beq.n	10f8e <hexdump_line_print+0x66>
		if (i < length) {
   10fb0:	42b4      	cmp	r4, r6
   10fb2:	d206      	bcs.n	10fc2 <hexdump_line_print+0x9a>
			char c = (char)data[i];
   10fb4:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   10fb6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   10fba:	2b5e      	cmp	r3, #94	; 0x5e
   10fbc:	d9ec      	bls.n	10f98 <hexdump_line_print+0x70>
   10fbe:	222e      	movs	r2, #46	; 0x2e
   10fc0:	e7ea      	b.n	10f98 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   10fc2:	4903      	ldr	r1, [pc, #12]	; (10fd0 <hexdump_line_print+0xa8>)
   10fc4:	4628      	mov	r0, r5
   10fc6:	f7ff ff2d 	bl	10e24 <print_formatted>
   10fca:	e7e9      	b.n	10fa0 <hexdump_line_print+0x78>
		}
	}
}
   10fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10fd0:	000224f0 	.word	0x000224f0
   10fd4:	000224d4 	.word	0x000224d4
   10fd8:	000224cc 	.word	0x000224cc
   10fdc:	000224d8 	.word	0x000224d8
   10fe0:	000224dc 	.word	0x000224dc

00010fe4 <ids_print>:
{
   10fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10fe8:	4680      	mov	r8, r0
   10fea:	4616      	mov	r6, r2
   10fec:	461d      	mov	r5, r3
   10fee:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   10ff2:	b959      	cbnz	r1, 1100c <ids_print+0x28>
	int total = 0;
   10ff4:	2400      	movs	r4, #0
	if (source_id >= 0) {
   10ff6:	2f00      	cmp	r7, #0
   10ff8:	db1c      	blt.n	11034 <ids_print+0x50>
		total += print_formatted(output,
   10ffa:	b186      	cbz	r6, 1101e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   10ffc:	2301      	movs	r3, #1
   10ffe:	9a07      	ldr	r2, [sp, #28]
   11000:	4093      	lsls	r3, r2
				(func_on &&
   11002:	f013 0f10 	tst.w	r3, #16
   11006:	d118      	bne.n	1103a <ids_print+0x56>
		total += print_formatted(output,
   11008:	4e0d      	ldr	r6, [pc, #52]	; (11040 <ids_print+0x5c>)
   1100a:	e009      	b.n	11020 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   1100c:	4b0d      	ldr	r3, [pc, #52]	; (11044 <ids_print+0x60>)
   1100e:	9a07      	ldr	r2, [sp, #28]
   11010:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11014:	490c      	ldr	r1, [pc, #48]	; (11048 <ids_print+0x64>)
   11016:	f7ff ff05 	bl	10e24 <print_formatted>
   1101a:	4604      	mov	r4, r0
   1101c:	e7eb      	b.n	10ff6 <ids_print+0x12>
		total += print_formatted(output,
   1101e:	4e08      	ldr	r6, [pc, #32]	; (11040 <ids_print+0x5c>)
   11020:	4639      	mov	r1, r7
   11022:	4628      	mov	r0, r5
   11024:	f7ff fe4c 	bl	10cc0 <log_source_name_get>
   11028:	4602      	mov	r2, r0
   1102a:	4631      	mov	r1, r6
   1102c:	4640      	mov	r0, r8
   1102e:	f7ff fef9 	bl	10e24 <print_formatted>
   11032:	4404      	add	r4, r0
}
   11034:	4620      	mov	r0, r4
   11036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   1103a:	4e04      	ldr	r6, [pc, #16]	; (1104c <ids_print+0x68>)
   1103c:	e7f0      	b.n	11020 <ids_print+0x3c>
   1103e:	bf00      	nop
   11040:	000224e0 	.word	0x000224e0
   11044:	00022554 	.word	0x00022554
   11048:	000224ec 	.word	0x000224ec
   1104c:	000224e8 	.word	0x000224e8

00011050 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
   11050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11054:	b089      	sub	sp, #36	; 0x24
   11056:	4607      	mov	r7, r0
   11058:	460e      	mov	r6, r1
   1105a:	4691      	mov	r9, r2
   1105c:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
   1105e:	f00c fa1e 	bl	1d49e <log_msg_str_get>
   11062:	4602      	mov	r2, r0
   11064:	490e      	ldr	r1, [pc, #56]	; (110a0 <hexdump_print+0x50>)
   11066:	4630      	mov	r0, r6
   11068:	f7ff fedc 	bl	10e24 <print_formatted>
	uint32_t offset = 0U;
   1106c:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
   1106e:	2510      	movs	r5, #16
   11070:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   11072:	4623      	mov	r3, r4
   11074:	aa03      	add	r2, sp, #12
   11076:	eb0d 0105 	add.w	r1, sp, r5
   1107a:	4638      	mov	r0, r7
   1107c:	f00c fac1 	bl	1d602 <log_msg_hexdump_data_get>

		if (length) {
   11080:	9a03      	ldr	r2, [sp, #12]
   11082:	b152      	cbz	r2, 1109a <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   11084:	f8cd 8000 	str.w	r8, [sp]
   11088:	464b      	mov	r3, r9
   1108a:	eb0d 0105 	add.w	r1, sp, r5
   1108e:	4630      	mov	r0, r6
   11090:	f7ff ff4a 	bl	10f28 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
   11094:	9d03      	ldr	r5, [sp, #12]
   11096:	442c      	add	r4, r5
		length = sizeof(buf);
   11098:	e7e9      	b.n	1106e <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
   1109a:	b009      	add	sp, #36	; 0x24
   1109c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   110a0:	00022ed8 	.word	0x00022ed8

000110a4 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
   110a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   110a6:	b083      	sub	sp, #12
   110a8:	4606      	mov	r6, r0
   110aa:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
   110ac:	2700      	movs	r7, #0
	size_t offset = 0;
   110ae:	463d      	mov	r5, r7
   110b0:	e00d      	b.n	110ce <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
   110b2:	68a2      	ldr	r2, [r4, #8]
   110b4:	4413      	add	r3, r2
   110b6:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   110ba:	2f0a      	cmp	r7, #10
   110bc:	bf14      	ite	ne
   110be:	2700      	movne	r7, #0
   110c0:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
   110c2:	4620      	mov	r0, r4
   110c4:	f00c fc4c 	bl	1d960 <log_output_flush>
		offset += length;
   110c8:	9b01      	ldr	r3, [sp, #4]
   110ca:	441d      	add	r5, r3
	} while (length > 0);
   110cc:	b173      	cbz	r3, 110ec <raw_string_print+0x48>
		length = output->size;
   110ce:	68e3      	ldr	r3, [r4, #12]
   110d0:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   110d2:	462b      	mov	r3, r5
   110d4:	aa01      	add	r2, sp, #4
   110d6:	68a1      	ldr	r1, [r4, #8]
   110d8:	4630      	mov	r0, r6
   110da:	f00c fa92 	bl	1d602 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   110de:	6863      	ldr	r3, [r4, #4]
   110e0:	9a01      	ldr	r2, [sp, #4]
   110e2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   110e4:	9b01      	ldr	r3, [sp, #4]
   110e6:	2b00      	cmp	r3, #0
   110e8:	d0eb      	beq.n	110c2 <raw_string_print+0x1e>
   110ea:	e7e2      	b.n	110b2 <raw_string_print+0xe>

	if (eol) {
   110ec:	b90f      	cbnz	r7, 110f2 <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
   110ee:	b003      	add	sp, #12
   110f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   110f2:	4902      	ldr	r1, [pc, #8]	; (110fc <raw_string_print+0x58>)
   110f4:	4620      	mov	r0, r4
   110f6:	f7ff fe95 	bl	10e24 <print_formatted>
}
   110fa:	e7f8      	b.n	110ee <raw_string_print+0x4a>
   110fc:	000224f4 	.word	0x000224f4

00011100 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   11100:	b570      	push	{r4, r5, r6, lr}
   11102:	b082      	sub	sp, #8
   11104:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   11106:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   11108:	f242 730f 	movw	r3, #9999	; 0x270f
   1110c:	428b      	cmp	r3, r1
   1110e:	bf28      	it	cs
   11110:	460b      	movcs	r3, r1
   11112:	4a0e      	ldr	r2, [pc, #56]	; (1114c <log_output_dropped_process+0x4c>)
   11114:	2105      	movs	r1, #5
   11116:	4668      	mov	r0, sp
   11118:	f00b fb56 	bl	1c7c8 <snprintk>
   1111c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   1111e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   11120:	685b      	ldr	r3, [r3, #4]
   11122:	220b      	movs	r2, #11
   11124:	490a      	ldr	r1, [pc, #40]	; (11150 <log_output_dropped_process+0x50>)
   11126:	4628      	mov	r0, r5
   11128:	f00c fa73 	bl	1d612 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   1112c:	6863      	ldr	r3, [r4, #4]
   1112e:	685b      	ldr	r3, [r3, #4]
   11130:	4632      	mov	r2, r6
   11132:	4669      	mov	r1, sp
   11134:	4628      	mov	r0, r5
   11136:	f00c fa6c 	bl	1d612 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   1113a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1113c:	685b      	ldr	r3, [r3, #4]
   1113e:	221b      	movs	r2, #27
   11140:	4904      	ldr	r1, [pc, #16]	; (11154 <log_output_dropped_process+0x54>)
   11142:	4628      	mov	r0, r5
   11144:	f00c fa65 	bl	1d612 <buffer_write>
}
   11148:	b002      	add	sp, #8
   1114a:	bd70      	pop	{r4, r5, r6, pc}
   1114c:	00023a68 	.word	0x00023a68
   11150:	00022548 	.word	0x00022548
   11154:	0002252c 	.word	0x0002252c

00011158 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   11158:	4b07      	ldr	r3, [pc, #28]	; (11178 <log_output_timestamp_freq_set+0x20>)
   1115a:	2201      	movs	r2, #1
   1115c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1115e:	4b07      	ldr	r3, [pc, #28]	; (1117c <log_output_timestamp_freq_set+0x24>)
   11160:	4298      	cmp	r0, r3
   11162:	d905      	bls.n	11170 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   11164:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   11166:	4a04      	ldr	r2, [pc, #16]	; (11178 <log_output_timestamp_freq_set+0x20>)
   11168:	6813      	ldr	r3, [r2, #0]
   1116a:	005b      	lsls	r3, r3, #1
   1116c:	6013      	str	r3, [r2, #0]
   1116e:	e7f6      	b.n	1115e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   11170:	4b03      	ldr	r3, [pc, #12]	; (11180 <log_output_timestamp_freq_set+0x28>)
   11172:	6018      	str	r0, [r3, #0]
}
   11174:	4770      	bx	lr
   11176:	bf00      	nop
   11178:	20001e64 	.word	0x20001e64
   1117c:	000f4240 	.word	0x000f4240
   11180:	20001e60 	.word	0x20001e60

00011184 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   11184:	b570      	push	{r4, r5, r6, lr}
   11186:	4606      	mov	r6, r0
   11188:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
   1118a:	2400      	movs	r4, #0
   1118c:	42ac      	cmp	r4, r5
   1118e:	d207      	bcs.n	111a0 <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   11190:	4b04      	ldr	r3, [pc, #16]	; (111a4 <char_out+0x20>)
   11192:	6818      	ldr	r0, [r3, #0]
   11194:	5d31      	ldrb	r1, [r6, r4]
				      unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
						unsigned char out_char)
{
	const struct uart_driver_api *api =
   11196:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
   11198:	685b      	ldr	r3, [r3, #4]
   1119a:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   1119c:	3401      	adds	r4, #1
   1119e:	e7f5      	b.n	1118c <char_out+0x8>
#endif
	}

	return length;
}
   111a0:	4628      	mov	r0, r5
   111a2:	bd70      	pop	{r4, r5, r6, pc}
   111a4:	20001e7c 	.word	0x20001e7c

000111a8 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   111a8:	4b01      	ldr	r3, [pc, #4]	; (111b0 <log_backend_uart_init+0x8>)
   111aa:	4a02      	ldr	r2, [pc, #8]	; (111b4 <log_backend_uart_init+0xc>)
   111ac:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   111ae:	4770      	bx	lr
   111b0:	20001e7c 	.word	0x20001e7c
   111b4:	00021d3c 	.word	0x00021d3c

000111b8 <panic>:

static void panic(struct log_backend const *const backend)
{
   111b8:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   111ba:	4802      	ldr	r0, [pc, #8]	; (111c4 <panic+0xc>)
   111bc:	f00c fbd0 	bl	1d960 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   111c0:	bd08      	pop	{r3, pc}
   111c2:	bf00      	nop
   111c4:	00022598 	.word	0x00022598

000111c8 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   111c8:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   111ca:	4802      	ldr	r0, [pc, #8]	; (111d4 <dropped+0xc>)
   111cc:	f7ff ff98 	bl	11100 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   111d0:	bd08      	pop	{r3, pc}
   111d2:	bf00      	nop
   111d4:	00022598 	.word	0x00022598

000111d8 <put>:
{
   111d8:	b510      	push	{r4, lr}
   111da:	460c      	mov	r4, r1
	log_msg_get(msg);
   111dc:	4608      	mov	r0, r1
   111de:	f00c f93c 	bl	1d45a <log_msg_get>
	log_output_msg_process(output, msg, flags);
   111e2:	220f      	movs	r2, #15
   111e4:	4621      	mov	r1, r4
   111e6:	4803      	ldr	r0, [pc, #12]	; (111f4 <put+0x1c>)
   111e8:	f00c fbe3 	bl	1d9b2 <log_output_msg_process>
	log_msg_put(msg);
   111ec:	4620      	mov	r0, r4
   111ee:	f00c f958 	bl	1d4a2 <log_msg_put>
}
   111f2:	bd10      	pop	{r4, pc}
   111f4:	00022598 	.word	0x00022598

000111f8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   111f8:	4b01      	ldr	r3, [pc, #4]	; (11200 <log_backend_rtt_init+0x8>)
   111fa:	2201      	movs	r2, #1
   111fc:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   111fe:	4770      	bx	lr
   11200:	200031a1 	.word	0x200031a1

00011204 <on_failed_write>:
{
   11204:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
   11206:	b918      	cbnz	r0, 11210 <on_failed_write+0xc>
		host_present = false;
   11208:	4b08      	ldr	r3, [pc, #32]	; (1122c <on_failed_write+0x28>)
   1120a:	2200      	movs	r2, #0
   1120c:	701a      	strb	r2, [r3, #0]
}
   1120e:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11210:	4b07      	ldr	r3, [pc, #28]	; (11230 <on_failed_write+0x2c>)
   11212:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
   11214:	b123      	cbz	r3, 11220 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
   11216:	f241 3088 	movw	r0, #5000	; 0x1388
   1121a:	f010 fc13 	bl	21a44 <z_impl_k_busy_wait>
}
   1121e:	e7f6      	b.n	1120e <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
   11220:	20a4      	movs	r0, #164	; 0xa4
   11222:	2100      	movs	r1, #0
   11224:	f00a fccc 	bl	1bbc0 <z_impl_k_sleep>
}
   11228:	e7f1      	b.n	1120e <on_failed_write+0xa>
   1122a:	bf00      	nop
   1122c:	200031a1 	.word	0x200031a1
   11230:	200031a2 	.word	0x200031a2

00011234 <on_write>:
{
   11234:	b538      	push	{r3, r4, r5, lr}
   11236:	4604      	mov	r4, r0
	host_present = true;
   11238:	4b0a      	ldr	r3, [pc, #40]	; (11264 <on_write+0x30>)
   1123a:	2201      	movs	r2, #1
   1123c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
   1123e:	4b0a      	ldr	r3, [pc, #40]	; (11268 <on_write+0x34>)
   11240:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
   11242:	b903      	cbnz	r3, 11246 <on_write+0x12>
}
   11244:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   11246:	2000      	movs	r0, #0
   11248:	f009 fa94 	bl	1a774 <SEGGER_RTT_HasDataUp>
   1124c:	2800      	cmp	r0, #0
   1124e:	d0f9      	beq.n	11244 <on_write+0x10>
   11250:	4b04      	ldr	r3, [pc, #16]	; (11264 <on_write+0x30>)
   11252:	781b      	ldrb	r3, [r3, #0]
   11254:	2b00      	cmp	r3, #0
   11256:	d0f5      	beq.n	11244 <on_write+0x10>
			on_failed_write(retry_cnt--);
   11258:	1e65      	subs	r5, r4, #1
   1125a:	4620      	mov	r0, r4
   1125c:	f7ff ffd2 	bl	11204 <on_failed_write>
   11260:	462c      	mov	r4, r5
   11262:	e7f0      	b.n	11246 <on_write+0x12>
   11264:	200031a1 	.word	0x200031a1
   11268:	200031a2 	.word	0x200031a2

0001126c <data_out_block_mode>:
{
   1126c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11270:	4606      	mov	r6, r0
   11272:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   11274:	2704      	movs	r7, #4
   11276:	e00d      	b.n	11294 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   11278:	462a      	mov	r2, r5
   1127a:	4631      	mov	r1, r6
   1127c:	2000      	movs	r0, #0
   1127e:	f009 fa15 	bl	1a6ac <SEGGER_RTT_WriteSkipNoLock>
   11282:	4604      	mov	r4, r0
   11284:	e01c      	b.n	112c0 <data_out_block_mode+0x54>
			on_write(retry_cnt);
   11286:	4638      	mov	r0, r7
   11288:	f7ff ffd4 	bl	11234 <on_write>
	} while ((ret == 0) && host_present);
   1128c:	bb1c      	cbnz	r4, 112d6 <data_out_block_mode+0x6a>
   1128e:	4b16      	ldr	r3, [pc, #88]	; (112e8 <data_out_block_mode+0x7c>)
   11290:	781b      	ldrb	r3, [r3, #0]
   11292:	b303      	cbz	r3, 112d6 <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   11294:	4b15      	ldr	r3, [pc, #84]	; (112ec <data_out_block_mode+0x80>)
   11296:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
   11298:	2b00      	cmp	r3, #0
   1129a:	d1ed      	bne.n	11278 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
   1129c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 112f0 <data_out_block_mode+0x84>
   112a0:	f04f 32ff 	mov.w	r2, #4294967295
   112a4:	f04f 33ff 	mov.w	r3, #4294967295
   112a8:	4640      	mov	r0, r8
   112aa:	f009 fdcd 	bl	1ae48 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   112ae:	462a      	mov	r2, r5
   112b0:	4631      	mov	r1, r6
   112b2:	2000      	movs	r0, #0
   112b4:	f009 f9fa 	bl	1a6ac <SEGGER_RTT_WriteSkipNoLock>
   112b8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   112ba:	4640      	mov	r0, r8
   112bc:	f009 fe4e 	bl	1af5c <z_impl_k_mutex_unlock>
		if (ret) {
   112c0:	2c00      	cmp	r4, #0
   112c2:	d1e0      	bne.n	11286 <data_out_block_mode+0x1a>
		} else if (host_present) {
   112c4:	4b08      	ldr	r3, [pc, #32]	; (112e8 <data_out_block_mode+0x7c>)
   112c6:	781b      	ldrb	r3, [r3, #0]
   112c8:	2b00      	cmp	r3, #0
   112ca:	d0df      	beq.n	1128c <data_out_block_mode+0x20>
			retry_cnt--;
   112cc:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
   112ce:	4638      	mov	r0, r7
   112d0:	f7ff ff98 	bl	11204 <on_failed_write>
   112d4:	e7da      	b.n	1128c <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
   112d6:	b914      	cbnz	r4, 112de <data_out_block_mode+0x72>
   112d8:	4b03      	ldr	r3, [pc, #12]	; (112e8 <data_out_block_mode+0x7c>)
   112da:	781b      	ldrb	r3, [r3, #0]
   112dc:	b903      	cbnz	r3, 112e0 <data_out_block_mode+0x74>
   112de:	462c      	mov	r4, r5
}
   112e0:	4620      	mov	r0, r4
   112e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   112e6:	bf00      	nop
   112e8:	200031a1 	.word	0x200031a1
   112ec:	200031a2 	.word	0x200031a2
   112f0:	20000708 	.word	0x20000708

000112f4 <panic>:

static void panic(struct log_backend const *const backend)
{
   112f4:	b508      	push	{r3, lr}
	panic_mode = true;
   112f6:	4b03      	ldr	r3, [pc, #12]	; (11304 <panic+0x10>)
   112f8:	2201      	movs	r2, #1
   112fa:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
   112fc:	4802      	ldr	r0, [pc, #8]	; (11308 <panic+0x14>)
   112fe:	f00c fb2f 	bl	1d960 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
   11302:	bd08      	pop	{r3, pc}
   11304:	200031a2 	.word	0x200031a2
   11308:	000225d4 	.word	0x000225d4

0001130c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   1130c:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
   1130e:	4802      	ldr	r0, [pc, #8]	; (11318 <dropped+0xc>)
   11310:	f7ff fef6 	bl	11100 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
   11314:	bd08      	pop	{r3, pc}
   11316:	bf00      	nop
   11318:	000225d4 	.word	0x000225d4

0001131c <put>:
{
   1131c:	b510      	push	{r4, lr}
   1131e:	460c      	mov	r4, r1
	log_msg_get(msg);
   11320:	4608      	mov	r0, r1
   11322:	f00c f89a 	bl	1d45a <log_msg_get>
	log_output_msg_process(output, msg, flags);
   11326:	220f      	movs	r2, #15
   11328:	4621      	mov	r1, r4
   1132a:	4803      	ldr	r0, [pc, #12]	; (11338 <put+0x1c>)
   1132c:	f00c fb41 	bl	1d9b2 <log_output_msg_process>
	log_msg_put(msg);
   11330:	4620      	mov	r0, r4
   11332:	f00c f8b6 	bl	1d4a2 <log_msg_put>
}
   11336:	bd10      	pop	{r4, pc}
   11338:	000225d4 	.word	0x000225d4

0001133c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   1133c:	4b1b      	ldr	r3, [pc, #108]	; (113ac <pm_system_resume+0x70>)
   1133e:	681b      	ldr	r3, [r3, #0]
   11340:	2b00      	cmp	r3, #0
   11342:	d132      	bne.n	113aa <pm_system_resume+0x6e>
{
   11344:	b530      	push	{r4, r5, lr}
   11346:	b085      	sub	sp, #20
		post_ops_done = 1;
   11348:	4b18      	ldr	r3, [pc, #96]	; (113ac <pm_system_resume+0x70>)
   1134a:	2201      	movs	r2, #1
   1134c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   1134e:	4b18      	ldr	r3, [pc, #96]	; (113b0 <pm_system_resume+0x74>)
   11350:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   11354:	ab04      	add	r3, sp, #16
   11356:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1135a:	4b16      	ldr	r3, [pc, #88]	; (113b4 <pm_system_resume+0x78>)
   1135c:	b163      	cbz	r3, 11378 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
   1135e:	f00c fdb9 	bl	1ded4 <pm_power_state_exit_post_ops>
	__asm__ volatile(
   11362:	f04f 0340 	mov.w	r3, #64	; 0x40
   11366:	f3ef 8511 	mrs	r5, BASEPRI
   1136a:	f383 8812 	msr	BASEPRI_MAX, r3
   1136e:	f3bf 8f6f 	isb	sy
   11372:	4b11      	ldr	r3, [pc, #68]	; (113b8 <pm_system_resume+0x7c>)
   11374:	681c      	ldr	r4, [r3, #0]
   11376:	e00a      	b.n	1138e <pm_system_resume+0x52>
	__asm__ volatile(
   11378:	2300      	movs	r3, #0
   1137a:	f383 8811 	msr	BASEPRI, r3
   1137e:	f3bf 8f6f 	isb	sy
}
   11382:	e7ee      	b.n	11362 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11384:	4623      	mov	r3, r4
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   11386:	b10c      	cbz	r4, 1138c <pm_system_resume+0x50>
	return node->next;
   11388:	6823      	ldr	r3, [r4, #0]
   1138a:	b143      	cbz	r3, 1139e <pm_system_resume+0x62>
{
   1138c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1138e:	b134      	cbz	r4, 1139e <pm_system_resume+0x62>
			callback = notifier->state_exit;
   11390:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   11392:	2b00      	cmp	r3, #0
   11394:	d0f6      	beq.n	11384 <pm_system_resume+0x48>
			callback(z_power_state.state);
   11396:	4a06      	ldr	r2, [pc, #24]	; (113b0 <pm_system_resume+0x74>)
   11398:	7810      	ldrb	r0, [r2, #0]
   1139a:	4798      	blx	r3
   1139c:	e7f2      	b.n	11384 <pm_system_resume+0x48>
	__asm__ volatile(
   1139e:	f385 8811 	msr	BASEPRI, r5
   113a2:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
   113a6:	b005      	add	sp, #20
   113a8:	bd30      	pop	{r4, r5, pc}
   113aa:	4770      	bx	lr
   113ac:	20000528 	.word	0x20000528
   113b0:	20001eac 	.word	0x20001eac
   113b4:	0001ded5 	.word	0x0001ded5
   113b8:	20001ea4 	.word	0x20001ea4

000113bc <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   113bc:	b570      	push	{r4, r5, r6, lr}
   113be:	b088      	sub	sp, #32
   113c0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   113c2:	4c2a      	ldr	r4, [pc, #168]	; (1146c <pm_system_suspend+0xb0>)
   113c4:	466d      	mov	r5, sp
   113c6:	4601      	mov	r1, r0
   113c8:	4628      	mov	r0, r5
   113ca:	f00c fb31 	bl	1da30 <pm_policy_next_state>
   113ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   113d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   113d6:	7820      	ldrb	r0, [r4, #0]
   113d8:	2800      	cmp	r0, #0
   113da:	d045      	beq.n	11468 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   113dc:	4b24      	ldr	r3, [pc, #144]	; (11470 <pm_system_suspend+0xb4>)
   113de:	2200      	movs	r2, #0
   113e0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   113e2:	f1b6 3fff 	cmp.w	r6, #4294967295
   113e6:	d10c      	bne.n	11402 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   113e8:	f00a f8d6 	bl	1b598 <k_sched_lock>
	__asm__ volatile(
   113ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   113f0:	f3ef 8511 	mrs	r5, BASEPRI
   113f4:	f383 8812 	msr	BASEPRI_MAX, r3
   113f8:	f3bf 8f6f 	isb	sy
	return list->head;
   113fc:	4b1d      	ldr	r3, [pc, #116]	; (11474 <pm_system_suspend+0xb8>)
   113fe:	681c      	ldr	r4, [r3, #0]
   11400:	e016      	b.n	11430 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   11402:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   11404:	0c59      	lsrs	r1, r3, #17
   11406:	03d8      	lsls	r0, r3, #15
   11408:	4c1b      	ldr	r4, [pc, #108]	; (11478 <pm_system_suspend+0xbc>)
   1140a:	4a1c      	ldr	r2, [pc, #112]	; (1147c <pm_system_suspend+0xc0>)
   1140c:	2300      	movs	r3, #0
   1140e:	1900      	adds	r0, r0, r4
   11410:	f04f 0400 	mov.w	r4, #0
   11414:	eb44 0101 	adc.w	r1, r4, r1
   11418:	f7ee fe72 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   1141c:	2101      	movs	r1, #1
   1141e:	1a30      	subs	r0, r6, r0
   11420:	f010 fae1 	bl	219e6 <z_set_timeout_expiry>
   11424:	e7e0      	b.n	113e8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11426:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   11428:	b10c      	cbz	r4, 1142e <pm_system_suspend+0x72>
	return node->next;
   1142a:	6823      	ldr	r3, [r4, #0]
   1142c:	b143      	cbz	r3, 11440 <pm_system_suspend+0x84>
{
   1142e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   11430:	b134      	cbz	r4, 11440 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
   11432:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   11434:	2b00      	cmp	r3, #0
   11436:	d0f6      	beq.n	11426 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
   11438:	4a0c      	ldr	r2, [pc, #48]	; (1146c <pm_system_suspend+0xb0>)
   1143a:	7810      	ldrb	r0, [r2, #0]
   1143c:	4798      	blx	r3
   1143e:	e7f2      	b.n	11426 <pm_system_suspend+0x6a>
	__asm__ volatile(
   11440:	f385 8811 	msr	BASEPRI, r5
   11444:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
   11448:	4b08      	ldr	r3, [pc, #32]	; (1146c <pm_system_suspend+0xb0>)
   1144a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1144e:	ab08      	add	r3, sp, #32
   11450:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   11454:	4b0a      	ldr	r3, [pc, #40]	; (11480 <pm_system_suspend+0xc4>)
   11456:	b10b      	cbz	r3, 1145c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
   11458:	f00c fd29 	bl	1deae <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   1145c:	f7ff ff6e 	bl	1133c <pm_system_resume>
	k_sched_unlock();
   11460:	f00a fa98 	bl	1b994 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   11464:	4b01      	ldr	r3, [pc, #4]	; (1146c <pm_system_suspend+0xb0>)
   11466:	7818      	ldrb	r0, [r3, #0]
}
   11468:	b008      	add	sp, #32
   1146a:	bd70      	pop	{r4, r5, r6, pc}
   1146c:	20001eac 	.word	0x20001eac
   11470:	20000528 	.word	0x20000528
   11474:	20001ea4 	.word	0x20001ea4
   11478:	000f423f 	.word	0x000f423f
   1147c:	000f4240 	.word	0x000f4240
   11480:	0001deaf 	.word	0x0001deaf

00011484 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   11484:	b4f0      	push	{r4, r5, r6, r7}
   11486:	b08c      	sub	sp, #48	; 0x30
   11488:	4607      	mov	r7, r0
   1148a:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   1148c:	ac01      	add	r4, sp, #4
   1148e:	4d2a      	ldr	r5, [pc, #168]	; (11538 <tc_aes128_set_encrypt_key+0xb4>)
   11490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11498:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   1149c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   114a0:	2f00      	cmp	r7, #0
   114a2:	d045      	beq.n	11530 <tc_aes128_set_encrypt_key+0xac>
   114a4:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   114a6:	2e00      	cmp	r6, #0
   114a8:	d044      	beq.n	11534 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   114aa:	2300      	movs	r3, #0
   114ac:	e00f      	b.n	114ce <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   114ae:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   114b2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   114b6:	784a      	ldrb	r2, [r1, #1]
   114b8:	0412      	lsls	r2, r2, #16
   114ba:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   114be:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   114c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   114c4:	78c9      	ldrb	r1, [r1, #3]
   114c6:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   114c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   114cc:	3301      	adds	r3, #1
   114ce:	2b03      	cmp	r3, #3
   114d0:	d9ed      	bls.n	114ae <tc_aes128_set_encrypt_key+0x2a>
   114d2:	e006      	b.n	114e2 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   114d4:	1f19      	subs	r1, r3, #4
   114d6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   114da:	404a      	eors	r2, r1
   114dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   114e0:	3301      	adds	r3, #1
   114e2:	2b2b      	cmp	r3, #43	; 0x2b
   114e4:	d820      	bhi.n	11528 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   114e6:	1e5a      	subs	r2, r3, #1
   114e8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   114ec:	f013 0f03 	tst.w	r3, #3
   114f0:	d1f0      	bne.n	114d4 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   114f2:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   114f6:	0e11      	lsrs	r1, r2, #24
   114f8:	4c10      	ldr	r4, [pc, #64]	; (1153c <tc_aes128_set_encrypt_key+0xb8>)
   114fa:	5c65      	ldrb	r5, [r4, r1]
   114fc:	f3c2 4107 	ubfx	r1, r2, #16, #8
   11500:	5c61      	ldrb	r1, [r4, r1]
   11502:	0409      	lsls	r1, r1, #16
   11504:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   11508:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1150c:	5d65      	ldrb	r5, [r4, r5]
   1150e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   11512:	b2d2      	uxtb	r2, r2
   11514:	5ca2      	ldrb	r2, [r4, r2]
   11516:	4311      	orrs	r1, r2
   11518:	f023 0203 	bic.w	r2, r3, #3
   1151c:	ac0c      	add	r4, sp, #48	; 0x30
   1151e:	4422      	add	r2, r4
   11520:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   11524:	404a      	eors	r2, r1
   11526:	e7d5      	b.n	114d4 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   11528:	2001      	movs	r0, #1
}
   1152a:	b00c      	add	sp, #48	; 0x30
   1152c:	bcf0      	pop	{r4, r5, r6, r7}
   1152e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   11530:	2000      	movs	r0, #0
   11532:	e7fa      	b.n	1152a <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   11534:	2000      	movs	r0, #0
   11536:	e7f8      	b.n	1152a <tc_aes128_set_encrypt_key+0xa6>
   11538:	000220e4 	.word	0x000220e4
   1153c:	000225ec 	.word	0x000225ec

00011540 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   11540:	2800      	cmp	r0, #0
   11542:	f000 839a 	beq.w	11c7a <tc_aes_encrypt+0x73a>
{
   11546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1154a:	b088      	sub	sp, #32
   1154c:	4616      	mov	r6, r2
   1154e:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   11550:	2900      	cmp	r1, #0
   11552:	f000 8394 	beq.w	11c7e <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   11556:	2a00      	cmp	r2, #0
   11558:	f000 8393 	beq.w	11c82 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1155c:	2310      	movs	r3, #16
   1155e:	460a      	mov	r2, r1
   11560:	4619      	mov	r1, r3
   11562:	eb0d 0003 	add.w	r0, sp, r3
   11566:	f00c fa68 	bl	1da3a <_copy>
	add_round_key(state, s->words);
   1156a:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1156c:	6833      	ldr	r3, [r6, #0]
   1156e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   11572:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11576:	f88d 2010 	strb.w	r2, [sp, #16]
   1157a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1157e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   11582:	404a      	eors	r2, r1
   11584:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   11588:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1158c:	f89d 1012 	ldrb.w	r1, [sp, #18]
   11590:	404a      	eors	r2, r1
   11592:	f88d 2012 	strb.w	r2, [sp, #18]
   11596:	b2db      	uxtb	r3, r3
   11598:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1159c:	4053      	eors	r3, r2
   1159e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   115a2:	6873      	ldr	r3, [r6, #4]
   115a4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   115a8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   115ac:	f88d 2014 	strb.w	r2, [sp, #20]
   115b0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   115b4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   115b8:	404a      	eors	r2, r1
   115ba:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   115be:	f3c3 2207 	ubfx	r2, r3, #8, #8
   115c2:	f89d 1016 	ldrb.w	r1, [sp, #22]
   115c6:	404a      	eors	r2, r1
   115c8:	f88d 2016 	strb.w	r2, [sp, #22]
   115cc:	b2db      	uxtb	r3, r3
   115ce:	f89d 2017 	ldrb.w	r2, [sp, #23]
   115d2:	4053      	eors	r3, r2
   115d4:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   115d8:	68b3      	ldr	r3, [r6, #8]
   115da:	f89d 2018 	ldrb.w	r2, [sp, #24]
   115de:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   115e2:	f88d 2018 	strb.w	r2, [sp, #24]
   115e6:	f3c3 4207 	ubfx	r2, r3, #16, #8
   115ea:	f89d 1019 	ldrb.w	r1, [sp, #25]
   115ee:	404a      	eors	r2, r1
   115f0:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   115f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   115f8:	f89d 101a 	ldrb.w	r1, [sp, #26]
   115fc:	404a      	eors	r2, r1
   115fe:	f88d 201a 	strb.w	r2, [sp, #26]
   11602:	b2db      	uxtb	r3, r3
   11604:	f89d 201b 	ldrb.w	r2, [sp, #27]
   11608:	4053      	eors	r3, r2
   1160a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1160e:	68f3      	ldr	r3, [r6, #12]
   11610:	f89d 201c 	ldrb.w	r2, [sp, #28]
   11614:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11618:	f88d 201c 	strb.w	r2, [sp, #28]
   1161c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11620:	f89d 101d 	ldrb.w	r1, [sp, #29]
   11624:	404a      	eors	r2, r1
   11626:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1162a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1162e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   11632:	404a      	eors	r2, r1
   11634:	f88d 201e 	strb.w	r2, [sp, #30]
   11638:	b2db      	uxtb	r3, r3
   1163a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1163e:	4053      	eors	r3, r2
   11640:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   11644:	2400      	movs	r4, #0
}
   11646:	e239      	b.n	11abc <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   11648:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1164c:	f88d 3000 	strb.w	r3, [sp]
   11650:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11654:	f88d 3001 	strb.w	r3, [sp, #1]
   11658:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1165c:	f88d 3002 	strb.w	r3, [sp, #2]
   11660:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11664:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   11668:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1166c:	f88d 3004 	strb.w	r3, [sp, #4]
   11670:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11674:	f88d 3005 	strb.w	r3, [sp, #5]
   11678:	f89d 301e 	ldrb.w	r3, [sp, #30]
   1167c:	f88d 3006 	strb.w	r3, [sp, #6]
   11680:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11684:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   11688:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1168c:	f88d 3008 	strb.w	r3, [sp, #8]
   11690:	f89d 301d 	ldrb.w	r3, [sp, #29]
   11694:	f88d 3009 	strb.w	r3, [sp, #9]
   11698:	f89d 3012 	ldrb.w	r3, [sp, #18]
   1169c:	f88d 300a 	strb.w	r3, [sp, #10]
   116a0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   116a4:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   116a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   116ac:	f88d 300c 	strb.w	r3, [sp, #12]
   116b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   116b4:	f88d 300d 	strb.w	r3, [sp, #13]
   116b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   116bc:	f88d 300e 	strb.w	r3, [sp, #14]
   116c0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   116c4:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   116c8:	2310      	movs	r3, #16
   116ca:	466a      	mov	r2, sp
   116cc:	4619      	mov	r1, r3
   116ce:	eb0d 0003 	add.w	r0, sp, r3
   116d2:	f00c f9b2 	bl	1da3a <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   116d6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   116da:	f00c f9bf 	bl	1da5c <_double_byte>
   116de:	4680      	mov	r8, r0
   116e0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   116e4:	f00c f9ba 	bl	1da5c <_double_byte>
   116e8:	4601      	mov	r1, r0
   116ea:	f89d 0011 	ldrb.w	r0, [sp, #17]
   116ee:	f89d 2012 	ldrb.w	r2, [sp, #18]
   116f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   116f6:	4041      	eors	r1, r0
   116f8:	ea88 0801 	eor.w	r8, r8, r1
   116fc:	ea82 0208 	eor.w	r2, r2, r8
   11700:	4053      	eors	r3, r2
   11702:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11706:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1170a:	f00c f9a7 	bl	1da5c <_double_byte>
   1170e:	ea88 0800 	eor.w	r8, r8, r0
   11712:	fa5f f888 	uxtb.w	r8, r8
   11716:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1171a:	f00c f99f 	bl	1da5c <_double_byte>
   1171e:	4602      	mov	r2, r0
   11720:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11724:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11728:	4042      	eors	r2, r0
   1172a:	ea88 0802 	eor.w	r8, r8, r2
   1172e:	ea83 0308 	eor.w	r3, r3, r8
   11732:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   11736:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1173a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1173e:	ea88 0803 	eor.w	r8, r8, r3
   11742:	f00c f98b 	bl	1da5c <_double_byte>
   11746:	ea88 0800 	eor.w	r8, r8, r0
   1174a:	fa5f f888 	uxtb.w	r8, r8
   1174e:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11752:	f00c f983 	bl	1da5c <_double_byte>
   11756:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1175a:	4058      	eors	r0, r3
   1175c:	ea88 0800 	eor.w	r8, r8, r0
   11760:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   11764:	f89d 0010 	ldrb.w	r0, [sp, #16]
   11768:	f00c f978 	bl	1da5c <_double_byte>
   1176c:	f89d 2010 	ldrb.w	r2, [sp, #16]
   11770:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11774:	f89d 8012 	ldrb.w	r8, [sp, #18]
   11778:	4050      	eors	r0, r2
   1177a:	4043      	eors	r3, r0
   1177c:	ea88 0803 	eor.w	r8, r8, r3
   11780:	fa5f f888 	uxtb.w	r8, r8
   11784:	f89d 0013 	ldrb.w	r0, [sp, #19]
   11788:	f00c f968 	bl	1da5c <_double_byte>
   1178c:	ea88 0800 	eor.w	r8, r8, r0
   11790:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11794:	f89d 0014 	ldrb.w	r0, [sp, #20]
   11798:	f00c f960 	bl	1da5c <_double_byte>
   1179c:	4680      	mov	r8, r0
   1179e:	f89d 0015 	ldrb.w	r0, [sp, #21]
   117a2:	f00c f95b 	bl	1da5c <_double_byte>
   117a6:	4601      	mov	r1, r0
   117a8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   117ac:	f89d 2016 	ldrb.w	r2, [sp, #22]
   117b0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   117b4:	4041      	eors	r1, r0
   117b6:	ea88 0801 	eor.w	r8, r8, r1
   117ba:	ea82 0208 	eor.w	r2, r2, r8
   117be:	4053      	eors	r3, r2
   117c0:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   117c4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   117c8:	f00c f948 	bl	1da5c <_double_byte>
   117cc:	ea88 0800 	eor.w	r8, r8, r0
   117d0:	fa5f f888 	uxtb.w	r8, r8
   117d4:	f89d 0016 	ldrb.w	r0, [sp, #22]
   117d8:	f00c f940 	bl	1da5c <_double_byte>
   117dc:	4602      	mov	r2, r0
   117de:	f89d 0016 	ldrb.w	r0, [sp, #22]
   117e2:	f89d 3017 	ldrb.w	r3, [sp, #23]
   117e6:	4042      	eors	r2, r0
   117e8:	ea88 0802 	eor.w	r8, r8, r2
   117ec:	ea83 0308 	eor.w	r3, r3, r8
   117f0:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   117f4:	f89d 8014 	ldrb.w	r8, [sp, #20]
   117f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   117fc:	ea88 0803 	eor.w	r8, r8, r3
   11800:	f00c f92c 	bl	1da5c <_double_byte>
   11804:	ea88 0800 	eor.w	r8, r8, r0
   11808:	fa5f f888 	uxtb.w	r8, r8
   1180c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11810:	f00c f924 	bl	1da5c <_double_byte>
   11814:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11818:	4058      	eors	r0, r3
   1181a:	ea88 0800 	eor.w	r8, r8, r0
   1181e:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   11822:	f89d 0014 	ldrb.w	r0, [sp, #20]
   11826:	f00c f919 	bl	1da5c <_double_byte>
   1182a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1182e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11832:	f89d 8016 	ldrb.w	r8, [sp, #22]
   11836:	4050      	eors	r0, r2
   11838:	4043      	eors	r3, r0
   1183a:	ea88 0803 	eor.w	r8, r8, r3
   1183e:	fa5f f888 	uxtb.w	r8, r8
   11842:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11846:	f00c f909 	bl	1da5c <_double_byte>
   1184a:	ea88 0800 	eor.w	r8, r8, r0
   1184e:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11852:	f89d 0018 	ldrb.w	r0, [sp, #24]
   11856:	f00c f901 	bl	1da5c <_double_byte>
   1185a:	4680      	mov	r8, r0
   1185c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   11860:	f00c f8fc 	bl	1da5c <_double_byte>
   11864:	4601      	mov	r1, r0
   11866:	f89d 0019 	ldrb.w	r0, [sp, #25]
   1186a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   1186e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   11872:	4041      	eors	r1, r0
   11874:	ea88 0801 	eor.w	r8, r8, r1
   11878:	ea82 0208 	eor.w	r2, r2, r8
   1187c:	4053      	eors	r3, r2
   1187e:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11882:	f89d 8018 	ldrb.w	r8, [sp, #24]
   11886:	f00c f8e9 	bl	1da5c <_double_byte>
   1188a:	ea88 0800 	eor.w	r8, r8, r0
   1188e:	fa5f f888 	uxtb.w	r8, r8
   11892:	f89d 001a 	ldrb.w	r0, [sp, #26]
   11896:	f00c f8e1 	bl	1da5c <_double_byte>
   1189a:	4602      	mov	r2, r0
   1189c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   118a0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   118a4:	4042      	eors	r2, r0
   118a6:	ea88 0802 	eor.w	r8, r8, r2
   118aa:	ea83 0308 	eor.w	r3, r3, r8
   118ae:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   118b2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   118b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   118ba:	ea88 0803 	eor.w	r8, r8, r3
   118be:	f00c f8cd 	bl	1da5c <_double_byte>
   118c2:	ea88 0800 	eor.w	r8, r8, r0
   118c6:	fa5f f888 	uxtb.w	r8, r8
   118ca:	f89d 001b 	ldrb.w	r0, [sp, #27]
   118ce:	f00c f8c5 	bl	1da5c <_double_byte>
   118d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   118d6:	4058      	eors	r0, r3
   118d8:	ea88 0800 	eor.w	r8, r8, r0
   118dc:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   118e0:	f89d 0018 	ldrb.w	r0, [sp, #24]
   118e4:	f00c f8ba 	bl	1da5c <_double_byte>
   118e8:	f89d 2018 	ldrb.w	r2, [sp, #24]
   118ec:	f89d 3019 	ldrb.w	r3, [sp, #25]
   118f0:	f89d 801a 	ldrb.w	r8, [sp, #26]
   118f4:	4050      	eors	r0, r2
   118f6:	4043      	eors	r3, r0
   118f8:	ea88 0803 	eor.w	r8, r8, r3
   118fc:	fa5f f888 	uxtb.w	r8, r8
   11900:	f89d 001b 	ldrb.w	r0, [sp, #27]
   11904:	f00c f8aa 	bl	1da5c <_double_byte>
   11908:	ea88 0800 	eor.w	r8, r8, r0
   1190c:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   11910:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11914:	f00c f8a2 	bl	1da5c <_double_byte>
   11918:	4680      	mov	r8, r0
   1191a:	f89d 001d 	ldrb.w	r0, [sp, #29]
   1191e:	f00c f89d 	bl	1da5c <_double_byte>
   11922:	4601      	mov	r1, r0
   11924:	f89d 001d 	ldrb.w	r0, [sp, #29]
   11928:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1192c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11930:	4041      	eors	r1, r0
   11932:	ea88 0801 	eor.w	r8, r8, r1
   11936:	ea82 0208 	eor.w	r2, r2, r8
   1193a:	4053      	eors	r3, r2
   1193c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   11940:	f89d 801c 	ldrb.w	r8, [sp, #28]
   11944:	f00c f88a 	bl	1da5c <_double_byte>
   11948:	ea88 0800 	eor.w	r8, r8, r0
   1194c:	fa5f f888 	uxtb.w	r8, r8
   11950:	f89d 001e 	ldrb.w	r0, [sp, #30]
   11954:	f00c f882 	bl	1da5c <_double_byte>
   11958:	4602      	mov	r2, r0
   1195a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1195e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11962:	4042      	eors	r2, r0
   11964:	ea88 0802 	eor.w	r8, r8, r2
   11968:	ea83 0308 	eor.w	r3, r3, r8
   1196c:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   11970:	f89d 801c 	ldrb.w	r8, [sp, #28]
   11974:	f89d 301d 	ldrb.w	r3, [sp, #29]
   11978:	ea88 0803 	eor.w	r8, r8, r3
   1197c:	f00c f86e 	bl	1da5c <_double_byte>
   11980:	ea88 0800 	eor.w	r8, r8, r0
   11984:	fa5f f888 	uxtb.w	r8, r8
   11988:	f89d 001f 	ldrb.w	r0, [sp, #31]
   1198c:	f00c f866 	bl	1da5c <_double_byte>
   11990:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11994:	4058      	eors	r0, r3
   11996:	ea88 0800 	eor.w	r8, r8, r0
   1199a:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1199e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   119a2:	f00c f85b 	bl	1da5c <_double_byte>
   119a6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   119aa:	f89d 301d 	ldrb.w	r3, [sp, #29]
   119ae:	f89d 801e 	ldrb.w	r8, [sp, #30]
   119b2:	4050      	eors	r0, r2
   119b4:	4043      	eors	r3, r0
   119b6:	ea88 0803 	eor.w	r8, r8, r3
   119ba:	fa5f f888 	uxtb.w	r8, r8
   119be:	f89d 001f 	ldrb.w	r0, [sp, #31]
   119c2:	f00c f84b 	bl	1da5c <_double_byte>
   119c6:	ea88 0800 	eor.w	r8, r8, r0
   119ca:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   119ce:	2310      	movs	r3, #16
   119d0:	466a      	mov	r2, sp
   119d2:	4619      	mov	r1, r3
   119d4:	eb0d 0003 	add.w	r0, sp, r3
   119d8:	f00c f82f 	bl	1da3a <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   119dc:	3401      	adds	r4, #1
   119de:	0123      	lsls	r3, r4, #4
   119e0:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   119e4:	58eb      	ldr	r3, [r5, r3]
   119e6:	f89d 1010 	ldrb.w	r1, [sp, #16]
   119ea:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   119ee:	f88d 1010 	strb.w	r1, [sp, #16]
   119f2:	f3c3 4107 	ubfx	r1, r3, #16, #8
   119f6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   119fa:	4041      	eors	r1, r0
   119fc:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   11a00:	f3c3 2107 	ubfx	r1, r3, #8, #8
   11a04:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11a08:	4041      	eors	r1, r0
   11a0a:	f88d 1012 	strb.w	r1, [sp, #18]
   11a0e:	b2db      	uxtb	r3, r3
   11a10:	f89d 1013 	ldrb.w	r1, [sp, #19]
   11a14:	404b      	eors	r3, r1
   11a16:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   11a1a:	6853      	ldr	r3, [r2, #4]
   11a1c:	f89d 1014 	ldrb.w	r1, [sp, #20]
   11a20:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   11a24:	f88d 1014 	strb.w	r1, [sp, #20]
   11a28:	f3c3 4107 	ubfx	r1, r3, #16, #8
   11a2c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   11a30:	4041      	eors	r1, r0
   11a32:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   11a36:	f3c3 2107 	ubfx	r1, r3, #8, #8
   11a3a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   11a3e:	4041      	eors	r1, r0
   11a40:	f88d 1016 	strb.w	r1, [sp, #22]
   11a44:	b2db      	uxtb	r3, r3
   11a46:	f89d 1017 	ldrb.w	r1, [sp, #23]
   11a4a:	404b      	eors	r3, r1
   11a4c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   11a50:	6893      	ldr	r3, [r2, #8]
   11a52:	f89d 1018 	ldrb.w	r1, [sp, #24]
   11a56:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   11a5a:	f88d 1018 	strb.w	r1, [sp, #24]
   11a5e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   11a62:	f89d 0019 	ldrb.w	r0, [sp, #25]
   11a66:	4041      	eors	r1, r0
   11a68:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   11a6c:	f3c3 2107 	ubfx	r1, r3, #8, #8
   11a70:	f89d 001a 	ldrb.w	r0, [sp, #26]
   11a74:	4041      	eors	r1, r0
   11a76:	f88d 101a 	strb.w	r1, [sp, #26]
   11a7a:	b2db      	uxtb	r3, r3
   11a7c:	f89d 101b 	ldrb.w	r1, [sp, #27]
   11a80:	404b      	eors	r3, r1
   11a82:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   11a86:	68d3      	ldr	r3, [r2, #12]
   11a88:	f89d 201c 	ldrb.w	r2, [sp, #28]
   11a8c:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11a90:	f88d 201c 	strb.w	r2, [sp, #28]
   11a94:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11a98:	f89d 101d 	ldrb.w	r1, [sp, #29]
   11a9c:	404a      	eors	r2, r1
   11a9e:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   11aa2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11aa6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   11aaa:	404a      	eors	r2, r1
   11aac:	f88d 201e 	strb.w	r2, [sp, #30]
   11ab0:	b2db      	uxtb	r3, r3
   11ab2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11ab6:	4053      	eors	r3, r2
   11ab8:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   11abc:	2c08      	cmp	r4, #8
   11abe:	d80a      	bhi.n	11ad6 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   11ac0:	2300      	movs	r3, #0
   11ac2:	2b0f      	cmp	r3, #15
   11ac4:	f63f adc0 	bhi.w	11648 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   11ac8:	a904      	add	r1, sp, #16
   11aca:	5cc8      	ldrb	r0, [r1, r3]
   11acc:	4a6e      	ldr	r2, [pc, #440]	; (11c88 <tc_aes_encrypt+0x748>)
   11ace:	5c10      	ldrb	r0, [r2, r0]
   11ad0:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   11ad2:	3301      	adds	r3, #1
   11ad4:	e7f5      	b.n	11ac2 <tc_aes_encrypt+0x582>
   11ad6:	2300      	movs	r3, #0
   11ad8:	e005      	b.n	11ae6 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   11ada:	aa04      	add	r2, sp, #16
   11adc:	5cd1      	ldrb	r1, [r2, r3]
   11ade:	486a      	ldr	r0, [pc, #424]	; (11c88 <tc_aes_encrypt+0x748>)
   11ae0:	5c41      	ldrb	r1, [r0, r1]
   11ae2:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   11ae4:	3301      	adds	r3, #1
   11ae6:	2b0f      	cmp	r3, #15
   11ae8:	d9f7      	bls.n	11ada <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   11aea:	f89d 3010 	ldrb.w	r3, [sp, #16]
   11aee:	f88d 3000 	strb.w	r3, [sp]
   11af2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   11af6:	f88d 3001 	strb.w	r3, [sp, #1]
   11afa:	f89d 301a 	ldrb.w	r3, [sp, #26]
   11afe:	f88d 3002 	strb.w	r3, [sp, #2]
   11b02:	f89d 301f 	ldrb.w	r3, [sp, #31]
   11b06:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   11b0a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   11b0e:	f88d 3004 	strb.w	r3, [sp, #4]
   11b12:	f89d 3019 	ldrb.w	r3, [sp, #25]
   11b16:	f88d 3005 	strb.w	r3, [sp, #5]
   11b1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   11b1e:	f88d 3006 	strb.w	r3, [sp, #6]
   11b22:	f89d 3013 	ldrb.w	r3, [sp, #19]
   11b26:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   11b2a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11b2e:	f88d 3008 	strb.w	r3, [sp, #8]
   11b32:	f89d 301d 	ldrb.w	r3, [sp, #29]
   11b36:	f88d 3009 	strb.w	r3, [sp, #9]
   11b3a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   11b3e:	f88d 300a 	strb.w	r3, [sp, #10]
   11b42:	f89d 3017 	ldrb.w	r3, [sp, #23]
   11b46:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   11b4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   11b4e:	f88d 300c 	strb.w	r3, [sp, #12]
   11b52:	f89d 3011 	ldrb.w	r3, [sp, #17]
   11b56:	f88d 300d 	strb.w	r3, [sp, #13]
   11b5a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   11b5e:	f88d 300e 	strb.w	r3, [sp, #14]
   11b62:	f89d 301b 	ldrb.w	r3, [sp, #27]
   11b66:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   11b6a:	2310      	movs	r3, #16
   11b6c:	466a      	mov	r2, sp
   11b6e:	4619      	mov	r1, r3
   11b70:	eb0d 0003 	add.w	r0, sp, r3
   11b74:	f00b ff61 	bl	1da3a <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   11b78:	1c63      	adds	r3, r4, #1
   11b7a:	011a      	lsls	r2, r3, #4
   11b7c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   11b80:	58b2      	ldr	r2, [r6, r2]
   11b82:	f89d 1010 	ldrb.w	r1, [sp, #16]
   11b86:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   11b8a:	f88d 1010 	strb.w	r1, [sp, #16]
   11b8e:	f3c2 4107 	ubfx	r1, r2, #16, #8
   11b92:	f89d 0011 	ldrb.w	r0, [sp, #17]
   11b96:	4041      	eors	r1, r0
   11b98:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   11b9c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   11ba0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   11ba4:	4041      	eors	r1, r0
   11ba6:	f88d 1012 	strb.w	r1, [sp, #18]
   11baa:	b2d2      	uxtb	r2, r2
   11bac:	f89d 1013 	ldrb.w	r1, [sp, #19]
   11bb0:	404a      	eors	r2, r1
   11bb2:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   11bb6:	685a      	ldr	r2, [r3, #4]
   11bb8:	f89d 1014 	ldrb.w	r1, [sp, #20]
   11bbc:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   11bc0:	f88d 1014 	strb.w	r1, [sp, #20]
   11bc4:	f3c2 4107 	ubfx	r1, r2, #16, #8
   11bc8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   11bcc:	4041      	eors	r1, r0
   11bce:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   11bd2:	f3c2 2107 	ubfx	r1, r2, #8, #8
   11bd6:	f89d 0016 	ldrb.w	r0, [sp, #22]
   11bda:	4041      	eors	r1, r0
   11bdc:	f88d 1016 	strb.w	r1, [sp, #22]
   11be0:	b2d2      	uxtb	r2, r2
   11be2:	f89d 1017 	ldrb.w	r1, [sp, #23]
   11be6:	404a      	eors	r2, r1
   11be8:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   11bec:	689a      	ldr	r2, [r3, #8]
   11bee:	f89d 1018 	ldrb.w	r1, [sp, #24]
   11bf2:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   11bf6:	f88d 1018 	strb.w	r1, [sp, #24]
   11bfa:	f3c2 4107 	ubfx	r1, r2, #16, #8
   11bfe:	f89d 0019 	ldrb.w	r0, [sp, #25]
   11c02:	4041      	eors	r1, r0
   11c04:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   11c08:	f3c2 2107 	ubfx	r1, r2, #8, #8
   11c0c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   11c10:	4041      	eors	r1, r0
   11c12:	f88d 101a 	strb.w	r1, [sp, #26]
   11c16:	b2d2      	uxtb	r2, r2
   11c18:	f89d 101b 	ldrb.w	r1, [sp, #27]
   11c1c:	404a      	eors	r2, r1
   11c1e:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   11c22:	68db      	ldr	r3, [r3, #12]
   11c24:	f89d 201c 	ldrb.w	r2, [sp, #28]
   11c28:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   11c2c:	f88d 201c 	strb.w	r2, [sp, #28]
   11c30:	f3c3 4207 	ubfx	r2, r3, #16, #8
   11c34:	f89d 101d 	ldrb.w	r1, [sp, #29]
   11c38:	404a      	eors	r2, r1
   11c3a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   11c3e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   11c42:	f89d 101e 	ldrb.w	r1, [sp, #30]
   11c46:	404a      	eors	r2, r1
   11c48:	f88d 201e 	strb.w	r2, [sp, #30]
   11c4c:	b2db      	uxtb	r3, r3
   11c4e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   11c52:	4053      	eors	r3, r2
   11c54:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   11c58:	2310      	movs	r3, #16
   11c5a:	eb0d 0203 	add.w	r2, sp, r3
   11c5e:	4619      	mov	r1, r3
   11c60:	4638      	mov	r0, r7
   11c62:	f00b feea 	bl	1da3a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   11c66:	2210      	movs	r2, #16
   11c68:	2100      	movs	r1, #0
   11c6a:	eb0d 0002 	add.w	r0, sp, r2
   11c6e:	f00b fef1 	bl	1da54 <_set>

	return TC_CRYPTO_SUCCESS;
   11c72:	2001      	movs	r0, #1
}
   11c74:	b008      	add	sp, #32
   11c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   11c7a:	2000      	movs	r0, #0
}
   11c7c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   11c7e:	2000      	movs	r0, #0
   11c80:	e7f8      	b.n	11c74 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   11c82:	2000      	movs	r0, #0
   11c84:	e7f6      	b.n	11c74 <tc_aes_encrypt+0x734>
   11c86:	bf00      	nop
   11c88:	000225ec 	.word	0x000225ec

00011c8c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   11c8c:	4901      	ldr	r1, [pc, #4]	; (11c94 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   11c8e:	2210      	movs	r2, #16
	str	r2, [r1]
   11c90:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   11c92:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   11c94:	e000ed10 	.word	0xe000ed10

00011c98 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   11c98:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   11c9a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   11c9c:	f380 8811 	msr	BASEPRI, r0
	isb
   11ca0:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   11ca4:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   11ca8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   11caa:	b662      	cpsie	i
	isb
   11cac:	f3bf 8f6f 	isb	sy

	bx	lr
   11cb0:	4770      	bx	lr
   11cb2:	bf00      	nop

00011cb4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   11cb4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   11cb6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   11cb8:	f381 8811 	msr	BASEPRI, r1

	wfe
   11cbc:	bf20      	wfe

	msr	BASEPRI, r0
   11cbe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   11cc2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   11cc4:	4770      	bx	lr
   11cc6:	bf00      	nop

00011cc8 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   11cc8:	b570      	push	{r4, r5, r6, lr}
   11cca:	b082      	sub	sp, #8
   11ccc:	4604      	mov	r4, r0
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   11cce:	4d1f      	ldr	r5, [pc, #124]	; (11d4c <esf_dump+0x84>)
   11cd0:	4b1f      	ldr	r3, [pc, #124]	; (11d50 <esf_dump+0x88>)
   11cd2:	1aed      	subs	r5, r5, r3
   11cd4:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   11cd6:	2601      	movs	r6, #1
   11cd8:	f04f 0300 	mov.w	r3, #0
   11cdc:	f366 0302 	bfi	r3, r6, #0, #3
   11ce0:	f36f 03c5 	bfc	r3, #3, #3
   11ce4:	f365 138f 	bfi	r3, r5, #6, #10
   11ce8:	f8ad 3000 	strh.w	r3, [sp]
   11cec:	6883      	ldr	r3, [r0, #8]
   11cee:	6842      	ldr	r2, [r0, #4]
   11cf0:	6801      	ldr	r1, [r0, #0]
   11cf2:	4818      	ldr	r0, [pc, #96]	; (11d54 <esf_dump+0x8c>)
   11cf4:	f7fe fe60 	bl	109b8 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   11cf8:	f04f 0300 	mov.w	r3, #0
   11cfc:	f366 0302 	bfi	r3, r6, #0, #3
   11d00:	f36f 03c5 	bfc	r3, #3, #3
   11d04:	f365 138f 	bfi	r3, r5, #6, #10
   11d08:	f8ad 3000 	strh.w	r3, [sp]
   11d0c:	6963      	ldr	r3, [r4, #20]
   11d0e:	6922      	ldr	r2, [r4, #16]
   11d10:	68e1      	ldr	r1, [r4, #12]
   11d12:	4811      	ldr	r0, [pc, #68]	; (11d58 <esf_dump+0x90>)
   11d14:	f7fe fe50 	bl	109b8 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   11d18:	f04f 0200 	mov.w	r2, #0
   11d1c:	f366 0202 	bfi	r2, r6, #0, #3
   11d20:	f36f 02c5 	bfc	r2, #3, #3
   11d24:	f365 128f 	bfi	r2, r5, #6, #10
   11d28:	69e1      	ldr	r1, [r4, #28]
   11d2a:	480c      	ldr	r0, [pc, #48]	; (11d5c <esf_dump+0x94>)
   11d2c:	f7fe fe82 	bl	10a34 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   11d30:	f04f 0200 	mov.w	r2, #0
   11d34:	f366 0202 	bfi	r2, r6, #0, #3
   11d38:	f36f 02c5 	bfc	r2, #3, #3
   11d3c:	f365 128f 	bfi	r2, r5, #6, #10
   11d40:	69a1      	ldr	r1, [r4, #24]
   11d42:	4807      	ldr	r0, [pc, #28]	; (11d60 <esf_dump+0x98>)
   11d44:	f7fe fe76 	bl	10a34 <log_1>
		esf->basic.pc);
}
   11d48:	b002      	add	sp, #8
   11d4a:	bd70      	pop	{r4, r5, r6, pc}
   11d4c:	00022004 	.word	0x00022004
   11d50:	00021f84 	.word	0x00021f84
   11d54:	000226ec 	.word	0x000226ec
   11d58:	0002271c 	.word	0x0002271c
   11d5c:	0002274c 	.word	0x0002274c
   11d60:	0002275c 	.word	0x0002275c

00011d64 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   11d64:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11d66:	2b00      	cmp	r3, #0
   11d68:	db08      	blt.n	11d7c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11d6a:	f000 001f 	and.w	r0, r0, #31
   11d6e:	095b      	lsrs	r3, r3, #5
   11d70:	2201      	movs	r2, #1
   11d72:	fa02 f000 	lsl.w	r0, r2, r0
   11d76:	4a02      	ldr	r2, [pc, #8]	; (11d80 <arch_irq_enable+0x1c>)
   11d78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   11d7c:	4770      	bx	lr
   11d7e:	bf00      	nop
   11d80:	e000e100 	.word	0xe000e100

00011d84 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   11d84:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   11d86:	2b00      	cmp	r3, #0
   11d88:	db0d      	blt.n	11da6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   11d8a:	f000 001f 	and.w	r0, r0, #31
   11d8e:	095b      	lsrs	r3, r3, #5
   11d90:	2201      	movs	r2, #1
   11d92:	fa02 f000 	lsl.w	r0, r2, r0
   11d96:	3320      	adds	r3, #32
   11d98:	4a03      	ldr	r2, [pc, #12]	; (11da8 <arch_irq_disable+0x24>)
   11d9a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   11d9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11da2:	f3bf 8f6f 	isb	sy
}
   11da6:	4770      	bx	lr
   11da8:	e000e100 	.word	0xe000e100

00011dac <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   11dac:	0942      	lsrs	r2, r0, #5
   11dae:	4b05      	ldr	r3, [pc, #20]	; (11dc4 <arch_irq_is_enabled+0x18>)
   11db0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11db4:	f000 001f 	and.w	r0, r0, #31
   11db8:	2301      	movs	r3, #1
   11dba:	fa03 f000 	lsl.w	r0, r3, r0
}
   11dbe:	4010      	ands	r0, r2
   11dc0:	4770      	bx	lr
   11dc2:	bf00      	nop
   11dc4:	e000e100 	.word	0xe000e100

00011dc8 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   11dc8:	f012 0f01 	tst.w	r2, #1
   11dcc:	d10c      	bne.n	11de8 <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   11dce:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   11dd0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   11dd2:	2b00      	cmp	r3, #0
   11dd4:	db0a      	blt.n	11dec <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11dd6:	0149      	lsls	r1, r1, #5
   11dd8:	b2c9      	uxtb	r1, r1
   11dda:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   11dde:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   11de2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   11de6:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   11de8:	2100      	movs	r1, #0
   11dea:	e7f1      	b.n	11dd0 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   11dec:	f000 000f 	and.w	r0, r0, #15
   11df0:	0149      	lsls	r1, r1, #5
   11df2:	b2c9      	uxtb	r1, r1
   11df4:	4b01      	ldr	r3, [pc, #4]	; (11dfc <z_arm_irq_priority_set+0x34>)
   11df6:	5419      	strb	r1, [r3, r0]
}
   11df8:	4770      	bx	lr
   11dfa:	bf00      	nop
   11dfc:	e000ed14 	.word	0xe000ed14

00011e00 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   11e00:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   11e02:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   11e04:	4b04      	ldr	r3, [pc, #16]	; (11e18 <_arch_isr_direct_pm+0x18>)
   11e06:	6998      	ldr	r0, [r3, #24]
   11e08:	b908      	cbnz	r0, 11e0e <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   11e0a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   11e0c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   11e0e:	2200      	movs	r2, #0
   11e10:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   11e12:	f00f f9b1 	bl	21178 <z_pm_save_idle_exit>
   11e16:	e7f8      	b.n	11e0a <_arch_isr_direct_pm+0xa>
   11e18:	20003158 	.word	0x20003158

00011e1c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   11e1c:	bf30      	wfi
    b z_SysNmiOnReset
   11e1e:	f7ff bffd 	b.w	11e1c <z_SysNmiOnReset>
   11e22:	bf00      	nop

00011e24 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   11e24:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   11e26:	4b0b      	ldr	r3, [pc, #44]	; (11e54 <z_arm_prep_c+0x30>)
   11e28:	4a0b      	ldr	r2, [pc, #44]	; (11e58 <z_arm_prep_c+0x34>)
   11e2a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   11e2e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   11e30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   11e34:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   11e38:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   11e3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   11e40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   11e44:	f008 fe50 	bl	1aae8 <z_bss_zero>
	z_data_copy();
   11e48:	f009 ff36 	bl	1bcb8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   11e4c:	f000 fcb6 	bl	127bc <z_arm_interrupt_init>
	z_cstart();
   11e50:	f008 fe56 	bl	1ab00 <z_cstart>
   11e54:	e000ed00 	.word	0xe000ed00
   11e58:	00000000 	.word	0x00000000

00011e5c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   11e5c:	4a0a      	ldr	r2, [pc, #40]	; (11e88 <arch_swap+0x2c>)
   11e5e:	6893      	ldr	r3, [r2, #8]
   11e60:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   11e64:	4909      	ldr	r1, [pc, #36]	; (11e8c <arch_swap+0x30>)
   11e66:	6809      	ldr	r1, [r1, #0]
   11e68:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   11e6c:	4908      	ldr	r1, [pc, #32]	; (11e90 <arch_swap+0x34>)
   11e6e:	684b      	ldr	r3, [r1, #4]
   11e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   11e74:	604b      	str	r3, [r1, #4]
   11e76:	2300      	movs	r3, #0
   11e78:	f383 8811 	msr	BASEPRI, r3
   11e7c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   11e80:	6893      	ldr	r3, [r2, #8]
}
   11e82:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   11e86:	4770      	bx	lr
   11e88:	20003158 	.word	0x20003158
   11e8c:	00024298 	.word	0x00024298
   11e90:	e000ed00 	.word	0xe000ed00

00011e94 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   11e94:	4913      	ldr	r1, [pc, #76]	; (11ee4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   11e96:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   11e98:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   11e9c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   11e9e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   11ea2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   11ea6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   11ea8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   11eac:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   11eb0:	4f0d      	ldr	r7, [pc, #52]	; (11ee8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   11eb2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   11eb6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   11eb8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   11eba:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   11ebc:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   11ec0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   11ec2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   11ec6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   11eca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   11ecc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   11ece:	f000 fd17 	bl	12900 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   11ed2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   11ed6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   11eda:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   11ede:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   11ee2:	4770      	bx	lr
    ldr r1, =_kernel
   11ee4:	20003158 	.word	0x20003158
    ldr v4, =_SCS_ICSR
   11ee8:	e000ed04 	.word	0xe000ed04

00011eec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   11eec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   11ef0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   11ef2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   11ef6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   11efa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   11efc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   11f00:	2902      	cmp	r1, #2
    beq _oops
   11f02:	d0ff      	beq.n	11f04 <_oops>

00011f04 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   11f04:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   11f06:	f00b fec7 	bl	1dc98 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   11f0a:	bd01      	pop	{r0, pc}

00011f0c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   11f0c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   11f0e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   11f12:	490d      	ldr	r1, [pc, #52]	; (11f48 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   11f14:	f021 0101 	bic.w	r1, r1, #1
   11f18:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   11f1c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   11f20:	9b01      	ldr	r3, [sp, #4]
   11f22:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   11f26:	9b02      	ldr	r3, [sp, #8]
   11f28:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   11f2c:	9b03      	ldr	r3, [sp, #12]
   11f2e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   11f32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   11f36:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   11f3a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   11f3c:	2300      	movs	r3, #0
   11f3e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   11f42:	bc10      	pop	{r4}
   11f44:	4770      	bx	lr
   11f46:	bf00      	nop
   11f48:	0001ca8b 	.word	0x0001ca8b

00011f4c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   11f4c:	4b16      	ldr	r3, [pc, #88]	; (11fa8 <z_check_thread_stack_fail+0x5c>)
   11f4e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   11f50:	b1da      	cbz	r2, 11f8a <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11f52:	f110 0f16 	cmn.w	r0, #22
   11f56:	d01a      	beq.n	11f8e <z_check_thread_stack_fail+0x42>
{
   11f58:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11f5a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   11f5e:	f1a3 0420 	sub.w	r4, r3, #32
   11f62:	4284      	cmp	r4, r0
   11f64:	d805      	bhi.n	11f72 <z_check_thread_stack_fail+0x26>
   11f66:	4283      	cmp	r3, r0
   11f68:	d908      	bls.n	11f7c <z_check_thread_stack_fail+0x30>
   11f6a:	428b      	cmp	r3, r1
   11f6c:	d808      	bhi.n	11f80 <z_check_thread_stack_fail+0x34>
   11f6e:	2100      	movs	r1, #0
   11f70:	e000      	b.n	11f74 <z_check_thread_stack_fail+0x28>
   11f72:	2100      	movs	r1, #0
   11f74:	b931      	cbnz	r1, 11f84 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   11f76:	2000      	movs	r0, #0
}
   11f78:	bc10      	pop	{r4}
   11f7a:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11f7c:	2100      	movs	r1, #0
   11f7e:	e7f9      	b.n	11f74 <z_check_thread_stack_fail+0x28>
   11f80:	2101      	movs	r1, #1
   11f82:	e7f7      	b.n	11f74 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   11f84:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   11f88:	e7f6      	b.n	11f78 <z_check_thread_stack_fail+0x2c>
		return 0;
   11f8a:	2000      	movs	r0, #0
   11f8c:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   11f8e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   11f92:	428b      	cmp	r3, r1
   11f94:	bf94      	ite	ls
   11f96:	2100      	movls	r1, #0
   11f98:	2101      	movhi	r1, #1
   11f9a:	b909      	cbnz	r1, 11fa0 <z_check_thread_stack_fail+0x54>
	return 0;
   11f9c:	2000      	movs	r0, #0
}
   11f9e:	4770      	bx	lr
		return thread->stack_info.start;
   11fa0:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   11fa4:	4770      	bx	lr
   11fa6:	bf00      	nop
   11fa8:	20003158 	.word	0x20003158

00011fac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   11fac:	b508      	push	{r3, lr}
   11fae:	460d      	mov	r5, r1
   11fb0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   11fb2:	4b08      	ldr	r3, [pc, #32]	; (11fd4 <arch_switch_to_main_thread+0x28>)
   11fb4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   11fb6:	f000 fca3 	bl	12900 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   11fba:	4620      	mov	r0, r4
   11fbc:	f385 8809 	msr	PSP, r5
   11fc0:	2100      	movs	r1, #0
   11fc2:	b663      	cpsie	if
   11fc4:	f381 8811 	msr	BASEPRI, r1
   11fc8:	f3bf 8f6f 	isb	sy
   11fcc:	2200      	movs	r2, #0
   11fce:	2300      	movs	r3, #0
   11fd0:	f00a fd5b 	bl	1ca8a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   11fd4:	20003158 	.word	0x20003158

00011fd8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   11fd8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   11fda:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   11fdc:	4a0b      	ldr	r2, [pc, #44]	; (1200c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   11fde:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   11fe0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   11fe2:	bf1e      	ittt	ne
	movne	r1, #0
   11fe4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   11fe6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   11fe8:	f00f f8c6 	blne	21178 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   11fec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   11fee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   11ff2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   11ff6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   11ffa:	4905      	ldr	r1, [pc, #20]	; (12010 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   11ffc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   11ffe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12000:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12002:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12006:	4903      	ldr	r1, [pc, #12]	; (12014 <_isr_wrapper+0x3c>)
	bx r1
   12008:	4708      	bx	r1
   1200a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1200c:	20003158 	.word	0x20003158
	ldr r1, =_sw_isr_table
   12010:	00021db4 	.word	0x00021db4
	ldr r1, =z_arm_int_exit
   12014:	00012019 	.word	0x00012019

00012018 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12018:	4b04      	ldr	r3, [pc, #16]	; (1202c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1201a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1201c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1201e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12020:	d003      	beq.n	1202a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12022:	4903      	ldr	r1, [pc, #12]	; (12030 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12028:	600a      	str	r2, [r1, #0]

0001202a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1202a:	4770      	bx	lr
	ldr r3, =_kernel
   1202c:	20003158 	.word	0x20003158
	ldr r1, =_SCS_ICSR
   12030:	e000ed04 	.word	0xe000ed04

00012034 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   12034:	b508      	push	{r3, lr}
   12036:	4b4e      	ldr	r3, [pc, #312]	; (12170 <usage_fault+0x13c>)
   12038:	4a4e      	ldr	r2, [pc, #312]	; (12174 <usage_fault+0x140>)
   1203a:	1a9b      	subs	r3, r3, r2
   1203c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1203e:	f04f 0100 	mov.w	r1, #0
   12042:	2201      	movs	r2, #1
   12044:	f362 0102 	bfi	r1, r2, #0, #3
   12048:	f36f 01c5 	bfc	r1, #3, #3
   1204c:	f363 118f 	bfi	r1, r3, #6, #10
   12050:	4849      	ldr	r0, [pc, #292]	; (12178 <usage_fault+0x144>)
   12052:	f7fe fda5 	bl	10ba0 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12056:	4b49      	ldr	r3, [pc, #292]	; (1217c <usage_fault+0x148>)
   12058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1205a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   1205e:	d121      	bne.n	120a4 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12060:	4b46      	ldr	r3, [pc, #280]	; (1217c <usage_fault+0x148>)
   12062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12064:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   12068:	d12d      	bne.n	120c6 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1206a:	4b44      	ldr	r3, [pc, #272]	; (1217c <usage_fault+0x148>)
   1206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1206e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   12072:	d139      	bne.n	120e8 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12074:	4b41      	ldr	r3, [pc, #260]	; (1217c <usage_fault+0x148>)
   12076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12078:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1207c:	d145      	bne.n	1210a <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1207e:	4b3f      	ldr	r3, [pc, #252]	; (1217c <usage_fault+0x148>)
   12080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12082:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12086:	d151      	bne.n	1212c <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12088:	4b3c      	ldr	r3, [pc, #240]	; (1217c <usage_fault+0x148>)
   1208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1208c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   12090:	d15d      	bne.n	1214e <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12092:	4a3a      	ldr	r2, [pc, #232]	; (1217c <usage_fault+0x148>)
   12094:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12096:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1209a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1209e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   120a0:	2000      	movs	r0, #0
   120a2:	bd08      	pop	{r3, pc}
   120a4:	4b32      	ldr	r3, [pc, #200]	; (12170 <usage_fault+0x13c>)
   120a6:	4a33      	ldr	r2, [pc, #204]	; (12174 <usage_fault+0x140>)
   120a8:	1a9b      	subs	r3, r3, r2
   120aa:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   120ac:	f04f 0100 	mov.w	r1, #0
   120b0:	2201      	movs	r2, #1
   120b2:	f362 0102 	bfi	r1, r2, #0, #3
   120b6:	f36f 01c5 	bfc	r1, #3, #3
   120ba:	f363 118f 	bfi	r1, r3, #6, #10
   120be:	4830      	ldr	r0, [pc, #192]	; (12180 <usage_fault+0x14c>)
   120c0:	f7fe fd6e 	bl	10ba0 <log_0>
   120c4:	e7cc      	b.n	12060 <usage_fault+0x2c>
   120c6:	4b2a      	ldr	r3, [pc, #168]	; (12170 <usage_fault+0x13c>)
   120c8:	4a2a      	ldr	r2, [pc, #168]	; (12174 <usage_fault+0x140>)
   120ca:	1a9b      	subs	r3, r3, r2
   120cc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   120ce:	f04f 0100 	mov.w	r1, #0
   120d2:	2201      	movs	r2, #1
   120d4:	f362 0102 	bfi	r1, r2, #0, #3
   120d8:	f36f 01c5 	bfc	r1, #3, #3
   120dc:	f363 118f 	bfi	r1, r3, #6, #10
   120e0:	4828      	ldr	r0, [pc, #160]	; (12184 <usage_fault+0x150>)
   120e2:	f7fe fd5d 	bl	10ba0 <log_0>
   120e6:	e7c0      	b.n	1206a <usage_fault+0x36>
   120e8:	4b21      	ldr	r3, [pc, #132]	; (12170 <usage_fault+0x13c>)
   120ea:	4a22      	ldr	r2, [pc, #136]	; (12174 <usage_fault+0x140>)
   120ec:	1a9b      	subs	r3, r3, r2
   120ee:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   120f0:	f04f 0100 	mov.w	r1, #0
   120f4:	2201      	movs	r2, #1
   120f6:	f362 0102 	bfi	r1, r2, #0, #3
   120fa:	f36f 01c5 	bfc	r1, #3, #3
   120fe:	f363 118f 	bfi	r1, r3, #6, #10
   12102:	4821      	ldr	r0, [pc, #132]	; (12188 <usage_fault+0x154>)
   12104:	f7fe fd4c 	bl	10ba0 <log_0>
   12108:	e7b4      	b.n	12074 <usage_fault+0x40>
   1210a:	4b19      	ldr	r3, [pc, #100]	; (12170 <usage_fault+0x13c>)
   1210c:	4a19      	ldr	r2, [pc, #100]	; (12174 <usage_fault+0x140>)
   1210e:	1a9b      	subs	r3, r3, r2
   12110:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12112:	f04f 0100 	mov.w	r1, #0
   12116:	2201      	movs	r2, #1
   12118:	f362 0102 	bfi	r1, r2, #0, #3
   1211c:	f36f 01c5 	bfc	r1, #3, #3
   12120:	f363 118f 	bfi	r1, r3, #6, #10
   12124:	4819      	ldr	r0, [pc, #100]	; (1218c <usage_fault+0x158>)
   12126:	f7fe fd3b 	bl	10ba0 <log_0>
   1212a:	e7a8      	b.n	1207e <usage_fault+0x4a>
   1212c:	4b10      	ldr	r3, [pc, #64]	; (12170 <usage_fault+0x13c>)
   1212e:	4a11      	ldr	r2, [pc, #68]	; (12174 <usage_fault+0x140>)
   12130:	1a9b      	subs	r3, r3, r2
   12132:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12134:	f04f 0100 	mov.w	r1, #0
   12138:	2201      	movs	r2, #1
   1213a:	f362 0102 	bfi	r1, r2, #0, #3
   1213e:	f36f 01c5 	bfc	r1, #3, #3
   12142:	f363 118f 	bfi	r1, r3, #6, #10
   12146:	4812      	ldr	r0, [pc, #72]	; (12190 <usage_fault+0x15c>)
   12148:	f7fe fd2a 	bl	10ba0 <log_0>
   1214c:	e79c      	b.n	12088 <usage_fault+0x54>
   1214e:	4b08      	ldr	r3, [pc, #32]	; (12170 <usage_fault+0x13c>)
   12150:	4a08      	ldr	r2, [pc, #32]	; (12174 <usage_fault+0x140>)
   12152:	1a9b      	subs	r3, r3, r2
   12154:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12156:	f04f 0100 	mov.w	r1, #0
   1215a:	2201      	movs	r2, #1
   1215c:	f362 0102 	bfi	r1, r2, #0, #3
   12160:	f36f 01c5 	bfc	r1, #3, #3
   12164:	f363 118f 	bfi	r1, r3, #6, #10
   12168:	480a      	ldr	r0, [pc, #40]	; (12194 <usage_fault+0x160>)
   1216a:	f7fe fd19 	bl	10ba0 <log_0>
   1216e:	e790      	b.n	12092 <usage_fault+0x5e>
   12170:	00022004 	.word	0x00022004
   12174:	00021f84 	.word	0x00021f84
   12178:	0002278c 	.word	0x0002278c
   1217c:	e000ed00 	.word	0xe000ed00
   12180:	000227a4 	.word	0x000227a4
   12184:	000227b8 	.word	0x000227b8
   12188:	000227d4 	.word	0x000227d4
   1218c:	000227f4 	.word	0x000227f4
   12190:	0002281c 	.word	0x0002281c
   12194:	00022838 	.word	0x00022838

00012198 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   12198:	b508      	push	{r3, lr}
	*recoverable = false;
   1219a:	2200      	movs	r2, #0
   1219c:	700a      	strb	r2, [r1, #0]
   1219e:	4b08      	ldr	r3, [pc, #32]	; (121c0 <debug_monitor+0x28>)
   121a0:	4908      	ldr	r1, [pc, #32]	; (121c4 <debug_monitor+0x2c>)
   121a2:	1a5b      	subs	r3, r3, r1
   121a4:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   121a6:	f04f 0100 	mov.w	r1, #0
   121aa:	2001      	movs	r0, #1
   121ac:	f360 0102 	bfi	r1, r0, #0, #3
   121b0:	f362 01c5 	bfi	r1, r2, #3, #3
   121b4:	f363 118f 	bfi	r1, r3, #6, #10
   121b8:	4803      	ldr	r0, [pc, #12]	; (121c8 <debug_monitor+0x30>)
   121ba:	f7fe fcf1 	bl	10ba0 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   121be:	bd08      	pop	{r3, pc}
   121c0:	00022004 	.word	0x00022004
   121c4:	00021f84 	.word	0x00021f84
   121c8:	00022864 	.word	0x00022864

000121cc <bus_fault>:
{
   121cc:	b570      	push	{r4, r5, r6, lr}
   121ce:	4605      	mov	r5, r0
   121d0:	460e      	mov	r6, r1
   121d2:	4614      	mov	r4, r2
   121d4:	4b5e      	ldr	r3, [pc, #376]	; (12350 <bus_fault+0x184>)
   121d6:	4a5f      	ldr	r2, [pc, #380]	; (12354 <bus_fault+0x188>)
   121d8:	1a9b      	subs	r3, r3, r2
   121da:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   121dc:	f04f 0100 	mov.w	r1, #0
   121e0:	2201      	movs	r2, #1
   121e2:	f362 0102 	bfi	r1, r2, #0, #3
   121e6:	f36f 01c5 	bfc	r1, #3, #3
   121ea:	f363 118f 	bfi	r1, r3, #6, #10
   121ee:	485a      	ldr	r0, [pc, #360]	; (12358 <bus_fault+0x18c>)
   121f0:	f7fe fcd6 	bl	10ba0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   121f4:	4b59      	ldr	r3, [pc, #356]	; (1235c <bus_fault+0x190>)
   121f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   121f8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   121fc:	d124      	bne.n	12248 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   121fe:	4b57      	ldr	r3, [pc, #348]	; (1235c <bus_fault+0x190>)
   12200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12202:	f413 6f00 	tst.w	r3, #2048	; 0x800
   12206:	d130      	bne.n	1226a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   12208:	4b54      	ldr	r3, [pc, #336]	; (1235c <bus_fault+0x190>)
   1220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1220c:	f413 7f00 	tst.w	r3, #512	; 0x200
   12210:	d13c      	bne.n	1228c <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   12212:	4b52      	ldr	r3, [pc, #328]	; (1235c <bus_fault+0x190>)
   12214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12216:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1221a:	d165      	bne.n	122e8 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1221c:	4b4f      	ldr	r3, [pc, #316]	; (1235c <bus_fault+0x190>)
   1221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12220:	f413 7f80 	tst.w	r3, #256	; 0x100
   12224:	d171      	bne.n	1230a <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12226:	4b4d      	ldr	r3, [pc, #308]	; (1235c <bus_fault+0x190>)
   12228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1222a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1222e:	d17d      	bne.n	1232c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12230:	4a4a      	ldr	r2, [pc, #296]	; (1235c <bus_fault+0x190>)
   12232:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12234:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12238:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1223a:	2101      	movs	r1, #1
   1223c:	4628      	mov	r0, r5
   1223e:	f00b fd3d 	bl	1dcbc <memory_fault_recoverable>
   12242:	7020      	strb	r0, [r4, #0]
}
   12244:	2000      	movs	r0, #0
   12246:	bd70      	pop	{r4, r5, r6, pc}
   12248:	4b41      	ldr	r3, [pc, #260]	; (12350 <bus_fault+0x184>)
   1224a:	4a42      	ldr	r2, [pc, #264]	; (12354 <bus_fault+0x188>)
   1224c:	1a9b      	subs	r3, r3, r2
   1224e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   12250:	f04f 0100 	mov.w	r1, #0
   12254:	2201      	movs	r2, #1
   12256:	f362 0102 	bfi	r1, r2, #0, #3
   1225a:	f36f 01c5 	bfc	r1, #3, #3
   1225e:	f363 118f 	bfi	r1, r3, #6, #10
   12262:	483f      	ldr	r0, [pc, #252]	; (12360 <bus_fault+0x194>)
   12264:	f7fe fc9c 	bl	10ba0 <log_0>
   12268:	e7c9      	b.n	121fe <bus_fault+0x32>
   1226a:	4b39      	ldr	r3, [pc, #228]	; (12350 <bus_fault+0x184>)
   1226c:	4a39      	ldr	r2, [pc, #228]	; (12354 <bus_fault+0x188>)
   1226e:	1a9b      	subs	r3, r3, r2
   12270:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   12272:	f04f 0100 	mov.w	r1, #0
   12276:	2201      	movs	r2, #1
   12278:	f362 0102 	bfi	r1, r2, #0, #3
   1227c:	f36f 01c5 	bfc	r1, #3, #3
   12280:	f363 118f 	bfi	r1, r3, #6, #10
   12284:	4837      	ldr	r0, [pc, #220]	; (12364 <bus_fault+0x198>)
   12286:	f7fe fc8b 	bl	10ba0 <log_0>
   1228a:	e7bd      	b.n	12208 <bus_fault+0x3c>
   1228c:	4b30      	ldr	r3, [pc, #192]	; (12350 <bus_fault+0x184>)
   1228e:	4a31      	ldr	r2, [pc, #196]	; (12354 <bus_fault+0x188>)
   12290:	1a9b      	subs	r3, r3, r2
   12292:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   12294:	f04f 0100 	mov.w	r1, #0
   12298:	2201      	movs	r2, #1
   1229a:	f362 0102 	bfi	r1, r2, #0, #3
   1229e:	f36f 01c5 	bfc	r1, #3, #3
   122a2:	f363 118f 	bfi	r1, r3, #6, #10
   122a6:	4830      	ldr	r0, [pc, #192]	; (12368 <bus_fault+0x19c>)
   122a8:	f7fe fc7a 	bl	10ba0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   122ac:	4b2b      	ldr	r3, [pc, #172]	; (1235c <bus_fault+0x190>)
   122ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   122b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   122b2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   122b6:	d0ac      	beq.n	12212 <bus_fault+0x46>
   122b8:	4b25      	ldr	r3, [pc, #148]	; (12350 <bus_fault+0x184>)
   122ba:	4a26      	ldr	r2, [pc, #152]	; (12354 <bus_fault+0x188>)
   122bc:	1a9b      	subs	r3, r3, r2
   122be:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   122c0:	f04f 0200 	mov.w	r2, #0
   122c4:	2001      	movs	r0, #1
   122c6:	f360 0202 	bfi	r2, r0, #0, #3
   122ca:	f36f 02c5 	bfc	r2, #3, #3
   122ce:	f363 128f 	bfi	r2, r3, #6, #10
   122d2:	4826      	ldr	r0, [pc, #152]	; (1236c <bus_fault+0x1a0>)
   122d4:	f7fe fbae 	bl	10a34 <log_1>
			if (from_hard_fault != 0) {
   122d8:	2e00      	cmp	r6, #0
   122da:	d09a      	beq.n	12212 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   122dc:	4a1f      	ldr	r2, [pc, #124]	; (1235c <bus_fault+0x190>)
   122de:	6a93      	ldr	r3, [r2, #40]	; 0x28
   122e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   122e4:	6293      	str	r3, [r2, #40]	; 0x28
   122e6:	e794      	b.n	12212 <bus_fault+0x46>
   122e8:	4b19      	ldr	r3, [pc, #100]	; (12350 <bus_fault+0x184>)
   122ea:	4a1a      	ldr	r2, [pc, #104]	; (12354 <bus_fault+0x188>)
   122ec:	1a9b      	subs	r3, r3, r2
   122ee:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   122f0:	f04f 0100 	mov.w	r1, #0
   122f4:	2201      	movs	r2, #1
   122f6:	f362 0102 	bfi	r1, r2, #0, #3
   122fa:	f36f 01c5 	bfc	r1, #3, #3
   122fe:	f363 118f 	bfi	r1, r3, #6, #10
   12302:	481b      	ldr	r0, [pc, #108]	; (12370 <bus_fault+0x1a4>)
   12304:	f7fe fc4c 	bl	10ba0 <log_0>
   12308:	e788      	b.n	1221c <bus_fault+0x50>
   1230a:	4b11      	ldr	r3, [pc, #68]	; (12350 <bus_fault+0x184>)
   1230c:	4a11      	ldr	r2, [pc, #68]	; (12354 <bus_fault+0x188>)
   1230e:	1a9b      	subs	r3, r3, r2
   12310:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   12312:	f04f 0100 	mov.w	r1, #0
   12316:	2201      	movs	r2, #1
   12318:	f362 0102 	bfi	r1, r2, #0, #3
   1231c:	f36f 01c5 	bfc	r1, #3, #3
   12320:	f363 118f 	bfi	r1, r3, #6, #10
   12324:	4813      	ldr	r0, [pc, #76]	; (12374 <bus_fault+0x1a8>)
   12326:	f7fe fc3b 	bl	10ba0 <log_0>
   1232a:	e781      	b.n	12230 <bus_fault+0x64>
   1232c:	4b08      	ldr	r3, [pc, #32]	; (12350 <bus_fault+0x184>)
   1232e:	4a09      	ldr	r2, [pc, #36]	; (12354 <bus_fault+0x188>)
   12330:	1a9b      	subs	r3, r3, r2
   12332:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12334:	f04f 0100 	mov.w	r1, #0
   12338:	2201      	movs	r2, #1
   1233a:	f362 0102 	bfi	r1, r2, #0, #3
   1233e:	f36f 01c5 	bfc	r1, #3, #3
   12342:	f363 118f 	bfi	r1, r3, #6, #10
   12346:	480c      	ldr	r0, [pc, #48]	; (12378 <bus_fault+0x1ac>)
   12348:	f7fe fc2a 	bl	10ba0 <log_0>
   1234c:	e770      	b.n	12230 <bus_fault+0x64>
   1234e:	bf00      	nop
   12350:	00022004 	.word	0x00022004
   12354:	00021f84 	.word	0x00021f84
   12358:	00022888 	.word	0x00022888
   1235c:	e000ed00 	.word	0xe000ed00
   12360:	000228a0 	.word	0x000228a0
   12364:	000228b4 	.word	0x000228b4
   12368:	000228c8 	.word	0x000228c8
   1236c:	000228e4 	.word	0x000228e4
   12370:	000228fc 	.word	0x000228fc
   12374:	00022918 	.word	0x00022918
   12378:	00022930 	.word	0x00022930

0001237c <mem_manage_fault>:
{
   1237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1237e:	4605      	mov	r5, r0
   12380:	460c      	mov	r4, r1
   12382:	4616      	mov	r6, r2
   12384:	4b64      	ldr	r3, [pc, #400]	; (12518 <mem_manage_fault+0x19c>)
   12386:	4a65      	ldr	r2, [pc, #404]	; (1251c <mem_manage_fault+0x1a0>)
   12388:	1a9b      	subs	r3, r3, r2
   1238a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   1238c:	f04f 0100 	mov.w	r1, #0
   12390:	2201      	movs	r2, #1
   12392:	f362 0102 	bfi	r1, r2, #0, #3
   12396:	f36f 01c5 	bfc	r1, #3, #3
   1239a:	f363 118f 	bfi	r1, r3, #6, #10
   1239e:	4860      	ldr	r0, [pc, #384]	; (12520 <mem_manage_fault+0x1a4>)
   123a0:	f7fe fbfe 	bl	10ba0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   123a4:	4b5f      	ldr	r3, [pc, #380]	; (12524 <mem_manage_fault+0x1a8>)
   123a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123a8:	f013 0f10 	tst.w	r3, #16
   123ac:	d132      	bne.n	12414 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   123ae:	4b5d      	ldr	r3, [pc, #372]	; (12524 <mem_manage_fault+0x1a8>)
   123b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123b2:	f013 0f08 	tst.w	r3, #8
   123b6:	d13e      	bne.n	12436 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   123b8:	4b5a      	ldr	r3, [pc, #360]	; (12524 <mem_manage_fault+0x1a8>)
   123ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123bc:	f013 0f02 	tst.w	r3, #2
   123c0:	d14a      	bne.n	12458 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   123c2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   123c6:	4b57      	ldr	r3, [pc, #348]	; (12524 <mem_manage_fault+0x1a8>)
   123c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123ca:	f013 0f01 	tst.w	r3, #1
   123ce:	d175      	bne.n	124bc <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   123d0:	4b54      	ldr	r3, [pc, #336]	; (12524 <mem_manage_fault+0x1a8>)
   123d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123d4:	f013 0f20 	tst.w	r3, #32
   123d8:	f040 8081 	bne.w	124de <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   123dc:	4b51      	ldr	r3, [pc, #324]	; (12524 <mem_manage_fault+0x1a8>)
   123de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   123e0:	f013 0f10 	tst.w	r3, #16
   123e4:	d104      	bne.n	123f0 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   123e6:	4b4f      	ldr	r3, [pc, #316]	; (12524 <mem_manage_fault+0x1a8>)
   123e8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   123ea:	f014 0402 	ands.w	r4, r4, #2
   123ee:	d005      	beq.n	123fc <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   123f0:	4b4c      	ldr	r3, [pc, #304]	; (12524 <mem_manage_fault+0x1a8>)
   123f2:	685c      	ldr	r4, [r3, #4]
   123f4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   123f8:	f040 8082 	bne.w	12500 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   123fc:	4a49      	ldr	r2, [pc, #292]	; (12524 <mem_manage_fault+0x1a8>)
   123fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12400:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12404:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12406:	2101      	movs	r1, #1
   12408:	4628      	mov	r0, r5
   1240a:	f00b fc57 	bl	1dcbc <memory_fault_recoverable>
   1240e:	7030      	strb	r0, [r6, #0]
}
   12410:	4620      	mov	r0, r4
   12412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12414:	4b40      	ldr	r3, [pc, #256]	; (12518 <mem_manage_fault+0x19c>)
   12416:	4a41      	ldr	r2, [pc, #260]	; (1251c <mem_manage_fault+0x1a0>)
   12418:	1a9b      	subs	r3, r3, r2
   1241a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   1241c:	f04f 0100 	mov.w	r1, #0
   12420:	2201      	movs	r2, #1
   12422:	f362 0102 	bfi	r1, r2, #0, #3
   12426:	f36f 01c5 	bfc	r1, #3, #3
   1242a:	f363 118f 	bfi	r1, r3, #6, #10
   1242e:	483e      	ldr	r0, [pc, #248]	; (12528 <mem_manage_fault+0x1ac>)
   12430:	f7fe fbb6 	bl	10ba0 <log_0>
   12434:	e7bb      	b.n	123ae <mem_manage_fault+0x32>
   12436:	4b38      	ldr	r3, [pc, #224]	; (12518 <mem_manage_fault+0x19c>)
   12438:	4a38      	ldr	r2, [pc, #224]	; (1251c <mem_manage_fault+0x1a0>)
   1243a:	1a9b      	subs	r3, r3, r2
   1243c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   1243e:	f04f 0100 	mov.w	r1, #0
   12442:	2201      	movs	r2, #1
   12444:	f362 0102 	bfi	r1, r2, #0, #3
   12448:	f36f 01c5 	bfc	r1, #3, #3
   1244c:	f363 118f 	bfi	r1, r3, #6, #10
   12450:	4836      	ldr	r0, [pc, #216]	; (1252c <mem_manage_fault+0x1b0>)
   12452:	f7fe fba5 	bl	10ba0 <log_0>
   12456:	e7af      	b.n	123b8 <mem_manage_fault+0x3c>
   12458:	4b2f      	ldr	r3, [pc, #188]	; (12518 <mem_manage_fault+0x19c>)
   1245a:	4a30      	ldr	r2, [pc, #192]	; (1251c <mem_manage_fault+0x1a0>)
   1245c:	1a9b      	subs	r3, r3, r2
   1245e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   12460:	f04f 0100 	mov.w	r1, #0
   12464:	2201      	movs	r2, #1
   12466:	f362 0102 	bfi	r1, r2, #0, #3
   1246a:	f36f 01c5 	bfc	r1, #3, #3
   1246e:	f363 118f 	bfi	r1, r3, #6, #10
   12472:	482f      	ldr	r0, [pc, #188]	; (12530 <mem_manage_fault+0x1b4>)
   12474:	f7fe fb94 	bl	10ba0 <log_0>
		uint32_t temp = SCB->MMFAR;
   12478:	4b2a      	ldr	r3, [pc, #168]	; (12524 <mem_manage_fault+0x1a8>)
   1247a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1247e:	f013 0f80 	tst.w	r3, #128	; 0x80
   12482:	d102      	bne.n	1248a <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   12484:	f06f 0715 	mvn.w	r7, #21
   12488:	e79d      	b.n	123c6 <mem_manage_fault+0x4a>
   1248a:	4b23      	ldr	r3, [pc, #140]	; (12518 <mem_manage_fault+0x19c>)
   1248c:	4a23      	ldr	r2, [pc, #140]	; (1251c <mem_manage_fault+0x1a0>)
   1248e:	1a9b      	subs	r3, r3, r2
   12490:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12492:	f04f 0200 	mov.w	r2, #0
   12496:	2101      	movs	r1, #1
   12498:	f361 0202 	bfi	r2, r1, #0, #3
   1249c:	f36f 02c5 	bfc	r2, #3, #3
   124a0:	f363 128f 	bfi	r2, r3, #6, #10
   124a4:	4639      	mov	r1, r7
   124a6:	4823      	ldr	r0, [pc, #140]	; (12534 <mem_manage_fault+0x1b8>)
   124a8:	f7fe fac4 	bl	10a34 <log_1>
			if (from_hard_fault != 0) {
   124ac:	2c00      	cmp	r4, #0
   124ae:	d08a      	beq.n	123c6 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   124b0:	4a1c      	ldr	r2, [pc, #112]	; (12524 <mem_manage_fault+0x1a8>)
   124b2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   124b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   124b8:	6293      	str	r3, [r2, #40]	; 0x28
   124ba:	e784      	b.n	123c6 <mem_manage_fault+0x4a>
   124bc:	4b16      	ldr	r3, [pc, #88]	; (12518 <mem_manage_fault+0x19c>)
   124be:	4a17      	ldr	r2, [pc, #92]	; (1251c <mem_manage_fault+0x1a0>)
   124c0:	1a9b      	subs	r3, r3, r2
   124c2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   124c4:	f04f 0100 	mov.w	r1, #0
   124c8:	2201      	movs	r2, #1
   124ca:	f362 0102 	bfi	r1, r2, #0, #3
   124ce:	f36f 01c5 	bfc	r1, #3, #3
   124d2:	f363 118f 	bfi	r1, r3, #6, #10
   124d6:	4818      	ldr	r0, [pc, #96]	; (12538 <mem_manage_fault+0x1bc>)
   124d8:	f7fe fb62 	bl	10ba0 <log_0>
   124dc:	e778      	b.n	123d0 <mem_manage_fault+0x54>
   124de:	4b0e      	ldr	r3, [pc, #56]	; (12518 <mem_manage_fault+0x19c>)
   124e0:	4a0e      	ldr	r2, [pc, #56]	; (1251c <mem_manage_fault+0x1a0>)
   124e2:	1a9b      	subs	r3, r3, r2
   124e4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   124e6:	f04f 0100 	mov.w	r1, #0
   124ea:	2201      	movs	r2, #1
   124ec:	f362 0102 	bfi	r1, r2, #0, #3
   124f0:	f36f 01c5 	bfc	r1, #3, #3
   124f4:	f363 118f 	bfi	r1, r3, #6, #10
   124f8:	4810      	ldr	r0, [pc, #64]	; (1253c <mem_manage_fault+0x1c0>)
   124fa:	f7fe fb51 	bl	10ba0 <log_0>
   124fe:	e76d      	b.n	123dc <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12500:	4629      	mov	r1, r5
   12502:	4638      	mov	r0, r7
   12504:	f7ff fd22 	bl	11f4c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12508:	4604      	mov	r4, r0
   1250a:	2800      	cmp	r0, #0
   1250c:	f43f af76 	beq.w	123fc <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12510:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12514:	2402      	movs	r4, #2
   12516:	e771      	b.n	123fc <mem_manage_fault+0x80>
   12518:	00022004 	.word	0x00022004
   1251c:	00021f84 	.word	0x00021f84
   12520:	00022960 	.word	0x00022960
   12524:	e000ed00 	.word	0xe000ed00
   12528:	00022978 	.word	0x00022978
   1252c:	000228b4 	.word	0x000228b4
   12530:	000229ac 	.word	0x000229ac
   12534:	000229c4 	.word	0x000229c4
   12538:	000229dc 	.word	0x000229dc
   1253c:	00022930 	.word	0x00022930

00012540 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   12540:	b570      	push	{r4, r5, r6, lr}
   12542:	4605      	mov	r5, r0
   12544:	460c      	mov	r4, r1
   12546:	4b47      	ldr	r3, [pc, #284]	; (12664 <hard_fault+0x124>)
   12548:	4a47      	ldr	r2, [pc, #284]	; (12668 <hard_fault+0x128>)
   1254a:	1a9b      	subs	r3, r3, r2
   1254c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   1254e:	f04f 0100 	mov.w	r1, #0
   12552:	2201      	movs	r2, #1
   12554:	f362 0102 	bfi	r1, r2, #0, #3
   12558:	f36f 01c5 	bfc	r1, #3, #3
   1255c:	f363 118f 	bfi	r1, r3, #6, #10
   12560:	4842      	ldr	r0, [pc, #264]	; (1266c <hard_fault+0x12c>)
   12562:	f7fe fb1d 	bl	10ba0 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   12566:	2300      	movs	r3, #0
   12568:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1256a:	4b41      	ldr	r3, [pc, #260]	; (12670 <hard_fault+0x130>)
   1256c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   1256e:	f016 0602 	ands.w	r6, r6, #2
   12572:	d109      	bne.n	12588 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12574:	4b3e      	ldr	r3, [pc, #248]	; (12670 <hard_fault+0x130>)
   12576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   12578:	2b00      	cmp	r3, #0
   1257a:	db17      	blt.n	125ac <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   1257c:	4b3c      	ldr	r3, [pc, #240]	; (12670 <hard_fault+0x130>)
   1257e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   12580:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   12584:	d124      	bne.n	125d0 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   12586:	bd70      	pop	{r4, r5, r6, pc}
   12588:	4b36      	ldr	r3, [pc, #216]	; (12664 <hard_fault+0x124>)
   1258a:	4a37      	ldr	r2, [pc, #220]	; (12668 <hard_fault+0x128>)
   1258c:	1a9b      	subs	r3, r3, r2
   1258e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   12590:	f04f 0100 	mov.w	r1, #0
   12594:	2201      	movs	r2, #1
   12596:	f362 0102 	bfi	r1, r2, #0, #3
   1259a:	f36f 01c5 	bfc	r1, #3, #3
   1259e:	f363 118f 	bfi	r1, r3, #6, #10
   125a2:	4834      	ldr	r0, [pc, #208]	; (12674 <hard_fault+0x134>)
   125a4:	f7fe fafc 	bl	10ba0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   125a8:	2000      	movs	r0, #0
   125aa:	e7ec      	b.n	12586 <hard_fault+0x46>
   125ac:	4b2d      	ldr	r3, [pc, #180]	; (12664 <hard_fault+0x124>)
   125ae:	4a2e      	ldr	r2, [pc, #184]	; (12668 <hard_fault+0x128>)
   125b0:	1a9b      	subs	r3, r3, r2
   125b2:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   125b4:	f04f 0100 	mov.w	r1, #0
   125b8:	2201      	movs	r2, #1
   125ba:	f362 0102 	bfi	r1, r2, #0, #3
   125be:	f36f 01c5 	bfc	r1, #3, #3
   125c2:	f363 118f 	bfi	r1, r3, #6, #10
   125c6:	482c      	ldr	r0, [pc, #176]	; (12678 <hard_fault+0x138>)
   125c8:	f7fe faea 	bl	10ba0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   125cc:	4630      	mov	r0, r6
   125ce:	e7da      	b.n	12586 <hard_fault+0x46>
   125d0:	4b24      	ldr	r3, [pc, #144]	; (12664 <hard_fault+0x124>)
   125d2:	4a25      	ldr	r2, [pc, #148]	; (12668 <hard_fault+0x128>)
   125d4:	1a9b      	subs	r3, r3, r2
   125d6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   125d8:	f04f 0100 	mov.w	r1, #0
   125dc:	2201      	movs	r2, #1
   125de:	f362 0102 	bfi	r1, r2, #0, #3
   125e2:	f36f 01c5 	bfc	r1, #3, #3
   125e6:	f363 118f 	bfi	r1, r3, #6, #10
   125ea:	4824      	ldr	r0, [pc, #144]	; (1267c <hard_fault+0x13c>)
   125ec:	f7fe fad8 	bl	10ba0 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   125f0:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   125f2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   125f6:	f64d 7302 	movw	r3, #57090	; 0xdf02
   125fa:	429a      	cmp	r2, r3
   125fc:	d00e      	beq.n	1261c <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   125fe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   12602:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   12606:	781b      	ldrb	r3, [r3, #0]
   12608:	b9db      	cbnz	r3, 12642 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   1260a:	4b1d      	ldr	r3, [pc, #116]	; (12680 <hard_fault+0x140>)
   1260c:	781b      	ldrb	r3, [r3, #0]
   1260e:	b9f3      	cbnz	r3, 1264e <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   12610:	4b1c      	ldr	r3, [pc, #112]	; (12684 <hard_fault+0x144>)
   12612:	881b      	ldrh	r3, [r3, #0]
   12614:	b29b      	uxth	r3, r3
   12616:	bb03      	cbnz	r3, 1265a <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12618:	4630      	mov	r0, r6
	return reason;
   1261a:	e7b4      	b.n	12586 <hard_fault+0x46>
   1261c:	4b11      	ldr	r3, [pc, #68]	; (12664 <hard_fault+0x124>)
   1261e:	4a12      	ldr	r2, [pc, #72]	; (12668 <hard_fault+0x128>)
   12620:	1a9b      	subs	r3, r3, r2
   12622:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   12624:	f04f 0200 	mov.w	r2, #0
   12628:	2101      	movs	r1, #1
   1262a:	f361 0202 	bfi	r2, r1, #0, #3
   1262e:	f36f 02c5 	bfc	r2, #3, #3
   12632:	f363 128f 	bfi	r2, r3, #6, #10
   12636:	6829      	ldr	r1, [r5, #0]
   12638:	4813      	ldr	r0, [pc, #76]	; (12688 <hard_fault+0x148>)
   1263a:	f7fe f9fb 	bl	10a34 <log_1>
			reason = esf->basic.r0;
   1263e:	6828      	ldr	r0, [r5, #0]
   12640:	e7a1      	b.n	12586 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   12642:	4622      	mov	r2, r4
   12644:	2101      	movs	r1, #1
   12646:	4628      	mov	r0, r5
   12648:	f7ff fe98 	bl	1237c <mem_manage_fault>
   1264c:	e79b      	b.n	12586 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   1264e:	4622      	mov	r2, r4
   12650:	2101      	movs	r1, #1
   12652:	4628      	mov	r0, r5
   12654:	f7ff fdba 	bl	121cc <bus_fault>
   12658:	e795      	b.n	12586 <hard_fault+0x46>
			reason = usage_fault(esf);
   1265a:	4628      	mov	r0, r5
   1265c:	f7ff fcea 	bl	12034 <usage_fault>
   12660:	e791      	b.n	12586 <hard_fault+0x46>
   12662:	bf00      	nop
   12664:	00022004 	.word	0x00022004
   12668:	00021f84 	.word	0x00021f84
   1266c:	000229fc 	.word	0x000229fc
   12670:	e000ed00 	.word	0xe000ed00
   12674:	00022a14 	.word	0x00022a14
   12678:	00022a38 	.word	0x00022a38
   1267c:	00022a48 	.word	0x00022a48
   12680:	e000ed29 	.word	0xe000ed29
   12684:	e000ed2a 	.word	0xe000ed2a
   12688:	00022a68 	.word	0x00022a68

0001268c <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   1268c:	b508      	push	{r3, lr}
   1268e:	460a      	mov	r2, r1
   12690:	480b      	ldr	r0, [pc, #44]	; (126c0 <reserved_exception+0x34>)
   12692:	4b0c      	ldr	r3, [pc, #48]	; (126c4 <reserved_exception+0x38>)
   12694:	1ac0      	subs	r0, r0, r3
   12696:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   12698:	f04f 0300 	mov.w	r3, #0
   1269c:	2101      	movs	r1, #1
   1269e:	f361 0302 	bfi	r3, r1, #0, #3
   126a2:	f36f 03c5 	bfc	r3, #3, #3
   126a6:	f360 138f 	bfi	r3, r0, #6, #10
   126aa:	2a0f      	cmp	r2, #15
   126ac:	dc05      	bgt.n	126ba <reserved_exception+0x2e>
   126ae:	4906      	ldr	r1, [pc, #24]	; (126c8 <reserved_exception+0x3c>)
   126b0:	3a10      	subs	r2, #16
   126b2:	4806      	ldr	r0, [pc, #24]	; (126cc <reserved_exception+0x40>)
   126b4:	f7fe f9f4 	bl	10aa0 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   126b8:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   126ba:	4905      	ldr	r1, [pc, #20]	; (126d0 <reserved_exception+0x44>)
   126bc:	e7f8      	b.n	126b0 <reserved_exception+0x24>
   126be:	bf00      	nop
   126c0:	00022004 	.word	0x00022004
   126c4:	00021f84 	.word	0x00021f84
   126c8:	00022a84 	.word	0x00022a84
   126cc:	00022ab8 	.word	0x00022ab8
   126d0:	00022a9c 	.word	0x00022a9c

000126d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   126d4:	b570      	push	{r4, r5, r6, lr}
   126d6:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   126d8:	4b2b      	ldr	r3, [pc, #172]	; (12788 <z_arm_fault+0xb4>)
   126da:	685d      	ldr	r5, [r3, #4]
   126dc:	f3c5 0508 	ubfx	r5, r5, #0, #9
   126e0:	2300      	movs	r3, #0
   126e2:	f383 8811 	msr	BASEPRI, r3
   126e6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   126ea:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   126ee:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   126f2:	d12a      	bne.n	1274a <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   126f4:	f002 030c 	and.w	r3, r2, #12
   126f8:	2b08      	cmp	r3, #8
   126fa:	d010      	beq.n	1271e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   126fc:	f012 0f08 	tst.w	r2, #8
   12700:	d020      	beq.n	12744 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   12702:	460c      	mov	r4, r1
	*nested_exc = false;
   12704:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   12706:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1270a:	4629      	mov	r1, r5
   1270c:	4620      	mov	r0, r4
   1270e:	f00b fad7 	bl	1dcc0 <fault_handle>
   12712:	4605      	mov	r5, r0
	if (recoverable) {
   12714:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   12718:	b1d3      	cbz	r3, 12750 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   1271a:	b00a      	add	sp, #40	; 0x28
   1271c:	bd70      	pop	{r4, r5, r6, pc}
   1271e:	4b1b      	ldr	r3, [pc, #108]	; (1278c <z_arm_fault+0xb8>)
   12720:	4a1b      	ldr	r2, [pc, #108]	; (12790 <z_arm_fault+0xbc>)
   12722:	1a9b      	subs	r3, r3, r2
   12724:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   12726:	f04f 0100 	mov.w	r1, #0
   1272a:	2201      	movs	r2, #1
   1272c:	f362 0102 	bfi	r1, r2, #0, #3
   12730:	f36f 01c5 	bfc	r1, #3, #3
   12734:	f363 118f 	bfi	r1, r3, #6, #10
   12738:	4816      	ldr	r0, [pc, #88]	; (12794 <z_arm_fault+0xc0>)
   1273a:	f7fe fa31 	bl	10ba0 <log_0>
	*nested_exc = false;
   1273e:	2600      	movs	r6, #0
		return NULL;
   12740:	4634      	mov	r4, r6
   12742:	e7e0      	b.n	12706 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   12744:	4604      	mov	r4, r0
			*nested_exc = true;
   12746:	2601      	movs	r6, #1
   12748:	e7dd      	b.n	12706 <z_arm_fault+0x32>
	*nested_exc = false;
   1274a:	2600      	movs	r6, #0
		return NULL;
   1274c:	4634      	mov	r4, r6
   1274e:	e7da      	b.n	12706 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12750:	2220      	movs	r2, #32
   12752:	4621      	mov	r1, r4
   12754:	a801      	add	r0, sp, #4
   12756:	f00b fb66 	bl	1de26 <memcpy>
	if (nested_exc) {
   1275a:	b14e      	cbz	r6, 12770 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1275c:	9b08      	ldr	r3, [sp, #32]
   1275e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12762:	b95a      	cbnz	r2, 1277c <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12764:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12768:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1276c:	9308      	str	r3, [sp, #32]
   1276e:	e005      	b.n	1277c <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12770:	9b08      	ldr	r3, [sp, #32]
   12772:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12776:	f023 0301 	bic.w	r3, r3, #1
   1277a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   1277c:	a901      	add	r1, sp, #4
   1277e:	4628      	mov	r0, r5
   12780:	f00b fa7e 	bl	1dc80 <z_arm_fatal_error>
   12784:	e7c9      	b.n	1271a <z_arm_fault+0x46>
   12786:	bf00      	nop
   12788:	e000ed00 	.word	0xe000ed00
   1278c:	00022004 	.word	0x00022004
   12790:	00021f84 	.word	0x00021f84
   12794:	00022acc 	.word	0x00022acc

00012798 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12798:	4a02      	ldr	r2, [pc, #8]	; (127a4 <z_arm_fault_init+0xc>)
   1279a:	6953      	ldr	r3, [r2, #20]
   1279c:	f043 0310 	orr.w	r3, r3, #16
   127a0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   127a2:	4770      	bx	lr
   127a4:	e000ed00 	.word	0xe000ed00

000127a8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   127a8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   127ac:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   127b0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   127b2:	4672      	mov	r2, lr
	bl z_arm_fault
   127b4:	f7ff ff8e 	bl	126d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   127b8:	bd01      	pop	{r0, pc}
   127ba:	bf00      	nop

000127bc <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   127bc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   127be:	e006      	b.n	127ce <z_arm_interrupt_init+0x12>
   127c0:	f002 010f 	and.w	r1, r2, #15
   127c4:	4b09      	ldr	r3, [pc, #36]	; (127ec <z_arm_interrupt_init+0x30>)
   127c6:	440b      	add	r3, r1
   127c8:	2140      	movs	r1, #64	; 0x40
   127ca:	7619      	strb	r1, [r3, #24]
   127cc:	3201      	adds	r2, #1
   127ce:	2a2f      	cmp	r2, #47	; 0x2f
   127d0:	dc0a      	bgt.n	127e8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   127d2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   127d4:	2b00      	cmp	r3, #0
   127d6:	dbf3      	blt.n	127c0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   127d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   127dc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   127e0:	2140      	movs	r1, #64	; 0x40
   127e2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   127e6:	e7f1      	b.n	127cc <z_arm_interrupt_init+0x10>
	}
}
   127e8:	4770      	bx	lr
   127ea:	bf00      	nop
   127ec:	e000ecfc 	.word	0xe000ecfc

000127f0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   127f0:	2000      	movs	r0, #0
    msr CONTROL, r0
   127f2:	f380 8814 	msr	CONTROL, r0
    isb
   127f6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   127fa:	f00f fa3d 	bl	21c78 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   127fe:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12800:	490d      	ldr	r1, [pc, #52]	; (12838 <__start+0x48>)
    str r0, [r1]
   12802:	6008      	str	r0, [r1, #0]
    dsb
   12804:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12808:	480c      	ldr	r0, [pc, #48]	; (1283c <__start+0x4c>)
    msr msp, r0
   1280a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1280e:	f000 f829 	bl	12864 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12812:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12814:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12818:	4809      	ldr	r0, [pc, #36]	; (12840 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1281a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   1281e:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12820:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12824:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12828:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   1282a:	4308      	orrs	r0, r1
    msr CONTROL, r0
   1282c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12830:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12834:	f7ff faf6 	bl	11e24 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12838:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1283c:	20004b60 	.word	0x20004b60
    ldr r0, =z_interrupt_stacks
   12840:	20004ce0 	.word	0x20004ce0

00012844 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12844:	4b06      	ldr	r3, [pc, #24]	; (12860 <z_arm_clear_arm_mpu_config+0x1c>)
   12846:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   12848:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   1284c:	2300      	movs	r3, #0
   1284e:	4283      	cmp	r3, r0
   12850:	da05      	bge.n	1285e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   12852:	4a03      	ldr	r2, [pc, #12]	; (12860 <z_arm_clear_arm_mpu_config+0x1c>)
   12854:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   12856:	2100      	movs	r1, #0
   12858:	6111      	str	r1, [r2, #16]
   1285a:	3301      	adds	r3, #1
   1285c:	e7f7      	b.n	1284e <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   1285e:	4770      	bx	lr
   12860:	e000ed90 	.word	0xe000ed90

00012864 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12864:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12866:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12868:	2400      	movs	r4, #0
   1286a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1286e:	f7ff ffe9 	bl	12844 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12872:	4623      	mov	r3, r4
   12874:	e008      	b.n	12888 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   12876:	f103 0120 	add.w	r1, r3, #32
   1287a:	4a0e      	ldr	r2, [pc, #56]	; (128b4 <z_arm_init_arch_hw_at_boot+0x50>)
   1287c:	f04f 30ff 	mov.w	r0, #4294967295
   12880:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   12884:	3301      	adds	r3, #1
   12886:	b2db      	uxtb	r3, r3
   12888:	2b07      	cmp	r3, #7
   1288a:	d9f4      	bls.n	12876 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1288c:	2300      	movs	r3, #0
   1288e:	e008      	b.n	128a2 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12890:	f103 0160 	add.w	r1, r3, #96	; 0x60
   12894:	4a07      	ldr	r2, [pc, #28]	; (128b4 <z_arm_init_arch_hw_at_boot+0x50>)
   12896:	f04f 30ff 	mov.w	r0, #4294967295
   1289a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   1289e:	3301      	adds	r3, #1
   128a0:	b2db      	uxtb	r3, r3
   128a2:	2b07      	cmp	r3, #7
   128a4:	d9f4      	bls.n	12890 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   128a6:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   128a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   128ac:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   128b0:	bd10      	pop	{r4, pc}
   128b2:	bf00      	nop
   128b4:	e000e100 	.word	0xe000e100

000128b8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   128b8:	b508      	push	{r3, lr}
	if (_current == thread) {
   128ba:	4b08      	ldr	r3, [pc, #32]	; (128dc <z_impl_k_thread_abort+0x24>)
   128bc:	689b      	ldr	r3, [r3, #8]
   128be:	4283      	cmp	r3, r0
   128c0:	d002      	beq.n	128c8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   128c2:	f009 f9bf 	bl	1bc44 <z_thread_abort>
}
   128c6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   128c8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   128cc:	2b00      	cmp	r3, #0
   128ce:	d0f8      	beq.n	128c2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   128d0:	4a03      	ldr	r2, [pc, #12]	; (128e0 <z_impl_k_thread_abort+0x28>)
   128d2:	6853      	ldr	r3, [r2, #4]
   128d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   128d8:	6053      	str	r3, [r2, #4]
   128da:	e7f2      	b.n	128c2 <z_impl_k_thread_abort+0xa>
   128dc:	20003158 	.word	0x20003158
   128e0:	e000ed00 	.word	0xe000ed00

000128e4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   128e4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   128e6:	4b03      	ldr	r3, [pc, #12]	; (128f4 <z_arm_configure_static_mpu_regions+0x10>)
   128e8:	4a03      	ldr	r2, [pc, #12]	; (128f8 <z_arm_configure_static_mpu_regions+0x14>)
   128ea:	2101      	movs	r1, #1
   128ec:	4803      	ldr	r0, [pc, #12]	; (128fc <z_arm_configure_static_mpu_regions+0x18>)
   128ee:	f00b fa3c 	bl	1dd6a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   128f2:	bd08      	pop	{r3, pc}
   128f4:	20020000 	.word	0x20020000
   128f8:	20000000 	.word	0x20000000
   128fc:	00022afc 	.word	0x00022afc

00012900 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   12900:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12902:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   12906:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12908:	4804      	ldr	r0, [pc, #16]	; (1291c <z_arm_configure_dynamic_mpu_regions+0x1c>)
   1290a:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   1290c:	2320      	movs	r3, #32
   1290e:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   12910:	4b03      	ldr	r3, [pc, #12]	; (12920 <z_arm_configure_dynamic_mpu_regions+0x20>)
   12912:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   12914:	2101      	movs	r1, #1
   12916:	f00b fa2c 	bl	1dd72 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   1291a:	bd08      	pop	{r3, pc}
   1291c:	20001eb8 	.word	0x20001eb8
   12920:	150b0000 	.word	0x150b0000

00012924 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   12924:	4a06      	ldr	r2, [pc, #24]	; (12940 <region_init+0x1c>)
   12926:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12928:	680b      	ldr	r3, [r1, #0]
   1292a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   1292e:	4303      	orrs	r3, r0
   12930:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   12934:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   12936:	688b      	ldr	r3, [r1, #8]
   12938:	f043 0301 	orr.w	r3, r3, #1
   1293c:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   1293e:	4770      	bx	lr
   12940:	e000ed90 	.word	0xe000ed90

00012944 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   12944:	b510      	push	{r4, lr}
   12946:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   12948:	2807      	cmp	r0, #7
   1294a:	d803      	bhi.n	12954 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   1294c:	f7ff ffea 	bl	12924 <region_init>

	return index;
   12950:	4620      	mov	r0, r4
}
   12952:	bd10      	pop	{r4, pc}
   12954:	4b09      	ldr	r3, [pc, #36]	; (1297c <region_allocate_and_init+0x38>)
   12956:	4a0a      	ldr	r2, [pc, #40]	; (12980 <region_allocate_and_init+0x3c>)
   12958:	1a9b      	subs	r3, r3, r2
   1295a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1295c:	f04f 0200 	mov.w	r2, #0
   12960:	2101      	movs	r1, #1
   12962:	f361 0202 	bfi	r2, r1, #0, #3
   12966:	f36f 02c5 	bfc	r2, #3, #3
   1296a:	f363 128f 	bfi	r2, r3, #6, #10
   1296e:	4601      	mov	r1, r0
   12970:	4804      	ldr	r0, [pc, #16]	; (12984 <region_allocate_and_init+0x40>)
   12972:	f7fe f85f 	bl	10a34 <log_1>
		return -EINVAL;
   12976:	f06f 0015 	mvn.w	r0, #21
   1297a:	e7ea      	b.n	12952 <region_allocate_and_init+0xe>
   1297c:	00021ff4 	.word	0x00021ff4
   12980:	00021f84 	.word	0x00021f84
   12984:	00022b08 	.word	0x00022b08

00012988 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   12988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1298c:	4680      	mov	r8, r0
   1298e:	460f      	mov	r7, r1
   12990:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   12992:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   12994:	2400      	movs	r4, #0
   12996:	e009      	b.n	129ac <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   12998:	4629      	mov	r1, r5
   1299a:	b2f0      	uxtb	r0, r6
   1299c:	f00b f9c6 	bl	1dd2c <mpu_configure_region>
   129a0:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   129a2:	f110 0f16 	cmn.w	r0, #22
   129a6:	d025      	beq.n	129f4 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   129a8:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   129aa:	3401      	adds	r4, #1
   129ac:	42bc      	cmp	r4, r7
   129ae:	da21      	bge.n	129f4 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   129b0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   129b4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   129b8:	686a      	ldr	r2, [r5, #4]
   129ba:	2a00      	cmp	r2, #0
   129bc:	d0f5      	beq.n	129aa <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   129be:	f1ba 0f00 	cmp.w	sl, #0
   129c2:	d0e9      	beq.n	12998 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   129c4:	4628      	mov	r0, r5
   129c6:	f00b f9a0 	bl	1dd0a <mpu_partition_is_valid>
		if (do_sanity_check &&
   129ca:	2800      	cmp	r0, #0
   129cc:	d1e4      	bne.n	12998 <mpu_configure_regions+0x10>
   129ce:	4b0b      	ldr	r3, [pc, #44]	; (129fc <mpu_configure_regions+0x74>)
   129d0:	4a0b      	ldr	r2, [pc, #44]	; (12a00 <mpu_configure_regions+0x78>)
   129d2:	1a9b      	subs	r3, r3, r2
   129d4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   129d6:	f04f 0200 	mov.w	r2, #0
   129da:	2101      	movs	r1, #1
   129dc:	f361 0202 	bfi	r2, r1, #0, #3
   129e0:	f36f 02c5 	bfc	r2, #3, #3
   129e4:	f363 128f 	bfi	r2, r3, #6, #10
   129e8:	4621      	mov	r1, r4
   129ea:	4806      	ldr	r0, [pc, #24]	; (12a04 <mpu_configure_regions+0x7c>)
   129ec:	f7fe f822 	bl	10a34 <log_1>
			return -EINVAL;
   129f0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   129f4:	4630      	mov	r0, r6
   129f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   129fa:	bf00      	nop
   129fc:	00021ff4 	.word	0x00021ff4
   12a00:	00021f84 	.word	0x00021f84
   12a04:	00022b30 	.word	0x00022b30

00012a08 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   12a08:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   12a0a:	4c03      	ldr	r4, [pc, #12]	; (12a18 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   12a0c:	2301      	movs	r3, #1
   12a0e:	7822      	ldrb	r2, [r4, #0]
   12a10:	f7ff ffba 	bl	12988 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   12a14:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   12a16:	bd10      	pop	{r4, pc}
   12a18:	200031a3 	.word	0x200031a3

00012a1c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   12a1c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   12a1e:	2300      	movs	r3, #0
   12a20:	4a08      	ldr	r2, [pc, #32]	; (12a44 <mpu_configure_dynamic_mpu_regions+0x28>)
   12a22:	7812      	ldrb	r2, [r2, #0]
   12a24:	f7ff ffb0 	bl	12988 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   12a28:	f110 0f16 	cmn.w	r0, #22
   12a2c:	d008      	beq.n	12a40 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   12a2e:	4603      	mov	r3, r0
   12a30:	2b07      	cmp	r3, #7
   12a32:	dc05      	bgt.n	12a40 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   12a34:	4a04      	ldr	r2, [pc, #16]	; (12a48 <mpu_configure_dynamic_mpu_regions+0x2c>)
   12a36:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   12a38:	2100      	movs	r1, #0
   12a3a:	6111      	str	r1, [r2, #16]
   12a3c:	3301      	adds	r3, #1
   12a3e:	e7f7      	b.n	12a30 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   12a40:	bd08      	pop	{r3, pc}
   12a42:	bf00      	nop
   12a44:	200031a3 	.word	0x200031a3
   12a48:	e000ed90 	.word	0xe000ed90

00012a4c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   12a4c:	4b03      	ldr	r3, [pc, #12]	; (12a5c <arm_core_mpu_enable+0x10>)
   12a4e:	2205      	movs	r2, #5
   12a50:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   12a52:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12a56:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   12a5a:	4770      	bx	lr
   12a5c:	e000ed90 	.word	0xe000ed90

00012a60 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   12a60:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   12a64:	4b01      	ldr	r3, [pc, #4]	; (12a6c <arm_core_mpu_disable+0xc>)
   12a66:	2200      	movs	r2, #0
   12a68:	605a      	str	r2, [r3, #4]
}
   12a6a:	4770      	bx	lr
   12a6c:	e000ed90 	.word	0xe000ed90

00012a70 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   12a70:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   12a72:	4b0e      	ldr	r3, [pc, #56]	; (12aac <z_arm_mpu_init+0x3c>)
   12a74:	681d      	ldr	r5, [r3, #0]
   12a76:	2d08      	cmp	r5, #8
   12a78:	d815      	bhi.n	12aa6 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   12a7a:	f7ff fff1 	bl	12a60 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12a7e:	2400      	movs	r4, #0
   12a80:	42a5      	cmp	r5, r4
   12a82:	d90a      	bls.n	12a9a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   12a84:	4b09      	ldr	r3, [pc, #36]	; (12aac <z_arm_mpu_init+0x3c>)
   12a86:	6859      	ldr	r1, [r3, #4]
   12a88:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   12a8c:	0093      	lsls	r3, r2, #2
   12a8e:	4419      	add	r1, r3
   12a90:	4620      	mov	r0, r4
   12a92:	f7ff ff47 	bl	12924 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   12a96:	3401      	adds	r4, #1
   12a98:	e7f2      	b.n	12a80 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   12a9a:	4b05      	ldr	r3, [pc, #20]	; (12ab0 <z_arm_mpu_init+0x40>)
   12a9c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   12a9e:	f7ff ffd5 	bl	12a4c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   12aa2:	2000      	movs	r0, #0
}
   12aa4:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   12aa6:	f04f 30ff 	mov.w	r0, #4294967295
   12aaa:	e7fb      	b.n	12aa4 <z_arm_mpu_init+0x34>
   12aac:	00022b64 	.word	0x00022b64
   12ab0:	200031a3 	.word	0x200031a3

00012ab4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   12ab4:	4b01      	ldr	r3, [pc, #4]	; (12abc <__stdout_hook_install+0x8>)
   12ab6:	6018      	str	r0, [r3, #0]
}
   12ab8:	4770      	bx	lr
   12aba:	bf00      	nop
   12abc:	2000052c 	.word	0x2000052c

00012ac0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   12ac0:	f04f 0340 	mov.w	r3, #64	; 0x40
   12ac4:	f3ef 8211 	mrs	r2, BASEPRI
   12ac8:	f383 8812 	msr	BASEPRI_MAX, r3
   12acc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12ad0:	2301      	movs	r3, #1
   12ad2:	4906      	ldr	r1, [pc, #24]	; (12aec <nordicsemi_nrf52_init+0x2c>)
   12ad4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   12ad8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   12adc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   12ae0:	f382 8811 	msr	BASEPRI, r2
   12ae4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12ae8:	2000      	movs	r0, #0
   12aea:	4770      	bx	lr
   12aec:	4001e000 	.word	0x4001e000

00012af0 <sys_arch_reboot>:
    *p_gpregret = val;
   12af0:	b2c0      	uxtb	r0, r0
   12af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12af6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   12afa:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   12afe:	4905      	ldr	r1, [pc, #20]	; (12b14 <sys_arch_reboot+0x24>)
   12b00:	68ca      	ldr	r2, [r1, #12]
   12b02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   12b06:	4b04      	ldr	r3, [pc, #16]	; (12b18 <sys_arch_reboot+0x28>)
   12b08:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   12b0a:	60cb      	str	r3, [r1, #12]
   12b0c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   12b10:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   12b12:	e7fd      	b.n	12b10 <sys_arch_reboot+0x20>
   12b14:	e000ed00 	.word	0xe000ed00
   12b18:	05fa0004 	.word	0x05fa0004

00012b1c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   12b1c:	b130      	cbz	r0, 12b2c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   12b1e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12b20:	0180      	lsls	r0, r0, #6
   12b22:	4b03      	ldr	r3, [pc, #12]	; (12b30 <arch_busy_wait+0x14>)
   12b24:	f043 0301 	orr.w	r3, r3, #1
   12b28:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   12b2a:	bd08      	pop	{r3, pc}
   12b2c:	4770      	bx	lr
   12b2e:	bf00      	nop
   12b30:	00022170 	.word	0x00022170

00012b34 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   12b34:	2940      	cmp	r1, #64	; 0x40
   12b36:	bf28      	it	cs
   12b38:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   12b3a:	2300      	movs	r3, #0
   12b3c:	428b      	cmp	r3, r1
   12b3e:	d217      	bcs.n	12b70 <bt_hex_real+0x3c>
{
   12b40:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   12b42:	5cc4      	ldrb	r4, [r0, r3]
   12b44:	0924      	lsrs	r4, r4, #4
   12b46:	005a      	lsls	r2, r3, #1
   12b48:	4e0c      	ldr	r6, [pc, #48]	; (12b7c <bt_hex_real+0x48>)
   12b4a:	5d34      	ldrb	r4, [r6, r4]
   12b4c:	4d0c      	ldr	r5, [pc, #48]	; (12b80 <bt_hex_real+0x4c>)
   12b4e:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   12b52:	5cc4      	ldrb	r4, [r0, r3]
   12b54:	f004 040f 	and.w	r4, r4, #15
   12b58:	3201      	adds	r2, #1
   12b5a:	5d34      	ldrb	r4, [r6, r4]
   12b5c:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   12b5e:	3301      	adds	r3, #1
   12b60:	428b      	cmp	r3, r1
   12b62:	d3ee      	bcc.n	12b42 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   12b64:	4806      	ldr	r0, [pc, #24]	; (12b80 <bt_hex_real+0x4c>)
   12b66:	2200      	movs	r2, #0
   12b68:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   12b6c:	bc70      	pop	{r4, r5, r6}
   12b6e:	4770      	bx	lr
	str[i * 2] = '\0';
   12b70:	4803      	ldr	r0, [pc, #12]	; (12b80 <bt_hex_real+0x4c>)
   12b72:	2200      	movs	r2, #0
   12b74:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   12b78:	4770      	bx	lr
   12b7a:	bf00      	nop
   12b7c:	00022bd4 	.word	0x00022bd4
   12b80:	20001ec4 	.word	0x20001ec4

00012b84 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   12b84:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b86:	b08b      	sub	sp, #44	; 0x2c
   12b88:	4604      	mov	r4, r0
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   12b8a:	7803      	ldrb	r3, [r0, #0]
   12b8c:	2b03      	cmp	r3, #3
   12b8e:	d82c      	bhi.n	12bea <bt_addr_le_str_real+0x66>
   12b90:	e8df f003 	tbb	[pc, r3]
   12b94:	26211c02 	.word	0x26211c02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   12b98:	4917      	ldr	r1, [pc, #92]	; (12bf8 <bt_addr_le_str_real+0x74>)
   12b9a:	a807      	add	r0, sp, #28
   12b9c:	f00b f8ed 	bl	1dd7a <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   12ba0:	7963      	ldrb	r3, [r4, #5]
   12ba2:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   12ba4:	78e1      	ldrb	r1, [r4, #3]
   12ba6:	78a0      	ldrb	r0, [r4, #2]
   12ba8:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   12baa:	4d14      	ldr	r5, [pc, #80]	; (12bfc <bt_addr_le_str_real+0x78>)
   12bac:	af07      	add	r7, sp, #28
   12bae:	9705      	str	r7, [sp, #20]
   12bb0:	9604      	str	r6, [sp, #16]
   12bb2:	9003      	str	r0, [sp, #12]
   12bb4:	9102      	str	r1, [sp, #8]
   12bb6:	9201      	str	r2, [sp, #4]
   12bb8:	9300      	str	r3, [sp, #0]
   12bba:	79a3      	ldrb	r3, [r4, #6]
   12bbc:	4a10      	ldr	r2, [pc, #64]	; (12c00 <bt_addr_le_str_real+0x7c>)
   12bbe:	211e      	movs	r1, #30
   12bc0:	4628      	mov	r0, r5
   12bc2:	f009 fe01 	bl	1c7c8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   12bc6:	4628      	mov	r0, r5
   12bc8:	b00b      	add	sp, #44	; 0x2c
   12bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   12bcc:	490d      	ldr	r1, [pc, #52]	; (12c04 <bt_addr_le_str_real+0x80>)
   12bce:	a807      	add	r0, sp, #28
   12bd0:	f00b f8d3 	bl	1dd7a <strcpy>
		break;
   12bd4:	e7e4      	b.n	12ba0 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   12bd6:	490c      	ldr	r1, [pc, #48]	; (12c08 <bt_addr_le_str_real+0x84>)
   12bd8:	a807      	add	r0, sp, #28
   12bda:	f00b f8ce 	bl	1dd7a <strcpy>
		break;
   12bde:	e7df      	b.n	12ba0 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   12be0:	490a      	ldr	r1, [pc, #40]	; (12c0c <bt_addr_le_str_real+0x88>)
   12be2:	a807      	add	r0, sp, #28
   12be4:	f00b f8c9 	bl	1dd7a <strcpy>
		break;
   12be8:	e7da      	b.n	12ba0 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   12bea:	4a09      	ldr	r2, [pc, #36]	; (12c10 <bt_addr_le_str_real+0x8c>)
   12bec:	210a      	movs	r1, #10
   12bee:	a807      	add	r0, sp, #28
   12bf0:	f009 fdea 	bl	1c7c8 <snprintk>
		break;
   12bf4:	e7d4      	b.n	12ba0 <bt_addr_le_str_real+0x1c>
   12bf6:	bf00      	nop
   12bf8:	00022b88 	.word	0x00022b88
   12bfc:	20001f48 	.word	0x20001f48
   12c00:	00022bb0 	.word	0x00022bb0
   12c04:	00022b90 	.word	0x00022b90
   12c08:	00022b98 	.word	0x00022b98
   12c0c:	00022ba4 	.word	0x00022ba4
   12c10:	00023bc4 	.word	0x00023bc4

00012c14 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   12c14:	b570      	push	{r4, r5, r6, lr}
   12c16:	4605      	mov	r5, r0
   12c18:	460c      	mov	r4, r1
	switch (src->type) {
   12c1a:	7803      	ldrb	r3, [r0, #0]
   12c1c:	2b01      	cmp	r3, #1
   12c1e:	d010      	beq.n	12c42 <uuid_to_uuid128+0x2e>
   12c20:	2b02      	cmp	r3, #2
   12c22:	d020      	beq.n	12c66 <uuid_to_uuid128+0x52>
   12c24:	b103      	cbz	r3, 12c28 <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   12c26:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   12c28:	4e12      	ldr	r6, [pc, #72]	; (12c74 <uuid_to_uuid128+0x60>)
   12c2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12c2c:	6020      	str	r0, [r4, #0]
   12c2e:	6061      	str	r1, [r4, #4]
   12c30:	60a2      	str	r2, [r4, #8]
   12c32:	60e3      	str	r3, [r4, #12]
   12c34:	7833      	ldrb	r3, [r6, #0]
   12c36:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   12c38:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   12c3a:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   12c3c:	0a1b      	lsrs	r3, r3, #8
   12c3e:	73a3      	strb	r3, [r4, #14]
}
   12c40:	e7f1      	b.n	12c26 <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   12c42:	4e0c      	ldr	r6, [pc, #48]	; (12c74 <uuid_to_uuid128+0x60>)
   12c44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12c46:	6020      	str	r0, [r4, #0]
   12c48:	6061      	str	r1, [r4, #4]
   12c4a:	60a2      	str	r2, [r4, #8]
   12c4c:	60e3      	str	r3, [r4, #12]
   12c4e:	7833      	ldrb	r3, [r6, #0]
   12c50:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   12c52:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   12c54:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   12c56:	f3c3 2207 	ubfx	r2, r3, #8, #8
   12c5a:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   12c5c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   12c5e:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   12c60:	0e1b      	lsrs	r3, r3, #24
   12c62:	7423      	strb	r3, [r4, #16]
}
   12c64:	e7df      	b.n	12c26 <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   12c66:	2211      	movs	r2, #17
   12c68:	4601      	mov	r1, r0
   12c6a:	4620      	mov	r0, r4
   12c6c:	f00b f8db 	bl	1de26 <memcpy>
		return;
   12c70:	e7d9      	b.n	12c26 <uuid_to_uuid128+0x12>
   12c72:	bf00      	nop
   12c74:	00022bf0 	.word	0x00022bf0

00012c78 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   12c78:	b538      	push	{r3, r4, r5, lr}
   12c7a:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   12c7c:	4805      	ldr	r0, [pc, #20]	; (12c94 <bt_buf_get_rx+0x1c>)
   12c7e:	f00d f9a2 	bl	1ffc6 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   12c82:	4605      	mov	r5, r0
   12c84:	b120      	cbz	r0, 12c90 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   12c86:	2100      	movs	r1, #0
   12c88:	3008      	adds	r0, #8
   12c8a:	f00d f9be 	bl	2000a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12c8e:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   12c90:	4628      	mov	r0, r5
   12c92:	bd38      	pop	{r3, r4, r5, pc}
   12c94:	2000081c 	.word	0x2000081c

00012c98 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   12c98:	b510      	push	{r4, lr}
   12c9a:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   12c9c:	4b0a      	ldr	r3, [pc, #40]	; (12cc8 <bt_buf_get_cmd_complete+0x30>)
   12c9e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   12ca2:	b158      	cbz	r0, 12cbc <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   12ca4:	f00d f9e8 	bl	20078 <net_buf_ref>
   12ca8:	4604      	mov	r4, r0
   12caa:	2301      	movs	r3, #1
   12cac:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   12cae:	2100      	movs	r1, #0
   12cb0:	8181      	strh	r1, [r0, #12]
   12cb2:	3008      	adds	r0, #8
   12cb4:	f00d f9a9 	bl	2000a <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   12cb8:	4620      	mov	r0, r4
   12cba:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12cbc:	460b      	mov	r3, r1
   12cbe:	2001      	movs	r0, #1
   12cc0:	f7ff ffda 	bl	12c78 <bt_buf_get_rx>
   12cc4:	4604      	mov	r4, r0
   12cc6:	e7f7      	b.n	12cb8 <bt_buf_get_cmd_complete+0x20>
   12cc8:	200002a8 	.word	0x200002a8

00012ccc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   12ccc:	b510      	push	{r4, lr}
	switch (evt) {
   12cce:	280f      	cmp	r0, #15
   12cd0:	d90d      	bls.n	12cee <bt_buf_get_evt+0x22>
   12cd2:	2813      	cmp	r0, #19
   12cd4:	d10d      	bne.n	12cf2 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   12cd6:	4814      	ldr	r0, [pc, #80]	; (12d28 <bt_buf_get_evt+0x5c>)
   12cd8:	f00d f975 	bl	1ffc6 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   12cdc:	4604      	mov	r4, r0
   12cde:	b198      	cbz	r0, 12d08 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   12ce0:	2100      	movs	r1, #0
   12ce2:	3008      	adds	r0, #8
   12ce4:	f00d f991 	bl	2000a <net_buf_simple_reserve>
   12ce8:	2301      	movs	r3, #1
   12cea:	7523      	strb	r3, [r4, #20]
}
   12cec:	e00c      	b.n	12d08 <bt_buf_get_evt+0x3c>
	switch (evt) {
   12cee:	280e      	cmp	r0, #14
   12cf0:	d205      	bcs.n	12cfe <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   12cf2:	b959      	cbnz	r1, 12d0c <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   12cf4:	2001      	movs	r0, #1
   12cf6:	f7ff ffbf 	bl	12c78 <bt_buf_get_rx>
   12cfa:	4604      	mov	r4, r0
   12cfc:	e004      	b.n	12d08 <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   12cfe:	4610      	mov	r0, r2
   12d00:	4619      	mov	r1, r3
   12d02:	f7ff ffc9 	bl	12c98 <bt_buf_get_cmd_complete>
   12d06:	4604      	mov	r4, r0
	}
}
   12d08:	4620      	mov	r0, r4
   12d0a:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   12d0c:	4807      	ldr	r0, [pc, #28]	; (12d2c <bt_buf_get_evt+0x60>)
   12d0e:	f00d f95a 	bl	1ffc6 <net_buf_alloc_fixed>
			if (buf) {
   12d12:	4604      	mov	r4, r0
   12d14:	2800      	cmp	r0, #0
   12d16:	d0f7      	beq.n	12d08 <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   12d18:	2100      	movs	r1, #0
   12d1a:	3008      	adds	r0, #8
   12d1c:	f00d f975 	bl	2000a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   12d20:	2301      	movs	r3, #1
   12d22:	7523      	strb	r3, [r4, #20]
			return buf;
   12d24:	e7f0      	b.n	12d08 <bt_buf_get_evt+0x3c>
   12d26:	bf00      	nop
   12d28:	20000844 	.word	0x20000844
   12d2c:	200007a4 	.word	0x200007a4

00012d30 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   12d30:	2300      	movs	r3, #0
   12d32:	2b00      	cmp	r3, #0
   12d34:	dd00      	ble.n	12d38 <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   12d36:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   12d38:	4a05      	ldr	r2, [pc, #20]	; (12d50 <conn_handle_disconnected+0x20>)
   12d3a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   12d3e:	b922      	cbnz	r2, 12d4a <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   12d40:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   12d44:	4902      	ldr	r1, [pc, #8]	; (12d50 <conn_handle_disconnected+0x20>)
   12d46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   12d4a:	3301      	adds	r3, #1
   12d4c:	e7f1      	b.n	12d32 <conn_handle_disconnected+0x2>
   12d4e:	bf00      	nop
   12d50:	20001f80 	.word	0x20001f80

00012d54 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   12d54:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   12d58:	2300      	movs	r3, #0
   12d5a:	2b00      	cmp	r3, #0
   12d5c:	dd01      	ble.n	12d62 <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   12d5e:	2000      	movs	r0, #0
}
   12d60:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   12d62:	4a06      	ldr	r2, [pc, #24]	; (12d7c <conn_handle_is_disconnected+0x28>)
   12d64:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   12d68:	4282      	cmp	r2, r0
   12d6a:	d001      	beq.n	12d70 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   12d6c:	3301      	adds	r3, #1
   12d6e:	e7f4      	b.n	12d5a <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   12d70:	4a02      	ldr	r2, [pc, #8]	; (12d7c <conn_handle_is_disconnected+0x28>)
   12d72:	2100      	movs	r1, #0
   12d74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   12d78:	2001      	movs	r0, #1
   12d7a:	4770      	bx	lr
   12d7c:	20001f80 	.word	0x20001f80

00012d80 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   12d80:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   12d82:	7851      	ldrb	r1, [r2, #1]
   12d84:	4b08      	ldr	r3, [pc, #32]	; (12da8 <read_local_ver_complete+0x28>)
   12d86:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   12d8a:	8851      	ldrh	r1, [r2, #2]
   12d8c:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   12d90:	7911      	ldrb	r1, [r2, #4]
   12d92:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   12d96:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   12d9a:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   12d9e:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   12da2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   12da6:	4770      	bx	lr
   12da8:	200002a8 	.word	0x200002a8

00012dac <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   12dac:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   12dae:	7a19      	ldrb	r1, [r3, #8]
   12db0:	79da      	ldrb	r2, [r3, #7]
   12db2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   12db6:	7998      	ldrb	r0, [r3, #6]
   12db8:	795a      	ldrb	r2, [r3, #5]
   12dba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   12dbe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   12dc2:	7918      	ldrb	r0, [r3, #4]
   12dc4:	78d9      	ldrb	r1, [r3, #3]
   12dc6:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   12dca:	7898      	ldrb	r0, [r3, #2]
   12dcc:	785b      	ldrb	r3, [r3, #1]
   12dce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   12dd2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   12dd6:	4903      	ldr	r1, [pc, #12]	; (12de4 <le_read_supp_states_complete+0x38>)
   12dd8:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   12ddc:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   12de0:	4770      	bx	lr
   12de2:	bf00      	nop
   12de4:	200002a8 	.word	0x200002a8

00012de8 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   12de8:	b470      	push	{r4, r5, r6}
   12dea:	b08f      	sub	sp, #60	; 0x3c
   12dec:	4606      	mov	r6, r0
	const char * const str[] = {
   12dee:	ac01      	add	r4, sp, #4
   12df0:	4d0a      	ldr	r5, [pc, #40]	; (12e1c <ver_str+0x34>)
   12df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12dfe:	682b      	ldr	r3, [r5, #0]
   12e00:	6023      	str	r3, [r4, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   12e02:	2e0c      	cmp	r6, #12
   12e04:	d903      	bls.n	12e0e <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
   12e06:	4806      	ldr	r0, [pc, #24]	; (12e20 <ver_str+0x38>)
}
   12e08:	b00f      	add	sp, #60	; 0x3c
   12e0a:	bc70      	pop	{r4, r5, r6}
   12e0c:	4770      	bx	lr
		return str[ver];
   12e0e:	ab0e      	add	r3, sp, #56	; 0x38
   12e10:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   12e14:	f856 0c34 	ldr.w	r0, [r6, #-52]
   12e18:	e7f6      	b.n	12e08 <ver_str+0x20>
   12e1a:	bf00      	nop
   12e1c:	00022110 	.word	0x00022110
   12e20:	00022d40 	.word	0x00022d40

00012e24 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   12e24:	2803      	cmp	r0, #3
   12e26:	d901      	bls.n	12e2c <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   12e28:	4802      	ldr	r0, [pc, #8]	; (12e34 <vs_hw_platform+0x10>)
}
   12e2a:	4770      	bx	lr
		return plat_str[platform];
   12e2c:	4b02      	ldr	r3, [pc, #8]	; (12e38 <vs_hw_platform+0x14>)
   12e2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12e32:	4770      	bx	lr
   12e34:	00022d40 	.word	0x00022d40
   12e38:	00023418 	.word	0x00023418

00012e3c <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   12e3c:	2802      	cmp	r0, #2
   12e3e:	d107      	bne.n	12e50 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   12e40:	2903      	cmp	r1, #3
   12e42:	d901      	bls.n	12e48 <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   12e44:	4803      	ldr	r0, [pc, #12]	; (12e54 <vs_hw_variant+0x18>)
}
   12e46:	4770      	bx	lr
		return nordic_str[variant];
   12e48:	4b03      	ldr	r3, [pc, #12]	; (12e58 <vs_hw_variant+0x1c>)
   12e4a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   12e4e:	4770      	bx	lr
		return "unknown";
   12e50:	4800      	ldr	r0, [pc, #0]	; (12e54 <vs_hw_variant+0x18>)
   12e52:	4770      	bx	lr
   12e54:	00022d40 	.word	0x00022d40
   12e58:	000233e8 	.word	0x000233e8

00012e5c <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   12e5c:	2803      	cmp	r0, #3
   12e5e:	d901      	bls.n	12e64 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   12e60:	4802      	ldr	r0, [pc, #8]	; (12e6c <vs_fw_variant+0x10>)
}
   12e62:	4770      	bx	lr
		return var_str[variant];
   12e64:	4b02      	ldr	r3, [pc, #8]	; (12e70 <vs_fw_variant+0x14>)
   12e66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   12e6a:	4770      	bx	lr
   12e6c:	00022d40 	.word	0x00022d40
   12e70:	00023450 	.word	0x00023450

00012e74 <hci_reset_complete>:
	uint8_t status = buf->data[0];
   12e74:	6883      	ldr	r3, [r0, #8]
   12e76:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   12e78:	b993      	cbnz	r3, 12ea0 <hci_reset_complete+0x2c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   12e7a:	f3bf 8f5b 	dmb	ish
   12e7e:	4b09      	ldr	r3, [pc, #36]	; (12ea4 <hci_reset_complete+0x30>)
   12e80:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   12e84:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   12e88:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12e8c:	f3bf 8f5b 	dmb	ish
   12e90:	e853 1f00 	ldrex	r1, [r3]
   12e94:	e843 2000 	strex	r0, r2, [r3]
   12e98:	2800      	cmp	r0, #0
   12e9a:	d1f9      	bne.n	12e90 <hci_reset_complete+0x1c>
   12e9c:	f3bf 8f5b 	dmb	ish
}
   12ea0:	4770      	bx	lr
   12ea2:	bf00      	nop
   12ea4:	200002a8 	.word	0x200002a8

00012ea8 <read_local_features_complete>:
{
   12ea8:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   12eaa:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   12eac:	2208      	movs	r2, #8
   12eae:	3101      	adds	r1, #1
   12eb0:	4801      	ldr	r0, [pc, #4]	; (12eb8 <read_local_features_complete+0x10>)
   12eb2:	f00a ffb8 	bl	1de26 <memcpy>
}
   12eb6:	bd08      	pop	{r3, pc}
   12eb8:	20000318 	.word	0x20000318

00012ebc <read_supported_commands_complete>:
{
   12ebc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   12ebe:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   12ec0:	2240      	movs	r2, #64	; 0x40
   12ec2:	3101      	adds	r1, #1
   12ec4:	4801      	ldr	r0, [pc, #4]	; (12ecc <read_supported_commands_complete+0x10>)
   12ec6:	f00a ffae 	bl	1de26 <memcpy>
}
   12eca:	bd08      	pop	{r3, pc}
   12ecc:	20000320 	.word	0x20000320

00012ed0 <read_le_features_complete>:
{
   12ed0:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   12ed2:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   12ed4:	2208      	movs	r2, #8
   12ed6:	3101      	adds	r1, #1
   12ed8:	4801      	ldr	r0, [pc, #4]	; (12ee0 <read_le_features_complete+0x10>)
   12eda:	f00a ffa4 	bl	1de26 <memcpy>
}
   12ede:	bd08      	pop	{r3, pc}
   12ee0:	20000378 	.word	0x20000378

00012ee4 <le_read_buffer_size_complete>:
{
   12ee4:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   12ee6:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   12ee8:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   12eec:	b299      	uxth	r1, r3
   12eee:	4806      	ldr	r0, [pc, #24]	; (12f08 <le_read_buffer_size_complete+0x24>)
   12ef0:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   12ef4:	b901      	cbnz	r1, 12ef8 <le_read_buffer_size_complete+0x14>
}
   12ef6:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   12ef8:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   12efa:	460a      	mov	r2, r1
   12efc:	f500 7080 	add.w	r0, r0, #256	; 0x100
   12f00:	f00e fa43 	bl	2138a <z_impl_k_sem_init>
   12f04:	e7f7      	b.n	12ef6 <le_read_buffer_size_complete+0x12>
   12f06:	bf00      	nop
   12f08:	200002a8 	.word	0x200002a8

00012f0c <read_buffer_size_complete>:
{
   12f0c:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   12f0e:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   12f10:	4b08      	ldr	r3, [pc, #32]	; (12f34 <read_buffer_size_complete+0x28>)
   12f12:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   12f16:	b103      	cbz	r3, 12f1a <read_buffer_size_complete+0xe>
}
   12f18:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   12f1a:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   12f1e:	4805      	ldr	r0, [pc, #20]	; (12f34 <read_buffer_size_complete+0x28>)
   12f20:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   12f24:	8891      	ldrh	r1, [r2, #4]
   12f26:	460a      	mov	r2, r1
   12f28:	f500 7080 	add.w	r0, r0, #256	; 0x100
   12f2c:	f00e fa2d 	bl	2138a <z_impl_k_sem_init>
   12f30:	e7f2      	b.n	12f18 <read_buffer_size_complete+0xc>
   12f32:	bf00      	nop
   12f34:	200002a8 	.word	0x200002a8

00012f38 <hci_data_buf_overflow>:
{
   12f38:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   12f3a:	6881      	ldr	r1, [r0, #8]
   12f3c:	4b08      	ldr	r3, [pc, #32]	; (12f60 <hci_data_buf_overflow+0x28>)
   12f3e:	4a09      	ldr	r2, [pc, #36]	; (12f64 <hci_data_buf_overflow+0x2c>)
   12f40:	1a9b      	subs	r3, r3, r2
   12f42:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   12f44:	f04f 0200 	mov.w	r2, #0
   12f48:	2002      	movs	r0, #2
   12f4a:	f360 0202 	bfi	r2, r0, #0, #3
   12f4e:	f36f 02c5 	bfc	r2, #3, #3
   12f52:	f363 128f 	bfi	r2, r3, #6, #10
   12f56:	7809      	ldrb	r1, [r1, #0]
   12f58:	4803      	ldr	r0, [pc, #12]	; (12f68 <hci_data_buf_overflow+0x30>)
   12f5a:	f7fd fd6b 	bl	10a34 <log_1>
}
   12f5e:	bd08      	pop	{r3, pc}
   12f60:	00021fac 	.word	0x00021fac
   12f64:	00021f84 	.word	0x00021f84
   12f68:	00022d48 	.word	0x00022d48

00012f6c <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   12f6c:	2801      	cmp	r0, #1
   12f6e:	d001      	beq.n	12f74 <find_pending_connect+0x8>
	return NULL;
   12f70:	2000      	movs	r0, #0
}
   12f72:	4770      	bx	lr
{
   12f74:	b500      	push	{lr}
   12f76:	b083      	sub	sp, #12
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   12f78:	2205      	movs	r2, #5
   12f7a:	4b0d      	ldr	r3, [pc, #52]	; (12fb0 <find_pending_connect+0x44>)
   12f7c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   12f80:	f003 f8ec 	bl	1615c <bt_conn_lookup_state_le>
		if (!conn) {
   12f84:	b110      	cbz	r0, 12f8c <find_pending_connect+0x20>
}
   12f86:	b003      	add	sp, #12
   12f88:	f85d fb04 	ldr.w	pc, [sp], #4
						       BT_ADDR_LE_NONE,
   12f8c:	4b09      	ldr	r3, [pc, #36]	; (12fb4 <find_pending_connect+0x48>)
   12f8e:	e893 0003 	ldmia.w	r3, {r0, r1}
   12f92:	9000      	str	r0, [sp, #0]
   12f94:	f8ad 1004 	strh.w	r1, [sp, #4]
   12f98:	0c09      	lsrs	r1, r1, #16
   12f9a:	f88d 1006 	strb.w	r1, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   12f9e:	2204      	movs	r2, #4
   12fa0:	4669      	mov	r1, sp
   12fa2:	4b03      	ldr	r3, [pc, #12]	; (12fb0 <find_pending_connect+0x44>)
   12fa4:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   12fa8:	f003 f8d8 	bl	1615c <bt_conn_lookup_state_le>
		return conn;
   12fac:	e7eb      	b.n	12f86 <find_pending_connect+0x1a>
   12fae:	bf00      	nop
   12fb0:	200002a8 	.word	0x200002a8
   12fb4:	00022144 	.word	0x00022144

00012fb8 <le_conn_complete_adv_timeout>:
{
   12fb8:	b510      	push	{r4, lr}
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   12fba:	f002 f98b 	bl	152d4 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   12fbe:	3010      	adds	r0, #16
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12fc0:	f3bf 8f5b 	dmb	ish
   12fc4:	e850 3f00 	ldrex	r3, [r0]
   12fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   12fcc:	e840 3200 	strex	r2, r3, [r0]
   12fd0:	2a00      	cmp	r2, #0
   12fd2:	d1f7      	bne.n	12fc4 <le_conn_complete_adv_timeout+0xc>
   12fd4:	f3bf 8f5b 	dmb	ish
		conn = find_pending_connect(BT_HCI_ROLE_PERIPHERAL, NULL);
   12fd8:	2100      	movs	r1, #0
   12fda:	2001      	movs	r0, #1
   12fdc:	f7ff ffc6 	bl	12f6c <find_pending_connect>
		if (!conn) {
   12fe0:	4604      	mov	r4, r0
   12fe2:	b140      	cbz	r0, 12ff6 <le_conn_complete_adv_timeout+0x3e>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   12fe4:	233c      	movs	r3, #60	; 0x3c
   12fe6:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   12fe8:	2100      	movs	r1, #0
   12fea:	f002 fe81 	bl	15cf0 <bt_conn_set_state>
		bt_conn_unref(conn);
   12fee:	4620      	mov	r0, r4
   12ff0:	f00b fc0a 	bl	1e808 <bt_conn_unref>
}
   12ff4:	bd10      	pop	{r4, pc}
   12ff6:	4b08      	ldr	r3, [pc, #32]	; (13018 <le_conn_complete_adv_timeout+0x60>)
   12ff8:	4a08      	ldr	r2, [pc, #32]	; (1301c <le_conn_complete_adv_timeout+0x64>)
   12ffa:	1a9b      	subs	r3, r3, r2
   12ffc:	08db      	lsrs	r3, r3, #3
			BT_ERR("No pending peripheral connection");
   12ffe:	f04f 0100 	mov.w	r1, #0
   13002:	2201      	movs	r2, #1
   13004:	f362 0102 	bfi	r1, r2, #0, #3
   13008:	f36f 01c5 	bfc	r1, #3, #3
   1300c:	f363 118f 	bfi	r1, r3, #6, #10
   13010:	4803      	ldr	r0, [pc, #12]	; (13020 <le_conn_complete_adv_timeout+0x68>)
   13012:	f7fd fdc5 	bl	10ba0 <log_0>
			return;
   13016:	e7ed      	b.n	12ff4 <le_conn_complete_adv_timeout+0x3c>
   13018:	00021fac 	.word	0x00021fac
   1301c:	00021f84 	.word	0x00021f84
   13020:	00022d70 	.word	0x00022d70

00013024 <hci_disconn_complete>:
{
   13024:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13026:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13028:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   1302c:	7823      	ldrb	r3, [r4, #0]
   1302e:	b103      	cbz	r3, 13032 <hci_disconn_complete+0xe>
}
   13030:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   13032:	4630      	mov	r0, r6
   13034:	f002 fe52 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   13038:	4605      	mov	r5, r0
   1303a:	b158      	cbz	r0, 13054 <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   1303c:	78e3      	ldrb	r3, [r4, #3]
   1303e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13040:	2100      	movs	r1, #0
   13042:	f002 fe55 	bl	15cf0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   13046:	78ab      	ldrb	r3, [r5, #2]
   13048:	2b01      	cmp	r3, #1
   1304a:	d015      	beq.n	13078 <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   1304c:	4628      	mov	r0, r5
   1304e:	f00b fbdb 	bl	1e808 <bt_conn_unref>
		return;
   13052:	e7ed      	b.n	13030 <hci_disconn_complete+0xc>
   13054:	4b0a      	ldr	r3, [pc, #40]	; (13080 <hci_disconn_complete+0x5c>)
   13056:	4a0b      	ldr	r2, [pc, #44]	; (13084 <hci_disconn_complete+0x60>)
   13058:	1a9b      	subs	r3, r3, r2
   1305a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   1305c:	f04f 0200 	mov.w	r2, #0
   13060:	2101      	movs	r1, #1
   13062:	f361 0202 	bfi	r2, r1, #0, #3
   13066:	f36f 02c5 	bfc	r2, #3, #3
   1306a:	f363 128f 	bfi	r2, r3, #6, #10
   1306e:	4631      	mov	r1, r6
   13070:	4805      	ldr	r0, [pc, #20]	; (13088 <hci_disconn_complete+0x64>)
   13072:	f7fd fcdf 	bl	10a34 <log_1>
		return;
   13076:	e7db      	b.n	13030 <hci_disconn_complete+0xc>
	bt_conn_unref(conn);
   13078:	4628      	mov	r0, r5
   1307a:	f00b fbc5 	bl	1e808 <bt_conn_unref>
   1307e:	e7d7      	b.n	13030 <hci_disconn_complete+0xc>
   13080:	00021fac 	.word	0x00021fac
   13084:	00021f84 	.word	0x00021f84
   13088:	00022d94 	.word	0x00022d94

0001308c <le_data_len_change>:
{
   1308c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   1308e:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13090:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13092:	4620      	mov	r0, r4
   13094:	f002 fe22 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   13098:	b110      	cbz	r0, 130a0 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   1309a:	f00b fbb5 	bl	1e808 <bt_conn_unref>
}
   1309e:	bd10      	pop	{r4, pc}
   130a0:	4b08      	ldr	r3, [pc, #32]	; (130c4 <le_data_len_change+0x38>)
   130a2:	4a09      	ldr	r2, [pc, #36]	; (130c8 <le_data_len_change+0x3c>)
   130a4:	1a9b      	subs	r3, r3, r2
   130a6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   130a8:	f04f 0200 	mov.w	r2, #0
   130ac:	2101      	movs	r1, #1
   130ae:	f361 0202 	bfi	r2, r1, #0, #3
   130b2:	f36f 02c5 	bfc	r2, #3, #3
   130b6:	f363 128f 	bfi	r2, r3, #6, #10
   130ba:	4621      	mov	r1, r4
   130bc:	4803      	ldr	r0, [pc, #12]	; (130cc <le_data_len_change+0x40>)
   130be:	f7fd fcb9 	bl	10a34 <log_1>
		return;
   130c2:	e7ec      	b.n	1309e <le_data_len_change+0x12>
   130c4:	00021fac 	.word	0x00021fac
   130c8:	00021f84 	.word	0x00021f84
   130cc:	00022dbc 	.word	0x00022dbc

000130d0 <hci_num_completed_packets>:
{
   130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   130d4:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   130d8:	2700      	movs	r7, #0
   130da:	e05c      	b.n	13196 <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   130dc:	3b01      	subs	r3, #1
   130de:	61e3      	str	r3, [r4, #28]
   130e0:	f382 8811 	msr	BASEPRI, r2
   130e4:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   130e8:	4620      	mov	r0, r4
   130ea:	f002 fbe5 	bl	158b8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   130ee:	f007 ffb5 	bl	1b05c <z_impl_k_sem_give>
				continue;
   130f2:	e025      	b.n	13140 <hci_num_completed_packets+0x70>
	list->tail = node;
   130f4:	61a1      	str	r1, [r4, #24]
   130f6:	f382 8811 	msr	BASEPRI, r2
   130fa:	f3bf 8f6f 	isb	sy
			if (!node) {
   130fe:	2b00      	cmp	r3, #0
   13100:	d036      	beq.n	13170 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   13102:	f04f 0240 	mov.w	r2, #64	; 0x40
   13106:	f3ef 8111 	mrs	r1, BASEPRI
   1310a:	f382 8812 	msr	BASEPRI_MAX, r2
   1310e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   13112:	68da      	ldr	r2, [r3, #12]
   13114:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   13116:	2200      	movs	r2, #0
   13118:	60da      	str	r2, [r3, #12]
	parent->next = child;
   1311a:	601a      	str	r2, [r3, #0]
	return list->tail;
   1311c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1311e:	2a00      	cmp	r2, #0
   13120:	d05a      	beq.n	131d8 <hci_num_completed_packets+0x108>
	parent->next = child;
   13122:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13124:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   13126:	f381 8811 	msr	BASEPRI, r1
   1312a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   1312e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   13132:	f008 f95d 	bl	1b3f0 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   13136:	4620      	mov	r0, r4
   13138:	f002 fbbe 	bl	158b8 <bt_conn_get_pkts>
   1313c:	f007 ff8e 	bl	1b05c <z_impl_k_sem_give>
{
   13140:	462e      	mov	r6, r5
		while (count--) {
   13142:	1e75      	subs	r5, r6, #1
   13144:	b2ad      	uxth	r5, r5
   13146:	b316      	cbz	r6, 1318e <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   13148:	f04f 0340 	mov.w	r3, #64	; 0x40
   1314c:	f3ef 8211 	mrs	r2, BASEPRI
   13150:	f383 8812 	msr	BASEPRI_MAX, r3
   13154:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13158:	69e3      	ldr	r3, [r4, #28]
   1315a:	2b00      	cmp	r3, #0
   1315c:	d1be      	bne.n	130dc <hci_num_completed_packets+0xc>
	return list->head;
   1315e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13160:	2b00      	cmp	r3, #0
   13162:	d0c8      	beq.n	130f6 <hci_num_completed_packets+0x26>
	return node->next;
   13164:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   13166:	6161      	str	r1, [r4, #20]
	return list->tail;
   13168:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1316a:	4298      	cmp	r0, r3
   1316c:	d1c3      	bne.n	130f6 <hci_num_completed_packets+0x26>
   1316e:	e7c1      	b.n	130f4 <hci_num_completed_packets+0x24>
   13170:	4b1c      	ldr	r3, [pc, #112]	; (131e4 <hci_num_completed_packets+0x114>)
   13172:	4a1d      	ldr	r2, [pc, #116]	; (131e8 <hci_num_completed_packets+0x118>)
   13174:	1a9b      	subs	r3, r3, r2
   13176:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   13178:	2201      	movs	r2, #1
   1317a:	f362 0902 	bfi	r9, r2, #0, #3
   1317e:	f36f 09c5 	bfc	r9, #3, #3
   13182:	f363 198f 	bfi	r9, r3, #6, #10
   13186:	4649      	mov	r1, r9
   13188:	4818      	ldr	r0, [pc, #96]	; (131ec <hci_num_completed_packets+0x11c>)
   1318a:	f7fd fd09 	bl	10ba0 <log_0>
		bt_conn_unref(conn);
   1318e:	4620      	mov	r0, r4
   13190:	f00b fb3a 	bl	1e808 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   13194:	3701      	adds	r7, #1
   13196:	f898 3000 	ldrb.w	r3, [r8]
   1319a:	429f      	cmp	r7, r3
   1319c:	da1f      	bge.n	131de <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1319e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   131a2:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   131a6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   131aa:	4628      	mov	r0, r5
   131ac:	f002 fd96 	bl	15cdc <bt_conn_lookup_handle>
		if (!conn) {
   131b0:	4604      	mov	r4, r0
   131b2:	2800      	cmp	r0, #0
   131b4:	d1c5      	bne.n	13142 <hci_num_completed_packets+0x72>
   131b6:	4b0b      	ldr	r3, [pc, #44]	; (131e4 <hci_num_completed_packets+0x114>)
   131b8:	4a0b      	ldr	r2, [pc, #44]	; (131e8 <hci_num_completed_packets+0x118>)
   131ba:	1a9b      	subs	r3, r3, r2
   131bc:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   131be:	2201      	movs	r2, #1
   131c0:	f362 0a02 	bfi	sl, r2, #0, #3
   131c4:	f36f 0ac5 	bfc	sl, #3, #3
   131c8:	f363 1a8f 	bfi	sl, r3, #6, #10
   131cc:	4652      	mov	r2, sl
   131ce:	4629      	mov	r1, r5
   131d0:	4807      	ldr	r0, [pc, #28]	; (131f0 <hci_num_completed_packets+0x120>)
   131d2:	f7fd fc2f 	bl	10a34 <log_1>
			continue;
   131d6:	e7dd      	b.n	13194 <hci_num_completed_packets+0xc4>
	list->tail = node;
   131d8:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   131da:	6223      	str	r3, [r4, #32]
}
   131dc:	e7a3      	b.n	13126 <hci_num_completed_packets+0x56>
}
   131de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   131e2:	bf00      	nop
   131e4:	00021fac 	.word	0x00021fac
   131e8:	00021f84 	.word	0x00021f84
   131ec:	00022dfc 	.word	0x00022dfc
   131f0:	00022de0 	.word	0x00022de0

000131f4 <hci_cmd_done>:
{
   131f4:	b570      	push	{r4, r5, r6, lr}
   131f6:	b084      	sub	sp, #16
   131f8:	4605      	mov	r5, r0
   131fa:	460e      	mov	r6, r1
   131fc:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   131fe:	7990      	ldrb	r0, [r2, #6]
   13200:	f005 fad8 	bl	187b4 <net_buf_pool_get>
   13204:	4b55      	ldr	r3, [pc, #340]	; (1335c <hci_cmd_done+0x168>)
   13206:	4283      	cmp	r3, r0
   13208:	d01c      	beq.n	13244 <hci_cmd_done+0x50>
   1320a:	4b55      	ldr	r3, [pc, #340]	; (13360 <hci_cmd_done+0x16c>)
   1320c:	4a55      	ldr	r2, [pc, #340]	; (13364 <hci_cmd_done+0x170>)
   1320e:	1a9b      	subs	r3, r3, r2
   13210:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   13212:	f04f 0600 	mov.w	r6, #0
   13216:	2202      	movs	r2, #2
   13218:	f362 0602 	bfi	r6, r2, #0, #3
   1321c:	f36f 06c5 	bfc	r6, #3, #3
   13220:	f363 168f 	bfi	r6, r3, #6, #10
   13224:	9500      	str	r5, [sp, #0]
   13226:	79a0      	ldrb	r0, [r4, #6]
   13228:	9001      	str	r0, [sp, #4]
   1322a:	f005 fac3 	bl	187b4 <net_buf_pool_get>
   1322e:	9002      	str	r0, [sp, #8]
   13230:	4b4a      	ldr	r3, [pc, #296]	; (1335c <hci_cmd_done+0x168>)
   13232:	9303      	str	r3, [sp, #12]
   13234:	4633      	mov	r3, r6
   13236:	2204      	movs	r2, #4
   13238:	4669      	mov	r1, sp
   1323a:	484b      	ldr	r0, [pc, #300]	; (13368 <hci_cmd_done+0x174>)
   1323c:	f7fd fc6c 	bl	10b18 <log_n>
}
   13240:	b004      	add	sp, #16
   13242:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   13244:	4620      	mov	r0, r4
   13246:	f005 fabd 	bl	187c4 <net_buf_id>
   1324a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1324e:	4b47      	ldr	r3, [pc, #284]	; (1336c <hci_cmd_done+0x178>)
   13250:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13254:	8843      	ldrh	r3, [r0, #2]
   13256:	42ab      	cmp	r3, r5
   13258:	d133      	bne.n	132c2 <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   1325a:	4b45      	ldr	r3, [pc, #276]	; (13370 <hci_cmd_done+0x17c>)
   1325c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   13260:	b128      	cbz	r0, 1326e <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   13262:	f00c fee3 	bl	2002c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13266:	4b42      	ldr	r3, [pc, #264]	; (13370 <hci_cmd_done+0x17c>)
   13268:	2200      	movs	r2, #0
   1326a:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   1326e:	4620      	mov	r0, r4
   13270:	f005 faa8 	bl	187c4 <net_buf_id>
   13274:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13278:	4b3c      	ldr	r3, [pc, #240]	; (1336c <hci_cmd_done+0x178>)
   1327a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1327e:	6843      	ldr	r3, [r0, #4]
   13280:	b10b      	cbz	r3, 13286 <hci_cmd_done+0x92>
   13282:	2e00      	cmp	r6, #0
   13284:	d039      	beq.n	132fa <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   13286:	4620      	mov	r0, r4
   13288:	f005 fa9c 	bl	187c4 <net_buf_id>
   1328c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13290:	4b36      	ldr	r3, [pc, #216]	; (1336c <hci_cmd_done+0x178>)
   13292:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13296:	6883      	ldr	r3, [r0, #8]
   13298:	2b00      	cmp	r3, #0
   1329a:	d0d1      	beq.n	13240 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   1329c:	4620      	mov	r0, r4
   1329e:	f005 fa91 	bl	187c4 <net_buf_id>
   132a2:	4d32      	ldr	r5, [pc, #200]	; (1336c <hci_cmd_done+0x178>)
   132a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   132a8:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   132ac:	4620      	mov	r0, r4
   132ae:	f005 fa89 	bl	187c4 <net_buf_id>
   132b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   132b6:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   132ba:	68a8      	ldr	r0, [r5, #8]
   132bc:	f007 fece 	bl	1b05c <z_impl_k_sem_give>
}
   132c0:	e7be      	b.n	13240 <hci_cmd_done+0x4c>
   132c2:	4b27      	ldr	r3, [pc, #156]	; (13360 <hci_cmd_done+0x16c>)
   132c4:	4a27      	ldr	r2, [pc, #156]	; (13364 <hci_cmd_done+0x170>)
   132c6:	1a9b      	subs	r3, r3, r2
   132c8:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   132ca:	f04f 0600 	mov.w	r6, #0
   132ce:	2202      	movs	r2, #2
   132d0:	f362 0602 	bfi	r6, r2, #0, #3
   132d4:	f36f 06c5 	bfc	r6, #3, #3
   132d8:	f363 168f 	bfi	r6, r3, #6, #10
   132dc:	4620      	mov	r0, r4
   132de:	f005 fa71 	bl	187c4 <net_buf_id>
   132e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   132e6:	4b21      	ldr	r3, [pc, #132]	; (1336c <hci_cmd_done+0x178>)
   132e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   132ec:	4633      	mov	r3, r6
   132ee:	8842      	ldrh	r2, [r0, #2]
   132f0:	4629      	mov	r1, r5
   132f2:	4820      	ldr	r0, [pc, #128]	; (13374 <hci_cmd_done+0x180>)
   132f4:	f7fd fbd4 	bl	10aa0 <log_2>
		return;
   132f8:	e7a2      	b.n	13240 <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   132fa:	4620      	mov	r0, r4
   132fc:	f005 fa62 	bl	187c4 <net_buf_id>
   13300:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13304:	4b19      	ldr	r3, [pc, #100]	; (1336c <hci_cmd_done+0x178>)
   13306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1330a:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   1330c:	6813      	ldr	r3, [r2, #0]
   1330e:	6851      	ldr	r1, [r2, #4]
   13310:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13312:	f001 051f 	and.w	r5, r1, #31
   13316:	2201      	movs	r2, #1
   13318:	40aa      	lsls	r2, r5

	if (val) {
   1331a:	b170      	cbz	r0, 1333a <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1331c:	0949      	lsrs	r1, r1, #5
   1331e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   13322:	f3bf 8f5b 	dmb	ish
   13326:	e853 1f00 	ldrex	r1, [r3]
   1332a:	4311      	orrs	r1, r2
   1332c:	e843 1000 	strex	r0, r1, [r3]
   13330:	2800      	cmp	r0, #0
   13332:	d1f8      	bne.n	13326 <hci_cmd_done+0x132>
   13334:	f3bf 8f5b 	dmb	ish
   13338:	e7a5      	b.n	13286 <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1333a:	0949      	lsrs	r1, r1, #5
   1333c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13340:	43d2      	mvns	r2, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13342:	f3bf 8f5b 	dmb	ish
   13346:	e853 1f00 	ldrex	r1, [r3]
   1334a:	4011      	ands	r1, r2
   1334c:	e843 1000 	strex	r0, r1, [r3]
   13350:	2800      	cmp	r0, #0
   13352:	d1f8      	bne.n	13346 <hci_cmd_done+0x152>
   13354:	f3bf 8f5b 	dmb	ish
	}
}
   13358:	e795      	b.n	13286 <hci_cmd_done+0x92>
   1335a:	bf00      	nop
   1335c:	200007f4 	.word	0x200007f4
   13360:	00021fac 	.word	0x00021fac
   13364:	00021f84 	.word	0x00021f84
   13368:	00022e14 	.word	0x00022e14
   1336c:	20001f68 	.word	0x20001f68
   13370:	200002a8 	.word	0x200002a8
   13374:	00022e4c 	.word	0x00022e4c

00013378 <hci_cmd_status>:
{
   13378:	b538      	push	{r3, r4, r5, lr}
   1337a:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1337c:	2104      	movs	r1, #4
   1337e:	3008      	adds	r0, #8
   13380:	f00c fec6 	bl	20110 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13384:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13386:	4622      	mov	r2, r4
   13388:	7801      	ldrb	r1, [r0, #0]
   1338a:	8840      	ldrh	r0, [r0, #2]
   1338c:	f7ff ff32 	bl	131f4 <hci_cmd_done>
	if (ncmd) {
   13390:	b905      	cbnz	r5, 13394 <hci_cmd_status+0x1c>
}
   13392:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   13394:	4801      	ldr	r0, [pc, #4]	; (1339c <hci_cmd_status+0x24>)
   13396:	f007 fe61 	bl	1b05c <z_impl_k_sem_give>
   1339a:	e7fa      	b.n	13392 <hci_cmd_status+0x1a>
   1339c:	200003c0 	.word	0x200003c0

000133a0 <hci_cmd_complete>:
{
   133a0:	b538      	push	{r3, r4, r5, lr}
   133a2:	4604      	mov	r4, r0
   133a4:	2103      	movs	r1, #3
   133a6:	3008      	adds	r0, #8
   133a8:	f00c feb2 	bl	20110 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   133ac:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   133ae:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   133b0:	4622      	mov	r2, r4
   133b2:	7819      	ldrb	r1, [r3, #0]
   133b4:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   133b8:	f7ff ff1c 	bl	131f4 <hci_cmd_done>
	if (ncmd) {
   133bc:	b905      	cbnz	r5, 133c0 <hci_cmd_complete+0x20>
}
   133be:	bd38      	pop	{r3, r4, r5, pc}
   133c0:	4801      	ldr	r0, [pc, #4]	; (133c8 <hci_cmd_complete+0x28>)
   133c2:	f007 fe4b 	bl	1b05c <z_impl_k_sem_give>
   133c6:	e7fa      	b.n	133be <hci_cmd_complete+0x1e>
   133c8:	200003c0 	.word	0x200003c0

000133cc <hci_hardware_error>:
{
   133cc:	b508      	push	{r3, lr}
   133ce:	2101      	movs	r1, #1
   133d0:	3008      	adds	r0, #8
   133d2:	f00c fe9d 	bl	20110 <net_buf_simple_pull_mem>
   133d6:	4b09      	ldr	r3, [pc, #36]	; (133fc <hci_hardware_error+0x30>)
   133d8:	4a09      	ldr	r2, [pc, #36]	; (13400 <hci_hardware_error+0x34>)
   133da:	1a9b      	subs	r3, r3, r2
   133dc:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   133de:	f04f 0200 	mov.w	r2, #0
   133e2:	2101      	movs	r1, #1
   133e4:	f361 0202 	bfi	r2, r1, #0, #3
   133e8:	f36f 02c5 	bfc	r2, #3, #3
   133ec:	f363 128f 	bfi	r2, r3, #6, #10
   133f0:	7801      	ldrb	r1, [r0, #0]
   133f2:	4804      	ldr	r0, [pc, #16]	; (13404 <hci_hardware_error+0x38>)
   133f4:	f7fd fb1e 	bl	10a34 <log_1>
}
   133f8:	bd08      	pop	{r3, pc}
   133fa:	bf00      	nop
   133fc:	00021fac 	.word	0x00021fac
   13400:	00021f84 	.word	0x00021f84
   13404:	00022e80 	.word	0x00022e80

00013408 <hci_vendor_event>:
{
   13408:	b510      	push	{r4, lr}
   1340a:	4b0c      	ldr	r3, [pc, #48]	; (1343c <hci_vendor_event+0x34>)
   1340c:	4a0c      	ldr	r2, [pc, #48]	; (13440 <hci_vendor_event+0x38>)
   1340e:	1a9b      	subs	r3, r3, r2
   13410:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   13412:	f04f 0400 	mov.w	r4, #0
   13416:	2202      	movs	r2, #2
   13418:	f362 0402 	bfi	r4, r2, #0, #3
   1341c:	f36f 04c5 	bfc	r4, #3, #3
   13420:	f363 148f 	bfi	r4, r3, #6, #10
   13424:	8981      	ldrh	r1, [r0, #12]
   13426:	6880      	ldr	r0, [r0, #8]
   13428:	f7ff fb84 	bl	12b34 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   1342c:	f7fd f988 	bl	10740 <z_log_strdup>
   13430:	4601      	mov	r1, r0
   13432:	4622      	mov	r2, r4
   13434:	4803      	ldr	r0, [pc, #12]	; (13444 <hci_vendor_event+0x3c>)
   13436:	f7fd fafd 	bl	10a34 <log_1>
}
   1343a:	bd10      	pop	{r4, pc}
   1343c:	00021fac 	.word	0x00021fac
   13440:	00021f84 	.word	0x00021f84
   13444:	00022ea4 	.word	0x00022ea4

00013448 <bt_dev_show_info>:
{
   13448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1344c:	b086      	sub	sp, #24
   1344e:	4b3d      	ldr	r3, [pc, #244]	; (13544 <bt_dev_show_info+0xfc>)
   13450:	4a3d      	ldr	r2, [pc, #244]	; (13548 <bt_dev_show_info+0x100>)
   13452:	1a9b      	subs	r3, r3, r2
   13454:	08db      	lsrs	r3, r3, #3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   13456:	f04f 0400 	mov.w	r4, #0
   1345a:	2203      	movs	r2, #3
   1345c:	f362 0402 	bfi	r4, r2, #0, #3
   13460:	f36f 04c5 	bfc	r4, #3, #3
   13464:	f363 148f 	bfi	r4, r3, #6, #10
   13468:	4b38      	ldr	r3, [pc, #224]	; (1354c <bt_dev_show_info+0x104>)
   1346a:	79db      	ldrb	r3, [r3, #7]
   1346c:	2b01      	cmp	r3, #1
   1346e:	d92b      	bls.n	134c8 <bt_dev_show_info+0x80>
   13470:	4e37      	ldr	r6, [pc, #220]	; (13550 <bt_dev_show_info+0x108>)
   13472:	4836      	ldr	r0, [pc, #216]	; (1354c <bt_dev_show_info+0x104>)
   13474:	f7ff fb86 	bl	12b84 <bt_addr_le_str_real>
   13478:	f7fd f962 	bl	10740 <z_log_strdup>
   1347c:	4602      	mov	r2, r0
   1347e:	4623      	mov	r3, r4
   13480:	4631      	mov	r1, r6
   13482:	4834      	ldr	r0, [pc, #208]	; (13554 <bt_dev_show_info+0x10c>)
   13484:	f7fd fb0c 	bl	10aa0 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   13488:	2401      	movs	r4, #1
   1348a:	4b30      	ldr	r3, [pc, #192]	; (1354c <bt_dev_show_info+0x104>)
   1348c:	79db      	ldrb	r3, [r3, #7]
   1348e:	42a3      	cmp	r3, r4
   13490:	dd1c      	ble.n	134cc <bt_dev_show_info+0x84>
   13492:	4b2c      	ldr	r3, [pc, #176]	; (13544 <bt_dev_show_info+0xfc>)
   13494:	4a2c      	ldr	r2, [pc, #176]	; (13548 <bt_dev_show_info+0x100>)
   13496:	1a9b      	subs	r3, r3, r2
   13498:	08db      	lsrs	r3, r3, #3
		BT_INFO("Identity[%d]: %s",
   1349a:	2203      	movs	r2, #3
   1349c:	f362 0502 	bfi	r5, r2, #0, #3
   134a0:	f36f 05c5 	bfc	r5, #3, #3
   134a4:	f363 158f 	bfi	r5, r3, #6, #10
   134a8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   134ac:	4827      	ldr	r0, [pc, #156]	; (1354c <bt_dev_show_info+0x104>)
   134ae:	4418      	add	r0, r3
   134b0:	f7ff fb68 	bl	12b84 <bt_addr_le_str_real>
   134b4:	f7fd f944 	bl	10740 <z_log_strdup>
   134b8:	4602      	mov	r2, r0
   134ba:	462b      	mov	r3, r5
   134bc:	4621      	mov	r1, r4
   134be:	4826      	ldr	r0, [pc, #152]	; (13558 <bt_dev_show_info+0x110>)
   134c0:	f7fd faee 	bl	10aa0 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   134c4:	3401      	adds	r4, #1
   134c6:	e7e0      	b.n	1348a <bt_dev_show_info+0x42>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   134c8:	4e24      	ldr	r6, [pc, #144]	; (1355c <bt_dev_show_info+0x114>)
   134ca:	e7d2      	b.n	13472 <bt_dev_show_info+0x2a>
   134cc:	4c1d      	ldr	r4, [pc, #116]	; (13544 <bt_dev_show_info+0xfc>)
   134ce:	4b1e      	ldr	r3, [pc, #120]	; (13548 <bt_dev_show_info+0x100>)
   134d0:	1ae4      	subs	r4, r4, r3
   134d2:	08e4      	lsrs	r4, r4, #3
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   134d4:	2703      	movs	r7, #3
   134d6:	f04f 0500 	mov.w	r5, #0
   134da:	f367 0502 	bfi	r5, r7, #0, #3
   134de:	f36f 05c5 	bfc	r5, #3, #3
   134e2:	f364 158f 	bfi	r5, r4, #6, #10
   134e6:	4e19      	ldr	r6, [pc, #100]	; (1354c <bt_dev_show_info+0x104>)
   134e8:	f896 8068 	ldrb.w	r8, [r6, #104]	; 0x68
   134ec:	4640      	mov	r0, r8
   134ee:	f7ff fc7b 	bl	12de8 <ver_str>
   134f2:	9002      	str	r0, [sp, #8]
   134f4:	f8cd 800c 	str.w	r8, [sp, #12]
   134f8:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
   134fc:	9304      	str	r3, [sp, #16]
   134fe:	f8b6 306e 	ldrh.w	r3, [r6, #110]	; 0x6e
   13502:	9305      	str	r3, [sp, #20]
   13504:	462b      	mov	r3, r5
   13506:	2204      	movs	r2, #4
   13508:	a902      	add	r1, sp, #8
   1350a:	4815      	ldr	r0, [pc, #84]	; (13560 <bt_dev_show_info+0x118>)
   1350c:	f7fd fb04 	bl	10b18 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   13510:	f04f 0500 	mov.w	r5, #0
   13514:	f367 0502 	bfi	r5, r7, #0, #3
   13518:	f36f 05c5 	bfc	r5, #3, #3
   1351c:	f364 158f 	bfi	r5, r4, #6, #10
   13520:	f896 4069 	ldrb.w	r4, [r6, #105]	; 0x69
   13524:	4620      	mov	r0, r4
   13526:	f7ff fc5f 	bl	12de8 <ver_str>
   1352a:	4601      	mov	r1, r0
   1352c:	f8ad 5000 	strh.w	r5, [sp]
   13530:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
   13534:	4622      	mov	r2, r4
   13536:	480b      	ldr	r0, [pc, #44]	; (13564 <bt_dev_show_info+0x11c>)
   13538:	f7fd fa3e 	bl	109b8 <log_3>
}
   1353c:	b006      	add	sp, #24
   1353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13542:	bf00      	nop
   13544:	00021fac 	.word	0x00021fac
   13548:	00021f84 	.word	0x00021f84
   1354c:	200002a8 	.word	0x200002a8
   13550:	00022ec8 	.word	0x00022ec8
   13554:	00022ecc 	.word	0x00022ecc
   13558:	00022edc 	.word	0x00022edc
   1355c:	00022244 	.word	0x00022244
   13560:	00022ef0 	.word	0x00022ef0
   13564:	00022f30 	.word	0x00022f30

00013568 <hci_acl>:
{
   13568:	b570      	push	{r4, r5, r6, lr}
   1356a:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1356c:	8983      	ldrh	r3, [r0, #12]
   1356e:	2b03      	cmp	r3, #3
   13570:	d923      	bls.n	135ba <hci_acl+0x52>
   13572:	2104      	movs	r1, #4
   13574:	f104 0008 	add.w	r0, r4, #8
   13578:	f00c fdca 	bl	20110 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   1357c:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   1357e:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   13580:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   13582:	f3c0 000b 	ubfx	r0, r0, #0, #12
   13586:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13588:	23ff      	movs	r3, #255	; 0xff
   1358a:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   1358c:	89a1      	ldrh	r1, [r4, #12]
   1358e:	4291      	cmp	r1, r2
   13590:	d021      	beq.n	135d6 <hci_acl+0x6e>
   13592:	4823      	ldr	r0, [pc, #140]	; (13620 <hci_acl+0xb8>)
   13594:	4b23      	ldr	r3, [pc, #140]	; (13624 <hci_acl+0xbc>)
   13596:	1ac0      	subs	r0, r0, r3
   13598:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1359a:	f04f 0300 	mov.w	r3, #0
   1359e:	2501      	movs	r5, #1
   135a0:	f365 0302 	bfi	r3, r5, #0, #3
   135a4:	f36f 03c5 	bfc	r3, #3, #3
   135a8:	f360 138f 	bfi	r3, r0, #6, #10
   135ac:	481e      	ldr	r0, [pc, #120]	; (13628 <hci_acl+0xc0>)
   135ae:	f7fd fa77 	bl	10aa0 <log_2>
		net_buf_unref(buf);
   135b2:	4620      	mov	r0, r4
   135b4:	f00c fd3a 	bl	2002c <net_buf_unref>
}
   135b8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   135ba:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   135be:	4a1b      	ldr	r2, [pc, #108]	; (1362c <hci_acl+0xc4>)
   135c0:	491b      	ldr	r1, [pc, #108]	; (13630 <hci_acl+0xc8>)
   135c2:	481c      	ldr	r0, [pc, #112]	; (13634 <hci_acl+0xcc>)
   135c4:	f009 f8f2 	bl	1c7ac <printk>
   135c8:	4040      	eors	r0, r0
   135ca:	f380 8811 	msr	BASEPRI, r0
   135ce:	f04f 0003 	mov.w	r0, #3
   135d2:	df02      	svc	2
   135d4:	e7cd      	b.n	13572 <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   135d6:	f002 fb81 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   135da:	4605      	mov	r5, r0
   135dc:	b158      	cbz	r0, 135f6 <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   135de:	f002 fc81 	bl	15ee4 <bt_conn_index>
   135e2:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   135e4:	4632      	mov	r2, r6
   135e6:	4621      	mov	r1, r4
   135e8:	4628      	mov	r0, r5
   135ea:	f00b f8da 	bl	1e7a2 <bt_conn_recv>
	bt_conn_unref(conn);
   135ee:	4628      	mov	r0, r5
   135f0:	f00b f90a 	bl	1e808 <bt_conn_unref>
   135f4:	e7e0      	b.n	135b8 <hci_acl+0x50>
   135f6:	4b0a      	ldr	r3, [pc, #40]	; (13620 <hci_acl+0xb8>)
   135f8:	4a0a      	ldr	r2, [pc, #40]	; (13624 <hci_acl+0xbc>)
   135fa:	1a9b      	subs	r3, r3, r2
   135fc:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   135fe:	f04f 0200 	mov.w	r2, #0
   13602:	2101      	movs	r1, #1
   13604:	f361 0202 	bfi	r2, r1, #0, #3
   13608:	f36f 02c5 	bfc	r2, #3, #3
   1360c:	f363 128f 	bfi	r2, r3, #6, #10
   13610:	8ae1      	ldrh	r1, [r4, #22]
   13612:	4809      	ldr	r0, [pc, #36]	; (13638 <hci_acl+0xd0>)
   13614:	f7fd fa0e 	bl	10a34 <log_1>
		net_buf_unref(buf);
   13618:	4620      	mov	r0, r4
   1361a:	f00c fd07 	bl	2002c <net_buf_unref>
		return;
   1361e:	e7cb      	b.n	135b8 <hci_acl+0x50>
   13620:	00021fac 	.word	0x00021fac
   13624:	00021f84 	.word	0x00021f84
   13628:	00022fc8 	.word	0x00022fc8
   1362c:	00022f58 	.word	0x00022f58
   13630:	00022f8c 	.word	0x00022f8c
   13634:	00022fa8 	.word	0x00022fa8
   13638:	00022fec 	.word	0x00022fec

0001363c <le_conn_update_complete>:
{
   1363c:	b570      	push	{r4, r5, r6, lr}
   1363e:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   13640:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   13642:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   13646:	4630      	mov	r0, r6
   13648:	f002 fb48 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   1364c:	b148      	cbz	r0, 13662 <le_conn_update_complete+0x26>
   1364e:	4605      	mov	r5, r0
	if (!evt->status) {
   13650:	7823      	ldrb	r3, [r4, #0]
   13652:	b1c3      	cbz	r3, 13686 <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13654:	2b1a      	cmp	r3, #26
   13656:	d025      	beq.n	136a4 <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   13658:	4628      	mov	r0, r5
   1365a:	f00b f8d5 	bl	1e808 <bt_conn_unref>
}
   1365e:	b002      	add	sp, #8
   13660:	bd70      	pop	{r4, r5, r6, pc}
   13662:	4b24      	ldr	r3, [pc, #144]	; (136f4 <le_conn_update_complete+0xb8>)
   13664:	4a24      	ldr	r2, [pc, #144]	; (136f8 <le_conn_update_complete+0xbc>)
   13666:	1a9b      	subs	r3, r3, r2
   13668:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1366a:	f04f 0200 	mov.w	r2, #0
   1366e:	2101      	movs	r1, #1
   13670:	f361 0202 	bfi	r2, r1, #0, #3
   13674:	f36f 02c5 	bfc	r2, #3, #3
   13678:	f363 128f 	bfi	r2, r3, #6, #10
   1367c:	4631      	mov	r1, r6
   1367e:	481f      	ldr	r0, [pc, #124]	; (136fc <le_conn_update_complete+0xc0>)
   13680:	f7fd f9d8 	bl	10a34 <log_1>
		return;
   13684:	e7eb      	b.n	1365e <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   13686:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   1368a:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1368e:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   13692:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13696:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1369a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1369e:	f002 fc57 	bl	15f50 <notify_le_param_updated>
   136a2:	e7d9      	b.n	13658 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   136a4:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   136a6:	2b01      	cmp	r3, #1
   136a8:	d1d6      	bne.n	13658 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   136aa:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   136ac:	f3bf 8f5b 	dmb	ish
   136b0:	e853 2f00 	ldrex	r2, [r3]
   136b4:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   136b8:	e843 1000 	strex	r0, r1, [r3]
   136bc:	2800      	cmp	r0, #0
   136be:	d1f7      	bne.n	136b0 <le_conn_update_complete+0x74>
   136c0:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   136c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
   136c8:	d1c6      	bne.n	13658 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   136ca:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   136ce:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   136d2:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   136d6:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   136da:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   136de:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   136e2:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   136e6:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   136ea:	4669      	mov	r1, sp
   136ec:	4628      	mov	r0, r5
   136ee:	f00b fa2b 	bl	1eb48 <bt_l2cap_update_conn_param>
   136f2:	e7b1      	b.n	13658 <le_conn_update_complete+0x1c>
   136f4:	00021fac 	.word	0x00021fac
   136f8:	00021f84 	.word	0x00021f84
   136fc:	00022dbc 	.word	0x00022dbc

00013700 <hci_le_meta_event>:
{
   13700:	b5f0      	push	{r4, r5, r6, r7, lr}
   13702:	b083      	sub	sp, #12
   13704:	4604      	mov	r4, r0
   13706:	2101      	movs	r1, #1
   13708:	3008      	adds	r0, #8
   1370a:	f00c fd01 	bl	20110 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1370e:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   13710:	2300      	movs	r3, #0
   13712:	2b06      	cmp	r3, #6
   13714:	d823      	bhi.n	1375e <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   13716:	4a20      	ldr	r2, [pc, #128]	; (13798 <hci_le_meta_event+0x98>)
   13718:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   1371c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   13720:	4295      	cmp	r5, r2
   13722:	d108      	bne.n	13736 <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   13724:	89a1      	ldrh	r1, [r4, #12]
   13726:	7843      	ldrb	r3, [r0, #1]
   13728:	4299      	cmp	r1, r3
   1372a:	d306      	bcc.n	1373a <hci_le_meta_event+0x3a>
		handler->handler(buf);
   1372c:	6843      	ldr	r3, [r0, #4]
   1372e:	4620      	mov	r0, r4
   13730:	4798      	blx	r3
}
   13732:	b003      	add	sp, #12
   13734:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   13736:	3301      	adds	r3, #1
   13738:	e7eb      	b.n	13712 <hci_le_meta_event+0x12>
   1373a:	4a18      	ldr	r2, [pc, #96]	; (1379c <hci_le_meta_event+0x9c>)
   1373c:	4b18      	ldr	r3, [pc, #96]	; (137a0 <hci_le_meta_event+0xa0>)
   1373e:	1ad2      	subs	r2, r2, r3
   13740:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13742:	f04f 0300 	mov.w	r3, #0
   13746:	2001      	movs	r0, #1
   13748:	f360 0302 	bfi	r3, r0, #0, #3
   1374c:	f36f 03c5 	bfc	r3, #3, #3
   13750:	f362 138f 	bfi	r3, r2, #6, #10
   13754:	462a      	mov	r2, r5
   13756:	4813      	ldr	r0, [pc, #76]	; (137a4 <hci_le_meta_event+0xa4>)
   13758:	f7fd f9a2 	bl	10aa0 <log_2>
			return;
   1375c:	e7e9      	b.n	13732 <hci_le_meta_event+0x32>
   1375e:	4b0f      	ldr	r3, [pc, #60]	; (1379c <hci_le_meta_event+0x9c>)
   13760:	4a0f      	ldr	r2, [pc, #60]	; (137a0 <hci_le_meta_event+0xa0>)
   13762:	1a9b      	subs	r3, r3, r2
   13764:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   13766:	f04f 0600 	mov.w	r6, #0
   1376a:	2202      	movs	r2, #2
   1376c:	f362 0602 	bfi	r6, r2, #0, #3
   13770:	f36f 06c5 	bfc	r6, #3, #3
   13774:	f363 168f 	bfi	r6, r3, #6, #10
   13778:	89a7      	ldrh	r7, [r4, #12]
   1377a:	4639      	mov	r1, r7
   1377c:	68a0      	ldr	r0, [r4, #8]
   1377e:	f7ff f9d9 	bl	12b34 <bt_hex_real>
   13782:	f7fc ffdd 	bl	10740 <z_log_strdup>
   13786:	4603      	mov	r3, r0
   13788:	f8ad 6000 	strh.w	r6, [sp]
   1378c:	463a      	mov	r2, r7
   1378e:	4629      	mov	r1, r5
   13790:	4805      	ldr	r0, [pc, #20]	; (137a8 <hci_le_meta_event+0xa8>)
   13792:	f7fd f911 	bl	109b8 <log_3>
}
   13796:	e7cc      	b.n	13732 <hci_le_meta_event+0x32>
   13798:	000233a0 	.word	0x000233a0
   1379c:	00021fac 	.word	0x00021fac
   137a0:	00021f84 	.word	0x00021f84
   137a4:	00023010 	.word	0x00023010
   137a8:	00023034 	.word	0x00023034

000137ac <hci_event>:
{
   137ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   137ae:	b083      	sub	sp, #12
   137b0:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   137b2:	8983      	ldrh	r3, [r0, #12]
   137b4:	2b01      	cmp	r3, #1
   137b6:	d916      	bls.n	137e6 <hci_event+0x3a>
   137b8:	2102      	movs	r1, #2
   137ba:	f104 0008 	add.w	r0, r4, #8
   137be:	f00c fca7 	bl	20110 <net_buf_simple_pull_mem>
   137c2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   137c4:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   137c6:	3b05      	subs	r3, #5
   137c8:	2b15      	cmp	r3, #21
   137ca:	d81c      	bhi.n	13806 <hci_event+0x5a>
   137cc:	e8df f003 	tbb	[pc, r3]
   137d0:	1b1b1b19 	.word	0x1b1b1b19
   137d4:	1b1b1b1b 	.word	0x1b1b1b1b
   137d8:	1b36361b 	.word	0x1b36361b
   137dc:	1b361b1b 	.word	0x1b361b1b
   137e0:	1b1b1b1b 	.word	0x1b1b1b1b
   137e4:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   137e6:	f640 130d 	movw	r3, #2317	; 0x90d
   137ea:	4a35      	ldr	r2, [pc, #212]	; (138c0 <hci_event+0x114>)
   137ec:	4935      	ldr	r1, [pc, #212]	; (138c4 <hci_event+0x118>)
   137ee:	4836      	ldr	r0, [pc, #216]	; (138c8 <hci_event+0x11c>)
   137f0:	f008 ffdc 	bl	1c7ac <printk>
   137f4:	4040      	eors	r0, r0
   137f6:	f380 8811 	msr	BASEPRI, r0
   137fa:	f04f 0003 	mov.w	r0, #3
   137fe:	df02      	svc	2
   13800:	e7da      	b.n	137b8 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13802:	2303      	movs	r3, #3
   13804:	e000      	b.n	13808 <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   13806:	2302      	movs	r3, #2
   13808:	f013 0f02 	tst.w	r3, #2
   1380c:	d018      	beq.n	13840 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1380e:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   13810:	2300      	movs	r3, #0
   13812:	2b03      	cmp	r3, #3
   13814:	d836      	bhi.n	13884 <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   13816:	4a2d      	ldr	r2, [pc, #180]	; (138cc <hci_event+0x120>)
   13818:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   1381c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   13820:	4295      	cmp	r5, r2
   13822:	d11b      	bne.n	1385c <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   13824:	89a1      	ldrh	r1, [r4, #12]
   13826:	7843      	ldrb	r3, [r0, #1]
   13828:	4299      	cmp	r1, r3
   1382a:	d319      	bcc.n	13860 <hci_event+0xb4>
		handler->handler(buf);
   1382c:	6843      	ldr	r3, [r0, #4]
   1382e:	4620      	mov	r0, r4
   13830:	4798      	blx	r3
	net_buf_unref(buf);
   13832:	4620      	mov	r0, r4
   13834:	f00c fbfa 	bl	2002c <net_buf_unref>
}
   13838:	b003      	add	sp, #12
   1383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   1383c:	2301      	movs	r3, #1
   1383e:	e7e3      	b.n	13808 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13840:	f640 1311 	movw	r3, #2321	; 0x911
   13844:	4a1e      	ldr	r2, [pc, #120]	; (138c0 <hci_event+0x114>)
   13846:	4922      	ldr	r1, [pc, #136]	; (138d0 <hci_event+0x124>)
   13848:	481f      	ldr	r0, [pc, #124]	; (138c8 <hci_event+0x11c>)
   1384a:	f008 ffaf 	bl	1c7ac <printk>
   1384e:	4040      	eors	r0, r0
   13850:	f380 8811 	msr	BASEPRI, r0
   13854:	f04f 0003 	mov.w	r0, #3
   13858:	df02      	svc	2
   1385a:	e7d8      	b.n	1380e <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   1385c:	3301      	adds	r3, #1
   1385e:	e7d8      	b.n	13812 <hci_event+0x66>
   13860:	4a1c      	ldr	r2, [pc, #112]	; (138d4 <hci_event+0x128>)
   13862:	4b1d      	ldr	r3, [pc, #116]	; (138d8 <hci_event+0x12c>)
   13864:	1ad2      	subs	r2, r2, r3
   13866:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13868:	f04f 0300 	mov.w	r3, #0
   1386c:	2001      	movs	r0, #1
   1386e:	f360 0302 	bfi	r3, r0, #0, #3
   13872:	f36f 03c5 	bfc	r3, #3, #3
   13876:	f362 138f 	bfi	r3, r2, #6, #10
   1387a:	462a      	mov	r2, r5
   1387c:	4817      	ldr	r0, [pc, #92]	; (138dc <hci_event+0x130>)
   1387e:	f7fd f90f 	bl	10aa0 <log_2>
			return;
   13882:	e7d6      	b.n	13832 <hci_event+0x86>
   13884:	4b13      	ldr	r3, [pc, #76]	; (138d4 <hci_event+0x128>)
   13886:	4a14      	ldr	r2, [pc, #80]	; (138d8 <hci_event+0x12c>)
   13888:	1a9b      	subs	r3, r3, r2
   1388a:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1388c:	f04f 0600 	mov.w	r6, #0
   13890:	2202      	movs	r2, #2
   13892:	f362 0602 	bfi	r6, r2, #0, #3
   13896:	f36f 06c5 	bfc	r6, #3, #3
   1389a:	f363 168f 	bfi	r6, r3, #6, #10
   1389e:	89a7      	ldrh	r7, [r4, #12]
   138a0:	4639      	mov	r1, r7
   138a2:	68a0      	ldr	r0, [r4, #8]
   138a4:	f7ff f946 	bl	12b34 <bt_hex_real>
   138a8:	f7fc ff4a 	bl	10740 <z_log_strdup>
   138ac:	4603      	mov	r3, r0
   138ae:	f8ad 6000 	strh.w	r6, [sp]
   138b2:	463a      	mov	r2, r7
   138b4:	4629      	mov	r1, r5
   138b6:	480a      	ldr	r0, [pc, #40]	; (138e0 <hci_event+0x134>)
   138b8:	f7fd f87e 	bl	109b8 <log_3>
   138bc:	e7b9      	b.n	13832 <hci_event+0x86>
   138be:	bf00      	nop
   138c0:	00022f58 	.word	0x00022f58
   138c4:	00022f8c 	.word	0x00022f8c
   138c8:	00022fa8 	.word	0x00022fa8
   138cc:	000233f8 	.word	0x000233f8
   138d0:	00023058 	.word	0x00023058
   138d4:	00021fac 	.word	0x00021fac
   138d8:	00021f84 	.word	0x00021f84
   138dc:	00023010 	.word	0x00023010
   138e0:	00023034 	.word	0x00023034

000138e4 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   138e4:	b538      	push	{r3, r4, r5, lr}
   138e6:	e003      	b.n	138f0 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   138e8:	f7ff ff60 	bl	137ac <hci_event>
	z_impl_k_yield();
   138ec:	f008 f8d4 	bl	1ba98 <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   138f0:	f04f 32ff 	mov.w	r2, #4294967295
   138f4:	f04f 33ff 	mov.w	r3, #4294967295
   138f8:	480f      	ldr	r0, [pc, #60]	; (13938 <hci_rx_thread+0x54>)
   138fa:	f00c fb6b 	bl	1ffd4 <net_buf_get>
   138fe:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   13900:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   13902:	2901      	cmp	r1, #1
   13904:	d0f0      	beq.n	138e8 <hci_rx_thread+0x4>
   13906:	2903      	cmp	r1, #3
   13908:	d102      	bne.n	13910 <hci_rx_thread+0x2c>
			hci_acl(buf);
   1390a:	f7ff fe2d 	bl	13568 <hci_acl>
			break;
   1390e:	e7ed      	b.n	138ec <hci_rx_thread+0x8>
   13910:	4b0a      	ldr	r3, [pc, #40]	; (1393c <hci_rx_thread+0x58>)
   13912:	4a0b      	ldr	r2, [pc, #44]	; (13940 <hci_rx_thread+0x5c>)
   13914:	1a9b      	subs	r3, r3, r2
   13916:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   13918:	2201      	movs	r2, #1
   1391a:	f362 0502 	bfi	r5, r2, #0, #3
   1391e:	f36f 05c5 	bfc	r5, #3, #3
   13922:	f363 158f 	bfi	r5, r3, #6, #10
   13926:	462a      	mov	r2, r5
   13928:	4806      	ldr	r0, [pc, #24]	; (13944 <hci_rx_thread+0x60>)
   1392a:	f7fd f883 	bl	10a34 <log_1>
			net_buf_unref(buf);
   1392e:	4620      	mov	r0, r4
   13930:	f00c fb7c 	bl	2002c <net_buf_unref>
			break;
   13934:	e7da      	b.n	138ec <hci_rx_thread+0x8>
   13936:	bf00      	nop
   13938:	200003dc 	.word	0x200003dc
   1393c:	00021fac 	.word	0x00021fac
   13940:	00021f84 	.word	0x00021f84
   13944:	00023088 	.word	0x00023088

00013948 <bt_hci_cmd_state_set_init>:
{
   13948:	b510      	push	{r4, lr}
   1394a:	460c      	mov	r4, r1
	state->target = target;
   1394c:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   1394e:	604b      	str	r3, [r1, #4]
	state->val = val;
   13950:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13954:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   13956:	f004 ff35 	bl	187c4 <net_buf_id>
   1395a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1395e:	4b02      	ldr	r3, [pc, #8]	; (13968 <bt_hci_cmd_state_set_init+0x20>)
   13960:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13964:	6044      	str	r4, [r0, #4]
}
   13966:	bd10      	pop	{r4, pc}
   13968:	20001f68 	.word	0x20001f68

0001396c <bt_hci_cmd_create>:
{
   1396c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13970:	4682      	mov	sl, r0
   13972:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   13974:	f04f 32ff 	mov.w	r2, #4294967295
   13978:	f04f 33ff 	mov.w	r3, #4294967295
   1397c:	4817      	ldr	r0, [pc, #92]	; (139dc <bt_hci_cmd_create+0x70>)
   1397e:	f00c fb22 	bl	1ffc6 <net_buf_alloc_fixed>
   13982:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13984:	f100 0808 	add.w	r8, r0, #8
   13988:	2100      	movs	r1, #0
   1398a:	4640      	mov	r0, r8
   1398c:	f00c fb3d 	bl	2000a <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13990:	2700      	movs	r7, #0
   13992:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   13994:	4620      	mov	r0, r4
   13996:	f004 ff15 	bl	187c4 <net_buf_id>
   1399a:	4d11      	ldr	r5, [pc, #68]	; (139e0 <bt_hci_cmd_create+0x74>)
   1399c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   139a0:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   139a4:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   139a8:	4620      	mov	r0, r4
   139aa:	f004 ff0b 	bl	187c4 <net_buf_id>
   139ae:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   139b2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   139b6:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   139b8:	4620      	mov	r0, r4
   139ba:	f004 ff03 	bl	187c4 <net_buf_id>
   139be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   139c2:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   139c6:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   139c8:	2103      	movs	r1, #3
   139ca:	4640      	mov	r0, r8
   139cc:	f00c fb78 	bl	200c0 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   139d0:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   139d4:	7086      	strb	r6, [r0, #2]
}
   139d6:	4620      	mov	r0, r4
   139d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   139dc:	200007f4 	.word	0x200007f4
   139e0:	20001f68 	.word	0x20001f68

000139e4 <bt_hci_cmd_send_sync>:
{
   139e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   139e6:	b087      	sub	sp, #28
   139e8:	4606      	mov	r6, r0
   139ea:	4615      	mov	r5, r2
	if (!buf) {
   139ec:	460c      	mov	r4, r1
   139ee:	b361      	cbz	r1, 13a4a <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   139f0:	2201      	movs	r2, #1
   139f2:	2100      	movs	r1, #0
   139f4:	4668      	mov	r0, sp
   139f6:	f00d fcc8 	bl	2138a <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   139fa:	4620      	mov	r0, r4
   139fc:	f004 fee2 	bl	187c4 <net_buf_id>
   13a00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13a04:	4b2f      	ldr	r3, [pc, #188]	; (13ac4 <bt_hci_cmd_send_sync+0xe0>)
   13a06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13a0a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13a0e:	4620      	mov	r0, r4
   13a10:	f00c fb32 	bl	20078 <net_buf_ref>
   13a14:	4601      	mov	r1, r0
   13a16:	482c      	ldr	r0, [pc, #176]	; (13ac8 <bt_hci_cmd_send_sync+0xe4>)
   13a18:	f00c fafb 	bl	20012 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13a1c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13a20:	2300      	movs	r3, #0
   13a22:	4668      	mov	r0, sp
   13a24:	f007 fb42 	bl	1b0ac <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13a28:	4607      	mov	r7, r0
   13a2a:	b9b0      	cbnz	r0, 13a5a <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   13a2c:	4620      	mov	r0, r4
   13a2e:	f004 fec9 	bl	187c4 <net_buf_id>
   13a32:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   13a36:	4b23      	ldr	r3, [pc, #140]	; (13ac4 <bt_hci_cmd_send_sync+0xe0>)
   13a38:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   13a3c:	b9ff      	cbnz	r7, 13a7e <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   13a3e:	2d00      	cmp	r5, #0
   13a40:	d03a      	beq.n	13ab8 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   13a42:	602c      	str	r4, [r5, #0]
	return 0;
   13a44:	2000      	movs	r0, #0
}
   13a46:	b007      	add	sp, #28
   13a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   13a4a:	f7ff ff8f 	bl	1396c <bt_hci_cmd_create>
		if (!buf) {
   13a4e:	4604      	mov	r4, r0
   13a50:	2800      	cmp	r0, #0
   13a52:	d1cd      	bne.n	139f0 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   13a54:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13a58:	e7f5      	b.n	13a46 <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13a5a:	f44f 7399 	mov.w	r3, #306	; 0x132
   13a5e:	4a1b      	ldr	r2, [pc, #108]	; (13acc <bt_hci_cmd_send_sync+0xe8>)
   13a60:	491b      	ldr	r1, [pc, #108]	; (13ad0 <bt_hci_cmd_send_sync+0xec>)
   13a62:	481c      	ldr	r0, [pc, #112]	; (13ad4 <bt_hci_cmd_send_sync+0xf0>)
   13a64:	f008 fea2 	bl	1c7ac <printk>
   13a68:	4639      	mov	r1, r7
   13a6a:	481b      	ldr	r0, [pc, #108]	; (13ad8 <bt_hci_cmd_send_sync+0xf4>)
   13a6c:	f008 fe9e 	bl	1c7ac <printk>
   13a70:	4040      	eors	r0, r0
   13a72:	f380 8811 	msr	BASEPRI, r0
   13a76:	f04f 0003 	mov.w	r0, #3
   13a7a:	df02      	svc	2
   13a7c:	e7d6      	b.n	13a2c <bt_hci_cmd_send_sync+0x48>
   13a7e:	4a17      	ldr	r2, [pc, #92]	; (13adc <bt_hci_cmd_send_sync+0xf8>)
   13a80:	4b17      	ldr	r3, [pc, #92]	; (13ae0 <bt_hci_cmd_send_sync+0xfc>)
   13a82:	1ad2      	subs	r2, r2, r3
   13a84:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   13a86:	f04f 0300 	mov.w	r3, #0
   13a8a:	2102      	movs	r1, #2
   13a8c:	f361 0302 	bfi	r3, r1, #0, #3
   13a90:	f36f 03c5 	bfc	r3, #3, #3
   13a94:	f362 138f 	bfi	r3, r2, #6, #10
   13a98:	463a      	mov	r2, r7
   13a9a:	4631      	mov	r1, r6
   13a9c:	4811      	ldr	r0, [pc, #68]	; (13ae4 <bt_hci_cmd_send_sync+0x100>)
   13a9e:	f7fc ffff 	bl	10aa0 <log_2>
		net_buf_unref(buf);
   13aa2:	4620      	mov	r0, r4
   13aa4:	f00c fac2 	bl	2002c <net_buf_unref>
		switch (status) {
   13aa8:	2f09      	cmp	r7, #9
   13aaa:	d002      	beq.n	13ab2 <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   13aac:	f06f 0004 	mvn.w	r0, #4
   13ab0:	e7c9      	b.n	13a46 <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   13ab2:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   13ab6:	e7c6      	b.n	13a46 <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   13ab8:	4620      	mov	r0, r4
   13aba:	f00c fab7 	bl	2002c <net_buf_unref>
	return 0;
   13abe:	2000      	movs	r0, #0
   13ac0:	e7c1      	b.n	13a46 <bt_hci_cmd_send_sync+0x62>
   13ac2:	bf00      	nop
   13ac4:	20001f68 	.word	0x20001f68
   13ac8:	200003f4 	.word	0x200003f4
   13acc:	00022f58 	.word	0x00022f58
   13ad0:	0002309c 	.word	0x0002309c
   13ad4:	00022fa8 	.word	0x00022fa8
   13ad8:	000230a8 	.word	0x000230a8
   13adc:	00021fac 	.word	0x00021fac
   13ae0:	00021f84 	.word	0x00021f84
   13ae4:	000230c8 	.word	0x000230c8

00013ae8 <common_init>:
{
   13ae8:	b510      	push	{r4, lr}
   13aea:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   13aec:	4b22      	ldr	r3, [pc, #136]	; (13b78 <common_init+0x90>)
   13aee:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   13af2:	689b      	ldr	r3, [r3, #8]
   13af4:	f013 0f01 	tst.w	r3, #1
   13af8:	d10d      	bne.n	13b16 <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   13afa:	aa01      	add	r2, sp, #4
   13afc:	2100      	movs	r1, #0
   13afe:	f640 4003 	movw	r0, #3075	; 0xc03
   13b02:	f7ff ff6f 	bl	139e4 <bt_hci_cmd_send_sync>
		if (err) {
   13b06:	4604      	mov	r4, r0
   13b08:	b968      	cbnz	r0, 13b26 <common_init+0x3e>
		hci_reset_complete(rsp);
   13b0a:	9801      	ldr	r0, [sp, #4]
   13b0c:	f7ff f9b2 	bl	12e74 <hci_reset_complete>
		net_buf_unref(rsp);
   13b10:	9801      	ldr	r0, [sp, #4]
   13b12:	f00c fa8b 	bl	2002c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   13b16:	aa01      	add	r2, sp, #4
   13b18:	2100      	movs	r1, #0
   13b1a:	f241 0003 	movw	r0, #4099	; 0x1003
   13b1e:	f7ff ff61 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13b22:	4604      	mov	r4, r0
   13b24:	b110      	cbz	r0, 13b2c <common_init+0x44>
}
   13b26:	4620      	mov	r0, r4
   13b28:	b002      	add	sp, #8
   13b2a:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   13b2c:	9801      	ldr	r0, [sp, #4]
   13b2e:	f7ff f9bb 	bl	12ea8 <read_local_features_complete>
	net_buf_unref(rsp);
   13b32:	9801      	ldr	r0, [sp, #4]
   13b34:	f00c fa7a 	bl	2002c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   13b38:	aa01      	add	r2, sp, #4
   13b3a:	2100      	movs	r1, #0
   13b3c:	f241 0001 	movw	r0, #4097	; 0x1001
   13b40:	f7ff ff50 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13b44:	4604      	mov	r4, r0
   13b46:	2800      	cmp	r0, #0
   13b48:	d1ed      	bne.n	13b26 <common_init+0x3e>
	read_local_ver_complete(rsp);
   13b4a:	9801      	ldr	r0, [sp, #4]
   13b4c:	f7ff f918 	bl	12d80 <read_local_ver_complete>
	net_buf_unref(rsp);
   13b50:	9801      	ldr	r0, [sp, #4]
   13b52:	f00c fa6b 	bl	2002c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   13b56:	aa01      	add	r2, sp, #4
   13b58:	2100      	movs	r1, #0
   13b5a:	f241 0002 	movw	r0, #4098	; 0x1002
   13b5e:	f7ff ff41 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13b62:	4604      	mov	r4, r0
   13b64:	2800      	cmp	r0, #0
   13b66:	d1de      	bne.n	13b26 <common_init+0x3e>
	read_supported_commands_complete(rsp);
   13b68:	9801      	ldr	r0, [sp, #4]
   13b6a:	f7ff f9a7 	bl	12ebc <read_supported_commands_complete>
	net_buf_unref(rsp);
   13b6e:	9801      	ldr	r0, [sp, #4]
   13b70:	f00c fa5c 	bl	2002c <net_buf_unref>
	return 0;
   13b74:	e7d7      	b.n	13b26 <common_init+0x3e>
   13b76:	bf00      	nop
   13b78:	200002a8 	.word	0x200002a8

00013b7c <hci_le_read_max_data_len>:
{
   13b7c:	b570      	push	{r4, r5, r6, lr}
   13b7e:	b082      	sub	sp, #8
   13b80:	4605      	mov	r5, r0
   13b82:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   13b84:	aa01      	add	r2, sp, #4
   13b86:	2100      	movs	r1, #0
   13b88:	f242 002f 	movw	r0, #8239	; 0x202f
   13b8c:	f7ff ff2a 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13b90:	4606      	mov	r6, r0
   13b92:	b960      	cbnz	r0, 13bae <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   13b94:	9801      	ldr	r0, [sp, #4]
   13b96:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   13b98:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   13b9c:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   13b9e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   13ba2:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   13ba4:	f00c fa42 	bl	2002c <net_buf_unref>
}
   13ba8:	4630      	mov	r0, r6
   13baa:	b002      	add	sp, #8
   13bac:	bd70      	pop	{r4, r5, r6, pc}
   13bae:	4b08      	ldr	r3, [pc, #32]	; (13bd0 <hci_le_read_max_data_len+0x54>)
   13bb0:	4a08      	ldr	r2, [pc, #32]	; (13bd4 <hci_le_read_max_data_len+0x58>)
   13bb2:	1a9b      	subs	r3, r3, r2
   13bb4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   13bb6:	f04f 0100 	mov.w	r1, #0
   13bba:	2201      	movs	r2, #1
   13bbc:	f362 0102 	bfi	r1, r2, #0, #3
   13bc0:	f36f 01c5 	bfc	r1, #3, #3
   13bc4:	f363 118f 	bfi	r1, r3, #6, #10
   13bc8:	4803      	ldr	r0, [pc, #12]	; (13bd8 <hci_le_read_max_data_len+0x5c>)
   13bca:	f7fc ffe9 	bl	10ba0 <log_0>
		return err;
   13bce:	e7eb      	b.n	13ba8 <hci_le_read_max_data_len+0x2c>
   13bd0:	00021fac 	.word	0x00021fac
   13bd4:	00021f84 	.word	0x00021f84
   13bd8:	000230e4 	.word	0x000230e4

00013bdc <le_set_event_mask>:
{
   13bdc:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   13bde:	2108      	movs	r1, #8
   13be0:	f242 0001 	movw	r0, #8193	; 0x2001
   13be4:	f7ff fec2 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   13be8:	b398      	cbz	r0, 13c52 <le_set_event_mask+0x76>
   13bea:	4604      	mov	r4, r0
   13bec:	2108      	movs	r1, #8
   13bee:	4408      	add	r0, r1
   13bf0:	f00c fa66 	bl	200c0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   13bf4:	4b18      	ldr	r3, [pc, #96]	; (13c58 <le_set_event_mask+0x7c>)
   13bf6:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   13bfa:	f011 0f02 	tst.w	r1, #2
   13bfe:	d125      	bne.n	13c4c <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   13c00:	220f      	movs	r2, #15
   13c02:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   13c04:	f011 0f20 	tst.w	r1, #32
   13c08:	d001      	beq.n	13c0e <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   13c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   13c0e:	4912      	ldr	r1, [pc, #72]	; (13c58 <le_set_event_mask+0x7c>)
   13c10:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   13c14:	f011 0f09 	tst.w	r1, #9
   13c18:	d001      	beq.n	13c1e <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   13c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   13c1e:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   13c20:	f3c2 2107 	ubfx	r1, r2, #8, #8
   13c24:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   13c26:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   13c28:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   13c2a:	0e12      	lsrs	r2, r2, #24
   13c2c:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   13c2e:	b29a      	uxth	r2, r3
	dst[0] = val;
   13c30:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   13c32:	0a12      	lsrs	r2, r2, #8
   13c34:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   13c36:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   13c38:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   13c3a:	0a13      	lsrs	r3, r2, #8
   13c3c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   13c3e:	2200      	movs	r2, #0
   13c40:	4621      	mov	r1, r4
   13c42:	f242 0001 	movw	r0, #8193	; 0x2001
   13c46:	f7ff fecd 	bl	139e4 <bt_hci_cmd_send_sync>
}
   13c4a:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   13c4c:	222f      	movs	r2, #47	; 0x2f
   13c4e:	2300      	movs	r3, #0
   13c50:	e7d8      	b.n	13c04 <le_set_event_mask+0x28>
		return -ENOBUFS;
   13c52:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13c56:	e7f8      	b.n	13c4a <le_set_event_mask+0x6e>
   13c58:	200002a8 	.word	0x200002a8

00013c5c <le_init>:
{
   13c5c:	b510      	push	{r4, lr}
   13c5e:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   13c60:	4b50      	ldr	r3, [pc, #320]	; (13da4 <le_init+0x148>)
   13c62:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   13c66:	f013 0f40 	tst.w	r3, #64	; 0x40
   13c6a:	d00a      	beq.n	13c82 <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   13c6c:	aa01      	add	r2, sp, #4
   13c6e:	2100      	movs	r1, #0
   13c70:	f242 0003 	movw	r0, #8195	; 0x2003
   13c74:	f7ff feb6 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13c78:	4603      	mov	r3, r0
   13c7a:	b1a8      	cbz	r0, 13ca8 <le_init+0x4c>
}
   13c7c:	4618      	mov	r0, r3
   13c7e:	b002      	add	sp, #8
   13c80:	bd10      	pop	{r4, pc}
   13c82:	4b49      	ldr	r3, [pc, #292]	; (13da8 <le_init+0x14c>)
   13c84:	4a49      	ldr	r2, [pc, #292]	; (13dac <le_init+0x150>)
   13c86:	1a9b      	subs	r3, r3, r2
   13c88:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   13c8a:	f04f 0100 	mov.w	r1, #0
   13c8e:	2201      	movs	r2, #1
   13c90:	f362 0102 	bfi	r1, r2, #0, #3
   13c94:	f36f 01c5 	bfc	r1, #3, #3
   13c98:	f363 118f 	bfi	r1, r3, #6, #10
   13c9c:	4844      	ldr	r0, [pc, #272]	; (13db0 <le_init+0x154>)
   13c9e:	f7fc ff7f 	bl	10ba0 <log_0>
		return -ENODEV;
   13ca2:	f06f 0312 	mvn.w	r3, #18
   13ca6:	e7e9      	b.n	13c7c <le_init+0x20>
	read_le_features_complete(rsp);
   13ca8:	9801      	ldr	r0, [sp, #4]
   13caa:	f7ff f911 	bl	12ed0 <read_le_features_complete>
	net_buf_unref(rsp);
   13cae:	9801      	ldr	r0, [sp, #4]
   13cb0:	f00c f9bc 	bl	2002c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   13cb4:	aa01      	add	r2, sp, #4
   13cb6:	2100      	movs	r1, #0
   13cb8:	f242 0002 	movw	r0, #8194	; 0x2002
   13cbc:	f7ff fe92 	bl	139e4 <bt_hci_cmd_send_sync>
		if (err) {
   13cc0:	4603      	mov	r3, r0
   13cc2:	2800      	cmp	r0, #0
   13cc4:	d1da      	bne.n	13c7c <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   13cc6:	9801      	ldr	r0, [sp, #4]
   13cc8:	f7ff f90c 	bl	12ee4 <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   13ccc:	9801      	ldr	r0, [sp, #4]
   13cce:	f00c f9ad 	bl	2002c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13cd2:	4b34      	ldr	r3, [pc, #208]	; (13da4 <le_init+0x148>)
   13cd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   13cd8:	f013 0f20 	tst.w	r3, #32
   13cdc:	d032      	beq.n	13d44 <le_init+0xe8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   13cde:	4b31      	ldr	r3, [pc, #196]	; (13da4 <le_init+0x148>)
   13ce0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   13ce4:	f013 0f08 	tst.w	r3, #8
   13ce8:	d144      	bne.n	13d74 <le_init+0x118>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   13cea:	4b2e      	ldr	r3, [pc, #184]	; (13da4 <le_init+0x148>)
   13cec:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   13cf0:	f013 0f20 	tst.w	r3, #32
   13cf4:	d022      	beq.n	13d3c <le_init+0xe0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   13cf6:	f10d 0102 	add.w	r1, sp, #2
   13cfa:	4668      	mov	r0, sp
   13cfc:	f7ff ff3e 	bl	13b7c <hci_le_read_max_data_len>
		if (err) {
   13d00:	4603      	mov	r3, r0
   13d02:	2800      	cmp	r0, #0
   13d04:	d1ba      	bne.n	13c7c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13d06:	2104      	movs	r1, #4
   13d08:	f242 0024 	movw	r0, #8228	; 0x2024
   13d0c:	f7ff fe2e 	bl	1396c <bt_hci_cmd_create>
		if (!buf) {
   13d10:	4604      	mov	r4, r0
   13d12:	2800      	cmp	r0, #0
   13d14:	d03f      	beq.n	13d96 <le_init+0x13a>
   13d16:	2104      	movs	r1, #4
   13d18:	3008      	adds	r0, #8
   13d1a:	f00c f9d1 	bl	200c0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   13d1e:	f8bd 3000 	ldrh.w	r3, [sp]
   13d22:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   13d24:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   13d28:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   13d2a:	2200      	movs	r2, #0
   13d2c:	4621      	mov	r1, r4
   13d2e:	f242 0024 	movw	r0, #8228	; 0x2024
   13d32:	f7ff fe57 	bl	139e4 <bt_hci_cmd_send_sync>
		if (err) {
   13d36:	4603      	mov	r3, r0
   13d38:	2800      	cmp	r0, #0
   13d3a:	d19f      	bne.n	13c7c <le_init+0x20>
	return  le_set_event_mask();
   13d3c:	f7ff ff4e 	bl	13bdc <le_set_event_mask>
   13d40:	4603      	mov	r3, r0
   13d42:	e79b      	b.n	13c7c <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   13d44:	2102      	movs	r1, #2
   13d46:	f640 406d 	movw	r0, #3181	; 0xc6d
   13d4a:	f7ff fe0f 	bl	1396c <bt_hci_cmd_create>
		if (!buf) {
   13d4e:	4604      	mov	r4, r0
   13d50:	b320      	cbz	r0, 13d9c <le_init+0x140>
   13d52:	2102      	movs	r1, #2
   13d54:	3008      	adds	r0, #8
   13d56:	f00c f9b3 	bl	200c0 <net_buf_simple_add>
		cp_le->le = 0x01;
   13d5a:	2301      	movs	r3, #1
   13d5c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   13d5e:	2200      	movs	r2, #0
   13d60:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   13d62:	4621      	mov	r1, r4
   13d64:	f640 406d 	movw	r0, #3181	; 0xc6d
   13d68:	f7ff fe3c 	bl	139e4 <bt_hci_cmd_send_sync>
		if (err) {
   13d6c:	4603      	mov	r3, r0
   13d6e:	2800      	cmp	r0, #0
   13d70:	d0b5      	beq.n	13cde <le_init+0x82>
   13d72:	e783      	b.n	13c7c <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   13d74:	aa01      	add	r2, sp, #4
   13d76:	2100      	movs	r1, #0
   13d78:	f242 001c 	movw	r0, #8220	; 0x201c
   13d7c:	f7ff fe32 	bl	139e4 <bt_hci_cmd_send_sync>
		if (err) {
   13d80:	4603      	mov	r3, r0
   13d82:	2800      	cmp	r0, #0
   13d84:	f47f af7a 	bne.w	13c7c <le_init+0x20>
		le_read_supp_states_complete(rsp);
   13d88:	9801      	ldr	r0, [sp, #4]
   13d8a:	f7ff f80f 	bl	12dac <le_read_supp_states_complete>
		net_buf_unref(rsp);
   13d8e:	9801      	ldr	r0, [sp, #4]
   13d90:	f00c f94c 	bl	2002c <net_buf_unref>
   13d94:	e7a9      	b.n	13cea <le_init+0x8e>
			return -ENOBUFS;
   13d96:	f06f 0368 	mvn.w	r3, #104	; 0x68
   13d9a:	e76f      	b.n	13c7c <le_init+0x20>
			return -ENOBUFS;
   13d9c:	f06f 0368 	mvn.w	r3, #104	; 0x68
   13da0:	e76c      	b.n	13c7c <le_init+0x20>
   13da2:	bf00      	nop
   13da4:	200002a8 	.word	0x200002a8
   13da8:	00021fac 	.word	0x00021fac
   13dac:	00021f84 	.word	0x00021f84
   13db0:	00023104 	.word	0x00023104

00013db4 <bt_br_init>:
{
   13db4:	b510      	push	{r4, lr}
   13db6:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   13db8:	4b0b      	ldr	r3, [pc, #44]	; (13de8 <bt_br_init+0x34>)
   13dba:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   13dbe:	b11b      	cbz	r3, 13dc8 <bt_br_init+0x14>
		return 0;
   13dc0:	2400      	movs	r4, #0
}
   13dc2:	4620      	mov	r0, r4
   13dc4:	b002      	add	sp, #8
   13dc6:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   13dc8:	aa01      	add	r2, sp, #4
   13dca:	2100      	movs	r1, #0
   13dcc:	f241 0005 	movw	r0, #4101	; 0x1005
   13dd0:	f7ff fe08 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13dd4:	4604      	mov	r4, r0
   13dd6:	2800      	cmp	r0, #0
   13dd8:	d1f3      	bne.n	13dc2 <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   13dda:	9801      	ldr	r0, [sp, #4]
   13ddc:	f7ff f896 	bl	12f0c <read_buffer_size_complete>
	net_buf_unref(rsp);
   13de0:	9801      	ldr	r0, [sp, #4]
   13de2:	f00c f923 	bl	2002c <net_buf_unref>
	return 0;
   13de6:	e7ec      	b.n	13dc2 <bt_br_init+0xe>
   13de8:	200002a8 	.word	0x200002a8

00013dec <hci_vs_init>:
{
   13dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13df0:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   13df2:	aa05      	add	r2, sp, #20
   13df4:	2100      	movs	r1, #0
   13df6:	f64f 4001 	movw	r0, #64513	; 0xfc01
   13dfa:	f7ff fdf3 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13dfe:	2800      	cmp	r0, #0
   13e00:	d178      	bne.n	13ef4 <hci_vs_init+0x108>
	rp.info = (void *)rsp->data;
   13e02:	9b05      	ldr	r3, [sp, #20]
   13e04:	689c      	ldr	r4, [r3, #8]
   13e06:	4d56      	ldr	r5, [pc, #344]	; (13f60 <hci_vs_init+0x174>)
   13e08:	4b56      	ldr	r3, [pc, #344]	; (13f64 <hci_vs_init+0x178>)
   13e0a:	1aed      	subs	r5, r5, r3
   13e0c:	08ed      	lsrs	r5, r5, #3
	BT_INFO("HW Platform: %s (0x%04x)",
   13e0e:	2703      	movs	r7, #3
   13e10:	f04f 0600 	mov.w	r6, #0
   13e14:	f367 0602 	bfi	r6, r7, #0, #3
   13e18:	f36f 06c5 	bfc	r6, #3, #3
   13e1c:	f365 168f 	bfi	r6, r5, #6, #10
   13e20:	f8b4 8001 	ldrh.w	r8, [r4, #1]
   13e24:	4640      	mov	r0, r8
   13e26:	f7fe fffd 	bl	12e24 <vs_hw_platform>
   13e2a:	4601      	mov	r1, r0
   13e2c:	4633      	mov	r3, r6
   13e2e:	4642      	mov	r2, r8
   13e30:	484d      	ldr	r0, [pc, #308]	; (13f68 <hci_vs_init+0x17c>)
   13e32:	f7fc fe35 	bl	10aa0 <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
   13e36:	f04f 0600 	mov.w	r6, #0
   13e3a:	f367 0602 	bfi	r6, r7, #0, #3
   13e3e:	f36f 06c5 	bfc	r6, #3, #3
   13e42:	f365 168f 	bfi	r6, r5, #6, #10
   13e46:	f8b4 8003 	ldrh.w	r8, [r4, #3]
   13e4a:	4641      	mov	r1, r8
   13e4c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   13e50:	f7fe fff4 	bl	12e3c <vs_hw_variant>
   13e54:	4601      	mov	r1, r0
   13e56:	4633      	mov	r3, r6
   13e58:	4642      	mov	r2, r8
   13e5a:	4844      	ldr	r0, [pc, #272]	; (13f6c <hci_vs_init+0x180>)
   13e5c:	f7fc fe20 	bl	10aa0 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   13e60:	f04f 0600 	mov.w	r6, #0
   13e64:	f367 0602 	bfi	r6, r7, #0, #3
   13e68:	f36f 06c5 	bfc	r6, #3, #3
   13e6c:	f365 168f 	bfi	r6, r5, #6, #10
   13e70:	7965      	ldrb	r5, [r4, #5]
   13e72:	4628      	mov	r0, r5
   13e74:	f7fe fff2 	bl	12e5c <vs_fw_variant>
   13e78:	9000      	str	r0, [sp, #0]
   13e7a:	9501      	str	r5, [sp, #4]
   13e7c:	79a3      	ldrb	r3, [r4, #6]
   13e7e:	9302      	str	r3, [sp, #8]
   13e80:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   13e84:	9303      	str	r3, [sp, #12]
   13e86:	f8d4 3009 	ldr.w	r3, [r4, #9]
   13e8a:	9304      	str	r3, [sp, #16]
   13e8c:	4633      	mov	r3, r6
   13e8e:	2205      	movs	r2, #5
   13e90:	4669      	mov	r1, sp
   13e92:	4837      	ldr	r0, [pc, #220]	; (13f70 <hci_vs_init+0x184>)
   13e94:	f7fc fe40 	bl	10b18 <log_n>
	net_buf_unref(rsp);
   13e98:	9805      	ldr	r0, [sp, #20]
   13e9a:	f00c f8c7 	bl	2002c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   13e9e:	aa05      	add	r2, sp, #20
   13ea0:	2100      	movs	r1, #0
   13ea2:	f64f 4002 	movw	r0, #64514	; 0xfc02
   13ea6:	f7ff fd9d 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   13eaa:	2800      	cmp	r0, #0
   13eac:	d135      	bne.n	13f1a <hci_vs_init+0x12e>
	rp.cmds = (void *)rsp->data;
   13eae:	9b05      	ldr	r3, [sp, #20]
   13eb0:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   13eb2:	4c30      	ldr	r4, [pc, #192]	; (13f74 <hci_vs_init+0x188>)
   13eb4:	2202      	movs	r2, #2
   13eb6:	3101      	adds	r1, #1
   13eb8:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   13ebc:	f009 ffb3 	bl	1de26 <memcpy>
	net_buf_unref(rsp);
   13ec0:	9805      	ldr	r0, [sp, #20]
   13ec2:	f00c f8b3 	bl	2002c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   13ec6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   13eca:	f013 0f04 	tst.w	r3, #4
   13ece:	d021      	beq.n	13f14 <hci_vs_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   13ed0:	aa05      	add	r2, sp, #20
   13ed2:	2100      	movs	r1, #0
   13ed4:	f64f 4003 	movw	r0, #64515	; 0xfc03
   13ed8:	f7ff fd84 	bl	139e4 <bt_hci_cmd_send_sync>
		if (err) {
   13edc:	bb70      	cbnz	r0, 13f3c <hci_vs_init+0x150>
		rp.feat = (void *)rsp->data;
   13ede:	9b05      	ldr	r3, [sp, #20]
   13ee0:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   13ee2:	2201      	movs	r2, #1
   13ee4:	4411      	add	r1, r2
   13ee6:	4824      	ldr	r0, [pc, #144]	; (13f78 <hci_vs_init+0x18c>)
   13ee8:	f009 ff9d 	bl	1de26 <memcpy>
		net_buf_unref(rsp);
   13eec:	9805      	ldr	r0, [sp, #20]
   13eee:	f00c f89d 	bl	2002c <net_buf_unref>
   13ef2:	e00f      	b.n	13f14 <hci_vs_init+0x128>
   13ef4:	4b1a      	ldr	r3, [pc, #104]	; (13f60 <hci_vs_init+0x174>)
   13ef6:	4a1b      	ldr	r2, [pc, #108]	; (13f64 <hci_vs_init+0x178>)
   13ef8:	1a9b      	subs	r3, r3, r2
   13efa:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   13efc:	f04f 0100 	mov.w	r1, #0
   13f00:	2202      	movs	r2, #2
   13f02:	f362 0102 	bfi	r1, r2, #0, #3
   13f06:	f36f 01c5 	bfc	r1, #3, #3
   13f0a:	f363 118f 	bfi	r1, r3, #6, #10
   13f0e:	481b      	ldr	r0, [pc, #108]	; (13f7c <hci_vs_init+0x190>)
   13f10:	f7fc fe46 	bl	10ba0 <log_0>
}
   13f14:	b006      	add	sp, #24
   13f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13f1a:	4b11      	ldr	r3, [pc, #68]	; (13f60 <hci_vs_init+0x174>)
   13f1c:	4a11      	ldr	r2, [pc, #68]	; (13f64 <hci_vs_init+0x178>)
   13f1e:	1a9b      	subs	r3, r3, r2
   13f20:	40fb      	lsrs	r3, r7
		BT_WARN("Failed to read supported vendor commands");
   13f22:	f04f 0100 	mov.w	r1, #0
   13f26:	2202      	movs	r2, #2
   13f28:	f362 0102 	bfi	r1, r2, #0, #3
   13f2c:	f36f 01c5 	bfc	r1, #3, #3
   13f30:	f363 118f 	bfi	r1, r3, #6, #10
   13f34:	4812      	ldr	r0, [pc, #72]	; (13f80 <hci_vs_init+0x194>)
   13f36:	f7fc fe33 	bl	10ba0 <log_0>
		return;
   13f3a:	e7eb      	b.n	13f14 <hci_vs_init+0x128>
   13f3c:	4b08      	ldr	r3, [pc, #32]	; (13f60 <hci_vs_init+0x174>)
   13f3e:	4a09      	ldr	r2, [pc, #36]	; (13f64 <hci_vs_init+0x178>)
   13f40:	1a9b      	subs	r3, r3, r2
   13f42:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   13f44:	f04f 0100 	mov.w	r1, #0
   13f48:	2202      	movs	r2, #2
   13f4a:	f362 0102 	bfi	r1, r2, #0, #3
   13f4e:	f36f 01c5 	bfc	r1, #3, #3
   13f52:	f363 118f 	bfi	r1, r3, #6, #10
   13f56:	480b      	ldr	r0, [pc, #44]	; (13f84 <hci_vs_init+0x198>)
   13f58:	f7fc fe22 	bl	10ba0 <log_0>
			return;
   13f5c:	e7da      	b.n	13f14 <hci_vs_init+0x128>
   13f5e:	bf00      	nop
   13f60:	00021fac 	.word	0x00021fac
   13f64:	00021f84 	.word	0x00021f84
   13f68:	0002314c 	.word	0x0002314c
   13f6c:	00023168 	.word	0x00023168
   13f70:	00023180 	.word	0x00023180
   13f74:	200002a8 	.word	0x200002a8
   13f78:	20000360 	.word	0x20000360
   13f7c:	00023128 	.word	0x00023128
   13f80:	000231b0 	.word	0x000231b0
   13f84:	000231dc 	.word	0x000231dc

00013f88 <hci_init>:
{
   13f88:	b508      	push	{r3, lr}
	err = common_init();
   13f8a:	f7ff fdad 	bl	13ae8 <common_init>
	if (err) {
   13f8e:	4603      	mov	r3, r0
   13f90:	b108      	cbz	r0, 13f96 <hci_init+0xe>
}
   13f92:	4618      	mov	r0, r3
   13f94:	bd08      	pop	{r3, pc}
	err = le_init();
   13f96:	f7ff fe61 	bl	13c5c <le_init>
	if (err) {
   13f9a:	4603      	mov	r3, r0
   13f9c:	2800      	cmp	r0, #0
   13f9e:	d1f8      	bne.n	13f92 <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   13fa0:	4b0a      	ldr	r3, [pc, #40]	; (13fcc <hci_init+0x44>)
   13fa2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   13fa6:	f013 0f20 	tst.w	r3, #32
   13faa:	d104      	bne.n	13fb6 <hci_init+0x2e>
		err = bt_br_init();
   13fac:	f7ff ff02 	bl	13db4 <bt_br_init>
		if (err) {
   13fb0:	4603      	mov	r3, r0
   13fb2:	2800      	cmp	r0, #0
   13fb4:	d1ed      	bne.n	13f92 <hci_init+0xa>
	err = set_event_mask();
   13fb6:	f00a f817 	bl	1dfe8 <set_event_mask>
	if (err) {
   13fba:	4603      	mov	r3, r0
   13fbc:	2800      	cmp	r0, #0
   13fbe:	d1e8      	bne.n	13f92 <hci_init+0xa>
	hci_vs_init();
   13fc0:	f7ff ff14 	bl	13dec <hci_vs_init>
	err = bt_id_init();
   13fc4:	f000 fffa 	bl	14fbc <bt_id_init>
   13fc8:	4603      	mov	r3, r0
	if (err) {
   13fca:	e7e2      	b.n	13f92 <hci_init+0xa>
   13fcc:	200002a8 	.word	0x200002a8

00013fd0 <bt_send>:
{
   13fd0:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   13fd2:	4b03      	ldr	r3, [pc, #12]	; (13fe0 <bt_send+0x10>)
   13fd4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   13fd8:	691b      	ldr	r3, [r3, #16]
   13fda:	4798      	blx	r3
}
   13fdc:	bd08      	pop	{r3, pc}
   13fde:	bf00      	nop
   13fe0:	200002a8 	.word	0x200002a8

00013fe4 <bt_hci_cmd_send>:
{
   13fe4:	b538      	push	{r3, r4, r5, lr}
   13fe6:	4604      	mov	r4, r0
	if (!buf) {
   13fe8:	460d      	mov	r5, r1
   13fea:	b151      	cbz	r1, 14002 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   13fec:	f640 4335 	movw	r3, #3125	; 0xc35
   13ff0:	429c      	cmp	r4, r3
   13ff2:	d00e      	beq.n	14012 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13ff4:	4629      	mov	r1, r5
   13ff6:	4814      	ldr	r0, [pc, #80]	; (14048 <bt_hci_cmd_send+0x64>)
   13ff8:	f00c f80b 	bl	20012 <net_buf_put>
	return 0;
   13ffc:	2400      	movs	r4, #0
}
   13ffe:	4620      	mov	r0, r4
   14000:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   14002:	f7ff fcb3 	bl	1396c <bt_hci_cmd_create>
		if (!buf) {
   14006:	4605      	mov	r5, r0
   14008:	2800      	cmp	r0, #0
   1400a:	d1ef      	bne.n	13fec <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   1400c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14010:	e7f5      	b.n	13ffe <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   14012:	4628      	mov	r0, r5
   14014:	f7ff ffdc 	bl	13fd0 <bt_send>
		if (err) {
   14018:	4604      	mov	r4, r0
   1401a:	2800      	cmp	r0, #0
   1401c:	d0ef      	beq.n	13ffe <bt_hci_cmd_send+0x1a>
   1401e:	4b0b      	ldr	r3, [pc, #44]	; (1404c <bt_hci_cmd_send+0x68>)
   14020:	4a0b      	ldr	r2, [pc, #44]	; (14050 <bt_hci_cmd_send+0x6c>)
   14022:	1a9b      	subs	r3, r3, r2
   14024:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   14026:	f04f 0200 	mov.w	r2, #0
   1402a:	2101      	movs	r1, #1
   1402c:	f361 0202 	bfi	r2, r1, #0, #3
   14030:	f36f 02c5 	bfc	r2, #3, #3
   14034:	f363 128f 	bfi	r2, r3, #6, #10
   14038:	4601      	mov	r1, r0
   1403a:	4806      	ldr	r0, [pc, #24]	; (14054 <bt_hci_cmd_send+0x70>)
   1403c:	f7fc fcfa 	bl	10a34 <log_1>
			net_buf_unref(buf);
   14040:	4628      	mov	r0, r5
   14042:	f00b fff3 	bl	2002c <net_buf_unref>
		return err;
   14046:	e7da      	b.n	13ffe <bt_hci_cmd_send+0x1a>
   14048:	200003f4 	.word	0x200003f4
   1404c:	00021fac 	.word	0x00021fac
   14050:	00021f84 	.word	0x00021f84
   14054:	00023208 	.word	0x00023208

00014058 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   14058:	7a83      	ldrb	r3, [r0, #10]
   1405a:	2b07      	cmp	r3, #7
   1405c:	d000      	beq.n	14060 <conn_auto_initiate+0x8>
   1405e:	4770      	bx	lr
{
   14060:	b530      	push	{r4, r5, lr}
   14062:	b085      	sub	sp, #20
   14064:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14066:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14068:	f3bf 8f5b 	dmb	ish
   1406c:	6843      	ldr	r3, [r0, #4]
   1406e:	f3bf 8f5b 	dmb	ish
   14072:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   14076:	d10b      	bne.n	14090 <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14078:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   1407a:	b12b      	cbz	r3, 14088 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   1407c:	4b37      	ldr	r3, [pc, #220]	; (1415c <conn_auto_initiate+0x104>)
   1407e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14082:	f013 0f08 	tst.w	r3, #8
   14086:	d003      	beq.n	14090 <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   14088:	4620      	mov	r0, r4
   1408a:	f00a f853 	bl	1e134 <hci_le_read_remote_features>
		if (!err) {
   1408e:	b1d0      	cbz	r0, 140c6 <conn_auto_initiate+0x6e>
   14090:	f3bf 8f5b 	dmb	ish
   14094:	6863      	ldr	r3, [r4, #4]
   14096:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1409a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1409e:	d105      	bne.n	140ac <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   140a0:	4b2e      	ldr	r3, [pc, #184]	; (1415c <conn_auto_initiate+0x104>)
   140a2:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   140a6:	f013 0f01 	tst.w	r3, #1
   140aa:	d10e      	bne.n	140ca <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   140ac:	4b2b      	ldr	r3, [pc, #172]	; (1415c <conn_auto_initiate+0x104>)
   140ae:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   140b2:	f013 0f20 	tst.w	r3, #32
   140b6:	d006      	beq.n	140c6 <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   140b8:	4b28      	ldr	r3, [pc, #160]	; (1415c <conn_auto_initiate+0x104>)
   140ba:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   140be:	689b      	ldr	r3, [r3, #8]
   140c0:	f013 0f02 	tst.w	r3, #2
   140c4:	d128      	bne.n	14118 <conn_auto_initiate+0xc0>
}
   140c6:	b005      	add	sp, #20
   140c8:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   140ca:	2100      	movs	r1, #0
   140cc:	9100      	str	r1, [sp, #0]
   140ce:	2302      	movs	r3, #2
   140d0:	461a      	mov	r2, r3
   140d2:	4620      	mov	r0, r4
   140d4:	f00a f80a 	bl	1e0ec <bt_le_set_phy>
		if (!err) {
   140d8:	4601      	mov	r1, r0
   140da:	b180      	cbz	r0, 140fe <conn_auto_initiate+0xa6>
   140dc:	4b20      	ldr	r3, [pc, #128]	; (14160 <conn_auto_initiate+0x108>)
   140de:	4a21      	ldr	r2, [pc, #132]	; (14164 <conn_auto_initiate+0x10c>)
   140e0:	1a9b      	subs	r3, r3, r2
   140e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   140e4:	f04f 0200 	mov.w	r2, #0
   140e8:	2001      	movs	r0, #1
   140ea:	f360 0202 	bfi	r2, r0, #0, #3
   140ee:	f36f 02c5 	bfc	r2, #3, #3
   140f2:	f363 128f 	bfi	r2, r3, #6, #10
   140f6:	481c      	ldr	r0, [pc, #112]	; (14168 <conn_auto_initiate+0x110>)
   140f8:	f7fc fc9c 	bl	10a34 <log_1>
   140fc:	e7d6      	b.n	140ac <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   140fe:	f3bf 8f5b 	dmb	ish
   14102:	e855 3f00 	ldrex	r3, [r5]
   14106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1410a:	e845 3200 	strex	r2, r3, [r5]
   1410e:	2a00      	cmp	r2, #0
   14110:	d1f7      	bne.n	14102 <conn_auto_initiate+0xaa>
   14112:	f3bf 8f5b 	dmb	ish
			return;
   14116:	e7d6      	b.n	140c6 <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14118:	f10d 010e 	add.w	r1, sp, #14
   1411c:	a803      	add	r0, sp, #12
   1411e:	f7ff fd2d 	bl	13b7c <hci_le_read_max_data_len>
			if (!err) {
   14122:	2800      	cmp	r0, #0
   14124:	d1cf      	bne.n	140c6 <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   14126:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1412a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1412e:	4620      	mov	r0, r4
   14130:	f009 ffc0 	bl	1e0b4 <bt_le_set_data_len>
				if (err) {
   14134:	4601      	mov	r1, r0
   14136:	2800      	cmp	r0, #0
   14138:	d0c5      	beq.n	140c6 <conn_auto_initiate+0x6e>
   1413a:	4b09      	ldr	r3, [pc, #36]	; (14160 <conn_auto_initiate+0x108>)
   1413c:	4a09      	ldr	r2, [pc, #36]	; (14164 <conn_auto_initiate+0x10c>)
   1413e:	1a9b      	subs	r3, r3, r2
   14140:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   14142:	f04f 0200 	mov.w	r2, #0
   14146:	2001      	movs	r0, #1
   14148:	f360 0202 	bfi	r2, r0, #0, #3
   1414c:	f36f 02c5 	bfc	r2, #3, #3
   14150:	f363 128f 	bfi	r2, r3, #6, #10
   14154:	4805      	ldr	r0, [pc, #20]	; (1416c <conn_auto_initiate+0x114>)
   14156:	f7fc fc6d 	bl	10a34 <log_1>
		}
   1415a:	e7b4      	b.n	140c6 <conn_auto_initiate+0x6e>
   1415c:	200002a8 	.word	0x200002a8
   14160:	00021fac 	.word	0x00021fac
   14164:	00021f84 	.word	0x00021f84
   14168:	0002322c 	.word	0x0002322c
   1416c:	00023248 	.word	0x00023248

00014170 <bt_hci_le_enh_conn_complete>:
{
   14170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14174:	b084      	sub	sp, #16
   14176:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14178:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   1417c:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   14180:	4640      	mov	r0, r8
   14182:	f7fe fde7 	bl	12d54 <conn_handle_is_disconnected>
   14186:	4606      	mov	r6, r0
	if (evt->status) {
   14188:	7820      	ldrb	r0, [r4, #0]
   1418a:	b1b0      	cbz	r0, 141ba <bt_hci_le_enh_conn_complete+0x4a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1418c:	283c      	cmp	r0, #60	; 0x3c
   1418e:	d011      	beq.n	141b4 <bt_hci_le_enh_conn_complete+0x44>
   14190:	4b63      	ldr	r3, [pc, #396]	; (14320 <bt_hci_le_enh_conn_complete+0x1b0>)
   14192:	4a64      	ldr	r2, [pc, #400]	; (14324 <bt_hci_le_enh_conn_complete+0x1b4>)
   14194:	1a9b      	subs	r3, r3, r2
   14196:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   14198:	f04f 0200 	mov.w	r2, #0
   1419c:	2102      	movs	r1, #2
   1419e:	f361 0202 	bfi	r2, r1, #0, #3
   141a2:	f36f 02c5 	bfc	r2, #3, #3
   141a6:	f363 128f 	bfi	r2, r3, #6, #10
   141aa:	4601      	mov	r1, r0
   141ac:	485e      	ldr	r0, [pc, #376]	; (14328 <bt_hci_le_enh_conn_complete+0x1b8>)
   141ae:	f7fc fc41 	bl	10a34 <log_1>
		return;
   141b2:	e04a      	b.n	1424a <bt_hci_le_enh_conn_complete+0xda>
			le_conn_complete_adv_timeout();
   141b4:	f7fe ff00 	bl	12fb8 <le_conn_complete_adv_timeout>
			return;
   141b8:	e047      	b.n	1424a <bt_hci_le_enh_conn_complete+0xda>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   141ba:	7923      	ldrb	r3, [r4, #4]
   141bc:	3b02      	subs	r3, #2
   141be:	b2db      	uxtb	r3, r3
   141c0:	2b01      	cmp	r3, #1
   141c2:	d945      	bls.n	14250 <bt_hci_le_enh_conn_complete+0xe0>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   141c4:	78e3      	ldrb	r3, [r4, #3]
   141c6:	2b01      	cmp	r3, #1
   141c8:	d057      	beq.n	1427a <bt_hci_le_enh_conn_complete+0x10a>
				bt_lookup_id_addr(id, &evt->peer_addr));
   141ca:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   141cc:	4629      	mov	r1, r5
   141ce:	f00a f842 	bl	1e256 <bt_lookup_id_addr>
   141d2:	4601      	mov	r1, r0
	memcpy(dst, src, sizeof(*dst));
   141d4:	2207      	movs	r2, #7
   141d6:	4668      	mov	r0, sp
   141d8:	f009 fe25 	bl	1de26 <memcpy>
   141dc:	2207      	movs	r2, #7
   141de:	4629      	mov	r1, r5
   141e0:	a802      	add	r0, sp, #8
   141e2:	f009 fe20 	bl	1de26 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   141e6:	4669      	mov	r1, sp
   141e8:	78e0      	ldrb	r0, [r4, #3]
   141ea:	f7fe febf 	bl	12f6c <find_pending_connect>
   141ee:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_PERIPHERAL &&
   141f0:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   141f2:	2b01      	cmp	r3, #1
   141f4:	d045      	beq.n	14282 <bt_hci_le_enh_conn_complete+0x112>
	if (!conn) {
   141f6:	2d00      	cmp	r5, #0
   141f8:	d056      	beq.n	142a8 <bt_hci_le_enh_conn_complete+0x138>
	conn->handle = handle;
   141fa:	4628      	mov	r0, r5
   141fc:	f820 7b88 	strh.w	r7, [r0], #136
   14200:	2207      	movs	r2, #7
   14202:	4669      	mov	r1, sp
   14204:	f009 fe0f 	bl	1de26 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14208:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1420c:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   14210:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   14214:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14218:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   1421c:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   14220:	78e3      	ldrb	r3, [r4, #3]
   14222:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   14224:	2200      	movs	r2, #0
   14226:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14228:	2b01      	cmp	r3, #1
   1422a:	d057      	beq.n	142dc <bt_hci_le_enh_conn_complete+0x16c>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1422c:	2107      	movs	r1, #7
   1422e:	4628      	mov	r0, r5
   14230:	f001 fd5e 	bl	15cf0 <bt_conn_set_state>
	if (is_disconnected) {
   14234:	2e00      	cmp	r6, #0
   14236:	d16d      	bne.n	14314 <bt_hci_le_enh_conn_complete+0x1a4>
	bt_conn_connected(conn);
   14238:	4628      	mov	r0, r5
   1423a:	f00a fb2e 	bl	1e89a <bt_conn_connected>
	conn_auto_initiate(conn);
   1423e:	4628      	mov	r0, r5
   14240:	f7ff ff0a 	bl	14058 <conn_auto_initiate>
	bt_conn_unref(conn);
   14244:	4628      	mov	r0, r5
   14246:	f00a fadf 	bl	1e808 <bt_conn_unref>
}
   1424a:	b004      	add	sp, #16
   1424c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14250:	2207      	movs	r2, #7
   14252:	1d21      	adds	r1, r4, #4
   14254:	4668      	mov	r0, sp
   14256:	f009 fde6 	bl	1de26 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1425a:	f89d 3000 	ldrb.w	r3, [sp]
   1425e:	3b02      	subs	r3, #2
   14260:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   14264:	2206      	movs	r2, #6
   14266:	f104 0111 	add.w	r1, r4, #17
   1426a:	f10d 0009 	add.w	r0, sp, #9
   1426e:	f009 fdda 	bl	1de26 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14272:	2301      	movs	r3, #1
   14274:	f88d 3008 	strb.w	r3, [sp, #8]
   14278:	e7b5      	b.n	141e6 <bt_hci_le_enh_conn_complete+0x76>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1427a:	4b2c      	ldr	r3, [pc, #176]	; (1432c <bt_hci_le_enh_conn_complete+0x1bc>)
   1427c:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   14280:	e7a3      	b.n	141ca <bt_hci_le_enh_conn_complete+0x5a>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14282:	f001 f827 	bl	152d4 <bt_le_adv_lookup_legacy>
		atomic_clear_bit(adv->flags, BT_ADV_ENABLED);
   14286:	f100 0310 	add.w	r3, r0, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1428a:	f3bf 8f5b 	dmb	ish
   1428e:	e853 2f00 	ldrex	r2, [r3]
   14292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   14296:	e843 2100 	strex	r1, r2, [r3]
   1429a:	2900      	cmp	r1, #0
   1429c:	d1f7      	bne.n	1428e <bt_hci_le_enh_conn_complete+0x11e>
   1429e:	f3bf 8f5b 	dmb	ish
		(void)bt_le_lim_adv_cancel_timeout(adv);
   142a2:	f00a f93e 	bl	1e522 <bt_le_lim_adv_cancel_timeout>
   142a6:	e7a6      	b.n	141f6 <bt_hci_le_enh_conn_complete+0x86>
   142a8:	4b1d      	ldr	r3, [pc, #116]	; (14320 <bt_hci_le_enh_conn_complete+0x1b0>)
   142aa:	4a1e      	ldr	r2, [pc, #120]	; (14324 <bt_hci_le_enh_conn_complete+0x1b4>)
   142ac:	1a9b      	subs	r3, r3, r2
   142ae:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   142b0:	2201      	movs	r2, #1
   142b2:	f362 0502 	bfi	r5, r2, #0, #3
   142b6:	f36f 05c5 	bfc	r5, #3, #3
   142ba:	f363 158f 	bfi	r5, r3, #6, #10
   142be:	1d20      	adds	r0, r4, #4
   142c0:	f7fe fc60 	bl	12b84 <bt_addr_le_str_real>
   142c4:	f7fc fa3c 	bl	10740 <z_log_strdup>
   142c8:	4601      	mov	r1, r0
   142ca:	462a      	mov	r2, r5
   142cc:	4818      	ldr	r0, [pc, #96]	; (14330 <bt_hci_le_enh_conn_complete+0x1c0>)
   142ce:	f7fc fbb1 	bl	10a34 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   142d2:	211f      	movs	r1, #31
   142d4:	4640      	mov	r0, r8
   142d6:	f009 fea9 	bl	1e02c <bt_hci_disconnect>
		return;
   142da:	e7b6      	b.n	1424a <bt_hci_le_enh_conn_complete+0xda>
	memcpy(dst, src, sizeof(*dst));
   142dc:	2207      	movs	r2, #7
   142de:	a902      	add	r1, sp, #8
   142e0:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   142e4:	f009 fd9f 	bl	1de26 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   142e8:	f000 fff4 	bl	152d4 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   142ec:	7a29      	ldrb	r1, [r5, #8]
   142ee:	4c0f      	ldr	r4, [pc, #60]	; (1432c <bt_hci_le_enh_conn_complete+0x1bc>)
   142f0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   142f4:	2207      	movs	r2, #7
   142f6:	4421      	add	r1, r4
   142f8:	f105 0096 	add.w	r0, r5, #150	; 0x96
   142fc:	f009 fd93 	bl	1de26 <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   14300:	f8d4 10dc 	ldr.w	r1, [r4, #220]	; 0xdc
   14304:	2200      	movs	r2, #0
   14306:	f001 0340 	and.w	r3, r1, #64	; 0x40
   1430a:	4313      	orrs	r3, r2
   1430c:	d08e      	beq.n	1422c <bt_hci_le_enh_conn_complete+0xbc>
			bt_le_adv_resume();
   1430e:	f00a f90d 	bl	1e52c <bt_le_adv_resume>
   14312:	e78b      	b.n	1422c <bt_hci_le_enh_conn_complete+0xbc>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14314:	2101      	movs	r1, #1
   14316:	4628      	mov	r0, r5
   14318:	f001 fcea 	bl	15cf0 <bt_conn_set_state>
   1431c:	e78c      	b.n	14238 <bt_hci_le_enh_conn_complete+0xc8>
   1431e:	bf00      	nop
   14320:	00021fac 	.word	0x00021fac
   14324:	00021f84 	.word	0x00021f84
   14328:	00023264 	.word	0x00023264
   1432c:	200002a8 	.word	0x200002a8
   14330:	00023280 	.word	0x00023280

00014334 <le_phy_update_complete>:
{
   14334:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   14336:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14338:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   1433c:	4628      	mov	r0, r5
   1433e:	f001 fccd 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   14342:	b1a0      	cbz	r0, 1436e <le_phy_update_complete+0x3a>
   14344:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   14346:	1d03      	adds	r3, r0, #4
   14348:	f3bf 8f5b 	dmb	ish
   1434c:	e853 2f00 	ldrex	r2, [r3]
   14350:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   14354:	e843 1000 	strex	r0, r1, [r3]
   14358:	2800      	cmp	r0, #0
   1435a:	d1f7      	bne.n	1434c <le_phy_update_complete+0x18>
   1435c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14360:	f012 0f80 	tst.w	r2, #128	; 0x80
   14364:	d115      	bne.n	14392 <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   14366:	4620      	mov	r0, r4
   14368:	f00a fa4e 	bl	1e808 <bt_conn_unref>
}
   1436c:	bd38      	pop	{r3, r4, r5, pc}
   1436e:	4b11      	ldr	r3, [pc, #68]	; (143b4 <le_phy_update_complete+0x80>)
   14370:	4a11      	ldr	r2, [pc, #68]	; (143b8 <le_phy_update_complete+0x84>)
   14372:	1a9b      	subs	r3, r3, r2
   14374:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14376:	f04f 0200 	mov.w	r2, #0
   1437a:	2101      	movs	r1, #1
   1437c:	f361 0202 	bfi	r2, r1, #0, #3
   14380:	f36f 02c5 	bfc	r2, #3, #3
   14384:	f363 128f 	bfi	r2, r3, #6, #10
   14388:	4629      	mov	r1, r5
   1438a:	480c      	ldr	r0, [pc, #48]	; (143bc <le_phy_update_complete+0x88>)
   1438c:	f7fc fb52 	bl	10a34 <log_1>
		return;
   14390:	e7ec      	b.n	1436c <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14392:	f3bf 8f5b 	dmb	ish
   14396:	e853 2f00 	ldrex	r2, [r3]
   1439a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1439e:	e843 2100 	strex	r1, r2, [r3]
   143a2:	2900      	cmp	r1, #0
   143a4:	d1f7      	bne.n	14396 <le_phy_update_complete+0x62>
   143a6:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   143aa:	4620      	mov	r0, r4
   143ac:	f7ff fe54 	bl	14058 <conn_auto_initiate>
   143b0:	e7d9      	b.n	14366 <le_phy_update_complete+0x32>
   143b2:	bf00      	nop
   143b4:	00021fac 	.word	0x00021fac
   143b8:	00021f84 	.word	0x00021f84
   143bc:	00022dbc 	.word	0x00022dbc

000143c0 <le_remote_feat_complete>:
{
   143c0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   143c2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   143c4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   143c8:	4630      	mov	r0, r6
   143ca:	f001 fc87 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   143ce:	b1b0      	cbz	r0, 143fe <le_remote_feat_complete+0x3e>
   143d0:	4604      	mov	r4, r0
	if (!evt->status) {
   143d2:	782b      	ldrb	r3, [r5, #0]
   143d4:	b32b      	cbz	r3, 14422 <le_remote_feat_complete+0x62>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   143d6:	1d23      	adds	r3, r4, #4
   143d8:	f3bf 8f5b 	dmb	ish
   143dc:	e853 2f00 	ldrex	r2, [r3]
   143e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   143e4:	e843 2100 	strex	r1, r2, [r3]
   143e8:	2900      	cmp	r1, #0
   143ea:	d1f7      	bne.n	143dc <le_remote_feat_complete+0x1c>
   143ec:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   143f0:	4620      	mov	r0, r4
   143f2:	f7ff fe31 	bl	14058 <conn_auto_initiate>
	bt_conn_unref(conn);
   143f6:	4620      	mov	r0, r4
   143f8:	f00a fa06 	bl	1e808 <bt_conn_unref>
}
   143fc:	bd70      	pop	{r4, r5, r6, pc}
   143fe:	4b0c      	ldr	r3, [pc, #48]	; (14430 <le_remote_feat_complete+0x70>)
   14400:	4a0c      	ldr	r2, [pc, #48]	; (14434 <le_remote_feat_complete+0x74>)
   14402:	1a9b      	subs	r3, r3, r2
   14404:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14406:	f04f 0200 	mov.w	r2, #0
   1440a:	2101      	movs	r1, #1
   1440c:	f361 0202 	bfi	r2, r1, #0, #3
   14410:	f36f 02c5 	bfc	r2, #3, #3
   14414:	f363 128f 	bfi	r2, r3, #6, #10
   14418:	4631      	mov	r1, r6
   1441a:	4807      	ldr	r0, [pc, #28]	; (14438 <le_remote_feat_complete+0x78>)
   1441c:	f7fc fb0a 	bl	10a34 <log_1>
		return;
   14420:	e7ec      	b.n	143fc <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   14422:	2208      	movs	r2, #8
   14424:	1ce9      	adds	r1, r5, #3
   14426:	30ac      	adds	r0, #172	; 0xac
   14428:	f009 fcfd 	bl	1de26 <memcpy>
   1442c:	e7d3      	b.n	143d6 <le_remote_feat_complete+0x16>
   1442e:	bf00      	nop
   14430:	00021fac 	.word	0x00021fac
   14434:	00021f84 	.word	0x00021f84
   14438:	00022dbc 	.word	0x00022dbc

0001443c <le_conn_param_neg_reply>:
{
   1443c:	b570      	push	{r4, r5, r6, lr}
   1443e:	4605      	mov	r5, r0
   14440:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14442:	2103      	movs	r1, #3
   14444:	f242 0021 	movw	r0, #8225	; 0x2021
   14448:	f7ff fa90 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1444c:	b160      	cbz	r0, 14468 <le_conn_param_neg_reply+0x2c>
   1444e:	4606      	mov	r6, r0
   14450:	2103      	movs	r1, #3
   14452:	3008      	adds	r0, #8
   14454:	f00b fe34 	bl	200c0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   14458:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   1445a:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1445c:	4631      	mov	r1, r6
   1445e:	f242 0021 	movw	r0, #8225	; 0x2021
   14462:	f7ff fdbf 	bl	13fe4 <bt_hci_cmd_send>
}
   14466:	bd70      	pop	{r4, r5, r6, pc}
   14468:	4b08      	ldr	r3, [pc, #32]	; (1448c <le_conn_param_neg_reply+0x50>)
   1446a:	4a09      	ldr	r2, [pc, #36]	; (14490 <le_conn_param_neg_reply+0x54>)
   1446c:	1a9b      	subs	r3, r3, r2
   1446e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   14470:	f04f 0100 	mov.w	r1, #0
   14474:	2201      	movs	r2, #1
   14476:	f362 0102 	bfi	r1, r2, #0, #3
   1447a:	f36f 01c5 	bfc	r1, #3, #3
   1447e:	f363 118f 	bfi	r1, r3, #6, #10
   14482:	4804      	ldr	r0, [pc, #16]	; (14494 <le_conn_param_neg_reply+0x58>)
   14484:	f7fc fb8c 	bl	10ba0 <log_0>
		return;
   14488:	e7ed      	b.n	14466 <le_conn_param_neg_reply+0x2a>
   1448a:	bf00      	nop
   1448c:	00021fac 	.word	0x00021fac
   14490:	00021f84 	.word	0x00021f84
   14494:	0002329c 	.word	0x0002329c

00014498 <le_conn_param_req>:
{
   14498:	b530      	push	{r4, r5, lr}
   1449a:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1449c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1449e:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   144a0:	885a      	ldrh	r2, [r3, #2]
   144a2:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   144a6:	889a      	ldrh	r2, [r3, #4]
   144a8:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   144ac:	88da      	ldrh	r2, [r3, #6]
   144ae:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   144b2:	891b      	ldrh	r3, [r3, #8]
   144b4:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   144b8:	4620      	mov	r0, r4
   144ba:	f001 fc0f 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   144be:	b168      	cbz	r0, 144dc <le_conn_param_req+0x44>
   144c0:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   144c2:	4669      	mov	r1, sp
   144c4:	f001 fd96 	bl	15ff4 <le_param_req>
   144c8:	b9f0      	cbnz	r0, 14508 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   144ca:	211e      	movs	r1, #30
   144cc:	4620      	mov	r0, r4
   144ce:	f7ff ffb5 	bl	1443c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   144d2:	4628      	mov	r0, r5
   144d4:	f00a f998 	bl	1e808 <bt_conn_unref>
}
   144d8:	b003      	add	sp, #12
   144da:	bd30      	pop	{r4, r5, pc}
   144dc:	4b0d      	ldr	r3, [pc, #52]	; (14514 <le_conn_param_req+0x7c>)
   144de:	4a0e      	ldr	r2, [pc, #56]	; (14518 <le_conn_param_req+0x80>)
   144e0:	1a9b      	subs	r3, r3, r2
   144e2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   144e4:	f04f 0200 	mov.w	r2, #0
   144e8:	2101      	movs	r1, #1
   144ea:	f361 0202 	bfi	r2, r1, #0, #3
   144ee:	f36f 02c5 	bfc	r2, #3, #3
   144f2:	f363 128f 	bfi	r2, r3, #6, #10
   144f6:	4621      	mov	r1, r4
   144f8:	4808      	ldr	r0, [pc, #32]	; (1451c <le_conn_param_req+0x84>)
   144fa:	f7fc fa9b 	bl	10a34 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   144fe:	2102      	movs	r1, #2
   14500:	4620      	mov	r0, r4
   14502:	f7ff ff9b 	bl	1443c <le_conn_param_neg_reply>
		return;
   14506:	e7e7      	b.n	144d8 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   14508:	4669      	mov	r1, sp
   1450a:	4620      	mov	r0, r4
   1450c:	f009 fe6d 	bl	1e1ea <le_conn_param_req_reply>
   14510:	e7df      	b.n	144d2 <le_conn_param_req+0x3a>
   14512:	bf00      	nop
   14514:	00021fac 	.word	0x00021fac
   14518:	00021f84 	.word	0x00021f84
   1451c:	00022dbc 	.word	0x00022dbc

00014520 <send_cmd>:
{
   14520:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   14522:	2200      	movs	r2, #0
   14524:	2300      	movs	r3, #0
   14526:	4837      	ldr	r0, [pc, #220]	; (14604 <send_cmd+0xe4>)
   14528:	f00b fd54 	bl	1ffd4 <net_buf_get>
	BT_ASSERT(buf);
   1452c:	4604      	mov	r4, r0
   1452e:	b370      	cbz	r0, 1458e <send_cmd+0x6e>
   14530:	4d35      	ldr	r5, [pc, #212]	; (14608 <send_cmd+0xe8>)
   14532:	f04f 32ff 	mov.w	r2, #4294967295
   14536:	f04f 33ff 	mov.w	r3, #4294967295
   1453a:	f505 708c 	add.w	r0, r5, #280	; 0x118
   1453e:	f006 fdb5 	bl	1b0ac <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   14542:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   14546:	b1b3      	cbz	r3, 14576 <send_cmd+0x56>
   14548:	4b30      	ldr	r3, [pc, #192]	; (1460c <send_cmd+0xec>)
   1454a:	4a31      	ldr	r2, [pc, #196]	; (14610 <send_cmd+0xf0>)
   1454c:	1a9b      	subs	r3, r3, r2
   1454e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   14550:	f04f 0100 	mov.w	r1, #0
   14554:	2201      	movs	r2, #1
   14556:	f362 0102 	bfi	r1, r2, #0, #3
   1455a:	f36f 01c5 	bfc	r1, #3, #3
   1455e:	f363 118f 	bfi	r1, r3, #6, #10
   14562:	482c      	ldr	r0, [pc, #176]	; (14614 <send_cmd+0xf4>)
   14564:	f7fc fb1c 	bl	10ba0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   14568:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   1456c:	f00b fd5e 	bl	2002c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14570:	2300      	movs	r3, #0
   14572:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   14576:	4620      	mov	r0, r4
   14578:	f00b fd7e 	bl	20078 <net_buf_ref>
   1457c:	4b22      	ldr	r3, [pc, #136]	; (14608 <send_cmd+0xe8>)
   1457e:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   14582:	4620      	mov	r0, r4
   14584:	f7ff fd24 	bl	13fd0 <bt_send>
	if (err) {
   14588:	4601      	mov	r1, r0
   1458a:	b970      	cbnz	r0, 145aa <send_cmd+0x8a>
}
   1458c:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   1458e:	f44f 6312 	mov.w	r3, #2336	; 0x920
   14592:	4a21      	ldr	r2, [pc, #132]	; (14618 <send_cmd+0xf8>)
   14594:	4921      	ldr	r1, [pc, #132]	; (1461c <send_cmd+0xfc>)
   14596:	4822      	ldr	r0, [pc, #136]	; (14620 <send_cmd+0x100>)
   14598:	f008 f908 	bl	1c7ac <printk>
   1459c:	4040      	eors	r0, r0
   1459e:	f380 8811 	msr	BASEPRI, r0
   145a2:	f04f 0003 	mov.w	r0, #3
   145a6:	df02      	svc	2
   145a8:	e7c2      	b.n	14530 <send_cmd+0x10>
   145aa:	4b18      	ldr	r3, [pc, #96]	; (1460c <send_cmd+0xec>)
   145ac:	4a18      	ldr	r2, [pc, #96]	; (14610 <send_cmd+0xf0>)
   145ae:	1a9b      	subs	r3, r3, r2
   145b0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   145b2:	f04f 0200 	mov.w	r2, #0
   145b6:	2001      	movs	r0, #1
   145b8:	f360 0202 	bfi	r2, r0, #0, #3
   145bc:	f36f 02c5 	bfc	r2, #3, #3
   145c0:	f363 128f 	bfi	r2, r3, #6, #10
   145c4:	4817      	ldr	r0, [pc, #92]	; (14624 <send_cmd+0x104>)
   145c6:	f7fc fa35 	bl	10a34 <log_1>
	z_impl_k_sem_give(sem);
   145ca:	4d0f      	ldr	r5, [pc, #60]	; (14608 <send_cmd+0xe8>)
   145cc:	f505 708c 	add.w	r0, r5, #280	; 0x118
   145d0:	f006 fd44 	bl	1b05c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   145d4:	4620      	mov	r0, r4
   145d6:	f004 f8f5 	bl	187c4 <net_buf_id>
   145da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   145de:	4b12      	ldr	r3, [pc, #72]	; (14628 <send_cmd+0x108>)
   145e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   145e4:	4622      	mov	r2, r4
   145e6:	211f      	movs	r1, #31
   145e8:	8840      	ldrh	r0, [r0, #2]
   145ea:	f7fe fe03 	bl	131f4 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   145ee:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   145f2:	f00b fd1b 	bl	2002c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   145f6:	2300      	movs	r3, #0
   145f8:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   145fc:	4620      	mov	r0, r4
   145fe:	f00b fd15 	bl	2002c <net_buf_unref>
   14602:	e7c3      	b.n	1458c <send_cmd+0x6c>
   14604:	200003f4 	.word	0x200003f4
   14608:	200002a8 	.word	0x200002a8
   1460c:	00021fac 	.word	0x00021fac
   14610:	00021f84 	.word	0x00021f84
   14614:	000232b8 	.word	0x000232b8
   14618:	00022f58 	.word	0x00022f58
   1461c:	00023f68 	.word	0x00023f68
   14620:	00022fa8 	.word	0x00022fa8
   14624:	00023208 	.word	0x00023208
   14628:	20001f68 	.word	0x20001f68

0001462c <process_events>:
{
   1462c:	b570      	push	{r4, r5, r6, lr}
   1462e:	4604      	mov	r4, r0
   14630:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   14632:	e013      	b.n	1465c <process_events+0x30>
				send_cmd();
   14634:	f7ff ff74 	bl	14520 <send_cmd>
   14638:	e00e      	b.n	14658 <process_events+0x2c>
   1463a:	4b12      	ldr	r3, [pc, #72]	; (14684 <process_events+0x58>)
   1463c:	4a12      	ldr	r2, [pc, #72]	; (14688 <process_events+0x5c>)
   1463e:	1a9b      	subs	r3, r3, r2
   14640:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14642:	2202      	movs	r2, #2
   14644:	f362 0602 	bfi	r6, r2, #0, #3
   14648:	f36f 06c5 	bfc	r6, #3, #3
   1464c:	f363 168f 	bfi	r6, r3, #6, #10
   14650:	4632      	mov	r2, r6
   14652:	480e      	ldr	r0, [pc, #56]	; (1468c <process_events+0x60>)
   14654:	f7fc f9ee 	bl	10a34 <log_1>
	for (; count; ev++, count--) {
   14658:	3414      	adds	r4, #20
   1465a:	3d01      	subs	r5, #1
   1465c:	b185      	cbz	r5, 14680 <process_events+0x54>
		switch (ev->state) {
   1465e:	68e1      	ldr	r1, [r4, #12]
   14660:	f3c1 3145 	ubfx	r1, r1, #13, #6
   14664:	2901      	cmp	r1, #1
   14666:	d9f7      	bls.n	14658 <process_events+0x2c>
   14668:	2904      	cmp	r1, #4
   1466a:	d1e6      	bne.n	1463a <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1466c:	7b23      	ldrb	r3, [r4, #12]
   1466e:	2b00      	cmp	r3, #0
   14670:	d0e0      	beq.n	14634 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14672:	2b01      	cmp	r3, #1
   14674:	d1f0      	bne.n	14658 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   14676:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   14678:	3838      	subs	r0, #56	; 0x38
   1467a:	f001 feab 	bl	163d4 <bt_conn_process_tx>
   1467e:	e7eb      	b.n	14658 <process_events+0x2c>
}
   14680:	bd70      	pop	{r4, r5, r6, pc}
   14682:	bf00      	nop
   14684:	00021fac 	.word	0x00021fac
   14688:	00021f84 	.word	0x00021f84
   1468c:	000232d4 	.word	0x000232d4

00014690 <hci_tx_thread>:
{
   14690:	b538      	push	{r3, r4, r5, lr}
   14692:	e005      	b.n	146a0 <hci_tx_thread+0x10>
		process_events(events, ev_count);
   14694:	4621      	mov	r1, r4
   14696:	4813      	ldr	r0, [pc, #76]	; (146e4 <hci_tx_thread+0x54>)
   14698:	f7ff ffc8 	bl	1462c <process_events>
	z_impl_k_yield();
   1469c:	f007 f9fc 	bl	1ba98 <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   146a0:	4d10      	ldr	r5, [pc, #64]	; (146e4 <hci_tx_thread+0x54>)
   146a2:	68eb      	ldr	r3, [r5, #12]
   146a4:	f36f 3352 	bfc	r3, #13, #6
   146a8:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   146aa:	f105 0014 	add.w	r0, r5, #20
   146ae:	f001 faf3 	bl	15c98 <bt_conn_prepare_events>
   146b2:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   146b4:	f04f 32ff 	mov.w	r2, #4294967295
   146b8:	f04f 33ff 	mov.w	r3, #4294967295
   146bc:	4621      	mov	r1, r4
   146be:	4628      	mov	r0, r5
   146c0:	f007 fd34 	bl	1c12c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   146c4:	2800      	cmp	r0, #0
   146c6:	d0e5      	beq.n	14694 <hci_tx_thread+0x4>
   146c8:	f640 1389 	movw	r3, #2441	; 0x989
   146cc:	4a06      	ldr	r2, [pc, #24]	; (146e8 <hci_tx_thread+0x58>)
   146ce:	4907      	ldr	r1, [pc, #28]	; (146ec <hci_tx_thread+0x5c>)
   146d0:	4807      	ldr	r0, [pc, #28]	; (146f0 <hci_tx_thread+0x60>)
   146d2:	f008 f86b 	bl	1c7ac <printk>
   146d6:	4040      	eors	r0, r0
   146d8:	f380 8811 	msr	BASEPRI, r0
   146dc:	f04f 0003 	mov.w	r0, #3
   146e0:	df02      	svc	2
   146e2:	e7d7      	b.n	14694 <hci_tx_thread+0x4>
   146e4:	20000530 	.word	0x20000530
   146e8:	00022f58 	.word	0x00022f58
   146ec:	0002309c 	.word	0x0002309c
   146f0:	00022fa8 	.word	0x00022fa8

000146f4 <hci_event_prio>:
{
   146f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146f8:	b084      	sub	sp, #16
   146fa:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   146fc:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   14700:	4628      	mov	r0, r5
   14702:	f00b fd15 	bl	20130 <net_buf_simple_headroom>
   14706:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   1470a:	89a3      	ldrh	r3, [r4, #12]
   1470c:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14710:	2b01      	cmp	r3, #1
   14712:	d915      	bls.n	14740 <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   14714:	2102      	movs	r1, #2
   14716:	4628      	mov	r0, r5
   14718:	f00b fcfa 	bl	20110 <net_buf_simple_pull_mem>
   1471c:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1471e:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   14720:	3b05      	subs	r3, #5
   14722:	2b15      	cmp	r3, #21
   14724:	d81c      	bhi.n	14760 <hci_event_prio+0x6c>
   14726:	e8df f003 	tbb	[pc, r3]
   1472a:	1b19      	.short	0x1b19
   1472c:	1b1b1b1b 	.word	0x1b1b1b1b
   14730:	3f1b1b1b 	.word	0x3f1b1b1b
   14734:	1b1b1b3f 	.word	0x1b1b1b3f
   14738:	1b1b1b3f 	.word	0x1b1b1b3f
   1473c:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14740:	f640 5315 	movw	r3, #3349	; 0xd15
   14744:	4a3b      	ldr	r2, [pc, #236]	; (14834 <hci_event_prio+0x140>)
   14746:	493c      	ldr	r1, [pc, #240]	; (14838 <hci_event_prio+0x144>)
   14748:	483c      	ldr	r0, [pc, #240]	; (1483c <hci_event_prio+0x148>)
   1474a:	f008 f82f 	bl	1c7ac <printk>
   1474e:	4040      	eors	r0, r0
   14750:	f380 8811 	msr	BASEPRI, r0
   14754:	f04f 0003 	mov.w	r0, #3
   14758:	df02      	svc	2
   1475a:	e7db      	b.n	14714 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1475c:	2603      	movs	r6, #3
   1475e:	e000      	b.n	14762 <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   14760:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14762:	f016 0f01 	tst.w	r6, #1
   14766:	d021      	beq.n	147ac <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14768:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   1476a:	2300      	movs	r3, #0
   1476c:	2b04      	cmp	r3, #4
   1476e:	d83f      	bhi.n	147f0 <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   14770:	4a33      	ldr	r2, [pc, #204]	; (14840 <hci_event_prio+0x14c>)
   14772:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   14776:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1477a:	4295      	cmp	r5, r2
   1477c:	d124      	bne.n	147c8 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   1477e:	89a1      	ldrh	r1, [r4, #12]
   14780:	7843      	ldrb	r3, [r0, #1]
   14782:	4299      	cmp	r1, r3
   14784:	d322      	bcc.n	147cc <hci_event_prio+0xd8>
		handler->handler(buf);
   14786:	6843      	ldr	r3, [r0, #4]
   14788:	4620      	mov	r0, r4
   1478a:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1478c:	f016 0f02 	tst.w	r6, #2
   14790:	d04c      	beq.n	1482c <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   14792:	6923      	ldr	r3, [r4, #16]
   14794:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   14798:	4413      	add	r3, r2
   1479a:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   1479c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   147a0:	81a3      	strh	r3, [r4, #12]
}
   147a2:	b004      	add	sp, #16
   147a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   147a8:	2601      	movs	r6, #1
   147aa:	e7da      	b.n	14762 <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   147ac:	f640 5319 	movw	r3, #3353	; 0xd19
   147b0:	4a20      	ldr	r2, [pc, #128]	; (14834 <hci_event_prio+0x140>)
   147b2:	4924      	ldr	r1, [pc, #144]	; (14844 <hci_event_prio+0x150>)
   147b4:	4821      	ldr	r0, [pc, #132]	; (1483c <hci_event_prio+0x148>)
   147b6:	f007 fff9 	bl	1c7ac <printk>
   147ba:	4040      	eors	r0, r0
   147bc:	f380 8811 	msr	BASEPRI, r0
   147c0:	f04f 0003 	mov.w	r0, #3
   147c4:	df02      	svc	2
   147c6:	e7cf      	b.n	14768 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   147c8:	3301      	adds	r3, #1
   147ca:	e7cf      	b.n	1476c <hci_event_prio+0x78>
   147cc:	4a1e      	ldr	r2, [pc, #120]	; (14848 <hci_event_prio+0x154>)
   147ce:	4b1f      	ldr	r3, [pc, #124]	; (1484c <hci_event_prio+0x158>)
   147d0:	1ad2      	subs	r2, r2, r3
   147d2:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   147d4:	f04f 0300 	mov.w	r3, #0
   147d8:	2001      	movs	r0, #1
   147da:	f360 0302 	bfi	r3, r0, #0, #3
   147de:	f36f 03c5 	bfc	r3, #3, #3
   147e2:	f362 138f 	bfi	r3, r2, #6, #10
   147e6:	462a      	mov	r2, r5
   147e8:	4819      	ldr	r0, [pc, #100]	; (14850 <hci_event_prio+0x15c>)
   147ea:	f7fc f959 	bl	10aa0 <log_2>
			return;
   147ee:	e7cd      	b.n	1478c <hci_event_prio+0x98>
   147f0:	4b15      	ldr	r3, [pc, #84]	; (14848 <hci_event_prio+0x154>)
   147f2:	4a16      	ldr	r2, [pc, #88]	; (1484c <hci_event_prio+0x158>)
   147f4:	1a9b      	subs	r3, r3, r2
   147f6:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   147f8:	f04f 0700 	mov.w	r7, #0
   147fc:	2202      	movs	r2, #2
   147fe:	f362 0702 	bfi	r7, r2, #0, #3
   14802:	f36f 07c5 	bfc	r7, #3, #3
   14806:	f363 178f 	bfi	r7, r3, #6, #10
   1480a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   1480e:	4641      	mov	r1, r8
   14810:	68a0      	ldr	r0, [r4, #8]
   14812:	f7fe f98f 	bl	12b34 <bt_hex_real>
   14816:	f7fb ff93 	bl	10740 <z_log_strdup>
   1481a:	4603      	mov	r3, r0
   1481c:	f8ad 7000 	strh.w	r7, [sp]
   14820:	4642      	mov	r2, r8
   14822:	4629      	mov	r1, r5
   14824:	480b      	ldr	r0, [pc, #44]	; (14854 <hci_event_prio+0x160>)
   14826:	f7fc f8c7 	bl	109b8 <log_3>
   1482a:	e7af      	b.n	1478c <hci_event_prio+0x98>
		net_buf_unref(buf);
   1482c:	4620      	mov	r0, r4
   1482e:	f00b fbfd 	bl	2002c <net_buf_unref>
}
   14832:	e7b6      	b.n	147a2 <hci_event_prio+0xae>
   14834:	00022f58 	.word	0x00022f58
   14838:	00022f8c 	.word	0x00022f8c
   1483c:	00022fa8 	.word	0x00022fa8
   14840:	00023428 	.word	0x00023428
   14844:	000232f8 	.word	0x000232f8
   14848:	00021fac 	.word	0x00021fac
   1484c:	00021f84 	.word	0x00021f84
   14850:	00023010 	.word	0x00023010
   14854:	00023034 	.word	0x00023034

00014858 <bt_recv>:
{
   14858:	b538      	push	{r3, r4, r5, lr}
   1485a:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1485c:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   1485e:	2d01      	cmp	r5, #1
   14860:	d007      	beq.n	14872 <bt_recv+0x1a>
   14862:	2d03      	cmp	r5, #3
   14864:	d12c      	bne.n	148c0 <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   14866:	4601      	mov	r1, r0
   14868:	4821      	ldr	r0, [pc, #132]	; (148f0 <bt_recv+0x98>)
   1486a:	f00b fbd2 	bl	20012 <net_buf_put>
		return 0;
   1486e:	2000      	movs	r0, #0
}
   14870:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   14872:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14874:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   14876:	3b05      	subs	r3, #5
   14878:	2b15      	cmp	r3, #21
   1487a:	d80e      	bhi.n	1489a <bt_recv+0x42>
   1487c:	e8df f003 	tbb	[pc, r3]
   14880:	0d0d0d0b 	.word	0x0d0d0d0b
   14884:	0d0d0d0d 	.word	0x0d0d0d0d
   14888:	0d0e0e0d 	.word	0x0d0e0e0d
   1488c:	0d0e0d0d 	.word	0x0d0e0d0d
   14890:	0d0d0d0d 	.word	0x0d0d0d0d
   14894:	0e0d      	.short	0x0e0d
   14896:	2503      	movs	r5, #3
   14898:	e000      	b.n	1489c <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   1489a:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1489c:	f015 0f01 	tst.w	r5, #1
   148a0:	d104      	bne.n	148ac <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   148a2:	f015 0f02 	tst.w	r5, #2
   148a6:	d105      	bne.n	148b4 <bt_recv+0x5c>
		return 0;
   148a8:	2000      	movs	r0, #0
   148aa:	e7e1      	b.n	14870 <bt_recv+0x18>
			hci_event_prio(buf);
   148ac:	4620      	mov	r0, r4
   148ae:	f7ff ff21 	bl	146f4 <hci_event_prio>
   148b2:	e7f6      	b.n	148a2 <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   148b4:	4621      	mov	r1, r4
   148b6:	480e      	ldr	r0, [pc, #56]	; (148f0 <bt_recv+0x98>)
   148b8:	f00b fbab 	bl	20012 <net_buf_put>
		return 0;
   148bc:	2000      	movs	r0, #0
   148be:	e7d7      	b.n	14870 <bt_recv+0x18>
   148c0:	4b0c      	ldr	r3, [pc, #48]	; (148f4 <bt_recv+0x9c>)
   148c2:	4a0d      	ldr	r2, [pc, #52]	; (148f8 <bt_recv+0xa0>)
   148c4:	1a9b      	subs	r3, r3, r2
   148c6:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   148c8:	f04f 0200 	mov.w	r2, #0
   148cc:	2101      	movs	r1, #1
   148ce:	f361 0202 	bfi	r2, r1, #0, #3
   148d2:	f36f 02c5 	bfc	r2, #3, #3
   148d6:	f363 128f 	bfi	r2, r3, #6, #10
   148da:	4629      	mov	r1, r5
   148dc:	4807      	ldr	r0, [pc, #28]	; (148fc <bt_recv+0xa4>)
   148de:	f7fc f8a9 	bl	10a34 <log_1>
		net_buf_unref(buf);
   148e2:	4620      	mov	r0, r4
   148e4:	f00b fba2 	bl	2002c <net_buf_unref>
		return -EINVAL;
   148e8:	f06f 0015 	mvn.w	r0, #21
   148ec:	e7c0      	b.n	14870 <bt_recv+0x18>
   148ee:	bf00      	nop
   148f0:	200003dc 	.word	0x200003dc
   148f4:	00021fac 	.word	0x00021fac
   148f8:	00021f84 	.word	0x00021f84
   148fc:	00023314 	.word	0x00023314

00014900 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14900:	4b0a      	ldr	r3, [pc, #40]	; (1492c <bt_hci_driver_register+0x2c>)
   14902:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14906:	b943      	cbnz	r3, 1491a <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   14908:	68c3      	ldr	r3, [r0, #12]
   1490a:	b14b      	cbz	r3, 14920 <bt_hci_driver_register+0x20>
   1490c:	6903      	ldr	r3, [r0, #16]
   1490e:	b153      	cbz	r3, 14926 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   14910:	4b06      	ldr	r3, [pc, #24]	; (1492c <bt_hci_driver_register+0x2c>)
   14912:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   14916:	2000      	movs	r0, #0
   14918:	4770      	bx	lr
		return -EALREADY;
   1491a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1491e:	4770      	bx	lr
		return -EINVAL;
   14920:	f06f 0015 	mvn.w	r0, #21
   14924:	4770      	bx	lr
   14926:	f06f 0015 	mvn.w	r0, #21
}
   1492a:	4770      	bx	lr
   1492c:	200002a8 	.word	0x200002a8

00014930 <bt_finalize_init>:
{
   14930:	b508      	push	{r3, lr}
   14932:	4b08      	ldr	r3, [pc, #32]	; (14954 <bt_finalize_init+0x24>)
   14934:	f3bf 8f5b 	dmb	ish
   14938:	e853 2f00 	ldrex	r2, [r3]
   1493c:	f042 0202 	orr.w	r2, r2, #2
   14940:	e843 2100 	strex	r1, r2, [r3]
   14944:	2900      	cmp	r1, #0
   14946:	d1f7      	bne.n	14938 <bt_finalize_init+0x8>
   14948:	f3bf 8f5b 	dmb	ish
	bt_dev_show_info();
   1494c:	f7fe fd7c 	bl	13448 <bt_dev_show_info>
}
   14950:	bd08      	pop	{r3, pc}
   14952:	bf00      	nop
   14954:	20000374 	.word	0x20000374

00014958 <init_work>:
{
   14958:	b508      	push	{r3, lr}
	err = bt_init();
   1495a:	f009 fc6b 	bl	1e234 <bt_init>
	if (ready_cb) {
   1495e:	4b02      	ldr	r3, [pc, #8]	; (14968 <init_work+0x10>)
   14960:	681b      	ldr	r3, [r3, #0]
   14962:	b103      	cbz	r3, 14966 <init_work+0xe>
		ready_cb(err);
   14964:	4798      	blx	r3
}
   14966:	bd08      	pop	{r3, pc}
   14968:	20001f84 	.word	0x20001f84

0001496c <bt_set_name>:
#else
BUILD_ASSERT(DEVICE_NAME_LEN < 248);
#endif

int bt_set_name(const char *name)
{
   1496c:	b570      	push	{r4, r5, r6, lr}
   1496e:	4605      	mov	r5, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
   14970:	f009 fa26 	bl	1ddc0 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
   14974:	2841      	cmp	r0, #65	; 0x41
   14976:	d812      	bhi.n	1499e <bt_set_name+0x32>
   14978:	4604      	mov	r4, r0
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
   1497a:	4629      	mov	r1, r5
   1497c:	4809      	ldr	r0, [pc, #36]	; (149a4 <bt_set_name+0x38>)
   1497e:	f009 fa31 	bl	1dde4 <strcmp>
   14982:	b900      	cbnz	r0, 14986 <bt_set_name+0x1a>

	return 0;
#else
	return -ENOMEM;
#endif
}
   14984:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
   14986:	4e08      	ldr	r6, [pc, #32]	; (149a8 <bt_set_name+0x3c>)
   14988:	4622      	mov	r2, r4
   1498a:	4629      	mov	r1, r5
   1498c:	f506 70b4 	add.w	r0, r6, #360	; 0x168
   14990:	f009 f9fc 	bl	1dd8c <strncpy>
	bt_dev.name[len] = '\0';
   14994:	4434      	add	r4, r6
   14996:	2000      	movs	r0, #0
   14998:	f884 0168 	strb.w	r0, [r4, #360]	; 0x168
	return 0;
   1499c:	e7f2      	b.n	14984 <bt_set_name+0x18>
		return -ENOMEM;
   1499e:	f06f 000b 	mvn.w	r0, #11
   149a2:	e7ef      	b.n	14984 <bt_set_name+0x18>
   149a4:	20000410 	.word	0x20000410
   149a8:	200002a8 	.word	0x200002a8

000149ac <bt_enable>:
{
   149ac:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   149b0:	b088      	sub	sp, #32
	if (!bt_dev.drv) {
   149b2:	4b4d      	ldr	r3, [pc, #308]	; (14ae8 <bt_enable+0x13c>)
   149b4:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   149b8:	2b00      	cmp	r3, #0
   149ba:	d058      	beq.n	14a6e <bt_enable+0xc2>
   149bc:	4605      	mov	r5, r0
   149be:	4b4b      	ldr	r3, [pc, #300]	; (14aec <bt_enable+0x140>)
   149c0:	f3bf 8f5b 	dmb	ish
   149c4:	e853 2f00 	ldrex	r2, [r3]
   149c8:	f042 0101 	orr.w	r1, r2, #1
   149cc:	e843 1000 	strex	r0, r1, [r3]
   149d0:	2800      	cmp	r0, #0
   149d2:	d1f7      	bne.n	149c4 <bt_enable+0x18>
   149d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   149d8:	f012 0f01 	tst.w	r2, #1
   149dc:	f040 8081 	bne.w	14ae2 <bt_enable+0x136>
		err = bt_set_name(CONFIG_BT_DEVICE_NAME);
   149e0:	4843      	ldr	r0, [pc, #268]	; (14af0 <bt_enable+0x144>)
   149e2:	f7ff ffc3 	bl	1496c <bt_set_name>
		if (err) {
   149e6:	4601      	mov	r1, r0
   149e8:	2800      	cmp	r0, #0
   149ea:	d153      	bne.n	14a94 <bt_enable+0xe8>
	ready_cb = cb;
   149ec:	4b41      	ldr	r3, [pc, #260]	; (14af4 <bt_enable+0x148>)
   149ee:	601d      	str	r5, [r3, #0]
	k_thread_create(&tx_thread_data, tx_thread_stack,
   149f0:	f04f 0800 	mov.w	r8, #0
   149f4:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   149f8:	4e3f      	ldr	r6, [pc, #252]	; (14af8 <bt_enable+0x14c>)
   149fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
   149fe:	2400      	movs	r4, #0
   14a00:	9404      	str	r4, [sp, #16]
   14a02:	f06f 0308 	mvn.w	r3, #8
   14a06:	9303      	str	r3, [sp, #12]
   14a08:	9402      	str	r4, [sp, #8]
   14a0a:	9401      	str	r4, [sp, #4]
   14a0c:	9400      	str	r4, [sp, #0]
   14a0e:	4b3b      	ldr	r3, [pc, #236]	; (14afc <bt_enable+0x150>)
   14a10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14a14:	493a      	ldr	r1, [pc, #232]	; (14b00 <bt_enable+0x154>)
   14a16:	4630      	mov	r0, r6
   14a18:	f00c fb8c 	bl	21134 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14a1c:	4939      	ldr	r1, [pc, #228]	; (14b04 <bt_enable+0x158>)
   14a1e:	4630      	mov	r0, r6
   14a20:	f006 f92e 	bl	1ac80 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14a24:	4e38      	ldr	r6, [pc, #224]	; (14b08 <bt_enable+0x15c>)
   14a26:	e9cd 8906 	strd	r8, r9, [sp, #24]
   14a2a:	9404      	str	r4, [sp, #16]
   14a2c:	f06f 0307 	mvn.w	r3, #7
   14a30:	9303      	str	r3, [sp, #12]
   14a32:	9402      	str	r4, [sp, #8]
   14a34:	9401      	str	r4, [sp, #4]
   14a36:	9400      	str	r4, [sp, #0]
   14a38:	4b34      	ldr	r3, [pc, #208]	; (14b0c <bt_enable+0x160>)
   14a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14a3e:	4934      	ldr	r1, [pc, #208]	; (14b10 <bt_enable+0x164>)
   14a40:	4630      	mov	r0, r6
   14a42:	f00c fb77 	bl	21134 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14a46:	4933      	ldr	r1, [pc, #204]	; (14b14 <bt_enable+0x168>)
   14a48:	4630      	mov	r0, r6
   14a4a:	f006 f919 	bl	1ac80 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14a4e:	4b26      	ldr	r3, [pc, #152]	; (14ae8 <bt_enable+0x13c>)
   14a50:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   14a54:	68db      	ldr	r3, [r3, #12]
   14a56:	4798      	blx	r3
	if (err) {
   14a58:	4604      	mov	r4, r0
   14a5a:	bb60      	cbnz	r0, 14ab6 <bt_enable+0x10a>
	if (!cb) {
   14a5c:	2d00      	cmp	r5, #0
   14a5e:	d03c      	beq.n	14ada <bt_enable+0x12e>
	k_work_submit(&bt_dev.init);
   14a60:	482d      	ldr	r0, [pc, #180]	; (14b18 <bt_enable+0x16c>)
   14a62:	f006 fcc5 	bl	1b3f0 <k_work_submit>
}
   14a66:	4620      	mov	r0, r4
   14a68:	b008      	add	sp, #32
   14a6a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   14a6e:	4b2b      	ldr	r3, [pc, #172]	; (14b1c <bt_enable+0x170>)
   14a70:	4a2b      	ldr	r2, [pc, #172]	; (14b20 <bt_enable+0x174>)
   14a72:	1a9b      	subs	r3, r3, r2
   14a74:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   14a76:	f04f 0100 	mov.w	r1, #0
   14a7a:	2201      	movs	r2, #1
   14a7c:	f362 0102 	bfi	r1, r2, #0, #3
   14a80:	f36f 01c5 	bfc	r1, #3, #3
   14a84:	f363 118f 	bfi	r1, r3, #6, #10
   14a88:	4826      	ldr	r0, [pc, #152]	; (14b24 <bt_enable+0x178>)
   14a8a:	f7fc f889 	bl	10ba0 <log_0>
		return -ENODEV;
   14a8e:	f06f 0412 	mvn.w	r4, #18
   14a92:	e7e8      	b.n	14a66 <bt_enable+0xba>
   14a94:	4b21      	ldr	r3, [pc, #132]	; (14b1c <bt_enable+0x170>)
   14a96:	4a22      	ldr	r2, [pc, #136]	; (14b20 <bt_enable+0x174>)
   14a98:	1a9b      	subs	r3, r3, r2
   14a9a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to set device name (%d)", err);
   14a9c:	f04f 0200 	mov.w	r2, #0
   14aa0:	2002      	movs	r0, #2
   14aa2:	f360 0202 	bfi	r2, r0, #0, #3
   14aa6:	f36f 02c5 	bfc	r2, #3, #3
   14aaa:	f363 128f 	bfi	r2, r3, #6, #10
   14aae:	481e      	ldr	r0, [pc, #120]	; (14b28 <bt_enable+0x17c>)
   14ab0:	f7fb ffc0 	bl	10a34 <log_1>
   14ab4:	e79a      	b.n	149ec <bt_enable+0x40>
   14ab6:	4b19      	ldr	r3, [pc, #100]	; (14b1c <bt_enable+0x170>)
   14ab8:	4a19      	ldr	r2, [pc, #100]	; (14b20 <bt_enable+0x174>)
   14aba:	1a9b      	subs	r3, r3, r2
   14abc:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   14abe:	f04f 0200 	mov.w	r2, #0
   14ac2:	2101      	movs	r1, #1
   14ac4:	f361 0202 	bfi	r2, r1, #0, #3
   14ac8:	f36f 02c5 	bfc	r2, #3, #3
   14acc:	f363 128f 	bfi	r2, r3, #6, #10
   14ad0:	4601      	mov	r1, r0
   14ad2:	4816      	ldr	r0, [pc, #88]	; (14b2c <bt_enable+0x180>)
   14ad4:	f7fb ffae 	bl	10a34 <log_1>
		return err;
   14ad8:	e7c5      	b.n	14a66 <bt_enable+0xba>
		return bt_init();
   14ada:	f009 fbab 	bl	1e234 <bt_init>
   14ade:	4604      	mov	r4, r0
   14ae0:	e7c1      	b.n	14a66 <bt_enable+0xba>
		return -EALREADY;
   14ae2:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14ae6:	e7be      	b.n	14a66 <bt_enable+0xba>
   14ae8:	200002a8 	.word	0x200002a8
   14aec:	20000374 	.word	0x20000374
   14af0:	00023344 	.word	0x00023344
   14af4:	20001f84 	.word	0x20001f84
   14af8:	20001628 	.word	0x20001628
   14afc:	00014691 	.word	0x00014691
   14b00:	20003900 	.word	0x20003900
   14b04:	00023374 	.word	0x00023374
   14b08:	20001570 	.word	0x20001570
   14b0c:	000138e5 	.word	0x000138e5
   14b10:	200034e0 	.word	0x200034e0
   14b14:	0002337c 	.word	0x0002337c
   14b18:	20000364 	.word	0x20000364
   14b1c:	00021fac 	.word	0x00021fac
   14b20:	00021f84 	.word	0x00021f84
   14b24:	00023328 	.word	0x00023328
   14b28:	00023354 	.word	0x00023354
   14b2c:	00023384 	.word	0x00023384

00014b30 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14b30:	4800      	ldr	r0, [pc, #0]	; (14b34 <bt_get_name+0x4>)
   14b32:	4770      	bx	lr
   14b34:	20000410 	.word	0x20000410

00014b38 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14b38:	b570      	push	{r4, r5, r6, lr}
   14b3a:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14b3c:	2400      	movs	r4, #0
   14b3e:	4b0a      	ldr	r3, [pc, #40]	; (14b68 <id_find+0x30>)
   14b40:	79db      	ldrb	r3, [r3, #7]
   14b42:	42a3      	cmp	r3, r4
   14b44:	d90c      	bls.n	14b60 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14b46:	4626      	mov	r6, r4
   14b48:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   14b4c:	2207      	movs	r2, #7
   14b4e:	4b06      	ldr	r3, [pc, #24]	; (14b68 <id_find+0x30>)
   14b50:	4419      	add	r1, r3
   14b52:	4628      	mov	r0, r5
   14b54:	f009 f950 	bl	1ddf8 <memcmp>
   14b58:	b120      	cbz	r0, 14b64 <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   14b5a:	3401      	adds	r4, #1
   14b5c:	b2e4      	uxtb	r4, r4
   14b5e:	e7ee      	b.n	14b3e <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   14b60:	f06f 0601 	mvn.w	r6, #1
}
   14b64:	4630      	mov	r0, r6
   14b66:	bd70      	pop	{r4, r5, r6, pc}
   14b68:	200002a8 	.word	0x200002a8

00014b6c <set_random_address>:
{
   14b6c:	b570      	push	{r4, r5, r6, lr}
   14b6e:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   14b70:	2206      	movs	r2, #6
   14b72:	4914      	ldr	r1, [pc, #80]	; (14bc4 <set_random_address+0x58>)
   14b74:	f009 f940 	bl	1ddf8 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14b78:	4605      	mov	r5, r0
   14b7a:	b908      	cbnz	r0, 14b80 <set_random_address+0x14>
}
   14b7c:	4628      	mov	r0, r5
   14b7e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14b80:	2106      	movs	r1, #6
   14b82:	f242 0005 	movw	r0, #8197	; 0x2005
   14b86:	f7fe fef1 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   14b8a:	4605      	mov	r5, r0
   14b8c:	b1b8      	cbz	r0, 14bbe <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14b8e:	2206      	movs	r2, #6
   14b90:	4621      	mov	r1, r4
   14b92:	3008      	adds	r0, #8
   14b94:	f00b fa9a 	bl	200cc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14b98:	2200      	movs	r2, #0
   14b9a:	4629      	mov	r1, r5
   14b9c:	f242 0005 	movw	r0, #8197	; 0x2005
   14ba0:	f7fe ff20 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   14ba4:	4605      	mov	r5, r0
   14ba6:	2800      	cmp	r0, #0
   14ba8:	d1e8      	bne.n	14b7c <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   14baa:	4e06      	ldr	r6, [pc, #24]	; (14bc4 <set_random_address+0x58>)
   14bac:	2206      	movs	r2, #6
   14bae:	4621      	mov	r1, r4
   14bb0:	4630      	mov	r0, r6
   14bb2:	f009 f938 	bl	1de26 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14bb6:	2301      	movs	r3, #1
   14bb8:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   14bbc:	e7de      	b.n	14b7c <set_random_address+0x10>
		return -ENOBUFS;
   14bbe:	f06f 0568 	mvn.w	r5, #104	; 0x68
   14bc2:	e7db      	b.n	14b7c <set_random_address+0x10>
   14bc4:	20000309 	.word	0x20000309

00014bc8 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   14bc8:	b530      	push	{r4, r5, lr}
   14bca:	b085      	sub	sp, #20
   14bcc:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14bce:	460d      	mov	r5, r1
   14bd0:	b149      	cbz	r1, 14be6 <id_create+0x1e>
   14bd2:	2300      	movs	r3, #0
   14bd4:	9302      	str	r3, [sp, #8]
   14bd6:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   14bda:	2207      	movs	r2, #7
   14bdc:	a902      	add	r1, sp, #8
   14bde:	4628      	mov	r0, r5
   14be0:	f009 f90a 	bl	1ddf8 <memcmp>
   14be4:	b9e0      	cbnz	r0, 14c20 <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   14be6:	4668      	mov	r0, sp
   14be8:	f009 f9d9 	bl	1df9e <bt_addr_le_create_static>
			if (err) {
   14bec:	4603      	mov	r3, r0
   14bee:	b9a0      	cbnz	r0, 14c1a <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   14bf0:	4668      	mov	r0, sp
   14bf2:	f7ff ffa1 	bl	14b38 <id_find>
   14bf6:	2800      	cmp	r0, #0
   14bf8:	daf5      	bge.n	14be6 <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14bfa:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14bfe:	4b0d      	ldr	r3, [pc, #52]	; (14c34 <id_create+0x6c>)
   14c00:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   14c02:	2207      	movs	r2, #7
   14c04:	4669      	mov	r1, sp
   14c06:	4620      	mov	r0, r4
   14c08:	f009 f90d 	bl	1de26 <memcpy>

		if (addr) {
   14c0c:	b125      	cbz	r5, 14c18 <id_create+0x50>
   14c0e:	2207      	movs	r2, #7
   14c10:	4621      	mov	r1, r4
   14c12:	4628      	mov	r0, r5
   14c14:	f009 f907 	bl	1de26 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14c18:	2300      	movs	r3, #0
}
   14c1a:	4618      	mov	r0, r3
   14c1c:	b005      	add	sp, #20
   14c1e:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14c20:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14c24:	2207      	movs	r2, #7
   14c26:	4629      	mov	r1, r5
   14c28:	4802      	ldr	r0, [pc, #8]	; (14c34 <id_create+0x6c>)
   14c2a:	4420      	add	r0, r4
   14c2c:	f009 f8fb 	bl	1de26 <memcpy>
}
   14c30:	e7f2      	b.n	14c18 <id_create+0x50>
   14c32:	bf00      	nop
   14c34:	200002a8 	.word	0x200002a8

00014c38 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14c38:	b570      	push	{r4, r5, r6, lr}
   14c3a:	b084      	sub	sp, #16
   14c3c:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   14c3e:	4605      	mov	r5, r0
   14c40:	b340      	cbz	r0, 14c94 <bt_id_create+0x5c>
   14c42:	2300      	movs	r3, #0
   14c44:	9300      	str	r3, [sp, #0]
   14c46:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   14c4a:	2207      	movs	r2, #7
   14c4c:	4669      	mov	r1, sp
   14c4e:	f009 f8d3 	bl	1ddf8 <memcmp>
   14c52:	b1f8      	cbz	r0, 14c94 <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14c54:	782b      	ldrb	r3, [r5, #0]
   14c56:	2b01      	cmp	r3, #1
   14c58:	d104      	bne.n	14c64 <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   14c5a:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14c5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14c60:	2bc0      	cmp	r3, #192	; 0xc0
   14c62:	d012      	beq.n	14c8a <bt_id_create+0x52>
   14c64:	4b24      	ldr	r3, [pc, #144]	; (14cf8 <bt_id_create+0xc0>)
   14c66:	4a25      	ldr	r2, [pc, #148]	; (14cfc <bt_id_create+0xc4>)
   14c68:	1a9b      	subs	r3, r3, r2
   14c6a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   14c6c:	f04f 0100 	mov.w	r1, #0
   14c70:	2201      	movs	r2, #1
   14c72:	f362 0102 	bfi	r1, r2, #0, #3
   14c76:	f36f 01c5 	bfc	r1, #3, #3
   14c7a:	f363 118f 	bfi	r1, r3, #6, #10
   14c7e:	4820      	ldr	r0, [pc, #128]	; (14d00 <bt_id_create+0xc8>)
   14c80:	f7fb ff8e 	bl	10ba0 <log_0>
			return -EINVAL;
   14c84:	f06f 0015 	mvn.w	r0, #21
   14c88:	e028      	b.n	14cdc <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   14c8a:	4628      	mov	r0, r5
   14c8c:	f7ff ff54 	bl	14b38 <id_find>
   14c90:	2800      	cmp	r0, #0
   14c92:	da25      	bge.n	14ce0 <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14c94:	bb54      	cbnz	r4, 14cec <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14c96:	4b1b      	ldr	r3, [pc, #108]	; (14d04 <bt_id_create+0xcc>)
   14c98:	79db      	ldrb	r3, [r3, #7]
   14c9a:	2b01      	cmp	r3, #1
   14c9c:	d029      	beq.n	14cf2 <bt_id_create+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14c9e:	f3bf 8f5b 	dmb	ish
   14ca2:	4b19      	ldr	r3, [pc, #100]	; (14d08 <bt_id_create+0xd0>)
   14ca4:	681b      	ldr	r3, [r3, #0]
   14ca6:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14caa:	f013 0f01 	tst.w	r3, #1
   14cae:	d10a      	bne.n	14cc6 <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   14cb0:	b1cd      	cbz	r5, 14ce6 <bt_id_create+0xae>
   14cb2:	2300      	movs	r3, #0
   14cb4:	9302      	str	r3, [sp, #8]
   14cb6:	f8cd 300b 	str.w	r3, [sp, #11]
   14cba:	2207      	movs	r2, #7
   14cbc:	a902      	add	r1, sp, #8
   14cbe:	4628      	mov	r0, r5
   14cc0:	f009 f89a 	bl	1ddf8 <memcmp>
   14cc4:	b178      	cbz	r0, 14ce6 <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   14cc6:	4b0f      	ldr	r3, [pc, #60]	; (14d04 <bt_id_create+0xcc>)
   14cc8:	79de      	ldrb	r6, [r3, #7]
   14cca:	1c72      	adds	r2, r6, #1
   14ccc:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   14cce:	4622      	mov	r2, r4
   14cd0:	4629      	mov	r1, r5
   14cd2:	4630      	mov	r0, r6
   14cd4:	f7ff ff78 	bl	14bc8 <id_create>
	if (err) {
   14cd8:	b900      	cbnz	r0, 14cdc <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   14cda:	4630      	mov	r0, r6
}
   14cdc:	b004      	add	sp, #16
   14cde:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   14ce0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14ce4:	e7fa      	b.n	14cdc <bt_id_create+0xa4>
			return -EINVAL;
   14ce6:	f06f 0015 	mvn.w	r0, #21
   14cea:	e7f7      	b.n	14cdc <bt_id_create+0xa4>
		return -EINVAL;
   14cec:	f06f 0015 	mvn.w	r0, #21
   14cf0:	e7f4      	b.n	14cdc <bt_id_create+0xa4>
		return -ENOMEM;
   14cf2:	f06f 000b 	mvn.w	r0, #11
   14cf6:	e7f1      	b.n	14cdc <bt_id_create+0xa4>
   14cf8:	00021fb4 	.word	0x00021fb4
   14cfc:	00021f84 	.word	0x00021f84
   14d00:	00023460 	.word	0x00023460
   14d04:	200002a8 	.word	0x200002a8
   14d08:	20000374 	.word	0x20000374

00014d0c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14d0c:	b530      	push	{r4, r5, lr}
   14d0e:	b087      	sub	sp, #28
   14d10:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14d12:	aa01      	add	r2, sp, #4
   14d14:	2100      	movs	r1, #0
   14d16:	f241 0009 	movw	r0, #4105	; 0x1009
   14d1a:	f7fe fe63 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   14d1e:	b9f0      	cbnz	r0, 14d5e <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   14d20:	9b01      	ldr	r3, [sp, #4]
   14d22:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14d24:	3401      	adds	r4, #1
   14d26:	2300      	movs	r3, #0
   14d28:	9302      	str	r3, [sp, #8]
   14d2a:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   14d2e:	2206      	movs	r2, #6
   14d30:	a902      	add	r1, sp, #8
   14d32:	4620      	mov	r0, r4
   14d34:	f009 f860 	bl	1ddf8 <memcmp>
   14d38:	b158      	cbz	r0, 14d52 <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   14d3a:	4b18      	ldr	r3, [pc, #96]	; (14d9c <bt_id_read_public_addr+0x90>)
   14d3c:	e893 0003 	ldmia.w	r3, {r0, r1}
   14d40:	9004      	str	r0, [sp, #16]
   14d42:	f8ad 1014 	strh.w	r1, [sp, #20]
   14d46:	2206      	movs	r2, #6
   14d48:	a904      	add	r1, sp, #16
   14d4a:	4620      	mov	r0, r4
   14d4c:	f009 f854 	bl	1ddf8 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14d50:	b9b8      	cbnz	r0, 14d82 <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   14d52:	9801      	ldr	r0, [sp, #4]
   14d54:	f00b f96a 	bl	2002c <net_buf_unref>
		return 0U;
   14d58:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   14d5a:	b007      	add	sp, #28
   14d5c:	bd30      	pop	{r4, r5, pc}
   14d5e:	4b10      	ldr	r3, [pc, #64]	; (14da0 <bt_id_read_public_addr+0x94>)
   14d60:	4a10      	ldr	r2, [pc, #64]	; (14da4 <bt_id_read_public_addr+0x98>)
   14d62:	1a9b      	subs	r3, r3, r2
   14d64:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   14d66:	f04f 0100 	mov.w	r1, #0
   14d6a:	2202      	movs	r2, #2
   14d6c:	f362 0102 	bfi	r1, r2, #0, #3
   14d70:	f36f 01c5 	bfc	r1, #3, #3
   14d74:	f363 118f 	bfi	r1, r3, #6, #10
   14d78:	480b      	ldr	r0, [pc, #44]	; (14da8 <bt_id_read_public_addr+0x9c>)
   14d7a:	f7fb ff11 	bl	10ba0 <log_0>
		return 0U;
   14d7e:	2000      	movs	r0, #0
   14d80:	e7eb      	b.n	14d5a <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   14d82:	2206      	movs	r2, #6
   14d84:	4621      	mov	r1, r4
   14d86:	1c68      	adds	r0, r5, #1
   14d88:	f009 f84d 	bl	1de26 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   14d8c:	2300      	movs	r3, #0
   14d8e:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   14d90:	9801      	ldr	r0, [sp, #4]
   14d92:	f00b f94b 	bl	2002c <net_buf_unref>
	return 1U;
   14d96:	2001      	movs	r0, #1
   14d98:	e7df      	b.n	14d5a <bt_id_read_public_addr+0x4e>
   14d9a:	bf00      	nop
   14d9c:	0002214c 	.word	0x0002214c
   14da0:	00021fb4 	.word	0x00021fb4
   14da4:	00021f84 	.word	0x00021f84
   14da8:	00023490 	.word	0x00023490

00014dac <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14dac:	b500      	push	{lr}
   14dae:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14db0:	4668      	mov	r0, sp
   14db2:	f7ff ffab 	bl	14d0c <bt_id_read_public_addr>
   14db6:	4b06      	ldr	r3, [pc, #24]	; (14dd0 <bt_setup_public_id_addr+0x24>)
   14db8:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14dba:	b918      	cbnz	r0, 14dc4 <bt_setup_public_id_addr+0x18>
		return 0;
   14dbc:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   14dbe:	b003      	add	sp, #12
   14dc0:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   14dc4:	2200      	movs	r2, #0
   14dc6:	4669      	mov	r1, sp
   14dc8:	4610      	mov	r0, r2
   14dca:	f7ff fefd 	bl	14bc8 <id_create>
   14dce:	e7f6      	b.n	14dbe <bt_setup_public_id_addr+0x12>
   14dd0:	200002a8 	.word	0x200002a8

00014dd4 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dd8:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14dda:	4b2e      	ldr	r3, [pc, #184]	; (14e94 <bt_read_static_addr+0xc0>)
   14ddc:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   14de0:	f015 0501 	ands.w	r5, r5, #1
   14de4:	d010      	beq.n	14e08 <bt_read_static_addr+0x34>
   14de6:	4607      	mov	r7, r0
   14de8:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14dea:	aa01      	add	r2, sp, #4
   14dec:	2100      	movs	r1, #0
   14dee:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14df2:	f7fe fdf7 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   14df6:	4604      	mov	r4, r0
   14df8:	b9b8      	cbnz	r0, 14e2a <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   14dfa:	9b01      	ldr	r3, [sp, #4]
   14dfc:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   14dfe:	7875      	ldrb	r5, [r6, #1]
   14e00:	4545      	cmp	r5, r8
   14e02:	bf28      	it	cs
   14e04:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   14e06:	e029      	b.n	14e5c <bt_read_static_addr+0x88>
   14e08:	4b23      	ldr	r3, [pc, #140]	; (14e98 <bt_read_static_addr+0xc4>)
   14e0a:	4a24      	ldr	r2, [pc, #144]	; (14e9c <bt_read_static_addr+0xc8>)
   14e0c:	1a9b      	subs	r3, r3, r2
   14e0e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   14e10:	f04f 0100 	mov.w	r1, #0
   14e14:	2202      	movs	r2, #2
   14e16:	f362 0102 	bfi	r1, r2, #0, #3
   14e1a:	f36f 01c5 	bfc	r1, #3, #3
   14e1e:	f363 118f 	bfi	r1, r3, #6, #10
   14e22:	481f      	ldr	r0, [pc, #124]	; (14ea0 <bt_read_static_addr+0xcc>)
   14e24:	f7fb febc 	bl	10ba0 <log_0>
		return 0;
   14e28:	e01e      	b.n	14e68 <bt_read_static_addr+0x94>
   14e2a:	4b1b      	ldr	r3, [pc, #108]	; (14e98 <bt_read_static_addr+0xc4>)
   14e2c:	4a1b      	ldr	r2, [pc, #108]	; (14e9c <bt_read_static_addr+0xc8>)
   14e2e:	1a9b      	subs	r3, r3, r2
   14e30:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   14e32:	f04f 0100 	mov.w	r1, #0
   14e36:	2202      	movs	r2, #2
   14e38:	f362 0102 	bfi	r1, r2, #0, #3
   14e3c:	f36f 01c5 	bfc	r1, #3, #3
   14e40:	f363 118f 	bfi	r1, r3, #6, #10
   14e44:	4817      	ldr	r0, [pc, #92]	; (14ea4 <bt_read_static_addr+0xd0>)
   14e46:	f7fb feab 	bl	10ba0 <log_0>
		return 0;
   14e4a:	2500      	movs	r5, #0
   14e4c:	e00c      	b.n	14e68 <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   14e4e:	2216      	movs	r2, #22
   14e50:	1cb1      	adds	r1, r6, #2
   14e52:	fb02 7004 	mla	r0, r2, r4, r7
   14e56:	f008 ffe6 	bl	1de26 <memcpy>
	for (i = 0; i < cnt; i++) {
   14e5a:	3401      	adds	r4, #1
   14e5c:	42a5      	cmp	r5, r4
   14e5e:	dcf6      	bgt.n	14e4e <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   14e60:	9801      	ldr	r0, [sp, #4]
   14e62:	f00b f8e3 	bl	2002c <net_buf_unref>
	if (!cnt) {
   14e66:	b11d      	cbz	r5, 14e70 <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   14e68:	4628      	mov	r0, r5
   14e6a:	b002      	add	sp, #8
   14e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14e70:	4b09      	ldr	r3, [pc, #36]	; (14e98 <bt_read_static_addr+0xc4>)
   14e72:	4a0a      	ldr	r2, [pc, #40]	; (14e9c <bt_read_static_addr+0xc8>)
   14e74:	1a9b      	subs	r3, r3, r2
   14e76:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   14e78:	f04f 0100 	mov.w	r1, #0
   14e7c:	2202      	movs	r2, #2
   14e7e:	f362 0102 	bfi	r1, r2, #0, #3
   14e82:	f36f 01c5 	bfc	r1, #3, #3
   14e86:	f363 118f 	bfi	r1, r3, #6, #10
   14e8a:	4807      	ldr	r0, [pc, #28]	; (14ea8 <bt_read_static_addr+0xd4>)
   14e8c:	f7fb fe88 	bl	10ba0 <log_0>
   14e90:	e7ea      	b.n	14e68 <bt_read_static_addr+0x94>
   14e92:	bf00      	nop
   14e94:	200002a8 	.word	0x200002a8
   14e98:	00021fb4 	.word	0x00021fb4
   14e9c:	00021f84 	.word	0x00021f84
   14ea0:	000234b0 	.word	0x000234b0
   14ea4:	000234dc 	.word	0x000234dc
   14ea8:	000234fc 	.word	0x000234fc

00014eac <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14eac:	b510      	push	{r4, lr}
   14eae:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14eb0:	4b17      	ldr	r3, [pc, #92]	; (14f10 <bt_setup_random_id_addr+0x64>)
   14eb2:	79dc      	ldrb	r4, [r3, #7]
   14eb4:	b934      	cbnz	r4, 14ec4 <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14eb6:	2101      	movs	r1, #1
   14eb8:	a802      	add	r0, sp, #8
   14eba:	f7ff ff8b 	bl	14dd4 <bt_read_static_addr>
   14ebe:	4b14      	ldr	r3, [pc, #80]	; (14f10 <bt_setup_random_id_addr+0x64>)
   14ec0:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   14ec2:	b938      	cbnz	r0, 14ed4 <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   14ec4:	2100      	movs	r1, #0
   14ec6:	4608      	mov	r0, r1
   14ec8:	f7ff feb6 	bl	14c38 <bt_id_create>
   14ecc:	4603      	mov	r3, r0
}
   14ece:	4618      	mov	r0, r3
   14ed0:	b008      	add	sp, #32
   14ed2:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14ed4:	4b0e      	ldr	r3, [pc, #56]	; (14f10 <bt_setup_random_id_addr+0x64>)
   14ed6:	79db      	ldrb	r3, [r3, #7]
   14ed8:	42a3      	cmp	r3, r4
   14eda:	d916      	bls.n	14f0a <bt_setup_random_id_addr+0x5e>
   14edc:	2206      	movs	r2, #6
   14ede:	2116      	movs	r1, #22
   14ee0:	ab02      	add	r3, sp, #8
   14ee2:	fb01 3104 	mla	r1, r1, r4, r3
   14ee6:	f10d 0001 	add.w	r0, sp, #1
   14eea:	f008 ff9c 	bl	1de26 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   14eee:	2301      	movs	r3, #1
   14ef0:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   14ef4:	2200      	movs	r2, #0
   14ef6:	4669      	mov	r1, sp
   14ef8:	4620      	mov	r0, r4
   14efa:	f7ff fe65 	bl	14bc8 <id_create>
				if (err) {
   14efe:	4603      	mov	r3, r0
   14f00:	2800      	cmp	r0, #0
   14f02:	d1e4      	bne.n	14ece <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   14f04:	3401      	adds	r4, #1
   14f06:	b2e4      	uxtb	r4, r4
   14f08:	e7e4      	b.n	14ed4 <bt_setup_random_id_addr+0x28>
			return 0;
   14f0a:	2300      	movs	r3, #0
   14f0c:	e7df      	b.n	14ece <bt_setup_random_id_addr+0x22>
   14f0e:	bf00      	nop
   14f10:	200002a8 	.word	0x200002a8

00014f14 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   14f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f16:	460d      	mov	r5, r1
   14f18:	461e      	mov	r6, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];
   14f1a:	7804      	ldrb	r4, [r0, #0]

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   14f1c:	f011 0f01 	tst.w	r1, #1
   14f20:	d027      	beq.n	14f72 <bt_id_set_adv_own_addr+0x5e>
   14f22:	4617      	mov	r7, r2
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14f24:	b142      	cbz	r2, 14f38 <bt_id_set_adv_own_addr+0x24>
   14f26:	f011 0f20 	tst.w	r1, #32
   14f2a:	d005      	beq.n	14f38 <bt_id_set_adv_own_addr+0x24>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
   14f2c:	4b22      	ldr	r3, [pc, #136]	; (14fb8 <bt_id_set_adv_own_addr+0xa4>)
   14f2e:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   14f32:	f013 0f40 	tst.w	r3, #64	; 0x40
   14f36:	d038      	beq.n	14faa <bt_id_set_adv_own_addr+0x96>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14f38:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14f3c:	4a1e      	ldr	r2, [pc, #120]	; (14fb8 <bt_id_set_adv_own_addr+0xa4>)
   14f3e:	5cd3      	ldrb	r3, [r2, r3]
   14f40:	2b01      	cmp	r3, #1
   14f42:	d00d      	beq.n	14f60 <bt_id_set_adv_own_addr+0x4c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   14f44:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14f48:	4b1b      	ldr	r3, [pc, #108]	; (14fb8 <bt_id_set_adv_own_addr+0xa4>)
   14f4a:	5d1b      	ldrb	r3, [r3, r4]
   14f4c:	7033      	strb	r3, [r6, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   14f4e:	b37f      	cbz	r7, 14fb0 <bt_id_set_adv_own_addr+0x9c>
   14f50:	f015 0f20 	tst.w	r5, #32
   14f54:	d02e      	beq.n	14fb4 <bt_id_set_adv_own_addr+0xa0>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   14f56:	f043 0302 	orr.w	r3, r3, #2
   14f5a:	7033      	strb	r3, [r6, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   14f5c:	2000      	movs	r0, #0
   14f5e:	e017      	b.n	14f90 <bt_id_set_adv_own_addr+0x7c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14f60:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   14f64:	4411      	add	r1, r2
   14f66:	3101      	adds	r1, #1
   14f68:	f009 f977 	bl	1e25a <bt_id_set_adv_random_addr>
				if (err) {
   14f6c:	2800      	cmp	r0, #0
   14f6e:	d0e9      	beq.n	14f44 <bt_id_set_adv_own_addr+0x30>
   14f70:	e00e      	b.n	14f90 <bt_id_set_adv_own_addr+0x7c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   14f72:	f011 0f04 	tst.w	r1, #4
   14f76:	d013      	beq.n	14fa0 <bt_id_set_adv_own_addr+0x8c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   14f78:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14f7c:	4a0e      	ldr	r2, [pc, #56]	; (14fb8 <bt_id_set_adv_own_addr+0xa4>)
   14f7e:	5cd3      	ldrb	r3, [r2, r3]
   14f80:	2b01      	cmp	r3, #1
   14f82:	d006      	beq.n	14f92 <bt_id_set_adv_own_addr+0x7e>
	int err = 0;
   14f84:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
   14f86:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14f8a:	4b0b      	ldr	r3, [pc, #44]	; (14fb8 <bt_id_set_adv_own_addr+0xa4>)
   14f8c:	5d1b      	ldrb	r3, [r3, r4]
   14f8e:	7033      	strb	r3, [r6, #0]
}
   14f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   14f92:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   14f96:	4411      	add	r1, r2
   14f98:	3101      	adds	r1, #1
   14f9a:	f009 f95e 	bl	1e25a <bt_id_set_adv_random_addr>
   14f9e:	e7f2      	b.n	14f86 <bt_id_set_adv_own_addr+0x72>
			err = bt_id_set_adv_private_addr(adv);
   14fa0:	f009 f960 	bl	1e264 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   14fa4:	2301      	movs	r3, #1
   14fa6:	7033      	strb	r3, [r6, #0]
		if (err) {
   14fa8:	e7f2      	b.n	14f90 <bt_id_set_adv_own_addr+0x7c>
			return -ENOTSUP;
   14faa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14fae:	e7ef      	b.n	14f90 <bt_id_set_adv_own_addr+0x7c>
	return 0;
   14fb0:	2000      	movs	r0, #0
   14fb2:	e7ed      	b.n	14f90 <bt_id_set_adv_own_addr+0x7c>
   14fb4:	2000      	movs	r0, #0
   14fb6:	e7eb      	b.n	14f90 <bt_id_set_adv_own_addr+0x7c>
   14fb8:	200002a8 	.word	0x200002a8

00014fbc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   14fbc:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14fbe:	4b25      	ldr	r3, [pc, #148]	; (15054 <bt_id_init+0x98>)
   14fc0:	79db      	ldrb	r3, [r3, #7]
   14fc2:	b12b      	cbz	r3, 14fd0 <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   14fc4:	4b23      	ldr	r3, [pc, #140]	; (15054 <bt_id_init+0x98>)
   14fc6:	79db      	ldrb	r3, [r3, #7]
   14fc8:	b1c3      	cbz	r3, 14ffc <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   14fca:	2400      	movs	r4, #0
}
   14fcc:	4620      	mov	r0, r4
   14fce:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   14fd0:	f7ff feec 	bl	14dac <bt_setup_public_id_addr>
		if (err) {
   14fd4:	4604      	mov	r4, r0
   14fd6:	2800      	cmp	r0, #0
   14fd8:	d0f4      	beq.n	14fc4 <bt_id_init+0x8>
   14fda:	4b1f      	ldr	r3, [pc, #124]	; (15058 <bt_id_init+0x9c>)
   14fdc:	4a1f      	ldr	r2, [pc, #124]	; (1505c <bt_id_init+0xa0>)
   14fde:	1a9b      	subs	r3, r3, r2
   14fe0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   14fe2:	f04f 0100 	mov.w	r1, #0
   14fe6:	2201      	movs	r2, #1
   14fe8:	f362 0102 	bfi	r1, r2, #0, #3
   14fec:	f36f 01c5 	bfc	r1, #3, #3
   14ff0:	f363 118f 	bfi	r1, r3, #6, #10
   14ff4:	481a      	ldr	r0, [pc, #104]	; (15060 <bt_id_init+0xa4>)
   14ff6:	f7fb fdd3 	bl	10ba0 <log_0>
			return err;
   14ffa:	e7e7      	b.n	14fcc <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   14ffc:	f7ff ff56 	bl	14eac <bt_setup_random_id_addr>
		if (err) {
   15000:	4604      	mov	r4, r0
   15002:	b9b0      	cbnz	r0, 15032 <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   15004:	4817      	ldr	r0, [pc, #92]	; (15064 <bt_id_init+0xa8>)
   15006:	f7ff fdb1 	bl	14b6c <set_random_address>
		if (err) {
   1500a:	4604      	mov	r4, r0
   1500c:	2800      	cmp	r0, #0
   1500e:	d0dd      	beq.n	14fcc <bt_id_init+0x10>
   15010:	4b11      	ldr	r3, [pc, #68]	; (15058 <bt_id_init+0x9c>)
   15012:	4a12      	ldr	r2, [pc, #72]	; (1505c <bt_id_init+0xa0>)
   15014:	1a9b      	subs	r3, r3, r2
   15016:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   15018:	f04f 0100 	mov.w	r1, #0
   1501c:	2201      	movs	r2, #1
   1501e:	f362 0102 	bfi	r1, r2, #0, #3
   15022:	f36f 01c5 	bfc	r1, #3, #3
   15026:	f363 118f 	bfi	r1, r3, #6, #10
   1502a:	480f      	ldr	r0, [pc, #60]	; (15068 <bt_id_init+0xac>)
   1502c:	f7fb fdb8 	bl	10ba0 <log_0>
			return err;
   15030:	e7cc      	b.n	14fcc <bt_id_init+0x10>
   15032:	4b09      	ldr	r3, [pc, #36]	; (15058 <bt_id_init+0x9c>)
   15034:	4a09      	ldr	r2, [pc, #36]	; (1505c <bt_id_init+0xa0>)
   15036:	1a9b      	subs	r3, r3, r2
   15038:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   1503a:	f04f 0100 	mov.w	r1, #0
   1503e:	2201      	movs	r2, #1
   15040:	f362 0102 	bfi	r1, r2, #0, #3
   15044:	f36f 01c5 	bfc	r1, #3, #3
   15048:	f363 118f 	bfi	r1, r3, #6, #10
   1504c:	4804      	ldr	r0, [pc, #16]	; (15060 <bt_id_init+0xa4>)
   1504e:	f7fb fda7 	bl	10ba0 <log_0>
			return err;
   15052:	e7bb      	b.n	14fcc <bt_id_init+0x10>
   15054:	200002a8 	.word	0x200002a8
   15058:	00021fb4 	.word	0x00021fb4
   1505c:	00021f84 	.word	0x00021f84
   15060:	00023528 	.word	0x00023528
   15064:	200002a9 	.word	0x200002a9
   15068:	00023548 	.word	0x00023548

0001506c <adv_new_legacy>:
	bt_dev.adv = adv_new();
	return bt_dev.adv;
#else
	return &bt_dev.adv;
#endif
}
   1506c:	4800      	ldr	r0, [pc, #0]	; (15070 <adv_new_legacy+0x4>)
   1506e:	4770      	bx	lr
   15070:	200002c0 	.word	0x200002c0

00015074 <set_data_add_complete>:
	size_t len;
};

static int set_data_add_complete(uint8_t *set_data, uint8_t set_data_len_max,
			const struct bt_ad *ad, size_t ad_len, uint8_t *data_len)
{
   15074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15078:	b083      	sub	sp, #12
   1507a:	4605      	mov	r5, r0
   1507c:	4688      	mov	r8, r1
   1507e:	9201      	str	r2, [sp, #4]
   15080:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;

	for (size_t i = 0; i < ad_len; i++) {
   15082:	f04f 0a00 	mov.w	sl, #0
	uint8_t set_data_len = 0;
   15086:	4653      	mov	r3, sl
	for (size_t i = 0; i < ad_len; i++) {
   15088:	9a00      	ldr	r2, [sp, #0]
   1508a:	4552      	cmp	r2, sl
   1508c:	d94b      	bls.n	15126 <set_data_add_complete+0xb2>
		const struct bt_data *data = ad[i].data;
   1508e:	9a01      	ldr	r2, [sp, #4]
   15090:	eb02 09ca 	add.w	r9, r2, sl, lsl #3
   15094:	f852 703a 	ldr.w	r7, [r2, sl, lsl #3]

		for (size_t j = 0; j < ad[i].len; j++) {
   15098:	2400      	movs	r4, #0
   1509a:	e016      	b.n	150ca <set_data_add_complete+0x56>
				      shortened_len > 0)) {
					BT_ERR("Too big advertising data");
					return -EINVAL;
				}

				type = BT_DATA_NAME_SHORTENED;
   1509c:	f04f 0c08 	mov.w	ip, #8
				len = shortened_len;
			}

			set_data[set_data_len++] = len + 1;
   150a0:	b2d6      	uxtb	r6, r2
   150a2:	1c59      	adds	r1, r3, #1
   150a4:	b2c9      	uxtb	r1, r1
   150a6:	f106 0b01 	add.w	fp, r6, #1
   150aa:	f805 b00e 	strb.w	fp, [r5, lr]
			set_data[set_data_len++] = type;
   150ae:	3302      	adds	r3, #2
   150b0:	fa5f fb83 	uxtb.w	fp, r3
   150b4:	f805 c001 	strb.w	ip, [r5, r1]

			memcpy(&set_data[set_data_len], data[j].data, len);
   150b8:	6841      	ldr	r1, [r0, #4]
   150ba:	eb05 000b 	add.w	r0, r5, fp
   150be:	f008 feb2 	bl	1de26 <memcpy>
			set_data_len += len;
   150c2:	eb0b 0306 	add.w	r3, fp, r6
   150c6:	b2db      	uxtb	r3, r3
		for (size_t j = 0; j < ad[i].len; j++) {
   150c8:	3401      	adds	r4, #1
   150ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
   150ce:	4294      	cmp	r4, r2
   150d0:	d226      	bcs.n	15120 <set_data_add_complete+0xac>
			size_t len = data[j].data_len;
   150d2:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   150d6:	7842      	ldrb	r2, [r0, #1]
			uint8_t type = data[j].type;
   150d8:	f817 c034 	ldrb.w	ip, [r7, r4, lsl #3]
			if ((set_data_len + len + 2) > set_data_len_max) {
   150dc:	469e      	mov	lr, r3
   150de:	1899      	adds	r1, r3, r2
   150e0:	3102      	adds	r1, #2
   150e2:	4541      	cmp	r1, r8
   150e4:	d9dc      	bls.n	150a0 <set_data_add_complete+0x2c>
				ssize_t shortened_len = set_data_len_max -
   150e6:	eba8 0203 	sub.w	r2, r8, r3
   150ea:	3a02      	subs	r2, #2
				if (!(type == BT_DATA_NAME_COMPLETE &&
   150ec:	f1bc 0f09 	cmp.w	ip, #9
   150f0:	d101      	bne.n	150f6 <set_data_add_complete+0x82>
   150f2:	2a00      	cmp	r2, #0
   150f4:	dcd2      	bgt.n	1509c <set_data_add_complete+0x28>
   150f6:	4b0e      	ldr	r3, [pc, #56]	; (15130 <set_data_add_complete+0xbc>)
   150f8:	4a0e      	ldr	r2, [pc, #56]	; (15134 <set_data_add_complete+0xc0>)
   150fa:	1a9b      	subs	r3, r3, r2
   150fc:	08db      	lsrs	r3, r3, #3
					BT_ERR("Too big advertising data");
   150fe:	f04f 0100 	mov.w	r1, #0
   15102:	2201      	movs	r2, #1
   15104:	f362 0102 	bfi	r1, r2, #0, #3
   15108:	f36f 01c5 	bfc	r1, #3, #3
   1510c:	f363 118f 	bfi	r1, r3, #6, #10
   15110:	4809      	ldr	r0, [pc, #36]	; (15138 <set_data_add_complete+0xc4>)
   15112:	f7fb fd45 	bl	10ba0 <log_0>
					return -EINVAL;
   15116:	f06f 0015 	mvn.w	r0, #21
		}
	}

	*data_len = set_data_len;
	return 0;
}
   1511a:	b003      	add	sp, #12
   1511c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (size_t i = 0; i < ad_len; i++) {
   15120:	f10a 0a01 	add.w	sl, sl, #1
   15124:	e7b0      	b.n	15088 <set_data_add_complete+0x14>
	*data_len = set_data_len;
   15126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15128:	7013      	strb	r3, [r2, #0]
	return 0;
   1512a:	2000      	movs	r0, #0
   1512c:	e7f5      	b.n	1511a <set_data_add_complete+0xa6>
   1512e:	bf00      	nop
   15130:	00021f84 	.word	0x00021f84
   15134:	00021f84 	.word	0x00021f84
   15138:	00023570 	.word	0x00023570

0001513c <valid_adv_ext_param>:
{
   1513c:	b510      	push	{r4, lr}
   1513e:	b082      	sub	sp, #8
   15140:	4604      	mov	r4, r0
	if (param->id >= bt_dev.id_count ||
   15142:	7800      	ldrb	r0, [r0, #0]
   15144:	4b23      	ldr	r3, [pc, #140]	; (151d4 <valid_adv_ext_param+0x98>)
   15146:	79db      	ldrb	r3, [r3, #7]
   15148:	4298      	cmp	r0, r3
   1514a:	d302      	bcc.n	15152 <valid_adv_ext_param+0x16>
		return false;
   1514c:	2000      	movs	r0, #0
}
   1514e:	b002      	add	sp, #8
   15150:	bd10      	pop	{r4, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   15152:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15156:	2300      	movs	r3, #0
   15158:	9300      	str	r3, [sp, #0]
   1515a:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1515e:	2207      	movs	r2, #7
   15160:	4669      	mov	r1, sp
   15162:	4b1c      	ldr	r3, [pc, #112]	; (151d4 <valid_adv_ext_param+0x98>)
   15164:	4418      	add	r0, r3
   15166:	f008 fe47 	bl	1ddf8 <memcmp>
	if (param->id >= bt_dev.id_count ||
   1516a:	2800      	cmp	r0, #0
   1516c:	d0ee      	beq.n	1514c <valid_adv_ext_param+0x10>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1516e:	6863      	ldr	r3, [r4, #4]
   15170:	f013 0f01 	tst.w	r3, #1
   15174:	d107      	bne.n	15186 <valid_adv_ext_param+0x4a>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15176:	4a17      	ldr	r2, [pc, #92]	; (151d4 <valid_adv_ext_param+0x98>)
   15178:	f892 2068 	ldrb.w	r2, [r2, #104]	; 0x68
   1517c:	2a08      	cmp	r2, #8
   1517e:	d802      	bhi.n	15186 <valid_adv_ext_param+0x4a>
		    param->interval_min < 0x00a0) {
   15180:	68a2      	ldr	r2, [r4, #8]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   15182:	2a9f      	cmp	r2, #159	; 0x9f
   15184:	d91b      	bls.n	151be <valid_adv_ext_param+0x82>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   15186:	f013 0f30 	tst.w	r3, #48	; 0x30
   1518a:	d001      	beq.n	15190 <valid_adv_ext_param+0x54>
	    !param->peer) {
   1518c:	6922      	ldr	r2, [r4, #16]
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   1518e:	b1c2      	cbz	r2, 151c2 <valid_adv_ext_param+0x86>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15190:	f013 0f10 	tst.w	r3, #16
   15194:	d108      	bne.n	151a8 <valid_adv_ext_param+0x6c>
	    !param->peer) {
   15196:	6922      	ldr	r2, [r4, #16]
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15198:	b132      	cbz	r2, 151a8 <valid_adv_ext_param+0x6c>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   1519a:	f403 3360 	and.w	r3, r3, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   1519e:	f5b3 3f60 	cmp.w	r3, #229376	; 0x38000
   151a2:	d014      	beq.n	151ce <valid_adv_ext_param+0x92>
	return true;
   151a4:	2001      	movs	r0, #1
   151a6:	e7d2      	b.n	1514e <valid_adv_ext_param+0x12>
		if (param->interval_min > param->interval_max ||
   151a8:	68a2      	ldr	r2, [r4, #8]
   151aa:	68e1      	ldr	r1, [r4, #12]
   151ac:	428a      	cmp	r2, r1
   151ae:	d80a      	bhi.n	151c6 <valid_adv_ext_param+0x8a>
   151b0:	2a1f      	cmp	r2, #31
   151b2:	d90a      	bls.n	151ca <valid_adv_ext_param+0x8e>
		    param->interval_min < 0x0020 ||
   151b4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   151b8:	d9ef      	bls.n	1519a <valid_adv_ext_param+0x5e>
			return false;
   151ba:	2000      	movs	r0, #0
   151bc:	e7c7      	b.n	1514e <valid_adv_ext_param+0x12>
			return false;
   151be:	2000      	movs	r0, #0
   151c0:	e7c5      	b.n	1514e <valid_adv_ext_param+0x12>
		return false;
   151c2:	2000      	movs	r0, #0
   151c4:	e7c3      	b.n	1514e <valid_adv_ext_param+0x12>
			return false;
   151c6:	2000      	movs	r0, #0
   151c8:	e7c1      	b.n	1514e <valid_adv_ext_param+0x12>
   151ca:	2000      	movs	r0, #0
   151cc:	e7bf      	b.n	1514e <valid_adv_ext_param+0x12>
		return false;
   151ce:	2000      	movs	r0, #0
   151d0:	e7bd      	b.n	1514e <valid_adv_ext_param+0x12>
   151d2:	bf00      	nop
   151d4:	200002a8 	.word	0x200002a8

000151d8 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   151d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   151da:	b085      	sub	sp, #20
   151dc:	4604      	mov	r4, r0
   151de:	460f      	mov	r7, r1
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   151e0:	4605      	mov	r5, r0
   151e2:	f815 2b09 	ldrb.w	r2, [r5], #9
   151e6:	4b1f      	ldr	r3, [pc, #124]	; (15264 <le_adv_start_add_conn+0x8c>)
   151e8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   151ec:	2300      	movs	r3, #0
   151ee:	9300      	str	r3, [sp, #0]
   151f0:	f8cd 3003 	str.w	r3, [sp, #3]
   151f4:	2207      	movs	r2, #7
   151f6:	4669      	mov	r1, sp
   151f8:	4628      	mov	r0, r5
   151fa:	f008 fdfd 	bl	1ddf8 <memcmp>
   151fe:	b9b8      	cbnz	r0, 15230 <le_adv_start_add_conn+0x58>
   15200:	4606      	mov	r6, r0
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15202:	4b19      	ldr	r3, [pc, #100]	; (15268 <le_adv_start_add_conn+0x90>)
   15204:	e893 0003 	ldmia.w	r3, {r0, r1}
   15208:	9002      	str	r0, [sp, #8]
   1520a:	f8ad 100c 	strh.w	r1, [sp, #12]
   1520e:	0c09      	lsrs	r1, r1, #16
   15210:	f88d 100e 	strb.w	r1, [sp, #14]
   15214:	a902      	add	r1, sp, #8
   15216:	7820      	ldrb	r0, [r4, #0]
   15218:	f009 fb49 	bl	1e8ae <bt_conn_add_le>
		if (!conn) {
   1521c:	4604      	mov	r4, r0
   1521e:	b120      	cbz	r0, 1522a <le_adv_start_add_conn+0x52>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   15220:	2104      	movs	r1, #4
   15222:	f000 fd65 	bl	15cf0 <bt_conn_set_state>
		*out_conn = conn;
   15226:	603c      	str	r4, [r7, #0]
		return 0;
   15228:	e012      	b.n	15250 <le_adv_start_add_conn+0x78>
			return -ENOMEM;
   1522a:	f06f 060b 	mvn.w	r6, #11
   1522e:	e00f      	b.n	15250 <le_adv_start_add_conn+0x78>
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   15230:	4629      	mov	r1, r5
   15232:	7820      	ldrb	r0, [r4, #0]
   15234:	f000 ff3e 	bl	160b4 <bt_conn_exists_le>
   15238:	b968      	cbnz	r0, 15256 <le_adv_start_add_conn+0x7e>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   1523a:	4629      	mov	r1, r5
   1523c:	7820      	ldrb	r0, [r4, #0]
   1523e:	f009 fb36 	bl	1e8ae <bt_conn_add_le>
	if (!conn) {
   15242:	4604      	mov	r4, r0
   15244:	b150      	cbz	r0, 1525c <le_adv_start_add_conn+0x84>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   15246:	2105      	movs	r1, #5
   15248:	f000 fd52 	bl	15cf0 <bt_conn_set_state>
	*out_conn = conn;
   1524c:	603c      	str	r4, [r7, #0]
	return 0;
   1524e:	2600      	movs	r6, #0
}
   15250:	4630      	mov	r0, r6
   15252:	b005      	add	sp, #20
   15254:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   15256:	f06f 0615 	mvn.w	r6, #21
   1525a:	e7f9      	b.n	15250 <le_adv_start_add_conn+0x78>
		return -ENOMEM;
   1525c:	f06f 060b 	mvn.w	r6, #11
   15260:	e7f6      	b.n	15250 <le_adv_start_add_conn+0x78>
   15262:	bf00      	nop
   15264:	200002a8 	.word	0x200002a8
   15268:	00022154 	.word	0x00022154

0001526c <le_adv_stop_free_conn>:

static void le_adv_stop_free_conn(const struct bt_le_ext_adv *adv, uint8_t status)
{
   1526c:	b570      	push	{r4, r5, r6, lr}
   1526e:	b084      	sub	sp, #16
   15270:	4604      	mov	r4, r0
   15272:	460e      	mov	r6, r1
	struct bt_conn *conn;

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15274:	f100 0509 	add.w	r5, r0, #9
   15278:	2300      	movs	r3, #0
   1527a:	9300      	str	r3, [sp, #0]
   1527c:	f8cd 3003 	str.w	r3, [sp, #3]
   15280:	2207      	movs	r2, #7
   15282:	4669      	mov	r1, sp
   15284:	4628      	mov	r0, r5
   15286:	f008 fdb7 	bl	1ddf8 <memcmp>
   1528a:	b9c8      	cbnz	r0, 152c0 <le_adv_stop_free_conn+0x54>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1528c:	4b10      	ldr	r3, [pc, #64]	; (152d0 <le_adv_stop_free_conn+0x64>)
   1528e:	e893 0003 	ldmia.w	r3, {r0, r1}
   15292:	9002      	str	r0, [sp, #8]
   15294:	f8ad 100c 	strh.w	r1, [sp, #12]
   15298:	0c09      	lsrs	r1, r1, #16
   1529a:	f88d 100e 	strb.w	r1, [sp, #14]
   1529e:	2204      	movs	r2, #4
   152a0:	a902      	add	r1, sp, #8
   152a2:	7820      	ldrb	r0, [r4, #0]
   152a4:	f000 ff5a 	bl	1615c <bt_conn_lookup_state_le>
   152a8:	4604      	mov	r4, r0
	} else {
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
					       BT_CONN_CONNECT_DIR_ADV);
	}

	if (conn) {
   152aa:	b13c      	cbz	r4, 152bc <le_adv_stop_free_conn+0x50>
		conn->err = status;
   152ac:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   152ae:	2100      	movs	r1, #0
   152b0:	4620      	mov	r0, r4
   152b2:	f000 fd1d 	bl	15cf0 <bt_conn_set_state>
		bt_conn_unref(conn);
   152b6:	4620      	mov	r0, r4
   152b8:	f009 faa6 	bl	1e808 <bt_conn_unref>
	}
}
   152bc:	b004      	add	sp, #16
   152be:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   152c0:	2205      	movs	r2, #5
   152c2:	4629      	mov	r1, r5
   152c4:	7820      	ldrb	r0, [r4, #0]
   152c6:	f000 ff49 	bl	1615c <bt_conn_lookup_state_le>
   152ca:	4604      	mov	r4, r0
   152cc:	e7ed      	b.n	152aa <le_adv_stop_free_conn+0x3e>
   152ce:	bf00      	nop
   152d0:	00022154 	.word	0x00022154

000152d4 <bt_le_adv_lookup_legacy>:
}
   152d4:	4800      	ldr	r0, [pc, #0]	; (152d8 <bt_le_adv_lookup_legacy+0x4>)
   152d6:	4770      	bx	lr
   152d8:	200002c0 	.word	0x200002c0

000152dc <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   152dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152e0:	b08f      	sub	sp, #60	; 0x3c
   152e2:	9205      	str	r2, [sp, #20]
   152e4:	4698      	mov	r8, r3
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
   152e6:	2300      	movs	r3, #0
   152e8:	9307      	str	r3, [sp, #28]
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   152ea:	690f      	ldr	r7, [r1, #16]
   152ec:	ebb7 0b03 	subs.w	fp, r7, r3
   152f0:	bf18      	it	ne
   152f2:	f04f 0b01 	movne.w	fp, #1
   152f6:	f3bf 8f5b 	dmb	ish
   152fa:	4bc5      	ldr	r3, [pc, #788]	; (15610 <bt_le_adv_start_legacy+0x334>)
   152fc:	681b      	ldr	r3, [r3, #0]
   152fe:	f3bf 8f5b 	dmb	ish
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15302:	f013 0f02 	tst.w	r3, #2
   15306:	f000 81c1 	beq.w	1568c <bt_le_adv_start_legacy+0x3b0>
   1530a:	4605      	mov	r5, r0
   1530c:	460c      	mov	r4, r1
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1530e:	4608      	mov	r0, r1
   15310:	f009 f8b6 	bl	1e480 <valid_adv_param>
   15314:	2800      	cmp	r0, #0
   15316:	f000 81bc 	beq.w	15692 <bt_le_adv_start_legacy+0x3b6>
		return -EINVAL;
	}

	if (!bt_id_adv_random_addr_check(param)) {
   1531a:	4620      	mov	r0, r4
   1531c:	f008 ffb7 	bl	1e28e <bt_id_adv_random_addr_check>
   15320:	4682      	mov	sl, r0
   15322:	2800      	cmp	r0, #0
   15324:	f000 81b8 	beq.w	15698 <bt_le_adv_start_legacy+0x3bc>
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15328:	f105 0610 	add.w	r6, r5, #16
   1532c:	f3bf 8f5b 	dmb	ish
   15330:	692b      	ldr	r3, [r5, #16]
   15332:	f3bf 8f5b 	dmb	ish
   15336:	f013 0f40 	tst.w	r3, #64	; 0x40
   1533a:	f040 81b0 	bne.w	1569e <bt_le_adv_start_legacy+0x3c2>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
   1533e:	220f      	movs	r2, #15
   15340:	2100      	movs	r1, #0
   15342:	a808      	add	r0, sp, #32
   15344:	f008 fd93 	bl	1de6e <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15348:	68a3      	ldr	r3, [r4, #8]
   1534a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   1534e:	68e3      	ldr	r3, [r4, #12]
   15350:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   15354:	f8d4 9004 	ldr.w	r9, [r4, #4]
   15358:	4648      	mov	r0, r9
   1535a:	f008 ffba 	bl	1e2d2 <get_adv_channel_map>
   1535e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	set_param.filter_policy = get_filter_policy(param->options);
   15362:	4648      	mov	r0, r9
   15364:	f008 ffb3 	bl	1e2ce <get_filter_policy>
   15368:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e

	if (adv->id != param->id) {
   1536c:	782a      	ldrb	r2, [r5, #0]
   1536e:	7823      	ldrb	r3, [r4, #0]
   15370:	429a      	cmp	r2, r3
   15372:	d00c      	beq.n	1538e <bt_le_adv_start_legacy+0xb2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15374:	4ba6      	ldr	r3, [pc, #664]	; (15610 <bt_le_adv_start_legacy+0x334>)
   15376:	f3bf 8f5b 	dmb	ish
   1537a:	e853 2f00 	ldrex	r2, [r3]
   1537e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   15382:	e843 2100 	strex	r1, r2, [r3]
   15386:	2900      	cmp	r1, #0
   15388:	d1f7      	bne.n	1537a <bt_le_adv_start_legacy+0x9e>
   1538a:	f3bf 8f5b 	dmb	ish
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
   1538e:	7823      	ldrb	r3, [r4, #0]
   15390:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   15392:	4aa0      	ldr	r2, [pc, #640]	; (15614 <bt_le_adv_start_legacy+0x338>)
   15394:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67

	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15398:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   1539c:	465a      	mov	r2, fp
   1539e:	6861      	ldr	r1, [r4, #4]
   153a0:	4628      	mov	r0, r5
   153a2:	f7ff fdb7 	bl	14f14 <bt_id_set_adv_own_addr>
				     &set_param.own_addr_type);
	if (err) {
   153a6:	4681      	mov	r9, r0
   153a8:	2800      	cmp	r0, #0
   153aa:	f040 80f1 	bne.w	15590 <bt_le_adv_start_legacy+0x2b4>
		return err;
	}

	if (dir_adv) {
   153ae:	b1ef      	cbz	r7, 153ec <bt_le_adv_start_legacy+0x110>
	memcpy(dst, src, sizeof(*dst));
   153b0:	2207      	movs	r2, #7
   153b2:	6921      	ldr	r1, [r4, #16]
   153b4:	f105 0009 	add.w	r0, r5, #9
   153b8:	f008 fd35 	bl	1de26 <memcpy>
		bt_addr_le_copy(&adv->target_addr, param->peer);
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
	}

	name_type = get_adv_name_type_param(param);
   153bc:	4620      	mov	r0, r4
   153be:	f009 f870 	bl	1e4a2 <get_adv_name_type_param>
   153c2:	4683      	mov	fp, r0

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   153c4:	6863      	ldr	r3, [r4, #4]
   153c6:	f013 0f01 	tst.w	r3, #1
   153ca:	d022      	beq.n	15412 <bt_le_adv_start_legacy+0x136>
		if (dir_adv) {
   153cc:	b1ef      	cbz	r7, 1540a <bt_le_adv_start_legacy+0x12e>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
   153ce:	f013 0f10 	tst.w	r3, #16
   153d2:	d016      	beq.n	15402 <bt_le_adv_start_legacy+0x126>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   153d4:	2304      	movs	r3, #4
   153d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   153da:	2207      	movs	r2, #7
   153dc:	6921      	ldr	r1, [r4, #16]
   153de:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   153e2:	f008 fd20 	bl	1de26 <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   153e6:	f04f 0a00 	mov.w	sl, #0
}
   153ea:	e01a      	b.n	15422 <bt_le_adv_start_legacy+0x146>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   153ec:	2300      	movs	r3, #0
   153ee:	930c      	str	r3, [sp, #48]	; 0x30
   153f0:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
	memcpy(dst, src, sizeof(*dst));
   153f4:	2207      	movs	r2, #7
   153f6:	a90c      	add	r1, sp, #48	; 0x30
   153f8:	f105 0009 	add.w	r0, r5, #9
   153fc:	f008 fd13 	bl	1de26 <memcpy>
   15400:	e7dc      	b.n	153bc <bt_le_adv_start_legacy+0xe0>
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   15402:	2301      	movs	r3, #1
   15404:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15408:	e7e7      	b.n	153da <bt_le_adv_start_legacy+0xfe>
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
		} else {
			scannable = true;
			set_param.type = BT_HCI_ADV_IND;
   1540a:	2300      	movs	r3, #0
   1540c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   15410:	e007      	b.n	15422 <bt_le_adv_start_legacy+0x146>
		}
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15412:	f413 7f00 	tst.w	r3, #512	; 0x200
   15416:	d101      	bne.n	1541c <bt_le_adv_start_legacy+0x140>
   15418:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1541a:	b35b      	cbz	r3, 15474 <bt_le_adv_start_legacy+0x198>
		   (name_type == ADV_NAME_TYPE_SD)) {
		scannable = true;
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1541c:	2302      	movs	r3, #2
   1541e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	} else {
		set_param.type = BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   15422:	210f      	movs	r1, #15
   15424:	f242 0006 	movw	r0, #8198	; 0x2006
   15428:	f7fe faa0 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1542c:	4681      	mov	r9, r0
   1542e:	2800      	cmp	r0, #0
   15430:	f000 8138 	beq.w	156a4 <bt_le_adv_start_legacy+0x3c8>
   15434:	220f      	movs	r2, #15
   15436:	a908      	add	r1, sp, #32
   15438:	3008      	adds	r0, #8
   1543a:	f00a fe47 	bl	200cc <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   1543e:	2200      	movs	r2, #0
   15440:	4649      	mov	r1, r9
   15442:	f242 0006 	movw	r0, #8198	; 0x2006
   15446:	f7fe facd 	bl	139e4 <bt_hci_cmd_send_sync>
	if (err) {
   1544a:	4681      	mov	r9, r0
   1544c:	2800      	cmp	r0, #0
   1544e:	f040 809f 	bne.w	15590 <bt_le_adv_start_legacy+0x2b4>
		return err;
	}

	if (!dir_adv) {
   15452:	b1bf      	cbz	r7, 15484 <bt_le_adv_start_legacy+0x1a8>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15454:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15456:	f013 0f01 	tst.w	r3, #1
   1545a:	d02b      	beq.n	154b4 <bt_le_adv_start_legacy+0x1d8>
		err = le_adv_start_add_conn(adv, &conn);
   1545c:	a907      	add	r1, sp, #28
   1545e:	4628      	mov	r0, r5
   15460:	f7ff feba 	bl	151d8 <le_adv_start_add_conn>
		if (err) {
   15464:	b330      	cbz	r0, 154b4 <bt_le_adv_start_legacy+0x1d8>
			if (err == -ENOMEM && !dir_adv &&
   15466:	f110 0f0c 	cmn.w	r0, #12
   1546a:	f040 811e 	bne.w	156aa <bt_le_adv_start_legacy+0x3ce>
   1546e:	b1df      	cbz	r7, 154a8 <bt_le_adv_start_legacy+0x1cc>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
				goto set_adv_state;
			}

			return err;
   15470:	4681      	mov	r9, r0
   15472:	e08d      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   15474:	2802      	cmp	r0, #2
   15476:	d0d1      	beq.n	1541c <bt_le_adv_start_legacy+0x140>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   15478:	2303      	movs	r3, #3
   1547a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bool dir_adv = (param->peer != NULL), scannable = false;
   1547e:	f04f 0a00 	mov.w	sl, #0
   15482:	e7ce      	b.n	15422 <bt_le_adv_start_legacy+0x146>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   15484:	f8cd b00c 	str.w	fp, [sp, #12]
   15488:	f8cd a008 	str.w	sl, [sp, #8]
   1548c:	2300      	movs	r3, #0
   1548e:	9301      	str	r3, [sp, #4]
   15490:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15492:	9300      	str	r3, [sp, #0]
   15494:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15496:	4642      	mov	r2, r8
   15498:	9905      	ldr	r1, [sp, #20]
   1549a:	4628      	mov	r0, r5
   1549c:	f008 ff65 	bl	1e36a <le_adv_update>
		if (err) {
   154a0:	2800      	cmp	r0, #0
   154a2:	d0d7      	beq.n	15454 <bt_le_adv_start_legacy+0x178>
			return err;
   154a4:	4681      	mov	r9, r0
   154a6:	e073      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   154a8:	6862      	ldr	r2, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   154aa:	f012 0f02 	tst.w	r2, #2
   154ae:	d00c      	beq.n	154ca <bt_le_adv_start_legacy+0x1ee>
			return err;
   154b0:	4681      	mov	r9, r0
   154b2:	e06d      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
		}
	}

	err = bt_le_adv_set_enable(adv, true);
   154b4:	2101      	movs	r1, #1
   154b6:	4628      	mov	r0, r5
   154b8:	f009 f82f 	bl	1e51a <bt_le_adv_set_enable>
	if (err) {
   154bc:	4605      	mov	r5, r0
   154be:	2800      	cmp	r0, #0
   154c0:	d16a      	bne.n	15598 <bt_le_adv_start_legacy+0x2bc>
		}

		return err;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   154c2:	9807      	ldr	r0, [sp, #28]
   154c4:	b108      	cbz	r0, 154ca <bt_le_adv_start_legacy+0x1ee>
		/* If undirected connectable advertiser we have created a
		 * connection object that we don't yet give to the application.
		 * Since we don't give the application a reference to manage in
		 * this case, we need to release this reference here
		 */
		bt_conn_unref(conn);
   154c6:	f009 f99f 	bl	1e808 <bt_conn_unref>
	}

set_adv_state:
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   154ca:	2f00      	cmp	r7, #0
   154cc:	d07e      	beq.n	155cc <bt_le_adv_start_legacy+0x2f0>
   154ce:	464b      	mov	r3, r9
	if (val) {
   154d0:	f013 0f01 	tst.w	r3, #1
   154d4:	f000 8082 	beq.w	155dc <bt_le_adv_start_legacy+0x300>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   154d8:	f3bf 8f5b 	dmb	ish
   154dc:	e856 3f00 	ldrex	r3, [r6]
   154e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   154e4:	e846 3200 	strex	r2, r3, [r6]
   154e8:	2a00      	cmp	r2, #0
   154ea:	d1f7      	bne.n	154dc <bt_le_adv_start_legacy+0x200>
   154ec:	f3bf 8f5b 	dmb	ish
   154f0:	f1bb 0f01 	cmp.w	fp, #1
   154f4:	d17f      	bne.n	155f6 <bt_le_adv_start_legacy+0x31a>
   154f6:	f3bf 8f5b 	dmb	ish
   154fa:	e856 3f00 	ldrex	r3, [r6]
   154fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   15502:	e846 3200 	strex	r2, r3, [r6]
   15506:	2a00      	cmp	r2, #0
   15508:	d1f7      	bne.n	154fa <bt_le_adv_start_legacy+0x21e>
   1550a:	f3bf 8f5b 	dmb	ish
   1550e:	f1bb 0f02 	cmp.w	fp, #2
   15512:	f040 8087 	bne.w	15624 <bt_le_adv_start_legacy+0x348>
   15516:	f3bf 8f5b 	dmb	ish
   1551a:	e856 3f00 	ldrex	r3, [r6]
   1551e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   15522:	e846 3200 	strex	r2, r3, [r6]
   15526:	2a00      	cmp	r2, #0
   15528:	d1f7      	bne.n	1551a <bt_le_adv_start_legacy+0x23e>
   1552a:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
			  name_type == ADV_NAME_TYPE_SD);

	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
			  param->options & BT_LE_ADV_OPT_CONNECTABLE);
   1552e:	6863      	ldr	r3, [r4, #4]
   15530:	f013 0f01 	tst.w	r3, #1
   15534:	f000 8083 	beq.w	1563e <bt_le_adv_start_legacy+0x362>
   15538:	f3bf 8f5b 	dmb	ish
   1553c:	e856 3f00 	ldrex	r3, [r6]
   15540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15544:	e846 3200 	strex	r2, r3, [r6]
   15548:	2a00      	cmp	r2, #0
   1554a:	d1f7      	bne.n	1553c <bt_le_adv_start_legacy+0x260>
   1554c:	f3bf 8f5b 	dmb	ish
   15550:	f1ba 0f00 	cmp.w	sl, #0
   15554:	f000 8080 	beq.w	15658 <bt_le_adv_start_legacy+0x37c>
   15558:	f3bf 8f5b 	dmb	ish
   1555c:	e856 3f00 	ldrex	r3, [r6]
   15560:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   15564:	e846 3200 	strex	r2, r3, [r6]
   15568:	2a00      	cmp	r2, #0
   1556a:	d1f7      	bne.n	1555c <bt_le_adv_start_legacy+0x280>
   1556c:	f3bf 8f5b 	dmb	ish

	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);
   15570:	6863      	ldr	r3, [r4, #4]
   15572:	f013 0f04 	tst.w	r3, #4
   15576:	d07c      	beq.n	15672 <bt_le_adv_start_legacy+0x396>
   15578:	f3bf 8f5b 	dmb	ish
   1557c:	e856 3f00 	ldrex	r3, [r6]
   15580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   15584:	e846 3200 	strex	r2, r3, [r6]
   15588:	2a00      	cmp	r2, #0
   1558a:	d1f7      	bne.n	1557c <bt_le_adv_start_legacy+0x2a0>
   1558c:	f3bf 8f5b 	dmb	ish

	return 0;
}
   15590:	4648      	mov	r0, r9
   15592:	b00f      	add	sp, #60	; 0x3c
   15594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15598:	4b1f      	ldr	r3, [pc, #124]	; (15618 <bt_le_adv_start_legacy+0x33c>)
   1559a:	4a20      	ldr	r2, [pc, #128]	; (1561c <bt_le_adv_start_legacy+0x340>)
   1559c:	1a9b      	subs	r3, r3, r2
   1559e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to start advertiser");
   155a0:	f04f 0100 	mov.w	r1, #0
   155a4:	2201      	movs	r2, #1
   155a6:	f362 0102 	bfi	r1, r2, #0, #3
   155aa:	f36f 01c5 	bfc	r1, #3, #3
   155ae:	f363 118f 	bfi	r1, r3, #6, #10
   155b2:	481b      	ldr	r0, [pc, #108]	; (15620 <bt_le_adv_start_legacy+0x344>)
   155b4:	f7fb faf4 	bl	10ba0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   155b8:	9807      	ldr	r0, [sp, #28]
   155ba:	b128      	cbz	r0, 155c8 <bt_le_adv_start_legacy+0x2ec>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   155bc:	2100      	movs	r1, #0
   155be:	f000 fb97 	bl	15cf0 <bt_conn_set_state>
			bt_conn_unref(conn);
   155c2:	9807      	ldr	r0, [sp, #28]
   155c4:	f009 f920 	bl	1e808 <bt_conn_unref>
		return err;
   155c8:	46a9      	mov	r9, r5
   155ca:	e7e1      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
			  !(param->options & BT_LE_ADV_OPT_ONE_TIME));
   155cc:	6863      	ldr	r3, [r4, #4]
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   155ce:	f013 0f02 	tst.w	r3, #2
   155d2:	d001      	beq.n	155d8 <bt_le_adv_start_legacy+0x2fc>
   155d4:	464b      	mov	r3, r9
   155d6:	e77b      	b.n	154d0 <bt_le_adv_start_legacy+0x1f4>
   155d8:	2301      	movs	r3, #1
   155da:	e779      	b.n	154d0 <bt_le_adv_start_legacy+0x1f4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   155dc:	f3bf 8f5b 	dmb	ish
   155e0:	e856 3f00 	ldrex	r3, [r6]
   155e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   155e8:	e846 3200 	strex	r2, r3, [r6]
   155ec:	2a00      	cmp	r2, #0
   155ee:	d1f7      	bne.n	155e0 <bt_le_adv_start_legacy+0x304>
   155f0:	f3bf 8f5b 	dmb	ish
   155f4:	e77c      	b.n	154f0 <bt_le_adv_start_legacy+0x214>
   155f6:	f3bf 8f5b 	dmb	ish
   155fa:	e856 3f00 	ldrex	r3, [r6]
   155fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   15602:	e846 3200 	strex	r2, r3, [r6]
   15606:	2a00      	cmp	r2, #0
   15608:	d1f7      	bne.n	155fa <bt_le_adv_start_legacy+0x31e>
   1560a:	f3bf 8f5b 	dmb	ish
   1560e:	e77e      	b.n	1550e <bt_le_adv_start_legacy+0x232>
   15610:	20000374 	.word	0x20000374
   15614:	200002a8 	.word	0x200002a8
   15618:	00021f84 	.word	0x00021f84
   1561c:	00021f84 	.word	0x00021f84
   15620:	0002358c 	.word	0x0002358c
   15624:	f3bf 8f5b 	dmb	ish
   15628:	e856 3f00 	ldrex	r3, [r6]
   1562c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   15630:	e846 3200 	strex	r2, r3, [r6]
   15634:	2a00      	cmp	r2, #0
   15636:	d1f7      	bne.n	15628 <bt_le_adv_start_legacy+0x34c>
   15638:	f3bf 8f5b 	dmb	ish
   1563c:	e777      	b.n	1552e <bt_le_adv_start_legacy+0x252>
   1563e:	f3bf 8f5b 	dmb	ish
   15642:	e856 3f00 	ldrex	r3, [r6]
   15646:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   1564a:	e846 3200 	strex	r2, r3, [r6]
   1564e:	2a00      	cmp	r2, #0
   15650:	d1f7      	bne.n	15642 <bt_le_adv_start_legacy+0x366>
   15652:	f3bf 8f5b 	dmb	ish
   15656:	e77b      	b.n	15550 <bt_le_adv_start_legacy+0x274>
   15658:	f3bf 8f5b 	dmb	ish
   1565c:	e856 3f00 	ldrex	r3, [r6]
   15660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   15664:	e846 3200 	strex	r2, r3, [r6]
   15668:	2a00      	cmp	r2, #0
   1566a:	d1f7      	bne.n	1565c <bt_le_adv_start_legacy+0x380>
   1566c:	f3bf 8f5b 	dmb	ish
   15670:	e77e      	b.n	15570 <bt_le_adv_start_legacy+0x294>
   15672:	f3bf 8f5b 	dmb	ish
   15676:	e856 3f00 	ldrex	r3, [r6]
   1567a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   1567e:	e846 3200 	strex	r2, r3, [r6]
   15682:	2a00      	cmp	r2, #0
   15684:	d1f7      	bne.n	15676 <bt_le_adv_start_legacy+0x39a>
   15686:	f3bf 8f5b 	dmb	ish
}
   1568a:	e781      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
		return -EAGAIN;
   1568c:	f06f 090a 	mvn.w	r9, #10
   15690:	e77e      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
		return -EINVAL;
   15692:	f06f 0915 	mvn.w	r9, #21
   15696:	e77b      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
		return -EINVAL;
   15698:	f06f 0915 	mvn.w	r9, #21
   1569c:	e778      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
		return -EALREADY;
   1569e:	f06f 0977 	mvn.w	r9, #119	; 0x77
   156a2:	e775      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
		return -ENOBUFS;
   156a4:	f06f 0968 	mvn.w	r9, #104	; 0x68
   156a8:	e772      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
			return err;
   156aa:	4681      	mov	r9, r0
   156ac:	e770      	b.n	15590 <bt_le_adv_start_legacy+0x2b4>
   156ae:	bf00      	nop

000156b0 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   156b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   156b4:	b082      	sub	sp, #8
   156b6:	4606      	mov	r6, r0
   156b8:	460c      	mov	r4, r1
   156ba:	4615      	mov	r5, r2
   156bc:	461f      	mov	r7, r3
	struct bt_le_ext_adv *adv = adv_new_legacy();
   156be:	f7ff fcd5 	bl	1506c <adv_new_legacy>
	int err;

	if (!adv) {
   156c2:	b1f8      	cbz	r0, 15704 <bt_le_adv_start+0x54>
   156c4:	4680      	mov	r8, r0

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   156c6:	9b08      	ldr	r3, [sp, #32]
   156c8:	9301      	str	r3, [sp, #4]
   156ca:	9700      	str	r7, [sp, #0]
   156cc:	462b      	mov	r3, r5
   156ce:	4622      	mov	r2, r4
   156d0:	4631      	mov	r1, r6
   156d2:	f7ff fe03 	bl	152dc <bt_le_adv_start_legacy>
   156d6:	4606      	mov	r6, r0

	if (err) {
		bt_le_adv_delete_legacy();
	}

	if (ad_is_limited(ad, ad_len)) {
   156d8:	4629      	mov	r1, r5
   156da:	4620      	mov	r0, r4
   156dc:	f008 fdd9 	bl	1e292 <ad_is_limited>
   156e0:	b918      	cbnz	r0, 156ea <bt_le_adv_start+0x3a>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   156e2:	4630      	mov	r0, r6
   156e4:	b002      	add	sp, #8
   156e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   156ea:	f108 0818 	add.w	r8, r8, #24
   156ee:	4907      	ldr	r1, [pc, #28]	; (1570c <bt_le_adv_start+0x5c>)
   156f0:	4640      	mov	r0, r8
   156f2:	f00b fef9 	bl	214e8 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   156f6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   156fa:	2300      	movs	r3, #0
   156fc:	4640      	mov	r0, r8
   156fe:	f005 fec5 	bl	1b48c <k_work_reschedule>
   15702:	e7ee      	b.n	156e2 <bt_le_adv_start+0x32>
		return -ENOMEM;
   15704:	f06f 060b 	mvn.w	r6, #11
   15708:	e7eb      	b.n	156e2 <bt_le_adv_start+0x32>
   1570a:	bf00      	nop
   1570c:	000157a5 	.word	0x000157a5

00015710 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   15710:	b510      	push	{r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   15712:	f7ff fddf 	bl	152d4 <bt_le_adv_lookup_legacy>
   15716:	4604      	mov	r4, r0
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
   15718:	f008 ff03 	bl	1e522 <bt_le_lim_adv_cancel_timeout>

	if (!adv) {
   1571c:	b1c4      	cbz	r4, 15750 <bt_le_adv_stop+0x40>
	}

	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);
   1571e:	f104 0310 	add.w	r3, r4, #16
   15722:	f3bf 8f5b 	dmb	ish
   15726:	e853 2f00 	ldrex	r2, [r3]
   1572a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   1572e:	e843 2100 	strex	r1, r2, [r3]
   15732:	2900      	cmp	r1, #0
   15734:	d1f7      	bne.n	15726 <bt_le_adv_stop+0x16>
   15736:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1573a:	f3bf 8f5b 	dmb	ish
   1573e:	6923      	ldr	r3, [r4, #16]
   15740:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15744:	f3c3 1080 	ubfx	r0, r3, #6, #1

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15748:	f013 0f40 	tst.w	r3, #64	; 0x40
   1574c:	d112      	bne.n	15774 <bt_le_adv_stop+0x64>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1574e:	bd10      	pop	{r4, pc}
   15750:	4b11      	ldr	r3, [pc, #68]	; (15798 <bt_le_adv_stop+0x88>)
   15752:	4a12      	ldr	r2, [pc, #72]	; (1579c <bt_le_adv_stop+0x8c>)
   15754:	1a9b      	subs	r3, r3, r2
   15756:	08db      	lsrs	r3, r3, #3
		BT_ERR("No valid legacy adv");
   15758:	f04f 0100 	mov.w	r1, #0
   1575c:	2201      	movs	r2, #1
   1575e:	f362 0102 	bfi	r1, r2, #0, #3
   15762:	f36f 01c5 	bfc	r1, #3, #3
   15766:	f363 118f 	bfi	r1, r3, #6, #10
   1576a:	480d      	ldr	r0, [pc, #52]	; (157a0 <bt_le_adv_stop+0x90>)
   1576c:	f7fb fa18 	bl	10ba0 <log_0>
		return 0;
   15770:	2000      	movs	r0, #0
   15772:	e7ec      	b.n	1574e <bt_le_adv_stop+0x3e>
   15774:	f3bf 8f5b 	dmb	ish
   15778:	6923      	ldr	r3, [r4, #16]
   1577a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1577e:	f413 7f00 	tst.w	r3, #512	; 0x200
   15782:	d104      	bne.n	1578e <bt_le_adv_stop+0x7e>
		err = bt_le_adv_set_enable_legacy(adv, false);
   15784:	2100      	movs	r1, #0
   15786:	4620      	mov	r0, r4
   15788:	f008 fe9f 	bl	1e4ca <bt_le_adv_set_enable_legacy>
		if (err) {
   1578c:	e7df      	b.n	1574e <bt_le_adv_stop+0x3e>
		le_adv_stop_free_conn(adv, 0);
   1578e:	2100      	movs	r1, #0
   15790:	4620      	mov	r0, r4
   15792:	f7ff fd6b 	bl	1526c <le_adv_stop_free_conn>
   15796:	e7f5      	b.n	15784 <bt_le_adv_stop+0x74>
   15798:	00021f84 	.word	0x00021f84
   1579c:	00021f84 	.word	0x00021f84
   157a0:	000235a8 	.word	0x000235a8

000157a4 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   157a4:	b508      	push	{r3, lr}
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   157a6:	f7ff ffb3 	bl	15710 <bt_le_adv_stop>
   157aa:	4601      	mov	r1, r0
   157ac:	4b08      	ldr	r3, [pc, #32]	; (157d0 <adv_timeout+0x2c>)
   157ae:	4a09      	ldr	r2, [pc, #36]	; (157d4 <adv_timeout+0x30>)
   157b0:	1a9b      	subs	r3, r3, r2
   157b2:	08db      	lsrs	r3, r3, #3
#endif
	BT_WARN("Failed to stop advertising: %d", err);
   157b4:	f04f 0200 	mov.w	r2, #0
   157b8:	2002      	movs	r0, #2
   157ba:	f360 0202 	bfi	r2, r0, #0, #3
   157be:	f36f 02c5 	bfc	r2, #3, #3
   157c2:	f363 128f 	bfi	r2, r3, #6, #10
   157c6:	4804      	ldr	r0, [pc, #16]	; (157d8 <adv_timeout+0x34>)
   157c8:	f7fb f934 	bl	10a34 <log_1>
}
   157cc:	bd08      	pop	{r3, pc}
   157ce:	bf00      	nop
   157d0:	00021f84 	.word	0x00021f84
   157d4:	00021f84 	.word	0x00021f84
   157d8:	000235bc 	.word	0x000235bc

000157dc <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   157dc:	b538      	push	{r3, r4, r5, lr}
   157de:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   157e0:	4b0c      	ldr	r3, [pc, #48]	; (15814 <notify_disconnected+0x38>)
   157e2:	681c      	ldr	r4, [r3, #0]
   157e4:	e000      	b.n	157e8 <notify_disconnected+0xc>
   157e6:	6924      	ldr	r4, [r4, #16]
   157e8:	b134      	cbz	r4, 157f8 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   157ea:	6863      	ldr	r3, [r4, #4]
   157ec:	2b00      	cmp	r3, #0
   157ee:	d0fa      	beq.n	157e6 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   157f0:	7a69      	ldrb	r1, [r5, #9]
   157f2:	4628      	mov	r0, r5
   157f4:	4798      	blx	r3
   157f6:	e7f6      	b.n	157e6 <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   157f8:	4c07      	ldr	r4, [pc, #28]	; (15818 <notify_disconnected+0x3c>)
   157fa:	e000      	b.n	157fe <notify_disconnected+0x22>
   157fc:	3414      	adds	r4, #20
   157fe:	4b07      	ldr	r3, [pc, #28]	; (1581c <notify_disconnected+0x40>)
   15800:	429c      	cmp	r4, r3
   15802:	d206      	bcs.n	15812 <notify_disconnected+0x36>
		if (cb->disconnected) {
   15804:	6863      	ldr	r3, [r4, #4]
   15806:	2b00      	cmp	r3, #0
   15808:	d0f8      	beq.n	157fc <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   1580a:	7a69      	ldrb	r1, [r5, #9]
   1580c:	4628      	mov	r0, r5
   1580e:	4798      	blx	r3
   15810:	e7f4      	b.n	157fc <notify_disconnected+0x20>
		}
	}
}
   15812:	bd38      	pop	{r3, r4, r5, pc}
   15814:	20001f88 	.word	0x20001f88
   15818:	00021f58 	.word	0x00021f58
   1581c:	00021f6c 	.word	0x00021f6c

00015820 <tx_free>:
{
   15820:	b508      	push	{r3, lr}
   15822:	4601      	mov	r1, r0
	tx->cb = NULL;
   15824:	2300      	movs	r3, #0
   15826:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   15828:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   1582a:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1582c:	4801      	ldr	r0, [pc, #4]	; (15834 <tx_free+0x14>)
   1582e:	f00b fd59 	bl	212e4 <k_queue_append>
}
   15832:	bd08      	pop	{r3, pc}
   15834:	20000764 	.word	0x20000764

00015838 <conn_tx_alloc>:
{
   15838:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   1583a:	f006 f9ed 	bl	1bc18 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1583e:	4b08      	ldr	r3, [pc, #32]	; (15860 <conn_tx_alloc+0x28>)
   15840:	4283      	cmp	r3, r0
   15842:	d007      	beq.n	15854 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   15844:	f04f 32ff 	mov.w	r2, #4294967295
   15848:	f04f 33ff 	mov.w	r3, #4294967295
   1584c:	4805      	ldr	r0, [pc, #20]	; (15864 <conn_tx_alloc+0x2c>)
   1584e:	f005 fbc9 	bl	1afe4 <z_impl_k_queue_get>
}
   15852:	bd08      	pop	{r3, pc}
   15854:	2200      	movs	r2, #0
   15856:	2300      	movs	r3, #0
   15858:	4802      	ldr	r0, [pc, #8]	; (15864 <conn_tx_alloc+0x2c>)
   1585a:	f005 fbc3 	bl	1afe4 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   1585e:	e7f8      	b.n	15852 <conn_tx_alloc+0x1a>
   15860:	20001d30 	.word	0x20001d30
   15864:	20000764 	.word	0x20000764

00015868 <notify_connected>:
{
   15868:	b538      	push	{r3, r4, r5, lr}
   1586a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1586c:	4b0f      	ldr	r3, [pc, #60]	; (158ac <notify_connected+0x44>)
   1586e:	681c      	ldr	r4, [r3, #0]
   15870:	e000      	b.n	15874 <notify_connected+0xc>
   15872:	6924      	ldr	r4, [r4, #16]
   15874:	b134      	cbz	r4, 15884 <notify_connected+0x1c>
		if (cb->connected) {
   15876:	6823      	ldr	r3, [r4, #0]
   15878:	2b00      	cmp	r3, #0
   1587a:	d0fa      	beq.n	15872 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   1587c:	7a69      	ldrb	r1, [r5, #9]
   1587e:	4628      	mov	r0, r5
   15880:	4798      	blx	r3
   15882:	e7f6      	b.n	15872 <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15884:	4c0a      	ldr	r4, [pc, #40]	; (158b0 <notify_connected+0x48>)
   15886:	e000      	b.n	1588a <notify_connected+0x22>
   15888:	3414      	adds	r4, #20
   1588a:	4b0a      	ldr	r3, [pc, #40]	; (158b4 <notify_connected+0x4c>)
   1588c:	429c      	cmp	r4, r3
   1588e:	d206      	bcs.n	1589e <notify_connected+0x36>
		if (cb->connected) {
   15890:	6823      	ldr	r3, [r4, #0]
   15892:	2b00      	cmp	r3, #0
   15894:	d0f8      	beq.n	15888 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   15896:	7a69      	ldrb	r1, [r5, #9]
   15898:	4628      	mov	r0, r5
   1589a:	4798      	blx	r3
   1589c:	e7f4      	b.n	15888 <notify_connected+0x20>
	if (!conn->err) {
   1589e:	7a6b      	ldrb	r3, [r5, #9]
   158a0:	b103      	cbz	r3, 158a4 <notify_connected+0x3c>
}
   158a2:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   158a4:	4628      	mov	r0, r5
   158a6:	f002 fecd 	bl	18644 <bt_gatt_connected>
}
   158aa:	e7fa      	b.n	158a2 <notify_connected+0x3a>
   158ac:	20001f88 	.word	0x20001f88
   158b0:	00021f58 	.word	0x00021f58
   158b4:	00021f6c 	.word	0x00021f6c

000158b8 <bt_conn_get_pkts>:
}
   158b8:	4800      	ldr	r0, [pc, #0]	; (158bc <bt_conn_get_pkts+0x4>)
   158ba:	4770      	bx	lr
   158bc:	200003a8 	.word	0x200003a8

000158c0 <send_frag>:
{
   158c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   158c4:	4605      	mov	r5, r0
   158c6:	460e      	mov	r6, r1
   158c8:	4691      	mov	r9, r2
   158ca:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   158cc:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   158ce:	f7ff fff3 	bl	158b8 <bt_conn_get_pkts>
   158d2:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   158d4:	f04f 32ff 	mov.w	r2, #4294967295
   158d8:	f04f 33ff 	mov.w	r3, #4294967295
   158dc:	f005 fbe6 	bl	1b0ac <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   158e0:	7aab      	ldrb	r3, [r5, #10]
   158e2:	2b07      	cmp	r3, #7
   158e4:	d159      	bne.n	1599a <send_frag+0xda>
   158e6:	f04f 0240 	mov.w	r2, #64	; 0x40
   158ea:	f3ef 8311 	mrs	r3, BASEPRI
   158ee:	f382 8812 	msr	BASEPRI_MAX, r2
   158f2:	f3bf 8f6f 	isb	sy
	if (tx) {
   158f6:	b1af      	cbz	r7, 15924 <send_frag+0x64>
	parent->next = child;
   158f8:	2200      	movs	r2, #0
   158fa:	603a      	str	r2, [r7, #0]
	return list->tail;
   158fc:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   158fe:	b172      	cbz	r2, 1591e <send_frag+0x5e>
	parent->next = child;
   15900:	6017      	str	r7, [r2, #0]
	list->tail = node;
   15902:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   15904:	f383 8811 	msr	BASEPRI, r3
   15908:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   1590c:	464a      	mov	r2, r9
   1590e:	4631      	mov	r1, r6
   15910:	4628      	mov	r0, r5
   15912:	f008 fe87 	bl	1e624 <send_acl>
	if (err) {
   15916:	4601      	mov	r1, r0
   15918:	b988      	cbnz	r0, 1593e <send_frag+0x7e>
	return true;
   1591a:	2001      	movs	r0, #1
   1591c:	e046      	b.n	159ac <send_frag+0xec>
   1591e:	61af      	str	r7, [r5, #24]
	list->head = node;
   15920:	616f      	str	r7, [r5, #20]
}
   15922:	e7ef      	b.n	15904 <send_frag+0x44>
	return list->tail;
   15924:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   15926:	b13a      	cbz	r2, 15938 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   15928:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   1592c:	f8da 2000 	ldr.w	r2, [sl]
   15930:	3201      	adds	r2, #1
   15932:	f8ca 2000 	str.w	r2, [sl]
   15936:	e7e5      	b.n	15904 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15938:	f105 0a1c 	add.w	sl, r5, #28
   1593c:	e7f6      	b.n	1592c <send_frag+0x6c>
   1593e:	4b26      	ldr	r3, [pc, #152]	; (159d8 <send_frag+0x118>)
   15940:	4a26      	ldr	r2, [pc, #152]	; (159dc <send_frag+0x11c>)
   15942:	1a9b      	subs	r3, r3, r2
   15944:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   15946:	f04f 0200 	mov.w	r2, #0
   1594a:	2001      	movs	r0, #1
   1594c:	f360 0202 	bfi	r2, r0, #0, #3
   15950:	f36f 02c5 	bfc	r2, #3, #3
   15954:	f363 128f 	bfi	r2, r3, #6, #10
   15958:	4821      	ldr	r0, [pc, #132]	; (159e0 <send_frag+0x120>)
   1595a:	f7fb f86b 	bl	10a34 <log_1>
	__asm__ volatile(
   1595e:	f04f 0340 	mov.w	r3, #64	; 0x40
   15962:	f3ef 8011 	mrs	r0, BASEPRI
   15966:	f383 8812 	msr	BASEPRI_MAX, r3
   1596a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1596e:	b347      	cbz	r7, 159c2 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   15970:	4639      	mov	r1, r7
	return list->head;
   15972:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15974:	2200      	movs	r2, #0
   15976:	b163      	cbz	r3, 15992 <send_frag+0xd2>
   15978:	428b      	cmp	r3, r1
   1597a:	d002      	beq.n	15982 <send_frag+0xc2>
   1597c:	461a      	mov	r2, r3
   1597e:	681b      	ldr	r3, [r3, #0]
   15980:	e7f9      	b.n	15976 <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   15982:	b1aa      	cbz	r2, 159b0 <send_frag+0xf0>
	return node->next;
   15984:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   15986:	6013      	str	r3, [r2, #0]
	return list->tail;
   15988:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   1598a:	42bb      	cmp	r3, r7
   1598c:	d017      	beq.n	159be <send_frag+0xfe>
	parent->next = child;
   1598e:	2300      	movs	r3, #0
   15990:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   15992:	f380 8811 	msr	BASEPRI, r0
   15996:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1599a:	4640      	mov	r0, r8
   1599c:	f005 fb5e 	bl	1b05c <z_impl_k_sem_give>
	if (tx) {
   159a0:	b117      	cbz	r7, 159a8 <send_frag+0xe8>
		tx_free(tx);
   159a2:	4638      	mov	r0, r7
   159a4:	f7ff ff3c 	bl	15820 <tx_free>
	if (always_consume) {
   159a8:	b98c      	cbnz	r4, 159ce <send_frag+0x10e>
	return false;
   159aa:	4620      	mov	r0, r4
}
   159ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   159b0:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   159b2:	616b      	str	r3, [r5, #20]
	return list->tail;
   159b4:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   159b6:	42ba      	cmp	r2, r7
   159b8:	d1e9      	bne.n	1598e <send_frag+0xce>
	list->tail = node;
   159ba:	61ab      	str	r3, [r5, #24]
}
   159bc:	e7e7      	b.n	1598e <send_frag+0xce>
	list->tail = node;
   159be:	61aa      	str	r2, [r5, #24]
}
   159c0:	e7e5      	b.n	1598e <send_frag+0xce>
			(*pending_no_cb)--;
   159c2:	f8da 3000 	ldr.w	r3, [sl]
   159c6:	3b01      	subs	r3, #1
   159c8:	f8ca 3000 	str.w	r3, [sl]
   159cc:	e7e1      	b.n	15992 <send_frag+0xd2>
		net_buf_unref(buf);
   159ce:	4630      	mov	r0, r6
   159d0:	f00a fb2c 	bl	2002c <net_buf_unref>
	return false;
   159d4:	2000      	movs	r0, #0
   159d6:	e7e9      	b.n	159ac <send_frag+0xec>
   159d8:	00021f9c 	.word	0x00021f9c
   159dc:	00021f84 	.word	0x00021f84
   159e0:	00023208 	.word	0x00023208

000159e4 <bt_conn_new>:
{
   159e4:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   159e6:	2300      	movs	r3, #0
   159e8:	428b      	cmp	r3, r1
   159ea:	d228      	bcs.n	15a3e <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   159ec:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   159f0:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   159f4:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   159f8:	2501      	movs	r5, #1
   159fa:	f3bf 8f5b 	dmb	ish
   159fe:	e852 6f00 	ldrex	r6, [r2]
   15a02:	2e00      	cmp	r6, #0
   15a04:	d104      	bne.n	15a10 <bt_conn_new+0x2c>
   15a06:	e842 5c00 	strex	ip, r5, [r2]
   15a0a:	f1bc 0f00 	cmp.w	ip, #0
   15a0e:	d1f6      	bne.n	159fe <bt_conn_new+0x1a>
   15a10:	f3bf 8f5b 	dmb	ish
   15a14:	d111      	bne.n	15a3a <bt_conn_new+0x56>
	if (!conn) {
   15a16:	b174      	cbz	r4, 15a36 <bt_conn_new+0x52>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   15a18:	22b8      	movs	r2, #184	; 0xb8
   15a1a:	2100      	movs	r1, #0
   15a1c:	4620      	mov	r0, r4
   15a1e:	f008 fa26 	bl	1de6e <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   15a22:	4908      	ldr	r1, [pc, #32]	; (15a44 <bt_conn_new+0x60>)
   15a24:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15a28:	f00b fd5e 	bl	214e8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15a2c:	4906      	ldr	r1, [pc, #24]	; (15a48 <bt_conn_new+0x64>)
   15a2e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15a32:	f00b fd33 	bl	2149c <k_work_init>
}
   15a36:	4620      	mov	r0, r4
   15a38:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   15a3a:	442b      	add	r3, r5
   15a3c:	e7d4      	b.n	159e8 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   15a3e:	2400      	movs	r4, #0
   15a40:	e7e9      	b.n	15a16 <bt_conn_new+0x32>
   15a42:	bf00      	nop
   15a44:	00016235 	.word	0x00016235
   15a48:	0001e61b 	.word	0x0001e61b

00015a4c <acl_conn_new>:

	atomic_set_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE);
}

static struct bt_conn *acl_conn_new(void)
{
   15a4c:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15a4e:	2101      	movs	r1, #1
   15a50:	4801      	ldr	r0, [pc, #4]	; (15a58 <acl_conn_new+0xc>)
   15a52:	f7ff ffc7 	bl	159e4 <bt_conn_new>
}
   15a56:	bd08      	pop	{r3, pc}
   15a58:	200016e0 	.word	0x200016e0

00015a5c <bt_acl_recv>:
{
   15a5c:	b570      	push	{r4, r5, r6, lr}
   15a5e:	4604      	mov	r4, r0
   15a60:	460d      	mov	r5, r1
	switch (flags) {
   15a62:	2a01      	cmp	r2, #1
   15a64:	d02d      	beq.n	15ac2 <bt_acl_recv+0x66>
   15a66:	4611      	mov	r1, r2
   15a68:	2a02      	cmp	r2, #2
   15a6a:	d173      	bne.n	15b54 <bt_acl_recv+0xf8>
		if (conn->rx) {
   15a6c:	6903      	ldr	r3, [r0, #16]
   15a6e:	b193      	cbz	r3, 15a96 <bt_acl_recv+0x3a>
   15a70:	4b4e      	ldr	r3, [pc, #312]	; (15bac <bt_acl_recv+0x150>)
   15a72:	4a4f      	ldr	r2, [pc, #316]	; (15bb0 <bt_acl_recv+0x154>)
   15a74:	1a9b      	subs	r3, r3, r2
   15a76:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   15a78:	f04f 0100 	mov.w	r1, #0
   15a7c:	2201      	movs	r2, #1
   15a7e:	f362 0102 	bfi	r1, r2, #0, #3
   15a82:	f36f 01c5 	bfc	r1, #3, #3
   15a86:	f363 118f 	bfi	r1, r3, #6, #10
   15a8a:	484a      	ldr	r0, [pc, #296]	; (15bb4 <bt_acl_recv+0x158>)
   15a8c:	f7fb f888 	bl	10ba0 <log_0>
			bt_conn_reset_rx_state(conn);
   15a90:	4620      	mov	r0, r4
   15a92:	f008 fe2a 	bl	1e6ea <bt_conn_reset_rx_state>
		conn->rx = buf;
   15a96:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   15a98:	6921      	ldr	r1, [r4, #16]
   15a9a:	8988      	ldrh	r0, [r1, #12]
   15a9c:	2801      	cmp	r0, #1
   15a9e:	d96f      	bls.n	15b80 <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   15aa0:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   15aa2:	785d      	ldrb	r5, [r3, #1]
   15aa4:	781a      	ldrb	r2, [r3, #0]
   15aa6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   15aaa:	3204      	adds	r2, #4
   15aac:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   15aae:	4290      	cmp	r0, r2
   15ab0:	d366      	bcc.n	15b80 <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   15ab2:	d866      	bhi.n	15b82 <bt_acl_recv+0x126>
	conn->rx = NULL;
   15ab4:	2300      	movs	r3, #0
   15ab6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   15ab8:	2201      	movs	r2, #1
   15aba:	4620      	mov	r0, r4
   15abc:	f000 fe7c 	bl	167b8 <bt_l2cap_recv>
   15ac0:	e05e      	b.n	15b80 <bt_acl_recv+0x124>
		if (!conn->rx) {
   15ac2:	6900      	ldr	r0, [r0, #16]
   15ac4:	b180      	cbz	r0, 15ae8 <bt_acl_recv+0x8c>
		if (!buf->len) {
   15ac6:	898e      	ldrh	r6, [r1, #12]
   15ac8:	b32e      	cbz	r6, 15b16 <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15aca:	3008      	adds	r0, #8
   15acc:	f00a fb34 	bl	20138 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   15ad0:	4286      	cmp	r6, r0
   15ad2:	d824      	bhi.n	15b1e <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   15ad4:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15ad6:	89aa      	ldrh	r2, [r5, #12]
   15ad8:	68a9      	ldr	r1, [r5, #8]
   15ada:	3008      	adds	r0, #8
   15adc:	f00a faf6 	bl	200cc <net_buf_simple_add_mem>
		net_buf_unref(buf);
   15ae0:	4628      	mov	r0, r5
   15ae2:	f00a faa3 	bl	2002c <net_buf_unref>
		break;
   15ae6:	e7d7      	b.n	15a98 <bt_acl_recv+0x3c>
   15ae8:	4b30      	ldr	r3, [pc, #192]	; (15bac <bt_acl_recv+0x150>)
   15aea:	4a31      	ldr	r2, [pc, #196]	; (15bb0 <bt_acl_recv+0x154>)
   15aec:	1a9b      	subs	r3, r3, r2
   15aee:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   15af0:	f04f 0100 	mov.w	r1, #0
   15af4:	2201      	movs	r2, #1
   15af6:	f362 0102 	bfi	r1, r2, #0, #3
   15afa:	f36f 01c5 	bfc	r1, #3, #3
   15afe:	f363 118f 	bfi	r1, r3, #6, #10
   15b02:	482d      	ldr	r0, [pc, #180]	; (15bb8 <bt_acl_recv+0x15c>)
   15b04:	f7fb f84c 	bl	10ba0 <log_0>
			bt_conn_reset_rx_state(conn);
   15b08:	4620      	mov	r0, r4
   15b0a:	f008 fdee 	bl	1e6ea <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   15b0e:	4628      	mov	r0, r5
   15b10:	f00a fa8c 	bl	2002c <net_buf_unref>
			return;
   15b14:	e034      	b.n	15b80 <bt_acl_recv+0x124>
			net_buf_unref(buf);
   15b16:	4608      	mov	r0, r1
   15b18:	f00a fa88 	bl	2002c <net_buf_unref>
			return;
   15b1c:	e030      	b.n	15b80 <bt_acl_recv+0x124>
   15b1e:	4b23      	ldr	r3, [pc, #140]	; (15bac <bt_acl_recv+0x150>)
   15b20:	4a23      	ldr	r2, [pc, #140]	; (15bb0 <bt_acl_recv+0x154>)
   15b22:	1a9b      	subs	r3, r3, r2
   15b24:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   15b26:	f04f 0100 	mov.w	r1, #0
   15b2a:	2201      	movs	r2, #1
   15b2c:	f362 0102 	bfi	r1, r2, #0, #3
   15b30:	f36f 01c5 	bfc	r1, #3, #3
   15b34:	f363 118f 	bfi	r1, r3, #6, #10
   15b38:	4820      	ldr	r0, [pc, #128]	; (15bbc <bt_acl_recv+0x160>)
   15b3a:	f7fb f831 	bl	10ba0 <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   15b3e:	2200      	movs	r2, #0
   15b40:	6921      	ldr	r1, [r4, #16]
   15b42:	4620      	mov	r0, r4
   15b44:	f000 fe38 	bl	167b8 <bt_l2cap_recv>
			conn->rx = NULL;
   15b48:	2300      	movs	r3, #0
   15b4a:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   15b4c:	4628      	mov	r0, r5
   15b4e:	f00a fa6d 	bl	2002c <net_buf_unref>
			return;
   15b52:	e015      	b.n	15b80 <bt_acl_recv+0x124>
   15b54:	4b15      	ldr	r3, [pc, #84]	; (15bac <bt_acl_recv+0x150>)
   15b56:	4a16      	ldr	r2, [pc, #88]	; (15bb0 <bt_acl_recv+0x154>)
   15b58:	1a9b      	subs	r3, r3, r2
   15b5a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   15b5c:	f04f 0200 	mov.w	r2, #0
   15b60:	2001      	movs	r0, #1
   15b62:	f360 0202 	bfi	r2, r0, #0, #3
   15b66:	f36f 02c5 	bfc	r2, #3, #3
   15b6a:	f363 128f 	bfi	r2, r3, #6, #10
   15b6e:	4814      	ldr	r0, [pc, #80]	; (15bc0 <bt_acl_recv+0x164>)
   15b70:	f7fa ff60 	bl	10a34 <log_1>
		bt_conn_reset_rx_state(conn);
   15b74:	4620      	mov	r0, r4
   15b76:	f008 fdb8 	bl	1e6ea <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   15b7a:	4628      	mov	r0, r5
   15b7c:	f00a fa56 	bl	2002c <net_buf_unref>
}
   15b80:	bd70      	pop	{r4, r5, r6, pc}
   15b82:	490a      	ldr	r1, [pc, #40]	; (15bac <bt_acl_recv+0x150>)
   15b84:	4b0a      	ldr	r3, [pc, #40]	; (15bb0 <bt_acl_recv+0x154>)
   15b86:	1ac9      	subs	r1, r1, r3
   15b88:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   15b8a:	f04f 0300 	mov.w	r3, #0
   15b8e:	2501      	movs	r5, #1
   15b90:	f365 0302 	bfi	r3, r5, #0, #3
   15b94:	f36f 03c5 	bfc	r3, #3, #3
   15b98:	f361 138f 	bfi	r3, r1, #6, #10
   15b9c:	4601      	mov	r1, r0
   15b9e:	4809      	ldr	r0, [pc, #36]	; (15bc4 <bt_acl_recv+0x168>)
   15ba0:	f7fa ff7e 	bl	10aa0 <log_2>
		bt_conn_reset_rx_state(conn);
   15ba4:	4620      	mov	r0, r4
   15ba6:	f008 fda0 	bl	1e6ea <bt_conn_reset_rx_state>
		return;
   15baa:	e7e9      	b.n	15b80 <bt_acl_recv+0x124>
   15bac:	00021f9c 	.word	0x00021f9c
   15bb0:	00021f84 	.word	0x00021f84
   15bb4:	000235e4 	.word	0x000235e4
   15bb8:	00023604 	.word	0x00023604
   15bbc:	00023624 	.word	0x00023624
   15bc0:	0002364c 	.word	0x0002364c
   15bc4:	0002366c 	.word	0x0002366c

00015bc8 <bt_conn_send_cb>:
{
   15bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15bcc:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   15bce:	7a83      	ldrb	r3, [r0, #10]
   15bd0:	2b07      	cmp	r3, #7
   15bd2:	d118      	bne.n	15c06 <bt_conn_send_cb+0x3e>
   15bd4:	4604      	mov	r4, r0
   15bd6:	460d      	mov	r5, r1
   15bd8:	4616      	mov	r6, r2
	if (cb) {
   15bda:	2a00      	cmp	r2, #0
   15bdc:	d04f      	beq.n	15c7e <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   15bde:	f7ff fe2b 	bl	15838 <conn_tx_alloc>
		if (!tx) {
   15be2:	4680      	mov	r8, r0
   15be4:	b310      	cbz	r0, 15c2c <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   15be6:	7aa3      	ldrb	r3, [r4, #10]
   15be8:	2b07      	cmp	r3, #7
   15bea:	d132      	bne.n	15c52 <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   15bec:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   15bee:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   15bf0:	2300      	movs	r3, #0
   15bf2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   15bf4:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   15bf6:	4629      	mov	r1, r5
   15bf8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15bfc:	f00a fa09 	bl	20012 <net_buf_put>
	return 0;
   15c00:	2000      	movs	r0, #0
}
   15c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15c06:	4b1f      	ldr	r3, [pc, #124]	; (15c84 <bt_conn_send_cb+0xbc>)
   15c08:	4a1f      	ldr	r2, [pc, #124]	; (15c88 <bt_conn_send_cb+0xc0>)
   15c0a:	1a9b      	subs	r3, r3, r2
   15c0c:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   15c0e:	f04f 0100 	mov.w	r1, #0
   15c12:	2201      	movs	r2, #1
   15c14:	f362 0102 	bfi	r1, r2, #0, #3
   15c18:	f36f 01c5 	bfc	r1, #3, #3
   15c1c:	f363 118f 	bfi	r1, r3, #6, #10
   15c20:	481a      	ldr	r0, [pc, #104]	; (15c8c <bt_conn_send_cb+0xc4>)
   15c22:	f7fa ffbd 	bl	10ba0 <log_0>
		return -ENOTCONN;
   15c26:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15c2a:	e7ea      	b.n	15c02 <bt_conn_send_cb+0x3a>
   15c2c:	4b15      	ldr	r3, [pc, #84]	; (15c84 <bt_conn_send_cb+0xbc>)
   15c2e:	4a16      	ldr	r2, [pc, #88]	; (15c88 <bt_conn_send_cb+0xc0>)
   15c30:	1a9b      	subs	r3, r3, r2
   15c32:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   15c34:	f04f 0100 	mov.w	r1, #0
   15c38:	2201      	movs	r2, #1
   15c3a:	f362 0102 	bfi	r1, r2, #0, #3
   15c3e:	f36f 01c5 	bfc	r1, #3, #3
   15c42:	f363 118f 	bfi	r1, r3, #6, #10
   15c46:	4812      	ldr	r0, [pc, #72]	; (15c90 <bt_conn_send_cb+0xc8>)
   15c48:	f7fa ffaa 	bl	10ba0 <log_0>
			return -ENOBUFS;
   15c4c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15c50:	e7d7      	b.n	15c02 <bt_conn_send_cb+0x3a>
   15c52:	4b0c      	ldr	r3, [pc, #48]	; (15c84 <bt_conn_send_cb+0xbc>)
   15c54:	4a0c      	ldr	r2, [pc, #48]	; (15c88 <bt_conn_send_cb+0xc0>)
   15c56:	1a9b      	subs	r3, r3, r2
   15c58:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   15c5a:	f04f 0100 	mov.w	r1, #0
   15c5e:	2202      	movs	r2, #2
   15c60:	f362 0102 	bfi	r1, r2, #0, #3
   15c64:	f36f 01c5 	bfc	r1, #3, #3
   15c68:	f363 118f 	bfi	r1, r3, #6, #10
   15c6c:	4809      	ldr	r0, [pc, #36]	; (15c94 <bt_conn_send_cb+0xcc>)
   15c6e:	f7fa ff97 	bl	10ba0 <log_0>
			tx_free(tx);
   15c72:	4640      	mov	r0, r8
   15c74:	f7ff fdd4 	bl	15820 <tx_free>
			return -ENOTCONN;
   15c78:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15c7c:	e7c1      	b.n	15c02 <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   15c7e:	2300      	movs	r3, #0
   15c80:	614b      	str	r3, [r1, #20]
   15c82:	e7b8      	b.n	15bf6 <bt_conn_send_cb+0x2e>
   15c84:	00021f9c 	.word	0x00021f9c
   15c88:	00021f84 	.word	0x00021f84
   15c8c:	00023688 	.word	0x00023688
   15c90:	00023698 	.word	0x00023698
   15c94:	000236b8 	.word	0x000236b8

00015c98 <bt_conn_prepare_events>:
{
   15c98:	b570      	push	{r4, r5, r6, lr}
   15c9a:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   15c9c:	4b0d      	ldr	r3, [pc, #52]	; (15cd4 <bt_conn_prepare_events+0x3c>)
   15c9e:	2400      	movs	r4, #0
   15ca0:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15ca2:	4622      	mov	r2, r4
   15ca4:	2101      	movs	r1, #1
   15ca6:	f00b ff9c 	bl	21be2 <k_poll_event_init>
   15caa:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15cac:	2c00      	cmp	r4, #0
   15cae:	dd01      	ble.n	15cb4 <bt_conn_prepare_events+0x1c>
}
   15cb0:	4628      	mov	r0, r5
   15cb2:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   15cb4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   15cb8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   15cbc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   15cc0:	4b05      	ldr	r3, [pc, #20]	; (15cd8 <bt_conn_prepare_events+0x40>)
   15cc2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   15cc6:	f008 fd37 	bl	1e738 <conn_prepare_events>
   15cca:	b900      	cbnz	r0, 15cce <bt_conn_prepare_events+0x36>
			ev_count++;
   15ccc:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   15cce:	3401      	adds	r4, #1
   15cd0:	e7ec      	b.n	15cac <bt_conn_prepare_events+0x14>
   15cd2:	bf00      	nop
   15cd4:	2000056c 	.word	0x2000056c
   15cd8:	200016e0 	.word	0x200016e0

00015cdc <bt_conn_lookup_handle>:
{
   15cdc:	b508      	push	{r3, lr}
   15cde:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15ce0:	2101      	movs	r1, #1
   15ce2:	4802      	ldr	r0, [pc, #8]	; (15cec <bt_conn_lookup_handle+0x10>)
   15ce4:	f008 fdad 	bl	1e842 <conn_lookup_handle>
}
   15ce8:	bd08      	pop	{r3, pc}
   15cea:	bf00      	nop
   15cec:	200016e0 	.word	0x200016e0

00015cf0 <bt_conn_set_state>:
{
   15cf0:	b570      	push	{r4, r5, r6, lr}
   15cf2:	460e      	mov	r6, r1
	if (conn->state == state) {
   15cf4:	7a85      	ldrb	r5, [r0, #10]
   15cf6:	428d      	cmp	r5, r1
   15cf8:	d010      	beq.n	15d1c <bt_conn_set_state+0x2c>
   15cfa:	4604      	mov	r4, r0
	conn->state = state;
   15cfc:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   15cfe:	b915      	cbnz	r5, 15d06 <bt_conn_set_state+0x16>
		if (conn->type != BT_CONN_TYPE_ISO) {
   15d00:	7883      	ldrb	r3, [r0, #2]
   15d02:	2b08      	cmp	r3, #8
   15d04:	d137      	bne.n	15d76 <bt_conn_set_state+0x86>
	switch (conn->state) {
   15d06:	7aa3      	ldrb	r3, [r4, #10]
   15d08:	2b08      	cmp	r3, #8
   15d0a:	f200 80b9 	bhi.w	15e80 <bt_conn_set_state+0x190>
   15d0e:	e8df f003 	tbb	[pc, r3]
   15d12:	b34e      	.short	0xb34e
   15d14:	b6b6b6b6 	.word	0xb6b6b6b6
   15d18:	35b6      	.short	0x35b6
   15d1a:	b6          	.byte	0xb6
   15d1b:	00          	.byte	0x00
   15d1c:	4b61      	ldr	r3, [pc, #388]	; (15ea4 <bt_conn_set_state+0x1b4>)
   15d1e:	4a62      	ldr	r2, [pc, #392]	; (15ea8 <bt_conn_set_state+0x1b8>)
   15d20:	1a9b      	subs	r3, r3, r2
   15d22:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   15d24:	f04f 0200 	mov.w	r2, #0
   15d28:	2102      	movs	r1, #2
   15d2a:	f361 0202 	bfi	r2, r1, #0, #3
   15d2e:	f36f 02c5 	bfc	r2, #3, #3
   15d32:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   15d36:	2e08      	cmp	r6, #8
   15d38:	d819      	bhi.n	15d6e <bt_conn_set_state+0x7e>
   15d3a:	e8df f006 	tbb	[pc, r6]
   15d3e:	1a05      	.short	0x1a05
   15d40:	0c0e100a 	.word	0x0c0e100a
   15d44:	1412      	.short	0x1412
   15d46:	16          	.byte	0x16
   15d47:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   15d48:	4958      	ldr	r1, [pc, #352]	; (15eac <bt_conn_set_state+0x1bc>)
   15d4a:	4859      	ldr	r0, [pc, #356]	; (15eb0 <bt_conn_set_state+0x1c0>)
   15d4c:	f7fa fe72 	bl	10a34 <log_1>
		return;
   15d50:	e095      	b.n	15e7e <bt_conn_set_state+0x18e>
		return "connect-scan";
   15d52:	4958      	ldr	r1, [pc, #352]	; (15eb4 <bt_conn_set_state+0x1c4>)
   15d54:	e7f9      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "connect-dir-adv";
   15d56:	4958      	ldr	r1, [pc, #352]	; (15eb8 <bt_conn_set_state+0x1c8>)
   15d58:	e7f7      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "connect-adv";
   15d5a:	4958      	ldr	r1, [pc, #352]	; (15ebc <bt_conn_set_state+0x1cc>)
   15d5c:	e7f5      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "connect-auto";
   15d5e:	4958      	ldr	r1, [pc, #352]	; (15ec0 <bt_conn_set_state+0x1d0>)
   15d60:	e7f3      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "connect";
   15d62:	4958      	ldr	r1, [pc, #352]	; (15ec4 <bt_conn_set_state+0x1d4>)
   15d64:	e7f1      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "connected";
   15d66:	4958      	ldr	r1, [pc, #352]	; (15ec8 <bt_conn_set_state+0x1d8>)
   15d68:	e7ef      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "disconnect";
   15d6a:	4958      	ldr	r1, [pc, #352]	; (15ecc <bt_conn_set_state+0x1dc>)
   15d6c:	e7ed      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "(unknown)";
   15d6e:	4958      	ldr	r1, [pc, #352]	; (15ed0 <bt_conn_set_state+0x1e0>)
   15d70:	e7eb      	b.n	15d4a <bt_conn_set_state+0x5a>
		return "disconnect-complete";
   15d72:	4958      	ldr	r1, [pc, #352]	; (15ed4 <bt_conn_set_state+0x1e4>)
   15d74:	e7e9      	b.n	15d4a <bt_conn_set_state+0x5a>
			bt_conn_ref(conn);
   15d76:	f008 fd20 	bl	1e7ba <bt_conn_ref>
   15d7a:	e7c4      	b.n	15d06 <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15d7c:	78a3      	ldrb	r3, [r4, #2]
   15d7e:	2b04      	cmp	r3, #4
   15d80:	d07d      	beq.n	15e7e <bt_conn_set_state+0x18e>
		k_fifo_init(&conn->tx_queue);
   15d82:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   15d86:	f00b faa1 	bl	212cc <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15d8a:	2100      	movs	r1, #0
   15d8c:	4852      	ldr	r0, [pc, #328]	; (15ed8 <bt_conn_set_state+0x1e8>)
   15d8e:	f006 fc6f 	bl	1c670 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15d92:	2300      	movs	r3, #0
   15d94:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   15d96:	6563      	str	r3, [r4, #84]	; 0x54
		    conn->role == BT_CONN_ROLE_PERIPHERAL) {
   15d98:	78e3      	ldrb	r3, [r4, #3]
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15d9a:	2b01      	cmp	r3, #1
   15d9c:	d16f      	bne.n	15e7e <bt_conn_set_state+0x18e>
			k_work_schedule(&conn->deferred_work,
   15d9e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   15da2:	2300      	movs	r3, #0
   15da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15da8:	f005 fb68 	bl	1b47c <k_work_schedule>
   15dac:	e067      	b.n	15e7e <bt_conn_set_state+0x18e>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15dae:	78a3      	ldrb	r3, [r4, #2]
   15db0:	2b04      	cmp	r3, #4
   15db2:	d008      	beq.n	15dc6 <bt_conn_set_state+0xd6>
		switch (old_state) {
   15db4:	2d08      	cmp	r5, #8
   15db6:	d862      	bhi.n	15e7e <bt_conn_set_state+0x18e>
   15db8:	e8df f005 	tbb	[pc, r5]
   15dbc:	4430094c 	.word	0x4430094c
   15dc0:	4c263a48 	.word	0x4c263a48
   15dc4:	4c          	.byte	0x4c
   15dc5:	00          	.byte	0x00
			bt_conn_unref(conn);
   15dc6:	4620      	mov	r0, r4
   15dc8:	f008 fd1e 	bl	1e808 <bt_conn_unref>
			break;
   15dcc:	e057      	b.n	15e7e <bt_conn_set_state+0x18e>
			tx_notify(conn);
   15dce:	4620      	mov	r0, r4
   15dd0:	f008 fbfe 	bl	1e5d0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   15dd4:	78a3      	ldrb	r3, [r4, #2]
   15dd6:	2b01      	cmp	r3, #1
   15dd8:	d011      	beq.n	15dfe <bt_conn_set_state+0x10e>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   15dda:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15ddc:	f3bf 8f5b 	dmb	ish
   15de0:	e854 3f00 	ldrex	r3, [r4]
   15de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15de8:	e844 3200 	strex	r2, r3, [r4]
   15dec:	2a00      	cmp	r2, #0
   15dee:	d1f7      	bne.n	15de0 <bt_conn_set_state+0xf0>
   15df0:	f3bf 8f5b 	dmb	ish
   15df4:	2100      	movs	r1, #0
   15df6:	4838      	ldr	r0, [pc, #224]	; (15ed8 <bt_conn_set_state+0x1e8>)
   15df8:	f006 fc3a 	bl	1c670 <z_impl_k_poll_signal_raise>
   15dfc:	e03f      	b.n	15e7e <bt_conn_set_state+0x18e>
				k_work_cancel_delayable(&conn->deferred_work);
   15dfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15e02:	f00b fbbd 	bl	21580 <k_work_cancel_delayable>
   15e06:	e7e8      	b.n	15dda <bt_conn_set_state+0xea>
			if (conn->err) {
   15e08:	7a63      	ldrb	r3, [r4, #9]
   15e0a:	b91b      	cbnz	r3, 15e14 <bt_conn_set_state+0x124>
			bt_conn_unref(conn);
   15e0c:	4620      	mov	r0, r4
   15e0e:	f008 fcfb 	bl	1e808 <bt_conn_unref>
			break;
   15e12:	e034      	b.n	15e7e <bt_conn_set_state+0x18e>
				notify_connected(conn);
   15e14:	4620      	mov	r0, r4
   15e16:	f7ff fd27 	bl	15868 <notify_connected>
   15e1a:	e7f7      	b.n	15e0c <bt_conn_set_state+0x11c>
			if (conn->err) {
   15e1c:	7a63      	ldrb	r3, [r4, #9]
   15e1e:	b91b      	cbnz	r3, 15e28 <bt_conn_set_state+0x138>
			bt_conn_unref(conn);
   15e20:	4620      	mov	r0, r4
   15e22:	f008 fcf1 	bl	1e808 <bt_conn_unref>
			break;
   15e26:	e02a      	b.n	15e7e <bt_conn_set_state+0x18e>
				notify_connected(conn);
   15e28:	4620      	mov	r0, r4
   15e2a:	f7ff fd1d 	bl	15868 <notify_connected>
   15e2e:	e7f7      	b.n	15e20 <bt_conn_set_state+0x130>
			if (conn->err) {
   15e30:	7a63      	ldrb	r3, [r4, #9]
   15e32:	b91b      	cbnz	r3, 15e3c <bt_conn_set_state+0x14c>
			bt_conn_unref(conn);
   15e34:	4620      	mov	r0, r4
   15e36:	f008 fce7 	bl	1e808 <bt_conn_unref>
			break;
   15e3a:	e020      	b.n	15e7e <bt_conn_set_state+0x18e>
				notify_connected(conn);
   15e3c:	4620      	mov	r0, r4
   15e3e:	f7ff fd13 	bl	15868 <notify_connected>
   15e42:	e7f7      	b.n	15e34 <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   15e44:	4620      	mov	r0, r4
   15e46:	f008 fcdf 	bl	1e808 <bt_conn_unref>
			break;
   15e4a:	e018      	b.n	15e7e <bt_conn_set_state+0x18e>
			bt_conn_unref(conn);
   15e4c:	4620      	mov	r0, r4
   15e4e:	f008 fcdb 	bl	1e808 <bt_conn_unref>
			break;
   15e52:	e014      	b.n	15e7e <bt_conn_set_state+0x18e>
   15e54:	4b13      	ldr	r3, [pc, #76]	; (15ea4 <bt_conn_set_state+0x1b4>)
   15e56:	4a14      	ldr	r2, [pc, #80]	; (15ea8 <bt_conn_set_state+0x1b8>)
   15e58:	1a9b      	subs	r3, r3, r2
   15e5a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   15e5c:	f04f 0200 	mov.w	r2, #0
   15e60:	2102      	movs	r1, #2
   15e62:	f361 0202 	bfi	r2, r1, #0, #3
   15e66:	f36f 02c5 	bfc	r2, #3, #3
   15e6a:	f363 128f 	bfi	r2, r3, #6, #10
   15e6e:	4631      	mov	r1, r6
   15e70:	481a      	ldr	r0, [pc, #104]	; (15edc <bt_conn_set_state+0x1ec>)
   15e72:	f7fa fddf 	bl	10a34 <log_1>
   15e76:	e002      	b.n	15e7e <bt_conn_set_state+0x18e>
		process_unack_tx(conn);
   15e78:	4620      	mov	r0, r4
   15e7a:	f008 fbf5 	bl	1e668 <process_unack_tx>
}
   15e7e:	bd70      	pop	{r4, r5, r6, pc}
   15e80:	4b08      	ldr	r3, [pc, #32]	; (15ea4 <bt_conn_set_state+0x1b4>)
   15e82:	4a09      	ldr	r2, [pc, #36]	; (15ea8 <bt_conn_set_state+0x1b8>)
   15e84:	1a9b      	subs	r3, r3, r2
   15e86:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   15e88:	f04f 0200 	mov.w	r2, #0
   15e8c:	2102      	movs	r1, #2
   15e8e:	f361 0202 	bfi	r2, r1, #0, #3
   15e92:	f36f 02c5 	bfc	r2, #3, #3
   15e96:	f363 128f 	bfi	r2, r3, #6, #10
   15e9a:	4631      	mov	r1, r6
   15e9c:	4810      	ldr	r0, [pc, #64]	; (15ee0 <bt_conn_set_state+0x1f0>)
   15e9e:	f7fa fdc9 	bl	10a34 <log_1>
   15ea2:	e7ec      	b.n	15e7e <bt_conn_set_state+0x18e>
   15ea4:	00021f9c 	.word	0x00021f9c
   15ea8:	00021f84 	.word	0x00021f84
   15eac:	00023750 	.word	0x00023750
   15eb0:	00023760 	.word	0x00023760
   15eb4:	00023700 	.word	0x00023700
   15eb8:	00023710 	.word	0x00023710
   15ebc:	00023720 	.word	0x00023720
   15ec0:	0002372c 	.word	0x0002372c
   15ec4:	0002373c 	.word	0x0002373c
   15ec8:	000239f8 	.word	0x000239f8
   15ecc:	00023744 	.word	0x00023744
   15ed0:	000236e0 	.word	0x000236e0
   15ed4:	000236ec 	.word	0x000236ec
   15ed8:	2000056c 	.word	0x2000056c
   15edc:	00023774 	.word	0x00023774
   15ee0:	0002378c 	.word	0x0002378c

00015ee4 <bt_conn_index>:
		index = conn - acl_conns;
   15ee4:	4b03      	ldr	r3, [pc, #12]	; (15ef4 <bt_conn_index+0x10>)
   15ee6:	1ac0      	subs	r0, r0, r3
   15ee8:	1180      	asrs	r0, r0, #6
   15eea:	4b03      	ldr	r3, [pc, #12]	; (15ef8 <bt_conn_index+0x14>)
   15eec:	fb03 f000 	mul.w	r0, r3, r0
}
   15ef0:	b2c0      	uxtb	r0, r0
   15ef2:	4770      	bx	lr
   15ef4:	200016e0 	.word	0x200016e0
   15ef8:	aaaaaaab 	.word	0xaaaaaaab

00015efc <bt_conn_create_pdu_timeout>:
{
   15efc:	b538      	push	{r3, r4, r5, lr}
   15efe:	460c      	mov	r4, r1
	if (!pool) {
   15f00:	4601      	mov	r1, r0
   15f02:	b150      	cbz	r0, 15f1a <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   15f04:	4608      	mov	r0, r1
   15f06:	f00a f85e 	bl	1ffc6 <net_buf_alloc_fixed>
	if (!buf) {
   15f0a:	4605      	mov	r5, r0
   15f0c:	b138      	cbz	r0, 15f1e <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   15f0e:	1d21      	adds	r1, r4, #4
   15f10:	3008      	adds	r0, #8
   15f12:	f00a f87a 	bl	2000a <net_buf_simple_reserve>
}
   15f16:	4628      	mov	r0, r5
   15f18:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   15f1a:	4909      	ldr	r1, [pc, #36]	; (15f40 <bt_conn_create_pdu_timeout+0x44>)
   15f1c:	e7f2      	b.n	15f04 <bt_conn_create_pdu_timeout+0x8>
   15f1e:	4b09      	ldr	r3, [pc, #36]	; (15f44 <bt_conn_create_pdu_timeout+0x48>)
   15f20:	4a09      	ldr	r2, [pc, #36]	; (15f48 <bt_conn_create_pdu_timeout+0x4c>)
   15f22:	1a9b      	subs	r3, r3, r2
   15f24:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   15f26:	f04f 0100 	mov.w	r1, #0
   15f2a:	2202      	movs	r2, #2
   15f2c:	f362 0102 	bfi	r1, r2, #0, #3
   15f30:	f36f 01c5 	bfc	r1, #3, #3
   15f34:	f363 118f 	bfi	r1, r3, #6, #10
   15f38:	4804      	ldr	r0, [pc, #16]	; (15f4c <bt_conn_create_pdu_timeout+0x50>)
   15f3a:	f7fa fe31 	bl	10ba0 <log_0>
		return NULL;
   15f3e:	e7ea      	b.n	15f16 <bt_conn_create_pdu_timeout+0x1a>
   15f40:	2000077c 	.word	0x2000077c
   15f44:	00021f9c 	.word	0x00021f9c
   15f48:	00021f84 	.word	0x00021f84
   15f4c:	000237a8 	.word	0x000237a8

00015f50 <notify_le_param_updated>:
{
   15f50:	b570      	push	{r4, r5, r6, lr}
   15f52:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15f54:	f3bf 8f5b 	dmb	ish
   15f58:	6843      	ldr	r3, [r0, #4]
   15f5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15f5e:	f413 7f00 	tst.w	r3, #512	; 0x200
   15f62:	d010      	beq.n	15f86 <notify_le_param_updated+0x36>
   15f64:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   15f66:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   15f6a:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15f6e:	428b      	cmp	r3, r1
   15f70:	d309      	bcc.n	15f86 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   15f72:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   15f76:	428b      	cmp	r3, r1
   15f78:	d805      	bhi.n	15f86 <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   15f7a:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   15f7e:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   15f82:	4299      	cmp	r1, r3
   15f84:	d002      	beq.n	15f8c <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   15f86:	4b18      	ldr	r3, [pc, #96]	; (15fe8 <notify_le_param_updated+0x98>)
   15f88:	681d      	ldr	r5, [r3, #0]
   15f8a:	e00d      	b.n	15fa8 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15f8c:	f3bf 8f5b 	dmb	ish
   15f90:	e852 3f00 	ldrex	r3, [r2]
   15f94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   15f98:	e842 3100 	strex	r1, r3, [r2]
   15f9c:	2900      	cmp	r1, #0
   15f9e:	d1f7      	bne.n	15f90 <notify_le_param_updated+0x40>
   15fa0:	f3bf 8f5b 	dmb	ish
}
   15fa4:	e7ef      	b.n	15f86 <notify_le_param_updated+0x36>
   15fa6:	692d      	ldr	r5, [r5, #16]
   15fa8:	b15d      	cbz	r5, 15fc2 <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   15faa:	68ee      	ldr	r6, [r5, #12]
   15fac:	2e00      	cmp	r6, #0
   15fae:	d0fa      	beq.n	15fa6 <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   15fb0:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15fb4:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15fb8:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15fbc:	4620      	mov	r0, r4
   15fbe:	47b0      	blx	r6
   15fc0:	e7f1      	b.n	15fa6 <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15fc2:	4d0a      	ldr	r5, [pc, #40]	; (15fec <notify_le_param_updated+0x9c>)
   15fc4:	e000      	b.n	15fc8 <notify_le_param_updated+0x78>
   15fc6:	3514      	adds	r5, #20
   15fc8:	4b09      	ldr	r3, [pc, #36]	; (15ff0 <notify_le_param_updated+0xa0>)
   15fca:	429d      	cmp	r5, r3
   15fcc:	d20b      	bcs.n	15fe6 <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   15fce:	68ee      	ldr	r6, [r5, #12]
   15fd0:	2e00      	cmp	r6, #0
   15fd2:	d0f8      	beq.n	15fc6 <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   15fd4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15fd8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15fdc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15fe0:	4620      	mov	r0, r4
   15fe2:	47b0      	blx	r6
   15fe4:	e7ef      	b.n	15fc6 <notify_le_param_updated+0x76>
}
   15fe6:	bd70      	pop	{r4, r5, r6, pc}
   15fe8:	20001f88 	.word	0x20001f88
   15fec:	00021f58 	.word	0x00021f58
   15ff0:	00021f6c 	.word	0x00021f6c

00015ff4 <le_param_req>:
{
   15ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ff6:	4606      	mov	r6, r0
   15ff8:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15ffa:	4608      	mov	r0, r1
   15ffc:	f008 f830 	bl	1e060 <bt_le_conn_params_valid>
   16000:	4607      	mov	r7, r0
   16002:	b338      	cbz	r0, 16054 <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   16004:	4b15      	ldr	r3, [pc, #84]	; (1605c <le_param_req+0x68>)
   16006:	681c      	ldr	r4, [r3, #0]
   16008:	e000      	b.n	1600c <le_param_req+0x18>
   1600a:	6924      	ldr	r4, [r4, #16]
   1600c:	b16c      	cbz	r4, 1602a <le_param_req+0x36>
		if (!cb->le_param_req) {
   1600e:	68a3      	ldr	r3, [r4, #8]
   16010:	2b00      	cmp	r3, #0
   16012:	d0fa      	beq.n	1600a <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   16014:	4629      	mov	r1, r5
   16016:	4630      	mov	r0, r6
   16018:	4798      	blx	r3
   1601a:	b1d0      	cbz	r0, 16052 <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   1601c:	4628      	mov	r0, r5
   1601e:	f008 f81f 	bl	1e060 <bt_le_conn_params_valid>
   16022:	2800      	cmp	r0, #0
   16024:	d1f1      	bne.n	1600a <le_param_req+0x16>
			return false;
   16026:	4607      	mov	r7, r0
   16028:	e014      	b.n	16054 <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1602a:	4c0d      	ldr	r4, [pc, #52]	; (16060 <le_param_req+0x6c>)
   1602c:	e000      	b.n	16030 <le_param_req+0x3c>
   1602e:	3414      	adds	r4, #20
   16030:	4b0c      	ldr	r3, [pc, #48]	; (16064 <le_param_req+0x70>)
   16032:	429c      	cmp	r4, r3
   16034:	d20e      	bcs.n	16054 <le_param_req+0x60>
		if (!cb->le_param_req) {
   16036:	68a3      	ldr	r3, [r4, #8]
   16038:	2b00      	cmp	r3, #0
   1603a:	d0f8      	beq.n	1602e <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   1603c:	4629      	mov	r1, r5
   1603e:	4630      	mov	r0, r6
   16040:	4798      	blx	r3
   16042:	b148      	cbz	r0, 16058 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   16044:	4628      	mov	r0, r5
   16046:	f008 f80b 	bl	1e060 <bt_le_conn_params_valid>
   1604a:	2800      	cmp	r0, #0
   1604c:	d1ef      	bne.n	1602e <le_param_req+0x3a>
			return false;
   1604e:	4607      	mov	r7, r0
   16050:	e000      	b.n	16054 <le_param_req+0x60>
			return false;
   16052:	4607      	mov	r7, r0
}
   16054:	4638      	mov	r0, r7
   16056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   16058:	4607      	mov	r7, r0
   1605a:	e7fb      	b.n	16054 <le_param_req+0x60>
   1605c:	20001f88 	.word	0x20001f88
   16060:	00021f58 	.word	0x00021f58
   16064:	00021f6c 	.word	0x00021f6c

00016068 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   16068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1606a:	4607      	mov	r7, r0
   1606c:	460e      	mov	r6, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   1606e:	2400      	movs	r4, #0
   16070:	2c00      	cmp	r4, #0
   16072:	dd02      	ble.n	1607a <bt_conn_lookup_addr_le+0x12>
		}

		return conn;
	}

	return NULL;
   16074:	2500      	movs	r5, #0
}
   16076:	4628      	mov	r0, r5
   16078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1607a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1607e:	480c      	ldr	r0, [pc, #48]	; (160b0 <bt_conn_lookup_addr_le+0x48>)
   16080:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   16084:	f008 fb99 	bl	1e7ba <bt_conn_ref>
		if (!conn) {
   16088:	4605      	mov	r5, r0
   1608a:	b170      	cbz	r0, 160aa <bt_conn_lookup_addr_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
   1608c:	7883      	ldrb	r3, [r0, #2]
   1608e:	2b01      	cmp	r3, #1
   16090:	d109      	bne.n	160a6 <bt_conn_lookup_addr_le+0x3e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   16092:	4632      	mov	r2, r6
   16094:	4639      	mov	r1, r7
   16096:	f008 fc21 	bl	1e8dc <bt_conn_is_peer_addr_le>
   1609a:	2800      	cmp	r0, #0
   1609c:	d1eb      	bne.n	16076 <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   1609e:	4628      	mov	r0, r5
   160a0:	f008 fbb2 	bl	1e808 <bt_conn_unref>
			continue;
   160a4:	e001      	b.n	160aa <bt_conn_lookup_addr_le+0x42>
			bt_conn_unref(conn);
   160a6:	f008 fbaf 	bl	1e808 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   160aa:	3401      	adds	r4, #1
   160ac:	e7e0      	b.n	16070 <bt_conn_lookup_addr_le+0x8>
   160ae:	bf00      	nop
   160b0:	200016e0 	.word	0x200016e0

000160b4 <bt_conn_exists_le>:
{
   160b4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   160b6:	f7ff ffd7 	bl	16068 <bt_conn_lookup_addr_le>
	if (conn) {
   160ba:	b908      	cbnz	r0, 160c0 <bt_conn_exists_le+0xc>
	return false;
   160bc:	2000      	movs	r0, #0
}
   160be:	bd10      	pop	{r4, pc}
   160c0:	4604      	mov	r4, r0
   160c2:	4b19      	ldr	r3, [pc, #100]	; (16128 <bt_conn_exists_le+0x74>)
   160c4:	4a19      	ldr	r2, [pc, #100]	; (1612c <bt_conn_exists_le+0x78>)
   160c6:	1a9b      	subs	r3, r3, r2
   160c8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   160ca:	f04f 0200 	mov.w	r2, #0
   160ce:	2102      	movs	r1, #2
   160d0:	f361 0202 	bfi	r2, r1, #0, #3
   160d4:	f36f 02c5 	bfc	r2, #3, #3
   160d8:	f363 128f 	bfi	r2, r3, #6, #10
   160dc:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   160de:	2b08      	cmp	r3, #8
   160e0:	d81d      	bhi.n	1611e <bt_conn_exists_le+0x6a>
   160e2:	e8df f003 	tbb	[pc, r3]
   160e6:	1e05      	.short	0x1e05
   160e8:	1012140e 	.word	0x1012140e
   160ec:	1816      	.short	0x1816
   160ee:	1a          	.byte	0x1a
   160ef:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   160f0:	490f      	ldr	r1, [pc, #60]	; (16130 <bt_conn_exists_le+0x7c>)
   160f2:	4810      	ldr	r0, [pc, #64]	; (16134 <bt_conn_exists_le+0x80>)
   160f4:	f7fa fc9e 	bl	10a34 <log_1>
		bt_conn_unref(conn);
   160f8:	4620      	mov	r0, r4
   160fa:	f008 fb85 	bl	1e808 <bt_conn_unref>
		return true;
   160fe:	2001      	movs	r0, #1
   16100:	e7dd      	b.n	160be <bt_conn_exists_le+0xa>
		return "connect-scan";
   16102:	490d      	ldr	r1, [pc, #52]	; (16138 <bt_conn_exists_le+0x84>)
   16104:	e7f5      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   16106:	490d      	ldr	r1, [pc, #52]	; (1613c <bt_conn_exists_le+0x88>)
   16108:	e7f3      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "connect-adv";
   1610a:	490d      	ldr	r1, [pc, #52]	; (16140 <bt_conn_exists_le+0x8c>)
   1610c:	e7f1      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "connect-auto";
   1610e:	490d      	ldr	r1, [pc, #52]	; (16144 <bt_conn_exists_le+0x90>)
   16110:	e7ef      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "connect";
   16112:	490d      	ldr	r1, [pc, #52]	; (16148 <bt_conn_exists_le+0x94>)
   16114:	e7ed      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "connected";
   16116:	490d      	ldr	r1, [pc, #52]	; (1614c <bt_conn_exists_le+0x98>)
   16118:	e7eb      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "disconnect";
   1611a:	490d      	ldr	r1, [pc, #52]	; (16150 <bt_conn_exists_le+0x9c>)
   1611c:	e7e9      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "(unknown)";
   1611e:	490d      	ldr	r1, [pc, #52]	; (16154 <bt_conn_exists_le+0xa0>)
   16120:	e7e7      	b.n	160f2 <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   16122:	490d      	ldr	r1, [pc, #52]	; (16158 <bt_conn_exists_le+0xa4>)
   16124:	e7e5      	b.n	160f2 <bt_conn_exists_le+0x3e>
   16126:	bf00      	nop
   16128:	00021f9c 	.word	0x00021f9c
   1612c:	00021f84 	.word	0x00021f84
   16130:	00023750 	.word	0x00023750
   16134:	000237d4 	.word	0x000237d4
   16138:	00023700 	.word	0x00023700
   1613c:	00023710 	.word	0x00023710
   16140:	00023720 	.word	0x00023720
   16144:	0002372c 	.word	0x0002372c
   16148:	0002373c 	.word	0x0002373c
   1614c:	000239f8 	.word	0x000239f8
   16150:	00023744 	.word	0x00023744
   16154:	000236e0 	.word	0x000236e0
   16158:	000236ec 	.word	0x000236ec

0001615c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1615c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16160:	4607      	mov	r7, r0
   16162:	460e      	mov	r6, r1
   16164:	4690      	mov	r8, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   16166:	2400      	movs	r4, #0
   16168:	2c00      	cmp	r4, #0
   1616a:	dd03      	ble.n	16174 <bt_conn_lookup_state_le+0x18>
		}

		return conn;
	}

	return NULL;
   1616c:	2500      	movs	r5, #0
}
   1616e:	4628      	mov	r0, r5
   16170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16174:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   16178:	4b10      	ldr	r3, [pc, #64]	; (161bc <bt_conn_lookup_state_le+0x60>)
   1617a:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1617e:	f008 fb1c 	bl	1e7ba <bt_conn_ref>
		if (!conn) {
   16182:	4605      	mov	r5, r0
   16184:	b188      	cbz	r0, 161aa <bt_conn_lookup_state_le+0x4e>
		if (conn->type != BT_CONN_TYPE_LE) {
   16186:	7883      	ldrb	r3, [r0, #2]
   16188:	2b01      	cmp	r3, #1
   1618a:	d110      	bne.n	161ae <bt_conn_lookup_state_le+0x52>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1618c:	b126      	cbz	r6, 16198 <bt_conn_lookup_state_le+0x3c>
   1618e:	4632      	mov	r2, r6
   16190:	4639      	mov	r1, r7
   16192:	f008 fba3 	bl	1e8dc <bt_conn_is_peer_addr_le>
   16196:	b168      	cbz	r0, 161b4 <bt_conn_lookup_state_le+0x58>
		if (!(conn->state == state && conn->id == id)) {
   16198:	7aab      	ldrb	r3, [r5, #10]
   1619a:	4543      	cmp	r3, r8
   1619c:	d102      	bne.n	161a4 <bt_conn_lookup_state_le+0x48>
   1619e:	7a2b      	ldrb	r3, [r5, #8]
   161a0:	42bb      	cmp	r3, r7
   161a2:	d0e4      	beq.n	1616e <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   161a4:	4628      	mov	r0, r5
   161a6:	f008 fb2f 	bl	1e808 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   161aa:	3401      	adds	r4, #1
   161ac:	e7dc      	b.n	16168 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   161ae:	f008 fb2b 	bl	1e808 <bt_conn_unref>
			continue;
   161b2:	e7fa      	b.n	161aa <bt_conn_lookup_state_le+0x4e>
			bt_conn_unref(conn);
   161b4:	4628      	mov	r0, r5
   161b6:	f008 fb27 	bl	1e808 <bt_conn_unref>
			continue;
   161ba:	e7f6      	b.n	161aa <bt_conn_lookup_state_le+0x4e>
   161bc:	200016e0 	.word	0x200016e0

000161c0 <send_conn_le_param_update>:
{
   161c0:	b538      	push	{r3, r4, r5, lr}
   161c2:	4604      	mov	r4, r0
   161c4:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   161c6:	4608      	mov	r0, r1
   161c8:	f007 ff4a 	bl	1e060 <bt_le_conn_params_valid>
   161cc:	b360      	cbz	r0, 16228 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   161ce:	4b18      	ldr	r3, [pc, #96]	; (16230 <send_conn_le_param_update+0x70>)
   161d0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   161d4:	f013 0f02 	tst.w	r3, #2
   161d8:	d004      	beq.n	161e4 <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   161da:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   161de:	f013 0f02 	tst.w	r3, #2
   161e2:	d113      	bne.n	1620c <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   161e4:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   161e6:	b9d3      	cbnz	r3, 1621e <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   161e8:	4629      	mov	r1, r5
   161ea:	4620      	mov	r0, r4
   161ec:	f008 fb9d 	bl	1e92a <bt_conn_le_conn_update>
		if (rc == 0) {
   161f0:	b9c8      	cbnz	r0, 16226 <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   161f2:	882b      	ldrh	r3, [r5, #0]
   161f4:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   161f8:	886b      	ldrh	r3, [r5, #2]
   161fa:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   161fe:	88ab      	ldrh	r3, [r5, #4]
   16200:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   16204:	88eb      	ldrh	r3, [r5, #6]
   16206:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   1620a:	e00c      	b.n	16226 <send_conn_le_param_update+0x66>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1620c:	f3bf 8f5b 	dmb	ish
   16210:	6863      	ldr	r3, [r4, #4]
   16212:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   16216:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1621a:	d1e3      	bne.n	161e4 <send_conn_le_param_update+0x24>
   1621c:	e7e4      	b.n	161e8 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   1621e:	4629      	mov	r1, r5
   16220:	4620      	mov	r0, r4
   16222:	f008 fc91 	bl	1eb48 <bt_l2cap_update_conn_param>
}
   16226:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   16228:	f06f 0015 	mvn.w	r0, #21
   1622c:	e7fb      	b.n	16226 <send_conn_le_param_update+0x66>
   1622e:	bf00      	nop
   16230:	200002a8 	.word	0x200002a8

00016234 <deferred_work>:
{
   16234:	b530      	push	{r4, r5, lr}
   16236:	b085      	sub	sp, #20
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   16238:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   1623c:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   16240:	b3b3      	cbz	r3, 162b0 <deferred_work+0x7c>
	if (conn->type != BT_CONN_TYPE_LE) {
   16242:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   16246:	2b01      	cmp	r3, #1
   16248:	d130      	bne.n	162ac <deferred_work+0x78>
	if (atomic_test_and_clear_bit(conn->flags,
   1624a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1624e:	f3bf 8f5b 	dmb	ish
   16252:	e855 3f00 	ldrex	r3, [r5]
   16256:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1625a:	e845 2100 	strex	r1, r2, [r5]
   1625e:	2900      	cmp	r1, #0
   16260:	d1f7      	bne.n	16252 <deferred_work+0x1e>
   16262:	f3bf 8f5b 	dmb	ish
   16266:	f413 7f00 	tst.w	r3, #512	; 0x200
   1626a:	d02b      	beq.n	162c4 <deferred_work+0x90>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1626c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   16270:	f8ad 3000 	strh.w	r3, [sp]
   16274:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   16278:	f8ad 3002 	strh.w	r3, [sp, #2]
   1627c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   16280:	f8ad 3004 	strh.w	r3, [sp, #4]
   16284:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   16288:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   1628c:	4669      	mov	r1, sp
   1628e:	4620      	mov	r0, r4
   16290:	f7ff ff96 	bl	161c0 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16294:	f3bf 8f5b 	dmb	ish
   16298:	e855 3f00 	ldrex	r3, [r5]
   1629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   162a0:	e845 3200 	strex	r2, r3, [r5]
   162a4:	2a00      	cmp	r2, #0
   162a6:	d1f7      	bne.n	16298 <deferred_work+0x64>
   162a8:	f3bf 8f5b 	dmb	ish
}
   162ac:	b005      	add	sp, #20
   162ae:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   162b0:	4620      	mov	r0, r4
   162b2:	f008 fbbb 	bl	1ea2c <bt_l2cap_disconnected>
		notify_disconnected(conn);
   162b6:	4620      	mov	r0, r4
   162b8:	f7ff fa90 	bl	157dc <notify_disconnected>
		bt_conn_unref(conn);
   162bc:	4620      	mov	r0, r4
   162be:	f008 faa3 	bl	1e808 <bt_conn_unref>
		return;
   162c2:	e7f3      	b.n	162ac <deferred_work+0x78>
		param = BT_LE_CONN_PARAM(
   162c4:	4a05      	ldr	r2, [pc, #20]	; (162dc <deferred_work+0xa8>)
   162c6:	ab02      	add	r3, sp, #8
   162c8:	e892 0003 	ldmia.w	r2, {r0, r1}
   162cc:	e883 0003 	stmia.w	r3, {r0, r1}
		send_conn_le_param_update(conn, param);
   162d0:	4619      	mov	r1, r3
   162d2:	4620      	mov	r0, r4
   162d4:	f7ff ff74 	bl	161c0 <send_conn_le_param_update>
   162d8:	e7dc      	b.n	16294 <deferred_work+0x60>
   162da:	bf00      	nop
   162dc:	0002215c 	.word	0x0002215c

000162e0 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   162e0:	b508      	push	{r3, lr}
   162e2:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   162e4:	4801      	ldr	r0, [pc, #4]	; (162ec <bt_conn_create_frag_timeout+0xc>)
   162e6:	f7ff fe09 	bl	15efc <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   162ea:	bd08      	pop	{r3, pc}
   162ec:	200007cc 	.word	0x200007cc

000162f0 <create_frag>:
{
   162f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   162f2:	4606      	mov	r6, r0
   162f4:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   162f6:	f04f 32ff 	mov.w	r2, #4294967295
   162fa:	f04f 33ff 	mov.w	r3, #4294967295
   162fe:	2000      	movs	r0, #0
   16300:	f7ff ffee 	bl	162e0 <bt_conn_create_frag_timeout>
   16304:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   16306:	7ab3      	ldrb	r3, [r6, #10]
   16308:	2b07      	cmp	r3, #7
   1630a:	d11a      	bne.n	16342 <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   1630c:	2300      	movs	r3, #0
   1630e:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   16310:	4b10      	ldr	r3, [pc, #64]	; (16354 <create_frag+0x64>)
   16312:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   16316:	f100 0708 	add.w	r7, r0, #8
   1631a:	4638      	mov	r0, r7
   1631c:	f009 ff0c 	bl	20138 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16320:	4286      	cmp	r6, r0
   16322:	d212      	bcs.n	1634a <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   16324:	4b0b      	ldr	r3, [pc, #44]	; (16354 <create_frag+0x64>)
   16326:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1632a:	4632      	mov	r2, r6
   1632c:	f855 1f08 	ldr.w	r1, [r5, #8]!
   16330:	4638      	mov	r0, r7
   16332:	f009 fecb 	bl	200cc <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16336:	4631      	mov	r1, r6
   16338:	4628      	mov	r0, r5
   1633a:	f009 fee1 	bl	20100 <net_buf_simple_pull>
}
   1633e:	4620      	mov	r0, r4
   16340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   16342:	f009 fe73 	bl	2002c <net_buf_unref>
		return NULL;
   16346:	2400      	movs	r4, #0
   16348:	e7f9      	b.n	1633e <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   1634a:	4638      	mov	r0, r7
   1634c:	f009 fef4 	bl	20138 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16350:	b286      	uxth	r6, r0
   16352:	e7ea      	b.n	1632a <create_frag+0x3a>
   16354:	200002a8 	.word	0x200002a8

00016358 <send_buf>:
{
   16358:	b538      	push	{r3, r4, r5, lr}
   1635a:	4605      	mov	r5, r0
   1635c:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1635e:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   16360:	4a1b      	ldr	r2, [pc, #108]	; (163d0 <send_buf+0x78>)
   16362:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   16366:	429a      	cmp	r2, r3
   16368:	d21f      	bcs.n	163aa <send_buf+0x52>
	frag = create_frag(conn, buf);
   1636a:	f7ff ffc1 	bl	162f0 <create_frag>
	if (!frag) {
   1636e:	4601      	mov	r1, r0
   16370:	b350      	cbz	r0, 163c8 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16372:	2301      	movs	r3, #1
   16374:	2200      	movs	r2, #0
   16376:	4628      	mov	r0, r5
   16378:	f7ff faa2 	bl	158c0 <send_frag>
   1637c:	4603      	mov	r3, r0
   1637e:	b1c8      	cbz	r0, 163b4 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   16380:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   16382:	4a13      	ldr	r2, [pc, #76]	; (163d0 <send_buf+0x78>)
   16384:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   16388:	429a      	cmp	r2, r3
   1638a:	d215      	bcs.n	163b8 <send_buf+0x60>
		frag = create_frag(conn, buf);
   1638c:	4621      	mov	r1, r4
   1638e:	4628      	mov	r0, r5
   16390:	f7ff ffae 	bl	162f0 <create_frag>
		if (!frag) {
   16394:	4601      	mov	r1, r0
   16396:	b1c8      	cbz	r0, 163cc <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16398:	2301      	movs	r3, #1
   1639a:	461a      	mov	r2, r3
   1639c:	4628      	mov	r0, r5
   1639e:	f7ff fa8f 	bl	158c0 <send_frag>
   163a2:	4603      	mov	r3, r0
   163a4:	2800      	cmp	r0, #0
   163a6:	d1eb      	bne.n	16380 <send_buf+0x28>
   163a8:	e004      	b.n	163b4 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   163aa:	2300      	movs	r3, #0
   163ac:	2202      	movs	r2, #2
   163ae:	f7ff fa87 	bl	158c0 <send_frag>
   163b2:	4603      	mov	r3, r0
}
   163b4:	4618      	mov	r0, r3
   163b6:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   163b8:	2300      	movs	r3, #0
   163ba:	2203      	movs	r2, #3
   163bc:	4621      	mov	r1, r4
   163be:	4628      	mov	r0, r5
   163c0:	f7ff fa7e 	bl	158c0 <send_frag>
   163c4:	4603      	mov	r3, r0
   163c6:	e7f5      	b.n	163b4 <send_buf+0x5c>
		return false;
   163c8:	2300      	movs	r3, #0
   163ca:	e7f3      	b.n	163b4 <send_buf+0x5c>
			return false;
   163cc:	2300      	movs	r3, #0
   163ce:	e7f1      	b.n	163b4 <send_buf+0x5c>
   163d0:	200002a8 	.word	0x200002a8

000163d4 <bt_conn_process_tx>:
{
   163d4:	b538      	push	{r3, r4, r5, lr}
   163d6:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   163d8:	7a83      	ldrb	r3, [r0, #10]
   163da:	b97b      	cbnz	r3, 163fc <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   163dc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   163de:	f3bf 8f5b 	dmb	ish
   163e2:	e853 2f00 	ldrex	r2, [r3]
   163e6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   163ea:	e843 1000 	strex	r0, r1, [r3]
   163ee:	2800      	cmp	r0, #0
   163f0:	d1f7      	bne.n	163e2 <bt_conn_process_tx+0xe>
   163f2:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   163f6:	f012 0f40 	tst.w	r2, #64	; 0x40
   163fa:	d10d      	bne.n	16418 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   163fc:	2200      	movs	r2, #0
   163fe:	2300      	movs	r3, #0
   16400:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16404:	f009 fde6 	bl	1ffd4 <net_buf_get>
	BT_ASSERT(buf);
   16408:	4605      	mov	r5, r0
   1640a:	b148      	cbz	r0, 16420 <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   1640c:	4629      	mov	r1, r5
   1640e:	4620      	mov	r0, r4
   16410:	f7ff ffa2 	bl	16358 <send_buf>
   16414:	b190      	cbz	r0, 1643c <bt_conn_process_tx+0x68>
}
   16416:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   16418:	4620      	mov	r0, r4
   1641a:	f008 f96f 	bl	1e6fc <conn_cleanup>
		return;
   1641e:	e7fa      	b.n	16416 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   16420:	f240 23df 	movw	r3, #735	; 0x2df
   16424:	4a07      	ldr	r2, [pc, #28]	; (16444 <bt_conn_process_tx+0x70>)
   16426:	4908      	ldr	r1, [pc, #32]	; (16448 <bt_conn_process_tx+0x74>)
   16428:	4808      	ldr	r0, [pc, #32]	; (1644c <bt_conn_process_tx+0x78>)
   1642a:	f006 f9bf 	bl	1c7ac <printk>
   1642e:	4040      	eors	r0, r0
   16430:	f380 8811 	msr	BASEPRI, r0
   16434:	f04f 0003 	mov.w	r0, #3
   16438:	df02      	svc	2
   1643a:	e7e7      	b.n	1640c <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   1643c:	4628      	mov	r0, r5
   1643e:	f009 fdf5 	bl	2002c <net_buf_unref>
   16442:	e7e8      	b.n	16416 <bt_conn_process_tx+0x42>
   16444:	000237f8 	.word	0x000237f8
   16448:	00023f68 	.word	0x00023f68
   1644c:	00022fa8 	.word	0x00022fa8

00016450 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16450:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16452:	2400      	movs	r4, #0
   16454:	e006      	b.n	16464 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   16456:	490a      	ldr	r1, [pc, #40]	; (16480 <bt_conn_init+0x30>)
   16458:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   1645c:	4809      	ldr	r0, [pc, #36]	; (16484 <bt_conn_init+0x34>)
   1645e:	f00a ff41 	bl	212e4 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   16462:	3401      	adds	r4, #1
   16464:	2c02      	cmp	r4, #2
   16466:	ddf6      	ble.n	16456 <bt_conn_init+0x6>
	}

	bt_att_init();
   16468:	f009 f8a3 	bl	1f5b2 <bt_att_init>

	err = bt_smp_init();
   1646c:	f009 fce1 	bl	1fe32 <bt_smp_init>
	if (err) {
   16470:	4604      	mov	r4, r0
   16472:	b108      	cbz	r0, 16478 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16474:	4620      	mov	r0, r4
   16476:	bd10      	pop	{r4, pc}
	bt_l2cap_init();
   16478:	f008 fb93 	bl	1eba2 <bt_l2cap_init>
	return 0;
   1647c:	e7fa      	b.n	16474 <bt_conn_init+0x24>
   1647e:	bf00      	nop
   16480:	20001f8c 	.word	0x20001f8c
   16484:	20000764 	.word	0x20000764

00016488 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   16488:	4a05      	ldr	r2, [pc, #20]	; (164a0 <get_ident+0x18>)
   1648a:	7813      	ldrb	r3, [r2, #0]
   1648c:	3301      	adds	r3, #1
   1648e:	b2db      	uxtb	r3, r3
   16490:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   16492:	b90b      	cbnz	r3, 16498 <get_ident+0x10>
		ident++;
   16494:	3301      	adds	r3, #1
   16496:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   16498:	4b01      	ldr	r3, [pc, #4]	; (164a0 <get_ident+0x18>)
   1649a:	7818      	ldrb	r0, [r3, #0]
   1649c:	4770      	bx	lr
   1649e:	bf00      	nop
   164a0:	200031a4 	.word	0x200031a4

000164a4 <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   164a4:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   164a6:	898b      	ldrh	r3, [r1, #12]
   164a8:	2b01      	cmp	r3, #1
   164aa:	d900      	bls.n	164ae <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   164ac:	bd08      	pop	{r3, pc}
   164ae:	4b08      	ldr	r3, [pc, #32]	; (164d0 <le_conn_param_rsp+0x2c>)
   164b0:	4a08      	ldr	r2, [pc, #32]	; (164d4 <le_conn_param_rsp+0x30>)
   164b2:	1a9b      	subs	r3, r3, r2
   164b4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   164b6:	f04f 0100 	mov.w	r1, #0
   164ba:	2201      	movs	r2, #1
   164bc:	f362 0102 	bfi	r1, r2, #0, #3
   164c0:	f36f 01c5 	bfc	r1, #3, #3
   164c4:	f363 118f 	bfi	r1, r3, #6, #10
   164c8:	4803      	ldr	r0, [pc, #12]	; (164d8 <le_conn_param_rsp+0x34>)
   164ca:	f7fa fb69 	bl	10ba0 <log_0>
		return;
   164ce:	e7ed      	b.n	164ac <le_conn_param_rsp+0x8>
   164d0:	00021fbc 	.word	0x00021fbc
   164d4:	00021f84 	.word	0x00021f84
   164d8:	00023850 	.word	0x00023850

000164dc <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   164dc:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   164de:	2300      	movs	r3, #0
   164e0:	2b00      	cmp	r3, #0
   164e2:	dd13      	ble.n	1650c <l2cap_accept+0x30>
   164e4:	4b12      	ldr	r3, [pc, #72]	; (16530 <l2cap_accept+0x54>)
   164e6:	4a13      	ldr	r2, [pc, #76]	; (16534 <l2cap_accept+0x58>)
   164e8:	1a9b      	subs	r3, r3, r2
   164ea:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   164ec:	f04f 0200 	mov.w	r2, #0
   164f0:	2101      	movs	r1, #1
   164f2:	f361 0202 	bfi	r2, r1, #0, #3
   164f6:	f36f 02c5 	bfc	r2, #3, #3
   164fa:	f363 128f 	bfi	r2, r3, #6, #10
   164fe:	4601      	mov	r1, r0
   16500:	480d      	ldr	r0, [pc, #52]	; (16538 <l2cap_accept+0x5c>)
   16502:	f7fa fa97 	bl	10a34 <log_1>

	return -ENOMEM;
   16506:	f06f 000b 	mvn.w	r0, #11
}
   1650a:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   1650c:	22e8      	movs	r2, #232	; 0xe8
   1650e:	fb02 f203 	mul.w	r2, r2, r3
   16512:	4c0a      	ldr	r4, [pc, #40]	; (1653c <l2cap_accept+0x60>)
   16514:	58a2      	ldr	r2, [r4, r2]
   16516:	b10a      	cbz	r2, 1651c <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   16518:	3301      	adds	r3, #1
   1651a:	e7e1      	b.n	164e0 <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   1651c:	4a07      	ldr	r2, [pc, #28]	; (1653c <l2cap_accept+0x60>)
   1651e:	20e8      	movs	r0, #232	; 0xe8
   16520:	fb00 2303 	mla	r3, r0, r3, r2
   16524:	4a06      	ldr	r2, [pc, #24]	; (16540 <l2cap_accept+0x64>)
   16526:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   16528:	600b      	str	r3, [r1, #0]
		return 0;
   1652a:	2000      	movs	r0, #0
   1652c:	e7ed      	b.n	1650a <l2cap_accept+0x2e>
   1652e:	bf00      	nop
   16530:	00021fbc 	.word	0x00021fbc
   16534:	00021f84 	.word	0x00021f84
   16538:	0002386c 	.word	0x0002386c
   1653c:	200017a0 	.word	0x200017a0
   16540:	000239d0 	.word	0x000239d0

00016544 <l2cap_rtx_timeout>:
{
   16544:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   16546:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   1654a:	f850 5c10 	ldr.w	r5, [r0, #-16]
   1654e:	4b0c      	ldr	r3, [pc, #48]	; (16580 <l2cap_rtx_timeout+0x3c>)
   16550:	4a0c      	ldr	r2, [pc, #48]	; (16584 <l2cap_rtx_timeout+0x40>)
   16552:	1a9b      	subs	r3, r3, r2
   16554:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   16556:	f04f 0200 	mov.w	r2, #0
   1655a:	2101      	movs	r1, #1
   1655c:	f361 0202 	bfi	r2, r1, #0, #3
   16560:	f36f 02c5 	bfc	r2, #3, #3
   16564:	f363 128f 	bfi	r2, r3, #6, #10
   16568:	4621      	mov	r1, r4
   1656a:	4807      	ldr	r0, [pc, #28]	; (16588 <l2cap_rtx_timeout+0x44>)
   1656c:	f7fa fa62 	bl	10a34 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   16570:	4621      	mov	r1, r4
   16572:	4628      	mov	r0, r5
   16574:	f008 fa0f 	bl	1e996 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   16578:	4620      	mov	r0, r4
   1657a:	f008 fa34 	bl	1e9e6 <bt_l2cap_chan_del>
}
   1657e:	bd38      	pop	{r3, r4, r5, pc}
   16580:	00021fbc 	.word	0x00021fbc
   16584:	00021f84 	.word	0x00021f84
   16588:	00023894 	.word	0x00023894

0001658c <l2cap_chan_add>:
{
   1658c:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   1658e:	b1d9      	cbz	r1, 165c8 <l2cap_chan_add+0x3c>
   16590:	4604      	mov	r4, r0
   16592:	4615      	mov	r5, r2
   16594:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16596:	4914      	ldr	r1, [pc, #80]	; (165e8 <l2cap_chan_add+0x5c>)
   16598:	f106 0010 	add.w	r0, r6, #16
   1659c:	f00a ffa4 	bl	214e8 <k_work_init_delayable>
	atomic_clear(chan->status);
   165a0:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   165a4:	2200      	movs	r2, #0
   165a6:	f3bf 8f5b 	dmb	ish
   165aa:	e853 1f00 	ldrex	r1, [r3]
   165ae:	e843 2000 	strex	r0, r2, [r3]
   165b2:	2800      	cmp	r0, #0
   165b4:	d1f9      	bne.n	165aa <l2cap_chan_add+0x1e>
   165b6:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   165ba:	462a      	mov	r2, r5
   165bc:	4631      	mov	r1, r6
   165be:	4620      	mov	r0, r4
   165c0:	f008 fa24 	bl	1ea0c <bt_l2cap_chan_add>
	return true;
   165c4:	2001      	movs	r0, #1
}
   165c6:	bd70      	pop	{r4, r5, r6, pc}
   165c8:	4b08      	ldr	r3, [pc, #32]	; (165ec <l2cap_chan_add+0x60>)
   165ca:	4a09      	ldr	r2, [pc, #36]	; (165f0 <l2cap_chan_add+0x64>)
   165cc:	1a9b      	subs	r3, r3, r2
   165ce:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   165d0:	2201      	movs	r2, #1
   165d2:	f362 0102 	bfi	r1, r2, #0, #3
   165d6:	f36f 01c5 	bfc	r1, #3, #3
   165da:	f363 118f 	bfi	r1, r3, #6, #10
   165de:	4805      	ldr	r0, [pc, #20]	; (165f4 <l2cap_chan_add+0x68>)
   165e0:	f7fa fade 	bl	10ba0 <log_0>
		return false;
   165e4:	2000      	movs	r0, #0
   165e6:	e7ee      	b.n	165c6 <l2cap_chan_add+0x3a>
   165e8:	00016545 	.word	0x00016545
   165ec:	00021fbc 	.word	0x00021fbc
   165f0:	00021f84 	.word	0x00021f84
   165f4:	000238a4 	.word	0x000238a4

000165f8 <bt_l2cap_connected>:
{
   165f8:	b530      	push	{r4, r5, lr}
   165fa:	b083      	sub	sp, #12
   165fc:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   165fe:	4c1a      	ldr	r4, [pc, #104]	; (16668 <bt_l2cap_connected+0x70>)
   16600:	e000      	b.n	16604 <bt_l2cap_connected+0xc>
   16602:	340c      	adds	r4, #12
   16604:	4b19      	ldr	r3, [pc, #100]	; (1666c <bt_l2cap_connected+0x74>)
   16606:	429c      	cmp	r4, r3
   16608:	d22c      	bcs.n	16664 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   1660a:	6863      	ldr	r3, [r4, #4]
   1660c:	a901      	add	r1, sp, #4
   1660e:	4628      	mov	r0, r5
   16610:	4798      	blx	r3
   16612:	2800      	cmp	r0, #0
   16614:	dbf5      	blt.n	16602 <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   16616:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   16618:	8823      	ldrh	r3, [r4, #0]
   1661a:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1661e:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   16622:	68a2      	ldr	r2, [r4, #8]
   16624:	4628      	mov	r0, r5
   16626:	f7ff ffb1 	bl	1658c <l2cap_chan_add>
   1662a:	b1d8      	cbz	r0, 16664 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   1662c:	9801      	ldr	r0, [sp, #4]
   1662e:	6843      	ldr	r3, [r0, #4]
   16630:	681b      	ldr	r3, [r3, #0]
   16632:	b103      	cbz	r3, 16636 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   16634:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   16636:	9b01      	ldr	r3, [sp, #4]
   16638:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1663a:	f3bf 8f5b 	dmb	ish
   1663e:	e853 2f00 	ldrex	r2, [r3]
   16642:	f042 0201 	orr.w	r2, r2, #1
   16646:	e843 2100 	strex	r1, r2, [r3]
   1664a:	2900      	cmp	r1, #0
   1664c:	d1f7      	bne.n	1663e <bt_l2cap_connected+0x46>
   1664e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16652:	9801      	ldr	r0, [sp, #4]
   16654:	6843      	ldr	r3, [r0, #4]
   16656:	699b      	ldr	r3, [r3, #24]
   16658:	2b00      	cmp	r3, #0
   1665a:	d0d2      	beq.n	16602 <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   1665c:	f100 0168 	add.w	r1, r0, #104	; 0x68
   16660:	4798      	blx	r3
   16662:	e7ce      	b.n	16602 <bt_l2cap_connected+0xa>
}
   16664:	b003      	add	sp, #12
   16666:	bd30      	pop	{r4, r5, pc}
   16668:	00021f34 	.word	0x00021f34
   1666c:	00021f58 	.word	0x00021f58

00016670 <l2cap_create_le_sig_pdu>:
{
   16670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16672:	460c      	mov	r4, r1
   16674:	4616      	mov	r6, r2
   16676:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   16678:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1667c:	2300      	movs	r3, #0
   1667e:	2100      	movs	r1, #0
   16680:	4608      	mov	r0, r1
   16682:	f008 f9f4 	bl	1ea6e <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16686:	4607      	mov	r7, r0
   16688:	b140      	cbz	r0, 1669c <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   1668a:	2104      	movs	r1, #4
   1668c:	3008      	adds	r0, #8
   1668e:	f009 fd17 	bl	200c0 <net_buf_simple_add>
	hdr->code = code;
   16692:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   16694:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   16696:	8045      	strh	r5, [r0, #2]
}
   16698:	4638      	mov	r0, r7
   1669a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1669c:	4b08      	ldr	r3, [pc, #32]	; (166c0 <l2cap_create_le_sig_pdu+0x50>)
   1669e:	4a09      	ldr	r2, [pc, #36]	; (166c4 <l2cap_create_le_sig_pdu+0x54>)
   166a0:	1a9b      	subs	r3, r3, r2
   166a2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   166a4:	f04f 0200 	mov.w	r2, #0
   166a8:	2101      	movs	r1, #1
   166aa:	f361 0202 	bfi	r2, r1, #0, #3
   166ae:	f36f 02c5 	bfc	r2, #3, #3
   166b2:	f363 128f 	bfi	r2, r3, #6, #10
   166b6:	4621      	mov	r1, r4
   166b8:	4803      	ldr	r0, [pc, #12]	; (166c8 <l2cap_create_le_sig_pdu+0x58>)
   166ba:	f7fa f9bb 	bl	10a34 <log_1>
		return NULL;
   166be:	e7eb      	b.n	16698 <l2cap_create_le_sig_pdu+0x28>
   166c0:	00021fbc 	.word	0x00021fbc
   166c4:	00021f84 	.word	0x00021f84
   166c8:	000238c8 	.word	0x000238c8

000166cc <l2cap_recv>:
{
   166cc:	b570      	push	{r4, r5, r6, lr}
   166ce:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   166d0:	898b      	ldrh	r3, [r1, #12]
   166d2:	2b03      	cmp	r3, #3
   166d4:	d917      	bls.n	16706 <l2cap_recv+0x3a>
   166d6:	4606      	mov	r6, r0
   166d8:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   166da:	2104      	movs	r1, #4
   166dc:	f104 0008 	add.w	r0, r4, #8
   166e0:	f009 fd16 	bl	20110 <net_buf_simple_pull_mem>
   166e4:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   166e6:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   166e8:	89a1      	ldrh	r1, [r4, #12]
   166ea:	4291      	cmp	r1, r2
   166ec:	d11e      	bne.n	1672c <l2cap_recv+0x60>
	if (!hdr->ident) {
   166ee:	7843      	ldrb	r3, [r0, #1]
   166f0:	b36b      	cbz	r3, 1674e <l2cap_recv+0x82>
	switch (hdr->code) {
   166f2:	7801      	ldrb	r1, [r0, #0]
   166f4:	2901      	cmp	r1, #1
   166f6:	d016      	beq.n	16726 <l2cap_recv+0x5a>
   166f8:	2913      	cmp	r1, #19
   166fa:	d139      	bne.n	16770 <l2cap_recv+0xa4>
		le_conn_param_rsp(l2cap, buf);
   166fc:	4621      	mov	r1, r4
   166fe:	4630      	mov	r0, r6
   16700:	f7ff fed0 	bl	164a4 <le_conn_param_rsp>
		break;
   16704:	e00f      	b.n	16726 <l2cap_recv+0x5a>
   16706:	4b26      	ldr	r3, [pc, #152]	; (167a0 <l2cap_recv+0xd4>)
   16708:	4a26      	ldr	r2, [pc, #152]	; (167a4 <l2cap_recv+0xd8>)
   1670a:	1a9b      	subs	r3, r3, r2
   1670c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   1670e:	f04f 0100 	mov.w	r1, #0
   16712:	2201      	movs	r2, #1
   16714:	f362 0102 	bfi	r1, r2, #0, #3
   16718:	f36f 01c5 	bfc	r1, #3, #3
   1671c:	f363 118f 	bfi	r1, r3, #6, #10
   16720:	4821      	ldr	r0, [pc, #132]	; (167a8 <l2cap_recv+0xdc>)
   16722:	f7fa fa3d 	bl	10ba0 <log_0>
}
   16726:	2000      	movs	r0, #0
   16728:	b002      	add	sp, #8
   1672a:	bd70      	pop	{r4, r5, r6, pc}
   1672c:	481c      	ldr	r0, [pc, #112]	; (167a0 <l2cap_recv+0xd4>)
   1672e:	4b1d      	ldr	r3, [pc, #116]	; (167a4 <l2cap_recv+0xd8>)
   16730:	1ac0      	subs	r0, r0, r3
   16732:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   16734:	f04f 0300 	mov.w	r3, #0
   16738:	2401      	movs	r4, #1
   1673a:	f364 0302 	bfi	r3, r4, #0, #3
   1673e:	f36f 03c5 	bfc	r3, #3, #3
   16742:	f360 138f 	bfi	r3, r0, #6, #10
   16746:	4819      	ldr	r0, [pc, #100]	; (167ac <l2cap_recv+0xe0>)
   16748:	f7fa f9aa 	bl	10aa0 <log_2>
		return 0;
   1674c:	e7eb      	b.n	16726 <l2cap_recv+0x5a>
   1674e:	4b14      	ldr	r3, [pc, #80]	; (167a0 <l2cap_recv+0xd4>)
   16750:	4a14      	ldr	r2, [pc, #80]	; (167a4 <l2cap_recv+0xd8>)
   16752:	1a9b      	subs	r3, r3, r2
   16754:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   16756:	f04f 0100 	mov.w	r1, #0
   1675a:	2201      	movs	r2, #1
   1675c:	f362 0102 	bfi	r1, r2, #0, #3
   16760:	f36f 01c5 	bfc	r1, #3, #3
   16764:	f363 118f 	bfi	r1, r3, #6, #10
   16768:	4811      	ldr	r0, [pc, #68]	; (167b0 <l2cap_recv+0xe4>)
   1676a:	f7fa fa19 	bl	10ba0 <log_0>
		return 0;
   1676e:	e7da      	b.n	16726 <l2cap_recv+0x5a>
   16770:	4b0b      	ldr	r3, [pc, #44]	; (167a0 <l2cap_recv+0xd4>)
   16772:	4a0c      	ldr	r2, [pc, #48]	; (167a4 <l2cap_recv+0xd8>)
   16774:	1a9b      	subs	r3, r3, r2
   16776:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   16778:	f04f 0200 	mov.w	r2, #0
   1677c:	2002      	movs	r0, #2
   1677e:	f360 0202 	bfi	r2, r0, #0, #3
   16782:	f36f 02c5 	bfc	r2, #3, #3
   16786:	f363 128f 	bfi	r2, r3, #6, #10
   1678a:	480a      	ldr	r0, [pc, #40]	; (167b4 <l2cap_recv+0xe8>)
   1678c:	f7fa f952 	bl	10a34 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   16790:	7869      	ldrb	r1, [r5, #1]
   16792:	2200      	movs	r2, #0
   16794:	9200      	str	r2, [sp, #0]
   16796:	4613      	mov	r3, r2
   16798:	6830      	ldr	r0, [r6, #0]
   1679a:	f008 f982 	bl	1eaa2 <l2cap_send_reject>
		break;
   1679e:	e7c2      	b.n	16726 <l2cap_recv+0x5a>
   167a0:	00021fbc 	.word	0x00021fbc
   167a4:	00021f84 	.word	0x00021f84
   167a8:	000238f0 	.word	0x000238f0
   167ac:	00023910 	.word	0x00023910
   167b0:	00023934 	.word	0x00023934
   167b4:	00023958 	.word	0x00023958

000167b8 <bt_l2cap_recv>:
{
   167b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   167ba:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   167bc:	898b      	ldrh	r3, [r1, #12]
   167be:	2b03      	cmp	r3, #3
   167c0:	d911      	bls.n	167e6 <bt_l2cap_recv+0x2e>
   167c2:	4605      	mov	r5, r0
   167c4:	4616      	mov	r6, r2
   167c6:	2104      	movs	r1, #4
   167c8:	f104 0008 	add.w	r0, r4, #8
   167cc:	f009 fca0 	bl	20110 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   167d0:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   167d2:	4639      	mov	r1, r7
   167d4:	4628      	mov	r0, r5
   167d6:	f008 f9a4 	bl	1eb22 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   167da:	b1c0      	cbz	r0, 1680e <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   167dc:	4632      	mov	r2, r6
   167de:	4621      	mov	r1, r4
   167e0:	f008 f8cb 	bl	1e97a <l2cap_chan_recv>
}
   167e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   167e6:	4b14      	ldr	r3, [pc, #80]	; (16838 <bt_l2cap_recv+0x80>)
   167e8:	4a14      	ldr	r2, [pc, #80]	; (1683c <bt_l2cap_recv+0x84>)
   167ea:	1a9b      	subs	r3, r3, r2
   167ec:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   167ee:	f04f 0100 	mov.w	r1, #0
   167f2:	2201      	movs	r2, #1
   167f4:	f362 0102 	bfi	r1, r2, #0, #3
   167f8:	f36f 01c5 	bfc	r1, #3, #3
   167fc:	f363 118f 	bfi	r1, r3, #6, #10
   16800:	480f      	ldr	r0, [pc, #60]	; (16840 <bt_l2cap_recv+0x88>)
   16802:	f7fa f9cd 	bl	10ba0 <log_0>
		net_buf_unref(buf);
   16806:	4620      	mov	r0, r4
   16808:	f009 fc10 	bl	2002c <net_buf_unref>
		return;
   1680c:	e7ea      	b.n	167e4 <bt_l2cap_recv+0x2c>
   1680e:	4b0a      	ldr	r3, [pc, #40]	; (16838 <bt_l2cap_recv+0x80>)
   16810:	4a0a      	ldr	r2, [pc, #40]	; (1683c <bt_l2cap_recv+0x84>)
   16812:	1a9b      	subs	r3, r3, r2
   16814:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   16816:	f04f 0200 	mov.w	r2, #0
   1681a:	2102      	movs	r1, #2
   1681c:	f361 0202 	bfi	r2, r1, #0, #3
   16820:	f36f 02c5 	bfc	r2, #3, #3
   16824:	f363 128f 	bfi	r2, r3, #6, #10
   16828:	4639      	mov	r1, r7
   1682a:	4806      	ldr	r0, [pc, #24]	; (16844 <bt_l2cap_recv+0x8c>)
   1682c:	f7fa f902 	bl	10a34 <log_1>
		net_buf_unref(buf);
   16830:	4620      	mov	r0, r4
   16832:	f009 fbfb 	bl	2002c <net_buf_unref>
		return;
   16836:	e7d5      	b.n	167e4 <bt_l2cap_recv+0x2c>
   16838:	00021fbc 	.word	0x00021fbc
   1683c:	00021f84 	.word	0x00021f84
   16840:	00023978 	.word	0x00023978
   16844:	00023998 	.word	0x00023998

00016848 <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   16848:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1684a:	4b03      	ldr	r3, [pc, #12]	; (16858 <att_cfm_sent+0x10>)
   1684c:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16850:	f008 f9a8 	bl	1eba4 <att_sent>
}
   16854:	bd08      	pop	{r3, pc}
   16856:	bf00      	nop
   16858:	0001ee95 	.word	0x0001ee95

0001685c <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   1685c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1685e:	4b03      	ldr	r3, [pc, #12]	; (1686c <att_rsp_sent+0x10>)
   16860:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16864:	f008 f99e 	bl	1eba4 <att_sent>
}
   16868:	bd08      	pop	{r3, pc}
   1686a:	bf00      	nop
   1686c:	0001eeb1 	.word	0x0001eeb1

00016870 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   16870:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   16872:	4b03      	ldr	r3, [pc, #12]	; (16880 <att_req_sent+0x10>)
   16874:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   16878:	f008 f994 	bl	1eba4 <att_sent>
}
   1687c:	bd08      	pop	{r3, pc}
   1687e:	bf00      	nop
   16880:	0001ee7d 	.word	0x0001ee7d

00016884 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   16884:	4b08      	ldr	r3, [pc, #32]	; (168a8 <att_cb+0x24>)
   16886:	4298      	cmp	r0, r3
   16888:	d009      	beq.n	1689e <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   1688a:	4b08      	ldr	r3, [pc, #32]	; (168ac <att_cb+0x28>)
   1688c:	4298      	cmp	r0, r3
   1688e:	d008      	beq.n	168a2 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   16890:	4b07      	ldr	r3, [pc, #28]	; (168b0 <att_cb+0x2c>)
   16892:	4298      	cmp	r0, r3
   16894:	d001      	beq.n	1689a <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   16896:	4807      	ldr	r0, [pc, #28]	; (168b4 <att_cb+0x30>)
	}
}
   16898:	4770      	bx	lr
		return att_req_sent;
   1689a:	4807      	ldr	r0, [pc, #28]	; (168b8 <att_cb+0x34>)
   1689c:	4770      	bx	lr
		return att_rsp_sent;
   1689e:	4807      	ldr	r0, [pc, #28]	; (168bc <att_cb+0x38>)
   168a0:	4770      	bx	lr
		return att_cfm_sent;
   168a2:	4807      	ldr	r0, [pc, #28]	; (168c0 <att_cb+0x3c>)
   168a4:	4770      	bx	lr
   168a6:	bf00      	nop
   168a8:	0001eeb1 	.word	0x0001eeb1
   168ac:	0001ee95 	.word	0x0001ee95
   168b0:	0001ee7d 	.word	0x0001ee7d
   168b4:	0001eba5 	.word	0x0001eba5
   168b8:	00016871 	.word	0x00016871
   168bc:	0001685d 	.word	0x0001685d
   168c0:	00016849 	.word	0x00016849

000168c4 <chan_cb>:
{
   168c4:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   168c6:	6883      	ldr	r3, [r0, #8]
   168c8:	7818      	ldrb	r0, [r3, #0]
   168ca:	f008 f9b4 	bl	1ec36 <att_op_get_type>
   168ce:	3801      	subs	r0, #1
   168d0:	2804      	cmp	r0, #4
   168d2:	d808      	bhi.n	168e6 <chan_cb+0x22>
   168d4:	e8df f000 	tbb	[pc, r0]
   168d8:	09070305 	.word	0x09070305
   168dc:	05          	.byte	0x05
   168dd:	00          	.byte	0x00
   168de:	4804      	ldr	r0, [pc, #16]	; (168f0 <chan_cb+0x2c>)
   168e0:	e000      	b.n	168e4 <chan_cb+0x20>
		return chan_req_sent;
   168e2:	4804      	ldr	r0, [pc, #16]	; (168f4 <chan_cb+0x30>)
}
   168e4:	bd08      	pop	{r3, pc}
		return NULL;
   168e6:	2000      	movs	r0, #0
   168e8:	e7fc      	b.n	168e4 <chan_cb+0x20>
		return chan_cfm_sent;
   168ea:	4803      	ldr	r0, [pc, #12]	; (168f8 <chan_cb+0x34>)
   168ec:	e7fa      	b.n	168e4 <chan_cb+0x20>
   168ee:	bf00      	nop
   168f0:	0001eeb1 	.word	0x0001eeb1
   168f4:	0001ee7d 	.word	0x0001ee7d
   168f8:	0001ee95 	.word	0x0001ee95

000168fc <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   168fc:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   168fe:	7a83      	ldrb	r3, [r0, #10]
   16900:	2b07      	cmp	r3, #7
   16902:	d111      	bne.n	16928 <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16904:	2104      	movs	r1, #4
   16906:	f008 f90c 	bl	1eb22 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1690a:	4604      	mov	r4, r0
   1690c:	b1f0      	cbz	r0, 1694c <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1690e:	f3bf 8f5b 	dmb	ish
   16912:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   16916:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1691a:	f013 0f04 	tst.w	r3, #4
   1691e:	d126      	bne.n	1696e <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   16920:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   16924:	4620      	mov	r0, r4
   16926:	bd10      	pop	{r4, pc}
   16928:	4b1a      	ldr	r3, [pc, #104]	; (16994 <att_get+0x98>)
   1692a:	4a1b      	ldr	r2, [pc, #108]	; (16998 <att_get+0x9c>)
   1692c:	1a9b      	subs	r3, r3, r2
   1692e:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   16930:	f04f 0100 	mov.w	r1, #0
   16934:	2202      	movs	r2, #2
   16936:	f362 0102 	bfi	r1, r2, #0, #3
   1693a:	f36f 01c5 	bfc	r1, #3, #3
   1693e:	f363 118f 	bfi	r1, r3, #6, #10
   16942:	4816      	ldr	r0, [pc, #88]	; (1699c <att_get+0xa0>)
   16944:	f7fa f92c 	bl	10ba0 <log_0>
		return NULL;
   16948:	2400      	movs	r4, #0
   1694a:	e7eb      	b.n	16924 <att_get+0x28>
   1694c:	4b11      	ldr	r3, [pc, #68]	; (16994 <att_get+0x98>)
   1694e:	4a12      	ldr	r2, [pc, #72]	; (16998 <att_get+0x9c>)
   16950:	1a9b      	subs	r3, r3, r2
   16952:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   16954:	f04f 0100 	mov.w	r1, #0
   16958:	2201      	movs	r2, #1
   1695a:	f362 0102 	bfi	r1, r2, #0, #3
   1695e:	f36f 01c5 	bfc	r1, #3, #3
   16962:	f363 118f 	bfi	r1, r3, #6, #10
   16966:	480e      	ldr	r0, [pc, #56]	; (169a0 <att_get+0xa4>)
   16968:	f7fa f91a 	bl	10ba0 <log_0>
		return NULL;
   1696c:	e7da      	b.n	16924 <att_get+0x28>
   1696e:	4b09      	ldr	r3, [pc, #36]	; (16994 <att_get+0x98>)
   16970:	4a09      	ldr	r2, [pc, #36]	; (16998 <att_get+0x9c>)
   16972:	1a9b      	subs	r3, r3, r2
   16974:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   16976:	f04f 0100 	mov.w	r1, #0
   1697a:	2202      	movs	r2, #2
   1697c:	f362 0102 	bfi	r1, r2, #0, #3
   16980:	f36f 01c5 	bfc	r1, #3, #3
   16984:	f363 118f 	bfi	r1, r3, #6, #10
   16988:	4806      	ldr	r0, [pc, #24]	; (169a4 <att_get+0xa8>)
   1698a:	f7fa f909 	bl	10ba0 <log_0>
		return NULL;
   1698e:	2400      	movs	r4, #0
   16990:	e7c8      	b.n	16924 <att_get+0x28>
   16992:	bf00      	nop
   16994:	00021f8c 	.word	0x00021f8c
   16998:	00021f84 	.word	0x00021f84
   1699c:	000239f4 	.word	0x000239f4
   169a0:	00023a04 	.word	0x00023a04
   169a4:	00023a20 	.word	0x00023a20

000169a8 <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   169a8:	b570      	push	{r4, r5, r6, lr}
   169aa:	b082      	sub	sp, #8
   169ac:	4605      	mov	r5, r0
   169ae:	460e      	mov	r6, r1
	return list->head;
   169b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   169b2:	b10b      	cbz	r3, 169b8 <att_chan_new+0x10>
   169b4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   169b8:	9301      	str	r3, [sp, #4]
	int quota = 0;
   169ba:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   169bc:	e014      	b.n	169e8 <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   169be:	3101      	adds	r1, #1
   169c0:	e017      	b.n	169f2 <att_chan_new+0x4a>
   169c2:	4b2d      	ldr	r3, [pc, #180]	; (16a78 <att_chan_new+0xd0>)
   169c4:	4a2d      	ldr	r2, [pc, #180]	; (16a7c <att_chan_new+0xd4>)
   169c6:	1a9b      	subs	r3, r3, r2
   169c8:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   169ca:	f04f 0200 	mov.w	r2, #0
   169ce:	2001      	movs	r0, #1
   169d0:	f360 0202 	bfi	r2, r0, #0, #3
   169d4:	f36f 02c5 	bfc	r2, #3, #3
   169d8:	f363 128f 	bfi	r2, r3, #6, #10
   169dc:	4828      	ldr	r0, [pc, #160]	; (16a80 <att_chan_new+0xd8>)
   169de:	f7fa f829 	bl	10a34 <log_1>
			return NULL;
   169e2:	2400      	movs	r4, #0
   169e4:	e033      	b.n	16a4e <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   169e6:	9301      	str	r3, [sp, #4]
   169e8:	9c01      	ldr	r4, [sp, #4]
   169ea:	b174      	cbz	r4, 16a0a <att_chan_new+0x62>
		if (chan->att == att) {
   169ec:	6823      	ldr	r3, [r4, #0]
   169ee:	42ab      	cmp	r3, r5
   169f0:	d0e5      	beq.n	169be <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   169f2:	2901      	cmp	r1, #1
   169f4:	d0e5      	beq.n	169c2 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   169f6:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   169fa:	d0f4      	beq.n	169e6 <att_chan_new+0x3e>
	return node->next;
   169fc:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16a00:	2b00      	cmp	r3, #0
   16a02:	d0f0      	beq.n	169e6 <att_chan_new+0x3e>
   16a04:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   16a08:	e7ed      	b.n	169e6 <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16a0a:	2200      	movs	r2, #0
   16a0c:	2300      	movs	r3, #0
   16a0e:	a901      	add	r1, sp, #4
   16a10:	481c      	ldr	r0, [pc, #112]	; (16a84 <att_chan_new+0xdc>)
   16a12:	f004 f8df 	bl	1abd4 <k_mem_slab_alloc>
   16a16:	b9e8      	cbnz	r0, 16a54 <att_chan_new+0xac>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   16a18:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16a1c:	2100      	movs	r1, #0
   16a1e:	9801      	ldr	r0, [sp, #4]
   16a20:	f007 fa25 	bl	1de6e <memset>
	chan->chan.chan.ops = &ops;
   16a24:	9801      	ldr	r0, [sp, #4]
   16a26:	4b18      	ldr	r3, [pc, #96]	; (16a88 <att_chan_new+0xe0>)
   16a28:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   16a2a:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   16a2c:	f00a fc4e 	bl	212cc <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   16a30:	9b01      	ldr	r3, [sp, #4]
   16a32:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16a34:	f3bf 8f5b 	dmb	ish
   16a38:	e853 2f00 	ldrex	r2, [r3]
   16a3c:	e843 6100 	strex	r1, r6, [r3]
   16a40:	2900      	cmp	r1, #0
   16a42:	d1f9      	bne.n	16a38 <att_chan_new+0x90>
   16a44:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16a48:	9b01      	ldr	r3, [sp, #4]
   16a4a:	601d      	str	r5, [r3, #0]

	return chan;
   16a4c:	9c01      	ldr	r4, [sp, #4]
}
   16a4e:	4620      	mov	r0, r4
   16a50:	b002      	add	sp, #8
   16a52:	bd70      	pop	{r4, r5, r6, pc}
   16a54:	4b08      	ldr	r3, [pc, #32]	; (16a78 <att_chan_new+0xd0>)
   16a56:	4a09      	ldr	r2, [pc, #36]	; (16a7c <att_chan_new+0xd4>)
   16a58:	1a9b      	subs	r3, r3, r2
   16a5a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   16a5c:	f04f 0200 	mov.w	r2, #0
   16a60:	2101      	movs	r1, #1
   16a62:	f361 0202 	bfi	r2, r1, #0, #3
   16a66:	f36f 02c5 	bfc	r2, #3, #3
   16a6a:	f363 128f 	bfi	r2, r3, #6, #10
   16a6e:	6829      	ldr	r1, [r5, #0]
   16a70:	4806      	ldr	r0, [pc, #24]	; (16a8c <att_chan_new+0xe4>)
   16a72:	f7f9 ffdf 	bl	10a34 <log_1>
		return NULL;
   16a76:	e7ea      	b.n	16a4e <att_chan_new+0xa6>
   16a78:	00021f8c 	.word	0x00021f8c
   16a7c:	00021f84 	.word	0x00021f84
   16a80:	00023a44 	.word	0x00023a44
   16a84:	200006bc 	.word	0x200006bc
   16a88:	2000057c 	.word	0x2000057c
   16a8c:	00023a6c 	.word	0x00023a6c

00016a90 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16a90:	b570      	push	{r4, r5, r6, lr}
   16a92:	b082      	sub	sp, #8
   16a94:	4606      	mov	r6, r0
   16a96:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16a98:	2200      	movs	r2, #0
   16a9a:	2300      	movs	r3, #0
   16a9c:	a901      	add	r1, sp, #4
   16a9e:	4819      	ldr	r0, [pc, #100]	; (16b04 <bt_att_accept+0x74>)
   16aa0:	f004 f898 	bl	1abd4 <k_mem_slab_alloc>
   16aa4:	b9b0      	cbnz	r0, 16ad4 <bt_att_accept+0x44>
   16aa6:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   16aa8:	222c      	movs	r2, #44	; 0x2c
   16aaa:	2100      	movs	r1, #0
   16aac:	9801      	ldr	r0, [sp, #4]
   16aae:	f007 f9de 	bl	1de6e <memset>
	att->conn = conn;
   16ab2:	9b01      	ldr	r3, [sp, #4]
   16ab4:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   16ab6:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   16ab8:	2100      	movs	r1, #0
   16aba:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   16abc:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   16abe:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   16ac0:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   16ac2:	f7ff ff71 	bl	169a8 <att_chan_new>
	if (!chan) {
   16ac6:	4603      	mov	r3, r0
   16ac8:	b1c0      	cbz	r0, 16afc <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   16aca:	3308      	adds	r3, #8
   16acc:	6023      	str	r3, [r4, #0]

	return 0;
}
   16ace:	4628      	mov	r0, r5
   16ad0:	b002      	add	sp, #8
   16ad2:	bd70      	pop	{r4, r5, r6, pc}
   16ad4:	4b0c      	ldr	r3, [pc, #48]	; (16b08 <bt_att_accept+0x78>)
   16ad6:	4a0d      	ldr	r2, [pc, #52]	; (16b0c <bt_att_accept+0x7c>)
   16ad8:	1a9b      	subs	r3, r3, r2
   16ada:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   16adc:	f04f 0200 	mov.w	r2, #0
   16ae0:	2101      	movs	r1, #1
   16ae2:	f361 0202 	bfi	r2, r1, #0, #3
   16ae6:	f36f 02c5 	bfc	r2, #3, #3
   16aea:	f363 128f 	bfi	r2, r3, #6, #10
   16aee:	4631      	mov	r1, r6
   16af0:	4807      	ldr	r0, [pc, #28]	; (16b10 <bt_att_accept+0x80>)
   16af2:	f7f9 ff9f 	bl	10a34 <log_1>
		return -ENOMEM;
   16af6:	f06f 050b 	mvn.w	r5, #11
   16afa:	e7e8      	b.n	16ace <bt_att_accept+0x3e>
		return -ENOMEM;
   16afc:	f06f 050b 	mvn.w	r5, #11
   16b00:	e7e5      	b.n	16ace <bt_att_accept+0x3e>
   16b02:	bf00      	nop
   16b04:	200006a0 	.word	0x200006a0
   16b08:	00021f8c 	.word	0x00021f8c
   16b0c:	00021f84 	.word	0x00021f84
   16b10:	00023a94 	.word	0x00023a94

00016b14 <bt_att_released>:
{
   16b14:	b500      	push	{lr}
   16b16:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16b18:	3808      	subs	r0, #8
   16b1a:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   16b1c:	a901      	add	r1, sp, #4
   16b1e:	4803      	ldr	r0, [pc, #12]	; (16b2c <bt_att_released+0x18>)
   16b20:	f00a fab3 	bl	2108a <k_mem_slab_free>
}
   16b24:	b003      	add	sp, #12
   16b26:	f85d fb04 	ldr.w	pc, [sp], #4
   16b2a:	bf00      	nop
   16b2c:	200006bc 	.word	0x200006bc

00016b30 <chan_send>:
{
   16b30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16b34:	b083      	sub	sp, #12
   16b36:	4604      	mov	r4, r0
   16b38:	460d      	mov	r5, r1
   16b3a:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   16b3c:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16b3e:	781b      	ldrb	r3, [r3, #0]
   16b40:	2bd2      	cmp	r3, #210	; 0xd2
   16b42:	d021      	beq.n	16b88 <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   16b44:	f105 0008 	add.w	r0, r5, #8
   16b48:	f009 faf2 	bl	20130 <net_buf_simple_headroom>
   16b4c:	b287      	uxth	r7, r0
	state->len = buf->len;
   16b4e:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   16b52:	b3a6      	cbz	r6, 16bbe <chan_send+0x8e>
   16b54:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16b58:	f854 8b08 	ldr.w	r8, [r4], #8
   16b5c:	4630      	mov	r0, r6
   16b5e:	f7ff fe91 	bl	16884 <att_cb>
   16b62:	4603      	mov	r3, r0
   16b64:	f8d8 0000 	ldr.w	r0, [r8]
   16b68:	9400      	str	r4, [sp, #0]
   16b6a:	462a      	mov	r2, r5
   16b6c:	2104      	movs	r1, #4
   16b6e:	f007 ff83 	bl	1ea78 <bt_l2cap_send_cb>
	if (err) {
   16b72:	4680      	mov	r8, r0
   16b74:	b120      	cbz	r0, 16b80 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   16b76:	6928      	ldr	r0, [r5, #16]
   16b78:	4438      	add	r0, r7
   16b7a:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   16b7c:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   16b80:	4640      	mov	r0, r8
   16b82:	b003      	add	sp, #12
   16b84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   16b88:	6803      	ldr	r3, [r0, #0]
   16b8a:	6818      	ldr	r0, [r3, #0]
   16b8c:	f009 f94e 	bl	1fe2c <bt_smp_sign>
		if (err) {
   16b90:	4680      	mov	r8, r0
   16b92:	2800      	cmp	r0, #0
   16b94:	d0d6      	beq.n	16b44 <chan_send+0x14>
   16b96:	4b0c      	ldr	r3, [pc, #48]	; (16bc8 <chan_send+0x98>)
   16b98:	4a0c      	ldr	r2, [pc, #48]	; (16bcc <chan_send+0x9c>)
   16b9a:	1a9b      	subs	r3, r3, r2
   16b9c:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   16b9e:	f04f 0100 	mov.w	r1, #0
   16ba2:	2201      	movs	r2, #1
   16ba4:	f362 0102 	bfi	r1, r2, #0, #3
   16ba8:	f36f 01c5 	bfc	r1, #3, #3
   16bac:	f363 118f 	bfi	r1, r3, #6, #10
   16bb0:	4807      	ldr	r0, [pc, #28]	; (16bd0 <chan_send+0xa0>)
   16bb2:	f7f9 fff5 	bl	10ba0 <log_0>
			net_buf_unref(buf);
   16bb6:	4628      	mov	r0, r5
   16bb8:	f009 fa38 	bl	2002c <net_buf_unref>
			return err;
   16bbc:	e7e0      	b.n	16b80 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   16bbe:	4628      	mov	r0, r5
   16bc0:	f7ff fe80 	bl	168c4 <chan_cb>
   16bc4:	4606      	mov	r6, r0
   16bc6:	e7c5      	b.n	16b54 <chan_send+0x24>
   16bc8:	00021f8c 	.word	0x00021f8c
   16bcc:	00021f84 	.word	0x00021f84
   16bd0:	00023abc 	.word	0x00023abc

00016bd4 <read_group_cb>:
{
   16bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16bd6:	b085      	sub	sp, #20
   16bd8:	4605      	mov	r5, r0
   16bda:	460e      	mov	r6, r1
   16bdc:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16bde:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16be0:	2300      	movs	r3, #0
   16be2:	f88d 3008 	strb.w	r3, [sp, #8]
   16be6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16bea:	f8ad 300a 	strh.w	r3, [sp, #10]
   16bee:	a902      	add	r1, sp, #8
   16bf0:	6800      	ldr	r0, [r0, #0]
   16bf2:	f007 f98d 	bl	1df10 <bt_uuid_cmp>
   16bf6:	b158      	cbz	r0, 16c10 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16bf8:	2300      	movs	r3, #0
   16bfa:	f88d 300c 	strb.w	r3, [sp, #12]
   16bfe:	f642 0301 	movw	r3, #10241	; 0x2801
   16c02:	f8ad 300e 	strh.w	r3, [sp, #14]
   16c06:	a903      	add	r1, sp, #12
   16c08:	6828      	ldr	r0, [r5, #0]
   16c0a:	f007 f981 	bl	1df10 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16c0e:	bb30      	cbnz	r0, 16c5e <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c10:	6861      	ldr	r1, [r4, #4]
   16c12:	6828      	ldr	r0, [r5, #0]
   16c14:	f007 f97c 	bl	1df10 <bt_uuid_cmp>
   16c18:	bb48      	cbnz	r0, 16c6e <read_group_cb+0x9a>
	if (data->rsp->len &&
   16c1a:	68e3      	ldr	r3, [r4, #12]
   16c1c:	781a      	ldrb	r2, [r3, #0]
   16c1e:	b132      	cbz	r2, 16c2e <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16c20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   16c24:	68a1      	ldr	r1, [r4, #8]
   16c26:	8989      	ldrh	r1, [r1, #12]
   16c28:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16c2a:	4293      	cmp	r3, r2
   16c2c:	db24      	blt.n	16c78 <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16c2e:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   16c30:	2104      	movs	r1, #4
   16c32:	3008      	adds	r0, #8
   16c34:	f009 fa44 	bl	200c0 <net_buf_simple_add>
   16c38:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16c3a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16c3c:	6923      	ldr	r3, [r4, #16]
   16c3e:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16c40:	9401      	str	r4, [sp, #4]
   16c42:	4b10      	ldr	r3, [pc, #64]	; (16c84 <read_group_cb+0xb0>)
   16c44:	9300      	str	r3, [sp, #0]
   16c46:	2300      	movs	r3, #0
   16c48:	68a2      	ldr	r2, [r4, #8]
   16c4a:	4629      	mov	r1, r5
   16c4c:	4638      	mov	r0, r7
   16c4e:	f008 fa0e 	bl	1f06e <att_chan_read>
	if (read < 0) {
   16c52:	2800      	cmp	r0, #0
   16c54:	db12      	blt.n	16c7c <read_group_cb+0xa8>
	if (!data->group) {
   16c56:	6923      	ldr	r3, [r4, #16]
   16c58:	b193      	cbz	r3, 16c80 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   16c5a:	2001      	movs	r0, #1
   16c5c:	e00a      	b.n	16c74 <read_group_cb+0xa0>
		if (data->group &&
   16c5e:	6923      	ldr	r3, [r4, #16]
   16c60:	b11b      	cbz	r3, 16c6a <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   16c62:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   16c64:	42b2      	cmp	r2, r6
   16c66:	d200      	bcs.n	16c6a <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16c68:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16c6a:	2001      	movs	r0, #1
   16c6c:	e002      	b.n	16c74 <read_group_cb+0xa0>
		data->group = NULL;
   16c6e:	2300      	movs	r3, #0
   16c70:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16c72:	2001      	movs	r0, #1
}
   16c74:	b005      	add	sp, #20
   16c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   16c78:	2000      	movs	r0, #0
   16c7a:	e7fb      	b.n	16c74 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   16c7c:	2000      	movs	r0, #0
   16c7e:	e7f9      	b.n	16c74 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   16c80:	2000      	movs	r0, #0
   16c82:	e7f7      	b.n	16c74 <read_group_cb+0xa0>
   16c84:	0001ec09 	.word	0x0001ec09

00016c88 <read_type_cb>:
{
   16c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16c8c:	b083      	sub	sp, #12
   16c8e:	4606      	mov	r6, r0
   16c90:	4688      	mov	r8, r1
   16c92:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   16c94:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   16c96:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16c98:	6851      	ldr	r1, [r2, #4]
   16c9a:	6800      	ldr	r0, [r0, #0]
   16c9c:	f007 f938 	bl	1df10 <bt_uuid_cmp>
   16ca0:	b120      	cbz	r0, 16cac <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   16ca2:	2501      	movs	r5, #1
}
   16ca4:	4628      	mov	r0, r5
   16ca6:	b003      	add	sp, #12
   16ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16cac:	2215      	movs	r2, #21
   16cae:	4631      	mov	r1, r6
   16cb0:	4628      	mov	r0, r5
   16cb2:	f009 f81a 	bl	1fcea <bt_gatt_check_perm>
   16cb6:	4605      	mov	r5, r0
   16cb8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16cba:	b130      	cbz	r0, 16cca <read_type_cb+0x42>
		if (data->rsp->len) {
   16cbc:	68e3      	ldr	r3, [r4, #12]
   16cbe:	781b      	ldrb	r3, [r3, #0]
   16cc0:	b10b      	cbz	r3, 16cc6 <read_type_cb+0x3e>
			data->err = 0x00;
   16cc2:	2300      	movs	r3, #0
   16cc4:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   16cc6:	2500      	movs	r5, #0
   16cc8:	e7ec      	b.n	16ca4 <read_type_cb+0x1c>
	data->err = 0x00;
   16cca:	f04f 0900 	mov.w	r9, #0
   16cce:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16cd2:	68a0      	ldr	r0, [r4, #8]
   16cd4:	f009 f9d4 	bl	20080 <net_buf_frag_last>
   16cd8:	2102      	movs	r1, #2
   16cda:	3008      	adds	r0, #8
   16cdc:	f009 f9f0 	bl	200c0 <net_buf_simple_add>
   16ce0:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   16ce2:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16ce6:	9401      	str	r4, [sp, #4]
   16ce8:	4b11      	ldr	r3, [pc, #68]	; (16d30 <read_type_cb+0xa8>)
   16cea:	9300      	str	r3, [sp, #0]
   16cec:	464b      	mov	r3, r9
   16cee:	68a2      	ldr	r2, [r4, #8]
   16cf0:	4631      	mov	r1, r6
   16cf2:	4638      	mov	r0, r7
   16cf4:	f008 f9bb 	bl	1f06e <att_chan_read>
	if (read < 0) {
   16cf8:	2800      	cmp	r0, #0
   16cfa:	db07      	blt.n	16d0c <read_type_cb+0x84>
	if (!data->item) {
   16cfc:	6923      	ldr	r3, [r4, #16]
   16cfe:	2b00      	cmp	r3, #0
   16d00:	d0d0      	beq.n	16ca4 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16d02:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   16d06:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   16d08:	2200      	movs	r2, #0

	while (buf) {
   16d0a:	e006      	b.n	16d1a <read_type_cb+0x92>
		data->err = err_to_att(read);
   16d0c:	f007 ff60 	bl	1ebd0 <err_to_att>
   16d10:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16d12:	e7c7      	b.n	16ca4 <read_type_cb+0x1c>
		bytes += buf->len;
   16d14:	8999      	ldrh	r1, [r3, #12]
   16d16:	440a      	add	r2, r1
		buf = buf->frags;
   16d18:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   16d1a:	2b00      	cmp	r3, #0
   16d1c:	d1fa      	bne.n	16d14 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16d1e:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16d20:	68e3      	ldr	r3, [r4, #12]
   16d22:	781d      	ldrb	r5, [r3, #0]
   16d24:	42aa      	cmp	r2, r5
   16d26:	bf94      	ite	ls
   16d28:	2500      	movls	r5, #0
   16d2a:	2501      	movhi	r5, #1
   16d2c:	e7ba      	b.n	16ca4 <read_type_cb+0x1c>
   16d2e:	bf00      	nop
   16d30:	0001ebe1 	.word	0x0001ebe1

00016d34 <find_type_cb>:
{
   16d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d38:	b093      	sub	sp, #76	; 0x4c
   16d3a:	4606      	mov	r6, r0
   16d3c:	460f      	mov	r7, r1
   16d3e:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   16d40:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   16d44:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16d48:	2300      	movs	r3, #0
   16d4a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   16d4e:	f642 0301 	movw	r3, #10241	; 0x2801
   16d52:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   16d56:	a910      	add	r1, sp, #64	; 0x40
   16d58:	6800      	ldr	r0, [r0, #0]
   16d5a:	f007 f8d9 	bl	1df10 <bt_uuid_cmp>
   16d5e:	b928      	cbnz	r0, 16d6c <find_type_cb+0x38>
	data->group = NULL;
   16d60:	2300      	movs	r3, #0
   16d62:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   16d64:	2001      	movs	r0, #1
}
   16d66:	b013      	add	sp, #76	; 0x4c
   16d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   16d6c:	2300      	movs	r3, #0
   16d6e:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   16d72:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16d76:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   16d7a:	a911      	add	r1, sp, #68	; 0x44
   16d7c:	6830      	ldr	r0, [r6, #0]
   16d7e:	f007 f8c7 	bl	1df10 <bt_uuid_cmp>
   16d82:	b928      	cbnz	r0, 16d90 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   16d84:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   16d88:	6868      	ldr	r0, [r5, #4]
   16d8a:	4603      	mov	r3, r0
	size_t bytes = 0;
   16d8c:	2400      	movs	r4, #0
	while (buf) {
   16d8e:	e00a      	b.n	16da6 <find_type_cb+0x72>
		if (data->group &&
   16d90:	68ab      	ldr	r3, [r5, #8]
   16d92:	b11b      	cbz	r3, 16d9c <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   16d94:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   16d96:	42ba      	cmp	r2, r7
   16d98:	d200      	bcs.n	16d9c <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   16d9a:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16d9c:	2001      	movs	r0, #1
   16d9e:	e7e2      	b.n	16d66 <find_type_cb+0x32>
		bytes += buf->len;
   16da0:	899a      	ldrh	r2, [r3, #12]
   16da2:	4414      	add	r4, r2
		buf = buf->frags;
   16da4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   16da6:	2b00      	cmp	r3, #0
   16da8:	d1fa      	bne.n	16da0 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   16daa:	1b0c      	subs	r4, r1, r4
   16dac:	2c03      	cmp	r4, #3
   16dae:	d801      	bhi.n	16db4 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   16db0:	2000      	movs	r0, #0
   16db2:	e7d8      	b.n	16d66 <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   16db4:	f009 f964 	bl	20080 <net_buf_frag_last>
   16db8:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   16dba:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   16dbe:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   16dc0:	2200      	movs	r2, #0
	while (buf) {
   16dc2:	b11b      	cbz	r3, 16dcc <find_type_cb+0x98>
		bytes += buf->len;
   16dc4:	8999      	ldrh	r1, [r3, #12]
   16dc6:	440a      	add	r2, r1
		buf = buf->frags;
   16dc8:	681b      	ldr	r3, [r3, #0]
   16dca:	e7fa      	b.n	16dc2 <find_type_cb+0x8e>
   16dcc:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   16dd0:	f104 0b08 	add.w	fp, r4, #8
   16dd4:	4658      	mov	r0, fp
   16dd6:	f009 f9af 	bl	20138 <net_buf_simple_tailroom>
   16dda:	4582      	cmp	sl, r0
   16ddc:	d22b      	bcs.n	16e36 <find_type_cb+0x102>
   16dde:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   16de2:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   16de4:	2200      	movs	r2, #0
	while (buf) {
   16de6:	e002      	b.n	16dee <find_type_cb+0xba>
		bytes += buf->len;
   16de8:	8999      	ldrh	r1, [r3, #12]
   16dea:	440a      	add	r2, r1
		buf = buf->frags;
   16dec:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   16dee:	2b00      	cmp	r3, #0
   16df0:	d1fa      	bne.n	16de8 <find_type_cb+0xb4>
   16df2:	1a80      	subs	r0, r0, r2
	if (!len) {
   16df4:	b318      	cbz	r0, 16e3e <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   16df6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   16dfa:	2300      	movs	r3, #0
   16dfc:	9300      	str	r3, [sp, #0]
   16dfe:	2310      	movs	r3, #16
   16e00:	aa0c      	add	r2, sp, #48	; 0x30
   16e02:	4631      	mov	r1, r6
   16e04:	4648      	mov	r0, r9
   16e06:	47c0      	blx	r8
	if (read < 0) {
   16e08:	1e06      	subs	r6, r0, #0
   16e0a:	dba9      	blt.n	16d60 <find_type_cb+0x2c>
	if (read != data->value_len) {
   16e0c:	7c2a      	ldrb	r2, [r5, #16]
   16e0e:	42b2      	cmp	r2, r6
   16e10:	d049      	beq.n	16ea6 <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   16e12:	68e9      	ldr	r1, [r5, #12]
   16e14:	a807      	add	r0, sp, #28
   16e16:	f007 f899 	bl	1df4c <bt_uuid_create>
   16e1a:	b300      	cbz	r0, 16e5e <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   16e1c:	b2f2      	uxtb	r2, r6
   16e1e:	a90c      	add	r1, sp, #48	; 0x30
   16e20:	a802      	add	r0, sp, #8
   16e22:	f007 f893 	bl	1df4c <bt_uuid_create>
   16e26:	b360      	cbz	r0, 16e82 <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   16e28:	a902      	add	r1, sp, #8
   16e2a:	a807      	add	r0, sp, #28
   16e2c:	f007 f870 	bl	1df10 <bt_uuid_cmp>
   16e30:	2800      	cmp	r0, #0
   16e32:	d040      	beq.n	16eb6 <find_type_cb+0x182>
   16e34:	e794      	b.n	16d60 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   16e36:	4658      	mov	r0, fp
   16e38:	f009 f97e 	bl	20138 <net_buf_simple_tailroom>
   16e3c:	e7da      	b.n	16df4 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   16e3e:	686b      	ldr	r3, [r5, #4]
   16e40:	7998      	ldrb	r0, [r3, #6]
   16e42:	f001 fcb7 	bl	187b4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   16e46:	2200      	movs	r2, #0
   16e48:	2300      	movs	r3, #0
   16e4a:	f009 f8bc 	bl	1ffc6 <net_buf_alloc_fixed>
		if (!frag) {
   16e4e:	4604      	mov	r4, r0
   16e50:	2800      	cmp	r0, #0
   16e52:	d088      	beq.n	16d66 <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   16e54:	4601      	mov	r1, r0
   16e56:	6868      	ldr	r0, [r5, #4]
   16e58:	f009 f923 	bl	200a2 <net_buf_frag_add>
   16e5c:	e7cb      	b.n	16df6 <find_type_cb+0xc2>
   16e5e:	4b1c      	ldr	r3, [pc, #112]	; (16ed0 <find_type_cb+0x19c>)
   16e60:	4a1c      	ldr	r2, [pc, #112]	; (16ed4 <find_type_cb+0x1a0>)
   16e62:	1a9b      	subs	r3, r3, r2
   16e64:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   16e66:	f04f 0200 	mov.w	r2, #0
   16e6a:	2102      	movs	r1, #2
   16e6c:	f361 0202 	bfi	r2, r1, #0, #3
   16e70:	f36f 02c5 	bfc	r2, #3, #3
   16e74:	f363 128f 	bfi	r2, r3, #6, #10
   16e78:	7c29      	ldrb	r1, [r5, #16]
   16e7a:	4817      	ldr	r0, [pc, #92]	; (16ed8 <find_type_cb+0x1a4>)
   16e7c:	f7f9 fdda 	bl	10a34 <log_1>
			goto skip;
   16e80:	e76e      	b.n	16d60 <find_type_cb+0x2c>
   16e82:	4b13      	ldr	r3, [pc, #76]	; (16ed0 <find_type_cb+0x19c>)
   16e84:	4a13      	ldr	r2, [pc, #76]	; (16ed4 <find_type_cb+0x1a0>)
   16e86:	1a9b      	subs	r3, r3, r2
   16e88:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   16e8a:	f04f 0200 	mov.w	r2, #0
   16e8e:	2102      	movs	r1, #2
   16e90:	f361 0202 	bfi	r2, r1, #0, #3
   16e94:	f36f 02c5 	bfc	r2, #3, #3
   16e98:	f363 128f 	bfi	r2, r3, #6, #10
   16e9c:	4631      	mov	r1, r6
   16e9e:	480f      	ldr	r0, [pc, #60]	; (16edc <find_type_cb+0x1a8>)
   16ea0:	f7f9 fdc8 	bl	10a34 <log_1>
			goto skip;
   16ea4:	e75c      	b.n	16d60 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   16ea6:	4632      	mov	r2, r6
   16ea8:	a90c      	add	r1, sp, #48	; 0x30
   16eaa:	68e8      	ldr	r0, [r5, #12]
   16eac:	f006 ffa4 	bl	1ddf8 <memcmp>
   16eb0:	2800      	cmp	r0, #0
   16eb2:	f47f af55 	bne.w	16d60 <find_type_cb+0x2c>
	data->err = 0x00;
   16eb6:	2300      	movs	r3, #0
   16eb8:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   16eba:	2104      	movs	r1, #4
   16ebc:	f104 0008 	add.w	r0, r4, #8
   16ec0:	f009 f8fe 	bl	200c0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   16ec4:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16ec6:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16ec8:	68ab      	ldr	r3, [r5, #8]
   16eca:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   16ecc:	2001      	movs	r0, #1
   16ece:	e74a      	b.n	16d66 <find_type_cb+0x32>
   16ed0:	00021f8c 	.word	0x00021f8c
   16ed4:	00021f84 	.word	0x00021f84
   16ed8:	00023ad0 	.word	0x00023ad0
   16edc:	00023af0 	.word	0x00023af0

00016ee0 <bt_att_connected>:
{
   16ee0:	b538      	push	{r3, r4, r5, lr}
   16ee2:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   16ee4:	4605      	mov	r5, r0
   16ee6:	f855 0908 	ldr.w	r0, [r5], #-8
   16eea:	f008 fa31 	bl	1f350 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   16eee:	4629      	mov	r1, r5
   16ef0:	6800      	ldr	r0, [r0, #0]
   16ef2:	f007 ff21 	bl	1ed38 <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16ef6:	f3bf 8f5b 	dmb	ish
   16efa:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   16efe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16f02:	f013 0f08 	tst.w	r3, #8
   16f06:	d104      	bne.n	16f12 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16f08:	2317      	movs	r3, #23
   16f0a:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16f0e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   16f12:	4628      	mov	r0, r5
   16f14:	f008 f9d6 	bl	1f2c4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16f18:	4902      	ldr	r1, [pc, #8]	; (16f24 <bt_att_connected+0x44>)
   16f1a:	f504 7084 	add.w	r0, r4, #264	; 0x108
   16f1e:	f00a fae3 	bl	214e8 <k_work_init_delayable>
}
   16f22:	bd38      	pop	{r3, r4, r5, pc}
   16f24:	0001786d 	.word	0x0001786d

00016f28 <bt_att_chan_create_pdu>:
{
   16f28:	b538      	push	{r3, r4, r5, lr}
   16f2a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16f2c:	3201      	adds	r2, #1
   16f2e:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   16f32:	428a      	cmp	r2, r1
   16f34:	d810      	bhi.n	16f58 <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   16f36:	4628      	mov	r0, r5
   16f38:	f007 fe7d 	bl	1ec36 <att_op_get_type>
   16f3c:	2802      	cmp	r0, #2
   16f3e:	d01d      	beq.n	16f7c <bt_att_chan_create_pdu+0x54>
   16f40:	2804      	cmp	r0, #4
   16f42:	d01b      	beq.n	16f7c <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   16f44:	f04f 32ff 	mov.w	r2, #4294967295
   16f48:	f04f 33ff 	mov.w	r3, #4294967295
   16f4c:	2100      	movs	r1, #0
   16f4e:	4608      	mov	r0, r1
   16f50:	f007 fd8d 	bl	1ea6e <bt_l2cap_create_pdu_timeout>
   16f54:	4604      	mov	r4, r0
   16f56:	e019      	b.n	16f8c <bt_att_chan_create_pdu+0x64>
   16f58:	481a      	ldr	r0, [pc, #104]	; (16fc4 <bt_att_chan_create_pdu+0x9c>)
   16f5a:	4b1b      	ldr	r3, [pc, #108]	; (16fc8 <bt_att_chan_create_pdu+0xa0>)
   16f5c:	1ac0      	subs	r0, r0, r3
   16f5e:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   16f60:	f04f 0300 	mov.w	r3, #0
   16f64:	2402      	movs	r4, #2
   16f66:	f364 0302 	bfi	r3, r4, #0, #3
   16f6a:	f36f 03c5 	bfc	r3, #3, #3
   16f6e:	f360 138f 	bfi	r3, r0, #6, #10
   16f72:	4816      	ldr	r0, [pc, #88]	; (16fcc <bt_att_chan_create_pdu+0xa4>)
   16f74:	f7f9 fd94 	bl	10aa0 <log_2>
		return NULL;
   16f78:	2400      	movs	r4, #0
   16f7a:	e00e      	b.n	16f9a <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   16f7c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16f80:	2300      	movs	r3, #0
   16f82:	2100      	movs	r1, #0
   16f84:	4608      	mov	r0, r1
   16f86:	f007 fd72 	bl	1ea6e <bt_l2cap_create_pdu_timeout>
   16f8a:	4604      	mov	r4, r0
	if (!buf) {
   16f8c:	b13c      	cbz	r4, 16f9e <bt_att_chan_create_pdu+0x76>
   16f8e:	2101      	movs	r1, #1
   16f90:	f104 0008 	add.w	r0, r4, #8
   16f94:	f009 f894 	bl	200c0 <net_buf_simple_add>
	hdr->code = op;
   16f98:	7005      	strb	r5, [r0, #0]
}
   16f9a:	4620      	mov	r0, r4
   16f9c:	bd38      	pop	{r3, r4, r5, pc}
   16f9e:	4b09      	ldr	r3, [pc, #36]	; (16fc4 <bt_att_chan_create_pdu+0x9c>)
   16fa0:	4a09      	ldr	r2, [pc, #36]	; (16fc8 <bt_att_chan_create_pdu+0xa0>)
   16fa2:	1a9b      	subs	r3, r3, r2
   16fa4:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   16fa6:	f04f 0200 	mov.w	r2, #0
   16faa:	2101      	movs	r1, #1
   16fac:	f361 0202 	bfi	r2, r1, #0, #3
   16fb0:	f36f 02c5 	bfc	r2, #3, #3
   16fb4:	f363 128f 	bfi	r2, r3, #6, #10
   16fb8:	4629      	mov	r1, r5
   16fba:	4805      	ldr	r0, [pc, #20]	; (16fd0 <bt_att_chan_create_pdu+0xa8>)
   16fbc:	f7f9 fd3a 	bl	10a34 <log_1>
		return NULL;
   16fc0:	e7eb      	b.n	16f9a <bt_att_chan_create_pdu+0x72>
   16fc2:	bf00      	nop
   16fc4:	00021f8c 	.word	0x00021f8c
   16fc8:	00021f84 	.word	0x00021f84
   16fcc:	00023b10 	.word	0x00023b10
   16fd0:	000238c8 	.word	0x000238c8

00016fd4 <send_err_rsp>:
	if (!req) {
   16fd4:	b901      	cbnz	r1, 16fd8 <send_err_rsp+0x4>
   16fd6:	4770      	bx	lr
{
   16fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16fdc:	4606      	mov	r6, r0
   16fde:	4615      	mov	r5, r2
   16fe0:	461c      	mov	r4, r3
   16fe2:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   16fe4:	2204      	movs	r2, #4
   16fe6:	2101      	movs	r1, #1
   16fe8:	f7ff ff9e 	bl	16f28 <bt_att_chan_create_pdu>
	if (!buf) {
   16fec:	4680      	mov	r8, r0
   16fee:	b160      	cbz	r0, 1700a <send_err_rsp+0x36>
   16ff0:	2104      	movs	r1, #4
   16ff2:	3008      	adds	r0, #8
   16ff4:	f009 f864 	bl	200c0 <net_buf_simple_add>
	rsp->request = req;
   16ff8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   16ffa:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   16ffe:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   17000:	4a03      	ldr	r2, [pc, #12]	; (17010 <send_err_rsp+0x3c>)
   17002:	4641      	mov	r1, r8
   17004:	4630      	mov	r0, r6
   17006:	f008 f825 	bl	1f054 <bt_att_chan_send_rsp>
}
   1700a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1700e:	bf00      	nop
   17010:	0001eeb1 	.word	0x0001eeb1

00017014 <bt_att_recv>:
{
   17014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   17018:	898b      	ldrh	r3, [r1, #12]
   1701a:	b1bb      	cbz	r3, 1704c <bt_att_recv+0x38>
   1701c:	4607      	mov	r7, r0
   1701e:	460e      	mov	r6, r1
   17020:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   17024:	2101      	movs	r1, #1
   17026:	f106 0008 	add.w	r0, r6, #8
   1702a:	f009 f871 	bl	20110 <net_buf_simple_pull_mem>
   1702e:	4605      	mov	r5, r0
	if (!att_chan->att) {
   17030:	f857 3c08 	ldr.w	r3, [r7, #-8]
   17034:	b1d3      	cbz	r3, 1706c <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17036:	2300      	movs	r3, #0
   17038:	2b0c      	cmp	r3, #12
   1703a:	d81e      	bhi.n	1707a <bt_att_recv+0x66>
		if (hdr->code == handlers[i].op) {
   1703c:	782c      	ldrb	r4, [r5, #0]
   1703e:	4a57      	ldr	r2, [pc, #348]	; (1719c <bt_att_recv+0x188>)
   17040:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17044:	4294      	cmp	r4, r2
   17046:	d014      	beq.n	17072 <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   17048:	3301      	adds	r3, #1
   1704a:	e7f5      	b.n	17038 <bt_att_recv+0x24>
   1704c:	4b54      	ldr	r3, [pc, #336]	; (171a0 <bt_att_recv+0x18c>)
   1704e:	4a55      	ldr	r2, [pc, #340]	; (171a4 <bt_att_recv+0x190>)
   17050:	1a9b      	subs	r3, r3, r2
   17052:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   17054:	f04f 0100 	mov.w	r1, #0
   17058:	2201      	movs	r2, #1
   1705a:	f362 0102 	bfi	r1, r2, #0, #3
   1705e:	f36f 01c5 	bfc	r1, #3, #3
   17062:	f363 118f 	bfi	r1, r3, #6, #10
   17066:	4850      	ldr	r0, [pc, #320]	; (171a8 <bt_att_recv+0x194>)
   17068:	f7f9 fd9a 	bl	10ba0 <log_0>
}
   1706c:	2000      	movs	r0, #0
   1706e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   17072:	4c4a      	ldr	r4, [pc, #296]	; (1719c <bt_att_recv+0x188>)
   17074:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
			break;
   17078:	e000      	b.n	1707c <bt_att_recv+0x68>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1707a:	2400      	movs	r4, #0
	if (!handler) {
   1707c:	b1cc      	cbz	r4, 170b2 <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   1707e:	78a3      	ldrb	r3, [r4, #2]
   17080:	2b01      	cmp	r3, #1
   17082:	d034      	beq.n	170ee <bt_att_recv+0xda>
		} else if (handler->type == ATT_INDICATION &&
   17084:	78a3      	ldrb	r3, [r4, #2]
   17086:	2b05      	cmp	r3, #5
   17088:	d053      	beq.n	17132 <bt_att_recv+0x11e>
	if (buf->len < handler->expect_len) {
   1708a:	89b1      	ldrh	r1, [r6, #12]
   1708c:	7863      	ldrb	r3, [r4, #1]
   1708e:	4299      	cmp	r1, r3
   17090:	d370      	bcc.n	17174 <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   17092:	6863      	ldr	r3, [r4, #4]
   17094:	4631      	mov	r1, r6
   17096:	4640      	mov	r0, r8
   17098:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1709a:	78a3      	ldrb	r3, [r4, #2]
   1709c:	2b01      	cmp	r3, #1
   1709e:	d1e5      	bne.n	1706c <bt_att_recv+0x58>
   170a0:	2800      	cmp	r0, #0
   170a2:	d0e3      	beq.n	1706c <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   170a4:	4603      	mov	r3, r0
   170a6:	2200      	movs	r2, #0
   170a8:	7829      	ldrb	r1, [r5, #0]
   170aa:	4640      	mov	r0, r8
   170ac:	f7ff ff92 	bl	16fd4 <send_err_rsp>
   170b0:	e7dc      	b.n	1706c <bt_att_recv+0x58>
   170b2:	4b3b      	ldr	r3, [pc, #236]	; (171a0 <bt_att_recv+0x18c>)
   170b4:	4a3b      	ldr	r2, [pc, #236]	; (171a4 <bt_att_recv+0x190>)
   170b6:	1a9b      	subs	r3, r3, r2
   170b8:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   170ba:	f04f 0200 	mov.w	r2, #0
   170be:	2102      	movs	r1, #2
   170c0:	f361 0202 	bfi	r2, r1, #0, #3
   170c4:	f36f 02c5 	bfc	r2, #3, #3
   170c8:	f363 128f 	bfi	r2, r3, #6, #10
   170cc:	7829      	ldrb	r1, [r5, #0]
   170ce:	4837      	ldr	r0, [pc, #220]	; (171ac <bt_att_recv+0x198>)
   170d0:	f7f9 fcb0 	bl	10a34 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   170d4:	782c      	ldrb	r4, [r5, #0]
   170d6:	4620      	mov	r0, r4
   170d8:	f007 fdad 	bl	1ec36 <att_op_get_type>
   170dc:	2800      	cmp	r0, #0
   170de:	d0c5      	beq.n	1706c <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   170e0:	2306      	movs	r3, #6
   170e2:	2200      	movs	r2, #0
   170e4:	4621      	mov	r1, r4
   170e6:	4640      	mov	r0, r8
   170e8:	f7ff ff74 	bl	16fd4 <send_err_rsp>
		return 0;
   170ec:	e7be      	b.n	1706c <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   170ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   170f2:	f3bf 8f5b 	dmb	ish
   170f6:	e853 2f00 	ldrex	r2, [r3]
   170fa:	f042 0101 	orr.w	r1, r2, #1
   170fe:	e843 1000 	strex	r0, r1, [r3]
   17102:	2800      	cmp	r0, #0
   17104:	d1f7      	bne.n	170f6 <bt_att_recv+0xe2>
   17106:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1710a:	f012 0f01 	tst.w	r2, #1
   1710e:	d0b9      	beq.n	17084 <bt_att_recv+0x70>
   17110:	4b23      	ldr	r3, [pc, #140]	; (171a0 <bt_att_recv+0x18c>)
   17112:	4a24      	ldr	r2, [pc, #144]	; (171a4 <bt_att_recv+0x190>)
   17114:	1a9b      	subs	r3, r3, r2
   17116:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   17118:	f04f 0100 	mov.w	r1, #0
   1711c:	2202      	movs	r2, #2
   1711e:	f362 0102 	bfi	r1, r2, #0, #3
   17122:	f36f 01c5 	bfc	r1, #3, #3
   17126:	f363 118f 	bfi	r1, r3, #6, #10
   1712a:	4821      	ldr	r0, [pc, #132]	; (171b0 <bt_att_recv+0x19c>)
   1712c:	f7f9 fd38 	bl	10ba0 <log_0>
			return 0;
   17130:	e79c      	b.n	1706c <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   17132:	37e8      	adds	r7, #232	; 0xe8
   17134:	f3bf 8f5b 	dmb	ish
   17138:	e857 3f00 	ldrex	r3, [r7]
   1713c:	f043 0202 	orr.w	r2, r3, #2
   17140:	e847 2100 	strex	r1, r2, [r7]
   17144:	2900      	cmp	r1, #0
   17146:	d1f7      	bne.n	17138 <bt_att_recv+0x124>
   17148:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   1714c:	f013 0f02 	tst.w	r3, #2
   17150:	d09b      	beq.n	1708a <bt_att_recv+0x76>
   17152:	4b13      	ldr	r3, [pc, #76]	; (171a0 <bt_att_recv+0x18c>)
   17154:	4a13      	ldr	r2, [pc, #76]	; (171a4 <bt_att_recv+0x190>)
   17156:	1a9b      	subs	r3, r3, r2
   17158:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   1715a:	f04f 0100 	mov.w	r1, #0
   1715e:	2202      	movs	r2, #2
   17160:	f362 0102 	bfi	r1, r2, #0, #3
   17164:	f36f 01c5 	bfc	r1, #3, #3
   17168:	f363 118f 	bfi	r1, r3, #6, #10
   1716c:	4811      	ldr	r0, [pc, #68]	; (171b4 <bt_att_recv+0x1a0>)
   1716e:	f7f9 fd17 	bl	10ba0 <log_0>
			return 0;
   17172:	e77b      	b.n	1706c <bt_att_recv+0x58>
   17174:	4a0a      	ldr	r2, [pc, #40]	; (171a0 <bt_att_recv+0x18c>)
   17176:	4b0b      	ldr	r3, [pc, #44]	; (171a4 <bt_att_recv+0x190>)
   17178:	1ad2      	subs	r2, r2, r3
   1717a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1717c:	f04f 0300 	mov.w	r3, #0
   17180:	2001      	movs	r0, #1
   17182:	f360 0302 	bfi	r3, r0, #0, #3
   17186:	f36f 03c5 	bfc	r3, #3, #3
   1718a:	f362 138f 	bfi	r3, r2, #6, #10
   1718e:	782a      	ldrb	r2, [r5, #0]
   17190:	4809      	ldr	r0, [pc, #36]	; (171b8 <bt_att_recv+0x1a4>)
   17192:	f7f9 fc85 	bl	10aa0 <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   17196:	2004      	movs	r0, #4
   17198:	e77f      	b.n	1709a <bt_att_recv+0x86>
   1719a:	bf00      	nop
   1719c:	00023c14 	.word	0x00023c14
   171a0:	00021f8c 	.word	0x00021f8c
   171a4:	00021f84 	.word	0x00021f84
   171a8:	00023b38 	.word	0x00023b38
   171ac:	00023b54 	.word	0x00023b54
   171b0:	00023b70 	.word	0x00023b70
   171b4:	00023b8c 	.word	0x00023b8c
   171b8:	00023bac 	.word	0x00023bac

000171bc <att_write_rsp>:
{
   171bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   171c0:	b08a      	sub	sp, #40	; 0x28
   171c2:	4604      	mov	r4, r0
   171c4:	4617      	mov	r7, r2
   171c6:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   171c8:	6803      	ldr	r3, [r0, #0]
   171ca:	4688      	mov	r8, r1
   171cc:	3900      	subs	r1, #0
   171ce:	bf18      	it	ne
   171d0:	2101      	movne	r1, #1
   171d2:	6818      	ldr	r0, [r3, #0]
   171d4:	f008 fdb5 	bl	1fd42 <bt_gatt_change_aware>
   171d8:	2800      	cmp	r0, #0
   171da:	d04f      	beq.n	1727c <att_write_rsp+0xc0>
	if (!handle) {
   171dc:	b925      	cbnz	r5, 171e8 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   171de:	2601      	movs	r6, #1
}
   171e0:	4630      	mov	r0, r6
   171e2:	b00a      	add	sp, #40	; 0x28
   171e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   171e8:	2218      	movs	r2, #24
   171ea:	2100      	movs	r1, #0
   171ec:	a804      	add	r0, sp, #16
   171ee:	f006 fe3e 	bl	1de6e <memset>
	if (rsp) {
   171f2:	b13f      	cbz	r7, 17204 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   171f4:	2200      	movs	r2, #0
   171f6:	4639      	mov	r1, r7
   171f8:	4620      	mov	r0, r4
   171fa:	f7ff fe95 	bl	16f28 <bt_att_chan_create_pdu>
   171fe:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   17200:	2800      	cmp	r0, #0
   17202:	d03d      	beq.n	17280 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   17204:	6823      	ldr	r3, [r4, #0]
   17206:	681b      	ldr	r3, [r3, #0]
   17208:	9304      	str	r3, [sp, #16]
	data.req = req;
   1720a:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1720e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   17212:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   17216:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17218:	9307      	str	r3, [sp, #28]
	data.len = len;
   1721a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1721e:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17222:	2301      	movs	r3, #1
   17224:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   17228:	ab04      	add	r3, sp, #16
   1722a:	9302      	str	r3, [sp, #8]
   1722c:	4b15      	ldr	r3, [pc, #84]	; (17284 <att_write_rsp+0xc8>)
   1722e:	9301      	str	r3, [sp, #4]
   17230:	2200      	movs	r2, #0
   17232:	9200      	str	r2, [sp, #0]
   17234:	4613      	mov	r3, r2
   17236:	4629      	mov	r1, r5
   17238:	4628      	mov	r0, r5
   1723a:	f000 fdf1 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1723e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   17242:	b93e      	cbnz	r6, 17254 <att_write_rsp+0x98>
	if (data.buf) {
   17244:	9905      	ldr	r1, [sp, #20]
   17246:	2900      	cmp	r1, #0
   17248:	d0ca      	beq.n	171e0 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1724a:	4a0f      	ldr	r2, [pc, #60]	; (17288 <att_write_rsp+0xcc>)
   1724c:	4620      	mov	r0, r4
   1724e:	f007 ff01 	bl	1f054 <bt_att_chan_send_rsp>
   17252:	e7c5      	b.n	171e0 <att_write_rsp+0x24>
		if (rsp) {
   17254:	b927      	cbnz	r7, 17260 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   17256:	f1b8 0f18 	cmp.w	r8, #24
   1725a:	d00c      	beq.n	17276 <att_write_rsp+0xba>
   1725c:	2600      	movs	r6, #0
   1725e:	e7bf      	b.n	171e0 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   17260:	9805      	ldr	r0, [sp, #20]
   17262:	f008 fee3 	bl	2002c <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   17266:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1726a:	462a      	mov	r2, r5
   1726c:	4641      	mov	r1, r8
   1726e:	4620      	mov	r0, r4
   17270:	f7ff feb0 	bl	16fd4 <send_err_rsp>
   17274:	e7ef      	b.n	17256 <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   17276:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1727a:	e7b1      	b.n	171e0 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1727c:	2612      	movs	r6, #18
   1727e:	e7af      	b.n	171e0 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   17280:	260e      	movs	r6, #14
   17282:	e7ad      	b.n	171e0 <att_write_rsp+0x24>
   17284:	0001efff 	.word	0x0001efff
   17288:	0001eeb1 	.word	0x0001eeb1

0001728c <bt_att_create_pdu>:
{
   1728c:	b570      	push	{r4, r5, r6, lr}
   1728e:	460e      	mov	r6, r1
   17290:	4615      	mov	r5, r2
	att = att_get(conn);
   17292:	f7ff fb33 	bl	168fc <att_get>
	if (!att) {
   17296:	4604      	mov	r4, r0
   17298:	b340      	cbz	r0, 172ec <bt_att_create_pdu+0x60>
	return list->head;
   1729a:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1729c:	b344      	cbz	r4, 172f0 <bt_att_create_pdu+0x64>
   1729e:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   172a2:	d027      	beq.n	172f4 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   172a4:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   172a8:	d008      	beq.n	172bc <bt_att_create_pdu+0x30>
	return node->next;
   172aa:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   172ae:	b128      	cbz	r0, 172bc <bt_att_create_pdu+0x30>
   172b0:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   172b4:	e002      	b.n	172bc <bt_att_create_pdu+0x30>
   172b6:	4603      	mov	r3, r0
   172b8:	4604      	mov	r4, r0
   172ba:	4618      	mov	r0, r3
   172bc:	b1e4      	cbz	r4, 172f8 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   172be:	1c6b      	adds	r3, r5, #1
   172c0:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   172c4:	4293      	cmp	r3, r2
   172c6:	d90b      	bls.n	172e0 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   172c8:	2800      	cmp	r0, #0
   172ca:	d0f4      	beq.n	172b6 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   172cc:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   172d0:	d0f2      	beq.n	172b8 <bt_att_create_pdu+0x2c>
	return node->next;
   172d2:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   172d6:	2b00      	cmp	r3, #0
   172d8:	d0ee      	beq.n	172b8 <bt_att_create_pdu+0x2c>
   172da:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   172de:	e7eb      	b.n	172b8 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   172e0:	462a      	mov	r2, r5
   172e2:	4631      	mov	r1, r6
   172e4:	4620      	mov	r0, r4
   172e6:	f7ff fe1f 	bl	16f28 <bt_att_chan_create_pdu>
   172ea:	4604      	mov	r4, r0
}
   172ec:	4620      	mov	r0, r4
   172ee:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   172f0:	4620      	mov	r0, r4
   172f2:	e7e3      	b.n	172bc <bt_att_create_pdu+0x30>
   172f4:	4620      	mov	r0, r4
   172f6:	e7e1      	b.n	172bc <bt_att_create_pdu+0x30>
   172f8:	4b08      	ldr	r3, [pc, #32]	; (1731c <bt_att_create_pdu+0x90>)
   172fa:	4a09      	ldr	r2, [pc, #36]	; (17320 <bt_att_create_pdu+0x94>)
   172fc:	1a9b      	subs	r3, r3, r2
   172fe:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   17300:	f04f 0200 	mov.w	r2, #0
   17304:	2102      	movs	r1, #2
   17306:	f361 0202 	bfi	r2, r1, #0, #3
   1730a:	f36f 02c5 	bfc	r2, #3, #3
   1730e:	f363 128f 	bfi	r2, r3, #6, #10
   17312:	1c69      	adds	r1, r5, #1
   17314:	4803      	ldr	r0, [pc, #12]	; (17324 <bt_att_create_pdu+0x98>)
   17316:	f7f9 fb8d 	bl	10a34 <log_1>
	return NULL;
   1731a:	e7e7      	b.n	172ec <bt_att_create_pdu+0x60>
   1731c:	00021f8c 	.word	0x00021f8c
   17320:	00021f84 	.word	0x00021f84
   17324:	00023bcc 	.word	0x00023bcc

00017328 <att_read_group_rsp>:
{
   17328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1732c:	b08a      	sub	sp, #40	; 0x28
   1732e:	4604      	mov	r4, r0
   17330:	460f      	mov	r7, r1
   17332:	4615      	mov	r5, r2
   17334:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17336:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1733a:	2214      	movs	r2, #20
   1733c:	2100      	movs	r1, #0
   1733e:	eb0d 0002 	add.w	r0, sp, r2
   17342:	f006 fd94 	bl	1de6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   17346:	2201      	movs	r2, #1
   17348:	2111      	movs	r1, #17
   1734a:	4640      	mov	r0, r8
   1734c:	f7ff ff9e 	bl	1728c <bt_att_create_pdu>
   17350:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   17352:	b350      	cbz	r0, 173aa <att_read_group_rsp+0x82>
	data.chan = chan;
   17354:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   17356:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   17358:	2101      	movs	r1, #1
   1735a:	3008      	adds	r0, #8
   1735c:	f008 feb0 	bl	200c0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   17360:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   17362:	2200      	movs	r2, #0
   17364:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   17366:	9209      	str	r2, [sp, #36]	; 0x24
   17368:	ab05      	add	r3, sp, #20
   1736a:	9302      	str	r3, [sp, #8]
   1736c:	4b10      	ldr	r3, [pc, #64]	; (173b0 <att_read_group_rsp+0x88>)
   1736e:	9301      	str	r3, [sp, #4]
   17370:	9200      	str	r2, [sp, #0]
   17372:	4613      	mov	r3, r2
   17374:	4631      	mov	r1, r6
   17376:	4628      	mov	r0, r5
   17378:	f000 fd52 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1737c:	9b08      	ldr	r3, [sp, #32]
   1737e:	781e      	ldrb	r6, [r3, #0]
   17380:	b14e      	cbz	r6, 17396 <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17382:	4a0c      	ldr	r2, [pc, #48]	; (173b4 <att_read_group_rsp+0x8c>)
   17384:	9907      	ldr	r1, [sp, #28]
   17386:	4620      	mov	r0, r4
   17388:	f007 fe64 	bl	1f054 <bt_att_chan_send_rsp>
	return 0;
   1738c:	2600      	movs	r6, #0
}
   1738e:	4630      	mov	r0, r6
   17390:	b00a      	add	sp, #40	; 0x28
   17392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17396:	9807      	ldr	r0, [sp, #28]
   17398:	f008 fe48 	bl	2002c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1739c:	230a      	movs	r3, #10
   1739e:	462a      	mov	r2, r5
   173a0:	2110      	movs	r1, #16
   173a2:	4620      	mov	r0, r4
   173a4:	f7ff fe16 	bl	16fd4 <send_err_rsp>
		return 0;
   173a8:	e7f1      	b.n	1738e <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   173aa:	260e      	movs	r6, #14
   173ac:	e7ef      	b.n	1738e <att_read_group_rsp+0x66>
   173ae:	bf00      	nop
   173b0:	00016bd5 	.word	0x00016bd5
   173b4:	0001eeb1 	.word	0x0001eeb1

000173b8 <att_read_mult_req>:
{
   173b8:	b570      	push	{r4, r5, r6, lr}
   173ba:	b088      	sub	sp, #32
   173bc:	4606      	mov	r6, r0
   173be:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   173c0:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   173c2:	2101      	movs	r1, #1
   173c4:	4620      	mov	r0, r4
   173c6:	f008 fcbc 	bl	1fd42 <bt_gatt_change_aware>
   173ca:	2800      	cmp	r0, #0
   173cc:	d039      	beq.n	17442 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   173ce:	2210      	movs	r2, #16
   173d0:	2100      	movs	r1, #0
   173d2:	eb0d 0002 	add.w	r0, sp, r2
   173d6:	f006 fd4a 	bl	1de6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   173da:	2200      	movs	r2, #0
   173dc:	210f      	movs	r1, #15
   173de:	4620      	mov	r0, r4
   173e0:	f7ff ff54 	bl	1728c <bt_att_create_pdu>
   173e4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   173e6:	b378      	cbz	r0, 17448 <att_read_mult_req+0x90>
	data.chan = chan;
   173e8:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   173ea:	89ab      	ldrh	r3, [r5, #12]
   173ec:	2b01      	cmp	r3, #1
   173ee:	d921      	bls.n	17434 <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   173f0:	f105 0008 	add.w	r0, r5, #8
   173f4:	f008 fe94 	bl	20120 <net_buf_simple_pull_le16>
   173f8:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   173fa:	2301      	movs	r3, #1
   173fc:	f88d 301c 	strb.w	r3, [sp, #28]
   17400:	ab04      	add	r3, sp, #16
   17402:	9302      	str	r3, [sp, #8]
   17404:	4b11      	ldr	r3, [pc, #68]	; (1744c <att_read_mult_req+0x94>)
   17406:	9301      	str	r3, [sp, #4]
   17408:	2200      	movs	r2, #0
   1740a:	9200      	str	r2, [sp, #0]
   1740c:	4613      	mov	r3, r2
   1740e:	4601      	mov	r1, r0
   17410:	f000 fd06 	bl	17e20 <bt_gatt_foreach_attr_type>
		if (data.err) {
   17414:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17418:	2b00      	cmp	r3, #0
   1741a:	d0e6      	beq.n	173ea <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1741c:	9806      	ldr	r0, [sp, #24]
   1741e:	f008 fe05 	bl	2002c <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   17422:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17426:	4622      	mov	r2, r4
   17428:	210e      	movs	r1, #14
   1742a:	4630      	mov	r0, r6
   1742c:	f7ff fdd2 	bl	16fd4 <send_err_rsp>
			return 0;
   17430:	2000      	movs	r0, #0
   17432:	e007      	b.n	17444 <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17434:	4a06      	ldr	r2, [pc, #24]	; (17450 <att_read_mult_req+0x98>)
   17436:	9906      	ldr	r1, [sp, #24]
   17438:	4630      	mov	r0, r6
   1743a:	f007 fe0b 	bl	1f054 <bt_att_chan_send_rsp>
	return 0;
   1743e:	2000      	movs	r0, #0
   17440:	e000      	b.n	17444 <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17442:	2012      	movs	r0, #18
}
   17444:	b008      	add	sp, #32
   17446:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   17448:	200e      	movs	r0, #14
   1744a:	e7fb      	b.n	17444 <att_read_mult_req+0x8c>
   1744c:	0001f1c5 	.word	0x0001f1c5
   17450:	0001eeb1 	.word	0x0001eeb1

00017454 <att_read_rsp>:
{
   17454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17458:	b088      	sub	sp, #32
   1745a:	4604      	mov	r4, r0
   1745c:	4688      	mov	r8, r1
   1745e:	4616      	mov	r6, r2
   17460:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17462:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   17464:	2101      	movs	r1, #1
   17466:	4638      	mov	r0, r7
   17468:	f008 fc6b 	bl	1fd42 <bt_gatt_change_aware>
   1746c:	2800      	cmp	r0, #0
   1746e:	d03a      	beq.n	174e6 <att_read_rsp+0x92>
	if (!handle) {
   17470:	b925      	cbnz	r5, 1747c <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   17472:	2601      	movs	r6, #1
}
   17474:	4630      	mov	r0, r6
   17476:	b008      	add	sp, #32
   17478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1747c:	2210      	movs	r2, #16
   1747e:	2100      	movs	r1, #0
   17480:	eb0d 0002 	add.w	r0, sp, r2
   17484:	f006 fcf3 	bl	1de6e <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   17488:	2200      	movs	r2, #0
   1748a:	4631      	mov	r1, r6
   1748c:	4638      	mov	r0, r7
   1748e:	f7ff fefd 	bl	1728c <bt_att_create_pdu>
   17492:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17494:	b348      	cbz	r0, 174ea <att_read_rsp+0x96>
	data.chan = chan;
   17496:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   17498:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1749c:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   174a0:	2301      	movs	r3, #1
   174a2:	f88d 301c 	strb.w	r3, [sp, #28]
   174a6:	ab04      	add	r3, sp, #16
   174a8:	9302      	str	r3, [sp, #8]
   174aa:	4b11      	ldr	r3, [pc, #68]	; (174f0 <att_read_rsp+0x9c>)
   174ac:	9301      	str	r3, [sp, #4]
   174ae:	2200      	movs	r2, #0
   174b0:	9200      	str	r2, [sp, #0]
   174b2:	4613      	mov	r3, r2
   174b4:	4629      	mov	r1, r5
   174b6:	4628      	mov	r0, r5
   174b8:	f000 fcb2 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (data.err) {
   174bc:	f89d 601c 	ldrb.w	r6, [sp, #28]
   174c0:	b92e      	cbnz	r6, 174ce <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   174c2:	4a0c      	ldr	r2, [pc, #48]	; (174f4 <att_read_rsp+0xa0>)
   174c4:	9906      	ldr	r1, [sp, #24]
   174c6:	4620      	mov	r0, r4
   174c8:	f007 fdc4 	bl	1f054 <bt_att_chan_send_rsp>
	return 0;
   174cc:	e7d2      	b.n	17474 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   174ce:	9806      	ldr	r0, [sp, #24]
   174d0:	f008 fdac 	bl	2002c <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   174d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
   174d8:	462a      	mov	r2, r5
   174da:	4641      	mov	r1, r8
   174dc:	4620      	mov	r0, r4
   174de:	f7ff fd79 	bl	16fd4 <send_err_rsp>
		return 0;
   174e2:	2600      	movs	r6, #0
   174e4:	e7c6      	b.n	17474 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   174e6:	2612      	movs	r6, #18
   174e8:	e7c4      	b.n	17474 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   174ea:	260e      	movs	r6, #14
   174ec:	e7c2      	b.n	17474 <att_read_rsp+0x20>
   174ee:	bf00      	nop
   174f0:	0001f1c5 	.word	0x0001f1c5
   174f4:	0001eeb1 	.word	0x0001eeb1

000174f8 <att_read_type_rsp>:
{
   174f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   174fc:	b08a      	sub	sp, #40	; 0x28
   174fe:	4604      	mov	r4, r0
   17500:	460f      	mov	r7, r1
   17502:	4615      	mov	r5, r2
   17504:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   17506:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1750a:	2218      	movs	r2, #24
   1750c:	2100      	movs	r1, #0
   1750e:	a804      	add	r0, sp, #16
   17510:	f006 fcad 	bl	1de6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   17514:	2201      	movs	r2, #1
   17516:	2109      	movs	r1, #9
   17518:	4640      	mov	r0, r8
   1751a:	f7ff feb7 	bl	1728c <bt_att_create_pdu>
   1751e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   17520:	b368      	cbz	r0, 1757e <att_read_type_rsp+0x86>
	data.chan = chan;
   17522:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   17524:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   17526:	2101      	movs	r1, #1
   17528:	3008      	adds	r0, #8
   1752a:	f008 fdc9 	bl	200c0 <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1752e:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   17530:	2200      	movs	r2, #0
   17532:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17534:	230a      	movs	r3, #10
   17536:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1753a:	ab04      	add	r3, sp, #16
   1753c:	9302      	str	r3, [sp, #8]
   1753e:	4b11      	ldr	r3, [pc, #68]	; (17584 <att_read_type_rsp+0x8c>)
   17540:	9301      	str	r3, [sp, #4]
   17542:	9200      	str	r2, [sp, #0]
   17544:	4613      	mov	r3, r2
   17546:	4631      	mov	r1, r6
   17548:	4628      	mov	r0, r5
   1754a:	f000 fc69 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1754e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   17552:	b946      	cbnz	r6, 17566 <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17554:	4a0c      	ldr	r2, [pc, #48]	; (17588 <att_read_type_rsp+0x90>)
   17556:	9906      	ldr	r1, [sp, #24]
   17558:	4620      	mov	r0, r4
   1755a:	f007 fd7b 	bl	1f054 <bt_att_chan_send_rsp>
}
   1755e:	4630      	mov	r0, r6
   17560:	b00a      	add	sp, #40	; 0x28
   17562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   17566:	9806      	ldr	r0, [sp, #24]
   17568:	f008 fd60 	bl	2002c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1756c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   17570:	462a      	mov	r2, r5
   17572:	2108      	movs	r1, #8
   17574:	4620      	mov	r0, r4
   17576:	f7ff fd2d 	bl	16fd4 <send_err_rsp>
		return 0;
   1757a:	2600      	movs	r6, #0
   1757c:	e7ef      	b.n	1755e <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   1757e:	260e      	movs	r6, #14
   17580:	e7ed      	b.n	1755e <att_read_type_rsp+0x66>
   17582:	bf00      	nop
   17584:	00016c89 	.word	0x00016c89
   17588:	0001eeb1 	.word	0x0001eeb1

0001758c <att_find_type_rsp>:
{
   1758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17590:	b08a      	sub	sp, #40	; 0x28
   17592:	4604      	mov	r4, r0
   17594:	460d      	mov	r5, r1
   17596:	4616      	mov	r6, r2
   17598:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1759a:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1759e:	2214      	movs	r2, #20
   175a0:	2100      	movs	r1, #0
   175a2:	eb0d 0002 	add.w	r0, sp, r2
   175a6:	f006 fc62 	bl	1de6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   175aa:	2200      	movs	r2, #0
   175ac:	2107      	movs	r1, #7
   175ae:	4640      	mov	r0, r8
   175b0:	f7ff fe6c 	bl	1728c <bt_att_create_pdu>
   175b4:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   175b6:	b360      	cbz	r0, 17612 <att_find_type_rsp+0x86>
	data.chan = chan;
   175b8:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   175ba:	2200      	movs	r2, #0
   175bc:	9207      	str	r2, [sp, #28]
	data.value = value;
   175be:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   175c0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   175c4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   175c8:	230a      	movs	r3, #10
   175ca:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   175ce:	ab05      	add	r3, sp, #20
   175d0:	9302      	str	r3, [sp, #8]
   175d2:	4b11      	ldr	r3, [pc, #68]	; (17618 <att_find_type_rsp+0x8c>)
   175d4:	9301      	str	r3, [sp, #4]
   175d6:	9200      	str	r2, [sp, #0]
   175d8:	4613      	mov	r3, r2
   175da:	4631      	mov	r1, r6
   175dc:	4628      	mov	r0, r5
   175de:	f000 fc1f 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (data.err) {
   175e2:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   175e6:	b946      	cbnz	r6, 175fa <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   175e8:	4a0c      	ldr	r2, [pc, #48]	; (1761c <att_find_type_rsp+0x90>)
   175ea:	9906      	ldr	r1, [sp, #24]
   175ec:	4620      	mov	r0, r4
   175ee:	f007 fd31 	bl	1f054 <bt_att_chan_send_rsp>
}
   175f2:	4630      	mov	r0, r6
   175f4:	b00a      	add	sp, #40	; 0x28
   175f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   175fa:	9806      	ldr	r0, [sp, #24]
   175fc:	f008 fd16 	bl	2002c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   17600:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   17604:	462a      	mov	r2, r5
   17606:	2106      	movs	r1, #6
   17608:	4620      	mov	r0, r4
   1760a:	f7ff fce3 	bl	16fd4 <send_err_rsp>
		return 0;
   1760e:	2600      	movs	r6, #0
   17610:	e7ef      	b.n	175f2 <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   17612:	260e      	movs	r6, #14
   17614:	e7ed      	b.n	175f2 <att_find_type_rsp+0x66>
   17616:	bf00      	nop
   17618:	00016d35 	.word	0x00016d35
   1761c:	0001eeb1 	.word	0x0001eeb1

00017620 <att_find_info_rsp>:
{
   17620:	b5f0      	push	{r4, r5, r6, r7, lr}
   17622:	b089      	sub	sp, #36	; 0x24
   17624:	4604      	mov	r4, r0
   17626:	460f      	mov	r7, r1
   17628:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1762a:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1762c:	2210      	movs	r2, #16
   1762e:	2100      	movs	r1, #0
   17630:	eb0d 0002 	add.w	r0, sp, r2
   17634:	f006 fc1b 	bl	1de6e <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   17638:	2200      	movs	r2, #0
   1763a:	2105      	movs	r1, #5
   1763c:	4628      	mov	r0, r5
   1763e:	f7ff fe25 	bl	1728c <bt_att_create_pdu>
   17642:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   17644:	b300      	cbz	r0, 17688 <att_find_info_rsp+0x68>
	data.chan = chan;
   17646:	9404      	str	r4, [sp, #16]
   17648:	ab04      	add	r3, sp, #16
   1764a:	9302      	str	r3, [sp, #8]
   1764c:	4b0f      	ldr	r3, [pc, #60]	; (1768c <att_find_info_rsp+0x6c>)
   1764e:	9301      	str	r3, [sp, #4]
   17650:	2200      	movs	r2, #0
   17652:	9200      	str	r2, [sp, #0]
   17654:	4613      	mov	r3, r2
   17656:	4631      	mov	r1, r6
   17658:	4638      	mov	r0, r7
   1765a:	f000 fbe1 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1765e:	9b06      	ldr	r3, [sp, #24]
   17660:	b13b      	cbz	r3, 17672 <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17662:	4a0b      	ldr	r2, [pc, #44]	; (17690 <att_find_info_rsp+0x70>)
   17664:	9905      	ldr	r1, [sp, #20]
   17666:	4620      	mov	r0, r4
   17668:	f007 fcf4 	bl	1f054 <bt_att_chan_send_rsp>
	return 0;
   1766c:	2000      	movs	r0, #0
}
   1766e:	b009      	add	sp, #36	; 0x24
   17670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   17672:	9805      	ldr	r0, [sp, #20]
   17674:	f008 fcda 	bl	2002c <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   17678:	230a      	movs	r3, #10
   1767a:	463a      	mov	r2, r7
   1767c:	2104      	movs	r1, #4
   1767e:	4620      	mov	r0, r4
   17680:	f7ff fca8 	bl	16fd4 <send_err_rsp>
		return 0;
   17684:	2000      	movs	r0, #0
   17686:	e7f2      	b.n	1766e <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   17688:	200e      	movs	r0, #14
   1768a:	e7f0      	b.n	1766e <att_find_info_rsp+0x4e>
   1768c:	0001f20d 	.word	0x0001f20d
   17690:	0001eeb1 	.word	0x0001eeb1

00017694 <att_mtu_req>:
{
   17694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17696:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   17698:	6803      	ldr	r3, [r0, #0]
   1769a:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1769c:	f3bf 8f5b 	dmb	ish
   176a0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   176a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   176a8:	f013 0f08 	tst.w	r3, #8
   176ac:	d123      	bne.n	176f6 <att_mtu_req+0x62>
	req = (void *)buf->data;
   176ae:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   176b0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   176b2:	2e16      	cmp	r6, #22
   176b4:	d921      	bls.n	176fa <att_mtu_req+0x66>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   176b6:	2202      	movs	r2, #2
   176b8:	2103      	movs	r1, #3
   176ba:	f7ff fde7 	bl	1728c <bt_att_create_pdu>
	if (!pdu) {
   176be:	4607      	mov	r7, r0
   176c0:	b1e8      	cbz	r0, 176fe <att_mtu_req+0x6a>
   176c2:	2102      	movs	r1, #2
   176c4:	3008      	adds	r0, #8
   176c6:	f008 fcfb 	bl	200c0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   176ca:	2500      	movs	r5, #0
   176cc:	f06f 0308 	mvn.w	r3, #8
   176d0:	7003      	strb	r3, [r0, #0]
   176d2:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   176d4:	4a0b      	ldr	r2, [pc, #44]	; (17704 <att_mtu_req+0x70>)
   176d6:	4639      	mov	r1, r7
   176d8:	4620      	mov	r0, r4
   176da:	f007 fcbb 	bl	1f054 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   176de:	2ef7      	cmp	r6, #247	; 0xf7
   176e0:	bf28      	it	cs
   176e2:	26f7      	movcs	r6, #247	; 0xf7
   176e4:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   176e8:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   176ec:	4620      	mov	r0, r4
   176ee:	f007 fde9 	bl	1f2c4 <att_chan_mtu_updated>
	return 0;
   176f2:	4628      	mov	r0, r5
}
   176f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   176f6:	2006      	movs	r0, #6
   176f8:	e7fc      	b.n	176f4 <att_mtu_req+0x60>
		return BT_ATT_ERR_INVALID_PDU;
   176fa:	2004      	movs	r0, #4
   176fc:	e7fa      	b.n	176f4 <att_mtu_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   176fe:	200e      	movs	r0, #14
   17700:	e7f8      	b.n	176f4 <att_mtu_req+0x60>
   17702:	bf00      	nop
   17704:	0001eeb1 	.word	0x0001eeb1

00017708 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17708:	b500      	push	{lr}
   1770a:	b083      	sub	sp, #12
   1770c:	4602      	mov	r2, r0
   1770e:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   17710:	2100      	movs	r1, #0
   17712:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17714:	a901      	add	r1, sp, #4
   17716:	4807      	ldr	r0, [pc, #28]	; (17734 <bt_att_req_alloc+0x2c>)
   17718:	f003 fa5c 	bl	1abd4 <k_mem_slab_alloc>
   1771c:	b940      	cbnz	r0, 17730 <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1771e:	2210      	movs	r2, #16
   17720:	2100      	movs	r1, #0
   17722:	9801      	ldr	r0, [sp, #4]
   17724:	f006 fba3 	bl	1de6e <memset>

	return req;
   17728:	9801      	ldr	r0, [sp, #4]
}
   1772a:	b003      	add	sp, #12
   1772c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   17730:	2000      	movs	r0, #0
   17732:	e7fa      	b.n	1772a <bt_att_req_alloc+0x22>
   17734:	200006d8 	.word	0x200006d8

00017738 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   17738:	b500      	push	{lr}
   1773a:	b083      	sub	sp, #12
   1773c:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1773e:	6880      	ldr	r0, [r0, #8]
   17740:	b120      	cbz	r0, 1774c <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   17742:	f008 fc73 	bl	2002c <net_buf_unref>
		req->buf = NULL;
   17746:	9b01      	ldr	r3, [sp, #4]
   17748:	2200      	movs	r2, #0
   1774a:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1774c:	a901      	add	r1, sp, #4
   1774e:	4803      	ldr	r0, [pc, #12]	; (1775c <bt_att_req_free+0x24>)
   17750:	f009 fc9b 	bl	2108a <k_mem_slab_free>
}
   17754:	b003      	add	sp, #12
   17756:	f85d fb04 	ldr.w	pc, [sp], #4
   1775a:	bf00      	nop
   1775c:	200006d8 	.word	0x200006d8

00017760 <att_handle_rsp>:
{
   17760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17764:	b082      	sub	sp, #8
   17766:	4604      	mov	r4, r0
   17768:	460f      	mov	r7, r1
   1776a:	4691      	mov	r9, r2
   1776c:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1776e:	f500 7088 	add.w	r0, r0, #272	; 0x110
   17772:	f009 ff05 	bl	21580 <k_work_cancel_delayable>
	if (!chan->req) {
   17776:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   1777a:	b1f8      	cbz	r0, 177bc <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   1777c:	4b1a      	ldr	r3, [pc, #104]	; (177e8 <att_handle_rsp+0x88>)
   1777e:	4298      	cmp	r0, r3
   17780:	d02e      	beq.n	177e0 <att_handle_rsp+0x80>
	func = chan->req->func;
   17782:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   17784:	f04f 0a00 	mov.w	sl, #0
   17788:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1778c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   17790:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   17794:	f7ff ffd0 	bl	17738 <bt_att_req_free>
	chan->req = NULL;
   17798:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   1779c:	6820      	ldr	r0, [r4, #0]
   1779e:	f007 fb29 	bl	1edf4 <att_req_send_process>
	if (func) {
   177a2:	b13d      	cbz	r5, 177b4 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   177a4:	6823      	ldr	r3, [r4, #0]
   177a6:	6818      	ldr	r0, [r3, #0]
   177a8:	f8cd 8000 	str.w	r8, [sp]
   177ac:	464b      	mov	r3, r9
   177ae:	463a      	mov	r2, r7
   177b0:	4631      	mov	r1, r6
   177b2:	47a8      	blx	r5
}
   177b4:	2000      	movs	r0, #0
   177b6:	b002      	add	sp, #8
   177b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   177bc:	4b0b      	ldr	r3, [pc, #44]	; (177ec <att_handle_rsp+0x8c>)
   177be:	4a0c      	ldr	r2, [pc, #48]	; (177f0 <att_handle_rsp+0x90>)
   177c0:	1a9b      	subs	r3, r3, r2
   177c2:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   177c4:	f04f 0100 	mov.w	r1, #0
   177c8:	2202      	movs	r2, #2
   177ca:	f362 0102 	bfi	r1, r2, #0, #3
   177ce:	f36f 01c5 	bfc	r1, #3, #3
   177d2:	f363 118f 	bfi	r1, r3, #6, #10
   177d6:	4807      	ldr	r0, [pc, #28]	; (177f4 <att_handle_rsp+0x94>)
   177d8:	f7f9 f9e2 	bl	10ba0 <log_0>
	bt_att_func_t func = NULL;
   177dc:	2500      	movs	r5, #0
		goto process;
   177de:	e7dd      	b.n	1779c <att_handle_rsp+0x3c>
		chan->req = NULL;
   177e0:	2500      	movs	r5, #0
   177e2:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   177e6:	e7d9      	b.n	1779c <att_handle_rsp+0x3c>
   177e8:	20001fbc 	.word	0x20001fbc
   177ec:	00021f8c 	.word	0x00021f8c
   177f0:	00021f84 	.word	0x00021f84
   177f4:	00023be8 	.word	0x00023be8

000177f8 <att_reset>:
{
   177f8:	b570      	push	{r4, r5, r6, lr}
   177fa:	b084      	sub	sp, #16
   177fc:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   177fe:	2200      	movs	r2, #0
   17800:	2300      	movs	r3, #0
   17802:	9803      	ldr	r0, [sp, #12]
   17804:	300c      	adds	r0, #12
   17806:	f008 fbe5 	bl	1ffd4 <net_buf_get>
   1780a:	4603      	mov	r3, r0
   1780c:	b118      	cbz	r0, 17816 <att_reset+0x1e>
		net_buf_unref(buf);
   1780e:	4618      	mov	r0, r3
   17810:	f008 fc0c 	bl	2002c <net_buf_unref>
   17814:	e7f3      	b.n	177fe <att_reset+0x6>
	att->conn = NULL;
   17816:	9b03      	ldr	r3, [sp, #12]
   17818:	2200      	movs	r2, #0
   1781a:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1781c:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1781e:	685d      	ldr	r5, [r3, #4]
   17820:	b11d      	cbz	r5, 1782a <att_reset+0x32>
   17822:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   17824:	b135      	cbz	r5, 17834 <att_reset+0x3c>
	return node->next;
   17826:	682c      	ldr	r4, [r5, #0]
   17828:	e004      	b.n	17834 <att_reset+0x3c>
   1782a:	462c      	mov	r4, r5
   1782c:	e002      	b.n	17834 <att_reset+0x3c>
   1782e:	4623      	mov	r3, r4
   17830:	4625      	mov	r5, r4
   17832:	461c      	mov	r4, r3
   17834:	b195      	cbz	r5, 1785c <att_reset+0x64>
		if (req->func) {
   17836:	686e      	ldr	r6, [r5, #4]
   17838:	b136      	cbz	r6, 17848 <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1783a:	68eb      	ldr	r3, [r5, #12]
   1783c:	9300      	str	r3, [sp, #0]
   1783e:	2300      	movs	r3, #0
   17840:	461a      	mov	r2, r3
   17842:	210e      	movs	r1, #14
   17844:	4618      	mov	r0, r3
   17846:	47b0      	blx	r6
		bt_att_req_free(req);
   17848:	4628      	mov	r0, r5
   1784a:	f7ff ff75 	bl	17738 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1784e:	2c00      	cmp	r4, #0
   17850:	d0ed      	beq.n	1782e <att_reset+0x36>
   17852:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   17854:	2c00      	cmp	r4, #0
   17856:	d0eb      	beq.n	17830 <att_reset+0x38>
	return node->next;
   17858:	6823      	ldr	r3, [r4, #0]
   1785a:	e7e9      	b.n	17830 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
   1785c:	a903      	add	r1, sp, #12
   1785e:	4802      	ldr	r0, [pc, #8]	; (17868 <att_reset+0x70>)
   17860:	f009 fc13 	bl	2108a <k_mem_slab_free>
}
   17864:	b004      	add	sp, #16
   17866:	bd70      	pop	{r4, r5, r6, pc}
   17868:	200006a0 	.word	0x200006a0

0001786c <att_timeout>:
{
   1786c:	b510      	push	{r4, lr}
   1786e:	4604      	mov	r4, r0
   17870:	4b0a      	ldr	r3, [pc, #40]	; (1789c <att_timeout+0x30>)
   17872:	4a0b      	ldr	r2, [pc, #44]	; (178a0 <att_timeout+0x34>)
   17874:	1a9b      	subs	r3, r3, r2
   17876:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   17878:	f04f 0100 	mov.w	r1, #0
   1787c:	2201      	movs	r2, #1
   1787e:	f362 0102 	bfi	r1, r2, #0, #3
   17882:	f36f 01c5 	bfc	r1, #3, #3
   17886:	f363 118f 	bfi	r1, r3, #6, #10
   1788a:	4806      	ldr	r0, [pc, #24]	; (178a4 <att_timeout+0x38>)
   1788c:	f7f9 f988 	bl	10ba0 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   17890:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   17894:	f007 fed2 	bl	1f63c <bt_att_disconnected>
}
   17898:	bd10      	pop	{r4, pc}
   1789a:	bf00      	nop
   1789c:	00021f8c 	.word	0x00021f8c
   178a0:	00021f84 	.word	0x00021f84
   178a4:	00023c00 	.word	0x00023c00

000178a8 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   178a8:	4b0d      	ldr	r3, [pc, #52]	; (178e0 <bt_gatt_service_init+0x38>)
   178aa:	2201      	movs	r2, #1
   178ac:	f3bf 8f5b 	dmb	ish
   178b0:	e853 1f00 	ldrex	r1, [r3]
   178b4:	2900      	cmp	r1, #0
   178b6:	d103      	bne.n	178c0 <bt_gatt_service_init+0x18>
   178b8:	e843 2000 	strex	r0, r2, [r3]
   178bc:	2800      	cmp	r0, #0
   178be:	d1f7      	bne.n	178b0 <bt_gatt_service_init+0x8>
   178c0:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   178c4:	d101      	bne.n	178ca <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178c6:	4b07      	ldr	r3, [pc, #28]	; (178e4 <bt_gatt_service_init+0x3c>)
   178c8:	e006      	b.n	178d8 <bt_gatt_service_init+0x30>
   178ca:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   178cc:	685a      	ldr	r2, [r3, #4]
   178ce:	4906      	ldr	r1, [pc, #24]	; (178e8 <bt_gatt_service_init+0x40>)
   178d0:	8808      	ldrh	r0, [r1, #0]
   178d2:	4402      	add	r2, r0
   178d4:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178d6:	3308      	adds	r3, #8
   178d8:	4a04      	ldr	r2, [pc, #16]	; (178ec <bt_gatt_service_init+0x44>)
   178da:	4293      	cmp	r3, r2
   178dc:	d3f6      	bcc.n	178cc <bt_gatt_service_init+0x24>
	}
}
   178de:	4770      	bx	lr
   178e0:	2000200c 	.word	0x2000200c
   178e4:	00021f6c 	.word	0x00021f6c
   178e8:	2000319c 	.word	0x2000319c
   178ec:	00021f84 	.word	0x00021f84

000178f0 <find_cf_cfg>:
{
   178f0:	b570      	push	{r4, r5, r6, lr}
   178f2:	b082      	sub	sp, #8
   178f4:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   178f6:	2400      	movs	r4, #0
   178f8:	2c00      	cmp	r4, #0
   178fa:	dd03      	ble.n	17904 <find_cf_cfg+0x14>
	return NULL;
   178fc:	2500      	movs	r5, #0
}
   178fe:	4628      	mov	r0, r5
   17900:	b002      	add	sp, #8
   17902:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17904:	4d0e      	ldr	r5, [pc, #56]	; (17940 <find_cf_cfg+0x50>)
   17906:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1790a:	b166      	cbz	r6, 17926 <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1790c:	490c      	ldr	r1, [pc, #48]	; (17940 <find_cf_cfg+0x50>)
   1790e:	0123      	lsls	r3, r4, #4
   17910:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   17914:	3201      	adds	r2, #1
   17916:	5cc9      	ldrb	r1, [r1, r3]
   17918:	4630      	mov	r0, r6
   1791a:	f006 ffdf 	bl	1e8dc <bt_conn_is_peer_addr_le>
   1791e:	2800      	cmp	r0, #0
   17920:	d1ed      	bne.n	178fe <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   17922:	3401      	adds	r4, #1
   17924:	e7e8      	b.n	178f8 <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17926:	4628      	mov	r0, r5
   17928:	2300      	movs	r3, #0
   1792a:	9300      	str	r3, [sp, #0]
   1792c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   17930:	2207      	movs	r2, #7
   17932:	4669      	mov	r1, sp
   17934:	3001      	adds	r0, #1
   17936:	f006 fa5f 	bl	1ddf8 <memcmp>
   1793a:	2800      	cmp	r0, #0
   1793c:	d1f1      	bne.n	17922 <find_cf_cfg+0x32>
   1793e:	e7de      	b.n	178fe <find_cf_cfg+0xe>
   17940:	20001fd4 	.word	0x20001fd4

00017944 <cf_write>:
{
   17944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17948:	461d      	mov	r5, r3
   1794a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1794e:	2b01      	cmp	r3, #1
   17950:	d83f      	bhi.n	179d2 <cf_write+0x8e>
   17952:	4606      	mov	r6, r0
   17954:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   17956:	462f      	mov	r7, r5
   17958:	442b      	add	r3, r5
   1795a:	2b01      	cmp	r3, #1
   1795c:	d83c      	bhi.n	179d8 <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1795e:	f7ff ffc7 	bl	178f0 <find_cf_cfg>
	if (!cfg) {
   17962:	4604      	mov	r4, r0
   17964:	b1f0      	cbz	r0, 179a4 <cf_write+0x60>
	if (!cfg) {
   17966:	b30c      	cbz	r4, 179ac <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
   17968:	462a      	mov	r2, r5
   1796a:	4641      	mov	r1, r8
   1796c:	4620      	mov	r0, r4
   1796e:	f007 fec8 	bl	1f702 <cf_set_value>
   17972:	b3a0      	cbz	r0, 179de <cf_write+0x9a>
	memcpy(dst, src, sizeof(*dst));
   17974:	2207      	movs	r2, #7
   17976:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1797a:	1c60      	adds	r0, r4, #1
   1797c:	f006 fa53 	bl	1de26 <memcpy>
	cfg->id = conn->id;
   17980:	7a33      	ldrb	r3, [r6, #8]
   17982:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17986:	f3bf 8f5b 	dmb	ish
   1798a:	e854 3f00 	ldrex	r3, [r4]
   1798e:	f043 0301 	orr.w	r3, r3, #1
   17992:	e844 3200 	strex	r2, r3, [r4]
   17996:	2a00      	cmp	r2, #0
   17998:	d1f7      	bne.n	1798a <cf_write+0x46>
   1799a:	f3bf 8f5b 	dmb	ish
}
   1799e:	4638      	mov	r0, r7
   179a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   179a4:	f7ff ffa4 	bl	178f0 <find_cf_cfg>
   179a8:	4604      	mov	r4, r0
   179aa:	e7dc      	b.n	17966 <cf_write+0x22>
   179ac:	4b0d      	ldr	r3, [pc, #52]	; (179e4 <cf_write+0xa0>)
   179ae:	4a0e      	ldr	r2, [pc, #56]	; (179e8 <cf_write+0xa4>)
   179b0:	1a9b      	subs	r3, r3, r2
   179b2:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   179b4:	f04f 0100 	mov.w	r1, #0
   179b8:	2202      	movs	r2, #2
   179ba:	f362 0102 	bfi	r1, r2, #0, #3
   179be:	f36f 01c5 	bfc	r1, #3, #3
   179c2:	f363 118f 	bfi	r1, r3, #6, #10
   179c6:	4809      	ldr	r0, [pc, #36]	; (179ec <cf_write+0xa8>)
   179c8:	f7f9 f8ea 	bl	10ba0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   179cc:	f06f 0710 	mvn.w	r7, #16
   179d0:	e7e5      	b.n	1799e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   179d2:	f06f 0706 	mvn.w	r7, #6
   179d6:	e7e2      	b.n	1799e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   179d8:	f06f 070c 	mvn.w	r7, #12
   179dc:	e7df      	b.n	1799e <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   179de:	f06f 0712 	mvn.w	r7, #18
   179e2:	e7dc      	b.n	1799e <cf_write+0x5a>
   179e4:	00021fa4 	.word	0x00021fa4
   179e8:	00021f84 	.word	0x00021f84
   179ec:	00023c7c 	.word	0x00023c7c

000179f0 <find_sc_cfg>:
{
   179f0:	b570      	push	{r4, r5, r6, lr}
   179f2:	4606      	mov	r6, r0
   179f4:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   179f6:	2400      	movs	r4, #0
   179f8:	b10c      	cbz	r4, 179fe <find_sc_cfg+0xe>
	return NULL;
   179fa:	2000      	movs	r0, #0
}
   179fc:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   179fe:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   17a02:	4a0c      	ldr	r2, [pc, #48]	; (17a34 <find_sc_cfg+0x44>)
   17a04:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   17a08:	429e      	cmp	r6, r3
   17a0a:	d001      	beq.n	17a10 <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17a0c:	3401      	adds	r4, #1
   17a0e:	e7f3      	b.n	179f8 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   17a10:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   17a14:	eb02 0080 	add.w	r0, r2, r0, lsl #2
	return memcmp(a, b, sizeof(*a));
   17a18:	2207      	movs	r2, #7
   17a1a:	4629      	mov	r1, r5
   17a1c:	3001      	adds	r0, #1
   17a1e:	f006 f9eb 	bl	1ddf8 <memcmp>
		if (id == sc_cfg[i].id &&
   17a22:	2800      	cmp	r0, #0
   17a24:	d1f2      	bne.n	17a0c <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   17a26:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   17a2a:	4802      	ldr	r0, [pc, #8]	; (17a34 <find_sc_cfg+0x44>)
   17a2c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   17a30:	e7e4      	b.n	179fc <find_sc_cfg+0xc>
   17a32:	bf00      	nop
   17a34:	20001fe8 	.word	0x20001fe8

00017a38 <sc_save>:
{
   17a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a3c:	b082      	sub	sp, #8
   17a3e:	4607      	mov	r7, r0
   17a40:	4688      	mov	r8, r1
   17a42:	4616      	mov	r6, r2
   17a44:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   17a46:	f7ff ffd3 	bl	179f0 <find_sc_cfg>
	if (!cfg) {
   17a4a:	4604      	mov	r4, r0
   17a4c:	b170      	cbz	r0, 17a6c <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   17a4e:	8923      	ldrh	r3, [r4, #8]
   17a50:	b90b      	cbnz	r3, 17a56 <sc_save+0x1e>
   17a52:	8963      	ldrh	r3, [r4, #10]
   17a54:	b353      	cbz	r3, 17aac <sc_save+0x74>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   17a56:	462b      	mov	r3, r5
   17a58:	4632      	mov	r2, r6
   17a5a:	f104 010a 	add.w	r1, r4, #10
   17a5e:	f104 0008 	add.w	r0, r4, #8
   17a62:	f007 fe39 	bl	1f6d8 <update_range>
}
   17a66:	b002      	add	sp, #8
   17a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17a6c:	9000      	str	r0, [sp, #0]
   17a6e:	f8cd 0003 	str.w	r0, [sp, #3]
   17a72:	4669      	mov	r1, sp
   17a74:	f7ff ffbc 	bl	179f0 <find_sc_cfg>
		if (!cfg) {
   17a78:	4604      	mov	r4, r0
   17a7a:	b130      	cbz	r0, 17a8a <sc_save+0x52>
		cfg->id = id;
   17a7c:	f800 7b01 	strb.w	r7, [r0], #1
	memcpy(dst, src, sizeof(*dst));
   17a80:	2207      	movs	r2, #7
   17a82:	4641      	mov	r1, r8
   17a84:	f006 f9cf 	bl	1de26 <memcpy>
   17a88:	e7e1      	b.n	17a4e <sc_save+0x16>
   17a8a:	4b0a      	ldr	r3, [pc, #40]	; (17ab4 <sc_save+0x7c>)
   17a8c:	4a0a      	ldr	r2, [pc, #40]	; (17ab8 <sc_save+0x80>)
   17a8e:	1a9b      	subs	r3, r3, r2
   17a90:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   17a92:	f04f 0100 	mov.w	r1, #0
   17a96:	2201      	movs	r2, #1
   17a98:	f362 0102 	bfi	r1, r2, #0, #3
   17a9c:	f36f 01c5 	bfc	r1, #3, #3
   17aa0:	f363 118f 	bfi	r1, r3, #6, #10
   17aa4:	4805      	ldr	r0, [pc, #20]	; (17abc <sc_save+0x84>)
   17aa6:	f7f9 f87b 	bl	10ba0 <log_0>
			return;
   17aaa:	e7dc      	b.n	17a66 <sc_save+0x2e>
		cfg->data.start = start;
   17aac:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   17aae:	8165      	strh	r5, [r4, #10]
		goto done;
   17ab0:	e7d9      	b.n	17a66 <sc_save+0x2e>
   17ab2:	bf00      	nop
   17ab4:	00021fa4 	.word	0x00021fa4
   17ab8:	00021f84 	.word	0x00021f84
   17abc:	00023ca8 	.word	0x00023ca8

00017ac0 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   17ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17ac4:	461c      	mov	r4, r3
   17ac6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   17aca:	68cf      	ldr	r7, [r1, #12]
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   17acc:	2b00      	cmp	r3, #0
   17ace:	d157      	bne.n	17b80 <bt_gatt_attr_write_ccc+0xc0>
   17ad0:	4681      	mov	r9, r0
   17ad2:	460e      	mov	r6, r1
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   17ad4:	1e63      	subs	r3, r4, #1
   17ad6:	b29b      	uxth	r3, r3
   17ad8:	2b01      	cmp	r3, #1
   17ada:	d854      	bhi.n	17b86 <bt_gatt_attr_write_ccc+0xc6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   17adc:	2c01      	cmp	r4, #1
   17ade:	d91d      	bls.n	17b1c <bt_gatt_attr_write_ccc+0x5c>
   17ae0:	7853      	ldrb	r3, [r2, #1]
   17ae2:	7815      	ldrb	r5, [r2, #0]
   17ae4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   17ae8:	4639      	mov	r1, r7
   17aea:	4648      	mov	r0, r9
   17aec:	f007 ff21 	bl	1f932 <find_ccc_cfg>
	if (!cfg) {
   17af0:	4680      	mov	r8, r0
   17af2:	b1a8      	cbz	r0, 17b20 <bt_gatt_attr_write_ccc+0x60>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
		cfg->id = conn->id;
	}

	/* Confirm write if cfg is managed by application */
	if (ccc->cfg_write) {
   17af4:	693b      	ldr	r3, [r7, #16]
   17af6:	b143      	cbz	r3, 17b0a <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   17af8:	462a      	mov	r2, r5
   17afa:	4631      	mov	r1, r6
   17afc:	4648      	mov	r0, r9
   17afe:	4798      	blx	r3

		if (write < 0) {
   17b00:	2800      	cmp	r0, #0
   17b02:	db09      	blt.n	17b18 <bt_gatt_attr_write_ccc+0x58>
			return write;
		}

		/* Accept size=1 for backwards compatibility */
		if (write != sizeof(value) && write != 1) {
   17b04:	3801      	subs	r0, #1
   17b06:	2801      	cmp	r0, #1
   17b08:	d840      	bhi.n	17b8c <bt_gatt_attr_write_ccc+0xcc>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
		}
	}

	value_changed = cfg->value != value;
	cfg->value = value;
   17b0a:	f8a8 5008 	strh.w	r5, [r8, #8]

	BT_DBG("handle 0x%04x value %u", attr->handle, cfg->value);

	/* Update cfg if don't match */
	if (cfg->value != ccc->value) {
   17b0e:	897b      	ldrh	r3, [r7, #10]
   17b10:	429d      	cmp	r5, r3
   17b12:	d12c      	bne.n	17b6e <bt_gatt_attr_write_ccc+0xae>
		gatt_ccc_conn_enqueue(conn);
#endif
	}

	/* Disabled CCC is the same as no configured CCC, so clear the entry */
	if (!value) {
   17b14:	b385      	cbz	r5, 17b78 <bt_gatt_attr_write_ccc+0xb8>
		clear_ccc_cfg(cfg);
	}

	return len;
   17b16:	4620      	mov	r0, r4
}
   17b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   17b1c:	7815      	ldrb	r5, [r2, #0]
   17b1e:	e7e3      	b.n	17ae8 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   17b20:	b90d      	cbnz	r5, 17b26 <bt_gatt_attr_write_ccc+0x66>
			return len;
   17b22:	4620      	mov	r0, r4
   17b24:	e7f8      	b.n	17b18 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   17b26:	4639      	mov	r1, r7
   17b28:	2000      	movs	r0, #0
   17b2a:	f007 ff02 	bl	1f932 <find_ccc_cfg>
		if (!cfg) {
   17b2e:	4680      	mov	r8, r0
   17b30:	b150      	cbz	r0, 17b48 <bt_gatt_attr_write_ccc+0x88>
   17b32:	2207      	movs	r2, #7
   17b34:	f109 0188 	add.w	r1, r9, #136	; 0x88
   17b38:	3001      	adds	r0, #1
   17b3a:	f006 f974 	bl	1de26 <memcpy>
		cfg->id = conn->id;
   17b3e:	f899 3008 	ldrb.w	r3, [r9, #8]
   17b42:	f888 3000 	strb.w	r3, [r8]
   17b46:	e7d5      	b.n	17af4 <bt_gatt_attr_write_ccc+0x34>
   17b48:	4b12      	ldr	r3, [pc, #72]	; (17b94 <bt_gatt_attr_write_ccc+0xd4>)
   17b4a:	4a13      	ldr	r2, [pc, #76]	; (17b98 <bt_gatt_attr_write_ccc+0xd8>)
   17b4c:	1a9b      	subs	r3, r3, r2
   17b4e:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   17b50:	f04f 0100 	mov.w	r1, #0
   17b54:	2202      	movs	r2, #2
   17b56:	f362 0102 	bfi	r1, r2, #0, #3
   17b5a:	f36f 01c5 	bfc	r1, #3, #3
   17b5e:	f363 118f 	bfi	r1, r3, #6, #10
   17b62:	480e      	ldr	r0, [pc, #56]	; (17b9c <bt_gatt_attr_write_ccc+0xdc>)
   17b64:	f7f9 f81c 	bl	10ba0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17b68:	f06f 0010 	mvn.w	r0, #16
   17b6c:	e7d4      	b.n	17b18 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   17b6e:	4639      	mov	r1, r7
   17b70:	4630      	mov	r0, r6
   17b72:	f007 fdf7 	bl	1f764 <gatt_ccc_changed>
   17b76:	e7cd      	b.n	17b14 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   17b78:	4640      	mov	r0, r8
   17b7a:	f007 fe20 	bl	1f7be <clear_ccc_cfg>
   17b7e:	e7ca      	b.n	17b16 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17b80:	f06f 0006 	mvn.w	r0, #6
   17b84:	e7c8      	b.n	17b18 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17b86:	f06f 000c 	mvn.w	r0, #12
   17b8a:	e7c5      	b.n	17b18 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   17b8c:	f06f 000d 	mvn.w	r0, #13
   17b90:	e7c2      	b.n	17b18 <bt_gatt_attr_write_ccc+0x58>
   17b92:	bf00      	nop
   17b94:	00021fa4 	.word	0x00021fa4
   17b98:	00021f84 	.word	0x00021f84
   17b9c:	00023cc8 	.word	0x00023cc8

00017ba0 <sc_clear>:
{
   17ba0:	b538      	push	{r3, r4, r5, lr}
   17ba2:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17ba4:	f100 0588 	add.w	r5, r0, #136	; 0x88
   17ba8:	4629      	mov	r1, r5
   17baa:	7a00      	ldrb	r0, [r0, #8]
   17bac:	f006 fb51 	bl	1e252 <bt_addr_le_is_bonded>
   17bb0:	b1b8      	cbz	r0, 17be2 <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   17bb2:	4629      	mov	r1, r5
   17bb4:	7a20      	ldrb	r0, [r4, #8]
   17bb6:	f007 feee 	bl	1f996 <bt_gatt_clear_sc>
		if (err) {
   17bba:	4601      	mov	r1, r0
   17bbc:	b900      	cbnz	r0, 17bc0 <sc_clear+0x20>
}
   17bbe:	bd38      	pop	{r3, r4, r5, pc}
   17bc0:	4b0c      	ldr	r3, [pc, #48]	; (17bf4 <sc_clear+0x54>)
   17bc2:	4a0d      	ldr	r2, [pc, #52]	; (17bf8 <sc_clear+0x58>)
   17bc4:	1a9b      	subs	r3, r3, r2
   17bc6:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   17bc8:	f04f 0200 	mov.w	r2, #0
   17bcc:	2001      	movs	r0, #1
   17bce:	f360 0202 	bfi	r2, r0, #0, #3
   17bd2:	f36f 02c5 	bfc	r2, #3, #3
   17bd6:	f363 128f 	bfi	r2, r3, #6, #10
   17bda:	4808      	ldr	r0, [pc, #32]	; (17bfc <sc_clear+0x5c>)
   17bdc:	f7f8 ff2a 	bl	10a34 <log_1>
   17be0:	e7ed      	b.n	17bbe <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17be2:	4629      	mov	r1, r5
   17be4:	7a20      	ldrb	r0, [r4, #8]
   17be6:	f7ff ff03 	bl	179f0 <find_sc_cfg>
		if (cfg) {
   17bea:	2800      	cmp	r0, #0
   17bec:	d0e7      	beq.n	17bbe <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   17bee:	f007 fecc 	bl	1f98a <clear_sc_cfg>
}
   17bf2:	e7e4      	b.n	17bbe <sc_clear+0x1e>
   17bf4:	00021fa4 	.word	0x00021fa4
   17bf8:	00021f84 	.word	0x00021f84
   17bfc:	00023ce4 	.word	0x00023ce4

00017c00 <sc_indicate_rsp>:
{
   17c00:	b510      	push	{r4, lr}
   17c02:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17c04:	4b19      	ldr	r3, [pc, #100]	; (17c6c <sc_indicate_rsp+0x6c>)
   17c06:	f103 0250 	add.w	r2, r3, #80	; 0x50
   17c0a:	f3bf 8f5b 	dmb	ish
   17c0e:	e852 1f00 	ldrex	r1, [r2]
   17c12:	f021 0102 	bic.w	r1, r1, #2
   17c16:	e842 1000 	strex	r0, r1, [r2]
   17c1a:	2800      	cmp	r0, #0
   17c1c:	d1f7      	bne.n	17c0e <sc_indicate_rsp+0xe>
   17c1e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17c22:	f3bf 8f5b 	dmb	ish
   17c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   17c28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17c2c:	f013 0f01 	tst.w	r3, #1
   17c30:	d116      	bne.n	17c60 <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   17c32:	4620      	mov	r0, r4
   17c34:	f7ff fe5c 	bl	178f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   17c38:	4603      	mov	r3, r0
   17c3a:	b180      	cbz	r0, 17c5e <sc_indicate_rsp+0x5e>
   17c3c:	7a02      	ldrb	r2, [r0, #8]
   17c3e:	f012 0f01 	tst.w	r2, #1
   17c42:	d00c      	beq.n	17c5e <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17c44:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17c46:	f3bf 8f5b 	dmb	ish
   17c4a:	e853 2f00 	ldrex	r2, [r3]
   17c4e:	f042 0201 	orr.w	r2, r2, #1
   17c52:	e843 2100 	strex	r1, r2, [r3]
   17c56:	2900      	cmp	r1, #0
   17c58:	d1f7      	bne.n	17c4a <sc_indicate_rsp+0x4a>
   17c5a:	f3bf 8f5b 	dmb	ish
}
   17c5e:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   17c60:	2200      	movs	r2, #0
   17c62:	2300      	movs	r3, #0
   17c64:	4802      	ldr	r0, [pc, #8]	; (17c70 <sc_indicate_rsp+0x70>)
   17c66:	f003 fc11 	bl	1b48c <k_work_reschedule>
   17c6a:	e7e2      	b.n	17c32 <sc_indicate_rsp+0x32>
   17c6c:	200018f0 	.word	0x200018f0
   17c70:	20001910 	.word	0x20001910

00017c74 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   17c74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17c78:	6881      	ldr	r1, [r0, #8]
   17c7a:	4b2d      	ldr	r3, [pc, #180]	; (17d30 <disconnected_cb+0xbc>)
   17c7c:	4299      	cmp	r1, r3
   17c7e:	d002      	beq.n	17c86 <disconnected_cb+0x12>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   17c80:	2001      	movs	r0, #1
   17c82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c86:	4604      	mov	r4, r0
   17c88:	4616      	mov	r6, r2
	ccc = attr->user_data;
   17c8a:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   17c8c:	897b      	ldrh	r3, [r7, #10]
   17c8e:	2b00      	cmp	r3, #0
   17c90:	d0f6      	beq.n	17c80 <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17c92:	2500      	movs	r5, #0
	value_used = false;
   17c94:	46aa      	mov	sl, r5
   17c96:	e021      	b.n	17cdc <disconnected_cb+0x68>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   17c98:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   17c9c:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   17ca0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   17ca4:	b1cb      	cbz	r3, 17cda <disconnected_cb+0x66>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17ca6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   17caa:	f108 0901 	add.w	r9, r8, #1
   17cae:	464a      	mov	r2, r9
   17cb0:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   17cb4:	4630      	mov	r0, r6
   17cb6:	f006 fe11 	bl	1e8dc <bt_conn_is_peer_addr_le>
   17cba:	bb00      	cbnz	r0, 17cfe <disconnected_cb+0x8a>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17cbc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   17cc0:	4649      	mov	r1, r9
   17cc2:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   17cc6:	f7fe f9cf 	bl	16068 <bt_conn_lookup_addr_le>
			if (tmp) {
   17cca:	4603      	mov	r3, r0
   17ccc:	b128      	cbz	r0, 17cda <disconnected_cb+0x66>
				if (tmp->state == BT_CONN_CONNECTED) {
   17cce:	7a82      	ldrb	r2, [r0, #10]
   17cd0:	2a07      	cmp	r2, #7
   17cd2:	d011      	beq.n	17cf8 <disconnected_cb+0x84>
				bt_conn_unref(tmp);
   17cd4:	4618      	mov	r0, r3
   17cd6:	f006 fd97 	bl	1e808 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17cda:	3501      	adds	r5, #1
   17cdc:	2d00      	cmp	r5, #0
   17cde:	d0db      	beq.n	17c98 <disconnected_cb+0x24>
	if (!value_used) {
   17ce0:	f1ba 0f00 	cmp.w	sl, #0
   17ce4:	d1cc      	bne.n	17c80 <disconnected_cb+0xc>
		ccc->value = 0U;
   17ce6:	2300      	movs	r3, #0
   17ce8:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   17cea:	68fb      	ldr	r3, [r7, #12]
   17cec:	2b00      	cmp	r3, #0
   17cee:	d0c7      	beq.n	17c80 <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   17cf0:	2100      	movs	r1, #0
   17cf2:	4620      	mov	r0, r4
   17cf4:	4798      	blx	r3
   17cf6:	e7c3      	b.n	17c80 <disconnected_cb+0xc>
					value_used = true;
   17cf8:	f04f 0a01 	mov.w	sl, #1
   17cfc:	e7ea      	b.n	17cd4 <disconnected_cb+0x60>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17cfe:	f106 0b88 	add.w	fp, r6, #136	; 0x88
   17d02:	4659      	mov	r1, fp
   17d04:	7a30      	ldrb	r0, [r6, #8]
   17d06:	f006 faa4 	bl	1e252 <bt_addr_le_is_bonded>
   17d0a:	b950      	cbnz	r0, 17d22 <disconnected_cb+0xae>
				if (ccc == &sc_ccc) {
   17d0c:	4b09      	ldr	r3, [pc, #36]	; (17d34 <disconnected_cb+0xc0>)
   17d0e:	429f      	cmp	r7, r3
   17d10:	d003      	beq.n	17d1a <disconnected_cb+0xa6>
				clear_ccc_cfg(cfg);
   17d12:	4640      	mov	r0, r8
   17d14:	f007 fd53 	bl	1f7be <clear_ccc_cfg>
   17d18:	e7df      	b.n	17cda <disconnected_cb+0x66>
					sc_clear(conn);
   17d1a:	4630      	mov	r0, r6
   17d1c:	f7ff ff40 	bl	17ba0 <sc_clear>
   17d20:	e7f7      	b.n	17d12 <disconnected_cb+0x9e>
   17d22:	2207      	movs	r2, #7
   17d24:	4659      	mov	r1, fp
   17d26:	4648      	mov	r0, r9
   17d28:	f006 f87d 	bl	1de26 <memcpy>
}
   17d2c:	e7d5      	b.n	17cda <disconnected_cb+0x66>
   17d2e:	bf00      	nop
   17d30:	00017ac1 	.word	0x00017ac1
   17d34:	2000062c 	.word	0x2000062c

00017d38 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   17d38:	4b13      	ldr	r3, [pc, #76]	; (17d88 <bt_gatt_init+0x50>)
   17d3a:	2201      	movs	r2, #1
   17d3c:	f3bf 8f5b 	dmb	ish
   17d40:	e853 1f00 	ldrex	r1, [r3]
   17d44:	2900      	cmp	r1, #0
   17d46:	d103      	bne.n	17d50 <bt_gatt_init+0x18>
   17d48:	e843 2000 	strex	r0, r2, [r3]
   17d4c:	2800      	cmp	r0, #0
   17d4e:	d1f7      	bne.n	17d40 <bt_gatt_init+0x8>
   17d50:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   17d54:	d116      	bne.n	17d84 <bt_gatt_init+0x4c>
{
   17d56:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   17d58:	f7ff fda6 	bl	178a8 <bt_gatt_service_init>
	list->head = NULL;
   17d5c:	4b0b      	ldr	r3, [pc, #44]	; (17d8c <bt_gatt_init+0x54>)
   17d5e:	2200      	movs	r2, #0
   17d60:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   17d62:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   17d64:	4c0a      	ldr	r4, [pc, #40]	; (17d90 <bt_gatt_init+0x58>)
   17d66:	490b      	ldr	r1, [pc, #44]	; (17d94 <bt_gatt_init+0x5c>)
   17d68:	4620      	mov	r0, r4
   17d6a:	f009 fbbd 	bl	214e8 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   17d6e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17d72:	2300      	movs	r3, #0
   17d74:	4620      	mov	r0, r4
   17d76:	f003 fb81 	bl	1b47c <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   17d7a:	4907      	ldr	r1, [pc, #28]	; (17d98 <bt_gatt_init+0x60>)
   17d7c:	4807      	ldr	r0, [pc, #28]	; (17d9c <bt_gatt_init+0x64>)
   17d7e:	f009 fbb3 	bl	214e8 <k_work_init_delayable>
}
   17d82:	bd10      	pop	{r4, pc}
   17d84:	4770      	bx	lr
   17d86:	bf00      	nop
   17d88:	20001fe4 	.word	0x20001fe4
   17d8c:	20001fcc 	.word	0x20001fcc
   17d90:	20001898 	.word	0x20001898
   17d94:	0001fce1 	.word	0x0001fce1
   17d98:	00018191 	.word	0x00018191
   17d9c:	20001910 	.word	0x20001910

00017da0 <bt_gatt_cb_register>:
	sys_slist_append(&callback_list, &cb->node);
   17da0:	1d03      	adds	r3, r0, #4
	parent->next = child;
   17da2:	2200      	movs	r2, #0
   17da4:	6042      	str	r2, [r0, #4]
	return list->tail;
   17da6:	4a05      	ldr	r2, [pc, #20]	; (17dbc <bt_gatt_cb_register+0x1c>)
   17da8:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
   17daa:	b11a      	cbz	r2, 17db4 <bt_gatt_cb_register+0x14>
	parent->next = child;
   17dac:	6013      	str	r3, [r2, #0]
	list->tail = node;
   17dae:	4a03      	ldr	r2, [pc, #12]	; (17dbc <bt_gatt_cb_register+0x1c>)
   17db0:	6053      	str	r3, [r2, #4]
}
   17db2:	4770      	bx	lr
   17db4:	4a01      	ldr	r2, [pc, #4]	; (17dbc <bt_gatt_cb_register+0x1c>)
   17db6:	6053      	str	r3, [r2, #4]
	list->head = node;
   17db8:	6013      	str	r3, [r2, #0]
}
   17dba:	4770      	bx	lr
   17dbc:	20001fcc 	.word	0x20001fcc

00017dc0 <bt_gatt_attr_get_handle>:
	if (!attr) {
   17dc0:	b328      	cbz	r0, 17e0e <bt_gatt_attr_get_handle+0x4e>
{
   17dc2:	b4f0      	push	{r4, r5, r6, r7}
   17dc4:	4606      	mov	r6, r0
	if (attr->handle) {
   17dc6:	8a00      	ldrh	r0, [r0, #16]
   17dc8:	bb20      	cbnz	r0, 17e14 <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17dca:	4d13      	ldr	r5, [pc, #76]	; (17e18 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   17dcc:	2201      	movs	r2, #1
   17dce:	e003      	b.n	17dd8 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   17dd0:	686b      	ldr	r3, [r5, #4]
   17dd2:	441a      	add	r2, r3
   17dd4:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17dd6:	3508      	adds	r5, #8
   17dd8:	4b10      	ldr	r3, [pc, #64]	; (17e1c <bt_gatt_attr_get_handle+0x5c>)
   17dda:	429d      	cmp	r5, r3
   17ddc:	d21a      	bcs.n	17e14 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   17dde:	682c      	ldr	r4, [r5, #0]
   17de0:	42b4      	cmp	r4, r6
   17de2:	d8f5      	bhi.n	17dd0 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17de4:	686f      	ldr	r7, [r5, #4]
   17de6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   17dea:	009b      	lsls	r3, r3, #2
   17dec:	3b14      	subs	r3, #20
   17dee:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   17df0:	42b3      	cmp	r3, r6
   17df2:	d3ed      	bcc.n	17dd0 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   17df4:	2300      	movs	r3, #0
   17df6:	429f      	cmp	r7, r3
   17df8:	d9ed      	bls.n	17dd6 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   17dfa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   17dfe:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   17e02:	42b1      	cmp	r1, r6
   17e04:	d005      	beq.n	17e12 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   17e06:	3301      	adds	r3, #1
   17e08:	3201      	adds	r2, #1
   17e0a:	b292      	uxth	r2, r2
   17e0c:	e7f3      	b.n	17df6 <bt_gatt_attr_get_handle+0x36>
		return 0;
   17e0e:	2000      	movs	r0, #0
}
   17e10:	4770      	bx	lr
				return handle;
   17e12:	4610      	mov	r0, r2
}
   17e14:	bcf0      	pop	{r4, r5, r6, r7}
   17e16:	4770      	bx	lr
   17e18:	00021f6c 	.word	0x00021f6c
   17e1c:	00021f84 	.word	0x00021f84

00017e20 <bt_gatt_foreach_attr_type>:
{
   17e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e24:	b089      	sub	sp, #36	; 0x24
   17e26:	4607      	mov	r7, r0
   17e28:	468a      	mov	sl, r1
   17e2a:	4690      	mov	r8, r2
   17e2c:	4699      	mov	r9, r3
   17e2e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   17e32:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   17e36:	b91b      	cbnz	r3, 17e40 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   17e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17e3c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   17e40:	4b19      	ldr	r3, [pc, #100]	; (17ea8 <bt_gatt_foreach_attr_type+0x88>)
   17e42:	881b      	ldrh	r3, [r3, #0]
   17e44:	42bb      	cmp	r3, r7
   17e46:	d22c      	bcs.n	17ea2 <bt_gatt_foreach_attr_type+0x82>
}
   17e48:	b009      	add	sp, #36	; 0x24
   17e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   17e4e:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17e50:	3608      	adds	r6, #8
   17e52:	4b16      	ldr	r3, [pc, #88]	; (17eac <bt_gatt_foreach_attr_type+0x8c>)
   17e54:	429e      	cmp	r6, r3
   17e56:	d2f7      	bcs.n	17e48 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   17e58:	6873      	ldr	r3, [r6, #4]
   17e5a:	18e2      	adds	r2, r4, r3
   17e5c:	42ba      	cmp	r2, r7
   17e5e:	d3f6      	bcc.n	17e4e <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17e60:	2500      	movs	r5, #0
   17e62:	9707      	str	r7, [sp, #28]
   17e64:	6873      	ldr	r3, [r6, #4]
   17e66:	42ab      	cmp	r3, r5
   17e68:	d919      	bls.n	17e9e <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17e6a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   17e6e:	f8cd b010 	str.w	fp, [sp, #16]
   17e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17e74:	9303      	str	r3, [sp, #12]
   17e76:	ab12      	add	r3, sp, #72	; 0x48
   17e78:	9302      	str	r3, [sp, #8]
   17e7a:	f8cd 9004 	str.w	r9, [sp, #4]
   17e7e:	f8cd 8000 	str.w	r8, [sp]
   17e82:	4653      	mov	r3, sl
   17e84:	9a07      	ldr	r2, [sp, #28]
   17e86:	4621      	mov	r1, r4
   17e88:	6837      	ldr	r7, [r6, #0]
   17e8a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   17e8e:	f007 fda0 	bl	1f9d2 <gatt_foreach_iter>
   17e92:	2800      	cmp	r0, #0
   17e94:	d0d8      	beq.n	17e48 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17e96:	3501      	adds	r5, #1
   17e98:	3401      	adds	r4, #1
   17e9a:	b2a4      	uxth	r4, r4
   17e9c:	e7e2      	b.n	17e64 <bt_gatt_foreach_attr_type+0x44>
   17e9e:	9f07      	ldr	r7, [sp, #28]
   17ea0:	e7d6      	b.n	17e50 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17ea2:	4e03      	ldr	r6, [pc, #12]	; (17eb0 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   17ea4:	2401      	movs	r4, #1
   17ea6:	e7d4      	b.n	17e52 <bt_gatt_foreach_attr_type+0x32>
   17ea8:	2000319c 	.word	0x2000319c
   17eac:	00021f84 	.word	0x00021f84
   17eb0:	00021f6c 	.word	0x00021f6c

00017eb4 <db_hash_gen>:
{
   17eb4:	b510      	push	{r4, lr}
   17eb6:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   17eb8:	2300      	movs	r3, #0
   17eba:	9348      	str	r3, [sp, #288]	; 0x120
   17ebc:	9349      	str	r3, [sp, #292]	; 0x124
   17ebe:	934a      	str	r3, [sp, #296]	; 0x128
   17ec0:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17ec2:	aa1c      	add	r2, sp, #112	; 0x70
   17ec4:	a948      	add	r1, sp, #288	; 0x120
   17ec6:	a804      	add	r0, sp, #16
   17ec8:	f005 fe0b 	bl	1dae2 <tc_cmac_setup>
   17ecc:	b190      	cbz	r0, 17ef4 <db_hash_gen+0x40>
   17ece:	ac04      	add	r4, sp, #16
   17ed0:	9402      	str	r4, [sp, #8]
   17ed2:	4b26      	ldr	r3, [pc, #152]	; (17f6c <db_hash_gen+0xb8>)
   17ed4:	9301      	str	r3, [sp, #4]
   17ed6:	2200      	movs	r2, #0
   17ed8:	9200      	str	r2, [sp, #0]
   17eda:	4613      	mov	r3, r2
   17edc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17ee0:	2001      	movs	r0, #1
   17ee2:	f7ff ff9d 	bl	17e20 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17ee6:	4621      	mov	r1, r4
   17ee8:	4821      	ldr	r0, [pc, #132]	; (17f70 <db_hash_gen+0xbc>)
   17eea:	f005 fe95 	bl	1dc18 <tc_cmac_final>
   17eee:	b190      	cbz	r0, 17f16 <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   17ef0:	2300      	movs	r3, #0
   17ef2:	e029      	b.n	17f48 <db_hash_gen+0x94>
   17ef4:	4b1f      	ldr	r3, [pc, #124]	; (17f74 <db_hash_gen+0xc0>)
   17ef6:	4a20      	ldr	r2, [pc, #128]	; (17f78 <db_hash_gen+0xc4>)
   17ef8:	1a9b      	subs	r3, r3, r2
   17efa:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   17efc:	f04f 0100 	mov.w	r1, #0
   17f00:	2201      	movs	r2, #1
   17f02:	f362 0102 	bfi	r1, r2, #0, #3
   17f06:	f36f 01c5 	bfc	r1, #3, #3
   17f0a:	f363 118f 	bfi	r1, r3, #6, #10
   17f0e:	481b      	ldr	r0, [pc, #108]	; (17f7c <db_hash_gen+0xc8>)
   17f10:	f7f8 fe46 	bl	10ba0 <log_0>
		return;
   17f14:	e027      	b.n	17f66 <db_hash_gen+0xb2>
   17f16:	4b17      	ldr	r3, [pc, #92]	; (17f74 <db_hash_gen+0xc0>)
   17f18:	4a17      	ldr	r2, [pc, #92]	; (17f78 <db_hash_gen+0xc4>)
   17f1a:	1a9b      	subs	r3, r3, r2
   17f1c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   17f1e:	f04f 0100 	mov.w	r1, #0
   17f22:	2201      	movs	r2, #1
   17f24:	f362 0102 	bfi	r1, r2, #0, #3
   17f28:	f36f 01c5 	bfc	r1, #3, #3
   17f2c:	f363 118f 	bfi	r1, r3, #6, #10
   17f30:	4813      	ldr	r0, [pc, #76]	; (17f80 <db_hash_gen+0xcc>)
   17f32:	f7f8 fe35 	bl	10ba0 <log_0>
		return;
   17f36:	e016      	b.n	17f66 <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   17f38:	4a0d      	ldr	r2, [pc, #52]	; (17f70 <db_hash_gen+0xbc>)
   17f3a:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17f3c:	f1c3 010f 	rsb	r1, r3, #15
   17f40:	5c54      	ldrb	r4, [r2, r1]
   17f42:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17f44:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   17f46:	3301      	adds	r3, #1
   17f48:	2b07      	cmp	r3, #7
   17f4a:	d9f5      	bls.n	17f38 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17f4c:	4b0d      	ldr	r3, [pc, #52]	; (17f84 <db_hash_gen+0xd0>)
   17f4e:	f3bf 8f5b 	dmb	ish
   17f52:	e853 2f00 	ldrex	r2, [r3]
   17f56:	f042 0204 	orr.w	r2, r2, #4
   17f5a:	e843 2100 	strex	r1, r2, [r3]
   17f5e:	2900      	cmp	r1, #0
   17f60:	d1f7      	bne.n	17f52 <db_hash_gen+0x9e>
   17f62:	f3bf 8f5b 	dmb	ish
}
   17f66:	b04c      	add	sp, #304	; 0x130
   17f68:	bd10      	pop	{r4, pc}
   17f6a:	bf00      	nop
   17f6c:	0001f825 	.word	0x0001f825
   17f70:	20001888 	.word	0x20001888
   17f74:	00021fa4 	.word	0x00021fa4
   17f78:	00021f84 	.word	0x00021f84
   17f7c:	00023cfc 	.word	0x00023cfc
   17f80:	00023d18 	.word	0x00023d18
   17f84:	20001940 	.word	0x20001940

00017f88 <gatt_find_by_uuid>:
{
   17f88:	b510      	push	{r4, lr}
   17f8a:	b084      	sub	sp, #16
   17f8c:	4604      	mov	r4, r0
   17f8e:	460a      	mov	r2, r1
	found->attr = NULL;
   17f90:	2300      	movs	r3, #0
   17f92:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17f94:	9002      	str	r0, [sp, #8]
   17f96:	4907      	ldr	r1, [pc, #28]	; (17fb4 <gatt_find_by_uuid+0x2c>)
   17f98:	9101      	str	r1, [sp, #4]
   17f9a:	2101      	movs	r1, #1
   17f9c:	9100      	str	r1, [sp, #0]
   17f9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17fa2:	8880      	ldrh	r0, [r0, #4]
   17fa4:	f7ff ff3c 	bl	17e20 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17fa8:	6820      	ldr	r0, [r4, #0]
}
   17faa:	3800      	subs	r0, #0
   17fac:	bf18      	it	ne
   17fae:	2001      	movne	r0, #1
   17fb0:	b004      	add	sp, #16
   17fb2:	bd10      	pop	{r4, pc}
   17fb4:	0001f7b7 	.word	0x0001f7b7

00017fb8 <gatt_indicate>:
{
   17fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17fbc:	b082      	sub	sp, #8
   17fbe:	4606      	mov	r6, r0
   17fc0:	460f      	mov	r7, r1
   17fc2:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   17fc4:	2214      	movs	r2, #20
   17fc6:	6861      	ldr	r1, [r4, #4]
   17fc8:	f007 fe8f 	bl	1fcea <bt_gatt_check_perm>
   17fcc:	bb80      	cbnz	r0, 18030 <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   17fce:	8aa5      	ldrh	r5, [r4, #20]
   17fd0:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   17fd2:	9500      	str	r5, [sp, #0]
   17fd4:	231d      	movs	r3, #29
   17fd6:	2200      	movs	r2, #0
   17fd8:	4621      	mov	r1, r4
   17fda:	482d      	ldr	r0, [pc, #180]	; (18090 <gatt_indicate+0xd8>)
   17fdc:	f007 fd24 	bl	1fa28 <gatt_req_alloc>
	if (!req) {
   17fe0:	4680      	mov	r8, r0
   17fe2:	2800      	cmp	r0, #0
   17fe4:	d051      	beq.n	1808a <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17fe6:	462a      	mov	r2, r5
   17fe8:	211d      	movs	r1, #29
   17fea:	4630      	mov	r0, r6
   17fec:	f7ff f94e 	bl	1728c <bt_att_create_pdu>
	if (!buf) {
   17ff0:	4681      	mov	r9, r0
   17ff2:	b380      	cbz	r0, 18056 <gatt_indicate+0x9e>
   17ff4:	f100 0a08 	add.w	sl, r0, #8
   17ff8:	2102      	movs	r1, #2
   17ffa:	4650      	mov	r0, sl
   17ffc:	f008 f860 	bl	200c0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   18000:	4605      	mov	r5, r0
   18002:	f825 7b02 	strh.w	r7, [r5], #2
   18006:	8aa1      	ldrh	r1, [r4, #20]
   18008:	4650      	mov	r0, sl
   1800a:	f008 f859 	bl	200c0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1800e:	8aa2      	ldrh	r2, [r4, #20]
   18010:	6921      	ldr	r1, [r4, #16]
   18012:	4628      	mov	r0, r5
   18014:	f005 ff07 	bl	1de26 <memcpy>
	req->buf = buf;
   18018:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   1801c:	4641      	mov	r1, r8
   1801e:	4630      	mov	r0, r6
   18020:	f007 fb43 	bl	1f6aa <bt_att_req_send>
	if (err) {
   18024:	4604      	mov	r4, r0
   18026:	bb60      	cbnz	r0, 18082 <gatt_indicate+0xca>
}
   18028:	4620      	mov	r0, r4
   1802a:	b002      	add	sp, #8
   1802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18030:	4b18      	ldr	r3, [pc, #96]	; (18094 <gatt_indicate+0xdc>)
   18032:	4a19      	ldr	r2, [pc, #100]	; (18098 <gatt_indicate+0xe0>)
   18034:	1a9b      	subs	r3, r3, r2
   18036:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   18038:	f04f 0100 	mov.w	r1, #0
   1803c:	2202      	movs	r2, #2
   1803e:	f362 0102 	bfi	r1, r2, #0, #3
   18042:	f36f 01c5 	bfc	r1, #3, #3
   18046:	f363 118f 	bfi	r1, r3, #6, #10
   1804a:	4814      	ldr	r0, [pc, #80]	; (1809c <gatt_indicate+0xe4>)
   1804c:	f7f8 fda8 	bl	10ba0 <log_0>
		return -EPERM;
   18050:	f04f 34ff 	mov.w	r4, #4294967295
   18054:	e7e8      	b.n	18028 <gatt_indicate+0x70>
   18056:	4b0f      	ldr	r3, [pc, #60]	; (18094 <gatt_indicate+0xdc>)
   18058:	4a0f      	ldr	r2, [pc, #60]	; (18098 <gatt_indicate+0xe0>)
   1805a:	1a9b      	subs	r3, r3, r2
   1805c:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   1805e:	f04f 0100 	mov.w	r1, #0
   18062:	2202      	movs	r2, #2
   18064:	f362 0102 	bfi	r1, r2, #0, #3
   18068:	f36f 01c5 	bfc	r1, #3, #3
   1806c:	f363 118f 	bfi	r1, r3, #6, #10
   18070:	480b      	ldr	r0, [pc, #44]	; (180a0 <gatt_indicate+0xe8>)
   18072:	f7f8 fd95 	bl	10ba0 <log_0>
		bt_att_req_free(req);
   18076:	4640      	mov	r0, r8
   18078:	f7ff fb5e 	bl	17738 <bt_att_req_free>
		return -ENOMEM;
   1807c:	f06f 040b 	mvn.w	r4, #11
   18080:	e7d2      	b.n	18028 <gatt_indicate+0x70>
		bt_att_req_free(req);
   18082:	4640      	mov	r0, r8
   18084:	f7ff fb58 	bl	17738 <bt_att_req_free>
   18088:	e7ce      	b.n	18028 <gatt_indicate+0x70>
		return -ENOMEM;
   1808a:	f06f 040b 	mvn.w	r4, #11
   1808e:	e7cb      	b.n	18028 <gatt_indicate+0x70>
   18090:	0001f795 	.word	0x0001f795
   18094:	00021fa4 	.word	0x00021fa4
   18098:	00021f84 	.word	0x00021f84
   1809c:	00023d34 	.word	0x00023d34
   180a0:	00023d4c 	.word	0x00023d4c

000180a4 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180a4:	f3bf 8f5b 	dmb	ish
   180a8:	4b37      	ldr	r3, [pc, #220]	; (18188 <bt_gatt_indicate+0xe4>)
   180aa:	681b      	ldr	r3, [r3, #0]
   180ac:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   180b0:	f013 0f02 	tst.w	r3, #2
   180b4:	d05e      	beq.n	18174 <bt_gatt_indicate+0xd0>
{
   180b6:	b530      	push	{r4, r5, lr}
   180b8:	b08d      	sub	sp, #52	; 0x34
   180ba:	4605      	mov	r5, r0
   180bc:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   180be:	b110      	cbz	r0, 180c6 <bt_gatt_indicate+0x22>
   180c0:	7a83      	ldrb	r3, [r0, #10]
   180c2:	2b07      	cmp	r3, #7
   180c4:	d159      	bne.n	1817a <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   180c6:	6860      	ldr	r0, [r4, #4]
   180c8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   180ca:	f7ff fe79 	bl	17dc0 <bt_gatt_attr_get_handle>
   180ce:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   180d2:	6821      	ldr	r1, [r4, #0]
   180d4:	b341      	cbz	r1, 18128 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   180d6:	a805      	add	r0, sp, #20
   180d8:	f7ff ff56 	bl	17f88 <gatt_find_by_uuid>
   180dc:	2800      	cmp	r0, #0
   180de:	d04f      	beq.n	18180 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   180e0:	9b05      	ldr	r3, [sp, #20]
   180e2:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   180e4:	9b05      	ldr	r3, [sp, #20]
   180e6:	6818      	ldr	r0, [r3, #0]
   180e8:	2300      	movs	r3, #0
   180ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   180ee:	f642 0303 	movw	r3, #10243	; 0x2803
   180f2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   180f6:	a90b      	add	r1, sp, #44	; 0x2c
   180f8:	f005 ff0a 	bl	1df10 <bt_uuid_cmp>
   180fc:	b948      	cbnz	r0, 18112 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   180fe:	9805      	ldr	r0, [sp, #20]
   18100:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   18102:	799b      	ldrb	r3, [r3, #6]
   18104:	f013 0f20 	tst.w	r3, #32
   18108:	d013      	beq.n	18132 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1810a:	f007 fd9a 	bl	1fc42 <bt_gatt_attr_value_handle>
   1810e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   18112:	b18d      	cbz	r5, 18138 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   18114:	2301      	movs	r3, #1
   18116:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   18118:	4622      	mov	r2, r4
   1811a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1811e:	4628      	mov	r0, r5
   18120:	f7ff ff4a 	bl	17fb8 <gatt_indicate>
}
   18124:	b00d      	add	sp, #52	; 0x34
   18126:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   18128:	2800      	cmp	r0, #0
   1812a:	d1db      	bne.n	180e4 <bt_gatt_indicate+0x40>
			return -ENOENT;
   1812c:	f06f 0001 	mvn.w	r0, #1
   18130:	e7f8      	b.n	18124 <bt_gatt_indicate+0x80>
			return -EINVAL;
   18132:	f06f 0015 	mvn.w	r0, #21
   18136:	e7f5      	b.n	18124 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   18138:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1813c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1813e:	2302      	movs	r3, #2
   18140:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   18144:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   18146:	2300      	movs	r3, #0
   18148:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1814a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1814e:	f642 1202 	movw	r2, #10498	; 0x2902
   18152:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   18156:	aa05      	add	r2, sp, #20
   18158:	9202      	str	r2, [sp, #8]
   1815a:	4a0c      	ldr	r2, [pc, #48]	; (1818c <bt_gatt_indicate+0xe8>)
   1815c:	9201      	str	r2, [sp, #4]
   1815e:	2201      	movs	r2, #1
   18160:	9200      	str	r2, [sp, #0]
   18162:	aa0a      	add	r2, sp, #40	; 0x28
   18164:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18168:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1816c:	f7ff fe58 	bl	17e20 <bt_gatt_foreach_attr_type>
	return data.err;
   18170:	9807      	ldr	r0, [sp, #28]
   18172:	e7d7      	b.n	18124 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   18174:	f06f 000a 	mvn.w	r0, #10
}
   18178:	4770      	bx	lr
		return -ENOTCONN;
   1817a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1817e:	e7d1      	b.n	18124 <bt_gatt_indicate+0x80>
			return -ENOENT;
   18180:	f06f 0001 	mvn.w	r0, #1
   18184:	e7ce      	b.n	18124 <bt_gatt_indicate+0x80>
   18186:	bf00      	nop
   18188:	20000374 	.word	0x20000374
   1818c:	00018441 	.word	0x00018441

00018190 <sc_process>:
{
   18190:	b510      	push	{r4, lr}
   18192:	b082      	sub	sp, #8
   18194:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   18196:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1819a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1819e:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   181a2:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   181a6:	f1a0 0120 	sub.w	r1, r0, #32
   181aa:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   181ae:	f3bf 8f5b 	dmb	ish
   181b2:	e854 2f00 	ldrex	r2, [r4]
   181b6:	f022 0201 	bic.w	r2, r2, #1
   181ba:	e844 2000 	strex	r0, r2, [r4]
   181be:	2800      	cmp	r0, #0
   181c0:	d1f7      	bne.n	181b2 <sc_process+0x22>
   181c2:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   181c6:	2000      	movs	r0, #0
   181c8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   181cc:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   181d0:	4a0e      	ldr	r2, [pc, #56]	; (1820c <sc_process+0x7c>)
   181d2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   181d6:	4a0e      	ldr	r2, [pc, #56]	; (18210 <sc_process+0x80>)
   181d8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   181dc:	aa01      	add	r2, sp, #4
   181de:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   181e2:	2204      	movs	r2, #4
   181e4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   181e8:	f7ff ff5c 	bl	180a4 <bt_gatt_indicate>
   181ec:	b108      	cbz	r0, 181f2 <sc_process+0x62>
}
   181ee:	b002      	add	sp, #8
   181f0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   181f2:	f3bf 8f5b 	dmb	ish
   181f6:	e854 3f00 	ldrex	r3, [r4]
   181fa:	f043 0302 	orr.w	r3, r3, #2
   181fe:	e844 3200 	strex	r2, r3, [r4]
   18202:	2a00      	cmp	r2, #0
   18204:	d1f7      	bne.n	181f6 <sc_process+0x66>
   18206:	f3bf 8f5b 	dmb	ish
   1820a:	e7f0      	b.n	181ee <sc_process+0x5e>
   1820c:	00023e0c 	.word	0x00023e0c
   18210:	00017c01 	.word	0x00017c01

00018214 <sc_restore>:
{
   18214:	b530      	push	{r4, r5, lr}
   18216:	b083      	sub	sp, #12
   18218:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1821a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1821e:	7a00      	ldrb	r0, [r0, #8]
   18220:	f7ff fbe6 	bl	179f0 <find_sc_cfg>
	if (!cfg) {
   18224:	b308      	cbz	r0, 1826a <sc_restore+0x56>
   18226:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
   18228:	8903      	ldrh	r3, [r0, #8]
   1822a:	b90b      	cbnz	r3, 18230 <sc_restore+0x1c>
   1822c:	8942      	ldrh	r2, [r0, #10]
   1822e:	b1e2      	cbz	r2, 1826a <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   18230:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18234:	896b      	ldrh	r3, [r5, #10]
   18236:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1823a:	4620      	mov	r0, r4
   1823c:	f7fd fe52 	bl	15ee4 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   18240:	4913      	ldr	r1, [pc, #76]	; (18290 <sc_restore+0x7c>)
   18242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18246:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1824a:	4a12      	ldr	r2, [pc, #72]	; (18294 <sc_restore+0x80>)
   1824c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1824e:	4a12      	ldr	r2, [pc, #72]	; (18298 <sc_restore+0x84>)
   18250:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   18252:	aa01      	add	r2, sp, #4
   18254:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18256:	2204      	movs	r2, #4
   18258:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1825a:	4619      	mov	r1, r3
   1825c:	4620      	mov	r0, r4
   1825e:	f7ff ff21 	bl	180a4 <bt_gatt_indicate>
   18262:	b920      	cbnz	r0, 1826e <sc_restore+0x5a>
	sc_reset(cfg);
   18264:	4628      	mov	r0, r5
   18266:	f007 fbad 	bl	1f9c4 <sc_reset>
}
   1826a:	b003      	add	sp, #12
   1826c:	bd30      	pop	{r4, r5, pc}
   1826e:	4b0b      	ldr	r3, [pc, #44]	; (1829c <sc_restore+0x88>)
   18270:	4a0b      	ldr	r2, [pc, #44]	; (182a0 <sc_restore+0x8c>)
   18272:	1a9b      	subs	r3, r3, r2
   18274:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   18276:	f04f 0100 	mov.w	r1, #0
   1827a:	2201      	movs	r2, #1
   1827c:	f362 0102 	bfi	r1, r2, #0, #3
   18280:	f36f 01c5 	bfc	r1, #3, #3
   18284:	f363 118f 	bfi	r1, r3, #6, #10
   18288:	4806      	ldr	r0, [pc, #24]	; (182a4 <sc_restore+0x90>)
   1828a:	f7f8 fc89 	bl	10ba0 <log_0>
   1828e:	e7e9      	b.n	18264 <sc_restore+0x50>
   18290:	20001ff4 	.word	0x20001ff4
   18294:	00023e0c 	.word	0x00023e0c
   18298:	0001f905 	.word	0x0001f905
   1829c:	00021fa4 	.word	0x00021fa4
   182a0:	00021f84 	.word	0x00021f84
   182a4:	00023d74 	.word	0x00023d74

000182a8 <gatt_notify>:
{
   182a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   182ac:	4606      	mov	r6, r0
   182ae:	460f      	mov	r7, r1
   182b0:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   182b2:	2214      	movs	r2, #20
   182b4:	6861      	ldr	r1, [r4, #4]
   182b6:	f007 fd18 	bl	1fcea <bt_gatt_check_perm>
   182ba:	bb08      	cbnz	r0, 18300 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   182bc:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   182be:	3202      	adds	r2, #2
   182c0:	211b      	movs	r1, #27
   182c2:	4630      	mov	r0, r6
   182c4:	f7fe ffe2 	bl	1728c <bt_att_create_pdu>
	if (!buf) {
   182c8:	4680      	mov	r8, r0
   182ca:	b360      	cbz	r0, 18326 <gatt_notify+0x7e>
   182cc:	f100 0908 	add.w	r9, r0, #8
   182d0:	2102      	movs	r1, #2
   182d2:	4648      	mov	r0, r9
   182d4:	f007 fef4 	bl	200c0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   182d8:	4605      	mov	r5, r0
   182da:	f825 7b02 	strh.w	r7, [r5], #2
   182de:	89a1      	ldrh	r1, [r4, #12]
   182e0:	4648      	mov	r0, r9
   182e2:	f007 feed 	bl	200c0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   182e6:	89a2      	ldrh	r2, [r4, #12]
   182e8:	68a1      	ldr	r1, [r4, #8]
   182ea:	4628      	mov	r0, r5
   182ec:	f005 fd9b 	bl	1de26 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   182f0:	6963      	ldr	r3, [r4, #20]
   182f2:	6922      	ldr	r2, [r4, #16]
   182f4:	4641      	mov	r1, r8
   182f6:	4630      	mov	r0, r6
   182f8:	f007 f9b2 	bl	1f660 <bt_att_send>
}
   182fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   18300:	4b12      	ldr	r3, [pc, #72]	; (1834c <gatt_notify+0xa4>)
   18302:	4a13      	ldr	r2, [pc, #76]	; (18350 <gatt_notify+0xa8>)
   18304:	1a9b      	subs	r3, r3, r2
   18306:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   18308:	f04f 0100 	mov.w	r1, #0
   1830c:	2202      	movs	r2, #2
   1830e:	f362 0102 	bfi	r1, r2, #0, #3
   18312:	f36f 01c5 	bfc	r1, #3, #3
   18316:	f363 118f 	bfi	r1, r3, #6, #10
   1831a:	480e      	ldr	r0, [pc, #56]	; (18354 <gatt_notify+0xac>)
   1831c:	f7f8 fc40 	bl	10ba0 <log_0>
		return -EPERM;
   18320:	f04f 30ff 	mov.w	r0, #4294967295
   18324:	e7ea      	b.n	182fc <gatt_notify+0x54>
   18326:	4b09      	ldr	r3, [pc, #36]	; (1834c <gatt_notify+0xa4>)
   18328:	4a09      	ldr	r2, [pc, #36]	; (18350 <gatt_notify+0xa8>)
   1832a:	1a9b      	subs	r3, r3, r2
   1832c:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   1832e:	f04f 0100 	mov.w	r1, #0
   18332:	2202      	movs	r2, #2
   18334:	f362 0102 	bfi	r1, r2, #0, #3
   18338:	f36f 01c5 	bfc	r1, #3, #3
   1833c:	f363 118f 	bfi	r1, r3, #6, #10
   18340:	4805      	ldr	r0, [pc, #20]	; (18358 <gatt_notify+0xb0>)
   18342:	f7f8 fc2d 	bl	10ba0 <log_0>
		return -ENOMEM;
   18346:	f06f 000b 	mvn.w	r0, #11
   1834a:	e7d7      	b.n	182fc <gatt_notify+0x54>
   1834c:	00021fa4 	.word	0x00021fa4
   18350:	00021f84 	.word	0x00021f84
   18354:	00023d34 	.word	0x00023d34
   18358:	00023d94 	.word	0x00023d94

0001835c <bt_gatt_notify_cb>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1835c:	f3bf 8f5b 	dmb	ish
   18360:	4b35      	ldr	r3, [pc, #212]	; (18438 <bt_gatt_notify_cb+0xdc>)
   18362:	681b      	ldr	r3, [r3, #0]
   18364:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18368:	f013 0f02 	tst.w	r3, #2
   1836c:	d05a      	beq.n	18424 <bt_gatt_notify_cb+0xc8>
{
   1836e:	b530      	push	{r4, r5, lr}
   18370:	b08d      	sub	sp, #52	; 0x34
   18372:	4605      	mov	r5, r0
   18374:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   18376:	b110      	cbz	r0, 1837e <bt_gatt_notify_cb+0x22>
   18378:	7a83      	ldrb	r3, [r0, #10]
   1837a:	2b07      	cmp	r3, #7
   1837c:	d155      	bne.n	1842a <bt_gatt_notify_cb+0xce>
	data.attr = params->attr;
   1837e:	6860      	ldr	r0, [r4, #4]
   18380:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   18382:	f7ff fd1d 	bl	17dc0 <bt_gatt_attr_get_handle>
   18386:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1838a:	6821      	ldr	r1, [r4, #0]
   1838c:	b331      	cbz	r1, 183dc <bt_gatt_notify_cb+0x80>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1838e:	a805      	add	r0, sp, #20
   18390:	f7ff fdfa 	bl	17f88 <gatt_find_by_uuid>
   18394:	2800      	cmp	r0, #0
   18396:	d04b      	beq.n	18430 <bt_gatt_notify_cb+0xd4>
		params->attr = data.attr;
   18398:	9b05      	ldr	r3, [sp, #20]
   1839a:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1839c:	9b05      	ldr	r3, [sp, #20]
   1839e:	6818      	ldr	r0, [r3, #0]
   183a0:	2300      	movs	r3, #0
   183a2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   183a6:	f642 0303 	movw	r3, #10243	; 0x2803
   183aa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   183ae:	a90b      	add	r1, sp, #44	; 0x2c
   183b0:	f005 fdae 	bl	1df10 <bt_uuid_cmp>
   183b4:	b948      	cbnz	r0, 183ca <bt_gatt_notify_cb+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   183b6:	9805      	ldr	r0, [sp, #20]
   183b8:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   183ba:	799b      	ldrb	r3, [r3, #6]
   183bc:	f013 0f10 	tst.w	r3, #16
   183c0:	d011      	beq.n	183e6 <bt_gatt_notify_cb+0x8a>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   183c2:	f007 fc3e 	bl	1fc42 <bt_gatt_attr_value_handle>
   183c6:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   183ca:	b17d      	cbz	r5, 183ec <bt_gatt_notify_cb+0x90>
		return gatt_notify(conn, data.handle, params);
   183cc:	4622      	mov	r2, r4
   183ce:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   183d2:	4628      	mov	r0, r5
   183d4:	f7ff ff68 	bl	182a8 <gatt_notify>
}
   183d8:	b00d      	add	sp, #52	; 0x34
   183da:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   183dc:	2800      	cmp	r0, #0
   183de:	d1dd      	bne.n	1839c <bt_gatt_notify_cb+0x40>
			return -ENOENT;
   183e0:	f06f 0001 	mvn.w	r0, #1
   183e4:	e7f8      	b.n	183d8 <bt_gatt_notify_cb+0x7c>
			return -EINVAL;
   183e6:	f06f 0015 	mvn.w	r0, #21
   183ea:	e7f5      	b.n	183d8 <bt_gatt_notify_cb+0x7c>
	data.err = -ENOTCONN;
   183ec:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   183f0:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   183f2:	2201      	movs	r2, #1
   183f4:	f8ad 2020 	strh.w	r2, [sp, #32]
	data.nfy_params = params;
   183f8:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   183fa:	2300      	movs	r3, #0
   183fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   18400:	f642 1102 	movw	r1, #10498	; 0x2902
   18404:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a
   18408:	a905      	add	r1, sp, #20
   1840a:	9102      	str	r1, [sp, #8]
   1840c:	490b      	ldr	r1, [pc, #44]	; (1843c <bt_gatt_notify_cb+0xe0>)
   1840e:	9101      	str	r1, [sp, #4]
   18410:	9200      	str	r2, [sp, #0]
   18412:	aa0a      	add	r2, sp, #40	; 0x28
   18414:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18418:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1841c:	f7ff fd00 	bl	17e20 <bt_gatt_foreach_attr_type>
	return data.err;
   18420:	9807      	ldr	r0, [sp, #28]
   18422:	e7d9      	b.n	183d8 <bt_gatt_notify_cb+0x7c>
		return -EAGAIN;
   18424:	f06f 000a 	mvn.w	r0, #10
}
   18428:	4770      	bx	lr
		return -ENOTCONN;
   1842a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1842e:	e7d3      	b.n	183d8 <bt_gatt_notify_cb+0x7c>
			return -ENOENT;
   18430:	f06f 0001 	mvn.w	r0, #1
   18434:	e7d0      	b.n	183d8 <bt_gatt_notify_cb+0x7c>
   18436:	bf00      	nop
   18438:	20000374 	.word	0x20000374
   1843c:	00018441 	.word	0x00018441

00018440 <notify_cb>:
{
   18440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18444:	b083      	sub	sp, #12
   18446:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   18448:	6882      	ldr	r2, [r0, #8]
   1844a:	4b50      	ldr	r3, [pc, #320]	; (1858c <notify_cb+0x14c>)
   1844c:	429a      	cmp	r2, r3
   1844e:	d005      	beq.n	1845c <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   18450:	f04f 0a01 	mov.w	sl, #1
}
   18454:	4650      	mov	r0, sl
   18456:	b003      	add	sp, #12
   18458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1845c:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1845e:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   18460:	4b4b      	ldr	r3, [pc, #300]	; (18590 <notify_cb+0x150>)
   18462:	429d      	cmp	r5, r3
   18464:	d031      	beq.n	184ca <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18466:	2400      	movs	r4, #0
   18468:	e05c      	b.n	18524 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   1846a:	6933      	ldr	r3, [r6, #16]
   1846c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1846e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   18472:	8853      	ldrh	r3, [r2, #2]
   18474:	8812      	ldrh	r2, [r2, #0]
   18476:	4649      	mov	r1, r9
   18478:	f8df c118 	ldr.w	ip, [pc, #280]	; 18594 <notify_cb+0x154>
   1847c:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   18480:	f7ff fada 	bl	17a38 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18484:	3401      	adds	r4, #1
   18486:	2c00      	cmp	r4, #0
   18488:	d1ed      	bne.n	18466 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1848a:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   1848e:	4b41      	ldr	r3, [pc, #260]	; (18594 <notify_cb+0x154>)
   18490:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   18494:	f109 0901 	add.w	r9, r9, #1
   18498:	2300      	movs	r3, #0
   1849a:	9300      	str	r3, [sp, #0]
   1849c:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   184a0:	2207      	movs	r2, #7
   184a2:	4669      	mov	r1, sp
   184a4:	4648      	mov	r0, r9
   184a6:	f005 fca7 	bl	1ddf8 <memcmp>
   184aa:	2800      	cmp	r0, #0
   184ac:	d0ea      	beq.n	18484 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   184ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   184b2:	2207      	movs	r2, #7
   184b4:	4649      	mov	r1, r9
   184b6:	4837      	ldr	r0, [pc, #220]	; (18594 <notify_cb+0x154>)
   184b8:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   184bc:	f7fd fe4e 	bl	1615c <bt_conn_lookup_state_le>
			if (!conn) {
   184c0:	2800      	cmp	r0, #0
   184c2:	d0d2      	beq.n	1846a <notify_cb+0x2a>
			bt_conn_unref(conn);
   184c4:	f006 f9a0 	bl	1e808 <bt_conn_unref>
   184c8:	e7dc      	b.n	18484 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   184ca:	2400      	movs	r4, #0
   184cc:	e7db      	b.n	18486 <notify_cb+0x46>
			bt_conn_unref(conn);
   184ce:	f006 f99b 	bl	1e808 <bt_conn_unref>
			continue;
   184d2:	e026      	b.n	18522 <notify_cb+0xe2>
			bt_conn_unref(conn);
   184d4:	4648      	mov	r0, r9
   184d6:	f006 f997 	bl	1e808 <bt_conn_unref>
			continue;
   184da:	e022      	b.n	18522 <notify_cb+0xe2>
   184dc:	4b2e      	ldr	r3, [pc, #184]	; (18598 <notify_cb+0x158>)
   184de:	4a2f      	ldr	r2, [pc, #188]	; (1859c <notify_cb+0x15c>)
   184e0:	1a9b      	subs	r3, r3, r2
   184e2:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   184e4:	2202      	movs	r2, #2
   184e6:	f362 0802 	bfi	r8, r2, #0, #3
   184ea:	f36f 08c5 	bfc	r8, #3, #3
   184ee:	f363 188f 	bfi	r8, r3, #6, #10
   184f2:	4641      	mov	r1, r8
   184f4:	482a      	ldr	r0, [pc, #168]	; (185a0 <notify_cb+0x160>)
   184f6:	f7f8 fb53 	bl	10ba0 <log_0>
			continue;
   184fa:	e012      	b.n	18522 <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   184fc:	6932      	ldr	r2, [r6, #16]
   184fe:	88b1      	ldrh	r1, [r6, #4]
   18500:	4648      	mov	r0, r9
   18502:	f7ff fd59 	bl	17fb8 <gatt_indicate>
			if (err == 0) {
   18506:	4683      	mov	fp, r0
   18508:	b918      	cbnz	r0, 18512 <notify_cb+0xd2>
				data->ind_params->_ref++;
   1850a:	6932      	ldr	r2, [r6, #16]
   1850c:	7d93      	ldrb	r3, [r2, #22]
   1850e:	3301      	adds	r3, #1
   18510:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   18512:	4648      	mov	r0, r9
   18514:	f006 f978 	bl	1e808 <bt_conn_unref>
		if (err < 0) {
   18518:	f1bb 0f00 	cmp.w	fp, #0
   1851c:	db9a      	blt.n	18454 <notify_cb+0x14>
		data->err = 0;
   1851e:	2300      	movs	r3, #0
   18520:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   18522:	3401      	adds	r4, #1
   18524:	bb74      	cbnz	r4, 18584 <notify_cb+0x144>
		if (cfg->value != data->type) {
   18526:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1852a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1852e:	891a      	ldrh	r2, [r3, #8]
   18530:	89b3      	ldrh	r3, [r6, #12]
   18532:	429a      	cmp	r2, r3
   18534:	d1f5      	bne.n	18522 <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18536:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1853a:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1853e:	3101      	adds	r1, #1
   18540:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   18544:	f7fd fd90 	bl	16068 <bt_conn_lookup_addr_le>
		if (!conn) {
   18548:	4681      	mov	r9, r0
   1854a:	2800      	cmp	r0, #0
   1854c:	d0e9      	beq.n	18522 <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   1854e:	7a83      	ldrb	r3, [r0, #10]
   18550:	2b07      	cmp	r3, #7
   18552:	d1bc      	bne.n	184ce <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   18554:	696b      	ldr	r3, [r5, #20]
   18556:	b11b      	cbz	r3, 18560 <notify_cb+0x120>
   18558:	4639      	mov	r1, r7
   1855a:	4798      	blx	r3
   1855c:	2800      	cmp	r0, #0
   1855e:	d0b9      	beq.n	184d4 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   18560:	2214      	movs	r2, #20
   18562:	4639      	mov	r1, r7
   18564:	4648      	mov	r0, r9
   18566:	f007 fbc0 	bl	1fcea <bt_gatt_check_perm>
   1856a:	4682      	mov	sl, r0
   1856c:	2800      	cmp	r0, #0
   1856e:	d1b5      	bne.n	184dc <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   18570:	89b3      	ldrh	r3, [r6, #12]
   18572:	2b02      	cmp	r3, #2
   18574:	d0c2      	beq.n	184fc <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   18576:	6932      	ldr	r2, [r6, #16]
   18578:	88b1      	ldrh	r1, [r6, #4]
   1857a:	4648      	mov	r0, r9
   1857c:	f7ff fe94 	bl	182a8 <gatt_notify>
   18580:	4683      	mov	fp, r0
   18582:	e7c6      	b.n	18512 <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   18584:	f04f 0a01 	mov.w	sl, #1
   18588:	e764      	b.n	18454 <notify_cb+0x14>
   1858a:	bf00      	nop
   1858c:	00017ac1 	.word	0x00017ac1
   18590:	2000062c 	.word	0x2000062c
   18594:	20001fe8 	.word	0x20001fe8
   18598:	00021fa4 	.word	0x00021fa4
   1859c:	00021f84 	.word	0x00021f84
   185a0:	00023d34 	.word	0x00023d34

000185a4 <update_ccc>:
{
   185a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   185a8:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   185aa:	6882      	ldr	r2, [r0, #8]
   185ac:	4b20      	ldr	r3, [pc, #128]	; (18630 <update_ccc+0x8c>)
   185ae:	429a      	cmp	r2, r3
   185b0:	d002      	beq.n	185b8 <update_ccc+0x14>
}
   185b2:	2001      	movs	r0, #1
   185b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   185b8:	4604      	mov	r4, r0
	ccc = attr->user_data;
   185ba:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   185be:	2500      	movs	r5, #0
   185c0:	2d00      	cmp	r5, #0
   185c2:	d1f6      	bne.n	185b2 <update_ccc+0xe>
		if (!cfg->value ||
   185c4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   185c8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   185cc:	891b      	ldrh	r3, [r3, #8]
   185ce:	b36b      	cbz	r3, 1862c <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   185d0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   185d4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   185d8:	3201      	adds	r2, #1
   185da:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   185de:	4638      	mov	r0, r7
   185e0:	f006 f97c 	bl	1e8dc <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   185e4:	b310      	cbz	r0, 1862c <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   185e6:	222a      	movs	r2, #42	; 0x2a
   185e8:	4621      	mov	r1, r4
   185ea:	4638      	mov	r0, r7
   185ec:	f007 fb7d 	bl	1fcea <bt_gatt_check_perm>
		if (err) {
   185f0:	b108      	cbz	r0, 185f6 <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   185f2:	2803      	cmp	r0, #3
   185f4:	d00a      	beq.n	1860c <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   185f6:	4641      	mov	r1, r8
   185f8:	4620      	mov	r0, r4
   185fa:	f007 f8b3 	bl	1f764 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   185fe:	4b0d      	ldr	r3, [pc, #52]	; (18634 <update_ccc+0x90>)
   18600:	4598      	cmp	r8, r3
   18602:	d1d6      	bne.n	185b2 <update_ccc+0xe>
			sc_restore(conn);
   18604:	4638      	mov	r0, r7
   18606:	f7ff fe05 	bl	18214 <sc_restore>
   1860a:	e7d2      	b.n	185b2 <update_ccc+0xe>
   1860c:	4b0a      	ldr	r3, [pc, #40]	; (18638 <update_ccc+0x94>)
   1860e:	4a0b      	ldr	r2, [pc, #44]	; (1863c <update_ccc+0x98>)
   18610:	1a9b      	subs	r3, r3, r2
   18612:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   18614:	2202      	movs	r2, #2
   18616:	f362 0602 	bfi	r6, r2, #0, #3
   1861a:	f36f 06c5 	bfc	r6, #3, #3
   1861e:	f363 168f 	bfi	r6, r3, #6, #10
   18622:	4632      	mov	r2, r6
   18624:	4621      	mov	r1, r4
   18626:	4806      	ldr	r0, [pc, #24]	; (18640 <update_ccc+0x9c>)
   18628:	f7f8 fa04 	bl	10a34 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1862c:	3501      	adds	r5, #1
   1862e:	e7c7      	b.n	185c0 <update_ccc+0x1c>
   18630:	00017ac1 	.word	0x00017ac1
   18634:	2000062c 	.word	0x2000062c
   18638:	00021fa4 	.word	0x00021fa4
   1863c:	00021f84 	.word	0x00021f84
   18640:	00023dc0 	.word	0x00023dc0

00018644 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   18644:	b500      	push	{lr}
   18646:	b087      	sub	sp, #28
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   18648:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1864a:	2001      	movs	r0, #1
   1864c:	f88d 0014 	strb.w	r0, [sp, #20]
   18650:	ab04      	add	r3, sp, #16
   18652:	9302      	str	r3, [sp, #8]
   18654:	4b05      	ldr	r3, [pc, #20]	; (1866c <bt_gatt_connected+0x28>)
   18656:	9301      	str	r3, [sp, #4]
   18658:	2200      	movs	r2, #0
   1865a:	9200      	str	r2, [sp, #0]
   1865c:	4613      	mov	r3, r2
   1865e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18662:	f7ff fbdd 	bl	17e20 <bt_gatt_foreach_attr_type>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   18666:	b007      	add	sp, #28
   18668:	f85d fb04 	ldr.w	pc, [sp], #4
   1866c:	000185a5 	.word	0x000185a5

00018670 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18672:	4605      	mov	r5, r0
   18674:	460e      	mov	r6, r1
   18676:	4617      	mov	r7, r2
	return list->head;
   18678:	4b0a      	ldr	r3, [pc, #40]	; (186a4 <bt_gatt_att_max_mtu_changed+0x34>)
   1867a:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1867c:	b134      	cbz	r4, 1868c <bt_gatt_att_max_mtu_changed+0x1c>
   1867e:	3c04      	subs	r4, #4
   18680:	e004      	b.n	1868c <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   18682:	1d23      	adds	r3, r4, #4
   18684:	d00b      	beq.n	1869e <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   18686:	6864      	ldr	r4, [r4, #4]
   18688:	b15c      	cbz	r4, 186a2 <bt_gatt_att_max_mtu_changed+0x32>
   1868a:	3c04      	subs	r4, #4
   1868c:	b14c      	cbz	r4, 186a2 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1868e:	6823      	ldr	r3, [r4, #0]
   18690:	2b00      	cmp	r3, #0
   18692:	d0f6      	beq.n	18682 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   18694:	463a      	mov	r2, r7
   18696:	4631      	mov	r1, r6
   18698:	4628      	mov	r0, r5
   1869a:	4798      	blx	r3
   1869c:	e7f1      	b.n	18682 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1869e:	461c      	mov	r4, r3
   186a0:	e7f4      	b.n	1868c <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   186a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   186a4:	20001fcc 	.word	0x20001fcc

000186a8 <db_hash_read>:
{
   186a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   186aa:	b085      	sub	sp, #20
   186ac:	4604      	mov	r4, r0
   186ae:	460d      	mov	r5, r1
   186b0:	4616      	mov	r6, r2
   186b2:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   186b4:	4812      	ldr	r0, [pc, #72]	; (18700 <db_hash_read+0x58>)
   186b6:	f100 0140 	add.w	r1, r0, #64	; 0x40
   186ba:	3010      	adds	r0, #16
   186bc:	f008 ff70 	bl	215a0 <k_work_cancel_delayable_sync>
   186c0:	f3bf 8f5b 	dmb	ish
   186c4:	4b0f      	ldr	r3, [pc, #60]	; (18704 <db_hash_read+0x5c>)
   186c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   186c8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   186cc:	f013 0f04 	tst.w	r3, #4
   186d0:	d012      	beq.n	186f8 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   186d2:	2101      	movs	r1, #1
   186d4:	4620      	mov	r0, r4
   186d6:	f007 fb34 	bl	1fd42 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   186da:	2310      	movs	r3, #16
   186dc:	9302      	str	r3, [sp, #8]
   186de:	4b08      	ldr	r3, [pc, #32]	; (18700 <db_hash_read+0x58>)
   186e0:	9301      	str	r3, [sp, #4]
   186e2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   186e6:	9300      	str	r3, [sp, #0]
   186e8:	463b      	mov	r3, r7
   186ea:	4632      	mov	r2, r6
   186ec:	4629      	mov	r1, r5
   186ee:	4620      	mov	r0, r4
   186f0:	f007 f9eb 	bl	1faca <bt_gatt_attr_read>
}
   186f4:	b005      	add	sp, #20
   186f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   186f8:	2001      	movs	r0, #1
   186fa:	f7ff fbdb 	bl	17eb4 <db_hash_gen>
   186fe:	e7e8      	b.n	186d2 <db_hash_read+0x2a>
   18700:	20001888 	.word	0x20001888
   18704:	200018f0 	.word	0x200018f0

00018708 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18708:	b510      	push	{r4, lr}
   1870a:	b084      	sub	sp, #16
   1870c:	4604      	mov	r4, r0
   1870e:	9002      	str	r0, [sp, #8]
   18710:	4b07      	ldr	r3, [pc, #28]	; (18730 <bt_gatt_disconnected+0x28>)
   18712:	9301      	str	r3, [sp, #4]
   18714:	2200      	movs	r2, #0
   18716:	9200      	str	r2, [sp, #0]
   18718:	4613      	mov	r3, r2
   1871a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1871e:	2001      	movs	r0, #1
   18720:	f7ff fb7e 	bl	17e20 <bt_gatt_foreach_attr_type>
#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   18724:	4620      	mov	r0, r4
   18726:	f007 f9ac 	bl	1fa82 <remove_cf_cfg>
#endif
}
   1872a:	b004      	add	sp, #16
   1872c:	bd10      	pop	{r4, pc}
   1872e:	bf00      	nop
   18730:	00017c75 	.word	0x00017c75

00018734 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   18734:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18736:	2300      	movs	r3, #0
   18738:	2b00      	cmp	r3, #0
   1873a:	dd13      	ble.n	18764 <bt_smp_accept+0x30>
   1873c:	4b12      	ldr	r3, [pc, #72]	; (18788 <bt_smp_accept+0x54>)
   1873e:	4a13      	ldr	r2, [pc, #76]	; (1878c <bt_smp_accept+0x58>)
   18740:	1a9b      	subs	r3, r3, r2
   18742:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   18744:	f04f 0200 	mov.w	r2, #0
   18748:	2101      	movs	r1, #1
   1874a:	f361 0202 	bfi	r2, r1, #0, #3
   1874e:	f36f 02c5 	bfc	r2, #3, #3
   18752:	f363 128f 	bfi	r2, r3, #6, #10
   18756:	4601      	mov	r1, r0
   18758:	480d      	ldr	r0, [pc, #52]	; (18790 <bt_smp_accept+0x5c>)
   1875a:	f7f8 f96b 	bl	10a34 <log_1>

	return -ENOMEM;
   1875e:	f06f 000b 	mvn.w	r0, #11
}
   18762:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   18764:	22e8      	movs	r2, #232	; 0xe8
   18766:	fb02 f203 	mul.w	r2, r2, r3
   1876a:	4c0a      	ldr	r4, [pc, #40]	; (18794 <bt_smp_accept+0x60>)
   1876c:	58a2      	ldr	r2, [r4, r2]
   1876e:	b10a      	cbz	r2, 18774 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   18770:	3301      	adds	r3, #1
   18772:	e7e1      	b.n	18738 <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   18774:	4a07      	ldr	r2, [pc, #28]	; (18794 <bt_smp_accept+0x60>)
   18776:	20e8      	movs	r0, #232	; 0xe8
   18778:	fb00 2303 	mla	r3, r0, r3, r2
   1877c:	4a06      	ldr	r2, [pc, #24]	; (18798 <bt_smp_accept+0x64>)
   1877e:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   18780:	600b      	str	r3, [r1, #0]
		return 0;
   18782:	2000      	movs	r0, #0
   18784:	e7ed      	b.n	18762 <bt_smp_accept+0x2e>
   18786:	bf00      	nop
   18788:	00021fcc 	.word	0x00021fcc
   1878c:	00021f84 	.word	0x00021f84
   18790:	00023f10 	.word	0x00023f10
   18794:	20001948 	.word	0x20001948
   18798:	00023f40 	.word	0x00023f40

0001879c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1879c:	4b03      	ldr	r3, [pc, #12]	; (187ac <pool_id+0x10>)
   1879e:	1ac0      	subs	r0, r0, r3
   187a0:	10c0      	asrs	r0, r0, #3
}
   187a2:	4b03      	ldr	r3, [pc, #12]	; (187b0 <pool_id+0x14>)
   187a4:	fb03 f000 	mul.w	r0, r3, r0
   187a8:	4770      	bx	lr
   187aa:	bf00      	nop
   187ac:	2000077c 	.word	0x2000077c
   187b0:	cccccccd 	.word	0xcccccccd

000187b4 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
   187b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
   187b8:	4b01      	ldr	r3, [pc, #4]	; (187c0 <net_buf_pool_get+0xc>)
   187ba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   187be:	4770      	bx	lr
   187c0:	2000077c 	.word	0x2000077c

000187c4 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   187c4:	b510      	push	{r4, lr}
   187c6:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   187c8:	7980      	ldrb	r0, [r0, #6]
   187ca:	f7ff fff3 	bl	187b4 <net_buf_pool_get>

	return buf - pool->__bufs;
   187ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
   187d0:	1a24      	subs	r4, r4, r0
   187d2:	10e4      	asrs	r4, r4, #3
}
   187d4:	4801      	ldr	r0, [pc, #4]	; (187dc <net_buf_id+0x18>)
   187d6:	fb00 f004 	mul.w	r0, r0, r4
   187da:	bd10      	pop	{r4, pc}
   187dc:	aaaaaaab 	.word	0xaaaaaaab

000187e0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   187e0:	4800      	ldr	r0, [pc, #0]	; (187e4 <get_hf_flags+0x4>)
   187e2:	4770      	bx	lr
   187e4:	20002060 	.word	0x20002060

000187e8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   187e8:	4b03      	ldr	r3, [pc, #12]	; (187f8 <get_subsys+0x10>)
   187ea:	1ac0      	subs	r0, r0, r3
   187ec:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   187ee:	4b03      	ldr	r3, [pc, #12]	; (187fc <get_subsys+0x14>)
   187f0:	fb03 f000 	mul.w	r0, r3, r0
   187f4:	4770      	bx	lr
   187f6:	bf00      	nop
   187f8:	20002020 	.word	0x20002020
   187fc:	b6db6db7 	.word	0xb6db6db7

00018800 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18800:	b538      	push	{r3, r4, r5, lr}
   18802:	4605      	mov	r5, r0
   18804:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18806:	f7ff ffef 	bl	187e8 <get_subsys>
   1880a:	4601      	mov	r1, r0
   1880c:	2240      	movs	r2, #64	; 0x40
   1880e:	4803      	ldr	r0, [pc, #12]	; (1881c <onoff_stop+0x1c>)
   18810:	f007 fd14 	bl	2023c <stop>
   18814:	4601      	mov	r1, r0
	notify(mgr, res);
   18816:	4628      	mov	r0, r5
   18818:	47a0      	blx	r4
}
   1881a:	bd38      	pop	{r3, r4, r5, pc}
   1881c:	00021d0c 	.word	0x00021d0c

00018820 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   18820:	b530      	push	{r4, r5, lr}
   18822:	b083      	sub	sp, #12
   18824:	4605      	mov	r5, r0
   18826:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18828:	f7ff ffde 	bl	187e8 <get_subsys>
   1882c:	4601      	mov	r1, r0
   1882e:	2340      	movs	r3, #64	; 0x40
   18830:	9300      	str	r3, [sp, #0]
   18832:	4623      	mov	r3, r4
   18834:	4a05      	ldr	r2, [pc, #20]	; (1884c <onoff_start+0x2c>)
   18836:	4806      	ldr	r0, [pc, #24]	; (18850 <onoff_start+0x30>)
   18838:	f007 fd1a 	bl	20270 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1883c:	1e01      	subs	r1, r0, #0
   1883e:	db01      	blt.n	18844 <onoff_start+0x24>
		notify(mgr, err);
	}
}
   18840:	b003      	add	sp, #12
   18842:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   18844:	4628      	mov	r0, r5
   18846:	47a0      	blx	r4
}
   18848:	e7fa      	b.n	18840 <onoff_start+0x20>
   1884a:	bf00      	nop
   1884c:	000202b9 	.word	0x000202b9
   18850:	00021d0c 	.word	0x00021d0c

00018854 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   18854:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   18856:	b110      	cbz	r0, 1885e <clock_event_handler+0xa>
   18858:	2801      	cmp	r0, #1
   1885a:	d00d      	beq.n	18878 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1885c:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1885e:	2100      	movs	r1, #0
   18860:	4808      	ldr	r0, [pc, #32]	; (18884 <clock_event_handler+0x30>)
   18862:	f007 fc72 	bl	2014a <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18866:	6883      	ldr	r3, [r0, #8]
   18868:	f013 0f07 	tst.w	r3, #7
   1886c:	d1f6      	bne.n	1885c <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1886e:	2100      	movs	r1, #0
   18870:	4804      	ldr	r0, [pc, #16]	; (18884 <clock_event_handler+0x30>)
   18872:	f007 fcd1 	bl	20218 <clkstarted_handle>
   18876:	e7f1      	b.n	1885c <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18878:	2101      	movs	r1, #1
   1887a:	4802      	ldr	r0, [pc, #8]	; (18884 <clock_event_handler+0x30>)
   1887c:	f007 fccc 	bl	20218 <clkstarted_handle>
}
   18880:	e7ec      	b.n	1885c <clock_event_handler+0x8>
   18882:	bf00      	nop
   18884:	00021d0c 	.word	0x00021d0c

00018888 <generic_hfclk_start>:
{
   18888:	b510      	push	{r4, lr}
	__asm__ volatile(
   1888a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1888e:	f3ef 8411 	mrs	r4, BASEPRI
   18892:	f383 8812 	msr	BASEPRI_MAX, r3
   18896:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1889a:	4a13      	ldr	r2, [pc, #76]	; (188e8 <generic_hfclk_start+0x60>)
   1889c:	6813      	ldr	r3, [r2, #0]
   1889e:	f043 0302 	orr.w	r3, r3, #2
   188a2:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   188a4:	f013 0f01 	tst.w	r3, #1
   188a8:	d108      	bne.n	188bc <generic_hfclk_start+0x34>
	bool already_started = false;
   188aa:	2300      	movs	r3, #0
	__asm__ volatile(
   188ac:	f384 8811 	msr	BASEPRI, r4
   188b0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   188b4:	b99b      	cbnz	r3, 188de <generic_hfclk_start+0x56>
	hfclk_start();
   188b6:	f007 fd07 	bl	202c8 <hfclk_start>
}
   188ba:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   188bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   188c0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   188c4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   188c8:	f012 0f01 	tst.w	r2, #1
   188cc:	d101      	bne.n	188d2 <generic_hfclk_start+0x4a>
	bool already_started = false;
   188ce:	2300      	movs	r3, #0
   188d0:	e7ec      	b.n	188ac <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   188d2:	f7ff ff85 	bl	187e0 <get_hf_flags>
   188d6:	f007 fc8c 	bl	201f2 <set_on_state>
			already_started = true;
   188da:	2301      	movs	r3, #1
   188dc:	e7e6      	b.n	188ac <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   188de:	2100      	movs	r1, #0
   188e0:	4802      	ldr	r0, [pc, #8]	; (188ec <generic_hfclk_start+0x64>)
   188e2:	f007 fc99 	bl	20218 <clkstarted_handle>
		return;
   188e6:	e7e8      	b.n	188ba <generic_hfclk_start+0x32>
   188e8:	20002070 	.word	0x20002070
   188ec:	00021d0c 	.word	0x00021d0c

000188f0 <generic_hfclk_stop>:
{
   188f0:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   188f2:	4b0a      	ldr	r3, [pc, #40]	; (1891c <generic_hfclk_stop+0x2c>)
   188f4:	f3bf 8f5b 	dmb	ish
   188f8:	e853 2f00 	ldrex	r2, [r3]
   188fc:	f022 0102 	bic.w	r1, r2, #2
   18900:	e843 1000 	strex	r0, r1, [r3]
   18904:	2800      	cmp	r0, #0
   18906:	d1f7      	bne.n	188f8 <generic_hfclk_stop+0x8>
   18908:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1890c:	f012 0f01 	tst.w	r2, #1
   18910:	d000      	beq.n	18914 <generic_hfclk_stop+0x24>
}
   18912:	bd08      	pop	{r3, pc}
	hfclk_stop();
   18914:	f007 fce2 	bl	202dc <hfclk_stop>
   18918:	e7fb      	b.n	18912 <generic_hfclk_stop+0x22>
   1891a:	bf00      	nop
   1891c:	20002070 	.word	0x20002070

00018920 <api_blocking_start>:
{
   18920:	b500      	push	{lr}
   18922:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18924:	f8cd d000 	str.w	sp, [sp]
   18928:	f8cd d004 	str.w	sp, [sp, #4]
   1892c:	2300      	movs	r3, #0
   1892e:	9302      	str	r3, [sp, #8]
   18930:	2301      	movs	r3, #1
   18932:	9303      	str	r3, [sp, #12]
   18934:	ab04      	add	r3, sp, #16
   18936:	9304      	str	r3, [sp, #16]
   18938:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1893a:	466b      	mov	r3, sp
   1893c:	4a06      	ldr	r2, [pc, #24]	; (18958 <api_blocking_start+0x38>)
   1893e:	f007 fcb3 	bl	202a8 <api_start>
	if (err < 0) {
   18942:	2800      	cmp	r0, #0
   18944:	db05      	blt.n	18952 <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   18946:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1894a:	2300      	movs	r3, #0
   1894c:	4668      	mov	r0, sp
   1894e:	f002 fbad 	bl	1b0ac <z_impl_k_sem_take>
}
   18952:	b007      	add	sp, #28
   18954:	f85d fb04 	ldr.w	pc, [sp], #4
   18958:	000202f1 	.word	0x000202f1

0001895c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1895c:	b570      	push	{r4, r5, r6, lr}
   1895e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18960:	2200      	movs	r2, #0
   18962:	2101      	movs	r1, #1
   18964:	4610      	mov	r0, r2
   18966:	f7f9 fa2f 	bl	11dc8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1896a:	2000      	movs	r0, #0
   1896c:	f7f9 f9fa 	bl	11d64 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   18970:	4811      	ldr	r0, [pc, #68]	; (189b8 <clk_init+0x5c>)
   18972:	f001 fcad 	bl	1a2d0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   18976:	4b11      	ldr	r3, [pc, #68]	; (189bc <clk_init+0x60>)
   18978:	4298      	cmp	r0, r3
   1897a:	d11a      	bne.n	189b2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1897c:	f008 fac6 	bl	20f0c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   18980:	2400      	movs	r4, #0
   18982:	e003      	b.n	1898c <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   18984:	2301      	movs	r3, #1
   18986:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   18988:	441c      	add	r4, r3
   1898a:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   1898c:	2c01      	cmp	r4, #1
   1898e:	d80e      	bhi.n	189ae <clk_init+0x52>
						get_sub_data(dev, i);
   18990:	4621      	mov	r1, r4
   18992:	4630      	mov	r0, r6
   18994:	f007 fbd9 	bl	2014a <get_sub_data>
   18998:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1899a:	4621      	mov	r1, r4
   1899c:	4630      	mov	r0, r6
   1899e:	f007 fbe1 	bl	20164 <get_onoff_manager>
   189a2:	4907      	ldr	r1, [pc, #28]	; (189c0 <clk_init+0x64>)
   189a4:	f003 fff9 	bl	1c99a <onoff_manager_init>
		if (err < 0) {
   189a8:	2800      	cmp	r0, #0
   189aa:	daeb      	bge.n	18984 <clk_init+0x28>
   189ac:	e000      	b.n	189b0 <clk_init+0x54>
	}

	return 0;
   189ae:	2000      	movs	r0, #0
}
   189b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   189b2:	f06f 0004 	mvn.w	r0, #4
   189b6:	e7fb      	b.n	189b0 <clk_init+0x54>
   189b8:	00018855 	.word	0x00018855
   189bc:	0bad0000 	.word	0x0bad0000
   189c0:	00023fcc 	.word	0x00023fcc

000189c4 <lfclk_spinwait>:
{
   189c4:	b570      	push	{r4, r5, r6, lr}
   189c6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   189c8:	2801      	cmp	r0, #1
   189ca:	d107      	bne.n	189dc <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   189cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   189d0:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   189d4:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   189d8:	2b01      	cmp	r3, #1
   189da:	d058      	beq.n	18a8e <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   189dc:	f008 fb93 	bl	21106 <k_is_in_isr>
   189e0:	b928      	cbnz	r0, 189ee <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   189e2:	4b2e      	ldr	r3, [pc, #184]	; (18a9c <lfclk_spinwait+0xd8>)
   189e4:	781b      	ldrb	r3, [r3, #0]
   189e6:	2b00      	cmp	r3, #0
   189e8:	d041      	beq.n	18a6e <lfclk_spinwait+0xaa>
   189ea:	2300      	movs	r3, #0
   189ec:	e000      	b.n	189f0 <lfclk_spinwait+0x2c>
   189ee:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   189f0:	461c      	mov	r4, r3
   189f2:	2b00      	cmp	r3, #0
   189f4:	d03d      	beq.n	18a72 <lfclk_spinwait+0xae>
	__asm__ volatile(
   189f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   189fa:	f3ef 8611 	mrs	r6, BASEPRI
   189fe:	f383 8812 	msr	BASEPRI_MAX, r3
   18a02:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   18a06:	b924      	cbnz	r4, 18a12 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   18a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18a0c:	2202      	movs	r2, #2
   18a0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18a16:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18a1a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18a1e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   18a22:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   18a26:	d12b      	bne.n	18a80 <lfclk_spinwait+0xbc>
    return false;
   18a28:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   18a2a:	b11a      	cbz	r2, 18a34 <lfclk_spinwait+0x70>
   18a2c:	2b01      	cmp	r3, #1
   18a2e:	d029      	beq.n	18a84 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   18a30:	2d01      	cmp	r5, #1
   18a32:	d027      	beq.n	18a84 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   18a34:	b1fc      	cbz	r4, 18a76 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   18a36:	4630      	mov	r0, r6
   18a38:	f7f9 f93c 	bl	11cb4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   18a3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18a40:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   18a44:	2b00      	cmp	r3, #0
   18a46:	d1e4      	bne.n	18a12 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18a48:	4b15      	ldr	r3, [pc, #84]	; (18aa0 <lfclk_spinwait+0xdc>)
   18a4a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   18a4c:	2b00      	cmp	r3, #0
   18a4e:	d0e0      	beq.n	18a12 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18a50:	4b13      	ldr	r3, [pc, #76]	; (18aa0 <lfclk_spinwait+0xdc>)
   18a52:	2200      	movs	r2, #0
   18a54:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   18a56:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   18a58:	2301      	movs	r3, #1
   18a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   18a5e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a62:	4a10      	ldr	r2, [pc, #64]	; (18aa4 <lfclk_spinwait+0xe0>)
   18a64:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18a68:	4a0f      	ldr	r2, [pc, #60]	; (18aa8 <lfclk_spinwait+0xe4>)
   18a6a:	6013      	str	r3, [r2, #0]
}
   18a6c:	e7d1      	b.n	18a12 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18a6e:	2301      	movs	r3, #1
   18a70:	e7be      	b.n	189f0 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   18a72:	2600      	movs	r6, #0
   18a74:	e7c7      	b.n	18a06 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   18a76:	2021      	movs	r0, #33	; 0x21
   18a78:	2100      	movs	r1, #0
   18a7a:	f003 f8a1 	bl	1bbc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   18a7e:	e7dd      	b.n	18a3c <lfclk_spinwait+0x78>
                return true;
   18a80:	2201      	movs	r2, #1
   18a82:	e7d2      	b.n	18a2a <lfclk_spinwait+0x66>
	if (isr_mode) {
   18a84:	b124      	cbz	r4, 18a90 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   18a86:	f386 8811 	msr	BASEPRI, r6
   18a8a:	f3bf 8f6f 	isb	sy
}
   18a8e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   18a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18a94:	2202      	movs	r2, #2
   18a96:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18a9a:	e7f8      	b.n	18a8e <lfclk_spinwait+0xca>
   18a9c:	200031a6 	.word	0x200031a6
   18aa0:	40000104 	.word	0x40000104
   18aa4:	e000e100 	.word	0xe000e100
   18aa8:	40000008 	.word	0x40000008

00018aac <z_nrf_clock_control_lf_on>:
{
   18aac:	b510      	push	{r4, lr}
   18aae:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18ab0:	4b10      	ldr	r3, [pc, #64]	; (18af4 <z_nrf_clock_control_lf_on+0x48>)
   18ab2:	2101      	movs	r1, #1
   18ab4:	f3bf 8f5b 	dmb	ish
   18ab8:	e853 2f00 	ldrex	r2, [r3]
   18abc:	e843 1000 	strex	r0, r1, [r3]
   18ac0:	2800      	cmp	r0, #0
   18ac2:	d1f9      	bne.n	18ab8 <z_nrf_clock_control_lf_on+0xc>
   18ac4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   18ac8:	b11a      	cbz	r2, 18ad2 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   18aca:	1e63      	subs	r3, r4, #1
   18acc:	2b01      	cmp	r3, #1
   18ace:	d90c      	bls.n	18aea <z_nrf_clock_control_lf_on+0x3e>
}
   18ad0:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   18ad2:	4809      	ldr	r0, [pc, #36]	; (18af8 <z_nrf_clock_control_lf_on+0x4c>)
   18ad4:	f007 fb46 	bl	20164 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   18ad8:	4908      	ldr	r1, [pc, #32]	; (18afc <z_nrf_clock_control_lf_on+0x50>)
   18ada:	2300      	movs	r3, #0
   18adc:	604b      	str	r3, [r1, #4]
   18ade:	60cb      	str	r3, [r1, #12]
   18ae0:	2301      	movs	r3, #1
   18ae2:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   18ae4:	f003 ff75 	bl	1c9d2 <onoff_request>
   18ae8:	e7ef      	b.n	18aca <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   18aea:	4620      	mov	r0, r4
   18aec:	f7ff ff6a 	bl	189c4 <lfclk_spinwait>
		break;
   18af0:	e7ee      	b.n	18ad0 <z_nrf_clock_control_lf_on+0x24>
   18af2:	bf00      	nop
   18af4:	20002074 	.word	0x20002074
   18af8:	00021d0c 	.word	0x00021d0c
   18afc:	20002010 	.word	0x20002010

00018b00 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   18b00:	b510      	push	{r4, lr}
   18b02:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   18b04:	280a      	cmp	r0, #10
   18b06:	d007      	beq.n	18b18 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   18b08:	4b07      	ldr	r3, [pc, #28]	; (18b28 <console_out+0x28>)
   18b0a:	6818      	ldr	r0, [r3, #0]
   18b0c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   18b0e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   18b10:	685b      	ldr	r3, [r3, #4]
   18b12:	4798      	blx	r3

	return c;
}
   18b14:	4620      	mov	r0, r4
   18b16:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   18b18:	4b03      	ldr	r3, [pc, #12]	; (18b28 <console_out+0x28>)
   18b1a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   18b1c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   18b1e:	685b      	ldr	r3, [r3, #4]
   18b20:	210d      	movs	r1, #13
   18b22:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   18b24:	e7f0      	b.n	18b08 <console_out+0x8>
   18b26:	bf00      	nop
   18b28:	20002078 	.word	0x20002078

00018b2c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   18b2c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   18b2e:	4c04      	ldr	r4, [pc, #16]	; (18b40 <uart_console_hook_install+0x14>)
   18b30:	4620      	mov	r0, r4
   18b32:	f7f9 ffbf 	bl	12ab4 <__stdout_hook_install>
	__printk_hook_install(console_out);
   18b36:	4620      	mov	r0, r4
   18b38:	f7f6 fefe 	bl	f938 <__printk_hook_install>
}
   18b3c:	bd10      	pop	{r4, pc}
   18b3e:	bf00      	nop
   18b40:	00018b01 	.word	0x00018b01

00018b44 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   18b44:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   18b46:	4806      	ldr	r0, [pc, #24]	; (18b60 <uart_console_init+0x1c>)
   18b48:	4b06      	ldr	r3, [pc, #24]	; (18b64 <uart_console_init+0x20>)
   18b4a:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   18b4c:	f008 f9fb 	bl	20f46 <z_device_ready>
   18b50:	b118      	cbz	r0, 18b5a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   18b52:	f7ff ffeb 	bl	18b2c <uart_console_hook_install>

	return 0;
   18b56:	2000      	movs	r0, #0
}
   18b58:	bd08      	pop	{r3, pc}
		return -ENODEV;
   18b5a:	f06f 0012 	mvn.w	r0, #18
   18b5e:	e7fb      	b.n	18b58 <uart_console_init+0x14>
   18b60:	00021d3c 	.word	0x00021d3c
   18b64:	20002078 	.word	0x20002078

00018b68 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
   18b68:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
   18b6a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18b6c:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18b6e:	4b37      	ldr	r3, [pc, #220]	; (18c4c <gpio_nrfx_config+0xe4>)
   18b70:	4013      	ands	r3, r2
   18b72:	4c37      	ldr	r4, [pc, #220]	; (18c50 <gpio_nrfx_config+0xe8>)
   18b74:	42a3      	cmp	r3, r4
   18b76:	d027      	beq.n	18bc8 <gpio_nrfx_config+0x60>
   18b78:	d812      	bhi.n	18ba0 <gpio_nrfx_config+0x38>
   18b7a:	2b06      	cmp	r3, #6
   18b7c:	d026      	beq.n	18bcc <gpio_nrfx_config+0x64>
   18b7e:	d904      	bls.n	18b8a <gpio_nrfx_config+0x22>
   18b80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18b84:	d109      	bne.n	18b9a <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
   18b86:	2401      	movs	r4, #1
   18b88:	e016      	b.n	18bb8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18b8a:	b30b      	cbz	r3, 18bd0 <gpio_nrfx_config+0x68>
   18b8c:	2b02      	cmp	r3, #2
   18b8e:	d101      	bne.n	18b94 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
   18b90:	2404      	movs	r4, #4
   18b92:	e011      	b.n	18bb8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18b94:	f06f 0015 	mvn.w	r0, #21
   18b98:	e046      	b.n	18c28 <gpio_nrfx_config+0xc0>
   18b9a:	f06f 0015 	mvn.w	r0, #21
   18b9e:	e043      	b.n	18c28 <gpio_nrfx_config+0xc0>
   18ba0:	4c2c      	ldr	r4, [pc, #176]	; (18c54 <gpio_nrfx_config+0xec>)
   18ba2:	42a3      	cmp	r3, r4
   18ba4:	d016      	beq.n	18bd4 <gpio_nrfx_config+0x6c>
   18ba6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   18baa:	d101      	bne.n	18bb0 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
   18bac:	2403      	movs	r4, #3
   18bae:	e003      	b.n	18bb8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   18bb4:	d146      	bne.n	18c44 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
   18bb6:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
   18bb8:	f012 0f10 	tst.w	r2, #16
   18bbc:	d10c      	bne.n	18bd8 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   18bbe:	f012 0f20 	tst.w	r2, #32
   18bc2:	d033      	beq.n	18c2c <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
   18bc4:	2501      	movs	r5, #1
   18bc6:	e008      	b.n	18bda <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
   18bc8:	2407      	movs	r4, #7
   18bca:	e7f5      	b.n	18bb8 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
   18bcc:	2406      	movs	r4, #6
   18bce:	e7f3      	b.n	18bb8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18bd0:	2400      	movs	r4, #0
   18bd2:	e7f1      	b.n	18bb8 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
   18bd4:	2405      	movs	r4, #5
   18bd6:	e7ef      	b.n	18bb8 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
   18bd8:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
   18bda:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18bde:	f412 7f80 	tst.w	r2, #256	; 0x100
   18be2:	bf0c      	ite	eq
   18be4:	2601      	moveq	r6, #1
   18be6:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
   18be8:	f412 7f00 	tst.w	r2, #512	; 0x200
   18bec:	d006      	beq.n	18bfc <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   18bee:	f412 6f00 	tst.w	r2, #2048	; 0x800
   18bf2:	d01d      	beq.n	18c30 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
   18bf4:	2201      	movs	r2, #1
   18bf6:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   18bf8:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
   18bfc:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   18bfe:	7a12      	ldrb	r2, [r2, #8]
   18c00:	f001 011f 	and.w	r1, r1, #31
   18c04:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   18c08:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18c0a:	2a01      	cmp	r2, #1
   18c0c:	d018      	beq.n	18c40 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
   18c0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   18c12:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   18c16:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   18c1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   18c1e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   18c22:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
   18c26:	2000      	movs	r0, #0
}
   18c28:	bcf0      	pop	{r4, r5, r6, r7}
   18c2a:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
   18c2c:	2500      	movs	r5, #0
   18c2e:	e7d4      	b.n	18bda <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   18c30:	f412 6f80 	tst.w	r2, #1024	; 0x400
   18c34:	d0e2      	beq.n	18bfc <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   18c36:	2201      	movs	r2, #1
   18c38:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   18c3a:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
   18c3e:	e7dd      	b.n	18bfc <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
   18c40:	4a05      	ldr	r2, [pc, #20]	; (18c58 <gpio_nrfx_config+0xf0>)
   18c42:	e7e6      	b.n	18c12 <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18c44:	f06f 0015 	mvn.w	r0, #21
   18c48:	e7ee      	b.n	18c28 <gpio_nrfx_config+0xc0>
   18c4a:	bf00      	nop
   18c4c:	00f00006 	.word	0x00f00006
   18c50:	00100006 	.word	0x00100006
   18c54:	00400002 	.word	0x00400002
   18c58:	50000300 	.word	0x50000300

00018c5c <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
   18c5c:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
   18c5e:	6905      	ldr	r5, [r0, #16]
	return port->config;
   18c60:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
   18c62:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   18c64:	696a      	ldr	r2, [r5, #20]
   18c66:	69ab      	ldr	r3, [r5, #24]
   18c68:	4313      	orrs	r3, r2
   18c6a:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
   18c6e:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   18c70:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
   18c72:	e011      	b.n	18c98 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
   18c74:	f04f 0c02 	mov.w	ip, #2
   18c78:	e01d      	b.n	18cb6 <cfg_level_pins+0x5a>
   18c7a:	4f14      	ldr	r7, [pc, #80]	; (18ccc <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   18c7c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   18c80:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   18c84:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   18c88:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
   18c8c:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
   18c90:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
   18c94:	3001      	adds	r0, #1
		bit <<= 1;
   18c96:	005b      	lsls	r3, r3, #1
	while (level_pins) {
   18c98:	b1a9      	cbz	r1, 18cc6 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
   18c9a:	420b      	tst	r3, r1
   18c9c:	d0fa      	beq.n	18c94 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18c9e:	7a34      	ldrb	r4, [r6, #8]
   18ca0:	f000 021f 	and.w	r2, r0, #31
   18ca4:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   18ca8:	692c      	ldr	r4, [r5, #16]
   18caa:	40c4      	lsrs	r4, r0
   18cac:	f014 0f01 	tst.w	r4, #1
   18cb0:	d1e0      	bne.n	18c74 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
   18cb2:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
   18cb6:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
   18cba:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18cbc:	2a01      	cmp	r2, #1
   18cbe:	d0dc      	beq.n	18c7a <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
   18cc0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   18cc4:	e7da      	b.n	18c7c <cfg_level_pins+0x20>
	}
}
   18cc6:	bcf0      	pop	{r4, r5, r6, r7}
   18cc8:	4770      	bx	lr
   18cca:	bf00      	nop
   18ccc:	50000300 	.word	0x50000300

00018cd0 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
   18cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   18cd2:	468c      	mov	ip, r1
	return port->data;
   18cd4:	6903      	ldr	r3, [r0, #16]
	return port->config;
   18cd6:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
   18cd8:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   18cda:	695a      	ldr	r2, [r3, #20]
   18cdc:	6998      	ldr	r0, [r3, #24]
   18cde:	4302      	orrs	r2, r0
   18ce0:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   18ce4:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
   18ce6:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   18cea:	6918      	ldr	r0, [r3, #16]
   18cec:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
   18cee:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
   18cf2:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
   18cf4:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   18cf6:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
   18cf8:	e015      	b.n	18d26 <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
   18cfa:	f8df e074 	ldr.w	lr, [pc, #116]	; 18d70 <check_level_trigger_pins+0xa0>
   18cfe:	e025      	b.n	18d4c <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
   18d00:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
   18d04:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18d06:	2a01      	cmp	r2, #1
   18d08:	d02e      	beq.n	18d68 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
   18d0a:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   18d0e:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   18d12:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
   18d16:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   18d1a:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
   18d1e:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
   18d22:	3501      	adds	r5, #1
		bit <<= 1;
   18d24:	005b      	lsls	r3, r3, #1
	while (check_pins) {
   18d26:	b314      	cbz	r4, 18d6e <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
   18d28:	4223      	tst	r3, r4
   18d2a:	d0fa      	beq.n	18d22 <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18d2c:	7a0e      	ldrb	r6, [r1, #8]
   18d2e:	f005 021f 	and.w	r2, r5, #31
   18d32:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
   18d36:	423b      	tst	r3, r7
   18d38:	d1e2      	bne.n	18d00 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
   18d3a:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
   18d3e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18d42:	f1be 0f01 	cmp.w	lr, #1
   18d46:	d0d8      	beq.n	18cfa <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
   18d48:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   18d4c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   18d50:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   18d54:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
   18d58:	2e02      	cmp	r6, #2
   18d5a:	d1d1      	bne.n	18d00 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
   18d5c:	f8dc 6000 	ldr.w	r6, [ip]
   18d60:	431e      	orrs	r6, r3
   18d62:	f8cc 6000 	str.w	r6, [ip]
   18d66:	e7cb      	b.n	18d00 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
   18d68:	f8df e004 	ldr.w	lr, [pc, #4]	; 18d70 <check_level_trigger_pins+0xa0>
   18d6c:	e7cf      	b.n	18d0e <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
   18d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d70:	50000300 	.word	0x50000300

00018d74 <gpiote_pin_cleanup>:
{
   18d74:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   18d76:	4b14      	ldr	r3, [pc, #80]	; (18dc8 <gpiote_pin_cleanup+0x54>)
   18d78:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   18d7c:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18d7e:	2300      	movs	r3, #0
   18d80:	e000      	b.n	18d84 <gpiote_pin_cleanup+0x10>
   18d82:	3301      	adds	r3, #1
   18d84:	2b07      	cmp	r3, #7
   18d86:	d81d      	bhi.n	18dc4 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18d88:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   18d8c:	490e      	ldr	r1, [pc, #56]	; (18dc8 <gpiote_pin_cleanup+0x54>)
   18d8e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   18d92:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   18d96:	4290      	cmp	r0, r2
   18d98:	d1f3      	bne.n	18d82 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
   18d9a:	fa24 f203 	lsr.w	r2, r4, r3
   18d9e:	f012 0f01 	tst.w	r2, #1
   18da2:	d0ee      	beq.n	18d82 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   18da4:	460a      	mov	r2, r1
   18da6:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   18daa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   18dae:	f021 0101 	bic.w	r1, r1, #1
   18db2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   18db6:	2101      	movs	r1, #1
   18db8:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
   18dba:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   18dbe:	b2d8      	uxtb	r0, r3
   18dc0:	f001 fba0 	bl	1a504 <nrfx_gpiote_channel_free>
}
   18dc4:	bd10      	pop	{r4, pc}
   18dc6:	bf00      	nop
   18dc8:	40006000 	.word	0x40006000

00018dcc <gpiote_channel_alloc>:
{
   18dcc:	b570      	push	{r4, r5, r6, lr}
   18dce:	b082      	sub	sp, #8
   18dd0:	4604      	mov	r4, r0
   18dd2:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   18dd4:	f10d 0007 	add.w	r0, sp, #7
   18dd8:	f001 fbb0 	bl	1a53c <nrfx_gpiote_channel_alloc>
   18ddc:	4b1c      	ldr	r3, [pc, #112]	; (18e50 <gpiote_channel_alloc+0x84>)
   18dde:	4298      	cmp	r0, r3
   18de0:	d132      	bne.n	18e48 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   18de2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   18de6:	f103 0240 	add.w	r2, r3, #64	; 0x40
   18dea:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18dec:	4e19      	ldr	r6, [pc, #100]	; (18e54 <gpiote_channel_alloc+0x88>)
   18dee:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   18df2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   18df6:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   18dfa:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   18dfe:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18e02:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   18e06:	0224      	lsls	r4, r4, #8
   18e08:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   18e0c:	042d      	lsls	r5, r5, #16
   18e0e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18e12:	432c      	orrs	r4, r5
   18e14:	430c      	orrs	r4, r1
   18e16:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
   18e1a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   18e1e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18e22:	2000      	movs	r0, #0
   18e24:	6018      	str	r0, [r3, #0]
   18e26:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   18e28:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   18e2c:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   18e30:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   18e34:	f042 0201 	orr.w	r2, r2, #1
   18e38:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   18e3c:	2301      	movs	r3, #1
   18e3e:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   18e40:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
   18e44:	b002      	add	sp, #8
   18e46:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   18e48:	f06f 0012 	mvn.w	r0, #18
   18e4c:	e7fa      	b.n	18e44 <gpiote_channel_alloc+0x78>
   18e4e:	bf00      	nop
   18e50:	0bad0000 	.word	0x0bad0000
   18e54:	40006000 	.word	0x40006000

00018e58 <gpiote_pin_int_cfg>:
{
   18e58:	b570      	push	{r4, r5, r6, lr}
   18e5a:	460d      	mov	r5, r1
	return port->data;
   18e5c:	6906      	ldr	r6, [r0, #16]
	return port->config;
   18e5e:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   18e60:	7a1b      	ldrb	r3, [r3, #8]
   18e62:	f001 041f 	and.w	r4, r1, #31
   18e66:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
   18e6a:	4620      	mov	r0, r4
   18e6c:	f7ff ff82 	bl	18d74 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
   18e70:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
   18e74:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18e76:	2b01      	cmp	r3, #1
   18e78:	d020      	beq.n	18ebc <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
   18e7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   18e7e:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
   18e82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   18e86:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   18e8a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
   18e8e:	68f3      	ldr	r3, [r6, #12]
   18e90:	40eb      	lsrs	r3, r5
   18e92:	f013 0f01 	tst.w	r3, #1
   18e96:	d02f      	beq.n	18ef8 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
   18e98:	6973      	ldr	r3, [r6, #20]
   18e9a:	40eb      	lsrs	r3, r5
   18e9c:	f013 0f01 	tst.w	r3, #1
   18ea0:	d015      	beq.n	18ece <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
   18ea2:	69b3      	ldr	r3, [r6, #24]
   18ea4:	40eb      	lsrs	r3, r5
   18ea6:	f013 0f01 	tst.w	r3, #1
   18eaa:	d109      	bne.n	18ec0 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   18eac:	6931      	ldr	r1, [r6, #16]
   18eae:	fa21 f505 	lsr.w	r5, r1, r5
   18eb2:	f015 0f01 	tst.w	r5, #1
   18eb6:	d008      	beq.n	18eca <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   18eb8:	2101      	movs	r1, #1
   18eba:	e002      	b.n	18ec2 <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
   18ebc:	4a0f      	ldr	r2, [pc, #60]	; (18efc <gpiote_pin_int_cfg+0xa4>)
   18ebe:	e7de      	b.n	18e7e <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   18ec0:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
   18ec2:	4620      	mov	r0, r4
   18ec4:	f7ff ff82 	bl	18dcc <gpiote_channel_alloc>
   18ec8:	e017      	b.n	18efa <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   18eca:	2102      	movs	r1, #2
   18ecc:	e7f9      	b.n	18ec2 <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   18ece:	6931      	ldr	r1, [r6, #16]
   18ed0:	fa21 f505 	lsr.w	r5, r1, r5
   18ed4:	f015 0f01 	tst.w	r5, #1
   18ed8:	d10c      	bne.n	18ef4 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
   18eda:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   18edc:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   18ee0:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   18ee4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   18ee8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   18eec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
   18ef0:	2000      	movs	r0, #0
}
   18ef2:	e002      	b.n	18efa <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
   18ef4:	2102      	movs	r1, #2
   18ef6:	e7f1      	b.n	18edc <gpiote_pin_int_cfg+0x84>
	int res = 0;
   18ef8:	2000      	movs	r0, #0
}
   18efa:	bd70      	pop	{r4, r5, r6, pc}
   18efc:	50000300 	.word	0x50000300

00018f00 <gpio_nrfx_pin_interrupt_configure>:
{
   18f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
   18f02:	6904      	ldr	r4, [r0, #16]
	return port->config;
   18f04:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18f06:	7a2e      	ldrb	r6, [r5, #8]
   18f08:	f001 051f 	and.w	r5, r1, #31
   18f0c:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   18f10:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   18f14:	d025      	beq.n	18f62 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   18f16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   18f1a:	d035      	beq.n	18f88 <gpio_nrfx_pin_interrupt_configure+0x88>
   18f1c:	68e5      	ldr	r5, [r4, #12]
   18f1e:	2601      	movs	r6, #1
   18f20:	408e      	lsls	r6, r1
   18f22:	4335      	orrs	r5, r6
   18f24:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   18f26:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   18f2a:	d033      	beq.n	18f94 <gpio_nrfx_pin_interrupt_configure+0x94>
   18f2c:	6962      	ldr	r2, [r4, #20]
   18f2e:	2501      	movs	r5, #1
   18f30:	408d      	lsls	r5, r1
   18f32:	ea22 0205 	bic.w	r2, r2, r5
   18f36:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   18f38:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   18f3c:	d02f      	beq.n	18f9e <gpio_nrfx_pin_interrupt_configure+0x9e>
   18f3e:	69a2      	ldr	r2, [r4, #24]
   18f40:	2501      	movs	r5, #1
   18f42:	408d      	lsls	r5, r1
   18f44:	ea22 0205 	bic.w	r2, r2, r5
   18f48:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   18f4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   18f4e:	d02b      	beq.n	18fa8 <gpio_nrfx_pin_interrupt_configure+0xa8>
   18f50:	6923      	ldr	r3, [r4, #16]
   18f52:	2201      	movs	r2, #1
   18f54:	408a      	lsls	r2, r1
   18f56:	ea23 0302 	bic.w	r3, r3, r2
   18f5a:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
   18f5c:	f7ff ff7c 	bl	18e58 <gpiote_pin_int_cfg>
}
   18f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   18f62:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
   18f66:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   18f68:	2d01      	cmp	r5, #1
   18f6a:	d00b      	beq.n	18f84 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
   18f6c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18f70:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
   18f74:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   18f78:	f015 0f01 	tst.w	r5, #1
   18f7c:	d0cb      	beq.n	18f16 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
   18f7e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18f82:	e7ed      	b.n	18f60 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
   18f84:	4f0b      	ldr	r7, [pc, #44]	; (18fb4 <gpio_nrfx_pin_interrupt_configure+0xb4>)
   18f86:	e7f3      	b.n	18f70 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   18f88:	68e5      	ldr	r5, [r4, #12]
   18f8a:	2601      	movs	r6, #1
   18f8c:	408e      	lsls	r6, r1
   18f8e:	ea25 0506 	bic.w	r5, r5, r6
   18f92:	e7c7      	b.n	18f24 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   18f94:	6962      	ldr	r2, [r4, #20]
   18f96:	2501      	movs	r5, #1
   18f98:	408d      	lsls	r5, r1
   18f9a:	432a      	orrs	r2, r5
   18f9c:	e7cb      	b.n	18f36 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   18f9e:	69a2      	ldr	r2, [r4, #24]
   18fa0:	2501      	movs	r5, #1
   18fa2:	408d      	lsls	r5, r1
   18fa4:	432a      	orrs	r2, r5
   18fa6:	e7cf      	b.n	18f48 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   18fa8:	6923      	ldr	r3, [r4, #16]
   18faa:	2201      	movs	r2, #1
   18fac:	408a      	lsls	r2, r1
   18fae:	4313      	orrs	r3, r2
   18fb0:	e7d3      	b.n	18f5a <gpio_nrfx_pin_interrupt_configure+0x5a>
   18fb2:	bf00      	nop
   18fb4:	50000300 	.word	0x50000300

00018fb8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18fb8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   18fba:	4b0b      	ldr	r3, [pc, #44]	; (18fe8 <gpio_nrfx_init+0x30>)
   18fbc:	781b      	ldrb	r3, [r3, #0]
   18fbe:	b10b      	cbz	r3, 18fc4 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   18fc0:	2000      	movs	r0, #0
   18fc2:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
   18fc4:	4b08      	ldr	r3, [pc, #32]	; (18fe8 <gpio_nrfx_init+0x30>)
   18fc6:	2201      	movs	r2, #1
   18fc8:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18fca:	2200      	movs	r2, #0
   18fcc:	2105      	movs	r1, #5
   18fce:	2006      	movs	r0, #6
   18fd0:	f7f8 fefa 	bl	11dc8 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
   18fd4:	2006      	movs	r0, #6
   18fd6:	f7f8 fec5 	bl	11d64 <arch_irq_enable>
   18fda:	4b04      	ldr	r3, [pc, #16]	; (18fec <gpio_nrfx_init+0x34>)
   18fdc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18fe0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   18fe4:	e7ec      	b.n	18fc0 <gpio_nrfx_init+0x8>
   18fe6:	bf00      	nop
   18fe8:	200031a5 	.word	0x200031a5
   18fec:	40006000 	.word	0x40006000

00018ff0 <gpiote_event_handler>:
{
   18ff0:	b570      	push	{r4, r5, r6, lr}
   18ff2:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   18ff4:	2300      	movs	r3, #0
   18ff6:	9302      	str	r3, [sp, #8]
   18ff8:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   18ffa:	9300      	str	r3, [sp, #0]
   18ffc:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18ffe:	4b46      	ldr	r3, [pc, #280]	; (19118 <gpiote_event_handler+0x128>)
   19000:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
   19002:	b90c      	cbnz	r4, 19008 <gpiote_event_handler+0x18>
{
   19004:	2100      	movs	r1, #0
   19006:	e011      	b.n	1902c <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   19008:	4d44      	ldr	r5, [pc, #272]	; (1911c <gpiote_event_handler+0x12c>)
   1900a:	4669      	mov	r1, sp
   1900c:	4628      	mov	r0, r5
   1900e:	f7ff fe5f 	bl	18cd0 <check_level_trigger_pins>
		fired_triggers[0] =
   19012:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   19014:	a901      	add	r1, sp, #4
   19016:	f105 0018 	add.w	r0, r5, #24
   1901a:	f7ff fe59 	bl	18cd0 <check_level_trigger_pins>
		fired_triggers[1] =
   1901e:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19020:	4b3d      	ldr	r3, [pc, #244]	; (19118 <gpiote_event_handler+0x128>)
   19022:	2200      	movs	r2, #0
   19024:	601a      	str	r2, [r3, #0]
   19026:	681b      	ldr	r3, [r3, #0]
}
   19028:	e7ec      	b.n	19004 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1902a:	3101      	adds	r1, #1
   1902c:	2907      	cmp	r1, #7
   1902e:	d82d      	bhi.n	1908c <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
   19030:	f101 0340 	add.w	r3, r1, #64	; 0x40
   19034:	009b      	lsls	r3, r3, #2
   19036:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   19038:	2301      	movs	r3, #1
   1903a:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
   1903c:	4838      	ldr	r0, [pc, #224]	; (19120 <gpiote_event_handler+0x130>)
   1903e:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
   19042:	4203      	tst	r3, r0
   19044:	d0f1      	beq.n	1902a <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19046:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1904a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1904e:	681b      	ldr	r3, [r3, #0]
   19050:	2b00      	cmp	r3, #0
   19052:	d0ea      	beq.n	1902a <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19054:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   19058:	4831      	ldr	r0, [pc, #196]	; (19120 <gpiote_event_handler+0x130>)
   1905a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1905e:	f3c0 3340 	ubfx	r3, r0, #13, #1
   19062:	f3c0 2004 	ubfx	r0, r0, #8, #5
   19066:	2501      	movs	r5, #1
   19068:	fa05 f000 	lsl.w	r0, r5, r0
   1906c:	ad04      	add	r5, sp, #16
   1906e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   19072:	f853 5c08 	ldr.w	r5, [r3, #-8]
   19076:	4305      	orrs	r5, r0
   19078:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
   1907c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   19080:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19084:	2200      	movs	r2, #0
   19086:	601a      	str	r2, [r3, #0]
   19088:	681b      	ldr	r3, [r3, #0]
}
   1908a:	e7ce      	b.n	1902a <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
   1908c:	9e02      	ldr	r6, [sp, #8]
   1908e:	b92e      	cbnz	r6, 1909c <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
   19090:	9e03      	ldr	r6, [sp, #12]
   19092:	b9ee      	cbnz	r6, 190d0 <gpiote_event_handler+0xe0>
	if (port_event) {
   19094:	2c00      	cmp	r4, #0
   19096:	d135      	bne.n	19104 <gpiote_event_handler+0x114>
}
   19098:	b004      	add	sp, #16
   1909a:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   1909c:	4b21      	ldr	r3, [pc, #132]	; (19124 <gpiote_event_handler+0x134>)
   1909e:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   190a0:	b119      	cbz	r1, 190aa <gpiote_event_handler+0xba>
   190a2:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   190a4:	b149      	cbz	r1, 190ba <gpiote_event_handler+0xca>
	return node->next;
   190a6:	680d      	ldr	r5, [r1, #0]
   190a8:	e007      	b.n	190ba <gpiote_event_handler+0xca>
   190aa:	460d      	mov	r5, r1
   190ac:	e005      	b.n	190ba <gpiote_event_handler+0xca>
   190ae:	b16d      	cbz	r5, 190cc <gpiote_event_handler+0xdc>
   190b0:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   190b2:	b105      	cbz	r5, 190b6 <gpiote_event_handler+0xc6>
	return node->next;
   190b4:	682b      	ldr	r3, [r5, #0]
   190b6:	4629      	mov	r1, r5
   190b8:	461d      	mov	r5, r3
   190ba:	2900      	cmp	r1, #0
   190bc:	d0e8      	beq.n	19090 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
   190be:	688a      	ldr	r2, [r1, #8]
   190c0:	4032      	ands	r2, r6
   190c2:	d0f4      	beq.n	190ae <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   190c4:	684b      	ldr	r3, [r1, #4]
   190c6:	4815      	ldr	r0, [pc, #84]	; (1911c <gpiote_event_handler+0x12c>)
   190c8:	4798      	blx	r3
   190ca:	e7f0      	b.n	190ae <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   190cc:	462b      	mov	r3, r5
   190ce:	e7f2      	b.n	190b6 <gpiote_event_handler+0xc6>
	return list->head;
   190d0:	4b15      	ldr	r3, [pc, #84]	; (19128 <gpiote_event_handler+0x138>)
   190d2:	6859      	ldr	r1, [r3, #4]
   190d4:	b119      	cbz	r1, 190de <gpiote_event_handler+0xee>
   190d6:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   190d8:	b149      	cbz	r1, 190ee <gpiote_event_handler+0xfe>
	return node->next;
   190da:	680d      	ldr	r5, [r1, #0]
   190dc:	e007      	b.n	190ee <gpiote_event_handler+0xfe>
   190de:	460d      	mov	r5, r1
   190e0:	e005      	b.n	190ee <gpiote_event_handler+0xfe>
   190e2:	b16d      	cbz	r5, 19100 <gpiote_event_handler+0x110>
   190e4:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   190e6:	b105      	cbz	r5, 190ea <gpiote_event_handler+0xfa>
	return node->next;
   190e8:	682b      	ldr	r3, [r5, #0]
   190ea:	4629      	mov	r1, r5
   190ec:	461d      	mov	r5, r3
   190ee:	2900      	cmp	r1, #0
   190f0:	d0d0      	beq.n	19094 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
   190f2:	688a      	ldr	r2, [r1, #8]
   190f4:	4032      	ands	r2, r6
   190f6:	d0f4      	beq.n	190e2 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   190f8:	684b      	ldr	r3, [r1, #4]
   190fa:	480c      	ldr	r0, [pc, #48]	; (1912c <gpiote_event_handler+0x13c>)
   190fc:	4798      	blx	r3
   190fe:	e7f0      	b.n	190e2 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   19100:	462b      	mov	r3, r5
   19102:	e7f2      	b.n	190ea <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   19104:	4c05      	ldr	r4, [pc, #20]	; (1911c <gpiote_event_handler+0x12c>)
   19106:	4620      	mov	r0, r4
   19108:	f7ff fda8 	bl	18c5c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1910c:	f104 0018 	add.w	r0, r4, #24
   19110:	f7ff fda4 	bl	18c5c <cfg_level_pins>
}
   19114:	e7c0      	b.n	19098 <gpiote_event_handler+0xa8>
   19116:	bf00      	nop
   19118:	4000617c 	.word	0x4000617c
   1911c:	00021d84 	.word	0x00021d84
   19120:	40006000 	.word	0x40006000
   19124:	2000207c 	.word	0x2000207c
   19128:	20002098 	.word	0x20002098
   1912c:	00021d9c 	.word	0x00021d9c

00019130 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   19130:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   19132:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   19134:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   19138:	d06f      	beq.n	1921a <baudrate_set+0xea>
   1913a:	d83a      	bhi.n	191b2 <baudrate_set+0x82>
   1913c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   19140:	d06e      	beq.n	19220 <baudrate_set+0xf0>
   19142:	d90a      	bls.n	1915a <baudrate_set+0x2a>
   19144:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   19148:	d075      	beq.n	19236 <baudrate_set+0x106>
   1914a:	d924      	bls.n	19196 <baudrate_set+0x66>
   1914c:	f647 2312 	movw	r3, #31250	; 0x7a12
   19150:	4299      	cmp	r1, r3
   19152:	d12b      	bne.n	191ac <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   19154:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   19158:	e013      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   1915a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1915e:	d061      	beq.n	19224 <baudrate_set+0xf4>
   19160:	d907      	bls.n	19172 <baudrate_set+0x42>
   19162:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   19166:	d063      	beq.n	19230 <baudrate_set+0x100>
   19168:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1916c:	d110      	bne.n	19190 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1916e:	4b3c      	ldr	r3, [pc, #240]	; (19260 <baudrate_set+0x130>)
   19170:	e007      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   19172:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   19176:	d058      	beq.n	1922a <baudrate_set+0xfa>
   19178:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1917c:	d105      	bne.n	1918a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1917e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   19182:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   19186:	2000      	movs	r0, #0
   19188:	4770      	bx	lr
	switch (baudrate) {
   1918a:	f06f 0015 	mvn.w	r0, #21
   1918e:	4770      	bx	lr
   19190:	f06f 0015 	mvn.w	r0, #21
   19194:	4770      	bx	lr
   19196:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1919a:	d04e      	beq.n	1923a <baudrate_set+0x10a>
   1919c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   191a0:	d101      	bne.n	191a6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   191a2:	4b30      	ldr	r3, [pc, #192]	; (19264 <baudrate_set+0x134>)
   191a4:	e7ed      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   191a6:	f06f 0015 	mvn.w	r0, #21
   191aa:	4770      	bx	lr
   191ac:	f06f 0015 	mvn.w	r0, #21
   191b0:	4770      	bx	lr
   191b2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   191b6:	d042      	beq.n	1923e <baudrate_set+0x10e>
   191b8:	d909      	bls.n	191ce <baudrate_set+0x9e>
   191ba:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   191be:	d046      	beq.n	1924e <baudrate_set+0x11e>
   191c0:	d91f      	bls.n	19202 <baudrate_set+0xd2>
   191c2:	4b29      	ldr	r3, [pc, #164]	; (19268 <baudrate_set+0x138>)
   191c4:	4299      	cmp	r1, r3
   191c6:	d148      	bne.n	1925a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   191c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   191cc:	e7d9      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   191ce:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   191d2:	d037      	beq.n	19244 <baudrate_set+0x114>
   191d4:	d905      	bls.n	191e2 <baudrate_set+0xb2>
   191d6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   191da:	d10f      	bne.n	191fc <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   191dc:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   191e0:	e7cf      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   191e2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   191e6:	4299      	cmp	r1, r3
   191e8:	d02e      	beq.n	19248 <baudrate_set+0x118>
   191ea:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   191ee:	d102      	bne.n	191f6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   191f0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   191f4:	e7c5      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   191f6:	f06f 0015 	mvn.w	r0, #21
   191fa:	4770      	bx	lr
   191fc:	f06f 0015 	mvn.w	r0, #21
   19200:	4770      	bx	lr
   19202:	4b1a      	ldr	r3, [pc, #104]	; (1926c <baudrate_set+0x13c>)
   19204:	4299      	cmp	r1, r3
   19206:	d025      	beq.n	19254 <baudrate_set+0x124>
   19208:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1920c:	d102      	bne.n	19214 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1920e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   19212:	e7b6      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   19214:	f06f 0015 	mvn.w	r0, #21
   19218:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1921a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1921e:	e7b0      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   19220:	4b13      	ldr	r3, [pc, #76]	; (19270 <baudrate_set+0x140>)
   19222:	e7ae      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   19224:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   19228:	e7ab      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   1922a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1922e:	e7a8      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   19230:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   19234:	e7a5      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   19236:	4b0f      	ldr	r3, [pc, #60]	; (19274 <baudrate_set+0x144>)
   19238:	e7a3      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1923a:	4b0f      	ldr	r3, [pc, #60]	; (19278 <baudrate_set+0x148>)
   1923c:	e7a1      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1923e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   19242:	e79e      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   19244:	4b0d      	ldr	r3, [pc, #52]	; (1927c <baudrate_set+0x14c>)
   19246:	e79c      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   19248:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1924c:	e799      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1924e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19252:	e796      	b.n	19182 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   19254:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19258:	e793      	b.n	19182 <baudrate_set+0x52>
	switch (baudrate) {
   1925a:	f06f 0015 	mvn.w	r0, #21
}
   1925e:	4770      	bx	lr
   19260:	0013b000 	.word	0x0013b000
   19264:	004ea000 	.word	0x004ea000
   19268:	000f4240 	.word	0x000f4240
   1926c:	0003d090 	.word	0x0003d090
   19270:	00275000 	.word	0x00275000
   19274:	0075c000 	.word	0x0075c000
   19278:	003af000 	.word	0x003af000
   1927c:	013a9000 	.word	0x013a9000

00019280 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   19280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19284:	4605      	mov	r5, r0
   19286:	460f      	mov	r7, r1
	return dev->data;
   19288:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1928c:	f007 ff3b 	bl	21106 <k_is_in_isr>
   19290:	b920      	cbnz	r0, 1929c <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   19292:	4b16      	ldr	r3, [pc, #88]	; (192ec <uarte_nrfx_poll_out+0x6c>)
   19294:	781b      	ldrb	r3, [r3, #0]
   19296:	b1ab      	cbz	r3, 192c4 <uarte_nrfx_poll_out+0x44>
   19298:	2300      	movs	r3, #0
   1929a:	e000      	b.n	1929e <uarte_nrfx_poll_out+0x1e>
   1929c:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1929e:	b19b      	cbz	r3, 192c8 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   192a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   192a4:	f3ef 8411 	mrs	r4, BASEPRI
   192a8:	f383 8812 	msr	BASEPRI_MAX, r3
   192ac:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   192b0:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   192b2:	4628      	mov	r0, r5
   192b4:	f007 f93a 	bl	2052c <is_tx_ready>
   192b8:	b950      	cbnz	r0, 192d0 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   192ba:	f384 8811 	msr	BASEPRI, r4
   192be:	f3bf 8f6f 	isb	sy
}
   192c2:	e7ed      	b.n	192a0 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   192c4:	2301      	movs	r3, #1
   192c6:	e7ea      	b.n	1929e <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   192c8:	4628      	mov	r0, r5
   192ca:	f007 f97e 	bl	205ca <wait_tx_ready>
   192ce:	4606      	mov	r6, r0
	}

	data->char_out = c;
   192d0:	4641      	mov	r1, r8
   192d2:	f801 7f10 	strb.w	r7, [r1, #16]!
	tx_start(dev, &data->char_out, 1);
   192d6:	2201      	movs	r2, #1
   192d8:	4628      	mov	r0, r5
   192da:	f007 f941 	bl	20560 <tx_start>
	__asm__ volatile(
   192de:	f386 8811 	msr	BASEPRI, r6
   192e2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   192e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   192ea:	bf00      	nop
   192ec:	200031a6 	.word	0x200031a6

000192f0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   192f0:	b538      	push	{r3, r4, r5, lr}
   192f2:	4604      	mov	r4, r0
   192f4:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   192f6:	f101 0012 	add.w	r0, r1, #18
   192fa:	f001 f96d 	bl	1a5d8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   192fe:	4b14      	ldr	r3, [pc, #80]	; (19350 <endtx_stoptx_ppi_init+0x60>)
   19300:	4298      	cmp	r0, r3
   19302:	d111      	bne.n	19328 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   19304:	7cab      	ldrb	r3, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   19306:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1930a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1930c:	4a11      	ldr	r2, [pc, #68]	; (19354 <endtx_stoptx_ppi_init+0x64>)
   1930e:	33a2      	adds	r3, #162	; 0xa2
   19310:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19314:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   19318:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1931a:	7ca9      	ldrb	r1, [r5, #18]
   1931c:	2301      	movs	r3, #1
   1931e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   19320:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   19324:	2000      	movs	r0, #0
}
   19326:	bd38      	pop	{r3, r4, r5, pc}
   19328:	4b0b      	ldr	r3, [pc, #44]	; (19358 <endtx_stoptx_ppi_init+0x68>)
   1932a:	4a0c      	ldr	r2, [pc, #48]	; (1935c <endtx_stoptx_ppi_init+0x6c>)
   1932c:	1a9b      	subs	r3, r3, r2
   1932e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   19330:	f04f 0100 	mov.w	r1, #0
   19334:	2201      	movs	r2, #1
   19336:	f362 0102 	bfi	r1, r2, #0, #3
   1933a:	f36f 01c5 	bfc	r1, #3, #3
   1933e:	f363 118f 	bfi	r1, r3, #6, #10
   19342:	4807      	ldr	r0, [pc, #28]	; (19360 <endtx_stoptx_ppi_init+0x70>)
   19344:	f7f7 fc2c 	bl	10ba0 <log_0>
		return -EIO;
   19348:	f06f 0004 	mvn.w	r0, #4
   1934c:	e7eb      	b.n	19326 <endtx_stoptx_ppi_init+0x36>
   1934e:	bf00      	nop
   19350:	0bad0000 	.word	0x0bad0000
   19354:	4001f000 	.word	0x4001f000
   19358:	00022034 	.word	0x00022034
   1935c:	00021f84 	.word	0x00021f84
   19360:	00024024 	.word	0x00024024

00019364 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   19364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   19366:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   19368:	6825      	ldr	r5, [r4, #0]
	return dev->data;
   1936a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1936c:	2300      	movs	r3, #0
   1936e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   19372:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
   19374:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
   19376:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   1937a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1937c:	2b01      	cmp	r3, #1
   1937e:	f000 8097 	beq.w	194b0 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
   19382:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19386:	2301      	movs	r3, #1
   19388:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1938a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
   1938e:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
   19390:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19394:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19396:	2b01      	cmp	r3, #1
   19398:	f000 808c 	beq.w	194b4 <uarte_instance_init+0x150>
        case 0: return NRF_P0;
   1939c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   193a0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   193a4:	2203      	movs	r2, #3
   193a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   193aa:	68e3      	ldr	r3, [r4, #12]
   193ac:	f1b3 3fff 	cmp.w	r3, #4294967295
   193b0:	d00c      	beq.n	193cc <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   193b2:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
   193b4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   193b8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   193ba:	2b01      	cmp	r3, #1
   193bc:	d07c      	beq.n	194b8 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
   193be:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   193c2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   193c4:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   193c8:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   193cc:	68a2      	ldr	r2, [r4, #8]
   193ce:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
   193d0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   193d4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   193d8:	6923      	ldr	r3, [r4, #16]
   193da:	f1b3 3fff 	cmp.w	r3, #4294967295
   193de:	d00c      	beq.n	193fa <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   193e0:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
   193e2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   193e6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   193e8:	2b01      	cmp	r3, #1
   193ea:	d067      	beq.n	194bc <uarte_instance_init+0x158>
        case 0: return NRF_P0;
   193ec:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   193f0:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   193f2:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   193f6:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   193fa:	6963      	ldr	r3, [r4, #20]
   193fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   19400:	d017      	beq.n	19432 <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
   19402:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   19406:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19408:	2b01      	cmp	r3, #1
   1940a:	d059      	beq.n	194c0 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
   1940c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19410:	2301      	movs	r3, #1
   19412:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   19414:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
   19418:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
   1941a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1941e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   19420:	2b01      	cmp	r3, #1
   19422:	d04f      	beq.n	194c4 <uarte_instance_init+0x160>
        case 0: return NRF_P0;
   19424:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   19428:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1942c:	2203      	movs	r2, #3
   1942e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   19432:	6962      	ldr	r2, [r4, #20]
   19434:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
   19436:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1943a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   1943e:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   19440:	3104      	adds	r1, #4
   19442:	f006 fff7 	bl	20434 <uarte_nrfx_configure>
	if (err) {
   19446:	4607      	mov	r7, r0
   19448:	bb80      	cbnz	r0, 194ac <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1944a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1944c:	f013 0f08 	tst.w	r3, #8
   19450:	d13a      	bne.n	194c8 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   19452:	2308      	movs	r3, #8
   19454:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   19458:	68e3      	ldr	r3, [r4, #12]
   1945a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1945e:	d00c      	beq.n	1947a <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19460:	2300      	movs	r3, #0
   19462:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   19466:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1946a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1946e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19472:	2301      	movs	r3, #1
   19474:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19478:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1947a:	6863      	ldr	r3, [r4, #4]
   1947c:	f013 0f08 	tst.w	r3, #8
   19480:	d103      	bne.n	1948a <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
   19482:	f44f 7380 	mov.w	r3, #256	; 0x100
   19486:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1948a:	6863      	ldr	r3, [r4, #4]
   1948c:	f013 0f10 	tst.w	r3, #16
   19490:	d003      	beq.n	1949a <uarte_instance_init+0x136>
   19492:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   19496:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1949a:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1949c:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   194a0:	2300      	movs	r3, #0
   194a2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194a6:	2301      	movs	r3, #1
   194a8:	60ab      	str	r3, [r5, #8]
   194aa:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   194ac:	4638      	mov	r0, r7
   194ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   194b0:	4a09      	ldr	r2, [pc, #36]	; (194d8 <uarte_instance_init+0x174>)
   194b2:	e768      	b.n	19386 <uarte_instance_init+0x22>
   194b4:	4908      	ldr	r1, [pc, #32]	; (194d8 <uarte_instance_init+0x174>)
   194b6:	e773      	b.n	193a0 <uarte_instance_init+0x3c>
   194b8:	4f07      	ldr	r7, [pc, #28]	; (194d8 <uarte_instance_init+0x174>)
   194ba:	e782      	b.n	193c2 <uarte_instance_init+0x5e>
   194bc:	4f06      	ldr	r7, [pc, #24]	; (194d8 <uarte_instance_init+0x174>)
   194be:	e797      	b.n	193f0 <uarte_instance_init+0x8c>
   194c0:	4905      	ldr	r1, [pc, #20]	; (194d8 <uarte_instance_init+0x174>)
   194c2:	e7a5      	b.n	19410 <uarte_instance_init+0xac>
   194c4:	4904      	ldr	r1, [pc, #16]	; (194d8 <uarte_instance_init+0x174>)
   194c6:	e7af      	b.n	19428 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
   194c8:	4631      	mov	r1, r6
   194ca:	4628      	mov	r0, r5
   194cc:	f7ff ff10 	bl	192f0 <endtx_stoptx_ppi_init>
		if (err < 0) {
   194d0:	2800      	cmp	r0, #0
   194d2:	dabe      	bge.n	19452 <uarte_instance_init+0xee>
			return err;
   194d4:	4607      	mov	r7, r0
   194d6:	e7e9      	b.n	194ac <uarte_instance_init+0x148>
   194d8:	50000300 	.word	0x50000300

000194dc <random_byte_get>:
	__asm__ volatile(
   194dc:	f04f 0340 	mov.w	r3, #64	; 0x40
   194e0:	f3ef 8211 	mrs	r2, BASEPRI
   194e4:	f383 8812 	msr	BASEPRI_MAX, r3
   194e8:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   194ec:	4b09      	ldr	r3, [pc, #36]	; (19514 <random_byte_get+0x38>)
   194ee:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   194f0:	b16b      	cbz	r3, 1950e <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   194f2:	4b09      	ldr	r3, [pc, #36]	; (19518 <random_byte_get+0x3c>)
   194f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   194f8:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   194fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
   194fe:	2100      	movs	r1, #0
   19500:	6019      	str	r1, [r3, #0]
   19502:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   19504:	f382 8811 	msr	BASEPRI, r2
   19508:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1950c:	4770      	bx	lr
	int retval = -EAGAIN;
   1950e:	f06f 000a 	mvn.w	r0, #10
   19512:	e7f7      	b.n	19504 <random_byte_get+0x28>
   19514:	4000d100 	.word	0x4000d100
   19518:	4000d000 	.word	0x4000d000

0001951c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19520:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   19522:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   19526:	78c5      	ldrb	r5, [r0, #3]
   19528:	462f      	mov	r7, r5
	__asm__ volatile(
   1952a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1952e:	f3ef 8811 	mrs	r8, BASEPRI
   19532:	f383 8812 	msr	BASEPRI_MAX, r3
   19536:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1953a:	7800      	ldrb	r0, [r0, #0]
   1953c:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1953e:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   19542:	ebac 0c00 	sub.w	ip, ip, r0
   19546:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1954a:	4562      	cmp	r2, ip
   1954c:	d901      	bls.n	19552 <rng_pool_get+0x36>
		len = available;
   1954e:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   19552:	1883      	adds	r3, r0, r2
   19554:	402b      	ands	r3, r5
   19556:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   19558:	f388 8811 	msr	BASEPRI, r8
   1955c:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   19560:	460b      	mov	r3, r1
}
   19562:	e006      	b.n	19572 <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   19564:	1932      	adds	r2, r6, r4
   19566:	7952      	ldrb	r2, [r2, #5]
   19568:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1956c:	3401      	adds	r4, #1
   1956e:	403c      	ands	r4, r7
	while (likely(len--)) {
   19570:	462a      	mov	r2, r5
   19572:	1e55      	subs	r5, r2, #1
   19574:	b2ad      	uxth	r5, r5
   19576:	2a00      	cmp	r2, #0
   19578:	d1f4      	bne.n	19564 <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1957a:	4570      	cmp	r0, lr
   1957c:	d10d      	bne.n	1959a <rng_pool_get+0x7e>
	__asm__ volatile(
   1957e:	f04f 0040 	mov.w	r0, #64	; 0x40
   19582:	f3ef 8211 	mrs	r2, BASEPRI
   19586:	f380 8812 	msr	BASEPRI_MAX, r0
   1958a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1958e:	7830      	ldrb	r0, [r6, #0]
   19590:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   19592:	f382 8811 	msr	BASEPRI, r2
   19596:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1959a:	1a5b      	subs	r3, r3, r1
   1959c:	b298      	uxth	r0, r3
	available = available - len;
   1959e:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   195a2:	7933      	ldrb	r3, [r6, #4]
   195a4:	4563      	cmp	r3, ip
   195a6:	d302      	bcc.n	195ae <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   195a8:	4b02      	ldr	r3, [pc, #8]	; (195b4 <rng_pool_get+0x98>)
   195aa:	2201      	movs	r2, #1
   195ac:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   195ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   195b2:	bf00      	nop
   195b4:	4000d000 	.word	0x4000d000

000195b8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   195b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195ba:	460d      	mov	r5, r1
   195bc:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   195be:	f013 0f01 	tst.w	r3, #1
   195c2:	d103      	bne.n	195cc <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   195c4:	4822      	ldr	r0, [pc, #136]	; (19650 <entropy_nrf5_get_entropy_isr+0x98>)
   195c6:	f7ff ffa9 	bl	1951c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   195ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   195cc:	b90a      	cbnz	r2, 195d2 <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   195ce:	4620      	mov	r0, r4
   195d0:	e7fb      	b.n	195ca <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   195d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   195d6:	f3ef 8611 	mrs	r6, BASEPRI
   195da:	f383 8812 	msr	BASEPRI_MAX, r3
   195de:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   195e2:	200d      	movs	r0, #13
   195e4:	f7f8 fbe2 	bl	11dac <arch_irq_is_enabled>
   195e8:	4607      	mov	r7, r0
		irq_disable(IRQN);
   195ea:	200d      	movs	r0, #13
   195ec:	f7f8 fbca 	bl	11d84 <arch_irq_disable>
	__asm__ volatile(
   195f0:	f386 8811 	msr	BASEPRI, r6
   195f4:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   195f8:	4b16      	ldr	r3, [pc, #88]	; (19654 <entropy_nrf5_get_entropy_isr+0x9c>)
   195fa:	2200      	movs	r2, #0
   195fc:	601a      	str	r2, [r3, #0]
   195fe:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19600:	4b15      	ldr	r3, [pc, #84]	; (19658 <entropy_nrf5_get_entropy_isr+0xa0>)
   19602:	2201      	movs	r2, #1
   19604:	601a      	str	r2, [r3, #0]
   19606:	4b15      	ldr	r3, [pc, #84]	; (1965c <entropy_nrf5_get_entropy_isr+0xa4>)
   19608:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1960c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   19610:	4626      	mov	r6, r4
   19612:	e004      	b.n	1961e <entropy_nrf5_get_entropy_isr+0x66>
   19614:	f3bf 8f4f 	dsb	sy
				__WFE();
   19618:	bf20      	wfe
				__SEV();
   1961a:	bf40      	sev
				__WFE();
   1961c:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1961e:	4b0d      	ldr	r3, [pc, #52]	; (19654 <entropy_nrf5_get_entropy_isr+0x9c>)
   19620:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   19622:	2b00      	cmp	r3, #0
   19624:	d0f6      	beq.n	19614 <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   19626:	f7ff ff59 	bl	194dc <random_byte_get>
   1962a:	4b0c      	ldr	r3, [pc, #48]	; (1965c <entropy_nrf5_get_entropy_isr+0xa4>)
   1962c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19630:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   19634:	2800      	cmp	r0, #0
   19636:	db02      	blt.n	1963e <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   19638:	3e01      	subs	r6, #1
   1963a:	b2b6      	uxth	r6, r6
   1963c:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1963e:	2e00      	cmp	r6, #0
   19640:	d1ed      	bne.n	1961e <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   19642:	2f00      	cmp	r7, #0
   19644:	d0c3      	beq.n	195ce <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   19646:	200d      	movs	r0, #13
   19648:	f7f8 fb8c 	bl	11d64 <arch_irq_enable>
   1964c:	e7bf      	b.n	195ce <entropy_nrf5_get_entropy_isr+0x16>
   1964e:	bf00      	nop
   19650:	200020e4 	.word	0x200020e4
   19654:	4000d100 	.word	0x4000d100
   19658:	4000d000 	.word	0x4000d000
   1965c:	e000e100 	.word	0xe000e100

00019660 <isr>:
{
   19660:	b510      	push	{r4, lr}
	byte = random_byte_get();
   19662:	f7ff ff3b 	bl	194dc <random_byte_get>
	if (byte < 0) {
   19666:	2800      	cmp	r0, #0
   19668:	db06      	blt.n	19678 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1966a:	b2c4      	uxtb	r4, r0
   1966c:	4621      	mov	r1, r4
   1966e:	480a      	ldr	r0, [pc, #40]	; (19698 <isr+0x38>)
   19670:	f006 fff0 	bl	20654 <rng_pool_put>
	if (ret < 0) {
   19674:	2800      	cmp	r0, #0
   19676:	db00      	blt.n	1967a <isr+0x1a>
}
   19678:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1967a:	4621      	mov	r1, r4
   1967c:	4807      	ldr	r0, [pc, #28]	; (1969c <isr+0x3c>)
   1967e:	f006 ffe9 	bl	20654 <rng_pool_put>
		if (ret < 0) {
   19682:	2800      	cmp	r0, #0
   19684:	db03      	blt.n	1968e <isr+0x2e>
	z_impl_k_sem_give(sem);
   19686:	4806      	ldr	r0, [pc, #24]	; (196a0 <isr+0x40>)
   19688:	f001 fce8 	bl	1b05c <z_impl_k_sem_give>
}
   1968c:	e7f4      	b.n	19678 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1968e:	4b05      	ldr	r3, [pc, #20]	; (196a4 <isr+0x44>)
   19690:	2201      	movs	r2, #1
   19692:	601a      	str	r2, [r3, #0]
}
   19694:	e7f7      	b.n	19686 <isr+0x26>
   19696:	bf00      	nop
   19698:	200020e4 	.word	0x200020e4
   1969c:	200020f9 	.word	0x200020f9
   196a0:	200020cc 	.word	0x200020cc
   196a4:	4000d004 	.word	0x4000d004

000196a8 <entropy_nrf5_get_entropy>:
{
   196a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196aa:	460f      	mov	r7, r1
   196ac:	4614      	mov	r4, r2
	while (len) {
   196ae:	e002      	b.n	196b6 <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   196b0:	1b64      	subs	r4, r4, r5
   196b2:	b2a4      	uxth	r4, r4
		buf += bytes;
   196b4:	442f      	add	r7, r5
	while (len) {
   196b6:	b1e4      	cbz	r4, 196f2 <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   196b8:	4e0f      	ldr	r6, [pc, #60]	; (196f8 <entropy_nrf5_get_entropy+0x50>)
   196ba:	f04f 32ff 	mov.w	r2, #4294967295
   196be:	f04f 33ff 	mov.w	r3, #4294967295
   196c2:	4630      	mov	r0, r6
   196c4:	f001 fcf2 	bl	1b0ac <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   196c8:	4622      	mov	r2, r4
   196ca:	4639      	mov	r1, r7
   196cc:	f106 0045 	add.w	r0, r6, #69	; 0x45
   196d0:	f7ff ff24 	bl	1951c <rng_pool_get>
   196d4:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   196d6:	4630      	mov	r0, r6
   196d8:	f001 fcc0 	bl	1b05c <z_impl_k_sem_give>
		if (bytes == 0U) {
   196dc:	2d00      	cmp	r5, #0
   196de:	d1e7      	bne.n	196b0 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   196e0:	f04f 32ff 	mov.w	r2, #4294967295
   196e4:	f04f 33ff 	mov.w	r3, #4294967295
   196e8:	f106 0018 	add.w	r0, r6, #24
   196ec:	f001 fcde 	bl	1b0ac <z_impl_k_sem_take>
			continue;
   196f0:	e7e1      	b.n	196b6 <entropy_nrf5_get_entropy+0xe>
}
   196f2:	2000      	movs	r0, #0
   196f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   196f6:	bf00      	nop
   196f8:	200020b4 	.word	0x200020b4

000196fc <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   196fc:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   196fe:	4c18      	ldr	r4, [pc, #96]	; (19760 <entropy_nrf5_init+0x64>)
   19700:	2201      	movs	r2, #1
   19702:	4611      	mov	r1, r2
   19704:	4620      	mov	r0, r4
   19706:	f007 fe40 	bl	2138a <z_impl_k_sem_init>
   1970a:	2201      	movs	r2, #1
   1970c:	2100      	movs	r1, #0
   1970e:	f104 0018 	add.w	r0, r4, #24
   19712:	f007 fe3a 	bl	2138a <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   19716:	2204      	movs	r2, #4
   19718:	2108      	movs	r1, #8
   1971a:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1971e:	f006 ffad 	bl	2067c <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   19722:	220c      	movs	r2, #12
   19724:	2110      	movs	r1, #16
   19726:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1972a:	f006 ffa7 	bl	2067c <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1972e:	4b0d      	ldr	r3, [pc, #52]	; (19764 <entropy_nrf5_init+0x68>)
   19730:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19734:	f022 0201 	bic.w	r2, r2, #1
   19738:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1973c:	4a0a      	ldr	r2, [pc, #40]	; (19768 <entropy_nrf5_init+0x6c>)
   1973e:	2400      	movs	r4, #0
   19740:	6014      	str	r4, [r2, #0]
   19742:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   19744:	2101      	movs	r1, #1
   19746:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1974a:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1974c:	4622      	mov	r2, r4
   1974e:	200d      	movs	r0, #13
   19750:	f7f8 fb3a 	bl	11dc8 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19754:	200d      	movs	r0, #13
   19756:	f7f8 fb05 	bl	11d64 <arch_irq_enable>

	return 0;
}
   1975a:	4620      	mov	r0, r4
   1975c:	bd10      	pop	{r4, pc}
   1975e:	bf00      	nop
   19760:	200020b4 	.word	0x200020b4
   19764:	4000d000 	.word	0x4000d000
   19768:	4000d100 	.word	0x4000d100

0001976c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1976c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   19770:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19774:	4b01      	ldr	r3, [pc, #4]	; (1977c <set_comparator+0x10>)
   19776:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1977a:	4770      	bx	lr
   1977c:	40011000 	.word	0x40011000

00019780 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   19780:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   19784:	4b01      	ldr	r3, [pc, #4]	; (1978c <get_comparator+0xc>)
   19786:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1978a:	4770      	bx	lr
   1978c:	40011000 	.word	0x40011000

00019790 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19794:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   19796:	4a02      	ldr	r2, [pc, #8]	; (197a0 <event_enable+0x10>)
   19798:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1979c:	4770      	bx	lr
   1979e:	bf00      	nop
   197a0:	40011000 	.word	0x40011000

000197a4 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   197a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   197a8:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   197aa:	4a02      	ldr	r2, [pc, #8]	; (197b4 <event_disable+0x10>)
   197ac:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   197b0:	4770      	bx	lr
   197b2:	bf00      	nop
   197b4:	40011000 	.word	0x40011000

000197b8 <counter>:
     return p_reg->COUNTER;
   197b8:	4b01      	ldr	r3, [pc, #4]	; (197c0 <counter+0x8>)
   197ba:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   197be:	4770      	bx	lr
   197c0:	40011000 	.word	0x40011000

000197c4 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   197c4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   197c6:	2301      	movs	r3, #1
   197c8:	4083      	lsls	r3, r0
   197ca:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   197cc:	4a10      	ldr	r2, [pc, #64]	; (19810 <compare_int_lock+0x4c>)
   197ce:	f3bf 8f5b 	dmb	ish
   197d2:	e852 1f00 	ldrex	r1, [r2]
   197d6:	ea01 0c04 	and.w	ip, r1, r4
   197da:	e842 ce00 	strex	lr, ip, [r2]
   197de:	f1be 0f00 	cmp.w	lr, #0
   197e2:	d1f6      	bne.n	197d2 <compare_int_lock+0xe>
   197e4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   197e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   197ec:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   197f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   197f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   197f8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   197fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19800:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   19804:	420b      	tst	r3, r1
}
   19806:	bf14      	ite	ne
   19808:	2001      	movne	r0, #1
   1980a:	2000      	moveq	r0, #0
   1980c:	bd10      	pop	{r4, pc}
   1980e:	bf00      	nop
   19810:	2000210c 	.word	0x2000210c

00019814 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   19814:	b570      	push	{r4, r5, r6, lr}
   19816:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   19818:	f006 ff4d 	bl	206b6 <full_int_lock>
   1981c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1981e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19822:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   19824:	4a17      	ldr	r2, [pc, #92]	; (19884 <channel_processing_check_and_clear+0x70>)
   19826:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1982a:	4213      	tst	r3, r2
   1982c:	d105      	bne.n	1983a <channel_processing_check_and_clear+0x26>
	bool result = false;
   1982e:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   19830:	4628      	mov	r0, r5
   19832:	f006 ff44 	bl	206be <full_int_unlock>

	return result;
}
   19836:	4630      	mov	r0, r6
   19838:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1983a:	2301      	movs	r3, #1
   1983c:	40a3      	lsls	r3, r4
   1983e:	43db      	mvns	r3, r3
   19840:	4a11      	ldr	r2, [pc, #68]	; (19888 <channel_processing_check_and_clear+0x74>)
   19842:	f3bf 8f5b 	dmb	ish
   19846:	e852 1f00 	ldrex	r1, [r2]
   1984a:	ea01 0003 	and.w	r0, r1, r3
   1984e:	e842 0600 	strex	r6, r0, [r2]
   19852:	2e00      	cmp	r6, #0
   19854:	d1f7      	bne.n	19846 <channel_processing_check_and_clear+0x32>
   19856:	f3bf 8f5b 	dmb	ish
   1985a:	b959      	cbnz	r1, 19874 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1985c:	f104 0350 	add.w	r3, r4, #80	; 0x50
   19860:	009b      	lsls	r3, r3, #2
   19862:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19864:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19868:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1986c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1986e:	b113      	cbz	r3, 19876 <channel_processing_check_and_clear+0x62>
   19870:	2301      	movs	r3, #1
   19872:	e000      	b.n	19876 <channel_processing_check_and_clear+0x62>
   19874:	2301      	movs	r3, #1
		if (result) {
   19876:	461e      	mov	r6, r3
   19878:	2b00      	cmp	r3, #0
   1987a:	d0d9      	beq.n	19830 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1987c:	4620      	mov	r0, r4
   1987e:	f006 ff0b 	bl	20698 <event_clear>
   19882:	e7d5      	b.n	19830 <channel_processing_check_and_clear+0x1c>
   19884:	40011000 	.word	0x40011000
   19888:	20002108 	.word	0x20002108

0001988c <compare_int_unlock>:
	if (key) {
   1988c:	b901      	cbnz	r1, 19890 <compare_int_unlock+0x4>
}
   1988e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   19890:	2301      	movs	r3, #1
   19892:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19894:	4a11      	ldr	r2, [pc, #68]	; (198dc <compare_int_unlock+0x50>)
   19896:	f3bf 8f5b 	dmb	ish
   1989a:	e852 1f00 	ldrex	r1, [r2]
   1989e:	4319      	orrs	r1, r3
   198a0:	e842 1c00 	strex	ip, r1, [r2]
   198a4:	f1bc 0f00 	cmp.w	ip, #0
   198a8:	d1f7      	bne.n	1989a <compare_int_unlock+0xe>
   198aa:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   198ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   198b2:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   198b4:	4a0a      	ldr	r2, [pc, #40]	; (198e0 <compare_int_unlock+0x54>)
   198b6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   198ba:	f3bf 8f5b 	dmb	ish
   198be:	4b09      	ldr	r3, [pc, #36]	; (198e4 <compare_int_unlock+0x58>)
   198c0:	681b      	ldr	r3, [r3, #0]
   198c2:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   198c6:	fa23 f000 	lsr.w	r0, r3, r0
   198ca:	f010 0f01 	tst.w	r0, #1
   198ce:	d0de      	beq.n	1988e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   198d0:	4b05      	ldr	r3, [pc, #20]	; (198e8 <compare_int_unlock+0x5c>)
   198d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   198d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   198da:	e7d8      	b.n	1988e <compare_int_unlock+0x2>
   198dc:	2000210c 	.word	0x2000210c
   198e0:	40011000 	.word	0x40011000
   198e4:	20002108 	.word	0x20002108
   198e8:	e000e100 	.word	0xe000e100

000198ec <sys_clock_timeout_handler>:
{
   198ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198ee:	4607      	mov	r7, r0
   198f0:	4614      	mov	r4, r2
   198f2:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   198f4:	4610      	mov	r0, r2
   198f6:	4619      	mov	r1, r3
   198f8:	f006 feda 	bl	206b0 <absolute_time_to_cc>
   198fc:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   198fe:	4b15      	ldr	r3, [pc, #84]	; (19954 <sys_clock_timeout_handler+0x68>)
   19900:	681a      	ldr	r2, [r3, #0]
   19902:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   19904:	601c      	str	r4, [r3, #0]
   19906:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   19908:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1990c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   19910:	d308      	bcc.n	19924 <sys_clock_timeout_handler+0x38>
	return false;
   19912:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   19914:	f002 fadc 	bl	1bed0 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   19918:	4638      	mov	r0, r7
   1991a:	f7ff ff31 	bl	19780 <get_comparator>
   1991e:	42a8      	cmp	r0, r5
   19920:	d00c      	beq.n	1993c <sys_clock_timeout_handler+0x50>
}
   19922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   19924:	4b0c      	ldr	r3, [pc, #48]	; (19958 <sys_clock_timeout_handler+0x6c>)
   19926:	6819      	ldr	r1, [r3, #0]
   19928:	0a0b      	lsrs	r3, r1, #8
   1992a:	060a      	lsls	r2, r1, #24
   1992c:	1952      	adds	r2, r2, r5
   1992e:	f143 0300 	adc.w	r3, r3, #0
   19932:	490a      	ldr	r1, [pc, #40]	; (1995c <sys_clock_timeout_handler+0x70>)
   19934:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   19938:	2401      	movs	r4, #1
   1993a:	e7eb      	b.n	19914 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1993c:	b11c      	cbz	r4, 19946 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1993e:	4638      	mov	r0, r7
   19940:	f7ff ff26 	bl	19790 <event_enable>
}
   19944:	e7ed      	b.n	19922 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   19946:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1994a:	4638      	mov	r0, r7
   1994c:	f7ff ff0e 	bl	1976c <set_comparator>
   19950:	e7f5      	b.n	1993e <sys_clock_timeout_handler+0x52>
   19952:	bf00      	nop
   19954:	20001a48 	.word	0x20001a48
   19958:	20002110 	.word	0x20002110
   1995c:	20001a30 	.word	0x20001a30

00019960 <z_nrf_rtc_timer_read>:
{
   19960:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   19962:	4b0d      	ldr	r3, [pc, #52]	; (19998 <z_nrf_rtc_timer_read+0x38>)
   19964:	681b      	ldr	r3, [r3, #0]
   19966:	0a1d      	lsrs	r5, r3, #8
   19968:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1996a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1996e:	f7ff ff23 	bl	197b8 <counter>
   19972:	4603      	mov	r3, r0
	val += cntr;
   19974:	1820      	adds	r0, r4, r0
   19976:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1997a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1997e:	d20a      	bcs.n	19996 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   19980:	4b06      	ldr	r3, [pc, #24]	; (1999c <z_nrf_rtc_timer_read+0x3c>)
   19982:	e9d3 2300 	ldrd	r2, r3, [r3]
   19986:	4299      	cmp	r1, r3
   19988:	bf08      	it	eq
   1998a:	4290      	cmpeq	r0, r2
   1998c:	d203      	bcs.n	19996 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1998e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19992:	f141 0100 	adc.w	r1, r1, #0
}
   19996:	bd38      	pop	{r3, r4, r5, pc}
   19998:	20002110 	.word	0x20002110
   1999c:	20001a30 	.word	0x20001a30

000199a0 <compare_set_nolocks>:
{
   199a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   199a4:	4606      	mov	r6, r0
   199a6:	4614      	mov	r4, r2
   199a8:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   199aa:	4610      	mov	r0, r2
   199ac:	4619      	mov	r1, r3
   199ae:	f006 fe7f 	bl	206b0 <absolute_time_to_cc>
   199b2:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   199b4:	f7ff ffd4 	bl	19960 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   199b8:	42a9      	cmp	r1, r5
   199ba:	bf08      	it	eq
   199bc:	42a0      	cmpeq	r0, r4
   199be:	d21e      	bcs.n	199fe <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   199c0:	ebb4 0800 	subs.w	r8, r4, r0
   199c4:	eb65 0901 	sbc.w	r9, r5, r1
   199c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   199cc:	2300      	movs	r3, #0
   199ce:	454b      	cmp	r3, r9
   199d0:	bf08      	it	eq
   199d2:	4542      	cmpeq	r2, r8
   199d4:	d32e      	bcc.n	19a34 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   199d6:	4b19      	ldr	r3, [pc, #100]	; (19a3c <compare_set_nolocks+0x9c>)
   199d8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   199dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   199e0:	42ab      	cmp	r3, r5
   199e2:	bf08      	it	eq
   199e4:	42a2      	cmpeq	r2, r4
   199e6:	d018      	beq.n	19a1a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   199e8:	4639      	mov	r1, r7
   199ea:	4630      	mov	r0, r6
   199ec:	f006 fe6a 	bl	206c4 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   199f0:	4639      	mov	r1, r7
   199f2:	f006 fe4d 	bl	20690 <counter_sub>
   199f6:	1824      	adds	r4, r4, r0
   199f8:	f145 0500 	adc.w	r5, r5, #0
   199fc:	e00d      	b.n	19a1a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   199fe:	2301      	movs	r3, #1
   19a00:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a02:	4a0f      	ldr	r2, [pc, #60]	; (19a40 <compare_set_nolocks+0xa0>)
   19a04:	f3bf 8f5b 	dmb	ish
   19a08:	e852 1f00 	ldrex	r1, [r2]
   19a0c:	4319      	orrs	r1, r3
   19a0e:	e842 1000 	strex	r0, r1, [r2]
   19a12:	2800      	cmp	r0, #0
   19a14:	d1f8      	bne.n	19a08 <compare_set_nolocks+0x68>
   19a16:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   19a1a:	4b08      	ldr	r3, [pc, #32]	; (19a3c <compare_set_nolocks+0x9c>)
   19a1c:	0132      	lsls	r2, r6, #4
   19a1e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   19a22:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   19a26:	9908      	ldr	r1, [sp, #32]
   19a28:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   19a2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19a2c:	6073      	str	r3, [r6, #4]
	return ret;
   19a2e:	2000      	movs	r0, #0
}
   19a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   19a34:	f06f 0015 	mvn.w	r0, #21
   19a38:	e7fa      	b.n	19a30 <compare_set_nolocks+0x90>
   19a3a:	bf00      	nop
   19a3c:	20001a38 	.word	0x20001a38
   19a40:	20002108 	.word	0x20002108

00019a44 <process_channel>:

static void process_channel(int32_t chan)
{
   19a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a48:	b082      	sub	sp, #8
   19a4a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   19a4c:	f7ff fee2 	bl	19814 <channel_processing_check_and_clear>
   19a50:	b910      	cbnz	r0, 19a58 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
   19a52:	b002      	add	sp, #8
   19a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   19a58:	f7ff ff82 	bl	19960 <z_nrf_rtc_timer_read>
   19a5c:	4606      	mov	r6, r0
   19a5e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   19a60:	f006 fe29 	bl	206b6 <full_int_lock>
   19a64:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   19a66:	4b13      	ldr	r3, [pc, #76]	; (19ab4 <process_channel+0x70>)
   19a68:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   19a6c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   19a70:	454f      	cmp	r7, r9
   19a72:	bf08      	it	eq
   19a74:	4546      	cmpeq	r6, r8
   19a76:	d20b      	bcs.n	19a90 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   19a78:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   19a7a:	4650      	mov	r0, sl
   19a7c:	f006 fe1f 	bl	206be <full_int_unlock>
		if (handler) {
   19a80:	2e00      	cmp	r6, #0
   19a82:	d0e6      	beq.n	19a52 <process_channel+0xe>
			handler(chan, expire_time, user_context);
   19a84:	9500      	str	r5, [sp, #0]
   19a86:	4642      	mov	r2, r8
   19a88:	464b      	mov	r3, r9
   19a8a:	4620      	mov	r0, r4
   19a8c:	47b0      	blx	r6
}
   19a8e:	e7e0      	b.n	19a52 <process_channel+0xe>
			handler = cc_data[chan].callback;
   19a90:	4a08      	ldr	r2, [pc, #32]	; (19ab4 <process_channel+0x70>)
   19a92:	0123      	lsls	r3, r4, #4
   19a94:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   19a98:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   19a9a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   19a9c:	2000      	movs	r0, #0
   19a9e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   19aa0:	f04f 32ff 	mov.w	r2, #4294967295
   19aa4:	f04f 33ff 	mov.w	r3, #4294967295
   19aa8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   19aac:	4620      	mov	r0, r4
   19aae:	f7ff fe79 	bl	197a4 <event_disable>
   19ab2:	e7e2      	b.n	19a7a <process_channel+0x36>
   19ab4:	20001a38 	.word	0x20001a38

00019ab8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   19ab8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   19aba:	4b0d      	ldr	r3, [pc, #52]	; (19af0 <rtc_nrf_isr+0x38>)
   19abc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   19ac0:	f013 0f02 	tst.w	r3, #2
   19ac4:	d00a      	beq.n	19adc <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ac6:	4b0b      	ldr	r3, [pc, #44]	; (19af4 <rtc_nrf_isr+0x3c>)
   19ac8:	681b      	ldr	r3, [r3, #0]
   19aca:	b13b      	cbz	r3, 19adc <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19acc:	4b09      	ldr	r3, [pc, #36]	; (19af4 <rtc_nrf_isr+0x3c>)
   19ace:	2200      	movs	r2, #0
   19ad0:	601a      	str	r2, [r3, #0]
   19ad2:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   19ad4:	4a08      	ldr	r2, [pc, #32]	; (19af8 <rtc_nrf_isr+0x40>)
   19ad6:	6813      	ldr	r3, [r2, #0]
   19ad8:	3301      	adds	r3, #1
   19ada:	6013      	str	r3, [r2, #0]
{
   19adc:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19ade:	2c00      	cmp	r4, #0
   19ae0:	dd00      	ble.n	19ae4 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
   19ae2:	bd10      	pop	{r4, pc}
		process_channel(chan);
   19ae4:	4620      	mov	r0, r4
   19ae6:	f7ff ffad 	bl	19a44 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19aea:	3401      	adds	r4, #1
   19aec:	e7f7      	b.n	19ade <rtc_nrf_isr+0x26>
   19aee:	bf00      	nop
   19af0:	40011000 	.word	0x40011000
   19af4:	40011104 	.word	0x40011104
   19af8:	20002110 	.word	0x20002110

00019afc <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   19afc:	b530      	push	{r4, r5, lr}
   19afe:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   19b00:	2300      	movs	r3, #0
   19b02:	4a1f      	ldr	r2, [pc, #124]	; (19b80 <sys_clock_driver_init+0x84>)
   19b04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19b08:	2b00      	cmp	r3, #0
   19b0a:	dd27      	ble.n	19b5c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
   19b0c:	4c1c      	ldr	r4, [pc, #112]	; (19b80 <sys_clock_driver_init+0x84>)
   19b0e:	2502      	movs	r5, #2
   19b10:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19b14:	4b1b      	ldr	r3, [pc, #108]	; (19b84 <sys_clock_driver_init+0x88>)
   19b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   19b1a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   19b1e:	2200      	movs	r2, #0
   19b20:	2101      	movs	r1, #1
   19b22:	2011      	movs	r0, #17
   19b24:	f7f8 f950 	bl	11dc8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   19b28:	2011      	movs	r0, #17
   19b2a:	f7f8 f91b 	bl	11d64 <arch_irq_enable>
   19b2e:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19b32:	2301      	movs	r3, #1
   19b34:	4a14      	ldr	r2, [pc, #80]	; (19b88 <sys_clock_driver_init+0x8c>)
   19b36:	6013      	str	r3, [r2, #0]
   19b38:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   19b3a:	4a14      	ldr	r2, [pc, #80]	; (19b8c <sys_clock_driver_init+0x90>)
   19b3c:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   19b3e:	2400      	movs	r4, #0
   19b40:	9401      	str	r4, [sp, #4]
   19b42:	4b13      	ldr	r3, [pc, #76]	; (19b90 <sys_clock_driver_init+0x94>)
   19b44:	9300      	str	r3, [sp, #0]
   19b46:	4a13      	ldr	r2, [pc, #76]	; (19b94 <sys_clock_driver_init+0x98>)
   19b48:	2300      	movs	r3, #0
   19b4a:	4620      	mov	r0, r4
   19b4c:	f006 fdf5 	bl	2073a <compare_set>

	z_nrf_clock_control_lf_on(mode);
   19b50:	4628      	mov	r0, r5
   19b52:	f7fe ffab 	bl	18aac <z_nrf_clock_control_lf_on>

	return 0;
}
   19b56:	4620      	mov	r0, r4
   19b58:	b003      	add	sp, #12
   19b5a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   19b5c:	4a0e      	ldr	r2, [pc, #56]	; (19b98 <sys_clock_driver_init+0x9c>)
   19b5e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   19b62:	f04f 30ff 	mov.w	r0, #4294967295
   19b66:	f04f 31ff 	mov.w	r1, #4294967295
   19b6a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19b6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19b72:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   19b74:	4902      	ldr	r1, [pc, #8]	; (19b80 <sys_clock_driver_init+0x84>)
   19b76:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   19b7a:	3301      	adds	r3, #1
   19b7c:	e7c4      	b.n	19b08 <sys_clock_driver_init+0xc>
   19b7e:	bf00      	nop
   19b80:	40011000 	.word	0x40011000
   19b84:	e000e100 	.word	0xe000e100
   19b88:	40011008 	.word	0x40011008
   19b8c:	2000210c 	.word	0x2000210c
   19b90:	000198ed 	.word	0x000198ed
   19b94:	007fffff 	.word	0x007fffff
   19b98:	20001a38 	.word	0x20001a38

00019b9c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   19b9c:	b510      	push	{r4, lr}
   19b9e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19ba0:	f1b0 3fff 	cmp.w	r0, #4294967295
   19ba4:	d007      	beq.n	19bb6 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19ba6:	1e44      	subs	r4, r0, #1
   19ba8:	2c00      	cmp	r4, #0
   19baa:	dd07      	ble.n	19bbc <sys_clock_set_timeout+0x20>
   19bac:	4b11      	ldr	r3, [pc, #68]	; (19bf4 <sys_clock_set_timeout+0x58>)
   19bae:	429c      	cmp	r4, r3
   19bb0:	dd05      	ble.n	19bbe <sys_clock_set_timeout+0x22>
   19bb2:	4c11      	ldr	r4, [pc, #68]	; (19bf8 <sys_clock_set_timeout+0x5c>)
   19bb4:	e003      	b.n	19bbe <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   19bb6:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   19bba:	e7f4      	b.n	19ba6 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   19bbc:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19bbe:	f7ff fecf 	bl	19960 <z_nrf_rtc_timer_read>
   19bc2:	4b0e      	ldr	r3, [pc, #56]	; (19bfc <sys_clock_set_timeout+0x60>)
   19bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   19bc8:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   19bca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19bce:	d300      	bcc.n	19bd2 <sys_clock_set_timeout+0x36>
		ticks = 0;
   19bd0:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   19bd2:	4404      	add	r4, r0
   19bd4:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   19bd6:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   19bda:	d300      	bcc.n	19bde <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   19bdc:	4c06      	ldr	r4, [pc, #24]	; (19bf8 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19bde:	2000      	movs	r0, #0
   19be0:	9001      	str	r0, [sp, #4]
   19be2:	4907      	ldr	r1, [pc, #28]	; (19c00 <sys_clock_set_timeout+0x64>)
   19be4:	9100      	str	r1, [sp, #0]
   19be6:	1912      	adds	r2, r2, r4
   19be8:	f143 0300 	adc.w	r3, r3, #0
   19bec:	f006 fda5 	bl	2073a <compare_set>
}
   19bf0:	b002      	add	sp, #8
   19bf2:	bd10      	pop	{r4, pc}
   19bf4:	007ffffe 	.word	0x007ffffe
   19bf8:	007fffff 	.word	0x007fffff
   19bfc:	20001a48 	.word	0x20001a48
   19c00:	000198ed 	.word	0x000198ed

00019c04 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   19c04:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   19c06:	f7ff feab 	bl	19960 <z_nrf_rtc_timer_read>
   19c0a:	4b02      	ldr	r3, [pc, #8]	; (19c14 <sys_clock_elapsed+0x10>)
   19c0c:	681b      	ldr	r3, [r3, #0]
}
   19c0e:	1ac0      	subs	r0, r0, r3
   19c10:	bd08      	pop	{r3, pc}
   19c12:	bf00      	nop
   19c14:	20001a48 	.word	0x20001a48

00019c18 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   19c18:	b508      	push	{r3, lr}
   19c1a:	4602      	mov	r2, r0
   19c1c:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   19c1e:	4802      	ldr	r0, [pc, #8]	; (19c28 <multithreading_lock_acquire+0x10>)
   19c20:	f001 f912 	bl	1ae48 <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   19c24:	bd08      	pop	{r3, pc}
   19c26:	bf00      	nop
   19c28:	200006f4 	.word	0x200006f4

00019c2c <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   19c2c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   19c2e:	4802      	ldr	r0, [pc, #8]	; (19c38 <multithreading_lock_release+0xc>)
   19c30:	f001 f994 	bl	1af5c <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   19c34:	bd08      	pop	{r3, pc}
   19c36:	bf00      	nop
   19c38:	200006f4 	.word	0x200006f4

00019c3c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   19c3c:	b508      	push	{r3, lr}
	z_impl_log_panic();
   19c3e:	f7f6 ffdf 	bl	10c00 <z_impl_log_panic>
   19c42:	4b09      	ldr	r3, [pc, #36]	; (19c68 <k_sys_fatal_error_handler+0x2c>)
   19c44:	4a09      	ldr	r2, [pc, #36]	; (19c6c <k_sys_fatal_error_handler+0x30>)
   19c46:	1a9b      	subs	r3, r3, r2
   19c48:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   19c4a:	f04f 0100 	mov.w	r1, #0
   19c4e:	2201      	movs	r2, #1
   19c50:	f362 0102 	bfi	r1, r2, #0, #3
   19c54:	f36f 01c5 	bfc	r1, #3, #3
   19c58:	f363 118f 	bfi	r1, r3, #6, #10
   19c5c:	4804      	ldr	r0, [pc, #16]	; (19c70 <k_sys_fatal_error_handler+0x34>)
   19c5e:	f7f6 ff9f 	bl	10ba0 <log_0>
		sys_arch_reboot(0);
   19c62:	2000      	movs	r0, #0
   19c64:	f7f8 ff44 	bl	12af0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   19c68:	00021fdc 	.word	0x00021fdc
   19c6c:	00021f84 	.word	0x00021f84
   19c70:	000240c8 	.word	0x000240c8

00019c74 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   19c74:	b510      	push	{r4, lr}
   19c76:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   19c78:	4a03      	ldr	r2, [pc, #12]	; (19c88 <rand_prio_low_vector_get_blocking+0x14>)
   19c7a:	6810      	ldr	r0, [r2, #0]
   19c7c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   19c7e:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   19c80:	680c      	ldr	r4, [r1, #0]
   19c82:	4619      	mov	r1, r3
   19c84:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   19c86:	bd10      	pop	{r4, pc}
   19c88:	20002114 	.word	0x20002114

00019c8c <sdc_assertion_handler>:
{
   19c8c:	b538      	push	{r3, r4, r5, lr}
   19c8e:	460d      	mov	r5, r1
   19c90:	4b0d      	ldr	r3, [pc, #52]	; (19cc8 <sdc_assertion_handler+0x3c>)
   19c92:	4a0e      	ldr	r2, [pc, #56]	; (19ccc <sdc_assertion_handler+0x40>)
   19c94:	1a9b      	subs	r3, r3, r2
   19c96:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   19c98:	f04f 0400 	mov.w	r4, #0
   19c9c:	2201      	movs	r2, #1
   19c9e:	f362 0402 	bfi	r4, r2, #0, #3
   19ca2:	f36f 04c5 	bfc	r4, #3, #3
   19ca6:	f363 148f 	bfi	r4, r3, #6, #10
   19caa:	f7f6 fd49 	bl	10740 <z_log_strdup>
   19cae:	4601      	mov	r1, r0
   19cb0:	4623      	mov	r3, r4
   19cb2:	462a      	mov	r2, r5
   19cb4:	4806      	ldr	r0, [pc, #24]	; (19cd0 <sdc_assertion_handler+0x44>)
   19cb6:	f7f6 fef3 	bl	10aa0 <log_2>
	k_oops();
   19cba:	4040      	eors	r0, r0
   19cbc:	f380 8811 	msr	BASEPRI, r0
   19cc0:	f04f 0003 	mov.w	r0, #3
   19cc4:	df02      	svc	2
}
   19cc6:	bd38      	pop	{r3, r4, r5, pc}
   19cc8:	0002201c 	.word	0x0002201c
   19ccc:	00021f84 	.word	0x00021f84
   19cd0:	000240e8 	.word	0x000240e8

00019cd4 <host_signal>:
{
   19cd4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   19cd6:	4802      	ldr	r0, [pc, #8]	; (19ce0 <host_signal+0xc>)
   19cd8:	f001 f9c0 	bl	1b05c <z_impl_k_sem_give>
}
   19cdc:	bd08      	pop	{r3, pc}
   19cde:	bf00      	nop
   19ce0:	20000734 	.word	0x20000734

00019ce4 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   19ce4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   19ce6:	4803      	ldr	r0, [pc, #12]	; (19cf4 <hci_driver_init+0x10>)
   19ce8:	f7fa fe0a 	bl	14900 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   19cec:	4802      	ldr	r0, [pc, #8]	; (19cf8 <hci_driver_init+0x14>)
   19cee:	f7e9 ff77 	bl	3be0 <sdc_init>
	return err;
}
   19cf2:	bd08      	pop	{r3, pc}
   19cf4:	00024208 	.word	0x00024208
   19cf8:	00019c8d 	.word	0x00019c8d

00019cfc <acl_handle>:
{
   19cfc:	b538      	push	{r3, r4, r5, lr}
   19cfe:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19d00:	f04f 30ff 	mov.w	r0, #4294967295
   19d04:	f04f 31ff 	mov.w	r1, #4294967295
   19d08:	f7ff ff86 	bl	19c18 <multithreading_lock_acquire>
	if (!errcode) {
   19d0c:	4605      	mov	r5, r0
   19d0e:	b108      	cbz	r0, 19d14 <acl_handle+0x18>
}
   19d10:	4628      	mov	r0, r5
   19d12:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   19d14:	68a0      	ldr	r0, [r4, #8]
   19d16:	f7f2 f9c5 	bl	c0a4 <sdc_hci_data_put>
   19d1a:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   19d1c:	f7ff ff86 	bl	19c2c <multithreading_lock_release>
		if (errcode) {
   19d20:	2d00      	cmp	r5, #0
   19d22:	d0f5      	beq.n	19d10 <acl_handle+0x14>
   19d24:	4801      	ldr	r0, [pc, #4]	; (19d2c <acl_handle+0x30>)
   19d26:	f001 f999 	bl	1b05c <z_impl_k_sem_give>
}
   19d2a:	e7f1      	b.n	19d10 <acl_handle+0x14>
   19d2c:	20000734 	.word	0x20000734

00019d30 <cmd_handle>:
{
   19d30:	b538      	push	{r3, r4, r5, lr}
   19d32:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   19d34:	f04f 30ff 	mov.w	r0, #4294967295
   19d38:	f04f 31ff 	mov.w	r1, #4294967295
   19d3c:	f7ff ff6c 	bl	19c18 <multithreading_lock_acquire>
	if (!errcode) {
   19d40:	4604      	mov	r4, r0
   19d42:	b110      	cbz	r0, 19d4a <cmd_handle+0x1a>
	if (errcode) {
   19d44:	b144      	cbz	r4, 19d58 <cmd_handle+0x28>
}
   19d46:	4620      	mov	r0, r4
   19d48:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   19d4a:	68a8      	ldr	r0, [r5, #8]
   19d4c:	f000 f9c6 	bl	1a0dc <hci_internal_cmd_put>
   19d50:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   19d52:	f7ff ff6b 	bl	19c2c <multithreading_lock_release>
   19d56:	e7f5      	b.n	19d44 <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   19d58:	4801      	ldr	r0, [pc, #4]	; (19d60 <cmd_handle+0x30>)
   19d5a:	f001 f97f 	bl	1b05c <z_impl_k_sem_give>
	return 0;
   19d5e:	e7f2      	b.n	19d46 <cmd_handle+0x16>
   19d60:	20000734 	.word	0x20000734

00019d64 <rand_prio_high_vector_get>:
{
   19d64:	b538      	push	{r3, r4, r5, lr}
   19d66:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   19d68:	4b07      	ldr	r3, [pc, #28]	; (19d88 <rand_prio_high_vector_get+0x24>)
   19d6a:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   19d6c:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   19d6e:	685d      	ldr	r5, [r3, #4]
   19d70:	b13d      	cbz	r5, 19d82 <rand_prio_high_vector_get+0x1e>
   19d72:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   19d74:	2300      	movs	r3, #0
   19d76:	4621      	mov	r1, r4
   19d78:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   19d7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   19d7e:	b2c0      	uxtb	r0, r0
   19d80:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   19d82:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19d86:	e7f8      	b.n	19d7a <rand_prio_high_vector_get+0x16>
   19d88:	20002114 	.word	0x20002114

00019d8c <rand_prio_low_vector_get>:
{
   19d8c:	b538      	push	{r3, r4, r5, lr}
   19d8e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   19d90:	4b07      	ldr	r3, [pc, #28]	; (19db0 <rand_prio_low_vector_get+0x24>)
   19d92:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   19d94:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   19d96:	685d      	ldr	r5, [r3, #4]
   19d98:	b13d      	cbz	r5, 19daa <rand_prio_low_vector_get+0x1e>
   19d9a:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   19d9c:	2300      	movs	r3, #0
   19d9e:	4621      	mov	r1, r4
   19da0:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   19da2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   19da6:	b2c0      	uxtb	r0, r0
   19da8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   19daa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19dae:	e7f8      	b.n	19da2 <rand_prio_low_vector_get+0x16>
   19db0:	20002114 	.word	0x20002114

00019db4 <event_packet_process>:
{
   19db4:	b570      	push	{r4, r5, r6, lr}
   19db6:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   19db8:	f006 fcdc 	bl	20774 <event_packet_is_discardable>
   19dbc:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   19dbe:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19dc0:	461d      	mov	r5, r3
   19dc2:	b183      	cbz	r3, 19de6 <event_packet_process+0x32>
   19dc4:	2200      	movs	r2, #0
   19dc6:	2300      	movs	r3, #0
   19dc8:	4629      	mov	r1, r5
   19dca:	f7f8 ff7f 	bl	12ccc <bt_buf_get_evt>
	if (!evt_buf) {
   19dce:	4606      	mov	r6, r0
   19dd0:	b170      	cbz	r0, 19df0 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   19dd2:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19dd4:	3202      	adds	r2, #2
   19dd6:	4621      	mov	r1, r4
   19dd8:	3008      	adds	r0, #8
   19dda:	f006 f977 	bl	200cc <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   19dde:	4630      	mov	r0, r6
   19de0:	f7fa fd3a 	bl	14858 <bt_recv>
}
   19de4:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   19de6:	f04f 32ff 	mov.w	r2, #4294967295
   19dea:	f04f 33ff 	mov.w	r3, #4294967295
   19dee:	e7eb      	b.n	19dc8 <event_packet_process+0x14>
		if (discardable) {
   19df0:	2d00      	cmp	r5, #0
   19df2:	d1f7      	bne.n	19de4 <event_packet_process+0x30>
   19df4:	4b08      	ldr	r3, [pc, #32]	; (19e18 <event_packet_process+0x64>)
   19df6:	4a09      	ldr	r2, [pc, #36]	; (19e1c <event_packet_process+0x68>)
   19df8:	1a9b      	subs	r3, r3, r2
   19dfa:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   19dfc:	f04f 0100 	mov.w	r1, #0
   19e00:	2201      	movs	r2, #1
   19e02:	f362 0102 	bfi	r1, r2, #0, #3
   19e06:	f36f 01c5 	bfc	r1, #3, #3
   19e0a:	f363 118f 	bfi	r1, r3, #6, #10
   19e0e:	4804      	ldr	r0, [pc, #16]	; (19e20 <event_packet_process+0x6c>)
   19e10:	f7f6 fec6 	bl	10ba0 <log_0>
		return;
   19e14:	e7e6      	b.n	19de4 <event_packet_process+0x30>
   19e16:	bf00      	nop
   19e18:	0002201c 	.word	0x0002201c
   19e1c:	00021f84 	.word	0x00021f84
   19e20:	00024110 	.word	0x00024110

00019e24 <data_packet_process>:
{
   19e24:	b538      	push	{r3, r4, r5, lr}
   19e26:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   19e28:	f04f 32ff 	mov.w	r2, #4294967295
   19e2c:	f04f 33ff 	mov.w	r3, #4294967295
   19e30:	2003      	movs	r0, #3
   19e32:	f7f8 ff21 	bl	12c78 <bt_buf_get_rx>
	if (!data_buf) {
   19e36:	b150      	cbz	r0, 19e4e <data_packet_process+0x2a>
   19e38:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   19e3a:	8862      	ldrh	r2, [r4, #2]
   19e3c:	3204      	adds	r2, #4
   19e3e:	4621      	mov	r1, r4
   19e40:	3008      	adds	r0, #8
   19e42:	f006 f943 	bl	200cc <net_buf_simple_add_mem>
	bt_recv(data_buf);
   19e46:	4628      	mov	r0, r5
   19e48:	f7fa fd06 	bl	14858 <bt_recv>
}
   19e4c:	bd38      	pop	{r3, r4, r5, pc}
   19e4e:	4b08      	ldr	r3, [pc, #32]	; (19e70 <data_packet_process+0x4c>)
   19e50:	4a08      	ldr	r2, [pc, #32]	; (19e74 <data_packet_process+0x50>)
   19e52:	1a9b      	subs	r3, r3, r2
   19e54:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   19e56:	f04f 0100 	mov.w	r1, #0
   19e5a:	2201      	movs	r2, #1
   19e5c:	f362 0102 	bfi	r1, r2, #0, #3
   19e60:	f36f 01c5 	bfc	r1, #3, #3
   19e64:	f363 118f 	bfi	r1, r3, #6, #10
   19e68:	4803      	ldr	r0, [pc, #12]	; (19e78 <data_packet_process+0x54>)
   19e6a:	f7f6 fe99 	bl	10ba0 <log_0>
		return;
   19e6e:	e7ed      	b.n	19e4c <data_packet_process+0x28>
   19e70:	0002201c 	.word	0x0002201c
   19e74:	00021f84 	.word	0x00021f84
   19e78:	0002412c 	.word	0x0002412c

00019e7c <recv_thread>:
{
   19e7c:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   19e7e:	2500      	movs	r5, #0
	bool received_evt = false;
   19e80:	462c      	mov	r4, r5
   19e82:	e00a      	b.n	19e9a <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   19e84:	4d0b      	ldr	r5, [pc, #44]	; (19eb4 <recv_thread+0x38>)
   19e86:	4628      	mov	r0, r5
   19e88:	f006 fca8 	bl	207dc <fetch_and_process_hci_evt>
   19e8c:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   19e8e:	4628      	mov	r0, r5
   19e90:	f006 fcbd 	bl	2080e <fetch_and_process_acl_data>
   19e94:	4605      	mov	r5, r0
	z_impl_k_yield();
   19e96:	f001 fdff 	bl	1ba98 <z_impl_k_yield>
		if (!received_evt && !received_data) {
   19e9a:	2c00      	cmp	r4, #0
   19e9c:	d1f2      	bne.n	19e84 <recv_thread+0x8>
   19e9e:	2d00      	cmp	r5, #0
   19ea0:	d1f0      	bne.n	19e84 <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   19ea2:	f04f 32ff 	mov.w	r2, #4294967295
   19ea6:	f04f 33ff 	mov.w	r3, #4294967295
   19eaa:	4803      	ldr	r0, [pc, #12]	; (19eb8 <recv_thread+0x3c>)
   19eac:	f001 f8fe 	bl	1b0ac <z_impl_k_sem_take>
   19eb0:	e7e8      	b.n	19e84 <recv_thread+0x8>
   19eb2:	bf00      	nop
   19eb4:	20002118 	.word	0x20002118
   19eb8:	20000734 	.word	0x20000734

00019ebc <configure_memory_usage>:
{
   19ebc:	b500      	push	{lr}
   19ebe:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   19ec0:	2000      	movs	r0, #0
   19ec2:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19ec6:	aa01      	add	r2, sp, #4
   19ec8:	2101      	movs	r1, #1
   19eca:	f7e9 fe09 	bl	3ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   19ece:	2800      	cmp	r0, #0
   19ed0:	db3d      	blt.n	19f4e <configure_memory_usage+0x92>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   19ed2:	2301      	movs	r3, #1
   19ed4:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19ed8:	aa01      	add	r2, sp, #4
   19eda:	2102      	movs	r1, #2
   19edc:	2000      	movs	r0, #0
   19ede:	f7e9 fdff 	bl	3ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   19ee2:	2800      	cmp	r0, #0
   19ee4:	db33      	blt.n	19f4e <configure_memory_usage+0x92>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   19ee6:	23fb      	movs	r3, #251	; 0xfb
   19ee8:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   19eec:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   19ef0:	2302      	movs	r3, #2
   19ef2:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   19ef6:	2103      	movs	r1, #3
   19ef8:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19efc:	aa01      	add	r2, sp, #4
   19efe:	2000      	movs	r0, #0
   19f00:	f7e9 fdee 	bl	3ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   19f04:	2800      	cmp	r0, #0
   19f06:	db22      	blt.n	19f4e <configure_memory_usage+0x92>
	cfg.event_length.event_length_us =
   19f08:	f641 534c 	movw	r3, #7500	; 0x1d4c
   19f0c:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f0e:	aa01      	add	r2, sp, #4
   19f10:	2104      	movs	r1, #4
   19f12:	2000      	movs	r0, #0
   19f14:	f7e9 fde4 	bl	3ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   19f18:	2800      	cmp	r0, #0
   19f1a:	db18      	blt.n	19f4e <configure_memory_usage+0x92>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   19f1c:	2301      	movs	r3, #1
   19f1e:	f88d 3004 	strb.w	r3, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f22:	aa01      	add	r2, sp, #4
   19f24:	2105      	movs	r1, #5
   19f26:	2000      	movs	r0, #0
   19f28:	f7e9 fdda 	bl	3ae0 <sdc_cfg_set>
	if (required_memory < 0) {
   19f2c:	2800      	cmp	r0, #0
   19f2e:	db0e      	blt.n	19f4e <configure_memory_usage+0x92>
		cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   19f30:	231f      	movs	r3, #31
   19f32:	f8ad 3004 	strh.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   19f36:	aa01      	add	r2, sp, #4
   19f38:	2107      	movs	r1, #7
   19f3a:	2000      	movs	r0, #0
   19f3c:	f7e9 fdd0 	bl	3ae0 <sdc_cfg_set>
		if (required_memory < 0) {
   19f40:	2800      	cmp	r0, #0
   19f42:	db04      	blt.n	19f4e <configure_memory_usage+0x92>
	if (required_memory > sizeof(sdc_mempool)) {
   19f44:	f640 13d8 	movw	r3, #2520	; 0x9d8
   19f48:	4298      	cmp	r0, r3
   19f4a:	d803      	bhi.n	19f54 <configure_memory_usage+0x98>
	return 0;
   19f4c:	2000      	movs	r0, #0
}
   19f4e:	b003      	add	sp, #12
   19f50:	f85d fb04 	ldr.w	pc, [sp], #4
   19f54:	4a0d      	ldr	r2, [pc, #52]	; (19f8c <configure_memory_usage+0xd0>)
   19f56:	4b0e      	ldr	r3, [pc, #56]	; (19f90 <configure_memory_usage+0xd4>)
   19f58:	1ad2      	subs	r2, r2, r3
   19f5a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   19f5c:	f04f 0300 	mov.w	r3, #0
   19f60:	2101      	movs	r1, #1
   19f62:	f361 0302 	bfi	r3, r1, #0, #3
   19f66:	f36f 03c5 	bfc	r3, #3, #3
   19f6a:	f362 138f 	bfi	r3, r2, #6, #10
   19f6e:	4602      	mov	r2, r0
   19f70:	f640 11d8 	movw	r1, #2520	; 0x9d8
   19f74:	4807      	ldr	r0, [pc, #28]	; (19f94 <configure_memory_usage+0xd8>)
   19f76:	f7f6 fd93 	bl	10aa0 <log_2>
		k_panic();
   19f7a:	4040      	eors	r0, r0
   19f7c:	f380 8811 	msr	BASEPRI, r0
   19f80:	f04f 0004 	mov.w	r0, #4
   19f84:	df02      	svc	2
		return -ENOMEM;
   19f86:	f06f 000b 	mvn.w	r0, #11
   19f8a:	e7e0      	b.n	19f4e <configure_memory_usage+0x92>
   19f8c:	0002201c 	.word	0x0002201c
   19f90:	00021f84 	.word	0x00021f84
   19f94:	00024148 	.word	0x00024148

00019f98 <hci_driver_open>:
{
   19f98:	b530      	push	{r4, r5, lr}
   19f9a:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19f9c:	4d41      	ldr	r5, [pc, #260]	; (1a0a4 <hci_driver_open+0x10c>)
   19f9e:	2200      	movs	r2, #0
   19fa0:	2300      	movs	r3, #0
   19fa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   19fa6:	2400      	movs	r4, #0
   19fa8:	9404      	str	r4, [sp, #16]
   19faa:	f06f 0309 	mvn.w	r3, #9
   19fae:	9303      	str	r3, [sp, #12]
   19fb0:	9402      	str	r4, [sp, #8]
   19fb2:	9401      	str	r4, [sp, #4]
   19fb4:	9400      	str	r4, [sp, #0]
   19fb6:	4b3c      	ldr	r3, [pc, #240]	; (1a0a8 <hci_driver_open+0x110>)
   19fb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19fbc:	493b      	ldr	r1, [pc, #236]	; (1a0ac <hci_driver_open+0x114>)
   19fbe:	4628      	mov	r0, r5
   19fc0:	f007 f8b8 	bl	21134 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19fc4:	493a      	ldr	r1, [pc, #232]	; (1a0b0 <hci_driver_open+0x118>)
   19fc6:	4628      	mov	r0, r5
   19fc8:	f000 fe5a 	bl	1ac80 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   19fcc:	a80b      	add	r0, sp, #44	; 0x2c
   19fce:	f7e9 fd79 	bl	3ac4 <sdc_build_revision_get>
   19fd2:	4a38      	ldr	r2, [pc, #224]	; (1a0b4 <hci_driver_open+0x11c>)
   19fd4:	4b38      	ldr	r3, [pc, #224]	; (1a0b8 <hci_driver_open+0x120>)
   19fd6:	1ad2      	subs	r2, r2, r3
   19fd8:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   19fda:	f04f 0300 	mov.w	r3, #0
   19fde:	2103      	movs	r1, #3
   19fe0:	f361 0302 	bfi	r3, r1, #0, #3
   19fe4:	f364 03c5 	bfi	r3, r4, #3, #3
   19fe8:	f362 138f 	bfi	r3, r2, #6, #10
   19fec:	2214      	movs	r2, #20
   19fee:	a90b      	add	r1, sp, #44	; 0x2c
   19ff0:	4832      	ldr	r0, [pc, #200]	; (1a0bc <hci_driver_open+0x124>)
   19ff2:	f7f6 fdb3 	bl	10b5c <log_hexdump>
	err = configure_supported_features();
   19ff6:	f006 fc23 	bl	20840 <configure_supported_features>
	if (err) {
   19ffa:	b118      	cbz	r0, 1a004 <hci_driver_open+0x6c>
		return -err;
   19ffc:	4244      	negs	r4, r0
}
   19ffe:	4620      	mov	r0, r4
   1a000:	b011      	add	sp, #68	; 0x44
   1a002:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1a004:	f7ff ff5a 	bl	19ebc <configure_memory_usage>
	if (err) {
   1a008:	4604      	mov	r4, r0
   1a00a:	2800      	cmp	r0, #0
   1a00c:	d1f7      	bne.n	19ffe <hci_driver_open+0x66>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1a00e:	482c      	ldr	r0, [pc, #176]	; (1a0c0 <hci_driver_open+0x128>)
   1a010:	f000 fbf4 	bl	1a7fc <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a014:	4b2b      	ldr	r3, [pc, #172]	; (1a0c4 <hci_driver_open+0x12c>)
   1a016:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1a018:	b1a8      	cbz	r0, 1a046 <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   1a01a:	4a2b      	ldr	r2, [pc, #172]	; (1a0c8 <hci_driver_open+0x130>)
   1a01c:	ab08      	add	r3, sp, #32
   1a01e:	ca07      	ldmia	r2, {r0, r1, r2}
   1a020:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1a024:	4618      	mov	r0, r3
   1a026:	f7e9 feeb 	bl	3e00 <sdc_rand_source_register>
	if (err) {
   1a02a:	4604      	mov	r4, r0
   1a02c:	b9f0      	cbnz	r0, 1a06c <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a02e:	f04f 30ff 	mov.w	r0, #4294967295
   1a032:	f04f 31ff 	mov.w	r1, #4294967295
   1a036:	f7ff fdef 	bl	19c18 <multithreading_lock_acquire>
	if (!err) {
   1a03a:	4605      	mov	r5, r0
   1a03c:	b350      	cbz	r0, 1a094 <hci_driver_open+0xfc>
	if (err < 0) {
   1a03e:	2d00      	cmp	r5, #0
   1a040:	dadd      	bge.n	19ffe <hci_driver_open+0x66>
		return err;
   1a042:	462c      	mov	r4, r5
   1a044:	e7db      	b.n	19ffe <hci_driver_open+0x66>
   1a046:	4b1b      	ldr	r3, [pc, #108]	; (1a0b4 <hci_driver_open+0x11c>)
   1a048:	4a1b      	ldr	r2, [pc, #108]	; (1a0b8 <hci_driver_open+0x120>)
   1a04a:	1a9b      	subs	r3, r3, r2
   1a04c:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1a04e:	f04f 0100 	mov.w	r1, #0
   1a052:	2201      	movs	r2, #1
   1a054:	f362 0102 	bfi	r1, r2, #0, #3
   1a058:	f36f 01c5 	bfc	r1, #3, #3
   1a05c:	f363 118f 	bfi	r1, r3, #6, #10
   1a060:	481a      	ldr	r0, [pc, #104]	; (1a0cc <hci_driver_open+0x134>)
   1a062:	f7f6 fd9d 	bl	10ba0 <log_0>
		return -ENODEV;
   1a066:	f06f 0412 	mvn.w	r4, #18
   1a06a:	e7c8      	b.n	19ffe <hci_driver_open+0x66>
   1a06c:	4b11      	ldr	r3, [pc, #68]	; (1a0b4 <hci_driver_open+0x11c>)
   1a06e:	4a12      	ldr	r2, [pc, #72]	; (1a0b8 <hci_driver_open+0x120>)
   1a070:	1a9b      	subs	r3, r3, r2
   1a072:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   1a074:	f04f 0200 	mov.w	r2, #0
   1a078:	2101      	movs	r1, #1
   1a07a:	f361 0202 	bfi	r2, r1, #0, #3
   1a07e:	f36f 02c5 	bfc	r2, #3, #3
   1a082:	f363 128f 	bfi	r2, r3, #6, #10
   1a086:	4601      	mov	r1, r0
   1a088:	4811      	ldr	r0, [pc, #68]	; (1a0d0 <hci_driver_open+0x138>)
   1a08a:	f7f6 fcd3 	bl	10a34 <log_1>
		return -EINVAL;
   1a08e:	f06f 0415 	mvn.w	r4, #21
   1a092:	e7b4      	b.n	19ffe <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   1a094:	490f      	ldr	r1, [pc, #60]	; (1a0d4 <hci_driver_open+0x13c>)
   1a096:	4810      	ldr	r0, [pc, #64]	; (1a0d8 <hci_driver_open+0x140>)
   1a098:	f7e9 fd7a 	bl	3b90 <sdc_enable>
   1a09c:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1a09e:	f7ff fdc5 	bl	19c2c <multithreading_lock_release>
   1a0a2:	e7cc      	b.n	1a03e <hci_driver_open+0xa6>
   1a0a4:	20001a50 	.word	0x20001a50
   1a0a8:	00019e7d 	.word	0x00019e7d
   1a0ac:	20003f20 	.word	0x20003f20
   1a0b0:	0002416c 	.word	0x0002416c
   1a0b4:	0002201c 	.word	0x0002201c
   1a0b8:	00021f84 	.word	0x00021f84
   1a0bc:	00024174 	.word	0x00024174
   1a0c0:	000240b0 	.word	0x000240b0
   1a0c4:	20002114 	.word	0x20002114
   1a0c8:	00022164 	.word	0x00022164
   1a0cc:	0002419c 	.word	0x0002419c
   1a0d0:	000241bc 	.word	0x000241bc
   1a0d4:	20002218 	.word	0x20002218
   1a0d8:	00019cd5 	.word	0x00019cd5

0001a0dc <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a0dc:	4b0b      	ldr	r3, [pc, #44]	; (1a10c <hci_internal_cmd_put+0x30>)
   1a0de:	781b      	ldrb	r3, [r3, #0]
   1a0e0:	b96b      	cbnz	r3, 1a0fe <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1a0e2:	7883      	ldrb	r3, [r0, #2]
   1a0e4:	3303      	adds	r3, #3
   1a0e6:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1a0ea:	dc0b      	bgt.n	1a104 <hci_internal_cmd_put+0x28>
{
   1a0ec:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1a0ee:	4c07      	ldr	r4, [pc, #28]	; (1a10c <hci_internal_cmd_put+0x30>)
   1a0f0:	1c61      	adds	r1, r4, #1
   1a0f2:	f006 fe80 	bl	20df6 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1a0f6:	2301      	movs	r3, #1
   1a0f8:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1a0fa:	2000      	movs	r0, #0
}
   1a0fc:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1a0fe:	f04f 30ff 	mov.w	r0, #4294967295
   1a102:	4770      	bx	lr
		return -EINVAL;
   1a104:	f06f 0015 	mvn.w	r0, #21
}
   1a108:	4770      	bx	lr
   1a10a:	bf00      	nop
   1a10c:	20002bf0 	.word	0x20002bf0

0001a110 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1a110:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1a112:	4b07      	ldr	r3, [pc, #28]	; (1a130 <hci_internal_evt_get+0x20>)
   1a114:	781b      	ldrb	r3, [r3, #0]
   1a116:	b913      	cbnz	r3, 1a11e <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   1a118:	f7f1 ffcf 	bl	c0ba <sdc_hci_evt_get>
}
   1a11c:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1a11e:	4c04      	ldr	r4, [pc, #16]	; (1a130 <hci_internal_evt_get+0x20>)
   1a120:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1a122:	3202      	adds	r2, #2
   1a124:	1c61      	adds	r1, r4, #1
   1a126:	f003 fe7e 	bl	1de26 <memcpy>
		cmd_complete_or_status.occurred = false;
   1a12a:	2000      	movs	r0, #0
   1a12c:	7020      	strb	r0, [r4, #0]
		return 0;
   1a12e:	e7f5      	b.n	1a11c <hci_internal_evt_get+0xc>
   1a130:	20002bf0 	.word	0x20002bf0

0001a134 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1a134:	b538      	push	{r3, r4, r5, lr}
   1a136:	4605      	mov	r5, r0
   1a138:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1a13a:	4b0a      	ldr	r3, [pc, #40]	; (1a164 <bt_rand+0x30>)
   1a13c:	681b      	ldr	r3, [r3, #0]
   1a13e:	b13b      	cbz	r3, 1a150 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1a140:	4b08      	ldr	r3, [pc, #32]	; (1a164 <bt_rand+0x30>)
   1a142:	6818      	ldr	r0, [r3, #0]
   1a144:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1a146:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1a148:	681b      	ldr	r3, [r3, #0]
   1a14a:	4629      	mov	r1, r5
   1a14c:	4798      	blx	r3
}
   1a14e:	bd38      	pop	{r3, r4, r5, pc}
   1a150:	4805      	ldr	r0, [pc, #20]	; (1a168 <bt_rand+0x34>)
   1a152:	f000 fb53 	bl	1a7fc <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1a156:	4b03      	ldr	r3, [pc, #12]	; (1a164 <bt_rand+0x30>)
   1a158:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1a15a:	2800      	cmp	r0, #0
   1a15c:	d1f0      	bne.n	1a140 <bt_rand+0xc>
			return -ENODEV;
   1a15e:	f06f 0012 	mvn.w	r0, #18
   1a162:	e7f4      	b.n	1a14e <bt_rand+0x1a>
   1a164:	20002c38 	.word	0x20002c38
   1a168:	000240b0 	.word	0x000240b0

0001a16c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1a16c:	b510      	push	{r4, lr}
   1a16e:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1a170:	f006 fe98 	bl	20ea4 <m_config_clock_source_get>
   1a174:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1a178:	2332      	movs	r3, #50	; 0x32
   1a17a:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1a17e:	2300      	movs	r3, #0
   1a180:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1a184:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1a188:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1a18c:	4a0c      	ldr	r2, [pc, #48]	; (1a1c0 <mpsl_lib_init+0x54>)
   1a18e:	2119      	movs	r1, #25
   1a190:	4668      	mov	r0, sp
   1a192:	f7e9 faed 	bl	3770 <mpsl_init>
	if (err) {
   1a196:	4604      	mov	r4, r0
   1a198:	b110      	cbz	r0, 1a1a0 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1a19a:	4620      	mov	r0, r4
   1a19c:	b002      	add	sp, #8
   1a19e:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a1a0:	2201      	movs	r2, #1
   1a1a2:	2100      	movs	r1, #0
   1a1a4:	2008      	movs	r0, #8
   1a1a6:	f7f7 fe0f 	bl	11dc8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a1aa:	2201      	movs	r2, #1
   1a1ac:	2100      	movs	r1, #0
   1a1ae:	200b      	movs	r0, #11
   1a1b0:	f7f7 fe0a 	bl	11dc8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1a1b4:	2201      	movs	r2, #1
   1a1b6:	2100      	movs	r1, #0
   1a1b8:	4610      	mov	r0, r2
   1a1ba:	f7f7 fe05 	bl	11dc8 <z_arm_irq_priority_set>
	return 0;
   1a1be:	e7ec      	b.n	1a19a <mpsl_lib_init+0x2e>
   1a1c0:	0001a1c5 	.word	0x0001a1c5

0001a1c4 <m_assert_handler>:
{
   1a1c4:	b538      	push	{r3, r4, r5, lr}
   1a1c6:	460d      	mov	r5, r1
   1a1c8:	4b0d      	ldr	r3, [pc, #52]	; (1a200 <m_assert_handler+0x3c>)
   1a1ca:	4a0e      	ldr	r2, [pc, #56]	; (1a204 <m_assert_handler+0x40>)
   1a1cc:	1a9b      	subs	r3, r3, r2
   1a1ce:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1a1d0:	f04f 0400 	mov.w	r4, #0
   1a1d4:	2201      	movs	r2, #1
   1a1d6:	f362 0402 	bfi	r4, r2, #0, #3
   1a1da:	f36f 04c5 	bfc	r4, #3, #3
   1a1de:	f363 148f 	bfi	r4, r3, #6, #10
   1a1e2:	f7f6 faad 	bl	10740 <z_log_strdup>
   1a1e6:	4601      	mov	r1, r0
   1a1e8:	4623      	mov	r3, r4
   1a1ea:	462a      	mov	r2, r5
   1a1ec:	4806      	ldr	r0, [pc, #24]	; (1a208 <m_assert_handler+0x44>)
   1a1ee:	f7f6 fc57 	bl	10aa0 <log_2>
	k_oops();
   1a1f2:	4040      	eors	r0, r0
   1a1f4:	f380 8811 	msr	BASEPRI, r0
   1a1f8:	f04f 0003 	mov.w	r0, #3
   1a1fc:	df02      	svc	2
}
   1a1fe:	bd38      	pop	{r3, r4, r5, pc}
   1a200:	00021fec 	.word	0x00021fec
   1a204:	00021f84 	.word	0x00021f84
   1a208:	00024240 	.word	0x00024240

0001a20c <signal_thread>:
{
   1a20c:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1a20e:	f04f 34ff 	mov.w	r4, #4294967295
   1a212:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1a216:	4622      	mov	r2, r4
   1a218:	462b      	mov	r3, r5
   1a21a:	4806      	ldr	r0, [pc, #24]	; (1a234 <signal_thread+0x28>)
   1a21c:	f000 ff46 	bl	1b0ac <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a220:	4620      	mov	r0, r4
   1a222:	4629      	mov	r1, r5
   1a224:	f7ff fcf8 	bl	19c18 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1a228:	f7f1 faf3 	bl	b812 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1a22c:	f7ff fcfe 	bl	19c2c <multithreading_lock_release>
	while (true) {
   1a230:	e7ed      	b.n	1a20e <signal_thread+0x2>
   1a232:	bf00      	nop
   1a234:	2000074c 	.word	0x2000074c

0001a238 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1a238:	b530      	push	{r4, r5, lr}
   1a23a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a23c:	4d0f      	ldr	r5, [pc, #60]	; (1a27c <mpsl_signal_thread_init+0x44>)
   1a23e:	2200      	movs	r2, #0
   1a240:	2300      	movs	r3, #0
   1a242:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1a246:	2400      	movs	r4, #0
   1a248:	9404      	str	r4, [sp, #16]
   1a24a:	f06f 0309 	mvn.w	r3, #9
   1a24e:	9303      	str	r3, [sp, #12]
   1a250:	9402      	str	r4, [sp, #8]
   1a252:	9401      	str	r4, [sp, #4]
   1a254:	9400      	str	r4, [sp, #0]
   1a256:	4b0a      	ldr	r3, [pc, #40]	; (1a280 <mpsl_signal_thread_init+0x48>)
   1a258:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a25c:	4909      	ldr	r1, [pc, #36]	; (1a284 <mpsl_signal_thread_init+0x4c>)
   1a25e:	4628      	mov	r0, r5
   1a260:	f006 ff68 	bl	21134 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1a264:	4908      	ldr	r1, [pc, #32]	; (1a288 <mpsl_signal_thread_init+0x50>)
   1a266:	4628      	mov	r0, r5
   1a268:	f000 fd0a 	bl	1ac80 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1a26c:	4622      	mov	r2, r4
   1a26e:	2104      	movs	r1, #4
   1a270:	2019      	movs	r0, #25
   1a272:	f7f7 fda9 	bl	11dc8 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1a276:	4620      	mov	r0, r4
   1a278:	b009      	add	sp, #36	; 0x24
   1a27a:	bd30      	pop	{r4, r5, pc}
   1a27c:	20001b08 	.word	0x20001b08
   1a280:	0001a20d 	.word	0x0001a20d
   1a284:	20004340 	.word	0x20004340
   1a288:	00024254 	.word	0x00024254

0001a28c <mpsl_low_prio_irq_handler>:
{
   1a28c:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1a28e:	4802      	ldr	r0, [pc, #8]	; (1a298 <mpsl_low_prio_irq_handler+0xc>)
   1a290:	f000 fee4 	bl	1b05c <z_impl_k_sem_give>
}
   1a294:	bd08      	pop	{r3, pc}
   1a296:	bf00      	nop
   1a298:	2000074c 	.word	0x2000074c

0001a29c <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1a29c:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1a29e:	4b02      	ldr	r3, [pc, #8]	; (1a2a8 <mpsl_hfclk_callback+0xc>)
   1a2a0:	681b      	ldr	r3, [r3, #0]
   1a2a2:	2000      	movs	r0, #0
   1a2a4:	4798      	blx	r3
}
   1a2a6:	bd08      	pop	{r3, pc}
   1a2a8:	20002c3c 	.word	0x20002c3c

0001a2ac <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1a2ac:	b508      	push	{r3, lr}
	switch (domain) {
   1a2ae:	b128      	cbz	r0, 1a2bc <nrfx_clock_start+0x10>
   1a2b0:	2801      	cmp	r0, #1
   1a2b2:	d102      	bne.n	1a2ba <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1a2b4:	4804      	ldr	r0, [pc, #16]	; (1a2c8 <nrfx_clock_start+0x1c>)
   1a2b6:	f7e9 f8bb 	bl	3430 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1a2ba:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1a2bc:	4b03      	ldr	r3, [pc, #12]	; (1a2cc <nrfx_clock_start+0x20>)
   1a2be:	681b      	ldr	r3, [r3, #0]
   1a2c0:	2001      	movs	r0, #1
   1a2c2:	4798      	blx	r3
}
   1a2c4:	e7f9      	b.n	1a2ba <nrfx_clock_start+0xe>
   1a2c6:	bf00      	nop
   1a2c8:	0001a29d 	.word	0x0001a29d
   1a2cc:	20002c3c 	.word	0x20002c3c

0001a2d0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1a2d0:	4b01      	ldr	r3, [pc, #4]	; (1a2d8 <nrfx_clock_init+0x8>)
   1a2d2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1a2d4:	4801      	ldr	r0, [pc, #4]	; (1a2dc <nrfx_clock_init+0xc>)
   1a2d6:	4770      	bx	lr
   1a2d8:	20002c3c 	.word	0x20002c3c
   1a2dc:	0bad0000 	.word	0x0bad0000

0001a2e0 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a2e0:	4b03      	ldr	r3, [pc, #12]	; (1a2f0 <nrf52_errata_36+0x10>)
   1a2e2:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1a2e4:	2b0d      	cmp	r3, #13
   1a2e6:	d001      	beq.n	1a2ec <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a2e8:	2000      	movs	r0, #0
   1a2ea:	4770      	bx	lr
                        return true;
   1a2ec:	2001      	movs	r0, #1
    #endif
}
   1a2ee:	4770      	bx	lr
   1a2f0:	10000130 	.word	0x10000130

0001a2f4 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a2f4:	4b03      	ldr	r3, [pc, #12]	; (1a304 <nrf52_errata_66+0x10>)
   1a2f6:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1a2f8:	2b0d      	cmp	r3, #13
   1a2fa:	d001      	beq.n	1a300 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a2fc:	2000      	movs	r0, #0
   1a2fe:	4770      	bx	lr
                        return true;
   1a300:	2001      	movs	r0, #1
    #endif
}
   1a302:	4770      	bx	lr
   1a304:	10000130 	.word	0x10000130

0001a308 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a308:	4b03      	ldr	r3, [pc, #12]	; (1a318 <nrf52_errata_136+0x10>)
   1a30a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1a30c:	2b0d      	cmp	r3, #13
   1a30e:	d001      	beq.n	1a314 <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a310:	2000      	movs	r0, #0
   1a312:	4770      	bx	lr
                        return true;
   1a314:	2001      	movs	r0, #1
    #endif
}
   1a316:	4770      	bx	lr
   1a318:	10000130 	.word	0x10000130

0001a31c <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1a31c:	4b06      	ldr	r3, [pc, #24]	; (1a338 <nrf52_errata_249+0x1c>)
   1a31e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1a320:	4a06      	ldr	r2, [pc, #24]	; (1a33c <nrf52_errata_249+0x20>)
   1a322:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1a324:	2b0d      	cmp	r3, #13
   1a326:	d001      	beq.n	1a32c <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1a328:	2000      	movs	r0, #0
   1a32a:	4770      	bx	lr
                switch(var2)
   1a32c:	2a01      	cmp	r2, #1
   1a32e:	d801      	bhi.n	1a334 <nrf52_errata_249+0x18>
   1a330:	2000      	movs	r0, #0
   1a332:	4770      	bx	lr
                        return true;
   1a334:	2001      	movs	r0, #1
    #endif
}
   1a336:	4770      	bx	lr
   1a338:	10000130 	.word	0x10000130
   1a33c:	10000134 	.word	0x10000134

0001a340 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1a340:	4b02      	ldr	r3, [pc, #8]	; (1a34c <nvmc_wait+0xc>)
   1a342:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a346:	2b00      	cmp	r3, #0
   1a348:	d0fa      	beq.n	1a340 <nvmc_wait>
}
   1a34a:	4770      	bx	lr
   1a34c:	4001e000 	.word	0x4001e000

0001a350 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1a350:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1a352:	4b03      	ldr	r3, [pc, #12]	; (1a360 <nvmc_config+0x10>)
   1a354:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1a358:	f7ff fff2 	bl	1a340 <nvmc_wait>
}
   1a35c:	bd08      	pop	{r3, pc}
   1a35e:	bf00      	nop
   1a360:	4001e000 	.word	0x4001e000

0001a364 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1a364:	4b01      	ldr	r3, [pc, #4]	; (1a36c <SystemCoreClockUpdate+0x8>)
   1a366:	4a02      	ldr	r2, [pc, #8]	; (1a370 <SystemCoreClockUpdate+0xc>)
   1a368:	601a      	str	r2, [r3, #0]
}
   1a36a:	4770      	bx	lr
   1a36c:	2000066c 	.word	0x2000066c
   1a370:	03d09000 	.word	0x03d09000

0001a374 <SystemInit>:

void SystemInit(void)
{
   1a374:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1a376:	f7ff ffb3 	bl	1a2e0 <nrf52_errata_36>
   1a37a:	b140      	cbz	r0, 1a38e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1a37c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a380:	2200      	movs	r2, #0
   1a382:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1a386:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1a38a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1a38e:	f7ff ffb1 	bl	1a2f4 <nrf52_errata_66>
   1a392:	2800      	cmp	r0, #0
   1a394:	d046      	beq.n	1a424 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1a396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1a39a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1a39e:	4b45      	ldr	r3, [pc, #276]	; (1a4b4 <SystemInit+0x140>)
   1a3a0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1a3a4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1a3a8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1a3ac:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1a3b0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1a3b4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1a3b8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1a3bc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1a3c0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1a3c4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1a3c8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1a3cc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1a3d0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1a3d4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1a3d8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1a3dc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1a3e0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1a3e4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1a3e8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1a3ec:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1a3f0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1a3f4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1a3f8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1a3fc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1a400:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1a404:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1a408:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1a40c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1a410:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1a414:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1a418:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1a41c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1a420:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1a424:	f7ff ff70 	bl	1a308 <nrf52_errata_136>
   1a428:	b160      	cbz	r0, 1a444 <SystemInit+0xd0>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1a42a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a42e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1a432:	f013 0f01 	tst.w	r3, #1
   1a436:	d005      	beq.n	1a444 <SystemInit+0xd0>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1a438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a43c:	f06f 0201 	mvn.w	r2, #1
   1a440:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1a444:	f7ff ff6a 	bl	1a31c <nrf52_errata_249>
   1a448:	b138      	cbz	r0, 1a45a <SystemInit+0xe6>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1a44a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a44e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1a452:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1a456:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a45a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a45e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1a462:	2b00      	cmp	r3, #0
   1a464:	db08      	blt.n	1a478 <SystemInit+0x104>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1a466:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1a46a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1a46e:	2b00      	cmp	r3, #0
   1a470:	db02      	blt.n	1a478 <SystemInit+0x104>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1a472:	f7ff ff77 	bl	1a364 <SystemCoreClockUpdate>
}
   1a476:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1a478:	2001      	movs	r0, #1
   1a47a:	f7ff ff69 	bl	1a350 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1a47e:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1a482:	2512      	movs	r5, #18
   1a484:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1a488:	f7ff ff5a 	bl	1a340 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1a48c:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1a490:	f7ff ff56 	bl	1a340 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1a494:	2000      	movs	r0, #0
   1a496:	f7ff ff5b 	bl	1a350 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
   1a49a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1a49e:	4906      	ldr	r1, [pc, #24]	; (1a4b8 <SystemInit+0x144>)
   1a4a0:	68ca      	ldr	r2, [r1, #12]
   1a4a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1a4a6:	4b05      	ldr	r3, [pc, #20]	; (1a4bc <SystemInit+0x148>)
   1a4a8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1a4aa:	60cb      	str	r3, [r1, #12]
   1a4ac:	f3bf 8f4f 	dsb	sy
    __NOP();
   1a4b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1a4b2:	e7fd      	b.n	1a4b0 <SystemInit+0x13c>
   1a4b4:	4000c000 	.word	0x4000c000
   1a4b8:	e000ed00 	.word	0xe000ed00
   1a4bc:	05fa0004 	.word	0x05fa0004

0001a4c0 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
   1a4c0:	4b04      	ldr	r3, [pc, #16]	; (1a4d4 <is_allocated_channel+0x14>)
   1a4c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   1a4c4:	2301      	movs	r3, #1
   1a4c6:	4083      	lsls	r3, r0
   1a4c8:	421a      	tst	r2, r3
}
   1a4ca:	bf14      	ite	ne
   1a4cc:	2001      	movne	r0, #1
   1a4ce:	2000      	moveq	r0, #0
   1a4d0:	4770      	bx	lr
   1a4d2:	bf00      	nop
   1a4d4:	20002c40 	.word	0x20002c40

0001a4d8 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
   1a4d8:	2301      	movs	r3, #1
   1a4da:	fa03 f000 	lsl.w	r0, r3, r0
   1a4de:	4a02      	ldr	r2, [pc, #8]	; (1a4e8 <channel_allocated_set+0x10>)
   1a4e0:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1a4e2:	4303      	orrs	r3, r0
   1a4e4:	6593      	str	r3, [r2, #88]	; 0x58
}
   1a4e6:	4770      	bx	lr
   1a4e8:	20002c40 	.word	0x20002c40

0001a4ec <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1a4ec:	2301      	movs	r3, #1
   1a4ee:	fa03 f000 	lsl.w	r0, r3, r0
   1a4f2:	4a03      	ldr	r2, [pc, #12]	; (1a500 <channel_allocated_clr+0x14>)
   1a4f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1a4f6:	ea23 0300 	bic.w	r3, r3, r0
   1a4fa:	6593      	str	r3, [r2, #88]	; 0x58
}
   1a4fc:	4770      	bx	lr
   1a4fe:	bf00      	nop
   1a500:	20002c40 	.word	0x20002c40

0001a504 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   1a504:	b538      	push	{r3, r4, r5, lr}
   1a506:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1a508:	f006 fd0c 	bl	20f24 <is_app_channel>
   1a50c:	b908      	cbnz	r0, 1a512 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1a50e:	4809      	ldr	r0, [pc, #36]	; (1a534 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a510:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a512:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a516:	f3ef 8511 	mrs	r5, BASEPRI
   1a51a:	f383 8812 	msr	BASEPRI_MAX, r3
   1a51e:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
   1a522:	4620      	mov	r0, r4
   1a524:	f7ff ffe2 	bl	1a4ec <channel_allocated_clr>
	__asm__ volatile(
   1a528:	f385 8811 	msr	BASEPRI, r5
   1a52c:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
   1a530:	4801      	ldr	r0, [pc, #4]	; (1a538 <nrfx_gpiote_channel_free+0x34>)
}
   1a532:	e7ed      	b.n	1a510 <nrfx_gpiote_channel_free+0xc>
   1a534:	0bad0004 	.word	0x0bad0004
   1a538:	0bad0000 	.word	0x0bad0000

0001a53c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1a53c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a540:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a542:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1a544:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1a546:	4f17      	ldr	r7, [pc, #92]	; (1a5a4 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a548:	e013      	b.n	1a572 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
   1a54a:	4620      	mov	r0, r4
   1a54c:	f7ff ffc4 	bl	1a4d8 <channel_allocated_set>
            *p_channel = ch_idx;
   1a550:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
   1a554:	4f14      	ldr	r7, [pc, #80]	; (1a5a8 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
   1a556:	f386 8811 	msr	BASEPRI, r6
   1a55a:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1a55e:	4b12      	ldr	r3, [pc, #72]	; (1a5a8 <nrfx_gpiote_channel_alloc+0x6c>)
   1a560:	429f      	cmp	r7, r3
   1a562:	d01b      	beq.n	1a59c <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1a564:	2301      	movs	r3, #1
   1a566:	fa03 f309 	lsl.w	r3, r3, r9
   1a56a:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1a56e:	3401      	adds	r4, #1
   1a570:	b2e4      	uxtb	r4, r4
   1a572:	b19d      	cbz	r5, 1a59c <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
   1a574:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a578:	f3ef 8611 	mrs	r6, BASEPRI
   1a57c:	f383 8812 	msr	BASEPRI_MAX, r3
   1a580:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1a584:	46a1      	mov	r9, r4
   1a586:	fa25 f304 	lsr.w	r3, r5, r4
   1a58a:	f013 0f01 	tst.w	r3, #1
   1a58e:	d0e2      	beq.n	1a556 <nrfx_gpiote_channel_alloc+0x1a>
   1a590:	4620      	mov	r0, r4
   1a592:	f7ff ff95 	bl	1a4c0 <is_allocated_channel>
   1a596:	2800      	cmp	r0, #0
   1a598:	d1dd      	bne.n	1a556 <nrfx_gpiote_channel_alloc+0x1a>
   1a59a:	e7d6      	b.n	1a54a <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a59c:	4638      	mov	r0, r7
   1a59e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a5a2:	bf00      	nop
   1a5a4:	0bad0002 	.word	0x0bad0002
   1a5a8:	0bad0000 	.word	0x0bad0000

0001a5ac <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1a5ac:	2301      	movs	r3, #1
   1a5ae:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1a5b0:	4a03      	ldr	r2, [pc, #12]	; (1a5c0 <is_allocated_channel+0x14>)
   1a5b2:	6812      	ldr	r2, [r2, #0]
   1a5b4:	4213      	tst	r3, r2
}
   1a5b6:	bf14      	ite	ne
   1a5b8:	2001      	movne	r0, #1
   1a5ba:	2000      	moveq	r0, #0
   1a5bc:	4770      	bx	lr
   1a5be:	bf00      	nop
   1a5c0:	20002c9c 	.word	0x20002c9c

0001a5c4 <channel_allocated_set>:
   1a5c4:	2301      	movs	r3, #1
   1a5c6:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1a5ca:	4a02      	ldr	r2, [pc, #8]	; (1a5d4 <channel_allocated_set+0x10>)
   1a5cc:	6813      	ldr	r3, [r2, #0]
   1a5ce:	4303      	orrs	r3, r0
   1a5d0:	6013      	str	r3, [r2, #0]
}
   1a5d2:	4770      	bx	lr
   1a5d4:	20002c9c 	.word	0x20002c9c

0001a5d8 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1a5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a5dc:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1a5de:	4b18      	ldr	r3, [pc, #96]	; (1a640 <nrfx_ppi_channel_alloc+0x68>)
   1a5e0:	681e      	ldr	r6, [r3, #0]
   1a5e2:	43f6      	mvns	r6, r6
   1a5e4:	f3c6 0613 	ubfx	r6, r6, #0, #20

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a5e8:	2400      	movs	r4, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1a5ea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1a648 <nrfx_ppi_channel_alloc+0x70>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a5ee:	e011      	b.n	1a614 <nrfx_ppi_channel_alloc+0x3c>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
   1a5f0:	4620      	mov	r0, r4
   1a5f2:	f7ff ffe7 	bl	1a5c4 <channel_allocated_set>
            *p_channel = channel;
   1a5f6:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
   1a5fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1a644 <nrfx_ppi_channel_alloc+0x6c>
	__asm__ volatile(
   1a5fe:	f387 8811 	msr	BASEPRI, r7
   1a602:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
   1a606:	4b0f      	ldr	r3, [pc, #60]	; (1a644 <nrfx_ppi_channel_alloc+0x6c>)
   1a608:	4598      	cmp	r8, r3
   1a60a:	d016      	beq.n	1a63a <nrfx_ppi_channel_alloc+0x62>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1a60c:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1a610:	3401      	adds	r4, #1
   1a612:	b2e4      	uxtb	r4, r4
   1a614:	b18e      	cbz	r6, 1a63a <nrfx_ppi_channel_alloc+0x62>
	__asm__ volatile(
   1a616:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a61a:	f3ef 8711 	mrs	r7, BASEPRI
   1a61e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a622:	f3bf 8f6f 	isb	sy
   1a626:	2501      	movs	r5, #1
   1a628:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1a62a:	4235      	tst	r5, r6
   1a62c:	d0e7      	beq.n	1a5fe <nrfx_ppi_channel_alloc+0x26>
   1a62e:	4620      	mov	r0, r4
   1a630:	f7ff ffbc 	bl	1a5ac <is_allocated_channel>
   1a634:	2800      	cmp	r0, #0
   1a636:	d1e2      	bne.n	1a5fe <nrfx_ppi_channel_alloc+0x26>
   1a638:	e7da      	b.n	1a5f0 <nrfx_ppi_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1a63a:	4640      	mov	r0, r8
   1a63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a640:	0002421c 	.word	0x0002421c
   1a644:	0bad0000 	.word	0x0bad0000
   1a648:	0bad0002 	.word	0x0bad0002

0001a64c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1a64c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1a64e:	4c11      	ldr	r4, [pc, #68]	; (1a694 <_DoInit+0x48>)
   1a650:	2303      	movs	r3, #3
   1a652:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1a654:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1a656:	4a10      	ldr	r2, [pc, #64]	; (1a698 <_DoInit+0x4c>)
   1a658:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1a65a:	4b10      	ldr	r3, [pc, #64]	; (1a69c <_DoInit+0x50>)
   1a65c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1a65e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1a662:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1a664:	2300      	movs	r3, #0
   1a666:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1a668:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a66a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   1a66c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1a66e:	4a0c      	ldr	r2, [pc, #48]	; (1a6a0 <_DoInit+0x54>)
   1a670:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1a672:	2210      	movs	r2, #16
   1a674:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1a676:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1a678:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1a67a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1a67c:	4909      	ldr	r1, [pc, #36]	; (1a6a4 <_DoInit+0x58>)
   1a67e:	1de0      	adds	r0, r4, #7
   1a680:	f003 fb7b 	bl	1dd7a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1a684:	4908      	ldr	r1, [pc, #32]	; (1a6a8 <_DoInit+0x5c>)
   1a686:	4620      	mov	r0, r4
   1a688:	f003 fb77 	bl	1dd7a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1a68c:	2320      	movs	r3, #32
   1a68e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1a690:	bd10      	pop	{r4, pc}
   1a692:	bf00      	nop
   1a694:	20002ca0 	.word	0x20002ca0
   1a698:	0002426c 	.word	0x0002426c
   1a69c:	20002d58 	.word	0x20002d58
   1a6a0:	20002d48 	.word	0x20002d48
   1a6a4:	00024278 	.word	0x00024278
   1a6a8:	0002427c 	.word	0x0002427c

0001a6ac <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1a6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a6b0:	4604      	mov	r4, r0
   1a6b2:	460e      	mov	r6, r1
   1a6b4:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1a6b6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1a6ba:	4a2d      	ldr	r2, [pc, #180]	; (1a770 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1a6bc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   1a6c0:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1a6c2:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1a6c4:	42bb      	cmp	r3, r7
   1a6c6:	d84b      	bhi.n	1a760 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1a6c8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a6cc:	4928      	ldr	r1, [pc, #160]	; (1a770 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1a6ce:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   1a6d2:	f8d2 8020 	ldr.w	r8, [r2, #32]
   1a6d6:	eba8 0907 	sub.w	r9, r8, r7
   1a6da:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1a6de:	4295      	cmp	r5, r2
   1a6e0:	d904      	bls.n	1a6ec <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
   1a6e2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1a6e4:	429d      	cmp	r5, r3
   1a6e6:	d916      	bls.n	1a716 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
   1a6e8:	2000      	movs	r0, #0
   1a6ea:	e03e      	b.n	1a76a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a6ec:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1a770 <SEGGER_RTT_WriteSkipNoLock+0xc4>
   1a6f0:	1c63      	adds	r3, r4, #1
   1a6f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a6f6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   1a6fa:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1a6fc:	462a      	mov	r2, r5
   1a6fe:	4631      	mov	r1, r6
   1a700:	4438      	add	r0, r7
   1a702:	f003 fb90 	bl	1de26 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   1a706:	443d      	add	r5, r7
   1a708:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a70c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
   1a710:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
   1a712:	2001      	movs	r0, #1
   1a714:	e029      	b.n	1a76a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1a716:	1c43      	adds	r3, r0, #1
   1a718:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a71c:	4a14      	ldr	r2, [pc, #80]	; (1a770 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1a71e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1a722:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1a724:	464a      	mov	r2, r9
   1a726:	4631      	mov	r1, r6
   1a728:	4438      	add	r0, r7
   1a72a:	f003 fb7c 	bl	1de26 <memcpy>
      NumBytes -= Rem;
   1a72e:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
   1a732:	197f      	adds	r7, r7, r5
   1a734:	d107      	bne.n	1a746 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
   1a736:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a73a:	4b0d      	ldr	r3, [pc, #52]	; (1a770 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1a73c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   1a740:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
   1a742:	2001      	movs	r0, #1
   1a744:	e011      	b.n	1a76a <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
   1a746:	1c63      	adds	r3, r4, #1
   1a748:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1a74c:	4a08      	ldr	r2, [pc, #32]	; (1a770 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
   1a74e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1a752:	463a      	mov	r2, r7
   1a754:	eb06 0109 	add.w	r1, r6, r9
   1a758:	6858      	ldr	r0, [r3, #4]
   1a75a:	f003 fb64 	bl	1de26 <memcpy>
   1a75e:	e7ea      	b.n	1a736 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
   1a760:	1bdb      	subs	r3, r3, r7
   1a762:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1a764:	42ab      	cmp	r3, r5
   1a766:	d2c1      	bcs.n	1a6ec <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
   1a768:	2000      	movs	r0, #0
}
   1a76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a76e:	bf00      	nop
   1a770:	20002ca0 	.word	0x20002ca0

0001a774 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1a774:	4b06      	ldr	r3, [pc, #24]	; (1a790 <SEGGER_RTT_HasDataUp+0x1c>)
   1a776:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1a77a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   1a77e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
   1a780:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1a784:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a788:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   1a78a:	1a80      	subs	r0, r0, r2
   1a78c:	4770      	bx	lr
   1a78e:	bf00      	nop
   1a790:	20002ca0 	.word	0x20002ca0

0001a794 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   1a794:	4b03      	ldr	r3, [pc, #12]	; (1a7a4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   1a796:	4a04      	ldr	r2, [pc, #16]	; (1a7a8 <z_device_state_init+0x14>)
   1a798:	4293      	cmp	r3, r2
   1a79a:	d201      	bcs.n	1a7a0 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   1a79c:	3318      	adds	r3, #24
   1a79e:	e7fa      	b.n	1a796 <z_device_state_init+0x2>
	}
}
   1a7a0:	4770      	bx	lr
   1a7a2:	bf00      	nop
   1a7a4:	00021d0c 	.word	0x00021d0c
   1a7a8:	00021db4 	.word	0x00021db4

0001a7ac <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1a7ac:	b570      	push	{r4, r5, r6, lr}
   1a7ae:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a7b0:	4b11      	ldr	r3, [pc, #68]	; (1a7f8 <z_sys_init_run_level+0x4c>)
   1a7b2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1a7b6:	e009      	b.n	1a7cc <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   1a7b8:	4240      	negs	r0, r0
   1a7ba:	e017      	b.n	1a7ec <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   1a7bc:	68eb      	ldr	r3, [r5, #12]
   1a7be:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   1a7c0:	68ea      	ldr	r2, [r5, #12]
   1a7c2:	7853      	ldrb	r3, [r2, #1]
   1a7c4:	f043 0301 	orr.w	r3, r3, #1
   1a7c8:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1a7ca:	3408      	adds	r4, #8
   1a7cc:	1c73      	adds	r3, r6, #1
   1a7ce:	4a0a      	ldr	r2, [pc, #40]	; (1a7f8 <z_sys_init_run_level+0x4c>)
   1a7d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a7d4:	42a3      	cmp	r3, r4
   1a7d6:	d90d      	bls.n	1a7f4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   1a7d8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   1a7da:	6823      	ldr	r3, [r4, #0]
   1a7dc:	4628      	mov	r0, r5
   1a7de:	4798      	blx	r3
		if (dev != NULL) {
   1a7e0:	2d00      	cmp	r5, #0
   1a7e2:	d0f2      	beq.n	1a7ca <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   1a7e4:	2800      	cmp	r0, #0
   1a7e6:	d0eb      	beq.n	1a7c0 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   1a7e8:	2800      	cmp	r0, #0
   1a7ea:	dbe5      	blt.n	1a7b8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   1a7ec:	28ff      	cmp	r0, #255	; 0xff
   1a7ee:	dde5      	ble.n	1a7bc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   1a7f0:	20ff      	movs	r0, #255	; 0xff
   1a7f2:	e7e3      	b.n	1a7bc <z_sys_init_run_level+0x10>
		}
	}
}
   1a7f4:	bd70      	pop	{r4, r5, r6, pc}
   1a7f6:	bf00      	nop
   1a7f8:	00024284 	.word	0x00024284

0001a7fc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   1a7fc:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   1a7fe:	4605      	mov	r5, r0
   1a800:	b328      	cbz	r0, 1a84e <z_impl_device_get_binding+0x52>
   1a802:	7803      	ldrb	r3, [r0, #0]
   1a804:	b32b      	cbz	r3, 1a852 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1a806:	4c14      	ldr	r4, [pc, #80]	; (1a858 <z_impl_device_get_binding+0x5c>)
   1a808:	e000      	b.n	1a80c <z_impl_device_get_binding+0x10>
   1a80a:	3418      	adds	r4, #24
   1a80c:	4b13      	ldr	r3, [pc, #76]	; (1a85c <z_impl_device_get_binding+0x60>)
   1a80e:	429c      	cmp	r4, r3
   1a810:	d008      	beq.n	1a824 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a812:	4620      	mov	r0, r4
   1a814:	f006 fb97 	bl	20f46 <z_device_ready>
   1a818:	2800      	cmp	r0, #0
   1a81a:	d0f6      	beq.n	1a80a <z_impl_device_get_binding+0xe>
   1a81c:	6823      	ldr	r3, [r4, #0]
   1a81e:	42ab      	cmp	r3, r5
   1a820:	d1f3      	bne.n	1a80a <z_impl_device_get_binding+0xe>
   1a822:	e012      	b.n	1a84a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1a824:	4c0c      	ldr	r4, [pc, #48]	; (1a858 <z_impl_device_get_binding+0x5c>)
   1a826:	e000      	b.n	1a82a <z_impl_device_get_binding+0x2e>
   1a828:	3418      	adds	r4, #24
   1a82a:	4b0c      	ldr	r3, [pc, #48]	; (1a85c <z_impl_device_get_binding+0x60>)
   1a82c:	429c      	cmp	r4, r3
   1a82e:	d00b      	beq.n	1a848 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a830:	4620      	mov	r0, r4
   1a832:	f006 fb88 	bl	20f46 <z_device_ready>
   1a836:	2800      	cmp	r0, #0
   1a838:	d0f6      	beq.n	1a828 <z_impl_device_get_binding+0x2c>
   1a83a:	6821      	ldr	r1, [r4, #0]
   1a83c:	4628      	mov	r0, r5
   1a83e:	f003 fad1 	bl	1dde4 <strcmp>
   1a842:	2800      	cmp	r0, #0
   1a844:	d1f0      	bne.n	1a828 <z_impl_device_get_binding+0x2c>
   1a846:	e000      	b.n	1a84a <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   1a848:	2400      	movs	r4, #0
}
   1a84a:	4620      	mov	r0, r4
   1a84c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   1a84e:	4604      	mov	r4, r0
   1a850:	e7fb      	b.n	1a84a <z_impl_device_get_binding+0x4e>
   1a852:	2400      	movs	r4, #0
   1a854:	e7f9      	b.n	1a84a <z_impl_device_get_binding+0x4e>
   1a856:	bf00      	nop
   1a858:	00021d0c 	.word	0x00021d0c
   1a85c:	00021db4 	.word	0x00021db4

0001a860 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   1a860:	2804      	cmp	r0, #4
   1a862:	d80c      	bhi.n	1a87e <reason_to_str+0x1e>
   1a864:	e8df f000 	tbb	[pc, r0]
   1a868:	07050d03 	.word	0x07050d03
   1a86c:	09          	.byte	0x09
   1a86d:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   1a86e:	4806      	ldr	r0, [pc, #24]	; (1a888 <reason_to_str+0x28>)
   1a870:	4770      	bx	lr
		return "Stack overflow";
   1a872:	4806      	ldr	r0, [pc, #24]	; (1a88c <reason_to_str+0x2c>)
   1a874:	4770      	bx	lr
		return "Kernel oops";
   1a876:	4806      	ldr	r0, [pc, #24]	; (1a890 <reason_to_str+0x30>)
   1a878:	4770      	bx	lr
		return "Kernel panic";
   1a87a:	4806      	ldr	r0, [pc, #24]	; (1a894 <reason_to_str+0x34>)
   1a87c:	4770      	bx	lr
	default:
		return "Unknown error";
   1a87e:	4806      	ldr	r0, [pc, #24]	; (1a898 <reason_to_str+0x38>)
   1a880:	4770      	bx	lr
		return "Unhandled interrupt";
   1a882:	4806      	ldr	r0, [pc, #24]	; (1a89c <reason_to_str+0x3c>)
	}
}
   1a884:	4770      	bx	lr
   1a886:	bf00      	nop
   1a888:	000242ec 	.word	0x000242ec
   1a88c:	000242c0 	.word	0x000242c0
   1a890:	000242d0 	.word	0x000242d0
   1a894:	000242dc 	.word	0x000242dc
   1a898:	0002429c 	.word	0x0002429c
   1a89c:	000242ac 	.word	0x000242ac

0001a8a0 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1a8a0:	b130      	cbz	r0, 1a8b0 <thread_name_get+0x10>
{
   1a8a2:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1a8a4:	f006 fc35 	bl	21112 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1a8a8:	b120      	cbz	r0, 1a8b4 <thread_name_get+0x14>
   1a8aa:	7803      	ldrb	r3, [r0, #0]
   1a8ac:	b123      	cbz	r3, 1a8b8 <thread_name_get+0x18>
}
   1a8ae:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   1a8b0:	4802      	ldr	r0, [pc, #8]	; (1a8bc <thread_name_get+0x1c>)
}
   1a8b2:	4770      	bx	lr
		thread_name = "unknown";
   1a8b4:	4801      	ldr	r0, [pc, #4]	; (1a8bc <thread_name_get+0x1c>)
   1a8b6:	e7fa      	b.n	1a8ae <thread_name_get+0xe>
   1a8b8:	4800      	ldr	r0, [pc, #0]	; (1a8bc <thread_name_get+0x1c>)
	return thread_name;
   1a8ba:	e7f8      	b.n	1a8ae <thread_name_get+0xe>
   1a8bc:	00022d40 	.word	0x00022d40

0001a8c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8c4:	b082      	sub	sp, #8
   1a8c6:	4605      	mov	r5, r0
   1a8c8:	460e      	mov	r6, r1
   1a8ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a8ce:	f3ef 8711 	mrs	r7, BASEPRI
   1a8d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a8d6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1a8da:	f001 f99d 	bl	1bc18 <z_impl_z_current_get>
   1a8de:	4604      	mov	r4, r0
   1a8e0:	4b29      	ldr	r3, [pc, #164]	; (1a988 <z_fatal_error+0xc8>)
   1a8e2:	4a2a      	ldr	r2, [pc, #168]	; (1a98c <z_fatal_error+0xcc>)
   1a8e4:	1a9b      	subs	r3, r3, r2
   1a8e6:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1a8e8:	f04f 0800 	mov.w	r8, #0
   1a8ec:	2201      	movs	r2, #1
   1a8ee:	f362 0802 	bfi	r8, r2, #0, #3
   1a8f2:	f36f 08c5 	bfc	r8, #3, #3
   1a8f6:	f363 188f 	bfi	r8, r3, #6, #10
   1a8fa:	4628      	mov	r0, r5
   1a8fc:	f7ff ffb0 	bl	1a860 <reason_to_str>
   1a900:	4602      	mov	r2, r0
   1a902:	f8ad 8000 	strh.w	r8, [sp]
   1a906:	2300      	movs	r3, #0
   1a908:	4629      	mov	r1, r5
   1a90a:	4821      	ldr	r0, [pc, #132]	; (1a990 <z_fatal_error+0xd0>)
   1a90c:	f7f6 f854 	bl	109b8 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1a910:	b11e      	cbz	r6, 1a91a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1a912:	69f3      	ldr	r3, [r6, #28]
   1a914:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1a918:	bb2b      	cbnz	r3, 1a966 <z_fatal_error+0xa6>
   1a91a:	4b1b      	ldr	r3, [pc, #108]	; (1a988 <z_fatal_error+0xc8>)
   1a91c:	4a1b      	ldr	r2, [pc, #108]	; (1a98c <z_fatal_error+0xcc>)
   1a91e:	1a9b      	subs	r3, r3, r2
   1a920:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1a922:	f04f 0800 	mov.w	r8, #0
   1a926:	2201      	movs	r2, #1
   1a928:	f362 0802 	bfi	r8, r2, #0, #3
   1a92c:	f36f 08c5 	bfc	r8, #3, #3
   1a930:	f363 188f 	bfi	r8, r3, #6, #10
   1a934:	4620      	mov	r0, r4
   1a936:	f7ff ffb3 	bl	1a8a0 <thread_name_get>
   1a93a:	f7f5 ff01 	bl	10740 <z_log_strdup>
   1a93e:	4602      	mov	r2, r0
   1a940:	4643      	mov	r3, r8
   1a942:	4621      	mov	r1, r4
   1a944:	4813      	ldr	r0, [pc, #76]	; (1a994 <z_fatal_error+0xd4>)
   1a946:	f7f6 f8ab 	bl	10aa0 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1a94a:	4631      	mov	r1, r6
   1a94c:	4628      	mov	r0, r5
   1a94e:	f7ff f975 	bl	19c3c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a952:	f387 8811 	msr	BASEPRI, r7
   1a956:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a95a:	4620      	mov	r0, r4
   1a95c:	f7f7 ffac 	bl	128b8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1a960:	b002      	add	sp, #8
   1a962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a966:	4b08      	ldr	r3, [pc, #32]	; (1a988 <z_fatal_error+0xc8>)
   1a968:	4a08      	ldr	r2, [pc, #32]	; (1a98c <z_fatal_error+0xcc>)
   1a96a:	1a9b      	subs	r3, r3, r2
   1a96c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   1a96e:	f04f 0100 	mov.w	r1, #0
   1a972:	2201      	movs	r2, #1
   1a974:	f362 0102 	bfi	r1, r2, #0, #3
   1a978:	f36f 01c5 	bfc	r1, #3, #3
   1a97c:	f363 118f 	bfi	r1, r3, #6, #10
   1a980:	4805      	ldr	r0, [pc, #20]	; (1a998 <z_fatal_error+0xd8>)
   1a982:	f7f6 f90d 	bl	10ba0 <log_0>
   1a986:	e7c8      	b.n	1a91a <z_fatal_error+0x5a>
   1a988:	00022004 	.word	0x00022004
   1a98c:	00021f84 	.word	0x00021f84
   1a990:	000242fc 	.word	0x000242fc
   1a994:	00024348 	.word	0x00024348
   1a998:	00024324 	.word	0x00024324

0001a99c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   1a99c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a99e:	b089      	sub	sp, #36	; 0x24
   1a9a0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   1a9a2:	4b15      	ldr	r3, [pc, #84]	; (1a9f8 <init_idle_thread+0x5c>)
   1a9a4:	25b8      	movs	r5, #184	; 0xb8
   1a9a6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   1a9aa:	4b14      	ldr	r3, [pc, #80]	; (1a9fc <init_idle_thread+0x60>)
   1a9ac:	f44f 76b0 	mov.w	r6, #352	; 0x160
   1a9b0:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   1a9b4:	af06      	add	r7, sp, #24
   1a9b6:	4603      	mov	r3, r0
   1a9b8:	4a11      	ldr	r2, [pc, #68]	; (1aa00 <init_idle_thread+0x64>)
   1a9ba:	2108      	movs	r1, #8
   1a9bc:	4638      	mov	r0, r7
   1a9be:	f001 ff03 	bl	1c7c8 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1a9c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1a9c6:	480f      	ldr	r0, [pc, #60]	; (1aa04 <init_idle_thread+0x68>)
   1a9c8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   1a9cc:	9705      	str	r7, [sp, #20]
   1a9ce:	2301      	movs	r3, #1
   1a9d0:	9304      	str	r3, [sp, #16]
   1a9d2:	230f      	movs	r3, #15
   1a9d4:	9303      	str	r3, [sp, #12]
   1a9d6:	2300      	movs	r3, #0
   1a9d8:	9302      	str	r3, [sp, #8]
   1a9da:	9301      	str	r3, [sp, #4]
   1a9dc:	9400      	str	r4, [sp, #0]
   1a9de:	4b0a      	ldr	r3, [pc, #40]	; (1aa08 <init_idle_thread+0x6c>)
   1a9e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a9e4:	4631      	mov	r1, r6
   1a9e6:	4628      	mov	r0, r5
   1a9e8:	f000 f96e 	bl	1acc8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a9ec:	7b6b      	ldrb	r3, [r5, #13]
   1a9ee:	f023 0304 	bic.w	r3, r3, #4
   1a9f2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   1a9f4:	b009      	add	sp, #36	; 0x24
   1a9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a9f8:	20001bc0 	.word	0x20001bc0
   1a9fc:	20004b80 	.word	0x20004b80
   1aa00:	00024360 	.word	0x00024360
   1aa04:	20003158 	.word	0x20003158
   1aa08:	00021185 	.word	0x00021185

0001aa0c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   1aa0c:	b570      	push	{r4, r5, r6, lr}
   1aa0e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   1aa10:	f001 f834 	bl	1ba7c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   1aa14:	4d1b      	ldr	r5, [pc, #108]	; (1aa84 <prepare_multithreading+0x78>)
   1aa16:	4b1c      	ldr	r3, [pc, #112]	; (1aa88 <prepare_multithreading+0x7c>)
   1aa18:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1aa1a:	4b1c      	ldr	r3, [pc, #112]	; (1aa8c <prepare_multithreading+0x80>)
   1aa1c:	9305      	str	r3, [sp, #20]
   1aa1e:	2301      	movs	r3, #1
   1aa20:	9304      	str	r3, [sp, #16]
   1aa22:	2400      	movs	r4, #0
   1aa24:	9403      	str	r4, [sp, #12]
   1aa26:	9402      	str	r4, [sp, #8]
   1aa28:	9401      	str	r4, [sp, #4]
   1aa2a:	9400      	str	r4, [sp, #0]
   1aa2c:	4b18      	ldr	r3, [pc, #96]	; (1aa90 <prepare_multithreading+0x84>)
   1aa2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1aa32:	4918      	ldr	r1, [pc, #96]	; (1aa94 <prepare_multithreading+0x88>)
   1aa34:	4628      	mov	r0, r5
   1aa36:	f000 f947 	bl	1acc8 <z_setup_new_thread>
   1aa3a:	4606      	mov	r6, r0
   1aa3c:	7b6b      	ldrb	r3, [r5, #13]
   1aa3e:	f023 0304 	bic.w	r3, r3, #4
   1aa42:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   1aa44:	4628      	mov	r0, r5
   1aa46:	f006 fe4e 	bl	216e6 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1aa4a:	2c00      	cmp	r4, #0
   1aa4c:	dd02      	ble.n	1aa54 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   1aa4e:	4630      	mov	r0, r6
   1aa50:	b006      	add	sp, #24
   1aa52:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   1aa54:	4620      	mov	r0, r4
   1aa56:	f7ff ffa1 	bl	1a99c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1aa5a:	4b0f      	ldr	r3, [pc, #60]	; (1aa98 <prepare_multithreading+0x8c>)
   1aa5c:	22b8      	movs	r2, #184	; 0xb8
   1aa5e:	fb02 3204 	mla	r2, r2, r4, r3
   1aa62:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   1aa66:	4b08      	ldr	r3, [pc, #32]	; (1aa88 <prepare_multithreading+0x7c>)
   1aa68:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   1aa6c:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   1aa6e:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   1aa70:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   1aa74:	4a09      	ldr	r2, [pc, #36]	; (1aa9c <prepare_multithreading+0x90>)
   1aa76:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   1aa7a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   1aa7e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   1aa80:	3401      	adds	r4, #1
   1aa82:	e7e2      	b.n	1aa4a <prepare_multithreading+0x3e>
   1aa84:	20001c78 	.word	0x20001c78
   1aa88:	20003158 	.word	0x20003158
   1aa8c:	0002436c 	.word	0x0002436c
   1aa90:	0001aaa1 	.word	0x0001aaa1
   1aa94:	20004760 	.word	0x20004760
   1aa98:	20001bc0 	.word	0x20001bc0
   1aa9c:	20004ce0 	.word	0x20004ce0

0001aaa0 <bg_thread_main>:
{
   1aaa0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   1aaa2:	4b0a      	ldr	r3, [pc, #40]	; (1aacc <bg_thread_main+0x2c>)
   1aaa4:	2201      	movs	r2, #1
   1aaa6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1aaa8:	2002      	movs	r0, #2
   1aaaa:	f7ff fe7f 	bl	1a7ac <z_sys_init_run_level>
	boot_banner();
   1aaae:	f001 fe1d 	bl	1c6ec <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1aab2:	2003      	movs	r0, #3
   1aab4:	f7ff fe7a 	bl	1a7ac <z_sys_init_run_level>
	z_init_static_threads();
   1aab8:	f000 f96a 	bl	1ad90 <z_init_static_threads>
	main();
   1aabc:	f7f4 fefc 	bl	f8b8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1aac0:	4a03      	ldr	r2, [pc, #12]	; (1aad0 <bg_thread_main+0x30>)
   1aac2:	7b13      	ldrb	r3, [r2, #12]
   1aac4:	f023 0301 	bic.w	r3, r3, #1
   1aac8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1aaca:	bd08      	pop	{r3, pc}
   1aacc:	200031a6 	.word	0x200031a6
   1aad0:	20001c78 	.word	0x20001c78

0001aad4 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   1aad4:	b508      	push	{r3, lr}
   1aad6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1aad8:	4a01      	ldr	r2, [pc, #4]	; (1aae0 <switch_to_main_thread+0xc>)
   1aada:	4802      	ldr	r0, [pc, #8]	; (1aae4 <switch_to_main_thread+0x10>)
   1aadc:	f7f7 fa66 	bl	11fac <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1aae0:	0001aaa1 	.word	0x0001aaa1
   1aae4:	20001c78 	.word	0x20001c78

0001aae8 <z_bss_zero>:
{
   1aae8:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1aaea:	4803      	ldr	r0, [pc, #12]	; (1aaf8 <z_bss_zero+0x10>)
   1aaec:	4a03      	ldr	r2, [pc, #12]	; (1aafc <z_bss_zero+0x14>)
   1aaee:	1a12      	subs	r2, r2, r0
   1aaf0:	2100      	movs	r1, #0
   1aaf2:	f003 f9bc 	bl	1de6e <memset>
}
   1aaf6:	bd08      	pop	{r3, pc}
   1aaf8:	20000870 	.word	0x20000870
   1aafc:	200031a8 	.word	0x200031a8

0001ab00 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1ab00:	b500      	push	{lr}
   1ab02:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1ab04:	f7f5 fd3e 	bl	10584 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1ab08:	4b1d      	ldr	r3, [pc, #116]	; (1ab80 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1ab0a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1ab0e:	4c1d      	ldr	r4, [pc, #116]	; (1ab84 <z_cstart+0x84>)
   1ab10:	6963      	ldr	r3, [r4, #20]
   1ab12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1ab16:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ab18:	23e0      	movs	r3, #224	; 0xe0
   1ab1a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1ab1e:	2320      	movs	r3, #32
   1ab20:	77e3      	strb	r3, [r4, #31]
   1ab22:	2500      	movs	r5, #0
   1ab24:	7625      	strb	r5, [r4, #24]
   1ab26:	7665      	strb	r5, [r4, #25]
   1ab28:	76a5      	strb	r5, [r4, #26]
   1ab2a:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1ab2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ab30:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1ab34:	6263      	str	r3, [r4, #36]	; 0x24
   1ab36:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1ab3a:	f7f7 fe2d 	bl	12798 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1ab3e:	f7f7 f8a5 	bl	11c8c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1ab42:	f04f 33ff 	mov.w	r3, #4294967295
   1ab46:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1ab48:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1ab4a:	f7f7 ff91 	bl	12a70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1ab4e:	f7f7 fec9 	bl	128e4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   1ab52:	2401      	movs	r4, #1
   1ab54:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   1ab58:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   1ab5c:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   1ab5e:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1ab60:	4b09      	ldr	r3, [pc, #36]	; (1ab88 <z_cstart+0x88>)
   1ab62:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1ab66:	f7ff fe15 	bl	1a794 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1ab6a:	4628      	mov	r0, r5
   1ab6c:	f7ff fe1e 	bl	1a7ac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1ab70:	4620      	mov	r0, r4
   1ab72:	f7ff fe1b 	bl	1a7ac <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   1ab76:	f7ff ff49 	bl	1aa0c <prepare_multithreading>
   1ab7a:	f7ff ffab 	bl	1aad4 <switch_to_main_thread>
   1ab7e:	bf00      	nop
   1ab80:	20005500 	.word	0x20005500
   1ab84:	e000ed00 	.word	0xe000ed00
   1ab88:	20003158 	.word	0x20003158

0001ab8c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1ab8c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1ab8e:	4c06      	ldr	r4, [pc, #24]	; (1aba8 <statics_init+0x1c>)
   1ab90:	4b06      	ldr	r3, [pc, #24]	; (1abac <statics_init+0x20>)
   1ab92:	429c      	cmp	r4, r3
   1ab94:	d206      	bcs.n	1aba4 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1ab96:	68a2      	ldr	r2, [r4, #8]
   1ab98:	6861      	ldr	r1, [r4, #4]
   1ab9a:	4620      	mov	r0, r4
   1ab9c:	f006 f9e0 	bl	20f60 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1aba0:	3414      	adds	r4, #20
   1aba2:	e7f5      	b.n	1ab90 <statics_init+0x4>
		}
	}
	return 0;
}
   1aba4:	2000      	movs	r0, #0
   1aba6:	bd10      	pop	{r4, pc}
   1aba8:	200006f4 	.word	0x200006f4
   1abac:	200006f4 	.word	0x200006f4

0001abb0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1abb0:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1abb2:	4c06      	ldr	r4, [pc, #24]	; (1abcc <init_mem_slab_module+0x1c>)
	int rc = 0;
   1abb4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1abb6:	4b06      	ldr	r3, [pc, #24]	; (1abd0 <init_mem_slab_module+0x20>)
   1abb8:	429c      	cmp	r4, r3
   1abba:	d206      	bcs.n	1abca <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   1abbc:	4620      	mov	r0, r4
   1abbe:	f006 fa3f 	bl	21040 <create_free_list>
		if (rc < 0) {
   1abc2:	2800      	cmp	r0, #0
   1abc4:	db01      	blt.n	1abca <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1abc6:	341c      	adds	r4, #28
   1abc8:	e7f5      	b.n	1abb6 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   1abca:	bd10      	pop	{r4, pc}
   1abcc:	200006a0 	.word	0x200006a0
   1abd0:	200006f4 	.word	0x200006f4

0001abd4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1abd4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abd6:	b083      	sub	sp, #12
   1abd8:	460c      	mov	r4, r1
   1abda:	461f      	mov	r7, r3
	__asm__ volatile(
   1abdc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1abe0:	f3ef 8111 	mrs	r1, BASEPRI
   1abe4:	f383 8812 	msr	BASEPRI_MAX, r3
   1abe8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1abec:	6943      	ldr	r3, [r0, #20]
   1abee:	b16b      	cbz	r3, 1ac0c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   1abf0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1abf2:	6943      	ldr	r3, [r0, #20]
   1abf4:	681b      	ldr	r3, [r3, #0]
   1abf6:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1abf8:	6983      	ldr	r3, [r0, #24]
   1abfa:	3301      	adds	r3, #1
   1abfc:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1abfe:	2000      	movs	r0, #0
	__asm__ volatile(
   1ac00:	f381 8811 	msr	BASEPRI, r1
   1ac04:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1ac08:	b003      	add	sp, #12
   1ac0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac0c:	4616      	mov	r6, r2
   1ac0e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ac12:	ea56 0307 	orrs.w	r3, r6, r7
   1ac16:	d104      	bne.n	1ac22 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   1ac18:	2300      	movs	r3, #0
   1ac1a:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1ac1c:	f06f 000b 	mvn.w	r0, #11
   1ac20:	e7ee      	b.n	1ac00 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ac22:	e9cd 6700 	strd	r6, r7, [sp]
   1ac26:	4602      	mov	r2, r0
   1ac28:	4628      	mov	r0, r5
   1ac2a:	f000 fdfd 	bl	1b828 <z_pend_curr>
		if (result == 0) {
   1ac2e:	2800      	cmp	r0, #0
   1ac30:	d1ea      	bne.n	1ac08 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   1ac32:	4b02      	ldr	r3, [pc, #8]	; (1ac3c <k_mem_slab_alloc+0x68>)
   1ac34:	689b      	ldr	r3, [r3, #8]
   1ac36:	695b      	ldr	r3, [r3, #20]
   1ac38:	6023      	str	r3, [r4, #0]
		return result;
   1ac3a:	e7e5      	b.n	1ac08 <k_mem_slab_alloc+0x34>
   1ac3c:	20003158 	.word	0x20003158

0001ac40 <z_thread_monitor_exit>:
	__asm__ volatile(
   1ac40:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ac44:	f3ef 8111 	mrs	r1, BASEPRI
   1ac48:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac4c:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   1ac50:	4b0a      	ldr	r3, [pc, #40]	; (1ac7c <z_thread_monitor_exit+0x3c>)
   1ac52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1ac54:	4283      	cmp	r3, r0
   1ac56:	d104      	bne.n	1ac62 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   1ac58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1ac5a:	4b08      	ldr	r3, [pc, #32]	; (1ac7c <z_thread_monitor_exit+0x3c>)
   1ac5c:	629a      	str	r2, [r3, #40]	; 0x28
   1ac5e:	e007      	b.n	1ac70 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   1ac60:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   1ac62:	b113      	cbz	r3, 1ac6a <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   1ac64:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   1ac66:	4282      	cmp	r2, r0
   1ac68:	d1fa      	bne.n	1ac60 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   1ac6a:	b10b      	cbz	r3, 1ac70 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   1ac6c:	6f42      	ldr	r2, [r0, #116]	; 0x74
   1ac6e:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   1ac70:	f381 8811 	msr	BASEPRI, r1
   1ac74:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   1ac78:	4770      	bx	lr
   1ac7a:	bf00      	nop
   1ac7c:	20003158 	.word	0x20003158

0001ac80 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   1ac80:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   1ac82:	4604      	mov	r4, r0
   1ac84:	b140      	cbz	r0, 1ac98 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   1ac86:	2220      	movs	r2, #32
   1ac88:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1ac8c:	f003 f87e 	bl	1dd8c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1ac90:	2000      	movs	r0, #0
   1ac92:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   1ac96:	bd10      	pop	{r4, pc}
		thread = _current;
   1ac98:	4b01      	ldr	r3, [pc, #4]	; (1aca0 <z_impl_k_thread_name_set+0x20>)
   1ac9a:	689c      	ldr	r4, [r3, #8]
   1ac9c:	e7f3      	b.n	1ac86 <z_impl_k_thread_name_set+0x6>
   1ac9e:	bf00      	nop
   1aca0:	20003158 	.word	0x20003158

0001aca4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   1aca4:	b538      	push	{r3, r4, r5, lr}
   1aca6:	4614      	mov	r4, r2
   1aca8:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1acaa:	ea54 0305 	orrs.w	r3, r4, r5
   1acae:	d102      	bne.n	1acb6 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   1acb0:	f006 fa31 	bl	21116 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   1acb4:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1acb6:	462b      	mov	r3, r5
   1acb8:	4902      	ldr	r1, [pc, #8]	; (1acc4 <schedule_new_thread+0x20>)
   1acba:	3018      	adds	r0, #24
   1acbc:	f001 f85e 	bl	1bd7c <z_add_timeout>
   1acc0:	e7f8      	b.n	1acb4 <schedule_new_thread+0x10>
   1acc2:	bf00      	nop
   1acc4:	0002171f 	.word	0x0002171f

0001acc8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1acc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1accc:	b085      	sub	sp, #20
   1acce:	4604      	mov	r4, r0
   1acd0:	460f      	mov	r7, r1
   1acd2:	4615      	mov	r5, r2
   1acd4:	461e      	mov	r6, r3
   1acd6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   1acda:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   1acde:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   1ace2:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1ace6:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1acea:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   1acec:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   1acee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1acf0:	2204      	movs	r2, #4
   1acf2:	9911      	ldr	r1, [sp, #68]	; 0x44
   1acf4:	f006 fa13 	bl	2111e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   1acf8:	462a      	mov	r2, r5
   1acfa:	4639      	mov	r1, r7
   1acfc:	4620      	mov	r0, r4
   1acfe:	f006 f9f0 	bl	210e2 <setup_thread_stack>
   1ad02:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1ad04:	f8cd 8008 	str.w	r8, [sp, #8]
   1ad08:	f8cd 9004 	str.w	r9, [sp, #4]
   1ad0c:	f8cd a000 	str.w	sl, [sp]
   1ad10:	4633      	mov	r3, r6
   1ad12:	4602      	mov	r2, r0
   1ad14:	4639      	mov	r1, r7
   1ad16:	4620      	mov	r0, r4
   1ad18:	f7f7 f8f8 	bl	11f0c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   1ad1c:	2300      	movs	r3, #0
   1ad1e:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   1ad20:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   1ad22:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   1ad26:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   1ad2a:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   1ad2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ad32:	f3ef 8211 	mrs	r2, BASEPRI
   1ad36:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad3a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   1ad3e:	4b13      	ldr	r3, [pc, #76]	; (1ad8c <z_setup_new_thread+0xc4>)
   1ad40:	6a99      	ldr	r1, [r3, #40]	; 0x28
   1ad42:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   1ad44:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   1ad46:	f382 8811 	msr	BASEPRI, r2
   1ad4a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   1ad4e:	f1bb 0f00 	cmp.w	fp, #0
   1ad52:	d013      	beq.n	1ad7c <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   1ad54:	221f      	movs	r2, #31
   1ad56:	4659      	mov	r1, fp
   1ad58:	f104 0078 	add.w	r0, r4, #120	; 0x78
   1ad5c:	f003 f816 	bl	1dd8c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   1ad60:	2300      	movs	r3, #0
   1ad62:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   1ad66:	4b09      	ldr	r3, [pc, #36]	; (1ad8c <z_setup_new_thread+0xc4>)
   1ad68:	689b      	ldr	r3, [r3, #8]
   1ad6a:	b15b      	cbz	r3, 1ad84 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   1ad6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1ad70:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   1ad74:	4628      	mov	r0, r5
   1ad76:	b005      	add	sp, #20
   1ad78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   1ad7c:	2300      	movs	r3, #0
   1ad7e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1ad82:	e7f0      	b.n	1ad66 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   1ad84:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   1ad88:	e7f4      	b.n	1ad74 <z_setup_new_thread+0xac>
   1ad8a:	bf00      	nop
   1ad8c:	20003158 	.word	0x20003158

0001ad90 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   1ad90:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   1ad94:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   1ad96:	4c23      	ldr	r4, [pc, #140]	; (1ae24 <z_init_static_threads+0x94>)
   1ad98:	4b23      	ldr	r3, [pc, #140]	; (1ae28 <z_init_static_threads+0x98>)
   1ad9a:	429c      	cmp	r4, r3
   1ad9c:	d215      	bcs.n	1adca <z_init_static_threads+0x3a>
		z_setup_new_thread(
   1ad9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ada0:	9305      	str	r3, [sp, #20]
   1ada2:	6a23      	ldr	r3, [r4, #32]
   1ada4:	9304      	str	r3, [sp, #16]
   1ada6:	69e3      	ldr	r3, [r4, #28]
   1ada8:	9303      	str	r3, [sp, #12]
   1adaa:	69a3      	ldr	r3, [r4, #24]
   1adac:	9302      	str	r3, [sp, #8]
   1adae:	6963      	ldr	r3, [r4, #20]
   1adb0:	9301      	str	r3, [sp, #4]
   1adb2:	6923      	ldr	r3, [r4, #16]
   1adb4:	9300      	str	r3, [sp, #0]
   1adb6:	68e3      	ldr	r3, [r4, #12]
   1adb8:	68a2      	ldr	r2, [r4, #8]
   1adba:	6861      	ldr	r1, [r4, #4]
   1adbc:	6820      	ldr	r0, [r4, #0]
   1adbe:	f7ff ff83 	bl	1acc8 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   1adc2:	6823      	ldr	r3, [r4, #0]
   1adc4:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1adc6:	3430      	adds	r4, #48	; 0x30
   1adc8:	e7e6      	b.n	1ad98 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   1adca:	f000 fbe5 	bl	1b598 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1adce:	4c15      	ldr	r4, [pc, #84]	; (1ae24 <z_init_static_threads+0x94>)
   1add0:	e01b      	b.n	1ae0a <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   1add2:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   1add4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1add8:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
   1addc:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   1ade0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   1ade4:	03d8      	lsls	r0, r3, #15
   1ade6:	f240 35e7 	movw	r5, #999	; 0x3e7
   1adea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1adee:	2300      	movs	r3, #0
   1adf0:	1940      	adds	r0, r0, r5
   1adf2:	f04f 0500 	mov.w	r5, #0
   1adf6:	eb45 0101 	adc.w	r1, r5, r1
   1adfa:	f7e5 f981 	bl	100 <__aeabi_uldivmod>
   1adfe:	4602      	mov	r2, r0
   1ae00:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   1ae02:	4630      	mov	r0, r6
   1ae04:	f7ff ff4e 	bl	1aca4 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   1ae08:	3430      	adds	r4, #48	; 0x30
   1ae0a:	4b07      	ldr	r3, [pc, #28]	; (1ae28 <z_init_static_threads+0x98>)
   1ae0c:	429c      	cmp	r4, r3
   1ae0e:	d204      	bcs.n	1ae1a <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1ae10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1ae12:	f1b3 3fff 	cmp.w	r3, #4294967295
   1ae16:	d0f7      	beq.n	1ae08 <z_init_static_threads+0x78>
   1ae18:	e7db      	b.n	1add2 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   1ae1a:	f000 fdbb 	bl	1b994 <k_sched_unlock>
}
   1ae1e:	b006      	add	sp, #24
   1ae20:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   1ae24:	200006a0 	.word	0x200006a0
   1ae28:	200006a0 	.word	0x200006a0

0001ae2c <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   1ae2c:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   1ae2e:	f006 fdc4 	bl	219ba <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1ae32:	4b04      	ldr	r3, [pc, #16]	; (1ae44 <pm_save_idle+0x18>)
   1ae34:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1ae36:	f7f6 fac1 	bl	113bc <pm_system_suspend>
   1ae3a:	b100      	cbz	r0, 1ae3e <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   1ae3c:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   1ae3e:	f7f6 ff2b 	bl	11c98 <arch_cpu_idle>
   1ae42:	e7fb      	b.n	1ae3c <pm_save_idle+0x10>
   1ae44:	20003158 	.word	0x20003158

0001ae48 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1ae48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ae4c:	b083      	sub	sp, #12
   1ae4e:	4604      	mov	r4, r0
   1ae50:	461d      	mov	r5, r3
	__asm__ volatile(
   1ae52:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ae56:	f3ef 8711 	mrs	r7, BASEPRI
   1ae5a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ae5e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ae62:	68c1      	ldr	r1, [r0, #12]
   1ae64:	b999      	cbnz	r1, 1ae8e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   1ae66:	2900      	cmp	r1, #0
   1ae68:	d14f      	bne.n	1af0a <z_impl_k_mutex_lock+0xc2>
   1ae6a:	4b3a      	ldr	r3, [pc, #232]	; (1af54 <z_impl_k_mutex_lock+0x10c>)
   1ae6c:	689b      	ldr	r3, [r3, #8]
   1ae6e:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1ae72:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   1ae74:	3101      	adds	r1, #1
   1ae76:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   1ae78:	4b36      	ldr	r3, [pc, #216]	; (1af54 <z_impl_k_mutex_lock+0x10c>)
   1ae7a:	689b      	ldr	r3, [r3, #8]
   1ae7c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   1ae7e:	f387 8811 	msr	BASEPRI, r7
   1ae82:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   1ae86:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1ae88:	b003      	add	sp, #12
   1ae8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ae8e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1ae90:	6882      	ldr	r2, [r0, #8]
   1ae92:	4b30      	ldr	r3, [pc, #192]	; (1af54 <z_impl_k_mutex_lock+0x10c>)
   1ae94:	689b      	ldr	r3, [r3, #8]
   1ae96:	429a      	cmp	r2, r3
   1ae98:	d0e5      	beq.n	1ae66 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1ae9a:	ea55 0106 	orrs.w	r1, r5, r6
   1ae9e:	bf0c      	ite	eq
   1aea0:	f04f 0801 	moveq.w	r8, #1
   1aea4:	f04f 0800 	movne.w	r8, #0
   1aea8:	d031      	beq.n	1af0e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   1aeaa:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1aeae:	4649      	mov	r1, r9
   1aeb0:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1aeb4:	f006 f972 	bl	2119c <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1aeb8:	4581      	cmp	r9, r0
   1aeba:	dc2f      	bgt.n	1af1c <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   1aebc:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1aec0:	9600      	str	r6, [sp, #0]
   1aec2:	9501      	str	r5, [sp, #4]
   1aec4:	4622      	mov	r2, r4
   1aec6:	4639      	mov	r1, r7
   1aec8:	4823      	ldr	r0, [pc, #140]	; (1af58 <z_impl_k_mutex_lock+0x110>)
   1aeca:	f000 fcad 	bl	1b828 <z_pend_curr>
	if (got_mutex == 0) {
   1aece:	2800      	cmp	r0, #0
   1aed0:	d0da      	beq.n	1ae88 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   1aed2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aed6:	f3ef 8511 	mrs	r5, BASEPRI
   1aeda:	f383 8812 	msr	BASEPRI_MAX, r3
   1aede:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1aee2:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1aee4:	42a3      	cmp	r3, r4
   1aee6:	d01f      	beq.n	1af28 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1aee8:	b1f3      	cbz	r3, 1af28 <z_impl_k_mutex_lock+0xe0>
   1aeea:	6921      	ldr	r1, [r4, #16]
   1aeec:	f993 000e 	ldrsb.w	r0, [r3, #14]
   1aef0:	f006 f954 	bl	2119c <new_prio_for_inheritance>
   1aef4:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1aef6:	4620      	mov	r0, r4
   1aef8:	f006 f95b 	bl	211b2 <adjust_owner_prio>
   1aefc:	b9b0      	cbnz	r0, 1af2c <z_impl_k_mutex_lock+0xe4>
   1aefe:	f1b9 0f00 	cmp.w	r9, #0
   1af02:	d015      	beq.n	1af30 <z_impl_k_mutex_lock+0xe8>
   1af04:	f04f 0801 	mov.w	r8, #1
   1af08:	e012      	b.n	1af30 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   1af0a:	6923      	ldr	r3, [r4, #16]
   1af0c:	e7b1      	b.n	1ae72 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   1af0e:	f387 8811 	msr	BASEPRI, r7
   1af12:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   1af16:	f06f 000f 	mvn.w	r0, #15
   1af1a:	e7b5      	b.n	1ae88 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   1af1c:	4601      	mov	r1, r0
   1af1e:	4620      	mov	r0, r4
   1af20:	f006 f947 	bl	211b2 <adjust_owner_prio>
   1af24:	4681      	mov	r9, r0
   1af26:	e7cb      	b.n	1aec0 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1af28:	6921      	ldr	r1, [r4, #16]
   1af2a:	e7e4      	b.n	1aef6 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1af2c:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   1af30:	f1b8 0f00 	cmp.w	r8, #0
   1af34:	d106      	bne.n	1af44 <z_impl_k_mutex_lock+0xfc>
   1af36:	f385 8811 	msr	BASEPRI, r5
   1af3a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   1af3e:	f06f 000a 	mvn.w	r0, #10
   1af42:	e7a1      	b.n	1ae88 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   1af44:	4629      	mov	r1, r5
   1af46:	4804      	ldr	r0, [pc, #16]	; (1af58 <z_impl_k_mutex_lock+0x110>)
   1af48:	f000 fb0a 	bl	1b560 <z_reschedule>
	return -EAGAIN;
   1af4c:	f06f 000a 	mvn.w	r0, #10
   1af50:	e79a      	b.n	1ae88 <z_impl_k_mutex_lock+0x40>
   1af52:	bf00      	nop
   1af54:	20003158 	.word	0x20003158
   1af58:	20003184 	.word	0x20003184

0001af5c <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1af5c:	6882      	ldr	r2, [r0, #8]
   1af5e:	2a00      	cmp	r2, #0
   1af60:	d035      	beq.n	1afce <z_impl_k_mutex_unlock+0x72>
{
   1af62:	b538      	push	{r3, r4, r5, lr}
   1af64:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1af66:	4b1d      	ldr	r3, [pc, #116]	; (1afdc <z_impl_k_mutex_unlock+0x80>)
   1af68:	689b      	ldr	r3, [r3, #8]
   1af6a:	429a      	cmp	r2, r3
   1af6c:	d132      	bne.n	1afd4 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1af6e:	7bda      	ldrb	r2, [r3, #15]
   1af70:	3a01      	subs	r2, #1
   1af72:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1af74:	68c3      	ldr	r3, [r0, #12]
   1af76:	2b01      	cmp	r3, #1
   1af78:	d905      	bls.n	1af86 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1af7a:	3b01      	subs	r3, #1
   1af7c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1af7e:	f000 fd09 	bl	1b994 <k_sched_unlock>

	return 0;
   1af82:	2000      	movs	r0, #0
}
   1af84:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1af86:	f04f 0340 	mov.w	r3, #64	; 0x40
   1af8a:	f3ef 8511 	mrs	r5, BASEPRI
   1af8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1af92:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1af96:	6901      	ldr	r1, [r0, #16]
   1af98:	f006 f90b 	bl	211b2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1af9c:	4620      	mov	r0, r4
   1af9e:	f006 fc64 	bl	2186a <z_unpend_first_thread>
	mutex->owner = new_owner;
   1afa2:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1afa4:	b160      	cbz	r0, 1afc0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1afa6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1afaa:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1afac:	2300      	movs	r3, #0
   1afae:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   1afb2:	f006 fb98 	bl	216e6 <z_ready_thread>
		z_reschedule(&lock, key);
   1afb6:	4629      	mov	r1, r5
   1afb8:	4809      	ldr	r0, [pc, #36]	; (1afe0 <z_impl_k_mutex_unlock+0x84>)
   1afba:	f000 fad1 	bl	1b560 <z_reschedule>
   1afbe:	e7de      	b.n	1af7e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1afc0:	2300      	movs	r3, #0
   1afc2:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   1afc4:	f385 8811 	msr	BASEPRI, r5
   1afc8:	f3bf 8f6f 	isb	sy
   1afcc:	e7d7      	b.n	1af7e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1afce:	f06f 0015 	mvn.w	r0, #21
}
   1afd2:	4770      	bx	lr
		return -EPERM;
   1afd4:	f04f 30ff 	mov.w	r0, #4294967295
   1afd8:	e7d4      	b.n	1af84 <z_impl_k_mutex_unlock+0x28>
   1afda:	bf00      	nop
   1afdc:	20003158 	.word	0x20003158
   1afe0:	20003184 	.word	0x20003184

0001afe4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1afe4:	b5d0      	push	{r4, r6, r7, lr}
   1afe6:	b082      	sub	sp, #8
   1afe8:	4601      	mov	r1, r0
   1afea:	4616      	mov	r6, r2
   1afec:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1afee:	4602      	mov	r2, r0
	__asm__ volatile(
   1aff0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1aff4:	f3ef 8411 	mrs	r4, BASEPRI
   1aff8:	f383 8812 	msr	BASEPRI_MAX, r3
   1affc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1b000:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b004:	b188      	cbz	r0, 1b02a <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b006:	6803      	ldr	r3, [r0, #0]
   1b008:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   1b00c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   1b00e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b010:	4290      	cmp	r0, r2
   1b012:	d008      	beq.n	1b026 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b014:	2101      	movs	r1, #1
   1b016:	f006 f94a 	bl	212ae <z_queue_node_peek>
	__asm__ volatile(
   1b01a:	f384 8811 	msr	BASEPRI, r4
   1b01e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b022:	b002      	add	sp, #8
   1b024:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   1b026:	604b      	str	r3, [r1, #4]
}
   1b028:	e7f4      	b.n	1b014 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b02a:	ea56 0307 	orrs.w	r3, r6, r7
   1b02e:	d00a      	beq.n	1b046 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b030:	e9cd 6700 	strd	r6, r7, [sp]
   1b034:	4621      	mov	r1, r4
   1b036:	4610      	mov	r0, r2
   1b038:	f000 fbf6 	bl	1b828 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b03c:	b948      	cbnz	r0, 1b052 <z_impl_k_queue_get+0x6e>
   1b03e:	4b06      	ldr	r3, [pc, #24]	; (1b058 <z_impl_k_queue_get+0x74>)
   1b040:	689b      	ldr	r3, [r3, #8]
   1b042:	6958      	ldr	r0, [r3, #20]
   1b044:	e7ed      	b.n	1b022 <z_impl_k_queue_get+0x3e>
   1b046:	f384 8811 	msr	BASEPRI, r4
   1b04a:	f3bf 8f6f 	isb	sy
		return NULL;
   1b04e:	2000      	movs	r0, #0
   1b050:	e7e7      	b.n	1b022 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b052:	2000      	movs	r0, #0
   1b054:	e7e5      	b.n	1b022 <z_impl_k_queue_get+0x3e>
   1b056:	bf00      	nop
   1b058:	20003158 	.word	0x20003158

0001b05c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1b05c:	b538      	push	{r3, r4, r5, lr}
   1b05e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b060:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b064:	f3ef 8511 	mrs	r5, BASEPRI
   1b068:	f383 8812 	msr	BASEPRI_MAX, r3
   1b06c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1b070:	f006 fbfb 	bl	2186a <z_unpend_first_thread>

	if (thread != NULL) {
   1b074:	b148      	cbz	r0, 1b08a <z_impl_k_sem_give+0x2e>
   1b076:	2200      	movs	r2, #0
   1b078:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1b07c:	f006 fb33 	bl	216e6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1b080:	4629      	mov	r1, r5
   1b082:	4809      	ldr	r0, [pc, #36]	; (1b0a8 <z_impl_k_sem_give+0x4c>)
   1b084:	f000 fa6c 	bl	1b560 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1b088:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b08a:	68a3      	ldr	r3, [r4, #8]
   1b08c:	68e2      	ldr	r2, [r4, #12]
   1b08e:	4293      	cmp	r3, r2
   1b090:	d008      	beq.n	1b0a4 <z_impl_k_sem_give+0x48>
   1b092:	2201      	movs	r2, #1
   1b094:	4413      	add	r3, r2
   1b096:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1b098:	2102      	movs	r1, #2
   1b09a:	f104 0010 	add.w	r0, r4, #16
   1b09e:	f006 fdb7 	bl	21c10 <z_handle_obj_poll_events>
}
   1b0a2:	e7ed      	b.n	1b080 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1b0a4:	2200      	movs	r2, #0
   1b0a6:	e7f5      	b.n	1b094 <z_impl_k_sem_give+0x38>
   1b0a8:	20003184 	.word	0x20003184

0001b0ac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1b0ac:	b530      	push	{r4, r5, lr}
   1b0ae:	b083      	sub	sp, #12
   1b0b0:	461d      	mov	r5, r3
   1b0b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b0b6:	f3ef 8111 	mrs	r1, BASEPRI
   1b0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   1b0be:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1b0c2:	6883      	ldr	r3, [r0, #8]
   1b0c4:	b143      	cbz	r3, 1b0d8 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1b0c6:	3b01      	subs	r3, #1
   1b0c8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1b0ca:	f381 8811 	msr	BASEPRI, r1
   1b0ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1b0d2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1b0d4:	b003      	add	sp, #12
   1b0d6:	bd30      	pop	{r4, r5, pc}
   1b0d8:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b0da:	ea54 0305 	orrs.w	r3, r4, r5
   1b0de:	d006      	beq.n	1b0ee <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1b0e0:	e9cd 4500 	strd	r4, r5, [sp]
   1b0e4:	4602      	mov	r2, r0
   1b0e6:	4805      	ldr	r0, [pc, #20]	; (1b0fc <z_impl_k_sem_take+0x50>)
   1b0e8:	f000 fb9e 	bl	1b828 <z_pend_curr>
	return ret;
   1b0ec:	e7f2      	b.n	1b0d4 <z_impl_k_sem_take+0x28>
   1b0ee:	f381 8811 	msr	BASEPRI, r1
   1b0f2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1b0f6:	f06f 000f 	mvn.w	r0, #15
   1b0fa:	e7eb      	b.n	1b0d4 <z_impl_k_sem_take+0x28>
   1b0fc:	20003184 	.word	0x20003184

0001b100 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1b100:	b510      	push	{r4, lr}
   1b102:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1b104:	4b08      	ldr	r3, [pc, #32]	; (1b128 <k_sys_work_q_init+0x28>)
   1b106:	9302      	str	r3, [sp, #8]
   1b108:	2400      	movs	r4, #0
   1b10a:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1b10e:	ab02      	add	r3, sp, #8
   1b110:	9300      	str	r3, [sp, #0]
   1b112:	f04f 33ff 	mov.w	r3, #4294967295
   1b116:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b11a:	4904      	ldr	r1, [pc, #16]	; (1b12c <k_sys_work_q_init+0x2c>)
   1b11c:	4804      	ldr	r0, [pc, #16]	; (1b130 <k_sys_work_q_init+0x30>)
   1b11e:	f000 f96f 	bl	1b400 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1b122:	4620      	mov	r0, r4
   1b124:	b004      	add	sp, #16
   1b126:	bd10      	pop	{r4, pc}
   1b128:	00024378 	.word	0x00024378
   1b12c:	20005500 	.word	0x20005500
   1b130:	20001d30 	.word	0x20001d30

0001b134 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   1b134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b136:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   1b138:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b13a:	f013 0f02 	tst.w	r3, #2
   1b13e:	d15b      	bne.n	1b1f8 <submit_to_queue_locked+0xc4>
   1b140:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1b142:	f013 0f04 	tst.w	r3, #4
   1b146:	d15c      	bne.n	1b202 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   1b148:	680b      	ldr	r3, [r1, #0]
   1b14a:	2b00      	cmp	r3, #0
   1b14c:	d037      	beq.n	1b1be <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   1b14e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1b150:	f013 0f01 	tst.w	r3, #1
   1b154:	d036      	beq.n	1b1c4 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1b156:	68a3      	ldr	r3, [r4, #8]
   1b158:	602b      	str	r3, [r5, #0]
			ret = 2;
   1b15a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   1b15c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   1b15e:	2e00      	cmp	r6, #0
   1b160:	d03e      	beq.n	1b1e0 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b162:	4b29      	ldr	r3, [pc, #164]	; (1b208 <submit_to_queue_locked+0xd4>)
   1b164:	689b      	ldr	r3, [r3, #8]
   1b166:	42b3      	cmp	r3, r6
   1b168:	d02e      	beq.n	1b1c8 <submit_to_queue_locked+0x94>
   1b16a:	2300      	movs	r3, #0
   1b16c:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   1b16e:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   1b172:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1b176:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1b17a:	f013 0f01 	tst.w	r3, #1
   1b17e:	d032      	beq.n	1b1e6 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   1b180:	b101      	cbz	r1, 1b184 <submit_to_queue_locked+0x50>
   1b182:	b39a      	cbz	r2, 1b1ec <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1b184:	b100      	cbz	r0, 1b188 <submit_to_queue_locked+0x54>
   1b186:	b3a1      	cbz	r1, 1b1f2 <submit_to_queue_locked+0xbe>
	parent->next = child;
   1b188:	2300      	movs	r3, #0
   1b18a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1b18c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   1b190:	b30b      	cbz	r3, 1b1d6 <submit_to_queue_locked+0xa2>
	parent->next = child;
   1b192:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1b194:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   1b198:	2200      	movs	r2, #0
   1b19a:	4611      	mov	r1, r2
   1b19c:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   1b1a0:	f006 fb9f 	bl	218e2 <z_sched_wake>
		ret = 1;
   1b1a4:	2001      	movs	r0, #1

		if (rc < 0) {
   1b1a6:	2800      	cmp	r0, #0
   1b1a8:	db06      	blt.n	1b1b8 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   1b1aa:	68e3      	ldr	r3, [r4, #12]
   1b1ac:	f043 0304 	orr.w	r3, r3, #4
   1b1b0:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1b1b2:	682b      	ldr	r3, [r5, #0]
   1b1b4:	60a3      	str	r3, [r4, #8]
   1b1b6:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   1b1b8:	2800      	cmp	r0, #0
   1b1ba:	dc21      	bgt.n	1b200 <submit_to_queue_locked+0xcc>
   1b1bc:	e01e      	b.n	1b1fc <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   1b1be:	6883      	ldr	r3, [r0, #8]
   1b1c0:	600b      	str	r3, [r1, #0]
   1b1c2:	e7c4      	b.n	1b14e <submit_to_queue_locked+0x1a>
		ret = 1;
   1b1c4:	2701      	movs	r7, #1
   1b1c6:	e7c9      	b.n	1b15c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1b1c8:	f005 ff9d 	bl	21106 <k_is_in_isr>
   1b1cc:	b908      	cbnz	r0, 1b1d2 <submit_to_queue_locked+0x9e>
   1b1ce:	2301      	movs	r3, #1
   1b1d0:	e7cc      	b.n	1b16c <submit_to_queue_locked+0x38>
   1b1d2:	2300      	movs	r3, #0
   1b1d4:	e7ca      	b.n	1b16c <submit_to_queue_locked+0x38>
   1b1d6:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   1b1da:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   1b1de:	e7db      	b.n	1b198 <submit_to_queue_locked+0x64>
		return -EINVAL;
   1b1e0:	f06f 0015 	mvn.w	r0, #21
   1b1e4:	e7df      	b.n	1b1a6 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1b1e6:	f06f 0012 	mvn.w	r0, #18
   1b1ea:	e7dc      	b.n	1b1a6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1b1ec:	f06f 000f 	mvn.w	r0, #15
   1b1f0:	e7d9      	b.n	1b1a6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1b1f2:	f06f 000f 	mvn.w	r0, #15
   1b1f6:	e7d6      	b.n	1b1a6 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   1b1f8:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   1b1fc:	2300      	movs	r3, #0
   1b1fe:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   1b200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   1b202:	2000      	movs	r0, #0
   1b204:	e7fa      	b.n	1b1fc <submit_to_queue_locked+0xc8>
   1b206:	bf00      	nop
   1b208:	20003158 	.word	0x20003158

0001b20c <finalize_cancel_locked>:
{
   1b20c:	b570      	push	{r4, r5, r6, lr}
   1b20e:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   1b210:	68c3      	ldr	r3, [r0, #12]
   1b212:	f023 0302 	bic.w	r3, r3, #2
   1b216:	60c3      	str	r3, [r0, #12]
	return list->head;
   1b218:	4b19      	ldr	r3, [pc, #100]	; (1b280 <finalize_cancel_locked+0x74>)
   1b21a:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b21c:	b1e8      	cbz	r0, 1b25a <finalize_cancel_locked+0x4e>
   1b21e:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b220:	b100      	cbz	r0, 1b224 <finalize_cancel_locked+0x18>
	return node->next;
   1b222:	6804      	ldr	r4, [r0, #0]
   1b224:	2600      	movs	r6, #0
   1b226:	e01d      	b.n	1b264 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   1b228:	b15e      	cbz	r6, 1b242 <finalize_cancel_locked+0x36>
	return node->next;
   1b22a:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   1b22c:	6033      	str	r3, [r6, #0]
	return list->tail;
   1b22e:	4b14      	ldr	r3, [pc, #80]	; (1b280 <finalize_cancel_locked+0x74>)
   1b230:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b232:	4298      	cmp	r0, r3
   1b234:	d00e      	beq.n	1b254 <finalize_cancel_locked+0x48>
	parent->next = child;
   1b236:	2300      	movs	r3, #0
   1b238:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1b23c:	f7ff ff0e 	bl	1b05c <z_impl_k_sem_give>
}
   1b240:	e015      	b.n	1b26e <finalize_cancel_locked+0x62>
	return node->next;
   1b242:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1b244:	4b0e      	ldr	r3, [pc, #56]	; (1b280 <finalize_cancel_locked+0x74>)
   1b246:	601a      	str	r2, [r3, #0]
	return list->tail;
   1b248:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1b24a:	4298      	cmp	r0, r3
   1b24c:	d1f3      	bne.n	1b236 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1b24e:	4b0c      	ldr	r3, [pc, #48]	; (1b280 <finalize_cancel_locked+0x74>)
   1b250:	605a      	str	r2, [r3, #4]
}
   1b252:	e7f0      	b.n	1b236 <finalize_cancel_locked+0x2a>
	list->tail = node;
   1b254:	4b0a      	ldr	r3, [pc, #40]	; (1b280 <finalize_cancel_locked+0x74>)
   1b256:	605e      	str	r6, [r3, #4]
}
   1b258:	e7ed      	b.n	1b236 <finalize_cancel_locked+0x2a>
   1b25a:	4604      	mov	r4, r0
   1b25c:	e7e2      	b.n	1b224 <finalize_cancel_locked+0x18>
   1b25e:	4623      	mov	r3, r4
   1b260:	4620      	mov	r0, r4
   1b262:	461c      	mov	r4, r3
   1b264:	b150      	cbz	r0, 1b27c <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1b266:	6843      	ldr	r3, [r0, #4]
   1b268:	42ab      	cmp	r3, r5
   1b26a:	d0dd      	beq.n	1b228 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   1b26c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1b26e:	2c00      	cmp	r4, #0
   1b270:	d0f5      	beq.n	1b25e <finalize_cancel_locked+0x52>
   1b272:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b274:	2c00      	cmp	r4, #0
   1b276:	d0f3      	beq.n	1b260 <finalize_cancel_locked+0x54>
	return node->next;
   1b278:	6823      	ldr	r3, [r4, #0]
   1b27a:	e7f1      	b.n	1b260 <finalize_cancel_locked+0x54>
}
   1b27c:	bd70      	pop	{r4, r5, r6, pc}
   1b27e:	bf00      	nop
   1b280:	20003184 	.word	0x20003184

0001b284 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   1b284:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1b286:	68c5      	ldr	r5, [r0, #12]
   1b288:	f015 0f02 	tst.w	r5, #2
   1b28c:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   1b290:	d101      	bne.n	1b296 <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   1b292:	4628      	mov	r0, r5
   1b294:	bd70      	pop	{r4, r5, r6, pc}
   1b296:	4604      	mov	r4, r0
   1b298:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   1b29a:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b29e:	2201      	movs	r2, #1
   1b2a0:	2100      	movs	r1, #0
   1b2a2:	f006 f872 	bl	2138a <z_impl_k_sem_init>
	canceler->work = work;
   1b2a6:	6074      	str	r4, [r6, #4]
	parent->next = child;
   1b2a8:	2300      	movs	r3, #0
   1b2aa:	6033      	str	r3, [r6, #0]
	return list->tail;
   1b2ac:	4b05      	ldr	r3, [pc, #20]	; (1b2c4 <cancel_sync_locked+0x40>)
   1b2ae:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1b2b0:	b11b      	cbz	r3, 1b2ba <cancel_sync_locked+0x36>
	parent->next = child;
   1b2b2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1b2b4:	4b03      	ldr	r3, [pc, #12]	; (1b2c4 <cancel_sync_locked+0x40>)
   1b2b6:	605e      	str	r6, [r3, #4]
}
   1b2b8:	e7eb      	b.n	1b292 <cancel_sync_locked+0xe>
   1b2ba:	4b02      	ldr	r3, [pc, #8]	; (1b2c4 <cancel_sync_locked+0x40>)
   1b2bc:	605e      	str	r6, [r3, #4]
	list->head = node;
   1b2be:	601e      	str	r6, [r3, #0]
}
   1b2c0:	e7e7      	b.n	1b292 <cancel_sync_locked+0xe>
   1b2c2:	bf00      	nop
   1b2c4:	20003184 	.word	0x20003184

0001b2c8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1b2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2ca:	b085      	sub	sp, #20
   1b2cc:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   1b2ce:	e016      	b.n	1b2fe <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   1b2d0:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   1b2d4:	f023 0204 	bic.w	r2, r3, #4
   1b2d8:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   1b2dc:	f013 0f04 	tst.w	r3, #4
   1b2e0:	d158      	bne.n	1b394 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1b2e2:	2300      	movs	r3, #0
   1b2e4:	9302      	str	r3, [sp, #8]
   1b2e6:	f04f 32ff 	mov.w	r2, #4294967295
   1b2ea:	f04f 33ff 	mov.w	r3, #4294967295
   1b2ee:	e9cd 2300 	strd	r2, r3, [sp]
   1b2f2:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   1b2f6:	4631      	mov	r1, r6
   1b2f8:	482e      	ldr	r0, [pc, #184]	; (1b3b4 <work_queue_main+0xec>)
   1b2fa:	f000 fccb 	bl	1bc94 <z_sched_wait>
	__asm__ volatile(
   1b2fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b302:	f3ef 8611 	mrs	r6, BASEPRI
   1b306:	f383 8812 	msr	BASEPRI_MAX, r3
   1b30a:	f3bf 8f6f 	isb	sy
	return list->head;
   1b30e:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   1b312:	2c00      	cmp	r4, #0
   1b314:	d0dc      	beq.n	1b2d0 <work_queue_main+0x8>
	return node->next;
   1b316:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1b318:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   1b31c:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1b320:	4294      	cmp	r4, r2
   1b322:	d034      	beq.n	1b38e <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   1b324:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1b328:	f043 0302 	orr.w	r3, r3, #2
   1b32c:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   1b330:	68e3      	ldr	r3, [r4, #12]
   1b332:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   1b336:	f023 0304 	bic.w	r3, r3, #4
   1b33a:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   1b33c:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   1b33e:	2c00      	cmp	r4, #0
   1b340:	d0cf      	beq.n	1b2e2 <work_queue_main+0x1a>
	__asm__ volatile(
   1b342:	f386 8811 	msr	BASEPRI, r6
   1b346:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1b34a:	4620      	mov	r0, r4
   1b34c:	4798      	blx	r3
	__asm__ volatile(
   1b34e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b352:	f3ef 8611 	mrs	r6, BASEPRI
   1b356:	f383 8812 	msr	BASEPRI_MAX, r3
   1b35a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1b35e:	68e3      	ldr	r3, [r4, #12]
   1b360:	f023 0301 	bic.w	r3, r3, #1
   1b364:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1b366:	f013 0f02 	tst.w	r3, #2
   1b36a:	d11e      	bne.n	1b3aa <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   1b36c:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   1b370:	f023 0302 	bic.w	r3, r3, #2
   1b374:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   1b378:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   1b37c:	f386 8811 	msr	BASEPRI, r6
   1b380:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1b384:	2b00      	cmp	r3, #0
   1b386:	d1ba      	bne.n	1b2fe <work_queue_main+0x36>
	z_impl_k_yield();
   1b388:	f000 fb86 	bl	1ba98 <z_impl_k_yield>
}
   1b38c:	e7b7      	b.n	1b2fe <work_queue_main+0x36>
	list->tail = node;
   1b38e:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   1b392:	e7c7      	b.n	1b324 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1b394:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1b398:	2200      	movs	r2, #0
   1b39a:	2101      	movs	r1, #1
   1b39c:	4638      	mov	r0, r7
   1b39e:	f006 faa0 	bl	218e2 <z_sched_wake>
   1b3a2:	2800      	cmp	r0, #0
   1b3a4:	d1f8      	bne.n	1b398 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1b3a6:	2300      	movs	r3, #0
   1b3a8:	e7c9      	b.n	1b33e <work_queue_main+0x76>
				finalize_cancel_locked(work);
   1b3aa:	4620      	mov	r0, r4
   1b3ac:	f7ff ff2e 	bl	1b20c <finalize_cancel_locked>
   1b3b0:	e7dc      	b.n	1b36c <work_queue_main+0xa4>
   1b3b2:	bf00      	nop
   1b3b4:	20003184 	.word	0x20003184

0001b3b8 <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b3b8:	b570      	push	{r4, r5, r6, lr}
   1b3ba:	4606      	mov	r6, r0
   1b3bc:	4608      	mov	r0, r1
   1b3be:	4614      	mov	r4, r2
   1b3c0:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1b3c2:	ea54 0305 	orrs.w	r3, r4, r5
   1b3c6:	d00c      	beq.n	1b3e2 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   1b3c8:	68cb      	ldr	r3, [r1, #12]
   1b3ca:	f043 0308 	orr.w	r3, r3, #8
   1b3ce:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   1b3d0:	6833      	ldr	r3, [r6, #0]
   1b3d2:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1b3d4:	462b      	mov	r3, r5
   1b3d6:	4905      	ldr	r1, [pc, #20]	; (1b3ec <schedule_for_queue_locked+0x34>)
   1b3d8:	3010      	adds	r0, #16
   1b3da:	f000 fccf 	bl	1bd7c <z_add_timeout>

	return ret;
   1b3de:	2001      	movs	r0, #1
}
   1b3e0:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   1b3e2:	4631      	mov	r1, r6
   1b3e4:	f7ff fea6 	bl	1b134 <submit_to_queue_locked>
   1b3e8:	e7fa      	b.n	1b3e0 <schedule_for_queue_locked+0x28>
   1b3ea:	bf00      	nop
   1b3ec:	00021435 	.word	0x00021435

0001b3f0 <k_work_submit>:
{
   1b3f0:	b508      	push	{r3, lr}
   1b3f2:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1b3f4:	4801      	ldr	r0, [pc, #4]	; (1b3fc <k_work_submit+0xc>)
   1b3f6:	f006 f857 	bl	214a8 <k_work_submit_to_queue>
}
   1b3fa:	bd08      	pop	{r3, pc}
   1b3fc:	20001d30 	.word	0x20001d30

0001b400 <k_work_queue_start>:
{
   1b400:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b402:	b089      	sub	sp, #36	; 0x24
   1b404:	4604      	mov	r4, r0
   1b406:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   1b408:	2000      	movs	r0, #0
   1b40a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   1b40e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1b412:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1b416:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   1b41a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   1b41e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   1b422:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   1b426:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   1b42a:	b1fd      	cbz	r5, 1b46c <k_work_queue_start+0x6c>
   1b42c:	7928      	ldrb	r0, [r5, #4]
   1b42e:	b9f8      	cbnz	r0, 1b470 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b430:	2001      	movs	r0, #1
	*flagp = flags;
   1b432:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1b436:	f04f 36ff 	mov.w	r6, #4294967295
   1b43a:	f04f 37ff 	mov.w	r7, #4294967295
   1b43e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1b442:	2000      	movs	r0, #0
   1b444:	9004      	str	r0, [sp, #16]
   1b446:	9303      	str	r3, [sp, #12]
   1b448:	9002      	str	r0, [sp, #8]
   1b44a:	9001      	str	r0, [sp, #4]
   1b44c:	9400      	str	r4, [sp, #0]
   1b44e:	4b0a      	ldr	r3, [pc, #40]	; (1b478 <k_work_queue_start+0x78>)
   1b450:	4620      	mov	r0, r4
   1b452:	f005 fe6f 	bl	21134 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   1b456:	b125      	cbz	r5, 1b462 <k_work_queue_start+0x62>
   1b458:	6829      	ldr	r1, [r5, #0]
   1b45a:	b111      	cbz	r1, 1b462 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   1b45c:	4620      	mov	r0, r4
   1b45e:	f7ff fc0f 	bl	1ac80 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1b462:	4620      	mov	r0, r4
   1b464:	f005 fe57 	bl	21116 <z_impl_k_thread_start>
}
   1b468:	b009      	add	sp, #36	; 0x24
   1b46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1b46c:	2001      	movs	r0, #1
   1b46e:	e7e0      	b.n	1b432 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1b470:	f240 1001 	movw	r0, #257	; 0x101
   1b474:	e7dd      	b.n	1b432 <k_work_queue_start+0x32>
   1b476:	bf00      	nop
   1b478:	0001b2c9 	.word	0x0001b2c9

0001b47c <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1b47c:	b508      	push	{r3, lr}
   1b47e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1b480:	4801      	ldr	r0, [pc, #4]	; (1b488 <k_work_schedule+0xc>)
   1b482:	f006 f83d 	bl	21500 <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   1b486:	bd08      	pop	{r3, pc}
   1b488:	20001d30 	.word	0x20001d30

0001b48c <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1b48c:	b508      	push	{r3, lr}
   1b48e:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1b490:	4801      	ldr	r0, [pc, #4]	; (1b498 <k_work_reschedule+0xc>)
   1b492:	f006 f84f 	bl	21534 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   1b496:	bd08      	pop	{r3, pc}
   1b498:	20001d30 	.word	0x20001d30

0001b49c <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   1b49c:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b49e:	f1b3 3fff 	cmp.w	r3, #4294967295
   1b4a2:	bf08      	it	eq
   1b4a4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1b4a8:	d100      	bne.n	1b4ac <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   1b4aa:	bd38      	pop	{r3, r4, r5, pc}
   1b4ac:	4902      	ldr	r1, [pc, #8]	; (1b4b8 <add_thread_timeout+0x1c>)
   1b4ae:	3018      	adds	r0, #24
   1b4b0:	f000 fc64 	bl	1bd7c <z_add_timeout>
   1b4b4:	e7f9      	b.n	1b4aa <add_thread_timeout+0xe>
   1b4b6:	bf00      	nop
   1b4b8:	0002171f 	.word	0x0002171f

0001b4bc <z_reset_time_slice>:
{
   1b4bc:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   1b4be:	4b08      	ldr	r3, [pc, #32]	; (1b4e0 <z_reset_time_slice+0x24>)
   1b4c0:	681b      	ldr	r3, [r3, #0]
   1b4c2:	b903      	cbnz	r3, 1b4c6 <z_reset_time_slice+0xa>
}
   1b4c4:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1b4c6:	f7fe fb9d 	bl	19c04 <sys_clock_elapsed>
   1b4ca:	4603      	mov	r3, r0
   1b4cc:	4a04      	ldr	r2, [pc, #16]	; (1b4e0 <z_reset_time_slice+0x24>)
   1b4ce:	6810      	ldr	r0, [r2, #0]
   1b4d0:	4403      	add	r3, r0
   1b4d2:	4a04      	ldr	r2, [pc, #16]	; (1b4e4 <z_reset_time_slice+0x28>)
   1b4d4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b4d6:	2100      	movs	r1, #0
   1b4d8:	f006 fa85 	bl	219e6 <z_set_timeout_expiry>
}
   1b4dc:	e7f2      	b.n	1b4c4 <z_reset_time_slice+0x8>
   1b4de:	bf00      	nop
   1b4e0:	20003194 	.word	0x20003194
   1b4e4:	20003158 	.word	0x20003158

0001b4e8 <k_sched_time_slice_set>:
{
   1b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4ec:	4606      	mov	r6, r0
   1b4ee:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   1b4f0:	2300      	movs	r3, #0
	__asm__ volatile(
   1b4f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b4f6:	f3ef 8711 	mrs	r7, BASEPRI
   1b4fa:	f382 8812 	msr	BASEPRI_MAX, r2
   1b4fe:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b502:	e009      	b.n	1b518 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   1b504:	4b13      	ldr	r3, [pc, #76]	; (1b554 <k_sched_time_slice_set+0x6c>)
   1b506:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   1b50a:	f7ff ffd7 	bl	1b4bc <z_reset_time_slice>
	__asm__ volatile(
   1b50e:	f387 8811 	msr	BASEPRI, r7
   1b512:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b516:	2301      	movs	r3, #1
   1b518:	b9cb      	cbnz	r3, 1b54e <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   1b51a:	2300      	movs	r3, #0
   1b51c:	4a0e      	ldr	r2, [pc, #56]	; (1b558 <k_sched_time_slice_set+0x70>)
   1b51e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b520:	0c75      	lsrs	r5, r6, #17
   1b522:	03f4      	lsls	r4, r6, #15
   1b524:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b52c:	2300      	movs	r3, #0
   1b52e:	1820      	adds	r0, r4, r0
   1b530:	f04f 0100 	mov.w	r1, #0
   1b534:	eb45 0101 	adc.w	r1, r5, r1
   1b538:	f7e4 fde2 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b53c:	4b07      	ldr	r3, [pc, #28]	; (1b55c <k_sched_time_slice_set+0x74>)
   1b53e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1b540:	2e00      	cmp	r6, #0
   1b542:	dddf      	ble.n	1b504 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   1b544:	2802      	cmp	r0, #2
   1b546:	bfb8      	it	lt
   1b548:	2002      	movlt	r0, #2
   1b54a:	6018      	str	r0, [r3, #0]
   1b54c:	e7da      	b.n	1b504 <k_sched_time_slice_set+0x1c>
}
   1b54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b552:	bf00      	nop
   1b554:	20003190 	.word	0x20003190
   1b558:	20003158 	.word	0x20003158
   1b55c:	20003194 	.word	0x20003194

0001b560 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1b560:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1b562:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1b564:	b921      	cbnz	r1, 1b570 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b566:	f3ef 8305 	mrs	r3, IPSR
   1b56a:	b913      	cbnz	r3, 1b572 <z_reschedule+0x12>
   1b56c:	2101      	movs	r1, #1
   1b56e:	e000      	b.n	1b572 <z_reschedule+0x12>
   1b570:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1b572:	f011 0f01 	tst.w	r1, #1
   1b576:	d007      	beq.n	1b588 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   1b578:	4b06      	ldr	r3, [pc, #24]	; (1b594 <z_reschedule+0x34>)
   1b57a:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   1b57c:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1b57e:	429a      	cmp	r2, r3
   1b580:	d002      	beq.n	1b588 <z_reschedule+0x28>
	ret = arch_swap(key);
   1b582:	f7f6 fc6b 	bl	11e5c <arch_swap>
		z_swap(lock, key);
   1b586:	e003      	b.n	1b590 <z_reschedule+0x30>
   1b588:	f380 8811 	msr	BASEPRI, r0
   1b58c:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1b590:	bd08      	pop	{r3, pc}
   1b592:	bf00      	nop
   1b594:	20003158 	.word	0x20003158

0001b598 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   1b598:	2300      	movs	r3, #0
	__asm__ volatile(
   1b59a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b59e:	f3ef 8111 	mrs	r1, BASEPRI
   1b5a2:	f382 8812 	msr	BASEPRI_MAX, r2
   1b5a6:	f3bf 8f6f 	isb	sy
   1b5aa:	b953      	cbnz	r3, 1b5c2 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   1b5ac:	4b05      	ldr	r3, [pc, #20]	; (1b5c4 <k_sched_lock+0x2c>)
   1b5ae:	689a      	ldr	r2, [r3, #8]
   1b5b0:	7bd3      	ldrb	r3, [r2, #15]
   1b5b2:	3b01      	subs	r3, #1
   1b5b4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b5b6:	f381 8811 	msr	BASEPRI, r1
   1b5ba:	f3bf 8f6f 	isb	sy
   1b5be:	2301      	movs	r3, #1
   1b5c0:	e7f3      	b.n	1b5aa <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1b5c2:	4770      	bx	lr
   1b5c4:	20003158 	.word	0x20003158

0001b5c8 <update_cache>:
{
   1b5c8:	b538      	push	{r3, r4, r5, lr}
   1b5ca:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1b5cc:	480f      	ldr	r0, [pc, #60]	; (1b60c <update_cache+0x44>)
   1b5ce:	f006 f883 	bl	216d8 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b5d2:	4605      	mov	r5, r0
   1b5d4:	b170      	cbz	r0, 1b5f4 <update_cache+0x2c>
	if (preempt_ok != 0) {
   1b5d6:	b984      	cbnz	r4, 1b5fa <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   1b5d8:	4b0d      	ldr	r3, [pc, #52]	; (1b610 <update_cache+0x48>)
   1b5da:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   1b5dc:	7b5a      	ldrb	r2, [r3, #13]
   1b5de:	f012 0f1f 	tst.w	r2, #31
   1b5e2:	d10a      	bne.n	1b5fa <update_cache+0x32>
	return node->next != NULL;
   1b5e4:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b5e6:	b942      	cbnz	r2, 1b5fa <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1b5e8:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   1b5ea:	2a7f      	cmp	r2, #127	; 0x7f
   1b5ec:	d905      	bls.n	1b5fa <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   1b5ee:	4a08      	ldr	r2, [pc, #32]	; (1b610 <update_cache+0x48>)
   1b5f0:	61d3      	str	r3, [r2, #28]
   1b5f2:	e00a      	b.n	1b60a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1b5f4:	4b06      	ldr	r3, [pc, #24]	; (1b610 <update_cache+0x48>)
   1b5f6:	68dd      	ldr	r5, [r3, #12]
   1b5f8:	e7ed      	b.n	1b5d6 <update_cache+0xe>
		if (thread != _current) {
   1b5fa:	4b05      	ldr	r3, [pc, #20]	; (1b610 <update_cache+0x48>)
   1b5fc:	689b      	ldr	r3, [r3, #8]
   1b5fe:	42ab      	cmp	r3, r5
   1b600:	d001      	beq.n	1b606 <update_cache+0x3e>
			z_reset_time_slice();
   1b602:	f7ff ff5b 	bl	1b4bc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b606:	4b02      	ldr	r3, [pc, #8]	; (1b610 <update_cache+0x48>)
   1b608:	61dd      	str	r5, [r3, #28]
}
   1b60a:	bd38      	pop	{r3, r4, r5, pc}
   1b60c:	20003178 	.word	0x20003178
   1b610:	20003158 	.word	0x20003158

0001b614 <move_thread_to_end_of_prio_q>:
{
   1b614:	b538      	push	{r3, r4, r5, lr}
   1b616:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   1b618:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1b61a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b61e:	2b00      	cmp	r3, #0
   1b620:	db28      	blt.n	1b674 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b622:	7b6b      	ldrb	r3, [r5, #13]
   1b624:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b628:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1b62a:	4b1a      	ldr	r3, [pc, #104]	; (1b694 <move_thread_to_end_of_prio_q+0x80>)
   1b62c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b630:	429c      	cmp	r4, r3
   1b632:	d02d      	beq.n	1b690 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b634:	b16c      	cbz	r4, 1b652 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b636:	4621      	mov	r1, r4
   1b638:	4628      	mov	r0, r5
   1b63a:	f005 ffe4 	bl	21606 <z_sched_prio_cmp>
   1b63e:	2800      	cmp	r0, #0
   1b640:	dc20      	bgt.n	1b684 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b642:	b134      	cbz	r4, 1b652 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1b644:	4b13      	ldr	r3, [pc, #76]	; (1b694 <move_thread_to_end_of_prio_q+0x80>)
   1b646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b648:	429c      	cmp	r4, r3
   1b64a:	d002      	beq.n	1b652 <move_thread_to_end_of_prio_q+0x3e>
   1b64c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b64e:	2c00      	cmp	r4, #0
   1b650:	d1f0      	bne.n	1b634 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   1b652:	4b10      	ldr	r3, [pc, #64]	; (1b694 <move_thread_to_end_of_prio_q+0x80>)
   1b654:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   1b656:	f103 0120 	add.w	r1, r3, #32
   1b65a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1b65c:	606a      	str	r2, [r5, #4]

	tail->next = node;
   1b65e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1b660:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1b662:	4b0c      	ldr	r3, [pc, #48]	; (1b694 <move_thread_to_end_of_prio_q+0x80>)
   1b664:	6898      	ldr	r0, [r3, #8]
   1b666:	42a8      	cmp	r0, r5
   1b668:	bf14      	ite	ne
   1b66a:	2000      	movne	r0, #0
   1b66c:	2001      	moveq	r0, #1
   1b66e:	f7ff ffab 	bl	1b5c8 <update_cache>
}
   1b672:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b678:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1b67a:	4601      	mov	r1, r0
   1b67c:	4806      	ldr	r0, [pc, #24]	; (1b698 <move_thread_to_end_of_prio_q+0x84>)
   1b67e:	f006 f800 	bl	21682 <z_priq_dumb_remove>
}
   1b682:	e7ce      	b.n	1b622 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1b684:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   1b686:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1b688:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1b68a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1b68c:	6065      	str	r5, [r4, #4]
}
   1b68e:	e7e8      	b.n	1b662 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b690:	2400      	movs	r4, #0
   1b692:	e7cf      	b.n	1b634 <move_thread_to_end_of_prio_q+0x20>
   1b694:	20003158 	.word	0x20003158
   1b698:	20003178 	.word	0x20003178

0001b69c <z_time_slice>:
{
   1b69c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b69e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b6a2:	f3ef 8411 	mrs	r4, BASEPRI
   1b6a6:	f383 8812 	msr	BASEPRI_MAX, r3
   1b6aa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1b6ae:	4b1c      	ldr	r3, [pc, #112]	; (1b720 <z_time_slice+0x84>)
   1b6b0:	689b      	ldr	r3, [r3, #8]
   1b6b2:	4a1c      	ldr	r2, [pc, #112]	; (1b724 <z_time_slice+0x88>)
   1b6b4:	6812      	ldr	r2, [r2, #0]
   1b6b6:	4293      	cmp	r3, r2
   1b6b8:	d01d      	beq.n	1b6f6 <z_time_slice+0x5a>
	pending_current = NULL;
   1b6ba:	4a1a      	ldr	r2, [pc, #104]	; (1b724 <z_time_slice+0x88>)
   1b6bc:	2100      	movs	r1, #0
   1b6be:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b6c0:	4a19      	ldr	r2, [pc, #100]	; (1b728 <z_time_slice+0x8c>)
   1b6c2:	6812      	ldr	r2, [r2, #0]
   1b6c4:	b322      	cbz	r2, 1b710 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1b6c6:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   1b6c8:	2a7f      	cmp	r2, #127	; 0x7f
   1b6ca:	d821      	bhi.n	1b710 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   1b6cc:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   1b6ce:	f012 0f1f 	tst.w	r2, #31
   1b6d2:	d11d      	bne.n	1b710 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b6d4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1b6d8:	4a14      	ldr	r2, [pc, #80]	; (1b72c <z_time_slice+0x90>)
   1b6da:	6812      	ldr	r2, [r2, #0]
   1b6dc:	4291      	cmp	r1, r2
   1b6de:	db17      	blt.n	1b710 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   1b6e0:	4a13      	ldr	r2, [pc, #76]	; (1b730 <z_time_slice+0x94>)
   1b6e2:	4293      	cmp	r3, r2
   1b6e4:	d014      	beq.n	1b710 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   1b6e6:	4a0e      	ldr	r2, [pc, #56]	; (1b720 <z_time_slice+0x84>)
   1b6e8:	6912      	ldr	r2, [r2, #16]
   1b6ea:	4282      	cmp	r2, r0
   1b6ec:	dd0a      	ble.n	1b704 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   1b6ee:	1a10      	subs	r0, r2, r0
   1b6f0:	4b0b      	ldr	r3, [pc, #44]	; (1b720 <z_time_slice+0x84>)
   1b6f2:	6118      	str	r0, [r3, #16]
   1b6f4:	e00f      	b.n	1b716 <z_time_slice+0x7a>
		z_reset_time_slice();
   1b6f6:	f7ff fee1 	bl	1b4bc <z_reset_time_slice>
	__asm__ volatile(
   1b6fa:	f384 8811 	msr	BASEPRI, r4
   1b6fe:	f3bf 8f6f 	isb	sy
		return;
   1b702:	e00c      	b.n	1b71e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   1b704:	4618      	mov	r0, r3
   1b706:	f7ff ff85 	bl	1b614 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   1b70a:	f7ff fed7 	bl	1b4bc <z_reset_time_slice>
   1b70e:	e002      	b.n	1b716 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1b710:	4b03      	ldr	r3, [pc, #12]	; (1b720 <z_time_slice+0x84>)
   1b712:	2200      	movs	r2, #0
   1b714:	611a      	str	r2, [r3, #16]
   1b716:	f384 8811 	msr	BASEPRI, r4
   1b71a:	f3bf 8f6f 	isb	sy
}
   1b71e:	bd10      	pop	{r4, pc}
   1b720:	20003158 	.word	0x20003158
   1b724:	2000318c 	.word	0x2000318c
   1b728:	20003194 	.word	0x20003194
   1b72c:	20003190 	.word	0x20003190
   1b730:	20001bc0 	.word	0x20001bc0

0001b734 <ready_thread>:
{
   1b734:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   1b736:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1b738:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1b73c:	2a00      	cmp	r2, #0
   1b73e:	db2d      	blt.n	1b79c <ready_thread+0x68>
   1b740:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b742:	f013 0f1f 	tst.w	r3, #31
   1b746:	d105      	bne.n	1b754 <ready_thread+0x20>
	return node->next != NULL;
   1b748:	6982      	ldr	r2, [r0, #24]
   1b74a:	b10a      	cbz	r2, 1b750 <ready_thread+0x1c>
   1b74c:	2200      	movs	r2, #0
   1b74e:	e002      	b.n	1b756 <ready_thread+0x22>
   1b750:	2201      	movs	r2, #1
   1b752:	e000      	b.n	1b756 <ready_thread+0x22>
   1b754:	2200      	movs	r2, #0
   1b756:	b30a      	cbz	r2, 1b79c <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   1b758:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b75c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1b75e:	4b14      	ldr	r3, [pc, #80]	; (1b7b0 <ready_thread+0x7c>)
   1b760:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b764:	429d      	cmp	r5, r3
   1b766:	d020      	beq.n	1b7aa <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b768:	b16d      	cbz	r5, 1b786 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b76a:	4629      	mov	r1, r5
   1b76c:	4620      	mov	r0, r4
   1b76e:	f005 ff4a 	bl	21606 <z_sched_prio_cmp>
   1b772:	2800      	cmp	r0, #0
   1b774:	dc13      	bgt.n	1b79e <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b776:	b135      	cbz	r5, 1b786 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   1b778:	4b0d      	ldr	r3, [pc, #52]	; (1b7b0 <ready_thread+0x7c>)
   1b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b77c:	429d      	cmp	r5, r3
   1b77e:	d002      	beq.n	1b786 <ready_thread+0x52>
   1b780:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b782:	2d00      	cmp	r5, #0
   1b784:	d1f0      	bne.n	1b768 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   1b786:	4b0a      	ldr	r3, [pc, #40]	; (1b7b0 <ready_thread+0x7c>)
   1b788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1b78a:	f103 0120 	add.w	r1, r3, #32
   1b78e:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1b790:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1b792:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b794:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   1b796:	2000      	movs	r0, #0
   1b798:	f7ff ff16 	bl	1b5c8 <update_cache>
}
   1b79c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   1b79e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1b7a0:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1b7a2:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1b7a4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1b7a6:	606c      	str	r4, [r5, #4]
}
   1b7a8:	e7f5      	b.n	1b796 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b7aa:	2500      	movs	r5, #0
   1b7ac:	e7dc      	b.n	1b768 <ready_thread+0x34>
   1b7ae:	bf00      	nop
   1b7b0:	20003158 	.word	0x20003158

0001b7b4 <z_sched_start>:
{
   1b7b4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7b6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b7ba:	f3ef 8411 	mrs	r4, BASEPRI
   1b7be:	f383 8812 	msr	BASEPRI_MAX, r3
   1b7c2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1b7c6:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   1b7c8:	f013 0f04 	tst.w	r3, #4
   1b7cc:	d104      	bne.n	1b7d8 <z_sched_start+0x24>
	__asm__ volatile(
   1b7ce:	f384 8811 	msr	BASEPRI, r4
   1b7d2:	f3bf 8f6f 	isb	sy
}
   1b7d6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b7d8:	f023 0304 	bic.w	r3, r3, #4
   1b7dc:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   1b7de:	f7ff ffa9 	bl	1b734 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b7e2:	4621      	mov	r1, r4
   1b7e4:	4801      	ldr	r0, [pc, #4]	; (1b7ec <z_sched_start+0x38>)
   1b7e6:	f7ff febb 	bl	1b560 <z_reschedule>
   1b7ea:	e7f4      	b.n	1b7d6 <z_sched_start+0x22>
   1b7ec:	20003190 	.word	0x20003190

0001b7f0 <unready_thread>:
{
   1b7f0:	b510      	push	{r4, lr}
   1b7f2:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   1b7f4:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   1b7f6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b7fa:	2b00      	cmp	r3, #0
   1b7fc:	db08      	blt.n	1b810 <unready_thread+0x20>
	update_cache(thread == _current);
   1b7fe:	4b08      	ldr	r3, [pc, #32]	; (1b820 <unready_thread+0x30>)
   1b800:	6898      	ldr	r0, [r3, #8]
   1b802:	42a0      	cmp	r0, r4
   1b804:	bf14      	ite	ne
   1b806:	2000      	movne	r0, #0
   1b808:	2001      	moveq	r0, #1
   1b80a:	f7ff fedd 	bl	1b5c8 <update_cache>
}
   1b80e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b814:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   1b816:	4601      	mov	r1, r0
   1b818:	4802      	ldr	r0, [pc, #8]	; (1b824 <unready_thread+0x34>)
   1b81a:	f005 ff32 	bl	21682 <z_priq_dumb_remove>
}
   1b81e:	e7ee      	b.n	1b7fe <unready_thread+0xe>
   1b820:	20003158 	.word	0x20003158
   1b824:	20003178 	.word	0x20003178

0001b828 <z_pend_curr>:
{
   1b828:	b510      	push	{r4, lr}
   1b82a:	460c      	mov	r4, r1
   1b82c:	4611      	mov	r1, r2
	pending_current = _current;
   1b82e:	4b06      	ldr	r3, [pc, #24]	; (1b848 <z_pend_curr+0x20>)
   1b830:	6898      	ldr	r0, [r3, #8]
   1b832:	4b06      	ldr	r3, [pc, #24]	; (1b84c <z_pend_curr+0x24>)
   1b834:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1b836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b83a:	f005 ffce 	bl	217da <pend>
   1b83e:	4620      	mov	r0, r4
   1b840:	f7f6 fb0c 	bl	11e5c <arch_swap>
}
   1b844:	bd10      	pop	{r4, pc}
   1b846:	bf00      	nop
   1b848:	20003158 	.word	0x20003158
   1b84c:	2000318c 	.word	0x2000318c

0001b850 <z_set_prio>:
{
   1b850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b854:	4604      	mov	r4, r0
   1b856:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   1b858:	2300      	movs	r3, #0
	__asm__ volatile(
   1b85a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b85e:	f3ef 8611 	mrs	r6, BASEPRI
   1b862:	f382 8812 	msr	BASEPRI_MAX, r2
   1b866:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   1b86a:	4698      	mov	r8, r3
   1b86c:	e008      	b.n	1b880 <z_set_prio+0x30>
		if (need_sched) {
   1b86e:	f012 0801 	ands.w	r8, r2, #1
   1b872:	d111      	bne.n	1b898 <z_set_prio+0x48>
			thread->base.prio = prio;
   1b874:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   1b876:	f386 8811 	msr	BASEPRI, r6
   1b87a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b87e:	2301      	movs	r3, #1
   1b880:	461a      	mov	r2, r3
   1b882:	2b00      	cmp	r3, #0
   1b884:	d13d      	bne.n	1b902 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   1b886:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1b888:	f013 0f1f 	tst.w	r3, #31
   1b88c:	d1ef      	bne.n	1b86e <z_set_prio+0x1e>
	return node->next != NULL;
   1b88e:	69a1      	ldr	r1, [r4, #24]
   1b890:	2900      	cmp	r1, #0
   1b892:	d1ec      	bne.n	1b86e <z_set_prio+0x1e>
   1b894:	2201      	movs	r2, #1
   1b896:	e7ea      	b.n	1b86e <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b89c:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   1b89e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 1b90c <z_set_prio+0xbc>
   1b8a2:	4621      	mov	r1, r4
   1b8a4:	4648      	mov	r0, r9
   1b8a6:	f005 feec 	bl	21682 <z_priq_dumb_remove>
				thread->base.prio = prio;
   1b8aa:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1b8ac:	7b63      	ldrb	r3, [r4, #13]
   1b8ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b8b2:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1b8b4:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8b8:	454d      	cmp	r5, r9
   1b8ba:	d020      	beq.n	1b8fe <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8bc:	b16d      	cbz	r5, 1b8da <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1b8be:	4629      	mov	r1, r5
   1b8c0:	4620      	mov	r0, r4
   1b8c2:	f005 fea0 	bl	21606 <z_sched_prio_cmp>
   1b8c6:	2800      	cmp	r0, #0
   1b8c8:	dc13      	bgt.n	1b8f2 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b8ca:	b135      	cbz	r5, 1b8da <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   1b8cc:	4b0e      	ldr	r3, [pc, #56]	; (1b908 <z_set_prio+0xb8>)
   1b8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b8d0:	429d      	cmp	r5, r3
   1b8d2:	d002      	beq.n	1b8da <z_set_prio+0x8a>
   1b8d4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8d6:	2d00      	cmp	r5, #0
   1b8d8:	d1f0      	bne.n	1b8bc <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   1b8da:	4b0b      	ldr	r3, [pc, #44]	; (1b908 <z_set_prio+0xb8>)
   1b8dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1b8de:	f103 0120 	add.w	r1, r3, #32
   1b8e2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1b8e4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1b8e6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1b8e8:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   1b8ea:	2001      	movs	r0, #1
   1b8ec:	f7ff fe6c 	bl	1b5c8 <update_cache>
   1b8f0:	e7c1      	b.n	1b876 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   1b8f2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   1b8f4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1b8f6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1b8f8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1b8fa:	606c      	str	r4, [r5, #4]
}
   1b8fc:	e7f5      	b.n	1b8ea <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8fe:	2500      	movs	r5, #0
   1b900:	e7dc      	b.n	1b8bc <z_set_prio+0x6c>
}
   1b902:	4640      	mov	r0, r8
   1b904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b908:	20003158 	.word	0x20003158
   1b90c:	20003178 	.word	0x20003178

0001b910 <z_impl_k_thread_suspend>:
{
   1b910:	b538      	push	{r3, r4, r5, lr}
   1b912:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b914:	3018      	adds	r0, #24
   1b916:	f006 f832 	bl	2197e <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1b91a:	2300      	movs	r3, #0
	__asm__ volatile(
   1b91c:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b920:	f3ef 8511 	mrs	r5, BASEPRI
   1b924:	f382 8812 	msr	BASEPRI_MAX, r2
   1b928:	f3bf 8f6f 	isb	sy
   1b92c:	e010      	b.n	1b950 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b92e:	7b63      	ldrb	r3, [r4, #13]
   1b930:	f043 0310 	orr.w	r3, r3, #16
   1b934:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b936:	4b15      	ldr	r3, [pc, #84]	; (1b98c <z_impl_k_thread_suspend+0x7c>)
   1b938:	6898      	ldr	r0, [r3, #8]
   1b93a:	42a0      	cmp	r0, r4
   1b93c:	bf14      	ite	ne
   1b93e:	2000      	movne	r0, #0
   1b940:	2001      	moveq	r0, #1
   1b942:	f7ff fe41 	bl	1b5c8 <update_cache>
	__asm__ volatile(
   1b946:	f385 8811 	msr	BASEPRI, r5
   1b94a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b94e:	2301      	movs	r3, #1
   1b950:	b963      	cbnz	r3, 1b96c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1b952:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   1b954:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b958:	2b00      	cmp	r3, #0
   1b95a:	dae8      	bge.n	1b92e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b95c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1b960:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   1b962:	4621      	mov	r1, r4
   1b964:	480a      	ldr	r0, [pc, #40]	; (1b990 <z_impl_k_thread_suspend+0x80>)
   1b966:	f005 fe8c 	bl	21682 <z_priq_dumb_remove>
}
   1b96a:	e7e0      	b.n	1b92e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   1b96c:	4b07      	ldr	r3, [pc, #28]	; (1b98c <z_impl_k_thread_suspend+0x7c>)
   1b96e:	689b      	ldr	r3, [r3, #8]
   1b970:	42a3      	cmp	r3, r4
   1b972:	d000      	beq.n	1b976 <z_impl_k_thread_suspend+0x66>
}
   1b974:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b976:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b97a:	f3ef 8011 	mrs	r0, BASEPRI
   1b97e:	f383 8812 	msr	BASEPRI_MAX, r3
   1b982:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1b986:	f005 fe67 	bl	21658 <z_reschedule_irqlock>
   1b98a:	e7f3      	b.n	1b974 <z_impl_k_thread_suspend+0x64>
   1b98c:	20003158 	.word	0x20003158
   1b990:	20003178 	.word	0x20003178

0001b994 <k_sched_unlock>:

void k_sched_unlock(void)
{
   1b994:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   1b996:	2300      	movs	r3, #0
   1b998:	f04f 0240 	mov.w	r2, #64	; 0x40
   1b99c:	f3ef 8411 	mrs	r4, BASEPRI
   1b9a0:	f382 8812 	msr	BASEPRI_MAX, r2
   1b9a4:	f3bf 8f6f 	isb	sy
   1b9a8:	b96b      	cbnz	r3, 1b9c6 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   1b9aa:	4b0c      	ldr	r3, [pc, #48]	; (1b9dc <k_sched_unlock+0x48>)
   1b9ac:	689a      	ldr	r2, [r3, #8]
   1b9ae:	7bd3      	ldrb	r3, [r2, #15]
   1b9b0:	3301      	adds	r3, #1
   1b9b2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b9b4:	2000      	movs	r0, #0
   1b9b6:	f7ff fe07 	bl	1b5c8 <update_cache>
	__asm__ volatile(
   1b9ba:	f384 8811 	msr	BASEPRI, r4
   1b9be:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1b9c2:	2301      	movs	r3, #1
   1b9c4:	e7f0      	b.n	1b9a8 <k_sched_unlock+0x14>
	__asm__ volatile(
   1b9c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b9ca:	f3ef 8011 	mrs	r0, BASEPRI
   1b9ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1b9d2:	f3bf 8f6f 	isb	sy
   1b9d6:	f005 fe3f 	bl	21658 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   1b9da:	bd10      	pop	{r4, pc}
   1b9dc:	20003158 	.word	0x20003158

0001b9e0 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   1b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   1b9e2:	7b43      	ldrb	r3, [r0, #13]
   1b9e4:	f013 0f08 	tst.w	r3, #8
   1b9e8:	d145      	bne.n	1ba76 <end_thread+0x96>
   1b9ea:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   1b9ec:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b9f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b9f4:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1b9f6:	f013 0f80 	tst.w	r3, #128	; 0x80
   1b9fa:	d114      	bne.n	1ba26 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   1b9fc:	68ab      	ldr	r3, [r5, #8]
   1b9fe:	b15b      	cbz	r3, 1ba18 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1ba00:	4628      	mov	r0, r5
   1ba02:	f005 fdfe 	bl	21602 <pended_on_thread>
   1ba06:	4629      	mov	r1, r5
   1ba08:	f005 fe3b 	bl	21682 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ba0c:	7b6b      	ldrb	r3, [r5, #13]
   1ba0e:	f023 0302 	bic.w	r3, r3, #2
   1ba12:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   1ba14:	2300      	movs	r3, #0
   1ba16:	60ab      	str	r3, [r5, #8]
   1ba18:	f105 0018 	add.w	r0, r5, #24
   1ba1c:	f005 ffaf 	bl	2197e <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1ba20:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ba24:	e01c      	b.n	1ba60 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ba26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ba2a:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   1ba2c:	4601      	mov	r1, r0
   1ba2e:	4812      	ldr	r0, [pc, #72]	; (1ba78 <end_thread+0x98>)
   1ba30:	f005 fe27 	bl	21682 <z_priq_dumb_remove>
}
   1ba34:	e7e2      	b.n	1b9fc <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1ba36:	4620      	mov	r0, r4
   1ba38:	f005 fde3 	bl	21602 <pended_on_thread>
   1ba3c:	4621      	mov	r1, r4
   1ba3e:	f005 fe20 	bl	21682 <z_priq_dumb_remove>
   1ba42:	7b63      	ldrb	r3, [r4, #13]
   1ba44:	f023 0302 	bic.w	r3, r3, #2
   1ba48:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1ba4a:	2600      	movs	r6, #0
   1ba4c:	60a6      	str	r6, [r4, #8]
   1ba4e:	f104 0018 	add.w	r0, r4, #24
   1ba52:	f005 ff94 	bl	2197e <z_abort_timeout>
   1ba56:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   1ba5a:	4620      	mov	r0, r4
   1ba5c:	f7ff fe6a 	bl	1b734 <ready_thread>
	return list->head == list;
   1ba60:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba62:	42bc      	cmp	r4, r7
   1ba64:	d001      	beq.n	1ba6a <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1ba66:	2c00      	cmp	r4, #0
   1ba68:	d1e5      	bne.n	1ba36 <end_thread+0x56>
		update_cache(1);
   1ba6a:	2001      	movs	r0, #1
   1ba6c:	f7ff fdac 	bl	1b5c8 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1ba70:	4628      	mov	r0, r5
   1ba72:	f7ff f8e5 	bl	1ac40 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1ba76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba78:	20003178 	.word	0x20003178

0001ba7c <z_sched_init>:
{
   1ba7c:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   1ba7e:	4b05      	ldr	r3, [pc, #20]	; (1ba94 <z_sched_init+0x18>)
   1ba80:	f103 0220 	add.w	r2, r3, #32
   1ba84:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   1ba86:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ba88:	2100      	movs	r1, #0
   1ba8a:	4608      	mov	r0, r1
   1ba8c:	f7ff fd2c 	bl	1b4e8 <k_sched_time_slice_set>
}
   1ba90:	bd08      	pop	{r3, pc}
   1ba92:	bf00      	nop
   1ba94:	20003158 	.word	0x20003158

0001ba98 <z_impl_k_yield>:
{
   1ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba9e:	f3ef 8611 	mrs	r6, BASEPRI
   1baa2:	f383 8812 	msr	BASEPRI_MAX, r3
   1baa6:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   1baaa:	4c1c      	ldr	r4, [pc, #112]	; (1bb1c <z_impl_k_yield+0x84>)
   1baac:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1baae:	7b4b      	ldrb	r3, [r1, #13]
   1bab0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bab4:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   1bab6:	f104 0720 	add.w	r7, r4, #32
   1baba:	4638      	mov	r0, r7
   1babc:	f005 fde1 	bl	21682 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   1bac0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1bac2:	7b6b      	ldrb	r3, [r5, #13]
   1bac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bac8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   1baca:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bacc:	42bc      	cmp	r4, r7
   1bace:	d023      	beq.n	1bb18 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bad0:	b16c      	cbz	r4, 1baee <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1bad2:	4621      	mov	r1, r4
   1bad4:	4628      	mov	r0, r5
   1bad6:	f005 fd96 	bl	21606 <z_sched_prio_cmp>
   1bada:	2800      	cmp	r0, #0
   1badc:	dc16      	bgt.n	1bb0c <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bade:	b134      	cbz	r4, 1baee <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   1bae0:	4b0e      	ldr	r3, [pc, #56]	; (1bb1c <z_impl_k_yield+0x84>)
   1bae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bae4:	429c      	cmp	r4, r3
   1bae6:	d002      	beq.n	1baee <z_impl_k_yield+0x56>
   1bae8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1baea:	2c00      	cmp	r4, #0
   1baec:	d1f0      	bne.n	1bad0 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   1baee:	4b0b      	ldr	r3, [pc, #44]	; (1bb1c <z_impl_k_yield+0x84>)
   1baf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   1baf2:	f103 0120 	add.w	r1, r3, #32
   1baf6:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1baf8:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1bafa:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1bafc:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1bafe:	2001      	movs	r0, #1
   1bb00:	f7ff fd62 	bl	1b5c8 <update_cache>
   1bb04:	4630      	mov	r0, r6
   1bb06:	f7f6 f9a9 	bl	11e5c <arch_swap>
}
   1bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   1bb0c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1bb0e:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1bb10:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1bb12:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1bb14:	6065      	str	r5, [r4, #4]
}
   1bb16:	e7f2      	b.n	1bafe <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bb18:	2400      	movs	r4, #0
   1bb1a:	e7d9      	b.n	1bad0 <z_impl_k_yield+0x38>
   1bb1c:	20003158 	.word	0x20003158

0001bb20 <z_tick_sleep>:
{
   1bb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb24:	4604      	mov	r4, r0
   1bb26:	460d      	mov	r5, r1
	if (ticks == 0) {
   1bb28:	ea54 0105 	orrs.w	r1, r4, r5
   1bb2c:	d037      	beq.n	1bb9e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1bb2e:	f06f 0101 	mvn.w	r1, #1
   1bb32:	1a0a      	subs	r2, r1, r0
   1bb34:	f04f 31ff 	mov.w	r1, #4294967295
   1bb38:	eb61 0305 	sbc.w	r3, r1, r5
   1bb3c:	2a01      	cmp	r2, #1
   1bb3e:	f173 0300 	sbcs.w	r3, r3, #0
   1bb42:	db30      	blt.n	1bba6 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1bb44:	f06f 0601 	mvn.w	r6, #1
   1bb48:	1a36      	subs	r6, r6, r0
   1bb4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb4e:	f3ef 8811 	mrs	r8, BASEPRI
   1bb52:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb56:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1bb5a:	4f16      	ldr	r7, [pc, #88]	; (1bbb4 <z_tick_sleep+0x94>)
   1bb5c:	68b8      	ldr	r0, [r7, #8]
   1bb5e:	4b16      	ldr	r3, [pc, #88]	; (1bbb8 <z_tick_sleep+0x98>)
   1bb60:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1bb62:	f7ff fe45 	bl	1b7f0 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1bb66:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1bb68:	4622      	mov	r2, r4
   1bb6a:	462b      	mov	r3, r5
   1bb6c:	4913      	ldr	r1, [pc, #76]	; (1bbbc <z_tick_sleep+0x9c>)
   1bb6e:	3018      	adds	r0, #24
   1bb70:	f000 f904 	bl	1bd7c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1bb74:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bb76:	7b53      	ldrb	r3, [r2, #13]
   1bb78:	f043 0310 	orr.w	r3, r3, #16
   1bb7c:	7353      	strb	r3, [r2, #13]
   1bb7e:	4640      	mov	r0, r8
   1bb80:	f7f6 f96c 	bl	11e5c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1bb84:	2500      	movs	r5, #0
   1bb86:	f005 ff59 	bl	21a3c <sys_clock_tick_get_32>
   1bb8a:	1a34      	subs	r4, r6, r0
   1bb8c:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1bb90:	2c01      	cmp	r4, #1
   1bb92:	f175 0300 	sbcs.w	r3, r5, #0
   1bb96:	da0a      	bge.n	1bbae <z_tick_sleep+0x8e>
	return 0;
   1bb98:	2000      	movs	r0, #0
}
   1bb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   1bb9e:	f7ff ff7b 	bl	1ba98 <z_impl_k_yield>
		return 0;
   1bba2:	2000      	movs	r0, #0
   1bba4:	e7f9      	b.n	1bb9a <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1bba6:	f005 ff49 	bl	21a3c <sys_clock_tick_get_32>
   1bbaa:	1906      	adds	r6, r0, r4
   1bbac:	e7cd      	b.n	1bb4a <z_tick_sleep+0x2a>
		return ticks;
   1bbae:	4620      	mov	r0, r4
   1bbb0:	e7f3      	b.n	1bb9a <z_tick_sleep+0x7a>
   1bbb2:	bf00      	nop
   1bbb4:	20003158 	.word	0x20003158
   1bbb8:	2000318c 	.word	0x2000318c
   1bbbc:	0002171f 	.word	0x0002171f

0001bbc0 <z_impl_k_sleep>:
{
   1bbc0:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bbc2:	f1b1 3fff 	cmp.w	r1, #4294967295
   1bbc6:	bf08      	it	eq
   1bbc8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   1bbcc:	d01a      	beq.n	1bc04 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   1bbce:	f7ff ffa7 	bl	1bb20 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   1bbd2:	4604      	mov	r4, r0
   1bbd4:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   1bbd6:	0169      	lsls	r1, r5, #5
   1bbd8:	0143      	lsls	r3, r0, #5
   1bbda:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1bbde:	1a18      	subs	r0, r3, r0
   1bbe0:	eb62 0305 	sbc.w	r3, r2, r5
   1bbe4:	009a      	lsls	r2, r3, #2
   1bbe6:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   1bbea:	0081      	lsls	r1, r0, #2
   1bbec:	4613      	mov	r3, r2
   1bbee:	1908      	adds	r0, r1, r4
   1bbf0:	eb45 0303 	adc.w	r3, r5, r3
   1bbf4:	00da      	lsls	r2, r3, #3
   1bbf6:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1bbfa:	00c1      	lsls	r1, r0, #3
   1bbfc:	0bc8      	lsrs	r0, r1, #15
   1bbfe:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   1bc02:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   1bc04:	4b03      	ldr	r3, [pc, #12]	; (1bc14 <z_impl_k_sleep+0x54>)
   1bc06:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bc08:	f7ff fe82 	bl	1b910 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1bc0c:	f04f 30ff 	mov.w	r0, #4294967295
   1bc10:	e7f7      	b.n	1bc02 <z_impl_k_sleep+0x42>
   1bc12:	bf00      	nop
   1bc14:	20003158 	.word	0x20003158

0001bc18 <z_impl_z_current_get>:
}
   1bc18:	4b01      	ldr	r3, [pc, #4]	; (1bc20 <z_impl_z_current_get+0x8>)
   1bc1a:	6898      	ldr	r0, [r3, #8]
   1bc1c:	4770      	bx	lr
   1bc1e:	bf00      	nop
   1bc20:	20003158 	.word	0x20003158

0001bc24 <z_impl_k_is_preempt_thread>:
   1bc24:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   1bc28:	b933      	cbnz	r3, 1bc38 <z_impl_k_is_preempt_thread+0x14>
   1bc2a:	4b05      	ldr	r3, [pc, #20]	; (1bc40 <z_impl_k_is_preempt_thread+0x1c>)
   1bc2c:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1bc2e:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   1bc30:	2b7f      	cmp	r3, #127	; 0x7f
   1bc32:	d803      	bhi.n	1bc3c <z_impl_k_is_preempt_thread+0x18>
   1bc34:	2001      	movs	r0, #1
   1bc36:	4770      	bx	lr
   1bc38:	2000      	movs	r0, #0
   1bc3a:	4770      	bx	lr
   1bc3c:	2000      	movs	r0, #0
}
   1bc3e:	4770      	bx	lr
   1bc40:	20003158 	.word	0x20003158

0001bc44 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   1bc44:	b538      	push	{r3, r4, r5, lr}
   1bc46:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bc4a:	f3ef 8511 	mrs	r5, BASEPRI
   1bc4e:	f383 8812 	msr	BASEPRI_MAX, r3
   1bc52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1bc56:	7b43      	ldrb	r3, [r0, #13]
   1bc58:	f013 0f08 	tst.w	r3, #8
   1bc5c:	d004      	beq.n	1bc68 <z_thread_abort+0x24>
	__asm__ volatile(
   1bc5e:	f385 8811 	msr	BASEPRI, r5
   1bc62:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1bc66:	bd38      	pop	{r3, r4, r5, pc}
   1bc68:	4604      	mov	r4, r0
	end_thread(thread);
   1bc6a:	f7ff feb9 	bl	1b9e0 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   1bc6e:	4b08      	ldr	r3, [pc, #32]	; (1bc90 <z_thread_abort+0x4c>)
   1bc70:	689b      	ldr	r3, [r3, #8]
   1bc72:	42a3      	cmp	r3, r4
   1bc74:	d004      	beq.n	1bc80 <z_thread_abort+0x3c>
   1bc76:	f385 8811 	msr	BASEPRI, r5
   1bc7a:	f3bf 8f6f 	isb	sy
   1bc7e:	e7f2      	b.n	1bc66 <z_thread_abort+0x22>
   1bc80:	f3ef 8305 	mrs	r3, IPSR
   1bc84:	2b00      	cmp	r3, #0
   1bc86:	d1f6      	bne.n	1bc76 <z_thread_abort+0x32>
   1bc88:	4628      	mov	r0, r5
   1bc8a:	f7f6 f8e7 	bl	11e5c <arch_swap>
	return ret;
   1bc8e:	e7f2      	b.n	1bc76 <z_thread_abort+0x32>
   1bc90:	20003158 	.word	0x20003158

0001bc94 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1bc94:	b5d0      	push	{r4, r6, r7, lr}
   1bc96:	b082      	sub	sp, #8
   1bc98:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1bc9a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1bc9e:	e9cd 6700 	strd	r6, r7, [sp]
   1bca2:	f7ff fdc1 	bl	1b828 <z_pend_curr>

	if (data != NULL) {
   1bca6:	b11c      	cbz	r4, 1bcb0 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   1bca8:	4b02      	ldr	r3, [pc, #8]	; (1bcb4 <z_sched_wait+0x20>)
   1bcaa:	689b      	ldr	r3, [r3, #8]
   1bcac:	695b      	ldr	r3, [r3, #20]
   1bcae:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1bcb0:	b002      	add	sp, #8
   1bcb2:	bdd0      	pop	{r4, r6, r7, pc}
   1bcb4:	20003158 	.word	0x20003158

0001bcb8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1bcb8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   1bcba:	4806      	ldr	r0, [pc, #24]	; (1bcd4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   1bcbc:	4a06      	ldr	r2, [pc, #24]	; (1bcd8 <z_data_copy+0x20>)
   1bcbe:	1a12      	subs	r2, r2, r0
   1bcc0:	4906      	ldr	r1, [pc, #24]	; (1bcdc <z_data_copy+0x24>)
   1bcc2:	f002 f8b0 	bl	1de26 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1bcc6:	4a06      	ldr	r2, [pc, #24]	; (1bce0 <z_data_copy+0x28>)
   1bcc8:	4906      	ldr	r1, [pc, #24]	; (1bce4 <z_data_copy+0x2c>)
   1bcca:	4807      	ldr	r0, [pc, #28]	; (1bce8 <z_data_copy+0x30>)
   1bccc:	f002 f8ab 	bl	1de26 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1bcd0:	bd08      	pop	{r3, pc}
   1bcd2:	bf00      	nop
   1bcd4:	20000000 	.word	0x20000000
   1bcd8:	2000086c 	.word	0x2000086c
   1bcdc:	000243b8 	.word	0x000243b8
   1bce0:	00000000 	.word	0x00000000
   1bce4:	000243b8 	.word	0x000243b8
   1bce8:	20000000 	.word	0x20000000

0001bcec <first>:
	return list->head == list;
   1bcec:	4b03      	ldr	r3, [pc, #12]	; (1bcfc <first+0x10>)
   1bcee:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bcf0:	4298      	cmp	r0, r3
   1bcf2:	d000      	beq.n	1bcf6 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   1bcf4:	4770      	bx	lr
   1bcf6:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   1bcf8:	e7fc      	b.n	1bcf4 <first+0x8>
   1bcfa:	bf00      	nop
   1bcfc:	20000670 	.word	0x20000670

0001bd00 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bd00:	b130      	cbz	r0, 1bd10 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1bd02:	4a04      	ldr	r2, [pc, #16]	; (1bd14 <next+0x14>)
   1bd04:	6852      	ldr	r2, [r2, #4]
   1bd06:	4290      	cmp	r0, r2
   1bd08:	d001      	beq.n	1bd0e <next+0xe>
   1bd0a:	6800      	ldr	r0, [r0, #0]
   1bd0c:	4770      	bx	lr
   1bd0e:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1bd10:	4770      	bx	lr
   1bd12:	bf00      	nop
   1bd14:	20000670 	.word	0x20000670

0001bd18 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   1bd18:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bd1a:	4b04      	ldr	r3, [pc, #16]	; (1bd2c <elapsed+0x14>)
   1bd1c:	681b      	ldr	r3, [r3, #0]
   1bd1e:	b10b      	cbz	r3, 1bd24 <elapsed+0xc>
   1bd20:	2000      	movs	r0, #0
}
   1bd22:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1bd24:	f7fd ff6e 	bl	19c04 <sys_clock_elapsed>
   1bd28:	e7fb      	b.n	1bd22 <elapsed+0xa>
   1bd2a:	bf00      	nop
   1bd2c:	20003198 	.word	0x20003198

0001bd30 <next_timeout>:

static int32_t next_timeout(void)
{
   1bd30:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   1bd32:	f7ff ffdb 	bl	1bcec <first>
   1bd36:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   1bd38:	f7ff ffee 	bl	1bd18 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   1bd3c:	b18c      	cbz	r4, 1bd62 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bd3e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1bd42:	1a12      	subs	r2, r2, r0
   1bd44:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1bd48:	2a01      	cmp	r2, #1
   1bd4a:	f173 0100 	sbcs.w	r1, r3, #0
   1bd4e:	db11      	blt.n	1bd74 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1bd50:	4610      	mov	r0, r2
   1bd52:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1bd56:	f173 0300 	sbcs.w	r3, r3, #0
   1bd5a:	db04      	blt.n	1bd66 <next_timeout+0x36>
   1bd5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bd60:	e001      	b.n	1bd66 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   1bd62:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1bd66:	4b04      	ldr	r3, [pc, #16]	; (1bd78 <next_timeout+0x48>)
   1bd68:	691b      	ldr	r3, [r3, #16]
   1bd6a:	b113      	cbz	r3, 1bd72 <next_timeout+0x42>
   1bd6c:	4283      	cmp	r3, r0
   1bd6e:	da00      	bge.n	1bd72 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   1bd70:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   1bd72:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1bd74:	2000      	movs	r0, #0
   1bd76:	e7f6      	b.n	1bd66 <next_timeout+0x36>
   1bd78:	20003158 	.word	0x20003158

0001bd7c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1bd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd80:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd82:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bd86:	bf08      	it	eq
   1bd88:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bd8c:	f000 8096 	beq.w	1bebc <z_add_timeout+0x140>
   1bd90:	4682      	mov	sl, r0
   1bd92:	4614      	mov	r4, r2
   1bd94:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1bd96:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   1bd98:	2300      	movs	r3, #0
	__asm__ volatile(
   1bd9a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1bd9e:	f3ef 8b11 	mrs	fp, BASEPRI
   1bda2:	f382 8812 	msr	BASEPRI_MAX, r2
   1bda6:	f3bf 8f6f 	isb	sy
   1bdaa:	e02e      	b.n	1be0a <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   1bdac:	2201      	movs	r2, #1
   1bdae:	2300      	movs	r3, #0
   1bdb0:	e04b      	b.n	1be4a <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1bdb2:	f7ff ffb1 	bl	1bd18 <elapsed>
   1bdb6:	1822      	adds	r2, r4, r0
   1bdb8:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   1bdbc:	3201      	adds	r2, #1
   1bdbe:	f143 0300 	adc.w	r3, r3, #0
   1bdc2:	f8ca 2010 	str.w	r2, [sl, #16]
   1bdc6:	f8ca 3014 	str.w	r3, [sl, #20]
   1bdca:	e042      	b.n	1be52 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   1bdcc:	9b00      	ldr	r3, [sp, #0]
   1bdce:	1ac2      	subs	r2, r0, r3
   1bdd0:	9b01      	ldr	r3, [sp, #4]
   1bdd2:	eb61 0303 	sbc.w	r3, r1, r3
   1bdd6:	f8cc 2010 	str.w	r2, [ip, #16]
   1bdda:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1bdde:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1bde2:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   1bde6:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   1bdea:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1bdee:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1bdf2:	f1bc 0f00 	cmp.w	ip, #0
   1bdf6:	d049      	beq.n	1be8c <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1bdf8:	f7ff ff78 	bl	1bcec <first>
   1bdfc:	4582      	cmp	sl, r0
   1bdfe:	d050      	beq.n	1bea2 <z_add_timeout+0x126>
	__asm__ volatile(
   1be00:	f38b 8811 	msr	BASEPRI, fp
   1be04:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1be08:	2301      	movs	r3, #1
   1be0a:	2b00      	cmp	r3, #0
   1be0c:	d156      	bne.n	1bebc <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1be0e:	f06f 0301 	mvn.w	r3, #1
   1be12:	ebb3 0804 	subs.w	r8, r3, r4
   1be16:	f04f 30ff 	mov.w	r0, #4294967295
   1be1a:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1be1e:	f1b8 0f00 	cmp.w	r8, #0
   1be22:	f179 0300 	sbcs.w	r3, r9, #0
   1be26:	dbc4      	blt.n	1bdb2 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1be28:	4a26      	ldr	r2, [pc, #152]	; (1bec4 <z_add_timeout+0x148>)
   1be2a:	6813      	ldr	r3, [r2, #0]
   1be2c:	6852      	ldr	r2, [r2, #4]
   1be2e:	18e3      	adds	r3, r4, r3
   1be30:	eb45 0202 	adc.w	r2, r5, r2
   1be34:	f06f 0101 	mvn.w	r1, #1
   1be38:	1ace      	subs	r6, r1, r3
   1be3a:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   1be3e:	4632      	mov	r2, r6
   1be40:	463b      	mov	r3, r7
   1be42:	2e01      	cmp	r6, #1
   1be44:	f177 0100 	sbcs.w	r1, r7, #0
   1be48:	dbb0      	blt.n	1bdac <z_add_timeout+0x30>
   1be4a:	f8ca 2010 	str.w	r2, [sl, #16]
   1be4e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1be52:	f7ff ff4b 	bl	1bcec <first>
   1be56:	4684      	mov	ip, r0
   1be58:	f1bc 0f00 	cmp.w	ip, #0
   1be5c:	d0c9      	beq.n	1bdf2 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   1be5e:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   1be62:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   1be66:	e9cd 2300 	strd	r2, r3, [sp]
   1be6a:	4282      	cmp	r2, r0
   1be6c:	418b      	sbcs	r3, r1
   1be6e:	dbad      	blt.n	1bdcc <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   1be70:	9b00      	ldr	r3, [sp, #0]
   1be72:	1a1a      	subs	r2, r3, r0
   1be74:	9b01      	ldr	r3, [sp, #4]
   1be76:	eb63 0301 	sbc.w	r3, r3, r1
   1be7a:	f8ca 2010 	str.w	r2, [sl, #16]
   1be7e:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   1be82:	4660      	mov	r0, ip
   1be84:	f7ff ff3c 	bl	1bd00 <next>
   1be88:	4684      	mov	ip, r0
   1be8a:	e7e5      	b.n	1be58 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   1be8c:	4b0e      	ldr	r3, [pc, #56]	; (1bec8 <z_add_timeout+0x14c>)
   1be8e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1be90:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   1be94:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   1be98:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1be9c:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1bea0:	e7aa      	b.n	1bdf8 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1bea2:	f7ff ff45 	bl	1bd30 <next_timeout>

			if (next_time == 0 ||
   1bea6:	4603      	mov	r3, r0
   1bea8:	b118      	cbz	r0, 1beb2 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   1beaa:	4a08      	ldr	r2, [pc, #32]	; (1becc <z_add_timeout+0x150>)
   1beac:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1beae:	4282      	cmp	r2, r0
   1beb0:	d0a6      	beq.n	1be00 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1beb2:	2100      	movs	r1, #0
   1beb4:	4618      	mov	r0, r3
   1beb6:	f7fd fe71 	bl	19b9c <sys_clock_set_timeout>
   1beba:	e7a1      	b.n	1be00 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1bebc:	b003      	add	sp, #12
   1bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bec2:	bf00      	nop
   1bec4:	20001e08 	.word	0x20001e08
   1bec8:	20000670 	.word	0x20000670
   1becc:	20003158 	.word	0x20003158

0001bed0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1bed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bed2:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1bed4:	f7ff fbe2 	bl	1b69c <z_time_slice>
	__asm__ volatile(
   1bed8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bedc:	f3ef 8511 	mrs	r5, BASEPRI
   1bee0:	f383 8812 	msr	BASEPRI_MAX, r3
   1bee4:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1bee8:	4b28      	ldr	r3, [pc, #160]	; (1bf8c <sys_clock_announce+0xbc>)
   1beea:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1beec:	f7ff fefe 	bl	1bcec <first>
   1bef0:	4604      	mov	r4, r0
   1bef2:	b350      	cbz	r0, 1bf4a <sys_clock_announce+0x7a>
   1bef4:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1bef8:	4b24      	ldr	r3, [pc, #144]	; (1bf8c <sys_clock_announce+0xbc>)
   1befa:	681b      	ldr	r3, [r3, #0]
   1befc:	17d9      	asrs	r1, r3, #31
   1befe:	42b3      	cmp	r3, r6
   1bf00:	eb71 0207 	sbcs.w	r2, r1, r7
   1bf04:	db21      	blt.n	1bf4a <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1bf06:	4a22      	ldr	r2, [pc, #136]	; (1bf90 <sys_clock_announce+0xc0>)
   1bf08:	e9d2 0100 	ldrd	r0, r1, [r2]
   1bf0c:	1980      	adds	r0, r0, r6
   1bf0e:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1bf12:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   1bf16:	1b9b      	subs	r3, r3, r6
   1bf18:	4a1c      	ldr	r2, [pc, #112]	; (1bf8c <sys_clock_announce+0xbc>)
   1bf1a:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   1bf1c:	2200      	movs	r2, #0
   1bf1e:	2300      	movs	r3, #0
   1bf20:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   1bf24:	4620      	mov	r0, r4
   1bf26:	f005 fd13 	bl	21950 <remove_timeout>
	__asm__ volatile(
   1bf2a:	f385 8811 	msr	BASEPRI, r5
   1bf2e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   1bf32:	68a3      	ldr	r3, [r4, #8]
   1bf34:	4620      	mov	r0, r4
   1bf36:	4798      	blx	r3
	__asm__ volatile(
   1bf38:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf3c:	f3ef 8511 	mrs	r5, BASEPRI
   1bf40:	f383 8812 	msr	BASEPRI_MAX, r3
   1bf44:	f3bf 8f6f 	isb	sy
   1bf48:	e7d0      	b.n	1beec <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   1bf4a:	b144      	cbz	r4, 1bf5e <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   1bf4c:	4b0f      	ldr	r3, [pc, #60]	; (1bf8c <sys_clock_announce+0xbc>)
   1bf4e:	6819      	ldr	r1, [r3, #0]
   1bf50:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1bf54:	1a52      	subs	r2, r2, r1
   1bf56:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   1bf5a:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   1bf5e:	480c      	ldr	r0, [pc, #48]	; (1bf90 <sys_clock_announce+0xc0>)
   1bf60:	490a      	ldr	r1, [pc, #40]	; (1bf8c <sys_clock_announce+0xbc>)
   1bf62:	680c      	ldr	r4, [r1, #0]
   1bf64:	e9d0 2300 	ldrd	r2, r3, [r0]
   1bf68:	1912      	adds	r2, r2, r4
   1bf6a:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   1bf6e:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   1bf72:	2400      	movs	r4, #0
   1bf74:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1bf76:	f7ff fedb 	bl	1bd30 <next_timeout>
   1bf7a:	4621      	mov	r1, r4
   1bf7c:	f7fd fe0e 	bl	19b9c <sys_clock_set_timeout>
	__asm__ volatile(
   1bf80:	f385 8811 	msr	BASEPRI, r5
   1bf84:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1bf88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf8a:	bf00      	nop
   1bf8c:	20003198 	.word	0x20003198
   1bf90:	20001e08 	.word	0x20001e08

0001bf94 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1bf94:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   1bf96:	2100      	movs	r1, #0
	__asm__ volatile(
   1bf98:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bf9c:	f3ef 8411 	mrs	r4, BASEPRI
   1bfa0:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfa4:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   1bfa8:	2200      	movs	r2, #0
   1bfaa:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   1bfac:	b969      	cbnz	r1, 1bfca <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1bfae:	f7fd fe29 	bl	19c04 <sys_clock_elapsed>
   1bfb2:	4b07      	ldr	r3, [pc, #28]	; (1bfd0 <sys_clock_tick_get+0x3c>)
   1bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1bfb8:	1812      	adds	r2, r2, r0
   1bfba:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1bfbe:	f384 8811 	msr	BASEPRI, r4
   1bfc2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1bfc6:	2101      	movs	r1, #1
   1bfc8:	e7f0      	b.n	1bfac <sys_clock_tick_get+0x18>
	}
	return t;
}
   1bfca:	4610      	mov	r0, r2
   1bfcc:	4619      	mov	r1, r3
   1bfce:	bd10      	pop	{r4, pc}
   1bfd0:	20001e08 	.word	0x20001e08

0001bfd4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1bfd4:	b538      	push	{r3, r4, r5, lr}
   1bfd6:	4604      	mov	r4, r0
	__asm__ volatile(
   1bfd8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bfdc:	f3ef 8511 	mrs	r5, BASEPRI
   1bfe0:	f383 8812 	msr	BASEPRI_MAX, r3
   1bfe4:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1bfe8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1bfec:	ea52 0103 	orrs.w	r1, r2, r3
   1bff0:	d005      	beq.n	1bffe <z_timer_expiration_handler+0x2a>
   1bff2:	f1b3 3fff 	cmp.w	r3, #4294967295
   1bff6:	bf08      	it	eq
   1bff8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1bffc:	d11a      	bne.n	1c034 <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1bffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c000:	3301      	adds	r3, #1
   1c002:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c004:	6a23      	ldr	r3, [r4, #32]
   1c006:	b10b      	cbz	r3, 1c00c <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
   1c008:	4620      	mov	r0, r4
   1c00a:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1c00c:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1c010:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c012:	42a3      	cmp	r3, r4
   1c014:	d012      	beq.n	1c03c <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c016:	b18c      	cbz	r4, 1c03c <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   1c018:	4620      	mov	r0, r4
   1c01a:	f005 fafe 	bl	2161a <z_unpend_thread_no_timeout>
   1c01e:	2300      	movs	r3, #0
   1c020:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   1c024:	f385 8811 	msr	BASEPRI, r5
   1c028:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   1c02c:	4620      	mov	r0, r4
   1c02e:	f005 fb5a 	bl	216e6 <z_ready_thread>
}
   1c032:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c034:	4904      	ldr	r1, [pc, #16]	; (1c048 <z_timer_expiration_handler+0x74>)
   1c036:	f7ff fea1 	bl	1bd7c <z_add_timeout>
   1c03a:	e7e0      	b.n	1bffe <z_timer_expiration_handler+0x2a>
   1c03c:	f385 8811 	msr	BASEPRI, r5
   1c040:	f3bf 8f6f 	isb	sy
		return;
   1c044:	e7f5      	b.n	1c032 <z_timer_expiration_handler+0x5e>
   1c046:	bf00      	nop
   1c048:	0001bfd5 	.word	0x0001bfd5

0001c04c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c050:	b087      	sub	sp, #28
   1c052:	4614      	mov	r4, r2
   1c054:	461d      	mov	r5, r3
   1c056:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
   1c05e:	bf08      	it	eq
   1c060:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   1c064:	d035      	beq.n	1c0d2 <z_impl_k_timer_start+0x86>
   1c066:	4606      	mov	r6, r0
   1c068:	4613      	mov	r3, r2
   1c06a:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c06c:	f1b9 3fff 	cmp.w	r9, #4294967295
   1c070:	bf08      	it	eq
   1c072:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   1c076:	d012      	beq.n	1c09e <z_impl_k_timer_start+0x52>
   1c078:	ea58 0109 	orrs.w	r1, r8, r9
   1c07c:	d00f      	beq.n	1c09e <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   1c07e:	f06f 0701 	mvn.w	r7, #1
   1c082:	ebb7 0708 	subs.w	r7, r7, r8
   1c086:	9702      	str	r7, [sp, #8]
   1c088:	f04f 31ff 	mov.w	r1, #4294967295
   1c08c:	eb61 0709 	sbc.w	r7, r1, r9
   1c090:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1c092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   1c096:	2800      	cmp	r0, #0
   1c098:	f171 0100 	sbcs.w	r1, r1, #0
   1c09c:	db1c      	blt.n	1c0d8 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c09e:	f06f 0101 	mvn.w	r1, #1
   1c0a2:	ebb1 0a03 	subs.w	sl, r1, r3
   1c0a6:	f04f 31ff 	mov.w	r1, #4294967295
   1c0aa:	eb61 0b02 	sbc.w	fp, r1, r2
   1c0ae:	f1ba 0f00 	cmp.w	sl, #0
   1c0b2:	f17b 0100 	sbcs.w	r1, fp, #0
   1c0b6:	db23      	blt.n	1c100 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   1c0b8:	4630      	mov	r0, r6
   1c0ba:	f005 fc60 	bl	2197e <z_abort_timeout>
	timer->period = period;
   1c0be:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1c0c2:	2300      	movs	r3, #0
   1c0c4:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c0c6:	4622      	mov	r2, r4
   1c0c8:	462b      	mov	r3, r5
   1c0ca:	4917      	ldr	r1, [pc, #92]	; (1c128 <z_impl_k_timer_start+0xdc>)
   1c0cc:	4630      	mov	r0, r6
   1c0ce:	f7ff fe55 	bl	1bd7c <z_add_timeout>
		     duration);
}
   1c0d2:	b007      	add	sp, #28
   1c0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   1c0d8:	f118 31ff 	adds.w	r1, r8, #4294967295
   1c0dc:	9104      	str	r1, [sp, #16]
   1c0de:	f149 31ff 	adc.w	r1, r9, #4294967295
   1c0e2:	9105      	str	r1, [sp, #20]
   1c0e4:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   1c0e8:	4638      	mov	r0, r7
   1c0ea:	4641      	mov	r1, r8
   1c0ec:	2f01      	cmp	r7, #1
   1c0ee:	f178 0700 	sbcs.w	r7, r8, #0
   1c0f2:	db02      	blt.n	1c0fa <z_impl_k_timer_start+0xae>
   1c0f4:	4680      	mov	r8, r0
   1c0f6:	4689      	mov	r9, r1
   1c0f8:	e7d1      	b.n	1c09e <z_impl_k_timer_start+0x52>
   1c0fa:	2001      	movs	r0, #1
   1c0fc:	2100      	movs	r1, #0
   1c0fe:	e7f9      	b.n	1c0f4 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c100:	f113 33ff 	adds.w	r3, r3, #4294967295
   1c104:	9300      	str	r3, [sp, #0]
   1c106:	f142 33ff 	adc.w	r3, r2, #4294967295
   1c10a:	9301      	str	r3, [sp, #4]
   1c10c:	e9dd 0100 	ldrd	r0, r1, [sp]
   1c110:	4602      	mov	r2, r0
   1c112:	460b      	mov	r3, r1
   1c114:	2800      	cmp	r0, #0
   1c116:	f171 0100 	sbcs.w	r1, r1, #0
   1c11a:	db02      	blt.n	1c122 <z_impl_k_timer_start+0xd6>
   1c11c:	4614      	mov	r4, r2
   1c11e:	461d      	mov	r5, r3
   1c120:	e7ca      	b.n	1c0b8 <z_impl_k_timer_start+0x6c>
   1c122:	2200      	movs	r2, #0
   1c124:	4613      	mov	r3, r2
   1c126:	e7f9      	b.n	1c11c <z_impl_k_timer_start+0xd0>
   1c128:	0001bfd5 	.word	0x0001bfd5

0001c12c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c130:	b08d      	sub	sp, #52	; 0x34
   1c132:	4605      	mov	r5, r0
   1c134:	9107      	str	r1, [sp, #28]
   1c136:	9202      	str	r2, [sp, #8]
   1c138:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1c13a:	4ba4      	ldr	r3, [pc, #656]	; (1c3cc <z_impl_k_poll+0x2a0>)
   1c13c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   1c140:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   1c144:	2301      	movs	r3, #1
   1c146:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   1c14a:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1c14e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1c152:	4613      	mov	r3, r2
   1c154:	430b      	orrs	r3, r1
   1c156:	bf0c      	ite	eq
   1c158:	2301      	moveq	r3, #1
   1c15a:	2300      	movne	r3, #0
   1c15c:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   1c15e:	2600      	movs	r6, #0
	int events_registered = 0;
   1c160:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   1c162:	e02e      	b.n	1c1c2 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   1c164:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   1c166:	689b      	ldr	r3, [r3, #8]
   1c168:	b1c3      	cbz	r3, 1c19c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   1c16a:	2302      	movs	r3, #2
   1c16c:	9305      	str	r3, [sp, #20]
			return true;
   1c16e:	2301      	movs	r3, #1
   1c170:	e014      	b.n	1c19c <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   1c172:	6923      	ldr	r3, [r4, #16]
	return list->head;
   1c174:	681b      	ldr	r3, [r3, #0]
   1c176:	b18b      	cbz	r3, 1c19c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   1c178:	2304      	movs	r3, #4
   1c17a:	9305      	str	r3, [sp, #20]
			return true;
   1c17c:	2301      	movs	r3, #1
   1c17e:	e00d      	b.n	1c19c <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   1c180:	6923      	ldr	r3, [r4, #16]
   1c182:	689b      	ldr	r3, [r3, #8]
   1c184:	b153      	cbz	r3, 1c19c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   1c186:	2301      	movs	r3, #1
   1c188:	9305      	str	r3, [sp, #20]
   1c18a:	e007      	b.n	1c19c <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   1c18c:	6923      	ldr	r3, [r4, #16]
   1c18e:	6a1b      	ldr	r3, [r3, #32]
   1c190:	b123      	cbz	r3, 1c19c <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   1c192:	2310      	movs	r3, #16
   1c194:	9305      	str	r3, [sp, #20]
			return true;
   1c196:	2301      	movs	r3, #1
   1c198:	e000      	b.n	1c19c <z_impl_k_poll+0x70>
	switch (event->type) {
   1c19a:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   1c19c:	2b00      	cmp	r3, #0
   1c19e:	d03d      	beq.n	1c21c <z_impl_k_poll+0xf0>
	event->poller = NULL;
   1c1a0:	2100      	movs	r1, #0
   1c1a2:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   1c1a4:	68e3      	ldr	r3, [r4, #12]
   1c1a6:	f3c3 3245 	ubfx	r2, r3, #13, #6
   1c1aa:	9805      	ldr	r0, [sp, #20]
   1c1ac:	4302      	orrs	r2, r0
   1c1ae:	f362 3352 	bfi	r3, r2, #13, #6
   1c1b2:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   1c1b4:	7039      	strb	r1, [r7, #0]
   1c1b6:	9b08      	ldr	r3, [sp, #32]
   1c1b8:	f383 8811 	msr	BASEPRI, r3
   1c1bc:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1c1c0:	3601      	adds	r6, #1
   1c1c2:	9b07      	ldr	r3, [sp, #28]
   1c1c4:	42b3      	cmp	r3, r6
   1c1c6:	f340 81bf 	ble.w	1c548 <z_impl_k_poll+0x41c>
	__asm__ volatile(
   1c1ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c1ce:	f3ef 8211 	mrs	r2, BASEPRI
   1c1d2:	f383 8812 	msr	BASEPRI_MAX, r3
   1c1d6:	f3bf 8f6f 	isb	sy
   1c1da:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   1c1dc:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   1c1e0:	00a3      	lsls	r3, r4, #2
   1c1e2:	9309      	str	r3, [sp, #36]	; 0x24
   1c1e4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   1c1e8:	7b63      	ldrb	r3, [r4, #13]
   1c1ea:	f003 031f 	and.w	r3, r3, #31
   1c1ee:	3b01      	subs	r3, #1
   1c1f0:	2b07      	cmp	r3, #7
   1c1f2:	d8d2      	bhi.n	1c19a <z_impl_k_poll+0x6e>
   1c1f4:	a201      	add	r2, pc, #4	; (adr r2, 1c1fc <z_impl_k_poll+0xd0>)
   1c1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1c1fa:	bf00      	nop
   1c1fc:	0001c181 	.word	0x0001c181
   1c200:	0001c165 	.word	0x0001c165
   1c204:	0001c19b 	.word	0x0001c19b
   1c208:	0001c173 	.word	0x0001c173
   1c20c:	0001c19b 	.word	0x0001c19b
   1c210:	0001c19b 	.word	0x0001c19b
   1c214:	0001c19b 	.word	0x0001c19b
   1c218:	0001c18d 	.word	0x0001c18d
		} else if (!just_check && poller->is_polling) {
   1c21c:	9b06      	ldr	r3, [sp, #24]
   1c21e:	2b00      	cmp	r3, #0
   1c220:	d1c9      	bne.n	1c1b6 <z_impl_k_poll+0x8a>
   1c222:	783b      	ldrb	r3, [r7, #0]
   1c224:	2b00      	cmp	r3, #0
   1c226:	d0c6      	beq.n	1c1b6 <z_impl_k_poll+0x8a>
	switch (event->type) {
   1c228:	7b63      	ldrb	r3, [r4, #13]
   1c22a:	f003 031f 	and.w	r3, r3, #31
   1c22e:	3b01      	subs	r3, #1
   1c230:	2b07      	cmp	r3, #7
   1c232:	d846      	bhi.n	1c2c2 <z_impl_k_poll+0x196>
   1c234:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c238:	000800cc 	.word	0x000800cc
   1c23c:	006a0045 	.word	0x006a0045
   1c240:	00450045 	.word	0x00450045
   1c244:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   1c248:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c24c:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1c250:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c254:	4598      	cmp	r8, r3
   1c256:	d02b      	beq.n	1c2b0 <z_impl_k_poll+0x184>
   1c258:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c25c:	b343      	cbz	r3, 1c2b0 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c25e:	6898      	ldr	r0, [r3, #8]
   1c260:	f005 fc4d 	bl	21afe <poller_thread>
   1c264:	900b      	str	r0, [sp, #44]	; 0x2c
   1c266:	4638      	mov	r0, r7
   1c268:	f005 fc49 	bl	21afe <poller_thread>
   1c26c:	4601      	mov	r1, r0
   1c26e:	900a      	str	r0, [sp, #40]	; 0x28
   1c270:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c272:	f005 f9c8 	bl	21606 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c276:	2800      	cmp	r0, #0
   1c278:	dc1a      	bgt.n	1c2b0 <z_impl_k_poll+0x184>
	return list->head == list;
   1c27a:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c27e:	45d0      	cmp	r8, sl
   1c280:	d02f      	beq.n	1c2e2 <z_impl_k_poll+0x1b6>
   1c282:	4653      	mov	r3, sl
   1c284:	46a2      	mov	sl, r4
   1c286:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c288:	b38c      	cbz	r4, 1c2ee <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c28a:	68a0      	ldr	r0, [r4, #8]
   1c28c:	f005 fc37 	bl	21afe <poller_thread>
   1c290:	4601      	mov	r1, r0
   1c292:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c294:	f005 f9b7 	bl	21606 <z_sched_prio_cmp>
   1c298:	2800      	cmp	r0, #0
   1c29a:	dc16      	bgt.n	1c2ca <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c29c:	b34c      	cbz	r4, 1c2f2 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   1c29e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c2a2:	429c      	cmp	r4, r3
   1c2a4:	d030      	beq.n	1c308 <z_impl_k_poll+0x1dc>
   1c2a6:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c2a8:	2c00      	cmp	r4, #0
   1c2aa:	d1ed      	bne.n	1c288 <z_impl_k_poll+0x15c>
   1c2ac:	4654      	mov	r4, sl
   1c2ae:	e021      	b.n	1c2f4 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   1c2b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c2b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c2b6:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c2ba:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c2bc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c2be:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   1c2c2:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   1c2c4:	f10b 0b01 	add.w	fp, fp, #1
   1c2c8:	e775      	b.n	1c1b6 <z_impl_k_poll+0x8a>
   1c2ca:	4623      	mov	r3, r4
   1c2cc:	4654      	mov	r4, sl
   1c2ce:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c2d0:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c2d2:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c2d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c2d6:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c2da:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c2dc:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c2e0:	e7ef      	b.n	1c2c2 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c2e2:	f04f 0a00 	mov.w	sl, #0
   1c2e6:	4653      	mov	r3, sl
   1c2e8:	46a2      	mov	sl, r4
   1c2ea:	461c      	mov	r4, r3
   1c2ec:	e7cc      	b.n	1c288 <z_impl_k_poll+0x15c>
   1c2ee:	4654      	mov	r4, sl
   1c2f0:	e000      	b.n	1c2f4 <z_impl_k_poll+0x1c8>
   1c2f2:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c2f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c2f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c2fa:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c2fe:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c300:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c302:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c306:	e7dc      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c308:	4654      	mov	r4, sl
   1c30a:	e7f3      	b.n	1c2f4 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   1c30c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c310:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   1c314:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c318:	4598      	cmp	r8, r3
   1c31a:	d02b      	beq.n	1c374 <z_impl_k_poll+0x248>
   1c31c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c320:	b343      	cbz	r3, 1c374 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c322:	6898      	ldr	r0, [r3, #8]
   1c324:	f005 fbeb 	bl	21afe <poller_thread>
   1c328:	900b      	str	r0, [sp, #44]	; 0x2c
   1c32a:	4638      	mov	r0, r7
   1c32c:	f005 fbe7 	bl	21afe <poller_thread>
   1c330:	4601      	mov	r1, r0
   1c332:	900a      	str	r0, [sp, #40]	; 0x28
   1c334:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c336:	f005 f966 	bl	21606 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c33a:	2800      	cmp	r0, #0
   1c33c:	dc1a      	bgt.n	1c374 <z_impl_k_poll+0x248>
	return list->head == list;
   1c33e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c342:	45d0      	cmp	r8, sl
   1c344:	d02c      	beq.n	1c3a0 <z_impl_k_poll+0x274>
   1c346:	4653      	mov	r3, sl
   1c348:	46a2      	mov	sl, r4
   1c34a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c34c:	b374      	cbz	r4, 1c3ac <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c34e:	68a0      	ldr	r0, [r4, #8]
   1c350:	f005 fbd5 	bl	21afe <poller_thread>
   1c354:	4601      	mov	r1, r0
   1c356:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c358:	f005 f955 	bl	21606 <z_sched_prio_cmp>
   1c35c:	2800      	cmp	r0, #0
   1c35e:	dc13      	bgt.n	1c388 <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c360:	b334      	cbz	r4, 1c3b0 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   1c362:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c366:	429c      	cmp	r4, r3
   1c368:	d02d      	beq.n	1c3c6 <z_impl_k_poll+0x29a>
   1c36a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c36c:	2c00      	cmp	r4, #0
   1c36e:	d1ed      	bne.n	1c34c <z_impl_k_poll+0x220>
   1c370:	4654      	mov	r4, sl
   1c372:	e01e      	b.n	1c3b2 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   1c374:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c378:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c37a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c37e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c380:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c382:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c386:	e79c      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c388:	4623      	mov	r3, r4
   1c38a:	4654      	mov	r4, sl
   1c38c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c38e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c390:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c392:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c394:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c398:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c39a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c39e:	e790      	b.n	1c2c2 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c3a0:	f04f 0a00 	mov.w	sl, #0
   1c3a4:	4653      	mov	r3, sl
   1c3a6:	46a2      	mov	sl, r4
   1c3a8:	461c      	mov	r4, r3
   1c3aa:	e7cf      	b.n	1c34c <z_impl_k_poll+0x220>
   1c3ac:	4654      	mov	r4, sl
   1c3ae:	e000      	b.n	1c3b2 <z_impl_k_poll+0x286>
   1c3b0:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c3b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c3b8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c3bc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c3be:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c3c0:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c3c4:	e77d      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c3c6:	4654      	mov	r4, sl
   1c3c8:	e7f3      	b.n	1c3b2 <z_impl_k_poll+0x286>
   1c3ca:	bf00      	nop
   1c3cc:	20003158 	.word	0x20003158
		add_event(&event->signal->poll_events, event, poller);
   1c3d0:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   1c3d4:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c3d8:	4598      	cmp	r8, r3
   1c3da:	d02b      	beq.n	1c434 <z_impl_k_poll+0x308>
   1c3dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c3e0:	b343      	cbz	r3, 1c434 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c3e2:	6898      	ldr	r0, [r3, #8]
   1c3e4:	f005 fb8b 	bl	21afe <poller_thread>
   1c3e8:	4682      	mov	sl, r0
   1c3ea:	4638      	mov	r0, r7
   1c3ec:	f005 fb87 	bl	21afe <poller_thread>
   1c3f0:	4601      	mov	r1, r0
   1c3f2:	900a      	str	r0, [sp, #40]	; 0x28
   1c3f4:	4650      	mov	r0, sl
   1c3f6:	f005 f906 	bl	21606 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c3fa:	2800      	cmp	r0, #0
   1c3fc:	dc1a      	bgt.n	1c434 <z_impl_k_poll+0x308>
	return list->head == list;
   1c3fe:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c402:	45d0      	cmp	r8, sl
   1c404:	d02c      	beq.n	1c460 <z_impl_k_poll+0x334>
   1c406:	4653      	mov	r3, sl
   1c408:	46a2      	mov	sl, r4
   1c40a:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c40c:	b374      	cbz	r4, 1c46c <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c40e:	68a0      	ldr	r0, [r4, #8]
   1c410:	f005 fb75 	bl	21afe <poller_thread>
   1c414:	4601      	mov	r1, r0
   1c416:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c418:	f005 f8f5 	bl	21606 <z_sched_prio_cmp>
   1c41c:	2800      	cmp	r0, #0
   1c41e:	dc13      	bgt.n	1c448 <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c420:	b334      	cbz	r4, 1c470 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   1c422:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c426:	429c      	cmp	r4, r3
   1c428:	d02d      	beq.n	1c486 <z_impl_k_poll+0x35a>
   1c42a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c42c:	2c00      	cmp	r4, #0
   1c42e:	d1ed      	bne.n	1c40c <z_impl_k_poll+0x2e0>
   1c430:	4654      	mov	r4, sl
   1c432:	e01e      	b.n	1c472 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   1c434:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c438:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c43a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c43e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c440:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c442:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c446:	e73c      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c448:	4623      	mov	r3, r4
   1c44a:	4654      	mov	r4, sl
   1c44c:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c44e:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c450:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c452:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c454:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c458:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c45a:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c45e:	e730      	b.n	1c2c2 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c460:	f04f 0a00 	mov.w	sl, #0
   1c464:	4653      	mov	r3, sl
   1c466:	46a2      	mov	sl, r4
   1c468:	461c      	mov	r4, r3
   1c46a:	e7cf      	b.n	1c40c <z_impl_k_poll+0x2e0>
   1c46c:	4654      	mov	r4, sl
   1c46e:	e000      	b.n	1c472 <z_impl_k_poll+0x346>
   1c470:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c472:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c476:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c478:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c47c:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c47e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c480:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c484:	e71d      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c486:	4654      	mov	r4, sl
   1c488:	e7f3      	b.n	1c472 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   1c48a:	f8d4 a010 	ldr.w	sl, [r4, #16]
   1c48e:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   1c492:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1c496:	4598      	cmp	r8, r3
   1c498:	d02b      	beq.n	1c4f2 <z_impl_k_poll+0x3c6>
   1c49a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   1c49e:	b343      	cbz	r3, 1c4f2 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   1c4a0:	6898      	ldr	r0, [r3, #8]
   1c4a2:	f005 fb2c 	bl	21afe <poller_thread>
   1c4a6:	900b      	str	r0, [sp, #44]	; 0x2c
   1c4a8:	4638      	mov	r0, r7
   1c4aa:	f005 fb28 	bl	21afe <poller_thread>
   1c4ae:	4601      	mov	r1, r0
   1c4b0:	900a      	str	r0, [sp, #40]	; 0x28
   1c4b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1c4b4:	f005 f8a7 	bl	21606 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   1c4b8:	2800      	cmp	r0, #0
   1c4ba:	dc1a      	bgt.n	1c4f2 <z_impl_k_poll+0x3c6>
	return list->head == list;
   1c4bc:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c4c0:	45d0      	cmp	r8, sl
   1c4c2:	d02c      	beq.n	1c51e <z_impl_k_poll+0x3f2>
   1c4c4:	4653      	mov	r3, sl
   1c4c6:	46a2      	mov	sl, r4
   1c4c8:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c4ca:	b374      	cbz	r4, 1c52a <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   1c4cc:	68a0      	ldr	r0, [r4, #8]
   1c4ce:	f005 fb16 	bl	21afe <poller_thread>
   1c4d2:	4601      	mov	r1, r0
   1c4d4:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c4d6:	f005 f896 	bl	21606 <z_sched_prio_cmp>
   1c4da:	2800      	cmp	r0, #0
   1c4dc:	dc13      	bgt.n	1c506 <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c4de:	b334      	cbz	r4, 1c52e <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   1c4e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1c4e4:	429c      	cmp	r4, r3
   1c4e6:	d02d      	beq.n	1c544 <z_impl_k_poll+0x418>
   1c4e8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c4ea:	2c00      	cmp	r4, #0
   1c4ec:	d1ed      	bne.n	1c4ca <z_impl_k_poll+0x39e>
   1c4ee:	4654      	mov	r4, sl
   1c4f0:	e01e      	b.n	1c530 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   1c4f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c4f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c4f8:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c4fc:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c4fe:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c500:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   1c504:	e6dd      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c506:	4623      	mov	r3, r4
   1c508:	4654      	mov	r4, sl
   1c50a:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   1c50c:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   1c50e:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1c510:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c512:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   1c516:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1c518:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   1c51c:	e6d1      	b.n	1c2c2 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1c51e:	f04f 0a00 	mov.w	sl, #0
   1c522:	4653      	mov	r3, sl
   1c524:	46a2      	mov	sl, r4
   1c526:	461c      	mov	r4, r3
   1c528:	e7cf      	b.n	1c4ca <z_impl_k_poll+0x39e>
   1c52a:	4654      	mov	r4, sl
   1c52c:	e000      	b.n	1c530 <z_impl_k_poll+0x404>
   1c52e:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   1c530:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   1c534:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1c536:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   1c53a:	6063      	str	r3, [r4, #4]
	tail->next = node;
   1c53c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c53e:	f8c8 4004 	str.w	r4, [r8, #4]
}
   1c542:	e6be      	b.n	1c2c2 <z_impl_k_poll+0x196>
   1c544:	4654      	mov	r4, sl
   1c546:	e7f3      	b.n	1c530 <z_impl_k_poll+0x404>
   1c548:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c54c:	f3ef 8111 	mrs	r1, BASEPRI
   1c550:	f383 8812 	msr	BASEPRI_MAX, r3
   1c554:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1c558:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   1c55c:	b1cb      	cbz	r3, 1c592 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   1c55e:	2300      	movs	r3, #0
   1c560:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c564:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1c568:	4323      	orrs	r3, r4
   1c56a:	d045      	beq.n	1c5f8 <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c56c:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   1c570:	e9cd 3400 	strd	r3, r4, [sp]
   1c574:	4a3c      	ldr	r2, [pc, #240]	; (1c668 <z_impl_k_poll+0x53c>)
   1c576:	483d      	ldr	r0, [pc, #244]	; (1c66c <z_impl_k_poll+0x540>)
   1c578:	f7ff f956 	bl	1b828 <z_pend_curr>
   1c57c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c580:	f3ef 8c11 	mrs	ip, BASEPRI
   1c584:	f383 8812 	msr	BASEPRI_MAX, r3
   1c588:	f3bf 8f6f 	isb	sy
   1c58c:	4661      	mov	r1, ip
	while (num_events--) {
   1c58e:	465b      	mov	r3, fp
   1c590:	e04e      	b.n	1c630 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   1c592:	4608      	mov	r0, r1
	while (num_events--) {
   1c594:	465b      	mov	r3, fp
   1c596:	e014      	b.n	1c5c2 <z_impl_k_poll+0x496>
	return node->next != NULL;
   1c598:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c59a:	b12a      	cbz	r2, 1c5a8 <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1c59c:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1c59e:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   1c5a0:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   1c5a2:	2200      	movs	r2, #0
   1c5a4:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   1c5a6:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   1c5a8:	f380 8811 	msr	BASEPRI, r0
   1c5ac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c5b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c5b4:	f3ef 8011 	mrs	r0, BASEPRI
   1c5b8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c5bc:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1c5c0:	463b      	mov	r3, r7
   1c5c2:	1e5f      	subs	r7, r3, #1
   1c5c4:	b193      	cbz	r3, 1c5ec <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   1c5c6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1c5ca:	009e      	lsls	r6, r3, #2
   1c5cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1c5d0:	2200      	movs	r2, #0
   1c5d2:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1c5d4:	7b5a      	ldrb	r2, [r3, #13]
   1c5d6:	f002 021f 	and.w	r2, r2, #31
   1c5da:	2a08      	cmp	r2, #8
   1c5dc:	d8e4      	bhi.n	1c5a8 <z_impl_k_poll+0x47c>
   1c5de:	2401      	movs	r4, #1
   1c5e0:	fa04 f202 	lsl.w	r2, r4, r2
   1c5e4:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1c5e8:	d0de      	beq.n	1c5a8 <z_impl_k_poll+0x47c>
   1c5ea:	e7d5      	b.n	1c598 <z_impl_k_poll+0x46c>
	__asm__ volatile(
   1c5ec:	f381 8811 	msr	BASEPRI, r1
   1c5f0:	f3bf 8f6f 	isb	sy
		return 0;
   1c5f4:	4618      	mov	r0, r3
   1c5f6:	e034      	b.n	1c662 <z_impl_k_poll+0x536>
   1c5f8:	f381 8811 	msr	BASEPRI, r1
   1c5fc:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c600:	f06f 000a 	mvn.w	r0, #10
   1c604:	e02d      	b.n	1c662 <z_impl_k_poll+0x536>
	return node->next != NULL;
   1c606:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   1c608:	b12a      	cbz	r2, 1c616 <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   1c60a:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   1c60c:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   1c60e:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   1c610:	2200      	movs	r2, #0
   1c612:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   1c614:	605a      	str	r2, [r3, #4]
   1c616:	f381 8811 	msr	BASEPRI, r1
   1c61a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1c61e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c622:	f3ef 8111 	mrs	r1, BASEPRI
   1c626:	f383 8812 	msr	BASEPRI_MAX, r3
   1c62a:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   1c62e:	4623      	mov	r3, r4
   1c630:	1e5c      	subs	r4, r3, #1
   1c632:	b193      	cbz	r3, 1c65a <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   1c634:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c638:	009f      	lsls	r7, r3, #2
   1c63a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   1c63e:	2200      	movs	r2, #0
   1c640:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   1c642:	7b5a      	ldrb	r2, [r3, #13]
   1c644:	f002 021f 	and.w	r2, r2, #31
   1c648:	2a08      	cmp	r2, #8
   1c64a:	d8e4      	bhi.n	1c616 <z_impl_k_poll+0x4ea>
   1c64c:	2601      	movs	r6, #1
   1c64e:	fa06 f202 	lsl.w	r2, r6, r2
   1c652:	f412 7f8b 	tst.w	r2, #278	; 0x116
   1c656:	d0de      	beq.n	1c616 <z_impl_k_poll+0x4ea>
   1c658:	e7d5      	b.n	1c606 <z_impl_k_poll+0x4da>
	__asm__ volatile(
   1c65a:	f38c 8811 	msr	BASEPRI, ip
   1c65e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1c662:	b00d      	add	sp, #52	; 0x34
   1c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c668:	20000678 	.word	0x20000678
   1c66c:	2000319c 	.word	0x2000319c

0001c670 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1c670:	b538      	push	{r3, r4, r5, lr}
   1c672:	4603      	mov	r3, r0
	__asm__ volatile(
   1c674:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c678:	f3ef 8511 	mrs	r5, BASEPRI
   1c67c:	f382 8812 	msr	BASEPRI_MAX, r2
   1c680:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1c684:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1c686:	2201      	movs	r2, #1
   1c688:	6082      	str	r2, [r0, #8]
	return list->head == list;
   1c68a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c68c:	4283      	cmp	r3, r0
   1c68e:	d011      	beq.n	1c6b4 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   1c690:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   1c692:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   1c694:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1c696:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c698:	2300      	movs	r3, #0
   1c69a:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   1c69c:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   1c69e:	b148      	cbz	r0, 1c6b4 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c6a0:	2101      	movs	r1, #1
   1c6a2:	f005 fa7c 	bl	21b9e <signal_poll_event>
   1c6a6:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   1c6a8:	4629      	mov	r1, r5
   1c6aa:	4805      	ldr	r0, [pc, #20]	; (1c6c0 <z_impl_k_poll_signal_raise+0x50>)
   1c6ac:	f7fe ff58 	bl	1b560 <z_reschedule>
	return rc;
}
   1c6b0:	4620      	mov	r0, r4
   1c6b2:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c6b4:	f385 8811 	msr	BASEPRI, r5
   1c6b8:	f3bf 8f6f 	isb	sy
		return 0;
   1c6bc:	2400      	movs	r4, #0
   1c6be:	e7f7      	b.n	1c6b0 <z_impl_k_poll_signal_raise+0x40>
   1c6c0:	2000319c 	.word	0x2000319c

0001c6c4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1c6c4:	b538      	push	{r3, r4, r5, lr}
   1c6c6:	4604      	mov	r4, r0
   1c6c8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1c6ca:	f004 fd1c 	bl	21106 <k_is_in_isr>
   1c6ce:	b948      	cbnz	r0, 1c6e4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1c6d0:	4b05      	ldr	r3, [pc, #20]	; (1c6e8 <z_thread_aligned_alloc+0x24>)
   1c6d2:	689b      	ldr	r3, [r3, #8]
   1c6d4:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   1c6d8:	b118      	cbz	r0, 1c6e2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   1c6da:	462a      	mov	r2, r5
   1c6dc:	4621      	mov	r1, r4
   1c6de:	f005 faa7 	bl	21c30 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   1c6e2:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   1c6e4:	2000      	movs	r0, #0
	return ret;
   1c6e6:	e7fc      	b.n	1c6e2 <z_thread_aligned_alloc+0x1e>
   1c6e8:	20003158 	.word	0x20003158

0001c6ec <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   1c6ec:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1c6ee:	4a03      	ldr	r2, [pc, #12]	; (1c6fc <boot_banner+0x10>)
   1c6f0:	4903      	ldr	r1, [pc, #12]	; (1c700 <boot_banner+0x14>)
   1c6f2:	4804      	ldr	r0, [pc, #16]	; (1c704 <boot_banner+0x18>)
   1c6f4:	f000 f85a 	bl	1c7ac <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   1c6f8:	bd08      	pop	{r3, pc}
   1c6fa:	bf00      	nop
   1c6fc:	00022244 	.word	0x00022244
   1c700:	00024384 	.word	0x00024384
   1c704:	00024390 	.word	0x00024390

0001c708 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c708:	4602      	mov	r2, r0
   1c70a:	b1b0      	cbz	r0, 1c73a <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c70c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c70e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c712:	2b02      	cmp	r3, #2
   1c714:	d00b      	beq.n	1c72e <sys_notify_validate+0x26>
   1c716:	2b03      	cmp	r3, #3
   1c718:	d004      	beq.n	1c724 <sys_notify_validate+0x1c>
   1c71a:	2b01      	cmp	r3, #1
   1c71c:	d004      	beq.n	1c728 <sys_notify_validate+0x20>
   1c71e:	f06f 0015 	mvn.w	r0, #21
   1c722:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   1c724:	6803      	ldr	r3, [r0, #0]
   1c726:	b15b      	cbz	r3, 1c740 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   1c728:	2000      	movs	r0, #0
   1c72a:	6090      	str	r0, [r2, #8]
   1c72c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c72e:	6803      	ldr	r3, [r0, #0]
   1c730:	2b00      	cmp	r3, #0
   1c732:	d1f9      	bne.n	1c728 <sys_notify_validate+0x20>
			rv = -EINVAL;
   1c734:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   1c738:	4770      	bx	lr
		return -EINVAL;
   1c73a:	f06f 0015 	mvn.w	r0, #21
   1c73e:	4770      	bx	lr
			rv = -EINVAL;
   1c740:	f06f 0015 	mvn.w	r0, #21
   1c744:	4770      	bx	lr

0001c746 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1c746:	b510      	push	{r4, lr}
   1c748:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c74a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c74c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1c750:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c752:	2a02      	cmp	r2, #2
   1c754:	d004      	beq.n	1c760 <sys_notify_finalize+0x1a>
   1c756:	2a03      	cmp	r2, #3
   1c758:	d105      	bne.n	1c766 <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1c75a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1c75c:	2000      	movs	r0, #0
		break;
   1c75e:	e004      	b.n	1c76a <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   1c760:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1c762:	2400      	movs	r4, #0
		break;
   1c764:	e001      	b.n	1c76a <sys_notify_finalize+0x24>
	switch (method) {
   1c766:	2400      	movs	r4, #0
   1c768:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c76a:	2200      	movs	r2, #0
   1c76c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c76e:	b108      	cbz	r0, 1c774 <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   1c770:	f7ff ff7e 	bl	1c670 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c774:	4620      	mov	r0, r4
   1c776:	bd10      	pop	{r4, pc}

0001c778 <arch_printk_char_out>:
}
   1c778:	2000      	movs	r0, #0
   1c77a:	4770      	bx	lr

0001c77c <str_out>:
{
   1c77c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c77e:	680c      	ldr	r4, [r1, #0]
   1c780:	b154      	cbz	r4, 1c798 <str_out+0x1c>
   1c782:	688a      	ldr	r2, [r1, #8]
   1c784:	684b      	ldr	r3, [r1, #4]
   1c786:	429a      	cmp	r2, r3
   1c788:	da06      	bge.n	1c798 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   1c78a:	3b01      	subs	r3, #1
   1c78c:	429a      	cmp	r2, r3
   1c78e:	d008      	beq.n	1c7a2 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   1c790:	1c53      	adds	r3, r2, #1
   1c792:	608b      	str	r3, [r1, #8]
   1c794:	54a0      	strb	r0, [r4, r2]
   1c796:	e002      	b.n	1c79e <str_out+0x22>
		ctx->count++;
   1c798:	688b      	ldr	r3, [r1, #8]
   1c79a:	3301      	adds	r3, #1
   1c79c:	608b      	str	r3, [r1, #8]
}
   1c79e:	bc10      	pop	{r4}
   1c7a0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   1c7a2:	1c53      	adds	r3, r2, #1
   1c7a4:	608b      	str	r3, [r1, #8]
   1c7a6:	2300      	movs	r3, #0
   1c7a8:	54a3      	strb	r3, [r4, r2]
   1c7aa:	e7f8      	b.n	1c79e <str_out+0x22>

0001c7ac <printk>:
{
   1c7ac:	b40f      	push	{r0, r1, r2, r3}
   1c7ae:	b500      	push	{lr}
   1c7b0:	b083      	sub	sp, #12
   1c7b2:	a904      	add	r1, sp, #16
   1c7b4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c7b8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c7ba:	f7f3 f8c3 	bl	f944 <vprintk>
}
   1c7be:	b003      	add	sp, #12
   1c7c0:	f85d eb04 	ldr.w	lr, [sp], #4
   1c7c4:	b004      	add	sp, #16
   1c7c6:	4770      	bx	lr

0001c7c8 <snprintk>:
{
   1c7c8:	b40c      	push	{r2, r3}
   1c7ca:	b500      	push	{lr}
   1c7cc:	b083      	sub	sp, #12
   1c7ce:	ab04      	add	r3, sp, #16
   1c7d0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c7d4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c7d6:	f7f3 f8c5 	bl	f964 <vsnprintk>
}
   1c7da:	b003      	add	sp, #12
   1c7dc:	f85d eb04 	ldr.w	lr, [sp], #4
   1c7e0:	b002      	add	sp, #8
   1c7e2:	4770      	bx	lr

0001c7e4 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   1c7e4:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1c7e8:	8b01      	ldrh	r1, [r0, #24]
   1c7ea:	f021 0107 	bic.w	r1, r1, #7
   1c7ee:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1c7f0:	8301      	strh	r1, [r0, #24]
}
   1c7f2:	4770      	bx	lr

0001c7f4 <notify_monitors>:
{
   1c7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7f8:	4606      	mov	r6, r0
   1c7fa:	460f      	mov	r7, r1
   1c7fc:	4690      	mov	r8, r2
	return list->head;
   1c7fe:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1c800:	b119      	cbz	r1, 1c80a <notify_monitors+0x16>
   1c802:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c804:	b131      	cbz	r1, 1c814 <notify_monitors+0x20>
	return node->next;
   1c806:	680c      	ldr	r4, [r1, #0]
   1c808:	e004      	b.n	1c814 <notify_monitors+0x20>
   1c80a:	460c      	mov	r4, r1
   1c80c:	e002      	b.n	1c814 <notify_monitors+0x20>
   1c80e:	4623      	mov	r3, r4
   1c810:	4621      	mov	r1, r4
   1c812:	461c      	mov	r4, r3
   1c814:	b159      	cbz	r1, 1c82e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   1c816:	684d      	ldr	r5, [r1, #4]
   1c818:	4643      	mov	r3, r8
   1c81a:	463a      	mov	r2, r7
   1c81c:	4630      	mov	r0, r6
   1c81e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1c820:	2c00      	cmp	r4, #0
   1c822:	d0f4      	beq.n	1c80e <notify_monitors+0x1a>
   1c824:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c826:	2c00      	cmp	r4, #0
   1c828:	d0f2      	beq.n	1c810 <notify_monitors+0x1c>
	return node->next;
   1c82a:	6823      	ldr	r3, [r4, #0]
   1c82c:	e7f0      	b.n	1c810 <notify_monitors+0x1c>
}
   1c82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c832 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c832:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c834:	f013 0307 	ands.w	r3, r3, #7
   1c838:	d103      	bne.n	1c842 <process_recheck+0x10>
	return list->head;
   1c83a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c83c:	b10a      	cbz	r2, 1c842 <process_recheck+0x10>
		evt = EVT_START;
   1c83e:	2003      	movs	r0, #3
   1c840:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c842:	2b02      	cmp	r3, #2
   1c844:	d003      	beq.n	1c84e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   1c846:	2b01      	cmp	r3, #1
   1c848:	d006      	beq.n	1c858 <process_recheck+0x26>
	int evt = EVT_NOP;
   1c84a:	2000      	movs	r0, #0
   1c84c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1c84e:	8b42      	ldrh	r2, [r0, #26]
   1c850:	2a00      	cmp	r2, #0
   1c852:	d1f8      	bne.n	1c846 <process_recheck+0x14>
		evt = EVT_STOP;
   1c854:	2004      	movs	r0, #4
   1c856:	4770      	bx	lr
   1c858:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c85a:	b10b      	cbz	r3, 1c860 <process_recheck+0x2e>
		evt = EVT_RESET;
   1c85c:	2005      	movs	r0, #5
}
   1c85e:	4770      	bx	lr
	int evt = EVT_NOP;
   1c860:	2000      	movs	r0, #0
   1c862:	4770      	bx	lr

0001c864 <process_complete>:
{
   1c864:	b538      	push	{r3, r4, r5, lr}
   1c866:	4604      	mov	r4, r0
   1c868:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c86a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   1c86c:	2a00      	cmp	r2, #0
   1c86e:	db07      	blt.n	1c880 <process_complete+0x1c>
   1c870:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1c874:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   1c876:	2a01      	cmp	r2, #1
   1c878:	d90e      	bls.n	1c898 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1c87a:	2b04      	cmp	r3, #4
   1c87c:	d032      	beq.n	1c8e4 <process_complete+0x80>
}
   1c87e:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   1c880:	e9d0 0100 	ldrd	r0, r1, [r0]
   1c884:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1c888:	2300      	movs	r3, #0
   1c88a:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   1c88c:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   1c88e:	2101      	movs	r1, #1
   1c890:	4620      	mov	r0, r4
   1c892:	f7ff ffa7 	bl	1c7e4 <set_state>
   1c896:	e7f2      	b.n	1c87e <process_complete+0x1a>
		*clients = mgr->clients;
   1c898:	e9d0 0100 	ldrd	r0, r1, [r0]
   1c89c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   1c8a0:	2200      	movs	r2, #0
   1c8a2:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   1c8a4:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   1c8a6:	2b06      	cmp	r3, #6
   1c8a8:	d117      	bne.n	1c8da <process_complete+0x76>
	return list->head;
   1c8aa:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1c8ac:	b13b      	cbz	r3, 1c8be <process_complete+0x5a>
				mgr->refs += 1U;
   1c8ae:	8b62      	ldrh	r2, [r4, #26]
   1c8b0:	3201      	adds	r2, #1
   1c8b2:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c8b4:	2b00      	cmp	r3, #0
   1c8b6:	d0f9      	beq.n	1c8ac <process_complete+0x48>
	return node->next;
   1c8b8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1c8ba:	2b00      	cmp	r3, #0
   1c8bc:	d1f6      	bne.n	1c8ac <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1c8be:	2102      	movs	r1, #2
   1c8c0:	4620      	mov	r0, r4
   1c8c2:	f7ff ff8f 	bl	1c7e4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1c8c6:	4620      	mov	r0, r4
   1c8c8:	f7ff ffb3 	bl	1c832 <process_recheck>
   1c8cc:	2800      	cmp	r0, #0
   1c8ce:	d0d6      	beq.n	1c87e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1c8d0:	8b23      	ldrh	r3, [r4, #24]
   1c8d2:	f043 0320 	orr.w	r3, r3, #32
   1c8d6:	8323      	strh	r3, [r4, #24]
   1c8d8:	e7d1      	b.n	1c87e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1c8da:	2100      	movs	r1, #0
   1c8dc:	4620      	mov	r0, r4
   1c8de:	f7ff ff81 	bl	1c7e4 <set_state>
   1c8e2:	e7f0      	b.n	1c8c6 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   1c8e4:	2100      	movs	r1, #0
   1c8e6:	f7ff ff7d 	bl	1c7e4 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1c8ea:	4620      	mov	r0, r4
   1c8ec:	f7ff ffa1 	bl	1c832 <process_recheck>
   1c8f0:	2800      	cmp	r0, #0
   1c8f2:	d0c4      	beq.n	1c87e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1c8f4:	8b23      	ldrh	r3, [r4, #24]
   1c8f6:	f043 0320 	orr.w	r3, r3, #32
   1c8fa:	8323      	strh	r3, [r4, #24]
}
   1c8fc:	e7bf      	b.n	1c87e <process_complete+0x1a>

0001c8fe <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1c8fe:	b158      	cbz	r0, 1c918 <validate_args+0x1a>
{
   1c900:	b510      	push	{r4, lr}
   1c902:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c904:	b159      	cbz	r1, 1c91e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   1c906:	1d08      	adds	r0, r1, #4
   1c908:	f7ff fefe 	bl	1c708 <sys_notify_validate>
	if ((rv == 0)
   1c90c:	b918      	cbnz	r0, 1c916 <validate_args+0x18>
	    && ((cli->notify.flags
   1c90e:	68a3      	ldr	r3, [r4, #8]
   1c910:	f033 0303 	bics.w	r3, r3, #3
   1c914:	d106      	bne.n	1c924 <validate_args+0x26>
}
   1c916:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c918:	f06f 0015 	mvn.w	r0, #21
}
   1c91c:	4770      	bx	lr
		return -EINVAL;
   1c91e:	f06f 0015 	mvn.w	r0, #21
   1c922:	e7f8      	b.n	1c916 <validate_args+0x18>
		rv = -EINVAL;
   1c924:	f06f 0015 	mvn.w	r0, #21
   1c928:	e7f5      	b.n	1c916 <validate_args+0x18>

0001c92a <notify_one>:
{
   1c92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c92e:	4607      	mov	r7, r0
   1c930:	460c      	mov	r4, r1
   1c932:	4616      	mov	r6, r2
   1c934:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c936:	4619      	mov	r1, r3
   1c938:	1d20      	adds	r0, r4, #4
   1c93a:	f7ff ff04 	bl	1c746 <sys_notify_finalize>
	if (cb) {
   1c93e:	b128      	cbz	r0, 1c94c <notify_one+0x22>
   1c940:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   1c942:	462b      	mov	r3, r5
   1c944:	4632      	mov	r2, r6
   1c946:	4621      	mov	r1, r4
   1c948:	4638      	mov	r0, r7
   1c94a:	47c0      	blx	r8
}
   1c94c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c950 <notify_all>:
{
   1c950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c954:	4681      	mov	r9, r0
   1c956:	460c      	mov	r4, r1
   1c958:	4690      	mov	r8, r2
   1c95a:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   1c95c:	e005      	b.n	1c96a <notify_all+0x1a>
	list->tail = node;
   1c95e:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   1c960:	463b      	mov	r3, r7
   1c962:	4642      	mov	r2, r8
   1c964:	4648      	mov	r0, r9
   1c966:	f7ff ffe0 	bl	1c92a <notify_one>
	return list->head;
   1c96a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   1c96c:	b129      	cbz	r1, 1c97a <notify_all+0x2a>
	return node->next;
   1c96e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   1c970:	6025      	str	r5, [r4, #0]
	return list->tail;
   1c972:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c974:	428e      	cmp	r6, r1
   1c976:	d1f3      	bne.n	1c960 <notify_all+0x10>
   1c978:	e7f1      	b.n	1c95e <notify_all+0xe>
}
   1c97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c97e <transition_complete>:
{
   1c97e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c980:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c984:	f3ef 8211 	mrs	r2, BASEPRI
   1c988:	f384 8812 	msr	BASEPRI_MAX, r4
   1c98c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c990:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   1c992:	2101      	movs	r1, #1
   1c994:	f7f2 fffc 	bl	f990 <process_event>
}
   1c998:	bd10      	pop	{r4, pc}

0001c99a <onoff_manager_init>:
	if ((mgr == NULL)
   1c99a:	4603      	mov	r3, r0
   1c99c:	b168      	cbz	r0, 1c9ba <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c99e:	b179      	cbz	r1, 1c9c0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   1c9a0:	680a      	ldr	r2, [r1, #0]
   1c9a2:	b182      	cbz	r2, 1c9c6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   1c9a4:	684a      	ldr	r2, [r1, #4]
   1c9a6:	b18a      	cbz	r2, 1c9cc <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c9a8:	2000      	movs	r0, #0
   1c9aa:	6018      	str	r0, [r3, #0]
   1c9ac:	6058      	str	r0, [r3, #4]
   1c9ae:	6098      	str	r0, [r3, #8]
   1c9b0:	60d8      	str	r0, [r3, #12]
   1c9b2:	6158      	str	r0, [r3, #20]
   1c9b4:	6198      	str	r0, [r3, #24]
   1c9b6:	6119      	str	r1, [r3, #16]
	return 0;
   1c9b8:	4770      	bx	lr
		return -EINVAL;
   1c9ba:	f06f 0015 	mvn.w	r0, #21
   1c9be:	4770      	bx	lr
   1c9c0:	f06f 0015 	mvn.w	r0, #21
   1c9c4:	4770      	bx	lr
   1c9c6:	f06f 0015 	mvn.w	r0, #21
   1c9ca:	4770      	bx	lr
   1c9cc:	f06f 0015 	mvn.w	r0, #21
}
   1c9d0:	4770      	bx	lr

0001c9d2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c9d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9d4:	4604      	mov	r4, r0
   1c9d6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c9d8:	f7ff ff91 	bl	1c8fe <validate_args>

	if (rv < 0) {
   1c9dc:	1e06      	subs	r6, r0, #0
   1c9de:	db37      	blt.n	1ca50 <onoff_request+0x7e>
   1c9e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9e4:	f3ef 8211 	mrs	r2, BASEPRI
   1c9e8:	f383 8812 	msr	BASEPRI_MAX, r3
   1c9ec:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c9f0:	8b25      	ldrh	r5, [r4, #24]
   1c9f2:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c9f6:	8b63      	ldrh	r3, [r4, #26]
   1c9f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c9fc:	428b      	cmp	r3, r1
   1c9fe:	d02f      	beq.n	1ca60 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   1ca00:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   1ca02:	2d02      	cmp	r5, #2
   1ca04:	d00c      	beq.n	1ca20 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   1ca06:	b18d      	cbz	r5, 1ca2c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   1ca08:	2d04      	cmp	r5, #4
   1ca0a:	d00f      	beq.n	1ca2c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1ca0c:	2d06      	cmp	r5, #6
   1ca0e:	d00d      	beq.n	1ca2c <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   1ca10:	2d05      	cmp	r5, #5
   1ca12:	d01f      	beq.n	1ca54 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   1ca14:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   1ca18:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ca1a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ca1c:	4608      	mov	r0, r1
   1ca1e:	e00a      	b.n	1ca36 <onoff_request+0x64>
		mgr->refs += 1U;
   1ca20:	3301      	adds	r3, #1
   1ca22:	8363      	strh	r3, [r4, #26]
		notify = true;
   1ca24:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   1ca26:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   1ca28:	4618      	mov	r0, r3
   1ca2a:	e004      	b.n	1ca36 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1ca2c:	fab5 f385 	clz	r3, r5
   1ca30:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   1ca32:	2100      	movs	r1, #0
		add_client = true;
   1ca34:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   1ca36:	b128      	cbz	r0, 1ca44 <onoff_request+0x72>
	parent->next = child;
   1ca38:	2000      	movs	r0, #0
   1ca3a:	6038      	str	r0, [r7, #0]
	return list->tail;
   1ca3c:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1ca3e:	b1a8      	cbz	r0, 1ca6c <onoff_request+0x9a>
	parent->next = child;
   1ca40:	6007      	str	r7, [r0, #0]
	list->tail = node;
   1ca42:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   1ca44:	b9ab      	cbnz	r3, 1ca72 <onoff_request+0xa0>
	__asm__ volatile(
   1ca46:	f382 8811 	msr	BASEPRI, r2
   1ca4a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1ca4e:	b9a9      	cbnz	r1, 1ca7c <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1ca50:	4630      	mov	r0, r6
   1ca52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   1ca54:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   1ca58:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ca5a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ca5c:	4608      	mov	r0, r1
   1ca5e:	e7ea      	b.n	1ca36 <onoff_request+0x64>
		rv = -EAGAIN;
   1ca60:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   1ca64:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1ca66:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1ca68:	4608      	mov	r0, r1
   1ca6a:	e7e4      	b.n	1ca36 <onoff_request+0x64>
   1ca6c:	6067      	str	r7, [r4, #4]
	list->head = node;
   1ca6e:	6027      	str	r7, [r4, #0]
}
   1ca70:	e7e8      	b.n	1ca44 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   1ca72:	2102      	movs	r1, #2
   1ca74:	4620      	mov	r0, r4
   1ca76:	f7f2 ff8b 	bl	f990 <process_event>
   1ca7a:	e7e9      	b.n	1ca50 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1ca7c:	2300      	movs	r3, #0
   1ca7e:	462a      	mov	r2, r5
   1ca80:	4639      	mov	r1, r7
   1ca82:	4620      	mov	r0, r4
   1ca84:	f7ff ff51 	bl	1c92a <notify_one>
   1ca88:	e7e2      	b.n	1ca50 <onoff_request+0x7e>

0001ca8a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1ca8a:	b508      	push	{r3, lr}
   1ca8c:	4604      	mov	r4, r0
   1ca8e:	4608      	mov	r0, r1
   1ca90:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1ca92:	461a      	mov	r2, r3
   1ca94:	47a0      	blx	r4
	return z_impl_z_current_get();
   1ca96:	f7ff f8bf 	bl	1bc18 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1ca9a:	f7f5 ff0d 	bl	128b8 <z_impl_k_thread_abort>

0001ca9e <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1ca9e:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   1caa0:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1caa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1caa6:	d303      	bcc.n	1cab0 <chunk_mem+0x12>
   1caa8:	2308      	movs	r3, #8
   1caaa:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1caac:	4408      	add	r0, r1
   1caae:	4770      	bx	lr
   1cab0:	2304      	movs	r3, #4
   1cab2:	e7fa      	b.n	1caaa <chunk_mem+0xc>

0001cab4 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1cab4:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   1cab6:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1caba:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1cabc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1cac0:	d317      	bcc.n	1caf2 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   1cac2:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1cac4:	4299      	cmp	r1, r3
   1cac6:	d016      	beq.n	1caf6 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   1cac8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1cacc:	d320      	bcc.n	1cb10 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   1cace:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   1cad0:	3204      	adds	r2, #4
   1cad2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1cad6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1cada:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1cade:	d319      	bcc.n	1cb14 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   1cae0:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   1cae2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cae6:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1cae8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1caec:	d314      	bcc.n	1cb18 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   1caee:	6099      	str	r1, [r3, #8]
   1caf0:	e00c      	b.n	1cb0c <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   1caf2:	88eb      	ldrh	r3, [r5, #6]
   1caf4:	e7e6      	b.n	1cac4 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   1caf6:	2301      	movs	r3, #1
   1caf8:	fa03 f102 	lsl.w	r1, r3, r2
   1cafc:	68c3      	ldr	r3, [r0, #12]
   1cafe:	ea23 0301 	bic.w	r3, r3, r1
   1cb02:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1cb04:	3204      	adds	r2, #4
   1cb06:	2300      	movs	r3, #0
   1cb08:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1cb0c:	bc30      	pop	{r4, r5}
   1cb0e:	4770      	bx	lr
   1cb10:	88a9      	ldrh	r1, [r5, #4]
   1cb12:	e7dd      	b.n	1cad0 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   1cb14:	80d3      	strh	r3, [r2, #6]
   1cb16:	e7e4      	b.n	1cae2 <free_list_remove_bidx+0x2e>
   1cb18:	8099      	strh	r1, [r3, #4]
   1cb1a:	e7f7      	b.n	1cb0c <free_list_remove_bidx+0x58>

0001cb1c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1cb1c:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1cb1e:	1d13      	adds	r3, r2, #4
   1cb20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1cb24:	b9d3      	cbnz	r3, 1cb5c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   1cb26:	2301      	movs	r3, #1
   1cb28:	fa03 f402 	lsl.w	r4, r3, r2
   1cb2c:	68c3      	ldr	r3, [r0, #12]
   1cb2e:	4323      	orrs	r3, r4
   1cb30:	60c3      	str	r3, [r0, #12]
		b->next = c;
   1cb32:	3204      	adds	r2, #4
   1cb34:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   1cb38:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cb3c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1cb3e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1cb42:	d307      	bcc.n	1cb54 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   1cb44:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   1cb46:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1cb48:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1cb4c:	d304      	bcc.n	1cb58 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1cb4e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   1cb50:	bc70      	pop	{r4, r5, r6}
   1cb52:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   1cb54:	8099      	strh	r1, [r3, #4]
   1cb56:	e7f6      	b.n	1cb46 <free_list_add_bidx+0x2a>
   1cb58:	80d9      	strh	r1, [r3, #6]
   1cb5a:	e7f9      	b.n	1cb50 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1cb5c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cb60:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1cb62:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cb66:	d318      	bcc.n	1cb9a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   1cb68:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1cb6a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1cb6e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cb72:	d314      	bcc.n	1cb9e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   1cb74:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   1cb76:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1cb78:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cb7c:	d311      	bcc.n	1cba2 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1cb7e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   1cb80:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cb84:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1cb86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cb8a:	d30c      	bcc.n	1cba6 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1cb8c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1cb8e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1cb90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cb94:	d309      	bcc.n	1cbaa <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   1cb96:	60a1      	str	r1, [r4, #8]
   1cb98:	e7da      	b.n	1cb50 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1cb9a:	88a2      	ldrh	r2, [r4, #4]
   1cb9c:	e7e5      	b.n	1cb6a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1cb9e:	80aa      	strh	r2, [r5, #4]
   1cba0:	e7e9      	b.n	1cb76 <free_list_add_bidx+0x5a>
   1cba2:	80eb      	strh	r3, [r5, #6]
   1cba4:	e7ec      	b.n	1cb80 <free_list_add_bidx+0x64>
   1cba6:	80d1      	strh	r1, [r2, #6]
   1cba8:	e7f1      	b.n	1cb8e <free_list_add_bidx+0x72>
   1cbaa:	80a1      	strh	r1, [r4, #4]
   1cbac:	e7d0      	b.n	1cb50 <free_list_add_bidx+0x34>

0001cbae <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1cbae:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   1cbb0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cbb4:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   1cbb6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1cbba:	d325      	bcc.n	1cc08 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   1cbbc:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1cbbe:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   1cbc0:	1a89      	subs	r1, r1, r2
   1cbc2:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cbc6:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   1cbc8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1cbcc:	d31e      	bcc.n	1cc0c <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   1cbce:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cbd0:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   1cbd2:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cbd6:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   1cbd8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1cbdc:	d318      	bcc.n	1cc10 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   1cbde:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1cbe0:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   1cbe2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1cbe6:	d315      	bcc.n	1cc14 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   1cbe8:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   1cbec:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1cbee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cbf2:	d312      	bcc.n	1cc1a <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   1cbf4:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   1cbf6:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   1cbfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cbfe:	d30e      	bcc.n	1cc1e <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   1cc00:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   1cc04:	bc70      	pop	{r4, r5, r6}
   1cc06:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   1cc08:	8866      	ldrh	r6, [r4, #2]
   1cc0a:	e7d8      	b.n	1cbbe <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   1cc0c:	8066      	strh	r6, [r4, #2]
   1cc0e:	e7df      	b.n	1cbd0 <split_chunks+0x22>
   1cc10:	8065      	strh	r5, [r4, #2]
   1cc12:	e7e5      	b.n	1cbe0 <split_chunks+0x32>
   1cc14:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   1cc18:	e7e8      	b.n	1cbec <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   1cc1a:	8864      	ldrh	r4, [r4, #2]
   1cc1c:	e7eb      	b.n	1cbf6 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   1cc1e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   1cc22:	e7ef      	b.n	1cc04 <split_chunks+0x56>

0001cc24 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1cc24:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   1cc26:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cc2a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1cc2c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1cc30:	d31c      	bcc.n	1cc6c <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   1cc32:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cc34:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   1cc36:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   1cc3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1cc3e:	d317      	bcc.n	1cc70 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   1cc40:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1cc42:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1cc46:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   1cc48:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1cc4c:	d312      	bcc.n	1cc74 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   1cc4e:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   1cc50:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   1cc52:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1cc56:	d30f      	bcc.n	1cc78 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   1cc58:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   1cc5a:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   1cc5e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1cc62:	d30b      	bcc.n	1cc7c <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   1cc64:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1cc68:	bc70      	pop	{r4, r5, r6}
   1cc6a:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   1cc6c:	884b      	ldrh	r3, [r1, #2]
   1cc6e:	e7e1      	b.n	1cc34 <merge_chunks+0x10>
   1cc70:	886e      	ldrh	r6, [r5, #2]
   1cc72:	e7e6      	b.n	1cc42 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   1cc74:	804e      	strh	r6, [r1, #2]
   1cc76:	e7eb      	b.n	1cc50 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   1cc78:	886c      	ldrh	r4, [r5, #2]
   1cc7a:	e7ee      	b.n	1cc5a <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   1cc7c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   1cc80:	e7f2      	b.n	1cc68 <merge_chunks+0x44>

0001cc82 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   1cc82:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   1cc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cc88:	d304      	bcc.n	1cc94 <mem_to_chunkid+0x12>
   1cc8a:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1cc8c:	1ac9      	subs	r1, r1, r3
   1cc8e:	1a08      	subs	r0, r1, r0
}
   1cc90:	08c0      	lsrs	r0, r0, #3
   1cc92:	4770      	bx	lr
   1cc94:	2304      	movs	r3, #4
   1cc96:	e7f9      	b.n	1cc8c <mem_to_chunkid+0xa>

0001cc98 <free_list_remove>:
{
   1cc98:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   1cc9a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   1cc9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cca0:	d307      	bcc.n	1ccb2 <free_list_remove+0x1a>
	void *cmem = &buf[c];
   1cca2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   1cca6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cca8:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ccaa:	2a01      	cmp	r2, #1
   1ccac:	d002      	beq.n	1ccb4 <free_list_remove+0x1c>
   1ccae:	2200      	movs	r2, #0
   1ccb0:	e000      	b.n	1ccb4 <free_list_remove+0x1c>
   1ccb2:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1ccb4:	b9a2      	cbnz	r2, 1cce0 <free_list_remove+0x48>
	void *cmem = &buf[c];
   1ccb6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1ccba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ccbe:	d310      	bcc.n	1cce2 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   1ccc0:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1ccc2:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1ccc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ccc8:	d30d      	bcc.n	1cce6 <free_list_remove+0x4e>
   1ccca:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cccc:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1ccce:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1ccd2:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1ccd4:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   1ccd8:	f1c2 021f 	rsb	r2, r2, #31
   1ccdc:	f7ff feea 	bl	1cab4 <free_list_remove_bidx>
}
   1cce0:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   1cce2:	8852      	ldrh	r2, [r2, #2]
   1cce4:	e7ed      	b.n	1ccc2 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   1cce6:	2304      	movs	r3, #4
   1cce8:	e7f0      	b.n	1cccc <free_list_remove+0x34>

0001ccea <free_list_add>:
{
   1ccea:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   1ccec:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ccee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ccf2:	d307      	bcc.n	1cd04 <free_list_add+0x1a>
	void *cmem = &buf[c];
   1ccf4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   1ccf8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1ccfa:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ccfc:	2a01      	cmp	r2, #1
   1ccfe:	d002      	beq.n	1cd06 <free_list_add+0x1c>
   1cd00:	2200      	movs	r2, #0
   1cd02:	e000      	b.n	1cd06 <free_list_add+0x1c>
   1cd04:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   1cd06:	b9a2      	cbnz	r2, 1cd32 <free_list_add+0x48>
	void *cmem = &buf[c];
   1cd08:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1cd0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd10:	d310      	bcc.n	1cd34 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   1cd12:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1cd14:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   1cd16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd1a:	d30d      	bcc.n	1cd38 <free_list_add+0x4e>
   1cd1c:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cd1e:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1cd20:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   1cd24:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   1cd26:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   1cd2a:	f1c2 021f 	rsb	r2, r2, #31
   1cd2e:	f7ff fef5 	bl	1cb1c <free_list_add_bidx>
}
   1cd32:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   1cd34:	8852      	ldrh	r2, [r2, #2]
   1cd36:	e7ed      	b.n	1cd14 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   1cd38:	2304      	movs	r3, #4
   1cd3a:	e7f0      	b.n	1cd1e <free_list_add+0x34>

0001cd3c <free_chunk>:
{
   1cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd3e:	4604      	mov	r4, r0
   1cd40:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   1cd42:	00ce      	lsls	r6, r1, #3
   1cd44:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cd48:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1cd4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd4e:	d31f      	bcc.n	1cd90 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   1cd50:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   1cd52:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   1cd56:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   1cd5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd5e:	d319      	bcc.n	1cd94 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   1cd60:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   1cd62:	f013 0f01 	tst.w	r3, #1
   1cd66:	d017      	beq.n	1cd98 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   1cd68:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1cd6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd6e:	d324      	bcc.n	1cdba <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   1cd70:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1cd72:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   1cd74:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   1cd78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd7c:	d31f      	bcc.n	1cdbe <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   1cd7e:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   1cd80:	f013 0f01 	tst.w	r3, #1
   1cd84:	d01d      	beq.n	1cdc2 <free_chunk+0x86>
	free_list_add(h, c);
   1cd86:	4629      	mov	r1, r5
   1cd88:	4620      	mov	r0, r4
   1cd8a:	f7ff ffae 	bl	1ccea <free_list_add>
}
   1cd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   1cd90:	8879      	ldrh	r1, [r7, #2]
   1cd92:	e7de      	b.n	1cd52 <free_chunk+0x16>
   1cd94:	8853      	ldrh	r3, [r2, #2]
   1cd96:	e7e4      	b.n	1cd62 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   1cd98:	4620      	mov	r0, r4
   1cd9a:	f7ff ff7d 	bl	1cc98 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   1cd9e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1cda0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cda4:	d307      	bcc.n	1cdb6 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   1cda6:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   1cda8:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1cdac:	4629      	mov	r1, r5
   1cdae:	4620      	mov	r0, r4
   1cdb0:	f7ff ff38 	bl	1cc24 <merge_chunks>
   1cdb4:	e7d8      	b.n	1cd68 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   1cdb6:	887a      	ldrh	r2, [r7, #2]
   1cdb8:	e7f6      	b.n	1cda8 <free_chunk+0x6c>
   1cdba:	5ba1      	ldrh	r1, [r4, r6]
   1cdbc:	e7d9      	b.n	1cd72 <free_chunk+0x36>
   1cdbe:	8853      	ldrh	r3, [r2, #2]
   1cdc0:	e7de      	b.n	1cd80 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   1cdc2:	4620      	mov	r0, r4
   1cdc4:	f7ff ff68 	bl	1cc98 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   1cdc8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1cdca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cdce:	d30c      	bcc.n	1cdea <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   1cdd0:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   1cdd2:	462a      	mov	r2, r5
   1cdd4:	1a69      	subs	r1, r5, r1
   1cdd6:	4620      	mov	r0, r4
   1cdd8:	f7ff ff24 	bl	1cc24 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   1cddc:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1cdde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cde2:	d304      	bcc.n	1cdee <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   1cde4:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   1cde6:	1aed      	subs	r5, r5, r3
   1cde8:	e7cd      	b.n	1cd86 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   1cdea:	5ba1      	ldrh	r1, [r4, r6]
   1cdec:	e7f1      	b.n	1cdd2 <free_chunk+0x96>
   1cdee:	5ba3      	ldrh	r3, [r4, r6]
   1cdf0:	e7f9      	b.n	1cde6 <free_chunk+0xaa>

0001cdf2 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1cdf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   1cdf4:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   1cdf6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1cdfa:	d311      	bcc.n	1ce20 <alloc_chunk+0x2e>
   1cdfc:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cdfe:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1ce00:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   1ce04:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1ce06:	fab3 f383 	clz	r3, r3
   1ce0a:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1ce0e:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   1ce12:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   1ce16:	f1bc 0f00 	cmp.w	ip, #0
   1ce1a:	d024      	beq.n	1ce66 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   1ce1c:	2603      	movs	r6, #3
   1ce1e:	e010      	b.n	1ce42 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   1ce20:	2304      	movs	r3, #4
   1ce22:	e7ec      	b.n	1cdfe <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   1ce24:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   1ce28:	e015      	b.n	1ce56 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   1ce2a:	4621      	mov	r1, r4
   1ce2c:	f7ff fe42 	bl	1cab4 <free_list_remove_bidx>
				return c;
   1ce30:	e021      	b.n	1ce76 <alloc_chunk+0x84>
   1ce32:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   1ce34:	1d17      	adds	r7, r2, #4
   1ce36:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1ce3a:	3e01      	subs	r6, #1
   1ce3c:	d013      	beq.n	1ce66 <alloc_chunk+0x74>
   1ce3e:	45a4      	cmp	ip, r4
   1ce40:	d011      	beq.n	1ce66 <alloc_chunk+0x74>
			chunkid_t c = b->next;
   1ce42:	1d14      	adds	r4, r2, #4
   1ce44:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   1ce48:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   1ce4c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1ce50:	d3e8      	bcc.n	1ce24 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   1ce52:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   1ce56:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   1ce5a:	d9e6      	bls.n	1ce2a <alloc_chunk+0x38>
	if (big_heap(h)) {
   1ce5c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1ce60:	d3e7      	bcc.n	1ce32 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   1ce62:	68fc      	ldr	r4, [r7, #12]
   1ce64:	e7e6      	b.n	1ce34 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1ce66:	68c4      	ldr	r4, [r0, #12]
   1ce68:	f1c3 0220 	rsb	r2, r3, #32
   1ce6c:	2301      	movs	r3, #1
   1ce6e:	4093      	lsls	r3, r2
   1ce70:	425b      	negs	r3, r3

	if (bmask != 0U) {
   1ce72:	401c      	ands	r4, r3
   1ce74:	d101      	bne.n	1ce7a <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1ce76:	4620      	mov	r0, r4
   1ce78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   1ce7a:	fa94 f2a4 	rbit	r2, r4
   1ce7e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1ce82:	1d13      	adds	r3, r2, #4
   1ce84:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1ce88:	4621      	mov	r1, r4
   1ce8a:	f7ff fe13 	bl	1cab4 <free_list_remove_bidx>
		return c;
   1ce8e:	e7f2      	b.n	1ce76 <alloc_chunk+0x84>

0001ce90 <sys_heap_free>:
	if (mem == NULL) {
   1ce90:	b1c1      	cbz	r1, 1cec4 <sys_heap_free+0x34>
{
   1ce92:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   1ce94:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   1ce96:	4620      	mov	r0, r4
   1ce98:	f7ff fef3 	bl	1cc82 <mem_to_chunkid>
   1ce9c:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1ce9e:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cea2:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   1cea4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1cea8:	d307      	bcc.n	1ceba <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ceaa:	685a      	ldr	r2, [r3, #4]
   1ceac:	f022 0201 	bic.w	r2, r2, #1
   1ceb0:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   1ceb2:	4620      	mov	r0, r4
   1ceb4:	f7ff ff42 	bl	1cd3c <free_chunk>
}
   1ceb8:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1ceba:	885a      	ldrh	r2, [r3, #2]
   1cebc:	f022 0201 	bic.w	r2, r2, #1
   1cec0:	805a      	strh	r2, [r3, #2]
   1cec2:	e7f6      	b.n	1ceb2 <sys_heap_free+0x22>
   1cec4:	4770      	bx	lr

0001cec6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1cec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   1cec8:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1ceca:	2900      	cmp	r1, #0
   1cecc:	d03c      	beq.n	1cf48 <sys_heap_alloc+0x82>
   1cece:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1ced0:	68aa      	ldr	r2, [r5, #8]
   1ced2:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   1ced6:	d939      	bls.n	1cf4c <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   1ced8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1cedc:	d320      	bcc.n	1cf20 <sys_heap_alloc+0x5a>
   1cede:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1cee0:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cee2:	3407      	adds	r4, #7
   1cee4:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1cee6:	4621      	mov	r1, r4
   1cee8:	4628      	mov	r0, r5
   1ceea:	f7ff ff82 	bl	1cdf2 <alloc_chunk>
	if (c == 0U) {
   1ceee:	4607      	mov	r7, r0
   1cef0:	b370      	cbz	r0, 1cf50 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   1cef2:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cef6:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   1cef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cefc:	d312      	bcc.n	1cf24 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   1cefe:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   1cf00:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   1cf04:	d310      	bcc.n	1cf28 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   1cf06:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   1cf08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cf0c:	d317      	bcc.n	1cf3e <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cf0e:	6873      	ldr	r3, [r6, #4]
   1cf10:	f043 0301 	orr.w	r3, r3, #1
   1cf14:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   1cf16:	4639      	mov	r1, r7
   1cf18:	4628      	mov	r0, r5
   1cf1a:	f7ff fdc0 	bl	1ca9e <chunk_mem>
}
   1cf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   1cf20:	2404      	movs	r4, #4
   1cf22:	e7dd      	b.n	1cee0 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   1cf24:	8873      	ldrh	r3, [r6, #2]
   1cf26:	e7eb      	b.n	1cf00 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   1cf28:	443c      	add	r4, r7
   1cf2a:	4622      	mov	r2, r4
   1cf2c:	4639      	mov	r1, r7
   1cf2e:	4628      	mov	r0, r5
   1cf30:	f7ff fe3d 	bl	1cbae <split_chunks>
		free_list_add(h, c + chunk_sz);
   1cf34:	4621      	mov	r1, r4
   1cf36:	4628      	mov	r0, r5
   1cf38:	f7ff fed7 	bl	1ccea <free_list_add>
   1cf3c:	e7e3      	b.n	1cf06 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cf3e:	8873      	ldrh	r3, [r6, #2]
   1cf40:	f043 0301 	orr.w	r3, r3, #1
   1cf44:	8073      	strh	r3, [r6, #2]
   1cf46:	e7e6      	b.n	1cf16 <sys_heap_alloc+0x50>
		return NULL;
   1cf48:	2000      	movs	r0, #0
   1cf4a:	e7e8      	b.n	1cf1e <sys_heap_alloc+0x58>
   1cf4c:	2000      	movs	r0, #0
   1cf4e:	e7e6      	b.n	1cf1e <sys_heap_alloc+0x58>
		return NULL;
   1cf50:	2000      	movs	r0, #0
   1cf52:	e7e4      	b.n	1cf1e <sys_heap_alloc+0x58>

0001cf54 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1cf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf58:	460d      	mov	r5, r1
   1cf5a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1cf5c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1cf5e:	424b      	negs	r3, r1
   1cf60:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   1cf64:	ea31 0303 	bics.w	r3, r1, r3
   1cf68:	d04e      	beq.n	1d008 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   1cf6a:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   1cf6e:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   1cf70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cf74:	d346      	bcc.n	1d004 <sys_heap_aligned_alloc+0xb0>
   1cf76:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   1cf78:	4598      	cmp	r8, r3
   1cf7a:	d200      	bcs.n	1cf7e <sys_heap_aligned_alloc+0x2a>
   1cf7c:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1cf7e:	2c00      	cmp	r4, #0
   1cf80:	d070      	beq.n	1d064 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1cf82:	68b2      	ldr	r2, [r6, #8]
   1cf84:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   1cf88:	d96e      	bls.n	1d068 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1cf8a:	1929      	adds	r1, r5, r4
   1cf8c:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   1cf8e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1cf92:	d34a      	bcc.n	1d02a <sys_heap_aligned_alloc+0xd6>
   1cf94:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   1cf96:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1cf98:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1cf9a:	08c9      	lsrs	r1, r1, #3
   1cf9c:	4630      	mov	r0, r6
   1cf9e:	f7ff ff28 	bl	1cdf2 <alloc_chunk>

	if (c0 == 0) {
   1cfa2:	4607      	mov	r7, r0
   1cfa4:	2800      	cmp	r0, #0
   1cfa6:	d061      	beq.n	1d06c <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   1cfa8:	4601      	mov	r1, r0
   1cfaa:	4630      	mov	r0, r6
   1cfac:	f7ff fd77 	bl	1ca9e <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1cfb0:	4440      	add	r0, r8
   1cfb2:	4428      	add	r0, r5
   1cfb4:	3801      	subs	r0, #1
   1cfb6:	426d      	negs	r5, r5
   1cfb8:	4005      	ands	r5, r0
   1cfba:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1cfbe:	442c      	add	r4, r5
   1cfc0:	3407      	adds	r4, #7
   1cfc2:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   1cfc6:	4629      	mov	r1, r5
   1cfc8:	4630      	mov	r0, r6
   1cfca:	f7ff fe5a 	bl	1cc82 <mem_to_chunkid>
   1cfce:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   1cfd0:	1ba4      	subs	r4, r4, r6
   1cfd2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   1cfd4:	4287      	cmp	r7, r0
   1cfd6:	d32a      	bcc.n	1d02e <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   1cfd8:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   1cfdc:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1cfde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cfe2:	d32e      	bcc.n	1d042 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   1cfe4:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   1cfe6:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   1cfea:	429c      	cmp	r4, r3
   1cfec:	d32b      	bcc.n	1d046 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   1cfee:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   1cff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cff4:	d331      	bcc.n	1d05a <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1cff6:	687b      	ldr	r3, [r7, #4]
   1cff8:	f043 0301 	orr.w	r3, r3, #1
   1cffc:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1cffe:	4628      	mov	r0, r5
   1d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   1d004:	2304      	movs	r3, #4
   1d006:	e7b7      	b.n	1cf78 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   1d008:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   1d00a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d00e:	d305      	bcc.n	1d01c <sys_heap_aligned_alloc+0xc8>
   1d010:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   1d012:	429d      	cmp	r5, r3
   1d014:	d904      	bls.n	1d020 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   1d016:	f04f 0800 	mov.w	r8, #0
   1d01a:	e7b0      	b.n	1cf7e <sys_heap_aligned_alloc+0x2a>
   1d01c:	2304      	movs	r3, #4
   1d01e:	e7f8      	b.n	1d012 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   1d020:	4621      	mov	r1, r4
   1d022:	f7ff ff50 	bl	1cec6 <sys_heap_alloc>
   1d026:	4605      	mov	r5, r0
   1d028:	e7e9      	b.n	1cffe <sys_heap_aligned_alloc+0xaa>
   1d02a:	2304      	movs	r3, #4
   1d02c:	e7b3      	b.n	1cf96 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   1d02e:	4602      	mov	r2, r0
   1d030:	4639      	mov	r1, r7
   1d032:	4630      	mov	r0, r6
   1d034:	f7ff fdbb 	bl	1cbae <split_chunks>
		free_list_add(h, c0);
   1d038:	4639      	mov	r1, r7
   1d03a:	4630      	mov	r0, r6
   1d03c:	f7ff fe55 	bl	1ccea <free_list_add>
   1d040:	e7ca      	b.n	1cfd8 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   1d042:	887b      	ldrh	r3, [r7, #2]
   1d044:	e7cf      	b.n	1cfe6 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   1d046:	4622      	mov	r2, r4
   1d048:	4641      	mov	r1, r8
   1d04a:	4630      	mov	r0, r6
   1d04c:	f7ff fdaf 	bl	1cbae <split_chunks>
		free_list_add(h, c_end);
   1d050:	4621      	mov	r1, r4
   1d052:	4630      	mov	r0, r6
   1d054:	f7ff fe49 	bl	1ccea <free_list_add>
   1d058:	e7c9      	b.n	1cfee <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d05a:	887b      	ldrh	r3, [r7, #2]
   1d05c:	f043 0301 	orr.w	r3, r3, #1
   1d060:	807b      	strh	r3, [r7, #2]
   1d062:	e7cc      	b.n	1cffe <sys_heap_aligned_alloc+0xaa>
		return NULL;
   1d064:	2500      	movs	r5, #0
   1d066:	e7ca      	b.n	1cffe <sys_heap_aligned_alloc+0xaa>
   1d068:	2500      	movs	r5, #0
   1d06a:	e7c8      	b.n	1cffe <sys_heap_aligned_alloc+0xaa>
		return NULL;
   1d06c:	2500      	movs	r5, #0
   1d06e:	e7c6      	b.n	1cffe <sys_heap_aligned_alloc+0xaa>

0001d070 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1d070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d072:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   1d074:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   1d078:	d32a      	bcc.n	1d0d0 <sys_heap_init+0x60>
   1d07a:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1d07c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1d07e:	1dc8      	adds	r0, r1, #7
   1d080:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1d084:	440d      	add	r5, r1
   1d086:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1d08a:	1a2d      	subs	r5, r5, r0
   1d08c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1d08e:	4606      	mov	r6, r0
	heap->heap = h;
   1d090:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   1d092:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   1d094:	2300      	movs	r3, #0
   1d096:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   1d098:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1d09c:	d31a      	bcc.n	1d0d4 <sys_heap_init+0x64>
   1d09e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d0a0:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1d0a2:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   1d0a6:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   1d0a8:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1d0ac:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1d0b0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   1d0b4:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1d0b6:	f103 0e07 	add.w	lr, r3, #7
   1d0ba:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1d0be:	2300      	movs	r3, #0
   1d0c0:	4563      	cmp	r3, ip
   1d0c2:	da09      	bge.n	1d0d8 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   1d0c4:	1d1a      	adds	r2, r3, #4
   1d0c6:	2400      	movs	r4, #0
   1d0c8:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   1d0cc:	3301      	adds	r3, #1
   1d0ce:	e7f7      	b.n	1d0c0 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   1d0d0:	2504      	movs	r5, #4
   1d0d2:	e7d3      	b.n	1d07c <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   1d0d4:	2304      	movs	r3, #4
   1d0d6:	e7e3      	b.n	1d0a0 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d0d8:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   1d0da:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1d0de:	d333      	bcc.n	1d148 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   1d0e0:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   1d0e2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1d0e6:	d331      	bcc.n	1d14c <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   1d0e8:	2300      	movs	r3, #0
   1d0ea:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   1d0ec:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1d0f0:	d32f      	bcc.n	1d152 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d0f2:	6843      	ldr	r3, [r0, #4]
   1d0f4:	f043 0301 	orr.w	r3, r3, #1
   1d0f8:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1d0fa:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1d0fc:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   1d0fe:	f02e 0307 	bic.w	r3, lr, #7
   1d102:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   1d104:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1d108:	d328      	bcc.n	1d15c <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   1d10a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   1d10c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1d10e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d112:	d325      	bcc.n	1d160 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   1d114:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   1d116:	f025 0307 	bic.w	r3, r5, #7
   1d11a:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   1d11c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1d11e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d122:	d31f      	bcc.n	1d164 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   1d124:	2400      	movs	r4, #0
   1d126:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   1d128:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1d12a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1d12e:	d31c      	bcc.n	1d16a <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   1d130:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   1d132:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1d134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d138:	d319      	bcc.n	1d16e <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d13a:	686b      	ldr	r3, [r5, #4]
   1d13c:	f043 0301 	orr.w	r3, r3, #1
   1d140:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   1d142:	f7ff fdd2 	bl	1ccea <free_list_add>
}
   1d146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   1d148:	8043      	strh	r3, [r0, #2]
   1d14a:	e7ca      	b.n	1d0e2 <sys_heap_init+0x72>
   1d14c:	2300      	movs	r3, #0
   1d14e:	8003      	strh	r3, [r0, #0]
   1d150:	e7cc      	b.n	1d0ec <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d152:	8843      	ldrh	r3, [r0, #2]
   1d154:	f043 0301 	orr.w	r3, r3, #1
   1d158:	8043      	strh	r3, [r0, #2]
   1d15a:	e7ce      	b.n	1d0fa <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   1d15c:	8066      	strh	r6, [r4, #2]
   1d15e:	e7d5      	b.n	1d10c <sys_heap_init+0x9c>
   1d160:	52c1      	strh	r1, [r0, r3]
   1d162:	e7d8      	b.n	1d116 <sys_heap_init+0xa6>
   1d164:	2400      	movs	r4, #0
   1d166:	806c      	strh	r4, [r5, #2]
   1d168:	e7de      	b.n	1d128 <sys_heap_init+0xb8>
   1d16a:	52c2      	strh	r2, [r0, r3]
   1d16c:	e7e1      	b.n	1d132 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1d16e:	886b      	ldrh	r3, [r5, #2]
   1d170:	f043 0301 	orr.w	r3, r3, #1
   1d174:	806b      	strh	r3, [r5, #2]
   1d176:	e7e4      	b.n	1d142 <sys_heap_init+0xd2>

0001d178 <extract_decimal>:
{
   1d178:	b410      	push	{r4}
   1d17a:	4604      	mov	r4, r0
	const char *sp = *str;
   1d17c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1d17e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   1d180:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1d182:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1d186:	2909      	cmp	r1, #9
   1d188:	d806      	bhi.n	1d198 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   1d18a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d18e:	3201      	adds	r2, #1
   1d190:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   1d194:	3830      	subs	r0, #48	; 0x30
   1d196:	e7f3      	b.n	1d180 <extract_decimal+0x8>
	*str = sp;
   1d198:	6022      	str	r2, [r4, #0]
}
   1d19a:	bc10      	pop	{r4}
   1d19c:	4770      	bx	lr

0001d19e <encode_uint>:
{
   1d19e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1a2:	b083      	sub	sp, #12
   1d1a4:	4604      	mov	r4, r0
   1d1a6:	460d      	mov	r5, r1
   1d1a8:	9201      	str	r2, [sp, #4]
   1d1aa:	469a      	mov	sl, r3
   1d1ac:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   1d1b0:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1d1b2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1d1b6:	2b6f      	cmp	r3, #111	; 0x6f
   1d1b8:	d00f      	beq.n	1d1da <encode_uint+0x3c>
   1d1ba:	d906      	bls.n	1d1ca <encode_uint+0x2c>
   1d1bc:	2b70      	cmp	r3, #112	; 0x70
   1d1be:	d00f      	beq.n	1d1e0 <encode_uint+0x42>
   1d1c0:	2b78      	cmp	r3, #120	; 0x78
   1d1c2:	d110      	bne.n	1d1e6 <encode_uint+0x48>
		return 16;
   1d1c4:	f04f 0910 	mov.w	r9, #16
   1d1c8:	e026      	b.n	1d218 <encode_uint+0x7a>
	switch (specifier) {
   1d1ca:	2b58      	cmp	r3, #88	; 0x58
   1d1cc:	d002      	beq.n	1d1d4 <encode_uint+0x36>
   1d1ce:	f04f 090a 	mov.w	r9, #10
   1d1d2:	e021      	b.n	1d218 <encode_uint+0x7a>
		return 16;
   1d1d4:	f04f 0910 	mov.w	r9, #16
   1d1d8:	e01e      	b.n	1d218 <encode_uint+0x7a>
		return 8;
   1d1da:	f04f 0908 	mov.w	r9, #8
   1d1de:	e01b      	b.n	1d218 <encode_uint+0x7a>
		return 16;
   1d1e0:	f04f 0910 	mov.w	r9, #16
   1d1e4:	e018      	b.n	1d218 <encode_uint+0x7a>
	switch (specifier) {
   1d1e6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   1d1ea:	e015      	b.n	1d218 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d1ec:	f1bb 0f19 	cmp.w	fp, #25
   1d1f0:	d820      	bhi.n	1d234 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1d1f2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d1f4:	3237      	adds	r2, #55	; 0x37
   1d1f6:	b2d2      	uxtb	r2, r2
   1d1f8:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   1d1fc:	4632      	mov	r2, r6
   1d1fe:	463b      	mov	r3, r7
   1d200:	4620      	mov	r0, r4
   1d202:	4629      	mov	r1, r5
   1d204:	f7e2 ff7c 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   1d208:	42bd      	cmp	r5, r7
   1d20a:	bf08      	it	eq
   1d20c:	42b4      	cmpeq	r4, r6
   1d20e:	d315      	bcc.n	1d23c <encode_uint+0x9e>
   1d210:	45d0      	cmp	r8, sl
   1d212:	d913      	bls.n	1d23c <encode_uint+0x9e>
		value /= radix;
   1d214:	4604      	mov	r4, r0
   1d216:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   1d218:	464e      	mov	r6, r9
   1d21a:	2700      	movs	r7, #0
   1d21c:	464a      	mov	r2, r9
   1d21e:	463b      	mov	r3, r7
   1d220:	4620      	mov	r0, r4
   1d222:	4629      	mov	r1, r5
   1d224:	f7e2 ff6c 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d228:	2a09      	cmp	r2, #9
   1d22a:	d8df      	bhi.n	1d1ec <encode_uint+0x4e>
   1d22c:	b2d2      	uxtb	r2, r2
   1d22e:	3230      	adds	r2, #48	; 0x30
   1d230:	b2d2      	uxtb	r2, r2
   1d232:	e7e1      	b.n	1d1f8 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   1d234:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1d236:	3257      	adds	r2, #87	; 0x57
   1d238:	b2d2      	uxtb	r2, r2
   1d23a:	e7dd      	b.n	1d1f8 <encode_uint+0x5a>
	if (conv->flag_hash) {
   1d23c:	9b01      	ldr	r3, [sp, #4]
   1d23e:	781b      	ldrb	r3, [r3, #0]
   1d240:	f013 0f20 	tst.w	r3, #32
   1d244:	d005      	beq.n	1d252 <encode_uint+0xb4>
		if (radix == 8) {
   1d246:	f1b9 0f08 	cmp.w	r9, #8
   1d24a:	d006      	beq.n	1d25a <encode_uint+0xbc>
		} else if (radix == 16) {
   1d24c:	f1b9 0f10 	cmp.w	r9, #16
   1d250:	d009      	beq.n	1d266 <encode_uint+0xc8>
}
   1d252:	4640      	mov	r0, r8
   1d254:	b003      	add	sp, #12
   1d256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1d25a:	9a01      	ldr	r2, [sp, #4]
   1d25c:	7893      	ldrb	r3, [r2, #2]
   1d25e:	f043 0308 	orr.w	r3, r3, #8
   1d262:	7093      	strb	r3, [r2, #2]
   1d264:	e7f5      	b.n	1d252 <encode_uint+0xb4>
			conv->altform_0c = true;
   1d266:	9a01      	ldr	r2, [sp, #4]
   1d268:	7893      	ldrb	r3, [r2, #2]
   1d26a:	f043 0310 	orr.w	r3, r3, #16
   1d26e:	7093      	strb	r3, [r2, #2]
   1d270:	e7ef      	b.n	1d252 <encode_uint+0xb4>

0001d272 <outs>:
{
   1d272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d276:	4607      	mov	r7, r0
   1d278:	460e      	mov	r6, r1
   1d27a:	4614      	mov	r4, r2
   1d27c:	4698      	mov	r8, r3
	size_t count = 0;
   1d27e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d280:	e006      	b.n	1d290 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   1d282:	4631      	mov	r1, r6
   1d284:	f814 0b01 	ldrb.w	r0, [r4], #1
   1d288:	47b8      	blx	r7
		if (rc < 0) {
   1d28a:	2800      	cmp	r0, #0
   1d28c:	db09      	blt.n	1d2a2 <outs+0x30>
		++count;
   1d28e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1d290:	4544      	cmp	r4, r8
   1d292:	d3f6      	bcc.n	1d282 <outs+0x10>
   1d294:	f1b8 0f00 	cmp.w	r8, #0
   1d298:	d102      	bne.n	1d2a0 <outs+0x2e>
   1d29a:	7823      	ldrb	r3, [r4, #0]
   1d29c:	2b00      	cmp	r3, #0
   1d29e:	d1f0      	bne.n	1d282 <outs+0x10>
	return (int)count;
   1d2a0:	4628      	mov	r0, r5
}
   1d2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d2a6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1d2a6:	4770      	bx	lr

0001d2a8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1d2a8:	2300      	movs	r3, #0
   1d2aa:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   1d2ac:	6003      	str	r3, [r0, #0]
}
   1d2ae:	4770      	bx	lr

0001d2b0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1d2b0:	6803      	ldr	r3, [r0, #0]
   1d2b2:	b12b      	cbz	r3, 1d2c0 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   1d2b4:	6843      	ldr	r3, [r0, #4]
   1d2b6:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   1d2b8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1d2ba:	2300      	movs	r3, #0
   1d2bc:	600b      	str	r3, [r1, #0]
}
   1d2be:	4770      	bx	lr
		list->head = msg;
   1d2c0:	6001      	str	r1, [r0, #0]
   1d2c2:	e7f9      	b.n	1d2b8 <log_list_add_tail+0x8>

0001d2c4 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1d2c4:	6800      	ldr	r0, [r0, #0]
   1d2c6:	4770      	bx	lr

0001d2c8 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1d2c8:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1d2ca:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1d2cc:	b108      	cbz	r0, 1d2d2 <log_list_head_get+0xa>
		list->head = list->head->next;
   1d2ce:	6802      	ldr	r2, [r0, #0]
   1d2d0:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1d2d2:	4770      	bx	lr

0001d2d4 <dummy_timestamp>:
}
   1d2d4:	2000      	movs	r0, #0
   1d2d6:	4770      	bx	lr

0001d2d8 <msg_filter_check>:
}
   1d2d8:	2001      	movs	r0, #1
   1d2da:	4770      	bx	lr

0001d2dc <default_get_timestamp>:
{
   1d2dc:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1d2de:	f003 fa45 	bl	2076c <sys_clock_cycle_get_32>
}
   1d2e2:	bd08      	pop	{r3, pc}

0001d2e4 <z_log_get_s_mask>:
{
   1d2e4:	b470      	push	{r4, r5, r6}
   1d2e6:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   1d2e8:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1d2ea:	4605      	mov	r5, r0
	bool arm = false;
   1d2ec:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   1d2ee:	e001      	b.n	1d2f4 <z_log_get_s_mask+0x10>
			arm = !arm;
   1d2f0:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   1d2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   1d2f8:	b19a      	cbz	r2, 1d322 <z_log_get_s_mask+0x3e>
   1d2fa:	428d      	cmp	r5, r1
   1d2fc:	d211      	bcs.n	1d322 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   1d2fe:	2a25      	cmp	r2, #37	; 0x25
   1d300:	d0f6      	beq.n	1d2f0 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1d302:	2c00      	cmp	r4, #0
   1d304:	d0f6      	beq.n	1d2f4 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1d306:	f042 0620 	orr.w	r6, r2, #32
   1d30a:	3e61      	subs	r6, #97	; 0x61
   1d30c:	2e19      	cmp	r6, #25
   1d30e:	d8f1      	bhi.n	1d2f4 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   1d310:	2a73      	cmp	r2, #115	; 0x73
   1d312:	d002      	beq.n	1d31a <z_log_get_s_mask+0x36>
			arg++;
   1d314:	3501      	adds	r5, #1
			arm = false;
   1d316:	2400      	movs	r4, #0
   1d318:	e7ec      	b.n	1d2f4 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   1d31a:	2201      	movs	r2, #1
   1d31c:	40aa      	lsls	r2, r5
   1d31e:	4310      	orrs	r0, r2
   1d320:	e7f8      	b.n	1d314 <z_log_get_s_mask+0x30>
}
   1d322:	bc70      	pop	{r4, r5, r6}
   1d324:	4770      	bx	lr

0001d326 <block_on_alloc>:
}
   1d326:	2000      	movs	r0, #0
   1d328:	4770      	bx	lr

0001d32a <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1d32a:	2901      	cmp	r1, #1
   1d32c:	d906      	bls.n	1d33c <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   1d32e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d330:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   1d332:	2906      	cmp	r1, #6
   1d334:	d907      	bls.n	1d346 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   1d336:	3907      	subs	r1, #7
		cont = cont->next;
   1d338:	681b      	ldr	r3, [r3, #0]
   1d33a:	e7fa      	b.n	1d332 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   1d33c:	3104      	adds	r1, #4
   1d33e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d342:	6888      	ldr	r0, [r1, #8]
   1d344:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   1d346:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1d34a:	6848      	ldr	r0, [r1, #4]
}
   1d34c:	4770      	bx	lr

0001d34e <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   1d34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d352:	460d      	mov	r5, r1
   1d354:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   1d356:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d358:	2a03      	cmp	r2, #3
   1d35a:	d917      	bls.n	1d38c <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   1d35c:	2208      	movs	r2, #8
   1d35e:	3018      	adds	r0, #24
   1d360:	f000 fd61 	bl	1de26 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d364:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1d366:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   1d368:	b1b4      	cbz	r4, 1d398 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1d36a:	46a0      	mov	r8, r4
   1d36c:	2c07      	cmp	r4, #7
   1d36e:	bf28      	it	cs
   1d370:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   1d374:	ea4f 0788 	mov.w	r7, r8, lsl #2
   1d378:	463a      	mov	r2, r7
   1d37a:	4629      	mov	r1, r5
   1d37c:	1d30      	adds	r0, r6, #4
   1d37e:	f000 fd52 	bl	1de26 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   1d382:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   1d386:	443d      	add	r5, r7
		cont = cont->next;
   1d388:	6836      	ldr	r6, [r6, #0]
   1d38a:	e7ed      	b.n	1d368 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   1d38c:	0092      	lsls	r2, r2, #2
   1d38e:	3014      	adds	r0, #20
   1d390:	f000 fd49 	bl	1de26 <memcpy>
		nargs  = 0U;
   1d394:	2400      	movs	r4, #0
   1d396:	e7e7      	b.n	1d368 <copy_args_to_msg+0x1a>
	}
}
   1d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d39c <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1d39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d3a0:	461c      	mov	r4, r3
   1d3a2:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1d3a6:	8903      	ldrh	r3, [r0, #8]
   1d3a8:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1d3ac:	42a3      	cmp	r3, r4
   1d3ae:	d91f      	bls.n	1d3f0 <log_msg_hexdump_data_op+0x54>
   1d3b0:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   1d3b2:	6811      	ldr	r1, [r2, #0]
   1d3b4:	4421      	add	r1, r4
   1d3b6:	4299      	cmp	r1, r3
   1d3b8:	d901      	bls.n	1d3be <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   1d3ba:	1b19      	subs	r1, r3, r4
   1d3bc:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   1d3be:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d3c0:	2b0c      	cmp	r3, #12
   1d3c2:	d919      	bls.n	1d3f8 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   1d3c4:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   1d3c8:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d3ca:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   1d3cc:	42a3      	cmp	r3, r4
   1d3ce:	d91e      	bls.n	1d40e <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1d3d0:	42bb      	cmp	r3, r7
   1d3d2:	bf28      	it	cs
   1d3d4:	463b      	movcs	r3, r7
   1d3d6:	461d      	mov	r5, r3

		if (put_op) {
   1d3d8:	f1b9 0f00 	cmp.w	r9, #0
   1d3dc:	d010      	beq.n	1d400 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1d3de:	461a      	mov	r2, r3
   1d3e0:	4641      	mov	r1, r8
   1d3e2:	eb0c 0004 	add.w	r0, ip, r4
   1d3e6:	f000 fd1e 	bl	1de26 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   1d3ea:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   1d3ec:	44a8      	add	r8, r5
   1d3ee:	e021      	b.n	1d434 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   1d3f0:	2300      	movs	r3, #0
   1d3f2:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1d3f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   1d3f8:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   1d3fc:	2600      	movs	r6, #0
   1d3fe:	e7e5      	b.n	1d3cc <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1d400:	461a      	mov	r2, r3
   1d402:	eb0c 0104 	add.w	r1, ip, r4
   1d406:	4640      	mov	r0, r8
   1d408:	f000 fd0d 	bl	1de26 <memcpy>
   1d40c:	e7ed      	b.n	1d3ea <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1d40e:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   1d410:	b91e      	cbnz	r6, 1d41a <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   1d412:	6946      	ldr	r6, [r0, #20]
   1d414:	e001      	b.n	1d41a <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   1d416:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   1d418:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   1d41a:	2c1b      	cmp	r4, #27
   1d41c:	d8fb      	bhi.n	1d416 <log_msg_hexdump_data_op+0x7a>
   1d41e:	e009      	b.n	1d434 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1d420:	1931      	adds	r1, r6, r4
   1d422:	462a      	mov	r2, r5
   1d424:	3104      	adds	r1, #4
   1d426:	4640      	mov	r0, r8
   1d428:	f000 fcfd 	bl	1de26 <memcpy>
		cont = cont->next;
   1d42c:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   1d42e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   1d430:	44a8      	add	r8, r5
		offset = 0;
   1d432:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   1d434:	2f00      	cmp	r7, #0
   1d436:	d0dd      	beq.n	1d3f4 <log_msg_hexdump_data_op+0x58>
   1d438:	2e00      	cmp	r6, #0
   1d43a:	d0db      	beq.n	1d3f4 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1d43c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1d440:	42bd      	cmp	r5, r7
   1d442:	bf28      	it	cs
   1d444:	463d      	movcs	r5, r7
		if (put_op) {
   1d446:	f1b9 0f00 	cmp.w	r9, #0
   1d44a:	d0e9      	beq.n	1d420 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   1d44c:	1930      	adds	r0, r6, r4
   1d44e:	462a      	mov	r2, r5
   1d450:	4641      	mov	r1, r8
   1d452:	3004      	adds	r0, #4
   1d454:	f000 fce7 	bl	1de26 <memcpy>
   1d458:	e7e8      	b.n	1d42c <log_msg_hexdump_data_op+0x90>

0001d45a <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   1d45a:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d45c:	f3bf 8f5b 	dmb	ish
   1d460:	e850 3f00 	ldrex	r3, [r0]
   1d464:	3301      	adds	r3, #1
   1d466:	e840 3200 	strex	r2, r3, [r0]
   1d46a:	2a00      	cmp	r2, #0
   1d46c:	d1f8      	bne.n	1d460 <log_msg_get+0x6>
   1d46e:	f3bf 8f5b 	dmb	ish
}
   1d472:	4770      	bx	lr

0001d474 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1d474:	7a40      	ldrb	r0, [r0, #9]
}
   1d476:	0900      	lsrs	r0, r0, #4
   1d478:	4770      	bx	lr

0001d47a <log_msg_arg_get>:
{
   1d47a:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1d47c:	7a43      	ldrb	r3, [r0, #9]
   1d47e:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1d482:	d20a      	bcs.n	1d49a <log_msg_arg_get+0x20>
   1d484:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d486:	2a03      	cmp	r2, #3
   1d488:	d804      	bhi.n	1d494 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   1d48a:	3104      	adds	r1, #4
   1d48c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1d490:	6840      	ldr	r0, [r0, #4]
   1d492:	e003      	b.n	1d49c <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   1d494:	f7ff ff49 	bl	1d32a <cont_arg_get>
   1d498:	e000      	b.n	1d49c <log_msg_arg_get+0x22>
		return 0;
   1d49a:	2000      	movs	r0, #0
}
   1d49c:	bd08      	pop	{r3, pc}

0001d49e <log_msg_str_get>:
}
   1d49e:	6900      	ldr	r0, [r0, #16]
   1d4a0:	4770      	bx	lr

0001d4a2 <log_msg_put>:
{
   1d4a2:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   1d4a4:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d4a6:	f3bf 8f5b 	dmb	ish
   1d4aa:	e853 2f00 	ldrex	r2, [r3]
   1d4ae:	3a01      	subs	r2, #1
   1d4b0:	e843 2100 	strex	r1, r2, [r3]
   1d4b4:	2900      	cmp	r1, #0
   1d4b6:	d1f8      	bne.n	1d4aa <log_msg_put+0x8>
   1d4b8:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1d4bc:	6843      	ldr	r3, [r0, #4]
   1d4be:	b103      	cbz	r3, 1d4c2 <log_msg_put+0x20>
}
   1d4c0:	bd08      	pop	{r3, pc}
		msg_free(msg);
   1d4c2:	f7f3 fc6f 	bl	10da4 <msg_free>
}
   1d4c6:	e7fb      	b.n	1d4c0 <log_msg_put+0x1e>

0001d4c8 <msg_alloc>:
{
   1d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d4ca:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d4cc:	f7f3 fc4e 	bl	10d6c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1d4d0:	4607      	mov	r7, r0
   1d4d2:	b140      	cbz	r0, 1d4e6 <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   1d4d4:	2301      	movs	r3, #1
   1d4d6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d4d8:	2200      	movs	r2, #0
   1d4da:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   1d4dc:	f04f 0300 	mov.w	r3, #0
   1d4e0:	f362 0300 	bfi	r3, r2, #0, #1
   1d4e4:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d4e6:	b1f7      	cbz	r7, 1d526 <msg_alloc+0x5e>
   1d4e8:	2d03      	cmp	r5, #3
   1d4ea:	d91c      	bls.n	1d526 <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   1d4ec:	7a7b      	ldrb	r3, [r7, #9]
   1d4ee:	f36f 1307 	bfc	r3, #4, #4
   1d4f2:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   1d4f4:	7a3b      	ldrb	r3, [r7, #8]
   1d4f6:	f043 0302 	orr.w	r3, r3, #2
   1d4fa:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d4fc:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   1d4fe:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   1d502:	2300      	movs	r3, #0
   1d504:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   1d506:	2d00      	cmp	r5, #0
   1d508:	dd0d      	ble.n	1d526 <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1d50a:	f7f3 fc2f 	bl	10d6c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1d50e:	4604      	mov	r4, r0
   1d510:	b128      	cbz	r0, 1d51e <msg_alloc+0x56>
		*next = cont;
   1d512:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   1d514:	2300      	movs	r3, #0
   1d516:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   1d518:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   1d51a:	3d07      	subs	r5, #7
   1d51c:	e7f3      	b.n	1d506 <msg_alloc+0x3e>
			msg_free(msg);
   1d51e:	4638      	mov	r0, r7
   1d520:	f7f3 fc40 	bl	10da4 <msg_free>
			return NULL;
   1d524:	4627      	mov	r7, r4
}
   1d526:	4638      	mov	r0, r7
   1d528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d52a <log_msg_create_n>:
{
   1d52a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d52c:	4607      	mov	r7, r0
   1d52e:	460e      	mov	r6, r1
   1d530:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   1d532:	4610      	mov	r0, r2
   1d534:	f7ff ffc8 	bl	1d4c8 <msg_alloc>
	if (msg != NULL) {
   1d538:	4605      	mov	r5, r0
   1d53a:	b140      	cbz	r0, 1d54e <log_msg_create_n+0x24>
		msg->str = str;
   1d53c:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   1d53e:	7a43      	ldrb	r3, [r0, #9]
   1d540:	f364 1307 	bfi	r3, r4, #4, #4
   1d544:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   1d546:	4622      	mov	r2, r4
   1d548:	4631      	mov	r1, r6
   1d54a:	f7ff ff00 	bl	1d34e <copy_args_to_msg>
}
   1d54e:	4628      	mov	r0, r5
   1d550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d552 <log_msg_hexdump_create>:
{
   1d552:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d556:	4606      	mov	r6, r0
   1d558:	460f      	mov	r7, r1
   1d55a:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   1d55c:	f643 75ff 	movw	r5, #16383	; 0x3fff
   1d560:	4295      	cmp	r5, r2
   1d562:	bf28      	it	cs
   1d564:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   1d566:	f7f3 fc01 	bl	10d6c <log_msg_chunk_alloc>
	if (msg == NULL) {
   1d56a:	4681      	mov	r9, r0
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d045      	beq.n	1d5fc <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   1d570:	2301      	movs	r3, #1
   1d572:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   1d574:	7a03      	ldrb	r3, [r0, #8]
   1d576:	f043 0301 	orr.w	r3, r3, #1
   1d57a:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   1d57c:	8903      	ldrh	r3, [r0, #8]
   1d57e:	f365 038f 	bfi	r3, r5, #2, #14
   1d582:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   1d584:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1d586:	2c0c      	cmp	r4, #12
   1d588:	d927      	bls.n	1d5da <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   1d58a:	2208      	movs	r2, #8
   1d58c:	4639      	mov	r1, r7
   1d58e:	3018      	adds	r0, #24
   1d590:	f000 fc49 	bl	1de26 <memcpy>
		msg->payload.ext.next = NULL;
   1d594:	2300      	movs	r3, #0
   1d596:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   1d59a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d59e:	f043 0302 	orr.w	r3, r3, #2
   1d5a2:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d5a6:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1d5a8:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   1d5aa:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   1d5ae:	b32d      	cbz	r5, 1d5fc <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1d5b0:	f7f3 fbdc 	bl	10d6c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1d5b4:	4604      	mov	r4, r0
   1d5b6:	b1e8      	cbz	r0, 1d5f4 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   1d5b8:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   1d5bc:	2300      	movs	r3, #0
   1d5be:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   1d5c0:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   1d5c2:	462e      	mov	r6, r5
   1d5c4:	2d1c      	cmp	r5, #28
   1d5c6:	bf28      	it	cs
   1d5c8:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   1d5ca:	4632      	mov	r2, r6
   1d5cc:	4639      	mov	r1, r7
   1d5ce:	3004      	adds	r0, #4
   1d5d0:	f000 fc29 	bl	1de26 <memcpy>
		data += chunk_length;
   1d5d4:	4437      	add	r7, r6
		length -= chunk_length;
   1d5d6:	1bad      	subs	r5, r5, r6
   1d5d8:	e7e9      	b.n	1d5ae <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   1d5da:	462a      	mov	r2, r5
   1d5dc:	4639      	mov	r1, r7
   1d5de:	3014      	adds	r0, #20
   1d5e0:	f000 fc21 	bl	1de26 <memcpy>
		msg->hdr.params.generic.ext = 0;
   1d5e4:	f899 3008 	ldrb.w	r3, [r9, #8]
   1d5e8:	f36f 0341 	bfc	r3, #1, #1
   1d5ec:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   1d5f0:	2500      	movs	r5, #0
   1d5f2:	e7da      	b.n	1d5aa <log_msg_hexdump_create+0x58>
			msg_free(msg);
   1d5f4:	4648      	mov	r0, r9
   1d5f6:	f7f3 fbd5 	bl	10da4 <msg_free>
			return NULL;
   1d5fa:	46a1      	mov	r9, r4
}
   1d5fc:	4648      	mov	r0, r9
   1d5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d602 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1d602:	b510      	push	{r4, lr}
   1d604:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1d606:	2400      	movs	r4, #0
   1d608:	9400      	str	r4, [sp, #0]
   1d60a:	f7ff fec7 	bl	1d39c <log_msg_hexdump_data_op>
}
   1d60e:	b002      	add	sp, #8
   1d610:	bd10      	pop	{r4, pc}

0001d612 <buffer_write>:
{
   1d612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d614:	4607      	mov	r7, r0
   1d616:	460d      	mov	r5, r1
   1d618:	4614      	mov	r4, r2
   1d61a:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   1d61c:	4632      	mov	r2, r6
   1d61e:	4621      	mov	r1, r4
   1d620:	4628      	mov	r0, r5
   1d622:	47b8      	blx	r7
		buf += processed;
   1d624:	4405      	add	r5, r0
	} while (len != 0);
   1d626:	1a24      	subs	r4, r4, r0
   1d628:	d1f8      	bne.n	1d61c <buffer_write+0xa>
}
   1d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d62c <color_prefix>:
{
   1d62c:	b508      	push	{r3, lr}
   1d62e:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   1d630:	2201      	movs	r2, #1
   1d632:	f7f3 fc4f 	bl	10ed4 <color_print>
}
   1d636:	bd08      	pop	{r3, pc}

0001d638 <color_postfix>:
{
   1d638:	b508      	push	{r3, lr}
   1d63a:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   1d63c:	2200      	movs	r2, #0
   1d63e:	f7f3 fc49 	bl	10ed4 <color_print>
}
   1d642:	bd08      	pop	{r3, pc}

0001d644 <postfix_print>:
{
   1d644:	b538      	push	{r3, r4, r5, lr}
   1d646:	4605      	mov	r5, r0
   1d648:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   1d64a:	f001 0101 	and.w	r1, r1, #1
   1d64e:	f7ff fff3 	bl	1d638 <color_postfix>
	newline_print(output, flags);
   1d652:	4621      	mov	r1, r4
   1d654:	4628      	mov	r0, r5
   1d656:	f7f3 fc53 	bl	10f00 <newline_print>
}
   1d65a:	bd38      	pop	{r3, r4, r5, pc}

0001d65c <prefix_print>:
{
   1d65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d660:	b083      	sub	sp, #12
   1d662:	4604      	mov	r4, r0
   1d664:	4615      	mov	r5, r2
   1d666:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   1d66a:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1d66e:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   1d672:	f011 0702 	ands.w	r7, r1, #2
   1d676:	d113      	bne.n	1d6a0 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   1d678:	4632      	mov	r2, r6
   1d67a:	4649      	mov	r1, r9
   1d67c:	4620      	mov	r0, r4
   1d67e:	f7ff ffd5 	bl	1d62c <color_prefix>
	length += ids_print(output, level_on, func_on,
   1d682:	9601      	str	r6, [sp, #4]
   1d684:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1d688:	9300      	str	r3, [sp, #0]
   1d68a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1d68e:	462a      	mov	r2, r5
   1d690:	4641      	mov	r1, r8
   1d692:	4620      	mov	r0, r4
   1d694:	f7f3 fca6 	bl	10fe4 <ids_print>
}
   1d698:	4438      	add	r0, r7
   1d69a:	b003      	add	sp, #12
   1d69c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   1d6a0:	461a      	mov	r2, r3
   1d6a2:	f7f3 fbd1 	bl	10e48 <timestamp_print>
   1d6a6:	4607      	mov	r7, r0
   1d6a8:	e7e6      	b.n	1d678 <prefix_print+0x1c>

0001d6aa <std_print>:
{
   1d6aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d6ae:	b08e      	sub	sp, #56	; 0x38
   1d6b0:	af0e      	add	r7, sp, #56	; 0x38
   1d6b2:	4606      	mov	r6, r0
   1d6b4:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   1d6b6:	f7ff fef2 	bl	1d49e <log_msg_str_get>
   1d6ba:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1d6bc:	4630      	mov	r0, r6
   1d6be:	f7ff fed9 	bl	1d474 <log_msg_nargs_get>
   1d6c2:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1d6c4:	0083      	lsls	r3, r0, #2
   1d6c6:	3307      	adds	r3, #7
   1d6c8:	f023 0307 	bic.w	r3, r3, #7
   1d6cc:	ebad 0d03 	sub.w	sp, sp, r3
   1d6d0:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1d6d2:	2400      	movs	r4, #0
   1d6d4:	4544      	cmp	r4, r8
   1d6d6:	d207      	bcs.n	1d6e8 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   1d6d8:	4621      	mov	r1, r4
   1d6da:	4630      	mov	r0, r6
   1d6dc:	f7ff fecd 	bl	1d47a <log_msg_arg_get>
   1d6e0:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   1d6e4:	3401      	adds	r4, #1
   1d6e6:	e7f5      	b.n	1d6d4 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   1d6e8:	4630      	mov	r0, r6
   1d6ea:	f7ff fec3 	bl	1d474 <log_msg_nargs_get>
   1d6ee:	280f      	cmp	r0, #15
   1d6f0:	d815      	bhi.n	1d71e <std_print+0x74>
   1d6f2:	e8df f010 	tbh	[pc, r0, lsl #1]
   1d6f6:	0010      	.short	0x0010
   1d6f8:	001d0017 	.word	0x001d0017
   1d6fc:	002d0024 	.word	0x002d0024
   1d700:	00450038 	.word	0x00450038
   1d704:	00650054 	.word	0x00650054
   1d708:	008d0078 	.word	0x008d0078
   1d70c:	00bd00a4 	.word	0x00bd00a4
   1d710:	00f500d8 	.word	0x00f500d8
   1d714:	0114      	.short	0x0114
		print_formatted(output, str);
   1d716:	4651      	mov	r1, sl
   1d718:	4648      	mov	r0, r9
   1d71a:	f7f3 fb83 	bl	10e24 <print_formatted>
}
   1d71e:	46bd      	mov	sp, r7
   1d720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1d724:	682a      	ldr	r2, [r5, #0]
   1d726:	4651      	mov	r1, sl
   1d728:	4648      	mov	r0, r9
   1d72a:	f7f3 fb7b 	bl	10e24 <print_formatted>
		break;
   1d72e:	e7f6      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   1d730:	686b      	ldr	r3, [r5, #4]
   1d732:	682a      	ldr	r2, [r5, #0]
   1d734:	4651      	mov	r1, sl
   1d736:	4648      	mov	r0, r9
   1d738:	f7f3 fb74 	bl	10e24 <print_formatted>
		break;
   1d73c:	e7ef      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   1d73e:	686b      	ldr	r3, [r5, #4]
   1d740:	682a      	ldr	r2, [r5, #0]
   1d742:	68a9      	ldr	r1, [r5, #8]
   1d744:	9100      	str	r1, [sp, #0]
   1d746:	4651      	mov	r1, sl
   1d748:	4648      	mov	r0, r9
   1d74a:	f7f3 fb6b 	bl	10e24 <print_formatted>
		break;
   1d74e:	e7e6      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d750:	686b      	ldr	r3, [r5, #4]
   1d752:	682a      	ldr	r2, [r5, #0]
   1d754:	68e9      	ldr	r1, [r5, #12]
   1d756:	9101      	str	r1, [sp, #4]
   1d758:	68a9      	ldr	r1, [r5, #8]
   1d75a:	9100      	str	r1, [sp, #0]
   1d75c:	4651      	mov	r1, sl
   1d75e:	4648      	mov	r0, r9
   1d760:	f7f3 fb60 	bl	10e24 <print_formatted>
		break;
   1d764:	e7db      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d766:	686b      	ldr	r3, [r5, #4]
   1d768:	682a      	ldr	r2, [r5, #0]
   1d76a:	6929      	ldr	r1, [r5, #16]
   1d76c:	9102      	str	r1, [sp, #8]
   1d76e:	68e9      	ldr	r1, [r5, #12]
   1d770:	9101      	str	r1, [sp, #4]
   1d772:	68a9      	ldr	r1, [r5, #8]
   1d774:	9100      	str	r1, [sp, #0]
   1d776:	4651      	mov	r1, sl
   1d778:	4648      	mov	r0, r9
   1d77a:	f7f3 fb53 	bl	10e24 <print_formatted>
		break;
   1d77e:	e7ce      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d780:	686b      	ldr	r3, [r5, #4]
   1d782:	682a      	ldr	r2, [r5, #0]
   1d784:	6969      	ldr	r1, [r5, #20]
   1d786:	9103      	str	r1, [sp, #12]
   1d788:	6929      	ldr	r1, [r5, #16]
   1d78a:	9102      	str	r1, [sp, #8]
   1d78c:	68e9      	ldr	r1, [r5, #12]
   1d78e:	9101      	str	r1, [sp, #4]
   1d790:	68a9      	ldr	r1, [r5, #8]
   1d792:	9100      	str	r1, [sp, #0]
   1d794:	4651      	mov	r1, sl
   1d796:	4648      	mov	r0, r9
   1d798:	f7f3 fb44 	bl	10e24 <print_formatted>
		break;
   1d79c:	e7bf      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d79e:	686b      	ldr	r3, [r5, #4]
   1d7a0:	682a      	ldr	r2, [r5, #0]
   1d7a2:	69a9      	ldr	r1, [r5, #24]
   1d7a4:	9104      	str	r1, [sp, #16]
   1d7a6:	6969      	ldr	r1, [r5, #20]
   1d7a8:	9103      	str	r1, [sp, #12]
   1d7aa:	6929      	ldr	r1, [r5, #16]
   1d7ac:	9102      	str	r1, [sp, #8]
   1d7ae:	68e9      	ldr	r1, [r5, #12]
   1d7b0:	9101      	str	r1, [sp, #4]
   1d7b2:	68a9      	ldr	r1, [r5, #8]
   1d7b4:	9100      	str	r1, [sp, #0]
   1d7b6:	4651      	mov	r1, sl
   1d7b8:	4648      	mov	r0, r9
   1d7ba:	f7f3 fb33 	bl	10e24 <print_formatted>
		break;
   1d7be:	e7ae      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d7c0:	686b      	ldr	r3, [r5, #4]
   1d7c2:	682a      	ldr	r2, [r5, #0]
   1d7c4:	69e9      	ldr	r1, [r5, #28]
   1d7c6:	9105      	str	r1, [sp, #20]
   1d7c8:	69a9      	ldr	r1, [r5, #24]
   1d7ca:	9104      	str	r1, [sp, #16]
   1d7cc:	6969      	ldr	r1, [r5, #20]
   1d7ce:	9103      	str	r1, [sp, #12]
   1d7d0:	6929      	ldr	r1, [r5, #16]
   1d7d2:	9102      	str	r1, [sp, #8]
   1d7d4:	68e9      	ldr	r1, [r5, #12]
   1d7d6:	9101      	str	r1, [sp, #4]
   1d7d8:	68a9      	ldr	r1, [r5, #8]
   1d7da:	9100      	str	r1, [sp, #0]
   1d7dc:	4651      	mov	r1, sl
   1d7de:	4648      	mov	r0, r9
   1d7e0:	f7f3 fb20 	bl	10e24 <print_formatted>
		break;
   1d7e4:	e79b      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d7e6:	686b      	ldr	r3, [r5, #4]
   1d7e8:	682a      	ldr	r2, [r5, #0]
   1d7ea:	6a29      	ldr	r1, [r5, #32]
   1d7ec:	9106      	str	r1, [sp, #24]
   1d7ee:	69e9      	ldr	r1, [r5, #28]
   1d7f0:	9105      	str	r1, [sp, #20]
   1d7f2:	69a9      	ldr	r1, [r5, #24]
   1d7f4:	9104      	str	r1, [sp, #16]
   1d7f6:	6969      	ldr	r1, [r5, #20]
   1d7f8:	9103      	str	r1, [sp, #12]
   1d7fa:	6929      	ldr	r1, [r5, #16]
   1d7fc:	9102      	str	r1, [sp, #8]
   1d7fe:	68e9      	ldr	r1, [r5, #12]
   1d800:	9101      	str	r1, [sp, #4]
   1d802:	68a9      	ldr	r1, [r5, #8]
   1d804:	9100      	str	r1, [sp, #0]
   1d806:	4651      	mov	r1, sl
   1d808:	4648      	mov	r0, r9
   1d80a:	f7f3 fb0b 	bl	10e24 <print_formatted>
		break;
   1d80e:	e786      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d810:	686b      	ldr	r3, [r5, #4]
   1d812:	682a      	ldr	r2, [r5, #0]
   1d814:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d816:	9107      	str	r1, [sp, #28]
   1d818:	6a29      	ldr	r1, [r5, #32]
   1d81a:	9106      	str	r1, [sp, #24]
   1d81c:	69e9      	ldr	r1, [r5, #28]
   1d81e:	9105      	str	r1, [sp, #20]
   1d820:	69a9      	ldr	r1, [r5, #24]
   1d822:	9104      	str	r1, [sp, #16]
   1d824:	6969      	ldr	r1, [r5, #20]
   1d826:	9103      	str	r1, [sp, #12]
   1d828:	6929      	ldr	r1, [r5, #16]
   1d82a:	9102      	str	r1, [sp, #8]
   1d82c:	68e9      	ldr	r1, [r5, #12]
   1d82e:	9101      	str	r1, [sp, #4]
   1d830:	68a9      	ldr	r1, [r5, #8]
   1d832:	9100      	str	r1, [sp, #0]
   1d834:	4651      	mov	r1, sl
   1d836:	4648      	mov	r0, r9
   1d838:	f7f3 faf4 	bl	10e24 <print_formatted>
		break;
   1d83c:	e76f      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d83e:	686b      	ldr	r3, [r5, #4]
   1d840:	682a      	ldr	r2, [r5, #0]
   1d842:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1d844:	9108      	str	r1, [sp, #32]
   1d846:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d848:	9107      	str	r1, [sp, #28]
   1d84a:	6a29      	ldr	r1, [r5, #32]
   1d84c:	9106      	str	r1, [sp, #24]
   1d84e:	69e9      	ldr	r1, [r5, #28]
   1d850:	9105      	str	r1, [sp, #20]
   1d852:	69a9      	ldr	r1, [r5, #24]
   1d854:	9104      	str	r1, [sp, #16]
   1d856:	6969      	ldr	r1, [r5, #20]
   1d858:	9103      	str	r1, [sp, #12]
   1d85a:	6929      	ldr	r1, [r5, #16]
   1d85c:	9102      	str	r1, [sp, #8]
   1d85e:	68e9      	ldr	r1, [r5, #12]
   1d860:	9101      	str	r1, [sp, #4]
   1d862:	68a9      	ldr	r1, [r5, #8]
   1d864:	9100      	str	r1, [sp, #0]
   1d866:	4651      	mov	r1, sl
   1d868:	4648      	mov	r0, r9
   1d86a:	f7f3 fadb 	bl	10e24 <print_formatted>
		break;
   1d86e:	e756      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d870:	686b      	ldr	r3, [r5, #4]
   1d872:	682a      	ldr	r2, [r5, #0]
   1d874:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1d876:	9109      	str	r1, [sp, #36]	; 0x24
   1d878:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1d87a:	9108      	str	r1, [sp, #32]
   1d87c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d87e:	9107      	str	r1, [sp, #28]
   1d880:	6a29      	ldr	r1, [r5, #32]
   1d882:	9106      	str	r1, [sp, #24]
   1d884:	69e9      	ldr	r1, [r5, #28]
   1d886:	9105      	str	r1, [sp, #20]
   1d888:	69a9      	ldr	r1, [r5, #24]
   1d88a:	9104      	str	r1, [sp, #16]
   1d88c:	6969      	ldr	r1, [r5, #20]
   1d88e:	9103      	str	r1, [sp, #12]
   1d890:	6929      	ldr	r1, [r5, #16]
   1d892:	9102      	str	r1, [sp, #8]
   1d894:	68e9      	ldr	r1, [r5, #12]
   1d896:	9101      	str	r1, [sp, #4]
   1d898:	68a9      	ldr	r1, [r5, #8]
   1d89a:	9100      	str	r1, [sp, #0]
   1d89c:	4651      	mov	r1, sl
   1d89e:	4648      	mov	r0, r9
   1d8a0:	f7f3 fac0 	bl	10e24 <print_formatted>
		break;
   1d8a4:	e73b      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d8a6:	686b      	ldr	r3, [r5, #4]
   1d8a8:	682a      	ldr	r2, [r5, #0]
   1d8aa:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1d8ac:	910a      	str	r1, [sp, #40]	; 0x28
   1d8ae:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1d8b0:	9109      	str	r1, [sp, #36]	; 0x24
   1d8b2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1d8b4:	9108      	str	r1, [sp, #32]
   1d8b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d8b8:	9107      	str	r1, [sp, #28]
   1d8ba:	6a29      	ldr	r1, [r5, #32]
   1d8bc:	9106      	str	r1, [sp, #24]
   1d8be:	69e9      	ldr	r1, [r5, #28]
   1d8c0:	9105      	str	r1, [sp, #20]
   1d8c2:	69a9      	ldr	r1, [r5, #24]
   1d8c4:	9104      	str	r1, [sp, #16]
   1d8c6:	6969      	ldr	r1, [r5, #20]
   1d8c8:	9103      	str	r1, [sp, #12]
   1d8ca:	6929      	ldr	r1, [r5, #16]
   1d8cc:	9102      	str	r1, [sp, #8]
   1d8ce:	68e9      	ldr	r1, [r5, #12]
   1d8d0:	9101      	str	r1, [sp, #4]
   1d8d2:	68a9      	ldr	r1, [r5, #8]
   1d8d4:	9100      	str	r1, [sp, #0]
   1d8d6:	4651      	mov	r1, sl
   1d8d8:	4648      	mov	r0, r9
   1d8da:	f7f3 faa3 	bl	10e24 <print_formatted>
		break;
   1d8de:	e71e      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d8e0:	686b      	ldr	r3, [r5, #4]
   1d8e2:	682a      	ldr	r2, [r5, #0]
   1d8e4:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1d8e6:	910b      	str	r1, [sp, #44]	; 0x2c
   1d8e8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1d8ea:	910a      	str	r1, [sp, #40]	; 0x28
   1d8ec:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1d8ee:	9109      	str	r1, [sp, #36]	; 0x24
   1d8f0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1d8f2:	9108      	str	r1, [sp, #32]
   1d8f4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d8f6:	9107      	str	r1, [sp, #28]
   1d8f8:	6a29      	ldr	r1, [r5, #32]
   1d8fa:	9106      	str	r1, [sp, #24]
   1d8fc:	69e9      	ldr	r1, [r5, #28]
   1d8fe:	9105      	str	r1, [sp, #20]
   1d900:	69a9      	ldr	r1, [r5, #24]
   1d902:	9104      	str	r1, [sp, #16]
   1d904:	6969      	ldr	r1, [r5, #20]
   1d906:	9103      	str	r1, [sp, #12]
   1d908:	6929      	ldr	r1, [r5, #16]
   1d90a:	9102      	str	r1, [sp, #8]
   1d90c:	68e9      	ldr	r1, [r5, #12]
   1d90e:	9101      	str	r1, [sp, #4]
   1d910:	68a9      	ldr	r1, [r5, #8]
   1d912:	9100      	str	r1, [sp, #0]
   1d914:	4651      	mov	r1, sl
   1d916:	4648      	mov	r0, r9
   1d918:	f7f3 fa84 	bl	10e24 <print_formatted>
		break;
   1d91c:	e6ff      	b.n	1d71e <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1d91e:	686b      	ldr	r3, [r5, #4]
   1d920:	682a      	ldr	r2, [r5, #0]
   1d922:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1d924:	910c      	str	r1, [sp, #48]	; 0x30
   1d926:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1d928:	910b      	str	r1, [sp, #44]	; 0x2c
   1d92a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1d92c:	910a      	str	r1, [sp, #40]	; 0x28
   1d92e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   1d930:	9109      	str	r1, [sp, #36]	; 0x24
   1d932:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1d934:	9108      	str	r1, [sp, #32]
   1d936:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1d938:	9107      	str	r1, [sp, #28]
   1d93a:	6a29      	ldr	r1, [r5, #32]
   1d93c:	9106      	str	r1, [sp, #24]
   1d93e:	69e9      	ldr	r1, [r5, #28]
   1d940:	9105      	str	r1, [sp, #20]
   1d942:	69a9      	ldr	r1, [r5, #24]
   1d944:	9104      	str	r1, [sp, #16]
   1d946:	6969      	ldr	r1, [r5, #20]
   1d948:	9103      	str	r1, [sp, #12]
   1d94a:	6929      	ldr	r1, [r5, #16]
   1d94c:	9102      	str	r1, [sp, #8]
   1d94e:	68e9      	ldr	r1, [r5, #12]
   1d950:	9101      	str	r1, [sp, #4]
   1d952:	68a9      	ldr	r1, [r5, #8]
   1d954:	9100      	str	r1, [sp, #0]
   1d956:	4651      	mov	r1, sl
   1d958:	4648      	mov	r0, r9
   1d95a:	f7f3 fa63 	bl	10e24 <print_formatted>
}
   1d95e:	e6de      	b.n	1d71e <std_print+0x74>

0001d960 <log_output_flush>:
{
   1d960:	b510      	push	{r4, lr}
   1d962:	4604      	mov	r4, r0
		     output->control_block->offset,
   1d964:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1d966:	6853      	ldr	r3, [r2, #4]
   1d968:	6812      	ldr	r2, [r2, #0]
   1d96a:	6881      	ldr	r1, [r0, #8]
   1d96c:	6800      	ldr	r0, [r0, #0]
   1d96e:	f7ff fe50 	bl	1d612 <buffer_write>
	output->control_block->offset = 0;
   1d972:	6863      	ldr	r3, [r4, #4]
   1d974:	2200      	movs	r2, #0
   1d976:	601a      	str	r2, [r3, #0]
}
   1d978:	bd10      	pop	{r4, pc}

0001d97a <out_func>:
{
   1d97a:	b538      	push	{r3, r4, r5, lr}
   1d97c:	4605      	mov	r5, r0
   1d97e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d980:	684b      	ldr	r3, [r1, #4]
   1d982:	681a      	ldr	r2, [r3, #0]
   1d984:	68cb      	ldr	r3, [r1, #12]
   1d986:	429a      	cmp	r2, r3
   1d988:	d00f      	beq.n	1d9aa <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   1d98a:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d98c:	f3bf 8f5b 	dmb	ish
   1d990:	e853 2f00 	ldrex	r2, [r3]
   1d994:	1c51      	adds	r1, r2, #1
   1d996:	e843 1000 	strex	r0, r1, [r3]
   1d99a:	2800      	cmp	r0, #0
   1d99c:	d1f8      	bne.n	1d990 <out_func+0x16>
   1d99e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1d9a2:	68a3      	ldr	r3, [r4, #8]
   1d9a4:	549d      	strb	r5, [r3, r2]
}
   1d9a6:	2000      	movs	r0, #0
   1d9a8:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   1d9aa:	4608      	mov	r0, r1
   1d9ac:	f7ff ffd8 	bl	1d960 <log_output_flush>
   1d9b0:	e7eb      	b.n	1d98a <out_func+0x10>

0001d9b2 <log_output_msg_process>:
{
   1d9b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9b4:	b085      	sub	sp, #20
   1d9b6:	4606      	mov	r6, r0
   1d9b8:	460c      	mov	r4, r1
   1d9ba:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1d9bc:	7a0b      	ldrb	r3, [r1, #8]
   1d9be:	f083 0301 	eor.w	r3, r3, #1
   1d9c2:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   1d9c6:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   1d9c8:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   1d9ca:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   1d9ce:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   1d9d0:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   1d9d4:	f011 0507 	ands.w	r5, r1, #7
   1d9d8:	d10f      	bne.n	1d9fa <log_output_msg_process+0x48>
   1d9da:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1d9dc:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   1d9de:	f013 0f01 	tst.w	r3, #1
   1d9e2:	d014      	beq.n	1da0e <log_output_msg_process+0x5c>
	} else if (raw_string) {
   1d9e4:	b9c5      	cbnz	r5, 1da18 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   1d9e6:	4631      	mov	r1, r6
   1d9e8:	4620      	mov	r0, r4
   1d9ea:	f7f3 fb5b 	bl	110a4 <raw_string_print>
	if (!raw_string) {
   1d9ee:	b9cd      	cbnz	r5, 1da24 <log_output_msg_process+0x72>
	log_output_flush(output);
   1d9f0:	4630      	mov	r0, r6
   1d9f2:	f7ff ffb5 	bl	1d960 <log_output_flush>
}
   1d9f6:	b005      	add	sp, #20
   1d9f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   1d9fa:	9002      	str	r0, [sp, #8]
   1d9fc:	f8cd c004 	str.w	ip, [sp, #4]
   1da00:	9500      	str	r5, [sp, #0]
   1da02:	4639      	mov	r1, r7
   1da04:	4630      	mov	r0, r6
   1da06:	f7ff fe29 	bl	1d65c <prefix_print>
   1da0a:	4602      	mov	r2, r0
   1da0c:	e7e6      	b.n	1d9dc <log_output_msg_process+0x2a>
		std_print(msg, output);
   1da0e:	4631      	mov	r1, r6
   1da10:	4620      	mov	r0, r4
   1da12:	f7ff fe4a 	bl	1d6aa <std_print>
   1da16:	e7ea      	b.n	1d9ee <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   1da18:	463b      	mov	r3, r7
   1da1a:	4631      	mov	r1, r6
   1da1c:	4620      	mov	r0, r4
   1da1e:	f7f3 fb17 	bl	11050 <hexdump_print>
   1da22:	e7e4      	b.n	1d9ee <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   1da24:	462a      	mov	r2, r5
   1da26:	4639      	mov	r1, r7
   1da28:	4630      	mov	r0, r6
   1da2a:	f7ff fe0b 	bl	1d644 <postfix_print>
   1da2e:	e7df      	b.n	1d9f0 <log_output_msg_process+0x3e>

0001da30 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1da30:	2200      	movs	r2, #0
   1da32:	6002      	str	r2, [r0, #0]
   1da34:	6042      	str	r2, [r0, #4]
   1da36:	6082      	str	r2, [r0, #8]
}
   1da38:	4770      	bx	lr

0001da3a <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   1da3a:	428b      	cmp	r3, r1
   1da3c:	d901      	bls.n	1da42 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   1da3e:	2000      	movs	r0, #0
	}
}
   1da40:	4770      	bx	lr
{
   1da42:	b538      	push	{r3, r4, r5, lr}
   1da44:	4615      	mov	r5, r2
   1da46:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   1da48:	461a      	mov	r2, r3
   1da4a:	4629      	mov	r1, r5
   1da4c:	f000 f9eb 	bl	1de26 <memcpy>
		return from_len;
   1da50:	4620      	mov	r0, r4
}
   1da52:	bd38      	pop	{r3, r4, r5, pc}

0001da54 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   1da54:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   1da56:	f000 fa0a 	bl	1de6e <memset>
}
   1da5a:	bd08      	pop	{r3, pc}

0001da5c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1da5c:	09c3      	lsrs	r3, r0, #7
   1da5e:	005a      	lsls	r2, r3, #1
   1da60:	4413      	add	r3, r2
   1da62:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1da66:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1da6a:	b2c0      	uxtb	r0, r0
   1da6c:	4770      	bx	lr

0001da6e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1da6e:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   1da70:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1da72:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   1da76:	2a00      	cmp	r2, #0
   1da78:	db03      	blt.n	1da82 <gf_double+0x14>
   1da7a:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   1da7c:	f100 020f 	add.w	r2, r0, #15
   1da80:	e004      	b.n	1da8c <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1da82:	2487      	movs	r4, #135	; 0x87
   1da84:	e7fa      	b.n	1da7c <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   1da86:	f813 0901 	ldrb.w	r0, [r3], #-1
   1da8a:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   1da8c:	7818      	ldrb	r0, [r3, #0]
   1da8e:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   1da92:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   1da96:	428b      	cmp	r3, r1
   1da98:	d1f5      	bne.n	1da86 <gf_double+0x18>
	}
}
   1da9a:	bc10      	pop	{r4}
   1da9c:	4770      	bx	lr

0001da9e <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   1da9e:	b130      	cbz	r0, 1daae <tc_cmac_erase+0x10>
{
   1daa0:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1daa2:	2258      	movs	r2, #88	; 0x58
   1daa4:	2100      	movs	r1, #0
   1daa6:	f7ff ffd5 	bl	1da54 <_set>

	return TC_CRYPTO_SUCCESS;
   1daaa:	2001      	movs	r0, #1
}
   1daac:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   1daae:	2000      	movs	r0, #0
}
   1dab0:	4770      	bx	lr

0001dab2 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1dab2:	b1a0      	cbz	r0, 1dade <tc_cmac_init+0x2c>
{
   1dab4:	b510      	push	{r4, lr}
   1dab6:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1dab8:	2210      	movs	r2, #16
   1daba:	2100      	movs	r1, #0
   1dabc:	f7ff ffca 	bl	1da54 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1dac0:	2210      	movs	r2, #16
   1dac2:	2100      	movs	r1, #0
   1dac4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dac8:	f7ff ffc4 	bl	1da54 <_set>
	s->leftover_offset = 0;
   1dacc:	2300      	movs	r3, #0
   1dace:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1dad0:	2200      	movs	r2, #0
   1dad2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dad6:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   1dada:	2001      	movs	r0, #1
}
   1dadc:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   1dade:	2000      	movs	r0, #0
}
   1dae0:	4770      	bx	lr

0001dae2 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   1dae2:	b338      	cbz	r0, 1db34 <tc_cmac_setup+0x52>
{
   1dae4:	b570      	push	{r4, r5, r6, lr}
   1dae6:	460d      	mov	r5, r1
   1dae8:	4616      	mov	r6, r2
   1daea:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   1daec:	b321      	cbz	r1, 1db38 <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   1daee:	2258      	movs	r2, #88	; 0x58
   1daf0:	2100      	movs	r1, #0
   1daf2:	f7ff ffaf 	bl	1da54 <_set>
	s->sched = sched;
   1daf6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1daf8:	4629      	mov	r1, r5
   1dafa:	4630      	mov	r0, r6
   1dafc:	f7f3 fcc2 	bl	11484 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1db00:	2210      	movs	r2, #16
   1db02:	2100      	movs	r1, #0
   1db04:	4620      	mov	r0, r4
   1db06:	f7ff ffa5 	bl	1da54 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1db0a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1db0c:	4621      	mov	r1, r4
   1db0e:	4620      	mov	r0, r4
   1db10:	f7f3 fd16 	bl	11540 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1db14:	f104 0510 	add.w	r5, r4, #16
   1db18:	4621      	mov	r1, r4
   1db1a:	4628      	mov	r0, r5
   1db1c:	f7ff ffa7 	bl	1da6e <gf_double>
	gf_double (s->K2, s->K1);
   1db20:	4629      	mov	r1, r5
   1db22:	f104 0020 	add.w	r0, r4, #32
   1db26:	f7ff ffa2 	bl	1da6e <gf_double>
	tc_cmac_init(s);
   1db2a:	4620      	mov	r0, r4
   1db2c:	f7ff ffc1 	bl	1dab2 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1db30:	2001      	movs	r0, #1
}
   1db32:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1db34:	2000      	movs	r0, #0
}
   1db36:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1db38:	2000      	movs	r0, #0
   1db3a:	e7fa      	b.n	1db32 <tc_cmac_setup+0x50>

0001db3c <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1db3c:	2800      	cmp	r0, #0
   1db3e:	d062      	beq.n	1dc06 <tc_cmac_update+0xca>
{
   1db40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db44:	460e      	mov	r6, r1
   1db46:	4617      	mov	r7, r2
   1db48:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1db4a:	2a00      	cmp	r2, #0
   1db4c:	d05d      	beq.n	1dc0a <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1db4e:	2900      	cmp	r1, #0
   1db50:	d05e      	beq.n	1dc10 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1db52:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1db56:	ea50 0301 	orrs.w	r3, r0, r1
   1db5a:	d05b      	beq.n	1dc14 <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1db5c:	f110 32ff 	adds.w	r2, r0, #4294967295
   1db60:	f141 33ff 	adc.w	r3, r1, #4294967295
   1db64:	6522      	str	r2, [r4, #80]	; 0x50
   1db66:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   1db68:	6c65      	ldr	r5, [r4, #68]	; 0x44
   1db6a:	b3a5      	cbz	r5, 1dbd6 <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1db6c:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   1db70:	4547      	cmp	r7, r8
   1db72:	d30d      	bcc.n	1db90 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   1db74:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1db78:	4643      	mov	r3, r8
   1db7a:	4632      	mov	r2, r6
   1db7c:	4641      	mov	r1, r8
   1db7e:	4420      	add	r0, r4
   1db80:	f7ff ff5b 	bl	1da3a <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   1db84:	3d10      	subs	r5, #16
   1db86:	442f      	add	r7, r5
		data += remaining_space;
   1db88:	4446      	add	r6, r8
		s->leftover_offset = 0;
   1db8a:	2300      	movs	r3, #0
   1db8c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1db8e:	e013      	b.n	1dbb8 <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1db90:	f105 0030 	add.w	r0, r5, #48	; 0x30
   1db94:	463b      	mov	r3, r7
   1db96:	4632      	mov	r2, r6
   1db98:	4639      	mov	r1, r7
   1db9a:	4420      	add	r0, r4
   1db9c:	f7ff ff4d 	bl	1da3a <_copy>
			s->leftover_offset += data_length;
   1dba0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dba2:	443b      	add	r3, r7
   1dba4:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1dba6:	2001      	movs	r0, #1
   1dba8:	e030      	b.n	1dc0c <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   1dbaa:	18e2      	adds	r2, r4, r3
   1dbac:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1dbb0:	5ce1      	ldrb	r1, [r4, r3]
   1dbb2:	404a      	eors	r2, r1
   1dbb4:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbb6:	3301      	adds	r3, #1
   1dbb8:	2b0f      	cmp	r3, #15
   1dbba:	d9f6      	bls.n	1dbaa <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dbbc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dbbe:	4621      	mov	r1, r4
   1dbc0:	4620      	mov	r0, r4
   1dbc2:	f7f3 fcbd 	bl	11540 <tc_aes_encrypt>
   1dbc6:	e006      	b.n	1dbd6 <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1dbc8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dbca:	4621      	mov	r1, r4
   1dbcc:	4620      	mov	r0, r4
   1dbce:	f7f3 fcb7 	bl	11540 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1dbd2:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1dbd4:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   1dbd6:	2f10      	cmp	r7, #16
   1dbd8:	d908      	bls.n	1dbec <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbda:	2300      	movs	r3, #0
   1dbdc:	2b0f      	cmp	r3, #15
   1dbde:	d8f3      	bhi.n	1dbc8 <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   1dbe0:	5cf0      	ldrb	r0, [r6, r3]
   1dbe2:	5ce5      	ldrb	r5, [r4, r3]
   1dbe4:	4068      	eors	r0, r5
   1dbe6:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dbe8:	3301      	adds	r3, #1
   1dbea:	e7f7      	b.n	1dbdc <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   1dbec:	b90f      	cbnz	r7, 1dbf2 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1dbee:	2001      	movs	r0, #1
   1dbf0:	e00c      	b.n	1dc0c <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   1dbf2:	463b      	mov	r3, r7
   1dbf4:	4632      	mov	r2, r6
   1dbf6:	4639      	mov	r1, r7
   1dbf8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1dbfc:	f7ff ff1d 	bl	1da3a <_copy>
		s->leftover_offset = data_length;
   1dc00:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   1dc02:	2001      	movs	r0, #1
   1dc04:	e002      	b.n	1dc0c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   1dc06:	2000      	movs	r0, #0
}
   1dc08:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   1dc0a:	2001      	movs	r0, #1
}
   1dc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   1dc10:	2000      	movs	r0, #0
   1dc12:	e7fb      	b.n	1dc0c <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   1dc14:	2000      	movs	r0, #0
   1dc16:	e7f9      	b.n	1dc0c <tc_cmac_update+0xd0>

0001dc18 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1dc18:	b370      	cbz	r0, 1dc78 <tc_cmac_final+0x60>
{
   1dc1a:	b538      	push	{r3, r4, r5, lr}
   1dc1c:	460c      	mov	r4, r1
   1dc1e:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   1dc20:	b361      	cbz	r1, 1dc7c <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1dc22:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1dc24:	2a10      	cmp	r2, #16
   1dc26:	d10d      	bne.n	1dc44 <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1dc28:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc2a:	2300      	movs	r3, #0
   1dc2c:	2b0f      	cmp	r3, #15
   1dc2e:	d819      	bhi.n	1dc64 <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1dc30:	18e2      	adds	r2, r4, r3
   1dc32:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1dc36:	5cc8      	ldrb	r0, [r1, r3]
   1dc38:	4050      	eors	r0, r2
   1dc3a:	5ce2      	ldrb	r2, [r4, r3]
   1dc3c:	4042      	eors	r2, r0
   1dc3e:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1dc40:	3301      	adds	r3, #1
   1dc42:	e7f3      	b.n	1dc2c <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1dc44:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1dc48:	f1c2 0210 	rsb	r2, r2, #16
   1dc4c:	2100      	movs	r1, #0
   1dc4e:	4420      	add	r0, r4
   1dc50:	f7ff ff00 	bl	1da54 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1dc54:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dc56:	4423      	add	r3, r4
   1dc58:	2280      	movs	r2, #128	; 0x80
   1dc5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1dc5e:	f104 0120 	add.w	r1, r4, #32
   1dc62:	e7e2      	b.n	1dc2a <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1dc64:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1dc66:	4621      	mov	r1, r4
   1dc68:	4628      	mov	r0, r5
   1dc6a:	f7f3 fc69 	bl	11540 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1dc6e:	4620      	mov	r0, r4
   1dc70:	f7ff ff15 	bl	1da9e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1dc74:	2001      	movs	r0, #1
}
   1dc76:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1dc78:	2000      	movs	r0, #0
}
   1dc7a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   1dc7c:	2000      	movs	r0, #0
   1dc7e:	e7fa      	b.n	1dc76 <tc_cmac_final+0x5e>

0001dc80 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1dc80:	b538      	push	{r3, r4, r5, lr}
   1dc82:	4604      	mov	r4, r0

	if (esf != NULL) {
   1dc84:	460d      	mov	r5, r1
   1dc86:	b111      	cbz	r1, 1dc8e <z_arm_fatal_error+0xe>
		esf_dump(esf);
   1dc88:	4608      	mov	r0, r1
   1dc8a:	f7f4 f81d 	bl	11cc8 <esf_dump>
	}
	z_fatal_error(reason, esf);
   1dc8e:	4629      	mov	r1, r5
   1dc90:	4620      	mov	r0, r4
   1dc92:	f7fc fe15 	bl	1a8c0 <z_fatal_error>
}
   1dc96:	bd38      	pop	{r3, r4, r5, pc}

0001dc98 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1dc98:	b508      	push	{r3, lr}
   1dc9a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1dc9c:	6800      	ldr	r0, [r0, #0]
   1dc9e:	f7ff ffef 	bl	1dc80 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1dca2:	bd08      	pop	{r3, pc}

0001dca4 <z_irq_spurious>:
{
   1dca4:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1dca6:	2100      	movs	r1, #0
   1dca8:	2001      	movs	r0, #1
   1dcaa:	f7ff ffe9 	bl	1dc80 <z_arm_fatal_error>
}
   1dcae:	bd08      	pop	{r3, pc}

0001dcb0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1dcb0:	b508      	push	{r3, lr}
	handler();
   1dcb2:	f7f4 f8b3 	bl	11e1c <z_SysNmiOnReset>
	z_arm_int_exit();
   1dcb6:	f7f4 f9af 	bl	12018 <z_arm_exc_exit>
}
   1dcba:	bd08      	pop	{r3, pc}

0001dcbc <memory_fault_recoverable>:
}
   1dcbc:	2000      	movs	r0, #0
   1dcbe:	4770      	bx	lr

0001dcc0 <fault_handle>:
{
   1dcc0:	b508      	push	{r3, lr}
	*recoverable = false;
   1dcc2:	2300      	movs	r3, #0
   1dcc4:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1dcc6:	1ecb      	subs	r3, r1, #3
   1dcc8:	2b09      	cmp	r3, #9
   1dcca:	d81a      	bhi.n	1dd02 <fault_handle+0x42>
   1dccc:	e8df f003 	tbb	[pc, r3]
   1dcd0:	110d0905 	.word	0x110d0905
   1dcd4:	19191919 	.word	0x19191919
   1dcd8:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
   1dcda:	4611      	mov	r1, r2
   1dcdc:	f7f4 fc30 	bl	12540 <hard_fault>
}
   1dce0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1dce2:	2100      	movs	r1, #0
   1dce4:	f7f4 fb4a 	bl	1237c <mem_manage_fault>
		break;
   1dce8:	e7fa      	b.n	1dce0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   1dcea:	2100      	movs	r1, #0
   1dcec:	f7f4 fa6e 	bl	121cc <bus_fault>
		break;
   1dcf0:	e7f6      	b.n	1dce0 <fault_handle+0x20>
		reason = usage_fault(esf);
   1dcf2:	f7f4 f99f 	bl	12034 <usage_fault>
		break;
   1dcf6:	e7f3      	b.n	1dce0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   1dcf8:	4611      	mov	r1, r2
   1dcfa:	f7f4 fa4d 	bl	12198 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1dcfe:	2000      	movs	r0, #0
		break;
   1dd00:	e7ee      	b.n	1dce0 <fault_handle+0x20>
		reserved_exception(esf, fault);
   1dd02:	f7f4 fcc3 	bl	1268c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1dd06:	2000      	movs	r0, #0
	return reason;
   1dd08:	e7ea      	b.n	1dce0 <fault_handle+0x20>

0001dd0a <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   1dd0a:	6843      	ldr	r3, [r0, #4]
   1dd0c:	1e5a      	subs	r2, r3, #1
		&&
   1dd0e:	4213      	tst	r3, r2
   1dd10:	d106      	bne.n	1dd20 <mpu_partition_is_valid+0x16>
		&&
   1dd12:	2b1f      	cmp	r3, #31
   1dd14:	d906      	bls.n	1dd24 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   1dd16:	6803      	ldr	r3, [r0, #0]
		&&
   1dd18:	421a      	tst	r2, r3
   1dd1a:	d005      	beq.n	1dd28 <mpu_partition_is_valid+0x1e>
   1dd1c:	2000      	movs	r0, #0
   1dd1e:	4770      	bx	lr
   1dd20:	2000      	movs	r0, #0
   1dd22:	4770      	bx	lr
   1dd24:	2000      	movs	r0, #0
   1dd26:	4770      	bx	lr
   1dd28:	2001      	movs	r0, #1
}
   1dd2a:	4770      	bx	lr

0001dd2c <mpu_configure_region>:
{
   1dd2c:	b500      	push	{lr}
   1dd2e:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1dd30:	680b      	ldr	r3, [r1, #0]
   1dd32:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1dd34:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1dd36:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   1dd38:	2b20      	cmp	r3, #32
   1dd3a:	d912      	bls.n	1dd62 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   1dd3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1dd40:	d811      	bhi.n	1dd66 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1dd42:	3b01      	subs	r3, #1
   1dd44:	fab3 f383 	clz	r3, r3
   1dd48:	f1c3 031f 	rsb	r3, r3, #31
   1dd4c:	005b      	lsls	r3, r3, #1
   1dd4e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1dd52:	4313      	orrs	r3, r2
   1dd54:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   1dd56:	a901      	add	r1, sp, #4
   1dd58:	f7f4 fdf4 	bl	12944 <region_allocate_and_init>
}
   1dd5c:	b005      	add	sp, #20
   1dd5e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   1dd62:	2308      	movs	r3, #8
   1dd64:	e7f5      	b.n	1dd52 <mpu_configure_region+0x26>
		return REGION_4G;
   1dd66:	233e      	movs	r3, #62	; 0x3e
   1dd68:	e7f3      	b.n	1dd52 <mpu_configure_region+0x26>

0001dd6a <arm_core_mpu_configure_static_mpu_regions>:
{
   1dd6a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1dd6c:	f7f4 fe4c 	bl	12a08 <mpu_configure_static_mpu_regions>
}
   1dd70:	bd08      	pop	{r3, pc}

0001dd72 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   1dd72:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   1dd74:	f7f4 fe52 	bl	12a1c <mpu_configure_dynamic_mpu_regions>
}
   1dd78:	bd08      	pop	{r3, pc}

0001dd7a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1dd7a:	4602      	mov	r2, r0
   1dd7c:	780b      	ldrb	r3, [r1, #0]
   1dd7e:	b11b      	cbz	r3, 1dd88 <strcpy+0xe>
		*d = *s;
   1dd80:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   1dd84:	3101      	adds	r1, #1
   1dd86:	e7f9      	b.n	1dd7c <strcpy+0x2>
	}

	*d = '\0';
   1dd88:	7013      	strb	r3, [r2, #0]

	return dest;
}
   1dd8a:	4770      	bx	lr

0001dd8c <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1dd8c:	4603      	mov	r3, r0
   1dd8e:	b1a2      	cbz	r2, 1ddba <strncpy+0x2e>
{
   1dd90:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1dd92:	780c      	ldrb	r4, [r1, #0]
   1dd94:	b12c      	cbz	r4, 1dda2 <strncpy+0x16>
		*d = *s;
   1dd96:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   1dd9a:	3101      	adds	r1, #1
		d++;
		n--;
   1dd9c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   1dd9e:	2a00      	cmp	r2, #0
   1dda0:	d1f7      	bne.n	1dd92 <strncpy+0x6>
	}

	while (n > 0) {
   1dda2:	b122      	cbz	r2, 1ddae <strncpy+0x22>
		*d = '\0';
   1dda4:	2100      	movs	r1, #0
   1dda6:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   1ddaa:	3a01      	subs	r2, #1
   1ddac:	e7f9      	b.n	1dda2 <strncpy+0x16>
	}

	return dest;
}
   1ddae:	bc10      	pop	{r4}
   1ddb0:	4770      	bx	lr
		*d = '\0';
   1ddb2:	2100      	movs	r1, #0
   1ddb4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ddb8:	3a01      	subs	r2, #1
	while (n > 0) {
   1ddba:	2a00      	cmp	r2, #0
   1ddbc:	d1f9      	bne.n	1ddb2 <strncpy+0x26>
   1ddbe:	4770      	bx	lr

0001ddc0 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ddc0:	4603      	mov	r3, r0
	size_t n = 0;
   1ddc2:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ddc4:	781a      	ldrb	r2, [r3, #0]
   1ddc6:	b112      	cbz	r2, 1ddce <strlen+0xe>
		s++;
   1ddc8:	3301      	adds	r3, #1
		n++;
   1ddca:	3001      	adds	r0, #1
   1ddcc:	e7fa      	b.n	1ddc4 <strlen+0x4>
	}

	return n;
}
   1ddce:	4770      	bx	lr

0001ddd0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1ddd0:	4603      	mov	r3, r0
	size_t n = 0;
   1ddd2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1ddd4:	781a      	ldrb	r2, [r3, #0]
   1ddd6:	b122      	cbz	r2, 1dde2 <strnlen+0x12>
   1ddd8:	4288      	cmp	r0, r1
   1ddda:	d202      	bcs.n	1dde2 <strnlen+0x12>
		s++;
   1dddc:	3301      	adds	r3, #1
		n++;
   1ddde:	3001      	adds	r0, #1
   1dde0:	e7f8      	b.n	1ddd4 <strnlen+0x4>
	}

	return n;
}
   1dde2:	4770      	bx	lr

0001dde4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1dde4:	7803      	ldrb	r3, [r0, #0]
   1dde6:	780a      	ldrb	r2, [r1, #0]
   1dde8:	4293      	cmp	r3, r2
   1ddea:	d103      	bne.n	1ddf4 <strcmp+0x10>
   1ddec:	b113      	cbz	r3, 1ddf4 <strcmp+0x10>
		s1++;
   1ddee:	3001      	adds	r0, #1
		s2++;
   1ddf0:	3101      	adds	r1, #1
   1ddf2:	e7f7      	b.n	1dde4 <strcmp>
	}

	return *s1 - *s2;
}
   1ddf4:	1a98      	subs	r0, r3, r2
   1ddf6:	4770      	bx	lr

0001ddf8 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1ddf8:	b17a      	cbz	r2, 1de1a <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1ddfa:	1e53      	subs	r3, r2, #1
   1ddfc:	d00f      	beq.n	1de1e <memcmp+0x26>
{
   1ddfe:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   1de00:	7804      	ldrb	r4, [r0, #0]
   1de02:	780a      	ldrb	r2, [r1, #0]
   1de04:	4294      	cmp	r4, r2
   1de06:	d103      	bne.n	1de10 <memcmp+0x18>
		c1++;
   1de08:	3001      	adds	r0, #1
		c2++;
   1de0a:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   1de0c:	3b01      	subs	r3, #1
   1de0e:	d1f7      	bne.n	1de00 <memcmp+0x8>
	}

	return *c1 - *c2;
   1de10:	7800      	ldrb	r0, [r0, #0]
   1de12:	780b      	ldrb	r3, [r1, #0]
   1de14:	1ac0      	subs	r0, r0, r3
}
   1de16:	bc10      	pop	{r4}
   1de18:	4770      	bx	lr
		return 0;
   1de1a:	2000      	movs	r0, #0
   1de1c:	4770      	bx	lr
	return *c1 - *c2;
   1de1e:	7800      	ldrb	r0, [r0, #0]
   1de20:	780b      	ldrb	r3, [r1, #0]
   1de22:	1ac0      	subs	r0, r0, r3
}
   1de24:	4770      	bx	lr

0001de26 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1de26:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1de28:	ea80 0301 	eor.w	r3, r0, r1
   1de2c:	f013 0f03 	tst.w	r3, #3
   1de30:	d001      	beq.n	1de36 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   1de32:	4603      	mov	r3, r0
   1de34:	e017      	b.n	1de66 <memcpy+0x40>
   1de36:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   1de38:	f013 0f03 	tst.w	r3, #3
   1de3c:	d00b      	beq.n	1de56 <memcpy+0x30>
			if (n == 0) {
   1de3e:	b1a2      	cbz	r2, 1de6a <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   1de40:	f811 4b01 	ldrb.w	r4, [r1], #1
   1de44:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1de48:	3a01      	subs	r2, #1
   1de4a:	e7f5      	b.n	1de38 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   1de4c:	f851 4b04 	ldr.w	r4, [r1], #4
   1de50:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1de54:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   1de56:	2a03      	cmp	r2, #3
   1de58:	d8f8      	bhi.n	1de4c <memcpy+0x26>
   1de5a:	e004      	b.n	1de66 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   1de5c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1de60:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1de64:	3a01      	subs	r2, #1
	while (n > 0) {
   1de66:	2a00      	cmp	r2, #0
   1de68:	d1f8      	bne.n	1de5c <memcpy+0x36>
	}

	return d;
}
   1de6a:	bc10      	pop	{r4}
   1de6c:	4770      	bx	lr

0001de6e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1de6e:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1de70:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1de72:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1de74:	f013 0f03 	tst.w	r3, #3
   1de78:	d004      	beq.n	1de84 <memset+0x16>
		if (n == 0) {
   1de7a:	b19a      	cbz	r2, 1dea4 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   1de7c:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1de80:	3a01      	subs	r2, #1
   1de82:	e7f7      	b.n	1de74 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   1de84:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   1de86:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   1de8a:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1de8e:	2a03      	cmp	r2, #3
   1de90:	d906      	bls.n	1dea0 <memset+0x32>
		*(d_word++) = c_word;
   1de92:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   1de96:	3a04      	subs	r2, #4
   1de98:	e7f9      	b.n	1de8e <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   1de9a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1de9e:	3a01      	subs	r2, #1
	while (n > 0) {
   1dea0:	2a00      	cmp	r2, #0
   1dea2:	d1fa      	bne.n	1de9a <memset+0x2c>
	}

	return buf;
}
   1dea4:	bc10      	pop	{r4}
   1dea6:	4770      	bx	lr

0001dea8 <_stdout_hook_default>:
}
   1dea8:	f04f 30ff 	mov.w	r0, #4294967295
   1deac:	4770      	bx	lr

0001deae <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1deae:	b084      	sub	sp, #16
   1deb0:	ab04      	add	r3, sp, #16
   1deb2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1deb6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1deba:	2b06      	cmp	r3, #6
   1debc:	d001      	beq.n	1dec2 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1debe:	b004      	add	sp, #16
   1dec0:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1dec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1dec6:	2201      	movs	r2, #1
   1dec8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1decc:	f3bf 8f4f 	dsb	sy
        __WFE();
   1ded0:	bf20      	wfe
    while (true)
   1ded2:	e7fd      	b.n	1ded0 <pm_power_state_set+0x22>

0001ded4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1ded4:	b084      	sub	sp, #16
   1ded6:	ab04      	add	r3, sp, #16
   1ded8:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1dedc:	2300      	movs	r3, #0
   1dede:	f383 8811 	msr	BASEPRI, r3
   1dee2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1dee6:	b004      	add	sp, #16
   1dee8:	4770      	bx	lr

0001deea <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1deea:	b510      	push	{r4, lr}
   1deec:	b08a      	sub	sp, #40	; 0x28
   1deee:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   1def0:	a905      	add	r1, sp, #20
   1def2:	f7f4 fe8f 	bl	12c14 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1def6:	4669      	mov	r1, sp
   1def8:	4620      	mov	r0, r4
   1defa:	f7f4 fe8b 	bl	12c14 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   1defe:	2210      	movs	r2, #16
   1df00:	f10d 0101 	add.w	r1, sp, #1
   1df04:	f10d 0015 	add.w	r0, sp, #21
   1df08:	f7ff ff76 	bl	1ddf8 <memcmp>
}
   1df0c:	b00a      	add	sp, #40	; 0x28
   1df0e:	bd10      	pop	{r4, pc}

0001df10 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1df10:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1df12:	7803      	ldrb	r3, [r0, #0]
   1df14:	780a      	ldrb	r2, [r1, #0]
   1df16:	4293      	cmp	r3, r2
   1df18:	d107      	bne.n	1df2a <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   1df1a:	2b01      	cmp	r3, #1
   1df1c:	d00c      	beq.n	1df38 <bt_uuid_cmp+0x28>
   1df1e:	2b02      	cmp	r3, #2
   1df20:	d00e      	beq.n	1df40 <bt_uuid_cmp+0x30>
   1df22:	b12b      	cbz	r3, 1df30 <bt_uuid_cmp+0x20>
   1df24:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1df28:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   1df2a:	f7ff ffde 	bl	1deea <uuid128_cmp>
   1df2e:	e7fb      	b.n	1df28 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1df30:	8840      	ldrh	r0, [r0, #2]
   1df32:	884b      	ldrh	r3, [r1, #2]
   1df34:	1ac0      	subs	r0, r0, r3
   1df36:	e7f7      	b.n	1df28 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1df38:	6840      	ldr	r0, [r0, #4]
   1df3a:	684b      	ldr	r3, [r1, #4]
   1df3c:	1ac0      	subs	r0, r0, r3
   1df3e:	e7f3      	b.n	1df28 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1df40:	2210      	movs	r2, #16
   1df42:	3101      	adds	r1, #1
   1df44:	3001      	adds	r0, #1
   1df46:	f7ff ff57 	bl	1ddf8 <memcmp>
   1df4a:	e7ed      	b.n	1df28 <bt_uuid_cmp+0x18>

0001df4c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   1df4c:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1df4e:	2a04      	cmp	r2, #4
   1df50:	d00e      	beq.n	1df70 <bt_uuid_create+0x24>
   1df52:	2a10      	cmp	r2, #16
   1df54:	d01b      	beq.n	1df8e <bt_uuid_create+0x42>
   1df56:	2a02      	cmp	r2, #2
   1df58:	d001      	beq.n	1df5e <bt_uuid_create+0x12>
   1df5a:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   1df5c:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   1df5e:	2300      	movs	r3, #0
   1df60:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1df62:	784a      	ldrb	r2, [r1, #1]
   1df64:	780b      	ldrb	r3, [r1, #0]
   1df66:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1df6a:	8043      	strh	r3, [r0, #2]
	return true;
   1df6c:	2001      	movs	r0, #1
		break;
   1df6e:	e7f5      	b.n	1df5c <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   1df70:	2301      	movs	r3, #1
   1df72:	7003      	strb	r3, [r0, #0]
   1df74:	78cc      	ldrb	r4, [r1, #3]
   1df76:	788a      	ldrb	r2, [r1, #2]
   1df78:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   1df7c:	784d      	ldrb	r5, [r1, #1]
   1df7e:	780a      	ldrb	r2, [r1, #0]
   1df80:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1df84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1df88:	6042      	str	r2, [r0, #4]
	return true;
   1df8a:	4618      	mov	r0, r3
		break;
   1df8c:	e7e6      	b.n	1df5c <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   1df8e:	2302      	movs	r3, #2
   1df90:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1df94:	2210      	movs	r2, #16
   1df96:	f7ff ff46 	bl	1de26 <memcpy>
	return true;
   1df9a:	2001      	movs	r0, #1
		break;
   1df9c:	e7de      	b.n	1df5c <bt_uuid_create+0x10>

0001df9e <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1df9e:	b510      	push	{r4, lr}
   1dfa0:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1dfa2:	2301      	movs	r3, #1
   1dfa4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1dfa8:	2106      	movs	r1, #6
   1dfaa:	f7fc f8c3 	bl	1a134 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1dfae:	b918      	cbnz	r0, 1dfb8 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1dfb0:	79a3      	ldrb	r3, [r4, #6]
   1dfb2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dfb6:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1dfb8:	bd10      	pop	{r4, pc}

0001dfba <hci_disconn_complete_prio>:
{
   1dfba:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1dfbc:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1dfbe:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   1dfc2:	781b      	ldrb	r3, [r3, #0]
   1dfc4:	b103      	cbz	r3, 1dfc8 <hci_disconn_complete_prio+0xe>
}
   1dfc6:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   1dfc8:	4620      	mov	r0, r4
   1dfca:	f7f7 fe87 	bl	15cdc <bt_conn_lookup_handle>
	if (!conn) {
   1dfce:	4605      	mov	r5, r0
   1dfd0:	b130      	cbz	r0, 1dfe0 <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1dfd2:	2101      	movs	r1, #1
   1dfd4:	f7f7 fe8c 	bl	15cf0 <bt_conn_set_state>
	bt_conn_unref(conn);
   1dfd8:	4628      	mov	r0, r5
   1dfda:	f000 fc15 	bl	1e808 <bt_conn_unref>
   1dfde:	e7f2      	b.n	1dfc6 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   1dfe0:	4620      	mov	r0, r4
   1dfe2:	f7f4 fea5 	bl	12d30 <conn_handle_disconnected>
		return;
   1dfe6:	e7ee      	b.n	1dfc6 <hci_disconn_complete_prio+0xc>

0001dfe8 <set_event_mask>:
{
   1dfe8:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1dfea:	2108      	movs	r1, #8
   1dfec:	f640 4001 	movw	r0, #3073	; 0xc01
   1dff0:	f7f5 fcbc 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1dff4:	b1b8      	cbz	r0, 1e026 <set_event_mask+0x3e>
   1dff6:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1dff8:	2108      	movs	r1, #8
   1dffa:	4408      	add	r0, r1
   1dffc:	f002 f860 	bl	200c0 <net_buf_simple_add>
	dst[0] = val;
   1e000:	2310      	movs	r3, #16
   1e002:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1e004:	2388      	movs	r3, #136	; 0x88
   1e006:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1e008:	2200      	movs	r2, #0
   1e00a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1e00c:	2302      	movs	r3, #2
   1e00e:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   1e010:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1e012:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   1e014:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   1e016:	2320      	movs	r3, #32
   1e018:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   1e01a:	4621      	mov	r1, r4
   1e01c:	f640 4001 	movw	r0, #3073	; 0xc01
   1e020:	f7f5 fce0 	bl	139e4 <bt_hci_cmd_send_sync>
}
   1e024:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   1e026:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e02a:	e7fb      	b.n	1e024 <set_event_mask+0x3c>

0001e02c <bt_hci_disconnect>:
{
   1e02c:	b570      	push	{r4, r5, r6, lr}
   1e02e:	4605      	mov	r5, r0
   1e030:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e032:	2103      	movs	r1, #3
   1e034:	f240 4006 	movw	r0, #1030	; 0x406
   1e038:	f7f5 fc98 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e03c:	b168      	cbz	r0, 1e05a <bt_hci_disconnect+0x2e>
   1e03e:	4606      	mov	r6, r0
   1e040:	2103      	movs	r1, #3
   1e042:	3008      	adds	r0, #8
   1e044:	f002 f83c 	bl	200c0 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1e048:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   1e04a:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e04c:	2200      	movs	r2, #0
   1e04e:	4631      	mov	r1, r6
   1e050:	f240 4006 	movw	r0, #1030	; 0x406
   1e054:	f7f5 fcc6 	bl	139e4 <bt_hci_cmd_send_sync>
}
   1e058:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1e05a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e05e:	e7fb      	b.n	1e058 <bt_hci_disconnect+0x2c>

0001e060 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1e060:	8802      	ldrh	r2, [r0, #0]
   1e062:	8843      	ldrh	r3, [r0, #2]
   1e064:	429a      	cmp	r2, r3
   1e066:	d819      	bhi.n	1e09c <bt_le_conn_params_valid+0x3c>
   1e068:	2a05      	cmp	r2, #5
   1e06a:	d919      	bls.n	1e0a0 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e06c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1e070:	d818      	bhi.n	1e0a4 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   1e072:	8881      	ldrh	r1, [r0, #4]
   1e074:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   1e078:	d216      	bcs.n	1e0a8 <bt_le_conn_params_valid+0x48>
{
   1e07a:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e07c:	88c0      	ldrh	r0, [r0, #6]
   1e07e:	f1a0 020a 	sub.w	r2, r0, #10
   1e082:	b292      	uxth	r2, r2
   1e084:	f640 4476 	movw	r4, #3190	; 0xc76
   1e088:	42a2      	cmp	r2, r4
   1e08a:	d80f      	bhi.n	1e0ac <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   1e08c:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e090:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1e094:	d20c      	bcs.n	1e0b0 <bt_le_conn_params_valid+0x50>
	return true;
   1e096:	2001      	movs	r0, #1
}
   1e098:	bc10      	pop	{r4}
   1e09a:	4770      	bx	lr
		return false;
   1e09c:	2000      	movs	r0, #0
   1e09e:	4770      	bx	lr
   1e0a0:	2000      	movs	r0, #0
   1e0a2:	4770      	bx	lr
   1e0a4:	2000      	movs	r0, #0
   1e0a6:	4770      	bx	lr
		return false;
   1e0a8:	2000      	movs	r0, #0
}
   1e0aa:	4770      	bx	lr
		return false;
   1e0ac:	2000      	movs	r0, #0
   1e0ae:	e7f3      	b.n	1e098 <bt_le_conn_params_valid+0x38>
   1e0b0:	2000      	movs	r0, #0
   1e0b2:	e7f1      	b.n	1e098 <bt_le_conn_params_valid+0x38>

0001e0b4 <bt_le_set_data_len>:
{
   1e0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e0b6:	4606      	mov	r6, r0
   1e0b8:	460f      	mov	r7, r1
   1e0ba:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e0bc:	2106      	movs	r1, #6
   1e0be:	f242 0022 	movw	r0, #8226	; 0x2022
   1e0c2:	f7f5 fc53 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e0c6:	b170      	cbz	r0, 1e0e6 <bt_le_set_data_len+0x32>
   1e0c8:	4605      	mov	r5, r0
   1e0ca:	2106      	movs	r1, #6
   1e0cc:	3008      	adds	r0, #8
   1e0ce:	f001 fff7 	bl	200c0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e0d2:	8833      	ldrh	r3, [r6, #0]
   1e0d4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e0d6:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e0d8:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1e0da:	4629      	mov	r1, r5
   1e0dc:	f242 0022 	movw	r0, #8226	; 0x2022
   1e0e0:	f7f5 ff80 	bl	13fe4 <bt_hci_cmd_send>
}
   1e0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1e0e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e0ea:	e7fb      	b.n	1e0e4 <bt_le_set_data_len+0x30>

0001e0ec <bt_le_set_phy>:
{
   1e0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0f0:	4607      	mov	r7, r0
   1e0f2:	460e      	mov	r6, r1
   1e0f4:	4615      	mov	r5, r2
   1e0f6:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e0f8:	2107      	movs	r1, #7
   1e0fa:	f242 0032 	movw	r0, #8242	; 0x2032
   1e0fe:	f7f5 fc35 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e102:	b1a0      	cbz	r0, 1e12e <bt_le_set_phy+0x42>
   1e104:	4680      	mov	r8, r0
   1e106:	2107      	movs	r1, #7
   1e108:	3008      	adds	r0, #8
   1e10a:	f001 ffd9 	bl	200c0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e10e:	883b      	ldrh	r3, [r7, #0]
   1e110:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   1e112:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e114:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e116:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   1e118:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1e11c:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1e120:	4641      	mov	r1, r8
   1e122:	f242 0032 	movw	r0, #8242	; 0x2032
   1e126:	f7f5 ff5d 	bl	13fe4 <bt_hci_cmd_send>
}
   1e12a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   1e12e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e132:	e7fa      	b.n	1e12a <bt_le_set_phy+0x3e>

0001e134 <hci_le_read_remote_features>:
{
   1e134:	b538      	push	{r3, r4, r5, lr}
   1e136:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1e138:	2102      	movs	r1, #2
   1e13a:	f242 0016 	movw	r0, #8214	; 0x2016
   1e13e:	f7f5 fc15 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e142:	b168      	cbz	r0, 1e160 <hci_le_read_remote_features+0x2c>
   1e144:	4605      	mov	r5, r0
   1e146:	2102      	movs	r1, #2
   1e148:	3008      	adds	r0, #8
   1e14a:	f001 ffb9 	bl	200c0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e14e:	8823      	ldrh	r3, [r4, #0]
   1e150:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1e152:	4629      	mov	r1, r5
   1e154:	f242 0016 	movw	r0, #8214	; 0x2016
   1e158:	f7f5 ff44 	bl	13fe4 <bt_hci_cmd_send>
	return 0;
   1e15c:	2000      	movs	r0, #0
}
   1e15e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1e160:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e164:	e7fb      	b.n	1e15e <hci_le_read_remote_features+0x2a>

0001e166 <enh_conn_complete>:
{
   1e166:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   1e168:	f7f6 f802 	bl	14170 <bt_hci_le_enh_conn_complete>
}
   1e16c:	bd08      	pop	{r3, pc}

0001e16e <le_enh_conn_complete>:
{
   1e16e:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   1e170:	6880      	ldr	r0, [r0, #8]
   1e172:	f7ff fff8 	bl	1e166 <enh_conn_complete>
}
   1e176:	bd08      	pop	{r3, pc}

0001e178 <le_legacy_conn_complete>:
{
   1e178:	b510      	push	{r4, lr}
   1e17a:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1e17c:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   1e17e:	780b      	ldrb	r3, [r1, #0]
   1e180:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   1e184:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1e188:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   1e18c:	78cb      	ldrb	r3, [r1, #3]
   1e18e:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1e192:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1e196:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1e19a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1e19e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   1e1a2:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1e1a6:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1e1aa:	7c4b      	ldrb	r3, [r1, #17]
   1e1ac:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   1e1b0:	2207      	movs	r2, #7
   1e1b2:	3104      	adds	r1, #4
   1e1b4:	a801      	add	r0, sp, #4
   1e1b6:	f7ff fe36 	bl	1de26 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1e1ba:	2400      	movs	r4, #0
   1e1bc:	940a      	str	r4, [sp, #40]	; 0x28
   1e1be:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   1e1c2:	2206      	movs	r2, #6
   1e1c4:	a90a      	add	r1, sp, #40	; 0x28
   1e1c6:	f10d 000b 	add.w	r0, sp, #11
   1e1ca:	f7ff fe2c 	bl	1de26 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1e1ce:	9408      	str	r4, [sp, #32]
   1e1d0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   1e1d4:	2206      	movs	r2, #6
   1e1d6:	a908      	add	r1, sp, #32
   1e1d8:	f10d 0011 	add.w	r0, sp, #17
   1e1dc:	f7ff fe23 	bl	1de26 <memcpy>
	enh_conn_complete(&enh);
   1e1e0:	4668      	mov	r0, sp
   1e1e2:	f7ff ffc0 	bl	1e166 <enh_conn_complete>
}
   1e1e6:	b00c      	add	sp, #48	; 0x30
   1e1e8:	bd10      	pop	{r4, pc}

0001e1ea <le_conn_param_req_reply>:
{
   1e1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1ec:	4606      	mov	r6, r0
   1e1ee:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1e1f0:	210e      	movs	r1, #14
   1e1f2:	f242 0020 	movw	r0, #8224	; 0x2020
   1e1f6:	f7f5 fbb9 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e1fa:	b1c0      	cbz	r0, 1e22e <le_conn_param_req_reply+0x44>
   1e1fc:	4607      	mov	r7, r0
   1e1fe:	210e      	movs	r1, #14
   1e200:	3008      	adds	r0, #8
   1e202:	f001 ff5d 	bl	200c0 <net_buf_simple_add>
   1e206:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1e208:	220e      	movs	r2, #14
   1e20a:	2100      	movs	r1, #0
   1e20c:	f7ff fe2f 	bl	1de6e <memset>
	cp->handle = sys_cpu_to_le16(handle);
   1e210:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1e212:	882b      	ldrh	r3, [r5, #0]
   1e214:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1e216:	886b      	ldrh	r3, [r5, #2]
   1e218:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1e21a:	88ab      	ldrh	r3, [r5, #4]
   1e21c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1e21e:	88eb      	ldrh	r3, [r5, #6]
   1e220:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1e222:	4639      	mov	r1, r7
   1e224:	f242 0020 	movw	r0, #8224	; 0x2020
   1e228:	f7f5 fedc 	bl	13fe4 <bt_hci_cmd_send>
}
   1e22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1e22e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e232:	e7fb      	b.n	1e22c <le_conn_param_req_reply+0x42>

0001e234 <bt_init>:
{
   1e234:	b510      	push	{r4, lr}
	err = hci_init();
   1e236:	f7f5 fea7 	bl	13f88 <hci_init>
	if (err) {
   1e23a:	4604      	mov	r4, r0
   1e23c:	b108      	cbz	r0, 1e242 <bt_init+0xe>
}
   1e23e:	4620      	mov	r0, r4
   1e240:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   1e242:	f7f8 f905 	bl	16450 <bt_conn_init>
		if (err) {
   1e246:	4604      	mov	r4, r0
   1e248:	2800      	cmp	r0, #0
   1e24a:	d1f8      	bne.n	1e23e <bt_init+0xa>
	bt_finalize_init();
   1e24c:	f7f6 fb70 	bl	14930 <bt_finalize_init>
	return 0;
   1e250:	e7f5      	b.n	1e23e <bt_init+0xa>

0001e252 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   1e252:	2000      	movs	r0, #0
   1e254:	4770      	bx	lr

0001e256 <bt_lookup_id_addr>:
}
   1e256:	4608      	mov	r0, r1
   1e258:	4770      	bx	lr

0001e25a <bt_id_set_adv_random_addr>:
{
   1e25a:	b508      	push	{r3, lr}
		return set_random_address(addr);
   1e25c:	4608      	mov	r0, r1
   1e25e:	f7f6 fc85 	bl	14b6c <set_random_address>
}
   1e262:	bd08      	pop	{r3, pc}

0001e264 <bt_id_set_adv_private_addr>:
{
   1e264:	b510      	push	{r4, lr}
   1e266:	b082      	sub	sp, #8
   1e268:	4604      	mov	r4, r0
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1e26a:	2106      	movs	r1, #6
   1e26c:	4668      	mov	r0, sp
   1e26e:	f7fb ff61 	bl	1a134 <bt_rand>
	if (err) {
   1e272:	b108      	cbz	r0, 1e278 <bt_id_set_adv_private_addr+0x14>
}
   1e274:	b002      	add	sp, #8
   1e276:	bd10      	pop	{r4, pc}
	BT_ADDR_SET_NRPA(&nrpa);
   1e278:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1e27c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1e280:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   1e284:	4669      	mov	r1, sp
   1e286:	4620      	mov	r0, r4
   1e288:	f7ff ffe7 	bl	1e25a <bt_id_set_adv_random_addr>
	if (err) {
   1e28c:	e7f2      	b.n	1e274 <bt_id_set_adv_private_addr+0x10>

0001e28e <bt_id_adv_random_addr_check>:
}
   1e28e:	2001      	movs	r0, #1
   1e290:	4770      	bx	lr

0001e292 <ad_is_limited>:
	for (i = 0; i < ad_len; i++) {
   1e292:	2300      	movs	r3, #0
   1e294:	428b      	cmp	r3, r1
   1e296:	d218      	bcs.n	1e2ca <ad_is_limited+0x38>
{
   1e298:	b430      	push	{r4, r5}
   1e29a:	e002      	b.n	1e2a2 <ad_is_limited+0x10>
	for (i = 0; i < ad_len; i++) {
   1e29c:	3301      	adds	r3, #1
   1e29e:	428b      	cmp	r3, r1
   1e2a0:	d210      	bcs.n	1e2c4 <ad_is_limited+0x32>
		if (ad[i].type == BT_DATA_FLAGS &&
   1e2a2:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
   1e2a6:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
   1e2aa:	f240 1201 	movw	r2, #257	; 0x101
   1e2ae:	4294      	cmp	r4, r2
   1e2b0:	d1f4      	bne.n	1e29c <ad_is_limited+0xa>
		    ad[i].data != NULL) {
   1e2b2:	686a      	ldr	r2, [r5, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   1e2b4:	2a00      	cmp	r2, #0
   1e2b6:	d0f1      	beq.n	1e29c <ad_is_limited+0xa>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   1e2b8:	7812      	ldrb	r2, [r2, #0]
   1e2ba:	f012 0f01 	tst.w	r2, #1
   1e2be:	d0ed      	beq.n	1e29c <ad_is_limited+0xa>
				return true;
   1e2c0:	2001      	movs	r0, #1
   1e2c2:	e000      	b.n	1e2c6 <ad_is_limited+0x34>
	return false;
   1e2c4:	2000      	movs	r0, #0
}
   1e2c6:	bc30      	pop	{r4, r5}
   1e2c8:	4770      	bx	lr
	return false;
   1e2ca:	2000      	movs	r0, #0
}
   1e2cc:	4770      	bx	lr

0001e2ce <get_filter_policy>:
}
   1e2ce:	2000      	movs	r0, #0
   1e2d0:	4770      	bx	lr

0001e2d2 <get_adv_channel_map>:
{
   1e2d2:	4603      	mov	r3, r0
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_37) {
   1e2d4:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1e2d8:	d10b      	bne.n	1e2f2 <get_adv_channel_map+0x20>
	uint8_t channel_map = 0x07;
   1e2da:	2007      	movs	r0, #7
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1e2dc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1e2e0:	d001      	beq.n	1e2e6 <get_adv_channel_map+0x14>
		channel_map &= ~0x02;
   1e2e2:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e2e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1e2ea:	d001      	beq.n	1e2f0 <get_adv_channel_map+0x1e>
		channel_map &= ~0x04;
   1e2ec:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
}
   1e2f0:	4770      	bx	lr
		channel_map &= ~0x01;
   1e2f2:	2006      	movs	r0, #6
   1e2f4:	e7f2      	b.n	1e2dc <get_adv_channel_map+0xa>

0001e2f6 <hci_set_ad>:
{
   1e2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e2fa:	b082      	sub	sp, #8
   1e2fc:	4607      	mov	r7, r0
   1e2fe:	460d      	mov	r5, r1
   1e300:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1e302:	2120      	movs	r1, #32
   1e304:	f7f5 fb32 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e308:	b300      	cbz	r0, 1e34c <hci_set_ad+0x56>
   1e30a:	4680      	mov	r8, r0
   1e30c:	2120      	movs	r1, #32
   1e30e:	3008      	adds	r0, #8
   1e310:	f001 fed6 	bl	200c0 <net_buf_simple_add>
   1e314:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1e316:	2220      	movs	r2, #32
   1e318:	2100      	movs	r1, #0
   1e31a:	f7ff fda8 	bl	1de6e <memset>
	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1e31e:	9400      	str	r4, [sp, #0]
   1e320:	4633      	mov	r3, r6
   1e322:	462a      	mov	r2, r5
   1e324:	211f      	movs	r1, #31
   1e326:	1c60      	adds	r0, r4, #1
   1e328:	f7f6 fea4 	bl	15074 <set_data_add_complete>
	if (err) {
   1e32c:	4604      	mov	r4, r0
   1e32e:	b948      	cbnz	r0, 1e344 <hci_set_ad+0x4e>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1e330:	2200      	movs	r2, #0
   1e332:	4641      	mov	r1, r8
   1e334:	4638      	mov	r0, r7
   1e336:	f7f5 fb55 	bl	139e4 <bt_hci_cmd_send_sync>
   1e33a:	4604      	mov	r4, r0
}
   1e33c:	4620      	mov	r0, r4
   1e33e:	b002      	add	sp, #8
   1e340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1e344:	4640      	mov	r0, r8
   1e346:	f001 fe71 	bl	2002c <net_buf_unref>
		return err;
   1e34a:	e7f7      	b.n	1e33c <hci_set_ad+0x46>
		return -ENOBUFS;
   1e34c:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1e350:	e7f4      	b.n	1e33c <hci_set_ad+0x46>

0001e352 <set_ad>:
{
   1e352:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1e354:	f242 0008 	movw	r0, #8200	; 0x2008
   1e358:	f7ff ffcd 	bl	1e2f6 <hci_set_ad>
}
   1e35c:	bd08      	pop	{r3, pc}

0001e35e <set_sd>:
{
   1e35e:	b508      	push	{r3, lr}
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e360:	f242 0009 	movw	r0, #8201	; 0x2009
   1e364:	f7ff ffc7 	bl	1e2f6 <hci_set_ad>
}
   1e368:	bd08      	pop	{r3, pc}

0001e36a <le_adv_update>:
{
   1e36a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e36e:	b089      	sub	sp, #36	; 0x24
   1e370:	4604      	mov	r4, r0
   1e372:	460e      	mov	r6, r1
   1e374:	4617      	mov	r7, r2
   1e376:	461d      	mov	r5, r3
   1e378:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
   1e37c:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
   1e380:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   1e384:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
	struct bt_ad d[2] = {};
   1e388:	2300      	movs	r3, #0
   1e38a:	9304      	str	r3, [sp, #16]
   1e38c:	9305      	str	r3, [sp, #20]
   1e38e:	9306      	str	r3, [sp, #24]
   1e390:	9307      	str	r3, [sp, #28]
	if (name_type != ADV_NAME_TYPE_NONE) {
   1e392:	f1b9 0f00 	cmp.w	r9, #0
   1e396:	d133      	bne.n	1e400 <le_adv_update+0x96>
	if (!(ext_adv && scannable)) {
   1e398:	f1bb 0f00 	cmp.w	fp, #0
   1e39c:	d002      	beq.n	1e3a4 <le_adv_update+0x3a>
   1e39e:	f1ba 0f00 	cmp.w	sl, #0
   1e3a2:	d10b      	bne.n	1e3bc <le_adv_update+0x52>
		d[0].data = ad;
   1e3a4:	9604      	str	r6, [sp, #16]
		d[0].len = ad_len;
   1e3a6:	9705      	str	r7, [sp, #20]
		if (name_type == ADV_NAME_TYPE_AD) {
   1e3a8:	f1b9 0f01 	cmp.w	r9, #1
   1e3ac:	d056      	beq.n	1e45c <le_adv_update+0xf2>
		d_len = 1;
   1e3ae:	2201      	movs	r2, #1
		err = set_ad(adv, d, d_len);
   1e3b0:	a904      	add	r1, sp, #16
   1e3b2:	4620      	mov	r0, r4
   1e3b4:	f7ff ffcd 	bl	1e352 <set_ad>
		if (err) {
   1e3b8:	4603      	mov	r3, r0
   1e3ba:	b9e8      	cbnz	r0, 1e3f8 <le_adv_update+0x8e>
	if (scannable) {
   1e3bc:	f1ba 0f00 	cmp.w	sl, #0
   1e3c0:	d00c      	beq.n	1e3dc <le_adv_update+0x72>
		d[0].data = sd;
   1e3c2:	9504      	str	r5, [sp, #16]
		d[0].len = sd_len;
   1e3c4:	f8cd 8014 	str.w	r8, [sp, #20]
		if (name_type == ADV_NAME_TYPE_SD) {
   1e3c8:	f1b9 0f02 	cmp.w	r9, #2
   1e3cc:	d04c      	beq.n	1e468 <le_adv_update+0xfe>
		d_len = 1;
   1e3ce:	2201      	movs	r2, #1
		err = set_sd(adv, d, d_len);
   1e3d0:	a904      	add	r1, sp, #16
   1e3d2:	4620      	mov	r0, r4
   1e3d4:	f7ff ffc3 	bl	1e35e <set_sd>
		if (err) {
   1e3d8:	4603      	mov	r3, r0
   1e3da:	b968      	cbnz	r0, 1e3f8 <le_adv_update+0x8e>
	atomic_set_bit(adv->flags, BT_ADV_DATA_SET);
   1e3dc:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e3de:	f3bf 8f5b 	dmb	ish
   1e3e2:	e854 3f00 	ldrex	r3, [r4]
   1e3e6:	f043 0304 	orr.w	r3, r3, #4
   1e3ea:	e844 3200 	strex	r2, r3, [r4]
   1e3ee:	2a00      	cmp	r2, #0
   1e3f0:	d1f7      	bne.n	1e3e2 <le_adv_update+0x78>
   1e3f2:	f3bf 8f5b 	dmb	ish
	return 0;
   1e3f6:	2300      	movs	r3, #0
}
   1e3f8:	4618      	mov	r0, r3
   1e3fa:	b009      	add	sp, #36	; 0x24
   1e3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   1e400:	f7f6 fb96 	bl	14b30 <bt_get_name>
   1e404:	9001      	str	r0, [sp, #4]
		if ((ad && ad_has_name(ad, ad_len)) ||
   1e406:	b166      	cbz	r6, 1e422 <le_adv_update+0xb8>
	for (i = 0; i < ad_len; i++) {
   1e408:	2200      	movs	r2, #0
   1e40a:	4297      	cmp	r7, r2
   1e40c:	d907      	bls.n	1e41e <le_adv_update+0xb4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e40e:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   1e412:	3b08      	subs	r3, #8
   1e414:	b2db      	uxtb	r3, r3
   1e416:	2b01      	cmp	r3, #1
   1e418:	d90f      	bls.n	1e43a <le_adv_update+0xd0>
	for (i = 0; i < ad_len; i++) {
   1e41a:	3201      	adds	r2, #1
   1e41c:	e7f5      	b.n	1e40a <le_adv_update+0xa0>
	return false;
   1e41e:	2300      	movs	r3, #0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1e420:	bb43      	cbnz	r3, 1e474 <le_adv_update+0x10a>
   1e422:	b175      	cbz	r5, 1e442 <le_adv_update+0xd8>
	for (i = 0; i < ad_len; i++) {
   1e424:	2200      	movs	r2, #0
   1e426:	4590      	cmp	r8, r2
   1e428:	d909      	bls.n	1e43e <le_adv_update+0xd4>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e42a:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   1e42e:	3b08      	subs	r3, #8
   1e430:	b2db      	uxtb	r3, r3
   1e432:	2b01      	cmp	r3, #1
   1e434:	d910      	bls.n	1e458 <le_adv_update+0xee>
	for (i = 0; i < ad_len; i++) {
   1e436:	3201      	adds	r2, #1
   1e438:	e7f5      	b.n	1e426 <le_adv_update+0xbc>
			return true;
   1e43a:	2301      	movs	r3, #1
   1e43c:	e7f0      	b.n	1e420 <le_adv_update+0xb6>
	return false;
   1e43e:	2300      	movs	r3, #0
		    (sd && ad_has_name(sd, sd_len))) {
   1e440:	b9db      	cbnz	r3, 1e47a <le_adv_update+0x110>
		data = (struct bt_data)BT_DATA(
   1e442:	9801      	ldr	r0, [sp, #4]
   1e444:	f7ff fcbc 	bl	1ddc0 <strlen>
   1e448:	2309      	movs	r3, #9
   1e44a:	f88d 3008 	strb.w	r3, [sp, #8]
   1e44e:	f88d 0009 	strb.w	r0, [sp, #9]
   1e452:	9b01      	ldr	r3, [sp, #4]
   1e454:	9303      	str	r3, [sp, #12]
   1e456:	e79f      	b.n	1e398 <le_adv_update+0x2e>
			return true;
   1e458:	2301      	movs	r3, #1
   1e45a:	e7f1      	b.n	1e440 <le_adv_update+0xd6>
			d[1].data = &data;
   1e45c:	ab02      	add	r3, sp, #8
   1e45e:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   1e460:	2301      	movs	r3, #1
   1e462:	9307      	str	r3, [sp, #28]
			d_len = 2;
   1e464:	2202      	movs	r2, #2
   1e466:	e7a3      	b.n	1e3b0 <le_adv_update+0x46>
			d[1].data = &data;
   1e468:	ab02      	add	r3, sp, #8
   1e46a:	9306      	str	r3, [sp, #24]
			d[1].len = 1;
   1e46c:	2301      	movs	r3, #1
   1e46e:	9307      	str	r3, [sp, #28]
			d_len = 2;
   1e470:	2202      	movs	r2, #2
   1e472:	e7ad      	b.n	1e3d0 <le_adv_update+0x66>
			return -EINVAL;
   1e474:	f06f 0315 	mvn.w	r3, #21
   1e478:	e7be      	b.n	1e3f8 <le_adv_update+0x8e>
   1e47a:	f06f 0315 	mvn.w	r3, #21
   1e47e:	e7bb      	b.n	1e3f8 <le_adv_update+0x8e>

0001e480 <valid_adv_param>:
{
   1e480:	b508      	push	{r3, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   1e482:	6843      	ldr	r3, [r0, #4]
   1e484:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1e488:	d107      	bne.n	1e49a <valid_adv_param+0x1a>
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   1e48a:	6902      	ldr	r2, [r0, #16]
   1e48c:	b112      	cbz	r2, 1e494 <valid_adv_param+0x14>
   1e48e:	f013 0f01 	tst.w	r3, #1
   1e492:	d004      	beq.n	1e49e <valid_adv_param+0x1e>
	return valid_adv_ext_param(param);
   1e494:	f7f6 fe52 	bl	1513c <valid_adv_ext_param>
}
   1e498:	bd08      	pop	{r3, pc}
		return false;
   1e49a:	2000      	movs	r0, #0
   1e49c:	e7fc      	b.n	1e498 <valid_adv_param+0x18>
		return false;
   1e49e:	2000      	movs	r0, #0
   1e4a0:	e7fa      	b.n	1e498 <valid_adv_param+0x18>

0001e4a2 <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   1e4a2:	6843      	ldr	r3, [r0, #4]
   1e4a4:	f013 0f08 	tst.w	r3, #8
   1e4a8:	d00b      	beq.n	1e4c2 <get_adv_name_type_param+0x20>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   1e4aa:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1e4ae:	d10a      	bne.n	1e4c6 <get_adv_name_type_param+0x24>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   1e4b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
   1e4b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e4b8:	d001      	beq.n	1e4be <get_adv_name_type_param+0x1c>
		return ADV_NAME_TYPE_SD;
   1e4ba:	2002      	movs	r0, #2
}
   1e4bc:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1e4be:	2001      	movs	r0, #1
   1e4c0:	4770      	bx	lr
	return ADV_NAME_TYPE_NONE;
   1e4c2:	2000      	movs	r0, #0
   1e4c4:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   1e4c6:	2001      	movs	r0, #1
   1e4c8:	4770      	bx	lr

0001e4ca <bt_le_adv_set_enable_legacy>:
{
   1e4ca:	b570      	push	{r4, r5, r6, lr}
   1e4cc:	b086      	sub	sp, #24
   1e4ce:	4605      	mov	r5, r0
   1e4d0:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1e4d2:	2101      	movs	r1, #1
   1e4d4:	f242 000a 	movw	r0, #8202	; 0x200a
   1e4d8:	f7f5 fa48 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e4dc:	b1d0      	cbz	r0, 1e514 <bt_le_adv_set_enable_legacy+0x4a>
   1e4de:	4606      	mov	r6, r0
	if (enable) {
   1e4e0:	b19c      	cbz	r4, 1e50a <bt_le_adv_set_enable_legacy+0x40>
	return net_buf_simple_add_u8(&buf->b, val);
   1e4e2:	2101      	movs	r1, #1
   1e4e4:	3008      	adds	r0, #8
   1e4e6:	f001 fdfc 	bl	200e2 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1e4ea:	9400      	str	r4, [sp, #0]
   1e4ec:	2306      	movs	r3, #6
   1e4ee:	f105 0210 	add.w	r2, r5, #16
   1e4f2:	a903      	add	r1, sp, #12
   1e4f4:	4630      	mov	r0, r6
   1e4f6:	f7f5 fa27 	bl	13948 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1e4fa:	2200      	movs	r2, #0
   1e4fc:	4631      	mov	r1, r6
   1e4fe:	f242 000a 	movw	r0, #8202	; 0x200a
   1e502:	f7f5 fa6f 	bl	139e4 <bt_hci_cmd_send_sync>
}
   1e506:	b006      	add	sp, #24
   1e508:	bd70      	pop	{r4, r5, r6, pc}
   1e50a:	2100      	movs	r1, #0
   1e50c:	3008      	adds	r0, #8
   1e50e:	f001 fde8 	bl	200e2 <net_buf_simple_add_u8>
   1e512:	e7ea      	b.n	1e4ea <bt_le_adv_set_enable_legacy+0x20>
		return -ENOBUFS;
   1e514:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e518:	e7f5      	b.n	1e506 <bt_le_adv_set_enable_legacy+0x3c>

0001e51a <bt_le_adv_set_enable>:
{
   1e51a:	b508      	push	{r3, lr}
	return bt_le_adv_set_enable_legacy(adv, enable);
   1e51c:	f7ff ffd5 	bl	1e4ca <bt_le_adv_set_enable_legacy>
}
   1e520:	bd08      	pop	{r3, pc}

0001e522 <bt_le_lim_adv_cancel_timeout>:
{
   1e522:	b508      	push	{r3, lr}
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   1e524:	3018      	adds	r0, #24
   1e526:	f003 f82b 	bl	21580 <k_work_cancel_delayable>
}
   1e52a:	bd08      	pop	{r3, pc}

0001e52c <bt_le_adv_resume>:
{
   1e52c:	b530      	push	{r4, r5, lr}
   1e52e:	b083      	sub	sp, #12
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1e530:	f7f6 fed0 	bl	152d4 <bt_le_adv_lookup_legacy>
	if (!adv) {
   1e534:	b150      	cbz	r0, 1e54c <bt_le_adv_resume+0x20>
   1e536:	4604      	mov	r4, r0
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1e538:	f100 0510 	add.w	r5, r0, #16
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e53c:	f3bf 8f5b 	dmb	ish
   1e540:	6903      	ldr	r3, [r0, #16]
   1e542:	f3bf 8f5b 	dmb	ish
   1e546:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   1e54a:	d101      	bne.n	1e550 <bt_le_adv_resume+0x24>
}
   1e54c:	b003      	add	sp, #12
   1e54e:	bd30      	pop	{r4, r5, pc}
   1e550:	f3bf 8f5b 	dmb	ish
   1e554:	6903      	ldr	r3, [r0, #16]
   1e556:	f3bf 8f5b 	dmb	ish
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   1e55a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1e55e:	d1f5      	bne.n	1e54c <bt_le_adv_resume+0x20>
   1e560:	f3bf 8f5b 	dmb	ish
   1e564:	6903      	ldr	r3, [r0, #16]
   1e566:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1e56a:	f413 7f00 	tst.w	r3, #512	; 0x200
   1e56e:	d0ed      	beq.n	1e54c <bt_le_adv_resume+0x20>
	err = le_adv_start_add_conn(adv, &conn);
   1e570:	a901      	add	r1, sp, #4
   1e572:	f7f6 fe31 	bl	151d8 <le_adv_start_add_conn>
	if (err) {
   1e576:	2800      	cmp	r0, #0
   1e578:	d1e8      	bne.n	1e54c <bt_le_adv_resume+0x20>
	err = bt_le_adv_set_enable(adv, true);
   1e57a:	2101      	movs	r1, #1
   1e57c:	4620      	mov	r0, r4
   1e57e:	f7ff ffcc 	bl	1e51a <bt_le_adv_set_enable>
	if (err) {
   1e582:	b908      	cbnz	r0, 1e588 <bt_le_adv_resume+0x5c>
	bool persist_paused = false;
   1e584:	2400      	movs	r4, #0
   1e586:	e011      	b.n	1e5ac <bt_le_adv_resume+0x80>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e588:	2100      	movs	r1, #0
   1e58a:	9801      	ldr	r0, [sp, #4]
   1e58c:	f7f7 fbb0 	bl	15cf0 <bt_conn_set_state>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e590:	f3bf 8f5b 	dmb	ish
   1e594:	e855 4f00 	ldrex	r4, [r5]
   1e598:	f424 5300 	bic.w	r3, r4, #8192	; 0x2000
   1e59c:	e845 3200 	strex	r2, r3, [r5]
   1e5a0:	2a00      	cmp	r2, #0
   1e5a2:	d1f7      	bne.n	1e594 <bt_le_adv_resume+0x68>
   1e5a4:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1e5a8:	f3c4 3440 	ubfx	r4, r4, #13, #1
	bt_conn_unref(conn);
   1e5ac:	9801      	ldr	r0, [sp, #4]
   1e5ae:	f000 f92b 	bl	1e808 <bt_conn_unref>
	if (persist_paused) {
   1e5b2:	2c00      	cmp	r4, #0
   1e5b4:	d0ca      	beq.n	1e54c <bt_le_adv_resume+0x20>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e5b6:	f3bf 8f5b 	dmb	ish
   1e5ba:	e855 3f00 	ldrex	r3, [r5]
   1e5be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1e5c2:	e845 3200 	strex	r2, r3, [r5]
   1e5c6:	2a00      	cmp	r2, #0
   1e5c8:	d1f7      	bne.n	1e5ba <bt_le_adv_resume+0x8e>
   1e5ca:	f3bf 8f5b 	dmb	ish
}
   1e5ce:	e7bd      	b.n	1e54c <bt_le_adv_resume+0x20>

0001e5d0 <tx_notify>:
{
   1e5d0:	b570      	push	{r4, r5, r6, lr}
   1e5d2:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   1e5d4:	e010      	b.n	1e5f8 <tx_notify+0x28>
   1e5d6:	f383 8811 	msr	BASEPRI, r3
   1e5da:	f3bf 8f6f 	isb	sy
}
   1e5de:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   1e5e0:	6262      	str	r2, [r4, #36]	; 0x24
   1e5e2:	f383 8811 	msr	BASEPRI, r3
   1e5e6:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   1e5ea:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   1e5ec:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   1e5ee:	f7f7 f917 	bl	15820 <tx_free>
		cb(conn, user_data);
   1e5f2:	4631      	mov	r1, r6
   1e5f4:	4620      	mov	r0, r4
   1e5f6:	47a8      	blx	r5
	__asm__ volatile(
   1e5f8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e5fc:	f3ef 8311 	mrs	r3, BASEPRI
   1e600:	f382 8812 	msr	BASEPRI_MAX, r2
   1e604:	f3bf 8f6f 	isb	sy
	return list->head;
   1e608:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e60a:	2800      	cmp	r0, #0
   1e60c:	d0e3      	beq.n	1e5d6 <tx_notify+0x6>
	return node->next;
   1e60e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e610:	6222      	str	r2, [r4, #32]
	return list->tail;
   1e612:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e614:	4281      	cmp	r1, r0
   1e616:	d1e4      	bne.n	1e5e2 <tx_notify+0x12>
   1e618:	e7e2      	b.n	1e5e0 <tx_notify+0x10>

0001e61a <tx_complete_work>:
{
   1e61a:	b508      	push	{r3, lr}
	tx_notify(conn);
   1e61c:	3828      	subs	r0, #40	; 0x28
   1e61e:	f7ff ffd7 	bl	1e5d0 <tx_notify>
}
   1e622:	bd08      	pop	{r3, pc}

0001e624 <send_acl>:
{
   1e624:	b570      	push	{r4, r5, r6, lr}
   1e626:	4605      	mov	r5, r0
   1e628:	460c      	mov	r4, r1
	switch (flags) {
   1e62a:	2a03      	cmp	r2, #3
   1e62c:	d819      	bhi.n	1e662 <send_acl+0x3e>
   1e62e:	e8df f002 	tbb	[pc, r2]
   1e632:	1602      	.short	0x1602
   1e634:	1602      	.short	0x1602
		flags = BT_ACL_CONT;
   1e636:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   1e638:	2104      	movs	r1, #4
   1e63a:	f104 0008 	add.w	r0, r4, #8
   1e63e:	f001 fd57 	bl	200f0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1e642:	f9b5 3000 	ldrsh.w	r3, [r5]
   1e646:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   1e64a:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e64c:	89a3      	ldrh	r3, [r4, #12]
   1e64e:	3b04      	subs	r3, #4
   1e650:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1e652:	2302      	movs	r3, #2
   1e654:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   1e656:	4620      	mov	r0, r4
   1e658:	f7f5 fcba 	bl	13fd0 <bt_send>
}
   1e65c:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   1e65e:	2601      	movs	r6, #1
   1e660:	e7ea      	b.n	1e638 <send_acl+0x14>
   1e662:	f06f 0015 	mvn.w	r0, #21
   1e666:	e7f9      	b.n	1e65c <send_acl+0x38>

0001e668 <process_unack_tx>:
{
   1e668:	b510      	push	{r4, lr}
   1e66a:	4604      	mov	r4, r0
   1e66c:	e028      	b.n	1e6c0 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   1e66e:	3b01      	subs	r3, #1
   1e670:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1e672:	f382 8811 	msr	BASEPRI, r2
   1e676:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1e67a:	4620      	mov	r0, r4
   1e67c:	f7f7 f91c 	bl	158b8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1e680:	f7fc fcec 	bl	1b05c <z_impl_k_sem_give>
			continue;
   1e684:	e01c      	b.n	1e6c0 <process_unack_tx+0x58>
	list->tail = node;
   1e686:	61a3      	str	r3, [r4, #24]
   1e688:	f382 8811 	msr	BASEPRI, r2
   1e68c:	f3bf 8f6f 	isb	sy
		if (!node) {
   1e690:	b350      	cbz	r0, 1e6e8 <process_unack_tx+0x80>
	__asm__ volatile(
   1e692:	f04f 0240 	mov.w	r2, #64	; 0x40
   1e696:	f3ef 8311 	mrs	r3, BASEPRI
   1e69a:	f382 8812 	msr	BASEPRI_MAX, r2
   1e69e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1e6a2:	68c2      	ldr	r2, [r0, #12]
   1e6a4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1e6a6:	2200      	movs	r2, #0
   1e6a8:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   1e6aa:	f383 8811 	msr	BASEPRI, r3
   1e6ae:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1e6b2:	f7f7 f8b5 	bl	15820 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   1e6b6:	4620      	mov	r0, r4
   1e6b8:	f7f7 f8fe 	bl	158b8 <bt_conn_get_pkts>
   1e6bc:	f7fc fcce 	bl	1b05c <z_impl_k_sem_give>
	__asm__ volatile(
   1e6c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e6c4:	f3ef 8211 	mrs	r2, BASEPRI
   1e6c8:	f383 8812 	msr	BASEPRI_MAX, r3
   1e6cc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1e6d0:	69e3      	ldr	r3, [r4, #28]
   1e6d2:	2b00      	cmp	r3, #0
   1e6d4:	d1cb      	bne.n	1e66e <process_unack_tx+0x6>
	return list->head;
   1e6d6:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1e6d8:	2800      	cmp	r0, #0
   1e6da:	d0d5      	beq.n	1e688 <process_unack_tx+0x20>
	return node->next;
   1e6dc:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1e6de:	6163      	str	r3, [r4, #20]
	return list->tail;
   1e6e0:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e6e2:	4288      	cmp	r0, r1
   1e6e4:	d1d0      	bne.n	1e688 <process_unack_tx+0x20>
   1e6e6:	e7ce      	b.n	1e686 <process_unack_tx+0x1e>
}
   1e6e8:	bd10      	pop	{r4, pc}

0001e6ea <bt_conn_reset_rx_state>:
{
   1e6ea:	b510      	push	{r4, lr}
   1e6ec:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e6ee:	6900      	ldr	r0, [r0, #16]
   1e6f0:	b118      	cbz	r0, 1e6fa <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e6f2:	f001 fc9b 	bl	2002c <net_buf_unref>
	conn->rx = NULL;
   1e6f6:	2300      	movs	r3, #0
   1e6f8:	6123      	str	r3, [r4, #16]
}
   1e6fa:	bd10      	pop	{r4, pc}

0001e6fc <conn_cleanup>:
{
   1e6fc:	b538      	push	{r3, r4, r5, lr}
   1e6fe:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e700:	e004      	b.n	1e70c <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   1e702:	f7f7 f88d 	bl	15820 <tx_free>
		net_buf_unref(buf);
   1e706:	4620      	mov	r0, r4
   1e708:	f001 fc90 	bl	2002c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e70c:	2200      	movs	r2, #0
   1e70e:	2300      	movs	r3, #0
   1e710:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1e714:	f001 fc5e 	bl	1ffd4 <net_buf_get>
   1e718:	4604      	mov	r4, r0
   1e71a:	b118      	cbz	r0, 1e724 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   1e71c:	6960      	ldr	r0, [r4, #20]
   1e71e:	2800      	cmp	r0, #0
   1e720:	d1ef      	bne.n	1e702 <conn_cleanup+0x6>
   1e722:	e7f0      	b.n	1e706 <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   1e724:	4628      	mov	r0, r5
   1e726:	f7ff ffe0 	bl	1e6ea <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e72a:	2200      	movs	r2, #0
   1e72c:	2300      	movs	r3, #0
   1e72e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   1e732:	f7fc feab 	bl	1b48c <k_work_reschedule>
}
   1e736:	bd38      	pop	{r3, r4, r5, pc}

0001e738 <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e738:	f3bf 8f5b 	dmb	ish
   1e73c:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e740:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   1e744:	b33b      	cbz	r3, 1e796 <conn_prepare_events+0x5e>
{
   1e746:	b510      	push	{r4, lr}
   1e748:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   1e74a:	7a83      	ldrb	r3, [r0, #10]
   1e74c:	b983      	cbnz	r3, 1e770 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   1e74e:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e750:	f3bf 8f5b 	dmb	ish
   1e754:	e853 2f00 	ldrex	r2, [r3]
   1e758:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1e75c:	e843 1c00 	strex	ip, r1, [r3]
   1e760:	f1bc 0f00 	cmp.w	ip, #0
   1e764:	d1f6      	bne.n	1e754 <conn_prepare_events+0x1c>
   1e766:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   1e76a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1e76e:	d10d      	bne.n	1e78c <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   1e770:	7a83      	ldrb	r3, [r0, #10]
   1e772:	2b07      	cmp	r3, #7
   1e774:	d112      	bne.n	1e79c <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   1e776:	f100 0338 	add.w	r3, r0, #56	; 0x38
   1e77a:	2200      	movs	r2, #0
   1e77c:	2104      	movs	r1, #4
   1e77e:	4620      	mov	r0, r4
   1e780:	f003 fa2f 	bl	21be2 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1e784:	2301      	movs	r3, #1
   1e786:	7323      	strb	r3, [r4, #12]
	return 0;
   1e788:	2000      	movs	r0, #0
}
   1e78a:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   1e78c:	f7ff ffb6 	bl	1e6fc <conn_cleanup>
		return -ENOTCONN;
   1e790:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e794:	e7f9      	b.n	1e78a <conn_prepare_events+0x52>
		return -ENOTCONN;
   1e796:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1e79a:	4770      	bx	lr
		return -ENOTCONN;
   1e79c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e7a0:	e7f3      	b.n	1e78a <conn_prepare_events+0x52>

0001e7a2 <bt_conn_recv>:
{
   1e7a2:	b570      	push	{r4, r5, r6, lr}
   1e7a4:	4604      	mov	r4, r0
   1e7a6:	460d      	mov	r5, r1
   1e7a8:	4616      	mov	r6, r2
	tx_notify(conn);
   1e7aa:	f7ff ff11 	bl	1e5d0 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   1e7ae:	4632      	mov	r2, r6
   1e7b0:	4629      	mov	r1, r5
   1e7b2:	4620      	mov	r0, r4
   1e7b4:	f7f7 f952 	bl	15a5c <bt_acl_recv>
}
   1e7b8:	bd70      	pop	{r4, r5, r6, pc}

0001e7ba <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e7ba:	f3bf 8f5b 	dmb	ish
   1e7be:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e7c2:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e7c6:	b1eb      	cbz	r3, 1e804 <bt_conn_ref+0x4a>
{
   1e7c8:	b410      	push	{r4}
   1e7ca:	e006      	b.n	1e7da <bt_conn_ref+0x20>
   1e7cc:	f3bf 8f5b 	dmb	ish
   1e7d0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e7d4:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e7d8:	b193      	cbz	r3, 1e800 <bt_conn_ref+0x46>
   1e7da:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e7de:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e7e0:	f3bf 8f5b 	dmb	ish
   1e7e4:	e852 4f00 	ldrex	r4, [r2]
   1e7e8:	429c      	cmp	r4, r3
   1e7ea:	d104      	bne.n	1e7f6 <bt_conn_ref+0x3c>
   1e7ec:	e842 1c00 	strex	ip, r1, [r2]
   1e7f0:	f1bc 0f00 	cmp.w	ip, #0
   1e7f4:	d1f6      	bne.n	1e7e4 <bt_conn_ref+0x2a>
   1e7f6:	f3bf 8f5b 	dmb	ish
   1e7fa:	d1e7      	bne.n	1e7cc <bt_conn_ref+0x12>
}
   1e7fc:	bc10      	pop	{r4}
   1e7fe:	4770      	bx	lr
			return NULL;
   1e800:	2000      	movs	r0, #0
   1e802:	e7fb      	b.n	1e7fc <bt_conn_ref+0x42>
   1e804:	2000      	movs	r0, #0
}
   1e806:	4770      	bx	lr

0001e808 <bt_conn_unref>:
{
   1e808:	b508      	push	{r3, lr}
	old = atomic_dec(&conn->ref);
   1e80a:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e80e:	f3bf 8f5b 	dmb	ish
   1e812:	e853 2f00 	ldrex	r2, [r3]
   1e816:	3a01      	subs	r2, #1
   1e818:	e843 2100 	strex	r1, r2, [r3]
   1e81c:	2900      	cmp	r1, #0
   1e81e:	d1f8      	bne.n	1e812 <bt_conn_unref+0xa>
   1e820:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e824:	7883      	ldrb	r3, [r0, #2]
   1e826:	2b01      	cmp	r3, #1
   1e828:	d000      	beq.n	1e82c <bt_conn_unref+0x24>
}
   1e82a:	bd08      	pop	{r3, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e82c:	f3bf 8f5b 	dmb	ish
   1e830:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1e834:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e838:	2b00      	cmp	r3, #0
   1e83a:	d1f6      	bne.n	1e82a <bt_conn_unref+0x22>
		bt_le_adv_resume();
   1e83c:	f7ff fe76 	bl	1e52c <bt_le_adv_resume>
}
   1e840:	e7f3      	b.n	1e82a <bt_conn_unref+0x22>

0001e842 <conn_lookup_handle>:
{
   1e842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e846:	4607      	mov	r7, r0
   1e848:	460e      	mov	r6, r1
   1e84a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e84c:	2400      	movs	r4, #0
   1e84e:	e003      	b.n	1e858 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e850:	4628      	mov	r0, r5
   1e852:	f7ff ffd9 	bl	1e808 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e856:	3401      	adds	r4, #1
   1e858:	42b4      	cmp	r4, r6
   1e85a:	d21c      	bcs.n	1e896 <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e85c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1e860:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   1e864:	f7ff ffa9 	bl	1e7ba <bt_conn_ref>
		if (!conn) {
   1e868:	4605      	mov	r5, r0
   1e86a:	2800      	cmp	r0, #0
   1e86c:	d0f3      	beq.n	1e856 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e86e:	7a83      	ldrb	r3, [r0, #10]
   1e870:	2b01      	cmp	r3, #1
   1e872:	d006      	beq.n	1e882 <conn_lookup_handle+0x40>
   1e874:	b25a      	sxtb	r2, r3
   1e876:	2a00      	cmp	r2, #0
   1e878:	d0ea      	beq.n	1e850 <conn_lookup_handle+0xe>
   1e87a:	3b07      	subs	r3, #7
   1e87c:	b2db      	uxtb	r3, r3
   1e87e:	2b01      	cmp	r3, #1
   1e880:	d8e6      	bhi.n	1e850 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   1e882:	882b      	ldrh	r3, [r5, #0]
   1e884:	4543      	cmp	r3, r8
   1e886:	d102      	bne.n	1e88e <conn_lookup_handle+0x4c>
}
   1e888:	4628      	mov	r0, r5
   1e88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   1e88e:	4628      	mov	r0, r5
   1e890:	f7ff ffba 	bl	1e808 <bt_conn_unref>
			continue;
   1e894:	e7df      	b.n	1e856 <conn_lookup_handle+0x14>
	return NULL;
   1e896:	2500      	movs	r5, #0
   1e898:	e7f6      	b.n	1e888 <conn_lookup_handle+0x46>

0001e89a <bt_conn_connected>:
{
   1e89a:	b510      	push	{r4, lr}
   1e89c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e89e:	f7f7 feab 	bl	165f8 <bt_l2cap_connected>
	notify_connected(conn);
   1e8a2:	4620      	mov	r0, r4
   1e8a4:	f7f6 ffe0 	bl	15868 <notify_connected>
}
   1e8a8:	bd10      	pop	{r4, pc}

0001e8aa <bt_conn_get_security>:
}
   1e8aa:	2001      	movs	r0, #1
   1e8ac:	4770      	bx	lr

0001e8ae <bt_conn_add_le>:
{
   1e8ae:	b570      	push	{r4, r5, r6, lr}
   1e8b0:	4606      	mov	r6, r0
   1e8b2:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   1e8b4:	f7f7 f8ca 	bl	15a4c <acl_conn_new>
	if (!conn) {
   1e8b8:	4604      	mov	r4, r0
   1e8ba:	b168      	cbz	r0, 1e8d8 <bt_conn_add_le+0x2a>
	conn->id = id;
   1e8bc:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   1e8be:	2207      	movs	r2, #7
   1e8c0:	4629      	mov	r1, r5
   1e8c2:	3088      	adds	r0, #136	; 0x88
   1e8c4:	f7ff faaf 	bl	1de26 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   1e8c8:	2301      	movs	r3, #1
   1e8ca:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1e8cc:	2318      	movs	r3, #24
   1e8ce:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   1e8d2:	2328      	movs	r3, #40	; 0x28
   1e8d4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   1e8d8:	4620      	mov	r0, r4
   1e8da:	bd70      	pop	{r4, r5, r6, pc}

0001e8dc <bt_conn_is_peer_addr_le>:
{
   1e8dc:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e8de:	7a03      	ldrb	r3, [r0, #8]
   1e8e0:	428b      	cmp	r3, r1
   1e8e2:	d001      	beq.n	1e8e8 <bt_conn_is_peer_addr_le+0xc>
		return false;
   1e8e4:	2000      	movs	r0, #0
}
   1e8e6:	bd38      	pop	{r3, r4, r5, pc}
   1e8e8:	4604      	mov	r4, r0
   1e8ea:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   1e8ec:	2207      	movs	r2, #7
   1e8ee:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e8f2:	4628      	mov	r0, r5
   1e8f4:	f7ff fa80 	bl	1ddf8 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e8f8:	b1a8      	cbz	r0, 1e926 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1e8fa:	78e3      	ldrb	r3, [r4, #3]
   1e8fc:	b14b      	cbz	r3, 1e912 <bt_conn_is_peer_addr_le+0x36>
   1e8fe:	2207      	movs	r2, #7
   1e900:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e904:	4628      	mov	r0, r5
   1e906:	f7ff fa77 	bl	1ddf8 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e90a:	fab0 f080 	clz	r0, r0
   1e90e:	0940      	lsrs	r0, r0, #5
   1e910:	e7e9      	b.n	1e8e6 <bt_conn_is_peer_addr_le+0xa>
   1e912:	2207      	movs	r2, #7
   1e914:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e918:	4628      	mov	r0, r5
   1e91a:	f7ff fa6d 	bl	1ddf8 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   1e91e:	fab0 f080 	clz	r0, r0
   1e922:	0940      	lsrs	r0, r0, #5
   1e924:	e7df      	b.n	1e8e6 <bt_conn_is_peer_addr_le+0xa>
		return true;
   1e926:	2001      	movs	r0, #1
   1e928:	e7dd      	b.n	1e8e6 <bt_conn_is_peer_addr_le+0xa>

0001e92a <bt_conn_le_conn_update>:
{
   1e92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e92c:	4606      	mov	r6, r0
   1e92e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e930:	210e      	movs	r1, #14
   1e932:	f242 0013 	movw	r0, #8211	; 0x2013
   1e936:	f7f5 f819 	bl	1396c <bt_hci_cmd_create>
	if (!buf) {
   1e93a:	b1d0      	cbz	r0, 1e972 <bt_conn_le_conn_update+0x48>
   1e93c:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   1e93e:	210e      	movs	r1, #14
   1e940:	3008      	adds	r0, #8
   1e942:	f001 fbbd 	bl	200c0 <net_buf_simple_add>
   1e946:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e948:	220e      	movs	r2, #14
   1e94a:	2100      	movs	r1, #0
   1e94c:	f7ff fa8f 	bl	1de6e <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e950:	8833      	ldrh	r3, [r6, #0]
   1e952:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e954:	882b      	ldrh	r3, [r5, #0]
   1e956:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e958:	886b      	ldrh	r3, [r5, #2]
   1e95a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e95c:	88ab      	ldrh	r3, [r5, #4]
   1e95e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e960:	88eb      	ldrh	r3, [r5, #6]
   1e962:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e964:	2200      	movs	r2, #0
   1e966:	4639      	mov	r1, r7
   1e968:	f242 0013 	movw	r0, #8211	; 0x2013
   1e96c:	f7f5 f83a 	bl	139e4 <bt_hci_cmd_send_sync>
}
   1e970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   1e972:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e976:	e7fb      	b.n	1e970 <bt_conn_le_conn_update+0x46>

0001e978 <l2cap_connected>:
}
   1e978:	4770      	bx	lr

0001e97a <l2cap_chan_recv>:
{
   1e97a:	b510      	push	{r4, lr}
   1e97c:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   1e97e:	6843      	ldr	r3, [r0, #4]
   1e980:	691b      	ldr	r3, [r3, #16]
   1e982:	4798      	blx	r3
	net_buf_unref(buf);
   1e984:	4620      	mov	r0, r4
   1e986:	f001 fb51 	bl	2002c <net_buf_unref>
}
   1e98a:	bd10      	pop	{r4, pc}

0001e98c <l2cap_disconnected>:
{
   1e98c:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e98e:	3010      	adds	r0, #16
   1e990:	f002 fdf6 	bl	21580 <k_work_cancel_delayable>
}
   1e994:	bd08      	pop	{r3, pc}

0001e996 <bt_l2cap_chan_remove>:
	return list->head;
   1e996:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e998:	b103      	cbz	r3, 1e99c <bt_l2cap_chan_remove+0x6>
   1e99a:	3b08      	subs	r3, #8
   1e99c:	2200      	movs	r2, #0
   1e99e:	e016      	b.n	1e9ce <bt_l2cap_chan_remove+0x38>
{
   1e9a0:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1e9a2:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   1e9a6:	b142      	cbz	r2, 1e9ba <bt_l2cap_chan_remove+0x24>
	return node->next;
   1e9a8:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   1e9aa:	6014      	str	r4, [r2, #0]
	return list->tail;
   1e9ac:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1e9ae:	42a1      	cmp	r1, r4
   1e9b0:	d00a      	beq.n	1e9c8 <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   1e9b2:	2200      	movs	r2, #0
   1e9b4:	609a      	str	r2, [r3, #8]
}
   1e9b6:	bc10      	pop	{r4}
   1e9b8:	4770      	bx	lr
	return node->next;
   1e9ba:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1e9bc:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   1e9be:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1e9c0:	42a1      	cmp	r1, r4
   1e9c2:	d1f6      	bne.n	1e9b2 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   1e9c4:	6542      	str	r2, [r0, #84]	; 0x54
}
   1e9c6:	e7f4      	b.n	1e9b2 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   1e9c8:	6542      	str	r2, [r0, #84]	; 0x54
}
   1e9ca:	e7f2      	b.n	1e9b2 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e9cc:	4613      	mov	r3, r2
   1e9ce:	b14b      	cbz	r3, 1e9e4 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   1e9d0:	428b      	cmp	r3, r1
   1e9d2:	d0e5      	beq.n	1e9a0 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e9d4:	f113 0208 	adds.w	r2, r3, #8
   1e9d8:	d0f8      	beq.n	1e9cc <bt_l2cap_chan_remove+0x36>
	return node->next;
   1e9da:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e9dc:	2b00      	cmp	r3, #0
   1e9de:	d0f6      	beq.n	1e9ce <bt_l2cap_chan_remove+0x38>
   1e9e0:	3b08      	subs	r3, #8
   1e9e2:	e7f4      	b.n	1e9ce <bt_l2cap_chan_remove+0x38>
   1e9e4:	4770      	bx	lr

0001e9e6 <bt_l2cap_chan_del>:
{
   1e9e6:	b538      	push	{r3, r4, r5, lr}
   1e9e8:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   1e9ea:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   1e9ec:	6803      	ldr	r3, [r0, #0]
   1e9ee:	b123      	cbz	r3, 1e9fa <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e9f0:	686b      	ldr	r3, [r5, #4]
   1e9f2:	b103      	cbz	r3, 1e9f6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e9f4:	4798      	blx	r3
	chan->conn = NULL;
   1e9f6:	2300      	movs	r3, #0
   1e9f8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e9fa:	68e3      	ldr	r3, [r4, #12]
   1e9fc:	b10b      	cbz	r3, 1ea02 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e9fe:	4620      	mov	r0, r4
   1ea00:	4798      	blx	r3
	if (ops->released) {
   1ea02:	69eb      	ldr	r3, [r5, #28]
   1ea04:	b10b      	cbz	r3, 1ea0a <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   1ea06:	4620      	mov	r0, r4
   1ea08:	4798      	blx	r3
}
   1ea0a:	bd38      	pop	{r3, r4, r5, pc}

0001ea0c <bt_l2cap_chan_add>:
{
   1ea0c:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   1ea0e:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   1ea12:	2400      	movs	r4, #0
   1ea14:	608c      	str	r4, [r1, #8]
	return list->tail;
   1ea16:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   1ea18:	b12c      	cbz	r4, 1ea26 <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   1ea1a:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ea1c:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   1ea1e:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   1ea20:	60ca      	str	r2, [r1, #12]
}
   1ea22:	bc10      	pop	{r4}
   1ea24:	4770      	bx	lr
   1ea26:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   1ea28:	6503      	str	r3, [r0, #80]	; 0x50
}
   1ea2a:	e7f8      	b.n	1ea1e <bt_l2cap_chan_add+0x12>

0001ea2c <bt_l2cap_disconnected>:
{
   1ea2c:	b510      	push	{r4, lr}
	return list->head;
   1ea2e:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ea30:	b140      	cbz	r0, 1ea44 <bt_l2cap_disconnected+0x18>
   1ea32:	3808      	subs	r0, #8
   1ea34:	d008      	beq.n	1ea48 <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea36:	f110 0408 	adds.w	r4, r0, #8
   1ea3a:	d00a      	beq.n	1ea52 <bt_l2cap_disconnected+0x26>
	return node->next;
   1ea3c:	6884      	ldr	r4, [r0, #8]
   1ea3e:	b144      	cbz	r4, 1ea52 <bt_l2cap_disconnected+0x26>
   1ea40:	3c08      	subs	r4, #8
   1ea42:	e006      	b.n	1ea52 <bt_l2cap_disconnected+0x26>
   1ea44:	4604      	mov	r4, r0
   1ea46:	e004      	b.n	1ea52 <bt_l2cap_disconnected+0x26>
   1ea48:	4604      	mov	r4, r0
   1ea4a:	e002      	b.n	1ea52 <bt_l2cap_disconnected+0x26>
   1ea4c:	4623      	mov	r3, r4
   1ea4e:	4620      	mov	r0, r4
   1ea50:	461c      	mov	r4, r3
   1ea52:	b158      	cbz	r0, 1ea6c <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   1ea54:	f7ff ffc7 	bl	1e9e6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ea58:	2c00      	cmp	r4, #0
   1ea5a:	d0f7      	beq.n	1ea4c <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ea5c:	f114 0308 	adds.w	r3, r4, #8
   1ea60:	d0f5      	beq.n	1ea4e <bt_l2cap_disconnected+0x22>
	return node->next;
   1ea62:	68a3      	ldr	r3, [r4, #8]
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d0f2      	beq.n	1ea4e <bt_l2cap_disconnected+0x22>
   1ea68:	3b08      	subs	r3, #8
   1ea6a:	e7f0      	b.n	1ea4e <bt_l2cap_disconnected+0x22>
}
   1ea6c:	bd10      	pop	{r4, pc}

0001ea6e <bt_l2cap_create_pdu_timeout>:
{
   1ea6e:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   1ea70:	3104      	adds	r1, #4
   1ea72:	f7f7 fa43 	bl	15efc <bt_conn_create_pdu_timeout>
}
   1ea76:	bd08      	pop	{r3, pc}

0001ea78 <bt_l2cap_send_cb>:
{
   1ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea7a:	4605      	mov	r5, r0
   1ea7c:	460f      	mov	r7, r1
   1ea7e:	4614      	mov	r4, r2
   1ea80:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   1ea82:	2104      	movs	r1, #4
   1ea84:	f102 0008 	add.w	r0, r2, #8
   1ea88:	f001 fb32 	bl	200f0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ea8c:	89a3      	ldrh	r3, [r4, #12]
   1ea8e:	3b04      	subs	r3, #4
   1ea90:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   1ea92:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ea94:	9b06      	ldr	r3, [sp, #24]
   1ea96:	4632      	mov	r2, r6
   1ea98:	4621      	mov	r1, r4
   1ea9a:	4628      	mov	r0, r5
   1ea9c:	f7f7 f894 	bl	15bc8 <bt_conn_send_cb>
}
   1eaa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eaa2 <l2cap_send_reject>:
{
   1eaa2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1eaa6:	b083      	sub	sp, #12
   1eaa8:	4605      	mov	r5, r0
   1eaaa:	4690      	mov	r8, r2
   1eaac:	461c      	mov	r4, r3
   1eaae:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1eab2:	1cbb      	adds	r3, r7, #2
   1eab4:	460a      	mov	r2, r1
   1eab6:	2101      	movs	r1, #1
   1eab8:	2000      	movs	r0, #0
   1eaba:	f7f7 fdd9 	bl	16670 <l2cap_create_le_sig_pdu>
	if (!buf) {
   1eabe:	b1b0      	cbz	r0, 1eaee <l2cap_send_reject+0x4c>
   1eac0:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1eac2:	f100 0908 	add.w	r9, r0, #8
   1eac6:	2102      	movs	r1, #2
   1eac8:	4648      	mov	r0, r9
   1eaca:	f001 faf9 	bl	200c0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1eace:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   1ead2:	b124      	cbz	r4, 1eade <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ead4:	463a      	mov	r2, r7
   1ead6:	4621      	mov	r1, r4
   1ead8:	4648      	mov	r0, r9
   1eada:	f001 faf7 	bl	200cc <net_buf_simple_add_mem>
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1eade:	2300      	movs	r3, #0
   1eae0:	9300      	str	r3, [sp, #0]
   1eae2:	4632      	mov	r2, r6
   1eae4:	2105      	movs	r1, #5
   1eae6:	4628      	mov	r0, r5
   1eae8:	f7ff ffc6 	bl	1ea78 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1eaec:	b910      	cbnz	r0, 1eaf4 <l2cap_send_reject+0x52>
}
   1eaee:	b003      	add	sp, #12
   1eaf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   1eaf4:	4630      	mov	r0, r6
   1eaf6:	f001 fa99 	bl	2002c <net_buf_unref>
}
   1eafa:	e7f8      	b.n	1eaee <l2cap_send_reject+0x4c>

0001eafc <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1eafc:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eafe:	b110      	cbz	r0, 1eb06 <bt_l2cap_le_lookup_tx_cid+0xa>
   1eb00:	3808      	subs	r0, #8
   1eb02:	e000      	b.n	1eb06 <bt_l2cap_le_lookup_tx_cid+0xa>
   1eb04:	3808      	subs	r0, #8
   1eb06:	b148      	cbz	r0, 1eb1c <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1eb08:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   1eb0c:	428b      	cmp	r3, r1
   1eb0e:	d005      	beq.n	1eb1c <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb10:	f110 0308 	adds.w	r3, r0, #8
   1eb14:	d003      	beq.n	1eb1e <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   1eb16:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eb18:	2800      	cmp	r0, #0
   1eb1a:	d1f3      	bne.n	1eb04 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   1eb1c:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eb1e:	4618      	mov	r0, r3
   1eb20:	e7f1      	b.n	1eb06 <bt_l2cap_le_lookup_tx_cid+0xa>

0001eb22 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1eb22:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eb24:	b110      	cbz	r0, 1eb2c <bt_l2cap_le_lookup_rx_cid+0xa>
   1eb26:	3808      	subs	r0, #8
   1eb28:	e000      	b.n	1eb2c <bt_l2cap_le_lookup_rx_cid+0xa>
   1eb2a:	3808      	subs	r0, #8
   1eb2c:	b148      	cbz	r0, 1eb42 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1eb2e:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1eb32:	428b      	cmp	r3, r1
   1eb34:	d005      	beq.n	1eb42 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb36:	f110 0308 	adds.w	r3, r0, #8
   1eb3a:	d003      	beq.n	1eb44 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   1eb3c:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eb3e:	2800      	cmp	r0, #0
   1eb40:	d1f3      	bne.n	1eb2a <bt_l2cap_le_lookup_rx_cid+0x8>
}
   1eb42:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1eb44:	4618      	mov	r0, r3
   1eb46:	e7f1      	b.n	1eb2c <bt_l2cap_le_lookup_rx_cid+0xa>

0001eb48 <bt_l2cap_update_conn_param>:
{
   1eb48:	b570      	push	{r4, r5, r6, lr}
   1eb4a:	b082      	sub	sp, #8
   1eb4c:	4605      	mov	r5, r0
   1eb4e:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1eb50:	f7f7 fc9a 	bl	16488 <get_ident>
   1eb54:	4602      	mov	r2, r0
   1eb56:	2308      	movs	r3, #8
   1eb58:	2112      	movs	r1, #18
   1eb5a:	2000      	movs	r0, #0
   1eb5c:	f7f7 fd88 	bl	16670 <l2cap_create_le_sig_pdu>
	if (!buf) {
   1eb60:	b1e0      	cbz	r0, 1eb9c <bt_l2cap_update_conn_param+0x54>
   1eb62:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   1eb64:	2108      	movs	r1, #8
   1eb66:	4408      	add	r0, r1
   1eb68:	f001 faaa 	bl	200c0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1eb6c:	8823      	ldrh	r3, [r4, #0]
   1eb6e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1eb70:	8863      	ldrh	r3, [r4, #2]
   1eb72:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1eb74:	88a3      	ldrh	r3, [r4, #4]
   1eb76:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1eb78:	88e3      	ldrh	r3, [r4, #6]
   1eb7a:	80c3      	strh	r3, [r0, #6]
   1eb7c:	2300      	movs	r3, #0
   1eb7e:	9300      	str	r3, [sp, #0]
   1eb80:	4632      	mov	r2, r6
   1eb82:	2105      	movs	r1, #5
   1eb84:	4628      	mov	r0, r5
   1eb86:	f7ff ff77 	bl	1ea78 <bt_l2cap_send_cb>
	if (err) {
   1eb8a:	4604      	mov	r4, r0
   1eb8c:	b910      	cbnz	r0, 1eb94 <bt_l2cap_update_conn_param+0x4c>
}
   1eb8e:	4620      	mov	r0, r4
   1eb90:	b002      	add	sp, #8
   1eb92:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   1eb94:	4630      	mov	r0, r6
   1eb96:	f001 fa49 	bl	2002c <net_buf_unref>
		return err;
   1eb9a:	e7f8      	b.n	1eb8e <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   1eb9c:	f06f 040b 	mvn.w	r4, #11
   1eba0:	e7f5      	b.n	1eb8e <bt_l2cap_update_conn_param+0x46>

0001eba2 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1eba2:	4770      	bx	lr

0001eba4 <att_sent>:
{
   1eba4:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   1eba6:	684b      	ldr	r3, [r1, #4]
   1eba8:	695b      	ldr	r3, [r3, #20]
   1ebaa:	b10b      	cbz	r3, 1ebb0 <att_sent+0xc>
   1ebac:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   1ebae:	4798      	blx	r3
}
   1ebb0:	bd08      	pop	{r3, pc}

0001ebb2 <range_is_valid>:
	if (!start || !end) {
   1ebb2:	b120      	cbz	r0, 1ebbe <range_is_valid+0xc>
   1ebb4:	b119      	cbz	r1, 1ebbe <range_is_valid+0xc>
	if (start > end) {
   1ebb6:	4288      	cmp	r0, r1
   1ebb8:	d806      	bhi.n	1ebc8 <range_is_valid+0x16>
	return true;
   1ebba:	2001      	movs	r0, #1
}
   1ebbc:	4770      	bx	lr
		if (err) {
   1ebbe:	b10a      	cbz	r2, 1ebc4 <range_is_valid+0x12>
			*err = 0U;
   1ebc0:	2300      	movs	r3, #0
   1ebc2:	8013      	strh	r3, [r2, #0]
		return false;
   1ebc4:	2000      	movs	r0, #0
   1ebc6:	4770      	bx	lr
		if (err) {
   1ebc8:	b102      	cbz	r2, 1ebcc <range_is_valid+0x1a>
			*err = start;
   1ebca:	8010      	strh	r0, [r2, #0]
		return false;
   1ebcc:	2000      	movs	r0, #0
   1ebce:	4770      	bx	lr

0001ebd0 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   1ebd0:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1ebd4:	d201      	bcs.n	1ebda <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   1ebd6:	200e      	movs	r0, #14
}
   1ebd8:	4770      	bx	lr
		return -err;
   1ebda:	4240      	negs	r0, r0
   1ebdc:	b2c0      	uxtb	r0, r0
   1ebde:	4770      	bx	lr

0001ebe0 <attr_read_type_cb>:
{
   1ebe0:	b410      	push	{r4}
	if (!data->rsp->len) {
   1ebe2:	68d4      	ldr	r4, [r2, #12]
   1ebe4:	7823      	ldrb	r3, [r4, #0]
   1ebe6:	b923      	cbnz	r3, 1ebf2 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   1ebe8:	3102      	adds	r1, #2
   1ebea:	7021      	strb	r1, [r4, #0]
	return true;
   1ebec:	2001      	movs	r0, #1
}
   1ebee:	bc10      	pop	{r4}
   1ebf0:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ebf2:	3102      	adds	r1, #2
   1ebf4:	428b      	cmp	r3, r1
   1ebf6:	d005      	beq.n	1ec04 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   1ebf8:	8983      	ldrh	r3, [r0, #12]
   1ebfa:	3b02      	subs	r3, #2
   1ebfc:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ebfe:	2000      	movs	r0, #0
   1ec00:	6110      	str	r0, [r2, #16]
		return false;
   1ec02:	e7f4      	b.n	1ebee <attr_read_type_cb+0xe>
	return true;
   1ec04:	2001      	movs	r0, #1
   1ec06:	e7f2      	b.n	1ebee <attr_read_type_cb+0xe>

0001ec08 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ec08:	68d0      	ldr	r0, [r2, #12]
   1ec0a:	7803      	ldrb	r3, [r0, #0]
   1ec0c:	b91b      	cbnz	r3, 1ec16 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ec0e:	3104      	adds	r1, #4
   1ec10:	7001      	strb	r1, [r0, #0]
	return true;
   1ec12:	2001      	movs	r0, #1
   1ec14:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ec16:	3104      	adds	r1, #4
   1ec18:	428b      	cmp	r3, r1
   1ec1a:	d006      	beq.n	1ec2a <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   1ec1c:	6891      	ldr	r1, [r2, #8]
   1ec1e:	898b      	ldrh	r3, [r1, #12]
   1ec20:	3b04      	subs	r3, #4
   1ec22:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1ec24:	2000      	movs	r0, #0
   1ec26:	6110      	str	r0, [r2, #16]
		return false;
   1ec28:	4770      	bx	lr
	return true;
   1ec2a:	2001      	movs	r0, #1
}
   1ec2c:	4770      	bx	lr

0001ec2e <att_prepare_write_req>:
}
   1ec2e:	2006      	movs	r0, #6
   1ec30:	4770      	bx	lr

0001ec32 <att_exec_write_req>:
}
   1ec32:	2006      	movs	r0, #6
   1ec34:	4770      	bx	lr

0001ec36 <att_op_get_type>:
	switch (op) {
   1ec36:	1e43      	subs	r3, r0, #1
   1ec38:	2bd1      	cmp	r3, #209	; 0xd1
   1ec3a:	d874      	bhi.n	1ed26 <att_op_get_type+0xf0>
   1ec3c:	e8df f003 	tbb	[pc, r3]
   1ec40:	696d696d 	.word	0x696d696d
   1ec44:	696d696d 	.word	0x696d696d
   1ec48:	696d696d 	.word	0x696d696d
   1ec4c:	696d696d 	.word	0x696d696d
   1ec50:	736d696d 	.word	0x736d696d
   1ec54:	696d6973 	.word	0x696d6973
   1ec58:	736f736d 	.word	0x736f736d
   1ec5c:	73737871 	.word	0x73737871
   1ec60:	73737373 	.word	0x73737373
   1ec64:	73737373 	.word	0x73737373
   1ec68:	73737373 	.word	0x73737373
   1ec6c:	73737373 	.word	0x73737373
   1ec70:	73737373 	.word	0x73737373
   1ec74:	73737373 	.word	0x73737373
   1ec78:	73737373 	.word	0x73737373
   1ec7c:	73737373 	.word	0x73737373
   1ec80:	73737373 	.word	0x73737373
   1ec84:	73737373 	.word	0x73737373
   1ec88:	73737373 	.word	0x73737373
   1ec8c:	73737373 	.word	0x73737373
   1ec90:	73736b73 	.word	0x73736b73
   1ec94:	73737373 	.word	0x73737373
   1ec98:	73737373 	.word	0x73737373
   1ec9c:	73737373 	.word	0x73737373
   1eca0:	73737373 	.word	0x73737373
   1eca4:	73737373 	.word	0x73737373
   1eca8:	73737373 	.word	0x73737373
   1ecac:	73737373 	.word	0x73737373
   1ecb0:	73737373 	.word	0x73737373
   1ecb4:	73737373 	.word	0x73737373
   1ecb8:	73737373 	.word	0x73737373
   1ecbc:	73737373 	.word	0x73737373
   1ecc0:	73737373 	.word	0x73737373
   1ecc4:	73737373 	.word	0x73737373
   1ecc8:	73737373 	.word	0x73737373
   1eccc:	73737373 	.word	0x73737373
   1ecd0:	73737373 	.word	0x73737373
   1ecd4:	73737373 	.word	0x73737373
   1ecd8:	73737373 	.word	0x73737373
   1ecdc:	73737373 	.word	0x73737373
   1ece0:	73737373 	.word	0x73737373
   1ece4:	73737373 	.word	0x73737373
   1ece8:	73737373 	.word	0x73737373
   1ecec:	73737373 	.word	0x73737373
   1ecf0:	73737373 	.word	0x73737373
   1ecf4:	73737373 	.word	0x73737373
   1ecf8:	73737373 	.word	0x73737373
   1ecfc:	73737373 	.word	0x73737373
   1ed00:	73737373 	.word	0x73737373
   1ed04:	73737373 	.word	0x73737373
   1ed08:	73737373 	.word	0x73737373
   1ed0c:	73737373 	.word	0x73737373
   1ed10:	6b73      	.short	0x6b73
{
   1ed12:	2001      	movs	r0, #1
   1ed14:	4770      	bx	lr
		return ATT_COMMAND;
   1ed16:	2000      	movs	r0, #0
   1ed18:	4770      	bx	lr
		return ATT_RESPONSE;
   1ed1a:	2002      	movs	r0, #2
   1ed1c:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ed1e:	2003      	movs	r0, #3
   1ed20:	4770      	bx	lr
		return ATT_INDICATION;
   1ed22:	2005      	movs	r0, #5
   1ed24:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   1ed26:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ed2a:	d103      	bne.n	1ed34 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   1ed2c:	2006      	movs	r0, #6
   1ed2e:	4770      	bx	lr
		return ATT_CONFIRMATION;
   1ed30:	2004      	movs	r0, #4
   1ed32:	4770      	bx	lr
		return ATT_COMMAND;
   1ed34:	2000      	movs	r0, #0
}
   1ed36:	4770      	bx	lr

0001ed38 <att_chan_attach>:
{
   1ed38:	b538      	push	{r3, r4, r5, lr}
   1ed3a:	4604      	mov	r4, r0
   1ed3c:	460d      	mov	r5, r1
	return list->head;
   1ed3e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   1ed40:	b143      	cbz	r3, 1ed54 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   1ed42:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   1ed46:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   1ed48:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   1ed4c:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   1ed4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1ed50:	b122      	cbz	r2, 1ed5c <att_chan_attach+0x24>
}
   1ed52:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   1ed54:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   1ed56:	f002 fab9 	bl	212cc <z_impl_k_queue_init>
}
   1ed5a:	e7f2      	b.n	1ed42 <att_chan_attach+0xa>
	list->tail = node;
   1ed5c:	62a3      	str	r3, [r4, #40]	; 0x28
}
   1ed5e:	e7f8      	b.n	1ed52 <att_chan_attach+0x1a>

0001ed60 <chan_req_send>:
{
   1ed60:	b538      	push	{r3, r4, r5, lr}
   1ed62:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ed64:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1ed68:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   1ed6a:	2200      	movs	r2, #0
	while (buf) {
   1ed6c:	b11b      	cbz	r3, 1ed76 <chan_req_send+0x16>
		bytes += buf->len;
   1ed6e:	899c      	ldrh	r4, [r3, #12]
   1ed70:	4422      	add	r2, r4
		buf = buf->frags;
   1ed72:	681b      	ldr	r3, [r3, #0]
   1ed74:	e7fa      	b.n	1ed6c <chan_req_send+0xc>
   1ed76:	4291      	cmp	r1, r2
   1ed78:	d30a      	bcc.n	1ed90 <chan_req_send+0x30>
	chan->req = req;
   1ed7a:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
	buf = req->buf;
   1ed7e:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   1ed80:	2200      	movs	r2, #0
   1ed82:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   1ed84:	4621      	mov	r1, r4
   1ed86:	f7f7 fed3 	bl	16b30 <chan_send>
	if (err) {
   1ed8a:	b100      	cbz	r0, 1ed8e <chan_req_send+0x2e>
		req->buf = buf;
   1ed8c:	60ac      	str	r4, [r5, #8]
}
   1ed8e:	bd38      	pop	{r3, r4, r5, pc}
		return -EMSGSIZE;
   1ed90:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1ed94:	e7fb      	b.n	1ed8e <chan_req_send+0x2e>

0001ed96 <bt_att_chan_req_send>:
{
   1ed96:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   1ed98:	f7ff ffe2 	bl	1ed60 <chan_req_send>
}
   1ed9c:	bd08      	pop	{r3, pc}

0001ed9e <bt_att_status>:
{
   1ed9e:	b538      	push	{r3, r4, r5, lr}
   1eda0:	f3bf 8f5b 	dmb	ish
   1eda4:	680b      	ldr	r3, [r1, #0]
   1eda6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1edaa:	f013 0f01 	tst.w	r3, #1
   1edae:	d007      	beq.n	1edc0 <bt_att_status+0x22>
   1edb0:	4604      	mov	r4, r0
   1edb2:	3808      	subs	r0, #8
	if (!chan->att) {
   1edb4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1edb8:	b113      	cbz	r3, 1edc0 <bt_att_status+0x22>
	if (chan->req) {
   1edba:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   1edbe:	b102      	cbz	r2, 1edc2 <bt_att_status+0x24>
}
   1edc0:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   1edc2:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1edc4:	2d00      	cmp	r5, #0
   1edc6:	d0fb      	beq.n	1edc0 <bt_att_status+0x22>
	return node->next;
   1edc8:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1edca:	605a      	str	r2, [r3, #4]
	return list->tail;
   1edcc:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1edce:	42a9      	cmp	r1, r5
   1edd0:	d00e      	beq.n	1edf0 <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1edd2:	4629      	mov	r1, r5
   1edd4:	f7ff ffdf 	bl	1ed96 <bt_att_chan_req_send>
   1edd8:	2800      	cmp	r0, #0
   1edda:	daf1      	bge.n	1edc0 <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   1eddc:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   1ede0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ede2:	602a      	str	r2, [r5, #0]
	list->head = node;
   1ede4:	605d      	str	r5, [r3, #4]
	return list->tail;
   1ede6:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   1ede8:	2a00      	cmp	r2, #0
   1edea:	d1e9      	bne.n	1edc0 <bt_att_status+0x22>
	list->tail = node;
   1edec:	609d      	str	r5, [r3, #8]
}
   1edee:	e7e7      	b.n	1edc0 <bt_att_status+0x22>
	list->tail = node;
   1edf0:	609a      	str	r2, [r3, #8]
}
   1edf2:	e7ee      	b.n	1edd2 <bt_att_status+0x34>

0001edf4 <att_req_send_process>:
{
   1edf4:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   1edf6:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   1edf8:	2e00      	cmp	r6, #0
   1edfa:	d038      	beq.n	1ee6e <att_req_send_process+0x7a>
   1edfc:	4605      	mov	r5, r0
	return node->next;
   1edfe:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   1ee00:	6043      	str	r3, [r0, #4]
	return list->tail;
   1ee02:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ee04:	4296      	cmp	r6, r2
   1ee06:	d00d      	beq.n	1ee24 <att_req_send_process+0x30>
	return list->head;
   1ee08:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee0a:	b198      	cbz	r0, 1ee34 <att_req_send_process+0x40>
   1ee0c:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   1ee10:	d012      	beq.n	1ee38 <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee12:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   1ee16:	d014      	beq.n	1ee42 <att_req_send_process+0x4e>
	return node->next;
   1ee18:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   1ee1c:	b18c      	cbz	r4, 1ee42 <att_req_send_process+0x4e>
   1ee1e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   1ee22:	e00e      	b.n	1ee42 <att_req_send_process+0x4e>
	list->tail = node;
   1ee24:	6083      	str	r3, [r0, #8]
}
   1ee26:	e7ef      	b.n	1ee08 <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ee28:	4631      	mov	r1, r6
   1ee2a:	f7ff ffb4 	bl	1ed96 <bt_att_chan_req_send>
   1ee2e:	2800      	cmp	r0, #0
   1ee30:	db0c      	blt.n	1ee4c <att_req_send_process+0x58>
   1ee32:	e01c      	b.n	1ee6e <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee34:	4604      	mov	r4, r0
   1ee36:	e004      	b.n	1ee42 <att_req_send_process+0x4e>
   1ee38:	4604      	mov	r4, r0
   1ee3a:	e002      	b.n	1ee42 <att_req_send_process+0x4e>
   1ee3c:	4623      	mov	r3, r4
   1ee3e:	4620      	mov	r0, r4
   1ee40:	461c      	mov	r4, r3
   1ee42:	b178      	cbz	r0, 1ee64 <att_req_send_process+0x70>
		if (!chan->req) {
   1ee44:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ee48:	2b00      	cmp	r3, #0
   1ee4a:	d0ed      	beq.n	1ee28 <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee4c:	2c00      	cmp	r4, #0
   1ee4e:	d0f5      	beq.n	1ee3c <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee50:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1ee54:	d0f3      	beq.n	1ee3e <att_req_send_process+0x4a>
	return node->next;
   1ee56:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1ee5a:	2b00      	cmp	r3, #0
   1ee5c:	d0ef      	beq.n	1ee3e <att_req_send_process+0x4a>
   1ee5e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1ee62:	e7ec      	b.n	1ee3e <att_req_send_process+0x4a>
	return list->head;
   1ee64:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1ee66:	6033      	str	r3, [r6, #0]
	list->head = node;
   1ee68:	606e      	str	r6, [r5, #4]
	return list->tail;
   1ee6a:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   1ee6c:	b103      	cbz	r3, 1ee70 <att_req_send_process+0x7c>
}
   1ee6e:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   1ee70:	60ae      	str	r6, [r5, #8]
}
   1ee72:	e7fc      	b.n	1ee6e <att_req_send_process+0x7a>

0001ee74 <bt_att_chan_send>:
{
   1ee74:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   1ee76:	f7f7 fe5b 	bl	16b30 <chan_send>
}
   1ee7a:	bd08      	pop	{r3, pc}

0001ee7c <chan_req_sent>:
{
   1ee7c:	b508      	push	{r3, lr}
	if (chan->req) {
   1ee7e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ee82:	b133      	cbz	r3, 1ee92 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1ee84:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1ee88:	2300      	movs	r3, #0
   1ee8a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1ee8e:	f7fc fafd 	bl	1b48c <k_work_reschedule>
}
   1ee92:	bd08      	pop	{r3, pc}

0001ee94 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   1ee94:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ee96:	f3bf 8f5b 	dmb	ish
   1ee9a:	e850 3f00 	ldrex	r3, [r0]
   1ee9e:	f023 0302 	bic.w	r3, r3, #2
   1eea2:	e840 3200 	strex	r2, r3, [r0]
   1eea6:	2a00      	cmp	r2, #0
   1eea8:	d1f7      	bne.n	1ee9a <chan_cfm_sent+0x6>
   1eeaa:	f3bf 8f5b 	dmb	ish
}
   1eeae:	4770      	bx	lr

0001eeb0 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   1eeb0:	30f0      	adds	r0, #240	; 0xf0
   1eeb2:	f3bf 8f5b 	dmb	ish
   1eeb6:	e850 3f00 	ldrex	r3, [r0]
   1eeba:	f023 0301 	bic.w	r3, r3, #1
   1eebe:	e840 3200 	strex	r2, r3, [r0]
   1eec2:	2a00      	cmp	r2, #0
   1eec4:	d1f7      	bne.n	1eeb6 <chan_rsp_sent+0x6>
   1eec6:	f3bf 8f5b 	dmb	ish
}
   1eeca:	4770      	bx	lr

0001eecc <process_queue>:
{
   1eecc:	b570      	push	{r4, r5, r6, lr}
   1eece:	4605      	mov	r5, r0
   1eed0:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1eed2:	2200      	movs	r2, #0
   1eed4:	2300      	movs	r3, #0
   1eed6:	4608      	mov	r0, r1
   1eed8:	f001 f87c 	bl	1ffd4 <net_buf_get>
	if (buf) {
   1eedc:	b170      	cbz	r0, 1eefc <process_queue+0x30>
   1eede:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   1eee0:	2200      	movs	r2, #0
   1eee2:	4601      	mov	r1, r0
   1eee4:	4628      	mov	r0, r5
   1eee6:	f7f7 fe23 	bl	16b30 <chan_send>
		if (err) {
   1eeea:	4605      	mov	r5, r0
   1eeec:	b908      	cbnz	r0, 1eef2 <process_queue+0x26>
}
   1eeee:	4628      	mov	r0, r5
   1eef0:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   1eef2:	4631      	mov	r1, r6
   1eef4:	4620      	mov	r0, r4
   1eef6:	f002 fa01 	bl	212fc <k_queue_prepend>
			return err;
   1eefa:	e7f8      	b.n	1eeee <process_queue+0x22>
	return -ENOENT;
   1eefc:	f06f 0501 	mvn.w	r5, #1
   1ef00:	e7f5      	b.n	1eeee <process_queue+0x22>

0001ef02 <bt_att_sent>:
{
   1ef02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef04:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ef06:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   1ef0a:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   1ef0e:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   1ef12:	b10b      	cbz	r3, 1ef18 <bt_att_sent+0x16>
		chan->sent(chan);
   1ef14:	4630      	mov	r0, r6
   1ef16:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   1ef18:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   1ef1c:	f3bf 8f5b 	dmb	ish
   1ef20:	e853 2f00 	ldrex	r2, [r3]
   1ef24:	f022 0210 	bic.w	r2, r2, #16
   1ef28:	e843 2100 	strex	r1, r2, [r3]
   1ef2c:	2900      	cmp	r1, #0
   1ef2e:	d1f7      	bne.n	1ef20 <bt_att_sent+0x1e>
   1ef30:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1ef34:	b145      	cbz	r5, 1ef48 <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1ef36:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   1ef3a:	b133      	cbz	r3, 1ef4a <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   1ef3c:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   1ef40:	4630      	mov	r0, r6
   1ef42:	f7ff ffc3 	bl	1eecc <process_queue>
	if (!err) {
   1ef46:	b9c0      	cbnz	r0, 1ef7a <bt_att_sent+0x78>
}
   1ef48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   1ef4a:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1ef4c:	2f00      	cmp	r7, #0
   1ef4e:	d0f5      	beq.n	1ef3c <bt_att_sent+0x3a>
	return node->next;
   1ef50:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   1ef52:	606b      	str	r3, [r5, #4]
	return list->tail;
   1ef54:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ef56:	42ba      	cmp	r2, r7
   1ef58:	d00d      	beq.n	1ef76 <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ef5a:	4639      	mov	r1, r7
   1ef5c:	4630      	mov	r0, r6
   1ef5e:	f7ff feff 	bl	1ed60 <chan_req_send>
   1ef62:	2800      	cmp	r0, #0
   1ef64:	daf0      	bge.n	1ef48 <bt_att_sent+0x46>
	return list->head;
   1ef66:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1ef68:	603b      	str	r3, [r7, #0]
	list->head = node;
   1ef6a:	606f      	str	r7, [r5, #4]
	return list->tail;
   1ef6c:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   1ef6e:	2b00      	cmp	r3, #0
   1ef70:	d1e4      	bne.n	1ef3c <bt_att_sent+0x3a>
	list->tail = node;
   1ef72:	60af      	str	r7, [r5, #8]
}
   1ef74:	e7e2      	b.n	1ef3c <bt_att_sent+0x3a>
	list->tail = node;
   1ef76:	60ab      	str	r3, [r5, #8]
}
   1ef78:	e7ef      	b.n	1ef5a <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   1ef7a:	f105 010c 	add.w	r1, r5, #12
   1ef7e:	4630      	mov	r0, r6
   1ef80:	f7ff ffa4 	bl	1eecc <process_queue>
   1ef84:	e7e0      	b.n	1ef48 <bt_att_sent+0x46>

0001ef86 <att_send_process>:
{
   1ef86:	b570      	push	{r4, r5, r6, lr}
   1ef88:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1ef8a:	2200      	movs	r2, #0
   1ef8c:	2300      	movs	r3, #0
   1ef8e:	300c      	adds	r0, #12
   1ef90:	f001 f820 	bl	1ffd4 <net_buf_get>
	if (!buf) {
   1ef94:	b360      	cbz	r0, 1eff0 <att_send_process+0x6a>
   1ef96:	4605      	mov	r5, r0
	return list->head;
   1ef98:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ef9a:	b158      	cbz	r0, 1efb4 <att_send_process+0x2e>
   1ef9c:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   1efa0:	d00c      	beq.n	1efbc <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1efa2:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   1efa6:	d006      	beq.n	1efb6 <att_send_process+0x30>
	return node->next;
   1efa8:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   1efac:	b11c      	cbz	r4, 1efb6 <att_send_process+0x30>
   1efae:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   1efb2:	e000      	b.n	1efb6 <att_send_process+0x30>
   1efb4:	4604      	mov	r4, r0
   1efb6:	f06f 0301 	mvn.w	r3, #1
   1efba:	e004      	b.n	1efc6 <att_send_process+0x40>
   1efbc:	4604      	mov	r4, r0
   1efbe:	e7fa      	b.n	1efb6 <att_send_process+0x30>
   1efc0:	4622      	mov	r2, r4
   1efc2:	4620      	mov	r0, r4
   1efc4:	4614      	mov	r4, r2
   1efc6:	b188      	cbz	r0, 1efec <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   1efc8:	2200      	movs	r2, #0
   1efca:	4629      	mov	r1, r5
   1efcc:	f7ff ff52 	bl	1ee74 <bt_att_chan_send>
		if (err >= 0) {
   1efd0:	1e03      	subs	r3, r0, #0
   1efd2:	da0b      	bge.n	1efec <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1efd4:	2c00      	cmp	r4, #0
   1efd6:	d0f3      	beq.n	1efc0 <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1efd8:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   1efdc:	d0f1      	beq.n	1efc2 <att_send_process+0x3c>
	return node->next;
   1efde:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   1efe2:	2a00      	cmp	r2, #0
   1efe4:	d0ed      	beq.n	1efc2 <att_send_process+0x3c>
   1efe6:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   1efea:	e7ea      	b.n	1efc2 <att_send_process+0x3c>
	if (err < 0) {
   1efec:	2b00      	cmp	r3, #0
   1efee:	db00      	blt.n	1eff2 <att_send_process+0x6c>
}
   1eff0:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   1eff2:	4629      	mov	r1, r5
   1eff4:	f106 000c 	add.w	r0, r6, #12
   1eff8:	f002 f980 	bl	212fc <k_queue_prepend>
   1effc:	e7f8      	b.n	1eff0 <att_send_process+0x6a>

0001effe <write_cb>:
{
   1effe:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f000:	b083      	sub	sp, #12
   1f002:	4606      	mov	r6, r0
   1f004:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f006:	222a      	movs	r2, #42	; 0x2a
   1f008:	4601      	mov	r1, r0
   1f00a:	6820      	ldr	r0, [r4, #0]
   1f00c:	f000 fe6d 	bl	1fcea <bt_gatt_check_perm>
   1f010:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f012:	b9e8      	cbnz	r0, 1f050 <write_cb+0x52>
   1f014:	4605      	mov	r5, r0
	if (!data->req) {
   1f016:	7a23      	ldrb	r3, [r4, #8]
   1f018:	b1a3      	cbz	r3, 1f044 <write_cb+0x46>
	uint8_t flags = 0U;
   1f01a:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
   1f01c:	68b7      	ldr	r7, [r6, #8]
   1f01e:	9301      	str	r3, [sp, #4]
   1f020:	8a63      	ldrh	r3, [r4, #18]
   1f022:	9300      	str	r3, [sp, #0]
   1f024:	8a23      	ldrh	r3, [r4, #16]
   1f026:	68e2      	ldr	r2, [r4, #12]
   1f028:	4631      	mov	r1, r6
   1f02a:	6820      	ldr	r0, [r4, #0]
   1f02c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f02e:	2800      	cmp	r0, #0
   1f030:	db02      	blt.n	1f038 <write_cb+0x3a>
   1f032:	8a23      	ldrh	r3, [r4, #16]
   1f034:	4298      	cmp	r0, r3
   1f036:	d007      	beq.n	1f048 <write_cb+0x4a>
		data->err = err_to_att(write);
   1f038:	f7ff fdca 	bl	1ebd0 <err_to_att>
   1f03c:	7520      	strb	r0, [r4, #20]
}
   1f03e:	4628      	mov	r0, r5
   1f040:	b003      	add	sp, #12
   1f042:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f044:	2302      	movs	r3, #2
   1f046:	e7e9      	b.n	1f01c <write_cb+0x1e>
	data->err = 0U;
   1f048:	2300      	movs	r3, #0
   1f04a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f04c:	2501      	movs	r5, #1
   1f04e:	e7f6      	b.n	1f03e <write_cb+0x40>
		return BT_GATT_ITER_STOP;
   1f050:	2500      	movs	r5, #0
   1f052:	e7f4      	b.n	1f03e <write_cb+0x40>

0001f054 <bt_att_chan_send_rsp>:
{
   1f054:	b538      	push	{r3, r4, r5, lr}
   1f056:	4604      	mov	r4, r0
   1f058:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1f05a:	f7ff ff0b 	bl	1ee74 <bt_att_chan_send>
	if (err) {
   1f05e:	b900      	cbnz	r0, 1f062 <bt_att_chan_send_rsp+0xe>
}
   1f060:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   1f062:	4629      	mov	r1, r5
   1f064:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f068:	f000 ffd3 	bl	20012 <net_buf_put>
}
   1f06c:	e7f8      	b.n	1f060 <bt_att_chan_send_rsp+0xc>

0001f06e <att_chan_read>:
{
   1f06e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f072:	b085      	sub	sp, #20
   1f074:	4680      	mov	r8, r0
   1f076:	4689      	mov	r9, r1
   1f078:	9202      	str	r2, [sp, #8]
   1f07a:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1f07c:	6881      	ldr	r1, [r0, #8]
   1f07e:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f080:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   1f084:	4613      	mov	r3, r2
	size_t bytes = 0;
   1f086:	2200      	movs	r2, #0
	while (buf) {
   1f088:	b11b      	cbz	r3, 1f092 <att_chan_read+0x24>
		bytes += buf->len;
   1f08a:	8999      	ldrh	r1, [r3, #12]
   1f08c:	440a      	add	r2, r1
		buf = buf->frags;
   1f08e:	681b      	ldr	r3, [r3, #0]
   1f090:	e7fa      	b.n	1f088 <att_chan_read+0x1a>
   1f092:	4290      	cmp	r0, r2
   1f094:	d804      	bhi.n	1f0a0 <att_chan_read+0x32>
		return 0;
   1f096:	2400      	movs	r4, #0
}
   1f098:	4620      	mov	r0, r4
   1f09a:	b005      	add	sp, #20
   1f09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   1f0a0:	9802      	ldr	r0, [sp, #8]
   1f0a2:	f000 ffed 	bl	20080 <net_buf_frag_last>
   1f0a6:	4607      	mov	r7, r0
	size_t len, total = 0;
   1f0a8:	f04f 0a00 	mov.w	sl, #0
   1f0ac:	e083      	b.n	1f1b6 <att_chan_read+0x148>
		bytes += buf->len;
   1f0ae:	8999      	ldrh	r1, [r3, #12]
   1f0b0:	440a      	add	r2, r1
		buf = buf->frags;
   1f0b2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f0b4:	2b00      	cmp	r3, #0
   1f0b6:	d1fa      	bne.n	1f0ae <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f0b8:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   1f0ba:	f107 0608 	add.w	r6, r7, #8
   1f0be:	4630      	mov	r0, r6
   1f0c0:	f001 f83a 	bl	20138 <net_buf_simple_tailroom>
   1f0c4:	4284      	cmp	r4, r0
   1f0c6:	d32c      	bcc.n	1f122 <att_chan_read+0xb4>
   1f0c8:	4630      	mov	r0, r6
   1f0ca:	f001 f835 	bl	20138 <net_buf_simple_tailroom>
   1f0ce:	4606      	mov	r6, r0
		if (!len) {
   1f0d0:	2e00      	cmp	r6, #0
   1f0d2:	d032      	beq.n	1f13a <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1f0d4:	f8d9 4004 	ldr.w	r4, [r9, #4]
   1f0d8:	68b9      	ldr	r1, [r7, #8]
   1f0da:	89ba      	ldrh	r2, [r7, #12]
   1f0dc:	9500      	str	r5, [sp, #0]
   1f0de:	b2b3      	uxth	r3, r6
   1f0e0:	440a      	add	r2, r1
   1f0e2:	4649      	mov	r1, r9
   1f0e4:	9803      	ldr	r0, [sp, #12]
   1f0e6:	47a0      	blx	r4
		if (read < 0) {
   1f0e8:	1e04      	subs	r4, r0, #0
   1f0ea:	db5a      	blt.n	1f1a2 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   1f0ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f0ee:	b12b      	cbz	r3, 1f0fc <att_chan_read+0x8e>
   1f0f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f0f2:	4621      	mov	r1, r4
   1f0f4:	4638      	mov	r0, r7
   1f0f6:	4798      	blx	r3
   1f0f8:	2800      	cmp	r0, #0
   1f0fa:	d061      	beq.n	1f1c0 <att_chan_read+0x152>
		net_buf_add(frag, read);
   1f0fc:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   1f0fe:	4621      	mov	r1, r4
   1f100:	f107 0008 	add.w	r0, r7, #8
   1f104:	f000 ffdc 	bl	200c0 <net_buf_simple_add>
		total += read;
   1f108:	44a2      	add	sl, r4
		offset += read;
   1f10a:	4425      	add	r5, r4
   1f10c:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f10e:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   1f112:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   1f114:	2200      	movs	r2, #0
	while (buf) {
   1f116:	2b00      	cmp	r3, #0
   1f118:	d049      	beq.n	1f1ae <att_chan_read+0x140>
		bytes += buf->len;
   1f11a:	8999      	ldrh	r1, [r3, #12]
   1f11c:	440a      	add	r2, r1
		buf = buf->frags;
   1f11e:	681b      	ldr	r3, [r3, #0]
   1f120:	e7f9      	b.n	1f116 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f122:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   1f126:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   1f128:	2200      	movs	r2, #0
	while (buf) {
   1f12a:	e002      	b.n	1f132 <att_chan_read+0xc4>
		bytes += buf->len;
   1f12c:	8999      	ldrh	r1, [r3, #12]
   1f12e:	440a      	add	r2, r1
		buf = buf->frags;
   1f130:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f132:	2b00      	cmp	r3, #0
   1f134:	d1fa      	bne.n	1f12c <att_chan_read+0xbe>
   1f136:	1ab6      	subs	r6, r6, r2
   1f138:	e7ca      	b.n	1f0d0 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1f13a:	9b02      	ldr	r3, [sp, #8]
   1f13c:	7998      	ldrb	r0, [r3, #6]
   1f13e:	f7f9 fb39 	bl	187b4 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1f142:	2200      	movs	r2, #0
   1f144:	2300      	movs	r3, #0
   1f146:	f000 ff3e 	bl	1ffc6 <net_buf_alloc_fixed>
			if (!frag) {
   1f14a:	4607      	mov	r7, r0
   1f14c:	b150      	cbz	r0, 1f164 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   1f14e:	4601      	mov	r1, r0
   1f150:	f8dd b008 	ldr.w	fp, [sp, #8]
   1f154:	4658      	mov	r0, fp
   1f156:	f000 ffa4 	bl	200a2 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f15a:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   1f15e:	4632      	mov	r2, r6
	while (buf) {
   1f160:	465b      	mov	r3, fp
   1f162:	e004      	b.n	1f16e <att_chan_read+0x100>
				return total;
   1f164:	4654      	mov	r4, sl
   1f166:	e797      	b.n	1f098 <att_chan_read+0x2a>
		bytes += buf->len;
   1f168:	8999      	ldrh	r1, [r3, #12]
   1f16a:	440a      	add	r2, r1
		buf = buf->frags;
   1f16c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f16e:	2b00      	cmp	r3, #0
   1f170:	d1fa      	bne.n	1f168 <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f172:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   1f174:	f107 0b08 	add.w	fp, r7, #8
   1f178:	4658      	mov	r0, fp
   1f17a:	f000 ffdd 	bl	20138 <net_buf_simple_tailroom>
   1f17e:	4284      	cmp	r4, r0
   1f180:	d304      	bcc.n	1f18c <att_chan_read+0x11e>
   1f182:	4658      	mov	r0, fp
   1f184:	f000 ffd8 	bl	20138 <net_buf_simple_tailroom>
   1f188:	4606      	mov	r6, r0
   1f18a:	e7a3      	b.n	1f0d4 <att_chan_read+0x66>
   1f18c:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   1f190:	9b02      	ldr	r3, [sp, #8]
   1f192:	e002      	b.n	1f19a <att_chan_read+0x12c>
		bytes += buf->len;
   1f194:	899a      	ldrh	r2, [r3, #12]
   1f196:	4416      	add	r6, r2
		buf = buf->frags;
   1f198:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f19a:	2b00      	cmp	r3, #0
   1f19c:	d1fa      	bne.n	1f194 <att_chan_read+0x126>
   1f19e:	1b8e      	subs	r6, r1, r6
   1f1a0:	e798      	b.n	1f0d4 <att_chan_read+0x66>
			if (total) {
   1f1a2:	f1ba 0f00 	cmp.w	sl, #0
   1f1a6:	f43f af77 	beq.w	1f098 <att_chan_read+0x2a>
				return total;
   1f1aa:	4654      	mov	r4, sl
   1f1ac:	e774      	b.n	1f098 <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f1ae:	4290      	cmp	r0, r2
   1f1b0:	d906      	bls.n	1f1c0 <att_chan_read+0x152>
   1f1b2:	45b3      	cmp	fp, r6
   1f1b4:	d104      	bne.n	1f1c0 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f1b6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   1f1ba:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   1f1bc:	2200      	movs	r2, #0
	while (buf) {
   1f1be:	e779      	b.n	1f0b4 <att_chan_read+0x46>
	return total;
   1f1c0:	4654      	mov	r4, sl
   1f1c2:	e769      	b.n	1f098 <att_chan_read+0x2a>

0001f1c4 <read_cb>:
{
   1f1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f1c6:	b083      	sub	sp, #12
   1f1c8:	4606      	mov	r6, r0
   1f1ca:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1f1cc:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1f1ce:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   1f1d0:	2300      	movs	r3, #0
   1f1d2:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f1d4:	2215      	movs	r2, #21
   1f1d6:	4631      	mov	r1, r6
   1f1d8:	f000 fd87 	bl	1fcea <bt_gatt_check_perm>
   1f1dc:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1f1de:	b118      	cbz	r0, 1f1e8 <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   1f1e0:	2500      	movs	r5, #0
}
   1f1e2:	4628      	mov	r0, r5
   1f1e4:	b003      	add	sp, #12
   1f1e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f1e8:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f1ea:	2300      	movs	r3, #0
   1f1ec:	9301      	str	r3, [sp, #4]
   1f1ee:	9300      	str	r3, [sp, #0]
   1f1f0:	88a3      	ldrh	r3, [r4, #4]
   1f1f2:	68a2      	ldr	r2, [r4, #8]
   1f1f4:	4631      	mov	r1, r6
   1f1f6:	4638      	mov	r0, r7
   1f1f8:	f7ff ff39 	bl	1f06e <att_chan_read>
	if (ret < 0) {
   1f1fc:	2800      	cmp	r0, #0
   1f1fe:	db01      	blt.n	1f204 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   1f200:	2501      	movs	r5, #1
   1f202:	e7ee      	b.n	1f1e2 <read_cb+0x1e>
		data->err = err_to_att(ret);
   1f204:	f7ff fce4 	bl	1ebd0 <err_to_att>
   1f208:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1f20a:	e7ea      	b.n	1f1e2 <read_cb+0x1e>

0001f20c <find_info_cb>:
{
   1f20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f210:	4606      	mov	r6, r0
   1f212:	460f      	mov	r7, r1
   1f214:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1f216:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   1f21a:	6893      	ldr	r3, [r2, #8]
   1f21c:	b14b      	cbz	r3, 1f232 <find_info_cb+0x26>
	switch (data->rsp->format) {
   1f21e:	68a3      	ldr	r3, [r4, #8]
   1f220:	781d      	ldrb	r5, [r3, #0]
   1f222:	2d01      	cmp	r5, #1
   1f224:	d013      	beq.n	1f24e <find_info_cb+0x42>
   1f226:	2d02      	cmp	r5, #2
   1f228:	d02d      	beq.n	1f286 <find_info_cb+0x7a>
   1f22a:	2500      	movs	r5, #0
}
   1f22c:	4628      	mov	r0, r5
   1f22e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f232:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   1f234:	2101      	movs	r1, #1
   1f236:	3008      	adds	r0, #8
   1f238:	f000 ff42 	bl	200c0 <net_buf_simple_add>
   1f23c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f23e:	6833      	ldr	r3, [r6, #0]
   1f240:	781b      	ldrb	r3, [r3, #0]
   1f242:	b913      	cbnz	r3, 1f24a <find_info_cb+0x3e>
   1f244:	2301      	movs	r3, #1
   1f246:	7003      	strb	r3, [r0, #0]
   1f248:	e7e9      	b.n	1f21e <find_info_cb+0x12>
   1f24a:	2302      	movs	r3, #2
   1f24c:	e7fb      	b.n	1f246 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1f24e:	6833      	ldr	r3, [r6, #0]
   1f250:	f893 9000 	ldrb.w	r9, [r3]
   1f254:	f1b9 0f00 	cmp.w	r9, #0
   1f258:	d001      	beq.n	1f25e <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   1f25a:	2500      	movs	r5, #0
   1f25c:	e7e6      	b.n	1f22c <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1f25e:	6860      	ldr	r0, [r4, #4]
   1f260:	2104      	movs	r1, #4
   1f262:	3008      	adds	r0, #8
   1f264:	f000 ff2c 	bl	200c0 <net_buf_simple_add>
   1f268:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1f26a:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1f26c:	6832      	ldr	r2, [r6, #0]
   1f26e:	68e3      	ldr	r3, [r4, #12]
   1f270:	8852      	ldrh	r2, [r2, #2]
   1f272:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1f274:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1f278:	6862      	ldr	r2, [r4, #4]
   1f27a:	8992      	ldrh	r2, [r2, #12]
   1f27c:	1a9b      	subs	r3, r3, r2
   1f27e:	2b04      	cmp	r3, #4
   1f280:	d8d4      	bhi.n	1f22c <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   1f282:	464d      	mov	r5, r9
   1f284:	e7d2      	b.n	1f22c <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1f286:	6833      	ldr	r3, [r6, #0]
   1f288:	781b      	ldrb	r3, [r3, #0]
   1f28a:	2b02      	cmp	r3, #2
   1f28c:	d001      	beq.n	1f292 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   1f28e:	2500      	movs	r5, #0
   1f290:	e7cc      	b.n	1f22c <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1f292:	6860      	ldr	r0, [r4, #4]
   1f294:	2112      	movs	r1, #18
   1f296:	3008      	adds	r0, #8
   1f298:	f000 ff12 	bl	200c0 <net_buf_simple_add>
   1f29c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1f29e:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f2a0:	68e0      	ldr	r0, [r4, #12]
   1f2a2:	6831      	ldr	r1, [r6, #0]
   1f2a4:	2210      	movs	r2, #16
   1f2a6:	3101      	adds	r1, #1
   1f2a8:	3002      	adds	r0, #2
   1f2aa:	f7fe fdbc 	bl	1de26 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1f2ae:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   1f2b2:	6862      	ldr	r2, [r4, #4]
   1f2b4:	8992      	ldrh	r2, [r2, #12]
   1f2b6:	1a9b      	subs	r3, r3, r2
   1f2b8:	2b12      	cmp	r3, #18
   1f2ba:	d801      	bhi.n	1f2c0 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   1f2bc:	2500      	movs	r5, #0
   1f2be:	e7b5      	b.n	1f22c <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   1f2c0:	2501      	movs	r5, #1
   1f2c2:	e7b3      	b.n	1f22c <find_info_cb+0x20>

0001f2c4 <att_chan_mtu_updated>:
{
   1f2c4:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   1f2c6:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1f2c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2ca:	b15c      	cbz	r4, 1f2e4 <att_chan_mtu_updated+0x20>
   1f2cc:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   1f2d0:	d00c      	beq.n	1f2ec <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f2d2:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1f2d6:	d006      	beq.n	1f2e6 <att_chan_mtu_updated+0x22>
	return node->next;
   1f2d8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1f2dc:	b11b      	cbz	r3, 1f2e6 <att_chan_mtu_updated+0x22>
   1f2de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1f2e2:	e000      	b.n	1f2e6 <att_chan_mtu_updated+0x22>
   1f2e4:	4623      	mov	r3, r4
   1f2e6:	2200      	movs	r2, #0
   1f2e8:	4611      	mov	r1, r2
   1f2ea:	e004      	b.n	1f2f6 <att_chan_mtu_updated+0x32>
   1f2ec:	4623      	mov	r3, r4
   1f2ee:	e7fa      	b.n	1f2e6 <att_chan_mtu_updated+0x22>
   1f2f0:	461d      	mov	r5, r3
   1f2f2:	461c      	mov	r4, r3
   1f2f4:	462b      	mov	r3, r5
   1f2f6:	b1bc      	cbz	r4, 1f328 <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   1f2f8:	4284      	cmp	r4, r0
   1f2fa:	d009      	beq.n	1f310 <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1f2fc:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   1f300:	42a9      	cmp	r1, r5
   1f302:	bf38      	it	cc
   1f304:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1f306:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   1f30a:	42a2      	cmp	r2, r4
   1f30c:	bf38      	it	cc
   1f30e:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f310:	2b00      	cmp	r3, #0
   1f312:	d0ed      	beq.n	1f2f0 <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f314:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   1f318:	d0eb      	beq.n	1f2f2 <att_chan_mtu_updated+0x2e>
	return node->next;
   1f31a:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   1f31e:	2d00      	cmp	r5, #0
   1f320:	d0e7      	beq.n	1f2f2 <att_chan_mtu_updated+0x2e>
   1f322:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   1f326:	e7e4      	b.n	1f2f2 <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1f328:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   1f32c:	428b      	cmp	r3, r1
   1f32e:	d803      	bhi.n	1f338 <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1f330:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1f334:	4294      	cmp	r4, r2
   1f336:	d90a      	bls.n	1f34e <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   1f338:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1f33c:	4282      	cmp	r2, r0
   1f33e:	bf38      	it	cc
   1f340:	4602      	movcc	r2, r0
   1f342:	4299      	cmp	r1, r3
   1f344:	bf38      	it	cc
   1f346:	4619      	movcc	r1, r3
   1f348:	6830      	ldr	r0, [r6, #0]
   1f34a:	f7f9 f991 	bl	18670 <bt_gatt_att_max_mtu_changed>
}
   1f34e:	bd70      	pop	{r4, r5, r6, pc}

0001f350 <att_get_fixed_chan>:
{
   1f350:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1f352:	2104      	movs	r1, #4
   1f354:	f7ff fbd2 	bl	1eafc <bt_l2cap_le_lookup_tx_cid>
}
   1f358:	3808      	subs	r0, #8
   1f35a:	bd08      	pop	{r3, pc}

0001f35c <att_write_cmd>:
{
   1f35c:	b530      	push	{r4, r5, lr}
   1f35e:	b085      	sub	sp, #20
   1f360:	4605      	mov	r5, r0
   1f362:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   1f364:	f101 0008 	add.w	r0, r1, #8
   1f368:	f000 feda 	bl	20120 <net_buf_simple_pull_le16>
   1f36c:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1f36e:	68a2      	ldr	r2, [r4, #8]
   1f370:	89a1      	ldrh	r1, [r4, #12]
   1f372:	9102      	str	r1, [sp, #8]
   1f374:	9201      	str	r2, [sp, #4]
   1f376:	2100      	movs	r1, #0
   1f378:	9100      	str	r1, [sp, #0]
   1f37a:	460a      	mov	r2, r1
   1f37c:	4628      	mov	r0, r5
   1f37e:	f7f7 ff1d 	bl	171bc <att_write_rsp>
}
   1f382:	b005      	add	sp, #20
   1f384:	bd30      	pop	{r4, r5, pc}

0001f386 <att_write_req>:
{
   1f386:	b530      	push	{r4, r5, lr}
   1f388:	b085      	sub	sp, #20
   1f38a:	4605      	mov	r5, r0
   1f38c:	460c      	mov	r4, r1
   1f38e:	f101 0008 	add.w	r0, r1, #8
   1f392:	f000 fec5 	bl	20120 <net_buf_simple_pull_le16>
   1f396:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   1f398:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f39a:	89a1      	ldrh	r1, [r4, #12]
   1f39c:	9102      	str	r1, [sp, #8]
   1f39e:	9201      	str	r2, [sp, #4]
   1f3a0:	2200      	movs	r2, #0
   1f3a2:	9200      	str	r2, [sp, #0]
   1f3a4:	2213      	movs	r2, #19
   1f3a6:	2112      	movs	r1, #18
   1f3a8:	4628      	mov	r0, r5
   1f3aa:	f7f7 ff07 	bl	171bc <att_write_rsp>
}
   1f3ae:	b005      	add	sp, #20
   1f3b0:	bd30      	pop	{r4, r5, pc}

0001f3b2 <att_read_group_req>:
{
   1f3b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f3b4:	b089      	sub	sp, #36	; 0x24
   1f3b6:	4605      	mov	r5, r0
   1f3b8:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   1f3ba:	7b0c      	ldrb	r4, [r1, #12]
   1f3bc:	3c04      	subs	r4, #4
   1f3be:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1f3c0:	2c02      	cmp	r4, #2
   1f3c2:	d001      	beq.n	1f3c8 <att_read_group_req+0x16>
   1f3c4:	2c10      	cmp	r4, #16
   1f3c6:	d142      	bne.n	1f44e <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   1f3c8:	2104      	movs	r1, #4
   1f3ca:	3008      	adds	r0, #8
   1f3cc:	f000 fea0 	bl	20110 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1f3d0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1f3d2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1f3d4:	4622      	mov	r2, r4
   1f3d6:	1d01      	adds	r1, r0, #4
   1f3d8:	a801      	add	r0, sp, #4
   1f3da:	f7fe fdb7 	bl	1df4c <bt_uuid_create>
   1f3de:	b3c8      	cbz	r0, 1f454 <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1f3e0:	f10d 0216 	add.w	r2, sp, #22
   1f3e4:	4639      	mov	r1, r7
   1f3e6:	4630      	mov	r0, r6
   1f3e8:	f7ff fbe3 	bl	1ebb2 <range_is_valid>
   1f3ec:	b1f0      	cbz	r0, 1f42c <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1f3ee:	2300      	movs	r3, #0
   1f3f0:	f88d 3018 	strb.w	r3, [sp, #24]
   1f3f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1f3f8:	f8ad 301a 	strh.w	r3, [sp, #26]
   1f3fc:	a906      	add	r1, sp, #24
   1f3fe:	a801      	add	r0, sp, #4
   1f400:	f7fe fd86 	bl	1df10 <bt_uuid_cmp>
   1f404:	b158      	cbz	r0, 1f41e <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1f406:	2300      	movs	r3, #0
   1f408:	f88d 301c 	strb.w	r3, [sp, #28]
   1f40c:	f642 0301 	movw	r3, #10241	; 0x2801
   1f410:	f8ad 301e 	strh.w	r3, [sp, #30]
   1f414:	a907      	add	r1, sp, #28
   1f416:	a801      	add	r0, sp, #4
   1f418:	f7fe fd7a 	bl	1df10 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1f41c:	b978      	cbnz	r0, 1f43e <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   1f41e:	463b      	mov	r3, r7
   1f420:	4632      	mov	r2, r6
   1f422:	a901      	add	r1, sp, #4
   1f424:	4628      	mov	r0, r5
   1f426:	f7f7 ff7f 	bl	17328 <att_read_group_rsp>
   1f42a:	e011      	b.n	1f450 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   1f42c:	2301      	movs	r3, #1
   1f42e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f432:	2110      	movs	r1, #16
   1f434:	4628      	mov	r0, r5
   1f436:	f7f7 fdcd 	bl	16fd4 <send_err_rsp>
		return 0;
   1f43a:	2000      	movs	r0, #0
   1f43c:	e008      	b.n	1f450 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1f43e:	2310      	movs	r3, #16
   1f440:	4632      	mov	r2, r6
   1f442:	4619      	mov	r1, r3
   1f444:	4628      	mov	r0, r5
   1f446:	f7f7 fdc5 	bl	16fd4 <send_err_rsp>
		return 0;
   1f44a:	2000      	movs	r0, #0
   1f44c:	e000      	b.n	1f450 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   1f44e:	2004      	movs	r0, #4
}
   1f450:	b009      	add	sp, #36	; 0x24
   1f452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   1f454:	200e      	movs	r0, #14
   1f456:	e7fb      	b.n	1f450 <att_read_group_req+0x9e>

0001f458 <att_read_blob_req>:
{
   1f458:	b500      	push	{lr}
   1f45a:	b083      	sub	sp, #12
	req = (void *)buf->data;
   1f45c:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   1f45e:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   1f460:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f462:	9200      	str	r2, [sp, #0]
   1f464:	220d      	movs	r2, #13
   1f466:	210c      	movs	r1, #12
   1f468:	f7f7 fff4 	bl	17454 <att_read_rsp>
}
   1f46c:	b003      	add	sp, #12
   1f46e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f472 <att_read_req>:
{
   1f472:	b500      	push	{lr}
   1f474:	b083      	sub	sp, #12
	req = (void *)buf->data;
   1f476:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   1f478:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f47a:	2200      	movs	r2, #0
   1f47c:	9200      	str	r2, [sp, #0]
   1f47e:	220b      	movs	r2, #11
   1f480:	210a      	movs	r1, #10
   1f482:	f7f7 ffe7 	bl	17454 <att_read_rsp>
}
   1f486:	b003      	add	sp, #12
   1f488:	f85d fb04 	ldr.w	pc, [sp], #4

0001f48c <att_read_type_req>:
{
   1f48c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f48e:	b087      	sub	sp, #28
   1f490:	4605      	mov	r5, r0
   1f492:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   1f494:	7b0c      	ldrb	r4, [r1, #12]
   1f496:	3c04      	subs	r4, #4
   1f498:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1f49a:	2c02      	cmp	r4, #2
   1f49c:	d001      	beq.n	1f4a2 <att_read_type_req+0x16>
   1f49e:	2c10      	cmp	r4, #16
   1f4a0:	d123      	bne.n	1f4ea <att_read_type_req+0x5e>
   1f4a2:	2104      	movs	r1, #4
   1f4a4:	3008      	adds	r0, #8
   1f4a6:	f000 fe33 	bl	20110 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1f4aa:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1f4ac:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1f4ae:	4622      	mov	r2, r4
   1f4b0:	1d01      	adds	r1, r0, #4
   1f4b2:	a801      	add	r0, sp, #4
   1f4b4:	f7fe fd4a 	bl	1df4c <bt_uuid_create>
   1f4b8:	b1c8      	cbz	r0, 1f4ee <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1f4ba:	f10d 0216 	add.w	r2, sp, #22
   1f4be:	4639      	mov	r1, r7
   1f4c0:	4630      	mov	r0, r6
   1f4c2:	f7ff fb76 	bl	1ebb2 <range_is_valid>
   1f4c6:	b138      	cbz	r0, 1f4d8 <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   1f4c8:	463b      	mov	r3, r7
   1f4ca:	4632      	mov	r2, r6
   1f4cc:	a901      	add	r1, sp, #4
   1f4ce:	4628      	mov	r0, r5
   1f4d0:	f7f8 f812 	bl	174f8 <att_read_type_rsp>
}
   1f4d4:	b007      	add	sp, #28
   1f4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   1f4d8:	2301      	movs	r3, #1
   1f4da:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f4de:	2108      	movs	r1, #8
   1f4e0:	4628      	mov	r0, r5
   1f4e2:	f7f7 fd77 	bl	16fd4 <send_err_rsp>
		return 0;
   1f4e6:	2000      	movs	r0, #0
   1f4e8:	e7f4      	b.n	1f4d4 <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   1f4ea:	2004      	movs	r0, #4
   1f4ec:	e7f2      	b.n	1f4d4 <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   1f4ee:	200e      	movs	r0, #14
   1f4f0:	e7f0      	b.n	1f4d4 <att_read_type_req+0x48>

0001f4f2 <att_find_type_req>:
{
   1f4f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f4f6:	b087      	sub	sp, #28
   1f4f8:	4607      	mov	r7, r0
   1f4fa:	460c      	mov	r4, r1
   1f4fc:	2106      	movs	r1, #6
   1f4fe:	f104 0008 	add.w	r0, r4, #8
   1f502:	f000 fe05 	bl	20110 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1f506:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1f508:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1f50a:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   1f50e:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1f512:	f10d 020e 	add.w	r2, sp, #14
   1f516:	4631      	mov	r1, r6
   1f518:	4628      	mov	r0, r5
   1f51a:	f7ff fb4a 	bl	1ebb2 <range_is_valid>
   1f51e:	b1d0      	cbz	r0, 1f556 <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1f520:	2300      	movs	r3, #0
   1f522:	f88d 3010 	strb.w	r3, [sp, #16]
   1f526:	f8ad 8012 	strh.w	r8, [sp, #18]
   1f52a:	f88d 3014 	strb.w	r3, [sp, #20]
   1f52e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1f532:	f8ad 3016 	strh.w	r3, [sp, #22]
   1f536:	a905      	add	r1, sp, #20
   1f538:	a804      	add	r0, sp, #16
   1f53a:	f7fe fce9 	bl	1df10 <bt_uuid_cmp>
   1f53e:	b998      	cbnz	r0, 1f568 <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1f540:	7b23      	ldrb	r3, [r4, #12]
   1f542:	9300      	str	r3, [sp, #0]
   1f544:	464b      	mov	r3, r9
   1f546:	4632      	mov	r2, r6
   1f548:	4629      	mov	r1, r5
   1f54a:	4638      	mov	r0, r7
   1f54c:	f7f8 f81e 	bl	1758c <att_find_type_rsp>
}
   1f550:	b007      	add	sp, #28
   1f552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   1f556:	2301      	movs	r3, #1
   1f558:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   1f55c:	2106      	movs	r1, #6
   1f55e:	4638      	mov	r0, r7
   1f560:	f7f7 fd38 	bl	16fd4 <send_err_rsp>
		return 0;
   1f564:	2000      	movs	r0, #0
   1f566:	e7f3      	b.n	1f550 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1f568:	230a      	movs	r3, #10
   1f56a:	462a      	mov	r2, r5
   1f56c:	2106      	movs	r1, #6
   1f56e:	4638      	mov	r0, r7
   1f570:	f7f7 fd30 	bl	16fd4 <send_err_rsp>
		return 0;
   1f574:	2000      	movs	r0, #0
   1f576:	e7eb      	b.n	1f550 <att_find_type_req+0x5e>

0001f578 <att_find_info_req>:
{
   1f578:	b570      	push	{r4, r5, r6, lr}
   1f57a:	b082      	sub	sp, #8
   1f57c:	4604      	mov	r4, r0
	req = (void *)buf->data;
   1f57e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1f580:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1f582:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   1f584:	f10d 0206 	add.w	r2, sp, #6
   1f588:	4631      	mov	r1, r6
   1f58a:	4628      	mov	r0, r5
   1f58c:	f7ff fb11 	bl	1ebb2 <range_is_valid>
   1f590:	b130      	cbz	r0, 1f5a0 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   1f592:	4632      	mov	r2, r6
   1f594:	4629      	mov	r1, r5
   1f596:	4620      	mov	r0, r4
   1f598:	f7f8 f842 	bl	17620 <att_find_info_rsp>
}
   1f59c:	b002      	add	sp, #8
   1f59e:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   1f5a0:	2301      	movs	r3, #1
   1f5a2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1f5a6:	2104      	movs	r1, #4
   1f5a8:	4620      	mov	r0, r4
   1f5aa:	f7f7 fd13 	bl	16fd4 <send_err_rsp>
		return 0;
   1f5ae:	2000      	movs	r0, #0
   1f5b0:	e7f4      	b.n	1f59c <att_find_info_req+0x24>

0001f5b2 <bt_att_init>:
{
   1f5b2:	b508      	push	{r3, lr}
	bt_gatt_init();
   1f5b4:	f7f8 fbc0 	bl	17d38 <bt_gatt_init>
}
   1f5b8:	bd08      	pop	{r3, pc}

0001f5ba <att_confirm>:
{
   1f5ba:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f5bc:	2300      	movs	r3, #0
   1f5be:	898a      	ldrh	r2, [r1, #12]
   1f5c0:	6889      	ldr	r1, [r1, #8]
   1f5c2:	f7f8 f8cd 	bl	17760 <att_handle_rsp>
}
   1f5c6:	bd08      	pop	{r3, pc}

0001f5c8 <att_chan_detach>:
{
   1f5c8:	b510      	push	{r4, lr}
   1f5ca:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1f5cc:	6800      	ldr	r0, [r0, #0]
   1f5ce:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   1f5d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5d4:	2100      	movs	r1, #0
   1f5d6:	b1e3      	cbz	r3, 1f612 <att_chan_detach+0x4a>
   1f5d8:	4293      	cmp	r3, r2
   1f5da:	d002      	beq.n	1f5e2 <att_chan_detach+0x1a>
   1f5dc:	4619      	mov	r1, r3
   1f5de:	681b      	ldr	r3, [r3, #0]
   1f5e0:	e7f9      	b.n	1f5d6 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   1f5e2:	b149      	cbz	r1, 1f5f8 <att_chan_detach+0x30>
	return node->next;
   1f5e4:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   1f5e8:	600b      	str	r3, [r1, #0]
	return list->tail;
   1f5ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   1f5ec:	4293      	cmp	r3, r2
   1f5ee:	d00b      	beq.n	1f608 <att_chan_detach+0x40>
	parent->next = child;
   1f5f0:	2300      	movs	r3, #0
   1f5f2:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f5f6:	e00c      	b.n	1f612 <att_chan_detach+0x4a>
	return node->next;
   1f5f8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   1f5fc:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   1f5fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   1f600:	4291      	cmp	r1, r2
   1f602:	d1f5      	bne.n	1f5f0 <att_chan_detach+0x28>
	list->tail = node;
   1f604:	6283      	str	r3, [r0, #40]	; 0x28
}
   1f606:	e7f3      	b.n	1f5f0 <att_chan_detach+0x28>
	list->tail = node;
   1f608:	6281      	str	r1, [r0, #40]	; 0x28
}
   1f60a:	e7f1      	b.n	1f5f0 <att_chan_detach+0x28>
		net_buf_unref(buf);
   1f60c:	4618      	mov	r0, r3
   1f60e:	f000 fd0d 	bl	2002c <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1f612:	2200      	movs	r2, #0
   1f614:	2300      	movs	r3, #0
   1f616:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f61a:	f000 fcdb 	bl	1ffd4 <net_buf_get>
   1f61e:	4603      	mov	r3, r0
   1f620:	2800      	cmp	r0, #0
   1f622:	d1f3      	bne.n	1f60c <att_chan_detach+0x44>
	if (chan->req) {
   1f624:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1f628:	b12b      	cbz	r3, 1f636 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1f62a:	230e      	movs	r3, #14
   1f62c:	2200      	movs	r2, #0
   1f62e:	4611      	mov	r1, r2
   1f630:	4620      	mov	r0, r4
   1f632:	f7f8 f895 	bl	17760 <att_handle_rsp>
	chan->att = NULL;
   1f636:	2300      	movs	r3, #0
   1f638:	6023      	str	r3, [r4, #0]
}
   1f63a:	bd10      	pop	{r4, pc}

0001f63c <bt_att_disconnected>:
{
   1f63c:	b538      	push	{r3, r4, r5, lr}
   1f63e:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1f640:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   1f644:	b125      	cbz	r5, 1f650 <bt_att_disconnected+0x14>
   1f646:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   1f648:	f7ff ffbe 	bl	1f5c8 <att_chan_detach>
	return list->head;
   1f64c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   1f64e:	b103      	cbz	r3, 1f652 <bt_att_disconnected+0x16>
}
   1f650:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   1f652:	4628      	mov	r0, r5
   1f654:	f7f8 f8d0 	bl	177f8 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1f658:	6820      	ldr	r0, [r4, #0]
   1f65a:	f7f9 f855 	bl	18708 <bt_gatt_disconnected>
   1f65e:	e7f7      	b.n	1f650 <bt_att_disconnected+0x14>

0001f660 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1f660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f664:	b082      	sub	sp, #8
   1f666:	4607      	mov	r7, r0
   1f668:	460d      	mov	r5, r1
   1f66a:	4614      	mov	r4, r2
   1f66c:	461e      	mov	r6, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1f66e:	f7f7 f945 	bl	168fc <att_get>
	if (!att) {
   1f672:	b158      	cbz	r0, 1f68c <bt_att_send+0x2c>
   1f674:	4680      	mov	r8, r0
	}

	/* If callback is set use the fixed channel since bt_l2cap_chan_send
	 * cannot be used with a custom user_data.
	 */
	if (cb) {
   1f676:	b17c      	cbz	r4, 1f698 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1f678:	9600      	str	r6, [sp, #0]
   1f67a:	4623      	mov	r3, r4
   1f67c:	462a      	mov	r2, r5
   1f67e:	2104      	movs	r1, #4
   1f680:	4638      	mov	r0, r7
   1f682:	f7ff f9f9 	bl	1ea78 <bt_l2cap_send_cb>

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1f686:	b002      	add	sp, #8
   1f688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1f68c:	4628      	mov	r0, r5
   1f68e:	f000 fccd 	bl	2002c <net_buf_unref>
		return -ENOTCONN;
   1f692:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f696:	e7f6      	b.n	1f686 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   1f698:	4629      	mov	r1, r5
   1f69a:	300c      	adds	r0, #12
   1f69c:	f000 fcb9 	bl	20012 <net_buf_put>
	att_send_process(att);
   1f6a0:	4640      	mov	r0, r8
   1f6a2:	f7ff fc70 	bl	1ef86 <att_send_process>
	return 0;
   1f6a6:	2000      	movs	r0, #0
   1f6a8:	e7ed      	b.n	1f686 <bt_att_send+0x26>

0001f6aa <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1f6aa:	b510      	push	{r4, lr}
   1f6ac:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1f6ae:	f7f7 f925 	bl	168fc <att_get>
	if (!att) {
   1f6b2:	b170      	cbz	r0, 1f6d2 <bt_att_req_send+0x28>
   1f6b4:	4603      	mov	r3, r0
	parent->next = child;
   1f6b6:	2200      	movs	r2, #0
   1f6b8:	6022      	str	r2, [r4, #0]
	return list->tail;
   1f6ba:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1f6bc:	b132      	cbz	r2, 1f6cc <bt_att_req_send+0x22>
	parent->next = child;
   1f6be:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1f6c0:	6084      	str	r4, [r0, #8]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1f6c2:	4618      	mov	r0, r3
   1f6c4:	f7ff fb96 	bl	1edf4 <att_req_send_process>

	return 0;
   1f6c8:	2000      	movs	r0, #0
}
   1f6ca:	bd10      	pop	{r4, pc}
   1f6cc:	6084      	str	r4, [r0, #8]
	list->head = node;
   1f6ce:	6044      	str	r4, [r0, #4]
}
   1f6d0:	e7f7      	b.n	1f6c2 <bt_att_req_send+0x18>
		return -ENOTCONN;
   1f6d2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f6d6:	e7f8      	b.n	1f6ca <bt_att_req_send+0x20>

0001f6d8 <update_range>:
{
   1f6d8:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   1f6da:	8804      	ldrh	r4, [r0, #0]
   1f6dc:	42a2      	cmp	r2, r4
   1f6de:	d302      	bcc.n	1f6e6 <update_range+0xe>
   1f6e0:	880d      	ldrh	r5, [r1, #0]
   1f6e2:	42ab      	cmp	r3, r5
   1f6e4:	d908      	bls.n	1f6f8 <update_range+0x20>
	if (*start > new_start) {
   1f6e6:	42a2      	cmp	r2, r4
   1f6e8:	d200      	bcs.n	1f6ec <update_range+0x14>
		*start = new_start;
   1f6ea:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   1f6ec:	880a      	ldrh	r2, [r1, #0]
   1f6ee:	4293      	cmp	r3, r2
   1f6f0:	d904      	bls.n	1f6fc <update_range+0x24>
		*end = new_end;
   1f6f2:	800b      	strh	r3, [r1, #0]
	return true;
   1f6f4:	2001      	movs	r0, #1
   1f6f6:	e002      	b.n	1f6fe <update_range+0x26>
		return false;
   1f6f8:	2000      	movs	r0, #0
   1f6fa:	e000      	b.n	1f6fe <update_range+0x26>
	return true;
   1f6fc:	2001      	movs	r0, #1
}
   1f6fe:	bc30      	pop	{r4, r5}
   1f700:	4770      	bx	lr

0001f702 <cf_set_value>:
{
   1f702:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1f704:	2300      	movs	r3, #0
   1f706:	e001      	b.n	1f70c <cf_set_value+0xa>
   1f708:	3301      	adds	r3, #1
   1f70a:	b29b      	uxth	r3, r3
   1f70c:	2b02      	cmp	r3, #2
   1f70e:	d824      	bhi.n	1f75a <cf_set_value+0x58>
   1f710:	08dd      	lsrs	r5, r3, #3
   1f712:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   1f716:	d90f      	bls.n	1f738 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f718:	1944      	adds	r4, r0, r5
   1f71a:	7a24      	ldrb	r4, [r4, #8]
   1f71c:	f003 0607 	and.w	r6, r3, #7
   1f720:	40f4      	lsrs	r4, r6
   1f722:	f014 0f01 	tst.w	r4, #1
   1f726:	d0ef      	beq.n	1f708 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   1f728:	5d4c      	ldrb	r4, [r1, r5]
   1f72a:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1f72e:	f016 0f01 	tst.w	r6, #1
   1f732:	d1e9      	bne.n	1f708 <cf_set_value+0x6>
			return false;
   1f734:	2000      	movs	r0, #0
   1f736:	e013      	b.n	1f760 <cf_set_value+0x5e>
   1f738:	2300      	movs	r3, #0
   1f73a:	e008      	b.n	1f74e <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1f73c:	5ccc      	ldrb	r4, [r1, r3]
   1f73e:	f004 0407 	and.w	r4, r4, #7
   1f742:	18c5      	adds	r5, r0, r3
   1f744:	7a2e      	ldrb	r6, [r5, #8]
   1f746:	4334      	orrs	r4, r6
   1f748:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1f74a:	3301      	adds	r3, #1
   1f74c:	b29b      	uxth	r3, r3
   1f74e:	4293      	cmp	r3, r2
   1f750:	d205      	bcs.n	1f75e <cf_set_value+0x5c>
   1f752:	2b00      	cmp	r3, #0
   1f754:	d0f2      	beq.n	1f73c <cf_set_value+0x3a>
	return true;
   1f756:	2001      	movs	r0, #1
   1f758:	e002      	b.n	1f760 <cf_set_value+0x5e>
   1f75a:	2300      	movs	r3, #0
   1f75c:	e7f7      	b.n	1f74e <cf_set_value+0x4c>
   1f75e:	2001      	movs	r0, #1
}
   1f760:	bc70      	pop	{r4, r5, r6}
   1f762:	4770      	bx	lr

0001f764 <gatt_ccc_changed>:
{
   1f764:	b510      	push	{r4, lr}
   1f766:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   1f768:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f76a:	460b      	mov	r3, r1
   1f76c:	2b00      	cmp	r3, #0
   1f76e:	dd07      	ble.n	1f780 <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   1f770:	8953      	ldrh	r3, [r2, #10]
   1f772:	4299      	cmp	r1, r3
   1f774:	d003      	beq.n	1f77e <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1f776:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   1f778:	68d3      	ldr	r3, [r2, #12]
   1f77a:	b103      	cbz	r3, 1f77e <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1f77c:	4798      	blx	r3
}
   1f77e:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   1f780:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   1f784:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   1f788:	8924      	ldrh	r4, [r4, #8]
   1f78a:	428c      	cmp	r4, r1
   1f78c:	d900      	bls.n	1f790 <__kernel_ram_size>
			value = ccc->cfg[i].value;
   1f78e:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f790:	3301      	adds	r3, #1
   1f792:	e7eb      	b.n	1f76c <gatt_ccc_changed+0x8>

0001f794 <gatt_indicate_rsp>:
{
   1f794:	b510      	push	{r4, lr}
   1f796:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1f798:	68a3      	ldr	r3, [r4, #8]
   1f79a:	b113      	cbz	r3, 1f7a2 <gatt_indicate_rsp+0xe>
   1f79c:	460a      	mov	r2, r1
		params->func(conn, params, err);
   1f79e:	4621      	mov	r1, r4
   1f7a0:	4798      	blx	r3
	params->_ref--;
   1f7a2:	7da3      	ldrb	r3, [r4, #22]
   1f7a4:	3b01      	subs	r3, #1
   1f7a6:	b2db      	uxtb	r3, r3
   1f7a8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f7aa:	68e2      	ldr	r2, [r4, #12]
   1f7ac:	b112      	cbz	r2, 1f7b4 <gatt_indicate_rsp+0x20>
   1f7ae:	b90b      	cbnz	r3, 1f7b4 <gatt_indicate_rsp+0x20>
		params->destroy(params);
   1f7b0:	4620      	mov	r0, r4
   1f7b2:	4790      	blx	r2
}
   1f7b4:	bd10      	pop	{r4, pc}

0001f7b6 <match_uuid>:
	data->attr = attr;
   1f7b6:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f7b8:	8091      	strh	r1, [r2, #4]
}
   1f7ba:	2000      	movs	r0, #0
   1f7bc:	4770      	bx	lr

0001f7be <clear_ccc_cfg>:
{
   1f7be:	b530      	push	{r4, r5, lr}
   1f7c0:	b083      	sub	sp, #12
   1f7c2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1f7c4:	2500      	movs	r5, #0
   1f7c6:	9500      	str	r5, [sp, #0]
   1f7c8:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   1f7cc:	2207      	movs	r2, #7
   1f7ce:	4669      	mov	r1, sp
   1f7d0:	3001      	adds	r0, #1
   1f7d2:	f7fe fb28 	bl	1de26 <memcpy>
	cfg->id = 0U;
   1f7d6:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1f7d8:	8125      	strh	r5, [r4, #8]
}
   1f7da:	b003      	add	sp, #12
   1f7dc:	bd30      	pop	{r4, r5, pc}

0001f7de <write_name>:
{
   1f7de:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f7e0:	b093      	sub	sp, #76	; 0x4c
   1f7e2:	4616      	mov	r6, r2
   1f7e4:	461c      	mov	r4, r3
   1f7e6:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1f7ea:	2100      	movs	r1, #0
   1f7ec:	9101      	str	r1, [sp, #4]
   1f7ee:	223d      	movs	r2, #61	; 0x3d
   1f7f0:	a802      	add	r0, sp, #8
   1f7f2:	f7fe fb3c 	bl	1de6e <memset>
	if (offset >= sizeof(value)) {
   1f7f6:	2d40      	cmp	r5, #64	; 0x40
   1f7f8:	d80e      	bhi.n	1f818 <write_name+0x3a>
	if (offset + len >= sizeof(value)) {
   1f7fa:	4627      	mov	r7, r4
   1f7fc:	4425      	add	r5, r4
   1f7fe:	2d40      	cmp	r5, #64	; 0x40
   1f800:	d80d      	bhi.n	1f81e <write_name+0x40>
	memcpy(value, buf, len);
   1f802:	4622      	mov	r2, r4
   1f804:	4631      	mov	r1, r6
   1f806:	a801      	add	r0, sp, #4
   1f808:	f7fe fb0d 	bl	1de26 <memcpy>
	bt_set_name(value);
   1f80c:	a801      	add	r0, sp, #4
   1f80e:	f7f5 f8ad 	bl	1496c <bt_set_name>
}
   1f812:	4638      	mov	r0, r7
   1f814:	b013      	add	sp, #76	; 0x4c
   1f816:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f818:	f06f 0706 	mvn.w	r7, #6
   1f81c:	e7f9      	b.n	1f812 <write_name+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1f81e:	f06f 070c 	mvn.w	r7, #12
   1f822:	e7f6      	b.n	1f812 <write_name+0x34>

0001f824 <gen_hash_m>:
{
   1f824:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f826:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f828:	6806      	ldr	r6, [r0, #0]
   1f82a:	7835      	ldrb	r5, [r6, #0]
   1f82c:	2d00      	cmp	r5, #0
   1f82e:	d161      	bne.n	1f8f4 <gen_hash_m+0xd0>
   1f830:	4607      	mov	r7, r0
   1f832:	4614      	mov	r4, r2
	switch (u16->val) {
   1f834:	8873      	ldrh	r3, [r6, #2]
   1f836:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f83a:	d019      	beq.n	1f870 <gen_hash_m+0x4c>
   1f83c:	d913      	bls.n	1f866 <gen_hash_m+0x42>
   1f83e:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f842:	33ff      	adds	r3, #255	; 0xff
   1f844:	b29b      	uxth	r3, r3
   1f846:	2b04      	cmp	r3, #4
   1f848:	d85a      	bhi.n	1f900 <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   1f84a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f84e:	2202      	movs	r2, #2
   1f850:	f10d 010e 	add.w	r1, sp, #14
   1f854:	4620      	mov	r0, r4
   1f856:	f7fe f971 	bl	1db3c <tc_cmac_update>
   1f85a:	2800      	cmp	r0, #0
   1f85c:	d13a      	bne.n	1f8d4 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   1f85e:	f06f 0315 	mvn.w	r3, #21
   1f862:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f864:	e047      	b.n	1f8f6 <gen_hash_m+0xd2>
	switch (u16->val) {
   1f866:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f86a:	b29b      	uxth	r3, r3
   1f86c:	2b03      	cmp	r3, #3
   1f86e:	d845      	bhi.n	1f8fc <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   1f870:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f874:	2202      	movs	r2, #2
   1f876:	f10d 010e 	add.w	r1, sp, #14
   1f87a:	4620      	mov	r0, r4
   1f87c:	f7fe f95e 	bl	1db3c <tc_cmac_update>
   1f880:	b918      	cbnz	r0, 1f88a <gen_hash_m+0x66>
			state->err = -EINVAL;
   1f882:	f06f 0315 	mvn.w	r3, #21
   1f886:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f888:	e035      	b.n	1f8f6 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   1f88a:	8873      	ldrh	r3, [r6, #2]
   1f88c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f890:	2202      	movs	r2, #2
   1f892:	f10d 010e 	add.w	r1, sp, #14
   1f896:	4620      	mov	r0, r4
   1f898:	f7fe f950 	bl	1db3c <tc_cmac_update>
   1f89c:	b180      	cbz	r0, 1f8c0 <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f89e:	687e      	ldr	r6, [r7, #4]
   1f8a0:	2000      	movs	r0, #0
   1f8a2:	9000      	str	r0, [sp, #0]
   1f8a4:	2310      	movs	r3, #16
   1f8a6:	eb0d 0203 	add.w	r2, sp, r3
   1f8aa:	4639      	mov	r1, r7
   1f8ac:	47b0      	blx	r6
		if (len < 0) {
   1f8ae:	1e02      	subs	r2, r0, #0
   1f8b0:	db0a      	blt.n	1f8c8 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   1f8b2:	a904      	add	r1, sp, #16
   1f8b4:	4620      	mov	r0, r4
   1f8b6:	f7fe f941 	bl	1db3c <tc_cmac_update>
   1f8ba:	b138      	cbz	r0, 1f8cc <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   1f8bc:	2501      	movs	r5, #1
   1f8be:	e01a      	b.n	1f8f6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   1f8c0:	f06f 0315 	mvn.w	r3, #21
   1f8c4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f8c6:	e016      	b.n	1f8f6 <gen_hash_m+0xd2>
			state->err = len;
   1f8c8:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f8ca:	e014      	b.n	1f8f6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   1f8cc:	f06f 0315 	mvn.w	r3, #21
   1f8d0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f8d2:	e010      	b.n	1f8f6 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   1f8d4:	8873      	ldrh	r3, [r6, #2]
   1f8d6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f8da:	2202      	movs	r2, #2
   1f8dc:	f10d 010e 	add.w	r1, sp, #14
   1f8e0:	4620      	mov	r0, r4
   1f8e2:	f7fe f92b 	bl	1db3c <tc_cmac_update>
   1f8e6:	b108      	cbz	r0, 1f8ec <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   1f8e8:	2501      	movs	r5, #1
   1f8ea:	e004      	b.n	1f8f6 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   1f8ec:	f06f 0315 	mvn.w	r3, #21
   1f8f0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1f8f2:	e000      	b.n	1f8f6 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   1f8f4:	2501      	movs	r5, #1
}
   1f8f6:	4628      	mov	r0, r5
   1f8f8:	b009      	add	sp, #36	; 0x24
   1f8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1f8fc:	2501      	movs	r5, #1
   1f8fe:	e7fa      	b.n	1f8f6 <gen_hash_m+0xd2>
   1f900:	2501      	movs	r5, #1
   1f902:	e7f8      	b.n	1f8f6 <gen_hash_m+0xd2>

0001f904 <sc_restore_rsp>:
{
   1f904:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f906:	f7f7 fff3 	bl	178f0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f90a:	b188      	cbz	r0, 1f930 <sc_restore_rsp+0x2c>
   1f90c:	4603      	mov	r3, r0
   1f90e:	7a02      	ldrb	r2, [r0, #8]
   1f910:	f012 0f01 	tst.w	r2, #1
   1f914:	d00c      	beq.n	1f930 <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f916:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f918:	f3bf 8f5b 	dmb	ish
   1f91c:	e853 2f00 	ldrex	r2, [r3]
   1f920:	f042 0201 	orr.w	r2, r2, #1
   1f924:	e843 2100 	strex	r1, r2, [r3]
   1f928:	2900      	cmp	r1, #0
   1f92a:	d1f7      	bne.n	1f91c <sc_restore_rsp+0x18>
   1f92c:	f3bf 8f5b 	dmb	ish
}
   1f930:	bd08      	pop	{r3, pc}

0001f932 <find_ccc_cfg>:
{
   1f932:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f934:	b083      	sub	sp, #12
   1f936:	4607      	mov	r7, r0
   1f938:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f93a:	2400      	movs	r4, #0
   1f93c:	b11c      	cbz	r4, 1f946 <find_ccc_cfg+0x14>
	return NULL;
   1f93e:	2600      	movs	r6, #0
}
   1f940:	4630      	mov	r0, r6
   1f942:	b003      	add	sp, #12
   1f944:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f946:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1f94a:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   1f94e:	b167      	cbz	r7, 1f96a <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   1f950:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1f954:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f956:	3201      	adds	r2, #1
   1f958:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   1f95c:	4638      	mov	r0, r7
   1f95e:	f7fe ffbd 	bl	1e8dc <bt_conn_is_peer_addr_le>
   1f962:	2800      	cmp	r0, #0
   1f964:	d1ec      	bne.n	1f940 <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f966:	3401      	adds	r4, #1
   1f968:	e7e8      	b.n	1f93c <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f96a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   1f96e:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   1f972:	2300      	movs	r3, #0
   1f974:	9300      	str	r3, [sp, #0]
   1f976:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1f97a:	2207      	movs	r2, #7
   1f97c:	4669      	mov	r1, sp
   1f97e:	3001      	adds	r0, #1
   1f980:	f7fe fa3a 	bl	1ddf8 <memcmp>
   1f984:	2800      	cmp	r0, #0
   1f986:	d1ee      	bne.n	1f966 <find_ccc_cfg+0x34>
   1f988:	e7da      	b.n	1f940 <find_ccc_cfg+0xe>

0001f98a <clear_sc_cfg>:
{
   1f98a:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   1f98c:	220c      	movs	r2, #12
   1f98e:	2100      	movs	r1, #0
   1f990:	f7fe fa6d 	bl	1de6e <memset>
}
   1f994:	bd08      	pop	{r3, pc}

0001f996 <bt_gatt_clear_sc>:
{
   1f996:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f998:	f7f8 f82a 	bl	179f0 <find_sc_cfg>
	if (!cfg) {
   1f99c:	b108      	cbz	r0, 1f9a2 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   1f99e:	f7ff fff4 	bl	1f98a <clear_sc_cfg>
}
   1f9a2:	2000      	movs	r0, #0
   1f9a4:	bd08      	pop	{r3, pc}

0001f9a6 <sc_ccc_cfg_write>:
{
   1f9a6:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f9a8:	2a02      	cmp	r2, #2
   1f9aa:	d003      	beq.n	1f9b4 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   1f9ac:	f7f8 f8f8 	bl	17ba0 <sc_clear>
}
   1f9b0:	2002      	movs	r0, #2
   1f9b2:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f9b4:	2300      	movs	r3, #0
   1f9b6:	461a      	mov	r2, r3
   1f9b8:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f9bc:	7a00      	ldrb	r0, [r0, #8]
   1f9be:	f7f8 f83b 	bl	17a38 <sc_save>
   1f9c2:	e7f5      	b.n	1f9b0 <sc_ccc_cfg_write+0xa>

0001f9c4 <sc_reset>:
{
   1f9c4:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1f9c6:	2204      	movs	r2, #4
   1f9c8:	2100      	movs	r1, #0
   1f9ca:	3008      	adds	r0, #8
   1f9cc:	f7fe fa4f 	bl	1de6e <memset>
}
   1f9d0:	bd08      	pop	{r3, pc}

0001f9d2 <gatt_foreach_iter>:
	if (handle > end_handle) {
   1f9d2:	4299      	cmp	r1, r3
   1f9d4:	d822      	bhi.n	1fa1c <gatt_foreach_iter+0x4a>
{
   1f9d6:	b538      	push	{r3, r4, r5, lr}
   1f9d8:	4605      	mov	r5, r0
   1f9da:	460c      	mov	r4, r1
	if (handle < start_handle) {
   1f9dc:	4291      	cmp	r1, r2
   1f9de:	d31f      	bcc.n	1fa20 <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1f9e0:	9b04      	ldr	r3, [sp, #16]
   1f9e2:	b123      	cbz	r3, 1f9ee <gatt_foreach_iter+0x1c>
   1f9e4:	6801      	ldr	r1, [r0, #0]
   1f9e6:	4618      	mov	r0, r3
   1f9e8:	f7fe fa92 	bl	1df10 <bt_uuid_cmp>
   1f9ec:	b9d0      	cbnz	r0, 1fa24 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   1f9ee:	9b05      	ldr	r3, [sp, #20]
   1f9f0:	b12b      	cbz	r3, 1f9fe <gatt_foreach_iter+0x2c>
   1f9f2:	68eb      	ldr	r3, [r5, #12]
   1f9f4:	9a05      	ldr	r2, [sp, #20]
   1f9f6:	4293      	cmp	r3, r2
   1f9f8:	d001      	beq.n	1f9fe <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   1f9fa:	2001      	movs	r0, #1
   1f9fc:	e011      	b.n	1fa22 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   1f9fe:	9b06      	ldr	r3, [sp, #24]
   1fa00:	881b      	ldrh	r3, [r3, #0]
   1fa02:	3b01      	subs	r3, #1
   1fa04:	9a06      	ldr	r2, [sp, #24]
   1fa06:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   1fa08:	9a08      	ldr	r2, [sp, #32]
   1fa0a:	4621      	mov	r1, r4
   1fa0c:	4628      	mov	r0, r5
   1fa0e:	9b07      	ldr	r3, [sp, #28]
   1fa10:	4798      	blx	r3
	if (!*num_matches) {
   1fa12:	9b06      	ldr	r3, [sp, #24]
   1fa14:	881b      	ldrh	r3, [r3, #0]
   1fa16:	b923      	cbnz	r3, 1fa22 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   1fa18:	2000      	movs	r0, #0
   1fa1a:	e002      	b.n	1fa22 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   1fa1c:	2000      	movs	r0, #0
}
   1fa1e:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   1fa20:	2001      	movs	r0, #1
}
   1fa22:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   1fa24:	2001      	movs	r0, #1
   1fa26:	e7fc      	b.n	1fa22 <gatt_foreach_iter+0x50>

0001fa28 <gatt_req_alloc>:
{
   1fa28:	b538      	push	{r3, r4, r5, lr}
   1fa2a:	4605      	mov	r5, r0
   1fa2c:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1fa2e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1fa32:	2100      	movs	r1, #0
   1fa34:	f7f7 fe68 	bl	17708 <bt_att_req_alloc>
	if (!req) {
   1fa38:	4603      	mov	r3, r0
   1fa3a:	b108      	cbz	r0, 1fa40 <gatt_req_alloc+0x18>
	req->func = func;
   1fa3c:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   1fa3e:	60c4      	str	r4, [r0, #12]
}
   1fa40:	4618      	mov	r0, r3
   1fa42:	bd38      	pop	{r3, r4, r5, pc}

0001fa44 <clear_cf_cfg>:
{
   1fa44:	b530      	push	{r4, r5, lr}
   1fa46:	b083      	sub	sp, #12
   1fa48:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1fa4a:	2500      	movs	r5, #0
   1fa4c:	9500      	str	r5, [sp, #0]
   1fa4e:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   1fa52:	2207      	movs	r2, #7
   1fa54:	4669      	mov	r1, sp
   1fa56:	3001      	adds	r0, #1
   1fa58:	f7fe f9e5 	bl	1de26 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1fa5c:	2201      	movs	r2, #1
   1fa5e:	4629      	mov	r1, r5
   1fa60:	f104 0008 	add.w	r0, r4, #8
   1fa64:	f7fe fa03 	bl	1de6e <memset>
	atomic_set(cfg->flags, 0);
   1fa68:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1fa6a:	f3bf 8f5b 	dmb	ish
   1fa6e:	e854 3f00 	ldrex	r3, [r4]
   1fa72:	e844 5200 	strex	r2, r5, [r4]
   1fa76:	2a00      	cmp	r2, #0
   1fa78:	d1f9      	bne.n	1fa6e <clear_cf_cfg+0x2a>
   1fa7a:	f3bf 8f5b 	dmb	ish
}
   1fa7e:	b003      	add	sp, #12
   1fa80:	bd30      	pop	{r4, r5, pc}

0001fa82 <remove_cf_cfg>:
{
   1fa82:	b570      	push	{r4, r5, r6, lr}
   1fa84:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   1fa86:	f7f7 ff33 	bl	178f0 <find_cf_cfg>
	if (!cfg) {
   1fa8a:	b1e8      	cbz	r0, 1fac8 <remove_cf_cfg+0x46>
   1fa8c:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1fa8e:	f104 0688 	add.w	r6, r4, #136	; 0x88
   1fa92:	4631      	mov	r1, r6
   1fa94:	7a20      	ldrb	r0, [r4, #8]
   1fa96:	f7fe fbdc 	bl	1e252 <bt_addr_le_is_bonded>
   1fa9a:	b918      	cbnz	r0, 1faa4 <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   1fa9c:	4628      	mov	r0, r5
   1fa9e:	f7ff ffd1 	bl	1fa44 <clear_cf_cfg>
   1faa2:	e011      	b.n	1fac8 <remove_cf_cfg+0x46>
   1faa4:	2207      	movs	r2, #7
   1faa6:	4631      	mov	r1, r6
   1faa8:	1c68      	adds	r0, r5, #1
   1faaa:	f7fe f9bc 	bl	1de26 <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   1faae:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fab0:	f3bf 8f5b 	dmb	ish
   1fab4:	e855 3f00 	ldrex	r3, [r5]
   1fab8:	f023 0302 	bic.w	r3, r3, #2
   1fabc:	e845 3200 	strex	r2, r3, [r5]
   1fac0:	2a00      	cmp	r2, #0
   1fac2:	d1f7      	bne.n	1fab4 <remove_cf_cfg+0x32>
   1fac4:	f3bf 8f5b 	dmb	ish
}
   1fac8:	bd70      	pop	{r4, r5, r6, pc}

0001faca <bt_gatt_attr_read>:
{
   1faca:	b510      	push	{r4, lr}
   1facc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   1fad0:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   1fad4:	42a1      	cmp	r1, r4
   1fad6:	d80c      	bhi.n	1faf2 <bt_gatt_attr_read+0x28>
   1fad8:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   1fada:	1a64      	subs	r4, r4, r1
   1fadc:	42a3      	cmp	r3, r4
   1fade:	bfa8      	it	ge
   1fae0:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1fae2:	b29c      	uxth	r4, r3
   1fae4:	4622      	mov	r2, r4
   1fae6:	9b03      	ldr	r3, [sp, #12]
   1fae8:	4419      	add	r1, r3
   1faea:	f7fe f99c 	bl	1de26 <memcpy>
}
   1faee:	4620      	mov	r0, r4
   1faf0:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1faf2:	f06f 0406 	mvn.w	r4, #6
   1faf6:	e7fa      	b.n	1faee <bt_gatt_attr_read+0x24>

0001faf8 <read_ppcp>:
{
   1faf8:	b510      	push	{r4, lr}
   1fafa:	b086      	sub	sp, #24
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1fafc:	2418      	movs	r4, #24
   1fafe:	f8ad 4010 	strh.w	r4, [sp, #16]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1fb02:	2428      	movs	r4, #40	; 0x28
   1fb04:	f8ad 4012 	strh.w	r4, [sp, #18]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1fb08:	2400      	movs	r4, #0
   1fb0a:	f8ad 4014 	strh.w	r4, [sp, #20]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1fb0e:	242a      	movs	r4, #42	; 0x2a
   1fb10:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1fb14:	2408      	movs	r4, #8
   1fb16:	9402      	str	r4, [sp, #8]
   1fb18:	ac04      	add	r4, sp, #16
   1fb1a:	9401      	str	r4, [sp, #4]
   1fb1c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1fb20:	9400      	str	r4, [sp, #0]
   1fb22:	f7ff ffd2 	bl	1faca <bt_gatt_attr_read>
}
   1fb26:	b006      	add	sp, #24
   1fb28:	bd10      	pop	{r4, pc}

0001fb2a <read_appearance>:
{
   1fb2a:	b510      	push	{r4, lr}
   1fb2c:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1fb2e:	f240 5452 	movw	r4, #1362	; 0x552
   1fb32:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1fb36:	2402      	movs	r4, #2
   1fb38:	9402      	str	r4, [sp, #8]
   1fb3a:	f10d 0416 	add.w	r4, sp, #22
   1fb3e:	9401      	str	r4, [sp, #4]
   1fb40:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   1fb44:	9400      	str	r4, [sp, #0]
   1fb46:	f7ff ffc0 	bl	1faca <bt_gatt_attr_read>
}
   1fb4a:	b006      	add	sp, #24
   1fb4c:	bd10      	pop	{r4, pc}

0001fb4e <read_name>:
{
   1fb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fb52:	b084      	sub	sp, #16
   1fb54:	4604      	mov	r4, r0
   1fb56:	460d      	mov	r5, r1
   1fb58:	4616      	mov	r6, r2
   1fb5a:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   1fb5c:	f7f4 ffe8 	bl	14b30 <bt_get_name>
   1fb60:	4680      	mov	r8, r0
				 strlen(name));
   1fb62:	f7fe f92d 	bl	1ddc0 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1fb66:	b280      	uxth	r0, r0
   1fb68:	9002      	str	r0, [sp, #8]
   1fb6a:	f8cd 8004 	str.w	r8, [sp, #4]
   1fb6e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1fb72:	9300      	str	r3, [sp, #0]
   1fb74:	463b      	mov	r3, r7
   1fb76:	4632      	mov	r2, r6
   1fb78:	4629      	mov	r1, r5
   1fb7a:	4620      	mov	r0, r4
   1fb7c:	f7ff ffa5 	bl	1faca <bt_gatt_attr_read>
}
   1fb80:	b004      	add	sp, #16
   1fb82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fb86 <cf_read>:
{
   1fb86:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fb88:	b087      	sub	sp, #28
   1fb8a:	4604      	mov	r4, r0
   1fb8c:	460d      	mov	r5, r1
   1fb8e:	4616      	mov	r6, r2
   1fb90:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1fb92:	2300      	movs	r3, #0
   1fb94:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   1fb98:	f7f7 feaa 	bl	178f0 <find_cf_cfg>
	if (cfg) {
   1fb9c:	b128      	cbz	r0, 1fbaa <cf_read+0x24>
   1fb9e:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   1fba0:	2201      	movs	r2, #1
   1fba2:	3108      	adds	r1, #8
   1fba4:	a805      	add	r0, sp, #20
   1fba6:	f7fe f93e 	bl	1de26 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1fbaa:	2301      	movs	r3, #1
   1fbac:	9302      	str	r3, [sp, #8]
   1fbae:	ab05      	add	r3, sp, #20
   1fbb0:	9301      	str	r3, [sp, #4]
   1fbb2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1fbb6:	9300      	str	r3, [sp, #0]
   1fbb8:	463b      	mov	r3, r7
   1fbba:	4632      	mov	r2, r6
   1fbbc:	4629      	mov	r1, r5
   1fbbe:	4620      	mov	r0, r4
   1fbc0:	f7ff ff83 	bl	1faca <bt_gatt_attr_read>
}
   1fbc4:	b007      	add	sp, #28
   1fbc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fbc8 <bt_gatt_attr_read_service>:
{
   1fbc8:	b570      	push	{r4, r5, r6, lr}
   1fbca:	b086      	sub	sp, #24
   1fbcc:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   1fbd0:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   1fbd2:	7826      	ldrb	r6, [r4, #0]
   1fbd4:	b146      	cbz	r6, 1fbe8 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   1fbd6:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1fbd8:	2610      	movs	r6, #16
   1fbda:	9602      	str	r6, [sp, #8]
   1fbdc:	9401      	str	r4, [sp, #4]
   1fbde:	9500      	str	r5, [sp, #0]
   1fbe0:	f7ff ff73 	bl	1faca <bt_gatt_attr_read>
}
   1fbe4:	b006      	add	sp, #24
   1fbe6:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1fbe8:	8864      	ldrh	r4, [r4, #2]
   1fbea:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   1fbee:	2402      	movs	r4, #2
   1fbf0:	9402      	str	r4, [sp, #8]
   1fbf2:	f10d 0416 	add.w	r4, sp, #22
   1fbf6:	9401      	str	r4, [sp, #4]
   1fbf8:	9500      	str	r5, [sp, #0]
   1fbfa:	f7ff ff66 	bl	1faca <bt_gatt_attr_read>
   1fbfe:	e7f1      	b.n	1fbe4 <bt_gatt_attr_read_service+0x1c>

0001fc00 <bt_gatt_attr_read_ccc>:
{
   1fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fc02:	b087      	sub	sp, #28
   1fc04:	4605      	mov	r5, r0
   1fc06:	460c      	mov	r4, r1
   1fc08:	4616      	mov	r6, r2
   1fc0a:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1fc0c:	68c9      	ldr	r1, [r1, #12]
   1fc0e:	f7ff fe90 	bl	1f932 <find_ccc_cfg>
	if (cfg) {
   1fc12:	b190      	cbz	r0, 1fc3a <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   1fc14:	8903      	ldrh	r3, [r0, #8]
   1fc16:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1fc1a:	2302      	movs	r3, #2
   1fc1c:	9302      	str	r3, [sp, #8]
   1fc1e:	f10d 0316 	add.w	r3, sp, #22
   1fc22:	9301      	str	r3, [sp, #4]
   1fc24:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   1fc28:	9300      	str	r3, [sp, #0]
   1fc2a:	463b      	mov	r3, r7
   1fc2c:	4632      	mov	r2, r6
   1fc2e:	4621      	mov	r1, r4
   1fc30:	4628      	mov	r0, r5
   1fc32:	f7ff ff4a 	bl	1faca <bt_gatt_attr_read>
}
   1fc36:	b007      	add	sp, #28
   1fc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   1fc3a:	2300      	movs	r3, #0
   1fc3c:	f8ad 3016 	strh.w	r3, [sp, #22]
   1fc40:	e7eb      	b.n	1fc1a <bt_gatt_attr_read_ccc+0x1a>

0001fc42 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1fc42:	b1b8      	cbz	r0, 1fc74 <bt_gatt_attr_value_handle+0x32>
{
   1fc44:	b510      	push	{r4, lr}
   1fc46:	b082      	sub	sp, #8
   1fc48:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1fc4a:	2300      	movs	r3, #0
   1fc4c:	f88d 3004 	strb.w	r3, [sp, #4]
   1fc50:	f642 0303 	movw	r3, #10243	; 0x2803
   1fc54:	f8ad 3006 	strh.w	r3, [sp, #6]
   1fc58:	a901      	add	r1, sp, #4
   1fc5a:	6800      	ldr	r0, [r0, #0]
   1fc5c:	f7fe f958 	bl	1df10 <bt_uuid_cmp>
   1fc60:	b950      	cbnz	r0, 1fc78 <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   1fc62:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   1fc64:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1fc66:	b940      	cbnz	r0, 1fc7a <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1fc68:	4620      	mov	r0, r4
   1fc6a:	f7f8 f8a9 	bl	17dc0 <bt_gatt_attr_get_handle>
   1fc6e:	3001      	adds	r0, #1
   1fc70:	b280      	uxth	r0, r0
   1fc72:	e002      	b.n	1fc7a <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   1fc74:	2000      	movs	r0, #0
}
   1fc76:	4770      	bx	lr
	uint16_t handle = 0;
   1fc78:	2000      	movs	r0, #0
}
   1fc7a:	b002      	add	sp, #8
   1fc7c:	bd10      	pop	{r4, pc}

0001fc7e <bt_gatt_attr_read_chrc>:
{
   1fc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc82:	b08a      	sub	sp, #40	; 0x28
   1fc84:	4605      	mov	r5, r0
   1fc86:	460c      	mov	r4, r1
   1fc88:	4616      	mov	r6, r2
   1fc8a:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   1fc8c:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   1fc90:	f898 3006 	ldrb.w	r3, [r8, #6]
   1fc94:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1fc98:	4608      	mov	r0, r1
   1fc9a:	f7ff ffd2 	bl	1fc42 <bt_gatt_attr_value_handle>
   1fc9e:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1fca2:	f8d8 1000 	ldr.w	r1, [r8]
   1fca6:	780b      	ldrb	r3, [r1, #0]
   1fca8:	b993      	cbnz	r3, 1fcd0 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1fcaa:	884b      	ldrh	r3, [r1, #2]
   1fcac:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   1fcb0:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1fcb2:	9302      	str	r3, [sp, #8]
   1fcb4:	ab05      	add	r3, sp, #20
   1fcb6:	9301      	str	r3, [sp, #4]
   1fcb8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1fcbc:	9300      	str	r3, [sp, #0]
   1fcbe:	463b      	mov	r3, r7
   1fcc0:	4632      	mov	r2, r6
   1fcc2:	4621      	mov	r1, r4
   1fcc4:	4628      	mov	r0, r5
   1fcc6:	f7ff ff00 	bl	1faca <bt_gatt_attr_read>
}
   1fcca:	b00a      	add	sp, #40	; 0x28
   1fccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1fcd0:	2210      	movs	r2, #16
   1fcd2:	3101      	adds	r1, #1
   1fcd4:	f10d 0017 	add.w	r0, sp, #23
   1fcd8:	f7fe f8a5 	bl	1de26 <memcpy>
		value_len += 16U;
   1fcdc:	2313      	movs	r3, #19
   1fcde:	e7e8      	b.n	1fcb2 <bt_gatt_attr_read_chrc+0x34>

0001fce0 <db_hash_process>:
{
   1fce0:	b508      	push	{r3, lr}
	db_hash_gen(true);
   1fce2:	2001      	movs	r0, #1
   1fce4:	f7f8 f8e6 	bl	17eb4 <db_hash_gen>
}
   1fce8:	bd08      	pop	{r3, pc}

0001fcea <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   1fcea:	f012 0f01 	tst.w	r2, #1
   1fcee:	d005      	beq.n	1fcfc <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fcf0:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fcf2:	f013 0f15 	tst.w	r3, #21
   1fcf6:	d01a      	beq.n	1fd2e <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fcf8:	684b      	ldr	r3, [r1, #4]
   1fcfa:	b1d3      	cbz	r3, 1fd32 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fcfc:	f012 0f02 	tst.w	r2, #2
   1fd00:	d005      	beq.n	1fd0e <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fd02:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fd04:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   1fd08:	d015      	beq.n	1fd36 <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fd0a:	688b      	ldr	r3, [r1, #8]
   1fd0c:	b1ab      	cbz	r3, 1fd3a <bt_gatt_check_perm+0x50>
{
   1fd0e:	b510      	push	{r4, lr}
	mask &= attr->perm;
   1fd10:	7c8c      	ldrb	r4, [r1, #18]
   1fd12:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fd14:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fd18:	d103      	bne.n	1fd22 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1fd1a:	f014 000c 	ands.w	r0, r4, #12
   1fd1e:	d10e      	bne.n	1fd3e <bt_gatt_check_perm+0x54>
}
   1fd20:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fd22:	f7fe fdc2 	bl	1e8aa <bt_conn_get_security>
   1fd26:	2802      	cmp	r0, #2
   1fd28:	d8f7      	bhi.n	1fd1a <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   1fd2a:	2005      	movs	r0, #5
   1fd2c:	e7f8      	b.n	1fd20 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fd2e:	2002      	movs	r0, #2
   1fd30:	4770      	bx	lr
   1fd32:	2002      	movs	r0, #2
   1fd34:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fd36:	2003      	movs	r0, #3
   1fd38:	4770      	bx	lr
   1fd3a:	2003      	movs	r0, #3
}
   1fd3c:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1fd3e:	200f      	movs	r0, #15
   1fd40:	e7ee      	b.n	1fd20 <bt_gatt_check_perm+0x36>

0001fd42 <bt_gatt_change_aware>:
{
   1fd42:	b510      	push	{r4, lr}
   1fd44:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1fd46:	f7f7 fdd3 	bl	178f0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fd4a:	2800      	cmp	r0, #0
   1fd4c:	d042      	beq.n	1fdd4 <bt_gatt_change_aware+0x92>
   1fd4e:	7a02      	ldrb	r2, [r0, #8]
   1fd50:	f012 0f01 	tst.w	r2, #1
   1fd54:	d101      	bne.n	1fd5a <bt_gatt_change_aware+0x18>
		return true;
   1fd56:	2001      	movs	r0, #1
}
   1fd58:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fd5a:	f100 010c 	add.w	r1, r0, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fd5e:	f3bf 8f5b 	dmb	ish
   1fd62:	68c2      	ldr	r2, [r0, #12]
   1fd64:	f3bf 8f5b 	dmb	ish
   1fd68:	f012 0f01 	tst.w	r2, #1
   1fd6c:	d134      	bne.n	1fdd8 <bt_gatt_change_aware+0x96>
	if (!req) {
   1fd6e:	b90c      	cbnz	r4, 1fd74 <bt_gatt_change_aware+0x32>
		return false;
   1fd70:	4620      	mov	r0, r4
   1fd72:	e7f1      	b.n	1fd58 <bt_gatt_change_aware+0x16>
   1fd74:	f3bf 8f5b 	dmb	ish
   1fd78:	68c3      	ldr	r3, [r0, #12]
   1fd7a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1fd7e:	f013 0f02 	tst.w	r3, #2
   1fd82:	d10d      	bne.n	1fda0 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fd84:	f3bf 8f5b 	dmb	ish
   1fd88:	e851 3f00 	ldrex	r3, [r1]
   1fd8c:	f043 0302 	orr.w	r3, r3, #2
   1fd90:	e841 3200 	strex	r2, r3, [r1]
   1fd94:	2a00      	cmp	r2, #0
   1fd96:	d1f7      	bne.n	1fd88 <bt_gatt_change_aware+0x46>
   1fd98:	f3bf 8f5b 	dmb	ish
	return false;
   1fd9c:	2000      	movs	r0, #0
   1fd9e:	e7db      	b.n	1fd58 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fda0:	f3bf 8f5b 	dmb	ish
   1fda4:	e851 3f00 	ldrex	r3, [r1]
   1fda8:	f023 0302 	bic.w	r3, r3, #2
   1fdac:	e841 3200 	strex	r2, r3, [r1]
   1fdb0:	2a00      	cmp	r2, #0
   1fdb2:	d1f7      	bne.n	1fda4 <bt_gatt_change_aware+0x62>
   1fdb4:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1fdb8:	f3bf 8f5b 	dmb	ish
   1fdbc:	e851 3f00 	ldrex	r3, [r1]
   1fdc0:	f043 0301 	orr.w	r3, r3, #1
   1fdc4:	e841 3200 	strex	r2, r3, [r1]
   1fdc8:	2a00      	cmp	r2, #0
   1fdca:	d1f7      	bne.n	1fdbc <bt_gatt_change_aware+0x7a>
   1fdcc:	f3bf 8f5b 	dmb	ish
		return true;
   1fdd0:	4620      	mov	r0, r4
   1fdd2:	e7c1      	b.n	1fd58 <bt_gatt_change_aware+0x16>
		return true;
   1fdd4:	2001      	movs	r0, #1
   1fdd6:	e7bf      	b.n	1fd58 <bt_gatt_change_aware+0x16>
		return true;
   1fdd8:	2001      	movs	r0, #1
   1fdda:	e7bd      	b.n	1fd58 <bt_gatt_change_aware+0x16>

0001fddc <bt_smp_recv>:
{
   1fddc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fdde:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   1fde0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fde2:	f04f 32ff 	mov.w	r2, #4294967295
   1fde6:	f04f 33ff 	mov.w	r3, #4294967295
   1fdea:	2100      	movs	r1, #0
   1fdec:	4608      	mov	r0, r1
   1fdee:	f7fe fe3e 	bl	1ea6e <bt_l2cap_create_pdu_timeout>
   1fdf2:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   1fdf4:	f100 0608 	add.w	r6, r0, #8
   1fdf8:	2101      	movs	r1, #1
   1fdfa:	4630      	mov	r0, r6
   1fdfc:	f000 f960 	bl	200c0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1fe00:	2505      	movs	r5, #5
   1fe02:	7005      	strb	r5, [r0, #0]
   1fe04:	2101      	movs	r1, #1
   1fe06:	4630      	mov	r0, r6
   1fe08:	f000 f95a 	bl	200c0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1fe0c:	7005      	strb	r5, [r0, #0]
   1fe0e:	2300      	movs	r3, #0
   1fe10:	9300      	str	r3, [sp, #0]
   1fe12:	4622      	mov	r2, r4
   1fe14:	2106      	movs	r1, #6
   1fe16:	4638      	mov	r0, r7
   1fe18:	f7fe fe2e 	bl	1ea78 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1fe1c:	b910      	cbnz	r0, 1fe24 <bt_smp_recv+0x48>
}
   1fe1e:	2000      	movs	r0, #0
   1fe20:	b003      	add	sp, #12
   1fe22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1fe24:	4620      	mov	r0, r4
   1fe26:	f000 f901 	bl	2002c <net_buf_unref>
   1fe2a:	e7f8      	b.n	1fe1e <bt_smp_recv+0x42>

0001fe2c <bt_smp_sign>:
}
   1fe2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fe30:	4770      	bx	lr

0001fe32 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1fe32:	2000      	movs	r0, #0
   1fe34:	4770      	bx	lr

0001fe36 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   1fe36:	4770      	bx	lr

0001fe38 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   1fe38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe3c:	4604      	mov	r4, r0
   1fe3e:	460d      	mov	r5, r1
   1fe40:	4617      	mov	r7, r2
   1fe42:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fe44:	7980      	ldrb	r0, [r0, #6]
   1fe46:	f7f8 fcb5 	bl	187b4 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   1fe4a:	6a03      	ldr	r3, [r0, #32]
   1fe4c:	681b      	ldr	r3, [r3, #0]
   1fe4e:	f8d3 8000 	ldr.w	r8, [r3]
   1fe52:	463a      	mov	r2, r7
   1fe54:	4633      	mov	r3, r6
   1fe56:	4629      	mov	r1, r5
   1fe58:	4620      	mov	r0, r4
   1fe5a:	47c0      	blx	r8
}
   1fe5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fe60 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   1fe60:	b538      	push	{r3, r4, r5, lr}
   1fe62:	4604      	mov	r4, r0
   1fe64:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fe66:	7980      	ldrb	r0, [r0, #6]
   1fe68:	f7f8 fca4 	bl	187b4 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1fe6c:	7963      	ldrb	r3, [r4, #5]
   1fe6e:	f013 0f02 	tst.w	r3, #2
   1fe72:	d105      	bne.n	1fe80 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   1fe74:	6a03      	ldr	r3, [r0, #32]
   1fe76:	681b      	ldr	r3, [r3, #0]
   1fe78:	689b      	ldr	r3, [r3, #8]
   1fe7a:	4629      	mov	r1, r5
   1fe7c:	4620      	mov	r0, r4
   1fe7e:	4798      	blx	r3
}
   1fe80:	bd38      	pop	{r3, r4, r5, pc}

0001fe82 <fixed_data_alloc>:
{
   1fe82:	b570      	push	{r4, r5, r6, lr}
   1fe84:	4604      	mov	r4, r0
   1fe86:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fe88:	7980      	ldrb	r0, [r0, #6]
   1fe8a:	f7f8 fc93 	bl	187b4 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fe8e:	6a03      	ldr	r3, [r0, #32]
   1fe90:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1fe92:	682a      	ldr	r2, [r5, #0]
   1fe94:	6819      	ldr	r1, [r3, #0]
   1fe96:	428a      	cmp	r2, r1
   1fe98:	bf28      	it	cs
   1fe9a:	460a      	movcs	r2, r1
   1fe9c:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1fe9e:	685d      	ldr	r5, [r3, #4]
   1fea0:	681e      	ldr	r6, [r3, #0]
   1fea2:	4620      	mov	r0, r4
   1fea4:	f7f8 fc8e 	bl	187c4 <net_buf_id>
}
   1fea8:	fb00 5006 	mla	r0, r0, r6, r5
   1feac:	bd70      	pop	{r4, r5, r6, pc}

0001feae <net_buf_reset>:
	buf->len  = 0U;
   1feae:	2300      	movs	r3, #0
   1feb0:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   1feb2:	6903      	ldr	r3, [r0, #16]
   1feb4:	6083      	str	r3, [r0, #8]
}
   1feb6:	4770      	bx	lr

0001feb8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1febc:	b083      	sub	sp, #12
   1febe:	4605      	mov	r5, r0
   1fec0:	9101      	str	r1, [sp, #4]
   1fec2:	4616      	mov	r6, r2
   1fec4:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fec6:	4610      	mov	r0, r2
   1fec8:	4619      	mov	r1, r3
   1feca:	f001 fdc1 	bl	21a50 <sys_clock_timeout_end_calc>
   1fece:	4682      	mov	sl, r0
   1fed0:	9100      	str	r1, [sp, #0]
   1fed2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fed6:	f3ef 8b11 	mrs	fp, BASEPRI
   1feda:	f383 8812 	msr	BASEPRI_MAX, r3
   1fede:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1fee2:	8b6b      	ldrh	r3, [r5, #26]
   1fee4:	2b00      	cmp	r3, #0
   1fee6:	d03f      	beq.n	1ff68 <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1fee8:	8b2a      	ldrh	r2, [r5, #24]
   1feea:	4293      	cmp	r3, r2
   1feec:	d32f      	bcc.n	1ff4e <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1feee:	8b6a      	ldrh	r2, [r5, #26]
   1fef0:	1e53      	subs	r3, r2, #1
   1fef2:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
   1fef4:	f38b 8811 	msr	BASEPRI, fp
   1fef8:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1fefc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1fefe:	8b2b      	ldrh	r3, [r5, #24]
   1ff00:	1a9b      	subs	r3, r3, r2
   1ff02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ff06:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
   1ff0a:	4628      	mov	r0, r5
   1ff0c:	f7f8 fc46 	bl	1879c <pool_id>
   1ff10:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1ff12:	9b01      	ldr	r3, [sp, #4]
   1ff14:	2b00      	cmp	r3, #0
   1ff16:	d046      	beq.n	1ffa6 <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1ff18:	ea56 0307 	orrs.w	r3, r6, r7
   1ff1c:	d005      	beq.n	1ff2a <net_buf_alloc_len+0x72>
   1ff1e:	f1b7 3fff 	cmp.w	r7, #4294967295
   1ff22:	bf08      	it	eq
   1ff24:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1ff28:	d12b      	bne.n	1ff82 <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1ff2a:	4632      	mov	r2, r6
   1ff2c:	463b      	mov	r3, r7
   1ff2e:	a901      	add	r1, sp, #4
   1ff30:	4620      	mov	r0, r4
   1ff32:	f7ff ff81 	bl	1fe38 <data_alloc>
   1ff36:	4605      	mov	r5, r0
   1ff38:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1ff3a:	2800      	cmp	r0, #0
   1ff3c:	d135      	bne.n	1ffaa <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ff3e:	79a0      	ldrb	r0, [r4, #6]
   1ff40:	f7f8 fc38 	bl	187b4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1ff44:	4621      	mov	r1, r4
   1ff46:	f001 f9d9 	bl	212fc <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1ff4a:	462c      	mov	r4, r5
}
   1ff4c:	e037      	b.n	1ffbe <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
   1ff4e:	2200      	movs	r2, #0
   1ff50:	2300      	movs	r3, #0
   1ff52:	4628      	mov	r0, r5
   1ff54:	f7fb f846 	bl	1afe4 <z_impl_k_queue_get>
			if (buf) {
   1ff58:	4604      	mov	r4, r0
   1ff5a:	2800      	cmp	r0, #0
   1ff5c:	d0c7      	beq.n	1feee <net_buf_alloc_len+0x36>
   1ff5e:	f38b 8811 	msr	BASEPRI, fp
   1ff62:	f3bf 8f6f 	isb	sy
				goto success;
   1ff66:	e7d4      	b.n	1ff12 <net_buf_alloc_len+0x5a>
   1ff68:	f38b 8811 	msr	BASEPRI, fp
   1ff6c:	f3bf 8f6f 	isb	sy
   1ff70:	4632      	mov	r2, r6
   1ff72:	463b      	mov	r3, r7
   1ff74:	4628      	mov	r0, r5
   1ff76:	f7fb f835 	bl	1afe4 <z_impl_k_queue_get>
	if (!buf) {
   1ff7a:	4604      	mov	r4, r0
   1ff7c:	2800      	cmp	r0, #0
   1ff7e:	d1c8      	bne.n	1ff12 <net_buf_alloc_len+0x5a>
   1ff80:	e01d      	b.n	1ffbe <net_buf_alloc_len+0x106>
			int64_t remaining = end - sys_clock_tick_get();
   1ff82:	f7fc f807 	bl	1bf94 <sys_clock_tick_get>
   1ff86:	ebba 0800 	subs.w	r8, sl, r0
   1ff8a:	9b00      	ldr	r3, [sp, #0]
   1ff8c:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   1ff90:	f1b8 0f01 	cmp.w	r8, #1
   1ff94:	f179 0300 	sbcs.w	r3, r9, #0
   1ff98:	db02      	blt.n	1ffa0 <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
   1ff9a:	4646      	mov	r6, r8
   1ff9c:	464f      	mov	r7, r9
   1ff9e:	e7c4      	b.n	1ff2a <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
   1ffa0:	2600      	movs	r6, #0
   1ffa2:	2700      	movs	r7, #0
   1ffa4:	e7c1      	b.n	1ff2a <net_buf_alloc_len+0x72>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   1ffa6:	2300      	movs	r3, #0
   1ffa8:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   1ffaa:	2301      	movs	r3, #1
   1ffac:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   1ffae:	2300      	movs	r3, #0
   1ffb0:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1ffb2:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   1ffb4:	9b01      	ldr	r3, [sp, #4]
   1ffb6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1ffb8:	4620      	mov	r0, r4
   1ffba:	f7ff ff78 	bl	1feae <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1ffbe:	4620      	mov	r0, r4
   1ffc0:	b003      	add	sp, #12
   1ffc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001ffc6 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   1ffc6:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1ffc8:	6a01      	ldr	r1, [r0, #32]
   1ffca:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1ffcc:	6809      	ldr	r1, [r1, #0]
   1ffce:	f7ff ff73 	bl	1feb8 <net_buf_alloc_len>
}
   1ffd2:	bd08      	pop	{r3, pc}

0001ffd4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1ffd4:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   1ffd6:	4605      	mov	r5, r0
   1ffd8:	f7fb f804 	bl	1afe4 <z_impl_k_queue_get>
	if (!buf) {
   1ffdc:	4606      	mov	r6, r0
   1ffde:	b190      	cbz	r0, 20006 <CONFIG_PM_SRAM_SIZE+0x6>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ffe0:	4604      	mov	r4, r0
   1ffe2:	e00a      	b.n	1fffa <net_buf_get+0x26>
   1ffe4:	2200      	movs	r2, #0
   1ffe6:	2300      	movs	r3, #0
   1ffe8:	4628      	mov	r0, r5
   1ffea:	f7fa fffb 	bl	1afe4 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ffee:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1fff0:	7963      	ldrb	r3, [r4, #5]
   1fff2:	f023 0301 	bic.w	r3, r3, #1
   1fff6:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fff8:	4604      	mov	r4, r0
   1fffa:	7963      	ldrb	r3, [r4, #5]
   1fffc:	f013 0f01 	tst.w	r3, #1
   20000:	d1f0      	bne.n	1ffe4 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   20002:	2300      	movs	r3, #0
   20004:	6023      	str	r3, [r4, #0]

	return buf;
}
   20006:	4630      	mov	r0, r6
   20008:	bd70      	pop	{r4, r5, r6, pc}

0002000a <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2000a:	6883      	ldr	r3, [r0, #8]
   2000c:	440b      	add	r3, r1
   2000e:	6003      	str	r3, [r0, #0]
}
   20010:	4770      	bx	lr

00020012 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   20012:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   20014:	460a      	mov	r2, r1
   20016:	6814      	ldr	r4, [r2, #0]
   20018:	b12c      	cbz	r4, 20026 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   2001a:	7953      	ldrb	r3, [r2, #5]
   2001c:	f043 0301 	orr.w	r3, r3, #1
   20020:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   20022:	4622      	mov	r2, r4
   20024:	e7f7      	b.n	20016 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   20026:	f001 f974 	bl	21312 <k_queue_append_list>
}
   2002a:	bd10      	pop	{r4, pc}

0002002c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2002c:	b538      	push	{r3, r4, r5, lr}
   2002e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   20030:	e00f      	b.n	20052 <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   20032:	4620      	mov	r0, r4
   20034:	f7ff ff14 	bl	1fe60 <data_unref>
			buf->__buf = NULL;
   20038:	2300      	movs	r3, #0
   2003a:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   2003c:	2300      	movs	r3, #0
   2003e:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   20040:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   20042:	79a0      	ldrb	r0, [r4, #6]
   20044:	f7f8 fbb6 	bl	187b4 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   20048:	69c3      	ldr	r3, [r0, #28]
   2004a:	b16b      	cbz	r3, 20068 <net_buf_unref+0x3c>
			pool->destroy(buf);
   2004c:	4620      	mov	r0, r4
   2004e:	4798      	blx	r3
{
   20050:	462c      	mov	r4, r5
	while (buf) {
   20052:	b184      	cbz	r4, 20076 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   20054:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   20056:	7923      	ldrb	r3, [r4, #4]
   20058:	3b01      	subs	r3, #1
   2005a:	b2db      	uxtb	r3, r3
   2005c:	7123      	strb	r3, [r4, #4]
   2005e:	b953      	cbnz	r3, 20076 <net_buf_unref+0x4a>
		if (buf->__buf) {
   20060:	6921      	ldr	r1, [r4, #16]
   20062:	2900      	cmp	r1, #0
   20064:	d1e5      	bne.n	20032 <net_buf_unref+0x6>
   20066:	e7e9      	b.n	2003c <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20068:	79a0      	ldrb	r0, [r4, #6]
   2006a:	f7f8 fba3 	bl	187b4 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2006e:	4621      	mov	r1, r4
   20070:	f001 f944 	bl	212fc <k_queue_prepend>
}
   20074:	e7ec      	b.n	20050 <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   20076:	bd38      	pop	{r3, r4, r5, pc}

00020078 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   20078:	7902      	ldrb	r2, [r0, #4]
   2007a:	3201      	adds	r2, #1
   2007c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2007e:	4770      	bx	lr

00020080 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20080:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   20082:	4618      	mov	r0, r3
   20084:	681b      	ldr	r3, [r3, #0]
   20086:	2b00      	cmp	r3, #0
   20088:	d1fb      	bne.n	20082 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2008a:	4770      	bx	lr

0002008c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2008c:	b570      	push	{r4, r5, r6, lr}
   2008e:	4604      	mov	r4, r0
   20090:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   20092:	6806      	ldr	r6, [r0, #0]
   20094:	b11e      	cbz	r6, 2009e <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   20096:	4608      	mov	r0, r1
   20098:	f7ff fff2 	bl	20080 <net_buf_frag_last>
   2009c:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2009e:	6025      	str	r5, [r4, #0]
}
   200a0:	bd70      	pop	{r4, r5, r6, pc}

000200a2 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   200a2:	b538      	push	{r3, r4, r5, lr}
   200a4:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   200a6:	b138      	cbz	r0, 200b8 <net_buf_frag_add+0x16>
   200a8:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   200aa:	f7ff ffe9 	bl	20080 <net_buf_frag_last>
   200ae:	4629      	mov	r1, r5
   200b0:	f7ff ffec 	bl	2008c <net_buf_frag_insert>

	return head;
   200b4:	4620      	mov	r0, r4
}
   200b6:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   200b8:	4608      	mov	r0, r1
   200ba:	f7ff ffdd 	bl	20078 <net_buf_ref>
   200be:	e7fa      	b.n	200b6 <net_buf_frag_add+0x14>

000200c0 <net_buf_simple_add>:
	return buf->data + buf->len;
   200c0:	6802      	ldr	r2, [r0, #0]
   200c2:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   200c4:	4419      	add	r1, r3
   200c6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   200c8:	18d0      	adds	r0, r2, r3
   200ca:	4770      	bx	lr

000200cc <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   200cc:	b538      	push	{r3, r4, r5, lr}
   200ce:	460d      	mov	r5, r1
   200d0:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   200d2:	4611      	mov	r1, r2
   200d4:	f7ff fff4 	bl	200c0 <net_buf_simple_add>
   200d8:	4622      	mov	r2, r4
   200da:	4629      	mov	r1, r5
   200dc:	f7fd fea3 	bl	1de26 <memcpy>
}
   200e0:	bd38      	pop	{r3, r4, r5, pc}

000200e2 <net_buf_simple_add_u8>:

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   200e2:	b510      	push	{r4, lr}
   200e4:	460c      	mov	r4, r1
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   200e6:	2101      	movs	r1, #1
   200e8:	f7ff ffea 	bl	200c0 <net_buf_simple_add>
	*u8 = val;
   200ec:	7004      	strb	r4, [r0, #0]

	return u8;
}
   200ee:	bd10      	pop	{r4, pc}

000200f0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   200f0:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   200f2:	6800      	ldr	r0, [r0, #0]
   200f4:	1a40      	subs	r0, r0, r1
   200f6:	6018      	str	r0, [r3, #0]
	buf->len += len;
   200f8:	889a      	ldrh	r2, [r3, #4]
   200fa:	4411      	add	r1, r2
   200fc:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   200fe:	4770      	bx	lr

00020100 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   20100:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20102:	8882      	ldrh	r2, [r0, #4]
   20104:	1a52      	subs	r2, r2, r1
   20106:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   20108:	6800      	ldr	r0, [r0, #0]
   2010a:	4408      	add	r0, r1
   2010c:	6018      	str	r0, [r3, #0]
}
   2010e:	4770      	bx	lr

00020110 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   20110:	4603      	mov	r3, r0
	void *data = buf->data;
   20112:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20114:	889a      	ldrh	r2, [r3, #4]
   20116:	1a52      	subs	r2, r2, r1
   20118:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2011a:	4401      	add	r1, r0
   2011c:	6019      	str	r1, [r3, #0]

	return data;
}
   2011e:	4770      	bx	lr

00020120 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   20120:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   20122:	6803      	ldr	r3, [r0, #0]
   20124:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20126:	2102      	movs	r1, #2
   20128:	f7ff ffea 	bl	20100 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2012c:	4620      	mov	r0, r4
   2012e:	bd10      	pop	{r4, pc}

00020130 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   20130:	6802      	ldr	r2, [r0, #0]
   20132:	6880      	ldr	r0, [r0, #8]
}
   20134:	1a10      	subs	r0, r2, r0
   20136:	4770      	bx	lr

00020138 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   20138:	b538      	push	{r3, r4, r5, lr}
   2013a:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2013c:	88c5      	ldrh	r5, [r0, #6]
   2013e:	f7ff fff7 	bl	20130 <net_buf_simple_headroom>
   20142:	1a2d      	subs	r5, r5, r0
   20144:	88a0      	ldrh	r0, [r4, #4]
}
   20146:	1a28      	subs	r0, r5, r0
   20148:	bd38      	pop	{r3, r4, r5, pc}

0002014a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2014a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2014c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   20150:	0089      	lsls	r1, r1, #2
   20152:	3138      	adds	r1, #56	; 0x38
}
   20154:	4408      	add	r0, r1
   20156:	4770      	bx	lr

00020158 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   20158:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2015a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2015e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   20162:	4770      	bx	lr

00020164 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   20164:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   20166:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2016a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2016e:	4770      	bx	lr

00020170 <get_status>:
{
   20170:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   20172:	b2c9      	uxtb	r1, r1
   20174:	f7ff ffe9 	bl	2014a <get_sub_data>
   20178:	6880      	ldr	r0, [r0, #8]
}
   2017a:	f000 0007 	and.w	r0, r0, #7
   2017e:	bd08      	pop	{r3, pc}

00020180 <set_off_state>:
	__asm__ volatile(
   20180:	f04f 0340 	mov.w	r3, #64	; 0x40
   20184:	f3ef 8211 	mrs	r2, BASEPRI
   20188:	f383 8812 	msr	BASEPRI_MAX, r3
   2018c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   20190:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   20192:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   20196:	d001      	beq.n	2019c <set_off_state+0x1c>
   20198:	428b      	cmp	r3, r1
   2019a:	d107      	bne.n	201ac <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2019c:	2301      	movs	r3, #1
   2019e:	6003      	str	r3, [r0, #0]
	int err = 0;
   201a0:	2000      	movs	r0, #0
	__asm__ volatile(
   201a2:	f382 8811 	msr	BASEPRI, r2
   201a6:	f3bf 8f6f 	isb	sy
}
   201aa:	4770      	bx	lr
		err = -EPERM;
   201ac:	f04f 30ff 	mov.w	r0, #4294967295
   201b0:	e7f7      	b.n	201a2 <set_off_state+0x22>

000201b2 <set_starting_state>:
{
   201b2:	b410      	push	{r4}
	__asm__ volatile(
   201b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   201b8:	f3ef 8211 	mrs	r2, BASEPRI
   201bc:	f383 8812 	msr	BASEPRI_MAX, r3
   201c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   201c4:	6803      	ldr	r3, [r0, #0]
   201c6:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   201ca:	f003 0307 	and.w	r3, r3, #7
   201ce:	2b01      	cmp	r3, #1
   201d0:	d009      	beq.n	201e6 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   201d2:	428c      	cmp	r4, r1
   201d4:	d00a      	beq.n	201ec <set_starting_state+0x3a>
		err = -EPERM;
   201d6:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   201da:	f382 8811 	msr	BASEPRI, r2
   201de:	f3bf 8f6f 	isb	sy
}
   201e2:	bc10      	pop	{r4}
   201e4:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   201e6:	6001      	str	r1, [r0, #0]
	int err = 0;
   201e8:	2000      	movs	r0, #0
   201ea:	e7f6      	b.n	201da <set_starting_state+0x28>
		err = -EALREADY;
   201ec:	f06f 0077 	mvn.w	r0, #119	; 0x77
   201f0:	e7f3      	b.n	201da <set_starting_state+0x28>

000201f2 <set_on_state>:
	__asm__ volatile(
   201f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   201f6:	f3ef 8211 	mrs	r2, BASEPRI
   201fa:	f383 8812 	msr	BASEPRI_MAX, r3
   201fe:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   20202:	6803      	ldr	r3, [r0, #0]
   20204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   20208:	f043 0302 	orr.w	r3, r3, #2
   2020c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2020e:	f382 8811 	msr	BASEPRI, r2
   20212:	f3bf 8f6f 	isb	sy
}
   20216:	4770      	bx	lr

00020218 <clkstarted_handle>:
{
   20218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2021a:	4606      	mov	r6, r0
   2021c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2021e:	f7ff ff94 	bl	2014a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   20222:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   20224:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   20226:	2300      	movs	r3, #0
   20228:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2022c:	f7ff ffe1 	bl	201f2 <set_on_state>
	if (callback) {
   20230:	b11d      	cbz	r5, 2023a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20232:	463a      	mov	r2, r7
   20234:	4621      	mov	r1, r4
   20236:	4630      	mov	r0, r6
   20238:	47a8      	blx	r5
}
   2023a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002023c <stop>:
{
   2023c:	b570      	push	{r4, r5, r6, lr}
   2023e:	4606      	mov	r6, r0
   20240:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   20242:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   20244:	4621      	mov	r1, r4
   20246:	f7ff ff80 	bl	2014a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2024a:	4629      	mov	r1, r5
   2024c:	3008      	adds	r0, #8
   2024e:	f7ff ff97 	bl	20180 <set_off_state>
	if (err < 0) {
   20252:	2800      	cmp	r0, #0
   20254:	db06      	blt.n	20264 <stop+0x28>
	get_sub_config(dev, type)->stop();
   20256:	4621      	mov	r1, r4
   20258:	4630      	mov	r0, r6
   2025a:	f7ff ff7d 	bl	20158 <get_sub_config>
   2025e:	6843      	ldr	r3, [r0, #4]
   20260:	4798      	blx	r3
	return 0;
   20262:	2000      	movs	r0, #0
}
   20264:	bd70      	pop	{r4, r5, r6, pc}

00020266 <api_stop>:
{
   20266:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   20268:	2280      	movs	r2, #128	; 0x80
   2026a:	f7ff ffe7 	bl	2023c <stop>
}
   2026e:	bd08      	pop	{r3, pc}

00020270 <async_start>:
{
   20270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20274:	4606      	mov	r6, r0
   20276:	4690      	mov	r8, r2
   20278:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2027a:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2027c:	4629      	mov	r1, r5
   2027e:	f7ff ff64 	bl	2014a <get_sub_data>
   20282:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   20284:	9906      	ldr	r1, [sp, #24]
   20286:	3008      	adds	r0, #8
   20288:	f7ff ff93 	bl	201b2 <set_starting_state>
	if (err < 0) {
   2028c:	2800      	cmp	r0, #0
   2028e:	db09      	blt.n	202a4 <async_start+0x34>
	subdata->cb = cb;
   20290:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   20294:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   20296:	4629      	mov	r1, r5
   20298:	4630      	mov	r0, r6
   2029a:	f7ff ff5d 	bl	20158 <get_sub_config>
   2029e:	6803      	ldr	r3, [r0, #0]
   202a0:	4798      	blx	r3
	return 0;
   202a2:	2000      	movs	r0, #0
}
   202a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000202a8 <api_start>:
{
   202a8:	b510      	push	{r4, lr}
   202aa:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   202ac:	2480      	movs	r4, #128	; 0x80
   202ae:	9400      	str	r4, [sp, #0]
   202b0:	f7ff ffde 	bl	20270 <async_start>
}
   202b4:	b002      	add	sp, #8
   202b6:	bd10      	pop	{r4, pc}

000202b8 <onoff_started_callback>:
{
   202b8:	b510      	push	{r4, lr}
   202ba:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   202bc:	b2c9      	uxtb	r1, r1
   202be:	f7ff ff51 	bl	20164 <get_onoff_manager>
	notify(mgr, 0);
   202c2:	2100      	movs	r1, #0
   202c4:	47a0      	blx	r4
}
   202c6:	bd10      	pop	{r4, pc}

000202c8 <hfclk_start>:
{
   202c8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   202ca:	2001      	movs	r0, #1
   202cc:	f7f9 ffee 	bl	1a2ac <nrfx_clock_start>
}
   202d0:	bd08      	pop	{r3, pc}

000202d2 <lfclk_start>:
{
   202d2:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   202d4:	2000      	movs	r0, #0
   202d6:	f7f9 ffe9 	bl	1a2ac <nrfx_clock_start>
}
   202da:	bd08      	pop	{r3, pc}

000202dc <hfclk_stop>:
{
   202dc:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   202de:	2001      	movs	r0, #1
   202e0:	f000 fe0d 	bl	20efe <nrfx_clock_stop>
}
   202e4:	bd08      	pop	{r3, pc}

000202e6 <lfclk_stop>:
{
   202e6:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   202e8:	2000      	movs	r0, #0
   202ea:	f000 fe08 	bl	20efe <nrfx_clock_stop>
}
   202ee:	bd08      	pop	{r3, pc}

000202f0 <blocking_start_callback>:
{
   202f0:	b508      	push	{r3, lr}
   202f2:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   202f4:	f7fa feb2 	bl	1b05c <z_impl_k_sem_give>
}
   202f8:	bd08      	pop	{r3, pc}

000202fa <gpio_nrfx_port_get_raw>:
	return port->config;
   202fa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   202fc:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   202fe:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   20302:	600b      	str	r3, [r1, #0]
}
   20304:	2000      	movs	r0, #0
   20306:	4770      	bx	lr

00020308 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   20308:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2030a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2030c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   20310:	4042      	eors	r2, r0
   20312:	400a      	ands	r2, r1
   20314:	4042      	eors	r2, r0
    p_reg->OUT = value;
   20316:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2031a:	2000      	movs	r0, #0
   2031c:	4770      	bx	lr

0002031e <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2031e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20320:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   20322:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   20326:	2000      	movs	r0, #0
   20328:	4770      	bx	lr

0002032a <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2032a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2032c:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2032e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   20332:	2000      	movs	r0, #0
   20334:	4770      	bx	lr

00020336 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   20336:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20338:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2033a:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2033e:	404b      	eors	r3, r1
    p_reg->OUT = value;
   20340:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   20344:	2000      	movs	r0, #0
   20346:	4770      	bx	lr

00020348 <gpio_nrfx_manage_callback>:
{
   20348:	b470      	push	{r4, r5, r6}
	return port->data;
   2034a:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2034c:	1d05      	adds	r5, r0, #4
	return list->head;
   2034e:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   20350:	b1db      	cbz	r3, 2038a <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   20352:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20354:	2400      	movs	r4, #0
   20356:	e00a      	b.n	2036e <gpio_nrfx_manage_callback+0x26>
	return node->next;
   20358:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   2035a:	6043      	str	r3, [r0, #4]
	return list->tail;
   2035c:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2035e:	42a1      	cmp	r1, r4
   20360:	d10f      	bne.n	20382 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   20362:	606b      	str	r3, [r5, #4]
}
   20364:	e00d      	b.n	20382 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   20366:	606c      	str	r4, [r5, #4]
}
   20368:	e00b      	b.n	20382 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2036a:	461c      	mov	r4, r3
   2036c:	681b      	ldr	r3, [r3, #0]
   2036e:	b15b      	cbz	r3, 20388 <gpio_nrfx_manage_callback+0x40>
   20370:	429e      	cmp	r6, r3
   20372:	d1fa      	bne.n	2036a <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   20374:	2c00      	cmp	r4, #0
   20376:	d0ef      	beq.n	20358 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   20378:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   2037a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2037c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2037e:	4299      	cmp	r1, r3
   20380:	d0f1      	beq.n	20366 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   20382:	2300      	movs	r3, #0
   20384:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20386:	e000      	b.n	2038a <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   20388:	b152      	cbz	r2, 203a0 <gpio_nrfx_manage_callback+0x58>
	if (set) {
   2038a:	b162      	cbz	r2, 203a6 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   2038c:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   2038e:	600b      	str	r3, [r1, #0]
	list->head = node;
   20390:	6041      	str	r1, [r0, #4]
	return list->tail;
   20392:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   20394:	b10b      	cbz	r3, 2039a <gpio_nrfx_manage_callback+0x52>
	return 0;
   20396:	2000      	movs	r0, #0
   20398:	e006      	b.n	203a8 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2039a:	6069      	str	r1, [r5, #4]
   2039c:	2000      	movs	r0, #0
}
   2039e:	e003      	b.n	203a8 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   203a0:	f06f 0015 	mvn.w	r0, #21
   203a4:	e000      	b.n	203a8 <gpio_nrfx_manage_callback+0x60>
	return 0;
   203a6:	2000      	movs	r0, #0
}
   203a8:	bc70      	pop	{r4, r5, r6}
   203aa:	4770      	bx	lr

000203ac <endtx_isr>:
	return dev->config;
   203ac:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   203ae:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   203b0:	f04f 0140 	mov.w	r1, #64	; 0x40
   203b4:	f3ef 8211 	mrs	r2, BASEPRI
   203b8:	f381 8812 	msr	BASEPRI_MAX, r1
   203bc:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203c0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   203c4:	b131      	cbz	r1, 203d4 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   203c6:	2100      	movs	r1, #0
   203c8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   203cc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   203d0:	2101      	movs	r1, #1
   203d2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   203d4:	f382 8811 	msr	BASEPRI, r2
   203d8:	f3bf 8f6f 	isb	sy
}
   203dc:	4770      	bx	lr

000203de <uarte_nrfx_isr_int>:
{
   203de:	b538      	push	{r3, r4, r5, lr}
   203e0:	4604      	mov	r4, r0
	return dev->config;
   203e2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   203e4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   203e6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   203ea:	f413 7f80 	tst.w	r3, #256	; 0x100
   203ee:	d002      	beq.n	203f6 <uarte_nrfx_isr_int+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   203f0:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   203f4:	b9db      	cbnz	r3, 2042e <uarte_nrfx_isr_int+0x50>
	return dev->config;
   203f6:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   203f8:	685b      	ldr	r3, [r3, #4]
   203fa:	f013 0f10 	tst.w	r3, #16
   203fe:	d015      	beq.n	2042c <uarte_nrfx_isr_int+0x4e>
	__asm__ volatile(
   20400:	f04f 0240 	mov.w	r2, #64	; 0x40
   20404:	f3ef 8311 	mrs	r3, BASEPRI
   20408:	f382 8812 	msr	BASEPRI_MAX, r2
   2040c:	f3bf 8f6f 	isb	sy
   20410:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   20414:	b112      	cbz	r2, 2041c <uarte_nrfx_isr_int+0x3e>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20416:	2200      	movs	r2, #0
   20418:	f8c5 2500 	str.w	r2, [r5, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2041c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   20420:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
	__asm__ volatile(
   20424:	f383 8811 	msr	BASEPRI, r3
   20428:	f3bf 8f6f 	isb	sy
}
   2042c:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2042e:	f7ff ffbd 	bl	203ac <endtx_isr>
   20432:	e7e0      	b.n	203f6 <uarte_nrfx_isr_int+0x18>

00020434 <uarte_nrfx_configure>:
{
   20434:	b530      	push	{r4, r5, lr}
   20436:	b083      	sub	sp, #12
   20438:	4605      	mov	r5, r0
   2043a:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   2043c:	794b      	ldrb	r3, [r1, #5]
   2043e:	2b01      	cmp	r3, #1
   20440:	d006      	beq.n	20450 <uarte_nrfx_configure+0x1c>
   20442:	2b03      	cmp	r3, #3
   20444:	d011      	beq.n	2046a <uarte_nrfx_configure+0x36>
   20446:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
   2044a:	4610      	mov	r0, r2
   2044c:	b003      	add	sp, #12
   2044e:	bd30      	pop	{r4, r5, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   20450:	2300      	movs	r3, #0
   20452:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   20456:	79a3      	ldrb	r3, [r4, #6]
   20458:	2b03      	cmp	r3, #3
   2045a:	d14f      	bne.n	204fc <uarte_nrfx_configure+0xc8>
	switch (cfg->flow_ctrl) {
   2045c:	79e3      	ldrb	r3, [r4, #7]
   2045e:	b143      	cbz	r3, 20472 <uarte_nrfx_configure+0x3e>
   20460:	2b01      	cmp	r3, #1
   20462:	d015      	beq.n	20490 <uarte_nrfx_configure+0x5c>
   20464:	f06f 0285 	mvn.w	r2, #133	; 0x85
   20468:	e7ef      	b.n	2044a <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2046a:	2310      	movs	r3, #16
   2046c:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
   20470:	e7f1      	b.n	20456 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   20472:	2300      	movs	r3, #0
   20474:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   20478:	2300      	movs	r3, #0
   2047a:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
   2047e:	7923      	ldrb	r3, [r4, #4]
   20480:	2b01      	cmp	r3, #1
   20482:	d033      	beq.n	204ec <uarte_nrfx_configure+0xb8>
   20484:	2b02      	cmp	r3, #2
   20486:	d02d      	beq.n	204e4 <uarte_nrfx_configure+0xb0>
   20488:	b173      	cbz	r3, 204a8 <uarte_nrfx_configure+0x74>
   2048a:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2048e:	e7dc      	b.n	2044a <uarte_nrfx_configure+0x16>
	return dev->config;
   20490:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   20492:	685b      	ldr	r3, [r3, #4]
   20494:	f003 0201 	and.w	r2, r3, #1
   20498:	f003 0302 	and.w	r3, r3, #2
   2049c:	4313      	orrs	r3, r2
   2049e:	d030      	beq.n	20502 <uarte_nrfx_configure+0xce>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   204a0:	2301      	movs	r3, #1
   204a2:	f88d 3000 	strb.w	r3, [sp]
		break;
   204a6:	e7e7      	b.n	20478 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   204a8:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   204ac:	6821      	ldr	r1, [r4, #0]
   204ae:	4628      	mov	r0, r5
   204b0:	f7f8 fe3e 	bl	19130 <baudrate_set>
   204b4:	4602      	mov	r2, r0
   204b6:	bb38      	cbnz	r0, 20508 <uarte_nrfx_configure+0xd4>
	return dev->config;
   204b8:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
   204ba:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   204bc:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
   204c0:	f89d 0002 	ldrb.w	r0, [sp, #2]
   204c4:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
   204c6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   204ca:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
   204cc:	f89d 0000 	ldrb.w	r0, [sp]
   204d0:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   204d2:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	return dev->data;
   204d6:	692b      	ldr	r3, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   204d8:	3304      	adds	r3, #4
   204da:	e894 0003 	ldmia.w	r4, {r0, r1}
   204de:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   204e2:	e7b2      	b.n	2044a <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   204e4:	230e      	movs	r3, #14
   204e6:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
   204ea:	e7df      	b.n	204ac <uarte_nrfx_configure+0x78>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   204ec:	230e      	movs	r3, #14
   204ee:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   204f2:	f44f 7380 	mov.w	r3, #256	; 0x100
   204f6:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
   204fa:	e7d7      	b.n	204ac <uarte_nrfx_configure+0x78>
		return -ENOTSUP;
   204fc:	f06f 0285 	mvn.w	r2, #133	; 0x85
   20500:	e7a3      	b.n	2044a <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   20502:	f06f 0285 	mvn.w	r2, #133	; 0x85
   20506:	e7a0      	b.n	2044a <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   20508:	f06f 0285 	mvn.w	r2, #133	; 0x85
   2050c:	e79d      	b.n	2044a <uarte_nrfx_configure+0x16>

0002050e <uarte_nrfx_config_get>:
{
   2050e:	460b      	mov	r3, r1
	return dev->data;
   20510:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   20512:	6891      	ldr	r1, [r2, #8]
   20514:	6850      	ldr	r0, [r2, #4]
   20516:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2051a:	2000      	movs	r0, #0
   2051c:	4770      	bx	lr

0002051e <uarte_nrfx_err_check>:
	return dev->config;
   2051e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   20520:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   20522:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   20526:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2052a:	4770      	bx	lr

0002052c <is_tx_ready>:
	return dev->config;
   2052c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2052e:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   20530:	685b      	ldr	r3, [r3, #4]
   20532:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20536:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2053a:	b929      	cbnz	r1, 20548 <is_tx_ready+0x1c>
   2053c:	b933      	cbnz	r3, 2054c <is_tx_ready+0x20>
   2053e:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   20542:	b92b      	cbnz	r3, 20550 <is_tx_ready+0x24>
   20544:	2000      	movs	r0, #0
   20546:	4770      	bx	lr
   20548:	2001      	movs	r0, #1
   2054a:	4770      	bx	lr
   2054c:	2000      	movs	r0, #0
   2054e:	4770      	bx	lr
   20550:	2001      	movs	r0, #1
}
   20552:	4770      	bx	lr

00020554 <uarte_enable>:
	return dev->config;
   20554:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   20556:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   20558:	2208      	movs	r2, #8
   2055a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2055e:	4770      	bx	lr

00020560 <tx_start>:
{
   20560:	b510      	push	{r4, lr}
	return dev->config;
   20562:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   20564:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   20566:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2056a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2056e:	2300      	movs	r3, #0
   20570:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   20574:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   20578:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   2057c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   20580:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20582:	685b      	ldr	r3, [r3, #4]
   20584:	f013 0f10 	tst.w	r3, #16
   20588:	d102      	bne.n	20590 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2058a:	2301      	movs	r3, #1
   2058c:	60a3      	str	r3, [r4, #8]
}
   2058e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   20590:	2101      	movs	r1, #1
   20592:	f7ff ffdf 	bl	20554 <uarte_enable>
    p_reg->INTENSET = mask;
   20596:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2059a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2059e:	e7f4      	b.n	2058a <tx_start+0x2a>

000205a0 <uarte_nrfx_poll_in>:
{
   205a0:	b410      	push	{r4}
	return dev->data;
   205a2:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   205a4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   205a6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   205a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   205ac:	b152      	cbz	r2, 205c4 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   205ae:	7c62      	ldrb	r2, [r4, #17]
   205b0:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   205b2:	2000      	movs	r0, #0
   205b4:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   205b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   205bc:	2201      	movs	r2, #1
   205be:	601a      	str	r2, [r3, #0]
}
   205c0:	bc10      	pop	{r4}
   205c2:	4770      	bx	lr
		return -1;
   205c4:	f04f 30ff 	mov.w	r0, #4294967295
   205c8:	e7fa      	b.n	205c0 <uarte_nrfx_poll_in+0x20>

000205ca <wait_tx_ready>:
{
   205ca:	b570      	push	{r4, r5, r6, lr}
   205cc:	4606      	mov	r6, r0
   205ce:	e014      	b.n	205fa <wait_tx_ready+0x30>
		if (res) {
   205d0:	b17d      	cbz	r5, 205f2 <wait_tx_ready+0x28>
	__asm__ volatile(
   205d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   205d6:	f3ef 8411 	mrs	r4, BASEPRI
   205da:	f383 8812 	msr	BASEPRI_MAX, r3
   205de:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   205e2:	4630      	mov	r0, r6
   205e4:	f7ff ffa2 	bl	2052c <is_tx_ready>
   205e8:	b9a0      	cbnz	r0, 20614 <wait_tx_ready+0x4a>
	__asm__ volatile(
   205ea:	f384 8811 	msr	BASEPRI, r4
   205ee:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   205f2:	2021      	movs	r0, #33	; 0x21
   205f4:	2100      	movs	r1, #0
   205f6:	f7fb fae3 	bl	1bbc0 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   205fa:	2464      	movs	r4, #100	; 0x64
   205fc:	4630      	mov	r0, r6
   205fe:	f7ff ff95 	bl	2052c <is_tx_ready>
   20602:	4605      	mov	r5, r0
   20604:	2800      	cmp	r0, #0
   20606:	d1e3      	bne.n	205d0 <wait_tx_ready+0x6>
   20608:	2001      	movs	r0, #1
   2060a:	f000 fc87 	bl	20f1c <nrfx_busy_wait>
   2060e:	3c01      	subs	r4, #1
   20610:	d1f4      	bne.n	205fc <wait_tx_ready+0x32>
   20612:	e7dd      	b.n	205d0 <wait_tx_ready+0x6>
}
   20614:	4620      	mov	r0, r4
   20616:	bd70      	pop	{r4, r5, r6, pc}

00020618 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   20618:	b510      	push	{r4, lr}
   2061a:	4604      	mov	r4, r0
   2061c:	2200      	movs	r2, #0
   2061e:	2101      	movs	r1, #1
   20620:	2002      	movs	r0, #2
   20622:	f7f1 fbd1 	bl	11dc8 <z_arm_irq_priority_set>
   20626:	2002      	movs	r0, #2
   20628:	f7f1 fb9c 	bl	11d64 <arch_irq_enable>
   2062c:	2100      	movs	r1, #0
   2062e:	4620      	mov	r0, r4
   20630:	f7f8 fe98 	bl	19364 <uarte_instance_init>
   20634:	bd10      	pop	{r4, pc}

00020636 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   20636:	b510      	push	{r4, lr}
   20638:	4604      	mov	r4, r0
   2063a:	2200      	movs	r2, #0
   2063c:	2101      	movs	r1, #1
   2063e:	2028      	movs	r0, #40	; 0x28
   20640:	f7f1 fbc2 	bl	11dc8 <z_arm_irq_priority_set>
   20644:	2028      	movs	r0, #40	; 0x28
   20646:	f7f1 fb8d 	bl	11d64 <arch_irq_enable>
   2064a:	2100      	movs	r1, #0
   2064c:	4620      	mov	r0, r4
   2064e:	f7f8 fe89 	bl	19364 <uarte_instance_init>
   20652:	bd10      	pop	{r4, pc}

00020654 <rng_pool_put>:
{
   20654:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   20656:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   20658:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2065a:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   2065c:	1a9a      	subs	r2, r3, r2
   2065e:	ea34 0202 	bics.w	r2, r4, r2
   20662:	d008      	beq.n	20676 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   20664:	18c2      	adds	r2, r0, r3
   20666:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   20668:	3301      	adds	r3, #1
   2066a:	b25b      	sxtb	r3, r3
   2066c:	4023      	ands	r3, r4
   2066e:	7083      	strb	r3, [r0, #2]
	return 0;
   20670:	2000      	movs	r0, #0
}
   20672:	bc10      	pop	{r4}
   20674:	4770      	bx	lr
		return -ENOBUFS;
   20676:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2067a:	e7fa      	b.n	20672 <rng_pool_put+0x1e>

0002067c <rng_pool_init>:
	rngp->first_alloc = 0U;
   2067c:	2300      	movs	r3, #0
   2067e:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   20680:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   20682:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   20684:	3901      	subs	r1, #1
   20686:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   20688:	7102      	strb	r2, [r0, #4]
}
   2068a:	4770      	bx	lr

0002068c <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2068c:	4770      	bx	lr

0002068e <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2068e:	4770      	bx	lr

00020690 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   20690:	1a40      	subs	r0, r0, r1
}
   20692:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   20696:	4770      	bx	lr

00020698 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20698:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2069c:	009b      	lsls	r3, r3, #2
   2069e:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   206a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   206a4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   206a8:	2200      	movs	r2, #0
   206aa:	601a      	str	r2, [r3, #0]
   206ac:	681b      	ldr	r3, [r3, #0]
}
   206ae:	4770      	bx	lr

000206b0 <absolute_time_to_cc>:
}
   206b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   206b4:	4770      	bx	lr

000206b6 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   206b6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   206ba:	b672      	cpsid	i
}
   206bc:	4770      	bx	lr

000206be <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   206be:	f380 8810 	msr	PRIMASK, r0
}
   206c2:	4770      	bx	lr

000206c4 <set_absolute_alarm>:
{
   206c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   206c6:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   206c8:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   206cc:	f7f9 f858 	bl	19780 <get_comparator>
   206d0:	4607      	mov	r7, r0
   206d2:	e019      	b.n	20708 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   206d4:	2013      	movs	r0, #19
   206d6:	f001 f9b5 	bl	21a44 <z_impl_k_busy_wait>
}
   206da:	e022      	b.n	20722 <set_absolute_alarm+0x5e>
		event_clear(chan);
   206dc:	4630      	mov	r0, r6
   206de:	f7ff ffdb 	bl	20698 <event_clear>
		event_enable(chan);
   206e2:	4630      	mov	r0, r6
   206e4:	f7f9 f854 	bl	19790 <event_enable>
		set_comparator(chan, cc_val);
   206e8:	4629      	mov	r1, r5
   206ea:	4630      	mov	r0, r6
   206ec:	f7f9 f83e 	bl	1976c <set_comparator>
		now2 = counter();
   206f0:	f7f9 f862 	bl	197b8 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   206f4:	4284      	cmp	r4, r0
   206f6:	d01e      	beq.n	20736 <set_absolute_alarm+0x72>
   206f8:	1c81      	adds	r1, r0, #2
   206fa:	4628      	mov	r0, r5
   206fc:	f7ff ffc8 	bl	20690 <counter_sub>
	} while ((now2 != now) &&
   20700:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20704:	d917      	bls.n	20736 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   20706:	462f      	mov	r7, r5
		now = counter();
   20708:	f7f9 f856 	bl	197b8 <counter>
   2070c:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2070e:	4601      	mov	r1, r0
   20710:	4630      	mov	r0, r6
   20712:	f7f9 f82b 	bl	1976c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   20716:	4621      	mov	r1, r4
   20718:	4638      	mov	r0, r7
   2071a:	f7ff ffb9 	bl	20690 <counter_sub>
   2071e:	2801      	cmp	r0, #1
   20720:	d0d8      	beq.n	206d4 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   20722:	1ca7      	adds	r7, r4, #2
   20724:	4639      	mov	r1, r7
   20726:	4628      	mov	r0, r5
   20728:	f7ff ffb2 	bl	20690 <counter_sub>
   2072c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20730:	d9d4      	bls.n	206dc <set_absolute_alarm+0x18>
			cc_val = now + 2;
   20732:	463d      	mov	r5, r7
   20734:	e7d2      	b.n	206dc <set_absolute_alarm+0x18>
}
   20736:	4628      	mov	r0, r5
   20738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002073a <compare_set>:
{
   2073a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2073c:	b083      	sub	sp, #12
   2073e:	4604      	mov	r4, r0
   20740:	4617      	mov	r7, r2
   20742:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   20744:	f7f9 f83e 	bl	197c4 <compare_int_lock>
   20748:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2074a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2074c:	9301      	str	r3, [sp, #4]
   2074e:	9b08      	ldr	r3, [sp, #32]
   20750:	9300      	str	r3, [sp, #0]
   20752:	463a      	mov	r2, r7
   20754:	462b      	mov	r3, r5
   20756:	4620      	mov	r0, r4
   20758:	f7f9 f922 	bl	199a0 <compare_set_nolocks>
   2075c:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2075e:	4631      	mov	r1, r6
   20760:	4620      	mov	r0, r4
   20762:	f7f9 f893 	bl	1988c <compare_int_unlock>
}
   20766:	4628      	mov	r0, r5
   20768:	b003      	add	sp, #12
   2076a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002076c <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   2076c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2076e:	f7f9 f8f7 	bl	19960 <z_nrf_rtc_timer_read>
}
   20772:	bd08      	pop	{r3, pc}

00020774 <event_packet_is_discardable>:
	switch (hdr->evt) {
   20774:	7803      	ldrb	r3, [r0, #0]
   20776:	2b3e      	cmp	r3, #62	; 0x3e
   20778:	d003      	beq.n	20782 <event_packet_is_discardable+0xe>
   2077a:	2bff      	cmp	r3, #255	; 0xff
   2077c:	d00a      	beq.n	20794 <event_packet_is_discardable+0x20>
   2077e:	2000      	movs	r0, #0
   20780:	4770      	bx	lr
		switch (me->subevent) {
   20782:	7883      	ldrb	r3, [r0, #2]
   20784:	2b02      	cmp	r3, #2
   20786:	d00c      	beq.n	207a2 <event_packet_is_discardable+0x2e>
   20788:	2b0d      	cmp	r3, #13
   2078a:	d001      	beq.n	20790 <event_packet_is_discardable+0x1c>
			return false;
   2078c:	2000      	movs	r0, #0
   2078e:	4770      	bx	lr
		switch (me->subevent) {
   20790:	2001      	movs	r0, #1
   20792:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   20794:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   20796:	2b80      	cmp	r3, #128	; 0x80
   20798:	d001      	beq.n	2079e <event_packet_is_discardable+0x2a>
			return false;
   2079a:	2000      	movs	r0, #0
}
   2079c:	4770      	bx	lr
			return true;
   2079e:	2001      	movs	r0, #1
   207a0:	4770      	bx	lr
		switch (me->subevent) {
   207a2:	2001      	movs	r0, #1
   207a4:	4770      	bx	lr

000207a6 <hci_driver_send>:
{
   207a6:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   207a8:	8983      	ldrh	r3, [r0, #12]
   207aa:	b183      	cbz	r3, 207ce <hci_driver_send+0x28>
   207ac:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   207ae:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   207b0:	b14b      	cbz	r3, 207c6 <hci_driver_send+0x20>
   207b2:	2b02      	cmp	r3, #2
   207b4:	d10e      	bne.n	207d4 <hci_driver_send+0x2e>
		err = acl_handle(buf);
   207b6:	f7f9 faa1 	bl	19cfc <acl_handle>
   207ba:	4605      	mov	r5, r0
	if (!err) {
   207bc:	b965      	cbnz	r5, 207d8 <hci_driver_send+0x32>
		net_buf_unref(buf);
   207be:	4620      	mov	r0, r4
   207c0:	f7ff fc34 	bl	2002c <net_buf_unref>
   207c4:	e008      	b.n	207d8 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   207c6:	f7f9 fab3 	bl	19d30 <cmd_handle>
   207ca:	4605      	mov	r5, r0
		break;
   207cc:	e7f6      	b.n	207bc <hci_driver_send+0x16>
		return -EINVAL;
   207ce:	f06f 0515 	mvn.w	r5, #21
   207d2:	e001      	b.n	207d8 <hci_driver_send+0x32>
	switch (type) {
   207d4:	f06f 0515 	mvn.w	r5, #21
}
   207d8:	4628      	mov	r0, r5
   207da:	bd38      	pop	{r3, r4, r5, pc}

000207dc <fetch_and_process_hci_evt>:
{
   207dc:	b538      	push	{r3, r4, r5, lr}
   207de:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   207e0:	f04f 30ff 	mov.w	r0, #4294967295
   207e4:	f04f 31ff 	mov.w	r1, #4294967295
   207e8:	f7f9 fa16 	bl	19c18 <multithreading_lock_acquire>
	if (!errcode) {
   207ec:	4605      	mov	r5, r0
   207ee:	b110      	cbz	r0, 207f6 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   207f0:	b145      	cbz	r5, 20804 <fetch_and_process_hci_evt+0x28>
		return false;
   207f2:	2000      	movs	r0, #0
}
   207f4:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   207f6:	4620      	mov	r0, r4
   207f8:	f7f9 fc8a 	bl	1a110 <hci_internal_evt_get>
   207fc:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   207fe:	f7f9 fa15 	bl	19c2c <multithreading_lock_release>
   20802:	e7f5      	b.n	207f0 <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   20804:	4620      	mov	r0, r4
   20806:	f7f9 fad5 	bl	19db4 <event_packet_process>
	return true;
   2080a:	2001      	movs	r0, #1
   2080c:	e7f2      	b.n	207f4 <fetch_and_process_hci_evt+0x18>

0002080e <fetch_and_process_acl_data>:
{
   2080e:	b538      	push	{r3, r4, r5, lr}
   20810:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20812:	f04f 30ff 	mov.w	r0, #4294967295
   20816:	f04f 31ff 	mov.w	r1, #4294967295
   2081a:	f7f9 f9fd 	bl	19c18 <multithreading_lock_acquire>
	if (!errcode) {
   2081e:	4605      	mov	r5, r0
   20820:	b110      	cbz	r0, 20828 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   20822:	b145      	cbz	r5, 20836 <fetch_and_process_acl_data+0x28>
		return false;
   20824:	2000      	movs	r0, #0
}
   20826:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   20828:	4620      	mov	r0, r4
   2082a:	f7eb fc2e 	bl	c08a <sdc_hci_data_get>
   2082e:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   20830:	f7f9 f9fc 	bl	19c2c <multithreading_lock_release>
   20834:	e7f5      	b.n	20822 <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   20836:	4620      	mov	r0, r4
   20838:	f7f9 faf4 	bl	19e24 <data_packet_process>
	return true;
   2083c:	2001      	movs	r0, #1
   2083e:	e7f2      	b.n	20826 <fetch_and_process_acl_data+0x18>

00020840 <configure_supported_features>:
{
   20840:	b508      	push	{r3, lr}
			err = sdc_support_adv();
   20842:	f7e3 fa4d 	bl	3ce0 <sdc_support_adv>
			if (err) {
   20846:	b948      	cbnz	r0, 2085c <configure_supported_features+0x1c>
		err = sdc_support_slave();
   20848:	f7e3 fa7a 	bl	3d40 <sdc_support_slave>
		if (err) {
   2084c:	b948      	cbnz	r0, 20862 <configure_supported_features+0x22>
		err = sdc_support_dle();
   2084e:	f7e3 fa57 	bl	3d00 <sdc_support_dle>
		if (err) {
   20852:	b948      	cbnz	r0, 20868 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   20854:	f7e3 fa64 	bl	3d20 <sdc_support_le_2m_phy>
		if (err) {
   20858:	b948      	cbnz	r0, 2086e <configure_supported_features+0x2e>
}
   2085a:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2085c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20860:	e7fb      	b.n	2085a <configure_supported_features+0x1a>
			return -ENOTSUP;
   20862:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20866:	e7f8      	b.n	2085a <configure_supported_features+0x1a>
			return -ENOTSUP;
   20868:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2086c:	e7f5      	b.n	2085a <configure_supported_features+0x1a>
			return -ENOTSUP;
   2086e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20872:	e7f2      	b.n	2085a <configure_supported_features+0x1a>

00020874 <command_generates_command_complete_event>:
	switch (hci_opcode) {
   20874:	f242 0344 	movw	r3, #8260	; 0x2044
   20878:	4298      	cmp	r0, r3
   2087a:	d834      	bhi.n	208e6 <command_generates_command_complete_event+0x72>
   2087c:	f242 030d 	movw	r3, #8205	; 0x200d
   20880:	4298      	cmp	r0, r3
   20882:	d20b      	bcs.n	2089c <command_generates_command_complete_event+0x28>
   20884:	f240 4306 	movw	r3, #1030	; 0x406
   20888:	4298      	cmp	r0, r3
   2088a:	d02e      	beq.n	208ea <command_generates_command_complete_event+0x76>
   2088c:	f240 431d 	movw	r3, #1053	; 0x41d
   20890:	4298      	cmp	r0, r3
   20892:	d001      	beq.n	20898 <command_generates_command_complete_event+0x24>
		return true;
   20894:	2001      	movs	r0, #1
   20896:	4770      	bx	lr
	switch (hci_opcode) {
   20898:	2000      	movs	r0, #0
   2089a:	4770      	bx	lr
   2089c:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   208a0:	380d      	subs	r0, #13
   208a2:	2837      	cmp	r0, #55	; 0x37
   208a4:	d823      	bhi.n	208ee <command_generates_command_complete_event+0x7a>
   208a6:	e8df f000 	tbb	[pc, r0]
   208aa:	221c      	.short	0x221c
   208ac:	22222222 	.word	0x22222222
   208b0:	1c22221c 	.word	0x1c22221c
   208b4:	221c2222 	.word	0x221c2222
   208b8:	22222222 	.word	0x22222222
   208bc:	22222222 	.word	0x22222222
   208c0:	22222222 	.word	0x22222222
   208c4:	22222222 	.word	0x22222222
   208c8:	22222222 	.word	0x22222222
   208cc:	1c222222 	.word	0x1c222222
   208d0:	22222222 	.word	0x22222222
   208d4:	22222222 	.word	0x22222222
   208d8:	22222222 	.word	0x22222222
   208dc:	22222222 	.word	0x22222222
   208e0:	1c1c      	.short	0x1c1c
   208e2:	2000      	movs	r0, #0
   208e4:	4770      	bx	lr
		return true;
   208e6:	2001      	movs	r0, #1
   208e8:	4770      	bx	lr
	switch (hci_opcode) {
   208ea:	2000      	movs	r0, #0
   208ec:	4770      	bx	lr
		return true;
   208ee:	2001      	movs	r0, #1
}
   208f0:	4770      	bx	lr

000208f2 <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   208f2:	230f      	movs	r3, #15
   208f4:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   208f6:	2304      	movs	r3, #4
   208f8:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   208fa:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   208fc:	2301      	movs	r3, #1
   208fe:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   20900:	8081      	strh	r1, [r0, #4]
}
   20902:	4770      	bx	lr

00020904 <encode_command_complete_header>:
{
   20904:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   20906:	240e      	movs	r4, #14
   20908:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   2090a:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2090c:	2201      	movs	r2, #1
   2090e:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   20910:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   20914:	7143      	strb	r3, [r0, #5]
}
   20916:	bc10      	pop	{r4}
   20918:	4770      	bx	lr

0002091a <le_read_supported_states>:
	*buf = states1;
   2091a:	238f      	movs	r3, #143	; 0x8f
   2091c:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2091e:	23c0      	movs	r3, #192	; 0xc0
   20920:	7103      	strb	r3, [r0, #4]
}
   20922:	4770      	bx	lr

00020924 <status_param_cmd_put>:
}
   20924:	2001      	movs	r0, #1
   20926:	4770      	bx	lr

00020928 <link_control_cmd_put>:
{
   20928:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2092a:	7842      	ldrb	r2, [r0, #1]
   2092c:	f810 3b03 	ldrb.w	r3, [r0], #3
   20930:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   20934:	b21b      	sxth	r3, r3
	switch (opcode)	{
   20936:	f240 4206 	movw	r2, #1030	; 0x406
   2093a:	4293      	cmp	r3, r2
   2093c:	d005      	beq.n	2094a <link_control_cmd_put+0x22>
   2093e:	f240 421d 	movw	r2, #1053	; 0x41d
   20942:	4293      	cmp	r3, r2
   20944:	d004      	beq.n	20950 <link_control_cmd_put+0x28>
   20946:	2001      	movs	r0, #1
}
   20948:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2094a:	f7eb fccd 	bl	c2e8 <sdc_hci_cmd_lc_disconnect>
   2094e:	e7fb      	b.n	20948 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   20950:	f7eb fccc 	bl	c2ec <sdc_hci_cmd_lc_read_remote_version_information>
   20954:	e7f8      	b.n	20948 <link_control_cmd_put+0x20>

00020956 <controller_and_baseband_cmd_put>:
{
   20956:	b538      	push	{r3, r4, r5, lr}
   20958:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2095a:	3003      	adds	r0, #3
   2095c:	7865      	ldrb	r5, [r4, #1]
   2095e:	7823      	ldrb	r3, [r4, #0]
   20960:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   20964:	b21b      	sxth	r3, r3
	switch (opcode)	{
   20966:	f640 4463 	movw	r4, #3171	; 0xc63
   2096a:	42a3      	cmp	r3, r4
   2096c:	d02c      	beq.n	209c8 <controller_and_baseband_cmd_put+0x72>
   2096e:	f101 0106 	add.w	r1, r1, #6
   20972:	dc16      	bgt.n	209a2 <controller_and_baseband_cmd_put+0x4c>
   20974:	f640 4403 	movw	r4, #3075	; 0xc03
   20978:	42a3      	cmp	r3, r4
   2097a:	d022      	beq.n	209c2 <controller_and_baseband_cmd_put+0x6c>
   2097c:	f640 442d 	movw	r4, #3117	; 0xc2d
   20980:	42a3      	cmp	r3, r4
   20982:	d105      	bne.n	20990 <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   20984:	7813      	ldrb	r3, [r2, #0]
   20986:	3303      	adds	r3, #3
   20988:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2098a:	f7eb fba5 	bl	c0d8 <sdc_hci_cmd_cb_read_transmit_power_level>
   2098e:	e007      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   20990:	f640 4201 	movw	r2, #3073	; 0xc01
   20994:	4293      	cmp	r3, r2
   20996:	d102      	bne.n	2099e <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   20998:	f7eb fba0 	bl	c0dc <sdc_hci_cmd_cb_set_event_mask>
   2099c:	e000      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2099e:	2001      	movs	r0, #1
}
   209a0:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   209a2:	f640 447b 	movw	r4, #3195	; 0xc7b
   209a6:	42a3      	cmp	r3, r4
   209a8:	d011      	beq.n	209ce <controller_and_baseband_cmd_put+0x78>
   209aa:	f640 447c 	movw	r4, #3196	; 0xc7c
   209ae:	42a3      	cmp	r3, r4
   209b0:	d105      	bne.n	209be <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   209b2:	7813      	ldrb	r3, [r2, #0]
   209b4:	3302      	adds	r3, #2
   209b6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   209b8:	f7eb fb9a 	bl	c0f0 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   209bc:	e7f0      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   209be:	2001      	movs	r0, #1
   209c0:	e7ee      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   209c2:	f7e3 fb11 	bl	3fe8 <sdc_hci_cmd_cb_reset>
   209c6:	e7eb      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   209c8:	f7eb fb8d 	bl	c0e6 <sdc_hci_cmd_cb_set_event_mask_page_2>
   209cc:	e7e8      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   209ce:	7813      	ldrb	r3, [r2, #0]
   209d0:	3304      	adds	r3, #4
   209d2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   209d4:	f7eb fb7e 	bl	c0d4 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   209d8:	e7e2      	b.n	209a0 <controller_and_baseband_cmd_put+0x4a>

000209da <supported_commands>:
{
   209da:	b510      	push	{r4, lr}
   209dc:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   209de:	222e      	movs	r2, #46	; 0x2e
   209e0:	2100      	movs	r1, #0
   209e2:	f7fd fa44 	bl	1de6e <memset>
	cmds->hci_disconnect = 1;
   209e6:	7823      	ldrb	r3, [r4, #0]
   209e8:	f043 0320 	orr.w	r3, r3, #32
   209ec:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   209ee:	78a3      	ldrb	r3, [r4, #2]
   209f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   209f4:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   209f6:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   209f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   209fc:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   209fe:	7aa3      	ldrb	r3, [r4, #10]
   20a00:	f043 0304 	orr.w	r3, r3, #4
   20a04:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   20a06:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   20a08:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   20a0c:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   20a0e:	7be3      	ldrb	r3, [r4, #15]
   20a10:	f043 0302 	orr.w	r3, r3, #2
   20a14:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   20a16:	7da3      	ldrb	r3, [r4, #22]
   20a18:	f043 0304 	orr.w	r3, r3, #4
   20a1c:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   20a1e:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_advertising_data = 1;
   20a20:	f043 03f7 	orr.w	r3, r3, #247	; 0xf7
   20a24:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   20a26:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   20a28:	f043 03c3 	orr.w	r3, r3, #195	; 0xc3
   20a2c:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_white_list = 1;
   20a2e:	7ee3      	ldrb	r3, [r4, #27]
	cmds->hci_le_rand = 1;
   20a30:	f043 03f3 	orr.w	r3, r3, #243	; 0xf3
   20a34:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   20a36:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   20a38:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   20a3c:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   20a3e:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   20a42:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   20a46:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   20a4a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   20a4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   20a52:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   20a56:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   20a5a:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   20a5e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   20a62:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   20a66:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   20a6a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   20a6e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   20a72:	f043 0301 	orr.w	r3, r3, #1
   20a76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   20a7a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   20a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   20a82:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   20a86:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   20a8a:	f043 0304 	orr.w	r3, r3, #4
   20a8e:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   20a92:	bd10      	pop	{r4, pc}

00020a94 <supported_features>:
{
   20a94:	b510      	push	{r4, lr}
   20a96:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   20a98:	2208      	movs	r2, #8
   20a9a:	2100      	movs	r1, #0
   20a9c:	f7fd f9e7 	bl	1de6e <memset>
	features->bdedr_not_supported = 1;
   20aa0:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   20aa2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   20aa6:	7123      	strb	r3, [r4, #4]
}
   20aa8:	bd10      	pop	{r4, pc}

00020aaa <info_param_cmd_put>:
{
   20aaa:	b538      	push	{r3, r4, r5, lr}
   20aac:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   20aae:	1d88      	adds	r0, r1, #6
   20ab0:	7865      	ldrb	r5, [r4, #1]
   20ab2:	7823      	ldrb	r3, [r4, #0]
   20ab4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   20ab8:	b21b      	sxth	r3, r3
	switch (opcode)	{
   20aba:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   20abe:	3b01      	subs	r3, #1
   20ac0:	2b08      	cmp	r3, #8
   20ac2:	d820      	bhi.n	20b06 <info_param_cmd_put+0x5c>
   20ac4:	e8df f003 	tbb	[pc, r3]
   20ac8:	1f120b05 	.word	0x1f120b05
   20acc:	1f1f1f1f 	.word	0x1f1f1f1f
   20ad0:	19          	.byte	0x19
   20ad1:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   20ad2:	7813      	ldrb	r3, [r2, #0]
   20ad4:	3308      	adds	r3, #8
   20ad6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   20ad8:	f7eb fbbb 	bl	c252 <sdc_hci_cmd_ip_read_local_version_information>
   20adc:	e014      	b.n	20b08 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   20ade:	7813      	ldrb	r3, [r2, #0]
   20ae0:	3340      	adds	r3, #64	; 0x40
   20ae2:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   20ae4:	f7ff ff79 	bl	209da <supported_commands>
		return 0;
   20ae8:	2000      	movs	r0, #0
   20aea:	e00d      	b.n	20b08 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   20aec:	7813      	ldrb	r3, [r2, #0]
   20aee:	3308      	adds	r3, #8
   20af0:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   20af2:	f7ff ffcf 	bl	20a94 <supported_features>
		return 0;
   20af6:	2000      	movs	r0, #0
   20af8:	e006      	b.n	20b08 <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   20afa:	7813      	ldrb	r3, [r2, #0]
   20afc:	3306      	adds	r3, #6
   20afe:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   20b00:	f7eb fba5 	bl	c24e <sdc_hci_cmd_ip_read_bd_addr>
   20b04:	e000      	b.n	20b08 <info_param_cmd_put+0x5e>
   20b06:	2001      	movs	r0, #1
}
   20b08:	bd38      	pop	{r3, r4, r5, pc}

00020b0a <le_supported_features>:
{
   20b0a:	b510      	push	{r4, lr}
   20b0c:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   20b0e:	2205      	movs	r2, #5
   20b10:	2100      	movs	r1, #0
   20b12:	f7fd f9ac 	bl	1de6e <memset>
	features->le_encryption = 1;
   20b16:	7823      	ldrb	r3, [r4, #0]
	features->ll_privacy = 1;
   20b18:	f043 0375 	orr.w	r3, r3, #117	; 0x75
   20b1c:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   20b1e:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   20b20:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   20b24:	7063      	strb	r3, [r4, #1]
}
   20b26:	bd10      	pop	{r4, pc}

00020b28 <vs_zephyr_supported_commands>:
{
   20b28:	b510      	push	{r4, lr}
   20b2a:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   20b2c:	2202      	movs	r2, #2
   20b2e:	2100      	movs	r1, #0
   20b30:	f7fd f99d 	bl	1de6e <memset>
	cmds->read_version_info = 1;
   20b34:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   20b36:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   20b3a:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   20b3c:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   20b3e:	f043 0307 	orr.w	r3, r3, #7
   20b42:	7063      	strb	r3, [r4, #1]
}
   20b44:	bd10      	pop	{r4, pc}

00020b46 <vs_supported_commands>:
{
   20b46:	b510      	push	{r4, lr}
   20b48:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   20b4a:	2201      	movs	r2, #1
   20b4c:	2100      	movs	r1, #0
   20b4e:	f7fd f98e 	bl	1de6e <memset>
	cmds->read_supported_vs_commands = 1;
   20b52:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   20b54:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   20b58:	7023      	strb	r3, [r4, #0]
}
   20b5a:	bd10      	pop	{r4, pc}

00020b5c <le_controller_cmd_put>:
{
   20b5c:	b538      	push	{r3, r4, r5, lr}
   20b5e:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20b60:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   20b62:	3106      	adds	r1, #6
   20b64:	7865      	ldrb	r5, [r4, #1]
   20b66:	7823      	ldrb	r3, [r4, #0]
   20b68:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   20b6c:	b21b      	sxth	r3, r3
	switch (opcode)	{
   20b6e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   20b72:	3b01      	subs	r3, #1
   20b74:	2b4d      	cmp	r3, #77	; 0x4d
   20b76:	f200 80ce 	bhi.w	20d16 <le_controller_cmd_put+0x1ba>
   20b7a:	e8df f003 	tbb	[pc, r3]
   20b7e:	2a27      	.short	0x2a27
   20b80:	3c39cc31 	.word	0x3c39cc31
   20b84:	4c49463f 	.word	0x4c49463f
   20b88:	cccccccc 	.word	0xcccccccc
   20b8c:	5c59564f 	.word	0x5c59564f
   20b90:	655fcccc 	.word	0x655fcccc
   20b94:	75cc6e68 	.word	0x75cc6e68
   20b98:	cccc817b 	.word	0xcccc817b
   20b9c:	89cccccc 	.word	0x89cccccc
   20ba0:	cccc968f 	.word	0xcccc968f
   20ba4:	a29f9c99 	.word	0xa29f9c99
   20ba8:	aca9cccc 	.word	0xaca9cccc
   20bac:	bfbcb6af 	.word	0xbfbcb6af
   20bb0:	cccccccc 	.word	0xcccccccc
   20bb4:	cccccccc 	.word	0xcccccccc
   20bb8:	cccccccc 	.word	0xcccccccc
   20bbc:	cccccccc 	.word	0xcccccccc
   20bc0:	cccccccc 	.word	0xcccccccc
   20bc4:	cccccccc 	.word	0xcccccccc
   20bc8:	c9ccccc2 	.word	0xc9ccccc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   20bcc:	f7eb fb7b 	bl	c2c6 <sdc_hci_cmd_le_set_event_mask>
   20bd0:	e0a2      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   20bd2:	7813      	ldrb	r3, [r2, #0]
   20bd4:	3303      	adds	r3, #3
   20bd6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   20bd8:	4608      	mov	r0, r1
   20bda:	f7eb fb52 	bl	c282 <sdc_hci_cmd_le_read_buffer_size>
   20bde:	e09b      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   20be0:	7813      	ldrb	r3, [r2, #0]
   20be2:	3308      	adds	r3, #8
   20be4:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   20be6:	4608      	mov	r0, r1
   20be8:	f7ff ff8f 	bl	20b0a <le_supported_features>
		return 0;
   20bec:	2000      	movs	r0, #0
   20bee:	e093      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   20bf0:	f7eb fb72 	bl	c2d8 <sdc_hci_cmd_le_set_random_address>
   20bf4:	e090      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   20bf6:	f7eb fb60 	bl	c2ba <sdc_hci_cmd_le_set_adv_params>
   20bfa:	e08d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   20bfc:	7813      	ldrb	r3, [r2, #0]
   20bfe:	3301      	adds	r3, #1
   20c00:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   20c02:	4608      	mov	r0, r1
   20c04:	f7eb fb3b 	bl	c27e <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   20c08:	e086      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   20c0a:	f7eb fb52 	bl	c2b2 <sdc_hci_cmd_le_set_adv_data>
   20c0e:	e083      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   20c10:	f7eb fb66 	bl	c2e0 <sdc_hci_cmd_le_set_scan_response_data>
   20c14:	e080      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   20c16:	f7eb fb4e 	bl	c2b6 <sdc_hci_cmd_le_set_adv_enable>
   20c1a:	e07d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   20c1c:	7813      	ldrb	r3, [r2, #0]
   20c1e:	3301      	adds	r3, #1
   20c20:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   20c22:	4608      	mov	r0, r1
   20c24:	f7eb fb3d 	bl	c2a2 <sdc_hci_cmd_le_read_white_list_size>
   20c28:	e076      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_white_list();
   20c2a:	f7eb fb1a 	bl	c262 <sdc_hci_cmd_le_clear_white_list>
   20c2e:	e073      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   20c30:	f7eb fb13 	bl	c25a <sdc_hci_cmd_le_add_device_to_white_list>
   20c34:	e070      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   20c36:	f7eb fb38 	bl	c2aa <sdc_hci_cmd_le_remove_device_from_white_list>
   20c3a:	e06d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   20c3c:	7813      	ldrb	r3, [r2, #0]
   20c3e:	3307      	adds	r3, #7
   20c40:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   20c42:	f7eb fb20 	bl	c286 <sdc_hci_cmd_le_read_channel_map>
   20c46:	e067      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   20c48:	f7eb fb23 	bl	c292 <sdc_hci_cmd_le_read_remote_features>
   20c4c:	e064      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   20c4e:	7813      	ldrb	r3, [r2, #0]
   20c50:	3310      	adds	r3, #16
   20c52:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   20c54:	f7eb fb07 	bl	c266 <sdc_hci_cmd_le_encrypt>
   20c58:	e05e      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   20c5a:	7813      	ldrb	r3, [r2, #0]
   20c5c:	3308      	adds	r3, #8
   20c5e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   20c60:	4608      	mov	r0, r1
   20c62:	f7eb fb0a 	bl	c27a <sdc_hci_cmd_le_rand>
   20c66:	e057      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   20c68:	7813      	ldrb	r3, [r2, #0]
   20c6a:	3302      	adds	r3, #2
   20c6c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   20c6e:	f7eb fb00 	bl	c272 <sdc_hci_cmd_le_long_term_key_request_reply>
   20c72:	e051      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   20c74:	7813      	ldrb	r3, [r2, #0]
   20c76:	3302      	adds	r3, #2
   20c78:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   20c7a:	f7eb faf6 	bl	c26a <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   20c7e:	e04b      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   20c80:	7813      	ldrb	r3, [r2, #0]
   20c82:	3308      	adds	r3, #8
   20c84:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   20c86:	4608      	mov	r0, r1
   20c88:	f7ff fe47 	bl	2091a <le_read_supported_states>
		return 0;
   20c8c:	2000      	movs	r0, #0
   20c8e:	e043      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   20c90:	7813      	ldrb	r3, [r2, #0]
   20c92:	3302      	adds	r3, #2
   20c94:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   20c96:	f7eb fb12 	bl	c2be <sdc_hci_cmd_le_set_data_length>
   20c9a:	e03d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out +=
   20c9c:	7813      	ldrb	r3, [r2, #0]
   20c9e:	3304      	adds	r3, #4
   20ca0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   20ca2:	4608      	mov	r0, r1
   20ca4:	f7eb faf9 	bl	c29a <sdc_hci_cmd_le_read_suggested_default_data_length>
   20ca8:	e036      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   20caa:	f7eb fb1b 	bl	c2e4 <sdc_hci_cmd_le_write_suggested_default_data_length>
   20cae:	e033      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   20cb0:	f7eb fad1 	bl	c256 <sdc_hci_cmd_le_add_device_to_resolving_list>
   20cb4:	e030      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   20cb6:	f7eb faf6 	bl	c2a6 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   20cba:	e02d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_clear_resolving_list();
   20cbc:	f7eb facf 	bl	c25e <sdc_hci_cmd_le_clear_resolving_list>
   20cc0:	e02a      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   20cc2:	7813      	ldrb	r3, [r2, #0]
   20cc4:	3301      	adds	r3, #1
   20cc6:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   20cc8:	4608      	mov	r0, r1
   20cca:	f7eb fae4 	bl	c296 <sdc_hci_cmd_le_read_resolving_list_size>
   20cce:	e023      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   20cd0:	f7eb faed 	bl	c2ae <sdc_hci_cmd_le_set_address_resolution_enable>
   20cd4:	e020      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   20cd6:	f7eb fb01 	bl	c2dc <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   20cda:	e01d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   20cdc:	7813      	ldrb	r3, [r2, #0]
   20cde:	3308      	adds	r3, #8
   20ce0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   20ce2:	4608      	mov	r0, r1
   20ce4:	f7eb fad1 	bl	c28a <sdc_hci_cmd_le_read_max_data_length>
   20ce8:	e016      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   20cea:	7813      	ldrb	r3, [r2, #0]
   20cec:	3304      	adds	r3, #4
   20cee:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   20cf0:	f7eb facd 	bl	c28e <sdc_hci_cmd_le_read_phy>
   20cf4:	e010      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   20cf6:	f7eb fae4 	bl	c2c2 <sdc_hci_cmd_le_set_default_phy>
   20cfa:	e00d      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   20cfc:	f7eb fae8 	bl	c2d0 <sdc_hci_cmd_le_set_phy>
   20d00:	e00a      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   20d02:	7813      	ldrb	r3, [r2, #0]
   20d04:	3302      	adds	r3, #2
   20d06:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   20d08:	4608      	mov	r0, r1
   20d0a:	f7eb fac8 	bl	c29e <sdc_hci_cmd_le_read_transmit_power>
   20d0e:	e003      	b.n	20d18 <le_controller_cmd_put+0x1bc>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   20d10:	f7eb fae0 	bl	c2d4 <sdc_hci_cmd_le_set_privacy_mode>
   20d14:	e000      	b.n	20d18 <le_controller_cmd_put+0x1bc>
   20d16:	2001      	movs	r0, #1
}
   20d18:	bd38      	pop	{r3, r4, r5, pc}

00020d1a <vs_cmd_put>:
{
   20d1a:	b538      	push	{r3, r4, r5, lr}
   20d1c:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   20d1e:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   20d20:	3106      	adds	r1, #6
   20d22:	7865      	ldrb	r5, [r4, #1]
   20d24:	7823      	ldrb	r3, [r4, #0]
   20d26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   20d2a:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   20d2e:	42a3      	cmp	r3, r4
   20d30:	d90f      	bls.n	20d52 <vs_cmd_put+0x38>
   20d32:	f64f 5405 	movw	r4, #64773	; 0xfd05
   20d36:	42a3      	cmp	r3, r4
   20d38:	d85b      	bhi.n	20df2 <vs_cmd_put+0xd8>
   20d3a:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   20d3e:	d319      	bcc.n	20d74 <vs_cmd_put+0x5a>
   20d40:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   20d44:	2b05      	cmp	r3, #5
   20d46:	d850      	bhi.n	20dea <vs_cmd_put+0xd0>
   20d48:	e8df f003 	tbb	[pc, r3]
   20d4c:	46434038 	.word	0x46434038
   20d50:	4c49      	.short	0x4c49
   20d52:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   20d56:	d801      	bhi.n	20d5c <vs_cmd_put+0x42>
   20d58:	2001      	movs	r0, #1
}
   20d5a:	bd38      	pop	{r3, r4, r5, pc}
   20d5c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   20d60:	3b01      	subs	r3, #1
   20d62:	2b09      	cmp	r3, #9
   20d64:	d843      	bhi.n	20dee <vs_cmd_put+0xd4>
   20d66:	e8df f003 	tbb	[pc, r3]
   20d6a:	0e07      	.short	0x0e07
   20d6c:	26424242 	.word	0x26424242
   20d70:	1f164242 	.word	0x1f164242
	switch (opcode)	{
   20d74:	2001      	movs	r0, #1
   20d76:	e7f0      	b.n	20d5a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   20d78:	7813      	ldrb	r3, [r2, #0]
   20d7a:	330c      	adds	r3, #12
   20d7c:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   20d7e:	4608      	mov	r0, r1
   20d80:	f7e3 f946 	bl	4010 <sdc_hci_cmd_vs_zephyr_read_version_info>
   20d84:	e7e9      	b.n	20d5a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   20d86:	7813      	ldrb	r3, [r2, #0]
   20d88:	3340      	adds	r3, #64	; 0x40
   20d8a:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   20d8c:	4608      	mov	r0, r1
   20d8e:	f7ff fecb 	bl	20b28 <vs_zephyr_supported_commands>
		return 0;
   20d92:	2000      	movs	r0, #0
   20d94:	e7e1      	b.n	20d5a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   20d96:	7813      	ldrb	r3, [r2, #0]
   20d98:	3301      	adds	r3, #1
   20d9a:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   20d9c:	3316      	adds	r3, #22
   20d9e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   20da0:	4608      	mov	r0, r1
   20da2:	f7eb fa07 	bl	c1b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   20da6:	e7d8      	b.n	20d5a <vs_cmd_put+0x40>
		*param_length_out +=
   20da8:	7813      	ldrb	r3, [r2, #0]
   20daa:	3320      	adds	r3, #32
   20dac:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   20dae:	4608      	mov	r0, r1
   20db0:	f7eb f9b3 	bl	c11a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   20db4:	e7d1      	b.n	20d5a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   20db6:	f7eb fa48 	bl	c24a <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   20dba:	e7ce      	b.n	20d5a <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   20dbc:	7813      	ldrb	r3, [r2, #0]
   20dbe:	3340      	adds	r3, #64	; 0x40
   20dc0:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   20dc2:	4608      	mov	r0, r1
   20dc4:	f7ff febf 	bl	20b46 <vs_supported_commands>
		return 0;
   20dc8:	2000      	movs	r0, #0
   20dca:	e7c6      	b.n	20d5a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   20dcc:	f7eb f99e 	bl	c10c <sdc_hci_cmd_vs_llpm_mode_set>
   20dd0:	e7c3      	b.n	20d5a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   20dd2:	f7eb f997 	bl	c104 <sdc_hci_cmd_vs_conn_update>
   20dd6:	e7c0      	b.n	20d5a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   20dd8:	f7eb f98c 	bl	c0f4 <sdc_hci_cmd_vs_conn_event_extend>
   20ddc:	e7bd      	b.n	20d5a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   20dde:	f7eb f997 	bl	c110 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   20de2:	e7ba      	b.n	20d5a <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   20de4:	f7eb f990 	bl	c108 <sdc_hci_cmd_vs_event_length_set>
   20de8:	e7b7      	b.n	20d5a <vs_cmd_put+0x40>
	switch (opcode)	{
   20dea:	2001      	movs	r0, #1
   20dec:	e7b5      	b.n	20d5a <vs_cmd_put+0x40>
   20dee:	2001      	movs	r0, #1
   20df0:	e7b3      	b.n	20d5a <vs_cmd_put+0x40>
   20df2:	2001      	movs	r0, #1
   20df4:	e7b1      	b.n	20d5a <vs_cmd_put+0x40>

00020df6 <cmd_put>:
{
   20df6:	b570      	push	{r4, r5, r6, lr}
   20df8:	b082      	sub	sp, #8
   20dfa:	460e      	mov	r6, r1
   20dfc:	7842      	ldrb	r2, [r0, #1]
   20dfe:	7805      	ldrb	r5, [r0, #0]
   20e00:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   20e04:	2304      	movs	r3, #4
   20e06:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   20e0a:	0893      	lsrs	r3, r2, #2
   20e0c:	2a23      	cmp	r2, #35	; 0x23
   20e0e:	d80b      	bhi.n	20e28 <cmd_put+0x32>
   20e10:	b21a      	sxth	r2, r3
   20e12:	2a00      	cmp	r2, #0
   20e14:	d03a      	beq.n	20e8c <cmd_put+0x96>
   20e16:	3b01      	subs	r3, #1
   20e18:	2b07      	cmp	r3, #7
   20e1a:	d839      	bhi.n	20e90 <cmd_put+0x9a>
   20e1c:	e8df f003 	tbb	[pc, r3]
   20e20:	241e381a 	.word	0x241e381a
   20e24:	3038382a 	.word	0x3038382a
   20e28:	2b3f      	cmp	r3, #63	; 0x3f
   20e2a:	d105      	bne.n	20e38 <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   20e2c:	f10d 0207 	add.w	r2, sp, #7
   20e30:	f7ff ff73 	bl	20d1a <vs_cmd_put>
   20e34:	4604      	mov	r4, r0
		break;
   20e36:	e000      	b.n	20e3a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   20e38:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   20e3a:	4628      	mov	r0, r5
   20e3c:	f7ff fd1a 	bl	20874 <command_generates_command_complete_event>
   20e40:	b108      	cbz	r0, 20e46 <cmd_put+0x50>
   20e42:	2c01      	cmp	r4, #1
   20e44:	d126      	bne.n	20e94 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   20e46:	4622      	mov	r2, r4
   20e48:	4629      	mov	r1, r5
   20e4a:	4630      	mov	r0, r6
   20e4c:	f7ff fd51 	bl	208f2 <encode_command_status>
}
   20e50:	b002      	add	sp, #8
   20e52:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   20e54:	f7ff fd68 	bl	20928 <link_control_cmd_put>
   20e58:	4604      	mov	r4, r0
		break;
   20e5a:	e7ee      	b.n	20e3a <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   20e5c:	f10d 0207 	add.w	r2, sp, #7
   20e60:	f7ff fd79 	bl	20956 <controller_and_baseband_cmd_put>
   20e64:	4604      	mov	r4, r0
		break;
   20e66:	e7e8      	b.n	20e3a <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   20e68:	f10d 0207 	add.w	r2, sp, #7
   20e6c:	f7ff fe1d 	bl	20aaa <info_param_cmd_put>
   20e70:	4604      	mov	r4, r0
		break;
   20e72:	e7e2      	b.n	20e3a <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   20e74:	f10d 0207 	add.w	r2, sp, #7
   20e78:	f7ff fd54 	bl	20924 <status_param_cmd_put>
   20e7c:	4604      	mov	r4, r0
		break;
   20e7e:	e7dc      	b.n	20e3a <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   20e80:	f10d 0207 	add.w	r2, sp, #7
   20e84:	f7ff fe6a 	bl	20b5c <le_controller_cmd_put>
   20e88:	4604      	mov	r4, r0
		break;
   20e8a:	e7d6      	b.n	20e3a <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   20e8c:	2401      	movs	r4, #1
   20e8e:	e7d4      	b.n	20e3a <cmd_put+0x44>
   20e90:	2401      	movs	r4, #1
   20e92:	e7d2      	b.n	20e3a <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   20e94:	4623      	mov	r3, r4
   20e96:	f89d 2007 	ldrb.w	r2, [sp, #7]
   20e9a:	4629      	mov	r1, r5
   20e9c:	4630      	mov	r0, r6
   20e9e:	f7ff fd31 	bl	20904 <encode_command_complete_header>
}
   20ea2:	e7d5      	b.n	20e50 <cmd_put+0x5a>

00020ea4 <m_config_clock_source_get>:
}
   20ea4:	2001      	movs	r0, #1
   20ea6:	4770      	bx	lr

00020ea8 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   20ea8:	4668      	mov	r0, sp
   20eaa:	f020 0107 	bic.w	r1, r0, #7
   20eae:	468d      	mov	sp, r1
   20eb0:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   20eb2:	f7e1 fcb9 	bl	2828 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   20eb6:	f7f0 ffa3 	bl	11e00 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   20eba:	f7f1 f8ad 	bl	12018 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   20ebe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20ec2:	4685      	mov	sp, r0
   20ec4:	4770      	bx	lr

00020ec6 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   20ec6:	4668      	mov	r0, sp
   20ec8:	f020 0107 	bic.w	r1, r0, #7
   20ecc:	468d      	mov	sp, r1
   20ece:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   20ed0:	f7e1 fc2c 	bl	272c <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   20ed4:	f7f0 ff94 	bl	11e00 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   20ed8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20edc:	4685      	mov	sp, r0
   20ede:	4770      	bx	lr

00020ee0 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   20ee0:	4668      	mov	r0, sp
   20ee2:	f020 0107 	bic.w	r1, r0, #7
   20ee6:	468d      	mov	sp, r1
   20ee8:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   20eea:	f7ea fbba 	bl	b662 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   20eee:	f7f0 ff87 	bl	11e00 <_arch_isr_direct_pm>
   20ef2:	f7f1 f891 	bl	12018 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   20ef6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20efa:	4685      	mov	sp, r0
   20efc:	4770      	bx	lr

00020efe <nrfx_clock_stop>:
	switch (domain) {
   20efe:	2801      	cmp	r0, #1
   20f00:	d000      	beq.n	20f04 <nrfx_clock_stop+0x6>
   20f02:	4770      	bx	lr
{
   20f04:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   20f06:	f7e2 fa85 	bl	3414 <mpsl_clock_hfclk_release>
}
   20f0a:	bd08      	pop	{r3, pc}

00020f0c <nrfx_clock_enable>:
}
   20f0c:	4770      	bx	lr

00020f0e <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   20f0e:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   20f10:	f7e2 f89e 	bl	3050 <MPSL_IRQ_CLOCK_Handler>
}
   20f14:	bd08      	pop	{r3, pc}

00020f16 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   20f16:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   20f18:	4780      	blx	r0
}
   20f1a:	bd08      	pop	{r3, pc}

00020f1c <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   20f1c:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   20f1e:	f000 fd91 	bl	21a44 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   20f22:	bd08      	pop	{r3, pc}

00020f24 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   20f24:	2301      	movs	r3, #1
   20f26:	4083      	lsls	r3, r0
   20f28:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   20f2c:	bf14      	ite	ne
   20f2e:	2001      	movne	r0, #1
   20f30:	2000      	moveq	r0, #0
   20f32:	4770      	bx	lr

00020f34 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   20f34:	b508      	push	{r3, lr}
  _DoInit();
   20f36:	f7f9 fb89 	bl	1a64c <_DoInit>
}
   20f3a:	bd08      	pop	{r3, pc}

00020f3c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   20f3c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   20f3e:	f7ff fff9 	bl	20f34 <SEGGER_RTT_Init>

	return 0;
}
   20f42:	2000      	movs	r0, #0
   20f44:	bd08      	pop	{r3, pc}

00020f46 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   20f46:	b148      	cbz	r0, 20f5c <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   20f48:	68c3      	ldr	r3, [r0, #12]
   20f4a:	8818      	ldrh	r0, [r3, #0]
   20f4c:	f3c0 0008 	ubfx	r0, r0, #0, #9
   20f50:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   20f54:	bf14      	ite	ne
   20f56:	2000      	movne	r0, #0
   20f58:	2001      	moveq	r0, #1
   20f5a:	4770      	bx	lr
		return false;
   20f5c:	2000      	movs	r0, #0
}
   20f5e:	4770      	bx	lr

00020f60 <k_heap_init>:
{
   20f60:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   20f62:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   20f66:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   20f68:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   20f6a:	f7fc f881 	bl	1d070 <sys_heap_init>
}
   20f6e:	bd10      	pop	{r4, pc}

00020f70 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f74:	b087      	sub	sp, #28
   20f76:	4680      	mov	r8, r0
   20f78:	9103      	str	r1, [sp, #12]
   20f7a:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20f7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   20f80:	f000 fd66 	bl	21a50 <sys_clock_timeout_end_calc>
   20f84:	4681      	mov	r9, r0
   20f86:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20f88:	f108 0314 	add.w	r3, r8, #20
   20f8c:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   20f8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f92:	f3ef 8511 	mrs	r5, BASEPRI
   20f96:	f383 8812 	msr	BASEPRI_MAX, r3
   20f9a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   20f9e:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   20fa2:	4654      	mov	r4, sl

	while (ret == NULL) {
   20fa4:	e00f      	b.n	20fc6 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20fa6:	e9cd 6700 	strd	r6, r7, [sp]
   20faa:	f108 020c 	add.w	r2, r8, #12
   20fae:	4629      	mov	r1, r5
   20fb0:	9805      	ldr	r0, [sp, #20]
   20fb2:	f7fa fc39 	bl	1b828 <z_pend_curr>
   20fb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20fba:	f3ef 8511 	mrs	r5, BASEPRI
   20fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   20fc2:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   20fc6:	b9b4      	cbnz	r4, 20ff6 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20fc8:	9a04      	ldr	r2, [sp, #16]
   20fca:	9903      	ldr	r1, [sp, #12]
   20fcc:	4640      	mov	r0, r8
   20fce:	f7fb ffc1 	bl	1cf54 <sys_heap_aligned_alloc>
   20fd2:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   20fd4:	f7fa ffde 	bl	1bf94 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20fd8:	b96c      	cbnz	r4, 20ff6 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   20fda:	ebb9 0600 	subs.w	r6, r9, r0
   20fde:	eb6b 0701 	sbc.w	r7, fp, r1
   20fe2:	2e01      	cmp	r6, #1
   20fe4:	f177 0300 	sbcs.w	r3, r7, #0
   20fe8:	db05      	blt.n	20ff6 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   20fea:	f1ba 0f00 	cmp.w	sl, #0
   20fee:	d1da      	bne.n	20fa6 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   20ff0:	f04f 0a01 	mov.w	sl, #1
   20ff4:	e7d7      	b.n	20fa6 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   20ff6:	f385 8811 	msr	BASEPRI, r5
   20ffa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20ffe:	4620      	mov	r0, r4
   21000:	b007      	add	sp, #28
   21002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00021006 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   21006:	b570      	push	{r4, r5, r6, lr}
   21008:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2100a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   2100e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21012:	f3ef 8511 	mrs	r5, BASEPRI
   21016:	f383 8812 	msr	BASEPRI_MAX, r3
   2101a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2101e:	f7fb ff37 	bl	1ce90 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   21022:	f104 000c 	add.w	r0, r4, #12
   21026:	f000 fc4b 	bl	218c0 <z_unpend_all>
   2102a:	b920      	cbnz	r0, 21036 <k_heap_free+0x30>
	__asm__ volatile(
   2102c:	f385 8811 	msr	BASEPRI, r5
   21030:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   21034:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   21036:	4629      	mov	r1, r5
   21038:	4630      	mov	r0, r6
   2103a:	f7fa fa91 	bl	1b560 <z_reschedule>
   2103e:	e7f9      	b.n	21034 <k_heap_free+0x2e>

00021040 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21040:	68c2      	ldr	r2, [r0, #12]
   21042:	6903      	ldr	r3, [r0, #16]
   21044:	431a      	orrs	r2, r3
   21046:	f012 0203 	ands.w	r2, r2, #3
   2104a:	d10d      	bne.n	21068 <create_free_list+0x28>
	slab->free_list = NULL;
   2104c:	2100      	movs	r1, #0
   2104e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21050:	e005      	b.n	2105e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   21052:	6941      	ldr	r1, [r0, #20]
   21054:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   21056:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   21058:	68c1      	ldr	r1, [r0, #12]
   2105a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2105c:	3201      	adds	r2, #1
   2105e:	6881      	ldr	r1, [r0, #8]
   21060:	4291      	cmp	r1, r2
   21062:	d8f6      	bhi.n	21052 <create_free_list+0x12>
	return 0;
   21064:	2000      	movs	r0, #0
   21066:	4770      	bx	lr
		return -EINVAL;
   21068:	f06f 0015 	mvn.w	r0, #21
}
   2106c:	4770      	bx	lr

0002106e <k_mem_slab_init>:
{
   2106e:	b510      	push	{r4, lr}
   21070:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   21072:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   21074:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   21076:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   21078:	2300      	movs	r3, #0
   2107a:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   2107c:	f7ff ffe0 	bl	21040 <create_free_list>
	if (rc < 0) {
   21080:	2800      	cmp	r0, #0
   21082:	db01      	blt.n	21088 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   21084:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   21086:	6064      	str	r4, [r4, #4]
}
   21088:	bd10      	pop	{r4, pc}

0002108a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2108a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2108c:	4604      	mov	r4, r0
   2108e:	460d      	mov	r5, r1
	__asm__ volatile(
   21090:	f04f 0340 	mov.w	r3, #64	; 0x40
   21094:	f3ef 8611 	mrs	r6, BASEPRI
   21098:	f383 8812 	msr	BASEPRI_MAX, r3
   2109c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   210a0:	6943      	ldr	r3, [r0, #20]
   210a2:	b163      	cbz	r3, 210be <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   210a4:	682b      	ldr	r3, [r5, #0]
   210a6:	6962      	ldr	r2, [r4, #20]
   210a8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   210aa:	682b      	ldr	r3, [r5, #0]
   210ac:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   210ae:	69a3      	ldr	r3, [r4, #24]
   210b0:	3b01      	subs	r3, #1
   210b2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   210b4:	f386 8811 	msr	BASEPRI, r6
   210b8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   210bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   210be:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   210c2:	f000 fbd2 	bl	2186a <z_unpend_first_thread>
		if (pending_thread != NULL) {
   210c6:	2800      	cmp	r0, #0
   210c8:	d0ec      	beq.n	210a4 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   210ca:	682a      	ldr	r2, [r5, #0]
   210cc:	2100      	movs	r1, #0
   210ce:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   210d2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   210d4:	f000 fb07 	bl	216e6 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   210d8:	4631      	mov	r1, r6
   210da:	4638      	mov	r0, r7
   210dc:	f7fa fa40 	bl	1b560 <z_reschedule>
			return;
   210e0:	e7ec      	b.n	210bc <k_mem_slab_free+0x32>

000210e2 <setup_thread_stack>:
{
   210e2:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   210e4:	3207      	adds	r2, #7
   210e6:	f022 0207 	bic.w	r2, r2, #7
   210ea:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   210ee:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   210f2:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   210f6:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   210fa:	2200      	movs	r2, #0
   210fc:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   21100:	18c8      	adds	r0, r1, r3
   21102:	bc10      	pop	{r4}
   21104:	4770      	bx	lr

00021106 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   21106:	f3ef 8005 	mrs	r0, IPSR
}
   2110a:	3800      	subs	r0, #0
   2110c:	bf18      	it	ne
   2110e:	2001      	movne	r0, #1
   21110:	4770      	bx	lr

00021112 <k_thread_name_get>:
}
   21112:	3078      	adds	r0, #120	; 0x78
   21114:	4770      	bx	lr

00021116 <z_impl_k_thread_start>:
{
   21116:	b508      	push	{r3, lr}
	z_sched_start(thread);
   21118:	f7fa fb4c 	bl	1b7b4 <z_sched_start>
}
   2111c:	bd08      	pop	{r3, pc}

0002111e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2111e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   21120:	2400      	movs	r4, #0
   21122:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   21124:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   21126:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   21128:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   2112a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2112c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2112e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   21130:	bc10      	pop	{r4}
   21132:	4770      	bx	lr

00021134 <z_impl_k_thread_create>:
{
   21134:	b5f0      	push	{r4, r5, r6, r7, lr}
   21136:	b087      	sub	sp, #28
   21138:	4604      	mov	r4, r0
   2113a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2113e:	2500      	movs	r5, #0
   21140:	9505      	str	r5, [sp, #20]
   21142:	9d10      	ldr	r5, [sp, #64]	; 0x40
   21144:	9504      	str	r5, [sp, #16]
   21146:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   21148:	9503      	str	r5, [sp, #12]
   2114a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2114c:	9502      	str	r5, [sp, #8]
   2114e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   21150:	9501      	str	r5, [sp, #4]
   21152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   21154:	9500      	str	r5, [sp, #0]
   21156:	f7f9 fdb7 	bl	1acc8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2115a:	f1b7 3fff 	cmp.w	r7, #4294967295
   2115e:	bf08      	it	eq
   21160:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   21164:	d102      	bne.n	2116c <z_impl_k_thread_create+0x38>
}
   21166:	4620      	mov	r0, r4
   21168:	b007      	add	sp, #28
   2116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   2116c:	4632      	mov	r2, r6
   2116e:	463b      	mov	r3, r7
   21170:	4620      	mov	r0, r4
   21172:	f7f9 fd97 	bl	1aca4 <schedule_new_thread>
   21176:	e7f6      	b.n	21166 <z_impl_k_thread_create+0x32>

00021178 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   21178:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   2117a:	f7f0 f8df 	bl	1133c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   2117e:	f7ff fa86 	bl	2068e <sys_clock_idle_exit>
}
   21182:	bd08      	pop	{r3, pc}

00021184 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   21184:	b508      	push	{r3, lr}
	__asm__ volatile(
   21186:	f04f 0240 	mov.w	r2, #64	; 0x40
   2118a:	f3ef 8311 	mrs	r3, BASEPRI
   2118e:	f382 8812 	msr	BASEPRI_MAX, r2
   21192:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   21196:	f7f9 fe49 	bl	1ae2c <pm_save_idle>
   2119a:	e7f4      	b.n	21186 <idle+0x2>

0002119c <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2119c:	4288      	cmp	r0, r1
   2119e:	da00      	bge.n	211a2 <new_prio_for_inheritance+0x6>
   211a0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   211a2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   211a6:	db01      	blt.n	211ac <new_prio_for_inheritance+0x10>
   211a8:	4608      	mov	r0, r1
   211aa:	4770      	bx	lr
   211ac:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   211b0:	4770      	bx	lr

000211b2 <adjust_owner_prio>:
{
   211b2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   211b4:	6880      	ldr	r0, [r0, #8]
   211b6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   211ba:	428b      	cmp	r3, r1
   211bc:	d101      	bne.n	211c2 <adjust_owner_prio+0x10>
	return false;
   211be:	2000      	movs	r0, #0
}
   211c0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   211c2:	f7fa fb45 	bl	1b850 <z_set_prio>
   211c6:	e7fb      	b.n	211c0 <adjust_owner_prio+0xe>

000211c8 <prepare_thread_to_run>:
{
   211c8:	b508      	push	{r3, lr}
   211ca:	2200      	movs	r2, #0
   211cc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   211d0:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   211d2:	f000 fa88 	bl	216e6 <z_ready_thread>
}
   211d6:	bd08      	pop	{r3, pc}

000211d8 <queue_insert>:
{
   211d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   211dc:	4605      	mov	r5, r0
   211de:	460e      	mov	r6, r1
   211e0:	4614      	mov	r4, r2
   211e2:	461f      	mov	r7, r3
   211e4:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   211e8:	f100 0808 	add.w	r8, r0, #8
   211ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   211f0:	f3ef 8911 	mrs	r9, BASEPRI
   211f4:	f383 8812 	msr	BASEPRI_MAX, r3
   211f8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   211fc:	b102      	cbz	r2, 21200 <queue_insert+0x28>
	return list->tail;
   211fe:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   21200:	4640      	mov	r0, r8
   21202:	f000 fb32 	bl	2186a <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   21206:	b9a0      	cbnz	r0, 21232 <queue_insert+0x5a>
	if (alloc) {
   21208:	b9e7      	cbnz	r7, 21244 <queue_insert+0x6c>
	node->next_and_flags = flags;
   2120a:	2300      	movs	r3, #0
   2120c:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2120e:	b356      	cbz	r6, 21266 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21210:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   21212:	f033 0303 	bics.w	r3, r3, #3
   21216:	d134      	bne.n	21282 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21218:	6823      	ldr	r3, [r4, #0]
   2121a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2121e:	6023      	str	r3, [r4, #0]
	return list->tail;
   21220:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   21222:	b35a      	cbz	r2, 2127c <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21224:	6813      	ldr	r3, [r2, #0]
   21226:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2122a:	4323      	orrs	r3, r4
   2122c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2122e:	606c      	str	r4, [r5, #4]
}
   21230:	e031      	b.n	21296 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   21232:	4621      	mov	r1, r4
   21234:	f7ff ffc8 	bl	211c8 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   21238:	4649      	mov	r1, r9
   2123a:	4640      	mov	r0, r8
   2123c:	f7fa f990 	bl	1b560 <z_reschedule>
		return 0;
   21240:	2000      	movs	r0, #0
   21242:	e032      	b.n	212aa <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   21244:	2108      	movs	r1, #8
   21246:	2000      	movs	r0, #0
   21248:	f7fb fa3c 	bl	1c6c4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2124c:	b120      	cbz	r0, 21258 <queue_insert+0x80>
		anode->data = data;
   2124e:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   21250:	2201      	movs	r2, #1
   21252:	6002      	str	r2, [r0, #0]
		data = anode;
   21254:	4604      	mov	r4, r0
   21256:	e7da      	b.n	2120e <queue_insert+0x36>
	__asm__ volatile(
   21258:	f389 8811 	msr	BASEPRI, r9
   2125c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   21260:	f06f 000b 	mvn.w	r0, #11
   21264:	e021      	b.n	212aa <queue_insert+0xd2>
	return list->head;
   21266:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21268:	6823      	ldr	r3, [r4, #0]
   2126a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2126e:	4313      	orrs	r3, r2
   21270:	6023      	str	r3, [r4, #0]
	list->head = node;
   21272:	602c      	str	r4, [r5, #0]
	return list->tail;
   21274:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   21276:	b973      	cbnz	r3, 21296 <queue_insert+0xbe>
	list->tail = node;
   21278:	606c      	str	r4, [r5, #4]
}
   2127a:	e00c      	b.n	21296 <queue_insert+0xbe>
	list->tail = node;
   2127c:	606c      	str	r4, [r5, #4]
	list->head = node;
   2127e:	602c      	str	r4, [r5, #0]
}
   21280:	e009      	b.n	21296 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21282:	6822      	ldr	r2, [r4, #0]
   21284:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   21288:	4313      	orrs	r3, r2
   2128a:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2128c:	6833      	ldr	r3, [r6, #0]
   2128e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   21292:	431c      	orrs	r4, r3
   21294:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21296:	2104      	movs	r1, #4
   21298:	f105 0010 	add.w	r0, r5, #16
   2129c:	f000 fcb8 	bl	21c10 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   212a0:	4649      	mov	r1, r9
   212a2:	4640      	mov	r0, r8
   212a4:	f7fa f95c 	bl	1b560 <z_reschedule>
	return 0;
   212a8:	2000      	movs	r0, #0
}
   212aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000212ae <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   212ae:	b160      	cbz	r0, 212ca <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   212b0:	6803      	ldr	r3, [r0, #0]
   212b2:	f013 0f03 	tst.w	r3, #3
   212b6:	d008      	beq.n	212ca <z_queue_node_peek+0x1c>
{
   212b8:	b510      	push	{r4, lr}
		ret = anode->data;
   212ba:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   212bc:	b909      	cbnz	r1, 212c2 <z_queue_node_peek+0x14>
		ret = anode->data;
   212be:	4620      	mov	r0, r4
}
   212c0:	bd10      	pop	{r4, pc}
			k_free(anode);
   212c2:	f000 fccf 	bl	21c64 <k_free>
		ret = anode->data;
   212c6:	4620      	mov	r0, r4
   212c8:	e7fa      	b.n	212c0 <z_queue_node_peek+0x12>
}
   212ca:	4770      	bx	lr

000212cc <z_impl_k_queue_init>:
	list->head = NULL;
   212cc:	2300      	movs	r3, #0
   212ce:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   212d0:	6043      	str	r3, [r0, #4]
   212d2:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   212d6:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   212d8:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   212da:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   212de:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   212e0:	6143      	str	r3, [r0, #20]
}
   212e2:	4770      	bx	lr

000212e4 <k_queue_append>:
{
   212e4:	b500      	push	{lr}
   212e6:	b083      	sub	sp, #12
   212e8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   212ea:	2301      	movs	r3, #1
   212ec:	9300      	str	r3, [sp, #0]
   212ee:	2300      	movs	r3, #0
   212f0:	4619      	mov	r1, r3
   212f2:	f7ff ff71 	bl	211d8 <queue_insert>
}
   212f6:	b003      	add	sp, #12
   212f8:	f85d fb04 	ldr.w	pc, [sp], #4

000212fc <k_queue_prepend>:
{
   212fc:	b500      	push	{lr}
   212fe:	b083      	sub	sp, #12
   21300:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   21302:	2100      	movs	r1, #0
   21304:	9100      	str	r1, [sp, #0]
   21306:	460b      	mov	r3, r1
   21308:	f7ff ff66 	bl	211d8 <queue_insert>
}
   2130c:	b003      	add	sp, #12
   2130e:	f85d fb04 	ldr.w	pc, [sp], #4

00021312 <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   21312:	b3a1      	cbz	r1, 2137e <k_queue_append_list+0x6c>
{
   21314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21318:	4606      	mov	r6, r0
   2131a:	4617      	mov	r7, r2
   2131c:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   2131e:	b38a      	cbz	r2, 21384 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21320:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   21324:	f04f 0340 	mov.w	r3, #64	; 0x40
   21328:	f3ef 8811 	mrs	r8, BASEPRI
   2132c:	f383 8812 	msr	BASEPRI_MAX, r3
   21330:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   21334:	4628      	mov	r0, r5
   21336:	f000 fa98 	bl	2186a <z_unpend_first_thread>
   2133a:	e006      	b.n	2134a <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   2133c:	4621      	mov	r1, r4
   2133e:	f7ff ff43 	bl	211c8 <prepare_thread_to_run>
		head = *(void **)head;
   21342:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   21344:	4628      	mov	r0, r5
   21346:	f000 fa90 	bl	2186a <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2134a:	b10c      	cbz	r4, 21350 <k_queue_append_list+0x3e>
   2134c:	2800      	cmp	r0, #0
   2134e:	d1f5      	bne.n	2133c <k_queue_append_list+0x2a>
	if (head != NULL) {
   21350:	b13c      	cbz	r4, 21362 <k_queue_append_list+0x50>
	return list->tail;
   21352:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21354:	b18a      	cbz	r2, 2137a <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21356:	6813      	ldr	r3, [r2, #0]
   21358:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2135c:	431c      	orrs	r4, r3
   2135e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21360:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   21362:	2104      	movs	r1, #4
   21364:	f106 0010 	add.w	r0, r6, #16
   21368:	f000 fc52 	bl	21c10 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2136c:	4641      	mov	r1, r8
   2136e:	4628      	mov	r0, r5
   21370:	f7fa f8f6 	bl	1b560 <z_reschedule>
	return 0;
   21374:	2000      	movs	r0, #0
}
   21376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   2137a:	6034      	str	r4, [r6, #0]
}
   2137c:	e7f0      	b.n	21360 <k_queue_append_list+0x4e>
		return -EINVAL;
   2137e:	f06f 0015 	mvn.w	r0, #21
}
   21382:	4770      	bx	lr
		return -EINVAL;
   21384:	f06f 0015 	mvn.w	r0, #21
   21388:	e7f5      	b.n	21376 <k_queue_append_list+0x64>

0002138a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2138a:	b15a      	cbz	r2, 213a4 <z_impl_k_sem_init+0x1a>
   2138c:	428a      	cmp	r2, r1
   2138e:	d30c      	bcc.n	213aa <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   21390:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   21392:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   21394:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   21396:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   21398:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2139c:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2139e:	6143      	str	r3, [r0, #20]
	return 0;
   213a0:	2000      	movs	r0, #0
   213a2:	4770      	bx	lr
		return -EINVAL;
   213a4:	f06f 0015 	mvn.w	r0, #21
   213a8:	4770      	bx	lr
   213aa:	f06f 0015 	mvn.w	r0, #21
}
   213ae:	4770      	bx	lr

000213b0 <cancel_async_locked>:
{
   213b0:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   213b2:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   213b4:	f012 0f02 	tst.w	r2, #2
   213b8:	d009      	beq.n	213ce <cancel_async_locked+0x1e>
	return *flagp;
   213ba:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   213bc:	f012 000f 	ands.w	r0, r2, #15
   213c0:	d037      	beq.n	21432 <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   213c2:	f042 0202 	orr.w	r2, r2, #2
   213c6:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   213c8:	f002 000f 	and.w	r0, r2, #15
	return ret;
   213cc:	4770      	bx	lr
{
   213ce:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   213d0:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   213d2:	f022 0104 	bic.w	r1, r2, #4
   213d6:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   213d8:	f012 0f04 	tst.w	r2, #4
   213dc:	d011      	beq.n	21402 <cancel_async_locked+0x52>
	return list->head;
   213de:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   213e2:	2100      	movs	r1, #0
   213e4:	b16a      	cbz	r2, 21402 <cancel_async_locked+0x52>
   213e6:	4290      	cmp	r0, r2
   213e8:	d002      	beq.n	213f0 <cancel_async_locked+0x40>
   213ea:	4611      	mov	r1, r2
   213ec:	6812      	ldr	r2, [r2, #0]
   213ee:	e7f9      	b.n	213e4 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   213f0:	b191      	cbz	r1, 21418 <cancel_async_locked+0x68>
	return node->next;
   213f2:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   213f4:	600a      	str	r2, [r1, #0]
	return list->tail;
   213f6:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   213fa:	4293      	cmp	r3, r2
   213fc:	d016      	beq.n	2142c <cancel_async_locked+0x7c>
	parent->next = child;
   213fe:	2200      	movs	r2, #0
   21400:	601a      	str	r2, [r3, #0]
	return *flagp;
   21402:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   21404:	f012 000f 	ands.w	r0, r2, #15
   21408:	d004      	beq.n	21414 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   2140a:	f042 0202 	orr.w	r2, r2, #2
   2140e:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   21410:	f002 000f 	and.w	r0, r2, #15
}
   21414:	bc10      	pop	{r4}
   21416:	4770      	bx	lr
	return node->next;
   21418:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   2141a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   2141e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   21422:	428b      	cmp	r3, r1
   21424:	d1eb      	bne.n	213fe <cancel_async_locked+0x4e>
	list->tail = node;
   21426:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   2142a:	e7e8      	b.n	213fe <cancel_async_locked+0x4e>
	list->tail = node;
   2142c:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   21430:	e7e5      	b.n	213fe <cancel_async_locked+0x4e>
   21432:	4770      	bx	lr

00021434 <work_timeout>:
{
   21434:	b510      	push	{r4, lr}
   21436:	b082      	sub	sp, #8
   21438:	4603      	mov	r3, r0
   2143a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2143e:	f3ef 8411 	mrs	r4, BASEPRI
   21442:	f382 8812 	msr	BASEPRI_MAX, r2
   21446:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2144a:	2200      	movs	r2, #0
   2144c:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2144e:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   21452:	f022 0108 	bic.w	r1, r2, #8
   21456:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2145a:	f012 0f08 	tst.w	r2, #8
   2145e:	d105      	bne.n	2146c <work_timeout+0x38>
	__asm__ volatile(
   21460:	f384 8811 	msr	BASEPRI, r4
   21464:	f3bf 8f6f 	isb	sy
}
   21468:	b002      	add	sp, #8
   2146a:	bd10      	pop	{r4, pc}
   2146c:	3810      	subs	r0, #16
		queue = dw->queue;
   2146e:	699b      	ldr	r3, [r3, #24]
   21470:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   21472:	a901      	add	r1, sp, #4
   21474:	f7f9 fe5e 	bl	1b134 <submit_to_queue_locked>
   21478:	e7f2      	b.n	21460 <work_timeout+0x2c>

0002147a <cancel_delayable_async_locked>:
{
   2147a:	b510      	push	{r4, lr}
   2147c:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2147e:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   21480:	f023 0208 	bic.w	r2, r3, #8
   21484:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   21486:	f013 0f08 	tst.w	r3, #8
   2148a:	d103      	bne.n	21494 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   2148c:	4620      	mov	r0, r4
   2148e:	f7ff ff8f 	bl	213b0 <cancel_async_locked>
}
   21492:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   21494:	3010      	adds	r0, #16
   21496:	f000 fa72 	bl	2197e <z_abort_timeout>
		ret = true;
   2149a:	e7f7      	b.n	2148c <cancel_delayable_async_locked+0x12>

0002149c <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2149c:	2300      	movs	r3, #0
   2149e:	6003      	str	r3, [r0, #0]
   214a0:	6083      	str	r3, [r0, #8]
   214a2:	60c3      	str	r3, [r0, #12]
   214a4:	6041      	str	r1, [r0, #4]
}
   214a6:	4770      	bx	lr

000214a8 <k_work_submit_to_queue>:
{
   214a8:	b530      	push	{r4, r5, lr}
   214aa:	b083      	sub	sp, #12
   214ac:	9001      	str	r0, [sp, #4]
   214ae:	4608      	mov	r0, r1
	__asm__ volatile(
   214b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   214b4:	f3ef 8511 	mrs	r5, BASEPRI
   214b8:	f383 8812 	msr	BASEPRI_MAX, r3
   214bc:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   214c0:	a901      	add	r1, sp, #4
   214c2:	f7f9 fe37 	bl	1b134 <submit_to_queue_locked>
   214c6:	4604      	mov	r4, r0
	__asm__ volatile(
   214c8:	f385 8811 	msr	BASEPRI, r5
   214cc:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   214d0:	2800      	cmp	r0, #0
   214d2:	dc02      	bgt.n	214da <k_work_submit_to_queue+0x32>
}
   214d4:	4620      	mov	r0, r4
   214d6:	b003      	add	sp, #12
   214d8:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   214da:	f7fa fba3 	bl	1bc24 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   214de:	2800      	cmp	r0, #0
   214e0:	d0f8      	beq.n	214d4 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   214e2:	f7fa fad9 	bl	1ba98 <z_impl_k_yield>
	return ret;
   214e6:	e7f5      	b.n	214d4 <k_work_submit_to_queue+0x2c>

000214e8 <k_work_init_delayable>:
{
   214e8:	b538      	push	{r3, r4, r5, lr}
   214ea:	4604      	mov	r4, r0
   214ec:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   214ee:	2230      	movs	r2, #48	; 0x30
   214f0:	2100      	movs	r1, #0
   214f2:	f7fc fcbc 	bl	1de6e <memset>
   214f6:	6065      	str	r5, [r4, #4]
   214f8:	f44f 7380 	mov.w	r3, #256	; 0x100
   214fc:	60e3      	str	r3, [r4, #12]
}
   214fe:	bd38      	pop	{r3, r4, r5, pc}

00021500 <k_work_schedule_for_queue>:
{
   21500:	b510      	push	{r4, lr}
   21502:	b082      	sub	sp, #8
   21504:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   21506:	f04f 0040 	mov.w	r0, #64	; 0x40
   2150a:	f3ef 8411 	mrs	r4, BASEPRI
   2150e:	f380 8812 	msr	BASEPRI_MAX, r0
   21512:	f3bf 8f6f 	isb	sy
	return *flagp;
   21516:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   21518:	f010 0f0e 	tst.w	r0, #14
   2151c:	d006      	beq.n	2152c <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2151e:	2000      	movs	r0, #0
	__asm__ volatile(
   21520:	f384 8811 	msr	BASEPRI, r4
   21524:	f3bf 8f6f 	isb	sy
}
   21528:	b002      	add	sp, #8
   2152a:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2152c:	a801      	add	r0, sp, #4
   2152e:	f7f9 ff43 	bl	1b3b8 <schedule_for_queue_locked>
   21532:	e7f5      	b.n	21520 <k_work_schedule_for_queue+0x20>

00021534 <k_work_reschedule_for_queue>:
{
   21534:	b5f0      	push	{r4, r5, r6, r7, lr}
   21536:	b083      	sub	sp, #12
   21538:	9001      	str	r0, [sp, #4]
   2153a:	460c      	mov	r4, r1
   2153c:	4616      	mov	r6, r2
   2153e:	461d      	mov	r5, r3
	__asm__ volatile(
   21540:	f04f 0340 	mov.w	r3, #64	; 0x40
   21544:	f3ef 8711 	mrs	r7, BASEPRI
   21548:	f383 8812 	msr	BASEPRI_MAX, r3
   2154c:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   21550:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   21552:	f023 0208 	bic.w	r2, r3, #8
   21556:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   21558:	f013 0f08 	tst.w	r3, #8
   2155c:	d10b      	bne.n	21576 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2155e:	4632      	mov	r2, r6
   21560:	462b      	mov	r3, r5
   21562:	4621      	mov	r1, r4
   21564:	a801      	add	r0, sp, #4
   21566:	f7f9 ff27 	bl	1b3b8 <schedule_for_queue_locked>
	__asm__ volatile(
   2156a:	f387 8811 	msr	BASEPRI, r7
   2156e:	f3bf 8f6f 	isb	sy
}
   21572:	b003      	add	sp, #12
   21574:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   21576:	f101 0010 	add.w	r0, r1, #16
   2157a:	f000 fa00 	bl	2197e <z_abort_timeout>
		ret = true;
   2157e:	e7ee      	b.n	2155e <k_work_reschedule_for_queue+0x2a>

00021580 <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   21580:	b510      	push	{r4, lr}
	__asm__ volatile(
   21582:	f04f 0340 	mov.w	r3, #64	; 0x40
   21586:	f3ef 8411 	mrs	r4, BASEPRI
   2158a:	f383 8812 	msr	BASEPRI_MAX, r3
   2158e:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   21592:	f7ff ff72 	bl	2147a <cancel_delayable_async_locked>
	__asm__ volatile(
   21596:	f384 8811 	msr	BASEPRI, r4
   2159a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2159e:	bd10      	pop	{r4, pc}

000215a0 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   215a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   215a2:	460f      	mov	r7, r1
	__asm__ volatile(
   215a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   215a8:	f3ef 8611 	mrs	r6, BASEPRI
   215ac:	f383 8812 	msr	BASEPRI_MAX, r3
   215b0:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   215b4:	f3bf 8f5b 	dmb	ish
   215b8:	68c3      	ldr	r3, [r0, #12]
   215ba:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   215be:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   215c2:	2b00      	cmp	r3, #0
   215c4:	bf14      	ite	ne
   215c6:	2501      	movne	r5, #1
   215c8:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   215ca:	d107      	bne.n	215dc <k_work_cancel_delayable_sync+0x3c>
	bool need_wait = false;
   215cc:	2000      	movs	r0, #0
	__asm__ volatile(
   215ce:	f386 8811 	msr	BASEPRI, r6
   215d2:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   215d6:	b948      	cbnz	r0, 215ec <k_work_cancel_delayable_sync+0x4c>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   215d8:	4628      	mov	r0, r5
   215da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   215dc:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   215de:	f7ff ff4c 	bl	2147a <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   215e2:	4639      	mov	r1, r7
   215e4:	4620      	mov	r0, r4
   215e6:	f7f9 fe4d 	bl	1b284 <cancel_sync_locked>
   215ea:	e7f0      	b.n	215ce <k_work_cancel_delayable_sync+0x2e>
		k_sem_take(&canceller->sem, K_FOREVER);
   215ec:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   215f0:	f04f 32ff 	mov.w	r2, #4294967295
   215f4:	f04f 33ff 	mov.w	r3, #4294967295
   215f8:	f7f9 fd58 	bl	1b0ac <z_impl_k_sem_take>
   215fc:	e7ec      	b.n	215d8 <k_work_cancel_delayable_sync+0x38>

000215fe <thread_active_elsewhere>:
}
   215fe:	2000      	movs	r0, #0
   21600:	4770      	bx	lr

00021602 <pended_on_thread>:
}
   21602:	6880      	ldr	r0, [r0, #8]
   21604:	4770      	bx	lr

00021606 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   21606:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2160a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2160e:	4283      	cmp	r3, r0
   21610:	d001      	beq.n	21616 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   21612:	1ac0      	subs	r0, r0, r3
   21614:	4770      	bx	lr
	return 0;
   21616:	2000      	movs	r0, #0
}
   21618:	4770      	bx	lr

0002161a <z_unpend_thread_no_timeout>:
{
   2161a:	b538      	push	{r3, r4, r5, lr}
   2161c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2161e:	2300      	movs	r3, #0
	__asm__ volatile(
   21620:	f04f 0240 	mov.w	r2, #64	; 0x40
   21624:	f3ef 8511 	mrs	r5, BASEPRI
   21628:	f382 8812 	msr	BASEPRI_MAX, r2
   2162c:	f3bf 8f6f 	isb	sy
   21630:	b98b      	cbnz	r3, 21656 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21632:	4620      	mov	r0, r4
   21634:	f7ff ffe5 	bl	21602 <pended_on_thread>
   21638:	4621      	mov	r1, r4
   2163a:	f000 f822 	bl	21682 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2163e:	7b63      	ldrb	r3, [r4, #13]
   21640:	f023 0302 	bic.w	r3, r3, #2
   21644:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21646:	2300      	movs	r3, #0
   21648:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2164a:	f385 8811 	msr	BASEPRI, r5
   2164e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   21652:	2301      	movs	r3, #1
   21654:	e7ec      	b.n	21630 <z_unpend_thread_no_timeout+0x16>
}
   21656:	bd38      	pop	{r3, r4, r5, pc}

00021658 <z_reschedule_irqlock>:
{
   21658:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2165a:	4603      	mov	r3, r0
   2165c:	b920      	cbnz	r0, 21668 <z_reschedule_irqlock+0x10>
   2165e:	f3ef 8205 	mrs	r2, IPSR
   21662:	b942      	cbnz	r2, 21676 <z_reschedule_irqlock+0x1e>
   21664:	2201      	movs	r2, #1
   21666:	e000      	b.n	2166a <z_reschedule_irqlock+0x12>
   21668:	2200      	movs	r2, #0
	if (resched(key)) {
   2166a:	b932      	cbnz	r2, 2167a <z_reschedule_irqlock+0x22>
   2166c:	f383 8811 	msr	BASEPRI, r3
   21670:	f3bf 8f6f 	isb	sy
}
   21674:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21676:	2200      	movs	r2, #0
   21678:	e7f7      	b.n	2166a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2167a:	4618      	mov	r0, r3
   2167c:	f7f0 fbee 	bl	11e5c <arch_swap>
	return ret;
   21680:	e7f8      	b.n	21674 <z_reschedule_irqlock+0x1c>

00021682 <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   21682:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   21684:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   21686:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21688:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2168a:	2300      	movs	r3, #0
   2168c:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2168e:	604b      	str	r3, [r1, #4]
}
   21690:	4770      	bx	lr

00021692 <z_unpend_thread>:
{
   21692:	b538      	push	{r3, r4, r5, lr}
   21694:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   21696:	2300      	movs	r3, #0
	__asm__ volatile(
   21698:	f04f 0240 	mov.w	r2, #64	; 0x40
   2169c:	f3ef 8511 	mrs	r5, BASEPRI
   216a0:	f382 8812 	msr	BASEPRI_MAX, r2
   216a4:	f3bf 8f6f 	isb	sy
   216a8:	b98b      	cbnz	r3, 216ce <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   216aa:	4620      	mov	r0, r4
   216ac:	f7ff ffa9 	bl	21602 <pended_on_thread>
   216b0:	4621      	mov	r1, r4
   216b2:	f7ff ffe6 	bl	21682 <z_priq_dumb_remove>
   216b6:	7b63      	ldrb	r3, [r4, #13]
   216b8:	f023 0302 	bic.w	r3, r3, #2
   216bc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   216be:	2300      	movs	r3, #0
   216c0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   216c2:	f385 8811 	msr	BASEPRI, r5
   216c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   216ca:	2301      	movs	r3, #1
   216cc:	e7ec      	b.n	216a8 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   216ce:	f104 0018 	add.w	r0, r4, #24
   216d2:	f000 f954 	bl	2197e <z_abort_timeout>
}
   216d6:	bd38      	pop	{r3, r4, r5, pc}

000216d8 <z_priq_dumb_best>:
{
   216d8:	4603      	mov	r3, r0
	return list->head == list;
   216da:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216dc:	4283      	cmp	r3, r0
   216de:	d000      	beq.n	216e2 <z_priq_dumb_best+0xa>
}
   216e0:	4770      	bx	lr
	struct k_thread *thread = NULL;
   216e2:	2000      	movs	r0, #0
	return thread;
   216e4:	e7fc      	b.n	216e0 <z_priq_dumb_best+0x8>

000216e6 <z_ready_thread>:
{
   216e6:	b538      	push	{r3, r4, r5, lr}
   216e8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   216ea:	2300      	movs	r3, #0
	__asm__ volatile(
   216ec:	f04f 0240 	mov.w	r2, #64	; 0x40
   216f0:	f3ef 8511 	mrs	r5, BASEPRI
   216f4:	f382 8812 	msr	BASEPRI_MAX, r2
   216f8:	f3bf 8f6f 	isb	sy
   216fc:	e007      	b.n	2170e <z_ready_thread+0x28>
			ready_thread(thread);
   216fe:	4620      	mov	r0, r4
   21700:	f7fa f818 	bl	1b734 <ready_thread>
	__asm__ volatile(
   21704:	f385 8811 	msr	BASEPRI, r5
   21708:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2170c:	2301      	movs	r3, #1
   2170e:	b92b      	cbnz	r3, 2171c <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   21710:	4620      	mov	r0, r4
   21712:	f7ff ff74 	bl	215fe <thread_active_elsewhere>
   21716:	2800      	cmp	r0, #0
   21718:	d1f4      	bne.n	21704 <z_ready_thread+0x1e>
   2171a:	e7f0      	b.n	216fe <z_ready_thread+0x18>
}
   2171c:	bd38      	pop	{r3, r4, r5, pc}

0002171e <z_thread_timeout>:
{
   2171e:	b570      	push	{r4, r5, r6, lr}
   21720:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   21722:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   21726:	2300      	movs	r3, #0
	__asm__ volatile(
   21728:	f04f 0240 	mov.w	r2, #64	; 0x40
   2172c:	f3ef 8611 	mrs	r6, BASEPRI
   21730:	f382 8812 	msr	BASEPRI_MAX, r2
   21734:	f3bf 8f6f 	isb	sy
   21738:	e019      	b.n	2176e <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2173a:	4628      	mov	r0, r5
   2173c:	f7ff ff61 	bl	21602 <pended_on_thread>
   21740:	4629      	mov	r1, r5
   21742:	f7ff ff9e 	bl	21682 <z_priq_dumb_remove>
   21746:	7b6b      	ldrb	r3, [r5, #13]
   21748:	f023 0302 	bic.w	r3, r3, #2
   2174c:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   2174e:	2300      	movs	r3, #0
   21750:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21752:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   21756:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   2175a:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2175e:	4628      	mov	r0, r5
   21760:	f7f9 ffe8 	bl	1b734 <ready_thread>
	__asm__ volatile(
   21764:	f386 8811 	msr	BASEPRI, r6
   21768:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2176c:	2301      	movs	r3, #1
   2176e:	b94b      	cbnz	r3, 21784 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   21770:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   21774:	f013 0f28 	tst.w	r3, #40	; 0x28
   21778:	d1f4      	bne.n	21764 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   2177a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2177e:	2b00      	cmp	r3, #0
   21780:	d1db      	bne.n	2173a <z_thread_timeout+0x1c>
   21782:	e7e6      	b.n	21752 <z_thread_timeout+0x34>
}
   21784:	bd70      	pop	{r4, r5, r6, pc}

00021786 <add_to_waitq_locked>:
{
   21786:	b570      	push	{r4, r5, r6, lr}
   21788:	4605      	mov	r5, r0
   2178a:	460e      	mov	r6, r1
	unready_thread(thread);
   2178c:	f7fa f830 	bl	1b7f0 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21790:	7b6b      	ldrb	r3, [r5, #13]
   21792:	f043 0302 	orr.w	r3, r3, #2
   21796:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   21798:	b1b6      	cbz	r6, 217c8 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   2179a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2179c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2179e:	42a6      	cmp	r6, r4
   217a0:	d019      	beq.n	217d6 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217a2:	b164      	cbz	r4, 217be <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   217a4:	4621      	mov	r1, r4
   217a6:	4628      	mov	r0, r5
   217a8:	f7ff ff2d 	bl	21606 <z_sched_prio_cmp>
   217ac:	2800      	cmp	r0, #0
   217ae:	dc0c      	bgt.n	217ca <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   217b0:	b12c      	cbz	r4, 217be <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   217b2:	6873      	ldr	r3, [r6, #4]
   217b4:	429c      	cmp	r4, r3
   217b6:	d002      	beq.n	217be <add_to_waitq_locked+0x38>
   217b8:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217ba:	2c00      	cmp	r4, #0
   217bc:	d1f1      	bne.n	217a2 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   217be:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   217c0:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   217c2:	606b      	str	r3, [r5, #4]
	tail->next = node;
   217c4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   217c6:	6075      	str	r5, [r6, #4]
}
   217c8:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   217ca:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   217cc:	606b      	str	r3, [r5, #4]
	node->next = successor;
   217ce:	602c      	str	r4, [r5, #0]
	prev->next = node;
   217d0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   217d2:	6065      	str	r5, [r4, #4]
}
   217d4:	e7f8      	b.n	217c8 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   217d6:	2400      	movs	r4, #0
   217d8:	e7e3      	b.n	217a2 <add_to_waitq_locked+0x1c>

000217da <pend>:
{
   217da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   217de:	4605      	mov	r5, r0
   217e0:	460f      	mov	r7, r1
   217e2:	4691      	mov	r9, r2
   217e4:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   217e6:	2400      	movs	r4, #0
	__asm__ volatile(
   217e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   217ec:	f3ef 8611 	mrs	r6, BASEPRI
   217f0:	f383 8812 	msr	BASEPRI_MAX, r3
   217f4:	f3bf 8f6f 	isb	sy
   217f8:	b94c      	cbnz	r4, 2180e <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   217fa:	4639      	mov	r1, r7
   217fc:	4628      	mov	r0, r5
   217fe:	f7ff ffc2 	bl	21786 <add_to_waitq_locked>
	__asm__ volatile(
   21802:	f386 8811 	msr	BASEPRI, r6
   21806:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2180a:	2401      	movs	r4, #1
   2180c:	e7f4      	b.n	217f8 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   2180e:	464a      	mov	r2, r9
   21810:	4643      	mov	r3, r8
   21812:	4628      	mov	r0, r5
   21814:	f7f9 fe42 	bl	1b49c <add_thread_timeout>
}
   21818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002181c <z_unpend1_no_timeout>:
{
   2181c:	b570      	push	{r4, r5, r6, lr}
   2181e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   21820:	2300      	movs	r3, #0
	__asm__ volatile(
   21822:	f04f 0240 	mov.w	r2, #64	; 0x40
   21826:	f3ef 8511 	mrs	r5, BASEPRI
   2182a:	f382 8812 	msr	BASEPRI_MAX, r2
   2182e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   21832:	461c      	mov	r4, r3
   21834:	e00f      	b.n	21856 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21836:	f7ff fee4 	bl	21602 <pended_on_thread>
   2183a:	4621      	mov	r1, r4
   2183c:	f7ff ff21 	bl	21682 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21840:	7b63      	ldrb	r3, [r4, #13]
   21842:	f023 0302 	bic.w	r3, r3, #2
   21846:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21848:	2300      	movs	r3, #0
   2184a:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2184c:	f385 8811 	msr	BASEPRI, r5
   21850:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   21854:	2301      	movs	r3, #1
   21856:	b933      	cbnz	r3, 21866 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   21858:	4630      	mov	r0, r6
   2185a:	f7ff ff3d 	bl	216d8 <z_priq_dumb_best>
		if (thread != NULL) {
   2185e:	4604      	mov	r4, r0
   21860:	2800      	cmp	r0, #0
   21862:	d1e8      	bne.n	21836 <z_unpend1_no_timeout+0x1a>
   21864:	e7f2      	b.n	2184c <z_unpend1_no_timeout+0x30>
}
   21866:	4620      	mov	r0, r4
   21868:	bd70      	pop	{r4, r5, r6, pc}

0002186a <z_unpend_first_thread>:
{
   2186a:	b570      	push	{r4, r5, r6, lr}
   2186c:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2186e:	2300      	movs	r3, #0
	__asm__ volatile(
   21870:	f04f 0240 	mov.w	r2, #64	; 0x40
   21874:	f3ef 8511 	mrs	r5, BASEPRI
   21878:	f382 8812 	msr	BASEPRI_MAX, r2
   2187c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   21880:	461c      	mov	r4, r3
   21882:	e013      	b.n	218ac <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21884:	f7ff febd 	bl	21602 <pended_on_thread>
   21888:	4621      	mov	r1, r4
   2188a:	f7ff fefa 	bl	21682 <z_priq_dumb_remove>
   2188e:	7b63      	ldrb	r3, [r4, #13]
   21890:	f023 0302 	bic.w	r3, r3, #2
   21894:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21896:	2300      	movs	r3, #0
   21898:	60a3      	str	r3, [r4, #8]
   2189a:	f104 0018 	add.w	r0, r4, #24
   2189e:	f000 f86e 	bl	2197e <z_abort_timeout>
	__asm__ volatile(
   218a2:	f385 8811 	msr	BASEPRI, r5
   218a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   218aa:	2301      	movs	r3, #1
   218ac:	b933      	cbnz	r3, 218bc <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   218ae:	4630      	mov	r0, r6
   218b0:	f7ff ff12 	bl	216d8 <z_priq_dumb_best>
		if (thread != NULL) {
   218b4:	4604      	mov	r4, r0
   218b6:	2800      	cmp	r0, #0
   218b8:	d1e4      	bne.n	21884 <z_unpend_first_thread+0x1a>
   218ba:	e7f2      	b.n	218a2 <z_unpend_first_thread+0x38>
}
   218bc:	4620      	mov	r0, r4
   218be:	bd70      	pop	{r4, r5, r6, pc}

000218c0 <z_unpend_all>:
{
   218c0:	b538      	push	{r3, r4, r5, lr}
   218c2:	4605      	mov	r5, r0
	int need_sched = 0;
   218c4:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   218c6:	e006      	b.n	218d6 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   218c8:	4620      	mov	r0, r4
   218ca:	f7ff fee2 	bl	21692 <z_unpend_thread>
		z_ready_thread(thread);
   218ce:	4620      	mov	r0, r4
   218d0:	f7ff ff09 	bl	216e6 <z_ready_thread>
		need_sched = 1;
   218d4:	2001      	movs	r0, #1
	return list->head == list;
   218d6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   218d8:	42a5      	cmp	r5, r4
   218da:	d001      	beq.n	218e0 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   218dc:	2c00      	cmp	r4, #0
   218de:	d1f3      	bne.n	218c8 <z_unpend_all+0x8>
}
   218e0:	bd38      	pop	{r3, r4, r5, pc}

000218e2 <z_sched_wake>:
{
   218e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   218e6:	4606      	mov	r6, r0
   218e8:	4688      	mov	r8, r1
   218ea:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   218ec:	2300      	movs	r3, #0
	__asm__ volatile(
   218ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   218f2:	f3ef 8511 	mrs	r5, BASEPRI
   218f6:	f382 8812 	msr	BASEPRI_MAX, r2
   218fa:	f3bf 8f6f 	isb	sy
	bool ret = false;
   218fe:	4699      	mov	r9, r3
   21900:	e01b      	b.n	2193a <z_sched_wake+0x58>
   21902:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   21906:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21908:	f7ff fe7b 	bl	21602 <pended_on_thread>
   2190c:	4621      	mov	r1, r4
   2190e:	f7ff feb8 	bl	21682 <z_priq_dumb_remove>
   21912:	7b63      	ldrb	r3, [r4, #13]
   21914:	f023 0302 	bic.w	r3, r3, #2
   21918:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2191a:	2300      	movs	r3, #0
   2191c:	60a3      	str	r3, [r4, #8]
   2191e:	f104 0018 	add.w	r0, r4, #24
   21922:	f000 f82c 	bl	2197e <z_abort_timeout>
			ready_thread(thread);
   21926:	4620      	mov	r0, r4
   21928:	f7f9 ff04 	bl	1b734 <ready_thread>
			ret = true;
   2192c:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   21930:	f385 8811 	msr	BASEPRI, r5
   21934:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   21938:	2301      	movs	r3, #1
   2193a:	b933      	cbnz	r3, 2194a <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   2193c:	4630      	mov	r0, r6
   2193e:	f7ff fecb 	bl	216d8 <z_priq_dumb_best>
		if (thread != NULL) {
   21942:	4604      	mov	r4, r0
   21944:	2800      	cmp	r0, #0
   21946:	d1dc      	bne.n	21902 <z_sched_wake+0x20>
   21948:	e7f2      	b.n	21930 <z_sched_wake+0x4e>
}
   2194a:	4648      	mov	r0, r9
   2194c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00021950 <remove_timeout>:
{
   21950:	b538      	push	{r3, r4, r5, lr}
   21952:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   21954:	f7fa f9d4 	bl	1bd00 <next>
   21958:	b148      	cbz	r0, 2196e <remove_timeout+0x1e>
   2195a:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2195c:	6920      	ldr	r0, [r4, #16]
   2195e:	6965      	ldr	r5, [r4, #20]
   21960:	6913      	ldr	r3, [r2, #16]
   21962:	6951      	ldr	r1, [r2, #20]
   21964:	181b      	adds	r3, r3, r0
   21966:	eb45 0101 	adc.w	r1, r5, r1
   2196a:	6113      	str	r3, [r2, #16]
   2196c:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2196e:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   21970:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   21972:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21974:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21976:	2300      	movs	r3, #0
   21978:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2197a:	6063      	str	r3, [r4, #4]
}
   2197c:	bd38      	pop	{r3, r4, r5, pc}

0002197e <z_abort_timeout>:
{
   2197e:	b570      	push	{r4, r5, r6, lr}
   21980:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   21982:	2300      	movs	r3, #0
	__asm__ volatile(
   21984:	f04f 0240 	mov.w	r2, #64	; 0x40
   21988:	f3ef 8611 	mrs	r6, BASEPRI
   2198c:	f382 8812 	msr	BASEPRI_MAX, r2
   21990:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   21994:	f06f 0015 	mvn.w	r0, #21
   21998:	e008      	b.n	219ac <z_abort_timeout+0x2e>
			remove_timeout(to);
   2199a:	4620      	mov	r0, r4
   2199c:	f7ff ffd8 	bl	21950 <remove_timeout>
			ret = 0;
   219a0:	4628      	mov	r0, r5
	__asm__ volatile(
   219a2:	f386 8811 	msr	BASEPRI, r6
   219a6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   219aa:	2301      	movs	r3, #1
   219ac:	461d      	mov	r5, r3
   219ae:	b91b      	cbnz	r3, 219b8 <z_abort_timeout+0x3a>
	return node->next != NULL;
   219b0:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   219b2:	2b00      	cmp	r3, #0
   219b4:	d1f1      	bne.n	2199a <z_abort_timeout+0x1c>
   219b6:	e7f4      	b.n	219a2 <z_abort_timeout+0x24>
}
   219b8:	bd70      	pop	{r4, r5, r6, pc}

000219ba <z_get_next_timeout_expiry>:
{
   219ba:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   219bc:	2300      	movs	r3, #0
	__asm__ volatile(
   219be:	f04f 0240 	mov.w	r2, #64	; 0x40
   219c2:	f3ef 8411 	mrs	r4, BASEPRI
   219c6:	f382 8812 	msr	BASEPRI_MAX, r2
   219ca:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   219ce:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   219d2:	b93b      	cbnz	r3, 219e4 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   219d4:	f7fa f9ac 	bl	1bd30 <next_timeout>
	__asm__ volatile(
   219d8:	f384 8811 	msr	BASEPRI, r4
   219dc:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   219e0:	2301      	movs	r3, #1
   219e2:	e7f6      	b.n	219d2 <z_get_next_timeout_expiry+0x18>
}
   219e4:	bd10      	pop	{r4, pc}

000219e6 <z_set_timeout_expiry>:
{
   219e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   219e8:	4606      	mov	r6, r0
   219ea:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   219ec:	2300      	movs	r3, #0
	__asm__ volatile(
   219ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   219f2:	f3ef 8511 	mrs	r5, BASEPRI
   219f6:	f382 8812 	msr	BASEPRI_MAX, r2
   219fa:	f3bf 8f6f 	isb	sy
   219fe:	e00a      	b.n	21a16 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   21a00:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   21a02:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   21a06:	2801      	cmp	r0, #1
   21a08:	dd00      	ble.n	21a0c <z_set_timeout_expiry+0x26>
   21a0a:	b97c      	cbnz	r4, 21a2c <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   21a0c:	f385 8811 	msr	BASEPRI, r5
   21a10:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   21a14:	2301      	movs	r3, #1
   21a16:	461c      	mov	r4, r3
   21a18:	b97b      	cbnz	r3, 21a3a <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   21a1a:	f7fa f989 	bl	1bd30 <next_timeout>
			      || (ticks <= next_to);
   21a1e:	f1b0 3fff 	cmp.w	r0, #4294967295
   21a22:	d0ed      	beq.n	21a00 <z_set_timeout_expiry+0x1a>
   21a24:	42b0      	cmp	r0, r6
   21a26:	dbec      	blt.n	21a02 <z_set_timeout_expiry+0x1c>
   21a28:	2401      	movs	r4, #1
   21a2a:	e7ea      	b.n	21a02 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   21a2c:	4639      	mov	r1, r7
   21a2e:	42b0      	cmp	r0, r6
   21a30:	bfa8      	it	ge
   21a32:	4630      	movge	r0, r6
   21a34:	f7f8 f8b2 	bl	19b9c <sys_clock_set_timeout>
   21a38:	e7e8      	b.n	21a0c <z_set_timeout_expiry+0x26>
}
   21a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021a3c <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   21a3c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   21a3e:	f7fa faa9 	bl	1bf94 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   21a42:	bd08      	pop	{r3, pc}

00021a44 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   21a44:	b900      	cbnz	r0, 21a48 <z_impl_k_busy_wait+0x4>
   21a46:	4770      	bx	lr
{
   21a48:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   21a4a:	f7f1 f867 	bl	12b1c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   21a4e:	bd08      	pop	{r3, pc}

00021a50 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   21a50:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21a52:	f1b1 3fff 	cmp.w	r1, #4294967295
   21a56:	bf08      	it	eq
   21a58:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   21a5c:	d024      	beq.n	21aa8 <sys_clock_timeout_end_calc+0x58>
   21a5e:	4604      	mov	r4, r0
   21a60:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21a62:	ea54 0105 	orrs.w	r1, r4, r5
   21a66:	d00d      	beq.n	21a84 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   21a68:	f06f 0101 	mvn.w	r1, #1
   21a6c:	1a0a      	subs	r2, r1, r0
   21a6e:	f04f 31ff 	mov.w	r1, #4294967295
   21a72:	eb61 0305 	sbc.w	r3, r1, r5
   21a76:	2a00      	cmp	r2, #0
   21a78:	f173 0100 	sbcs.w	r1, r3, #0
   21a7c:	db05      	blt.n	21a8a <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   21a7e:	4610      	mov	r0, r2
   21a80:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   21a82:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   21a84:	f7fa fa86 	bl	1bf94 <sys_clock_tick_get>
   21a88:	e7fb      	b.n	21a82 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   21a8a:	f7fa fa83 	bl	1bf94 <sys_clock_tick_get>
   21a8e:	4623      	mov	r3, r4
   21a90:	462a      	mov	r2, r5
   21a92:	2c01      	cmp	r4, #1
   21a94:	f175 0400 	sbcs.w	r4, r5, #0
   21a98:	db03      	blt.n	21aa2 <sys_clock_timeout_end_calc+0x52>
   21a9a:	18c0      	adds	r0, r0, r3
   21a9c:	eb42 0101 	adc.w	r1, r2, r1
   21aa0:	e7ef      	b.n	21a82 <sys_clock_timeout_end_calc+0x32>
   21aa2:	2301      	movs	r3, #1
   21aa4:	2200      	movs	r2, #0
   21aa6:	e7f8      	b.n	21a9a <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   21aa8:	f04f 30ff 	mov.w	r0, #4294967295
   21aac:	4601      	mov	r1, r0
   21aae:	e7e8      	b.n	21a82 <sys_clock_timeout_end_calc+0x32>

00021ab0 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   21ab0:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   21ab2:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   21ab4:	2300      	movs	r3, #0
   21ab6:	6303      	str	r3, [r0, #48]	; 0x30
   21ab8:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   21abc:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   21abe:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   21ac0:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   21ac2:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   21ac4:	6343      	str	r3, [r0, #52]	; 0x34
}
   21ac6:	4770      	bx	lr

00021ac8 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   21ac8:	b510      	push	{r4, lr}
   21aca:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   21acc:	f7ff ff57 	bl	2197e <z_abort_timeout>

	if (inactive) {
   21ad0:	b9a0      	cbnz	r0, 21afc <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   21ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21ad4:	b10b      	cbz	r3, 21ada <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   21ad6:	4620      	mov	r0, r4
   21ad8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   21ada:	f104 0018 	add.w	r0, r4, #24
   21ade:	f7ff fe9d 	bl	2181c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   21ae2:	b158      	cbz	r0, 21afc <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   21ae4:	f7ff fdff 	bl	216e6 <z_ready_thread>
	__asm__ volatile(
   21ae8:	f04f 0340 	mov.w	r3, #64	; 0x40
   21aec:	f3ef 8011 	mrs	r0, BASEPRI
   21af0:	f383 8812 	msr	BASEPRI_MAX, r3
   21af4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   21af8:	f7ff fdae 	bl	21658 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   21afc:	bd10      	pop	{r4, pc}

00021afe <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21afe:	b108      	cbz	r0, 21b04 <poller_thread+0x6>
   21b00:	3860      	subs	r0, #96	; 0x60
   21b02:	4770      	bx	lr
}
   21b04:	4770      	bx	lr

00021b06 <signal_poller>:
{
   21b06:	b538      	push	{r3, r4, r5, lr}
   21b08:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   21b0a:	6880      	ldr	r0, [r0, #8]
   21b0c:	f7ff fff7 	bl	21afe <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   21b10:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   21b12:	f013 0f02 	tst.w	r3, #2
   21b16:	d028      	beq.n	21b6a <signal_poller+0x64>
   21b18:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   21b1a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   21b1e:	f06f 0001 	mvn.w	r0, #1
   21b22:	f04f 31ff 	mov.w	r1, #4294967295
   21b26:	428b      	cmp	r3, r1
   21b28:	bf08      	it	eq
   21b2a:	4282      	cmpeq	r2, r0
   21b2c:	d01f      	beq.n	21b6e <signal_poller+0x68>
	z_unpend_thread(thread);
   21b2e:	4620      	mov	r0, r4
   21b30:	f7ff fdaf 	bl	21692 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   21b34:	2d08      	cmp	r5, #8
   21b36:	d00a      	beq.n	21b4e <signal_poller+0x48>
   21b38:	2300      	movs	r3, #0
   21b3a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   21b3e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21b40:	f013 0f1f 	tst.w	r3, #31
   21b44:	d108      	bne.n	21b58 <signal_poller+0x52>
	return node->next != NULL;
   21b46:	69a3      	ldr	r3, [r4, #24]
   21b48:	b123      	cbz	r3, 21b54 <signal_poller+0x4e>
   21b4a:	2300      	movs	r3, #0
   21b4c:	e005      	b.n	21b5a <signal_poller+0x54>
   21b4e:	f06f 0303 	mvn.w	r3, #3
   21b52:	e7f2      	b.n	21b3a <signal_poller+0x34>
   21b54:	2301      	movs	r3, #1
   21b56:	e000      	b.n	21b5a <signal_poller+0x54>
   21b58:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   21b5a:	b90b      	cbnz	r3, 21b60 <signal_poller+0x5a>
		return 0;
   21b5c:	2000      	movs	r0, #0
   21b5e:	e005      	b.n	21b6c <signal_poller+0x66>
	z_ready_thread(thread);
   21b60:	4620      	mov	r0, r4
   21b62:	f7ff fdc0 	bl	216e6 <z_ready_thread>
	return 0;
   21b66:	2000      	movs	r0, #0
   21b68:	e000      	b.n	21b6c <signal_poller+0x66>
		return 0;
   21b6a:	2000      	movs	r0, #0
}
   21b6c:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   21b6e:	f06f 000a 	mvn.w	r0, #10
   21b72:	e7fb      	b.n	21b6c <signal_poller+0x66>

00021b74 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   21b74:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   21b76:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   21b78:	7823      	ldrb	r3, [r4, #0]
   21b7a:	b173      	cbz	r3, 21b9a <signal_triggered_work+0x26>
   21b7c:	f854 5c04 	ldr.w	r5, [r4, #-4]
   21b80:	b15d      	cbz	r5, 21b9a <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   21b82:	f1a4 0614 	sub.w	r6, r4, #20
   21b86:	f104 0014 	add.w	r0, r4, #20
   21b8a:	f7ff fef8 	bl	2197e <z_abort_timeout>
		twork->poll_result = 0;
   21b8e:	2300      	movs	r3, #0
   21b90:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   21b92:	4631      	mov	r1, r6
   21b94:	4628      	mov	r0, r5
   21b96:	f7ff fc87 	bl	214a8 <k_work_submit_to_queue>
	}

	return 0;
}
   21b9a:	2000      	movs	r0, #0
   21b9c:	bd70      	pop	{r4, r5, r6, pc}

00021b9e <signal_poll_event>:
{
   21b9e:	b570      	push	{r4, r5, r6, lr}
   21ba0:	4604      	mov	r4, r0
   21ba2:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   21ba4:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   21ba6:	b1d6      	cbz	r6, 21bde <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   21ba8:	7873      	ldrb	r3, [r6, #1]
   21baa:	2b01      	cmp	r3, #1
   21bac:	d00d      	beq.n	21bca <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   21bae:	2b02      	cmp	r3, #2
   21bb0:	d012      	beq.n	21bd8 <signal_poll_event+0x3a>
		poller->is_polling = false;
   21bb2:	2000      	movs	r0, #0
   21bb4:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   21bb6:	2300      	movs	r3, #0
   21bb8:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   21bba:	68e3      	ldr	r3, [r4, #12]
   21bbc:	f3c3 3145 	ubfx	r1, r3, #13, #6
   21bc0:	430d      	orrs	r5, r1
   21bc2:	f365 3352 	bfi	r3, r5, #13, #6
   21bc6:	60e3      	str	r3, [r4, #12]
}
   21bc8:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   21bca:	f7ff ff9c 	bl	21b06 <signal_poller>
		poller->is_polling = false;
   21bce:	2300      	movs	r3, #0
   21bd0:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   21bd2:	4298      	cmp	r0, r3
   21bd4:	daef      	bge.n	21bb6 <signal_poll_event+0x18>
   21bd6:	e7f7      	b.n	21bc8 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   21bd8:	f7ff ffcc 	bl	21b74 <signal_triggered_work>
   21bdc:	e7f7      	b.n	21bce <signal_poll_event+0x30>
	int retcode = 0;
   21bde:	2000      	movs	r0, #0
   21be0:	e7e9      	b.n	21bb6 <signal_poll_event+0x18>

00021be2 <k_poll_event_init>:
{
   21be2:	b430      	push	{r4, r5}
	event->poller = NULL;
   21be4:	2400      	movs	r4, #0
   21be6:	6084      	str	r4, [r0, #8]
	event->type = type;
   21be8:	7b45      	ldrb	r5, [r0, #13]
   21bea:	f361 0504 	bfi	r5, r1, #0, #5
   21bee:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   21bf0:	68c1      	ldr	r1, [r0, #12]
   21bf2:	f364 3152 	bfi	r1, r4, #13, #6
   21bf6:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   21bf8:	f3c1 4107 	ubfx	r1, r1, #16, #8
   21bfc:	f362 01c3 	bfi	r1, r2, #3, #1
   21c00:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   21c02:	89c2      	ldrh	r2, [r0, #14]
   21c04:	f364 120f 	bfi	r2, r4, #4, #12
   21c08:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   21c0a:	6103      	str	r3, [r0, #16]
}
   21c0c:	bc30      	pop	{r4, r5}
   21c0e:	4770      	bx	lr

00021c10 <z_handle_obj_poll_events>:
{
   21c10:	b508      	push	{r3, lr}
   21c12:	4603      	mov	r3, r0
	return list->head == list;
   21c14:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   21c16:	4283      	cmp	r3, r0
   21c18:	d009      	beq.n	21c2e <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   21c1a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   21c1c:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   21c1e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21c20:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21c22:	2300      	movs	r3, #0
   21c24:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   21c26:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   21c28:	b108      	cbz	r0, 21c2e <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   21c2a:	f7ff ffb8 	bl	21b9e <signal_poll_event>
}
   21c2e:	bd08      	pop	{r3, pc}

00021c30 <z_heap_aligned_alloc>:
{
   21c30:	b5d0      	push	{r4, r6, r7, lr}
   21c32:	b082      	sub	sp, #8
   21c34:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   21c36:	2000      	movs	r0, #0
   21c38:	2304      	movs	r3, #4
   21c3a:	18d2      	adds	r2, r2, r3
   21c3c:	d20e      	bcs.n	21c5c <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   21c3e:	b978      	cbnz	r0, 21c60 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   21c40:	2600      	movs	r6, #0
   21c42:	2700      	movs	r7, #0
   21c44:	e9cd 6700 	strd	r6, r7, [sp]
   21c48:	f041 0104 	orr.w	r1, r1, #4
   21c4c:	4620      	mov	r0, r4
   21c4e:	f7ff f98f 	bl	20f70 <k_heap_aligned_alloc>
	if (mem == NULL) {
   21c52:	b108      	cbz	r0, 21c58 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   21c54:	f840 4b04 	str.w	r4, [r0], #4
}
   21c58:	b002      	add	sp, #8
   21c5a:	bdd0      	pop	{r4, r6, r7, pc}
   21c5c:	2001      	movs	r0, #1
   21c5e:	e7ee      	b.n	21c3e <z_heap_aligned_alloc+0xe>
		return NULL;
   21c60:	2000      	movs	r0, #0
   21c62:	e7f9      	b.n	21c58 <z_heap_aligned_alloc+0x28>

00021c64 <k_free>:
	if (ptr != NULL) {
   21c64:	b130      	cbz	r0, 21c74 <k_free+0x10>
{
   21c66:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   21c68:	1f01      	subs	r1, r0, #4
   21c6a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   21c6e:	f7ff f9ca 	bl	21006 <k_heap_free>
}
   21c72:	bd08      	pop	{r3, pc}
   21c74:	4770      	bx	lr

00021c76 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   21c76:	4770      	bx	lr

00021c78 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   21c78:	f7f8 bb7c 	b.w	1a374 <SystemInit>
