
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20006f00 	.word	0x20006f00
    1004:	00015bd5 	.word	0x00015bd5
    1008:	00027aaf 	.word	0x00027aaf
    100c:	00015b8d 	.word	0x00015b8d
    1010:	00015b8d 	.word	0x00015b8d
    1014:	00015b8d 	.word	0x00015b8d
    1018:	00015b8d 	.word	0x00015b8d
	...
    102c:	000152d1 	.word	0x000152d1
    1030:	00015b8d 	.word	0x00015b8d
    1034:	00000000 	.word	0x00000000
    1038:	00015279 	.word	0x00015279
    103c:	0002ab95 	.word	0x0002ab95

00001040 <_irq_vector_table>:
    1040:	000153bd 0002b3d3 000153bd 000153bd     .S.......S...S..
    1050:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    1060:	0002b39b 000153bd 000153bd 0002b3b9     .....S...S......
    1070:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    1080:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    1090:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    10a0:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    10b0:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    10c0:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    10d0:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    10e0:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..
    10f0:	000153bd 000153bd 000153bd 000153bd     .S...S...S...S..

Disassembly of section text:

00001100 <__aeabi_uldivmod>:
    1100:	b953      	cbnz	r3, 1118 <__aeabi_uldivmod+0x18>
    1102:	b94a      	cbnz	r2, 1118 <__aeabi_uldivmod+0x18>
    1104:	2900      	cmp	r1, #0
    1106:	bf08      	it	eq
    1108:	2800      	cmpeq	r0, #0
    110a:	bf1c      	itt	ne
    110c:	f04f 31ff 	movne.w	r1, #4294967295
    1110:	f04f 30ff 	movne.w	r0, #4294967295
    1114:	f000 b96c 	b.w	13f0 <__aeabi_idiv0>
    1118:	f1ad 0c08 	sub.w	ip, sp, #8
    111c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1120:	f000 f806 	bl	1130 <__udivmoddi4>
    1124:	f8dd e004 	ldr.w	lr, [sp, #4]
    1128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112c:	b004      	add	sp, #16
    112e:	4770      	bx	lr

00001130 <__udivmoddi4>:
    1130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1134:	9e08      	ldr	r6, [sp, #32]
    1136:	460d      	mov	r5, r1
    1138:	4604      	mov	r4, r0
    113a:	468e      	mov	lr, r1
    113c:	2b00      	cmp	r3, #0
    113e:	f040 8082 	bne.w	1246 <__udivmoddi4+0x116>
    1142:	428a      	cmp	r2, r1
    1144:	4617      	mov	r7, r2
    1146:	d946      	bls.n	11d6 <__udivmoddi4+0xa6>
    1148:	fab2 f282 	clz	r2, r2
    114c:	b14a      	cbz	r2, 1162 <__udivmoddi4+0x32>
    114e:	f1c2 0120 	rsb	r1, r2, #32
    1152:	fa05 f302 	lsl.w	r3, r5, r2
    1156:	fa20 f101 	lsr.w	r1, r0, r1
    115a:	4097      	lsls	r7, r2
    115c:	ea41 0e03 	orr.w	lr, r1, r3
    1160:	4094      	lsls	r4, r2
    1162:	ea4f 4817 	mov.w	r8, r7, lsr #16
    1166:	0c23      	lsrs	r3, r4, #16
    1168:	fbbe fcf8 	udiv	ip, lr, r8
    116c:	b2b9      	uxth	r1, r7
    116e:	fb08 ee1c 	mls	lr, r8, ip, lr
    1172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    1176:	fb0c f001 	mul.w	r0, ip, r1
    117a:	4298      	cmp	r0, r3
    117c:	d90a      	bls.n	1194 <__udivmoddi4+0x64>
    117e:	18fb      	adds	r3, r7, r3
    1180:	f10c 35ff 	add.w	r5, ip, #4294967295
    1184:	f080 8116 	bcs.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    1188:	4298      	cmp	r0, r3
    118a:	f240 8113 	bls.w	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    118e:	f1ac 0c02 	sub.w	ip, ip, #2
    1192:	443b      	add	r3, r7
    1194:	1a1b      	subs	r3, r3, r0
    1196:	b2a4      	uxth	r4, r4
    1198:	fbb3 f0f8 	udiv	r0, r3, r8
    119c:	fb08 3310 	mls	r3, r8, r0, r3
    11a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    11a4:	fb00 f101 	mul.w	r1, r0, r1
    11a8:	42a1      	cmp	r1, r4
    11aa:	d909      	bls.n	11c0 <__udivmoddi4+0x90>
    11ac:	193c      	adds	r4, r7, r4
    11ae:	f100 33ff 	add.w	r3, r0, #4294967295
    11b2:	f080 8101 	bcs.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11b6:	42a1      	cmp	r1, r4
    11b8:	f240 80fe 	bls.w	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    11bc:	3802      	subs	r0, #2
    11be:	443c      	add	r4, r7
    11c0:	1a64      	subs	r4, r4, r1
    11c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11c6:	2100      	movs	r1, #0
    11c8:	b11e      	cbz	r6, 11d2 <__udivmoddi4+0xa2>
    11ca:	40d4      	lsrs	r4, r2
    11cc:	2300      	movs	r3, #0
    11ce:	e9c6 4300 	strd	r4, r3, [r6]
    11d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11d6:	b902      	cbnz	r2, 11da <__udivmoddi4+0xaa>
    11d8:	deff      	udf	#255	; 0xff
    11da:	fab2 f282 	clz	r2, r2
    11de:	2a00      	cmp	r2, #0
    11e0:	d14f      	bne.n	1282 <__udivmoddi4+0x152>
    11e2:	1bcb      	subs	r3, r1, r7
    11e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11e8:	fa1f f887 	uxth.w	r8, r7
    11ec:	2101      	movs	r1, #1
    11ee:	fbb3 fcfe 	udiv	ip, r3, lr
    11f2:	0c25      	lsrs	r5, r4, #16
    11f4:	fb0e 331c 	mls	r3, lr, ip, r3
    11f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    11fc:	fb08 f30c 	mul.w	r3, r8, ip
    1200:	42ab      	cmp	r3, r5
    1202:	d907      	bls.n	1214 <__udivmoddi4+0xe4>
    1204:	197d      	adds	r5, r7, r5
    1206:	f10c 30ff 	add.w	r0, ip, #4294967295
    120a:	d202      	bcs.n	1212 <__udivmoddi4+0xe2>
    120c:	42ab      	cmp	r3, r5
    120e:	f200 80e7 	bhi.w	13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>
    1212:	4684      	mov	ip, r0
    1214:	1aed      	subs	r5, r5, r3
    1216:	b2a3      	uxth	r3, r4
    1218:	fbb5 f0fe 	udiv	r0, r5, lr
    121c:	fb0e 5510 	mls	r5, lr, r0, r5
    1220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1224:	fb08 f800 	mul.w	r8, r8, r0
    1228:	45a0      	cmp	r8, r4
    122a:	d907      	bls.n	123c <__udivmoddi4+0x10c>
    122c:	193c      	adds	r4, r7, r4
    122e:	f100 33ff 	add.w	r3, r0, #4294967295
    1232:	d202      	bcs.n	123a <__udivmoddi4+0x10a>
    1234:	45a0      	cmp	r8, r4
    1236:	f200 80d7 	bhi.w	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
    123a:	4618      	mov	r0, r3
    123c:	eba4 0408 	sub.w	r4, r4, r8
    1240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1244:	e7c0      	b.n	11c8 <__udivmoddi4+0x98>
    1246:	428b      	cmp	r3, r1
    1248:	d908      	bls.n	125c <__udivmoddi4+0x12c>
    124a:	2e00      	cmp	r6, #0
    124c:	f000 80af 	beq.w	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    1250:	2100      	movs	r1, #0
    1252:	e9c6 0500 	strd	r0, r5, [r6]
    1256:	4608      	mov	r0, r1
    1258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    125c:	fab3 f183 	clz	r1, r3
    1260:	2900      	cmp	r1, #0
    1262:	d14b      	bne.n	12fc <__udivmoddi4+0x1cc>
    1264:	42ab      	cmp	r3, r5
    1266:	d302      	bcc.n	126e <__udivmoddi4+0x13e>
    1268:	4282      	cmp	r2, r0
    126a:	f200 80b7 	bhi.w	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    126e:	1a84      	subs	r4, r0, r2
    1270:	eb65 0303 	sbc.w	r3, r5, r3
    1274:	2001      	movs	r0, #1
    1276:	469e      	mov	lr, r3
    1278:	2e00      	cmp	r6, #0
    127a:	d0aa      	beq.n	11d2 <__udivmoddi4+0xa2>
    127c:	e9c6 4e00 	strd	r4, lr, [r6]
    1280:	e7a7      	b.n	11d2 <__udivmoddi4+0xa2>
    1282:	f1c2 0c20 	rsb	ip, r2, #32
    1286:	fa01 f302 	lsl.w	r3, r1, r2
    128a:	4097      	lsls	r7, r2
    128c:	fa20 f00c 	lsr.w	r0, r0, ip
    1290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1294:	fa21 fc0c 	lsr.w	ip, r1, ip
    1298:	4318      	orrs	r0, r3
    129a:	fbbc f1fe 	udiv	r1, ip, lr
    129e:	0c05      	lsrs	r5, r0, #16
    12a0:	fb0e cc11 	mls	ip, lr, r1, ip
    12a4:	fa1f f887 	uxth.w	r8, r7
    12a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    12ac:	fb01 f308 	mul.w	r3, r1, r8
    12b0:	42ab      	cmp	r3, r5
    12b2:	fa04 f402 	lsl.w	r4, r4, r2
    12b6:	d909      	bls.n	12cc <__udivmoddi4+0x19c>
    12b8:	197d      	adds	r5, r7, r5
    12ba:	f101 3cff 	add.w	ip, r1, #4294967295
    12be:	f080 808b 	bcs.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c2:	42ab      	cmp	r3, r5
    12c4:	f240 8088 	bls.w	13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>
    12c8:	3902      	subs	r1, #2
    12ca:	443d      	add	r5, r7
    12cc:	1aeb      	subs	r3, r5, r3
    12ce:	b285      	uxth	r5, r0
    12d0:	fbb3 f0fe 	udiv	r0, r3, lr
    12d4:	fb0e 3310 	mls	r3, lr, r0, r3
    12d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    12dc:	fb00 f308 	mul.w	r3, r0, r8
    12e0:	42ab      	cmp	r3, r5
    12e2:	d907      	bls.n	12f4 <__udivmoddi4+0x1c4>
    12e4:	197d      	adds	r5, r7, r5
    12e6:	f100 3cff 	add.w	ip, r0, #4294967295
    12ea:	d271      	bcs.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12ec:	42ab      	cmp	r3, r5
    12ee:	d96f      	bls.n	13d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x48>
    12f0:	3802      	subs	r0, #2
    12f2:	443d      	add	r5, r7
    12f4:	1aeb      	subs	r3, r5, r3
    12f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    12fa:	e778      	b.n	11ee <__udivmoddi4+0xbe>
    12fc:	f1c1 0c20 	rsb	ip, r1, #32
    1300:	408b      	lsls	r3, r1
    1302:	fa22 f70c 	lsr.w	r7, r2, ip
    1306:	431f      	orrs	r7, r3
    1308:	fa20 f40c 	lsr.w	r4, r0, ip
    130c:	fa05 f301 	lsl.w	r3, r5, r1
    1310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1314:	fa25 f50c 	lsr.w	r5, r5, ip
    1318:	431c      	orrs	r4, r3
    131a:	0c23      	lsrs	r3, r4, #16
    131c:	fbb5 f9fe 	udiv	r9, r5, lr
    1320:	fa1f f887 	uxth.w	r8, r7
    1324:	fb0e 5519 	mls	r5, lr, r9, r5
    1328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    132c:	fb09 fa08 	mul.w	sl, r9, r8
    1330:	45aa      	cmp	sl, r5
    1332:	fa02 f201 	lsl.w	r2, r2, r1
    1336:	fa00 f301 	lsl.w	r3, r0, r1
    133a:	d908      	bls.n	134e <__udivmoddi4+0x21e>
    133c:	197d      	adds	r5, r7, r5
    133e:	f109 30ff 	add.w	r0, r9, #4294967295
    1342:	d247      	bcs.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1344:	45aa      	cmp	sl, r5
    1346:	d945      	bls.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1348:	f1a9 0902 	sub.w	r9, r9, #2
    134c:	443d      	add	r5, r7
    134e:	eba5 050a 	sub.w	r5, r5, sl
    1352:	b2a4      	uxth	r4, r4
    1354:	fbb5 f0fe 	udiv	r0, r5, lr
    1358:	fb0e 5510 	mls	r5, lr, r0, r5
    135c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1360:	fb00 f808 	mul.w	r8, r0, r8
    1364:	45a0      	cmp	r8, r4
    1366:	d907      	bls.n	1378 <__udivmoddi4+0x248>
    1368:	193c      	adds	r4, r7, r4
    136a:	f100 35ff 	add.w	r5, r0, #4294967295
    136e:	d22d      	bcs.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1370:	45a0      	cmp	r8, r4
    1372:	d92b      	bls.n	13cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x44>
    1374:	3802      	subs	r0, #2
    1376:	443c      	add	r4, r7
    1378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    137c:	eba4 0408 	sub.w	r4, r4, r8
    1380:	fba0 8902 	umull	r8, r9, r0, r2
    1384:	454c      	cmp	r4, r9
    1386:	46c6      	mov	lr, r8
    1388:	464d      	mov	r5, r9
    138a:	d319      	bcc.n	13c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x38>
    138c:	d016      	beq.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    138e:	b15e      	cbz	r6, 13a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20>
    1390:	ebb3 020e 	subs.w	r2, r3, lr
    1394:	eb64 0405 	sbc.w	r4, r4, r5
    1398:	fa04 fc0c 	lsl.w	ip, r4, ip
    139c:	40ca      	lsrs	r2, r1
    139e:	ea4c 0202 	orr.w	r2, ip, r2
    13a2:	40cc      	lsrs	r4, r1
    13a4:	e9c6 2400 	strd	r2, r4, [r6]
    13a8:	2100      	movs	r1, #0
    13aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13ae:	4631      	mov	r1, r6
    13b0:	4630      	mov	r0, r6
    13b2:	e70e      	b.n	11d2 <__udivmoddi4+0xa2>
    13b4:	46ac      	mov	ip, r5
    13b6:	e6ed      	b.n	1194 <__udivmoddi4+0x64>
    13b8:	4618      	mov	r0, r3
    13ba:	e701      	b.n	11c0 <__udivmoddi4+0x90>
    13bc:	4543      	cmp	r3, r8
    13be:	d2e6      	bcs.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13c0:	ebb8 0e02 	subs.w	lr, r8, r2
    13c4:	eb69 0507 	sbc.w	r5, r9, r7
    13c8:	3801      	subs	r0, #1
    13ca:	e7e0      	b.n	138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
    13cc:	4628      	mov	r0, r5
    13ce:	e7d3      	b.n	1378 <__udivmoddi4+0x248>
    13d0:	4660      	mov	r0, ip
    13d2:	e78f      	b.n	12f4 <__udivmoddi4+0x1c4>
    13d4:	4681      	mov	r9, r0
    13d6:	e7ba      	b.n	134e <__udivmoddi4+0x21e>
    13d8:	4661      	mov	r1, ip
    13da:	e777      	b.n	12cc <__udivmoddi4+0x19c>
    13dc:	4608      	mov	r0, r1
    13de:	e74b      	b.n	1278 <__udivmoddi4+0x148>
    13e0:	f1ac 0c02 	sub.w	ip, ip, #2
    13e4:	443d      	add	r5, r7
    13e6:	e715      	b.n	1214 <__udivmoddi4+0xe4>
    13e8:	3802      	subs	r0, #2
    13ea:	443c      	add	r4, r7
    13ec:	e726      	b.n	123c <__udivmoddi4+0x10c>
    13ee:	bf00      	nop

000013f0 <__aeabi_idiv0>:
    13f0:	4770      	bx	lr
    13f2:	bf00      	nop

000013f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    13f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    13f6:	4615      	mov	r5, r2
    13f8:	4a0a      	ldr	r2, [pc, #40]	; (1424 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    13fa:	461c      	mov	r4, r3
    13fc:	6856      	ldr	r6, [r2, #4]
    13fe:	b12e      	cbz	r6, 140c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1400:	b001      	add	sp, #4
    1402:	462a      	mov	r2, r5
    1404:	46b4      	mov	ip, r6
    1406:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    140a:	4760      	bx	ip
    140c:	2000      	movs	r0, #0
    140e:	f88d 0000 	strb.w	r0, [sp]
    1412:	4668      	mov	r0, sp
    1414:	f00b fee8 	bl	d1e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1418:	f89d 0000 	ldrb.w	r0, [sp]
    141c:	1a28      	subs	r0, r5, r0
    141e:	7020      	strb	r0, [r4, #0]
    1420:	2000      	movs	r0, #0
    1422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1424:	20000000 	.word	0x20000000

00001428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1428:	4801      	ldr	r0, [pc, #4]	; (1430 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    142a:	7800      	ldrb	r0, [r0, #0]
    142c:	4770      	bx	lr
    142e:	0000      	.short	0x0000
    1430:	20000008 	.word	0x20000008

00001434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1434:	4905      	ldr	r1, [pc, #20]	; (144c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1436:	780a      	ldrb	r2, [r1, #0]
    1438:	4290      	cmp	r0, r2
    143a:	d301      	bcc.n	1440 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    143c:	2000      	movs	r0, #0
    143e:	4770      	bx	lr
    1440:	6849      	ldr	r1, [r1, #4]
    1442:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1446:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    144a:	4770      	bx	lr
    144c:	20000008 	.word	0x20000008
    1450:	b570      	push	{r4, r5, r6, lr}
    1452:	4605      	mov	r5, r0
    1454:	2a20      	cmp	r2, #32
    1456:	d027      	beq.n	14a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1458:	4819      	ldr	r0, [pc, #100]	; (14c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    145a:	4c1a      	ldr	r4, [pc, #104]	; (14c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    145c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    1460:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    1464:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    1468:	2920      	cmp	r1, #32
    146a:	d022      	beq.n	14b2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    146c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    1470:	7840      	ldrb	r0, [r0, #1]
    1472:	784c      	ldrb	r4, [r1, #1]
    1474:	7048      	strb	r0, [r1, #1]
    1476:	4620      	mov	r0, r4
    1478:	4601      	mov	r1, r0
    147a:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    147e:	4291      	cmp	r1, r2
    1480:	7005      	strb	r5, [r0, #0]
    1482:	7840      	ldrb	r0, [r0, #1]
    1484:	d1f8      	bne.n	1478 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    1486:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    148a:	2a20      	cmp	r2, #32
    148c:	bf1a      	itte	ne
    148e:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    1492:	7054      	strbne	r4, [r2, #1]
    1494:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    1498:	2220      	movs	r2, #32
    149a:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    149e:	f88c 2001 	strb.w	r2, [ip, #1]
    14a2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	f240 217e 	movw	r1, #638	; 0x27e
    14ac:	2070      	movs	r0, #112	; 0x70
    14ae:	f003 f957 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    14b2:	f893 4020 	ldrb.w	r4, [r3, #32]
    14b6:	7840      	ldrb	r0, [r0, #1]
    14b8:	f883 0020 	strb.w	r0, [r3, #32]
    14bc:	e7db      	b.n	1476 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    14be:	0000      	.short	0x0000
    14c0:	20000edc 	.word	0x20000edc
    14c4:	20000f5c 	.word	0x20000f5c
    14c8:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14cc:	b085      	sub	sp, #20
    14ce:	4615      	mov	r5, r2
    14d0:	460c      	mov	r4, r1
    14d2:	f002 f91b 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    14d6:	4428      	add	r0, r5
    14d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14dc:	9002      	str	r0, [sp, #8]
    14de:	6821      	ldr	r1, [r4, #0]
    14e0:	1a08      	subs	r0, r1, r0
    14e2:	0200      	lsls	r0, r0, #8
    14e4:	17c1      	asrs	r1, r0, #31
    14e6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    14ea:	1200      	asrs	r0, r0, #8
    14ec:	2800      	cmp	r0, #0
    14ee:	f300 80d5 	bgt.w	169c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    14f2:	48ac      	ldr	r0, [pc, #688]	; (17a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    14f4:	9f08      	ldr	r7, [sp, #32]
    14f6:	4eac      	ldr	r6, [pc, #688]	; (17a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    14f8:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    14fc:	9003      	str	r0, [sp, #12]
    14fe:	f890 5020 	ldrb.w	r5, [r0, #32]
    1502:	2020      	movs	r0, #32
    1504:	46e9      	mov	r9, sp
    1506:	f10d 0804 	add.w	r8, sp, #4
    150a:	f88d 0000 	strb.w	r0, [sp]
    150e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1512:	2d20      	cmp	r5, #32
    1514:	bf18      	it	ne
    1516:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    151a:	d025      	beq.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    151c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1520:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1524:	6822      	ldr	r2, [r4, #0]
    1526:	68c1      	ldr	r1, [r0, #12]
    1528:	1a51      	subs	r1, r2, r1
    152a:	0209      	lsls	r1, r1, #8
    152c:	17ca      	asrs	r2, r1, #31
    152e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1532:	3008      	adds	r0, #8
    1534:	1209      	asrs	r1, r1, #8
    1536:	d417      	bmi.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1538:	8961      	ldrh	r1, [r4, #10]
    153a:	b171      	cbz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    153c:	8941      	ldrh	r1, [r0, #10]
    153e:	b961      	cbnz	r1, 155a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1540:	f000 fdba 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1544:	f002 f8e2 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1548:	6821      	ldr	r1, [r4, #0]
    154a:	1a08      	subs	r0, r1, r0
    154c:	0200      	lsls	r0, r0, #8
    154e:	17c1      	asrs	r1, r0, #31
    1550:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1554:	1200      	asrs	r0, r0, #8
    1556:	2833      	cmp	r0, #51	; 0x33
    1558:	db06      	blt.n	1568 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    155a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    155e:	f889 5000 	strb.w	r5, [r9]
    1562:	7845      	ldrb	r5, [r0, #1]
    1564:	2d20      	cmp	r5, #32
    1566:	d1d9      	bne.n	151c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    1568:	f899 0000 	ldrb.w	r0, [r9]
    156c:	f888 0000 	strb.w	r0, [r8]
    1570:	46a1      	mov	r9, r4
    1572:	2d20      	cmp	r5, #32
    1574:	bf1c      	itt	ne
    1576:	488d      	ldrne	r0, [pc, #564]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1578:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    157c:	f000 810e 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1580:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1584:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    1588:	f8d9 2004 	ldr.w	r2, [r9, #4]
    158c:	f8da 1008 	ldr.w	r1, [sl, #8]
    1590:	4648      	mov	r0, r9
    1592:	1a89      	subs	r1, r1, r2
    1594:	0209      	lsls	r1, r1, #8
    1596:	17ca      	asrs	r2, r1, #31
    1598:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    159c:	f10a 0708 	add.w	r7, sl, #8
    15a0:	1209      	asrs	r1, r1, #8
    15a2:	d415      	bmi.n	15d0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    15a4:	8979      	ldrh	r1, [r7, #10]
    15a6:	2900      	cmp	r1, #0
    15a8:	f000 80f8 	beq.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ac:	8941      	ldrh	r1, [r0, #10]
    15ae:	2900      	cmp	r1, #0
    15b0:	f040 80f4 	bne.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15b4:	f000 fd80 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    15b8:	f002 f8a8 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    15bc:	6839      	ldr	r1, [r7, #0]
    15be:	1a08      	subs	r0, r1, r0
    15c0:	0200      	lsls	r0, r0, #8
    15c2:	17c1      	asrs	r1, r0, #31
    15c4:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    15c8:	1200      	asrs	r0, r0, #8
    15ca:	2833      	cmp	r0, #51	; 0x33
    15cc:	f280 80e6 	bge.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15d0:	f888 5000 	strb.w	r5, [r8]
    15d4:	f89a 1014 	ldrb.w	r1, [sl, #20]
    15d8:	f899 000c 	ldrb.w	r0, [r9, #12]
    15dc:	4281      	cmp	r1, r0
    15de:	d906      	bls.n	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    15e0:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    15e4:	7845      	ldrb	r5, [r0, #1]
    15e6:	2d20      	cmp	r5, #32
    15e8:	d1ca      	bne.n	1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    15ea:	f000 b8d7 	b.w	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    15ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
    15f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    15f6:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    15fa:	8a68      	ldrh	r0, [r5, #18]
    15fc:	68ef      	ldr	r7, [r5, #12]
    15fe:	2800      	cmp	r0, #0
    1600:	d143      	bne.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1602:	8960      	ldrh	r0, [r4, #10]
    1604:	b3e8      	cbz	r0, 1682 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1606:	68a8      	ldr	r0, [r5, #8]
    1608:	f00b fe0e 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    160c:	8a69      	ldrh	r1, [r5, #18]
    160e:	7c2a      	ldrb	r2, [r5, #16]
    1610:	4b67      	ldr	r3, [pc, #412]	; (17b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1612:	4411      	add	r1, r2
    1614:	1c49      	adds	r1, r1, #1
    1616:	1842      	adds	r2, r0, r1
    1618:	4298      	cmp	r0, r3
    161a:	d904      	bls.n	1626 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    161c:	f240 6109 	movw	r1, #1545	; 0x609
    1620:	2070      	movs	r0, #112	; 0x70
    1622:	f003 f89d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1626:	4863      	ldr	r0, [pc, #396]	; (17b4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1628:	4281      	cmp	r1, r0
    162a:	dd04      	ble.n	1636 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    162c:	f240 610a 	movw	r1, #1546	; 0x60a
    1630:	2070      	movs	r0, #112	; 0x70
    1632:	f003 f895 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1636:	4860      	ldr	r0, [pc, #384]	; (17b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1638:	4281      	cmp	r1, r0
    163a:	da04      	bge.n	1646 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    163c:	f240 610b 	movw	r1, #1547	; 0x60b
    1640:	2070      	movs	r0, #112	; 0x70
    1642:	f003 f88d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1646:	485d      	ldr	r0, [pc, #372]	; (17bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1648:	4290      	cmp	r0, r2
    164a:	bfdc      	itt	le
    164c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1650:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1654:	dd05      	ble.n	1662 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1656:	2a00      	cmp	r2, #0
    1658:	bfbc      	itt	lt
    165a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    165e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1662:	4610      	mov	r0, r2
    1664:	f002 f852 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1668:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    166c:	1a78      	subs	r0, r7, r1
    166e:	0200      	lsls	r0, r0, #8
    1670:	17c2      	asrs	r2, r0, #31
    1672:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1676:	1200      	asrs	r0, r0, #8
    1678:	2833      	cmp	r0, #51	; 0x33
    167a:	bfb8      	it	lt
    167c:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    1680:	e000      	b.n	1684 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    1682:	e002      	b.n	168a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1684:	bfb8      	it	lt
    1686:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    168a:	9802      	ldr	r0, [sp, #8]
    168c:	1a38      	subs	r0, r7, r0
    168e:	0200      	lsls	r0, r0, #8
    1690:	17c1      	asrs	r1, r0, #31
    1692:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1696:	1200      	asrs	r0, r0, #8
    1698:	2800      	cmp	r0, #0
    169a:	dd03      	ble.n	16a4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    169c:	b009      	add	sp, #36	; 0x24
    169e:	2000      	movs	r0, #0
    16a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    16a4:	e9d4 1000 	ldrd	r1, r0, [r4]
    16a8:	1a40      	subs	r0, r0, r1
    16aa:	4438      	add	r0, r7
    16ac:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    16b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    16b4:	e9c4 1000 	strd	r1, r0, [r4]
    16b8:	9803      	ldr	r0, [sp, #12]
    16ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
    16be:	466f      	mov	r7, sp
    16c0:	f890 5020 	ldrb.w	r5, [r0, #32]
    16c4:	2020      	movs	r0, #32
    16c6:	f10d 0a04 	add.w	sl, sp, #4
    16ca:	f88d 0000 	strb.w	r0, [sp]
    16ce:	2d20      	cmp	r5, #32
    16d0:	bf1c      	itt	ne
    16d2:	4836      	ldrne	r0, [pc, #216]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    16d4:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    16d8:	d025      	beq.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16da:	bf00      	nop
    16dc:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    16e0:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    16e4:	6822      	ldr	r2, [r4, #0]
    16e6:	68c1      	ldr	r1, [r0, #12]
    16e8:	1a51      	subs	r1, r2, r1
    16ea:	0209      	lsls	r1, r1, #8
    16ec:	17ca      	asrs	r2, r1, #31
    16ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16f2:	3008      	adds	r0, #8
    16f4:	1209      	asrs	r1, r1, #8
    16f6:	d416      	bmi.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    16f8:	8961      	ldrh	r1, [r4, #10]
    16fa:	b171      	cbz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    16fc:	8941      	ldrh	r1, [r0, #10]
    16fe:	b961      	cbnz	r1, 171a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1700:	f000 fcda 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1704:	f002 f802 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1708:	6821      	ldr	r1, [r4, #0]
    170a:	1a08      	subs	r0, r1, r0
    170c:	0200      	lsls	r0, r0, #8
    170e:	17c1      	asrs	r1, r0, #31
    1710:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1714:	1200      	asrs	r0, r0, #8
    1716:	2833      	cmp	r0, #51	; 0x33
    1718:	db05      	blt.n	1726 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    171a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    171e:	703d      	strb	r5, [r7, #0]
    1720:	7845      	ldrb	r5, [r0, #1]
    1722:	2d20      	cmp	r5, #32
    1724:	d1da      	bne.n	16dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1726:	7838      	ldrb	r0, [r7, #0]
    1728:	f88a 0000 	strb.w	r0, [sl]
    172c:	4627      	mov	r7, r4
    172e:	2d20      	cmp	r5, #32
    1730:	bf1c      	itt	ne
    1732:	481e      	ldrne	r0, [pc, #120]	; (17ac <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1734:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1738:	d030      	beq.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    173a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    173e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1742:	6879      	ldr	r1, [r7, #4]
    1744:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1748:	4638      	mov	r0, r7
    174a:	1a51      	subs	r1, r2, r1
    174c:	0209      	lsls	r1, r1, #8
    174e:	17ca      	asrs	r2, r1, #31
    1750:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1754:	f109 0808 	add.w	r8, r9, #8
    1758:	1209      	asrs	r1, r1, #8
    175a:	d412      	bmi.n	1782 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    175c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    1760:	b1e1      	cbz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1762:	8941      	ldrh	r1, [r0, #10]
    1764:	b9d1      	cbnz	r1, 179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1766:	f000 fca7 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    176a:	f001 ffcf 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    176e:	f8d8 1000 	ldr.w	r1, [r8]
    1772:	1a08      	subs	r0, r1, r0
    1774:	0200      	lsls	r0, r0, #8
    1776:	17c1      	asrs	r1, r0, #31
    1778:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    177c:	1200      	asrs	r0, r0, #8
    177e:	2833      	cmp	r0, #51	; 0x33
    1780:	da0c      	bge.n	179c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1782:	f88a 5000 	strb.w	r5, [sl]
    1786:	f899 0014 	ldrb.w	r0, [r9, #20]
    178a:	7b39      	ldrb	r1, [r7, #12]
    178c:	4288      	cmp	r0, r1
    178e:	f67f af2e 	bls.w	15ee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1792:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1796:	7845      	ldrb	r5, [r0, #1]
    1798:	2d20      	cmp	r5, #32
    179a:	d1ce      	bne.n	173a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    179c:	b009      	add	sp, #36	; 0x24
    179e:	2001      	movs	r0, #1
    17a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17a4:	20000f5c 	.word	0x20000f5c
    17a8:	20000bdc 	.word	0x20000bdc
    17ac:	20000edc 	.word	0x20000edc
    17b0:	1e847fff 	.word	0x1e847fff
    17b4:	07a12000 	.word	0x07a12000
    17b8:	f85ee000 	.word	0xf85ee000
    17bc:	1e848000 	.word	0x1e848000
    17c0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    17c4:	4604      	mov	r4, r0
    17c6:	483c      	ldr	r0, [pc, #240]	; (18b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    17c8:	460e      	mov	r6, r1
    17ca:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    17ce:	4f3b      	ldr	r7, [pc, #236]	; (18bc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    17d0:	f890 5020 	ldrb.w	r5, [r0, #32]
    17d4:	2020      	movs	r0, #32
    17d6:	4698      	mov	r8, r3
    17d8:	4692      	mov	sl, r2
    17da:	7010      	strb	r0, [r2, #0]
    17dc:	f507 7940 	add.w	r9, r7, #768	; 0x300
    17e0:	2d20      	cmp	r5, #32
    17e2:	bf18      	it	ne
    17e4:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    17e8:	d028      	beq.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    17ea:	bf00      	nop
    17ec:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    17f0:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    17f4:	f100 0108 	add.w	r1, r0, #8
    17f8:	68c0      	ldr	r0, [r0, #12]
    17fa:	6822      	ldr	r2, [r4, #0]
    17fc:	1a10      	subs	r0, r2, r0
    17fe:	0200      	lsls	r0, r0, #8
    1800:	17c2      	asrs	r2, r0, #31
    1802:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1806:	1200      	asrs	r0, r0, #8
    1808:	d418      	bmi.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    180a:	8960      	ldrh	r0, [r4, #10]
    180c:	b178      	cbz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    180e:	8948      	ldrh	r0, [r1, #10]
    1810:	b968      	cbnz	r0, 182e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1812:	4608      	mov	r0, r1
    1814:	f000 fc50 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1818:	f001 ff78 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    181c:	6821      	ldr	r1, [r4, #0]
    181e:	1a08      	subs	r0, r1, r0
    1820:	0200      	lsls	r0, r0, #8
    1822:	17c1      	asrs	r1, r0, #31
    1824:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1828:	1200      	asrs	r0, r0, #8
    182a:	2833      	cmp	r0, #51	; 0x33
    182c:	db06      	blt.n	183c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    182e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1832:	f88a 5000 	strb.w	r5, [sl]
    1836:	7845      	ldrb	r5, [r0, #1]
    1838:	2d20      	cmp	r5, #32
    183a:	d1d7      	bne.n	17ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    183c:	f89a 0000 	ldrb.w	r0, [sl]
    1840:	f888 0000 	strb.w	r0, [r8]
    1844:	2d20      	cmp	r5, #32
    1846:	bf18      	it	ne
    1848:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    184c:	d030      	beq.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    184e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1852:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1856:	6861      	ldr	r1, [r4, #4]
    1858:	f8d9 2008 	ldr.w	r2, [r9, #8]
    185c:	4620      	mov	r0, r4
    185e:	1a51      	subs	r1, r2, r1
    1860:	0209      	lsls	r1, r1, #8
    1862:	17ca      	asrs	r2, r1, #31
    1864:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1868:	f109 0608 	add.w	r6, r9, #8
    186c:	1209      	asrs	r1, r1, #8
    186e:	d410      	bmi.n	1892 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    1870:	8971      	ldrh	r1, [r6, #10]
    1872:	b1e9      	cbz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1874:	8941      	ldrh	r1, [r0, #10]
    1876:	b9d9      	cbnz	r1, 18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1878:	f000 fc1e 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    187c:	f001 ff46 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1880:	6831      	ldr	r1, [r6, #0]
    1882:	1a08      	subs	r0, r1, r0
    1884:	0200      	lsls	r0, r0, #8
    1886:	17c1      	asrs	r1, r0, #31
    1888:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    188c:	1200      	asrs	r0, r0, #8
    188e:	2833      	cmp	r0, #51	; 0x33
    1890:	da0e      	bge.n	18b0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    1892:	f888 5000 	strb.w	r5, [r8]
    1896:	f899 0014 	ldrb.w	r0, [r9, #20]
    189a:	7b21      	ldrb	r1, [r4, #12]
    189c:	4288      	cmp	r0, r1
    189e:	d802      	bhi.n	18a6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    18a0:	2000      	movs	r0, #0
    18a2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18a6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    18aa:	7845      	ldrb	r5, [r0, #1]
    18ac:	2d20      	cmp	r5, #32
    18ae:	d1ce      	bne.n	184e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    18b0:	2001      	movs	r0, #1
    18b2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    18b6:	0000      	.short	0x0000
    18b8:	20000f5c 	.word	0x20000f5c
    18bc:	20000bdc 	.word	0x20000bdc
    18c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18c4:	f04f 0800 	mov.w	r8, #0
    18c8:	b098      	sub	sp, #96	; 0x60
    18ca:	4616      	mov	r6, r2
    18cc:	460d      	mov	r5, r1
    18ce:	46c3      	mov	fp, r8
    18d0:	f002 f994 	bl	3bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    18d4:	4604      	mov	r4, r0
    18d6:	2d01      	cmp	r5, #1
    18d8:	bf18      	it	ne
    18da:	2d02      	cmpne	r5, #2
    18dc:	d005      	beq.n	18ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b6>
    18de:	f640 1194 	movw	r1, #2452	; 0x994
    18e2:	f04f 0070 	mov.w	r0, #112	; 0x70
    18e6:	f002 ff3b 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18ea:	49fd      	ldr	r1, [pc, #1012]	; (1ce0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ac>)
    18ec:	2001      	movs	r0, #1
    18ee:	6008      	str	r0, [r1, #0]
    18f0:	49fc      	ldr	r1, [pc, #1008]	; (1ce4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b0>)
    18f2:	6889      	ldr	r1, [r1, #8]
    18f4:	6008      	str	r0, [r1, #0]
    18f6:	2000      	movs	r0, #0
    18f8:	900c      	str	r0, [sp, #48]	; 0x30
    18fa:	1e40      	subs	r0, r0, #1
    18fc:	900e      	str	r0, [sp, #56]	; 0x38
    18fe:	49fa      	ldr	r1, [pc, #1000]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    1900:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1904:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1908:	3308      	adds	r3, #8
    190a:	af0f      	add	r7, sp, #60	; 0x3c
    190c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    190e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1912:	a80f      	add	r0, sp, #60	; 0x3c
    1914:	f000 fbd0 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    1918:	900d      	str	r0, [sp, #52]	; 0x34
    191a:	48f3      	ldr	r0, [pc, #972]	; (1ce8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b4>)
    191c:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1920:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1924:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1928:	f1b9 0f00 	cmp.w	r9, #0
    192c:	bf14      	ite	ne
    192e:	f04f 0a01 	movne.w	sl, #1
    1932:	f04f 0a00 	moveq.w	sl, #0
    1936:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1938:	9014      	str	r0, [sp, #80]	; 0x50
    193a:	f1ba 0f00 	cmp.w	sl, #0
    193e:	d009      	beq.n	1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1940:	48ea      	ldr	r0, [pc, #936]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1942:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1946:	b928      	cbnz	r0, 1954 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x520>
    1948:	f002 fea6 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    194c:	2800      	cmp	r0, #0
    194e:	bf08      	it	eq
    1950:	2701      	moveq	r7, #1
    1952:	d000      	beq.n	1956 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x522>
    1954:	2700      	movs	r7, #0
    1956:	48e6      	ldr	r0, [pc, #920]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1958:	2200      	movs	r2, #0
    195a:	9215      	str	r2, [sp, #84]	; 0x54
    195c:	7800      	ldrb	r0, [r0, #0]
    195e:	4616      	mov	r6, r2
    1960:	2801      	cmp	r0, #1
    1962:	bf18      	it	ne
    1964:	2803      	cmpne	r0, #3
    1966:	d140      	bne.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1968:	48e1      	ldr	r0, [pc, #900]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    196a:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    196e:	eba8 0009 	sub.w	r0, r8, r9
    1972:	9015      	str	r0, [sp, #84]	; 0x54
    1974:	45c8      	cmp	r8, r9
    1976:	d938      	bls.n	19ea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5b6>
    1978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    197a:	ea6f 0108 	mvn.w	r1, r8
    197e:	f8df e374 	ldr.w	lr, [pc, #884]	; 1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>
    1982:	1858      	adds	r0, r3, r1
    1984:	f10d 0c0c 	add.w	ip, sp, #12
    1988:	aa17      	add	r2, sp, #92	; 0x5c
    198a:	4573      	cmp	r3, lr
    198c:	d904      	bls.n	1998 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x564>
    198e:	f240 6109 	movw	r1, #1545	; 0x609
    1992:	2070      	movs	r0, #112	; 0x70
    1994:	f002 fee4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1998:	4bd7      	ldr	r3, [pc, #860]	; (1cf8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c4>)
    199a:	4299      	cmp	r1, r3
    199c:	dd04      	ble.n	19a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x574>
    199e:	f240 610a 	movw	r1, #1546	; 0x60a
    19a2:	2070      	movs	r0, #112	; 0x70
    19a4:	f002 fedc 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19a8:	4bd4      	ldr	r3, [pc, #848]	; (1cfc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c8>)
    19aa:	4299      	cmp	r1, r3
    19ac:	da04      	bge.n	19b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x584>
    19ae:	f240 610b 	movw	r1, #1547	; 0x60b
    19b2:	2070      	movs	r0, #112	; 0x70
    19b4:	f002 fed4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19b8:	49d1      	ldr	r1, [pc, #836]	; (1d00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8cc>)
    19ba:	4281      	cmp	r1, r0
    19bc:	bfdc      	itt	le
    19be:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    19c2:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    19c6:	dd05      	ble.n	19d4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a0>
    19c8:	2800      	cmp	r0, #0
    19ca:	bfbc      	itt	lt
    19cc:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    19d0:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    19d4:	4661      	mov	r1, ip
    19d6:	f001 feb5 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    19da:	9803      	ldr	r0, [sp, #12]
    19dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    19de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    19e2:	9003      	str	r0, [sp, #12]
    19e4:	1a08      	subs	r0, r1, r0
    19e6:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    19ea:	2f00      	cmp	r7, #0
    19ec:	bf18      	it	ne
    19ee:	2632      	movne	r6, #50	; 0x32
    19f0:	d104      	bne.n	19fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5c8>
    19f2:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    19f6:	2800      	cmp	r0, #0
    19f8:	bf18      	it	ne
    19fa:	2602      	movne	r6, #2
    19fc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1a00:	d008      	beq.n	1a14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e0>
    1a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1a04:	1b00      	subs	r0, r0, r4
    1a06:	0200      	lsls	r0, r0, #8
    1a08:	17c1      	asrs	r1, r0, #31
    1a0a:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a0e:	1200      	asrs	r0, r0, #8
    1a10:	2801      	cmp	r0, #1
    1a12:	da02      	bge.n	1a1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    1a14:	2104      	movs	r1, #4
    1a16:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a18:	e00b      	b.n	1a32 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fe>
    1a1a:	b147      	cbz	r7, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a1c:	48b3      	ldr	r0, [pc, #716]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1a1e:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1a22:	b120      	cbz	r0, 1a2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5fa>
    1a24:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1a28:	1c06      	adds	r6, r0, #0
    1a2a:	bf18      	it	ne
    1a2c:	2602      	movne	r6, #2
    1a2e:	4620      	mov	r0, r4
    1a30:	2101      	movs	r1, #1
    1a32:	f1b9 0f00 	cmp.w	r9, #0
    1a36:	d002      	beq.n	1a3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x60a>
    1a38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a3a:	2b1e      	cmp	r3, #30
    1a3c:	da02      	bge.n	1a44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    1a3e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1a42:	b113      	cbz	r3, 1a4a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    1a44:	f04f 0b01 	mov.w	fp, #1
    1a48:	1e49      	subs	r1, r1, #1
    1a4a:	198b      	adds	r3, r1, r6
    1a4c:	49a8      	ldr	r1, [pc, #672]	; (1cf0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8bc>)
    1a4e:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1a52:	7809      	ldrb	r1, [r1, #0]
    1a54:	9115      	str	r1, [sp, #84]	; 0x54
    1a56:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1a58:	1a89      	subs	r1, r1, r2
    1a5a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
    1a5e:	ebac 0100 	sub.w	r1, ip, r0
    1a62:	0209      	lsls	r1, r1, #8
    1a64:	17ce      	asrs	r6, r1, #31
    1a66:	eb01 6116 	add.w	r1, r1, r6, lsr #24
    1a6a:	1209      	asrs	r1, r1, #8
    1a6c:	4299      	cmp	r1, r3
    1a6e:	db18      	blt.n	1aa2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x66e>
    1a70:	2a00      	cmp	r2, #0
    1a72:	bf18      	it	ne
    1a74:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1a78:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1a7a:	9705      	str	r7, [sp, #20]
    1a7c:	2700      	movs	r7, #0
    1a7e:	f001 ffb7 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1a82:	1a30      	subs	r0, r6, r0
    1a84:	0200      	lsls	r0, r0, #8
    1a86:	17c1      	asrs	r1, r0, #31
    1a88:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1a8c:	1200      	asrs	r0, r0, #8
    1a8e:	283e      	cmp	r0, #62	; 0x3e
    1a90:	da3f      	bge.n	1b12 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6de>
    1a92:	2d01      	cmp	r5, #1
    1a94:	d020      	beq.n	1ad8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6a4>
    1a96:	1e70      	subs	r0, r6, #1
    1a98:	9905      	ldr	r1, [sp, #20]
    1a9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a9e:	b319      	cbz	r1, 1ae8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6b4>
    1aa0:	e02d      	b.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aa2:	b182      	cbz	r2, 1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1aa4:	f1be 0f00 	cmp.w	lr, #0
    1aa8:	bf04      	itt	eq
    1aaa:	9915      	ldreq	r1, [sp, #84]	; 0x54
    1aac:	2903      	cmpeq	r1, #3
    1aae:	d00a      	beq.n	1ac6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x692>
    1ab0:	b927      	cbnz	r7, 1abc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x688>
    1ab2:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1ab6:	2900      	cmp	r1, #0
    1ab8:	bf18      	it	ne
    1aba:	1e9b      	subne	r3, r3, #2
    1abc:	2200      	movs	r2, #0
    1abe:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1ac2:	4690      	mov	r8, r2
    1ac4:	e7c7      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ac6:	bb07      	cbnz	r7, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ac8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    1acc:	b1e9      	cbz	r1, 1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1ace:	2100      	movs	r1, #0
    1ad0:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    1ad4:	1e9b      	subs	r3, r3, #2
    1ad6:	e7be      	b.n	1a56 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x622>
    1ad8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1adc:	d120      	bne.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1ade:	f640 110d 	movw	r1, #2317	; 0x90d
    1ae2:	2070      	movs	r0, #112	; 0x70
    1ae4:	f002 fe3c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ae8:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1aec:	d007      	beq.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ca>
    1aee:	1a21      	subs	r1, r4, r0
    1af0:	0209      	lsls	r1, r1, #8
    1af2:	17ca      	asrs	r2, r1, #31
    1af4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1af8:	1209      	asrs	r1, r1, #8
    1afa:	2904      	cmp	r1, #4
    1afc:	dd03      	ble.n	1b06 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d2>
    1afe:	4604      	mov	r4, r0
    1b00:	f001 ff7c 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b04:	e00c      	b.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b06:	2900      	cmp	r1, #0
    1b08:	dd0a      	ble.n	1b20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ec>
    1b0a:	b01b      	add	sp, #108	; 0x6c
    1b0c:	2000      	movs	r0, #0
    1b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b12:	1e70      	subs	r0, r6, #1
    1b14:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1b18:	4620      	mov	r0, r4
    1b1a:	f001 ff6f 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1b1e:	4657      	mov	r7, sl
    1b20:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b24:	d028      	beq.n	1b78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x744>
    1b26:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    1b2c:	1b00      	subs	r0, r0, r4
    1b2e:	f08b 0301 	eor.w	r3, fp, #1
    1b32:	4a74      	ldr	r2, [pc, #464]	; (1d04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d0>)
    1b34:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b38:	ebac 0c04 	sub.w	ip, ip, r4
    1b3c:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    1b40:	4283      	cmp	r3, r0
    1b42:	bf98      	it	ls
    1b44:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1b48:	d2df      	bcs.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4a:	4562      	cmp	r2, ip
    1b4c:	d3dd      	bcc.n	1b0a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d6>
    1b4e:	4620      	mov	r0, r4
    1b50:	f00b fb6a 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1b54:	4967      	ldr	r1, [pc, #412]	; (1cf4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c0>)
    1b56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1b58:	1c4b      	adds	r3, r1, #1
    1b5a:	1a16      	subs	r6, r2, r0
    1b5c:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1b60:	bf24      	itt	cs
    1b62:	eba0 0c02 	subcs.w	ip, r0, r2
    1b66:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1b6a:	d310      	bcc.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b6c:	42b1      	cmp	r1, r6
    1b6e:	d208      	bcs.n	1b82 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74e>
    1b70:	1a08      	subs	r0, r1, r0
    1b72:	4410      	add	r0, r2
    1b74:	1c46      	adds	r6, r0, #1
    1b76:	e00a      	b.n	1b8e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75a>
    1b78:	f640 212c 	movw	r1, #2604	; 0xa2c
    1b7c:	2070      	movs	r0, #112	; 0x70
    1b7e:	f002 fdef 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1b82:	4561      	cmp	r1, ip
    1b84:	d22c      	bcs.n	1be0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7ac>
    1b86:	1a89      	subs	r1, r1, r2
    1b88:	4408      	add	r0, r1
    1b8a:	1c40      	adds	r0, r0, #1
    1b8c:	4246      	negs	r6, r0
    1b8e:	4857      	ldr	r0, [pc, #348]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1b90:	7f80      	ldrb	r0, [r0, #30]
    1b92:	b350      	cbz	r0, 1bea <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b6>
    1b94:	4628      	mov	r0, r5
    1b96:	4645      	mov	r5, r8
    1b98:	f04f 0b00 	mov.w	fp, #0
    1b9c:	46d8      	mov	r8, fp
    1b9e:	2801      	cmp	r0, #1
    1ba0:	d005      	beq.n	1bae <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x77a>
    1ba2:	2002      	movs	r0, #2
    1ba4:	f002 f972 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ba8:	2001      	movs	r0, #1
    1baa:	f002 f96f 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1bae:	45a9      	cmp	r9, r5
    1bb0:	d22c      	bcs.n	1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7d8>
    1bb2:	eba6 0105 	sub.w	r1, r6, r5
    1bb6:	f04f 0301 	mov.w	r3, #1
    1bba:	f04f 0203 	mov.w	r2, #3
    1bbe:	f04f 0002 	mov.w	r0, #2
    1bc2:	f002 f89b 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1bc6:	2800      	cmp	r0, #0
    1bc8:	bf08      	it	eq
    1bca:	f04f 0801 	moveq.w	r8, #1
    1bce:	f1b9 0f00 	cmp.w	r9, #0
    1bd2:	d035      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1bd4:	2301      	movs	r3, #1
    1bd6:	eba6 0109 	sub.w	r1, r6, r9
    1bda:	2203      	movs	r2, #3
    1bdc:	4618      	mov	r0, r3
    1bde:	e023      	b.n	1c28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7f4>
    1be0:	f640 310c 	movw	r1, #2828	; 0xb0c
    1be4:	2070      	movs	r0, #112	; 0x70
    1be6:	f002 fdbb 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1bea:	45c1      	cmp	r9, r8
    1bec:	bf34      	ite	cc
    1bee:	4640      	movcc	r0, r8
    1bf0:	4648      	movcs	r0, r9
    1bf2:	f1bb 0f00 	cmp.w	fp, #0
    1bf6:	bf14      	ite	ne
    1bf8:	2100      	movne	r1, #0
    1bfa:	211e      	moveq	r1, #30
    1bfc:	4408      	add	r0, r1
    1bfe:	42b0      	cmp	r0, r6
    1c00:	dbc8      	blt.n	1b94 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x760>
    1c02:	f640 213f 	movw	r1, #2623	; 0xa3f
    1c06:	2070      	movs	r0, #112	; 0x70
    1c08:	f002 fdaa 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c0c:	d910      	bls.n	1c30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7fc>
    1c0e:	2301      	movs	r3, #1
    1c10:	eba6 0109 	sub.w	r1, r6, r9
    1c14:	2203      	movs	r2, #3
    1c16:	4618      	mov	r0, r3
    1c18:	f002 f870 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c1c:	b328      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c1e:	b17d      	cbz	r5, 1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c20:	1b71      	subs	r1, r6, r5
    1c22:	2301      	movs	r3, #1
    1c24:	2203      	movs	r2, #3
    1c26:	2002      	movs	r0, #2
    1c28:	f002 f868 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c2c:	b1e8      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c2e:	e007      	b.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c30:	ea55 0009 	orrs.w	r0, r5, r9
    1c34:	d004      	beq.n	1c40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x80c>
    1c36:	f640 1177 	movw	r1, #2423	; 0x977
    1c3a:	2070      	movs	r0, #112	; 0x70
    1c3c:	f002 fd90 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c40:	2301      	movs	r3, #1
    1c42:	2203      	movs	r2, #3
    1c44:	4631      	mov	r1, r6
    1c46:	2000      	movs	r0, #0
    1c48:	f002 f858 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1c4c:	b168      	cbz	r0, 1c6a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x836>
    1c4e:	2501      	movs	r5, #1
    1c50:	f1b8 0f00 	cmp.w	r8, #0
    1c54:	d003      	beq.n	1c5e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x82a>
    1c56:	9814      	ldr	r0, [sp, #80]	; 0x50
    1c58:	900f      	str	r0, [sp, #60]	; 0x3c
    1c5a:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1c5e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1d08 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d4>
    1c62:	f1ba 0f00 	cmp.w	sl, #0
    1c66:	d10e      	bne.n	1c86 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x852>
    1c68:	e009      	b.n	1c7e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x84a>
    1c6a:	2002      	movs	r0, #2
    1c6c:	f002 f90e 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c70:	2001      	movs	r0, #1
    1c72:	f002 f90b 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1c76:	b01b      	add	sp, #108	; 0x6c
    1c78:	2000      	movs	r0, #0
    1c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c7e:	481b      	ldr	r0, [pc, #108]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1c80:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1c84:	b100      	cbz	r0, 1c88 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x854>
    1c86:	b34f      	cbz	r7, 1cdc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8a8>
    1c88:	f8df a060 	ldr.w	sl, [pc, #96]	; 1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>
    1c8c:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1c90:	b118      	cbz	r0, 1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1c92:	f002 fbc9 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1c96:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1c9a:	b307      	cbz	r7, 1cde <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8aa>
    1c9c:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1ca0:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ca4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1ca8:	f8c8 0000 	str.w	r0, [r8]
    1cac:	2300      	movs	r3, #0
    1cae:	2203      	movs	r2, #3
    1cb0:	2005      	movs	r0, #5
    1cb2:	f002 f823 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1cb6:	b368      	cbz	r0, 1d14 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e0>
    1cb8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1cbc:	2005      	movs	r0, #5
    1cbe:	f002 f9ab 	bl	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1cc2:	4912      	ldr	r1, [pc, #72]	; (1d0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8d8>)
    1cc4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1cc8:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1ccc:	4910      	ldr	r1, [pc, #64]	; (1d10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8dc>)
    1cce:	12e0      	asrs	r0, r4, #11
    1cd0:	6008      	str	r0, [r1, #0]
    1cd2:	4c06      	ldr	r4, [pc, #24]	; (1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8b8>)
    1cd4:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1cd8:	b3f0      	cbz	r0, 1d58 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc>
    1cda:	e05b      	b.n	1d94 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x48>
    1cdc:	e01b      	b.n	1d16 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8e2>
    1cde:	e01f      	b.n	1d20 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8ec>
    1ce0:	40000508 	.word	0x40000508
    1ce4:	20000010 	.word	0x20000010
    1ce8:	20000bdc 	.word	0x20000bdc
    1cec:	20000f5c 	.word	0x20000f5c
    1cf0:	20000012 	.word	0x20000012
    1cf4:	1e847fff 	.word	0x1e847fff
    1cf8:	07a12000 	.word	0x07a12000
    1cfc:	f85ee000 	.word	0xf85ee000
    1d00:	1e848000 	.word	0x1e848000
    1d04:	003fffff 	.word	0x003fffff
    1d08:	4001f508 	.word	0x4001f508
    1d0c:	4001f098 	.word	0x4001f098
    1d10:	4001f504 	.word	0x4001f504
    1d14:	e035      	b.n	1d82 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36>
    1d16:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>
    1d1a:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1d1e:	b358      	cbz	r0, 1d78 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d20:	4c2b      	ldr	r4, [pc, #172]	; (1dd0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x84>)
    1d22:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1d26:	b150      	cbz	r0, 1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1d28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1d2c:	f8c8 0000 	str.w	r0, [r8]
    1d30:	2005      	movs	r0, #5
    1d32:	f002 f8ab 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1d36:	f002 fbdf 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1d3a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1d3e:	ac0c      	add	r4, sp, #48	; 0x30
    1d40:	4824      	ldr	r0, [pc, #144]	; (1dd4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x88>)
    1d42:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d46:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1d4a:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1d4e:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1d52:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1d56:	e000      	b.n	1d5a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d58:	e018      	b.n	1d8c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x40>
    1d5a:	ac10      	add	r4, sp, #64	; 0x40
    1d5c:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1d60:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1d64:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1d68:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1d6c:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1d70:	b01b      	add	sp, #108	; 0x6c
    1d72:	2001      	movs	r0, #1
    1d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d78:	f002 fb72 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1d7c:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1d80:	e78b      	b.n	1c9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x866>
    1d82:	f240 313e 	movw	r1, #830	; 0x33e
    1d86:	2070      	movs	r0, #112	; 0x70
    1d88:	f002 fcea 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d8c:	f002 fba6 	bl	44dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1d90:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1d94:	eba6 0009 	sub.w	r0, r6, r9
    1d98:	f1a0 0119 	sub.w	r1, r0, #25
    1d9c:	2900      	cmp	r1, #0
    1d9e:	dc04      	bgt.n	1daa <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e>
    1da0:	f640 2169 	movw	r1, #2665	; 0xa69
    1da4:	2070      	movs	r0, #112	; 0x70
    1da6:	f002 fcdb 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1daa:	2203      	movs	r2, #3
    1dac:	2301      	movs	r3, #1
    1dae:	4610      	mov	r0, r2
    1db0:	f001 ffa4 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1db4:	b138      	cbz	r0, 1dc6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x7a>
    1db6:	4808      	ldr	r0, [pc, #32]	; (1dd8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8c>)
    1db8:	6880      	ldr	r0, [r0, #8]
    1dba:	f8c0 b000 	str.w	fp, [r0]
    1dbe:	4807      	ldr	r0, [pc, #28]	; (1ddc <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x90>)
    1dc0:	f8c0 b000 	str.w	fp, [r0]
    1dc4:	e7bb      	b.n	1d3e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90a>
    1dc6:	f640 2174 	movw	r1, #2676	; 0xa74
    1dca:	2070      	movs	r0, #112	; 0x70
    1dcc:	f002 fcc8 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1dd0:	20000f5c 	.word	0x20000f5c
    1dd4:	20000bdc 	.word	0x20000bdc
    1dd8:	20000010 	.word	0x20000010
    1ddc:	40000508 	.word	0x40000508
    1de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1de4:	4606      	mov	r6, r0
    1de6:	b083      	sub	sp, #12
    1de8:	7808      	ldrb	r0, [r1, #0]
    1dea:	7390      	strb	r0, [r2, #14]
    1dec:	7acf      	ldrb	r7, [r1, #11]
    1dee:	7357      	strb	r7, [r2, #13]
    1df0:	7a88      	ldrb	r0, [r1, #10]
    1df2:	7310      	strb	r0, [r2, #12]
    1df4:	8908      	ldrh	r0, [r1, #8]
    1df6:	4614      	mov	r4, r2
    1df8:	8150      	strh	r0, [r2, #10]
    1dfa:	460d      	mov	r5, r1
    1dfc:	780a      	ldrb	r2, [r1, #0]
    1dfe:	495f      	ldr	r1, [pc, #380]	; (1f7c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x230>)
    1e00:	4699      	mov	r9, r3
    1e02:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1e06:	424b      	negs	r3, r1
    1e08:	f1ac 0801 	sub.w	r8, ip, #1
    1e0c:	b15a      	cbz	r2, 1e26 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xda>
    1e0e:	43c0      	mvns	r0, r0
    1e10:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1e14:	f104 0208 	add.w	r2, r4, #8
    1e18:	4288      	cmp	r0, r1
    1e1a:	dd3d      	ble.n	1e98 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14c>
    1e1c:	f240 610a 	movw	r1, #1546	; 0x60a
    1e20:	2070      	movs	r0, #112	; 0x70
    1e22:	f002 fc9d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e26:	68ee      	ldr	r6, [r5, #12]
    1e28:	686d      	ldr	r5, [r5, #4]
    1e2a:	ea6f 0900 	mvn.w	r9, r0
    1e2e:	f104 0208 	add.w	r2, r4, #8
    1e32:	eb06 0009 	add.w	r0, r6, r9
    1e36:	4546      	cmp	r6, r8
    1e38:	d904      	bls.n	1e44 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e3a:	f240 6109 	movw	r1, #1545	; 0x609
    1e3e:	2070      	movs	r0, #112	; 0x70
    1e40:	f002 fc8e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e44:	4589      	cmp	r9, r1
    1e46:	dce9      	bgt.n	1e1c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1e48:	4599      	cmp	r9, r3
    1e4a:	db28      	blt.n	1e9e <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x152>
    1e4c:	4584      	cmp	ip, r0
    1e4e:	bfdc      	itt	le
    1e50:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1e54:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1e58:	dd05      	ble.n	1e66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x11a>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	bfbc      	itt	lt
    1e5e:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1e62:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1e66:	4621      	mov	r1, r4
    1e68:	f001 fc6c 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1e6c:	6820      	ldr	r0, [r4, #0]
    1e6e:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1e72:	1970      	adds	r0, r6, r5
    1e74:	1c40      	adds	r0, r0, #1
    1e76:	6021      	str	r1, [r4, #0]
    1e78:	2f00      	cmp	r7, #0
    1e7a:	bf08      	it	eq
    1e7c:	307a      	addeq	r0, #122	; 0x7a
    1e7e:	d003      	beq.n	1e88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e80:	2f01      	cmp	r7, #1
    1e82:	bf08      	it	eq
    1e84:	3044      	addeq	r0, #68	; 0x44
    1e86:	d12d      	bne.n	1ee4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x198>
    1e88:	f001 fc40 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1e8c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e90:	6060      	str	r0, [r4, #4]
    1e92:	b003      	add	sp, #12
    1e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e98:	4601      	mov	r1, r0
    1e9a:	4298      	cmp	r0, r3
    1e9c:	da04      	bge.n	1ea8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1e9e:	f240 610b 	movw	r1, #1547	; 0x60b
    1ea2:	2070      	movs	r0, #112	; 0x70
    1ea4:	f002 fc5c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ea8:	4584      	cmp	ip, r0
    1eaa:	bfdc      	itt	le
    1eac:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1eb0:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1eb4:	dd05      	ble.n	1ec2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x176>
    1eb6:	2800      	cmp	r0, #0
    1eb8:	bfbc      	itt	lt
    1eba:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1ebe:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1ec2:	4621      	mov	r1, r4
    1ec4:	f001 fc3e 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ec8:	6820      	ldr	r0, [r4, #0]
    1eca:	2f00      	cmp	r7, #0
    1ecc:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ed0:	f108 0001 	add.w	r0, r8, #1
    1ed4:	6021      	str	r1, [r4, #0]
    1ed6:	bf08      	it	eq
    1ed8:	307a      	addeq	r0, #122	; 0x7a
    1eda:	d008      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1edc:	2f01      	cmp	r7, #1
    1ede:	bf08      	it	eq
    1ee0:	3044      	addeq	r0, #68	; 0x44
    1ee2:	d004      	beq.n	1eee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a2>
    1ee4:	f240 61b1 	movw	r1, #1713	; 0x6b1
    1ee8:	2070      	movs	r0, #112	; 0x70
    1eea:	f002 fc39 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1eee:	f001 fc0d 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1ef2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1ef6:	6061      	str	r1, [r4, #4]
    1ef8:	8960      	ldrh	r0, [r4, #10]
    1efa:	aa01      	add	r2, sp, #4
    1efc:	4669      	mov	r1, sp
    1efe:	f001 fc21 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f02:	481f      	ldr	r0, [pc, #124]	; (1f80 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>)
    1f04:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1f08:	2920      	cmp	r1, #32
    1f0a:	d023      	beq.n	1f54 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x208>
    1f0c:	6900      	ldr	r0, [r0, #16]
    1f0e:	1d40      	adds	r0, r0, #5
    1f10:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f14:	e9d4 2100 	ldrd	r2, r1, [r4]
    1f18:	1a89      	subs	r1, r1, r2
    1f1a:	6020      	str	r0, [r4, #0]
    1f1c:	4408      	add	r0, r1
    1f1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f22:	6060      	str	r0, [r4, #4]
    1f24:	464b      	mov	r3, r9
    1f26:	4632      	mov	r2, r6
    1f28:	4621      	mov	r1, r4
    1f2a:	68e8      	ldr	r0, [r5, #12]
    1f2c:	f7ff facc 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    1f30:	2800      	cmp	r0, #0
    1f32:	bf1c      	itt	ne
    1f34:	b003      	addne	sp, #12
    1f36:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f3a:	e9d4 1000 	ldrd	r1, r0, [r4]
    1f3e:	1a40      	subs	r0, r0, r1
    1f40:	4430      	add	r0, r6
    1f42:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    1f46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f4a:	e9c4 1000 	strd	r1, r0, [r4]
    1f4e:	b003      	add	sp, #12
    1f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f54:	8960      	ldrh	r0, [r4, #10]
    1f56:	f106 0709 	add.w	r7, r6, #9
    1f5a:	b120      	cbz	r0, 1f66 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f5c:	f002 fb9c 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f60:	2800      	cmp	r0, #0
    1f62:	bf08      	it	eq
    1f64:	3732      	addeq	r7, #50	; 0x32
    1f66:	4807      	ldr	r0, [pc, #28]	; (1f84 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>)
    1f68:	7841      	ldrb	r1, [r0, #1]
    1f6a:	9800      	ldr	r0, [sp, #0]
    1f6c:	4281      	cmp	r1, r0
    1f6e:	bf84      	itt	hi
    1f70:	1a08      	subhi	r0, r1, r0
    1f72:	4407      	addhi	r7, r0
    1f74:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    1f78:	e7cc      	b.n	1f14 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    1f7a:	0000      	.short	0x0000
    1f7c:	07a12000 	.word	0x07a12000
    1f80:	20000f5c 	.word	0x20000f5c
    1f84:	20000012 	.word	0x20000012
    1f88:	b510      	push	{r4, lr}
    1f8a:	4c15      	ldr	r4, [pc, #84]	; (1fe0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1f8c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f90:	2820      	cmp	r0, #32
    1f92:	bf18      	it	ne
    1f94:	bd10      	popne	{r4, pc}
    1f96:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    1f9a:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    1f9e:	f890 1020 	ldrb.w	r1, [r0, #32]
    1fa2:	2920      	cmp	r1, #32
    1fa4:	d017      	beq.n	1fd6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28a>
    1fa6:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1fe4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>
    1faa:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    1fae:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    1fb2:	785b      	ldrb	r3, [r3, #1]
    1fb4:	f880 3020 	strb.w	r3, [r0, #32]
    1fb8:	2301      	movs	r3, #1
    1fba:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    1fbe:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    1fc2:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    1fc6:	2002      	movs	r0, #2
    1fc8:	f000 f8b0 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    1fcc:	2000      	movs	r0, #0
    1fce:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1fd2:	77a0      	strb	r0, [r4, #30]
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	f240 318b 	movw	r1, #907	; 0x38b
    1fda:	2070      	movs	r0, #112	; 0x70
    1fdc:	f002 fbc0 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fe0:	20000f5c 	.word	0x20000f5c
    1fe4:	20000edc 	.word	0x20000edc
    1fe8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 20a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x35c>
    1ff0:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1ff4:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    1ff8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1ffc:	2c20      	cmp	r4, #32
    1ffe:	bf08      	it	eq
    2000:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2004:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 20ac <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x360>
    2008:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 20b0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>
    200c:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2010:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2014:	2607      	movs	r6, #7
    2016:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    201a:	2801      	cmp	r0, #1
    201c:	d00e      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    201e:	2804      	cmp	r0, #4
    2020:	bf08      	it	eq
    2022:	2602      	moveq	r6, #2
    2024:	d00a      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    2026:	2805      	cmp	r0, #5
    2028:	bf0c      	ite	eq
    202a:	2603      	moveq	r6, #3
    202c:	2806      	cmpne	r0, #6
    202e:	d005      	beq.n	203c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f0>
    2030:	f640 01d9 	movw	r1, #2265	; 0x8d9
    2034:	f04f 0070 	mov.w	r0, #112	; 0x70
    2038:	f002 fb92 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    203c:	f1bb 0f00 	cmp.w	fp, #0
    2040:	bf18      	it	ne
    2042:	f3af 8000 	nopne.w
    2046:	f3ef 8010 	mrs	r0, PRIMASK
    204a:	b672      	cpsid	i
    204c:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2050:	784a      	ldrb	r2, [r1, #1]
    2052:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    2056:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    205a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    205e:	42a2      	cmp	r2, r4
    2060:	bf04      	itt	eq
    2062:	2220      	moveq	r2, #32
    2064:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    2068:	b1b8      	cbz	r0, 209a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34e>
    206a:	462a      	mov	r2, r5
    206c:	4621      	mov	r1, r4
    206e:	2001      	movs	r0, #1
    2070:	f000 f85c 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2074:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2078:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    207c:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    2080:	6840      	ldr	r0, [r0, #4]
    2082:	4631      	mov	r1, r6
    2084:	4790      	blx	r2
    2086:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    208a:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    208e:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2092:	2c20      	cmp	r4, #32
    2094:	d1bc      	bne.n	2010 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c4>
    2096:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x368>)
    209c:	2800      	cmp	r0, #0
    209e:	bf18      	it	ne
    20a0:	f3af 8000 	nopne.w
    20a4:	b662      	cpsie	i
    20a6:	e7e0      	b.n	206a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x31e>
    20a8:	20000f5c 	.word	0x20000f5c
    20ac:	00000000 	.word	0x00000000
    20b0:	20000edc 	.word	0x20000edc
    20b4:	00000000 	.word	0x00000000
    20b8:	b510      	push	{r4, lr}
    20ba:	4604      	mov	r4, r0
    20bc:	6800      	ldr	r0, [r0, #0]
    20be:	f00b f8b3 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    20c2:	4602      	mov	r2, r0
    20c4:	8960      	ldrh	r0, [r4, #10]
    20c6:	7a21      	ldrb	r1, [r4, #8]
    20c8:	4b14      	ldr	r3, [pc, #80]	; (211c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d0>)
    20ca:	4408      	add	r0, r1
    20cc:	1c41      	adds	r1, r0, #1
    20ce:	1850      	adds	r0, r2, r1
    20d0:	429a      	cmp	r2, r3
    20d2:	d904      	bls.n	20de <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x392>
    20d4:	f240 6109 	movw	r1, #1545	; 0x609
    20d8:	2070      	movs	r0, #112	; 0x70
    20da:	f002 fb41 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20de:	4a10      	ldr	r2, [pc, #64]	; (2120 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d4>)
    20e0:	4291      	cmp	r1, r2
    20e2:	dd04      	ble.n	20ee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3a2>
    20e4:	f240 610a 	movw	r1, #1546	; 0x60a
    20e8:	2070      	movs	r0, #112	; 0x70
    20ea:	f002 fb39 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20ee:	4a0d      	ldr	r2, [pc, #52]	; (2124 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3d8>)
    20f0:	4291      	cmp	r1, r2
    20f2:	da04      	bge.n	20fe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3b2>
    20f4:	f240 610b 	movw	r1, #1547	; 0x60b
    20f8:	2070      	movs	r0, #112	; 0x70
    20fa:	f002 fb31 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    20fe:	490a      	ldr	r1, [pc, #40]	; (2128 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3dc>)
    2100:	4281      	cmp	r1, r0
    2102:	bfde      	ittt	le
    2104:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2108:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    210c:	bd10      	pople	{r4, pc}
    210e:	2800      	cmp	r0, #0
    2110:	bfbc      	itt	lt
    2112:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2116:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    211a:	bd10      	pop	{r4, pc}
    211c:	1e847fff 	.word	0x1e847fff
    2120:	07a12000 	.word	0x07a12000
    2124:	f85ee000 	.word	0xf85ee000
    2128:	1e848000 	.word	0x1e848000
    212c:	f8df c054 	ldr.w	ip, [pc, #84]	; 2184 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x438>
    2130:	b510      	push	{r4, lr}
    2132:	2300      	movs	r3, #0
    2134:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    2138:	2807      	cmp	r0, #7
    213a:	d21e      	bcs.n	217a <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x42e>
    213c:	e8df f000 	tbb	[pc, r0]
    2140:	05050505 	.word	0x05050505
    2144:	00040404 	.word	0x00040404
    2148:	2301      	movs	r3, #1
    214a:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    214e:	2b00      	cmp	r3, #0
    2150:	bf08      	it	eq
    2152:	bd10      	popeq	{r4, pc}
    2154:	480c      	ldr	r0, [pc, #48]	; (2188 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x43c>)
    2156:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    215a:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    215e:	2820      	cmp	r0, #32
    2160:	bf0e      	itee	eq
    2162:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    2166:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    216a:	7041      	strbne	r1, [r0, #1]
    216c:	2020      	movs	r0, #32
    216e:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    2172:	7058      	strb	r0, [r3, #1]
    2174:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    2178:	bd10      	pop	{r4, pc}
    217a:	f44f 7115 	mov.w	r1, #596	; 0x254
    217e:	2070      	movs	r0, #112	; 0x70
    2180:	f002 faee 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2184:	20000edc 	.word	0x20000edc
    2188:	20000f5c 	.word	0x20000f5c
    218c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2190:	b083      	sub	sp, #12
    2192:	485c      	ldr	r0, [pc, #368]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    2194:	9904      	ldr	r1, [sp, #16]
    2196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    219a:	9001      	str	r0, [sp, #4]
    219c:	f890 4020 	ldrb.w	r4, [r0, #32]
    21a0:	9803      	ldr	r0, [sp, #12]
    21a2:	4625      	mov	r5, r4
    21a4:	2801      	cmp	r0, #1
    21a6:	bf18      	it	ne
    21a8:	2802      	cmpne	r0, #2
    21aa:	d005      	beq.n	21b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46c>
    21ac:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    21b0:	f04f 0070 	mov.w	r0, #112	; 0x70
    21b4:	f002 fad4 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    21b8:	2700      	movs	r7, #0
    21ba:	2d20      	cmp	r5, #32
    21bc:	d04a      	beq.n	2254 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x508>
    21be:	4851      	ldr	r0, [pc, #324]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    21c0:	9100      	str	r1, [sp, #0]
    21c2:	2600      	movs	r6, #0
    21c4:	7f80      	ldrb	r0, [r0, #30]
    21c6:	2800      	cmp	r0, #0
    21c8:	bf08      	it	eq
    21ca:	2602      	moveq	r6, #2
    21cc:	f001 fc10 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    21d0:	f8df a138 	ldr.w	sl, [pc, #312]	; 230c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c0>
    21d4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21d8:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    21dc:	f8df 9128 	ldr.w	r9, [pc, #296]	; 2308 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5bc>
    21e0:	688a      	ldr	r2, [r1, #8]
    21e2:	68c9      	ldr	r1, [r1, #12]
    21e4:	1a12      	subs	r2, r2, r0
    21e6:	1a09      	subs	r1, r1, r0
    21e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    21ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21f0:	4296      	cmp	r6, r2
    21f2:	bf98      	it	ls
    21f4:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    21f8:	d201      	bcs.n	21fe <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4b2>
    21fa:	4589      	cmp	r9, r1
    21fc:	d228      	bcs.n	2250 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    21fe:	4a44      	ldr	r2, [pc, #272]	; (2310 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c4>)
    2200:	9900      	ldr	r1, [sp, #0]
    2202:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    2206:	4622      	mov	r2, r4
    2208:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    220c:	784c      	ldrb	r4, [r1, #1]
    220e:	2c20      	cmp	r4, #32
    2210:	d016      	beq.n	2240 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4f4>
    2212:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2216:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    221a:	f8dc 8008 	ldr.w	r8, [ip, #8]
    221e:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2222:	eba8 0800 	sub.w	r8, r8, r0
    2226:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    222a:	ebac 0100 	sub.w	r1, ip, r0
    222e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2232:	4546      	cmp	r6, r8
    2234:	bf98      	it	ls
    2236:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    223a:	d2e4      	bcs.n	2206 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    223c:	4589      	cmp	r9, r1
    223e:	d3e2      	bcc.n	2206 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4ba>
    2240:	2a20      	cmp	r2, #32
    2242:	d005      	beq.n	2250 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>
    2244:	2120      	movs	r1, #32
    2246:	2004      	movs	r0, #4
    2248:	9b00      	ldr	r3, [sp, #0]
    224a:	f7ff f901 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    224e:	4604      	mov	r4, r0
    2250:	42ac      	cmp	r4, r5
    2252:	d115      	bne.n	2280 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x534>
    2254:	482f      	ldr	r0, [pc, #188]	; (2314 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c8>)
    2256:	2800      	cmp	r0, #0
    2258:	bf18      	it	ne
    225a:	f3af 8000 	nopne.w
    225e:	f001 fbc7 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2262:	4c28      	ldr	r4, [pc, #160]	; (2304 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5b8>)
    2264:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    2268:	2920      	cmp	r1, #32
    226a:	d00d      	beq.n	2288 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    226c:	68e1      	ldr	r1, [r4, #12]
    226e:	1c82      	adds	r2, r0, #2
    2270:	1a51      	subs	r1, r2, r1
    2272:	0209      	lsls	r1, r1, #8
    2274:	17ca      	asrs	r2, r1, #31
    2276:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    227a:	1209      	asrs	r1, r1, #8
    227c:	2900      	cmp	r1, #0
    227e:	dd03      	ble.n	2288 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x53c>
    2280:	b005      	add	sp, #20
    2282:	2000      	movs	r0, #0
    2284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2288:	2d20      	cmp	r5, #32
    228a:	d00d      	beq.n	22a8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x55c>
    228c:	462a      	mov	r2, r5
    228e:	9903      	ldr	r1, [sp, #12]
    2290:	f7ff fb16 	bl	18c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    2294:	b358      	cbz	r0, 22ee <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a2>
    2296:	9801      	ldr	r0, [sp, #4]
    2298:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    229c:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    22a0:	b005      	add	sp, #20
    22a2:	2001      	movs	r0, #1
    22a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    22ac:	b118      	cbz	r0, 22b6 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56a>
    22ae:	f002 f8bb 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    22b2:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    22b6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    22ba:	b150      	cbz	r0, 22d2 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x586>
    22bc:	4916      	ldr	r1, [pc, #88]	; (2318 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5cc>)
    22be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    22c2:	6008      	str	r0, [r1, #0]
    22c4:	2005      	movs	r0, #5
    22c6:	f001 fde1 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22ca:	f002 f915 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    22ce:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    22d2:	2004      	movs	r0, #4
    22d4:	f001 fdda 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    22d8:	f001 fe40 	bl	3f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    22dc:	2020      	movs	r0, #32
    22de:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    22e2:	480e      	ldr	r0, [pc, #56]	; (231c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d0>)
    22e4:	6880      	ldr	r0, [r0, #8]
    22e6:	6007      	str	r7, [r0, #0]
    22e8:	480d      	ldr	r0, [pc, #52]	; (2320 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5d4>)
    22ea:	6007      	str	r7, [r0, #0]
    22ec:	e7d8      	b.n	22a0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x554>
    22ee:	462a      	mov	r2, r5
    22f0:	2120      	movs	r1, #32
    22f2:	2004      	movs	r0, #4
    22f4:	9b04      	ldr	r3, [sp, #16]
    22f6:	f7ff f8ab 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    22fa:	b005      	add	sp, #20
    22fc:	2000      	movs	r0, #0
    22fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2302:	0000      	.short	0x0000
    2304:	20000f5c 	.word	0x20000f5c
    2308:	003fffff 	.word	0x003fffff
    230c:	20000bdc 	.word	0x20000bdc
    2310:	20000edc 	.word	0x20000edc
    2314:	00000000 	.word	0x00000000
    2318:	4001f508 	.word	0x4001f508
    231c:	20000010 	.word	0x20000010
    2320:	40000508 	.word	0x40000508

00002324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2324:	4906      	ldr	r1, [pc, #24]	; (2340 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    2326:	b510      	push	{r4, lr}
    2328:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    232c:	2a20      	cmp	r2, #32
    232e:	bf1c      	itt	ne
    2330:	7788      	strbne	r0, [r1, #30]
    2332:	bd10      	popne	{r4, pc}
    2334:	f240 31ea 	movw	r1, #1002	; 0x3ea
    2338:	2070      	movs	r0, #112	; 0x70
    233a:	f002 fa11 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    233e:	0000      	.short	0x0000
    2340:	20000f5c 	.word	0x20000f5c

00002344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2348:	4e5b      	ldr	r6, [pc, #364]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    234a:	4681      	mov	r9, r0
    234c:	b085      	sub	sp, #20
    234e:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2352:	468a      	mov	sl, r1
    2354:	2820      	cmp	r0, #32
    2356:	d04d      	beq.n	23f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    2358:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    235c:	f106 040c 	add.w	r4, r6, #12
    2360:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2364:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    2368:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    236c:	2020      	movs	r0, #32
    236e:	f88d 0000 	strb.w	r0, [sp]
    2372:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2376:	aa03      	add	r2, sp, #12
    2378:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    237c:	a901      	add	r1, sp, #4
    237e:	f890 5020 	ldrb.w	r5, [r0, #32]
    2382:	6930      	ldr	r0, [r6, #16]
    2384:	9002      	str	r0, [sp, #8]
    2386:	6830      	ldr	r0, [r6, #0]
    2388:	4448      	add	r0, r9
    238a:	f001 f9db 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    238e:	68f8      	ldr	r0, [r7, #12]
    2390:	9901      	ldr	r1, [sp, #4]
    2392:	4a4a      	ldr	r2, [pc, #296]	; (24bc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    2394:	4408      	add	r0, r1
    2396:	f1a9 0164 	sub.w	r1, r9, #100	; 0x64
    239a:	4291      	cmp	r1, r2
    239c:	d82f      	bhi.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    239e:	68b9      	ldr	r1, [r7, #8]
    23a0:	1a41      	subs	r1, r0, r1
    23a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    23a6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    23aa:	d228      	bcs.n	23fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    23ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    23b0:	6060      	str	r0, [r4, #4]
    23b2:	4630      	mov	r0, r6
    23b4:	f884 a00c 	strb.w	sl, [r4, #12]
    23b8:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    23bc:	46ea      	mov	sl, sp
    23be:	2d20      	cmp	r5, #32
    23c0:	bf1c      	itt	ne
    23c2:	493f      	ldrne	r1, [pc, #252]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    23c4:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    23c8:	d03c      	beq.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ca:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    23ce:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    23d2:	6860      	ldr	r0, [r4, #4]
    23d4:	68ba      	ldr	r2, [r7, #8]
    23d6:	4621      	mov	r1, r4
    23d8:	1a10      	subs	r0, r2, r0
    23da:	0200      	lsls	r0, r0, #8
    23dc:	17c2      	asrs	r2, r0, #31
    23de:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    23e2:	f107 0608 	add.w	r6, r7, #8
    23e6:	1200      	asrs	r0, r0, #8
    23e8:	d41b      	bmi.n	2422 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    23ea:	8970      	ldrh	r0, [r6, #10]
    23ec:	b350      	cbz	r0, 2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23ee:	8948      	ldrh	r0, [r1, #10]
    23f0:	b148      	cbz	r0, 2406 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    23f2:	e027      	b.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    23f4:	f640 317b 	movw	r1, #2939	; 0xb7b
    23f8:	2070      	movs	r0, #112	; 0x70
    23fa:	f002 f9b1 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    23fe:	b005      	add	sp, #20
    2400:	2001      	movs	r0, #1
    2402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2406:	4620      	mov	r0, r4
    2408:	f7ff fe56 	bl	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    240c:	f001 f97e 	bl	370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2410:	6831      	ldr	r1, [r6, #0]
    2412:	1a08      	subs	r0, r1, r0
    2414:	0200      	lsls	r0, r0, #8
    2416:	17c1      	asrs	r1, r0, #31
    2418:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    241c:	1200      	asrs	r0, r0, #8
    241e:	2833      	cmp	r0, #51	; 0x33
    2420:	da10      	bge.n	2444 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2422:	f88a 5000 	strb.w	r5, [sl]
    2426:	7d39      	ldrb	r1, [r7, #20]
    2428:	7b20      	ldrb	r0, [r4, #12]
    242a:	4281      	cmp	r1, r0
    242c:	d805      	bhi.n	243a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    242e:	9802      	ldr	r0, [sp, #8]
    2430:	6060      	str	r0, [r4, #4]
    2432:	b005      	add	sp, #20
    2434:	2002      	movs	r0, #2
    2436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    243a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    243e:	7845      	ldrb	r5, [r0, #1]
    2440:	2d20      	cmp	r5, #32
    2442:	d1c2      	bne.n	23ca <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2444:	2005      	movs	r0, #5
    2446:	f001 fd21 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    244a:	4c1b      	ldr	r4, [pc, #108]	; (24b8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    244c:	f04f 30ff 	mov.w	r0, #4294967295
    2450:	60a0      	str	r0, [r4, #8]
    2452:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    2456:	f89d 2000 	ldrb.w	r2, [sp]
    245a:	2120      	movs	r1, #32
    245c:	2a20      	cmp	r2, #32
    245e:	bf13      	iteet	ne
    2460:	2005      	movne	r0, #5
    2462:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    2466:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    246a:	f7fe fff1 	blne	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    246e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    2472:	4913      	ldr	r1, [pc, #76]	; (24c0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    2474:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    2478:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    247c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    2480:	7048      	strb	r0, [r1, #1]
    2482:	6820      	ldr	r0, [r4, #0]
    2484:	4448      	add	r0, r9
    2486:	6020      	str	r0, [r4, #0]
    2488:	2001      	movs	r0, #1
    248a:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    248e:	7e60      	ldrb	r0, [r4, #25]
    2490:	2801      	cmp	r0, #1
    2492:	d105      	bne.n	24a0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    2494:	6920      	ldr	r0, [r4, #16]
    2496:	1e40      	subs	r0, r0, #1
    2498:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    249c:	f001 fb48 	bl	3b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    24a0:	f89d 0000 	ldrb.w	r0, [sp]
    24a4:	2820      	cmp	r0, #32
    24a6:	d003      	beq.n	24b0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    24a8:	4806      	ldr	r0, [pc, #24]	; (24c4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    24aa:	7840      	ldrb	r0, [r0, #1]
    24ac:	f002 fa28 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    24b0:	b005      	add	sp, #20
    24b2:	2000      	movs	r0, #0
    24b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    24b8:	20000f5c 	.word	0x20000f5c
    24bc:	07a11f9c 	.word	0x07a11f9c
    24c0:	20000edc 	.word	0x20000edc
    24c4:	20000010 	.word	0x20000010

000024c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    24c8:	b570      	push	{r4, r5, r6, lr}
    24ca:	4a23      	ldr	r2, [pc, #140]	; (2558 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    24cc:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    24d0:	2920      	cmp	r1, #32
    24d2:	d039      	beq.n	2548 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    24d4:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    24d8:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    24dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    24e0:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    24e4:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    24e8:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    24ec:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    24f0:	f891 1020 	ldrb.w	r1, [r1, #32]
    24f4:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    24f8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    24fc:	2920      	cmp	r1, #32
    24fe:	d028      	beq.n	2552 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    2500:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    2504:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    2508:	7d2d      	ldrb	r5, [r5, #20]
    250a:	4285      	cmp	r5, r0
    250c:	bf84      	itt	hi
    250e:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    2512:	7849      	ldrbhi	r1, [r1, #1]
    2514:	d8f2      	bhi.n	24fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    2516:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    251a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    251e:	f8dc 000c 	ldr.w	r0, [ip, #12]
    2522:	6889      	ldr	r1, [r1, #8]
    2524:	6814      	ldr	r4, [r2, #0]
    2526:	1a08      	subs	r0, r1, r0
    2528:	0200      	lsls	r0, r0, #8
    252a:	17c1      	asrs	r1, r0, #31
    252c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2530:	1200      	asrs	r0, r0, #8
    2532:	d407      	bmi.n	2544 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    2534:	f00a fe78 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2538:	f104 0164 	add.w	r1, r4, #100	; 0x64
    253c:	4288      	cmp	r0, r1
    253e:	bf24      	itt	cs
    2540:	1b00      	subcs	r0, r0, r4
    2542:	bd70      	popcs	{r4, r5, r6, pc}
    2544:	2000      	movs	r0, #0
    2546:	bd70      	pop	{r4, r5, r6, pc}
    2548:	f640 314d 	movw	r1, #2893	; 0xb4d
    254c:	2070      	movs	r0, #112	; 0x70
    254e:	f002 f907 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2552:	f04f 30ff 	mov.w	r0, #4294967295
    2556:	bd70      	pop	{r4, r5, r6, pc}
    2558:	20000f5c 	.word	0x20000f5c

0000255c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    255c:	4806      	ldr	r0, [pc, #24]	; (2578 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    255e:	b510      	push	{r4, lr}
    2560:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2564:	2920      	cmp	r1, #32
    2566:	bf1c      	itt	ne
    2568:	7e00      	ldrbne	r0, [r0, #24]
    256a:	bd10      	popne	{r4, pc}
    256c:	f640 3174 	movw	r1, #2932	; 0xb74
    2570:	2070      	movs	r0, #112	; 0x70
    2572:	f002 f8f5 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2576:	0000      	.short	0x0000
    2578:	20000f5c 	.word	0x20000f5c

0000257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    257c:	4602      	mov	r2, r0
    257e:	4b14      	ldr	r3, [pc, #80]	; (25d0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    2580:	b510      	push	{r4, lr}
    2582:	4408      	add	r0, r1
    2584:	429a      	cmp	r2, r3
    2586:	d904      	bls.n	2592 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    2588:	f240 6109 	movw	r1, #1545	; 0x609
    258c:	2070      	movs	r0, #112	; 0x70
    258e:	f002 f8e7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2592:	4a10      	ldr	r2, [pc, #64]	; (25d4 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    2594:	4291      	cmp	r1, r2
    2596:	dd04      	ble.n	25a2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    2598:	f240 610a 	movw	r1, #1546	; 0x60a
    259c:	2070      	movs	r0, #112	; 0x70
    259e:	f002 f8df 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25a2:	4a0d      	ldr	r2, [pc, #52]	; (25d8 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    25a4:	4291      	cmp	r1, r2
    25a6:	da04      	bge.n	25b2 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    25a8:	f240 610b 	movw	r1, #1547	; 0x60b
    25ac:	2070      	movs	r0, #112	; 0x70
    25ae:	f002 f8d7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25b2:	490a      	ldr	r1, [pc, #40]	; (25dc <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    25b4:	4281      	cmp	r1, r0
    25b6:	bfde      	ittt	le
    25b8:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    25bc:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    25c0:	bd10      	pople	{r4, pc}
    25c2:	2800      	cmp	r0, #0
    25c4:	bfbc      	itt	lt
    25c6:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    25ca:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    25ce:	bd10      	pop	{r4, pc}
    25d0:	1e847fff 	.word	0x1e847fff
    25d4:	07a12000 	.word	0x07a12000
    25d8:	f85ee000 	.word	0xf85ee000
    25dc:	1e848000 	.word	0x1e848000

000025e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    25e0:	4a10      	ldr	r2, [pc, #64]	; (2624 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    25e2:	1a0b      	subs	r3, r1, r0
    25e4:	f102 0c01 	add.w	ip, r2, #1
    25e8:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    25ec:	bf3c      	itt	cc
    25ee:	4618      	movcc	r0, r3
    25f0:	4770      	bxcc	lr
    25f2:	b510      	push	{r4, lr}
    25f4:	1a44      	subs	r4, r0, r1
    25f6:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    25fa:	bf3c      	itt	cc
    25fc:	4618      	movcc	r0, r3
    25fe:	bd10      	popcc	{r4, pc}
    2600:	429a      	cmp	r2, r3
    2602:	d203      	bcs.n	260c <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2604:	1a10      	subs	r0, r2, r0
    2606:	4408      	add	r0, r1
    2608:	1c40      	adds	r0, r0, #1
    260a:	bd10      	pop	{r4, pc}
    260c:	42a2      	cmp	r2, r4
    260e:	d204      	bcs.n	261a <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2610:	1a51      	subs	r1, r2, r1
    2612:	4408      	add	r0, r1
    2614:	1c40      	adds	r0, r0, #1
    2616:	4240      	negs	r0, r0
    2618:	bd10      	pop	{r4, pc}
    261a:	f640 310c 	movw	r1, #2828	; 0xb0c
    261e:	2070      	movs	r0, #112	; 0x70
    2620:	f002 f89e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2624:	1e847fff 	.word	0x1e847fff

00002628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    2628:	4907      	ldr	r1, [pc, #28]	; (2648 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    262a:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    262e:	4282      	cmp	r2, r0
    2630:	bf04      	itt	eq
    2632:	6848      	ldreq	r0, [r1, #4]
    2634:	4770      	bxeq	lr
    2636:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    263a:	4904      	ldr	r1, [pc, #16]	; (264c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    263c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2640:	3008      	adds	r0, #8
    2642:	f7ff bd39 	b.w	20b8 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>
    2646:	0000      	.short	0x0000
    2648:	20000f5c 	.word	0x20000f5c
    264c:	20000bdc 	.word	0x20000bdc

00002650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2650:	490e      	ldr	r1, [pc, #56]	; (268c <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2652:	b510      	push	{r4, lr}
    2654:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2658:	2820      	cmp	r0, #32
    265a:	d012      	beq.n	2682 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    265c:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2660:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2664:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2668:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    266c:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    2670:	6840      	ldr	r0, [r0, #4]
    2672:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2676:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    267a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    267e:	2104      	movs	r1, #4
    2680:	4710      	bx	r2
    2682:	f640 01bc 	movw	r1, #2236	; 0x8bc
    2686:	2070      	movs	r0, #112	; 0x70
    2688:	f002 f86a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    268c:	20000f5c 	.word	0x20000f5c

00002690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    2690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2692:	4d6d      	ldr	r5, [pc, #436]	; (2848 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    2694:	496d      	ldr	r1, [pc, #436]	; (284c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    2696:	2601      	movs	r6, #1
    2698:	f505 7460 	add.w	r4, r5, #896	; 0x380
    269c:	2808      	cmp	r0, #8
    269e:	d273      	bcs.n	2788 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    26a0:	e8df f000 	tbb	[pc, r0]
    26a4:	af9d6704 	.word	0xaf9d6704
    26a8:	b9b444cd 	.word	0xb9b444cd
    26ac:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    26b0:	b918      	cbnz	r0, 26ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    26b2:	f001 fed5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    26b6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    26ba:	8ae0      	ldrh	r0, [r4, #22]
    26bc:	b110      	cbz	r0, 26c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    26be:	f001 ffeb 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    26c2:	b188      	cbz	r0, 26e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    26c4:	f7ff fc60 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    26c8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    26cc:	68a1      	ldr	r1, [r4, #8]
    26ce:	f1b1 3fff 	cmp.w	r1, #4294967295
    26d2:	d005      	beq.n	26e0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    26d4:	2301      	movs	r3, #1
    26d6:	2203      	movs	r2, #3
    26d8:	2005      	movs	r0, #5
    26da:	f001 fb0f 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    26de:	b140      	cbz	r0, 26f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    26e0:	7e60      	ldrb	r0, [r4, #25]
    26e2:	2801      	cmp	r0, #1
    26e4:	d110      	bne.n	2708 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    26e6:	e009      	b.n	26fc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    26e8:	f44f 6107 	mov.w	r1, #2160	; 0x870
    26ec:	2070      	movs	r0, #112	; 0x70
    26ee:	f002 f837 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26f2:	f640 0175 	movw	r1, #2165	; 0x875
    26f6:	2070      	movs	r0, #112	; 0x70
    26f8:	f002 f832 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26fc:	6920      	ldr	r0, [r4, #16]
    26fe:	1e40      	subs	r0, r0, #1
    2700:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2704:	f001 fa14 	bl	3b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    2708:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    270c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2714:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2718:	6840      	ldr	r0, [r0, #4]
    271a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    271e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2722:	b001      	add	sp, #4
    2724:	2101      	movs	r1, #1
    2726:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    272a:	4710      	bx	r2
    272c:	f7ff fc2c 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2730:	f04f 30ff 	mov.w	r0, #4294967295
    2734:	60a0      	str	r0, [r4, #8]
    2736:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    273a:	f88d 0000 	strb.w	r0, [sp]
    273e:	f89d 0000 	ldrb.w	r0, [sp]
    2742:	b188      	cbz	r0, 2768 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    2744:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2748:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    274c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2750:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2754:	6840      	ldr	r0, [r0, #4]
    2756:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    275a:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    275e:	b001      	add	sp, #4
    2760:	2106      	movs	r1, #6
    2762:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2766:	4710      	bx	r2
    2768:	f640 0186 	movw	r1, #2182	; 0x886
    276c:	2070      	movs	r0, #112	; 0x70
    276e:	f001 fff7 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2772:	f7ff fc09 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    2776:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    277a:	f001 ff8d 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    277e:	b120      	cbz	r0, 278a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    2780:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    2784:	b130      	cbz	r0, 2794 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    2786:	e009      	b.n	279c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    2788:	e059      	b.n	283e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    278a:	f640 0196 	movw	r1, #2198	; 0x896
    278e:	2070      	movs	r0, #112	; 0x70
    2790:	f001 ffe6 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2794:	f001 fe64 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    2798:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    279c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    27a0:	b158      	cbz	r0, 27ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    27a2:	492b      	ldr	r1, [pc, #172]	; (2850 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    27a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    27a8:	6008      	str	r0, [r1, #0]
    27aa:	2005      	movs	r0, #5
    27ac:	f001 fb6e 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    27b0:	f001 fea2 	bl	44f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    27b4:	2000      	movs	r0, #0
    27b6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    27ba:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    27be:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    27c2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    27c6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    27ca:	6840      	ldr	r0, [r0, #4]
    27cc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    27d0:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    27d4:	b001      	add	sp, #4
    27d6:	2100      	movs	r1, #0
    27d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    27dc:	4710      	bx	r2
    27de:	f001 fc07 	bl	3ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    27e2:	8ae0      	ldrh	r0, [r4, #22]
    27e4:	b110      	cbz	r0, 27ec <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    27e6:	f001 ff57 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27ea:	b128      	cbz	r0, 27f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    27ec:	4819      	ldr	r0, [pc, #100]	; (2854 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    27ee:	7800      	ldrb	r0, [r0, #0]
    27f0:	2803      	cmp	r0, #3
    27f2:	bf08      	it	eq
    27f4:	7766      	strbeq	r6, [r4, #29]
    27f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27f8:	f640 01a1 	movw	r1, #2209	; 0x8a1
    27fc:	2070      	movs	r0, #112	; 0x70
    27fe:	f001 ffaf 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2802:	4815      	ldr	r0, [pc, #84]	; (2858 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    2804:	6006      	str	r6, [r0, #0]
    2806:	6888      	ldr	r0, [r1, #8]
    2808:	6006      	str	r6, [r0, #0]
    280a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    280c:	7808      	ldrb	r0, [r1, #0]
    280e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2812:	f002 b875 	b.w	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2816:	f7ff fbb7 	bl	1f88 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23c>
    281a:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    281e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2822:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2826:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    282a:	6840      	ldr	r0, [r0, #4]
    282c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2830:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2834:	b001      	add	sp, #4
    2836:	2105      	movs	r1, #5
    2838:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    283c:	4710      	bx	r2
    283e:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2842:	2070      	movs	r0, #112	; 0x70
    2844:	f001 ff8c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2848:	20000bdc 	.word	0x20000bdc
    284c:	20000010 	.word	0x20000010
    2850:	4001f508 	.word	0x4001f508
    2854:	20000012 	.word	0x20000012
    2858:	40000508 	.word	0x40000508

0000285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    285c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2860:	4682      	mov	sl, r0
    2862:	48dc      	ldr	r0, [pc, #880]	; (2bd4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2864:	b08b      	sub	sp, #44	; 0x2c
    2866:	6800      	ldr	r0, [r0, #0]
    2868:	4ddb      	ldr	r5, [pc, #876]	; (2bd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    286a:	05c0      	lsls	r0, r0, #23
    286c:	0dc0      	lsrs	r0, r0, #23
    286e:	d00e      	beq.n	288e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    2870:	3810      	subs	r0, #16
    2872:	b240      	sxtb	r0, r0
    2874:	2800      	cmp	r0, #0
    2876:	bfb8      	it	lt
    2878:	f000 000f 	andlt.w	r0, r0, #15
    287c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2880:	bfac      	ite	ge
    2882:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2886:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    288a:	0940      	lsrs	r0, r0, #5
    288c:	d00d      	beq.n	28aa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    288e:	980c      	ldr	r0, [sp, #48]	; 0x30
    2890:	f04f 0b00 	mov.w	fp, #0
    2894:	7800      	ldrb	r0, [r0, #0]
    2896:	2800      	cmp	r0, #0
    2898:	bf18      	it	ne
    289a:	2801      	cmpne	r0, #1
    289c:	d018      	beq.n	28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    289e:	f240 714f 	movw	r1, #1871	; 0x74f
    28a2:	f04f 0070 	mov.w	r0, #112	; 0x70
    28a6:	f001 ff5b 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28aa:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    28ae:	f04f 0b01 	mov.w	fp, #1
    28b2:	2820      	cmp	r0, #32
    28b4:	d007      	beq.n	28c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    28b6:	980c      	ldr	r0, [sp, #48]	; 0x30
    28b8:	7800      	ldrb	r0, [r0, #0]
    28ba:	b148      	cbz	r0, 28d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    28bc:	f240 714b 	movw	r1, #1867	; 0x74b
    28c0:	2070      	movs	r0, #112	; 0x70
    28c2:	f001 ff4d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c6:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    28ca:	2070      	movs	r0, #112	; 0x70
    28cc:	f001 ff48 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28d0:	4cc2      	ldr	r4, [pc, #776]	; (2bdc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    28d2:	b124      	cbz	r4, 28de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    28d4:	2100      	movs	r1, #0
    28d6:	f240 7052 	movw	r0, #1874	; 0x752
    28da:	f3af 8000 	nop.w
    28de:	49c0      	ldr	r1, [pc, #768]	; (2be0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    28e0:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    28e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    28e8:	f04f 0801 	mov.w	r8, #1
    28ec:	9000      	str	r0, [sp, #0]
    28ee:	b124      	cbz	r4, 28fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    28f0:	2100      	movs	r1, #0
    28f2:	f240 705a 	movw	r0, #1882	; 0x75a
    28f6:	f3af 8000 	nop.w
    28fa:	f1b8 0f00 	cmp.w	r8, #0
    28fe:	d009      	beq.n	2914 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2900:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2904:	f04f 0900 	mov.w	r9, #0
    2908:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    290c:	f1bb 0f00 	cmp.w	fp, #0
    2910:	d007      	beq.n	2922 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2912:	e032      	b.n	297a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2914:	48b3      	ldr	r0, [pc, #716]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2916:	2800      	cmp	r0, #0
    2918:	bf18      	it	ne
    291a:	f3af 8000 	nopne.w
    291e:	b662      	cpsie	i
    2920:	e7ee      	b.n	2900 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2922:	4637      	mov	r7, r6
    2924:	2001      	movs	r0, #1
    2926:	ea20 0607 	bic.w	r6, r0, r7
    292a:	48af      	ldr	r0, [pc, #700]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    292c:	2240      	movs	r2, #64	; 0x40
    292e:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2932:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2936:	f00a fde5 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    293a:	b124      	cbz	r4, 2946 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    293c:	2100      	movs	r1, #0
    293e:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2942:	f3af 8000 	nop.w
    2946:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    294a:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    294e:	6a09      	ldr	r1, [r1, #32]
    2950:	6201      	str	r1, [r0, #32]
    2952:	b124      	cbz	r4, 295e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2954:	2100      	movs	r1, #0
    2956:	f240 50d1 	movw	r0, #1489	; 0x5d1
    295a:	f3af 8000 	nop.w
    295e:	b124      	cbz	r4, 296a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2960:	2100      	movs	r1, #0
    2962:	f240 7064 	movw	r0, #1892	; 0x764
    2966:	f3af 8000 	nop.w
    296a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    296e:	f88d 0004 	strb.w	r0, [sp, #4]
    2972:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2976:	2800      	cmp	r0, #0
    2978:	d1b9      	bne.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    297a:	b124      	cbz	r4, 2986 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    297c:	2100      	movs	r1, #0
    297e:	f240 706e 	movw	r0, #1902	; 0x76e
    2982:	f3af 8000 	nop.w
    2986:	f001 f833 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    298a:	4680      	mov	r8, r0
    298c:	4633      	mov	r3, r6
    298e:	aa06      	add	r2, sp, #24
    2990:	990c      	ldr	r1, [sp, #48]	; 0x30
    2992:	f7ff fa25 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2996:	b124      	cbz	r4, 29a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2998:	2100      	movs	r1, #0
    299a:	f240 7075 	movw	r0, #1909	; 0x775
    299e:	f3af 8000 	nop.w
    29a2:	4991      	ldr	r1, [pc, #580]	; (2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    29a4:	a806      	add	r0, sp, #24
    29a6:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    29aa:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    29ae:	2901      	cmp	r1, #1
    29b0:	bf18      	it	ne
    29b2:	2902      	cmpne	r1, #2
    29b4:	d13c      	bne.n	2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    29b6:	9906      	ldr	r1, [sp, #24]
    29b8:	9b07      	ldr	r3, [sp, #28]
    29ba:	eba1 0108 	sub.w	r1, r1, r8
    29be:	4a8b      	ldr	r2, [pc, #556]	; (2bec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    29c0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    29c4:	eba3 0308 	sub.w	r3, r3, r8
    29c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    29cc:	2902      	cmp	r1, #2
    29ce:	d371      	bcc.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29d0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    29d4:	d26e      	bcs.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29d6:	429a      	cmp	r2, r3
    29d8:	d36c      	bcc.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    29da:	f04f 0901 	mov.w	r9, #1
    29de:	ab01      	add	r3, sp, #4
    29e0:	aa05      	add	r2, sp, #20
    29e2:	4631      	mov	r1, r6
    29e4:	f7fe feec 	bl	17c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    29e8:	2800      	cmp	r0, #0
    29ea:	d06b      	beq.n	2ac4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    29ec:	f89d 1014 	ldrb.w	r1, [sp, #20]
    29f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    29f4:	4633      	mov	r3, r6
    29f6:	428a      	cmp	r2, r1
    29f8:	d068      	beq.n	2acc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    29fa:	2005      	movs	r0, #5
    29fc:	f7fe fd28 	bl	1450 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2a00:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2a04:	7048      	strb	r0, [r1, #1]
    2a06:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a0a:	2820      	cmp	r0, #32
    2a0c:	bf03      	ittte	eq
    2a0e:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2a12:	f880 a020 	strbeq.w	sl, [r0, #32]
    2a16:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    2a1a:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2a1e:	bf18      	it	ne
    2a20:	f880 a001 	strbne.w	sl, [r0, #1]
    2a24:	4632      	mov	r2, r6
    2a26:	4651      	mov	r1, sl
    2a28:	f05f 0003 	movs.w	r0, #3
    2a2c:	f7ff fb7e 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2a30:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2a34:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2a38:	f88d 0004 	strb.w	r0, [sp, #4]
    2a3c:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2a40:	b124      	cbz	r4, 2a4c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    2a42:	2100      	movs	r1, #0
    2a44:	f240 707c 	movw	r0, #1916	; 0x77c
    2a48:	f3af 8000 	nop.w
    2a4c:	4868      	ldr	r0, [pc, #416]	; (2bf0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2a4e:	2800      	cmp	r0, #0
    2a50:	bf18      	it	ne
    2a52:	f3af 8000 	nopne.w
    2a56:	f3ef 8810 	mrs	r8, PRIMASK
    2a5a:	b672      	cpsid	i
    2a5c:	b124      	cbz	r4, 2a68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    2a5e:	2100      	movs	r1, #0
    2a60:	f240 7082 	movw	r0, #1922	; 0x782
    2a64:	f3af 8000 	nop.w
    2a68:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2a6c:	f88d 0004 	strb.w	r0, [sp, #4]
    2a70:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2a74:	2800      	cmp	r0, #0
    2a76:	f47f af3a 	bne.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2a7a:	b124      	cbz	r4, 2a86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2a7c:	2100      	movs	r1, #0
    2a7e:	f240 708a 	movw	r0, #1930	; 0x78a
    2a82:	f3af 8000 	nop.w
    2a86:	f10d 0e18 	add.w	lr, sp, #24
    2a8a:	9800      	ldr	r0, [sp, #0]
    2a8c:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2a90:	f100 0008 	add.w	r0, r0, #8
    2a94:	f1b9 0f00 	cmp.w	r9, #0
    2a98:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2a9c:	d044      	beq.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2a9e:	b124      	cbz	r4, 2aaa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2aa0:	2100      	movs	r1, #0
    2aa2:	f240 7097 	movw	r0, #1943	; 0x797
    2aa6:	f3af 8000 	nop.w
    2aaa:	f1bb 0f00 	cmp.w	fp, #0
    2aae:	d12c      	bne.n	2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2ab0:	e016      	b.n	2ae0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2ab2:	e7ff      	b.n	2ab4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2ab4:	4632      	mov	r2, r6
    2ab6:	4651      	mov	r1, sl
    2ab8:	2004      	movs	r0, #4
    2aba:	f7ff fb37 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2abe:	f04f 0901 	mov.w	r9, #1
    2ac2:	e7b5      	b.n	2a30 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2ac4:	4632      	mov	r2, r6
    2ac6:	4651      	mov	r1, sl
    2ac8:	2004      	movs	r0, #4
    2aca:	e7af      	b.n	2a2c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2acc:	2920      	cmp	r1, #32
    2ace:	bf19      	ittee	ne
    2ad0:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2ad4:	7840      	ldrbne	r0, [r0, #1]
    2ad6:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2ada:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2ade:	e78f      	b.n	2a00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2ae0:	b19f      	cbz	r7, 2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2ae2:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2ae6:	2820      	cmp	r0, #32
    2ae8:	d10f      	bne.n	2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2aea:	b124      	cbz	r4, 2af6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    2aec:	2100      	movs	r1, #0
    2aee:	f240 709c 	movw	r0, #1948	; 0x79c
    2af2:	f3af 8000 	nop.w
    2af6:	4631      	mov	r1, r6
    2af8:	2002      	movs	r0, #2
    2afa:	f7ff fb47 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    2afe:	b920      	cbnz	r0, 2b0a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2b00:	980c      	ldr	r0, [sp, #48]	; 0x30
    2b02:	7800      	ldrb	r0, [r0, #0]
    2b04:	b3f0      	cbz	r0, 2b84 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2b06:	2801      	cmp	r0, #1
    2b08:	d04c      	beq.n	2ba4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    2b0a:	b124      	cbz	r4, 2b16 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2b0c:	2100      	movs	r1, #0
    2b0e:	f240 70b9 	movw	r0, #1977	; 0x7b9
    2b12:	f3af 8000 	nop.w
    2b16:	f1bb 0f00 	cmp.w	fp, #0
    2b1a:	bf18      	it	ne
    2b1c:	2001      	movne	r0, #1
    2b1e:	d04a      	beq.n	2bb6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2b20:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2b24:	f04f 0901 	mov.w	r9, #1
    2b28:	b124      	cbz	r4, 2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2b2a:	2100      	movs	r1, #0
    2b2c:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2b30:	f3af 8000 	nop.w
    2b34:	f1b8 0f00 	cmp.w	r8, #0
    2b38:	d045      	beq.n	2bc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2b3a:	b124      	cbz	r4, 2b46 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2b3c:	2100      	movs	r1, #0
    2b3e:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2b42:	f3af 8000 	nop.w
    2b46:	f1b9 0f00 	cmp.w	r9, #0
    2b4a:	d011      	beq.n	2b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2b4c:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2b50:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2b54:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2b58:	2820      	cmp	r0, #32
    2b5a:	d009      	beq.n	2b70 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2b5c:	b124      	cbz	r4, 2b68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2b5e:	2100      	movs	r1, #0
    2b60:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2b64:	f3af 8000 	nop.w
    2b68:	4822      	ldr	r0, [pc, #136]	; (2bf4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2b6a:	7840      	ldrb	r0, [r0, #1]
    2b6c:	f001 fec8 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2b70:	b124      	cbz	r4, 2b7c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2b72:	2100      	movs	r1, #0
    2b74:	f240 70da 	movw	r0, #2010	; 0x7da
    2b78:	f3af 8000 	nop.w
    2b7c:	b00d      	add	sp, #52	; 0x34
    2b7e:	4648      	mov	r0, r9
    2b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2b84:	e7ff      	b.n	2b86 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2b86:	b124      	cbz	r4, 2b92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2b88:	2100      	movs	r1, #0
    2b8a:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2b8e:	f3af 8000 	nop.w
    2b92:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2b96:	4651      	mov	r1, sl
    2b98:	2004      	movs	r0, #4
    2b9a:	f7ff fac7 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    2b9e:	f04f 0901 	mov.w	r9, #1
    2ba2:	e7c1      	b.n	2b28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2ba4:	2c00      	cmp	r4, #0
    2ba6:	f43f aea2 	beq.w	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2baa:	2100      	movs	r1, #0
    2bac:	f240 70af 	movw	r0, #1967	; 0x7af
    2bb0:	f3af 8000 	nop.w
    2bb4:	e69b      	b.n	28ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2bb6:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2bba:	2001      	movs	r0, #1
    2bbc:	ea20 0101 	bic.w	r1, r0, r1
    2bc0:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2bc4:	e7ac      	b.n	2b20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2bc6:	4807      	ldr	r0, [pc, #28]	; (2be4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2bc8:	2800      	cmp	r0, #0
    2bca:	bf18      	it	ne
    2bcc:	f3af 8000 	nopne.w
    2bd0:	b662      	cpsie	i
    2bd2:	e7b2      	b.n	2b3a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2bd4:	e000ed04 	.word	0xe000ed04
    2bd8:	20000f5c 	.word	0x20000f5c
    2bdc:	00000000 	.word	0x00000000
    2be0:	20000bdc 	.word	0x20000bdc
    2be4:	00000000 	.word	0x00000000
    2be8:	20000edc 	.word	0x20000edc
    2bec:	003fffff 	.word	0x003fffff
    2bf0:	00000000 	.word	0x00000000
    2bf4:	20000010 	.word	0x20000010

00002bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2bf8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bfc:	48a5      	ldr	r0, [pc, #660]	; (2e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2bfe:	b08c      	sub	sp, #48	; 0x30
    2c00:	6800      	ldr	r0, [r0, #0]
    2c02:	05c0      	lsls	r0, r0, #23
    2c04:	0dc0      	lsrs	r0, r0, #23
    2c06:	d011      	beq.n	2c2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2c08:	3810      	subs	r0, #16
    2c0a:	b240      	sxtb	r0, r0
    2c0c:	2800      	cmp	r0, #0
    2c0e:	bfb8      	it	lt
    2c10:	f000 000f 	andlt.w	r0, r0, #15
    2c14:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2c18:	bfac      	ite	ge
    2c1a:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2c1e:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2c22:	0940      	lsrs	r0, r0, #5
    2c24:	bf08      	it	eq
    2c26:	f04f 0901 	moveq.w	r9, #1
    2c2a:	d001      	beq.n	2c30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2c2c:	f04f 0900 	mov.w	r9, #0
    2c30:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c32:	7800      	ldrb	r0, [r0, #0]
    2c34:	2800      	cmp	r0, #0
    2c36:	f04f 0000 	mov.w	r0, #0
    2c3a:	bf1c      	itt	ne
    2c3c:	b00d      	addne	sp, #52	; 0x34
    2c3e:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2c42:	f8df a254 	ldr.w	sl, [pc, #596]	; 2e98 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2c46:	4d95      	ldr	r5, [pc, #596]	; (2e9c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2c48:	4c95      	ldr	r4, [pc, #596]	; (2ea0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2c4a:	f04f 0b00 	mov.w	fp, #0
    2c4e:	900b      	str	r0, [sp, #44]	; 0x2c
    2c50:	b125      	cbz	r5, 2c5c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2c52:	2100      	movs	r1, #0
    2c54:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2c58:	f3af 8000 	nop.w
    2c5c:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2c60:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2c64:	f04f 0800 	mov.w	r8, #0
    2c68:	b125      	cbz	r5, 2c74 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2c6a:	2100      	movs	r1, #0
    2c6c:	f240 605d 	movw	r0, #1629	; 0x65d
    2c70:	f3af 8000 	nop.w
    2c74:	f1b9 0f00 	cmp.w	r9, #0
    2c78:	d11d      	bne.n	2cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2c7a:	4637      	mov	r7, r6
    2c7c:	2001      	movs	r0, #1
    2c7e:	ea20 0607 	bic.w	r6, r0, r7
    2c82:	4888      	ldr	r0, [pc, #544]	; (2ea4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2c84:	2240      	movs	r2, #64	; 0x40
    2c86:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2c8a:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2c8e:	f00a fc39 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2c92:	b125      	cbz	r5, 2c9e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2c94:	2100      	movs	r1, #0
    2c96:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2c9a:	f3af 8000 	nop.w
    2c9e:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2ca2:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2ca6:	6a09      	ldr	r1, [r1, #32]
    2ca8:	6201      	str	r1, [r0, #32]
    2caa:	b125      	cbz	r5, 2cb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2cac:	2100      	movs	r1, #0
    2cae:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2cb2:	f3af 8000 	nop.w
    2cb6:	b125      	cbz	r5, 2cc2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2cb8:	2100      	movs	r1, #0
    2cba:	f240 6065 	movw	r0, #1637	; 0x665
    2cbe:	f3af 8000 	nop.w
    2cc2:	f000 fe95 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2cc6:	4607      	mov	r7, r0
    2cc8:	4633      	mov	r3, r6
    2cca:	466a      	mov	r2, sp
    2ccc:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cce:	f7ff f887 	bl	1de0 <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x94>
    2cd2:	b125      	cbz	r5, 2cde <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2cd4:	2100      	movs	r1, #0
    2cd6:	f240 606b 	movw	r0, #1643	; 0x66b
    2cda:	f3af 8000 	nop.w
    2cde:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2ce2:	2820      	cmp	r0, #32
    2ce4:	d014      	beq.n	2d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2ce6:	6920      	ldr	r0, [r4, #16]
    2ce8:	9900      	ldr	r1, [sp, #0]
    2cea:	1a09      	subs	r1, r1, r0
    2cec:	0209      	lsls	r1, r1, #8
    2cee:	17ca      	asrs	r2, r1, #31
    2cf0:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2cf4:	1209      	asrs	r1, r1, #8
    2cf6:	d50b      	bpl.n	2d10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2cf8:	e9dd 2100 	ldrd	r2, r1, [sp]
    2cfc:	1a89      	subs	r1, r1, r2
    2cfe:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2d02:	4408      	add	r0, r1
    2d04:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d08:	e9cd 2000 	strd	r2, r0, [sp]
    2d0c:	f04f 0801 	mov.w	r8, #1
    2d10:	b14d      	cbz	r5, 2d26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2d12:	2100      	movs	r1, #0
    2d14:	f240 6075 	movw	r0, #1653	; 0x675
    2d18:	f3af 8000 	nop.w
    2d1c:	2100      	movs	r1, #0
    2d1e:	f240 607b 	movw	r0, #1659	; 0x67b
    2d22:	f3af 8000 	nop.w
    2d26:	9800      	ldr	r0, [sp, #0]
    2d28:	9901      	ldr	r1, [sp, #4]
    2d2a:	1bc0      	subs	r0, r0, r7
    2d2c:	1bc9      	subs	r1, r1, r7
    2d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2d32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2d36:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2d3a:	d205      	bcs.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2d3c:	458a      	cmp	sl, r1
    2d3e:	d303      	bcc.n	2d48 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2d40:	f1b9 0f00 	cmp.w	r9, #0
    2d44:	d10c      	bne.n	2d60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2d46:	e003      	b.n	2d50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2d48:	f1b9 0f00 	cmp.w	r9, #0
    2d4c:	d038      	beq.n	2dc0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2d4e:	e094      	b.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2d50:	4633      	mov	r3, r6
    2d52:	463a      	mov	r2, r7
    2d54:	4669      	mov	r1, sp
    2d56:	4854      	ldr	r0, [pc, #336]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d58:	f7fe fbb6 	bl	14c8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2d5c:	ea48 0800 	orr.w	r8, r8, r0
    2d60:	f1b8 0f00 	cmp.w	r8, #0
    2d64:	d022      	beq.n	2dac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2d66:	9800      	ldr	r0, [sp, #0]
    2d68:	f00a fa5e 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2d6c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2d70:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2d74:	4b4d      	ldr	r3, [pc, #308]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2d76:	4411      	add	r1, r2
    2d78:	1c49      	adds	r1, r1, #1
    2d7a:	1842      	adds	r2, r0, r1
    2d7c:	4298      	cmp	r0, r3
    2d7e:	d841      	bhi.n	2e04 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2d80:	4849      	ldr	r0, [pc, #292]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2d82:	4281      	cmp	r1, r0
    2d84:	dc5a      	bgt.n	2e3c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2d86:	4240      	negs	r0, r0
    2d88:	4281      	cmp	r1, r0
    2d8a:	db5f      	blt.n	2e4c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2d8c:	1c58      	adds	r0, r3, #1
    2d8e:	4290      	cmp	r0, r2
    2d90:	bfdc      	itt	le
    2d92:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2d96:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2d9a:	dd05      	ble.n	2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2d9c:	2a00      	cmp	r2, #0
    2d9e:	bfbc      	itt	lt
    2da0:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2da4:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2da8:	980c      	ldr	r0, [sp, #48]	; 0x30
    2daa:	60c2      	str	r2, [r0, #12]
    2dac:	2001      	movs	r0, #1
    2dae:	900b      	str	r0, [sp, #44]	; 0x2c
    2db0:	2d00      	cmp	r5, #0
    2db2:	d062      	beq.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2db4:	2100      	movs	r1, #0
    2db6:	f240 608e 	movw	r0, #1678	; 0x68e
    2dba:	f3af 8000 	nop.w
    2dbe:	e05c      	b.n	2e7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2dc0:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2dc4:	aa08      	add	r2, sp, #32
    2dc6:	a907      	add	r1, sp, #28
    2dc8:	f000 fcbc 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2dcc:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2dd0:	2820      	cmp	r0, #32
    2dd2:	d01c      	beq.n	2e0e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2dd4:	6920      	ldr	r0, [r4, #16]
    2dd6:	1d40      	adds	r0, r0, #5
    2dd8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2ddc:	e9dd 2100 	ldrd	r2, r1, [sp]
    2de0:	1a89      	subs	r1, r1, r2
    2de2:	4401      	add	r1, r0
    2de4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2de8:	e9cd 0100 	strd	r0, r1, [sp]
    2dec:	f00a fa1c 	bl	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2df0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2df4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2df8:	4b2c      	ldr	r3, [pc, #176]	; (2eac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2dfa:	4411      	add	r1, r2
    2dfc:	1c4a      	adds	r2, r1, #1
    2dfe:	1881      	adds	r1, r0, r2
    2e00:	4298      	cmp	r0, r3
    2e02:	d918      	bls.n	2e36 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2e04:	f240 6109 	movw	r1, #1545	; 0x609
    2e08:	2070      	movs	r0, #112	; 0x70
    2e0a:	f001 fca9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e0e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2e12:	f107 0609 	add.w	r6, r7, #9
    2e16:	b120      	cbz	r0, 2e22 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2e18:	f001 fc3e 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2e1c:	2800      	cmp	r0, #0
    2e1e:	bf08      	it	eq
    2e20:	3632      	addeq	r6, #50	; 0x32
    2e22:	4823      	ldr	r0, [pc, #140]	; (2eb0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2e24:	7841      	ldrb	r1, [r0, #1]
    2e26:	9807      	ldr	r0, [sp, #28]
    2e28:	4281      	cmp	r1, r0
    2e2a:	bf84      	itt	hi
    2e2c:	1a08      	subhi	r0, r1, r0
    2e2e:	4406      	addhi	r6, r0
    2e30:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2e34:	e7d2      	b.n	2ddc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2e36:	481c      	ldr	r0, [pc, #112]	; (2ea8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2e38:	4282      	cmp	r2, r0
    2e3a:	dd04      	ble.n	2e46 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2e3c:	f240 610a 	movw	r1, #1546	; 0x60a
    2e40:	2070      	movs	r0, #112	; 0x70
    2e42:	f001 fc8d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e46:	481b      	ldr	r0, [pc, #108]	; (2eb4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2e48:	4282      	cmp	r2, r0
    2e4a:	da04      	bge.n	2e56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2e4c:	f240 610b 	movw	r1, #1547	; 0x60b
    2e50:	2070      	movs	r0, #112	; 0x70
    2e52:	f001 fc85 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e56:	4818      	ldr	r0, [pc, #96]	; (2eb8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2e58:	4288      	cmp	r0, r1
    2e5a:	bfdc      	itt	le
    2e5c:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2e60:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2e64:	dd05      	ble.n	2e72 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2e66:	2900      	cmp	r1, #0
    2e68:	bfbc      	itt	lt
    2e6a:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2e6e:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2e72:	980c      	ldr	r0, [sp, #48]	; 0x30
    2e74:	60c1      	str	r1, [r0, #12]
    2e76:	2001      	movs	r0, #1
    2e78:	900b      	str	r0, [sp, #44]	; 0x2c
    2e7a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2e7e:	f88d 0010 	strb.w	r0, [sp, #16]
    2e82:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2e86:	2800      	cmp	r0, #0
    2e88:	f47f aee2 	bne.w	2c50 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2e8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2e8e:	b00d      	add	sp, #52	; 0x34
    2e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e94:	e000ed04 	.word	0xe000ed04
    2e98:	003fffff 	.word	0x003fffff
    2e9c:	00000000 	.word	0x00000000
    2ea0:	20000f5c 	.word	0x20000f5c
    2ea4:	20000edc 	.word	0x20000edc
    2ea8:	07a12000 	.word	0x07a12000
    2eac:	1e847fff 	.word	0x1e847fff
    2eb0:	20000012 	.word	0x20000012
    2eb4:	f85ee000 	.word	0xf85ee000
    2eb8:	1e848000 	.word	0x1e848000

00002ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2ebc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ec0:	4d88      	ldr	r5, [pc, #544]	; (30e4 <CONFIG_USB_DEVICE_VID+0x101>)
    2ec2:	b08c      	sub	sp, #48	; 0x30
    2ec4:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ec8:	2000      	movs	r0, #0
    2eca:	9009      	str	r0, [sp, #36]	; 0x24
    2ecc:	2001      	movs	r0, #1
    2ece:	4c86      	ldr	r4, [pc, #536]	; (30e8 <CONFIG_USB_DEVICE_VID+0x105>)
    2ed0:	f04f 0900 	mov.w	r9, #0
    2ed4:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    2ed8:	4680      	mov	r8, r0
    2eda:	9008      	str	r0, [sp, #32]
    2edc:	b124      	cbz	r4, 2ee8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2ede:	2100      	movs	r1, #0
    2ee0:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2ee4:	f3af 8000 	nop.w
    2ee8:	9808      	ldr	r0, [sp, #32]
    2eea:	2800      	cmp	r0, #0
    2eec:	d037      	beq.n	2f5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2eee:	bf00      	nop
    2ef0:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2ef4:	b124      	cbz	r4, 2f00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    2ef6:	2100      	movs	r1, #0
    2ef8:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2efc:	f3af 8000 	nop.w
    2f00:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2f04:	2240      	movs	r2, #64	; 0x40
    2f06:	ea28 060a 	bic.w	r6, r8, sl
    2f0a:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2f0e:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2f12:	4683      	mov	fp, r0
    2f14:	f00a faf6 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2f18:	b124      	cbz	r4, 2f24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    2f1a:	2100      	movs	r1, #0
    2f1c:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2f20:	f3af 8000 	nop.w
    2f24:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2f28:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2f2c:	9000      	str	r0, [sp, #0]
    2f2e:	6a09      	ldr	r1, [r1, #32]
    2f30:	6201      	str	r1, [r0, #32]
    2f32:	b124      	cbz	r4, 2f3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2f34:	2100      	movs	r1, #0
    2f36:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2f3a:	f3af 8000 	nop.w
    2f3e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2f42:	f88d 0008 	strb.w	r0, [sp, #8]
    2f46:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2f4a:	b178      	cbz	r0, 2f6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2f4c:	2c00      	cmp	r4, #0
    2f4e:	bf1c      	itt	ne
    2f50:	2100      	movne	r1, #0
    2f52:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    2f56:	d0c1      	beq.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f58:	f3af 8000 	nop.w
    2f5c:	e7be      	b.n	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2f5e:	4863      	ldr	r0, [pc, #396]	; (30ec <CONFIG_USB_DEVICE_VID+0x109>)
    2f60:	2800      	cmp	r0, #0
    2f62:	bf18      	it	ne
    2f64:	f3af 8000 	nopne.w
    2f68:	b662      	cpsie	i
    2f6a:	e7c1      	b.n	2ef0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    2f6c:	b124      	cbz	r4, 2f78 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    2f6e:	2100      	movs	r1, #0
    2f70:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    2f74:	f3af 8000 	nop.w
    2f78:	980c      	ldr	r0, [sp, #48]	; 0x30
    2f7a:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    2f7e:	2803      	cmp	r0, #3
    2f80:	d172      	bne.n	3068 <CONFIG_USB_DEVICE_VID+0x85>
    2f82:	f8dd a000 	ldr.w	sl, [sp]
    2f86:	f8cd a018 	str.w	sl, [sp, #24]
    2f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f8c:	f89a 0020 	ldrb.w	r0, [sl, #32]
    2f90:	4288      	cmp	r0, r1
    2f92:	bf14      	ite	ne
    2f94:	f04f 0b00 	movne.w	fp, #0
    2f98:	f04f 0b01 	moveq.w	fp, #1
    2f9c:	f10a 0c20 	add.w	ip, sl, #32
    2fa0:	4686      	mov	lr, r0
    2fa2:	2220      	movs	r2, #32
    2fa4:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    2fa8:	e003      	b.n	2fb2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    2faa:	4602      	mov	r2, r0
    2fac:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    2fb0:	7840      	ldrb	r0, [r0, #1]
    2fb2:	4288      	cmp	r0, r1
    2fb4:	d002      	beq.n	2fbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    2fb6:	2820      	cmp	r0, #32
    2fb8:	d00a      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fba:	e7f6      	b.n	2faa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    2fbc:	2820      	cmp	r0, #32
    2fbe:	d007      	beq.n	2fd0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    2fc0:	4586      	cmp	lr, r0
    2fc2:	d107      	bne.n	2fd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    2fc4:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    2fc8:	7840      	ldrb	r0, [r0, #1]
    2fca:	f88c 0000 	strb.w	r0, [ip]
    2fce:	e007      	b.n	2fe0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2fd0:	4648      	mov	r0, r9
    2fd2:	e00c      	b.n	2fee <CONFIG_USB_DEVICE_VID+0xb>
    2fd4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    2fd8:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2fdc:	7840      	ldrb	r0, [r0, #1]
    2fde:	7048      	strb	r0, [r1, #1]
    2fe0:	b124      	cbz	r4, 2fec <CONFIG_USB_DEVICE_VID+0x9>
    2fe2:	2100      	movs	r1, #0
    2fe4:	f240 5037 	movw	r0, #1335	; 0x537
    2fe8:	f3af 8000 	nop.w
    2fec:	4640      	mov	r0, r8
    2fee:	ea10 0f0b 	tst.w	r0, fp
    2ff2:	bf18      	it	ne
    2ff4:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    2ff8:	2800      	cmp	r0, #0
    2ffa:	d052      	beq.n	30a2 <CONFIG_USB_DEVICE_VID+0xbf>
    2ffc:	b124      	cbz	r4, 3008 <CONFIG_USB_DEVICE_VID+0x25>
    2ffe:	2100      	movs	r1, #0
    3000:	f240 70fd 	movw	r0, #2045	; 0x7fd
    3004:	f3af 8000 	nop.w
    3008:	4632      	mov	r2, r6
    300a:	2001      	movs	r0, #1
    300c:	990c      	ldr	r1, [sp, #48]	; 0x30
    300e:	f7ff f88d 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    3012:	9806      	ldr	r0, [sp, #24]
    3014:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    3018:	f88d 0008 	strb.w	r0, [sp, #8]
    301c:	f89d a008 	ldrb.w	sl, [sp, #8]
    3020:	b124      	cbz	r4, 302c <CONFIG_USB_DEVICE_VID+0x49>
    3022:	2100      	movs	r1, #0
    3024:	f640 0008 	movw	r0, #2056	; 0x808
    3028:	f3af 8000 	nop.w
    302c:	4830      	ldr	r0, [pc, #192]	; (30f0 <CONFIG_USB_DEVICE_VID+0x10d>)
    302e:	2800      	cmp	r0, #0
    3030:	bf18      	it	ne
    3032:	f3af 8000 	nopne.w
    3036:	f3ef 8010 	mrs	r0, PRIMASK
    303a:	b672      	cpsid	i
    303c:	9008      	str	r0, [sp, #32]
    303e:	b124      	cbz	r4, 304a <CONFIG_USB_DEVICE_VID+0x67>
    3040:	2100      	movs	r1, #0
    3042:	f640 000d 	movw	r0, #2061	; 0x80d
    3046:	f3af 8000 	nop.w
    304a:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    304e:	f88d 0008 	strb.w	r0, [sp, #8]
    3052:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3056:	b140      	cbz	r0, 306a <CONFIG_USB_DEVICE_VID+0x87>
    3058:	2c00      	cmp	r4, #0
    305a:	bf1c      	itt	ne
    305c:	2100      	movne	r1, #0
    305e:	f640 0011 	movwne	r0, #2065	; 0x811
    3062:	f43f af3b 	beq.w	2edc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3066:	e777      	b.n	2f58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    3068:	e01b      	b.n	30a2 <CONFIG_USB_DEVICE_VID+0xbf>
    306a:	f1ba 0f00 	cmp.w	sl, #0
    306e:	d008      	beq.n	3082 <CONFIG_USB_DEVICE_VID+0x9f>
    3070:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    3074:	2820      	cmp	r0, #32
    3076:	d104      	bne.n	3082 <CONFIG_USB_DEVICE_VID+0x9f>
    3078:	4631      	mov	r1, r6
    307a:	2002      	movs	r0, #2
    307c:	f7ff f886 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    3080:	b308      	cbz	r0, 30c6 <CONFIG_USB_DEVICE_VID+0xe3>
    3082:	b124      	cbz	r4, 308e <CONFIG_USB_DEVICE_VID+0xab>
    3084:	2100      	movs	r1, #0
    3086:	f640 0025 	movw	r0, #2085	; 0x825
    308a:	f3af 8000 	nop.w
    308e:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    3092:	ea28 0000 	bic.w	r0, r8, r0
    3096:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    309a:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    309e:	2001      	movs	r0, #1
    30a0:	9009      	str	r0, [sp, #36]	; 0x24
    30a2:	b124      	cbz	r4, 30ae <CONFIG_USB_DEVICE_VID+0xcb>
    30a4:	2100      	movs	r1, #0
    30a6:	f640 002e 	movw	r0, #2094	; 0x82e
    30aa:	f3af 8000 	nop.w
    30ae:	9808      	ldr	r0, [sp, #32]
    30b0:	b188      	cbz	r0, 30d6 <CONFIG_USB_DEVICE_VID+0xf3>
    30b2:	b124      	cbz	r4, 30be <CONFIG_USB_DEVICE_VID+0xdb>
    30b4:	2100      	movs	r1, #0
    30b6:	f640 0032 	movw	r0, #2098	; 0x832
    30ba:	f3af 8000 	nop.w
    30be:	9809      	ldr	r0, [sp, #36]	; 0x24
    30c0:	b00d      	add	sp, #52	; 0x34
    30c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    30c6:	2c00      	cmp	r4, #0
    30c8:	d0f1      	beq.n	30ae <CONFIG_USB_DEVICE_VID+0xcb>
    30ca:	2100      	movs	r1, #0
    30cc:	f44f 6002 	mov.w	r0, #2080	; 0x820
    30d0:	f3af 8000 	nop.w
    30d4:	e7e6      	b.n	30a4 <CONFIG_USB_DEVICE_VID+0xc1>
    30d6:	4805      	ldr	r0, [pc, #20]	; (30ec <CONFIG_USB_DEVICE_VID+0x109>)
    30d8:	2800      	cmp	r0, #0
    30da:	bf18      	it	ne
    30dc:	f3af 8000 	nopne.w
    30e0:	b662      	cpsie	i
    30e2:	e7e6      	b.n	30b2 <CONFIG_USB_DEVICE_VID+0xcf>
    30e4:	20000f5c 	.word	0x20000f5c
	...

000030f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    30f4:	b510      	push	{r4, lr}
    30f6:	2820      	cmp	r0, #32
    30f8:	d211      	bcs.n	311e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    30fa:	490e      	ldr	r1, [pc, #56]	; (3134 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    30fc:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3100:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3104:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    3108:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    310c:	b13b      	cbz	r3, 311e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    310e:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3112:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    3116:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    311a:	2a01      	cmp	r2, #1
    311c:	d001      	beq.n	3122 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    311e:	2000      	movs	r0, #0
    3120:	bd10      	pop	{r4, pc}
    3122:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    3126:	4601      	mov	r1, r0
    3128:	2000      	movs	r0, #0
    312a:	f7fe ffff 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    312e:	2001      	movs	r0, #1
    3130:	bd10      	pop	{r4, pc}
    3132:	0000      	.short	0x0000
    3134:	20000f5c 	.word	0x20000f5c

00003138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    3138:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    313c:	4e80      	ldr	r6, [pc, #512]	; (3340 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    313e:	4680      	mov	r8, r0
    3140:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3144:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    3148:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    314c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3150:	2800      	cmp	r0, #0
    3152:	d068      	beq.n	3226 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3154:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    3158:	4d7a      	ldr	r5, [pc, #488]	; (3344 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    315a:	b125      	cbz	r5, 3166 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    315c:	2100      	movs	r1, #0
    315e:	f640 30c1 	movw	r0, #3009	; 0xbc1
    3162:	f3af 8000 	nop.w
    3166:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    316a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    316e:	2801      	cmp	r0, #1
    3170:	d018      	beq.n	31a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    3172:	b2c0      	uxtb	r0, r0
    3174:	2804      	cmp	r0, #4
    3176:	bf1c      	itt	ne
    3178:	2805      	cmpne	r0, #5
    317a:	2806      	cmpne	r0, #6
    317c:	d058      	beq.n	3230 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    317e:	b12d      	cbz	r5, 318c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    3180:	f04f 0100 	mov.w	r1, #0
    3184:	f640 30cd 	movw	r0, #3021	; 0xbcd
    3188:	f3af 8000 	nop.w
    318c:	f001 fc0e 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3190:	b125      	cbz	r5, 319c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    3192:	2100      	movs	r1, #0
    3194:	f640 30d1 	movw	r0, #3025	; 0xbd1
    3198:	f3af 8000 	nop.w
    319c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    31a0:	2801      	cmp	r0, #1
    31a2:	d1e6      	bne.n	3172 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    31a4:	2401      	movs	r4, #1
    31a6:	b125      	cbz	r5, 31b2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    31a8:	2100      	movs	r1, #0
    31aa:	f640 30d8 	movw	r0, #3032	; 0xbd8
    31ae:	f3af 8000 	nop.w
    31b2:	2c00      	cmp	r4, #0
    31b4:	d042      	beq.n	323c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    31b6:	2000      	movs	r0, #0
    31b8:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    31bc:	b125      	cbz	r5, 31c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    31be:	2100      	movs	r1, #0
    31c0:	f640 30dd 	movw	r0, #3037	; 0xbdd
    31c4:	f3af 8000 	nop.w
    31c8:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    31cc:	2001      	movs	r0, #1
    31ce:	ea20 090b 	bic.w	r9, r0, fp
    31d2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    31d6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    31da:	2240      	movs	r2, #64	; 0x40
    31dc:	f00a f992 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    31e0:	b125      	cbz	r5, 31ec <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    31e2:	2100      	movs	r1, #0
    31e4:	f240 50cd 	movw	r0, #1485	; 0x5cd
    31e8:	f3af 8000 	nop.w
    31ec:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    31f0:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    31f4:	6a00      	ldr	r0, [r0, #32]
    31f6:	f8ca 0020 	str.w	r0, [sl, #32]
    31fa:	b125      	cbz	r5, 3206 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    31fc:	2100      	movs	r1, #0
    31fe:	f240 50d1 	movw	r0, #1489	; 0x5d1
    3202:	f3af 8000 	nop.w
    3206:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    320a:	f88d 0000 	strb.w	r0, [sp]
    320e:	f89d 0000 	ldrb.w	r0, [sp]
    3212:	b1d0      	cbz	r0, 324a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3214:	2d00      	cmp	r5, #0
    3216:	bf1c      	itt	ne
    3218:	2100      	movne	r1, #0
    321a:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    321e:	d0c2      	beq.n	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3220:	f3af 8000 	nop.w
    3224:	e7bf      	b.n	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3226:	f640 31b8 	movw	r1, #3000	; 0xbb8
    322a:	2070      	movs	r0, #112	; 0x70
    322c:	f001 fa98 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3230:	464a      	mov	r2, r9
    3232:	4641      	mov	r1, r8
    3234:	2001      	movs	r0, #1
    3236:	f7fe ff79 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    323a:	e7a9      	b.n	3190 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    323c:	4842      	ldr	r0, [pc, #264]	; (3348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    323e:	2800      	cmp	r0, #0
    3240:	bf18      	it	ne
    3242:	f3af 8000 	nopne.w
    3246:	b662      	cpsie	i
    3248:	e7b5      	b.n	31b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    324a:	b125      	cbz	r5, 3256 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    324c:	2100      	movs	r1, #0
    324e:	f640 30e7 	movw	r0, #3047	; 0xbe7
    3252:	f3af 8000 	nop.w
    3256:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    325a:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    325e:	4614      	mov	r4, r2
    3260:	f04f 0b20 	mov.w	fp, #32
    3264:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    3268:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    326c:	e003      	b.n	3276 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    326e:	46a3      	mov	fp, r4
    3270:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    3274:	785c      	ldrb	r4, [r3, #1]
    3276:	4544      	cmp	r4, r8
    3278:	d002      	beq.n	3280 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    327a:	2c20      	cmp	r4, #32
    327c:	d02b      	beq.n	32d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    327e:	e7f6      	b.n	326e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    3280:	2c20      	cmp	r4, #32
    3282:	d028      	beq.n	32d6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    3284:	42a2      	cmp	r2, r4
    3286:	d104      	bne.n	3292 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    3288:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    328c:	7840      	ldrb	r0, [r0, #1]
    328e:	7008      	strb	r0, [r1, #0]
    3290:	e005      	b.n	329e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    3292:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    3296:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    329a:	7849      	ldrb	r1, [r1, #1]
    329c:	7041      	strb	r1, [r0, #1]
    329e:	f1ba 0f00 	cmp.w	sl, #0
    32a2:	d011      	beq.n	32c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32a4:	b125      	cbz	r5, 32b0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    32a6:	2100      	movs	r1, #0
    32a8:	f240 502f 	movw	r0, #1327	; 0x52f
    32ac:	f3af 8000 	nop.w
    32b0:	f89a 0000 	ldrb.w	r0, [sl]
    32b4:	42a0      	cmp	r0, r4
    32b6:	d107      	bne.n	32c8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    32b8:	b125      	cbz	r5, 32c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    32ba:	2100      	movs	r1, #0
    32bc:	f240 5032 	movw	r0, #1330	; 0x532
    32c0:	f3af 8000 	nop.w
    32c4:	f88a b000 	strb.w	fp, [sl]
    32c8:	b15d      	cbz	r5, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    32ca:	2100      	movs	r1, #0
    32cc:	f240 5037 	movw	r0, #1335	; 0x537
    32d0:	f3af 8000 	nop.w
    32d4:	e000      	b.n	32d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    32d6:	b125      	cbz	r5, 32e2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    32d8:	2100      	movs	r1, #0
    32da:	f640 30eb 	movw	r0, #3051	; 0xbeb
    32de:	f3af 8000 	nop.w
    32e2:	481a      	ldr	r0, [pc, #104]	; (334c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    32e4:	2800      	cmp	r0, #0
    32e6:	bf18      	it	ne
    32e8:	f3af 8000 	nopne.w
    32ec:	f3ef 8410 	mrs	r4, PRIMASK
    32f0:	b672      	cpsid	i
    32f2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    32f6:	f88d 0000 	strb.w	r0, [sp]
    32fa:	f89d 0000 	ldrb.w	r0, [sp]
    32fe:	b138      	cbz	r0, 3310 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    3300:	2d00      	cmp	r5, #0
    3302:	bf1c      	itt	ne
    3304:	2100      	movne	r1, #0
    3306:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    330a:	f43f af4c 	beq.w	31a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    330e:	e787      	b.n	3220 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3310:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3314:	2001      	movs	r0, #1
    3316:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    331a:	b154      	cbz	r4, 3332 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    331c:	2d00      	cmp	r5, #0
    331e:	bf08      	it	eq
    3320:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3324:	2100      	movs	r1, #0
    3326:	f640 30fe 	movw	r0, #3070	; 0xbfe
    332a:	f3af 8000 	nop.w
    332e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3332:	4805      	ldr	r0, [pc, #20]	; (3348 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3334:	2800      	cmp	r0, #0
    3336:	bf18      	it	ne
    3338:	f3af 8000 	nopne.w
    333c:	b662      	cpsie	i
    333e:	e7ed      	b.n	331c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    3340:	20000f5c 	.word	0x20000f5c
	...

00003350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3350:	b570      	push	{r4, r5, r6, lr}
    3352:	460d      	mov	r5, r1
    3354:	4606      	mov	r6, r0
    3356:	f001 f98d 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    335a:	480f      	ldr	r0, [pc, #60]	; (3398 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    335c:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3360:	2400      	movs	r4, #0
    3362:	3880      	subs	r0, #128	; 0x80
    3364:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    3368:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    336c:	b129      	cbz	r1, 337a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    336e:	1c61      	adds	r1, r4, #1
    3370:	b2cc      	uxtb	r4, r1
    3372:	2c20      	cmp	r4, #32
    3374:	d3f8      	bcc.n	3368 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    3376:	2020      	movs	r0, #32
    3378:	bd70      	pop	{r4, r5, r6, pc}
    337a:	4808      	ldr	r0, [pc, #32]	; (339c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    337c:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3380:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    3384:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    3388:	4621      	mov	r1, r4
    338a:	6045      	str	r5, [r0, #4]
    338c:	2001      	movs	r0, #1
    338e:	f7fe fecd 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    3392:	4620      	mov	r0, r4
    3394:	bd70      	pop	{r4, r5, r6, pc}
    3396:	0000      	.short	0x0000
    3398:	20000f5c 	.word	0x20000f5c
    339c:	20000bdc 	.word	0x20000bdc

000033a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    33a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33a4:	b083      	sub	sp, #12
    33a6:	f000 fb23 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    33aa:	4605      	mov	r5, r0
    33ac:	f000 fdd6 	bl	3f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    33b0:	4c67      	ldr	r4, [pc, #412]	; (3550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    33b2:	68a0      	ldr	r0, [r4, #8]
    33b4:	f1b0 3fff 	cmp.w	r0, #4294967295
    33b8:	bf1c      	itt	ne
    33ba:	f04f 30ff 	movne.w	r0, #4294967295
    33be:	60a0      	strne	r0, [r4, #8]
    33c0:	7fa0      	ldrb	r0, [r4, #30]
    33c2:	f8df b190 	ldr.w	fp, [pc, #400]	; 3554 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    33c6:	b9a8      	cbnz	r0, 33f4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    33c8:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    33cc:	1a08      	subs	r0, r1, r0
    33ce:	0200      	lsls	r0, r0, #8
    33d0:	17c1      	asrs	r1, r0, #31
    33d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33d6:	1200      	asrs	r0, r0, #8
    33d8:	f44f 710c 	mov.w	r1, #560	; 0x230
    33dc:	f009 ff51 	bl	d282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    33e0:	6921      	ldr	r1, [r4, #16]
    33e2:	4408      	add	r0, r1
    33e4:	1a28      	subs	r0, r5, r0
    33e6:	0200      	lsls	r0, r0, #8
    33e8:	17c1      	asrs	r1, r0, #31
    33ea:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    33ee:	1200      	asrs	r0, r0, #8
    33f0:	0fc0      	lsrs	r0, r0, #31
    33f2:	d013      	beq.n	341c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    33f4:	7e60      	ldrb	r0, [r4, #25]
    33f6:	b328      	cbz	r0, 3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    33f8:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    33fc:	f88d 0000 	strb.w	r0, [sp]
    3400:	f89d 0000 	ldrb.w	r0, [sp]
    3404:	b1f0      	cbz	r0, 3444 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    3406:	f000 fbff 	bl	3c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    340a:	bf00      	nop
    340c:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3410:	b1f0      	cbz	r0, 3450 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    3412:	f240 4147 	movw	r1, #1095	; 0x447
    3416:	2070      	movs	r0, #112	; 0x70
    3418:	f001 f9a2 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    341c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3420:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3424:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3428:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    342c:	6840      	ldr	r0, [r0, #4]
    342e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3432:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    3436:	2108      	movs	r1, #8
    3438:	4790      	blx	r2
    343a:	f44f 6186 	mov.w	r1, #1072	; 0x430
    343e:	2070      	movs	r0, #112	; 0x70
    3440:	f001 f98e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3444:	1ce8      	adds	r0, r5, #3
    3446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    344a:	f000 fad7 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    344e:	e7dd      	b.n	340c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3450:	f04f 0a01 	mov.w	sl, #1
    3454:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    3458:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    345c:	2820      	cmp	r0, #32
    345e:	d024      	beq.n	34aa <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3460:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3464:	2020      	movs	r0, #32
    3466:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    346a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    346e:	2600      	movs	r6, #0
    3470:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    3474:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    3478:	4837      	ldr	r0, [pc, #220]	; (3558 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    347a:	6026      	str	r6, [r4, #0]
    347c:	7800      	ldrb	r0, [r0, #0]
    347e:	2802      	cmp	r0, #2
    3480:	bf16      	itet	ne
    3482:	2803      	cmpne	r0, #3
    3484:	2001      	moveq	r0, #1
    3486:	2000      	movne	r0, #0
    3488:	7720      	strb	r0, [r4, #28]
    348a:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    348e:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    3492:	f899 0020 	ldrb.w	r0, [r9, #32]
    3496:	2820      	cmp	r0, #32
    3498:	d031      	beq.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    349a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    349e:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    34a2:	7d81      	ldrb	r1, [r0, #22]
    34a4:	2901      	cmp	r1, #1
    34a6:	d005      	beq.n	34b4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    34a8:	e029      	b.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    34aa:	f240 414a 	movw	r1, #1098	; 0x44a
    34ae:	2070      	movs	r0, #112	; 0x70
    34b0:	f001 f956 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    34b4:	46ab      	mov	fp, r5
    34b6:	f100 0508 	add.w	r5, r0, #8
    34ba:	8a40      	ldrh	r0, [r0, #18]
    34bc:	aa01      	add	r2, sp, #4
    34be:	4669      	mov	r1, sp
    34c0:	f000 f940 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    34c4:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    34c8:	2820      	cmp	r0, #32
    34ca:	d004      	beq.n	34d6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    34cc:	6920      	ldr	r0, [r4, #16]
    34ce:	1d40      	adds	r0, r0, #5
    34d0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34d4:	e00b      	b.n	34ee <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    34d6:	8968      	ldrh	r0, [r5, #10]
    34d8:	f10b 0b09 	add.w	fp, fp, #9
    34dc:	b128      	cbz	r0, 34ea <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    34de:	f001 f8db 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    34e2:	2800      	cmp	r0, #0
    34e4:	bf08      	it	eq
    34e6:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    34ea:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    34ee:	e9d5 2100 	ldrd	r2, r1, [r5]
    34f2:	1a89      	subs	r1, r1, r2
    34f4:	6028      	str	r0, [r5, #0]
    34f6:	4408      	add	r0, r1
    34f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34fc:	6068      	str	r0, [r5, #4]
    34fe:	4639      	mov	r1, r7
    3500:	2001      	movs	r0, #1
    3502:	f7fe fe43 	bl	218c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x440>
    3506:	2800      	cmp	r0, #0
    3508:	d0f9      	beq.n	34fe <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    350a:	4814      	ldr	r0, [pc, #80]	; (355c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    350c:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3510:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3514:	2802      	cmp	r0, #2
    3516:	d104      	bne.n	3522 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    3518:	463a      	mov	r2, r7
    351a:	4641      	mov	r1, r8
    351c:	2006      	movs	r0, #6
    351e:	f7fe fe05 	bl	212c <CONFIG_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e0>
    3522:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    3526:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    352a:	2820      	cmp	r0, #32
    352c:	d003      	beq.n	3536 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    352e:	480c      	ldr	r0, [pc, #48]	; (3560 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    3530:	7840      	ldrb	r0, [r0, #1]
    3532:	f001 f9e5 	bl	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3536:	7f20      	ldrb	r0, [r4, #28]
    3538:	2800      	cmp	r0, #0
    353a:	bf04      	itt	eq
    353c:	b003      	addeq	sp, #12
    353e:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3542:	f000 fd55 	bl	3ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    3546:	7726      	strb	r6, [r4, #28]
    3548:	7766      	strb	r6, [r4, #29]
    354a:	b003      	add	sp, #12
    354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3550:	20000f5c 	.word	0x20000f5c
    3554:	20000bdc 	.word	0x20000bdc
    3558:	20000012 	.word	0x20000012
    355c:	20000edc 	.word	0x20000edc
    3560:	20000010 	.word	0x20000010

00003564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3564:	b510      	push	{r4, lr}
    3566:	4c32      	ldr	r4, [pc, #200]	; (3630 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    3568:	b082      	sub	sp, #8
    356a:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    356e:	2920      	cmp	r1, #32
    3570:	d008      	beq.n	3584 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    3572:	68a1      	ldr	r1, [r4, #8]
    3574:	f1b1 3fff 	cmp.w	r1, #4294967295
    3578:	d009      	beq.n	358e <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    357a:	f640 21e9 	movw	r1, #2793	; 0xae9
    357e:	2070      	movs	r0, #112	; 0x70
    3580:	f001 f8ee 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3584:	f640 21e8 	movw	r1, #2792	; 0xae8
    3588:	2070      	movs	r0, #112	; 0x70
    358a:	f001 f8e9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    358e:	6862      	ldr	r2, [r4, #4]
    3590:	4601      	mov	r1, r0
    3592:	4b28      	ldr	r3, [pc, #160]	; (3634 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    3594:	1850      	adds	r0, r2, r1
    3596:	429a      	cmp	r2, r3
    3598:	d904      	bls.n	35a4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    359a:	f240 6109 	movw	r1, #1545	; 0x609
    359e:	2070      	movs	r0, #112	; 0x70
    35a0:	f001 f8de 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35a4:	4a24      	ldr	r2, [pc, #144]	; (3638 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    35a6:	4291      	cmp	r1, r2
    35a8:	dd04      	ble.n	35b4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    35aa:	f240 610a 	movw	r1, #1546	; 0x60a
    35ae:	2070      	movs	r0, #112	; 0x70
    35b0:	f001 f8d6 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35b4:	4a21      	ldr	r2, [pc, #132]	; (363c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    35b6:	4291      	cmp	r1, r2
    35b8:	da04      	bge.n	35c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    35ba:	f240 610b 	movw	r1, #1547	; 0x60b
    35be:	2070      	movs	r0, #112	; 0x70
    35c0:	f001 f8ce 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35c4:	491e      	ldr	r1, [pc, #120]	; (3640 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    35c6:	4281      	cmp	r1, r0
    35c8:	bfdc      	itt	le
    35ca:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    35ce:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    35d2:	dd05      	ble.n	35e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    35d4:	2800      	cmp	r0, #0
    35d6:	bfbc      	itt	lt
    35d8:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    35dc:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    35e0:	aa01      	add	r2, sp, #4
    35e2:	4669      	mov	r1, sp
    35e4:	f000 f8ae 	bl	3744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    35e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    35ec:	280f      	cmp	r0, #15
    35ee:	bf8c      	ite	hi
    35f0:	2001      	movhi	r0, #1
    35f2:	2000      	movls	r0, #0
    35f4:	9900      	ldr	r1, [sp, #0]
    35f6:	4408      	add	r0, r1
    35f8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    35fc:	60a1      	str	r1, [r4, #8]
    35fe:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3602:	f88d 0000 	strb.w	r0, [sp]
    3606:	f89d 0000 	ldrb.w	r0, [sp]
    360a:	2800      	cmp	r0, #0
    360c:	bf04      	itt	eq
    360e:	b002      	addeq	sp, #8
    3610:	bd10      	popeq	{r4, pc}
    3612:	2301      	movs	r3, #1
    3614:	2203      	movs	r2, #3
    3616:	2005      	movs	r0, #5
    3618:	f000 fb70 	bl	3cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    361c:	2800      	cmp	r0, #0
    361e:	bf1c      	itt	ne
    3620:	b002      	addne	sp, #8
    3622:	bd10      	popne	{r4, pc}
    3624:	f640 21f1 	movw	r1, #2801	; 0xaf1
    3628:	2070      	movs	r0, #112	; 0x70
    362a:	f001 f899 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    362e:	0000      	.short	0x0000
    3630:	20000f5c 	.word	0x20000f5c
    3634:	1e847fff 	.word	0x1e847fff
    3638:	07a12000 	.word	0x07a12000
    363c:	f85ee000 	.word	0xf85ee000
    3640:	1e848000 	.word	0x1e848000

00003644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	4c1e      	ldr	r4, [pc, #120]	; (36c0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    3648:	2120      	movs	r1, #32
    364a:	f884 1020 	strb.w	r1, [r4, #32]
    364e:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3652:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    3656:	2000      	movs	r0, #0
    3658:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    365c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3660:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3664:	1e42      	subs	r2, r0, #1
    3666:	60a2      	str	r2, [r4, #8]
    3668:	6020      	str	r0, [r4, #0]
    366a:	77a0      	strb	r0, [r4, #30]
    366c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    3670:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    3674:	7720      	strb	r0, [r4, #28]
    3676:	7760      	strb	r0, [r4, #29]
    3678:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    367c:	4911      	ldr	r1, [pc, #68]	; (36c4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    367e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    3682:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    3686:	7008      	strb	r0, [r1, #0]
    3688:	7048      	strb	r0, [r1, #1]
    368a:	8048      	strh	r0, [r1, #2]
    368c:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    3690:	2210      	movs	r2, #16
    3692:	7088      	strb	r0, [r1, #2]
    3694:	f801 0f04 	strb.w	r0, [r1, #4]!
    3698:	1e52      	subs	r2, r2, #1
    369a:	d1fa      	bne.n	3692 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    369c:	4d0a      	ldr	r5, [pc, #40]	; (36c8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    369e:	2601      	movs	r6, #1
    36a0:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    36a4:	20ff      	movs	r0, #255	; 0xff
    36a6:	7028      	strb	r0, [r5, #0]
    36a8:	4808      	ldr	r0, [pc, #32]	; (36cc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    36aa:	f001 f90b 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    36ae:	7068      	strb	r0, [r5, #1]
    36b0:	f001 f966 	bl	4980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    36b4:	60a8      	str	r0, [r5, #8]
    36b6:	f000 fcc9 	bl	404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    36ba:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    36be:	bd70      	pop	{r4, r5, r6, pc}
    36c0:	20000f5c 	.word	0x20000f5c
    36c4:	20000012 	.word	0x20000012
    36c8:	20000010 	.word	0x20000010
    36cc:	00001fe9 	.word	0x00001fe9

000036d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    36d0:	b570      	push	{r4, r5, r6, lr}
    36d2:	4605      	mov	r5, r0
    36d4:	2001      	movs	r0, #1
    36d6:	fa00 f405 	lsl.w	r4, r0, r5
    36da:	460e      	mov	r6, r1
    36dc:	2a00      	cmp	r2, #0
    36de:	bf08      	it	eq
    36e0:	4808      	ldreq	r0, [pc, #32]	; (3704 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    36e2:	d00c      	beq.n	36fe <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    36e4:	2000      	movs	r0, #0
    36e6:	f000 fc97 	bl	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    36ea:	00e9      	lsls	r1, r5, #3
    36ec:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    36f0:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    36f4:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    36f8:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    36fc:	4802      	ldr	r0, [pc, #8]	; (3708 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    36fe:	6004      	str	r4, [r0, #0]
    3700:	bd70      	pop	{r4, r5, r6, pc}
    3702:	0000      	.short	0x0000
    3704:	4001f508 	.word	0x4001f508
    3708:	4001f504 	.word	0x4001f504

0000370c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    370c:	0b41      	lsrs	r1, r0, #13
    370e:	f248 6237 	movw	r2, #34359	; 0x8637
    3712:	4351      	muls	r1, r2
    3714:	0c0a      	lsrs	r2, r1, #16
    3716:	4b09      	ldr	r3, [pc, #36]	; (373c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    3718:	0251      	lsls	r1, r2, #9
    371a:	fb02 0203 	mla	r2, r2, r3, r0
    371e:	4808      	ldr	r0, [pc, #32]	; (3740 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3720:	4350      	muls	r0, r2
    3722:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    3726:	306e      	adds	r0, #110	; 0x6e
    3728:	0d40      	lsrs	r0, r0, #21
    372a:	425b      	negs	r3, r3
    372c:	fb10 f303 	smulbb	r3, r0, r3
    3730:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3734:	bf88      	it	hi
    3736:	1c49      	addhi	r1, r1, #1
    3738:	4408      	add	r0, r1
    373a:	4770      	bx	lr
    373c:	ffffc2f7 	.word	0xffffc2f7
    3740:	00010c6f 	.word	0x00010c6f

00003744 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3744:	0b43      	lsrs	r3, r0, #13
    3746:	f248 6c37 	movw	ip, #34359	; 0x8637
    374a:	fb03 f30c 	mul.w	r3, r3, ip
    374e:	b430      	push	{r4, r5}
    3750:	0c1b      	lsrs	r3, r3, #16
    3752:	f8df c044 	ldr.w	ip, [pc, #68]	; 3798 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    3756:	025c      	lsls	r4, r3, #9
    3758:	fb03 030c 	mla	r3, r3, ip, r0
    375c:	480f      	ldr	r0, [pc, #60]	; (379c <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    375e:	4358      	muls	r0, r3
    3760:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3764:	eb04 000c 	add.w	r0, r4, ip
    3768:	f643 5409 	movw	r4, #15625	; 0x3d09
    376c:	fb1c f404 	smulbb	r4, ip, r4
    3770:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    3774:	f643 5508 	movw	r5, #15624	; 0x3d08
    3778:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    377c:	442c      	add	r4, r5
    377e:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    3782:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    3786:	bf84      	itt	hi
    3788:	f04f 0c00 	movhi.w	ip, #0
    378c:	1c40      	addhi	r0, r0, #1
    378e:	6008      	str	r0, [r1, #0]
    3790:	f882 c000 	strb.w	ip, [r2]
    3794:	bc30      	pop	{r4, r5}
    3796:	4770      	bx	lr
    3798:	ffffc2f7 	.word	0xffffc2f7
    379c:	00010c6f 	.word	0x00010c6f

000037a0 <MPSL_IRQ_RTC0_Handler>:
    37a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    37a4:	4c38      	ldr	r4, [pc, #224]	; (3888 <MPSL_IRQ_RTC0_Handler+0xe8>)
    37a6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37aa:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 388c <MPSL_IRQ_RTC0_Handler+0xec>
    37ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    37b2:	f44f 6600 	mov.w	r6, #2048	; 0x800
    37b6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    37ba:	f04f 0500 	mov.w	r5, #0
    37be:	bf1c      	itt	ne
    37c0:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    37c4:	2800      	cmpne	r0, #0
    37c6:	d017      	beq.n	37f8 <MPSL_IRQ_RTC0_Handler+0x58>
    37c8:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    37cc:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    37d0:	482f      	ldr	r0, [pc, #188]	; (3890 <MPSL_IRQ_RTC0_Handler+0xf0>)
    37d2:	6800      	ldr	r0, [r0, #0]
    37d4:	f8d8 1000 	ldr.w	r1, [r8]
    37d8:	eba0 0001 	sub.w	r0, r0, r1
    37dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    37e0:	2802      	cmp	r0, #2
    37e2:	d302      	bcc.n	37ea <MPSL_IRQ_RTC0_Handler+0x4a>
    37e4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    37e8:	d306      	bcc.n	37f8 <MPSL_IRQ_RTC0_Handler+0x58>
    37ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    37ee:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    37f2:	2004      	movs	r0, #4
    37f4:	f7fe ff4c 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    37f8:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    37fc:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3800:	bf1c      	itt	ne
    3802:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    3806:	2800      	cmpne	r0, #0
    3808:	d017      	beq.n	383a <MPSL_IRQ_RTC0_Handler+0x9a>
    380a:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    380e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3812:	4820      	ldr	r0, [pc, #128]	; (3894 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3814:	6800      	ldr	r0, [r0, #0]
    3816:	f8d8 1000 	ldr.w	r1, [r8]
    381a:	eba0 0001 	sub.w	r0, r0, r1
    381e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3822:	2802      	cmp	r0, #2
    3824:	d302      	bcc.n	382c <MPSL_IRQ_RTC0_Handler+0x8c>
    3826:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    382a:	d306      	bcc.n	383a <MPSL_IRQ_RTC0_Handler+0x9a>
    382c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3830:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    3834:	2005      	movs	r0, #5
    3836:	f7fe ff2b 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    383a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    383e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3842:	bf1a      	itte	ne
    3844:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3848:	2800      	cmpne	r0, #0
    384a:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    384e:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3852:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3856:	4810      	ldr	r0, [pc, #64]	; (3898 <MPSL_IRQ_RTC0_Handler+0xf8>)
    3858:	6800      	ldr	r0, [r0, #0]
    385a:	f8d8 1000 	ldr.w	r1, [r8]
    385e:	eba0 0001 	sub.w	r0, r0, r1
    3862:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3866:	2802      	cmp	r0, #2
    3868:	d304      	bcc.n	3874 <MPSL_IRQ_RTC0_Handler+0xd4>
    386a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    386e:	bf38      	it	cc
    3870:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    3874:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3878:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    387c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3880:	2006      	movs	r0, #6
    3882:	f7fe bf05 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3886:	0000      	.short	0x0000
    3888:	4000b000 	.word	0x4000b000
    388c:	4000b504 	.word	0x4000b504
    3890:	4000b540 	.word	0x4000b540
    3894:	4000b544 	.word	0x4000b544
    3898:	4000b548 	.word	0x4000b548

0000389c <MPSL_IRQ_TIMER0_Handler>:
    389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38a0:	4d3a      	ldr	r5, [pc, #232]	; (398c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    38a2:	7828      	ldrb	r0, [r5, #0]
    38a4:	2804      	cmp	r0, #4
    38a6:	d06c      	beq.n	3982 <MPSL_IRQ_TIMER0_Handler+0xe6>
    38a8:	1ce8      	adds	r0, r5, #3
    38aa:	2201      	movs	r2, #1
    38ac:	7801      	ldrb	r1, [r0, #0]
    38ae:	b159      	cbz	r1, 38c8 <MPSL_IRQ_TIMER0_Handler+0x2c>
    38b0:	2901      	cmp	r1, #1
    38b2:	bf08      	it	eq
    38b4:	706a      	strbeq	r2, [r5, #1]
    38b6:	d002      	beq.n	38be <MPSL_IRQ_TIMER0_Handler+0x22>
    38b8:	7869      	ldrb	r1, [r5, #1]
    38ba:	2900      	cmp	r1, #0
    38bc:	d05c      	beq.n	3978 <MPSL_IRQ_TIMER0_Handler+0xdc>
    38be:	2102      	movs	r1, #2
    38c0:	7001      	strb	r1, [r0, #0]
    38c2:	7840      	ldrb	r0, [r0, #1]
    38c4:	f000 fae2 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38c8:	4c31      	ldr	r4, [pc, #196]	; (3990 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    38ca:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38ce:	f04f 0800 	mov.w	r8, #0
    38d2:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    38d6:	f44f 7680 	mov.w	r6, #256	; 0x100
    38da:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    38de:	bf1c      	itt	ne
    38e0:	f8d4 014c 	ldrne.w	r0, [r4, #332]	; 0x14c
    38e4:	2800      	cmpne	r0, #0
    38e6:	d008      	beq.n	38fa <MPSL_IRQ_TIMER0_Handler+0x5e>
    38e8:	f04f 0003 	mov.w	r0, #3
    38ec:	f000 face 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    38f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38f4:	2003      	movs	r0, #3
    38f6:	f7fe fecb 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    38fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38fe:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3902:	bf1c      	itt	ne
    3904:	f8d4 0148 	ldrne.w	r0, [r4, #328]	; 0x148
    3908:	2800      	cmpne	r0, #0
    390a:	d008      	beq.n	391e <MPSL_IRQ_TIMER0_Handler+0x82>
    390c:	f04f 0002 	mov.w	r0, #2
    3910:	f000 fabc 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3914:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3918:	2002      	movs	r0, #2
    391a:	f7fe feb9 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    391e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3922:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3926:	bf1c      	itt	ne
    3928:	f8d4 0144 	ldrne.w	r0, [r4, #324]	; 0x144
    392c:	2800      	cmpne	r0, #0
    392e:	d008      	beq.n	3942 <MPSL_IRQ_TIMER0_Handler+0xa6>
    3930:	f04f 0001 	mov.w	r0, #1
    3934:	f000 faaa 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3938:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    393c:	2001      	movs	r0, #1
    393e:	f7fe fea7 	bl	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3942:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3946:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    394a:	bf1a      	itte	ne
    394c:	f8d4 0140 	ldrne.w	r0, [r4, #320]	; 0x140
    3950:	2800      	cmpne	r0, #0
    3952:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3956:	f04f 0000 	mov.w	r0, #0
    395a:	f000 fa97 	bl	3e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    395e:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3962:	2004      	movs	r0, #4
    3964:	7028      	strb	r0, [r5, #0]
    3966:	f8c5 8008 	str.w	r8, [r5, #8]
    396a:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    396e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3972:	2000      	movs	r0, #0
    3974:	f7fe be8c 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3978:	f44f 715a 	mov.w	r1, #872	; 0x368
    397c:	206c      	movs	r0, #108	; 0x6c
    397e:	f000 feef 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3986:	2007      	movs	r0, #7
    3988:	f7fe be82 	b.w	2690 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    398c:	2000001c 	.word	0x2000001c
    3990:	40008000 	.word	0x40008000
    3994:	2201      	movs	r2, #1
    3996:	0213      	lsls	r3, r2, #8
    3998:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    399c:	2000      	movs	r0, #0
    399e:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
    39a2:	f501 71c0 	add.w	r1, r1, #384	; 0x180
    39a6:	f3bf 8f4f 	dsb	sy
    39aa:	f3bf 8f6f 	isb	sy
    39ae:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    39b2:	490c      	ldr	r1, [pc, #48]	; (39e4 <MPSL_IRQ_TIMER0_Handler+0x148>)
    39b4:	604a      	str	r2, [r1, #4]
    39b6:	1e43      	subs	r3, r0, #1
    39b8:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    39bc:	4b0a      	ldr	r3, [pc, #40]	; (39e8 <MPSL_IRQ_TIMER0_Handler+0x14c>)
    39be:	6018      	str	r0, [r3, #0]
    39c0:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    39c4:	1d1b      	adds	r3, r3, #4
    39c6:	6018      	str	r0, [r3, #0]
    39c8:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    39cc:	1d1b      	adds	r3, r3, #4
    39ce:	6018      	str	r0, [r3, #0]
    39d0:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    39d4:	1d1b      	adds	r3, r3, #4
    39d6:	6018      	str	r0, [r3, #0]
    39d8:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    39dc:	610a      	str	r2, [r1, #16]
    39de:	4903      	ldr	r1, [pc, #12]	; (39ec <MPSL_IRQ_TIMER0_Handler+0x150>)
    39e0:	7048      	strb	r0, [r1, #1]
    39e2:	4770      	bx	lr
    39e4:	40008000 	.word	0x40008000
    39e8:	40008540 	.word	0x40008540
    39ec:	2000001c 	.word	0x2000001c

000039f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    39f0:	4801      	ldr	r0, [pc, #4]	; (39f8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    39f2:	6800      	ldr	r0, [r0, #0]
    39f4:	4770      	bx	lr
    39f6:	0000      	.short	0x0000
    39f8:	4000b504 	.word	0x4000b504

000039fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    39fc:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3a00:	4e41      	ldr	r6, [pc, #260]	; (3b08 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x70>)
    3a02:	4604      	mov	r4, r0
    3a04:	1ef7      	subs	r7, r6, #3
    3a06:	f896 c000 	ldrb.w	ip, [r6]
    3a0a:	68f8      	ldr	r0, [r7, #12]
    3a0c:	f1bc 0f01 	cmp.w	ip, #1
    3a10:	bf04      	itt	eq
    3a12:	42a0      	cmpeq	r0, r4
    3a14:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3a18:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    3a1c:	4a3b      	ldr	r2, [pc, #236]	; (3b0c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x74>)
    3a1e:	6011      	str	r1, [r2, #0]
    3a20:	493b      	ldr	r1, [pc, #236]	; (3b10 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x78>)
    3a22:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3a26:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3a2a:	4a3a      	ldr	r2, [pc, #232]	; (3b14 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x7c>)
    3a2c:	f04f 0500 	mov.w	r5, #0
    3a30:	f1bc 0f00 	cmp.w	ip, #0
    3a34:	d057      	beq.n	3ae6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4e>
    3a36:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3a3a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a3e:	6015      	str	r5, [r2, #0]
    3a40:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3a44:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    3a48:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3a4c:	f04f 0801 	mov.w	r8, #1
    3a50:	2a00      	cmp	r2, #0
    3a52:	bf04      	itt	eq
    3a54:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    3a58:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    3a5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3a60:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3a64:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3a68:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3a6c:	4a2a      	ldr	r2, [pc, #168]	; (3b18 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x80>)
    3a6e:	f8d2 a000 	ldr.w	sl, [r2]
    3a72:	eba4 0a0a 	sub.w	sl, r4, sl
    3a76:	f02a 4b7f 	bic.w	fp, sl, #4278190080	; 0xff000000
    3a7a:	f1bb 0f02 	cmp.w	fp, #2
    3a7e:	d33c      	bcc.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3a80:	f04f 0a02 	mov.w	sl, #2
    3a84:	f5bb 0f80 	cmp.w	fp, #4194304	; 0x400000
    3a88:	d237      	bcs.n	3afa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x62>
    3a8a:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3a8e:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3a92:	f1bc 0f00 	cmp.w	ip, #0
    3a96:	d005      	beq.n	3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>
    3a98:	6811      	ldr	r1, [r2, #0]
    3a9a:	1a41      	subs	r1, r0, r1
    3a9c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3aa0:	2902      	cmp	r1, #2
    3aa2:	d3f9      	bcc.n	3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>
    3aa4:	f8c7 8008 	str.w	r8, [r7, #8]
    3aa8:	703d      	strb	r5, [r7, #0]
    3aaa:	f7ff ff73 	bl	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3aae:	481b      	ldr	r0, [pc, #108]	; (3b1c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x84>)
    3ab0:	6005      	str	r5, [r0, #0]
    3ab2:	1d00      	adds	r0, r0, #4
    3ab4:	f8c0 a000 	str.w	sl, [r0]
    3ab8:	4919      	ldr	r1, [pc, #100]	; (3b20 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x88>)
    3aba:	2004      	movs	r0, #4
    3abc:	6008      	str	r0, [r1, #0]
    3abe:	4919      	ldr	r1, [pc, #100]	; (3b24 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8c>)
    3ac0:	f8c1 800c 	str.w	r8, [r1, #12]
    3ac4:	68ba      	ldr	r2, [r7, #8]
    3ac6:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
    3aca:	0181      	lsls	r1, r0, #6
    3acc:	f8c9 1280 	str.w	r1, [r9, #640]	; 0x280
    3ad0:	f8c9 1100 	str.w	r1, [r9, #256]	; 0x100
    3ad4:	4a14      	ldr	r2, [pc, #80]	; (3b28 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x90>)
    3ad6:	0741      	lsls	r1, r0, #29
    3ad8:	6011      	str	r1, [r2, #0]
    3ada:	60fc      	str	r4, [r7, #12]
    3adc:	7070      	strb	r0, [r6, #1]
    3ade:	f886 8000 	strb.w	r8, [r6]
    3ae2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3ae6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3aea:	4b10      	ldr	r3, [pc, #64]	; (3b2c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x94>)
    3aec:	601d      	str	r5, [r3, #0]
    3aee:	f8c1 5140 	str.w	r5, [r1, #320]	; 0x140
    3af2:	6015      	str	r5, [r2, #0]
    3af4:	f8c1 5144 	str.w	r5, [r1, #324]	; 0x144
    3af8:	e7a4      	b.n	3a44 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    3afa:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    3afe:	f240 11f1 	movw	r1, #497	; 0x1f1
    3b02:	206c      	movs	r0, #108	; 0x6c
    3b04:	f000 fe2c 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3b08:	2000001f 	.word	0x2000001f
    3b0c:	4001f508 	.word	0x4001f508
    3b10:	4000b000 	.word	0x4000b000
    3b14:	4000b544 	.word	0x4000b544
    3b18:	4000b504 	.word	0x4000b504
    3b1c:	40008504 	.word	0x40008504
    3b20:	40008510 	.word	0x40008510
    3b24:	40008000 	.word	0x40008000
    3b28:	4001f504 	.word	0x4001f504
    3b2c:	4000b540 	.word	0x4000b540

00003b30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b34:	4c2b      	ldr	r4, [pc, #172]	; (3be4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3b36:	68e1      	ldr	r1, [r4, #12]
    3b38:	4281      	cmp	r1, r0
    3b3a:	bf14      	ite	ne
    3b3c:	2201      	movne	r2, #1
    3b3e:	2200      	moveq	r2, #0
    3b40:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 3be8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3b44:	f89c 7000 	ldrb.w	r7, [ip]
    3b48:	2f02      	cmp	r7, #2
    3b4a:	d002      	beq.n	3b52 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x22>
    3b4c:	2a00      	cmp	r2, #0
    3b4e:	d038      	beq.n	3bc2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    3b50:	e003      	b.n	3b5a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2a>
    3b52:	2a00      	cmp	r2, #0
    3b54:	bf08      	it	eq
    3b56:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b5a:	7862      	ldrb	r2, [r4, #1]
    3b5c:	b382      	cbz	r2, 3bc0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    3b5e:	4b23      	ldr	r3, [pc, #140]	; (3bec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3b60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b64:	601a      	str	r2, [r3, #0]
    3b66:	4b22      	ldr	r3, [pc, #136]	; (3bf0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3b68:	1395      	asrs	r5, r2, #14
    3b6a:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
    3b6e:	f8c3 5348 	str.w	r5, [r3, #840]	; 0x348
    3b72:	2600      	movs	r6, #0
    3b74:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    3b78:	4a1e      	ldr	r2, [pc, #120]	; (3bf4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3b7a:	f8d2 8000 	ldr.w	r8, [r2]
    3b7e:	eba0 0808 	sub.w	r8, r0, r8
    3b82:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    3b86:	f1b8 0f02 	cmp.w	r8, #2
    3b8a:	d324      	bcc.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b8c:	f5b8 0f80 	cmp.w	r8, #4194304	; 0x400000
    3b90:	d221      	bcs.n	3bd6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa6>
    3b92:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b96:	f8c3 5344 	str.w	r5, [r3, #836]	; 0x344
    3b9a:	b12f      	cbz	r7, 3ba8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x78>
    3b9c:	6813      	ldr	r3, [r2, #0]
    3b9e:	1acb      	subs	r3, r1, r3
    3ba0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3ba4:	2b02      	cmp	r3, #2
    3ba6:	d3f9      	bcc.n	3b9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x6c>
    3ba8:	4b13      	ldr	r3, [pc, #76]	; (3bf8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc8>)
    3baa:	2102      	movs	r1, #2
    3bac:	074a      	lsls	r2, r1, #29
    3bae:	601a      	str	r2, [r3, #0]
    3bb0:	60e0      	str	r0, [r4, #12]
    3bb2:	2004      	movs	r0, #4
    3bb4:	f88c 0001 	strb.w	r0, [ip, #1]
    3bb8:	f88c 1000 	strb.w	r1, [ip]
    3bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3bc0:	e004      	b.n	3bcc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    3bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
    3bc6:	206c      	movs	r0, #108	; 0x6c
    3bc8:	f000 fdca 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bcc:	f240 2103 	movw	r1, #515	; 0x203
    3bd0:	206c      	movs	r0, #108	; 0x6c
    3bd2:	f000 fdc5 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3bd6:	f8c3 6540 	str.w	r6, [r3, #1344]	; 0x540
    3bda:	f240 210f 	movw	r1, #527	; 0x20f
    3bde:	206c      	movs	r0, #108	; 0x6c
    3be0:	f000 fdbe 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3be4:	2000001c 	.word	0x2000001c
    3be8:	2000001f 	.word	0x2000001f
    3bec:	4001f508 	.word	0x4001f508
    3bf0:	4000b000 	.word	0x4000b000
    3bf4:	4000b504 	.word	0x4000b504
    3bf8:	4001f504 	.word	0x4001f504

00003bfc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3bfc:	4801      	ldr	r0, [pc, #4]	; (3c04 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3bfe:	68c0      	ldr	r0, [r0, #12]
    3c00:	4770      	bx	lr
    3c02:	0000      	.short	0x0000
    3c04:	2000001c 	.word	0x2000001c

00003c08 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c0c:	4833      	ldr	r0, [pc, #204]	; (3cdc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    3c0e:	f46f 2480 	mvn.w	r4, #262144	; 0x40000
    3c12:	f8c0 4308 	str.w	r4, [r0, #776]	; 0x308
    3c16:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 3ce0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>
    3c1a:	4a32      	ldr	r2, [pc, #200]	; (3ce4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    3c1c:	2100      	movs	r1, #0
    3c1e:	f89c 3000 	ldrb.w	r3, [ip]
    3c22:	b163      	cbz	r3, 3c3e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x36>
    3c24:	f46f 24a0 	mvn.w	r4, #327680	; 0x50000
    3c28:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3c2c:	6011      	str	r1, [r2, #0]
    3c2e:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c32:	bf00      	nop
    3c34:	f8d0 0148 	ldr.w	r0, [r0, #328]	; 0x148
    3c38:	2201      	movs	r2, #1
    3c3a:	b980      	cbnz	r0, 3c5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x56>
    3c3c:	e009      	b.n	3c52 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4a>
    3c3e:	f8c0 4348 	str.w	r4, [r0, #840]	; 0x348
    3c42:	4c29      	ldr	r4, [pc, #164]	; (3ce8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3c44:	6021      	str	r1, [r4, #0]
    3c46:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    3c4a:	6011      	str	r1, [r2, #0]
    3c4c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    3c50:	e7f0      	b.n	3c34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    3c52:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3c56:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3c5a:	f8c4 0280 	str.w	r0, [r4, #640]	; 0x280
    3c5e:	2b02      	cmp	r3, #2
    3c60:	d004      	beq.n	3c6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x64>
    3c62:	f240 211b 	movw	r1, #539	; 0x21b
    3c66:	206c      	movs	r0, #108	; 0x6c
    3c68:	f000 fd7a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c6c:	4e1f      	ldr	r6, [pc, #124]	; (3cec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3c6e:	6830      	ldr	r0, [r6, #0]
    3c70:	4c1f      	ldr	r4, [pc, #124]	; (3cf0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3c72:	1cc0      	adds	r0, r0, #3
    3c74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3c78:	68e3      	ldr	r3, [r4, #12]
    3c7a:	4d1e      	ldr	r5, [pc, #120]	; (3cf4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3c7c:	4298      	cmp	r0, r3
    3c7e:	d00b      	beq.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c80:	6837      	ldr	r7, [r6, #0]
    3c82:	1bdf      	subs	r7, r3, r7
    3c84:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3c88:	2f04      	cmp	r7, #4
    3c8a:	d305      	bcc.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c8c:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3c90:	d202      	bcs.n	3c98 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x90>
    3c92:	f7ff feb3 	bl	39fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3c96:	e01b      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3c98:	6830      	ldr	r0, [r6, #0]
    3c9a:	1a18      	subs	r0, r3, r0
    3c9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3ca0:	2802      	cmp	r0, #2
    3ca2:	d313      	bcc.n	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3ca4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3ca8:	d210      	bcs.n	3ccc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc4>
    3caa:	4b13      	ldr	r3, [pc, #76]	; (3cf8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3cac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3cb0:	6018      	str	r0, [r3, #0]
    3cb2:	60a2      	str	r2, [r4, #8]
    3cb4:	7021      	strb	r1, [r4, #0]
    3cb6:	606a      	str	r2, [r5, #4]
    3cb8:	60ea      	str	r2, [r5, #12]
    3cba:	0040      	lsls	r0, r0, #1
    3cbc:	1f19      	subs	r1, r3, #4
    3cbe:	6008      	str	r0, [r1, #0]
    3cc0:	2004      	movs	r0, #4
    3cc2:	f88c 0001 	strb.w	r0, [ip, #1]
    3cc6:	f88c 2000 	strb.w	r2, [ip]
    3cca:	e001      	b.n	3cd0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc8>
    3ccc:	60a2      	str	r2, [r4, #8]
    3cce:	7021      	strb	r1, [r4, #0]
    3cd0:	68a0      	ldr	r0, [r4, #8]
    3cd2:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    3cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cda:	0000      	.short	0x0000
    3cdc:	4000b000 	.word	0x4000b000
    3ce0:	2000001f 	.word	0x2000001f
    3ce4:	4000b544 	.word	0x4000b544
    3ce8:	4000b540 	.word	0x4000b540
    3cec:	4000b504 	.word	0x4000b504
    3cf0:	2000001c 	.word	0x2000001c
    3cf4:	40008000 	.word	0x40008000
    3cf8:	4001f508 	.word	0x4001f508

00003cfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d00:	f8df c174 	ldr.w	ip, [pc, #372]	; 3e78 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x17c>
    3d04:	2701      	movs	r7, #1
    3d06:	f04f 0800 	mov.w	r8, #0
    3d0a:	f89c 5000 	ldrb.w	r5, [ip]
    3d0e:	f89c c001 	ldrb.w	ip, [ip, #1]
    3d12:	2807      	cmp	r0, #7
    3d14:	d27e      	bcs.n	3e14 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    3d16:	e8df f000 	tbb	[pc, r0]
    3d1a:	0404      	.short	0x0404
    3d1c:	6a6a0404 	.word	0x6a6a0404
    3d20:	006a      	.short	0x006a
    3d22:	4c56      	ldr	r4, [pc, #344]	; (3e7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x180>)
    3d24:	68e6      	ldr	r6, [r4, #12]
    3d26:	f1b6 7f80 	cmp.w	r6, #16777216	; 0x1000000
    3d2a:	bf04      	itt	eq
    3d2c:	7864      	ldrbeq	r4, [r4, #1]
    3d2e:	2c00      	cmpeq	r4, #0
    3d30:	d002      	beq.n	3d38 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    3d32:	2d02      	cmp	r5, #2
    3d34:	d005      	beq.n	3d42 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3d36:	e03c      	b.n	3db2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb6>
    3d38:	f240 214e 	movw	r1, #590	; 0x24e
    3d3c:	206c      	movs	r0, #108	; 0x6c
    3d3e:	f000 fd0f 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d42:	ea4f 048c 	mov.w	r4, ip, lsl #2
    3d46:	f104 4680 	add.w	r6, r4, #1073741824	; 0x40000000
    3d4a:	f1ac 0404 	sub.w	r4, ip, #4
    3d4e:	0624      	lsls	r4, r4, #24
    3d50:	0da4      	lsrs	r4, r4, #22
    3d52:	f104 4980 	add.w	r9, r4, #1073741824	; 0x40000000
    3d56:	f506 4600 	add.w	r6, r6, #32768	; 0x8000
    3d5a:	f509 4930 	add.w	r9, r9, #45056	; 0xb000
    3d5e:	2400      	movs	r4, #0
    3d60:	2d01      	cmp	r5, #1
    3d62:	d002      	beq.n	3d6a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6e>
    3d64:	2d02      	cmp	r5, #2
    3d66:	d011      	beq.n	3d8c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x90>
    3d68:	e020      	b.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d6a:	f1bc 0f04 	cmp.w	ip, #4
    3d6e:	d205      	bcs.n	3d7c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x80>
    3d70:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d74:	f1ba 0f00 	cmp.w	sl, #0
    3d78:	d118      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d7a:	e004      	b.n	3d86 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    3d7c:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3d80:	f1ba 0f00 	cmp.w	sl, #0
    3d84:	d112      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    3d8a:	e00f      	b.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d8c:	f1bc 0f04 	cmp.w	ip, #4
    3d90:	d205      	bcs.n	3d9e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa2>
    3d92:	f8d6 a140 	ldr.w	sl, [r6, #320]	; 0x140
    3d96:	f1ba 0f00 	cmp.w	sl, #0
    3d9a:	d107      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3d9c:	e004      	b.n	3da8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xac>
    3d9e:	f8d9 a140 	ldr.w	sl, [r9, #320]	; 0x140
    3da2:	f1ba 0f00 	cmp.w	sl, #0
    3da6:	d101      	bne.n	3dac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xb0>
    3da8:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    3dac:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
    3db0:	d1d5      	bne.n	3d5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x62>
    3db2:	4c33      	ldr	r4, [pc, #204]	; (3e80 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x184>)
    3db4:	f100 0c10 	add.w	ip, r0, #16
    3db8:	fa07 fc0c 	lsl.w	ip, r7, ip
    3dbc:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3dc0:	0080      	lsls	r0, r0, #2
    3dc2:	4420      	add	r0, r4
    3dc4:	b152      	cbz	r2, 3ddc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    3dc6:	6407      	str	r7, [r0, #64]	; 0x40
    3dc8:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    3dcc:	1b8d      	subs	r5, r1, r6
    3dce:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3dd2:	42aa      	cmp	r2, r5
    3dd4:	bf98      	it	ls
    3dd6:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3dda:	d243      	bcs.n	3e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3ddc:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3de0:	2b01      	cmp	r3, #1
    3de2:	bf08      	it	eq
    3de4:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3de8:	2001      	movs	r0, #1
    3dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3dee:	b135      	cbz	r5, 3dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3df0:	4584      	cmp	ip, r0
    3df2:	d104      	bne.n	3dfe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    3df4:	f240 2171 	movw	r1, #625	; 0x271
    3df8:	206c      	movs	r0, #108	; 0x6c
    3dfa:	f000 fcb1 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3dfe:	1f00      	subs	r0, r0, #4
    3e00:	b2c0      	uxtb	r0, r0
    3e02:	2b01      	cmp	r3, #1
    3e04:	bf0c      	ite	eq
    3e06:	2401      	moveq	r4, #1
    3e08:	2400      	movne	r4, #0
    3e0a:	2803      	cmp	r0, #3
    3e0c:	d306      	bcc.n	3e1c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x120>
    3e0e:	f240 114b 	movw	r1, #331	; 0x14b
    3e12:	e000      	b.n	3e16 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x11a>
    3e14:	e02b      	b.n	3e6e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x172>
    3e16:	206c      	movs	r0, #108	; 0x6c
    3e18:	f000 fca2 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e1c:	f8df c064 	ldr.w	ip, [pc, #100]	; 3e84 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3e20:	f100 0310 	add.w	r3, r0, #16
    3e24:	fa07 f303 	lsl.w	r3, r7, r3
    3e28:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3e2c:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3e30:	0080      	lsls	r0, r0, #2
    3e32:	4460      	add	r0, ip
    3e34:	f8c0 8140 	str.w	r8, [r0, #320]	; 0x140
    3e38:	b14a      	cbz	r2, 3e4e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x152>
    3e3a:	4d13      	ldr	r5, [pc, #76]	; (3e88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18c>)
    3e3c:	682e      	ldr	r6, [r5, #0]
    3e3e:	1b8d      	subs	r5, r1, r6
    3e40:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
    3e44:	42aa      	cmp	r2, r5
    3e46:	bf98      	it	ls
    3e48:	f5b5 0f80 	cmpls.w	r5, #4194304	; 0x400000
    3e4c:	d20a      	bcs.n	3e64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>
    3e4e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3e52:	2c00      	cmp	r4, #0
    3e54:	bf18      	it	ne
    3e56:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3e5a:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3e5e:	2001      	movs	r0, #1
    3e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e64:	f8c0 8540 	str.w	r8, [r0, #1344]	; 0x540
    3e68:	2000      	movs	r0, #0
    3e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3e6e:	f240 2176 	movw	r1, #630	; 0x276
    3e72:	206c      	movs	r0, #108	; 0x6c
    3e74:	f000 fc74 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e78:	2000001f 	.word	0x2000001f
    3e7c:	2000001c 	.word	0x2000001c
    3e80:	40008000 	.word	0x40008000
    3e84:	4000b000 	.word	0x4000b000
    3e88:	4000b504 	.word	0x4000b504

00003e8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e8e:	2701      	movs	r7, #1
    3e90:	2400      	movs	r4, #0
    3e92:	2807      	cmp	r0, #7
    3e94:	d24c      	bcs.n	3f30 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    3e96:	e8df f000 	tbb	[pc, r0]
    3e9a:	0404      	.short	0x0404
    3e9c:	16160404 	.word	0x16160404
    3ea0:	0016      	.short	0x0016
    3ea2:	4a26      	ldr	r2, [pc, #152]	; (3f3c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    3ea4:	f100 0110 	add.w	r1, r0, #16
    3ea8:	fa07 f101 	lsl.w	r1, r7, r1
    3eac:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    3eb0:	0081      	lsls	r1, r0, #2
    3eb2:	4411      	add	r1, r2
    3eb4:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3eb8:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    3ebc:	4920      	ldr	r1, [pc, #128]	; (3f40 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    3ebe:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3ec2:	9000      	str	r0, [sp, #0]
    3ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ec6:	4d1f      	ldr	r5, [pc, #124]	; (3f44 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    3ec8:	1f01      	subs	r1, r0, #4
    3eca:	b2ce      	uxtb	r6, r1
    3ecc:	7829      	ldrb	r1, [r5, #0]
    3ece:	b179      	cbz	r1, 3ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ed0:	786a      	ldrb	r2, [r5, #1]
    3ed2:	4282      	cmp	r2, r0
    3ed4:	d10c      	bne.n	3ef0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x64>
    3ed6:	4a1c      	ldr	r2, [pc, #112]	; (3f48 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    3ed8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3edc:	6010      	str	r0, [r2, #0]
    3ede:	2901      	cmp	r1, #1
    3ee0:	bf08      	it	eq
    3ee2:	f7ff fd57 	bleq	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    3ee6:	702c      	strb	r4, [r5, #0]
    3ee8:	4918      	ldr	r1, [pc, #96]	; (3f4c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3eea:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3eee:	60c8      	str	r0, [r1, #12]
    3ef0:	f106 0010 	add.w	r0, r6, #16
    3ef4:	fa07 f100 	lsl.w	r1, r7, r0
    3ef8:	4815      	ldr	r0, [pc, #84]	; (3f50 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    3efa:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3efe:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3f02:	00b0      	lsls	r0, r6, #2
    3f04:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3f08:	f500 4030 	add.w	r0, r0, #45056	; 0xb000
    3f0c:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    3f10:	4a10      	ldr	r2, [pc, #64]	; (3f54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    3f12:	6812      	ldr	r2, [r2, #0]
    3f14:	1a89      	subs	r1, r1, r2
    3f16:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3f1a:	2902      	cmp	r1, #2
    3f1c:	bf24      	itt	cs
    3f1e:	f8c0 4540 	strcs.w	r4, [r0, #1344]	; 0x540
    3f22:	f8c0 4140 	strcs.w	r4, [r0, #320]	; 0x140
    3f26:	480c      	ldr	r0, [pc, #48]	; (3f58 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    3f28:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    3f2c:	9000      	str	r0, [sp, #0]
    3f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f30:	f240 21ef 	movw	r1, #751	; 0x2ef
    3f34:	206c      	movs	r0, #108	; 0x6c
    3f36:	f000 fc13 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f3a:	0000      	.short	0x0000
    3f3c:	40008000 	.word	0x40008000
    3f40:	40008140 	.word	0x40008140
    3f44:	2000001f 	.word	0x2000001f
    3f48:	4001f508 	.word	0x4001f508
    3f4c:	2000001c 	.word	0x2000001c
    3f50:	4000b000 	.word	0x4000b000
    3f54:	4000b504 	.word	0x4000b504
    3f58:	4000b140 	.word	0x4000b140

00003f5c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    3f5c:	491e      	ldr	r1, [pc, #120]	; (3fd8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x7c>)
    3f5e:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3f62:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3f66:	481d      	ldr	r0, [pc, #116]	; (3fdc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x80>)
    3f68:	4a1d      	ldr	r2, [pc, #116]	; (3fe0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    3f6a:	f890 c000 	ldrb.w	ip, [r0]
    3f6e:	2000      	movs	r0, #0
    3f70:	f1bc 0f00 	cmp.w	ip, #0
    3f74:	d00a      	beq.n	3f8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x30>
    3f76:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    3f7a:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f7e:	6010      	str	r0, [r2, #0]
    3f80:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f84:	f8d1 1148 	ldr.w	r1, [r1, #328]	; 0x148
    3f88:	b981      	cbnz	r1, 3fac <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    3f8a:	e009      	b.n	3fa0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x44>
    3f8c:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3f90:	4b14      	ldr	r3, [pc, #80]	; (3fe4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    3f92:	6018      	str	r0, [r3, #0]
    3f94:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3f98:	6010      	str	r0, [r2, #0]
    3f9a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3f9e:	e7f1      	b.n	3f84 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    3fa0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3fa4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3fa8:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    3fac:	490e      	ldr	r1, [pc, #56]	; (3fe8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    3fae:	f04f 32ff 	mov.w	r2, #4294967295
    3fb2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3fb6:	4a0d      	ldr	r2, [pc, #52]	; (3fec <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3fb8:	6010      	str	r0, [r2, #0]
    3fba:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3fbe:	1d12      	adds	r2, r2, #4
    3fc0:	6010      	str	r0, [r2, #0]
    3fc2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3fc6:	1d12      	adds	r2, r2, #4
    3fc8:	6010      	str	r0, [r2, #0]
    3fca:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3fce:	1d12      	adds	r2, r2, #4
    3fd0:	6010      	str	r0, [r2, #0]
    3fd2:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    3fd6:	4770      	bx	lr
    3fd8:	4000b000 	.word	0x4000b000
    3fdc:	2000001f 	.word	0x2000001f
    3fe0:	4000b544 	.word	0x4000b544
    3fe4:	4000b540 	.word	0x4000b540
    3fe8:	40008000 	.word	0x40008000
    3fec:	40008540 	.word	0x40008540

00003ff0 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3ff0:	4808      	ldr	r0, [pc, #32]	; (4014 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3ff2:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3ff6:	2800      	cmp	r0, #0
    3ff8:	bfb8      	it	lt
    3ffa:	4770      	bxlt	lr
    3ffc:	f000 011f 	and.w	r1, r0, #31
    4000:	2201      	movs	r2, #1
    4002:	fa02 f101 	lsl.w	r1, r2, r1
    4006:	0940      	lsrs	r0, r0, #5
    4008:	0080      	lsls	r0, r0, #2
    400a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    400e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4012:	4770      	bx	lr
    4014:	2000001c 	.word	0x2000001c

00004018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    4018:	b510      	push	{r4, lr}
    401a:	2807      	cmp	r0, #7
    401c:	d20d      	bcs.n	403a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    401e:	e8df f000 	tbb	[pc, r0]
    4022:	0404      	.short	0x0404
    4024:	06060404 	.word	0x06060404
    4028:	0006      	.short	0x0006
    402a:	4906      	ldr	r1, [pc, #24]	; (4044 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    402c:	e002      	b.n	4034 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    402e:	1f00      	subs	r0, r0, #4
    4030:	4905      	ldr	r1, [pc, #20]	; (4048 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    4032:	b2c0      	uxtb	r0, r0
    4034:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    4038:	bd10      	pop	{r4, pc}
    403a:	f240 219a 	movw	r1, #666	; 0x29a
    403e:	206c      	movs	r0, #108	; 0x6c
    4040:	f000 fb8e 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4044:	40008140 	.word	0x40008140
    4048:	4000b140 	.word	0x4000b140

0000404c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    404c:	b570      	push	{r4, r5, r6, lr}
    404e:	4819      	ldr	r0, [pc, #100]	; (40b4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x68>)
    4050:	2400      	movs	r4, #0
    4052:	2104      	movs	r1, #4
    4054:	7004      	strb	r4, [r0, #0]
    4056:	1ec0      	subs	r0, r0, #3
    4058:	7001      	strb	r1, [r0, #0]
    405a:	0589      	lsls	r1, r1, #22
    405c:	60c1      	str	r1, [r0, #12]
    405e:	f7ff fc99 	bl	3994 <MPSL_IRQ_TIMER0_Handler+0xf8>
    4062:	2501      	movs	r5, #1
    4064:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    4068:	02eb      	lsls	r3, r5, #11
    406a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    406e:	f3bf 8f4f 	dsb	sy
    4072:	f3bf 8f6f 	isb	sy
    4076:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    407a:	4a0f      	ldr	r2, [pc, #60]	; (40b8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x6c>)
    407c:	6055      	str	r5, [r2, #4]
    407e:	6095      	str	r5, [r2, #8]
    4080:	480e      	ldr	r0, [pc, #56]	; (40bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    4082:	6801      	ldr	r1, [r0, #0]
    4084:	2900      	cmp	r1, #0
    4086:	d1fc      	bne.n	4082 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x36>
    4088:	1e48      	subs	r0, r1, #1
    408a:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    408e:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    4092:	480b      	ldr	r0, [pc, #44]	; (40c0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    4094:	6004      	str	r4, [r0, #0]
    4096:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    409a:	1d00      	adds	r0, r0, #4
    409c:	6004      	str	r4, [r0, #0]
    409e:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    40a2:	1d00      	adds	r0, r0, #4
    40a4:	6004      	str	r4, [r0, #0]
    40a6:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    40aa:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    40ae:	6015      	str	r5, [r2, #0]
    40b0:	bd70      	pop	{r4, r5, r6, pc}
    40b2:	0000      	.short	0x0000
    40b4:	2000001f 	.word	0x2000001f
    40b8:	4000b000 	.word	0x4000b000
    40bc:	4000b504 	.word	0x4000b504
    40c0:	4000b540 	.word	0x4000b540

000040c4 <MPSL_IRQ_CLOCK_Handler>:
    40c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40c8:	4c16      	ldr	r4, [pc, #88]	; (4124 <MPSL_IRQ_CLOCK_Handler+0x60>)
    40ca:	7a60      	ldrb	r0, [r4, #9]
    40cc:	2800      	cmp	r0, #0
    40ce:	d027      	beq.n	4120 <MPSL_IRQ_CLOCK_Handler+0x5c>
    40d0:	f44f 7180 	mov.w	r1, #256	; 0x100
    40d4:	058d      	lsls	r5, r1, #22
    40d6:	4628      	mov	r0, r5
    40d8:	f009 f8f7 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40dc:	4680      	mov	r8, r0
    40de:	f44f 7182 	mov.w	r1, #260	; 0x104
    40e2:	4628      	mov	r0, r5
    40e4:	f009 f8f1 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    40e8:	2600      	movs	r6, #0
    40ea:	4607      	mov	r7, r0
    40ec:	f1b8 0f00 	cmp.w	r8, #0
    40f0:	d009      	beq.n	4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    40f2:	2001      	movs	r0, #1
    40f4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    40f8:	7920      	ldrb	r0, [r4, #4]
    40fa:	b120      	cbz	r0, 4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    40fc:	7126      	strb	r6, [r4, #4]
    40fe:	69e0      	ldr	r0, [r4, #28]
    4100:	b108      	cbz	r0, 4106 <MPSL_IRQ_CLOCK_Handler+0x42>
    4102:	4780      	blx	r0
    4104:	61e6      	str	r6, [r4, #28]
    4106:	b137      	cbz	r7, 4116 <MPSL_IRQ_CLOCK_Handler+0x52>
    4108:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    410c:	2002      	movs	r0, #2
    410e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4112:	f000 fa6d 	bl	45f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    4116:	4640      	mov	r0, r8
    4118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    411c:	f000 b85a 	b.w	41d4 <MPSL_IRQ_CLOCK_Handler+0x110>
    4120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4124:	2000002c 	.word	0x2000002c
    4128:	b510      	push	{r4, lr}
    412a:	f009 f978 	bl	d41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    412e:	b930      	cbnz	r0, 413e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4130:	f009 f996 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4134:	b918      	cbnz	r0, 413e <MPSL_IRQ_CLOCK_Handler+0x7a>
    4136:	f009 f9c9 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    413a:	2800      	cmp	r0, #0
    413c:	d002      	beq.n	4144 <MPSL_IRQ_CLOCK_Handler+0x80>
    413e:	4902      	ldr	r1, [pc, #8]	; (4148 <MPSL_IRQ_CLOCK_Handler+0x84>)
    4140:	2002      	movs	r0, #2
    4142:	6008      	str	r0, [r1, #0]
    4144:	bd10      	pop	{r4, pc}
    4146:	0000      	.short	0x0000
    4148:	40000c34 	.word	0x40000c34
    414c:	b570      	push	{r4, r5, r6, lr}
    414e:	f000 f987 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    4152:	f000 faa1 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4156:	4c09      	ldr	r4, [pc, #36]	; (417c <MPSL_IRQ_CLOCK_Handler+0xb8>)
    4158:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    415c:	b130      	cbz	r0, 416c <MPSL_IRQ_CLOCK_Handler+0xa8>
    415e:	f7ff ffe3 	bl	4128 <MPSL_IRQ_CLOCK_Handler+0x64>
    4162:	2001      	movs	r0, #1
    4164:	6128      	str	r0, [r5, #16]
    4166:	2004      	movs	r0, #4
    4168:	72a0      	strb	r0, [r4, #10]
    416a:	e004      	b.n	4176 <MPSL_IRQ_CLOCK_Handler+0xb2>
    416c:	2003      	movs	r0, #3
    416e:	72a0      	strb	r0, [r4, #10]
    4170:	2001      	movs	r0, #1
    4172:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4176:	2000      	movs	r0, #0
    4178:	71e0      	strb	r0, [r4, #7]
    417a:	bd70      	pop	{r4, r5, r6, pc}
    417c:	2000002c 	.word	0x2000002c
    4180:	b570      	push	{r4, r5, r6, lr}
    4182:	4c13      	ldr	r4, [pc, #76]	; (41d0 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    4184:	79a0      	ldrb	r0, [r4, #6]
    4186:	b1f0      	cbz	r0, 41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    4188:	2801      	cmp	r0, #1
    418a:	d003      	beq.n	4194 <MPSL_IRQ_CLOCK_Handler+0xd0>
    418c:	79e1      	ldrb	r1, [r4, #7]
    418e:	1e40      	subs	r0, r0, #1
    4190:	4281      	cmp	r1, r0
    4192:	da18      	bge.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    4194:	f000 fa80 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4198:	4605      	mov	r5, r0
    419a:	f000 fb51 	bl	4840 <mpsl_temperature_get>
    419e:	79a1      	ldrb	r1, [r4, #6]
    41a0:	2901      	cmp	r1, #1
    41a2:	d902      	bls.n	41aa <MPSL_IRQ_CLOCK_Handler+0xe6>
    41a4:	79e1      	ldrb	r1, [r4, #7]
    41a6:	1c49      	adds	r1, r1, #1
    41a8:	71e1      	strb	r1, [r4, #7]
    41aa:	b10d      	cbz	r5, 41b0 <MPSL_IRQ_CLOCK_Handler+0xec>
    41ac:	6961      	ldr	r1, [r4, #20]
    41ae:	e000      	b.n	41b2 <MPSL_IRQ_CLOCK_Handler+0xee>
    41b0:	6921      	ldr	r1, [r4, #16]
    41b2:	1a41      	subs	r1, r0, r1
    41b4:	2902      	cmp	r1, #2
    41b6:	da02      	bge.n	41be <MPSL_IRQ_CLOCK_Handler+0xfa>
    41b8:	f111 0f02 	cmn.w	r1, #2
    41bc:	dc07      	bgt.n	41ce <MPSL_IRQ_CLOCK_Handler+0x10a>
    41be:	b10d      	cbz	r5, 41c4 <MPSL_IRQ_CLOCK_Handler+0x100>
    41c0:	6160      	str	r0, [r4, #20]
    41c2:	e000      	b.n	41c6 <MPSL_IRQ_CLOCK_Handler+0x102>
    41c4:	6120      	str	r0, [r4, #16]
    41c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    41ca:	f7ff bfbf 	b.w	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    41ce:	bd70      	pop	{r4, r5, r6, pc}
    41d0:	2000002c 	.word	0x2000002c
    41d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    41d8:	4606      	mov	r6, r0
    41da:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    41de:	f44f 7186 	mov.w	r1, #268	; 0x10c
    41e2:	4628      	mov	r0, r5
    41e4:	f009 f871 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41e8:	4680      	mov	r8, r0
    41ea:	f44f 7188 	mov.w	r1, #272	; 0x110
    41ee:	4628      	mov	r0, r5
    41f0:	f009 f86b 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    41f4:	4c27      	ldr	r4, [pc, #156]	; (4294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    41f6:	4682      	mov	sl, r0
    41f8:	7827      	ldrb	r7, [r4, #0]
    41fa:	f104 0008 	add.w	r0, r4, #8
    41fe:	f009 f8d8 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4202:	b110      	cbz	r0, 420a <MPSL_IRQ_CLOCK_Handler+0x146>
    4204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4208:	e016      	b.n	4238 <MPSL_IRQ_CLOCK_Handler+0x174>
    420a:	f04f 0901 	mov.w	r9, #1
    420e:	b146      	cbz	r6, 4222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4210:	7aa0      	ldrb	r0, [r4, #10]
    4212:	2803      	cmp	r0, #3
    4214:	d105      	bne.n	4222 <MPSL_IRQ_CLOCK_Handler+0x15e>
    4216:	2004      	movs	r0, #4
    4218:	72a0      	strb	r0, [r4, #10]
    421a:	f7ff ff85 	bl	4128 <MPSL_IRQ_CLOCK_Handler+0x64>
    421e:	f8c5 9010 	str.w	r9, [r5, #16]
    4222:	2600      	movs	r6, #0
    4224:	f1b8 0f00 	cmp.w	r8, #0
    4228:	d018      	beq.n	425c <MPSL_IRQ_CLOCK_Handler+0x198>
    422a:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    422e:	7aa0      	ldrb	r0, [r4, #10]
    4230:	2804      	cmp	r0, #4
    4232:	d004      	beq.n	423e <MPSL_IRQ_CLOCK_Handler+0x17a>
    4234:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    4238:	206d      	movs	r0, #109	; 0x6d
    423a:	f000 fa91 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    423e:	f009 f8ee 	bl	d41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    4242:	b928      	cbnz	r0, 4250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    4244:	f009 f90c 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4248:	b910      	cbnz	r0, 4250 <MPSL_IRQ_CLOCK_Handler+0x18c>
    424a:	f009 f93f 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    424e:	b108      	cbz	r0, 4254 <MPSL_IRQ_CLOCK_Handler+0x190>
    4250:	4811      	ldr	r0, [pc, #68]	; (4298 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    4252:	6006      	str	r6, [r0, #0]
    4254:	2002      	movs	r0, #2
    4256:	72a0      	strb	r0, [r4, #10]
    4258:	f000 f8e6 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    425c:	f1ba 0f00 	cmp.w	sl, #0
    4260:	d008      	beq.n	4274 <MPSL_IRQ_CLOCK_Handler+0x1b0>
    4262:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    4266:	7aa0      	ldrb	r0, [r4, #10]
    4268:	2802      	cmp	r0, #2
    426a:	d101      	bne.n	4270 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    426c:	f7ff ff88 	bl	4180 <MPSL_IRQ_CLOCK_Handler+0xbc>
    4270:	f8c5 9014 	str.w	r9, [r5, #20]
    4274:	b13f      	cbz	r7, 4286 <MPSL_IRQ_CLOCK_Handler+0x1c2>
    4276:	7026      	strb	r6, [r4, #0]
    4278:	7aa0      	ldrb	r0, [r4, #10]
    427a:	2802      	cmp	r0, #2
    427c:	d101      	bne.n	4282 <MPSL_IRQ_CLOCK_Handler+0x1be>
    427e:	f7ff ff65 	bl	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    4282:	f000 f8d1 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4286:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    428a:	4802      	ldr	r0, [pc, #8]	; (4294 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    428c:	3008      	adds	r0, #8
    428e:	f009 b8a7 	b.w	d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    4292:	0000      	.short	0x0000
    4294:	2000002c 	.word	0x2000002c
    4298:	40000c34 	.word	0x40000c34
    429c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    42a0:	4c5c      	ldr	r4, [pc, #368]	; (4414 <MPSL_IRQ_CLOCK_Handler+0x350>)
    42a2:	f04f 0800 	mov.w	r8, #0
    42a6:	4606      	mov	r6, r0
    42a8:	f8c4 8018 	str.w	r8, [r4, #24]
    42ac:	7843      	ldrb	r3, [r0, #1]
    42ae:	7882      	ldrb	r2, [r0, #2]
    42b0:	7800      	ldrb	r0, [r0, #0]
    42b2:	72e0      	strb	r0, [r4, #11]
    42b4:	7163      	strb	r3, [r4, #5]
    42b6:	2701      	movs	r7, #1
    42b8:	71a2      	strb	r2, [r4, #6]
    42ba:	07bd      	lsls	r5, r7, #30
    42bc:	f884 8007 	strb.w	r8, [r4, #7]
    42c0:	2805      	cmp	r0, #5
    42c2:	d224      	bcs.n	430e <MPSL_IRQ_CLOCK_Handler+0x24a>
    42c4:	e8df f000 	tbb	[pc, r0]
    42c8:	1f05030f 	.word	0x1f05030f
    42cc:	0021      	.short	0x0021
    42ce:	61a7      	str	r7, [r4, #24]
    42d0:	e009      	b.n	42e6 <MPSL_IRQ_CLOCK_Handler+0x222>
    42d2:	f000 f8c5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    42d6:	2101      	movs	r1, #1
    42d8:	4628      	mov	r0, r5
    42da:	f008 fffb 	bl	d2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    42de:	2800      	cmp	r0, #0
    42e0:	d0f9      	beq.n	42d6 <MPSL_IRQ_CLOCK_Handler+0x212>
    42e2:	2002      	movs	r0, #2
    42e4:	61a0      	str	r0, [r4, #24]
    42e6:	f009 f821 	bl	d32c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    42ea:	b1b0      	cbz	r0, 431a <MPSL_IRQ_CLOCK_Handler+0x256>
    42ec:	f000 f9ee 	bl	46cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    42f0:	7e21      	ldrb	r1, [r4, #24]
    42f2:	f001 0103 	and.w	r1, r1, #3
    42f6:	4288      	cmp	r0, r1
    42f8:	d10f      	bne.n	431a <MPSL_IRQ_CLOCK_Handler+0x256>
    42fa:	79b0      	ldrb	r0, [r6, #6]
    42fc:	b150      	cbz	r0, 4314 <MPSL_IRQ_CLOCK_Handler+0x250>
    42fe:	2002      	movs	r0, #2
    4300:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4304:	e06a      	b.n	43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    4306:	4844      	ldr	r0, [pc, #272]	; (4418 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4308:	e7ec      	b.n	42e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    430a:	4844      	ldr	r0, [pc, #272]	; (441c <MPSL_IRQ_CLOCK_Handler+0x358>)
    430c:	e7ea      	b.n	42e4 <MPSL_IRQ_CLOCK_Handler+0x220>
    430e:	f44f 714c 	mov.w	r1, #816	; 0x330
    4312:	e049      	b.n	43a8 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    4314:	f000 f9ae 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4318:	e060      	b.n	43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    431a:	60ef      	str	r7, [r5, #12]
    431c:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4320:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4324:	69a0      	ldr	r0, [r4, #24]
    4326:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    432a:	f009 f864 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    432e:	b940      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4330:	f009 f86b 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4334:	b928      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    4336:	f009 f87f 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    433a:	b910      	cbnz	r0, 4342 <MPSL_IRQ_CLOCK_Handler+0x27e>
    433c:	f009 f890 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4340:	b138      	cbz	r0, 4352 <MPSL_IRQ_CLOCK_Handler+0x28e>
    4342:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    4346:	4836      	ldr	r0, [pc, #216]	; (4420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    4348:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    434c:	f3c1 3142 	ubfx	r1, r1, #13, #3
    4350:	6001      	str	r1, [r0, #0]
    4352:	f009 f850 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4356:	b940      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4358:	f009 f857 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    435c:	b928      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    435e:	f009 f86b 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4362:	b910      	cbnz	r0, 436a <MPSL_IRQ_CLOCK_Handler+0x2a6>
    4364:	f009 f87c 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4368:	b110      	cbz	r0, 4370 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    436a:	482d      	ldr	r0, [pc, #180]	; (4420 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    436c:	3010      	adds	r0, #16
    436e:	6007      	str	r7, [r0, #0]
    4370:	60af      	str	r7, [r5, #8]
    4372:	2002      	movs	r0, #2
    4374:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    4378:	79b0      	ldrb	r0, [r6, #6]
    437a:	bb78      	cbnz	r0, 43dc <MPSL_IRQ_CLOCK_Handler+0x318>
    437c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    4380:	f010 0f02 	tst.w	r0, #2
    4384:	d00e      	beq.n	43a4 <MPSL_IRQ_CLOCK_Handler+0x2e0>
    4386:	f8df 909c 	ldr.w	r9, [pc, #156]	; 4424 <MPSL_IRQ_CLOCK_Handler+0x360>
    438a:	f8d9 1000 	ldr.w	r1, [r9]
    438e:	43c9      	mvns	r1, r1
    4390:	f341 1700 	sbfx	r7, r1, #4, #1
    4394:	f8d9 1000 	ldr.w	r1, [r9]
    4398:	f041 0110 	orr.w	r1, r1, #16
    439c:	f8c9 1000 	str.w	r1, [r9]
    43a0:	1c7f      	adds	r7, r7, #1
    43a2:	e007      	b.n	43b4 <MPSL_IRQ_CLOCK_Handler+0x2f0>
    43a4:	f240 21f1 	movw	r1, #753	; 0x2f1
    43a8:	206d      	movs	r0, #109	; 0x6d
    43aa:	f000 f9d9 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43ae:	bf00      	nop
    43b0:	f000 fafc 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    43b4:	4651      	mov	r1, sl
    43b6:	4628      	mov	r0, r5
    43b8:	f008 ff87 	bl	d2ca <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    43bc:	2800      	cmp	r0, #0
    43be:	d0f7      	beq.n	43b0 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    43c0:	f000 f958 	bl	4674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    43c4:	b92f      	cbnz	r7, 43d2 <MPSL_IRQ_CLOCK_Handler+0x30e>
    43c6:	f8d9 1000 	ldr.w	r1, [r9]
    43ca:	f021 0110 	bic.w	r1, r1, #16
    43ce:	f8c9 1000 	str.w	r1, [r9]
    43d2:	2002      	movs	r0, #2
    43d4:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    43d8:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    43dc:	79a0      	ldrb	r0, [r4, #6]
    43de:	b170      	cbz	r0, 43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43e0:	7830      	ldrb	r0, [r6, #0]
    43e2:	b960      	cbnz	r0, 43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43e4:	f000 f958 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    43e8:	4606      	mov	r6, r0
    43ea:	f000 fa29 	bl	4840 <mpsl_temperature_get>
    43ee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    43f2:	b116      	cbz	r6, 43fa <MPSL_IRQ_CLOCK_Handler+0x336>
    43f4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    43f8:	e001      	b.n	43fe <MPSL_IRQ_CLOCK_Handler+0x33a>
    43fa:	e9c4 0204 	strd	r0, r2, [r4, #16]
    43fe:	2101      	movs	r1, #1
    4400:	4628      	mov	r0, r5
    4402:	f008 ff67 	bl	d2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4406:	b108      	cbz	r0, 440c <MPSL_IRQ_CLOCK_Handler+0x348>
    4408:	f000 f940 	bl	468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    440c:	f884 800a 	strb.w	r8, [r4, #10]
    4410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4414:	2000002c 	.word	0x2000002c
    4418:	00020001 	.word	0x00020001
    441c:	00030001 	.word	0x00030001
    4420:	4000053c 	.word	0x4000053c
    4424:	e000ed10 	.word	0xe000ed10

00004428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    4428:	b510      	push	{r4, lr}
    442a:	f3ef 8410 	mrs	r4, PRIMASK
    442e:	b672      	cpsid	i
    4430:	480a      	ldr	r0, [pc, #40]	; (445c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    4432:	7841      	ldrb	r1, [r0, #1]
    4434:	b129      	cbz	r1, 4442 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    4436:	7841      	ldrb	r1, [r0, #1]
    4438:	1e49      	subs	r1, r1, #1
    443a:	7041      	strb	r1, [r0, #1]
    443c:	7841      	ldrb	r1, [r0, #1]
    443e:	b129      	cbz	r1, 444c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    4440:	e008      	b.n	4454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4442:	f240 110d 	movw	r1, #269	; 0x10d
    4446:	206d      	movs	r0, #109	; 0x6d
    4448:	f000 f98a 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    444c:	7880      	ldrb	r0, [r0, #2]
    444e:	b908      	cbnz	r0, 4454 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    4450:	f000 f930 	bl	46b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4454:	2c00      	cmp	r4, #0
    4456:	d100      	bne.n	445a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    4458:	b662      	cpsie	i
    445a:	bd10      	pop	{r4, pc}
    445c:	2000002c 	.word	0x2000002c

00004460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    4460:	b510      	push	{r4, lr}
    4462:	f3ef 8410 	mrs	r4, PRIMASK
    4466:	b672      	cpsid	i
    4468:	4806      	ldr	r0, [pc, #24]	; (4484 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    446a:	7841      	ldrb	r1, [r0, #1]
    446c:	1c49      	adds	r1, r1, #1
    446e:	7041      	strb	r1, [r0, #1]
    4470:	7840      	ldrb	r0, [r0, #1]
    4472:	2801      	cmp	r0, #1
    4474:	d101      	bne.n	447a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    4476:	f008 ff44 	bl	d302 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    447a:	2c00      	cmp	r4, #0
    447c:	d100      	bne.n	4480 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    447e:	b662      	cpsie	i
    4480:	bd10      	pop	{r4, pc}
    4482:	0000      	.short	0x0000
    4484:	2000002c 	.word	0x2000002c

00004488 <mpsl_clock_hfclk_release>:
    4488:	4805      	ldr	r0, [pc, #20]	; (44a0 <mpsl_clock_hfclk_release+0x18>)
    448a:	b510      	push	{r4, lr}
    448c:	78c1      	ldrb	r1, [r0, #3]
    448e:	b121      	cbz	r1, 449a <mpsl_clock_hfclk_release+0x12>
    4490:	2100      	movs	r1, #0
    4492:	7101      	strb	r1, [r0, #4]
    4494:	70c1      	strb	r1, [r0, #3]
    4496:	f7ff ffc7 	bl	4428 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    449a:	2000      	movs	r0, #0
    449c:	bd10      	pop	{r4, pc}
    449e:	0000      	.short	0x0000
    44a0:	2000002c 	.word	0x2000002c

000044a4 <mpsl_clock_hfclk_request>:
    44a4:	b570      	push	{r4, r5, r6, lr}
    44a6:	4c0c      	ldr	r4, [pc, #48]	; (44d8 <mpsl_clock_hfclk_request+0x34>)
    44a8:	78e1      	ldrb	r1, [r4, #3]
    44aa:	b961      	cbnz	r1, 44c6 <mpsl_clock_hfclk_request+0x22>
    44ac:	2501      	movs	r5, #1
    44ae:	70e5      	strb	r5, [r4, #3]
    44b0:	61e0      	str	r0, [r4, #28]
    44b2:	f7ff ffd5 	bl	4460 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    44b6:	f000 f8ef 	bl	4698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    44ba:	b130      	cbz	r0, 44ca <mpsl_clock_hfclk_request+0x26>
    44bc:	69e0      	ldr	r0, [r4, #28]
    44be:	b110      	cbz	r0, 44c6 <mpsl_clock_hfclk_request+0x22>
    44c0:	4780      	blx	r0
    44c2:	2000      	movs	r0, #0
    44c4:	61e0      	str	r0, [r4, #28]
    44c6:	2000      	movs	r0, #0
    44c8:	bd70      	pop	{r4, r5, r6, pc}
    44ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    44ce:	7125      	strb	r5, [r4, #4]
    44d0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    44d4:	e7f7      	b.n	44c6 <mpsl_clock_hfclk_request+0x22>
    44d6:	0000      	.short	0x0000
    44d8:	2000002c 	.word	0x2000002c

000044dc <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    44dc:	f3ef 8010 	mrs	r0, PRIMASK
    44e0:	b672      	cpsid	i
    44e2:	4904      	ldr	r1, [pc, #16]	; (44f4 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    44e4:	788a      	ldrb	r2, [r1, #2]
    44e6:	1c52      	adds	r2, r2, #1
    44e8:	708a      	strb	r2, [r1, #2]
    44ea:	2800      	cmp	r0, #0
    44ec:	d100      	bne.n	44f0 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    44ee:	b662      	cpsie	i
    44f0:	4770      	bx	lr
    44f2:	0000      	.short	0x0000
    44f4:	2000002c 	.word	0x2000002c

000044f8 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    44f8:	b510      	push	{r4, lr}
    44fa:	f3ef 8410 	mrs	r4, PRIMASK
    44fe:	b672      	cpsid	i
    4500:	480a      	ldr	r0, [pc, #40]	; (452c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    4502:	7881      	ldrb	r1, [r0, #2]
    4504:	b129      	cbz	r1, 4512 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    4506:	7881      	ldrb	r1, [r0, #2]
    4508:	1e49      	subs	r1, r1, #1
    450a:	7081      	strb	r1, [r0, #2]
    450c:	7841      	ldrb	r1, [r0, #1]
    450e:	b129      	cbz	r1, 451c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4510:	e008      	b.n	4524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4512:	f240 1125 	movw	r1, #293	; 0x125
    4516:	206d      	movs	r0, #109	; 0x6d
    4518:	f000 f922 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    451c:	7880      	ldrb	r0, [r0, #2]
    451e:	b908      	cbnz	r0, 4524 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4520:	f000 f8c8 	bl	46b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    4524:	2c00      	cmp	r4, #0
    4526:	d100      	bne.n	452a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    4528:	b662      	cpsie	i
    452a:	bd10      	pop	{r4, pc}
    452c:	2000002c 	.word	0x2000002c

00004530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    4530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4534:	0004      	movs	r4, r0
    4536:	f06f 0015 	mvn.w	r0, #21
    453a:	d03c      	beq.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    453c:	7821      	ldrb	r1, [r4, #0]
    453e:	2904      	cmp	r1, #4
    4540:	d839      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4542:	2900      	cmp	r1, #0
    4544:	7861      	ldrb	r1, [r4, #1]
    4546:	d038      	beq.n	45ba <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    4548:	2900      	cmp	r1, #0
    454a:	d134      	bne.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    454c:	78a1      	ldrb	r1, [r4, #2]
    454e:	2900      	cmp	r1, #0
    4550:	d131      	bne.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4552:	2000      	movs	r0, #0
    4554:	f008 fe84 	bl	d260 <MPSL_IRQ_RADIO_Handler+0x1e>
    4558:	2000      	movs	r0, #0
    455a:	f008 fe74 	bl	d246 <MPSL_IRQ_RADIO_Handler+0x4>
    455e:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    4562:	f04f 31ff 	mov.w	r1, #4294967295
    4566:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    456a:	2600      	movs	r6, #0
    456c:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    4570:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    4574:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    4578:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    457c:	4f14      	ldr	r7, [pc, #80]	; (45d0 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    457e:	707e      	strb	r6, [r7, #1]
    4580:	88a0      	ldrh	r0, [r4, #4]
    4582:	81b8      	strh	r0, [r7, #12]
    4584:	f008 feb4 	bl	d2f0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4588:	2501      	movs	r5, #1
    458a:	b108      	cbz	r0, 4590 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    458c:	70fd      	strb	r5, [r7, #3]
    458e:	707d      	strb	r5, [r7, #1]
    4590:	2101      	movs	r1, #1
    4592:	4640      	mov	r0, r8
    4594:	f008 fe9e 	bl	d2d4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4598:	b108      	cbz	r0, 459e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    459a:	f000 f877 	bl	468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    459e:	4620      	mov	r0, r4
    45a0:	f7ff fe7c 	bl	429c <MPSL_IRQ_CLOCK_Handler+0x1d8>
    45a4:	727d      	strb	r5, [r7, #9]
    45a6:	2000      	movs	r0, #0
    45a8:	f008 fe4d 	bl	d246 <MPSL_IRQ_RADIO_Handler+0x4>
    45ac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    45b0:	4630      	mov	r0, r6
    45b2:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    45b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    45ba:	2900      	cmp	r1, #0
    45bc:	d0fb      	beq.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45be:	2920      	cmp	r1, #32
    45c0:	d8f9      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45c2:	78a1      	ldrb	r1, [r4, #2]
    45c4:	2921      	cmp	r1, #33	; 0x21
    45c6:	d8f6      	bhi.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45c8:	2901      	cmp	r1, #1
    45ca:	d1c2      	bne.n	4552 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    45cc:	e7f3      	b.n	45b6 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    45ce:	0000      	.short	0x0000
    45d0:	2000002c 	.word	0x2000002c

000045d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    45d4:	4801      	ldr	r0, [pc, #4]	; (45dc <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    45d6:	8980      	ldrh	r0, [r0, #12]
    45d8:	4770      	bx	lr
    45da:	0000      	.short	0x0000
    45dc:	2000002c 	.word	0x2000002c

000045e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    45e0:	4802      	ldr	r0, [pc, #8]	; (45ec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    45e2:	7a80      	ldrb	r0, [r0, #10]
    45e4:	2800      	cmp	r0, #0
    45e6:	d000      	beq.n	45ea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    45e8:	2001      	movs	r0, #1
    45ea:	4770      	bx	lr
    45ec:	2000002c 	.word	0x2000002c

000045f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    45f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45f2:	4d1f      	ldr	r5, [pc, #124]	; (4670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    45f4:	7ae8      	ldrb	r0, [r5, #11]
    45f6:	2800      	cmp	r0, #0
    45f8:	d10f      	bne.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    45fa:	7e28      	ldrb	r0, [r5, #24]
    45fc:	f000 0003 	and.w	r0, r0, #3
    4600:	f008 fe84 	bl	d30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4604:	2800      	cmp	r0, #0
    4606:	d008      	beq.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4608:	f3ef 8110 	mrs	r1, PRIMASK
    460c:	b672      	cpsid	i
    460e:	f7ff ffe7 	bl	45e0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4612:	b118      	cbz	r0, 461c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    4614:	2900      	cmp	r1, #0
    4616:	d100      	bne.n	461a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4618:	b662      	cpsie	i
    461a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    461c:	2601      	movs	r6, #1
    461e:	72ae      	strb	r6, [r5, #10]
    4620:	b901      	cbnz	r1, 4624 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    4622:	b662      	cpsie	i
    4624:	2018      	movs	r0, #24
    4626:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    462a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    462e:	61a6      	str	r6, [r4, #24]
    4630:	f44f 7020 	mov.w	r0, #640	; 0x280
    4634:	f8ad 0000 	strh.w	r0, [sp]
    4638:	f8bd 0000 	ldrh.w	r0, [sp]
    463c:	1e41      	subs	r1, r0, #1
    463e:	f8ad 1000 	strh.w	r1, [sp]
    4642:	d2f9      	bcs.n	4638 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    4644:	2700      	movs	r7, #0
    4646:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    464a:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    464e:	4808      	ldr	r0, [pc, #32]	; (4670 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    4650:	3008      	adds	r0, #8
    4652:	f008 fec1 	bl	d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4656:	702f      	strb	r7, [r5, #0]
    4658:	f7ff fd78 	bl	414c <MPSL_IRQ_CLOCK_Handler+0x88>
    465c:	6166      	str	r6, [r4, #20]
    465e:	7968      	ldrb	r0, [r5, #5]
    4660:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    4664:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    4668:	2018      	movs	r0, #24
    466a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    466e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4670:	2000002c 	.word	0x2000002c

00004674 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    4674:	b510      	push	{r4, lr}
    4676:	4c04      	ldr	r4, [pc, #16]	; (4688 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    4678:	7e20      	ldrb	r0, [r4, #24]
    467a:	f000 0003 	and.w	r0, r0, #3
    467e:	f008 fe45 	bl	d30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    4682:	2800      	cmp	r0, #0
    4684:	d0f8      	beq.n	4678 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    4686:	bd10      	pop	{r4, pc}
    4688:	2000002c 	.word	0x2000002c

0000468c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    468c:	4901      	ldr	r1, [pc, #4]	; (4694 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    468e:	2001      	movs	r0, #1
    4690:	7008      	strb	r0, [r1, #0]
    4692:	4770      	bx	lr
    4694:	2000027c 	.word	0x2000027c

00004698 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4698:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    469c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    46a0:	b918      	cbnz	r0, 46aa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    46a2:	4803      	ldr	r0, [pc, #12]	; (46b0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    46a4:	7800      	ldrb	r0, [r0, #0]
    46a6:	2800      	cmp	r0, #0
    46a8:	d000      	beq.n	46ac <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    46aa:	2001      	movs	r0, #1
    46ac:	4770      	bx	lr
    46ae:	0000      	.short	0x0000
    46b0:	2000027c 	.word	0x2000027c

000046b4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    46b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    46b8:	2101      	movs	r1, #1
    46ba:	6041      	str	r1, [r0, #4]
    46bc:	2100      	movs	r1, #0
    46be:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    46c2:	4801      	ldr	r0, [pc, #4]	; (46c8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    46c4:	7001      	strb	r1, [r0, #0]
    46c6:	4770      	bx	lr
    46c8:	2000027c 	.word	0x2000027c

000046cc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    46cc:	4802      	ldr	r0, [pc, #8]	; (46d8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    46ce:	6800      	ldr	r0, [r0, #0]
    46d0:	f000 0003 	and.w	r0, r0, #3
    46d4:	4770      	bx	lr
    46d6:	0000      	.short	0x0000
    46d8:	4000041c 	.word	0x4000041c
    46dc:	b510      	push	{r4, lr}
    46de:	b131      	cbz	r1, 46ee <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    46e0:	2901      	cmp	r1, #1
    46e2:	d007      	beq.n	46f4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    46e4:	f240 3102 	movw	r1, #770	; 0x302
    46e8:	a005      	add	r0, pc, #20	; (adr r0, 4700 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    46ea:	f000 f80f 	bl	470c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    46ee:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    46f2:	e001      	b.n	46f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    46f4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    46f8:	f000 0001 	and.w	r0, r0, #1
    46fc:	bd10      	pop	{r4, pc}
    46fe:	0000      	.short	0x0000
    4700:	5f66726e 	.word	0x5f66726e
    4704:	636f6c63 	.word	0x636f6c63
    4708:	00682e6b 	.word	0x00682e6b

0000470c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    470c:	4a02      	ldr	r2, [pc, #8]	; (4718 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xc>)
    470e:	6852      	ldr	r2, [r2, #4]
    4710:	b102      	cbz	r2, 4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4712:	4710      	bx	r2
    4714:	e7fe      	b.n	4714 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x8>
    4716:	0000      	.short	0x0000
    4718:	2000004c 	.word	0x2000004c
    471c:	4806      	ldr	r0, [pc, #24]	; (4738 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x2c>)
    471e:	b510      	push	{r4, lr}
    4720:	2100      	movs	r1, #0
    4722:	6001      	str	r1, [r0, #0]
    4724:	2101      	movs	r1, #1
    4726:	6001      	str	r1, [r0, #0]
    4728:	4608      	mov	r0, r1
    472a:	f008 fe16 	bl	d35a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    472e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4732:	2001      	movs	r0, #1
    4734:	f008 be04 	b.w	d340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4738:	40001ffc 	.word	0x40001ffc
    473c:	4807      	ldr	r0, [pc, #28]	; (475c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x50>)
    473e:	b510      	push	{r4, lr}
    4740:	2101      	movs	r1, #1
    4742:	6041      	str	r1, [r0, #4]
    4744:	1e89      	subs	r1, r1, #2
    4746:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    474a:	200c      	movs	r0, #12
    474c:	f008 fe05 	bl	d35a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    4750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4754:	200c      	movs	r0, #12
    4756:	f008 bdf3 	b.w	d340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    475a:	0000      	.short	0x0000
    475c:	4000c000 	.word	0x4000c000

00004760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4760:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    4762:	4a10      	ldr	r2, [pc, #64]	; (47a4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4764:	6855      	ldr	r5, [r2, #4]
    4766:	b1e5      	cbz	r5, 47a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    4768:	2200      	movs	r2, #0
    476a:	4603      	mov	r3, r0
    476c:	466e      	mov	r6, sp
    476e:	240a      	movs	r4, #10
    4770:	e003      	b.n	477a <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1a>
    4772:	fbb0 f0f4 	udiv	r0, r0, r4
    4776:	1c52      	adds	r2, r2, #1
    4778:	b2d2      	uxtb	r2, r2
    477a:	2800      	cmp	r0, #0
    477c:	d1f9      	bne.n	4772 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x12>
    477e:	54b0      	strb	r0, [r6, r2]
    4780:	e00a      	b.n	4798 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4782:	bf00      	nop
    4784:	fbb3 f0f4 	udiv	r0, r3, r4
    4788:	fb04 3010 	mls	r0, r4, r0, r3
    478c:	fbb3 f3f4 	udiv	r3, r3, r4
    4790:	1e52      	subs	r2, r2, #1
    4792:	b2d2      	uxtb	r2, r2
    4794:	3030      	adds	r0, #48	; 0x30
    4796:	54b0      	strb	r0, [r6, r2]
    4798:	2a00      	cmp	r2, #0
    479a:	d1f3      	bne.n	4784 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    479c:	4630      	mov	r0, r6
    479e:	47a8      	blx	r5
    47a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    47a2:	e7fe      	b.n	47a2 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x42>
    47a4:	2000004c 	.word	0x2000004c

000047a8 <mpsl_init>:
    47a8:	b570      	push	{r4, r5, r6, lr}
    47aa:	4c17      	ldr	r4, [pc, #92]	; (4808 <mpsl_init+0x60>)
    47ac:	4606      	mov	r6, r0
    47ae:	460d      	mov	r5, r1
    47b0:	7860      	ldrb	r0, [r4, #1]
    47b2:	b110      	cbz	r0, 47ba <mpsl_init+0x12>
    47b4:	f04f 30ff 	mov.w	r0, #4294967295
    47b8:	bd70      	pop	{r4, r5, r6, pc}
    47ba:	b906      	cbnz	r6, 47be <mpsl_init+0x16>
    47bc:	4e13      	ldr	r6, [pc, #76]	; (480c <mpsl_init+0x64>)
    47be:	6062      	str	r2, [r4, #4]
    47c0:	7025      	strb	r5, [r4, #0]
    47c2:	f7ff ffab 	bl	471c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>
    47c6:	f7ff ffb9 	bl	473c <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>
    47ca:	4630      	mov	r0, r6
    47cc:	f7ff feb0 	bl	4530 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    47d0:	0006      	movs	r6, r0
    47d2:	d1f1      	bne.n	47b8 <mpsl_init+0x10>
    47d4:	f7fe ff36 	bl	3644 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    47d8:	f7ff ff0a 	bl	45f0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    47dc:	f008 fd0a 	bl	d1f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    47e0:	4628      	mov	r0, r5
    47e2:	f008 fdad 	bl	d340 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    47e6:	2001      	movs	r0, #1
    47e8:	2d00      	cmp	r5, #0
    47ea:	db09      	blt.n	4800 <mpsl_init+0x58>
    47ec:	f005 011f 	and.w	r1, r5, #31
    47f0:	fa00 f101 	lsl.w	r1, r0, r1
    47f4:	096a      	lsrs	r2, r5, #5
    47f6:	0092      	lsls	r2, r2, #2
    47f8:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    4800:	7060      	strb	r0, [r4, #1]
    4802:	4630      	mov	r0, r6
    4804:	bd70      	pop	{r4, r5, r6, pc}
    4806:	0000      	.short	0x0000
    4808:	2000004c 	.word	0x2000004c
    480c:	0000d37c 	.word	0x0000d37c

00004810 <mpsl_is_initialized>:
    4810:	4801      	ldr	r0, [pc, #4]	; (4818 <mpsl_is_initialized+0x8>)
    4812:	7840      	ldrb	r0, [r0, #1]
    4814:	4770      	bx	lr
    4816:	0000      	.short	0x0000
    4818:	2000004c 	.word	0x2000004c

0000481c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    481c:	4807      	ldr	r0, [pc, #28]	; (483c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    481e:	f990 0000 	ldrsb.w	r0, [r0]
    4822:	2800      	cmp	r0, #0
    4824:	db09      	blt.n	483a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    4826:	f000 021f 	and.w	r2, r0, #31
    482a:	2101      	movs	r1, #1
    482c:	4091      	lsls	r1, r2
    482e:	0940      	lsrs	r0, r0, #5
    4830:	0080      	lsls	r0, r0, #2
    4832:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    4836:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    483a:	4770      	bx	lr
    483c:	2000004c 	.word	0x2000004c

00004840 <mpsl_temperature_get>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2601      	movs	r6, #1
    4846:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    484a:	0331      	lsls	r1, r6, #12
    484c:	f04f 0800 	mov.w	r8, #0
    4850:	4640      	mov	r0, r8
    4852:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    4856:	f3bf 8f4f 	dsb	sy
    485a:	f3bf 8f6f 	isb	sy
    485e:	4c16      	ldr	r4, [pc, #88]	; (48b8 <mpsl_temperature_get+0x78>)
    4860:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4864:	200c      	movs	r0, #12
    4866:	f008 fd97 	bl	d398 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    486a:	4d14      	ldr	r5, [pc, #80]	; (48bc <mpsl_temperature_get+0x7c>)
    486c:	6828      	ldr	r0, [r5, #0]
    486e:	43c0      	mvns	r0, r0
    4870:	f340 1700 	sbfx	r7, r0, #4, #1
    4874:	6828      	ldr	r0, [r5, #0]
    4876:	f040 0010 	orr.w	r0, r0, #16
    487a:	6028      	str	r0, [r5, #0]
    487c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4880:	6026      	str	r6, [r4, #0]
    4882:	1c7f      	adds	r7, r7, #1
    4884:	e002      	b.n	488c <mpsl_temperature_get+0x4c>
    4886:	bf00      	nop
    4888:	f000 f890 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    488c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4890:	2800      	cmp	r0, #0
    4892:	d0f9      	beq.n	4888 <mpsl_temperature_get+0x48>
    4894:	b91f      	cbnz	r7, 489e <mpsl_temperature_get+0x5e>
    4896:	6828      	ldr	r0, [r5, #0]
    4898:	f020 0010 	bic.w	r0, r0, #16
    489c:	6028      	str	r0, [r5, #0]
    489e:	4808      	ldr	r0, [pc, #32]	; (48c0 <mpsl_temperature_get+0x80>)
    48a0:	6805      	ldr	r5, [r0, #0]
    48a2:	6066      	str	r6, [r4, #4]
    48a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    48a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    48ac:	200c      	movs	r0, #12
    48ae:	f008 fd73 	bl	d398 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    48b2:	4628      	mov	r0, r5
    48b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48b8:	4000c000 	.word	0x4000c000
    48bc:	e000ed10 	.word	0xe000ed10
    48c0:	4000c508 	.word	0x4000c508

000048c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    48c4:	b510      	push	{r4, lr}
    48c6:	4602      	mov	r2, r0
    48c8:	2005      	movs	r0, #5
    48ca:	490c      	ldr	r1, [pc, #48]	; (48fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    48cc:	e004      	b.n	48d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    48ce:	bf00      	nop
    48d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    48d4:	791b      	ldrb	r3, [r3, #4]
    48d6:	b133      	cbz	r3, 48e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    48d8:	1e40      	subs	r0, r0, #1
    48da:	b2c0      	uxtb	r0, r0
    48dc:	d2f8      	bcs.n	48d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    48de:	214b      	movs	r1, #75	; 0x4b
    48e0:	2069      	movs	r0, #105	; 0x69
    48e2:	f7ff ff3d 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    48e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    48ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    48ee:	2200      	movs	r2, #0
    48f0:	714a      	strb	r2, [r1, #5]
    48f2:	718a      	strb	r2, [r1, #6]
    48f4:	2201      	movs	r2, #1
    48f6:	710a      	strb	r2, [r1, #4]
    48f8:	bd10      	pop	{r4, pc}
    48fa:	0000      	.short	0x0000
    48fc:	20000f90 	.word	0x20000f90

00004900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4900:	b510      	push	{r4, lr}
    4902:	2805      	cmp	r0, #5
    4904:	d301      	bcc.n	490a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4906:	215a      	movs	r1, #90	; 0x5a
    4908:	e006      	b.n	4918 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    490a:	490a      	ldr	r1, [pc, #40]	; (4934 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    490c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4910:	7901      	ldrb	r1, [r0, #4]
    4912:	2901      	cmp	r1, #1
    4914:	d003      	beq.n	491e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4916:	215b      	movs	r1, #91	; 0x5b
    4918:	2069      	movs	r0, #105	; 0x69
    491a:	f7ff ff21 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    491e:	7941      	ldrb	r1, [r0, #5]
    4920:	7982      	ldrb	r2, [r0, #6]
    4922:	1c49      	adds	r1, r1, #1
    4924:	b2c9      	uxtb	r1, r1
    4926:	428a      	cmp	r2, r1
    4928:	d000      	beq.n	492c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    492a:	7141      	strb	r1, [r0, #5]
    492c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4930:	f7ff bf74 	b.w	481c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4934:	20000f90 	.word	0x20000f90

00004938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4938:	b570      	push	{r4, r5, r6, lr}
    493a:	2505      	movs	r5, #5
    493c:	4e0e      	ldr	r6, [pc, #56]	; (4978 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    493e:	4c0f      	ldr	r4, [pc, #60]	; (497c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4940:	e016      	b.n	4970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4942:	7821      	ldrb	r1, [r4, #0]
    4944:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4948:	7902      	ldrb	r2, [r0, #4]
    494a:	2a01      	cmp	r2, #1
    494c:	d108      	bne.n	4960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    494e:	7942      	ldrb	r2, [r0, #5]
    4950:	7983      	ldrb	r3, [r0, #6]
    4952:	429a      	cmp	r2, r3
    4954:	d004      	beq.n	4960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4956:	7942      	ldrb	r2, [r0, #5]
    4958:	7182      	strb	r2, [r0, #6]
    495a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    495e:	4780      	blx	r0
    4960:	7820      	ldrb	r0, [r4, #0]
    4962:	1c40      	adds	r0, r0, #1
    4964:	b2c0      	uxtb	r0, r0
    4966:	7020      	strb	r0, [r4, #0]
    4968:	2805      	cmp	r0, #5
    496a:	d301      	bcc.n	4970 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    496c:	2000      	movs	r0, #0
    496e:	7020      	strb	r0, [r4, #0]
    4970:	1e6d      	subs	r5, r5, #1
    4972:	b2ed      	uxtb	r5, r5
    4974:	d2e5      	bcs.n	4942 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4976:	bd70      	pop	{r4, r5, r6, pc}
    4978:	20000f90 	.word	0x20000f90
    497c:	2000027d 	.word	0x2000027d

00004980 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4980:	b500      	push	{lr}
    4982:	f008 fd38 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4986:	b940      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4988:	f008 fd3f 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    498c:	b928      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    498e:	f008 fd53 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4992:	b910      	cbnz	r0, 499a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4994:	f008 fd64 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4998:	b108      	cbz	r0, 499e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    499a:	4802      	ldr	r0, [pc, #8]	; (49a4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    499c:	bd00      	pop	{pc}
    499e:	4802      	ldr	r0, [pc, #8]	; (49a8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    49a0:	bd00      	pop	{pc}
    49a2:	0000      	.short	0x0000
    49a4:	4000050c 	.word	0x4000050c
    49a8:	4001e700 	.word	0x4001e700

000049ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    49ac:	b510      	push	{r4, lr}
    49ae:	f008 fd57 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    49b2:	b330      	cbz	r0, 4a02 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    49b4:	f3ef 8010 	mrs	r0, PRIMASK
    49b8:	b1c8      	cbz	r0, 49ee <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    49ba:	2100      	movs	r1, #0
    49bc:	b672      	cpsid	i
    49be:	4812      	ldr	r0, [pc, #72]	; (4a08 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    49c0:	6802      	ldr	r2, [r0, #0]
    49c2:	6803      	ldr	r3, [r0, #0]
    49c4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    49c8:	f043 0310 	orr.w	r3, r3, #16
    49cc:	6003      	str	r3, [r0, #0]
    49ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    49d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    49d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    49da:	431c      	orrs	r4, r3
    49dc:	d000      	beq.n	49e0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    49de:	bf40      	sev
    49e0:	bf20      	wfe
    49e2:	bf00      	nop
    49e4:	bf00      	nop
    49e6:	bf00      	nop
    49e8:	bf00      	nop
    49ea:	b112      	cbz	r2, 49f2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    49ec:	e005      	b.n	49fa <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    49ee:	2101      	movs	r1, #1
    49f0:	e7e4      	b.n	49bc <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    49f2:	6802      	ldr	r2, [r0, #0]
    49f4:	f022 0210 	bic.w	r2, r2, #16
    49f8:	6002      	str	r2, [r0, #0]
    49fa:	2900      	cmp	r1, #0
    49fc:	d000      	beq.n	4a00 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    49fe:	b662      	cpsie	i
    4a00:	bd10      	pop	{r4, pc}
    4a02:	bf20      	wfe
    4a04:	bd10      	pop	{r4, pc}
    4a06:	0000      	.short	0x0000
    4a08:	e000ed10 	.word	0xe000ed10

00004a0c <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4a0c:	0000d6d1 0000d6ed 0000d6db 0000d6e7     ................
    4a1c:	0000d6d5 0000d6cf 0000d6cd 0000d6f3     ................
    4a2c:	0000d6e1 0000d6c7 0000d6bf 0000d6c3     ................
    4a3c:	0000d6b9                                ....

00004a40 <mpsl_fem_disable>:
    4a40:	4801      	ldr	r0, [pc, #4]	; (4a48 <mpsl_fem_disable+0x8>)
    4a42:	6800      	ldr	r0, [r0, #0]
    4a44:	6800      	ldr	r0, [r0, #0]
    4a46:	4700      	bx	r0
    4a48:	20000054 	.word	0x20000054

00004a4c <mpsl_fem_lna_configuration_clear>:
    4a4c:	4801      	ldr	r0, [pc, #4]	; (4a54 <mpsl_fem_lna_configuration_clear+0x8>)
    4a4e:	6800      	ldr	r0, [r0, #0]
    4a50:	6900      	ldr	r0, [r0, #16]
    4a52:	4700      	bx	r0
    4a54:	20000054 	.word	0x20000054

00004a58 <mpsl_fem_lna_configuration_set>:
    4a58:	4a01      	ldr	r2, [pc, #4]	; (4a60 <mpsl_fem_lna_configuration_set+0x8>)
    4a5a:	6812      	ldr	r2, [r2, #0]
    4a5c:	6892      	ldr	r2, [r2, #8]
    4a5e:	4710      	bx	r2
    4a60:	20000054 	.word	0x20000054

00004a64 <mpsl_fem_pa_configuration_clear>:
    4a64:	4801      	ldr	r0, [pc, #4]	; (4a6c <mpsl_fem_pa_configuration_clear+0x8>)
    4a66:	6800      	ldr	r0, [r0, #0]
    4a68:	68c0      	ldr	r0, [r0, #12]
    4a6a:	4700      	bx	r0
    4a6c:	20000054 	.word	0x20000054

00004a70 <mpsl_fem_pa_configuration_set>:
    4a70:	4a01      	ldr	r2, [pc, #4]	; (4a78 <mpsl_fem_pa_configuration_set+0x8>)
    4a72:	6812      	ldr	r2, [r2, #0]
    4a74:	6852      	ldr	r2, [r2, #4]
    4a76:	4710      	bx	r2
    4a78:	20000054 	.word	0x20000054

00004a7c <mpsl_fem_pa_is_configured>:
    4a7c:	4901      	ldr	r1, [pc, #4]	; (4a84 <mpsl_fem_pa_is_configured+0x8>)
    4a7e:	6809      	ldr	r1, [r1, #0]
    4a80:	6a09      	ldr	r1, [r1, #32]
    4a82:	4708      	bx	r1
    4a84:	20000054 	.word	0x20000054

00004a88 <mpsl_fem_device_config_254_apply_get>:
    4a88:	4801      	ldr	r0, [pc, #4]	; (4a90 <mpsl_fem_device_config_254_apply_get+0x8>)
    4a8a:	7800      	ldrb	r0, [r0, #0]
    4a8c:	4770      	bx	lr
    4a8e:	0000      	.short	0x0000
    4a90:	2000027e 	.word	0x2000027e
    4a94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a96:	4c17      	ldr	r4, [pc, #92]	; (4af4 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4a98:	7a20      	ldrb	r0, [r4, #8]
    4a9a:	2802      	cmp	r0, #2
    4a9c:	d200      	bcs.n	4aa0 <mpsl_fem_device_config_254_apply_get+0x18>
    4a9e:	2002      	movs	r0, #2
    4aa0:	f88d 0001 	strb.w	r0, [sp, #1]
    4aa4:	79e0      	ldrb	r0, [r4, #7]
    4aa6:	2803      	cmp	r0, #3
    4aa8:	d200      	bcs.n	4aac <mpsl_fem_device_config_254_apply_get+0x24>
    4aaa:	2003      	movs	r0, #3
    4aac:	f88d 0000 	strb.w	r0, [sp]
    4ab0:	79a0      	ldrb	r0, [r4, #6]
    4ab2:	f8ad 0004 	strh.w	r0, [sp, #4]
    4ab6:	7960      	ldrb	r0, [r4, #5]
    4ab8:	f8ad 0002 	strh.w	r0, [sp, #2]
    4abc:	4668      	mov	r0, sp
    4abe:	f006 ffd5 	bl	ba6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4ac2:	b108      	cbz	r0, 4ac8 <mpsl_fem_device_config_254_apply_get+0x40>
    4ac4:	2180      	movs	r1, #128	; 0x80
    4ac6:	e010      	b.n	4aea <mpsl_fem_device_config_254_apply_get+0x62>
    4ac8:	68e0      	ldr	r0, [r4, #12]
    4aca:	9002      	str	r0, [sp, #8]
    4acc:	a802      	add	r0, sp, #8
    4ace:	f006 ffe3 	bl	ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4ad2:	b108      	cbz	r0, 4ad8 <mpsl_fem_device_config_254_apply_get+0x50>
    4ad4:	2184      	movs	r1, #132	; 0x84
    4ad6:	e008      	b.n	4aea <mpsl_fem_device_config_254_apply_get+0x62>
    4ad8:	4807      	ldr	r0, [pc, #28]	; (4af8 <mpsl_fem_device_config_254_apply_get+0x70>)
    4ada:	6800      	ldr	r0, [r0, #0]
    4adc:	9003      	str	r0, [sp, #12]
    4ade:	a803      	add	r0, sp, #12
    4ae0:	f00b f9ea 	bl	feb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4ae4:	2800      	cmp	r0, #0
    4ae6:	d003      	beq.n	4af0 <mpsl_fem_device_config_254_apply_get+0x68>
    4ae8:	2188      	movs	r1, #136	; 0x88
    4aea:	2003      	movs	r0, #3
    4aec:	f000 f914 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4af0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4af2:	0000      	.short	0x0000
    4af4:	20000fb8 	.word	0x20000fb8
    4af8:	00004e04 	.word	0x00004e04
    4afc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4afe:	4604      	mov	r4, r0
    4b00:	460e      	mov	r6, r1
    4b02:	f100 0003 	add.w	r0, r0, #3
    4b06:	f020 0003 	bic.w	r0, r0, #3
    4b0a:	f04f 0100 	mov.w	r1, #0
    4b0e:	e9cd 0100 	strd	r0, r1, [sp]
    4b12:	7831      	ldrb	r1, [r6, #0]
    4b14:	0015      	movs	r5, r2
    4b16:	f88d 1005 	strb.w	r1, [sp, #5]
    4b1a:	d000      	beq.n	4b1e <mpsl_fem_device_config_254_apply_get+0x96>
    4b1c:	2000      	movs	r0, #0
    4b1e:	a901      	add	r1, sp, #4
    4b20:	f000 faea 	bl	50f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4b24:	9900      	ldr	r1, [sp, #0]
    4b26:	4408      	add	r0, r1
    4b28:	490c      	ldr	r1, [pc, #48]	; (4b5c <mpsl_fem_device_config_254_apply_get+0xd4>)
    4b2a:	9000      	str	r0, [sp, #0]
    4b2c:	78c9      	ldrb	r1, [r1, #3]
    4b2e:	b149      	cbz	r1, 4b44 <mpsl_fem_device_config_254_apply_get+0xbc>
    4b30:	7c31      	ldrb	r1, [r6, #16]
    4b32:	b139      	cbz	r1, 4b44 <mpsl_fem_device_config_254_apply_get+0xbc>
    4b34:	2225      	movs	r2, #37	; 0x25
    4b36:	b105      	cbz	r5, 4b3a <mpsl_fem_device_config_254_apply_get+0xb2>
    4b38:	2000      	movs	r0, #0
    4b3a:	f000 fd25 	bl	5588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4b3e:	9900      	ldr	r1, [sp, #0]
    4b40:	4408      	add	r0, r1
    4b42:	9000      	str	r0, [sp, #0]
    4b44:	462a      	mov	r2, r5
    4b46:	4631      	mov	r1, r6
    4b48:	4668      	mov	r0, sp
    4b4a:	f008 fdd4 	bl	d6f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4b4e:	9800      	ldr	r0, [sp, #0]
    4b50:	1dc0      	adds	r0, r0, #7
    4b52:	f020 0007 	bic.w	r0, r0, #7
    4b56:	9000      	str	r0, [sp, #0]
    4b58:	1b00      	subs	r0, r0, r4
    4b5a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4b5c:	20000058 	.word	0x20000058

00004b60 <sdc_build_revision_get>:
    4b60:	b510      	push	{r4, lr}
    4b62:	b128      	cbz	r0, 4b70 <sdc_build_revision_get+0x10>
    4b64:	2214      	movs	r2, #20
    4b66:	4904      	ldr	r1, [pc, #16]	; (4b78 <sdc_build_revision_get+0x18>)
    4b68:	f008 fccc 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4b6c:	2000      	movs	r0, #0
    4b6e:	bd10      	pop	{r4, pc}
    4b70:	f06f 0015 	mvn.w	r0, #21
    4b74:	bd10      	pop	{r4, pc}
    4b76:	0000      	.short	0x0000
    4b78:	00004e20 	.word	0x00004e20

00004b7c <sdc_cfg_set>:
    4b7c:	b570      	push	{r4, r5, r6, lr}
    4b7e:	0003      	movs	r3, r0
    4b80:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4b84:	d103      	bne.n	4b8e <sdc_cfg_set+0x12>
    4b86:	4c28      	ldr	r4, [pc, #160]	; (4c28 <sdc_cfg_set+0xac>)
    4b88:	7863      	ldrb	r3, [r4, #1]
    4b8a:	b10b      	cbz	r3, 4b90 <sdc_cfg_set+0x14>
    4b8c:	1180      	asrs	r0, r0, #6
    4b8e:	bd70      	pop	{r4, r5, r6, pc}
    4b90:	b319      	cbz	r1, 4bda <sdc_cfg_set+0x5e>
    4b92:	f06f 0515 	mvn.w	r5, #21
    4b96:	b38a      	cbz	r2, 4bfc <sdc_cfg_set+0x80>
    4b98:	4b24      	ldr	r3, [pc, #144]	; (4c2c <sdc_cfg_set+0xb0>)
    4b9a:	290b      	cmp	r1, #11
    4b9c:	d23e      	bcs.n	4c1c <sdc_cfg_set+0xa0>
    4b9e:	e8df f001 	tbb	[pc, r1]
    4ba2:	063d      	.short	0x063d
    4ba4:	13100c09 	.word	0x13100c09
    4ba8:	2818251d 	.word	0x2818251d
    4bac:	002e      	.short	0x002e
    4bae:	7810      	ldrb	r0, [r2, #0]
    4bb0:	7018      	strb	r0, [r3, #0]
    4bb2:	e028      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bb4:	7810      	ldrb	r0, [r2, #0]
    4bb6:	7058      	strb	r0, [r3, #1]
    4bb8:	e025      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bba:	6810      	ldr	r0, [r2, #0]
    4bbc:	f8c3 0005 	str.w	r0, [r3, #5]
    4bc0:	e021      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bc2:	6810      	ldr	r0, [r2, #0]
    4bc4:	60d8      	str	r0, [r3, #12]
    4bc6:	e01e      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bc8:	7811      	ldrb	r1, [r2, #0]
    4bca:	2900      	cmp	r1, #0
    4bcc:	d1df      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bce:	7099      	strb	r1, [r3, #2]
    4bd0:	e019      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bd2:	7811      	ldrb	r1, [r2, #0]
    4bd4:	2900      	cmp	r1, #0
    4bd6:	d1da      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bd8:	70d9      	strb	r1, [r3, #3]
    4bda:	e014      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bdc:	78e0      	ldrb	r0, [r4, #3]
    4bde:	b110      	cbz	r0, 4be6 <sdc_cfg_set+0x6a>
    4be0:	7810      	ldrb	r0, [r2, #0]
    4be2:	2802      	cmp	r0, #2
    4be4:	d31a      	bcc.n	4c1c <sdc_cfg_set+0xa0>
    4be6:	7810      	ldrb	r0, [r2, #0]
    4be8:	7418      	strb	r0, [r3, #16]
    4bea:	e00c      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bec:	8810      	ldrh	r0, [r2, #0]
    4bee:	8258      	strh	r0, [r3, #18]
    4bf0:	e009      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bf2:	7811      	ldrb	r1, [r2, #0]
    4bf4:	2900      	cmp	r1, #0
    4bf6:	d1ca      	bne.n	4b8e <sdc_cfg_set+0x12>
    4bf8:	7119      	strb	r1, [r3, #4]
    4bfa:	e004      	b.n	4c06 <sdc_cfg_set+0x8a>
    4bfc:	e00e      	b.n	4c1c <sdc_cfg_set+0xa0>
    4bfe:	7810      	ldrb	r0, [r2, #0]
    4c00:	2802      	cmp	r0, #2
    4c02:	d30b      	bcc.n	4c1c <sdc_cfg_set+0xa0>
    4c04:	7518      	strb	r0, [r3, #20]
    4c06:	2201      	movs	r2, #1
    4c08:	4908      	ldr	r1, [pc, #32]	; (4c2c <sdc_cfg_set+0xb0>)
    4c0a:	2000      	movs	r0, #0
    4c0c:	f7ff ff76 	bl	4afc <mpsl_fem_device_config_254_apply_get+0x74>
    4c10:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4c14:	db04      	blt.n	4c20 <sdc_cfg_set+0xa4>
    4c16:	f06f 000b 	mvn.w	r0, #11
    4c1a:	bd70      	pop	{r4, r5, r6, pc}
    4c1c:	4628      	mov	r0, r5
    4c1e:	bd70      	pop	{r4, r5, r6, pc}
    4c20:	2101      	movs	r1, #1
    4c22:	70a1      	strb	r1, [r4, #2]
    4c24:	bd70      	pop	{r4, r5, r6, pc}
    4c26:	0000      	.short	0x0000
    4c28:	20000058 	.word	0x20000058
    4c2c:	20000fb8 	.word	0x20000fb8

00004c30 <sdc_enable>:
    4c30:	b570      	push	{r4, r5, r6, lr}
    4c32:	460c      	mov	r4, r1
    4c34:	0005      	movs	r5, r0
    4c36:	d019      	beq.n	4c6c <sdc_enable+0x3c>
    4c38:	b1c4      	cbz	r4, 4c6c <sdc_enable+0x3c>
    4c3a:	f000 f925 	bl	4e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4c3e:	b1c0      	cbz	r0, 4c72 <sdc_enable+0x42>
    4c40:	4628      	mov	r0, r5
    4c42:	f7ff fe3f 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4c46:	4d0c      	ldr	r5, [pc, #48]	; (4c78 <sdc_enable+0x48>)
    4c48:	2200      	movs	r2, #0
    4c4a:	490c      	ldr	r1, [pc, #48]	; (4c7c <sdc_enable+0x4c>)
    4c4c:	7028      	strb	r0, [r5, #0]
    4c4e:	4620      	mov	r0, r4
    4c50:	f7ff ff54 	bl	4afc <mpsl_fem_device_config_254_apply_get+0x74>
    4c54:	f00b fd31 	bl	106ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4c58:	2100      	movs	r1, #0
    4c5a:	7828      	ldrb	r0, [r5, #0]
    4c5c:	f007 f91a 	bl	be94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4c60:	f7ff ff18 	bl	4a94 <mpsl_fem_device_config_254_apply_get+0xc>
    4c64:	2001      	movs	r0, #1
    4c66:	7068      	strb	r0, [r5, #1]
    4c68:	2000      	movs	r0, #0
    4c6a:	bd70      	pop	{r4, r5, r6, pc}
    4c6c:	f06f 0015 	mvn.w	r0, #21
    4c70:	bd70      	pop	{r4, r5, r6, pc}
    4c72:	f04f 30ff 	mov.w	r0, #4294967295
    4c76:	bd70      	pop	{r4, r5, r6, pc}
    4c78:	20000058 	.word	0x20000058
    4c7c:	20000fb8 	.word	0x20000fb8

00004c80 <sdc_init>:
    4c80:	b530      	push	{r4, r5, lr}
    4c82:	b087      	sub	sp, #28
    4c84:	0005      	movs	r5, r0
    4c86:	d00c      	beq.n	4ca2 <sdc_init+0x22>
    4c88:	f7ff fdc2 	bl	4810 <mpsl_is_initialized>
    4c8c:	f04f 34ff 	mov.w	r4, #4294967295
    4c90:	b120      	cbz	r0, 4c9c <sdc_init+0x1c>
    4c92:	f7ff fc9f 	bl	45d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4c96:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4c9a:	d905      	bls.n	4ca8 <sdc_init+0x28>
    4c9c:	4620      	mov	r0, r4
    4c9e:	b007      	add	sp, #28
    4ca0:	bd30      	pop	{r4, r5, pc}
    4ca2:	f06f 0015 	mvn.w	r0, #21
    4ca6:	e7fa      	b.n	4c9e <sdc_init+0x1e>
    4ca8:	4c15      	ldr	r4, [pc, #84]	; (4d00 <sdc_init+0x80>)
    4caa:	4816      	ldr	r0, [pc, #88]	; (4d04 <sdc_init+0x84>)
    4cac:	6065      	str	r5, [r4, #4]
    4cae:	f000 f9e5 	bl	507c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4cb2:	2000      	movs	r0, #0
    4cb4:	7060      	strb	r0, [r4, #1]
    4cb6:	70a0      	strb	r0, [r4, #2]
    4cb8:	70e0      	strb	r0, [r4, #3]
    4cba:	4601      	mov	r1, r0
    4cbc:	2218      	movs	r2, #24
    4cbe:	4668      	mov	r0, sp
    4cc0:	f008 fc9a 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4cc4:	2218      	movs	r2, #24
    4cc6:	4910      	ldr	r1, [pc, #64]	; (4d08 <sdc_init+0x88>)
    4cc8:	4668      	mov	r0, sp
    4cca:	f008 fc1b 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cce:	2218      	movs	r2, #24
    4cd0:	4669      	mov	r1, sp
    4cd2:	480e      	ldr	r0, [pc, #56]	; (4d0c <sdc_init+0x8c>)
    4cd4:	f008 fc16 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4cd8:	f3ef 8410 	mrs	r4, PRIMASK
    4cdc:	b672      	cpsid	i
    4cde:	480c      	ldr	r0, [pc, #48]	; (4d10 <sdc_init+0x90>)
    4ce0:	f06f 010c 	mvn.w	r1, #12
    4ce4:	f000 fcf2 	bl	56cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4ce8:	480a      	ldr	r0, [pc, #40]	; (4d14 <sdc_init+0x94>)
    4cea:	f000 fdb3 	bl	5854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4cee:	b118      	cbz	r0, 4cf8 <sdc_init+0x78>
    4cf0:	2196      	movs	r1, #150	; 0x96
    4cf2:	2003      	movs	r0, #3
    4cf4:	f000 f810 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4cf8:	b904      	cbnz	r4, 4cfc <sdc_init+0x7c>
    4cfa:	b662      	cpsie	i
    4cfc:	2000      	movs	r0, #0
    4cfe:	e7ce      	b.n	4c9e <sdc_init+0x1e>
    4d00:	20000058 	.word	0x20000058
    4d04:	00004a95 	.word	0x00004a95
    4d08:	00004e08 	.word	0x00004e08
    4d0c:	20000fb8 	.word	0x20000fb8
    4d10:	4000c000 	.word	0x4000c000
    4d14:	00004eb5 	.word	0x00004eb5

00004d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4d18:	b50e      	push	{r1, r2, r3, lr}
    4d1a:	b672      	cpsid	i
    4d1c:	4a15      	ldr	r2, [pc, #84]	; (4d74 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4d1e:	6855      	ldr	r5, [r2, #4]
    4d20:	b1d5      	cbz	r5, 4d58 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4d22:	2200      	movs	r2, #0
    4d24:	4603      	mov	r3, r0
    4d26:	466e      	mov	r6, sp
    4d28:	240a      	movs	r4, #10
    4d2a:	e003      	b.n	4d34 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4d2c:	fbb0 f0f4 	udiv	r0, r0, r4
    4d30:	1c52      	adds	r2, r2, #1
    4d32:	b2d2      	uxtb	r2, r2
    4d34:	2800      	cmp	r0, #0
    4d36:	d1f9      	bne.n	4d2c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4d38:	54b0      	strb	r0, [r6, r2]
    4d3a:	e009      	b.n	4d50 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4d3c:	fbb3 f0f4 	udiv	r0, r3, r4
    4d40:	fb04 3010 	mls	r0, r4, r0, r3
    4d44:	fbb3 f3f4 	udiv	r3, r3, r4
    4d48:	1e52      	subs	r2, r2, #1
    4d4a:	b2d2      	uxtb	r2, r2
    4d4c:	3030      	adds	r0, #48	; 0x30
    4d4e:	54b0      	strb	r0, [r6, r2]
    4d50:	2a00      	cmp	r2, #0
    4d52:	d1f3      	bne.n	4d3c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4d54:	4630      	mov	r0, r6
    4d56:	47a8      	blx	r5
    4d58:	f3bf 8f4f 	dsb	sy
    4d5c:	4806      	ldr	r0, [pc, #24]	; (4d78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4d5e:	6801      	ldr	r1, [r0, #0]
    4d60:	4a06      	ldr	r2, [pc, #24]	; (4d7c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4d62:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4d66:	4311      	orrs	r1, r2
    4d68:	6001      	str	r1, [r0, #0]
    4d6a:	f3bf 8f4f 	dsb	sy
    4d6e:	bf00      	nop
    4d70:	e7fd      	b.n	4d6e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4d72:	0000      	.short	0x0000
    4d74:	20000058 	.word	0x20000058
    4d78:	e000ed0c 	.word	0xe000ed0c
    4d7c:	05fa0004 	.word	0x05fa0004

00004d80 <sdc_support_dle>:
    4d80:	4806      	ldr	r0, [pc, #24]	; (4d9c <sdc_support_dle+0x1c>)
    4d82:	b510      	push	{r4, lr}
    4d84:	7881      	ldrb	r1, [r0, #2]
    4d86:	7840      	ldrb	r0, [r0, #1]
    4d88:	4301      	orrs	r1, r0
    4d8a:	d002      	beq.n	4d92 <sdc_support_dle+0x12>
    4d8c:	f04f 30ff 	mov.w	r0, #4294967295
    4d90:	bd10      	pop	{r4, pc}
    4d92:	f006 fed7 	bl	bb44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4d96:	2000      	movs	r0, #0
    4d98:	bd10      	pop	{r4, pc}
    4d9a:	0000      	.short	0x0000
    4d9c:	20000058 	.word	0x20000058

00004da0 <sdc_support_le_2m_phy>:
    4da0:	4806      	ldr	r0, [pc, #24]	; (4dbc <sdc_support_le_2m_phy+0x1c>)
    4da2:	b510      	push	{r4, lr}
    4da4:	7881      	ldrb	r1, [r0, #2]
    4da6:	7840      	ldrb	r0, [r0, #1]
    4da8:	4301      	orrs	r1, r0
    4daa:	d002      	beq.n	4db2 <sdc_support_le_2m_phy+0x12>
    4dac:	f04f 30ff 	mov.w	r0, #4294967295
    4db0:	bd10      	pop	{r4, pc}
    4db2:	f00b f92e 	bl	10012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4db6:	2000      	movs	r0, #0
    4db8:	bd10      	pop	{r4, pc}
    4dba:	0000      	.short	0x0000
    4dbc:	20000058 	.word	0x20000058

00004dc0 <sdc_support_master>:
    4dc0:	4806      	ldr	r0, [pc, #24]	; (4ddc <sdc_support_master+0x1c>)
    4dc2:	b510      	push	{r4, lr}
    4dc4:	7881      	ldrb	r1, [r0, #2]
    4dc6:	7840      	ldrb	r0, [r0, #1]
    4dc8:	4301      	orrs	r1, r0
    4dca:	d002      	beq.n	4dd2 <sdc_support_master+0x12>
    4dcc:	f04f 30ff 	mov.w	r0, #4294967295
    4dd0:	bd10      	pop	{r4, pc}
    4dd2:	f007 f893 	bl	befc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    4dd6:	2000      	movs	r0, #0
    4dd8:	bd10      	pop	{r4, pc}
    4dda:	0000      	.short	0x0000
    4ddc:	20000058 	.word	0x20000058

00004de0 <sdc_support_scan>:
    4de0:	4807      	ldr	r0, [pc, #28]	; (4e00 <sdc_support_scan+0x20>)
    4de2:	b510      	push	{r4, lr}
    4de4:	7881      	ldrb	r1, [r0, #2]
    4de6:	7842      	ldrb	r2, [r0, #1]
    4de8:	4311      	orrs	r1, r2
    4dea:	d002      	beq.n	4df2 <sdc_support_scan+0x12>
    4dec:	f04f 30ff 	mov.w	r0, #4294967295
    4df0:	bd10      	pop	{r4, pc}
    4df2:	2101      	movs	r1, #1
    4df4:	70c1      	strb	r1, [r0, #3]
    4df6:	f007 f86f 	bl	bed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    4dfa:	2000      	movs	r0, #0
    4dfc:	bd10      	pop	{r4, pc}
    4dfe:	0000      	.short	0x0000
    4e00:	20000058 	.word	0x20000058
    4e04:	00000001 	.word	0x00000001
    4e08:	00010101 	.word	0x00010101
    4e0c:	031b1b00 	.word	0x031b1b00
    4e10:	00000002 	.word	0x00000002
    4e14:	00001d4c 	.word	0x00001d4c
    4e18:	001f0003 	.word	0x001f0003
    4e1c:	00000000 	.word	0x00000000
    4e20:	d64ec0df 	.word	0xd64ec0df
    4e24:	09667c1f 	.word	0x09667c1f
    4e28:	a02bf50a 	.word	0xa02bf50a
    4e2c:	6443f298 	.word	0x6443f298
    4e30:	2aa6c562 	.word	0x2aa6c562

00004e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4e34:	4a05      	ldr	r2, [pc, #20]	; (4e4c <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4e36:	b510      	push	{r4, lr}
    4e38:	6852      	ldr	r2, [r2, #4]
    4e3a:	b112      	cbz	r2, 4e42 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e40:	4710      	bx	r2
    4e42:	2183      	movs	r1, #131	; 0x83
    4e44:	2004      	movs	r0, #4
    4e46:	f7ff ff67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e4a:	0000      	.short	0x0000
    4e4c:	20000fd0 	.word	0x20000fd0

00004e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4e50:	4a05      	ldr	r2, [pc, #20]	; (4e68 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4e52:	b510      	push	{r4, lr}
    4e54:	6812      	ldr	r2, [r2, #0]
    4e56:	b112      	cbz	r2, 4e5e <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e5c:	4710      	bx	r2
    4e5e:	217d      	movs	r1, #125	; 0x7d
    4e60:	2004      	movs	r0, #4
    4e62:	f7ff ff59 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e66:	0000      	.short	0x0000
    4e68:	20000fd0 	.word	0x20000fd0

00004e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4e6c:	4a05      	ldr	r2, [pc, #20]	; (4e84 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4e6e:	b510      	push	{r4, lr}
    4e70:	6892      	ldr	r2, [r2, #8]
    4e72:	b112      	cbz	r2, 4e7a <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    4e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4e78:	4710      	bx	r2
    4e7a:	2189      	movs	r1, #137	; 0x89
    4e7c:	2004      	movs	r0, #4
    4e7e:	f7ff ff4b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e82:	0000      	.short	0x0000
    4e84:	20000fd0 	.word	0x20000fd0

00004e88 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4e88:	4805      	ldr	r0, [pc, #20]	; (4ea0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4e8a:	6801      	ldr	r1, [r0, #0]
    4e8c:	b129      	cbz	r1, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e8e:	6841      	ldr	r1, [r0, #4]
    4e90:	b119      	cbz	r1, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e92:	6880      	ldr	r0, [r0, #8]
    4e94:	b108      	cbz	r0, 4e9a <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4e96:	2001      	movs	r0, #1
    4e98:	4770      	bx	lr
    4e9a:	2000      	movs	r0, #0
    4e9c:	4770      	bx	lr
    4e9e:	0000      	.short	0x0000
    4ea0:	20000fd0 	.word	0x20000fd0

00004ea4 <sdc_rand_source_register>:
    4ea4:	4902      	ldr	r1, [pc, #8]	; (4eb0 <sdc_rand_source_register+0xc>)
    4ea6:	c80d      	ldmia	r0, {r0, r2, r3}
    4ea8:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4eac:	2000      	movs	r0, #0
    4eae:	4770      	bx	lr
    4eb0:	20000fd0 	.word	0x20000fd0

00004eb4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    4eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4eb6:	4c12      	ldr	r4, [pc, #72]	; (4f00 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4eb8:	2600      	movs	r6, #0
    4eba:	6825      	ldr	r5, [r4, #0]
    4ebc:	e011      	b.n	4ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4ebe:	9800      	ldr	r0, [sp, #0]
    4ec0:	2802      	cmp	r0, #2
    4ec2:	d002      	beq.n	4eca <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    4ec4:	2803      	cmp	r0, #3
    4ec6:	d10c      	bne.n	4ee2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4ec8:	e006      	b.n	4ed8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4eca:	6820      	ldr	r0, [r4, #0]
    4ecc:	b110      	cbz	r0, 4ed4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4ece:	2000      	movs	r0, #0
    4ed0:	6026      	str	r6, [r4, #0]
    4ed2:	e005      	b.n	4ee0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    4ed4:	2128      	movs	r1, #40	; 0x28
    4ed6:	e00c      	b.n	4ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4ed8:	6820      	ldr	r0, [r4, #0]
    4eda:	b168      	cbz	r0, 4ef8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4edc:	2001      	movs	r0, #1
    4ede:	6026      	str	r6, [r4, #0]
    4ee0:	47a8      	blx	r5
    4ee2:	4668      	mov	r0, sp
    4ee4:	f000 fc88 	bl	57f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4ee8:	2800      	cmp	r0, #0
    4eea:	d0e8      	beq.n	4ebe <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4eec:	2805      	cmp	r0, #5
    4eee:	d005      	beq.n	4efc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4ef0:	2135      	movs	r1, #53	; 0x35
    4ef2:	2004      	movs	r0, #4
    4ef4:	f7ff ff10 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ef8:	212d      	movs	r1, #45	; 0x2d
    4efa:	e7fa      	b.n	4ef2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4efe:	0000      	.short	0x0000
    4f00:	20000060 	.word	0x20000060
    4f04:	b570      	push	{r4, r5, r6, lr}
    4f06:	4c14      	ldr	r4, [pc, #80]	; (4f58 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    4f08:	4605      	mov	r5, r0
    4f0a:	7820      	ldrb	r0, [r4, #0]
    4f0c:	b140      	cbz	r0, 4f20 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    4f0e:	78a2      	ldrb	r2, [r4, #2]
    4f10:	1c61      	adds	r1, r4, #1
    4f12:	4628      	mov	r0, r5
    4f14:	1c92      	adds	r2, r2, #2
    4f16:	f008 faf5 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4f1a:	2000      	movs	r0, #0
    4f1c:	7020      	strb	r0, [r4, #0]
    4f1e:	e013      	b.n	4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4f20:	480e      	ldr	r0, [pc, #56]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f22:	f006 feb1 	bl	bc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    4f26:	2800      	cmp	r0, #0
    4f28:	d00f      	beq.n	4f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4f2a:	480c      	ldr	r0, [pc, #48]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f2c:	7800      	ldrb	r0, [r0, #0]
    4f2e:	2814      	cmp	r0, #20
    4f30:	d104      	bne.n	4f3c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    4f32:	210a      	movs	r1, #10
    4f34:	203e      	movs	r0, #62	; 0x3e
    4f36:	f008 fc36 	bl	d7a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    4f3a:	b138      	cbz	r0, 4f4c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    4f3c:	4907      	ldr	r1, [pc, #28]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f3e:	4628      	mov	r0, r5
    4f40:	f008 fc8f 	bl	d862 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    4f44:	2800      	cmp	r0, #0
    4f46:	d000      	beq.n	4f4a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    4f48:	2001      	movs	r0, #1
    4f4a:	bd70      	pop	{r4, r5, r6, pc}
    4f4c:	4903      	ldr	r1, [pc, #12]	; (4f5c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    4f4e:	4628      	mov	r0, r5
    4f50:	f008 fec4 	bl	dcdc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    4f54:	e7f8      	b.n	4f48 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    4f56:	0000      	.short	0x0000
    4f58:	200010e4 	.word	0x200010e4
    4f5c:	20000fdc 	.word	0x20000fdc
    4f60:	b570      	push	{r4, r5, r6, lr}
    4f62:	780a      	ldrb	r2, [r1, #0]
    4f64:	7082      	strb	r2, [r0, #2]
    4f66:	b33a      	cbz	r2, 4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4f68:	2a01      	cmp	r2, #1
    4f6a:	d825      	bhi.n	4fb8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4f6c:	2313      	movs	r3, #19
    4f6e:	7003      	strb	r3, [r0, #0]
    4f70:	2300      	movs	r3, #0
    4f72:	e00a      	b.n	4f8a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    4f74:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4f78:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4f7c:	78a6      	ldrb	r6, [r4, #2]
    4f7e:	70ee      	strb	r6, [r5, #3]
    4f80:	8864      	ldrh	r4, [r4, #2]
    4f82:	0a24      	lsrs	r4, r4, #8
    4f84:	1c5b      	adds	r3, r3, #1
    4f86:	712c      	strb	r4, [r5, #4]
    4f88:	b2db      	uxtb	r3, r3
    4f8a:	4293      	cmp	r3, r2
    4f8c:	d3f2      	bcc.n	4f74 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4f8e:	2300      	movs	r3, #0
    4f90:	e00b      	b.n	4faa <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    4f92:	bf00      	nop
    4f94:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4f98:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4f9c:	792e      	ldrb	r6, [r5, #4]
    4f9e:	7166      	strb	r6, [r4, #5]
    4fa0:	88ad      	ldrh	r5, [r5, #4]
    4fa2:	0a2d      	lsrs	r5, r5, #8
    4fa4:	1c5b      	adds	r3, r3, #1
    4fa6:	71a5      	strb	r5, [r4, #6]
    4fa8:	b2db      	uxtb	r3, r3
    4faa:	4293      	cmp	r3, r2
    4fac:	d3f2      	bcc.n	4f94 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4fae:	2101      	movs	r1, #1
    4fb0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    4fb4:	b2c0      	uxtb	r0, r0
    4fb6:	bd70      	pop	{r4, r5, r6, pc}
    4fb8:	2000      	movs	r0, #0
    4fba:	bd70      	pop	{r4, r5, r6, pc}

00004fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4fbc:	2101      	movs	r1, #1
    4fbe:	4a0c      	ldr	r2, [pc, #48]	; (4ff0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4fc0:	2840      	cmp	r0, #64	; 0x40
    4fc2:	d20c      	bcs.n	4fde <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    4fc4:	2820      	cmp	r0, #32
    4fc6:	d803      	bhi.n	4fd0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4fc8:	1e40      	subs	r0, r0, #1
    4fca:	4081      	lsls	r1, r0
    4fcc:	6810      	ldr	r0, [r2, #0]
    4fce:	e002      	b.n	4fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4fd0:	3821      	subs	r0, #33	; 0x21
    4fd2:	4081      	lsls	r1, r0
    4fd4:	6850      	ldr	r0, [r2, #4]
    4fd6:	4201      	tst	r1, r0
    4fd8:	d107      	bne.n	4fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4fda:	2000      	movs	r0, #0
    4fdc:	4770      	bx	lr
    4fde:	28ff      	cmp	r0, #255	; 0xff
    4fe0:	d003      	beq.n	4fea <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4fe2:	3840      	subs	r0, #64	; 0x40
    4fe4:	4081      	lsls	r1, r0
    4fe6:	6890      	ldr	r0, [r2, #8]
    4fe8:	e7f5      	b.n	4fd6 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4fea:	2001      	movs	r0, #1
    4fec:	4770      	bx	lr
    4fee:	0000      	.short	0x0000
    4ff0:	20000064 	.word	0x20000064

00004ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    4ff4:	2101      	movs	r1, #1
    4ff6:	1e40      	subs	r0, r0, #1
    4ff8:	4081      	lsls	r1, r0
    4ffa:	4804      	ldr	r0, [pc, #16]	; (500c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    4ffc:	68c0      	ldr	r0, [r0, #12]
    4ffe:	4201      	tst	r1, r0
    5000:	d001      	beq.n	5006 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    5002:	2001      	movs	r0, #1
    5004:	4770      	bx	lr
    5006:	2000      	movs	r0, #0
    5008:	4770      	bx	lr
    500a:	0000      	.short	0x0000
    500c:	20000064 	.word	0x20000064

00005010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    5010:	4901      	ldr	r1, [pc, #4]	; (5018 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    5012:	6800      	ldr	r0, [r0, #0]
    5014:	60c8      	str	r0, [r1, #12]
    5016:	4770      	bx	lr
    5018:	20000064 	.word	0x20000064

0000501c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    501c:	4904      	ldr	r1, [pc, #16]	; (5030 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    501e:	6802      	ldr	r2, [r0, #0]
    5020:	6840      	ldr	r0, [r0, #4]
    5022:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    5026:	600a      	str	r2, [r1, #0]
    5028:	4a02      	ldr	r2, [pc, #8]	; (5034 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    502a:	4310      	orrs	r0, r2
    502c:	6048      	str	r0, [r1, #4]
    502e:	4770      	bx	lr
    5030:	20000064 	.word	0x20000064
    5034:	024007f8 	.word	0x024007f8

00005038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    5038:	4901      	ldr	r1, [pc, #4]	; (5040 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    503a:	6800      	ldr	r0, [r0, #0]
    503c:	6088      	str	r0, [r1, #8]
    503e:	4770      	bx	lr
    5040:	20000064 	.word	0x20000064

00005044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    5044:	4805      	ldr	r0, [pc, #20]	; (505c <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    5046:	f04f 31ff 	mov.w	r1, #4294967295
    504a:	6001      	str	r1, [r0, #0]
    504c:	0cc9      	lsrs	r1, r1, #19
    504e:	6041      	str	r1, [r0, #4]
    5050:	2100      	movs	r1, #0
    5052:	6081      	str	r1, [r0, #8]
    5054:	211f      	movs	r1, #31
    5056:	60c1      	str	r1, [r0, #12]
    5058:	4770      	bx	lr
    505a:	0000      	.short	0x0000
    505c:	20000064 	.word	0x20000064

00005060 <sdc_hci_cmd_cb_reset>:
    5060:	b510      	push	{r4, lr}
    5062:	f7ff ffef 	bl	5044 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    5066:	f00a ffad 	bl	ffc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    506a:	4604      	mov	r4, r0
    506c:	4802      	ldr	r0, [pc, #8]	; (5078 <sdc_hci_cmd_cb_reset+0x18>)
    506e:	6800      	ldr	r0, [r0, #0]
    5070:	b100      	cbz	r0, 5074 <sdc_hci_cmd_cb_reset+0x14>
    5072:	4780      	blx	r0
    5074:	4620      	mov	r0, r4
    5076:	bd10      	pop	{r4, pc}
    5078:	20000074 	.word	0x20000074

0000507c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    507c:	4901      	ldr	r1, [pc, #4]	; (5084 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    507e:	6008      	str	r0, [r1, #0]
    5080:	4770      	bx	lr
    5082:	0000      	.short	0x0000
    5084:	20000074 	.word	0x20000074

00005088 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5088:	2102      	movs	r1, #2
    508a:	8001      	strh	r1, [r0, #0]
    508c:	8041      	strh	r1, [r0, #2]
    508e:	2100      	movs	r1, #0
    5090:	7101      	strb	r1, [r0, #4]
    5092:	21df      	movs	r1, #223	; 0xdf
    5094:	7141      	strb	r1, [r0, #5]
    5096:	f644 61c0 	movw	r1, #20160	; 0x4ec0
    509a:	80c1      	strh	r1, [r0, #6]
    509c:	4901      	ldr	r1, [pc, #4]	; (50a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    509e:	6081      	str	r1, [r0, #8]
    50a0:	2000      	movs	r0, #0
    50a2:	4770      	bx	lr
    50a4:	667c1fd6 	.word	0x667c1fd6

000050a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    50a8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    50aa:	4604      	mov	r4, r0
    50ac:	4669      	mov	r1, sp
    50ae:	f009 facf 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    50b2:	b170      	cbz	r0, 50d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    50b4:	f240 215a 	movw	r1, #602	; 0x25a
    50b8:	e008      	b.n	50cc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    50ba:	bf00      	nop
    50bc:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    50c0:	4621      	mov	r1, r4
    50c2:	f000 f8a7 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    50c6:	b120      	cbz	r0, 50d2 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    50c8:	f240 215f 	movw	r1, #607	; 0x25f
    50cc:	2017      	movs	r0, #23
    50ce:	f7ff fe23 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50d2:	4668      	mov	r0, sp
    50d4:	f000 f850 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    50d8:	2800      	cmp	r0, #0
    50da:	d0ef      	beq.n	50bc <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    50dc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

000050e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    50e0:	b510      	push	{r4, lr}
    50e2:	b120      	cbz	r0, 50ee <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    50e4:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    50e8:	2017      	movs	r0, #23
    50ea:	f7ff fe15 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50ee:	4801      	ldr	r0, [pc, #4]	; (50f4 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    50f0:	7800      	ldrb	r0, [r0, #0]
    50f2:	bd10      	pop	{r4, pc}
    50f4:	200011e8 	.word	0x200011e8

000050f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    50f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50fa:	4605      	mov	r5, r0
    50fc:	7808      	ldrb	r0, [r1, #0]
    50fe:	784a      	ldrb	r2, [r1, #1]
    5100:	4290      	cmp	r0, r2
    5102:	d902      	bls.n	510a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    5104:	f240 1163 	movw	r1, #355	; 0x163
    5108:	e00a      	b.n	5120 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    510a:	9500      	str	r5, [sp, #0]
    510c:	b15d      	cbz	r5, 5126 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    510e:	2600      	movs	r6, #0
    5110:	1ce8      	adds	r0, r5, #3
    5112:	784c      	ldrb	r4, [r1, #1]
    5114:	f020 0003 	bic.w	r0, r0, #3
    5118:	42a8      	cmp	r0, r5
    511a:	d006      	beq.n	512a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    511c:	f240 1179 	movw	r1, #377	; 0x179
    5120:	2017      	movs	r0, #23
    5122:	f7ff fdf9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	2601      	movs	r6, #1
    5128:	e7f2      	b.n	5110 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    512a:	4f12      	ldr	r7, [pc, #72]	; (5174 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    512c:	4631      	mov	r1, r6
    512e:	4668      	mov	r0, sp
    5130:	703c      	strb	r4, [r7, #0]
    5132:	f000 f8e1 	bl	52f8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    5136:	2000      	movs	r0, #0
    5138:	4603      	mov	r3, r0
    513a:	9900      	ldr	r1, [sp, #0]
    513c:	1cc9      	adds	r1, r1, #3
    513e:	f021 0103 	bic.w	r1, r1, #3
    5142:	9100      	str	r1, [sp, #0]
    5144:	b966      	cbnz	r6, 5160 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    5146:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    514a:	6091      	str	r1, [r2, #8]
    514c:	2100      	movs	r1, #0
    514e:	e005      	b.n	515c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    5150:	f8d2 c008 	ldr.w	ip, [r2, #8]
    5154:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    5158:	1c49      	adds	r1, r1, #1
    515a:	b2c9      	uxtb	r1, r1
    515c:	42a1      	cmp	r1, r4
    515e:	d3f7      	bcc.n	5150 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5160:	9900      	ldr	r1, [sp, #0]
    5162:	1c40      	adds	r0, r0, #1
    5164:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5168:	9100      	str	r1, [sp, #0]
    516a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    516e:	d0e4      	beq.n	513a <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    5170:	1b48      	subs	r0, r1, r5
    5172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5174:	200011e8 	.word	0x200011e8

00005178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5178:	b570      	push	{r4, r5, r6, lr}
    517a:	4604      	mov	r4, r0
    517c:	f009 fabd 	bl	e6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5180:	b108      	cbz	r0, 5186 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    5182:	2010      	movs	r0, #16
    5184:	bd70      	pop	{r4, r5, r6, pc}
    5186:	7825      	ldrb	r5, [r4, #0]
    5188:	f000 f8f2 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    518c:	4602      	mov	r2, r0
    518e:	480c      	ldr	r0, [pc, #48]	; (51c0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5190:	8861      	ldrh	r1, [r4, #2]
    5192:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5196:	e00e      	b.n	51b6 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5198:	6883      	ldr	r3, [r0, #8]
    519a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    519e:	b143      	cbz	r3, 51b2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    51a0:	1c4a      	adds	r2, r1, #1
    51a2:	8062      	strh	r2, [r4, #2]
    51a4:	80a1      	strh	r1, [r4, #4]
    51a6:	6880      	ldr	r0, [r0, #8]
    51a8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    51ac:	60a0      	str	r0, [r4, #8]
    51ae:	2000      	movs	r0, #0
    51b0:	bd70      	pop	{r4, r5, r6, pc}
    51b2:	1c49      	adds	r1, r1, #1
    51b4:	b289      	uxth	r1, r1
    51b6:	4291      	cmp	r1, r2
    51b8:	d3ee      	bcc.n	5198 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    51ba:	8061      	strh	r1, [r4, #2]
    51bc:	2005      	movs	r0, #5
    51be:	bd70      	pop	{r4, r5, r6, pc}
    51c0:	200011e8 	.word	0x200011e8

000051c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    51c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51c8:	b949      	cbnz	r1, 51de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    51ca:	4c11      	ldr	r4, [pc, #68]	; (5210 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    51cc:	2700      	movs	r7, #0
    51ce:	463b      	mov	r3, r7
    51d0:	f64f 76ff 	movw	r6, #65535	; 0xffff
    51d4:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    51d8:	f814 c001 	ldrb.w	ip, [r4, r1]
    51dc:	e00d      	b.n	51fa <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    51de:	2000      	movs	r0, #0
    51e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51e4:	19dc      	adds	r4, r3, r7
    51e6:	f8d5 e008 	ldr.w	lr, [r5, #8]
    51ea:	b2a4      	uxth	r4, r4
    51ec:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    51f0:	f1be 0f00 	cmp.w	lr, #0
    51f4:	d004      	beq.n	5200 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    51f6:	1c5b      	adds	r3, r3, #1
    51f8:	b29b      	uxth	r3, r3
    51fa:	459c      	cmp	ip, r3
    51fc:	d8f2      	bhi.n	51e4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    51fe:	4634      	mov	r4, r6
    5200:	8004      	strh	r4, [r0, #0]
    5202:	4620      	mov	r0, r4
    5204:	42b4      	cmp	r4, r6
    5206:	d0ea      	beq.n	51de <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    5208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    520c:	f000 b82c 	b.w	5268 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    5210:	200011e8 	.word	0x200011e8

00005214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    5214:	b570      	push	{r4, r5, r6, lr}
    5216:	4606      	mov	r6, r0
    5218:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    521c:	f243 0502 	movw	r5, #12290	; 0x3002
    5220:	38ff      	subs	r0, #255	; 0xff
    5222:	d01a      	beq.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    5224:	b109      	cbz	r1, 522a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    5226:	2007      	movs	r0, #7
    5228:	bd70      	pop	{r4, r5, r6, pc}
    522a:	4630      	mov	r0, r6
    522c:	f000 f854 	bl	52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    5230:	0004      	movs	r4, r0
    5232:	d012      	beq.n	525a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    5234:	480a      	ldr	r0, [pc, #40]	; (5260 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    5236:	4621      	mov	r1, r4
    5238:	6802      	ldr	r2, [r0, #0]
    523a:	4630      	mov	r0, r6
    523c:	4790      	blx	r2
    523e:	4d09      	ldr	r5, [pc, #36]	; (5264 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    5240:	2000      	movs	r0, #0
    5242:	68a9      	ldr	r1, [r5, #8]
    5244:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    5248:	f000 f888 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    524c:	4602      	mov	r2, r0
    524e:	4621      	mov	r1, r4
    5250:	6868      	ldr	r0, [r5, #4]
    5252:	f009 f9e7 	bl	e624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5256:	2000      	movs	r0, #0
    5258:	bd70      	pop	{r4, r5, r6, pc}
    525a:	4628      	mov	r0, r5
    525c:	bd70      	pop	{r4, r5, r6, pc}
    525e:	0000      	.short	0x0000
    5260:	00005384 	.word	0x00005384
    5264:	200011e8 	.word	0x200011e8
    5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    526c:	4690      	mov	r8, r2
    526e:	460e      	mov	r6, r1
    5270:	4607      	mov	r7, r0
    5272:	f009 f9fd 	bl	e670 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    5276:	b148      	cbz	r0, 528c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    5278:	4815      	ldr	r0, [pc, #84]	; (52d0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    527a:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    527e:	68a8      	ldr	r0, [r5, #8]
    5280:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    5284:	b128      	cbz	r0, 5292 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    5286:	f44f 719d 	mov.w	r1, #314	; 0x13a
    528a:	e014      	b.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    528c:	f240 1139 	movw	r1, #313	; 0x139
    5290:	e011      	b.n	52b6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    5292:	6868      	ldr	r0, [r5, #4]
    5294:	2800      	cmp	r0, #0
    5296:	d018      	beq.n	52ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    5298:	4630      	mov	r0, r6
    529a:	f000 f85f 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    529e:	4601      	mov	r1, r0
    52a0:	6868      	ldr	r0, [r5, #4]
    52a2:	f009 f971 	bl	e588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    52a6:	0004      	movs	r4, r0
    52a8:	d00e      	beq.n	52c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    52aa:	68a8      	ldr	r0, [r5, #8]
    52ac:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    52b0:	b126      	cbz	r6, 52bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    52b2:	f240 1145 	movw	r1, #325	; 0x145
    52b6:	2017      	movs	r0, #23
    52b8:	f7ff fd2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52bc:	4805      	ldr	r0, [pc, #20]	; (52d4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    52be:	4642      	mov	r2, r8
    52c0:	4621      	mov	r1, r4
    52c2:	6803      	ldr	r3, [r0, #0]
    52c4:	4638      	mov	r0, r7
    52c6:	4798      	blx	r3
    52c8:	4620      	mov	r0, r4
    52ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52ce:	0000      	.short	0x0000
    52d0:	200011e8 	.word	0x200011e8
    52d4:	00005380 	.word	0x00005380
    52d8:	b570      	push	{r4, r5, r6, lr}
    52da:	460c      	mov	r4, r1
    52dc:	4605      	mov	r5, r0
    52de:	f009 f9c7 	bl	e670 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    52e2:	2800      	cmp	r0, #0
    52e4:	d005      	beq.n	52f2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    52e6:	4803      	ldr	r0, [pc, #12]	; (52f4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    52e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    52ec:	6880      	ldr	r0, [r0, #8]
    52ee:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    52f2:	bd70      	pop	{r4, r5, r6, pc}
    52f4:	200011e8 	.word	0x200011e8
    52f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52fc:	4e16      	ldr	r6, [pc, #88]	; (5358 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    52fe:	4688      	mov	r8, r1
    5300:	4605      	mov	r5, r0
    5302:	2400      	movs	r4, #0
    5304:	6828      	ldr	r0, [r5, #0]
    5306:	1cc0      	adds	r0, r0, #3
    5308:	f020 0003 	bic.w	r0, r0, #3
    530c:	6028      	str	r0, [r5, #0]
    530e:	4620      	mov	r0, r4
    5310:	f000 f824 	bl	535c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    5314:	5d31      	ldrb	r1, [r6, r4]
    5316:	4348      	muls	r0, r1
    5318:	f1b8 0f00 	cmp.w	r8, #0
    531c:	d001      	beq.n	5322 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    531e:	2200      	movs	r2, #0
    5320:	e000      	b.n	5324 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    5322:	682a      	ldr	r2, [r5, #0]
    5324:	4601      	mov	r1, r0
    5326:	9200      	str	r2, [sp, #0]
    5328:	b132      	cbz	r2, 5338 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    532a:	2700      	movs	r7, #0
    532c:	ea4f 000d 	mov.w	r0, sp
    5330:	f009 f957 	bl	e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    5334:	b11f      	cbz	r7, 533e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    5336:	e006      	b.n	5346 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    5338:	2701      	movs	r7, #1
    533a:	2000      	movs	r0, #0
    533c:	e7f8      	b.n	5330 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    533e:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    5342:	9a00      	ldr	r2, [sp, #0]
    5344:	604a      	str	r2, [r1, #4]
    5346:	6829      	ldr	r1, [r5, #0]
    5348:	1c64      	adds	r4, r4, #1
    534a:	4408      	add	r0, r1
    534c:	6028      	str	r0, [r5, #0]
    534e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    5352:	d0d7      	beq.n	5304 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    5354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5358:	200011e8 	.word	0x200011e8
    535c:	4903      	ldr	r1, [pc, #12]	; (536c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    535e:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    5362:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    5366:	1cc0      	adds	r0, r0, #3
    5368:	4008      	ands	r0, r1
    536a:	4770      	bx	lr
    536c:	0000537c 	.word	0x0000537c
    5370:	4801      	ldr	r0, [pc, #4]	; (5378 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    5372:	7800      	ldrb	r0, [r0, #0]
    5374:	4770      	bx	lr
    5376:	0000      	.short	0x0000
    5378:	200011e8 	.word	0x200011e8
    537c:	000001e0 	.word	0x000001e0
    5380:	0000e685 	.word	0x0000e685
    5384:	0000f6ef 	.word	0x0000f6ef

00005388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5388:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    538c:	4c26      	ldr	r4, [pc, #152]	; (5428 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    538e:	4680      	mov	r8, r0
    5390:	b081      	sub	sp, #4
    5392:	6820      	ldr	r0, [r4, #0]
    5394:	469a      	mov	sl, r3
    5396:	4693      	mov	fp, r2
    5398:	b158      	cbz	r0, 53b2 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    539a:	7a02      	ldrb	r2, [r0, #8]
    539c:	4542      	cmp	r2, r8
    539e:	d903      	bls.n	53a8 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    53a0:	6841      	ldr	r1, [r0, #4]
    53a2:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    53a6:	b140      	cbz	r0, 53ba <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    53a8:	f243 0002 	movw	r0, #12290	; 0x3002
    53ac:	b005      	add	sp, #20
    53ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    53b2:	21a5      	movs	r1, #165	; 0xa5
    53b4:	2018      	movs	r0, #24
    53b6:	f7ff fcaf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    53ba:	4619      	mov	r1, r3
    53bc:	9802      	ldr	r0, [sp, #8]
    53be:	f009 f979 	bl	e6b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    53c2:	b286      	uxth	r6, r0
    53c4:	4658      	mov	r0, fp
    53c6:	990e      	ldr	r1, [sp, #56]	; 0x38
    53c8:	f009 f96b 	bl	e6a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    53cc:	b285      	uxth	r5, r0
    53ce:	1970      	adds	r0, r6, r5
    53d0:	1d00      	adds	r0, r0, #4
    53d2:	b287      	uxth	r7, r0
    53d4:	6820      	ldr	r0, [r4, #0]
    53d6:	46a1      	mov	r9, r4
    53d8:	4639      	mov	r1, r7
    53da:	6800      	ldr	r0, [r0, #0]
    53dc:	f009 f8d4 	bl	e588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    53e0:	0004      	movs	r4, r0
    53e2:	d01f      	beq.n	5424 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    53e4:	8067      	strh	r7, [r4, #2]
    53e6:	8025      	strh	r5, [r4, #0]
    53e8:	4629      	mov	r1, r5
    53ea:	1d20      	adds	r0, r4, #4
    53ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    53ee:	4607      	mov	r7, r0
    53f0:	465a      	mov	r2, fp
    53f2:	2301      	movs	r3, #1
    53f4:	9500      	str	r5, [sp, #0]
    53f6:	f009 f827 	bl	e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    53fa:	8820      	ldrh	r0, [r4, #0]
    53fc:	4631      	mov	r1, r6
    53fe:	4438      	add	r0, r7
    5400:	2301      	movs	r3, #1
    5402:	9a02      	ldr	r2, [sp, #8]
    5404:	f8cd a000 	str.w	sl, [sp]
    5408:	f009 f81e 	bl	e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    540c:	8820      	ldrh	r0, [r4, #0]
    540e:	19c1      	adds	r1, r0, r7
    5410:	4638      	mov	r0, r7
    5412:	f009 f84a 	bl	e4aa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    5416:	f8d9 0000 	ldr.w	r0, [r9]
    541a:	6841      	ldr	r1, [r0, #4]
    541c:	2000      	movs	r0, #0
    541e:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    5422:	e7c3      	b.n	53ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5424:	2004      	movs	r0, #4
    5426:	e7c1      	b.n	53ac <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    5428:	20000078 	.word	0x20000078

0000542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    542c:	b570      	push	{r4, r5, r6, lr}
    542e:	4c14      	ldr	r4, [pc, #80]	; (5480 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    5430:	6823      	ldr	r3, [r4, #0]
    5432:	b18b      	cbz	r3, 5458 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    5434:	7a19      	ldrb	r1, [r3, #8]
    5436:	4281      	cmp	r1, r0
    5438:	d912      	bls.n	5460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    543a:	685a      	ldr	r2, [r3, #4]
    543c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    5440:	b171      	cbz	r1, 5460 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    5442:	2500      	movs	r5, #0
    5444:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    5448:	884a      	ldrh	r2, [r1, #2]
    544a:	6818      	ldr	r0, [r3, #0]
    544c:	f009 f8ea 	bl	e624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    5450:	6821      	ldr	r1, [r4, #0]
    5452:	2000      	movs	r0, #0
    5454:	7a0a      	ldrb	r2, [r1, #8]
    5456:	e00c      	b.n	5472 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5458:	21c8      	movs	r1, #200	; 0xc8
    545a:	2018      	movs	r0, #24
    545c:	f7ff fc5c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5460:	f243 0002 	movw	r0, #12290	; 0x3002
    5464:	bd70      	pop	{r4, r5, r6, pc}
    5466:	684b      	ldr	r3, [r1, #4]
    5468:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    546c:	b933      	cbnz	r3, 547c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    546e:	1c40      	adds	r0, r0, #1
    5470:	b2c0      	uxtb	r0, r0
    5472:	4282      	cmp	r2, r0
    5474:	d8f7      	bhi.n	5466 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    5476:	6808      	ldr	r0, [r1, #0]
    5478:	f009 f8c9 	bl	e60e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    547c:	2000      	movs	r0, #0
    547e:	bd70      	pop	{r4, r5, r6, pc}
    5480:	20000078 	.word	0x20000078

00005484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    5484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5488:	460d      	mov	r5, r1
    548a:	0004      	movs	r4, r0
    548c:	4690      	mov	r8, r2
    548e:	f04f 0600 	mov.w	r6, #0
    5492:	d009      	beq.n	54a8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    5494:	2700      	movs	r7, #0
    5496:	1ce0      	adds	r0, r4, #3
    5498:	f020 0003 	bic.w	r0, r0, #3
    549c:	42a0      	cmp	r0, r4
    549e:	d005      	beq.n	54ac <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    54a0:	2186      	movs	r1, #134	; 0x86
    54a2:	2018      	movs	r0, #24
    54a4:	f7ff fc38 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    54a8:	2701      	movs	r7, #1
    54aa:	e7f4      	b.n	5496 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    54ac:	b1cd      	cbz	r5, 54e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    54ae:	4611      	mov	r1, r2
    54b0:	2000      	movs	r0, #0
    54b2:	f009 f896 	bl	e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54b6:	300c      	adds	r0, #12
    54b8:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    54bc:	b98f      	cbnz	r7, 54e2 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    54be:	4f0a      	ldr	r7, [pc, #40]	; (54e8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    54c0:	f104 000c 	add.w	r0, r4, #12
    54c4:	00aa      	lsls	r2, r5, #2
    54c6:	603c      	str	r4, [r7, #0]
    54c8:	7225      	strb	r5, [r4, #8]
    54ca:	6060      	str	r0, [r4, #4]
    54cc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    54d0:	6020      	str	r0, [r4, #0]
    54d2:	2100      	movs	r1, #0
    54d4:	6860      	ldr	r0, [r4, #4]
    54d6:	f008 f88f 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    54da:	4641      	mov	r1, r8
    54dc:	6838      	ldr	r0, [r7, #0]
    54de:	f009 f880 	bl	e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54e2:	4630      	mov	r0, r6
    54e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54e8:	20000078 	.word	0x20000078

000054ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    54ec:	b570      	push	{r4, r5, r6, lr}
    54ee:	4d08      	ldr	r5, [pc, #32]	; (5510 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    54f0:	6828      	ldr	r0, [r5, #0]
    54f2:	2800      	cmp	r0, #0
    54f4:	d00a      	beq.n	550c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    54f6:	2400      	movs	r4, #0
    54f8:	e004      	b.n	5504 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    54fa:	4620      	mov	r0, r4
    54fc:	f7ff ff96 	bl	542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    5500:	1c64      	adds	r4, r4, #1
    5502:	b2e4      	uxtb	r4, r4
    5504:	6828      	ldr	r0, [r5, #0]
    5506:	7a00      	ldrb	r0, [r0, #8]
    5508:	42a0      	cmp	r0, r4
    550a:	d8f6      	bhi.n	54fa <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    550c:	bd70      	pop	{r4, r5, r6, pc}
    550e:	0000      	.short	0x0000
    5510:	20000078 	.word	0x20000078

00005514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    5514:	4909      	ldr	r1, [pc, #36]	; (553c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    5516:	b510      	push	{r4, lr}
    5518:	4602      	mov	r2, r0
    551a:	6809      	ldr	r1, [r1, #0]
    551c:	2000      	movs	r0, #0
    551e:	b149      	cbz	r1, 5534 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    5520:	7a0b      	ldrb	r3, [r1, #8]
    5522:	4293      	cmp	r3, r2
    5524:	d905      	bls.n	5532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5526:	6849      	ldr	r1, [r1, #4]
    5528:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    552c:	2900      	cmp	r1, #0
    552e:	d000      	beq.n	5532 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    5530:	1d08      	adds	r0, r1, #4
    5532:	bd10      	pop	{r4, pc}
    5534:	21ee      	movs	r1, #238	; 0xee
    5536:	2018      	movs	r0, #24
    5538:	f7ff fbee 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    553c:	20000078 	.word	0x20000078

00005540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    5540:	490a      	ldr	r1, [pc, #40]	; (556c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    5542:	b510      	push	{r4, lr}
    5544:	4602      	mov	r2, r0
    5546:	6809      	ldr	r1, [r1, #0]
    5548:	2000      	movs	r0, #0
    554a:	b159      	cbz	r1, 5564 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    554c:	7a0b      	ldrb	r3, [r1, #8]
    554e:	4293      	cmp	r3, r2
    5550:	d907      	bls.n	5562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5552:	6849      	ldr	r1, [r1, #4]
    5554:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5558:	2900      	cmp	r1, #0
    555a:	d002      	beq.n	5562 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    555c:	f831 0b04 	ldrh.w	r0, [r1], #4
    5560:	4408      	add	r0, r1
    5562:	bd10      	pop	{r4, pc}
    5564:	21fc      	movs	r1, #252	; 0xfc
    5566:	2018      	movs	r0, #24
    5568:	f7ff fbd6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    556c:	20000078 	.word	0x20000078

00005570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    5570:	4801      	ldr	r0, [pc, #4]	; (5578 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    5572:	7840      	ldrb	r0, [r0, #1]
    5574:	4770      	bx	lr
    5576:	0000      	.short	0x0000
    5578:	2000007c 	.word	0x2000007c

0000557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    557c:	4801      	ldr	r0, [pc, #4]	; (5584 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    557e:	6840      	ldr	r0, [r0, #4]
    5580:	4770      	bx	lr
    5582:	0000      	.short	0x0000
    5584:	2000007c 	.word	0x2000007c

00005588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    5588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    558c:	460c      	mov	r4, r1
    558e:	4607      	mov	r7, r0
    5590:	4616      	mov	r6, r2
    5592:	211c      	movs	r1, #28
    5594:	4610      	mov	r0, r2
    5596:	460d      	mov	r5, r1
    5598:	4622      	mov	r2, r4
    559a:	f008 ffb0 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    559e:	4680      	mov	r8, r0
    55a0:	b157      	cbz	r7, 55b8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    55a2:	4638      	mov	r0, r7
    55a4:	4641      	mov	r1, r8
    55a6:	4632      	mov	r2, r6
    55a8:	462b      	mov	r3, r5
    55aa:	9400      	str	r4, [sp, #0]
    55ac:	f008 ff4c 	bl	e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    55b0:	4803      	ldr	r0, [pc, #12]	; (55c0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    55b2:	6047      	str	r7, [r0, #4]
    55b4:	7004      	strb	r4, [r0, #0]
    55b6:	7046      	strb	r6, [r0, #1]
    55b8:	4640      	mov	r0, r8
    55ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    55be:	0000      	.short	0x0000
    55c0:	2000007c 	.word	0x2000007c

000055c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    55c4:	4802      	ldr	r0, [pc, #8]	; (55d0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    55c6:	7842      	ldrb	r2, [r0, #1]
    55c8:	7801      	ldrb	r1, [r0, #0]
    55ca:	6840      	ldr	r0, [r0, #4]
    55cc:	f7ff bfdc 	b.w	5588 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    55d0:	2000007c 	.word	0x2000007c
    55d4:	4909      	ldr	r1, [pc, #36]	; (55fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    55d6:	b510      	push	{r4, lr}
    55d8:	4807      	ldr	r0, [pc, #28]	; (55f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    55da:	6008      	str	r0, [r1, #0]
    55dc:	4b08      	ldr	r3, [pc, #32]	; (5600 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    55de:	2011      	movs	r0, #17
    55e0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    55e4:	2200      	movs	r2, #0
    55e6:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    55ea:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    55ee:	1c40      	adds	r0, r0, #1
    55f0:	b2c0      	uxtb	r0, r0
    55f2:	2814      	cmp	r0, #20
    55f4:	d3f4      	bcc.n	55e0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    55f6:	bd10      	pop	{r4, pc}
    55f8:	fffe0000 	.word	0xfffe0000
    55fc:	4001f508 	.word	0x4001f508
    5600:	4001f000 	.word	0x4001f000
    5604:	b570      	push	{r4, r5, r6, lr}
    5606:	2420      	movs	r4, #32
    5608:	2100      	movs	r1, #0
    560a:	2301      	movs	r3, #1
    560c:	fa20 f201 	lsr.w	r2, r0, r1
    5610:	07d2      	lsls	r2, r2, #31
    5612:	d020      	beq.n	5656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    5614:	b24a      	sxtb	r2, r1
    5616:	2a00      	cmp	r2, #0
    5618:	db10      	blt.n	563c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    561a:	bf00      	nop
    561c:	ea4f 1652 	mov.w	r6, r2, lsr #5
    5620:	ea4f 0686 	mov.w	r6, r6, lsl #2
    5624:	f002 051f 	and.w	r5, r2, #31
    5628:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    562c:	fa03 f505 	lsl.w	r5, r3, r5
    5630:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    5634:	f3bf 8f4f 	dsb	sy
    5638:	f3bf 8f6f 	isb	sy
    563c:	db0b      	blt.n	5656 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    563e:	f002 051f 	and.w	r5, r2, #31
    5642:	ea4f 1252 	mov.w	r2, r2, lsr #5
    5646:	ea4f 0282 	mov.w	r2, r2, lsl #2
    564a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    564e:	fa03 f505 	lsl.w	r5, r3, r5
    5652:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    5656:	f101 0101 	add.w	r1, r1, #1
    565a:	42a1      	cmp	r1, r4
    565c:	d3d6      	bcc.n	560c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    565e:	bd70      	pop	{r4, r5, r6, pc}
    5660:	b570      	push	{r4, r5, r6, lr}
    5662:	0042      	lsls	r2, r0, #1
    5664:	f04f 0100 	mov.w	r1, #0
    5668:	d501      	bpl.n	566e <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    566a:	4a14      	ldr	r2, [pc, #80]	; (56bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    566c:	6011      	str	r1, [r2, #0]
    566e:	f3c0 3280 	ubfx	r2, r0, #14, #1
    5672:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    5676:	429a      	cmp	r2, r3
    5678:	d003      	beq.n	5682 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    567a:	2166      	movs	r1, #102	; 0x66
    567c:	201b      	movs	r0, #27
    567e:	f7ff fb4b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5682:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    5686:	d014      	beq.n	56b2 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    5688:	4a0d      	ldr	r2, [pc, #52]	; (56c0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    568a:	2001      	movs	r0, #1
    568c:	6050      	str	r0, [r2, #4]
    568e:	1e83      	subs	r3, r0, #2
    5690:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5694:	4a0b      	ldr	r2, [pc, #44]	; (56c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    5696:	6090      	str	r0, [r2, #8]
    5698:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    569c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    56a0:	4c09      	ldr	r4, [pc, #36]	; (56c8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    56a2:	6021      	str	r1, [r4, #0]
    56a4:	1d25      	adds	r5, r4, #4
    56a6:	6028      	str	r0, [r5, #0]
    56a8:	6090      	str	r0, [r2, #8]
    56aa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    56ae:	6021      	str	r1, [r4, #0]
    56b0:	6028      	str	r0, [r5, #0]
    56b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56b6:	f7ff bf8d 	b.w	55d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    56ba:	0000      	.short	0x0000
    56bc:	4001e504 	.word	0x4001e504
    56c0:	4000e000 	.word	0x4000e000
    56c4:	4000f000 	.word	0x4000f000
    56c8:	4000f500 	.word	0x4000f500

000056cc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    56cc:	b570      	push	{r4, r5, r6, lr}
    56ce:	4c0a      	ldr	r4, [pc, #40]	; (56f8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    56d0:	460d      	mov	r5, r1
    56d2:	6020      	str	r0, [r4, #0]
    56d4:	f7ff ffc4 	bl	5660 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    56d8:	6820      	ldr	r0, [r4, #0]
    56da:	f7ff ff93 	bl	5604 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    56de:	f000 f877 	bl	57d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    56e2:	f7ff ff77 	bl	55d4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    56e6:	f008 fffd 	bl	e6e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    56ea:	4628      	mov	r0, r5
    56ec:	f000 f8aa 	bl	5844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    56f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    56f4:	f000 b8c2 	b.w	587c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    56f8:	20000084 	.word	0x20000084

000056fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    56fc:	e92d 5ffc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5700:	4e2f      	ldr	r6, [pc, #188]	; (57c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc4>)
    5702:	4683      	mov	fp, r0
    5704:	6830      	ldr	r0, [r6, #0]
    5706:	9001      	str	r0, [sp, #4]
    5708:	2701      	movs	r7, #1
    570a:	482e      	ldr	r0, [pc, #184]	; (57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    570c:	f007 fe51 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5710:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>
    5714:	b920      	cbnz	r0, 5720 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    5716:	2700      	movs	r7, #0
    5718:	f108 0001 	add.w	r0, r8, #1
    571c:	f007 fe60 	bl	d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    5720:	4c29      	ldr	r4, [pc, #164]	; (57c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xcc>)
    5722:	2500      	movs	r5, #0
    5724:	f04f 0903 	mov.w	r9, #3
    5728:	2001      	movs	r0, #1
    572a:	6060      	str	r0, [r4, #4]
    572c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    5730:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    5734:	f8c6 b000 	str.w	fp, [r6]
    5738:	6020      	str	r0, [r4, #0]
    573a:	f8df a090 	ldr.w	sl, [pc, #144]	; 57cc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xd0>
    573e:	e017      	b.n	5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5740:	f8da 0000 	ldr.w	r0, [sl]
    5744:	06c0      	lsls	r0, r0, #27
    5746:	d513      	bpl.n	5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    5748:	200e      	movs	r0, #14
    574a:	f008 ffbc 	bl	e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    574e:	f3ef 8010 	mrs	r0, PRIMASK
    5752:	9000      	str	r0, [sp, #0]
    5754:	b672      	cpsid	i
    5756:	f8c4 9304 	str.w	r9, [r4, #772]	; 0x304
    575a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    575e:	b920      	cbnz	r0, 576a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5760:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5764:	b908      	cbnz	r0, 576a <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x6e>
    5766:	f7ff f921 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    576a:	9800      	ldr	r0, [sp, #0]
    576c:	b900      	cbnz	r0, 5770 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x74>
    576e:	b662      	cpsie	i
    5770:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    5774:	b918      	cbnz	r0, 577e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5776:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    577a:	2800      	cmp	r0, #0
    577c:	d0e0      	beq.n	5740 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x44>
    577e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
    5782:	2800      	cmp	r0, #0
    5784:	d1d0      	bne.n	5728 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2c>
    5786:	b137      	cbz	r7, 5796 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x9a>
    5788:	9801      	ldr	r0, [sp, #4]
    578a:	6030      	str	r0, [r6, #0]
    578c:	f108 0001 	add.w	r0, r8, #1
    5790:	f007 fe0f 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5794:	e011      	b.n	57ba <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xbe>
    5796:	f108 0001 	add.w	r0, r8, #1
    579a:	f007 fe0a 	bl	d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    579e:	2800      	cmp	r0, #0
    57a0:	d1ba      	bne.n	5718 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    57a2:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
    57a6:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    57aa:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    57ae:	200e      	movs	r0, #14
    57b0:	f008 ff89 	bl	e6c6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    57b4:	4803      	ldr	r0, [pc, #12]	; (57c4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xc8>)
    57b6:	f007 fe13 	bl	d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    57ba:	2000      	movs	r0, #0
    57bc:	e8bd 9ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    57c0:	4000e504 	.word	0x4000e504
    57c4:	2000027f 	.word	0x2000027f
    57c8:	4000e000 	.word	0x4000e000
    57cc:	e000ed10 	.word	0xe000ed10

000057d0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    57d0:	b510      	push	{r4, lr}
    57d2:	4808      	ldr	r0, [pc, #32]	; (57f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    57d4:	f007 fe00 	bl	d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57d8:	b108      	cbz	r0, 57de <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    57da:	2124      	movs	r1, #36	; 0x24
    57dc:	e006      	b.n	57ec <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    57de:	4805      	ldr	r0, [pc, #20]	; (57f4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    57e0:	1c40      	adds	r0, r0, #1
    57e2:	f007 fdf9 	bl	d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    57e6:	2800      	cmp	r0, #0
    57e8:	d003      	beq.n	57f2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    57ea:	2128      	movs	r1, #40	; 0x28
    57ec:	201d      	movs	r0, #29
    57ee:	f7ff fa93 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    57f2:	bd10      	pop	{r4, pc}
    57f4:	2000027f 	.word	0x2000027f

000057f8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    57f8:	b570      	push	{r4, r5, r6, lr}
    57fa:	4911      	ldr	r1, [pc, #68]	; (5840 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    57fc:	680a      	ldr	r2, [r1, #0]
    57fe:	b1ea      	cbz	r2, 583c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    5800:	2300      	movs	r3, #0
    5802:	461d      	mov	r5, r3
    5804:	2401      	movs	r4, #1
    5806:	684a      	ldr	r2, [r1, #4]
    5808:	1c52      	adds	r2, r2, #1
    580a:	604a      	str	r2, [r1, #4]
    580c:	2a0c      	cmp	r2, #12
    580e:	d300      	bcc.n	5812 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    5810:	604d      	str	r5, [r1, #4]
    5812:	790e      	ldrb	r6, [r1, #4]
    5814:	fa04 f206 	lsl.w	r2, r4, r6
    5818:	680e      	ldr	r6, [r1, #0]
    581a:	4216      	tst	r6, r2
    581c:	d00b      	beq.n	5836 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    581e:	f3ef 8310 	mrs	r3, PRIMASK
    5822:	b672      	cpsid	i
    5824:	680c      	ldr	r4, [r1, #0]
    5826:	4394      	bics	r4, r2
    5828:	600c      	str	r4, [r1, #0]
    582a:	b903      	cbnz	r3, 582e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    582c:	b662      	cpsie	i
    582e:	6849      	ldr	r1, [r1, #4]
    5830:	6001      	str	r1, [r0, #0]
    5832:	2000      	movs	r0, #0
    5834:	bd70      	pop	{r4, r5, r6, pc}
    5836:	1c5b      	adds	r3, r3, #1
    5838:	2b0c      	cmp	r3, #12
    583a:	d3e4      	bcc.n	5806 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    583c:	2005      	movs	r0, #5
    583e:	bd70      	pop	{r4, r5, r6, pc}
    5840:	20000088 	.word	0x20000088

00005844 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5844:	4802      	ldr	r0, [pc, #8]	; (5850 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5846:	2100      	movs	r1, #0
    5848:	6001      	str	r1, [r0, #0]
    584a:	6041      	str	r1, [r0, #4]
    584c:	4770      	bx	lr
    584e:	0000      	.short	0x0000
    5850:	20000088 	.word	0x20000088

00005854 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5854:	b510      	push	{r4, lr}
    5856:	4c08      	ldr	r4, [pc, #32]	; (5878 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5858:	7861      	ldrb	r1, [r4, #1]
    585a:	b109      	cbz	r1, 5860 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    585c:	200f      	movs	r0, #15
    585e:	bd10      	pop	{r4, pc}
    5860:	f7ff f830 	bl	48c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5864:	7020      	strb	r0, [r4, #0]
    5866:	28ff      	cmp	r0, #255	; 0xff
    5868:	d001      	beq.n	586e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    586a:	2000      	movs	r0, #0
    586c:	bd10      	pop	{r4, pc}
    586e:	2176      	movs	r1, #118	; 0x76
    5870:	201f      	movs	r0, #31
    5872:	f7ff fa51 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5876:	0000      	.short	0x0000
    5878:	20000090 	.word	0x20000090

0000587c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    587c:	4901      	ldr	r1, [pc, #4]	; (5884 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    587e:	2000      	movs	r0, #0
    5880:	7048      	strb	r0, [r1, #1]
    5882:	4770      	bx	lr
    5884:	20000090 	.word	0x20000090

00005888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5888:	4806      	ldr	r0, [pc, #24]	; (58a4 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    588a:	4a07      	ldr	r2, [pc, #28]	; (58a8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    588c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    588e:	8852      	ldrh	r2, [r2, #2]
    5890:	4291      	cmp	r1, r2
    5892:	d104      	bne.n	589e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5894:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5898:	b108      	cbz	r0, 589e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    589a:	2000      	movs	r0, #0
    589c:	4770      	bx	lr
    589e:	2001      	movs	r0, #1
    58a0:	4770      	bx	lr
    58a2:	0000      	.short	0x0000
    58a4:	2000136c 	.word	0x2000136c
    58a8:	2000026c 	.word	0x2000026c

000058ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    58ac:	4901      	ldr	r1, [pc, #4]	; (58b4 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    58ae:	8048      	strh	r0, [r1, #2]
    58b0:	4770      	bx	lr
    58b2:	0000      	.short	0x0000
    58b4:	2000026c 	.word	0x2000026c

000058b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    58b8:	4808      	ldr	r0, [pc, #32]	; (58dc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    58ba:	4a09      	ldr	r2, [pc, #36]	; (58e0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    58bc:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    58be:	8852      	ldrh	r2, [r2, #2]
    58c0:	4291      	cmp	r1, r2
    58c2:	d109      	bne.n	58d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    58c8:	8481      	strh	r1, [r0, #36]	; 0x24
    58ca:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ce:	b119      	cbz	r1, 58d8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    58d0:	2100      	movs	r1, #0
    58d2:	7001      	strb	r1, [r0, #0]
    58d4:	2001      	movs	r0, #1
    58d6:	4770      	bx	lr
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	2000136c 	.word	0x2000136c
    58e0:	2000026c 	.word	0x2000026c

000058e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    58e4:	4807      	ldr	r0, [pc, #28]	; (5904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58e6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    58ea:	2901      	cmp	r1, #1
    58ec:	d007      	beq.n	58fe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    58ee:	2101      	movs	r1, #1
    58f0:	7001      	strb	r1, [r0, #0]
    58f2:	4805      	ldr	r0, [pc, #20]	; (5908 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    58f4:	4903      	ldr	r1, [pc, #12]	; (5904 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    58f6:	8800      	ldrh	r0, [r0, #0]
    58f8:	8488      	strh	r0, [r1, #36]	; 0x24
    58fa:	2001      	movs	r0, #1
    58fc:	4770      	bx	lr
    58fe:	2000      	movs	r0, #0
    5900:	4770      	bx	lr
    5902:	0000      	.short	0x0000
    5904:	2000136c 	.word	0x2000136c
    5908:	2000026c 	.word	0x2000026c

0000590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    590c:	4906      	ldr	r1, [pc, #24]	; (5928 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    590e:	4b07      	ldr	r3, [pc, #28]	; (592c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5910:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5912:	885b      	ldrh	r3, [r3, #2]
    5914:	429a      	cmp	r2, r3
    5916:	d105      	bne.n	5924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5918:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    591c:	b112      	cbz	r2, 5924 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    591e:	6001      	str	r1, [r0, #0]
    5920:	2001      	movs	r0, #1
    5922:	4770      	bx	lr
    5924:	2000      	movs	r0, #0
    5926:	4770      	bx	lr
    5928:	2000136c 	.word	0x2000136c
    592c:	2000026c 	.word	0x2000026c

00005930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5930:	4909      	ldr	r1, [pc, #36]	; (5958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5932:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5934:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5938:	3bff      	subs	r3, #255	; 0xff
    593a:	d002      	beq.n	5942 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    593c:	2100      	movs	r1, #0
    593e:	6001      	str	r1, [r0, #0]
    5940:	e007      	b.n	5952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5942:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5946:	4904      	ldr	r1, [pc, #16]	; (5958 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5948:	2a01      	cmp	r2, #1
    594a:	d002      	beq.n	5952 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    594c:	6001      	str	r1, [r0, #0]
    594e:	2001      	movs	r0, #1
    5950:	4770      	bx	lr
    5952:	2000      	movs	r0, #0
    5954:	4770      	bx	lr
    5956:	0000      	.short	0x0000
    5958:	2000136c 	.word	0x2000136c

0000595c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    595c:	4901      	ldr	r1, [pc, #4]	; (5964 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    595e:	8008      	strh	r0, [r1, #0]
    5960:	4770      	bx	lr
    5962:	0000      	.short	0x0000
    5964:	2000026c 	.word	0x2000026c

00005968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5968:	4905      	ldr	r1, [pc, #20]	; (5980 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    596a:	2000      	movs	r0, #0
    596c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5970:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5974:	8488      	strh	r0, [r1, #36]	; 0x24
    5976:	4903      	ldr	r1, [pc, #12]	; (5984 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5978:	8008      	strh	r0, [r1, #0]
    597a:	8048      	strh	r0, [r1, #2]
    597c:	4770      	bx	lr
    597e:	0000      	.short	0x0000
    5980:	2000136c 	.word	0x2000136c
    5984:	2000026c 	.word	0x2000026c
    5988:	4905      	ldr	r1, [pc, #20]	; (59a0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    598a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    598c:	4282      	cmp	r2, r0
    598e:	d105      	bne.n	599c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5990:	2000      	movs	r0, #0
    5992:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5996:	f64f 70ff 	movw	r0, #65535	; 0xffff
    599a:	8488      	strh	r0, [r1, #36]	; 0x24
    599c:	4770      	bx	lr
    599e:	0000      	.short	0x0000
    59a0:	2000136c 	.word	0x2000136c

000059a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    59a4:	4a0a      	ldr	r2, [pc, #40]	; (59d0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    59a6:	b110      	cbz	r0, 59ae <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    59a8:	2801      	cmp	r0, #1
    59aa:	d007      	beq.n	59bc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    59ac:	e00e      	b.n	59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59ae:	7850      	ldrb	r0, [r2, #1]
    59b0:	b160      	cbz	r0, 59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59b2:	f8d2 0002 	ldr.w	r0, [r2, #2]
    59b6:	6008      	str	r0, [r1, #0]
    59b8:	88d0      	ldrh	r0, [r2, #6]
    59ba:	e004      	b.n	59c6 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    59bc:	7810      	ldrb	r0, [r2, #0]
    59be:	b128      	cbz	r0, 59cc <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    59c0:	6890      	ldr	r0, [r2, #8]
    59c2:	6008      	str	r0, [r1, #0]
    59c4:	8990      	ldrh	r0, [r2, #12]
    59c6:	8088      	strh	r0, [r1, #4]
    59c8:	2001      	movs	r0, #1
    59ca:	4770      	bx	lr
    59cc:	2000      	movs	r0, #0
    59ce:	4770      	bx	lr
    59d0:	20000281 	.word	0x20000281

000059d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    59d4:	4a08      	ldr	r2, [pc, #32]	; (59f8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    59d6:	2301      	movs	r3, #1
    59d8:	b138      	cbz	r0, 59ea <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    59da:	2801      	cmp	r0, #1
    59dc:	d104      	bne.n	59e8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    59de:	7013      	strb	r3, [r2, #0]
    59e0:	6808      	ldr	r0, [r1, #0]
    59e2:	6090      	str	r0, [r2, #8]
    59e4:	8888      	ldrh	r0, [r1, #4]
    59e6:	8190      	strh	r0, [r2, #12]
    59e8:	4770      	bx	lr
    59ea:	7053      	strb	r3, [r2, #1]
    59ec:	6808      	ldr	r0, [r1, #0]
    59ee:	f8c2 0002 	str.w	r0, [r2, #2]
    59f2:	8888      	ldrh	r0, [r1, #4]
    59f4:	80d0      	strh	r0, [r2, #6]
    59f6:	4770      	bx	lr
    59f8:	20000281 	.word	0x20000281

000059fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    59fc:	4906      	ldr	r1, [pc, #24]	; (5a18 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    59fe:	b110      	cbz	r0, 5a06 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5a00:	2801      	cmp	r0, #1
    5a02:	d002      	beq.n	5a0a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5a04:	e005      	b.n	5a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5a06:	7848      	ldrb	r0, [r1, #1]
    5a08:	e000      	b.n	5a0c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5a0a:	7808      	ldrb	r0, [r1, #0]
    5a0c:	b108      	cbz	r0, 5a12 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5a0e:	2001      	movs	r0, #1
    5a10:	4770      	bx	lr
    5a12:	2000      	movs	r0, #0
    5a14:	4770      	bx	lr
    5a16:	0000      	.short	0x0000
    5a18:	20000281 	.word	0x20000281

00005a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5a1c:	4901      	ldr	r1, [pc, #4]	; (5a24 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5a1e:	7448      	strb	r0, [r1, #17]
    5a20:	4770      	bx	lr
    5a22:	0000      	.short	0x0000
    5a24:	20000bca 	.word	0x20000bca

00005a28 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5a28:	b578      	push	{r3, r4, r5, r6, lr}
    5a2a:	4913      	ldr	r1, [pc, #76]	; (5a78 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5a2c:	7c4a      	ldrb	r2, [r1, #17]
    5a2e:	b30a      	cbz	r2, 5a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5a30:	7c0a      	ldrb	r2, [r1, #16]
    5a32:	f88d 2000 	strb.w	r2, [sp]
    5a36:	9a00      	ldr	r2, [sp, #0]
    5a38:	9200      	str	r2, [sp, #0]
    5a3a:	f89d 2000 	ldrb.w	r2, [sp]
    5a3e:	b1ca      	cbz	r2, 5a74 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5a40:	2300      	movs	r3, #0
    5a42:	f101 0210 	add.w	r2, r1, #16
    5a46:	241f      	movs	r4, #31
    5a48:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5a4c:	7c0e      	ldrb	r6, [r1, #16]
    5a4e:	f88d 6000 	strb.w	r6, [sp]
    5a52:	9e00      	ldr	r6, [sp, #0]
    5a54:	9600      	str	r6, [sp, #0]
    5a56:	f89d 6000 	ldrb.w	r6, [sp]
    5a5a:	b14e      	cbz	r6, 5a70 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5a5c:	7013      	strb	r3, [r2, #0]
    5a5e:	7043      	strb	r3, [r0, #1]
    5a60:	7004      	strb	r4, [r0, #0]
    5a62:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5a66:	6046      	str	r6, [r0, #4]
    5a68:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5a6c:	6086      	str	r6, [r0, #8]
    5a6e:	e7ed      	b.n	5a4c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5a70:	2001      	movs	r0, #1
    5a72:	bd78      	pop	{r3, r4, r5, r6, pc}
    5a74:	2000      	movs	r0, #0
    5a76:	bd78      	pop	{r3, r4, r5, r6, pc}
    5a78:	20000bca 	.word	0x20000bca

00005a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5a7c:	b510      	push	{r4, lr}
    5a7e:	4604      	mov	r4, r0
    5a80:	f000 f966 	bl	5d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5a84:	b118      	cbz	r0, 5a8e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5a86:	21bd      	movs	r1, #189	; 0xbd
    5a88:	2027      	movs	r0, #39	; 0x27
    5a8a:	f7ff f945 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a8e:	4803      	ldr	r0, [pc, #12]	; (5a9c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5a90:	2101      	movs	r1, #1
    5a92:	f009 fa01 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5a96:	4802      	ldr	r0, [pc, #8]	; (5aa0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5a98:	62c4      	str	r4, [r0, #44]	; 0x2c
    5a9a:	bd10      	pop	{r4, pc}
    5a9c:	20000ba8 	.word	0x20000ba8
    5aa0:	200000ac 	.word	0x200000ac

00005aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5aa4:	4901      	ldr	r1, [pc, #4]	; (5aac <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5aa6:	2001      	movs	r0, #1
    5aa8:	7188      	strb	r0, [r1, #6]
    5aaa:	4770      	bx	lr
    5aac:	200000ac 	.word	0x200000ac

00005ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5ab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ab4:	4d6b      	ldr	r5, [pc, #428]	; (5c64 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b4>)
    5ab6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5ab8:	782e      	ldrb	r6, [r5, #0]
    5aba:	bbee      	cbnz	r6, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5abc:	b3e2      	cbz	r2, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5abe:	b3db      	cbz	r3, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5ac0:	b3d4      	cbz	r4, 5b38 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5ac2:	f105 0614 	add.w	r6, r5, #20
    5ac6:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5aca:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5ace:	2700      	movs	r7, #0
    5ad0:	71af      	strb	r7, [r5, #6]
    5ad2:	716f      	strb	r7, [r5, #5]
    5ad4:	70ef      	strb	r7, [r5, #3]
    5ad6:	70af      	strb	r7, [r5, #2]
    5ad8:	712f      	strb	r7, [r5, #4]
    5ada:	81af      	strh	r7, [r5, #12]
    5adc:	81ef      	strh	r7, [r5, #14]
    5ade:	f000 f97b 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ae2:	4606      	mov	r6, r0
    5ae4:	f000 f972 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ae8:	4604      	mov	r4, r0
    5aea:	f006 feb5 	bl	c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5aee:	f006 fba5 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5af2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5af6:	f006 ff39 	bl	c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5afa:	f104 0018 	add.w	r0, r4, #24
    5afe:	f007 f80f 	bl	cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5b02:	6920      	ldr	r0, [r4, #16]
    5b04:	f007 f802 	bl	cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5b08:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5b0c:	f007 f822 	bl	cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5b10:	f04f 0b01 	mov.w	fp, #1
    5b14:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    5b18:	2000      	movs	r0, #0
    5b1a:	f006 fd69 	bl	c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5b1e:	2800      	cmp	r0, #0
    5b20:	d07e      	beq.n	5c20 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    5b22:	4851      	ldr	r0, [pc, #324]	; (5c68 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1b8>)
    5b24:	f006 fdd8 	bl	c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5b28:	8820      	ldrh	r0, [r4, #0]
    5b2a:	f7ff fd09 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5b2e:	6328      	str	r0, [r5, #48]	; 0x30
    5b30:	8820      	ldrh	r0, [r4, #0]
    5b32:	f7ff fcef 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5b36:	e000      	b.n	5b3a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    5b38:	e00a      	b.n	5b50 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    5b3a:	6368      	str	r0, [r5, #52]	; 0x34
    5b3c:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    5b40:	f88d 0000 	strb.w	r0, [sp]
    5b44:	9800      	ldr	r0, [sp, #0]
    5b46:	9000      	str	r0, [sp, #0]
    5b48:	f89d 0000 	ldrb.w	r0, [sp]
    5b4c:	b118      	cbz	r0, 5b56 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    5b4e:	e012      	b.n	5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b50:	f44f 718a 	mov.w	r1, #276	; 0x114
    5b54:	e082      	b.n	5c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    5b56:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5b58:	b168      	cbz	r0, 5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b5a:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    5b5c:	88b1      	ldrh	r1, [r6, #4]
    5b5e:	4288      	cmp	r0, r1
    5b60:	d109      	bne.n	5b76 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5b62:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    5b66:	2201      	movs	r2, #1
    5b68:	4408      	add	r0, r1
    5b6a:	8670      	strh	r0, [r6, #50]	; 0x32
    5b6c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    5b70:	6f21      	ldr	r1, [r4, #112]	; 0x70
    5b72:	f7fd fdad 	bl	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5b76:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5b7a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>
    5b7e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5b82:	f109 0808 	add.w	r8, r9, #8
    5b86:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5b8a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5b8c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5b90:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5b92:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5b96:	f000 f98d 	bl	5eb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    5b9a:	4601      	mov	r1, r0
    5b9c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5b9e:	46ba      	mov	sl, r7
    5ba0:	f008 ff65 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5ba4:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5ba6:	4281      	cmp	r1, r0
    5ba8:	d200      	bcs.n	5bac <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5baa:	4608      	mov	r0, r1
    5bac:	7228      	strb	r0, [r5, #8]
    5bae:	46a8      	mov	r8, r5
    5bb0:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5bb4:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5bb6:	7cf7      	ldrb	r7, [r6, #19]
    5bb8:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5bba:	2908      	cmp	r1, #8
    5bbc:	d100      	bne.n	5bc0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5bbe:	2104      	movs	r1, #4
    5bc0:	f008 ff55 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5bc4:	b90f      	cbnz	r7, 5bca <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    5bc6:	1d00      	adds	r0, r0, #4
    5bc8:	b280      	uxth	r0, r0
    5bca:	4285      	cmp	r5, r0
    5bcc:	d200      	bcs.n	5bd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    5bce:	4628      	mov	r0, r5
    5bd0:	b2c0      	uxtb	r0, r0
    5bd2:	f888 0009 	strb.w	r0, [r8, #9]
    5bd6:	7cf2      	ldrb	r2, [r6, #19]
    5bd8:	b102      	cbz	r2, 5bdc <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    5bda:	2204      	movs	r2, #4
    5bdc:	4410      	add	r0, r2
    5bde:	b2c0      	uxtb	r0, r0
    5be0:	f888 0007 	strb.w	r0, [r8, #7]
    5be4:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    5be8:	1d09      	adds	r1, r1, #4
    5bea:	4281      	cmp	r1, r0
    5bec:	d202      	bcs.n	5bf4 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x144>
    5bee:	f240 119f 	movw	r1, #415	; 0x19f
    5bf2:	e033      	b.n	5c5c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>
    5bf4:	7cb0      	ldrb	r0, [r6, #18]
    5bf6:	b1b0      	cbz	r0, 5c26 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x176>
    5bf8:	481c      	ldr	r0, [pc, #112]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5bfa:	3008      	adds	r0, #8
    5bfc:	f880 b018 	strb.w	fp, [r0, #24]
    5c00:	e9d6 1216 	ldrd	r1, r2, [r6, #88]	; 0x58
    5c04:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5c08:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5c0c:	f008 fdf4 	bl	e7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5c10:	4916      	ldr	r1, [pc, #88]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5c12:	4603      	mov	r3, r0
    5c14:	22fb      	movs	r2, #251	; 0xfb
    5c16:	3108      	adds	r1, #8
    5c18:	2000      	movs	r0, #0
    5c1a:	f006 fb59 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5c1e:	e000      	b.n	5c22 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5c20:	e018      	b.n	5c54 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    5c22:	f006 fb8b 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5c26:	2001      	movs	r0, #1
    5c28:	f000 fb94 	bl	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5c2c:	4810      	ldr	r0, [pc, #64]	; (5c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1c0>)
    5c2e:	6800      	ldr	r0, [r0, #0]
    5c30:	2803      	cmp	r0, #3
    5c32:	d011      	beq.n	5c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5c34:	280b      	cmp	r0, #11
    5c36:	d00f      	beq.n	5c58 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5c38:	4648      	mov	r0, r9
    5c3a:	f840 af52 	str.w	sl, [r0, #82]!
    5c3e:	f8c0 a004 	str.w	sl, [r0, #4]
    5c42:	480a      	ldr	r0, [pc, #40]	; (5c6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1bc>)
    5c44:	88b1      	ldrh	r1, [r6, #4]
    5c46:	3052      	adds	r0, #82	; 0x52
    5c48:	8041      	strh	r1, [r0, #2]
    5c4a:	8821      	ldrh	r1, [r4, #0]
    5c4c:	8001      	strh	r1, [r0, #0]
    5c4e:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5c52:	7101      	strb	r1, [r0, #4]
    5c54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c58:	f240 11c7 	movw	r1, #455	; 0x1c7
    5c5c:	2027      	movs	r0, #39	; 0x27
    5c5e:	f7ff f85b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c62:	0000      	.short	0x0000
    5c64:	200000ac 	.word	0x200000ac
    5c68:	000064d8 	.word	0x000064d8
    5c6c:	20000b78 	.word	0x20000b78
    5c70:	40001550 	.word	0x40001550

00005c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c78:	4605      	mov	r5, r0
    5c7a:	f000 f8ad 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5c7e:	4e33      	ldr	r6, [pc, #204]	; (5d4c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5c80:	4604      	mov	r4, r0
    5c82:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5c84:	7847      	ldrb	r7, [r0, #1]
    5c86:	b10d      	cbz	r5, 5c8c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5c88:	2d01      	cmp	r5, #1
    5c8a:	d103      	bne.n	5c94 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5c8c:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5c8e:	f007 fd62 	bl	d756 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5c92:	7070      	strb	r0, [r6, #1]
    5c94:	7870      	ldrb	r0, [r6, #1]
    5c96:	f04f 0800 	mov.w	r8, #0
    5c9a:	f04f 0901 	mov.w	r9, #1
    5c9e:	b150      	cbz	r0, 5cb6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5ca0:	2801      	cmp	r0, #1
    5ca2:	d01a      	beq.n	5cda <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5ca4:	2802      	cmp	r0, #2
    5ca6:	d034      	beq.n	5d12 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5ca8:	2803      	cmp	r0, #3
    5caa:	d048      	beq.n	5d3e <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5cac:	f240 4114 	movw	r1, #1044	; 0x414
    5cb0:	2027      	movs	r0, #39	; 0x27
    5cb2:	f7ff f831 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cb6:	2d01      	cmp	r5, #1
    5cb8:	d032      	beq.n	5d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5cba:	f000 f8e7 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5cbe:	4639      	mov	r1, r7
    5cc0:	2201      	movs	r2, #1
    5cc2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5cc4:	f008 fa21 	bl	e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5cc8:	e028      	b.n	5d1c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5cca:	bf00      	nop
    5ccc:	f884 8008 	strb.w	r8, [r4, #8]
    5cd0:	e031      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5cd2:	bf00      	nop
    5cd4:	f884 9008 	strb.w	r9, [r4, #8]
    5cd8:	e02d      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5cda:	2d01      	cmp	r5, #1
    5cdc:	d008      	beq.n	5cf0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5cde:	f000 f8d5 	bl	5e8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5ce2:	4639      	mov	r1, r7
    5ce4:	2200      	movs	r2, #0
    5ce6:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ce8:	f008 fa0f 	bl	e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5cec:	2d02      	cmp	r5, #2
    5cee:	d00b      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5cf0:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5cf4:	1c40      	adds	r0, r0, #1
    5cf6:	f141 0100 	adc.w	r1, r1, #0
    5cfa:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5cfe:	7a20      	ldrb	r0, [r4, #8]
    5d00:	2801      	cmp	r0, #1
    5d02:	d003      	beq.n	5d0c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5d04:	f884 9008 	strb.w	r9, [r4, #8]
    5d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d0c:	f884 8008 	strb.w	r8, [r4, #8]
    5d10:	e7fa      	b.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d12:	2d01      	cmp	r5, #1
    5d14:	d004      	beq.n	5d20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5d16:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d18:	f008 fc31 	bl	e57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5d1c:	2d02      	cmp	r5, #2
    5d1e:	d0f3      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d20:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5d24:	1c40      	adds	r0, r0, #1
    5d26:	f141 0100 	adc.w	r1, r1, #0
    5d2a:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5d2e:	7a20      	ldrb	r0, [r4, #8]
    5d30:	2801      	cmp	r0, #1
    5d32:	d1cf      	bne.n	5cd4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5d34:	e7ca      	b.n	5ccc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5d3a:	f005 bc21 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5d3e:	2d01      	cmp	r5, #1
    5d40:	d0e2      	beq.n	5d08 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5d42:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5d44:	f008 fc1b 	bl	e57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5d48:	e7f5      	b.n	5d36 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5d4a:	0000      	.short	0x0000
    5d4c:	200000ac 	.word	0x200000ac

00005d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5d50:	4804      	ldr	r0, [pc, #16]	; (5d64 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5d52:	7800      	ldrb	r0, [r0, #0]
    5d54:	b108      	cbz	r0, 5d5a <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5d56:	200c      	movs	r0, #12
    5d58:	4770      	bx	lr
    5d5a:	4903      	ldr	r1, [pc, #12]	; (5d68 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5d5c:	2000      	movs	r0, #0
    5d5e:	7448      	strb	r0, [r1, #17]
    5d60:	4770      	bx	lr
    5d62:	0000      	.short	0x0000
    5d64:	200000ac 	.word	0x200000ac
    5d68:	20000bca 	.word	0x20000bca

00005d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5d6c:	4812      	ldr	r0, [pc, #72]	; (5db8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5d6e:	b508      	push	{r3, lr}
    5d70:	7801      	ldrb	r1, [r0, #0]
    5d72:	b139      	cbz	r1, 5d84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    5d74:	7800      	ldrb	r0, [r0, #0]
    5d76:	2801      	cmp	r0, #1
    5d78:	d006      	beq.n	5d88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5d7a:	f240 11df 	movw	r1, #479	; 0x1df
    5d7e:	2027      	movs	r0, #39	; 0x27
    5d80:	f7fe ffca 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d84:	f000 f9ce 	bl	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5d88:	f000 f820 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5d8c:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    5d90:	f88d 1000 	strb.w	r1, [sp]
    5d94:	9900      	ldr	r1, [sp, #0]
    5d96:	9100      	str	r1, [sp, #0]
    5d98:	f89d 1000 	ldrb.w	r1, [sp]
    5d9c:	2900      	cmp	r1, #0
    5d9e:	d10a      	bne.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5da0:	6f01      	ldr	r1, [r0, #112]	; 0x70
    5da2:	2900      	cmp	r1, #0
    5da4:	d007      	beq.n	5db6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5da6:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    5daa:	2200      	movs	r2, #0
    5dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5db0:	4611      	mov	r1, r2
    5db2:	f7fd bc8d 	b.w	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5db6:	bd08      	pop	{r3, pc}
    5db8:	200000ac 	.word	0x200000ac
    5dbc:	4a02      	ldr	r2, [pc, #8]	; (5dc8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5dbe:	8993      	ldrh	r3, [r2, #12]
    5dc0:	4303      	orrs	r3, r0
    5dc2:	8193      	strh	r3, [r2, #12]
    5dc4:	6952      	ldr	r2, [r2, #20]
    5dc6:	4710      	bx	r2
    5dc8:	200000ac 	.word	0x200000ac
    5dcc:	4801      	ldr	r0, [pc, #4]	; (5dd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5dce:	6840      	ldr	r0, [r0, #4]
    5dd0:	4770      	bx	lr
    5dd2:	0000      	.short	0x0000
    5dd4:	200000e4 	.word	0x200000e4
    5dd8:	4801      	ldr	r0, [pc, #4]	; (5de0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5dda:	6840      	ldr	r0, [r0, #4]
    5ddc:	3078      	adds	r0, #120	; 0x78
    5dde:	4770      	bx	lr
    5de0:	200000e4 	.word	0x200000e4
    5de4:	4a01      	ldr	r2, [pc, #4]	; (5dec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5de6:	2100      	movs	r1, #0
    5de8:	6952      	ldr	r2, [r2, #20]
    5dea:	4710      	bx	r2
    5dec:	200000ac 	.word	0x200000ac
    5df0:	b570      	push	{r4, r5, r6, lr}
    5df2:	f7ff fff1 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5df6:	4604      	mov	r4, r0
    5df8:	f7ff ffe8 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5dfc:	4605      	mov	r5, r0
    5dfe:	4621      	mov	r1, r4
    5e00:	f008 fefd 	bl	ebfe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5e04:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5e08:	2901      	cmp	r1, #1
    5e0a:	d114      	bne.n	5e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d012      	beq.n	5e36 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5e10:	4909      	ldr	r1, [pc, #36]	; (5e38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    5e12:	2001      	movs	r0, #1
    5e14:	684a      	ldr	r2, [r1, #4]
    5e16:	8829      	ldrh	r1, [r5, #0]
    5e18:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    5e1c:	7a61      	ldrb	r1, [r4, #9]
    5e1e:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    5e22:	7aa1      	ldrb	r1, [r4, #10]
    5e24:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    5e28:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    5e2c:	7010      	strb	r0, [r2, #0]
    5e2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e32:	f005 bba5 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5e36:	bd70      	pop	{r4, r5, r6, pc}
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b570      	push	{r4, r5, r6, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	2901      	cmp	r1, #1
    5e42:	d81c      	bhi.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e44:	4c10      	ldr	r4, [pc, #64]	; (5e88 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    5e46:	69a1      	ldr	r1, [r4, #24]
    5e48:	4788      	blx	r1
    5e4a:	b1c0      	cbz	r0, 5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e4c:	7960      	ldrb	r0, [r4, #5]
    5e4e:	b9b0      	cbnz	r0, 5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e50:	2d01      	cmp	r5, #1
    5e52:	d116      	bne.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5e54:	f104 0010 	add.w	r0, r4, #16
    5e58:	7800      	ldrb	r0, [r0, #0]
    5e5a:	06c1      	lsls	r1, r0, #27
    5e5c:	d405      	bmi.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5e5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5e60:	7809      	ldrb	r1, [r1, #0]
    5e62:	06c9      	lsls	r1, r1, #27
    5e64:	d401      	bmi.n	5e6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5e66:	2101      	movs	r1, #1
    5e68:	e000      	b.n	5e6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5e6a:	2100      	movs	r1, #0
    5e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    5e6e:	b91a      	cbnz	r2, 5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e70:	8962      	ldrh	r2, [r4, #10]
    5e72:	b10a      	cbz	r2, 5e78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5e74:	06c0      	lsls	r0, r0, #27
    5e76:	d502      	bpl.n	5e7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5e78:	89a0      	ldrh	r0, [r4, #12]
    5e7a:	4301      	orrs	r1, r0
    5e7c:	d001      	beq.n	5e82 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5e7e:	2001      	movs	r0, #1
    5e80:	bd70      	pop	{r4, r5, r6, pc}
    5e82:	2000      	movs	r0, #0
    5e84:	bd70      	pop	{r4, r5, r6, pc}
    5e86:	0000      	.short	0x0000
    5e88:	200000ac 	.word	0x200000ac
    5e8c:	b510      	push	{r4, lr}
    5e8e:	4c08      	ldr	r4, [pc, #32]	; (5eb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    5e90:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5e92:	b138      	cbz	r0, 5ea4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5e94:	8962      	ldrh	r2, [r4, #10]
    5e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5e98:	1cd2      	adds	r2, r2, #3
    5e9a:	f007 fb33 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5e9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    5ea0:	6260      	str	r0, [r4, #36]	; 0x24
    5ea2:	bd10      	pop	{r4, pc}
    5ea4:	f240 415a 	movw	r1, #1114	; 0x45a
    5ea8:	2027      	movs	r0, #39	; 0x27
    5eaa:	f7fe ff35 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5eae:	0000      	.short	0x0000
    5eb0:	200000ac 	.word	0x200000ac
    5eb4:	b510      	push	{r4, lr}
    5eb6:	f7ff ff89 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5eba:	4604      	mov	r4, r0
    5ebc:	f7ff ff8c 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ec0:	7b41      	ldrb	r1, [r0, #13]
    5ec2:	4a0a      	ldr	r2, [pc, #40]	; (5eec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    5ec4:	2924      	cmp	r1, #36	; 0x24
    5ec6:	d008      	beq.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5ec8:	7b80      	ldrb	r0, [r0, #14]
    5eca:	2824      	cmp	r0, #36	; 0x24
    5ecc:	d005      	beq.n	5eda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5ece:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5ed2:	2804      	cmp	r0, #4
    5ed4:	d100      	bne.n	5ed8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5ed6:	2008      	movs	r0, #8
    5ed8:	bd10      	pop	{r4, pc}
    5eda:	6850      	ldr	r0, [r2, #4]
    5edc:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    5ee0:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ee8:	f008 bc94 	b.w	e814 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    5eec:	200000e4 	.word	0x200000e4
    5ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ef4:	4689      	mov	r9, r1
    5ef6:	4606      	mov	r6, r0
    5ef8:	f7ff ff6e 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5efc:	4c58      	ldr	r4, [pc, #352]	; (6060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    5efe:	2700      	movs	r7, #0
    5f00:	4605      	mov	r5, r0
    5f02:	f88d 7000 	strb.w	r7, [sp]
    5f06:	7820      	ldrb	r0, [r4, #0]
    5f08:	2802      	cmp	r0, #2
    5f0a:	d004      	beq.n	5f16 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    5f0c:	f240 41b9 	movw	r1, #1209	; 0x4b9
    5f10:	2027      	movs	r0, #39	; 0x27
    5f12:	f7fe ff01 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f16:	7ba0      	ldrb	r0, [r4, #14]
    5f18:	0640      	lsls	r0, r0, #25
    5f1a:	d406      	bmi.n	5f2a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    5f1c:	2040      	movs	r0, #64	; 0x40
    5f1e:	f7ff ff61 	bl	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    5f22:	89e0      	ldrh	r0, [r4, #14]
    5f24:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    5f28:	81e0      	strh	r0, [r4, #14]
    5f2a:	7ce8      	ldrb	r0, [r5, #19]
    5f2c:	f04f 0801 	mov.w	r8, #1
    5f30:	b3c6      	cbz	r6, 5fa4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    5f32:	f006 fa33 	bl	c39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    5f36:	f006 fa17 	bl	c368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    5f3a:	b968      	cbnz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f3c:	7ce8      	ldrb	r0, [r5, #19]
    5f3e:	b158      	cbz	r0, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f40:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f42:	7841      	ldrb	r1, [r0, #1]
    5f44:	b141      	cbz	r1, 5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f46:	7800      	ldrb	r0, [r0, #0]
    5f48:	7a29      	ldrb	r1, [r5, #8]
    5f4a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f4e:	4288      	cmp	r0, r1
    5f50:	d102      	bne.n	5f58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    5f52:	f884 8002 	strb.w	r8, [r4, #2]
    5f56:	e064      	b.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f5a:	7841      	ldrb	r1, [r0, #1]
    5f5c:	8161      	strh	r1, [r4, #10]
    5f5e:	b121      	cbz	r1, 5f6a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    5f60:	6b60      	ldr	r0, [r4, #52]	; 0x34
    5f62:	f008 fad9 	bl	e518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5f66:	62a0      	str	r0, [r4, #40]	; 0x28
    5f68:	e000      	b.n	5f6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    5f6a:	62a7      	str	r7, [r4, #40]	; 0x28
    5f6c:	89e0      	ldrh	r0, [r4, #14]
    5f6e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    5f72:	81e0      	strh	r0, [r4, #14]
    5f74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f76:	79e9      	ldrb	r1, [r5, #7]
    5f78:	7800      	ldrb	r0, [r0, #0]
    5f7a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    5f7e:	4288      	cmp	r0, r1
    5f80:	d005      	beq.n	5f8e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    5f82:	f000 f963 	bl	624c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    5f86:	89e0      	ldrh	r0, [r4, #14]
    5f88:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5f8c:	81e0      	strh	r0, [r4, #14]
    5f8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5f90:	7a29      	ldrb	r1, [r5, #8]
    5f92:	7800      	ldrb	r0, [r0, #0]
    5f94:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5f98:	4288      	cmp	r0, r1
    5f9a:	d10e      	bne.n	5fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5f9c:	4668      	mov	r0, sp
    5f9e:	f000 f917 	bl	61d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    5fa2:	e00a      	b.n	5fba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5fa4:	e7ff      	b.n	5fa6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5fa6:	b108      	cbz	r0, 5fac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5fa8:	f006 f9f2 	bl	c390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5fac:	78e0      	ldrb	r0, [r4, #3]
    5fae:	1c40      	adds	r0, r0, #1
    5fb0:	70e0      	strb	r0, [r4, #3]
    5fb2:	89e0      	ldrh	r0, [r4, #14]
    5fb4:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5fb8:	81e0      	strh	r0, [r4, #14]
    5fba:	7ca8      	ldrb	r0, [r5, #18]
    5fbc:	b1a0      	cbz	r0, 5fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    5fbe:	f7ff ff05 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5fc2:	4928      	ldr	r1, [pc, #160]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fc4:	f881 8018 	strb.w	r8, [r1, #24]
    5fc8:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5fd0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5fd4:	f008 fc10 	bl	e7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5fd8:	4603      	mov	r3, r0
    5fda:	22fb      	movs	r2, #251	; 0xfb
    5fdc:	4921      	ldr	r1, [pc, #132]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fde:	2000      	movs	r0, #0
    5fe0:	f006 f976 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5fe4:	f006 f9aa 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5fe8:	4d1e      	ldr	r5, [pc, #120]	; (6064 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5fea:	354a      	adds	r5, #74	; 0x4a
    5fec:	f1b9 0f00 	cmp.w	r9, #0
    5ff0:	d104      	bne.n	5ffc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    5ff2:	78e1      	ldrb	r1, [r4, #3]
    5ff4:	2001      	movs	r0, #1
    5ff6:	f7ff ff21 	bl	5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    5ffa:	b1b0      	cbz	r0, 602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    5ffc:	f006 fd64 	bl	cac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    6000:	f89d 0000 	ldrb.w	r0, [sp]
    6004:	b110      	cbz	r0, 600c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    6006:	2000      	movs	r0, #0
    6008:	f7ff fe34 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    600c:	b136      	cbz	r6, 601c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    600e:	70e7      	strb	r7, [r4, #3]
    6010:	7968      	ldrb	r0, [r5, #5]
    6012:	1c40      	adds	r0, r0, #1
    6014:	7168      	strb	r0, [r5, #5]
    6016:	f7ff feeb 	bl	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    601a:	e002      	b.n	6022 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    601c:	79a8      	ldrb	r0, [r5, #6]
    601e:	1c40      	adds	r0, r0, #1
    6020:	71a8      	strb	r0, [r5, #6]
    6022:	f000 f87f 	bl	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    6026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    602a:	f89d 0000 	ldrb.w	r0, [sp]
    602e:	b110      	cbz	r0, 6036 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    6030:	2001      	movs	r0, #1
    6032:	f7ff fe1f 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6036:	2000      	movs	r0, #0
    6038:	f000 f98c 	bl	6354 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    603c:	f89d 0000 	ldrb.w	r0, [sp]
    6040:	b110      	cbz	r0, 6048 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    6042:	2002      	movs	r0, #2
    6044:	f7ff fe16 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    6048:	b136      	cbz	r6, 6058 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    604a:	70e7      	strb	r7, [r4, #3]
    604c:	7968      	ldrb	r0, [r5, #5]
    604e:	1c40      	adds	r0, r0, #1
    6050:	7168      	strb	r0, [r5, #5]
    6052:	f7ff fecd 	bl	5df0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    6056:	e7e6      	b.n	6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6058:	79a8      	ldrb	r0, [r5, #6]
    605a:	1c40      	adds	r0, r0, #1
    605c:	71a8      	strb	r0, [r5, #6]
    605e:	e7e2      	b.n	6026 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6060:	200000ac 	.word	0x200000ac
    6064:	20000b80 	.word	0x20000b80
    6068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    606c:	4688      	mov	r8, r1
    606e:	4681      	mov	r9, r0
    6070:	f7ff feb2 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6074:	4d29      	ldr	r5, [pc, #164]	; (611c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    6076:	4604      	mov	r4, r0
    6078:	7828      	ldrb	r0, [r5, #0]
    607a:	2801      	cmp	r0, #1
    607c:	d004      	beq.n	6088 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    607e:	f240 4169 	movw	r1, #1129	; 0x469
    6082:	2027      	movs	r0, #39	; 0x27
    6084:	f7fe fe48 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6088:	7860      	ldrb	r0, [r4, #1]
    608a:	2600      	movs	r6, #0
    608c:	2701      	movs	r7, #1
    608e:	b120      	cbz	r0, 609a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    6090:	7066      	strb	r6, [r4, #1]
    6092:	2100      	movs	r1, #0
    6094:	2004      	movs	r0, #4
    6096:	f7ff fe91 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    609a:	6a29      	ldr	r1, [r5, #32]
    609c:	7808      	ldrb	r0, [r1, #0]
    609e:	43c0      	mvns	r0, r0
    60a0:	0780      	lsls	r0, r0, #30
    60a2:	d109      	bne.n	60b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    60a4:	79a0      	ldrb	r0, [r4, #6]
    60a6:	bb88      	cbnz	r0, 610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    60a8:	2002      	movs	r0, #2
    60aa:	f7ff fe87 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    60ae:	6a28      	ldr	r0, [r5, #32]
    60b0:	7800      	ldrb	r0, [r0, #0]
    60b2:	43c0      	mvns	r0, r0
    60b4:	0780      	lsls	r0, r0, #30
    60b6:	d029      	beq.n	610c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    60b8:	6a28      	ldr	r0, [r5, #32]
    60ba:	7840      	ldrb	r0, [r0, #1]
    60bc:	b110      	cbz	r0, 60c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    60be:	2002      	movs	r0, #2
    60c0:	71a0      	strb	r0, [r4, #6]
    60c2:	e000      	b.n	60c6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    60c4:	71a7      	strb	r7, [r4, #6]
    60c6:	7ce0      	ldrb	r0, [r4, #19]
    60c8:	b1a0      	cbz	r0, 60f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    60ca:	f7ff fe7f 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    60ce:	4914      	ldr	r1, [pc, #80]	; (6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    60d0:	7a6d      	ldrb	r5, [r5, #9]
    60d2:	760e      	strb	r6, [r1, #24]
    60d4:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    60d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
    60dc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    60e0:	f008 fb8a 	bl	e7f8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    60e4:	4603      	mov	r3, r0
    60e6:	462a      	mov	r2, r5
    60e8:	490d      	ldr	r1, [pc, #52]	; (6120 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    60ea:	2001      	movs	r0, #1
    60ec:	f006 f8f0 	bl	c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    60f0:	f006 f924 	bl	c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    60f4:	ea38 0009 	bics.w	r0, r8, r9
    60f8:	d004      	beq.n	6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    60fa:	2100      	movs	r1, #0
    60fc:	4608      	mov	r0, r1
    60fe:	f7ff fe9d 	bl	5e3c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    6102:	b128      	cbz	r0, 6110 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    6104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6108:	f000 b80c 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    610c:	2003      	movs	r0, #3
    610e:	e7d7      	b.n	60c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    6110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6114:	2000      	movs	r0, #0
    6116:	f000 b8df 	b.w	62d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    611a:	0000      	.short	0x0000
    611c:	200000ac 	.word	0x200000ac
    6120:	20000b80 	.word	0x20000b80
    6124:	b510      	push	{r4, lr}
    6126:	f006 f9cf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    612a:	f006 f887 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    612e:	4c0d      	ldr	r4, [pc, #52]	; (6164 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    6130:	89e0      	ldrh	r0, [r4, #14]
    6132:	f7ff fe57 	bl	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6136:	69e2      	ldr	r2, [r4, #28]
    6138:	7961      	ldrb	r1, [r4, #5]
    613a:	78a0      	ldrb	r0, [r4, #2]
    613c:	4790      	blx	r2
    613e:	480a      	ldr	r0, [pc, #40]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6140:	7c40      	ldrb	r0, [r0, #17]
    6142:	b158      	cbz	r0, 615c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    6144:	4808      	ldr	r0, [pc, #32]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6146:	3852      	subs	r0, #82	; 0x52
    6148:	f850 1f52 	ldr.w	r1, [r0, #82]!
    614c:	6081      	str	r1, [r0, #8]
    614e:	6841      	ldr	r1, [r0, #4]
    6150:	60c1      	str	r1, [r0, #12]
    6152:	4805      	ldr	r0, [pc, #20]	; (6168 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6154:	2101      	movs	r1, #1
    6156:	7401      	strb	r1, [r0, #16]
    6158:	f005 fa12 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    615c:	2000      	movs	r0, #0
    615e:	7020      	strb	r0, [r4, #0]
    6160:	bd10      	pop	{r4, pc}
    6162:	0000      	.short	0x0000
    6164:	200000ac 	.word	0x200000ac
    6168:	20000bca 	.word	0x20000bca
    616c:	4808      	ldr	r0, [pc, #32]	; (6190 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    616e:	b510      	push	{r4, lr}
    6170:	7800      	ldrb	r0, [r0, #0]
    6172:	2802      	cmp	r0, #2
    6174:	d004      	beq.n	6180 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    6176:	f240 2117 	movw	r1, #535	; 0x217
    617a:	2027      	movs	r0, #39	; 0x27
    617c:	f7fe fdcc 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6180:	4904      	ldr	r1, [pc, #16]	; (6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    6182:	2001      	movs	r0, #1
    6184:	71c8      	strb	r0, [r1, #7]
    6186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    618a:	f7ff bfcb 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    618e:	0000      	.short	0x0000
    6190:	200000ac 	.word	0x200000ac
    6194:	20000bca 	.word	0x20000bca
    6198:	b430      	push	{r4, r5}
    619a:	4b0c      	ldr	r3, [pc, #48]	; (61cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    619c:	b942      	cbnz	r2, 61b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    619e:	79da      	ldrb	r2, [r3, #7]
    61a0:	2aff      	cmp	r2, #255	; 0xff
    61a2:	d105      	bne.n	61b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    61a4:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    61a8:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    61ac:	42a2      	cmp	r2, r4
    61ae:	d00b      	beq.n	61c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    61b0:	b131      	cbz	r1, 61c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    61b2:	79da      	ldrb	r2, [r3, #7]
    61b4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    61b8:	bc30      	pop	{r4, r5}
    61ba:	4610      	mov	r0, r2
    61bc:	f006 bcb8 	b.w	cb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    61c0:	22ff      	movs	r2, #255	; 0xff
    61c2:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    61c6:	e7f7      	b.n	61b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    61c8:	bc30      	pop	{r4, r5}
    61ca:	4770      	bx	lr
    61cc:	200000ac 	.word	0x200000ac
    61d0:	b570      	push	{r4, r5, r6, lr}
    61d2:	4606      	mov	r6, r0
    61d4:	f7ff fe00 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    61d8:	4a1b      	ldr	r2, [pc, #108]	; (6248 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    61da:	4604      	mov	r4, r0
    61dc:	2501      	movs	r5, #1
    61de:	6a51      	ldr	r1, [r2, #36]	; 0x24
    61e0:	7808      	ldrb	r0, [r1, #0]
    61e2:	f000 0003 	and.w	r0, r0, #3
    61e6:	2801      	cmp	r0, #1
    61e8:	d00c      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61ea:	2802      	cmp	r0, #2
    61ec:	d00a      	beq.n	6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    61ee:	2803      	cmp	r0, #3
    61f0:	d121      	bne.n	6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    61f2:	7065      	strb	r5, [r4, #1]
    61f4:	89d0      	ldrh	r0, [r2, #14]
    61f6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    61fa:	81d0      	strh	r0, [r2, #14]
    61fc:	2001      	movs	r0, #1
    61fe:	f7ff fddd 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6202:	e018      	b.n	6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    6204:	7848      	ldrb	r0, [r1, #1]
    6206:	b1b0      	cbz	r0, 6236 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    6208:	89d1      	ldrh	r1, [r2, #14]
    620a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    620e:	81d1      	strh	r1, [r2, #14]
    6210:	6a91      	ldr	r1, [r2, #40]	; 0x28
    6212:	2900      	cmp	r1, #0
    6214:	d009      	beq.n	622a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    6216:	28fb      	cmp	r0, #251	; 0xfb
    6218:	d808      	bhi.n	622c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    621a:	7990      	ldrb	r0, [r2, #6]
    621c:	b120      	cbz	r0, 6228 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    621e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6222:	2020      	movs	r0, #32
    6224:	f7ff bdde 	b.w	5de4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    6228:	7035      	strb	r5, [r6, #0]
    622a:	bd70      	pop	{r4, r5, r6, pc}
    622c:	7950      	ldrb	r0, [r2, #5]
    622e:	f040 0010 	orr.w	r0, r0, #16
    6232:	7150      	strb	r0, [r2, #5]
    6234:	bd70      	pop	{r4, r5, r6, pc}
    6236:	7a20      	ldrb	r0, [r4, #8]
    6238:	2801      	cmp	r0, #1
    623a:	d001      	beq.n	6240 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    623c:	7225      	strb	r5, [r4, #8]
    623e:	bd70      	pop	{r4, r5, r6, pc}
    6240:	2000      	movs	r0, #0
    6242:	7220      	strb	r0, [r4, #8]
    6244:	bd70      	pop	{r4, r5, r6, pc}
    6246:	0000      	.short	0x0000
    6248:	200000ac 	.word	0x200000ac
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	f7ff fdc3 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6252:	4604      	mov	r4, r0
    6254:	7980      	ldrb	r0, [r0, #6]
    6256:	2800      	cmp	r0, #0
    6258:	d027      	beq.n	62aa <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    625a:	2802      	cmp	r0, #2
    625c:	d10d      	bne.n	627a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    625e:	4818      	ldr	r0, [pc, #96]	; (62c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    6260:	6b00      	ldr	r0, [r0, #48]	; 0x30
    6262:	f007 ff2b 	bl	e0bc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6266:	b308      	cbz	r0, 62ac <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6268:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    626c:	1c40      	adds	r0, r0, #1
    626e:	f141 0100 	adc.w	r1, r1, #0
    6272:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6276:	f005 f983 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    627a:	2500      	movs	r5, #0
    627c:	71a5      	strb	r5, [r4, #6]
    627e:	78a0      	ldrb	r0, [r4, #2]
    6280:	2601      	movs	r6, #1
    6282:	b170      	cbz	r0, 62a2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6284:	70a5      	strb	r5, [r4, #2]
    6286:	f7ff fb17 	bl	58b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    628a:	b190      	cbz	r0, 62b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    628c:	2100      	movs	r1, #0
    628e:	2008      	movs	r0, #8
    6290:	f7ff fd94 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6294:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6298:	1c40      	adds	r0, r0, #1
    629a:	f141 0100 	adc.w	r1, r1, #0
    629e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    62a2:	79e0      	ldrb	r0, [r4, #7]
    62a4:	2801      	cmp	r0, #1
    62a6:	d009      	beq.n	62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    62a8:	71e6      	strb	r6, [r4, #7]
    62aa:	bd70      	pop	{r4, r5, r6, pc}
    62ac:	f240 31af 	movw	r1, #943	; 0x3af
    62b0:	e001      	b.n	62b6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    62b2:	f240 31c7 	movw	r1, #967	; 0x3c7
    62b6:	2027      	movs	r0, #39	; 0x27
    62b8:	f7fe fd2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62bc:	71e5      	strb	r5, [r4, #7]
    62be:	bd70      	pop	{r4, r5, r6, pc}
    62c0:	200000ac 	.word	0x200000ac
    62c4:	4803      	ldr	r0, [pc, #12]	; (62d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    62c6:	7800      	ldrb	r0, [r0, #0]
    62c8:	2800      	cmp	r0, #0
    62ca:	d001      	beq.n	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    62cc:	f7ff bf2a 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    62d0:	4770      	bx	lr
    62d2:	0000      	.short	0x0000
    62d4:	200000ac 	.word	0x200000ac
    62d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62dc:	4607      	mov	r7, r0
    62de:	f7ff fd75 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    62e2:	4680      	mov	r8, r0
    62e4:	f7ff fd78 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    62e8:	4c17      	ldr	r4, [pc, #92]	; (6348 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    62ea:	4605      	mov	r5, r0
    62ec:	463a      	mov	r2, r7
    62ee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    62f0:	6260      	str	r0, [r4, #36]	; 0x24
    62f2:	2101      	movs	r1, #1
    62f4:	4640      	mov	r0, r8
    62f6:	f7ff ff4f 	bl	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    62fa:	7ce8      	ldrb	r0, [r5, #19]
    62fc:	2600      	movs	r6, #0
    62fe:	b178      	cbz	r0, 6320 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    6300:	4812      	ldr	r0, [pc, #72]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    6302:	f006 fb39 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6306:	4812      	ldr	r0, [pc, #72]	; (6350 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    6308:	7606      	strb	r6, [r0, #24]
    630a:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    630e:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6312:	490e      	ldr	r1, [pc, #56]	; (634c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    6314:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6316:	f005 ff63 	bl	c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    631a:	f005 ff75 	bl	c208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    631e:	e004      	b.n	632a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    6320:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6322:	f006 fb29 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6326:	f005 ff89 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    632a:	b917      	cbnz	r7, 6332 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    632c:	4630      	mov	r0, r6
    632e:	f006 f9db 	bl	c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    6332:	2100      	movs	r1, #0
    6334:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    6338:	4608      	mov	r0, r1
    633a:	f006 fba7 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    633e:	2002      	movs	r0, #2
    6340:	7020      	strb	r0, [r4, #0]
    6342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6346:	0000      	.short	0x0000
    6348:	200000ac 	.word	0x200000ac
    634c:	20000a78 	.word	0x20000a78
    6350:	20000b80 	.word	0x20000b80
    6354:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6358:	4604      	mov	r4, r0
    635a:	f7ff fd3d 	bl	5dd8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    635e:	4605      	mov	r5, r0
    6360:	f7ff fd34 	bl	5dcc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6364:	4606      	mov	r6, r0
    6366:	f8df 9164 	ldr.w	r9, [pc, #356]	; 64cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    636a:	4622      	mov	r2, r4
    636c:	2100      	movs	r1, #0
    636e:	f7ff ff13 	bl	6198 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    6372:	79a8      	ldrb	r0, [r5, #6]
    6374:	f04f 0800 	mov.w	r8, #0
    6378:	2701      	movs	r7, #1
    637a:	f1a9 0420 	sub.w	r4, r9, #32
    637e:	b140      	cbz	r0, 6392 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    6380:	2801      	cmp	r0, #1
    6382:	d01f      	beq.n	63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    6384:	2802      	cmp	r0, #2
    6386:	d030      	beq.n	63ea <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    6388:	2803      	cmp	r0, #3
    638a:	d03c      	beq.n	6406 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    638c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    6390:	e058      	b.n	6444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    6392:	7a20      	ldrb	r0, [r4, #8]
    6394:	2150      	movs	r1, #80	; 0x50
    6396:	f8ad 0004 	strh.w	r0, [sp, #4]
    639a:	5388      	strh	r0, [r1, r6]
    639c:	4648      	mov	r0, r9
    639e:	f7ff fab5 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    63a2:	b128      	cbz	r0, 63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    63a4:	2080      	movs	r0, #128	; 0x80
    63a6:	6a21      	ldr	r1, [r4, #32]
    63a8:	f7ff fd08 	bl	5dbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    63ac:	70af      	strb	r7, [r5, #2]
    63ae:	e02e      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63b0:	466a      	mov	r2, sp
    63b2:	a901      	add	r1, sp, #4
    63b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63b6:	f008 fa37 	bl	e828 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    63ba:	6220      	str	r0, [r4, #32]
    63bc:	b110      	cbz	r0, 63c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    63be:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    63c2:	b111      	cbz	r1, 63ca <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    63c4:	4842      	ldr	r0, [pc, #264]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    63c6:	6220      	str	r0, [r4, #32]
    63c8:	e021      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63ca:	f89d 1000 	ldrb.w	r1, [sp]
    63ce:	b931      	cbnz	r1, 63de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    63d0:	f8a0 8000 	strh.w	r8, [r0]
    63d4:	f880 8002 	strb.w	r8, [r0, #2]
    63d8:	2101      	movs	r1, #1
    63da:	f008 fd5d 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    63de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    63e2:	6a20      	ldr	r0, [r4, #32]
    63e4:	f008 fd12 	bl	ee0c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    63e8:	e011      	b.n	640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    63ea:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    63ee:	f8ad 0004 	strh.w	r0, [sp, #4]
    63f2:	466a      	mov	r2, sp
    63f4:	a901      	add	r1, sp, #4
    63f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63f8:	f008 fa16 	bl	e828 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    63fc:	6220      	str	r0, [r4, #32]
    63fe:	b930      	cbnz	r0, 640e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6400:	f240 21a5 	movw	r1, #677	; 0x2a5
    6404:	e01e      	b.n	6444 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    6406:	4648      	mov	r0, r9
    6408:	f7ff fa80 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    640c:	b1c0      	cbz	r0, 6440 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    640e:	6a20      	ldr	r0, [r4, #32]
    6410:	2308      	movs	r3, #8
    6412:	7801      	ldrb	r1, [r0, #0]
    6414:	f021 0108 	bic.w	r1, r1, #8
    6418:	7001      	strb	r1, [r0, #0]
    641a:	79ea      	ldrb	r2, [r5, #7]
    641c:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    6420:	4311      	orrs	r1, r2
    6422:	f021 0104 	bic.w	r1, r1, #4
    6426:	7001      	strb	r1, [r0, #0]
    6428:	7a2a      	ldrb	r2, [r5, #8]
    642a:	2304      	movs	r3, #4
    642c:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    6430:	4311      	orrs	r1, r2
    6432:	f021 0110 	bic.w	r1, r1, #16
    6436:	7001      	strb	r1, [r0, #0]
    6438:	43c9      	mvns	r1, r1
    643a:	0789      	lsls	r1, r1, #30
    643c:	d005      	beq.n	644a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    643e:	e007      	b.n	6450 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    6440:	f240 21ae 	movw	r1, #686	; 0x2ae
    6444:	2027      	movs	r0, #39	; 0x27
    6446:	f7fe fc67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    644a:	78c0      	ldrb	r0, [r0, #3]
    644c:	2802      	cmp	r0, #2
    644e:	d00f      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6450:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6452:	f007 ff84 	bl	e35e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6456:	b108      	cbz	r0, 645c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    6458:	2101      	movs	r1, #1
    645a:	e00a      	b.n	6472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    645c:	6a20      	ldr	r0, [r4, #32]
    645e:	7800      	ldrb	r0, [r0, #0]
    6460:	43c0      	mvns	r0, r0
    6462:	0780      	lsls	r0, r0, #30
    6464:	d004      	beq.n	6470 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6466:	f7ff fa0f 	bl	5888 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    646a:	f080 0101 	eor.w	r1, r0, #1
    646e:	e000      	b.n	6472 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    6470:	2100      	movs	r1, #0
    6472:	6a20      	ldr	r0, [r4, #32]
    6474:	7802      	ldrb	r2, [r0, #0]
    6476:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    647a:	7001      	strb	r1, [r0, #0]
    647c:	7ca9      	ldrb	r1, [r5, #18]
    647e:	b191      	cbz	r1, 64a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6480:	7841      	ldrb	r1, [r0, #1]
    6482:	b181      	cbz	r1, 64a6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6484:	4813      	ldr	r0, [pc, #76]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6486:	f006 fa77 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    648a:	4811      	ldr	r0, [pc, #68]	; (64d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    648c:	3828      	subs	r0, #40	; 0x28
    648e:	7607      	strb	r7, [r0, #24]
    6490:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6494:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6498:	480e      	ldr	r0, [pc, #56]	; (64d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    649a:	6a21      	ldr	r1, [r4, #32]
    649c:	f005 fea0 	bl	c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    64a0:	f005 feea 	bl	c278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    64a4:	e003      	b.n	64ae <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    64a6:	f006 fa67 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64aa:	f005 fec7 	bl	c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64ae:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    64b2:	2101      	movs	r1, #1
    64b4:	2000      	movs	r0, #0
    64b6:	f006 fae9 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64ba:	7127      	strb	r7, [r4, #4]
    64bc:	6a20      	ldr	r0, [r4, #32]
    64be:	8801      	ldrh	r1, [r0, #0]
    64c0:	8221      	strh	r1, [r4, #16]
    64c2:	7880      	ldrb	r0, [r0, #2]
    64c4:	74a0      	strb	r0, [r4, #18]
    64c6:	7027      	strb	r7, [r4, #0]
    64c8:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    64cc:	200000cc 	.word	0x200000cc
    64d0:	20000ba8 	.word	0x20000ba8
    64d4:	20000a78 	.word	0x20000a78
    64d8:	0000616d 	.word	0x0000616d
    64dc:	00005ef1 	.word	0x00005ef1
    64e0:	00006069 	.word	0x00006069
    64e4:	000062c5 	.word	0x000062c5

000064e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    64e8:	4800      	ldr	r0, [pc, #0]	; (64ec <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    64ea:	4770      	bx	lr
    64ec:	20001565 	.word	0x20001565

000064f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    64f0:	b570      	push	{r4, r5, r6, lr}
    64f2:	2600      	movs	r6, #0
    64f4:	4635      	mov	r5, r6
    64f6:	4c0f      	ldr	r4, [pc, #60]	; (6534 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    64f8:	e018      	b.n	652c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    64fa:	1960      	adds	r0, r4, r5
    64fc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    6500:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6504:	2a01      	cmp	r2, #1
    6506:	d002      	beq.n	650e <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    6508:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    650c:	b160      	cbz	r0, 6528 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    650e:	480a      	ldr	r0, [pc, #40]	; (6538 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    6510:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    6514:	1c73      	adds	r3, r6, #1
    6516:	5585      	strb	r5, [r0, r6]
    6518:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    651c:	4630      	mov	r0, r6
    651e:	b2de      	uxtb	r6, r3
    6520:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    6524:	f006 fbd2 	bl	cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6528:	1c6d      	adds	r5, r5, #1
    652a:	b2ed      	uxtb	r5, r5
    652c:	78a0      	ldrb	r0, [r4, #2]
    652e:	42a8      	cmp	r0, r5
    6530:	d8e3      	bhi.n	64fa <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    6532:	bd70      	pop	{r4, r5, r6, pc}
    6534:	20001392 	.word	0x20001392
    6538:	20000274 	.word	0x20000274

0000653c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    653c:	4904      	ldr	r1, [pc, #16]	; (6550 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    653e:	788a      	ldrb	r2, [r1, #2]
    6540:	4282      	cmp	r2, r0
    6542:	d903      	bls.n	654c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    6544:	4408      	add	r0, r1
    6546:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    654a:	4770      	bx	lr
    654c:	2000      	movs	r0, #0
    654e:	4770      	bx	lr
    6550:	20001392 	.word	0x20001392

00006554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6554:	4904      	ldr	r1, [pc, #16]	; (6568 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6556:	788a      	ldrb	r2, [r1, #2]
    6558:	4282      	cmp	r2, r0
    655a:	d903      	bls.n	6564 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    655c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6560:	3083      	adds	r0, #131	; 0x83
    6562:	4770      	bx	lr
    6564:	2000      	movs	r0, #0
    6566:	4770      	bx	lr
    6568:	20001392 	.word	0x20001392

0000656c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    656c:	4a05      	ldr	r2, [pc, #20]	; (6584 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    656e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    6572:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6576:	6802      	ldr	r2, [r0, #0]
    6578:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    657c:	8880      	ldrh	r0, [r0, #4]
    657e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    6582:	4770      	bx	lr
    6584:	20001392 	.word	0x20001392

00006588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    6588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    658c:	4607      	mov	r7, r0
    658e:	2400      	movs	r4, #0
    6590:	4d10      	ldr	r5, [pc, #64]	; (65d4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    6592:	e019      	b.n	65c8 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    6594:	4620      	mov	r0, r4
    6596:	f7ff ffdd 	bl	6554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    659a:	0003      	movs	r3, r0
    659c:	d012      	beq.n	65c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    659e:	1928      	adds	r0, r5, r4
    65a0:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    65a4:	b970      	cbnz	r0, 65c4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    65a6:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    65aa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    65ae:	f206 160b 	addw	r6, r6, #267	; 0x10b
    65b2:	463a      	mov	r2, r7
    65b4:	4631      	mov	r1, r6
    65b6:	4618      	mov	r0, r3
    65b8:	f008 f8b9 	bl	e72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    65bc:	4630      	mov	r0, r6
    65be:	4621      	mov	r1, r4
    65c0:	f7ff ffd4 	bl	656c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    65c4:	1c64      	adds	r4, r4, #1
    65c6:	b2e4      	uxtb	r4, r4
    65c8:	78a8      	ldrb	r0, [r5, #2]
    65ca:	42a0      	cmp	r0, r4
    65cc:	d8e2      	bhi.n	6594 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    65ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65d2:	0000      	.short	0x0000
    65d4:	20001392 	.word	0x20001392

000065d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    65d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65dc:	460e      	mov	r6, r1
    65de:	4607      	mov	r7, r0
    65e0:	4615      	mov	r5, r2
    65e2:	2106      	movs	r1, #6
    65e4:	4630      	mov	r0, r6
    65e6:	f008 fb5a 	bl	ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    65ea:	4c0d      	ldr	r4, [pc, #52]	; (6620 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    65ec:	b160      	cbz	r0, 6608 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    65ee:	2000      	movs	r0, #0
    65f0:	e004      	b.n	65fc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    65f2:	1821      	adds	r1, r4, r0
    65f4:	1c40      	adds	r0, r0, #1
    65f6:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    65fa:	b2c0      	uxtb	r0, r0
    65fc:	78a1      	ldrb	r1, [r4, #2]
    65fe:	4281      	cmp	r1, r0
    6600:	d8f7      	bhi.n	65f2 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    6602:	2001      	movs	r0, #1
    6604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6608:	4631      	mov	r1, r6
    660a:	4638      	mov	r0, r7
    660c:	f008 f91b 	bl	e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    6610:	2808      	cmp	r0, #8
    6612:	d003      	beq.n	661c <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    6614:	4420      	add	r0, r4
    6616:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    661a:	e7f2      	b.n	6602 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    661c:	2000      	movs	r0, #0
    661e:	e7f1      	b.n	6604 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    6620:	20001392 	.word	0x20001392

00006624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    6624:	4904      	ldr	r1, [pc, #16]	; (6638 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    6626:	788a      	ldrb	r2, [r1, #2]
    6628:	4282      	cmp	r2, r0
    662a:	d903      	bls.n	6634 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    662c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    6630:	1cc0      	adds	r0, r0, #3
    6632:	4770      	bx	lr
    6634:	2000      	movs	r0, #0
    6636:	4770      	bx	lr
    6638:	20001392 	.word	0x20001392

0000663c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    663c:	4908      	ldr	r1, [pc, #32]	; (6660 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    663e:	788a      	ldrb	r2, [r1, #2]
    6640:	4282      	cmp	r2, r0
    6642:	d903      	bls.n	664c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    6644:	180a      	adds	r2, r1, r0
    6646:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    664a:	b10a      	cbz	r2, 6650 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    664c:	2000      	movs	r0, #0
    664e:	4770      	bx	lr
    6650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6654:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6658:	f200 100b 	addw	r0, r0, #267	; 0x10b
    665c:	4770      	bx	lr
    665e:	0000      	.short	0x0000
    6660:	20001392 	.word	0x20001392

00006664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6664:	b510      	push	{r4, lr}
    6666:	f240 12d3 	movw	r2, #467	; 0x1d3
    666a:	2100      	movs	r1, #0
    666c:	4808      	ldr	r0, [pc, #32]	; (6690 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    666e:	f006 ffc3 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6672:	2208      	movs	r2, #8
    6674:	21ff      	movs	r1, #255	; 0xff
    6676:	4807      	ldr	r0, [pc, #28]	; (6694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6678:	f006 ffbe 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    667c:	4805      	ldr	r0, [pc, #20]	; (6694 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    667e:	2100      	movs	r1, #0
    6680:	1f00      	subs	r0, r0, #4
    6682:	7001      	strb	r1, [r0, #0]
    6684:	7041      	strb	r1, [r0, #1]
    6686:	f44f 7161 	mov.w	r1, #900	; 0x384
    668a:	8041      	strh	r1, [r0, #2]
    668c:	bd10      	pop	{r4, pc}
    668e:	0000      	.short	0x0000
    6690:	20001392 	.word	0x20001392
    6694:	20000274 	.word	0x20000274

00006698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6698:	4901      	ldr	r1, [pc, #4]	; (66a0 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    669a:	7008      	strb	r0, [r1, #0]
    669c:	4770      	bx	lr
    669e:	0000      	.short	0x0000
    66a0:	20000270 	.word	0x20000270

000066a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    66a4:	4801      	ldr	r0, [pc, #4]	; (66ac <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    66a6:	7800      	ldrb	r0, [r0, #0]
    66a8:	4770      	bx	lr
    66aa:	0000      	.short	0x0000
    66ac:	20000270 	.word	0x20000270

000066b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    66b0:	4b0b      	ldr	r3, [pc, #44]	; (66e0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    66b2:	b510      	push	{r4, lr}
    66b4:	789c      	ldrb	r4, [r3, #2]
    66b6:	4284      	cmp	r4, r0
    66b8:	d90f      	bls.n	66da <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    66ba:	4418      	add	r0, r3
    66bc:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    66c4:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    66c8:	700b      	strb	r3, [r1, #0]
    66ca:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    66ce:	6011      	str	r1, [r2, #0]
    66d0:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    66d4:	8090      	strh	r0, [r2, #4]
    66d6:	2001      	movs	r0, #1
    66d8:	bd10      	pop	{r4, pc}
    66da:	2000      	movs	r0, #0
    66dc:	bd10      	pop	{r4, pc}
    66de:	0000      	.short	0x0000
    66e0:	20001392 	.word	0x20001392

000066e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    66e4:	4907      	ldr	r1, [pc, #28]	; (6704 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    66e6:	788a      	ldrb	r2, [r1, #2]
    66e8:	4282      	cmp	r2, r0
    66ea:	d909      	bls.n	6700 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    66ec:	4408      	add	r0, r1
    66ee:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    66f2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    66f6:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    66fa:	f000 0001 	and.w	r0, r0, #1
    66fe:	4770      	bx	lr
    6700:	2000      	movs	r0, #0
    6702:	4770      	bx	lr
    6704:	20001392 	.word	0x20001392

00006708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    6708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    670c:	4698      	mov	r8, r3
    670e:	4691      	mov	r9, r2
    6710:	460c      	mov	r4, r1
    6712:	4605      	mov	r5, r0
    6714:	f000 f962 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6718:	4606      	mov	r6, r0
    671a:	2810      	cmp	r0, #16
    671c:	d006      	beq.n	672c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    671e:	f000 f92d 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6722:	2810      	cmp	r0, #16
    6724:	d002      	beq.n	672c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    6726:	2012      	movs	r0, #18
    6728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    672c:	4f18      	ldr	r7, [pc, #96]	; (6790 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    672e:	78b8      	ldrb	r0, [r7, #2]
    6730:	2808      	cmp	r0, #8
    6732:	d22a      	bcs.n	678a <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    6734:	2e10      	cmp	r6, #16
    6736:	d105      	bne.n	6744 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    6738:	2200      	movs	r2, #0
    673a:	4621      	mov	r1, r4
    673c:	4628      	mov	r0, r5
    673e:	f000 f931 	bl	69a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6742:	4606      	mov	r6, r0
    6744:	78bc      	ldrb	r4, [r7, #2]
    6746:	2210      	movs	r2, #16
    6748:	1c60      	adds	r0, r4, #1
    674a:	70b8      	strb	r0, [r7, #2]
    674c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    6750:	1ce8      	adds	r0, r5, #3
    6752:	4649      	mov	r1, r9
    6754:	f008 fa46 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6758:	f105 0083 	add.w	r0, r5, #131	; 0x83
    675c:	2210      	movs	r2, #16
    675e:	4641      	mov	r1, r8
    6760:	f008 fa40 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6764:	2110      	movs	r1, #16
    6766:	4640      	mov	r0, r8
    6768:	f008 fa99 	bl	ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    676c:	443c      	add	r4, r7
    676e:	2110      	movs	r1, #16
    6770:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6774:	4648      	mov	r0, r9
    6776:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    677a:	f008 fa90 	bl	ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    677e:	77e0      	strb	r0, [r4, #31]
    6780:	f804 6c29 	strb.w	r6, [r4, #-41]
    6784:	2000      	movs	r0, #0
    6786:	73e0      	strb	r0, [r4, #15]
    6788:	e7ce      	b.n	6728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    678a:	2007      	movs	r0, #7
    678c:	e7cc      	b.n	6728 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    678e:	0000      	.short	0x0000
    6790:	20001392 	.word	0x20001392

00006794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6794:	4806      	ldr	r0, [pc, #24]	; (67b0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6796:	b510      	push	{r4, lr}
    6798:	7880      	ldrb	r0, [r0, #2]
    679a:	1e40      	subs	r0, r0, #1
    679c:	b244      	sxtb	r4, r0
    679e:	e004      	b.n	67aa <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    67a0:	b2e0      	uxtb	r0, r4
    67a2:	f000 f963 	bl	6a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    67a6:	1e64      	subs	r4, r4, #1
    67a8:	b264      	sxtb	r4, r4
    67aa:	2c00      	cmp	r4, #0
    67ac:	daf8      	bge.n	67a0 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    67ae:	bd10      	pop	{r4, pc}
    67b0:	20001392 	.word	0x20001392

000067b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    67b4:	4801      	ldr	r0, [pc, #4]	; (67bc <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    67b6:	8840      	ldrh	r0, [r0, #2]
    67b8:	4770      	bx	lr
    67ba:	0000      	.short	0x0000
    67bc:	20000270 	.word	0x20000270

000067c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    67c0:	b138      	cbz	r0, 67d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    67c2:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    67c6:	4288      	cmp	r0, r1
    67c8:	d803      	bhi.n	67d2 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    67ca:	4903      	ldr	r1, [pc, #12]	; (67d8 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    67cc:	8048      	strh	r0, [r1, #2]
    67ce:	2001      	movs	r0, #1
    67d0:	4770      	bx	lr
    67d2:	2000      	movs	r0, #0
    67d4:	4770      	bx	lr
    67d6:	0000      	.short	0x0000
    67d8:	20000270 	.word	0x20000270

000067dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>:
    67dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    67e0:	2501      	movs	r5, #1
    67e2:	461f      	mov	r7, r3
    67e4:	4691      	mov	r9, r2
    67e6:	462c      	mov	r4, r5
    67e8:	2600      	movs	r6, #0
    67ea:	f000 f8f7 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    67ee:	2810      	cmp	r0, #16
    67f0:	d023      	beq.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    67f2:	f8df 8058 	ldr.w	r8, [pc, #88]	; 684c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x70>
    67f6:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    67fa:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    67fe:	f001 0601 	and.w	r6, r1, #1
    6802:	f000 f8bb 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6806:	4603      	mov	r3, r0
    6808:	2810      	cmp	r0, #16
    680a:	d016      	beq.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    680c:	b107      	cbz	r7, 6810 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x34>
    680e:	703b      	strb	r3, [r7, #0]
    6810:	4618      	mov	r0, r3
    6812:	f7ff ff07 	bl	6624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6816:	b180      	cbz	r0, 683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    6818:	f898 1002 	ldrb.w	r1, [r8, #2]
    681c:	4640      	mov	r0, r8
    681e:	4299      	cmp	r1, r3
    6820:	d903      	bls.n	682a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x4e>
    6822:	18c1      	adds	r1, r0, r3
    6824:	f891 414b 	ldrb.w	r4, [r1, #331]	; 0x14b
    6828:	e000      	b.n	682c <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x50>
    682a:	2400      	movs	r4, #0
    682c:	eb08 0003 	add.w	r0, r8, r3
    6830:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6834:	2801      	cmp	r0, #1
    6836:	d006      	beq.n	6846 <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x6a>
    6838:	2500      	movs	r5, #0
    683a:	ea49 0006 	orr.w	r0, r9, r6
    683e:	4325      	orrs	r5, r4
    6840:	4028      	ands	r0, r5
    6842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6846:	2501      	movs	r5, #1
    6848:	e7f7      	b.n	683a <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY+0x5e>
    684a:	0000      	.short	0x0000
    684c:	20001392 	.word	0x20001392

00006850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    6850:	b570      	push	{r4, r5, r6, lr}
    6852:	460d      	mov	r5, r1
    6854:	4606      	mov	r6, r0
    6856:	f000 f8c1 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    685a:	4c10      	ldr	r4, [pc, #64]	; (689c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    685c:	2810      	cmp	r0, #16
    685e:	d007      	beq.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6860:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6864:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6868:	07c9      	lsls	r1, r1, #31
    686a:	d001      	beq.n	6870 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    686c:	2001      	movs	r0, #1
    686e:	bd70      	pop	{r4, r5, r6, pc}
    6870:	7861      	ldrb	r1, [r4, #1]
    6872:	2908      	cmp	r1, #8
    6874:	d210      	bcs.n	6898 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6876:	2810      	cmp	r0, #16
    6878:	d008      	beq.n	688c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    687a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    687e:	2101      	movs	r1, #1
    6880:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6884:	7860      	ldrb	r0, [r4, #1]
    6886:	1c40      	adds	r0, r0, #1
    6888:	7060      	strb	r0, [r4, #1]
    688a:	e7ef      	b.n	686c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    688c:	2201      	movs	r2, #1
    688e:	4629      	mov	r1, r5
    6890:	4630      	mov	r0, r6
    6892:	f000 f887 	bl	69a4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6896:	e7f5      	b.n	6884 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6898:	2000      	movs	r0, #0
    689a:	bd70      	pop	{r4, r5, r6, pc}
    689c:	20001392 	.word	0x20001392

000068a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    68a0:	b570      	push	{r4, r5, r6, lr}
    68a2:	4d0b      	ldr	r5, [pc, #44]	; (68d0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    68a4:	7828      	ldrb	r0, [r5, #0]
    68a6:	1e40      	subs	r0, r0, #1
    68a8:	b244      	sxtb	r4, r0
    68aa:	e00a      	b.n	68c2 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    68ac:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    68b0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    68b4:	07c0      	lsls	r0, r0, #31
    68b6:	d002      	beq.n	68be <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    68b8:	b2e0      	uxtb	r0, r4
    68ba:	f000 f91f 	bl	6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    68be:	1e64      	subs	r4, r4, #1
    68c0:	b264      	sxtb	r4, r4
    68c2:	2c00      	cmp	r4, #0
    68c4:	daf2      	bge.n	68ac <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    68c6:	4903      	ldr	r1, [pc, #12]	; (68d4 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    68c8:	2000      	movs	r0, #0
    68ca:	7048      	strb	r0, [r1, #1]
    68cc:	bd70      	pop	{r4, r5, r6, pc}
    68ce:	0000      	.short	0x0000
    68d0:	20001392 	.word	0x20001392
    68d4:	20000270 	.word	0x20000270

000068d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    68d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68dc:	2400      	movs	r4, #0
    68de:	4625      	mov	r5, r4
    68e0:	4e18      	ldr	r6, [pc, #96]	; (6944 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    68e2:	e029      	b.n	6938 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    68e4:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    68e8:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    68ec:	07c0      	lsls	r0, r0, #31
    68ee:	d021      	beq.n	6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    68f0:	4628      	mov	r0, r5
    68f2:	f000 f843 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68f6:	4603      	mov	r3, r0
    68f8:	f7ff fe94 	bl	6624 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    68fc:	4601      	mov	r1, r0
    68fe:	2000      	movs	r0, #0
    6900:	2b10      	cmp	r3, #16
    6902:	d009      	beq.n	6918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6904:	18f2      	adds	r2, r6, r3
    6906:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    690a:	f1bc 0f01 	cmp.w	ip, #1
    690e:	d002      	beq.n	6916 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6910:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6914:	b102      	cbz	r2, 6918 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6916:	2001      	movs	r0, #1
    6918:	1e40      	subs	r0, r0, #1
    691a:	4201      	tst	r1, r0
    691c:	d10a      	bne.n	6934 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    691e:	480a      	ldr	r0, [pc, #40]	; (6948 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6920:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6924:	5503      	strb	r3, [r0, r4]
    6926:	4620      	mov	r0, r4
    6928:	1c64      	adds	r4, r4, #1
    692a:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    692e:	b2e4      	uxtb	r4, r4
    6930:	f006 f9cc 	bl	cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6934:	1c6d      	adds	r5, r5, #1
    6936:	b2ed      	uxtb	r5, r5
    6938:	7830      	ldrb	r0, [r6, #0]
    693a:	42a8      	cmp	r0, r5
    693c:	d8d2      	bhi.n	68e4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6942:	0000      	.short	0x0000
    6944:	20001392 	.word	0x20001392
    6948:	20000274 	.word	0x20000274
    694c:	4602      	mov	r2, r0
    694e:	4809      	ldr	r0, [pc, #36]	; (6974 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6950:	b510      	push	{r4, lr}
    6952:	7800      	ldrb	r0, [r0, #0]
    6954:	460b      	mov	r3, r1
    6956:	b158      	cbz	r0, 6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6958:	4807      	ldr	r0, [pc, #28]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    695a:	7881      	ldrb	r1, [r0, #2]
    695c:	b141      	cbz	r1, 6970 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    695e:	b10b      	cbz	r3, 6964 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6960:	1cc0      	adds	r0, r0, #3
    6962:	e001      	b.n	6968 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6964:	4804      	ldr	r0, [pc, #16]	; (6978 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6966:	3083      	adds	r0, #131	; 0x83
    6968:	f005 fb5c 	bl	c024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    696c:	2001      	movs	r0, #1
    696e:	bd10      	pop	{r4, pc}
    6970:	2000      	movs	r0, #0
    6972:	bd10      	pop	{r4, pc}
    6974:	20000270 	.word	0x20000270
    6978:	20001392 	.word	0x20001392
    697c:	4908      	ldr	r1, [pc, #32]	; (69a0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    697e:	b510      	push	{r4, lr}
    6980:	4603      	mov	r3, r0
    6982:	2000      	movs	r0, #0
    6984:	788a      	ldrb	r2, [r1, #2]
    6986:	e006      	b.n	6996 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6988:	180c      	adds	r4, r1, r0
    698a:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    698e:	429c      	cmp	r4, r3
    6990:	d004      	beq.n	699c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6992:	1c40      	adds	r0, r0, #1
    6994:	b2c0      	uxtb	r0, r0
    6996:	4282      	cmp	r2, r0
    6998:	d8f6      	bhi.n	6988 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    699a:	2010      	movs	r0, #16
    699c:	bd10      	pop	{r4, pc}
    699e:	0000      	.short	0x0000
    69a0:	20001392 	.word	0x20001392
    69a4:	b570      	push	{r4, r5, r6, lr}
    69a6:	4b0c      	ldr	r3, [pc, #48]	; (69d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    69a8:	4604      	mov	r4, r0
    69aa:	7818      	ldrb	r0, [r3, #0]
    69ac:	1c45      	adds	r5, r0, #1
    69ae:	701d      	strb	r5, [r3, #0]
    69b0:	2810      	cmp	r0, #16
    69b2:	d303      	bcc.n	69bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    69b4:	2146      	movs	r1, #70	; 0x46
    69b6:	2028      	movs	r0, #40	; 0x28
    69b8:	f7fe f9ae 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    69bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    69c0:	680d      	ldr	r5, [r1, #0]
    69c2:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    69c6:	8889      	ldrh	r1, [r1, #4]
    69c8:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    69cc:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    69d0:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    69d4:	bd70      	pop	{r4, r5, r6, pc}
    69d6:	0000      	.short	0x0000
    69d8:	20001392 	.word	0x20001392
    69dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    69e0:	460f      	mov	r7, r1
    69e2:	4606      	mov	r6, r0
    69e4:	2400      	movs	r4, #0
    69e6:	4d0d      	ldr	r5, [pc, #52]	; (6a1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    69e8:	e00f      	b.n	6a0a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    69ea:	bf00      	nop
    69ec:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    69f0:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    69f4:	42b1      	cmp	r1, r6
    69f6:	d106      	bne.n	6a06 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    69f8:	2206      	movs	r2, #6
    69fa:	4639      	mov	r1, r7
    69fc:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6a00:	f006 fd6e 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6a04:	b138      	cbz	r0, 6a16 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    6a06:	1c64      	adds	r4, r4, #1
    6a08:	b2e4      	uxtb	r4, r4
    6a0a:	7828      	ldrb	r0, [r5, #0]
    6a0c:	42a0      	cmp	r0, r4
    6a0e:	d8ed      	bhi.n	69ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    6a10:	2010      	movs	r0, #16
    6a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a16:	4620      	mov	r0, r4
    6a18:	e7fb      	b.n	6a12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6a1a:	0000      	.short	0x0000
    6a1c:	20001392 	.word	0x20001392
    6a20:	b570      	push	{r4, r5, r6, lr}
    6a22:	4605      	mov	r5, r0
    6a24:	f7ff ffaa 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a28:	2810      	cmp	r0, #16
    6a2a:	d11c      	bne.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a2c:	4c0e      	ldr	r4, [pc, #56]	; (6a68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6a2e:	7820      	ldrb	r0, [r4, #0]
    6a30:	1e40      	subs	r0, r0, #1
    6a32:	b2c0      	uxtb	r0, r0
    6a34:	7020      	strb	r0, [r4, #0]
    6a36:	42a8      	cmp	r0, r5
    6a38:	d015      	beq.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a3a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6a3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6a42:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6a46:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6a4a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6a4e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6a52:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6a56:	7820      	ldrb	r0, [r4, #0]
    6a58:	f7ff ff90 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6a5c:	2810      	cmp	r0, #16
    6a5e:	d002      	beq.n	6a66 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6a60:	4420      	add	r0, r4
    6a62:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6a66:	bd70      	pop	{r4, r5, r6, pc}
    6a68:	20001392 	.word	0x20001392
    6a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6a70:	4c21      	ldr	r4, [pc, #132]	; (6af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6a72:	4606      	mov	r6, r0
    6a74:	19a7      	adds	r7, r4, r6
    6a76:	78a0      	ldrb	r0, [r4, #2]
    6a78:	1e40      	subs	r0, r0, #1
    6a7a:	b2c5      	uxtb	r5, r0
    6a7c:	70a5      	strb	r5, [r4, #2]
    6a7e:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6a82:	42ae      	cmp	r6, r5
    6a84:	d02a      	beq.n	6adc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6a86:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6a8a:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6a8e:	f10a 0103 	add.w	r1, sl, #3
    6a92:	f109 0003 	add.w	r0, r9, #3
    6a96:	2210      	movs	r2, #16
    6a98:	f006 fd34 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6a9c:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6aa0:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6aa4:	2210      	movs	r2, #16
    6aa6:	f006 fd2d 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6aaa:	1960      	adds	r0, r4, r5
    6aac:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6ab0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6ab4:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6ab8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6abc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6ac0:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6ac4:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6ac8:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6acc:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6ad0:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6ad4:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6ad8:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6adc:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6ae0:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6ae4:	07c0      	lsls	r0, r0, #31
    6ae6:	d104      	bne.n	6af2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6ae8:	4640      	mov	r0, r8
    6aea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6aee:	f7ff bf97 	b.w	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6af6:	0000      	.short	0x0000
    6af8:	20001392 	.word	0x20001392
    6afc:	4905      	ldr	r1, [pc, #20]	; (6b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6afe:	784a      	ldrb	r2, [r1, #1]
    6b00:	1e52      	subs	r2, r2, #1
    6b02:	704a      	strb	r2, [r1, #1]
    6b04:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6b08:	2200      	movs	r2, #0
    6b0a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6b0e:	f7ff bf87 	b.w	6a20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6b12:	0000      	.short	0x0000
    6b14:	20001392 	.word	0x20001392

00006b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b1c:	4604      	mov	r4, r0
    6b1e:	f100 0778 	add.w	r7, r0, #120	; 0x78
    6b22:	b171      	cbz	r1, 6b42 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6b24:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    6b28:	1e75      	subs	r5, r6, #1
    6b2a:	2901      	cmp	r1, #1
    6b2c:	d016      	beq.n	6b5c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    6b2e:	2902      	cmp	r1, #2
    6b30:	d025      	beq.n	6b7e <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    6b32:	2903      	cmp	r1, #3
    6b34:	d110      	bne.n	6b58 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    6b36:	4631      	mov	r1, r6
    6b38:	4628      	mov	r0, r5
    6b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b3e:	f008 b900 	b.w	ed42 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6b42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6b46:	2100      	movs	r1, #0
    6b48:	f006 fd56 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6b4c:	4638      	mov	r0, r7
    6b4e:	f008 f8b5 	bl	ecbc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    6b52:	2020      	movs	r0, #32
    6b54:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    6b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b5c:	68e1      	ldr	r1, [r4, #12]
    6b5e:	480d      	ldr	r0, [pc, #52]	; (6b94 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    6b60:	460a      	mov	r2, r1
    6b62:	4408      	add	r0, r1
    6b64:	fbb0 f0f1 	udiv	r0, r0, r1
    6b68:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    6b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6b70:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    6b74:	8ae3      	ldrh	r3, [r4, #22]
    6b76:	4638      	mov	r0, r7
    6b78:	f000 f80e 	bl	6b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6b7c:	e7db      	b.n	6b36 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    6b7e:	68c1      	ldr	r1, [r0, #12]
    6b80:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    6b84:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    6b88:	4638      	mov	r0, r7
    6b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6b8e:	f000 b803 	b.w	6b98 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6b92:	0000      	.short	0x0000
    6b94:	01c9c37f 	.word	0x01c9c37f
    6b98:	b530      	push	{r4, r5, lr}
    6b9a:	2400      	movs	r4, #0
    6b9c:	86c4      	strh	r4, [r0, #54]	; 0x36
    6b9e:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    6ba0:	4d13      	ldr	r5, [pc, #76]	; (6bf0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    6ba2:	434c      	muls	r4, r1
    6ba4:	fbb4 f4f2 	udiv	r4, r4, r2
    6ba8:	8744      	strh	r4, [r0, #58]	; 0x3a
    6baa:	f242 7410 	movw	r4, #10000	; 0x2710
    6bae:	4363      	muls	r3, r4
    6bb0:	fbb3 f3f2 	udiv	r3, r3, r2
    6bb4:	1c5b      	adds	r3, r3, #1
    6bb6:	b29b      	uxth	r3, r3
    6bb8:	fb03 f402 	mul.w	r4, r3, r2
    6bbc:	8703      	strh	r3, [r0, #56]	; 0x38
    6bbe:	42ac      	cmp	r4, r5
    6bc0:	d901      	bls.n	6bc6 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    6bc2:	1e5b      	subs	r3, r3, #1
    6bc4:	8703      	strh	r3, [r0, #56]	; 0x38
    6bc6:	4b0b      	ldr	r3, [pc, #44]	; (6bf4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    6bc8:	f240 2471 	movw	r4, #625	; 0x271
    6bcc:	fbb3 f3f2 	udiv	r3, r3, r2
    6bd0:	1c5b      	adds	r3, r3, #1
    6bd2:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6bd4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6bd6:	4363      	muls	r3, r4
    6bd8:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6bdc:	1e5b      	subs	r3, r3, #1
    6bde:	fbb3 f3f2 	udiv	r3, r3, r2
    6be2:	62c3      	str	r3, [r0, #44]	; 0x2c
    6be4:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6be6:	434b      	muls	r3, r1
    6be8:	fbb3 f1f2 	udiv	r1, r3, r2
    6bec:	6281      	str	r1, [r0, #40]	; 0x28
    6bee:	bd30      	pop	{r4, r5, pc}
    6bf0:	01e84800 	.word	0x01e84800
    6bf4:	02625a00 	.word	0x02625a00

00006bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6bf8:	4909      	ldr	r1, [pc, #36]	; (6c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6bfa:	b508      	push	{r3, lr}
    6bfc:	7809      	ldrb	r1, [r1, #0]
    6bfe:	f88d 1000 	strb.w	r1, [sp]
    6c02:	9900      	ldr	r1, [sp, #0]
    6c04:	9100      	str	r1, [sp, #0]
    6c06:	f89d 1000 	ldrb.w	r1, [sp]
    6c0a:	b109      	cbz	r1, 6c10 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6c0c:	2000      	movs	r0, #0
    6c0e:	bd08      	pop	{r3, pc}
    6c10:	4903      	ldr	r1, [pc, #12]	; (6c20 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6c12:	f8d1 2001 	ldr.w	r2, [r1, #1]
    6c16:	6002      	str	r2, [r0, #0]
    6c18:	7949      	ldrb	r1, [r1, #5]
    6c1a:	7101      	strb	r1, [r0, #4]
    6c1c:	2001      	movs	r0, #1
    6c1e:	bd08      	pop	{r3, pc}
    6c20:	2000028f 	.word	0x2000028f

00006c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    6c24:	4905      	ldr	r1, [pc, #20]	; (6c3c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    6c26:	2201      	movs	r2, #1
    6c28:	700a      	strb	r2, [r1, #0]
    6c2a:	460a      	mov	r2, r1
    6c2c:	6803      	ldr	r3, [r0, #0]
    6c2e:	f8c2 3001 	str.w	r3, [r2, #1]
    6c32:	7900      	ldrb	r0, [r0, #4]
    6c34:	7150      	strb	r0, [r2, #5]
    6c36:	2000      	movs	r0, #0
    6c38:	7008      	strb	r0, [r1, #0]
    6c3a:	4770      	bx	lr
    6c3c:	2000028f 	.word	0x2000028f

00006c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6c40:	b570      	push	{r4, r5, r6, lr}
    6c42:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6c46:	b28b      	uxth	r3, r1
    6c48:	7ac5      	ldrb	r5, [r0, #11]
    6c4a:	ea83 0102 	eor.w	r1, r3, r2
    6c4e:	2200      	movs	r2, #0
    6c50:	b2cc      	uxtb	r4, r1
    6c52:	0a09      	lsrs	r1, r1, #8
    6c54:	fa94 f4a4 	rbit	r4, r4
    6c58:	fa91 f1a1 	rbit	r1, r1
    6c5c:	0e24      	lsrs	r4, r4, #24
    6c5e:	0e09      	lsrs	r1, r1, #24
    6c60:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6c64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6c68:	1c52      	adds	r2, r2, #1
    6c6a:	4419      	add	r1, r3
    6c6c:	b2d2      	uxtb	r2, r2
    6c6e:	b289      	uxth	r1, r1
    6c70:	2a03      	cmp	r2, #3
    6c72:	d3ed      	bcc.n	6c50 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6c74:	4059      	eors	r1, r3
    6c76:	2225      	movs	r2, #37	; 0x25
    6c78:	fbb1 f3f2 	udiv	r3, r1, r2
    6c7c:	fb02 1213 	mls	r2, r2, r3, r1
    6c80:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6c84:	f002 0607 	and.w	r6, r2, #7
    6c88:	785b      	ldrb	r3, [r3, #1]
    6c8a:	2401      	movs	r4, #1
    6c8c:	fa04 f606 	lsl.w	r6, r4, r6
    6c90:	4233      	tst	r3, r6
    6c92:	d001      	beq.n	6c98 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6c94:	4610      	mov	r0, r2
    6c96:	bd70      	pop	{r4, r5, r6, pc}
    6c98:	434d      	muls	r5, r1
    6c9a:	0c29      	lsrs	r1, r5, #16
    6c9c:	1c49      	adds	r1, r1, #1
    6c9e:	b2c9      	uxtb	r1, r1
    6ca0:	2200      	movs	r2, #0
    6ca2:	1885      	adds	r5, r0, r2
    6ca4:	79ab      	ldrb	r3, [r5, #6]
    6ca6:	428b      	cmp	r3, r1
    6ca8:	d312      	bcc.n	6cd0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6caa:	f895 5001 	ldrb.w	r5, [r5, #1]
    6cae:	2300      	movs	r3, #0
    6cb0:	fa04 f603 	lsl.w	r6, r4, r3
    6cb4:	4235      	tst	r5, r6
    6cb6:	d001      	beq.n	6cbc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6cb8:	1e49      	subs	r1, r1, #1
    6cba:	b2c9      	uxtb	r1, r1
    6cbc:	b121      	cbz	r1, 6cc8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6cbe:	1c5b      	adds	r3, r3, #1
    6cc0:	b2db      	uxtb	r3, r3
    6cc2:	2b08      	cmp	r3, #8
    6cc4:	d3f4      	bcc.n	6cb0 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6cc6:	e005      	b.n	6cd4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6cc8:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6ccc:	b2c0      	uxtb	r0, r0
    6cce:	bd70      	pop	{r4, r5, r6, pc}
    6cd0:	1ac9      	subs	r1, r1, r3
    6cd2:	b2c9      	uxtb	r1, r1
    6cd4:	1c52      	adds	r2, r2, #1
    6cd6:	b2d2      	uxtb	r2, r2
    6cd8:	2a05      	cmp	r2, #5
    6cda:	d3e2      	bcc.n	6ca2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6cdc:	f240 110d 	movw	r1, #269	; 0x10d
    6ce0:	2046      	movs	r0, #70	; 0x46
    6ce2:	f7fe f819 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce6:	0000      	movs	r0, r0
    6ce8:	b570      	push	{r4, r5, r6, lr}
    6cea:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6cee:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6cf2:	2401      	movs	r4, #1
    6cf4:	fb03 2101 	mla	r1, r3, r1, r2
    6cf8:	2225      	movs	r2, #37	; 0x25
    6cfa:	fbb1 f3f2 	udiv	r3, r1, r2
    6cfe:	fb02 1113 	mls	r1, r2, r3, r1
    6d02:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6d06:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6d0a:	f001 0307 	and.w	r3, r1, #7
    6d0e:	7d92      	ldrb	r2, [r2, #22]
    6d10:	fa04 f303 	lsl.w	r3, r4, r3
    6d14:	421a      	tst	r2, r3
    6d16:	d003      	beq.n	6d20 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6d18:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6d1c:	2000      	movs	r0, #0
    6d1e:	bd70      	pop	{r4, r5, r6, pc}
    6d20:	f890 2020 	ldrb.w	r2, [r0, #32]
    6d24:	fbb1 f3f2 	udiv	r3, r1, r2
    6d28:	fb02 1113 	mls	r1, r2, r3, r1
    6d2c:	1c49      	adds	r1, r1, #1
    6d2e:	b2c9      	uxtb	r1, r1
    6d30:	2300      	movs	r3, #0
    6d32:	18c5      	adds	r5, r0, r3
    6d34:	7eea      	ldrb	r2, [r5, #27]
    6d36:	428a      	cmp	r2, r1
    6d38:	d311      	bcc.n	6d5e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6d3a:	f895 5016 	ldrb.w	r5, [r5, #22]
    6d3e:	2200      	movs	r2, #0
    6d40:	fa04 f602 	lsl.w	r6, r4, r2
    6d44:	4235      	tst	r5, r6
    6d46:	d001      	beq.n	6d4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6d48:	1e49      	subs	r1, r1, #1
    6d4a:	b2c9      	uxtb	r1, r1
    6d4c:	b121      	cbz	r1, 6d58 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6d4e:	1c52      	adds	r2, r2, #1
    6d50:	b2d2      	uxtb	r2, r2
    6d52:	2a08      	cmp	r2, #8
    6d54:	d3f4      	bcc.n	6d40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6d56:	e004      	b.n	6d62 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6d58:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6d5c:	e7dc      	b.n	6d18 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6d5e:	1a89      	subs	r1, r1, r2
    6d60:	b2c9      	uxtb	r1, r1
    6d62:	1c5b      	adds	r3, r3, #1
    6d64:	b2db      	uxtb	r3, r3
    6d66:	2b05      	cmp	r3, #5
    6d68:	d3e3      	bcc.n	6d32 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6d6a:	201f      	movs	r0, #31
    6d6c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6d70:	7841      	ldrb	r1, [r0, #1]
    6d72:	b141      	cbz	r1, 6d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d74:	78c0      	ldrb	r0, [r0, #3]
    6d76:	2819      	cmp	r0, #25
    6d78:	d203      	bcs.n	6d82 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6d7a:	4a04      	ldr	r2, [pc, #16]	; (6d8c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6d7c:	5c10      	ldrb	r0, [r2, r0]
    6d7e:	4288      	cmp	r0, r1
    6d80:	d101      	bne.n	6d86 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6d82:	2001      	movs	r0, #1
    6d84:	4770      	bx	lr
    6d86:	2000      	movs	r0, #0
    6d88:	4770      	bx	lr
    6d8a:	0000      	.short	0x0000
    6d8c:	00010914 	.word	0x00010914

00006d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6d90:	b510      	push	{r4, lr}
    6d92:	2201      	movs	r2, #1
    6d94:	70c1      	strb	r1, [r0, #3]
    6d96:	2919      	cmp	r1, #25
    6d98:	d202      	bcs.n	6da0 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6d9a:	4a06      	ldr	r2, [pc, #24]	; (6db4 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6d9c:	5c52      	ldrb	r2, [r2, r1]
    6d9e:	e006      	b.n	6dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6da0:	29ff      	cmp	r1, #255	; 0xff
    6da2:	d004      	beq.n	6dae <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6da4:	f240 31d5 	movw	r1, #981	; 0x3d5
    6da8:	202a      	movs	r0, #42	; 0x2a
    6daa:	f7fd ffb5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dae:	7042      	strb	r2, [r0, #1]
    6db0:	bd10      	pop	{r4, pc}
    6db2:	0000      	.short	0x0000
    6db4:	00010914 	.word	0x00010914

00006db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>:
    6db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6dbc:	ea5f 0900 	movs.w	r9, r0
    6dc0:	d006      	beq.n	6dd0 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x18>
    6dc2:	4c21      	ldr	r4, [pc, #132]	; (6e48 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x90>)
    6dc4:	f104 0010 	add.w	r0, r4, #16
    6dc8:	7b61      	ldrb	r1, [r4, #13]
    6dca:	4682      	mov	sl, r0
    6dcc:	b119      	cbz	r1, 6dd6 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x1e>
    6dce:	e00b      	b.n	6de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dd0:	f240 3193 	movw	r1, #915	; 0x393
    6dd4:	e005      	b.n	6de2 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x2a>
    6dd6:	2100      	movs	r1, #0
    6dd8:	f008 f92e 	bl	f038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    6ddc:	b120      	cbz	r0, 6de8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x30>
    6dde:	f240 3196 	movw	r1, #918	; 0x396
    6de2:	202b      	movs	r0, #43	; 0x2b
    6de4:	f7fd ff98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6de8:	8a26      	ldrh	r6, [r4, #16]
    6dea:	2000      	movs	r0, #0
    6dec:	f7fe f978 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    6df0:	4f16      	ldr	r7, [pc, #88]	; (6e4c <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x94>)
    6df2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 6e50 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x98>
    6df6:	4605      	mov	r5, r0
    6df8:	6839      	ldr	r1, [r7, #0]
    6dfa:	b129      	cbz	r1, 6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    6dfc:	8a20      	ldrh	r0, [r4, #16]
    6dfe:	42a8      	cmp	r0, r5
    6e00:	d102      	bne.n	6e08 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x50>
    6e02:	4648      	mov	r0, r9
    6e04:	4788      	blx	r1
    6e06:	e005      	b.n	6e14 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5c>
    6e08:	f8d8 2000 	ldr.w	r2, [r8]
    6e0c:	b11a      	cbz	r2, 6e16 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x5e>
    6e0e:	8a20      	ldrh	r0, [r4, #16]
    6e10:	4649      	mov	r1, r9
    6e12:	4790      	blx	r2
    6e14:	b998      	cbnz	r0, 6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e16:	2100      	movs	r1, #0
    6e18:	4650      	mov	r0, sl
    6e1a:	f008 f90d 	bl	f038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    6e1e:	b910      	cbnz	r0, 6e26 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x6e>
    6e20:	8a20      	ldrh	r0, [r4, #16]
    6e22:	42b0      	cmp	r0, r6
    6e24:	d1e8      	bne.n	6df8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x40>
    6e26:	480b      	ldr	r0, [pc, #44]	; (6e54 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x9c>)
    6e28:	6801      	ldr	r1, [r0, #0]
    6e2a:	b111      	cbz	r1, 6e32 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x7a>
    6e2c:	4648      	mov	r0, r9
    6e2e:	4788      	blx	r1
    6e30:	b928      	cbnz	r0, 6e3e <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x86>
    6e32:	4809      	ldr	r0, [pc, #36]	; (6e58 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0xa0>)
    6e34:	6801      	ldr	r1, [r0, #0]
    6e36:	b129      	cbz	r1, 6e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e38:	4648      	mov	r0, r9
    6e3a:	4788      	blx	r1
    6e3c:	b110      	cbz	r0, 6e44 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x8c>
    6e3e:	2001      	movs	r0, #1
    6e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6e44:	2000      	movs	r0, #0
    6e46:	e7fb      	b.n	6e40 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA+0x88>
    6e48:	20001230 	.word	0x20001230
    6e4c:	20000218 	.word	0x20000218
    6e50:	2000020c 	.word	0x2000020c
    6e54:	2000021c 	.word	0x2000021c
    6e58:	20000208 	.word	0x20000208

00006e5c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA>:
    6e5c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e60:	b087      	sub	sp, #28
    6e62:	460c      	mov	r4, r1
    6e64:	a902      	add	r1, sp, #8
    6e66:	9807      	ldr	r0, [sp, #28]
    6e68:	f007 fd67 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6e6c:	2800      	cmp	r0, #0
    6e6e:	d17d      	bne.n	6f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6e70:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6f94 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x138>
    6e74:	f04f 0801 	mov.w	r8, #1
    6e78:	4682      	mov	sl, r0
    6e7a:	9803      	ldr	r0, [sp, #12]
    6e7c:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6e80:	2800      	cmp	r0, #0
    6e82:	d00c      	beq.n	6e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6e84:	f8d9 2000 	ldr.w	r2, [r9]
    6e88:	b162      	cbz	r2, 6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6e8a:	4621      	mov	r1, r4
    6e8c:	9807      	ldr	r0, [sp, #28]
    6e8e:	4790      	blx	r2
    6e90:	b140      	cbz	r0, 6ea4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x48>
    6e92:	4620      	mov	r0, r4
    6e94:	f000 f9c0 	bl	7218 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1b0>
    6e98:	2800      	cmp	r0, #0
    6e9a:	d1ee      	bne.n	6e7a <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x1e>
    6e9c:	2001      	movs	r0, #1
    6e9e:	b009      	add	sp, #36	; 0x24
    6ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6ea4:	9d03      	ldr	r5, [sp, #12]
    6ea6:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    6eaa:	3578      	adds	r5, #120	; 0x78
    6eac:	b950      	cbnz	r0, 6ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6eae:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6eb2:	f88d 0004 	strb.w	r0, [sp, #4]
    6eb6:	9801      	ldr	r0, [sp, #4]
    6eb8:	9001      	str	r0, [sp, #4]
    6eba:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6ebe:	b108      	cbz	r0, 6ec4 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x68>
    6ec0:	2001      	movs	r0, #1
    6ec2:	e000      	b.n	6ec6 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x6a>
    6ec4:	2000      	movs	r0, #0
    6ec6:	4683      	mov	fp, r0
    6ec8:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6ecc:	b1c0      	cbz	r0, 6f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ece:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6ed2:	0780      	lsls	r0, r0, #30
    6ed4:	d514      	bpl.n	6f00 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xa4>
    6ed6:	f884 a001 	strb.w	sl, [r4, #1]
    6eda:	f884 8000 	strb.w	r8, [r4]
    6ede:	f884 a004 	strb.w	sl, [r4, #4]
    6ee2:	9907      	ldr	r1, [sp, #28]
    6ee4:	f8a4 1005 	strh.w	r1, [r4, #5]
    6ee8:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    6eec:	71e1      	strb	r1, [r4, #7]
    6eee:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    6ef2:	8121      	strh	r1, [r4, #8]
    6ef4:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    6ef8:	8161      	strh	r1, [r4, #10]
    6efa:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    6efe:	e7c8      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f00:	9807      	ldr	r0, [sp, #28]
    6f02:	f7fe fb1d 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6f06:	0007      	movs	r7, r0
    6f08:	d00d      	beq.n	6f26 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xca>
    6f0a:	f007 f9ad 	bl	e268 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    6f0e:	0006      	movs	r6, r0
    6f10:	d015      	beq.n	6f3e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xe2>
    6f12:	f884 a001 	strb.w	sl, [r4, #1]
    6f16:	200f      	movs	r0, #15
    6f18:	7020      	strb	r0, [r4, #0]
    6f1a:	9807      	ldr	r0, [sp, #28]
    6f1c:	80e0      	strh	r0, [r4, #6]
    6f1e:	8126      	strh	r6, [r4, #8]
    6f20:	f884 8004 	strb.w	r8, [r4, #4]
    6f24:	e007      	b.n	6f36 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xda>
    6f26:	f240 213a 	movw	r1, #570	; 0x23a
    6f2a:	e02d      	b.n	6f88 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x12c>
    6f2c:	2100      	movs	r1, #0
    6f2e:	4638      	mov	r0, r7
    6f30:	460a      	mov	r2, r1
    6f32:	f007 fabd 	bl	e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    6f36:	1e76      	subs	r6, r6, #1
    6f38:	b2b6      	uxth	r6, r6
    6f3a:	d2f7      	bcs.n	6f2c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0xd0>
    6f3c:	e7a9      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f3e:	9807      	ldr	r0, [sp, #28]
    6f40:	f7fe fae8 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6f44:	b1f0      	cbz	r0, 6f84 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x128>
    6f46:	f1bb 0f00 	cmp.w	fp, #0
    6f4a:	d020      	beq.n	6f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6f4c:	f007 f8a6 	bl	e09c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6f50:	b160      	cbz	r0, 6f6c <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x110>
    6f52:	9807      	ldr	r0, [sp, #28]
    6f54:	f007 fbd6 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6f58:	2100      	movs	r1, #0
    6f5a:	9807      	ldr	r0, [sp, #28]
    6f5c:	f7fe f95a 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6f60:	f884 a001 	strb.w	sl, [r4, #1]
    6f64:	210c      	movs	r1, #12
    6f66:	4650      	mov	r0, sl
    6f68:	7021      	strb	r1, [r4, #0]
    6f6a:	e000      	b.n	6f6e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x112>
    6f6c:	e00f      	b.n	6f8e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x132>
    6f6e:	f884 a004 	strb.w	sl, [r4, #4]
    6f72:	9907      	ldr	r1, [sp, #28]
    6f74:	f8a4 1005 	strh.w	r1, [r4, #5]
    6f78:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6f7c:	71e1      	strb	r1, [r4, #7]
    6f7e:	3524      	adds	r5, #36	; 0x24
    6f80:	7028      	strb	r0, [r5, #0]
    6f82:	e786      	b.n	6e92 <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x36>
    6f84:	f44f 7116 	mov.w	r1, #600	; 0x258
    6f88:	202b      	movs	r0, #43	; 0x2b
    6f8a:	f7fd fec5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f8e:	2000      	movs	r0, #0
    6f90:	e785      	b.n	6e9e <sym_FTGDIHB35XVITI7QRBPNULMZCYC2B7JJ7JXVWYA+0x42>
    6f92:	0000      	.short	0x0000
    6f94:	20000210 	.word	0x20000210

00006f98 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI>:
    6f98:	b570      	push	{r4, r5, r6, lr}
    6f9a:	4604      	mov	r4, r0
    6f9c:	481b      	ldr	r0, [pc, #108]	; (700c <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x74>)
    6f9e:	6801      	ldr	r1, [r0, #0]
    6fa0:	b319      	cbz	r1, 6fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6fa2:	4620      	mov	r0, r4
    6fa4:	4788      	blx	r1
    6fa6:	b300      	cbz	r0, 6fea <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x52>
    6fa8:	7820      	ldrb	r0, [r4, #0]
    6faa:	2818      	cmp	r0, #24
    6fac:	d002      	beq.n	6fb4 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x1c>
    6fae:	2805      	cmp	r0, #5
    6fb0:	d016      	beq.n	6fe0 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x48>
    6fb2:	e018      	b.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fb4:	7920      	ldrb	r0, [r4, #4]
    6fb6:	2801      	cmp	r0, #1
    6fb8:	d115      	bne.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fba:	88e0      	ldrh	r0, [r4, #6]
    6fbc:	2100      	movs	r1, #0
    6fbe:	f007 fb3e 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    6fc2:	0004      	movs	r4, r0
    6fc4:	d00f      	beq.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fc6:	8820      	ldrh	r0, [r4, #0]
    6fc8:	f007 fb9c 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6fcc:	8820      	ldrh	r0, [r4, #0]
    6fce:	2100      	movs	r1, #0
    6fd0:	f7fe f920 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6fd4:	b138      	cbz	r0, 6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    6fd6:	f240 2192 	movw	r1, #658	; 0x292
    6fda:	202b      	movs	r0, #43	; 0x2b
    6fdc:	f7fd fe9c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fe0:	4620      	mov	r0, r4
    6fe2:	f000 f85b 	bl	709c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x34>
    6fe6:	2001      	movs	r0, #1
    6fe8:	bd70      	pop	{r4, r5, r6, pc}
    6fea:	4d09      	ldr	r5, [pc, #36]	; (7010 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x78>)
    6fec:	7868      	ldrb	r0, [r5, #1]
    6fee:	2800      	cmp	r0, #0
    6ff0:	d0fa      	beq.n	6fe8 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x50>
    6ff2:	2600      	movs	r6, #0
    6ff4:	7066      	strb	r6, [r4, #1]
    6ff6:	2014      	movs	r0, #20
    6ff8:	7020      	strb	r0, [r4, #0]
    6ffa:	2220      	movs	r2, #32
    6ffc:	4631      	mov	r1, r6
    6ffe:	1d20      	adds	r0, r4, #4
    7000:	f006 fafa 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7004:	2002      	movs	r0, #2
    7006:	7120      	strb	r0, [r4, #4]
    7008:	706e      	strb	r6, [r5, #1]
    700a:	e7ec      	b.n	6fe6 <sym_T3BW2IY7GGCYVBUXRHPEV6YGKLT3RH2Z7GCJRQI+0x4e>
    700c:	20000214 	.word	0x20000214
    7010:	20001230 	.word	0x20001230

00007014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    7014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7018:	4c12      	ldr	r4, [pc, #72]	; (7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    701a:	4607      	mov	r7, r0
    701c:	460e      	mov	r6, r1
    701e:	7de0      	ldrb	r0, [r4, #23]
    7020:	b110      	cbz	r0, 7028 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    7022:	8b20      	ldrh	r0, [r4, #24]
    7024:	2800      	cmp	r0, #0
    7026:	d012      	beq.n	704e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7028:	480e      	ldr	r0, [pc, #56]	; (7064 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    702a:	300e      	adds	r0, #14
    702c:	4680      	mov	r8, r0
    702e:	f007 ffb9 	bl	efa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7032:	b9a8      	cbnz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    7034:	89e5      	ldrh	r5, [r4, #14]
    7036:	89e0      	ldrh	r0, [r4, #14]
    7038:	4632      	mov	r2, r6
    703a:	4639      	mov	r1, r7
    703c:	f007 ffb5 	bl	efaa <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x6>
    7040:	b138      	cbz	r0, 7052 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    7042:	7de0      	ldrb	r0, [r4, #23]
    7044:	b110      	cbz	r0, 704c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    7046:	8b20      	ldrh	r0, [r4, #24]
    7048:	1e40      	subs	r0, r0, #1
    704a:	8320      	strh	r0, [r4, #24]
    704c:	2001      	movs	r0, #1
    704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7052:	4640      	mov	r0, r8
    7054:	f007 ffa6 	bl	efa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    7058:	b910      	cbnz	r0, 7060 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    705a:	89e0      	ldrh	r0, [r4, #14]
    705c:	42a8      	cmp	r0, r5
    705e:	d1ea      	bne.n	7036 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    7060:	2000      	movs	r0, #0
    7062:	e7f4      	b.n	704e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    7064:	20001230 	.word	0x20001230

00007068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    7068:	b510      	push	{r4, lr}
    706a:	7901      	ldrb	r1, [r0, #4]
    706c:	b119      	cbz	r1, 7076 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    706e:	2901      	cmp	r1, #1
    7070:	d006      	beq.n	7080 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    7072:	2000      	movs	r0, #0
    7074:	bd10      	pop	{r4, pc}
    7076:	8842      	ldrh	r2, [r0, #2]
    7078:	6883      	ldr	r3, [r0, #8]
    707a:	8800      	ldrh	r0, [r0, #0]
    707c:	2102      	movs	r1, #2
    707e:	e003      	b.n	7088 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    7080:	8842      	ldrh	r2, [r0, #2]
    7082:	6883      	ldr	r3, [r0, #8]
    7084:	8800      	ldrh	r0, [r0, #0]
    7086:	2101      	movs	r1, #1
    7088:	f000 f878 	bl	717c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x114>
    708c:	b910      	cbnz	r0, 7094 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2c>
    708e:	4902      	ldr	r1, [pc, #8]	; (7098 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x30>)
    7090:	2001      	movs	r0, #1
    7092:	7008      	strb	r0, [r1, #0]
    7094:	2001      	movs	r0, #1
    7096:	bd10      	pop	{r4, pc}
    7098:	20001230 	.word	0x20001230
    709c:	b570      	push	{r4, r5, r6, lr}
    709e:	4604      	mov	r4, r0
    70a0:	7800      	ldrb	r0, [r0, #0]
    70a2:	2805      	cmp	r0, #5
    70a4:	d002      	beq.n	70ac <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x44>
    70a6:	f240 1187 	movw	r1, #391	; 0x187
    70aa:	e059      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    70ac:	7ba0      	ldrb	r0, [r4, #14]
    70ae:	06c0      	lsls	r0, r0, #27
    70b0:	d402      	bmi.n	70b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x50>
    70b2:	f44f 71c4 	mov.w	r1, #392	; 0x188
    70b6:	e053      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    70b8:	221c      	movs	r2, #28
    70ba:	1d21      	adds	r1, r4, #4
    70bc:	482e      	ldr	r0, [pc, #184]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70be:	f006 fa21 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70c2:	482d      	ldr	r0, [pc, #180]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70c4:	7b22      	ldrb	r2, [r4, #12]
    70c6:	f104 0120 	add.w	r1, r4, #32
    70ca:	301c      	adds	r0, #28
    70cc:	f006 fa1a 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    70d0:	4829      	ldr	r0, [pc, #164]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    70d2:	f04f 0201 	mov.w	r2, #1
    70d6:	7a81      	ldrb	r1, [r0, #10]
    70d8:	0749      	lsls	r1, r1, #29
    70da:	d502      	bpl.n	70e2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x7a>
    70dc:	7cc1      	ldrb	r1, [r0, #19]
    70de:	29fe      	cmp	r1, #254	; 0xfe
    70e0:	d00c      	beq.n	70fc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x94>
    70e2:	2304      	movs	r3, #4
    70e4:	7023      	strb	r3, [r4, #0]
    70e6:	6801      	ldr	r1, [r0, #0]
    70e8:	6061      	str	r1, [r4, #4]
    70ea:	6841      	ldr	r1, [r0, #4]
    70ec:	60a1      	str	r1, [r4, #8]
    70ee:	8901      	ldrh	r1, [r0, #8]
    70f0:	81a1      	strh	r1, [r4, #12]
    70f2:	7a81      	ldrb	r1, [r0, #10]
    70f4:	070d      	lsls	r5, r1, #28
    70f6:	d519      	bpl.n	712c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xc4>
    70f8:	73a3      	strb	r3, [r4, #14]
    70fa:	e02c      	b.n	7156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    70fc:	2113      	movs	r1, #19
    70fe:	7021      	strb	r1, [r4, #0]
    7100:	7801      	ldrb	r1, [r0, #0]
    7102:	7121      	strb	r1, [r4, #4]
    7104:	7162      	strb	r2, [r4, #5]
    7106:	7841      	ldrb	r1, [r0, #1]
    7108:	71a1      	strb	r1, [r4, #6]
    710a:	f8d0 1002 	ldr.w	r1, [r0, #2]
    710e:	f8c4 1007 	str.w	r1, [r4, #7]
    7112:	88c1      	ldrh	r1, [r0, #6]
    7114:	f8a4 100b 	strh.w	r1, [r4, #11]
    7118:	21fe      	movs	r1, #254	; 0xfe
    711a:	7361      	strb	r1, [r4, #13]
    711c:	6941      	ldr	r1, [r0, #20]
    711e:	f8c4 100e 	str.w	r1, [r4, #14]
    7122:	8b01      	ldrh	r1, [r0, #24]
    7124:	8261      	strh	r1, [r4, #18]
    7126:	7a40      	ldrb	r0, [r0, #9]
    7128:	7520      	strb	r0, [r4, #20]
    712a:	bd70      	pop	{r4, r5, r6, pc}
    712c:	07cb      	lsls	r3, r1, #31
    712e:	d003      	beq.n	7138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7130:	078b      	lsls	r3, r1, #30
    7132:	d501      	bpl.n	7138 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd0>
    7134:	2100      	movs	r1, #0
    7136:	e00d      	b.n	7154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7138:	074b      	lsls	r3, r1, #29
    713a:	d501      	bpl.n	7140 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xd8>
    713c:	73a2      	strb	r2, [r4, #14]
    713e:	e00a      	b.n	7156 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xee>
    7140:	07ca      	lsls	r2, r1, #31
    7142:	d002      	beq.n	714a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe2>
    7144:	f240 11cf 	movw	r1, #463	; 0x1cf
    7148:	e00a      	b.n	7160 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xf8>
    714a:	0789      	lsls	r1, r1, #30
    714c:	d501      	bpl.n	7152 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xea>
    714e:	2102      	movs	r1, #2
    7150:	e000      	b.n	7154 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xec>
    7152:	2103      	movs	r1, #3
    7154:	73a1      	strb	r1, [r4, #14]
    7156:	7a02      	ldrb	r2, [r0, #8]
    7158:	2a1f      	cmp	r2, #31
    715a:	d904      	bls.n	7166 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xfe>
    715c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    7160:	202b      	movs	r0, #43	; 0x2b
    7162:	f7fd fdd9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7166:	f104 000f 	add.w	r0, r4, #15
    716a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    716e:	4902      	ldr	r1, [pc, #8]	; (7178 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x110>)
    7170:	311c      	adds	r1, #28
    7172:	f006 b9c7 	b.w	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7176:	0000      	.short	0x0000
    7178:	200011f4 	.word	0x200011f4
    717c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    7180:	468a      	mov	sl, r1
    7182:	4699      	mov	r9, r3
    7184:	4615      	mov	r5, r2
    7186:	4604      	mov	r4, r0
    7188:	a901      	add	r1, sp, #4
    718a:	f007 fbd6 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    718e:	bbd8      	cbnz	r0, 7208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    7190:	9f02      	ldr	r7, [sp, #8]
    7192:	2001      	movs	r0, #1
    7194:	3778      	adds	r7, #120	; 0x78
    7196:	b18d      	cbz	r5, 71bc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x154>
    7198:	4620      	mov	r0, r4
    719a:	f7fe f9d1 	bl	5540 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    719e:	0004      	movs	r4, r0
    71a0:	d00e      	beq.n	71c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x158>
    71a2:	4629      	mov	r1, r5
    71a4:	f007 f8ad 	bl	e302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    71a8:	0006      	movs	r6, r0
    71aa:	d003      	beq.n	71b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14c>
    71ac:	4819      	ldr	r0, [pc, #100]	; (7214 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1ac>)
    71ae:	8880      	ldrh	r0, [r0, #4]
    71b0:	42a8      	cmp	r0, r5
    71b2:	d207      	bcs.n	71c4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x15c>
    71b4:	2000      	movs	r0, #0
    71b6:	b004      	add	sp, #16
    71b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71bc:	7538      	strb	r0, [r7, #20]
    71be:	e023      	b.n	7208 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a0>
    71c0:	2189      	movs	r1, #137	; 0x89
    71c2:	e024      	b.n	720e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a6>
    71c4:	4620      	mov	r0, r4
    71c6:	4631      	mov	r1, r6
    71c8:	aa03      	add	r2, sp, #12
    71ca:	f007 f893 	bl	e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    71ce:	9803      	ldr	r0, [sp, #12]
    71d0:	f04f 0800 	mov.w	r8, #0
    71d4:	f8a0 8000 	strh.w	r8, [r0]
    71d8:	f880 8002 	strb.w	r8, [r0, #2]
    71dc:	7d39      	ldrb	r1, [r7, #20]
    71de:	b109      	cbz	r1, 71e4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x17c>
    71e0:	f04f 0a02 	mov.w	sl, #2
    71e4:	4651      	mov	r1, sl
    71e6:	f007 fe57 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    71ea:	4631      	mov	r1, r6
    71ec:	2603      	movs	r6, #3
    71ee:	4620      	mov	r0, r4
    71f0:	464a      	mov	r2, r9
    71f2:	462b      	mov	r3, r5
    71f4:	9600      	str	r6, [sp, #0]
    71f6:	f006 ff3a 	bl	e06e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    71fa:	4620      	mov	r0, r4
    71fc:	4629      	mov	r1, r5
    71fe:	f007 f80f 	bl	e220 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    7202:	b118      	cbz	r0, 720c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1a4>
    7204:	f887 8014 	strb.w	r8, [r7, #20]
    7208:	2001      	movs	r0, #1
    720a:	e7d4      	b.n	71b6 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x14e>
    720c:	219f      	movs	r1, #159	; 0x9f
    720e:	202b      	movs	r0, #43	; 0x2b
    7210:	f7fd fd82 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7214:	20001230 	.word	0x20001230
    7218:	b510      	push	{r4, lr}
    721a:	492c      	ldr	r1, [pc, #176]	; (72cc <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x264>)
    721c:	b086      	sub	sp, #24
    721e:	7d8a      	ldrb	r2, [r1, #22]
    7220:	7801      	ldrb	r1, [r0, #0]
    7222:	07d3      	lsls	r3, r2, #31
    7224:	d101      	bne.n	722a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1c2>
    7226:	291d      	cmp	r1, #29
    7228:	d004      	beq.n	7234 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1cc>
    722a:	291c      	cmp	r1, #28
    722c:	d01e      	beq.n	726c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x204>
    722e:	2915      	cmp	r1, #21
    7230:	d045      	beq.n	72be <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x256>
    7232:	e049      	b.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    7234:	8880      	ldrh	r0, [r0, #4]
    7236:	f8ad 0000 	strh.w	r0, [sp]
    723a:	a902      	add	r1, sp, #8
    723c:	f007 fb7d 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7240:	b108      	cbz	r0, 7246 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x1de>
    7242:	2158      	movs	r1, #88	; 0x58
    7244:	e035      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    7246:	9803      	ldr	r0, [sp, #12]
    7248:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    724c:	f88d 1002 	strb.w	r1, [sp, #2]
    7250:	7841      	ldrb	r1, [r0, #1]
    7252:	f88d 1003 	strb.w	r1, [sp, #3]
    7256:	8840      	ldrh	r0, [r0, #2]
    7258:	f8ad 0004 	strh.w	r0, [sp, #4]
    725c:	2102      	movs	r1, #2
    725e:	4668      	mov	r0, sp
    7260:	f004 fc7e 	bl	bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7264:	b340      	cbz	r0, 72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    7266:	f240 114d 	movw	r1, #333	; 0x14d
    726a:	e022      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    726c:	0791      	lsls	r1, r2, #30
    726e:	d42b      	bmi.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    7270:	8884      	ldrh	r4, [r0, #4]
    7272:	a903      	add	r1, sp, #12
    7274:	4620      	mov	r0, r4
    7276:	f008 fdfc 	bl	fe72 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    727a:	b110      	cbz	r0, 7282 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x21a>
    727c:	f44f 71aa 	mov.w	r1, #340	; 0x154
    7280:	e017      	b.n	72b2 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x24a>
    7282:	f8ad 4000 	strh.w	r4, [sp]
    7286:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    728a:	f8ad 0002 	strh.w	r0, [sp, #2]
    728e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    7292:	f8ad 0004 	strh.w	r0, [sp, #4]
    7296:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    729a:	f8ad 0006 	strh.w	r0, [sp, #6]
    729e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    72a2:	f8ad 0008 	strh.w	r0, [sp, #8]
    72a6:	4668      	mov	r0, sp
    72a8:	f008 fe0e 	bl	fec8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    72ac:	b120      	cbz	r0, 72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    72ae:	f240 115d 	movw	r1, #349	; 0x15d
    72b2:	202b      	movs	r0, #43	; 0x2b
    72b4:	f7fd fd30 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72b8:	2001      	movs	r0, #1
    72ba:	b006      	add	sp, #24
    72bc:	bd10      	pop	{r4, pc}
    72be:	0751      	lsls	r1, r2, #29
    72c0:	d402      	bmi.n	72c8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x260>
    72c2:	7b80      	ldrb	r0, [r0, #14]
    72c4:	07c0      	lsls	r0, r0, #31
    72c6:	d0f7      	beq.n	72b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x250>
    72c8:	2000      	movs	r0, #0
    72ca:	e7f6      	b.n	72ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x252>
    72cc:	20001230 	.word	0x20001230

000072d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>:
    72d0:	b510      	push	{r4, lr}
    72d2:	4603      	mov	r3, r0
    72d4:	4907      	ldr	r1, [pc, #28]	; (72f4 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x24>)
    72d6:	4c08      	ldr	r4, [pc, #32]	; (72f8 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0x28>)
    72d8:	2001      	movs	r0, #1
    72da:	780a      	ldrb	r2, [r1, #0]
    72dc:	1c52      	adds	r2, r2, #1
    72de:	f002 021f 	and.w	r2, r2, #31
    72e2:	700a      	strb	r2, [r1, #0]
    72e4:	fa00 f202 	lsl.w	r2, r0, r2
    72e8:	4222      	tst	r2, r4
    72ea:	d0f6      	beq.n	72da <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q+0xa>
    72ec:	7809      	ldrb	r1, [r1, #0]
    72ee:	4088      	lsls	r0, r1
    72f0:	4058      	eors	r0, r3
    72f2:	bd10      	pop	{r4, pc}
    72f4:	20000295 	.word	0x20000295
    72f8:	abd7aeaa 	.word	0xabd7aeaa

000072fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    72fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    72fe:	f06f 021f 	mvn.w	r2, #31
    7302:	0c01      	lsrs	r1, r0, #16
    7304:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    7308:	251f      	movs	r5, #31
    730a:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    730e:	3854      	subs	r0, #84	; 0x54
    7310:	d00d      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7312:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    7316:	3855      	subs	r0, #85	; 0x55
    7318:	d009      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    731a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    731e:	38aa      	subs	r0, #170	; 0xaa
    7320:	d005      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7322:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    7326:	38aa      	subs	r0, #170	; 0xaa
    7328:	d001      	beq.n	732e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    732a:	2001      	movs	r0, #1
    732c:	e000      	b.n	7330 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    732e:	2000      	movs	r0, #0
    7330:	2200      	movs	r2, #0
    7332:	4613      	mov	r3, r2
    7334:	ea4f 0402 	mov.w	r4, r2
    7338:	ea82 0701 	eor.w	r7, r2, r1
    733c:	43ff      	mvns	r7, r7
    733e:	431f      	orrs	r7, r3
    7340:	1c7f      	adds	r7, r7, #1
    7342:	d00f      	beq.n	7364 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7344:	f006 0701 	and.w	r7, r6, #1
    7348:	0852      	lsrs	r2, r2, #1
    734a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    734e:	f005 0701 	and.w	r7, r5, #1
    7352:	085b      	lsrs	r3, r3, #1
    7354:	0876      	lsrs	r6, r6, #1
    7356:	086d      	lsrs	r5, r5, #1
    7358:	1c64      	adds	r4, r4, #1
    735a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    735e:	2c16      	cmp	r4, #22
    7360:	d3ea      	bcc.n	7338 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7362:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7364:	2000      	movs	r0, #0
    7366:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    7368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    736c:	2500      	movs	r5, #0
    736e:	f8df 808c 	ldr.w	r8, [pc, #140]	; 73fc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x94>
    7372:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7400 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x98>
    7376:	4607      	mov	r7, r0
    7378:	260a      	movs	r6, #10
    737a:	2104      	movs	r1, #4
    737c:	4668      	mov	r0, sp
    737e:	f7fd fd75 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    7382:	9800      	ldr	r0, [sp, #0]
    7384:	ea00 0008 	and.w	r0, r0, r8
    7388:	ea40 0009 	orr.w	r0, r0, r9
    738c:	9000      	str	r0, [sp, #0]
    738e:	2000      	movs	r0, #0
    7390:	f7fd fea6 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    7394:	4604      	mov	r4, r0
    7396:	e019      	b.n	73cc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x64>
    7398:	a901      	add	r1, sp, #4
    739a:	2000      	movs	r0, #0
    739c:	f007 f958 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    73a0:	e00e      	b.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73a2:	bf00      	nop
    73a4:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    73a8:	42b8      	cmp	r0, r7
    73aa:	d009      	beq.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73ac:	9803      	ldr	r0, [sp, #12]
    73ae:	9900      	ldr	r1, [sp, #0]
    73b0:	6900      	ldr	r0, [r0, #16]
    73b2:	4288      	cmp	r0, r1
    73b4:	d104      	bne.n	73c0 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    73b6:	4608      	mov	r0, r1
    73b8:	f7ff ff8a 	bl	72d0 <sym_YCGK7WNXKD6OBWJXKZPNCNC4IVXYKAWKFKPJJ3Q>
    73bc:	9000      	str	r0, [sp, #0]
    73be:	e004      	b.n	73ca <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x62>
    73c0:	a801      	add	r0, sp, #4
    73c2:	f7fd fed9 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    73c6:	0005      	movs	r5, r0
    73c8:	d0ec      	beq.n	73a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3c>
    73ca:	1e64      	subs	r4, r4, #1
    73cc:	2c00      	cmp	r4, #0
    73ce:	dd01      	ble.n	73d4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x6c>
    73d0:	2d00      	cmp	r5, #0
    73d2:	d0e1      	beq.n	7398 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x30>
    73d4:	2000      	movs	r0, #0
    73d6:	f7fd fe83 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    73da:	b100      	cbz	r0, 73de <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    73dc:	b155      	cbz	r5, 73f4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8c>
    73de:	9800      	ldr	r0, [sp, #0]
    73e0:	f7ff ff8c 	bl	72fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    73e4:	1e76      	subs	r6, r6, #1
    73e6:	d001      	beq.n	73ec <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x84>
    73e8:	2800      	cmp	r0, #0
    73ea:	d0c6      	beq.n	737a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x12>
    73ec:	9800      	ldr	r0, [sp, #0]
    73ee:	b004      	add	sp, #16
    73f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    73f4:	2152      	movs	r1, #82	; 0x52
    73f6:	200f      	movs	r0, #15
    73f8:	f7fd fc8e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73fc:	abd7aeaa 	.word	0xabd7aeaa
    7400:	10204115 	.word	0x10204115

00007404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    7404:	4801      	ldr	r0, [pc, #4]	; (740c <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    7406:	6840      	ldr	r0, [r0, #4]
    7408:	3080      	adds	r0, #128	; 0x80
    740a:	4770      	bx	lr
    740c:	200000ec 	.word	0x200000ec

00007410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    7410:	b510      	push	{r4, lr}
    7412:	4c1f      	ldr	r4, [pc, #124]	; (7490 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    7414:	6860      	ldr	r0, [r4, #4]
    7416:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    741a:	f007 ff77 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    741e:	6861      	ldr	r1, [r4, #4]
    7420:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    7424:	3132      	adds	r1, #50	; 0x32
    7426:	f7fe fabd 	bl	59a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    742a:	6860      	ldr	r0, [r4, #4]
    742c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7430:	f007 ff73 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    7434:	6861      	ldr	r1, [r4, #4]
    7436:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    743a:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    743e:	3132      	adds	r1, #50	; 0x32
    7440:	f007 ff50 	bl	f2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7444:	b930      	cbnz	r0, 7454 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    7446:	6861      	ldr	r1, [r4, #4]
    7448:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    744c:	3132      	adds	r1, #50	; 0x32
    744e:	f007 ff52 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7452:	b108      	cbz	r0, 7458 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    7454:	2101      	movs	r1, #1
    7456:	e000      	b.n	745a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    7458:	2100      	movs	r1, #0
    745a:	6860      	ldr	r0, [r4, #4]
    745c:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    7460:	b919      	cbnz	r1, 746a <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    7462:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    7466:	2900      	cmp	r1, #0
    7468:	d010      	beq.n	748c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    746a:	2100      	movs	r1, #0
    746c:	6781      	str	r1, [r0, #120]	; 0x78
    746e:	f005 fed4 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7472:	6861      	ldr	r1, [r4, #4]
    7474:	6448      	str	r0, [r1, #68]	; 0x44
    7476:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    747a:	b110      	cbz	r0, 7482 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    747c:	2000      	movs	r0, #0
    747e:	f7ff f883 	bl	6588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7486:	2000      	movs	r0, #0
    7488:	f000 bddc 	b.w	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    748c:	bd10      	pop	{r4, pc}
    748e:	0000      	.short	0x0000
    7490:	200000ec 	.word	0x200000ec

00007494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    7494:	b510      	push	{r4, lr}
    7496:	4c09      	ldr	r4, [pc, #36]	; (74bc <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    7498:	2803      	cmp	r0, #3
    749a:	6864      	ldr	r4, [r4, #4]
    749c:	d109      	bne.n	74b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    749e:	63e1      	str	r1, [r4, #60]	; 0x3c
    74a0:	b13b      	cbz	r3, 74b2 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    74a2:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    74a6:	6819      	ldr	r1, [r3, #0]
    74a8:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    74ac:	8899      	ldrh	r1, [r3, #4]
    74ae:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    74b2:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    74b6:	2000      	movs	r0, #0
    74b8:	bd10      	pop	{r4, pc}
    74ba:	0000      	.short	0x0000
    74bc:	200000ec 	.word	0x200000ec

000074c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    74c0:	4807      	ldr	r0, [pc, #28]	; (74e0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    74c2:	b508      	push	{r3, lr}
    74c4:	6840      	ldr	r0, [r0, #4]
    74c6:	7801      	ldrb	r1, [r0, #0]
    74c8:	f88d 1000 	strb.w	r1, [sp]
    74cc:	9900      	ldr	r1, [sp, #0]
    74ce:	9100      	str	r1, [sp, #0]
    74d0:	f89d 1000 	ldrb.w	r1, [sp]
    74d4:	b109      	cbz	r1, 74da <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    74d6:	8880      	ldrh	r0, [r0, #4]
    74d8:	bd08      	pop	{r3, pc}
    74da:	f64f 70ff 	movw	r0, #65535	; 0xffff
    74de:	bd08      	pop	{r3, pc}
    74e0:	200000ec 	.word	0x200000ec

000074e4 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    74e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    74e6:	4604      	mov	r4, r0
    74e8:	f007 ff60 	bl	f3ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    74ec:	bb48      	cbnz	r0, 7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    74ee:	4e17      	ldr	r6, [pc, #92]	; (754c <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    74f0:	6870      	ldr	r0, [r6, #4]
    74f2:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    74f6:	f88d 1000 	strb.w	r1, [sp]
    74fa:	9900      	ldr	r1, [sp, #0]
    74fc:	9100      	str	r1, [sp, #0]
    74fe:	f89d 1000 	ldrb.w	r1, [sp]
    7502:	2500      	movs	r5, #0
    7504:	b139      	cbz	r1, 7516 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    7506:	7065      	strb	r5, [r4, #1]
    7508:	2107      	movs	r1, #7
    750a:	7021      	strb	r1, [r4, #0]
    750c:	6a41      	ldr	r1, [r0, #36]	; 0x24
    750e:	6061      	str	r1, [r4, #4]
    7510:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    7514:	e015      	b.n	7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    7516:	4620      	mov	r0, r4
    7518:	f000 f9d0 	bl	78bc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    751c:	b988      	cbnz	r0, 7542 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    751e:	6870      	ldr	r0, [r6, #4]
    7520:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    7524:	f88d 1000 	strb.w	r1, [sp]
    7528:	9900      	ldr	r1, [sp, #0]
    752a:	9100      	str	r1, [sp, #0]
    752c:	f89d 1000 	ldrb.w	r1, [sp]
    7530:	b149      	cbz	r1, 7546 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    7532:	7065      	strb	r5, [r4, #1]
    7534:	2118      	movs	r1, #24
    7536:	7021      	strb	r1, [r4, #0]
    7538:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    753c:	6061      	str	r1, [r4, #4]
    753e:	300a      	adds	r0, #10
    7540:	7785      	strb	r5, [r0, #30]
    7542:	2001      	movs	r0, #1
    7544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7546:	2000      	movs	r0, #0
    7548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    754a:	0000      	.short	0x0000
    754c:	200000ec 	.word	0x200000ec

00007550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    7550:	4902      	ldr	r1, [pc, #8]	; (755c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    7552:	6849      	ldr	r1, [r1, #4]
    7554:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    7558:	2000      	movs	r0, #0
    755a:	4770      	bx	lr
    755c:	200000ec 	.word	0x200000ec

00007560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    7560:	4809      	ldr	r0, [pc, #36]	; (7588 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    7562:	6841      	ldr	r1, [r0, #4]
    7564:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7566:	b168      	cbz	r0, 7584 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    7568:	f101 0059 	add.w	r0, r1, #89	; 0x59
    756c:	2201      	movs	r2, #1
    756e:	7002      	strb	r2, [r0, #0]
    7570:	2300      	movs	r3, #0
    7572:	654b      	str	r3, [r1, #84]	; 0x54
    7574:	7003      	strb	r3, [r0, #0]
    7576:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    757a:	4082      	lsls	r2, r0
    757c:	4803      	ldr	r0, [pc, #12]	; (758c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    757e:	6002      	str	r2, [r0, #0]
    7580:	2000      	movs	r0, #0
    7582:	4770      	bx	lr
    7584:	200c      	movs	r0, #12
    7586:	4770      	bx	lr
    7588:	200000ec 	.word	0x200000ec
    758c:	4001f508 	.word	0x4001f508

00007590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    7590:	4909      	ldr	r1, [pc, #36]	; (75b8 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    7592:	b510      	push	{r4, lr}
    7594:	6088      	str	r0, [r1, #8]
    7596:	68c8      	ldr	r0, [r1, #12]
    7598:	b150      	cbz	r0, 75b0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    759a:	f000 ff55 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    759e:	f000 f885 	bl	76ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    75a2:	2800      	cmp	r0, #0
    75a4:	d007      	beq.n	75b6 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    75a6:	f640 0169 	movw	r1, #2153	; 0x869
    75aa:	2032      	movs	r0, #50	; 0x32
    75ac:	f7fd fbb4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75b0:	f640 0165 	movw	r1, #2149	; 0x865
    75b4:	e7f9      	b.n	75aa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    75b6:	bd10      	pop	{r4, pc}
    75b8:	200000ec 	.word	0x200000ec

000075bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    75bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75c0:	4c0f      	ldr	r4, [pc, #60]	; (7600 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    75c2:	4605      	mov	r5, r0
    75c4:	4616      	mov	r6, r2
    75c6:	6860      	ldr	r0, [r4, #4]
    75c8:	460f      	mov	r7, r1
    75ca:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    75ce:	f007 fea4 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    75d2:	b158      	cbz	r0, 75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75d4:	b955      	cbnz	r5, 75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75d6:	4638      	mov	r0, r7
    75d8:	f007 fe98 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    75dc:	4631      	mov	r1, r6
    75de:	f007 f932 	bl	e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    75e2:	2808      	cmp	r0, #8
    75e4:	d002      	beq.n	75ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    75e6:	2001      	movs	r0, #1
    75e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    75ec:	6860      	ldr	r0, [r4, #4]
    75ee:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    75f2:	f007 fe8b 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    75f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    75fa:	f7fe b9ff 	b.w	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    75fe:	0000      	.short	0x0000
    7600:	200000ec 	.word	0x200000ec

00007604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    7604:	b570      	push	{r4, r5, r6, lr}
    7606:	4c13      	ldr	r4, [pc, #76]	; (7654 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    7608:	4615      	mov	r5, r2
    760a:	460e      	mov	r6, r1
    760c:	2800      	cmp	r0, #0
    760e:	d016      	beq.n	763e <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    7610:	f04f 0200 	mov.w	r2, #0
    7614:	6861      	ldr	r1, [r4, #4]
    7616:	f801 2f39 	strb.w	r2, [r1, #57]!
    761a:	7248      	strb	r0, [r1, #9]
    761c:	f04f 0008 	mov.w	r0, #8
    7620:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    7624:	d114      	bne.n	7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    7626:	4630      	mov	r0, r6
    7628:	f007 fe70 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    762c:	4629      	mov	r1, r5
    762e:	f007 f90a 	bl	e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    7632:	6861      	ldr	r1, [r4, #4]
    7634:	2808      	cmp	r0, #8
    7636:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    763a:	d003      	beq.n	7644 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    763c:	e008      	b.n	7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    763e:	f04f 0201 	mov.w	r2, #1
    7642:	e7e7      	b.n	7614 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    7644:	4630      	mov	r0, r6
    7646:	f007 fe68 	bl	f31a <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xde>
    764a:	b108      	cbz	r0, 7650 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    764c:	2012      	movs	r0, #18
    764e:	bd70      	pop	{r4, r5, r6, pc}
    7650:	2000      	movs	r0, #0
    7652:	bd70      	pop	{r4, r5, r6, pc}
    7654:	200000ec 	.word	0x200000ec

00007658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    7658:	4902      	ldr	r1, [pc, #8]	; (7664 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    765a:	4801      	ldr	r0, [pc, #4]	; (7660 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    765c:	60c8      	str	r0, [r1, #12]
    765e:	4770      	bx	lr
    7660:	0000868c 	.word	0x0000868c
    7664:	200000ec 	.word	0x200000ec

00007668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    7668:	4902      	ldr	r1, [pc, #8]	; (7674 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    766a:	6849      	ldr	r1, [r1, #4]
    766c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7670:	4770      	bx	lr
    7672:	0000      	.short	0x0000
    7674:	200000ec 	.word	0x200000ec

00007678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    7678:	b570      	push	{r4, r5, r6, lr}
    767a:	4605      	mov	r5, r0
    767c:	f7fd ff78 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7680:	4604      	mov	r4, r0
    7682:	f7fd ff7b 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7686:	4621      	mov	r1, r4
    7688:	f007 fe8e 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    768c:	0001      	movs	r1, r0
    768e:	d006      	beq.n	769e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    7690:	4805      	ldr	r0, [pc, #20]	; (76a8 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    7692:	68c0      	ldr	r0, [r0, #12]
    7694:	6802      	ldr	r2, [r0, #0]
    7696:	4628      	mov	r0, r5
    7698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    769c:	4710      	bx	r2
    769e:	f640 1161 	movw	r1, #2401	; 0x961
    76a2:	2032      	movs	r0, #50	; 0x32
    76a4:	f7fd fb38 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76a8:	200000ec 	.word	0x200000ec

000076ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    76ac:	b570      	push	{r4, r5, r6, lr}
    76ae:	4d19      	ldr	r5, [pc, #100]	; (7714 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    76b0:	6868      	ldr	r0, [r5, #4]
    76b2:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    76b6:	2901      	cmp	r1, #1
    76b8:	d004      	beq.n	76c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    76ba:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    76be:	b108      	cbz	r0, 76c4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    76c0:	200c      	movs	r0, #12
    76c2:	bd70      	pop	{r4, r5, r6, pc}
    76c4:	f7fd ff7e 	bl	55c4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    76c8:	f007 fed4 	bl	f474 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    76cc:	6868      	ldr	r0, [r5, #4]
    76ce:	2400      	movs	r4, #0
    76d0:	7004      	strb	r4, [r0, #0]
    76d2:	f100 0122 	add.w	r1, r0, #34	; 0x22
    76d6:	700c      	strb	r4, [r1, #0]
    76d8:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    76dc:	f000 f8b4 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    76e0:	6868      	ldr	r0, [r5, #4]
    76e2:	2201      	movs	r2, #1
    76e4:	2107      	movs	r1, #7
    76e6:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    76ea:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    76ee:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    76f2:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    76f6:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    76fa:	f880 407d 	strb.w	r4, [r0, #125]	; 0x7d
    76fe:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7702:	f100 0159 	add.w	r1, r0, #89	; 0x59
    7706:	700a      	strb	r2, [r1, #0]
    7708:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    770c:	6544      	str	r4, [r0, #84]	; 0x54
    770e:	700c      	strb	r4, [r1, #0]
    7710:	2000      	movs	r0, #0
    7712:	bd70      	pop	{r4, r5, r6, pc}
    7714:	200000ec 	.word	0x200000ec

00007718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    7718:	4805      	ldr	r0, [pc, #20]	; (7730 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    771a:	b510      	push	{r4, lr}
    771c:	6840      	ldr	r0, [r0, #4]
    771e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7722:	f007 fdf3 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    7726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    772a:	f7fe b967 	b.w	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    772e:	0000      	.short	0x0000
    7730:	200000ec 	.word	0x200000ec

00007734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    7734:	b140      	cbz	r0, 7748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    7736:	2802      	cmp	r0, #2
    7738:	d006      	beq.n	7748 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    773a:	2200      	movs	r2, #0
    773c:	4903      	ldr	r1, [pc, #12]	; (774c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    773e:	6849      	ldr	r1, [r1, #4]
    7740:	f801 2f39 	strb.w	r2, [r1, #57]!
    7744:	7208      	strb	r0, [r1, #8]
    7746:	4770      	bx	lr
    7748:	2201      	movs	r2, #1
    774a:	e7f7      	b.n	773c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    774c:	200000ec 	.word	0x200000ec

00007750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    7750:	4902      	ldr	r1, [pc, #8]	; (775c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    7752:	6849      	ldr	r1, [r1, #4]
    7754:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7758:	4770      	bx	lr
    775a:	0000      	.short	0x0000
    775c:	200000ec 	.word	0x200000ec

00007760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    7760:	b510      	push	{r4, lr}
    7762:	4604      	mov	r4, r0
    7764:	7800      	ldrb	r0, [r0, #0]
    7766:	07c0      	lsls	r0, r0, #31
    7768:	d007      	beq.n	777a <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    776a:	2300      	movs	r3, #0
    776c:	7860      	ldrb	r0, [r4, #1]
    776e:	461a      	mov	r2, r3
    7770:	4619      	mov	r1, r3
    7772:	f7ff fe8f 	bl	7494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    7776:	2800      	cmp	r0, #0
    7778:	d10c      	bne.n	7794 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    777a:	4b07      	ldr	r3, [pc, #28]	; (7798 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    777c:	78a0      	ldrb	r0, [r4, #2]
    777e:	6859      	ldr	r1, [r3, #4]
    7780:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7784:	78e0      	ldrb	r0, [r4, #3]
    7786:	f7ff ffd5 	bl	7734 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    778a:	6859      	ldr	r1, [r3, #4]
    778c:	7920      	ldrb	r0, [r4, #4]
    778e:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7792:	2000      	movs	r0, #0
    7794:	bd10      	pop	{r4, pc}
    7796:	0000      	.short	0x0000
    7798:	200000ec 	.word	0x200000ec

0000779c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    779c:	4801      	ldr	r0, [pc, #4]	; (77a4 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    779e:	68c0      	ldr	r0, [r0, #12]
    77a0:	6840      	ldr	r0, [r0, #4]
    77a2:	4700      	bx	r0
    77a4:	200000ec 	.word	0x200000ec

000077a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    77a8:	b510      	push	{r4, lr}
    77aa:	2000      	movs	r0, #0
    77ac:	f000 fc70 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    77b0:	f000 f84a 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    77b4:	f000 fe48 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    77b8:	4803      	ldr	r0, [pc, #12]	; (77c8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    77ba:	6840      	ldr	r0, [r0, #4]
    77bc:	2100      	movs	r1, #0
    77be:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    77c2:	4608      	mov	r0, r1
    77c4:	bd10      	pop	{r4, pc}
    77c6:	0000      	.short	0x0000
    77c8:	200000ec 	.word	0x200000ec

000077cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    77cc:	b510      	push	{r4, lr}
    77ce:	f000 f951 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    77d2:	4909      	ldr	r1, [pc, #36]	; (77f8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    77d4:	2201      	movs	r2, #1
    77d6:	b130      	cbz	r0, 77e6 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    77d8:	6848      	ldr	r0, [r1, #4]
    77da:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    77de:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    77e0:	881b      	ldrh	r3, [r3, #0]
    77e2:	8583      	strh	r3, [r0, #44]	; 0x2c
    77e4:	e004      	b.n	77f0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    77e6:	684b      	ldr	r3, [r1, #4]
    77e8:	2000      	movs	r0, #0
    77ea:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    77ee:	8598      	strh	r0, [r3, #44]	; 0x2c
    77f0:	6848      	ldr	r0, [r1, #4]
    77f2:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    77f6:	bd10      	pop	{r4, pc}
    77f8:	200000ec 	.word	0x200000ec

000077fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    77fc:	4802      	ldr	r0, [pc, #8]	; (7808 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    77fe:	6840      	ldr	r0, [r0, #4]
    7800:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7804:	4770      	bx	lr
    7806:	0000      	.short	0x0000
    7808:	200000ec 	.word	0x200000ec

0000780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    780c:	b510      	push	{r4, lr}
    780e:	f000 f931 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7812:	490c      	ldr	r1, [pc, #48]	; (7844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    7814:	b128      	cbz	r0, 7822 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    7816:	6848      	ldr	r0, [r1, #4]
    7818:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    781c:	2801      	cmp	r0, #1
    781e:	d00e      	beq.n	783e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    7820:	e00c      	b.n	783c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7822:	6849      	ldr	r1, [r1, #4]
    7824:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    7828:	2801      	cmp	r0, #1
    782a:	d001      	beq.n	7830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    782c:	2802      	cmp	r0, #2
    782e:	d105      	bne.n	783c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7830:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    7834:	2801      	cmp	r0, #1
    7836:	d003      	beq.n	7840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    7838:	2803      	cmp	r0, #3
    783a:	d001      	beq.n	7840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    783c:	2000      	movs	r0, #0
    783e:	bd10      	pop	{r4, pc}
    7840:	2001      	movs	r0, #1
    7842:	bd10      	pop	{r4, pc}
    7844:	200000ec 	.word	0x200000ec
    7848:	b510      	push	{r4, lr}
    784a:	4c07      	ldr	r4, [pc, #28]	; (7868 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    784c:	6860      	ldr	r0, [r4, #4]
    784e:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    7852:	2800      	cmp	r0, #0
    7854:	d007      	beq.n	7866 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    7856:	f004 fe19 	bl	c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    785a:	f004 fbfb 	bl	c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    785e:	6861      	ldr	r1, [r4, #4]
    7860:	2000      	movs	r0, #0
    7862:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7866:	bd10      	pop	{r4, pc}
    7868:	200000ec 	.word	0x200000ec
    786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7870:	4d10      	ldr	r5, [pc, #64]	; (78b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    7872:	4606      	mov	r6, r0
    7874:	460f      	mov	r7, r1
    7876:	6868      	ldr	r0, [r5, #4]
    7878:	490f      	ldr	r1, [pc, #60]	; (78b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    787a:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    787e:	5c0c      	ldrb	r4, [r1, r0]
    7880:	4620      	mov	r0, r4
    7882:	f005 f967 	bl	cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7886:	6868      	ldr	r0, [r5, #4]
    7888:	2101      	movs	r1, #1
    788a:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    788e:	2025      	movs	r0, #37	; 0x25
    7890:	f008 ffb0 	bl	107f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7894:	4638      	mov	r0, r7
    7896:	f005 f86f 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    789a:	f04f 0101 	mov.w	r1, #1
    789e:	4608      	mov	r0, r1
    78a0:	b126      	cbz	r6, 78ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    78a2:	f004 fea5 	bl	c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    78a6:	b918      	cbnz	r0, 78b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    78a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    78ac:	f004 fe54 	bl	c558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    78b0:	2001      	movs	r0, #1
    78b2:	e7f9      	b.n	78a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    78b4:	200000ec 	.word	0x200000ec
    78b8:	00010930 	.word	0x00010930
    78bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78be:	4e20      	ldr	r6, [pc, #128]	; (7940 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    78c0:	4604      	mov	r4, r0
    78c2:	6870      	ldr	r0, [r6, #4]
    78c4:	7801      	ldrb	r1, [r0, #0]
    78c6:	f88d 1000 	strb.w	r1, [sp]
    78ca:	9900      	ldr	r1, [sp, #0]
    78cc:	9100      	str	r1, [sp, #0]
    78ce:	f89d 1000 	ldrb.w	r1, [sp]
    78d2:	b389      	cbz	r1, 7938 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    78d4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    78d6:	6882      	ldr	r2, [r0, #8]
    78d8:	f841 2f03 	str.w	r2, [r1, #3]!
    78dc:	8982      	ldrh	r2, [r0, #12]
    78de:	808a      	strh	r2, [r1, #4]
    78e0:	79c0      	ldrb	r0, [r0, #7]
    78e2:	f007 fd13 	bl	f30c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xd0>
    78e6:	6871      	ldr	r1, [r6, #4]
    78e8:	2500      	movs	r5, #0
    78ea:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    78ec:	1c89      	adds	r1, r1, #2
    78ee:	7090      	strb	r0, [r2, #2]
    78f0:	7065      	strb	r5, [r4, #1]
    78f2:	2014      	movs	r0, #20
    78f4:	7020      	strb	r0, [r4, #0]
    78f6:	2220      	movs	r2, #32
    78f8:	1d20      	adds	r0, r4, #4
    78fa:	f005 fe03 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    78fe:	4a11      	ldr	r2, [pc, #68]	; (7944 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    7900:	7225      	strb	r5, [r4, #8]
    7902:	2301      	movs	r3, #1
    7904:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7906:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    790a:	6871      	ldr	r1, [r6, #4]
    790c:	700d      	strb	r5, [r1, #0]
    790e:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7912:	7005      	strb	r5, [r0, #0]
    7914:	88e0      	ldrh	r0, [r4, #6]
    7916:	8490      	strh	r0, [r2, #36]	; 0x24
    7918:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    791a:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    791e:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    7922:	4610      	mov	r0, r2
    7924:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    7928:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    792a:	8800      	ldrh	r0, [r0, #0]
    792c:	f7fd fdf2 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7930:	f006 fd70 	bl	e414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7934:	2001      	movs	r0, #1
    7936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7938:	e7ff      	b.n	793a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    793a:	2000      	movs	r0, #0
    793c:	e7fb      	b.n	7936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    793e:	0000      	.short	0x0000
    7940:	200000ec 	.word	0x200000ec
    7944:	2000124c 	.word	0x2000124c
    7948:	b570      	push	{r4, r5, r6, lr}
    794a:	4c1d      	ldr	r4, [pc, #116]	; (79c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b4>)
    794c:	4605      	mov	r5, r0
    794e:	2907      	cmp	r1, #7
    7950:	6860      	ldr	r0, [r4, #4]
    7952:	f890 6039 	ldrb.w	r6, [r0, #57]	; 0x39
    7956:	d301      	bcc.n	795c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x150>
    7958:	2000      	movs	r0, #0
    795a:	bd70      	pop	{r4, r5, r6, pc}
    795c:	7c68      	ldrb	r0, [r5, #17]
    795e:	6869      	ldr	r1, [r5, #4]
    7960:	f007 fcc9 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7964:	6861      	ldr	r1, [r4, #4]
    7966:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    796a:	b141      	cbz	r1, 797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    796c:	b138      	cbz	r0, 797e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x172>
    796e:	f006 ff60 	bl	e832 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7972:	4601      	mov	r1, r0
    7974:	6860      	ldr	r0, [r4, #4]
    7976:	f800 1f64 	strb.w	r1, [r0, #100]!
    797a:	2101      	movs	r1, #1
    797c:	71c1      	strb	r1, [r0, #7]
    797e:	6863      	ldr	r3, [r4, #4]
    7980:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    7984:	28ff      	cmp	r0, #255	; 0xff
    7986:	d012      	beq.n	79ae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a2>
    7988:	f883 0065 	strb.w	r0, [r3, #101]	; 0x65
    798c:	f7fe feaa 	bl	66e4 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7990:	4330      	orrs	r0, r6
    7992:	6869      	ldr	r1, [r5, #4]
    7994:	2900      	cmp	r1, #0
    7996:	d0e0      	beq.n	795a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14e>
    7998:	6861      	ldr	r1, [r4, #4]
    799a:	7c6a      	ldrb	r2, [r5, #17]
    799c:	f881 2075 	strb.w	r2, [r1, #117]	; 0x75
    79a0:	686a      	ldr	r2, [r5, #4]
    79a2:	6813      	ldr	r3, [r2, #0]
    79a4:	f841 3f6e 	str.w	r3, [r1, #110]!
    79a8:	8892      	ldrh	r2, [r2, #4]
    79aa:	808a      	strh	r2, [r1, #4]
    79ac:	bd70      	pop	{r4, r5, r6, pc}
    79ae:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
    79b2:	7c68      	ldrb	r0, [r5, #17]
    79b4:	3364      	adds	r3, #100	; 0x64
    79b6:	6869      	ldr	r1, [r5, #4]
    79b8:	f7fe ff10 	bl	67dc <sym_EFQGKM4FX4KOCTBEYNRZUVU5UGVDDD6DFLNBQVY>
    79bc:	e7e9      	b.n	7992 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x186>
    79be:	0000      	.short	0x0000
    79c0:	200000ec 	.word	0x200000ec
    79c4:	b510      	push	{r4, lr}
    79c6:	4915      	ldr	r1, [pc, #84]	; (7a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x210>)
    79c8:	6842      	ldr	r2, [r0, #4]
    79ca:	6849      	ldr	r1, [r1, #4]
    79cc:	7813      	ldrb	r3, [r2, #0]
    79ce:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    79d2:	42a3      	cmp	r3, r4
    79d4:	d11f      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79d6:	7853      	ldrb	r3, [r2, #1]
    79d8:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    79dc:	42a3      	cmp	r3, r4
    79de:	d11a      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79e0:	7893      	ldrb	r3, [r2, #2]
    79e2:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    79e6:	42a3      	cmp	r3, r4
    79e8:	d115      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79ea:	78d3      	ldrb	r3, [r2, #3]
    79ec:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    79f0:	42a3      	cmp	r3, r4
    79f2:	d110      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79f4:	7913      	ldrb	r3, [r2, #4]
    79f6:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    79fa:	42a3      	cmp	r3, r4
    79fc:	d10b      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    79fe:	7952      	ldrb	r2, [r2, #5]
    7a00:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    7a04:	429a      	cmp	r2, r3
    7a06:	d106      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    7a08:	7c40      	ldrb	r0, [r0, #17]
    7a0a:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    7a0e:	4288      	cmp	r0, r1
    7a10:	d101      	bne.n	7a16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x20a>
    7a12:	2001      	movs	r0, #1
    7a14:	bd10      	pop	{r4, pc}
    7a16:	2000      	movs	r0, #0
    7a18:	bd10      	pop	{r4, pc}
    7a1a:	0000      	.short	0x0000
    7a1c:	200000ec 	.word	0x200000ec
    7a20:	b530      	push	{r4, r5, lr}
    7a22:	7801      	ldrb	r1, [r0, #0]
    7a24:	b08b      	sub	sp, #44	; 0x2c
    7a26:	f001 040f 	and.w	r4, r1, #15
    7a2a:	4622      	mov	r2, r4
    7a2c:	a901      	add	r1, sp, #4
    7a2e:	f000 feb9 	bl	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    7a32:	a801      	add	r0, sp, #4
    7a34:	f7ff ffc6 	bl	79c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1b8>
    7a38:	4605      	mov	r5, r0
    7a3a:	f004 fd45 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7a3e:	f000 fb41 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    7a42:	2c04      	cmp	r4, #4
    7a44:	d111      	bne.n	7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    7a46:	b185      	cbz	r5, 7a6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25e>
    7a48:	a80a      	add	r0, sp, #40	; 0x28
    7a4a:	f000 fb47 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7a4e:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    7a52:	9000      	str	r0, [sp, #0]
    7a54:	4806      	ldr	r0, [pc, #24]	; (7a70 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x264>)
    7a56:	6840      	ldr	r0, [r0, #4]
    7a58:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    7a5c:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
    7a60:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    7a64:	a801      	add	r0, sp, #4
    7a66:	f007 fd07 	bl	f478 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    7a6a:	b00b      	add	sp, #44	; 0x2c
    7a6c:	2005      	movs	r0, #5
    7a6e:	bd30      	pop	{r4, r5, pc}
    7a70:	200000ec 	.word	0x200000ec
    7a74:	4804      	ldr	r0, [pc, #16]	; (7a88 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>)
    7a76:	6840      	ldr	r0, [r0, #4]
    7a78:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7a7c:	2803      	cmp	r0, #3
    7a7e:	d001      	beq.n	7a84 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x278>
    7a80:	2000      	movs	r0, #0
    7a82:	4770      	bx	lr
    7a84:	2001      	movs	r0, #1
    7a86:	4770      	bx	lr
    7a88:	200000ec 	.word	0x200000ec
    7a8c:	4908      	ldr	r1, [pc, #32]	; (7ab0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a4>)
    7a8e:	b510      	push	{r4, lr}
    7a90:	6849      	ldr	r1, [r1, #4]
    7a92:	7c83      	ldrb	r3, [r0, #18]
    7a94:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    7a98:	429a      	cmp	r2, r3
    7a9a:	d105      	bne.n	7aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x29c>
    7a9c:	6880      	ldr	r0, [r0, #8]
    7a9e:	2206      	movs	r2, #6
    7aa0:	3132      	adds	r1, #50	; 0x32
    7aa2:	f005 fd1d 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7aa6:	b108      	cbz	r0, 7aac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a0>
    7aa8:	2000      	movs	r0, #0
    7aaa:	bd10      	pop	{r4, pc}
    7aac:	2001      	movs	r0, #1
    7aae:	bd10      	pop	{r4, pc}
    7ab0:	200000ec 	.word	0x200000ec
    7ab4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7ab6:	4c3d      	ldr	r4, [pc, #244]	; (7bac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a0>)
    7ab8:	466f      	mov	r7, sp
    7aba:	6860      	ldr	r0, [r4, #4]
    7abc:	7801      	ldrb	r1, [r0, #0]
    7abe:	f88d 1008 	strb.w	r1, [sp, #8]
    7ac2:	9902      	ldr	r1, [sp, #8]
    7ac4:	9102      	str	r1, [sp, #8]
    7ac6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7aca:	b111      	cbz	r1, 7ad2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c6>
    7acc:	f241 313a 	movw	r1, #4922	; 0x133a
    7ad0:	e04f      	b.n	7b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x366>
    7ad2:	2500      	movs	r5, #0
    7ad4:	7085      	strb	r5, [r0, #2]
    7ad6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7ad8:	880a      	ldrh	r2, [r1, #0]
    7ada:	8082      	strh	r2, [r0, #4]
    7adc:	68c8      	ldr	r0, [r1, #12]
    7ade:	f006 ff3c 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7ae2:	6861      	ldr	r1, [r4, #4]
    7ae4:	8348      	strh	r0, [r1, #26]
    7ae6:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    7ae8:	8a82      	ldrh	r2, [r0, #20]
    7aea:	838a      	strh	r2, [r1, #28]
    7aec:	8ac0      	ldrh	r0, [r0, #22]
    7aee:	83c8      	strh	r0, [r1, #30]
    7af0:	f881 5020 	strb.w	r5, [r1, #32]
    7af4:	4669      	mov	r1, sp
    7af6:	68a0      	ldr	r0, [r4, #8]
    7af8:	f007 fa06 	bl	ef08 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    7afc:	68a0      	ldr	r0, [r4, #8]
    7afe:	7800      	ldrb	r0, [r0, #0]
    7b00:	f3c0 1680 	ubfx	r6, r0, #6, #1
    7b04:	6860      	ldr	r0, [r4, #4]
    7b06:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7b0a:	b120      	cbz	r0, 7b16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30a>
    7b0c:	4639      	mov	r1, r7
    7b0e:	4630      	mov	r0, r6
    7b10:	f007 fbf1 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7b14:	b940      	cbnz	r0, 7b28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x31c>
    7b16:	6860      	ldr	r0, [r4, #4]
    7b18:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    7b1c:	b160      	cbz	r0, 7b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    7b1e:	4639      	mov	r1, r7
    7b20:	4630      	mov	r0, r6
    7b22:	f007 fbdf 	bl	f2e4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xa8>
    7b26:	b138      	cbz	r0, 7b38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32c>
    7b28:	6860      	ldr	r0, [r4, #4]
    7b2a:	9900      	ldr	r1, [sp, #0]
    7b2c:	f8c0 100e 	str.w	r1, [r0, #14]
    7b30:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7b34:	8241      	strh	r1, [r0, #18]
    7b36:	e003      	b.n	7b40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x334>
    7b38:	6860      	ldr	r0, [r4, #4]
    7b3a:	f8c0 500e 	str.w	r5, [r0, #14]
    7b3e:	8245      	strh	r5, [r0, #18]
    7b40:	6861      	ldr	r1, [r4, #4]
    7b42:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    7b46:	28ff      	cmp	r0, #255	; 0xff
    7b48:	d016      	beq.n	7b78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    7b4a:	f101 0208 	add.w	r2, r1, #8
    7b4e:	1dc9      	adds	r1, r1, #7
    7b50:	f7fe fdae 	bl	66b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7b54:	b158      	cbz	r0, 7b6e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x362>
    7b56:	6860      	ldr	r0, [r4, #4]
    7b58:	79c1      	ldrb	r1, [r0, #7]
    7b5a:	f041 0102 	orr.w	r1, r1, #2
    7b5e:	71c1      	strb	r1, [r0, #7]
    7b60:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    7b64:	6141      	str	r1, [r0, #20]
    7b66:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    7b6a:	8301      	strh	r1, [r0, #24]
    7b6c:	e00f      	b.n	7b8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x382>
    7b6e:	f241 3165 	movw	r1, #4965	; 0x1365
    7b72:	2032      	movs	r0, #50	; 0x32
    7b74:	f7fd f8d0 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b78:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    7b7c:	71c8      	strb	r0, [r1, #7]
    7b7e:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    7b82:	6088      	str	r0, [r1, #8]
    7b84:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    7b88:	8188      	strh	r0, [r1, #12]
    7b8a:	614d      	str	r5, [r1, #20]
    7b8c:	830d      	strh	r5, [r1, #24]
    7b8e:	6860      	ldr	r0, [r4, #4]
    7b90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7b92:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    7b96:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    7b9a:	2101      	movs	r1, #1
    7b9c:	7001      	strb	r1, [r0, #0]
    7b9e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7ba0:	8800      	ldrh	r0, [r0, #0]
    7ba2:	f7fd fcb7 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7ba6:	f006 fc3b 	bl	e420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7baa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7bac:	200000ec 	.word	0x200000ec
    7bb0:	b570      	push	{r4, r5, r6, lr}
    7bb2:	4d39      	ldr	r5, [pc, #228]	; (7c98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x48c>)
    7bb4:	4601      	mov	r1, r0
    7bb6:	2200      	movs	r2, #0
    7bb8:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    7bbc:	365c      	adds	r6, #92	; 0x5c
    7bbe:	8002      	strh	r2, [r0, #0]
    7bc0:	2903      	cmp	r1, #3
    7bc2:	d002      	beq.n	7bca <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3be>
    7bc4:	2905      	cmp	r1, #5
    7bc6:	d004      	beq.n	7bd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c6>
    7bc8:	e056      	b.n	7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    7bca:	2103      	movs	r1, #3
    7bcc:	f007 f9b3 	bl	ef36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bd0:	e052      	b.n	7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x46c>
    7bd2:	2105      	movs	r1, #5
    7bd4:	f007 f9af 	bl	ef36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7bd8:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7bdc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7bde:	6909      	ldr	r1, [r1, #16]
    7be0:	f844 1f0f 	str.w	r1, [r4, #15]!
    7be4:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7be6:	8b0a      	ldrh	r2, [r1, #24]
    7be8:	80a2      	strh	r2, [r4, #4]
    7bea:	7e89      	ldrb	r1, [r1, #26]
    7bec:	71a1      	strb	r1, [r4, #6]
    7bee:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7bf0:	68c1      	ldr	r1, [r0, #12]
    7bf2:	8b80      	ldrh	r0, [r0, #28]
    7bf4:	f007 f84d 	bl	ec92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    7bf8:	71e0      	strb	r0, [r4, #7]
    7bfa:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7bfe:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c00:	68c1      	ldr	r1, [r0, #12]
    7c02:	6a00      	ldr	r0, [r0, #32]
    7c04:	f007 f83a 	bl	ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7c08:	75e0      	strb	r0, [r4, #23]
    7c0a:	0a00      	lsrs	r0, r0, #8
    7c0c:	7620      	strb	r0, [r4, #24]
    7c0e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7c12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c14:	68c0      	ldr	r0, [r0, #12]
    7c16:	f006 fea0 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7c1a:	7660      	strb	r0, [r4, #25]
    7c1c:	0a00      	lsrs	r0, r0, #8
    7c1e:	76a0      	strb	r0, [r4, #26]
    7c20:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7c24:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c26:	8a89      	ldrh	r1, [r1, #20]
    7c28:	76e1      	strb	r1, [r4, #27]
    7c2a:	0a09      	lsrs	r1, r1, #8
    7c2c:	7721      	strb	r1, [r4, #28]
    7c2e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c30:	8ac9      	ldrh	r1, [r1, #22]
    7c32:	7761      	strb	r1, [r4, #29]
    7c34:	0a09      	lsrs	r1, r1, #8
    7c36:	77a1      	strb	r1, [r4, #30]
    7c38:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7c3a:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    7c3e:	f8c4 201f 	str.w	r2, [r4, #31]
    7c42:	7909      	ldrb	r1, [r1, #4]
    7c44:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    7c48:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7c4a:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    7c4e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    7c52:	f001 011f 	and.w	r1, r1, #31
    7c56:	f020 001f 	bic.w	r0, r0, #31
    7c5a:	4308      	orrs	r0, r1
    7c5c:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    7c60:	f004 f9da 	bl	c018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    7c64:	2807      	cmp	r0, #7
    7c66:	d900      	bls.n	7c6a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x45e>
    7c68:	2007      	movs	r0, #7
    7c6a:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    7c6e:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    7c72:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    7c76:	7021      	strb	r1, [r4, #0]
    7c78:	f106 0112 	add.w	r1, r6, #18
    7c7c:	68a8      	ldr	r0, [r5, #8]
    7c7e:	f007 f975 	bl	ef6c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7c82:	7e71      	ldrb	r1, [r6, #25]
    7c84:	68a8      	ldr	r0, [r5, #8]
    7c86:	f007 f977 	bl	ef78 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7c8a:	f000 fba5 	bl	83d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d8>
    7c8e:	68a8      	ldr	r0, [r5, #8]
    7c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7c94:	f004 be70 	b.w	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7c98:	200000ec 	.word	0x200000ec
    7c9c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7ca0:	4f65      	ldr	r7, [pc, #404]	; (7e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62c>)
    7ca2:	4604      	mov	r4, r0
    7ca4:	468a      	mov	sl, r1
    7ca6:	6878      	ldr	r0, [r7, #4]
    7ca8:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7cac:	b180      	cbz	r0, 7cd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>
    7cae:	2600      	movs	r6, #0
    7cb0:	2500      	movs	r5, #0
    7cb2:	7ca0      	ldrb	r0, [r4, #18]
    7cb4:	68a1      	ldr	r1, [r4, #8]
    7cb6:	f007 fb1e 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    7cba:	4681      	mov	r9, r0
    7cbc:	f7ff feda 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7cc0:	b140      	cbz	r0, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7cc2:	6878      	ldr	r0, [r7, #4]
    7cc4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7cc8:	b121      	cbz	r1, 7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7cca:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7cce:	e004      	b.n	7cda <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ce>
    7cd0:	2601      	movs	r6, #1
    7cd2:	e7ed      	b.n	7cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    7cd4:	6878      	ldr	r0, [r7, #4]
    7cd6:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7cda:	4683      	mov	fp, r0
    7cdc:	f7fe fc3a 	bl	6554 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7ce0:	ea5f 0800 	movs.w	r8, r0
    7ce4:	d00c      	beq.n	7d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    7ce6:	4658      	mov	r0, fp
    7ce8:	f7fe fc28 	bl	653c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7cec:	b100      	cbz	r0, 7cf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4e4>
    7cee:	2601      	movs	r6, #1
    7cf0:	f1b9 0f00 	cmp.w	r9, #0
    7cf4:	d004      	beq.n	7d00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    7cf6:	4640      	mov	r0, r8
    7cf8:	68a1      	ldr	r1, [r4, #8]
    7cfa:	f006 fd4d 	bl	e798 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    7cfe:	4605      	mov	r5, r0
    7d00:	6878      	ldr	r0, [r7, #4]
    7d02:	46b8      	mov	r8, r7
    7d04:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    7d08:	b10d      	cbz	r5, 7d0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    7d0a:	f047 0702 	orr.w	r7, r7, #2
    7d0e:	f7ff feb1 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7d12:	b3a0      	cbz	r0, 7d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x572>
    7d14:	6860      	ldr	r0, [r4, #4]
    7d16:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7d1a:	7802      	ldrb	r2, [r0, #0]
    7d1c:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7d20:	429a      	cmp	r2, r3
    7d22:	d11f      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d24:	7842      	ldrb	r2, [r0, #1]
    7d26:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7d2a:	429a      	cmp	r2, r3
    7d2c:	d11a      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d2e:	7882      	ldrb	r2, [r0, #2]
    7d30:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7d34:	429a      	cmp	r2, r3
    7d36:	d115      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d38:	78c2      	ldrb	r2, [r0, #3]
    7d3a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7d3e:	429a      	cmp	r2, r3
    7d40:	d110      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d42:	7902      	ldrb	r2, [r0, #4]
    7d44:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7d48:	429a      	cmp	r2, r3
    7d4a:	d10b      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d4c:	7940      	ldrb	r0, [r0, #5]
    7d4e:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7d52:	4290      	cmp	r0, r2
    7d54:	d106      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d56:	7c60      	ldrb	r0, [r4, #17]
    7d58:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    7d5c:	4288      	cmp	r0, r1
    7d5e:	d101      	bne.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x558>
    7d60:	2001      	movs	r0, #1
    7d62:	e000      	b.n	7d66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x55a>
    7d64:	2000      	movs	r0, #0
    7d66:	4f35      	ldr	r7, [pc, #212]	; (7e3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>)
    7d68:	4681      	mov	r9, r0
    7d6a:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    7d6e:	2808      	cmp	r0, #8
    7d70:	d006      	beq.n	7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    7d72:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    7d76:	4288      	cmp	r0, r1
    7d78:	d102      	bne.n	7d80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    7d7a:	2001      	movs	r0, #1
    7d7c:	e001      	b.n	7d82 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x576>
    7d7e:	e021      	b.n	7dc4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b8>
    7d80:	2000      	movs	r0, #0
    7d82:	4680      	mov	r8, r0
    7d84:	b925      	cbnz	r5, 7d90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x584>
    7d86:	b12e      	cbz	r6, 7d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    7d88:	4620      	mov	r0, r4
    7d8a:	f7ff fe7f 	bl	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7d8e:	b108      	cbz	r0, 7d94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x588>
    7d90:	2001      	movs	r0, #1
    7d92:	e000      	b.n	7d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    7d94:	2000      	movs	r0, #0
    7d96:	f1ba 0f00 	cmp.w	sl, #0
    7d9a:	d009      	beq.n	7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7d9c:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7da0:	2901      	cmp	r1, #1
    7da2:	d003      	beq.n	7dac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a0>
    7da4:	b921      	cbnz	r1, 7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7da6:	ea59 0108 	orrs.w	r1, r9, r8
    7daa:	d001      	beq.n	7db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a4>
    7dac:	2101      	movs	r1, #1
    7dae:	e000      	b.n	7db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a6>
    7db0:	2100      	movs	r1, #0
    7db2:	4208      	tst	r0, r1
    7db4:	d003      	beq.n	7dbe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b2>
    7db6:	200c      	movs	r0, #12
    7db8:	b004      	add	sp, #16
    7dba:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7dbe:	f004 fb83 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dc2:	e036      	b.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7dc4:	f004 fb80 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7dc8:	f1ba 0f00 	cmp.w	sl, #0
    7dcc:	d031      	beq.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7dce:	4620      	mov	r0, r4
    7dd0:	f7ff fe5c 	bl	7a8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7dd4:	b900      	cbnz	r0, 7dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5cc>
    7dd6:	b175      	cbz	r5, 7df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ea>
    7dd8:	a803      	add	r0, sp, #12
    7dda:	f000 f97f 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7dde:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7de2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7de6:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7dea:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7dee:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7df2:	463b      	mov	r3, r7
    7df4:	e018      	b.n	7e28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    7df6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    7dfa:	4645      	mov	r5, r8
    7dfc:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    7e00:	2803      	cmp	r0, #3
    7e02:	d001      	beq.n	7e08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fc>
    7e04:	2802      	cmp	r0, #2
    7e06:	d114      	bne.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7e08:	f1b9 0f00 	cmp.w	r9, #0
    7e0c:	d011      	beq.n	7e32 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x626>
    7e0e:	a803      	add	r0, sp, #12
    7e10:	f000 f964 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7e14:	686a      	ldr	r2, [r5, #4]
    7e16:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7e1a:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7e1e:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7e22:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7e26:	23fe      	movs	r3, #254	; 0xfe
    7e28:	2101      	movs	r1, #1
    7e2a:	4620      	mov	r0, r4
    7e2c:	3232      	adds	r2, #50	; 0x32
    7e2e:	f000 fc43 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7e32:	2005      	movs	r0, #5
    7e34:	e7c0      	b.n	7db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    7e36:	0000      	.short	0x0000
    7e38:	200000ec 	.word	0x200000ec
    7e3c:	2000124c 	.word	0x2000124c
    7e40:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7e42:	4605      	mov	r5, r0
    7e44:	2900      	cmp	r1, #0
    7e46:	d06e      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    7e48:	4c3c      	ldr	r4, [pc, #240]	; (7f3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x730>)
    7e4a:	6860      	ldr	r0, [r4, #4]
    7e4c:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7e50:	2802      	cmp	r0, #2
    7e52:	d02c      	beq.n	7eae <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    7e54:	2801      	cmp	r0, #1
    7e56:	d043      	beq.n	7ee0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>
    7e58:	f7ff fe0c 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    7e5c:	2800      	cmp	r0, #0
    7e5e:	d067      	beq.n	7f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x724>
    7e60:	686a      	ldr	r2, [r5, #4]
    7e62:	6861      	ldr	r1, [r4, #4]
    7e64:	7810      	ldrb	r0, [r2, #0]
    7e66:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7e6a:	4298      	cmp	r0, r3
    7e6c:	d14c      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e6e:	7850      	ldrb	r0, [r2, #1]
    7e70:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7e74:	4298      	cmp	r0, r3
    7e76:	d147      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e78:	7890      	ldrb	r0, [r2, #2]
    7e7a:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7e7e:	4298      	cmp	r0, r3
    7e80:	d142      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e82:	78d0      	ldrb	r0, [r2, #3]
    7e84:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7e88:	4298      	cmp	r0, r3
    7e8a:	d13d      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e8c:	7910      	ldrb	r0, [r2, #4]
    7e8e:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7e92:	4298      	cmp	r0, r3
    7e94:	d138      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7e96:	7950      	ldrb	r0, [r2, #5]
    7e98:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7e9c:	4290      	cmp	r0, r2
    7e9e:	d133      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7ea0:	7c68      	ldrb	r0, [r5, #17]
    7ea2:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    7ea6:	4290      	cmp	r0, r2
    7ea8:	d12e      	bne.n	7f08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fc>
    7eaa:	2001      	movs	r0, #1
    7eac:	e02d      	b.n	7f0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6fe>
    7eae:	a803      	add	r0, sp, #12
    7eb0:	f000 f914 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7eb4:	6862      	ldr	r2, [r4, #4]
    7eb6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7eba:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7ebe:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7ec2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7ec6:	23ff      	movs	r3, #255	; 0xff
    7ec8:	2100      	movs	r1, #0
    7eca:	4628      	mov	r0, r5
    7ecc:	3232      	adds	r2, #50	; 0x32
    7ece:	f000 fbf3 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7ed2:	6861      	ldr	r1, [r4, #4]
    7ed4:	2001      	movs	r0, #1
    7ed6:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    7eda:	200b      	movs	r0, #11
    7edc:	b004      	add	sp, #16
    7ede:	bd70      	pop	{r4, r5, r6, pc}
    7ee0:	a803      	add	r0, sp, #12
    7ee2:	f000 f8fb 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7ee6:	6862      	ldr	r2, [r4, #4]
    7ee8:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7eec:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7ef0:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7ef4:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7ef8:	23ff      	movs	r3, #255	; 0xff
    7efa:	2100      	movs	r1, #0
    7efc:	4628      	mov	r0, r5
    7efe:	3232      	adds	r2, #50	; 0x32
    7f00:	f000 fbda 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7f04:	2005      	movs	r0, #5
    7f06:	e7e9      	b.n	7edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    7f08:	2000      	movs	r0, #0
    7f0a:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    7f0e:	2901      	cmp	r1, #1
    7f10:	d00c      	beq.n	7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f12:	b958      	cbnz	r0, 7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f14:	490a      	ldr	r1, [pc, #40]	; (7f40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x734>)
    7f16:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    7f1a:	2808      	cmp	r0, #8
    7f1c:	d003      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x71a>
    7f1e:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    7f22:	4281      	cmp	r1, r0
    7f24:	d002      	beq.n	7f2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x720>
    7f26:	f004 facf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f2a:	e7eb      	b.n	7f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6f8>
    7f2c:	200c      	movs	r0, #12
    7f2e:	e7d5      	b.n	7edc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>
    7f30:	f640 515b 	movw	r1, #3419	; 0xd5b
    7f34:	2032      	movs	r0, #50	; 0x32
    7f36:	f7fc feef 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f3a:	0000      	.short	0x0000
    7f3c:	200000ec 	.word	0x200000ec
    7f40:	2000124c 	.word	0x2000124c
    7f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7f46:	4605      	mov	r5, r0
    7f48:	b139      	cbz	r1, 7f5a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74e>
    7f4a:	4c1c      	ldr	r4, [pc, #112]	; (7fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b0>)
    7f4c:	6860      	ldr	r0, [r4, #4]
    7f4e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7f52:	2802      	cmp	r0, #2
    7f54:	d004      	beq.n	7f60 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x754>
    7f56:	2801      	cmp	r0, #1
    7f58:	d01b      	beq.n	7f92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x786>
    7f5a:	f004 fab5 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5e:	e02a      	b.n	7fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7aa>
    7f60:	a803      	add	r0, sp, #12
    7f62:	f000 f8bb 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7f66:	6862      	ldr	r2, [r4, #4]
    7f68:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7f6c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7f70:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7f74:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7f78:	23ff      	movs	r3, #255	; 0xff
    7f7a:	2106      	movs	r1, #6
    7f7c:	4628      	mov	r0, r5
    7f7e:	3232      	adds	r2, #50	; 0x32
    7f80:	f000 fb9a 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7f84:	6862      	ldr	r2, [r4, #4]
    7f86:	200b      	movs	r0, #11
    7f88:	2100      	movs	r1, #0
    7f8a:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    7f8e:	b004      	add	sp, #16
    7f90:	bd70      	pop	{r4, r5, r6, pc}
    7f92:	a803      	add	r0, sp, #12
    7f94:	f000 f8a2 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7f98:	6862      	ldr	r2, [r4, #4]
    7f9a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7f9e:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7fa2:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7fa6:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7faa:	23ff      	movs	r3, #255	; 0xff
    7fac:	2106      	movs	r1, #6
    7fae:	4628      	mov	r0, r5
    7fb0:	3232      	adds	r2, #50	; 0x32
    7fb2:	f000 fb81 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7fb6:	2005      	movs	r0, #5
    7fb8:	e7e9      	b.n	7f8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x782>
    7fba:	0000      	.short	0x0000
    7fbc:	200000ec 	.word	0x200000ec
    7fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7fc2:	b389      	cbz	r1, 8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>
    7fc4:	2901      	cmp	r1, #1
    7fc6:	d035      	beq.n	8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>
    7fc8:	2405      	movs	r4, #5
    7fca:	2902      	cmp	r1, #2
    7fcc:	d004      	beq.n	7fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    7fce:	2906      	cmp	r1, #6
    7fd0:	d024      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7fd2:	f004 fa79 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fd6:	e01e      	b.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fd8:	4605      	mov	r5, r0
    7fda:	4616      	mov	r6, r2
    7fdc:	f004 fa74 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fe0:	b1ce      	cbz	r6, 8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7fe2:	4e17      	ldr	r6, [pc, #92]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fe4:	6870      	ldr	r0, [r6, #4]
    7fe6:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7fea:	2801      	cmp	r0, #1
    7fec:	d001      	beq.n	7ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e6>
    7fee:	2802      	cmp	r0, #2
    7ff0:	d111      	bne.n	8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7ff2:	a803      	add	r0, sp, #12
    7ff4:	f000 f872 	bl	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
    7ff8:	6872      	ldr	r2, [r6, #4]
    7ffa:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7ffe:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8002:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    8006:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    800a:	23ff      	movs	r3, #255	; 0xff
    800c:	2102      	movs	r1, #2
    800e:	4628      	mov	r0, r5
    8010:	3232      	adds	r2, #50	; 0x32
    8012:	f000 fb51 	bl	86b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8016:	b004      	add	sp, #16
    8018:	4620      	mov	r0, r4
    801a:	bd70      	pop	{r4, r5, r6, pc}
    801c:	b004      	add	sp, #16
    801e:	4611      	mov	r1, r2
    8020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8024:	f7ff bf8e 	b.w	7f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x738>
    8028:	b004      	add	sp, #16
    802a:	4611      	mov	r1, r2
    802c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8030:	f7ff bf06 	b.w	7e40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x634>
    8034:	b004      	add	sp, #16
    8036:	4611      	mov	r1, r2
    8038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    803c:	f7ff be2e 	b.w	7c9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x490>
    8040:	200000ec 	.word	0x200000ec
    8044:	b570      	push	{r4, r5, r6, lr}
    8046:	4c11      	ldr	r4, [pc, #68]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8048:	4605      	mov	r5, r0
    804a:	6861      	ldr	r1, [r4, #4]
    804c:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    8050:	2800      	cmp	r0, #0
    8052:	d019      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    8054:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    8058:	2800      	cmp	r0, #0
    805a:	d015      	beq.n	8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>
    805c:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    8060:	3132      	adds	r1, #50	; 0x32
    8062:	f007 f948 	bl	f2f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xba>
    8066:	b140      	cbz	r0, 807a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
    8068:	f7fe fa3e 	bl	64e8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    806c:	6861      	ldr	r1, [r4, #4]
    806e:	462a      	mov	r2, r5
    8070:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8074:	3132      	adds	r1, #50	; 0x32
    8076:	f006 bb5a 	b.w	e72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    807a:	6860      	ldr	r0, [r4, #4]
    807c:	4629      	mov	r1, r5
    807e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8082:	3032      	adds	r0, #50	; 0x32
    8084:	f006 bb42 	b.w	e70c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    8088:	bd70      	pop	{r4, r5, r6, pc}
    808a:	0000      	.short	0x0000
    808c:	200000ec 	.word	0x200000ec
    8090:	4602      	mov	r2, r0
    8092:	480b      	ldr	r0, [pc, #44]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8094:	b082      	sub	sp, #8
    8096:	6840      	ldr	r0, [r0, #4]
    8098:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    809c:	f88d 1000 	strb.w	r1, [sp]
    80a0:	9900      	ldr	r1, [sp, #0]
    80a2:	9100      	str	r1, [sp, #0]
    80a4:	f89d 1000 	ldrb.w	r1, [sp]
    80a8:	2900      	cmp	r1, #0
    80aa:	d107      	bne.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80ac:	6d41      	ldr	r1, [r0, #84]	; 0x54
    80ae:	2900      	cmp	r1, #0
    80b0:	d004      	beq.n	80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>
    80b2:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    80b6:	b002      	add	sp, #8
    80b8:	f7fb bb0a 	b.w	36d0 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    80bc:	b002      	add	sp, #8
    80be:	4770      	bx	lr
    80c0:	200000ec 	.word	0x200000ec
    80c4:	b510      	push	{r4, lr}
    80c6:	4804      	ldr	r0, [pc, #16]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80c8:	f004 fd04 	bl	cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    80cc:	2800      	cmp	r0, #0
    80ce:	d102      	bne.n	80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    80d0:	4901      	ldr	r1, [pc, #4]	; (80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>)
    80d2:	207f      	movs	r0, #127	; 0x7f
    80d4:	7008      	strb	r0, [r1, #0]
    80d6:	bd10      	pop	{r4, pc}
    80d8:	200000ec 	.word	0x200000ec
    80dc:	4a07      	ldr	r2, [pc, #28]	; (80fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xfc>)
    80de:	b510      	push	{r4, lr}
    80e0:	f992 1000 	ldrsb.w	r1, [r2]
    80e4:	297f      	cmp	r1, #127	; 0x7f
    80e6:	d003      	beq.n	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    80e8:	7001      	strb	r1, [r0, #0]
    80ea:	207f      	movs	r0, #127	; 0x7f
    80ec:	7010      	strb	r0, [r2, #0]
    80ee:	bd10      	pop	{r4, pc}
    80f0:	f240 3172 	movw	r1, #882	; 0x372
    80f4:	2032      	movs	r0, #50	; 0x32
    80f6:	f7fc fe0f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80fa:	0000      	.short	0x0000
    80fc:	200000ec 	.word	0x200000ec
    8100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8104:	4607      	mov	r7, r0
    8106:	f7fd fa33 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    810a:	4604      	mov	r4, r0
    810c:	f7fd fa36 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8110:	4621      	mov	r1, r4
    8112:	f007 f949 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    8116:	0005      	movs	r5, r0
    8118:	d012      	beq.n	8140 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x140>
    811a:	4c2d      	ldr	r4, [pc, #180]	; (81d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1d0>)
    811c:	6860      	ldr	r0, [r4, #4]
    811e:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8122:	2801      	cmp	r0, #1
    8124:	d004      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8126:	2802      	cmp	r0, #2
    8128:	d002      	beq.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    812a:	f7ff fca3 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    812e:	b150      	cbz	r0, 8146 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x146>
    8130:	f06f 0613 	mvn.w	r6, #19
    8134:	b33f      	cbz	r7, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8136:	4628      	mov	r0, r5
    8138:	f006 fece 	bl	eed8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    813c:	b950      	cbnz	r0, 8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    813e:	e005      	b.n	814c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14c>
    8140:	f241 310a 	movw	r1, #4874	; 0x130a
    8144:	e03a      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8146:	f241 3110 	movw	r1, #4880	; 0x1310
    814a:	e037      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    814c:	4628      	mov	r0, r5
    814e:	f006 fee5 	bl	ef1c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    8152:	b1c0      	cbz	r0, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    8154:	6861      	ldr	r1, [r4, #4]
    8156:	4628      	mov	r0, r5
    8158:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    815c:	2a05      	cmp	r2, #5
    815e:	d202      	bcs.n	8166 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x166>
    8160:	f241 2194 	movw	r1, #4756	; 0x1294
    8164:	e02a      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8166:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    816a:	2a0b      	cmp	r2, #11
    816c:	d302      	bcc.n	8174 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x174>
    816e:	f241 2195 	movw	r1, #4757	; 0x1295
    8172:	e023      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8174:	68e2      	ldr	r2, [r4, #12]
    8176:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    817a:	6952      	ldr	r2, [r2, #20]
    817c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8180:	5851      	ldr	r1, [r2, r1]
    8182:	4788      	blx	r1
    8184:	e016      	b.n	81b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1b4>
    8186:	6860      	ldr	r0, [r4, #4]
    8188:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    818c:	2905      	cmp	r1, #5
    818e:	d202      	bcs.n	8196 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x196>
    8190:	f44f 5198 	mov.w	r1, #4864	; 0x1300
    8194:	e012      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    8196:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    819a:	290b      	cmp	r1, #11
    819c:	d302      	bcc.n	81a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a4>
    819e:	f241 3101 	movw	r1, #4865	; 0x1301
    81a2:	e00b      	b.n	81bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1bc>
    81a4:	68e1      	ldr	r1, [r4, #12]
    81a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    81aa:	6989      	ldr	r1, [r1, #24]
    81ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    81b0:	5808      	ldr	r0, [r1, r0]
    81b2:	4780      	blx	r0
    81b4:	280f      	cmp	r0, #15
    81b6:	d304      	bcc.n	81c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c2>
    81b8:	f241 3125 	movw	r1, #4901	; 0x1325
    81bc:	2032      	movs	r0, #50	; 0x32
    81be:	f7fc fdab 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81c2:	68e1      	ldr	r1, [r4, #12]
    81c4:	6909      	ldr	r1, [r1, #16]
    81c6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    81ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    81ce:	4700      	bx	r0
    81d0:	200000ec 	.word	0x200000ec
    81d4:	b510      	push	{r4, lr}
    81d6:	b118      	cbz	r0, 81e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e0>
    81d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    81dc:	f000 b924 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    81e0:	2900      	cmp	r1, #0
    81e2:	d01d      	beq.n	8220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    81e4:	480f      	ldr	r0, [pc, #60]	; (8224 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x224>)
    81e6:	6841      	ldr	r1, [r0, #4]
    81e8:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    81ec:	2a0b      	cmp	r2, #11
    81ee:	d202      	bcs.n	81f6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1f6>
    81f0:	f241 31cc 	movw	r1, #5068	; 0x13cc
    81f4:	e005      	b.n	8202 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x202>
    81f6:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    81fa:	2a0f      	cmp	r2, #15
    81fc:	d304      	bcc.n	8208 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x208>
    81fe:	f241 31cd 	movw	r1, #5069	; 0x13cd
    8202:	2032      	movs	r0, #50	; 0x32
    8204:	f7fc fd88 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8208:	68c0      	ldr	r0, [r0, #12]
    820a:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    820e:	6880      	ldr	r0, [r0, #8]
    8210:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    8214:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8218:	5840      	ldr	r0, [r0, r1]
    821a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    821e:	4700      	bx	r0
    8220:	bd10      	pop	{r4, pc}
    8222:	0000      	.short	0x0000
    8224:	200000ec 	.word	0x200000ec
    8228:	b510      	push	{r4, lr}
    822a:	f7ff fb0d 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    822e:	f000 f90b 	bl	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    8232:	4805      	ldr	r0, [pc, #20]	; (8248 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x248>)
    8234:	6881      	ldr	r1, [r0, #8]
    8236:	2000      	movs	r0, #0
    8238:	f7ff fc3c 	bl	7ab4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2a8>
    823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8240:	2003      	movs	r0, #3
    8242:	f000 bc97 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8246:	0000      	.short	0x0000
    8248:	200000ec 	.word	0x200000ec
    824c:	b510      	push	{r4, lr}
    824e:	f7fd f98f 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8252:	4604      	mov	r4, r0
    8254:	f7fd f992 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8258:	4621      	mov	r1, r4
    825a:	f007 f8a5 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    825e:	b150      	cbz	r0, 8276 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x276>
    8260:	f004 fb8a 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8264:	2000      	movs	r0, #0
    8266:	f004 fa3f 	bl	c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    826a:	4905      	ldr	r1, [pc, #20]	; (8280 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x280>)
    826c:	2006      	movs	r0, #6
    826e:	6849      	ldr	r1, [r1, #4]
    8270:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8274:	bd10      	pop	{r4, pc}
    8276:	f240 41e7 	movw	r1, #1255	; 0x4e7
    827a:	2032      	movs	r0, #50	; 0x32
    827c:	f7fc fd4c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8280:	200000ec 	.word	0x200000ec
    8284:	490f      	ldr	r1, [pc, #60]	; (82c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c4>)
    8286:	b510      	push	{r4, lr}
    8288:	6848      	ldr	r0, [r1, #4]
    828a:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    828e:	2a06      	cmp	r2, #6
    8290:	d202      	bcs.n	8298 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x298>
    8292:	f241 31fa 	movw	r1, #5114	; 0x13fa
    8296:	e005      	b.n	82a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a4>
    8298:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    829c:	2a0b      	cmp	r2, #11
    829e:	d304      	bcc.n	82aa <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2aa>
    82a0:	f241 31fb 	movw	r1, #5115	; 0x13fb
    82a4:	2032      	movs	r0, #50	; 0x32
    82a6:	f7fc fd37 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82aa:	68c9      	ldr	r1, [r1, #12]
    82ac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    82b0:	68c9      	ldr	r1, [r1, #12]
    82b2:	f06f 0213 	mvn.w	r2, #19
    82b6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    82ba:	5808      	ldr	r0, [r1, r0]
    82bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82c0:	4700      	bx	r0
    82c2:	0000      	.short	0x0000
    82c4:	200000ec 	.word	0x200000ec
    82c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82cc:	4c31      	ldr	r4, [pc, #196]	; (8394 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x394>)
    82ce:	4605      	mov	r5, r0
    82d0:	460e      	mov	r6, r1
    82d2:	6860      	ldr	r0, [r4, #4]
    82d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    82d8:	b120      	cbz	r0, 82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82da:	2801      	cmp	r0, #1
    82dc:	d002      	beq.n	82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82de:	200c      	movs	r0, #12
    82e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    82e4:	f004 fab8 	bl	c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    82e8:	f004 f8d0 	bl	c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    82ec:	f003 feb2 	bl	c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    82f0:	f004 fd14 	bl	cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    82f4:	4828      	ldr	r0, [pc, #160]	; (8398 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x398>)
    82f6:	f004 f9ef 	bl	c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    82fa:	4828      	ldr	r0, [pc, #160]	; (839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>)
    82fc:	f004 fc10 	bl	cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8300:	4827      	ldr	r0, [pc, #156]	; (83a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a0>)
    8302:	f004 fc03 	bl	cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    8306:	4630      	mov	r0, r6
    8308:	f004 fb36 	bl	c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    830c:	7968      	ldrb	r0, [r5, #5]
    830e:	b110      	cbz	r0, 8316 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x316>
    8310:	2001      	movs	r0, #1
    8312:	f7ff febd 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    8316:	7928      	ldrb	r0, [r5, #4]
    8318:	2803      	cmp	r0, #3
    831a:	d001      	beq.n	8320 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x320>
    831c:	b118      	cbz	r0, 8326 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x326>
    831e:	e018      	b.n	8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    8320:	f640 01f7 	movw	r1, #2295	; 0x8f7
    8324:	e033      	b.n	838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8326:	6861      	ldr	r1, [r4, #4]
    8328:	2000      	movs	r0, #0
    832a:	2503      	movs	r5, #3
    832c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    8330:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    8334:	1c52      	adds	r2, r2, #1
    8336:	fbb2 f7f5 	udiv	r7, r2, r5
    833a:	fb05 2217 	mls	r2, r5, r7, r2
    833e:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    8342:	fa23 f202 	lsr.w	r2, r3, r2
    8346:	07d2      	lsls	r2, r2, #31
    8348:	d103      	bne.n	8352 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x352>
    834a:	1c40      	adds	r0, r0, #1
    834c:	b2c0      	uxtb	r0, r0
    834e:	2803      	cmp	r0, #3
    8350:	d3ee      	bcc.n	8330 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x330>
    8352:	6860      	ldr	r0, [r4, #4]
    8354:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    8358:	f004 fb08 	bl	c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    835c:	4631      	mov	r1, r6
    835e:	2001      	movs	r0, #1
    8360:	f7ff fa84 	bl	786c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    8364:	2800      	cmp	r0, #0
    8366:	d0bb      	beq.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    8368:	f000 f920 	bl	85ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>
    836c:	6860      	ldr	r0, [r4, #4]
    836e:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    8372:	b138      	cbz	r0, 8384 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x384>
    8374:	f7fe f8bc 	bl	64f0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    8378:	480a      	ldr	r0, [pc, #40]	; (83a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a4>)
    837a:	6800      	ldr	r0, [r0, #0]
    837c:	2803      	cmp	r0, #3
    837e:	d004      	beq.n	838a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38a>
    8380:	2000      	movs	r0, #0
    8382:	e7ad      	b.n	82e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e0>
    8384:	f7fe faa8 	bl	68d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    8388:	e7f6      	b.n	8378 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x378>
    838a:	f640 1109 	movw	r1, #2313	; 0x909
    838e:	2032      	movs	r0, #50	; 0x32
    8390:	f7fc fcc2 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8394:	200000ec 	.word	0x200000ec
    8398:	000086a8 	.word	0x000086a8
    839c:	0001092d 	.word	0x0001092d
    83a0:	8e89bed6 	.word	0x8e89bed6
    83a4:	40001550 	.word	0x40001550
    83a8:	b510      	push	{r4, lr}
    83aa:	2000      	movs	r0, #0
    83ac:	f7ff fe70 	bl	8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>
    83b0:	4808      	ldr	r0, [pc, #32]	; (83d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d4>)
    83b2:	6840      	ldr	r0, [r0, #4]
    83b4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    83b8:	b128      	cbz	r0, 83c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    83ba:	2801      	cmp	r0, #1
    83bc:	d003      	beq.n	83c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c6>
    83be:	2802      	cmp	r0, #2
    83c0:	d004      	beq.n	83cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>
    83c2:	200c      	movs	r0, #12
    83c4:	bd10      	pop	{r4, pc}
    83c6:	f000 f82f 	bl	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    83ca:	e001      	b.n	83d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3d0>
    83cc:	f000 f844 	bl	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    83d0:	2000      	movs	r0, #0
    83d2:	bd10      	pop	{r4, pc}
    83d4:	200000ec 	.word	0x200000ec
    83d8:	b570      	push	{r4, r5, r6, lr}
    83da:	4c12      	ldr	r4, [pc, #72]	; (8424 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x424>)
    83dc:	6860      	ldr	r0, [r4, #4]
    83de:	f100 0532 	add.w	r5, r0, #50	; 0x32
    83e2:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    83e6:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    83ea:	b188      	cbz	r0, 8410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    83ec:	f7ff fb42 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    83f0:	b130      	cbz	r0, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83f2:	6860      	ldr	r0, [r4, #4]
    83f4:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    83f8:	b111      	cbz	r1, 8400 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x400>
    83fa:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    83fe:	e002      	b.n	8406 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x406>
    8400:	6860      	ldr	r0, [r4, #4]
    8402:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    8406:	f7fe f919 	bl	663c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    840a:	b108      	cbz	r0, 8410 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x410>
    840c:	2601      	movs	r6, #1
    840e:	4605      	mov	r5, r0
    8410:	4629      	mov	r1, r5
    8412:	68a0      	ldr	r0, [r4, #8]
    8414:	f006 fdb7 	bl	ef86 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8418:	4631      	mov	r1, r6
    841a:	68a0      	ldr	r0, [r4, #8]
    841c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8420:	f006 bdb7 	b.w	ef92 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    8424:	200000ec 	.word	0x200000ec
    8428:	b510      	push	{r4, lr}
    842a:	f7ff fa0d 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    842e:	4905      	ldr	r1, [pc, #20]	; (8444 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x444>)
    8430:	2001      	movs	r0, #1
    8432:	6849      	ldr	r1, [r1, #4]
    8434:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    843c:	2000      	movs	r0, #0
    843e:	f000 bb99 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8442:	0000      	.short	0x0000
    8444:	200000ec 	.word	0x200000ec
    8448:	4902      	ldr	r1, [pc, #8]	; (8454 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x454>)
    844a:	2000      	movs	r0, #0
    844c:	6849      	ldr	r1, [r1, #4]
    844e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8452:	4770      	bx	lr
    8454:	200000ec 	.word	0x200000ec
    8458:	b570      	push	{r4, r5, r6, lr}
    845a:	f7fd f889 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    845e:	4604      	mov	r4, r0
    8460:	f7fd f88c 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8464:	4621      	mov	r1, r4
    8466:	f006 ff9f 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    846a:	0005      	movs	r5, r0
    846c:	d020      	beq.n	84b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4b0>
    846e:	f006 ffeb 	bl	f448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    8472:	2000      	movs	r0, #0
    8474:	f000 fb4c 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8478:	b1f8      	cbz	r0, 84ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ba>
    847a:	4c1d      	ldr	r4, [pc, #116]	; (84f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4f0>)
    847c:	6860      	ldr	r0, [r4, #4]
    847e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    8482:	2802      	cmp	r0, #2
    8484:	d003      	beq.n	848e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x48e>
    8486:	4629      	mov	r1, r5
    8488:	2000      	movs	r0, #0
    848a:	f7ff f9ef 	bl	786c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    848e:	1ce8      	adds	r0, r5, #3
    8490:	f006 f9cc 	bl	e82c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    8494:	6861      	ldr	r1, [r4, #4]
    8496:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    849a:	b128      	cbz	r0, 84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>
    849c:	2540      	movs	r5, #64	; 0x40
    849e:	f003 fdf9 	bl	c094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    84a2:	4628      	mov	r0, r5
    84a4:	f004 f802 	bl	c4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    84a8:	f7ff fae4 	bl	7a74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    84ac:	b970      	cbnz	r0, 84cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>
    84ae:	e008      	b.n	84c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c2>
    84b0:	f240 414a 	movw	r1, #1098	; 0x44a
    84b4:	2032      	movs	r0, #50	; 0x32
    84b6:	f7fc fc2f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    84be:	f7ff bfb3 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    84c2:	6860      	ldr	r0, [r4, #4]
    84c4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    84c8:	2802      	cmp	r0, #2
    84ca:	d104      	bne.n	84d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d6>
    84cc:	2100      	movs	r1, #0
    84ce:	2201      	movs	r2, #1
    84d0:	4608      	mov	r0, r1
    84d2:	f004 fadb 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    84d6:	6860      	ldr	r0, [r4, #4]
    84d8:	21ff      	movs	r1, #255	; 0xff
    84da:	f800 1f64 	strb.w	r1, [r0, #100]!
    84de:	7041      	strb	r1, [r0, #1]
    84e0:	2100      	movs	r1, #0
    84e2:	7201      	strb	r1, [r0, #8]
    84e4:	71c1      	strb	r1, [r0, #7]
    84e6:	7641      	strb	r1, [r0, #25]
    84e8:	2105      	movs	r1, #5
    84ea:	f800 1c08 	strb.w	r1, [r0, #-8]
    84ee:	bd70      	pop	{r4, r5, r6, pc}
    84f0:	200000ec 	.word	0x200000ec
    84f4:	b570      	push	{r4, r5, r6, lr}
    84f6:	f7fd f83b 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    84fa:	4604      	mov	r4, r0
    84fc:	f7fd f83e 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8500:	4621      	mov	r1, r4
    8502:	f006 ff51 	bl	f3a8 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7e>
    8506:	0005      	movs	r5, r0
    8508:	d028      	beq.n	855c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x55c>
    850a:	4e19      	ldr	r6, [pc, #100]	; (8570 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x570>)
    850c:	2004      	movs	r0, #4
    850e:	6874      	ldr	r4, [r6, #4]
    8510:	345c      	adds	r4, #92	; 0x5c
    8512:	f000 fafd 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8516:	b330      	cbz	r0, 8566 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x566>
    8518:	200c      	movs	r0, #12
    851a:	7020      	strb	r0, [r4, #0]
    851c:	2001      	movs	r0, #1
    851e:	f000 fb29 	bl	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8522:	7828      	ldrb	r0, [r5, #0]
    8524:	6871      	ldr	r1, [r6, #4]
    8526:	f3c0 1040 	ubfx	r0, r0, #5, #1
    852a:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    852e:	2005      	movs	r0, #5
    8530:	f7ff fb3e 	bl	7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    8534:	4a0f      	ldr	r2, [pc, #60]	; (8574 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x574>)
    8536:	68b1      	ldr	r1, [r6, #8]
    8538:	2520      	movs	r5, #32
    853a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    853c:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    8540:	7808      	ldrb	r0, [r1, #0]
    8542:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    8546:	f020 0020 	bic.w	r0, r0, #32
    854a:	4318      	orrs	r0, r3
    854c:	7008      	strb	r0, [r1, #0]
    854e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8550:	7ea2      	ldrb	r2, [r4, #26]
    8552:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    8556:	4011      	ands	r1, r2
    8558:	7001      	strb	r1, [r0, #0]
    855a:	bd70      	pop	{r4, r5, r6, pc}
    855c:	f240 5152 	movw	r1, #1362	; 0x552
    8560:	2032      	movs	r0, #50	; 0x32
    8562:	f7fc fbd9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    856a:	f7ff bf5d 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    856e:	0000      	.short	0x0000
    8570:	200000ec 	.word	0x200000ec
    8574:	2000124c 	.word	0x2000124c
    8578:	b510      	push	{r4, lr}
    857a:	2003      	movs	r0, #3
    857c:	f000 fac8 	bl	8b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8580:	b168      	cbz	r0, 859e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x59e>
    8582:	2003      	movs	r0, #3
    8584:	f7ff fb14 	bl	7bb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    8588:	2201      	movs	r2, #1
    858a:	4611      	mov	r1, r2
    858c:	2000      	movs	r0, #0
    858e:	f004 fa7d 	bl	ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    8592:	4905      	ldr	r1, [pc, #20]	; (85a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a8>)
    8594:	200b      	movs	r0, #11
    8596:	6849      	ldr	r1, [r1, #4]
    8598:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    859c:	bd10      	pop	{r4, pc}
    859e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    85a2:	f7ff bf41 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    85a6:	0000      	.short	0x0000
    85a8:	200000ec 	.word	0x200000ec
    85ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85b0:	4c1d      	ldr	r4, [pc, #116]	; (8628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>)
    85b2:	2600      	movs	r6, #0
    85b4:	6860      	ldr	r0, [r4, #4]
    85b6:	f880 607d 	strb.w	r6, [r0, #125]	; 0x7d
    85ba:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    85be:	b911      	cbnz	r1, 85c6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c6>
    85c0:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    85c4:	b350      	cbz	r0, 861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    85c6:	f004 fe28 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85ca:	4680      	mov	r8, r0
    85cc:	6860      	ldr	r0, [r4, #4]
    85ce:	4641      	mov	r1, r8
    85d0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    85d2:	f7fa f805 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    85d6:	4f15      	ldr	r7, [pc, #84]	; (862c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62c>)
    85d8:	4605      	mov	r5, r0
    85da:	fb90 f0f7 	sdiv	r0, r0, r7
    85de:	fb07 5010 	mls	r0, r7, r0, r5
    85e2:	4241      	negs	r1, r0
    85e4:	4640      	mov	r0, r8
    85e6:	f7f9 ffc9 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85ea:	6861      	ldr	r1, [r4, #4]
    85ec:	6448      	str	r0, [r1, #68]	; 0x44
    85ee:	fb95 f0f7 	sdiv	r0, r5, r7
    85f2:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    85f4:	4410      	add	r0, r2
    85f6:	6788      	str	r0, [r1, #120]	; 0x78
    85f8:	f7fe f8dc 	bl	67b4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    85fc:	6861      	ldr	r1, [r4, #4]
    85fe:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    8600:	4290      	cmp	r0, r2
    8602:	d80b      	bhi.n	861c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x61c>
    8604:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    8608:	678e      	str	r6, [r1, #120]	; 0x78
    860a:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    860e:	b110      	cbz	r0, 8616 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x616>
    8610:	2001      	movs	r0, #1
    8612:	f7fd ffb9 	bl	6588 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    8616:	2001      	movs	r0, #1
    8618:	f7ff fd14 	bl	8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>
    861c:	6861      	ldr	r1, [r4, #4]
    861e:	2002      	movs	r0, #2
    8620:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8628:	200000ec 	.word	0x200000ec
    862c:	000f4240 	.word	0x000f4240
    8630:	00008449 	.word	0x00008449
    8634:	00008429 	.word	0x00008429
    8638:	0000f389 	.word	0x0000f389
    863c:	0000f389 	.word	0x0000f389
    8640:	0000f389 	.word	0x0000f389
    8644:	00008459 	.word	0x00008459
    8648:	0000f389 	.word	0x0000f389
    864c:	0000f389 	.word	0x0000f389
    8650:	0000f389 	.word	0x0000f389
    8654:	0000f389 	.word	0x0000f389
    8658:	0000f389 	.word	0x0000f389
    865c:	00008579 	.word	0x00008579
    8660:	000084f5 	.word	0x000084f5
    8664:	0000f389 	.word	0x0000f389
    8668:	0000f389 	.word	0x0000f389
    866c:	0000824d 	.word	0x0000824d
    8670:	00008229 	.word	0x00008229
    8674:	00000000 	.word	0x00000000
    8678:	0000f393 	.word	0x0000f393
    867c:	0000f32f 	.word	0x0000f32f
    8680:	0000f341 	.word	0x0000f341
    8684:	0000f34f 	.word	0x0000f34f
    8688:	00007a21 	.word	0x00007a21
    868c:	000082c9 	.word	0x000082c9
    8690:	000083a9 	.word	0x000083a9
    8694:	0000866c 	.word	0x0000866c
    8698:	00008674 	.word	0x00008674
    869c:	00008630 	.word	0x00008630
    86a0:	00008684 	.word	0x00008684
    86a4:	0000867c 	.word	0x0000867c
    86a8:	00008285 	.word	0x00008285
    86ac:	00008101 	.word	0x00008101
    86b0:	000081d5 	.word	0x000081d5
    86b4:	0000f3a5 	.word	0x0000f3a5

000086b8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    86b8:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    86bc:	461d      	mov	r5, r3
    86be:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    86c2:	4616      	mov	r6, r2
    86c4:	4688      	mov	r8, r1
    86c6:	4681      	mov	r9, r0
    86c8:	f7fc ff58 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    86cc:	4604      	mov	r4, r0
    86ce:	f005 fd76 	bl	e1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    86d2:	2801      	cmp	r0, #1
    86d4:	d063      	beq.n	879e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    86d6:	4620      	mov	r0, r4
    86d8:	f006 ff2f 	bl	f53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    86dc:	4604      	mov	r4, r0
    86de:	221c      	movs	r2, #28
    86e0:	2100      	movs	r1, #0
    86e2:	f004 ff89 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    86e6:	2701      	movs	r7, #1
    86e8:	7027      	strb	r7, [r4, #0]
    86ea:	ea5f 0008 	movs.w	r0, r8
    86ee:	d009      	beq.n	8704 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    86f0:	2801      	cmp	r0, #1
    86f2:	d00b      	beq.n	870c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    86f4:	2802      	cmp	r0, #2
    86f6:	d02d      	beq.n	8754 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    86f8:	f1b8 0f06 	cmp.w	r8, #6
    86fc:	d02c      	beq.n	8758 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    86fe:	f240 217b 	movw	r1, #635	; 0x27b
    8702:	e049      	b.n	8798 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    8704:	7aa0      	ldrb	r0, [r4, #10]
    8706:	f040 0001 	orr.w	r0, r0, #1
    870a:	e026      	b.n	875a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    870c:	7aa0      	ldrb	r0, [r4, #10]
    870e:	f040 0005 	orr.w	r0, r0, #5
    8712:	bf00      	nop
    8714:	f040 0010 	orr.w	r0, r0, #16
    8718:	72a0      	strb	r0, [r4, #10]
    871a:	1c63      	adds	r3, r4, #1
    871c:	1ca2      	adds	r2, r4, #2
    871e:	4648      	mov	r0, r9
    8720:	990a      	ldr	r1, [sp, #40]	; 0x28
    8722:	f006 feef 	bl	f504 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    8726:	f884 a009 	strb.w	sl, [r4, #9]
    872a:	7327      	strb	r7, [r4, #12]
    872c:	2000      	movs	r0, #0
    872e:	7360      	strb	r0, [r4, #13]
    8730:	20ff      	movs	r0, #255	; 0xff
    8732:	73a0      	strb	r0, [r4, #14]
    8734:	7aa1      	ldrb	r1, [r4, #10]
    8736:	0749      	lsls	r1, r1, #29
    8738:	d518      	bpl.n	876c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    873a:	f104 0014 	add.w	r0, r4, #20
    873e:	1e41      	subs	r1, r0, #1
    8740:	2d02      	cmp	r5, #2
    8742:	d00d      	beq.n	8760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8744:	2d03      	cmp	r5, #3
    8746:	d00b      	beq.n	8760 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8748:	f8d9 2008 	ldr.w	r2, [r9, #8]
    874c:	6813      	ldr	r3, [r2, #0]
    874e:	6003      	str	r3, [r0, #0]
    8750:	8892      	ldrh	r2, [r2, #4]
    8752:	e008      	b.n	8766 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    8754:	7aa0      	ldrb	r0, [r4, #10]
    8756:	e7dd      	b.n	8714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8758:	7aa0      	ldrb	r0, [r4, #10]
    875a:	f040 0002 	orr.w	r0, r0, #2
    875e:	e7d9      	b.n	8714 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8760:	6832      	ldr	r2, [r6, #0]
    8762:	6002      	str	r2, [r0, #0]
    8764:	88b2      	ldrh	r2, [r6, #4]
    8766:	8082      	strh	r2, [r0, #4]
    8768:	700d      	strb	r5, [r1, #0]
    876a:	e000      	b.n	876e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    876c:	74e0      	strb	r0, [r4, #19]
    876e:	207f      	movs	r0, #127	; 0x7f
    8770:	76a0      	strb	r0, [r4, #26]
    8772:	f884 b01b 	strb.w	fp, [r4, #27]
    8776:	f7fc fefb 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    877a:	4604      	mov	r4, r0
    877c:	f7fc fefe 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8780:	2201      	movs	r2, #1
    8782:	4621      	mov	r1, r4
    8784:	f006 fee2 	bl	f54c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    8788:	b120      	cbz	r0, 8794 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    878a:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    878e:	2005      	movs	r0, #5
    8790:	f000 b9f0 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    8794:	f240 219b 	movw	r1, #667	; 0x29b
    8798:	2033      	movs	r0, #51	; 0x33
    879a:	f7fc fabd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    879e:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000087a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    87a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87a8:	4616      	mov	r6, r2
    87aa:	460c      	mov	r4, r1
    87ac:	4605      	mov	r5, r0
    87ae:	f006 fbb1 	bl	ef14 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    87b2:	7460      	strb	r0, [r4, #17]
    87b4:	4628      	mov	r0, r5
    87b6:	f006 fba4 	bl	ef02 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    87ba:	74a0      	strb	r0, [r4, #18]
    87bc:	1cea      	adds	r2, r5, #3
    87be:	4b14      	ldr	r3, [pc, #80]	; (8810 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    87c0:	1d90      	adds	r0, r2, #6
    87c2:	2100      	movs	r1, #0
    87c4:	2e07      	cmp	r6, #7
    87c6:	d21f      	bcs.n	8808 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    87c8:	e8df f006 	tbb	[pc, r6]
    87cc:	1e110b04 	.word	0x1e110b04
    87d0:	00041e13 	.word	0x00041e13
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	e00d      	b.n	87f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    87d8:	60e0      	str	r0, [r4, #12]
    87da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    87de:	60e1      	str	r1, [r4, #12]
    87e0:	e7fb      	b.n	87da <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    87e2:	785b      	ldrb	r3, [r3, #1]
    87e4:	7063      	strb	r3, [r4, #1]
    87e6:	e9c4 2001 	strd	r2, r0, [r4, #4]
    87ea:	7421      	strb	r1, [r4, #16]
    87ec:	e7f7      	b.n	87de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    87ee:	789b      	ldrb	r3, [r3, #2]
    87f0:	e000      	b.n	87f4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    87f2:	78db      	ldrb	r3, [r3, #3]
    87f4:	7063      	strb	r3, [r4, #1]
    87f6:	e9c4 2101 	strd	r2, r1, [r4, #4]
    87fa:	786a      	ldrb	r2, [r5, #1]
    87fc:	1f92      	subs	r2, r2, #6
    87fe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8802:	7422      	strb	r2, [r4, #16]
    8804:	d0eb      	beq.n	87de <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    8806:	e7e7      	b.n	87d8 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    8808:	7061      	strb	r1, [r4, #1]
    880a:	6061      	str	r1, [r4, #4]
    880c:	60a1      	str	r1, [r4, #8]
    880e:	e7ec      	b.n	87ea <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    8810:	00010933 	.word	0x00010933

00008814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>:
    8814:	b508      	push	{r3, lr}
    8816:	2244      	movs	r2, #68	; 0x44
    8818:	2100      	movs	r1, #0
    881a:	480c      	ldr	r0, [pc, #48]	; (884c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    881c:	f004 feec 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8820:	f7fe fdf0 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8824:	2120      	movs	r1, #32
    8826:	7001      	strb	r1, [r0, #0]
    8828:	4808      	ldr	r0, [pc, #32]	; (884c <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ+0x38>)
    882a:	3810      	subs	r0, #16
    882c:	2100      	movs	r1, #0
    882e:	6001      	str	r1, [r0, #0]
    8830:	6041      	str	r1, [r0, #4]
    8832:	6081      	str	r1, [r0, #8]
    8834:	60c1      	str	r1, [r0, #12]
    8836:	f000 f871 	bl	891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
    883a:	f242 7010 	movw	r0, #10000	; 0x2710
    883e:	9000      	str	r0, [sp, #0]
    8840:	2201      	movs	r2, #1
    8842:	4669      	mov	r1, sp
    8844:	1080      	asrs	r0, r0, #2
    8846:	f000 fbb1 	bl	8fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    884a:	bd08      	pop	{r3, pc}
    884c:	200012e0 	.word	0x200012e0

00008850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>:
    8850:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8854:	4c1e      	ldr	r4, [pc, #120]	; (88d0 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x80>)
    8856:	4607      	mov	r7, r0
    8858:	460e      	mov	r6, r1
    885a:	7820      	ldrb	r0, [r4, #0]
    885c:	b118      	cbz	r0, 8866 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x16>
    885e:	200c      	movs	r0, #12
    8860:	b004      	add	sp, #16
    8862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8866:	f7fe fdcd 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    886a:	4605      	mov	r5, r0
    886c:	61a7      	str	r7, [r4, #24]
    886e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    8872:	b110      	cbz	r0, 887a <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x2a>
    8874:	f240 4129 	movw	r1, #1065	; 0x429
    8878:	e026      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    887a:	2005      	movs	r0, #5
    887c:	7020      	strb	r0, [r4, #0]
    887e:	2000      	movs	r0, #0
    8880:	7060      	strb	r0, [r4, #1]
    8882:	7720      	strb	r0, [r4, #28]
    8884:	4630      	mov	r0, r6
    8886:	f000 f9f7 	bl	8c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    888a:	f000 fd27 	bl	92dc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x768>
    888e:	6320      	str	r0, [r4, #48]	; 0x30
    8890:	2100      	movs	r1, #0
    8892:	4810      	ldr	r0, [pc, #64]	; (88d4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x84>)
    8894:	f7fa fd5c 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8898:	7028      	strb	r0, [r5, #0]
    889a:	2820      	cmp	r0, #32
    889c:	d00c      	beq.n	88b8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x68>
    889e:	2200      	movs	r2, #0
    88a0:	2101      	movs	r1, #1
    88a2:	4668      	mov	r0, sp
    88a4:	f000 fdb4 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    88a8:	b148      	cbz	r0, 88be <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x6e>
    88aa:	7828      	ldrb	r0, [r5, #0]
    88ac:	4669      	mov	r1, sp
    88ae:	f006 fe99 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    88b2:	b138      	cbz	r0, 88c4 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x74>
    88b4:	2000      	movs	r0, #0
    88b6:	e7d3      	b.n	8860 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x10>
    88b8:	f44f 6187 	mov.w	r1, #1080	; 0x438
    88bc:	e004      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    88be:	f240 413b 	movw	r1, #1083	; 0x43b
    88c2:	e001      	b.n	88c8 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ+0x78>
    88c4:	f240 413c 	movw	r1, #1084	; 0x43c
    88c8:	2035      	movs	r0, #53	; 0x35
    88ca:	f7fc fa25 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88ce:	0000      	.short	0x0000
    88d0:	200012e0 	.word	0x200012e0
    88d4:	00008d15 	.word	0x00008d15

000088d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>:
    88d8:	4902      	ldr	r1, [pc, #8]	; (88e4 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q+0xc>)
    88da:	6989      	ldr	r1, [r1, #24]
    88dc:	6001      	str	r1, [r0, #0]
    88de:	f000 b865 	b.w	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    88e2:	0000      	.short	0x0000
    88e4:	200012e0 	.word	0x200012e0

000088e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>:
    88e8:	4901      	ldr	r1, [pc, #4]	; (88f0 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA+0x8>)
    88ea:	7048      	strb	r0, [r1, #1]
    88ec:	4770      	bx	lr
    88ee:	0000      	.short	0x0000
    88f0:	200012d0 	.word	0x200012d0

000088f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>:
    88f4:	b570      	push	{r4, r5, r6, lr}
    88f6:	4605      	mov	r5, r0
    88f8:	4907      	ldr	r1, [pc, #28]	; (8918 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY+0x24>)
    88fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    88fe:	fbb1 f4f0 	udiv	r4, r1, r0
    8902:	f006 febf 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8906:	1901      	adds	r1, r0, r4
    8908:	4628      	mov	r0, r5
    890a:	f501 719b 	add.w	r1, r1, #310	; 0x136
    890e:	f006 fc83 	bl	f218 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8912:	b280      	uxth	r0, r0
    8914:	bd70      	pop	{r4, r5, r6, pc}
    8916:	0000      	.short	0x0000
    8918:	00012105 	.word	0x00012105

0000891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>:
    891c:	4804      	ldr	r0, [pc, #16]	; (8930 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0x14>)
    891e:	b510      	push	{r4, lr}
    8920:	7800      	ldrb	r0, [r0, #0]
    8922:	b108      	cbz	r0, 8928 <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ+0xc>
    8924:	f000 f842 	bl	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
    8928:	f000 f972 	bl	8c10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9c>
    892c:	2000      	movs	r0, #0
    892e:	bd10      	pop	{r4, pc}
    8930:	200012e0 	.word	0x200012e0

00008934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>:
    8934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8936:	4606      	mov	r6, r0
    8938:	b111      	cbz	r1, 8940 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0xc>
    893a:	2011      	movs	r0, #17
    893c:	b004      	add	sp, #16
    893e:	bd70      	pop	{r4, r5, r6, pc}
    8940:	4c18      	ldr	r4, [pc, #96]	; (89a4 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x70>)
    8942:	7820      	ldrb	r0, [r4, #0]
    8944:	b108      	cbz	r0, 894a <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x16>
    8946:	200c      	movs	r0, #12
    8948:	e7f8      	b.n	893c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    894a:	f7fe fd5b 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    894e:	4605      	mov	r5, r0
    8950:	2000      	movs	r0, #0
    8952:	7060      	strb	r0, [r4, #1]
    8954:	2004      	movs	r0, #4
    8956:	7020      	strb	r0, [r4, #0]
    8958:	4630      	mov	r0, r6
    895a:	f000 f98d 	bl	8c78 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x104>
    895e:	f000 fcbd 	bl	92dc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x768>
    8962:	6320      	str	r0, [r4, #48]	; 0x30
    8964:	2100      	movs	r1, #0
    8966:	4810      	ldr	r0, [pc, #64]	; (89a8 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x74>)
    8968:	f7fa fcf2 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    896c:	7028      	strb	r0, [r5, #0]
    896e:	2820      	cmp	r0, #32
    8970:	d00c      	beq.n	898c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x58>
    8972:	2200      	movs	r2, #0
    8974:	2101      	movs	r1, #1
    8976:	4668      	mov	r0, sp
    8978:	f000 fd4a 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    897c:	b148      	cbz	r0, 8992 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x5e>
    897e:	7828      	ldrb	r0, [r5, #0]
    8980:	4669      	mov	r1, sp
    8982:	f006 fe2f 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8986:	b138      	cbz	r0, 8998 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x64>
    8988:	2000      	movs	r0, #0
    898a:	e7d7      	b.n	893c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x8>
    898c:	f240 419f 	movw	r1, #1183	; 0x49f
    8990:	e004      	b.n	899c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    8992:	f240 41a1 	movw	r1, #1185	; 0x4a1
    8996:	e001      	b.n	899c <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA+0x68>
    8998:	f240 41a2 	movw	r1, #1186	; 0x4a2
    899c:	2035      	movs	r0, #53	; 0x35
    899e:	f7fc f9bb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89a2:	0000      	.short	0x0000
    89a4:	200012e0 	.word	0x200012e0
    89a8:	00008d15 	.word	0x00008d15

000089ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>:
    89ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89b0:	2700      	movs	r7, #0
    89b2:	f7fe fd27 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    89b6:	4c17      	ldr	r4, [pc, #92]	; (8a14 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x68>)
    89b8:	4605      	mov	r5, r0
    89ba:	7820      	ldrb	r0, [r4, #0]
    89bc:	2804      	cmp	r0, #4
    89be:	d005      	beq.n	89cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    89c0:	7820      	ldrb	r0, [r4, #0]
    89c2:	2805      	cmp	r0, #5
    89c4:	d002      	beq.n	89cc <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x20>
    89c6:	200c      	movs	r0, #12
    89c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89cc:	2001      	movs	r0, #1
    89ce:	7060      	strb	r0, [r4, #1]
    89d0:	7b20      	ldrb	r0, [r4, #12]
    89d2:	b160      	cbz	r0, 89ee <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x42>
    89d4:	f3ef 8610 	mrs	r6, PRIMASK
    89d8:	b672      	cpsid	i
    89da:	7b20      	ldrb	r0, [r4, #12]
    89dc:	b128      	cbz	r0, 89ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    89de:	7b60      	ldrb	r0, [r4, #13]
    89e0:	b118      	cbz	r0, 89ea <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x3e>
    89e2:	f7fe fee1 	bl	77a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    89e6:	f000 fad1 	bl	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    89ea:	b126      	cbz	r6, 89f6 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4a>
    89ec:	e004      	b.n	89f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    89ee:	7828      	ldrb	r0, [r5, #0]
    89f0:	f7fa fa64 	bl	2ebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    89f4:	e000      	b.n	89f8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x4c>
    89f6:	b662      	cpsie	i
    89f8:	7828      	ldrb	r0, [r5, #0]
    89fa:	f7fa fb9d 	bl	3138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    89fe:	f000 fe37 	bl	9670 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xafc>
    8a02:	2000      	movs	r0, #0
    8a04:	7060      	strb	r0, [r4, #1]
    8a06:	7f20      	ldrb	r0, [r4, #28]
    8a08:	b100      	cbz	r0, 8a0c <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x60>
    8a0a:	270c      	movs	r7, #12
    8a0c:	f000 fe5a 	bl	96c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb50>
    8a10:	4638      	mov	r0, r7
    8a12:	e7d9      	b.n	89c8 <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA+0x1c>
    8a14:	200012e0 	.word	0x200012e0

00008a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>:
    8a18:	4801      	ldr	r0, [pc, #4]	; (8a20 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ+0x8>)
    8a1a:	7800      	ldrb	r0, [r0, #0]
    8a1c:	4770      	bx	lr
    8a1e:	0000      	.short	0x0000
    8a20:	200012e0 	.word	0x200012e0

00008a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>:
    8a24:	490c      	ldr	r1, [pc, #48]	; (8a58 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x34>)
    8a26:	b508      	push	{r3, lr}
    8a28:	7809      	ldrb	r1, [r1, #0]
    8a2a:	b121      	cbz	r1, 8a36 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x12>
    8a2c:	f44f 618b 	mov.w	r1, #1112	; 0x458
    8a30:	2035      	movs	r0, #53	; 0x35
    8a32:	f7fc f971 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8a36:	2300      	movs	r3, #0
    8a38:	9300      	str	r3, [sp, #0]
    8a3a:	7801      	ldrb	r1, [r0, #0]
    8a3c:	461a      	mov	r2, r3
    8a3e:	07c9      	lsls	r1, r1, #31
    8a40:	d003      	beq.n	8a4a <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A+0x26>
    8a42:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    8a46:	2201      	movs	r2, #1
    8a48:	9000      	str	r0, [sp, #0]
    8a4a:	4669      	mov	r1, sp
    8a4c:	4618      	mov	r0, r3
    8a4e:	f000 faad 	bl	8fac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x438>
    8a52:	2000      	movs	r0, #0
    8a54:	bd08      	pop	{r3, pc}
    8a56:	0000      	.short	0x0000
    8a58:	200012e0 	.word	0x200012e0

00008a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    8a5c:	b570      	push	{r4, r5, r6, lr}
    8a5e:	f003 fe9b 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a62:	4c0e      	ldr	r4, [pc, #56]	; (8a9c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    8a64:	4606      	mov	r6, r0
    8a66:	7860      	ldrb	r0, [r4, #1]
    8a68:	b170      	cbz	r0, 8a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a6a:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    8a6e:	4632      	mov	r2, r6
    8a70:	4628      	mov	r0, r5
    8a72:	f005 ff78 	bl	e966 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8a76:	6060      	str	r0, [r4, #4]
    8a78:	42a8      	cmp	r0, r5
    8a7a:	d005      	beq.n	8a88 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a7c:	68e1      	ldr	r1, [r4, #12]
    8a7e:	1b40      	subs	r0, r0, r5
    8a80:	4408      	add	r0, r1
    8a82:	60e0      	str	r0, [r4, #12]
    8a84:	f7fa fd6e 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a88:	6860      	ldr	r0, [r4, #4]
    8a8a:	42b0      	cmp	r0, r6
    8a8c:	d301      	bcc.n	8a92 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    8a8e:	7820      	ldrb	r0, [r4, #0]
    8a90:	b108      	cbz	r0, 8a96 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    8a92:	2000      	movs	r0, #0
    8a94:	bd70      	pop	{r4, r5, r6, pc}
    8a96:	2001      	movs	r0, #1
    8a98:	bd70      	pop	{r4, r5, r6, pc}
    8a9a:	0000      	.short	0x0000
    8a9c:	200012d0 	.word	0x200012d0

00008aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    8aa0:	b510      	push	{r4, lr}
    8aa2:	2905      	cmp	r1, #5
    8aa4:	d22d      	bcs.n	8b02 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    8aa6:	e8df f001 	tbb	[pc, r1]
    8aaa:	0a05      	.short	0x0a05
    8aac:	00280e03 	.word	0x00280e03
    8ab0:	2100      	movs	r1, #0
    8ab2:	e000      	b.n	8ab6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    8ab4:	2101      	movs	r1, #1
    8ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8aba:	f000 b9d1 	b.w	8e60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ec>
    8abe:	2103      	movs	r1, #3
    8ac0:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    8ac4:	bd10      	pop	{r4, pc}
    8ac6:	4911      	ldr	r1, [pc, #68]	; (8b0c <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    8ac8:	4604      	mov	r4, r0
    8aca:	68c0      	ldr	r0, [r0, #12]
    8acc:	6008      	str	r0, [r1, #0]
    8ace:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8ad2:	6220      	str	r0, [r4, #32]
    8ad4:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    8ad8:	83a0      	strh	r0, [r4, #28]
    8ada:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8ade:	60e0      	str	r0, [r4, #12]
    8ae0:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    8ae4:	82a0      	strh	r0, [r4, #20]
    8ae6:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8aea:	82e0      	strh	r0, [r4, #22]
    8aec:	4620      	mov	r0, r4
    8aee:	f006 fd67 	bl	f5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8af2:	2002      	movs	r0, #2
    8af4:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8af8:	bd10      	pop	{r4, pc}
    8afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8afe:	f006 bd5f 	b.w	f5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    8b02:	f640 3158 	movw	r1, #2904	; 0xb58
    8b06:	2035      	movs	r0, #53	; 0x35
    8b08:	f7fc f906 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b0c:	200000fc 	.word	0x200000fc

00008b10 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    8b10:	b570      	push	{r4, r5, r6, lr}
    8b12:	4605      	mov	r5, r0
    8b14:	f003 fe40 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8b18:	4604      	mov	r4, r0
    8b1a:	b155      	cbz	r5, 8b32 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x22>
    8b1c:	2d03      	cmp	r5, #3
    8b1e:	d00d      	beq.n	8b3c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    8b20:	2d04      	cmp	r5, #4
    8b22:	d00e      	beq.n	8b42 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x32>
    8b24:	2d06      	cmp	r5, #6
    8b26:	d01e      	beq.n	8b66 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x56>
    8b28:	f240 5194 	movw	r1, #1428	; 0x594
    8b2c:	2035      	movs	r0, #53	; 0x35
    8b2e:	f7fc f8f3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	2001      	movs	r0, #1
    8b34:	f006 fd28 	bl	f588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    8b38:	3098      	adds	r0, #152	; 0x98
    8b3a:	e004      	b.n	8b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b3c:	f44f 7057 	mov.w	r0, #860	; 0x35c
    8b40:	e001      	b.n	8b46 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b42:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    8b46:	4e0a      	ldr	r6, [pc, #40]	; (8b70 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x60>)
    8b48:	1825      	adds	r5, r4, r0
    8b4a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b4c:	38f0      	subs	r0, #240	; 0xf0
    8b4e:	4285      	cmp	r5, r0
    8b50:	d307      	bcc.n	8b62 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x52>
    8b52:	2400      	movs	r4, #0
    8b54:	f000 fc12 	bl	937c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x808>
    8b58:	b140      	cbz	r0, 8b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8b5a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    8b5c:	38f0      	subs	r0, #240	; 0xf0
    8b5e:	4285      	cmp	r5, r0
    8b60:	d203      	bcs.n	8b6a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    8b62:	2401      	movs	r4, #1
    8b64:	e002      	b.n	8b6c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    8b66:	2001      	movs	r0, #1
    8b68:	bd70      	pop	{r4, r5, r6, pc}
    8b6a:	2400      	movs	r4, #0
    8b6c:	4620      	mov	r0, r4
    8b6e:	bd70      	pop	{r4, r5, r6, pc}
    8b70:	200012e0 	.word	0x200012e0

00008b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    8b74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8b76:	2501      	movs	r5, #1
    8b78:	4c24      	ldr	r4, [pc, #144]	; (8c0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    8b7a:	2806      	cmp	r0, #6
    8b7c:	d243      	bcs.n	8c06 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    8b7e:	e8df f000 	tbb	[pc, r0]
    8b82:	1903      	.short	0x1903
    8b84:	3e232319 	.word	0x3e232319
    8b88:	f002 fcfa 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8b8c:	7860      	ldrb	r0, [r4, #1]
    8b8e:	bb88      	cbnz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8b90:	2200      	movs	r2, #0
    8b92:	4611      	mov	r1, r2
    8b94:	4668      	mov	r0, sp
    8b96:	f000 fc3b 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    8b9a:	b148      	cbz	r0, 8bb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    8b9c:	f7fe fc32 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8ba0:	7800      	ldrb	r0, [r0, #0]
    8ba2:	4669      	mov	r1, sp
    8ba4:	f006 fd1e 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8ba8:	bb20      	cbnz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8baa:	f640 2163 	movw	r1, #2659	; 0xa63
    8bae:	e01c      	b.n	8bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8bb0:	70e5      	strb	r5, [r4, #3]
    8bb2:	e020      	b.n	8bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8bb4:	2802      	cmp	r0, #2
    8bb6:	d005      	beq.n	8bc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    8bb8:	2000      	movs	r0, #0
    8bba:	b004      	add	sp, #16
    8bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8bc0:	f000 b96a 	b.w	8e98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x324>
    8bc4:	2001      	movs	r0, #1
    8bc6:	e7f8      	b.n	8bba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    8bc8:	2804      	cmp	r0, #4
    8bca:	d011      	beq.n	8bf0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    8bcc:	f05f 0600 	movs.w	r6, #0
    8bd0:	f002 fcd6 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bd4:	7725      	strb	r5, [r4, #28]
    8bd6:	7766      	strb	r6, [r4, #29]
    8bd8:	69a1      	ldr	r1, [r4, #24]
    8bda:	2000      	movs	r0, #0
    8bdc:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    8be0:	f000 f85a 	bl	8c98 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x124>
    8be4:	b130      	cbz	r0, 8bf4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8be6:	f640 3118 	movw	r1, #2840	; 0xb18
    8bea:	2035      	movs	r0, #53	; 0x35
    8bec:	f7fc f894 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bf0:	2601      	movs	r6, #1
    8bf2:	e7ed      	b.n	8bd0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    8bf4:	e7ff      	b.n	8bf6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8bf6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8bfa:	f000 b9c7 	b.w	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    8bfe:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8c02:	f002 bcbd 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8c06:	f640 31b2 	movw	r1, #2994	; 0xbb2
    8c0a:	e7ee      	b.n	8bea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8c0c:	200012e0 	.word	0x200012e0
    8c10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8c12:	4c18      	ldr	r4, [pc, #96]	; (8c74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x100>)
    8c14:	2001      	movs	r0, #1
    8c16:	7020      	strb	r0, [r4, #0]
    8c18:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8c1c:	e00b      	b.n	8c36 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc2>
    8c1e:	2100      	movs	r1, #0
    8c20:	f005 fd0d 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8c24:	0006      	movs	r6, r0
    8c26:	d010      	beq.n	8c4a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd6>
    8c28:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    8c2c:	f7fa fa84 	bl	3138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8c30:	4630      	mov	r0, r6
    8c32:	f006 fcef 	bl	f614 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    8c36:	4669      	mov	r1, sp
    8c38:	2000      	movs	r0, #0
    8c3a:	f005 fd09 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8c3e:	b180      	cbz	r0, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c40:	f240 2145 	movw	r1, #581	; 0x245
    8c44:	2035      	movs	r0, #53	; 0x35
    8c46:	f7fc f867 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8c4a:	f240 514a 	movw	r1, #1354	; 0x54a
    8c4e:	e7f9      	b.n	8c44 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xd0>
    8c50:	9802      	ldr	r0, [sp, #8]
    8c52:	b130      	cbz	r0, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c54:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    8c58:	b119      	cbz	r1, 8c62 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xee>
    8c5a:	8800      	ldrh	r0, [r0, #0]
    8c5c:	42a8      	cmp	r0, r5
    8c5e:	d1de      	bne.n	8c1e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaa>
    8c60:	e004      	b.n	8c6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xf8>
    8c62:	4668      	mov	r0, sp
    8c64:	f7fc fa88 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8c68:	2800      	cmp	r0, #0
    8c6a:	d0f1      	beq.n	8c50 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xdc>
    8c6c:	2000      	movs	r0, #0
    8c6e:	7020      	strb	r0, [r4, #0]
    8c70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8c72:	0000      	.short	0x0000
    8c74:	200012d0 	.word	0x200012d0
    8c78:	4906      	ldr	r1, [pc, #24]	; (8c94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x120>)
    8c7a:	b140      	cbz	r0, 8c8e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x11a>
    8c7c:	2201      	movs	r2, #1
    8c7e:	708a      	strb	r2, [r1, #2]
    8c80:	f242 7210 	movw	r2, #10000	; 0x2710
    8c84:	4350      	muls	r0, r2
    8c86:	684a      	ldr	r2, [r1, #4]
    8c88:	4410      	add	r0, r2
    8c8a:	6208      	str	r0, [r1, #32]
    8c8c:	4770      	bx	lr
    8c8e:	2000      	movs	r0, #0
    8c90:	7088      	strb	r0, [r1, #2]
    8c92:	4770      	bx	lr
    8c94:	200012e0 	.word	0x200012e0
    8c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8c9a:	4c1c      	ldr	r4, [pc, #112]	; (8d0c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x198>)
    8c9c:	7820      	ldrb	r0, [r4, #0]
    8c9e:	2805      	cmp	r0, #5
    8ca0:	d002      	beq.n	8ca8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x134>
    8ca2:	200c      	movs	r0, #12
    8ca4:	b004      	add	sp, #16
    8ca6:	bd10      	pop	{r4, pc}
    8ca8:	69a1      	ldr	r1, [r4, #24]
    8caa:	b129      	cbz	r1, 8cb8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x144>
    8cac:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    8cb0:	b128      	cbz	r0, 8cbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x14a>
    8cb2:	f240 5103 	movw	r1, #1283	; 0x503
    8cb6:	e025      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8cb8:	f240 5102 	movw	r1, #1282	; 0x502
    8cbc:	e022      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8cbe:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    8cc2:	2820      	cmp	r0, #32
    8cc4:	d002      	beq.n	8ccc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x158>
    8cc6:	f240 5105 	movw	r1, #1285	; 0x505
    8cca:	e01b      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8ccc:	4810      	ldr	r0, [pc, #64]	; (8d10 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x19c>)
    8cce:	f7fa fb3f 	bl	3350 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8cd2:	69a1      	ldr	r1, [r4, #24]
    8cd4:	2820      	cmp	r0, #32
    8cd6:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    8cda:	d00e      	beq.n	8cfa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x186>
    8cdc:	2300      	movs	r3, #0
    8cde:	2201      	movs	r2, #1
    8ce0:	4668      	mov	r0, sp
    8ce2:	f000 fa09 	bl	90f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x584>
    8ce6:	69a0      	ldr	r0, [r4, #24]
    8ce8:	4669      	mov	r1, sp
    8cea:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    8cee:	f006 fc79 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8cf2:	b128      	cbz	r0, 8d00 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x18c>
    8cf4:	2000      	movs	r0, #0
    8cf6:	61a0      	str	r0, [r4, #24]
    8cf8:	e7d4      	b.n	8ca4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x130>
    8cfa:	f240 5109 	movw	r1, #1289	; 0x509
    8cfe:	e001      	b.n	8d04 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x190>
    8d00:	f240 510c 	movw	r1, #1292	; 0x50c
    8d04:	2035      	movs	r0, #53	; 0x35
    8d06:	f7fc f807 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d0a:	0000      	.short	0x0000
    8d0c:	200012e0 	.word	0x200012e0
    8d10:	00009001 	.word	0x00009001
    8d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8d16:	460d      	mov	r5, r1
    8d18:	2001      	movs	r0, #1
    8d1a:	f006 fc1e 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8d1e:	b2c4      	uxtb	r4, r0
    8d20:	200b      	movs	r0, #11
    8d22:	f006 fc1a 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8d26:	b2c0      	uxtb	r0, r0
    8d28:	4284      	cmp	r4, r0
    8d2a:	d002      	beq.n	8d32 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1be>
    8d2c:	f240 21ce 	movw	r1, #718	; 0x2ce
    8d30:	e073      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8d32:	f7fe fb67 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8d36:	2601      	movs	r6, #1
    8d38:	4c3b      	ldr	r4, [pc, #236]	; (8e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    8d3a:	2d09      	cmp	r5, #9
    8d3c:	d270      	bcs.n	8e20 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ac>
    8d3e:	e8df f005 	tbb	[pc, r5]
    8d42:	3605      	.short	0x3605
    8d44:	6f464a4a 	.word	0x6f464a4a
    8d48:	006a665e 	.word	0x006a665e
    8d4c:	7326      	strb	r6, [r4, #12]
    8d4e:	7861      	ldrb	r1, [r4, #1]
    8d50:	2900      	cmp	r1, #0
    8d52:	d12b      	bne.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8d54:	7800      	ldrb	r0, [r0, #0]
    8d56:	f7f9 fc67 	bl	2628 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8d5a:	4605      	mov	r5, r0
    8d5c:	6120      	str	r0, [r4, #16]
    8d5e:	f000 fccb 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    8d62:	b118      	cbz	r0, 8d6c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1f8>
    8d64:	2000      	movs	r0, #0
    8d66:	f88d 0004 	strb.w	r0, [sp, #4]
    8d6a:	e001      	b.n	8d70 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x1fc>
    8d6c:	f88d 6004 	strb.w	r6, [sp, #4]
    8d70:	4629      	mov	r1, r5
    8d72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8d74:	f7f9 fc34 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8d78:	6861      	ldr	r1, [r4, #4]
    8d7a:	fbb0 f2f1 	udiv	r2, r0, r1
    8d7e:	fb01 0012 	mls	r0, r1, r2, r0
    8d82:	b150      	cbz	r0, 8d9a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x226>
    8d84:	f05f 0000 	movs.w	r0, #0
    8d88:	f88d 0005 	strb.w	r0, [sp, #5]
    8d8c:	4668      	mov	r0, sp
    8d8e:	f7fe fc73 	bl	7678 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    8d92:	b120      	cbz	r0, 8d9e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x22a>
    8d94:	f44f 7142 	mov.w	r1, #776	; 0x308
    8d98:	e03f      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8d9a:	2001      	movs	r0, #1
    8d9c:	e7f4      	b.n	8d88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x214>
    8d9e:	4922      	ldr	r1, [pc, #136]	; (8e28 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b4>)
    8da0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8da2:	3910      	subs	r1, #16
    8da4:	38df      	subs	r0, #223	; 0xdf
    8da6:	60c8      	str	r0, [r1, #12]
    8da8:	f7fa fbdc 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8dac:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8dae:	7860      	ldrb	r0, [r4, #1]
    8db0:	b128      	cbz	r0, 8dbe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x24a>
    8db2:	f7fe fcf9 	bl	77a8 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    8db6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8dba:	f000 b8e7 	b.w	8f8c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x418>
    8dbe:	7366      	strb	r6, [r4, #13]
    8dc0:	f7fe fcec 	bl	779c <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    8dc4:	2800      	cmp	r0, #0
    8dc6:	d0f1      	beq.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8dc8:	f240 311b 	movw	r1, #795	; 0x31b
    8dcc:	e025      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8dce:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8dd2:	f003 bec5 	b.w	cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8dd6:	7805      	ldrb	r5, [r0, #0]
    8dd8:	2201      	movs	r2, #1
    8dda:	2100      	movs	r1, #0
    8ddc:	4668      	mov	r0, sp
    8dde:	f000 fb17 	bl	9410 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x89c>
    8de2:	b140      	cbz	r0, 8df6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x282>
    8de4:	4669      	mov	r1, sp
    8de6:	4628      	mov	r0, r5
    8de8:	f006 fbfc 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    8dec:	2800      	cmp	r0, #0
    8dee:	d1dd      	bne.n	8dac <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x238>
    8df0:	f640 217f 	movw	r1, #2687	; 0xa7f
    8df4:	e011      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8df6:	70e6      	strb	r6, [r4, #3]
    8df8:	f000 f818 	bl	8e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    8dfc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8dfe:	f000 fabd 	bl	937c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x808>
    8e02:	2800      	cmp	r0, #0
    8e04:	d1fa      	bne.n	8dfc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x288>
    8e06:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8e0a:	f006 ba8e 	b.w	f32a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    8e0e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8e12:	f000 b80b 	b.w	8e2c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2b8>
    8e16:	f240 313f 	movw	r1, #831	; 0x33f
    8e1a:	2035      	movs	r0, #53	; 0x35
    8e1c:	f7fb ff7c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e20:	f240 3143 	movw	r1, #835	; 0x343
    8e24:	e7f9      	b.n	8e1a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2a6>
    8e26:	0000      	.short	0x0000
    8e28:	200012e0 	.word	0x200012e0
    8e2c:	b510      	push	{r4, lr}
    8e2e:	4c0b      	ldr	r4, [pc, #44]	; (8e5c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e8>)
    8e30:	7820      	ldrb	r0, [r4, #0]
    8e32:	b130      	cbz	r0, 8e42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2ce>
    8e34:	f000 fc1c 	bl	9670 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xafc>
    8e38:	78e0      	ldrb	r0, [r4, #3]
    8e3a:	b158      	cbz	r0, 8e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    8e3c:	7f20      	ldrb	r0, [r4, #28]
    8e3e:	b128      	cbz	r0, 8e4c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2d8>
    8e40:	e008      	b.n	8e54 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2e0>
    8e42:	f240 21ba 	movw	r1, #698	; 0x2ba
    8e46:	2035      	movs	r0, #53	; 0x35
    8e48:	f7fb ff66 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e4c:	f7fe fcbe 	bl	77cc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    8e50:	f002 fb96 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e58:	f000 bc34 	b.w	96c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb50>
    8e5c:	200012e0 	.word	0x200012e0
    8e60:	b510      	push	{r4, lr}
    8e62:	4604      	mov	r4, r0
    8e64:	2901      	cmp	r1, #1
    8e66:	d102      	bne.n	8e6e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x2fa>
    8e68:	480a      	ldr	r0, [pc, #40]	; (8e94 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x320>)
    8e6a:	7800      	ldrb	r0, [r0, #0]
    8e6c:	b140      	cbz	r0, 8e80 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x30c>
    8e6e:	2004      	movs	r0, #4
    8e70:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8e74:	f003 fcc4 	bl	c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e7c:	f7fa ba90 	b.w	33a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8e80:	2200      	movs	r2, #0
    8e82:	2101      	movs	r1, #1
    8e84:	4620      	mov	r0, r4
    8e86:	f006 fbdd 	bl	f644 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    8e8a:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    8e8e:	1c40      	adds	r0, r0, #1
    8e90:	8020      	strh	r0, [r4, #0]
    8e92:	e7ef      	b.n	8e74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x300>
    8e94:	200012d0 	.word	0x200012d0
    8e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e9c:	4c39      	ldr	r4, [pc, #228]	; (8f84 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x410>)
    8e9e:	4682      	mov	sl, r0
    8ea0:	6926      	ldr	r6, [r4, #16]
    8ea2:	f003 fc79 	bl	c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8ea6:	4605      	mov	r5, r0
    8ea8:	69a0      	ldr	r0, [r4, #24]
    8eaa:	2201      	movs	r2, #1
    8eac:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    8eb0:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    8eb4:	3062      	adds	r0, #98	; 0x62
    8eb6:	2101      	movs	r1, #1
    8eb8:	7281      	strb	r1, [r0, #10]
    8eba:	69a0      	ldr	r0, [r4, #24]
    8ebc:	2100      	movs	r1, #0
    8ebe:	302c      	adds	r0, #44	; 0x2c
    8ec0:	f006 f991 	bl	f1e6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    8ec4:	2101      	movs	r1, #1
    8ec6:	2000      	movs	r0, #0
    8ec8:	f006 fbe8 	bl	f69c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    8ecc:	69a7      	ldr	r7, [r4, #24]
    8ece:	1971      	adds	r1, r6, r5
    8ed0:	4408      	add	r0, r1
    8ed2:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    8ed6:	f8d7 800c 	ldr.w	r8, [r7, #12]
    8eda:	f002 fb29 	bl	b530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    8ede:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    8ee2:	4288      	cmp	r0, r1
    8ee4:	d00a      	beq.n	8efc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x388>
    8ee6:	464a      	mov	r2, r9
    8ee8:	4641      	mov	r1, r8
    8eea:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    8eee:	f006 fd03 	bl	f8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    8ef2:	4540      	cmp	r0, r8
    8ef4:	d903      	bls.n	8efe <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x38a>
    8ef6:	f44f 61bf 	mov.w	r1, #1528	; 0x5f8
    8efa:	e022      	b.n	8f42 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3ce>
    8efc:	2000      	movs	r0, #0
    8efe:	4922      	ldr	r1, [pc, #136]	; (8f88 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x414>)
    8f00:	4607      	mov	r7, r0
    8f02:	6849      	ldr	r1, [r1, #4]
    8f04:	4288      	cmp	r0, r1
    8f06:	69a0      	ldr	r0, [r4, #24]
    8f08:	68c1      	ldr	r1, [r0, #12]
    8f0a:	d202      	bcs.n	8f12 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x39e>
    8f0c:	440f      	add	r7, r1
    8f0e:	6201      	str	r1, [r0, #32]
    8f10:	e008      	b.n	8f24 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3b0>
    8f12:	4638      	mov	r0, r7
    8f14:	f005 feb2 	bl	ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    8f18:	69a1      	ldr	r1, [r4, #24]
    8f1a:	68c9      	ldr	r1, [r1, #12]
    8f1c:	f005 feaa 	bl	ec74 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    8f20:	69a1      	ldr	r1, [r4, #24]
    8f22:	6208      	str	r0, [r1, #32]
    8f24:	69a0      	ldr	r0, [r4, #24]
    8f26:	68c1      	ldr	r1, [r0, #12]
    8f28:	2005      	movs	r0, #5
    8f2a:	f005 fead 	bl	ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    8f2e:	69a1      	ldr	r1, [r4, #24]
    8f30:	b280      	uxth	r0, r0
    8f32:	8388      	strh	r0, [r1, #28]
    8f34:	69a1      	ldr	r1, [r4, #24]
    8f36:	6a09      	ldr	r1, [r1, #32]
    8f38:	1a79      	subs	r1, r7, r1
    8f3a:	4288      	cmp	r0, r1
    8f3c:	d804      	bhi.n	8f48 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3d4>
    8f3e:	f640 21ee 	movw	r1, #2798	; 0xaee
    8f42:	2035      	movs	r0, #53	; 0x35
    8f44:	f7fb fee8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8f48:	2101      	movs	r1, #1
    8f4a:	4650      	mov	r0, sl
    8f4c:	f006 fba6 	bl	f69c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x124>
    8f50:	4428      	add	r0, r5
    8f52:	19c5      	adds	r5, r0, r7
    8f54:	2101      	movs	r1, #1
    8f56:	4650      	mov	r0, sl
    8f58:	f005 fdc2 	bl	eae0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8f5c:	4405      	add	r5, r0
    8f5e:	2001      	movs	r0, #1
    8f60:	f007 fc38 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8f64:	f64a 2113 	movw	r1, #43539	; 0xaa13
    8f68:	4408      	add	r0, r1
    8f6a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8f6e:	fbb0 f0f1 	udiv	r0, r0, r1
    8f72:	1a29      	subs	r1, r5, r0
    8f74:	4630      	mov	r0, r6
    8f76:	f7f9 fb01 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8f7a:	69a1      	ldr	r1, [r4, #24]
    8f7c:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f84:	200012e0 	.word	0x200012e0
    8f88:	200000fc 	.word	0x200000fc
    8f8c:	b510      	push	{r4, lr}
    8f8e:	4c06      	ldr	r4, [pc, #24]	; (8fa8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x434>)
    8f90:	7b20      	ldrb	r0, [r4, #12]
    8f92:	2800      	cmp	r0, #0
    8f94:	d006      	beq.n	8fa4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x430>
    8f96:	f003 fc33 	bl	c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8f9a:	f7fa fa01 	bl	33a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8f9e:	2000      	movs	r0, #0
    8fa0:	7320      	strb	r0, [r4, #12]
    8fa2:	7360      	strb	r0, [r4, #13]
    8fa4:	bd10      	pop	{r4, pc}
    8fa6:	0000      	.short	0x0000
    8fa8:	200012e0 	.word	0x200012e0
    8fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fb0:	4d11      	ldr	r5, [pc, #68]	; (8ff8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x484>)
    8fb2:	4616      	mov	r6, r2
    8fb4:	460f      	mov	r7, r1
    8fb6:	2400      	movs	r4, #0
    8fb8:	6068      	str	r0, [r5, #4]
    8fba:	f006 fb63 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    8fbe:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8ffc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x488>
    8fc2:	2100      	movs	r1, #0
    8fc4:	f81c 2001 	ldrb.w	r2, [ip, r1]
    8fc8:	4232      	tst	r2, r6
    8fca:	d007      	beq.n	8fdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x468>
    8fcc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    8fd0:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    8fd4:	1a1b      	subs	r3, r3, r0
    8fd6:	1c64      	adds	r4, r4, #1
    8fd8:	b2e4      	uxtb	r4, r4
    8fda:	6093      	str	r3, [r2, #8]
    8fdc:	1c49      	adds	r1, r1, #1
    8fde:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8fe2:	d0ef      	beq.n	8fc4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x450>
    8fe4:	f016 0f0e 	tst.w	r6, #14
    8fe8:	d004      	beq.n	8ff4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x480>
    8fea:	f640 11b8 	movw	r1, #2488	; 0x9b8
    8fee:	2035      	movs	r0, #53	; 0x35
    8ff0:	f7fb fe92 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8ff8:	200012e0 	.word	0x200012e0
    8ffc:	00010937 	.word	0x00010937
    9000:	b570      	push	{r4, r5, r6, lr}
    9002:	460d      	mov	r5, r1
    9004:	0004      	movs	r4, r0
    9006:	d00c      	beq.n	9022 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4ae>
    9008:	2001      	movs	r0, #1
    900a:	f006 faa6 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    900e:	b2c6      	uxtb	r6, r0
    9010:	200b      	movs	r0, #11
    9012:	f006 faa2 	bl	f55a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    9016:	b2c0      	uxtb	r0, r0
    9018:	4286      	cmp	r6, r0
    901a:	d005      	beq.n	9028 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4b4>
    901c:	f44f 711a 	mov.w	r1, #616	; 0x268
    9020:	e061      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    9022:	f240 2165 	movw	r1, #613	; 0x265
    9026:	e05e      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    9028:	2d09      	cmp	r5, #9
    902a:	d25f      	bcs.n	90ec <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x578>
    902c:	e8df f005 	tbb	[pc, r5]
    9030:	3d3d3505 	.word	0x3d3d3505
    9034:	4b445e39 	.word	0x4b445e39
    9038:	0059      	.short	0x0059
    903a:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    903e:	b348      	cbz	r0, 9094 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x520>
    9040:	4620      	mov	r0, r4
    9042:	f000 fd69 	bl	9b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    9046:	f006 fb1d 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    904a:	f200 1037 	addw	r0, r0, #311	; 0x137
    904e:	b285      	uxth	r5, r0
    9050:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9054:	2128      	movs	r1, #40	; 0x28
    9056:	f006 fab1 	bl	f5bc <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x44>
    905a:	182e      	adds	r6, r5, r0
    905c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    905e:	68e0      	ldr	r0, [r4, #12]
    9060:	4288      	cmp	r0, r1
    9062:	d200      	bcs.n	9066 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x4f2>
    9064:	4601      	mov	r1, r0
    9066:	4632      	mov	r2, r6
    9068:	4620      	mov	r0, r4
    906a:	f006 f845 	bl	f0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    906e:	4d21      	ldr	r5, [pc, #132]	; (90f4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x580>)
    9070:	4632      	mov	r2, r6
    9072:	6068      	str	r0, [r5, #4]
    9074:	4620      	mov	r0, r4
    9076:	68e1      	ldr	r1, [r4, #12]
    9078:	f006 f83e 	bl	f0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    907c:	60a8      	str	r0, [r5, #8]
    907e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9082:	f006 f89a 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    9086:	f5a0 7093 	sub.w	r0, r0, #294	; 0x126
    908a:	60e8      	str	r0, [r5, #12]
    908c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9090:	f7fa ba68 	b.w	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9094:	f240 216e 	movw	r1, #622	; 0x26e
    9098:	e025      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    909a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    909e:	f006 bb83 	b.w	f7a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    90a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90a6:	f003 bd5b 	b.w	cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    90aa:	4620      	mov	r0, r4
    90ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90b0:	2201      	movs	r2, #1
    90b2:	2100      	movs	r1, #0
    90b4:	f006 bac6 	b.w	f644 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xcc>
    90b8:	2001      	movs	r0, #1
    90ba:	f7f9 f933 	bl	2324 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    90be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90c2:	f005 bb97 	b.w	e7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    90c6:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    90ca:	2804      	cmp	r0, #4
    90cc:	d002      	beq.n	90d4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x560>
    90ce:	f240 21a2 	movw	r1, #674	; 0x2a2
    90d2:	e008      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    90d4:	4620      	mov	r0, r4
    90d6:	f006 fa9d 	bl	f614 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x9c>
    90da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    90de:	f002 ba4f 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    90e2:	f240 21ad 	movw	r1, #685	; 0x2ad
    90e6:	2035      	movs	r0, #53	; 0x35
    90e8:	f7fb fe16 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    90ec:	f240 21b1 	movw	r1, #689	; 0x2b1
    90f0:	e7f9      	b.n	90e6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x572>
    90f2:	0000      	.short	0x0000
    90f4:	200012d0 	.word	0x200012d0
    90f8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    90fc:	4605      	mov	r5, r0
    90fe:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9102:	2600      	movs	r6, #0
    9104:	f8d1 b020 	ldr.w	fp, [r1, #32]
    9108:	469a      	mov	sl, r3
    910a:	460c      	mov	r4, r1
    910c:	280d      	cmp	r0, #13
    910e:	d020      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9110:	280c      	cmp	r0, #12
    9112:	d01e      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9114:	2824      	cmp	r0, #36	; 0x24
    9116:	d01c      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9118:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    911c:	2824      	cmp	r0, #36	; 0x24
    911e:	d018      	beq.n	9152 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5de>
    9120:	2000      	movs	r0, #0
    9122:	4680      	mov	r8, r0
    9124:	f006 faa3 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    9128:	4681      	mov	r9, r0
    912a:	f1ba 0f00 	cmp.w	sl, #0
    912e:	d003      	beq.n	9138 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c4>
    9130:	2101      	movs	r1, #1
    9132:	4620      	mov	r0, r4
    9134:	f006 fadf 	bl	f6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9138:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    913c:	2701      	movs	r7, #1
    913e:	b150      	cbz	r0, 9156 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5e2>
    9140:	2801      	cmp	r0, #1
    9142:	d01b      	beq.n	917c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x608>
    9144:	2802      	cmp	r0, #2
    9146:	d011      	beq.n	916c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5f8>
    9148:	2803      	cmp	r0, #3
    914a:	d017      	beq.n	917c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x608>
    914c:	f640 113b 	movw	r1, #2363	; 0x93b
    9150:	e07b      	b.n	924a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d6>
    9152:	2001      	movs	r0, #1
    9154:	e7e5      	b.n	9122 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5ae>
    9156:	9802      	ldr	r0, [sp, #8]
    9158:	b128      	cbz	r0, 9166 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5f2>
    915a:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    915e:	4620      	mov	r0, r4
    9160:	f006 fa2e 	bl	f5c0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x48>
    9164:	e00b      	b.n	917e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x60a>
    9166:	f640 1101 	movw	r1, #2305	; 0x901
    916a:	e06e      	b.n	924a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d6>
    916c:	4838      	ldr	r0, [pc, #224]	; (9250 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6dc>)
    916e:	6801      	ldr	r1, [r0, #0]
    9170:	2003      	movs	r0, #3
    9172:	eb01 060b 	add.w	r6, r1, fp
    9176:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    917a:	e000      	b.n	917e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x60a>
    917c:	68e6      	ldr	r6, [r4, #12]
    917e:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    9182:	4631      	mov	r1, r6
    9184:	f7f9 f9fa 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9188:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    918c:	60e8      	str	r0, [r5, #12]
    918e:	2000      	movs	r0, #0
    9190:	7028      	strb	r0, [r5, #0]
    9192:	f8a5 9008 	strh.w	r9, [r5, #8]
    9196:	4620      	mov	r0, r4
    9198:	f000 fc0c 	bl	99b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    919c:	f1a8 0101 	sub.w	r1, r8, #1
    91a0:	4208      	tst	r0, r1
    91a2:	d101      	bne.n	91a8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x634>
    91a4:	72af      	strb	r7, [r5, #10]
    91a6:	e005      	b.n	91b4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x640>
    91a8:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    91ac:	2801      	cmp	r0, #1
    91ae:	d017      	beq.n	91e0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x66c>
    91b0:	2003      	movs	r0, #3
    91b2:	72a8      	strb	r0, [r5, #10]
    91b4:	46b9      	mov	r9, r7
    91b6:	72ef      	strb	r7, [r5, #11]
    91b8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    91bc:	f005 fffd 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    91c0:	6068      	str	r0, [r5, #4]
    91c2:	f1ba 0f00 	cmp.w	sl, #0
    91c6:	d03c      	beq.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    91c8:	4631      	mov	r1, r6
    91ca:	4628      	mov	r0, r5
    91cc:	f005 fce7 	bl	eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    91d0:	b287      	uxth	r7, r0
    91d2:	4620      	mov	r0, r4
    91d4:	f000 fbee 	bl	99b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    91d8:	f1b8 0f00 	cmp.w	r8, #0
    91dc:	d002      	beq.n	91e4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x670>
    91de:	e014      	b.n	920a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x696>
    91e0:	2002      	movs	r0, #2
    91e2:	e7e6      	b.n	91b2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x63e>
    91e4:	42b8      	cmp	r0, r7
    91e6:	d810      	bhi.n	920a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x696>
    91e8:	4607      	mov	r7, r0
    91ea:	f885 900a 	strb.w	r9, [r5, #10]
    91ee:	fb06 f107 	mul.w	r1, r6, r7
    91f2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    91f6:	f7f9 f9c1 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    91fa:	60e8      	str	r0, [r5, #12]
    91fc:	b31e      	cbz	r6, 9246 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6d2>
    91fe:	4631      	mov	r1, r6
    9200:	4628      	mov	r0, r5
    9202:	f005 fccc 	bl	eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9206:	4438      	add	r0, r7
    9208:	b287      	uxth	r7, r0
    920a:	4639      	mov	r1, r7
    920c:	4620      	mov	r0, r4
    920e:	f006 fa72 	bl	f6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9212:	68e8      	ldr	r0, [r5, #12]
    9214:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    9218:	6f20      	ldr	r0, [r4, #112]	; 0x70
    921a:	2800      	cmp	r0, #0
    921c:	d011      	beq.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    921e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    9222:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    9226:	1a40      	subs	r0, r0, r1
    9228:	b202      	sxth	r2, r0
    922a:	2a00      	cmp	r2, #0
    922c:	dd09      	ble.n	9242 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6ce>
    922e:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    9232:	4402      	add	r2, r0
    9234:	1e52      	subs	r2, r2, #1
    9236:	fb92 f2f0 	sdiv	r2, r2, r0
    923a:	b292      	uxth	r2, r2
    923c:	fb02 1000 	mla	r0, r2, r0, r1
    9240:	86e0      	strh	r0, [r4, #54]	; 0x36
    9242:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9246:	f640 1176 	movw	r1, #2422	; 0x976
    924a:	2035      	movs	r0, #53	; 0x35
    924c:	f7fb fd64 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9250:	200000fc 	.word	0x200000fc
    9254:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    9258:	460d      	mov	r5, r1
    925a:	4607      	mov	r7, r0
    925c:	f000 fa58 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9260:	4c1d      	ldr	r4, [pc, #116]	; (92d8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x764>)
    9262:	6861      	ldr	r1, [r4, #4]
    9264:	f7f9 f98a 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9268:	4606      	mov	r6, r0
    926a:	4601      	mov	r1, r0
    926c:	4638      	mov	r0, r7
    926e:	f7f9 f9b7 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9272:	4607      	mov	r7, r0
    9274:	f006 fa0c 	bl	f690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    9278:	4287      	cmp	r7, r0
    927a:	da10      	bge.n	929e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x72a>
    927c:	6960      	ldr	r0, [r4, #20]
    927e:	f000 fa47 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9282:	4631      	mov	r1, r6
    9284:	f7f9 f9ac 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9288:	6861      	ldr	r1, [r4, #4]
    928a:	fbb0 f0f1 	udiv	r0, r0, r1
    928e:	6028      	str	r0, [r5, #0]
    9290:	6861      	ldr	r1, [r4, #4]
    9292:	b004      	add	sp, #16
    9294:	4630      	mov	r0, r6
    9296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    929a:	f7f9 b96f 	b.w	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    929e:	2000      	movs	r0, #0
    92a0:	f88d 0000 	strb.w	r0, [sp]
    92a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    92a6:	9001      	str	r0, [sp, #4]
    92a8:	f006 f9e1 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    92ac:	f8ad 0008 	strh.w	r0, [sp, #8]
    92b0:	2001      	movs	r0, #1
    92b2:	f88d 000b 	strb.w	r0, [sp, #11]
    92b6:	6960      	ldr	r0, [r4, #20]
    92b8:	f000 fa2a 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    92bc:	9003      	str	r0, [sp, #12]
    92be:	f000 f9c1 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    92c2:	f88d 000a 	strb.w	r0, [sp, #10]
    92c6:	4668      	mov	r0, sp
    92c8:	6861      	ldr	r1, [r4, #4]
    92ca:	f005 fc68 	bl	eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    92ce:	6028      	str	r0, [r5, #0]
    92d0:	9803      	ldr	r0, [sp, #12]
    92d2:	b004      	add	sp, #16
    92d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92d8:	200012e0 	.word	0x200012e0
    92dc:	b510      	push	{r4, lr}
    92de:	2400      	movs	r4, #0
    92e0:	f006 f9d0 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    92e4:	4a06      	ldr	r2, [pc, #24]	; (9300 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x78c>)
    92e6:	2100      	movs	r1, #0
    92e8:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    92ec:	4404      	add	r4, r0
    92ee:	689b      	ldr	r3, [r3, #8]
    92f0:	1c49      	adds	r1, r1, #1
    92f2:	441c      	add	r4, r3
    92f4:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    92f8:	d0f6      	beq.n	92e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x774>
    92fa:	4620      	mov	r0, r4
    92fc:	bd10      	pop	{r4, pc}
    92fe:	0000      	.short	0x0000
    9300:	200012e0 	.word	0x200012e0
    9304:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9306:	4c1b      	ldr	r4, [pc, #108]	; (9374 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x800>)
    9308:	4606      	mov	r6, r0
    930a:	460d      	mov	r5, r1
    930c:	78a0      	ldrb	r0, [r4, #2]
    930e:	b360      	cbz	r0, 936a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f6>
    9310:	4919      	ldr	r1, [pc, #100]	; (9378 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x804>)
    9312:	6a20      	ldr	r0, [r4, #32]
    9314:	4288      	cmp	r0, r1
    9316:	d828      	bhi.n	936a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f6>
    9318:	2000      	movs	r0, #0
    931a:	f88d 0000 	strb.w	r0, [sp]
    931e:	9501      	str	r5, [sp, #4]
    9320:	f006 f9a5 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    9324:	f8ad 0008 	strh.w	r0, [sp, #8]
    9328:	2001      	movs	r0, #1
    932a:	f88d 000b 	strb.w	r0, [sp, #11]
    932e:	f006 f9af 	bl	f690 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x118>
    9332:	4601      	mov	r1, r0
    9334:	4630      	mov	r0, r6
    9336:	f7f9 f921 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    933a:	9003      	str	r0, [sp, #12]
    933c:	2003      	movs	r0, #3
    933e:	f88d 000a 	strb.w	r0, [sp, #10]
    9342:	4668      	mov	r0, sp
    9344:	f7f9 fc58 	bl	2bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    9348:	4606      	mov	r6, r0
    934a:	4629      	mov	r1, r5
    934c:	9803      	ldr	r0, [sp, #12]
    934e:	f7f9 f915 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9352:	4605      	mov	r5, r0
    9354:	6a21      	ldr	r1, [r4, #32]
    9356:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9358:	f7f9 f910 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    935c:	4601      	mov	r1, r0
    935e:	b13e      	cbz	r6, 9370 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7fc>
    9360:	4628      	mov	r0, r5
    9362:	f7f9 f93d 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9366:	2800      	cmp	r0, #0
    9368:	db02      	blt.n	9370 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7fc>
    936a:	2001      	movs	r0, #1
    936c:	b004      	add	sp, #16
    936e:	bd70      	pop	{r4, r5, r6, pc}
    9370:	2000      	movs	r0, #0
    9372:	e7fb      	b.n	936c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7f8>
    9374:	200012e0 	.word	0x200012e0
    9378:	07a12000 	.word	0x07a12000
    937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9380:	f003 ff4b 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9384:	4c21      	ldr	r4, [pc, #132]	; (940c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x898>)
    9386:	4607      	mov	r7, r0
    9388:	6920      	ldr	r0, [r4, #16]
    938a:	f000 f95b 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    938e:	4606      	mov	r6, r0
    9390:	f7f9 f89a 	bl	24c8 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    9394:	4605      	mov	r5, r0
    9396:	2864      	cmp	r0, #100	; 0x64
    9398:	d326      	bcc.n	93e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x874>
    939a:	1c68      	adds	r0, r5, #1
    939c:	d027      	beq.n	93ee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x87a>
    939e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    93a2:	1948      	adds	r0, r1, r5
    93a4:	4282      	cmp	r2, r0
    93a6:	d800      	bhi.n	93aa <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x836>
    93a8:	1a55      	subs	r5, r2, r1
    93aa:	f06f 0138 	mvn.w	r1, #56	; 0x38
    93ae:	4638      	mov	r0, r7
    93b0:	f7f9 f8e4 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    93b4:	4629      	mov	r1, r5
    93b6:	f000 f9bd 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    93ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93bc:	4408      	add	r0, r1
    93be:	6a61      	ldr	r1, [r4, #36]	; 0x24
    93c0:	1a45      	subs	r5, r0, r1
    93c2:	f241 3088 	movw	r0, #5000	; 0x1388
    93c6:	4285      	cmp	r5, r0
    93c8:	d900      	bls.n	93cc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x858>
    93ca:	4605      	mov	r5, r0
    93cc:	f003 ff25 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    93d0:	4601      	mov	r1, r0
    93d2:	4638      	mov	r0, r7
    93d4:	f7f9 f904 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    93d8:	309b      	adds	r0, #155	; 0x9b
    93da:	4285      	cmp	r5, r0
    93dc:	d304      	bcc.n	93e8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x874>
    93de:	4631      	mov	r1, r6
    93e0:	4628      	mov	r0, r5
    93e2:	f7f8 ffaf 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    93e6:	b120      	cbz	r0, 93f2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x87e>
    93e8:	2000      	movs	r0, #0
    93ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    93f0:	e7e5      	b.n	93be <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x84a>
    93f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    93f4:	4905      	ldr	r1, [pc, #20]	; (940c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x898>)
    93f6:	4428      	add	r0, r5
    93f8:	3910      	subs	r1, #16
    93fa:	6260      	str	r0, [r4, #36]	; 0x24
    93fc:	68c8      	ldr	r0, [r1, #12]
    93fe:	4428      	add	r0, r5
    9400:	60c8      	str	r0, [r1, #12]
    9402:	f7fa f8af 	bl	3564 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    9406:	2001      	movs	r0, #1
    9408:	e7ef      	b.n	93ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x876>
    940a:	0000      	.short	0x0000
    940c:	200012e0 	.word	0x200012e0
    9410:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9414:	b08c      	sub	sp, #48	; 0x30
    9416:	4616      	mov	r6, r2
    9418:	4607      	mov	r7, r0
    941a:	f003 fefe 	bl	d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    941e:	4c87      	ldr	r4, [pc, #540]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9420:	9002      	str	r0, [sp, #8]
    9422:	2500      	movs	r5, #0
    9424:	f8d4 a008 	ldr.w	sl, [r4, #8]
    9428:	f006 f92c 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    942c:	68a1      	ldr	r1, [r4, #8]
    942e:	4408      	add	r0, r1
    9430:	6861      	ldr	r1, [r4, #4]
    9432:	4288      	cmp	r0, r1
    9434:	d101      	bne.n	943a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x8c6>
    9436:	2001      	movs	r0, #1
    9438:	e000      	b.n	943c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x8c8>
    943a:	2000      	movs	r0, #0
    943c:	4683      	mov	fp, r0
    943e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9440:	ea06 090b 	and.w	r9, r6, fp
    9444:	2800      	cmp	r0, #0
    9446:	d065      	beq.n	9514 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9a0>
    9448:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    944c:	9802      	ldr	r0, [sp, #8]
    944e:	f7f9 f895 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9452:	9000      	str	r0, [sp, #0]
    9454:	f002 f872 	bl	b53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    9458:	4680      	mov	r8, r0
    945a:	4878      	ldr	r0, [pc, #480]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    945c:	7800      	ldrb	r0, [r0, #0]
    945e:	4e77      	ldr	r6, [pc, #476]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9460:	362c      	adds	r6, #44	; 0x2c
    9462:	2805      	cmp	r0, #5
    9464:	d12e      	bne.n	94c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x950>
    9466:	4875      	ldr	r0, [pc, #468]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9468:	6980      	ldr	r0, [r0, #24]
    946a:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    946e:	f002 f845 	bl	b4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    9472:	4604      	mov	r4, r0
    9474:	4540      	cmp	r0, r8
    9476:	d009      	beq.n	948c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x918>
    9478:	4870      	ldr	r0, [pc, #448]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    947a:	4621      	mov	r1, r4
    947c:	6980      	ldr	r0, [r0, #24]
    947e:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9482:	f001 ffff 	bl	b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9486:	2000      	movs	r0, #0
    9488:	6170      	str	r0, [r6, #20]
    948a:	e00c      	b.n	94a6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x932>
    948c:	496b      	ldr	r1, [pc, #428]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    948e:	6988      	ldr	r0, [r1, #24]
    9490:	f500 7084 	add.w	r0, r0, #264	; 0x108
    9494:	6170      	str	r0, [r6, #20]
    9496:	698a      	ldr	r2, [r1, #24]
    9498:	6b08      	ldr	r0, [r1, #48]	; 0x30
    949a:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    949e:	4290      	cmp	r0, r2
    94a0:	d200      	bcs.n	94a4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x930>
    94a2:	4610      	mov	r0, r2
    94a4:	6308      	str	r0, [r1, #48]	; 0x30
    94a6:	4865      	ldr	r0, [pc, #404]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    94a8:	6980      	ldr	r0, [r0, #24]
    94aa:	b130      	cbz	r0, 94ba <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x946>
    94ac:	b144      	cbz	r4, 94c0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x94c>
    94ae:	e9d4 1200 	ldrd	r1, r2, [r4]
    94b2:	4411      	add	r1, r2
    94b4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    94b8:	e004      	b.n	94c4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x950>
    94ba:	f240 51c7 	movw	r1, #1479	; 0x5c7
    94be:	e017      	b.n	94f0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x97c>
    94c0:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    94c4:	4641      	mov	r1, r8
    94c6:	4630      	mov	r0, r6
    94c8:	f001 ffdc 	bl	b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    94cc:	ea5f 0008 	movs.w	r0, r8
    94d0:	f8df 8168 	ldr.w	r8, [pc, #360]	; 963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>
    94d4:	9a00      	ldr	r2, [sp, #0]
    94d6:	f8d8 4004 	ldr.w	r4, [r8, #4]
    94da:	d00c      	beq.n	94f6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x982>
    94dc:	e9d0 1000 	ldrd	r1, r0, [r0]
    94e0:	4408      	add	r0, r1
    94e2:	4621      	mov	r1, r4
    94e4:	f006 fa08 	bl	f8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    94e8:	42a0      	cmp	r0, r4
    94ea:	d904      	bls.n	94f6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x982>
    94ec:	f240 51e5 	movw	r1, #1509	; 0x5e5
    94f0:	2035      	movs	r0, #53	; 0x35
    94f2:	f7fb fc11 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    94f6:	4601      	mov	r1, r0
    94f8:	9800      	ldr	r0, [sp, #0]
    94fa:	f7f9 f83f 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    94fe:	4606      	mov	r6, r0
    9500:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9504:	4644      	mov	r4, r8
    9506:	4241      	negs	r1, r0
    9508:	4630      	mov	r0, r6
    950a:	f7f9 f837 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    950e:	62e0      	str	r0, [r4, #44]	; 0x2c
    9510:	2001      	movs	r0, #1
    9512:	e042      	b.n	959a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa26>
    9514:	f1b9 0f00 	cmp.w	r9, #0
    9518:	d018      	beq.n	954c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9d8>
    951a:	2001      	movs	r0, #1
    951c:	f006 f834 	bl	f588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    9520:	4604      	mov	r4, r0
    9522:	2001      	movs	r0, #1
    9524:	f007 f956 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    9528:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    952c:	4401      	add	r1, r0
    952e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9532:	fbb1 f0f0 	udiv	r0, r1, r0
    9536:	1821      	adds	r1, r4, r0
    9538:	31f0      	adds	r1, #240	; 0xf0
    953a:	9802      	ldr	r0, [sp, #8]
    953c:	f7ff fee2 	bl	9304 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x790>
    9540:	b908      	cbnz	r0, 9546 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9d2>
    9542:	f04f 0a00 	mov.w	sl, #0
    9546:	9e02      	ldr	r6, [sp, #8]
    9548:	9508      	str	r5, [sp, #32]
    954a:	e027      	b.n	959c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa28>
    954c:	b12e      	cbz	r6, 955a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x9e6>
    954e:	a908      	add	r1, sp, #32
    9550:	9802      	ldr	r0, [sp, #8]
    9552:	f7ff fe7f 	bl	9254 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x6e0>
    9556:	4606      	mov	r6, r0
    9558:	e020      	b.n	959c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa28>
    955a:	9802      	ldr	r0, [sp, #8]
    955c:	f000 f8d8 	bl	9710 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb9c>
    9560:	4c36      	ldr	r4, [pc, #216]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    9562:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    9566:	f7f9 f809 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    956a:	4606      	mov	r6, r0
    956c:	6920      	ldr	r0, [r4, #16]
    956e:	f000 f8c3 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    9572:	6861      	ldr	r1, [r4, #4]
    9574:	4348      	muls	r0, r1
    9576:	78a1      	ldrb	r1, [r4, #2]
    9578:	b131      	cbz	r1, 9588 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa14>
    957a:	6a21      	ldr	r1, [r4, #32]
    957c:	4281      	cmp	r1, r0
    957e:	d302      	bcc.n	9586 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa12>
    9580:	1a09      	subs	r1, r1, r0
    9582:	6221      	str	r1, [r4, #32]
    9584:	e000      	b.n	9588 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa14>
    9586:	6225      	str	r5, [r4, #32]
    9588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    958a:	4601      	mov	r1, r0
    958c:	4610      	mov	r0, r2
    958e:	f7f8 fff5 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9592:	62e0      	str	r0, [r4, #44]	; 0x2c
    9594:	4630      	mov	r0, r6
    9596:	f000 f8af 	bl	96f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb84>
    959a:	9008      	str	r0, [sp, #32]
    959c:	2001      	movs	r0, #1
    959e:	f005 fff3 	bl	f588 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10>
    95a2:	4604      	mov	r4, r0
    95a4:	2001      	movs	r0, #1
    95a6:	f007 f915 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    95aa:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    95ae:	4401      	add	r1, r0
    95b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    95b4:	fbb1 f0f0 	udiv	r0, r1, r0
    95b8:	4404      	add	r4, r0
    95ba:	4651      	mov	r1, sl
    95bc:	4630      	mov	r0, r6
    95be:	34f0      	adds	r4, #240	; 0xf0
    95c0:	f000 f8b8 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    95c4:	491d      	ldr	r1, [pc, #116]	; (963c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac8>)
    95c6:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    95ca:	6892      	ldr	r2, [r2, #8]
    95cc:	4282      	cmp	r2, r0
    95ce:	d800      	bhi.n	95d2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa5e>
    95d0:	4610      	mov	r0, r2
    95d2:	6288      	str	r0, [r1, #40]	; 0x28
    95d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    95d6:	b102      	cbz	r2, 95da <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa66>
    95d8:	610e      	str	r6, [r1, #16]
    95da:	4688      	mov	r8, r1
    95dc:	614e      	str	r6, [r1, #20]
    95de:	f1bb 0f00 	cmp.w	fp, #0
    95e2:	d002      	beq.n	95ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa76>
    95e4:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    95e8:	e001      	b.n	95ee <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xa7a>
    95ea:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    95ee:	f04f 0a01 	mov.w	sl, #1
    95f2:	f887 a00b 	strb.w	sl, [r7, #11]
    95f6:	f006 f83a 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    95fa:	8138      	strh	r0, [r7, #8]
    95fc:	4630      	mov	r0, r6
    95fe:	f000 f821 	bl	9644 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xad0>
    9602:	72b8      	strb	r0, [r7, #10]
    9604:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    9608:	6078      	str	r0, [r7, #4]
    960a:	f1b9 0f00 	cmp.w	r9, #0
    960e:	d008      	beq.n	9622 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaae>
    9610:	f887 a000 	strb.w	sl, [r7]
    9614:	490a      	ldr	r1, [pc, #40]	; (9640 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xacc>)
    9616:	9802      	ldr	r0, [sp, #8]
    9618:	f000 f88c 	bl	9734 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbc0>
    961c:	1b00      	subs	r0, r0, r4
    961e:	60f8      	str	r0, [r7, #12]
    9620:	e001      	b.n	9626 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xab2>
    9622:	703d      	strb	r5, [r7, #0]
    9624:	60fe      	str	r6, [r7, #12]
    9626:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    962a:	42a0      	cmp	r0, r4
    962c:	d303      	bcc.n	9636 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xac2>
    962e:	2001      	movs	r0, #1
    9630:	b00f      	add	sp, #60	; 0x3c
    9632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9636:	2000      	movs	r0, #0
    9638:	e7fa      	b.n	9630 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xabc>
    963a:	0000      	.short	0x0000
    963c:	200012e0 	.word	0x200012e0
    9640:	07a12000 	.word	0x07a12000
    9644:	4a09      	ldr	r2, [pc, #36]	; (966c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf8>)
    9646:	b510      	push	{r4, lr}
    9648:	7811      	ldrb	r1, [r2, #0]
    964a:	2904      	cmp	r1, #4
    964c:	d10c      	bne.n	9668 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf4>
    964e:	6851      	ldr	r1, [r2, #4]
    9650:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9652:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    9656:	004c      	lsls	r4, r1, #1
    9658:	4601      	mov	r1, r0
    965a:	4610      	mov	r0, r2
    965c:	f7f8 ffc0 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9660:	42a0      	cmp	r0, r4
    9662:	d201      	bcs.n	9668 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xaf4>
    9664:	2003      	movs	r0, #3
    9666:	bd10      	pop	{r4, pc}
    9668:	2002      	movs	r0, #2
    966a:	bd10      	pop	{r4, pc}
    966c:	200012e0 	.word	0x200012e0
    9670:	b570      	push	{r4, r5, r6, lr}
    9672:	4d13      	ldr	r5, [pc, #76]	; (96c0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb4c>)
    9674:	7f28      	ldrb	r0, [r5, #28]
    9676:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    967a:	2800      	cmp	r0, #0
    967c:	7828      	ldrb	r0, [r5, #0]
    967e:	d00f      	beq.n	96a0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb2c>
    9680:	2805      	cmp	r0, #5
    9682:	d004      	beq.n	968e <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb1a>
    9684:	f44f 7166 	mov.w	r1, #920	; 0x398
    9688:	2035      	movs	r0, #53	; 0x35
    968a:	f7fb fb45 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    968e:	4620      	mov	r0, r4
    9690:	f005 ff75 	bl	f57e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    9694:	b178      	cbz	r0, 96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    9696:	4620      	mov	r0, r4
    9698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    969c:	f001 bed0 	b.w	b440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    96a0:	2805      	cmp	r0, #5
    96a2:	d108      	bne.n	96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    96a4:	4620      	mov	r0, r4
    96a6:	f005 ff6a 	bl	f57e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6>
    96aa:	b920      	cbnz	r0, 96b6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb42>
    96ac:	69a8      	ldr	r0, [r5, #24]
    96ae:	f500 7084 	add.w	r0, r0, #264	; 0x108
    96b2:	f001 ff07 	bl	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96b6:	4620      	mov	r0, r4
    96b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    96bc:	f001 bf02 	b.w	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    96c0:	200012e0 	.word	0x200012e0
    96c4:	b510      	push	{r4, lr}
    96c6:	f7fd ff4b 	bl	7560 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    96ca:	490a      	ldr	r1, [pc, #40]	; (96f4 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb80>)
    96cc:	2000      	movs	r0, #0
    96ce:	70c8      	strb	r0, [r1, #3]
    96d0:	7708      	strb	r0, [r1, #28]
    96d2:	6188      	str	r0, [r1, #24]
    96d4:	7008      	strb	r0, [r1, #0]
    96d6:	f7fd fe95 	bl	7404 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    96da:	4604      	mov	r4, r0
    96dc:	7800      	ldrb	r0, [r0, #0]
    96de:	f7f9 fd09 	bl	30f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    96e2:	b110      	cbz	r0, 96ea <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb76>
    96e4:	2020      	movs	r0, #32
    96e6:	7020      	strb	r0, [r4, #0]
    96e8:	bd10      	pop	{r4, pc}
    96ea:	f240 5131 	movw	r1, #1329	; 0x531
    96ee:	2035      	movs	r0, #53	; 0x35
    96f0:	f7fb fb12 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    96f4:	200012e0 	.word	0x200012e0
    96f8:	b510      	push	{r4, lr}
    96fa:	4c04      	ldr	r4, [pc, #16]	; (970c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xb98>)
    96fc:	4601      	mov	r1, r0
    96fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9700:	f7f8 ff6e 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9704:	6861      	ldr	r1, [r4, #4]
    9706:	fbb0 f0f1 	udiv	r0, r0, r1
    970a:	bd10      	pop	{r4, pc}
    970c:	200012e0 	.word	0x200012e0
    9710:	b510      	push	{r4, lr}
    9712:	4c07      	ldr	r4, [pc, #28]	; (9730 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbbc>)
    9714:	4601      	mov	r1, r0
    9716:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9718:	f7f8 ff62 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    971c:	6861      	ldr	r1, [r4, #4]
    971e:	fbb0 f2f1 	udiv	r2, r0, r1
    9722:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9728:	4351      	muls	r1, r2
    972a:	f7f8 bf27 	b.w	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    972e:	0000      	.short	0x0000
    9730:	200012e0 	.word	0x200012e0
    9734:	b570      	push	{r4, r5, r6, lr}
    9736:	4605      	mov	r5, r0
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbfc>)
    973a:	460c      	mov	r4, r1
    973c:	7881      	ldrb	r1, [r0, #2]
    973e:	b1a9      	cbz	r1, 976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9740:	4a0c      	ldr	r2, [pc, #48]	; (9774 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xc00>)
    9742:	6a01      	ldr	r1, [r0, #32]
    9744:	4291      	cmp	r1, r2
    9746:	d211      	bcs.n	976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9748:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    974a:	f7f8 ff17 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    974e:	4606      	mov	r6, r0
    9750:	4621      	mov	r1, r4
    9752:	4628      	mov	r0, r5
    9754:	f7f8 ff12 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9758:	4601      	mov	r1, r0
    975a:	4630      	mov	r0, r6
    975c:	f7f8 ff40 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9760:	2800      	cmp	r0, #0
    9762:	dd03      	ble.n	976c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf8>
    9764:	1a20      	subs	r0, r4, r0
    9766:	d500      	bpl.n	976a <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0xbf6>
    9768:	2000      	movs	r0, #0
    976a:	bd70      	pop	{r4, r5, r6, pc}
    976c:	4620      	mov	r0, r4
    976e:	bd70      	pop	{r4, r5, r6, pc}
    9770:	200012e0 	.word	0x200012e0
    9774:	07a12000 	.word	0x07a12000

00009778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    9778:	4806      	ldr	r0, [pc, #24]	; (9794 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    977a:	4905      	ldr	r1, [pc, #20]	; (9790 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    977c:	6501      	str	r1, [r0, #80]	; 0x50
    977e:	4906      	ldr	r1, [pc, #24]	; (9798 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    9780:	6541      	str	r1, [r0, #84]	; 0x54
    9782:	4807      	ldr	r0, [pc, #28]	; (97a0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    9784:	4905      	ldr	r1, [pc, #20]	; (979c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    9786:	6501      	str	r1, [r0, #80]	; 0x50
    9788:	4906      	ldr	r1, [pc, #24]	; (97a4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    978a:	6541      	str	r1, [r0, #84]	; 0x54
    978c:	4770      	bx	lr
    978e:	0000      	.short	0x0000
    9790:	0000a8d5 	.word	0x0000a8d5
    9794:	20000114 	.word	0x20000114
    9798:	0000a9a1 	.word	0x0000a9a1
    979c:	0000afd1 	.word	0x0000afd1
    97a0:	20000178 	.word	0x20000178
    97a4:	0000b001 	.word	0x0000b001

000097a8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    97a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    97aa:	460d      	mov	r5, r1
    97ac:	4607      	mov	r7, r0
    97ae:	2100      	movs	r1, #0
    97b0:	f004 ff45 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    97b4:	1e04      	subs	r4, r0, #0
    97b6:	d051      	beq.n	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    97b8:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    97bc:	2800      	cmp	r0, #0
    97be:	d04d      	beq.n	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    97c0:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    97c4:	f88d 0000 	strb.w	r0, [sp]
    97c8:	9800      	ldr	r0, [sp, #0]
    97ca:	9000      	str	r0, [sp, #0]
    97cc:	f89d 0000 	ldrb.w	r0, [sp]
    97d0:	2600      	movs	r6, #0
    97d2:	b158      	cbz	r0, 97ec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    97d4:	706e      	strb	r6, [r5, #1]
    97d6:	2009      	movs	r0, #9
    97d8:	7028      	strb	r0, [r5, #0]
    97da:	220a      	movs	r2, #10
    97dc:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    97e0:	1d28      	adds	r0, r5, #4
    97e2:	f003 fe8f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    97e6:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    97ea:	e0e1      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    97ec:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    97f0:	280e      	cmp	r0, #14
    97f2:	d01d      	beq.n	9830 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    97f4:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    97f8:	280d      	cmp	r0, #13
    97fa:	d027      	beq.n	984c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    97fc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    9800:	f88d 0000 	strb.w	r0, [sp]
    9804:	9800      	ldr	r0, [sp, #0]
    9806:	9000      	str	r0, [sp, #0]
    9808:	f89d 0000 	ldrb.w	r0, [sp]
    980c:	b3b0      	cbz	r0, 987c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    980e:	706e      	strb	r6, [r5, #1]
    9810:	2008      	movs	r0, #8
    9812:	7028      	strb	r0, [r5, #0]
    9814:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    9818:	6068      	str	r0, [r5, #4]
    981a:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    981e:	60a8      	str	r0, [r5, #8]
    9820:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    9824:	60e8      	str	r0, [r5, #12]
    9826:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    982a:	f804 6c02 	strb.w	r6, [r4, #-2]
    982e:	e0bf      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9830:	8820      	ldrh	r0, [r4, #0]
    9832:	f7fb fe6f 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9836:	4607      	mov	r7, r0
    9838:	f004 fdd1 	bl	e3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    983c:	b968      	cbnz	r0, 985a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    983e:	706e      	strb	r6, [r5, #1]
    9840:	200e      	movs	r0, #14
    9842:	7028      	strb	r0, [r5, #0]
    9844:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9848:	6068      	str	r0, [r5, #4]
    984a:	e011      	b.n	9870 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    984c:	8820      	ldrh	r0, [r4, #0]
    984e:	f7fb fe61 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9852:	4607      	mov	r7, r0
    9854:	f004 fdc3 	bl	e3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9858:	b108      	cbz	r0, 985e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    985a:	2000      	movs	r0, #0
    985c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    985e:	706e      	strb	r6, [r5, #1]
    9860:	200d      	movs	r0, #13
    9862:	7028      	strb	r0, [r5, #0]
    9864:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9868:	6068      	str	r0, [r5, #4]
    986a:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    986e:	8128      	strh	r0, [r5, #8]
    9870:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    9874:	4638      	mov	r0, r7
    9876:	f004 fdcd 	bl	e414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    987a:	e099      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    987c:	e7ff      	b.n	987e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    987e:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    9882:	f88d 0000 	strb.w	r0, [sp]
    9886:	9800      	ldr	r0, [sp, #0]
    9888:	9000      	str	r0, [sp, #0]
    988a:	f89d 0000 	ldrb.w	r0, [sp]
    988e:	b130      	cbz	r0, 989e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    9890:	706e      	strb	r6, [r5, #1]
    9892:	2010      	movs	r0, #16
    9894:	7028      	strb	r0, [r5, #0]
    9896:	80af      	strh	r7, [r5, #4]
    9898:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    989c:	e088      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    989e:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    98a2:	f88d 0000 	strb.w	r0, [sp]
    98a6:	9800      	ldr	r0, [sp, #0]
    98a8:	9000      	str	r0, [sp, #0]
    98aa:	f89d 0000 	ldrb.w	r0, [sp]
    98ae:	b1c8      	cbz	r0, 98e4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    98b0:	706e      	strb	r6, [r5, #1]
    98b2:	2015      	movs	r0, #21
    98b4:	7028      	strb	r0, [r5, #0]
    98b6:	e00a      	b.n	98ce <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    98b8:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    98bc:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    98c0:	6068      	str	r0, [r5, #4]
    98c2:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    98c6:	60a8      	str	r0, [r5, #8]
    98c8:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    98cc:	60e8      	str	r0, [r5, #12]
    98ce:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    98d2:	f88d 0000 	strb.w	r0, [sp]
    98d6:	9800      	ldr	r0, [sp, #0]
    98d8:	9000      	str	r0, [sp, #0]
    98da:	f89d 0000 	ldrb.w	r0, [sp]
    98de:	2800      	cmp	r0, #0
    98e0:	d1ea      	bne.n	98b8 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    98e2:	e065      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    98e4:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    98e8:	f88d 0000 	strb.w	r0, [sp]
    98ec:	9800      	ldr	r0, [sp, #0]
    98ee:	9000      	str	r0, [sp, #0]
    98f0:	f89d 0000 	ldrb.w	r0, [sp]
    98f4:	b158      	cbz	r0, 990e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    98f6:	706e      	strb	r6, [r5, #1]
    98f8:	201c      	movs	r0, #28
    98fa:	7028      	strb	r0, [r5, #0]
    98fc:	220a      	movs	r2, #10
    98fe:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    9902:	1d28      	adds	r0, r5, #4
    9904:	f003 fdfe 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9908:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    990c:	e050      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    990e:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    9912:	f88d 0000 	strb.w	r0, [sp]
    9916:	9800      	ldr	r0, [sp, #0]
    9918:	9000      	str	r0, [sp, #0]
    991a:	f89d 0000 	ldrb.w	r0, [sp]
    991e:	b140      	cbz	r0, 9932 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    9920:	706e      	strb	r6, [r5, #1]
    9922:	201d      	movs	r0, #29
    9924:	7028      	strb	r0, [r5, #0]
    9926:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    992a:	6068      	str	r0, [r5, #4]
    992c:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    9930:	e03e      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9932:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    9936:	f88d 0000 	strb.w	r0, [sp]
    993a:	9800      	ldr	r0, [sp, #0]
    993c:	9000      	str	r0, [sp, #0]
    993e:	f89d 0000 	ldrb.w	r0, [sp]
    9942:	b198      	cbz	r0, 996c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    9944:	706e      	strb	r6, [r5, #1]
    9946:	201a      	movs	r0, #26
    9948:	7028      	strb	r0, [r5, #0]
    994a:	e004      	b.n	9956 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    994c:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    9950:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    9954:	6068      	str	r0, [r5, #4]
    9956:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    995a:	f88d 0000 	strb.w	r0, [sp]
    995e:	9800      	ldr	r0, [sp, #0]
    9960:	9000      	str	r0, [sp, #0]
    9962:	f89d 0000 	ldrb.w	r0, [sp]
    9966:	2800      	cmp	r0, #0
    9968:	d1f0      	bne.n	994c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    996a:	e021      	b.n	99b0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    996c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9970:	f88d 0000 	strb.w	r0, [sp]
    9974:	9800      	ldr	r0, [sp, #0]
    9976:	9000      	str	r0, [sp, #0]
    9978:	f89d 0000 	ldrb.w	r0, [sp]
    997c:	2800      	cmp	r0, #0
    997e:	f43f af6d 	beq.w	985c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    9982:	706e      	strb	r6, [r5, #1]
    9984:	2016      	movs	r0, #22
    9986:	7028      	strb	r0, [r5, #0]
    9988:	e008      	b.n	999c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    998a:	bf00      	nop
    998c:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    9990:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    9994:	6068      	str	r0, [r5, #4]
    9996:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    999a:	8128      	strh	r0, [r5, #8]
    999c:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    99a0:	f88d 0000 	strb.w	r0, [sp]
    99a4:	9800      	ldr	r0, [sp, #0]
    99a6:	9000      	str	r0, [sp, #0]
    99a8:	f89d 0000 	ldrb.w	r0, [sp]
    99ac:	2800      	cmp	r0, #0
    99ae:	d1ed      	bne.n	998c <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    99b0:	2001      	movs	r0, #1
    99b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000099b4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    99b4:	b570      	push	{r4, r5, r6, lr}
    99b6:	4605      	mov	r5, r0
    99b8:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    99bc:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    99c0:	b1c9      	cbz	r1, 99f6 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    99c2:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    99c6:	1a0c      	subs	r4, r1, r0
    99c8:	f1b4 0404 	subs.w	r4, r4, #4
    99cc:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    99d0:	b140      	cbz	r0, 99e4 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    99d2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    99d6:	2300      	movs	r3, #0
    99d8:	2109      	movs	r1, #9
    99da:	f105 0078 	add.w	r0, r5, #120	; 0x78
    99de:	f004 ffd5 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    99e2:	b160      	cbz	r0, 99fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    99e4:	4628      	mov	r0, r5
    99e6:	f005 ff78 	bl	f8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    99ea:	b138      	cbz	r0, 99fc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    99ec:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    99f0:	1a40      	subs	r0, r0, r1
    99f2:	1f00      	subs	r0, r0, #4
    99f4:	e003      	b.n	99fe <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    99f6:	f1c0 0402 	rsb	r4, r0, #2
    99fa:	e7e7      	b.n	99cc <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    99fc:	4620      	mov	r0, r4
    99fe:	42a0      	cmp	r0, r4
    9a00:	da00      	bge.n	9a04 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    9a02:	4604      	mov	r4, r0
    9a04:	2c00      	cmp	r4, #0
    9a06:	dc01      	bgt.n	9a0c <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    9a08:	2000      	movs	r0, #0
    9a0a:	bd70      	pop	{r4, r5, r6, pc}
    9a0c:	b2a0      	uxth	r0, r4
    9a0e:	bd70      	pop	{r4, r5, r6, pc}

00009a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    9a10:	481b      	ldr	r0, [pc, #108]	; (9a80 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    9a12:	491a      	ldr	r1, [pc, #104]	; (9a7c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    9a14:	6081      	str	r1, [r0, #8]
    9a16:	491b      	ldr	r1, [pc, #108]	; (9a84 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    9a18:	61c1      	str	r1, [r0, #28]
    9a1a:	491b      	ldr	r1, [pc, #108]	; (9a88 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    9a1c:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a1e:	491b      	ldr	r1, [pc, #108]	; (9a8c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    9a20:	6101      	str	r1, [r0, #16]
    9a22:	491b      	ldr	r1, [pc, #108]	; (9a90 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    9a24:	6141      	str	r1, [r0, #20]
    9a26:	491b      	ldr	r1, [pc, #108]	; (9a94 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    9a28:	6441      	str	r1, [r0, #68]	; 0x44
    9a2a:	491b      	ldr	r1, [pc, #108]	; (9a98 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    9a2c:	6181      	str	r1, [r0, #24]
    9a2e:	491b      	ldr	r1, [pc, #108]	; (9a9c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    9a30:	6301      	str	r1, [r0, #48]	; 0x30
    9a32:	491b      	ldr	r1, [pc, #108]	; (9aa0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    9a34:	6241      	str	r1, [r0, #36]	; 0x24
    9a36:	491b      	ldr	r1, [pc, #108]	; (9aa4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    9a38:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a3a:	491b      	ldr	r1, [pc, #108]	; (9aa8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    9a3c:	6481      	str	r1, [r0, #72]	; 0x48
    9a3e:	491b      	ldr	r1, [pc, #108]	; (9aac <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    9a40:	6341      	str	r1, [r0, #52]	; 0x34
    9a42:	481c      	ldr	r0, [pc, #112]	; (9ab4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    9a44:	491a      	ldr	r1, [pc, #104]	; (9ab0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    9a46:	6081      	str	r1, [r0, #8]
    9a48:	491b      	ldr	r1, [pc, #108]	; (9ab8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    9a4a:	61c1      	str	r1, [r0, #28]
    9a4c:	491b      	ldr	r1, [pc, #108]	; (9abc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    9a4e:	6201      	str	r1, [r0, #32]
    9a50:	491b      	ldr	r1, [pc, #108]	; (9ac0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    9a52:	6041      	str	r1, [r0, #4]
    9a54:	491b      	ldr	r1, [pc, #108]	; (9ac4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    9a56:	6001      	str	r1, [r0, #0]
    9a58:	491b      	ldr	r1, [pc, #108]	; (9ac8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    9a5a:	6281      	str	r1, [r0, #40]	; 0x28
    9a5c:	491b      	ldr	r1, [pc, #108]	; (9acc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    9a5e:	62c1      	str	r1, [r0, #44]	; 0x2c
    9a60:	491b      	ldr	r1, [pc, #108]	; (9ad0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    9a62:	60c1      	str	r1, [r0, #12]
    9a64:	491b      	ldr	r1, [pc, #108]	; (9ad4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    9a66:	6181      	str	r1, [r0, #24]
    9a68:	491b      	ldr	r1, [pc, #108]	; (9ad8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    9a6a:	6301      	str	r1, [r0, #48]	; 0x30
    9a6c:	491b      	ldr	r1, [pc, #108]	; (9adc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    9a6e:	6481      	str	r1, [r0, #72]	; 0x48
    9a70:	491b      	ldr	r1, [pc, #108]	; (9ae0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    9a72:	64c1      	str	r1, [r0, #76]	; 0x4c
    9a74:	491b      	ldr	r1, [pc, #108]	; (9ae4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    9a76:	6441      	str	r1, [r0, #68]	; 0x44
    9a78:	4770      	bx	lr
    9a7a:	0000      	.short	0x0000
    9a7c:	0000ad5d 	.word	0x0000ad5d
    9a80:	20000114 	.word	0x20000114
    9a84:	0000ad99 	.word	0x0000ad99
    9a88:	0000aa71 	.word	0x0000aa71
    9a8c:	0000a7b1 	.word	0x0000a7b1
    9a90:	0000aca9 	.word	0x0000aca9
    9a94:	0000ac0d 	.word	0x0000ac0d
    9a98:	0000ace9 	.word	0x0000ace9
    9a9c:	0000ae35 	.word	0x0000ae35
    9aa0:	0000a7e9 	.word	0x0000a7e9
    9aa4:	0000aa45 	.word	0x0000aa45
    9aa8:	0000aa11 	.word	0x0000aa11
    9aac:	0000ac99 	.word	0x0000ac99
    9ab0:	0000b1b5 	.word	0x0000b1b5
    9ab4:	20000178 	.word	0x20000178
    9ab8:	0000b1e5 	.word	0x0000b1e5
    9abc:	0000afa1 	.word	0x0000afa1
    9ac0:	0000af05 	.word	0x0000af05
    9ac4:	0000af35 	.word	0x0000af35
    9ac8:	0000b071 	.word	0x0000b071
    9acc:	0000b0a5 	.word	0x0000b0a5
    9ad0:	0000af65 	.word	0x0000af65
    9ad4:	0000b191 	.word	0x0000b191
    9ad8:	0000b225 	.word	0x0000b225
    9adc:	0000b031 	.word	0x0000b031
    9ae0:	0000b061 	.word	0x0000b061
    9ae4:	0000b17d 	.word	0x0000b17d

00009ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    9ae8:	4806      	ldr	r0, [pc, #24]	; (9b04 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    9aea:	4905      	ldr	r1, [pc, #20]	; (9b00 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    9aec:	6581      	str	r1, [r0, #88]	; 0x58
    9aee:	4906      	ldr	r1, [pc, #24]	; (9b08 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    9af0:	65c1      	str	r1, [r0, #92]	; 0x5c
    9af2:	4807      	ldr	r0, [pc, #28]	; (9b10 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    9af4:	4905      	ldr	r1, [pc, #20]	; (9b0c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    9af6:	6581      	str	r1, [r0, #88]	; 0x58
    9af8:	4906      	ldr	r1, [pc, #24]	; (9b14 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    9afa:	6601      	str	r1, [r0, #96]	; 0x60
    9afc:	4770      	bx	lr
    9afe:	0000      	.short	0x0000
    9b00:	0000aa95 	.word	0x0000aa95
    9b04:	20000114 	.word	0x20000114
    9b08:	0000aba5 	.word	0x0000aba5
    9b0c:	0000b0d1 	.word	0x0000b0d1
    9b10:	20000178 	.word	0x20000178
    9b14:	0000b101 	.word	0x0000b101

00009b18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    9b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9b1a:	4d36      	ldr	r5, [pc, #216]	; (9bf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    9b1c:	2600      	movs	r6, #0
    9b1e:	4604      	mov	r4, r0
    9b20:	6068      	str	r0, [r5, #4]
    9b22:	806e      	strh	r6, [r5, #2]
    9b24:	706e      	strb	r6, [r5, #1]
    9b26:	702e      	strb	r6, [r5, #0]
    9b28:	8800      	ldrh	r0, [r0, #0]
    9b2a:	f7fb ff17 	bl	595c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9b2e:	6868      	ldr	r0, [r5, #4]
    9b30:	8800      	ldrh	r0, [r0, #0]
    9b32:	f7fb febb 	bl	58ac <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9b36:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    9b3a:	6869      	ldr	r1, [r5, #4]
    9b3c:	1c40      	adds	r0, r0, #1
    9b3e:	b282      	uxth	r2, r0
    9b40:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9b44:	f005 f8dc 	bl	ed00 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    9b48:	b120      	cbz	r0, 9b54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    9b4a:	f44f 71ac 	mov.w	r1, #344	; 0x158
    9b4e:	2036      	movs	r0, #54	; 0x36
    9b50:	f7fb f8e2 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9b54:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    9b58:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    9b5c:	4630      	mov	r0, r6
    9b5e:	2924      	cmp	r1, #36	; 0x24
    9b60:	d10a      	bne.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9b62:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9b66:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9b6a:	1a51      	subs	r1, r2, r1
    9b6c:	b209      	sxth	r1, r1
    9b6e:	2900      	cmp	r1, #0
    9b70:	db02      	blt.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9b72:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    9b76:	e00f      	b.n	9b98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    9b78:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9b7c:	2924      	cmp	r1, #36	; 0x24
    9b7e:	d001      	beq.n	9b84 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    9b80:	2925      	cmp	r1, #37	; 0x25
    9b82:	d10c      	bne.n	9b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9b84:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9b88:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9b8c:	1a51      	subs	r1, r2, r1
    9b8e:	b209      	sxth	r1, r1
    9b90:	2900      	cmp	r1, #0
    9b92:	db04      	blt.n	9b9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9b94:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9b98:	f000 fd5a 	bl	a650 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    9b9c:	b318      	cbz	r0, 9be6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    9b9e:	f000 fbfd 	bl	a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    9ba2:	2800      	cmp	r0, #0
    9ba4:	d125      	bne.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9ba6:	6868      	ldr	r0, [r5, #4]
    9ba8:	3078      	adds	r0, #120	; 0x78
    9baa:	f005 fe0b 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9bae:	b120      	cbz	r0, 9bba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    9bb0:	6868      	ldr	r0, [r5, #4]
    9bb2:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    9bb6:	f000 faad 	bl	a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    9bba:	480f      	ldr	r0, [pc, #60]	; (9bf8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    9bbc:	9000      	str	r0, [sp, #0]
    9bbe:	4b0f      	ldr	r3, [pc, #60]	; (9bfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    9bc0:	4a0f      	ldr	r2, [pc, #60]	; (9c00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    9bc2:	4621      	mov	r1, r4
    9bc4:	4630      	mov	r0, r6
    9bc6:	f7fb ff73 	bl	5ab0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9bca:	6868      	ldr	r0, [r5, #4]
    9bcc:	2300      	movs	r3, #0
    9bce:	2105      	movs	r1, #5
    9bd0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9bd4:	3078      	adds	r0, #120	; 0x78
    9bd6:	f004 fed9 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9bda:	2800      	cmp	r0, #0
    9bdc:	d009      	beq.n	9bf2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9bde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9be2:	f7fb bf5f 	b.w	5aa4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9bea:	2100      	movs	r1, #0
    9bec:	4608      	mov	r0, r1
    9bee:	f000 bb81 	b.w	a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    9bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9bf4:	20000104 	.word	0x20000104
    9bf8:	0000a2f5 	.word	0x0000a2f5
    9bfc:	00009d25 	.word	0x00009d25
    9c00:	0000a5c9 	.word	0x0000a5c9
    9c04:	4411      	add	r1, r2
    9c06:	78c2      	ldrb	r2, [r0, #3]
    9c08:	480c      	ldr	r0, [pc, #48]	; (9c3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    9c0a:	1d89      	adds	r1, r1, #6
    9c0c:	b289      	uxth	r1, r1
    9c0e:	6840      	ldr	r0, [r0, #4]
    9c10:	2a01      	cmp	r2, #1
    9c12:	d006      	beq.n	9c22 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    9c14:	b142      	cbz	r2, 9c28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    9c16:	2a18      	cmp	r2, #24
    9c18:	d105      	bne.n	9c26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    9c1a:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    9c1e:	b132      	cbz	r2, 9c2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    9c20:	e009      	b.n	9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9c22:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9c26:	4770      	bx	lr
    9c28:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    9c2c:	4770      	bx	lr
    9c2e:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    9c32:	b902      	cbnz	r2, 9c36 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9c34:	2100      	movs	r1, #0
    9c36:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    9c3a:	4770      	bx	lr
    9c3c:	20000104 	.word	0x20000104
    9c40:	490b      	ldr	r1, [pc, #44]	; (9c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    9c42:	78c2      	ldrb	r2, [r0, #3]
    9c44:	6849      	ldr	r1, [r1, #4]
    9c46:	2a01      	cmp	r2, #1
    9c48:	d006      	beq.n	9c58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    9c4a:	b15a      	cbz	r2, 9c64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    9c4c:	2a18      	cmp	r2, #24
    9c4e:	d108      	bne.n	9c62 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    9c50:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    9c54:	f005 b93a 	b.w	eecc <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    9c58:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    9c5c:	7241      	strb	r1, [r0, #9]
    9c5e:	0a09      	lsrs	r1, r1, #8
    9c60:	7281      	strb	r1, [r0, #10]
    9c62:	4770      	bx	lr
    9c64:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    9c68:	7341      	strb	r1, [r0, #13]
    9c6a:	0a09      	lsrs	r1, r1, #8
    9c6c:	7381      	strb	r1, [r0, #14]
    9c6e:	4770      	bx	lr
    9c70:	20000104 	.word	0x20000104
    9c74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9c76:	4c2a      	ldr	r4, [pc, #168]	; (9d20 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    9c78:	2300      	movs	r3, #0
    9c7a:	4619      	mov	r1, r3
    9c7c:	6860      	ldr	r0, [r4, #4]
    9c7e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c82:	3078      	adds	r0, #120	; 0x78
    9c84:	f004 fe82 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c88:	2800      	cmp	r0, #0
    9c8a:	d048      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9c8c:	6860      	ldr	r0, [r4, #4]
    9c8e:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    9c92:	f88d 1000 	strb.w	r1, [sp]
    9c96:	9900      	ldr	r1, [sp, #0]
    9c98:	9100      	str	r1, [sp, #0]
    9c9a:	f89d 1000 	ldrb.w	r1, [sp]
    9c9e:	2900      	cmp	r1, #0
    9ca0:	d03d      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ca2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9ca6:	f004 feca 	bl	ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9caa:	2800      	cmp	r0, #0
    9cac:	d137      	bne.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cae:	6860      	ldr	r0, [r4, #4]
    9cb0:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    9cb4:	280a      	cmp	r0, #10
    9cb6:	d932      	bls.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cb8:	4668      	mov	r0, sp
    9cba:	f7fc ff9d 	bl	6bf8 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    9cbe:	2800      	cmp	r0, #0
    9cc0:	d02d      	beq.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cc2:	6861      	ldr	r1, [r4, #4]
    9cc4:	2205      	movs	r2, #5
    9cc6:	4668      	mov	r0, sp
    9cc8:	318e      	adds	r1, #142	; 0x8e
    9cca:	f003 fc09 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9cce:	2500      	movs	r5, #0
    9cd0:	b310      	cbz	r0, 9d18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    9cd2:	6860      	ldr	r0, [r4, #4]
    9cd4:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9cd8:	7808      	ldrb	r0, [r1, #0]
    9cda:	b158      	cbz	r0, 9cf4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    9cdc:	2205      	movs	r2, #5
    9cde:	4668      	mov	r0, sp
    9ce0:	1c49      	adds	r1, r1, #1
    9ce2:	f003 fbfd 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9ce6:	2800      	cmp	r0, #0
    9ce8:	d119      	bne.n	9d1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9cea:	6860      	ldr	r0, [r4, #4]
    9cec:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9cf0:	7800      	ldrb	r0, [r0, #0]
    9cf2:	b940      	cbnz	r0, 9d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    9cf4:	6860      	ldr	r0, [r4, #4]
    9cf6:	9900      	ldr	r1, [sp, #0]
    9cf8:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9cfc:	f8c0 1001 	str.w	r1, [r0, #1]
    9d00:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9d04:	7141      	strb	r1, [r0, #5]
    9d06:	6860      	ldr	r0, [r4, #4]
    9d08:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9d0c:	7808      	ldrb	r0, [r1, #0]
    9d0e:	1c40      	adds	r0, r0, #1
    9d10:	7008      	strb	r0, [r1, #0]
    9d12:	2001      	movs	r0, #1
    9d14:	f000 fd04 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9d18:	6860      	ldr	r0, [r4, #4]
    9d1a:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    9d1e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9d20:	20000104 	.word	0x20000104
    9d24:	4a0c      	ldr	r2, [pc, #48]	; (9d58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    9d26:	7851      	ldrb	r1, [r2, #1]
    9d28:	b999      	cbnz	r1, 9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d2a:	4611      	mov	r1, r2
    9d2c:	2801      	cmp	r0, #1
    9d2e:	6849      	ldr	r1, [r1, #4]
    9d30:	d008      	beq.n	9d44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    9d32:	7890      	ldrb	r0, [r2, #2]
    9d34:	0740      	lsls	r0, r0, #29
    9d36:	d503      	bpl.n	9d40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    9d38:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    9d3c:	2807      	cmp	r0, #7
    9d3e:	d008      	beq.n	9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d40:	2001      	movs	r0, #1
    9d42:	4770      	bx	lr
    9d44:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    9d48:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    9d4a:	4288      	cmp	r0, r1
    9d4c:	d801      	bhi.n	9d52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9d4e:	f7fe be85 	b.w	8a5c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    9d52:	2000      	movs	r0, #0
    9d54:	4770      	bx	lr
    9d56:	0000      	.short	0x0000
    9d58:	20000104 	.word	0x20000104
    9d5c:	b538      	push	{r3, r4, r5, lr}
    9d5e:	4c87      	ldr	r4, [pc, #540]	; (9f7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    9d60:	6860      	ldr	r0, [r4, #4]
    9d62:	3078      	adds	r0, #120	; 0x78
    9d64:	f005 fd2e 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9d68:	2800      	cmp	r0, #0
    9d6a:	d15b      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9d6c:	6860      	ldr	r0, [r4, #4]
    9d6e:	2300      	movs	r3, #0
    9d70:	2101      	movs	r1, #1
    9d72:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9d76:	3078      	adds	r0, #120	; 0x78
    9d78:	f004 fe08 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9d7c:	2800      	cmp	r0, #0
    9d7e:	d151      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9d80:	6860      	ldr	r0, [r4, #4]
    9d82:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    9d86:	f88d 1000 	strb.w	r1, [sp]
    9d8a:	9900      	ldr	r1, [sp, #0]
    9d8c:	9100      	str	r1, [sp, #0]
    9d8e:	f89d 1000 	ldrb.w	r1, [sp]
    9d92:	b109      	cbz	r1, 9d98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    9d94:	2002      	movs	r0, #2
    9d96:	e038      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9d98:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9d9c:	2300      	movs	r3, #0
    9d9e:	4619      	mov	r1, r3
    9da0:	3078      	adds	r0, #120	; 0x78
    9da2:	f004 fdf3 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9da6:	b128      	cbz	r0, 9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9da8:	6860      	ldr	r0, [r4, #4]
    9daa:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9dae:	b108      	cbz	r0, 9db4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9db0:	2012      	movs	r0, #18
    9db2:	e02a      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9db4:	6860      	ldr	r0, [r4, #4]
    9db6:	2500      	movs	r5, #0
    9db8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9dbc:	2a12      	cmp	r2, #18
    9dbe:	d01d      	beq.n	9dfc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    9dc0:	dc04      	bgt.n	9dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    9dc2:	2a03      	cmp	r2, #3
    9dc4:	d025      	beq.n	9e12 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    9dc6:	2a11      	cmp	r2, #17
    9dc8:	d104      	bne.n	9dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    9dca:	e019      	b.n	9e00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    9dcc:	2a18      	cmp	r2, #24
    9dce:	d01b      	beq.n	9e08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    9dd0:	2a23      	cmp	r2, #35	; 0x23
    9dd2:	d028      	beq.n	9e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    9dd4:	2300      	movs	r3, #0
    9dd6:	2104      	movs	r1, #4
    9dd8:	3078      	adds	r0, #120	; 0x78
    9dda:	f004 fdd7 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9dde:	2800      	cmp	r0, #0
    9de0:	d120      	bne.n	9e24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9de2:	6860      	ldr	r0, [r4, #4]
    9de4:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9de8:	2919      	cmp	r1, #25
    9dea:	d07c      	beq.n	9ee6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    9dec:	dc22      	bgt.n	9e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    9dee:	2901      	cmp	r1, #1
    9df0:	d02c      	beq.n	9e4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    9df2:	2902      	cmp	r1, #2
    9df4:	d037      	beq.n	9e66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    9df6:	2903      	cmp	r1, #3
    9df8:	d134      	bne.n	9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    9dfa:	e022      	b.n	9e42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    9dfc:	200b      	movs	r0, #11
    9dfe:	e004      	b.n	9e0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e04:	f000 bba0 	b.w	a548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9e08:	2006      	movs	r0, #6
    9e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9e0e:	f000 bc87 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e12:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    9e16:	7101      	strb	r1, [r0, #4]
    9e18:	2007      	movs	r0, #7
    9e1a:	f000 fc81 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e1e:	6860      	ldr	r0, [r4, #4]
    9e20:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9e24:	bd38      	pop	{r3, r4, r5, pc}
    9e26:	2018      	movs	r0, #24
    9e28:	f000 fc7a 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e2c:	6860      	ldr	r0, [r4, #4]
    9e2e:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9e32:	bd38      	pop	{r3, r4, r5, pc}
    9e34:	291d      	cmp	r1, #29
    9e36:	d018      	beq.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9e38:	291e      	cmp	r1, #30
    9e3a:	d016      	beq.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9e3c:	2921      	cmp	r1, #33	; 0x21
    9e3e:	d176      	bne.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9e40:	e056      	b.n	9ef0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    9e42:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    9e46:	7141      	strb	r1, [r0, #5]
    9e48:	2007      	movs	r0, #7
    9e4a:	e07e      	b.n	9f4a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    9e4c:	200c      	movs	r0, #12
    9e4e:	f000 fc67 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9e52:	6860      	ldr	r0, [r4, #4]
    9e54:	f820 5fba 	strh.w	r5, [r0, #186]!
    9e58:	7981      	ldrb	r1, [r0, #6]
    9e5a:	f041 0101 	orr.w	r1, r1, #1
    9e5e:	7181      	strb	r1, [r0, #6]
    9e60:	f800 5c34 	strb.w	r5, [r0, #-52]
    9e64:	e063      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9e66:	2013      	movs	r0, #19
    9e68:	e037      	b.n	9eda <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    9e6a:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    9e6e:	f88d 2000 	strb.w	r2, [sp]
    9e72:	9a00      	ldr	r2, [sp, #0]
    9e74:	9200      	str	r2, [sp, #0]
    9e76:	f89d 2000 	ldrb.w	r2, [sp]
    9e7a:	bbaa      	cbnz	r2, 9ee8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    9e7c:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    9e80:	f88d 2000 	strb.w	r2, [sp]
    9e84:	9a00      	ldr	r2, [sp, #0]
    9e86:	9200      	str	r2, [sp, #0]
    9e88:	f89d 2000 	ldrb.w	r2, [sp]
    9e8c:	b1aa      	cbz	r2, 9eba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    9e8e:	2924      	cmp	r1, #36	; 0x24
    9e90:	d011      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9e92:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9e96:	2924      	cmp	r1, #36	; 0x24
    9e98:	d00d      	beq.n	9eb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    9e9a:	2300      	movs	r3, #0
    9e9c:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9ea0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    9ea4:	f005 f91a 	bl	f0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9ea8:	6860      	ldr	r0, [r4, #4]
    9eaa:	211e      	movs	r1, #30
    9eac:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    9eb0:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9eb4:	e003      	b.n	9ebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    9eb6:	2301      	movs	r3, #1
    9eb8:	e7f0      	b.n	9e9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    9eba:	291e      	cmp	r1, #30
    9ebc:	d137      	bne.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9ebe:	6860      	ldr	r0, [r4, #4]
    9ec0:	f005 f927 	bl	f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9ec4:	f000 f85c 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9ec8:	6861      	ldr	r1, [r4, #4]
    9eca:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9ece:	8bc2      	ldrh	r2, [r0, #30]
    9ed0:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9ed4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    9ed6:	8048      	strh	r0, [r1, #2]
    9ed8:	2015      	movs	r0, #21
    9eda:	f000 fc21 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9ede:	6860      	ldr	r0, [r4, #4]
    9ee0:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    9ee4:	e001      	b.n	9eea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    9ee6:	e02f      	b.n	9f48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    9ee8:	e021      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9eea:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9eee:	e01e      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9ef0:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9ef4:	2901      	cmp	r1, #1
    9ef6:	d108      	bne.n	9f0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    9ef8:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9efc:	f88d 1000 	strb.w	r1, [sp]
    9f00:	9900      	ldr	r1, [sp, #0]
    9f02:	9100      	str	r1, [sp, #0]
    9f04:	f89d 1000 	ldrb.w	r1, [sp]
    9f08:	b121      	cbz	r1, 9f14 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    9f0a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9f0e:	2902      	cmp	r1, #2
    9f10:	d005      	beq.n	9f1e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    9f12:	e00c      	b.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9f14:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    9f18:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9f1c:	e002      	b.n	9f24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    9f1e:	f850 1f62 	ldr.w	r1, [r0, #98]!
    9f22:	6840      	ldr	r0, [r0, #4]
    9f24:	f000 fc1e 	bl	a764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9f28:	2018      	movs	r0, #24
    9f2a:	f000 fbf9 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f2e:	6860      	ldr	r0, [r4, #4]
    9f30:	3078      	adds	r0, #120	; 0x78
    9f32:	f005 fc47 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f36:	2800      	cmp	r0, #0
    9f38:	f47f af7b 	bne.w	9e32 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    9f3c:	6860      	ldr	r0, [r4, #4]
    9f3e:	3078      	adds	r0, #120	; 0x78
    9f40:	f005 fc40 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f44:	b128      	cbz	r0, 9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    9f46:	e00f      	b.n	9f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9f48:	2011      	movs	r0, #17
    9f4a:	f000 fbe9 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f4e:	6860      	ldr	r0, [r4, #4]
    9f50:	e7c8      	b.n	9ee4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9f52:	6860      	ldr	r0, [r4, #4]
    9f54:	2300      	movs	r3, #0
    9f56:	4619      	mov	r1, r3
    9f58:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9f5c:	3078      	adds	r0, #120	; 0x78
    9f5e:	f004 fd15 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9f62:	b108      	cbz	r0, 9f68 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9f64:	f000 fa44 	bl	a3f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    9f68:	6860      	ldr	r0, [r4, #4]
    9f6a:	3078      	adds	r0, #120	; 0x78
    9f6c:	f005 fc2a 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f70:	2800      	cmp	r0, #0
    9f72:	d1e1      	bne.n	9f38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    9f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9f78:	f7ff be7c 	b.w	9c74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    9f7c:	20000104 	.word	0x20000104
    9f80:	480a      	ldr	r0, [pc, #40]	; (9fac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    9f82:	b510      	push	{r4, lr}
    9f84:	6841      	ldr	r1, [r0, #4]
    9f86:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9f8a:	2801      	cmp	r0, #1
    9f8c:	d009      	beq.n	9fa2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    9f8e:	8808      	ldrh	r0, [r1, #0]
    9f90:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    9f94:	312c      	adds	r1, #44	; 0x2c
    9f96:	f005 f87d 	bl	f094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    9f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9f9e:	f001 baef 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9fa2:	2002      	movs	r0, #2
    9fa4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    9fa8:	bd10      	pop	{r4, pc}
    9faa:	0000      	.short	0x0000
    9fac:	20000104 	.word	0x20000104
    9fb0:	b570      	push	{r4, r5, r6, lr}
    9fb2:	4c22      	ldr	r4, [pc, #136]	; (a03c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    9fb4:	f04f 0500 	mov.w	r5, #0
    9fb8:	8861      	ldrh	r1, [r4, #2]
    9fba:	0748      	lsls	r0, r1, #29
    9fbc:	d510      	bpl.n	9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9fbe:	6860      	ldr	r0, [r4, #4]
    9fc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fc4:	2a03      	cmp	r2, #3
    9fc6:	d004      	beq.n	9fd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    9fc8:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9fcc:	2a07      	cmp	r2, #7
    9fce:	d107      	bne.n	9fe0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9fd0:	e002      	b.n	9fd8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    9fd2:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    9fd6:	e026      	b.n	a026 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    9fd8:	2201      	movs	r2, #1
    9fda:	7022      	strb	r2, [r4, #0]
    9fdc:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    9fe0:	0788      	lsls	r0, r1, #30
    9fe2:	d508      	bpl.n	9ff6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    9fe4:	68a0      	ldr	r0, [r4, #8]
    9fe6:	78c0      	ldrb	r0, [r0, #3]
    9fe8:	2819      	cmp	r0, #25
    9fea:	d21a      	bcs.n	a022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9fec:	4914      	ldr	r1, [pc, #80]	; (a040 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    9fee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9ff2:	b1b0      	cbz	r0, a022 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9ff4:	4780      	blx	r0
    9ff6:	f000 f867 	bl	a0c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    9ffa:	f000 f823 	bl	a044 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    9ffe:	4606      	mov	r6, r0
    a000:	7860      	ldrb	r0, [r4, #1]
    a002:	0700      	lsls	r0, r0, #28
    a004:	d515      	bpl.n	a032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a006:	6860      	ldr	r0, [r4, #4]
    a008:	2300      	movs	r3, #0
    a00a:	2105      	movs	r1, #5
    a00c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a010:	3078      	adds	r0, #120	; 0x78
    a012:	f004 fcbb 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a016:	b148      	cbz	r0, a02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    a018:	6860      	ldr	r0, [r4, #4]
    a01a:	2608      	movs	r6, #8
    a01c:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    a020:	e007      	b.n	a032 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a022:	f240 61b1 	movw	r1, #1713	; 0x6b1
    a026:	2036      	movs	r0, #54	; 0x36
    a028:	f7fa fe76 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a02c:	2000      	movs	r0, #0
    a02e:	f7fb fe21 	bl	5c74 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    a032:	6860      	ldr	r0, [r4, #4]
    a034:	f005 fbf6 	bl	f824 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    a038:	4630      	mov	r0, r6
    a03a:	bd70      	pop	{r4, r5, r6, pc}
    a03c:	20000104 	.word	0x20000104
    a040:	20000178 	.word	0x20000178
    a044:	b570      	push	{r4, r5, r6, lr}
    a046:	4c1e      	ldr	r4, [pc, #120]	; (a0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    a048:	2000      	movs	r0, #0
    a04a:	78a1      	ldrb	r1, [r4, #2]
    a04c:	07c9      	lsls	r1, r1, #31
    a04e:	d01b      	beq.n	a088 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    a050:	68e0      	ldr	r0, [r4, #12]
    a052:	2300      	movs	r3, #0
    a054:	2105      	movs	r1, #5
    a056:	78c5      	ldrb	r5, [r0, #3]
    a058:	6860      	ldr	r0, [r4, #4]
    a05a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a05e:	3078      	adds	r0, #120	; 0x78
    a060:	f004 fc94 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a064:	b188      	cbz	r0, a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a066:	2d06      	cmp	r5, #6
    a068:	d00f      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a06a:	dc06      	bgt.n	a07a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    a06c:	2d02      	cmp	r5, #2
    a06e:	d00c      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a070:	2d04      	cmp	r5, #4
    a072:	d00a      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a074:	2d05      	cmp	r5, #5
    a076:	d106      	bne.n	a086 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    a078:	e007      	b.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a07a:	2d0b      	cmp	r5, #11
    a07c:	d005      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a07e:	2d0d      	cmp	r5, #13
    a080:	d003      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a082:	2d11      	cmp	r5, #17
    a084:	d001      	beq.n	a08a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a086:	2008      	movs	r0, #8
    a088:	bd70      	pop	{r4, r5, r6, pc}
    a08a:	68e0      	ldr	r0, [r4, #12]
    a08c:	f7fc fe70 	bl	6d70 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a090:	b148      	cbz	r0, a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a092:	68e0      	ldr	r0, [r4, #12]
    a094:	78c0      	ldrb	r0, [r0, #3]
    a096:	2819      	cmp	r0, #25
    a098:	d205      	bcs.n	a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a09a:	490a      	ldr	r1, [pc, #40]	; (a0c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    a09c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    a0a0:	b108      	cbz	r0, a0a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a0a2:	4780      	blx	r0
    a0a4:	e002      	b.n	a0ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    a0a6:	2000      	movs	r0, #0
    a0a8:	f000 fbdc 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a0ac:	6861      	ldr	r1, [r4, #4]
    a0ae:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    a0b2:	1c52      	adds	r2, r2, #1
    a0b4:	f143 0300 	adc.w	r3, r3, #0
    a0b8:	e9c1 2300 	strd	r2, r3, [r1]
    a0bc:	bd70      	pop	{r4, r5, r6, pc}
    a0be:	0000      	.short	0x0000
    a0c0:	20000104 	.word	0x20000104
    a0c4:	20000114 	.word	0x20000114
    a0c8:	b510      	push	{r4, lr}
    a0ca:	4c11      	ldr	r4, [pc, #68]	; (a110 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    a0cc:	78a0      	ldrb	r0, [r4, #2]
    a0ce:	0700      	lsls	r0, r0, #28
    a0d0:	d517      	bpl.n	a102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a0d2:	6860      	ldr	r0, [r4, #4]
    a0d4:	2100      	movs	r1, #0
    a0d6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    a0da:	f001 f97b 	bl	b3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    a0de:	6860      	ldr	r0, [r4, #4]
    a0e0:	3078      	adds	r0, #120	; 0x78
    a0e2:	f005 fb6f 	bl	f7c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a0e6:	b168      	cbz	r0, a104 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    a0e8:	6860      	ldr	r0, [r4, #4]
    a0ea:	21fe      	movs	r1, #254	; 0xfe
    a0ec:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    a0f0:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a0f4:	2908      	cmp	r1, #8
    a0f6:	d104      	bne.n	a102 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a0f8:	2102      	movs	r1, #2
    a0fa:	7021      	strb	r1, [r4, #0]
    a0fc:	2100      	movs	r1, #0
    a0fe:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a102:	bd10      	pop	{r4, pc}
    a104:	f240 61bd 	movw	r1, #1725	; 0x6bd
    a108:	2036      	movs	r0, #54	; 0x36
    a10a:	f7fa fe05 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a10e:	0000      	.short	0x0000
    a110:	20000104 	.word	0x20000104
    a114:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a116:	4605      	mov	r5, r0
    a118:	4668      	mov	r0, sp
    a11a:	f7fb fc09 	bl	5930 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a11e:	b318      	cbz	r0, a168 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    a120:	2222      	movs	r2, #34	; 0x22
    a122:	2100      	movs	r1, #0
    a124:	9800      	ldr	r0, [sp, #0]
    a126:	f003 fa67 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a12a:	2103      	movs	r1, #3
    a12c:	9800      	ldr	r0, [sp, #0]
    a12e:	f004 feb3 	bl	ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a132:	9800      	ldr	r0, [sp, #0]
    a134:	7801      	ldrb	r1, [r0, #0]
    a136:	f021 0110 	bic.w	r1, r1, #16
    a13a:	7001      	strb	r1, [r0, #0]
    a13c:	4629      	mov	r1, r5
    a13e:	f7fc fe27 	bl	6d90 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a142:	2100      	movs	r1, #0
    a144:	4c6a      	ldr	r4, [pc, #424]	; (a2f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    a146:	2d19      	cmp	r5, #25
    a148:	d270      	bcs.n	a22c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    a14a:	e8df f005 	tbb	[pc, r5]
    a14e:	1c24      	.short	0x1c24
    a150:	c9c94c10 	.word	0xc9c94c10
    a154:	c97016c2 	.word	0xc97016c2
    a158:	c964c2c2 	.word	0xc964c2c2
    a15c:	b6c9c9c9 	.word	0xb6c9c9c9
    a160:	8181c2c2 	.word	0x8181c2c2
    a164:	00a3c99a 	.word	0x00a3c99a
    a168:	f640 014f 	movw	r1, #2127	; 0x84f
    a16c:	e0bd      	b.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a16e:	6860      	ldr	r0, [r4, #4]
    a170:	9900      	ldr	r1, [sp, #0]
    a172:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    a176:	7108      	strb	r0, [r1, #4]
    a178:	e0ab      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a17a:	6861      	ldr	r1, [r4, #4]
    a17c:	9800      	ldr	r0, [sp, #0]
    a17e:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    a182:	7101      	strb	r1, [r0, #4]
    a184:	e0a5      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a186:	6860      	ldr	r0, [r4, #4]
    a188:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    a18c:	9800      	ldr	r0, [sp, #0]
    a18e:	1c49      	adds	r1, r1, #1
    a190:	f004 fe62 	bl	ee58 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    a194:	e09d      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a196:	6860      	ldr	r0, [r4, #4]
    a198:	9d00      	ldr	r5, [sp, #0]
    a19a:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    a19e:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    a1a2:	f004 fd76 	bl	ec92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    a1a6:	7128      	strb	r0, [r5, #4]
    a1a8:	6860      	ldr	r0, [r4, #4]
    a1aa:	9d00      	ldr	r5, [sp, #0]
    a1ac:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    a1b0:	c803      	ldmia	r0, {r0, r1}
    a1b2:	f004 fd63 	bl	ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    a1b6:	7168      	strb	r0, [r5, #5]
    a1b8:	0a00      	lsrs	r0, r0, #8
    a1ba:	71a8      	strb	r0, [r5, #6]
    a1bc:	6860      	ldr	r0, [r4, #4]
    a1be:	9d00      	ldr	r5, [sp, #0]
    a1c0:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    a1c4:	f004 fbc9 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a1c8:	71e8      	strb	r0, [r5, #7]
    a1ca:	0a00      	lsrs	r0, r0, #8
    a1cc:	7228      	strb	r0, [r5, #8]
    a1ce:	6862      	ldr	r2, [r4, #4]
    a1d0:	9800      	ldr	r0, [sp, #0]
    a1d2:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    a1d6:	7241      	strb	r1, [r0, #9]
    a1d8:	0a09      	lsrs	r1, r1, #8
    a1da:	7281      	strb	r1, [r0, #10]
    a1dc:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    a1e0:	f004 fe3f 	bl	ee62 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    a1e4:	e075      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a1e6:	6861      	ldr	r1, [r4, #4]
    a1e8:	9800      	ldr	r0, [sp, #0]
    a1ea:	f201 115b 	addw	r1, r1, #347	; 0x15b
    a1ee:	f004 fe43 	bl	ee78 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    a1f2:	6861      	ldr	r1, [r4, #4]
    a1f4:	9800      	ldr	r0, [sp, #0]
    a1f6:	f201 1163 	addw	r1, r1, #355	; 0x163
    a1fa:	f004 fe36 	bl	ee6a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    a1fe:	6861      	ldr	r1, [r4, #4]
    a200:	9800      	ldr	r0, [sp, #0]
    a202:	f201 1175 	addw	r1, r1, #373	; 0x175
    a206:	f004 fe3c 	bl	ee82 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    a20a:	6861      	ldr	r1, [r4, #4]
    a20c:	9800      	ldr	r0, [sp, #0]
    a20e:	31f0      	adds	r1, #240	; 0xf0
    a210:	f004 fe2e 	bl	ee70 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    a214:	e05d      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a216:	9800      	ldr	r0, [sp, #0]
    a218:	220b      	movs	r2, #11
    a21a:	7102      	strb	r2, [r0, #4]
    a21c:	2259      	movs	r2, #89	; 0x59
    a21e:	7142      	strb	r2, [r0, #5]
    a220:	7181      	strb	r1, [r0, #6]
    a222:	21b0      	movs	r1, #176	; 0xb0
    a224:	71c1      	strb	r1, [r0, #7]
    a226:	2112      	movs	r1, #18
    a228:	7201      	strb	r1, [r0, #8]
    a22a:	e052      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a22c:	e058      	b.n	a2e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    a22e:	9101      	str	r1, [sp, #4]
    a230:	9102      	str	r1, [sp, #8]
    a232:	f001 fec7 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a236:	f644 112f 	movw	r1, #18735	; 0x492f
    a23a:	4008      	ands	r0, r1
    a23c:	f88d 0004 	strb.w	r0, [sp, #4]
    a240:	0a00      	lsrs	r0, r0, #8
    a242:	f88d 0005 	strb.w	r0, [sp, #5]
    a246:	a901      	add	r1, sp, #4
    a248:	9800      	ldr	r0, [sp, #0]
    a24a:	f004 fe20 	bl	ee8e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a24e:	e040      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a250:	6860      	ldr	r0, [r4, #4]
    a252:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a256:	9800      	ldr	r0, [sp, #0]
    a258:	f004 fe30 	bl	eebc <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a25c:	6860      	ldr	r0, [r4, #4]
    a25e:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    a262:	9800      	ldr	r0, [sp, #0]
    a264:	f004 fe2e 	bl	eec4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a268:	6860      	ldr	r0, [r4, #4]
    a26a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    a26e:	9800      	ldr	r0, [sp, #0]
    a270:	f004 fe1c 	bl	eeac <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a274:	6860      	ldr	r0, [r4, #4]
    a276:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    a27a:	9800      	ldr	r0, [sp, #0]
    a27c:	f004 fe1a 	bl	eeb4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a280:	e027      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a282:	6861      	ldr	r1, [r4, #4]
    a284:	9800      	ldr	r0, [sp, #0]
    a286:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    a28a:	7102      	strb	r2, [r0, #4]
    a28c:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    a290:	7141      	strb	r1, [r0, #5]
    a292:	e01e      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a294:	6860      	ldr	r0, [r4, #4]
    a296:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    a29a:	f004 fc1b 	bl	ead4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a29e:	4601      	mov	r1, r0
    a2a0:	9800      	ldr	r0, [sp, #0]
    a2a2:	f004 fe17 	bl	eed4 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    a2a6:	6860      	ldr	r0, [r4, #4]
    a2a8:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    a2ac:	f004 fc12 	bl	ead4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a2b0:	4601      	mov	r1, r0
    a2b2:	9800      	ldr	r0, [sp, #0]
    a2b4:	f004 fdf8 	bl	eea8 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    a2b8:	e00b      	b.n	a2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a2ba:	6860      	ldr	r0, [r4, #4]
    a2bc:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    a2c0:	9800      	ldr	r0, [sp, #0]
    a2c2:	f004 fdc5 	bl	ee50 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a2c6:	6860      	ldr	r0, [r4, #4]
    a2c8:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    a2cc:	9800      	ldr	r0, [sp, #0]
    a2ce:	f004 fdc1 	bl	ee54 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a2d2:	f7fb fb07 	bl	58e4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a2d6:	b130      	cbz	r0, a2e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    a2d8:	9800      	ldr	r0, [sp, #0]
    a2da:	f7ff fcb1 	bl	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a2de:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a2e0:	f640 01db 	movw	r1, #2267	; 0x8db
    a2e4:	e001      	b.n	a2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a2e6:	f640 01e1 	movw	r1, #2273	; 0x8e1
    a2ea:	2036      	movs	r0, #54	; 0x36
    a2ec:	f7fa fd14 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f0:	20000104 	.word	0x20000104
    a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2f8:	4c27      	ldr	r4, [pc, #156]	; (a398 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    a2fa:	4680      	mov	r8, r0
    a2fc:	460d      	mov	r5, r1
    a2fe:	8860      	ldrh	r0, [r4, #2]
    a300:	f04f 0600 	mov.w	r6, #0
    a304:	05c1      	lsls	r1, r0, #23
    a306:	4620      	mov	r0, r4
    a308:	6840      	ldr	r0, [r0, #4]
    a30a:	d502      	bpl.n	a312 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    a30c:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    a310:	e004      	b.n	a31c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    a312:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    a316:	1c49      	adds	r1, r1, #1
    a318:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    a31c:	f005 fadd 	bl	f8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    a320:	2701      	movs	r7, #1
    a322:	b1e0      	cbz	r0, a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a324:	8860      	ldrh	r0, [r4, #2]
    a326:	0500      	lsls	r0, r0, #20
    a328:	d506      	bpl.n	a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a32a:	6860      	ldr	r0, [r4, #4]
    a32c:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    a330:	b111      	cbz	r1, a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a332:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a336:	e012      	b.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a338:	6860      	ldr	r0, [r4, #4]
    a33a:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    a33e:	1c49      	adds	r1, r1, #1
    a340:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    a344:	f005 fa5f 	bl	f806 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    a348:	6860      	ldr	r0, [r4, #4]
    a34a:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    a34e:	4291      	cmp	r1, r2
    a350:	d305      	bcc.n	a35e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a352:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a356:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    a35a:	f001 f911 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a35e:	8860      	ldrh	r0, [r4, #2]
    a360:	f410 7f40 	tst.w	r0, #768	; 0x300
    a364:	d008      	beq.n	a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a366:	6860      	ldr	r0, [r4, #4]
    a368:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    a36c:	b921      	cbnz	r1, a378 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a36e:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    a372:	2101      	movs	r1, #1
    a374:	f7fe fb94 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a378:	ea58 0005 	orrs.w	r0, r8, r5
    a37c:	d104      	bne.n	a388 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    a37e:	f7ff fe17 	bl	9fb0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    a382:	4605      	mov	r5, r0
    a384:	f7ff fcea 	bl	9d5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    a388:	4629      	mov	r1, r5
    a38a:	4640      	mov	r0, r8
    a38c:	f000 ff7a 	bl	b284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    a390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a394:	f7fb ba90 	b.w	58b8 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    a398:	20000104 	.word	0x20000104
    a39c:	4813      	ldr	r0, [pc, #76]	; (a3ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    a39e:	6840      	ldr	r0, [r0, #4]
    a3a0:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a3a4:	b129      	cbz	r1, a3b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    a3a6:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    a3aa:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a3ae:	4291      	cmp	r1, r2
    a3b0:	d215      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3b2:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a3b6:	b129      	cbz	r1, a3c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    a3b8:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    a3bc:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a3c0:	4291      	cmp	r1, r2
    a3c2:	d20c      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3c4:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    a3c8:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    a3cc:	428a      	cmp	r2, r1
    a3ce:	d206      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3d0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    a3d4:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    a3d8:	b11a      	cbz	r2, a3e2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    a3da:	4288      	cmp	r0, r1
    a3dc:	d303      	bcc.n	a3e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    a3de:	2001      	movs	r0, #1
    a3e0:	4770      	bx	lr
    a3e2:	2806      	cmp	r0, #6
    a3e4:	d2fb      	bcs.n	a3de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a3e6:	2000      	movs	r0, #0
    a3e8:	4770      	bx	lr
    a3ea:	0000      	.short	0x0000
    a3ec:	20000104 	.word	0x20000104
    a3f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a3f2:	4c54      	ldr	r4, [pc, #336]	; (a544 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    a3f4:	6860      	ldr	r0, [r4, #4]
    a3f6:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    a3fa:	f88d 1000 	strb.w	r1, [sp]
    a3fe:	9900      	ldr	r1, [sp, #0]
    a400:	9100      	str	r1, [sp, #0]
    a402:	f89d 1000 	ldrb.w	r1, [sp]
    a406:	b129      	cbz	r1, a414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    a408:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a40c:	f004 fb17 	bl	ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a410:	2800      	cmp	r0, #0
    a412:	d00a      	beq.n	a42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    a414:	6860      	ldr	r0, [r4, #4]
    a416:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    a41a:	b181      	cbz	r1, a43e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    a41c:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a420:	b149      	cbz	r1, a436 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    a422:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    a426:	b108      	cbz	r0, a42c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    a428:	200a      	movs	r0, #10
    a42a:	e087      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a42c:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    a430:	2036      	movs	r0, #54	; 0x36
    a432:	f7fa fc71 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a436:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a43a:	f000 b885 	b.w	a548 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    a43e:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    a442:	b109      	cbz	r1, a448 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    a444:	2008      	movs	r0, #8
    a446:	e079      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a448:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a44c:	2500      	movs	r5, #0
    a44e:	b181      	cbz	r1, a472 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    a450:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a454:	0780      	lsls	r0, r0, #30
    a456:	d10b      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a458:	200c      	movs	r0, #12
    a45a:	f000 f961 	bl	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a45e:	6860      	ldr	r0, [r4, #4]
    a460:	2101      	movs	r1, #1
    a462:	f820 5fb4 	strh.w	r5, [r0, #180]!
    a466:	7101      	strb	r1, [r0, #4]
    a468:	7b01      	ldrb	r1, [r0, #12]
    a46a:	f041 0101 	orr.w	r1, r1, #1
    a46e:	7301      	strb	r1, [r0, #12]
    a470:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a472:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    a476:	f88d 1004 	strb.w	r1, [sp, #4]
    a47a:	9901      	ldr	r1, [sp, #4]
    a47c:	9101      	str	r1, [sp, #4]
    a47e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a482:	b141      	cbz	r1, a496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    a484:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    a488:	f88d 1000 	strb.w	r1, [sp]
    a48c:	9900      	ldr	r1, [sp, #0]
    a48e:	9100      	str	r1, [sp, #0]
    a490:	f89d 1000 	ldrb.w	r1, [sp]
    a494:	b391      	cbz	r1, a4fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    a496:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    a49a:	2901      	cmp	r1, #1
    a49c:	d1e8      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a49e:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    a4a2:	f88d 1000 	strb.w	r1, [sp]
    a4a6:	9900      	ldr	r1, [sp, #0]
    a4a8:	9100      	str	r1, [sp, #0]
    a4aa:	f89d 1000 	ldrb.w	r1, [sp]
    a4ae:	2900      	cmp	r1, #0
    a4b0:	d1de      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a4b2:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a4b6:	f004 fac2 	bl	ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a4ba:	2800      	cmp	r0, #0
    a4bc:	d1d8      	bne.n	a470 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a4be:	6860      	ldr	r0, [r4, #4]
    a4c0:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    a4c4:	f005 f986 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a4c8:	4605      	mov	r5, r0
    a4ca:	6860      	ldr	r0, [r4, #4]
    a4cc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    a4d0:	f005 f980 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a4d4:	4606      	mov	r6, r0
    a4d6:	6860      	ldr	r0, [r4, #4]
    a4d8:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    a4dc:	4628      	mov	r0, r5
    a4de:	f005 f984 	bl	f7ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a4e2:	b350      	cbz	r0, a53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a4e4:	6860      	ldr	r0, [r4, #4]
    a4e6:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    a4ea:	4630      	mov	r0, r6
    a4ec:	f005 f97d 	bl	f7ea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a4f0:	b318      	cbz	r0, a53a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a4f2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a4f6:	2000      	movs	r0, #0
    a4f8:	f000 b8ee 	b.w	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a4fc:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a500:	2924      	cmp	r1, #36	; 0x24
    a502:	d018      	beq.n	a536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a504:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a508:	2924      	cmp	r1, #36	; 0x24
    a50a:	d014      	beq.n	a536 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a50c:	f05f 0300 	movs.w	r3, #0
    a510:	f500 7293 	add.w	r2, r0, #294	; 0x126
    a514:	f500 7199 	add.w	r1, r0, #306	; 0x132
    a518:	f004 fde0 	bl	f0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a51c:	6860      	ldr	r0, [r4, #4]
    a51e:	4602      	mov	r2, r0
    a520:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    a524:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    a528:	8bc8      	ldrh	r0, [r1, #30]
    a52a:	f822 0ffe 	strh.w	r0, [r2, #254]!
    a52e:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    a530:	8050      	strh	r0, [r2, #2]
    a532:	2014      	movs	r0, #20
    a534:	e002      	b.n	a53c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a536:	2301      	movs	r3, #1
    a538:	e7ea      	b.n	a510 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    a53a:	2016      	movs	r0, #22
    a53c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a540:	f000 b8ee 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a544:	20000104 	.word	0x20000104
    a548:	b510      	push	{r4, lr}
    a54a:	4c1e      	ldr	r4, [pc, #120]	; (a5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    a54c:	6862      	ldr	r2, [r4, #4]
    a54e:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a552:	2808      	cmp	r0, #8
    a554:	d20d      	bcs.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    a556:	f1c0 0108 	rsb	r1, r0, #8
    a55a:	4410      	add	r0, r2
    a55c:	b2c9      	uxtb	r1, r1
    a55e:	f200 1075 	addw	r0, r0, #373	; 0x175
    a562:	f7fa fc67 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a566:	6861      	ldr	r1, [r4, #4]
    a568:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a56c:	4410      	add	r0, r2
    a56e:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a572:	6862      	ldr	r2, [r4, #4]
    a574:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a578:	3808      	subs	r0, #8
    a57a:	2804      	cmp	r0, #4
    a57c:	d20c      	bcs.n	a598 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    a57e:	f1c0 0104 	rsb	r1, r0, #4
    a582:	4410      	add	r0, r2
    a584:	b2c9      	uxtb	r1, r1
    a586:	30f0      	adds	r0, #240	; 0xf0
    a588:	f7fa fc54 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a58c:	6861      	ldr	r1, [r4, #4]
    a58e:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a592:	4410      	add	r0, r2
    a594:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a598:	6860      	ldr	r0, [r4, #4]
    a59a:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    a59e:	290c      	cmp	r1, #12
    a5a0:	d30e      	bcc.n	a5c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    a5a2:	d005      	beq.n	a5b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    a5a4:	f640 1131 	movw	r1, #2353	; 0x931
    a5a8:	f04f 0036 	mov.w	r0, #54	; 0x36
    a5ac:	f7fa fbb4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5b0:	2100      	movs	r1, #0
    a5b2:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    a5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a5ba:	2003      	movs	r0, #3
    a5bc:	f000 b8b0 	b.w	a720 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a5c0:	bd10      	pop	{r4, pc}
    a5c2:	0000      	.short	0x0000
    a5c4:	20000104 	.word	0x20000104
    a5c8:	b570      	push	{r4, r5, r6, lr}
    a5ca:	4b20      	ldr	r3, [pc, #128]	; (a64c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    a5cc:	4602      	mov	r2, r0
    a5ce:	460c      	mov	r4, r1
    a5d0:	8858      	ldrh	r0, [r3, #2]
    a5d2:	4310      	orrs	r0, r2
    a5d4:	8058      	strh	r0, [r3, #2]
    a5d6:	4618      	mov	r0, r3
    a5d8:	0791      	lsls	r1, r2, #30
    a5da:	6840      	ldr	r0, [r0, #4]
    a5dc:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    a5e0:	d507      	bpl.n	a5f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    a5e2:	b121      	cbz	r1, a5ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    a5e4:	f640 21c5 	movw	r1, #2757	; 0xac5
    a5e8:	2036      	movs	r0, #54	; 0x36
    a5ea:	f7fa fb95 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a5ee:	609c      	str	r4, [r3, #8]
    a5f0:	e003      	b.n	a5fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    a5f2:	b101      	cbz	r1, a5f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    a5f4:	60dc      	str	r4, [r3, #12]
    a5f6:	0791      	lsls	r1, r2, #30
    a5f8:	d515      	bpl.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a5fa:	78e1      	ldrb	r1, [r4, #3]
    a5fc:	2906      	cmp	r1, #6
    a5fe:	d002      	beq.n	a606 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    a600:	290b      	cmp	r1, #11
    a602:	d110      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a604:	e008      	b.n	a618 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    a606:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a60a:	2918      	cmp	r1, #24
    a60c:	d10b      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a60e:	2100      	movs	r1, #0
    a610:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    a614:	2101      	movs	r1, #1
    a616:	e004      	b.n	a622 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    a618:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a61c:	2912      	cmp	r1, #18
    a61e:	d102      	bne.n	a626 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a620:	2100      	movs	r1, #0
    a622:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    a626:	0691      	lsls	r1, r2, #26
    a628:	d501      	bpl.n	a62e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    a62a:	2108      	movs	r1, #8
    a62c:	7059      	strb	r1, [r3, #1]
    a62e:	0611      	lsls	r1, r2, #24
    a630:	d50a      	bpl.n	a648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    a632:	8a82      	ldrh	r2, [r0, #20]
    a634:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    a638:	4620      	mov	r0, r4
    a63a:	f7ff fae3 	bl	9c04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    a63e:	4620      	mov	r0, r4
    a640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a644:	f7ff bafc 	b.w	9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a648:	bd70      	pop	{r4, r5, r6, pc}
    a64a:	0000      	.short	0x0000
    a64c:	20000104 	.word	0x20000104
    a650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a654:	4c1f      	ldr	r4, [pc, #124]	; (a6d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    a656:	2501      	movs	r5, #1
    a658:	6862      	ldr	r2, [r4, #4]
    a65a:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    a65e:	b908      	cbnz	r0, a664 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    a660:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    a664:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    a668:	b909      	cbnz	r1, a66e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    a66a:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    a66e:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    a672:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    a676:	3262      	adds	r2, #98	; 0x62
    a678:	2001      	movs	r0, #1
    a67a:	7290      	strb	r0, [r2, #10]
    a67c:	2000      	movs	r0, #0
    a67e:	f000 f82b 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a682:	6860      	ldr	r0, [r4, #4]
    a684:	302c      	adds	r0, #44	; 0x2c
    a686:	f004 fd98 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a68a:	4606      	mov	r6, r0
    a68c:	6860      	ldr	r0, [r4, #4]
    a68e:	f004 fd40 	bl	f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a692:	b1c0      	cbz	r0, a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a694:	6860      	ldr	r0, [r4, #4]
    a696:	302c      	adds	r0, #44	; 0x2c
    a698:	f004 fd8f 	bl	f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a69c:	6861      	ldr	r1, [r4, #4]
    a69e:	4607      	mov	r7, r0
    a6a0:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    a6a4:	8808      	ldrh	r0, [r1, #0]
    a6a6:	312c      	adds	r1, #44	; 0x2c
    a6a8:	f004 fcf4 	bl	f094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a6ac:	42be      	cmp	r6, r7
    a6ae:	d20a      	bcs.n	a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a6b0:	f7f7 ff54 	bl	255c <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a6b4:	4601      	mov	r1, r0
    a6b6:	1bb8      	subs	r0, r7, r6
    a6b8:	2864      	cmp	r0, #100	; 0x64
    a6ba:	d200      	bcs.n	a6be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    a6bc:	2064      	movs	r0, #100	; 0x64
    a6be:	f7f7 fe41 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a6c2:	b100      	cbz	r0, a6c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a6c4:	2500      	movs	r5, #0
    a6c6:	2104      	movs	r1, #4
    a6c8:	6860      	ldr	r0, [r4, #4]
    a6ca:	f7fe f9e9 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a6ce:	4628      	mov	r0, r5
    a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a6d4:	20000104 	.word	0x20000104
    a6d8:	b510      	push	{r4, lr}
    a6da:	4c10      	ldr	r4, [pc, #64]	; (a71c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    a6dc:	6861      	ldr	r1, [r4, #4]
    a6de:	880a      	ldrh	r2, [r1, #0]
    a6e0:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    a6e4:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    a6e8:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    a6ec:	f005 f872 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6f0:	6861      	ldr	r1, [r4, #4]
    a6f2:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    a6f6:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    a6fa:	f005 f86b 	bl	f7d4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6fe:	6862      	ldr	r2, [r4, #4]
    a700:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    a704:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    a708:	2001      	movs	r0, #1
    a70a:	7008      	strb	r0, [r1, #0]
    a70c:	2000      	movs	r0, #0
    a70e:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    a712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a716:	f000 bf33 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a71a:	0000      	.short	0x0000
    a71c:	20000104 	.word	0x20000104
    a720:	490f      	ldr	r1, [pc, #60]	; (a760 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    a722:	280c      	cmp	r0, #12
    a724:	6849      	ldr	r1, [r1, #4]
    a726:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    a72a:	d014      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a72c:	2813      	cmp	r0, #19
    a72e:	d012      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a730:	2818      	cmp	r0, #24
    a732:	d010      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a734:	2200      	movs	r2, #0
    a736:	2811      	cmp	r0, #17
    a738:	d00e      	beq.n	a758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a73a:	2807      	cmp	r0, #7
    a73c:	d00b      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a73e:	2815      	cmp	r0, #21
    a740:	d00a      	beq.n	a758 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a742:	2801      	cmp	r0, #1
    a744:	d007      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a746:	2800      	cmp	r0, #0
    a748:	d005      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a74a:	2802      	cmp	r0, #2
    a74c:	d003      	beq.n	a756 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a74e:	f821 2fb4 	strh.w	r2, [r1, #180]!
    a752:	2001      	movs	r0, #1
    a754:	7108      	strb	r0, [r1, #4]
    a756:	4770      	bx	lr
    a758:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a75c:	4770      	bx	lr
    a75e:	0000      	.short	0x0000
    a760:	20000104 	.word	0x20000104
    a764:	b538      	push	{r3, r4, r5, lr}
    a766:	4c11      	ldr	r4, [pc, #68]	; (a7ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    a768:	6862      	ldr	r2, [r4, #4]
    a76a:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    a76e:	f8ad 2000 	strh.w	r2, [sp]
    a772:	f004 f9e4 	bl	eb3e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a776:	f89d 3000 	ldrb.w	r3, [sp]
    a77a:	b2c2      	uxtb	r2, r0
    a77c:	2100      	movs	r1, #0
    a77e:	4293      	cmp	r3, r2
    a780:	d003      	beq.n	a78a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    a782:	6863      	ldr	r3, [r4, #4]
    a784:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    a788:	e002      	b.n	a790 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    a78a:	6862      	ldr	r2, [r4, #4]
    a78c:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    a790:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a794:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a798:	4282      	cmp	r2, r0
    a79a:	d003      	beq.n	a7a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    a79c:	6861      	ldr	r1, [r4, #4]
    a79e:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    a7a2:	bd38      	pop	{r3, r4, r5, pc}
    a7a4:	6860      	ldr	r0, [r4, #4]
    a7a6:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    a7aa:	bd38      	pop	{r3, r4, r5, pc}
    a7ac:	20000104 	.word	0x20000104
    a7b0:	b510      	push	{r4, lr}
    a7b2:	4c0c      	ldr	r4, [pc, #48]	; (a7e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    a7b4:	6861      	ldr	r1, [r4, #4]
    a7b6:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a7ba:	2813      	cmp	r0, #19
    a7bc:	d001      	beq.n	a7c2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    a7be:	2002      	movs	r0, #2
    a7c0:	bd10      	pop	{r4, pc}
    a7c2:	f201 117d 	addw	r1, r1, #381	; 0x17d
    a7c6:	68e0      	ldr	r0, [r4, #12]
    a7c8:	f004 faf4 	bl	edb4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    a7cc:	6861      	ldr	r1, [r4, #4]
    a7ce:	68e0      	ldr	r0, [r4, #12]
    a7d0:	31f4      	adds	r1, #244	; 0xf4
    a7d2:	f004 faec 	bl	edae <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    a7d6:	6861      	ldr	r1, [r4, #4]
    a7d8:	2016      	movs	r0, #22
    a7da:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a7de:	2000      	movs	r0, #0
    a7e0:	bd10      	pop	{r4, pc}
    a7e2:	0000      	.short	0x0000
    a7e4:	20000104 	.word	0x20000104
    a7e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a7ea:	4c1d      	ldr	r4, [pc, #116]	; (a860 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    a7ec:	2300      	movs	r3, #0
    a7ee:	2107      	movs	r1, #7
    a7f0:	6860      	ldr	r0, [r4, #4]
    a7f2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a7f6:	3078      	adds	r0, #120	; 0x78
    a7f8:	f004 f8c8 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a7fc:	b370      	cbz	r0, a85c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    a7fe:	4669      	mov	r1, sp
    a800:	68e0      	ldr	r0, [r4, #12]
    a802:	f004 fadc 	bl	edbe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    a806:	f001 fbdd 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a80a:	f644 112f 	movw	r1, #18735	; 0x492f
    a80e:	4008      	ands	r0, r1
    a810:	f89d 2000 	ldrb.w	r2, [sp]
    a814:	6861      	ldr	r1, [r4, #4]
    a816:	4002      	ands	r2, r0
    a818:	2500      	movs	r5, #0
    a81a:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    a81e:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a822:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    a826:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    a82a:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    a82e:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    a832:	8808      	ldrh	r0, [r1, #0]
    a834:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    a838:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    a83c:	9a00      	ldr	r2, [sp, #0]
    a83e:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    a842:	9a01      	ldr	r2, [sp, #4]
    a844:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    a848:	2001      	movs	r0, #1
    a84a:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    a84e:	f000 fe97 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a852:	6860      	ldr	r0, [r4, #4]
    a854:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a858:	2000      	movs	r0, #0
    a85a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a85c:	2001      	movs	r0, #1
    a85e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a860:	20000104 	.word	0x20000104
    a864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a868:	4c19      	ldr	r4, [pc, #100]	; (a8d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    a86a:	2600      	movs	r6, #0
    a86c:	2703      	movs	r7, #3
    a86e:	f8d4 c004 	ldr.w	ip, [r4, #4]
    a872:	2501      	movs	r5, #1
    a874:	b1a0      	cbz	r0, a8a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    a876:	68e0      	ldr	r0, [r4, #12]
    a878:	78c0      	ldrb	r0, [r0, #3]
    a87a:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    a87e:	fa05 f000 	lsl.w	r0, r5, r0
    a882:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    a886:	b130      	cbz	r0, a896 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    a888:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    a88c:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    a890:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    a894:	e017      	b.n	a8c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    a896:	f240 5143 	movw	r1, #1347	; 0x543
    a89a:	2036      	movs	r0, #54	; 0x36
    a89c:	f7fa fa3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a8a0:	2300      	movs	r3, #0
    a8a2:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    a8a6:	4619      	mov	r1, r3
    a8a8:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    a8ac:	f004 f86e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8b0:	b160      	cbz	r0, a8cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    a8b2:	68e0      	ldr	r0, [r4, #12]
    a8b4:	78c1      	ldrb	r1, [r0, #3]
    a8b6:	6860      	ldr	r0, [r4, #4]
    a8b8:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    a8bc:	f800 7f86 	strb.w	r7, [r0, #134]!
    a8c0:	8686      	strh	r6, [r0, #52]	; 0x34
    a8c2:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    a8c6:	2000      	movs	r0, #0
    a8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a8cc:	2001      	movs	r0, #1
    a8ce:	e7fb      	b.n	a8c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    a8d0:	20000104 	.word	0x20000104
    a8d4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a8d8:	4c30      	ldr	r4, [pc, #192]	; (a99c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    a8da:	2300      	movs	r3, #0
    a8dc:	4619      	mov	r1, r3
    a8de:	6860      	ldr	r0, [r4, #4]
    a8e0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a8e4:	3078      	adds	r0, #120	; 0x78
    a8e6:	f004 f851 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a8ea:	b308      	cbz	r0, a930 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    a8ec:	68e0      	ldr	r0, [r4, #12]
    a8ee:	f004 fa7b 	bl	ede8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a8f2:	b300      	cbz	r0, a936 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    a8f4:	68e0      	ldr	r0, [r4, #12]
    a8f6:	f004 fa6d 	bl	edd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a8fa:	4607      	mov	r7, r0
    a8fc:	68e0      	ldr	r0, [r4, #12]
    a8fe:	f004 fa6d 	bl	eddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a902:	4606      	mov	r6, r0
    a904:	68e0      	ldr	r0, [r4, #12]
    a906:	f004 fa63 	bl	edd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a90a:	4605      	mov	r5, r0
    a90c:	68e0      	ldr	r0, [r4, #12]
    a90e:	f004 fa63 	bl	edd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a912:	4601      	mov	r1, r0
    a914:	9700      	str	r7, [sp, #0]
    a916:	6860      	ldr	r0, [r4, #4]
    a918:	4633      	mov	r3, r6
    a91a:	462a      	mov	r2, r5
    a91c:	302c      	adds	r0, #44	; 0x2c
    a91e:	f004 fc86 	bl	f22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a922:	6861      	ldr	r1, [r4, #4]
    a924:	2501      	movs	r5, #1
    a926:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a92a:	281c      	cmp	r0, #28
    a92c:	d008      	beq.n	a940 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    a92e:	e009      	b.n	a944 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    a930:	2001      	movs	r0, #1
    a932:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    a936:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    a93a:	2000      	movs	r0, #0
    a93c:	f7ff bf92 	b.w	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a940:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    a944:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a948:	2801      	cmp	r0, #1
    a94a:	d011      	beq.n	a970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a94c:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    a950:	f88d 0004 	strb.w	r0, [sp, #4]
    a954:	9801      	ldr	r0, [sp, #4]
    a956:	9001      	str	r0, [sp, #4]
    a958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a95c:	b940      	cbnz	r0, a970 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    a95e:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    a962:	f88d 0000 	strb.w	r0, [sp]
    a966:	9800      	ldr	r0, [sp, #0]
    a968:	9000      	str	r0, [sp, #0]
    a96a:	f89d 0000 	ldrb.w	r0, [sp]
    a96e:	b118      	cbz	r0, a978 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    a970:	201e      	movs	r0, #30
    a972:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a976:	e00a      	b.n	a98e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    a978:	201d      	movs	r0, #29
    a97a:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a97e:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    a982:	f831 0b2c 	ldrh.w	r0, [r1], #44
    a986:	f004 fc59 	bl	f23c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    a98a:	f000 fdf9 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a98e:	6860      	ldr	r0, [r4, #4]
    a990:	2100      	movs	r1, #0
    a992:	f820 1fba 	strh.w	r1, [r0, #186]!
    a996:	7085      	strb	r5, [r0, #2]
    a998:	4608      	mov	r0, r1
    a99a:	e7ca      	b.n	a932 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    a99c:	20000104 	.word	0x20000104
    a9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9a2:	4c1a      	ldr	r4, [pc, #104]	; (aa0c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    a9a4:	2300      	movs	r3, #0
    a9a6:	210a      	movs	r1, #10
    a9a8:	6860      	ldr	r0, [r4, #4]
    a9aa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a9ae:	3078      	adds	r0, #120	; 0x78
    a9b0:	f003 ffec 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a9b4:	b338      	cbz	r0, aa06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    a9b6:	68e0      	ldr	r0, [r4, #12]
    a9b8:	f004 fa16 	bl	ede8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    a9bc:	b1c8      	cbz	r0, a9f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    a9be:	68e0      	ldr	r0, [r4, #12]
    a9c0:	f004 fa08 	bl	edd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    a9c4:	4607      	mov	r7, r0
    a9c6:	68e0      	ldr	r0, [r4, #12]
    a9c8:	f004 fa08 	bl	eddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    a9cc:	4606      	mov	r6, r0
    a9ce:	68e0      	ldr	r0, [r4, #12]
    a9d0:	f004 f9fe 	bl	edd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    a9d4:	4605      	mov	r5, r0
    a9d6:	68e0      	ldr	r0, [r4, #12]
    a9d8:	f004 f9fe 	bl	edd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    a9dc:	4601      	mov	r1, r0
    a9de:	9700      	str	r7, [sp, #0]
    a9e0:	6860      	ldr	r0, [r4, #4]
    a9e2:	4633      	mov	r3, r6
    a9e4:	462a      	mov	r2, r5
    a9e6:	302c      	adds	r0, #44	; 0x2c
    a9e8:	f004 fc21 	bl	f22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    a9ec:	6860      	ldr	r0, [r4, #4]
    a9ee:	f004 fb90 	bl	f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a9f2:	6861      	ldr	r1, [r4, #4]
    a9f4:	2000      	movs	r0, #0
    a9f6:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    a9fa:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a9fe:	f7ff fabf 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    aa02:	2000      	movs	r0, #0
    aa04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa06:	2001      	movs	r0, #1
    aa08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa0a:	0000      	.short	0x0000
    aa0c:	20000104 	.word	0x20000104
    aa10:	b510      	push	{r4, lr}
    aa12:	4c0b      	ldr	r4, [pc, #44]	; (aa40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    aa14:	2300      	movs	r3, #0
    aa16:	4619      	mov	r1, r3
    aa18:	6860      	ldr	r0, [r4, #4]
    aa1a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aa1e:	3078      	adds	r0, #120	; 0x78
    aa20:	f003 ffb4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa24:	b150      	cbz	r0, aa3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    aa26:	6860      	ldr	r0, [r4, #4]
    aa28:	2100      	movs	r1, #0
    aa2a:	f820 1fba 	strh.w	r1, [r0, #186]!
    aa2e:	2101      	movs	r1, #1
    aa30:	7081      	strb	r1, [r0, #2]
    aa32:	2102      	movs	r1, #2
    aa34:	f800 1c34 	strb.w	r1, [r0, #-52]
    aa38:	2000      	movs	r0, #0
    aa3a:	bd10      	pop	{r4, pc}
    aa3c:	2001      	movs	r0, #1
    aa3e:	bd10      	pop	{r4, pc}
    aa40:	20000104 	.word	0x20000104
    aa44:	b510      	push	{r4, lr}
    aa46:	4c09      	ldr	r4, [pc, #36]	; (aa6c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    aa48:	2300      	movs	r3, #0
    aa4a:	2109      	movs	r1, #9
    aa4c:	6860      	ldr	r0, [r4, #4]
    aa4e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa52:	3078      	adds	r0, #120	; 0x78
    aa54:	f003 ff9a 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa58:	2800      	cmp	r0, #0
    aa5a:	d006      	beq.n	aa6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    aa5c:	6861      	ldr	r1, [r4, #4]
    aa5e:	2000      	movs	r0, #0
    aa60:	f801 0fac 	strb.w	r0, [r1, #172]!
    aa64:	7308      	strb	r0, [r1, #12]
    aa66:	f801 0c27 	strb.w	r0, [r1, #-39]
    aa6a:	bd10      	pop	{r4, pc}
    aa6c:	20000104 	.word	0x20000104
    aa70:	4807      	ldr	r0, [pc, #28]	; (aa90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    aa72:	6840      	ldr	r0, [r0, #4]
    aa74:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aa78:	290f      	cmp	r1, #15
    aa7a:	d001      	beq.n	aa80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    aa7c:	2002      	movs	r0, #2
    aa7e:	4770      	bx	lr
    aa80:	2100      	movs	r1, #0
    aa82:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    aa86:	2112      	movs	r1, #18
    aa88:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    aa8c:	2000      	movs	r0, #0
    aa8e:	4770      	bx	lr
    aa90:	20000104 	.word	0x20000104
    aa94:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa96:	4c42      	ldr	r4, [pc, #264]	; (aba0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    aa98:	2600      	movs	r6, #0
    aa9a:	b087      	sub	sp, #28
    aa9c:	6860      	ldr	r0, [r4, #4]
    aa9e:	4633      	mov	r3, r6
    aaa0:	4631      	mov	r1, r6
    aaa2:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aaa6:	3078      	adds	r0, #120	; 0x78
    aaa8:	f003 ff70 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aaac:	b180      	cbz	r0, aad0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    aaae:	6860      	ldr	r0, [r4, #4]
    aab0:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aab4:	2823      	cmp	r0, #35	; 0x23
    aab6:	d00e      	beq.n	aad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    aab8:	2824      	cmp	r0, #36	; 0x24
    aaba:	d00c      	beq.n	aad6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    aabc:	4668      	mov	r0, sp
    aabe:	f7fa ff25 	bl	590c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    aac2:	b150      	cbz	r0, aada <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    aac4:	9800      	ldr	r0, [sp, #0]
    aac6:	a901      	add	r1, sp, #4
    aac8:	78c0      	ldrb	r0, [r0, #3]
    aaca:	f88d 0004 	strb.w	r0, [sp, #4]
    aace:	e005      	b.n	aadc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    aad0:	2001      	movs	r0, #1
    aad2:	b007      	add	sp, #28
    aad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    aad6:	2020      	movs	r0, #32
    aad8:	e7fb      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    aada:	2100      	movs	r1, #0
    aadc:	6860      	ldr	r0, [r4, #4]
    aade:	ab04      	add	r3, sp, #16
    aae0:	2216      	movs	r2, #22
    aae2:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    aae6:	f004 f80d 	bl	eb04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    aaea:	2700      	movs	r7, #0
    aaec:	2501      	movs	r5, #1
    aaee:	b178      	cbz	r0, ab10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    aaf0:	6860      	ldr	r0, [r4, #4]
    aaf2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    aaf6:	2216      	movs	r2, #22
    aaf8:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    aafc:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    ab00:	2119      	movs	r1, #25
    ab02:	f800 1f86 	strb.w	r1, [r0, #134]!
    ab06:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ab0a:	8687      	strh	r7, [r0, #52]	; 0x34
    ab0c:	2000      	movs	r0, #0
    ab0e:	e7e0      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ab10:	68e0      	ldr	r0, [r4, #12]
    ab12:	f004 f985 	bl	ee20 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    ab16:	b1a8      	cbz	r0, ab44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    ab18:	68e1      	ldr	r1, [r4, #12]
    ab1a:	7908      	ldrb	r0, [r1, #4]
    ab1c:	f000 0207 	and.w	r2, r0, #7
    ab20:	6860      	ldr	r0, [r4, #4]
    ab22:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    ab26:	7949      	ldrb	r1, [r1, #5]
    ab28:	f001 0107 	and.w	r1, r1, #7
    ab2c:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    ab30:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    ab34:	f88d 3018 	strb.w	r3, [sp, #24]
    ab38:	9b06      	ldr	r3, [sp, #24]
    ab3a:	9301      	str	r3, [sp, #4]
    ab3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ab40:	bb23      	cbnz	r3, ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab42:	e004      	b.n	ab4e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    ab44:	2000      	movs	r0, #0
    ab46:	f7ff fe8d 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    ab4a:	4606      	mov	r6, r0
    ab4c:	e025      	b.n	ab9a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    ab4e:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    ab52:	2b01      	cmp	r3, #1
    ab54:	d01a      	beq.n	ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab56:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    ab5a:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    ab5e:	4594      	cmp	ip, r2
    ab60:	d106      	bne.n	ab70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ab62:	781a      	ldrb	r2, [r3, #0]
    ab64:	428a      	cmp	r2, r1
    ab66:	d103      	bne.n	ab70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ab68:	2102      	movs	r1, #2
    ab6a:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    ab6e:	e00d      	b.n	ab8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ab70:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    ab74:	8802      	ldrh	r2, [r0, #0]
    ab76:	f821 2902 	strh.w	r2, [r1], #-2
    ab7a:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    ab7e:	710a      	strb	r2, [r1, #4]
    ab80:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    ab84:	7148      	strb	r0, [r1, #5]
    ab86:	700d      	strb	r5, [r1, #0]
    ab88:	f000 fcfa 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ab8c:	6860      	ldr	r0, [r4, #4]
    ab8e:	2121      	movs	r1, #33	; 0x21
    ab90:	f800 1f86 	strb.w	r1, [r0, #134]!
    ab94:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ab98:	8687      	strh	r7, [r0, #52]	; 0x34
    ab9a:	4630      	mov	r0, r6
    ab9c:	e799      	b.n	aad2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ab9e:	0000      	.short	0x0000
    aba0:	20000104 	.word	0x20000104
    aba4:	b570      	push	{r4, r5, r6, lr}
    aba6:	4c18      	ldr	r4, [pc, #96]	; (ac08 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    aba8:	6860      	ldr	r0, [r4, #4]
    abaa:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    abae:	281f      	cmp	r0, #31
    abb0:	d001      	beq.n	abb6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    abb2:	2001      	movs	r0, #1
    abb4:	bd70      	pop	{r4, r5, r6, pc}
    abb6:	68e0      	ldr	r0, [r4, #12]
    abb8:	f004 f93c 	bl	ee34 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    abbc:	b1d8      	cbz	r0, abf6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    abbe:	68e0      	ldr	r0, [r4, #12]
    abc0:	2201      	movs	r2, #1
    abc2:	7901      	ldrb	r1, [r0, #4]
    abc4:	7940      	ldrb	r0, [r0, #5]
    abc6:	f001 0107 	and.w	r1, r1, #7
    abca:	f361 0507 	bfi	r5, r1, #0, #8
    abce:	4629      	mov	r1, r5
    abd0:	f000 0007 	and.w	r0, r0, #7
    abd4:	f360 210f 	bfi	r1, r0, #8, #8
    abd8:	6860      	ldr	r0, [r4, #4]
    abda:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    abde:	2200      	movs	r2, #0
    abe0:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    abe4:	2223      	movs	r2, #35	; 0x23
    abe6:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    abea:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    abee:	f7ff fdb9 	bl	a764 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    abf2:	2000      	movs	r0, #0
    abf4:	bd70      	pop	{r4, r5, r6, pc}
    abf6:	2001      	movs	r0, #1
    abf8:	f7ff fe34 	bl	a864 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    abfc:	4604      	mov	r4, r0
    abfe:	201e      	movs	r0, #30
    ac00:	f7ff fd6a 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ac04:	4620      	mov	r0, r4
    ac06:	bd70      	pop	{r4, r5, r6, pc}
    ac08:	20000104 	.word	0x20000104
    ac0c:	b570      	push	{r4, r5, r6, lr}
    ac0e:	4d07      	ldr	r5, [pc, #28]	; (ac2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    ac10:	2400      	movs	r4, #0
    ac12:	68e8      	ldr	r0, [r5, #12]
    ac14:	f004 f918 	bl	ee48 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ac18:	2803      	cmp	r0, #3
    ac1a:	d105      	bne.n	ac28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    ac1c:	68e8      	ldr	r0, [r5, #12]
    ac1e:	f004 f915 	bl	ee4c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ac22:	f000 f805 	bl	ac30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    ac26:	4604      	mov	r4, r0
    ac28:	4620      	mov	r0, r4
    ac2a:	bd70      	pop	{r4, r5, r6, pc}
    ac2c:	20000104 	.word	0x20000104
    ac30:	b570      	push	{r4, r5, r6, lr}
    ac32:	4d18      	ldr	r5, [pc, #96]	; (ac94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    ac34:	6869      	ldr	r1, [r5, #4]
    ac36:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    ac3a:	2a16      	cmp	r2, #22
    ac3c:	d001      	beq.n	ac42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    ac3e:	2a13      	cmp	r2, #19
    ac40:	d102      	bne.n	ac48 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    ac42:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    ac46:	b10a      	cbz	r2, ac4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    ac48:	2002      	movs	r0, #2
    ac4a:	bd70      	pop	{r4, r5, r6, pc}
    ac4c:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    ac50:	2400      	movs	r4, #0
    ac52:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    ac56:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    ac5a:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    ac5e:	b122      	cbz	r2, ac6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    ac60:	f240 21eb 	movw	r1, #747	; 0x2eb
    ac64:	2036      	movs	r0, #54	; 0x36
    ac66:	f7fa f857 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac6a:	880a      	ldrh	r2, [r1, #0]
    ac6c:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    ac70:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    ac74:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    ac78:	200d      	movs	r0, #13
    ac7a:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    ac7e:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    ac82:	f000 fb9b 	bl	b3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    ac86:	f000 fc7b 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ac8a:	6868      	ldr	r0, [r5, #4]
    ac8c:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ac90:	2000      	movs	r0, #0
    ac92:	bd70      	pop	{r4, r5, r6, pc}
    ac94:	20000104 	.word	0x20000104
    ac98:	4802      	ldr	r0, [pc, #8]	; (aca4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    ac9a:	68c0      	ldr	r0, [r0, #12]
    ac9c:	7900      	ldrb	r0, [r0, #4]
    ac9e:	f7ff bfc7 	b.w	ac30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    aca2:	0000      	.short	0x0000
    aca4:	20000104 	.word	0x20000104
    aca8:	b510      	push	{r4, lr}
    acaa:	4c0e      	ldr	r4, [pc, #56]	; (ace4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    acac:	6860      	ldr	r0, [r4, #4]
    acae:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acb2:	2916      	cmp	r1, #22
    acb4:	d001      	beq.n	acba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    acb6:	2002      	movs	r0, #2
    acb8:	bd10      	pop	{r4, pc}
    acba:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    acbe:	f200 1175 	addw	r1, r0, #373	; 0x175
    acc2:	2200      	movs	r2, #0
    acc4:	f200 1065 	addw	r0, r0, #357	; 0x165
    acc8:	f003 fde2 	bl	e890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    accc:	6860      	ldr	r0, [r4, #4]
    acce:	2100      	movs	r1, #0
    acd0:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    acd4:	2101      	movs	r1, #1
    acd6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    acda:	2118      	movs	r1, #24
    acdc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    ace0:	2000      	movs	r0, #0
    ace2:	bd10      	pop	{r4, pc}
    ace4:	20000104 	.word	0x20000104
    ace8:	b570      	push	{r4, r5, r6, lr}
    acea:	4d1b      	ldr	r5, [pc, #108]	; (ad58 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    acec:	6868      	ldr	r0, [r5, #4]
    acee:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acf2:	291a      	cmp	r1, #26
    acf4:	d001      	beq.n	acfa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    acf6:	2002      	movs	r0, #2
    acf8:	bd70      	pop	{r4, r5, r6, pc}
    acfa:	2400      	movs	r4, #0
    acfc:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    ad00:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    ad04:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    ad08:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    ad0c:	b121      	cbz	r1, ad18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    ad0e:	f240 3113 	movw	r1, #787	; 0x313
    ad12:	2036      	movs	r0, #54	; 0x36
    ad14:	f7fa f800 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ad18:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    ad1c:	b141      	cbz	r1, ad30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    ad1e:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    ad22:	8801      	ldrh	r1, [r0, #0]
    ad24:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    ad28:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    ad2c:	210e      	movs	r1, #14
    ad2e:	e008      	b.n	ad42 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    ad30:	8801      	ldrh	r1, [r0, #0]
    ad32:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    ad36:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    ad3a:	2101      	movs	r1, #1
    ad3c:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    ad40:	210d      	movs	r1, #13
    ad42:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    ad46:	f000 fb39 	bl	b3bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    ad4a:	f000 fc19 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ad4e:	6868      	ldr	r0, [r5, #4]
    ad50:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    ad54:	2000      	movs	r0, #0
    ad56:	bd70      	pop	{r4, r5, r6, pc}
    ad58:	20000104 	.word	0x20000104
    ad5c:	b510      	push	{r4, lr}
    ad5e:	4c0d      	ldr	r4, [pc, #52]	; (ad94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    ad60:	2300      	movs	r3, #0
    ad62:	2101      	movs	r1, #1
    ad64:	6860      	ldr	r0, [r4, #4]
    ad66:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    ad6a:	3078      	adds	r0, #120	; 0x78
    ad6c:	f003 fe0e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ad70:	b108      	cbz	r0, ad76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    ad72:	2000      	movs	r0, #0
    ad74:	bd10      	pop	{r4, pc}
    ad76:	68e0      	ldr	r0, [r4, #12]
    ad78:	f004 f832 	bl	ede0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    ad7c:	6861      	ldr	r1, [r4, #4]
    ad7e:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    ad82:	2007      	movs	r0, #7
    ad84:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    ad88:	2000      	movs	r0, #0
    ad8a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    ad8e:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    ad92:	e7ee      	b.n	ad72 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    ad94:	20000104 	.word	0x20000104
    ad98:	b570      	push	{r4, r5, r6, lr}
    ad9a:	4c25      	ldr	r4, [pc, #148]	; (ae30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    ad9c:	2600      	movs	r6, #0
    ad9e:	2109      	movs	r1, #9
    ada0:	6860      	ldr	r0, [r4, #4]
    ada2:	4633      	mov	r3, r6
    ada4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ada8:	3078      	adds	r0, #120	; 0x78
    adaa:	f003 fdef 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adae:	2500      	movs	r5, #0
    adb0:	b118      	cbz	r0, adba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    adb2:	68e0      	ldr	r0, [r4, #12]
    adb4:	7900      	ldrb	r0, [r0, #4]
    adb6:	2812      	cmp	r0, #18
    adb8:	d011      	beq.n	adde <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    adba:	6860      	ldr	r0, [r4, #4]
    adbc:	210a      	movs	r1, #10
    adbe:	2300      	movs	r3, #0
    adc0:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    adc4:	3078      	adds	r0, #120	; 0x78
    adc6:	f003 fde1 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    adca:	b118      	cbz	r0, add4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    adcc:	68e0      	ldr	r0, [r4, #12]
    adce:	7900      	ldrb	r0, [r0, #4]
    add0:	2814      	cmp	r0, #20
    add2:	d008      	beq.n	ade6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    add4:	68e0      	ldr	r0, [r4, #12]
    add6:	7900      	ldrb	r0, [r0, #4]
    add8:	2816      	cmp	r0, #22
    adda:	d012      	beq.n	ae02 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    addc:	e026      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    adde:	f7ff fe31 	bl	aa44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    ade2:	4606      	mov	r6, r0
    ade4:	e022      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ade6:	6860      	ldr	r0, [r4, #4]
    ade8:	2105      	movs	r1, #5
    adea:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    adee:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    adf2:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    adf6:	30c6      	adds	r0, #198	; 0xc6
    adf8:	f004 fc6f 	bl	f6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    adfc:	f7ff f8c0 	bl	9f80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    ae00:	e014      	b.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ae02:	6860      	ldr	r0, [r4, #4]
    ae04:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    ae08:	291f      	cmp	r1, #31
    ae0a:	d10f      	bne.n	ae2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    ae0c:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    ae10:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    ae14:	2108      	movs	r1, #8
    ae16:	30c6      	adds	r0, #198	; 0xc6
    ae18:	f004 fc5f 	bl	f6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    ae1c:	6860      	ldr	r0, [r4, #4]
    ae1e:	210b      	movs	r1, #11
    ae20:	30c6      	adds	r0, #198	; 0xc6
    ae22:	f004 fc5a 	bl	f6da <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x162>
    ae26:	201a      	movs	r0, #26
    ae28:	f7ff fc56 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ae2c:	4630      	mov	r0, r6
    ae2e:	bd70      	pop	{r4, r5, r6, pc}
    ae30:	20000104 	.word	0x20000104
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	4c32      	ldr	r4, [pc, #200]	; (af00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    ae38:	2300      	movs	r3, #0
    ae3a:	4619      	mov	r1, r3
    ae3c:	6860      	ldr	r0, [r4, #4]
    ae3e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ae42:	3078      	adds	r0, #120	; 0x78
    ae44:	f003 fda2 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae48:	b940      	cbnz	r0, ae5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    ae4a:	6860      	ldr	r0, [r4, #4]
    ae4c:	2300      	movs	r3, #0
    ae4e:	2108      	movs	r1, #8
    ae50:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ae54:	3078      	adds	r0, #120	; 0x78
    ae56:	f003 fd99 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ae5a:	b1f8      	cbz	r0, ae9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    ae5c:	6860      	ldr	r0, [r4, #4]
    ae5e:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    ae62:	0780      	lsls	r0, r0, #30
    ae64:	d412      	bmi.n	ae8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    ae66:	68e0      	ldr	r0, [r4, #12]
    ae68:	f003 ffbc 	bl	ede4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    ae6c:	6861      	ldr	r1, [r4, #4]
    ae6e:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    ae72:	68e0      	ldr	r0, [r4, #12]
    ae74:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    ae78:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    ae7c:	8840      	ldrh	r0, [r0, #2]
    ae7e:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    ae82:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    ae86:	f040 0002 	orr.w	r0, r0, #2
    ae8a:	7008      	strb	r0, [r1, #0]
    ae8c:	6860      	ldr	r0, [r4, #4]
    ae8e:	f04f 0500 	mov.w	r5, #0
    ae92:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    ae96:	07c9      	lsls	r1, r1, #31
    ae98:	d002      	beq.n	aea0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    ae9a:	e010      	b.n	aebe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    ae9c:	2001      	movs	r0, #1
    ae9e:	bd70      	pop	{r4, r5, r6, pc}
    aea0:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    aea4:	2300      	movs	r3, #0
    aea6:	4619      	mov	r1, r3
    aea8:	3078      	adds	r0, #120	; 0x78
    aeaa:	f003 fd6f 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aeae:	b160      	cbz	r0, aeca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    aeb0:	6860      	ldr	r0, [r4, #4]
    aeb2:	2101      	movs	r1, #1
    aeb4:	f800 1f86 	strb.w	r1, [r0, #134]!
    aeb8:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    aebc:	8685      	strh	r5, [r0, #52]	; 0x34
    aebe:	6860      	ldr	r0, [r4, #4]
    aec0:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aec4:	2901      	cmp	r1, #1
    aec6:	d005      	beq.n	aed4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    aec8:	e00a      	b.n	aee0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    aeca:	f240 314e 	movw	r1, #846	; 0x34e
    aece:	2036      	movs	r0, #54	; 0x36
    aed0:	f7f9 ff22 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aed4:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aed8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aedc:	f000 fb50 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aee0:	6860      	ldr	r0, [r4, #4]
    aee2:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    aee6:	b149      	cbz	r1, aefc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    aee8:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    aeec:	f000 fb48 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aef0:	6860      	ldr	r0, [r4, #4]
    aef2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aef6:	b909      	cbnz	r1, aefc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    aef8:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    aefc:	2000      	movs	r0, #0
    aefe:	bd70      	pop	{r4, r5, r6, pc}
    af00:	20000104 	.word	0x20000104
    af04:	b510      	push	{r4, lr}
    af06:	4c0a      	ldr	r4, [pc, #40]	; (af30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    af08:	2300      	movs	r3, #0
    af0a:	4619      	mov	r1, r3
    af0c:	6860      	ldr	r0, [r4, #4]
    af0e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af12:	3078      	adds	r0, #120	; 0x78
    af14:	f003 fd3a 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af18:	b120      	cbz	r0, af24 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    af1a:	6861      	ldr	r1, [r4, #4]
    af1c:	200c      	movs	r0, #12
    af1e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af22:	bd10      	pop	{r4, pc}
    af24:	f240 51fa 	movw	r1, #1530	; 0x5fa
    af28:	2036      	movs	r0, #54	; 0x36
    af2a:	f7f9 fef5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af2e:	0000      	.short	0x0000
    af30:	20000104 	.word	0x20000104
    af34:	b510      	push	{r4, lr}
    af36:	4c0a      	ldr	r4, [pc, #40]	; (af60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    af38:	2300      	movs	r3, #0
    af3a:	4619      	mov	r1, r3
    af3c:	6860      	ldr	r0, [r4, #4]
    af3e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af42:	3078      	adds	r0, #120	; 0x78
    af44:	f003 fd22 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af48:	b120      	cbz	r0, af54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    af4a:	6861      	ldr	r1, [r4, #4]
    af4c:	200d      	movs	r0, #13
    af4e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    af52:	bd10      	pop	{r4, pc}
    af54:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    af58:	2036      	movs	r0, #54	; 0x36
    af5a:	f7f9 fedd 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af5e:	0000      	.short	0x0000
    af60:	20000104 	.word	0x20000104
    af64:	b510      	push	{r4, lr}
    af66:	4c0d      	ldr	r4, [pc, #52]	; (af9c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    af68:	2300      	movs	r3, #0
    af6a:	4619      	mov	r1, r3
    af6c:	6860      	ldr	r0, [r4, #4]
    af6e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    af72:	3078      	adds	r0, #120	; 0x78
    af74:	f003 fd0a 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    af78:	b918      	cbnz	r0, af82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    af7a:	6860      	ldr	r0, [r4, #4]
    af7c:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    af80:	b138      	cbz	r0, af92 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    af82:	6860      	ldr	r0, [r4, #4]
    af84:	2101      	movs	r1, #1
    af86:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    af8a:	2113      	movs	r1, #19
    af8c:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af90:	bd10      	pop	{r4, pc}
    af92:	f240 6115 	movw	r1, #1557	; 0x615
    af96:	2036      	movs	r0, #54	; 0x36
    af98:	f7f9 febe 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af9c:	20000104 	.word	0x20000104
    afa0:	b510      	push	{r4, lr}
    afa2:	4c0a      	ldr	r4, [pc, #40]	; (afcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    afa4:	2300      	movs	r3, #0
    afa6:	4619      	mov	r1, r3
    afa8:	6860      	ldr	r0, [r4, #4]
    afaa:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afae:	3078      	adds	r0, #120	; 0x78
    afb0:	f003 fcec 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afb4:	b120      	cbz	r0, afc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    afb6:	6861      	ldr	r1, [r4, #4]
    afb8:	2004      	movs	r0, #4
    afba:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afbe:	bd10      	pop	{r4, pc}
    afc0:	f240 51f4 	movw	r1, #1524	; 0x5f4
    afc4:	2036      	movs	r0, #54	; 0x36
    afc6:	f7f9 fea7 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    afca:	0000      	.short	0x0000
    afcc:	20000104 	.word	0x20000104
    afd0:	b510      	push	{r4, lr}
    afd2:	4c0a      	ldr	r4, [pc, #40]	; (affc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    afd4:	2300      	movs	r3, #0
    afd6:	4619      	mov	r1, r3
    afd8:	6860      	ldr	r0, [r4, #4]
    afda:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afde:	3078      	adds	r0, #120	; 0x78
    afe0:	f003 fcd4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afe4:	b120      	cbz	r0, aff0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    afe6:	6861      	ldr	r1, [r4, #4]
    afe8:	201c      	movs	r0, #28
    afea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    afee:	bd10      	pop	{r4, pc}
    aff0:	f240 614c 	movw	r1, #1612	; 0x64c
    aff4:	2036      	movs	r0, #54	; 0x36
    aff6:	f7f9 fe8f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    affa:	0000      	.short	0x0000
    affc:	20000104 	.word	0x20000104
    b000:	b510      	push	{r4, lr}
    b002:	4c0a      	ldr	r4, [pc, #40]	; (b02c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    b004:	2300      	movs	r3, #0
    b006:	4619      	mov	r1, r3
    b008:	6860      	ldr	r0, [r4, #4]
    b00a:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b00e:	3078      	adds	r0, #120	; 0x78
    b010:	f003 fcbc 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b014:	b120      	cbz	r0, b020 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    b016:	6861      	ldr	r1, [r4, #4]
    b018:	2000      	movs	r0, #0
    b01a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b01e:	bd10      	pop	{r4, pc}
    b020:	f240 6153 	movw	r1, #1619	; 0x653
    b024:	2036      	movs	r0, #54	; 0x36
    b026:	f7f9 fe77 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b02a:	0000      	.short	0x0000
    b02c:	20000104 	.word	0x20000104
    b030:	b510      	push	{r4, lr}
    b032:	4c0a      	ldr	r4, [pc, #40]	; (b05c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    b034:	2300      	movs	r3, #0
    b036:	4619      	mov	r1, r3
    b038:	6860      	ldr	r0, [r4, #4]
    b03a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b03e:	3078      	adds	r0, #120	; 0x78
    b040:	f003 fca4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b044:	b120      	cbz	r0, b050 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    b046:	6861      	ldr	r1, [r4, #4]
    b048:	2005      	movs	r0, #5
    b04a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b04e:	bd10      	pop	{r4, pc}
    b050:	f240 613f 	movw	r1, #1599	; 0x63f
    b054:	2036      	movs	r0, #54	; 0x36
    b056:	f7f9 fe5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b05a:	0000      	.short	0x0000
    b05c:	20000104 	.word	0x20000104
    b060:	4902      	ldr	r1, [pc, #8]	; (b06c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    b062:	2000      	movs	r0, #0
    b064:	6849      	ldr	r1, [r1, #4]
    b066:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b06a:	4770      	bx	lr
    b06c:	20000104 	.word	0x20000104
    b070:	b510      	push	{r4, lr}
    b072:	4c0b      	ldr	r4, [pc, #44]	; (b0a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    b074:	2300      	movs	r3, #0
    b076:	4619      	mov	r1, r3
    b078:	6860      	ldr	r0, [r4, #4]
    b07a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b07e:	3078      	adds	r0, #120	; 0x78
    b080:	f003 fc84 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b084:	b138      	cbz	r0, b096 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    b086:	6860      	ldr	r0, [r4, #4]
    b088:	2101      	movs	r1, #1
    b08a:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    b08e:	210f      	movs	r1, #15
    b090:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b094:	bd10      	pop	{r4, pc}
    b096:	f240 6106 	movw	r1, #1542	; 0x606
    b09a:	2036      	movs	r0, #54	; 0x36
    b09c:	f7f9 fe3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0a0:	20000104 	.word	0x20000104
    b0a4:	4809      	ldr	r0, [pc, #36]	; (b0cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    b0a6:	b510      	push	{r4, lr}
    b0a8:	6840      	ldr	r0, [r0, #4]
    b0aa:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b0ae:	2912      	cmp	r1, #18
    b0b0:	d004      	beq.n	b0bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    b0b2:	f240 610e 	movw	r1, #1550	; 0x60e
    b0b6:	2036      	movs	r0, #54	; 0x36
    b0b8:	f7f9 fe2e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0bc:	2101      	movs	r1, #1
    b0be:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b0c2:	2111      	movs	r1, #17
    b0c4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b0c8:	bd10      	pop	{r4, pc}
    b0ca:	0000      	.short	0x0000
    b0cc:	20000104 	.word	0x20000104
    b0d0:	b510      	push	{r4, lr}
    b0d2:	4c0a      	ldr	r4, [pc, #40]	; (b0fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    b0d4:	2300      	movs	r3, #0
    b0d6:	4619      	mov	r1, r3
    b0d8:	6860      	ldr	r0, [r4, #4]
    b0da:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b0de:	3078      	adds	r0, #120	; 0x78
    b0e0:	f003 fc54 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0e4:	b120      	cbz	r0, b0f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    b0e6:	6861      	ldr	r1, [r4, #4]
    b0e8:	201f      	movs	r0, #31
    b0ea:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b0ee:	bd10      	pop	{r4, pc}
    b0f0:	f240 615c 	movw	r1, #1628	; 0x65c
    b0f4:	2036      	movs	r0, #54	; 0x36
    b0f6:	f7f9 fe0f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b0fa:	0000      	.short	0x0000
    b0fc:	20000104 	.word	0x20000104
    b100:	b570      	push	{r4, r5, r6, lr}
    b102:	4c1d      	ldr	r4, [pc, #116]	; (b178 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    b104:	6860      	ldr	r0, [r4, #4]
    b106:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    b10a:	b911      	cbnz	r1, b112 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    b10c:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    b110:	b179      	cbz	r1, b132 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    b112:	2100      	movs	r1, #0
    b114:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    b118:	2224      	movs	r2, #36	; 0x24
    b11a:	2500      	movs	r5, #0
    b11c:	2b21      	cmp	r3, #33	; 0x21
    b11e:	d00a      	beq.n	b136 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    b120:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    b124:	2b23      	cmp	r3, #35	; 0x23
    b126:	d01a      	beq.n	b15e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    b128:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    b12c:	2036      	movs	r0, #54	; 0x36
    b12e:	f7f9 fdf3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b132:	2101      	movs	r1, #1
    b134:	e7ee      	b.n	b114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    b136:	b161      	cbz	r1, b152 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    b138:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    b13c:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    b140:	2801      	cmp	r0, #1
    b142:	d102      	bne.n	b14a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    b144:	2000      	movs	r0, #0
    b146:	f7ff fac7 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b14a:	6860      	ldr	r0, [r4, #4]
    b14c:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    b150:	e001      	b.n	b156 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    b152:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    b156:	6860      	ldr	r0, [r4, #4]
    b158:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b15c:	bd70      	pop	{r4, r5, r6, pc}
    b15e:	b129      	cbz	r1, b16c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    b160:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b164:	2000      	movs	r0, #0
    b166:	f7ff fab7 	bl	a6d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b16a:	e001      	b.n	b170 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    b16c:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    b170:	6860      	ldr	r0, [r4, #4]
    b172:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b176:	bd70      	pop	{r4, r5, r6, pc}
    b178:	20000104 	.word	0x20000104
    b17c:	4903      	ldr	r1, [pc, #12]	; (b18c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    b17e:	2000      	movs	r0, #0
    b180:	6849      	ldr	r1, [r1, #4]
    b182:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b186:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b18a:	4770      	bx	lr
    b18c:	20000104 	.word	0x20000104
    b190:	4807      	ldr	r0, [pc, #28]	; (b1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    b192:	b510      	push	{r4, lr}
    b194:	6840      	ldr	r0, [r0, #4]
    b196:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b19a:	2918      	cmp	r1, #24
    b19c:	d004      	beq.n	b1a8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    b19e:	f240 611e 	movw	r1, #1566	; 0x61e
    b1a2:	2036      	movs	r0, #54	; 0x36
    b1a4:	f7f9 fdb8 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1a8:	211a      	movs	r1, #26
    b1aa:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b1ae:	bd10      	pop	{r4, pc}
    b1b0:	20000104 	.word	0x20000104
    b1b4:	b510      	push	{r4, lr}
    b1b6:	4c0a      	ldr	r4, [pc, #40]	; (b1e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    b1b8:	2300      	movs	r3, #0
    b1ba:	2101      	movs	r1, #1
    b1bc:	6860      	ldr	r0, [r4, #4]
    b1be:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b1c2:	3078      	adds	r0, #120	; 0x78
    b1c4:	f003 fbe2 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1c8:	2800      	cmp	r0, #0
    b1ca:	d108      	bne.n	b1de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    b1cc:	6860      	ldr	r0, [r4, #4]
    b1ce:	2108      	movs	r1, #8
    b1d0:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    b1d4:	2100      	movs	r1, #0
    b1d6:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    b1da:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    b1de:	bd10      	pop	{r4, pc}
    b1e0:	20000104 	.word	0x20000104
    b1e4:	b570      	push	{r4, r5, r6, lr}
    b1e6:	4c0e      	ldr	r4, [pc, #56]	; (b220 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    b1e8:	2300      	movs	r3, #0
    b1ea:	4619      	mov	r1, r3
    b1ec:	6860      	ldr	r0, [r4, #4]
    b1ee:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b1f2:	3078      	adds	r0, #120	; 0x78
    b1f4:	f003 fbca 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1f8:	2500      	movs	r5, #0
    b1fa:	b110      	cbz	r0, b202 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    b1fc:	6860      	ldr	r0, [r4, #4]
    b1fe:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b202:	6860      	ldr	r0, [r4, #4]
    b204:	2300      	movs	r3, #0
    b206:	4619      	mov	r1, r3
    b208:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b20c:	3078      	adds	r0, #120	; 0x78
    b20e:	f003 fbbd 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b212:	2800      	cmp	r0, #0
    b214:	d002      	beq.n	b21c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    b216:	6860      	ldr	r0, [r4, #4]
    b218:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b21c:	bd70      	pop	{r4, r5, r6, pc}
    b21e:	0000      	.short	0x0000
    b220:	20000104 	.word	0x20000104
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	4d16      	ldr	r5, [pc, #88]	; (b280 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    b228:	f04f 0400 	mov.w	r4, #0
    b22c:	6868      	ldr	r0, [r5, #4]
    b22e:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    b232:	0789      	lsls	r1, r1, #30
    b234:	d411      	bmi.n	b25a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    b236:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b23a:	2300      	movs	r3, #0
    b23c:	4619      	mov	r1, r3
    b23e:	3078      	adds	r0, #120	; 0x78
    b240:	f003 fba4 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b244:	b120      	cbz	r0, b250 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    b246:	6869      	ldr	r1, [r5, #4]
    b248:	2001      	movs	r0, #1
    b24a:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b24e:	e008      	b.n	b262 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    b250:	f240 612b 	movw	r1, #1579	; 0x62b
    b254:	2036      	movs	r0, #54	; 0x36
    b256:	f7f9 fd5f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b25a:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    b25e:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    b262:	6868      	ldr	r0, [r5, #4]
    b264:	2300      	movs	r3, #0
    b266:	4619      	mov	r1, r3
    b268:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b26c:	3078      	adds	r0, #120	; 0x78
    b26e:	f003 fb8d 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b272:	2800      	cmp	r0, #0
    b274:	d002      	beq.n	b27c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    b276:	6868      	ldr	r0, [r5, #4]
    b278:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    b27c:	bd70      	pop	{r4, r5, r6, pc}
    b27e:	0000      	.short	0x0000
    b280:	20000104 	.word	0x20000104
    b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b286:	4d4c      	ldr	r5, [pc, #304]	; (b3b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    b288:	4607      	mov	r7, r0
    b28a:	460e      	mov	r6, r1
    b28c:	6868      	ldr	r0, [r5, #4]
    b28e:	f100 0478 	add.w	r4, r0, #120	; 0x78
    b292:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    b296:	f88d 0000 	strb.w	r0, [sp]
    b29a:	9800      	ldr	r0, [sp, #0]
    b29c:	9000      	str	r0, [sp, #0]
    b29e:	f89d 0000 	ldrb.w	r0, [sp]
    b2a2:	b930      	cbnz	r0, b2b2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    b2a4:	7c22      	ldrb	r2, [r4, #16]
    b2a6:	2300      	movs	r3, #0
    b2a8:	2101      	movs	r1, #1
    b2aa:	4620      	mov	r0, r4
    b2ac:	f003 fb6e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2b0:	b110      	cbz	r0, b2b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    b2b2:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    b2b4:	1c40      	adds	r0, r0, #1
    b2b6:	8760      	strh	r0, [r4, #58]	; 0x3a
    b2b8:	2001      	movs	r0, #1
    b2ba:	213d      	movs	r1, #61	; 0x3d
    b2bc:	bbf7      	cbnz	r7, b33c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    b2be:	782a      	ldrb	r2, [r5, #0]
    b2c0:	2a02      	cmp	r2, #2
    b2c2:	d006      	beq.n	b2d2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    b2c4:	2a01      	cmp	r2, #1
    b2c6:	d006      	beq.n	b2d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    b2c8:	b1c6      	cbz	r6, b2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    b2ca:	06f2      	lsls	r2, r6, #27
    b2cc:	d507      	bpl.n	b2de <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    b2ce:	211e      	movs	r1, #30
    b2d0:	e043      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2d2:	2116      	movs	r1, #22
    b2d4:	e041      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2d6:	6869      	ldr	r1, [r5, #4]
    b2d8:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    b2dc:	e03d      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2de:	0732      	lsls	r2, r6, #28
    b2e0:	d43b      	bmi.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2e2:	07b1      	lsls	r1, r6, #30
    b2e4:	d001      	beq.n	b2ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    b2e6:	212a      	movs	r1, #42	; 0x2a
    b2e8:	e037      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2ea:	06b1      	lsls	r1, r6, #26
    b2ec:	d404      	bmi.n	b2f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    b2ee:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    b2f2:	2036      	movs	r0, #54	; 0x36
    b2f4:	f7f9 fd10 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f8:	2123      	movs	r1, #35	; 0x23
    b2fa:	e02e      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b2fc:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    b300:	b129      	cbz	r1, b30e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    b302:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    b304:	1c4a      	adds	r2, r1, #1
    b306:	87a2      	strh	r2, [r4, #60]	; 0x3c
    b308:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b30a:	4291      	cmp	r1, r2
    b30c:	d21d      	bcs.n	b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b30e:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b312:	b139      	cbz	r1, b324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    b314:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    b318:	1c4a      	adds	r2, r1, #1
    b31a:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    b31e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b320:	4291      	cmp	r1, r2
    b322:	d212      	bcs.n	b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b324:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    b326:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    b328:	428a      	cmp	r2, r1
    b32a:	d30b      	bcc.n	b344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    b32c:	686b      	ldr	r3, [r5, #4]
    b32e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    b332:	f88d 3000 	strb.w	r3, [sp]
    b336:	9b00      	ldr	r3, [sp, #0]
    b338:	9300      	str	r3, [sp, #0]
    b33a:	e000      	b.n	b33e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    b33c:	e00d      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b33e:	f89d 3000 	ldrb.w	r3, [sp]
    b342:	b913      	cbnz	r3, b34a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b344:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    b346:	429a      	cmp	r2, r3
    b348:	d301      	bcc.n	b34e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    b34a:	2122      	movs	r1, #34	; 0x22
    b34c:	e005      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b34e:	7c62      	ldrb	r2, [r4, #17]
    b350:	b1f2      	cbz	r2, b390 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    b352:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    b354:	428a      	cmp	r2, r1
    b356:	d304      	bcc.n	b362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b358:	2108      	movs	r1, #8
    b35a:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    b35e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    b362:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b366:	f88d 0000 	strb.w	r0, [sp]
    b36a:	9800      	ldr	r0, [sp, #0]
    b36c:	9000      	str	r0, [sp, #0]
    b36e:	f89d 0000 	ldrb.w	r0, [sp]
    b372:	b1d8      	cbz	r0, b3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    b374:	2000      	movs	r0, #0
    b376:	7360      	strb	r0, [r4, #13]
    b378:	73a0      	strb	r0, [r4, #14]
    b37a:	7460      	strb	r0, [r4, #17]
    b37c:	2102      	movs	r1, #2
    b37e:	6868      	ldr	r0, [r5, #4]
    b380:	f7fd fb8e 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b384:	6868      	ldr	r0, [r5, #4]
    b386:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    b38a:	2901      	cmp	r1, #1
    b38c:	d005      	beq.n	b39a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    b38e:	e009      	b.n	b3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    b390:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    b392:	2906      	cmp	r1, #6
    b394:	d3e5      	bcc.n	b362 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b396:	213e      	movs	r1, #62	; 0x3e
    b398:	e7df      	b.n	b35a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b39a:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    b39e:	7801      	ldrb	r1, [r0, #0]
    b3a0:	1e49      	subs	r1, r1, #1
    b3a2:	7001      	strb	r1, [r0, #0]
    b3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3a8:	f000 b8ea 	b.w	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b3ac:	6868      	ldr	r0, [r5, #4]
    b3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b3b2:	2100      	movs	r1, #0
    b3b4:	f7fd bb74 	b.w	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b3b8:	20000104 	.word	0x20000104
    b3bc:	4804      	ldr	r0, [pc, #16]	; (b3d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    b3be:	b510      	push	{r4, lr}
    b3c0:	6840      	ldr	r0, [r0, #4]
    b3c2:	8800      	ldrh	r0, [r0, #0]
    b3c4:	f7fa f8a6 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    b3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b3cc:	f003 b828 	b.w	e420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    b3d0:	20000104 	.word	0x20000104
    b3d4:	4a19      	ldr	r2, [pc, #100]	; (b43c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    b3d6:	2901      	cmp	r1, #1
    b3d8:	6852      	ldr	r2, [r2, #4]
    b3da:	d010      	beq.n	b3fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    b3dc:	2100      	movs	r1, #0
    b3de:	b1c8      	cbz	r0, b414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    b3e0:	2801      	cmp	r0, #1
    b3e2:	d022      	beq.n	b42a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    b3e4:	2803      	cmp	r0, #3
    b3e6:	d109      	bne.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3e8:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    b3ec:	2813      	cmp	r0, #19
    b3ee:	d005      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f0:	2816      	cmp	r0, #22
    b3f2:	d003      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f4:	2818      	cmp	r0, #24
    b3f6:	d001      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b3f8:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    b3fc:	4770      	bx	lr
    b3fe:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    b402:	2801      	cmp	r0, #1
    b404:	d0fa      	beq.n	b3fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b406:	bf00      	nop
    b408:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    b40c:	7801      	ldrb	r1, [r0, #0]
    b40e:	1e49      	subs	r1, r1, #1
    b410:	7001      	strb	r1, [r0, #0]
    b412:	4770      	bx	lr
    b414:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b418:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    b41c:	1ac0      	subs	r0, r0, r3
    b41e:	b200      	sxth	r0, r0
    b420:	2800      	cmp	r0, #0
    b422:	dbf6      	blt.n	b412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    b424:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    b428:	4770      	bx	lr
    b42a:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b42e:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    b432:	1a40      	subs	r0, r0, r1
    b434:	b200      	sxth	r0, r0
    b436:	2800      	cmp	r0, #0
    b438:	dae6      	bge.n	b408 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    b43a:	4770      	bx	lr
    b43c:	20000104 	.word	0x20000104

0000b440 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    b440:	b510      	push	{r4, lr}
    b442:	6941      	ldr	r1, [r0, #20]
    b444:	b119      	cbz	r1, b44e <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    b446:	6842      	ldr	r2, [r0, #4]
    b448:	684b      	ldr	r3, [r1, #4]
    b44a:	429a      	cmp	r2, r3
    b44c:	d203      	bcs.n	b456 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    b44e:	21c1      	movs	r1, #193	; 0xc1
    b450:	2037      	movs	r0, #55	; 0x37
    b452:	f7f9 fc61 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b456:	6902      	ldr	r2, [r0, #16]
    b458:	610a      	str	r2, [r1, #16]
    b45a:	68c3      	ldr	r3, [r0, #12]
    b45c:	60cb      	str	r3, [r1, #12]
    b45e:	b10a      	cbz	r2, b464 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    b460:	60d1      	str	r1, [r2, #12]
    b462:	e001      	b.n	b468 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    b464:	4a06      	ldr	r2, [pc, #24]	; (b480 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    b466:	6011      	str	r1, [r2, #0]
    b468:	68ca      	ldr	r2, [r1, #12]
    b46a:	b132      	cbz	r2, b47a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    b46c:	6111      	str	r1, [r2, #16]
    b46e:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    b472:	4410      	add	r0, r2
    b474:	684a      	ldr	r2, [r1, #4]
    b476:	1a80      	subs	r0, r0, r2
    b478:	e000      	b.n	b47c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    b47a:	2000      	movs	r0, #0
    b47c:	6088      	str	r0, [r1, #8]
    b47e:	bd10      	pop	{r4, pc}
    b480:	200001dc 	.word	0x200001dc

0000b484 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    b484:	b510      	push	{r4, lr}
    b486:	2200      	movs	r2, #0
    b488:	6101      	str	r1, [r0, #16]
    b48a:	b189      	cbz	r1, b4b0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    b48c:	68cb      	ldr	r3, [r1, #12]
    b48e:	60c8      	str	r0, [r1, #12]
    b490:	60c3      	str	r3, [r0, #12]
    b492:	b103      	cbz	r3, b496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b494:	6118      	str	r0, [r3, #16]
    b496:	6901      	ldr	r1, [r0, #16]
    b498:	6082      	str	r2, [r0, #8]
    b49a:	2900      	cmp	r1, #0
    b49c:	d00f      	beq.n	b4be <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    b49e:	688b      	ldr	r3, [r1, #8]
    b4a0:	b163      	cbz	r3, b4bc <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    b4a2:	6844      	ldr	r4, [r0, #4]
    b4a4:	42a3      	cmp	r3, r4
    b4a6:	d207      	bcs.n	b4b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    b4a8:	212a      	movs	r1, #42	; 0x2a
    b4aa:	2037      	movs	r0, #55	; 0x37
    b4ac:	f7f9 fc34 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4b0:	4903      	ldr	r1, [pc, #12]	; (b4c0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    b4b2:	60c2      	str	r2, [r0, #12]
    b4b4:	6008      	str	r0, [r1, #0]
    b4b6:	e7ee      	b.n	b496 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b4b8:	1b1b      	subs	r3, r3, r4
    b4ba:	6083      	str	r3, [r0, #8]
    b4bc:	608a      	str	r2, [r1, #8]
    b4be:	bd10      	pop	{r4, pc}
    b4c0:	200001dc 	.word	0x200001dc

0000b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    b4c4:	6901      	ldr	r1, [r0, #16]
    b4c6:	b149      	cbz	r1, b4dc <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    b4c8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b4cc:	441a      	add	r2, r3
    b4ce:	688b      	ldr	r3, [r1, #8]
    b4d0:	441a      	add	r2, r3
    b4d2:	608a      	str	r2, [r1, #8]
    b4d4:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    b4d8:	60d1      	str	r1, [r2, #12]
    b4da:	e002      	b.n	b4e2 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    b4dc:	4a06      	ldr	r2, [pc, #24]	; (b4f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    b4de:	68c1      	ldr	r1, [r0, #12]
    b4e0:	6011      	str	r1, [r2, #0]
    b4e2:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    b4e6:	b109      	cbz	r1, b4ec <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    b4e8:	6108      	str	r0, [r1, #16]
    b4ea:	4770      	bx	lr
    b4ec:	2800      	cmp	r0, #0
    b4ee:	d0fc      	beq.n	b4ea <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    b4f0:	2100      	movs	r1, #0
    b4f2:	6081      	str	r1, [r0, #8]
    b4f4:	4770      	bx	lr
    b4f6:	0000      	.short	0x0000
    b4f8:	200001dc 	.word	0x200001dc

0000b4fc <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    b4fc:	b510      	push	{r4, lr}
    b4fe:	4604      	mov	r4, r0
    b500:	490a      	ldr	r1, [pc, #40]	; (b52c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    b502:	2000      	movs	r0, #0
    b504:	4602      	mov	r2, r0
    b506:	6809      	ldr	r1, [r1, #0]
    b508:	1e43      	subs	r3, r0, #1
    b50a:	e008      	b.n	b51e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    b50c:	688a      	ldr	r2, [r1, #8]
    b50e:	42a2      	cmp	r2, r4
    b510:	d303      	bcc.n	b51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b512:	429a      	cmp	r2, r3
    b514:	d201      	bcs.n	b51a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b516:	4613      	mov	r3, r2
    b518:	4608      	mov	r0, r1
    b51a:	460a      	mov	r2, r1
    b51c:	68c9      	ldr	r1, [r1, #12]
    b51e:	2900      	cmp	r1, #0
    b520:	d1f4      	bne.n	b50c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    b522:	2800      	cmp	r0, #0
    b524:	d100      	bne.n	b528 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    b526:	4610      	mov	r0, r2
    b528:	bd10      	pop	{r4, pc}
    b52a:	0000      	.short	0x0000
    b52c:	200001dc 	.word	0x200001dc

0000b530 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    b530:	4801      	ldr	r0, [pc, #4]	; (b538 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    b532:	6800      	ldr	r0, [r0, #0]
    b534:	4770      	bx	lr
    b536:	0000      	.short	0x0000
    b538:	200001dc 	.word	0x200001dc

0000b53c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    b53c:	4804      	ldr	r0, [pc, #16]	; (b550 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    b53e:	6801      	ldr	r1, [r0, #0]
    b540:	2000      	movs	r0, #0
    b542:	e001      	b.n	b548 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    b544:	4608      	mov	r0, r1
    b546:	68c9      	ldr	r1, [r1, #12]
    b548:	2900      	cmp	r1, #0
    b54a:	d1fb      	bne.n	b544 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    b54c:	4770      	bx	lr
    b54e:	0000      	.short	0x0000
    b550:	200001dc 	.word	0x200001dc

0000b554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    b554:	4801      	ldr	r0, [pc, #4]	; (b55c <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    b556:	2100      	movs	r1, #0
    b558:	6001      	str	r1, [r0, #0]
    b55a:	4770      	bx	lr
    b55c:	200001dc 	.word	0x200001dc

0000b560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    b560:	4903      	ldr	r1, [pc, #12]	; (b570 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    b562:	2000      	movs	r0, #0
    b564:	6809      	ldr	r1, [r1, #0]
    b566:	2900      	cmp	r1, #0
    b568:	d000      	beq.n	b56c <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    b56a:	200c      	movs	r0, #12
    b56c:	4770      	bx	lr
    b56e:	0000      	.short	0x0000
    b570:	200001dc 	.word	0x200001dc

0000b574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    b574:	4901      	ldr	r1, [pc, #4]	; (b57c <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    b576:	7008      	strb	r0, [r1, #0]
    b578:	4770      	bx	lr
    b57a:	0000      	.short	0x0000
    b57c:	20000296 	.word	0x20000296

0000b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    b580:	4801      	ldr	r0, [pc, #4]	; (b588 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    b582:	7800      	ldrb	r0, [r0, #0]
    b584:	f7f9 b9bc 	b.w	4900 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b588:	20000296 	.word	0x20000296

0000b58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    b58c:	b500      	push	{lr}
    b58e:	7941      	ldrb	r1, [r0, #5]
    b590:	b095      	sub	sp, #84	; 0x54
    b592:	b141      	cbz	r1, b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b594:	2901      	cmp	r1, #1
    b596:	d006      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b598:	2902      	cmp	r1, #2
    b59a:	d004      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b59c:	2903      	cmp	r1, #3
    b59e:	d002      	beq.n	b5a6 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b5a0:	2012      	movs	r0, #18
    b5a2:	b015      	add	sp, #84	; 0x54
    b5a4:	bd00      	pop	{pc}
    b5a6:	7901      	ldrb	r1, [r0, #4]
    b5a8:	f88d 1000 	strb.w	r1, [sp]
    b5ac:	7b01      	ldrb	r1, [r0, #12]
    b5ae:	f88d 1001 	strb.w	r1, [sp, #1]
    b5b2:	7942      	ldrb	r2, [r0, #5]
    b5b4:	2100      	movs	r1, #0
    b5b6:	2301      	movs	r3, #1
    b5b8:	b3e2      	cbz	r2, b634 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    b5ba:	2a02      	cmp	r2, #2
    b5bc:	d03b      	beq.n	b636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b5be:	f88d 3002 	strb.w	r3, [sp, #2]
    b5c2:	bf00      	nop
    b5c4:	f8d0 2006 	ldr.w	r2, [r0, #6]
    b5c8:	f8cd 2003 	str.w	r2, [sp, #3]
    b5cc:	8942      	ldrh	r2, [r0, #10]
    b5ce:	f8ad 2007 	strh.w	r2, [sp, #7]
    b5d2:	f88d 3009 	strb.w	r3, [sp, #9]
    b5d6:	f830 2b01 	ldrh.w	r2, [r0], #1
    b5da:	f240 2371 	movw	r3, #625	; 0x271
    b5de:	435a      	muls	r2, r3
    b5e0:	9203      	str	r2, [sp, #12]
    b5e2:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    b5e6:	435a      	muls	r2, r3
    b5e8:	9206      	str	r2, [sp, #24]
    b5ea:	8982      	ldrh	r2, [r0, #12]
    b5ec:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    b5f0:	89c2      	ldrh	r2, [r0, #14]
    b5f2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    b5f6:	8a02      	ldrh	r2, [r0, #16]
    b5f8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    b5fc:	8a42      	ldrh	r2, [r0, #18]
    b5fe:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    b602:	8a82      	ldrh	r2, [r0, #20]
    b604:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    b608:	8ac0      	ldrh	r0, [r0, #22]
    b60a:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    b60e:	2007      	movs	r0, #7
    b610:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    b614:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    b618:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    b61c:	9806      	ldr	r0, [sp, #24]
    b61e:	f000 fbd7 	bl	bdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    b622:	b158      	cbz	r0, b63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b624:	9803      	ldr	r0, [sp, #12]
    b626:	f000 fbc7 	bl	bdb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    b62a:	b138      	cbz	r0, b63c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b62c:	4668      	mov	r0, sp
    b62e:	f000 f8cb 	bl	b7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    b632:	e7b6      	b.n	b5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    b634:	e7ff      	b.n	b636 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b636:	f88d 1002 	strb.w	r1, [sp, #2]
    b63a:	e7c3      	b.n	b5c4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    b63c:	2030      	movs	r0, #48	; 0x30
    b63e:	e7b0      	b.n	b5a2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000b640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    b640:	b538      	push	{r3, r4, r5, lr}
    b642:	4c14      	ldr	r4, [pc, #80]	; (b694 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x54>)
    b644:	7860      	ldrb	r0, [r4, #1]
    b646:	b970      	cbnz	r0, b666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    b648:	f7fd f9e6 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
    b64c:	2805      	cmp	r0, #5
    b64e:	d005      	beq.n	b65c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    b650:	f7fb ff36 	bl	74c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b654:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b658:	39ff      	subs	r1, #255	; 0xff
    b65a:	d004      	beq.n	b666 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    b65c:	4668      	mov	r0, sp
    b65e:	f7fd f93b 	bl	88d8 <sym_3FFXBKVY5X23ZTRFF54SFBJLPNCARR3MOC6ZW4Q>
    b662:	b110      	cbz	r0, b66a <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    b664:	e014      	b.n	b690 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x50>
    b666:	200c      	movs	r0, #12
    b668:	bd38      	pop	{r3, r4, r5, pc}
    b66a:	9800      	ldr	r0, [sp, #0]
    b66c:	8800      	ldrh	r0, [r0, #0]
    b66e:	f003 f849 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    b672:	9800      	ldr	r0, [sp, #0]
    b674:	2100      	movs	r1, #0
    b676:	8800      	ldrh	r0, [r0, #0]
    b678:	f7f9 fdcc 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    b67c:	b120      	cbz	r0, b688 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    b67e:	f640 7172 	movw	r1, #3954	; 0xf72
    b682:	2039      	movs	r0, #57	; 0x39
    b684:	f7f9 fb48 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b688:	2001      	movs	r0, #1
    b68a:	7060      	strb	r0, [r4, #1]
    b68c:	f7ff ff78 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b690:	2000      	movs	r0, #0
    b692:	bd38      	pop	{r3, r4, r5, pc}
    b694:	20001230 	.word	0x20001230

0000b698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b698:	4903      	ldr	r1, [pc, #12]	; (b6a8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b69a:	888a      	ldrh	r2, [r1, #4]
    b69c:	8002      	strh	r2, [r0, #0]
    b69e:	7889      	ldrb	r1, [r1, #2]
    b6a0:	7081      	strb	r1, [r0, #2]
    b6a2:	2000      	movs	r0, #0
    b6a4:	4770      	bx	lr
    b6a6:	0000      	.short	0x0000
    b6a8:	20001230 	.word	0x20001230

0000b6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b6ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b6ae:	460c      	mov	r4, r1
    b6b0:	4605      	mov	r5, r0
    b6b2:	8800      	ldrh	r0, [r0, #0]
    b6b4:	4669      	mov	r1, sp
    b6b6:	f003 f940 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b6ba:	0001      	movs	r1, r0
    b6bc:	f04f 0000 	mov.w	r0, #0
    b6c0:	d005      	beq.n	b6ce <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    b6c2:	f8c4 0002 	str.w	r0, [r4, #2]
    b6c6:	71a0      	strb	r0, [r4, #6]
    b6c8:	8020      	strh	r0, [r4, #0]
    b6ca:	2002      	movs	r0, #2
    b6cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b6ce:	9901      	ldr	r1, [sp, #4]
    b6d0:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b6d4:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b6d8:	f8d1 2016 	ldr.w	r2, [r1, #22]
    b6dc:	f8c4 2002 	str.w	r2, [r4, #2]
    b6e0:	7e8a      	ldrb	r2, [r1, #26]
    b6e2:	71a2      	strb	r2, [r4, #6]
    b6e4:	882a      	ldrh	r2, [r5, #0]
    b6e6:	8022      	strh	r2, [r4, #0]
    b6e8:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    b6ec:	f88d 2008 	strb.w	r2, [sp, #8]
    b6f0:	9a02      	ldr	r2, [sp, #8]
    b6f2:	9202      	str	r2, [sp, #8]
    b6f4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    b6f8:	2a00      	cmp	r2, #0
    b6fa:	d1eb      	bne.n	b6d4 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    b6fc:	2000      	movs	r0, #0
    b6fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    b700:	b51c      	push	{r2, r3, r4, lr}
    b702:	8800      	ldrh	r0, [r0, #0]
    b704:	4669      	mov	r1, sp
    b706:	f003 f918 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b70a:	2800      	cmp	r0, #0
    b70c:	d106      	bne.n	b71c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    b70e:	f89d 0000 	ldrb.w	r0, [sp]
    b712:	b120      	cbz	r0, b71e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    b714:	480b      	ldr	r0, [pc, #44]	; (b744 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    b716:	7800      	ldrb	r0, [r0, #0]
    b718:	b190      	cbz	r0, b740 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    b71a:	2002      	movs	r0, #2
    b71c:	bd1c      	pop	{r2, r3, r4, pc}
    b71e:	9801      	ldr	r0, [sp, #4]
    b720:	f004 feb1 	bl	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    b724:	2800      	cmp	r0, #0
    b726:	d0f8      	beq.n	b71a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    b728:	9801      	ldr	r0, [sp, #4]
    b72a:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    b72e:	b108      	cbz	r0, b734 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    b730:	203a      	movs	r0, #58	; 0x3a
    b732:	bd1c      	pop	{r2, r3, r4, pc}
    b734:	9901      	ldr	r1, [sp, #4]
    b736:	2001      	movs	r0, #1
    b738:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    b73c:	2000      	movs	r0, #0
    b73e:	bd1c      	pop	{r2, r3, r4, pc}
    b740:	2011      	movs	r0, #17
    b742:	bd1c      	pop	{r2, r3, r4, pc}
    b744:	200001e0 	.word	0x200001e0

0000b748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b748:	b510      	push	{r4, lr}
    b74a:	4604      	mov	r4, r0
    b74c:	f004 fe92 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    b750:	b130      	cbz	r0, b760 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b752:	4804      	ldr	r0, [pc, #16]	; (b764 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b754:	8881      	ldrh	r1, [r0, #4]
    b756:	8021      	strh	r1, [r4, #0]
    b758:	88c0      	ldrh	r0, [r0, #6]
    b75a:	8060      	strh	r0, [r4, #2]
    b75c:	2000      	movs	r0, #0
    b75e:	bd10      	pop	{r4, pc}
    b760:	2001      	movs	r0, #1
    b762:	bd10      	pop	{r4, pc}
    b764:	200001ee 	.word	0x200001ee

0000b768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b768:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b76a:	4605      	mov	r5, r0
    b76c:	f000 fc2a 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b770:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b774:	b310      	cbz	r0, b7bc <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b776:	2400      	movs	r4, #0
    b778:	a802      	add	r0, sp, #8
    b77a:	f88d 4004 	strb.w	r4, [sp, #4]
    b77e:	f88d 4008 	strb.w	r4, [sp, #8]
    b782:	9000      	str	r0, [sp, #0]
    b784:	78aa      	ldrb	r2, [r5, #2]
    b786:	7869      	ldrb	r1, [r5, #1]
    b788:	7828      	ldrb	r0, [r5, #0]
    b78a:	ab01      	add	r3, sp, #4
    b78c:	f004 ff18 	bl	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    b790:	2800      	cmp	r0, #0
    b792:	d112      	bne.n	b7ba <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    b794:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b798:	f004 fc8f 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b79c:	b180      	cbz	r0, b7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b79e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b7a2:	f004 fc8a 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b7a6:	b158      	cbz	r0, b7c0 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b7a8:	4806      	ldr	r0, [pc, #24]	; (b7c4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    b7aa:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b7ae:	7481      	strb	r1, [r0, #18]
    b7b0:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b7b4:	74c1      	strb	r1, [r0, #19]
    b7b6:	8284      	strh	r4, [r0, #20]
    b7b8:	2000      	movs	r0, #0
    b7ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7bc:	2001      	movs	r0, #1
    b7be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7c0:	2011      	movs	r0, #17
    b7c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b7c4:	20001230 	.word	0x20001230

0000b7c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7cc:	a1a2      	add	r1, pc, #648	; (adr r1, ba58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x290>)
    b7ce:	4605      	mov	r5, r0
    b7d0:	e9d1 8700 	ldrd	r8, r7, [r1]
    b7d4:	7a40      	ldrb	r0, [r0, #9]
    b7d6:	b087      	sub	sp, #28
    b7d8:	0781      	lsls	r1, r0, #30
    b7da:	d502      	bpl.n	b7e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    b7dc:	f040 0001 	orr.w	r0, r0, #1
    b7e0:	7268      	strb	r0, [r5, #9]
    b7e2:	4628      	mov	r0, r5
    b7e4:	f004 fcc8 	bl	10178 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    b7e8:	2800      	cmp	r0, #0
    b7ea:	d10c      	bne.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b7ec:	f004 fe5f 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    b7f0:	b940      	cbnz	r0, b804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b7f2:	4e9b      	ldr	r6, [pc, #620]	; (ba60 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    b7f4:	7870      	ldrb	r0, [r6, #1]
    b7f6:	b928      	cbnz	r0, b804 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b7f8:	f7fb fe62 	bl	74c0 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b7fc:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b800:	39ff      	subs	r1, #255	; 0xff
    b802:	d003      	beq.n	b80c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    b804:	200c      	movs	r0, #12
    b806:	b007      	add	sp, #28
    b808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b80c:	7828      	ldrb	r0, [r5, #0]
    b80e:	f04f 0b00 	mov.w	fp, #0
    b812:	f04f 0a01 	mov.w	sl, #1
    b816:	b9e8      	cbnz	r0, b854 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    b818:	78a8      	ldrb	r0, [r5, #2]
    b81a:	9000      	str	r0, [sp, #0]
    b81c:	f105 0903 	add.w	r9, r5, #3
    b820:	a902      	add	r1, sp, #8
    b822:	2000      	movs	r0, #0
    b824:	f002 ff14 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    b828:	b178      	cbz	r0, b84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    b82a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    b82e:	e10e      	b.n	ba4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    b830:	9c04      	ldr	r4, [sp, #16]
    b832:	9800      	ldr	r0, [sp, #0]
    b834:	f004 f87e 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b838:	78a1      	ldrb	r1, [r4, #2]
    b83a:	4288      	cmp	r0, r1
    b83c:	d105      	bne.n	b84a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x82>
    b83e:	2206      	movs	r2, #6
    b840:	4649      	mov	r1, r9
    b842:	1ce0      	adds	r0, r4, #3
    b844:	f001 fe4c 	bl	d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    b848:	b320      	cbz	r0, b894 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    b84a:	a802      	add	r0, sp, #8
    b84c:	f7f9 fc94 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    b850:	2800      	cmp	r0, #0
    b852:	d0ed      	beq.n	b830 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x68>
    b854:	2103      	movs	r1, #3
    b856:	f105 0018 	add.w	r0, r5, #24
    b85a:	f000 fac5 	bl	bde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    b85e:	2200      	movs	r2, #0
    b860:	4611      	mov	r1, r2
    b862:	a801      	add	r0, sp, #4
    b864:	f7f9 fcae 	bl	51c4 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    b868:	0004      	movs	r4, r0
    b86a:	d015      	beq.n	b898 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    b86c:	2100      	movs	r1, #0
    b86e:	f7fb f953 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b872:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    b876:	8020      	strh	r0, [r4, #0]
    b878:	487a      	ldr	r0, [pc, #488]	; (ba64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    b87a:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    b87e:	f004 fdf9 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    b882:	2800      	cmp	r0, #0
    b884:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    b888:	d008      	beq.n	b89c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    b88a:	88b1      	ldrh	r1, [r6, #4]
    b88c:	88f2      	ldrh	r2, [r6, #6]
    b88e:	84c1      	strh	r1, [r0, #38]	; 0x26
    b890:	8502      	strh	r2, [r0, #40]	; 0x28
    b892:	e006      	b.n	b8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    b894:	200b      	movs	r0, #11
    b896:	e7b6      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b898:	2009      	movs	r0, #9
    b89a:	e7b4      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b89c:	221b      	movs	r2, #27
    b89e:	84c2      	strh	r2, [r0, #38]	; 0x26
    b8a0:	8502      	strh	r2, [r0, #40]	; 0x28
    b8a2:	78f1      	ldrb	r1, [r6, #3]
    b8a4:	9100      	str	r1, [sp, #0]
    b8a6:	46b1      	mov	r9, r6
    b8a8:	78b3      	ldrb	r3, [r6, #2]
    b8aa:	88f2      	ldrh	r2, [r6, #6]
    b8ac:	88b1      	ldrh	r1, [r6, #4]
    b8ae:	8820      	ldrh	r0, [r4, #0]
    b8b0:	f7f9 fd6a 	bl	5388 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    b8b4:	b110      	cbz	r0, b8bc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf4>
    b8b6:	f640 618b 	movw	r1, #3723	; 0xe8b
    b8ba:	e0c8      	b.n	ba4e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x286>
    b8bc:	8820      	ldrh	r0, [r4, #0]
    b8be:	f7fb fd53 	bl	7368 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    b8c2:	6120      	str	r0, [r4, #16]
    b8c4:	a068      	add	r0, pc, #416	; (adr r0, ba68 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    b8c6:	f104 0618 	add.w	r6, r4, #24
    b8ca:	6800      	ldr	r0, [r0, #0]
    b8cc:	9000      	str	r0, [sp, #0]
    b8ce:	2103      	movs	r1, #3
    b8d0:	4668      	mov	r0, sp
    b8d2:	f7f9 fabd 	bl	4e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b8d6:	2000      	movs	r0, #0
    b8d8:	4669      	mov	r1, sp
    b8da:	5c0a      	ldrb	r2, [r1, r0]
    b8dc:	5432      	strb	r2, [r6, r0]
    b8de:	1c40      	adds	r0, r0, #1
    b8e0:	b2c0      	uxtb	r0, r0
    b8e2:	2803      	cmp	r0, #3
    b8e4:	d3f9      	bcc.n	b8da <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x112>
    b8e6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    b8e8:	f003 f833 	bl	e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    b8ec:	60e0      	str	r0, [r4, #12]
    b8ee:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    b8f0:	82a0      	strh	r0, [r4, #20]
    b8f2:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    b8f4:	82e0      	strh	r0, [r4, #22]
    b8f6:	7a68      	ldrb	r0, [r5, #9]
    b8f8:	f004 fbbe 	bl	10078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    b8fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
    b900:	464e      	mov	r6, r9
    b902:	4620      	mov	r0, r4
    b904:	62e1      	str	r1, [r4, #44]	; 0x2c
    b906:	f003 fe37 	bl	f578 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>
    b90a:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    b90e:	46d1      	mov	r9, sl
    b910:	4650      	mov	r0, sl
    b912:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    b916:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    b91a:	4852      	ldr	r0, [pc, #328]	; (ba64 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x29c>)
    b91c:	3808      	subs	r0, #8
    b91e:	6843      	ldr	r3, [r0, #4]
    b920:	b123      	cbz	r3, b92c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x164>
    b922:	2201      	movs	r2, #1
    b924:	f504 7199 	add.w	r1, r4, #306	; 0x132
    b928:	4620      	mov	r0, r4
    b92a:	4798      	blx	r3
    b92c:	8821      	ldrh	r1, [r4, #0]
    b92e:	f8ad 1008 	strh.w	r1, [sp, #8]
    b932:	7cb1      	ldrb	r1, [r6, #18]
    b934:	f88d 100a 	strb.w	r1, [sp, #10]
    b938:	7cf1      	ldrb	r1, [r6, #19]
    b93a:	f88d 100b 	strb.w	r1, [sp, #11]
    b93e:	8ab1      	ldrh	r1, [r6, #20]
    b940:	f8ad 100c 	strh.w	r1, [sp, #12]
    b944:	a905      	add	r1, sp, #20
    b946:	9100      	str	r1, [sp, #0]
    b948:	2000      	movs	r0, #0
    b94a:	ab04      	add	r3, sp, #16
    b94c:	aa02      	add	r2, sp, #8
    b94e:	4621      	mov	r1, r4
    b950:	f004 fd51 	bl	103f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    b954:	0006      	movs	r6, r0
    b956:	d10f      	bne.n	b978 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b0>
    b958:	f89d 0010 	ldrb.w	r0, [sp, #16]
    b95c:	f88d 0018 	strb.w	r0, [sp, #24]
    b960:	f89d 0014 	ldrb.w	r0, [sp, #20]
    b964:	f88d 0019 	strb.w	r0, [sp, #25]
    b968:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    b96c:	f8ad 001a 	strh.w	r0, [sp, #26]
    b970:	a906      	add	r1, sp, #24
    b972:	4620      	mov	r0, r4
    b974:	f003 f8aa 	bl	eacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    b978:	46d8      	mov	r8, fp
    b97a:	f88d b000 	strb.w	fp, [sp]
    b97e:	2101      	movs	r1, #1
    b980:	4668      	mov	r0, sp
    b982:	f7f9 fa65 	bl	4e50 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    b986:	f89d 0000 	ldrb.w	r0, [sp]
    b98a:	f000 0107 	and.w	r1, r0, #7
    b98e:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    b992:	4411      	add	r1, r2
    b994:	f3c0 1040 	ubfx	r0, r0, #5, #1
    b998:	4408      	add	r0, r1
    b99a:	f88d 0000 	strb.w	r0, [sp]
    b99e:	1d40      	adds	r0, r0, #5
    b9a0:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b9a4:	2809      	cmp	r0, #9
    b9a6:	d202      	bcs.n	b9ae <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e6>
    b9a8:	3008      	adds	r0, #8
    b9aa:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    b9ae:	2101      	movs	r1, #1
    b9b0:	4620      	mov	r0, r4
    b9b2:	f7fb f8b1 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    b9b6:	7868      	ldrb	r0, [r5, #1]
    b9b8:	f7fb fe56 	bl	7668 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    b9bc:	bbee      	cbnz	r6, ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9be:	78a9      	ldrb	r1, [r5, #2]
    b9c0:	7828      	ldrb	r0, [r5, #0]
    b9c2:	1cea      	adds	r2, r5, #3
    b9c4:	f7fb fdfa 	bl	75bc <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    b9c8:	b148      	cbz	r0, b9de <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x216>
    b9ca:	f7fb fd21 	bl	7410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    b9ce:	78a9      	ldrb	r1, [r5, #2]
    b9d0:	7828      	ldrb	r0, [r5, #0]
    b9d2:	1cea      	adds	r2, r5, #3
    b9d4:	f7fb fe16 	bl	7604 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    b9d8:	0006      	movs	r6, r0
    b9da:	d002      	beq.n	b9e2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21a>
    b9dc:	e02d      	b.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9de:	2612      	movs	r6, #18
    b9e0:	e02b      	b.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9e2:	78a8      	ldrb	r0, [r5, #2]
    b9e4:	f003 ffa6 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b9e8:	4602      	mov	r2, r0
    b9ea:	1ceb      	adds	r3, r5, #3
    b9ec:	4621      	mov	r1, r4
    b9ee:	2003      	movs	r0, #3
    b9f0:	f7fb fd50 	bl	7494 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    b9f4:	0006      	movs	r6, r0
    b9f6:	d120      	bne.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    b9f8:	464f      	mov	r7, r9
    b9fa:	4648      	mov	r0, r9
    b9fc:	f7fb fda8 	bl	7550 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    ba00:	0006      	movs	r6, r0
    ba02:	d11a      	bne.n	ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    ba04:	f88d 8008 	strb.w	r8, [sp, #8]
    ba08:	7a68      	ldrb	r0, [r5, #9]
    ba0a:	07c0      	lsls	r0, r0, #31
    ba0c:	d005      	beq.n	ba1a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x252>
    ba0e:	68e8      	ldr	r0, [r5, #12]
    ba10:	9003      	str	r0, [sp, #12]
    ba12:	69a8      	ldr	r0, [r5, #24]
    ba14:	9004      	str	r0, [sp, #16]
    ba16:	f88d 7008 	strb.w	r7, [sp, #8]
    ba1a:	a802      	add	r0, sp, #8
    ba1c:	f7fd f802 	bl	8a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    ba20:	4606      	mov	r6, r0
    ba22:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    ba26:	f7fb fe93 	bl	7750 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    ba2a:	b936      	cbnz	r6, ba3a <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x272>
    ba2c:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    ba30:	4620      	mov	r0, r4
    ba32:	f7fc ff0d 	bl	8850 <sym_NMFSQPWNRCV6HXBI7IE26MSQQN35QYITSFUP7UQ>
    ba36:	0006      	movs	r6, r0
    ba38:	d00c      	beq.n	ba54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba3a:	8820      	ldrh	r0, [r4, #0]
    ba3c:	f002 fe62 	bl	e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ba40:	8820      	ldrh	r0, [r4, #0]
    ba42:	2100      	movs	r1, #0
    ba44:	f7f9 fbe6 	bl	5214 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ba48:	b120      	cbz	r0, ba54 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba4a:	f640 7152 	movw	r1, #3922	; 0xf52
    ba4e:	2039      	movs	r0, #57	; 0x39
    ba50:	f7f9 f962 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ba54:	4630      	mov	r0, r6
    ba56:	e6d6      	b.n	b806 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ba58:	ffffffff 	.word	0xffffffff
    ba5c:	0000001f 	.word	0x0000001f
    ba60:	20001230 	.word	0x20001230
    ba64:	200001e8 	.word	0x200001e8
    ba68:	00332211 	.word	0x00332211

0000ba6c <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ba6c:	7801      	ldrb	r1, [r0, #0]
    ba6e:	b179      	cbz	r1, ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba70:	7841      	ldrb	r1, [r0, #1]
    ba72:	b169      	cbz	r1, ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba74:	8841      	ldrh	r1, [r0, #2]
    ba76:	291b      	cmp	r1, #27
    ba78:	d30a      	bcc.n	ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba7a:	8881      	ldrh	r1, [r0, #4]
    ba7c:	291b      	cmp	r1, #27
    ba7e:	d307      	bcc.n	ba90 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x24>
    ba80:	4904      	ldr	r1, [pc, #16]	; (ba94 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ba82:	6802      	ldr	r2, [r0, #0]
    ba84:	f8c1 2002 	str.w	r2, [r1, #2]
    ba88:	8880      	ldrh	r0, [r0, #4]
    ba8a:	80c8      	strh	r0, [r1, #6]
    ba8c:	2000      	movs	r0, #0
    ba8e:	4770      	bx	lr
    ba90:	2012      	movs	r0, #18
    ba92:	4770      	bx	lr
    ba94:	20001230 	.word	0x20001230

0000ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ba98:	6800      	ldr	r0, [r0, #0]
    ba9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ba9e:	4288      	cmp	r0, r1
    baa0:	d303      	bcc.n	baaa <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    baa2:	4903      	ldr	r1, [pc, #12]	; (bab0 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    baa4:	6088      	str	r0, [r1, #8]
    baa6:	2000      	movs	r0, #0
    baa8:	4770      	bx	lr
    baaa:	2012      	movs	r0, #18
    baac:	4770      	bx	lr
    baae:	0000      	.short	0x0000
    bab0:	20001230 	.word	0x20001230

0000bab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    bab4:	b510      	push	{r4, lr}
    bab6:	b086      	sub	sp, #24
    bab8:	4604      	mov	r4, r0
    baba:	f004 fbd4 	bl	10266 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    babe:	2800      	cmp	r0, #0
    bac0:	d103      	bne.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bac2:	f004 fcf4 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    bac6:	b110      	cbz	r0, bace <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    bac8:	200c      	movs	r0, #12
    baca:	b006      	add	sp, #24
    bacc:	bd10      	pop	{r4, pc}
    bace:	2102      	movs	r1, #2
    bad0:	f104 0010 	add.w	r0, r4, #16
    bad4:	f000 f988 	bl	bde8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x160>
    bad8:	78a0      	ldrb	r0, [r4, #2]
    bada:	f88d 0008 	strb.w	r0, [sp, #8]
    bade:	78a0      	ldrb	r0, [r4, #2]
    bae0:	f88d 0000 	strb.w	r0, [sp]
    bae4:	7860      	ldrb	r0, [r4, #1]
    bae6:	f88d 0003 	strb.w	r0, [sp, #3]
    baea:	7820      	ldrb	r0, [r4, #0]
    baec:	f88d 0002 	strb.w	r0, [sp, #2]
    baf0:	7e20      	ldrb	r0, [r4, #24]
    baf2:	f88d 0004 	strb.w	r0, [sp, #4]
    baf6:	78a0      	ldrb	r0, [r4, #2]
    baf8:	07c0      	lsls	r0, r0, #31
    bafa:	d00b      	beq.n	bb14 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    bafc:	78e0      	ldrb	r0, [r4, #3]
    bafe:	2801      	cmp	r0, #1
    bb00:	d011      	beq.n	bb26 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    bb02:	b190      	cbz	r0, bb2a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    bb04:	f05f 0000 	movs.w	r0, #0
    bb08:	f88d 0001 	strb.w	r0, [sp, #1]
    bb0c:	68a0      	ldr	r0, [r4, #8]
    bb0e:	9003      	str	r0, [sp, #12]
    bb10:	6920      	ldr	r0, [r4, #16]
    bb12:	9004      	str	r0, [sp, #16]
    bb14:	a802      	add	r0, sp, #8
    bb16:	f7fc ff85 	bl	8a24 <sym_G3T75QYGDXLADVOG7TRD7S7FJG34FXA2B745E2A>
    bb1a:	2800      	cmp	r0, #0
    bb1c:	d1d5      	bne.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bb1e:	4668      	mov	r0, sp
    bb20:	f7fb fe1e 	bl	7760 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    bb24:	e7d1      	b.n	baca <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bb26:	2002      	movs	r0, #2
    bb28:	e7ee      	b.n	bb08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    bb2a:	2001      	movs	r0, #1
    bb2c:	e7ec      	b.n	bb08 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000bb30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    bb30:	4a03      	ldr	r2, [pc, #12]	; (bb40 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    bb32:	e9d2 1200 	ldrd	r1, r2, [r2]
    bb36:	6001      	str	r1, [r0, #0]
    bb38:	6042      	str	r2, [r0, #4]
    bb3a:	2000      	movs	r0, #0
    bb3c:	4770      	bx	lr
    bb3e:	0000      	.short	0x0000
    bb40:	0000be74 	.word	0x0000be74

0000bb44 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    bb44:	b510      	push	{r4, lr}
    bb46:	2005      	movs	r0, #5
    bb48:	f000 fa32 	bl	bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    bb4c:	f7fd fe14 	bl	9778 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    bb50:	4902      	ldr	r1, [pc, #8]	; (bb5c <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    bb52:	4801      	ldr	r0, [pc, #4]	; (bb58 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    bb54:	6048      	str	r0, [r1, #4]
    bb56:	bd10      	pop	{r4, pc}
    bb58:	0000bcbd 	.word	0x0000bcbd
    bb5c:	200001e0 	.word	0x200001e0

0000bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb64:	b086      	sub	sp, #24
    bb66:	468a      	mov	sl, r1
    bb68:	4606      	mov	r6, r0
    bb6a:	8800      	ldrh	r0, [r0, #0]
    bb6c:	a901      	add	r1, sp, #4
    bb6e:	f002 fee4 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    bb72:	2800      	cmp	r0, #0
    bb74:	d139      	bne.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bb76:	9802      	ldr	r0, [sp, #8]
    bb78:	f04f 0801 	mov.w	r8, #1
    bb7c:	4601      	mov	r1, r0
    bb7e:	4689      	mov	r9, r1
    bb80:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    bb84:	f88d 1000 	strb.w	r1, [sp]
    bb88:	9900      	ldr	r1, [sp, #0]
    bb8a:	9100      	str	r1, [sp, #0]
    bb8c:	f89d 5000 	ldrb.w	r5, [sp]
    bb90:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bb94:	3078      	adds	r0, #120	; 0x78
    bb96:	2921      	cmp	r1, #33	; 0x21
    bb98:	d100      	bne.n	bb9c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    bb9a:	b13d      	cbz	r5, bbac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    bb9c:	2400      	movs	r4, #0
    bb9e:	304e      	adds	r0, #78	; 0x4e
    bba0:	2108      	movs	r1, #8
    bba2:	4607      	mov	r7, r0
    bba4:	f003 febc 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bba8:	b110      	cbz	r0, bbb0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    bbaa:	e007      	b.n	bbbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bbac:	2401      	movs	r4, #1
    bbae:	e7f6      	b.n	bb9e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    bbb0:	210b      	movs	r1, #11
    bbb2:	4638      	mov	r0, r7
    bbb4:	f003 feb4 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bbb8:	b900      	cbnz	r0, bbbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bbba:	b1ac      	cbz	r4, bbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    bbbc:	a804      	add	r0, sp, #16
    bbbe:	9000      	str	r0, [sp, #0]
    bbc0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bbc4:	ab03      	add	r3, sp, #12
    bbc6:	4632      	mov	r2, r6
    bbc8:	4649      	mov	r1, r9
    bbca:	f004 fc14 	bl	103f6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d4>
    bbce:	0007      	movs	r7, r0
    bbd0:	d10b      	bne.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bbd2:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bbd6:	9c02      	ldr	r4, [sp, #8]
    bbd8:	b150      	cbz	r0, bbf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    bbda:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    bbde:	bf00      	nop
    bbe0:	f884 8001 	strb.w	r8, [r4, #1]
    bbe4:	b94d      	cbnz	r5, bbfa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    bbe6:	e006      	b.n	bbf6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    bbe8:	201a      	movs	r0, #26
    bbea:	b006      	add	sp, #24
    bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbf0:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    bbf4:	e7f4      	b.n	bbe0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    bbf6:	7820      	ldrb	r0, [r4, #0]
    bbf8:	b108      	cbz	r0, bbfe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    bbfa:	273a      	movs	r7, #58	; 0x3a
    bbfc:	e012      	b.n	bc24 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    bbfe:	f884 a000 	strb.w	sl, [r4]
    bc02:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bc06:	70a0      	strb	r0, [r4, #2]
    bc08:	f89d 1010 	ldrb.w	r1, [sp, #16]
    bc0c:	70e1      	strb	r1, [r4, #3]
    bc0e:	f88d 0000 	strb.w	r0, [sp]
    bc12:	f88d 1001 	strb.w	r1, [sp, #1]
    bc16:	88b0      	ldrh	r0, [r6, #4]
    bc18:	f8ad 0002 	strh.w	r0, [sp, #2]
    bc1c:	4669      	mov	r1, sp
    bc1e:	4648      	mov	r0, r9
    bc20:	f002 ff54 	bl	eacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    bc24:	2000      	movs	r0, #0
    bc26:	7060      	strb	r0, [r4, #1]
    bc28:	4638      	mov	r0, r7
    bc2a:	e7de      	b.n	bbea <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    bc2c:	b510      	push	{r4, lr}
    bc2e:	f002 fd7d 	bl	e72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bc32:	f7fa fd17 	bl	6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    bc36:	f000 f9d5 	bl	bfe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    bc3a:	4811      	ldr	r0, [pc, #68]	; (bc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    bc3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bc40:	4b10      	ldr	r3, [pc, #64]	; (bc84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    bc42:	81c1      	strh	r1, [r0, #14]
    bc44:	8201      	strh	r1, [r0, #16]
    bc46:	2100      	movs	r1, #0
    bc48:	75c1      	strb	r1, [r0, #23]
    bc4a:	8301      	strh	r1, [r0, #24]
    bc4c:	8001      	strh	r1, [r0, #0]
    bc4e:	221b      	movs	r2, #27
    bc50:	801a      	strh	r2, [r3, #0]
    bc52:	f44f 74a4 	mov.w	r4, #328	; 0x148
    bc56:	805c      	strh	r4, [r3, #2]
    bc58:	809a      	strh	r2, [r3, #4]
    bc5a:	80dc      	strh	r4, [r3, #6]
    bc5c:	7481      	strb	r1, [r0, #18]
    bc5e:	74c1      	strb	r1, [r0, #19]
    bc60:	2303      	movs	r3, #3
    bc62:	7083      	strb	r3, [r0, #2]
    bc64:	2302      	movs	r3, #2
    bc66:	70c3      	strb	r3, [r0, #3]
    bc68:	8082      	strh	r2, [r0, #4]
    bc6a:	80c2      	strh	r2, [r0, #6]
    bc6c:	f640 62a6 	movw	r2, #3750	; 0xea6
    bc70:	6082      	str	r2, [r0, #8]
    bc72:	4a04      	ldr	r2, [pc, #16]	; (bc84 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    bc74:	1f92      	subs	r2, r2, #6
    bc76:	7011      	strb	r1, [r2, #0]
    bc78:	7581      	strb	r1, [r0, #22]
    bc7a:	7301      	strb	r1, [r0, #12]
    bc7c:	bd10      	pop	{r4, pc}
    bc7e:	0000      	.short	0x0000
    bc80:	20001230 	.word	0x20001230
    bc84:	200001ee 	.word	0x200001ee

0000bc88 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    bc88:	b510      	push	{r4, lr}
    bc8a:	b158      	cbz	r0, bca4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c>
    bc8c:	490a      	ldr	r1, [pc, #40]	; (bcb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x30>)
    bc8e:	780a      	ldrb	r2, [r1, #0]
    bc90:	b16a      	cbz	r2, bcae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x26>
    bc92:	2200      	movs	r2, #0
    bc94:	7042      	strb	r2, [r0, #1]
    bc96:	2303      	movs	r3, #3
    bc98:	7003      	strb	r3, [r0, #0]
    bc9a:	2301      	movs	r3, #1
    bc9c:	7103      	strb	r3, [r0, #4]
    bc9e:	700a      	strb	r2, [r1, #0]
    bca0:	4618      	mov	r0, r3
    bca2:	bd10      	pop	{r4, pc}
    bca4:	f641 1146 	movw	r1, #6470	; 0x1946
    bca8:	2039      	movs	r0, #57	; 0x39
    bcaa:	f7f9 f835 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bcae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bcb2:	f7fb b881 	b.w	6db8 <sym_2NLJY3RIUYXQOZYTZ6WNJA5SS4UKGFLVECP5SQA>
    bcb6:	0000      	.short	0x0000
    bcb8:	20001230 	.word	0x20001230
    bcbc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bcc0:	4692      	mov	sl, r2
    bcc2:	460f      	mov	r7, r1
    bcc4:	4681      	mov	r9, r0
    bcc6:	f004 fbd5 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    bcca:	2800      	cmp	r0, #0
    bccc:	d063      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bcce:	4933      	ldr	r1, [pc, #204]	; (bd9c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>)
    bcd0:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    bcd4:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    bcd8:	8808      	ldrh	r0, [r1, #0]
    bcda:	4290      	cmp	r0, r2
    bcdc:	d300      	bcc.n	bce0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x58>
    bcde:	4610      	mov	r0, r2
    bce0:	4680      	mov	r8, r0
    bce2:	8888      	ldrh	r0, [r1, #4]
    bce4:	42b0      	cmp	r0, r6
    bce6:	d200      	bcs.n	bcea <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    bce8:	4606      	mov	r6, r0
    bcea:	884c      	ldrh	r4, [r1, #2]
    bcec:	f640 0048 	movw	r0, #2120	; 0x848
    bcf0:	4284      	cmp	r4, r0
    bcf2:	d300      	bcc.n	bcf6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x6e>
    bcf4:	4604      	mov	r4, r0
    bcf6:	88cd      	ldrh	r5, [r1, #6]
    bcf8:	4285      	cmp	r5, r0
    bcfa:	d300      	bcc.n	bcfe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x76>
    bcfc:	4605      	mov	r5, r0
    bcfe:	4284      	cmp	r4, r0
    bd00:	d300      	bcc.n	bd04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x7c>
    bd02:	4604      	mov	r4, r0
    bd04:	f44f 71a4 	mov.w	r1, #328	; 0x148
    bd08:	2e1b      	cmp	r6, #27
    bd0a:	d001      	beq.n	bd10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x88>
    bd0c:	428d      	cmp	r5, r1
    bd0e:	d104      	bne.n	bd1a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x92>
    bd10:	f1b8 0f1b 	cmp.w	r8, #27
    bd14:	d03f      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd16:	428c      	cmp	r4, r1
    bd18:	d03d      	beq.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd1a:	466a      	mov	r2, sp
    bd1c:	4651      	mov	r1, sl
    bd1e:	4648      	mov	r0, r9
    bd20:	f004 fb2c 	bl	1037c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    bd24:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    bd28:	4641      	mov	r1, r8
    bd2a:	4540      	cmp	r0, r8
    bd2c:	d900      	bls.n	bd30 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    bd2e:	4608      	mov	r0, r1
    bd30:	80f8      	strh	r0, [r7, #6]
    bd32:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bd36:	42a1      	cmp	r1, r4
    bd38:	d800      	bhi.n	bd3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>
    bd3a:	460c      	mov	r4, r1
    bd3c:	813c      	strh	r4, [r7, #8]
    bd3e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    bd42:	42b1      	cmp	r1, r6
    bd44:	d800      	bhi.n	bd48 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc0>
    bd46:	460e      	mov	r6, r1
    bd48:	807e      	strh	r6, [r7, #2]
    bd4a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    bd4e:	42a9      	cmp	r1, r5
    bd50:	d900      	bls.n	bd54 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xcc>
    bd52:	4629      	mov	r1, r5
    bd54:	80b9      	strh	r1, [r7, #4]
    bd56:	2201      	movs	r2, #1
    bd58:	703a      	strb	r2, [r7, #0]
    bd5a:	381b      	subs	r0, #27
    bd5c:	28e0      	cmp	r0, #224	; 0xe0
    bd5e:	d902      	bls.n	bd66 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xde>
    bd60:	f640 4172 	movw	r1, #3186	; 0xc72
    bd64:	e014      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd66:	3e1b      	subs	r6, #27
    bd68:	2ee0      	cmp	r6, #224	; 0xe0
    bd6a:	d902      	bls.n	bd72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    bd6c:	f640 4174 	movw	r1, #3188	; 0xc74
    bd70:	e00e      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd72:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    bd76:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    bd7a:	4284      	cmp	r4, r0
    bd7c:	d902      	bls.n	bd84 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xfc>
    bd7e:	f640 4176 	movw	r1, #3190	; 0xc76
    bd82:	e005      	b.n	bd90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x108>
    bd84:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    bd88:	4281      	cmp	r1, r0
    bd8a:	d904      	bls.n	bd96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x10e>
    bd8c:	f640 4178 	movw	r1, #3192	; 0xc78
    bd90:	2039      	movs	r0, #57	; 0x39
    bd92:	f7f8 ffc1 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bd96:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd9a:	0000      	.short	0x0000
    bd9c:	200001ee 	.word	0x200001ee
    bda0:	4904      	ldr	r1, [pc, #16]	; (bdb4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12c>)
    bda2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bda6:	4288      	cmp	r0, r1
    bda8:	d301      	bcc.n	bdae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    bdaa:	2000      	movs	r0, #0
    bdac:	4770      	bx	lr
    bdae:	2001      	movs	r0, #1
    bdb0:	4770      	bx	lr
    bdb2:	0000      	.short	0x0000
    bdb4:	0270f3cc 	.word	0x0270f3cc
    bdb8:	4904      	ldr	r1, [pc, #16]	; (bdcc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x144>)
    bdba:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bdbe:	4288      	cmp	r0, r1
    bdc0:	d301      	bcc.n	bdc6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    bdc2:	2000      	movs	r0, #0
    bdc4:	4770      	bx	lr
    bdc6:	2001      	movs	r0, #1
    bdc8:	4770      	bx	lr
    bdca:	0000      	.short	0x0000
    bdcc:	009c363d 	.word	0x009c363d
    bdd0:	4904      	ldr	r1, [pc, #16]	; (bde4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>)
    bdd2:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bdd6:	4288      	cmp	r0, r1
    bdd8:	d301      	bcc.n	bdde <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    bdda:	2000      	movs	r0, #0
    bddc:	4770      	bx	lr
    bdde:	2001      	movs	r0, #1
    bde0:	4770      	bx	lr
    bde2:	0000      	.short	0x0000
    bde4:	009c363d 	.word	0x009c363d
    bde8:	b530      	push	{r4, r5, lr}
    bdea:	2200      	movs	r2, #0
    bdec:	4d07      	ldr	r5, [pc, #28]	; (be0c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    bdee:	e009      	b.n	be04 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    bdf0:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    bdf4:	462b      	mov	r3, r5
    bdf6:	429c      	cmp	r4, r3
    bdf8:	d800      	bhi.n	bdfc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x174>
    bdfa:	4623      	mov	r3, r4
    bdfc:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    be00:	1c52      	adds	r2, r2, #1
    be02:	b2d2      	uxtb	r2, r2
    be04:	428a      	cmp	r2, r1
    be06:	d3f3      	bcc.n	bdf0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x168>
    be08:	bd30      	pop	{r4, r5, pc}
    be0a:	0000      	.short	0x0000
    be0c:	00f42400 	.word	0x00f42400
    be10:	4a09      	ldr	r2, [pc, #36]	; (be38 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b0>)
    be12:	4290      	cmp	r0, r2
    be14:	d80b      	bhi.n	be2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a6>
    be16:	2901      	cmp	r1, #1
    be18:	d002      	beq.n	be20 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    be1a:	2904      	cmp	r1, #4
    be1c:	d003      	beq.n	be26 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    be1e:	e008      	b.n	be32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    be20:	f240 7153 	movw	r1, #1875	; 0x753
    be24:	e001      	b.n	be2a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a2>
    be26:	f640 11c4 	movw	r1, #2500	; 0x9c4
    be2a:	4288      	cmp	r0, r1
    be2c:	d201      	bcs.n	be32 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1aa>
    be2e:	2000      	movs	r0, #0
    be30:	4770      	bx	lr
    be32:	2001      	movs	r0, #1
    be34:	4770      	bx	lr
    be36:	0000      	.short	0x0000
    be38:	0270fd8f 	.word	0x0270fd8f
    be3c:	b510      	push	{r4, lr}
    be3e:	4604      	mov	r4, r0
    be40:	88c1      	ldrh	r1, [r0, #6]
    be42:	8880      	ldrh	r0, [r0, #4]
    be44:	f004 f94e 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    be48:	2800      	cmp	r0, #0
    be4a:	d10f      	bne.n	be6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    be4c:	8861      	ldrh	r1, [r4, #2]
    be4e:	8820      	ldrh	r0, [r4, #0]
    be50:	f004 f948 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    be54:	2800      	cmp	r0, #0
    be56:	d109      	bne.n	be6c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e4>
    be58:	4805      	ldr	r0, [pc, #20]	; (be70 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e8>)
    be5a:	88a1      	ldrh	r1, [r4, #4]
    be5c:	8081      	strh	r1, [r0, #4]
    be5e:	8821      	ldrh	r1, [r4, #0]
    be60:	8001      	strh	r1, [r0, #0]
    be62:	88e1      	ldrh	r1, [r4, #6]
    be64:	80c1      	strh	r1, [r0, #6]
    be66:	8861      	ldrh	r1, [r4, #2]
    be68:	8041      	strh	r1, [r0, #2]
    be6a:	2000      	movs	r0, #0
    be6c:	bd10      	pop	{r4, pc}
    be6e:	0000      	.short	0x0000
    be70:	200001ee 	.word	0x200001ee
    be74:	0b12b00b 	.word	0x0b12b00b
    be78:	12b00059 	.word	0x12b00059
    be7c:	05060708 	.word	0x05060708
    be80:	00020304 	.word	0x00020304
    be84:	f0f4f8fc 	.word	0xf0f4f8fc
    be88:	0304d8ec 	.word	0x0304d8ec
    be8c:	f4f8fc00 	.word	0xf4f8fc00
    be90:	00d8ecf0 	.word	0x00d8ecf0

0000be94 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    be94:	b510      	push	{r4, lr}
    be96:	460c      	mov	r4, r1
    be98:	f7ff fb6c 	bl	b574 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    be9c:	4804      	ldr	r0, [pc, #16]	; (beb0 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    be9e:	6004      	str	r4, [r0, #0]
    bea0:	6840      	ldr	r0, [r0, #4]
    bea2:	f004 fbbc 	bl	1061e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bea6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    beaa:	f004 b8b0 	b.w	1000e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    beae:	0000      	.short	0x0000
    beb0:	200001f8 	.word	0x200001f8

0000beb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    beb4:	b510      	push	{r4, lr}
    beb6:	4c07      	ldr	r4, [pc, #28]	; (bed4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    beb8:	68a0      	ldr	r0, [r4, #8]
    beba:	f004 fbb0 	bl	1061e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bebe:	68e0      	ldr	r0, [r4, #12]
    bec0:	f004 fbad 	bl	1061e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    bec4:	f002 fc32 	bl	e72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bec8:	f7fa fbcc 	bl	6664 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bed0:	f7ff beac 	b.w	bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    bed4:	200001f8 	.word	0x200001f8

0000bed8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    bed8:	b500      	push	{lr}
    beda:	4905      	ldr	r1, [pc, #20]	; (bef0 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    bedc:	4805      	ldr	r0, [pc, #20]	; (bef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    bede:	f004 fb91 	bl	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bee2:	4804      	ldr	r0, [pc, #16]	; (bef4 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    bee4:	4904      	ldr	r1, [pc, #16]	; (bef8 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    bee6:	1d00      	adds	r0, r0, #4
    bee8:	f85d eb04 	ldr.w	lr, [sp], #4
    beec:	f004 bb8a 	b.w	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bef0:	20000238 	.word	0x20000238
    bef4:	200001fc 	.word	0x200001fc
    bef8:	20000240 	.word	0x20000240

0000befc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    befc:	b500      	push	{lr}
    befe:	4908      	ldr	r1, [pc, #32]	; (bf20 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    bf00:	4808      	ldr	r0, [pc, #32]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf02:	f004 fb7f 	bl	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf06:	4807      	ldr	r0, [pc, #28]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf08:	4907      	ldr	r1, [pc, #28]	; (bf28 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    bf0a:	1d00      	adds	r0, r0, #4
    bf0c:	f004 fb7a 	bl	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf10:	4804      	ldr	r0, [pc, #16]	; (bf24 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    bf12:	4906      	ldr	r1, [pc, #24]	; (bf2c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    bf14:	3008      	adds	r0, #8
    bf16:	f85d eb04 	ldr.w	lr, [sp], #4
    bf1a:	f004 bb73 	b.w	10604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    bf1e:	0000      	.short	0x0000
    bf20:	20000228 	.word	0x20000228
    bf24:	200001fc 	.word	0x200001fc
    bf28:	20000230 	.word	0x20000230
    bf2c:	20000220 	.word	0x20000220
    bf30:	b510      	push	{r4, lr}
    bf32:	f002 fbe9 	bl	e708 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    bf36:	4809      	ldr	r0, [pc, #36]	; (bf5c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    bf38:	f7f9 fda0 	bl	5a7c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    bf3c:	2000      	movs	r0, #0
    bf3e:	f7f9 f8b3 	bl	50a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    bf42:	4908      	ldr	r1, [pc, #32]	; (bf64 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x68>)
    bf44:	4806      	ldr	r0, [pc, #24]	; (bf60 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>)
    bf46:	6008      	str	r0, [r1, #0]
    bf48:	f7fd fd62 	bl	9a10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    bf4c:	4907      	ldr	r1, [pc, #28]	; (bf6c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x70>)
    bf4e:	4806      	ldr	r0, [pc, #24]	; (bf68 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x6c>)
    bf50:	6008      	str	r0, [r1, #0]
    bf52:	4908      	ldr	r1, [pc, #32]	; (bf74 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x78>)
    bf54:	4806      	ldr	r0, [pc, #24]	; (bf70 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    bf56:	6008      	str	r0, [r1, #0]
    bf58:	bd10      	pop	{r4, pc}
    bf5a:	0000      	.short	0x0000
    bf5c:	20001575 	.word	0x20001575
    bf60:	00005a29 	.word	0x00005a29
    bf64:	2000021c 	.word	0x2000021c
    bf68:	000097a9 	.word	0x000097a9
    bf6c:	20000210 	.word	0x20000210
    bf70:	00006e5d 	.word	0x00006e5d
    bf74:	2000020c 	.word	0x2000020c
    bf78:	b510      	push	{r4, lr}
    bf7a:	f7fb fb6d 	bl	7658 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    bf7e:	f7ff fae9 	bl	b554 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    bf82:	f7fc fc47 	bl	8814 <sym_64HX2E4XZUI7W6V3KWAXUMCQ3Y3TK7QM4TKA7RQ>
    bf86:	4805      	ldr	r0, [pc, #20]	; (bf9c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa0>)
    bf88:	f7fb fb02 	bl	7590 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    bf8c:	4905      	ldr	r1, [pc, #20]	; (bfa4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa8>)
    bf8e:	4804      	ldr	r0, [pc, #16]	; (bfa0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xa4>)
    bf90:	6008      	str	r0, [r1, #0]
    bf92:	4906      	ldr	r1, [pc, #24]	; (bfac <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xb0>)
    bf94:	4804      	ldr	r0, [pc, #16]	; (bfa8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0xac>)
    bf96:	6008      	str	r0, [r1, #0]
    bf98:	bd10      	pop	{r4, pc}
    bf9a:	0000      	.short	0x0000
    bf9c:	20001575 	.word	0x20001575
    bfa0:	000074e5 	.word	0x000074e5
    bfa4:	20000214 	.word	0x20000214
    bfa8:	00006f99 	.word	0x00006f99
    bfac:	20000218 	.word	0x20000218

0000bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    bfb0:	2101      	movs	r1, #1
    bfb2:	4081      	lsls	r1, r0
    bfb4:	4802      	ldr	r0, [pc, #8]	; (bfc0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    bfb6:	6802      	ldr	r2, [r0, #0]
    bfb8:	4311      	orrs	r1, r2
    bfba:	6001      	str	r1, [r0, #0]
    bfbc:	4770      	bx	lr
    bfbe:	0000      	.short	0x0000
    bfc0:	20000248 	.word	0x20000248

0000bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    bfc4:	4801      	ldr	r0, [pc, #4]	; (bfcc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    bfc6:	6800      	ldr	r0, [r0, #0]
    bfc8:	4770      	bx	lr
    bfca:	0000      	.short	0x0000
    bfcc:	20000248 	.word	0x20000248

0000bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    bfd0:	4803      	ldr	r0, [pc, #12]	; (bfe0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    bfd2:	8800      	ldrh	r0, [r0, #0]
    bfd4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    bfd8:	0040      	lsls	r0, r0, #1
    bfda:	1c40      	adds	r0, r0, #1
    bfdc:	4770      	bx	lr
    bfde:	0000      	.short	0x0000
    bfe0:	20000248 	.word	0x20000248

0000bfe4 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    bfe4:	b510      	push	{r4, lr}
    bfe6:	f7f8 faf5 	bl	45d4 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    bfea:	2200      	movs	r2, #0
    bfec:	4b08      	ldr	r3, [pc, #32]	; (c010 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    bfee:	4611      	mov	r1, r2
    bff0:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    bff4:	4284      	cmp	r4, r0
    bff6:	d303      	bcc.n	c000 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    bff8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    bffc:	7882      	ldrb	r2, [r0, #2]
    bffe:	e003      	b.n	c008 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    c000:	1c49      	adds	r1, r1, #1
    c002:	b2c9      	uxtb	r1, r1
    c004:	290c      	cmp	r1, #12
    c006:	d3f3      	bcc.n	bff0 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    c008:	4802      	ldr	r0, [pc, #8]	; (c014 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    c00a:	7002      	strb	r2, [r0, #0]
    c00c:	bd10      	pop	{r4, pc}
    c00e:	0000      	.short	0x0000
    c010:	0001068a 	.word	0x0001068a
    c014:	20000297 	.word	0x20000297

0000c018 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    c01a:	7800      	ldrb	r0, [r0, #0]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	20000297 	.word	0x20000297

0000c024 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    c024:	b570      	push	{r4, r5, r6, lr}
    c026:	4605      	mov	r5, r0
    c028:	4616      	mov	r6, r2
    c02a:	460c      	mov	r4, r1
    c02c:	2002      	movs	r0, #2
    c02e:	f000 f9f9 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c032:	4906      	ldr	r1, [pc, #24]	; (c04c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    c034:	2001      	movs	r0, #1
    c036:	1ef6      	subs	r6, r6, #3
    c038:	7008      	strb	r0, [r1, #0]
    c03a:	4805      	ldr	r0, [pc, #20]	; (c050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c03c:	6006      	str	r6, [r0, #0]
    c03e:	4804      	ldr	r0, [pc, #16]	; (c050 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c040:	3808      	subs	r0, #8
    c042:	6005      	str	r5, [r0, #0]
    c044:	1f00      	subs	r0, r0, #4
    c046:	6004      	str	r4, [r0, #0]
    c048:	bd70      	pop	{r4, r5, r6, pc}
    c04a:	0000      	.short	0x0000
    c04c:	20000298 	.word	0x20000298
    c050:	4000f510 	.word	0x4000f510

0000c054 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    c054:	b510      	push	{r4, lr}
    c056:	4c0c      	ldr	r4, [pc, #48]	; (c088 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    c058:	7820      	ldrb	r0, [r4, #0]
    c05a:	b180      	cbz	r0, c07e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    c05c:	490b      	ldr	r1, [pc, #44]	; (c08c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    c05e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c062:	6008      	str	r0, [r1, #0]
    c064:	f000 f86a 	bl	c13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c068:	2100      	movs	r1, #0
    c06a:	b120      	cbz	r0, c076 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    c06c:	2001      	movs	r0, #1
    c06e:	7060      	strb	r0, [r4, #1]
    c070:	4807      	ldr	r0, [pc, #28]	; (c090 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    c072:	6800      	ldr	r0, [r0, #0]
    c074:	e001      	b.n	c07a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    c076:	7061      	strb	r1, [r4, #1]
    c078:	2010      	movs	r0, #16
    c07a:	70a0      	strb	r0, [r4, #2]
    c07c:	7021      	strb	r1, [r4, #0]
    c07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c082:	2000      	movs	r0, #0
    c084:	f000 b9ce 	b.w	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c088:	20000298 	.word	0x20000298
    c08c:	4001f508 	.word	0x4001f508
    c090:	4000f400 	.word	0x4000f400

0000c094 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    c094:	b510      	push	{r4, lr}
    c096:	2002      	movs	r0, #2
    c098:	f000 f9c4 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c09c:	4904      	ldr	r1, [pc, #16]	; (c0b0 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    c09e:	2001      	movs	r0, #1
    c0a0:	7008      	strb	r0, [r1, #0]
    c0a2:	f000 f859 	bl	c158 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    c0a6:	4903      	ldr	r1, [pc, #12]	; (c0b4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    c0a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c0ac:	6008      	str	r0, [r1, #0]
    c0ae:	bd10      	pop	{r4, pc}
    c0b0:	20000298 	.word	0x20000298
    c0b4:	4001f504 	.word	0x4001f504

0000c0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    c0b8:	4803      	ldr	r0, [pc, #12]	; (c0c8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    c0ba:	2100      	movs	r1, #0
    c0bc:	7001      	strb	r1, [r0, #0]
    c0be:	7041      	strb	r1, [r0, #1]
    c0c0:	2110      	movs	r1, #16
    c0c2:	7081      	strb	r1, [r0, #2]
    c0c4:	4770      	bx	lr
    c0c6:	0000      	.short	0x0000
    c0c8:	20000298 	.word	0x20000298

0000c0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    c0cc:	4807      	ldr	r0, [pc, #28]	; (c0ec <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    c0ce:	b510      	push	{r4, lr}
    c0d0:	7801      	ldrb	r1, [r0, #0]
    c0d2:	b141      	cbz	r1, c0e6 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    c0d4:	f000 f832 	bl	c13c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c0d8:	b118      	cbz	r0, c0e2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    c0da:	4805      	ldr	r0, [pc, #20]	; (c0f0 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    c0dc:	6800      	ldr	r0, [r0, #0]
    c0de:	b2c0      	uxtb	r0, r0
    c0e0:	bd10      	pop	{r4, pc}
    c0e2:	2010      	movs	r0, #16
    c0e4:	bd10      	pop	{r4, pc}
    c0e6:	7880      	ldrb	r0, [r0, #2]
    c0e8:	bd10      	pop	{r4, pc}
    c0ea:	0000      	.short	0x0000
    c0ec:	20000298 	.word	0x20000298
    c0f0:	4000f400 	.word	0x4000f400

0000c0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    c0f4:	4808      	ldr	r0, [pc, #32]	; (c118 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    c0f6:	b510      	push	{r4, lr}
    c0f8:	7801      	ldrb	r1, [r0, #0]
    c0fa:	b159      	cbz	r1, c114 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    c0fc:	4807      	ldr	r0, [pc, #28]	; (c11c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    c0fe:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c102:	b128      	cbz	r0, c110 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    c104:	f000 f80c 	bl	c120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c108:	2800      	cmp	r0, #0
    c10a:	d000      	beq.n	c10e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    c10c:	2001      	movs	r0, #1
    c10e:	bd10      	pop	{r4, pc}
    c110:	2002      	movs	r0, #2
    c112:	bd10      	pop	{r4, pc}
    c114:	7840      	ldrb	r0, [r0, #1]
    c116:	bd10      	pop	{r4, pc}
    c118:	20000298 	.word	0x20000298
    c11c:	4000f000 	.word	0x4000f000
    c120:	4805      	ldr	r0, [pc, #20]	; (c138 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    c122:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    c126:	b111      	cbz	r1, c12e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    c128:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    c12c:	b108      	cbz	r0, c132 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    c12e:	2000      	movs	r0, #0
    c130:	4770      	bx	lr
    c132:	2001      	movs	r0, #1
    c134:	4770      	bx	lr
    c136:	0000      	.short	0x0000
    c138:	4000f000 	.word	0x4000f000
    c13c:	4805      	ldr	r0, [pc, #20]	; (c154 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    c13e:	b510      	push	{r4, lr}
    c140:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c144:	b120      	cbz	r0, c150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c146:	f7ff ffeb 	bl	c120 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c14a:	b108      	cbz	r0, c150 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c14c:	2001      	movs	r0, #1
    c14e:	bd10      	pop	{r4, pc}
    c150:	2000      	movs	r0, #0
    c152:	bd10      	pop	{r4, pc}
    c154:	4000f000 	.word	0x4000f000
    c158:	4804      	ldr	r0, [pc, #16]	; (c16c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    c15a:	2100      	movs	r1, #0
    c15c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c160:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c164:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c168:	4770      	bx	lr
    c16a:	0000      	.short	0x0000
    c16c:	4000f000 	.word	0x4000f000

0000c170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    c170:	4a08      	ldr	r2, [pc, #32]	; (c194 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    c172:	b510      	push	{r4, lr}
    c174:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c178:	4907      	ldr	r1, [pc, #28]	; (c198 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    c17a:	4610      	mov	r0, r2
    c17c:	f7f8 fc6c 	bl	4a58 <mpsl_fem_lna_configuration_set>
    c180:	2800      	cmp	r0, #0
    c182:	d005      	beq.n	c190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c184:	1c40      	adds	r0, r0, #1
    c186:	d003      	beq.n	c190 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c188:	217d      	movs	r1, #125	; 0x7d
    c18a:	2040      	movs	r0, #64	; 0x40
    c18c:	f7f8 fdc4 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c190:	bd10      	pop	{r4, pc}
    c192:	0000      	.short	0x0000
    c194:	2000024c 	.word	0x2000024c
    c198:	0000c1c8 	.word	0x0000c1c8

0000c19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    c19c:	4a08      	ldr	r2, [pc, #32]	; (c1c0 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    c19e:	b510      	push	{r4, lr}
    c1a0:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c1a4:	4907      	ldr	r1, [pc, #28]	; (c1c4 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    c1a6:	4610      	mov	r0, r2
    c1a8:	f7f8 fc62 	bl	4a70 <mpsl_fem_pa_configuration_set>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d005      	beq.n	c1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c1b0:	1c40      	adds	r0, r0, #1
    c1b2:	d003      	beq.n	c1bc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c1b4:	2172      	movs	r1, #114	; 0x72
    c1b6:	2040      	movs	r0, #64	; 0x40
    c1b8:	f7f8 fdae 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1bc:	bd10      	pop	{r4, pc}
    c1be:	0000      	.short	0x0000
    c1c0:	2000024c 	.word	0x2000024c
    c1c4:	0000c1c8 	.word	0x0000c1c8
    c1c8:	00000001 	.word	0x00000001
    c1cc:	40001110 	.word	0x40001110
	...

0000c1e0 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    c1e0:	4a07      	ldr	r2, [pc, #28]	; (c200 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    c1e2:	b510      	push	{r4, lr}
    c1e4:	7853      	ldrb	r3, [r2, #1]
    c1e6:	b133      	cbz	r3, c1f6 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    c1e8:	4b06      	ldr	r3, [pc, #24]	; (c204 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    c1ea:	6019      	str	r1, [r3, #0]
    c1ec:	1d19      	adds	r1, r3, #4
    c1ee:	6008      	str	r0, [r1, #0]
    c1f0:	2001      	movs	r0, #1
    c1f2:	7090      	strb	r0, [r2, #2]
    c1f4:	bd10      	pop	{r4, pc}
    c1f6:	21ba      	movs	r1, #186	; 0xba
    c1f8:	203c      	movs	r0, #60	; 0x3c
    c1fa:	f7f8 fd8d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1fe:	0000      	.short	0x0000
    c200:	2000029b 	.word	0x2000029b
    c204:	4000f50c 	.word	0x4000f50c

0000c208 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    c208:	4809      	ldr	r0, [pc, #36]	; (c230 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    c20a:	b510      	push	{r4, lr}
    c20c:	7801      	ldrb	r1, [r0, #0]
    c20e:	b151      	cbz	r1, c226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c210:	7880      	ldrb	r0, [r0, #2]
    c212:	b140      	cbz	r0, c226 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c214:	4907      	ldr	r1, [pc, #28]	; (c234 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    c216:	2000      	movs	r0, #0
    c218:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c21c:	4906      	ldr	r1, [pc, #24]	; (c238 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    c21e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    c222:	6008      	str	r0, [r1, #0]
    c224:	bd10      	pop	{r4, pc}
    c226:	21e1      	movs	r1, #225	; 0xe1
    c228:	203c      	movs	r0, #60	; 0x3c
    c22a:	f7f8 fd75 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c22e:	0000      	.short	0x0000
    c230:	2000029b 	.word	0x2000029b
    c234:	4000f000 	.word	0x4000f000
    c238:	4001f504 	.word	0x4001f504

0000c23c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    c23c:	b570      	push	{r4, r5, r6, lr}
    c23e:	4c0b      	ldr	r4, [pc, #44]	; (c26c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    c240:	2500      	movs	r5, #0
    c242:	7820      	ldrb	r0, [r4, #0]
    c244:	b158      	cbz	r0, c25e <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    c246:	f000 f8e5 	bl	c414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c24a:	4809      	ldr	r0, [pc, #36]	; (c270 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    c24c:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c250:	b118      	cbz	r0, c25a <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    c252:	4808      	ldr	r0, [pc, #32]	; (c274 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    c254:	6800      	ldr	r0, [r0, #0]
    c256:	70e0      	strb	r0, [r4, #3]
    c258:	e000      	b.n	c25c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    c25a:	70e5      	strb	r5, [r4, #3]
    c25c:	7025      	strb	r5, [r4, #0]
    c25e:	2000      	movs	r0, #0
    c260:	f000 f8e0 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c264:	7065      	strb	r5, [r4, #1]
    c266:	70a5      	strb	r5, [r4, #2]
    c268:	bd70      	pop	{r4, r5, r6, pc}
    c26a:	0000      	.short	0x0000
    c26c:	2000029b 	.word	0x2000029b
    c270:	4000f000 	.word	0x4000f000
    c274:	4000f400 	.word	0x4000f400

0000c278 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    c278:	480d      	ldr	r0, [pc, #52]	; (c2b0 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    c27a:	b510      	push	{r4, lr}
    c27c:	7801      	ldrb	r1, [r0, #0]
    c27e:	b191      	cbz	r1, c2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c280:	7880      	ldrb	r0, [r0, #2]
    c282:	b180      	cbz	r0, c2a6 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c284:	490b      	ldr	r1, [pc, #44]	; (c2b4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    c286:	2000      	movs	r0, #0
    c288:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c28c:	4a0a      	ldr	r2, [pc, #40]	; (c2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c28e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    c292:	6010      	str	r0, [r2, #0]
    c294:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    c298:	2a01      	cmp	r2, #1
    c29a:	d103      	bne.n	c2a4 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    c29c:	604a      	str	r2, [r1, #4]
    c29e:	4906      	ldr	r1, [pc, #24]	; (c2b8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c2a0:	1d09      	adds	r1, r1, #4
    c2a2:	6008      	str	r0, [r1, #0]
    c2a4:	bd10      	pop	{r4, pc}
    c2a6:	21d1      	movs	r1, #209	; 0xd1
    c2a8:	203c      	movs	r0, #60	; 0x3c
    c2aa:	f7f8 fd35 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2ae:	0000      	.short	0x0000
    c2b0:	2000029b 	.word	0x2000029b
    c2b4:	4000f000 	.word	0x4000f000
    c2b8:	4001f504 	.word	0x4001f504

0000c2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    c2bc:	4803      	ldr	r0, [pc, #12]	; (c2cc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    c2be:	2100      	movs	r1, #0
    c2c0:	7001      	strb	r1, [r0, #0]
    c2c2:	7041      	strb	r1, [r0, #1]
    c2c4:	7081      	strb	r1, [r0, #2]
    c2c6:	70c1      	strb	r1, [r0, #3]
    c2c8:	4770      	bx	lr
    c2ca:	0000      	.short	0x0000
    c2cc:	2000029b 	.word	0x2000029b

0000c2d0 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    c2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2d4:	4605      	mov	r5, r0
    c2d6:	461c      	mov	r4, r3
    c2d8:	4690      	mov	r8, r2
    c2da:	460f      	mov	r7, r1
    c2dc:	2001      	movs	r0, #1
    c2de:	f000 f8a1 	bl	c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c2e2:	4e12      	ldr	r6, [pc, #72]	; (c32c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    c2e4:	4812      	ldr	r0, [pc, #72]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c2e6:	7134      	strb	r4, [r6, #4]
    c2e8:	6007      	str	r7, [r0, #0]
    c2ea:	4911      	ldr	r1, [pc, #68]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c2ec:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    c2f0:	1f09      	subs	r1, r1, #4
    c2f2:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    c2f6:	6008      	str	r0, [r1, #0]
    c2f8:	f001 f8b2 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c2fc:	b938      	cbnz	r0, c30e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    c2fe:	480c      	ldr	r0, [pc, #48]	; (c330 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c300:	3010      	adds	r0, #16
    c302:	6801      	ldr	r1, [r0, #0]
    c304:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    c308:	ea41 0108 	orr.w	r1, r1, r8
    c30c:	6001      	str	r1, [r0, #0]
    c30e:	f000 f881 	bl	c414 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c312:	b93d      	cbnz	r5, c324 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    c314:	4808      	ldr	r0, [pc, #32]	; (c338 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    c316:	4a07      	ldr	r2, [pc, #28]	; (c334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c318:	4906      	ldr	r1, [pc, #24]	; (c334 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c31a:	3afc      	subs	r2, #252	; 0xfc
    c31c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c320:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    c324:	2001      	movs	r0, #1
    c326:	7070      	strb	r0, [r6, #1]
    c328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c32c:	2000029b 	.word	0x2000029b
    c330:	4000f508 	.word	0x4000f508
    c334:	4000f100 	.word	0x4000f100
    c338:	4001f088 	.word	0x4001f088

0000c33c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    c33c:	4808      	ldr	r0, [pc, #32]	; (c360 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    c33e:	b510      	push	{r4, lr}
    c340:	7841      	ldrb	r1, [r0, #1]
    c342:	b149      	cbz	r1, c358 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    c344:	2101      	movs	r1, #1
    c346:	7001      	strb	r1, [r0, #0]
    c348:	4806      	ldr	r0, [pc, #24]	; (c364 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    c34a:	2200      	movs	r2, #0
    c34c:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    c350:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    c354:	6001      	str	r1, [r0, #0]
    c356:	bd10      	pop	{r4, pc}
    c358:	21c5      	movs	r1, #197	; 0xc5
    c35a:	203c      	movs	r0, #60	; 0x3c
    c35c:	f7f8 fcdc 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c360:	2000029b 	.word	0x2000029b
    c364:	4000f000 	.word	0x4000f000

0000c368 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    c368:	4806      	ldr	r0, [pc, #24]	; (c384 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    c36a:	7801      	ldrb	r1, [r0, #0]
    c36c:	b141      	cbz	r1, c380 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    c36e:	4806      	ldr	r0, [pc, #24]	; (c388 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    c370:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c374:	2800      	cmp	r0, #0
    c376:	d002      	beq.n	c37e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    c378:	4804      	ldr	r0, [pc, #16]	; (c38c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    c37a:	6800      	ldr	r0, [r0, #0]
    c37c:	b2c0      	uxtb	r0, r0
    c37e:	4770      	bx	lr
    c380:	78c0      	ldrb	r0, [r0, #3]
    c382:	4770      	bx	lr
    c384:	2000029b 	.word	0x2000029b
    c388:	4000f000 	.word	0x4000f000
    c38c:	4000f400 	.word	0x4000f400

0000c390 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    c390:	4901      	ldr	r1, [pc, #4]	; (c398 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    c392:	2001      	movs	r0, #1
    c394:	6088      	str	r0, [r1, #8]
    c396:	4770      	bx	lr
    c398:	4000f000 	.word	0x4000f000

0000c39c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c3a0:	2800      	cmp	r0, #0
    c3a2:	d02e      	beq.n	c402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c3a4:	4818      	ldr	r0, [pc, #96]	; (c408 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    c3a6:	7800      	ldrb	r0, [r0, #0]
    c3a8:	b1b0      	cbz	r0, c3d8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    c3aa:	4d18      	ldr	r5, [pc, #96]	; (c40c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    c3ac:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c3b0:	2800      	cmp	r0, #0
    c3b2:	d126      	bne.n	c402 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c3b4:	2702      	movs	r7, #2
    c3b6:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    c3ba:	4c15      	ldr	r4, [pc, #84]	; (c410 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    c3bc:	6820      	ldr	r0, [r4, #0]
    c3be:	43c0      	mvns	r0, r0
    c3c0:	f340 1600 	sbfx	r6, r0, #4, #1
    c3c4:	6820      	ldr	r0, [r4, #0]
    c3c6:	f040 0010 	orr.w	r0, r0, #16
    c3ca:	6020      	str	r0, [r4, #0]
    c3cc:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    c3d0:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    c3d4:	1c76      	adds	r6, r6, #1
    c3d6:	e009      	b.n	c3ec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    c3d8:	f240 1153 	movw	r1, #339	; 0x153
    c3dc:	203c      	movs	r0, #60	; 0x3c
    c3de:	f7f8 fc9b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c3e2:	bf00      	nop
    c3e4:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    c3e8:	f7f8 fae0 	bl	49ac <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c3ec:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c3f0:	2800      	cmp	r0, #0
    c3f2:	d0f7      	beq.n	c3e4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    c3f4:	b91e      	cbnz	r6, c3fe <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    c3f6:	6820      	ldr	r0, [r4, #0]
    c3f8:	f020 0010 	bic.w	r0, r0, #16
    c3fc:	6020      	str	r0, [r4, #0]
    c3fe:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    c402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c406:	0000      	.short	0x0000
    c408:	2000029b 	.word	0x2000029b
    c40c:	4000f000 	.word	0x4000f000
    c410:	e000ed10 	.word	0xe000ed10
    c414:	4902      	ldr	r1, [pc, #8]	; (c420 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    c416:	4801      	ldr	r0, [pc, #4]	; (c41c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    c418:	6008      	str	r0, [r1, #0]
    c41a:	4770      	bx	lr
    c41c:	02020000 	.word	0x02020000
    c420:	4001f508 	.word	0x4001f508

0000c424 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    c424:	b510      	push	{r4, lr}
    c426:	4604      	mov	r4, r0
    c428:	f000 f822 	bl	c470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    c42c:	2c00      	cmp	r4, #0
    c42e:	d017      	beq.n	c460 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    c430:	4a0c      	ldr	r2, [pc, #48]	; (c464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c432:	480c      	ldr	r0, [pc, #48]	; (c464 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c434:	490c      	ldr	r1, [pc, #48]	; (c468 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    c436:	3214      	adds	r2, #20
    c438:	4b0c      	ldr	r3, [pc, #48]	; (c46c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    c43a:	2c01      	cmp	r4, #1
    c43c:	d005      	beq.n	c44a <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    c43e:	2c02      	cmp	r4, #2
    c440:	d008      	beq.n	c454 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    c442:	2183      	movs	r1, #131	; 0x83
    c444:	203d      	movs	r0, #61	; 0x3d
    c446:	f7f8 fc67 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c44a:	2402      	movs	r4, #2
    c44c:	6004      	str	r4, [r0, #0]
    c44e:	6011      	str	r1, [r2, #0]
    c450:	0620      	lsls	r0, r4, #24
    c452:	e004      	b.n	c45e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    c454:	2403      	movs	r4, #3
    c456:	6004      	str	r4, [r0, #0]
    c458:	6011      	str	r1, [r2, #0]
    c45a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c45e:	6018      	str	r0, [r3, #0]
    c460:	bd10      	pop	{r4, pc}
    c462:	0000      	.short	0x0000
    c464:	4000f500 	.word	0x4000f500
    c468:	20001677 	.word	0x20001677
    c46c:	4001f504 	.word	0x4001f504
    c470:	4804      	ldr	r0, [pc, #16]	; (c484 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    c472:	2100      	movs	r1, #0
    c474:	6001      	str	r1, [r0, #0]
    c476:	6001      	str	r1, [r0, #0]
    c478:	4903      	ldr	r1, [pc, #12]	; (c488 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    c47a:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    c47e:	6008      	str	r0, [r1, #0]
    c480:	4770      	bx	lr
    c482:	0000      	.short	0x0000
    c484:	4000f500 	.word	0x4000f500
    c488:	4001f508 	.word	0x4001f508

0000c48c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    c48c:	4805      	ldr	r0, [pc, #20]	; (c4a4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    c48e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c492:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    c496:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c49a:	4903      	ldr	r1, [pc, #12]	; (c4a8 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x1c>)
    c49c:	2000      	movs	r0, #0
    c49e:	6008      	str	r0, [r1, #0]
    c4a0:	4770      	bx	lr
    c4a2:	0000      	.short	0x0000
    c4a4:	40001000 	.word	0x40001000
    c4a8:	40001560 	.word	0x40001560

0000c4ac <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    c4ac:	4904      	ldr	r1, [pc, #16]	; (c4c0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    c4ae:	6008      	str	r0, [r1, #0]
    c4b0:	4804      	ldr	r0, [pc, #16]	; (c4c4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x18>)
    c4b2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c4b6:	f041 0140 	orr.w	r1, r1, #64	; 0x40
    c4ba:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c4be:	4770      	bx	lr
    c4c0:	40001560 	.word	0x40001560
    c4c4:	40001000 	.word	0x40001000

0000c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4ca:	4c1e      	ldr	r4, [pc, #120]	; (c544 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x7c>)
    c4cc:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c4d0:	2710      	movs	r7, #16
    c4d2:	f3c0 1600 	ubfx	r6, r0, #4, #1
    c4d6:	f8c4 7308 	str.w	r7, [r4, #776]	; 0x308
    c4da:	2002      	movs	r0, #2
    c4dc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c4e0:	4819      	ldr	r0, [pc, #100]	; (c548 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x80>)
    c4e2:	2500      	movs	r5, #0
    c4e4:	491a      	ldr	r1, [pc, #104]	; (c550 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>)
    c4e6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    c4ea:	4818      	ldr	r0, [pc, #96]	; (c54c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>)
    c4ec:	6008      	str	r0, [r1, #0]
    c4ee:	4819      	ldr	r0, [pc, #100]	; (c554 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8c>)
    c4f0:	6800      	ldr	r0, [r0, #0]
    c4f2:	b1b0      	cbz	r0, c522 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    c4f4:	20ff      	movs	r0, #255	; 0xff
    c4f6:	f88d 0000 	strb.w	r0, [sp]
    c4fa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c4fe:	2001      	movs	r0, #1
    c500:	6120      	str	r0, [r4, #16]
    c502:	e004      	b.n	c50e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x46>
    c504:	f89d 0000 	ldrb.w	r0, [sp]
    c508:	1e40      	subs	r0, r0, #1
    c50a:	f88d 0000 	strb.w	r0, [sp]
    c50e:	f89d 0000 	ldrb.w	r0, [sp]
    c512:	b118      	cbz	r0, c51c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x54>
    c514:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    c518:	2800      	cmp	r0, #0
    c51a:	d0f3      	beq.n	c504 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x3c>
    c51c:	f89d 0000 	ldrb.w	r0, [sp]
    c520:	b150      	cbz	r0, c538 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x70>
    c522:	f000 fc6f 	bl	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    c526:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c52a:	f000 fde7 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c52e:	2e00      	cmp	r6, #0
    c530:	d001      	beq.n	c536 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    c532:	f8c4 7304 	str.w	r7, [r4, #772]	; 0x304
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	f240 71a3 	movw	r1, #1955	; 0x7a3
    c53c:	203e      	movs	r0, #62	; 0x3e
    c53e:	f7f8 fbeb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c542:	0000      	.short	0x0000
    c544:	40001000 	.word	0x40001000
    c548:	20001334 	.word	0x20001334
    c54c:	0c0e0000 	.word	0x0c0e0000
    c550:	4001f508 	.word	0x4001f508
    c554:	40001550 	.word	0x40001550

0000c558 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c55c:	4c1f      	ldr	r4, [pc, #124]	; (c5dc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x84>)
    c55e:	4607      	mov	r7, r0
    c560:	4688      	mov	r8, r1
    c562:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c566:	07c1      	lsls	r1, r0, #31
    c568:	d018      	beq.n	c59c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    c56a:	4a1d      	ldr	r2, [pc, #116]	; (c5e0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    c56c:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    c570:	6011      	str	r1, [r2, #0]
    c572:	4d1c      	ldr	r5, [pc, #112]	; (c5e4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    c574:	f8d5 1200 	ldr.w	r1, [r5, #512]	; 0x200
    c578:	f041 0101 	orr.w	r1, r1, #1
    c57c:	f8c5 1200 	str.w	r1, [r5, #512]	; 0x200
    c580:	f040 0002 	orr.w	r0, r0, #2
    c584:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c588:	4640      	mov	r0, r8
    c58a:	f000 fe1b 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c58e:	f000 fbe7 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c592:	2601      	movs	r6, #1
    c594:	b13f      	cbz	r7, c5a6 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    c596:	2f01      	cmp	r7, #1
    c598:	d00e      	beq.n	c5b8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    c59a:	e016      	b.n	c5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c59c:	f240 612d 	movw	r1, #1581	; 0x62d
    c5a0:	203e      	movs	r0, #62	; 0x3e
    c5a2:	f7f8 fbb9 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5a6:	4640      	mov	r0, r8
    c5a8:	f000 fbfa 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c5ac:	4640      	mov	r0, r8
    c5ae:	f000 fbbb 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c5b2:	7266      	strb	r6, [r4, #9]
    c5b4:	602e      	str	r6, [r5, #0]
    c5b6:	e008      	b.n	c5ca <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c5b8:	f000 fc1a 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c5bc:	f000 fd68 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c5c0:	2002      	movs	r0, #2
    c5c2:	7260      	strb	r0, [r4, #9]
    c5c4:	f000 fc90 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c5c8:	606e      	str	r6, [r5, #4]
    c5ca:	4807      	ldr	r0, [pc, #28]	; (c5e8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    c5cc:	64c6      	str	r6, [r0, #76]	; 0x4c
    c5ce:	4807      	ldr	r0, [pc, #28]	; (c5ec <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c5d0:	6801      	ldr	r1, [r0, #0]
    c5d2:	4638      	mov	r0, r7
    c5d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c5d8:	f004 b90e 	b.w	107f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c5dc:	20001334 	.word	0x20001334
    c5e0:	4001f504 	.word	0x4001f504
    c5e4:	40001000 	.word	0x40001000
    c5e8:	40008000 	.word	0x40008000
    c5ec:	4000854c 	.word	0x4000854c

0000c5f0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5f4:	4d35      	ldr	r5, [pc, #212]	; (c6cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    c5f6:	4606      	mov	r6, r0
    c5f8:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c5fc:	4689      	mov	r9, r1
    c5fe:	6028      	str	r0, [r5, #0]
    c600:	4c33      	ldr	r4, [pc, #204]	; (c6d0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    c602:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c606:	f040 0002 	orr.w	r0, r0, #2
    c60a:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c60e:	4608      	mov	r0, r1
    c610:	f000 fdd8 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c614:	f000 fba4 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c618:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c6d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    c61c:	2700      	movs	r7, #0
    c61e:	b116      	cbz	r6, c626 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    c620:	2e01      	cmp	r6, #1
    c622:	d027      	beq.n	c674 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c624:	e03f      	b.n	c6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c626:	4648      	mov	r0, r9
    c628:	f000 fbba 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c62c:	79e0      	ldrb	r0, [r4, #7]
    c62e:	2801      	cmp	r0, #1
    c630:	d105      	bne.n	c63e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    c632:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c636:	f041 0108 	orr.w	r1, r1, #8
    c63a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c63e:	4648      	mov	r0, r9
    c640:	f000 fb72 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c644:	2001      	movs	r0, #1
    c646:	7260      	strb	r0, [r4, #9]
    c648:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c64a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c64e:	62a0      	str	r0, [r4, #40]	; 0x28
    c650:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c654:	6028      	str	r0, [r5, #0]
    c656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c65a:	f1b9 0f02 	cmp.w	r9, #2
    c65e:	d007      	beq.n	c670 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    c660:	f640 0034 	movw	r0, #2100	; 0x834
    c664:	f649 72ec 	movw	r2, #40940	; 0x9fec
    c668:	4410      	add	r0, r2
    c66a:	fbb0 f7f1 	udiv	r7, r0, r1
    c66e:	e01a      	b.n	c6a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c670:	4608      	mov	r0, r1
    c672:	e7f7      	b.n	c664 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    c674:	f000 fbbc 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    c678:	f000 fd0a 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c67c:	79e0      	ldrb	r0, [r4, #7]
    c67e:	2801      	cmp	r0, #1
    c680:	d105      	bne.n	c68e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    c682:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c686:	f041 0104 	orr.w	r1, r1, #4
    c68a:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c68e:	2002      	movs	r0, #2
    c690:	7260      	strb	r0, [r4, #9]
    c692:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c694:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c698:	62a0      	str	r0, [r4, #40]	; 0x28
    c69a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c69e:	6028      	str	r0, [r5, #0]
    c6a0:	2729      	movs	r7, #41	; 0x29
    c6a2:	f000 fc21 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    c6a6:	f000 fc0b 	bl	cec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    c6aa:	f000 fdb3 	bl	d214 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    c6ae:	6800      	ldr	r0, [r0, #0]
    c6b0:	2801      	cmp	r0, #1
    c6b2:	d006      	beq.n	c6c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    c6b4:	2100      	movs	r1, #0
    c6b6:	4630      	mov	r0, r6
    c6b8:	f004 f89e 	bl	107f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c6bc:	4638      	mov	r0, r7
    c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6c2:	f7ff ff01 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c6c6:	2000      	movs	r0, #0
    c6c8:	e7f9      	b.n	c6be <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    c6ca:	0000      	.short	0x0000
    c6cc:	4001f504 	.word	0x4001f504
    c6d0:	20001334 	.word	0x20001334
    c6d4:	40001000 	.word	0x40001000

0000c6d8 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c6d8:	b510      	push	{r4, lr}
    c6da:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c6dc:	4901      	ldr	r1, [pc, #4]	; (c6e4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c6de:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c6e2:	bd10      	pop	{r4, pc}
    c6e4:	20001324 	.word	0x20001324

0000c6e8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c6e8:	b570      	push	{r4, r5, r6, lr}
    c6ea:	4c10      	ldr	r4, [pc, #64]	; (c72c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    c6ec:	4606      	mov	r6, r0
    c6ee:	2002      	movs	r0, #2
    c6f0:	7320      	strb	r0, [r4, #12]
    c6f2:	2596      	movs	r5, #150	; 0x96
    c6f4:	f000 f856 	bl	c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c6f8:	4602      	mov	r2, r0
    c6fa:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c6fe:	f894 1020 	ldrb.w	r1, [r4, #32]
    c702:	2801      	cmp	r0, #1
    c704:	d00d      	beq.n	c722 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3a>
    c706:	4628      	mov	r0, r5
    c708:	f004 f88e 	bl	10828 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c70c:	4908      	ldr	r1, [pc, #32]	; (c730 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    c70e:	6120      	str	r0, [r4, #16]
    c710:	2000      	movs	r0, #0
    c712:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    c716:	6921      	ldr	r1, [r4, #16]
    c718:	69e0      	ldr	r0, [r4, #28]
    c71a:	4408      	add	r0, r1
    c71c:	4905      	ldr	r1, [pc, #20]	; (c734 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c71e:	6008      	str	r0, [r1, #0]
    c720:	bd70      	pop	{r4, r5, r6, pc}
    c722:	4633      	mov	r3, r6
    c724:	4628      	mov	r0, r5
    c726:	f004 f89b 	bl	10860 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c72a:	e7ef      	b.n	c70c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    c72c:	20001334 	.word	0x20001334
    c730:	40008000 	.word	0x40008000
    c734:	40008544 	.word	0x40008544

0000c738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c73c:	2238      	movs	r2, #56	; 0x38
    c73e:	2100      	movs	r1, #0
    c740:	4813      	ldr	r0, [pc, #76]	; (c790 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c742:	f000 ff59 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c746:	f000 fcd9 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    c74a:	f000 fe5e 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c74e:	4d11      	ldr	r5, [pc, #68]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c750:	4e10      	ldr	r6, [pc, #64]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c752:	2400      	movs	r4, #0
    c754:	4f0f      	ldr	r7, [pc, #60]	; (c794 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c756:	3508      	adds	r5, #8
    c758:	3610      	adds	r6, #16
    c75a:	b928      	cbnz	r0, c768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c75c:	f000 fe6c 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c760:	b910      	cbnz	r0, c768 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c762:	f000 fe73 	bl	d44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c766:	b108      	cbz	r0, c76c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c768:	2224      	movs	r2, #36	; 0x24
    c76a:	e006      	b.n	c77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c76c:	f000 feae 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c770:	b910      	cbnz	r0, c778 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c772:	f000 fea1 	bl	d4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c776:	b140      	cbz	r0, c78a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c778:	2240      	movs	r2, #64	; 0x40
    c77a:	21ff      	movs	r1, #255	; 0xff
    c77c:	4638      	mov	r0, r7
    c77e:	f000 ff3b 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c782:	602c      	str	r4, [r5, #0]
    c784:	6034      	str	r4, [r6, #0]
    c786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c78a:	2238      	movs	r2, #56	; 0x38
    c78c:	e7f5      	b.n	c77a <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c78e:	0000      	.short	0x0000
    c790:	20001334 	.word	0x20001334
    c794:	40000e00 	.word	0x40000e00

0000c798 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c798:	4801      	ldr	r0, [pc, #4]	; (c7a0 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    c79a:	69c0      	ldr	r0, [r0, #28]
    c79c:	4770      	bx	lr
    c79e:	0000      	.short	0x0000
    c7a0:	20001334 	.word	0x20001334

0000c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    c7a4:	4814      	ldr	r0, [pc, #80]	; (c7f8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    c7a6:	b510      	push	{r4, lr}
    c7a8:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    c7ac:	7a40      	ldrb	r0, [r0, #9]
    c7ae:	b141      	cbz	r1, c7c2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    c7b0:	2902      	cmp	r1, #2
    c7b2:	d00b      	beq.n	c7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c7b4:	2802      	cmp	r0, #2
    c7b6:	d009      	beq.n	c7cc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c7b8:	2901      	cmp	r1, #1
    c7ba:	d00b      	beq.n	c7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c7bc:	2801      	cmp	r0, #1
    c7be:	d009      	beq.n	c7d4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c7c0:	e015      	b.n	c7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    c7c2:	2800      	cmp	r0, #0
    c7c4:	d1f6      	bne.n	c7b4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    c7c6:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    c7ca:	e00d      	b.n	c7e8 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x44>
    c7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c7d0:	f000 bc10 	b.w	cff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d8>
    c7d4:	4809      	ldr	r0, [pc, #36]	; (c7fc <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    c7d6:	6800      	ldr	r0, [r0, #0]
    c7d8:	f000 000f 	and.w	r0, r0, #15
    c7dc:	2803      	cmp	r0, #3
    c7de:	d006      	beq.n	c7ee <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4a>
    c7e0:	2804      	cmp	r0, #4
    c7e2:	d006      	beq.n	c7f2 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4e>
    c7e4:	f240 11e7 	movw	r1, #487	; 0x1e7
    c7e8:	203e      	movs	r0, #62	; 0x3e
    c7ea:	f7f8 fa95 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c7ee:	2001      	movs	r0, #1
    c7f0:	bd10      	pop	{r4, pc}
    c7f2:	2002      	movs	r0, #2
    c7f4:	bd10      	pop	{r4, pc}
    c7f6:	0000      	.short	0x0000
    c7f8:	20001334 	.word	0x20001334
    c7fc:	40001510 	.word	0x40001510

0000c800 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c800:	b510      	push	{r4, lr}
    c802:	f000 fc61 	bl	d0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    c806:	f7ff fe5f 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c80a:	f003 ff8b 	bl	10724 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    c80e:	480f      	ldr	r0, [pc, #60]	; (c84c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    c810:	4a0f      	ldr	r2, [pc, #60]	; (c850 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    c812:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c814:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c818:	6011      	str	r1, [r2, #0]
    c81a:	2400      	movs	r4, #0
    c81c:	6284      	str	r4, [r0, #40]	; 0x28
    c81e:	7304      	strb	r4, [r0, #12]
    c820:	61c4      	str	r4, [r0, #28]
    c822:	6184      	str	r4, [r0, #24]
    c824:	f000 fc50 	bl	d0c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>
    c828:	480a      	ldr	r0, [pc, #40]	; (c854 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    c82a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c82e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c832:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c836:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c83a:	2001      	movs	r0, #1
    c83c:	f003 ffab 	bl	10796 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c844:	2001      	movs	r0, #1
    c846:	f003 bf99 	b.w	1077c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c84a:	0000      	.short	0x0000
    c84c:	20001334 	.word	0x20001334
    c850:	4001f508 	.word	0x4001f508
    c854:	40008000 	.word	0x40008000

0000c858 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85c:	2001      	movs	r0, #1
    c85e:	f003 ff9a 	bl	10796 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c862:	4838      	ldr	r0, [pc, #224]	; (c944 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c864:	2400      	movs	r4, #0
    c866:	6004      	str	r4, [r0, #0]
    c868:	2601      	movs	r6, #1
    c86a:	6006      	str	r6, [r0, #0]
    c86c:	f000 fe04 	bl	d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c870:	4d35      	ldr	r5, [pc, #212]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c872:	b118      	cbz	r0, c87c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x24>
    c874:	6828      	ldr	r0, [r5, #0]
    c876:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c87a:	6028      	str	r0, [r5, #0]
    c87c:	f000 fdf0 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c880:	b128      	cbz	r0, c88e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x36>
    c882:	6828      	ldr	r0, [r5, #0]
    c884:	4931      	ldr	r1, [pc, #196]	; (c94c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    c886:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    c88a:	4308      	orrs	r0, r1
    c88c:	6028      	str	r0, [r5, #0]
    c88e:	f000 fe03 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c892:	b138      	cbz	r0, c8a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4c>
    c894:	482c      	ldr	r0, [pc, #176]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c896:	1d00      	adds	r0, r0, #4
    c898:	6801      	ldr	r1, [r0, #0]
    c89a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    c89e:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    c8a2:	6001      	str	r1, [r0, #0]
    c8a4:	4928      	ldr	r1, [pc, #160]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c8a6:	482a      	ldr	r0, [pc, #168]	; (c950 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    c8a8:	313c      	adds	r1, #60	; 0x3c
    c8aa:	6008      	str	r0, [r1, #0]
    c8ac:	f7f8 f8ec 	bl	4a88 <mpsl_fem_device_config_254_apply_get>
    c8b0:	b140      	cbz	r0, c8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    c8b2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c8b6:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    c8ba:	1c41      	adds	r1, r0, #1
    c8bc:	d002      	beq.n	c8c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6c>
    c8be:	4922      	ldr	r1, [pc, #136]	; (c948 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    c8c0:	3110      	adds	r1, #16
    c8c2:	6008      	str	r0, [r1, #0]
    c8c4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    c8c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
    c8ca:	1c41      	adds	r1, r0, #1
    c8cc:	d004      	beq.n	c8d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x80>
    c8ce:	4921      	ldr	r1, [pc, #132]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8d0:	680a      	ldr	r2, [r1, #0]
    c8d2:	f360 4217 	bfi	r2, r0, #16, #8
    c8d6:	600a      	str	r2, [r1, #0]
    c8d8:	491e      	ldr	r1, [pc, #120]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8da:	f240 605b 	movw	r0, #1627	; 0x65b
    c8de:	3954      	subs	r1, #84	; 0x54
    c8e0:	6008      	str	r0, [r1, #0]
    c8e2:	1f09      	subs	r1, r1, #4
    c8e4:	f240 1003 	movw	r0, #259	; 0x103
    c8e8:	6008      	str	r0, [r1, #0]
    c8ea:	1f08      	subs	r0, r1, #4
    c8ec:	6006      	str	r6, [r0, #0]
    c8ee:	2001      	movs	r0, #1
    c8f0:	f000 fc68 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c8f4:	4917      	ldr	r1, [pc, #92]	; (c954 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    c8f6:	f240 1001 	movw	r0, #257	; 0x101
    c8fa:	31c4      	adds	r1, #196	; 0xc4
    c8fc:	6008      	str	r0, [r1, #0]
    c8fe:	4e16      	ldr	r6, [pc, #88]	; (c958 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    c900:	2502      	movs	r5, #2
    c902:	f8c6 5200 	str.w	r5, [r6, #512]	; 0x200
    c906:	4916      	ldr	r1, [pc, #88]	; (c960 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    c908:	4814      	ldr	r0, [pc, #80]	; (c95c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    c90a:	6008      	str	r0, [r1, #0]
    c90c:	4815      	ldr	r0, [pc, #84]	; (c964 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x10c>)
    c90e:	4f16      	ldr	r7, [pc, #88]	; (c968 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x110>)
    c910:	f506 7600 	add.w	r6, r6, #512	; 0x200
    c914:	8604      	strh	r4, [r0, #48]	; 0x30
    c916:	3010      	adds	r0, #16
    c918:	61c4      	str	r4, [r0, #28]
    c91a:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
    c91e:	703c      	strb	r4, [r7, #0]
    c920:	2001      	movs	r0, #1
    c922:	f003 ff2b 	bl	1077c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c926:	2010      	movs	r0, #16
    c928:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
    c92c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    c930:	f8c0 5100 	str.w	r5, [r0, #256]	; 0x100
    c934:	6878      	ldr	r0, [r7, #4]
    c936:	2800      	cmp	r0, #0
    c938:	d002      	beq.n	c940 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>
    c93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c93e:	4700      	bx	r0
    c940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c944:	40001ffc 	.word	0x40001ffc
    c948:	4000173c 	.word	0x4000173c
    c94c:	80000096 	.word	0x80000096
    c950:	8900002c 	.word	0x8900002c
    c954:	4000158c 	.word	0x4000158c
    c958:	40001000 	.word	0x40001000
    c95c:	0c0e0000 	.word	0x0c0e0000
    c960:	4001f508 	.word	0x4001f508
    c964:	20001324 	.word	0x20001324
    c968:	20000264 	.word	0x20000264

0000c96c <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    c96c:	4901      	ldr	r1, [pc, #4]	; (c974 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    c96e:	7508      	strb	r0, [r1, #20]
    c970:	4770      	bx	lr
    c972:	0000      	.short	0x0000
    c974:	20001334 	.word	0x20001334

0000c978 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    c978:	4904      	ldr	r1, [pc, #16]	; (c98c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x14>)
    c97a:	6008      	str	r0, [r1, #0]
    c97c:	4804      	ldr	r0, [pc, #16]	; (c990 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    c97e:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    c982:	f041 0101 	orr.w	r1, r1, #1
    c986:	7001      	strb	r1, [r0, #0]
    c988:	f000 ba62 	b.w	ce50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    c98c:	40001504 	.word	0x40001504
    c990:	20001334 	.word	0x20001334

0000c994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    c994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c998:	4e35      	ldr	r6, [pc, #212]	; (ca70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>)
    c99a:	4607      	mov	r7, r0
    c99c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c9a0:	468a      	mov	sl, r1
    c9a2:	4614      	mov	r4, r2
    c9a4:	6030      	str	r0, [r6, #0]
    c9a6:	4610      	mov	r0, r2
    c9a8:	f000 fc0c 	bl	d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c9ac:	f000 f9d8 	bl	cd60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c9b0:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ca74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>
    c9b4:	4d30      	ldr	r5, [pc, #192]	; (ca78 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    c9b6:	f04f 0801 	mov.w	r8, #1
    c9ba:	b127      	cbz	r7, c9c6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    c9bc:	2f01      	cmp	r7, #1
    c9be:	d01d      	beq.n	c9fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    c9c0:	f240 7122 	movw	r1, #1826	; 0x722
    c9c4:	e04a      	b.n	ca5c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>
    c9c6:	4620      	mov	r0, r4
    c9c8:	f000 f9ea 	bl	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    c9cc:	4620      	mov	r0, r4
    c9ce:	f000 f9ab 	bl	cd28 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c9d2:	2c02      	cmp	r4, #2
    c9d4:	d00f      	beq.n	c9f6 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    c9d6:	f640 0034 	movw	r0, #2100	; 0x834
    c9da:	bf00      	nop
    c9dc:	f649 51f8 	movw	r1, #40440	; 0x9df8
    c9e0:	4401      	add	r1, r0
    c9e2:	4650      	mov	r0, sl
    c9e4:	f000 fb92 	bl	d10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    c9e8:	4604      	mov	r4, r0
    c9ea:	4648      	mov	r0, r9
    c9ec:	f000 fb7a 	bl	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    c9f0:	f885 8009 	strb.w	r8, [r5, #9]
    c9f4:	e014      	b.n	ca20 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    c9f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    c9fa:	e7ef      	b.n	c9dc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    c9fc:	f000 f9f8 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    ca00:	f000 fb46 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    ca04:	f000 fa70 	bl	cee8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    ca08:	f649 71ba 	movw	r1, #40890	; 0x9fba
    ca0c:	4650      	mov	r0, sl
    ca0e:	f000 fb7d 	bl	d10c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    ca12:	4604      	mov	r4, r0
    ca14:	4817      	ldr	r0, [pc, #92]	; (ca74 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    ca16:	1d00      	adds	r0, r0, #4
    ca18:	f000 fb64 	bl	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>
    ca1c:	2002      	movs	r0, #2
    ca1e:	7268      	strb	r0, [r5, #9]
    ca20:	4816      	ldr	r0, [pc, #88]	; (ca7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ca22:	6004      	str	r4, [r0, #0]
    ca24:	4917      	ldr	r1, [pc, #92]	; (ca84 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    ca26:	4816      	ldr	r0, [pc, #88]	; (ca80 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    ca28:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    ca2c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    ca2e:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    ca32:	62a8      	str	r0, [r5, #40]	; 0x28
    ca34:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    ca38:	6030      	str	r0, [r6, #0]
    ca3a:	2110      	movs	r1, #16
    ca3c:	f8c9 1304 	str.w	r1, [r9, #772]	; 0x304
    ca40:	1200      	asrs	r0, r0, #8
    ca42:	6030      	str	r0, [r6, #0]
    ca44:	f000 fa3c 	bl	cec0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a4>
    ca48:	490f      	ldr	r1, [pc, #60]	; (ca88 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    ca4a:	f8c1 804c 	str.w	r8, [r1, #76]	; 0x4c
    ca4e:	480b      	ldr	r0, [pc, #44]	; (ca7c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    ca50:	300c      	adds	r0, #12
    ca52:	6800      	ldr	r0, [r0, #0]
    ca54:	42a0      	cmp	r0, r4
    ca56:	d304      	bcc.n	ca62 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xce>
    ca58:	f240 7149 	movw	r1, #1865	; 0x749
    ca5c:	203e      	movs	r0, #62	; 0x3e
    ca5e:	f7f8 f95b 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ca62:	4621      	mov	r1, r4
    ca64:	4638      	mov	r0, r7
    ca66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca6a:	f003 bec5 	b.w	107f8 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    ca6e:	0000      	.short	0x0000
    ca70:	4001f504 	.word	0x4001f504
    ca74:	40001000 	.word	0x40001000
    ca78:	20001334 	.word	0x20001334
    ca7c:	40008540 	.word	0x40008540
    ca80:	40008140 	.word	0x40008140
    ca84:	4001f098 	.word	0x4001f098
    ca88:	40008000 	.word	0x40008000

0000ca8c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    ca8c:	4b0d      	ldr	r3, [pc, #52]	; (cac4 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    ca8e:	b510      	push	{r4, lr}
    ca90:	71d8      	strb	r0, [r3, #7]
    ca92:	729a      	strb	r2, [r3, #10]
    ca94:	b151      	cbz	r1, caac <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    ca96:	2002      	movs	r0, #2
    ca98:	7218      	strb	r0, [r3, #8]
    ca9a:	2801      	cmp	r0, #1
    ca9c:	d008      	beq.n	cab0 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    ca9e:	2802      	cmp	r0, #2
    caa0:	d00f      	beq.n	cac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    caa2:	f640 112a 	movw	r1, #2346	; 0x92a
    caa6:	203e      	movs	r0, #62	; 0x3e
    caa8:	f7f8 f936 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    caac:	2001      	movs	r0, #1
    caae:	e7f3      	b.n	ca98 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    cab0:	7a58      	ldrb	r0, [r3, #9]
    cab2:	2802      	cmp	r0, #2
    cab4:	d105      	bne.n	cac2 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    cab6:	f000 f99b 	bl	cdf0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    caba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cabe:	f000 bae7 	b.w	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    cac2:	bd10      	pop	{r4, pc}
    cac4:	20001334 	.word	0x20001334

0000cac8 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    cac8:	4901      	ldr	r1, [pc, #4]	; (cad0 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0x8>)
    caca:	2000      	movs	r0, #0
    cacc:	6008      	str	r0, [r1, #0]
    cace:	4770      	bx	lr
    cad0:	40008540 	.word	0x40008540

0000cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    cad4:	490a      	ldr	r1, [pc, #40]	; (cb00 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2c>)
    cad6:	b508      	push	{r3, lr}
    cad8:	f8d1 211c 	ldr.w	r2, [r1, #284]	; 0x11c
    cadc:	2a01      	cmp	r2, #1
    cade:	d001      	beq.n	cae4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x10>
    cae0:	2000      	movs	r0, #0
    cae2:	bd08      	pop	{r3, pc}
    cae4:	4a07      	ldr	r2, [pc, #28]	; (cb04 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    cae6:	6812      	ldr	r2, [r2, #0]
    cae8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    caec:	4252      	negs	r2, r2
    caee:	7002      	strb	r2, [r0, #0]
    caf0:	2000      	movs	r0, #0
    caf2:	f8c1 011c 	str.w	r0, [r1, #284]	; 0x11c
    caf6:	4804      	ldr	r0, [pc, #16]	; (cb08 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    caf8:	6800      	ldr	r0, [r0, #0]
    cafa:	9000      	str	r0, [sp, #0]
    cafc:	2001      	movs	r0, #1
    cafe:	bd08      	pop	{r3, pc}
    cb00:	40001000 	.word	0x40001000
    cb04:	40001548 	.word	0x40001548
    cb08:	4000111c 	.word	0x4000111c

0000cb0c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    cb0c:	4a03      	ldr	r2, [pc, #12]	; (cb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cb0e:	0e01      	lsrs	r1, r0, #24
    cb10:	6011      	str	r1, [r2, #0]
    cb12:	4902      	ldr	r1, [pc, #8]	; (cb1c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cb14:	0200      	lsls	r0, r0, #8
    cb16:	3908      	subs	r1, #8
    cb18:	6008      	str	r0, [r1, #0]
    cb1a:	4770      	bx	lr
    cb1c:	40001524 	.word	0x40001524

0000cb20 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    cb20:	6800      	ldr	r0, [r0, #0]
    cb22:	4902      	ldr	r1, [pc, #8]	; (cb2c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0xc>)
    cb24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cb28:	6008      	str	r0, [r1, #0]
    cb2a:	4770      	bx	lr
    cb2c:	4000153c 	.word	0x4000153c

0000cb30 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    cb30:	b510      	push	{r4, lr}
    cb32:	f000 fb23 	bl	d17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    cb36:	4806      	ldr	r0, [pc, #24]	; (cb50 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>)
    cb38:	6800      	ldr	r0, [r0, #0]
    cb3a:	2803      	cmp	r0, #3
    cb3c:	d001      	beq.n	cb42 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x12>
    cb3e:	280b      	cmp	r0, #11
    cb40:	d104      	bne.n	cb4c <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x1c>
    cb42:	f240 218a 	movw	r1, #650	; 0x28a
    cb46:	203e      	movs	r0, #62	; 0x3e
    cb48:	f7f8 f8e6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cb4c:	bd10      	pop	{r4, pc}
    cb4e:	0000      	.short	0x0000
    cb50:	40001550 	.word	0x40001550

0000cb54 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    cb54:	4901      	ldr	r1, [pc, #4]	; (cb5c <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    cb56:	7548      	strb	r0, [r1, #21]
    cb58:	4770      	bx	lr
    cb5a:	0000      	.short	0x0000
    cb5c:	20001334 	.word	0x20001334

0000cb60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb64:	4d51      	ldr	r5, [pc, #324]	; (ccac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    cb66:	2701      	movs	r7, #1
    cb68:	64ef      	str	r7, [r5, #76]	; 0x4c
    cb6a:	4851      	ldr	r0, [pc, #324]	; (ccb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    cb6c:	f8d0 9000 	ldr.w	r9, [r0]
    cb70:	4850      	ldr	r0, [pc, #320]	; (ccb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    cb72:	6800      	ldr	r0, [r0, #0]
    cb74:	4c50      	ldr	r4, [pc, #320]	; (ccb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    cb76:	e9c4 090c 	strd	r0, r9, [r4, #48]	; 0x30
    cb7a:	f000 f943 	bl	ce04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe8>
    cb7e:	494f      	ldr	r1, [pc, #316]	; (ccbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    cb80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cb82:	6008      	str	r0, [r1, #0]
    cb84:	f8df a138 	ldr.w	sl, [pc, #312]	; ccc0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    cb88:	2600      	movs	r6, #0
    cb8a:	62a6      	str	r6, [r4, #40]	; 0x28
    cb8c:	f8da 1200 	ldr.w	r1, [sl, #512]	; 0x200
    cb90:	f240 121d 	movw	r2, #285	; 0x11d
    cb94:	4391      	bics	r1, r2
    cb96:	f8ca 1200 	str.w	r1, [sl, #512]	; 0x200
    cb9a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    cb9e:	f8da 010c 	ldr.w	r0, [sl, #268]	; 0x10c
    cba2:	b900      	cbnz	r0, cba6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x46>
    cba4:	64af      	str	r7, [r5, #72]	; 0x48
    cba6:	f000 f9b1 	bl	cf0c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1f0>
    cbaa:	4605      	mov	r5, r0
    cbac:	4840      	ldr	r0, [pc, #256]	; (ccb0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    cbae:	1f00      	subs	r0, r0, #4
    cbb0:	6800      	ldr	r0, [r0, #0]
    cbb2:	61e0      	str	r0, [r4, #28]
    cbb4:	f7ff fdf6 	bl	c7a4 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    cbb8:	f884 0020 	strb.w	r0, [r4, #32]
    cbbc:	7a60      	ldrb	r0, [r4, #9]
    cbbe:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    cbc2:	61a6      	str	r6, [r4, #24]
    cbc4:	4e3f      	ldr	r6, [pc, #252]	; (ccc4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    cbc6:	07a8      	lsls	r0, r5, #30
    cbc8:	d501      	bpl.n	cbce <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x6e>
    cbca:	6830      	ldr	r0, [r6, #0]
    cbcc:	61a0      	str	r0, [r4, #24]
    cbce:	0728      	lsls	r0, r5, #28
    cbd0:	d501      	bpl.n	cbd6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x76>
    cbd2:	6830      	ldr	r0, [r6, #0]
    cbd4:	61a0      	str	r0, [r4, #24]
    cbd6:	f04f 0800 	mov.w	r8, #0
    cbda:	4649      	mov	r1, r9
    cbdc:	4628      	mov	r0, r5
    cbde:	f000 fa1d 	bl	d01c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    cbe2:	b918      	cbnz	r0, cbec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x8c>
    cbe4:	f8ca 7010 	str.w	r7, [sl, #16]
    cbe8:	f04f 0801 	mov.w	r8, #1
    cbec:	4f32      	ldr	r7, [pc, #200]	; (ccb8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    cbee:	07e8      	lsls	r0, r5, #31
    cbf0:	f1a7 0710 	sub.w	r7, r7, #16
    cbf4:	d002      	beq.n	cbfc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x9c>
    cbf6:	6838      	ldr	r0, [r7, #0]
    cbf8:	4780      	blx	r0
    cbfa:	e031      	b.n	cc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    cbfc:	07a8      	lsls	r0, r5, #30
    cbfe:	d526      	bpl.n	cc4e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xee>
    cc00:	0768      	lsls	r0, r5, #29
    cc02:	d41e      	bmi.n	cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc04:	f000 fc48 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cc08:	b9d8      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc0a:	f000 fc35 	bl	d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cc0e:	b9c0      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc10:	482d      	ldr	r0, [pc, #180]	; (ccc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cc12:	6800      	ldr	r0, [r0, #0]
    cc14:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    cc18:	f3c0 6300 	ubfx	r3, r0, #24, #1
    cc1c:	f000 020f 	and.w	r2, r0, #15
    cc20:	f3c0 1103 	ubfx	r1, r0, #4, #4
    cc24:	f3c0 2003 	ubfx	r0, r0, #8, #4
    cc28:	b15b      	cbz	r3, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc2a:	b10a      	cbz	r2, cc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    cc2c:	b101      	cbz	r1, cc30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    cc2e:	b940      	cbnz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc30:	4825      	ldr	r0, [pc, #148]	; (ccc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cc32:	1d00      	adds	r0, r0, #4
    cc34:	6800      	ldr	r0, [r0, #0]
    cc36:	b120      	cbz	r0, cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc38:	f1bc 0f03 	cmp.w	ip, #3
    cc3c:	d201      	bcs.n	cc42 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe2>
    cc3e:	f045 0504 	orr.w	r5, r5, #4
    cc42:	f345 0080 	sbfx	r0, r5, #2, #1
    cc46:	4641      	mov	r1, r8
    cc48:	1c40      	adds	r0, r0, #1
    cc4a:	687a      	ldr	r2, [r7, #4]
    cc4c:	e007      	b.n	cc5e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfe>
    cc4e:	f015 0f28 	tst.w	r5, #40	; 0x28
    cc52:	d005      	beq.n	cc60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x100>
    cc54:	f345 1140 	sbfx	r1, r5, #5, #1
    cc58:	68ba      	ldr	r2, [r7, #8]
    cc5a:	4640      	mov	r0, r8
    cc5c:	1c49      	adds	r1, r1, #1
    cc5e:	4790      	blx	r2
    cc60:	06e8      	lsls	r0, r5, #27
    cc62:	d501      	bpl.n	cc68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x108>
    cc64:	68f8      	ldr	r0, [r7, #12]
    cc66:	4780      	blx	r0
    cc68:	7a60      	ldrb	r0, [r4, #9]
    cc6a:	2802      	cmp	r0, #2
    cc6c:	d11b      	bne.n	cca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    cc6e:	7b20      	ldrb	r0, [r4, #12]
    cc70:	2800      	cmp	r0, #0
    cc72:	d018      	beq.n	cca6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    cc74:	2802      	cmp	r0, #2
    cc76:	d004      	beq.n	cc82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    cc78:	2801      	cmp	r0, #1
    cc7a:	d006      	beq.n	cc8a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12a>
    cc7c:	f640 3103 	movw	r1, #2819	; 0xb03
    cc80:	e009      	b.n	cc96 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x136>
    cc82:	6921      	ldr	r1, [r4, #16]
    cc84:	69e0      	ldr	r0, [r4, #28]
    cc86:	4408      	add	r0, r1
    cc88:	e008      	b.n	cc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cc8a:	69e1      	ldr	r1, [r4, #28]
    cc8c:	6920      	ldr	r0, [r4, #16]
    cc8e:	4288      	cmp	r0, r1
    cc90:	d804      	bhi.n	cc9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    cc92:	f640 3104 	movw	r1, #2820	; 0xb04
    cc96:	203e      	movs	r0, #62	; 0x3e
    cc98:	f7f8 f83e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc9c:	6030      	str	r0, [r6, #0]
    cc9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cca2:	f000 ba03 	b.w	d0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>
    cca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ccaa:	0000      	.short	0x0000
    ccac:	40008000 	.word	0x40008000
    ccb0:	4000854c 	.word	0x4000854c
    ccb4:	4000b504 	.word	0x4000b504
    ccb8:	20001334 	.word	0x20001334
    ccbc:	4001f508 	.word	0x4001f508
    ccc0:	40001000 	.word	0x40001000
    ccc4:	40008544 	.word	0x40008544
    ccc8:	40001450 	.word	0x40001450

0000cccc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    cccc:	b570      	push	{r4, r5, r6, lr}
    ccce:	4b11      	ldr	r3, [pc, #68]	; (cd14 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x48>)
    ccd0:	888c      	ldrh	r4, [r1, #4]
    ccd2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ccd6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
    ccda:	780c      	ldrb	r4, [r1, #0]
    ccdc:	f8d1 1001 	ldr.w	r1, [r1, #1]
    cce0:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    cce4:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
    cce8:	4d0b      	ldr	r5, [pc, #44]	; (cd18 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4c>)
    ccea:	6829      	ldr	r1, [r5, #0]
    ccec:	f100 0608 	add.w	r6, r0, #8
    ccf0:	2401      	movs	r4, #1
    ccf2:	fa04 f306 	lsl.w	r3, r4, r6
    ccf6:	b132      	cbz	r2, cd06 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    ccf8:	2a01      	cmp	r2, #1
    ccfa:	d006      	beq.n	cd0a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3e>
    ccfc:	f240 41c1 	movw	r1, #1217	; 0x4c1
    cd00:	203e      	movs	r0, #62	; 0x3e
    cd02:	f7f8 f809 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cd06:	4399      	bics	r1, r3
    cd08:	e000      	b.n	cd0c <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x40>
    cd0a:	4319      	orrs	r1, r3
    cd0c:	4084      	lsls	r4, r0
    cd0e:	430c      	orrs	r4, r1
    cd10:	602c      	str	r4, [r5, #0]
    cd12:	bd70      	pop	{r4, r5, r6, pc}
    cd14:	40001000 	.word	0x40001000
    cd18:	40001640 	.word	0x40001640

0000cd1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    cd1c:	4901      	ldr	r1, [pc, #4]	; (cd24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    cd1e:	2001      	movs	r0, #1
    cd20:	7008      	strb	r0, [r1, #0]
    cd22:	4770      	bx	lr
    cd24:	20000264 	.word	0x20000264
    cd28:	b510      	push	{r4, lr}
    cd2a:	4604      	mov	r4, r0
    cd2c:	f000 fbb4 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cd30:	2800      	cmp	r0, #0
    cd32:	d00e      	beq.n	cd52 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    cd34:	4a09      	ldr	r2, [pc, #36]	; (cd5c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    cd36:	6811      	ldr	r1, [r2, #0]
    cd38:	0650      	lsls	r0, r2, #25
    cd3a:	2c02      	cmp	r4, #2
    cd3c:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    cd40:	d008      	beq.n	cd54 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    cd42:	f3c0 2006 	ubfx	r0, r0, #8, #7
    cd46:	bf00      	nop
    cd48:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cd4c:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cd50:	6010      	str	r0, [r2, #0]
    cd52:	bd10      	pop	{r4, pc}
    cd54:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cd58:	e7f6      	b.n	cd48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    cd5a:	0000      	.short	0x0000
    cd5c:	40001588 	.word	0x40001588
    cd60:	480d      	ldr	r0, [pc, #52]	; (cd98 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>)
    cd62:	7d40      	ldrb	r0, [r0, #21]
    cd64:	2825      	cmp	r0, #37	; 0x25
    cd66:	d007      	beq.n	cd78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x5c>
    cd68:	2826      	cmp	r0, #38	; 0x26
    cd6a:	d007      	beq.n	cd7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x60>
    cd6c:	2827      	cmp	r0, #39	; 0x27
    cd6e:	d007      	beq.n	cd80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x64>
    cd70:	280a      	cmp	r0, #10
    cd72:	d807      	bhi.n	cd84 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    cd74:	2204      	movs	r2, #4
    cd76:	e006      	b.n	cd86 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6a>
    cd78:	2102      	movs	r1, #2
    cd7a:	e007      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd7c:	211a      	movs	r1, #26
    cd7e:	e005      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd80:	2150      	movs	r1, #80	; 0x50
    cd82:	e003      	b.n	cd8c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x70>
    cd84:	2206      	movs	r2, #6
    cd86:	eb02 0140 	add.w	r1, r2, r0, lsl #1
    cd8a:	b2c9      	uxtb	r1, r1
    cd8c:	4a03      	ldr	r2, [pc, #12]	; (cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    cd8e:	6011      	str	r1, [r2, #0]
    cd90:	4902      	ldr	r1, [pc, #8]	; (cd9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x80>)
    cd92:	314c      	adds	r1, #76	; 0x4c
    cd94:	6008      	str	r0, [r1, #0]
    cd96:	4770      	bx	lr
    cd98:	20001334 	.word	0x20001334
    cd9c:	40001508 	.word	0x40001508
    cda0:	4912      	ldr	r1, [pc, #72]	; (cdec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>)
    cda2:	b508      	push	{r3, lr}
    cda4:	f991 2014 	ldrsb.w	r2, [r1, #20]
    cda8:	7d49      	ldrb	r1, [r1, #21]
    cdaa:	2801      	cmp	r0, #1
    cdac:	d00a      	beq.n	cdc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa8>
    cdae:	2802      	cmp	r0, #2
    cdb0:	d00a      	beq.n	cdc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xac>
    cdb2:	2804      	cmp	r0, #4
    cdb4:	d00a      	beq.n	cdcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb0>
    cdb6:	2808      	cmp	r0, #8
    cdb8:	d00a      	beq.n	cdd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    cdba:	f240 31da 	movw	r1, #986	; 0x3da
    cdbe:	2006      	movs	r0, #6
    cdc0:	f7f7 ffaa 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cdc4:	2000      	movs	r0, #0
    cdc6:	e004      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdc8:	2001      	movs	r0, #1
    cdca:	e002      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdcc:	2003      	movs	r0, #3
    cdce:	e000      	b.n	cdd2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb6>
    cdd0:	2002      	movs	r0, #2
    cdd2:	466b      	mov	r3, sp
    cdd4:	f7f4 fb0e 	bl	13f4 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    cdd8:	b118      	cbz	r0, cde2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    cdda:	f240 41f3 	movw	r1, #1267	; 0x4f3
    cdde:	203e      	movs	r0, #62	; 0x3e
    cde0:	e7ee      	b.n	cdc0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    cde2:	f99d 0000 	ldrsb.w	r0, [sp]
    cde6:	f000 f9e7 	bl	d1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    cdea:	bd08      	pop	{r3, pc}
    cdec:	20001334 	.word	0x20001334
    cdf0:	4803      	ldr	r0, [pc, #12]	; (ce00 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe4>)
    cdf2:	7a01      	ldrb	r1, [r0, #8]
    cdf4:	2901      	cmp	r1, #1
    cdf6:	d102      	bne.n	cdfe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe2>
    cdf8:	7a80      	ldrb	r0, [r0, #10]
    cdfa:	f7ff bfd1 	b.w	cda0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x84>
    cdfe:	4770      	bx	lr
    ce00:	20001334 	.word	0x20001334
    ce04:	4805      	ldr	r0, [pc, #20]	; (ce1c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x100>)
    ce06:	7a40      	ldrb	r0, [r0, #9]
    ce08:	2801      	cmp	r0, #1
    ce0a:	d003      	beq.n	ce14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf8>
    ce0c:	2802      	cmp	r0, #2
    ce0e:	d103      	bne.n	ce18 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xfc>
    ce10:	f003 bc70 	b.w	106f4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    ce14:	f003 bc7a 	b.w	1070c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    ce18:	4770      	bx	lr
    ce1a:	0000      	.short	0x0000
    ce1c:	20001334 	.word	0x20001334
    ce20:	4809      	ldr	r0, [pc, #36]	; (ce48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12c>)
    ce22:	b508      	push	{r3, lr}
    ce24:	2100      	movs	r1, #0
    ce26:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    ce2a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    ce2e:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    ce32:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    ce36:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    ce3a:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    ce3e:	4803      	ldr	r0, [pc, #12]	; (ce4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x130>)
    ce40:	6800      	ldr	r0, [r0, #0]
    ce42:	9000      	str	r0, [sp, #0]
    ce44:	bd08      	pop	{r3, pc}
    ce46:	0000      	.short	0x0000
    ce48:	40001000 	.word	0x40001000
    ce4c:	40001118 	.word	0x40001118
    ce50:	4816      	ldr	r0, [pc, #88]	; (ceac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>)
    ce52:	b510      	push	{r4, lr}
    ce54:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    ce58:	07c1      	lsls	r1, r0, #31
    ce5a:	d026      	beq.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce5c:	0781      	lsls	r1, r0, #30
    ce5e:	d513      	bpl.n	ce88 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x16c>
    ce60:	4813      	ldr	r0, [pc, #76]	; (ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    ce62:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    ce66:	f041 0101 	orr.w	r1, r1, #1
    ce6a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    ce6e:	4811      	ldr	r0, [pc, #68]	; (ceb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x198>)
    ce70:	6800      	ldr	r0, [r0, #0]
    ce72:	280b      	cmp	r0, #11
    ce74:	d005      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce76:	280a      	cmp	r0, #10
    ce78:	d003      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce7a:	2803      	cmp	r0, #3
    ce7c:	d001      	beq.n	ce82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x166>
    ce7e:	2802      	cmp	r0, #2
    ce80:	d113      	bne.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce82:	f240 5123 	movw	r1, #1315	; 0x523
    ce86:	e00d      	b.n	cea4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    ce88:	0740      	lsls	r0, r0, #29
    ce8a:	d50e      	bpl.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    ce8c:	4808      	ldr	r0, [pc, #32]	; (ceb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x194>)
    ce8e:	490a      	ldr	r1, [pc, #40]	; (ceb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x19c>)
    ce90:	3008      	adds	r0, #8
    ce92:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    ce96:	4809      	ldr	r0, [pc, #36]	; (cebc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a0>)
    ce98:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    ce9c:	2801      	cmp	r0, #1
    ce9e:	d104      	bne.n	ceaa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18e>
    cea0:	f240 512a 	movw	r1, #1322	; 0x52a
    cea4:	203e      	movs	r0, #62	; 0x3e
    cea6:	f7f7 ff37 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ceaa:	bd10      	pop	{r4, pc}
    ceac:	20001334 	.word	0x20001334
    ceb0:	40001000 	.word	0x40001000
    ceb4:	40001550 	.word	0x40001550
    ceb8:	4001f098 	.word	0x4001f098
    cebc:	40008000 	.word	0x40008000
    cec0:	4808      	ldr	r0, [pc, #32]	; (cee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c8>)
    cec2:	4601      	mov	r1, r0
    cec4:	79c2      	ldrb	r2, [r0, #7]
    cec6:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    ceca:	b112      	cbz	r2, ced2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b6>
    cecc:	2a01      	cmp	r2, #1
    cece:	d003      	beq.n	ced8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    ced0:	e006      	b.n	cee0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c4>
    ced2:	f041 0102 	orr.w	r1, r1, #2
    ced6:	e001      	b.n	cedc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    ced8:	f041 0104 	orr.w	r1, r1, #4
    cedc:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    cee0:	f7ff bfb6 	b.w	ce50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x134>
    cee4:	20001334 	.word	0x20001334
    cee8:	b510      	push	{r4, lr}
    ceea:	f000 fad5 	bl	d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ceee:	2800      	cmp	r0, #0
    cef0:	d108      	bne.n	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cef2:	f000 fac1 	bl	d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cef6:	2800      	cmp	r0, #0
    cef8:	d104      	bne.n	cf04 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    cefa:	4803      	ldr	r0, [pc, #12]	; (cf08 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ec>)
    cefc:	6801      	ldr	r1, [r0, #0]
    cefe:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    cf02:	6001      	str	r1, [r0, #0]
    cf04:	bd10      	pop	{r4, pc}
    cf06:	0000      	.short	0x0000
    cf08:	40001568 	.word	0x40001568
    cf0c:	b538      	push	{r3, r4, r5, lr}
    cf0e:	4d32      	ldr	r5, [pc, #200]	; (cfd8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2bc>)
    cf10:	2400      	movs	r4, #0
    cf12:	7b28      	ldrb	r0, [r5, #12]
    cf14:	b120      	cbz	r0, cf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    cf16:	4831      	ldr	r0, [pc, #196]	; (cfdc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c0>)
    cf18:	f8d0 0144 	ldr.w	r0, [r0, #324]	; 0x144
    cf1c:	2801      	cmp	r0, #1
    cf1e:	d007      	beq.n	cf30 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x214>
    cf20:	2200      	movs	r2, #0
    cf22:	7a69      	ldrb	r1, [r5, #9]
    cf24:	482e      	ldr	r0, [pc, #184]	; (cfe0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>)
    cf26:	2901      	cmp	r1, #1
    cf28:	d004      	beq.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x218>
    cf2a:	2902      	cmp	r1, #2
    cf2c:	d00a      	beq.n	cf44 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x228>
    cf2e:	e019      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf30:	2201      	movs	r2, #1
    cf32:	e7f6      	b.n	cf22 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x206>
    cf34:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    cf38:	2901      	cmp	r1, #1
    cf3a:	d001      	beq.n	cf40 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    cf3c:	2400      	movs	r4, #0
    cf3e:	e011      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf40:	2408      	movs	r4, #8
    cf42:	e00f      	b.n	cf64 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    cf44:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
    cf48:	2901      	cmp	r1, #1
    cf4a:	d006      	beq.n	cf5a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    cf4c:	2100      	movs	r1, #0
    cf4e:	4b25      	ldr	r3, [pc, #148]	; (cfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    cf50:	681b      	ldr	r3, [r3, #0]
    cf52:	2b01      	cmp	r3, #1
    cf54:	d003      	beq.n	cf5e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x242>
    cf56:	2404      	movs	r4, #4
    cf58:	e002      	b.n	cf60 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    cf5a:	2102      	movs	r1, #2
    cf5c:	e7f7      	b.n	cf4e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x232>
    cf5e:	2400      	movs	r4, #0
    cf60:	430c      	orrs	r4, r1
    cf62:	4314      	orrs	r4, r2
    cf64:	f014 0f0b 	tst.w	r4, #11
    cf68:	d105      	bne.n	cf76 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x25a>
    cf6a:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    cf6e:	2901      	cmp	r1, #1
    cf70:	d029      	beq.n	cfc6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2aa>
    cf72:	2100      	movs	r1, #0
    cf74:	430c      	orrs	r4, r1
    cf76:	491c      	ldr	r1, [pc, #112]	; (cfe8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>)
    cf78:	7809      	ldrb	r1, [r1, #0]
    cf7a:	b1d1      	cbz	r1, cfb2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x296>
    cf7c:	491b      	ldr	r1, [pc, #108]	; (cfec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>)
    cf7e:	6809      	ldr	r1, [r1, #0]
    cf80:	f011 0fff 	tst.w	r1, #255	; 0xff
    cf84:	d003      	beq.n	cf8e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x272>
    cf86:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    cf8a:	2a01      	cmp	r2, #1
    cf8c:	d000      	beq.n	cf90 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>
    cf8e:	2200      	movs	r2, #0
    cf90:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
    cf94:	f011 0fff 	tst.w	r1, #255	; 0xff
    cf98:	d003      	beq.n	cfa2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x286>
    cf9a:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
    cf9e:	2801      	cmp	r0, #1
    cfa0:	d000      	beq.n	cfa4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x288>
    cfa2:	2000      	movs	r0, #0
    cfa4:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    cfa8:	480e      	ldr	r0, [pc, #56]	; (cfe4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>)
    cfaa:	3010      	adds	r0, #16
    cfac:	6800      	ldr	r0, [r0, #0]
    cfae:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    cfb2:	f7ff ff35 	bl	ce20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>
    cfb6:	06e0      	lsls	r0, r4, #27
    cfb8:	d509      	bpl.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfba:	0720      	lsls	r0, r4, #28
    cfbc:	d407      	bmi.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfbe:	7a68      	ldrb	r0, [r5, #9]
    cfc0:	2801      	cmp	r0, #1
    cfc2:	d002      	beq.n	cfca <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ae>
    cfc4:	e003      	b.n	cfce <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b2>
    cfc6:	2110      	movs	r1, #16
    cfc8:	e7d4      	b.n	cf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x258>
    cfca:	f044 0420 	orr.w	r4, r4, #32
    cfce:	4808      	ldr	r0, [pc, #32]	; (cff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d4>)
    cfd0:	6800      	ldr	r0, [r0, #0]
    cfd2:	9000      	str	r0, [sp, #0]
    cfd4:	4620      	mov	r0, r4
    cfd6:	bd38      	pop	{r3, r4, r5, pc}
    cfd8:	20001334 	.word	0x20001334
    cfdc:	40008000 	.word	0x40008000
    cfe0:	40001000 	.word	0x40001000
    cfe4:	40001400 	.word	0x40001400
    cfe8:	20000264 	.word	0x20000264
    cfec:	40001640 	.word	0x40001640
    cff0:	40008144 	.word	0x40008144
    cff4:	4808      	ldr	r0, [pc, #32]	; (d018 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    cff6:	b510      	push	{r4, lr}
    cff8:	6800      	ldr	r0, [r0, #0]
    cffa:	f000 000f 	and.w	r0, r0, #15
    cffe:	2803      	cmp	r0, #3
    d000:	d006      	beq.n	d010 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    d002:	2804      	cmp	r0, #4
    d004:	d006      	beq.n	d014 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f8>
    d006:	f240 2112 	movw	r1, #530	; 0x212
    d00a:	203e      	movs	r0, #62	; 0x3e
    d00c:	f7f7 fe84 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d010:	2001      	movs	r0, #1
    d012:	bd10      	pop	{r4, pc}
    d014:	2002      	movs	r0, #2
    d016:	bd10      	pop	{r4, pc}
    d018:	40001510 	.word	0x40001510
    d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d020:	4c19      	ldr	r4, [pc, #100]	; (d088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36c>)
    d022:	460d      	mov	r5, r1
    d024:	7a21      	ldrb	r1, [r4, #8]
    d026:	b129      	cbz	r1, d034 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>
    d028:	f010 0f11 	tst.w	r0, #17
    d02c:	d00b      	beq.n	d046 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x32a>
    d02e:	f7ff fa4b 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d032:	e027      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    d034:	4915      	ldr	r1, [pc, #84]	; (d08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x370>)
    d036:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    d03a:	6008      	str	r0, [r1, #0]
    d03c:	f000 f85e 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    d040:	2000      	movs	r0, #0
    d042:	7320      	strb	r0, [r4, #12]
    d044:	e01e      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    d046:	2901      	cmp	r1, #1
    d048:	d001      	beq.n	d04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x332>
    d04a:	2601      	movs	r6, #1
    d04c:	e000      	b.n	d050 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x334>
    d04e:	2600      	movs	r6, #0
    d050:	79e0      	ldrb	r0, [r4, #7]
    d052:	2801      	cmp	r0, #1
    d054:	d00e      	beq.n	d074 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    d056:	2700      	movs	r7, #0
    d058:	f000 f850 	bl	d0fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    d05c:	2196      	movs	r1, #150	; 0x96
    d05e:	4630      	mov	r0, r6
    d060:	f000 f862 	bl	d128 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40c>
    d064:	4601      	mov	r1, r0
    d066:	b14f      	cbz	r7, d07c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x360>
    d068:	353b      	adds	r5, #59	; 0x3b
    d06a:	428d      	cmp	r5, r1
    d06c:	d904      	bls.n	d078 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    d06e:	2000      	movs	r0, #0
    d070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d074:	2701      	movs	r7, #1
    d076:	e7ef      	b.n	d058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>
    d078:	2001      	movs	r0, #1
    d07a:	71e0      	strb	r0, [r4, #7]
    d07c:	7aa2      	ldrb	r2, [r4, #10]
    d07e:	4630      	mov	r0, r6
    d080:	f7ff fc88 	bl	c994 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    d084:	2001      	movs	r0, #1
    d086:	e7f3      	b.n	d070 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    d088:	20001334 	.word	0x20001334
    d08c:	4001f508 	.word	0x4001f508
    d090:	4805      	ldr	r0, [pc, #20]	; (d0a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    d092:	2100      	movs	r1, #0
    d094:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    d098:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d09c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    d0a0:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d0a4:	4770      	bx	lr
    d0a6:	0000      	.short	0x0000
    d0a8:	40001000 	.word	0x40001000
    d0ac:	4804      	ldr	r0, [pc, #16]	; (d0c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a4>)
    d0ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d0b0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    d0b4:	6281      	str	r1, [r0, #40]	; 0x28
    d0b6:	4903      	ldr	r1, [pc, #12]	; (d0c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>)
    d0b8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d0bc:	6008      	str	r0, [r1, #0]
    d0be:	4770      	bx	lr
    d0c0:	20001334 	.word	0x20001334
    d0c4:	4001f504 	.word	0x4001f504
    d0c8:	4905      	ldr	r1, [pc, #20]	; (d0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d0ca:	2000      	movs	r0, #0
    d0cc:	6008      	str	r0, [r1, #0]
    d0ce:	1f09      	subs	r1, r1, #4
    d0d0:	6008      	str	r0, [r1, #0]
    d0d2:	1f09      	subs	r1, r1, #4
    d0d4:	6008      	str	r0, [r1, #0]
    d0d6:	4902      	ldr	r1, [pc, #8]	; (d0e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d0d8:	1d09      	adds	r1, r1, #4
    d0da:	6008      	str	r0, [r1, #0]
    d0dc:	4770      	bx	lr
    d0de:	0000      	.short	0x0000
    d0e0:	40008548 	.word	0x40008548
    d0e4:	4903      	ldr	r1, [pc, #12]	; (d0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d8>)
    d0e6:	79c9      	ldrb	r1, [r1, #7]
    d0e8:	2900      	cmp	r1, #0
    d0ea:	d102      	bne.n	d0f2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3d6>
    d0ec:	4902      	ldr	r1, [pc, #8]	; (d0f8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    d0ee:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d0f2:	4770      	bx	lr
    d0f4:	20001334 	.word	0x20001334
    d0f8:	4001f098 	.word	0x4001f098
    d0fc:	4802      	ldr	r0, [pc, #8]	; (d108 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    d0fe:	2100      	movs	r1, #0
    d100:	71c1      	strb	r1, [r0, #7]
    d102:	7201      	strb	r1, [r0, #8]
    d104:	7241      	strb	r1, [r0, #9]
    d106:	4770      	bx	lr
    d108:	20001334 	.word	0x20001334
    d10c:	4a05      	ldr	r2, [pc, #20]	; (d124 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>)
    d10e:	79d2      	ldrb	r2, [r2, #7]
    d110:	2a01      	cmp	r2, #1
    d112:	d006      	beq.n	d122 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x406>
    d114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d118:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    d11c:	fbb1 f1f2 	udiv	r1, r1, r2
    d120:	1a40      	subs	r0, r0, r1
    d122:	4770      	bx	lr
    d124:	20001334 	.word	0x20001334
    d128:	b570      	push	{r4, r5, r6, lr}
    d12a:	4c13      	ldr	r4, [pc, #76]	; (d178 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>)
    d12c:	4603      	mov	r3, r0
    d12e:	460d      	mov	r5, r1
    d130:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    d134:	2000      	movs	r0, #0
    d136:	b15a      	cbz	r2, d150 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    d138:	4621      	mov	r1, r4
    d13a:	f891 1020 	ldrb.w	r1, [r1, #32]
    d13e:	b163      	cbz	r3, d15a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x43e>
    d140:	2b01      	cmp	r3, #1
    d142:	d111      	bne.n	d168 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44c>
    d144:	2a01      	cmp	r2, #1
    d146:	4628      	mov	r0, r5
    d148:	d012      	beq.n	d170 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x454>
    d14a:	f003 fbad 	bl	108a8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    d14e:	e009      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d150:	f240 7166 	movw	r1, #1894	; 0x766
    d154:	203e      	movs	r0, #62	; 0x3e
    d156:	f7f7 fddf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d15a:	2a01      	cmp	r2, #1
    d15c:	4628      	mov	r0, r5
    d15e:	d004      	beq.n	d16a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44e>
    d160:	f003 fbb0 	bl	108c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    d164:	69e1      	ldr	r1, [r4, #28]
    d166:	4408      	add	r0, r1
    d168:	bd70      	pop	{r4, r5, r6, pc}
    d16a:	f003 fbc5 	bl	108f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    d16e:	e7f9      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d170:	f003 fbb3 	bl	108da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    d174:	e7f6      	b.n	d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x448>
    d176:	0000      	.short	0x0000
    d178:	20001334 	.word	0x20001334
    d17c:	b510      	push	{r4, lr}
    d17e:	2200      	movs	r2, #0
    d180:	2901      	cmp	r1, #1
    d182:	d008      	beq.n	d196 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47a>
    d184:	2902      	cmp	r1, #2
    d186:	d004      	beq.n	d192 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    d188:	f240 2169 	movw	r1, #617	; 0x269
    d18c:	203e      	movs	r0, #62	; 0x3e
    d18e:	f7f7 fdc3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d192:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d196:	4905      	ldr	r1, [pc, #20]	; (d1ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x490>)
    d198:	430a      	orrs	r2, r1
    d19a:	4905      	ldr	r1, [pc, #20]	; (d1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    d19c:	600a      	str	r2, [r1, #0]
    d19e:	4905      	ldr	r1, [pc, #20]	; (d1b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x498>)
    d1a0:	4308      	orrs	r0, r1
    d1a2:	4903      	ldr	r1, [pc, #12]	; (d1b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>)
    d1a4:	1d09      	adds	r1, r1, #4
    d1a6:	6008      	str	r0, [r1, #0]
    d1a8:	bd10      	pop	{r4, pc}
    d1aa:	0000      	.short	0x0000
    d1ac:	00100108 	.word	0x00100108
    d1b0:	40001514 	.word	0x40001514
    d1b4:	02030000 	.word	0x02030000

0000d1b8 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    d1b8:	4901      	ldr	r1, [pc, #4]	; (d1c0 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    d1ba:	b2c0      	uxtb	r0, r0
    d1bc:	6008      	str	r0, [r1, #0]
    d1be:	4770      	bx	lr
    d1c0:	4000150c 	.word	0x4000150c

0000d1c4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    d1c4:	b510      	push	{r4, lr}
    d1c6:	4907      	ldr	r1, [pc, #28]	; (d1e4 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    d1c8:	2801      	cmp	r0, #1
    d1ca:	d005      	beq.n	d1d8 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    d1cc:	2802      	cmp	r0, #2
    d1ce:	d005      	beq.n	d1dc <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    d1d0:	218b      	movs	r1, #139	; 0x8b
    d1d2:	203f      	movs	r0, #63	; 0x3f
    d1d4:	f7f7 fda0 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1d8:	2003      	movs	r0, #3
    d1da:	e000      	b.n	d1de <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    d1dc:	2004      	movs	r0, #4
    d1de:	6008      	str	r0, [r1, #0]
    d1e0:	bd10      	pop	{r4, pc}
    d1e2:	0000      	.short	0x0000
    d1e4:	40001510 	.word	0x40001510

0000d1e8 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    d1e8:	4770      	bx	lr
    d1ea:	2100      	movs	r1, #0
    d1ec:	7081      	strb	r1, [r0, #2]
    d1ee:	7001      	strb	r1, [r0, #0]
    d1f0:	7041      	strb	r1, [r0, #1]
    d1f2:	4770      	bx	lr

0000d1f4 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d1f4:	b570      	push	{r4, r5, r6, lr}
    d1f6:	f7f4 f917 	bl	1428 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d1fa:	4605      	mov	r5, r0
    d1fc:	2400      	movs	r4, #0
    d1fe:	e006      	b.n	d20e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d200:	4620      	mov	r0, r4
    d202:	f7f4 f917 	bl	1434 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d206:	f7ff fff0 	bl	d1ea <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    d20a:	1c64      	adds	r4, r4, #1
    d20c:	b2e4      	uxtb	r4, r4
    d20e:	42ac      	cmp	r4, r5
    d210:	d3f6      	bcc.n	d200 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d212:	bd70      	pop	{r4, r5, r6, pc}

0000d214 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    d214:	2000      	movs	r0, #0
    d216:	f7f6 beff 	b.w	4018 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000d21a <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    d21a:	b510      	push	{r4, lr}
    d21c:	f7f6 fbe8 	bl	39f0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d224:	f000 b800 	b.w	d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000d228 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d228:	0a41      	lsrs	r1, r0, #9
    d22a:	f643 5209 	movw	r2, #15625	; 0x3d09
    d22e:	4351      	muls	r1, r2
    d230:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d234:	fb10 f002 	smulbb	r0, r0, r2
    d238:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d23c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d240:	4770      	bx	lr

0000d242 <MPSL_IRQ_RADIO_Handler>:
    d242:	f7f5 ba05 	b.w	2650 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    d246:	2800      	cmp	r0, #0
    d248:	db09      	blt.n	d25e <MPSL_IRQ_RADIO_Handler+0x1c>
    d24a:	f000 021f 	and.w	r2, r0, #31
    d24e:	2101      	movs	r1, #1
    d250:	4091      	lsls	r1, r2
    d252:	0940      	lsrs	r0, r0, #5
    d254:	0080      	lsls	r0, r0, #2
    d256:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d25a:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d25e:	4770      	bx	lr
    d260:	2800      	cmp	r0, #0
    d262:	db0d      	blt.n	d280 <MPSL_IRQ_RADIO_Handler+0x3e>
    d264:	f000 021f 	and.w	r2, r0, #31
    d268:	2101      	movs	r1, #1
    d26a:	4091      	lsls	r1, r2
    d26c:	0940      	lsrs	r0, r0, #5
    d26e:	0080      	lsls	r0, r0, #2
    d270:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d274:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d278:	f3bf 8f4f 	dsb	sy
    d27c:	f3bf 8f6f 	isb	sy
    d280:	4770      	bx	lr

0000d282 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d282:	b570      	push	{r4, r5, r6, lr}
    d284:	4602      	mov	r2, r0
    d286:	2000      	movs	r0, #0
    d288:	2900      	cmp	r1, #0
    d28a:	d01d      	beq.n	d2c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d28c:	fba2 0101 	umull	r0, r1, r2, r1
    d290:	0a40      	lsrs	r0, r0, #9
    d292:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d296:	0a49      	lsrs	r1, r1, #9
    d298:	1c40      	adds	r0, r0, #1
    d29a:	f141 0100 	adc.w	r1, r1, #0
    d29e:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d2a2:	1883      	adds	r3, r0, r2
    d2a4:	f141 0100 	adc.w	r1, r1, #0
    d2a8:	1c5b      	adds	r3, r3, #1
    d2aa:	f141 0400 	adc.w	r4, r1, #0
    d2ae:	2100      	movs	r1, #0
    d2b0:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d2b4:	41a1      	sbcs	r1, r4
    d2b6:	d203      	bcs.n	d2c0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d2b8:	2171      	movs	r1, #113	; 0x71
    d2ba:	206d      	movs	r0, #109	; 0x6d
    d2bc:	f7f7 fa50 	bl	4760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d2c0:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d2c4:	fbb0 f0f2 	udiv	r0, r0, r2
    d2c8:	bd70      	pop	{r4, r5, r6, pc}
    d2ca:	5840      	ldr	r0, [r0, r1]
    d2cc:	2800      	cmp	r0, #0
    d2ce:	d000      	beq.n	d2d2 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d2d0:	2001      	movs	r0, #1
    d2d2:	4770      	bx	lr
    d2d4:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d2d8:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d2dc:	f002 0201 	and.w	r2, r2, #1
    d2e0:	03c0      	lsls	r0, r0, #15
    d2e2:	d503      	bpl.n	d2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d2e4:	428a      	cmp	r2, r1
    d2e6:	d101      	bne.n	d2ec <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d2e8:	2001      	movs	r0, #1
    d2ea:	4770      	bx	lr
    d2ec:	2000      	movs	r0, #0
    d2ee:	4770      	bx	lr

0000d2f0 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d2f0:	b510      	push	{r4, lr}
    d2f2:	2101      	movs	r1, #1
    d2f4:	0788      	lsls	r0, r1, #30
    d2f6:	f7f7 f9f1 	bl	46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d2fa:	2800      	cmp	r0, #0
    d2fc:	d000      	beq.n	d300 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d2fe:	2001      	movs	r0, #1
    d300:	bd10      	pop	{r4, pc}

0000d302 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d302:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d306:	2101      	movs	r1, #1
    d308:	6001      	str	r1, [r0, #0]
    d30a:	4770      	bx	lr

0000d30c <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d30c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d310:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d314:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d318:	f002 0203 	and.w	r2, r2, #3
    d31c:	03c9      	lsls	r1, r1, #15
    d31e:	d503      	bpl.n	d328 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d320:	4282      	cmp	r2, r0
    d322:	d101      	bne.n	d328 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d324:	2001      	movs	r0, #1
    d326:	4770      	bx	lr
    d328:	2000      	movs	r0, #0
    d32a:	4770      	bx	lr

0000d32c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d32c:	b510      	push	{r4, lr}
    d32e:	2100      	movs	r1, #0
    d330:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d334:	f7f7 f9d2 	bl	46dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d338:	2800      	cmp	r0, #0
    d33a:	d000      	beq.n	d33e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d33c:	2001      	movs	r0, #1
    d33e:	bd10      	pop	{r4, pc}
    d340:	2800      	cmp	r0, #0
    d342:	db09      	blt.n	d358 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d344:	f000 021f 	and.w	r2, r0, #31
    d348:	2101      	movs	r1, #1
    d34a:	4091      	lsls	r1, r2
    d34c:	0940      	lsrs	r0, r0, #5
    d34e:	0080      	lsls	r0, r0, #2
    d350:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d354:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d358:	4770      	bx	lr
    d35a:	2800      	cmp	r0, #0
    d35c:	db0d      	blt.n	d37a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d35e:	f000 021f 	and.w	r2, r0, #31
    d362:	2101      	movs	r1, #1
    d364:	4091      	lsls	r1, r2
    d366:	0940      	lsrs	r0, r0, #5
    d368:	0080      	lsls	r0, r0, #2
    d36a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d36e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d372:	f3bf 8f4f 	dsb	sy
    d376:	f3bf 8f6f 	isb	sy
    d37a:	4770      	bx	lr
    d37c:	00021000 	.word	0x00021000
    d380:	000000fa 	.word	0x000000fa
    d384:	71a053fe 	.word	0x71a053fe
    d388:	1095eb1b 	.word	0x1095eb1b
    d38c:	c946cf33 	.word	0xc946cf33
    d390:	5ebe9563 	.word	0x5ebe9563
    d394:	736e3829 	.word	0x736e3829
    d398:	2800      	cmp	r0, #0
    d39a:	db09      	blt.n	d3b0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d39c:	f000 021f 	and.w	r2, r0, #31
    d3a0:	2101      	movs	r1, #1
    d3a2:	4091      	lsls	r1, r2
    d3a4:	0940      	lsrs	r0, r0, #5
    d3a6:	0080      	lsls	r0, r0, #2
    d3a8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d3ac:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d3b0:	4770      	bx	lr

0000d3b2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d3b2:	f3ef 8110 	mrs	r1, PRIMASK
    d3b6:	b672      	cpsid	i
    d3b8:	7802      	ldrb	r2, [r0, #0]
    d3ba:	2a01      	cmp	r2, #1
    d3bc:	d001      	beq.n	d3c2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d3be:	2201      	movs	r2, #1
    d3c0:	e000      	b.n	d3c4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d3c2:	2200      	movs	r2, #0
    d3c4:	2301      	movs	r3, #1
    d3c6:	7003      	strb	r3, [r0, #0]
    d3c8:	b901      	cbnz	r1, d3cc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d3ca:	b662      	cpsie	i
    d3cc:	b10a      	cbz	r2, d3d2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d3ce:	2000      	movs	r0, #0
    d3d0:	4770      	bx	lr
    d3d2:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d3d6:	4770      	bx	lr

0000d3d8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d3d8:	2100      	movs	r1, #0
    d3da:	7001      	strb	r1, [r0, #0]
    d3dc:	4608      	mov	r0, r1
    d3de:	4770      	bx	lr

0000d3e0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d3e0:	f3ef 8110 	mrs	r1, PRIMASK
    d3e4:	b672      	cpsid	i
    d3e6:	2200      	movs	r2, #0
    d3e8:	7002      	strb	r2, [r0, #0]
    d3ea:	b901      	cbnz	r1, d3ee <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d3ec:	b662      	cpsie	i
    d3ee:	2000      	movs	r0, #0
    d3f0:	4770      	bx	lr

0000d3f2 <mpsl_low_priority_process>:
    d3f2:	f7f7 baa1 	b.w	4938 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d3f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d3fa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d3fe:	280f      	cmp	r0, #15
    d400:	d001      	beq.n	d406 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d402:	2000      	movs	r0, #0
    d404:	4770      	bx	lr
    d406:	2001      	movs	r0, #1
    d408:	4770      	bx	lr

0000d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d40a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d40e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d412:	280a      	cmp	r0, #10
    d414:	d001      	beq.n	d41a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d416:	2000      	movs	r0, #0
    d418:	4770      	bx	lr
    d41a:	2001      	movs	r0, #1
    d41c:	4770      	bx	lr

0000d41e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d41e:	b500      	push	{lr}
    d420:	f7ff fff3 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d424:	b120      	cbz	r0, d430 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d426:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d42a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d42e:	b108      	cbz	r0, d434 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d430:	2000      	movs	r0, #0
    d432:	bd00      	pop	{pc}
    d434:	2001      	movs	r0, #1
    d436:	bd00      	pop	{pc}

0000d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d438:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d43c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d440:	280e      	cmp	r0, #14
    d442:	d001      	beq.n	d448 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d444:	2000      	movs	r0, #0
    d446:	4770      	bx	lr
    d448:	2001      	movs	r0, #1
    d44a:	4770      	bx	lr

0000d44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d44c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d450:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d454:	2810      	cmp	r0, #16
    d456:	d001      	beq.n	d45c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d458:	2000      	movs	r0, #0
    d45a:	4770      	bx	lr
    d45c:	2001      	movs	r0, #1
    d45e:	4770      	bx	lr

0000d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d460:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d464:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d468:	2806      	cmp	r0, #6
    d46a:	d003      	beq.n	d474 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d46c:	1c40      	adds	r0, r0, #1
    d46e:	d001      	beq.n	d474 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d470:	2000      	movs	r0, #0
    d472:	4770      	bx	lr
    d474:	2001      	movs	r0, #1
    d476:	4770      	bx	lr

0000d478 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d478:	b500      	push	{lr}
    d47a:	f7ff fff1 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d47e:	b148      	cbz	r0, d494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d480:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d484:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d488:	2806      	cmp	r0, #6
    d48a:	d303      	bcc.n	d494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d48c:	1c40      	adds	r0, r0, #1
    d48e:	d001      	beq.n	d494 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d490:	2001      	movs	r0, #1
    d492:	bd00      	pop	{pc}
    d494:	2000      	movs	r0, #0
    d496:	bd00      	pop	{pc}

0000d498 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d498:	b500      	push	{lr}
    d49a:	f7ff ffe1 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d49e:	b138      	cbz	r0, d4b0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d4a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4a4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d4a8:	2806      	cmp	r0, #6
    d4aa:	d303      	bcc.n	d4b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4ac:	1c40      	adds	r0, r0, #1
    d4ae:	d001      	beq.n	d4b4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d4b0:	2000      	movs	r0, #0
    d4b2:	bd00      	pop	{pc}
    d4b4:	2001      	movs	r0, #1
    d4b6:	bd00      	pop	{pc}

0000d4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d4b8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4bc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4c0:	280d      	cmp	r0, #13
    d4c2:	d001      	beq.n	d4c8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d4c4:	2000      	movs	r0, #0
    d4c6:	4770      	bx	lr
    d4c8:	2001      	movs	r0, #1
    d4ca:	4770      	bx	lr

0000d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d4cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d4d0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d4d4:	2808      	cmp	r0, #8
    d4d6:	d001      	beq.n	d4dc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d4d8:	2000      	movs	r0, #0
    d4da:	4770      	bx	lr
    d4dc:	2001      	movs	r0, #1
    d4de:	4770      	bx	lr

0000d4e0 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d4e0:	2a00      	cmp	r2, #0
    d4e2:	bf04      	itt	eq
    d4e4:	2000      	moveq	r0, #0
    d4e6:	4770      	bxeq	lr
    d4e8:	1e52      	subs	r2, r2, #1
    d4ea:	d007      	beq.n	d4fc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d4ec:	7803      	ldrb	r3, [r0, #0]
    d4ee:	f891 c000 	ldrb.w	ip, [r1]
    d4f2:	4563      	cmp	r3, ip
    d4f4:	bf04      	itt	eq
    d4f6:	1c40      	addeq	r0, r0, #1
    d4f8:	1c49      	addeq	r1, r1, #1
    d4fa:	d0f5      	beq.n	d4e8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d4fc:	7800      	ldrb	r0, [r0, #0]
    d4fe:	7809      	ldrb	r1, [r1, #0]
    d500:	1a40      	subs	r0, r0, r1
    d502:	4770      	bx	lr

0000d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d504:	b4f0      	push	{r4, r5, r6, r7}
    d506:	ea80 0c01 	eor.w	ip, r0, r1
    d50a:	4603      	mov	r3, r0
    d50c:	f01c 0f03 	tst.w	ip, #3
    d510:	d13c      	bne.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d512:	f013 0f03 	tst.w	r3, #3
    d516:	d00b      	beq.n	d530 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d518:	2a00      	cmp	r2, #0
    d51a:	bf04      	itt	eq
    d51c:	bcf0      	popeq	{r4, r5, r6, r7}
    d51e:	4770      	bxeq	lr
    d520:	f811 cb01 	ldrb.w	ip, [r1], #1
    d524:	f803 cb01 	strb.w	ip, [r3], #1
    d528:	1e52      	subs	r2, r2, #1
    d52a:	f013 0f03 	tst.w	r3, #3
    d52e:	d1f3      	bne.n	d518 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d530:	2a03      	cmp	r2, #3
    d532:	d94f      	bls.n	d5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d534:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d538:	d24c      	bcs.n	d5d4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d53a:	f1c2 0c00 	rsb	ip, r2, #0
    d53e:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d542:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d546:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d54a:	f1cc 0c00 	rsb	ip, ip, #0
    d54e:	f1bc 0f00 	cmp.w	ip, #0
    d552:	dd1b      	ble.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d554:	1f0d      	subs	r5, r1, #4
    d556:	1f1c      	subs	r4, r3, #4
    d558:	f01c 0f01 	tst.w	ip, #1
    d55c:	d003      	beq.n	d566 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d55e:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d562:	f844 6f04 	str.w	r6, [r4, #4]!
    d566:	ea5f 066c 	movs.w	r6, ip, asr #1
    d56a:	d007      	beq.n	d57c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d56c:	686f      	ldr	r7, [r5, #4]
    d56e:	6067      	str	r7, [r4, #4]
    d570:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d574:	f844 7f08 	str.w	r7, [r4, #8]!
    d578:	1e76      	subs	r6, r6, #1
    d57a:	d1f7      	bne.n	d56c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d57c:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d580:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d584:	f1cc 0c00 	rsb	ip, ip, #0
    d588:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d58c:	2a00      	cmp	r2, #0
    d58e:	bf04      	itt	eq
    d590:	bcf0      	popeq	{r4, r5, r6, r7}
    d592:	4770      	bxeq	lr
    d594:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d598:	d226      	bcs.n	d5e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d59a:	2a00      	cmp	r2, #0
    d59c:	bfdc      	itt	le
    d59e:	bcf0      	pople	{r4, r5, r6, r7}
    d5a0:	4770      	bxle	lr
    d5a2:	1e49      	subs	r1, r1, #1
    d5a4:	1e5b      	subs	r3, r3, #1
    d5a6:	f012 0f01 	tst.w	r2, #1
    d5aa:	d003      	beq.n	d5b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d5ac:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d5b0:	f803 cf01 	strb.w	ip, [r3, #1]!
    d5b4:	1052      	asrs	r2, r2, #1
    d5b6:	bf04      	itt	eq
    d5b8:	bcf0      	popeq	{r4, r5, r6, r7}
    d5ba:	4770      	bxeq	lr
    d5bc:	f891 c001 	ldrb.w	ip, [r1, #1]
    d5c0:	f883 c001 	strb.w	ip, [r3, #1]
    d5c4:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d5c8:	f803 cf02 	strb.w	ip, [r3, #2]!
    d5cc:	1e52      	subs	r2, r2, #1
    d5ce:	d1f5      	bne.n	d5bc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d5d0:	bcf0      	pop	{r4, r5, r6, r7}
    d5d2:	4770      	bx	lr
    d5d4:	2a04      	cmp	r2, #4
    d5d6:	d3d9      	bcc.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d5d8:	f851 cb04 	ldr.w	ip, [r1], #4
    d5dc:	1f12      	subs	r2, r2, #4
    d5de:	f843 cb04 	str.w	ip, [r3], #4
    d5e2:	2a04      	cmp	r2, #4
    d5e4:	d2f8      	bcs.n	d5d8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d5e6:	e7d1      	b.n	d58c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d5e8:	f811 cb01 	ldrb.w	ip, [r1], #1
    d5ec:	f803 cb01 	strb.w	ip, [r3], #1
    d5f0:	1e52      	subs	r2, r2, #1
    d5f2:	d1f9      	bne.n	d5e8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d5f4:	bcf0      	pop	{r4, r5, r6, r7}
    d5f6:	4770      	bx	lr

0000d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d5f8:	b470      	push	{r4, r5, r6}
    d5fa:	4603      	mov	r3, r0
    d5fc:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d600:	f010 0f03 	tst.w	r0, #3
    d604:	d009      	beq.n	d61a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d606:	2a00      	cmp	r2, #0
    d608:	bf04      	itt	eq
    d60a:	bc70      	popeq	{r4, r5, r6}
    d60c:	4770      	bxeq	lr
    d60e:	f803 cb01 	strb.w	ip, [r3], #1
    d612:	1e52      	subs	r2, r2, #1
    d614:	f013 0f03 	tst.w	r3, #3
    d618:	d1f5      	bne.n	d606 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d61a:	b2c9      	uxtb	r1, r1
    d61c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d620:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d624:	2a03      	cmp	r2, #3
    d626:	d939      	bls.n	d69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d628:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d62c:	d236      	bcs.n	d69c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d62e:	4251      	negs	r1, r2
    d630:	17cc      	asrs	r4, r1, #31
    d632:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d636:	1089      	asrs	r1, r1, #2
    d638:	424e      	negs	r6, r1
    d63a:	2e00      	cmp	r6, #0
    d63c:	dd11      	ble.n	d662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d63e:	1f19      	subs	r1, r3, #4
    d640:	f016 0f01 	tst.w	r6, #1
    d644:	bf18      	it	ne
    d646:	f841 5f04 	strne.w	r5, [r1, #4]!
    d64a:	1074      	asrs	r4, r6, #1
    d64c:	d004      	beq.n	d658 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d64e:	604d      	str	r5, [r1, #4]
    d650:	f841 5f08 	str.w	r5, [r1, #8]!
    d654:	1e64      	subs	r4, r4, #1
    d656:	d1fa      	bne.n	d64e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d658:	4271      	negs	r1, r6
    d65a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d65e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d662:	2a00      	cmp	r2, #0
    d664:	bf04      	itt	eq
    d666:	bc70      	popeq	{r4, r5, r6}
    d668:	4770      	bxeq	lr
    d66a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d66e:	d21d      	bcs.n	d6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d670:	2a00      	cmp	r2, #0
    d672:	bfdc      	itt	le
    d674:	bc70      	pople	{r4, r5, r6}
    d676:	4770      	bxle	lr
    d678:	1e59      	subs	r1, r3, #1
    d67a:	f012 0f01 	tst.w	r2, #1
    d67e:	bf18      	it	ne
    d680:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d684:	1052      	asrs	r2, r2, #1
    d686:	bf04      	itt	eq
    d688:	bc70      	popeq	{r4, r5, r6}
    d68a:	4770      	bxeq	lr
    d68c:	f881 c001 	strb.w	ip, [r1, #1]
    d690:	f801 cf02 	strb.w	ip, [r1, #2]!
    d694:	1e52      	subs	r2, r2, #1
    d696:	d1f9      	bne.n	d68c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d698:	bc70      	pop	{r4, r5, r6}
    d69a:	4770      	bx	lr
    d69c:	2a04      	cmp	r2, #4
    d69e:	d3e0      	bcc.n	d662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6a0:	1f12      	subs	r2, r2, #4
    d6a2:	f843 5b04 	str.w	r5, [r3], #4
    d6a6:	2a04      	cmp	r2, #4
    d6a8:	d2fa      	bcs.n	d6a0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d6aa:	e7da      	b.n	d662 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d6ac:	f803 cb01 	strb.w	ip, [r3], #1
    d6b0:	1e52      	subs	r2, r2, #1
    d6b2:	d1fb      	bne.n	d6ac <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d6b4:	bc70      	pop	{r4, r5, r6}
    d6b6:	4770      	bx	lr
    d6b8:	f04f 30ff 	mov.w	r0, #4294967295
    d6bc:	4770      	bx	lr
    d6be:	2000      	movs	r0, #0
    d6c0:	4770      	bx	lr
    d6c2:	2000      	movs	r0, #0
    d6c4:	4770      	bx	lr
    d6c6:	f04f 30ff 	mov.w	r0, #4294967295
    d6ca:	4770      	bx	lr
    d6cc:	4770      	bx	lr
    d6ce:	4770      	bx	lr
    d6d0:	2000      	movs	r0, #0
    d6d2:	4770      	bx	lr
    d6d4:	f04f 30ff 	mov.w	r0, #4294967295
    d6d8:	4770      	bx	lr
    d6da:	f04f 30ff 	mov.w	r0, #4294967295
    d6de:	4770      	bx	lr
    d6e0:	2100      	movs	r1, #0
    d6e2:	7001      	strb	r1, [r0, #0]
    d6e4:	4770      	bx	lr
    d6e6:	f04f 30ff 	mov.w	r0, #4294967295
    d6ea:	4770      	bx	lr
    d6ec:	f04f 30ff 	mov.w	r0, #4294967295
    d6f0:	4770      	bx	lr
    d6f2:	2000      	movs	r0, #0
    d6f4:	4770      	bx	lr
    d6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d6fa:	4606      	mov	r6, r0
    d6fc:	460c      	mov	r4, r1
    d6fe:	7808      	ldrb	r0, [r1, #0]
    d700:	7849      	ldrb	r1, [r1, #1]
    d702:	2700      	movs	r7, #0
    d704:	4408      	add	r0, r1
    d706:	4691      	mov	r9, r2
    d708:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d70c:	463d      	mov	r5, r7
    d70e:	e00e      	b.n	d72e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    d710:	7a23      	ldrb	r3, [r4, #8]
    d712:	2b02      	cmp	r3, #2
    d714:	d200      	bcs.n	d718 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    d716:	2302      	movs	r3, #2
    d718:	79e2      	ldrb	r2, [r4, #7]
    d71a:	2a03      	cmp	r2, #3
    d71c:	d200      	bcs.n	d720 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    d71e:	2203      	movs	r2, #3
    d720:	79a1      	ldrb	r1, [r4, #6]
    d722:	7960      	ldrb	r0, [r4, #5]
    d724:	f000 ffaf 	bl	e686 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d728:	1c6d      	adds	r5, r5, #1
    d72a:	4407      	add	r7, r0
    d72c:	b2ed      	uxtb	r5, r5
    d72e:	4545      	cmp	r5, r8
    d730:	d3ee      	bcc.n	d710 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    d732:	6830      	ldr	r0, [r6, #0]
    d734:	1cc0      	adds	r0, r0, #3
    d736:	f020 0003 	bic.w	r0, r0, #3
    d73a:	6030      	str	r0, [r6, #0]
    d73c:	f1b9 0f00 	cmp.w	r9, #0
    d740:	d000      	beq.n	d744 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    d742:	2000      	movs	r0, #0
    d744:	463a      	mov	r2, r7
    d746:	4641      	mov	r1, r8
    d748:	f7f7 fe9c 	bl	5484 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d74c:	6831      	ldr	r1, [r6, #0]
    d74e:	4408      	add	r0, r1
    d750:	6030      	str	r0, [r6, #0]
    d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d756 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    d756:	2000      	movs	r0, #0
    d758:	4770      	bx	lr

0000d75a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d75a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d75c:	4604      	mov	r4, r0
    d75e:	1d01      	adds	r1, r0, #4
    d760:	4668      	mov	r0, sp
    d762:	f7f9 fc57 	bl	7014 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d766:	2800      	cmp	r0, #0
    d768:	d004      	beq.n	d774 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d76a:	4669      	mov	r1, sp
    d76c:	4620      	mov	r0, r4
    d76e:	f000 f848 	bl	d802 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d772:	2001      	movs	r0, #1
    d774:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d776 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d776:	b50e      	push	{r1, r2, r3, lr}
    d778:	4601      	mov	r1, r0
    d77a:	4668      	mov	r0, sp
    d77c:	f000 f827 	bl	d7ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d780:	4668      	mov	r0, sp
    d782:	f7f9 fc71 	bl	7068 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d786:	bd0e      	pop	{r1, r2, r3, pc}

0000d788 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d788:	b510      	push	{r4, lr}
    d78a:	4604      	mov	r4, r0
    d78c:	4620      	mov	r0, r4
    d78e:	f7f7 fbb9 	bl	4f04 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d792:	2800      	cmp	r0, #0
    d794:	d006      	beq.n	d7a4 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d796:	78a1      	ldrb	r1, [r4, #2]
    d798:	7820      	ldrb	r0, [r4, #0]
    d79a:	f000 f804 	bl	d7a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d79e:	2800      	cmp	r0, #0
    d7a0:	d0f4      	beq.n	d78c <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d7a2:	2001      	movs	r0, #1
    d7a4:	bd10      	pop	{r4, pc}
    d7a6:	b570      	push	{r4, r5, r6, lr}
    d7a8:	460c      	mov	r4, r1
    d7aa:	4605      	mov	r5, r0
    d7ac:	f7f7 fc06 	bl	4fbc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d7b0:	2800      	cmp	r0, #0
    d7b2:	d002      	beq.n	d7ba <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d7b4:	2d3e      	cmp	r5, #62	; 0x3e
    d7b6:	d001      	beq.n	d7bc <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d7b8:	2001      	movs	r0, #1
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	2c12      	cmp	r4, #18
    d7be:	d004      	beq.n	d7ca <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d7c0:	4620      	mov	r0, r4
    d7c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d7c6:	f7f7 bc15 	b.w	4ff4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d7ca:	2000      	movs	r0, #0
    d7cc:	bd70      	pop	{r4, r5, r6, pc}

0000d7ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d7ce:	880a      	ldrh	r2, [r1, #0]
    d7d0:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d7d4:	8002      	strh	r2, [r0, #0]
    d7d6:	884a      	ldrh	r2, [r1, #2]
    d7d8:	8042      	strh	r2, [r0, #2]
    d7da:	784a      	ldrb	r2, [r1, #1]
    d7dc:	0993      	lsrs	r3, r2, #6
    d7de:	2200      	movs	r2, #0
    d7e0:	7142      	strb	r2, [r0, #5]
    d7e2:	784b      	ldrb	r3, [r1, #1]
    d7e4:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d7e8:	b11b      	cbz	r3, d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d7ea:	2b01      	cmp	r3, #1
    d7ec:	d005      	beq.n	d7fa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d7ee:	2b02      	cmp	r3, #2
    d7f0:	d005      	beq.n	d7fe <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d7f2:	7102      	strb	r2, [r0, #4]
    d7f4:	1d09      	adds	r1, r1, #4
    d7f6:	6081      	str	r1, [r0, #8]
    d7f8:	4770      	bx	lr
    d7fa:	2201      	movs	r2, #1
    d7fc:	e7f9      	b.n	d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d7fe:	2202      	movs	r2, #2
    d800:	e7f7      	b.n	d7f2 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d802 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d802:	b510      	push	{r4, lr}
    d804:	460c      	mov	r4, r1
    d806:	7809      	ldrb	r1, [r1, #0]
    d808:	7001      	strb	r1, [r0, #0]
    d80a:	7841      	ldrb	r1, [r0, #1]
    d80c:	f021 010f 	bic.w	r1, r1, #15
    d810:	7041      	strb	r1, [r0, #1]
    d812:	8822      	ldrh	r2, [r4, #0]
    d814:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d818:	4311      	orrs	r1, r2
    d81a:	7041      	strb	r1, [r0, #1]
    d81c:	78a2      	ldrb	r2, [r4, #2]
    d81e:	7082      	strb	r2, [r0, #2]
    d820:	8862      	ldrh	r2, [r4, #2]
    d822:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    d826:	0a12      	lsrs	r2, r2, #8
    d828:	70c2      	strb	r2, [r0, #3]
    d82a:	7041      	strb	r1, [r0, #1]
    d82c:	7922      	ldrb	r2, [r4, #4]
    d82e:	f002 0203 	and.w	r2, r2, #3
    d832:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    d836:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    d83a:	7041      	strb	r1, [r0, #1]
    d83c:	7962      	ldrb	r2, [r4, #5]
    d83e:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    d842:	7041      	strb	r1, [r0, #1]
    d844:	68a1      	ldr	r1, [r4, #8]
    d846:	1d02      	adds	r2, r0, #4
    d848:	4291      	cmp	r1, r2
    d84a:	d006      	beq.n	d85a <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    d84c:	8862      	ldrh	r2, [r4, #2]
    d84e:	2afb      	cmp	r2, #251	; 0xfb
    d850:	d300      	bcc.n	d854 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    d852:	22fb      	movs	r2, #251	; 0xfb
    d854:	1d00      	adds	r0, r0, #4
    d856:	f7ff fe55 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d85a:	78a0      	ldrb	r0, [r4, #2]
    d85c:	1d00      	adds	r0, r0, #4
    d85e:	b2c0      	uxtb	r0, r0
    d860:	bd10      	pop	{r4, pc}

0000d862 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    d862:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d866:	4604      	mov	r4, r0
    d868:	f891 c000 	ldrb.w	ip, [r1]
    d86c:	2000      	movs	r0, #0
    d86e:	270c      	movs	r7, #12
    d870:	223e      	movs	r2, #62	; 0x3e
    d872:	2612      	movs	r6, #18
    d874:	25ff      	movs	r5, #255	; 0xff
    d876:	f04f 0b14 	mov.w	fp, #20
    d87a:	f04f 0e13 	mov.w	lr, #19
    d87e:	f04f 0a05 	mov.w	sl, #5
    d882:	f104 030d 	add.w	r3, r4, #13
    d886:	f04f 0911 	mov.w	r9, #17
    d88a:	f1bc 0f20 	cmp.w	ip, #32
    d88e:	d272      	bcs.n	d976 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    d890:	e8df f00c 	tbb	[pc, ip]
    d894:	29271071 	.word	0x29271071
    d898:	a46dfc2e 	.word	0xa46dfc2e
    d89c:	fbdac0ae 	.word	0xfbdac0ae
    d8a0:	f7f8f9fa 	.word	0xf7f8f9fa
    d8a4:	507171f6 	.word	0x507171f6
    d8a8:	f3f4f572 	.word	0xf3f4f572
    d8ac:	eff0f1f2 	.word	0xeff0f1f2
    d8b0:	ec71edee 	.word	0xec71edee
    d8b4:	7027      	strb	r7, [r4, #0]
    d8b6:	7908      	ldrb	r0, [r1, #4]
    d8b8:	70a0      	strb	r0, [r4, #2]
    d8ba:	7948      	ldrb	r0, [r1, #5]
    d8bc:	70e0      	strb	r0, [r4, #3]
    d8be:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    d8c2:	0a00      	lsrs	r0, r0, #8
    d8c4:	7120      	strb	r0, [r4, #4]
    d8c6:	79c8      	ldrb	r0, [r1, #7]
    d8c8:	7160      	strb	r0, [r4, #5]
    d8ca:	7a08      	ldrb	r0, [r1, #8]
    d8cc:	71a0      	strb	r0, [r4, #6]
    d8ce:	8908      	ldrh	r0, [r1, #8]
    d8d0:	0a00      	lsrs	r0, r0, #8
    d8d2:	71e0      	strb	r0, [r4, #7]
    d8d4:	7a88      	ldrb	r0, [r1, #10]
    d8d6:	7220      	strb	r0, [r4, #8]
    d8d8:	8948      	ldrh	r0, [r1, #10]
    d8da:	0a00      	lsrs	r0, r0, #8
    d8dc:	7260      	strb	r0, [r4, #9]
    d8de:	2008      	movs	r0, #8
    d8e0:	e154      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d8e2:	2010      	movs	r0, #16
    d8e4:	e000      	b.n	d8e8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    d8e6:	201a      	movs	r0, #26
    d8e8:	7020      	strb	r0, [r4, #0]
    d8ea:	7908      	ldrb	r0, [r1, #4]
    d8ec:	70a0      	strb	r0, [r4, #2]
    d8ee:	e154      	b.n	db9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    d8f0:	7022      	strb	r2, [r4, #0]
    d8f2:	2002      	movs	r0, #2
    d8f4:	70a0      	strb	r0, [r4, #2]
    d8f6:	7908      	ldrb	r0, [r1, #4]
    d8f8:	70e0      	strb	r0, [r4, #3]
    d8fa:	7b88      	ldrb	r0, [r1, #14]
    d8fc:	7120      	strb	r0, [r4, #4]
    d8fe:	7948      	ldrb	r0, [r1, #5]
    d900:	7160      	strb	r0, [r4, #5]
    d902:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d906:	f8c4 0006 	str.w	r0, [r4, #6]
    d90a:	8948      	ldrh	r0, [r1, #10]
    d90c:	8160      	strh	r0, [r4, #10]
    d90e:	7b08      	ldrb	r0, [r1, #12]
    d910:	7320      	strb	r0, [r4, #12]
    d912:	7b0e      	ldrb	r6, [r1, #12]
    d914:	1d0d      	adds	r5, r1, #4
    d916:	2e1f      	cmp	r6, #31
    d918:	d300      	bcc.n	d91c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    d91a:	261f      	movs	r6, #31
    d91c:	4618      	mov	r0, r3
    d91e:	4632      	mov	r2, r6
    d920:	f105 010b 	add.w	r1, r5, #11
    d924:	f7ff fdee 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d928:	360d      	adds	r6, #13
    d92a:	7a69      	ldrb	r1, [r5, #9]
    d92c:	55a1      	strb	r1, [r4, r6]
    d92e:	1e76      	subs	r6, r6, #1
    d930:	b2f0      	uxtb	r0, r6
    d932:	e129      	b.n	db88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d934:	7022      	strb	r2, [r4, #0]
    d936:	200b      	movs	r0, #11
    d938:	70a0      	strb	r0, [r4, #2]
    d93a:	7908      	ldrb	r0, [r1, #4]
    d93c:	70e0      	strb	r0, [r4, #3]
    d93e:	7948      	ldrb	r0, [r1, #5]
    d940:	7120      	strb	r0, [r4, #4]
    d942:	7988      	ldrb	r0, [r1, #6]
    d944:	7160      	strb	r0, [r4, #5]
    d946:	f8d1 0007 	ldr.w	r0, [r1, #7]
    d94a:	f8c4 0006 	str.w	r0, [r4, #6]
    d94e:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    d952:	8160      	strh	r0, [r4, #10]
    d954:	7b48      	ldrb	r0, [r1, #13]
    d956:	7320      	strb	r0, [r4, #12]
    d958:	f8d1 000e 	ldr.w	r0, [r1, #14]
    d95c:	f8c4 000d 	str.w	r0, [r4, #13]
    d960:	8a48      	ldrh	r0, [r1, #18]
    d962:	f8a4 0011 	strh.w	r0, [r4, #17]
    d966:	7d08      	ldrb	r0, [r1, #20]
    d968:	74e0      	strb	r0, [r4, #19]
    d96a:	4630      	mov	r0, r6
    d96c:	e10e      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d96e:	4620      	mov	r0, r4
    d970:	f000 f98d 	bl	dc8e <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    d974:	e108      	b.n	db88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    d976:	e10b      	b.n	db90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    d978:	7022      	strb	r2, [r4, #0]
    d97a:	200a      	movs	r0, #10
    d97c:	70a0      	strb	r0, [r4, #2]
    d97e:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    d982:	70e0      	strb	r0, [r4, #3]
    d984:	7888      	ldrb	r0, [r1, #2]
    d986:	7120      	strb	r0, [r4, #4]
    d988:	8848      	ldrh	r0, [r1, #2]
    d98a:	0a00      	lsrs	r0, r0, #8
    d98c:	7160      	strb	r0, [r4, #5]
    d98e:	7908      	ldrb	r0, [r1, #4]
    d990:	71a0      	strb	r0, [r4, #6]
    d992:	7948      	ldrb	r0, [r1, #5]
    d994:	71e0      	strb	r0, [r4, #7]
    d996:	f8d1 0006 	ldr.w	r0, [r1, #6]
    d99a:	60a0      	str	r0, [r4, #8]
    d99c:	8948      	ldrh	r0, [r1, #10]
    d99e:	81a0      	strh	r0, [r4, #12]
    d9a0:	68c8      	ldr	r0, [r1, #12]
    d9a2:	f8c4 000e 	str.w	r0, [r4, #14]
    d9a6:	8a08      	ldrh	r0, [r1, #16]
    d9a8:	8260      	strh	r0, [r4, #18]
    d9aa:	f8d1 0012 	ldr.w	r0, [r1, #18]
    d9ae:	6160      	str	r0, [r4, #20]
    d9b0:	8ac8      	ldrh	r0, [r1, #22]
    d9b2:	8320      	strh	r0, [r4, #24]
    d9b4:	7e08      	ldrb	r0, [r1, #24]
    d9b6:	76a0      	strb	r0, [r4, #26]
    d9b8:	8b08      	ldrh	r0, [r1, #24]
    d9ba:	0a00      	lsrs	r0, r0, #8
    d9bc:	76e0      	strb	r0, [r4, #27]
    d9be:	7e88      	ldrb	r0, [r1, #26]
    d9c0:	7720      	strb	r0, [r4, #28]
    d9c2:	8b48      	ldrh	r0, [r1, #26]
    d9c4:	0a00      	lsrs	r0, r0, #8
    d9c6:	7760      	strb	r0, [r4, #29]
    d9c8:	7f08      	ldrb	r0, [r1, #28]
    d9ca:	77a0      	strb	r0, [r4, #30]
    d9cc:	8b88      	ldrh	r0, [r1, #28]
    d9ce:	0a00      	lsrs	r0, r0, #8
    d9d0:	77e0      	strb	r0, [r4, #31]
    d9d2:	7f88      	ldrb	r0, [r1, #30]
    d9d4:	f884 0020 	strb.w	r0, [r4, #32]
    d9d8:	201f      	movs	r0, #31
    d9da:	e0d7      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    d9dc:	7022      	strb	r2, [r4, #0]
    d9de:	f884 b002 	strb.w	fp, [r4, #2]
    d9e2:	7908      	ldrb	r0, [r1, #4]
    d9e4:	70e0      	strb	r0, [r4, #3]
    d9e6:	8888      	ldrh	r0, [r1, #4]
    d9e8:	0a00      	lsrs	r0, r0, #8
    d9ea:	7120      	strb	r0, [r4, #4]
    d9ec:	7988      	ldrb	r0, [r1, #6]
    d9ee:	e0ed      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    d9f0:	7022      	strb	r2, [r4, #0]
    d9f2:	2004      	movs	r0, #4
    d9f4:	70a0      	strb	r0, [r4, #2]
    d9f6:	7908      	ldrb	r0, [r1, #4]
    d9f8:	70e0      	strb	r0, [r4, #3]
    d9fa:	7988      	ldrb	r0, [r1, #6]
    d9fc:	7120      	strb	r0, [r4, #4]
    d9fe:	88c8      	ldrh	r0, [r1, #6]
    da00:	0a00      	lsrs	r0, r0, #8
    da02:	7160      	strb	r0, [r4, #5]
    da04:	6888      	ldr	r0, [r1, #8]
    da06:	f8c4 0006 	str.w	r0, [r4, #6]
    da0a:	68c8      	ldr	r0, [r1, #12]
    da0c:	f8c4 000a 	str.w	r0, [r4, #10]
    da10:	200c      	movs	r0, #12
    da12:	e0bb      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    da14:	7022      	strb	r2, [r4, #0]
    da16:	2003      	movs	r0, #3
    da18:	70a0      	strb	r0, [r4, #2]
    da1a:	7908      	ldrb	r0, [r1, #4]
    da1c:	70e0      	strb	r0, [r4, #3]
    da1e:	7988      	ldrb	r0, [r1, #6]
    da20:	7120      	strb	r0, [r4, #4]
    da22:	88c8      	ldrh	r0, [r1, #6]
    da24:	0a00      	lsrs	r0, r0, #8
    da26:	7160      	strb	r0, [r4, #5]
    da28:	7a08      	ldrb	r0, [r1, #8]
    da2a:	71a0      	strb	r0, [r4, #6]
    da2c:	8908      	ldrh	r0, [r1, #8]
    da2e:	0a00      	lsrs	r0, r0, #8
    da30:	71e0      	strb	r0, [r4, #7]
    da32:	7a88      	ldrb	r0, [r1, #10]
    da34:	7220      	strb	r0, [r4, #8]
    da36:	8948      	ldrh	r0, [r1, #10]
    da38:	0a00      	lsrs	r0, r0, #8
    da3a:	7260      	strb	r0, [r4, #9]
    da3c:	7b08      	ldrb	r0, [r1, #12]
    da3e:	72a0      	strb	r0, [r4, #10]
    da40:	8988      	ldrh	r0, [r1, #12]
    da42:	0a00      	lsrs	r0, r0, #8
    da44:	72e0      	strb	r0, [r4, #11]
    da46:	e120      	b.n	dc8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    da48:	7022      	strb	r2, [r4, #0]
    da4a:	f884 a002 	strb.w	sl, [r4, #2]
    da4e:	7908      	ldrb	r0, [r1, #4]
    da50:	70e0      	strb	r0, [r4, #3]
    da52:	8888      	ldrh	r0, [r1, #4]
    da54:	0a00      	lsrs	r0, r0, #8
    da56:	7120      	strb	r0, [r4, #4]
    da58:	f8d1 0006 	ldr.w	r0, [r1, #6]
    da5c:	f8c4 0005 	str.w	r0, [r4, #5]
    da60:	f8d1 000a 	ldr.w	r0, [r1, #10]
    da64:	f8c4 0009 	str.w	r0, [r4, #9]
    da68:	89c8      	ldrh	r0, [r1, #14]
    da6a:	e010      	b.n	da8e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    da6c:	e0fa      	b.n	dc64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    da6e:	e0ce      	b.n	dc0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    da70:	e0af      	b.n	dbd2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    da72:	e0da      	b.n	dc2a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    da74:	e0e8      	b.n	dc48 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    da76:	e0a1      	b.n	dbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    da78:	e08c      	b.n	db94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    da7a:	e090      	b.n	db9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    da7c:	e033      	b.n	dae6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    da7e:	e02f      	b.n	dae0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    da80:	e043      	b.n	db0a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    da82:	e03d      	b.n	db00 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    da84:	e021      	b.n	daca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    da86:	e015      	b.n	dab4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    da88:	e008      	b.n	da9c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    da8a:	e004      	b.n	da96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    da8c:	e046      	b.n	db1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    da8e:	f8a4 000d 	strh.w	r0, [r4, #13]
    da92:	200d      	movs	r0, #13
    da94:	e07a      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    da96:	f884 9000 	strb.w	r9, [r4]
    da9a:	e038      	b.n	db0e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    da9c:	f884 a000 	strb.w	sl, [r4]
    daa0:	7908      	ldrb	r0, [r1, #4]
    daa2:	70a0      	strb	r0, [r4, #2]
    daa4:	7948      	ldrb	r0, [r1, #5]
    daa6:	70e0      	strb	r0, [r4, #3]
    daa8:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    daac:	0a00      	lsrs	r0, r0, #8
    daae:	7120      	strb	r0, [r4, #4]
    dab0:	79c8      	ldrb	r0, [r1, #7]
    dab2:	e08b      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    dab4:	2008      	movs	r0, #8
    dab6:	7020      	strb	r0, [r4, #0]
    dab8:	7908      	ldrb	r0, [r1, #4]
    daba:	70a0      	strb	r0, [r4, #2]
    dabc:	7988      	ldrb	r0, [r1, #6]
    dabe:	70e0      	strb	r0, [r4, #3]
    dac0:	88c8      	ldrh	r0, [r1, #6]
    dac2:	0a00      	lsrs	r0, r0, #8
    dac4:	7120      	strb	r0, [r4, #4]
    dac6:	7a08      	ldrb	r0, [r1, #8]
    dac8:	e080      	b.n	dbcc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    daca:	2030      	movs	r0, #48	; 0x30
    dacc:	7020      	strb	r0, [r4, #0]
    dace:	7908      	ldrb	r0, [r1, #4]
    dad0:	70a0      	strb	r0, [r4, #2]
    dad2:	7988      	ldrb	r0, [r1, #6]
    dad4:	70e0      	strb	r0, [r4, #3]
    dad6:	88c8      	ldrh	r0, [r1, #6]
    dad8:	0a00      	lsrs	r0, r0, #8
    dada:	7120      	strb	r0, [r4, #4]
    dadc:	2003      	movs	r0, #3
    dade:	e055      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dae0:	7022      	strb	r2, [r4, #0]
    dae2:	2007      	movs	r0, #7
    dae4:	e077      	b.n	dbd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dae6:	7022      	strb	r2, [r4, #0]
    dae8:	70a7      	strb	r7, [r4, #2]
    daea:	7908      	ldrb	r0, [r1, #4]
    daec:	70e0      	strb	r0, [r4, #3]
    daee:	7988      	ldrb	r0, [r1, #6]
    daf0:	7120      	strb	r0, [r4, #4]
    daf2:	88c8      	ldrh	r0, [r1, #6]
    daf4:	0a00      	lsrs	r0, r0, #8
    daf6:	7160      	strb	r0, [r4, #5]
    daf8:	7a08      	ldrb	r0, [r1, #8]
    dafa:	71a0      	strb	r0, [r4, #6]
    dafc:	7a48      	ldrb	r0, [r1, #9]
    dafe:	e05a      	b.n	dbb6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    db00:	4620      	mov	r0, r4
    db02:	1d09      	adds	r1, r1, #4
    db04:	f7f7 fa2c 	bl	4f60 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    db08:	e03e      	b.n	db88 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    db0a:	2057      	movs	r0, #87	; 0x57
    db0c:	7020      	strb	r0, [r4, #0]
    db0e:	7908      	ldrb	r0, [r1, #4]
    db10:	70a0      	strb	r0, [r4, #2]
    db12:	8888      	ldrh	r0, [r1, #4]
    db14:	0a00      	lsrs	r0, r0, #8
    db16:	70e0      	strb	r0, [r4, #3]
    db18:	2002      	movs	r0, #2
    db1a:	e037      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db1c:	7022      	strb	r2, [r4, #0]
    db1e:	220d      	movs	r2, #13
    db20:	70a2      	strb	r2, [r4, #2]
    db22:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    db26:	70e2      	strb	r2, [r4, #3]
    db28:	894a      	ldrh	r2, [r1, #10]
    db2a:	80a2      	strh	r2, [r4, #4]
    db2c:	784a      	ldrb	r2, [r1, #1]
    db2e:	71a2      	strb	r2, [r4, #6]
    db30:	f8d1 2002 	ldr.w	r2, [r1, #2]
    db34:	f8c4 2007 	str.w	r2, [r4, #7]
    db38:	88ca      	ldrh	r2, [r1, #6]
    db3a:	f8a4 200b 	strh.w	r2, [r4, #11]
    db3e:	7b0a      	ldrb	r2, [r1, #12]
    db40:	4620      	mov	r0, r4
    db42:	7362      	strb	r2, [r4, #13]
    db44:	7b4a      	ldrb	r2, [r1, #13]
    db46:	7382      	strb	r2, [r0, #14]
    db48:	7b8a      	ldrb	r2, [r1, #14]
    db4a:	73c2      	strb	r2, [r0, #15]
    db4c:	7e8a      	ldrb	r2, [r1, #26]
    db4e:	7402      	strb	r2, [r0, #16]
    db50:	7a4a      	ldrb	r2, [r1, #9]
    db52:	7442      	strb	r2, [r0, #17]
    db54:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    db58:	f8ad 2000 	strh.w	r2, [sp]
    db5c:	8242      	strh	r2, [r0, #18]
    db5e:	7cca      	ldrb	r2, [r1, #19]
    db60:	7502      	strb	r2, [r0, #20]
    db62:	694a      	ldr	r2, [r1, #20]
    db64:	f8c0 2015 	str.w	r2, [r0, #21]
    db68:	8b0a      	ldrh	r2, [r1, #24]
    db6a:	f8a0 2019 	strh.w	r2, [r0, #25]
    db6e:	7a0a      	ldrb	r2, [r1, #8]
    db70:	76c2      	strb	r2, [r0, #27]
    db72:	7a0d      	ldrb	r5, [r1, #8]
    db74:	2de5      	cmp	r5, #229	; 0xe5
    db76:	d300      	bcc.n	db7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    db78:	25e5      	movs	r5, #229	; 0xe5
    db7a:	462a      	mov	r2, r5
    db7c:	301c      	adds	r0, #28
    db7e:	311c      	adds	r1, #28
    db80:	f7ff fcc0 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db84:	351a      	adds	r5, #26
    db86:	b2e8      	uxtb	r0, r5
    db88:	2800      	cmp	r0, #0
    db8a:	d001      	beq.n	db90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    db8c:	7060      	strb	r0, [r4, #1]
    db8e:	1c80      	adds	r0, r0, #2
    db90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db94:	7022      	strb	r2, [r4, #0]
    db96:	f884 9002 	strb.w	r9, [r4, #2]
    db9a:	2001      	movs	r0, #1
    db9c:	e7f6      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db9e:	7022      	strb	r2, [r4, #0]
    dba0:	70a6      	strb	r6, [r4, #2]
    dba2:	7908      	ldrb	r0, [r1, #4]
    dba4:	70e0      	strb	r0, [r4, #3]
    dba6:	7948      	ldrb	r0, [r1, #5]
    dba8:	7120      	strb	r0, [r4, #4]
    dbaa:	7988      	ldrb	r0, [r1, #6]
    dbac:	7160      	strb	r0, [r4, #5]
    dbae:	88c8      	ldrh	r0, [r1, #6]
    dbb0:	0a00      	lsrs	r0, r0, #8
    dbb2:	71a0      	strb	r0, [r4, #6]
    dbb4:	7a08      	ldrb	r0, [r1, #8]
    dbb6:	71e0      	strb	r0, [r4, #7]
    dbb8:	2006      	movs	r0, #6
    dbba:	e7e7      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbbc:	7025      	strb	r5, [r4, #0]
    dbbe:	20a1      	movs	r0, #161	; 0xa1
    dbc0:	70a0      	strb	r0, [r4, #2]
    dbc2:	7908      	ldrb	r0, [r1, #4]
    dbc4:	70e0      	strb	r0, [r4, #3]
    dbc6:	7948      	ldrb	r0, [r1, #5]
    dbc8:	7120      	strb	r0, [r4, #4]
    dbca:	2000      	movs	r0, #0
    dbcc:	7160      	strb	r0, [r4, #5]
    dbce:	2004      	movs	r0, #4
    dbd0:	e7dc      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbd2:	7025      	strb	r5, [r4, #0]
    dbd4:	20a2      	movs	r0, #162	; 0xa2
    dbd6:	70a0      	strb	r0, [r4, #2]
    dbd8:	7908      	ldrb	r0, [r1, #4]
    dbda:	70e0      	strb	r0, [r4, #3]
    dbdc:	8888      	ldrh	r0, [r1, #4]
    dbde:	0a00      	lsrs	r0, r0, #8
    dbe0:	7120      	strb	r0, [r4, #4]
    dbe2:	7988      	ldrb	r0, [r1, #6]
    dbe4:	7160      	strb	r0, [r4, #5]
    dbe6:	88c8      	ldrh	r0, [r1, #6]
    dbe8:	0a00      	lsrs	r0, r0, #8
    dbea:	71a0      	strb	r0, [r4, #6]
    dbec:	7a08      	ldrb	r0, [r1, #8]
    dbee:	71e0      	strb	r0, [r4, #7]
    dbf0:	8908      	ldrh	r0, [r1, #8]
    dbf2:	0a00      	lsrs	r0, r0, #8
    dbf4:	7220      	strb	r0, [r4, #8]
    dbf6:	7a88      	ldrb	r0, [r1, #10]
    dbf8:	7260      	strb	r0, [r4, #9]
    dbfa:	8948      	ldrh	r0, [r1, #10]
    dbfc:	0a00      	lsrs	r0, r0, #8
    dbfe:	72a0      	strb	r0, [r4, #10]
    dc00:	7b08      	ldrb	r0, [r1, #12]
    dc02:	72e0      	strb	r0, [r4, #11]
    dc04:	8988      	ldrh	r0, [r1, #12]
    dc06:	0a00      	lsrs	r0, r0, #8
    dc08:	7320      	strb	r0, [r4, #12]
    dc0a:	200b      	movs	r0, #11
    dc0c:	e7be      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc0e:	7025      	strb	r5, [r4, #0]
    dc10:	20a3      	movs	r0, #163	; 0xa3
    dc12:	70a0      	strb	r0, [r4, #2]
    dc14:	7908      	ldrb	r0, [r1, #4]
    dc16:	70e0      	strb	r0, [r4, #3]
    dc18:	8888      	ldrh	r0, [r1, #4]
    dc1a:	0a00      	lsrs	r0, r0, #8
    dc1c:	7120      	strb	r0, [r4, #4]
    dc1e:	7988      	ldrb	r0, [r1, #6]
    dc20:	7160      	strb	r0, [r4, #5]
    dc22:	79c8      	ldrb	r0, [r1, #7]
    dc24:	71a0      	strb	r0, [r4, #6]
    dc26:	2005      	movs	r0, #5
    dc28:	e7b0      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc2a:	7022      	strb	r2, [r4, #0]
    dc2c:	f884 e002 	strb.w	lr, [r4, #2]
    dc30:	7908      	ldrb	r0, [r1, #4]
    dc32:	70e0      	strb	r0, [r4, #3]
    dc34:	7948      	ldrb	r0, [r1, #5]
    dc36:	7120      	strb	r0, [r4, #4]
    dc38:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc3c:	f8c4 0005 	str.w	r0, [r4, #5]
    dc40:	8948      	ldrh	r0, [r1, #10]
    dc42:	f8a4 0009 	strh.w	r0, [r4, #9]
    dc46:	e020      	b.n	dc8a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    dc48:	7025      	strb	r5, [r4, #0]
    dc4a:	20a4      	movs	r0, #164	; 0xa4
    dc4c:	70a0      	strb	r0, [r4, #2]
    dc4e:	7908      	ldrb	r0, [r1, #4]
    dc50:	70e0      	strb	r0, [r4, #3]
    dc52:	8888      	ldrh	r0, [r1, #4]
    dc54:	0a00      	lsrs	r0, r0, #8
    dc56:	7120      	strb	r0, [r4, #4]
    dc58:	7988      	ldrb	r0, [r1, #6]
    dc5a:	7160      	strb	r0, [r4, #5]
    dc5c:	79c8      	ldrb	r0, [r1, #7]
    dc5e:	71a0      	strb	r0, [r4, #6]
    dc60:	2007      	movs	r0, #7
    dc62:	e793      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc64:	7025      	strb	r5, [r4, #0]
    dc66:	2080      	movs	r0, #128	; 0x80
    dc68:	70a0      	strb	r0, [r4, #2]
    dc6a:	888a      	ldrh	r2, [r1, #4]
    dc6c:	f8a4 2003 	strh.w	r2, [r4, #3]
    dc70:	88ca      	ldrh	r2, [r1, #6]
    dc72:	f8a4 2005 	strh.w	r2, [r4, #5]
    dc76:	7a0a      	ldrb	r2, [r1, #8]
    dc78:	71e2      	strb	r2, [r4, #7]
    dc7a:	7a4a      	ldrb	r2, [r1, #9]
    dc7c:	8122      	strh	r2, [r4, #8]
    dc7e:	7a8a      	ldrb	r2, [r1, #10]
    dc80:	72a2      	strb	r2, [r4, #10]
    dc82:	7ac9      	ldrb	r1, [r1, #11]
    dc84:	f001 0101 	and.w	r1, r1, #1
    dc88:	72e1      	strb	r1, [r4, #11]
    dc8a:	200a      	movs	r0, #10
    dc8c:	e77e      	b.n	db8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000dc8e <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    dc8e:	223e      	movs	r2, #62	; 0x3e
    dc90:	7002      	strb	r2, [r0, #0]
    dc92:	2201      	movs	r2, #1
    dc94:	7082      	strb	r2, [r0, #2]
    dc96:	790a      	ldrb	r2, [r1, #4]
    dc98:	70c2      	strb	r2, [r0, #3]
    dc9a:	798a      	ldrb	r2, [r1, #6]
    dc9c:	7102      	strb	r2, [r0, #4]
    dc9e:	88ca      	ldrh	r2, [r1, #6]
    dca0:	0a12      	lsrs	r2, r2, #8
    dca2:	7142      	strb	r2, [r0, #5]
    dca4:	7a0a      	ldrb	r2, [r1, #8]
    dca6:	7182      	strb	r2, [r0, #6]
    dca8:	7a4a      	ldrb	r2, [r1, #9]
    dcaa:	71c2      	strb	r2, [r0, #7]
    dcac:	f8d1 200a 	ldr.w	r2, [r1, #10]
    dcb0:	6082      	str	r2, [r0, #8]
    dcb2:	89ca      	ldrh	r2, [r1, #14]
    dcb4:	8182      	strh	r2, [r0, #12]
    dcb6:	7c0a      	ldrb	r2, [r1, #16]
    dcb8:	7382      	strb	r2, [r0, #14]
    dcba:	8a0a      	ldrh	r2, [r1, #16]
    dcbc:	0a12      	lsrs	r2, r2, #8
    dcbe:	73c2      	strb	r2, [r0, #15]
    dcc0:	7c8a      	ldrb	r2, [r1, #18]
    dcc2:	7402      	strb	r2, [r0, #16]
    dcc4:	8a4a      	ldrh	r2, [r1, #18]
    dcc6:	0a12      	lsrs	r2, r2, #8
    dcc8:	7442      	strb	r2, [r0, #17]
    dcca:	7d0a      	ldrb	r2, [r1, #20]
    dccc:	7482      	strb	r2, [r0, #18]
    dcce:	8a8a      	ldrh	r2, [r1, #20]
    dcd0:	0a12      	lsrs	r2, r2, #8
    dcd2:	74c2      	strb	r2, [r0, #19]
    dcd4:	7d89      	ldrb	r1, [r1, #22]
    dcd6:	7501      	strb	r1, [r0, #20]
    dcd8:	2013      	movs	r0, #19
    dcda:	4770      	bx	lr

0000dcdc <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    dcdc:	223e      	movs	r2, #62	; 0x3e
    dcde:	7002      	strb	r2, [r0, #0]
    dce0:	2201      	movs	r2, #1
    dce2:	7082      	strb	r2, [r0, #2]
    dce4:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dce8:	70c2      	strb	r2, [r0, #3]
    dcea:	788a      	ldrb	r2, [r1, #2]
    dcec:	7102      	strb	r2, [r0, #4]
    dcee:	884a      	ldrh	r2, [r1, #2]
    dcf0:	0a12      	lsrs	r2, r2, #8
    dcf2:	7142      	strb	r2, [r0, #5]
    dcf4:	790a      	ldrb	r2, [r1, #4]
    dcf6:	7182      	strb	r2, [r0, #6]
    dcf8:	794a      	ldrb	r2, [r1, #5]
    dcfa:	71c2      	strb	r2, [r0, #7]
    dcfc:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dd00:	6082      	str	r2, [r0, #8]
    dd02:	894a      	ldrh	r2, [r1, #10]
    dd04:	8182      	strh	r2, [r0, #12]
    dd06:	7e0a      	ldrb	r2, [r1, #24]
    dd08:	7382      	strb	r2, [r0, #14]
    dd0a:	8b0a      	ldrh	r2, [r1, #24]
    dd0c:	0a12      	lsrs	r2, r2, #8
    dd0e:	73c2      	strb	r2, [r0, #15]
    dd10:	7e8a      	ldrb	r2, [r1, #26]
    dd12:	7402      	strb	r2, [r0, #16]
    dd14:	8b4a      	ldrh	r2, [r1, #26]
    dd16:	0a12      	lsrs	r2, r2, #8
    dd18:	7442      	strb	r2, [r0, #17]
    dd1a:	7f0a      	ldrb	r2, [r1, #28]
    dd1c:	7482      	strb	r2, [r0, #18]
    dd1e:	8b8a      	ldrh	r2, [r1, #28]
    dd20:	0a12      	lsrs	r2, r2, #8
    dd22:	74c2      	strb	r2, [r0, #19]
    dd24:	7f89      	ldrb	r1, [r1, #30]
    dd26:	7501      	strb	r1, [r0, #20]
    dd28:	2113      	movs	r1, #19
    dd2a:	7041      	strb	r1, [r0, #1]
    dd2c:	4608      	mov	r0, r1
    dd2e:	4770      	bx	lr

0000dd30 <sdc_hci_data_get>:
    dd30:	b510      	push	{r4, lr}
    dd32:	b120      	cbz	r0, dd3e <sdc_hci_data_get+0xe>
    dd34:	f7ff fd11 	bl	d75a <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    dd38:	b120      	cbz	r0, dd44 <sdc_hci_data_get+0x14>
    dd3a:	2000      	movs	r0, #0
    dd3c:	bd10      	pop	{r4, pc}
    dd3e:	f06f 0015 	mvn.w	r0, #21
    dd42:	bd10      	pop	{r4, pc}
    dd44:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd48:	bd10      	pop	{r4, pc}

0000dd4a <sdc_hci_data_put>:
    dd4a:	b510      	push	{r4, lr}
    dd4c:	f06f 0415 	mvn.w	r4, #21
    dd50:	b120      	cbz	r0, dd5c <sdc_hci_data_put+0x12>
    dd52:	f7ff fd10 	bl	d776 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    dd56:	b108      	cbz	r0, dd5c <sdc_hci_data_put+0x12>
    dd58:	2000      	movs	r0, #0
    dd5a:	bd10      	pop	{r4, pc}
    dd5c:	4620      	mov	r0, r4
    dd5e:	bd10      	pop	{r4, pc}

0000dd60 <sdc_hci_evt_get>:
    dd60:	b510      	push	{r4, lr}
    dd62:	b120      	cbz	r0, dd6e <sdc_hci_evt_get+0xe>
    dd64:	f7ff fd10 	bl	d788 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    dd68:	b120      	cbz	r0, dd74 <sdc_hci_evt_get+0x14>
    dd6a:	2000      	movs	r0, #0
    dd6c:	bd10      	pop	{r4, pc}
    dd6e:	f06f 0015 	mvn.w	r0, #21
    dd72:	bd10      	pop	{r4, pc}
    dd74:	f06f 0022 	mvn.w	r0, #34	; 0x22
    dd78:	bd10      	pop	{r4, pc}

0000dd7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    dd7a:	f002 b8cb 	b.w	ff14 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000dd7e <sdc_hci_cmd_cb_read_transmit_power_level>:
    dd7e:	f002 b90a 	b.w	ff96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000dd82 <sdc_hci_cmd_cb_set_event_mask>:
    dd82:	b510      	push	{r4, lr}
    dd84:	f7f7 f94a 	bl	501c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    dd88:	2000      	movs	r0, #0
    dd8a:	bd10      	pop	{r4, pc}

0000dd8c <sdc_hci_cmd_cb_set_event_mask_page_2>:
    dd8c:	b510      	push	{r4, lr}
    dd8e:	f7f7 f953 	bl	5038 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    dd92:	2000      	movs	r0, #0
    dd94:	bd10      	pop	{r4, pc}

0000dd96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    dd96:	f002 b91a 	b.w	ffce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000dd9a <sdc_hci_cmd_vs_conn_event_extend>:
    dd9a:	b508      	push	{r3, lr}
    dd9c:	7800      	ldrb	r0, [r0, #0]
    dd9e:	f88d 0000 	strb.w	r0, [sp]
    dda2:	4668      	mov	r0, sp
    dda4:	f002 f888 	bl	feb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    dda8:	bd08      	pop	{r3, pc}

0000ddaa <sdc_hci_cmd_vs_conn_update>:
    ddaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ddac:	2100      	movs	r1, #0
    ddae:	9100      	str	r1, [sp, #0]
    ddb0:	9101      	str	r1, [sp, #4]
    ddb2:	9102      	str	r1, [sp, #8]
    ddb4:	9103      	str	r1, [sp, #12]
    ddb6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    ddba:	f641 524c 	movw	r2, #7500	; 0x1d4c
    ddbe:	4291      	cmp	r1, r2
    ddc0:	d304      	bcc.n	ddcc <sdc_hci_cmd_vs_conn_update+0x22>
    ddc2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    ddc6:	fbb1 f1f2 	udiv	r1, r1, r2
    ddca:	e005      	b.n	ddd8 <sdc_hci_cmd_vs_conn_update+0x2e>
    ddcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ddd0:	fbb1 f1f2 	udiv	r1, r1, r2
    ddd4:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    ddd8:	8802      	ldrh	r2, [r0, #0]
    ddda:	b289      	uxth	r1, r1
    dddc:	f8ad 2000 	strh.w	r2, [sp]
    dde0:	f8ad 1002 	strh.w	r1, [sp, #2]
    dde4:	f8ad 1004 	strh.w	r1, [sp, #4]
    dde8:	88c1      	ldrh	r1, [r0, #6]
    ddea:	f8ad 1006 	strh.w	r1, [sp, #6]
    ddee:	8900      	ldrh	r0, [r0, #8]
    ddf0:	f8ad 0008 	strh.w	r0, [sp, #8]
    ddf4:	4668      	mov	r0, sp
    ddf6:	f001 fe3e 	bl	fa76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    ddfa:	b004      	add	sp, #16
    ddfc:	bd10      	pop	{r4, pc}

0000ddfe <sdc_hci_cmd_vs_event_length_set>:
    ddfe:	f7fd be4b 	b.w	ba98 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000de02 <sdc_hci_cmd_vs_llpm_mode_set>:
    de02:	2001      	movs	r0, #1
    de04:	4770      	bx	lr

0000de06 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    de06:	7800      	ldrb	r0, [r0, #0]
    de08:	b100      	cbz	r0, de0c <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    de0a:	2001      	movs	r0, #1
    de0c:	f002 b82c 	b.w	fe68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000de10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    de10:	b570      	push	{r4, r5, r6, lr}
    de12:	4605      	mov	r5, r0
    de14:	2210      	movs	r2, #16
    de16:	2100      	movs	r1, #0
    de18:	f7ff fbee 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de1c:	2210      	movs	r2, #16
    de1e:	2100      	movs	r1, #0
    de20:	f105 0010 	add.w	r0, r5, #16
    de24:	f7ff fbe8 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    de28:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    de2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    de30:	1c40      	adds	r0, r0, #1
    de32:	d10b      	bne.n	de4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de34:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de38:	1c40      	adds	r0, r0, #1
    de3a:	d107      	bne.n	de4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de3c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    de40:	1c40      	adds	r0, r0, #1
    de42:	d103      	bne.n	de4c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    de44:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    de48:	1c40      	adds	r0, r0, #1
    de4a:	d00b      	beq.n	de64 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    de4c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    de50:	6128      	str	r0, [r5, #16]
    de52:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    de56:	6168      	str	r0, [r5, #20]
    de58:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    de5c:	61a8      	str	r0, [r5, #24]
    de5e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    de62:	61e8      	str	r0, [r5, #28]
    de64:	2000      	movs	r0, #0
    de66:	f7f7 fdc9 	bl	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    de6a:	b918      	cbnz	r0, de74 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    de6c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    de70:	07c0      	lsls	r0, r0, #31
    de72:	d118      	bne.n	dea6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de74:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    de78:	1c40      	adds	r0, r0, #1
    de7a:	d10b      	bne.n	de94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de7c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    de80:	1c40      	adds	r0, r0, #1
    de82:	d107      	bne.n	de94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de84:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    de88:	1c40      	adds	r0, r0, #1
    de8a:	d103      	bne.n	de94 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    de8c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    de90:	1c40      	adds	r0, r0, #1
    de92:	d008      	beq.n	dea6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    de94:	f854 0f90 	ldr.w	r0, [r4, #144]!
    de98:	6028      	str	r0, [r5, #0]
    de9a:	6860      	ldr	r0, [r4, #4]
    de9c:	6068      	str	r0, [r5, #4]
    de9e:	68a0      	ldr	r0, [r4, #8]
    dea0:	60a8      	str	r0, [r5, #8]
    dea2:	68e0      	ldr	r0, [r4, #12]
    dea4:	60e8      	str	r0, [r5, #12]
    dea6:	2000      	movs	r0, #0
    dea8:	bd70      	pop	{r4, r5, r6, pc}

0000deaa <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    deaa:	b570      	push	{r4, r5, r6, lr}
    deac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    deb0:	4604      	mov	r4, r0
    deb2:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    deb6:	1c40      	adds	r0, r0, #1
    deb8:	d105      	bne.n	dec6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    deba:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    debe:	43c0      	mvns	r0, r0
    dec0:	0400      	lsls	r0, r0, #16
    dec2:	0c00      	lsrs	r0, r0, #16
    dec4:	d03a      	beq.n	df3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    dec6:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    deca:	07c0      	lsls	r0, r0, #31
    decc:	d036      	beq.n	df3c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x92>
    dece:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    ded2:	f8c4 0001 	str.w	r0, [r4, #1]
    ded6:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    deda:	f8a4 0005 	strh.w	r0, [r4, #5]
    dede:	79a0      	ldrb	r0, [r4, #6]
    dee0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    dee4:	71a0      	strb	r0, [r4, #6]
    dee6:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    deea:	1c40      	adds	r0, r0, #1
    deec:	d00f      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    deee:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    def2:	1c40      	adds	r0, r0, #1
    def4:	d00b      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    def6:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    defa:	1c40      	adds	r0, r0, #1
    defc:	d007      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    defe:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    df02:	1c40      	adds	r0, r0, #1
    df04:	d003      	beq.n	df0e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x64>
    df06:	2000      	movs	r0, #0
    df08:	f7f7 fd78 	bl	59fc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    df0c:	b140      	cbz	r0, df20 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    df0e:	2210      	movs	r2, #16
    df10:	2100      	movs	r1, #0
    df12:	1de0      	adds	r0, r4, #7
    df14:	f7ff fb70 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    df18:	2001      	movs	r0, #1
    df1a:	7020      	strb	r0, [r4, #0]
    df1c:	2000      	movs	r0, #0
    df1e:	bd70      	pop	{r4, r5, r6, pc}
    df20:	f855 0f90 	ldr.w	r0, [r5, #144]!
    df24:	f8c4 0007 	str.w	r0, [r4, #7]
    df28:	6868      	ldr	r0, [r5, #4]
    df2a:	f8c4 000b 	str.w	r0, [r4, #11]
    df2e:	68a8      	ldr	r0, [r5, #8]
    df30:	f8c4 000f 	str.w	r0, [r4, #15]
    df34:	68e8      	ldr	r0, [r5, #12]
    df36:	f8c4 0013 	str.w	r0, [r4, #19]
    df3a:	e7ed      	b.n	df18 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    df3c:	2000      	movs	r0, #0
    df3e:	e7ec      	b.n	df1a <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x70>

0000df40 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    df40:	f001 bfac 	b.w	fe9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000df44 <sdc_hci_cmd_ip_read_bd_addr>:
    df44:	f001 bff7 	b.w	ff36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000df48 <sdc_hci_cmd_ip_read_local_version_information>:
    df48:	f7fd bdf2 	b.w	bb30 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000df4c <sdc_hci_cmd_le_add_device_to_resolving_list>:
    df4c:	f001 bd4a 	b.w	f9e4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000df50 <sdc_hci_cmd_le_add_device_to_white_list>:
    df50:	f001 bd63 	b.w	fa1a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000df54 <sdc_hci_cmd_le_clear_resolving_list>:
    df54:	f001 bd78 	b.w	fa48 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000df58 <sdc_hci_cmd_le_clear_white_list>:
    df58:	f001 bd83 	b.w	fa62 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000df5c <sdc_hci_cmd_le_conn_update>:
    df5c:	f001 bd8b 	b.w	fa76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000df60 <sdc_hci_cmd_le_create_conn>:
    df60:	f7fd bb14 	b.w	b58c <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000df64 <sdc_hci_cmd_le_create_conn_cancel>:
    df64:	f7fd bb6c 	b.w	b640 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000df68 <sdc_hci_cmd_le_enable_encryption>:
    df68:	f001 bf35 	b.w	fdd6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000df6c <sdc_hci_cmd_le_encrypt>:
    df6c:	f001 bdc5 	b.w	fafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000df70 <sdc_hci_cmd_le_rand>:
    df70:	f001 bdcc 	b.w	fb0c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000df74 <sdc_hci_cmd_le_read_buffer_size>:
    df74:	f7fd bb90 	b.w	b698 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000df78 <sdc_hci_cmd_le_read_channel_map>:
    df78:	f7fd bb98 	b.w	b6ac <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000df7c <sdc_hci_cmd_le_read_max_data_length>:
    df7c:	f001 bdcc 	b.w	fb18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000df80 <sdc_hci_cmd_le_read_phy>:
    df80:	f001 bdda 	b.w	fb38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000df84 <sdc_hci_cmd_le_read_remote_features>:
    df84:	f7fd bbbc 	b.w	b700 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000df88 <sdc_hci_cmd_le_read_resolving_list_size>:
    df88:	f001 be01 	b.w	fb8e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000df8c <sdc_hci_cmd_le_read_suggested_default_data_length>:
    df8c:	f7fd bbdc 	b.w	b748 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000df90 <sdc_hci_cmd_le_read_transmit_power>:
    df90:	f001 be01 	b.w	fb96 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000df94 <sdc_hci_cmd_le_read_white_list_size>:
    df94:	f001 be08 	b.w	fba8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000df98 <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    df98:	f001 be0a 	b.w	fbb0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000df9c <sdc_hci_cmd_le_remove_device_from_white_list>:
    df9c:	f001 be21 	b.w	fbe2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000dfa0 <sdc_hci_cmd_le_set_address_resolution_enable>:
    dfa0:	f001 be34 	b.w	fc0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000dfa4 <sdc_hci_cmd_le_set_data_length>:
    dfa4:	f001 be40 	b.w	fc28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000dfa8 <sdc_hci_cmd_le_set_default_phy>:
    dfa8:	f7fd bbde 	b.w	b768 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000dfac <sdc_hci_cmd_le_set_event_mask>:
    dfac:	b510      	push	{r4, lr}
    dfae:	f7f7 f82f 	bl	5010 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    dfb2:	2000      	movs	r0, #0
    dfb4:	bd10      	pop	{r4, pc}

0000dfb6 <sdc_hci_cmd_le_set_host_channel_classification>:
    dfb6:	f001 be5e 	b.w	fc76 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000dfba <sdc_hci_cmd_le_set_phy>:
    dfba:	f001 be7c 	b.w	fcb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000dfbe <sdc_hci_cmd_le_set_privacy_mode>:
    dfbe:	f001 be9a 	b.w	fcf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000dfc2 <sdc_hci_cmd_le_set_random_address>:
    dfc2:	f001 beae 	b.w	fd22 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000dfc6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    dfc6:	f001 beba 	b.w	fd3e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000dfca <sdc_hci_cmd_le_set_scan_enable>:
    dfca:	f001 bec1 	b.w	fd50 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000dfce <sdc_hci_cmd_le_set_scan_params>:
    dfce:	f001 bed5 	b.w	fd7c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000dfd2 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    dfd2:	f001 bf32 	b.w	fe3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000dfd6 <sdc_hci_cmd_lc_disconnect>:
    dfd6:	f001 bcb4 	b.w	f942 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000dfda <sdc_hci_cmd_lc_read_remote_version_information>:
    dfda:	f001 bfb8 	b.w	ff4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    dfde:	b570      	push	{r4, r5, r6, lr}
    dfe0:	880b      	ldrh	r3, [r1, #0]
    dfe2:	7f04      	ldrb	r4, [r0, #28]
    dfe4:	f100 0524 	add.w	r5, r0, #36	; 0x24
    dfe8:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    dfec:	8802      	ldrh	r2, [r0, #0]
    dfee:	4435      	add	r5, r6
    dff0:	1da4      	adds	r4, r4, #6
    dff2:	882d      	ldrh	r5, [r5, #0]
    dff4:	4422      	add	r2, r4
    dff6:	b292      	uxth	r2, r2
    dff8:	4425      	add	r5, r4
    dffa:	1e54      	subs	r4, r2, #1
    dffc:	442c      	add	r4, r5
    dffe:	fb94 f4f2 	sdiv	r4, r4, r2
    e002:	fb02 6204 	mla	r2, r2, r4, r6
    e006:	8840      	ldrh	r0, [r0, #2]
    e008:	b292      	uxth	r2, r2
    e00a:	4290      	cmp	r0, r2
    e00c:	d903      	bls.n	e016 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e00e:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e012:	4310      	orrs	r0, r2
    e014:	e002      	b.n	e01c <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e016:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e01a:	4398      	bics	r0, r3
    e01c:	8008      	strh	r0, [r1, #0]
    e01e:	bd70      	pop	{r4, r5, r6, pc}
    e020:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    e024:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e028:	429a      	cmp	r2, r3
    e02a:	d107      	bne.n	e03c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e02c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e030:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e034:	4288      	cmp	r0, r1
    e036:	d001      	beq.n	e03c <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e038:	2001      	movs	r0, #1
    e03a:	4770      	bx	lr
    e03c:	2000      	movs	r0, #0
    e03e:	4770      	bx	lr

0000e040 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e040:	b570      	push	{r4, r5, r6, lr}
    e042:	7f00      	ldrb	r0, [r0, #28]
    e044:	461c      	mov	r4, r3
    e046:	1d80      	adds	r0, r0, #6
    e048:	4408      	add	r0, r1
    e04a:	4613      	mov	r3, r2
    e04c:	8809      	ldrh	r1, [r1, #0]
    e04e:	9a04      	ldr	r2, [sp, #16]
    e050:	1cc9      	adds	r1, r1, #3
    e052:	b289      	uxth	r1, r1
    e054:	1915      	adds	r5, r2, r4
    e056:	1ec0      	subs	r0, r0, #3
    e058:	428d      	cmp	r5, r1
    e05a:	d805      	bhi.n	e068 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e05c:	1881      	adds	r1, r0, r2
    e05e:	4622      	mov	r2, r4
    e060:	4618      	mov	r0, r3
    e062:	f7ff fa4f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e066:	e000      	b.n	e06a <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e068:	2400      	movs	r4, #0
    e06a:	4620      	mov	r0, r4
    e06c:	bd70      	pop	{r4, r5, r6, pc}

0000e06e <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e06e:	b570      	push	{r4, r5, r6, lr}
    e070:	7f00      	ldrb	r0, [r0, #28]
    e072:	461c      	mov	r4, r3
    e074:	1d80      	adds	r0, r0, #6
    e076:	4408      	add	r0, r1
    e078:	4613      	mov	r3, r2
    e07a:	8809      	ldrh	r1, [r1, #0]
    e07c:	9a04      	ldr	r2, [sp, #16]
    e07e:	1cc9      	adds	r1, r1, #3
    e080:	b289      	uxth	r1, r1
    e082:	1915      	adds	r5, r2, r4
    e084:	1ec0      	subs	r0, r0, #3
    e086:	428d      	cmp	r5, r1
    e088:	d805      	bhi.n	e096 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e08a:	4410      	add	r0, r2
    e08c:	4622      	mov	r2, r4
    e08e:	4619      	mov	r1, r3
    e090:	f7ff fa38 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e094:	e000      	b.n	e098 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e096:	2400      	movs	r4, #0
    e098:	4620      	mov	r0, r4
    e09a:	bd70      	pop	{r4, r5, r6, pc}

0000e09c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e09c:	8881      	ldrh	r1, [r0, #4]
    e09e:	88c0      	ldrh	r0, [r0, #6]
    e0a0:	4288      	cmp	r0, r1
    e0a2:	d101      	bne.n	e0a8 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e0a4:	2001      	movs	r0, #1
    e0a6:	4770      	bx	lr
    e0a8:	2000      	movs	r0, #0
    e0aa:	4770      	bx	lr

0000e0ac <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e0ac:	8881      	ldrh	r1, [r0, #4]
    e0ae:	8900      	ldrh	r0, [r0, #8]
    e0b0:	4288      	cmp	r0, r1
    e0b2:	d101      	bne.n	e0b8 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e0b4:	2001      	movs	r0, #1
    e0b6:	4770      	bx	lr
    e0b8:	2000      	movs	r0, #0
    e0ba:	4770      	bx	lr

0000e0bc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e0bc:	b570      	push	{r4, r5, r6, lr}
    e0be:	4604      	mov	r4, r0
    e0c0:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e0c4:	8880      	ldrh	r0, [r0, #4]
    e0c6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e0ca:	4401      	add	r1, r0
    e0cc:	8a20      	ldrh	r0, [r4, #16]
    e0ce:	2800      	cmp	r0, #0
    e0d0:	d01a      	beq.n	e108 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    e0d2:	89a2      	ldrh	r2, [r4, #12]
    e0d4:	2500      	movs	r5, #0
    e0d6:	4410      	add	r0, r2
    e0d8:	b280      	uxth	r0, r0
    e0da:	81a0      	strh	r0, [r4, #12]
    e0dc:	880a      	ldrh	r2, [r1, #0]
    e0de:	4290      	cmp	r0, r2
    e0e0:	d905      	bls.n	e0ee <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    e0e2:	f240 1163 	movw	r1, #355	; 0x163
    e0e6:	f04f 0014 	mov.w	r0, #20
    e0ea:	f7f6 fe15 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ee:	d109      	bne.n	e104 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    e0f0:	69a0      	ldr	r0, [r4, #24]
    e0f2:	b108      	cbz	r0, e0f8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    e0f4:	7f40      	ldrb	r0, [r0, #29]
    e0f6:	7088      	strb	r0, [r1, #2]
    e0f8:	f104 0104 	add.w	r1, r4, #4
    e0fc:	4620      	mov	r0, r4
    e0fe:	f7ff ff6e 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e102:	81a5      	strh	r5, [r4, #12]
    e104:	8225      	strh	r5, [r4, #16]
    e106:	2001      	movs	r0, #1
    e108:	bd70      	pop	{r4, r5, r6, pc}

0000e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e10c:	4604      	mov	r4, r0
    e10e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e112:	88c0      	ldrh	r0, [r0, #6]
    e114:	460e      	mov	r6, r1
    e116:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e11a:	8a60      	ldrh	r0, [r4, #18]
    e11c:	19d9      	adds	r1, r3, r7
    e11e:	b108      	cbz	r0, e124 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e120:	42b0      	cmp	r0, r6
    e122:	d201      	bcs.n	e128 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e124:	2000      	movs	r0, #0
    e126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e128:	89e0      	ldrh	r0, [r4, #14]
    e12a:	2500      	movs	r5, #0
    e12c:	b140      	cbz	r0, e140 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e12e:	f8b1 c000 	ldrh.w	ip, [r1]
    e132:	4560      	cmp	r0, ip
    e134:	d008      	beq.n	e148 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e136:	f240 214b 	movw	r1, #587	; 0x24b
    e13a:	2014      	movs	r0, #20
    e13c:	f7f6 fdec 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e140:	7f60      	ldrb	r0, [r4, #29]
    e142:	7088      	strb	r0, [r1, #2]
    e144:	800d      	strh	r5, [r1, #0]
    e146:	e00e      	b.n	e166 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e148:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e14c:	4418      	add	r0, r3
    e14e:	f10c 0c06 	add.w	ip, ip, #6
    e152:	44bc      	add	ip, r7
    e154:	4460      	add	r0, ip
    e156:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e15a:	f820 cc03 	strh.w	ip, [r0, #-3]
    e15e:	f894 c020 	ldrb.w	ip, [r4, #32]
    e162:	f800 cc01 	strb.w	ip, [r0, #-1]
    e166:	89e0      	ldrh	r0, [r4, #14]
    e168:	4430      	add	r0, r6
    e16a:	81e0      	strh	r0, [r4, #14]
    e16c:	8808      	ldrh	r0, [r1, #0]
    e16e:	4430      	add	r0, r6
    e170:	8008      	strh	r0, [r1, #0]
    e172:	b19a      	cbz	r2, e19c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e174:	1da1      	adds	r1, r4, #6
    e176:	4620      	mov	r0, r4
    e178:	f7ff ff31 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e17c:	81e5      	strh	r5, [r4, #14]
    e17e:	7f60      	ldrb	r0, [r4, #29]
    e180:	1c40      	adds	r0, r0, #1
    e182:	7760      	strb	r0, [r4, #29]
    e184:	7da0      	ldrb	r0, [r4, #22]
    e186:	f88d 0000 	strb.w	r0, [sp]
    e18a:	9800      	ldr	r0, [sp, #0]
    e18c:	9000      	str	r0, [sp, #0]
    e18e:	f89d 0000 	ldrb.w	r0, [sp]
    e192:	b178      	cbz	r0, e1b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e194:	88e0      	ldrh	r0, [r4, #6]
    e196:	82a0      	strh	r0, [r4, #20]
    e198:	75a5      	strb	r5, [r4, #22]
    e19a:	e00b      	b.n	e1b4 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e19c:	7f20      	ldrb	r0, [r4, #28]
    e19e:	89e1      	ldrh	r1, [r4, #14]
    e1a0:	1d80      	adds	r0, r0, #6
    e1a2:	4438      	add	r0, r7
    e1a4:	4419      	add	r1, r3
    e1a6:	4408      	add	r0, r1
    e1a8:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e1ac:	83e1      	strh	r1, [r4, #30]
    e1ae:	7880      	ldrb	r0, [r0, #2]
    e1b0:	f884 0020 	strb.w	r0, [r4, #32]
    e1b4:	8265      	strh	r5, [r4, #18]
    e1b6:	2001      	movs	r0, #1
    e1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e1ba:	1cc0      	adds	r0, r0, #3
    e1bc:	4770      	bx	lr

0000e1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    e1be:	b510      	push	{r4, lr}
    e1c0:	88c2      	ldrh	r2, [r0, #6]
    e1c2:	8943      	ldrh	r3, [r0, #10]
    e1c4:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    e1c8:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    e1cc:	1a61      	subs	r1, r4, r1
    e1ce:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    e1d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e1d6:	429a      	cmp	r2, r3
    e1d8:	d101      	bne.n	e1de <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    e1da:	8842      	ldrh	r2, [r0, #2]
    e1dc:	4411      	add	r1, r2
    e1de:	7f02      	ldrb	r2, [r0, #28]
    e1e0:	8800      	ldrh	r0, [r0, #0]
    e1e2:	4410      	add	r0, r2
    e1e4:	1d80      	adds	r0, r0, #6
    e1e6:	b280      	uxth	r0, r0
    e1e8:	fb91 f0f0 	sdiv	r0, r1, r0
    e1ec:	b280      	uxth	r0, r0
    e1ee:	bd10      	pop	{r4, pc}

0000e1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e1f0:	b510      	push	{r4, lr}
    e1f2:	4604      	mov	r4, r0
    e1f4:	88c0      	ldrh	r0, [r0, #6]
    e1f6:	88a1      	ldrh	r1, [r4, #4]
    e1f8:	4281      	cmp	r1, r0
    e1fa:	d007      	beq.n	e20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e1fc:	89a0      	ldrh	r0, [r4, #12]
    e1fe:	b928      	cbnz	r0, e20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e200:	8a20      	ldrh	r0, [r4, #16]
    e202:	b918      	cbnz	r0, e20c <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e204:	88a0      	ldrh	r0, [r4, #4]
    e206:	8aa1      	ldrh	r1, [r4, #20]
    e208:	4288      	cmp	r0, r1
    e20a:	d101      	bne.n	e210 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e20c:	2000      	movs	r0, #0
    e20e:	bd10      	pop	{r4, pc}
    e210:	1d21      	adds	r1, r4, #4
    e212:	4620      	mov	r0, r4
    e214:	f7ff fee3 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e218:	2000      	movs	r0, #0
    e21a:	8220      	strh	r0, [r4, #16]
    e21c:	2001      	movs	r0, #1
    e21e:	bd10      	pop	{r4, pc}

0000e220 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e220:	b510      	push	{r4, lr}
    e222:	4604      	mov	r4, r0
    e224:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e228:	88c0      	ldrh	r0, [r0, #6]
    e22a:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e22e:	4402      	add	r2, r0
    e230:	8820      	ldrh	r0, [r4, #0]
    e232:	2845      	cmp	r0, #69	; 0x45
    e234:	d200      	bcs.n	e238 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e236:	2045      	movs	r0, #69	; 0x45
    e238:	4288      	cmp	r0, r1
    e23a:	d204      	bcs.n	e246 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e23c:	f240 1119 	movw	r1, #281	; 0x119
    e240:	2014      	movs	r0, #20
    e242:	f7f6 fd69 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e246:	7de0      	ldrb	r0, [r4, #23]
    e248:	2800      	cmp	r0, #0
    e24a:	d003      	beq.n	e254 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e24c:	8810      	ldrh	r0, [r2, #0]
    e24e:	4288      	cmp	r0, r1
    e250:	d201      	bcs.n	e256 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e252:	2000      	movs	r0, #0
    e254:	bd10      	pop	{r4, pc}
    e256:	8011      	strh	r1, [r2, #0]
    e258:	1da1      	adds	r1, r4, #6
    e25a:	4620      	mov	r0, r4
    e25c:	f7ff febf 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e260:	2000      	movs	r0, #0
    e262:	75e0      	strb	r0, [r4, #23]
    e264:	2001      	movs	r0, #1
    e266:	bd10      	pop	{r4, pc}

0000e268 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    e268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e26c:	8941      	ldrh	r1, [r0, #10]
    e26e:	8886      	ldrh	r6, [r0, #4]
    e270:	4604      	mov	r4, r0
    e272:	2500      	movs	r5, #0
    e274:	f100 070a 	add.w	r7, r0, #10
    e278:	e006      	b.n	e288 <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    e27a:	4639      	mov	r1, r7
    e27c:	4620      	mov	r0, r4
    e27e:	f7ff feae 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e282:	1c6d      	adds	r5, r5, #1
    e284:	8961      	ldrh	r1, [r4, #10]
    e286:	b2ad      	uxth	r5, r5
    e288:	42b1      	cmp	r1, r6
    e28a:	d1f6      	bne.n	e27a <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    e28c:	4628      	mov	r0, r5
    e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e292:	b530      	push	{r4, r5, lr}
    e294:	88c4      	ldrh	r4, [r0, #6]
    e296:	8881      	ldrh	r1, [r0, #4]
    e298:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e29c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e2a0:	4413      	add	r3, r2
    e2a2:	8882      	ldrh	r2, [r0, #4]
    e2a4:	8a85      	ldrh	r5, [r0, #20]
    e2a6:	42aa      	cmp	r2, r5
    e2a8:	d012      	beq.n	e2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2aa:	42a1      	cmp	r1, r4
    e2ac:	d010      	beq.n	e2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2ae:	8981      	ldrh	r1, [r0, #12]
    e2b0:	b971      	cbnz	r1, e2d0 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e2b2:	6982      	ldr	r2, [r0, #24]
    e2b4:	b172      	cbz	r2, e2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2b6:	4610      	mov	r0, r2
    e2b8:	f7ff fef8 	bl	e0ac <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e2bc:	b950      	cbnz	r0, e2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2be:	8910      	ldrh	r0, [r2, #8]
    e2c0:	3224      	adds	r2, #36	; 0x24
    e2c2:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e2c6:	4410      	add	r0, r2
    e2c8:	7899      	ldrb	r1, [r3, #2]
    e2ca:	7880      	ldrb	r0, [r0, #2]
    e2cc:	4288      	cmp	r0, r1
    e2ce:	d101      	bne.n	e2d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e2d0:	2000      	movs	r0, #0
    e2d2:	bd30      	pop	{r4, r5, pc}
    e2d4:	4618      	mov	r0, r3
    e2d6:	bd30      	pop	{r4, r5, pc}

0000e2d8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    e2d8:	8803      	ldrh	r3, [r0, #0]
    e2da:	2b45      	cmp	r3, #69	; 0x45
    e2dc:	d200      	bcs.n	e2e0 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    e2de:	2345      	movs	r3, #69	; 0x45
    e2e0:	8013      	strh	r3, [r2, #0]
    e2e2:	88c2      	ldrh	r2, [r0, #6]
    e2e4:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    e2e8:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e2ec:	441a      	add	r2, r3
    e2ee:	600a      	str	r2, [r1, #0]
    e2f0:	89c0      	ldrh	r0, [r0, #14]
    e2f2:	4770      	bx	lr

0000e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e2f4:	7f00      	ldrb	r0, [r0, #28]
    e2f6:	1d80      	adds	r0, r0, #6
    e2f8:	4408      	add	r0, r1
    e2fa:	1ec0      	subs	r0, r0, #3
    e2fc:	6010      	str	r0, [r2, #0]
    e2fe:	8808      	ldrh	r0, [r1, #0]
    e300:	4770      	bx	lr

0000e302 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e306:	460e      	mov	r6, r1
    e308:	88c1      	ldrh	r1, [r0, #6]
    e30a:	8902      	ldrh	r2, [r0, #8]
    e30c:	4604      	mov	r4, r0
    e30e:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e312:	8800      	ldrh	r0, [r0, #0]
    e314:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    e318:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    e31c:	2845      	cmp	r0, #69	; 0x45
    e31e:	d200      	bcs.n	e322 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e320:	2045      	movs	r0, #69	; 0x45
    e322:	42b0      	cmp	r0, r6
    e324:	d203      	bcs.n	e32e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e326:	21db      	movs	r1, #219	; 0xdb
    e328:	2014      	movs	r0, #20
    e32a:	f7f6 fcf5 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e32e:	4610      	mov	r0, r2
    e330:	f7ff fe76 	bl	e020 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e334:	b110      	cbz	r0, e33c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e336:	2000      	movs	r0, #0
    e338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e33c:	42af      	cmp	r7, r5
    e33e:	d908      	bls.n	e352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e340:	7f21      	ldrb	r1, [r4, #28]
    e342:	1b78      	subs	r0, r7, r5
    e344:	1a40      	subs	r0, r0, r1
    e346:	1f80      	subs	r0, r0, #6
    e348:	4286      	cmp	r6, r0
    e34a:	dd02      	ble.n	e352 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e34c:	2000      	movs	r0, #0
    e34e:	75e0      	strb	r0, [r4, #23]
    e350:	e7f1      	b.n	e336 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e352:	eb08 0005 	add.w	r0, r8, r5
    e356:	2101      	movs	r1, #1
    e358:	8006      	strh	r6, [r0, #0]
    e35a:	75e1      	strb	r1, [r4, #23]
    e35c:	e7ec      	b.n	e338 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e35e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e35e:	b538      	push	{r3, r4, r5, lr}
    e360:	88c4      	ldrh	r4, [r0, #6]
    e362:	8881      	ldrh	r1, [r0, #4]
    e364:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e368:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e36c:	441a      	add	r2, r3
    e36e:	42a1      	cmp	r1, r4
    e370:	d010      	beq.n	e394 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e372:	8983      	ldrh	r3, [r0, #12]
    e374:	8a05      	ldrh	r5, [r0, #16]
    e376:	8812      	ldrh	r2, [r2, #0]
    e378:	442b      	add	r3, r5
    e37a:	4293      	cmp	r3, r2
    e37c:	d308      	bcc.n	e390 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e37e:	f8ad 1000 	strh.w	r1, [sp]
    e382:	4669      	mov	r1, sp
    e384:	f7ff fe2b 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e388:	f8bd 0000 	ldrh.w	r0, [sp]
    e38c:	42a0      	cmp	r0, r4
    e38e:	d001      	beq.n	e394 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e390:	2001      	movs	r0, #1
    e392:	bd38      	pop	{r3, r4, r5, pc}
    e394:	2000      	movs	r0, #0
    e396:	bd38      	pop	{r3, r4, r5, pc}

0000e398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e398:	b570      	push	{r4, r5, r6, lr}
    e39a:	88c6      	ldrh	r6, [r0, #6]
    e39c:	8885      	ldrh	r5, [r0, #4]
    e39e:	4603      	mov	r3, r0
    e3a0:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e3a4:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    e3a8:	4420      	add	r0, r4
    e3aa:	42b5      	cmp	r5, r6
    e3ac:	d102      	bne.n	e3b4 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e3ae:	2000      	movs	r0, #0
    e3b0:	8218      	strh	r0, [r3, #16]
    e3b2:	bd70      	pop	{r4, r5, r6, pc}
    e3b4:	8804      	ldrh	r4, [r0, #0]
    e3b6:	899d      	ldrh	r5, [r3, #12]
    e3b8:	7f1e      	ldrb	r6, [r3, #28]
    e3ba:	1b64      	subs	r4, r4, r5
    e3bc:	4435      	add	r5, r6
    e3be:	4428      	add	r0, r5
    e3c0:	880d      	ldrh	r5, [r1, #0]
    e3c2:	b2a4      	uxth	r4, r4
    e3c4:	1cc0      	adds	r0, r0, #3
    e3c6:	42a5      	cmp	r5, r4
    e3c8:	d900      	bls.n	e3cc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e3ca:	800c      	strh	r4, [r1, #0]
    e3cc:	899c      	ldrh	r4, [r3, #12]
    e3ce:	b124      	cbz	r4, e3da <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e3d0:	2400      	movs	r4, #0
    e3d2:	7014      	strb	r4, [r2, #0]
    e3d4:	8809      	ldrh	r1, [r1, #0]
    e3d6:	8219      	strh	r1, [r3, #16]
    e3d8:	bd70      	pop	{r4, r5, r6, pc}
    e3da:	2401      	movs	r4, #1
    e3dc:	e7f9      	b.n	e3d2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e3de <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e3de:	b508      	push	{r3, lr}
    e3e0:	8a81      	ldrh	r1, [r0, #20]
    e3e2:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e3e6:	3aff      	subs	r2, #255	; 0xff
    e3e8:	d008      	beq.n	e3fc <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e3ea:	7d82      	ldrb	r2, [r0, #22]
    e3ec:	f88d 2000 	strb.w	r2, [sp]
    e3f0:	9a00      	ldr	r2, [sp, #0]
    e3f2:	9200      	str	r2, [sp, #0]
    e3f4:	f89d 2000 	ldrb.w	r2, [sp]
    e3f8:	b952      	cbnz	r2, e410 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e3fa:	e004      	b.n	e406 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e3fc:	f44f 7162 	mov.w	r1, #904	; 0x388
    e400:	2014      	movs	r0, #20
    e402:	f7f6 fc89 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e406:	8880      	ldrh	r0, [r0, #4]
    e408:	4281      	cmp	r1, r0
    e40a:	d101      	bne.n	e410 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e40c:	2000      	movs	r0, #0
    e40e:	bd08      	pop	{r3, pc}
    e410:	2001      	movs	r0, #1
    e412:	bd08      	pop	{r3, pc}

0000e414 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e414:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e418:	8281      	strh	r1, [r0, #20]
    e41a:	2100      	movs	r1, #0
    e41c:	7581      	strb	r1, [r0, #22]
    e41e:	4770      	bx	lr

0000e420 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e420:	b510      	push	{r4, lr}
    e422:	8a81      	ldrh	r1, [r0, #20]
    e424:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e428:	3aff      	subs	r2, #255	; 0xff
    e42a:	d004      	beq.n	e436 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e42c:	f44f 7159 	mov.w	r1, #868	; 0x364
    e430:	2014      	movs	r0, #20
    e432:	f7f6 fc71 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e436:	88c1      	ldrh	r1, [r0, #6]
    e438:	8281      	strh	r1, [r0, #20]
    e43a:	89c1      	ldrh	r1, [r0, #14]
    e43c:	b109      	cbz	r1, e442 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e43e:	2101      	movs	r1, #1
    e440:	e000      	b.n	e444 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e442:	2100      	movs	r1, #0
    e444:	7581      	strb	r1, [r0, #22]
    e446:	bd10      	pop	{r4, pc}

0000e448 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e44c:	461d      	mov	r5, r3
    e44e:	4616      	mov	r6, r2
    e450:	9f06      	ldr	r7, [sp, #24]
    e452:	460b      	mov	r3, r1
    e454:	4604      	mov	r4, r0
    e456:	463a      	mov	r2, r7
    e458:	4629      	mov	r1, r5
    e45a:	4630      	mov	r0, r6
    e45c:	f000 f84f 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e460:	4283      	cmp	r3, r0
    e462:	d201      	bcs.n	e468 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e464:	21a8      	movs	r1, #168	; 0xa8
    e466:	e018      	b.n	e49a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e468:	1ce0      	adds	r0, r4, #3
    e46a:	f020 0103 	bic.w	r1, r0, #3
    e46e:	4620      	mov	r0, r4
    e470:	42a1      	cmp	r1, r4
    e472:	d001      	beq.n	e478 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e474:	21a9      	movs	r1, #169	; 0xa9
    e476:	e010      	b.n	e49a <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e478:	2224      	movs	r2, #36	; 0x24
    e47a:	2100      	movs	r1, #0
    e47c:	f7ff f8bc 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e480:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e484:	82a0      	strh	r0, [r4, #20]
    e486:	19a8      	adds	r0, r5, r6
    e488:	1d80      	adds	r0, r0, #6
    e48a:	4378      	muls	r0, r7
    e48c:	b280      	uxth	r0, r0
    e48e:	7725      	strb	r5, [r4, #28]
    e490:	8060      	strh	r0, [r4, #2]
    e492:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e496:	d903      	bls.n	e4a0 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e498:	21af      	movs	r1, #175	; 0xaf
    e49a:	2014      	movs	r0, #20
    e49c:	f7f6 fc3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e4a0:	8026      	strh	r6, [r4, #0]
    e4a2:	2000      	movs	r0, #0
    e4a4:	7760      	strb	r0, [r4, #29]
    e4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4aa <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e4aa:	6181      	str	r1, [r0, #24]
    e4ac:	6188      	str	r0, [r1, #24]
    e4ae:	4770      	bx	lr

0000e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4b4:	460b      	mov	r3, r1
    e4b6:	4604      	mov	r4, r0
    e4b8:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e4bc:	8905      	ldrh	r5, [r0, #8]
    e4be:	8946      	ldrh	r6, [r0, #10]
    e4c0:	8880      	ldrh	r0, [r0, #4]
    e4c2:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    e4c6:	4439      	add	r1, r7
    e4c8:	460f      	mov	r7, r1
    e4ca:	4285      	cmp	r5, r0
    e4cc:	d102      	bne.n	e4d4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e4ce:	2000      	movs	r0, #0
    e4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4d4:	b10a      	cbz	r2, e4da <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e4d6:	1cc8      	adds	r0, r1, #3
    e4d8:	6010      	str	r0, [r2, #0]
    e4da:	b123      	cbz	r3, e4e6 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e4dc:	7f22      	ldrb	r2, [r4, #28]
    e4de:	1cf9      	adds	r1, r7, #3
    e4e0:	4618      	mov	r0, r3
    e4e2:	f7ff f80f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e4e6:	883f      	ldrh	r7, [r7, #0]
    e4e8:	f104 0108 	add.w	r1, r4, #8
    e4ec:	4620      	mov	r0, r4
    e4ee:	f7ff fd76 	bl	dfde <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e4f2:	42b5      	cmp	r5, r6
    e4f4:	d101      	bne.n	e4fa <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e4f6:	8920      	ldrh	r0, [r4, #8]
    e4f8:	8160      	strh	r0, [r4, #10]
    e4fa:	4638      	mov	r0, r7
    e4fc:	e7e8      	b.n	e4d0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e4fe:	4401      	add	r1, r0
    e500:	1d89      	adds	r1, r1, #6
    e502:	4351      	muls	r1, r2
    e504:	b28a      	uxth	r2, r1
    e506:	2100      	movs	r1, #0
    e508:	2845      	cmp	r0, #69	; 0x45
    e50a:	d201      	bcs.n	e510 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    e50c:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    e510:	3224      	adds	r2, #36	; 0x24
    e512:	1850      	adds	r0, r2, r1
    e514:	b280      	uxth	r0, r0
    e516:	4770      	bx	lr

0000e518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e51c:	4688      	mov	r8, r1
    e51e:	88c1      	ldrh	r1, [r0, #6]
    e520:	4604      	mov	r4, r0
    e522:	8900      	ldrh	r0, [r0, #8]
    e524:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    e528:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e52c:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e530:	eb05 0906 	add.w	r9, r5, r6
    e534:	f7ff fd74 	bl	e020 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e538:	2200      	movs	r2, #0
    e53a:	b998      	cbnz	r0, e564 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e53c:	8820      	ldrh	r0, [r4, #0]
    e53e:	2845      	cmp	r0, #69	; 0x45
    e540:	d200      	bcs.n	e544 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e542:	2045      	movs	r0, #69	; 0x45
    e544:	42b7      	cmp	r7, r6
    e546:	d906      	bls.n	e556 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e548:	7f23      	ldrb	r3, [r4, #28]
    e54a:	1bb9      	subs	r1, r7, r6
    e54c:	1ac9      	subs	r1, r1, r3
    e54e:	1f89      	subs	r1, r1, #6
    e550:	4281      	cmp	r1, r0
    e552:	da00      	bge.n	e556 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e554:	4608      	mov	r0, r1
    e556:	89e1      	ldrh	r1, [r4, #14]
    e558:	b111      	cbz	r1, e560 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e55a:	f8b9 3000 	ldrh.w	r3, [r9]
    e55e:	1ac0      	subs	r0, r0, r3
    e560:	4540      	cmp	r0, r8
    e562:	da03      	bge.n	e56c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e564:	8262      	strh	r2, [r4, #18]
    e566:	2000      	movs	r0, #0
    e568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e56c:	7f20      	ldrb	r0, [r4, #28]
    e56e:	4429      	add	r1, r5
    e570:	1d80      	adds	r0, r0, #6
    e572:	4430      	add	r0, r6
    e574:	4408      	add	r0, r1
    e576:	f8a4 8012 	strh.w	r8, [r4, #18]
    e57a:	1ec0      	subs	r0, r0, #3
    e57c:	e7f4      	b.n	e568 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e57e <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e57e:	2100      	movs	r1, #0
    e580:	81c1      	strh	r1, [r0, #14]
    e582:	8241      	strh	r1, [r0, #18]
    e584:	7581      	strb	r1, [r0, #22]
    e586:	4770      	bx	lr

0000e588 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e588:	b570      	push	{r4, r5, r6, lr}
    e58a:	2300      	movs	r3, #0
    e58c:	2908      	cmp	r1, #8
    e58e:	d204      	bcs.n	e59a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    e590:	f240 11cb 	movw	r1, #459	; 0x1cb
    e594:	2015      	movs	r0, #21
    e596:	f7f6 fbbf 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e59a:	6802      	ldr	r2, [r0, #0]
    e59c:	b90a      	cbnz	r2, e5a2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e59e:	e01e      	b.n	e5de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e5a0:	4610      	mov	r0, r2
    e5a2:	6802      	ldr	r2, [r0, #0]
    e5a4:	8893      	ldrh	r3, [r2, #4]
    e5a6:	428b      	cmp	r3, r1
    e5a8:	d002      	beq.n	e5b0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    e5aa:	6813      	ldr	r3, [r2, #0]
    e5ac:	2b00      	cmp	r3, #0
    e5ae:	d1f7      	bne.n	e5a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    e5b0:	8894      	ldrh	r4, [r2, #4]
    e5b2:	4613      	mov	r3, r2
    e5b4:	428c      	cmp	r4, r1
    e5b6:	d101      	bne.n	e5bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    e5b8:	6811      	ldr	r1, [r2, #0]
    e5ba:	e00d      	b.n	e5d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    e5bc:	f101 0508 	add.w	r5, r1, #8
    e5c0:	b2ae      	uxth	r6, r5
    e5c2:	2500      	movs	r5, #0
    e5c4:	42b4      	cmp	r4, r6
    e5c6:	d309      	bcc.n	e5dc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    e5c8:	1a64      	subs	r4, r4, r1
    e5ca:	4411      	add	r1, r2
    e5cc:	600d      	str	r5, [r1, #0]
    e5ce:	808c      	strh	r4, [r1, #4]
    e5d0:	6802      	ldr	r2, [r0, #0]
    e5d2:	6812      	ldr	r2, [r2, #0]
    e5d4:	6002      	str	r2, [r0, #0]
    e5d6:	600a      	str	r2, [r1, #0]
    e5d8:	6001      	str	r1, [r0, #0]
    e5da:	e000      	b.n	e5de <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e5dc:	2300      	movs	r3, #0
    e5de:	4618      	mov	r0, r3
    e5e0:	bd70      	pop	{r4, r5, r6, pc}

0000e5e2 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e5e2:	b510      	push	{r4, lr}
    e5e4:	000c      	movs	r4, r1
    e5e6:	d006      	beq.n	e5f6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    e5e8:	2c08      	cmp	r4, #8
    e5ea:	d209      	bcs.n	e600 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    e5ec:	f240 1195 	movw	r1, #405	; 0x195
    e5f0:	2015      	movs	r0, #21
    e5f2:	f7f6 fb91 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5f6:	b108      	cbz	r0, e5fc <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e5f8:	2100      	movs	r1, #0
    e5fa:	6001      	str	r1, [r0, #0]
    e5fc:	2000      	movs	r0, #0
    e5fe:	bd10      	pop	{r4, pc}
    e600:	b118      	cbz	r0, e60a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    e602:	b2a1      	uxth	r1, r4
    e604:	6800      	ldr	r0, [r0, #0]
    e606:	f000 f814 	bl	e632 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e60a:	1d20      	adds	r0, r4, #4
    e60c:	bd10      	pop	{r4, pc}

0000e60e <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e60e:	2100      	movs	r1, #0
    e610:	6802      	ldr	r2, [r0, #0]
    e612:	e003      	b.n	e61c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e614:	8893      	ldrh	r3, [r2, #4]
    e616:	6812      	ldr	r2, [r2, #0]
    e618:	4419      	add	r1, r3
    e61a:	b289      	uxth	r1, r1
    e61c:	2a00      	cmp	r2, #0
    e61e:	d1f9      	bne.n	e614 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e620:	f000 b807 	b.w	e632 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e624 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e624:	2300      	movs	r3, #0
    e626:	600b      	str	r3, [r1, #0]
    e628:	808a      	strh	r2, [r1, #4]
    e62a:	6802      	ldr	r2, [r0, #0]
    e62c:	600a      	str	r2, [r1, #0]
    e62e:	6001      	str	r1, [r0, #0]
    e630:	4770      	bx	lr
    e632:	2300      	movs	r3, #0
    e634:	6043      	str	r3, [r0, #4]
    e636:	1d02      	adds	r2, r0, #4
    e638:	8101      	strh	r1, [r0, #8]
    e63a:	6002      	str	r2, [r0, #0]
    e63c:	4770      	bx	lr

0000e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e63e:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e642:	3aff      	subs	r2, #255	; 0xff
    e644:	d000      	beq.n	e648 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    e646:	b109      	cbz	r1, e64c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    e648:	2000      	movs	r0, #0
    e64a:	4770      	bx	lr
    e64c:	f7f6 be44 	b.w	52d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e650:	b570      	push	{r4, r5, r6, lr}
    e652:	4605      	mov	r5, r0
    e654:	460c      	mov	r4, r1
    e656:	4608      	mov	r0, r1
    e658:	f000 f84f 	bl	e6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e65c:	b108      	cbz	r0, e662 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e65e:	2010      	movs	r0, #16
    e660:	bd70      	pop	{r4, r5, r6, pc}
    e662:	b10d      	cbz	r5, e668 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    e664:	2007      	movs	r0, #7
    e666:	bd70      	pop	{r4, r5, r6, pc}
    e668:	7025      	strb	r5, [r4, #0]
    e66a:	2000      	movs	r0, #0
    e66c:	8060      	strh	r0, [r4, #2]
    e66e:	bd70      	pop	{r4, r5, r6, pc}
    e670:	b510      	push	{r4, lr}
    e672:	4604      	mov	r4, r0
    e674:	f7f6 fe7c 	bl	5370 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    e678:	42a0      	cmp	r0, r4
    e67a:	d901      	bls.n	e680 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    e67c:	2001      	movs	r0, #1
    e67e:	bd10      	pop	{r4, pc}
    e680:	2000      	movs	r0, #0
    e682:	bd10      	pop	{r4, pc}
    e684:	4770      	bx	lr

0000e686 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e686:	b570      	push	{r4, r5, r6, lr}
    e688:	460e      	mov	r6, r1
    e68a:	461d      	mov	r5, r3
    e68c:	4611      	mov	r1, r2
    e68e:	f000 f811 	bl	e6b4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e692:	4604      	mov	r4, r0
    e694:	4629      	mov	r1, r5
    e696:	4630      	mov	r0, r6
    e698:	f000 f803 	bl	e6a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e69c:	4420      	add	r0, r4
    e69e:	1d00      	adds	r0, r0, #4
    e6a0:	bd70      	pop	{r4, r5, r6, pc}
    e6a2:	b510      	push	{r4, lr}
    e6a4:	460a      	mov	r2, r1
    e6a6:	2101      	movs	r1, #1
    e6a8:	f7ff ff29 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6ac:	1cc0      	adds	r0, r0, #3
    e6ae:	f020 0003 	bic.w	r0, r0, #3
    e6b2:	bd10      	pop	{r4, pc}
    e6b4:	b510      	push	{r4, lr}
    e6b6:	460a      	mov	r2, r1
    e6b8:	2101      	movs	r1, #1
    e6ba:	f7ff ff20 	bl	e4fe <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e6be:	1cc0      	adds	r0, r0, #3
    e6c0:	f020 0003 	bic.w	r0, r0, #3
    e6c4:	bd10      	pop	{r4, pc}
    e6c6:	2800      	cmp	r0, #0
    e6c8:	db09      	blt.n	e6de <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    e6ca:	f000 021f 	and.w	r2, r0, #31
    e6ce:	2101      	movs	r1, #1
    e6d0:	4091      	lsls	r1, r2
    e6d2:	0940      	lsrs	r0, r0, #5
    e6d4:	0080      	lsls	r0, r0, #2
    e6d6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e6da:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e6de:	4770      	bx	lr

0000e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e6e0:	f7f7 b80c 	b.w	56fc <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000e6e4 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    e6e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e6e8:	2000      	movs	r0, #0
    e6ea:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    e6ee:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e6f2:	2001      	movs	r0, #1
    e6f4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    e6f8:	4770      	bx	lr

0000e6fa <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e6fa:	b108      	cbz	r0, e700 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e6fc:	2000      	movs	r0, #0
    e6fe:	4770      	bx	lr
    e700:	2001      	movs	r0, #1
    e702:	4770      	bx	lr

0000e704 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e704:	f7f7 b940 	b.w	5988 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e708 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e708:	f7f7 b92e 	b.w	5968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e70c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e70c:	b510      	push	{r4, lr}
    e70e:	2900      	cmp	r1, #0
    e710:	4604      	mov	r4, r0
    e712:	f04f 0106 	mov.w	r1, #6
    e716:	d002      	beq.n	e71e <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e718:	f7f6 fb8c 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e71c:	e001      	b.n	e722 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e71e:	f7f6 fba5 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e722:	7960      	ldrb	r0, [r4, #5]
    e724:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e728:	7160      	strb	r0, [r4, #5]
    e72a:	bd10      	pop	{r4, pc}

0000e72c <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e72c:	4770      	bx	lr

0000e72e <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e72e:	b530      	push	{r4, r5, lr}
    e730:	460c      	mov	r4, r1
    e732:	4605      	mov	r5, r0
    e734:	b08d      	sub	sp, #52	; 0x34
    e736:	f04f 0103 	mov.w	r1, #3
    e73a:	f104 0003 	add.w	r0, r4, #3
    e73e:	b112      	cbz	r2, e746 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e740:	f7f6 fb78 	bl	4e34 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e744:	e001      	b.n	e74a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e746:	f7f6 fb91 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e74a:	7960      	ldrb	r0, [r4, #5]
    e74c:	220d      	movs	r2, #13
    e74e:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e752:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e756:	7160      	strb	r0, [r4, #5]
    e758:	2100      	movs	r1, #0
    e75a:	a804      	add	r0, sp, #16
    e75c:	f7fe ff4c 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e760:	78e0      	ldrb	r0, [r4, #3]
    e762:	f88d 001f 	strb.w	r0, [sp, #31]
    e766:	7920      	ldrb	r0, [r4, #4]
    e768:	f88d 001e 	strb.w	r0, [sp, #30]
    e76c:	7960      	ldrb	r0, [r4, #5]
    e76e:	f88d 001d 	strb.w	r0, [sp, #29]
    e772:	2210      	movs	r2, #16
    e774:	4629      	mov	r1, r5
    e776:	4668      	mov	r0, sp
    e778:	f7fe fec4 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e77c:	4668      	mov	r0, sp
    e77e:	f7ff ffaf 	bl	e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e782:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e786:	7020      	strb	r0, [r4, #0]
    e788:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e78c:	7060      	strb	r0, [r4, #1]
    e78e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e792:	70a0      	strb	r0, [r4, #2]
    e794:	b00d      	add	sp, #52	; 0x34
    e796:	bd30      	pop	{r4, r5, pc}

0000e798 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e798:	b530      	push	{r4, r5, lr}
    e79a:	b08d      	sub	sp, #52	; 0x34
    e79c:	460c      	mov	r4, r1
    e79e:	4605      	mov	r5, r0
    e7a0:	220d      	movs	r2, #13
    e7a2:	2100      	movs	r1, #0
    e7a4:	a804      	add	r0, sp, #16
    e7a6:	f7fe ff27 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e7aa:	78e0      	ldrb	r0, [r4, #3]
    e7ac:	f88d 001f 	strb.w	r0, [sp, #31]
    e7b0:	7920      	ldrb	r0, [r4, #4]
    e7b2:	f88d 001e 	strb.w	r0, [sp, #30]
    e7b6:	7960      	ldrb	r0, [r4, #5]
    e7b8:	f88d 001d 	strb.w	r0, [sp, #29]
    e7bc:	2210      	movs	r2, #16
    e7be:	4629      	mov	r1, r5
    e7c0:	4668      	mov	r0, sp
    e7c2:	f7fe fe9f 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e7c6:	4668      	mov	r0, sp
    e7c8:	f7ff ff8a 	bl	e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e7cc:	7820      	ldrb	r0, [r4, #0]
    e7ce:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e7d2:	4288      	cmp	r0, r1
    e7d4:	d10c      	bne.n	e7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7d6:	7860      	ldrb	r0, [r4, #1]
    e7d8:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e7dc:	4288      	cmp	r0, r1
    e7de:	d107      	bne.n	e7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7e0:	78a0      	ldrb	r0, [r4, #2]
    e7e2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e7e6:	4288      	cmp	r0, r1
    e7e8:	d102      	bne.n	e7f0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e7ea:	2001      	movs	r0, #1
    e7ec:	b00d      	add	sp, #52	; 0x34
    e7ee:	bd30      	pop	{r4, r5, pc}
    e7f0:	2000      	movs	r0, #0
    e7f2:	e7fb      	b.n	e7ec <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000e7f4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e7f4:	f7f7 bc96 	b.w	6124 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    e7f8:	b510      	push	{r4, lr}
    e7fa:	2801      	cmp	r0, #1
    e7fc:	d008      	beq.n	e810 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    e7fe:	2802      	cmp	r0, #2
    e800:	d004      	beq.n	e80c <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    e802:	f240 319a 	movw	r1, #922	; 0x39a
    e806:	2006      	movs	r0, #6
    e808:	f7f6 fa86 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e80c:	2001      	movs	r0, #1
    e80e:	bd10      	pop	{r4, pc}
    e810:	2000      	movs	r0, #0
    e812:	bd10      	pop	{r4, pc}
    e814:	2900      	cmp	r1, #0
    e816:	d004      	beq.n	e822 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    e818:	2801      	cmp	r0, #1
    e81a:	d003      	beq.n	e824 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e81c:	2901      	cmp	r1, #1
    e81e:	d001      	beq.n	e824 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    e820:	2002      	movs	r0, #2
    e822:	4770      	bx	lr
    e824:	2001      	movs	r0, #1
    e826:	4770      	bx	lr
    e828:	f7ff bdb6 	b.w	e398 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000e82c <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    e82c:	2101      	movs	r1, #1
    e82e:	f7f8 b88d 	b.w	694c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000e832 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    e832:	b510      	push	{r4, lr}
    e834:	f001 ff4c 	bl	106d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    e838:	b118      	cbz	r0, e842 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    e83a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e83e:	f7fd bc45 	b.w	c0cc <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    e842:	20ff      	movs	r0, #255	; 0xff
    e844:	bd10      	pop	{r4, pc}

0000e846 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    e846:	b510      	push	{r4, lr}
    e848:	f7f8 f8c8 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e84c:	2810      	cmp	r0, #16
    e84e:	d003      	beq.n	e858 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    e850:	f7f8 f894 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e854:	2810      	cmp	r0, #16
    e856:	d100      	bne.n	e85a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    e858:	2008      	movs	r0, #8
    e85a:	bd10      	pop	{r4, pc}

0000e85c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    e85c:	b510      	push	{r4, lr}
    e85e:	f7f8 f8bd 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e862:	2810      	cmp	r0, #16
    e864:	d007      	beq.n	e876 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e866:	f7f8 f889 	bl	697c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    e86a:	2810      	cmp	r0, #16
    e86c:	d003      	beq.n	e876 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    e86e:	f7f8 f8fd 	bl	6a6c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    e872:	2001      	movs	r0, #1
    e874:	bd10      	pop	{r4, pc}
    e876:	2000      	movs	r0, #0
    e878:	bd10      	pop	{r4, pc}

0000e87a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    e87a:	b510      	push	{r4, lr}
    e87c:	f7f8 f8ae 	bl	69dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    e880:	2810      	cmp	r0, #16
    e882:	d003      	beq.n	e88c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    e884:	f7f8 f93a 	bl	6afc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    e888:	2001      	movs	r0, #1
    e88a:	bd10      	pop	{r4, pc}
    e88c:	2000      	movs	r0, #0
    e88e:	bd10      	pop	{r4, pc}

0000e890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    e890:	b570      	push	{r4, r5, r6, lr}
    e892:	460e      	mov	r6, r1
    e894:	b08c      	sub	sp, #48	; 0x30
    e896:	4614      	mov	r4, r2
    e898:	4601      	mov	r1, r0
    e89a:	461d      	mov	r5, r3
    e89c:	2210      	movs	r2, #16
    e89e:	4668      	mov	r0, sp
    e8a0:	f000 f9a0 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8a4:	2210      	movs	r2, #16
    e8a6:	4631      	mov	r1, r6
    e8a8:	a804      	add	r0, sp, #16
    e8aa:	f000 f99b 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8ae:	4668      	mov	r0, sp
    e8b0:	f7ff ff16 	bl	e6e0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e8b4:	a908      	add	r1, sp, #32
    e8b6:	f04f 0210 	mov.w	r2, #16
    e8ba:	4628      	mov	r0, r5
    e8bc:	b11c      	cbz	r4, e8c6 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    e8be:	f000 f991 	bl	ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    e8c2:	b00c      	add	sp, #48	; 0x30
    e8c4:	bd70      	pop	{r4, r5, r6, pc}
    e8c6:	f7fe fe1d 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e8ca:	e7fa      	b.n	e8c2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    e8cc:	0781      	lsls	r1, r0, #30
    e8ce:	d501      	bpl.n	e8d4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    e8d0:	2002      	movs	r0, #2
    e8d2:	4770      	bx	lr
    e8d4:	07c0      	lsls	r0, r0, #31
    e8d6:	d0fc      	beq.n	e8d2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    e8d8:	2001      	movs	r0, #1
    e8da:	4770      	bx	lr

0000e8dc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    e8dc:	b530      	push	{r4, r5, lr}
    e8de:	7901      	ldrb	r1, [r0, #4]
    e8e0:	0949      	lsrs	r1, r1, #5
    e8e2:	d128      	bne.n	e936 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    e8e4:	2200      	movs	r2, #0
    e8e6:	4611      	mov	r1, r2
    e8e8:	5c44      	ldrb	r4, [r0, r1]
    e8ea:	1c49      	adds	r1, r1, #1
    e8ec:	f004 0301 	and.w	r3, r4, #1
    e8f0:	0864      	lsrs	r4, r4, #1
    e8f2:	f004 0501 	and.w	r5, r4, #1
    e8f6:	442b      	add	r3, r5
    e8f8:	0864      	lsrs	r4, r4, #1
    e8fa:	f004 0501 	and.w	r5, r4, #1
    e8fe:	441d      	add	r5, r3
    e900:	0863      	lsrs	r3, r4, #1
    e902:	f003 0401 	and.w	r4, r3, #1
    e906:	442c      	add	r4, r5
    e908:	085b      	lsrs	r3, r3, #1
    e90a:	f003 0501 	and.w	r5, r3, #1
    e90e:	442c      	add	r4, r5
    e910:	085b      	lsrs	r3, r3, #1
    e912:	f003 0501 	and.w	r5, r3, #1
    e916:	085b      	lsrs	r3, r3, #1
    e918:	442c      	add	r4, r5
    e91a:	f003 0501 	and.w	r5, r3, #1
    e91e:	442c      	add	r4, r5
    e920:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    e924:	441a      	add	r2, r3
    e926:	b2c9      	uxtb	r1, r1
    e928:	b2d2      	uxtb	r2, r2
    e92a:	2905      	cmp	r1, #5
    e92c:	d3dc      	bcc.n	e8e8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xc>
    e92e:	2a01      	cmp	r2, #1
    e930:	d901      	bls.n	e936 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x5a>
    e932:	2001      	movs	r0, #1
    e934:	bd30      	pop	{r4, r5, pc}
    e936:	2000      	movs	r0, #0
    e938:	bd30      	pop	{r4, r5, pc}

0000e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    e93a:	b510      	push	{r4, lr}
    e93c:	460c      	mov	r4, r1
    e93e:	2100      	movs	r1, #0
    e940:	f7ff fe7d 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    e944:	6060      	str	r0, [r4, #4]
    e946:	b110      	cbz	r0, e94e <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    e948:	2000      	movs	r0, #0
    e94a:	7020      	strb	r0, [r4, #0]
    e94c:	bd10      	pop	{r4, pc}
    e94e:	2002      	movs	r0, #2
    e950:	bd10      	pop	{r4, pc}

0000e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    e952:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e956:	4348      	muls	r0, r1
    e958:	4770      	bx	lr

0000e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    e95a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e95e:	fbb0 f0f1 	udiv	r0, r0, r1
    e962:	b280      	uxth	r0, r0
    e964:	4770      	bx	lr

0000e966 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    e966:	b570      	push	{r4, r5, r6, lr}
    e968:	4604      	mov	r4, r0
    e96a:	4290      	cmp	r0, r2
    e96c:	d20b      	bcs.n	e986 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    e96e:	1b10      	subs	r0, r2, r4
    e970:	2864      	cmp	r0, #100	; 0x64
    e972:	d200      	bcs.n	e976 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    e974:	2064      	movs	r0, #100	; 0x64
    e976:	1825      	adds	r5, r4, r0
    e978:	428d      	cmp	r5, r1
    e97a:	d803      	bhi.n	e984 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    e97c:	2104      	movs	r1, #4
    e97e:	f7f3 fce1 	bl	2344 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    e982:	b108      	cbz	r0, e988 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    e984:	4620      	mov	r0, r4
    e986:	bd70      	pop	{r4, r5, r6, pc}
    e988:	4628      	mov	r0, r5
    e98a:	bd70      	pop	{r4, r5, r6, pc}

0000e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    e98c:	b510      	push	{r4, lr}
    e98e:	f1a2 030f 	sub.w	r3, r2, #15
    e992:	290c      	cmp	r1, #12
    e994:	d24f      	bcs.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e996:	e8df f001 	tbb	[pc, r1]
    e99a:	0806      	.short	0x0806
    e99c:	1815120d 	.word	0x1815120d
    e9a0:	4c322f27 	.word	0x4c322f27
    e9a4:	3d35      	.short	0x3d35
    e9a6:	b3a2      	cbz	r2, ea12 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    e9a8:	e045      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9aa:	2a07      	cmp	r2, #7
    e9ac:	d045      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ae:	2a08      	cmp	r2, #8
    e9b0:	d043      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9b2:	e040      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9b4:	2a0c      	cmp	r2, #12
    e9b6:	d040      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9b8:	2a0b      	cmp	r2, #11
    e9ba:	d03e      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9bc:	e03b      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9be:	2a0d      	cmp	r2, #13
    e9c0:	d03b      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9c2:	e038      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9c4:	2b0c      	cmp	r3, #12
    e9c6:	d938      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9c8:	e035      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9ca:	2a12      	cmp	r2, #18
    e9cc:	d035      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ce:	2a11      	cmp	r2, #17
    e9d0:	d033      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9d2:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e9d6:	b120      	cbz	r0, e9e2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    e9d8:	2a12      	cmp	r2, #18
    e9da:	d32c      	bcc.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9dc:	2a1a      	cmp	r2, #26
    e9de:	d92c      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9e0:	e029      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9e2:	2a16      	cmp	r2, #22
    e9e4:	d2fa      	bcs.n	e9dc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    e9e6:	e026      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9e8:	2b03      	cmp	r3, #3
    e9ea:	d926      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9ec:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    e9f0:	b308      	cbz	r0, ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9f2:	2a1b      	cmp	r2, #27
    e9f4:	d921      	bls.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9f6:	e01e      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9f8:	2a04      	cmp	r2, #4
    e9fa:	d01e      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    e9fc:	e01b      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    e9fe:	2a01      	cmp	r2, #1
    ea00:	d01b      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea02:	e018      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea04:	2a1c      	cmp	r2, #28
    ea06:	d018      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea08:	2a1d      	cmp	r2, #29
    ea0a:	d016      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea0c:	2a1e      	cmp	r2, #30
    ea0e:	d014      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea10:	e011      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea12:	e012      	b.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea14:	2a1f      	cmp	r2, #31
    ea16:	d010      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea18:	2a20      	cmp	r2, #32
    ea1a:	d00e      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea1c:	2a21      	cmp	r2, #33	; 0x21
    ea1e:	d00c      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea20:	2a22      	cmp	r2, #34	; 0x22
    ea22:	d00a      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea24:	2a23      	cmp	r2, #35	; 0x23
    ea26:	d008      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea28:	2a24      	cmp	r2, #36	; 0x24
    ea2a:	d006      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea2c:	2a26      	cmp	r2, #38	; 0x26
    ea2e:	d004      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea30:	e001      	b.n	ea36 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ea32:	2a05      	cmp	r2, #5
    ea34:	d001      	beq.n	ea3a <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ea36:	2000      	movs	r0, #0
    ea38:	bd10      	pop	{r4, pc}
    ea3a:	2001      	movs	r0, #1
    ea3c:	bd10      	pop	{r4, pc}

0000ea3e <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ea3e:	280c      	cmp	r0, #12
    ea40:	d013      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea42:	280b      	cmp	r0, #11
    ea44:	d011      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea46:	280d      	cmp	r0, #13
    ea48:	d00f      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea4a:	281f      	cmp	r0, #31
    ea4c:	d00d      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea4e:	2820      	cmp	r0, #32
    ea50:	d00b      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea52:	2821      	cmp	r0, #33	; 0x21
    ea54:	d009      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea56:	2822      	cmp	r0, #34	; 0x22
    ea58:	d007      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea5a:	2823      	cmp	r0, #35	; 0x23
    ea5c:	d005      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea5e:	2824      	cmp	r0, #36	; 0x24
    ea60:	d003      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea62:	2826      	cmp	r0, #38	; 0x26
    ea64:	d001      	beq.n	ea6a <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ea66:	2000      	movs	r0, #0
    ea68:	4770      	bx	lr
    ea6a:	2001      	movs	r0, #1
    ea6c:	4770      	bx	lr

0000ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ea6e:	f011 0f0c 	tst.w	r1, #12
    ea72:	d016      	beq.n	eaa2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ea74:	074a      	lsls	r2, r1, #29
    ea76:	f44f 7116 	mov.w	r1, #600	; 0x258
    ea7a:	2a00      	cmp	r2, #0
    ea7c:	da02      	bge.n	ea84 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ea7e:	f04f 0210 	mov.w	r2, #16
    ea82:	e001      	b.n	ea88 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    ea84:	f04f 0240 	mov.w	r2, #64	; 0x40
    ea88:	da01      	bge.n	ea8e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    ea8a:	f04f 0196 	mov.w	r1, #150	; 0x96
    ea8e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ea92:	eba0 0301 	sub.w	r3, r0, r1
    ea96:	4288      	cmp	r0, r1
    ea98:	d910      	bls.n	eabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ea9a:	fb93 f0f2 	sdiv	r0, r3, r2
    ea9e:	b280      	uxth	r0, r0
    eaa0:	4770      	bx	lr
    eaa2:	2902      	cmp	r1, #2
    eaa4:	d002      	beq.n	eaac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    eaa6:	2870      	cmp	r0, #112	; 0x70
    eaa8:	d80a      	bhi.n	eac0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    eaaa:	e007      	b.n	eabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eaac:	283c      	cmp	r0, #60	; 0x3c
    eaae:	d905      	bls.n	eabc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    eab0:	383c      	subs	r0, #60	; 0x3c
    eab2:	17c1      	asrs	r1, r0, #31
    eab4:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    eab8:	1080      	asrs	r0, r0, #2
    eaba:	e7f0      	b.n	ea9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    eabc:	2000      	movs	r0, #0
    eabe:	e7ee      	b.n	ea9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    eac0:	3870      	subs	r0, #112	; 0x70
    eac2:	17c1      	asrs	r1, r0, #31
    eac4:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    eac8:	10c0      	asrs	r0, r0, #3
    eaca:	e7e8      	b.n	ea9e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000eacc <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    eacc:	6809      	ldr	r1, [r1, #0]
    eace:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    ead2:	4770      	bx	lr

0000ead4 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    ead4:	2801      	cmp	r0, #1
    ead6:	d002      	beq.n	eade <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    ead8:	2802      	cmp	r0, #2
    eada:	d000      	beq.n	eade <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    eadc:	2000      	movs	r0, #0
    eade:	4770      	bx	lr

0000eae0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    eae0:	b510      	push	{r4, lr}
    eae2:	f640 12c4 	movw	r2, #2500	; 0x9c4
    eae6:	2901      	cmp	r1, #1
    eae8:	d006      	beq.n	eaf8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    eaea:	2902      	cmp	r1, #2
    eaec:	d005      	beq.n	eafa <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    eaee:	f240 31c6 	movw	r1, #966	; 0x3c6
    eaf2:	2029      	movs	r0, #41	; 0x29
    eaf4:	f7f6 f910 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eaf8:	b108      	cbz	r0, eafe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    eafa:	4610      	mov	r0, r2
    eafc:	bd10      	pop	{r4, pc}
    eafe:	f240 40e2 	movw	r0, #1250	; 0x4e2
    eb02:	bd10      	pop	{r4, pc}

0000eb04 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    eb04:	b530      	push	{r4, r5, lr}
    eb06:	242a      	movs	r4, #42	; 0x2a
    eb08:	2523      	movs	r5, #35	; 0x23
    eb0a:	2a16      	cmp	r2, #22
    eb0c:	d105      	bne.n	eb1a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    eb0e:	280c      	cmp	r0, #12
    eb10:	d007      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb12:	280d      	cmp	r0, #13
    eb14:	d005      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb16:	281f      	cmp	r0, #31
    eb18:	d005      	beq.n	eb26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    eb1a:	b171      	cbz	r1, eb3a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    eb1c:	2a16      	cmp	r2, #22
    eb1e:	d10c      	bne.n	eb3a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    eb20:	e004      	b.n	eb2c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    eb22:	701c      	strb	r4, [r3, #0]
    eb24:	e000      	b.n	eb28 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    eb26:	701d      	strb	r5, [r3, #0]
    eb28:	2001      	movs	r0, #1
    eb2a:	bd30      	pop	{r4, r5, pc}
    eb2c:	7808      	ldrb	r0, [r1, #0]
    eb2e:	2801      	cmp	r0, #1
    eb30:	d0f7      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb32:	2800      	cmp	r0, #0
    eb34:	d0f5      	beq.n	eb22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    eb36:	2816      	cmp	r0, #22
    eb38:	d0f5      	beq.n	eb26 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    eb3a:	2000      	movs	r0, #0
    eb3c:	bd30      	pop	{r4, r5, pc}

0000eb3e <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    eb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb40:	b2cf      	uxtb	r7, r1
    eb42:	4606      	mov	r6, r0
    eb44:	f3c1 2407 	ubfx	r4, r1, #8, #8
    eb48:	4621      	mov	r1, r4
    eb4a:	4638      	mov	r0, r7
    eb4c:	f000 f8ca 	bl	ece4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    eb50:	b2f5      	uxtb	r5, r6
    eb52:	f3c6 2607 	ubfx	r6, r6, #8, #8
    eb56:	b920      	cbnz	r0, eb62 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    eb58:	4631      	mov	r1, r6
    eb5a:	4628      	mov	r0, r5
    eb5c:	f000 f8c2 	bl	ece4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    eb60:	b140      	cbz	r0, eb74 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    eb62:	4027      	ands	r7, r4
    eb64:	4035      	ands	r5, r6
    eb66:	403d      	ands	r5, r7
    eb68:	4644      	mov	r4, r8
    eb6a:	f365 0407 	bfi	r4, r5, #0, #8
    eb6e:	f365 240f 	bfi	r4, r5, #8, #8
    eb72:	e006      	b.n	eb82 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    eb74:	4025      	ands	r5, r4
    eb76:	4644      	mov	r4, r8
    eb78:	f365 0407 	bfi	r4, r5, #0, #8
    eb7c:	403e      	ands	r6, r7
    eb7e:	f366 240f 	bfi	r4, r6, #8, #8
    eb82:	b2e0      	uxtb	r0, r4
    eb84:	f7ff fea2 	bl	e8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    eb88:	f88d 0000 	strb.w	r0, [sp]
    eb8c:	f3c4 2007 	ubfx	r0, r4, #8, #8
    eb90:	f7ff fe9c 	bl	e8cc <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    eb94:	f88d 0001 	strb.w	r0, [sp, #1]
    eb98:	f8bd 0000 	ldrh.w	r0, [sp]
    eb9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000eb9e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    eb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eba2:	460c      	mov	r4, r1
    eba4:	4605      	mov	r5, r0
    eba6:	68c6      	ldr	r6, [r0, #12]
    eba8:	f7f4 f826 	bl	2bf8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ebac:	b198      	cbz	r0, ebd6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ebae:	b1bc      	cbz	r4, ebe0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ebb0:	4630      	mov	r0, r6
    ebb2:	68e9      	ldr	r1, [r5, #12]
    ebb4:	f7f3 fd14 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ebb8:	2800      	cmp	r0, #0
    ebba:	dd11      	ble.n	ebe0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ebbc:	4420      	add	r0, r4
    ebbe:	1e40      	subs	r0, r0, #1
    ebc0:	fbb0 f7f4 	udiv	r7, r0, r4
    ebc4:	fb07 f104 	mul.w	r1, r7, r4
    ebc8:	4630      	mov	r0, r6
    ebca:	f7f3 fcd7 	bl	257c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ebce:	60e8      	str	r0, [r5, #12]
    ebd0:	4638      	mov	r0, r7
    ebd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ebd6:	f240 214b 	movw	r1, #587	; 0x24b
    ebda:	2029      	movs	r0, #41	; 0x29
    ebdc:	f7f6 f89c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebe0:	2000      	movs	r0, #0
    ebe2:	e7f6      	b.n	ebd2 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000ebe4 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ebe4:	b530      	push	{r4, r5, lr}
    ebe6:	4613      	mov	r3, r2
    ebe8:	e006      	b.n	ebf8 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ebea:	18cc      	adds	r4, r1, r3
    ebec:	1ad5      	subs	r5, r2, r3
    ebee:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ebf2:	1e5b      	subs	r3, r3, #1
    ebf4:	5544      	strb	r4, [r0, r5]
    ebf6:	b2db      	uxtb	r3, r3
    ebf8:	2b00      	cmp	r3, #0
    ebfa:	d1f6      	bne.n	ebea <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ebfc:	bd30      	pop	{r4, r5, pc}

0000ebfe <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ebfe:	b538      	push	{r3, r4, r5, lr}
    ec00:	4605      	mov	r5, r0
    ec02:	460c      	mov	r4, r1
    ec04:	4668      	mov	r0, sp
    ec06:	f7fd ff65 	bl	cad4 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ec0a:	b310      	cbz	r0, ec52 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ec0c:	f99d 0000 	ldrsb.w	r0, [sp]
    ec10:	7260      	strb	r0, [r4, #9]
    ec12:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ec16:	72a1      	strb	r1, [r4, #10]
    ec18:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ec1c:	2200      	movs	r2, #0
    ec1e:	1a41      	subs	r1, r0, r1
    ec20:	d500      	bpl.n	ec24 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ec22:	4249      	negs	r1, r1
    ec24:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    ec28:	428b      	cmp	r3, r1
    ec2a:	dc10      	bgt.n	ec4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec2c:	2bff      	cmp	r3, #255	; 0xff
    ec2e:	d00e      	beq.n	ec4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec30:	7b21      	ldrb	r1, [r4, #12]
    ec32:	1c49      	adds	r1, r1, #1
    ec34:	b2c9      	uxtb	r1, r1
    ec36:	7321      	strb	r1, [r4, #12]
    ec38:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ec3c:	4299      	cmp	r1, r3
    ec3e:	d802      	bhi.n	ec46 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ec40:	7ae1      	ldrb	r1, [r4, #11]
    ec42:	297f      	cmp	r1, #127	; 0x7f
    ec44:	d103      	bne.n	ec4e <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ec46:	72e0      	strb	r0, [r4, #11]
    ec48:	2000      	movs	r0, #0
    ec4a:	7320      	strb	r0, [r4, #12]
    ec4c:	2201      	movs	r2, #1
    ec4e:	4610      	mov	r0, r2
    ec50:	bd38      	pop	{r3, r4, r5, pc}
    ec52:	207f      	movs	r0, #127	; 0x7f
    ec54:	7260      	strb	r0, [r4, #9]
    ec56:	2000      	movs	r0, #0
    ec58:	bd38      	pop	{r3, r4, r5, pc}

0000ec5a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ec5a:	2300      	movs	r3, #0
    ec5c:	6283      	str	r3, [r0, #40]	; 0x28
    ec5e:	8602      	strh	r2, [r0, #48]	; 0x30
    ec60:	f240 2371 	movw	r3, #625	; 0x271
    ec64:	435a      	muls	r2, r3
    ec66:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ec6a:	1e52      	subs	r2, r2, #1
    ec6c:	fbb2 f1f1 	udiv	r1, r2, r1
    ec70:	62c1      	str	r1, [r0, #44]	; 0x2c
    ec72:	4770      	bx	lr

0000ec74 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ec74:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec78:	4348      	muls	r0, r1
    ec7a:	4770      	bx	lr

0000ec7c <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ec7c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec80:	fbb0 f0f1 	udiv	r0, r0, r1
    ec84:	b280      	uxth	r0, r0
    ec86:	4770      	bx	lr

0000ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ec88:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec8c:	fb10 f001 	smulbb	r0, r0, r1
    ec90:	4770      	bx	lr

0000ec92 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ec92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ec96:	fbb0 f0f1 	udiv	r0, r0, r1
    ec9a:	b2c0      	uxtb	r0, r0
    ec9c:	4770      	bx	lr

0000ec9e <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    ec9e:	b510      	push	{r4, lr}
    eca0:	2300      	movs	r3, #0
    eca2:	461a      	mov	r2, r3
    eca4:	e003      	b.n	ecae <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    eca6:	5c84      	ldrb	r4, [r0, r2]
    eca8:	4323      	orrs	r3, r4
    ecaa:	1c52      	adds	r2, r2, #1
    ecac:	b2d2      	uxtb	r2, r2
    ecae:	428a      	cmp	r2, r1
    ecb0:	d3f9      	bcc.n	eca6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ecb2:	b10b      	cbz	r3, ecb8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ecb4:	2000      	movs	r0, #0
    ecb6:	bd10      	pop	{r4, pc}
    ecb8:	2001      	movs	r0, #1
    ecba:	bd10      	pop	{r4, pc}
    ecbc:	b510      	push	{r4, lr}
    ecbe:	4604      	mov	r4, r0
    ecc0:	f7fd f980 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    ecc4:	f644 112b 	movw	r1, #18731	; 0x492b
    ecc8:	4008      	ands	r0, r1
    ecca:	2101      	movs	r1, #1
    eccc:	7561      	strb	r1, [r4, #21]
    ecce:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    ecd2:	0a00      	lsrs	r0, r0, #8
    ecd4:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    ecd8:	20fe      	movs	r0, #254	; 0xfe
    ecda:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    ecde:	207f      	movs	r0, #127	; 0x7f
    ece0:	7260      	strb	r0, [r4, #9]
    ece2:	bd10      	pop	{r4, pc}
    ece4:	2801      	cmp	r0, #1
    ece6:	d002      	beq.n	ecee <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    ece8:	2802      	cmp	r0, #2
    ecea:	d003      	beq.n	ecf4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    ecec:	e004      	b.n	ecf8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ecee:	2901      	cmp	r1, #1
    ecf0:	d004      	beq.n	ecfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ecf2:	e001      	b.n	ecf8 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ecf4:	2902      	cmp	r1, #2
    ecf6:	d001      	beq.n	ecfc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ecf8:	2000      	movs	r0, #0
    ecfa:	4770      	bx	lr
    ecfc:	2001      	movs	r0, #1
    ecfe:	4770      	bx	lr

0000ed00 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ed00:	b510      	push	{r4, lr}
    ed02:	4604      	mov	r4, r0
    ed04:	f890 0020 	ldrb.w	r0, [r0, #32]
    ed08:	b108      	cbz	r0, ed0e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ed0a:	2825      	cmp	r0, #37	; 0x25
    ed0c:	d901      	bls.n	ed12 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ed0e:	2012      	movs	r0, #18
    ed10:	bd10      	pop	{r4, pc}
    ed12:	b12a      	cbz	r2, ed20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ed14:	7d60      	ldrb	r0, [r4, #21]
    ed16:	b128      	cbz	r0, ed24 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ed18:	2801      	cmp	r0, #1
    ed1a:	d009      	beq.n	ed30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ed1c:	201f      	movs	r0, #31
    ed1e:	bd10      	pop	{r4, pc}
    ed20:	2000      	movs	r0, #0
    ed22:	bd10      	pop	{r4, pc}
    ed24:	4620      	mov	r0, r4
    ed26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed2a:	4611      	mov	r1, r2
    ed2c:	f7f7 bfdc 	b.w	6ce8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ed30:	88a2      	ldrh	r2, [r4, #4]
    ed32:	6909      	ldr	r1, [r1, #16]
    ed34:	f104 0015 	add.w	r0, r4, #21
    ed38:	f7f7 ff82 	bl	6c40 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ed3c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ed40:	e7ee      	b.n	ed20 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ed42 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ed42:	b530      	push	{r4, r5, lr}
    ed44:	1c42      	adds	r2, r0, #1
    ed46:	428a      	cmp	r2, r1
    ed48:	d004      	beq.n	ed54 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ed4a:	680a      	ldr	r2, [r1, #0]
    ed4c:	f8c0 2001 	str.w	r2, [r0, #1]
    ed50:	7909      	ldrb	r1, [r1, #4]
    ed52:	7141      	strb	r1, [r0, #5]
    ed54:	7941      	ldrb	r1, [r0, #5]
    ed56:	f001 011f 	and.w	r1, r1, #31
    ed5a:	7141      	strb	r1, [r0, #5]
    ed5c:	2100      	movs	r1, #0
    ed5e:	72c1      	strb	r1, [r0, #11]
    ed60:	1843      	adds	r3, r0, r1
    ed62:	1c49      	adds	r1, r1, #1
    ed64:	785c      	ldrb	r4, [r3, #1]
    ed66:	b2c9      	uxtb	r1, r1
    ed68:	f004 0201 	and.w	r2, r4, #1
    ed6c:	0864      	lsrs	r4, r4, #1
    ed6e:	f004 0501 	and.w	r5, r4, #1
    ed72:	4415      	add	r5, r2
    ed74:	0862      	lsrs	r2, r4, #1
    ed76:	f002 0401 	and.w	r4, r2, #1
    ed7a:	442c      	add	r4, r5
    ed7c:	0852      	lsrs	r2, r2, #1
    ed7e:	f002 0501 	and.w	r5, r2, #1
    ed82:	442c      	add	r4, r5
    ed84:	0852      	lsrs	r2, r2, #1
    ed86:	f002 0501 	and.w	r5, r2, #1
    ed8a:	442c      	add	r4, r5
    ed8c:	0852      	lsrs	r2, r2, #1
    ed8e:	f002 0501 	and.w	r5, r2, #1
    ed92:	442c      	add	r4, r5
    ed94:	0852      	lsrs	r2, r2, #1
    ed96:	f002 0501 	and.w	r5, r2, #1
    ed9a:	442c      	add	r4, r5
    ed9c:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    eda0:	719a      	strb	r2, [r3, #6]
    eda2:	7ac3      	ldrb	r3, [r0, #11]
    eda4:	2905      	cmp	r1, #5
    eda6:	441a      	add	r2, r3
    eda8:	72c2      	strb	r2, [r0, #11]
    edaa:	d3d9      	bcc.n	ed60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    edac:	bd30      	pop	{r4, r5, pc}

0000edae <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    edae:	68c0      	ldr	r0, [r0, #12]
    edb0:	6008      	str	r0, [r1, #0]
    edb2:	4770      	bx	lr

0000edb4 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    edb4:	6842      	ldr	r2, [r0, #4]
    edb6:	600a      	str	r2, [r1, #0]
    edb8:	6880      	ldr	r0, [r0, #8]
    edba:	6048      	str	r0, [r1, #4]
    edbc:	4770      	bx	lr

0000edbe <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    edbe:	6842      	ldr	r2, [r0, #4]
    edc0:	600a      	str	r2, [r1, #0]
    edc2:	6880      	ldr	r0, [r0, #8]
    edc4:	6048      	str	r0, [r1, #4]
    edc6:	4770      	bx	lr

0000edc8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    edc8:	7800      	ldrb	r0, [r0, #0]
    edca:	f000 0003 	and.w	r0, r0, #3
    edce:	4770      	bx	lr

0000edd0 <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    edd0:	8880      	ldrh	r0, [r0, #4]
    edd2:	4770      	bx	lr

0000edd4 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    edd4:	88c0      	ldrh	r0, [r0, #6]
    edd6:	4770      	bx	lr

0000edd8 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    edd8:	8900      	ldrh	r0, [r0, #8]
    edda:	4770      	bx	lr

0000eddc <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    eddc:	8940      	ldrh	r0, [r0, #10]
    edde:	4770      	bx	lr

0000ede0 <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    ede0:	7900      	ldrb	r0, [r0, #4]
    ede2:	4770      	bx	lr

0000ede4 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    ede4:	7900      	ldrb	r0, [r0, #4]
    ede6:	4770      	bx	lr

0000ede8 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    ede8:	8901      	ldrh	r1, [r0, #8]
    edea:	291b      	cmp	r1, #27
    edec:	d30c      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    edee:	8941      	ldrh	r1, [r0, #10]
    edf0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    edf4:	4291      	cmp	r1, r2
    edf6:	d307      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    edf8:	8881      	ldrh	r1, [r0, #4]
    edfa:	291b      	cmp	r1, #27
    edfc:	d304      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    edfe:	88c0      	ldrh	r0, [r0, #6]
    ee00:	4290      	cmp	r0, r2
    ee02:	d301      	bcc.n	ee08 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    ee04:	2001      	movs	r0, #1
    ee06:	4770      	bx	lr
    ee08:	2000      	movs	r0, #0
    ee0a:	4770      	bx	lr

0000ee0c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    ee0c:	b510      	push	{r4, lr}
    ee0e:	29fb      	cmp	r1, #251	; 0xfb
    ee10:	d904      	bls.n	ee1c <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    ee12:	f44f 61af 	mov.w	r1, #1400	; 0x578
    ee16:	202a      	movs	r0, #42	; 0x2a
    ee18:	f7f5 ff7e 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee1c:	7041      	strb	r1, [r0, #1]
    ee1e:	bd10      	pop	{r4, pc}

0000ee20 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    ee20:	7901      	ldrb	r1, [r0, #4]
    ee22:	0749      	lsls	r1, r1, #29
    ee24:	d004      	beq.n	ee30 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ee26:	7940      	ldrb	r0, [r0, #5]
    ee28:	0740      	lsls	r0, r0, #29
    ee2a:	d001      	beq.n	ee30 <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    ee2c:	2001      	movs	r0, #1
    ee2e:	4770      	bx	lr
    ee30:	2000      	movs	r0, #0
    ee32:	4770      	bx	lr

0000ee34 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    ee34:	7901      	ldrb	r1, [r0, #4]
    ee36:	0749      	lsls	r1, r1, #29
    ee38:	d004      	beq.n	ee44 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ee3a:	7940      	ldrb	r0, [r0, #5]
    ee3c:	0740      	lsls	r0, r0, #29
    ee3e:	d001      	beq.n	ee44 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    ee40:	2001      	movs	r0, #1
    ee42:	4770      	bx	lr
    ee44:	2000      	movs	r0, #0
    ee46:	4770      	bx	lr

0000ee48 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    ee48:	7900      	ldrb	r0, [r0, #4]
    ee4a:	4770      	bx	lr

0000ee4c <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    ee4c:	7940      	ldrb	r0, [r0, #5]
    ee4e:	4770      	bx	lr

0000ee50 <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    ee50:	7101      	strb	r1, [r0, #4]
    ee52:	4770      	bx	lr

0000ee54 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    ee54:	7141      	strb	r1, [r0, #5]
    ee56:	4770      	bx	lr

0000ee58 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    ee58:	680a      	ldr	r2, [r1, #0]
    ee5a:	6042      	str	r2, [r0, #4]
    ee5c:	7909      	ldrb	r1, [r1, #4]
    ee5e:	7201      	strb	r1, [r0, #8]
    ee60:	4770      	bx	lr

0000ee62 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    ee62:	72c1      	strb	r1, [r0, #11]
    ee64:	0a09      	lsrs	r1, r1, #8
    ee66:	7301      	strb	r1, [r0, #12]
    ee68:	4770      	bx	lr

0000ee6a <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    ee6a:	8809      	ldrh	r1, [r1, #0]
    ee6c:	8181      	strh	r1, [r0, #12]
    ee6e:	4770      	bx	lr

0000ee70 <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    ee70:	6809      	ldr	r1, [r1, #0]
    ee72:	f8c0 1016 	str.w	r1, [r0, #22]
    ee76:	4770      	bx	lr

0000ee78 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    ee78:	680a      	ldr	r2, [r1, #0]
    ee7a:	6042      	str	r2, [r0, #4]
    ee7c:	6849      	ldr	r1, [r1, #4]
    ee7e:	6081      	str	r1, [r0, #8]
    ee80:	4770      	bx	lr

0000ee82 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    ee82:	680a      	ldr	r2, [r1, #0]
    ee84:	f840 2f0e 	str.w	r2, [r0, #14]!
    ee88:	6849      	ldr	r1, [r1, #4]
    ee8a:	6041      	str	r1, [r0, #4]
    ee8c:	4770      	bx	lr

0000ee8e <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    ee8e:	680a      	ldr	r2, [r1, #0]
    ee90:	6042      	str	r2, [r0, #4]
    ee92:	6849      	ldr	r1, [r1, #4]
    ee94:	6081      	str	r1, [r0, #8]
    ee96:	4770      	bx	lr

0000ee98 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    ee98:	7802      	ldrb	r2, [r0, #0]
    ee9a:	f001 0103 	and.w	r1, r1, #3
    ee9e:	f022 0203 	bic.w	r2, r2, #3
    eea2:	430a      	orrs	r2, r1
    eea4:	7002      	strb	r2, [r0, #0]
    eea6:	4770      	bx	lr

0000eea8 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    eea8:	7101      	strb	r1, [r0, #4]
    eeaa:	4770      	bx	lr

0000eeac <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    eeac:	7101      	strb	r1, [r0, #4]
    eeae:	0a09      	lsrs	r1, r1, #8
    eeb0:	7141      	strb	r1, [r0, #5]
    eeb2:	4770      	bx	lr

0000eeb4 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    eeb4:	7181      	strb	r1, [r0, #6]
    eeb6:	0a09      	lsrs	r1, r1, #8
    eeb8:	71c1      	strb	r1, [r0, #7]
    eeba:	4770      	bx	lr

0000eebc <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    eebc:	7201      	strb	r1, [r0, #8]
    eebe:	0a09      	lsrs	r1, r1, #8
    eec0:	7241      	strb	r1, [r0, #9]
    eec2:	4770      	bx	lr

0000eec4 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    eec4:	7281      	strb	r1, [r0, #10]
    eec6:	0a09      	lsrs	r1, r1, #8
    eec8:	72c1      	strb	r1, [r0, #11]
    eeca:	4770      	bx	lr

0000eecc <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    eecc:	7181      	strb	r1, [r0, #6]
    eece:	0a09      	lsrs	r1, r1, #8
    eed0:	71c1      	strb	r1, [r0, #7]
    eed2:	4770      	bx	lr

0000eed4 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    eed4:	7141      	strb	r1, [r0, #5]
    eed6:	4770      	bx	lr

0000eed8 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    eed8:	7841      	ldrb	r1, [r0, #1]
    eeda:	7800      	ldrb	r0, [r0, #0]
    eedc:	f010 000f 	ands.w	r0, r0, #15
    eee0:	d005      	beq.n	eeee <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    eee2:	2801      	cmp	r0, #1
    eee4:	d007      	beq.n	eef6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    eee6:	2802      	cmp	r0, #2
    eee8:	d001      	beq.n	eeee <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    eeea:	2806      	cmp	r0, #6
    eeec:	d105      	bne.n	eefa <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    eeee:	1f89      	subs	r1, r1, #6
    eef0:	291f      	cmp	r1, #31
    eef2:	d904      	bls.n	eefe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    eef4:	e001      	b.n	eefa <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    eef6:	290c      	cmp	r1, #12
    eef8:	d001      	beq.n	eefe <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    eefa:	2000      	movs	r0, #0
    eefc:	4770      	bx	lr
    eefe:	2001      	movs	r0, #1
    ef00:	4770      	bx	lr

0000ef02 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    ef02:	7800      	ldrb	r0, [r0, #0]
    ef04:	09c0      	lsrs	r0, r0, #7
    ef06:	4770      	bx	lr

0000ef08 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    ef08:	f850 2f03 	ldr.w	r2, [r0, #3]!
    ef0c:	600a      	str	r2, [r1, #0]
    ef0e:	8880      	ldrh	r0, [r0, #4]
    ef10:	8088      	strh	r0, [r1, #4]
    ef12:	4770      	bx	lr

0000ef14 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    ef14:	7800      	ldrb	r0, [r0, #0]
    ef16:	f3c0 1080 	ubfx	r0, r0, #6, #1
    ef1a:	4770      	bx	lr

0000ef1c <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    ef1c:	7801      	ldrb	r1, [r0, #0]
    ef1e:	f001 010f 	and.w	r1, r1, #15
    ef22:	2904      	cmp	r1, #4
    ef24:	d105      	bne.n	ef32 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    ef26:	7840      	ldrb	r0, [r0, #1]
    ef28:	1f80      	subs	r0, r0, #6
    ef2a:	281f      	cmp	r0, #31
    ef2c:	d801      	bhi.n	ef32 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    ef2e:	2001      	movs	r0, #1
    ef30:	4770      	bx	lr
    ef32:	2000      	movs	r0, #0
    ef34:	4770      	bx	lr

0000ef36 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    ef36:	b510      	push	{r4, lr}
    ef38:	7802      	ldrb	r2, [r0, #0]
    ef3a:	f001 030f 	and.w	r3, r1, #15
    ef3e:	f022 020f 	bic.w	r2, r2, #15
    ef42:	431a      	orrs	r2, r3
    ef44:	7002      	strb	r2, [r0, #0]
    ef46:	2907      	cmp	r1, #7
    ef48:	d20c      	bcs.n	ef64 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    ef4a:	e8df f001 	tbb	[pc, r1]
    ef4e:	0604      	.short	0x0604
    ef50:	08040604 	.word	0x08040604
    ef54:	0004      	.short	0x0004
    ef56:	2106      	movs	r1, #6
    ef58:	e002      	b.n	ef60 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ef5a:	210c      	movs	r1, #12
    ef5c:	e000      	b.n	ef60 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    ef5e:	2122      	movs	r1, #34	; 0x22
    ef60:	7041      	strb	r1, [r0, #1]
    ef62:	bd10      	pop	{r4, pc}
    ef64:	216e      	movs	r1, #110	; 0x6e
    ef66:	202a      	movs	r0, #42	; 0x2a
    ef68:	f7f5 fed6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ef6c <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    ef6c:	680a      	ldr	r2, [r1, #0]
    ef6e:	f840 2f09 	str.w	r2, [r0, #9]!
    ef72:	8889      	ldrh	r1, [r1, #4]
    ef74:	8081      	strh	r1, [r0, #4]
    ef76:	4770      	bx	lr

0000ef78 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    ef78:	7802      	ldrb	r2, [r0, #0]
    ef7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    ef7e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    ef82:	7002      	strb	r2, [r0, #0]
    ef84:	4770      	bx	lr

0000ef86 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    ef86:	680a      	ldr	r2, [r1, #0]
    ef88:	f840 2f03 	str.w	r2, [r0, #3]!
    ef8c:	8889      	ldrh	r1, [r1, #4]
    ef8e:	8081      	strh	r1, [r0, #4]
    ef90:	4770      	bx	lr

0000ef92 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    ef92:	7802      	ldrb	r2, [r0, #0]
    ef94:	2340      	movs	r3, #64	; 0x40
    ef96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    ef9a:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    ef9e:	430a      	orrs	r2, r1
    efa0:	7002      	strb	r2, [r0, #0]
    efa2:	4770      	bx	lr

0000efa4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    efa4:	2101      	movs	r1, #1
    efa6:	f000 b847 	b.w	f038 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x94>
    efaa:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    efae:	460e      	mov	r6, r1
    efb0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    efb4:	4617      	mov	r7, r2
    efb6:	39ff      	subs	r1, #255	; 0xff
    efb8:	d014      	beq.n	efe4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    efba:	8030      	strh	r0, [r6, #0]
    efbc:	2100      	movs	r1, #0
    efbe:	7171      	strb	r1, [r6, #5]
    efc0:	f7f6 faa8 	bl	5514 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    efc4:	4604      	mov	r4, r0
    efc6:	f7ff f964 	bl	e292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    efca:	0005      	movs	r5, r0
    efcc:	d00a      	beq.n	efe4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x40>
    efce:	4620      	mov	r0, r4
    efd0:	4629      	mov	r1, r5
    efd2:	aa01      	add	r2, sp, #4
    efd4:	f7ff f98e 	bl	e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    efd8:	8070      	strh	r0, [r6, #2]
    efda:	b130      	cbz	r0, efea <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x46>
    efdc:	28fb      	cmp	r0, #251	; 0xfb
    efde:	d906      	bls.n	efee <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x4a>
    efe0:	21c9      	movs	r1, #201	; 0xc9
    efe2:	e026      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    efe4:	2000      	movs	r0, #0
    efe6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    efea:	21c8      	movs	r1, #200	; 0xc8
    efec:	e021      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    efee:	9801      	ldr	r0, [sp, #4]
    eff0:	f7ff feea 	bl	edc8 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    eff4:	2801      	cmp	r0, #1
    eff6:	d003      	beq.n	f000 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    eff8:	2802      	cmp	r0, #2
    effa:	d001      	beq.n	f000 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x5c>
    effc:	21d8      	movs	r1, #216	; 0xd8
    effe:	e018      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f000:	7130      	strb	r0, [r6, #4]
    f002:	4629      	mov	r1, r5
    f004:	8873      	ldrh	r3, [r6, #2]
    f006:	2503      	movs	r5, #3
    f008:	4620      	mov	r0, r4
    f00a:	463a      	mov	r2, r7
    f00c:	9500      	str	r5, [sp, #0]
    f00e:	f7ff f817 	bl	e040 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f012:	4620      	mov	r0, r4
    f014:	60b7      	str	r7, [r6, #8]
    f016:	f7ff f8eb 	bl	e1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f01a:	b138      	cbz	r0, f02c <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x88>
    f01c:	2100      	movs	r1, #0
    f01e:	4620      	mov	r0, r4
    f020:	460a      	mov	r2, r1
    f022:	f7ff fa45 	bl	e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f026:	b118      	cbz	r0, f030 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8c>
    f028:	2001      	movs	r0, #1
    f02a:	e7dc      	b.n	efe6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x42>
    f02c:	21e8      	movs	r1, #232	; 0xe8
    f02e:	e000      	b.n	f032 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x8e>
    f030:	21ed      	movs	r1, #237	; 0xed
    f032:	202b      	movs	r0, #43	; 0x2b
    f034:	f7f5 fe70 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f038:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f03c:	4604      	mov	r4, r0
    f03e:	460e      	mov	r6, r1
    f040:	2000      	movs	r0, #0
    f042:	f7f6 f84d 	bl	50e0 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f046:	4605      	mov	r5, r0
    f048:	2000      	movs	r0, #0
    f04a:	b906      	cbnz	r6, f04e <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xaa>
    f04c:	2001      	movs	r0, #1
    f04e:	2600      	movs	r6, #0
    f050:	46b0      	mov	r8, r6
    f052:	182f      	adds	r7, r5, r0
    f054:	e017      	b.n	f086 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xe2>
    f056:	8820      	ldrh	r0, [r4, #0]
    f058:	1c40      	adds	r0, r0, #1
    f05a:	b280      	uxth	r0, r0
    f05c:	8020      	strh	r0, [r4, #0]
    f05e:	42b8      	cmp	r0, r7
    f060:	d302      	bcc.n	f068 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xc4>
    f062:	4640      	mov	r0, r8
    f064:	f8a4 8000 	strh.w	r8, [r4]
    f068:	b280      	uxth	r0, r0
    f06a:	42a8      	cmp	r0, r5
    f06c:	d304      	bcc.n	f078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    f06e:	42b8      	cmp	r0, r7
    f070:	d202      	bcs.n	f078 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd4>
    f072:	2000      	movs	r0, #0
    f074:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f078:	4669      	mov	r1, sp
    f07a:	f7ff fc5e 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f07e:	2800      	cmp	r0, #0
    f080:	d0f8      	beq.n	f074 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>
    f082:	1c76      	adds	r6, r6, #1
    f084:	b2f6      	uxtb	r6, r6
    f086:	42b7      	cmp	r7, r6
    f088:	d8e5      	bhi.n	f056 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xb2>
    f08a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f08e:	8020      	strh	r0, [r4, #0]
    f090:	2012      	movs	r0, #18
    f092:	e7ef      	b.n	f074 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0xd0>

0000f094 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f094:	b570      	push	{r4, r5, r6, lr}
    f096:	8050      	strh	r0, [r2, #2]
    f098:	890c      	ldrh	r4, [r1, #8]
    f09a:	8094      	strh	r4, [r2, #4]
    f09c:	898b      	ldrh	r3, [r1, #12]
    f09e:	80d3      	strh	r3, [r2, #6]
    f0a0:	8948      	ldrh	r0, [r1, #10]
    f0a2:	8110      	strh	r0, [r2, #8]
    f0a4:	89cd      	ldrh	r5, [r1, #14]
    f0a6:	8155      	strh	r5, [r2, #10]
    f0a8:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    f0aa:	42ae      	cmp	r6, r5
    f0ac:	d108      	bne.n	f0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0ae:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    f0b0:	4285      	cmp	r5, r0
    f0b2:	d105      	bne.n	f0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0b4:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    f0b6:	429d      	cmp	r5, r3
    f0b8:	d102      	bne.n	f0c0 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f0ba:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    f0bc:	42a3      	cmp	r3, r4
    f0be:	d001      	beq.n	f0c4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    f0c0:	2301      	movs	r3, #1
    f0c2:	e000      	b.n	f0c6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f0c4:	2300      	movs	r3, #0
    f0c6:	7313      	strb	r3, [r2, #12]
    f0c8:	8548      	strh	r0, [r1, #42]	; 0x2a
    f0ca:	8950      	ldrh	r0, [r2, #10]
    f0cc:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f0ce:	8890      	ldrh	r0, [r2, #4]
    f0d0:	8588      	strh	r0, [r1, #44]	; 0x2c
    f0d2:	88d0      	ldrh	r0, [r2, #6]
    f0d4:	8608      	strh	r0, [r1, #48]	; 0x30
    f0d6:	2001      	movs	r0, #1
    f0d8:	7010      	strb	r0, [r2, #0]
    f0da:	bd70      	pop	{r4, r5, r6, pc}

0000f0dc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f0dc:	b510      	push	{r4, lr}
    f0de:	888c      	ldrh	r4, [r1, #4]
    f0e0:	890a      	ldrh	r2, [r1, #8]
    f0e2:	884b      	ldrh	r3, [r1, #2]
    f0e4:	88c9      	ldrh	r1, [r1, #6]
    f0e6:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    f0ea:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    f0ee:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    f0f2:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    f0f6:	bd10      	pop	{r4, pc}

0000f0f8 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f0f8:	b570      	push	{r4, r5, r6, lr}
    f0fa:	4615      	mov	r5, r2
    f0fc:	460c      	mov	r4, r1
    f0fe:	f000 f8c7 	bl	f290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f102:	3096      	adds	r0, #150	; 0x96
    f104:	4428      	add	r0, r5
    f106:	42a0      	cmp	r0, r4
    f108:	d801      	bhi.n	f10e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f10a:	1a20      	subs	r0, r4, r0
    f10c:	bd70      	pop	{r4, r5, r6, pc}
    f10e:	2000      	movs	r0, #0
    f110:	bd70      	pop	{r4, r5, r6, pc}

0000f112 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f116:	4604      	mov	r4, r0
    f118:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    f11a:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    f11c:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    f120:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    f124:	4285      	cmp	r5, r0
    f126:	d300      	bcc.n	f12a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f128:	4605      	mov	r5, r0
    f12a:	4620      	mov	r0, r4
    f12c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    f130:	f000 f89e 	bl	f270 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f134:	4601      	mov	r1, r0
    f136:	86e5      	strh	r5, [r4, #54]	; 0x36
    f138:	8761      	strh	r1, [r4, #58]	; 0x3a
    f13a:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    f13c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f142:	4680      	mov	r8, r0
    f144:	42aa      	cmp	r2, r5
    f146:	d200      	bcs.n	f14a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    f148:	462a      	mov	r2, r5
    f14a:	428b      	cmp	r3, r1
    f14c:	d200      	bcs.n	f150 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    f14e:	460b      	mov	r3, r1
    f150:	8202      	strh	r2, [r0, #16]
    f152:	f8a8 3012 	strh.w	r3, [r8, #18]
    f156:	42bd      	cmp	r5, r7
    f158:	d101      	bne.n	f15e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    f15a:	42b1      	cmp	r1, r6
    f15c:	d001      	beq.n	f162 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f15e:	2001      	movs	r0, #1
    f160:	e000      	b.n	f164 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    f162:	2000      	movs	r0, #0
    f164:	4681      	mov	r9, r0
    f166:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    f16a:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    f16e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    f170:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    f172:	4285      	cmp	r5, r0
    f174:	d300      	bcc.n	f178 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    f176:	4605      	mov	r5, r0
    f178:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    f17c:	4620      	mov	r0, r4
    f17e:	f000 f87f 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f182:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    f186:	2902      	cmp	r1, #2
    f188:	d108      	bne.n	f19c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    f18a:	42af      	cmp	r7, r5
    f18c:	d200      	bcs.n	f190 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    f18e:	463d      	mov	r5, r7
    f190:	4286      	cmp	r6, r0
    f192:	d200      	bcs.n	f196 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    f194:	4630      	mov	r0, r6
    f196:	2100      	movs	r1, #0
    f198:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    f19c:	f8a8 5008 	strh.w	r5, [r8, #8]
    f1a0:	f8a8 000c 	strh.w	r0, [r8, #12]
    f1a4:	42bd      	cmp	r5, r7
    f1a6:	d101      	bne.n	f1ac <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    f1a8:	42b0      	cmp	r0, r6
    f1aa:	d001      	beq.n	f1b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f1ac:	2001      	movs	r0, #1
    f1ae:	e000      	b.n	f1b2 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    f1b0:	2000      	movs	r0, #0
    f1b2:	ea40 0009 	orr.w	r0, r0, r9
    f1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f1ba <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f1ba:	6840      	ldr	r0, [r0, #4]
    f1bc:	4770      	bx	lr

0000f1be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1c2:	4616      	mov	r6, r2
    f1c4:	460f      	mov	r7, r1
    f1c6:	4604      	mov	r4, r0
    f1c8:	f000 f862 	bl	f290 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f1cc:	4605      	mov	r5, r0
    f1ce:	463a      	mov	r2, r7
    f1d0:	68e1      	ldr	r1, [r4, #12]
    f1d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f1d4:	f000 f847 	bl	f266 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f1d8:	19a9      	adds	r1, r5, r6
    f1da:	4281      	cmp	r1, r0
    f1dc:	d300      	bcc.n	f1e0 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f1de:	4608      	mov	r0, r1
    f1e0:	6320      	str	r0, [r4, #48]	; 0x30
    f1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f1e6 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f1e6:	221b      	movs	r2, #27
    f1e8:	8402      	strh	r2, [r0, #32]
    f1ea:	8382      	strh	r2, [r0, #28]
    f1ec:	82c2      	strh	r2, [r0, #22]
    f1ee:	8282      	strh	r2, [r0, #20]
    f1f0:	8142      	strh	r2, [r0, #10]
    f1f2:	8202      	strh	r2, [r0, #16]
    f1f4:	8102      	strh	r2, [r0, #8]
    f1f6:	8542      	strh	r2, [r0, #42]	; 0x2a
    f1f8:	8582      	strh	r2, [r0, #44]	; 0x2c
    f1fa:	8482      	strh	r2, [r0, #36]	; 0x24
    f1fc:	2900      	cmp	r1, #0
    f1fe:	d10a      	bne.n	f216 <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f200:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f204:	8441      	strh	r1, [r0, #34]	; 0x22
    f206:	83c1      	strh	r1, [r0, #30]
    f208:	8341      	strh	r1, [r0, #26]
    f20a:	8301      	strh	r1, [r0, #24]
    f20c:	81c1      	strh	r1, [r0, #14]
    f20e:	8241      	strh	r1, [r0, #18]
    f210:	8181      	strh	r1, [r0, #12]
    f212:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f214:	8601      	strh	r1, [r0, #48]	; 0x30
    f216:	4770      	bx	lr

0000f218 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f218:	6800      	ldr	r0, [r0, #0]
    f21a:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f21e:	4290      	cmp	r0, r2
    f220:	d903      	bls.n	f22a <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f222:	1a40      	subs	r0, r0, r1
    f224:	389c      	subs	r0, #156	; 0x9c
    f226:	0840      	lsrs	r0, r0, #1
    f228:	4770      	bx	lr
    f22a:	2000      	movs	r0, #0
    f22c:	4770      	bx	lr

0000f22e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f22e:	b510      	push	{r4, lr}
    f230:	9c02      	ldr	r4, [sp, #8]
    f232:	8281      	strh	r1, [r0, #20]
    f234:	82c2      	strh	r2, [r0, #22]
    f236:	8303      	strh	r3, [r0, #24]
    f238:	8344      	strh	r4, [r0, #26]
    f23a:	bd10      	pop	{r4, pc}

0000f23c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f23c:	8050      	strh	r0, [r2, #2]
    f23e:	8a88      	ldrh	r0, [r1, #20]
    f240:	8090      	strh	r0, [r2, #4]
    f242:	8ac8      	ldrh	r0, [r1, #22]
    f244:	80d0      	strh	r0, [r2, #6]
    f246:	8b08      	ldrh	r0, [r1, #24]
    f248:	8110      	strh	r0, [r2, #8]
    f24a:	8b48      	ldrh	r0, [r1, #26]
    f24c:	8150      	strh	r0, [r2, #10]
    f24e:	2001      	movs	r0, #1
    f250:	7010      	strb	r0, [r2, #0]
    f252:	4770      	bx	lr
    f254:	2902      	cmp	r1, #2
    f256:	d003      	beq.n	f260 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    f258:	00c0      	lsls	r0, r0, #3
    f25a:	3070      	adds	r0, #112	; 0x70
    f25c:	b280      	uxth	r0, r0
    f25e:	4770      	bx	lr
    f260:	0080      	lsls	r0, r0, #2
    f262:	303c      	adds	r0, #60	; 0x3c
    f264:	e7fa      	b.n	f25c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    f266:	4288      	cmp	r0, r1
    f268:	d300      	bcc.n	f26c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    f26a:	4608      	mov	r0, r1
    f26c:	1a80      	subs	r0, r0, r2
    f26e:	4770      	bx	lr
    f270:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f274:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f278:	4281      	cmp	r1, r0
    f27a:	d200      	bcs.n	f27e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    f27c:	4608      	mov	r0, r1
    f27e:	4770      	bx	lr
    f280:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    f284:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    f288:	4281      	cmp	r1, r0
    f28a:	d200      	bcs.n	f28e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    f28c:	4608      	mov	r0, r1
    f28e:	4770      	bx	lr
    f290:	2196      	movs	r1, #150	; 0x96
    f292:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    f296:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    f29a:	f000 b800 	b.w	f29e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    f29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f2a2:	460d      	mov	r5, r1
    f2a4:	4606      	mov	r6, r0
    f2a6:	4698      	mov	r8, r3
    f2a8:	4617      	mov	r7, r2
    f2aa:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    f2ac:	4611      	mov	r1, r2
    f2ae:	f7ff ffd1 	bl	f254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f2b2:	4604      	mov	r4, r0
    f2b4:	4639      	mov	r1, r7
    f2b6:	4630      	mov	r0, r6
    f2b8:	f7ff ffe2 	bl	f280 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f2bc:	42a0      	cmp	r0, r4
    f2be:	d200      	bcs.n	f2c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    f2c0:	4604      	mov	r4, r0
    f2c2:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    f2c4:	4641      	mov	r1, r8
    f2c6:	f7ff ffc5 	bl	f254 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f2ca:	4607      	mov	r7, r0
    f2cc:	4641      	mov	r1, r8
    f2ce:	4630      	mov	r0, r6
    f2d0:	f7ff ffce 	bl	f270 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f2d4:	42b8      	cmp	r0, r7
    f2d6:	d300      	bcc.n	f2da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    f2d8:	4638      	mov	r0, r7
    f2da:	4420      	add	r0, r4
    f2dc:	4428      	add	r0, r5
    f2de:	1d80      	adds	r0, r0, #6
    f2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2e4:	2801      	cmp	r0, #1
    f2e6:	d102      	bne.n	f2ee <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb2>
    f2e8:	7948      	ldrb	r0, [r1, #5]
    f2ea:	0980      	lsrs	r0, r0, #6
    f2ec:	d001      	beq.n	f2f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    f2ee:	2000      	movs	r0, #0
    f2f0:	4770      	bx	lr
    f2f2:	2001      	movs	r0, #1
    f2f4:	4770      	bx	lr
    f2f6:	2801      	cmp	r0, #1
    f2f8:	d106      	bne.n	f308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f2fa:	7948      	ldrb	r0, [r1, #5]
    f2fc:	2101      	movs	r1, #1
    f2fe:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f302:	d101      	bne.n	f308 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xcc>
    f304:	2001      	movs	r0, #1
    f306:	4770      	bx	lr
    f308:	2000      	movs	r0, #0
    f30a:	4770      	bx	lr
    f30c:	b118      	cbz	r0, f316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    f30e:	2802      	cmp	r0, #2
    f310:	d001      	beq.n	f316 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xda>
    f312:	2001      	movs	r0, #1
    f314:	4770      	bx	lr
    f316:	2000      	movs	r0, #0
    f318:	4770      	bx	lr
    f31a:	2802      	cmp	r0, #2
    f31c:	d003      	beq.n	f326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    f31e:	2803      	cmp	r0, #3
    f320:	d001      	beq.n	f326 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xea>
    f322:	2000      	movs	r0, #0
    f324:	4770      	bx	lr
    f326:	2001      	movs	r0, #1
    f328:	4770      	bx	lr

0000f32a <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    f32a:	f7f9 b87d 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    f32e:	b510      	push	{r4, lr}
    f330:	f7f8 fec8 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f334:	f7f8 fa88 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f338:	f7fd f8c6 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f33c:	2005      	movs	r0, #5
    f33e:	bd10      	pop	{r4, pc}
    f340:	b510      	push	{r4, lr}
    f342:	f7f8 febf 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f346:	f7fd f8bf 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f34a:	2005      	movs	r0, #5
    f34c:	bd10      	pop	{r4, pc}
    f34e:	b530      	push	{r4, r5, lr}
    f350:	b089      	sub	sp, #36	; 0x24
    f352:	4605      	mov	r5, r0
    f354:	f7f8 feb6 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f358:	7828      	ldrb	r0, [r5, #0]
    f35a:	4669      	mov	r1, sp
    f35c:	f000 040f 	and.w	r4, r0, #15
    f360:	4622      	mov	r2, r4
    f362:	4628      	mov	r0, r5
    f364:	f7f9 fa1e 	bl	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f368:	2200      	movs	r2, #0
    f36a:	4621      	mov	r1, r4
    f36c:	4668      	mov	r0, sp
    f36e:	f7f8 faeb 	bl	7948 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    f372:	4602      	mov	r2, r0
    f374:	4621      	mov	r1, r4
    f376:	4668      	mov	r0, sp
    f378:	f7f8 fe22 	bl	7fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7b4>
    f37c:	4604      	mov	r4, r0
    f37e:	f7f8 fa63 	bl	7848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f382:	b009      	add	sp, #36	; 0x24
    f384:	4620      	mov	r0, r4
    f386:	bd30      	pop	{r4, r5, pc}
    f388:	f240 21c5 	movw	r1, #709	; 0x2c5
    f38c:	2032      	movs	r0, #50	; 0x32
    f38e:	f7f5 fcc3 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f392:	b510      	push	{r4, lr}
    f394:	f7f8 fe96 	bl	80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>
    f398:	f7fd f896 	bl	c4c8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f3a0:	f7f9 b85a 	b.w	8458 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x458>
    f3a4:	f7f9 b840 	b.w	8428 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x428>
    f3a8:	f7ff b8b6 	b.w	e518 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000f3ac <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    f3ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3ae:	b08b      	sub	sp, #44	; 0x2c
    f3b0:	4607      	mov	r7, r0
    f3b2:	f7f6 f8e3 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f3b6:	4604      	mov	r4, r0
    f3b8:	f7fe ff6b 	bl	e292 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f3bc:	0005      	movs	r5, r0
    f3be:	d00c      	beq.n	f3da <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    f3c0:	4620      	mov	r0, r4
    f3c2:	4629      	mov	r1, r5
    f3c4:	466a      	mov	r2, sp
    f3c6:	f7fe ff95 	bl	e2f4 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f3ca:	4606      	mov	r6, r0
    f3cc:	f7f6 f8d0 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f3d0:	42b0      	cmp	r0, r6
    f3d2:	d005      	beq.n	f3e0 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    f3d4:	f44f 7197 	mov.w	r1, #302	; 0x12e
    f3d8:	e033      	b.n	f442 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    f3da:	2000      	movs	r0, #0
    f3dc:	b00b      	add	sp, #44	; 0x2c
    f3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3e0:	a901      	add	r1, sp, #4
    f3e2:	9800      	ldr	r0, [sp, #0]
    f3e4:	f000 f8b4 	bl	f550 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    f3e8:	1d3e      	adds	r6, r7, #4
    f3ea:	4628      	mov	r0, r5
    f3ec:	f7fe fee5 	bl	e1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f3f0:	4605      	mov	r5, r0
    f3f2:	4601      	mov	r1, r0
    f3f4:	221c      	movs	r2, #28
    f3f6:	4630      	mov	r0, r6
    f3f8:	f7fe f884 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f3fc:	7aa8      	ldrb	r0, [r5, #10]
    f3fe:	f04f 0500 	mov.w	r5, #0
    f402:	06c1      	lsls	r1, r0, #27
    f404:	d50d      	bpl.n	f422 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f406:	0740      	lsls	r0, r0, #29
    f408:	d40a      	bmi.n	f420 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    f40a:	f89d 2014 	ldrb.w	r2, [sp, #20]
    f40e:	f106 001c 	add.w	r0, r6, #28
    f412:	9904      	ldr	r1, [sp, #16]
    f414:	f7fe f876 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f418:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f41c:	7230      	strb	r0, [r6, #8]
    f41e:	e000      	b.n	f422 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f420:	7235      	strb	r5, [r6, #8]
    f422:	707d      	strb	r5, [r7, #1]
    f424:	2005      	movs	r0, #5
    f426:	7038      	strb	r0, [r7, #0]
    f428:	4620      	mov	r0, r4
    f42a:	f7fe fee1 	bl	e1f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f42e:	b130      	cbz	r0, f43e <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    f430:	2100      	movs	r1, #0
    f432:	4620      	mov	r0, r4
    f434:	460a      	mov	r2, r1
    f436:	f7ff f83b 	bl	e4b0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f43a:	2001      	movs	r0, #1
    f43c:	e7ce      	b.n	f3dc <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    f43e:	f240 1171 	movw	r1, #369	; 0x171
    f442:	2033      	movs	r0, #51	; 0x33
    f444:	f7f5 fc68 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    f448:	b510      	push	{r4, lr}
    f44a:	f7f6 f897 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f44e:	f000 f874 	bl	f53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f452:	4604      	mov	r4, r0
    f454:	221c      	movs	r2, #28
    f456:	2100      	movs	r1, #0
    f458:	f7fe f8ce 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f45c:	207f      	movs	r0, #127	; 0x7f
    f45e:	76a0      	strb	r0, [r4, #26]
    f460:	21ff      	movs	r1, #255	; 0xff
    f462:	73a1      	strb	r1, [r4, #14]
    f464:	7061      	strb	r1, [r4, #1]
    f466:	74e1      	strb	r1, [r4, #19]
    f468:	7aa0      	ldrb	r0, [r4, #10]
    f46a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    f46e:	3020      	adds	r0, #32
    f470:	72a0      	strb	r0, [r4, #10]
    f472:	bd10      	pop	{r4, pc}

0000f474 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    f474:	f7ff bfe8 	b.w	f448 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000f478 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f47c:	461e      	mov	r6, r3
    f47e:	4617      	mov	r7, r2
    f480:	4689      	mov	r9, r1
    f482:	4682      	mov	sl, r0
    f484:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f488:	f7f6 f878 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f48c:	4604      	mov	r4, r0
    f48e:	f7fe fe96 	bl	e1be <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f492:	2801      	cmp	r0, #1
    f494:	d034      	beq.n	f500 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    f496:	4620      	mov	r0, r4
    f498:	f000 f84f 	bl	f53a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f49c:	4604      	mov	r4, r0
    f49e:	221c      	movs	r2, #28
    f4a0:	2100      	movs	r1, #0
    f4a2:	f7fe f8a9 	bl	d5f8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f4a6:	2501      	movs	r5, #1
    f4a8:	7025      	strb	r5, [r4, #0]
    f4aa:	1c63      	adds	r3, r4, #1
    f4ac:	1ca2      	adds	r2, r4, #2
    f4ae:	4649      	mov	r1, r9
    f4b0:	4650      	mov	r0, sl
    f4b2:	f000 f827 	bl	f504 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    f4b6:	f884 8009 	strb.w	r8, [r4, #9]
    f4ba:	7aa0      	ldrb	r0, [r4, #10]
    f4bc:	21ff      	movs	r1, #255	; 0xff
    f4be:	f367 0000 	bfi	r0, r7, #0, #1
    f4c2:	f040 001a 	orr.w	r0, r0, #26
    f4c6:	72a0      	strb	r0, [r4, #10]
    f4c8:	7325      	strb	r5, [r4, #12]
    f4ca:	2000      	movs	r0, #0
    f4cc:	7360      	strb	r0, [r4, #13]
    f4ce:	73a1      	strb	r1, [r4, #14]
    f4d0:	74e1      	strb	r1, [r4, #19]
    f4d2:	207f      	movs	r0, #127	; 0x7f
    f4d4:	76a0      	strb	r0, [r4, #26]
    f4d6:	76e6      	strb	r6, [r4, #27]
    f4d8:	f7f6 f84a 	bl	5570 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f4dc:	4604      	mov	r4, r0
    f4de:	f7f6 f84d 	bl	557c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f4e2:	2201      	movs	r2, #1
    f4e4:	4621      	mov	r1, r4
    f4e6:	f000 f831 	bl	f54c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    f4ea:	b120      	cbz	r0, f4f6 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    f4ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f4f0:	2005      	movs	r0, #5
    f4f2:	f7f9 bb3f 	b.w	8b74 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    f4f6:	f240 21c7 	movw	r1, #711	; 0x2c7
    f4fa:	2033      	movs	r0, #51	; 0x33
    f4fc:	f7f5 fc0c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f504:	b510      	push	{r4, lr}
    f506:	461c      	mov	r4, r3
    f508:	460b      	mov	r3, r1
    f50a:	29ff      	cmp	r1, #255	; 0xff
    f50c:	d00d      	beq.n	f52a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    f50e:	4621      	mov	r1, r4
    f510:	4618      	mov	r0, r3
    f512:	f7f7 f8cd 	bl	66b0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f516:	b120      	cbz	r0, f522 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    f518:	7820      	ldrb	r0, [r4, #0]
    f51a:	f040 0002 	orr.w	r0, r0, #2
    f51e:	7020      	strb	r0, [r4, #0]
    f520:	bd10      	pop	{r4, pc}
    f522:	2150      	movs	r1, #80	; 0x50
    f524:	2033      	movs	r0, #51	; 0x33
    f526:	f7f5 fbf7 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f52a:	7c41      	ldrb	r1, [r0, #17]
    f52c:	7021      	strb	r1, [r4, #0]
    f52e:	6840      	ldr	r0, [r0, #4]
    f530:	6801      	ldr	r1, [r0, #0]
    f532:	6011      	str	r1, [r2, #0]
    f534:	8880      	ldrh	r0, [r0, #4]
    f536:	8090      	strh	r0, [r2, #4]
    f538:	bd10      	pop	{r4, pc}
    f53a:	b51c      	push	{r2, r3, r4, lr}
    f53c:	4669      	mov	r1, sp
    f53e:	aa01      	add	r2, sp, #4
    f540:	f7fe feca 	bl	e2d8 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f544:	9800      	ldr	r0, [sp, #0]
    f546:	f7fe fe38 	bl	e1ba <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f54a:	bd1c      	pop	{r2, r3, r4, pc}
    f54c:	f7fe bddd 	b.w	e10a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f550 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f550:	7802      	ldrb	r2, [r0, #0]
    f552:	f002 020f 	and.w	r2, r2, #15
    f556:	f7f9 b925 	b.w	87a4 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f55a:	2800      	cmp	r0, #0
    f55c:	db04      	blt.n	f568 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    f55e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f562:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    f566:	e005      	b.n	f574 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    f568:	f000 000f 	and.w	r0, r0, #15
    f56c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f570:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    f574:	0940      	lsrs	r0, r0, #5
    f576:	4770      	bx	lr

0000f578 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI>:
    f578:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    f57c:	4770      	bx	lr
    f57e:	6940      	ldr	r0, [r0, #20]
    f580:	2800      	cmp	r0, #0
    f582:	d000      	beq.n	f586 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xe>
    f584:	2001      	movs	r0, #1
    f586:	4770      	bx	lr
    f588:	b510      	push	{r4, lr}
    f58a:	2808      	cmp	r0, #8
    f58c:	d00a      	beq.n	f5a4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x2c>
    f58e:	2804      	cmp	r0, #4
    f590:	d00a      	beq.n	f5a8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x30>
    f592:	2802      	cmp	r0, #2
    f594:	d00a      	beq.n	f5ac <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x34>
    f596:	2108      	movs	r1, #8
    f598:	2801      	cmp	r0, #1
    f59a:	d009      	beq.n	f5b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x38>
    f59c:	21d9      	movs	r1, #217	; 0xd9
    f59e:	2005      	movs	r0, #5
    f5a0:	f7f5 fbba 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5a4:	2140      	movs	r1, #64	; 0x40
    f5a6:	e7f7      	b.n	f598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5a8:	2110      	movs	r1, #16
    f5aa:	e7f5      	b.n	f598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5ac:	2104      	movs	r1, #4
    f5ae:	e7f3      	b.n	f598 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x20>
    f5b0:	222a      	movs	r2, #42	; 0x2a
    f5b2:	2028      	movs	r0, #40	; 0x28
    f5b4:	fb11 0002 	smlabb	r0, r1, r2, r0
    f5b8:	b280      	uxth	r0, r0
    f5ba:	bd10      	pop	{r4, pc}
    f5bc:	2000      	movs	r0, #0
    f5be:	4770      	bx	lr
    f5c0:	b570      	push	{r4, r5, r6, lr}
    f5c2:	4604      	mov	r4, r0
    f5c4:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f5c8:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f5cc:	f000 f80c 	bl	f5e8 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x70>
    f5d0:	4605      	mov	r5, r0
    f5d2:	f000 f857 	bl	f684 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x10c>
    f5d6:	4601      	mov	r1, r0
    f5d8:	462a      	mov	r2, r5
    f5da:	4620      	mov	r0, r4
    f5dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f5e0:	f7ff bded 	b.w	f1be <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f5e4:	f7f3 b93a 	b.w	285c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f5e8:	b510      	push	{r4, lr}
    f5ea:	4604      	mov	r4, r0
    f5ec:	4608      	mov	r0, r1
    f5ee:	f001 f8f1 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f5f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f5f6:	2c02      	cmp	r4, #2
    f5f8:	d00a      	beq.n	f610 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x98>
    f5fa:	f640 0234 	movw	r2, #2100	; 0x834
    f5fe:	4410      	add	r0, r2
    f600:	f24a 5295 	movw	r2, #42389	; 0xa595
    f604:	4410      	add	r0, r2
    f606:	fbb0 f0f1 	udiv	r0, r0, r1
    f60a:	f500 709b 	add.w	r0, r0, #310	; 0x136
    f60e:	bd10      	pop	{r4, pc}
    f610:	460a      	mov	r2, r1
    f612:	e7f4      	b.n	f5fe <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x86>
    f614:	b510      	push	{r4, lr}
    f616:	4604      	mov	r4, r0
    f618:	2000      	movs	r0, #0
    f61a:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    f61e:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f622:	f7f3 fd67 	bl	30f4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f626:	b140      	cbz	r0, f63a <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xc2>
    f628:	2020      	movs	r0, #32
    f62a:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    f62e:	f504 7084 	add.w	r0, r4, #264	; 0x108
    f632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f636:	f7fb bf45 	b.w	b4c4 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f63a:	f240 5139 	movw	r1, #1337	; 0x539
    f63e:	2035      	movs	r0, #53	; 0x35
    f640:	f7f5 fb6a 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f646:	4613      	mov	r3, r2
    f648:	460a      	mov	r2, r1
    f64a:	4604      	mov	r4, r0
    f64c:	4601      	mov	r1, r0
    f64e:	4668      	mov	r0, sp
    f650:	f7f9 fd52 	bl	90f8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x584>
    f654:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f658:	4669      	mov	r1, sp
    f65a:	f7ff ffc3 	bl	f5e4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x6c>
    f65e:	2800      	cmp	r0, #0
    f660:	d104      	bne.n	f66c <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf4>
    f662:	f640 2139 	movw	r1, #2617	; 0xa39
    f666:	2035      	movs	r0, #53	; 0x35
    f668:	f7f5 fb56 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f66c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    f66e:	b510      	push	{r4, lr}
    f670:	245b      	movs	r4, #91	; 0x5b
    f672:	f001 f86d 	bl	10750 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f676:	b910      	cbnz	r0, f67e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x106>
    f678:	f001 f860 	bl	1073c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f67c:	b100      	cbz	r0, f680 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x108>
    f67e:	2462      	movs	r4, #98	; 0x62
    f680:	4620      	mov	r0, r4
    f682:	bd10      	pop	{r4, pc}
    f684:	b510      	push	{r4, lr}
    f686:	f7ff fff2 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    f68a:	3065      	adds	r0, #101	; 0x65
    f68c:	b280      	uxth	r0, r0
    f68e:	bd10      	pop	{r4, pc}
    f690:	b510      	push	{r4, lr}
    f692:	f7ff ffec 	bl	f66e <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0xf6>
    f696:	30fb      	adds	r0, #251	; 0xfb
    f698:	b280      	uxth	r0, r0
    f69a:	bd10      	pop	{r4, pc}
    f69c:	b1d0      	cbz	r0, f6d4 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x15c>
    f69e:	2908      	cmp	r1, #8
    f6a0:	d011      	beq.n	f6c6 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x14e>
    f6a2:	2904      	cmp	r1, #4
    f6a4:	d00b      	beq.n	f6be <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x146>
    f6a6:	2000      	movs	r0, #0
    f6a8:	2902      	cmp	r1, #2
    f6aa:	d010      	beq.n	f6ce <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x156>
    f6ac:	2108      	movs	r1, #8
    f6ae:	3028      	adds	r0, #40	; 0x28
    f6b0:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    f6b4:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    f6b8:	4408      	add	r0, r1
    f6ba:	3098      	adds	r0, #152	; 0x98
    f6bc:	4770      	bx	lr
    f6be:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    f6c2:	2110      	movs	r1, #16
    f6c4:	e7f4      	b.n	f6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6c6:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f6ca:	2140      	movs	r1, #64	; 0x40
    f6cc:	e7f0      	b.n	f6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6ce:	2104      	movs	r1, #4
    f6d0:	3018      	adds	r0, #24
    f6d2:	e7ed      	b.n	f6b0 <sym_BVZDVUWU4PRWNYVGSIZ45JXQOM3YRJQGWSNG3GI+0x138>
    f6d4:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    f6d8:	4770      	bx	lr
    f6da:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f6de:	f001 0307 	and.w	r3, r1, #7
    f6e2:	7802      	ldrb	r2, [r0, #0]
    f6e4:	2101      	movs	r1, #1
    f6e6:	4099      	lsls	r1, r3
    f6e8:	438a      	bics	r2, r1
    f6ea:	7002      	strb	r2, [r0, #0]
    f6ec:	4770      	bx	lr

0000f6ee <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    f6ee:	f7f5 be9d 	b.w	542c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000f6f2 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    f6f2:	2000      	movs	r0, #0
    f6f4:	4770      	bx	lr

0000f6f6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    f6f6:	b538      	push	{r3, r4, r5, lr}
    f6f8:	460d      	mov	r5, r1
    f6fa:	4604      	mov	r4, r0
    f6fc:	e050      	b.n	f7a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    f6fe:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    f702:	1c40      	adds	r0, r0, #1
    f704:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    f708:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    f70c:	1c40      	adds	r0, r0, #1
    f70e:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    f712:	4620      	mov	r0, r4
    f714:	f000 f8e1 	bl	f8da <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    f718:	b198      	cbz	r0, f742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f71a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    f71e:	1c40      	adds	r0, r0, #1
    f720:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f724:	4620      	mov	r0, r4
    f726:	f000 f86e 	bl	f806 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    f72a:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    f72e:	4288      	cmp	r0, r1
    f730:	d307      	bcc.n	f742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    f732:	2000      	movs	r0, #0
    f734:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    f738:	2001      	movs	r0, #1
    f73a:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    f73e:	f7fb ff1f 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f742:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    f746:	b120      	cbz	r0, f752 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    f748:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    f74c:	1c40      	adds	r0, r0, #1
    f74e:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    f752:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    f756:	b120      	cbz	r0, f762 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    f758:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    f75c:	1c40      	adds	r0, r0, #1
    f75e:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    f762:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    f766:	f88d 0000 	strb.w	r0, [sp]
    f76a:	9800      	ldr	r0, [sp, #0]
    f76c:	9000      	str	r0, [sp, #0]
    f76e:	f89d 0000 	ldrb.w	r0, [sp]
    f772:	b940      	cbnz	r0, f786 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    f774:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    f778:	2300      	movs	r3, #0
    f77a:	2101      	movs	r1, #1
    f77c:	f104 0078 	add.w	r0, r4, #120	; 0x78
    f780:	f7ff f904 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f784:	b120      	cbz	r0, f790 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    f786:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    f78a:	1c40      	adds	r0, r0, #1
    f78c:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    f790:	4620      	mov	r0, r4
    f792:	f000 f847 	bl	f824 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    f796:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f79a:	1c40      	adds	r0, r0, #1
    f79c:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    f7a0:	1e6d      	subs	r5, r5, #1
    f7a2:	b2ad      	uxth	r5, r5
    f7a4:	d2ab      	bcs.n	f6fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    f7a6:	bd38      	pop	{r3, r4, r5, pc}

0000f7a8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    f7a8:	b510      	push	{r4, lr}
    f7aa:	f7fa fdf7 	bl	a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    f7ae:	b128      	cbz	r0, f7bc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    f7b0:	2000      	movs	r0, #0
    f7b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7b6:	4601      	mov	r1, r0
    f7b8:	f7fa bd9c 	b.w	a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    f7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f7c0:	f7f6 bad4 	b.w	5d6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    f7c4:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    f7c8:	28fe      	cmp	r0, #254	; 0xfe
    f7ca:	d001      	beq.n	f7d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    f7cc:	2001      	movs	r0, #1
    f7ce:	4770      	bx	lr
    f7d0:	2000      	movs	r0, #0
    f7d2:	4770      	bx	lr
    f7d4:	b510      	push	{r4, lr}
    f7d6:	2801      	cmp	r0, #1
    f7d8:	d006      	beq.n	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f7da:	2802      	cmp	r0, #2
    f7dc:	d004      	beq.n	f7e8 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    f7de:	f240 2163 	movw	r1, #611	; 0x263
    f7e2:	2006      	movs	r0, #6
    f7e4:	f7f5 fa98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7e8:	bd10      	pop	{r4, pc}
    f7ea:	2801      	cmp	r0, #1
    f7ec:	d002      	beq.n	f7f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    f7ee:	2802      	cmp	r0, #2
    f7f0:	d105      	bne.n	f7fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f7f2:	e002      	b.n	f7fa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    f7f4:	2901      	cmp	r1, #1
    f7f6:	d004      	beq.n	f802 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f7f8:	e001      	b.n	f7fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    f7fa:	2902      	cmp	r1, #2
    f7fc:	d001      	beq.n	f802 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    f7fe:	2000      	movs	r0, #0
    f800:	4770      	bx	lr
    f802:	2001      	movs	r0, #1
    f804:	4770      	bx	lr
    f806:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    f80a:	428a      	cmp	r2, r1
    f80c:	d301      	bcc.n	f812 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    f80e:	1a51      	subs	r1, r2, r1
    f810:	e000      	b.n	f814 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    f812:	2100      	movs	r1, #0
    f814:	8a82      	ldrh	r2, [r0, #20]
    f816:	1d52      	adds	r2, r2, #5
    f818:	428a      	cmp	r2, r1
    f81a:	d302      	bcc.n	f822 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    f81c:	2101      	movs	r1, #1
    f81e:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    f822:	4770      	bx	lr
    f824:	b570      	push	{r4, r5, r6, lr}
    f826:	4604      	mov	r4, r0
    f828:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    f82c:	2500      	movs	r5, #0
    f82e:	2601      	movs	r6, #1
    f830:	280c      	cmp	r0, #12
    f832:	d02c      	beq.n	f88e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    f834:	280d      	cmp	r0, #13
    f836:	d129      	bne.n	f88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f838:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f83c:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    f840:	1c40      	adds	r0, r0, #1
    f842:	4288      	cmp	r0, r1
    f844:	d122      	bne.n	f88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f846:	8820      	ldrh	r0, [r4, #0]
    f848:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    f84c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    f850:	f7ff f883 	bl	e95a <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    f854:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    f858:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    f85c:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    f860:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    f864:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    f868:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    f86c:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    f870:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    f874:	2102      	movs	r1, #2
    f876:	4620      	mov	r0, r4
    f878:	f7f7 f94e 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f87c:	f7fb fe80 	bl	b580 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    f880:	2103      	movs	r1, #3
    f882:	4620      	mov	r0, r4
    f884:	f7f9 f90c 	bl	8aa0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    f888:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f88c:	bd70      	pop	{r4, r5, r6, pc}
    f88e:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    f892:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    f896:	1c40      	adds	r0, r0, #1
    f898:	4288      	cmp	r0, r1
    f89a:	d1f7      	bne.n	f88c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    f89c:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f8a0:	f8d0 1001 	ldr.w	r1, [r0, #1]
    f8a4:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    f8a8:	7940      	ldrb	r0, [r0, #5]
    f8aa:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    f8ae:	2103      	movs	r1, #3
    f8b0:	4620      	mov	r0, r4
    f8b2:	f7f7 f931 	bl	6b18 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    f8b6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    f8ba:	7800      	ldrb	r0, [r0, #0]
    f8bc:	b140      	cbz	r0, f8d0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    f8be:	2101      	movs	r1, #1
    f8c0:	20fe      	movs	r0, #254	; 0xfe
    f8c2:	f7fb fd87 	bl	b3d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    f8c6:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    f8ca:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    f8ce:	bd70      	pop	{r4, r5, r6, pc}
    f8d0:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    f8d4:	2036      	movs	r0, #54	; 0x36
    f8d6:	f7f5 fa1f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8da:	b510      	push	{r4, lr}
    f8dc:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    f8e0:	b941      	cbnz	r1, f8f4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    f8e2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    f8e6:	2300      	movs	r3, #0
    f8e8:	2106      	movs	r1, #6
    f8ea:	3078      	adds	r0, #120	; 0x78
    f8ec:	f7ff f84e 	bl	e98c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f8f0:	2800      	cmp	r0, #0
    f8f2:	d000      	beq.n	f8f6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    f8f4:	2001      	movs	r0, #1
    f8f6:	bd10      	pop	{r4, pc}

0000f8f8 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f8f8:	b510      	push	{r4, lr}
    f8fa:	460c      	mov	r4, r1
    f8fc:	4601      	mov	r1, r0
    f8fe:	4610      	mov	r0, r2
    f900:	f7f2 fe6e 	bl	25e0 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    f904:	2800      	cmp	r0, #0
    f906:	da06      	bge.n	f916 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    f908:	1a21      	subs	r1, r4, r0
    f90a:	1e49      	subs	r1, r1, #1
    f90c:	fbb1 f1f4 	udiv	r1, r1, r4
    f910:	fb01 0004 	mla	r0, r1, r4, r0
    f914:	bd10      	pop	{r4, pc}
    f916:	fb90 f1f4 	sdiv	r1, r0, r4
    f91a:	fb01 0014 	mls	r0, r1, r4, r0
    f91e:	bd10      	pop	{r4, pc}
    f920:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f924:	f001 0107 	and.w	r1, r1, #7
    f928:	7800      	ldrb	r0, [r0, #0]
    f92a:	2201      	movs	r2, #1
    f92c:	408a      	lsls	r2, r1
    f92e:	4010      	ands	r0, r2
    f930:	40c8      	lsrs	r0, r1
    f932:	4770      	bx	lr
    f934:	b118      	cbz	r0, f93e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f936:	2802      	cmp	r0, #2
    f938:	d001      	beq.n	f93e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f93a:	2001      	movs	r0, #1
    f93c:	4770      	bx	lr
    f93e:	2000      	movs	r0, #0
    f940:	4770      	bx	lr

0000f942 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f942:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f944:	7881      	ldrb	r1, [r0, #2]
    f946:	4604      	mov	r4, r0
    f948:	291a      	cmp	r1, #26
    f94a:	d025      	beq.n	f998 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f94c:	dc0e      	bgt.n	f96c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    f94e:	2916      	cmp	r1, #22
    f950:	d22d      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f952:	e8df f001 	tbb	[pc, r1]
    f956:	2c2c      	.short	0x2c2c
    f958:	212c2c2c 	.word	0x212c2c2c
    f95c:	2c2c2c2c 	.word	0x2c2c2c2c
    f960:	2c2c2c2c 	.word	0x2c2c2c2c
    f964:	2c2c2c2c 	.word	0x2c2c2c2c
    f968:	2121212c 	.word	0x2121212c
    f96c:	292a      	cmp	r1, #42	; 0x2a
    f96e:	d01e      	beq.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f970:	dc0b      	bgt.n	f98a <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    f972:	f1a1 011e 	sub.w	r1, r1, #30
    f976:	290c      	cmp	r1, #12
    f978:	d219      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f97a:	e8df f001 	tbb	[pc, r1]
    f97e:	1818      	.short	0x1818
    f980:	18181818 	.word	0x18181818
    f984:	18181818 	.word	0x18181818
    f988:	0d18      	.short	0x0d18
    f98a:	393a      	subs	r1, #58	; 0x3a
    f98c:	2904      	cmp	r1, #4
    f98e:	d20e      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f990:	e8df f001 	tbb	[pc, r1]
    f994:	020d020d 	.word	0x020d020d
    f998:	8820      	ldrh	r0, [r4, #0]
    f99a:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f99e:	d206      	bcs.n	f9ae <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    f9a0:	2701      	movs	r7, #1
    f9a2:	4669      	mov	r1, sp
    f9a4:	f7fe ffc9 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9a8:	b118      	cbz	r0, f9b2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    f9aa:	2002      	movs	r0, #2
    f9ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9ae:	2012      	movs	r0, #18
    f9b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9b2:	9d01      	ldr	r5, [sp, #4]
    f9b4:	4668      	mov	r0, sp
    f9b6:	462e      	mov	r6, r5
    f9b8:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    f9bc:	f206 163d 	addw	r6, r6, #317	; 0x13d
    f9c0:	f000 fd5e 	bl	10480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    f9c4:	b138      	cbz	r0, f9d6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    f9c6:	7828      	ldrb	r0, [r5, #0]
    f9c8:	f88d 0008 	strb.w	r0, [sp, #8]
    f9cc:	9802      	ldr	r0, [sp, #8]
    f9ce:	9002      	str	r0, [sp, #8]
    f9d0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f9d4:	b108      	cbz	r0, f9da <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    f9d6:	200c      	movs	r0, #12
    f9d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f9da:	702f      	strb	r7, [r5, #0]
    f9dc:	78a0      	ldrb	r0, [r4, #2]
    f9de:	7030      	strb	r0, [r6, #0]
    f9e0:	2000      	movs	r0, #0
    f9e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000f9e4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    f9e4:	b510      	push	{r4, lr}
    f9e6:	4604      	mov	r4, r0
    f9e8:	7800      	ldrb	r0, [r0, #0]
    f9ea:	b118      	cbz	r0, f9f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f9ec:	2801      	cmp	r0, #1
    f9ee:	d001      	beq.n	f9f4 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    f9f0:	2012      	movs	r0, #18
    f9f2:	bd10      	pop	{r4, pc}
    f9f4:	f000 fcf8 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    f9f8:	b120      	cbz	r0, fa04 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    f9fa:	f7f6 fe53 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f9fe:	b108      	cbz	r0, fa04 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fa00:	200c      	movs	r0, #12
    fa02:	bd10      	pop	{r4, pc}
    fa04:	7820      	ldrb	r0, [r4, #0]
    fa06:	f7ff ff95 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fa0a:	1de2      	adds	r2, r4, #7
    fa0c:	f104 0317 	add.w	r3, r4, #23
    fa10:	1c61      	adds	r1, r4, #1
    fa12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa16:	f7f6 be77 	b.w	6708 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fa1a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fa1a:	b510      	push	{r4, lr}
    fa1c:	4604      	mov	r4, r0
    fa1e:	f000 fde6 	bl	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fa22:	b108      	cbz	r0, fa28 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}
    fa28:	7820      	ldrb	r0, [r4, #0]
    fa2a:	b118      	cbz	r0, fa34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa2c:	2801      	cmp	r0, #1
    fa2e:	d001      	beq.n	fa34 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa30:	2012      	movs	r0, #18
    fa32:	bd10      	pop	{r4, pc}
    fa34:	f7ff ff7e 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fa38:	1c61      	adds	r1, r4, #1
    fa3a:	f7f6 ff09 	bl	6850 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fa3e:	b108      	cbz	r0, fa44 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fa40:	2000      	movs	r0, #0
    fa42:	bd10      	pop	{r4, pc}
    fa44:	2007      	movs	r0, #7
    fa46:	bd10      	pop	{r4, pc}

0000fa48 <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fa48:	b510      	push	{r4, lr}
    fa4a:	f000 fccd 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fa4e:	b120      	cbz	r0, fa5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa50:	f7f6 fe28 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fa54:	b108      	cbz	r0, fa5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fa56:	200c      	movs	r0, #12
    fa58:	bd10      	pop	{r4, pc}
    fa5a:	f7f6 fe9b 	bl	6794 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fa5e:	2000      	movs	r0, #0
    fa60:	bd10      	pop	{r4, pc}

0000fa62 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa62:	b510      	push	{r4, lr}
    fa64:	f000 fdc3 	bl	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fa68:	b108      	cbz	r0, fa6e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa6a:	200c      	movs	r0, #12
    fa6c:	bd10      	pop	{r4, pc}
    fa6e:	f7f6 ff17 	bl	68a0 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fa72:	2000      	movs	r0, #0
    fa74:	bd10      	pop	{r4, pc}

0000fa76 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fa76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa78:	4605      	mov	r5, r0
    fa7a:	f000 fad2 	bl	10022 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d112      	bne.n	faa8 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    fa82:	8828      	ldrh	r0, [r5, #0]
    fa84:	2100      	movs	r1, #0
    fa86:	f7fe fdda 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa8a:	0004      	movs	r4, r0
    fa8c:	d00d      	beq.n	faaa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fa8e:	f000 fcfa 	bl	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    fa92:	b150      	cbz	r0, faaa <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fa94:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fa98:	f88d 0000 	strb.w	r0, [sp]
    fa9c:	9800      	ldr	r0, [sp, #0]
    fa9e:	9000      	str	r0, [sp, #0]
    faa0:	f89d 0000 	ldrb.w	r0, [sp]
    faa4:	b118      	cbz	r0, faae <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    faa6:	203a      	movs	r0, #58	; 0x3a
    faa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faaa:	2002      	movs	r0, #2
    faac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faae:	88a8      	ldrh	r0, [r5, #4]
    fab0:	f7fe ff4f 	bl	e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fab4:	4606      	mov	r6, r0
    fab6:	4601      	mov	r1, r0
    fab8:	2008      	movs	r0, #8
    faba:	f7ff f8e5 	bl	ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fabe:	4601      	mov	r1, r0
    fac0:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    fac4:	4281      	cmp	r1, r0
    fac6:	d301      	bcc.n	facc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    fac8:	42b0      	cmp	r0, r6
    faca:	d301      	bcc.n	fad0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    facc:	2012      	movs	r0, #18
    face:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fad0:	4631      	mov	r1, r6
    fad2:	2005      	movs	r0, #5
    fad4:	f7ff f8d8 	bl	ec88 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fad8:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    fadc:	2000      	movs	r0, #0
    fade:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    fae2:	88e8      	ldrh	r0, [r5, #6]
    fae4:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    fae8:	8928      	ldrh	r0, [r5, #8]
    faea:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    faee:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    faf2:	2001      	movs	r0, #1
    faf4:	7020      	strb	r0, [r4, #0]
    faf6:	2000      	movs	r0, #0
    faf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fafa <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fafa:	b510      	push	{r4, lr}
    fafc:	460b      	mov	r3, r1
    fafe:	2201      	movs	r2, #1
    fb00:	f100 0110 	add.w	r1, r0, #16
    fb04:	f7fe fec4 	bl	e890 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb08:	2000      	movs	r0, #0
    fb0a:	bd10      	pop	{r4, pc}

0000fb0c <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fb0c:	b510      	push	{r4, lr}
    fb0e:	2108      	movs	r1, #8
    fb10:	f7f5 f9ac 	bl	4e6c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fb14:	2000      	movs	r0, #0
    fb16:	bd10      	pop	{r4, pc}

0000fb18 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fb18:	b510      	push	{r4, lr}
    fb1a:	4604      	mov	r4, r0
    fb1c:	f000 fcaa 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fb20:	b140      	cbz	r0, fb34 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fb22:	20fb      	movs	r0, #251	; 0xfb
    fb24:	8020      	strh	r0, [r4, #0]
    fb26:	f640 0148 	movw	r1, #2120	; 0x848
    fb2a:	8061      	strh	r1, [r4, #2]
    fb2c:	80a0      	strh	r0, [r4, #4]
    fb2e:	80e1      	strh	r1, [r4, #6]
    fb30:	2000      	movs	r0, #0
    fb32:	bd10      	pop	{r4, pc}
    fb34:	2001      	movs	r0, #1
    fb36:	bd10      	pop	{r4, pc}

0000fb38 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fb38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fb3a:	460d      	mov	r5, r1
    fb3c:	4606      	mov	r6, r0
    fb3e:	f7fc fa41 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fb42:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fb46:	b300      	cbz	r0, fb8a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    fb48:	8830      	ldrh	r0, [r6, #0]
    fb4a:	4669      	mov	r1, sp
    fb4c:	f7fe fef5 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb50:	2800      	cmp	r0, #0
    fb52:	d119      	bne.n	fb88 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    fb54:	9c01      	ldr	r4, [sp, #4]
    fb56:	2700      	movs	r7, #0
    fb58:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    fb5c:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    fb60:	f000 fa94 	bl	1008c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fb64:	70a8      	strb	r0, [r5, #2]
    fb66:	7860      	ldrb	r0, [r4, #1]
    fb68:	f000 fa90 	bl	1008c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fb6c:	70e8      	strb	r0, [r5, #3]
    fb6e:	78a0      	ldrb	r0, [r4, #2]
    fb70:	f88d 0008 	strb.w	r0, [sp, #8]
    fb74:	9802      	ldr	r0, [sp, #8]
    fb76:	9002      	str	r0, [sp, #8]
    fb78:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fb7c:	3c6a      	subs	r4, #106	; 0x6a
    fb7e:	2800      	cmp	r0, #0
    fb80:	d1ea      	bne.n	fb58 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    fb82:	8830      	ldrh	r0, [r6, #0]
    fb84:	8028      	strh	r0, [r5, #0]
    fb86:	2000      	movs	r0, #0
    fb88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fb8a:	2001      	movs	r0, #1
    fb8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fb8e <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fb8e:	2108      	movs	r1, #8
    fb90:	7001      	strb	r1, [r0, #0]
    fb92:	2000      	movs	r0, #0
    fb94:	4770      	bx	lr

0000fb96 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fb96:	b510      	push	{r4, lr}
    fb98:	4604      	mov	r4, r0
    fb9a:	20d8      	movs	r0, #216	; 0xd8
    fb9c:	7020      	strb	r0, [r4, #0]
    fb9e:	f000 fc4a 	bl	10436 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    fba2:	7060      	strb	r0, [r4, #1]
    fba4:	2000      	movs	r0, #0
    fba6:	bd10      	pop	{r4, pc}

0000fba8 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fba8:	2108      	movs	r1, #8
    fbaa:	7001      	strb	r1, [r0, #0]
    fbac:	2000      	movs	r0, #0
    fbae:	4770      	bx	lr

0000fbb0 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    fbb0:	b510      	push	{r4, lr}
    fbb2:	4604      	mov	r4, r0
    fbb4:	7800      	ldrb	r0, [r0, #0]
    fbb6:	b108      	cbz	r0, fbbc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    fbb8:	2801      	cmp	r0, #1
    fbba:	d110      	bne.n	fbde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbbc:	f000 fc14 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fbc0:	b120      	cbz	r0, fbcc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fbc2:	f7f6 fd6f 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fbc6:	b108      	cbz	r0, fbcc <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    fbc8:	200c      	movs	r0, #12
    fbca:	bd10      	pop	{r4, pc}
    fbcc:	7820      	ldrb	r0, [r4, #0]
    fbce:	f7ff feb1 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fbd2:	1c61      	adds	r1, r4, #1
    fbd4:	f7fe fe42 	bl	e85c <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    fbd8:	b108      	cbz	r0, fbde <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    fbda:	2000      	movs	r0, #0
    fbdc:	bd10      	pop	{r4, pc}
    fbde:	2012      	movs	r0, #18
    fbe0:	bd10      	pop	{r4, pc}

0000fbe2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fbe2:	b510      	push	{r4, lr}
    fbe4:	4604      	mov	r4, r0
    fbe6:	f000 fd02 	bl	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fbea:	b108      	cbz	r0, fbf0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fbec:	200c      	movs	r0, #12
    fbee:	bd10      	pop	{r4, pc}
    fbf0:	7820      	ldrb	r0, [r4, #0]
    fbf2:	b108      	cbz	r0, fbf8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fbf4:	2801      	cmp	r0, #1
    fbf6:	d107      	bne.n	fc08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbf8:	f7ff fe9c 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fbfc:	1c61      	adds	r1, r4, #1
    fbfe:	f7fe fe3c 	bl	e87a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    fc02:	b108      	cbz	r0, fc08 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fc04:	2000      	movs	r0, #0
    fc06:	bd10      	pop	{r4, pc}
    fc08:	2012      	movs	r0, #18
    fc0a:	bd10      	pop	{r4, pc}

0000fc0c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    fc0c:	b510      	push	{r4, lr}
    fc0e:	4604      	mov	r4, r0
    fc10:	f000 fbea 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fc14:	b108      	cbz	r0, fc1a <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    fc16:	200c      	movs	r0, #12
    fc18:	bd10      	pop	{r4, pc}
    fc1a:	7820      	ldrb	r0, [r4, #0]
    fc1c:	f000 0001 	and.w	r0, r0, #1
    fc20:	f7f6 fd3a 	bl	6698 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    fc24:	2000      	movs	r0, #0
    fc26:	bd10      	pop	{r4, pc}

0000fc28 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fc28:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc2a:	460d      	mov	r5, r1
    fc2c:	4604      	mov	r4, r0
    fc2e:	f000 fc21 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fc32:	b130      	cbz	r0, fc42 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fc34:	88a2      	ldrh	r2, [r4, #4]
    fc36:	f244 2090 	movw	r0, #17040	; 0x4290
    fc3a:	4282      	cmp	r2, r0
    fc3c:	d903      	bls.n	fc46 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    fc3e:	2012      	movs	r0, #18
    fc40:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc42:	2001      	movs	r0, #1
    fc44:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc46:	f640 0048 	movw	r0, #2120	; 0x848
    fc4a:	4282      	cmp	r2, r0
    fc4c:	d300      	bcc.n	fc50 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    fc4e:	4602      	mov	r2, r0
    fc50:	8820      	ldrh	r0, [r4, #0]
    fc52:	f8ad 0000 	strh.w	r0, [sp]
    fc56:	8860      	ldrh	r0, [r4, #2]
    fc58:	f8ad 0002 	strh.w	r0, [sp, #2]
    fc5c:	f8ad 2004 	strh.w	r2, [sp, #4]
    fc60:	8860      	ldrh	r0, [r4, #2]
    fc62:	f8ad 0006 	strh.w	r0, [sp, #6]
    fc66:	f8ad 2008 	strh.w	r2, [sp, #8]
    fc6a:	8820      	ldrh	r0, [r4, #0]
    fc6c:	8028      	strh	r0, [r5, #0]
    fc6e:	4668      	mov	r0, sp
    fc70:	f000 fc28 	bl	104c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    fc74:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fc76 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    fc76:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fc78:	4604      	mov	r4, r0
    fc7a:	f7fe fe2f 	bl	e8dc <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    fc7e:	b160      	cbz	r0, fc9a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    fc80:	4620      	mov	r0, r4
    fc82:	f7f6 ffcf 	bl	6c24 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    fc86:	4669      	mov	r1, sp
    fc88:	2000      	movs	r0, #0
    fc8a:	f7fe fce1 	bl	e650 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fc8e:	b150      	cbz	r0, fca6 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    fc90:	f640 71f7 	movw	r1, #4087	; 0xff7
    fc94:	2039      	movs	r0, #57	; 0x39
    fc96:	f7f5 f83f 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc9a:	2012      	movs	r0, #18
    fc9c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fc9e:	9802      	ldr	r0, [sp, #8]
    fca0:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    fca4:	e000      	b.n	fca8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    fca6:	2401      	movs	r4, #1
    fca8:	4668      	mov	r0, sp
    fcaa:	f7f5 fa65 	bl	5178 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    fcae:	2800      	cmp	r0, #0
    fcb0:	d0f5      	beq.n	fc9e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    fcb2:	2000      	movs	r0, #0
    fcb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fcb6 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fcb6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fcb8:	4604      	mov	r4, r0
    fcba:	f7fc f983 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fcbe:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fcc2:	b1b0      	cbz	r0, fcf2 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    fcc4:	f10d 0007 	add.w	r0, sp, #7
    fcc8:	9000      	str	r0, [sp, #0]
    fcca:	7922      	ldrb	r2, [r4, #4]
    fccc:	78e1      	ldrb	r1, [r4, #3]
    fcce:	78a0      	ldrb	r0, [r4, #2]
    fcd0:	f10d 0306 	add.w	r3, sp, #6
    fcd4:	f000 fc74 	bl	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    fcd8:	2800      	cmp	r0, #0
    fcda:	d109      	bne.n	fcf0 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    fcdc:	8820      	ldrh	r0, [r4, #0]
    fcde:	f8ad 0004 	strh.w	r0, [sp, #4]
    fce2:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fce6:	f8ad 0008 	strh.w	r0, [sp, #8]
    fcea:	a801      	add	r0, sp, #4
    fcec:	f000 f8f8 	bl	fee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fcf0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fcf2:	2001      	movs	r0, #1
    fcf4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fcf6 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    fcf6:	b510      	push	{r4, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	f000 fb75 	bl	103e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    fcfe:	b120      	cbz	r0, fd0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd00:	f7f6 fcd0 	bl	66a4 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd04:	b108      	cbz	r0, fd0a <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    fd06:	200c      	movs	r0, #12
    fd08:	bd10      	pop	{r4, pc}
    fd0a:	7820      	ldrb	r0, [r4, #0]
    fd0c:	f7ff fe12 	bl	f934 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fd10:	79e2      	ldrb	r2, [r4, #7]
    fd12:	1c61      	adds	r1, r4, #1
    fd14:	f7f6 fc60 	bl	65d8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    fd18:	b108      	cbz	r0, fd1e <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    fd1a:	2000      	movs	r0, #0
    fd1c:	bd10      	pop	{r4, pc}
    fd1e:	2002      	movs	r0, #2
    fd20:	bd10      	pop	{r4, pc}

0000fd22 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fd22:	b510      	push	{r4, lr}
    fd24:	4604      	mov	r4, r0
    fd26:	2001      	movs	r0, #1
    fd28:	f000 f9bb 	bl	100a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    fd2c:	b128      	cbz	r0, fd3a <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fd2e:	4621      	mov	r1, r4
    fd30:	2001      	movs	r0, #1
    fd32:	f7f5 fe4f 	bl	59d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fd36:	2000      	movs	r0, #0
    fd38:	bd10      	pop	{r4, pc}
    fd3a:	200c      	movs	r0, #12
    fd3c:	bd10      	pop	{r4, pc}

0000fd3e <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    fd3e:	b510      	push	{r4, lr}
    fd40:	8800      	ldrh	r0, [r0, #0]
    fd42:	f7f6 fd3d 	bl	67c0 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    fd46:	b108      	cbz	r0, fd4c <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    fd48:	2000      	movs	r0, #0
    fd4a:	bd10      	pop	{r4, pc}
    fd4c:	2030      	movs	r0, #48	; 0x30
    fd4e:	bd10      	pop	{r4, pc}

0000fd50 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    fd50:	b51c      	push	{r2, r3, r4, lr}
    fd52:	7801      	ldrb	r1, [r0, #0]
    fd54:	f88d 1000 	strb.w	r1, [sp]
    fd58:	7840      	ldrb	r0, [r0, #1]
    fd5a:	f88d 0001 	strb.w	r0, [sp, #1]
    fd5e:	2000      	movs	r0, #0
    fd60:	f8ad 0002 	strh.w	r0, [sp, #2]
    fd64:	f8ad 0004 	strh.w	r0, [sp, #4]
    fd68:	4601      	mov	r1, r0
    fd6a:	4668      	mov	r0, sp
    fd6c:	f000 f9e4 	bl	10138 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    fd70:	2800      	cmp	r0, #0
    fd72:	d102      	bne.n	fd7a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    fd74:	4668      	mov	r0, sp
    fd76:	f000 f9c3 	bl	10100 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    fd7a:	bd1c      	pop	{r2, r3, r4, pc}

0000fd7c <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    fd7c:	b500      	push	{lr}
    fd7e:	b087      	sub	sp, #28
    fd80:	7941      	ldrb	r1, [r0, #5]
    fd82:	f88d 1000 	strb.w	r1, [sp]
    fd86:	7981      	ldrb	r1, [r0, #6]
    fd88:	f88d 1001 	strb.w	r1, [sp, #1]
    fd8c:	2101      	movs	r1, #1
    fd8e:	f88d 1002 	strb.w	r1, [sp, #2]
    fd92:	7801      	ldrb	r1, [r0, #0]
    fd94:	f88d 1003 	strb.w	r1, [sp, #3]
    fd98:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    fd9c:	f240 2271 	movw	r2, #625	; 0x271
    fda0:	4351      	muls	r1, r2
    fda2:	9102      	str	r1, [sp, #8]
    fda4:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    fda8:	4350      	muls	r0, r2
    fdaa:	9004      	str	r0, [sp, #16]
    fdac:	2007      	movs	r0, #7
    fdae:	f88d 0018 	strb.w	r0, [sp, #24]
    fdb2:	2000      	movs	r0, #0
    fdb4:	f88d 0019 	strb.w	r0, [sp, #25]
    fdb8:	9804      	ldr	r0, [sp, #16]
    fdba:	f7fc f809 	bl	bdd0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x148>
    fdbe:	b140      	cbz	r0, fdd2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fdc0:	9802      	ldr	r0, [sp, #8]
    fdc2:	f7fb fff9 	bl	bdb8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x130>
    fdc6:	b120      	cbz	r0, fdd2 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    fdc8:	4668      	mov	r0, sp
    fdca:	f7fb fe73 	bl	bab4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    fdce:	b007      	add	sp, #28
    fdd0:	bd00      	pop	{pc}
    fdd2:	2030      	movs	r0, #48	; 0x30
    fdd4:	e7fb      	b.n	fdce <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000fdd6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    fdd6:	b570      	push	{r4, r5, r6, lr}
    fdd8:	4605      	mov	r5, r0
    fdda:	8800      	ldrh	r0, [r0, #0]
    fddc:	2100      	movs	r1, #0
    fdde:	f7fe fc2e 	bl	e63e <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fde2:	0004      	movs	r4, r0
    fde4:	d007      	beq.n	fdf6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fde6:	f000 fb4e 	bl	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
    fdea:	b120      	cbz	r0, fdf6 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    fdec:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    fdf0:	b118      	cbz	r0, fdfa <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    fdf2:	203a      	movs	r0, #58	; 0x3a
    fdf4:	bd70      	pop	{r4, r5, r6, pc}
    fdf6:	2002      	movs	r0, #2
    fdf8:	bd70      	pop	{r4, r5, r6, pc}
    fdfa:	2100      	movs	r1, #0
    fdfc:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    fe00:	f7ff fd8e 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    fe04:	2801      	cmp	r0, #1
    fe06:	d001      	beq.n	fe0c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    fe08:	201a      	movs	r0, #26
    fe0a:	bd70      	pop	{r4, r5, r6, pc}
    fe0c:	f8d5 1002 	ldr.w	r1, [r5, #2]
    fe10:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    fe14:	f8d5 1006 	ldr.w	r1, [r5, #6]
    fe18:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    fe1c:	8969      	ldrh	r1, [r5, #10]
    fe1e:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    fe22:	2210      	movs	r2, #16
    fe24:	f105 010c 	add.w	r1, r5, #12
    fe28:	f204 1065 	addw	r0, r4, #357	; 0x165
    fe2c:	f7fd fb6a 	bl	d504 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fe30:	2001      	movs	r0, #1
    fe32:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    fe36:	2000      	movs	r0, #0
    fe38:	bd70      	pop	{r4, r5, r6, pc}

0000fe3a <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    fe3a:	b51c      	push	{r2, r3, r4, lr}
    fe3c:	4604      	mov	r4, r0
    fe3e:	f000 fb19 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fe42:	b178      	cbz	r0, fe64 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    fe44:	8820      	ldrh	r0, [r4, #0]
    fe46:	f8ad 0000 	strh.w	r0, [sp]
    fe4a:	8860      	ldrh	r0, [r4, #2]
    fe4c:	f8ad 0002 	strh.w	r0, [sp, #2]
    fe50:	8820      	ldrh	r0, [r4, #0]
    fe52:	f8ad 0004 	strh.w	r0, [sp, #4]
    fe56:	8860      	ldrh	r0, [r4, #2]
    fe58:	f8ad 0006 	strh.w	r0, [sp, #6]
    fe5c:	4668      	mov	r0, sp
    fe5e:	f7fb ffed 	bl	be3c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b4>
    fe62:	bd1c      	pop	{r2, r3, r4, pc}
    fe64:	2001      	movs	r0, #1
    fe66:	bd1c      	pop	{r2, r3, r4, pc}

0000fe68 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fe68:	b510      	push	{r4, lr}
    fe6a:	f7f5 fdd7 	bl	5a1c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    fe6e:	2000      	movs	r0, #0
    fe70:	bd10      	pop	{r4, pc}

0000fe72 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fe72:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fe74:	460c      	mov	r4, r1
    fe76:	4605      	mov	r5, r0
    fe78:	f000 fafc 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fe7c:	b160      	cbz	r0, fe98 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    fe7e:	4669      	mov	r1, sp
    fe80:	4628      	mov	r0, r5
    fe82:	f7fe fd5a 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe86:	2800      	cmp	r0, #0
    fe88:	d105      	bne.n	fe96 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    fe8a:	2101      	movs	r1, #1
    fe8c:	4622      	mov	r2, r4
    fe8e:	9801      	ldr	r0, [sp, #4]
    fe90:	f000 fa74 	bl	1037c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    fe94:	2000      	movs	r0, #0
    fe96:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fe98:	2001      	movs	r0, #1
    fe9a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fe9c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fe9c:	b510      	push	{r4, lr}
    fe9e:	4604      	mov	r4, r0
    fea0:	2000      	movs	r0, #0
    fea2:	f000 f8fe 	bl	100a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    fea6:	b128      	cbz	r0, feb4 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    fea8:	4621      	mov	r1, r4
    feaa:	2000      	movs	r0, #0
    feac:	f7f5 fd92 	bl	59d4 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    feb0:	2000      	movs	r0, #0
    feb2:	bd10      	pop	{r4, pc}
    feb4:	200c      	movs	r0, #12
    feb6:	bd10      	pop	{r4, pc}

0000feb8 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    feb8:	b510      	push	{r4, lr}
    feba:	7800      	ldrb	r0, [r0, #0]
    febc:	f000 0001 	and.w	r0, r0, #1
    fec0:	f7f8 fd12 	bl	88e8 <sym_QH6ACNASCZIPLGXDLTGSQRSHW5NB7ZQTZZRK4YA>
    fec4:	2000      	movs	r0, #0
    fec6:	bd10      	pop	{r4, pc}

0000fec8 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fec8:	b510      	push	{r4, lr}
    feca:	4604      	mov	r4, r0
    fecc:	f000 fad2 	bl	10474 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x452>
    fed0:	b120      	cbz	r0, fedc <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    fed2:	4620      	mov	r0, r4
    fed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fed8:	f000 baf4 	b.w	104c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    fedc:	2001      	movs	r0, #1
    fede:	bd10      	pop	{r4, pc}

0000fee0 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fee0:	b510      	push	{r4, lr}
    fee2:	4604      	mov	r4, r0
    fee4:	8880      	ldrh	r0, [r0, #4]
    fee6:	b128      	cbz	r0, fef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fee8:	2801      	cmp	r0, #1
    feea:	d003      	beq.n	fef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    feec:	2802      	cmp	r0, #2
    feee:	d001      	beq.n	fef4 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fef0:	2012      	movs	r0, #18
    fef2:	bd10      	pop	{r4, pc}
    fef4:	78e0      	ldrb	r0, [r4, #3]
    fef6:	f000 f8e0 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    fefa:	b148      	cbz	r0, ff10 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fefc:	78a0      	ldrb	r0, [r4, #2]
    fefe:	f000 f8dc 	bl	100ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    ff02:	b128      	cbz	r0, ff10 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    ff04:	4620      	mov	r0, r4
    ff06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ff0a:	2101      	movs	r1, #1
    ff0c:	f7fb be28 	b.w	bb60 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    ff10:	2011      	movs	r0, #17
    ff12:	bd10      	pop	{r4, pc}

0000ff14 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    ff14:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff16:	460c      	mov	r4, r1
    ff18:	4605      	mov	r5, r0
    ff1a:	8800      	ldrh	r0, [r0, #0]
    ff1c:	4669      	mov	r1, sp
    ff1e:	f7fe fd0c 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff22:	2800      	cmp	r0, #0
    ff24:	d106      	bne.n	ff34 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    ff26:	9801      	ldr	r0, [sp, #4]
    ff28:	8829      	ldrh	r1, [r5, #0]
    ff2a:	8021      	strh	r1, [r4, #0]
    ff2c:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    ff30:	8060      	strh	r0, [r4, #2]
    ff32:	2000      	movs	r0, #0
    ff34:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000ff36 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    ff36:	b510      	push	{r4, lr}
    ff38:	4604      	mov	r4, r0
    ff3a:	4601      	mov	r1, r0
    ff3c:	2000      	movs	r0, #0
    ff3e:	f7f5 fd31 	bl	59a4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    ff42:	b910      	cbnz	r0, ff4a <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    ff44:	2000      	movs	r0, #0
    ff46:	6020      	str	r0, [r4, #0]
    ff48:	80a0      	strh	r0, [r4, #4]
    ff4a:	2000      	movs	r0, #0
    ff4c:	bd10      	pop	{r4, pc}

0000ff4e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    ff4e:	b51c      	push	{r2, r3, r4, lr}
    ff50:	8800      	ldrh	r0, [r0, #0]
    ff52:	4669      	mov	r1, sp
    ff54:	f7fe fcf1 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ff58:	b968      	cbnz	r0, ff76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff5a:	4668      	mov	r0, sp
    ff5c:	f000 fa90 	bl	10480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x45e>
    ff60:	b148      	cbz	r0, ff76 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    ff62:	9801      	ldr	r0, [sp, #4]
    ff64:	2201      	movs	r2, #1
    ff66:	4601      	mov	r1, r0
    ff68:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    ff6c:	3078      	adds	r0, #120	; 0x78
    ff6e:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    ff72:	b92b      	cbnz	r3, ff80 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    ff74:	e001      	b.n	ff7a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    ff76:	2002      	movs	r0, #2
    ff78:	bd1c      	pop	{r2, r3, r4, pc}
    ff7a:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    ff7e:	b10b      	cbz	r3, ff84 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    ff80:	203a      	movs	r0, #58	; 0x3a
    ff82:	bd1c      	pop	{r2, r3, r4, pc}
    ff84:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    ff88:	079b      	lsls	r3, r3, #30
    ff8a:	d100      	bne.n	ff8e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    ff8c:	700a      	strb	r2, [r1, #0]
    ff8e:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    ff92:	2000      	movs	r0, #0
    ff94:	bd1c      	pop	{r2, r3, r4, pc}

0000ff96 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    ff96:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ff98:	460c      	mov	r4, r1
    ff9a:	4605      	mov	r5, r0
    ff9c:	8800      	ldrh	r0, [r0, #0]
    ff9e:	4669      	mov	r1, sp
    ffa0:	f7fe fccb 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffa4:	b108      	cbz	r0, ffaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    ffa6:	2002      	movs	r0, #2
    ffa8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffaa:	78a8      	ldrb	r0, [r5, #2]
    ffac:	b130      	cbz	r0, ffbc <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    ffae:	f000 fa42 	bl	10436 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x414>
    ffb2:	70a0      	strb	r0, [r4, #2]
    ffb4:	8828      	ldrh	r0, [r5, #0]
    ffb6:	8020      	strh	r0, [r4, #0]
    ffb8:	2000      	movs	r0, #0
    ffba:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    ffbc:	9801      	ldr	r0, [sp, #4]
    ffbe:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    ffc2:	e7f6      	b.n	ffb2 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000ffc4 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    ffc4:	b510      	push	{r4, lr}
    ffc6:	f7fb ff75 	bl	beb4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    ffca:	2000      	movs	r0, #0
    ffcc:	bd10      	pop	{r4, pc}

0000ffce <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    ffce:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ffd2:	4604      	mov	r4, r0
    ffd4:	8840      	ldrh	r0, [r0, #2]
    ffd6:	460d      	mov	r5, r1
    ffd8:	b1b8      	cbz	r0, 1000a <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    ffda:	8820      	ldrh	r0, [r4, #0]
    ffdc:	4669      	mov	r1, sp
    ffde:	f7fe fcac 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffe2:	2800      	cmp	r0, #0
    ffe4:	d10f      	bne.n	10006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    ffe6:	8820      	ldrh	r0, [r4, #0]
    ffe8:	8028      	strh	r0, [r5, #0]
    ffea:	9e01      	ldr	r6, [sp, #4]
    ffec:	f106 050c 	add.w	r5, r6, #12
    fff0:	3678      	adds	r6, #120	; 0x78
    fff2:	682f      	ldr	r7, [r5, #0]
    fff4:	8862      	ldrh	r2, [r4, #2]
    fff6:	4639      	mov	r1, r7
    fff8:	4630      	mov	r0, r6
    fffa:	f7fe fe2e 	bl	ec5a <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fffe:	6828      	ldr	r0, [r5, #0]
   10000:	42b8      	cmp	r0, r7
   10002:	d1f6      	bne.n	fff2 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10004:	2000      	movs	r0, #0
   10006:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1000a:	2012      	movs	r0, #18
   1000c:	e7fb      	b.n	10006 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0001000e <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   1000e:	f7fb be0d 	b.w	bc2c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010012 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10012:	b510      	push	{r4, lr}
   10014:	2008      	movs	r0, #8
   10016:	f7fb ffcb 	bl	bfb0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1001a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1001e:	f7f9 bd63 	b.w	9ae8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

00010022 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   10022:	b510      	push	{r4, lr}
   10024:	4604      	mov	r4, r0
   10026:	2000      	movs	r0, #0
   10028:	8822      	ldrh	r2, [r4, #0]
   1002a:	b086      	sub	sp, #24
   1002c:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   10030:	39ff      	subs	r1, #255	; 0xff
   10032:	d008      	beq.n	10046 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   10034:	a903      	add	r1, sp, #12
   10036:	4610      	mov	r0, r2
   10038:	f7fe fc7f 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1003c:	b110      	cbz	r0, 10044 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   1003e:	2002      	movs	r0, #2
   10040:	b006      	add	sp, #24
   10042:	bd10      	pop	{r4, pc}
   10044:	9804      	ldr	r0, [sp, #16]
   10046:	8921      	ldrh	r1, [r4, #8]
   10048:	89a3      	ldrh	r3, [r4, #12]
   1004a:	8962      	ldrh	r2, [r4, #10]
   1004c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10050:	88e3      	ldrh	r3, [r4, #6]
   10052:	88a2      	ldrh	r2, [r4, #4]
   10054:	8861      	ldrh	r1, [r4, #2]
   10056:	f000 f966 	bl	10326 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1005a:	b108      	cbz	r0, 10060 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   1005c:	2000      	movs	r0, #0
   1005e:	e7ef      	b.n	10040 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10060:	2030      	movs	r0, #48	; 0x30
   10062:	e7ed      	b.n	10040 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   10064:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10068:	4288      	cmp	r0, r1
   1006a:	d303      	bcc.n	10074 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   1006c:	f640 0148 	movw	r1, #2120	; 0x848
   10070:	4288      	cmp	r0, r1
   10072:	d300      	bcc.n	10076 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   10074:	4608      	mov	r0, r1
   10076:	4770      	bx	lr
   10078:	07c1      	lsls	r1, r0, #31
   1007a:	d001      	beq.n	10080 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   1007c:	2001      	movs	r0, #1
   1007e:	4770      	bx	lr
   10080:	0780      	lsls	r0, r0, #30
   10082:	d501      	bpl.n	10088 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   10084:	2002      	movs	r0, #2
   10086:	4770      	bx	lr
   10088:	2000      	movs	r0, #0
   1008a:	4770      	bx	lr
   1008c:	b510      	push	{r4, lr}
   1008e:	2801      	cmp	r0, #1
   10090:	d006      	beq.n	100a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   10092:	2802      	cmp	r0, #2
   10094:	d004      	beq.n	100a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   10096:	f240 2163 	movw	r1, #611	; 0x263
   1009a:	2006      	movs	r0, #6
   1009c:	f7f4 fe3c 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   100a0:	bd10      	pop	{r4, pc}
   100a2:	b510      	push	{r4, lr}
   100a4:	f000 fa03 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   100a8:	b128      	cbz	r0, 100b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   100aa:	f7f7 fba7 	bl	77fc <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   100ae:	2801      	cmp	r0, #1
   100b0:	d001      	beq.n	100b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   100b2:	2000      	movs	r0, #0
   100b4:	bd10      	pop	{r4, pc}
   100b6:	2001      	movs	r0, #1
   100b8:	bd10      	pop	{r4, pc}
   100ba:	b510      	push	{r4, lr}
   100bc:	0004      	movs	r4, r0
   100be:	d005      	beq.n	100cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   100c0:	f7fb ff86 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   100c4:	4384      	bics	r4, r0
   100c6:	d001      	beq.n	100cc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   100c8:	2000      	movs	r0, #0
   100ca:	bd10      	pop	{r4, pc}
   100cc:	2001      	movs	r0, #1
   100ce:	bd10      	pop	{r4, pc}
   100d0:	28fb      	cmp	r0, #251	; 0xfb
   100d2:	d803      	bhi.n	100dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
   100d4:	f640 0048 	movw	r0, #2120	; 0x848
   100d8:	4281      	cmp	r1, r0
   100da:	d901      	bls.n	100e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   100dc:	2011      	movs	r0, #17
   100de:	4770      	bx	lr
   100e0:	2000      	movs	r0, #0
   100e2:	4770      	bx	lr
   100e4:	381b      	subs	r0, #27
   100e6:	28e1      	cmp	r0, #225	; 0xe1
   100e8:	d206      	bcs.n	100f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   100ea:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   100ee:	d303      	bcc.n	100f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   100f0:	f244 2090 	movw	r0, #17040	; 0x4290
   100f4:	4281      	cmp	r1, r0
   100f6:	d901      	bls.n	100fc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
   100f8:	2012      	movs	r0, #18
   100fa:	4770      	bx	lr
   100fc:	2000      	movs	r0, #0
   100fe:	4770      	bx	lr
   10100:	b510      	push	{r4, lr}
   10102:	4604      	mov	r4, r0
   10104:	7800      	ldrb	r0, [r0, #0]
   10106:	2801      	cmp	r0, #1
   10108:	d009      	beq.n	1011e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
   1010a:	f7f8 fc85 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   1010e:	2805      	cmp	r0, #5
   10110:	d003      	beq.n	1011a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
   10112:	f7f8 fc4b 	bl	89ac <sym_FD3YSKMJFZZ6QLBN5QYR4W3IEFZPNIDML2SRNFA>
   10116:	2800      	cmp	r0, #0
   10118:	d000      	beq.n	1011c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   1011a:	200c      	movs	r0, #12
   1011c:	bd10      	pop	{r4, pc}
   1011e:	f7f7 fafb 	bl	7718 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10122:	b138      	cbz	r0, 10134 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
   10124:	f7f7 f974 	bl	7410 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   10128:	88a1      	ldrh	r1, [r4, #4]
   1012a:	8860      	ldrh	r0, [r4, #2]
   1012c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10130:	f7f8 bc00 	b.w	8934 <sym_QEQ3U44ESDZWCO3BSF6YRZCNVA53QKJJDYOH4IA>
   10134:	2012      	movs	r0, #18
   10136:	bd10      	pop	{r4, pc}
   10138:	7802      	ldrb	r2, [r0, #0]
   1013a:	2a01      	cmp	r2, #1
   1013c:	d001      	beq.n	10142 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   1013e:	b1ba      	cbz	r2, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10140:	e018      	b.n	10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10142:	7842      	ldrb	r2, [r0, #1]
   10144:	b13a      	cbz	r2, 10156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   10146:	2a01      	cmp	r2, #1
   10148:	d005      	beq.n	10156 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   1014a:	2a02      	cmp	r2, #2
   1014c:	d112      	bne.n	10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   1014e:	b189      	cbz	r1, 10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10150:	8881      	ldrh	r1, [r0, #4]
   10152:	b179      	cbz	r1, 10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10154:	e000      	b.n	10158 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   10156:	b159      	cbz	r1, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10158:	8841      	ldrh	r1, [r0, #2]
   1015a:	b149      	cbz	r1, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   1015c:	8880      	ldrh	r0, [r0, #4]
   1015e:	b138      	cbz	r0, 10170 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   10160:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   10164:	0049      	lsls	r1, r1, #1
   10166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1016a:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   1016e:	d201      	bcs.n	10174 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   10170:	2000      	movs	r0, #0
   10172:	4770      	bx	lr
   10174:	2012      	movs	r0, #18
   10176:	4770      	bx	lr
   10178:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   1017c:	7a45      	ldrb	r5, [r0, #9]
   1017e:	4604      	mov	r4, r0
   10180:	0768      	lsls	r0, r5, #29
   10182:	d06c      	beq.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10184:	08e8      	lsrs	r0, r5, #3
   10186:	d16a      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10188:	2d02      	cmp	r5, #2
   1018a:	d068      	beq.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1018c:	f7fb ff20 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10190:	ea25 0000 	bic.w	r0, r5, r0
   10194:	0740      	lsls	r0, r0, #29
   10196:	d102      	bne.n	1019e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
   10198:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1019c:	b110      	cbz	r0, 101a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
   1019e:	2011      	movs	r0, #17
   101a0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   101a4:	2d01      	cmp	r5, #1
   101a6:	d15a      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101a8:	27ff      	movs	r7, #255	; 0xff
   101aa:	2101      	movs	r1, #1
   101ac:	69a0      	ldr	r0, [r4, #24]
   101ae:	f7fb fe2f 	bl	be10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
   101b2:	b3e8      	cbz	r0, 10230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   101b4:	46a8      	mov	r8, r5
   101b6:	2600      	movs	r6, #0
   101b8:	4635      	mov	r5, r6
   101ba:	42bd      	cmp	r5, r7
   101bc:	d02f      	beq.n	1021e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   101be:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   101c2:	6988      	ldr	r0, [r1, #24]
   101c4:	68c9      	ldr	r1, [r1, #12]
   101c6:	4288      	cmp	r0, r1
   101c8:	d849      	bhi.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101ca:	4406      	add	r6, r0
   101cc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   101d0:	4681      	mov	r9, r0
   101d2:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   101d4:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   101d8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   101da:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   101de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   101e0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   101e2:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   101e4:	2000      	movs	r0, #0
   101e6:	f000 f89e 	bl	10326 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   101ea:	b308      	cbz	r0, 10230 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   101ec:	b1bd      	cbz	r5, 1021e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   101ee:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   101f2:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   101f6:	4281      	cmp	r1, r0
   101f8:	d131      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   101fa:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   101fe:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10202:	4281      	cmp	r1, r0
   10204:	d12b      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10206:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1020a:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   1020e:	4281      	cmp	r1, r0
   10210:	d125      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10212:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   10216:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1021a:	4281      	cmp	r1, r0
   1021c:	d11f      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1021e:	1c6d      	adds	r5, r5, #1
   10220:	b2ed      	uxtb	r5, r5
   10222:	4545      	cmp	r5, r8
   10224:	d3c9      	bcc.n	101ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
   10226:	68e0      	ldr	r0, [r4, #12]
   10228:	42b0      	cmp	r0, r6
   1022a:	d318      	bcc.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1022c:	7820      	ldrb	r0, [r4, #0]
   1022e:	e000      	b.n	10232 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   10230:	e003      	b.n	1023a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   10232:	b120      	cbz	r0, 1023e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
   10234:	2801      	cmp	r0, #1
   10236:	d112      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10238:	e004      	b.n	10244 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   1023a:	2030      	movs	r0, #48	; 0x30
   1023c:	e7b0      	b.n	101a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   1023e:	78a0      	ldrb	r0, [r4, #2]
   10240:	2800      	cmp	r0, #0
   10242:	d1f7      	bne.n	10234 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
   10244:	7860      	ldrb	r0, [r4, #1]
   10246:	b128      	cbz	r0, 10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   10248:	2801      	cmp	r0, #1
   1024a:	d003      	beq.n	10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   1024c:	2802      	cmp	r0, #2
   1024e:	d001      	beq.n	10254 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   10250:	2803      	cmp	r0, #3
   10252:	d104      	bne.n	1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10254:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   10258:	b108      	cbz	r0, 1025e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1025a:	2807      	cmp	r0, #7
   1025c:	d901      	bls.n	10262 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   1025e:	2012      	movs	r0, #18
   10260:	e79e      	b.n	101a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   10262:	2000      	movs	r0, #0
   10264:	e79c      	b.n	101a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   10266:	b570      	push	{r4, r5, r6, lr}
   10268:	4604      	mov	r4, r0
   1026a:	7800      	ldrb	r0, [r0, #0]
   1026c:	2500      	movs	r5, #0
   1026e:	2801      	cmp	r0, #1
   10270:	d004      	beq.n	1027c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10272:	b118      	cbz	r0, 1027c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10274:	2802      	cmp	r0, #2
   10276:	d001      	beq.n	1027c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   10278:	2803      	cmp	r0, #3
   1027a:	d139      	bne.n	102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1027c:	7860      	ldrb	r0, [r4, #1]
   1027e:	b128      	cbz	r0, 1028c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   10280:	2801      	cmp	r0, #1
   10282:	d003      	beq.n	1028c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   10284:	2802      	cmp	r0, #2
   10286:	d001      	beq.n	1028c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   10288:	2803      	cmp	r0, #3
   1028a:	d131      	bne.n	102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1028c:	7e60      	ldrb	r0, [r4, #25]
   1028e:	b948      	cbnz	r0, 102a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
   10290:	78a0      	ldrb	r0, [r4, #2]
   10292:	2801      	cmp	r0, #1
   10294:	d12c      	bne.n	102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   10296:	f7fb fe9b 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1029a:	4601      	mov	r1, r0
   1029c:	78a0      	ldrb	r0, [r4, #2]
   1029e:	ea30 0101 	bics.w	r1, r0, r1
   102a2:	d001      	beq.n	102a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   102a4:	2011      	movs	r0, #17
   102a6:	bd70      	pop	{r4, r5, r6, pc}
   102a8:	07c0      	lsls	r0, r0, #31
   102aa:	d006      	beq.n	102ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   102ac:	78e0      	ldrb	r0, [r4, #3]
   102ae:	2301      	movs	r3, #1
   102b0:	6922      	ldr	r2, [r4, #16]
   102b2:	68a1      	ldr	r1, [r4, #8]
   102b4:	f000 f820 	bl	102f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102b8:	4605      	mov	r5, r0
   102ba:	78a0      	ldrb	r0, [r4, #2]
   102bc:	0780      	lsls	r0, r0, #30
   102be:	d506      	bpl.n	102ce <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
   102c0:	78e0      	ldrb	r0, [r4, #3]
   102c2:	2302      	movs	r3, #2
   102c4:	6922      	ldr	r2, [r4, #16]
   102c6:	68a1      	ldr	r1, [r4, #8]
   102c8:	f000 f816 	bl	102f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102cc:	4305      	orrs	r5, r0
   102ce:	78a0      	ldrb	r0, [r4, #2]
   102d0:	0740      	lsls	r0, r0, #29
   102d2:	d506      	bpl.n	102e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
   102d4:	78e0      	ldrb	r0, [r4, #3]
   102d6:	2304      	movs	r3, #4
   102d8:	6922      	ldr	r2, [r4, #16]
   102da:	68a1      	ldr	r1, [r4, #8]
   102dc:	f000 f80c 	bl	102f8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   102e0:	4305      	orrs	r5, r0
   102e2:	b10d      	cbz	r5, 102e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   102e4:	4628      	mov	r0, r5
   102e6:	bd70      	pop	{r4, r5, r6, pc}
   102e8:	7e20      	ldrb	r0, [r4, #24]
   102ea:	b108      	cbz	r0, 102f0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   102ec:	2807      	cmp	r0, #7
   102ee:	d901      	bls.n	102f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   102f0:	2012      	movs	r0, #18
   102f2:	bd70      	pop	{r4, r5, r6, pc}
   102f4:	2000      	movs	r0, #0
   102f6:	bd70      	pop	{r4, r5, r6, pc}
   102f8:	b570      	push	{r4, r5, r6, lr}
   102fa:	4614      	mov	r4, r2
   102fc:	460d      	mov	r5, r1
   102fe:	b108      	cbz	r0, 10304 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
   10300:	2801      	cmp	r0, #1
   10302:	d10a      	bne.n	1031a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
   10304:	4619      	mov	r1, r3
   10306:	4610      	mov	r0, r2
   10308:	f7fb fd82 	bl	be10 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>
   1030c:	b138      	cbz	r0, 1031e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   1030e:	4628      	mov	r0, r5
   10310:	f7fb fd46 	bl	bda0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
   10314:	b118      	cbz	r0, 1031e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   10316:	42ac      	cmp	r4, r5
   10318:	d903      	bls.n	10322 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   1031a:	2012      	movs	r0, #18
   1031c:	bd70      	pop	{r4, r5, r6, pc}
   1031e:	2030      	movs	r0, #48	; 0x30
   10320:	bd70      	pop	{r4, r5, r6, pc}
   10322:	2000      	movs	r0, #0
   10324:	bd70      	pop	{r4, r5, r6, pc}
   10326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1032a:	461d      	mov	r5, r3
   1032c:	4610      	mov	r0, r2
   1032e:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10332:	1f8b      	subs	r3, r1, #6
   10334:	f640 427a 	movw	r2, #3194	; 0xc7a
   10338:	9e08      	ldr	r6, [sp, #32]
   1033a:	4293      	cmp	r3, r2
   1033c:	d81c      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1033e:	1f83      	subs	r3, r0, #6
   10340:	4293      	cmp	r3, r2
   10342:	d819      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10344:	4281      	cmp	r1, r0
   10346:	d817      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10348:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   1034c:	d214      	bcs.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1034e:	f1a4 010a 	sub.w	r1, r4, #10
   10352:	1f12      	subs	r2, r2, #4
   10354:	4291      	cmp	r1, r2
   10356:	d80f      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10358:	f7fe fafb 	bl	e952 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   1035c:	1c6d      	adds	r5, r5, #1
   1035e:	4368      	muls	r0, r5
   10360:	f240 2171 	movw	r1, #625	; 0x271
   10364:	0040      	lsls	r0, r0, #1
   10366:	434c      	muls	r4, r1
   10368:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   1036c:	d204      	bcs.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   1036e:	42b7      	cmp	r7, r6
   10370:	d802      	bhi.n	10378 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   10372:	2001      	movs	r0, #1
   10374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10378:	2000      	movs	r0, #0
   1037a:	e7fb      	b.n	10374 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
   1037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10380:	4606      	mov	r6, r0
   10382:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10386:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   1038a:	4615      	mov	r5, r2
   1038c:	302c      	adds	r0, #44	; 0x2c
   1038e:	f7f8 fab1 	bl	88f4 <sym_D32O5UGH4Z5UIIID2WCPPQW5AIZTB7O27GPHRFY>
   10392:	4680      	mov	r8, r0
   10394:	2102      	movs	r1, #2
   10396:	f7fe fb6a 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1039a:	4287      	cmp	r7, r0
   1039c:	d200      	bcs.n	103a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   1039e:	4638      	mov	r0, r7
   103a0:	4607      	mov	r7, r0
   103a2:	2102      	movs	r1, #2
   103a4:	4640      	mov	r0, r8
   103a6:	f7fe fb62 	bl	ea6e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   103aa:	4284      	cmp	r4, r0
   103ac:	d200      	bcs.n	103b0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   103ae:	4620      	mov	r0, r4
   103b0:	8831      	ldrh	r1, [r6, #0]
   103b2:	8029      	strh	r1, [r5, #0]
   103b4:	2f1b      	cmp	r7, #27
   103b6:	d913      	bls.n	103e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   103b8:	2ffb      	cmp	r7, #251	; 0xfb
   103ba:	d300      	bcc.n	103be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   103bc:	27fb      	movs	r7, #251	; 0xfb
   103be:	806f      	strh	r7, [r5, #2]
   103c0:	281b      	cmp	r0, #27
   103c2:	d90f      	bls.n	103e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
   103c4:	28fb      	cmp	r0, #251	; 0xfb
   103c6:	d300      	bcc.n	103ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   103c8:	20fb      	movs	r0, #251	; 0xfb
   103ca:	80e8      	strh	r0, [r5, #6]
   103cc:	4640      	mov	r0, r8
   103ce:	f7ff fe49 	bl	10064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   103d2:	80a8      	strh	r0, [r5, #4]
   103d4:	4640      	mov	r0, r8
   103d6:	f7ff fe45 	bl	10064 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   103da:	8128      	strh	r0, [r5, #8]
   103dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   103e0:	271b      	movs	r7, #27
   103e2:	e7ec      	b.n	103be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   103e4:	201b      	movs	r0, #27
   103e6:	e7f0      	b.n	103ca <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   103e8:	b510      	push	{r4, lr}
   103ea:	f000 f860 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   103ee:	2800      	cmp	r0, #0
   103f0:	d000      	beq.n	103f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d2>
   103f2:	2001      	movs	r0, #1
   103f4:	bd10      	pop	{r4, pc}
   103f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103fa:	7890      	ldrb	r0, [r2, #2]
   103fc:	9e06      	ldr	r6, [sp, #24]
   103fe:	461d      	mov	r5, r3
   10400:	4614      	mov	r4, r2
   10402:	b908      	cbnz	r0, 10408 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e6>
   10404:	f7fb fde4 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10408:	78e4      	ldrb	r4, [r4, #3]
   1040a:	4607      	mov	r7, r0
   1040c:	b914      	cbnz	r4, 10414 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3f2>
   1040e:	f7fb fddf 	bl	bfd0 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10412:	4604      	mov	r4, r0
   10414:	b16f      	cbz	r7, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10416:	b164      	cbz	r4, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10418:	4638      	mov	r0, r7
   1041a:	f7ff fe2d 	bl	10078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   1041e:	4620      	mov	r0, r4
   10420:	f7ff fe2a 	bl	10078 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   10424:	b12f      	cbz	r7, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10426:	b124      	cbz	r4, 10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x410>
   10428:	702f      	strb	r7, [r5, #0]
   1042a:	7034      	strb	r4, [r6, #0]
   1042c:	2000      	movs	r0, #0
   1042e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10432:	2009      	movs	r0, #9
   10434:	e7fb      	b.n	1042e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x40c>
   10436:	b510      	push	{r4, lr}
   10438:	f7fd f808 	bl	d44c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   1043c:	b928      	cbnz	r0, 1044a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   1043e:	f7fd f83b 	bl	d4b8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10442:	b910      	cbnz	r0, 1044a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x428>
   10444:	f7fd f842 	bl	d4cc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   10448:	b108      	cbz	r0, 1044e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42c>
   1044a:	2008      	movs	r0, #8
   1044c:	bd10      	pop	{r4, pc}
   1044e:	f7fc ffd2 	bl	d3f6 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   10452:	b940      	cbnz	r0, 10466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10454:	f7fc ffd9 	bl	d40a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10458:	b928      	cbnz	r0, 10466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   1045a:	f7fc ffed 	bl	d438 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   1045e:	b910      	cbnz	r0, 10466 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10460:	f7fc fffe 	bl	d460 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10464:	b108      	cbz	r0, 1046a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x448>
   10466:	2004      	movs	r0, #4
   10468:	bd10      	pop	{r4, pc}
   1046a:	f44f 61b1 	mov.w	r1, #1416	; 0x588
   1046e:	2039      	movs	r0, #57	; 0x39
   10470:	f7f4 fc52 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10474:	b510      	push	{r4, lr}
   10476:	f7fb fda5 	bl	bfc4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   1047a:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1047e:	bd10      	pop	{r4, pc}
   10480:	6840      	ldr	r0, [r0, #4]
   10482:	f000 b800 	b.w	10486 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x464>
   10486:	b508      	push	{r3, lr}
   10488:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1048c:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   10490:	f88d 0000 	strb.w	r0, [sp]
   10494:	9800      	ldr	r0, [sp, #0]
   10496:	9000      	str	r0, [sp, #0]
   10498:	f89d 0000 	ldrb.w	r0, [sp]
   1049c:	1e40      	subs	r0, r0, #1
   1049e:	4208      	tst	r0, r1
   104a0:	d003      	beq.n	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   104a2:	2904      	cmp	r1, #4
   104a4:	d001      	beq.n	104aa <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x488>
   104a6:	2001      	movs	r0, #1
   104a8:	bd08      	pop	{r3, pc}
   104aa:	2000      	movs	r0, #0
   104ac:	bd08      	pop	{r3, pc}
   104ae:	b510      	push	{r4, lr}
   104b0:	f7f8 fab2 	bl	8a18 <sym_N4O5U3NJSTCGLBUPXQCZS42TMU5XHBTVV6MIOFQ>
   104b4:	2804      	cmp	r0, #4
   104b6:	d003      	beq.n	104c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   104b8:	2805      	cmp	r0, #5
   104ba:	d001      	beq.n	104c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   104bc:	2000      	movs	r0, #0
   104be:	bd10      	pop	{r4, pc}
   104c0:	2001      	movs	r0, #1
   104c2:	bd10      	pop	{r4, pc}
   104c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   104c6:	b089      	sub	sp, #36	; 0x24
   104c8:	4604      	mov	r4, r0
   104ca:	8800      	ldrh	r0, [r0, #0]
   104cc:	a906      	add	r1, sp, #24
   104ce:	f7fe fa34 	bl	e93a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   104d2:	2800      	cmp	r0, #0
   104d4:	d143      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   104d6:	9807      	ldr	r0, [sp, #28]
   104d8:	2601      	movs	r6, #1
   104da:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
   104de:	f88d 1008 	strb.w	r1, [sp, #8]
   104e2:	9902      	ldr	r1, [sp, #8]
   104e4:	9102      	str	r1, [sp, #8]
   104e6:	f89d 1008 	ldrb.w	r1, [sp, #8]
   104ea:	f88d 100c 	strb.w	r1, [sp, #12]
   104ee:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   104f2:	3078      	adds	r0, #120	; 0x78
   104f4:	291d      	cmp	r1, #29
   104f6:	d102      	bne.n	104fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
   104f8:	f89d 100c 	ldrb.w	r1, [sp, #12]
   104fc:	b141      	cbz	r1, 10510 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
   104fe:	2100      	movs	r1, #0
   10500:	f88d 1004 	strb.w	r1, [sp, #4]
   10504:	2105      	movs	r1, #5
   10506:	304e      	adds	r0, #78	; 0x4e
   10508:	f7ff fa0a 	bl	f920 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   1050c:	b110      	cbz	r0, 10514 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
   1050e:	e004      	b.n	1051a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
   10510:	2101      	movs	r1, #1
   10512:	e7f5      	b.n	10500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   10514:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10518:	b300      	cbz	r0, 1055c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
   1051a:	8921      	ldrh	r1, [r4, #8]
   1051c:	88e0      	ldrh	r0, [r4, #6]
   1051e:	f7ff fde1 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   10522:	2800      	cmp	r0, #0
   10524:	d11b      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10526:	88a1      	ldrh	r1, [r4, #4]
   10528:	8860      	ldrh	r0, [r4, #2]
   1052a:	f7ff fddb 	bl	100e4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   1052e:	2800      	cmp	r0, #0
   10530:	d115      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10532:	8921      	ldrh	r1, [r4, #8]
   10534:	88e0      	ldrh	r0, [r4, #6]
   10536:	f7ff fdcb 	bl	100d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1053a:	2800      	cmp	r0, #0
   1053c:	d10f      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1053e:	88a1      	ldrh	r1, [r4, #4]
   10540:	8860      	ldrh	r0, [r4, #2]
   10542:	f7ff fdc5 	bl	100d0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   10546:	0007      	movs	r7, r0
   10548:	d109      	bne.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   1054a:	9807      	ldr	r0, [sp, #28]
   1054c:	f500 7599 	add.w	r5, r0, #306	; 0x132
   10550:	706e      	strb	r6, [r5, #1]
   10552:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10556:	b121      	cbz	r1, 10562 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
   10558:	273a      	movs	r7, #58	; 0x3a
   1055a:	e02d      	b.n	105b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   1055c:	201a      	movs	r0, #26
   1055e:	b009      	add	sp, #36	; 0x24
   10560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10562:	4631      	mov	r1, r6
   10564:	aa03      	add	r2, sp, #12
   10566:	f7ff ff09 	bl	1037c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   1056a:	8861      	ldrh	r1, [r4, #2]
   1056c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   10570:	4281      	cmp	r1, r0
   10572:	d200      	bcs.n	10576 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
   10574:	4608      	mov	r0, r1
   10576:	80e8      	strh	r0, [r5, #6]
   10578:	88a1      	ldrh	r1, [r4, #4]
   1057a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1057e:	4281      	cmp	r1, r0
   10580:	d200      	bcs.n	10584 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   10582:	4608      	mov	r0, r1
   10584:	8128      	strh	r0, [r5, #8]
   10586:	88e2      	ldrh	r2, [r4, #6]
   10588:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1058c:	428a      	cmp	r2, r1
   1058e:	d200      	bcs.n	10592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   10590:	4611      	mov	r1, r2
   10592:	8069      	strh	r1, [r5, #2]
   10594:	8922      	ldrh	r2, [r4, #8]
   10596:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1059a:	428a      	cmp	r2, r1
   1059c:	d200      	bcs.n	105a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
   1059e:	4611      	mov	r1, r2
   105a0:	f640 0248 	movw	r2, #2120	; 0x848
   105a4:	80a9      	strh	r1, [r5, #4]
   105a6:	4291      	cmp	r1, r2
   105a8:	d300      	bcc.n	105ac <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
   105aa:	4611      	mov	r1, r2
   105ac:	80a9      	strh	r1, [r5, #4]
   105ae:	4290      	cmp	r0, r2
   105b0:	d200      	bcs.n	105b4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   105b2:	4602      	mov	r2, r0
   105b4:	812a      	strh	r2, [r5, #8]
   105b6:	702e      	strb	r6, [r5, #0]
   105b8:	2000      	movs	r0, #0
   105ba:	7068      	strb	r0, [r5, #1]
   105bc:	4638      	mov	r0, r7
   105be:	e7ce      	b.n	1055e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   105c0:	b530      	push	{r4, r5, lr}
   105c2:	f340 0400 	sbfx	r4, r0, #0, #1
   105c6:	f340 0040 	sbfx	r0, r0, #1, #1
   105ca:	1c40      	adds	r0, r0, #1
   105cc:	9d03      	ldr	r5, [sp, #12]
   105ce:	1c64      	adds	r4, r4, #1
   105d0:	d000      	beq.n	105d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
   105d2:	b119      	cbz	r1, 105dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   105d4:	b100      	cbz	r0, 105d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
   105d6:	b10a      	cbz	r2, 105dc <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   105d8:	b91c      	cbnz	r4, 105e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
   105da:	e001      	b.n	105e0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
   105dc:	2011      	movs	r0, #17
   105de:	bd30      	pop	{r4, r5, pc}
   105e0:	2100      	movs	r1, #0
   105e2:	7019      	strb	r1, [r3, #0]
   105e4:	b900      	cbnz	r0, 105e8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
   105e6:	2200      	movs	r2, #0
   105e8:	702a      	strb	r2, [r5, #0]
   105ea:	2000      	movs	r0, #0
   105ec:	bd30      	pop	{r4, r5, pc}
   105ee:	b510      	push	{r4, lr}
   105f0:	f7ff ff5d 	bl	104ae <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   105f4:	b120      	cbz	r0, 10600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   105f6:	f7f7 f909 	bl	780c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   105fa:	b108      	cbz	r0, 10600 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   105fc:	2001      	movs	r0, #1
   105fe:	bd10      	pop	{r4, pc}
   10600:	2000      	movs	r0, #0
   10602:	bd10      	pop	{r4, pc}

00010604 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   10604:	6802      	ldr	r2, [r0, #0]
   10606:	b912      	cbnz	r2, 1060e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   10608:	6001      	str	r1, [r0, #0]
   1060a:	4770      	bx	lr
   1060c:	4602      	mov	r2, r0
   1060e:	6850      	ldr	r0, [r2, #4]
   10610:	b108      	cbz	r0, 10616 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   10612:	428a      	cmp	r2, r1
   10614:	d1fa      	bne.n	1060c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   10616:	428a      	cmp	r2, r1
   10618:	d0f7      	beq.n	1060a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1061a:	6051      	str	r1, [r2, #4]
   1061c:	4770      	bx	lr
   1061e:	b510      	push	{r4, lr}
   10620:	4604      	mov	r4, r0
   10622:	e002      	b.n	1062a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   10624:	6820      	ldr	r0, [r4, #0]
   10626:	4780      	blx	r0
   10628:	6864      	ldr	r4, [r4, #4]
   1062a:	2c00      	cmp	r4, #0
   1062c:	d1fa      	bne.n	10624 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
   1062e:	bd10      	pop	{r4, pc}
   10630:	b510      	push	{r4, lr}
   10632:	2000      	movs	r0, #0
   10634:	f7f4 fd38 	bl	50a8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10638:	f7f4 ff58 	bl	54ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1063c:	f7f5 f994 	bl	5968 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10640:	f7f5 fb86 	bl	5d50 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10644:	2800      	cmp	r0, #0
   10646:	d003      	beq.n	10650 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
   10648:	21d0      	movs	r1, #208	; 0xd0
   1064a:	2001      	movs	r0, #1
   1064c:	f7f4 fb64 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10650:	bd10      	pop	{r4, pc}
   10652:	b510      	push	{r4, lr}
   10654:	f000 f80a 	bl	1066c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
   10658:	f7ff f84b 	bl	f6f2 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1065c:	2800      	cmp	r0, #0
   1065e:	d004      	beq.n	1066a <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   10660:	f240 1155 	movw	r1, #341	; 0x155
   10664:	2001      	movs	r0, #1
   10666:	f7f4 fb57 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1066a:	bd10      	pop	{r4, pc}
   1066c:	b510      	push	{r4, lr}
   1066e:	f7f8 f955 	bl	891c <sym_PZUNZTYT7AZJNJFZS5D6BQSK2VUJ7IAMM34PDSQ>
   10672:	b120      	cbz	r0, 1067e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
   10674:	f240 113b 	movw	r1, #315	; 0x13b
   10678:	2001      	movs	r0, #1
   1067a:	f7f4 fb4d 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1067e:	f7f7 f815 	bl	76ac <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10686:	f7fa bf6b 	b.w	b560 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   1068a:	0001      	.short	0x0001
   1068c:	0002000b 	.word	0x0002000b
   10690:	0005000a 	.word	0x0005000a
   10694:	000a0009 	.word	0x000a0009
   10698:	00140008 	.word	0x00140008
   1069c:	001e0007 	.word	0x001e0007
   106a0:	00320006 	.word	0x00320006
   106a4:	004b0005 	.word	0x004b0005
   106a8:	00640004 	.word	0x00640004
   106ac:	00960003 	.word	0x00960003
   106b0:	00fa0002 	.word	0x00fa0002
   106b4:	01f40001 	.word	0x01f40001
	...

000106ba <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   106ba:	b510      	push	{r4, lr}
   106bc:	f7fc f83c 	bl	c738 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   106c0:	f000 f850 	bl	10764 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   106c4:	f7fb fcf8 	bl	c0b8 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   106c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   106cc:	f7fb bdf6 	b.w	c2bc <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000106d0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   106d0:	b510      	push	{r4, lr}
   106d2:	24c8      	movs	r4, #200	; 0xc8
   106d4:	1e64      	subs	r4, r4, #1
   106d6:	b2e4      	uxtb	r4, r4
   106d8:	f7fb fd0c 	bl	c0f4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   106dc:	2802      	cmp	r0, #2
   106de:	d003      	beq.n	106e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   106e0:	2801      	cmp	r0, #1
   106e2:	d000      	beq.n	106e6 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   106e4:	2000      	movs	r0, #0
   106e6:	bd10      	pop	{r4, pc}
   106e8:	2c00      	cmp	r4, #0
   106ea:	d1f3      	bne.n	106d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   106ec:	2193      	movs	r1, #147	; 0x93
   106ee:	203b      	movs	r0, #59	; 0x3b
   106f0:	f7f4 fb12 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000106f4 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   106f4:	b510      	push	{r4, lr}
   106f6:	f7f4 f9a9 	bl	4a4c <mpsl_fem_lna_configuration_clear>
   106fa:	2800      	cmp	r0, #0
   106fc:	d005      	beq.n	1070a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   106fe:	1c40      	adds	r0, r0, #1
   10700:	d003      	beq.n	1070a <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10702:	2150      	movs	r1, #80	; 0x50
   10704:	2040      	movs	r0, #64	; 0x40
   10706:	f7f4 fb07 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1070a:	bd10      	pop	{r4, pc}

0001070c <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   1070c:	b510      	push	{r4, lr}
   1070e:	f7f4 f9a9 	bl	4a64 <mpsl_fem_pa_configuration_clear>
   10712:	2800      	cmp	r0, #0
   10714:	d005      	beq.n	10722 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10716:	1c40      	adds	r0, r0, #1
   10718:	d003      	beq.n	10722 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   1071a:	2149      	movs	r1, #73	; 0x49
   1071c:	2040      	movs	r0, #64	; 0x40
   1071e:	f7f4 fafb 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10722:	bd10      	pop	{r4, pc}

00010724 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10724:	b510      	push	{r4, lr}
   10726:	f7f4 f98b 	bl	4a40 <mpsl_fem_disable>
   1072a:	2800      	cmp	r0, #0
   1072c:	d005      	beq.n	1073a <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   1072e:	1c40      	adds	r0, r0, #1
   10730:	d003      	beq.n	1073a <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10732:	2157      	movs	r1, #87	; 0x57
   10734:	2040      	movs	r0, #64	; 0x40
   10736:	f7f4 faef 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1073a:	bd10      	pop	{r4, pc}

0001073c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   1073c:	b510      	push	{r4, lr}
   1073e:	2100      	movs	r1, #0
   10740:	4608      	mov	r0, r1
   10742:	f7f4 f989 	bl	4a58 <mpsl_fem_lna_configuration_set>
   10746:	b108      	cbz	r0, 1074c <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10748:	2000      	movs	r0, #0
   1074a:	bd10      	pop	{r4, pc}
   1074c:	2001      	movs	r0, #1
   1074e:	bd10      	pop	{r4, pc}

00010750 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   10750:	b508      	push	{r3, lr}
   10752:	4668      	mov	r0, sp
   10754:	f7f4 f992 	bl	4a7c <mpsl_fem_pa_is_configured>
   10758:	f89d 0000 	ldrb.w	r0, [sp]
   1075c:	2800      	cmp	r0, #0
   1075e:	d000      	beq.n	10762 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   10760:	2001      	movs	r0, #1
   10762:	bd08      	pop	{r3, pc}

00010764 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10764:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10768:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1076c:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10770:	f3bf 8f4f 	dsb	sy
   10774:	f3bf 8f6f 	isb	sy
   10778:	f7fb be7a 	b.w	c470 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   1077c:	2800      	cmp	r0, #0
   1077e:	db09      	blt.n	10794 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10780:	f000 021f 	and.w	r2, r0, #31
   10784:	2101      	movs	r1, #1
   10786:	4091      	lsls	r1, r2
   10788:	0940      	lsrs	r0, r0, #5
   1078a:	0080      	lsls	r0, r0, #2
   1078c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10790:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10794:	4770      	bx	lr
   10796:	2800      	cmp	r0, #0
   10798:	db0d      	blt.n	107b6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   1079a:	f000 021f 	and.w	r2, r0, #31
   1079e:	2101      	movs	r1, #1
   107a0:	4091      	lsls	r1, r2
   107a2:	0940      	lsrs	r0, r0, #5
   107a4:	0080      	lsls	r0, r0, #2
   107a6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   107aa:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   107ae:	f3bf 8f4f 	dsb	sy
   107b2:	f3bf 8f6f 	isb	sy
   107b6:	4770      	bx	lr

000107b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   107b8:	b510      	push	{r4, lr}
   107ba:	2801      	cmp	r0, #1
   107bc:	d006      	beq.n	107cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   107be:	2802      	cmp	r0, #2
   107c0:	d006      	beq.n	107d0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   107c2:	f640 3164 	movw	r1, #2916	; 0xb64
   107c6:	203e      	movs	r0, #62	; 0x3e
   107c8:	f7f4 faa6 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107cc:	2028      	movs	r0, #40	; 0x28
   107ce:	bd10      	pop	{r4, pc}
   107d0:	2018      	movs	r0, #24
   107d2:	bd10      	pop	{r4, pc}

000107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   107d4:	b510      	push	{r4, lr}
   107d6:	2801      	cmp	r0, #1
   107d8:	d006      	beq.n	107e8 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   107da:	2802      	cmp	r0, #2
   107dc:	d007      	beq.n	107ee <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   107de:	f640 3178 	movw	r1, #2936	; 0xb78
   107e2:	203e      	movs	r0, #62	; 0x3e
   107e4:	f7f4 fa98 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107e8:	f641 6014 	movw	r0, #7700	; 0x1e14
   107ec:	bd10      	pop	{r4, pc}
   107ee:	f241 1030 	movw	r0, #4400	; 0x1130
   107f2:	bd10      	pop	{r4, pc}

000107f4 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   107f4:	f7fc bcc2 	b.w	d17c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
   107f8:	b510      	push	{r4, lr}
   107fa:	460a      	mov	r2, r1
   107fc:	b130      	cbz	r0, 1080c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   107fe:	2801      	cmp	r0, #1
   10800:	d00b      	beq.n	1081a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   10802:	f240 6127 	movw	r1, #1575	; 0x627
   10806:	203e      	movs	r0, #62	; 0x3e
   10808:	f7f4 fa86 	bl	4d18 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1080c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10810:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10814:	4610      	mov	r0, r2
   10816:	f7fb bcc1 	b.w	c19c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   1081a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1081e:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10822:	4610      	mov	r0, r2
   10824:	f7fb bca4 	b.w	c170 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>

00010828 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   10828:	b570      	push	{r4, r5, r6, lr}
   1082a:	4605      	mov	r5, r0
   1082c:	4614      	mov	r4, r2
   1082e:	4608      	mov	r0, r1
   10830:	f7ff ffd0 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10834:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10838:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   1083c:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   10840:	4620      	mov	r0, r4
   10842:	f7ff ffc7 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10846:	4428      	add	r0, r5
   10848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1084c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10850:	fbb0 f5f1 	udiv	r5, r0, r1
   10854:	4620      	mov	r0, r4
   10856:	f7ff ffaf 	bl	107b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1085a:	4428      	add	r0, r5
   1085c:	1d40      	adds	r0, r0, #5
   1085e:	bd70      	pop	{r4, r5, r6, pc}

00010860 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10864:	4607      	mov	r7, r0
   10866:	461d      	mov	r5, r3
   10868:	460e      	mov	r6, r1
   1086a:	4614      	mov	r4, r2
   1086c:	4610      	mov	r0, r2
   1086e:	f7ff ffb1 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10872:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10876:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   1087a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   1087e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10882:	2e02      	cmp	r6, #2
   10884:	d00e      	beq.n	108a4 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10886:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1088a:	4411      	add	r1, r2
   1088c:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   10890:	fbb1 f6f0 	udiv	r6, r1, r0
   10894:	4620      	mov	r0, r4
   10896:	f7ff ff8f 	bl	107b8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   1089a:	4430      	add	r0, r6
   1089c:	4428      	add	r0, r5
   1089e:	1d40      	adds	r0, r0, #5
   108a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   108a4:	4602      	mov	r2, r0
   108a6:	e7f0      	b.n	1088a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

000108a8 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   108a8:	b510      	push	{r4, lr}
   108aa:	4604      	mov	r4, r0
   108ac:	4608      	mov	r0, r1
   108ae:	f7ff ff91 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108b6:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   108ba:	fbb0 f0f1 	udiv	r0, r0, r1
   108be:	1a20      	subs	r0, r4, r0
   108c0:	1e80      	subs	r0, r0, #2
   108c2:	bd10      	pop	{r4, pc}

000108c4 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   108c4:	b510      	push	{r4, lr}
   108c6:	4604      	mov	r4, r0
   108c8:	4608      	mov	r0, r1
   108ca:	f7ff ff83 	bl	107d4 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   108ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   108d2:	fbb0 f0f1 	udiv	r0, r0, r1
   108d6:	1a20      	subs	r0, r4, r0
   108d8:	bd10      	pop	{r4, pc}

000108da <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   108da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108de:	2902      	cmp	r1, #2
   108e0:	d008      	beq.n	108f4 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   108e2:	f240 51dc 	movw	r1, #1500	; 0x5dc
   108e6:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   108ea:	fbb1 f1f2 	udiv	r1, r1, r2
   108ee:	4408      	add	r0, r1
   108f0:	1e80      	subs	r0, r0, #2
   108f2:	4770      	bx	lr
   108f4:	4611      	mov	r1, r2
   108f6:	e7f6      	b.n	108e6 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

000108f8 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   108f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   108fc:	2902      	cmp	r1, #2
   108fe:	d007      	beq.n	10910 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10900:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10904:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   10908:	fbb1 f1f2 	udiv	r1, r1, r2
   1090c:	4408      	add	r0, r1
   1090e:	4770      	bx	lr
   10910:	4611      	mov	r1, r2
   10912:	e7f7      	b.n	10904 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10914:	1702080c 	.word	0x1702080c
   10918:	0201010d 	.word	0x0201010d
   1091c:	01010909 	.word	0x01010909
   10920:	18090206 	.word	0x18090206
   10924:	01010318 	.word	0x01010318
   10928:	03030909 	.word	0x03030909
   1092c:	05          	.byte	0x05
   1092d:	55          	.byte	0x55
   1092e:	5555      	.short	0x5555
   10930:	2625      	.short	0x2625
   10932:	27          	.byte	0x27
   10933:	01          	.byte	0x01
   10934:	0103      	.short	0x0103
   10936:	01          	.byte	0x01
   10937:	01          	.byte	0x01

00010938 <scan_connecting_error>:
	printk("Filters matched. Address: %s connectable: %s\n",
		addr, connectable ? "yes" : "no");
}

static void scan_connecting_error(struct bt_scan_device_info *device_info)
{
   10938:	b508      	push	{r3, lr}
	printk("Connecting failed\n");
   1093a:	4802      	ldr	r0, [pc, #8]	; (10944 <scan_connecting_error+0xc>)
   1093c:	f015 f98a 	bl	25c54 <printk>
}
   10940:	bd08      	pop	{r3, pc}
   10942:	bf00      	nop
   10944:	0002c848 	.word	0x0002c848

00010948 <scan_init>:
	.connected = connected,
	.disconnected = disconnected,
};

static void scan_init(void)
{
   10948:	b500      	push	{lr}
   1094a:	b087      	sub	sp, #28
	int err;

	struct bt_scan_init_param scan_init = {
   1094c:	2300      	movs	r3, #0
   1094e:	9301      	str	r3, [sp, #4]
   10950:	2301      	movs	r3, #1
   10952:	f88d 3008 	strb.w	r3, [sp, #8]
		.connect_if_match = 1,
		.scan_param = NULL,
		.conn_param = BT_LE_CONN_PARAM_DEFAULT
   10956:	4a12      	ldr	r2, [pc, #72]	; (109a0 <scan_init+0x58>)
   10958:	ab04      	add	r3, sp, #16
   1095a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1095e:	e883 0003 	stmia.w	r3, {r0, r1}
	struct bt_scan_init_param scan_init = {
   10962:	9303      	str	r3, [sp, #12]
	};

	bt_scan_init(&scan_init);
   10964:	a801      	add	r0, sp, #4
   10966:	f003 fe5f 	bl	14628 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   1096a:	480e      	ldr	r0, [pc, #56]	; (109a4 <scan_init+0x5c>)
   1096c:	f003 fd60 	bl	14430 <bt_scan_cb_register>

	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_UUID, ttpms_uuids);
   10970:	490d      	ldr	r1, [pc, #52]	; (109a8 <scan_init+0x60>)
   10972:	2003      	movs	r0, #3
   10974:	f003 fd6e 	bl	14454 <bt_scan_filter_add>
	if (err) {
   10978:	b940      	cbnz	r0, 1098c <scan_init+0x44>
		printk("Scanning filters cannot be set (err %d)\n", err);

		return;
	}

	err = bt_scan_filter_enable(BT_SCAN_UUID_FILTER, false);
   1097a:	2100      	movs	r1, #0
   1097c:	2004      	movs	r0, #4
   1097e:	f003 fdb3 	bl	144e8 <bt_scan_filter_enable>
	if (err) {
   10982:	4601      	mov	r1, r0
   10984:	b938      	cbnz	r0, 10996 <scan_init+0x4e>
		printk("Filters cannot be turned on (err %d)\n", err);
	}
}
   10986:	b007      	add	sp, #28
   10988:	f85d fb04 	ldr.w	pc, [sp], #4
   1098c:	4601      	mov	r1, r0
		printk("Scanning filters cannot be set (err %d)\n", err);
   1098e:	4807      	ldr	r0, [pc, #28]	; (109ac <scan_init+0x64>)
   10990:	f015 f960 	bl	25c54 <printk>
		return;
   10994:	e7f7      	b.n	10986 <scan_init+0x3e>
		printk("Filters cannot be turned on (err %d)\n", err);
   10996:	4806      	ldr	r0, [pc, #24]	; (109b0 <scan_init+0x68>)
   10998:	f015 f95c 	bl	25c54 <printk>
   1099c:	e7f3      	b.n	10986 <scan_init+0x3e>
   1099e:	bf00      	nop
   109a0:	0002c780 	.word	0x0002c780
   109a4:	20000408 	.word	0x20000408
   109a8:	20000410 	.word	0x20000410
   109ac:	0002c85c 	.word	0x0002c85c
   109b0:	0002c888 	.word	0x0002c888

000109b4 <scan_connecting>:
{
   109b4:	b508      	push	{r3, lr}
	default_conn = bt_conn_ref(conn);
   109b6:	4608      	mov	r0, r1
   109b8:	f017 fcd0 	bl	2835c <bt_conn_ref>
   109bc:	4b01      	ldr	r3, [pc, #4]	; (109c4 <scan_connecting+0x10>)
   109be:	6018      	str	r0, [r3, #0]
}
   109c0:	bd08      	pop	{r3, pc}
   109c2:	bf00      	nop
   109c4:	200022c8 	.word	0x200022c8

000109c8 <scan_filter_no_match>:
	if (device_info->recv_info->adv_type == BT_GAP_ADV_TYPE_ADV_DIRECT_IND) {
   109c8:	6803      	ldr	r3, [r0, #0]
   109ca:	79da      	ldrb	r2, [r3, #7]
   109cc:	2a01      	cmp	r2, #1
   109ce:	d000      	beq.n	109d2 <scan_filter_no_match+0xa>
   109d0:	4770      	bx	lr
{
   109d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   109d4:	b097      	sub	sp, #92	; 0x5c
   109d6:	4604      	mov	r4, r0
		bt_addr_le_to_str(device_info->recv_info->addr, addr,
   109d8:	681d      	ldr	r5, [r3, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   109da:	782b      	ldrb	r3, [r5, #0]
   109dc:	2b03      	cmp	r3, #3
   109de:	d83e      	bhi.n	10a5e <scan_filter_no_match+0x96>
   109e0:	e8df f003 	tbb	[pc, r3]
   109e4:	38332e02 	.word	0x38332e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   109e8:	4924      	ldr	r1, [pc, #144]	; (10a7c <scan_filter_no_match+0xb4>)
   109ea:	a806      	add	r0, sp, #24
   109ec:	f017 f8c4 	bl	27b78 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   109f0:	79ab      	ldrb	r3, [r5, #6]
   109f2:	796a      	ldrb	r2, [r5, #5]
   109f4:	7929      	ldrb	r1, [r5, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   109f6:	78e8      	ldrb	r0, [r5, #3]
   109f8:	78ae      	ldrb	r6, [r5, #2]
   109fa:	786d      	ldrb	r5, [r5, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   109fc:	af06      	add	r7, sp, #24
   109fe:	9705      	str	r7, [sp, #20]
   10a00:	9504      	str	r5, [sp, #16]
   10a02:	9603      	str	r6, [sp, #12]
   10a04:	9002      	str	r0, [sp, #8]
   10a06:	9101      	str	r1, [sp, #4]
   10a08:	9200      	str	r2, [sp, #0]
   10a0a:	4a1d      	ldr	r2, [pc, #116]	; (10a80 <scan_filter_no_match+0xb8>)
   10a0c:	211e      	movs	r1, #30
   10a0e:	a809      	add	r0, sp, #36	; 0x24
   10a10:	f015 f92e 	bl	25c70 <snprintk>
		printk("Direct advertising received from %s\n", addr);
   10a14:	a909      	add	r1, sp, #36	; 0x24
   10a16:	481b      	ldr	r0, [pc, #108]	; (10a84 <scan_filter_no_match+0xbc>)
   10a18:	f015 f91c 	bl	25c54 <printk>
		bt_scan_stop();
   10a1c:	f016 fed6 	bl	277cc <bt_scan_stop>
		err = bt_conn_le_create(device_info->recv_info->addr,
   10a20:	6823      	ldr	r3, [r4, #0]
   10a22:	681e      	ldr	r6, [r3, #0]
					BT_CONN_LE_CREATE_CONN,
   10a24:	ad12      	add	r5, sp, #72	; 0x48
   10a26:	4b18      	ldr	r3, [pc, #96]	; (10a88 <scan_filter_no_match+0xc0>)
   10a28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10a2a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		err = bt_conn_le_create(device_info->recv_info->addr,
   10a2e:	ab11      	add	r3, sp, #68	; 0x44
   10a30:	6862      	ldr	r2, [r4, #4]
   10a32:	4629      	mov	r1, r5
   10a34:	4630      	mov	r0, r6
   10a36:	f008 fd87 	bl	19548 <bt_conn_le_create>
		if (!err) {
   10a3a:	b1b0      	cbz	r0, 10a6a <scan_filter_no_match+0xa2>
}
   10a3c:	b017      	add	sp, #92	; 0x5c
   10a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10a40:	4912      	ldr	r1, [pc, #72]	; (10a8c <scan_filter_no_match+0xc4>)
   10a42:	a806      	add	r0, sp, #24
   10a44:	f017 f898 	bl	27b78 <strcpy>
		break;
   10a48:	e7d2      	b.n	109f0 <scan_filter_no_match+0x28>
		strcpy(type, "public-id");
   10a4a:	4911      	ldr	r1, [pc, #68]	; (10a90 <scan_filter_no_match+0xc8>)
   10a4c:	a806      	add	r0, sp, #24
   10a4e:	f017 f893 	bl	27b78 <strcpy>
		break;
   10a52:	e7cd      	b.n	109f0 <scan_filter_no_match+0x28>
		strcpy(type, "random-id");
   10a54:	490f      	ldr	r1, [pc, #60]	; (10a94 <scan_filter_no_match+0xcc>)
   10a56:	a806      	add	r0, sp, #24
   10a58:	f017 f88e 	bl	27b78 <strcpy>
		break;
   10a5c:	e7c8      	b.n	109f0 <scan_filter_no_match+0x28>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10a5e:	4a0e      	ldr	r2, [pc, #56]	; (10a98 <scan_filter_no_match+0xd0>)
   10a60:	210a      	movs	r1, #10
   10a62:	a806      	add	r0, sp, #24
   10a64:	f015 f904 	bl	25c70 <snprintk>
		break;
   10a68:	e7c2      	b.n	109f0 <scan_filter_no_match+0x28>
			default_conn = bt_conn_ref(conn);
   10a6a:	9811      	ldr	r0, [sp, #68]	; 0x44
   10a6c:	f017 fc76 	bl	2835c <bt_conn_ref>
   10a70:	4b0a      	ldr	r3, [pc, #40]	; (10a9c <scan_filter_no_match+0xd4>)
   10a72:	6018      	str	r0, [r3, #0]
			bt_conn_unref(conn);
   10a74:	9811      	ldr	r0, [sp, #68]	; 0x44
   10a76:	f017 fc98 	bl	283aa <bt_conn_unref>
}
   10a7a:	e7df      	b.n	10a3c <scan_filter_no_match+0x74>
   10a7c:	0002c8b0 	.word	0x0002c8b0
   10a80:	0002c8d8 	.word	0x0002c8d8
   10a84:	0002c8fc 	.word	0x0002c8fc
   10a88:	0002c788 	.word	0x0002c788
   10a8c:	0002c8b8 	.word	0x0002c8b8
   10a90:	0002c8c0 	.word	0x0002c8c0
   10a94:	0002c8cc 	.word	0x0002c8cc
   10a98:	0002e70c 	.word	0x0002e70c
   10a9c:	200022c8 	.word	0x200022c8

00010aa0 <scan_filter_match>:
{
   10aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10aa2:	b093      	sub	sp, #76	; 0x4c
   10aa4:	4615      	mov	r5, r2
	bt_addr_le_to_str(device_info->recv_info->addr, addr, sizeof(addr));
   10aa6:	6803      	ldr	r3, [r0, #0]
   10aa8:	681c      	ldr	r4, [r3, #0]
	switch (addr->type) {
   10aaa:	7823      	ldrb	r3, [r4, #0]
   10aac:	2b03      	cmp	r3, #3
   10aae:	d830      	bhi.n	10b12 <scan_filter_match+0x72>
   10ab0:	e8df f003 	tbb	[pc, r3]
   10ab4:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
   10ab8:	491a      	ldr	r1, [pc, #104]	; (10b24 <scan_filter_match+0x84>)
   10aba:	a807      	add	r0, sp, #28
   10abc:	f017 f85c 	bl	27b78 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10ac0:	79a3      	ldrb	r3, [r4, #6]
   10ac2:	7962      	ldrb	r2, [r4, #5]
   10ac4:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10ac6:	78e0      	ldrb	r0, [r4, #3]
   10ac8:	78a6      	ldrb	r6, [r4, #2]
   10aca:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10acc:	af07      	add	r7, sp, #28
   10ace:	9705      	str	r7, [sp, #20]
   10ad0:	9404      	str	r4, [sp, #16]
   10ad2:	9603      	str	r6, [sp, #12]
   10ad4:	9002      	str	r0, [sp, #8]
   10ad6:	9101      	str	r1, [sp, #4]
   10ad8:	9200      	str	r2, [sp, #0]
   10ada:	4a13      	ldr	r2, [pc, #76]	; (10b28 <scan_filter_match+0x88>)
   10adc:	211e      	movs	r1, #30
   10ade:	a80a      	add	r0, sp, #40	; 0x28
   10ae0:	f015 f8c6 	bl	25c70 <snprintk>
	printk("Filters matched. Address: %s connectable: %s\n",
   10ae4:	b1dd      	cbz	r5, 10b1e <scan_filter_match+0x7e>
   10ae6:	4a11      	ldr	r2, [pc, #68]	; (10b2c <scan_filter_match+0x8c>)
   10ae8:	a90a      	add	r1, sp, #40	; 0x28
   10aea:	4811      	ldr	r0, [pc, #68]	; (10b30 <scan_filter_match+0x90>)
   10aec:	f015 f8b2 	bl	25c54 <printk>
}
   10af0:	b013      	add	sp, #76	; 0x4c
   10af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10af4:	490f      	ldr	r1, [pc, #60]	; (10b34 <scan_filter_match+0x94>)
   10af6:	a807      	add	r0, sp, #28
   10af8:	f017 f83e 	bl	27b78 <strcpy>
		break;
   10afc:	e7e0      	b.n	10ac0 <scan_filter_match+0x20>
		strcpy(type, "public-id");
   10afe:	490e      	ldr	r1, [pc, #56]	; (10b38 <scan_filter_match+0x98>)
   10b00:	a807      	add	r0, sp, #28
   10b02:	f017 f839 	bl	27b78 <strcpy>
		break;
   10b06:	e7db      	b.n	10ac0 <scan_filter_match+0x20>
		strcpy(type, "random-id");
   10b08:	490c      	ldr	r1, [pc, #48]	; (10b3c <scan_filter_match+0x9c>)
   10b0a:	a807      	add	r0, sp, #28
   10b0c:	f017 f834 	bl	27b78 <strcpy>
		break;
   10b10:	e7d6      	b.n	10ac0 <scan_filter_match+0x20>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10b12:	4a0b      	ldr	r2, [pc, #44]	; (10b40 <scan_filter_match+0xa0>)
   10b14:	210a      	movs	r1, #10
   10b16:	a807      	add	r0, sp, #28
   10b18:	f015 f8aa 	bl	25c70 <snprintk>
		break;
   10b1c:	e7d0      	b.n	10ac0 <scan_filter_match+0x20>
	printk("Filters matched. Address: %s connectable: %s\n",
   10b1e:	4a09      	ldr	r2, [pc, #36]	; (10b44 <scan_filter_match+0xa4>)
   10b20:	e7e2      	b.n	10ae8 <scan_filter_match+0x48>
   10b22:	bf00      	nop
   10b24:	0002c8b0 	.word	0x0002c8b0
   10b28:	0002c8d8 	.word	0x0002c8d8
   10b2c:	0002c928 	.word	0x0002c928
   10b30:	0002c92c 	.word	0x0002c92c
   10b34:	0002c8b8 	.word	0x0002c8b8
   10b38:	0002c8c0 	.word	0x0002c8c0
   10b3c:	0002c8cc 	.word	0x0002c8cc
   10b40:	0002e70c 	.word	0x0002e70c
   10b44:	0002c924 	.word	0x0002c924

00010b48 <disconnected>:
{
   10b48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10b4a:	b093      	sub	sp, #76	; 0x4c
   10b4c:	4605      	mov	r5, r0
   10b4e:	460e      	mov	r6, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10b50:	f017 fcac 	bl	284ac <bt_conn_get_dst>
   10b54:	4604      	mov	r4, r0
	switch (addr->type) {
   10b56:	7803      	ldrb	r3, [r0, #0]
   10b58:	2b03      	cmp	r3, #3
   10b5a:	d835      	bhi.n	10bc8 <disconnected+0x80>
   10b5c:	e8df f003 	tbb	[pc, r3]
   10b60:	2f2a2502 	.word	0x2f2a2502
		strcpy(type, "public");
   10b64:	4923      	ldr	r1, [pc, #140]	; (10bf4 <disconnected+0xac>)
   10b66:	a807      	add	r0, sp, #28
   10b68:	f017 f806 	bl	27b78 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10b6c:	79a3      	ldrb	r3, [r4, #6]
   10b6e:	7962      	ldrb	r2, [r4, #5]
   10b70:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10b72:	78e0      	ldrb	r0, [r4, #3]
   10b74:	78a7      	ldrb	r7, [r4, #2]
   10b76:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10b78:	f10d 0c1c 	add.w	ip, sp, #28
   10b7c:	f8cd c014 	str.w	ip, [sp, #20]
   10b80:	9404      	str	r4, [sp, #16]
   10b82:	9703      	str	r7, [sp, #12]
   10b84:	9002      	str	r0, [sp, #8]
   10b86:	9101      	str	r1, [sp, #4]
   10b88:	9200      	str	r2, [sp, #0]
   10b8a:	4a1b      	ldr	r2, [pc, #108]	; (10bf8 <disconnected+0xb0>)
   10b8c:	211e      	movs	r1, #30
   10b8e:	a80a      	add	r0, sp, #40	; 0x28
   10b90:	f015 f86e 	bl	25c70 <snprintk>
	printk("Disconnected: %s (reason %u)\n", addr, reason);
   10b94:	4632      	mov	r2, r6
   10b96:	a90a      	add	r1, sp, #40	; 0x28
   10b98:	4818      	ldr	r0, [pc, #96]	; (10bfc <disconnected+0xb4>)
   10b9a:	f015 f85b 	bl	25c54 <printk>
	if (default_conn != conn) {
   10b9e:	4b18      	ldr	r3, [pc, #96]	; (10c00 <disconnected+0xb8>)
   10ba0:	6818      	ldr	r0, [r3, #0]
   10ba2:	42a8      	cmp	r0, r5
   10ba4:	d016      	beq.n	10bd4 <disconnected+0x8c>
}
   10ba6:	b013      	add	sp, #76	; 0x4c
   10ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10baa:	4916      	ldr	r1, [pc, #88]	; (10c04 <disconnected+0xbc>)
   10bac:	a807      	add	r0, sp, #28
   10bae:	f016 ffe3 	bl	27b78 <strcpy>
		break;
   10bb2:	e7db      	b.n	10b6c <disconnected+0x24>
		strcpy(type, "public-id");
   10bb4:	4914      	ldr	r1, [pc, #80]	; (10c08 <disconnected+0xc0>)
   10bb6:	a807      	add	r0, sp, #28
   10bb8:	f016 ffde 	bl	27b78 <strcpy>
		break;
   10bbc:	e7d6      	b.n	10b6c <disconnected+0x24>
		strcpy(type, "random-id");
   10bbe:	4913      	ldr	r1, [pc, #76]	; (10c0c <disconnected+0xc4>)
   10bc0:	a807      	add	r0, sp, #28
   10bc2:	f016 ffd9 	bl	27b78 <strcpy>
		break;
   10bc6:	e7d1      	b.n	10b6c <disconnected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10bc8:	4a11      	ldr	r2, [pc, #68]	; (10c10 <disconnected+0xc8>)
   10bca:	210a      	movs	r1, #10
   10bcc:	a807      	add	r0, sp, #28
   10bce:	f015 f84f 	bl	25c70 <snprintk>
		break;
   10bd2:	e7cb      	b.n	10b6c <disconnected+0x24>
	bt_conn_unref(default_conn);
   10bd4:	f017 fbe9 	bl	283aa <bt_conn_unref>
	default_conn = NULL;
   10bd8:	4b09      	ldr	r3, [pc, #36]	; (10c00 <disconnected+0xb8>)
   10bda:	2200      	movs	r2, #0
   10bdc:	601a      	str	r2, [r3, #0]
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10bde:	2001      	movs	r0, #1
   10be0:	f003 fd56 	bl	14690 <bt_scan_start>
	if (err) {
   10be4:	4601      	mov	r1, r0
   10be6:	2800      	cmp	r0, #0
   10be8:	d0dd      	beq.n	10ba6 <disconnected+0x5e>
		printk("Scanning failed to start (err %d)\n", err);
   10bea:	480a      	ldr	r0, [pc, #40]	; (10c14 <disconnected+0xcc>)
   10bec:	f015 f832 	bl	25c54 <printk>
   10bf0:	e7d9      	b.n	10ba6 <disconnected+0x5e>
   10bf2:	bf00      	nop
   10bf4:	0002c8b0 	.word	0x0002c8b0
   10bf8:	0002c8d8 	.word	0x0002c8d8
   10bfc:	0002c95c 	.word	0x0002c95c
   10c00:	200022c8 	.word	0x200022c8
   10c04:	0002c8b8 	.word	0x0002c8b8
   10c08:	0002c8c0 	.word	0x0002c8c0
   10c0c:	0002c8cc 	.word	0x0002c8cc
   10c10:	0002e70c 	.word	0x0002e70c
   10c14:	0002c97c 	.word	0x0002c97c

00010c18 <connected>:
{
   10c18:	b5f0      	push	{r4, r5, r6, r7, lr}
   10c1a:	b093      	sub	sp, #76	; 0x4c
   10c1c:	4606      	mov	r6, r0
   10c1e:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10c20:	f017 fc44 	bl	284ac <bt_conn_get_dst>
   10c24:	4604      	mov	r4, r0
	switch (addr->type) {
   10c26:	7803      	ldrb	r3, [r0, #0]
   10c28:	2b03      	cmp	r3, #3
   10c2a:	d831      	bhi.n	10c90 <connected+0x78>
   10c2c:	e8df f003 	tbb	[pc, r3]
   10c30:	2b262102 	.word	0x2b262102
		strcpy(type, "public");
   10c34:	4925      	ldr	r1, [pc, #148]	; (10ccc <connected+0xb4>)
   10c36:	a807      	add	r0, sp, #28
   10c38:	f016 ff9e 	bl	27b78 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   10c3c:	79a3      	ldrb	r3, [r4, #6]
   10c3e:	7962      	ldrb	r2, [r4, #5]
   10c40:	7921      	ldrb	r1, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   10c42:	78e0      	ldrb	r0, [r4, #3]
   10c44:	78a7      	ldrb	r7, [r4, #2]
   10c46:	7864      	ldrb	r4, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   10c48:	f10d 0c1c 	add.w	ip, sp, #28
   10c4c:	f8cd c014 	str.w	ip, [sp, #20]
   10c50:	9404      	str	r4, [sp, #16]
   10c52:	9703      	str	r7, [sp, #12]
   10c54:	9002      	str	r0, [sp, #8]
   10c56:	9101      	str	r1, [sp, #4]
   10c58:	9200      	str	r2, [sp, #0]
   10c5a:	4a1d      	ldr	r2, [pc, #116]	; (10cd0 <connected+0xb8>)
   10c5c:	211e      	movs	r1, #30
   10c5e:	a80a      	add	r0, sp, #40	; 0x28
   10c60:	f015 f806 	bl	25c70 <snprintk>
	if (conn_err) {
   10c64:	b9d5      	cbnz	r5, 10c9c <connected+0x84>
	printk("Connected: %s\n", addr);
   10c66:	a90a      	add	r1, sp, #40	; 0x28
   10c68:	481a      	ldr	r0, [pc, #104]	; (10cd4 <connected+0xbc>)
   10c6a:	f014 fff3 	bl	25c54 <printk>
}
   10c6e:	b013      	add	sp, #76	; 0x4c
   10c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   10c72:	4919      	ldr	r1, [pc, #100]	; (10cd8 <connected+0xc0>)
   10c74:	a807      	add	r0, sp, #28
   10c76:	f016 ff7f 	bl	27b78 <strcpy>
		break;
   10c7a:	e7df      	b.n	10c3c <connected+0x24>
		strcpy(type, "public-id");
   10c7c:	4917      	ldr	r1, [pc, #92]	; (10cdc <connected+0xc4>)
   10c7e:	a807      	add	r0, sp, #28
   10c80:	f016 ff7a 	bl	27b78 <strcpy>
		break;
   10c84:	e7da      	b.n	10c3c <connected+0x24>
		strcpy(type, "random-id");
   10c86:	4916      	ldr	r1, [pc, #88]	; (10ce0 <connected+0xc8>)
   10c88:	a807      	add	r0, sp, #28
   10c8a:	f016 ff75 	bl	27b78 <strcpy>
		break;
   10c8e:	e7d5      	b.n	10c3c <connected+0x24>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   10c90:	4a14      	ldr	r2, [pc, #80]	; (10ce4 <connected+0xcc>)
   10c92:	210a      	movs	r1, #10
   10c94:	a807      	add	r0, sp, #28
   10c96:	f014 ffeb 	bl	25c70 <snprintk>
		break;
   10c9a:	e7cf      	b.n	10c3c <connected+0x24>
		printk("Failed to connect to %s (%u)\n", addr, conn_err);
   10c9c:	462a      	mov	r2, r5
   10c9e:	a90a      	add	r1, sp, #40	; 0x28
   10ca0:	4811      	ldr	r0, [pc, #68]	; (10ce8 <connected+0xd0>)
   10ca2:	f014 ffd7 	bl	25c54 <printk>
		if (conn == default_conn) {
   10ca6:	4b11      	ldr	r3, [pc, #68]	; (10cec <connected+0xd4>)
   10ca8:	6818      	ldr	r0, [r3, #0]
   10caa:	42b0      	cmp	r0, r6
   10cac:	d1df      	bne.n	10c6e <connected+0x56>
			bt_conn_unref(default_conn);
   10cae:	f017 fb7c 	bl	283aa <bt_conn_unref>
			default_conn = NULL;
   10cb2:	4b0e      	ldr	r3, [pc, #56]	; (10cec <connected+0xd4>)
   10cb4:	2200      	movs	r2, #0
   10cb6:	601a      	str	r2, [r3, #0]
			err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10cb8:	2001      	movs	r0, #1
   10cba:	f003 fce9 	bl	14690 <bt_scan_start>
			if (err) {
   10cbe:	4601      	mov	r1, r0
   10cc0:	2800      	cmp	r0, #0
   10cc2:	d0d4      	beq.n	10c6e <connected+0x56>
				printk("Scanning failed to start (err %d)\n",
   10cc4:	480a      	ldr	r0, [pc, #40]	; (10cf0 <connected+0xd8>)
   10cc6:	f014 ffc5 	bl	25c54 <printk>
		return;
   10cca:	e7d0      	b.n	10c6e <connected+0x56>
   10ccc:	0002c8b0 	.word	0x0002c8b0
   10cd0:	0002c8d8 	.word	0x0002c8d8
   10cd4:	0002c9c0 	.word	0x0002c9c0
   10cd8:	0002c8b8 	.word	0x0002c8b8
   10cdc:	0002c8c0 	.word	0x0002c8c0
   10ce0:	0002c8cc 	.word	0x0002c8cc
   10ce4:	0002e70c 	.word	0x0002e70c
   10ce8:	0002c9a0 	.word	0x0002c9a0
   10cec:	200022c8 	.word	0x200022c8
   10cf0:	0002c97c 	.word	0x0002c97c

00010cf4 <main>:

void main(void)
{
   10cf4:	b500      	push	{lr}
   10cf6:	b083      	sub	sp, #12
	const struct device *dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
	uint32_t dtr = 0;
   10cf8:	2000      	movs	r0, #0
   10cfa:	9001      	str	r0, [sp, #4]

	if (usb_enable(NULL)) {
   10cfc:	f002 fa58 	bl	131b0 <usb_enable>
   10d00:	b158      	cbz	r0, 10d1a <main+0x26>
		printk("Scanning failed to start (err %d)\n", err);
		return;
	}

	printk("Scanning successfully started\n");
}
   10d02:	b003      	add	sp, #12
   10d04:	f85d fb04 	ldr.w	pc, [sp], #4
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
   10d08:	aa01      	add	r2, sp, #4
   10d0a:	2104      	movs	r1, #4
   10d0c:	4816      	ldr	r0, [pc, #88]	; (10d68 <main+0x74>)
   10d0e:	4798      	blx	r3
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   10d10:	f640 40cd 	movw	r0, #3277	; 0xccd
   10d14:	2100      	movs	r1, #0
   10d16:	f011 fd65 	bl	227e4 <z_impl_k_sleep>
	while (!dtr) {
   10d1a:	9b01      	ldr	r3, [sp, #4]
   10d1c:	b92b      	cbnz	r3, 10d2a <main+0x36>
	const struct uart_driver_api *api =
   10d1e:	4b12      	ldr	r3, [pc, #72]	; (10d68 <main+0x74>)
   10d20:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_get == NULL) {
   10d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   10d24:	2b00      	cmp	r3, #0
   10d26:	d1ef      	bne.n	10d08 <main+0x14>
   10d28:	e7f2      	b.n	10d10 <main+0x1c>
	printk("Starting TTPMS Dongle\n");
   10d2a:	4810      	ldr	r0, [pc, #64]	; (10d6c <main+0x78>)
   10d2c:	f014 ff92 	bl	25c54 <printk>
	err = bt_enable(NULL);
   10d30:	2000      	movs	r0, #0
   10d32:	f007 f89b 	bl	17e6c <bt_enable>
	if (err) {
   10d36:	4601      	mov	r1, r0
   10d38:	b968      	cbnz	r0, 10d56 <main+0x62>
	printk("Bluetooth initialized\n");
   10d3a:	480d      	ldr	r0, [pc, #52]	; (10d70 <main+0x7c>)
   10d3c:	f014 ff8a 	bl	25c54 <printk>
	scan_init();
   10d40:	f7ff fe02 	bl	10948 <scan_init>
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10d44:	2001      	movs	r0, #1
   10d46:	f003 fca3 	bl	14690 <bt_scan_start>
	if (err) {
   10d4a:	4601      	mov	r1, r0
   10d4c:	b938      	cbnz	r0, 10d5e <main+0x6a>
	printk("Scanning successfully started\n");
   10d4e:	4809      	ldr	r0, [pc, #36]	; (10d74 <main+0x80>)
   10d50:	f014 ff80 	bl	25c54 <printk>
   10d54:	e7d5      	b.n	10d02 <main+0xe>
		printk("Bluetooth init failed (err %d)\n", err);
   10d56:	4808      	ldr	r0, [pc, #32]	; (10d78 <main+0x84>)
   10d58:	f014 ff7c 	bl	25c54 <printk>
		return;
   10d5c:	e7d1      	b.n	10d02 <main+0xe>
		printk("Scanning failed to start (err %d)\n", err);
   10d5e:	4807      	ldr	r0, [pc, #28]	; (10d7c <main+0x88>)
   10d60:	f014 ff78 	bl	25c54 <printk>
		return;
   10d64:	e7cd      	b.n	10d02 <main+0xe>
   10d66:	bf00      	nop
   10d68:	0002c388 	.word	0x0002c388
   10d6c:	0002c9d0 	.word	0x0002c9d0
   10d70:	0002ca08 	.word	0x0002ca08
   10d74:	0002ca20 	.word	0x0002ca20
   10d78:	0002c9e8 	.word	0x0002c9e8
   10d7c:	0002c97c 	.word	0x0002c97c

00010d80 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
   10d80:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
   10d82:	680b      	ldr	r3, [r1, #0]
   10d84:	3301      	adds	r3, #1
   10d86:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   10d88:	4b01      	ldr	r3, [pc, #4]	; (10d90 <char_out+0x10>)
   10d8a:	681b      	ldr	r3, [r3, #0]
   10d8c:	4798      	blx	r3
}
   10d8e:	bd08      	pop	{r3, pc}
   10d90:	20000454 	.word	0x20000454

00010d94 <__printk_hook_install>:
	_char_out = fn;
   10d94:	4b01      	ldr	r3, [pc, #4]	; (10d9c <__printk_hook_install+0x8>)
   10d96:	6018      	str	r0, [r3, #0]
}
   10d98:	4770      	bx	lr
   10d9a:	bf00      	nop
   10d9c:	20000454 	.word	0x20000454

00010da0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10da0:	b500      	push	{lr}
   10da2:	b083      	sub	sp, #12
   10da4:	4602      	mov	r2, r0
   10da6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   10da8:	2100      	movs	r1, #0
   10daa:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10dac:	a901      	add	r1, sp, #4
   10dae:	4803      	ldr	r0, [pc, #12]	; (10dbc <vprintk+0x1c>)
   10db0:	f000 f8c8 	bl	10f44 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   10db4:	b003      	add	sp, #12
   10db6:	f85d fb04 	ldr.w	pc, [sp], #4
   10dba:	bf00      	nop
   10dbc:	00010d81 	.word	0x00010d81

00010dc0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10dc0:	b510      	push	{r4, lr}
   10dc2:	b084      	sub	sp, #16
   10dc4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   10dc6:	9001      	str	r0, [sp, #4]
   10dc8:	9102      	str	r1, [sp, #8]
   10dca:	2100      	movs	r1, #0
   10dcc:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
   10dce:	a901      	add	r1, sp, #4
   10dd0:	4805      	ldr	r0, [pc, #20]	; (10de8 <vsnprintk+0x28>)
   10dd2:	f000 f8b7 	bl	10f44 <cbvprintf>

	if (ctx.count < ctx.max) {
   10dd6:	9b03      	ldr	r3, [sp, #12]
   10dd8:	9a02      	ldr	r2, [sp, #8]
   10dda:	4293      	cmp	r3, r2
   10ddc:	da01      	bge.n	10de2 <vsnprintk+0x22>
		str[ctx.count] = '\0';
   10dde:	2200      	movs	r2, #0
   10de0:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
   10de2:	9803      	ldr	r0, [sp, #12]
   10de4:	b004      	add	sp, #16
   10de6:	bd10      	pop	{r4, pc}
   10de8:	00025c25 	.word	0x00025c25

00010dec <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   10dec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10df0:	b083      	sub	sp, #12
   10df2:	4604      	mov	r4, r0
   10df4:	4608      	mov	r0, r1
   10df6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10df8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10dfa:	f013 0f08 	tst.w	r3, #8
   10dfe:	d105      	bne.n	10e0c <process_event+0x20>
   10e00:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   10e04:	2300      	movs	r3, #0
   10e06:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
   10e08:	9301      	str	r3, [sp, #4]
}
   10e0a:	e069      	b.n	10ee0 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
   10e0c:	2901      	cmp	r1, #1
   10e0e:	d009      	beq.n	10e24 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10e10:	f043 0320 	orr.w	r3, r3, #32
   10e14:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10e16:	f385 8811 	msr	BASEPRI, r5
   10e1a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   10e1e:	b003      	add	sp, #12
   10e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10e24:	f043 0310 	orr.w	r3, r3, #16
   10e28:	8323      	strh	r3, [r4, #24]
   10e2a:	e7f4      	b.n	10e16 <process_event+0x2a>
			evt = process_recheck(mgr);
   10e2c:	4620      	mov	r0, r4
   10e2e:	f014 ff54 	bl	25cda <process_recheck>
   10e32:	e057      	b.n	10ee4 <process_event+0xf8>
			res = mgr->last_res;
   10e34:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
   10e38:	464a      	mov	r2, r9
   10e3a:	4669      	mov	r1, sp
   10e3c:	4620      	mov	r0, r4
   10e3e:	f014 ff65 	bl	25d0c <process_complete>
		onoff_transition_fn transit = NULL;
   10e42:	2700      	movs	r7, #0
   10e44:	e05a      	b.n	10efc <process_event+0x110>
			transit = mgr->transitions->start;
   10e46:	6923      	ldr	r3, [r4, #16]
   10e48:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
   10e4a:	2106      	movs	r1, #6
   10e4c:	4620      	mov	r0, r4
   10e4e:	f014 ff1d 	bl	25c8c <set_state>
		res = 0;
   10e52:	f04f 0900 	mov.w	r9, #0
   10e56:	e051      	b.n	10efc <process_event+0x110>
			transit = mgr->transitions->stop;
   10e58:	6923      	ldr	r3, [r4, #16]
   10e5a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
   10e5c:	2104      	movs	r1, #4
   10e5e:	4620      	mov	r0, r4
   10e60:	f014 ff14 	bl	25c8c <set_state>
		res = 0;
   10e64:	f04f 0900 	mov.w	r9, #0
   10e68:	e048      	b.n	10efc <process_event+0x110>
			transit = mgr->transitions->reset;
   10e6a:	6923      	ldr	r3, [r4, #16]
   10e6c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
   10e6e:	2105      	movs	r1, #5
   10e70:	4620      	mov	r0, r4
   10e72:	f014 ff0b 	bl	25c8c <set_state>
		res = 0;
   10e76:	f04f 0900 	mov.w	r9, #0
   10e7a:	e03f      	b.n	10efc <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
   10e7c:	2200      	movs	r2, #0
   10e7e:	e046      	b.n	10f0e <process_event+0x122>
   10e80:	2200      	movs	r2, #0
   10e82:	e044      	b.n	10f0e <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   10e84:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
   10e88:	8323      	strh	r3, [r4, #24]
   10e8a:	f385 8811 	msr	BASEPRI, r5
   10e8e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10e92:	2900      	cmp	r1, #0
   10e94:	d144      	bne.n	10f20 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10e96:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
   10e98:	b12b      	cbz	r3, 10ea6 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
   10e9a:	464b      	mov	r3, r9
   10e9c:	4642      	mov	r2, r8
   10e9e:	4669      	mov	r1, sp
   10ea0:	4620      	mov	r0, r4
   10ea2:	f014 ffa9 	bl	25df8 <notify_all>
			if (transit != NULL) {
   10ea6:	b117      	cbz	r7, 10eae <process_event+0xc2>
				transit(mgr, transition_complete);
   10ea8:	4925      	ldr	r1, [pc, #148]	; (10f40 <process_event+0x154>)
   10eaa:	4620      	mov	r0, r4
   10eac:	47b8      	blx	r7
	__asm__ volatile(
   10eae:	f04f 0340 	mov.w	r3, #64	; 0x40
   10eb2:	f3ef 8511 	mrs	r5, BASEPRI
   10eb6:	f383 8812 	msr	BASEPRI_MAX, r3
   10eba:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   10ebe:	8b23      	ldrh	r3, [r4, #24]
   10ec0:	f023 0308 	bic.w	r3, r3, #8
   10ec4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   10ec6:	8b23      	ldrh	r3, [r4, #24]
   10ec8:	f013 0f10 	tst.w	r3, #16
   10ecc:	d02e      	beq.n	10f2c <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   10ece:	f023 0310 	bic.w	r3, r3, #16
   10ed2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   10ed4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   10ed6:	8b26      	ldrh	r6, [r4, #24]
   10ed8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
   10edc:	2800      	cmp	r0, #0
   10ede:	d09a      	beq.n	10e16 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
   10ee0:	2802      	cmp	r0, #2
   10ee2:	d0a3      	beq.n	10e2c <process_event+0x40>
		if (evt == EVT_NOP) {
   10ee4:	2800      	cmp	r0, #0
   10ee6:	d096      	beq.n	10e16 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
   10ee8:	2801      	cmp	r0, #1
   10eea:	d0a3      	beq.n	10e34 <process_event+0x48>
		} else if (evt == EVT_START) {
   10eec:	2803      	cmp	r0, #3
   10eee:	d0aa      	beq.n	10e46 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
   10ef0:	2804      	cmp	r0, #4
   10ef2:	d0b1      	beq.n	10e58 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
   10ef4:	2805      	cmp	r0, #5
   10ef6:	d0b8      	beq.n	10e6a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
   10ef8:	2700      	movs	r7, #0
		res = 0;
   10efa:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10efc:	8b23      	ldrh	r3, [r4, #24]
   10efe:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   10f02:	45b0      	cmp	r8, r6
   10f04:	d0ba      	beq.n	10e7c <process_event+0x90>
   10f06:	68a2      	ldr	r2, [r4, #8]
   10f08:	2a00      	cmp	r2, #0
   10f0a:	d0b9      	beq.n	10e80 <process_event+0x94>
   10f0c:	2201      	movs	r2, #1
		if (do_monitors
   10f0e:	4611      	mov	r1, r2
   10f10:	2a00      	cmp	r2, #0
   10f12:	d1b7      	bne.n	10e84 <process_event+0x98>
   10f14:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
   10f16:	2a00      	cmp	r2, #0
   10f18:	d1b4      	bne.n	10e84 <process_event+0x98>
		    || (transit != NULL)) {
   10f1a:	2f00      	cmp	r7, #0
   10f1c:	d1b2      	bne.n	10e84 <process_event+0x98>
   10f1e:	e7d2      	b.n	10ec6 <process_event+0xda>
				notify_monitors(mgr, state, res);
   10f20:	464a      	mov	r2, r9
   10f22:	4641      	mov	r1, r8
   10f24:	4620      	mov	r0, r4
   10f26:	f014 feb9 	bl	25c9c <notify_monitors>
   10f2a:	e7b4      	b.n	10e96 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10f2c:	f013 0f20 	tst.w	r3, #32
   10f30:	d004      	beq.n	10f3c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   10f32:	f023 0320 	bic.w	r3, r3, #32
   10f36:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
   10f38:	2002      	movs	r0, #2
   10f3a:	e7cc      	b.n	10ed6 <process_event+0xea>
		evt = EVT_NOP;
   10f3c:	2000      	movs	r0, #0
   10f3e:	e7ca      	b.n	10ed6 <process_event+0xea>
   10f40:	00025e27 	.word	0x00025e27

00010f44 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f48:	b093      	sub	sp, #76	; 0x4c
   10f4a:	4606      	mov	r6, r0
   10f4c:	460d      	mov	r5, r1
   10f4e:	4692      	mov	sl, r2
   10f50:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10f52:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10f54:	f89a 0000 	ldrb.w	r0, [sl]
   10f58:	2800      	cmp	r0, #0
   10f5a:	f000 84d6 	beq.w	1190a <cbvprintf+0x9c6>
		if (*fp != '%') {
   10f5e:	2825      	cmp	r0, #37	; 0x25
   10f60:	d008      	beq.n	10f74 <cbvprintf+0x30>
			OUTC(*fp++);
   10f62:	f10a 0a01 	add.w	sl, sl, #1
   10f66:	4629      	mov	r1, r5
   10f68:	47b0      	blx	r6
   10f6a:	2800      	cmp	r0, #0
   10f6c:	f2c0 84ce 	blt.w	1190c <cbvprintf+0x9c8>
   10f70:	3401      	adds	r4, #1
			continue;
   10f72:	e7ef      	b.n	10f54 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
   10f74:	2300      	movs	r3, #0
   10f76:	9306      	str	r3, [sp, #24]
   10f78:	9307      	str	r3, [sp, #28]
   10f7a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
   10f7c:	9308      	str	r3, [sp, #32]
   10f7e:	9309      	str	r3, [sp, #36]	; 0x24
   10f80:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
   10f82:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
   10f86:	f89a 3001 	ldrb.w	r3, [sl, #1]
   10f8a:	2b25      	cmp	r3, #37	; 0x25
   10f8c:	d001      	beq.n	10f92 <cbvprintf+0x4e>
	bool loop = true;
   10f8e:	2701      	movs	r7, #1
   10f90:	e02c      	b.n	10fec <cbvprintf+0xa8>
		conv->specifier = *sp++;
   10f92:	f10a 0802 	add.w	r8, sl, #2
   10f96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
   10f9a:	e1a8      	b.n	112ee <cbvprintf+0x3aa>
			conv->flag_dash = true;
   10f9c:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10fa0:	f043 0304 	orr.w	r3, r3, #4
   10fa4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
   10fa8:	b1ff      	cbz	r7, 10fea <cbvprintf+0xa6>
			++sp;
   10faa:	f108 0801 	add.w	r8, r8, #1
   10fae:	e01c      	b.n	10fea <cbvprintf+0xa6>
			conv->flag_plus = true;
   10fb0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10fb4:	f043 0308 	orr.w	r3, r3, #8
   10fb8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10fbc:	e7f4      	b.n	10fa8 <cbvprintf+0x64>
			conv->flag_space = true;
   10fbe:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10fc2:	f043 0310 	orr.w	r3, r3, #16
   10fc6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10fca:	e7ed      	b.n	10fa8 <cbvprintf+0x64>
			conv->flag_hash = true;
   10fcc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10fd0:	f043 0320 	orr.w	r3, r3, #32
   10fd4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10fd8:	e7e6      	b.n	10fa8 <cbvprintf+0x64>
			conv->flag_zero = true;
   10fda:	f89d 3020 	ldrb.w	r3, [sp, #32]
   10fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10fe2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
   10fe6:	e7df      	b.n	10fa8 <cbvprintf+0x64>
		switch (*sp) {
   10fe8:	2700      	movs	r7, #0
	} while (loop);
   10fea:	b34f      	cbz	r7, 11040 <cbvprintf+0xfc>
		switch (*sp) {
   10fec:	f898 3000 	ldrb.w	r3, [r8]
   10ff0:	3b20      	subs	r3, #32
   10ff2:	2b10      	cmp	r3, #16
   10ff4:	d8f8      	bhi.n	10fe8 <cbvprintf+0xa4>
   10ff6:	a201      	add	r2, pc, #4	; (adr r2, 10ffc <cbvprintf+0xb8>)
   10ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   10ffc:	00010fbf 	.word	0x00010fbf
   11000:	00010fe9 	.word	0x00010fe9
   11004:	00010fe9 	.word	0x00010fe9
   11008:	00010fcd 	.word	0x00010fcd
   1100c:	00010fe9 	.word	0x00010fe9
   11010:	00010fe9 	.word	0x00010fe9
   11014:	00010fe9 	.word	0x00010fe9
   11018:	00010fe9 	.word	0x00010fe9
   1101c:	00010fe9 	.word	0x00010fe9
   11020:	00010fe9 	.word	0x00010fe9
   11024:	00010fe9 	.word	0x00010fe9
   11028:	00010fb1 	.word	0x00010fb1
   1102c:	00010fe9 	.word	0x00010fe9
   11030:	00010f9d 	.word	0x00010f9d
   11034:	00010fe9 	.word	0x00010fe9
   11038:	00010fe9 	.word	0x00010fe9
   1103c:	00010fdb 	.word	0x00010fdb
	if (conv->flag_zero && conv->flag_dash) {
   11040:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11044:	f003 0344 	and.w	r3, r3, #68	; 0x44
   11048:	2b44      	cmp	r3, #68	; 0x44
   1104a:	d06d      	beq.n	11128 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
   1104c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
   11050:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11058:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
   1105c:	f898 3000 	ldrb.w	r3, [r8]
   11060:	2b2a      	cmp	r3, #42	; 0x2a
   11062:	d068      	beq.n	11136 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
   11064:	a805      	add	r0, sp, #20
   11066:	f015 fb3b 	bl	266e0 <extract_decimal>
	if (sp != wp) {
   1106a:	9b05      	ldr	r3, [sp, #20]
   1106c:	4598      	cmp	r8, r3
   1106e:	d012      	beq.n	11096 <cbvprintf+0x152>
		conv->width_present = true;
   11070:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11078:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
   1107c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
   1107e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
   11082:	2800      	cmp	r0, #0
   11084:	db60      	blt.n	11148 <cbvprintf+0x204>
   11086:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
   11088:	4313      	orrs	r3, r2
   1108a:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1108e:	f363 0241 	bfi	r2, r3, #1, #1
   11092:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   11096:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
   11098:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   1109a:	781b      	ldrb	r3, [r3, #0]
   1109c:	2b2e      	cmp	r3, #46	; 0x2e
   1109e:	bf14      	ite	ne
   110a0:	2300      	movne	r3, #0
   110a2:	2301      	moveq	r3, #1
   110a4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   110a8:	f363 0241 	bfi	r2, r3, #1, #1
   110ac:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
   110b0:	2b00      	cmp	r3, #0
   110b2:	d04b      	beq.n	1114c <cbvprintf+0x208>
	++sp;
   110b4:	9b05      	ldr	r3, [sp, #20]
   110b6:	1c5a      	adds	r2, r3, #1
   110b8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   110ba:	785b      	ldrb	r3, [r3, #1]
   110bc:	2b2a      	cmp	r3, #42	; 0x2a
   110be:	d048      	beq.n	11152 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
   110c0:	a805      	add	r0, sp, #20
   110c2:	f015 fb0d 	bl	266e0 <extract_decimal>
	conv->prec_value = prec;
   110c6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
   110c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   110cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
   110d0:	2800      	cmp	r0, #0
   110d2:	db47      	blt.n	11164 <cbvprintf+0x220>
   110d4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
   110d6:	4313      	orrs	r3, r2
   110d8:	f89d 2020 	ldrb.w	r2, [sp, #32]
   110dc:	f363 0241 	bfi	r2, r3, #1, #1
   110e0:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
   110e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
   110e8:	f898 3000 	ldrb.w	r3, [r8]
   110ec:	3b4c      	subs	r3, #76	; 0x4c
   110ee:	2b2e      	cmp	r3, #46	; 0x2e
   110f0:	f200 80dc 	bhi.w	112ac <cbvprintf+0x368>
   110f4:	e8df f003 	tbb	[pc, r3]
   110f8:	dadadaca 	.word	0xdadadaca
   110fc:	dadadada 	.word	0xdadadada
   11100:	dadadada 	.word	0xdadadada
   11104:	dadadada 	.word	0xdadadada
   11108:	dadadada 	.word	0xdadadada
   1110c:	dadadada 	.word	0xdadadada
   11110:	dadadada 	.word	0xdadadada
   11114:	da6ada38 	.word	0xda6ada38
   11118:	dadada51 	.word	0xdadada51
   1111c:	dadadada 	.word	0xdadadada
   11120:	dadadac0 	.word	0xdadadac0
   11124:	dada      	.short	0xdada
   11126:	b6          	.byte	0xb6
   11127:	00          	.byte	0x00
		conv->flag_zero = false;
   11128:	f89d 3020 	ldrb.w	r3, [sp, #32]
   1112c:	f36f 1386 	bfc	r3, #6, #1
   11130:	f88d 3020 	strb.w	r3, [sp, #32]
   11134:	e78a      	b.n	1104c <cbvprintf+0x108>
		conv->width_star = true;
   11136:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1113a:	f043 0301 	orr.w	r3, r3, #1
   1113e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   11142:	4643      	mov	r3, r8
   11144:	3301      	adds	r3, #1
   11146:	e7a7      	b.n	11098 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
   11148:	2201      	movs	r2, #1
   1114a:	e79d      	b.n	11088 <cbvprintf+0x144>
		return sp;
   1114c:	f8dd 8014 	ldr.w	r8, [sp, #20]
   11150:	e7ca      	b.n	110e8 <cbvprintf+0x1a4>
		conv->prec_star = true;
   11152:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11156:	f043 0304 	orr.w	r3, r3, #4
   1115a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
   1115e:	f102 0801 	add.w	r8, r2, #1
   11162:	e7c1      	b.n	110e8 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
   11164:	2201      	movs	r2, #1
   11166:	e7b6      	b.n	110d6 <cbvprintf+0x192>
		if (*++sp == 'h') {
   11168:	f108 0201 	add.w	r2, r8, #1
   1116c:	f898 3001 	ldrb.w	r3, [r8, #1]
   11170:	2b68      	cmp	r3, #104	; 0x68
   11172:	d008      	beq.n	11186 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
   11174:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11178:	2102      	movs	r1, #2
   1117a:	f361 03c6 	bfi	r3, r1, #3, #4
   1117e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
   11182:	4690      	mov	r8, r2
   11184:	e02b      	b.n	111de <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
   11186:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1118a:	2201      	movs	r2, #1
   1118c:	f362 03c6 	bfi	r3, r2, #3, #4
   11190:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   11194:	f108 0802 	add.w	r8, r8, #2
   11198:	e021      	b.n	111de <cbvprintf+0x29a>
		if (*++sp == 'l') {
   1119a:	f108 0201 	add.w	r2, r8, #1
   1119e:	f898 3001 	ldrb.w	r3, [r8, #1]
   111a2:	2b6c      	cmp	r3, #108	; 0x6c
   111a4:	d008      	beq.n	111b8 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
   111a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111aa:	2103      	movs	r1, #3
   111ac:	f361 03c6 	bfi	r3, r1, #3, #4
   111b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
   111b4:	4690      	mov	r8, r2
   111b6:	e012      	b.n	111de <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
   111b8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111bc:	2204      	movs	r2, #4
   111be:	f362 03c6 	bfi	r3, r2, #3, #4
   111c2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
   111c6:	f108 0802 	add.w	r8, r8, #2
   111ca:	e008      	b.n	111de <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
   111cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   111d0:	2205      	movs	r2, #5
   111d2:	f362 03c6 	bfi	r3, r2, #3, #4
   111d6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   111da:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
   111de:	f818 3b01 	ldrb.w	r3, [r8], #1
   111e2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
   111e6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   111ea:	2a37      	cmp	r2, #55	; 0x37
   111ec:	f200 8150 	bhi.w	11490 <cbvprintf+0x54c>
   111f0:	e8df f012 	tbh	[pc, r2, lsl #1]
   111f4:	014e0126 	.word	0x014e0126
   111f8:	014e014e 	.word	0x014e014e
   111fc:	01260126 	.word	0x01260126
   11200:	014e0126 	.word	0x014e0126
   11204:	014e014e 	.word	0x014e014e
   11208:	014e014e 	.word	0x014e014e
   1120c:	014e014e 	.word	0x014e014e
   11210:	014e014e 	.word	0x014e014e
   11214:	014e014e 	.word	0x014e014e
   11218:	014e014e 	.word	0x014e014e
   1121c:	014e014e 	.word	0x014e014e
   11220:	0113014e 	.word	0x0113014e
   11224:	014e014e 	.word	0x014e014e
   11228:	014e014e 	.word	0x014e014e
   1122c:	014e014e 	.word	0x014e014e
   11230:	014e014e 	.word	0x014e014e
   11234:	014e0126 	.word	0x014e0126
   11238:	00630113 	.word	0x00630113
   1123c:	01260126 	.word	0x01260126
   11240:	014e0126 	.word	0x014e0126
   11244:	014e0063 	.word	0x014e0063
   11248:	014e014e 	.word	0x014e014e
   1124c:	012f014e 	.word	0x012f014e
   11250:	013f0113 	.word	0x013f0113
   11254:	014e014e 	.word	0x014e014e
   11258:	014e013f 	.word	0x014e013f
   1125c:	014e0113 	.word	0x014e0113
   11260:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
   11264:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11268:	2206      	movs	r2, #6
   1126a:	f362 03c6 	bfi	r3, r2, #3, #4
   1126e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   11272:	f108 0801 	add.w	r8, r8, #1
		break;
   11276:	e7b2      	b.n	111de <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
   11278:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1127c:	2207      	movs	r2, #7
   1127e:	f362 03c6 	bfi	r3, r2, #3, #4
   11282:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   11286:	f108 0801 	add.w	r8, r8, #1
		break;
   1128a:	e7a8      	b.n	111de <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
   1128c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11290:	2208      	movs	r2, #8
   11292:	f362 03c6 	bfi	r3, r2, #3, #4
   11296:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
   1129a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
   1129e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   112a2:	f043 0302 	orr.w	r3, r3, #2
   112a6:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   112aa:	e798      	b.n	111de <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
   112ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   112b0:	f36f 03c6 	bfc	r3, #3, #4
   112b4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
   112b8:	e791      	b.n	111de <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
   112ba:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   112be:	2101      	movs	r1, #1
   112c0:	f361 0202 	bfi	r2, r1, #0, #3
   112c4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   112c8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
   112cc:	f002 0278 	and.w	r2, r2, #120	; 0x78
   112d0:	2a40      	cmp	r2, #64	; 0x40
   112d2:	f000 80aa 	beq.w	1142a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
   112d6:	2b63      	cmp	r3, #99	; 0x63
   112d8:	f000 80ae 	beq.w	11438 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
   112dc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   112e0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   112e4:	4317      	orrs	r7, r2
   112e6:	f367 0341 	bfi	r3, r7, #1, #1
   112ea:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
   112ee:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   112f2:	f013 0f01 	tst.w	r3, #1
   112f6:	f000 80da 	beq.w	114ae <cbvprintf+0x56a>
			width = va_arg(ap, int);
   112fa:	9b03      	ldr	r3, [sp, #12]
   112fc:	1d1a      	adds	r2, r3, #4
   112fe:	9203      	str	r2, [sp, #12]
   11300:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
   11302:	2f00      	cmp	r7, #0
   11304:	f2c0 80cb 	blt.w	1149e <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
   11308:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1130c:	f013 0f04 	tst.w	r3, #4
   11310:	f000 80df 	beq.w	114d2 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
   11314:	9b03      	ldr	r3, [sp, #12]
   11316:	1d1a      	adds	r2, r3, #4
   11318:	9203      	str	r2, [sp, #12]
   1131a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
   1131e:	f1bb 0f00 	cmp.w	fp, #0
   11322:	f2c0 80cd 	blt.w	114c0 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
   11326:	2300      	movs	r3, #0
   11328:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
   1132a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
   1132c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11330:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
   11334:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
   11338:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
   1133c:	2b01      	cmp	r3, #1
   1133e:	f000 80d1 	beq.w	114e4 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
   11342:	2b02      	cmp	r3, #2
   11344:	f000 8116 	beq.w	11574 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
   11348:	2b04      	cmp	r3, #4
   1134a:	f000 8167 	beq.w	1161c <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
   1134e:	2b03      	cmp	r3, #3
   11350:	f000 817e 	beq.w	11650 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
   11354:	f89d 9020 	ldrb.w	r9, [sp, #32]
   11358:	f019 0303 	ands.w	r3, r9, #3
   1135c:	9302      	str	r3, [sp, #8]
   1135e:	f040 817d 	bne.w	1165c <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
   11362:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   11366:	3b25      	subs	r3, #37	; 0x25
   11368:	2b53      	cmp	r3, #83	; 0x53
   1136a:	f200 8233 	bhi.w	117d4 <cbvprintf+0x890>
   1136e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11372:	0181      	.short	0x0181
   11374:	02310231 	.word	0x02310231
   11378:	02310231 	.word	0x02310231
   1137c:	02310231 	.word	0x02310231
   11380:	02310231 	.word	0x02310231
   11384:	02310231 	.word	0x02310231
   11388:	02310231 	.word	0x02310231
   1138c:	02310231 	.word	0x02310231
   11390:	02310231 	.word	0x02310231
   11394:	02310231 	.word	0x02310231
   11398:	02310231 	.word	0x02310231
   1139c:	02310231 	.word	0x02310231
   113a0:	02310231 	.word	0x02310231
   113a4:	02310231 	.word	0x02310231
   113a8:	02310231 	.word	0x02310231
   113ac:	02310231 	.word	0x02310231
   113b0:	02310231 	.word	0x02310231
   113b4:	02310231 	.word	0x02310231
   113b8:	02310231 	.word	0x02310231
   113bc:	02310231 	.word	0x02310231
   113c0:	02310231 	.word	0x02310231
   113c4:	02310231 	.word	0x02310231
   113c8:	02310231 	.word	0x02310231
   113cc:	02310231 	.word	0x02310231
   113d0:	02310231 	.word	0x02310231
   113d4:	02310231 	.word	0x02310231
   113d8:	023101c7 	.word	0x023101c7
   113dc:	02310231 	.word	0x02310231
   113e0:	02310231 	.word	0x02310231
   113e4:	02310231 	.word	0x02310231
   113e8:	02310231 	.word	0x02310231
   113ec:	01a10231 	.word	0x01a10231
   113f0:	023101ab 	.word	0x023101ab
   113f4:	02310231 	.word	0x02310231
   113f8:	01ab0231 	.word	0x01ab0231
   113fc:	02310231 	.word	0x02310231
   11400:	02310231 	.word	0x02310231
   11404:	01c70208 	.word	0x01c70208
   11408:	023101ea 	.word	0x023101ea
   1140c:	018f0231 	.word	0x018f0231
   11410:	01c70231 	.word	0x01c70231
   11414:	02310231 	.word	0x02310231
   11418:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
   1141a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1141e:	2102      	movs	r1, #2
   11420:	f361 0202 	bfi	r2, r1, #0, #3
   11424:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   11428:	e74e      	b.n	112c8 <cbvprintf+0x384>
			conv->invalid = true;
   1142a:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1142e:	f041 0101 	orr.w	r1, r1, #1
   11432:	f88d 1020 	strb.w	r1, [sp, #32]
   11436:	e74e      	b.n	112d6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11438:	1e17      	subs	r7, r2, #0
   1143a:	bf18      	it	ne
   1143c:	2701      	movne	r7, #1
   1143e:	e74d      	b.n	112dc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
   11440:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11444:	2204      	movs	r2, #4
   11446:	f362 0302 	bfi	r3, r2, #0, #3
   1144a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
   1144e:	2701      	movs	r7, #1
			break;
   11450:	e744      	b.n	112dc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   11452:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11456:	2203      	movs	r2, #3
   11458:	f362 0302 	bfi	r3, r2, #0, #3
   1145c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
   11460:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11464:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11468:	2b40      	cmp	r3, #64	; 0x40
   1146a:	f47f af37 	bne.w	112dc <cbvprintf+0x398>
			unsupported = true;
   1146e:	2701      	movs	r7, #1
   11470:	e734      	b.n	112dc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
   11472:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   11476:	2203      	movs	r2, #3
   11478:	f362 0302 	bfi	r3, r2, #0, #3
   1147c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
   11480:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11484:	f013 0f78 	tst.w	r3, #120	; 0x78
   11488:	f43f af28 	beq.w	112dc <cbvprintf+0x398>
			unsupported = true;
   1148c:	2701      	movs	r7, #1
   1148e:	e725      	b.n	112dc <cbvprintf+0x398>
		conv->invalid = true;
   11490:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11494:	f043 0301 	orr.w	r3, r3, #1
   11498:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
   1149c:	e71e      	b.n	112dc <cbvprintf+0x398>
				conv->flag_dash = true;
   1149e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   114a2:	f043 0304 	orr.w	r3, r3, #4
   114a6:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
   114aa:	427f      	negs	r7, r7
   114ac:	e72c      	b.n	11308 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
   114ae:	f99d 3020 	ldrsb.w	r3, [sp, #32]
   114b2:	2b00      	cmp	r3, #0
   114b4:	db02      	blt.n	114bc <cbvprintf+0x578>
		int width = -1;
   114b6:	f04f 37ff 	mov.w	r7, #4294967295
   114ba:	e725      	b.n	11308 <cbvprintf+0x3c4>
			width = conv->width_value;
   114bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
   114be:	e723      	b.n	11308 <cbvprintf+0x3c4>
				conv->prec_present = false;
   114c0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   114c4:	f36f 0341 	bfc	r3, #1, #1
   114c8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
   114cc:	f04f 3bff 	mov.w	fp, #4294967295
   114d0:	e729      	b.n	11326 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
   114d2:	f013 0f02 	tst.w	r3, #2
   114d6:	d002      	beq.n	114de <cbvprintf+0x59a>
			precision = conv->prec_value;
   114d8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   114dc:	e723      	b.n	11326 <cbvprintf+0x3e2>
		int precision = -1;
   114de:	f04f 3bff 	mov.w	fp, #4294967295
   114e2:	e720      	b.n	11326 <cbvprintf+0x3e2>
			switch (length_mod) {
   114e4:	1ecb      	subs	r3, r1, #3
   114e6:	2b04      	cmp	r3, #4
   114e8:	d804      	bhi.n	114f4 <cbvprintf+0x5b0>
   114ea:	e8df f003 	tbb	[pc, r3]
   114ee:	1d0b      	.short	0x1d0b
   114f0:	3529      	.short	0x3529
   114f2:	35          	.byte	0x35
   114f3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   114f4:	9b03      	ldr	r3, [sp, #12]
   114f6:	1d1a      	adds	r2, r3, #4
   114f8:	9203      	str	r2, [sp, #12]
   114fa:	681a      	ldr	r2, [r3, #0]
   114fc:	17d3      	asrs	r3, r2, #31
   114fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11502:	e006      	b.n	11512 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
   11504:	9b03      	ldr	r3, [sp, #12]
   11506:	1d1a      	adds	r2, r3, #4
   11508:	9203      	str	r2, [sp, #12]
   1150a:	681a      	ldr	r2, [r3, #0]
   1150c:	17d3      	asrs	r3, r2, #31
   1150e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   11512:	2901      	cmp	r1, #1
   11514:	d028      	beq.n	11568 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
   11516:	2902      	cmp	r1, #2
   11518:	f47f af1c 	bne.w	11354 <cbvprintf+0x410>
				value->sint = (short)value->sint;
   1151c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
   11520:	17d3      	asrs	r3, r2, #31
   11522:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11526:	e715      	b.n	11354 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
   11528:	9b03      	ldr	r3, [sp, #12]
   1152a:	3307      	adds	r3, #7
   1152c:	f023 0307 	bic.w	r3, r3, #7
   11530:	f103 0208 	add.w	r2, r3, #8
   11534:	9203      	str	r2, [sp, #12]
   11536:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   1153a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   1153e:	e7e8      	b.n	11512 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
   11540:	9b03      	ldr	r3, [sp, #12]
   11542:	3307      	adds	r3, #7
   11544:	f023 0307 	bic.w	r3, r3, #7
   11548:	f103 0208 	add.w	r2, r3, #8
   1154c:	9203      	str	r2, [sp, #12]
   1154e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
   11552:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11556:	e7dc      	b.n	11512 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11558:	9b03      	ldr	r3, [sp, #12]
   1155a:	1d1a      	adds	r2, r3, #4
   1155c:	9203      	str	r2, [sp, #12]
   1155e:	681a      	ldr	r2, [r3, #0]
   11560:	17d3      	asrs	r3, r2, #31
				value->sint =
   11562:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   11566:	e7d4      	b.n	11512 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
   11568:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1156c:	9306      	str	r3, [sp, #24]
   1156e:	2300      	movs	r3, #0
   11570:	9307      	str	r3, [sp, #28]
   11572:	e6ef      	b.n	11354 <cbvprintf+0x410>
			switch (length_mod) {
   11574:	1ecb      	subs	r3, r1, #3
   11576:	2b04      	cmp	r3, #4
   11578:	d804      	bhi.n	11584 <cbvprintf+0x640>
   1157a:	e8df f003 	tbb	[pc, r3]
   1157e:	1f0b      	.short	0x1f0b
   11580:	4135      	.short	0x4135
   11582:	41          	.byte	0x41
   11583:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
   11584:	9b03      	ldr	r3, [sp, #12]
   11586:	1d1a      	adds	r2, r3, #4
   11588:	9203      	str	r2, [sp, #12]
   1158a:	681b      	ldr	r3, [r3, #0]
   1158c:	9306      	str	r3, [sp, #24]
   1158e:	2300      	movs	r3, #0
   11590:	9307      	str	r3, [sp, #28]
				break;
   11592:	e01e      	b.n	115d2 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
   11594:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
   11598:	2b63      	cmp	r3, #99	; 0x63
   1159a:	d007      	beq.n	115ac <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
   1159c:	9b03      	ldr	r3, [sp, #12]
   1159e:	1d1a      	adds	r2, r3, #4
   115a0:	9203      	str	r2, [sp, #12]
   115a2:	681b      	ldr	r3, [r3, #0]
   115a4:	9306      	str	r3, [sp, #24]
   115a6:	2300      	movs	r3, #0
   115a8:	9307      	str	r3, [sp, #28]
   115aa:	e012      	b.n	115d2 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
   115ac:	9b03      	ldr	r3, [sp, #12]
   115ae:	1d1a      	adds	r2, r3, #4
   115b0:	9203      	str	r2, [sp, #12]
   115b2:	681b      	ldr	r3, [r3, #0]
   115b4:	9306      	str	r3, [sp, #24]
   115b6:	2300      	movs	r3, #0
   115b8:	9307      	str	r3, [sp, #28]
   115ba:	e00a      	b.n	115d2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
   115bc:	9b03      	ldr	r3, [sp, #12]
   115be:	3307      	adds	r3, #7
   115c0:	f023 0307 	bic.w	r3, r3, #7
   115c4:	f103 0208 	add.w	r2, r3, #8
   115c8:	9203      	str	r2, [sp, #12]
   115ca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   115ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
   115d2:	2901      	cmp	r1, #1
   115d4:	d01c      	beq.n	11610 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
   115d6:	2902      	cmp	r1, #2
   115d8:	f47f aebc 	bne.w	11354 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
   115dc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   115e0:	9306      	str	r3, [sp, #24]
   115e2:	2300      	movs	r3, #0
   115e4:	9307      	str	r3, [sp, #28]
   115e6:	e6b5      	b.n	11354 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
   115e8:	9b03      	ldr	r3, [sp, #12]
   115ea:	3307      	adds	r3, #7
   115ec:	f023 0307 	bic.w	r3, r3, #7
   115f0:	f103 0208 	add.w	r2, r3, #8
   115f4:	9203      	str	r2, [sp, #12]
   115f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
   115fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
   115fe:	e7e8      	b.n	115d2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
   11600:	9b03      	ldr	r3, [sp, #12]
   11602:	1d1a      	adds	r2, r3, #4
   11604:	9203      	str	r2, [sp, #12]
   11606:	681b      	ldr	r3, [r3, #0]
				value->uint =
   11608:	9306      	str	r3, [sp, #24]
   1160a:	2300      	movs	r3, #0
   1160c:	9307      	str	r3, [sp, #28]
				break;
   1160e:	e7e0      	b.n	115d2 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
   11610:	f89d 3018 	ldrb.w	r3, [sp, #24]
   11614:	9306      	str	r3, [sp, #24]
   11616:	2300      	movs	r3, #0
   11618:	9307      	str	r3, [sp, #28]
   1161a:	e69b      	b.n	11354 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
   1161c:	2908      	cmp	r1, #8
   1161e:	d00b      	beq.n	11638 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
   11620:	9b03      	ldr	r3, [sp, #12]
   11622:	3307      	adds	r3, #7
   11624:	f023 0307 	bic.w	r3, r3, #7
   11628:	f103 0208 	add.w	r2, r3, #8
   1162c:	9203      	str	r2, [sp, #12]
   1162e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11632:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11636:	e68d      	b.n	11354 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
   11638:	9b03      	ldr	r3, [sp, #12]
   1163a:	3307      	adds	r3, #7
   1163c:	f023 0307 	bic.w	r3, r3, #7
   11640:	f103 0208 	add.w	r2, r3, #8
   11644:	9203      	str	r2, [sp, #12]
   11646:	e9d3 2300 	ldrd	r2, r3, [r3]
   1164a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1164e:	e681      	b.n	11354 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
   11650:	9b03      	ldr	r3, [sp, #12]
   11652:	1d1a      	adds	r2, r3, #4
   11654:	9203      	str	r2, [sp, #12]
   11656:	681b      	ldr	r3, [r3, #0]
   11658:	9306      	str	r3, [sp, #24]
   1165a:	e67b      	b.n	11354 <cbvprintf+0x410>
			OUTS(sp, fp);
   1165c:	4643      	mov	r3, r8
   1165e:	4652      	mov	r2, sl
   11660:	4629      	mov	r1, r5
   11662:	4630      	mov	r0, r6
   11664:	f015 f8b9 	bl	267da <outs>
   11668:	2800      	cmp	r0, #0
   1166a:	f2c0 814f 	blt.w	1190c <cbvprintf+0x9c8>
   1166e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
   11670:	46c2      	mov	sl, r8
			continue;
   11672:	e46f      	b.n	10f54 <cbvprintf+0x10>
		case '%':
			OUTC('%');
   11674:	4629      	mov	r1, r5
   11676:	2025      	movs	r0, #37	; 0x25
   11678:	47b0      	blx	r6
   1167a:	2800      	cmp	r0, #0
   1167c:	f2c0 8146 	blt.w	1190c <cbvprintf+0x9c8>
   11680:	3401      	adds	r4, #1
		char sign = 0;
   11682:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   11686:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   1168a:	f04f 0a00 	mov.w	sl, #0
			break;
   1168e:	e0a7      	b.n	117e0 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
   11690:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
   11694:	f1bb 0f00 	cmp.w	fp, #0
   11698:	db08      	blt.n	116ac <cbvprintf+0x768>
				len = strnlen(bps, precision);
   1169a:	4659      	mov	r1, fp
   1169c:	4650      	mov	r0, sl
   1169e:	f016 fa96 	bl	27bce <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
   116a2:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
   116a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
   116aa:	e099      	b.n	117e0 <cbvprintf+0x89c>
				len = strlen(bps);
   116ac:	4650      	mov	r0, sl
   116ae:	f016 fa86 	bl	27bbe <strlen>
   116b2:	e7f6      	b.n	116a2 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   116b4:	9b06      	ldr	r3, [sp, #24]
   116b6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
   116ba:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
   116be:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
   116c2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
   116c6:	e08b      	b.n	117e0 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
   116c8:	f019 0f08 	tst.w	r9, #8
   116cc:	d105      	bne.n	116da <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
   116ce:	f019 0910 	ands.w	r9, r9, #16
   116d2:	d004      	beq.n	116de <cbvprintf+0x79a>
				sign = ' ';
   116d4:	f04f 0920 	mov.w	r9, #32
   116d8:	e001      	b.n	116de <cbvprintf+0x79a>
				sign = '+';
   116da:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
   116de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
   116e2:	2a00      	cmp	r2, #0
   116e4:	f173 0100 	sbcs.w	r1, r3, #0
   116e8:	db02      	blt.n	116f0 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
   116ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
   116ee:	e009      	b.n	11704 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
   116f0:	4252      	negs	r2, r2
   116f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   116f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
   116fa:	f04f 092d 	mov.w	r9, #45	; 0x2d
   116fe:	e001      	b.n	11704 <cbvprintf+0x7c0>
		switch (conv->specifier) {
   11700:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
   11704:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11708:	9300      	str	r3, [sp, #0]
   1170a:	ab0c      	add	r3, sp, #48	; 0x30
   1170c:	aa08      	add	r2, sp, #32
   1170e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   11712:	f014 fff8 	bl	26706 <encode_uint>
   11716:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
   11718:	f1bb 0f00 	cmp.w	fp, #0
   1171c:	f2c0 8090 	blt.w	11840 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
   11720:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   11724:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
   11728:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1172c:	f36f 1286 	bfc	r2, #6, #1
   11730:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
   11734:	459b      	cmp	fp, r3
   11736:	f240 8086 	bls.w	11846 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
   1173a:	ebab 0303 	sub.w	r3, fp, r3
   1173e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
   11740:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11744:	e04c      	b.n	117e0 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
   11746:	9806      	ldr	r0, [sp, #24]
   11748:	b930      	cbnz	r0, 11758 <cbvprintf+0x814>
		char sign = 0;
   1174a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
   1174e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 11914 <cbvprintf+0x9d0>
			bps = "(nil)";
   11752:	f1ab 0a05 	sub.w	sl, fp, #5
   11756:	e043      	b.n	117e0 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11758:	f10d 0346 	add.w	r3, sp, #70	; 0x46
   1175c:	9300      	str	r3, [sp, #0]
   1175e:	ab0c      	add	r3, sp, #48	; 0x30
   11760:	aa08      	add	r2, sp, #32
   11762:	2100      	movs	r1, #0
   11764:	f014 ffcf 	bl	26706 <encode_uint>
   11768:	4682      	mov	sl, r0
				conv->altform_0c = true;
   1176a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1176e:	f043 0310 	orr.w	r3, r3, #16
   11772:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
   11776:	2378      	movs	r3, #120	; 0x78
   11778:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
   1177c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
   11780:	e7ca      	b.n	11718 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
   11782:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
   11784:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   11788:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1178c:	2b07      	cmp	r3, #7
   1178e:	d806      	bhi.n	1179e <cbvprintf+0x85a>
   11790:	e8df f003 	tbb	[pc, r3]
   11794:	100e0c04 	.word	0x100e0c04
   11798:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
   1179c:	6014      	str	r4, [r2, #0]
		char sign = 0;
   1179e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
   117a2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
   117a6:	f04f 0a00 	mov.w	sl, #0
}
   117aa:	e019      	b.n	117e0 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
   117ac:	7014      	strb	r4, [r2, #0]
		break;
   117ae:	e7f6      	b.n	1179e <cbvprintf+0x85a>
		*(short *)dp = (short)count;
   117b0:	8014      	strh	r4, [r2, #0]
		break;
   117b2:	e7f4      	b.n	1179e <cbvprintf+0x85a>
		*(long *)dp = (long)count;
   117b4:	6014      	str	r4, [r2, #0]
		break;
   117b6:	e7f2      	b.n	1179e <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
   117b8:	4620      	mov	r0, r4
   117ba:	17e1      	asrs	r1, r4, #31
   117bc:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   117c0:	e7ed      	b.n	1179e <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
   117c2:	4620      	mov	r0, r4
   117c4:	17e1      	asrs	r1, r4, #31
   117c6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
   117ca:	e7e8      	b.n	1179e <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
   117cc:	6014      	str	r4, [r2, #0]
		break;
   117ce:	e7e6      	b.n	1179e <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   117d0:	6014      	str	r4, [r2, #0]
		break;
   117d2:	e7e4      	b.n	1179e <cbvprintf+0x85a>
		switch (conv->specifier) {
   117d4:	f8dd 9008 	ldr.w	r9, [sp, #8]
   117d8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   117dc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
   117e0:	f1ba 0f00 	cmp.w	sl, #0
   117e4:	f000 808e 	beq.w	11904 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
   117e8:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
   117ec:	f1b9 0f00 	cmp.w	r9, #0
   117f0:	d000      	beq.n	117f4 <cbvprintf+0x8b0>
			nj_len += 1U;
   117f2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
   117f4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
   117f8:	f011 0f10 	tst.w	r1, #16
   117fc:	d026      	beq.n	1184c <cbvprintf+0x908>
			nj_len += 2U;
   117fe:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
   11800:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11802:	4413      	add	r3, r2
		if (conv->pad_fp) {
   11804:	f011 0f40 	tst.w	r1, #64	; 0x40
   11808:	d001      	beq.n	1180e <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
   1180a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1180c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
   1180e:	2f00      	cmp	r7, #0
   11810:	dd32      	ble.n	11878 <cbvprintf+0x934>
			width -= (int)nj_len;
   11812:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
   11814:	f89d 3020 	ldrb.w	r3, [sp, #32]
   11818:	f013 0f04 	tst.w	r3, #4
   1181c:	d12c      	bne.n	11878 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
   1181e:	f013 0f40 	tst.w	r3, #64	; 0x40
   11822:	d018      	beq.n	11856 <cbvprintf+0x912>
					if (sign != 0) {
   11824:	f1b9 0f00 	cmp.w	r9, #0
   11828:	d018      	beq.n	1185c <cbvprintf+0x918>
						OUTC(sign);
   1182a:	4629      	mov	r1, r5
   1182c:	4648      	mov	r0, r9
   1182e:	47b0      	blx	r6
   11830:	2800      	cmp	r0, #0
   11832:	db6b      	blt.n	1190c <cbvprintf+0x9c8>
   11834:	3401      	adds	r4, #1
						sign = 0;
   11836:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
   1183a:	2330      	movs	r3, #48	; 0x30
   1183c:	9302      	str	r3, [sp, #8]
   1183e:	e00f      	b.n	11860 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
   11840:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   11844:	e7cc      	b.n	117e0 <cbvprintf+0x89c>
   11846:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
   1184a:	e7c9      	b.n	117e0 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
   1184c:	f011 0f08 	tst.w	r1, #8
   11850:	d0d6      	beq.n	11800 <cbvprintf+0x8bc>
			nj_len += 1U;
   11852:	3201      	adds	r2, #1
   11854:	e7d4      	b.n	11800 <cbvprintf+0x8bc>
				char pad = ' ';
   11856:	2320      	movs	r3, #32
   11858:	9302      	str	r3, [sp, #8]
   1185a:	e001      	b.n	11860 <cbvprintf+0x91c>
					pad = '0';
   1185c:	2330      	movs	r3, #48	; 0x30
   1185e:	9302      	str	r3, [sp, #8]
   11860:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
   11862:	1e5f      	subs	r7, r3, #1
   11864:	2b00      	cmp	r3, #0
   11866:	dd07      	ble.n	11878 <cbvprintf+0x934>
					OUTC(pad);
   11868:	4629      	mov	r1, r5
   1186a:	9802      	ldr	r0, [sp, #8]
   1186c:	47b0      	blx	r6
   1186e:	2800      	cmp	r0, #0
   11870:	db4c      	blt.n	1190c <cbvprintf+0x9c8>
   11872:	3401      	adds	r4, #1
				while (width-- > 0) {
   11874:	463b      	mov	r3, r7
   11876:	e7f4      	b.n	11862 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
   11878:	f1b9 0f00 	cmp.w	r9, #0
   1187c:	d005      	beq.n	1188a <cbvprintf+0x946>
			OUTC(sign);
   1187e:	4629      	mov	r1, r5
   11880:	4648      	mov	r0, r9
   11882:	47b0      	blx	r6
   11884:	2800      	cmp	r0, #0
   11886:	db41      	blt.n	1190c <cbvprintf+0x9c8>
   11888:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
   1188a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1188e:	f3c3 1200 	ubfx	r2, r3, #4, #1
   11892:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   11896:	4313      	orrs	r3, r2
   11898:	d005      	beq.n	118a6 <cbvprintf+0x962>
				OUTC('0');
   1189a:	4629      	mov	r1, r5
   1189c:	2030      	movs	r0, #48	; 0x30
   1189e:	47b0      	blx	r6
   118a0:	2800      	cmp	r0, #0
   118a2:	db33      	blt.n	1190c <cbvprintf+0x9c8>
   118a4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
   118a6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   118aa:	f013 0f10 	tst.w	r3, #16
   118ae:	d006      	beq.n	118be <cbvprintf+0x97a>
				OUTC(conv->specifier);
   118b0:	4629      	mov	r1, r5
   118b2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   118b6:	47b0      	blx	r6
   118b8:	2800      	cmp	r0, #0
   118ba:	db27      	blt.n	1190c <cbvprintf+0x9c8>
   118bc:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
   118be:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
   118c0:	f103 39ff 	add.w	r9, r3, #4294967295
   118c4:	2b00      	cmp	r3, #0
   118c6:	dd07      	ble.n	118d8 <cbvprintf+0x994>
				OUTC('0');
   118c8:	4629      	mov	r1, r5
   118ca:	2030      	movs	r0, #48	; 0x30
   118cc:	47b0      	blx	r6
   118ce:	2800      	cmp	r0, #0
   118d0:	db1c      	blt.n	1190c <cbvprintf+0x9c8>
   118d2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
   118d4:	464b      	mov	r3, r9
   118d6:	e7f3      	b.n	118c0 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
   118d8:	465b      	mov	r3, fp
   118da:	4652      	mov	r2, sl
   118dc:	4629      	mov	r1, r5
   118de:	4630      	mov	r0, r6
   118e0:	f014 ff7b 	bl	267da <outs>
   118e4:	2800      	cmp	r0, #0
   118e6:	db11      	blt.n	1190c <cbvprintf+0x9c8>
   118e8:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
   118ea:	2f00      	cmp	r7, #0
   118ec:	dd07      	ble.n	118fe <cbvprintf+0x9ba>
			OUTC(' ');
   118ee:	4629      	mov	r1, r5
   118f0:	2020      	movs	r0, #32
   118f2:	47b0      	blx	r6
   118f4:	2800      	cmp	r0, #0
   118f6:	db09      	blt.n	1190c <cbvprintf+0x9c8>
   118f8:	3401      	adds	r4, #1
			--width;
   118fa:	3f01      	subs	r7, #1
   118fc:	e7f5      	b.n	118ea <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
   118fe:	46c2      	mov	sl, r8
   11900:	f7ff bb28 	b.w	10f54 <cbvprintf+0x10>
   11904:	46c2      	mov	sl, r8
   11906:	f7ff bb25 	b.w	10f54 <cbvprintf+0x10>
		}
	}

	return count;
   1190a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
   1190c:	b013      	add	sp, #76	; 0x4c
   1190e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11912:	bf00      	nop
   11914:	0002ca55 	.word	0x0002ca55

00011918 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
   11918:	b508      	push	{r3, lr}
   1191a:	4604      	mov	r4, r0
   1191c:	f04f 0240 	mov.w	r2, #64	; 0x40
   11920:	f3ef 8311 	mrs	r3, BASEPRI
   11924:	f382 8812 	msr	BASEPRI_MAX, r2
   11928:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
   1192c:	f019 f934 	bl	2ab98 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
   11930:	4620      	mov	r0, r4
   11932:	f004 facf 	bl	15ed4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   11936:	4803      	ldr	r0, [pc, #12]	; (11944 <sys_reboot+0x2c>)
   11938:	f014 f98c 	bl	25c54 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1193c:	f003 fb9e 	bl	1507c <arch_cpu_idle>
   11940:	e7fc      	b.n	1193c <sys_reboot+0x24>
   11942:	bf00      	nop
   11944:	0002ca58 	.word	0x0002ca58

00011948 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   11948:	4b05      	ldr	r3, [pc, #20]	; (11960 <is_rodata+0x18>)
   1194a:	4298      	cmp	r0, r3
   1194c:	d304      	bcc.n	11958 <is_rodata+0x10>
   1194e:	4b05      	ldr	r3, [pc, #20]	; (11964 <is_rodata+0x1c>)
   11950:	4298      	cmp	r0, r3
   11952:	d303      	bcc.n	1195c <is_rodata+0x14>
   11954:	2000      	movs	r0, #0
   11956:	4770      	bx	lr
   11958:	2000      	movs	r0, #0
   1195a:	4770      	bx	lr
   1195c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
   1195e:	4770      	bx	lr
   11960:	0002c2d0 	.word	0x0002c2d0
   11964:	0002f3f0 	.word	0x0002f3f0

00011968 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
   11968:	b508      	push	{r3, lr}
	proc_tid = process_tid;
   1196a:	4b06      	ldr	r3, [pc, #24]	; (11984 <thread_set+0x1c>)
   1196c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   1196e:	b118      	cbz	r0, 11978 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11970:	4b05      	ldr	r3, [pc, #20]	; (11988 <thread_set+0x20>)
   11972:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
   11974:	2b09      	cmp	r3, #9
   11976:	dc00      	bgt.n	1197a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
   11978:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1197a:	4804      	ldr	r0, [pc, #16]	; (1198c <thread_set+0x24>)
   1197c:	f010 f980 	bl	21c80 <z_impl_k_sem_give>
}
   11980:	e7fa      	b.n	11978 <thread_set+0x10>
   11982:	bf00      	nop
   11984:	200022fc 	.word	0x200022fc
   11988:	200022cc 	.word	0x200022cc
   1198c:	20000838 	.word	0x20000838

00011990 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
   11990:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   11992:	4802      	ldr	r0, [pc, #8]	; (1199c <log_process_thread_timer_expiry_fn+0xc>)
   11994:	f010 f974 	bl	21c80 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
   11998:	bd08      	pop	{r3, pc}
   1199a:	bf00      	nop
   1199c:	20000838 	.word	0x20000838

000119a0 <next_pending>:
{
   119a0:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
   119a2:	4803      	ldr	r0, [pc, #12]	; (119b0 <next_pending+0x10>)
   119a4:	f015 f830 	bl	26a08 <log_list_head_peek>
}
   119a8:	3800      	subs	r0, #0
   119aa:	bf18      	it	ne
   119ac:	2001      	movne	r0, #1
   119ae:	bd08      	pop	{r3, pc}
   119b0:	200022d8 	.word	0x200022d8

000119b4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   119b4:	b530      	push	{r4, r5, lr}
   119b6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   119b8:	2200      	movs	r2, #0
   119ba:	490f      	ldr	r1, [pc, #60]	; (119f8 <enable_logger+0x44>)
   119bc:	480f      	ldr	r0, [pc, #60]	; (119fc <enable_logger+0x48>)
   119be:	f01a fb9d 	bl	2c0fc <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   119c2:	4d0f      	ldr	r5, [pc, #60]	; (11a00 <enable_logger+0x4c>)
   119c4:	2200      	movs	r2, #0
   119c6:	2300      	movs	r3, #0
   119c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   119cc:	2400      	movs	r4, #0
   119ce:	9404      	str	r4, [sp, #16]
   119d0:	230e      	movs	r3, #14
   119d2:	9303      	str	r3, [sp, #12]
   119d4:	9402      	str	r4, [sp, #8]
   119d6:	9401      	str	r4, [sp, #4]
   119d8:	9400      	str	r4, [sp, #0]
   119da:	4b0a      	ldr	r3, [pc, #40]	; (11a04 <enable_logger+0x50>)
   119dc:	f44f 7240 	mov.w	r2, #768	; 0x300
   119e0:	4909      	ldr	r1, [pc, #36]	; (11a08 <enable_logger+0x54>)
   119e2:	4628      	mov	r0, r5
   119e4:	f019 fec5 	bl	2b772 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   119e8:	4908      	ldr	r1, [pc, #32]	; (11a0c <enable_logger+0x58>)
   119ea:	4628      	mov	r0, r5
   119ec:	f00f ff5a 	bl	218a4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   119f0:	4620      	mov	r0, r4
   119f2:	b009      	add	sp, #36	; 0x24
   119f4:	bd30      	pop	{r4, r5, pc}
   119f6:	bf00      	nop
   119f8:	00011991 	.word	0x00011991
   119fc:	20001788 	.word	0x20001788
   11a00:	200017c0 	.word	0x200017c0
   11a04:	000120e5 	.word	0x000120e5
   11a08:	20004920 	.word	0x20004920
   11a0c:	0002ca84 	.word	0x0002ca84

00011a10 <log_core_init>:
{
   11a10:	b508      	push	{r3, lr}
	panic_mode = false;
   11a12:	2300      	movs	r3, #0
   11a14:	4a0b      	ldr	r2, [pc, #44]	; (11a44 <log_core_init+0x34>)
   11a16:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11a18:	4a0b      	ldr	r2, [pc, #44]	; (11a48 <log_core_init+0x38>)
   11a1a:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
   11a1c:	4b0b      	ldr	r3, [pc, #44]	; (11a4c <log_core_init+0x3c>)
   11a1e:	4a0c      	ldr	r2, [pc, #48]	; (11a50 <log_core_init+0x40>)
   11a20:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   11a22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11a26:	f000 fddd 	bl	125e4 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   11a2a:	f000 fbc1 	bl	121b0 <log_msg_pool_init>
		log_list_init(&list);
   11a2e:	4809      	ldr	r0, [pc, #36]	; (11a54 <log_core_init+0x44>)
   11a30:	f014 ffdc 	bl	269ec <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11a34:	2308      	movs	r3, #8
   11a36:	2248      	movs	r2, #72	; 0x48
   11a38:	4907      	ldr	r1, [pc, #28]	; (11a58 <log_core_init+0x48>)
   11a3a:	4808      	ldr	r0, [pc, #32]	; (11a5c <log_core_init+0x4c>)
   11a3c:	f019 fe36 	bl	2b6ac <k_mem_slab_init>
}
   11a40:	bd08      	pop	{r3, pc}
   11a42:	bf00      	nop
   11a44:	2000474f 	.word	0x2000474f
   11a48:	200022d0 	.word	0x200022d0
   11a4c:	20000458 	.word	0x20000458
   11a50:	00026a21 	.word	0x00026a21
   11a54:	200022d8 	.word	0x200022d8
   11a58:	20008208 	.word	0x20008208
   11a5c:	200022e0 	.word	0x200022e0

00011a60 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11a60:	4b18      	ldr	r3, [pc, #96]	; (11ac4 <log_init+0x64>)
   11a62:	f3bf 8f5b 	dmb	ish
   11a66:	e853 2f00 	ldrex	r2, [r3]
   11a6a:	1c51      	adds	r1, r2, #1
   11a6c:	e843 1000 	strex	r0, r1, [r3]
   11a70:	2800      	cmp	r0, #0
   11a72:	d1f8      	bne.n	11a66 <log_init+0x6>
   11a74:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11a78:	bb1a      	cbnz	r2, 11ac2 <log_init+0x62>
{
   11a7a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
   11a7c:	2400      	movs	r4, #0
   11a7e:	e009      	b.n	11a94 <log_init+0x34>
					   backend->cb->ctx,
   11a80:	4b11      	ldr	r3, [pc, #68]	; (11ac8 <log_init+0x68>)
   11a82:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   11a86:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
   11a88:	2204      	movs	r2, #4
   11a8a:	6819      	ldr	r1, [r3, #0]
   11a8c:	4628      	mov	r0, r5
   11a8e:	f000 fb6d 	bl	1216c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11a92:	3401      	adds	r4, #1
   11a94:	4b0d      	ldr	r3, [pc, #52]	; (11acc <log_init+0x6c>)
   11a96:	4a0c      	ldr	r2, [pc, #48]	; (11ac8 <log_init+0x68>)
   11a98:	1a9b      	subs	r3, r3, r2
   11a9a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11a9e:	da0f      	bge.n	11ac0 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
   11aa0:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
   11aa2:	4d09      	ldr	r5, [pc, #36]	; (11ac8 <log_init+0x68>)
   11aa4:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
   11aa8:	7b2b      	ldrb	r3, [r5, #12]
   11aaa:	2b00      	cmp	r3, #0
   11aac:	d0f1      	beq.n	11a92 <log_init+0x32>
			if (backend->api->init != NULL) {
   11aae:	0123      	lsls	r3, r4, #4
   11ab0:	4a05      	ldr	r2, [pc, #20]	; (11ac8 <log_init+0x68>)
   11ab2:	58d3      	ldr	r3, [r2, r3]
   11ab4:	699b      	ldr	r3, [r3, #24]
   11ab6:	2b00      	cmp	r3, #0
   11ab8:	d0e2      	beq.n	11a80 <log_init+0x20>
				backend->api->init(backend);
   11aba:	4628      	mov	r0, r5
   11abc:	4798      	blx	r3
   11abe:	e7df      	b.n	11a80 <log_init+0x20>
}
   11ac0:	bd70      	pop	{r4, r5, r6, pc}
   11ac2:	4770      	bx	lr
   11ac4:	200022d4 	.word	0x200022d4
   11ac8:	0002c6f8 	.word	0x0002c6f8
   11acc:	0002c708 	.word	0x0002c708

00011ad0 <get_msg>:
{
   11ad0:	b510      	push	{r4, lr}
   11ad2:	f04f 0340 	mov.w	r3, #64	; 0x40
   11ad6:	f3ef 8411 	mrs	r4, BASEPRI
   11ada:	f383 8812 	msr	BASEPRI_MAX, r3
   11ade:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11ae2:	4804      	ldr	r0, [pc, #16]	; (11af4 <get_msg+0x24>)
   11ae4:	f014 ff92 	bl	26a0c <log_list_head_get>
	__asm__ volatile(
   11ae8:	f384 8811 	msr	BASEPRI, r4
   11aec:	f3bf 8f6f 	isb	sy
}
   11af0:	bd10      	pop	{r4, pc}
   11af2:	bf00      	nop
   11af4:	200022d8 	.word	0x200022d8

00011af8 <z_log_notify_backend_enabled>:
{
   11af8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11afa:	4b05      	ldr	r3, [pc, #20]	; (11b10 <z_log_notify_backend_enabled+0x18>)
   11afc:	781b      	ldrb	r3, [r3, #0]
   11afe:	b11b      	cbz	r3, 11b08 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
   11b00:	4b03      	ldr	r3, [pc, #12]	; (11b10 <z_log_notify_backend_enabled+0x18>)
   11b02:	2201      	movs	r2, #1
   11b04:	701a      	strb	r2, [r3, #0]
}
   11b06:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
   11b08:	4802      	ldr	r0, [pc, #8]	; (11b14 <z_log_notify_backend_enabled+0x1c>)
   11b0a:	f010 f8b9 	bl	21c80 <z_impl_k_sem_give>
}
   11b0e:	e7f7      	b.n	11b00 <z_log_notify_backend_enabled+0x8>
   11b10:	2000474e 	.word	0x2000474e
   11b14:	20000838 	.word	0x20000838

00011b18 <z_log_dropped>:
   11b18:	4b0c      	ldr	r3, [pc, #48]	; (11b4c <z_log_dropped+0x34>)
   11b1a:	f3bf 8f5b 	dmb	ish
   11b1e:	e853 2f00 	ldrex	r2, [r3]
   11b22:	3201      	adds	r2, #1
   11b24:	e843 2100 	strex	r1, r2, [r3]
   11b28:	2900      	cmp	r1, #0
   11b2a:	d1f8      	bne.n	11b1e <z_log_dropped+0x6>
   11b2c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11b30:	4b07      	ldr	r3, [pc, #28]	; (11b50 <z_log_dropped+0x38>)
   11b32:	f3bf 8f5b 	dmb	ish
   11b36:	e853 2f00 	ldrex	r2, [r3]
   11b3a:	3a01      	subs	r2, #1
   11b3c:	e843 2100 	strex	r1, r2, [r3]
   11b40:	2900      	cmp	r1, #0
   11b42:	d1f8      	bne.n	11b36 <z_log_dropped+0x1e>
   11b44:	f3bf 8f5b 	dmb	ish
}
   11b48:	4770      	bx	lr
   11b4a:	bf00      	nop
   11b4c:	200022d0 	.word	0x200022d0
   11b50:	200022cc 	.word	0x200022cc

00011b54 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11b54:	4b06      	ldr	r3, [pc, #24]	; (11b70 <z_log_dropped_read_and_clear+0x1c>)
}
   11b56:	2000      	movs	r0, #0
   11b58:	4602      	mov	r2, r0
   11b5a:	f3bf 8f5b 	dmb	ish
   11b5e:	e853 0f00 	ldrex	r0, [r3]
   11b62:	e843 2100 	strex	r1, r2, [r3]
   11b66:	2900      	cmp	r1, #0
   11b68:	d1f9      	bne.n	11b5e <z_log_dropped_read_and_clear+0xa>
   11b6a:	f3bf 8f5b 	dmb	ish
   11b6e:	4770      	bx	lr
   11b70:	200022d0 	.word	0x200022d0

00011b74 <dropped_notify>:
{
   11b74:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11b76:	f7ff ffed 	bl	11b54 <z_log_dropped_read_and_clear>
   11b7a:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
   11b7c:	2400      	movs	r4, #0
   11b7e:	e000      	b.n	11b82 <dropped_notify+0xe>
   11b80:	3401      	adds	r4, #1
   11b82:	4b0b      	ldr	r3, [pc, #44]	; (11bb0 <dropped_notify+0x3c>)
   11b84:	4a0b      	ldr	r2, [pc, #44]	; (11bb4 <dropped_notify+0x40>)
   11b86:	1a9b      	subs	r3, r3, r2
   11b88:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11b8c:	da0f      	bge.n	11bae <dropped_notify+0x3a>
   11b8e:	4809      	ldr	r0, [pc, #36]	; (11bb4 <dropped_notify+0x40>)
   11b90:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   11b94:	6843      	ldr	r3, [r0, #4]
   11b96:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   11b98:	2b00      	cmp	r3, #0
   11b9a:	d0f1      	beq.n	11b80 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
   11b9c:	0123      	lsls	r3, r4, #4
   11b9e:	4a05      	ldr	r2, [pc, #20]	; (11bb4 <dropped_notify+0x40>)
   11ba0:	58d3      	ldr	r3, [r2, r3]
   11ba2:	691b      	ldr	r3, [r3, #16]
   11ba4:	2b00      	cmp	r3, #0
   11ba6:	d0eb      	beq.n	11b80 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
   11ba8:	4629      	mov	r1, r5
   11baa:	4798      	blx	r3
   11bac:	e7e8      	b.n	11b80 <dropped_notify+0xc>
}
   11bae:	bd38      	pop	{r3, r4, r5, pc}
   11bb0:	0002c708 	.word	0x0002c708
   11bb4:	0002c6f8 	.word	0x0002c6f8

00011bb8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
   11bb8:	4b03      	ldr	r3, [pc, #12]	; (11bc8 <z_log_dropped_pending+0x10>)
   11bba:	6818      	ldr	r0, [r3, #0]
}
   11bbc:	2800      	cmp	r0, #0
   11bbe:	bfd4      	ite	le
   11bc0:	2000      	movle	r0, #0
   11bc2:	2001      	movgt	r0, #1
   11bc4:	4770      	bx	lr
   11bc6:	bf00      	nop
   11bc8:	200022d0 	.word	0x200022d0

00011bcc <z_log_strdup>:
{
   11bcc:	b510      	push	{r4, lr}
   11bce:	b082      	sub	sp, #8
   11bd0:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
   11bd2:	f7ff feb9 	bl	11948 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   11bd6:	bb10      	cbnz	r0, 11c1e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11bd8:	2200      	movs	r2, #0
   11bda:	2300      	movs	r3, #0
   11bdc:	a901      	add	r1, sp, #4
   11bde:	4811      	ldr	r0, [pc, #68]	; (11c24 <z_log_strdup+0x58>)
   11be0:	f00f fe0a 	bl	217f8 <k_mem_slab_alloc>
	if (err != 0) {
   11be4:	b108      	cbz	r0, 11bea <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
   11be6:	4c10      	ldr	r4, [pc, #64]	; (11c28 <z_log_strdup+0x5c>)
   11be8:	e019      	b.n	11c1e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
   11bea:	9b01      	ldr	r3, [sp, #4]
   11bec:	2201      	movs	r2, #1
   11bee:	f3bf 8f5b 	dmb	ish
   11bf2:	e853 1f00 	ldrex	r1, [r3]
   11bf6:	e843 2000 	strex	r0, r2, [r3]
   11bfa:	2800      	cmp	r0, #0
   11bfc:	d1f9      	bne.n	11bf2 <z_log_strdup+0x26>
   11bfe:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11c02:	2241      	movs	r2, #65	; 0x41
   11c04:	4621      	mov	r1, r4
   11c06:	9801      	ldr	r0, [sp, #4]
   11c08:	3004      	adds	r0, #4
   11c0a:	f015 ffbe 	bl	27b8a <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11c0e:	9c01      	ldr	r4, [sp, #4]
   11c10:	237e      	movs	r3, #126	; 0x7e
   11c12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   11c16:	2300      	movs	r3, #0
   11c18:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	return dup->buf;
   11c1c:	3404      	adds	r4, #4
}
   11c1e:	4620      	mov	r0, r4
   11c20:	b002      	add	sp, #8
   11c22:	bd10      	pop	{r4, pc}
   11c24:	200022e0 	.word	0x200022e0
   11c28:	0002ca8c 	.word	0x0002ca8c

00011c2c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   11c2c:	b140      	cbz	r0, 11c40 <log_is_strdup+0x14>
   11c2e:	4a07      	ldr	r2, [pc, #28]	; (11c4c <log_is_strdup+0x20>)
   11c30:	4290      	cmp	r0, r2
   11c32:	d307      	bcc.n	11c44 <log_is_strdup+0x18>
   11c34:	f502 7210 	add.w	r2, r2, #576	; 0x240
   11c38:	4290      	cmp	r0, r2
   11c3a:	d305      	bcc.n	11c48 <log_is_strdup+0x1c>
   11c3c:	2000      	movs	r0, #0
   11c3e:	4770      	bx	lr
   11c40:	2000      	movs	r0, #0
   11c42:	4770      	bx	lr
   11c44:	2000      	movs	r0, #0
   11c46:	4770      	bx	lr
   11c48:	2001      	movs	r0, #1
}
   11c4a:	4770      	bx	lr
   11c4c:	20008208 	.word	0x20008208

00011c50 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11c50:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
   11c52:	f013 0f01 	tst.w	r3, #1
   11c56:	d000      	beq.n	11c5a <detect_missed_strdup+0xa>
   11c58:	4770      	bx	lr
{
   11c5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11c5e:	b083      	sub	sp, #12
   11c60:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
   11c62:	f014 ffbe 	bl	26be2 <log_msg_str_get>
   11c66:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11c68:	4630      	mov	r0, r6
   11c6a:	f014 ffa5 	bl	26bb8 <log_msg_nargs_get>
   11c6e:	4601      	mov	r1, r0
   11c70:	4638      	mov	r0, r7
   11c72:	f014 fed9 	bl	26a28 <z_log_get_s_mask>
   11c76:	4605      	mov	r5, r0
	while (mask) {
   11c78:	e004      	b.n	11c84 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
   11c7a:	2301      	movs	r3, #1
   11c7c:	fa03 f404 	lsl.w	r4, r3, r4
   11c80:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
   11c84:	b36d      	cbz	r5, 11ce2 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
   11c86:	fab5 f485 	clz	r4, r5
   11c8a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11c8e:	4621      	mov	r1, r4
   11c90:	4630      	mov	r0, r6
   11c92:	f014 ff94 	bl	26bbe <log_msg_arg_get>
   11c96:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11c98:	f7ff fe56 	bl	11948 <is_rodata>
   11c9c:	2800      	cmp	r0, #0
   11c9e:	d1ec      	bne.n	11c7a <detect_missed_strdup+0x2a>
   11ca0:	4648      	mov	r0, r9
   11ca2:	f7ff ffc3 	bl	11c2c <log_is_strdup>
   11ca6:	2800      	cmp	r0, #0
   11ca8:	d1e7      	bne.n	11c7a <detect_missed_strdup+0x2a>
   11caa:	4b0f      	ldr	r3, [pc, #60]	; (11ce8 <detect_missed_strdup+0x98>)
   11cac:	4599      	cmp	r9, r3
   11cae:	d0e4      	beq.n	11c7a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
   11cb0:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11cb2:	f3c1 1189 	ubfx	r1, r1, #6, #10
   11cb6:	f000 fa49 	bl	1214c <log_source_name_get>
   11cba:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   11cbc:	4b0b      	ldr	r3, [pc, #44]	; (11cec <detect_missed_strdup+0x9c>)
   11cbe:	490c      	ldr	r1, [pc, #48]	; (11cf0 <detect_missed_strdup+0xa0>)
   11cc0:	1a5b      	subs	r3, r3, r1
   11cc2:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   11cc4:	2101      	movs	r1, #1
   11cc6:	f361 0802 	bfi	r8, r1, #0, #3
   11cca:	f36f 08c5 	bfc	r8, #3, #3
   11cce:	f363 188f 	bfi	r8, r3, #6, #10
   11cd2:	f8ad 8000 	strh.w	r8, [sp]
   11cd6:	463b      	mov	r3, r7
   11cd8:	4621      	mov	r1, r4
   11cda:	4806      	ldr	r0, [pc, #24]	; (11cf4 <detect_missed_strdup+0xa4>)
   11cdc:	f000 f8b2 	bl	11e44 <log_3>
   11ce0:	e7cb      	b.n	11c7a <detect_missed_strdup+0x2a>
}
   11ce2:	b003      	add	sp, #12
   11ce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11ce8:	0002ca8c 	.word	0x0002ca8c
   11cec:	0002c670 	.word	0x0002c670
   11cf0:	0002c610 	.word	0x0002c610
   11cf4:	0002caa8 	.word	0x0002caa8

00011cf8 <msg_process>:
{
   11cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cfa:	4606      	mov	r6, r0
	if (!bypass) {
   11cfc:	bb19      	cbnz	r1, 11d46 <msg_process+0x4e>
		    !panic_mode) {
   11cfe:	4b14      	ldr	r3, [pc, #80]	; (11d50 <msg_process+0x58>)
   11d00:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
   11d02:	b10b      	cbz	r3, 11d08 <msg_process+0x10>
{
   11d04:	2400      	movs	r4, #0
   11d06:	e003      	b.n	11d10 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
   11d08:	f7ff ffa2 	bl	11c50 <detect_missed_strdup>
   11d0c:	e7fa      	b.n	11d04 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
   11d0e:	3401      	adds	r4, #1
   11d10:	4b10      	ldr	r3, [pc, #64]	; (11d54 <msg_process+0x5c>)
   11d12:	4a11      	ldr	r2, [pc, #68]	; (11d58 <msg_process+0x60>)
   11d14:	1a9b      	subs	r3, r3, r2
   11d16:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   11d1a:	da14      	bge.n	11d46 <msg_process+0x4e>
	return &__log_backends_start[idx];
   11d1c:	4d0e      	ldr	r5, [pc, #56]	; (11d58 <msg_process+0x60>)
   11d1e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
   11d22:	686b      	ldr	r3, [r5, #4]
   11d24:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
   11d26:	2b00      	cmp	r3, #0
   11d28:	d0f1      	beq.n	11d0e <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
   11d2a:	4631      	mov	r1, r6
   11d2c:	4628      	mov	r0, r5
   11d2e:	f014 fe75 	bl	26a1c <msg_filter_check>
			if (log_backend_is_active(backend) &&
   11d32:	2800      	cmp	r0, #0
   11d34:	d0eb      	beq.n	11d0e <msg_process+0x16>
	backend->api->put(backend, msg);
   11d36:	0127      	lsls	r7, r4, #4
   11d38:	4b07      	ldr	r3, [pc, #28]	; (11d58 <msg_process+0x60>)
   11d3a:	59db      	ldr	r3, [r3, r7]
   11d3c:	685b      	ldr	r3, [r3, #4]
   11d3e:	4631      	mov	r1, r6
   11d40:	4628      	mov	r0, r5
   11d42:	4798      	blx	r3
}
   11d44:	e7e3      	b.n	11d0e <msg_process+0x16>
			log_msg_put(msg.msg);
   11d46:	4630      	mov	r0, r6
   11d48:	f014 ff4d 	bl	26be6 <log_msg_put>
}
   11d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11d4e:	bf00      	nop
   11d50:	2000474f 	.word	0x2000474f
   11d54:	0002c708 	.word	0x0002c708
   11d58:	0002c6f8 	.word	0x0002c6f8

00011d5c <z_impl_log_process>:
{
   11d5c:	b510      	push	{r4, lr}
   11d5e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   11d60:	4b10      	ldr	r3, [pc, #64]	; (11da4 <z_impl_log_process+0x48>)
   11d62:	781b      	ldrb	r3, [r3, #0]
   11d64:	b903      	cbnz	r3, 11d68 <z_impl_log_process+0xc>
   11d66:	b1c8      	cbz	r0, 11d9c <z_impl_log_process+0x40>
	msg = get_msg();
   11d68:	f7ff feb2 	bl	11ad0 <get_msg>
	if (msg.msg) {
   11d6c:	4602      	mov	r2, r0
   11d6e:	b178      	cbz	r0, 11d90 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11d70:	4b0d      	ldr	r3, [pc, #52]	; (11da8 <z_impl_log_process+0x4c>)
   11d72:	f3bf 8f5b 	dmb	ish
   11d76:	e853 1f00 	ldrex	r1, [r3]
   11d7a:	3901      	subs	r1, #1
   11d7c:	e843 1000 	strex	r0, r1, [r3]
   11d80:	2800      	cmp	r0, #0
   11d82:	d1f8      	bne.n	11d76 <z_impl_log_process+0x1a>
   11d84:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
   11d88:	4621      	mov	r1, r4
   11d8a:	4610      	mov	r0, r2
   11d8c:	f7ff ffb4 	bl	11cf8 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
   11d90:	b914      	cbnz	r4, 11d98 <z_impl_log_process+0x3c>
   11d92:	f7ff ff11 	bl	11bb8 <z_log_dropped_pending>
   11d96:	b910      	cbnz	r0, 11d9e <z_impl_log_process+0x42>
	return next_pending();
   11d98:	f7ff fe02 	bl	119a0 <next_pending>
}
   11d9c:	bd10      	pop	{r4, pc}
		dropped_notify();
   11d9e:	f7ff fee9 	bl	11b74 <dropped_notify>
   11da2:	e7f9      	b.n	11d98 <z_impl_log_process+0x3c>
   11da4:	2000474e 	.word	0x2000474e
   11da8:	200022cc 	.word	0x200022cc

00011dac <z_log_msg_post_finalize>:
{
   11dac:	b510      	push	{r4, lr}
   11dae:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11db0:	4b1f      	ldr	r3, [pc, #124]	; (11e30 <z_log_msg_post_finalize+0x84>)
   11db2:	f3bf 8f5b 	dmb	ish
   11db6:	e853 2f00 	ldrex	r2, [r3]
   11dba:	3201      	adds	r2, #1
   11dbc:	e843 2100 	strex	r1, r2, [r3]
   11dc0:	2900      	cmp	r1, #0
   11dc2:	d1f8      	bne.n	11db6 <z_log_msg_post_finalize+0xa>
   11dc4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   11dc8:	4b1a      	ldr	r3, [pc, #104]	; (11e34 <z_log_msg_post_finalize+0x88>)
   11dca:	781b      	ldrb	r3, [r3, #0]
   11dcc:	b963      	cbnz	r3, 11de8 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   11dce:	4b1a      	ldr	r3, [pc, #104]	; (11e38 <z_log_msg_post_finalize+0x8c>)
   11dd0:	681b      	ldr	r3, [r3, #0]
   11dd2:	b11b      	cbz	r3, 11ddc <z_log_msg_post_finalize+0x30>
   11dd4:	4a16      	ldr	r2, [pc, #88]	; (11e30 <z_log_msg_post_finalize+0x84>)
   11dd6:	6812      	ldr	r2, [r2, #0]
   11dd8:	2a01      	cmp	r2, #1
   11dda:	d015      	beq.n	11e08 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11ddc:	4a14      	ldr	r2, [pc, #80]	; (11e30 <z_log_msg_post_finalize+0x84>)
   11dde:	6812      	ldr	r2, [r2, #0]
   11de0:	2a0a      	cmp	r2, #10
   11de2:	d01c      	beq.n	11e1e <z_log_msg_post_finalize+0x72>
}
   11de4:	b002      	add	sp, #8
   11de6:	bd10      	pop	{r4, pc}
	__asm__ volatile(
   11de8:	f04f 0340 	mov.w	r3, #64	; 0x40
   11dec:	f3ef 8411 	mrs	r4, BASEPRI
   11df0:	f383 8812 	msr	BASEPRI_MAX, r3
   11df4:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11df8:	2000      	movs	r0, #0
   11dfa:	f7ff ffaf 	bl	11d5c <z_impl_log_process>
	__asm__ volatile(
   11dfe:	f384 8811 	msr	BASEPRI, r4
   11e02:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   11e06:	e7ed      	b.n	11de4 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
   11e08:	2200      	movs	r2, #0
   11e0a:	2300      	movs	r3, #0
   11e0c:	e9cd 2300 	strd	r2, r3, [sp]
   11e10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   11e14:	2300      	movs	r3, #0
   11e16:	4809      	ldr	r0, [pc, #36]	; (11e3c <z_log_msg_post_finalize+0x90>)
   11e18:	f010 ff2a 	bl	22c70 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   11e1c:	e7e2      	b.n	11de4 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   11e1e:	2b00      	cmp	r3, #0
   11e20:	d0e0      	beq.n	11de4 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
   11e22:	4806      	ldr	r0, [pc, #24]	; (11e3c <z_log_msg_post_finalize+0x90>)
   11e24:	f01a f976 	bl	2c114 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   11e28:	4805      	ldr	r0, [pc, #20]	; (11e40 <z_log_msg_post_finalize+0x94>)
   11e2a:	f00f ff29 	bl	21c80 <z_impl_k_sem_give>
}
   11e2e:	e7d9      	b.n	11de4 <z_log_msg_post_finalize+0x38>
   11e30:	200022cc 	.word	0x200022cc
   11e34:	2000474f 	.word	0x2000474f
   11e38:	200022fc 	.word	0x200022fc
   11e3c:	20001788 	.word	0x20001788
   11e40:	20000838 	.word	0x20000838

00011e44 <log_3>:
{
   11e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e48:	4680      	mov	r8, r0
   11e4a:	460f      	mov	r7, r1
   11e4c:	4616      	mov	r6, r2
   11e4e:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11e50:	f000 f9d2 	bl	121f8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   11e54:	4604      	mov	r4, r0
   11e56:	b140      	cbz	r0, 11e6a <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   11e58:	2301      	movs	r3, #1
   11e5a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11e5c:	2200      	movs	r2, #0
   11e5e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11e60:	f04f 0300 	mov.w	r3, #0
   11e64:	f362 0300 	bfi	r3, r2, #0, #1
   11e68:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
   11e6a:	b14c      	cbz	r4, 11e80 <log_3+0x3c>
		msg->str = str;
   11e6c:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
   11e70:	7a63      	ldrb	r3, [r4, #9]
   11e72:	2203      	movs	r2, #3
   11e74:	f362 1307 	bfi	r3, r2, #4, #4
   11e78:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11e7a:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11e7c:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
   11e7e:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
   11e80:	b1c4      	cbz	r4, 11eb4 <log_3+0x70>
	msg->hdr.ids = src_level;
   11e82:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11e86:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11e88:	4b0b      	ldr	r3, [pc, #44]	; (11eb8 <log_3+0x74>)
   11e8a:	681b      	ldr	r3, [r3, #0]
   11e8c:	4798      	blx	r3
   11e8e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11e90:	f04f 0340 	mov.w	r3, #64	; 0x40
   11e94:	f3ef 8511 	mrs	r5, BASEPRI
   11e98:	f383 8812 	msr	BASEPRI_MAX, r3
   11e9c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11ea0:	4621      	mov	r1, r4
   11ea2:	4806      	ldr	r0, [pc, #24]	; (11ebc <log_3+0x78>)
   11ea4:	f014 fda6 	bl	269f4 <log_list_add_tail>
	__asm__ volatile(
   11ea8:	f385 8811 	msr	BASEPRI, r5
   11eac:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11eb0:	f7ff ff7c 	bl	11dac <z_log_msg_post_finalize>
}
   11eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11eb8:	20000458 	.word	0x20000458
   11ebc:	200022d8 	.word	0x200022d8

00011ec0 <log_1>:
{
   11ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ec2:	4606      	mov	r6, r0
   11ec4:	460d      	mov	r5, r1
   11ec6:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11ec8:	f000 f996 	bl	121f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11ecc:	4604      	mov	r4, r0
   11ece:	b140      	cbz	r0, 11ee2 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
   11ed0:	2301      	movs	r3, #1
   11ed2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11ed4:	2100      	movs	r1, #0
   11ed6:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11ed8:	f04f 0300 	mov.w	r3, #0
   11edc:	f361 0300 	bfi	r3, r1, #0, #1
   11ee0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11ee2:	b134      	cbz	r4, 11ef2 <log_1+0x32>
		msg->str = str;
   11ee4:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
   11ee6:	7a63      	ldrb	r3, [r4, #9]
   11ee8:	2201      	movs	r2, #1
   11eea:	f362 1307 	bfi	r3, r2, #4, #4
   11eee:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11ef0:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
   11ef2:	b1b4      	cbz	r4, 11f22 <log_1+0x62>
	msg->hdr.ids = src_level;
   11ef4:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11ef6:	4b0b      	ldr	r3, [pc, #44]	; (11f24 <log_1+0x64>)
   11ef8:	681b      	ldr	r3, [r3, #0]
   11efa:	4798      	blx	r3
   11efc:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11efe:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f02:	f3ef 8511 	mrs	r5, BASEPRI
   11f06:	f383 8812 	msr	BASEPRI_MAX, r3
   11f0a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11f0e:	4621      	mov	r1, r4
   11f10:	4805      	ldr	r0, [pc, #20]	; (11f28 <log_1+0x68>)
   11f12:	f014 fd6f 	bl	269f4 <log_list_add_tail>
	__asm__ volatile(
   11f16:	f385 8811 	msr	BASEPRI, r5
   11f1a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11f1e:	f7ff ff45 	bl	11dac <z_log_msg_post_finalize>
}
   11f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11f24:	20000458 	.word	0x20000458
   11f28:	200022d8 	.word	0x200022d8

00011f2c <log_2>:
{
   11f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f30:	4607      	mov	r7, r0
   11f32:	460e      	mov	r6, r1
   11f34:	4615      	mov	r5, r2
   11f36:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11f38:	f000 f95e 	bl	121f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   11f3c:	4604      	mov	r4, r0
   11f3e:	b140      	cbz	r0, 11f52 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
   11f40:	2301      	movs	r3, #1
   11f42:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11f44:	2200      	movs	r2, #0
   11f46:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11f48:	f04f 0300 	mov.w	r3, #0
   11f4c:	f362 0300 	bfi	r3, r2, #0, #1
   11f50:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   11f52:	b13c      	cbz	r4, 11f64 <log_2+0x38>
		msg->str = str;
   11f54:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
   11f56:	7a63      	ldrb	r3, [r4, #9]
   11f58:	2202      	movs	r2, #2
   11f5a:	f362 1307 	bfi	r3, r2, #4, #4
   11f5e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
   11f60:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
   11f62:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
   11f64:	b1bc      	cbz	r4, 11f96 <log_2+0x6a>
	msg->hdr.ids = src_level;
   11f66:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   11f6a:	4b0c      	ldr	r3, [pc, #48]	; (11f9c <log_2+0x70>)
   11f6c:	681b      	ldr	r3, [r3, #0]
   11f6e:	4798      	blx	r3
   11f70:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11f72:	f04f 0340 	mov.w	r3, #64	; 0x40
   11f76:	f3ef 8511 	mrs	r5, BASEPRI
   11f7a:	f383 8812 	msr	BASEPRI_MAX, r3
   11f7e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11f82:	4621      	mov	r1, r4
   11f84:	4806      	ldr	r0, [pc, #24]	; (11fa0 <log_2+0x74>)
   11f86:	f014 fd35 	bl	269f4 <log_list_add_tail>
	__asm__ volatile(
   11f8a:	f385 8811 	msr	BASEPRI, r5
   11f8e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11f92:	f7ff ff0b 	bl	11dac <z_log_msg_post_finalize>
}
   11f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11f9a:	bf00      	nop
   11f9c:	20000458 	.word	0x20000458
   11fa0:	200022d8 	.word	0x200022d8

00011fa4 <log_n>:
{
   11fa4:	b538      	push	{r3, r4, r5, lr}
   11fa6:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   11fa8:	f014 fe61 	bl	26c6e <log_msg_create_n>
		if (msg == NULL) {
   11fac:	b1b8      	cbz	r0, 11fde <log_n+0x3a>
   11fae:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11fb0:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11fb2:	4b0b      	ldr	r3, [pc, #44]	; (11fe0 <log_n+0x3c>)
   11fb4:	681b      	ldr	r3, [r3, #0]
   11fb6:	4798      	blx	r3
   11fb8:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11fba:	f04f 0340 	mov.w	r3, #64	; 0x40
   11fbe:	f3ef 8411 	mrs	r4, BASEPRI
   11fc2:	f383 8812 	msr	BASEPRI_MAX, r3
   11fc6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11fca:	4629      	mov	r1, r5
   11fcc:	4805      	ldr	r0, [pc, #20]	; (11fe4 <log_n+0x40>)
   11fce:	f014 fd11 	bl	269f4 <log_list_add_tail>
	__asm__ volatile(
   11fd2:	f384 8811 	msr	BASEPRI, r4
   11fd6:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   11fda:	f7ff fee7 	bl	11dac <z_log_msg_post_finalize>
}
   11fde:	bd38      	pop	{r3, r4, r5, pc}
   11fe0:	20000458 	.word	0x20000458
   11fe4:	200022d8 	.word	0x200022d8

00011fe8 <log_hexdump>:
{
   11fe8:	b538      	push	{r3, r4, r5, lr}
   11fea:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   11fec:	f014 fe53 	bl	26c96 <log_msg_hexdump_create>
		if (msg == NULL) {
   11ff0:	b1b8      	cbz	r0, 12022 <log_hexdump+0x3a>
   11ff2:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
   11ff4:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
   11ff6:	4b0b      	ldr	r3, [pc, #44]	; (12024 <log_hexdump+0x3c>)
   11ff8:	681b      	ldr	r3, [r3, #0]
   11ffa:	4798      	blx	r3
   11ffc:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
   11ffe:	f04f 0340 	mov.w	r3, #64	; 0x40
   12002:	f3ef 8411 	mrs	r4, BASEPRI
   12006:	f383 8812 	msr	BASEPRI_MAX, r3
   1200a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1200e:	4629      	mov	r1, r5
   12010:	4805      	ldr	r0, [pc, #20]	; (12028 <log_hexdump+0x40>)
   12012:	f014 fcef 	bl	269f4 <log_list_add_tail>
	__asm__ volatile(
   12016:	f384 8811 	msr	BASEPRI, r4
   1201a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1201e:	f7ff fec5 	bl	11dac <z_log_msg_post_finalize>
}
   12022:	bd38      	pop	{r3, r4, r5, pc}
   12024:	20000458 	.word	0x20000458
   12028:	200022d8 	.word	0x200022d8

0001202c <log_0>:
{
   1202c:	b570      	push	{r4, r5, r6, lr}
   1202e:	4605      	mov	r5, r0
   12030:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12032:	f000 f8e1 	bl	121f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   12036:	4604      	mov	r4, r0
   12038:	b140      	cbz	r0, 1204c <log_0+0x20>
		msg->hdr.ref_cnt = 1;
   1203a:	2301      	movs	r3, #1
   1203c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1203e:	2200      	movs	r2, #0
   12040:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   12042:	f04f 0300 	mov.w	r3, #0
   12046:	f362 0300 	bfi	r3, r2, #0, #1
   1204a:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
   1204c:	b104      	cbz	r4, 12050 <log_0+0x24>
		msg->str = str;
   1204e:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
   12050:	b1b4      	cbz	r4, 12080 <log_0+0x54>
	msg->hdr.ids = src_level;
   12052:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
   12054:	4b0b      	ldr	r3, [pc, #44]	; (12084 <log_0+0x58>)
   12056:	681b      	ldr	r3, [r3, #0]
   12058:	4798      	blx	r3
   1205a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1205c:	f04f 0340 	mov.w	r3, #64	; 0x40
   12060:	f3ef 8511 	mrs	r5, BASEPRI
   12064:	f383 8812 	msr	BASEPRI_MAX, r3
   12068:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1206c:	4621      	mov	r1, r4
   1206e:	4806      	ldr	r0, [pc, #24]	; (12088 <log_0+0x5c>)
   12070:	f014 fcc0 	bl	269f4 <log_list_add_tail>
	__asm__ volatile(
   12074:	f385 8811 	msr	BASEPRI, r5
   12078:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
   1207c:	f7ff fe96 	bl	11dac <z_log_msg_post_finalize>
}
   12080:	bd70      	pop	{r4, r5, r6, pc}
   12082:	bf00      	nop
   12084:	20000458 	.word	0x20000458
   12088:	200022d8 	.word	0x200022d8

0001208c <z_impl_log_panic>:
	if (panic_mode) {
   1208c:	4b12      	ldr	r3, [pc, #72]	; (120d8 <z_impl_log_panic+0x4c>)
   1208e:	781b      	ldrb	r3, [r3, #0]
   12090:	b103      	cbz	r3, 12094 <z_impl_log_panic+0x8>
   12092:	4770      	bx	lr
{
   12094:	b510      	push	{r4, lr}
	log_init();
   12096:	f7ff fce3 	bl	11a60 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1209a:	2400      	movs	r4, #0
   1209c:	e000      	b.n	120a0 <z_impl_log_panic+0x14>
   1209e:	3401      	adds	r4, #1
   120a0:	4b0e      	ldr	r3, [pc, #56]	; (120dc <z_impl_log_panic+0x50>)
   120a2:	4a0f      	ldr	r2, [pc, #60]	; (120e0 <z_impl_log_panic+0x54>)
   120a4:	1a9b      	subs	r3, r3, r2
   120a6:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   120aa:	da0c      	bge.n	120c6 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
   120ac:	480c      	ldr	r0, [pc, #48]	; (120e0 <z_impl_log_panic+0x54>)
   120ae:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
   120b2:	6843      	ldr	r3, [r0, #4]
   120b4:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
   120b6:	2b00      	cmp	r3, #0
   120b8:	d0f1      	beq.n	1209e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
   120ba:	0123      	lsls	r3, r4, #4
   120bc:	4a08      	ldr	r2, [pc, #32]	; (120e0 <z_impl_log_panic+0x54>)
   120be:	58d3      	ldr	r3, [r2, r3]
   120c0:	695b      	ldr	r3, [r3, #20]
   120c2:	4798      	blx	r3
}
   120c4:	e7eb      	b.n	1209e <z_impl_log_panic+0x12>
   120c6:	2000      	movs	r0, #0
   120c8:	f7ff fe48 	bl	11d5c <z_impl_log_process>
		while (log_process(false) == true) {
   120cc:	2800      	cmp	r0, #0
   120ce:	d1fa      	bne.n	120c6 <z_impl_log_panic+0x3a>
	panic_mode = true;
   120d0:	4b01      	ldr	r3, [pc, #4]	; (120d8 <z_impl_log_panic+0x4c>)
   120d2:	2201      	movs	r2, #1
   120d4:	701a      	strb	r2, [r3, #0]
}
   120d6:	bd10      	pop	{r4, pc}
   120d8:	2000474f 	.word	0x2000474f
   120dc:	0002c708 	.word	0x0002c708
   120e0:	0002c6f8 	.word	0x0002c6f8

000120e4 <log_process_thread_func>:
{
   120e4:	b508      	push	{r3, lr}
	log_init();
   120e6:	f7ff fcbb 	bl	11a60 <log_init>
	return z_impl_z_current_get();
   120ea:	f010 fba7 	bl	2283c <z_impl_z_current_get>
	thread_set(k_current_get());
   120ee:	f7ff fc3b 	bl	11968 <thread_set>
   120f2:	e006      	b.n	12102 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
   120f4:	f04f 32ff 	mov.w	r2, #4294967295
   120f8:	f04f 33ff 	mov.w	r3, #4294967295
   120fc:	4804      	ldr	r0, [pc, #16]	; (12110 <log_process_thread_func+0x2c>)
   120fe:	f00f fde7 	bl	21cd0 <z_impl_k_sem_take>
   12102:	2000      	movs	r0, #0
   12104:	f7ff fe2a 	bl	11d5c <z_impl_log_process>
		if (log_process(false) == false) {
   12108:	2800      	cmp	r0, #0
   1210a:	d1fa      	bne.n	12102 <log_process_thread_func+0x1e>
   1210c:	e7f2      	b.n	120f4 <log_process_thread_func+0x10>
   1210e:	bf00      	nop
   12110:	20000838 	.word	0x20000838

00012114 <log_free>:
{
   12114:	b500      	push	{lr}
   12116:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   12118:	3804      	subs	r0, #4
   1211a:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1211c:	f3bf 8f5b 	dmb	ish
   12120:	e850 3f00 	ldrex	r3, [r0]
   12124:	1e5a      	subs	r2, r3, #1
   12126:	e840 2100 	strex	r1, r2, [r0]
   1212a:	2900      	cmp	r1, #0
   1212c:	d1f8      	bne.n	12120 <log_free+0xc>
   1212e:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   12132:	2b01      	cmp	r3, #1
   12134:	d002      	beq.n	1213c <log_free+0x28>
}
   12136:	b003      	add	sp, #12
   12138:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1213c:	a901      	add	r1, sp, #4
   1213e:	4802      	ldr	r0, [pc, #8]	; (12148 <log_free+0x34>)
   12140:	f019 fac2 	bl	2b6c8 <k_mem_slab_free>
}
   12144:	e7f7      	b.n	12136 <log_free+0x22>
   12146:	bf00      	nop
   12148:	200022e0 	.word	0x200022e0

0001214c <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   1214c:	4b05      	ldr	r3, [pc, #20]	; (12164 <log_source_name_get+0x18>)
   1214e:	4a06      	ldr	r2, [pc, #24]	; (12168 <log_source_name_get+0x1c>)
   12150:	1a9b      	subs	r3, r3, r2
   12152:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   12156:	d202      	bcs.n	1215e <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
   12158:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
   1215c:	4770      	bx	lr
   1215e:	2000      	movs	r0, #0
}
   12160:	4770      	bx	lr
   12162:	bf00      	nop
   12164:	0002c6f8 	.word	0x0002c6f8
   12168:	0002c610 	.word	0x0002c610

0001216c <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
   1216c:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   1216e:	4b07      	ldr	r3, [pc, #28]	; (1218c <log_backend_enable+0x20>)
   12170:	1ac3      	subs	r3, r0, r3
   12172:	111b      	asrs	r3, r3, #4
   12174:	3301      	adds	r3, #1
	backend->cb->id = id;
   12176:	6842      	ldr	r2, [r0, #4]
   12178:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
   1217a:	6843      	ldr	r3, [r0, #4]
   1217c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   1217e:	6843      	ldr	r3, [r0, #4]
   12180:	2201      	movs	r2, #1
   12182:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
   12184:	f7ff fcb8 	bl	11af8 <z_log_notify_backend_enabled>
}
   12188:	bd08      	pop	{r3, pc}
   1218a:	bf00      	nop
   1218c:	0002c6f8 	.word	0x0002c6f8

00012190 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
   12190:	b510      	push	{r4, lr}
   12192:	b082      	sub	sp, #8
   12194:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
   12196:	9b01      	ldr	r3, [sp, #4]
   12198:	b133      	cbz	r3, 121a8 <cont_free+0x18>
		next = cont->next;
   1219a:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   1219c:	a901      	add	r1, sp, #4
   1219e:	4803      	ldr	r0, [pc, #12]	; (121ac <cont_free+0x1c>)
   121a0:	f019 fa92 	bl	2b6c8 <k_mem_slab_free>
		cont = next;
   121a4:	9401      	str	r4, [sp, #4]
   121a6:	e7f6      	b.n	12196 <cont_free+0x6>
	}
}
   121a8:	b002      	add	sp, #8
   121aa:	bd10      	pop	{r4, pc}
   121ac:	20002300 	.word	0x20002300

000121b0 <log_msg_pool_init>:
{
   121b0:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   121b2:	2320      	movs	r3, #32
   121b4:	461a      	mov	r2, r3
   121b6:	4902      	ldr	r1, [pc, #8]	; (121c0 <log_msg_pool_init+0x10>)
   121b8:	4802      	ldr	r0, [pc, #8]	; (121c4 <log_msg_pool_init+0x14>)
   121ba:	f019 fa77 	bl	2b6ac <k_mem_slab_init>
}
   121be:	bd08      	pop	{r3, pc}
   121c0:	20008448 	.word	0x20008448
   121c4:	20002300 	.word	0x20002300

000121c8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   121c8:	b510      	push	{r4, lr}
   121ca:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
   121cc:	2300      	movs	r3, #0
   121ce:	9301      	str	r3, [sp, #4]
   121d0:	2001      	movs	r0, #1
   121d2:	f7ff fdc3 	bl	11d5c <z_impl_log_process>
   121d6:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
   121d8:	f7ff fc9e 	bl	11b18 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   121dc:	2200      	movs	r2, #0
   121de:	2300      	movs	r3, #0
   121e0:	a901      	add	r1, sp, #4
   121e2:	4804      	ldr	r0, [pc, #16]	; (121f4 <log_msg_no_space_handle+0x2c>)
   121e4:	f00f fb08 	bl	217f8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   121e8:	b108      	cbz	r0, 121ee <log_msg_no_space_handle+0x26>
   121ea:	2c00      	cmp	r4, #0
   121ec:	d1f0      	bne.n	121d0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   121ee:	9801      	ldr	r0, [sp, #4]
   121f0:	b002      	add	sp, #8
   121f2:	bd10      	pop	{r4, pc}
   121f4:	20002300 	.word	0x20002300

000121f8 <log_msg_chunk_alloc>:
{
   121f8:	b500      	push	{lr}
   121fa:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
   121fc:	2300      	movs	r3, #0
   121fe:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
   12200:	f014 fc33 	bl	26a6a <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12204:	b150      	cbz	r0, 1221c <log_msg_chunk_alloc+0x24>
   12206:	2200      	movs	r2, #0
   12208:	2300      	movs	r3, #0
   1220a:	a901      	add	r1, sp, #4
   1220c:	4807      	ldr	r0, [pc, #28]	; (1222c <log_msg_chunk_alloc+0x34>)
   1220e:	f00f faf3 	bl	217f8 <k_mem_slab_alloc>
	if (err != 0) {
   12212:	b930      	cbnz	r0, 12222 <log_msg_chunk_alloc+0x2a>
}
   12214:	9801      	ldr	r0, [sp, #4]
   12216:	b003      	add	sp, #12
   12218:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   1221c:	2200      	movs	r2, #0
   1221e:	2300      	movs	r3, #0
   12220:	e7f3      	b.n	1220a <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
   12222:	f7ff ffd1 	bl	121c8 <log_msg_no_space_handle>
   12226:	9001      	str	r0, [sp, #4]
   12228:	e7f4      	b.n	12214 <log_msg_chunk_alloc+0x1c>
   1222a:	bf00      	nop
   1222c:	20002300 	.word	0x20002300

00012230 <msg_free>:
{
   12230:	b5f0      	push	{r4, r5, r6, r7, lr}
   12232:	b083      	sub	sp, #12
   12234:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
   12236:	4604      	mov	r4, r0
   12238:	f014 fcbe 	bl	26bb8 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1223c:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
   1223e:	f013 0f01 	tst.w	r3, #1
   12242:	d101      	bne.n	12248 <msg_free+0x18>
   12244:	4606      	mov	r6, r0
   12246:	bb50      	cbnz	r0, 1229e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
   12248:	9b01      	ldr	r3, [sp, #4]
   1224a:	7a1a      	ldrb	r2, [r3, #8]
   1224c:	f012 0f02 	tst.w	r2, #2
   12250:	d128      	bne.n	122a4 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12252:	a901      	add	r1, sp, #4
   12254:	4815      	ldr	r0, [pc, #84]	; (122ac <msg_free+0x7c>)
   12256:	f019 fa37 	bl	2b6c8 <k_mem_slab_free>
}
   1225a:	b003      	add	sp, #12
   1225c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
   1225e:	9801      	ldr	r0, [sp, #4]
   12260:	f014 fcbf 	bl	26be2 <log_msg_str_get>
   12264:	4631      	mov	r1, r6
   12266:	f014 fbdf 	bl	26a28 <z_log_get_s_mask>
					if (smask == 0U) {
   1226a:	4607      	mov	r7, r0
   1226c:	b988      	cbnz	r0, 12292 <msg_free+0x62>
   1226e:	e7eb      	b.n	12248 <msg_free+0x18>
					log_free(buf);
   12270:	4628      	mov	r0, r5
   12272:	f7ff ff4f 	bl	12114 <log_free>
		for (i = 0U; i < nargs; i++) {
   12276:	3401      	adds	r4, #1
   12278:	42b4      	cmp	r4, r6
   1227a:	d2e5      	bcs.n	12248 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
   1227c:	4621      	mov	r1, r4
   1227e:	9801      	ldr	r0, [sp, #4]
   12280:	f014 fc9d 	bl	26bbe <log_msg_arg_get>
   12284:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
   12286:	f7ff fcd1 	bl	11c2c <log_is_strdup>
   1228a:	2800      	cmp	r0, #0
   1228c:	d0f3      	beq.n	12276 <msg_free+0x46>
				if (smask == 0U) {
   1228e:	2f00      	cmp	r7, #0
   12290:	d0e5      	beq.n	1225e <msg_free+0x2e>
				if (smask & BIT(i)) {
   12292:	fa27 f304 	lsr.w	r3, r7, r4
   12296:	f013 0f01 	tst.w	r3, #1
   1229a:	d0ec      	beq.n	12276 <msg_free+0x46>
   1229c:	e7e8      	b.n	12270 <msg_free+0x40>
		uint32_t smask = 0U;
   1229e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
   122a0:	463c      	mov	r4, r7
   122a2:	e7e9      	b.n	12278 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
   122a4:	6958      	ldr	r0, [r3, #20]
   122a6:	f7ff ff73 	bl	12190 <cont_free>
   122aa:	e7d2      	b.n	12252 <msg_free+0x22>
   122ac:	20002300 	.word	0x20002300

000122b0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   122b0:	b40e      	push	{r1, r2, r3}
   122b2:	b500      	push	{lr}
   122b4:	b082      	sub	sp, #8
   122b6:	4601      	mov	r1, r0
   122b8:	ab03      	add	r3, sp, #12
   122ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
   122be:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   122c0:	4803      	ldr	r0, [pc, #12]	; (122d0 <print_formatted+0x20>)
   122c2:	f7fe fe3f 	bl	10f44 <cbvprintf>
	va_end(args);

	return length;
}
   122c6:	b002      	add	sp, #8
   122c8:	f85d eb04 	ldr.w	lr, [sp], #4
   122cc:	b003      	add	sp, #12
   122ce:	4770      	bx	lr
   122d0:	000270bf 	.word	0x000270bf

000122d4 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
   122d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   122d6:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
   122d8:	f011 0f44 	tst.w	r1, #68	; 0x44
   122dc:	d005      	beq.n	122ea <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
   122de:	4b1a      	ldr	r3, [pc, #104]	; (12348 <timestamp_print+0x74>)
   122e0:	681c      	ldr	r4, [r3, #0]
   122e2:	b934      	cbnz	r4, 122f2 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
   122e4:	2000      	movs	r0, #0
	}

	return length;
}
   122e6:	b005      	add	sp, #20
   122e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
   122ea:	4918      	ldr	r1, [pc, #96]	; (1234c <timestamp_print+0x78>)
   122ec:	f7ff ffe0 	bl	122b0 <print_formatted>
   122f0:	e7f9      	b.n	122e6 <timestamp_print+0x12>
		timestamp /= timestamp_div;
   122f2:	4b17      	ldr	r3, [pc, #92]	; (12350 <timestamp_print+0x7c>)
   122f4:	6819      	ldr	r1, [r3, #0]
   122f6:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
   122fa:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
   122fe:	4a15      	ldr	r2, [pc, #84]	; (12354 <timestamp_print+0x80>)
   12300:	fba2 3205 	umull	r3, r2, r2, r5
   12304:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
   12306:	f44f 6661 	mov.w	r6, #3600	; 0xe10
   1230a:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
   1230e:	4b12      	ldr	r3, [pc, #72]	; (12358 <timestamp_print+0x84>)
   12310:	fba3 7306 	umull	r7, r3, r3, r6
   12314:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
   12316:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
   1231a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1231e:	fb05 f101 	mul.w	r1, r5, r1
   12322:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12326:	fb07 1114 	mls	r1, r7, r4, r1
   1232a:	fb05 f101 	mul.w	r1, r5, r1
   1232e:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
   12332:	9402      	str	r4, [sp, #8]
   12334:	9701      	str	r7, [sp, #4]
   12336:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1233a:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
   1233e:	9100      	str	r1, [sp, #0]
   12340:	4906      	ldr	r1, [pc, #24]	; (1235c <timestamp_print+0x88>)
   12342:	f7ff ffb5 	bl	122b0 <print_formatted>
   12346:	e7ce      	b.n	122e6 <timestamp_print+0x12>
   12348:	2000231c 	.word	0x2000231c
   1234c:	0002caec 	.word	0x0002caec
   12350:	20002320 	.word	0x20002320
   12354:	91a2b3c5 	.word	0x91a2b3c5
   12358:	88888889 	.word	0x88888889
   1235c:	0002caf8 	.word	0x0002caf8

00012360 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
   12360:	b161      	cbz	r1, 1237c <color_print+0x1c>
{
   12362:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   12364:	b12a      	cbz	r2, 12372 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
   12366:	4a06      	ldr	r2, [pc, #24]	; (12380 <color_print+0x20>)
   12368:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   1236c:	b912      	cbnz	r2, 12374 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
   1236e:	4a05      	ldr	r2, [pc, #20]	; (12384 <color_print+0x24>)
   12370:	e000      	b.n	12374 <color_print+0x14>
   12372:	4a04      	ldr	r2, [pc, #16]	; (12384 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
   12374:	4904      	ldr	r1, [pc, #16]	; (12388 <color_print+0x28>)
   12376:	f7ff ff9b 	bl	122b0 <print_formatted>
	}
}
   1237a:	bd08      	pop	{r3, pc}
   1237c:	4770      	bx	lr
   1237e:	bf00      	nop
   12380:	0002cb68 	.word	0x0002cb68
   12384:	0002cb14 	.word	0x0002cb14
   12388:	0002da64 	.word	0x0002da64

0001238c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1238c:	f011 0f10 	tst.w	r1, #16
   12390:	d10b      	bne.n	123aa <newline_print+0x1e>
{
   12392:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12394:	f011 0f20 	tst.w	r1, #32
   12398:	d003      	beq.n	123a2 <newline_print+0x16>
		print_formatted(ctx, "\n");
   1239a:	4904      	ldr	r1, [pc, #16]	; (123ac <newline_print+0x20>)
   1239c:	f7ff ff88 	bl	122b0 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
   123a0:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
   123a2:	4903      	ldr	r1, [pc, #12]	; (123b0 <newline_print+0x24>)
   123a4:	f7ff ff84 	bl	122b0 <print_formatted>
   123a8:	e7fa      	b.n	123a0 <newline_print+0x14>
   123aa:	4770      	bx	lr
   123ac:	0002c8ac 	.word	0x0002c8ac
   123b0:	0002f2cc 	.word	0x0002f2cc

000123b4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
   123b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123b8:	4605      	mov	r5, r0
   123ba:	460f      	mov	r7, r1
   123bc:	4616      	mov	r6, r2
   123be:	4698      	mov	r8, r3
	newline_print(output, flags);
   123c0:	9906      	ldr	r1, [sp, #24]
   123c2:	f7ff ffe3 	bl	1238c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
   123c6:	2400      	movs	r4, #0
   123c8:	4544      	cmp	r4, r8
   123ca:	da05      	bge.n	123d8 <hexdump_line_print+0x24>
		print_formatted(output, " ");
   123cc:	4923      	ldr	r1, [pc, #140]	; (1245c <hexdump_line_print+0xa8>)
   123ce:	4628      	mov	r0, r5
   123d0:	f7ff ff6e 	bl	122b0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   123d4:	3401      	adds	r4, #1
   123d6:	e7f7      	b.n	123c8 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   123d8:	2400      	movs	r4, #0
   123da:	e009      	b.n	123f0 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   123dc:	491f      	ldr	r1, [pc, #124]	; (1245c <hexdump_line_print+0xa8>)
   123de:	4628      	mov	r0, r5
   123e0:	f7ff ff66 	bl	122b0 <print_formatted>
   123e4:	e00b      	b.n	123fe <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
   123e6:	491e      	ldr	r1, [pc, #120]	; (12460 <hexdump_line_print+0xac>)
   123e8:	4628      	mov	r0, r5
   123ea:	f7ff ff61 	bl	122b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   123ee:	3401      	adds	r4, #1
   123f0:	2c0f      	cmp	r4, #15
   123f2:	dc0c      	bgt.n	1240e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
   123f4:	2c00      	cmp	r4, #0
   123f6:	dd02      	ble.n	123fe <hexdump_line_print+0x4a>
   123f8:	f014 0f07 	tst.w	r4, #7
   123fc:	d0ee      	beq.n	123dc <hexdump_line_print+0x28>
		if (i < length) {
   123fe:	42b4      	cmp	r4, r6
   12400:	d2f1      	bcs.n	123e6 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
   12402:	5d3a      	ldrb	r2, [r7, r4]
   12404:	4917      	ldr	r1, [pc, #92]	; (12464 <hexdump_line_print+0xb0>)
   12406:	4628      	mov	r0, r5
   12408:	f7ff ff52 	bl	122b0 <print_formatted>
   1240c:	e7ef      	b.n	123ee <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
   1240e:	4916      	ldr	r1, [pc, #88]	; (12468 <hexdump_line_print+0xb4>)
   12410:	4628      	mov	r0, r5
   12412:	f7ff ff4d 	bl	122b0 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12416:	2400      	movs	r4, #0
   12418:	e009      	b.n	1242e <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
   1241a:	4910      	ldr	r1, [pc, #64]	; (1245c <hexdump_line_print+0xa8>)
   1241c:	4628      	mov	r0, r5
   1241e:	f7ff ff47 	bl	122b0 <print_formatted>
   12422:	e00b      	b.n	1243c <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
   12424:	4911      	ldr	r1, [pc, #68]	; (1246c <hexdump_line_print+0xb8>)
   12426:	4628      	mov	r0, r5
   12428:	f7ff ff42 	bl	122b0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1242c:	3401      	adds	r4, #1
   1242e:	2c0f      	cmp	r4, #15
   12430:	dc12      	bgt.n	12458 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
   12432:	2c00      	cmp	r4, #0
   12434:	dd02      	ble.n	1243c <hexdump_line_print+0x88>
   12436:	f014 0f07 	tst.w	r4, #7
   1243a:	d0ee      	beq.n	1241a <hexdump_line_print+0x66>
		if (i < length) {
   1243c:	42b4      	cmp	r4, r6
   1243e:	d206      	bcs.n	1244e <hexdump_line_print+0x9a>
			char c = (char)data[i];
   12440:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
   12442:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
   12446:	2b5e      	cmp	r3, #94	; 0x5e
   12448:	d9ec      	bls.n	12424 <hexdump_line_print+0x70>
   1244a:	222e      	movs	r2, #46	; 0x2e
   1244c:	e7ea      	b.n	12424 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
   1244e:	4903      	ldr	r1, [pc, #12]	; (1245c <hexdump_line_print+0xa8>)
   12450:	4628      	mov	r0, r5
   12452:	f7ff ff2d 	bl	122b0 <print_formatted>
   12456:	e7e9      	b.n	1242c <hexdump_line_print+0x78>
		}
	}
}
   12458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1245c:	0002cb40 	.word	0x0002cb40
   12460:	0002cb24 	.word	0x0002cb24
   12464:	0002cb1c 	.word	0x0002cb1c
   12468:	0002cb28 	.word	0x0002cb28
   1246c:	0002cb2c 	.word	0x0002cb2c

00012470 <ids_print>:
{
   12470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12474:	4680      	mov	r8, r0
   12476:	4616      	mov	r6, r2
   12478:	461d      	mov	r5, r3
   1247a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
   1247e:	b959      	cbnz	r1, 12498 <ids_print+0x28>
	int total = 0;
   12480:	2400      	movs	r4, #0
	if (source_id >= 0) {
   12482:	2f00      	cmp	r7, #0
   12484:	db1c      	blt.n	124c0 <ids_print+0x50>
		total += print_formatted(output,
   12486:	b186      	cbz	r6, 124aa <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12488:	2301      	movs	r3, #1
   1248a:	9a07      	ldr	r2, [sp, #28]
   1248c:	4093      	lsls	r3, r2
				(func_on &&
   1248e:	f013 0f10 	tst.w	r3, #16
   12492:	d118      	bne.n	124c6 <ids_print+0x56>
		total += print_formatted(output,
   12494:	4e0d      	ldr	r6, [pc, #52]	; (124cc <ids_print+0x5c>)
   12496:	e009      	b.n	124ac <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
   12498:	4b0d      	ldr	r3, [pc, #52]	; (124d0 <ids_print+0x60>)
   1249a:	9a07      	ldr	r2, [sp, #28]
   1249c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   124a0:	490c      	ldr	r1, [pc, #48]	; (124d4 <ids_print+0x64>)
   124a2:	f7ff ff05 	bl	122b0 <print_formatted>
   124a6:	4604      	mov	r4, r0
   124a8:	e7eb      	b.n	12482 <ids_print+0x12>
		total += print_formatted(output,
   124aa:	4e08      	ldr	r6, [pc, #32]	; (124cc <ids_print+0x5c>)
   124ac:	4639      	mov	r1, r7
   124ae:	4628      	mov	r0, r5
   124b0:	f7ff fe4c 	bl	1214c <log_source_name_get>
   124b4:	4602      	mov	r2, r0
   124b6:	4631      	mov	r1, r6
   124b8:	4640      	mov	r0, r8
   124ba:	f7ff fef9 	bl	122b0 <print_formatted>
   124be:	4404      	add	r4, r0
}
   124c0:	4620      	mov	r0, r4
   124c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
   124c6:	4e04      	ldr	r6, [pc, #16]	; (124d8 <ids_print+0x68>)
   124c8:	e7f0      	b.n	124ac <ids_print+0x3c>
   124ca:	bf00      	nop
   124cc:	0002cb30 	.word	0x0002cb30
   124d0:	0002cba4 	.word	0x0002cba4
   124d4:	0002cb3c 	.word	0x0002cb3c
   124d8:	0002cb38 	.word	0x0002cb38

000124dc <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
   124dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   124e0:	b089      	sub	sp, #36	; 0x24
   124e2:	4607      	mov	r7, r0
   124e4:	460e      	mov	r6, r1
   124e6:	4691      	mov	r9, r2
   124e8:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
   124ea:	f014 fb7a 	bl	26be2 <log_msg_str_get>
   124ee:	4602      	mov	r2, r0
   124f0:	490e      	ldr	r1, [pc, #56]	; (1252c <hexdump_print+0x50>)
   124f2:	4630      	mov	r0, r6
   124f4:	f7ff fedc 	bl	122b0 <print_formatted>
	uint32_t offset = 0U;
   124f8:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
   124fa:	2510      	movs	r5, #16
   124fc:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   124fe:	4623      	mov	r3, r4
   12500:	aa03      	add	r2, sp, #12
   12502:	eb0d 0105 	add.w	r1, sp, r5
   12506:	4638      	mov	r0, r7
   12508:	f014 fc1d 	bl	26d46 <log_msg_hexdump_data_get>

		if (length) {
   1250c:	9a03      	ldr	r2, [sp, #12]
   1250e:	b152      	cbz	r2, 12526 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
   12510:	f8cd 8000 	str.w	r8, [sp]
   12514:	464b      	mov	r3, r9
   12516:	eb0d 0105 	add.w	r1, sp, r5
   1251a:	4630      	mov	r0, r6
   1251c:	f7ff ff4a 	bl	123b4 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
   12520:	9d03      	ldr	r5, [sp, #12]
   12522:	442c      	add	r4, r5
		length = sizeof(buf);
   12524:	e7e9      	b.n	124fa <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
   12526:	b009      	add	sp, #36	; 0x24
   12528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1252c:	0002da64 	.word	0x0002da64

00012530 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
   12530:	b5f0      	push	{r4, r5, r6, r7, lr}
   12532:	b083      	sub	sp, #12
   12534:	4606      	mov	r6, r0
   12536:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
   12538:	2700      	movs	r7, #0
	size_t offset = 0;
   1253a:	463d      	mov	r5, r7
   1253c:	e00d      	b.n	1255a <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
   1253e:	68a2      	ldr	r2, [r4, #8]
   12540:	4413      	add	r3, r2
   12542:	f813 7c01 	ldrb.w	r7, [r3, #-1]
   12546:	2f0a      	cmp	r7, #10
   12548:	bf14      	ite	ne
   1254a:	2700      	movne	r7, #0
   1254c:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
   1254e:	4620      	mov	r0, r4
   12550:	f014 fda8 	bl	270a4 <log_output_flush>
		offset += length;
   12554:	9b01      	ldr	r3, [sp, #4]
   12556:	441d      	add	r5, r3
	} while (length > 0);
   12558:	b173      	cbz	r3, 12578 <raw_string_print+0x48>
		length = output->size;
   1255a:	68e3      	ldr	r3, [r4, #12]
   1255c:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   1255e:	462b      	mov	r3, r5
   12560:	aa01      	add	r2, sp, #4
   12562:	68a1      	ldr	r1, [r4, #8]
   12564:	4630      	mov	r0, r6
   12566:	f014 fbee 	bl	26d46 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   1256a:	6863      	ldr	r3, [r4, #4]
   1256c:	9a01      	ldr	r2, [sp, #4]
   1256e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12570:	9b01      	ldr	r3, [sp, #4]
   12572:	2b00      	cmp	r3, #0
   12574:	d0eb      	beq.n	1254e <raw_string_print+0x1e>
   12576:	e7e2      	b.n	1253e <raw_string_print+0xe>

	if (eol) {
   12578:	b90f      	cbnz	r7, 1257e <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
   1257a:	b003      	add	sp, #12
   1257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
   1257e:	4902      	ldr	r1, [pc, #8]	; (12588 <raw_string_print+0x58>)
   12580:	4620      	mov	r0, r4
   12582:	f7ff fe95 	bl	122b0 <print_formatted>
}
   12586:	e7f8      	b.n	1257a <raw_string_print+0x4a>
   12588:	0002cb44 	.word	0x0002cb44

0001258c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   1258c:	b570      	push	{r4, r5, r6, lr}
   1258e:	b082      	sub	sp, #8
   12590:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
   12592:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12594:	f242 730f 	movw	r3, #9999	; 0x270f
   12598:	428b      	cmp	r3, r1
   1259a:	bf28      	it	cs
   1259c:	460b      	movcs	r3, r1
   1259e:	4a0e      	ldr	r2, [pc, #56]	; (125d8 <log_output_dropped_process+0x4c>)
   125a0:	2105      	movs	r1, #5
   125a2:	4668      	mov	r0, sp
   125a4:	f013 fb64 	bl	25c70 <snprintk>
   125a8:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
   125aa:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   125ac:	685b      	ldr	r3, [r3, #4]
   125ae:	220b      	movs	r2, #11
   125b0:	490a      	ldr	r1, [pc, #40]	; (125dc <log_output_dropped_process+0x50>)
   125b2:	4628      	mov	r0, r5
   125b4:	f014 fbcf 	bl	26d56 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
   125b8:	6863      	ldr	r3, [r4, #4]
   125ba:	685b      	ldr	r3, [r3, #4]
   125bc:	4632      	mov	r2, r6
   125be:	4669      	mov	r1, sp
   125c0:	4628      	mov	r0, r5
   125c2:	f014 fbc8 	bl	26d56 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
   125c6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   125c8:	685b      	ldr	r3, [r3, #4]
   125ca:	221b      	movs	r2, #27
   125cc:	4904      	ldr	r1, [pc, #16]	; (125e0 <log_output_dropped_process+0x54>)
   125ce:	4628      	mov	r0, r5
   125d0:	f014 fbc1 	bl	26d56 <buffer_write>
}
   125d4:	b002      	add	sp, #8
   125d6:	bd70      	pop	{r4, r5, r6, pc}
   125d8:	0002e5b0 	.word	0x0002e5b0
   125dc:	0002cb98 	.word	0x0002cb98
   125e0:	0002cb7c 	.word	0x0002cb7c

000125e4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   125e4:	4b07      	ldr	r3, [pc, #28]	; (12604 <log_output_timestamp_freq_set+0x20>)
   125e6:	2201      	movs	r2, #1
   125e8:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   125ea:	4b07      	ldr	r3, [pc, #28]	; (12608 <log_output_timestamp_freq_set+0x24>)
   125ec:	4298      	cmp	r0, r3
   125ee:	d905      	bls.n	125fc <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
   125f0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   125f2:	4a04      	ldr	r2, [pc, #16]	; (12604 <log_output_timestamp_freq_set+0x20>)
   125f4:	6813      	ldr	r3, [r2, #0]
   125f6:	005b      	lsls	r3, r3, #1
   125f8:	6013      	str	r3, [r2, #0]
   125fa:	e7f6      	b.n	125ea <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
   125fc:	4b03      	ldr	r3, [pc, #12]	; (1260c <log_output_timestamp_freq_set+0x28>)
   125fe:	6018      	str	r0, [r3, #0]
}
   12600:	4770      	bx	lr
   12602:	bf00      	nop
   12604:	20002320 	.word	0x20002320
   12608:	000f4240 	.word	0x000f4240
   1260c:	2000231c 	.word	0x2000231c

00012610 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
   12610:	b570      	push	{r4, r5, r6, lr}
   12612:	4606      	mov	r6, r0
   12614:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
   12616:	2400      	movs	r4, #0
   12618:	42ac      	cmp	r4, r5
   1261a:	d207      	bcs.n	1262c <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
   1261c:	4b04      	ldr	r3, [pc, #16]	; (12630 <char_out+0x20>)
   1261e:	6818      	ldr	r0, [r3, #0]
   12620:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
   12622:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   12624:	685b      	ldr	r3, [r3, #4]
   12626:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   12628:	3401      	adds	r4, #1
   1262a:	e7f5      	b.n	12618 <char_out+0x8>
#endif
	}

	return length;
}
   1262c:	4628      	mov	r0, r5
   1262e:	bd70      	pop	{r4, r5, r6, pc}
   12630:	20002338 	.word	0x20002338

00012634 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   12634:	4b01      	ldr	r3, [pc, #4]	; (1263c <log_backend_uart_init+0x8>)
   12636:	4a02      	ldr	r2, [pc, #8]	; (12640 <log_backend_uart_init+0xc>)
   12638:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
   1263a:	4770      	bx	lr
   1263c:	20002338 	.word	0x20002338
   12640:	0002c388 	.word	0x0002c388

00012644 <panic>:

static void panic(struct log_backend const *const backend)
{
   12644:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   12646:	4802      	ldr	r0, [pc, #8]	; (12650 <panic+0xc>)
   12648:	f014 fd2c 	bl	270a4 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
   1264c:	bd08      	pop	{r3, pc}
   1264e:	bf00      	nop
   12650:	0002cbe8 	.word	0x0002cbe8

00012654 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
   12654:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12656:	4802      	ldr	r0, [pc, #8]	; (12660 <dropped+0xc>)
   12658:	f7ff ff98 	bl	1258c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
   1265c:	bd08      	pop	{r3, pc}
   1265e:	bf00      	nop
   12660:	0002cbe8 	.word	0x0002cbe8

00012664 <put>:
{
   12664:	b510      	push	{r4, lr}
   12666:	460c      	mov	r4, r1
	log_msg_get(msg);
   12668:	4608      	mov	r0, r1
   1266a:	f014 fa98 	bl	26b9e <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1266e:	220f      	movs	r2, #15
   12670:	4621      	mov	r1, r4
   12672:	4803      	ldr	r0, [pc, #12]	; (12680 <put+0x1c>)
   12674:	f014 fd3f 	bl	270f6 <log_output_msg_process>
	log_msg_put(msg);
   12678:	4620      	mov	r0, r4
   1267a:	f014 fab4 	bl	26be6 <log_msg_put>
}
   1267e:	bd10      	pop	{r4, pc}
   12680:	0002cbe8 	.word	0x0002cbe8

00012684 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   12684:	2807      	cmp	r0, #7
   12686:	d901      	bls.n	1268c <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
   12688:	2000      	movs	r0, #0
}
   1268a:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
   1268c:	4b02      	ldr	r3, [pc, #8]	; (12698 <usb_set_alt_setting+0x14>)
   1268e:	4418      	add	r0, r3
   12690:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
   12694:	2001      	movs	r0, #1
   12696:	4770      	bx	lr
   12698:	2000233c 	.word	0x2000233c

0001269c <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
   1269c:	2807      	cmp	r0, #7
   1269e:	d901      	bls.n	126a4 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
   126a0:	2000      	movs	r0, #0
}
   126a2:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
   126a4:	4b02      	ldr	r3, [pc, #8]	; (126b0 <usb_get_alt_setting+0x14>)
   126a6:	4418      	add	r0, r3
   126a8:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
   126ac:	4770      	bx	lr
   126ae:	bf00      	nop
   126b0:	2000233c 	.word	0x2000233c

000126b4 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   126b4:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
   126b6:	7803      	ldrb	r3, [r0, #0]
   126b8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
   126bc:	330a      	adds	r3, #10
   126be:	4c06      	ldr	r4, [pc, #24]	; (126d8 <usb_handle_request+0x24>)
   126c0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
   126c4:	b123      	cbz	r3, 126d0 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
   126c6:	4798      	blx	r3
   126c8:	2800      	cmp	r0, #0
   126ca:	db03      	blt.n	126d4 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
   126cc:	2001      	movs	r0, #1
}
   126ce:	bd10      	pop	{r4, pc}
		return false;
   126d0:	2000      	movs	r0, #0
   126d2:	e7fc      	b.n	126ce <usb_handle_request+0x1a>
		return false;
   126d4:	2000      	movs	r0, #0
   126d6:	e7fa      	b.n	126ce <usb_handle_request+0x1a>
   126d8:	2000233c 	.word	0x2000233c

000126dc <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
   126dc:	300a      	adds	r0, #10
   126de:	4b02      	ldr	r3, [pc, #8]	; (126e8 <usb_register_request_handler+0xc>)
   126e0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   126e4:	4770      	bx	lr
   126e6:	bf00      	nop
   126e8:	2000233c 	.word	0x2000233c

000126ec <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
   126ec:	4b01      	ldr	r3, [pc, #4]	; (126f4 <usb_register_descriptors+0x8>)
   126ee:	6258      	str	r0, [r3, #36]	; 0x24
}
   126f0:	4770      	bx	lr
   126f2:	bf00      	nop
   126f4:	2000233c 	.word	0x2000233c

000126f8 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
   126f8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
   126fa:	8847      	ldrh	r7, [r0, #2]
   126fc:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
   126fe:	1f2b      	subs	r3, r5, #4
   12700:	b2db      	uxtb	r3, r3
   12702:	2b01      	cmp	r3, #1
   12704:	d91e      	bls.n	12744 <usb_get_descriptor+0x4c>
   12706:	b2ff      	uxtb	r7, r7
   12708:	2d07      	cmp	r5, #7
   1270a:	d81e      	bhi.n	1274a <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
   1270c:	4b10      	ldr	r3, [pc, #64]	; (12750 <usb_get_descriptor+0x58>)
   1270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
   12710:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
   12712:	e000      	b.n	12716 <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
   12714:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
   12716:	7818      	ldrb	r0, [r3, #0]
   12718:	b138      	cbz	r0, 1272a <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
   1271a:	785c      	ldrb	r4, [r3, #1]
   1271c:	42ac      	cmp	r4, r5
   1271e:	d1f9      	bne.n	12714 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
   12720:	42b7      	cmp	r7, r6
   12722:	d001      	beq.n	12728 <usb_get_descriptor+0x30>
			cur_index++;
   12724:	3601      	adds	r6, #1
   12726:	e7f5      	b.n	12714 <usb_get_descriptor+0x1c>
				found = true;
   12728:	2001      	movs	r0, #1
	}

	if (found) {
   1272a:	b160      	cbz	r0, 12746 <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
   1272c:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
   1272e:	2d02      	cmp	r5, #2
   12730:	d002      	beq.n	12738 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
   12732:	781b      	ldrb	r3, [r3, #0]
   12734:	600b      	str	r3, [r1, #0]
   12736:	e006      	b.n	12746 <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
   12738:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
   1273a:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
   1273c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   12740:	600b      	str	r3, [r1, #0]
   12742:	e000      	b.n	12746 <usb_get_descriptor+0x4e>
		return false;
   12744:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
   12746:	bcf0      	pop	{r4, r5, r6, r7}
   12748:	4770      	bx	lr
		return false;
   1274a:	2000      	movs	r0, #0
   1274c:	e7fb      	b.n	12746 <usb_get_descriptor+0x4e>
   1274e:	bf00      	nop
   12750:	2000233c 	.word	0x2000233c

00012754 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
   12754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12756:	4684      	mov	ip, r0
   12758:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
   1275a:	4b0c      	ldr	r3, [pc, #48]	; (1278c <usb_get_interface+0x38>)
   1275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
   1275e:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
   12760:	e000      	b.n	12764 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
   12762:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   12764:	781a      	ldrb	r2, [r3, #0]
   12766:	b172      	cbz	r2, 12786 <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
   12768:	785c      	ldrb	r4, [r3, #1]
   1276a:	2c04      	cmp	r4, #4
   1276c:	d1f9      	bne.n	12762 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   1276e:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
   12770:	b285      	uxth	r5, r0
   12772:	f8bc 4004 	ldrh.w	r4, [ip, #4]
   12776:	42a5      	cmp	r5, r4
   12778:	d1f3      	bne.n	12762 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
   1277a:	f7ff ff8f 	bl	1269c <usb_get_alt_setting>
   1277e:	7038      	strb	r0, [r7, #0]
				*len = 1;
   12780:	2001      	movs	r0, #1
   12782:	6030      	str	r0, [r6, #0]
				return true;
   12784:	e000      	b.n	12788 <usb_get_interface+0x34>
	}

	return false;
   12786:	2000      	movs	r0, #0
}
   12788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1278a:	bf00      	nop
   1278c:	2000233c 	.word	0x2000233c

00012790 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
   12790:	4b03      	ldr	r3, [pc, #12]	; (127a0 <is_device_configured+0x10>)
   12792:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
   12796:	3800      	subs	r0, #0
   12798:	bf18      	it	ne
   1279a:	2001      	movne	r0, #1
   1279c:	4770      	bx	lr
   1279e:	bf00      	nop
   127a0:	2000233c 	.word	0x2000233c

000127a4 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
   127a4:	4b07      	ldr	r3, [pc, #28]	; (127c4 <is_interface_valid+0x20>)
   127a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
   127a8:	e000      	b.n	127ac <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
   127aa:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
   127ac:	781a      	ldrb	r2, [r3, #0]
   127ae:	b13a      	cbz	r2, 127c0 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
   127b0:	7859      	ldrb	r1, [r3, #1]
   127b2:	2902      	cmp	r1, #2
   127b4:	d1f9      	bne.n	127aa <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
   127b6:	7919      	ldrb	r1, [r3, #4]
   127b8:	4281      	cmp	r1, r0
   127ba:	d9f6      	bls.n	127aa <is_interface_valid+0x6>
				return true;
   127bc:	2001      	movs	r0, #1
	}

	return false;
}
   127be:	4770      	bx	lr
	return false;
   127c0:	2000      	movs	r0, #0
   127c2:	4770      	bx	lr
   127c4:	2000233c 	.word	0x2000233c

000127c8 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
   127c8:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
   127ca:	4b16      	ldr	r3, [pc, #88]	; (12824 <is_ep_valid+0x5c>)
   127cc:	4a16      	ldr	r2, [pc, #88]	; (12828 <is_ep_valid+0x60>)
   127ce:	1a9b      	subs	r3, r3, r2
   127d0:	109b      	asrs	r3, r3, #2
   127d2:	4e16      	ldr	r6, [pc, #88]	; (1282c <is_ep_valid+0x64>)
   127d4:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
   127d8:	f030 0380 	bics.w	r3, r0, #128	; 0x80
   127dc:	d01d      	beq.n	1281a <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
   127de:	2400      	movs	r4, #0
   127e0:	42b4      	cmp	r4, r6
   127e2:	d218      	bcs.n	12816 <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
   127e4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   127e8:	4b0f      	ldr	r3, [pc, #60]	; (12828 <is_ep_valid+0x60>)
   127ea:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   127ee:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   127f0:	2300      	movs	r3, #0
   127f2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   127f6:	490c      	ldr	r1, [pc, #48]	; (12828 <is_ep_valid+0x60>)
   127f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   127fc:	7f12      	ldrb	r2, [r2, #28]
   127fe:	429a      	cmp	r2, r3
   12800:	d907      	bls.n	12812 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
   12802:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   12806:	7912      	ldrb	r2, [r2, #4]
   12808:	4282      	cmp	r2, r0
   1280a:	d008      	beq.n	1281e <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   1280c:	3301      	adds	r3, #1
   1280e:	b2db      	uxtb	r3, r3
   12810:	e7ef      	b.n	127f2 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
   12812:	3401      	adds	r4, #1
   12814:	e7e4      	b.n	127e0 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
   12816:	2000      	movs	r0, #0
   12818:	e002      	b.n	12820 <is_ep_valid+0x58>
		return true;
   1281a:	2001      	movs	r0, #1
   1281c:	e000      	b.n	12820 <is_ep_valid+0x58>
				return true;
   1281e:	2001      	movs	r0, #1
}
   12820:	bc70      	pop	{r4, r5, r6}
   12822:	4770      	bx	lr
   12824:	20000a74 	.word	0x20000a74
   12828:	20000a50 	.word	0x20000a50
   1282c:	38e38e39 	.word	0x38e38e39

00012830 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
   12830:	4b01      	ldr	r3, [pc, #4]	; (12838 <usb_register_custom_req_handler+0x8>)
   12832:	6198      	str	r0, [r3, #24]
}
   12834:	4770      	bx	lr
   12836:	bf00      	nop
   12838:	2000233c 	.word	0x2000233c

0001283c <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
   1283c:	4b01      	ldr	r3, [pc, #4]	; (12844 <usb_register_status_callback+0x8>)
   1283e:	61d8      	str	r0, [r3, #28]
}
   12840:	4770      	bx	lr
   12842:	bf00      	nop
   12844:	2000233c 	.word	0x2000233c

00012848 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
   12848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1284c:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
   1284e:	4b14      	ldr	r3, [pc, #80]	; (128a0 <foreach_ep+0x58>)
   12850:	4a14      	ldr	r2, [pc, #80]	; (128a4 <foreach_ep+0x5c>)
   12852:	eba3 0802 	sub.w	r8, r3, r2
   12856:	ea4f 03a8 	mov.w	r3, r8, asr #2
   1285a:	4a13      	ldr	r2, [pc, #76]	; (128a8 <foreach_ep+0x60>)
   1285c:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
   12860:	2500      	movs	r5, #0
   12862:	4545      	cmp	r5, r8
   12864:	d218      	bcs.n	12898 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   12866:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1286a:	4a0e      	ldr	r2, [pc, #56]	; (128a4 <foreach_ep+0x5c>)
   1286c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12870:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   12872:	2400      	movs	r4, #0
   12874:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   12878:	4a0a      	ldr	r2, [pc, #40]	; (128a4 <foreach_ep+0x5c>)
   1287a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1287e:	7f1b      	ldrb	r3, [r3, #28]
   12880:	42a3      	cmp	r3, r4
   12882:	d907      	bls.n	12894 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
   12884:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
   12888:	47b0      	blx	r6
			if (ret < 0) {
   1288a:	2800      	cmp	r0, #0
   1288c:	db05      	blt.n	1289a <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
   1288e:	3401      	adds	r4, #1
   12890:	b2e4      	uxtb	r4, r4
   12892:	e7ef      	b.n	12874 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
   12894:	3501      	adds	r5, #1
   12896:	e7e4      	b.n	12862 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
   12898:	2000      	movs	r0, #0
}
   1289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1289e:	bf00      	nop
   128a0:	20000a74 	.word	0x20000a74
   128a4:	20000a50 	.word	0x20000a50
   128a8:	38e38e39 	.word	0x38e38e39

000128ac <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
   128ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
   128ae:	4f13      	ldr	r7, [pc, #76]	; (128fc <class_handler+0x50>)
   128b0:	4b13      	ldr	r3, [pc, #76]	; (12900 <class_handler+0x54>)
   128b2:	1aff      	subs	r7, r7, r3
   128b4:	10bb      	asrs	r3, r7, #2
   128b6:	4f13      	ldr	r7, [pc, #76]	; (12904 <class_handler+0x58>)
   128b8:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
   128bc:	2300      	movs	r3, #0
   128be:	e000      	b.n	128c2 <class_handler+0x16>
   128c0:	3301      	adds	r3, #1
   128c2:	42bb      	cmp	r3, r7
   128c4:	d216      	bcs.n	128f4 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
   128c6:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   128ca:	4d0d      	ldr	r5, [pc, #52]	; (12900 <class_handler+0x54>)
   128cc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   128d0:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   128d2:	4c0d      	ldr	r4, [pc, #52]	; (12908 <class_handler+0x5c>)
   128d4:	6a64      	ldr	r4, [r4, #36]	; 0x24
   128d6:	42a6      	cmp	r6, r4
   128d8:	d3f2      	bcc.n	128c0 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
   128da:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   128de:	eb05 0484 	add.w	r4, r5, r4, lsl #2
   128e2:	6924      	ldr	r4, [r4, #16]
   128e4:	2c00      	cmp	r4, #0
   128e6:	d0eb      	beq.n	128c0 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   128e8:	78b6      	ldrb	r6, [r6, #2]
   128ea:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
   128ec:	42ae      	cmp	r6, r5
   128ee:	d1e7      	bne.n	128c0 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
   128f0:	47a0      	blx	r4
   128f2:	e001      	b.n	128f8 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
   128f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   128f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   128fa:	bf00      	nop
   128fc:	20000a74 	.word	0x20000a74
   12900:	20000a50 	.word	0x20000a50
   12904:	38e38e39 	.word	0x38e38e39
   12908:	2000233c 	.word	0x2000233c

0001290c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   1290c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12910:	4607      	mov	r7, r0
   12912:	4688      	mov	r8, r1
   12914:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
   12916:	4e19      	ldr	r6, [pc, #100]	; (1297c <custom_handler+0x70>)
   12918:	4b19      	ldr	r3, [pc, #100]	; (12980 <custom_handler+0x74>)
   1291a:	1af6      	subs	r6, r6, r3
   1291c:	10b3      	asrs	r3, r6, #2
   1291e:	4e19      	ldr	r6, [pc, #100]	; (12984 <custom_handler+0x78>)
   12920:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
   12924:	2400      	movs	r4, #0
   12926:	e005      	b.n	12934 <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
   12928:	464a      	mov	r2, r9
   1292a:	4641      	mov	r1, r8
   1292c:	4638      	mov	r0, r7
   1292e:	47a8      	blx	r5
   12930:	e021      	b.n	12976 <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
   12932:	3401      	adds	r4, #1
   12934:	42a6      	cmp	r6, r4
   12936:	d91c      	bls.n	12972 <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
   12938:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1293c:	4d10      	ldr	r5, [pc, #64]	; (12980 <custom_handler+0x74>)
   1293e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12942:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
   12944:	4a10      	ldr	r2, [pc, #64]	; (12988 <custom_handler+0x7c>)
   12946:	6a52      	ldr	r2, [r2, #36]	; 0x24
   12948:	4293      	cmp	r3, r2
   1294a:	d3f2      	bcc.n	12932 <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
   1294c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   12950:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   12954:	6995      	ldr	r5, [r2, #24]
   12956:	2d00      	cmp	r5, #0
   12958:	d0eb      	beq.n	12932 <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
   1295a:	7899      	ldrb	r1, [r3, #2]
   1295c:	793a      	ldrb	r2, [r7, #4]
   1295e:	4291      	cmp	r1, r2
   12960:	d0e2      	beq.n	12928 <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
   12962:	795b      	ldrb	r3, [r3, #5]
   12964:	2b01      	cmp	r3, #1
   12966:	d1e4      	bne.n	12932 <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
   12968:	464a      	mov	r2, r9
   1296a:	4641      	mov	r1, r8
   1296c:	4638      	mov	r0, r7
   1296e:	47a8      	blx	r5
   12970:	e7df      	b.n	12932 <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
   12972:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   12976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1297a:	bf00      	nop
   1297c:	20000a74 	.word	0x20000a74
   12980:	20000a50 	.word	0x20000a50
   12984:	38e38e39 	.word	0x38e38e39
   12988:	2000233c 	.word	0x2000233c

0001298c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
   1298c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12990:	4681      	mov	r9, r0
   12992:	4688      	mov	r8, r1
   12994:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
   12996:	4e10      	ldr	r6, [pc, #64]	; (129d8 <vendor_handler+0x4c>)
   12998:	4b10      	ldr	r3, [pc, #64]	; (129dc <vendor_handler+0x50>)
   1299a:	1af6      	subs	r6, r6, r3
   1299c:	10b3      	asrs	r3, r6, #2
   1299e:	4e10      	ldr	r6, [pc, #64]	; (129e0 <vendor_handler+0x54>)
   129a0:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
   129a4:	2400      	movs	r4, #0
   129a6:	e000      	b.n	129aa <vendor_handler+0x1e>
   129a8:	3401      	adds	r4, #1
   129aa:	42a6      	cmp	r6, r4
   129ac:	d90f      	bls.n	129ce <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
   129ae:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   129b2:	4d0a      	ldr	r5, [pc, #40]	; (129dc <vendor_handler+0x50>)
   129b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   129b8:	695b      	ldr	r3, [r3, #20]
   129ba:	2b00      	cmp	r3, #0
   129bc:	d0f4      	beq.n	129a8 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
   129be:	463a      	mov	r2, r7
   129c0:	4641      	mov	r1, r8
   129c2:	4648      	mov	r0, r9
   129c4:	4798      	blx	r3
   129c6:	4603      	mov	r3, r0
   129c8:	2800      	cmp	r0, #0
   129ca:	d1ed      	bne.n	129a8 <vendor_handler+0x1c>
   129cc:	e001      	b.n	129d2 <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
   129ce:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   129d2:	4618      	mov	r0, r3
   129d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   129d8:	20000a74 	.word	0x20000a74
   129dc:	20000a50 	.word	0x20000a50
   129e0:	38e38e39 	.word	0x38e38e39

000129e4 <usb_halt_endpoint_req>:
{
   129e4:	b570      	push	{r4, r5, r6, lr}
   129e6:	b082      	sub	sp, #8
   129e8:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
   129ea:	7904      	ldrb	r4, [r0, #4]
   129ec:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
   129f0:	4620      	mov	r0, r4
   129f2:	f7ff fee9 	bl	127c8 <is_ep_valid>
   129f6:	4606      	mov	r6, r0
   129f8:	b130      	cbz	r0, 12a08 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   129fa:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   129fe:	d006      	beq.n	12a0e <usb_halt_endpoint_req+0x2a>
   12a00:	f7ff fec6 	bl	12790 <is_device_configured>
   12a04:	b918      	cbnz	r0, 12a0e <usb_halt_endpoint_req+0x2a>
	return false;
   12a06:	4606      	mov	r6, r0
}
   12a08:	4630      	mov	r0, r6
   12a0a:	b002      	add	sp, #8
   12a0c:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
   12a0e:	b1ed      	cbz	r5, 12a4c <usb_halt_endpoint_req+0x68>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12a10:	4b1d      	ldr	r3, [pc, #116]	; (12a88 <usb_halt_endpoint_req+0xa4>)
   12a12:	4a1e      	ldr	r2, [pc, #120]	; (12a8c <usb_halt_endpoint_req+0xa8>)
   12a14:	1a9b      	subs	r3, r3, r2
   12a16:	08db      	lsrs	r3, r3, #3
			LOG_INF("Set halt ep 0x%02x", ep);
   12a18:	f04f 0200 	mov.w	r2, #0
   12a1c:	2103      	movs	r1, #3
   12a1e:	f361 0202 	bfi	r2, r1, #0, #3
   12a22:	f36f 02c5 	bfc	r2, #3, #3
   12a26:	f363 128f 	bfi	r2, r3, #6, #10
   12a2a:	4621      	mov	r1, r4
   12a2c:	4818      	ldr	r0, [pc, #96]	; (12a90 <usb_halt_endpoint_req+0xac>)
   12a2e:	f7ff fa47 	bl	11ec0 <log_1>
			usb_dc_ep_set_stall(ep);
   12a32:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12a36:	f00a fa59 	bl	1ceec <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
   12a3a:	4b16      	ldr	r3, [pc, #88]	; (12a94 <usb_halt_endpoint_req+0xb0>)
   12a3c:	69db      	ldr	r3, [r3, #28]
   12a3e:	2b00      	cmp	r3, #0
   12a40:	d0e2      	beq.n	12a08 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
   12a42:	f10d 0107 	add.w	r1, sp, #7
   12a46:	2008      	movs	r0, #8
   12a48:	4798      	blx	r3
   12a4a:	e7dd      	b.n	12a08 <usb_halt_endpoint_req+0x24>
   12a4c:	4b0e      	ldr	r3, [pc, #56]	; (12a88 <usb_halt_endpoint_req+0xa4>)
   12a4e:	4a0f      	ldr	r2, [pc, #60]	; (12a8c <usb_halt_endpoint_req+0xa8>)
   12a50:	1a9b      	subs	r3, r3, r2
   12a52:	08db      	lsrs	r3, r3, #3
			LOG_INF("Clear halt ep 0x%02x", ep);
   12a54:	f04f 0200 	mov.w	r2, #0
   12a58:	2103      	movs	r1, #3
   12a5a:	f361 0202 	bfi	r2, r1, #0, #3
   12a5e:	f36f 02c5 	bfc	r2, #3, #3
   12a62:	f363 128f 	bfi	r2, r3, #6, #10
   12a66:	4621      	mov	r1, r4
   12a68:	480b      	ldr	r0, [pc, #44]	; (12a98 <usb_halt_endpoint_req+0xb4>)
   12a6a:	f7ff fa29 	bl	11ec0 <log_1>
			usb_dc_ep_clear_stall(ep);
   12a6e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12a72:	f00a fa81 	bl	1cf78 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
   12a76:	4b07      	ldr	r3, [pc, #28]	; (12a94 <usb_halt_endpoint_req+0xb0>)
   12a78:	69db      	ldr	r3, [r3, #28]
   12a7a:	2b00      	cmp	r3, #0
   12a7c:	d0c4      	beq.n	12a08 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
   12a7e:	f10d 0107 	add.w	r1, sp, #7
   12a82:	2009      	movs	r0, #9
   12a84:	4798      	blx	r3
		return true;
   12a86:	e7bf      	b.n	12a08 <usb_halt_endpoint_req+0x24>
   12a88:	0002c6e0 	.word	0x0002c6e0
   12a8c:	0002c610 	.word	0x0002c610
   12a90:	0002cbf8 	.word	0x0002cbf8
   12a94:	2000233c 	.word	0x2000233c
   12a98:	0002cc0c 	.word	0x0002cc0c

00012a9c <set_endpoint>:
{
   12a9c:	b500      	push	{lr}
   12a9e:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   12aa0:	7883      	ldrb	r3, [r0, #2]
   12aa2:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
   12aa6:	8883      	ldrh	r3, [r0, #4]
   12aa8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
   12aac:	78c3      	ldrb	r3, [r0, #3]
   12aae:	f003 0303 	and.w	r3, r3, #3
   12ab2:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
   12ab6:	4668      	mov	r0, sp
   12ab8:	f00a f9da 	bl	1ce70 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
   12abc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   12ac0:	d010      	beq.n	12ae4 <set_endpoint+0x48>
	} else if (ret) {
   12ac2:	bb10      	cbnz	r0, 12b0a <set_endpoint+0x6e>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
   12ac4:	f89d 0000 	ldrb.w	r0, [sp]
   12ac8:	f00a faa0 	bl	1d00c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
   12acc:	f110 0f78 	cmn.w	r0, #120	; 0x78
   12ad0:	d02f      	beq.n	12b32 <set_endpoint+0x96>
	} else if (ret) {
   12ad2:	2800      	cmp	r0, #0
   12ad4:	d140      	bne.n	12b58 <set_endpoint+0xbc>
	usb_dev.configured = true;
   12ad6:	2001      	movs	r0, #1
   12ad8:	4b29      	ldr	r3, [pc, #164]	; (12b80 <set_endpoint+0xe4>)
   12ada:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
   12ade:	b003      	add	sp, #12
   12ae0:	f85d fb04 	ldr.w	pc, [sp], #4
   12ae4:	4b27      	ldr	r3, [pc, #156]	; (12b84 <set_endpoint+0xe8>)
   12ae6:	4a28      	ldr	r2, [pc, #160]	; (12b88 <set_endpoint+0xec>)
   12ae8:	1a9b      	subs	r3, r3, r2
   12aea:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Endpoint 0x%02x already configured", ep_cfg.ep_addr);
   12aec:	f04f 0200 	mov.w	r2, #0
   12af0:	2102      	movs	r1, #2
   12af2:	f361 0202 	bfi	r2, r1, #0, #3
   12af6:	f36f 02c5 	bfc	r2, #3, #3
   12afa:	f363 128f 	bfi	r2, r3, #6, #10
   12afe:	f89d 1000 	ldrb.w	r1, [sp]
   12b02:	4822      	ldr	r0, [pc, #136]	; (12b8c <set_endpoint+0xf0>)
   12b04:	f7ff f9dc 	bl	11ec0 <log_1>
   12b08:	e7dc      	b.n	12ac4 <set_endpoint+0x28>
   12b0a:	4b1e      	ldr	r3, [pc, #120]	; (12b84 <set_endpoint+0xe8>)
   12b0c:	4a1e      	ldr	r2, [pc, #120]	; (12b88 <set_endpoint+0xec>)
   12b0e:	1a9b      	subs	r3, r3, r2
   12b10:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
   12b12:	f04f 0200 	mov.w	r2, #0
   12b16:	2101      	movs	r1, #1
   12b18:	f361 0202 	bfi	r2, r1, #0, #3
   12b1c:	f36f 02c5 	bfc	r2, #3, #3
   12b20:	f363 128f 	bfi	r2, r3, #6, #10
   12b24:	f89d 1000 	ldrb.w	r1, [sp]
   12b28:	4819      	ldr	r0, [pc, #100]	; (12b90 <set_endpoint+0xf4>)
   12b2a:	f7ff f9c9 	bl	11ec0 <log_1>
		return false;
   12b2e:	2000      	movs	r0, #0
   12b30:	e7d5      	b.n	12ade <set_endpoint+0x42>
   12b32:	4b14      	ldr	r3, [pc, #80]	; (12b84 <set_endpoint+0xe8>)
   12b34:	4a14      	ldr	r2, [pc, #80]	; (12b88 <set_endpoint+0xec>)
   12b36:	1a9b      	subs	r3, r3, r2
   12b38:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Endpoint 0x%02x already enabled", ep_cfg.ep_addr);
   12b3a:	f04f 0200 	mov.w	r2, #0
   12b3e:	2102      	movs	r1, #2
   12b40:	f361 0202 	bfi	r2, r1, #0, #3
   12b44:	f36f 02c5 	bfc	r2, #3, #3
   12b48:	f363 128f 	bfi	r2, r3, #6, #10
   12b4c:	f89d 1000 	ldrb.w	r1, [sp]
   12b50:	4810      	ldr	r0, [pc, #64]	; (12b94 <set_endpoint+0xf8>)
   12b52:	f7ff f9b5 	bl	11ec0 <log_1>
   12b56:	e7be      	b.n	12ad6 <set_endpoint+0x3a>
   12b58:	4b0a      	ldr	r3, [pc, #40]	; (12b84 <set_endpoint+0xe8>)
   12b5a:	4a0b      	ldr	r2, [pc, #44]	; (12b88 <set_endpoint+0xec>)
   12b5c:	1a9b      	subs	r3, r3, r2
   12b5e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
   12b60:	f04f 0200 	mov.w	r2, #0
   12b64:	2101      	movs	r1, #1
   12b66:	f361 0202 	bfi	r2, r1, #0, #3
   12b6a:	f36f 02c5 	bfc	r2, #3, #3
   12b6e:	f363 128f 	bfi	r2, r3, #6, #10
   12b72:	f89d 1000 	ldrb.w	r1, [sp]
   12b76:	4808      	ldr	r0, [pc, #32]	; (12b98 <set_endpoint+0xfc>)
   12b78:	f7ff f9a2 	bl	11ec0 <log_1>
		return false;
   12b7c:	2000      	movs	r0, #0
   12b7e:	e7ae      	b.n	12ade <set_endpoint+0x42>
   12b80:	2000233c 	.word	0x2000233c
   12b84:	0002c6e0 	.word	0x0002c6e0
   12b88:	0002c610 	.word	0x0002c610
   12b8c:	0002cc24 	.word	0x0002cc24
   12b90:	0002cc48 	.word	0x0002cc48
   12b94:	0002cc6c 	.word	0x0002cc6c
   12b98:	0002cc8c 	.word	0x0002cc8c

00012b9c <usb_reset_alt_setting>:
{
   12b9c:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
   12b9e:	2208      	movs	r2, #8
   12ba0:	2100      	movs	r1, #0
   12ba2:	4802      	ldr	r0, [pc, #8]	; (12bac <usb_reset_alt_setting+0x10>)
   12ba4:	f015 f878 	bl	27c98 <memset>
}
   12ba8:	bd08      	pop	{r3, pc}
   12baa:	bf00      	nop
   12bac:	200023f7 	.word	0x200023f7

00012bb0 <usb_set_configuration>:
{
   12bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12bb4:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
   12bb6:	4b23      	ldr	r3, [pc, #140]	; (12c44 <usb_set_configuration+0x94>)
   12bb8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
   12bba:	8843      	ldrh	r3, [r0, #2]
   12bbc:	b11b      	cbz	r3, 12bc6 <usb_set_configuration+0x16>
	bool found = false;
   12bbe:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
   12bc0:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   12bc2:	46b0      	mov	r8, r6
   12bc4:	e010      	b.n	12be8 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
   12bc6:	f7ff ffe9 	bl	12b9c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   12bca:	886a      	ldrh	r2, [r5, #2]
   12bcc:	4b1d      	ldr	r3, [pc, #116]	; (12c44 <usb_set_configuration+0x94>)
   12bce:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   12bd2:	69db      	ldr	r3, [r3, #28]
   12bd4:	b113      	cbz	r3, 12bdc <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   12bd6:	491c      	ldr	r1, [pc, #112]	; (12c48 <usb_set_configuration+0x98>)
   12bd8:	2003      	movs	r0, #3
   12bda:	4798      	blx	r3
		return true;
   12bdc:	2701      	movs	r7, #1
   12bde:	e020      	b.n	12c22 <usb_set_configuration+0x72>
			cur_alt_setting =
   12be0:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
   12be4:	7823      	ldrb	r3, [r4, #0]
   12be6:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   12be8:	7823      	ldrb	r3, [r4, #0]
   12bea:	b1cb      	cbz	r3, 12c20 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
   12bec:	7863      	ldrb	r3, [r4, #1]
   12bee:	2b04      	cmp	r3, #4
   12bf0:	d0f6      	beq.n	12be0 <usb_set_configuration+0x30>
   12bf2:	2b05      	cmp	r3, #5
   12bf4:	d008      	beq.n	12c08 <usb_set_configuration+0x58>
   12bf6:	2b02      	cmp	r3, #2
   12bf8:	d1f4      	bne.n	12be4 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
   12bfa:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
   12bfc:	b2b2      	uxth	r2, r6
   12bfe:	886b      	ldrh	r3, [r5, #2]
   12c00:	429a      	cmp	r2, r3
   12c02:	d1ef      	bne.n	12be4 <usb_set_configuration+0x34>
				found = true;
   12c04:	2701      	movs	r7, #1
   12c06:	e7ed      	b.n	12be4 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
   12c08:	b2b3      	uxth	r3, r6
   12c0a:	886a      	ldrh	r2, [r5, #2]
   12c0c:	4293      	cmp	r3, r2
   12c0e:	d1e9      	bne.n	12be4 <usb_set_configuration+0x34>
   12c10:	f1b8 0f00 	cmp.w	r8, #0
   12c14:	d1e6      	bne.n	12be4 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
   12c16:	4620      	mov	r0, r4
   12c18:	f7ff ff40 	bl	12a9c <set_endpoint>
   12c1c:	4607      	mov	r7, r0
			break;
   12c1e:	e7e1      	b.n	12be4 <usb_set_configuration+0x34>
	if (found) {
   12c20:	b917      	cbnz	r7, 12c28 <usb_set_configuration+0x78>
}
   12c22:	4638      	mov	r0, r7
   12c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
   12c28:	f7ff ffb8 	bl	12b9c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
   12c2c:	886a      	ldrh	r2, [r5, #2]
   12c2e:	4b05      	ldr	r3, [pc, #20]	; (12c44 <usb_set_configuration+0x94>)
   12c30:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
   12c34:	69db      	ldr	r3, [r3, #28]
   12c36:	2b00      	cmp	r3, #0
   12c38:	d0f3      	beq.n	12c22 <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
   12c3a:	4903      	ldr	r1, [pc, #12]	; (12c48 <usb_set_configuration+0x98>)
   12c3c:	2003      	movs	r0, #3
   12c3e:	4798      	blx	r3
   12c40:	e7ef      	b.n	12c22 <usb_set_configuration+0x72>
   12c42:	bf00      	nop
   12c44:	2000233c 	.word	0x2000233c
   12c48:	200023f6 	.word	0x200023f6

00012c4c <usb_handle_std_device_req>:
{
   12c4c:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
   12c4e:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
   12c50:	f990 3000 	ldrsb.w	r3, [r0]
   12c54:	2b00      	cmp	r3, #0
   12c56:	db06      	blt.n	12c66 <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
   12c58:	7843      	ldrb	r3, [r0, #1]
   12c5a:	2b05      	cmp	r3, #5
   12c5c:	d018      	beq.n	12c90 <usb_handle_std_device_req+0x44>
   12c5e:	2b09      	cmp	r3, #9
   12c60:	d01d      	beq.n	12c9e <usb_handle_std_device_req+0x52>
   12c62:	2000      	movs	r0, #0
}
   12c64:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
   12c66:	7843      	ldrb	r3, [r0, #1]
   12c68:	2b06      	cmp	r3, #6
   12c6a:	d007      	beq.n	12c7c <usb_handle_std_device_req+0x30>
   12c6c:	2b08      	cmp	r3, #8
   12c6e:	d008      	beq.n	12c82 <usb_handle_std_device_req+0x36>
   12c70:	b10b      	cbz	r3, 12c76 <usb_handle_std_device_req+0x2a>
   12c72:	2000      	movs	r0, #0
   12c74:	e7f6      	b.n	12c64 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
   12c76:	f014 fa7d 	bl	27174 <usb_get_status>
   12c7a:	e7f3      	b.n	12c64 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
   12c7c:	f7ff fd3c 	bl	126f8 <usb_get_descriptor>
   12c80:	e7f0      	b.n	12c64 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
   12c82:	4b08      	ldr	r3, [pc, #32]	; (12ca4 <usb_handle_std_device_req+0x58>)
   12c84:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   12c88:	7023      	strb	r3, [r4, #0]
			*len = 1;
   12c8a:	2001      	movs	r0, #1
   12c8c:	6008      	str	r0, [r1, #0]
			return true;
   12c8e:	e7e9      	b.n	12c64 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
   12c90:	7880      	ldrb	r0, [r0, #2]
   12c92:	f00a f885 	bl	1cda0 <usb_dc_set_address>
   12c96:	fab0 f080 	clz	r0, r0
   12c9a:	0940      	lsrs	r0, r0, #5
   12c9c:	e7e2      	b.n	12c64 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
   12c9e:	f7ff ff87 	bl	12bb0 <usb_set_configuration>
   12ca2:	e7df      	b.n	12c64 <usb_handle_std_device_req+0x18>
   12ca4:	2000233c 	.word	0x2000233c

00012ca8 <reset_endpoint>:
{
   12ca8:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
   12caa:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
   12cac:	4620      	mov	r0, r4
   12cae:	f000 fe1d 	bl	138ec <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
   12cb2:	4620      	mov	r0, r4
   12cb4:	f00a f9d8 	bl	1d068 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
   12cb8:	f110 0f78 	cmn.w	r0, #120	; 0x78
   12cbc:	d002      	beq.n	12cc4 <reset_endpoint+0x1c>
	} else if (ret) {
   12cbe:	b9a0      	cbnz	r0, 12cea <reset_endpoint+0x42>
	return true;
   12cc0:	2001      	movs	r0, #1
}
   12cc2:	bd10      	pop	{r4, pc}
   12cc4:	4b12      	ldr	r3, [pc, #72]	; (12d10 <reset_endpoint+0x68>)
   12cc6:	4a13      	ldr	r2, [pc, #76]	; (12d14 <reset_endpoint+0x6c>)
   12cc8:	1a9b      	subs	r3, r3, r2
   12cca:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Endpoint 0x%02x already disabled", ep_cfg.ep_addr);
   12ccc:	f04f 0200 	mov.w	r2, #0
   12cd0:	2102      	movs	r1, #2
   12cd2:	f361 0202 	bfi	r2, r1, #0, #3
   12cd6:	f36f 02c5 	bfc	r2, #3, #3
   12cda:	f363 128f 	bfi	r2, r3, #6, #10
   12cde:	4621      	mov	r1, r4
   12ce0:	480d      	ldr	r0, [pc, #52]	; (12d18 <reset_endpoint+0x70>)
   12ce2:	f7ff f8ed 	bl	11ec0 <log_1>
	return true;
   12ce6:	2001      	movs	r0, #1
   12ce8:	e7eb      	b.n	12cc2 <reset_endpoint+0x1a>
   12cea:	4b09      	ldr	r3, [pc, #36]	; (12d10 <reset_endpoint+0x68>)
   12cec:	4a09      	ldr	r2, [pc, #36]	; (12d14 <reset_endpoint+0x6c>)
   12cee:	1a9b      	subs	r3, r3, r2
   12cf0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
   12cf2:	f04f 0200 	mov.w	r2, #0
   12cf6:	2101      	movs	r1, #1
   12cf8:	f361 0202 	bfi	r2, r1, #0, #3
   12cfc:	f36f 02c5 	bfc	r2, #3, #3
   12d00:	f363 128f 	bfi	r2, r3, #6, #10
   12d04:	4621      	mov	r1, r4
   12d06:	4805      	ldr	r0, [pc, #20]	; (12d1c <reset_endpoint+0x74>)
   12d08:	f7ff f8da 	bl	11ec0 <log_1>
		return false;
   12d0c:	2000      	movs	r0, #0
   12d0e:	e7d8      	b.n	12cc2 <reset_endpoint+0x1a>
   12d10:	0002c6e0 	.word	0x0002c6e0
   12d14:	0002c610 	.word	0x0002c610
   12d18:	0002ccb0 	.word	0x0002ccb0
   12d1c:	0002ccd4 	.word	0x0002ccd4

00012d20 <usb_set_interface>:
{
   12d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d24:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
   12d26:	4b1b      	ldr	r3, [pc, #108]	; (12d94 <usb_set_interface+0x74>)
   12d28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
   12d2a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
   12d2c:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
   12d2e:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
   12d30:	46b9      	mov	r9, r7
   12d32:	e008      	b.n	12d46 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
   12d34:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
   12d38:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
   12d3a:	b2ab      	uxth	r3, r5
   12d3c:	88b0      	ldrh	r0, [r6, #4]
   12d3e:	4283      	cmp	r3, r0
   12d40:	d013      	beq.n	12d6a <usb_set_interface+0x4a>
		p += p[DESC_bLength];
   12d42:	7823      	ldrb	r3, [r4, #0]
   12d44:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
   12d46:	7823      	ldrb	r3, [r4, #0]
   12d48:	b1db      	cbz	r3, 12d82 <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
   12d4a:	7863      	ldrb	r3, [r4, #1]
   12d4c:	2b04      	cmp	r3, #4
   12d4e:	d0f1      	beq.n	12d34 <usb_set_interface+0x14>
   12d50:	2b05      	cmp	r3, #5
   12d52:	d1f6      	bne.n	12d42 <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
   12d54:	b2ab      	uxth	r3, r5
   12d56:	88b2      	ldrh	r2, [r6, #4]
   12d58:	4293      	cmp	r3, r2
   12d5a:	d1f2      	bne.n	12d42 <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
   12d5c:	78b2      	ldrb	r2, [r6, #2]
   12d5e:	4641      	mov	r1, r8
   12d60:	4620      	mov	r0, r4
   12d62:	f014 fa11 	bl	27188 <usb_eps_reconfigure>
   12d66:	4607      	mov	r7, r0
   12d68:	e7eb      	b.n	12d42 <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
   12d6a:	fa1f f388 	uxth.w	r3, r8
   12d6e:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
   12d70:	428b      	cmp	r3, r1
   12d72:	d1e6      	bne.n	12d42 <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
   12d74:	b2c9      	uxtb	r1, r1
   12d76:	b2c0      	uxtb	r0, r0
   12d78:	f7ff fc84 	bl	12684 <usb_set_alt_setting>
   12d7c:	4607      	mov	r7, r0
				if_desc = (void *)p;
   12d7e:	46a1      	mov	r9, r4
   12d80:	e7df      	b.n	12d42 <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
   12d82:	4b04      	ldr	r3, [pc, #16]	; (12d94 <usb_set_interface+0x74>)
   12d84:	69db      	ldr	r3, [r3, #28]
   12d86:	b113      	cbz	r3, 12d8e <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
   12d88:	4649      	mov	r1, r9
   12d8a:	2007      	movs	r0, #7
   12d8c:	4798      	blx	r3
}
   12d8e:	4638      	mov	r0, r7
   12d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d94:	2000233c 	.word	0x2000233c

00012d98 <usb_handle_standard_request>:
{
   12d98:	b570      	push	{r4, r5, r6, lr}
   12d9a:	4604      	mov	r4, r0
   12d9c:	460d      	mov	r5, r1
   12d9e:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
   12da0:	4b18      	ldr	r3, [pc, #96]	; (12e04 <usb_handle_standard_request+0x6c>)
   12da2:	699b      	ldr	r3, [r3, #24]
   12da4:	b10b      	cbz	r3, 12daa <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
   12da6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
   12da8:	b148      	cbz	r0, 12dbe <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
   12daa:	7823      	ldrb	r3, [r4, #0]
   12dac:	f003 031f 	and.w	r3, r3, #31
   12db0:	2b01      	cmp	r3, #1
   12db2:	d00d      	beq.n	12dd0 <usb_handle_standard_request+0x38>
   12db4:	2b02      	cmp	r3, #2
   12db6:	d013      	beq.n	12de0 <usb_handle_standard_request+0x48>
   12db8:	b113      	cbz	r3, 12dc0 <usb_handle_standard_request+0x28>
   12dba:	f06f 0015 	mvn.w	r0, #21
}
   12dbe:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
   12dc0:	4632      	mov	r2, r6
   12dc2:	4629      	mov	r1, r5
   12dc4:	4620      	mov	r0, r4
   12dc6:	f7ff ff41 	bl	12c4c <usb_handle_std_device_req>
   12dca:	b188      	cbz	r0, 12df0 <usb_handle_standard_request+0x58>
	int rc = 0;
   12dcc:	2000      	movs	r0, #0
   12dce:	e7f6      	b.n	12dbe <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
   12dd0:	4632      	mov	r2, r6
   12dd2:	4629      	mov	r1, r5
   12dd4:	4620      	mov	r0, r4
   12dd6:	f014 f9e0 	bl	2719a <usb_handle_std_interface_req>
   12dda:	b160      	cbz	r0, 12df6 <usb_handle_standard_request+0x5e>
	int rc = 0;
   12ddc:	2000      	movs	r0, #0
   12dde:	e7ee      	b.n	12dbe <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
   12de0:	4632      	mov	r2, r6
   12de2:	4629      	mov	r1, r5
   12de4:	4620      	mov	r0, r4
   12de6:	f014 fa25 	bl	27234 <usb_handle_std_endpoint_req>
   12dea:	b138      	cbz	r0, 12dfc <usb_handle_standard_request+0x64>
	int rc = 0;
   12dec:	2000      	movs	r0, #0
   12dee:	e7e6      	b.n	12dbe <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   12df0:	f06f 0015 	mvn.w	r0, #21
   12df4:	e7e3      	b.n	12dbe <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   12df6:	f06f 0015 	mvn.w	r0, #21
   12dfa:	e7e0      	b.n	12dbe <usb_handle_standard_request+0x26>
			rc = -EINVAL;
   12dfc:	f06f 0015 	mvn.w	r0, #21
   12e00:	e7dd      	b.n	12dbe <usb_handle_standard_request+0x26>
   12e02:	bf00      	nop
   12e04:	2000233c 	.word	0x2000233c

00012e08 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
   12e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
   12e0a:	4f15      	ldr	r7, [pc, #84]	; (12e60 <composite_setup_ep_cb+0x58>)
   12e0c:	4b15      	ldr	r3, [pc, #84]	; (12e64 <composite_setup_ep_cb+0x5c>)
   12e0e:	1aff      	subs	r7, r7, r3
   12e10:	10bb      	asrs	r3, r7, #2
   12e12:	4f15      	ldr	r7, [pc, #84]	; (12e68 <composite_setup_ep_cb+0x60>)
   12e14:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
   12e18:	2500      	movs	r5, #0
   12e1a:	42af      	cmp	r7, r5
   12e1c:	d91b      	bls.n	12e56 <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
   12e1e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   12e22:	4a10      	ldr	r2, [pc, #64]	; (12e64 <composite_setup_ep_cb+0x5c>)
   12e24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12e28:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
   12e2a:	2400      	movs	r4, #0
   12e2c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   12e30:	4a0c      	ldr	r2, [pc, #48]	; (12e64 <composite_setup_ep_cb+0x5c>)
   12e32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12e36:	7f1b      	ldrb	r3, [r3, #28]
   12e38:	429c      	cmp	r4, r3
   12e3a:	d20a      	bcs.n	12e52 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
   12e3c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
   12e40:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
   12e44:	7918      	ldrb	r0, [r3, #4]
   12e46:	f00a fb2b 	bl	1d4a0 <usb_dc_ep_set_callback>
   12e4a:	b930      	cbnz	r0, 12e5a <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
   12e4c:	3401      	adds	r4, #1
   12e4e:	b2e4      	uxtb	r4, r4
   12e50:	e7ec      	b.n	12e2c <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
   12e52:	3501      	adds	r5, #1
   12e54:	e7e1      	b.n	12e1a <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
   12e56:	2000      	movs	r0, #0
   12e58:	e001      	b.n	12e5e <composite_setup_ep_cb+0x56>
				return -1;
   12e5a:	f04f 30ff 	mov.w	r0, #4294967295
}
   12e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e60:	20000a74 	.word	0x20000a74
   12e64:	20000a50 	.word	0x20000a50
   12e68:	38e38e39 	.word	0x38e38e39

00012e6c <forward_status_cb>:
{
   12e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e6e:	4606      	mov	r6, r0
   12e70:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
   12e72:	4d1c      	ldr	r5, [pc, #112]	; (12ee4 <forward_status_cb+0x78>)
   12e74:	4b1c      	ldr	r3, [pc, #112]	; (12ee8 <forward_status_cb+0x7c>)
   12e76:	1aed      	subs	r5, r5, r3
   12e78:	10ab      	asrs	r3, r5, #2
   12e7a:	4d1c      	ldr	r5, [pc, #112]	; (12eec <forward_status_cb+0x80>)
   12e7c:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
   12e80:	2804      	cmp	r0, #4
   12e82:	d005      	beq.n	12e90 <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
   12e84:	1f33      	subs	r3, r6, #4
   12e86:	b2db      	uxtb	r3, r3
   12e88:	2b01      	cmp	r3, #1
   12e8a:	d904      	bls.n	12e96 <forward_status_cb+0x2a>
{
   12e8c:	2400      	movs	r4, #0
   12e8e:	e014      	b.n	12eba <forward_status_cb+0x4e>
		usb_reset_alt_setting();
   12e90:	f7ff fe84 	bl	12b9c <usb_reset_alt_setting>
   12e94:	e7f6      	b.n	12e84 <forward_status_cb+0x18>
		if (usb_dev.configured) {
   12e96:	4b16      	ldr	r3, [pc, #88]	; (12ef0 <forward_status_cb+0x84>)
   12e98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d0f5      	beq.n	12e8c <forward_status_cb+0x20>
			usb_cancel_transfers();
   12ea0:	f000 fd44 	bl	1392c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
   12ea4:	2e04      	cmp	r6, #4
   12ea6:	d1f1      	bne.n	12e8c <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
   12ea8:	4812      	ldr	r0, [pc, #72]	; (12ef4 <forward_status_cb+0x88>)
   12eaa:	f7ff fccd 	bl	12848 <foreach_ep>
				usb_dev.configured = false;
   12eae:	4b10      	ldr	r3, [pc, #64]	; (12ef0 <forward_status_cb+0x84>)
   12eb0:	2200      	movs	r2, #0
   12eb2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   12eb6:	e7e9      	b.n	12e8c <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
   12eb8:	3401      	adds	r4, #1
   12eba:	42ac      	cmp	r4, r5
   12ebc:	d20b      	bcs.n	12ed6 <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
   12ebe:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   12ec2:	4b09      	ldr	r3, [pc, #36]	; (12ee8 <forward_status_cb+0x7c>)
   12ec4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
   12ec8:	68c3      	ldr	r3, [r0, #12]
   12eca:	2b00      	cmp	r3, #0
   12ecc:	d0f4      	beq.n	12eb8 <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
   12ece:	463a      	mov	r2, r7
   12ed0:	4631      	mov	r1, r6
   12ed2:	4798      	blx	r3
   12ed4:	e7f0      	b.n	12eb8 <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
   12ed6:	4b06      	ldr	r3, [pc, #24]	; (12ef0 <forward_status_cb+0x84>)
   12ed8:	6a1b      	ldr	r3, [r3, #32]
   12eda:	b113      	cbz	r3, 12ee2 <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
   12edc:	4639      	mov	r1, r7
   12ede:	4630      	mov	r0, r6
   12ee0:	4798      	blx	r3
}
   12ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12ee4:	20000a74 	.word	0x20000a74
   12ee8:	20000a50 	.word	0x20000a50
   12eec:	38e38e39 	.word	0x38e38e39
   12ef0:	2000233c 	.word	0x2000233c
   12ef4:	000271f5 	.word	0x000271f5

00012ef8 <usb_write>:
{
   12ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12efc:	4606      	mov	r6, r0
   12efe:	4689      	mov	r9, r1
   12f00:	4690      	mov	r8, r2
   12f02:	461f      	mov	r7, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   12f04:	2503      	movs	r5, #3
   12f06:	e000      	b.n	12f0a <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   12f08:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   12f0a:	463b      	mov	r3, r7
   12f0c:	4642      	mov	r2, r8
   12f0e:	4649      	mov	r1, r9
   12f10:	4630      	mov	r0, r6
   12f12:	f00a f8d3 	bl	1d0bc <usb_dc_ep_write>
   12f16:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   12f18:	f110 0f0b 	cmn.w	r0, #11
   12f1c:	d008      	beq.n	12f30 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
   12f1e:	f114 0f0b 	cmn.w	r4, #11
   12f22:	d102      	bne.n	12f2a <usb_write+0x32>
   12f24:	1e6b      	subs	r3, r5, #1
   12f26:	2d00      	cmp	r5, #0
   12f28:	d1ee      	bne.n	12f08 <usb_write+0x10>
}
   12f2a:	4620      	mov	r0, r4
   12f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12f30:	4b09      	ldr	r3, [pc, #36]	; (12f58 <usb_write+0x60>)
   12f32:	4a0a      	ldr	r2, [pc, #40]	; (12f5c <usb_write+0x64>)
   12f34:	1a9b      	subs	r3, r3, r2
   12f36:	08db      	lsrs	r3, r3, #3
			LOG_WRN("Failed to write endpoint buffer 0x%02x", ep);
   12f38:	2202      	movs	r2, #2
   12f3a:	f362 0a02 	bfi	sl, r2, #0, #3
   12f3e:	f36f 0ac5 	bfc	sl, #3, #3
   12f42:	f363 1a8f 	bfi	sl, r3, #6, #10
   12f46:	4652      	mov	r2, sl
   12f48:	4631      	mov	r1, r6
   12f4a:	4805      	ldr	r0, [pc, #20]	; (12f60 <usb_write+0x68>)
   12f4c:	f7fe ffb8 	bl	11ec0 <log_1>
	z_impl_k_yield();
   12f50:	f00f fbb4 	bl	226bc <z_impl_k_yield>
}
   12f54:	e7e3      	b.n	12f1e <usb_write+0x26>
   12f56:	bf00      	nop
   12f58:	0002c6e0 	.word	0x0002c6e0
   12f5c:	0002c610 	.word	0x0002c610
   12f60:	0002ccf8 	.word	0x0002ccf8

00012f64 <usb_data_to_host>:
{
   12f64:	b510      	push	{r4, lr}
   12f66:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
   12f68:	4b13      	ldr	r3, [pc, #76]	; (12fb8 <usb_data_to_host+0x54>)
   12f6a:	7d1b      	ldrb	r3, [r3, #20]
   12f6c:	b9cb      	cbnz	r3, 12fa2 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
   12f6e:	4c12      	ldr	r4, [pc, #72]	; (12fb8 <usb_data_to_host+0x54>)
   12f70:	68e2      	ldr	r2, [r4, #12]
   12f72:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
   12f74:	ab01      	add	r3, sp, #4
   12f76:	68a1      	ldr	r1, [r4, #8]
   12f78:	2080      	movs	r0, #128	; 0x80
   12f7a:	f7ff ffbd 	bl	12ef8 <usb_write>
		usb_dev.data_buf += chunk;
   12f7e:	9901      	ldr	r1, [sp, #4]
   12f80:	68a2      	ldr	r2, [r4, #8]
   12f82:	440a      	add	r2, r1
   12f84:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
   12f86:	68e3      	ldr	r3, [r4, #12]
   12f88:	1a5b      	subs	r3, r3, r1
   12f8a:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
   12f8c:	b98b      	cbnz	r3, 12fb2 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
   12f8e:	88e2      	ldrh	r2, [r4, #6]
   12f90:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
   12f92:	429a      	cmp	r2, r3
   12f94:	dd0d      	ble.n	12fb2 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
   12f96:	f013 0f3f 	tst.w	r3, #63	; 0x3f
   12f9a:	d10a      	bne.n	12fb2 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
   12f9c:	2201      	movs	r2, #1
   12f9e:	7522      	strb	r2, [r4, #20]
   12fa0:	e007      	b.n	12fb2 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
   12fa2:	2100      	movs	r1, #0
   12fa4:	4b04      	ldr	r3, [pc, #16]	; (12fb8 <usb_data_to_host+0x54>)
   12fa6:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
   12fa8:	460b      	mov	r3, r1
   12faa:	460a      	mov	r2, r1
   12fac:	2080      	movs	r0, #128	; 0x80
   12fae:	f00a f885 	bl	1d0bc <usb_dc_ep_write>
}
   12fb2:	b002      	add	sp, #8
   12fb4:	bd10      	pop	{r4, pc}
   12fb6:	bf00      	nop
   12fb8:	2000233c 	.word	0x2000233c

00012fbc <usb_handle_control_transfer>:
{
   12fbc:	b510      	push	{r4, lr}
   12fbe:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
   12fc0:	2300      	movs	r3, #0
   12fc2:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
   12fc4:	4604      	mov	r4, r0
   12fc6:	b900      	cbnz	r0, 12fca <usb_handle_control_transfer+0xe>
   12fc8:	b331      	cbz	r1, 13018 <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
   12fca:	2c00      	cmp	r4, #0
   12fcc:	f040 8094 	bne.w	130f8 <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
   12fd0:	4b50      	ldr	r3, [pc, #320]	; (13114 <usb_handle_control_transfer+0x158>)
   12fd2:	68da      	ldr	r2, [r3, #12]
   12fd4:	2a00      	cmp	r2, #0
   12fd6:	dd77      	ble.n	130c8 <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   12fd8:	ab03      	add	r3, sp, #12
   12fda:	494e      	ldr	r1, [pc, #312]	; (13114 <usb_handle_control_transfer+0x158>)
   12fdc:	6889      	ldr	r1, [r1, #8]
   12fde:	2000      	movs	r0, #0
   12fe0:	f017 f9f3 	bl	2a3ca <usb_dc_ep_read>
   12fe4:	2800      	cmp	r0, #0
   12fe6:	db7c      	blt.n	130e2 <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
   12fe8:	9803      	ldr	r0, [sp, #12]
   12fea:	4a4a      	ldr	r2, [pc, #296]	; (13114 <usb_handle_control_transfer+0x158>)
   12fec:	6891      	ldr	r1, [r2, #8]
   12fee:	4401      	add	r1, r0
   12ff0:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
   12ff2:	68d3      	ldr	r3, [r2, #12]
   12ff4:	1a1b      	subs	r3, r3, r0
   12ff6:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
   12ff8:	2b00      	cmp	r3, #0
   12ffa:	d17f      	bne.n	130fc <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
   12ffc:	4610      	mov	r0, r2
   12ffe:	f102 0338 	add.w	r3, r2, #56	; 0x38
   13002:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
   13006:	f100 0110 	add.w	r1, r0, #16
   1300a:	f7ff fb53 	bl	126b4 <usb_handle_request>
   1300e:	2800      	cmp	r0, #0
   13010:	d06e      	beq.n	130f0 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
   13012:	f7ff ffa7 	bl	12f64 <usb_data_to_host>
   13016:	e071      	b.n	130fc <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
   13018:	2208      	movs	r2, #8
   1301a:	a901      	add	r1, sp, #4
   1301c:	f017 f9d5 	bl	2a3ca <usb_dc_ep_read>
   13020:	2800      	cmp	r0, #0
   13022:	db2e      	blt.n	13082 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
   13024:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13028:	4b3a      	ldr	r3, [pc, #232]	; (13114 <usb_handle_control_transfer+0x158>)
   1302a:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
   1302c:	f89d 2005 	ldrb.w	r2, [sp, #5]
   13030:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
   13032:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   13036:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
   13038:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1303c:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
   1303e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   13042:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
   13044:	f103 0238 	add.w	r2, r3, #56	; 0x38
   13048:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
   1304a:	2200      	movs	r2, #0
   1304c:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
   1304e:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
   13050:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
   13052:	f010 0f80 	tst.w	r0, #128	; 0x80
   13056:	d102      	bne.n	1305e <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
   13058:	2980      	cmp	r1, #128	; 0x80
   1305a:	d816      	bhi.n	1308a <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
   1305c:	bb61      	cbnz	r1, 130b8 <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
   1305e:	482d      	ldr	r0, [pc, #180]	; (13114 <usb_handle_control_transfer+0x158>)
   13060:	f100 0208 	add.w	r2, r0, #8
   13064:	f100 0110 	add.w	r1, r0, #16
   13068:	f7ff fb24 	bl	126b4 <usb_handle_request>
   1306c:	b340      	cbz	r0, 130c0 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
   1306e:	4b29      	ldr	r3, [pc, #164]	; (13114 <usb_handle_control_transfer+0x158>)
   13070:	88da      	ldrh	r2, [r3, #6]
   13072:	6919      	ldr	r1, [r3, #16]
   13074:	428a      	cmp	r2, r1
   13076:	bfa8      	it	ge
   13078:	460a      	movge	r2, r1
   1307a:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
   1307c:	f7ff ff72 	bl	12f64 <usb_data_to_host>
   13080:	e03c      	b.n	130fc <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   13082:	2080      	movs	r0, #128	; 0x80
   13084:	f009 ff32 	bl	1ceec <usb_dc_ep_set_stall>
			return;
   13088:	e038      	b.n	130fc <usb_handle_control_transfer+0x140>
   1308a:	4b23      	ldr	r3, [pc, #140]	; (13118 <usb_handle_control_transfer+0x15c>)
   1308c:	4a23      	ldr	r2, [pc, #140]	; (1311c <usb_handle_control_transfer+0x160>)
   1308e:	1a9b      	subs	r3, r3, r2
   13090:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
   13092:	f04f 0100 	mov.w	r1, #0
   13096:	2201      	movs	r2, #1
   13098:	f362 0102 	bfi	r1, r2, #0, #3
   1309c:	f36f 01c5 	bfc	r1, #3, #3
   130a0:	f363 118f 	bfi	r1, r3, #6, #10
   130a4:	481e      	ldr	r0, [pc, #120]	; (13120 <usb_handle_control_transfer+0x164>)
   130a6:	f7fe ffc1 	bl	1202c <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   130aa:	2080      	movs	r0, #128	; 0x80
   130ac:	f009 ff1e 	bl	1ceec <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   130b0:	2000      	movs	r0, #0
   130b2:	f009 ff1b 	bl	1ceec <usb_dc_ep_set_stall>
				return;
   130b6:	e021      	b.n	130fc <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
   130b8:	4b16      	ldr	r3, [pc, #88]	; (13114 <usb_handle_control_transfer+0x158>)
   130ba:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
   130bc:	60d9      	str	r1, [r3, #12]
				return;
   130be:	e01d      	b.n	130fc <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   130c0:	2080      	movs	r0, #128	; 0x80
   130c2:	f009 ff13 	bl	1ceec <usb_dc_ep_set_stall>
			return;
   130c6:	e019      	b.n	130fc <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
   130c8:	ab03      	add	r3, sp, #12
   130ca:	2200      	movs	r2, #0
   130cc:	4911      	ldr	r1, [pc, #68]	; (13114 <usb_handle_control_transfer+0x158>)
   130ce:	6889      	ldr	r1, [r1, #8]
   130d0:	4610      	mov	r0, r2
   130d2:	f017 f97a 	bl	2a3ca <usb_dc_ep_read>
   130d6:	2800      	cmp	r0, #0
   130d8:	da10      	bge.n	130fc <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   130da:	2080      	movs	r0, #128	; 0x80
   130dc:	f009 ff06 	bl	1ceec <usb_dc_ep_set_stall>
			return;
   130e0:	e00c      	b.n	130fc <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   130e2:	2080      	movs	r0, #128	; 0x80
   130e4:	f009 ff02 	bl	1ceec <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
   130e8:	2000      	movs	r0, #0
   130ea:	f009 feff 	bl	1ceec <usb_dc_ep_set_stall>
			return;
   130ee:	e005      	b.n	130fc <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
   130f0:	2080      	movs	r0, #128	; 0x80
   130f2:	f009 fefb 	bl	1ceec <usb_dc_ep_set_stall>
				return;
   130f6:	e001      	b.n	130fc <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
   130f8:	2c80      	cmp	r4, #128	; 0x80
   130fa:	d001      	beq.n	13100 <usb_handle_control_transfer+0x144>
}
   130fc:	b004      	add	sp, #16
   130fe:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
   13100:	4b04      	ldr	r3, [pc, #16]	; (13114 <usb_handle_control_transfer+0x158>)
   13102:	68db      	ldr	r3, [r3, #12]
   13104:	b91b      	cbnz	r3, 1310e <usb_handle_control_transfer+0x152>
   13106:	4b03      	ldr	r3, [pc, #12]	; (13114 <usb_handle_control_transfer+0x158>)
   13108:	7d1b      	ldrb	r3, [r3, #20]
   1310a:	2b00      	cmp	r3, #0
   1310c:	d0f6      	beq.n	130fc <usb_handle_control_transfer+0x140>
			usb_data_to_host();
   1310e:	f7ff ff29 	bl	12f64 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
   13112:	e7f3      	b.n	130fc <usb_handle_control_transfer+0x140>
   13114:	2000233c 	.word	0x2000233c
   13118:	0002c6e0 	.word	0x0002c6e0
   1311c:	0002c610 	.word	0x0002c610
   13120:	0002cd20 	.word	0x0002cd20

00013124 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
   13124:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
   13126:	f7ff fae1 	bl	126ec <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
   1312a:	4908      	ldr	r1, [pc, #32]	; (1314c <usb_set_config+0x28>)
   1312c:	2000      	movs	r0, #0
   1312e:	f7ff fad5 	bl	126dc <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
   13132:	4907      	ldr	r1, [pc, #28]	; (13150 <usb_set_config+0x2c>)
   13134:	2001      	movs	r0, #1
   13136:	f7ff fad1 	bl	126dc <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
   1313a:	4906      	ldr	r1, [pc, #24]	; (13154 <usb_set_config+0x30>)
   1313c:	2002      	movs	r0, #2
   1313e:	f7ff facd 	bl	126dc <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
   13142:	4805      	ldr	r0, [pc, #20]	; (13158 <usb_set_config+0x34>)
   13144:	f7ff fb74 	bl	12830 <usb_register_custom_req_handler>

	return 0;
}
   13148:	2000      	movs	r0, #0
   1314a:	bd08      	pop	{r3, pc}
   1314c:	00012d99 	.word	0x00012d99
   13150:	000128ad 	.word	0x000128ad
   13154:	0001298d 	.word	0x0001298d
   13158:	0001290d 	.word	0x0001290d

0001315c <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
   1315c:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
   1315e:	4b10      	ldr	r3, [pc, #64]	; (131a0 <usb_device_init+0x44>)
   13160:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   13164:	b10b      	cbz	r3, 1316a <usb_device_init+0xe>
		return 0;
   13166:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
   13168:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
   1316a:	f000 f9d7 	bl	1351c <usb_get_device_descriptor>
	if (!device_descriptor) {
   1316e:	b118      	cbz	r0, 13178 <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
   13170:	f7ff ffd8 	bl	13124 <usb_set_config>
	return 0;
   13174:	2000      	movs	r0, #0
   13176:	e7f7      	b.n	13168 <usb_device_init+0xc>
   13178:	4b0a      	ldr	r3, [pc, #40]	; (131a4 <usb_device_init+0x48>)
   1317a:	4a0b      	ldr	r2, [pc, #44]	; (131a8 <usb_device_init+0x4c>)
   1317c:	1a9b      	subs	r3, r3, r2
   1317e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
   13180:	f04f 0100 	mov.w	r1, #0
   13184:	2201      	movs	r2, #1
   13186:	f362 0102 	bfi	r1, r2, #0, #3
   1318a:	f36f 01c5 	bfc	r1, #3, #3
   1318e:	f363 118f 	bfi	r1, r3, #6, #10
   13192:	4806      	ldr	r0, [pc, #24]	; (131ac <usb_device_init+0x50>)
   13194:	f7fe ff4a 	bl	1202c <log_0>
		return -1;
   13198:	f04f 30ff 	mov.w	r0, #4294967295
   1319c:	e7e4      	b.n	13168 <usb_device_init+0xc>
   1319e:	bf00      	nop
   131a0:	2000233c 	.word	0x2000233c
   131a4:	0002c6e0 	.word	0x0002c6e0
   131a8:	0002c610 	.word	0x0002c610
   131ac:	0002cd3c 	.word	0x0002cd3c

000131b0 <usb_enable>:
{
   131b0:	b530      	push	{r4, r5, lr}
   131b2:	b083      	sub	sp, #12
   131b4:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
   131b6:	f04f 32ff 	mov.w	r2, #4294967295
   131ba:	f04f 33ff 	mov.w	r3, #4294967295
   131be:	482d      	ldr	r0, [pc, #180]	; (13274 <usb_enable+0xc4>)
   131c0:	f00e fc54 	bl	21a6c <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
   131c4:	4b2c      	ldr	r3, [pc, #176]	; (13278 <usb_enable+0xc8>)
   131c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
   131ca:	2b00      	cmp	r3, #0
   131cc:	d14a      	bne.n	13264 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
   131ce:	2001      	movs	r0, #1
   131d0:	f013 ffd8 	bl	27184 <usb_vbus_set>
	if (ret < 0) {
   131d4:	1e04      	subs	r4, r0, #0
   131d6:	db46      	blt.n	13266 <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
   131d8:	4b27      	ldr	r3, [pc, #156]	; (13278 <usb_enable+0xc8>)
   131da:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
   131dc:	4c27      	ldr	r4, [pc, #156]	; (1327c <usb_enable+0xcc>)
   131de:	4620      	mov	r0, r4
   131e0:	f7ff fb2c 	bl	1283c <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
   131e4:	4620      	mov	r0, r4
   131e6:	f00a f96f 	bl	1d4c8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
   131ea:	f009 fd91 	bl	1cd10 <usb_dc_attach>
	if (ret < 0) {
   131ee:	1e04      	subs	r4, r0, #0
   131f0:	db39      	blt.n	13266 <usb_enable+0xb6>
	ret = usb_transfer_init();
   131f2:	f000 fbcd 	bl	13990 <usb_transfer_init>
	if (ret < 0) {
   131f6:	1e04      	subs	r4, r0, #0
   131f8:	db35      	blt.n	13266 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
   131fa:	2340      	movs	r3, #64	; 0x40
   131fc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
   13200:	2300      	movs	r3, #0
   13202:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
   13206:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   1320a:	4668      	mov	r0, sp
   1320c:	f009 fe30 	bl	1ce70 <usb_dc_ep_configure>
	if (ret < 0) {
   13210:	1e04      	subs	r4, r0, #0
   13212:	db28      	blt.n	13266 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
   13214:	2380      	movs	r3, #128	; 0x80
   13216:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
   1321a:	4668      	mov	r0, sp
   1321c:	f009 fe28 	bl	1ce70 <usb_dc_ep_configure>
	if (ret < 0) {
   13220:	1e04      	subs	r4, r0, #0
   13222:	db20      	blt.n	13266 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
   13224:	4916      	ldr	r1, [pc, #88]	; (13280 <usb_enable+0xd0>)
   13226:	2000      	movs	r0, #0
   13228:	f00a f93a 	bl	1d4a0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   1322c:	1e04      	subs	r4, r0, #0
   1322e:	db1a      	blt.n	13266 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
   13230:	4913      	ldr	r1, [pc, #76]	; (13280 <usb_enable+0xd0>)
   13232:	2080      	movs	r0, #128	; 0x80
   13234:	f00a f934 	bl	1d4a0 <usb_dc_ep_set_callback>
	if (ret < 0) {
   13238:	1e04      	subs	r4, r0, #0
   1323a:	db14      	blt.n	13266 <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
   1323c:	f7ff fde4 	bl	12e08 <composite_setup_ep_cb>
	if (ret < 0) {
   13240:	1e04      	subs	r4, r0, #0
   13242:	db10      	blt.n	13266 <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
   13244:	2000      	movs	r0, #0
   13246:	f009 fee1 	bl	1d00c <usb_dc_ep_enable>
	if (ret < 0) {
   1324a:	1e04      	subs	r4, r0, #0
   1324c:	db0b      	blt.n	13266 <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
   1324e:	2080      	movs	r0, #128	; 0x80
   13250:	f009 fedc 	bl	1d00c <usb_dc_ep_enable>
	if (ret < 0) {
   13254:	1e04      	subs	r4, r0, #0
   13256:	db06      	blt.n	13266 <usb_enable+0xb6>
	usb_dev.enabled = true;
   13258:	4b07      	ldr	r3, [pc, #28]	; (13278 <usb_enable+0xc8>)
   1325a:	2201      	movs	r2, #1
   1325c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
   13260:	2400      	movs	r4, #0
   13262:	e000      	b.n	13266 <usb_enable+0xb6>
		ret = 0;
   13264:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
   13266:	4803      	ldr	r0, [pc, #12]	; (13274 <usb_enable+0xc4>)
   13268:	f00e fc8a 	bl	21b80 <z_impl_k_mutex_unlock>
}
   1326c:	4620      	mov	r0, r4
   1326e:	b003      	add	sp, #12
   13270:	bd30      	pop	{r4, r5, pc}
   13272:	bf00      	nop
   13274:	20000824 	.word	0x20000824
   13278:	2000233c 	.word	0x2000233c
   1327c:	00012e6d 	.word	0x00012e6d
   13280:	00012fbd 	.word	0x00012fbd

00013284 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
   13284:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
   13286:	4c0e      	ldr	r4, [pc, #56]	; (132c0 <usb_get_cfg_data+0x3c>)
   13288:	4b0e      	ldr	r3, [pc, #56]	; (132c4 <usb_get_cfg_data+0x40>)
   1328a:	1ae4      	subs	r4, r4, r3
   1328c:	10a3      	asrs	r3, r4, #2
   1328e:	4c0e      	ldr	r4, [pc, #56]	; (132c8 <usb_get_cfg_data+0x44>)
   13290:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
   13294:	2300      	movs	r3, #0
   13296:	42a3      	cmp	r3, r4
   13298:	d20e      	bcs.n	132b8 <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
   1329a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   1329e:	4909      	ldr	r1, [pc, #36]	; (132c4 <usb_get_cfg_data+0x40>)
   132a0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   132a4:	6852      	ldr	r2, [r2, #4]
   132a6:	4282      	cmp	r2, r0
   132a8:	d001      	beq.n	132ae <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
   132aa:	3301      	adds	r3, #1
   132ac:	e7f3      	b.n	13296 <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
   132ae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   132b2:	eb01 0083 	add.w	r0, r1, r3, lsl #2
   132b6:	e000      	b.n	132ba <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
   132b8:	2000      	movs	r0, #0
}
   132ba:	bc10      	pop	{r4}
   132bc:	4770      	bx	lr
   132be:	bf00      	nop
   132c0:	20000a74 	.word	0x20000a74
   132c4:	20000a50 	.word	0x20000a50
   132c8:	38e38e39 	.word	0x38e38e39

000132cc <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
   132cc:	b530      	push	{r4, r5, lr}
   132ce:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
   132d0:	ac01      	add	r4, sp, #4
   132d2:	4d1b      	ldr	r5, [pc, #108]	; (13340 <usb_update_sn_string_descriptor+0x74>)
   132d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   132d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   132d8:	682b      	ldr	r3, [r5, #0]
   132da:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
   132dc:	2210      	movs	r2, #16
   132de:	2100      	movs	r1, #0
   132e0:	a806      	add	r0, sp, #24
   132e2:	f014 fcd9 	bl	27c98 <memset>
	memset(sn, 0, sizeof(sn));
   132e6:	2212      	movs	r2, #18
   132e8:	2100      	movs	r1, #0
   132ea:	4816      	ldr	r0, [pc, #88]	; (13344 <usb_update_sn_string_descriptor+0x78>)
   132ec:	f014 fcd4 	bl	27c98 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
   132f0:	2110      	movs	r1, #16
   132f2:	a806      	add	r0, sp, #24
   132f4:	f017 f9a9 	bl	2a64a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
   132f8:	2800      	cmp	r0, #0
   132fa:	dd1d      	ble.n	13338 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
   132fc:	3808      	subs	r0, #8
   132fe:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
   13302:	2200      	movs	r2, #0
   13304:	e016      	b.n	13334 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
   13306:	18a3      	adds	r3, r4, r2
   13308:	a90a      	add	r1, sp, #40	; 0x28
   1330a:	440b      	add	r3, r1
   1330c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   13310:	0051      	lsls	r1, r2, #1
   13312:	a80a      	add	r0, sp, #40	; 0x28
   13314:	eb00 1013 	add.w	r0, r0, r3, lsr #4
   13318:	f810 5c24 	ldrb.w	r5, [r0, #-36]
   1331c:	4809      	ldr	r0, [pc, #36]	; (13344 <usb_update_sn_string_descriptor+0x78>)
   1331e:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
   13322:	f003 030f 	and.w	r3, r3, #15
   13326:	3101      	adds	r1, #1
   13328:	ad0a      	add	r5, sp, #40	; 0x28
   1332a:	442b      	add	r3, r5
   1332c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
   13330:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
   13332:	3201      	adds	r2, #1
   13334:	2a07      	cmp	r2, #7
   13336:	dde6      	ble.n	13306 <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
   13338:	4802      	ldr	r0, [pc, #8]	; (13344 <usb_update_sn_string_descriptor+0x78>)
   1333a:	b00b      	add	sp, #44	; 0x2c
   1333c:	bd30      	pop	{r4, r5, pc}
   1333e:	bf00      	nop
   13340:	0002cd70 	.word	0x0002cd70
   13344:	20002400 	.word	0x20002400

00013348 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
   13348:	b570      	push	{r4, r5, r6, lr}
   1334a:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
   1334c:	f7ff ffbe 	bl	132cc <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
   13350:	b120      	cbz	r0, 1335c <usb_fix_ascii_sn_string_descriptor+0x14>
   13352:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
   13354:	f014 fc33 	bl	27bbe <strlen>
	if (!runtime_sn_len) {
   13358:	4606      	mov	r6, r0
   1335a:	b900      	cbnz	r0, 1335e <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
   1335c:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
   1335e:	480e      	ldr	r0, [pc, #56]	; (13398 <usb_fix_ascii_sn_string_descriptor+0x50>)
   13360:	f014 fc2d 	bl	27bbe <strlen>
	if (runtime_sn_len != default_sn_len) {
   13364:	4286      	cmp	r6, r0
   13366:	d010      	beq.n	1338a <usb_fix_ascii_sn_string_descriptor+0x42>
   13368:	4b0c      	ldr	r3, [pc, #48]	; (1339c <usb_fix_ascii_sn_string_descriptor+0x54>)
   1336a:	4a0d      	ldr	r2, [pc, #52]	; (133a0 <usb_fix_ascii_sn_string_descriptor+0x58>)
   1336c:	1a9b      	subs	r3, r3, r2
   1336e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
   13370:	f04f 0100 	mov.w	r1, #0
   13374:	2201      	movs	r2, #1
   13376:	f362 0102 	bfi	r1, r2, #0, #3
   1337a:	f36f 01c5 	bfc	r1, #3, #3
   1337e:	f363 118f 	bfi	r1, r3, #6, #10
   13382:	4808      	ldr	r0, [pc, #32]	; (133a4 <usb_fix_ascii_sn_string_descriptor+0x5c>)
   13384:	f7fe fe52 	bl	1202c <log_0>
		return;
   13388:	e7e8      	b.n	1335c <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
   1338a:	4632      	mov	r2, r6
   1338c:	4629      	mov	r1, r5
   1338e:	1ca0      	adds	r0, r4, #2
   13390:	f014 fc5e 	bl	27c50 <memcpy>
   13394:	e7e2      	b.n	1335c <usb_fix_ascii_sn_string_descriptor+0x14>
   13396:	bf00      	nop
   13398:	0002cd70 	.word	0x0002cd70
   1339c:	0002c6d8 	.word	0x0002c6d8
   133a0:	0002c610 	.word	0x0002c610
   133a4:	0002cd84 	.word	0x0002cd84

000133a8 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
   133a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133ac:	b082      	sub	sp, #8
   133ae:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
   133b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   133b4:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
   133b6:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
   133b8:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
   133ba:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
   133bc:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
   133be:	e062      	b.n	13486 <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
   133c0:	78e3      	ldrb	r3, [r4, #3]
   133c2:	2b00      	cmp	r3, #0
   133c4:	d15d      	bne.n	13482 <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
   133c6:	78a3      	ldrb	r3, [r4, #2]
   133c8:	b94b      	cbnz	r3, 133de <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
   133ca:	4620      	mov	r0, r4
   133cc:	f7ff ff5a 	bl	13284 <usb_get_cfg_data>
				if (!cfg_data) {
   133d0:	4680      	mov	r8, r0
   133d2:	b138      	cbz	r0, 133e4 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
   133d4:	6883      	ldr	r3, [r0, #8]
   133d6:	b113      	cbz	r3, 133de <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
   133d8:	4639      	mov	r1, r7
   133da:	4620      	mov	r0, r4
   133dc:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
   133de:	3701      	adds	r7, #1
   133e0:	b2ff      	uxtb	r7, r7
			break;
   133e2:	e04e      	b.n	13482 <usb_fix_descriptor+0xda>
   133e4:	4b46      	ldr	r3, [pc, #280]	; (13500 <usb_fix_descriptor+0x158>)
   133e6:	4a47      	ldr	r2, [pc, #284]	; (13504 <usb_fix_descriptor+0x15c>)
   133e8:	1a9b      	subs	r3, r3, r2
   133ea:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
   133ec:	f04f 0200 	mov.w	r2, #0
   133f0:	2101      	movs	r1, #1
   133f2:	f361 0202 	bfi	r2, r1, #0, #3
   133f6:	f36f 02c5 	bfc	r2, #3, #3
   133fa:	f363 128f 	bfi	r2, r3, #6, #10
   133fe:	4621      	mov	r1, r4
   13400:	4841      	ldr	r0, [pc, #260]	; (13508 <usb_fix_descriptor+0x160>)
   13402:	f7fe fd5d 	bl	11ec0 <log_1>
					return -1;
   13406:	f04f 30ff 	mov.w	r0, #4294967295
   1340a:	e073      	b.n	134f4 <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
   1340c:	f1b8 0f00 	cmp.w	r8, #0
   13410:	d018      	beq.n	13444 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
   13412:	aa01      	add	r2, sp, #4
   13414:	4641      	mov	r1, r8
   13416:	4620      	mov	r0, r4
   13418:	f013 ff43 	bl	272a2 <usb_validate_ep_cfg_data>
   1341c:	b388      	cbz	r0, 13482 <usb_fix_descriptor+0xda>
   1341e:	4b38      	ldr	r3, [pc, #224]	; (13500 <usb_fix_descriptor+0x158>)
   13420:	4a38      	ldr	r2, [pc, #224]	; (13504 <usb_fix_descriptor+0x15c>)
   13422:	1a9b      	subs	r3, r3, r2
   13424:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
   13426:	f04f 0100 	mov.w	r1, #0
   1342a:	2201      	movs	r2, #1
   1342c:	f362 0102 	bfi	r1, r2, #0, #3
   13430:	f36f 01c5 	bfc	r1, #3, #3
   13434:	f363 118f 	bfi	r1, r3, #6, #10
   13438:	4834      	ldr	r0, [pc, #208]	; (1350c <usb_fix_descriptor+0x164>)
   1343a:	f7fe fdf7 	bl	1202c <log_0>
				return -1;
   1343e:	f04f 30ff 	mov.w	r0, #4294967295
   13442:	e057      	b.n	134f4 <usb_fix_descriptor+0x14c>
   13444:	4b2e      	ldr	r3, [pc, #184]	; (13500 <usb_fix_descriptor+0x158>)
   13446:	4a2f      	ldr	r2, [pc, #188]	; (13504 <usb_fix_descriptor+0x15c>)
   13448:	1a9b      	subs	r3, r3, r2
   1344a:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
   1344c:	f04f 0100 	mov.w	r1, #0
   13450:	2201      	movs	r2, #1
   13452:	f362 0102 	bfi	r1, r2, #0, #3
   13456:	f36f 01c5 	bfc	r1, #3, #3
   1345a:	f363 118f 	bfi	r1, r3, #6, #10
   1345e:	482c      	ldr	r0, [pc, #176]	; (13510 <usb_fix_descriptor+0x168>)
   13460:	f7fe fde4 	bl	1202c <log_0>
				return -1;
   13464:	f04f 30ff 	mov.w	r0, #4294967295
   13468:	e044      	b.n	134f4 <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
   1346a:	2d03      	cmp	r5, #3
   1346c:	d020      	beq.n	134b0 <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
   1346e:	bb1d      	cbnz	r5, 134b8 <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
   13470:	b336      	cbz	r6, 134c0 <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
   13472:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13474:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
   13476:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1347a:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
   1347c:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
   1347e:	3501      	adds	r5, #1
   13480:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
   13482:	7823      	ldrb	r3, [r4, #0]
   13484:	441c      	add	r4, r3
	while (head->bLength != 0U) {
   13486:	7823      	ldrb	r3, [r4, #0]
   13488:	b37b      	cbz	r3, 134ea <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
   1348a:	7863      	ldrb	r3, [r4, #1]
   1348c:	2b05      	cmp	r3, #5
   1348e:	d8f8      	bhi.n	13482 <usb_fix_descriptor+0xda>
   13490:	a201      	add	r2, pc, #4	; (adr r2, 13498 <usb_fix_descriptor+0xf0>)
   13492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13496:	bf00      	nop
   13498:	0001346b 	.word	0x0001346b
   1349c:	00013483 	.word	0x00013483
   134a0:	000134e7 	.word	0x000134e7
   134a4:	0001346b 	.word	0x0001346b
   134a8:	000133c1 	.word	0x000133c1
   134ac:	0001340d 	.word	0x0001340d
				usb_fix_ascii_sn_string_descriptor(sn);
   134b0:	4620      	mov	r0, r4
   134b2:	f7ff ff49 	bl	13348 <usb_fix_ascii_sn_string_descriptor>
   134b6:	e7da      	b.n	1346e <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
   134b8:	4620      	mov	r0, r4
   134ba:	f013 fede 	bl	2727a <ascii7_to_utf16le>
   134be:	e7de      	b.n	1347e <usb_fix_descriptor+0xd6>
   134c0:	4b0f      	ldr	r3, [pc, #60]	; (13500 <usb_fix_descriptor+0x158>)
   134c2:	4a10      	ldr	r2, [pc, #64]	; (13504 <usb_fix_descriptor+0x15c>)
   134c4:	1a9b      	subs	r3, r3, r2
   134c6:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
   134c8:	f04f 0100 	mov.w	r1, #0
   134cc:	2201      	movs	r2, #1
   134ce:	f362 0102 	bfi	r1, r2, #0, #3
   134d2:	f36f 01c5 	bfc	r1, #3, #3
   134d6:	f363 118f 	bfi	r1, r3, #6, #10
   134da:	480e      	ldr	r0, [pc, #56]	; (13514 <usb_fix_descriptor+0x16c>)
   134dc:	f7fe fda6 	bl	1202c <log_0>
					return -1;
   134e0:	f04f 30ff 	mov.w	r0, #4294967295
   134e4:	e006      	b.n	134f4 <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
   134e6:	4626      	mov	r6, r4
   134e8:	e7cb      	b.n	13482 <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
   134ea:	1ca0      	adds	r0, r4, #2
   134ec:	4b0a      	ldr	r3, [pc, #40]	; (13518 <usb_fix_descriptor+0x170>)
   134ee:	4298      	cmp	r0, r3
   134f0:	d103      	bne.n	134fa <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
   134f2:	2000      	movs	r0, #0
}
   134f4:	b002      	add	sp, #8
   134f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
   134fa:	f7ff ff55 	bl	133a8 <usb_fix_descriptor>
   134fe:	e7f9      	b.n	134f4 <usb_fix_descriptor+0x14c>
   13500:	0002c6d8 	.word	0x0002c6d8
   13504:	0002c610 	.word	0x0002c610
   13508:	0002cdd0 	.word	0x0002cdd0
   1350c:	0002ce34 	.word	0x0002ce34
   13510:	0002cdf0 	.word	0x0002cdf0
   13514:	0002ce54 	.word	0x0002ce54
   13518:	20000a4d 	.word	0x20000a4d

0001351c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
   1351c:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
   1351e:	480c      	ldr	r0, [pc, #48]	; (13550 <usb_get_device_descriptor+0x34>)
   13520:	f7ff ff42 	bl	133a8 <usb_fix_descriptor>
   13524:	b908      	cbnz	r0, 1352a <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
   13526:	480a      	ldr	r0, [pc, #40]	; (13550 <usb_get_device_descriptor+0x34>)
}
   13528:	bd08      	pop	{r3, pc}
   1352a:	4b0a      	ldr	r3, [pc, #40]	; (13554 <usb_get_device_descriptor+0x38>)
   1352c:	4a0a      	ldr	r2, [pc, #40]	; (13558 <usb_get_device_descriptor+0x3c>)
   1352e:	1a9b      	subs	r3, r3, r2
   13530:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
   13532:	f04f 0100 	mov.w	r1, #0
   13536:	2201      	movs	r2, #1
   13538:	f362 0102 	bfi	r1, r2, #0, #3
   1353c:	f36f 01c5 	bfc	r1, #3, #3
   13540:	f363 118f 	bfi	r1, r3, #6, #10
   13544:	4805      	ldr	r0, [pc, #20]	; (1355c <usb_get_device_descriptor+0x40>)
   13546:	f7fe fd71 	bl	1202c <log_0>
		return NULL;
   1354a:	2000      	movs	r0, #0
   1354c:	e7ec      	b.n	13528 <usb_get_device_descriptor+0xc>
   1354e:	bf00      	nop
   13550:	200009a0 	.word	0x200009a0
   13554:	0002c6d8 	.word	0x0002c6d8
   13558:	0002c610 	.word	0x0002c610
   1355c:	0002ce74 	.word	0x0002ce74

00013560 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   13560:	2300      	movs	r3, #0
   13562:	e000      	b.n	13566 <usb_ep_get_transfer+0x6>
   13564:	3301      	adds	r3, #1
   13566:	2b03      	cmp	r3, #3
   13568:	dc12      	bgt.n	13590 <usb_ep_get_transfer+0x30>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
   1356a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   1356e:	4909      	ldr	r1, [pc, #36]	; (13594 <usb_ep_get_transfer+0x34>)
   13570:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   13574:	4282      	cmp	r2, r0
   13576:	d1f5      	bne.n	13564 <usb_ep_get_transfer+0x4>
   13578:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
   1357c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   13580:	6852      	ldr	r2, [r2, #4]
   13582:	2a00      	cmp	r2, #0
   13584:	d0ee      	beq.n	13564 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
   13586:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1358a:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   1358e:	4770      	bx	lr
		}
	}

	return NULL;
   13590:	2000      	movs	r0, #0
}
   13592:	4770      	bx	lr
   13594:	20002414 	.word	0x20002414

00013598 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
   13598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1359c:	b082      	sub	sp, #8
   1359e:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
   135a0:	f810 5c34 	ldrb.w	r5, [r0, #-52]

	if (trans->status != -EBUSY) {
   135a4:	f850 3c30 	ldr.w	r3, [r0, #-48]
   135a8:	f113 0f10 	cmn.w	r3, #16
   135ac:	d10c      	bne.n	135c8 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
   135ae:	6903      	ldr	r3, [r0, #16]
   135b0:	f013 0f02 	tst.w	r3, #2
   135b4:	d062      	beq.n	1367c <usb_transfer_work+0xe4>
		if (!trans->bsize) {
   135b6:	f850 2c28 	ldr.w	r2, [r0, #-40]
   135ba:	bb82      	cbnz	r2, 1361e <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
   135bc:	f013 0f04 	tst.w	r3, #4
   135c0:	d026      	beq.n	13610 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
   135c2:	2300      	movs	r3, #0
   135c4:	f844 3c30 	str.w	r3, [r4, #-48]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
   135c8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   135cc:	f113 0f10 	cmn.w	r3, #16
   135d0:	d01b      	beq.n	1360a <usb_transfer_work+0x72>
   135d2:	f854 6c20 	ldr.w	r6, [r4, #-32]
   135d6:	b1c6      	cbz	r6, 1360a <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
   135d8:	f854 7c24 	ldr.w	r7, [r4, #-36]
		void *priv = trans->priv;
   135dc:	f854 8c1c 	ldr.w	r8, [r4, #-28]

		if (k_is_in_isr()) {
   135e0:	f018 f8b0 	bl	2b744 <k_is_in_isr>
   135e4:	2800      	cmp	r0, #0
   135e6:	f040 808f 	bne.w	13708 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
   135ea:	2300      	movs	r3, #0
   135ec:	f844 3c20 	str.w	r3, [r4, #-32]
		k_sem_give(&trans->sem);
   135f0:	f1a4 0018 	sub.w	r0, r4, #24
	z_impl_k_sem_give(sem);
   135f4:	f00e fb44 	bl	21c80 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
   135f8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   135fc:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
   13600:	d003      	beq.n	1360a <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
   13602:	4642      	mov	r2, r8
   13604:	4639      	mov	r1, r7
   13606:	4628      	mov	r0, r5
   13608:	47b0      	blx	r6
		}
	}
}
   1360a:	b002      	add	sp, #8
   1360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
   13610:	2300      	movs	r3, #0
   13612:	461a      	mov	r2, r3
   13614:	4619      	mov	r1, r3
   13616:	4628      	mov	r0, r5
   13618:	f7ff fc6e 	bl	12ef8 <usb_write>
   1361c:	e7d1      	b.n	135c2 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
   1361e:	ab01      	add	r3, sp, #4
   13620:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   13624:	4628      	mov	r0, r5
   13626:	f7ff fc67 	bl	12ef8 <usb_write>
		if (ret) {
   1362a:	4601      	mov	r1, r0
   1362c:	b980      	cbnz	r0, 13650 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
   1362e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13632:	9a01      	ldr	r2, [sp, #4]
   13634:	4413      	add	r3, r2
   13636:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   1363a:	f854 3c28 	ldr.w	r3, [r4, #-40]
   1363e:	1a9b      	subs	r3, r3, r2
   13640:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   13644:	f854 3c24 	ldr.w	r3, [r4, #-36]
   13648:	4413      	add	r3, r2
   1364a:	f844 3c24 	str.w	r3, [r4, #-36]
   1364e:	e7bb      	b.n	135c8 <usb_transfer_work+0x30>
   13650:	4a30      	ldr	r2, [pc, #192]	; (13714 <usb_transfer_work+0x17c>)
   13652:	4b31      	ldr	r3, [pc, #196]	; (13718 <usb_transfer_work+0x180>)
   13654:	1ad2      	subs	r2, r2, r3
   13656:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   13658:	f04f 0300 	mov.w	r3, #0
   1365c:	2001      	movs	r0, #1
   1365e:	f360 0302 	bfi	r3, r0, #0, #3
   13662:	f36f 03c5 	bfc	r3, #3, #3
   13666:	f362 138f 	bfi	r3, r2, #6, #10
   1366a:	462a      	mov	r2, r5
   1366c:	482b      	ldr	r0, [pc, #172]	; (1371c <usb_transfer_work+0x184>)
   1366e:	f7fe fc5d 	bl	11f2c <log_2>
			trans->status = -EINVAL;
   13672:	f06f 0315 	mvn.w	r3, #21
   13676:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   1367a:	e7a5      	b.n	135c8 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
   1367c:	ab01      	add	r3, sp, #4
   1367e:	f850 2c28 	ldr.w	r2, [r0, #-40]
   13682:	f850 1c2c 	ldr.w	r1, [r0, #-44]
   13686:	4628      	mov	r0, r5
   13688:	f009 fdc8 	bl	1d21c <usb_dc_ep_read_wait>
		if (ret) {
   1368c:	4601      	mov	r1, r0
   1368e:	b9a0      	cbnz	r0, 136ba <usb_transfer_work+0x122>
		trans->buffer += bytes;
   13690:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   13694:	9e01      	ldr	r6, [sp, #4]
   13696:	4433      	add	r3, r6
   13698:	f844 3c2c 	str.w	r3, [r4, #-44]
		trans->bsize -= bytes;
   1369c:	f854 3c28 	ldr.w	r3, [r4, #-40]
   136a0:	1b9b      	subs	r3, r3, r6
   136a2:	f844 3c28 	str.w	r3, [r4, #-40]
		trans->tsize += bytes;
   136a6:	f854 3c24 	ldr.w	r3, [r4, #-36]
   136aa:	4433      	add	r3, r6
   136ac:	f844 3c24 	str.w	r3, [r4, #-36]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   136b0:	b9ce      	cbnz	r6, 136e6 <usb_transfer_work+0x14e>
			trans->status = 0;
   136b2:	2300      	movs	r3, #0
   136b4:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   136b8:	e786      	b.n	135c8 <usb_transfer_work+0x30>
   136ba:	4a16      	ldr	r2, [pc, #88]	; (13714 <usb_transfer_work+0x17c>)
   136bc:	4b16      	ldr	r3, [pc, #88]	; (13718 <usb_transfer_work+0x180>)
   136be:	1ad2      	subs	r2, r2, r3
   136c0:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
   136c2:	f04f 0300 	mov.w	r3, #0
   136c6:	2001      	movs	r0, #1
   136c8:	f360 0302 	bfi	r3, r0, #0, #3
   136cc:	f36f 03c5 	bfc	r3, #3, #3
   136d0:	f362 138f 	bfi	r3, r2, #6, #10
   136d4:	462a      	mov	r2, r5
   136d6:	4811      	ldr	r0, [pc, #68]	; (1371c <usb_transfer_work+0x184>)
   136d8:	f7fe fc28 	bl	11f2c <log_2>
			trans->status = -EINVAL;
   136dc:	f06f 0315 	mvn.w	r3, #21
   136e0:	f844 3c30 	str.w	r3, [r4, #-48]
			goto done;
   136e4:	e770      	b.n	135c8 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
   136e6:	4628      	mov	r0, r5
   136e8:	f009 fef4 	bl	1d4d4 <usb_dc_ep_mps>
   136ec:	fbb6 f3f0 	udiv	r3, r6, r0
   136f0:	fb00 6013 	mls	r0, r0, r3, r6
   136f4:	2800      	cmp	r0, #0
   136f6:	d1dc      	bne.n	136b2 <usb_transfer_work+0x11a>
   136f8:	f854 3c28 	ldr.w	r3, [r4, #-40]
   136fc:	2b00      	cmp	r3, #0
   136fe:	d0d8      	beq.n	136b2 <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
   13700:	4628      	mov	r0, r5
   13702:	f009 fe05 	bl	1d310 <usb_dc_ep_read_continue>
   13706:	e75f      	b.n	135c8 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   13708:	4621      	mov	r1, r4
   1370a:	4805      	ldr	r0, [pc, #20]	; (13720 <usb_transfer_work+0x188>)
   1370c:	f018 f9f2 	bl	2baf4 <k_work_submit_to_queue>
			return;
   13710:	e77b      	b.n	1360a <usb_transfer_work+0x72>
   13712:	bf00      	nop
   13714:	0002c6f0 	.word	0x0002c6f0
   13718:	0002c610 	.word	0x0002c610
   1371c:	0002cea4 	.word	0x0002cea4
   13720:	20001878 	.word	0x20001878

00013724 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
   13724:	b570      	push	{r4, r5, r6, lr}
   13726:	b082      	sub	sp, #8
   13728:	4606      	mov	r6, r0
   1372a:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   1372c:	f7ff ff18 	bl	13560 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
   13730:	1e63      	subs	r3, r4, #1
   13732:	b2db      	uxtb	r3, r3
   13734:	2b01      	cmp	r3, #1
   13736:	d80a      	bhi.n	1374e <usb_transfer_ep_callback+0x2a>
   13738:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
   1373a:	b150      	cbz	r0, 13752 <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
   1373c:	f018 f802 	bl	2b744 <k_is_in_isr>
   13740:	b108      	cbz	r0, 13746 <usb_transfer_ep_callback+0x22>
   13742:	2c01      	cmp	r4, #1
   13744:	d122      	bne.n	1378c <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
   13746:	f105 0034 	add.w	r0, r5, #52	; 0x34
   1374a:	f7ff ff25 	bl	13598 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
   1374e:	b002      	add	sp, #8
   13750:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
   13752:	2c01      	cmp	r4, #1
   13754:	d1fb      	bne.n	1374e <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
   13756:	ab01      	add	r3, sp, #4
   13758:	2201      	movs	r2, #1
   1375a:	f10d 0103 	add.w	r1, sp, #3
   1375e:	4630      	mov	r0, r6
   13760:	f009 fd5c 	bl	1d21c <usb_dc_ep_read_wait>
			} while (bytes);
   13764:	9b01      	ldr	r3, [sp, #4]
   13766:	2b00      	cmp	r3, #0
   13768:	d1f5      	bne.n	13756 <usb_transfer_ep_callback+0x32>
   1376a:	4b0b      	ldr	r3, [pc, #44]	; (13798 <usb_transfer_ep_callback+0x74>)
   1376c:	4a0b      	ldr	r2, [pc, #44]	; (1379c <usb_transfer_ep_callback+0x78>)
   1376e:	1a9b      	subs	r3, r3, r2
   13770:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
   13772:	f04f 0100 	mov.w	r1, #0
   13776:	2201      	movs	r2, #1
   13778:	f362 0102 	bfi	r1, r2, #0, #3
   1377c:	f36f 01c5 	bfc	r1, #3, #3
   13780:	f363 118f 	bfi	r1, r3, #6, #10
   13784:	4806      	ldr	r0, [pc, #24]	; (137a0 <usb_transfer_ep_callback+0x7c>)
   13786:	f7fe fc51 	bl	1202c <log_0>
		return;
   1378a:	e7e0      	b.n	1374e <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1378c:	f105 0134 	add.w	r1, r5, #52	; 0x34
   13790:	4804      	ldr	r0, [pc, #16]	; (137a4 <usb_transfer_ep_callback+0x80>)
   13792:	f018 f9af 	bl	2baf4 <k_work_submit_to_queue>
   13796:	e7da      	b.n	1374e <usb_transfer_ep_callback+0x2a>
   13798:	0002c6f0 	.word	0x0002c6f0
   1379c:	0002c610 	.word	0x0002c610
   137a0:	0002cec4 	.word	0x0002cec4
   137a4:	20001878 	.word	0x20001878

000137a8 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
   137a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   137ac:	4605      	mov	r5, r0
   137ae:	4688      	mov	r8, r1
   137b0:	4617      	mov	r7, r2
   137b2:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
   137b4:	f013 fe1f 	bl	273f6 <usb_transfer_is_busy>
   137b8:	2800      	cmp	r0, #0
   137ba:	f040 8087 	bne.w	138cc <usb_transfer+0x124>
	__asm__ volatile(
   137be:	f04f 0340 	mov.w	r3, #64	; 0x40
   137c2:	f3ef 8911 	mrs	r9, BASEPRI
   137c6:	f383 8812 	msr	BASEPRI_MAX, r3
   137ca:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
   137ce:	2400      	movs	r4, #0
   137d0:	2c03      	cmp	r4, #3
   137d2:	dc14      	bgt.n	137fe <usb_transfer+0x56>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
   137d4:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   137d8:	00c0      	lsls	r0, r0, #3
   137da:	f100 0318 	add.w	r3, r0, #24
   137de:	483d      	ldr	r0, [pc, #244]	; (138d4 <usb_transfer+0x12c>)
   137e0:	4418      	add	r0, r3
   137e2:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
   137e4:	2200      	movs	r2, #0
   137e6:	2300      	movs	r3, #0
   137e8:	f00e fa72 	bl	21cd0 <z_impl_k_sem_take>
   137ec:	b108      	cbz	r0, 137f2 <usb_transfer+0x4a>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
   137ee:	3401      	adds	r4, #1
   137f0:	e7ee      	b.n	137d0 <usb_transfer+0x28>
			trans = &ut_data[i];
   137f2:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   137f6:	4837      	ldr	r0, [pc, #220]	; (138d4 <usb_transfer+0x12c>)
   137f8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
			break;
   137fc:	e000      	b.n	13800 <usb_transfer+0x58>
	struct usb_transfer_data *trans = NULL;
   137fe:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
   13800:	b344      	cbz	r4, 13854 <usb_transfer+0xac>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
   13802:	f8d4 a004 	ldr.w	sl, [r4, #4]
   13806:	f11a 0f10 	cmn.w	sl, #16
   1380a:	d036      	beq.n	1387a <usb_transfer+0xd2>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
   1380c:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
   1380e:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
   13812:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
   13814:	2300      	movs	r3, #0
   13816:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
   13818:	9b08      	ldr	r3, [sp, #32]
   1381a:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
   1381c:	6466      	str	r6, [r4, #68]	; 0x44
	trans->priv = cb_data;
   1381e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13820:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
   13822:	f06f 030f 	mvn.w	r3, #15
   13826:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   13828:	4628      	mov	r0, r5
   1382a:	f009 fe53 	bl	1d4d4 <usb_dc_ep_mps>
   1382e:	2800      	cmp	r0, #0
   13830:	d139      	bne.n	138a6 <usb_transfer+0xfe>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
   13832:	f016 0f02 	tst.w	r6, #2
   13836:	d044      	beq.n	138c2 <usb_transfer+0x11a>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   13838:	f104 0134 	add.w	r1, r4, #52	; 0x34
   1383c:	4826      	ldr	r0, [pc, #152]	; (138d8 <usb_transfer+0x130>)
   1383e:	f018 f959 	bl	2baf4 <k_work_submit_to_queue>
	int i, key, ret = 0;
   13842:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
   13846:	f389 8811 	msr	BASEPRI, r9
   1384a:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
   1384e:	4650      	mov	r0, sl
   13850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13854:	4b21      	ldr	r3, [pc, #132]	; (138dc <usb_transfer+0x134>)
   13856:	4a22      	ldr	r2, [pc, #136]	; (138e0 <usb_transfer+0x138>)
   13858:	1a9b      	subs	r3, r3, r2
   1385a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
   1385c:	f04f 0100 	mov.w	r1, #0
   13860:	2201      	movs	r2, #1
   13862:	f362 0102 	bfi	r1, r2, #0, #3
   13866:	f36f 01c5 	bfc	r1, #3, #3
   1386a:	f363 118f 	bfi	r1, r3, #6, #10
   1386e:	481d      	ldr	r0, [pc, #116]	; (138e4 <usb_transfer+0x13c>)
   13870:	f7fe fbdc 	bl	1202c <log_0>
		ret = -ENOMEM;
   13874:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
   13878:	e7e5      	b.n	13846 <usb_transfer+0x9e>
   1387a:	4b18      	ldr	r3, [pc, #96]	; (138dc <usb_transfer+0x134>)
   1387c:	4a18      	ldr	r2, [pc, #96]	; (138e0 <usb_transfer+0x138>)
   1387e:	1a9b      	subs	r3, r3, r2
   13880:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
   13882:	f04f 0200 	mov.w	r2, #0
   13886:	2101      	movs	r1, #1
   13888:	f361 0202 	bfi	r2, r1, #0, #3
   1388c:	f36f 02c5 	bfc	r2, #3, #3
   13890:	f363 128f 	bfi	r2, r3, #6, #10
   13894:	4629      	mov	r1, r5
   13896:	4814      	ldr	r0, [pc, #80]	; (138e8 <usb_transfer+0x140>)
   13898:	f7fe fb12 	bl	11ec0 <log_1>
		k_sem_give(&trans->sem);
   1389c:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
   138a0:	f00e f9ee 	bl	21c80 <z_impl_k_sem_give>
		goto done;
   138a4:	e7cf      	b.n	13846 <usb_transfer+0x9e>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
   138a6:	4628      	mov	r0, r5
   138a8:	f009 fe14 	bl	1d4d4 <usb_dc_ep_mps>
   138ac:	fbb7 f3f0 	udiv	r3, r7, r0
   138b0:	fb00 7013 	mls	r0, r0, r3, r7
   138b4:	2800      	cmp	r0, #0
   138b6:	d0bc      	beq.n	13832 <usb_transfer+0x8a>
		trans->flags |= USB_TRANS_NO_ZLP;
   138b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   138ba:	f043 0304 	orr.w	r3, r3, #4
   138be:	6463      	str	r3, [r4, #68]	; 0x44
   138c0:	e7b7      	b.n	13832 <usb_transfer+0x8a>
		ret = usb_dc_ep_read_continue(ep);
   138c2:	4628      	mov	r0, r5
   138c4:	f009 fd24 	bl	1d310 <usb_dc_ep_read_continue>
   138c8:	4682      	mov	sl, r0
   138ca:	e7bc      	b.n	13846 <usb_transfer+0x9e>
		return -EBUSY;
   138cc:	f06f 0a0f 	mvn.w	sl, #15
   138d0:	e7bd      	b.n	1384e <usb_transfer+0xa6>
   138d2:	bf00      	nop
   138d4:	20002414 	.word	0x20002414
   138d8:	20001878 	.word	0x20001878
   138dc:	0002c6f0 	.word	0x0002c6f0
   138e0:	0002c610 	.word	0x0002c610
   138e4:	0002cee0 	.word	0x0002cee0
   138e8:	0002cefc 	.word	0x0002cefc

000138ec <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
   138ec:	b510      	push	{r4, lr}
	__asm__ volatile(
   138ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   138f2:	f3ef 8411 	mrs	r4, BASEPRI
   138f6:	f383 8812 	msr	BASEPRI_MAX, r3
   138fa:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
   138fe:	f7ff fe2f 	bl	13560 <usb_ep_get_transfer>
	if (!trans) {
   13902:	b120      	cbz	r0, 1390e <usb_cancel_transfer+0x22>
   13904:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
   13906:	6843      	ldr	r3, [r0, #4]
   13908:	f113 0f10 	cmn.w	r3, #16
   1390c:	d004      	beq.n	13918 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
   1390e:	f384 8811 	msr	BASEPRI, r4
   13912:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
   13916:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
   13918:	f06f 038b 	mvn.w	r3, #139	; 0x8b
   1391c:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   1391e:	3134      	adds	r1, #52	; 0x34
   13920:	4801      	ldr	r0, [pc, #4]	; (13928 <usb_cancel_transfer+0x3c>)
   13922:	f018 f8e7 	bl	2baf4 <k_work_submit_to_queue>
   13926:	e7f2      	b.n	1390e <usb_cancel_transfer+0x22>
   13928:	20001878 	.word	0x20001878

0001392c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
   1392c:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1392e:	2400      	movs	r4, #0
   13930:	e015      	b.n	1395e <usb_cancel_transfers+0x32>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
   13932:	4915      	ldr	r1, [pc, #84]	; (13988 <usb_cancel_transfers+0x5c>)
   13934:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13938:	00d3      	lsls	r3, r2, #3
   1393a:	440b      	add	r3, r1
   1393c:	f06f 028b 	mvn.w	r2, #139	; 0x8b
   13940:	605a      	str	r2, [r3, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
   13942:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   13946:	00d3      	lsls	r3, r2, #3
   13948:	3330      	adds	r3, #48	; 0x30
   1394a:	4419      	add	r1, r3
   1394c:	3104      	adds	r1, #4
   1394e:	480f      	ldr	r0, [pc, #60]	; (1398c <usb_cancel_transfers+0x60>)
   13950:	f018 f8d0 	bl	2baf4 <k_work_submit_to_queue>
   13954:	f385 8811 	msr	BASEPRI, r5
   13958:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   1395c:	3401      	adds	r4, #1
   1395e:	2c03      	cmp	r4, #3
   13960:	dc11      	bgt.n	13986 <usb_cancel_transfers+0x5a>
	__asm__ volatile(
   13962:	f04f 0340 	mov.w	r3, #64	; 0x40
   13966:	f3ef 8511 	mrs	r5, BASEPRI
   1396a:	f383 8812 	msr	BASEPRI_MAX, r3
   1396e:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
   13972:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   13976:	00da      	lsls	r2, r3, #3
   13978:	4b03      	ldr	r3, [pc, #12]	; (13988 <usb_cancel_transfers+0x5c>)
   1397a:	4413      	add	r3, r2
   1397c:	685b      	ldr	r3, [r3, #4]
   1397e:	f113 0f10 	cmn.w	r3, #16
   13982:	d1e7      	bne.n	13954 <usb_cancel_transfers+0x28>
   13984:	e7d5      	b.n	13932 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
   13986:	bd38      	pop	{r3, r4, r5, pc}
   13988:	20002414 	.word	0x20002414
   1398c:	20001878 	.word	0x20001878

00013990 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
   13990:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   13992:	2400      	movs	r4, #0
   13994:	e014      	b.n	139c0 <usb_transfer_init+0x30>
		k_work_init(&ut_data[i].work, usb_transfer_work);
   13996:	4d0c      	ldr	r5, [pc, #48]	; (139c8 <usb_transfer_init+0x38>)
   13998:	00e6      	lsls	r6, r4, #3
   1399a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
   1399e:	00d8      	lsls	r0, r3, #3
   139a0:	3030      	adds	r0, #48	; 0x30
   139a2:	4428      	add	r0, r5
   139a4:	4909      	ldr	r1, [pc, #36]	; (139cc <usb_transfer_init+0x3c>)
   139a6:	3004      	adds	r0, #4
   139a8:	f018 f89e 	bl	2bae8 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
   139ac:	1933      	adds	r3, r6, r4
   139ae:	00d8      	lsls	r0, r3, #3
   139b0:	3018      	adds	r0, #24
   139b2:	4428      	add	r0, r5
   139b4:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
   139b6:	2201      	movs	r2, #1
   139b8:	4611      	mov	r1, r2
   139ba:	f018 f80c 	bl	2b9d6 <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
   139be:	3401      	adds	r4, #1
   139c0:	2c03      	cmp	r4, #3
   139c2:	dde8      	ble.n	13996 <usb_transfer_init+0x6>
	}

	return 0;
}
   139c4:	2000      	movs	r0, #0
   139c6:	bd70      	pop	{r4, r5, r6, pc}
   139c8:	20002414 	.word	0x20002414
   139cc:	00013599 	.word	0x00013599

000139d0 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
   139d0:	b570      	push	{r4, r5, r6, lr}
   139d2:	4604      	mov	r4, r0
   139d4:	460e      	mov	r6, r1
   139d6:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
   139d8:	7901      	ldrb	r1, [r0, #4]
   139da:	481e      	ldr	r0, [pc, #120]	; (13a54 <cdc_acm_class_handle_req+0x84>)
   139dc:	f013 fcd7 	bl	2738e <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
   139e0:	b158      	cbz	r0, 139fa <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
   139e2:	f994 2000 	ldrsb.w	r2, [r4]
   139e6:	2a00      	cmp	r2, #0
   139e8:	db27      	blt.n	13a3a <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
   139ea:	7862      	ldrb	r2, [r4, #1]
   139ec:	2a20      	cmp	r2, #32
   139ee:	d018      	beq.n	13a22 <cdc_acm_class_handle_req+0x52>
   139f0:	2a22      	cmp	r2, #34	; 0x22
   139f2:	d01d      	beq.n	13a30 <cdc_acm_class_handle_req+0x60>
   139f4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   139f8:	e028      	b.n	13a4c <cdc_acm_class_handle_req+0x7c>
   139fa:	4b17      	ldr	r3, [pc, #92]	; (13a58 <cdc_acm_class_handle_req+0x88>)
   139fc:	4a17      	ldr	r2, [pc, #92]	; (13a5c <cdc_acm_class_handle_req+0x8c>)
   139fe:	1a9b      	subs	r3, r3, r2
   13a00:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
   13a02:	f04f 0200 	mov.w	r2, #0
   13a06:	2102      	movs	r1, #2
   13a08:	f361 0202 	bfi	r2, r1, #0, #3
   13a0c:	f36f 02c5 	bfc	r2, #3, #3
   13a10:	f363 128f 	bfi	r2, r3, #6, #10
   13a14:	88a1      	ldrh	r1, [r4, #4]
   13a16:	4812      	ldr	r0, [pc, #72]	; (13a60 <cdc_acm_class_handle_req+0x90>)
   13a18:	f7fe fa52 	bl	11ec0 <log_1>
		return -ENODEV;
   13a1c:	f06f 0012 	mvn.w	r0, #18
   13a20:	e014      	b.n	13a4c <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
   13a22:	2207      	movs	r2, #7
   13a24:	6829      	ldr	r1, [r5, #0]
   13a26:	380c      	subs	r0, #12
   13a28:	f014 f912 	bl	27c50 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
   13a2c:	2000      	movs	r0, #0
   13a2e:	e00d      	b.n	13a4c <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
   13a30:	78a2      	ldrb	r2, [r4, #2]
   13a32:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
   13a36:	2000      	movs	r0, #0
   13a38:	e008      	b.n	13a4c <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
   13a3a:	7862      	ldrb	r2, [r4, #1]
   13a3c:	2a21      	cmp	r2, #33	; 0x21
   13a3e:	d106      	bne.n	13a4e <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
   13a40:	f1a0 030c 	sub.w	r3, r0, #12
   13a44:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
   13a46:	2307      	movs	r3, #7
   13a48:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
   13a4a:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
   13a4c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
   13a4e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13a52:	e7fb      	b.n	13a4c <cdc_acm_class_handle_req+0x7c>
   13a54:	20002534 	.word	0x20002534
   13a58:	0002c6d0 	.word	0x0002c6d0
   13a5c:	0002c610 	.word	0x0002c610
   13a60:	0002cf38 	.word	0x0002cf38

00013a64 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
   13a64:	b510      	push	{r4, lr}
   13a66:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
   13a68:	4601      	mov	r1, r0
   13a6a:	480d      	ldr	r0, [pc, #52]	; (13aa0 <cdc_acm_int_in+0x3c>)
   13a6c:	f013 fca3 	bl	273b6 <usb_get_dev_data_by_ep>
	if (common == NULL) {
   13a70:	b118      	cbz	r0, 13a7a <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
   13a72:	2201      	movs	r2, #1
   13a74:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
   13a78:	bd10      	pop	{r4, pc}
   13a7a:	4b0a      	ldr	r3, [pc, #40]	; (13aa4 <cdc_acm_int_in+0x40>)
   13a7c:	4a0a      	ldr	r2, [pc, #40]	; (13aa8 <cdc_acm_int_in+0x44>)
   13a7e:	1a9b      	subs	r3, r3, r2
   13a80:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
   13a82:	f04f 0200 	mov.w	r2, #0
   13a86:	2102      	movs	r1, #2
   13a88:	f361 0202 	bfi	r2, r1, #0, #3
   13a8c:	f36f 02c5 	bfc	r2, #3, #3
   13a90:	f363 128f 	bfi	r2, r3, #6, #10
   13a94:	4621      	mov	r1, r4
   13a96:	4805      	ldr	r0, [pc, #20]	; (13aac <cdc_acm_int_in+0x48>)
   13a98:	f7fe fa12 	bl	11ec0 <log_1>
		return;
   13a9c:	e7ec      	b.n	13a78 <cdc_acm_int_in+0x14>
   13a9e:	bf00      	nop
   13aa0:	20002534 	.word	0x20002534
   13aa4:	0002c6d0 	.word	0x0002c6d0
   13aa8:	0002c610 	.word	0x0002c610
   13aac:	0002cf60 	.word	0x0002cf60

00013ab0 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
   13ab0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   13ab2:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
   13ab4:	2301      	movs	r3, #1
   13ab6:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
   13aba:	680b      	ldr	r3, [r1, #0]
   13abc:	b113      	cbz	r3, 13ac4 <cdc_acm_irq_rx_enable+0x14>
   13abe:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
   13ac2:	b903      	cbnz	r3, 13ac6 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
   13ac4:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   13ac6:	3108      	adds	r1, #8
   13ac8:	4801      	ldr	r0, [pc, #4]	; (13ad0 <cdc_acm_irq_rx_enable+0x20>)
   13aca:	f018 f813 	bl	2baf4 <k_work_submit_to_queue>
}
   13ace:	e7f9      	b.n	13ac4 <cdc_acm_irq_rx_enable+0x14>
   13ad0:	20001878 	.word	0x20001878

00013ad4 <cdc_acm_irq_tx_enable>:
{
   13ad4:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   13ad6:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
   13ad8:	2301      	movs	r3, #1
   13ada:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
   13ade:	680b      	ldr	r3, [r1, #0]
   13ae0:	b113      	cbz	r3, 13ae8 <cdc_acm_irq_tx_enable+0x14>
   13ae2:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
   13ae6:	b903      	cbnz	r3, 13aea <cdc_acm_irq_tx_enable+0x16>
}
   13ae8:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   13aea:	3108      	adds	r1, #8
   13aec:	4801      	ldr	r0, [pc, #4]	; (13af4 <cdc_acm_irq_tx_enable+0x20>)
   13aee:	f018 f801 	bl	2baf4 <k_work_submit_to_queue>
}
   13af2:	e7f9      	b.n	13ae8 <cdc_acm_irq_tx_enable+0x14>
   13af4:	20001878 	.word	0x20001878

00013af8 <cdc_acm_reset_port>:
{
   13af8:	b510      	push	{r4, lr}
   13afa:	4603      	mov	r3, r0
	dev_data->configured = false;
   13afc:	2400      	movs	r4, #0
   13afe:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
   13b02:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
   13b06:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
   13b0a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
   13b0e:	4a0a      	ldr	r2, [pc, #40]	; (13b38 <cdc_acm_reset_port+0x40>)
   13b10:	e892 0003 	ldmia.w	r2, {r0, r1}
   13b14:	6758      	str	r0, [r3, #116]	; 0x74
   13b16:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
   13b1a:	0c09      	lsrs	r1, r1, #16
   13b1c:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
   13b20:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
   13b24:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
   13b28:	2240      	movs	r2, #64	; 0x40
   13b2a:	4621      	mov	r1, r4
   13b2c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   13b30:	f014 f8b2 	bl	27c98 <memset>
}
   13b34:	bd10      	pop	{r4, pc}
   13b36:	bf00      	nop
   13b38:	0002c798 	.word	0x0002c798

00013b3c <cdc_acm_fifo_fill>:
{
   13b3c:	b570      	push	{r4, r5, r6, lr}
   13b3e:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   13b40:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
   13b42:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
   13b46:	b113      	cbz	r3, 13b4e <cdc_acm_fifo_fill+0x12>
   13b48:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
   13b4c:	b193      	cbz	r3, 13b74 <cdc_acm_fifo_fill+0x38>
   13b4e:	4b1a      	ldr	r3, [pc, #104]	; (13bb8 <cdc_acm_fifo_fill+0x7c>)
   13b50:	4a1a      	ldr	r2, [pc, #104]	; (13bbc <cdc_acm_fifo_fill+0x80>)
   13b52:	1a9b      	subs	r3, r3, r2
   13b54:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
   13b56:	f04f 0200 	mov.w	r2, #0
   13b5a:	2102      	movs	r1, #2
   13b5c:	f361 0202 	bfi	r2, r1, #0, #3
   13b60:	f36f 02c5 	bfc	r2, #3, #3
   13b64:	f363 128f 	bfi	r2, r3, #6, #10
   13b68:	4621      	mov	r1, r4
   13b6a:	4815      	ldr	r0, [pc, #84]	; (13bc0 <cdc_acm_fifo_fill+0x84>)
   13b6c:	f7fe f9a8 	bl	11ec0 <log_1>
		return 0;
   13b70:	2000      	movs	r0, #0
}
   13b72:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
   13b74:	2300      	movs	r3, #0
   13b76:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
   13b7a:	6f30      	ldr	r0, [r6, #112]	; 0x70
   13b7c:	f012 fea8 	bl	268d0 <ring_buf_put>
   13b80:	4605      	mov	r5, r0
	if (wrote < len) {
   13b82:	4284      	cmp	r4, r0
   13b84:	d806      	bhi.n	13b94 <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   13b86:	f106 0118 	add.w	r1, r6, #24
   13b8a:	480e      	ldr	r0, [pc, #56]	; (13bc4 <cdc_acm_fifo_fill+0x88>)
   13b8c:	f017 ffb2 	bl	2baf4 <k_work_submit_to_queue>
	return wrote;
   13b90:	4628      	mov	r0, r5
   13b92:	e7ee      	b.n	13b72 <cdc_acm_fifo_fill+0x36>
   13b94:	4b08      	ldr	r3, [pc, #32]	; (13bb8 <cdc_acm_fifo_fill+0x7c>)
   13b96:	4a09      	ldr	r2, [pc, #36]	; (13bbc <cdc_acm_fifo_fill+0x80>)
   13b98:	1a9b      	subs	r3, r3, r2
   13b9a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
   13b9c:	f04f 0200 	mov.w	r2, #0
   13ba0:	2102      	movs	r1, #2
   13ba2:	f361 0202 	bfi	r2, r1, #0, #3
   13ba6:	f36f 02c5 	bfc	r2, #3, #3
   13baa:	f363 128f 	bfi	r2, r3, #6, #10
   13bae:	1a21      	subs	r1, r4, r0
   13bb0:	4805      	ldr	r0, [pc, #20]	; (13bc8 <cdc_acm_fifo_fill+0x8c>)
   13bb2:	f7fe f985 	bl	11ec0 <log_1>
   13bb6:	e7e6      	b.n	13b86 <cdc_acm_fifo_fill+0x4a>
   13bb8:	0002c6d0 	.word	0x0002c6d0
   13bbc:	0002c610 	.word	0x0002c610
   13bc0:	0002cf88 	.word	0x0002cf88
   13bc4:	20001878 	.word	0x20001878
   13bc8:	0002cfbc 	.word	0x0002cfbc

00013bcc <cdc_acm_read_cb>:
{
   13bcc:	b570      	push	{r4, r5, r6, lr}
   13bce:	b082      	sub	sp, #8
   13bd0:	4606      	mov	r6, r0
   13bd2:	4614      	mov	r4, r2
	if (size <= 0) {
   13bd4:	1e0d      	subs	r5, r1, #0
   13bd6:	dd0f      	ble.n	13bf8 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
   13bd8:	462a      	mov	r2, r5
   13bda:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   13bde:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   13be0:	f012 fe76 	bl	268d0 <ring_buf_put>
	if (wrote < size) {
   13be4:	4285      	cmp	r5, r0
   13be6:	d813      	bhi.n	13c10 <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
   13be8:	2301      	movs	r3, #1
   13bea:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
   13bee:	6823      	ldr	r3, [r4, #0]
   13bf0:	b113      	cbz	r3, 13bf8 <cdc_acm_read_cb+0x2c>
   13bf2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   13bf6:	b9eb      	cbnz	r3, 13c34 <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
   13bf8:	9401      	str	r4, [sp, #4]
   13bfa:	4b11      	ldr	r3, [pc, #68]	; (13c40 <cdc_acm_read_cb+0x74>)
   13bfc:	9300      	str	r3, [sp, #0]
   13bfe:	2301      	movs	r3, #1
   13c00:	2240      	movs	r2, #64	; 0x40
   13c02:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   13c06:	4630      	mov	r0, r6
   13c08:	f7ff fdce 	bl	137a8 <usb_transfer>
}
   13c0c:	b002      	add	sp, #8
   13c0e:	bd70      	pop	{r4, r5, r6, pc}
   13c10:	4b0c      	ldr	r3, [pc, #48]	; (13c44 <cdc_acm_read_cb+0x78>)
   13c12:	4a0d      	ldr	r2, [pc, #52]	; (13c48 <cdc_acm_read_cb+0x7c>)
   13c14:	1a9b      	subs	r3, r3, r2
   13c16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
   13c18:	f04f 0200 	mov.w	r2, #0
   13c1c:	2101      	movs	r1, #1
   13c1e:	f361 0202 	bfi	r2, r1, #0, #3
   13c22:	f36f 02c5 	bfc	r2, #3, #3
   13c26:	f363 128f 	bfi	r2, r3, #6, #10
   13c2a:	1a29      	subs	r1, r5, r0
   13c2c:	4807      	ldr	r0, [pc, #28]	; (13c4c <cdc_acm_read_cb+0x80>)
   13c2e:	f7fe f947 	bl	11ec0 <log_1>
   13c32:	e7d9      	b.n	13be8 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   13c34:	f104 0108 	add.w	r1, r4, #8
   13c38:	4805      	ldr	r0, [pc, #20]	; (13c50 <cdc_acm_read_cb+0x84>)
   13c3a:	f017 ff5b 	bl	2baf4 <k_work_submit_to_queue>
   13c3e:	e7db      	b.n	13bf8 <cdc_acm_read_cb+0x2c>
   13c40:	00013bcd 	.word	0x00013bcd
   13c44:	0002c6d0 	.word	0x0002c6d0
   13c48:	0002c610 	.word	0x0002c610
   13c4c:	0002cfbc 	.word	0x0002cfbc
   13c50:	20001878 	.word	0x20001878

00013c54 <cdc_acm_do_cb>:
{
   13c54:	b538      	push	{r3, r4, r5, lr}
   13c56:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
   13c58:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
   13c5c:	685d      	ldr	r5, [r3, #4]
	switch (status) {
   13c5e:	3901      	subs	r1, #1
   13c60:	2905      	cmp	r1, #5
   13c62:	d806      	bhi.n	13c72 <cdc_acm_do_cb+0x1e>
   13c64:	e8df f001 	tbb	[pc, r1]
   13c68:	37060503 	.word	0x37060503
   13c6c:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
   13c6e:	f7ff ff43 	bl	13af8 <cdc_acm_reset_port>
}
   13c72:	bd38      	pop	{r3, r4, r5, pc}
   13c74:	4b45      	ldr	r3, [pc, #276]	; (13d8c <cdc_acm_do_cb+0x138>)
   13c76:	4a46      	ldr	r2, [pc, #280]	; (13d90 <cdc_acm_do_cb+0x13c>)
   13c78:	1a9b      	subs	r3, r3, r2
   13c7a:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
   13c7c:	f04f 0100 	mov.w	r1, #0
   13c80:	2203      	movs	r2, #3
   13c82:	f362 0102 	bfi	r1, r2, #0, #3
   13c86:	f36f 01c5 	bfc	r1, #3, #3
   13c8a:	f363 118f 	bfi	r1, r3, #6, #10
   13c8e:	4841      	ldr	r0, [pc, #260]	; (13d94 <cdc_acm_do_cb+0x140>)
   13c90:	f7fe f9cc 	bl	1202c <log_0>
		if (!dev_data->configured) {
   13c94:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13c98:	b19b      	cbz	r3, 13cc2 <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
   13c9a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   13c9e:	2b00      	cmp	r3, #0
   13ca0:	d1e7      	bne.n	13c72 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
   13ca2:	2301      	movs	r3, #1
   13ca4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
   13ca8:	6823      	ldr	r3, [r4, #0]
   13caa:	2b00      	cmp	r3, #0
   13cac:	d0e1      	beq.n	13c72 <cdc_acm_do_cb+0x1e>
   13cae:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   13cb2:	2b00      	cmp	r3, #0
   13cb4:	d0dd      	beq.n	13c72 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   13cb6:	f104 0108 	add.w	r1, r4, #8
   13cba:	4837      	ldr	r0, [pc, #220]	; (13d98 <cdc_acm_do_cb+0x144>)
   13cbc:	f017 ff1a 	bl	2baf4 <k_work_submit_to_queue>
   13cc0:	e7d7      	b.n	13c72 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
   13cc2:	6a2b      	ldr	r3, [r5, #32]
   13cc4:	4622      	mov	r2, r4
   13cc6:	2100      	movs	r1, #0
   13cc8:	7b18      	ldrb	r0, [r3, #12]
   13cca:	f7ff ff7f 	bl	13bcc <cdc_acm_read_cb>
			dev_data->configured = true;
   13cce:	2301      	movs	r3, #1
   13cd0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
   13cd4:	e7e1      	b.n	13c9a <cdc_acm_do_cb+0x46>
   13cd6:	4b2d      	ldr	r3, [pc, #180]	; (13d8c <cdc_acm_do_cb+0x138>)
   13cd8:	4a2d      	ldr	r2, [pc, #180]	; (13d90 <cdc_acm_do_cb+0x13c>)
   13cda:	1a9b      	subs	r3, r3, r2
   13cdc:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
   13cde:	f04f 0100 	mov.w	r1, #0
   13ce2:	2203      	movs	r2, #3
   13ce4:	f362 0102 	bfi	r1, r2, #0, #3
   13ce8:	f36f 01c5 	bfc	r1, #3, #3
   13cec:	f363 118f 	bfi	r1, r3, #6, #10
   13cf0:	482a      	ldr	r0, [pc, #168]	; (13d9c <cdc_acm_do_cb+0x148>)
   13cf2:	f7fe f99b 	bl	1202c <log_0>
		cdc_acm_reset_port(dev_data);
   13cf6:	4620      	mov	r0, r4
   13cf8:	f7ff fefe 	bl	13af8 <cdc_acm_reset_port>
		break;
   13cfc:	e7b9      	b.n	13c72 <cdc_acm_do_cb+0x1e>
   13cfe:	4b23      	ldr	r3, [pc, #140]	; (13d8c <cdc_acm_do_cb+0x138>)
   13d00:	4a23      	ldr	r2, [pc, #140]	; (13d90 <cdc_acm_do_cb+0x13c>)
   13d02:	1a9b      	subs	r3, r3, r2
   13d04:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
   13d06:	f04f 0100 	mov.w	r1, #0
   13d0a:	2203      	movs	r2, #3
   13d0c:	f362 0102 	bfi	r1, r2, #0, #3
   13d10:	f36f 01c5 	bfc	r1, #3, #3
   13d14:	f363 118f 	bfi	r1, r3, #6, #10
   13d18:	4821      	ldr	r0, [pc, #132]	; (13da0 <cdc_acm_do_cb+0x14c>)
   13d1a:	f7fe f987 	bl	1202c <log_0>
		dev_data->suspended = true;
   13d1e:	2301      	movs	r3, #1
   13d20:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
   13d24:	e7a5      	b.n	13c72 <cdc_acm_do_cb+0x1e>
   13d26:	4b19      	ldr	r3, [pc, #100]	; (13d8c <cdc_acm_do_cb+0x138>)
   13d28:	4a19      	ldr	r2, [pc, #100]	; (13d90 <cdc_acm_do_cb+0x13c>)
   13d2a:	1a9b      	subs	r3, r3, r2
   13d2c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
   13d2e:	f04f 0100 	mov.w	r1, #0
   13d32:	2203      	movs	r2, #3
   13d34:	f362 0102 	bfi	r1, r2, #0, #3
   13d38:	f36f 01c5 	bfc	r1, #3, #3
   13d3c:	f363 118f 	bfi	r1, r3, #6, #10
   13d40:	4818      	ldr	r0, [pc, #96]	; (13da4 <cdc_acm_do_cb+0x150>)
   13d42:	f7fe f973 	bl	1202c <log_0>
		if (dev_data->suspended) {
   13d46:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   13d4a:	2b00      	cmp	r3, #0
   13d4c:	d091      	beq.n	13c72 <cdc_acm_do_cb+0x1e>
   13d4e:	4b0f      	ldr	r3, [pc, #60]	; (13d8c <cdc_acm_do_cb+0x138>)
   13d50:	4a0f      	ldr	r2, [pc, #60]	; (13d90 <cdc_acm_do_cb+0x13c>)
   13d52:	1a9b      	subs	r3, r3, r2
   13d54:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
   13d56:	f04f 0100 	mov.w	r1, #0
   13d5a:	2203      	movs	r2, #3
   13d5c:	f362 0102 	bfi	r1, r2, #0, #3
   13d60:	f36f 01c5 	bfc	r1, #3, #3
   13d64:	f363 118f 	bfi	r1, r3, #6, #10
   13d68:	480f      	ldr	r0, [pc, #60]	; (13da8 <cdc_acm_do_cb+0x154>)
   13d6a:	f7fe f95f 	bl	1202c <log_0>
			dev_data->suspended = false;
   13d6e:	2300      	movs	r3, #0
   13d70:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
   13d74:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13d78:	2b00      	cmp	r3, #0
   13d7a:	f43f af7a 	beq.w	13c72 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
   13d7e:	6a2b      	ldr	r3, [r5, #32]
   13d80:	4622      	mov	r2, r4
   13d82:	2100      	movs	r1, #0
   13d84:	7b18      	ldrb	r0, [r3, #12]
   13d86:	f7ff ff21 	bl	13bcc <cdc_acm_read_cb>
}
   13d8a:	e772      	b.n	13c72 <cdc_acm_do_cb+0x1e>
   13d8c:	0002c6d0 	.word	0x0002c6d0
   13d90:	0002c610 	.word	0x0002c610
   13d94:	0002cfe0 	.word	0x0002cfe0
   13d98:	20001878 	.word	0x20001878
   13d9c:	0002cff4 	.word	0x0002cff4
   13da0:	0002d008 	.word	0x0002d008
   13da4:	0002d01c 	.word	0x0002d01c
   13da8:	0002d02c 	.word	0x0002d02c

00013dac <cdc_acm_dev_status_cb>:
{
   13dac:	b570      	push	{r4, r5, r6, lr}
   13dae:	4604      	mov	r4, r0
   13db0:	460d      	mov	r5, r1
   13db2:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
   13db4:	4601      	mov	r1, r0
   13db6:	480e      	ldr	r0, [pc, #56]	; (13df0 <cdc_acm_dev_status_cb+0x44>)
   13db8:	f013 fad7 	bl	2736a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
   13dbc:	b128      	cbz	r0, 13dca <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
   13dbe:	4632      	mov	r2, r6
   13dc0:	4629      	mov	r1, r5
   13dc2:	3880      	subs	r0, #128	; 0x80
   13dc4:	f7ff ff46 	bl	13c54 <cdc_acm_do_cb>
}
   13dc8:	bd70      	pop	{r4, r5, r6, pc}
   13dca:	4b0a      	ldr	r3, [pc, #40]	; (13df4 <cdc_acm_dev_status_cb+0x48>)
   13dcc:	4a0a      	ldr	r2, [pc, #40]	; (13df8 <cdc_acm_dev_status_cb+0x4c>)
   13dce:	1a9b      	subs	r3, r3, r2
   13dd0:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
   13dd2:	f04f 0200 	mov.w	r2, #0
   13dd6:	2102      	movs	r1, #2
   13dd8:	f361 0202 	bfi	r2, r1, #0, #3
   13ddc:	f36f 02c5 	bfc	r2, #3, #3
   13de0:	f363 128f 	bfi	r2, r3, #6, #10
   13de4:	4621      	mov	r1, r4
   13de6:	4805      	ldr	r0, [pc, #20]	; (13dfc <cdc_acm_dev_status_cb+0x50>)
   13de8:	f7fe f86a 	bl	11ec0 <log_1>
		return;
   13dec:	e7ec      	b.n	13dc8 <cdc_acm_dev_status_cb+0x1c>
   13dee:	bf00      	nop
   13df0:	20002534 	.word	0x20002534
   13df4:	0002c6d0 	.word	0x0002c6d0
   13df8:	0002c610 	.word	0x0002c610
   13dfc:	0002d03c 	.word	0x0002d03c

00013e00 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
   13e00:	b530      	push	{r4, r5, lr}
   13e02:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   13e04:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
   13e06:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
   13e08:	22a1      	movs	r2, #161	; 0xa1
   13e0a:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
   13e0e:	2220      	movs	r2, #32
   13e10:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
   13e14:	2400      	movs	r4, #0
   13e16:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
   13e1a:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
   13e1e:	2202      	movs	r2, #2
   13e20:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
   13e24:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
   13e28:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
   13e2c:	6a18      	ldr	r0, [r3, #32]
   13e2e:	4623      	mov	r3, r4
   13e30:	220a      	movs	r2, #10
   13e32:	a901      	add	r1, sp, #4
   13e34:	7900      	ldrb	r0, [r0, #4]
   13e36:	f7ff f85f 	bl	12ef8 <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
   13e3a:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
   13e3e:	b94b      	cbnz	r3, 13e54 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
   13e40:	2001      	movs	r0, #1
   13e42:	f018 f925 	bl	2c090 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
   13e46:	3401      	adds	r4, #1
   13e48:	4b04      	ldr	r3, [pc, #16]	; (13e5c <cdc_acm_send_notification+0x5c>)
   13e4a:	429c      	cmp	r4, r3
   13e4c:	d9f5      	bls.n	13e3a <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
   13e4e:	f06f 0004 	mvn.w	r0, #4
   13e52:	e000      	b.n	13e56 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
   13e54:	2000      	movs	r0, #0
}
   13e56:	b005      	add	sp, #20
   13e58:	bd30      	pop	{r4, r5, pc}
   13e5a:	bf00      	nop
   13e5c:	000186a0 	.word	0x000186a0

00013e60 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
   13e60:	b510      	push	{r4, lr}
   13e62:	b082      	sub	sp, #8
   13e64:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
   13e68:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
   13e6a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13e6e:	b113      	cbz	r3, 13e76 <cdc_acm_poll_out+0x16>
   13e70:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
   13e74:	b18b      	cbz	r3, 13e9a <cdc_acm_poll_out+0x3a>
   13e76:	4b28      	ldr	r3, [pc, #160]	; (13f18 <cdc_acm_poll_out+0xb8>)
   13e78:	4a28      	ldr	r2, [pc, #160]	; (13f1c <cdc_acm_poll_out+0xbc>)
   13e7a:	1a9b      	subs	r3, r3, r2
   13e7c:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
   13e7e:	f04f 0100 	mov.w	r1, #0
   13e82:	2203      	movs	r2, #3
   13e84:	f362 0102 	bfi	r1, r2, #0, #3
   13e88:	f36f 01c5 	bfc	r1, #3, #3
   13e8c:	f363 118f 	bfi	r1, r3, #6, #10
   13e90:	4823      	ldr	r0, [pc, #140]	; (13f20 <cdc_acm_poll_out+0xc0>)
   13e92:	f7fe f8cb 	bl	1202c <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
   13e96:	b002      	add	sp, #8
   13e98:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
   13e9a:	2300      	movs	r3, #0
   13e9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   13ea0:	2201      	movs	r2, #1
   13ea2:	f10d 0107 	add.w	r1, sp, #7
   13ea6:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13ea8:	f012 fd12 	bl	268d0 <ring_buf_put>
   13eac:	b9e0      	cbnz	r0, 13ee8 <cdc_acm_poll_out+0x88>
   13eae:	4b1a      	ldr	r3, [pc, #104]	; (13f18 <cdc_acm_poll_out+0xb8>)
   13eb0:	4a1a      	ldr	r2, [pc, #104]	; (13f1c <cdc_acm_poll_out+0xbc>)
   13eb2:	1a9b      	subs	r3, r3, r2
   13eb4:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
   13eb6:	f04f 0100 	mov.w	r1, #0
   13eba:	2203      	movs	r2, #3
   13ebc:	f362 0102 	bfi	r1, r2, #0, #3
   13ec0:	f36f 01c5 	bfc	r1, #3, #3
   13ec4:	f363 118f 	bfi	r1, r3, #6, #10
   13ec8:	4816      	ldr	r0, [pc, #88]	; (13f24 <cdc_acm_poll_out+0xc4>)
   13eca:	f7fe f8af 	bl	1202c <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   13ece:	2201      	movs	r2, #1
   13ed0:	2100      	movs	r1, #0
   13ed2:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13ed4:	f012 fd66 	bl	269a4 <ring_buf_get>
   13ed8:	b160      	cbz	r0, 13ef4 <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
   13eda:	2201      	movs	r2, #1
   13edc:	f10d 0107 	add.w	r1, sp, #7
   13ee0:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13ee2:	f012 fcf5 	bl	268d0 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
   13ee6:	b128      	cbz	r0, 13ef4 <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   13ee8:	f104 0118 	add.w	r1, r4, #24
   13eec:	480e      	ldr	r0, [pc, #56]	; (13f28 <cdc_acm_poll_out+0xc8>)
   13eee:	f017 fe01 	bl	2baf4 <k_work_submit_to_queue>
   13ef2:	e7d0      	b.n	13e96 <cdc_acm_poll_out+0x36>
   13ef4:	4b08      	ldr	r3, [pc, #32]	; (13f18 <cdc_acm_poll_out+0xb8>)
   13ef6:	4a09      	ldr	r2, [pc, #36]	; (13f1c <cdc_acm_poll_out+0xbc>)
   13ef8:	1a9b      	subs	r3, r3, r2
   13efa:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
   13efc:	f04f 0100 	mov.w	r1, #0
   13f00:	2201      	movs	r2, #1
   13f02:	f362 0102 	bfi	r1, r2, #0, #3
   13f06:	f36f 01c5 	bfc	r1, #3, #3
   13f0a:	f363 118f 	bfi	r1, r3, #6, #10
   13f0e:	4807      	ldr	r0, [pc, #28]	; (13f2c <cdc_acm_poll_out+0xcc>)
   13f10:	f7fe f88c 	bl	1202c <log_0>
			return;
   13f14:	e7bf      	b.n	13e96 <cdc_acm_poll_out+0x36>
   13f16:	bf00      	nop
   13f18:	0002c6d0 	.word	0x0002c6d0
   13f1c:	0002c610 	.word	0x0002c610
   13f20:	0002d060 	.word	0x0002d060
   13f24:	0002d080 	.word	0x0002d080
   13f28:	20001878 	.word	0x20001878
   13f2c:	0002d0a0 	.word	0x0002d0a0

00013f30 <cdc_acm_write_cb>:
{
   13f30:	b510      	push	{r4, lr}
   13f32:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
   13f34:	2301      	movs	r3, #1
   13f36:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
   13f3a:	6813      	ldr	r3, [r2, #0]
   13f3c:	b113      	cbz	r3, 13f44 <cdc_acm_write_cb+0x14>
   13f3e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
   13f42:	b923      	cbnz	r3, 13f4e <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
   13f44:	6f20      	ldr	r0, [r4, #112]	; 0x70
   13f46:	f012 fc75 	bl	26834 <ring_buf_is_empty>
   13f4a:	b130      	cbz	r0, 13f5a <cdc_acm_write_cb+0x2a>
}
   13f4c:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
   13f4e:	f102 0108 	add.w	r1, r2, #8
   13f52:	4805      	ldr	r0, [pc, #20]	; (13f68 <cdc_acm_write_cb+0x38>)
   13f54:	f017 fdce 	bl	2baf4 <k_work_submit_to_queue>
   13f58:	e7f4      	b.n	13f44 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
   13f5a:	f104 0118 	add.w	r1, r4, #24
   13f5e:	4802      	ldr	r0, [pc, #8]	; (13f68 <cdc_acm_write_cb+0x38>)
   13f60:	f017 fdc8 	bl	2baf4 <k_work_submit_to_queue>
   13f64:	e7f2      	b.n	13f4c <cdc_acm_write_cb+0x1c>
   13f66:	bf00      	nop
   13f68:	20001878 	.word	0x20001878

00013f6c <cdc_acm_init>:
{
   13f6c:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   13f6e:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
   13f70:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
   13f74:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
   13f78:	2200      	movs	r2, #0
   13f7a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   13f7e:	4a0b      	ldr	r2, [pc, #44]	; (13fac <cdc_acm_init+0x40>)
   13f80:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13f82:	b172      	cbz	r2, 13fa2 <cdc_acm_init+0x36>
	parent->next = child;
   13f84:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13f86:	4a09      	ldr	r2, [pc, #36]	; (13fac <cdc_acm_init+0x40>)
   13f88:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
   13f8a:	4909      	ldr	r1, [pc, #36]	; (13fb0 <cdc_acm_init+0x44>)
   13f8c:	f104 0008 	add.w	r0, r4, #8
   13f90:	f017 fdaa 	bl	2bae8 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
   13f94:	4907      	ldr	r1, [pc, #28]	; (13fb4 <cdc_acm_init+0x48>)
   13f96:	f104 0018 	add.w	r0, r4, #24
   13f9a:	f017 fda5 	bl	2bae8 <k_work_init>
}
   13f9e:	2000      	movs	r0, #0
   13fa0:	bd10      	pop	{r4, pc}
   13fa2:	4a02      	ldr	r2, [pc, #8]	; (13fac <cdc_acm_init+0x40>)
   13fa4:	6053      	str	r3, [r2, #4]
	list->head = node;
   13fa6:	6013      	str	r3, [r2, #0]
}
   13fa8:	e7ef      	b.n	13f8a <cdc_acm_init+0x1e>
   13faa:	bf00      	nop
   13fac:	20002534 	.word	0x20002534
   13fb0:	00027427 	.word	0x00027427
   13fb4:	00013fb9 	.word	0x00013fb9

00013fb8 <tx_work_handler>:
{
   13fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fba:	b085      	sub	sp, #20
   13fbc:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
   13fbe:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
   13fc2:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
   13fc4:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
   13fc6:	6a1b      	ldr	r3, [r3, #32]
   13fc8:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
   13fca:	4628      	mov	r0, r5
   13fcc:	f013 fa13 	bl	273f6 <usb_transfer_is_busy>
   13fd0:	b108      	cbz	r0, 13fd6 <tx_work_handler+0x1e>
}
   13fd2:	b005      	add	sp, #20
   13fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
   13fd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   13fda:	a903      	add	r1, sp, #12
   13fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13fde:	f012 fc97 	bl	26910 <ring_buf_get_claim>
	if (!len) {
   13fe2:	4606      	mov	r6, r0
   13fe4:	2800      	cmp	r0, #0
   13fe6:	d0f4      	beq.n	13fd2 <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
   13fe8:	f010 0f3f 	tst.w	r0, #63	; 0x3f
   13fec:	d100      	bne.n	13ff0 <tx_work_handler+0x38>
		len -= 1;
   13fee:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
   13ff0:	9701      	str	r7, [sp, #4]
   13ff2:	4b06      	ldr	r3, [pc, #24]	; (1400c <tx_work_handler+0x54>)
   13ff4:	9300      	str	r3, [sp, #0]
   13ff6:	2302      	movs	r3, #2
   13ff8:	4632      	mov	r2, r6
   13ffa:	9903      	ldr	r1, [sp, #12]
   13ffc:	4628      	mov	r0, r5
   13ffe:	f7ff fbd3 	bl	137a8 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
   14002:	4631      	mov	r1, r6
   14004:	6da0      	ldr	r0, [r4, #88]	; 0x58
   14006:	f012 fcaf 	bl	26968 <ring_buf_get_finish>
   1400a:	e7e2      	b.n	13fd2 <tx_work_handler+0x1a>
   1400c:	00013f31 	.word	0x00013f31

00014010 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
   14010:	b530      	push	{r4, r5, lr}
   14012:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
   14014:	4d08      	ldr	r5, [pc, #32]	; (14038 <z_usb_work_q_init+0x28>)
   14016:	2400      	movs	r4, #0
   14018:	9400      	str	r4, [sp, #0]
   1401a:	f04f 33ff 	mov.w	r3, #4294967295
   1401e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14022:	4906      	ldr	r1, [pc, #24]	; (1403c <z_usb_work_q_init+0x2c>)
   14024:	4628      	mov	r0, r5
   14026:	f00d fffd 	bl	22024 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1402a:	4905      	ldr	r1, [pc, #20]	; (14040 <z_usb_work_q_init+0x30>)
   1402c:	4628      	mov	r0, r5
   1402e:	f00d fc39 	bl	218a4 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
   14032:	4620      	mov	r0, r4
   14034:	b003      	add	sp, #12
   14036:	bd30      	pop	{r4, r5, pc}
   14038:	20001878 	.word	0x20001878
   1403c:	20004c40 	.word	0x20004c40
   14040:	0002d124 	.word	0x0002d124

00014044 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   14044:	4b1b      	ldr	r3, [pc, #108]	; (140b4 <pm_system_resume+0x70>)
   14046:	681b      	ldr	r3, [r3, #0]
   14048:	2b00      	cmp	r3, #0
   1404a:	d132      	bne.n	140b2 <pm_system_resume+0x6e>
{
   1404c:	b530      	push	{r4, r5, lr}
   1404e:	b085      	sub	sp, #20
		post_ops_done = 1;
   14050:	4b18      	ldr	r3, [pc, #96]	; (140b4 <pm_system_resume+0x70>)
   14052:	2201      	movs	r2, #1
   14054:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
   14056:	4b18      	ldr	r3, [pc, #96]	; (140b8 <pm_system_resume+0x74>)
   14058:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1405c:	ab04      	add	r3, sp, #16
   1405e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   14062:	4b16      	ldr	r3, [pc, #88]	; (140bc <pm_system_resume+0x78>)
   14064:	b163      	cbz	r3, 14080 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
   14066:	f013 fe4a 	bl	27cfe <pm_power_state_exit_post_ops>
   1406a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1406e:	f3ef 8511 	mrs	r5, BASEPRI
   14072:	f383 8812 	msr	BASEPRI_MAX, r3
   14076:	f3bf 8f6f 	isb	sy
	return list->head;
   1407a:	4b11      	ldr	r3, [pc, #68]	; (140c0 <pm_system_resume+0x7c>)
   1407c:	681c      	ldr	r4, [r3, #0]
   1407e:	e00a      	b.n	14096 <pm_system_resume+0x52>
	__asm__ volatile(
   14080:	2300      	movs	r3, #0
   14082:	f383 8811 	msr	BASEPRI, r3
   14086:	f3bf 8f6f 	isb	sy
}
   1408a:	e7ee      	b.n	1406a <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1408c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1408e:	b10c      	cbz	r4, 14094 <pm_system_resume+0x50>
	return node->next;
   14090:	6823      	ldr	r3, [r4, #0]
   14092:	b143      	cbz	r3, 140a6 <pm_system_resume+0x62>
{
   14094:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14096:	b134      	cbz	r4, 140a6 <pm_system_resume+0x62>
			callback = notifier->state_exit;
   14098:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
   1409a:	2b00      	cmp	r3, #0
   1409c:	d0f6      	beq.n	1408c <pm_system_resume+0x48>
			callback(z_power_state.state);
   1409e:	4a06      	ldr	r2, [pc, #24]	; (140b8 <pm_system_resume+0x74>)
   140a0:	7810      	ldrb	r0, [r2, #0]
   140a2:	4798      	blx	r3
   140a4:	e7f2      	b.n	1408c <pm_system_resume+0x48>
	__asm__ volatile(
   140a6:	f385 8811 	msr	BASEPRI, r5
   140aa:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
   140ae:	b005      	add	sp, #20
   140b0:	bd30      	pop	{r4, r5, pc}
   140b2:	4770      	bx	lr
   140b4:	20000534 	.word	0x20000534
   140b8:	20002544 	.word	0x20002544
   140bc:	00027cff 	.word	0x00027cff
   140c0:	2000253c 	.word	0x2000253c

000140c4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   140c4:	b570      	push	{r4, r5, r6, lr}
   140c6:	b088      	sub	sp, #32
   140c8:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   140ca:	4c2a      	ldr	r4, [pc, #168]	; (14174 <pm_system_suspend+0xb0>)
   140cc:	466d      	mov	r5, sp
   140ce:	4601      	mov	r1, r0
   140d0:	4628      	mov	r0, r5
   140d2:	f013 fad4 	bl	2767e <pm_policy_next_state>
   140d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   140da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   140de:	7820      	ldrb	r0, [r4, #0]
   140e0:	2800      	cmp	r0, #0
   140e2:	d045      	beq.n	14170 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   140e4:	4b24      	ldr	r3, [pc, #144]	; (14178 <pm_system_suspend+0xb4>)
   140e6:	2200      	movs	r2, #0
   140e8:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   140ea:	f1b6 3fff 	cmp.w	r6, #4294967295
   140ee:	d10c      	bne.n	1410a <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   140f0:	f00e f864 	bl	221bc <k_sched_lock>
	__asm__ volatile(
   140f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   140f8:	f3ef 8511 	mrs	r5, BASEPRI
   140fc:	f383 8812 	msr	BASEPRI_MAX, r3
   14100:	f3bf 8f6f 	isb	sy
	return list->head;
   14104:	4b1d      	ldr	r3, [pc, #116]	; (1417c <pm_system_suspend+0xb8>)
   14106:	681c      	ldr	r4, [r3, #0]
   14108:	e016      	b.n	14138 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
   1410a:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   1410c:	0c59      	lsrs	r1, r3, #17
   1410e:	03d8      	lsls	r0, r3, #15
   14110:	4c1b      	ldr	r4, [pc, #108]	; (14180 <pm_system_suspend+0xbc>)
   14112:	4a1c      	ldr	r2, [pc, #112]	; (14184 <pm_system_suspend+0xc0>)
   14114:	2300      	movs	r3, #0
   14116:	1900      	adds	r0, r0, r4
   14118:	f04f 0400 	mov.w	r4, #0
   1411c:	eb44 0101 	adc.w	r1, r4, r1
   14120:	f7ec ffee 	bl	1100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
   14124:	2101      	movs	r1, #1
   14126:	1a30      	subs	r0, r6, r0
   14128:	f017 ff83 	bl	2c032 <z_set_timeout_expiry>
   1412c:	e7e0      	b.n	140f0 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1412e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   14130:	b10c      	cbz	r4, 14136 <pm_system_suspend+0x72>
	return node->next;
   14132:	6823      	ldr	r3, [r4, #0]
   14134:	b143      	cbz	r3, 14148 <pm_system_suspend+0x84>
{
   14136:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   14138:	b134      	cbz	r4, 14148 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
   1413a:	6863      	ldr	r3, [r4, #4]
		if (callback) {
   1413c:	2b00      	cmp	r3, #0
   1413e:	d0f6      	beq.n	1412e <pm_system_suspend+0x6a>
			callback(z_power_state.state);
   14140:	4a0c      	ldr	r2, [pc, #48]	; (14174 <pm_system_suspend+0xb0>)
   14142:	7810      	ldrb	r0, [r2, #0]
   14144:	4798      	blx	r3
   14146:	e7f2      	b.n	1412e <pm_system_suspend+0x6a>
	__asm__ volatile(
   14148:	f385 8811 	msr	BASEPRI, r5
   1414c:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
   14150:	4b08      	ldr	r3, [pc, #32]	; (14174 <pm_system_suspend+0xb0>)
   14152:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   14156:	ab08      	add	r3, sp, #32
   14158:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   1415c:	4b0a      	ldr	r3, [pc, #40]	; (14188 <pm_system_suspend+0xc4>)
   1415e:	b10b      	cbz	r3, 14164 <pm_system_suspend+0xa0>
		pm_power_state_set(info);
   14160:	f013 fdba 	bl	27cd8 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   14164:	f7ff ff6e 	bl	14044 <pm_system_resume>
	k_sched_unlock();
   14168:	f00e fa26 	bl	225b8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   1416c:	4b01      	ldr	r3, [pc, #4]	; (14174 <pm_system_suspend+0xb0>)
   1416e:	7818      	ldrb	r0, [r3, #0]
}
   14170:	b008      	add	sp, #32
   14172:	bd70      	pop	{r4, r5, r6, pc}
   14174:	20002544 	.word	0x20002544
   14178:	20000534 	.word	0x20000534
   1417c:	2000253c 	.word	0x2000253c
   14180:	000f423f 	.word	0x000f423f
   14184:	000f4240 	.word	0x000f4240
   14188:	00027cd9 	.word	0x00027cd9

0001418c <notify_filter_matched>:
}

static void notify_filter_matched(struct bt_scan_device_info *device_info,
				  struct bt_scan_filter_match *filter_match,
				  bool connectable)
{
   1418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1418e:	4605      	mov	r5, r0
   14190:	460e      	mov	r6, r1
   14192:	4617      	mov	r7, r2
	return list->head;
   14194:	4b0b      	ldr	r3, [pc, #44]	; (141c4 <notify_filter_matched+0x38>)
   14196:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14198:	b134      	cbz	r4, 141a8 <notify_filter_matched+0x1c>
   1419a:	3c04      	subs	r4, #4
   1419c:	e004      	b.n	141a8 <notify_filter_matched+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1419e:	1d23      	adds	r3, r4, #4
   141a0:	d00c      	beq.n	141bc <notify_filter_matched+0x30>
	return node->next;
   141a2:	6864      	ldr	r4, [r4, #4]
   141a4:	b164      	cbz	r4, 141c0 <notify_filter_matched+0x34>
   141a6:	3c04      	subs	r4, #4
   141a8:	b154      	cbz	r4, 141c0 <notify_filter_matched+0x34>
		if (cb->cb_addr->filter_match) {
   141aa:	6823      	ldr	r3, [r4, #0]
   141ac:	681b      	ldr	r3, [r3, #0]
   141ae:	2b00      	cmp	r3, #0
   141b0:	d0f5      	beq.n	1419e <notify_filter_matched+0x12>
			cb->cb_addr->filter_match(device_info, filter_match,
   141b2:	463a      	mov	r2, r7
   141b4:	4631      	mov	r1, r6
   141b6:	4628      	mov	r0, r5
   141b8:	4798      	blx	r3
   141ba:	e7f0      	b.n	1419e <notify_filter_matched+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   141bc:	461c      	mov	r4, r3
   141be:	e7f3      	b.n	141a8 <notify_filter_matched+0x1c>
						  connectable);
		}
	}
}
   141c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   141c2:	bf00      	nop
   141c4:	200025e4 	.word	0x200025e4

000141c8 <notify_filter_no_match>:

static void notify_filter_no_match(struct bt_scan_device_info *device_info,
				   bool connectable)
{
   141c8:	b570      	push	{r4, r5, r6, lr}
   141ca:	4605      	mov	r5, r0
   141cc:	460e      	mov	r6, r1
	return list->head;
   141ce:	4b0b      	ldr	r3, [pc, #44]	; (141fc <notify_filter_no_match+0x34>)
   141d0:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   141d2:	b134      	cbz	r4, 141e2 <notify_filter_no_match+0x1a>
   141d4:	3c04      	subs	r4, #4
   141d6:	e004      	b.n	141e2 <notify_filter_no_match+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   141d8:	1d23      	adds	r3, r4, #4
   141da:	d00b      	beq.n	141f4 <notify_filter_no_match+0x2c>
	return node->next;
   141dc:	6864      	ldr	r4, [r4, #4]
   141de:	b15c      	cbz	r4, 141f8 <notify_filter_no_match+0x30>
   141e0:	3c04      	subs	r4, #4
   141e2:	b14c      	cbz	r4, 141f8 <notify_filter_no_match+0x30>
		if (cb->cb_addr->filter_no_match) {
   141e4:	6823      	ldr	r3, [r4, #0]
   141e6:	685b      	ldr	r3, [r3, #4]
   141e8:	2b00      	cmp	r3, #0
   141ea:	d0f5      	beq.n	141d8 <notify_filter_no_match+0x10>
			cb->cb_addr->filter_no_match(device_info, connectable);
   141ec:	4631      	mov	r1, r6
   141ee:	4628      	mov	r0, r5
   141f0:	4798      	blx	r3
   141f2:	e7f1      	b.n	141d8 <notify_filter_no_match+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   141f4:	461c      	mov	r4, r3
   141f6:	e7f4      	b.n	141e2 <notify_filter_no_match+0x1a>
		}
	}
}
   141f8:	bd70      	pop	{r4, r5, r6, pc}
   141fa:	bf00      	nop
   141fc:	200025e4 	.word	0x200025e4

00014200 <notify_connecting>:

static void notify_connecting(struct bt_scan_device_info *device_info,
			      struct bt_conn *conn)
{
   14200:	b570      	push	{r4, r5, r6, lr}
   14202:	4605      	mov	r5, r0
   14204:	460e      	mov	r6, r1
	return list->head;
   14206:	4b0b      	ldr	r3, [pc, #44]	; (14234 <notify_connecting+0x34>)
   14208:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1420a:	b134      	cbz	r4, 1421a <notify_connecting+0x1a>
   1420c:	3c04      	subs	r4, #4
   1420e:	e004      	b.n	1421a <notify_connecting+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14210:	1d23      	adds	r3, r4, #4
   14212:	d00b      	beq.n	1422c <notify_connecting+0x2c>
	return node->next;
   14214:	6864      	ldr	r4, [r4, #4]
   14216:	b15c      	cbz	r4, 14230 <notify_connecting+0x30>
   14218:	3c04      	subs	r4, #4
   1421a:	b14c      	cbz	r4, 14230 <notify_connecting+0x30>
		if (cb->cb_addr->connecting) {
   1421c:	6823      	ldr	r3, [r4, #0]
   1421e:	68db      	ldr	r3, [r3, #12]
   14220:	2b00      	cmp	r3, #0
   14222:	d0f5      	beq.n	14210 <notify_connecting+0x10>
			cb->cb_addr->connecting(device_info, conn);
   14224:	4631      	mov	r1, r6
   14226:	4628      	mov	r0, r5
   14228:	4798      	blx	r3
   1422a:	e7f1      	b.n	14210 <notify_connecting+0x10>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1422c:	461c      	mov	r4, r3
   1422e:	e7f4      	b.n	1421a <notify_connecting+0x1a>
		}
	}
}
   14230:	bd70      	pop	{r4, r5, r6, pc}
   14232:	bf00      	nop
   14234:	200025e4 	.word	0x200025e4

00014238 <notify_connecting_error>:

static void notify_connecting_error(struct bt_scan_device_info *device_info)
{
   14238:	b538      	push	{r3, r4, r5, lr}
   1423a:	4605      	mov	r5, r0
	return list->head;
   1423c:	4b0a      	ldr	r3, [pc, #40]	; (14268 <notify_connecting_error+0x30>)
   1423e:	681c      	ldr	r4, [r3, #0]
	struct bt_scan_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14240:	b134      	cbz	r4, 14250 <notify_connecting_error+0x18>
   14242:	3c04      	subs	r4, #4
   14244:	e004      	b.n	14250 <notify_connecting_error+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   14246:	1d23      	adds	r3, r4, #4
   14248:	d00a      	beq.n	14260 <notify_connecting_error+0x28>
	return node->next;
   1424a:	6864      	ldr	r4, [r4, #4]
   1424c:	b154      	cbz	r4, 14264 <notify_connecting_error+0x2c>
   1424e:	3c04      	subs	r4, #4
   14250:	b144      	cbz	r4, 14264 <notify_connecting_error+0x2c>
		if (cb->cb_addr->connecting_error) {
   14252:	6823      	ldr	r3, [r4, #0]
   14254:	689b      	ldr	r3, [r3, #8]
   14256:	2b00      	cmp	r3, #0
   14258:	d0f5      	beq.n	14246 <notify_connecting_error+0xe>
			cb->cb_addr->connecting_error(device_info);
   1425a:	4628      	mov	r0, r5
   1425c:	4798      	blx	r3
   1425e:	e7f2      	b.n	14246 <notify_connecting_error+0xe>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   14260:	461c      	mov	r4, r3
   14262:	e7f5      	b.n	14250 <notify_connecting_error+0x18>
		}
	}
}
   14264:	bd38      	pop	{r3, r4, r5, pc}
   14266:	bf00      	nop
   14268:	200025e4 	.word	0x200025e4

0001426c <is_uuid_filter_enabled>:
}

static bool is_uuid_filter_enabled(void)
{
	return CONFIG_BT_SCAN_UUID_CNT && bt_scan.scan_filters.uuid.enabled;
}
   1426c:	4b01      	ldr	r3, [pc, #4]	; (14274 <is_uuid_filter_enabled+0x8>)
   1426e:	f893 0069 	ldrb.w	r0, [r3, #105]	; 0x69
   14272:	4770      	bx	lr
   14274:	20002550 	.word	0x20002550

00014278 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   14278:	b470      	push	{r4, r5, r6}
   1427a:	b087      	sub	sp, #28
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   1427c:	ac01      	add	r4, sp, #4
   1427e:	4d06      	ldr	r5, [pc, #24]	; (14298 <scan_default_param_set+0x20>)
   14280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14282:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   14284:	4c05      	ldr	r4, [pc, #20]	; (1429c <scan_default_param_set+0x24>)
   14286:	ae01      	add	r6, sp, #4
   14288:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1428a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1428c:	682b      	ldr	r3, [r5, #0]
   1428e:	6023      	str	r3, [r4, #0]
}
   14290:	b007      	add	sp, #28
   14292:	bc70      	pop	{r4, r5, r6}
   14294:	4770      	bx	lr
   14296:	bf00      	nop
   14298:	0002c7a0 	.word	0x0002c7a0
   1429c:	200025c8 	.word	0x200025c8

000142a0 <scan_default_conn_param_set>:
	.disconnected = disconnected
};
#endif /* CONFIG_BT_SCAN_CONN_ATTEMPTS_FILTER */

static void scan_default_conn_param_set(void)
{
   142a0:	b082      	sub	sp, #8
	struct bt_le_conn_param *conn_param = BT_LE_CONN_PARAM_DEFAULT;
   142a2:	466b      	mov	r3, sp
   142a4:	4a04      	ldr	r2, [pc, #16]	; (142b8 <scan_default_conn_param_set+0x18>)
   142a6:	e892 0003 	ldmia.w	r2, {r0, r1}
   142aa:	e883 0003 	stmia.w	r3, {r0, r1}

	/* Set default Connection params. */
	bt_scan.conn_param = *conn_param;
   142ae:	4a03      	ldr	r2, [pc, #12]	; (142bc <scan_default_conn_param_set+0x1c>)
   142b0:	e882 0003 	stmia.w	r2, {r0, r1}
}
   142b4:	b002      	add	sp, #8
   142b6:	4770      	bx	lr
   142b8:	0002c7b4 	.word	0x0002c7b4
   142bc:	200025dc 	.word	0x200025dc

000142c0 <scan_uuid_filter_add>:
{
   142c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   142c2:	4b29      	ldr	r3, [pc, #164]	; (14368 <scan_uuid_filter_add+0xa8>)
   142c4:	f893 5068 	ldrb.w	r5, [r3, #104]	; 0x68
	if (counter >= CONFIG_BT_SCAN_UUID_CNT) {
   142c8:	2d03      	cmp	r5, #3
   142ca:	d84a      	bhi.n	14362 <scan_uuid_filter_add+0xa2>
   142cc:	4606      	mov	r6, r0
	for (size_t i = 0; i < counter; i++) {
   142ce:	2400      	movs	r4, #0
   142d0:	42a5      	cmp	r5, r4
   142d2:	d90b      	bls.n	142ec <scan_uuid_filter_add+0x2c>
		if (bt_uuid_cmp(uuid_filter[i].uuid, uuid) == 0) {
   142d4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   142d8:	4631      	mov	r1, r6
   142da:	4a24      	ldr	r2, [pc, #144]	; (1436c <scan_uuid_filter_add+0xac>)
   142dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   142e0:	f013 fd2b 	bl	27d3a <bt_uuid_cmp>
   142e4:	4603      	mov	r3, r0
   142e6:	b1d8      	cbz	r0, 14320 <scan_uuid_filter_add+0x60>
	for (size_t i = 0; i < counter; i++) {
   142e8:	3401      	adds	r4, #1
   142ea:	e7f1      	b.n	142d0 <scan_uuid_filter_add+0x10>
	switch (uuid->type) {
   142ec:	7832      	ldrb	r2, [r6, #0]
   142ee:	2a01      	cmp	r2, #1
   142f0:	d018      	beq.n	14324 <scan_uuid_filter_add+0x64>
   142f2:	2a02      	cmp	r2, #2
   142f4:	d023      	beq.n	1433e <scan_uuid_filter_add+0x7e>
   142f6:	b112      	cbz	r2, 142fe <scan_uuid_filter_add+0x3e>
   142f8:	f06f 0315 	mvn.w	r3, #21
   142fc:	e010      	b.n	14320 <scan_uuid_filter_add+0x60>
		uuid_filter[counter].uuid_data.uuid_16 = *uuid_16;
   142fe:	4a1b      	ldr	r2, [pc, #108]	; (1436c <scan_uuid_filter_add+0xac>)
   14300:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   14304:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   14308:	1d0c      	adds	r4, r1, #4
   1430a:	6830      	ldr	r0, [r6, #0]
   1430c:	6048      	str	r0, [r1, #4]
		uuid_filter[counter].uuid =
   1430e:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
	bt_scan.scan_filters.uuid.cnt++;
   14312:	4a15      	ldr	r2, [pc, #84]	; (14368 <scan_uuid_filter_add+0xa8>)
   14314:	f892 3068 	ldrb.w	r3, [r2, #104]	; 0x68
   14318:	3301      	adds	r3, #1
   1431a:	f882 3068 	strb.w	r3, [r2, #104]	; 0x68
	return 0;
   1431e:	2300      	movs	r3, #0
}
   14320:	4618      	mov	r0, r3
   14322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uuid_filter[counter].uuid_data.uuid_32 = *uuid_32;
   14324:	4c11      	ldr	r4, [pc, #68]	; (1436c <scan_uuid_filter_add+0xac>)
   14326:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1432a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1432e:	3204      	adds	r2, #4
   14330:	e896 0003 	ldmia.w	r6, {r0, r1}
   14334:	e882 0003 	stmia.w	r2, {r0, r1}
		uuid_filter[counter].uuid =
   14338:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
		break;
   1433c:	e7e9      	b.n	14312 <scan_uuid_filter_add+0x52>
		uuid_filter[counter].uuid_data.uuid_128 = *uuid_128;
   1433e:	f8df c02c 	ldr.w	ip, [pc, #44]	; 1436c <scan_uuid_filter_add+0xac>
   14342:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   14346:	eb0c 07c4 	add.w	r7, ip, r4, lsl #3
   1434a:	1d3d      	adds	r5, r7, #4
   1434c:	6830      	ldr	r0, [r6, #0]
   1434e:	6871      	ldr	r1, [r6, #4]
   14350:	68b2      	ldr	r2, [r6, #8]
   14352:	68f3      	ldr	r3, [r6, #12]
   14354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14356:	7c33      	ldrb	r3, [r6, #16]
   14358:	702b      	strb	r3, [r5, #0]
				(struct bt_uuid *)&uuid_filter[counter].uuid_data.uuid_128;
   1435a:	3704      	adds	r7, #4
		uuid_filter[counter].uuid =
   1435c:	f84c 7034 	str.w	r7, [ip, r4, lsl #3]
		break;
   14360:	e7d7      	b.n	14312 <scan_uuid_filter_add+0x52>
		return -ENOMEM;
   14362:	f06f 030b 	mvn.w	r3, #11
   14366:	e7db      	b.n	14320 <scan_uuid_filter_add+0x60>
   14368:	20002550 	.word	0x20002550
   1436c:	20002558 	.word	0x20002558

00014370 <adv_uuid_compare>:
{
   14370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14374:	4607      	mov	r7, r0
   14376:	4688      	mov	r8, r1
   14378:	4693      	mov	fp, r2
	const bool all_filters_mode = bt_scan.scan_filters.all_mode;
   1437a:	4b1c      	ldr	r3, [pc, #112]	; (143ec <adv_uuid_compare+0x7c>)
   1437c:	f893 6070 	ldrb.w	r6, [r3, #112]	; 0x70
	const uint8_t counter = bt_scan.scan_filters.uuid.cnt;
   14380:	f893 9068 	ldrb.w	r9, [r3, #104]	; 0x68
	uint8_t data_len = data->data_len;
   14384:	f890 a001 	ldrb.w	sl, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   14388:	2400      	movs	r4, #0
	uint8_t uuid_match_cnt = 0;
   1438a:	4625      	mov	r5, r4
	for (size_t i = 0; i < counter; i++) {
   1438c:	e001      	b.n	14392 <adv_uuid_compare+0x22>
		} else if (all_filters_mode) {
   1438e:	b9f6      	cbnz	r6, 143ce <adv_uuid_compare+0x5e>
	for (size_t i = 0; i < counter; i++) {
   14390:	3401      	adds	r4, #1
   14392:	45a1      	cmp	r9, r4
   14394:	d91b      	bls.n	143ce <adv_uuid_compare+0x5e>
		if (find_uuid(data->data, data_len, uuid_type,
   14396:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1439a:	4a14      	ldr	r2, [pc, #80]	; (143ec <adv_uuid_compare+0x7c>)
   1439c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   143a0:	3308      	adds	r3, #8
   143a2:	4642      	mov	r2, r8
   143a4:	4651      	mov	r1, sl
   143a6:	6878      	ldr	r0, [r7, #4]
   143a8:	f013 f996 	bl	276d8 <find_uuid>
   143ac:	2800      	cmp	r0, #0
   143ae:	d0ee      	beq.n	1438e <adv_uuid_compare+0x1e>
				uuid_filter->uuid[i].uuid;
   143b0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   143b4:	4a0d      	ldr	r2, [pc, #52]	; (143ec <adv_uuid_compare+0x7c>)
   143b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   143ba:	689a      	ldr	r2, [r3, #8]
			control->filter_status.uuid.uuid[uuid_match_cnt] =
   143bc:	f105 030c 	add.w	r3, r5, #12
   143c0:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
   143c4:	609a      	str	r2, [r3, #8]
			uuid_match_cnt++;
   143c6:	3501      	adds	r5, #1
   143c8:	b2ed      	uxtb	r5, r5
			if (!all_filters_mode) {
   143ca:	2e00      	cmp	r6, #0
   143cc:	d1e0      	bne.n	14390 <adv_uuid_compare+0x20>
	control->filter_status.uuid.count = uuid_match_cnt;
   143ce:	f88b 5048 	strb.w	r5, [fp, #72]	; 0x48
	if ((all_filters_mode && (uuid_match_cnt == counter)) ||
   143d2:	b10e      	cbz	r6, 143d8 <adv_uuid_compare+0x68>
   143d4:	454d      	cmp	r5, r9
   143d6:	d003      	beq.n	143e0 <adv_uuid_compare+0x70>
   143d8:	b926      	cbnz	r6, 143e4 <adv_uuid_compare+0x74>
	    ((!all_filters_mode) && (uuid_match_cnt > 0))) {
   143da:	b125      	cbz	r5, 143e6 <adv_uuid_compare+0x76>
		return true;
   143dc:	2601      	movs	r6, #1
   143de:	e002      	b.n	143e6 <adv_uuid_compare+0x76>
   143e0:	2601      	movs	r6, #1
   143e2:	e000      	b.n	143e6 <adv_uuid_compare+0x76>
	return false;
   143e4:	2600      	movs	r6, #0
}
   143e6:	4630      	mov	r0, r6
   143e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ec:	20002550 	.word	0x20002550

000143f0 <adv_addr_compare>:
{
   143f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   143f4:	4606      	mov	r6, r0
   143f6:	4688      	mov	r8, r1
	uint8_t counter = bt_scan.scan_filters.addr.cnt;
   143f8:	4b0b      	ldr	r3, [pc, #44]	; (14428 <adv_addr_compare+0x38>)
   143fa:	791f      	ldrb	r7, [r3, #4]
	for (size_t i = 0; i < counter; i++) {
   143fc:	2400      	movs	r4, #0
   143fe:	42a7      	cmp	r7, r4
   14400:	d90f      	bls.n	14422 <adv_addr_compare+0x32>
		if (bt_addr_le_cmp(target_addr, &addr[i]) == 0) {
   14402:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
   14406:	4b09      	ldr	r3, [pc, #36]	; (1442c <adv_addr_compare+0x3c>)
   14408:	441d      	add	r5, r3
	return memcmp(a, b, sizeof(*a));
   1440a:	2207      	movs	r2, #7
   1440c:	4629      	mov	r1, r5
   1440e:	4630      	mov	r0, r6
   14410:	f013 fbf1 	bl	27bf6 <memcmp>
   14414:	b108      	cbz	r0, 1441a <adv_addr_compare+0x2a>
	for (size_t i = 0; i < counter; i++) {
   14416:	3401      	adds	r4, #1
   14418:	e7f1      	b.n	143fe <adv_addr_compare+0xe>
			control->filter_status.addr.addr = &addr[i];
   1441a:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			return true;
   1441e:	2001      	movs	r0, #1
   14420:	e000      	b.n	14424 <adv_addr_compare+0x34>
	return false;
   14422:	2000      	movs	r0, #0
}
   14424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14428:	20002550 	.word	0x20002550
   1442c:	20002554 	.word	0x20002554

00014430 <bt_scan_cb_register>:
	if (!cb) {
   14430:	b140      	cbz	r0, 14444 <bt_scan_cb_register+0x14>
	sys_slist_append(&callback_list, &cb->node);
   14432:	1d02      	adds	r2, r0, #4
	parent->next = child;
   14434:	2100      	movs	r1, #0
   14436:	6041      	str	r1, [r0, #4]
	return list->tail;
   14438:	4b05      	ldr	r3, [pc, #20]	; (14450 <bt_scan_cb_register+0x20>)
   1443a:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1443c:	b11b      	cbz	r3, 14446 <bt_scan_cb_register+0x16>
	parent->next = child;
   1443e:	601a      	str	r2, [r3, #0]
	list->tail = node;
   14440:	4b03      	ldr	r3, [pc, #12]	; (14450 <bt_scan_cb_register+0x20>)
   14442:	605a      	str	r2, [r3, #4]
}
   14444:	4770      	bx	lr
   14446:	4b02      	ldr	r3, [pc, #8]	; (14450 <bt_scan_cb_register+0x20>)
   14448:	605a      	str	r2, [r3, #4]
	list->head = node;
   1444a:	601a      	str	r2, [r3, #0]
}
   1444c:	4770      	bx	lr
   1444e:	bf00      	nop
   14450:	200025e4 	.word	0x200025e4

00014454 <bt_scan_filter_add>:

int bt_scan_filter_add(enum bt_scan_filter_type type,
		       const void *data)
{
   14454:	b538      	push	{r3, r4, r5, lr}
	struct bt_uuid *uuid;
	uint16_t appearance;
	struct bt_scan_manufacturer_data *manufacturer_data;
	int err = 0;

	if (!data) {
   14456:	b3a1      	cbz	r1, 144c2 <bt_scan_filter_add+0x6e>
   14458:	4604      	mov	r4, r0
   1445a:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1445c:	f04f 32ff 	mov.w	r2, #4294967295
   14460:	f04f 33ff 	mov.w	r3, #4294967295
   14464:	4818      	ldr	r0, [pc, #96]	; (144c8 <bt_scan_filter_add+0x74>)
   14466:	f00d fb01 	bl	21a6c <z_impl_k_mutex_lock>
		return -EINVAL;
	}

	k_mutex_lock(&scan_mutex, K_FOREVER);

	switch (type) {
   1446a:	2c05      	cmp	r4, #5
   1446c:	d826      	bhi.n	144bc <bt_scan_filter_add+0x68>
   1446e:	e8df f004 	tbb	[pc, r4]
   14472:	0c03      	.short	0x0c03
   14474:	201b1611 	.word	0x201b1611
	case BT_SCAN_FILTER_TYPE_NAME:
		name = (char *)data;
		err = scan_name_filter_add(name);
   14478:	4628      	mov	r0, r5
   1447a:	f013 f90c 	bl	27696 <scan_name_filter_add>
   1447e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   14480:	4811      	ldr	r0, [pc, #68]	; (144c8 <bt_scan_filter_add+0x74>)
   14482:	f00d fb7d 	bl	21b80 <z_impl_k_mutex_unlock>
	}

	k_mutex_unlock(&scan_mutex);

	return err;
}
   14486:	4620      	mov	r0, r4
   14488:	bd38      	pop	{r3, r4, r5, pc}
		err = scan_short_name_filter_add(short_name);
   1448a:	4628      	mov	r0, r5
   1448c:	f013 f906 	bl	2769c <scan_short_name_filter_add>
   14490:	4604      	mov	r4, r0
		break;
   14492:	e7f5      	b.n	14480 <bt_scan_filter_add+0x2c>
		err = scan_addr_filter_add(addr);
   14494:	4628      	mov	r0, r5
   14496:	f013 f8fb 	bl	27690 <scan_addr_filter_add>
   1449a:	4604      	mov	r4, r0
		break;
   1449c:	e7f0      	b.n	14480 <bt_scan_filter_add+0x2c>
		err = scan_uuid_filter_add(uuid);
   1449e:	4628      	mov	r0, r5
   144a0:	f7ff ff0e 	bl	142c0 <scan_uuid_filter_add>
   144a4:	4604      	mov	r4, r0
		break;
   144a6:	e7eb      	b.n	14480 <bt_scan_filter_add+0x2c>
		err = scan_appearance_filter_add(appearance);
   144a8:	8828      	ldrh	r0, [r5, #0]
   144aa:	f013 f8fa 	bl	276a2 <scan_appearance_filter_add>
   144ae:	4604      	mov	r4, r0
		break;
   144b0:	e7e6      	b.n	14480 <bt_scan_filter_add+0x2c>
		err = scan_manufacturer_data_filter_add(manufacturer_data);
   144b2:	4628      	mov	r0, r5
   144b4:	f013 f8f8 	bl	276a8 <scan_manufacturer_data_filter_add>
   144b8:	4604      	mov	r4, r0
		break;
   144ba:	e7e1      	b.n	14480 <bt_scan_filter_add+0x2c>
	k_mutex_lock(&scan_mutex, K_FOREVER);
   144bc:	f06f 0415 	mvn.w	r4, #21
   144c0:	e7de      	b.n	14480 <bt_scan_filter_add+0x2c>
		return -EINVAL;
   144c2:	f06f 0415 	mvn.w	r4, #21
   144c6:	e7de      	b.n	14486 <bt_scan_filter_add+0x32>
   144c8:	200007fc 	.word	0x200007fc

000144cc <bt_scan_filter_disable>:
}

void bt_scan_filter_disable(void)
{
	/* Disable all filters. */
	bt_scan.scan_filters.name.enabled = false;
   144cc:	4b05      	ldr	r3, [pc, #20]	; (144e4 <bt_scan_filter_disable+0x18>)
   144ce:	2200      	movs	r2, #0
   144d0:	705a      	strb	r2, [r3, #1]
	bt_scan.scan_filters.short_name.enabled = false;
   144d2:	70da      	strb	r2, [r3, #3]
	bt_scan.scan_filters.addr.enabled = false;
   144d4:	715a      	strb	r2, [r3, #5]
	bt_scan.scan_filters.uuid.enabled = false;
   144d6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	bt_scan.scan_filters.appearance.enabled = false;
   144da:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   144de:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
}
   144e2:	4770      	bx	lr
   144e4:	20002550 	.word	0x20002550

000144e8 <bt_scan_filter_enable>:

int bt_scan_filter_enable(uint8_t mode, bool match_all)
{
   144e8:	b538      	push	{r3, r4, r5, lr}
   144ea:	4604      	mov	r4, r0
   144ec:	460d      	mov	r5, r1
	/* Check if the mode is correct. */
	if (!check_filter_mode(mode)) {
   144ee:	f013 f8de 	bl	276ae <check_filter_mode>
   144f2:	b368      	cbz	r0, 14550 <bt_scan_filter_enable+0x68>
		return -EINVAL;
	}

	/* Disable filters. */
	bt_scan_filter_disable();
   144f4:	f7ff ffea 	bl	144cc <bt_scan_filter_disable>

	struct bt_scan_filters *filters = &bt_scan.scan_filters;

	/* Turn on the filters of your choice. */
	if (mode & BT_SCAN_ADDR_FILTER) {
   144f8:	f014 0f02 	tst.w	r4, #2
   144fc:	d002      	beq.n	14504 <bt_scan_filter_enable+0x1c>
		filters->addr.enabled = true;
   144fe:	4b16      	ldr	r3, [pc, #88]	; (14558 <bt_scan_filter_enable+0x70>)
   14500:	2201      	movs	r2, #1
   14502:	715a      	strb	r2, [r3, #5]
	}

	if (mode & BT_SCAN_NAME_FILTER) {
   14504:	f014 0f01 	tst.w	r4, #1
   14508:	d002      	beq.n	14510 <bt_scan_filter_enable+0x28>
		filters->name.enabled = true;
   1450a:	4b13      	ldr	r3, [pc, #76]	; (14558 <bt_scan_filter_enable+0x70>)
   1450c:	2201      	movs	r2, #1
   1450e:	705a      	strb	r2, [r3, #1]
	}

	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   14510:	f014 0f10 	tst.w	r4, #16
   14514:	d002      	beq.n	1451c <bt_scan_filter_enable+0x34>
		filters->short_name.enabled = true;
   14516:	4b10      	ldr	r3, [pc, #64]	; (14558 <bt_scan_filter_enable+0x70>)
   14518:	2201      	movs	r2, #1
   1451a:	70da      	strb	r2, [r3, #3]
	}

	if (mode & BT_SCAN_UUID_FILTER) {
   1451c:	f014 0f04 	tst.w	r4, #4
   14520:	d003      	beq.n	1452a <bt_scan_filter_enable+0x42>
		filters->uuid.enabled = true;
   14522:	4b0d      	ldr	r3, [pc, #52]	; (14558 <bt_scan_filter_enable+0x70>)
   14524:	2201      	movs	r2, #1
   14526:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	}

	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   1452a:	f014 0f08 	tst.w	r4, #8
   1452e:	d003      	beq.n	14538 <bt_scan_filter_enable+0x50>
		filters->appearance.enabled = true;
   14530:	4b09      	ldr	r3, [pc, #36]	; (14558 <bt_scan_filter_enable+0x70>)
   14532:	2201      	movs	r2, #1
   14534:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}

	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   14538:	f014 0f20 	tst.w	r4, #32
   1453c:	d003      	beq.n	14546 <bt_scan_filter_enable+0x5e>
		filters->manufacturer_data.enabled = true;
   1453e:	4b06      	ldr	r3, [pc, #24]	; (14558 <bt_scan_filter_enable+0x70>)
   14540:	2201      	movs	r2, #1
   14542:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	}

	/* Select the filter mode. */
	filters->all_mode = match_all;
   14546:	4b04      	ldr	r3, [pc, #16]	; (14558 <bt_scan_filter_enable+0x70>)
   14548:	f883 5070 	strb.w	r5, [r3, #112]	; 0x70

	return 0;
   1454c:	2000      	movs	r0, #0
}
   1454e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   14550:	f06f 0015 	mvn.w	r0, #21
   14554:	e7fb      	b.n	1454e <bt_scan_filter_enable+0x66>
   14556:	bf00      	nop
   14558:	20002550 	.word	0x20002550

0001455c <scan_connect_with_target>:
	if (!bt_scan.connect_if_match) {
   1455c:	4b12      	ldr	r3, [pc, #72]	; (145a8 <scan_connect_with_target+0x4c>)
   1455e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   14562:	b903      	cbnz	r3, 14566 <scan_connect_with_target+0xa>
   14564:	4770      	bx	lr
{
   14566:	b570      	push	{r4, r5, r6, lr}
   14568:	b086      	sub	sp, #24
   1456a:	4604      	mov	r4, r0
   1456c:	460d      	mov	r5, r1
	bt_scan_stop();
   1456e:	f013 f92d 	bl	277cc <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   14572:	ae02      	add	r6, sp, #8
   14574:	4b0d      	ldr	r3, [pc, #52]	; (145ac <scan_connect_with_target+0x50>)
   14576:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14578:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   1457c:	ab01      	add	r3, sp, #4
   1457e:	4a0c      	ldr	r2, [pc, #48]	; (145b0 <scan_connect_with_target+0x54>)
   14580:	4631      	mov	r1, r6
   14582:	4628      	mov	r0, r5
   14584:	f004 ffe0 	bl	19548 <bt_conn_le_create>
	if (err) {
   14588:	b128      	cbz	r0, 14596 <scan_connect_with_target+0x3a>
		notify_connecting_error(&control->device_info);
   1458a:	f104 0008 	add.w	r0, r4, #8
   1458e:	f7ff fe53 	bl	14238 <notify_connecting_error>
}
   14592:	b006      	add	sp, #24
   14594:	bd70      	pop	{r4, r5, r6, pc}
		notify_connecting(&control->device_info, conn);
   14596:	9901      	ldr	r1, [sp, #4]
   14598:	f104 0008 	add.w	r0, r4, #8
   1459c:	f7ff fe30 	bl	14200 <notify_connecting>
		bt_conn_unref(conn);
   145a0:	9801      	ldr	r0, [sp, #4]
   145a2:	f013 ff02 	bl	283aa <bt_conn_unref>
   145a6:	e7f4      	b.n	14592 <scan_connect_with_target+0x36>
   145a8:	20002550 	.word	0x20002550
   145ac:	0002c7bc 	.word	0x0002c7bc
   145b0:	200025dc 	.word	0x200025dc

000145b4 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   145b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145b8:	b098      	sub	sp, #96	; 0x60
   145ba:	4605      	mov	r5, r0
   145bc:	460c      	mov	r4, r1
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));
   145be:	2260      	movs	r2, #96	; 0x60
   145c0:	2100      	movs	r1, #0
   145c2:	4668      	mov	r0, sp
   145c4:	f013 fb68 	bl	27c98 <memset>

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   145c8:	4e15      	ldr	r6, [pc, #84]	; (14620 <scan_recv+0x6c>)
   145ca:	f896 3070 	ldrb.w	r3, [r6, #112]	; 0x70
   145ce:	f88d 3003 	strb.w	r3, [sp, #3]

	check_enabled_filters(&scan_control);
   145d2:	4668      	mov	r0, sp
   145d4:	f013 f870 	bl	276b8 <check_enabled_filters>

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   145d8:	892b      	ldrh	r3, [r5, #8]
   145da:	f003 0301 	and.w	r3, r3, #1
	scan_control.connectable =
   145de:	f88d 3004 	strb.w	r3, [sp, #4]

	/* Check the address filter. */
	check_addr(&scan_control, info->addr);
   145e2:	6829      	ldr	r1, [r5, #0]
   145e4:	4668      	mov	r0, sp
   145e6:	f013 f8dc 	bl	277a2 <check_addr>
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   145ea:	4620      	mov	r0, r4
   145ec:	f015 fe50 	bl	2a290 <net_buf_simple_headroom>
   145f0:	b287      	uxth	r7, r0
	state->len = buf->len;
   145f2:	f8b4 8004 	ldrh.w	r8, [r4, #4]

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   145f6:	466a      	mov	r2, sp
   145f8:	490a      	ldr	r1, [pc, #40]	; (14624 <scan_recv+0x70>)
   145fa:	4620      	mov	r0, r4
   145fc:	f003 fce0 	bl	17fc0 <bt_data_parse>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   14600:	68a3      	ldr	r3, [r4, #8]
   14602:	443b      	add	r3, r7
   14604:	6023      	str	r3, [r4, #0]
	buf->len = state->len;
   14606:	f8a4 8004 	strh.w	r8, [r4, #4]
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
   1460a:	9502      	str	r5, [sp, #8]
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   1460c:	368c      	adds	r6, #140	; 0x8c
   1460e:	9603      	str	r6, [sp, #12]
	scan_control.device_info.adv_data = ad;
   14610:	9404      	str	r4, [sp, #16]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   14612:	6829      	ldr	r1, [r5, #0]
   14614:	4668      	mov	r0, sp
   14616:	f013 f8dd 	bl	277d4 <filter_state_check>
}
   1461a:	b018      	add	sp, #96	; 0x60
   1461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14620:	20002550 	.word	0x20002550
   14624:	00027763 	.word	0x00027763

00014628 <bt_scan_init>:
{
   14628:	b570      	push	{r4, r5, r6, lr}
   1462a:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   1462c:	4815      	ldr	r0, [pc, #84]	; (14684 <bt_scan_init+0x5c>)
   1462e:	f004 fa3f 	bl	18ab0 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   14632:	2274      	movs	r2, #116	; 0x74
   14634:	2100      	movs	r1, #0
   14636:	4814      	ldr	r0, [pc, #80]	; (14688 <bt_scan_init+0x60>)
   14638:	f013 fb2e 	bl	27c98 <memset>
	if (init) {
   1463c:	b1c5      	cbz	r5, 14670 <bt_scan_init+0x48>
		bt_scan.connect_if_match = init->connect_if_match;
   1463e:	792a      	ldrb	r2, [r5, #4]
   14640:	4b11      	ldr	r3, [pc, #68]	; (14688 <bt_scan_init+0x60>)
   14642:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		if (init->scan_param) {
   14646:	682c      	ldr	r4, [r5, #0]
   14648:	b164      	cbz	r4, 14664 <bt_scan_init+0x3c>
			bt_scan.scan_param = *init->scan_param;
   1464a:	f103 0678 	add.w	r6, r3, #120	; 0x78
   1464e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   14650:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   14652:	6823      	ldr	r3, [r4, #0]
   14654:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   14656:	68aa      	ldr	r2, [r5, #8]
   14658:	b13a      	cbz	r2, 1466a <bt_scan_init+0x42>
			bt_scan.conn_param = *init->conn_param;
   1465a:	4b0c      	ldr	r3, [pc, #48]	; (1468c <bt_scan_init+0x64>)
   1465c:	6810      	ldr	r0, [r2, #0]
   1465e:	6851      	ldr	r1, [r2, #4]
   14660:	c303      	stmia	r3!, {r0, r1}
}
   14662:	bd70      	pop	{r4, r5, r6, pc}
			scan_default_param_set();
   14664:	f7ff fe08 	bl	14278 <scan_default_param_set>
   14668:	e7f5      	b.n	14656 <bt_scan_init+0x2e>
			scan_default_conn_param_set();
   1466a:	f7ff fe19 	bl	142a0 <scan_default_conn_param_set>
   1466e:	e7f8      	b.n	14662 <bt_scan_init+0x3a>
		scan_default_param_set();
   14670:	f7ff fe02 	bl	14278 <scan_default_param_set>
		scan_default_conn_param_set();
   14674:	f7ff fe14 	bl	142a0 <scan_default_conn_param_set>
		bt_scan.connect_if_match = false;
   14678:	4b03      	ldr	r3, [pc, #12]	; (14688 <bt_scan_init+0x60>)
   1467a:	2200      	movs	r2, #0
   1467c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
   14680:	e7ef      	b.n	14662 <bt_scan_init+0x3a>
   14682:	bf00      	nop
   14684:	20000538 	.word	0x20000538
   14688:	20002550 	.word	0x20002550
   1468c:	200025dc 	.word	0x200025dc

00014690 <bt_scan_start>:
static struct bt_le_scan_cb scan_cb = {
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
   14690:	b508      	push	{r3, lr}
	switch (scan_type) {
   14692:	b150      	cbz	r0, 146aa <bt_scan_start+0x1a>
   14694:	2801      	cmp	r0, #1
   14696:	d10d      	bne.n	146b4 <bt_scan_start+0x24>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
   14698:	4b08      	ldr	r3, [pc, #32]	; (146bc <bt_scan_start+0x2c>)
   1469a:	2201      	movs	r2, #1
   1469c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   146a0:	2100      	movs	r1, #0
   146a2:	4807      	ldr	r0, [pc, #28]	; (146c0 <bt_scan_start+0x30>)
   146a4:	f004 f94e 	bl	18944 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   146a8:	bd08      	pop	{r3, pc}
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   146aa:	4b04      	ldr	r3, [pc, #16]	; (146bc <bt_scan_start+0x2c>)
   146ac:	2200      	movs	r2, #0
   146ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
		break;
   146b2:	e7f5      	b.n	146a0 <bt_scan_start+0x10>
	switch (scan_type) {
   146b4:	f06f 0015 	mvn.w	r0, #21
   146b8:	e7f6      	b.n	146a8 <bt_scan_start+0x18>
   146ba:	bf00      	nop
   146bc:	20002550 	.word	0x20002550
   146c0:	200025c8 	.word	0x200025c8

000146c4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   146c4:	b4f0      	push	{r4, r5, r6, r7}
   146c6:	b08c      	sub	sp, #48	; 0x30
   146c8:	4607      	mov	r7, r0
   146ca:	460e      	mov	r6, r1
	const unsigned int rconst[11] = {
   146cc:	ac01      	add	r4, sp, #4
   146ce:	4d2a      	ldr	r5, [pc, #168]	; (14778 <tc_aes128_set_encrypt_key+0xb4>)
   146d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   146d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   146d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   146d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   146d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   146dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   146e0:	2f00      	cmp	r7, #0
   146e2:	d045      	beq.n	14770 <tc_aes128_set_encrypt_key+0xac>
   146e4:	4638      	mov	r0, r7
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   146e6:	2e00      	cmp	r6, #0
   146e8:	d044      	beq.n	14774 <tc_aes128_set_encrypt_key+0xb0>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   146ea:	2300      	movs	r3, #0
   146ec:	e00f      	b.n	1470e <tc_aes128_set_encrypt_key+0x4a>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   146ee:	f816 4023 	ldrb.w	r4, [r6, r3, lsl #2]
   146f2:	eb06 0183 	add.w	r1, r6, r3, lsl #2
   146f6:	784a      	ldrb	r2, [r1, #1]
   146f8:	0412      	lsls	r2, r2, #16
   146fa:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   146fe:	788c      	ldrb	r4, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14700:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14704:	78c9      	ldrb	r1, [r1, #3]
   14706:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14708:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   1470c:	3301      	adds	r3, #1
   1470e:	2b03      	cmp	r3, #3
   14710:	d9ed      	bls.n	146ee <tc_aes128_set_encrypt_key+0x2a>
   14712:	e006      	b.n	14722 <tc_aes128_set_encrypt_key+0x5e>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   14714:	1f19      	subs	r1, r3, #4
   14716:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1471a:	404a      	eors	r2, r1
   1471c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14720:	3301      	adds	r3, #1
   14722:	2b2b      	cmp	r3, #43	; 0x2b
   14724:	d820      	bhi.n	14768 <tc_aes128_set_encrypt_key+0xa4>
		t = s->words[i-1];
   14726:	1e5a      	subs	r2, r3, #1
   14728:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
		if ((i % Nk) == 0) {
   1472c:	f013 0f03 	tst.w	r3, #3
   14730:	d1f0      	bne.n	14714 <tc_aes128_set_encrypt_key+0x50>
	return (((a) >> 24)|((a) << 8));
   14732:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14736:	0e11      	lsrs	r1, r2, #24
   14738:	4c10      	ldr	r4, [pc, #64]	; (1477c <tc_aes128_set_encrypt_key+0xb8>)
   1473a:	5c65      	ldrb	r5, [r4, r1]
   1473c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14740:	5c61      	ldrb	r1, [r4, r1]
   14742:	0409      	lsls	r1, r1, #16
   14744:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   14748:	f3c2 2507 	ubfx	r5, r2, #8, #8
   1474c:	5d65      	ldrb	r5, [r4, r5]
   1474e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   14752:	b2d2      	uxtb	r2, r2
   14754:	5ca2      	ldrb	r2, [r4, r2]
   14756:	4311      	orrs	r1, r2
   14758:	f023 0203 	bic.w	r2, r3, #3
   1475c:	ac0c      	add	r4, sp, #48	; 0x30
   1475e:	4422      	add	r2, r4
   14760:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   14764:	404a      	eors	r2, r1
   14766:	e7d5      	b.n	14714 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   14768:	2001      	movs	r0, #1
}
   1476a:	b00c      	add	sp, #48	; 0x30
   1476c:	bcf0      	pop	{r4, r5, r6, r7}
   1476e:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14770:	2000      	movs	r0, #0
   14772:	e7fa      	b.n	1476a <tc_aes128_set_encrypt_key+0xa6>
		return TC_CRYPTO_FAIL;
   14774:	2000      	movs	r0, #0
   14776:	e7f8      	b.n	1476a <tc_aes128_set_encrypt_key+0xa6>
   14778:	0002c7cc 	.word	0x0002c7cc
   1477c:	0002d144 	.word	0x0002d144

00014780 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   14780:	2800      	cmp	r0, #0
   14782:	f000 839a 	beq.w	14eba <tc_aes_encrypt+0x73a>
{
   14786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1478a:	b088      	sub	sp, #32
   1478c:	4616      	mov	r6, r2
   1478e:	4607      	mov	r7, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   14790:	2900      	cmp	r1, #0
   14792:	f000 8394 	beq.w	14ebe <tc_aes_encrypt+0x73e>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   14796:	2a00      	cmp	r2, #0
   14798:	f000 8393 	beq.w	14ec2 <tc_aes_encrypt+0x742>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1479c:	2310      	movs	r3, #16
   1479e:	460a      	mov	r2, r1
   147a0:	4619      	mov	r1, r3
   147a2:	eb0d 0003 	add.w	r0, sp, r3
   147a6:	f013 f843 	bl	27830 <_copy>
	add_round_key(state, s->words);
   147aa:	4635      	mov	r5, r6
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   147ac:	6833      	ldr	r3, [r6, #0]
   147ae:	f89d 2010 	ldrb.w	r2, [sp, #16]
   147b2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   147b6:	f88d 2010 	strb.w	r2, [sp, #16]
   147ba:	f3c3 4207 	ubfx	r2, r3, #16, #8
   147be:	f89d 1011 	ldrb.w	r1, [sp, #17]
   147c2:	404a      	eors	r2, r1
   147c4:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   147c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   147cc:	f89d 1012 	ldrb.w	r1, [sp, #18]
   147d0:	404a      	eors	r2, r1
   147d2:	f88d 2012 	strb.w	r2, [sp, #18]
   147d6:	b2db      	uxtb	r3, r3
   147d8:	f89d 2013 	ldrb.w	r2, [sp, #19]
   147dc:	4053      	eors	r3, r2
   147de:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   147e2:	6873      	ldr	r3, [r6, #4]
   147e4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   147e8:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   147ec:	f88d 2014 	strb.w	r2, [sp, #20]
   147f0:	f3c3 4207 	ubfx	r2, r3, #16, #8
   147f4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   147f8:	404a      	eors	r2, r1
   147fa:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   147fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14802:	f89d 1016 	ldrb.w	r1, [sp, #22]
   14806:	404a      	eors	r2, r1
   14808:	f88d 2016 	strb.w	r2, [sp, #22]
   1480c:	b2db      	uxtb	r3, r3
   1480e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14812:	4053      	eors	r3, r2
   14814:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   14818:	68b3      	ldr	r3, [r6, #8]
   1481a:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1481e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14822:	f88d 2018 	strb.w	r2, [sp, #24]
   14826:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1482a:	f89d 1019 	ldrb.w	r1, [sp, #25]
   1482e:	404a      	eors	r2, r1
   14830:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   14834:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14838:	f89d 101a 	ldrb.w	r1, [sp, #26]
   1483c:	404a      	eors	r2, r1
   1483e:	f88d 201a 	strb.w	r2, [sp, #26]
   14842:	b2db      	uxtb	r3, r3
   14844:	f89d 201b 	ldrb.w	r2, [sp, #27]
   14848:	4053      	eors	r3, r2
   1484a:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1484e:	68f3      	ldr	r3, [r6, #12]
   14850:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14854:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14858:	f88d 201c 	strb.w	r2, [sp, #28]
   1485c:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14860:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14864:	404a      	eors	r2, r1
   14866:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1486a:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1486e:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14872:	404a      	eors	r2, r1
   14874:	f88d 201e 	strb.w	r2, [sp, #30]
   14878:	b2db      	uxtb	r3, r3
   1487a:	f89d 201f 	ldrb.w	r2, [sp, #31]
   1487e:	4053      	eors	r3, r2
   14880:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   14884:	2400      	movs	r4, #0
}
   14886:	e239      	b.n	14cfc <tc_aes_encrypt+0x57c>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   14888:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1488c:	f88d 3000 	strb.w	r3, [sp]
   14890:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14894:	f88d 3001 	strb.w	r3, [sp, #1]
   14898:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1489c:	f88d 3002 	strb.w	r3, [sp, #2]
   148a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   148a4:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   148a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
   148ac:	f88d 3004 	strb.w	r3, [sp, #4]
   148b0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   148b4:	f88d 3005 	strb.w	r3, [sp, #5]
   148b8:	f89d 301e 	ldrb.w	r3, [sp, #30]
   148bc:	f88d 3006 	strb.w	r3, [sp, #6]
   148c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   148c4:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   148c8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   148cc:	f88d 3008 	strb.w	r3, [sp, #8]
   148d0:	f89d 301d 	ldrb.w	r3, [sp, #29]
   148d4:	f88d 3009 	strb.w	r3, [sp, #9]
   148d8:	f89d 3012 	ldrb.w	r3, [sp, #18]
   148dc:	f88d 300a 	strb.w	r3, [sp, #10]
   148e0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   148e4:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   148e8:	f89d 301c 	ldrb.w	r3, [sp, #28]
   148ec:	f88d 300c 	strb.w	r3, [sp, #12]
   148f0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   148f4:	f88d 300d 	strb.w	r3, [sp, #13]
   148f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
   148fc:	f88d 300e 	strb.w	r3, [sp, #14]
   14900:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14904:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   14908:	2310      	movs	r3, #16
   1490a:	466a      	mov	r2, sp
   1490c:	4619      	mov	r1, r3
   1490e:	eb0d 0003 	add.w	r0, sp, r3
   14912:	f012 ff8d 	bl	27830 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14916:	f89d 0010 	ldrb.w	r0, [sp, #16]
   1491a:	f012 ff9a 	bl	27852 <_double_byte>
   1491e:	4680      	mov	r8, r0
   14920:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14924:	f012 ff95 	bl	27852 <_double_byte>
   14928:	4601      	mov	r1, r0
   1492a:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1492e:	f89d 2012 	ldrb.w	r2, [sp, #18]
   14932:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14936:	4041      	eors	r1, r0
   14938:	ea88 0801 	eor.w	r8, r8, r1
   1493c:	ea82 0208 	eor.w	r2, r2, r8
   14940:	4053      	eors	r3, r2
   14942:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   14946:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1494a:	f012 ff82 	bl	27852 <_double_byte>
   1494e:	ea88 0800 	eor.w	r8, r8, r0
   14952:	fa5f f888 	uxtb.w	r8, r8
   14956:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1495a:	f012 ff7a 	bl	27852 <_double_byte>
   1495e:	4602      	mov	r2, r0
   14960:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14964:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14968:	4042      	eors	r2, r0
   1496a:	ea88 0802 	eor.w	r8, r8, r2
   1496e:	ea83 0308 	eor.w	r3, r3, r8
   14972:	f88d 3001 	strb.w	r3, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   14976:	f89d 8010 	ldrb.w	r8, [sp, #16]
   1497a:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1497e:	ea88 0803 	eor.w	r8, r8, r3
   14982:	f012 ff66 	bl	27852 <_double_byte>
   14986:	ea88 0800 	eor.w	r8, r8, r0
   1498a:	fa5f f888 	uxtb.w	r8, r8
   1498e:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14992:	f012 ff5e 	bl	27852 <_double_byte>
   14996:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1499a:	4058      	eors	r0, r3
   1499c:	ea88 0800 	eor.w	r8, r8, r0
   149a0:	f88d 8002 	strb.w	r8, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   149a4:	f89d 0010 	ldrb.w	r0, [sp, #16]
   149a8:	f012 ff53 	bl	27852 <_double_byte>
   149ac:	f89d 2010 	ldrb.w	r2, [sp, #16]
   149b0:	f89d 3011 	ldrb.w	r3, [sp, #17]
   149b4:	f89d 8012 	ldrb.w	r8, [sp, #18]
   149b8:	4050      	eors	r0, r2
   149ba:	4043      	eors	r3, r0
   149bc:	ea88 0803 	eor.w	r8, r8, r3
   149c0:	fa5f f888 	uxtb.w	r8, r8
   149c4:	f89d 0013 	ldrb.w	r0, [sp, #19]
   149c8:	f012 ff43 	bl	27852 <_double_byte>
   149cc:	ea88 0800 	eor.w	r8, r8, r0
   149d0:	f88d 8003 	strb.w	r8, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   149d4:	f89d 0014 	ldrb.w	r0, [sp, #20]
   149d8:	f012 ff3b 	bl	27852 <_double_byte>
   149dc:	4680      	mov	r8, r0
   149de:	f89d 0015 	ldrb.w	r0, [sp, #21]
   149e2:	f012 ff36 	bl	27852 <_double_byte>
   149e6:	4601      	mov	r1, r0
   149e8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   149ec:	f89d 2016 	ldrb.w	r2, [sp, #22]
   149f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   149f4:	4041      	eors	r1, r0
   149f6:	ea88 0801 	eor.w	r8, r8, r1
   149fa:	ea82 0208 	eor.w	r2, r2, r8
   149fe:	4053      	eors	r3, r2
   14a00:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   14a04:	f89d 8014 	ldrb.w	r8, [sp, #20]
   14a08:	f012 ff23 	bl	27852 <_double_byte>
   14a0c:	ea88 0800 	eor.w	r8, r8, r0
   14a10:	fa5f f888 	uxtb.w	r8, r8
   14a14:	f89d 0016 	ldrb.w	r0, [sp, #22]
   14a18:	f012 ff1b 	bl	27852 <_double_byte>
   14a1c:	4602      	mov	r2, r0
   14a1e:	f89d 0016 	ldrb.w	r0, [sp, #22]
   14a22:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14a26:	4042      	eors	r2, r0
   14a28:	ea88 0802 	eor.w	r8, r8, r2
   14a2c:	ea83 0308 	eor.w	r3, r3, r8
   14a30:	f88d 3005 	strb.w	r3, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   14a34:	f89d 8014 	ldrb.w	r8, [sp, #20]
   14a38:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14a3c:	ea88 0803 	eor.w	r8, r8, r3
   14a40:	f012 ff07 	bl	27852 <_double_byte>
   14a44:	ea88 0800 	eor.w	r8, r8, r0
   14a48:	fa5f f888 	uxtb.w	r8, r8
   14a4c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14a50:	f012 feff 	bl	27852 <_double_byte>
   14a54:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14a58:	4058      	eors	r0, r3
   14a5a:	ea88 0800 	eor.w	r8, r8, r0
   14a5e:	f88d 8006 	strb.w	r8, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14a62:	f89d 0014 	ldrb.w	r0, [sp, #20]
   14a66:	f012 fef4 	bl	27852 <_double_byte>
   14a6a:	f89d 2014 	ldrb.w	r2, [sp, #20]
   14a6e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14a72:	f89d 8016 	ldrb.w	r8, [sp, #22]
   14a76:	4050      	eors	r0, r2
   14a78:	4043      	eors	r3, r0
   14a7a:	ea88 0803 	eor.w	r8, r8, r3
   14a7e:	fa5f f888 	uxtb.w	r8, r8
   14a82:	f89d 0017 	ldrb.w	r0, [sp, #23]
   14a86:	f012 fee4 	bl	27852 <_double_byte>
   14a8a:	ea88 0800 	eor.w	r8, r8, r0
   14a8e:	f88d 8007 	strb.w	r8, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14a92:	f89d 0018 	ldrb.w	r0, [sp, #24]
   14a96:	f012 fedc 	bl	27852 <_double_byte>
   14a9a:	4680      	mov	r8, r0
   14a9c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14aa0:	f012 fed7 	bl	27852 <_double_byte>
   14aa4:	4601      	mov	r1, r0
   14aa6:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14aaa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   14aae:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14ab2:	4041      	eors	r1, r0
   14ab4:	ea88 0801 	eor.w	r8, r8, r1
   14ab8:	ea82 0208 	eor.w	r2, r2, r8
   14abc:	4053      	eors	r3, r2
   14abe:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   14ac2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   14ac6:	f012 fec4 	bl	27852 <_double_byte>
   14aca:	ea88 0800 	eor.w	r8, r8, r0
   14ace:	fa5f f888 	uxtb.w	r8, r8
   14ad2:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14ad6:	f012 febc 	bl	27852 <_double_byte>
   14ada:	4602      	mov	r2, r0
   14adc:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14ae0:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14ae4:	4042      	eors	r2, r0
   14ae6:	ea88 0802 	eor.w	r8, r8, r2
   14aea:	ea83 0308 	eor.w	r3, r3, r8
   14aee:	f88d 3009 	strb.w	r3, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   14af2:	f89d 8018 	ldrb.w	r8, [sp, #24]
   14af6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14afa:	ea88 0803 	eor.w	r8, r8, r3
   14afe:	f012 fea8 	bl	27852 <_double_byte>
   14b02:	ea88 0800 	eor.w	r8, r8, r0
   14b06:	fa5f f888 	uxtb.w	r8, r8
   14b0a:	f89d 001b 	ldrb.w	r0, [sp, #27]
   14b0e:	f012 fea0 	bl	27852 <_double_byte>
   14b12:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14b16:	4058      	eors	r0, r3
   14b18:	ea88 0800 	eor.w	r8, r8, r0
   14b1c:	f88d 800a 	strb.w	r8, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14b20:	f89d 0018 	ldrb.w	r0, [sp, #24]
   14b24:	f012 fe95 	bl	27852 <_double_byte>
   14b28:	f89d 2018 	ldrb.w	r2, [sp, #24]
   14b2c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14b30:	f89d 801a 	ldrb.w	r8, [sp, #26]
   14b34:	4050      	eors	r0, r2
   14b36:	4043      	eors	r3, r0
   14b38:	ea88 0803 	eor.w	r8, r8, r3
   14b3c:	fa5f f888 	uxtb.w	r8, r8
   14b40:	f89d 001b 	ldrb.w	r0, [sp, #27]
   14b44:	f012 fe85 	bl	27852 <_double_byte>
   14b48:	ea88 0800 	eor.w	r8, r8, r0
   14b4c:	f88d 800b 	strb.w	r8, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   14b50:	f89d 001c 	ldrb.w	r0, [sp, #28]
   14b54:	f012 fe7d 	bl	27852 <_double_byte>
   14b58:	4680      	mov	r8, r0
   14b5a:	f89d 001d 	ldrb.w	r0, [sp, #29]
   14b5e:	f012 fe78 	bl	27852 <_double_byte>
   14b62:	4601      	mov	r1, r0
   14b64:	f89d 001d 	ldrb.w	r0, [sp, #29]
   14b68:	f89d 201e 	ldrb.w	r2, [sp, #30]
   14b6c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14b70:	4041      	eors	r1, r0
   14b72:	ea88 0801 	eor.w	r8, r8, r1
   14b76:	ea82 0208 	eor.w	r2, r2, r8
   14b7a:	4053      	eors	r3, r2
   14b7c:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   14b80:	f89d 801c 	ldrb.w	r8, [sp, #28]
   14b84:	f012 fe65 	bl	27852 <_double_byte>
   14b88:	ea88 0800 	eor.w	r8, r8, r0
   14b8c:	fa5f f888 	uxtb.w	r8, r8
   14b90:	f89d 001e 	ldrb.w	r0, [sp, #30]
   14b94:	f012 fe5d 	bl	27852 <_double_byte>
   14b98:	4602      	mov	r2, r0
   14b9a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   14b9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14ba2:	4042      	eors	r2, r0
   14ba4:	ea88 0802 	eor.w	r8, r8, r2
   14ba8:	ea83 0308 	eor.w	r3, r3, r8
   14bac:	f88d 300d 	strb.w	r3, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   14bb0:	f89d 801c 	ldrb.w	r8, [sp, #28]
   14bb4:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14bb8:	ea88 0803 	eor.w	r8, r8, r3
   14bbc:	f012 fe49 	bl	27852 <_double_byte>
   14bc0:	ea88 0800 	eor.w	r8, r8, r0
   14bc4:	fa5f f888 	uxtb.w	r8, r8
   14bc8:	f89d 001f 	ldrb.w	r0, [sp, #31]
   14bcc:	f012 fe41 	bl	27852 <_double_byte>
   14bd0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14bd4:	4058      	eors	r0, r3
   14bd6:	ea88 0800 	eor.w	r8, r8, r0
   14bda:	f88d 800e 	strb.w	r8, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   14bde:	f89d 001c 	ldrb.w	r0, [sp, #28]
   14be2:	f012 fe36 	bl	27852 <_double_byte>
   14be6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14bea:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14bee:	f89d 801e 	ldrb.w	r8, [sp, #30]
   14bf2:	4050      	eors	r0, r2
   14bf4:	4043      	eors	r3, r0
   14bf6:	ea88 0803 	eor.w	r8, r8, r3
   14bfa:	fa5f f888 	uxtb.w	r8, r8
   14bfe:	f89d 001f 	ldrb.w	r0, [sp, #31]
   14c02:	f012 fe26 	bl	27852 <_double_byte>
   14c06:	ea88 0800 	eor.w	r8, r8, r0
   14c0a:	f88d 800f 	strb.w	r8, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   14c0e:	2310      	movs	r3, #16
   14c10:	466a      	mov	r2, sp
   14c12:	4619      	mov	r1, r3
   14c14:	eb0d 0003 	add.w	r0, sp, r3
   14c18:	f012 fe0a 	bl	27830 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   14c1c:	3401      	adds	r4, #1
   14c1e:	0123      	lsls	r3, r4, #4
   14c20:	eb05 1204 	add.w	r2, r5, r4, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   14c24:	58eb      	ldr	r3, [r5, r3]
   14c26:	f89d 1010 	ldrb.w	r1, [sp, #16]
   14c2a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   14c2e:	f88d 1010 	strb.w	r1, [sp, #16]
   14c32:	f3c3 4107 	ubfx	r1, r3, #16, #8
   14c36:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14c3a:	4041      	eors	r1, r0
   14c3c:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   14c40:	f3c3 2107 	ubfx	r1, r3, #8, #8
   14c44:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14c48:	4041      	eors	r1, r0
   14c4a:	f88d 1012 	strb.w	r1, [sp, #18]
   14c4e:	b2db      	uxtb	r3, r3
   14c50:	f89d 1013 	ldrb.w	r1, [sp, #19]
   14c54:	404b      	eors	r3, r1
   14c56:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   14c5a:	6853      	ldr	r3, [r2, #4]
   14c5c:	f89d 1014 	ldrb.w	r1, [sp, #20]
   14c60:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   14c64:	f88d 1014 	strb.w	r1, [sp, #20]
   14c68:	f3c3 4107 	ubfx	r1, r3, #16, #8
   14c6c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   14c70:	4041      	eors	r1, r0
   14c72:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   14c76:	f3c3 2107 	ubfx	r1, r3, #8, #8
   14c7a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   14c7e:	4041      	eors	r1, r0
   14c80:	f88d 1016 	strb.w	r1, [sp, #22]
   14c84:	b2db      	uxtb	r3, r3
   14c86:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14c8a:	404b      	eors	r3, r1
   14c8c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   14c90:	6893      	ldr	r3, [r2, #8]
   14c92:	f89d 1018 	ldrb.w	r1, [sp, #24]
   14c96:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   14c9a:	f88d 1018 	strb.w	r1, [sp, #24]
   14c9e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   14ca2:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14ca6:	4041      	eors	r1, r0
   14ca8:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   14cac:	f3c3 2107 	ubfx	r1, r3, #8, #8
   14cb0:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14cb4:	4041      	eors	r1, r0
   14cb6:	f88d 101a 	strb.w	r1, [sp, #26]
   14cba:	b2db      	uxtb	r3, r3
   14cbc:	f89d 101b 	ldrb.w	r1, [sp, #27]
   14cc0:	404b      	eors	r3, r1
   14cc2:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   14cc6:	68d3      	ldr	r3, [r2, #12]
   14cc8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14ccc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14cd0:	f88d 201c 	strb.w	r2, [sp, #28]
   14cd4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14cd8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14cdc:	404a      	eors	r2, r1
   14cde:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   14ce2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14ce6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14cea:	404a      	eors	r2, r1
   14cec:	f88d 201e 	strb.w	r2, [sp, #30]
   14cf0:	b2db      	uxtb	r3, r3
   14cf2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   14cf6:	4053      	eors	r3, r2
   14cf8:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   14cfc:	2c08      	cmp	r4, #8
   14cfe:	d80a      	bhi.n	14d16 <tc_aes_encrypt+0x596>
	for (i = 0; i < (Nb * Nk); ++i) {
   14d00:	2300      	movs	r3, #0
   14d02:	2b0f      	cmp	r3, #15
   14d04:	f63f adc0 	bhi.w	14888 <tc_aes_encrypt+0x108>
		s[i] = sbox[s[i]];
   14d08:	a904      	add	r1, sp, #16
   14d0a:	5cc8      	ldrb	r0, [r1, r3]
   14d0c:	4a6e      	ldr	r2, [pc, #440]	; (14ec8 <tc_aes_encrypt+0x748>)
   14d0e:	5c10      	ldrb	r0, [r2, r0]
   14d10:	54c8      	strb	r0, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14d12:	3301      	adds	r3, #1
   14d14:	e7f5      	b.n	14d02 <tc_aes_encrypt+0x582>
   14d16:	2300      	movs	r3, #0
   14d18:	e005      	b.n	14d26 <tc_aes_encrypt+0x5a6>
		s[i] = sbox[s[i]];
   14d1a:	aa04      	add	r2, sp, #16
   14d1c:	5cd1      	ldrb	r1, [r2, r3]
   14d1e:	486a      	ldr	r0, [pc, #424]	; (14ec8 <tc_aes_encrypt+0x748>)
   14d20:	5c41      	ldrb	r1, [r0, r1]
   14d22:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   14d24:	3301      	adds	r3, #1
   14d26:	2b0f      	cmp	r3, #15
   14d28:	d9f7      	bls.n	14d1a <tc_aes_encrypt+0x59a>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   14d2a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   14d2e:	f88d 3000 	strb.w	r3, [sp]
   14d32:	f89d 3015 	ldrb.w	r3, [sp, #21]
   14d36:	f88d 3001 	strb.w	r3, [sp, #1]
   14d3a:	f89d 301a 	ldrb.w	r3, [sp, #26]
   14d3e:	f88d 3002 	strb.w	r3, [sp, #2]
   14d42:	f89d 301f 	ldrb.w	r3, [sp, #31]
   14d46:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   14d4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   14d4e:	f88d 3004 	strb.w	r3, [sp, #4]
   14d52:	f89d 3019 	ldrb.w	r3, [sp, #25]
   14d56:	f88d 3005 	strb.w	r3, [sp, #5]
   14d5a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   14d5e:	f88d 3006 	strb.w	r3, [sp, #6]
   14d62:	f89d 3013 	ldrb.w	r3, [sp, #19]
   14d66:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   14d6a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   14d6e:	f88d 3008 	strb.w	r3, [sp, #8]
   14d72:	f89d 301d 	ldrb.w	r3, [sp, #29]
   14d76:	f88d 3009 	strb.w	r3, [sp, #9]
   14d7a:	f89d 3012 	ldrb.w	r3, [sp, #18]
   14d7e:	f88d 300a 	strb.w	r3, [sp, #10]
   14d82:	f89d 3017 	ldrb.w	r3, [sp, #23]
   14d86:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   14d8a:	f89d 301c 	ldrb.w	r3, [sp, #28]
   14d8e:	f88d 300c 	strb.w	r3, [sp, #12]
   14d92:	f89d 3011 	ldrb.w	r3, [sp, #17]
   14d96:	f88d 300d 	strb.w	r3, [sp, #13]
   14d9a:	f89d 3016 	ldrb.w	r3, [sp, #22]
   14d9e:	f88d 300e 	strb.w	r3, [sp, #14]
   14da2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   14da6:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   14daa:	2310      	movs	r3, #16
   14dac:	466a      	mov	r2, sp
   14dae:	4619      	mov	r1, r3
   14db0:	eb0d 0003 	add.w	r0, sp, r3
   14db4:	f012 fd3c 	bl	27830 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   14db8:	1c63      	adds	r3, r4, #1
   14dba:	011a      	lsls	r2, r3, #4
   14dbc:	eb06 1303 	add.w	r3, r6, r3, lsl #4
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   14dc0:	58b2      	ldr	r2, [r6, r2]
   14dc2:	f89d 1010 	ldrb.w	r1, [sp, #16]
   14dc6:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   14dca:	f88d 1010 	strb.w	r1, [sp, #16]
   14dce:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14dd2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14dd6:	4041      	eors	r1, r0
   14dd8:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   14ddc:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14de0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14de4:	4041      	eors	r1, r0
   14de6:	f88d 1012 	strb.w	r1, [sp, #18]
   14dea:	b2d2      	uxtb	r2, r2
   14dec:	f89d 1013 	ldrb.w	r1, [sp, #19]
   14df0:	404a      	eors	r2, r1
   14df2:	f88d 2013 	strb.w	r2, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   14df6:	685a      	ldr	r2, [r3, #4]
   14df8:	f89d 1014 	ldrb.w	r1, [sp, #20]
   14dfc:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   14e00:	f88d 1014 	strb.w	r1, [sp, #20]
   14e04:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14e08:	f89d 0015 	ldrb.w	r0, [sp, #21]
   14e0c:	4041      	eors	r1, r0
   14e0e:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   14e12:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14e16:	f89d 0016 	ldrb.w	r0, [sp, #22]
   14e1a:	4041      	eors	r1, r0
   14e1c:	f88d 1016 	strb.w	r1, [sp, #22]
   14e20:	b2d2      	uxtb	r2, r2
   14e22:	f89d 1017 	ldrb.w	r1, [sp, #23]
   14e26:	404a      	eors	r2, r1
   14e28:	f88d 2017 	strb.w	r2, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   14e2c:	689a      	ldr	r2, [r3, #8]
   14e2e:	f89d 1018 	ldrb.w	r1, [sp, #24]
   14e32:	ea81 6112 	eor.w	r1, r1, r2, lsr #24
   14e36:	f88d 1018 	strb.w	r1, [sp, #24]
   14e3a:	f3c2 4107 	ubfx	r1, r2, #16, #8
   14e3e:	f89d 0019 	ldrb.w	r0, [sp, #25]
   14e42:	4041      	eors	r1, r0
   14e44:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   14e48:	f3c2 2107 	ubfx	r1, r2, #8, #8
   14e4c:	f89d 001a 	ldrb.w	r0, [sp, #26]
   14e50:	4041      	eors	r1, r0
   14e52:	f88d 101a 	strb.w	r1, [sp, #26]
   14e56:	b2d2      	uxtb	r2, r2
   14e58:	f89d 101b 	ldrb.w	r1, [sp, #27]
   14e5c:	404a      	eors	r2, r1
   14e5e:	f88d 201b 	strb.w	r2, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   14e62:	68db      	ldr	r3, [r3, #12]
   14e64:	f89d 201c 	ldrb.w	r2, [sp, #28]
   14e68:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   14e6c:	f88d 201c 	strb.w	r2, [sp, #28]
   14e70:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14e74:	f89d 101d 	ldrb.w	r1, [sp, #29]
   14e78:	404a      	eors	r2, r1
   14e7a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   14e7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   14e82:	f89d 101e 	ldrb.w	r1, [sp, #30]
   14e86:	404a      	eors	r2, r1
   14e88:	f88d 201e 	strb.w	r2, [sp, #30]
   14e8c:	b2db      	uxtb	r3, r3
   14e8e:	f89d 201f 	ldrb.w	r2, [sp, #31]
   14e92:	4053      	eors	r3, r2
   14e94:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   14e98:	2310      	movs	r3, #16
   14e9a:	eb0d 0203 	add.w	r2, sp, r3
   14e9e:	4619      	mov	r1, r3
   14ea0:	4638      	mov	r0, r7
   14ea2:	f012 fcc5 	bl	27830 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   14ea6:	2210      	movs	r2, #16
   14ea8:	2100      	movs	r1, #0
   14eaa:	eb0d 0002 	add.w	r0, sp, r2
   14eae:	f012 fccc 	bl	2784a <_set>

	return TC_CRYPTO_SUCCESS;
   14eb2:	2001      	movs	r0, #1
}
   14eb4:	b008      	add	sp, #32
   14eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   14eba:	2000      	movs	r0, #0
}
   14ebc:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   14ebe:	2000      	movs	r0, #0
   14ec0:	e7f8      	b.n	14eb4 <tc_aes_encrypt+0x734>
		return TC_CRYPTO_FAIL;
   14ec2:	2000      	movs	r0, #0
   14ec4:	e7f6      	b.n	14eb4 <tc_aes_encrypt+0x734>
   14ec6:	bf00      	nop
   14ec8:	0002d144 	.word	0x0002d144

00014ecc <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
   14ecc:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
   14ece:	4802      	ldr	r0, [pc, #8]	; (14ed8 <nrf_cc3xx_platform_abort_init+0xc>)
   14ed0:	f00e fa80 	bl	233d4 <nrf_cc3xx_platform_set_abort>
}
   14ed4:	bd08      	pop	{r3, pc}
   14ed6:	bf00      	nop
   14ed8:	0002d244 	.word	0x0002d244

00014edc <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14edc:	b1d0      	cbz	r0, 14f14 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14ede:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14ee0:	6842      	ldr	r2, [r0, #4]
   14ee2:	2a04      	cmp	r2, #4
   14ee4:	d005      	beq.n	14ef2 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14ee6:	b1d2      	cbz	r2, 14f1e <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
   14ee8:	6800      	ldr	r0, [r0, #0]
   14eea:	f00c fe49 	bl	21b80 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14eee:	2000      	movs	r0, #0
    }
}
   14ef0:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
   14ef2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14ef4:	2200      	movs	r2, #0
   14ef6:	f3bf 8f5b 	dmb	ish
   14efa:	e853 1f00 	ldrex	r1, [r3]
   14efe:	2901      	cmp	r1, #1
   14f00:	d103      	bne.n	14f0a <mutex_unlock_platform+0x2e>
   14f02:	e843 2000 	strex	r0, r2, [r3]
   14f06:	2800      	cmp	r0, #0
   14f08:	d1f7      	bne.n	14efa <mutex_unlock_platform+0x1e>
   14f0a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14f0e:	d104      	bne.n	14f1a <mutex_unlock_platform+0x3e>
   14f10:	4610      	mov	r0, r2
   14f12:	e7ed      	b.n	14ef0 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14f14:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   14f18:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14f1a:	4802      	ldr	r0, [pc, #8]	; (14f24 <mutex_unlock_platform+0x48>)
   14f1c:	e7e8      	b.n	14ef0 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14f1e:	4802      	ldr	r0, [pc, #8]	; (14f28 <mutex_unlock_platform+0x4c>)
   14f20:	e7e6      	b.n	14ef0 <mutex_unlock_platform+0x14>
   14f22:	bf00      	nop
   14f24:	ffff8fe9 	.word	0xffff8fe9
   14f28:	ffff8fea 	.word	0xffff8fea

00014f2c <mutex_lock_platform>:
    if(mutex == NULL) {
   14f2c:	b320      	cbz	r0, 14f78 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14f2e:	b508      	push	{r3, lr}
    switch (mutex->flags) {
   14f30:	6842      	ldr	r2, [r0, #4]
   14f32:	2a04      	cmp	r2, #4
   14f34:	d002      	beq.n	14f3c <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14f36:	b992      	cbnz	r2, 14f5e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14f38:	4811      	ldr	r0, [pc, #68]	; (14f80 <mutex_lock_platform+0x54>)
   14f3a:	e00f      	b.n	14f5c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
   14f3c:	6803      	ldr	r3, [r0, #0]
   14f3e:	2201      	movs	r2, #1
   14f40:	f3bf 8f5b 	dmb	ish
   14f44:	e853 1f00 	ldrex	r1, [r3]
   14f48:	2900      	cmp	r1, #0
   14f4a:	d103      	bne.n	14f54 <mutex_lock_platform+0x28>
   14f4c:	e843 2000 	strex	r0, r2, [r3]
   14f50:	2800      	cmp	r0, #0
   14f52:	d1f7      	bne.n	14f44 <mutex_lock_platform+0x18>
   14f54:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14f58:	d10c      	bne.n	14f74 <mutex_lock_platform+0x48>
   14f5a:	2000      	movs	r0, #0
}
   14f5c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
   14f5e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14f60:	f04f 32ff 	mov.w	r2, #4294967295
   14f64:	f04f 33ff 	mov.w	r3, #4294967295
   14f68:	f00c fd80 	bl	21a6c <z_impl_k_mutex_lock>
        if (ret == 0) {
   14f6c:	2800      	cmp	r0, #0
   14f6e:	d0f5      	beq.n	14f5c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
   14f70:	4804      	ldr	r0, [pc, #16]	; (14f84 <mutex_lock_platform+0x58>)
   14f72:	e7f3      	b.n	14f5c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14f74:	4803      	ldr	r0, [pc, #12]	; (14f84 <mutex_lock_platform+0x58>)
   14f76:	e7f1      	b.n	14f5c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14f78:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
   14f7c:	4770      	bx	lr
   14f7e:	bf00      	nop
   14f80:	ffff8fea 	.word	0xffff8fea
   14f84:	ffff8fe9 	.word	0xffff8fe9

00014f88 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14f88:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14f8a:	4604      	mov	r4, r0
   14f8c:	b188      	cbz	r0, 14fb2 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14f8e:	6863      	ldr	r3, [r4, #4]
   14f90:	2b04      	cmp	r3, #4
   14f92:	d00d      	beq.n	14fb0 <mutex_free_platform+0x28>
   14f94:	2b08      	cmp	r3, #8
   14f96:	d00b      	beq.n	14fb0 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14f98:	b153      	cbz	r3, 14fb0 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14f9a:	f013 0f02 	tst.w	r3, #2
   14f9e:	d00d      	beq.n	14fbc <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14fa0:	4621      	mov	r1, r4
   14fa2:	4809      	ldr	r0, [pc, #36]	; (14fc8 <mutex_free_platform+0x40>)
   14fa4:	f016 fb90 	bl	2b6c8 <k_mem_slab_free>
        mutex->mutex = NULL;
   14fa8:	2300      	movs	r3, #0
   14faa:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14fac:	2300      	movs	r3, #0
   14fae:	6063      	str	r3, [r4, #4]
}
   14fb0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   14fb2:	4b06      	ldr	r3, [pc, #24]	; (14fcc <mutex_free_platform+0x44>)
   14fb4:	685b      	ldr	r3, [r3, #4]
   14fb6:	4806      	ldr	r0, [pc, #24]	; (14fd0 <mutex_free_platform+0x48>)
   14fb8:	4798      	blx	r3
   14fba:	e7e8      	b.n	14f8e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14fbc:	2214      	movs	r2, #20
   14fbe:	2100      	movs	r1, #0
   14fc0:	6820      	ldr	r0, [r4, #0]
   14fc2:	f012 fe69 	bl	27c98 <memset>
   14fc6:	e7f1      	b.n	14fac <mutex_free_platform+0x24>
   14fc8:	200025ec 	.word	0x200025ec
   14fcc:	200006a8 	.word	0x200006a8
   14fd0:	0002d24c 	.word	0x0002d24c

00014fd4 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14fd4:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14fd6:	4604      	mov	r4, r0
   14fd8:	b178      	cbz	r0, 14ffa <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14fda:	6863      	ldr	r3, [r4, #4]
   14fdc:	2b04      	cmp	r3, #4
   14fde:	d00b      	beq.n	14ff8 <mutex_init_platform+0x24>
   14fe0:	2b08      	cmp	r3, #8
   14fe2:	d009      	beq.n	14ff8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   14fe4:	b90b      	cbnz	r3, 14fea <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
   14fe6:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   14fe8:	b163      	cbz	r3, 15004 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14fea:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14fec:	f016 fc0b 	bl	2b806 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14ff0:	6863      	ldr	r3, [r4, #4]
   14ff2:	f043 0301 	orr.w	r3, r3, #1
   14ff6:	6063      	str	r3, [r4, #4]
}
   14ff8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
   14ffa:	4b0f      	ldr	r3, [pc, #60]	; (15038 <mutex_init_platform+0x64>)
   14ffc:	685b      	ldr	r3, [r3, #4]
   14ffe:	480f      	ldr	r0, [pc, #60]	; (1503c <mutex_init_platform+0x68>)
   15000:	4798      	blx	r3
   15002:	e7ea      	b.n	14fda <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   15004:	f04f 32ff 	mov.w	r2, #4294967295
   15008:	f04f 33ff 	mov.w	r3, #4294967295
   1500c:	4621      	mov	r1, r4
   1500e:	480c      	ldr	r0, [pc, #48]	; (15040 <mutex_init_platform+0x6c>)
   15010:	f00c fbf2 	bl	217f8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   15014:	b908      	cbnz	r0, 1501a <mutex_init_platform+0x46>
   15016:	6823      	ldr	r3, [r4, #0]
   15018:	b91b      	cbnz	r3, 15022 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
   1501a:	4b07      	ldr	r3, [pc, #28]	; (15038 <mutex_init_platform+0x64>)
   1501c:	685b      	ldr	r3, [r3, #4]
   1501e:	4809      	ldr	r0, [pc, #36]	; (15044 <mutex_init_platform+0x70>)
   15020:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   15022:	2214      	movs	r2, #20
   15024:	2100      	movs	r1, #0
   15026:	6820      	ldr	r0, [r4, #0]
   15028:	f012 fe36 	bl	27c98 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   1502c:	6863      	ldr	r3, [r4, #4]
   1502e:	f043 0302 	orr.w	r3, r3, #2
   15032:	6063      	str	r3, [r4, #4]
   15034:	e7d9      	b.n	14fea <mutex_init_platform+0x16>
   15036:	bf00      	nop
   15038:	200006a8 	.word	0x200006a8
   1503c:	0002d24c 	.word	0x0002d24c
   15040:	200025ec 	.word	0x200025ec
   15044:	0002d274 	.word	0x0002d274

00015048 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   15048:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   1504a:	2340      	movs	r3, #64	; 0x40
   1504c:	2214      	movs	r2, #20
   1504e:	4904      	ldr	r1, [pc, #16]	; (15060 <nrf_cc3xx_platform_mutex_init+0x18>)
   15050:	4804      	ldr	r0, [pc, #16]	; (15064 <nrf_cc3xx_platform_mutex_init+0x1c>)
   15052:	f016 fb2b 	bl	2b6ac <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   15056:	4904      	ldr	r1, [pc, #16]	; (15068 <nrf_cc3xx_platform_mutex_init+0x20>)
   15058:	4804      	ldr	r0, [pc, #16]	; (1506c <nrf_cc3xx_platform_mutex_init+0x24>)
   1505a:	f00e fa73 	bl	23544 <nrf_cc3xx_platform_set_mutexes>
}
   1505e:	bd08      	pop	{r3, pc}
   15060:	20002608 	.word	0x20002608
   15064:	200025ec 	.word	0x200025ec
   15068:	0002d2b4 	.word	0x0002d2b4
   1506c:	0002d2a4 	.word	0x0002d2a4

00015070 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15070:	4901      	ldr	r1, [pc, #4]	; (15078 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   15072:	2210      	movs	r2, #16
	str	r2, [r1]
   15074:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15076:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15078:	e000ed10 	.word	0xe000ed10

0001507c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1507c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1507e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15080:	f380 8811 	msr	BASEPRI, r0
	isb
   15084:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   15088:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   1508c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   1508e:	b662      	cpsie	i
	isb
   15090:	f3bf 8f6f 	isb	sy

	bx	lr
   15094:	4770      	bx	lr
   15096:	bf00      	nop

00015098 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15098:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   1509a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   1509c:	f381 8811 	msr	BASEPRI, r1

	wfe
   150a0:	bf20      	wfe

	msr	BASEPRI, r0
   150a2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   150a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   150a8:	4770      	bx	lr
   150aa:	bf00      	nop

000150ac <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
   150ac:	b570      	push	{r4, r5, r6, lr}
   150ae:	b082      	sub	sp, #8
   150b0:	4604      	mov	r4, r0
   150b2:	4d1f      	ldr	r5, [pc, #124]	; (15130 <esf_dump+0x84>)
   150b4:	4b1f      	ldr	r3, [pc, #124]	; (15134 <esf_dump+0x88>)
   150b6:	1aed      	subs	r5, r5, r3
   150b8:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   150ba:	2601      	movs	r6, #1
   150bc:	f04f 0300 	mov.w	r3, #0
   150c0:	f366 0302 	bfi	r3, r6, #0, #3
   150c4:	f36f 03c5 	bfc	r3, #3, #3
   150c8:	f365 138f 	bfi	r3, r5, #6, #10
   150cc:	f8ad 3000 	strh.w	r3, [sp]
   150d0:	6883      	ldr	r3, [r0, #8]
   150d2:	6842      	ldr	r2, [r0, #4]
   150d4:	6801      	ldr	r1, [r0, #0]
   150d6:	4818      	ldr	r0, [pc, #96]	; (15138 <esf_dump+0x8c>)
   150d8:	f7fc feb4 	bl	11e44 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   150dc:	f04f 0300 	mov.w	r3, #0
   150e0:	f366 0302 	bfi	r3, r6, #0, #3
   150e4:	f36f 03c5 	bfc	r3, #3, #3
   150e8:	f365 138f 	bfi	r3, r5, #6, #10
   150ec:	f8ad 3000 	strh.w	r3, [sp]
   150f0:	6963      	ldr	r3, [r4, #20]
   150f2:	6922      	ldr	r2, [r4, #16]
   150f4:	68e1      	ldr	r1, [r4, #12]
   150f6:	4811      	ldr	r0, [pc, #68]	; (1513c <esf_dump+0x90>)
   150f8:	f7fc fea4 	bl	11e44 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   150fc:	f04f 0200 	mov.w	r2, #0
   15100:	f366 0202 	bfi	r2, r6, #0, #3
   15104:	f36f 02c5 	bfc	r2, #3, #3
   15108:	f365 128f 	bfi	r2, r5, #6, #10
   1510c:	69e1      	ldr	r1, [r4, #28]
   1510e:	480c      	ldr	r0, [pc, #48]	; (15140 <esf_dump+0x94>)
   15110:	f7fc fed6 	bl	11ec0 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15114:	f04f 0200 	mov.w	r2, #0
   15118:	f366 0202 	bfi	r2, r6, #0, #3
   1511c:	f36f 02c5 	bfc	r2, #3, #3
   15120:	f365 128f 	bfi	r2, r5, #6, #10
   15124:	69a1      	ldr	r1, [r4, #24]
   15126:	4807      	ldr	r0, [pc, #28]	; (15144 <esf_dump+0x98>)
   15128:	f7fc feca 	bl	11ec0 <log_1>
		esf->basic.pc);
}
   1512c:	b002      	add	sp, #8
   1512e:	bd70      	pop	{r4, r5, r6, pc}
   15130:	0002c698 	.word	0x0002c698
   15134:	0002c610 	.word	0x0002c610
   15138:	0002d2c8 	.word	0x0002d2c8
   1513c:	0002d2f8 	.word	0x0002d2f8
   15140:	0002d328 	.word	0x0002d328
   15144:	0002d338 	.word	0x0002d338

00015148 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15148:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1514a:	2b00      	cmp	r3, #0
   1514c:	db08      	blt.n	15160 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1514e:	f000 001f 	and.w	r0, r0, #31
   15152:	095b      	lsrs	r3, r3, #5
   15154:	2201      	movs	r2, #1
   15156:	fa02 f000 	lsl.w	r0, r2, r0
   1515a:	4a02      	ldr	r2, [pc, #8]	; (15164 <arch_irq_enable+0x1c>)
   1515c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   15160:	4770      	bx	lr
   15162:	bf00      	nop
   15164:	e000e100 	.word	0xe000e100

00015168 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   15168:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1516a:	2b00      	cmp	r3, #0
   1516c:	db0d      	blt.n	1518a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1516e:	f000 001f 	and.w	r0, r0, #31
   15172:	095b      	lsrs	r3, r3, #5
   15174:	2201      	movs	r2, #1
   15176:	fa02 f000 	lsl.w	r0, r2, r0
   1517a:	3320      	adds	r3, #32
   1517c:	4a03      	ldr	r2, [pc, #12]	; (1518c <arch_irq_disable+0x24>)
   1517e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   15182:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15186:	f3bf 8f6f 	isb	sy
}
   1518a:	4770      	bx	lr
   1518c:	e000e100 	.word	0xe000e100

00015190 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15190:	0942      	lsrs	r2, r0, #5
   15192:	4b05      	ldr	r3, [pc, #20]	; (151a8 <arch_irq_is_enabled+0x18>)
   15194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15198:	f000 001f 	and.w	r0, r0, #31
   1519c:	2301      	movs	r3, #1
   1519e:	fa03 f000 	lsl.w	r0, r3, r0
}
   151a2:	4010      	ands	r0, r2
   151a4:	4770      	bx	lr
   151a6:	bf00      	nop
   151a8:	e000e100 	.word	0xe000e100

000151ac <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   151ac:	f012 0f01 	tst.w	r2, #1
   151b0:	d10c      	bne.n	151cc <z_arm_irq_priority_set+0x20>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   151b2:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   151b4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   151b6:	2b00      	cmp	r3, #0
   151b8:	db0a      	blt.n	151d0 <z_arm_irq_priority_set+0x24>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   151ba:	0149      	lsls	r1, r1, #5
   151bc:	b2c9      	uxtb	r1, r1
   151be:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   151c2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   151c6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   151ca:	4770      	bx	lr
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   151cc:	2100      	movs	r1, #0
   151ce:	e7f1      	b.n	151b4 <z_arm_irq_priority_set+0x8>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   151d0:	f000 000f 	and.w	r0, r0, #15
   151d4:	0149      	lsls	r1, r1, #5
   151d6:	b2c9      	uxtb	r1, r1
   151d8:	4b01      	ldr	r3, [pc, #4]	; (151e0 <z_arm_irq_priority_set+0x34>)
   151da:	5419      	strb	r1, [r3, r0]
}
   151dc:	4770      	bx	lr
   151de:	bf00      	nop
   151e0:	e000ed14 	.word	0xe000ed14

000151e4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   151e4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   151e6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   151e8:	4b04      	ldr	r3, [pc, #16]	; (151fc <_arch_isr_direct_pm+0x18>)
   151ea:	6998      	ldr	r0, [r3, #24]
   151ec:	b908      	cbnz	r0, 151f2 <_arch_isr_direct_pm+0xe>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   151ee:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   151f0:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   151f2:	2200      	movs	r2, #0
   151f4:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit(idle_val);
   151f6:	f016 fade 	bl	2b7b6 <z_pm_save_idle_exit>
   151fa:	e7f8      	b.n	151ee <_arch_isr_direct_pm+0xa>
   151fc:	20003e08 	.word	0x20003e08

00015200 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15200:	bf30      	wfi
    b z_SysNmiOnReset
   15202:	f7ff bffd 	b.w	15200 <z_SysNmiOnReset>
   15206:	bf00      	nop

00015208 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   15208:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1520a:	4b0b      	ldr	r3, [pc, #44]	; (15238 <z_arm_prep_c+0x30>)
   1520c:	4a0b      	ldr	r2, [pc, #44]	; (1523c <z_arm_prep_c+0x34>)
   1520e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   15212:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   15214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15218:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1521c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15220:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   15224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   15228:	f00c fa70 	bl	2170c <z_bss_zero>
	z_data_copy();
   1522c:	f00d fb56 	bl	228dc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15230:	f000 fcb6 	bl	15ba0 <z_arm_interrupt_init>
	z_cstart();
   15234:	f00c fa76 	bl	21724 <z_cstart>
   15238:	e000ed00 	.word	0xe000ed00
   1523c:	00001000 	.word	0x00001000

00015240 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15240:	4a0a      	ldr	r2, [pc, #40]	; (1526c <arch_swap+0x2c>)
   15242:	6893      	ldr	r3, [r2, #8]
   15244:	f8c3 00ac 	str.w	r0, [r3, #172]	; 0xac
	_current->arch.swap_return_value = _k_neg_eagain;
   15248:	4909      	ldr	r1, [pc, #36]	; (15270 <arch_swap+0x30>)
   1524a:	6809      	ldr	r1, [r1, #0]
   1524c:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15250:	4908      	ldr	r1, [pc, #32]	; (15274 <arch_swap+0x34>)
   15252:	684b      	ldr	r3, [r1, #4]
   15254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15258:	604b      	str	r3, [r1, #4]
   1525a:	2300      	movs	r3, #0
   1525c:	f383 8811 	msr	BASEPRI, r3
   15260:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15264:	6893      	ldr	r3, [r2, #8]
}
   15266:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
   1526a:	4770      	bx	lr
   1526c:	20003e08 	.word	0x20003e08
   15270:	0002f148 	.word	0x0002f148
   15274:	e000ed00 	.word	0xe000ed00

00015278 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   15278:	4913      	ldr	r1, [pc, #76]	; (152c8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1527a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   1527c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   15280:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   15282:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   15286:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1528a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1528c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   15290:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   15294:	4f0d      	ldr	r7, [pc, #52]	; (152cc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   15296:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1529a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   1529c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1529e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   152a0:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    movs r3, #0
   152a4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   152a6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   152aa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   152ae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   152b0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   152b2:	f000 fd17 	bl	15ce4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   152b6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   152ba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   152be:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   152c2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   152c6:	4770      	bx	lr
    ldr r1, =_kernel
   152c8:	20003e08 	.word	0x20003e08
    ldr v4, =_SCS_ICSR
   152cc:	e000ed04 	.word	0xe000ed04

000152d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   152d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   152d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   152d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   152da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   152de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   152e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   152e4:	2902      	cmp	r1, #2
    beq _oops
   152e6:	d0ff      	beq.n	152e8 <_oops>

000152e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   152e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   152ea:	f012 fbd4 	bl	27a96 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   152ee:	bd01      	pop	{r0, pc}

000152f0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
   152f0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   152f2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
   152f6:	490d      	ldr	r1, [pc, #52]	; (1532c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
   152f8:	f021 0101 	bic.w	r1, r1, #1
   152fc:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
   15300:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   15304:	9b01      	ldr	r3, [sp, #4]
   15306:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
   1530a:	9b02      	ldr	r3, [sp, #8]
   1530c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   15310:	9b03      	ldr	r3, [sp, #12]
   15312:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15316:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1531a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
   1531e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   15320:	2300      	movs	r3, #0
   15322:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   15326:	bc10      	pop	{r4}
   15328:	4770      	bx	lr
   1532a:	bf00      	nop
   1532c:	00025ff3 	.word	0x00025ff3

00015330 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15330:	4b16      	ldr	r3, [pc, #88]	; (1538c <z_check_thread_stack_fail+0x5c>)
   15332:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
   15334:	b1da      	cbz	r2, 1536e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15336:	f110 0f16 	cmn.w	r0, #22
   1533a:	d01a      	beq.n	15372 <z_check_thread_stack_fail+0x42>
{
   1533c:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   1533e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   15342:	f1a3 0420 	sub.w	r4, r3, #32
   15346:	4284      	cmp	r4, r0
   15348:	d805      	bhi.n	15356 <z_check_thread_stack_fail+0x26>
   1534a:	4283      	cmp	r3, r0
   1534c:	d908      	bls.n	15360 <z_check_thread_stack_fail+0x30>
   1534e:	428b      	cmp	r3, r1
   15350:	d808      	bhi.n	15364 <z_check_thread_stack_fail+0x34>
   15352:	2100      	movs	r1, #0
   15354:	e000      	b.n	15358 <z_check_thread_stack_fail+0x28>
   15356:	2100      	movs	r1, #0
   15358:	b931      	cbnz	r1, 15368 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   1535a:	2000      	movs	r0, #0
}
   1535c:	bc10      	pop	{r4}
   1535e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15360:	2100      	movs	r1, #0
   15362:	e7f9      	b.n	15358 <z_check_thread_stack_fail+0x28>
   15364:	2101      	movs	r1, #1
   15366:	e7f7      	b.n	15358 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
   15368:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   1536c:	e7f6      	b.n	1535c <z_check_thread_stack_fail+0x2c>
		return 0;
   1536e:	2000      	movs	r0, #0
   15370:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15372:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   15376:	428b      	cmp	r3, r1
   15378:	bf94      	ite	ls
   1537a:	2100      	movls	r1, #0
   1537c:	2101      	movhi	r1, #1
   1537e:	b909      	cbnz	r1, 15384 <z_check_thread_stack_fail+0x54>
	return 0;
   15380:	2000      	movs	r0, #0
}
   15382:	4770      	bx	lr
		return thread->stack_info.start;
   15384:	f8d2 009c 	ldr.w	r0, [r2, #156]	; 0x9c
   15388:	4770      	bx	lr
   1538a:	bf00      	nop
   1538c:	20003e08 	.word	0x20003e08

00015390 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15390:	b508      	push	{r3, lr}
   15392:	460d      	mov	r5, r1
   15394:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15396:	4b08      	ldr	r3, [pc, #32]	; (153b8 <arch_switch_to_main_thread+0x28>)
   15398:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   1539a:	f000 fca3 	bl	15ce4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1539e:	4620      	mov	r0, r4
   153a0:	f385 8809 	msr	PSP, r5
   153a4:	2100      	movs	r1, #0
   153a6:	b663      	cpsie	if
   153a8:	f381 8811 	msr	BASEPRI, r1
   153ac:	f3bf 8f6f 	isb	sy
   153b0:	2200      	movs	r2, #0
   153b2:	2300      	movs	r3, #0
   153b4:	f010 fe1d 	bl	25ff2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   153b8:	20003e08 	.word	0x20003e08

000153bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   153bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   153be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   153c0:	4a0b      	ldr	r2, [pc, #44]	; (153f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   153c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   153c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   153c6:	bf1e      	ittt	ne
	movne	r1, #0
   153c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   153ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   153cc:	f016 f9f3 	blne	2b7b6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   153d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   153d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   153d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   153da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   153de:	4905      	ldr	r1, [pc, #20]	; (153f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   153e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   153e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   153e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   153e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   153ea:	4903      	ldr	r1, [pc, #12]	; (153f8 <_isr_wrapper+0x3c>)
	bx r1
   153ec:	4708      	bx	r1
   153ee:	0000      	.short	0x0000
	ldr r2, =_kernel
   153f0:	20003e08 	.word	0x20003e08
	ldr r1, =_sw_isr_table
   153f4:	0002c448 	.word	0x0002c448
	ldr r1, =z_arm_int_exit
   153f8:	000153fd 	.word	0x000153fd

000153fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   153fc:	4b04      	ldr	r3, [pc, #16]	; (15410 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   153fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   15400:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   15402:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   15404:	d003      	beq.n	1540e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   15406:	4903      	ldr	r1, [pc, #12]	; (15414 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   15408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   1540c:	600a      	str	r2, [r1, #0]

0001540e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1540e:	4770      	bx	lr
	ldr r3, =_kernel
   15410:	20003e08 	.word	0x20003e08
	ldr r1, =_SCS_ICSR
   15414:	e000ed04 	.word	0xe000ed04

00015418 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
   15418:	b508      	push	{r3, lr}
   1541a:	4b4e      	ldr	r3, [pc, #312]	; (15554 <usage_fault+0x13c>)
   1541c:	4a4e      	ldr	r2, [pc, #312]	; (15558 <usage_fault+0x140>)
   1541e:	1a9b      	subs	r3, r3, r2
   15420:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   15422:	f04f 0100 	mov.w	r1, #0
   15426:	2201      	movs	r2, #1
   15428:	f362 0102 	bfi	r1, r2, #0, #3
   1542c:	f36f 01c5 	bfc	r1, #3, #3
   15430:	f363 118f 	bfi	r1, r3, #6, #10
   15434:	4849      	ldr	r0, [pc, #292]	; (1555c <usage_fault+0x144>)
   15436:	f7fc fdf9 	bl	1202c <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1543a:	4b49      	ldr	r3, [pc, #292]	; (15560 <usage_fault+0x148>)
   1543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1543e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15442:	d121      	bne.n	15488 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   15444:	4b46      	ldr	r3, [pc, #280]	; (15560 <usage_fault+0x148>)
   15446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15448:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1544c:	d12d      	bne.n	154aa <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1544e:	4b44      	ldr	r3, [pc, #272]	; (15560 <usage_fault+0x148>)
   15450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15452:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   15456:	d139      	bne.n	154cc <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   15458:	4b41      	ldr	r3, [pc, #260]	; (15560 <usage_fault+0x148>)
   1545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1545c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   15460:	d145      	bne.n	154ee <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   15462:	4b3f      	ldr	r3, [pc, #252]	; (15560 <usage_fault+0x148>)
   15464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15466:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   1546a:	d151      	bne.n	15510 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1546c:	4b3c      	ldr	r3, [pc, #240]	; (15560 <usage_fault+0x148>)
   1546e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15470:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   15474:	d15d      	bne.n	15532 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15476:	4a3a      	ldr	r2, [pc, #232]	; (15560 <usage_fault+0x148>)
   15478:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1547a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1547e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   15482:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15484:	2000      	movs	r0, #0
   15486:	bd08      	pop	{r3, pc}
   15488:	4b32      	ldr	r3, [pc, #200]	; (15554 <usage_fault+0x13c>)
   1548a:	4a33      	ldr	r2, [pc, #204]	; (15558 <usage_fault+0x140>)
   1548c:	1a9b      	subs	r3, r3, r2
   1548e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
   15490:	f04f 0100 	mov.w	r1, #0
   15494:	2201      	movs	r2, #1
   15496:	f362 0102 	bfi	r1, r2, #0, #3
   1549a:	f36f 01c5 	bfc	r1, #3, #3
   1549e:	f363 118f 	bfi	r1, r3, #6, #10
   154a2:	4830      	ldr	r0, [pc, #192]	; (15564 <usage_fault+0x14c>)
   154a4:	f7fc fdc2 	bl	1202c <log_0>
   154a8:	e7cc      	b.n	15444 <usage_fault+0x2c>
   154aa:	4b2a      	ldr	r3, [pc, #168]	; (15554 <usage_fault+0x13c>)
   154ac:	4a2a      	ldr	r2, [pc, #168]	; (15558 <usage_fault+0x140>)
   154ae:	1a9b      	subs	r3, r3, r2
   154b0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
   154b2:	f04f 0100 	mov.w	r1, #0
   154b6:	2201      	movs	r2, #1
   154b8:	f362 0102 	bfi	r1, r2, #0, #3
   154bc:	f36f 01c5 	bfc	r1, #3, #3
   154c0:	f363 118f 	bfi	r1, r3, #6, #10
   154c4:	4828      	ldr	r0, [pc, #160]	; (15568 <usage_fault+0x150>)
   154c6:	f7fc fdb1 	bl	1202c <log_0>
   154ca:	e7c0      	b.n	1544e <usage_fault+0x36>
   154cc:	4b21      	ldr	r3, [pc, #132]	; (15554 <usage_fault+0x13c>)
   154ce:	4a22      	ldr	r2, [pc, #136]	; (15558 <usage_fault+0x140>)
   154d0:	1a9b      	subs	r3, r3, r2
   154d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
   154d4:	f04f 0100 	mov.w	r1, #0
   154d8:	2201      	movs	r2, #1
   154da:	f362 0102 	bfi	r1, r2, #0, #3
   154de:	f36f 01c5 	bfc	r1, #3, #3
   154e2:	f363 118f 	bfi	r1, r3, #6, #10
   154e6:	4821      	ldr	r0, [pc, #132]	; (1556c <usage_fault+0x154>)
   154e8:	f7fc fda0 	bl	1202c <log_0>
   154ec:	e7b4      	b.n	15458 <usage_fault+0x40>
   154ee:	4b19      	ldr	r3, [pc, #100]	; (15554 <usage_fault+0x13c>)
   154f0:	4a19      	ldr	r2, [pc, #100]	; (15558 <usage_fault+0x140>)
   154f2:	1a9b      	subs	r3, r3, r2
   154f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   154f6:	f04f 0100 	mov.w	r1, #0
   154fa:	2201      	movs	r2, #1
   154fc:	f362 0102 	bfi	r1, r2, #0, #3
   15500:	f36f 01c5 	bfc	r1, #3, #3
   15504:	f363 118f 	bfi	r1, r3, #6, #10
   15508:	4819      	ldr	r0, [pc, #100]	; (15570 <usage_fault+0x158>)
   1550a:	f7fc fd8f 	bl	1202c <log_0>
   1550e:	e7a8      	b.n	15462 <usage_fault+0x4a>
   15510:	4b10      	ldr	r3, [pc, #64]	; (15554 <usage_fault+0x13c>)
   15512:	4a11      	ldr	r2, [pc, #68]	; (15558 <usage_fault+0x140>)
   15514:	1a9b      	subs	r3, r3, r2
   15516:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
   15518:	f04f 0100 	mov.w	r1, #0
   1551c:	2201      	movs	r2, #1
   1551e:	f362 0102 	bfi	r1, r2, #0, #3
   15522:	f36f 01c5 	bfc	r1, #3, #3
   15526:	f363 118f 	bfi	r1, r3, #6, #10
   1552a:	4812      	ldr	r0, [pc, #72]	; (15574 <usage_fault+0x15c>)
   1552c:	f7fc fd7e 	bl	1202c <log_0>
   15530:	e79c      	b.n	1546c <usage_fault+0x54>
   15532:	4b08      	ldr	r3, [pc, #32]	; (15554 <usage_fault+0x13c>)
   15534:	4a08      	ldr	r2, [pc, #32]	; (15558 <usage_fault+0x140>)
   15536:	1a9b      	subs	r3, r3, r2
   15538:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1553a:	f04f 0100 	mov.w	r1, #0
   1553e:	2201      	movs	r2, #1
   15540:	f362 0102 	bfi	r1, r2, #0, #3
   15544:	f36f 01c5 	bfc	r1, #3, #3
   15548:	f363 118f 	bfi	r1, r3, #6, #10
   1554c:	480a      	ldr	r0, [pc, #40]	; (15578 <usage_fault+0x160>)
   1554e:	f7fc fd6d 	bl	1202c <log_0>
   15552:	e790      	b.n	15476 <usage_fault+0x5e>
   15554:	0002c698 	.word	0x0002c698
   15558:	0002c610 	.word	0x0002c610
   1555c:	0002d368 	.word	0x0002d368
   15560:	e000ed00 	.word	0xe000ed00
   15564:	0002d380 	.word	0x0002d380
   15568:	0002d394 	.word	0x0002d394
   1556c:	0002d3b0 	.word	0x0002d3b0
   15570:	0002d3d0 	.word	0x0002d3d0
   15574:	0002d3f8 	.word	0x0002d3f8
   15578:	0002d414 	.word	0x0002d414

0001557c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
   1557c:	b508      	push	{r3, lr}
	*recoverable = false;
   1557e:	2200      	movs	r2, #0
   15580:	700a      	strb	r2, [r1, #0]
   15582:	4b08      	ldr	r3, [pc, #32]	; (155a4 <debug_monitor+0x28>)
   15584:	4908      	ldr	r1, [pc, #32]	; (155a8 <debug_monitor+0x2c>)
   15586:	1a5b      	subs	r3, r3, r1
   15588:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
   1558a:	f04f 0100 	mov.w	r1, #0
   1558e:	2001      	movs	r0, #1
   15590:	f360 0102 	bfi	r1, r0, #0, #3
   15594:	f362 01c5 	bfi	r1, r2, #3, #3
   15598:	f363 118f 	bfi	r1, r3, #6, #10
   1559c:	4803      	ldr	r0, [pc, #12]	; (155ac <debug_monitor+0x30>)
   1559e:	f7fc fd45 	bl	1202c <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
   155a2:	bd08      	pop	{r3, pc}
   155a4:	0002c698 	.word	0x0002c698
   155a8:	0002c610 	.word	0x0002c610
   155ac:	0002d440 	.word	0x0002d440

000155b0 <bus_fault>:
{
   155b0:	b570      	push	{r4, r5, r6, lr}
   155b2:	4605      	mov	r5, r0
   155b4:	460e      	mov	r6, r1
   155b6:	4614      	mov	r4, r2
   155b8:	4b5e      	ldr	r3, [pc, #376]	; (15734 <bus_fault+0x184>)
   155ba:	4a5f      	ldr	r2, [pc, #380]	; (15738 <bus_fault+0x188>)
   155bc:	1a9b      	subs	r3, r3, r2
   155be:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   155c0:	f04f 0100 	mov.w	r1, #0
   155c4:	2201      	movs	r2, #1
   155c6:	f362 0102 	bfi	r1, r2, #0, #3
   155ca:	f36f 01c5 	bfc	r1, #3, #3
   155ce:	f363 118f 	bfi	r1, r3, #6, #10
   155d2:	485a      	ldr	r0, [pc, #360]	; (1573c <bus_fault+0x18c>)
   155d4:	f7fc fd2a 	bl	1202c <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   155d8:	4b59      	ldr	r3, [pc, #356]	; (15740 <bus_fault+0x190>)
   155da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155dc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   155e0:	d124      	bne.n	1562c <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   155e2:	4b57      	ldr	r3, [pc, #348]	; (15740 <bus_fault+0x190>)
   155e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
   155ea:	d130      	bne.n	1564e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   155ec:	4b54      	ldr	r3, [pc, #336]	; (15740 <bus_fault+0x190>)
   155ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155f0:	f413 7f00 	tst.w	r3, #512	; 0x200
   155f4:	d13c      	bne.n	15670 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   155f6:	4b52      	ldr	r3, [pc, #328]	; (15740 <bus_fault+0x190>)
   155f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155fa:	f413 6f80 	tst.w	r3, #1024	; 0x400
   155fe:	d165      	bne.n	156cc <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   15600:	4b4f      	ldr	r3, [pc, #316]	; (15740 <bus_fault+0x190>)
   15602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15604:	f413 7f80 	tst.w	r3, #256	; 0x100
   15608:	d171      	bne.n	156ee <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1560a:	4b4d      	ldr	r3, [pc, #308]	; (15740 <bus_fault+0x190>)
   1560c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1560e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15612:	d17d      	bne.n	15710 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   15614:	4a4a      	ldr	r2, [pc, #296]	; (15740 <bus_fault+0x190>)
   15616:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15618:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   1561c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1561e:	2101      	movs	r1, #1
   15620:	4628      	mov	r0, r5
   15622:	f012 fa4a 	bl	27aba <memory_fault_recoverable>
   15626:	7020      	strb	r0, [r4, #0]
}
   15628:	2000      	movs	r0, #0
   1562a:	bd70      	pop	{r4, r5, r6, pc}
   1562c:	4b41      	ldr	r3, [pc, #260]	; (15734 <bus_fault+0x184>)
   1562e:	4a42      	ldr	r2, [pc, #264]	; (15738 <bus_fault+0x188>)
   15630:	1a9b      	subs	r3, r3, r2
   15632:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
   15634:	f04f 0100 	mov.w	r1, #0
   15638:	2201      	movs	r2, #1
   1563a:	f362 0102 	bfi	r1, r2, #0, #3
   1563e:	f36f 01c5 	bfc	r1, #3, #3
   15642:	f363 118f 	bfi	r1, r3, #6, #10
   15646:	483f      	ldr	r0, [pc, #252]	; (15744 <bus_fault+0x194>)
   15648:	f7fc fcf0 	bl	1202c <log_0>
   1564c:	e7c9      	b.n	155e2 <bus_fault+0x32>
   1564e:	4b39      	ldr	r3, [pc, #228]	; (15734 <bus_fault+0x184>)
   15650:	4a39      	ldr	r2, [pc, #228]	; (15738 <bus_fault+0x188>)
   15652:	1a9b      	subs	r3, r3, r2
   15654:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   15656:	f04f 0100 	mov.w	r1, #0
   1565a:	2201      	movs	r2, #1
   1565c:	f362 0102 	bfi	r1, r2, #0, #3
   15660:	f36f 01c5 	bfc	r1, #3, #3
   15664:	f363 118f 	bfi	r1, r3, #6, #10
   15668:	4837      	ldr	r0, [pc, #220]	; (15748 <bus_fault+0x198>)
   1566a:	f7fc fcdf 	bl	1202c <log_0>
   1566e:	e7bd      	b.n	155ec <bus_fault+0x3c>
   15670:	4b30      	ldr	r3, [pc, #192]	; (15734 <bus_fault+0x184>)
   15672:	4a31      	ldr	r2, [pc, #196]	; (15738 <bus_fault+0x188>)
   15674:	1a9b      	subs	r3, r3, r2
   15676:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
   15678:	f04f 0100 	mov.w	r1, #0
   1567c:	2201      	movs	r2, #1
   1567e:	f362 0102 	bfi	r1, r2, #0, #3
   15682:	f36f 01c5 	bfc	r1, #3, #3
   15686:	f363 118f 	bfi	r1, r3, #6, #10
   1568a:	4830      	ldr	r0, [pc, #192]	; (1574c <bus_fault+0x19c>)
   1568c:	f7fc fcce 	bl	1202c <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   15690:	4b2b      	ldr	r3, [pc, #172]	; (15740 <bus_fault+0x190>)
   15692:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15696:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1569a:	d0ac      	beq.n	155f6 <bus_fault+0x46>
   1569c:	4b25      	ldr	r3, [pc, #148]	; (15734 <bus_fault+0x184>)
   1569e:	4a26      	ldr	r2, [pc, #152]	; (15738 <bus_fault+0x188>)
   156a0:	1a9b      	subs	r3, r3, r2
   156a2:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
   156a4:	f04f 0200 	mov.w	r2, #0
   156a8:	2001      	movs	r0, #1
   156aa:	f360 0202 	bfi	r2, r0, #0, #3
   156ae:	f36f 02c5 	bfc	r2, #3, #3
   156b2:	f363 128f 	bfi	r2, r3, #6, #10
   156b6:	4826      	ldr	r0, [pc, #152]	; (15750 <bus_fault+0x1a0>)
   156b8:	f7fc fc02 	bl	11ec0 <log_1>
			if (from_hard_fault != 0) {
   156bc:	2e00      	cmp	r6, #0
   156be:	d09a      	beq.n	155f6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   156c0:	4a1f      	ldr	r2, [pc, #124]	; (15740 <bus_fault+0x190>)
   156c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   156c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   156c8:	6293      	str	r3, [r2, #40]	; 0x28
   156ca:	e794      	b.n	155f6 <bus_fault+0x46>
   156cc:	4b19      	ldr	r3, [pc, #100]	; (15734 <bus_fault+0x184>)
   156ce:	4a1a      	ldr	r2, [pc, #104]	; (15738 <bus_fault+0x188>)
   156d0:	1a9b      	subs	r3, r3, r2
   156d2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
   156d4:	f04f 0100 	mov.w	r1, #0
   156d8:	2201      	movs	r2, #1
   156da:	f362 0102 	bfi	r1, r2, #0, #3
   156de:	f36f 01c5 	bfc	r1, #3, #3
   156e2:	f363 118f 	bfi	r1, r3, #6, #10
   156e6:	481b      	ldr	r0, [pc, #108]	; (15754 <bus_fault+0x1a4>)
   156e8:	f7fc fca0 	bl	1202c <log_0>
   156ec:	e788      	b.n	15600 <bus_fault+0x50>
   156ee:	4b11      	ldr	r3, [pc, #68]	; (15734 <bus_fault+0x184>)
   156f0:	4a11      	ldr	r2, [pc, #68]	; (15738 <bus_fault+0x188>)
   156f2:	1a9b      	subs	r3, r3, r2
   156f4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
   156f6:	f04f 0100 	mov.w	r1, #0
   156fa:	2201      	movs	r2, #1
   156fc:	f362 0102 	bfi	r1, r2, #0, #3
   15700:	f36f 01c5 	bfc	r1, #3, #3
   15704:	f363 118f 	bfi	r1, r3, #6, #10
   15708:	4813      	ldr	r0, [pc, #76]	; (15758 <bus_fault+0x1a8>)
   1570a:	f7fc fc8f 	bl	1202c <log_0>
   1570e:	e781      	b.n	15614 <bus_fault+0x64>
   15710:	4b08      	ldr	r3, [pc, #32]	; (15734 <bus_fault+0x184>)
   15712:	4a09      	ldr	r2, [pc, #36]	; (15738 <bus_fault+0x188>)
   15714:	1a9b      	subs	r3, r3, r2
   15716:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15718:	f04f 0100 	mov.w	r1, #0
   1571c:	2201      	movs	r2, #1
   1571e:	f362 0102 	bfi	r1, r2, #0, #3
   15722:	f36f 01c5 	bfc	r1, #3, #3
   15726:	f363 118f 	bfi	r1, r3, #6, #10
   1572a:	480c      	ldr	r0, [pc, #48]	; (1575c <bus_fault+0x1ac>)
   1572c:	f7fc fc7e 	bl	1202c <log_0>
   15730:	e770      	b.n	15614 <bus_fault+0x64>
   15732:	bf00      	nop
   15734:	0002c698 	.word	0x0002c698
   15738:	0002c610 	.word	0x0002c610
   1573c:	0002d464 	.word	0x0002d464
   15740:	e000ed00 	.word	0xe000ed00
   15744:	0002d47c 	.word	0x0002d47c
   15748:	0002d490 	.word	0x0002d490
   1574c:	0002d4a4 	.word	0x0002d4a4
   15750:	0002d4c0 	.word	0x0002d4c0
   15754:	0002d4d8 	.word	0x0002d4d8
   15758:	0002d4f4 	.word	0x0002d4f4
   1575c:	0002d50c 	.word	0x0002d50c

00015760 <mem_manage_fault>:
{
   15760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15762:	4605      	mov	r5, r0
   15764:	460c      	mov	r4, r1
   15766:	4616      	mov	r6, r2
   15768:	4b64      	ldr	r3, [pc, #400]	; (158fc <mem_manage_fault+0x19c>)
   1576a:	4a65      	ldr	r2, [pc, #404]	; (15900 <mem_manage_fault+0x1a0>)
   1576c:	1a9b      	subs	r3, r3, r2
   1576e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   15770:	f04f 0100 	mov.w	r1, #0
   15774:	2201      	movs	r2, #1
   15776:	f362 0102 	bfi	r1, r2, #0, #3
   1577a:	f36f 01c5 	bfc	r1, #3, #3
   1577e:	f363 118f 	bfi	r1, r3, #6, #10
   15782:	4860      	ldr	r0, [pc, #384]	; (15904 <mem_manage_fault+0x1a4>)
   15784:	f7fc fc52 	bl	1202c <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15788:	4b5f      	ldr	r3, [pc, #380]	; (15908 <mem_manage_fault+0x1a8>)
   1578a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1578c:	f013 0f10 	tst.w	r3, #16
   15790:	d132      	bne.n	157f8 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   15792:	4b5d      	ldr	r3, [pc, #372]	; (15908 <mem_manage_fault+0x1a8>)
   15794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15796:	f013 0f08 	tst.w	r3, #8
   1579a:	d13e      	bne.n	1581a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1579c:	4b5a      	ldr	r3, [pc, #360]	; (15908 <mem_manage_fault+0x1a8>)
   1579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157a0:	f013 0f02 	tst.w	r3, #2
   157a4:	d14a      	bne.n	1583c <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
   157a6:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   157aa:	4b57      	ldr	r3, [pc, #348]	; (15908 <mem_manage_fault+0x1a8>)
   157ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157ae:	f013 0f01 	tst.w	r3, #1
   157b2:	d175      	bne.n	158a0 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   157b4:	4b54      	ldr	r3, [pc, #336]	; (15908 <mem_manage_fault+0x1a8>)
   157b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157b8:	f013 0f20 	tst.w	r3, #32
   157bc:	f040 8081 	bne.w	158c2 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157c0:	4b51      	ldr	r3, [pc, #324]	; (15908 <mem_manage_fault+0x1a8>)
   157c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   157c4:	f013 0f10 	tst.w	r3, #16
   157c8:	d104      	bne.n	157d4 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   157ca:	4b4f      	ldr	r3, [pc, #316]	; (15908 <mem_manage_fault+0x1a8>)
   157cc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   157ce:	f014 0402 	ands.w	r4, r4, #2
   157d2:	d005      	beq.n	157e0 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   157d4:	4b4c      	ldr	r3, [pc, #304]	; (15908 <mem_manage_fault+0x1a8>)
   157d6:	685c      	ldr	r4, [r3, #4]
   157d8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   157dc:	f040 8082 	bne.w	158e4 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   157e0:	4a49      	ldr	r2, [pc, #292]	; (15908 <mem_manage_fault+0x1a8>)
   157e2:	6a93      	ldr	r3, [r2, #40]	; 0x28
   157e4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   157e8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   157ea:	2101      	movs	r1, #1
   157ec:	4628      	mov	r0, r5
   157ee:	f012 f964 	bl	27aba <memory_fault_recoverable>
   157f2:	7030      	strb	r0, [r6, #0]
}
   157f4:	4620      	mov	r0, r4
   157f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   157f8:	4b40      	ldr	r3, [pc, #256]	; (158fc <mem_manage_fault+0x19c>)
   157fa:	4a41      	ldr	r2, [pc, #260]	; (15900 <mem_manage_fault+0x1a0>)
   157fc:	1a9b      	subs	r3, r3, r2
   157fe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
   15800:	f04f 0100 	mov.w	r1, #0
   15804:	2201      	movs	r2, #1
   15806:	f362 0102 	bfi	r1, r2, #0, #3
   1580a:	f36f 01c5 	bfc	r1, #3, #3
   1580e:	f363 118f 	bfi	r1, r3, #6, #10
   15812:	483e      	ldr	r0, [pc, #248]	; (1590c <mem_manage_fault+0x1ac>)
   15814:	f7fc fc0a 	bl	1202c <log_0>
   15818:	e7bb      	b.n	15792 <mem_manage_fault+0x32>
   1581a:	4b38      	ldr	r3, [pc, #224]	; (158fc <mem_manage_fault+0x19c>)
   1581c:	4a38      	ldr	r2, [pc, #224]	; (15900 <mem_manage_fault+0x1a0>)
   1581e:	1a9b      	subs	r3, r3, r2
   15820:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
   15822:	f04f 0100 	mov.w	r1, #0
   15826:	2201      	movs	r2, #1
   15828:	f362 0102 	bfi	r1, r2, #0, #3
   1582c:	f36f 01c5 	bfc	r1, #3, #3
   15830:	f363 118f 	bfi	r1, r3, #6, #10
   15834:	4836      	ldr	r0, [pc, #216]	; (15910 <mem_manage_fault+0x1b0>)
   15836:	f7fc fbf9 	bl	1202c <log_0>
   1583a:	e7af      	b.n	1579c <mem_manage_fault+0x3c>
   1583c:	4b2f      	ldr	r3, [pc, #188]	; (158fc <mem_manage_fault+0x19c>)
   1583e:	4a30      	ldr	r2, [pc, #192]	; (15900 <mem_manage_fault+0x1a0>)
   15840:	1a9b      	subs	r3, r3, r2
   15842:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
   15844:	f04f 0100 	mov.w	r1, #0
   15848:	2201      	movs	r2, #1
   1584a:	f362 0102 	bfi	r1, r2, #0, #3
   1584e:	f36f 01c5 	bfc	r1, #3, #3
   15852:	f363 118f 	bfi	r1, r3, #6, #10
   15856:	482f      	ldr	r0, [pc, #188]	; (15914 <mem_manage_fault+0x1b4>)
   15858:	f7fc fbe8 	bl	1202c <log_0>
		uint32_t temp = SCB->MMFAR;
   1585c:	4b2a      	ldr	r3, [pc, #168]	; (15908 <mem_manage_fault+0x1a8>)
   1585e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   15860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15862:	f013 0f80 	tst.w	r3, #128	; 0x80
   15866:	d102      	bne.n	1586e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
   15868:	f06f 0715 	mvn.w	r7, #21
   1586c:	e79d      	b.n	157aa <mem_manage_fault+0x4a>
   1586e:	4b23      	ldr	r3, [pc, #140]	; (158fc <mem_manage_fault+0x19c>)
   15870:	4a23      	ldr	r2, [pc, #140]	; (15900 <mem_manage_fault+0x1a0>)
   15872:	1a9b      	subs	r3, r3, r2
   15874:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   15876:	f04f 0200 	mov.w	r2, #0
   1587a:	2101      	movs	r1, #1
   1587c:	f361 0202 	bfi	r2, r1, #0, #3
   15880:	f36f 02c5 	bfc	r2, #3, #3
   15884:	f363 128f 	bfi	r2, r3, #6, #10
   15888:	4639      	mov	r1, r7
   1588a:	4823      	ldr	r0, [pc, #140]	; (15918 <mem_manage_fault+0x1b8>)
   1588c:	f7fc fb18 	bl	11ec0 <log_1>
			if (from_hard_fault != 0) {
   15890:	2c00      	cmp	r4, #0
   15892:	d08a      	beq.n	157aa <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15894:	4a1c      	ldr	r2, [pc, #112]	; (15908 <mem_manage_fault+0x1a8>)
   15896:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1589c:	6293      	str	r3, [r2, #40]	; 0x28
   1589e:	e784      	b.n	157aa <mem_manage_fault+0x4a>
   158a0:	4b16      	ldr	r3, [pc, #88]	; (158fc <mem_manage_fault+0x19c>)
   158a2:	4a17      	ldr	r2, [pc, #92]	; (15900 <mem_manage_fault+0x1a0>)
   158a4:	1a9b      	subs	r3, r3, r2
   158a6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
   158a8:	f04f 0100 	mov.w	r1, #0
   158ac:	2201      	movs	r2, #1
   158ae:	f362 0102 	bfi	r1, r2, #0, #3
   158b2:	f36f 01c5 	bfc	r1, #3, #3
   158b6:	f363 118f 	bfi	r1, r3, #6, #10
   158ba:	4818      	ldr	r0, [pc, #96]	; (1591c <mem_manage_fault+0x1bc>)
   158bc:	f7fc fbb6 	bl	1202c <log_0>
   158c0:	e778      	b.n	157b4 <mem_manage_fault+0x54>
   158c2:	4b0e      	ldr	r3, [pc, #56]	; (158fc <mem_manage_fault+0x19c>)
   158c4:	4a0e      	ldr	r2, [pc, #56]	; (15900 <mem_manage_fault+0x1a0>)
   158c6:	1a9b      	subs	r3, r3, r2
   158c8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
   158ca:	f04f 0100 	mov.w	r1, #0
   158ce:	2201      	movs	r2, #1
   158d0:	f362 0102 	bfi	r1, r2, #0, #3
   158d4:	f36f 01c5 	bfc	r1, #3, #3
   158d8:	f363 118f 	bfi	r1, r3, #6, #10
   158dc:	4810      	ldr	r0, [pc, #64]	; (15920 <mem_manage_fault+0x1c0>)
   158de:	f7fc fba5 	bl	1202c <log_0>
   158e2:	e76d      	b.n	157c0 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   158e4:	4629      	mov	r1, r5
   158e6:	4638      	mov	r0, r7
   158e8:	f7ff fd22 	bl	15330 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   158ec:	4604      	mov	r4, r0
   158ee:	2800      	cmp	r0, #0
   158f0:	f43f af76 	beq.w	157e0 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   158f4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   158f8:	2402      	movs	r4, #2
   158fa:	e771      	b.n	157e0 <mem_manage_fault+0x80>
   158fc:	0002c698 	.word	0x0002c698
   15900:	0002c610 	.word	0x0002c610
   15904:	0002d53c 	.word	0x0002d53c
   15908:	e000ed00 	.word	0xe000ed00
   1590c:	0002d554 	.word	0x0002d554
   15910:	0002d490 	.word	0x0002d490
   15914:	0002d588 	.word	0x0002d588
   15918:	0002d5a0 	.word	0x0002d5a0
   1591c:	0002d5b8 	.word	0x0002d5b8
   15920:	0002d50c 	.word	0x0002d50c

00015924 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
   15924:	b570      	push	{r4, r5, r6, lr}
   15926:	4605      	mov	r5, r0
   15928:	460c      	mov	r4, r1
   1592a:	4b47      	ldr	r3, [pc, #284]	; (15a48 <hard_fault+0x124>)
   1592c:	4a47      	ldr	r2, [pc, #284]	; (15a4c <hard_fault+0x128>)
   1592e:	1a9b      	subs	r3, r3, r2
   15930:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
   15932:	f04f 0100 	mov.w	r1, #0
   15936:	2201      	movs	r2, #1
   15938:	f362 0102 	bfi	r1, r2, #0, #3
   1593c:	f36f 01c5 	bfc	r1, #3, #3
   15940:	f363 118f 	bfi	r1, r3, #6, #10
   15944:	4842      	ldr	r0, [pc, #264]	; (15a50 <hard_fault+0x12c>)
   15946:	f7fc fb71 	bl	1202c <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
   1594a:	2300      	movs	r3, #0
   1594c:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1594e:	4b41      	ldr	r3, [pc, #260]	; (15a54 <hard_fault+0x130>)
   15950:	6ade      	ldr	r6, [r3, #44]	; 0x2c
   15952:	f016 0602 	ands.w	r6, r6, #2
   15956:	d109      	bne.n	1596c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   15958:	4b3e      	ldr	r3, [pc, #248]	; (15a54 <hard_fault+0x130>)
   1595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1595c:	2b00      	cmp	r3, #0
   1595e:	db17      	blt.n	15990 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   15960:	4b3c      	ldr	r3, [pc, #240]	; (15a54 <hard_fault+0x130>)
   15962:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   15964:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
   15968:	d124      	bne.n	159b4 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
   1596a:	bd70      	pop	{r4, r5, r6, pc}
   1596c:	4b36      	ldr	r3, [pc, #216]	; (15a48 <hard_fault+0x124>)
   1596e:	4a37      	ldr	r2, [pc, #220]	; (15a4c <hard_fault+0x128>)
   15970:	1a9b      	subs	r3, r3, r2
   15972:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
   15974:	f04f 0100 	mov.w	r1, #0
   15978:	2201      	movs	r2, #1
   1597a:	f362 0102 	bfi	r1, r2, #0, #3
   1597e:	f36f 01c5 	bfc	r1, #3, #3
   15982:	f363 118f 	bfi	r1, r3, #6, #10
   15986:	4834      	ldr	r0, [pc, #208]	; (15a58 <hard_fault+0x134>)
   15988:	f7fc fb50 	bl	1202c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1598c:	2000      	movs	r0, #0
   1598e:	e7ec      	b.n	1596a <hard_fault+0x46>
   15990:	4b2d      	ldr	r3, [pc, #180]	; (15a48 <hard_fault+0x124>)
   15992:	4a2e      	ldr	r2, [pc, #184]	; (15a4c <hard_fault+0x128>)
   15994:	1a9b      	subs	r3, r3, r2
   15996:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
   15998:	f04f 0100 	mov.w	r1, #0
   1599c:	2201      	movs	r2, #1
   1599e:	f362 0102 	bfi	r1, r2, #0, #3
   159a2:	f36f 01c5 	bfc	r1, #3, #3
   159a6:	f363 118f 	bfi	r1, r3, #6, #10
   159aa:	482c      	ldr	r0, [pc, #176]	; (15a5c <hard_fault+0x138>)
   159ac:	f7fc fb3e 	bl	1202c <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   159b0:	4630      	mov	r0, r6
   159b2:	e7da      	b.n	1596a <hard_fault+0x46>
   159b4:	4b24      	ldr	r3, [pc, #144]	; (15a48 <hard_fault+0x124>)
   159b6:	4a25      	ldr	r2, [pc, #148]	; (15a4c <hard_fault+0x128>)
   159b8:	1a9b      	subs	r3, r3, r2
   159ba:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
   159bc:	f04f 0100 	mov.w	r1, #0
   159c0:	2201      	movs	r2, #1
   159c2:	f362 0102 	bfi	r1, r2, #0, #3
   159c6:	f36f 01c5 	bfc	r1, #3, #3
   159ca:	f363 118f 	bfi	r1, r3, #6, #10
   159ce:	4824      	ldr	r0, [pc, #144]	; (15a60 <hard_fault+0x13c>)
   159d0:	f7fc fb2c 	bl	1202c <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   159d4:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
   159d6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   159da:	f64d 7302 	movw	r3, #57090	; 0xdf02
   159de:	429a      	cmp	r2, r3
   159e0:	d00e      	beq.n	15a00 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
   159e2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   159e6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   159ea:	781b      	ldrb	r3, [r3, #0]
   159ec:	b9db      	cbnz	r3, 15a26 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
   159ee:	4b1d      	ldr	r3, [pc, #116]	; (15a64 <hard_fault+0x140>)
   159f0:	781b      	ldrb	r3, [r3, #0]
   159f2:	b9f3      	cbnz	r3, 15a32 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
   159f4:	4b1c      	ldr	r3, [pc, #112]	; (15a68 <hard_fault+0x144>)
   159f6:	881b      	ldrh	r3, [r3, #0]
   159f8:	b29b      	uxth	r3, r3
   159fa:	bb03      	cbnz	r3, 15a3e <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   159fc:	4630      	mov	r0, r6
	return reason;
   159fe:	e7b4      	b.n	1596a <hard_fault+0x46>
   15a00:	4b11      	ldr	r3, [pc, #68]	; (15a48 <hard_fault+0x124>)
   15a02:	4a12      	ldr	r2, [pc, #72]	; (15a4c <hard_fault+0x128>)
   15a04:	1a9b      	subs	r3, r3, r2
   15a06:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15a08:	f04f 0200 	mov.w	r2, #0
   15a0c:	2101      	movs	r1, #1
   15a0e:	f361 0202 	bfi	r2, r1, #0, #3
   15a12:	f36f 02c5 	bfc	r2, #3, #3
   15a16:	f363 128f 	bfi	r2, r3, #6, #10
   15a1a:	6829      	ldr	r1, [r5, #0]
   15a1c:	4813      	ldr	r0, [pc, #76]	; (15a6c <hard_fault+0x148>)
   15a1e:	f7fc fa4f 	bl	11ec0 <log_1>
			reason = esf->basic.r0;
   15a22:	6828      	ldr	r0, [r5, #0]
   15a24:	e7a1      	b.n	1596a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
   15a26:	4622      	mov	r2, r4
   15a28:	2101      	movs	r1, #1
   15a2a:	4628      	mov	r0, r5
   15a2c:	f7ff fe98 	bl	15760 <mem_manage_fault>
   15a30:	e79b      	b.n	1596a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
   15a32:	4622      	mov	r2, r4
   15a34:	2101      	movs	r1, #1
   15a36:	4628      	mov	r0, r5
   15a38:	f7ff fdba 	bl	155b0 <bus_fault>
   15a3c:	e795      	b.n	1596a <hard_fault+0x46>
			reason = usage_fault(esf);
   15a3e:	4628      	mov	r0, r5
   15a40:	f7ff fcea 	bl	15418 <usage_fault>
   15a44:	e791      	b.n	1596a <hard_fault+0x46>
   15a46:	bf00      	nop
   15a48:	0002c698 	.word	0x0002c698
   15a4c:	0002c610 	.word	0x0002c610
   15a50:	0002d5d8 	.word	0x0002d5d8
   15a54:	e000ed00 	.word	0xe000ed00
   15a58:	0002d5f0 	.word	0x0002d5f0
   15a5c:	0002d614 	.word	0x0002d614
   15a60:	0002d624 	.word	0x0002d624
   15a64:	e000ed29 	.word	0xe000ed29
   15a68:	e000ed2a 	.word	0xe000ed2a
   15a6c:	0002d644 	.word	0x0002d644

00015a70 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
   15a70:	b508      	push	{r3, lr}
   15a72:	460a      	mov	r2, r1
   15a74:	480b      	ldr	r0, [pc, #44]	; (15aa4 <reserved_exception+0x34>)
   15a76:	4b0c      	ldr	r3, [pc, #48]	; (15aa8 <reserved_exception+0x38>)
   15a78:	1ac0      	subs	r0, r0, r3
   15a7a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
   15a7c:	f04f 0300 	mov.w	r3, #0
   15a80:	2101      	movs	r1, #1
   15a82:	f361 0302 	bfi	r3, r1, #0, #3
   15a86:	f36f 03c5 	bfc	r3, #3, #3
   15a8a:	f360 138f 	bfi	r3, r0, #6, #10
   15a8e:	2a0f      	cmp	r2, #15
   15a90:	dc05      	bgt.n	15a9e <reserved_exception+0x2e>
   15a92:	4906      	ldr	r1, [pc, #24]	; (15aac <reserved_exception+0x3c>)
   15a94:	3a10      	subs	r2, #16
   15a96:	4806      	ldr	r0, [pc, #24]	; (15ab0 <reserved_exception+0x40>)
   15a98:	f7fc fa48 	bl	11f2c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
   15a9c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
   15a9e:	4905      	ldr	r1, [pc, #20]	; (15ab4 <reserved_exception+0x44>)
   15aa0:	e7f8      	b.n	15a94 <reserved_exception+0x24>
   15aa2:	bf00      	nop
   15aa4:	0002c698 	.word	0x0002c698
   15aa8:	0002c610 	.word	0x0002c610
   15aac:	0002d660 	.word	0x0002d660
   15ab0:	0002d694 	.word	0x0002d694
   15ab4:	0002d678 	.word	0x0002d678

00015ab8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15ab8:	b570      	push	{r4, r5, r6, lr}
   15aba:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15abc:	4b2b      	ldr	r3, [pc, #172]	; (15b6c <z_arm_fault+0xb4>)
   15abe:	685d      	ldr	r5, [r3, #4]
   15ac0:	f3c5 0508 	ubfx	r5, r5, #0, #9
   15ac4:	2300      	movs	r3, #0
   15ac6:	f383 8811 	msr	BASEPRI, r3
   15aca:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15ace:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   15ad2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   15ad6:	d12a      	bne.n	15b2e <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   15ad8:	f002 030c 	and.w	r3, r2, #12
   15adc:	2b08      	cmp	r3, #8
   15ade:	d010      	beq.n	15b02 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   15ae0:	f012 0f08 	tst.w	r2, #8
   15ae4:	d020      	beq.n	15b28 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
   15ae6:	460c      	mov	r4, r1
	*nested_exc = false;
   15ae8:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
   15aea:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   15aee:	4629      	mov	r1, r5
   15af0:	4620      	mov	r0, r4
   15af2:	f011 ffe4 	bl	27abe <fault_handle>
   15af6:	4605      	mov	r5, r0
	if (recoverable) {
   15af8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   15afc:	b1d3      	cbz	r3, 15b34 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
   15afe:	b00a      	add	sp, #40	; 0x28
   15b00:	bd70      	pop	{r4, r5, r6, pc}
   15b02:	4b1b      	ldr	r3, [pc, #108]	; (15b70 <z_arm_fault+0xb8>)
   15b04:	4a1b      	ldr	r2, [pc, #108]	; (15b74 <z_arm_fault+0xbc>)
   15b06:	1a9b      	subs	r3, r3, r2
   15b08:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15b0a:	f04f 0100 	mov.w	r1, #0
   15b0e:	2201      	movs	r2, #1
   15b10:	f362 0102 	bfi	r1, r2, #0, #3
   15b14:	f36f 01c5 	bfc	r1, #3, #3
   15b18:	f363 118f 	bfi	r1, r3, #6, #10
   15b1c:	4816      	ldr	r0, [pc, #88]	; (15b78 <z_arm_fault+0xc0>)
   15b1e:	f7fc fa85 	bl	1202c <log_0>
	*nested_exc = false;
   15b22:	2600      	movs	r6, #0
		return NULL;
   15b24:	4634      	mov	r4, r6
   15b26:	e7e0      	b.n	15aea <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
   15b28:	4604      	mov	r4, r0
			*nested_exc = true;
   15b2a:	2601      	movs	r6, #1
   15b2c:	e7dd      	b.n	15aea <z_arm_fault+0x32>
	*nested_exc = false;
   15b2e:	2600      	movs	r6, #0
		return NULL;
   15b30:	4634      	mov	r4, r6
   15b32:	e7da      	b.n	15aea <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15b34:	2220      	movs	r2, #32
   15b36:	4621      	mov	r1, r4
   15b38:	a801      	add	r0, sp, #4
   15b3a:	f012 f889 	bl	27c50 <memcpy>
	if (nested_exc) {
   15b3e:	b14e      	cbz	r6, 15b54 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15b40:	9b08      	ldr	r3, [sp, #32]
   15b42:	f3c3 0208 	ubfx	r2, r3, #0, #9
   15b46:	b95a      	cbnz	r2, 15b60 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   15b48:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15b4c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   15b50:	9308      	str	r3, [sp, #32]
   15b52:	e005      	b.n	15b60 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15b54:	9b08      	ldr	r3, [sp, #32]
   15b56:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15b5a:	f023 0301 	bic.w	r3, r3, #1
   15b5e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
   15b60:	a901      	add	r1, sp, #4
   15b62:	4628      	mov	r0, r5
   15b64:	f011 ff8b 	bl	27a7e <z_arm_fatal_error>
   15b68:	e7c9      	b.n	15afe <z_arm_fault+0x46>
   15b6a:	bf00      	nop
   15b6c:	e000ed00 	.word	0xe000ed00
   15b70:	0002c698 	.word	0x0002c698
   15b74:	0002c610 	.word	0x0002c610
   15b78:	0002d6a8 	.word	0x0002d6a8

00015b7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15b7c:	4a02      	ldr	r2, [pc, #8]	; (15b88 <z_arm_fault_init+0xc>)
   15b7e:	6953      	ldr	r3, [r2, #20]
   15b80:	f043 0310 	orr.w	r3, r3, #16
   15b84:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   15b86:	4770      	bx	lr
   15b88:	e000ed00 	.word	0xe000ed00

00015b8c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15b8c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15b90:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15b94:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15b96:	4672      	mov	r2, lr
	bl z_arm_fault
   15b98:	f7ff ff8e 	bl	15ab8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15b9c:	bd01      	pop	{r0, pc}
   15b9e:	bf00      	nop

00015ba0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15ba0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15ba2:	e006      	b.n	15bb2 <z_arm_interrupt_init+0x12>
   15ba4:	f002 010f 	and.w	r1, r2, #15
   15ba8:	4b09      	ldr	r3, [pc, #36]	; (15bd0 <z_arm_interrupt_init+0x30>)
   15baa:	440b      	add	r3, r1
   15bac:	2140      	movs	r1, #64	; 0x40
   15bae:	7619      	strb	r1, [r3, #24]
   15bb0:	3201      	adds	r2, #1
   15bb2:	2a2f      	cmp	r2, #47	; 0x2f
   15bb4:	dc0a      	bgt.n	15bcc <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   15bb6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   15bb8:	2b00      	cmp	r3, #0
   15bba:	dbf3      	blt.n	15ba4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15bbc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   15bc0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   15bc4:	2140      	movs	r1, #64	; 0x40
   15bc6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   15bca:	e7f1      	b.n	15bb0 <z_arm_interrupt_init+0x10>
	}
}
   15bcc:	4770      	bx	lr
   15bce:	bf00      	nop
   15bd0:	e000ecfc 	.word	0xe000ecfc

00015bd4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15bd4:	2000      	movs	r0, #0
    msr CONTROL, r0
   15bd6:	f380 8814 	msr	CONTROL, r0
    isb
   15bda:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15bde:	f016 fb71 	bl	2c2c4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15be2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15be4:	490d      	ldr	r1, [pc, #52]	; (15c1c <__start+0x48>)
    str r0, [r1]
   15be6:	6008      	str	r0, [r1, #0]
    dsb
   15be8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15bec:	480c      	ldr	r0, [pc, #48]	; (15c20 <__start+0x4c>)
    msr msp, r0
   15bee:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15bf2:	f000 f829 	bl	15c48 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15bf6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15bf8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15bfc:	4809      	ldr	r0, [pc, #36]	; (15c24 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15bfe:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   15c02:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15c04:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15c08:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15c0c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15c0e:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15c10:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15c14:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15c18:	f7ff faf6 	bl	15208 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15c1c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15c20:	20006f00 	.word	0x20006f00
    ldr r0, =z_interrupt_stacks
   15c24:	20007080 	.word	0x20007080

00015c28 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15c28:	4b06      	ldr	r3, [pc, #24]	; (15c44 <z_arm_clear_arm_mpu_config+0x1c>)
   15c2a:	6818      	ldr	r0, [r3, #0]
	int num_regions =
   15c2c:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
   15c30:	2300      	movs	r3, #0
   15c32:	4283      	cmp	r3, r0
   15c34:	da05      	bge.n	15c42 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   15c36:	4a03      	ldr	r2, [pc, #12]	; (15c44 <z_arm_clear_arm_mpu_config+0x1c>)
   15c38:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   15c3a:	2100      	movs	r1, #0
   15c3c:	6111      	str	r1, [r2, #16]
   15c3e:	3301      	adds	r3, #1
   15c40:	e7f7      	b.n	15c32 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
   15c42:	4770      	bx	lr
   15c44:	e000ed90 	.word	0xe000ed90

00015c48 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15c48:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15c4a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15c4c:	2400      	movs	r4, #0
   15c4e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15c52:	f7ff ffe9 	bl	15c28 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   15c56:	4623      	mov	r3, r4
   15c58:	e008      	b.n	15c6c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
   15c5a:	f103 0120 	add.w	r1, r3, #32
   15c5e:	4a0e      	ldr	r2, [pc, #56]	; (15c98 <z_arm_init_arch_hw_at_boot+0x50>)
   15c60:	f04f 30ff 	mov.w	r0, #4294967295
   15c64:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
   15c68:	3301      	adds	r3, #1
   15c6a:	b2db      	uxtb	r3, r3
   15c6c:	2b07      	cmp	r3, #7
   15c6e:	d9f4      	bls.n	15c5a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   15c70:	2300      	movs	r3, #0
   15c72:	e008      	b.n	15c86 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15c74:	f103 0160 	add.w	r1, r3, #96	; 0x60
   15c78:	4a07      	ldr	r2, [pc, #28]	; (15c98 <z_arm_init_arch_hw_at_boot+0x50>)
   15c7a:	f04f 30ff 	mov.w	r0, #4294967295
   15c7e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
   15c82:	3301      	adds	r3, #1
   15c84:	b2db      	uxtb	r3, r3
   15c86:	2b07      	cmp	r3, #7
   15c88:	d9f4      	bls.n	15c74 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
   15c8a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15c8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15c90:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   15c94:	bd10      	pop	{r4, pc}
   15c96:	bf00      	nop
   15c98:	e000e100 	.word	0xe000e100

00015c9c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
   15c9c:	b508      	push	{r3, lr}
	if (_current == thread) {
   15c9e:	4b08      	ldr	r3, [pc, #32]	; (15cc0 <z_impl_k_thread_abort+0x24>)
   15ca0:	689b      	ldr	r3, [r3, #8]
   15ca2:	4283      	cmp	r3, r0
   15ca4:	d002      	beq.n	15cac <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
   15ca6:	f00c fddf 	bl	22868 <z_thread_abort>
}
   15caa:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15cac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15cb0:	2b00      	cmp	r3, #0
   15cb2:	d0f8      	beq.n	15ca6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15cb4:	4a03      	ldr	r2, [pc, #12]	; (15cc4 <z_impl_k_thread_abort+0x28>)
   15cb6:	6853      	ldr	r3, [r2, #4]
   15cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15cbc:	6053      	str	r3, [r2, #4]
   15cbe:	e7f2      	b.n	15ca6 <z_impl_k_thread_abort+0xa>
   15cc0:	20003e08 	.word	0x20003e08
   15cc4:	e000ed00 	.word	0xe000ed00

00015cc8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   15cc8:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15cca:	4b03      	ldr	r3, [pc, #12]	; (15cd8 <z_arm_configure_static_mpu_regions+0x10>)
   15ccc:	4a03      	ldr	r2, [pc, #12]	; (15cdc <z_arm_configure_static_mpu_regions+0x14>)
   15cce:	2101      	movs	r1, #1
   15cd0:	4803      	ldr	r0, [pc, #12]	; (15ce0 <z_arm_configure_static_mpu_regions+0x18>)
   15cd2:	f011 ff49 	bl	27b68 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   15cd6:	bd08      	pop	{r3, pc}
   15cd8:	20040000 	.word	0x20040000
   15cdc:	20000000 	.word	0x20000000
   15ce0:	0002d6d8 	.word	0x0002d6d8

00015ce4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15ce4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15ce6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   15cea:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15cec:	4804      	ldr	r0, [pc, #16]	; (15d00 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   15cee:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
   15cf0:	2320      	movs	r3, #32
   15cf2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15cf4:	4b03      	ldr	r3, [pc, #12]	; (15d04 <z_arm_configure_dynamic_mpu_regions+0x20>)
   15cf6:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15cf8:	2101      	movs	r1, #1
   15cfa:	f011 ff39 	bl	27b70 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
   15cfe:	bd08      	pop	{r3, pc}
   15d00:	20002b08 	.word	0x20002b08
   15d04:	150b0000 	.word	0x150b0000

00015d08 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15d08:	4a06      	ldr	r2, [pc, #24]	; (15d24 <region_init+0x1c>)
   15d0a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d0c:	680b      	ldr	r3, [r1, #0]
   15d0e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15d12:	4303      	orrs	r3, r0
   15d14:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15d18:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15d1a:	688b      	ldr	r3, [r1, #8]
   15d1c:	f043 0301 	orr.w	r3, r3, #1
   15d20:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
   15d22:	4770      	bx	lr
   15d24:	e000ed90 	.word	0xe000ed90

00015d28 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
   15d28:	b510      	push	{r4, lr}
   15d2a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
   15d2c:	2807      	cmp	r0, #7
   15d2e:	d803      	bhi.n	15d38 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   15d30:	f7ff ffea 	bl	15d08 <region_init>

	return index;
   15d34:	4620      	mov	r0, r4
}
   15d36:	bd10      	pop	{r4, pc}
   15d38:	4b09      	ldr	r3, [pc, #36]	; (15d60 <region_allocate_and_init+0x38>)
   15d3a:	4a0a      	ldr	r2, [pc, #40]	; (15d64 <region_allocate_and_init+0x3c>)
   15d3c:	1a9b      	subs	r3, r3, r2
   15d3e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15d40:	f04f 0200 	mov.w	r2, #0
   15d44:	2101      	movs	r1, #1
   15d46:	f361 0202 	bfi	r2, r1, #0, #3
   15d4a:	f36f 02c5 	bfc	r2, #3, #3
   15d4e:	f363 128f 	bfi	r2, r3, #6, #10
   15d52:	4601      	mov	r1, r0
   15d54:	4804      	ldr	r0, [pc, #16]	; (15d68 <region_allocate_and_init+0x40>)
   15d56:	f7fc f8b3 	bl	11ec0 <log_1>
		return -EINVAL;
   15d5a:	f06f 0015 	mvn.w	r0, #21
   15d5e:	e7ea      	b.n	15d36 <region_allocate_and_init+0xe>
   15d60:	0002c680 	.word	0x0002c680
   15d64:	0002c610 	.word	0x0002c610
   15d68:	0002d6e4 	.word	0x0002d6e4

00015d6c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15d70:	4680      	mov	r8, r0
   15d72:	460f      	mov	r7, r1
   15d74:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
   15d76:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
   15d78:	2400      	movs	r4, #0
   15d7a:	e009      	b.n	15d90 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15d7c:	4629      	mov	r1, r5
   15d7e:	b2f0      	uxtb	r0, r6
   15d80:	f011 fed3 	bl	27b2a <mpu_configure_region>
   15d84:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
   15d86:	f110 0f16 	cmn.w	r0, #22
   15d8a:	d025      	beq.n	15dd8 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
   15d8c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
   15d8e:	3401      	adds	r4, #1
   15d90:	42bc      	cmp	r4, r7
   15d92:	da21      	bge.n	15dd8 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
   15d94:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   15d98:	eb08 0585 	add.w	r5, r8, r5, lsl #2
   15d9c:	686a      	ldr	r2, [r5, #4]
   15d9e:	2a00      	cmp	r2, #0
   15da0:	d0f5      	beq.n	15d8e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
   15da2:	f1ba 0f00 	cmp.w	sl, #0
   15da6:	d0e9      	beq.n	15d7c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
   15da8:	4628      	mov	r0, r5
   15daa:	f011 fead 	bl	27b08 <mpu_partition_is_valid>
		if (do_sanity_check &&
   15dae:	2800      	cmp	r0, #0
   15db0:	d1e4      	bne.n	15d7c <mpu_configure_regions+0x10>
   15db2:	4b0b      	ldr	r3, [pc, #44]	; (15de0 <mpu_configure_regions+0x74>)
   15db4:	4a0b      	ldr	r2, [pc, #44]	; (15de4 <mpu_configure_regions+0x78>)
   15db6:	1a9b      	subs	r3, r3, r2
   15db8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
   15dba:	f04f 0200 	mov.w	r2, #0
   15dbe:	2101      	movs	r1, #1
   15dc0:	f361 0202 	bfi	r2, r1, #0, #3
   15dc4:	f36f 02c5 	bfc	r2, #3, #3
   15dc8:	f363 128f 	bfi	r2, r3, #6, #10
   15dcc:	4621      	mov	r1, r4
   15dce:	4806      	ldr	r0, [pc, #24]	; (15de8 <mpu_configure_regions+0x7c>)
   15dd0:	f7fc f876 	bl	11ec0 <log_1>
			return -EINVAL;
   15dd4:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
   15dd8:	4630      	mov	r0, r6
   15dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15dde:	bf00      	nop
   15de0:	0002c680 	.word	0x0002c680
   15de4:	0002c610 	.word	0x0002c610
   15de8:	0002d70c 	.word	0x0002d70c

00015dec <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
   15dec:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
   15dee:	4c03      	ldr	r4, [pc, #12]	; (15dfc <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15df0:	2301      	movs	r3, #1
   15df2:	7822      	ldrb	r2, [r4, #0]
   15df4:	f7ff ffba 	bl	15d6c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15df8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
   15dfa:	bd10      	pop	{r4, pc}
   15dfc:	20004751 	.word	0x20004751

00015e00 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   15e00:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15e02:	2300      	movs	r3, #0
   15e04:	4a08      	ldr	r2, [pc, #32]	; (15e28 <mpu_configure_dynamic_mpu_regions+0x28>)
   15e06:	7812      	ldrb	r2, [r2, #0]
   15e08:	f7ff ffb0 	bl	15d6c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15e0c:	f110 0f16 	cmn.w	r0, #22
   15e10:	d008      	beq.n	15e24 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15e12:	4603      	mov	r3, r0
   15e14:	2b07      	cmp	r3, #7
   15e16:	dc05      	bgt.n	15e24 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
   15e18:	4a04      	ldr	r2, [pc, #16]	; (15e2c <mpu_configure_dynamic_mpu_regions+0x2c>)
   15e1a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   15e1c:	2100      	movs	r1, #0
   15e1e:	6111      	str	r1, [r2, #16]
   15e20:	3301      	adds	r3, #1
   15e22:	e7f7      	b.n	15e14 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
   15e24:	bd08      	pop	{r3, pc}
   15e26:	bf00      	nop
   15e28:	20004751 	.word	0x20004751
   15e2c:	e000ed90 	.word	0xe000ed90

00015e30 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15e30:	4b03      	ldr	r3, [pc, #12]	; (15e40 <arm_core_mpu_enable+0x10>)
   15e32:	2205      	movs	r2, #5
   15e34:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   15e36:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15e3a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15e3e:	4770      	bx	lr
   15e40:	e000ed90 	.word	0xe000ed90

00015e44 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15e44:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15e48:	4b01      	ldr	r3, [pc, #4]	; (15e50 <arm_core_mpu_disable+0xc>)
   15e4a:	2200      	movs	r2, #0
   15e4c:	605a      	str	r2, [r3, #4]
}
   15e4e:	4770      	bx	lr
   15e50:	e000ed90 	.word	0xe000ed90

00015e54 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
   15e54:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15e56:	4b0e      	ldr	r3, [pc, #56]	; (15e90 <z_arm_mpu_init+0x3c>)
   15e58:	681d      	ldr	r5, [r3, #0]
   15e5a:	2d08      	cmp	r5, #8
   15e5c:	d815      	bhi.n	15e8a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   15e5e:	f7ff fff1 	bl	15e44 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15e62:	2400      	movs	r4, #0
   15e64:	42a5      	cmp	r5, r4
   15e66:	d90a      	bls.n	15e7e <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   15e68:	4b09      	ldr	r3, [pc, #36]	; (15e90 <z_arm_mpu_init+0x3c>)
   15e6a:	6859      	ldr	r1, [r3, #4]
   15e6c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   15e70:	0093      	lsls	r3, r2, #2
   15e72:	4419      	add	r1, r3
   15e74:	4620      	mov	r0, r4
   15e76:	f7ff ff47 	bl	15d08 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15e7a:	3401      	adds	r4, #1
   15e7c:	e7f2      	b.n	15e64 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   15e7e:	4b05      	ldr	r3, [pc, #20]	; (15e94 <z_arm_mpu_init+0x40>)
   15e80:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   15e82:	f7ff ffd5 	bl	15e30 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   15e86:	2000      	movs	r0, #0
}
   15e88:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   15e8a:	f04f 30ff 	mov.w	r0, #4294967295
   15e8e:	e7fb      	b.n	15e88 <z_arm_mpu_init+0x34>
   15e90:	0002d740 	.word	0x0002d740
   15e94:	20004751 	.word	0x20004751

00015e98 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   15e98:	4b01      	ldr	r3, [pc, #4]	; (15ea0 <__stdout_hook_install+0x8>)
   15e9a:	6018      	str	r0, [r3, #0]
}
   15e9c:	4770      	bx	lr
   15e9e:	bf00      	nop
   15ea0:	20000564 	.word	0x20000564

00015ea4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   15ea4:	f04f 0340 	mov.w	r3, #64	; 0x40
   15ea8:	f3ef 8211 	mrs	r2, BASEPRI
   15eac:	f383 8812 	msr	BASEPRI_MAX, r3
   15eb0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15eb4:	2301      	movs	r3, #1
   15eb6:	4906      	ldr	r1, [pc, #24]	; (15ed0 <nordicsemi_nrf52_init+0x2c>)
   15eb8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15ebc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   15ec0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   15ec4:	f382 8811 	msr	BASEPRI, r2
   15ec8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15ecc:	2000      	movs	r0, #0
   15ece:	4770      	bx	lr
   15ed0:	4001e000 	.word	0x4001e000

00015ed4 <sys_arch_reboot>:
    *p_gpregret = val;
   15ed4:	b2c0      	uxtb	r0, r0
   15ed6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15eda:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15ede:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15ee2:	4905      	ldr	r1, [pc, #20]	; (15ef8 <sys_arch_reboot+0x24>)
   15ee4:	68ca      	ldr	r2, [r1, #12]
   15ee6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15eea:	4b04      	ldr	r3, [pc, #16]	; (15efc <sys_arch_reboot+0x28>)
   15eec:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15eee:	60cb      	str	r3, [r1, #12]
   15ef0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15ef4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15ef6:	e7fd      	b.n	15ef4 <sys_arch_reboot+0x20>
   15ef8:	e000ed00 	.word	0xe000ed00
   15efc:	05fa0004 	.word	0x05fa0004

00015f00 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15f00:	b130      	cbz	r0, 15f10 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
   15f02:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15f04:	0180      	lsls	r0, r0, #6
   15f06:	4b03      	ldr	r3, [pc, #12]	; (15f14 <arch_busy_wait+0x14>)
   15f08:	f043 0301 	orr.w	r3, r3, #1
   15f0c:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
   15f0e:	bd08      	pop	{r3, pc}
   15f10:	4770      	bx	lr
   15f12:	bf00      	nop
   15f14:	0002c840 	.word	0x0002c840

00015f18 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   15f18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15f1c:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   15f20:	f013 0f01 	tst.w	r3, #1
   15f24:	d007      	beq.n	15f36 <board_nrf52840dongle_nrf52840_init+0x1e>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   15f26:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   15f2a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   15f2e:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   15f32:	2b07      	cmp	r3, #7
   15f34:	d001      	beq.n	15f3a <board_nrf52840dongle_nrf52840_init+0x22>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   15f36:	2000      	movs	r0, #0
   15f38:	4770      	bx	lr
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   15f3a:	4b14      	ldr	r3, [pc, #80]	; (15f8c <board_nrf52840dongle_nrf52840_init+0x74>)
   15f3c:	2201      	movs	r2, #1
   15f3e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   15f42:	4b12      	ldr	r3, [pc, #72]	; (15f8c <board_nrf52840dongle_nrf52840_init+0x74>)
   15f44:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   15f48:	2b00      	cmp	r3, #0
   15f4a:	d0fa      	beq.n	15f42 <board_nrf52840dongle_nrf52840_init+0x2a>
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   15f4c:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   15f50:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
   15f54:	f023 0307 	bic.w	r3, r3, #7
   15f58:	f043 0304 	orr.w	r3, r3, #4
		NRF_UICR->REGOUT0 =
   15f5c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   15f60:	4b0a      	ldr	r3, [pc, #40]	; (15f8c <board_nrf52840dongle_nrf52840_init+0x74>)
   15f62:	2200      	movs	r2, #0
   15f64:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   15f68:	4b08      	ldr	r3, [pc, #32]	; (15f8c <board_nrf52840dongle_nrf52840_init+0x74>)
   15f6a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   15f6e:	2b00      	cmp	r3, #0
   15f70:	d0fa      	beq.n	15f68 <board_nrf52840dongle_nrf52840_init+0x50>
   15f72:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15f76:	4906      	ldr	r1, [pc, #24]	; (15f90 <board_nrf52840dongle_nrf52840_init+0x78>)
   15f78:	68ca      	ldr	r2, [r1, #12]
   15f7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15f7e:	4b05      	ldr	r3, [pc, #20]	; (15f94 <board_nrf52840dongle_nrf52840_init+0x7c>)
   15f80:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15f82:	60cb      	str	r3, [r1, #12]
   15f84:	f3bf 8f4f 	dsb	sy
    __NOP();
   15f88:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15f8a:	e7fd      	b.n	15f88 <board_nrf52840dongle_nrf52840_init+0x70>
   15f8c:	4001e000 	.word	0x4001e000
   15f90:	e000ed00 	.word	0xe000ed00
   15f94:	05fa0004 	.word	0x05fa0004

00015f98 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15f98:	2940      	cmp	r1, #64	; 0x40
   15f9a:	bf28      	it	cs
   15f9c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
   15f9e:	2300      	movs	r3, #0
   15fa0:	428b      	cmp	r3, r1
   15fa2:	d217      	bcs.n	15fd4 <bt_hex_real+0x3c>
{
   15fa4:	b470      	push	{r4, r5, r6}
		str[i * 2]     = hex[b[i] >> 4];
   15fa6:	5cc4      	ldrb	r4, [r0, r3]
   15fa8:	0924      	lsrs	r4, r4, #4
   15faa:	005a      	lsls	r2, r3, #1
   15fac:	4e0c      	ldr	r6, [pc, #48]	; (15fe0 <bt_hex_real+0x48>)
   15fae:	5d34      	ldrb	r4, [r6, r4]
   15fb0:	4d0c      	ldr	r5, [pc, #48]	; (15fe4 <bt_hex_real+0x4c>)
   15fb2:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15fb6:	5cc4      	ldrb	r4, [r0, r3]
   15fb8:	f004 040f 	and.w	r4, r4, #15
   15fbc:	3201      	adds	r2, #1
   15fbe:	5d34      	ldrb	r4, [r6, r4]
   15fc0:	54ac      	strb	r4, [r5, r2]
	for (i = 0; i < len; i++) {
   15fc2:	3301      	adds	r3, #1
   15fc4:	428b      	cmp	r3, r1
   15fc6:	d3ee      	bcc.n	15fa6 <bt_hex_real+0xe>
	}

	str[i * 2] = '\0';
   15fc8:	4806      	ldr	r0, [pc, #24]	; (15fe4 <bt_hex_real+0x4c>)
   15fca:	2200      	movs	r2, #0
   15fcc:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]

	return str;
}
   15fd0:	bc70      	pop	{r4, r5, r6}
   15fd2:	4770      	bx	lr
	str[i * 2] = '\0';
   15fd4:	4803      	ldr	r0, [pc, #12]	; (15fe4 <bt_hex_real+0x4c>)
   15fd6:	2200      	movs	r2, #0
   15fd8:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
}
   15fdc:	4770      	bx	lr
   15fde:	bf00      	nop
   15fe0:	0002d764 	.word	0x0002d764
   15fe4:	20002b14 	.word	0x20002b14

00015fe8 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   15fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fea:	b08b      	sub	sp, #44	; 0x2c
   15fec:	4604      	mov	r4, r0
	switch (addr->type) {
   15fee:	7803      	ldrb	r3, [r0, #0]
   15ff0:	2b03      	cmp	r3, #3
   15ff2:	d82c      	bhi.n	1604e <bt_addr_le_str_real+0x66>
   15ff4:	e8df f003 	tbb	[pc, r3]
   15ff8:	26211c02 	.word	0x26211c02
		strcpy(type, "public");
   15ffc:	4917      	ldr	r1, [pc, #92]	; (1605c <bt_addr_le_str_real+0x74>)
   15ffe:	a807      	add	r0, sp, #28
   16000:	f011 fdba 	bl	27b78 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
   16004:	7963      	ldrb	r3, [r4, #5]
   16006:	7922      	ldrb	r2, [r4, #4]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
   16008:	78e1      	ldrb	r1, [r4, #3]
   1600a:	78a0      	ldrb	r0, [r4, #2]
   1600c:	7866      	ldrb	r6, [r4, #1]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1600e:	4d14      	ldr	r5, [pc, #80]	; (16060 <bt_addr_le_str_real+0x78>)
   16010:	af07      	add	r7, sp, #28
   16012:	9705      	str	r7, [sp, #20]
   16014:	9604      	str	r6, [sp, #16]
   16016:	9003      	str	r0, [sp, #12]
   16018:	9102      	str	r1, [sp, #8]
   1601a:	9201      	str	r2, [sp, #4]
   1601c:	9300      	str	r3, [sp, #0]
   1601e:	79a3      	ldrb	r3, [r4, #6]
   16020:	4a10      	ldr	r2, [pc, #64]	; (16064 <bt_addr_le_str_real+0x7c>)
   16022:	211e      	movs	r1, #30
   16024:	4628      	mov	r0, r5
   16026:	f00f fe23 	bl	25c70 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1602a:	4628      	mov	r0, r5
   1602c:	b00b      	add	sp, #44	; 0x2c
   1602e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   16030:	490d      	ldr	r1, [pc, #52]	; (16068 <bt_addr_le_str_real+0x80>)
   16032:	a807      	add	r0, sp, #28
   16034:	f011 fda0 	bl	27b78 <strcpy>
		break;
   16038:	e7e4      	b.n	16004 <bt_addr_le_str_real+0x1c>
		strcpy(type, "public-id");
   1603a:	490c      	ldr	r1, [pc, #48]	; (1606c <bt_addr_le_str_real+0x84>)
   1603c:	a807      	add	r0, sp, #28
   1603e:	f011 fd9b 	bl	27b78 <strcpy>
		break;
   16042:	e7df      	b.n	16004 <bt_addr_le_str_real+0x1c>
		strcpy(type, "random-id");
   16044:	490a      	ldr	r1, [pc, #40]	; (16070 <bt_addr_le_str_real+0x88>)
   16046:	a807      	add	r0, sp, #28
   16048:	f011 fd96 	bl	27b78 <strcpy>
		break;
   1604c:	e7da      	b.n	16004 <bt_addr_le_str_real+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1604e:	4a09      	ldr	r2, [pc, #36]	; (16074 <bt_addr_le_str_real+0x8c>)
   16050:	210a      	movs	r1, #10
   16052:	a807      	add	r0, sp, #28
   16054:	f00f fe0c 	bl	25c70 <snprintk>
		break;
   16058:	e7d4      	b.n	16004 <bt_addr_le_str_real+0x1c>
   1605a:	bf00      	nop
   1605c:	0002c8b0 	.word	0x0002c8b0
   16060:	20002b98 	.word	0x20002b98
   16064:	0002c8d8 	.word	0x0002c8d8
   16068:	0002c8b8 	.word	0x0002c8b8
   1606c:	0002c8c0 	.word	0x0002c8c0
   16070:	0002c8cc 	.word	0x0002c8cc
   16074:	0002e70c 	.word	0x0002e70c

00016078 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16078:	b570      	push	{r4, r5, r6, lr}
   1607a:	4605      	mov	r5, r0
   1607c:	460c      	mov	r4, r1
	switch (src->type) {
   1607e:	7803      	ldrb	r3, [r0, #0]
   16080:	2b01      	cmp	r3, #1
   16082:	d010      	beq.n	160a6 <uuid_to_uuid128+0x2e>
   16084:	2b02      	cmp	r3, #2
   16086:	d020      	beq.n	160ca <uuid_to_uuid128+0x52>
   16088:	b103      	cbz	r3, 1608c <uuid_to_uuid128+0x14>
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1608a:	bd70      	pop	{r4, r5, r6, pc}
		*dst = uuid128_base;
   1608c:	4e12      	ldr	r6, [pc, #72]	; (160d8 <uuid_to_uuid128+0x60>)
   1608e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16090:	6020      	str	r0, [r4, #0]
   16092:	6061      	str	r1, [r4, #4]
   16094:	60a2      	str	r2, [r4, #8]
   16096:	60e3      	str	r3, [r4, #12]
   16098:	7833      	ldrb	r3, [r6, #0]
   1609a:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
   1609c:	886b      	ldrh	r3, [r5, #2]
	dst[0] = val;
   1609e:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   160a0:	0a1b      	lsrs	r3, r3, #8
   160a2:	73a3      	strb	r3, [r4, #14]
}
   160a4:	e7f1      	b.n	1608a <uuid_to_uuid128+0x12>
		*dst = uuid128_base;
   160a6:	4e0c      	ldr	r6, [pc, #48]	; (160d8 <uuid_to_uuid128+0x60>)
   160a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   160aa:	6020      	str	r0, [r4, #0]
   160ac:	6061      	str	r1, [r4, #4]
   160ae:	60a2      	str	r2, [r4, #8]
   160b0:	60e3      	str	r3, [r4, #12]
   160b2:	7833      	ldrb	r3, [r6, #0]
   160b4:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
   160b6:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
   160b8:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
   160ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
   160be:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   160c0:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   160c2:	73e2      	strb	r2, [r4, #15]
	dst[1] = val >> 8;
   160c4:	0e1b      	lsrs	r3, r3, #24
   160c6:	7423      	strb	r3, [r4, #16]
}
   160c8:	e7df      	b.n	1608a <uuid_to_uuid128+0x12>
		memcpy(dst, src, sizeof(*dst));
   160ca:	2211      	movs	r2, #17
   160cc:	4601      	mov	r1, r0
   160ce:	4620      	mov	r0, r4
   160d0:	f011 fdbe 	bl	27c50 <memcpy>
		return;
   160d4:	e7d9      	b.n	1608a <uuid_to_uuid128+0x12>
   160d6:	bf00      	nop
   160d8:	0002d780 	.word	0x0002d780

000160dc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   160dc:	b538      	push	{r3, r4, r5, lr}
   160de:	4604      	mov	r4, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   160e0:	4805      	ldr	r0, [pc, #20]	; (160f8 <bt_buf_get_rx+0x1c>)
   160e2:	f014 f810 	bl	2a106 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   160e6:	4605      	mov	r5, r0
   160e8:	b120      	cbz	r0, 160f4 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   160ea:	2100      	movs	r1, #0
   160ec:	3008      	adds	r0, #8
   160ee:	f014 f832 	bl	2a156 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   160f2:	752c      	strb	r4, [r5, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   160f4:	4628      	mov	r0, r5
   160f6:	bd38      	pop	{r3, r4, r5, pc}
   160f8:	20000950 	.word	0x20000950

000160fc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   160fc:	b510      	push	{r4, lr}
   160fe:	4602      	mov	r2, r0
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   16100:	4b0a      	ldr	r3, [pc, #40]	; (1612c <bt_buf_get_cmd_complete+0x30>)
   16102:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16106:	b158      	cbz	r0, 16120 <bt_buf_get_cmd_complete+0x24>
		buf = net_buf_ref(bt_dev.sent_cmd);
   16108:	f014 f85c 	bl	2a1c4 <net_buf_ref>
   1610c:	4604      	mov	r4, r0
   1610e:	2301      	movs	r3, #1
   16110:	7503      	strb	r3, [r0, #20]

		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0U;
   16112:	2100      	movs	r1, #0
   16114:	8181      	strh	r1, [r0, #12]
   16116:	3008      	adds	r0, #8
   16118:	f014 f81d 	bl	2a156 <net_buf_simple_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1611c:	4620      	mov	r0, r4
   1611e:	bd10      	pop	{r4, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16120:	460b      	mov	r3, r1
   16122:	2001      	movs	r0, #1
   16124:	f7ff ffda 	bl	160dc <bt_buf_get_rx>
   16128:	4604      	mov	r4, r0
   1612a:	e7f7      	b.n	1611c <bt_buf_get_cmd_complete+0x20>
   1612c:	200002a0 	.word	0x200002a0

00016130 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16130:	b510      	push	{r4, lr}
	switch (evt) {
   16132:	280f      	cmp	r0, #15
   16134:	d90d      	bls.n	16152 <bt_buf_get_evt+0x22>
   16136:	2813      	cmp	r0, #19
   16138:	d10d      	bne.n	16156 <bt_buf_get_evt+0x26>
	return net_buf_alloc_fixed(pool, timeout);
   1613a:	4814      	ldr	r0, [pc, #80]	; (1618c <bt_buf_get_evt+0x5c>)
   1613c:	f013 ffe3 	bl	2a106 <net_buf_alloc_fixed>
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
		{
			struct net_buf *buf;

			buf = net_buf_alloc(&num_complete_pool, timeout);
			if (buf) {
   16140:	4604      	mov	r4, r0
   16142:	b198      	cbz	r0, 1616c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   16144:	2100      	movs	r1, #0
   16146:	3008      	adds	r0, #8
   16148:	f014 f805 	bl	2a156 <net_buf_simple_reserve>
   1614c:	2301      	movs	r3, #1
   1614e:	7523      	strb	r3, [r4, #20]
}
   16150:	e00c      	b.n	1616c <bt_buf_get_evt+0x3c>
	switch (evt) {
   16152:	280e      	cmp	r0, #14
   16154:	d205      	bcs.n	16162 <bt_buf_get_evt+0x32>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return bt_buf_get_cmd_complete(timeout);
	default:
#if defined(CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT)
		if (discardable) {
   16156:	b959      	cbnz	r1, 16170 <bt_buf_get_evt+0x40>

			return buf;
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16158:	2001      	movs	r0, #1
   1615a:	f7ff ffbf 	bl	160dc <bt_buf_get_rx>
   1615e:	4604      	mov	r4, r0
   16160:	e004      	b.n	1616c <bt_buf_get_evt+0x3c>
		return bt_buf_get_cmd_complete(timeout);
   16162:	4610      	mov	r0, r2
   16164:	4619      	mov	r1, r3
   16166:	f7ff ffc9 	bl	160fc <bt_buf_get_cmd_complete>
   1616a:	4604      	mov	r4, r0
	}
}
   1616c:	4620      	mov	r0, r4
   1616e:	bd10      	pop	{r4, pc}
	return net_buf_alloc_fixed(pool, timeout);
   16170:	4807      	ldr	r0, [pc, #28]	; (16190 <bt_buf_get_evt+0x60>)
   16172:	f013 ffc8 	bl	2a106 <net_buf_alloc_fixed>
			if (buf) {
   16176:	4604      	mov	r4, r0
   16178:	2800      	cmp	r0, #0
   1617a:	d0f7      	beq.n	1616c <bt_buf_get_evt+0x3c>
	net_buf_simple_reserve(&buf->b, reserve);
   1617c:	2100      	movs	r1, #0
   1617e:	3008      	adds	r0, #8
   16180:	f013 ffe9 	bl	2a156 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16184:	2301      	movs	r3, #1
   16186:	7523      	strb	r3, [r4, #20]
			return buf;
   16188:	e7f0      	b.n	1616c <bt_buf_get_evt+0x3c>
   1618a:	bf00      	nop
   1618c:	20000978 	.word	0x20000978
   16190:	200008d8 	.word	0x200008d8

00016194 <conn_handle_disconnected>:
}

static uint16_t disconnected_handles[CONFIG_BT_MAX_CONN];
static void conn_handle_disconnected(uint16_t handle)
{
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   16194:	2300      	movs	r3, #0
   16196:	2b00      	cmp	r3, #0
   16198:	dd00      	ble.n	1619c <conn_handle_disconnected+0x8>
			 * handle 0 can be used as a valid non-zero handle.
			 */
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
		}
	}
}
   1619a:	4770      	bx	lr
		if (!disconnected_handles[i]) {
   1619c:	4a05      	ldr	r2, [pc, #20]	; (161b4 <conn_handle_disconnected+0x20>)
   1619e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   161a2:	b922      	cbnz	r2, 161ae <conn_handle_disconnected+0x1a>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   161a4:	f440 4270 	orr.w	r2, r0, #61440	; 0xf000
   161a8:	4902      	ldr	r1, [pc, #8]	; (161b4 <conn_handle_disconnected+0x20>)
   161aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   161ae:	3301      	adds	r3, #1
   161b0:	e7f1      	b.n	16196 <conn_handle_disconnected+0x2>
   161b2:	bf00      	nop
   161b4:	20002bd0 	.word	0x20002bd0

000161b8 <conn_handle_is_disconnected>:

static bool conn_handle_is_disconnected(uint16_t handle)
{
	handle |= ~BT_ACL_HANDLE_MASK;
   161b8:	f440 4070 	orr.w	r0, r0, #61440	; 0xf000

	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   161bc:	2300      	movs	r3, #0
   161be:	2b00      	cmp	r3, #0
   161c0:	dd01      	ble.n	161c6 <conn_handle_is_disconnected+0xe>
			disconnected_handles[i] = 0;
			return true;
		}
	}

	return false;
   161c2:	2000      	movs	r0, #0
}
   161c4:	4770      	bx	lr
		if (disconnected_handles[i] == handle) {
   161c6:	4a06      	ldr	r2, [pc, #24]	; (161e0 <conn_handle_is_disconnected+0x28>)
   161c8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
   161cc:	4282      	cmp	r2, r0
   161ce:	d001      	beq.n	161d4 <conn_handle_is_disconnected+0x1c>
	for (int i = 0; i < ARRAY_SIZE(disconnected_handles); i++) {
   161d0:	3301      	adds	r3, #1
   161d2:	e7f4      	b.n	161be <conn_handle_is_disconnected+0x6>
			disconnected_handles[i] = 0;
   161d4:	4a02      	ldr	r2, [pc, #8]	; (161e0 <conn_handle_is_disconnected+0x28>)
   161d6:	2100      	movs	r1, #0
   161d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			return true;
   161dc:	2001      	movs	r0, #1
   161de:	4770      	bx	lr
   161e0:	20002bd0 	.word	0x20002bd0

000161e4 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   161e4:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.hci_version = rp->hci_version;
   161e6:	7851      	ldrb	r1, [r2, #1]
   161e8:	4b08      	ldr	r3, [pc, #32]	; (1620c <read_local_ver_complete+0x28>)
   161ea:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   161ee:	8851      	ldrh	r1, [r2, #2]
   161f0:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   161f4:	7911      	ldrb	r1, [r2, #4]
   161f6:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   161fa:	f8b2 1007 	ldrh.w	r1, [r2, #7]
   161fe:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   16202:	f8b2 2005 	ldrh.w	r2, [r2, #5]
   16206:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
}
   1620a:	4770      	bx	lr
   1620c:	200002a0 	.word	0x200002a0

00016210 <le_read_supp_states_complete>:
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
   16210:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
   16212:	7a19      	ldrb	r1, [r3, #8]
   16214:	79da      	ldrb	r2, [r3, #7]
   16216:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   1621a:	7998      	ldrb	r0, [r3, #6]
   1621c:	795a      	ldrb	r2, [r3, #5]
   1621e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 *
 *  @return 32-bit integer in host endianness.
 */
static inline uint32_t sys_get_le32(const uint8_t src[4])
{
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16222:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	return ((uint16_t)src[1] << 8) | src[0];
   16226:	7918      	ldrb	r0, [r3, #4]
   16228:	78d9      	ldrb	r1, [r3, #3]
   1622a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   1622e:	7898      	ldrb	r0, [r3, #2]
   16230:	785b      	ldrb	r3, [r3, #1]
   16232:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   16236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16

	BT_DBG("status 0x%02x", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
   1623a:	4903      	ldr	r1, [pc, #12]	; (16248 <le_read_supp_states_complete+0x38>)
   1623c:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
   16240:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
}
   16244:	4770      	bx	lr
   16246:	bf00      	nop
   16248:	200002a0 	.word	0x200002a0

0001624c <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   1624c:	b470      	push	{r4, r5, r6}
   1624e:	b08f      	sub	sp, #60	; 0x3c
   16250:	4606      	mov	r6, r0
	const char * const str[] = {
   16252:	ac01      	add	r4, sp, #4
   16254:	4d0a      	ldr	r5, [pc, #40]	; (16280 <ver_str+0x34>)
   16256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1625a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1625c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1625e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16262:	682b      	ldr	r3, [r5, #0]
   16264:	6023      	str	r3, [r4, #0]
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3"
	};

	if (ver < ARRAY_SIZE(str)) {
   16266:	2e0c      	cmp	r6, #12
   16268:	d903      	bls.n	16272 <ver_str+0x26>
		return str[ver];
	}

	return "unknown";
   1626a:	4806      	ldr	r0, [pc, #24]	; (16284 <ver_str+0x38>)
}
   1626c:	b00f      	add	sp, #60	; 0x3c
   1626e:	bc70      	pop	{r4, r5, r6}
   16270:	4770      	bx	lr
		return str[ver];
   16272:	ab0e      	add	r3, sp, #56	; 0x38
   16274:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   16278:	f856 0c34 	ldr.w	r0, [r6, #-52]
   1627c:	e7f6      	b.n	1626c <ver_str+0x20>
   1627e:	bf00      	nop
   16280:	0002c7f8 	.word	0x0002c7f8
   16284:	0002d8d0 	.word	0x0002d8d0

00016288 <vs_hw_platform>:
{
	static const char * const plat_str[] = {
		"reserved", "Intel Corporation", "Nordic Semiconductor",
		"NXP Semiconductors" };

	if (platform < ARRAY_SIZE(plat_str)) {
   16288:	2803      	cmp	r0, #3
   1628a:	d901      	bls.n	16290 <vs_hw_platform+0x8>
		return plat_str[platform];
	}

	return "unknown";
   1628c:	4802      	ldr	r0, [pc, #8]	; (16298 <vs_hw_platform+0x10>)
}
   1628e:	4770      	bx	lr
		return plat_str[platform];
   16290:	4b02      	ldr	r3, [pc, #8]	; (1629c <vs_hw_platform+0x14>)
   16292:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   16296:	4770      	bx	lr
   16298:	0002d8d0 	.word	0x0002d8d0
   1629c:	0002df94 	.word	0x0002df94

000162a0 <vs_hw_variant>:
{
	static const char * const nordic_str[] = {
		"reserved", "nRF51x", "nRF52x", "nRF53x"
	};

	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   162a0:	2802      	cmp	r0, #2
   162a2:	d107      	bne.n	162b4 <vs_hw_variant+0x14>
		return "unknown";
	}

	if (variant < ARRAY_SIZE(nordic_str)) {
   162a4:	2903      	cmp	r1, #3
   162a6:	d901      	bls.n	162ac <vs_hw_variant+0xc>
		return nordic_str[variant];
	}

	return "unknown";
   162a8:	4803      	ldr	r0, [pc, #12]	; (162b8 <vs_hw_variant+0x18>)
}
   162aa:	4770      	bx	lr
		return nordic_str[variant];
   162ac:	4b03      	ldr	r3, [pc, #12]	; (162bc <vs_hw_variant+0x1c>)
   162ae:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   162b2:	4770      	bx	lr
		return "unknown";
   162b4:	4800      	ldr	r0, [pc, #0]	; (162b8 <vs_hw_variant+0x18>)
   162b6:	4770      	bx	lr
   162b8:	0002d8d0 	.word	0x0002d8d0
   162bc:	0002df64 	.word	0x0002df64

000162c0 <vs_fw_variant>:
		"Vendor specific controller",
		"Firmware loader",
		"Rescue image",
	};

	if (variant < ARRAY_SIZE(var_str)) {
   162c0:	2803      	cmp	r0, #3
   162c2:	d901      	bls.n	162c8 <vs_fw_variant+0x8>
		return var_str[variant];
	}

	return "unknown";
   162c4:	4802      	ldr	r0, [pc, #8]	; (162d0 <vs_fw_variant+0x10>)
}
   162c6:	4770      	bx	lr
		return var_str[variant];
   162c8:	4b02      	ldr	r3, [pc, #8]	; (162d4 <vs_fw_variant+0x14>)
   162ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   162ce:	4770      	bx	lr
   162d0:	0002d8d0 	.word	0x0002d8d0
   162d4:	0002dfcc 	.word	0x0002dfcc

000162d8 <hci_reset_complete>:
{
   162d8:	b508      	push	{r3, lr}
	uint8_t status = buf->data[0];
   162da:	6883      	ldr	r3, [r0, #8]
   162dc:	781b      	ldrb	r3, [r3, #0]
	if (status) {
   162de:	b9a3      	cbnz	r3, 1630a <hci_reset_complete+0x32>
		bt_scan_reset();
   162e0:	f002 f954 	bl	1858c <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   162e4:	f3bf 8f5b 	dmb	ish
   162e8:	4b08      	ldr	r3, [pc, #32]	; (1630c <hci_reset_complete+0x34>)
   162ea:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   162ee:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   162f2:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   162f6:	f3bf 8f5b 	dmb	ish
   162fa:	e853 1f00 	ldrex	r1, [r3]
   162fe:	e843 2000 	strex	r0, r2, [r3]
   16302:	2800      	cmp	r0, #0
   16304:	d1f9      	bne.n	162fa <hci_reset_complete+0x22>
   16306:	f3bf 8f5b 	dmb	ish
}
   1630a:	bd08      	pop	{r3, pc}
   1630c:	200002a0 	.word	0x200002a0

00016310 <read_local_features_complete>:
{
   16310:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
   16312:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16314:	2208      	movs	r2, #8
   16316:	3101      	adds	r1, #1
   16318:	4801      	ldr	r0, [pc, #4]	; (16320 <read_local_features_complete+0x10>)
   1631a:	f011 fc99 	bl	27c50 <memcpy>
}
   1631e:	bd08      	pop	{r3, pc}
   16320:	20000310 	.word	0x20000310

00016324 <read_supported_commands_complete>:
{
   16324:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   16326:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   16328:	2240      	movs	r2, #64	; 0x40
   1632a:	3101      	adds	r1, #1
   1632c:	4801      	ldr	r0, [pc, #4]	; (16334 <read_supported_commands_complete+0x10>)
   1632e:	f011 fc8f 	bl	27c50 <memcpy>
}
   16332:	bd08      	pop	{r3, pc}
   16334:	20000318 	.word	0x20000318

00016338 <read_le_features_complete>:
{
   16338:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
   1633a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1633c:	2208      	movs	r2, #8
   1633e:	3101      	adds	r1, #1
   16340:	4801      	ldr	r0, [pc, #4]	; (16348 <read_le_features_complete+0x10>)
   16342:	f011 fc85 	bl	27c50 <memcpy>
}
   16346:	bd08      	pop	{r3, pc}
   16348:	20000370 	.word	0x20000370

0001634c <le_read_buffer_size_complete>:
{
   1634c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1634e:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   16350:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16354:	b299      	uxth	r1, r3
   16356:	4806      	ldr	r0, [pc, #24]	; (16370 <le_read_buffer_size_complete+0x24>)
   16358:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	if (!bt_dev.le.acl_mtu) {
   1635c:	b901      	cbnz	r1, 16360 <le_read_buffer_size_complete+0x14>
}
   1635e:	bd08      	pop	{r3, pc}
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   16360:	78d1      	ldrb	r1, [r2, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16362:	460a      	mov	r2, r1
   16364:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16368:	f015 fb35 	bl	2b9d6 <z_impl_k_sem_init>
   1636c:	e7f7      	b.n	1635e <le_read_buffer_size_complete+0x12>
   1636e:	bf00      	nop
   16370:	200002a0 	.word	0x200002a0

00016374 <read_buffer_size_complete>:
{
   16374:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   16376:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.acl_mtu) {
   16378:	4b08      	ldr	r3, [pc, #32]	; (1639c <read_buffer_size_complete+0x28>)
   1637a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   1637e:	b103      	cbz	r3, 16382 <read_buffer_size_complete+0xe>
}
   16380:	bd08      	pop	{r3, pc}
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   16382:	f8b2 3001 	ldrh.w	r3, [r2, #1]
   16386:	4805      	ldr	r0, [pc, #20]	; (1639c <read_buffer_size_complete+0x28>)
   16388:	f8a0 30fc 	strh.w	r3, [r0, #252]	; 0xfc
	pkts = sys_le16_to_cpu(rp->acl_max_num);
   1638c:	8891      	ldrh	r1, [r2, #4]
   1638e:	460a      	mov	r2, r1
   16390:	f500 7080 	add.w	r0, r0, #256	; 0x100
   16394:	f015 fb1f 	bl	2b9d6 <z_impl_k_sem_init>
   16398:	e7f2      	b.n	16380 <read_buffer_size_complete+0xc>
   1639a:	bf00      	nop
   1639c:	200002a0 	.word	0x200002a0

000163a0 <hci_data_buf_overflow>:
{
   163a0:	b508      	push	{r3, lr}
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   163a2:	6881      	ldr	r1, [r0, #8]
   163a4:	4b08      	ldr	r3, [pc, #32]	; (163c8 <hci_data_buf_overflow+0x28>)
   163a6:	4a09      	ldr	r2, [pc, #36]	; (163cc <hci_data_buf_overflow+0x2c>)
   163a8:	1a9b      	subs	r3, r3, r2
   163aa:	08db      	lsrs	r3, r3, #3
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   163ac:	f04f 0200 	mov.w	r2, #0
   163b0:	2002      	movs	r0, #2
   163b2:	f360 0202 	bfi	r2, r0, #0, #3
   163b6:	f36f 02c5 	bfc	r2, #3, #3
   163ba:	f363 128f 	bfi	r2, r3, #6, #10
   163be:	7809      	ldrb	r1, [r1, #0]
   163c0:	4803      	ldr	r0, [pc, #12]	; (163d0 <hci_data_buf_overflow+0x30>)
   163c2:	f7fb fd7d 	bl	11ec0 <log_1>
}
   163c6:	bd08      	pop	{r3, pc}
   163c8:	0002c630 	.word	0x0002c630
   163cc:	0002c610 	.word	0x0002c610
   163d0:	0002d8d8 	.word	0x0002d8d8

000163d4 <le_conn_complete_cancel>:
{
   163d4:	b510      	push	{r4, lr}
	conn = find_pending_connect(BT_HCI_ROLE_CENTRAL, NULL);
   163d6:	2100      	movs	r1, #0
   163d8:	4608      	mov	r0, r1
   163da:	f011 fd03 	bl	27de4 <find_pending_connect>
	if (!conn) {
   163de:	b188      	cbz	r0, 16404 <le_conn_complete_cancel+0x30>
   163e0:	4604      	mov	r4, r0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   163e2:	2302      	movs	r3, #2
   163e4:	7243      	strb	r3, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   163e6:	2100      	movs	r1, #0
   163e8:	f002 fe1a 	bl	19020 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   163ec:	f3bf 8f5b 	dmb	ish
   163f0:	6863      	ldr	r3, [r4, #4]
   163f2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   163f6:	f013 0f01 	tst.w	r3, #1
   163fa:	d114      	bne.n	16426 <le_conn_complete_cancel+0x52>
	bt_conn_unref(conn);
   163fc:	4620      	mov	r0, r4
   163fe:	f011 ffd4 	bl	283aa <bt_conn_unref>
}
   16402:	bd10      	pop	{r4, pc}
   16404:	4b0a      	ldr	r3, [pc, #40]	; (16430 <le_conn_complete_cancel+0x5c>)
   16406:	4a0b      	ldr	r2, [pc, #44]	; (16434 <le_conn_complete_cancel+0x60>)
   16408:	1a9b      	subs	r3, r3, r2
   1640a:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending central connection");
   1640c:	f04f 0100 	mov.w	r1, #0
   16410:	2201      	movs	r2, #1
   16412:	f362 0102 	bfi	r1, r2, #0, #3
   16416:	f36f 01c5 	bfc	r1, #3, #3
   1641a:	f363 118f 	bfi	r1, r3, #6, #10
   1641e:	4806      	ldr	r0, [pc, #24]	; (16438 <le_conn_complete_cancel+0x64>)
   16420:	f7fb fe04 	bl	1202c <log_0>
		return;
   16424:	e7ed      	b.n	16402 <le_conn_complete_cancel+0x2e>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   16426:	2102      	movs	r1, #2
   16428:	4620      	mov	r0, r4
   1642a:	f002 fdf9 	bl	19020 <bt_conn_set_state>
   1642e:	e7e5      	b.n	163fc <le_conn_complete_cancel+0x28>
   16430:	0002c630 	.word	0x0002c630
   16434:	0002c610 	.word	0x0002c610
   16438:	0002d900 	.word	0x0002d900

0001643c <hci_disconn_complete>:
{
   1643c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1643e:	6884      	ldr	r4, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16440:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
   16444:	7823      	ldrb	r3, [r4, #0]
   16446:	b103      	cbz	r3, 1644a <hci_disconn_complete+0xe>
}
   16448:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_handle(handle);
   1644a:	4630      	mov	r0, r6
   1644c:	f002 fdde 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   16450:	4605      	mov	r5, r0
   16452:	b158      	cbz	r0, 1646c <hci_disconn_complete+0x30>
	conn->err = evt->reason;
   16454:	78e3      	ldrb	r3, [r4, #3]
   16456:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16458:	2100      	movs	r1, #0
   1645a:	f002 fde1 	bl	19020 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   1645e:	78ab      	ldrb	r3, [r5, #2]
   16460:	2b01      	cmp	r3, #1
   16462:	d015      	beq.n	16490 <hci_disconn_complete+0x54>
		bt_conn_unref(conn);
   16464:	4628      	mov	r0, r5
   16466:	f011 ffa0 	bl	283aa <bt_conn_unref>
		return;
   1646a:	e7ed      	b.n	16448 <hci_disconn_complete+0xc>
   1646c:	4b12      	ldr	r3, [pc, #72]	; (164b8 <hci_disconn_complete+0x7c>)
   1646e:	4a13      	ldr	r2, [pc, #76]	; (164bc <hci_disconn_complete+0x80>)
   16470:	1a9b      	subs	r3, r3, r2
   16472:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to look up conn with handle %u", handle);
   16474:	f04f 0200 	mov.w	r2, #0
   16478:	2101      	movs	r1, #1
   1647a:	f361 0202 	bfi	r2, r1, #0, #3
   1647e:	f36f 02c5 	bfc	r2, #3, #3
   16482:	f363 128f 	bfi	r2, r3, #6, #10
   16486:	4631      	mov	r1, r6
   16488:	480d      	ldr	r0, [pc, #52]	; (164c0 <hci_disconn_complete+0x84>)
   1648a:	f7fb fd19 	bl	11ec0 <log_1>
		return;
   1648e:	e7db      	b.n	16448 <hci_disconn_complete+0xc>
   16490:	f3bf 8f5b 	dmb	ish
   16494:	686b      	ldr	r3, [r5, #4]
   16496:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1649a:	f013 0f01 	tst.w	r3, #1
   1649e:	d103      	bne.n	164a8 <hci_disconn_complete+0x6c>
	bt_conn_unref(conn);
   164a0:	4628      	mov	r0, r5
   164a2:	f011 ff82 	bl	283aa <bt_conn_unref>
   164a6:	e7cf      	b.n	16448 <hci_disconn_complete+0xc>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   164a8:	2102      	movs	r1, #2
   164aa:	4628      	mov	r0, r5
   164ac:	f002 fdb8 	bl	19020 <bt_conn_set_state>
		bt_le_scan_update(false);
   164b0:	2000      	movs	r0, #0
   164b2:	f002 f8cb 	bl	1864c <bt_le_scan_update>
   164b6:	e7f3      	b.n	164a0 <hci_disconn_complete+0x64>
   164b8:	0002c630 	.word	0x0002c630
   164bc:	0002c610 	.word	0x0002c610
   164c0:	0002d920 	.word	0x0002d920

000164c4 <le_data_len_change>:
{
   164c4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
   164c6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   164c8:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   164ca:	4620      	mov	r0, r4
   164cc:	f002 fd9e 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   164d0:	b110      	cbz	r0, 164d8 <le_data_len_change+0x14>
	bt_conn_unref(conn);
   164d2:	f011 ff6a 	bl	283aa <bt_conn_unref>
}
   164d6:	bd10      	pop	{r4, pc}
   164d8:	4b08      	ldr	r3, [pc, #32]	; (164fc <le_data_len_change+0x38>)
   164da:	4a09      	ldr	r2, [pc, #36]	; (16500 <le_data_len_change+0x3c>)
   164dc:	1a9b      	subs	r3, r3, r2
   164de:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   164e0:	f04f 0200 	mov.w	r2, #0
   164e4:	2101      	movs	r1, #1
   164e6:	f361 0202 	bfi	r2, r1, #0, #3
   164ea:	f36f 02c5 	bfc	r2, #3, #3
   164ee:	f363 128f 	bfi	r2, r3, #6, #10
   164f2:	4621      	mov	r1, r4
   164f4:	4803      	ldr	r0, [pc, #12]	; (16504 <le_data_len_change+0x40>)
   164f6:	f7fb fce3 	bl	11ec0 <log_1>
		return;
   164fa:	e7ec      	b.n	164d6 <le_data_len_change+0x12>
   164fc:	0002c630 	.word	0x0002c630
   16500:	0002c610 	.word	0x0002c610
   16504:	0002d948 	.word	0x0002d948

00016508 <hci_num_completed_packets>:
{
   16508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1650c:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
   16510:	2700      	movs	r7, #0
   16512:	e05c      	b.n	165ce <hci_num_completed_packets+0xc6>
				conn->pending_no_cb--;
   16514:	3b01      	subs	r3, #1
   16516:	61e3      	str	r3, [r4, #28]
   16518:	f382 8811 	msr	BASEPRI, r2
   1651c:	f3bf 8f6f 	isb	sy
				k_sem_give(bt_conn_get_pkts(conn));
   16520:	4620      	mov	r0, r4
   16522:	f002 fb61 	bl	18be8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   16526:	f00b fbab 	bl	21c80 <z_impl_k_sem_give>
				continue;
   1652a:	e025      	b.n	16578 <hci_num_completed_packets+0x70>
	list->tail = node;
   1652c:	61a1      	str	r1, [r4, #24]
   1652e:	f382 8811 	msr	BASEPRI, r2
   16532:	f3bf 8f6f 	isb	sy
			if (!node) {
   16536:	2b00      	cmp	r3, #0
   16538:	d036      	beq.n	165a8 <hci_num_completed_packets+0xa0>
	__asm__ volatile(
   1653a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1653e:	f3ef 8111 	mrs	r1, BASEPRI
   16542:	f382 8812 	msr	BASEPRI_MAX, r2
   16546:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1654a:	68da      	ldr	r2, [r3, #12]
   1654c:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   1654e:	2200      	movs	r2, #0
   16550:	60da      	str	r2, [r3, #12]
	parent->next = child;
   16552:	601a      	str	r2, [r3, #0]
	return list->tail;
   16554:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   16556:	2a00      	cmp	r2, #0
   16558:	d05a      	beq.n	16610 <hci_num_completed_packets+0x108>
	parent->next = child;
   1655a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1655c:	6263      	str	r3, [r4, #36]	; 0x24
	__asm__ volatile(
   1655e:	f381 8811 	msr	BASEPRI, r1
   16562:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16566:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1656a:	f00b fd53 	bl	22014 <k_work_submit>
			k_sem_give(bt_conn_get_pkts(conn));
   1656e:	4620      	mov	r0, r4
   16570:	f002 fb3a 	bl	18be8 <bt_conn_get_pkts>
   16574:	f00b fb84 	bl	21c80 <z_impl_k_sem_give>
{
   16578:	462e      	mov	r6, r5
		while (count--) {
   1657a:	1e75      	subs	r5, r6, #1
   1657c:	b2ad      	uxth	r5, r5
   1657e:	b316      	cbz	r6, 165c6 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   16580:	f04f 0340 	mov.w	r3, #64	; 0x40
   16584:	f3ef 8211 	mrs	r2, BASEPRI
   16588:	f383 8812 	msr	BASEPRI_MAX, r3
   1658c:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16590:	69e3      	ldr	r3, [r4, #28]
   16592:	2b00      	cmp	r3, #0
   16594:	d1be      	bne.n	16514 <hci_num_completed_packets+0xc>
	return list->head;
   16596:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16598:	2b00      	cmp	r3, #0
   1659a:	d0c8      	beq.n	1652e <hci_num_completed_packets+0x26>
	return node->next;
   1659c:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   1659e:	6161      	str	r1, [r4, #20]
	return list->tail;
   165a0:	69a0      	ldr	r0, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   165a2:	4298      	cmp	r0, r3
   165a4:	d1c3      	bne.n	1652e <hci_num_completed_packets+0x26>
   165a6:	e7c1      	b.n	1652c <hci_num_completed_packets+0x24>
   165a8:	4b1c      	ldr	r3, [pc, #112]	; (1661c <hci_num_completed_packets+0x114>)
   165aa:	4a1d      	ldr	r2, [pc, #116]	; (16620 <hci_num_completed_packets+0x118>)
   165ac:	1a9b      	subs	r3, r3, r2
   165ae:	08db      	lsrs	r3, r3, #3
				BT_ERR("packets count mismatch");
   165b0:	2201      	movs	r2, #1
   165b2:	f362 0902 	bfi	r9, r2, #0, #3
   165b6:	f36f 09c5 	bfc	r9, #3, #3
   165ba:	f363 198f 	bfi	r9, r3, #6, #10
   165be:	4649      	mov	r1, r9
   165c0:	4818      	ldr	r0, [pc, #96]	; (16624 <hci_num_completed_packets+0x11c>)
   165c2:	f7fb fd33 	bl	1202c <log_0>
		bt_conn_unref(conn);
   165c6:	4620      	mov	r0, r4
   165c8:	f011 feef 	bl	283aa <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
   165cc:	3701      	adds	r7, #1
   165ce:	f898 3000 	ldrb.w	r3, [r8]
   165d2:	429f      	cmp	r7, r3
   165d4:	da1f      	bge.n	16616 <hci_num_completed_packets+0x10e>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   165d6:	eb08 0387 	add.w	r3, r8, r7, lsl #2
   165da:	f8b3 5001 	ldrh.w	r5, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   165de:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   165e2:	4628      	mov	r0, r5
   165e4:	f002 fd12 	bl	1900c <bt_conn_lookup_handle>
		if (!conn) {
   165e8:	4604      	mov	r4, r0
   165ea:	2800      	cmp	r0, #0
   165ec:	d1c5      	bne.n	1657a <hci_num_completed_packets+0x72>
   165ee:	4b0b      	ldr	r3, [pc, #44]	; (1661c <hci_num_completed_packets+0x114>)
   165f0:	4a0b      	ldr	r2, [pc, #44]	; (16620 <hci_num_completed_packets+0x118>)
   165f2:	1a9b      	subs	r3, r3, r2
   165f4:	08db      	lsrs	r3, r3, #3
			BT_ERR("No connection for handle %u", handle);
   165f6:	2201      	movs	r2, #1
   165f8:	f362 0a02 	bfi	sl, r2, #0, #3
   165fc:	f36f 0ac5 	bfc	sl, #3, #3
   16600:	f363 1a8f 	bfi	sl, r3, #6, #10
   16604:	4652      	mov	r2, sl
   16606:	4629      	mov	r1, r5
   16608:	4807      	ldr	r0, [pc, #28]	; (16628 <hci_num_completed_packets+0x120>)
   1660a:	f7fb fc59 	bl	11ec0 <log_1>
			continue;
   1660e:	e7dd      	b.n	165cc <hci_num_completed_packets+0xc4>
	list->tail = node;
   16610:	6263      	str	r3, [r4, #36]	; 0x24
	list->head = node;
   16612:	6223      	str	r3, [r4, #32]
}
   16614:	e7a3      	b.n	1655e <hci_num_completed_packets+0x56>
}
   16616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1661a:	bf00      	nop
   1661c:	0002c630 	.word	0x0002c630
   16620:	0002c610 	.word	0x0002c610
   16624:	0002d988 	.word	0x0002d988
   16628:	0002d96c 	.word	0x0002d96c

0001662c <hci_cmd_done>:
{
   1662c:	b570      	push	{r4, r5, r6, lr}
   1662e:	b084      	sub	sp, #16
   16630:	4605      	mov	r5, r0
   16632:	460e      	mov	r6, r1
   16634:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16636:	7990      	ldrb	r0, [r2, #6]
   16638:	f005 fbbe 	bl	1bdb8 <net_buf_pool_get>
   1663c:	4b55      	ldr	r3, [pc, #340]	; (16794 <hci_cmd_done+0x168>)
   1663e:	4283      	cmp	r3, r0
   16640:	d01c      	beq.n	1667c <hci_cmd_done+0x50>
   16642:	4b55      	ldr	r3, [pc, #340]	; (16798 <hci_cmd_done+0x16c>)
   16644:	4a55      	ldr	r2, [pc, #340]	; (1679c <hci_cmd_done+0x170>)
   16646:	1a9b      	subs	r3, r3, r2
   16648:	08db      	lsrs	r3, r3, #3
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1664a:	f04f 0600 	mov.w	r6, #0
   1664e:	2202      	movs	r2, #2
   16650:	f362 0602 	bfi	r6, r2, #0, #3
   16654:	f36f 06c5 	bfc	r6, #3, #3
   16658:	f363 168f 	bfi	r6, r3, #6, #10
   1665c:	9500      	str	r5, [sp, #0]
   1665e:	79a0      	ldrb	r0, [r4, #6]
   16660:	9001      	str	r0, [sp, #4]
   16662:	f005 fba9 	bl	1bdb8 <net_buf_pool_get>
   16666:	9002      	str	r0, [sp, #8]
   16668:	4b4a      	ldr	r3, [pc, #296]	; (16794 <hci_cmd_done+0x168>)
   1666a:	9303      	str	r3, [sp, #12]
   1666c:	4633      	mov	r3, r6
   1666e:	2204      	movs	r2, #4
   16670:	4669      	mov	r1, sp
   16672:	484b      	ldr	r0, [pc, #300]	; (167a0 <hci_cmd_done+0x174>)
   16674:	f7fb fc96 	bl	11fa4 <log_n>
}
   16678:	b004      	add	sp, #16
   1667a:	bd70      	pop	{r4, r5, r6, pc}
	if (cmd(buf)->opcode != opcode) {
   1667c:	4620      	mov	r0, r4
   1667e:	f005 fba3 	bl	1bdc8 <net_buf_id>
   16682:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16686:	4b47      	ldr	r3, [pc, #284]	; (167a4 <hci_cmd_done+0x178>)
   16688:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1668c:	8843      	ldrh	r3, [r0, #2]
   1668e:	42ab      	cmp	r3, r5
   16690:	d133      	bne.n	166fa <hci_cmd_done+0xce>
	if (bt_dev.sent_cmd) {
   16692:	4b45      	ldr	r3, [pc, #276]	; (167a8 <hci_cmd_done+0x17c>)
   16694:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   16698:	b128      	cbz	r0, 166a6 <hci_cmd_done+0x7a>
		net_buf_unref(bt_dev.sent_cmd);
   1669a:	f013 fd6d 	bl	2a178 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1669e:	4b42      	ldr	r3, [pc, #264]	; (167a8 <hci_cmd_done+0x17c>)
   166a0:	2200      	movs	r2, #0
   166a2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   166a6:	4620      	mov	r0, r4
   166a8:	f005 fb8e 	bl	1bdc8 <net_buf_id>
   166ac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   166b0:	4b3c      	ldr	r3, [pc, #240]	; (167a4 <hci_cmd_done+0x178>)
   166b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   166b6:	6843      	ldr	r3, [r0, #4]
   166b8:	b10b      	cbz	r3, 166be <hci_cmd_done+0x92>
   166ba:	2e00      	cmp	r6, #0
   166bc:	d039      	beq.n	16732 <hci_cmd_done+0x106>
	if (cmd(buf)->sync) {
   166be:	4620      	mov	r0, r4
   166c0:	f005 fb82 	bl	1bdc8 <net_buf_id>
   166c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   166c8:	4b36      	ldr	r3, [pc, #216]	; (167a4 <hci_cmd_done+0x178>)
   166ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   166ce:	6883      	ldr	r3, [r0, #8]
   166d0:	2b00      	cmp	r3, #0
   166d2:	d0d1      	beq.n	16678 <hci_cmd_done+0x4c>
		cmd(buf)->status = status;
   166d4:	4620      	mov	r0, r4
   166d6:	f005 fb77 	bl	1bdc8 <net_buf_id>
   166da:	4d32      	ldr	r5, [pc, #200]	; (167a4 <hci_cmd_done+0x178>)
   166dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   166e0:	f805 6020 	strb.w	r6, [r5, r0, lsl #2]
		k_sem_give(cmd(buf)->sync);
   166e4:	4620      	mov	r0, r4
   166e6:	f005 fb6f 	bl	1bdc8 <net_buf_id>
   166ea:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   166ee:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   166f2:	68a8      	ldr	r0, [r5, #8]
   166f4:	f00b fac4 	bl	21c80 <z_impl_k_sem_give>
}
   166f8:	e7be      	b.n	16678 <hci_cmd_done+0x4c>
   166fa:	4b27      	ldr	r3, [pc, #156]	; (16798 <hci_cmd_done+0x16c>)
   166fc:	4a27      	ldr	r2, [pc, #156]	; (1679c <hci_cmd_done+0x170>)
   166fe:	1a9b      	subs	r3, r3, r2
   16700:	08db      	lsrs	r3, r3, #3
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   16702:	f04f 0600 	mov.w	r6, #0
   16706:	2202      	movs	r2, #2
   16708:	f362 0602 	bfi	r6, r2, #0, #3
   1670c:	f36f 06c5 	bfc	r6, #3, #3
   16710:	f363 168f 	bfi	r6, r3, #6, #10
   16714:	4620      	mov	r0, r4
   16716:	f005 fb57 	bl	1bdc8 <net_buf_id>
   1671a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1671e:	4b21      	ldr	r3, [pc, #132]	; (167a4 <hci_cmd_done+0x178>)
   16720:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16724:	4633      	mov	r3, r6
   16726:	8842      	ldrh	r2, [r0, #2]
   16728:	4629      	mov	r1, r5
   1672a:	4820      	ldr	r0, [pc, #128]	; (167ac <hci_cmd_done+0x180>)
   1672c:	f7fb fbfe 	bl	11f2c <log_2>
		return;
   16730:	e7a2      	b.n	16678 <hci_cmd_done+0x4c>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16732:	4620      	mov	r0, r4
   16734:	f005 fb48 	bl	1bdc8 <net_buf_id>
   16738:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1673c:	4b19      	ldr	r3, [pc, #100]	; (167a4 <hci_cmd_done+0x178>)
   1673e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16742:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16744:	6813      	ldr	r3, [r2, #0]
   16746:	6851      	ldr	r1, [r2, #4]
   16748:	7a10      	ldrb	r0, [r2, #8]
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1674a:	f001 051f 	and.w	r5, r1, #31
   1674e:	2201      	movs	r2, #1
   16750:	40aa      	lsls	r2, r5

	if (val) {
   16752:	b170      	cbz	r0, 16772 <hci_cmd_done+0x146>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16754:	0949      	lsrs	r1, r1, #5
   16756:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1675a:	f3bf 8f5b 	dmb	ish
   1675e:	e853 1f00 	ldrex	r1, [r3]
   16762:	4311      	orrs	r1, r2
   16764:	e843 1000 	strex	r0, r1, [r3]
   16768:	2800      	cmp	r0, #0
   1676a:	d1f8      	bne.n	1675e <hci_cmd_done+0x132>
   1676c:	f3bf 8f5b 	dmb	ish
   16770:	e7a5      	b.n	166be <hci_cmd_done+0x92>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16772:	0949      	lsrs	r1, r1, #5
   16774:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16778:	43d2      	mvns	r2, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1677a:	f3bf 8f5b 	dmb	ish
   1677e:	e853 1f00 	ldrex	r1, [r3]
   16782:	4011      	ands	r1, r2
   16784:	e843 1000 	strex	r0, r1, [r3]
   16788:	2800      	cmp	r0, #0
   1678a:	d1f8      	bne.n	1677e <hci_cmd_done+0x152>
   1678c:	f3bf 8f5b 	dmb	ish
	}
}
   16790:	e795      	b.n	166be <hci_cmd_done+0x92>
   16792:	bf00      	nop
   16794:	20000928 	.word	0x20000928
   16798:	0002c630 	.word	0x0002c630
   1679c:	0002c610 	.word	0x0002c610
   167a0:	0002d9a0 	.word	0x0002d9a0
   167a4:	20002bb8 	.word	0x20002bb8
   167a8:	200002a0 	.word	0x200002a0
   167ac:	0002d9d8 	.word	0x0002d9d8

000167b0 <hci_cmd_status>:
{
   167b0:	b538      	push	{r3, r4, r5, lr}
   167b2:	4604      	mov	r4, r0
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   167b4:	2104      	movs	r1, #4
   167b6:	3008      	adds	r0, #8
   167b8:	f013 fd52 	bl	2a260 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   167bc:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   167be:	4622      	mov	r2, r4
   167c0:	7801      	ldrb	r1, [r0, #0]
   167c2:	8840      	ldrh	r0, [r0, #2]
   167c4:	f7ff ff32 	bl	1662c <hci_cmd_done>
	if (ncmd) {
   167c8:	b905      	cbnz	r5, 167cc <hci_cmd_status+0x1c>
}
   167ca:	bd38      	pop	{r3, r4, r5, pc}
	z_impl_k_sem_give(sem);
   167cc:	4801      	ldr	r0, [pc, #4]	; (167d4 <hci_cmd_status+0x24>)
   167ce:	f00b fa57 	bl	21c80 <z_impl_k_sem_give>
   167d2:	e7fa      	b.n	167ca <hci_cmd_status+0x1a>
   167d4:	200003b8 	.word	0x200003b8

000167d8 <hci_cmd_complete>:
{
   167d8:	b538      	push	{r3, r4, r5, lr}
   167da:	4604      	mov	r4, r0
   167dc:	2103      	movs	r1, #3
   167de:	3008      	adds	r0, #8
   167e0:	f013 fd3e 	bl	2a260 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   167e4:	7805      	ldrb	r5, [r0, #0]
	status = buf->data[0];
   167e6:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
   167e8:	4622      	mov	r2, r4
   167ea:	7819      	ldrb	r1, [r3, #0]
   167ec:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   167f0:	f7ff ff1c 	bl	1662c <hci_cmd_done>
	if (ncmd) {
   167f4:	b905      	cbnz	r5, 167f8 <hci_cmd_complete+0x20>
}
   167f6:	bd38      	pop	{r3, r4, r5, pc}
   167f8:	4801      	ldr	r0, [pc, #4]	; (16800 <hci_cmd_complete+0x28>)
   167fa:	f00b fa41 	bl	21c80 <z_impl_k_sem_give>
   167fe:	e7fa      	b.n	167f6 <hci_cmd_complete+0x1e>
   16800:	200003b8 	.word	0x200003b8

00016804 <hci_hardware_error>:
{
   16804:	b508      	push	{r3, lr}
   16806:	2101      	movs	r1, #1
   16808:	3008      	adds	r0, #8
   1680a:	f013 fd29 	bl	2a260 <net_buf_simple_pull_mem>
   1680e:	4b09      	ldr	r3, [pc, #36]	; (16834 <hci_hardware_error+0x30>)
   16810:	4a09      	ldr	r2, [pc, #36]	; (16838 <hci_hardware_error+0x34>)
   16812:	1a9b      	subs	r3, r3, r2
   16814:	08db      	lsrs	r3, r3, #3
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16816:	f04f 0200 	mov.w	r2, #0
   1681a:	2101      	movs	r1, #1
   1681c:	f361 0202 	bfi	r2, r1, #0, #3
   16820:	f36f 02c5 	bfc	r2, #3, #3
   16824:	f363 128f 	bfi	r2, r3, #6, #10
   16828:	7801      	ldrb	r1, [r0, #0]
   1682a:	4804      	ldr	r0, [pc, #16]	; (1683c <hci_hardware_error+0x38>)
   1682c:	f7fb fb48 	bl	11ec0 <log_1>
}
   16830:	bd08      	pop	{r3, pc}
   16832:	bf00      	nop
   16834:	0002c630 	.word	0x0002c630
   16838:	0002c610 	.word	0x0002c610
   1683c:	0002da0c 	.word	0x0002da0c

00016840 <hci_vendor_event>:
{
   16840:	b510      	push	{r4, lr}
   16842:	4b0c      	ldr	r3, [pc, #48]	; (16874 <hci_vendor_event+0x34>)
   16844:	4a0c      	ldr	r2, [pc, #48]	; (16878 <hci_vendor_event+0x38>)
   16846:	1a9b      	subs	r3, r3, r2
   16848:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled vendor-specific event: %s",
   1684a:	f04f 0400 	mov.w	r4, #0
   1684e:	2202      	movs	r2, #2
   16850:	f362 0402 	bfi	r4, r2, #0, #3
   16854:	f36f 04c5 	bfc	r4, #3, #3
   16858:	f363 148f 	bfi	r4, r3, #6, #10
   1685c:	8981      	ldrh	r1, [r0, #12]
   1685e:	6880      	ldr	r0, [r0, #8]
   16860:	f7ff fb9a 	bl	15f98 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   16864:	f7fb f9b2 	bl	11bcc <z_log_strdup>
   16868:	4601      	mov	r1, r0
   1686a:	4622      	mov	r2, r4
   1686c:	4803      	ldr	r0, [pc, #12]	; (1687c <hci_vendor_event+0x3c>)
   1686e:	f7fb fb27 	bl	11ec0 <log_1>
}
   16872:	bd10      	pop	{r4, pc}
   16874:	0002c630 	.word	0x0002c630
   16878:	0002c610 	.word	0x0002c610
   1687c:	0002da30 	.word	0x0002da30

00016880 <bt_dev_show_info>:
{
   16880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16884:	b086      	sub	sp, #24
   16886:	4b3d      	ldr	r3, [pc, #244]	; (1697c <bt_dev_show_info+0xfc>)
   16888:	4a3d      	ldr	r2, [pc, #244]	; (16980 <bt_dev_show_info+0x100>)
   1688a:	1a9b      	subs	r3, r3, r2
   1688c:	08db      	lsrs	r3, r3, #3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1688e:	f04f 0400 	mov.w	r4, #0
   16892:	2203      	movs	r2, #3
   16894:	f362 0402 	bfi	r4, r2, #0, #3
   16898:	f36f 04c5 	bfc	r4, #3, #3
   1689c:	f363 148f 	bfi	r4, r3, #6, #10
   168a0:	4b38      	ldr	r3, [pc, #224]	; (16984 <bt_dev_show_info+0x104>)
   168a2:	79db      	ldrb	r3, [r3, #7]
   168a4:	2b01      	cmp	r3, #1
   168a6:	d92b      	bls.n	16900 <bt_dev_show_info+0x80>
   168a8:	4e37      	ldr	r6, [pc, #220]	; (16988 <bt_dev_show_info+0x108>)
   168aa:	4836      	ldr	r0, [pc, #216]	; (16984 <bt_dev_show_info+0x104>)
   168ac:	f7ff fb9c 	bl	15fe8 <bt_addr_le_str_real>
   168b0:	f7fb f98c 	bl	11bcc <z_log_strdup>
   168b4:	4602      	mov	r2, r0
   168b6:	4623      	mov	r3, r4
   168b8:	4631      	mov	r1, r6
   168ba:	4834      	ldr	r0, [pc, #208]	; (1698c <bt_dev_show_info+0x10c>)
   168bc:	f7fb fb36 	bl	11f2c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   168c0:	2401      	movs	r4, #1
   168c2:	4b30      	ldr	r3, [pc, #192]	; (16984 <bt_dev_show_info+0x104>)
   168c4:	79db      	ldrb	r3, [r3, #7]
   168c6:	42a3      	cmp	r3, r4
   168c8:	dd1c      	ble.n	16904 <bt_dev_show_info+0x84>
   168ca:	4b2c      	ldr	r3, [pc, #176]	; (1697c <bt_dev_show_info+0xfc>)
   168cc:	4a2c      	ldr	r2, [pc, #176]	; (16980 <bt_dev_show_info+0x100>)
   168ce:	1a9b      	subs	r3, r3, r2
   168d0:	08db      	lsrs	r3, r3, #3
		BT_INFO("Identity[%d]: %s",
   168d2:	2203      	movs	r2, #3
   168d4:	f362 0502 	bfi	r5, r2, #0, #3
   168d8:	f36f 05c5 	bfc	r5, #3, #3
   168dc:	f363 158f 	bfi	r5, r3, #6, #10
   168e0:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   168e4:	4827      	ldr	r0, [pc, #156]	; (16984 <bt_dev_show_info+0x104>)
   168e6:	4418      	add	r0, r3
   168e8:	f7ff fb7e 	bl	15fe8 <bt_addr_le_str_real>
   168ec:	f7fb f96e 	bl	11bcc <z_log_strdup>
   168f0:	4602      	mov	r2, r0
   168f2:	462b      	mov	r3, r5
   168f4:	4621      	mov	r1, r4
   168f6:	4826      	ldr	r0, [pc, #152]	; (16990 <bt_dev_show_info+0x110>)
   168f8:	f7fb fb18 	bl	11f2c <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   168fc:	3401      	adds	r4, #1
   168fe:	e7e0      	b.n	168c2 <bt_dev_show_info+0x42>
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16900:	4e24      	ldr	r6, [pc, #144]	; (16994 <bt_dev_show_info+0x114>)
   16902:	e7d2      	b.n	168aa <bt_dev_show_info+0x2a>
   16904:	4c1d      	ldr	r4, [pc, #116]	; (1697c <bt_dev_show_info+0xfc>)
   16906:	4b1e      	ldr	r3, [pc, #120]	; (16980 <bt_dev_show_info+0x100>)
   16908:	1ae4      	subs	r4, r4, r3
   1690a:	08e4      	lsrs	r4, r4, #3
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   1690c:	2703      	movs	r7, #3
   1690e:	f04f 0500 	mov.w	r5, #0
   16912:	f367 0502 	bfi	r5, r7, #0, #3
   16916:	f36f 05c5 	bfc	r5, #3, #3
   1691a:	f364 158f 	bfi	r5, r4, #6, #10
   1691e:	4e19      	ldr	r6, [pc, #100]	; (16984 <bt_dev_show_info+0x104>)
   16920:	f896 8068 	ldrb.w	r8, [r6, #104]	; 0x68
   16924:	4640      	mov	r0, r8
   16926:	f7ff fc91 	bl	1624c <ver_str>
   1692a:	9002      	str	r0, [sp, #8]
   1692c:	f8cd 800c 	str.w	r8, [sp, #12]
   16930:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
   16934:	9304      	str	r3, [sp, #16]
   16936:	f8b6 306e 	ldrh.w	r3, [r6, #110]	; 0x6e
   1693a:	9305      	str	r3, [sp, #20]
   1693c:	462b      	mov	r3, r5
   1693e:	2204      	movs	r2, #4
   16940:	a902      	add	r1, sp, #8
   16942:	4815      	ldr	r0, [pc, #84]	; (16998 <bt_dev_show_info+0x118>)
   16944:	f7fb fb2e 	bl	11fa4 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   16948:	f04f 0500 	mov.w	r5, #0
   1694c:	f367 0502 	bfi	r5, r7, #0, #3
   16950:	f36f 05c5 	bfc	r5, #3, #3
   16954:	f364 158f 	bfi	r5, r4, #6, #10
   16958:	f896 4069 	ldrb.w	r4, [r6, #105]	; 0x69
   1695c:	4620      	mov	r0, r4
   1695e:	f7ff fc75 	bl	1624c <ver_str>
   16962:	4601      	mov	r1, r0
   16964:	f8ad 5000 	strh.w	r5, [sp]
   16968:	f8b6 306c 	ldrh.w	r3, [r6, #108]	; 0x6c
   1696c:	4622      	mov	r2, r4
   1696e:	480b      	ldr	r0, [pc, #44]	; (1699c <bt_dev_show_info+0x11c>)
   16970:	f7fb fa68 	bl	11e44 <log_3>
}
   16974:	b006      	add	sp, #24
   16976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1697a:	bf00      	nop
   1697c:	0002c630 	.word	0x0002c630
   16980:	0002c610 	.word	0x0002c610
   16984:	200002a0 	.word	0x200002a0
   16988:	0002da54 	.word	0x0002da54
   1698c:	0002da58 	.word	0x0002da58
   16990:	0002da68 	.word	0x0002da68
   16994:	0002c884 	.word	0x0002c884
   16998:	0002da7c 	.word	0x0002da7c
   1699c:	0002dabc 	.word	0x0002dabc

000169a0 <hci_acl>:
{
   169a0:	b570      	push	{r4, r5, r6, lr}
   169a2:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   169a4:	8983      	ldrh	r3, [r0, #12]
   169a6:	2b03      	cmp	r3, #3
   169a8:	d923      	bls.n	169f2 <hci_acl+0x52>
   169aa:	2104      	movs	r1, #4
   169ac:	f104 0008 	add.w	r0, r4, #8
   169b0:	f013 fc56 	bl	2a260 <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
   169b4:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   169b6:	8800      	ldrh	r0, [r0, #0]
	flags = bt_acl_flags(handle);
   169b8:	0b06      	lsrs	r6, r0, #12
	acl(buf)->handle = bt_acl_handle(handle);
   169ba:	f3c0 000b 	ubfx	r0, r0, #0, #12
   169be:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   169c0:	23ff      	movs	r3, #255	; 0xff
   169c2:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   169c4:	89a1      	ldrh	r1, [r4, #12]
   169c6:	4291      	cmp	r1, r2
   169c8:	d021      	beq.n	16a0e <hci_acl+0x6e>
   169ca:	4823      	ldr	r0, [pc, #140]	; (16a58 <hci_acl+0xb8>)
   169cc:	4b23      	ldr	r3, [pc, #140]	; (16a5c <hci_acl+0xbc>)
   169ce:	1ac0      	subs	r0, r0, r3
   169d0:	08c0      	lsrs	r0, r0, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   169d2:	f04f 0300 	mov.w	r3, #0
   169d6:	2501      	movs	r5, #1
   169d8:	f365 0302 	bfi	r3, r5, #0, #3
   169dc:	f36f 03c5 	bfc	r3, #3, #3
   169e0:	f360 138f 	bfi	r3, r0, #6, #10
   169e4:	481e      	ldr	r0, [pc, #120]	; (16a60 <hci_acl+0xc0>)
   169e6:	f7fb faa1 	bl	11f2c <log_2>
		net_buf_unref(buf);
   169ea:	4620      	mov	r0, r4
   169ec:	f013 fbc4 	bl	2a178 <net_buf_unref>
}
   169f0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   169f2:	f44f 73db 	mov.w	r3, #438	; 0x1b6
   169f6:	4a1b      	ldr	r2, [pc, #108]	; (16a64 <hci_acl+0xc4>)
   169f8:	491b      	ldr	r1, [pc, #108]	; (16a68 <hci_acl+0xc8>)
   169fa:	481c      	ldr	r0, [pc, #112]	; (16a6c <hci_acl+0xcc>)
   169fc:	f00f f92a 	bl	25c54 <printk>
   16a00:	4040      	eors	r0, r0
   16a02:	f380 8811 	msr	BASEPRI, r0
   16a06:	f04f 0003 	mov.w	r0, #3
   16a0a:	df02      	svc	2
   16a0c:	e7cd      	b.n	169aa <hci_acl+0xa>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16a0e:	f002 fafd 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   16a12:	4605      	mov	r5, r0
   16a14:	b158      	cbz	r0, 16a2e <hci_acl+0x8e>
	acl(buf)->index = bt_conn_index(conn);
   16a16:	f002 fc29 	bl	1926c <bt_conn_index>
   16a1a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   16a1c:	4632      	mov	r2, r6
   16a1e:	4621      	mov	r1, r4
   16a20:	4628      	mov	r0, r5
   16a22:	f011 fc8f 	bl	28344 <bt_conn_recv>
	bt_conn_unref(conn);
   16a26:	4628      	mov	r0, r5
   16a28:	f011 fcbf 	bl	283aa <bt_conn_unref>
   16a2c:	e7e0      	b.n	169f0 <hci_acl+0x50>
   16a2e:	4b0a      	ldr	r3, [pc, #40]	; (16a58 <hci_acl+0xb8>)
   16a30:	4a0a      	ldr	r2, [pc, #40]	; (16a5c <hci_acl+0xbc>)
   16a32:	1a9b      	subs	r3, r3, r2
   16a34:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16a36:	f04f 0200 	mov.w	r2, #0
   16a3a:	2101      	movs	r1, #1
   16a3c:	f361 0202 	bfi	r2, r1, #0, #3
   16a40:	f36f 02c5 	bfc	r2, #3, #3
   16a44:	f363 128f 	bfi	r2, r3, #6, #10
   16a48:	8ae1      	ldrh	r1, [r4, #22]
   16a4a:	4809      	ldr	r0, [pc, #36]	; (16a70 <hci_acl+0xd0>)
   16a4c:	f7fb fa38 	bl	11ec0 <log_1>
		net_buf_unref(buf);
   16a50:	4620      	mov	r0, r4
   16a52:	f013 fb91 	bl	2a178 <net_buf_unref>
		return;
   16a56:	e7cb      	b.n	169f0 <hci_acl+0x50>
   16a58:	0002c630 	.word	0x0002c630
   16a5c:	0002c610 	.word	0x0002c610
   16a60:	0002db54 	.word	0x0002db54
   16a64:	0002dae4 	.word	0x0002dae4
   16a68:	0002db18 	.word	0x0002db18
   16a6c:	0002db34 	.word	0x0002db34
   16a70:	0002db78 	.word	0x0002db78

00016a74 <le_conn_update_complete>:
{
   16a74:	b570      	push	{r4, r5, r6, lr}
   16a76:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16a78:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   16a7a:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	conn = bt_conn_lookup_handle(handle);
   16a7e:	4630      	mov	r0, r6
   16a80:	f002 fac4 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   16a84:	b148      	cbz	r0, 16a9a <le_conn_update_complete+0x26>
   16a86:	4605      	mov	r5, r0
	if (!evt->status) {
   16a88:	7823      	ldrb	r3, [r4, #0]
   16a8a:	b1c3      	cbz	r3, 16abe <le_conn_update_complete+0x4a>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16a8c:	2b1a      	cmp	r3, #26
   16a8e:	d025      	beq.n	16adc <le_conn_update_complete+0x68>
	bt_conn_unref(conn);
   16a90:	4628      	mov	r0, r5
   16a92:	f011 fc8a 	bl	283aa <bt_conn_unref>
}
   16a96:	b002      	add	sp, #8
   16a98:	bd70      	pop	{r4, r5, r6, pc}
   16a9a:	4b24      	ldr	r3, [pc, #144]	; (16b2c <le_conn_update_complete+0xb8>)
   16a9c:	4a24      	ldr	r2, [pc, #144]	; (16b30 <le_conn_update_complete+0xbc>)
   16a9e:	1a9b      	subs	r3, r3, r2
   16aa0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   16aa2:	f04f 0200 	mov.w	r2, #0
   16aa6:	2101      	movs	r1, #1
   16aa8:	f361 0202 	bfi	r2, r1, #0, #3
   16aac:	f36f 02c5 	bfc	r2, #3, #3
   16ab0:	f363 128f 	bfi	r2, r3, #6, #10
   16ab4:	4631      	mov	r1, r6
   16ab6:	481f      	ldr	r0, [pc, #124]	; (16b34 <le_conn_update_complete+0xc0>)
   16ab8:	f7fb fa02 	bl	11ec0 <log_1>
		return;
   16abc:	e7eb      	b.n	16a96 <le_conn_update_complete+0x22>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   16abe:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   16ac2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   16ac6:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   16aca:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16ace:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   16ad2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   16ad6:	f002 fbff 	bl	192d8 <notify_le_param_updated>
   16ada:	e7d9      	b.n	16a90 <le_conn_update_complete+0x1c>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16adc:	78c3      	ldrb	r3, [r0, #3]
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   16ade:	2b01      	cmp	r3, #1
   16ae0:	d1d6      	bne.n	16a90 <le_conn_update_complete+0x1c>
		   !atomic_test_and_set_bit(conn->flags,
   16ae2:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16ae4:	f3bf 8f5b 	dmb	ish
   16ae8:	e853 2f00 	ldrex	r2, [r3]
   16aec:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   16af0:	e843 1000 	strex	r0, r1, [r3]
   16af4:	2800      	cmp	r0, #0
   16af6:	d1f7      	bne.n	16ae8 <le_conn_update_complete+0x74>
   16af8:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16afc:	f412 6f80 	tst.w	r2, #1024	; 0x400
   16b00:	d1c6      	bne.n	16a90 <le_conn_update_complete+0x1c>
		param.interval_min = conn->le.interval_min;
   16b02:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   16b06:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   16b0a:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   16b0e:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   16b12:	f8b5 30a8 	ldrh.w	r3, [r5, #168]	; 0xa8
   16b16:	f8ad 3004 	strh.w	r3, [sp, #4]
		param.timeout = conn->le.pending_timeout;
   16b1a:	f8b5 30aa 	ldrh.w	r3, [r5, #170]	; 0xaa
   16b1e:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   16b22:	4669      	mov	r1, sp
   16b24:	4628      	mov	r0, r5
   16b26:	f011 fe21 	bl	2876c <bt_l2cap_update_conn_param>
   16b2a:	e7b1      	b.n	16a90 <le_conn_update_complete+0x1c>
   16b2c:	0002c630 	.word	0x0002c630
   16b30:	0002c610 	.word	0x0002c610
   16b34:	0002d948 	.word	0x0002d948

00016b38 <hci_le_meta_event>:
{
   16b38:	b5f0      	push	{r4, r5, r6, r7, lr}
   16b3a:	b083      	sub	sp, #12
   16b3c:	4604      	mov	r4, r0
   16b3e:	2101      	movs	r1, #1
   16b40:	3008      	adds	r0, #8
   16b42:	f013 fb8d 	bl	2a260 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16b46:	7805      	ldrb	r5, [r0, #0]
	for (i = 0; i < num_handlers; i++) {
   16b48:	2300      	movs	r3, #0
   16b4a:	2b07      	cmp	r3, #7
   16b4c:	d823      	bhi.n	16b96 <hci_le_meta_event+0x5e>
		const struct event_handler *handler = &handlers[i];
   16b4e:	4a20      	ldr	r2, [pc, #128]	; (16bd0 <hci_le_meta_event+0x98>)
   16b50:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   16b54:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   16b58:	4295      	cmp	r5, r2
   16b5a:	d108      	bne.n	16b6e <hci_le_meta_event+0x36>
		if (buf->len < handler->min_len) {
   16b5c:	89a1      	ldrh	r1, [r4, #12]
   16b5e:	7843      	ldrb	r3, [r0, #1]
   16b60:	4299      	cmp	r1, r3
   16b62:	d306      	bcc.n	16b72 <hci_le_meta_event+0x3a>
		handler->handler(buf);
   16b64:	6843      	ldr	r3, [r0, #4]
   16b66:	4620      	mov	r0, r4
   16b68:	4798      	blx	r3
}
   16b6a:	b003      	add	sp, #12
   16b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < num_handlers; i++) {
   16b6e:	3301      	adds	r3, #1
   16b70:	e7eb      	b.n	16b4a <hci_le_meta_event+0x12>
   16b72:	4a18      	ldr	r2, [pc, #96]	; (16bd4 <hci_le_meta_event+0x9c>)
   16b74:	4b18      	ldr	r3, [pc, #96]	; (16bd8 <hci_le_meta_event+0xa0>)
   16b76:	1ad2      	subs	r2, r2, r3
   16b78:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16b7a:	f04f 0300 	mov.w	r3, #0
   16b7e:	2001      	movs	r0, #1
   16b80:	f360 0302 	bfi	r3, r0, #0, #3
   16b84:	f36f 03c5 	bfc	r3, #3, #3
   16b88:	f362 138f 	bfi	r3, r2, #6, #10
   16b8c:	462a      	mov	r2, r5
   16b8e:	4813      	ldr	r0, [pc, #76]	; (16bdc <hci_le_meta_event+0xa4>)
   16b90:	f7fb f9cc 	bl	11f2c <log_2>
			return;
   16b94:	e7e9      	b.n	16b6a <hci_le_meta_event+0x32>
   16b96:	4b0f      	ldr	r3, [pc, #60]	; (16bd4 <hci_le_meta_event+0x9c>)
   16b98:	4a0f      	ldr	r2, [pc, #60]	; (16bd8 <hci_le_meta_event+0xa0>)
   16b9a:	1a9b      	subs	r3, r3, r2
   16b9c:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16b9e:	f04f 0600 	mov.w	r6, #0
   16ba2:	2202      	movs	r2, #2
   16ba4:	f362 0602 	bfi	r6, r2, #0, #3
   16ba8:	f36f 06c5 	bfc	r6, #3, #3
   16bac:	f363 168f 	bfi	r6, r3, #6, #10
   16bb0:	89a7      	ldrh	r7, [r4, #12]
   16bb2:	4639      	mov	r1, r7
   16bb4:	68a0      	ldr	r0, [r4, #8]
   16bb6:	f7ff f9ef 	bl	15f98 <bt_hex_real>
   16bba:	f7fb f807 	bl	11bcc <z_log_strdup>
   16bbe:	4603      	mov	r3, r0
   16bc0:	f8ad 6000 	strh.w	r6, [sp]
   16bc4:	463a      	mov	r2, r7
   16bc6:	4629      	mov	r1, r5
   16bc8:	4805      	ldr	r0, [pc, #20]	; (16be0 <hci_le_meta_event+0xa8>)
   16bca:	f7fb f93b 	bl	11e44 <log_3>
}
   16bce:	e7cc      	b.n	16b6a <hci_le_meta_event+0x32>
   16bd0:	0002df14 	.word	0x0002df14
   16bd4:	0002c630 	.word	0x0002c630
   16bd8:	0002c610 	.word	0x0002c610
   16bdc:	0002db9c 	.word	0x0002db9c
   16be0:	0002dbc0 	.word	0x0002dbc0

00016be4 <hci_event>:
{
   16be4:	b5f0      	push	{r4, r5, r6, r7, lr}
   16be6:	b083      	sub	sp, #12
   16be8:	4604      	mov	r4, r0
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16bea:	8983      	ldrh	r3, [r0, #12]
   16bec:	2b01      	cmp	r3, #1
   16bee:	d916      	bls.n	16c1e <hci_event+0x3a>
   16bf0:	2102      	movs	r1, #2
   16bf2:	f104 0008 	add.w	r0, r4, #8
   16bf6:	f013 fb33 	bl	2a260 <net_buf_simple_pull_mem>
   16bfa:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16bfc:	7803      	ldrb	r3, [r0, #0]
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   16bfe:	3b05      	subs	r3, #5
   16c00:	2b15      	cmp	r3, #21
   16c02:	d81c      	bhi.n	16c3e <hci_event+0x5a>
   16c04:	e8df f003 	tbb	[pc, r3]
   16c08:	1b1b1b19 	.word	0x1b1b1b19
   16c0c:	1b1b1b1b 	.word	0x1b1b1b1b
   16c10:	1b36361b 	.word	0x1b36361b
   16c14:	1b361b1b 	.word	0x1b361b1b
   16c18:	1b1b1b1b 	.word	0x1b1b1b1b
   16c1c:	361b      	.short	0x361b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16c1e:	f640 130d 	movw	r3, #2317	; 0x90d
   16c22:	4a35      	ldr	r2, [pc, #212]	; (16cf8 <hci_event+0x114>)
   16c24:	4935      	ldr	r1, [pc, #212]	; (16cfc <hci_event+0x118>)
   16c26:	4836      	ldr	r0, [pc, #216]	; (16d00 <hci_event+0x11c>)
   16c28:	f00f f814 	bl	25c54 <printk>
   16c2c:	4040      	eors	r0, r0
   16c2e:	f380 8811 	msr	BASEPRI, r0
   16c32:	f04f 0003 	mov.w	r0, #3
   16c36:	df02      	svc	2
   16c38:	e7da      	b.n	16bf0 <hci_event+0xc>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16c3a:	2303      	movs	r3, #3
   16c3c:	e000      	b.n	16c40 <hci_event+0x5c>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   16c3e:	2302      	movs	r3, #2
   16c40:	f013 0f02 	tst.w	r3, #2
   16c44:	d018      	beq.n	16c78 <hci_event+0x94>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16c46:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   16c48:	2300      	movs	r3, #0
   16c4a:	2b03      	cmp	r3, #3
   16c4c:	d836      	bhi.n	16cbc <hci_event+0xd8>
		const struct event_handler *handler = &handlers[i];
   16c4e:	4a2d      	ldr	r2, [pc, #180]	; (16d04 <hci_event+0x120>)
   16c50:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   16c54:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   16c58:	4295      	cmp	r5, r2
   16c5a:	d11b      	bne.n	16c94 <hci_event+0xb0>
		if (buf->len < handler->min_len) {
   16c5c:	89a1      	ldrh	r1, [r4, #12]
   16c5e:	7843      	ldrb	r3, [r0, #1]
   16c60:	4299      	cmp	r1, r3
   16c62:	d319      	bcc.n	16c98 <hci_event+0xb4>
		handler->handler(buf);
   16c64:	6843      	ldr	r3, [r0, #4]
   16c66:	4620      	mov	r0, r4
   16c68:	4798      	blx	r3
	net_buf_unref(buf);
   16c6a:	4620      	mov	r0, r4
   16c6c:	f013 fa84 	bl	2a178 <net_buf_unref>
}
   16c70:	b003      	add	sp, #12
   16c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   16c74:	2301      	movs	r3, #1
   16c76:	e7e3      	b.n	16c40 <hci_event+0x5c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   16c78:	f640 1311 	movw	r3, #2321	; 0x911
   16c7c:	4a1e      	ldr	r2, [pc, #120]	; (16cf8 <hci_event+0x114>)
   16c7e:	4922      	ldr	r1, [pc, #136]	; (16d08 <hci_event+0x124>)
   16c80:	481f      	ldr	r0, [pc, #124]	; (16d00 <hci_event+0x11c>)
   16c82:	f00e ffe7 	bl	25c54 <printk>
   16c86:	4040      	eors	r0, r0
   16c88:	f380 8811 	msr	BASEPRI, r0
   16c8c:	f04f 0003 	mov.w	r0, #3
   16c90:	df02      	svc	2
   16c92:	e7d8      	b.n	16c46 <hci_event+0x62>
	for (i = 0; i < num_handlers; i++) {
   16c94:	3301      	adds	r3, #1
   16c96:	e7d8      	b.n	16c4a <hci_event+0x66>
   16c98:	4a1c      	ldr	r2, [pc, #112]	; (16d0c <hci_event+0x128>)
   16c9a:	4b1d      	ldr	r3, [pc, #116]	; (16d10 <hci_event+0x12c>)
   16c9c:	1ad2      	subs	r2, r2, r3
   16c9e:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   16ca0:	f04f 0300 	mov.w	r3, #0
   16ca4:	2001      	movs	r0, #1
   16ca6:	f360 0302 	bfi	r3, r0, #0, #3
   16caa:	f36f 03c5 	bfc	r3, #3, #3
   16cae:	f362 138f 	bfi	r3, r2, #6, #10
   16cb2:	462a      	mov	r2, r5
   16cb4:	4817      	ldr	r0, [pc, #92]	; (16d14 <hci_event+0x130>)
   16cb6:	f7fb f939 	bl	11f2c <log_2>
			return;
   16cba:	e7d6      	b.n	16c6a <hci_event+0x86>
   16cbc:	4b13      	ldr	r3, [pc, #76]	; (16d0c <hci_event+0x128>)
   16cbe:	4a14      	ldr	r2, [pc, #80]	; (16d10 <hci_event+0x12c>)
   16cc0:	1a9b      	subs	r3, r3, r2
   16cc2:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   16cc4:	f04f 0600 	mov.w	r6, #0
   16cc8:	2202      	movs	r2, #2
   16cca:	f362 0602 	bfi	r6, r2, #0, #3
   16cce:	f36f 06c5 	bfc	r6, #3, #3
   16cd2:	f363 168f 	bfi	r6, r3, #6, #10
   16cd6:	89a7      	ldrh	r7, [r4, #12]
   16cd8:	4639      	mov	r1, r7
   16cda:	68a0      	ldr	r0, [r4, #8]
   16cdc:	f7ff f95c 	bl	15f98 <bt_hex_real>
   16ce0:	f7fa ff74 	bl	11bcc <z_log_strdup>
   16ce4:	4603      	mov	r3, r0
   16ce6:	f8ad 6000 	strh.w	r6, [sp]
   16cea:	463a      	mov	r2, r7
   16cec:	4629      	mov	r1, r5
   16cee:	480a      	ldr	r0, [pc, #40]	; (16d18 <hci_event+0x134>)
   16cf0:	f7fb f8a8 	bl	11e44 <log_3>
   16cf4:	e7b9      	b.n	16c6a <hci_event+0x86>
   16cf6:	bf00      	nop
   16cf8:	0002dae4 	.word	0x0002dae4
   16cfc:	0002db18 	.word	0x0002db18
   16d00:	0002db34 	.word	0x0002db34
   16d04:	0002df74 	.word	0x0002df74
   16d08:	0002dbe4 	.word	0x0002dbe4
   16d0c:	0002c630 	.word	0x0002c630
   16d10:	0002c610 	.word	0x0002c610
   16d14:	0002db9c 	.word	0x0002db9c
   16d18:	0002dbc0 	.word	0x0002dbc0

00016d1c <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   16d1c:	b538      	push	{r3, r4, r5, lr}
   16d1e:	e003      	b.n	16d28 <hci_rx_thread+0xc>
		case BT_BUF_ISO_IN:
			hci_iso(buf);
			break;
#endif /* CONFIG_BT_ISO */
		case BT_BUF_EVT:
			hci_event(buf);
   16d20:	f7ff ff60 	bl	16be4 <hci_event>
	z_impl_k_yield();
   16d24:	f00b fcca 	bl	226bc <z_impl_k_yield>
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   16d28:	f04f 32ff 	mov.w	r2, #4294967295
   16d2c:	f04f 33ff 	mov.w	r3, #4294967295
   16d30:	480f      	ldr	r0, [pc, #60]	; (16d70 <hci_rx_thread+0x54>)
   16d32:	f013 f9ef 	bl	2a114 <net_buf_get>
   16d36:	4604      	mov	r4, r0
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16d38:	7d01      	ldrb	r1, [r0, #20]
		switch (bt_buf_get_type(buf)) {
   16d3a:	2901      	cmp	r1, #1
   16d3c:	d0f0      	beq.n	16d20 <hci_rx_thread+0x4>
   16d3e:	2903      	cmp	r1, #3
   16d40:	d102      	bne.n	16d48 <hci_rx_thread+0x2c>
			hci_acl(buf);
   16d42:	f7ff fe2d 	bl	169a0 <hci_acl>
			break;
   16d46:	e7ed      	b.n	16d24 <hci_rx_thread+0x8>
   16d48:	4b0a      	ldr	r3, [pc, #40]	; (16d74 <hci_rx_thread+0x58>)
   16d4a:	4a0b      	ldr	r2, [pc, #44]	; (16d78 <hci_rx_thread+0x5c>)
   16d4c:	1a9b      	subs	r3, r3, r2
   16d4e:	08db      	lsrs	r3, r3, #3
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   16d50:	2201      	movs	r2, #1
   16d52:	f362 0502 	bfi	r5, r2, #0, #3
   16d56:	f36f 05c5 	bfc	r5, #3, #3
   16d5a:	f363 158f 	bfi	r5, r3, #6, #10
   16d5e:	462a      	mov	r2, r5
   16d60:	4806      	ldr	r0, [pc, #24]	; (16d7c <hci_rx_thread+0x60>)
   16d62:	f7fb f8ad 	bl	11ec0 <log_1>
			net_buf_unref(buf);
   16d66:	4620      	mov	r0, r4
   16d68:	f013 fa06 	bl	2a178 <net_buf_unref>
			break;
   16d6c:	e7da      	b.n	16d24 <hci_rx_thread+0x8>
   16d6e:	bf00      	nop
   16d70:	200003d4 	.word	0x200003d4
   16d74:	0002c630 	.word	0x0002c630
   16d78:	0002c610 	.word	0x0002c610
   16d7c:	0002dc14 	.word	0x0002dc14

00016d80 <bt_hci_cmd_state_set_init>:
{
   16d80:	b510      	push	{r4, lr}
   16d82:	460c      	mov	r4, r1
	state->target = target;
   16d84:	600a      	str	r2, [r1, #0]
	state->bit = bit;
   16d86:	604b      	str	r3, [r1, #4]
	state->val = val;
   16d88:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16d8c:	720b      	strb	r3, [r1, #8]
	cmd(buf)->state = state;
   16d8e:	f005 f81b 	bl	1bdc8 <net_buf_id>
   16d92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16d96:	4b02      	ldr	r3, [pc, #8]	; (16da0 <bt_hci_cmd_state_set_init+0x20>)
   16d98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16d9c:	6044      	str	r4, [r0, #4]
}
   16d9e:	bd10      	pop	{r4, pc}
   16da0:	20002bb8 	.word	0x20002bb8

00016da4 <bt_hci_cmd_create>:
{
   16da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16da8:	4682      	mov	sl, r0
   16daa:	460e      	mov	r6, r1
	return net_buf_alloc_fixed(pool, timeout);
   16dac:	f04f 32ff 	mov.w	r2, #4294967295
   16db0:	f04f 33ff 	mov.w	r3, #4294967295
   16db4:	4817      	ldr	r0, [pc, #92]	; (16e14 <bt_hci_cmd_create+0x70>)
   16db6:	f013 f9a6 	bl	2a106 <net_buf_alloc_fixed>
   16dba:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   16dbc:	f100 0808 	add.w	r8, r0, #8
   16dc0:	2100      	movs	r1, #0
   16dc2:	4640      	mov	r0, r8
   16dc4:	f013 f9c7 	bl	2a156 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16dc8:	2700      	movs	r7, #0
   16dca:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   16dcc:	4620      	mov	r0, r4
   16dce:	f004 fffb 	bl	1bdc8 <net_buf_id>
   16dd2:	4d11      	ldr	r5, [pc, #68]	; (16e18 <bt_hci_cmd_create+0x74>)
   16dd4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16dd8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   16ddc:	f8a0 a002 	strh.w	sl, [r0, #2]
	cmd(buf)->sync = NULL;
   16de0:	4620      	mov	r0, r4
   16de2:	f004 fff1 	bl	1bdc8 <net_buf_id>
   16de6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16dea:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   16dee:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   16df0:	4620      	mov	r0, r4
   16df2:	f004 ffe9 	bl	1bdc8 <net_buf_id>
   16df6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16dfa:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   16dfe:	606f      	str	r7, [r5, #4]
	return net_buf_simple_add(&buf->b, len);
   16e00:	2103      	movs	r1, #3
   16e02:	4640      	mov	r0, r8
   16e04:	f013 fa02 	bl	2a20c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   16e08:	f8a0 a000 	strh.w	sl, [r0]
	hdr->param_len = param_len;
   16e0c:	7086      	strb	r6, [r0, #2]
}
   16e0e:	4620      	mov	r0, r4
   16e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16e14:	20000928 	.word	0x20000928
   16e18:	20002bb8 	.word	0x20002bb8

00016e1c <bt_hci_cmd_send_sync>:
{
   16e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e1e:	b087      	sub	sp, #28
   16e20:	4606      	mov	r6, r0
   16e22:	4615      	mov	r5, r2
	if (!buf) {
   16e24:	460c      	mov	r4, r1
   16e26:	b361      	cbz	r1, 16e82 <bt_hci_cmd_send_sync+0x66>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16e28:	2201      	movs	r2, #1
   16e2a:	2100      	movs	r1, #0
   16e2c:	4668      	mov	r0, sp
   16e2e:	f014 fdd2 	bl	2b9d6 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16e32:	4620      	mov	r0, r4
   16e34:	f004 ffc8 	bl	1bdc8 <net_buf_id>
   16e38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e3c:	4b2f      	ldr	r3, [pc, #188]	; (16efc <bt_hci_cmd_send_sync+0xe0>)
   16e3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   16e42:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16e46:	4620      	mov	r0, r4
   16e48:	f013 f9bc 	bl	2a1c4 <net_buf_ref>
   16e4c:	4601      	mov	r1, r0
   16e4e:	482c      	ldr	r0, [pc, #176]	; (16f00 <bt_hci_cmd_send_sync+0xe4>)
   16e50:	f013 f985 	bl	2a15e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16e54:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16e58:	2300      	movs	r3, #0
   16e5a:	4668      	mov	r0, sp
   16e5c:	f00a ff38 	bl	21cd0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16e60:	4607      	mov	r7, r0
   16e62:	b9b0      	cbnz	r0, 16e92 <bt_hci_cmd_send_sync+0x76>
	status = cmd(buf)->status;
   16e64:	4620      	mov	r0, r4
   16e66:	f004 ffaf 	bl	1bdc8 <net_buf_id>
   16e6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e6e:	4b23      	ldr	r3, [pc, #140]	; (16efc <bt_hci_cmd_send_sync+0xe0>)
   16e70:	f813 7020 	ldrb.w	r7, [r3, r0, lsl #2]
	if (status) {
   16e74:	b9ff      	cbnz	r7, 16eb6 <bt_hci_cmd_send_sync+0x9a>
	if (rsp) {
   16e76:	2d00      	cmp	r5, #0
   16e78:	d03a      	beq.n	16ef0 <bt_hci_cmd_send_sync+0xd4>
		*rsp = buf;
   16e7a:	602c      	str	r4, [r5, #0]
	return 0;
   16e7c:	2000      	movs	r0, #0
}
   16e7e:	b007      	add	sp, #28
   16e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   16e82:	f7ff ff8f 	bl	16da4 <bt_hci_cmd_create>
		if (!buf) {
   16e86:	4604      	mov	r4, r0
   16e88:	2800      	cmp	r0, #0
   16e8a:	d1cd      	bne.n	16e28 <bt_hci_cmd_send_sync+0xc>
			return -ENOBUFS;
   16e8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16e90:	e7f5      	b.n	16e7e <bt_hci_cmd_send_sync+0x62>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   16e92:	f44f 7399 	mov.w	r3, #306	; 0x132
   16e96:	4a1b      	ldr	r2, [pc, #108]	; (16f04 <bt_hci_cmd_send_sync+0xe8>)
   16e98:	491b      	ldr	r1, [pc, #108]	; (16f08 <bt_hci_cmd_send_sync+0xec>)
   16e9a:	481c      	ldr	r0, [pc, #112]	; (16f0c <bt_hci_cmd_send_sync+0xf0>)
   16e9c:	f00e feda 	bl	25c54 <printk>
   16ea0:	4639      	mov	r1, r7
   16ea2:	481b      	ldr	r0, [pc, #108]	; (16f10 <bt_hci_cmd_send_sync+0xf4>)
   16ea4:	f00e fed6 	bl	25c54 <printk>
   16ea8:	4040      	eors	r0, r0
   16eaa:	f380 8811 	msr	BASEPRI, r0
   16eae:	f04f 0003 	mov.w	r0, #3
   16eb2:	df02      	svc	2
   16eb4:	e7d6      	b.n	16e64 <bt_hci_cmd_send_sync+0x48>
   16eb6:	4a17      	ldr	r2, [pc, #92]	; (16f14 <bt_hci_cmd_send_sync+0xf8>)
   16eb8:	4b17      	ldr	r3, [pc, #92]	; (16f18 <bt_hci_cmd_send_sync+0xfc>)
   16eba:	1ad2      	subs	r2, r2, r3
   16ebc:	08d2      	lsrs	r2, r2, #3
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   16ebe:	f04f 0300 	mov.w	r3, #0
   16ec2:	2102      	movs	r1, #2
   16ec4:	f361 0302 	bfi	r3, r1, #0, #3
   16ec8:	f36f 03c5 	bfc	r3, #3, #3
   16ecc:	f362 138f 	bfi	r3, r2, #6, #10
   16ed0:	463a      	mov	r2, r7
   16ed2:	4631      	mov	r1, r6
   16ed4:	4811      	ldr	r0, [pc, #68]	; (16f1c <bt_hci_cmd_send_sync+0x100>)
   16ed6:	f7fb f829 	bl	11f2c <log_2>
		net_buf_unref(buf);
   16eda:	4620      	mov	r0, r4
   16edc:	f013 f94c 	bl	2a178 <net_buf_unref>
		switch (status) {
   16ee0:	2f09      	cmp	r7, #9
   16ee2:	d002      	beq.n	16eea <bt_hci_cmd_send_sync+0xce>
			return -EIO;
   16ee4:	f06f 0004 	mvn.w	r0, #4
   16ee8:	e7c9      	b.n	16e7e <bt_hci_cmd_send_sync+0x62>
			return -ECONNREFUSED;
   16eea:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   16eee:	e7c6      	b.n	16e7e <bt_hci_cmd_send_sync+0x62>
		net_buf_unref(buf);
   16ef0:	4620      	mov	r0, r4
   16ef2:	f013 f941 	bl	2a178 <net_buf_unref>
	return 0;
   16ef6:	2000      	movs	r0, #0
   16ef8:	e7c1      	b.n	16e7e <bt_hci_cmd_send_sync+0x62>
   16efa:	bf00      	nop
   16efc:	20002bb8 	.word	0x20002bb8
   16f00:	200003ec 	.word	0x200003ec
   16f04:	0002dae4 	.word	0x0002dae4
   16f08:	0002dc28 	.word	0x0002dc28
   16f0c:	0002db34 	.word	0x0002db34
   16f10:	0002dc34 	.word	0x0002dc34
   16f14:	0002c630 	.word	0x0002c630
   16f18:	0002c610 	.word	0x0002c610
   16f1c:	0002dc54 	.word	0x0002dc54

00016f20 <common_init>:
{
   16f20:	b510      	push	{r4, lr}
   16f22:	b082      	sub	sp, #8
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16f24:	4b22      	ldr	r3, [pc, #136]	; (16fb0 <common_init+0x90>)
   16f26:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   16f2a:	689b      	ldr	r3, [r3, #8]
   16f2c:	f013 0f01 	tst.w	r3, #1
   16f30:	d10d      	bne.n	16f4e <common_init+0x2e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   16f32:	aa01      	add	r2, sp, #4
   16f34:	2100      	movs	r1, #0
   16f36:	f640 4003 	movw	r0, #3075	; 0xc03
   16f3a:	f7ff ff6f 	bl	16e1c <bt_hci_cmd_send_sync>
		if (err) {
   16f3e:	4604      	mov	r4, r0
   16f40:	b968      	cbnz	r0, 16f5e <common_init+0x3e>
		hci_reset_complete(rsp);
   16f42:	9801      	ldr	r0, [sp, #4]
   16f44:	f7ff f9c8 	bl	162d8 <hci_reset_complete>
		net_buf_unref(rsp);
   16f48:	9801      	ldr	r0, [sp, #4]
   16f4a:	f013 f915 	bl	2a178 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   16f4e:	aa01      	add	r2, sp, #4
   16f50:	2100      	movs	r1, #0
   16f52:	f241 0003 	movw	r0, #4099	; 0x1003
   16f56:	f7ff ff61 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   16f5a:	4604      	mov	r4, r0
   16f5c:	b110      	cbz	r0, 16f64 <common_init+0x44>
}
   16f5e:	4620      	mov	r0, r4
   16f60:	b002      	add	sp, #8
   16f62:	bd10      	pop	{r4, pc}
	read_local_features_complete(rsp);
   16f64:	9801      	ldr	r0, [sp, #4]
   16f66:	f7ff f9d3 	bl	16310 <read_local_features_complete>
	net_buf_unref(rsp);
   16f6a:	9801      	ldr	r0, [sp, #4]
   16f6c:	f013 f904 	bl	2a178 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   16f70:	aa01      	add	r2, sp, #4
   16f72:	2100      	movs	r1, #0
   16f74:	f241 0001 	movw	r0, #4097	; 0x1001
   16f78:	f7ff ff50 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   16f7c:	4604      	mov	r4, r0
   16f7e:	2800      	cmp	r0, #0
   16f80:	d1ed      	bne.n	16f5e <common_init+0x3e>
	read_local_ver_complete(rsp);
   16f82:	9801      	ldr	r0, [sp, #4]
   16f84:	f7ff f92e 	bl	161e4 <read_local_ver_complete>
	net_buf_unref(rsp);
   16f88:	9801      	ldr	r0, [sp, #4]
   16f8a:	f013 f8f5 	bl	2a178 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   16f8e:	aa01      	add	r2, sp, #4
   16f90:	2100      	movs	r1, #0
   16f92:	f241 0002 	movw	r0, #4098	; 0x1002
   16f96:	f7ff ff41 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   16f9a:	4604      	mov	r4, r0
   16f9c:	2800      	cmp	r0, #0
   16f9e:	d1de      	bne.n	16f5e <common_init+0x3e>
	read_supported_commands_complete(rsp);
   16fa0:	9801      	ldr	r0, [sp, #4]
   16fa2:	f7ff f9bf 	bl	16324 <read_supported_commands_complete>
	net_buf_unref(rsp);
   16fa6:	9801      	ldr	r0, [sp, #4]
   16fa8:	f013 f8e6 	bl	2a178 <net_buf_unref>
	return 0;
   16fac:	e7d7      	b.n	16f5e <common_init+0x3e>
   16fae:	bf00      	nop
   16fb0:	200002a0 	.word	0x200002a0

00016fb4 <hci_le_read_max_data_len>:
{
   16fb4:	b570      	push	{r4, r5, r6, lr}
   16fb6:	b082      	sub	sp, #8
   16fb8:	4605      	mov	r5, r0
   16fba:	460c      	mov	r4, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16fbc:	aa01      	add	r2, sp, #4
   16fbe:	2100      	movs	r1, #0
   16fc0:	f242 002f 	movw	r0, #8239	; 0x202f
   16fc4:	f7ff ff2a 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   16fc8:	4606      	mov	r6, r0
   16fca:	b960      	cbnz	r0, 16fe6 <hci_le_read_max_data_len+0x32>
	rp = (void *)rsp->data;
   16fcc:	9801      	ldr	r0, [sp, #4]
   16fce:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16fd0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16fd4:	802a      	strh	r2, [r5, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16fd6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16fda:	8023      	strh	r3, [r4, #0]
	net_buf_unref(rsp);
   16fdc:	f013 f8cc 	bl	2a178 <net_buf_unref>
}
   16fe0:	4630      	mov	r0, r6
   16fe2:	b002      	add	sp, #8
   16fe4:	bd70      	pop	{r4, r5, r6, pc}
   16fe6:	4b08      	ldr	r3, [pc, #32]	; (17008 <hci_le_read_max_data_len+0x54>)
   16fe8:	4a08      	ldr	r2, [pc, #32]	; (1700c <hci_le_read_max_data_len+0x58>)
   16fea:	1a9b      	subs	r3, r3, r2
   16fec:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to read DLE max data len");
   16fee:	f04f 0100 	mov.w	r1, #0
   16ff2:	2201      	movs	r2, #1
   16ff4:	f362 0102 	bfi	r1, r2, #0, #3
   16ff8:	f36f 01c5 	bfc	r1, #3, #3
   16ffc:	f363 118f 	bfi	r1, r3, #6, #10
   17000:	4803      	ldr	r0, [pc, #12]	; (17010 <hci_le_read_max_data_len+0x5c>)
   17002:	f7fb f813 	bl	1202c <log_0>
		return err;
   17006:	e7eb      	b.n	16fe0 <hci_le_read_max_data_len+0x2c>
   17008:	0002c630 	.word	0x0002c630
   1700c:	0002c610 	.word	0x0002c610
   17010:	0002dc70 	.word	0x0002dc70

00017014 <le_set_event_mask>:
{
   17014:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   17016:	2108      	movs	r1, #8
   17018:	f242 0001 	movw	r0, #8193	; 0x2001
   1701c:	f7ff fec2 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   17020:	b398      	cbz	r0, 1708a <le_set_event_mask+0x76>
   17022:	4604      	mov	r4, r0
   17024:	2108      	movs	r1, #8
   17026:	4408      	add	r0, r1
   17028:	f013 f8f0 	bl	2a20c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1702c:	4b18      	ldr	r3, [pc, #96]	; (17090 <le_set_event_mask+0x7c>)
   1702e:	f893 10d0 	ldrb.w	r1, [r3, #208]	; 0xd0
   17032:	f011 0f02 	tst.w	r1, #2
   17036:	d125      	bne.n	17084 <le_set_event_mask+0x70>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
   17038:	220f      	movs	r2, #15
   1703a:	2300      	movs	r3, #0
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1703c:	f011 0f20 	tst.w	r1, #32
   17040:	d001      	beq.n	17046 <le_set_event_mask+0x32>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   17042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		    (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
   17046:	4912      	ldr	r1, [pc, #72]	; (17090 <le_set_event_mask+0x7c>)
   17048:	f891 10d1 	ldrb.w	r1, [r1, #209]	; 0xd1
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1704c:	f011 0f09 	tst.w	r1, #9
   17050:	d001      	beq.n	17056 <le_set_event_mask+0x42>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   17052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	dst[0] = val;
   17056:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
   17058:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1705c:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
   1705e:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   17060:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   17062:	0e12      	lsrs	r2, r2, #24
   17064:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
   17066:	b29a      	uxth	r2, r3
	dst[0] = val;
   17068:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1706a:	0a12      	lsrs	r2, r2, #8
   1706c:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
   1706e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   17070:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17072:	0a13      	lsrs	r3, r2, #8
   17074:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17076:	2200      	movs	r2, #0
   17078:	4621      	mov	r1, r4
   1707a:	f242 0001 	movw	r0, #8193	; 0x2001
   1707e:	f7ff fecd 	bl	16e1c <bt_hci_cmd_send_sync>
}
   17082:	bd10      	pop	{r4, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   17084:	222f      	movs	r2, #47	; 0x2f
   17086:	2300      	movs	r3, #0
   17088:	e7d8      	b.n	1703c <le_set_event_mask+0x28>
		return -ENOBUFS;
   1708a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1708e:	e7f8      	b.n	17082 <le_set_event_mask+0x6e>
   17090:	200002a0 	.word	0x200002a0

00017094 <le_init>:
{
   17094:	b510      	push	{r4, lr}
   17096:	b082      	sub	sp, #8
	if (!BT_FEAT_LE(bt_dev.features)) {
   17098:	4b50      	ldr	r3, [pc, #320]	; (171dc <le_init+0x148>)
   1709a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   1709e:	f013 0f40 	tst.w	r3, #64	; 0x40
   170a2:	d00a      	beq.n	170ba <le_init+0x26>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   170a4:	aa01      	add	r2, sp, #4
   170a6:	2100      	movs	r1, #0
   170a8:	f242 0003 	movw	r0, #8195	; 0x2003
   170ac:	f7ff feb6 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   170b0:	4603      	mov	r3, r0
   170b2:	b1a8      	cbz	r0, 170e0 <le_init+0x4c>
}
   170b4:	4618      	mov	r0, r3
   170b6:	b002      	add	sp, #8
   170b8:	bd10      	pop	{r4, pc}
   170ba:	4b49      	ldr	r3, [pc, #292]	; (171e0 <le_init+0x14c>)
   170bc:	4a49      	ldr	r2, [pc, #292]	; (171e4 <le_init+0x150>)
   170be:	1a9b      	subs	r3, r3, r2
   170c0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Non-LE capable controller detected!");
   170c2:	f04f 0100 	mov.w	r1, #0
   170c6:	2201      	movs	r2, #1
   170c8:	f362 0102 	bfi	r1, r2, #0, #3
   170cc:	f36f 01c5 	bfc	r1, #3, #3
   170d0:	f363 118f 	bfi	r1, r3, #6, #10
   170d4:	4844      	ldr	r0, [pc, #272]	; (171e8 <le_init+0x154>)
   170d6:	f7fa ffa9 	bl	1202c <log_0>
		return -ENODEV;
   170da:	f06f 0312 	mvn.w	r3, #18
   170de:	e7e9      	b.n	170b4 <le_init+0x20>
	read_le_features_complete(rsp);
   170e0:	9801      	ldr	r0, [sp, #4]
   170e2:	f7ff f929 	bl	16338 <read_le_features_complete>
	net_buf_unref(rsp);
   170e6:	9801      	ldr	r0, [sp, #4]
   170e8:	f013 f846 	bl	2a178 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   170ec:	aa01      	add	r2, sp, #4
   170ee:	2100      	movs	r1, #0
   170f0:	f242 0002 	movw	r0, #8194	; 0x2002
   170f4:	f7ff fe92 	bl	16e1c <bt_hci_cmd_send_sync>
		if (err) {
   170f8:	4603      	mov	r3, r0
   170fa:	2800      	cmp	r0, #0
   170fc:	d1da      	bne.n	170b4 <le_init+0x20>
		le_read_buffer_size_complete(rsp);
   170fe:	9801      	ldr	r0, [sp, #4]
   17100:	f7ff f924 	bl	1634c <le_read_buffer_size_complete>
		net_buf_unref(rsp);
   17104:	9801      	ldr	r0, [sp, #4]
   17106:	f013 f837 	bl	2a178 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1710a:	4b34      	ldr	r3, [pc, #208]	; (171dc <le_init+0x148>)
   1710c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   17110:	f013 0f20 	tst.w	r3, #32
   17114:	d032      	beq.n	1717c <le_init+0xe8>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   17116:	4b31      	ldr	r3, [pc, #196]	; (171dc <le_init+0x148>)
   17118:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1711c:	f013 0f08 	tst.w	r3, #8
   17120:	d144      	bne.n	171ac <le_init+0x118>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   17122:	4b2e      	ldr	r3, [pc, #184]	; (171dc <le_init+0x148>)
   17124:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   17128:	f013 0f20 	tst.w	r3, #32
   1712c:	d022      	beq.n	17174 <le_init+0xe0>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1712e:	f10d 0102 	add.w	r1, sp, #2
   17132:	4668      	mov	r0, sp
   17134:	f7ff ff3e 	bl	16fb4 <hci_le_read_max_data_len>
		if (err) {
   17138:	4603      	mov	r3, r0
   1713a:	2800      	cmp	r0, #0
   1713c:	d1ba      	bne.n	170b4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1713e:	2104      	movs	r1, #4
   17140:	f242 0024 	movw	r0, #8228	; 0x2024
   17144:	f7ff fe2e 	bl	16da4 <bt_hci_cmd_create>
		if (!buf) {
   17148:	4604      	mov	r4, r0
   1714a:	2800      	cmp	r0, #0
   1714c:	d03f      	beq.n	171ce <le_init+0x13a>
   1714e:	2104      	movs	r1, #4
   17150:	3008      	adds	r0, #8
   17152:	f013 f85b 	bl	2a20c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17156:	f8bd 3000 	ldrh.w	r3, [sp]
   1715a:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1715c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   17160:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17162:	2200      	movs	r2, #0
   17164:	4621      	mov	r1, r4
   17166:	f242 0024 	movw	r0, #8228	; 0x2024
   1716a:	f7ff fe57 	bl	16e1c <bt_hci_cmd_send_sync>
		if (err) {
   1716e:	4603      	mov	r3, r0
   17170:	2800      	cmp	r0, #0
   17172:	d19f      	bne.n	170b4 <le_init+0x20>
	return  le_set_event_mask();
   17174:	f7ff ff4e 	bl	17014 <le_set_event_mask>
   17178:	4603      	mov	r3, r0
   1717a:	e79b      	b.n	170b4 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   1717c:	2102      	movs	r1, #2
   1717e:	f640 406d 	movw	r0, #3181	; 0xc6d
   17182:	f7ff fe0f 	bl	16da4 <bt_hci_cmd_create>
		if (!buf) {
   17186:	4604      	mov	r4, r0
   17188:	b320      	cbz	r0, 171d4 <le_init+0x140>
   1718a:	2102      	movs	r1, #2
   1718c:	3008      	adds	r0, #8
   1718e:	f013 f83d 	bl	2a20c <net_buf_simple_add>
		cp_le->le = 0x01;
   17192:	2301      	movs	r3, #1
   17194:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17196:	2200      	movs	r2, #0
   17198:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   1719a:	4621      	mov	r1, r4
   1719c:	f640 406d 	movw	r0, #3181	; 0xc6d
   171a0:	f7ff fe3c 	bl	16e1c <bt_hci_cmd_send_sync>
		if (err) {
   171a4:	4603      	mov	r3, r0
   171a6:	2800      	cmp	r0, #0
   171a8:	d0b5      	beq.n	17116 <le_init+0x82>
   171aa:	e783      	b.n	170b4 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   171ac:	aa01      	add	r2, sp, #4
   171ae:	2100      	movs	r1, #0
   171b0:	f242 001c 	movw	r0, #8220	; 0x201c
   171b4:	f7ff fe32 	bl	16e1c <bt_hci_cmd_send_sync>
		if (err) {
   171b8:	4603      	mov	r3, r0
   171ba:	2800      	cmp	r0, #0
   171bc:	f47f af7a 	bne.w	170b4 <le_init+0x20>
		le_read_supp_states_complete(rsp);
   171c0:	9801      	ldr	r0, [sp, #4]
   171c2:	f7ff f825 	bl	16210 <le_read_supp_states_complete>
		net_buf_unref(rsp);
   171c6:	9801      	ldr	r0, [sp, #4]
   171c8:	f012 ffd6 	bl	2a178 <net_buf_unref>
   171cc:	e7a9      	b.n	17122 <le_init+0x8e>
			return -ENOBUFS;
   171ce:	f06f 0368 	mvn.w	r3, #104	; 0x68
   171d2:	e76f      	b.n	170b4 <le_init+0x20>
			return -ENOBUFS;
   171d4:	f06f 0368 	mvn.w	r3, #104	; 0x68
   171d8:	e76c      	b.n	170b4 <le_init+0x20>
   171da:	bf00      	nop
   171dc:	200002a0 	.word	0x200002a0
   171e0:	0002c630 	.word	0x0002c630
   171e4:	0002c610 	.word	0x0002c610
   171e8:	0002dc90 	.word	0x0002dc90

000171ec <bt_br_init>:
{
   171ec:	b510      	push	{r4, lr}
   171ee:	b082      	sub	sp, #8
	if (bt_dev.le.acl_mtu) {
   171f0:	4b0b      	ldr	r3, [pc, #44]	; (17220 <bt_br_init+0x34>)
   171f2:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
   171f6:	b11b      	cbz	r3, 17200 <bt_br_init+0x14>
		return 0;
   171f8:	2400      	movs	r4, #0
}
   171fa:	4620      	mov	r0, r4
   171fc:	b002      	add	sp, #8
   171fe:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17200:	aa01      	add	r2, sp, #4
   17202:	2100      	movs	r1, #0
   17204:	f241 0005 	movw	r0, #4101	; 0x1005
   17208:	f7ff fe08 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   1720c:	4604      	mov	r4, r0
   1720e:	2800      	cmp	r0, #0
   17210:	d1f3      	bne.n	171fa <bt_br_init+0xe>
	read_buffer_size_complete(rsp);
   17212:	9801      	ldr	r0, [sp, #4]
   17214:	f7ff f8ae 	bl	16374 <read_buffer_size_complete>
	net_buf_unref(rsp);
   17218:	9801      	ldr	r0, [sp, #4]
   1721a:	f012 ffad 	bl	2a178 <net_buf_unref>
	return 0;
   1721e:	e7ec      	b.n	171fa <bt_br_init+0xe>
   17220:	200002a0 	.word	0x200002a0

00017224 <hci_vs_init>:
{
   17224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17228:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   1722a:	aa05      	add	r2, sp, #20
   1722c:	2100      	movs	r1, #0
   1722e:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17232:	f7ff fdf3 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   17236:	2800      	cmp	r0, #0
   17238:	d178      	bne.n	1732c <hci_vs_init+0x108>
	rp.info = (void *)rsp->data;
   1723a:	9b05      	ldr	r3, [sp, #20]
   1723c:	689c      	ldr	r4, [r3, #8]
   1723e:	4d56      	ldr	r5, [pc, #344]	; (17398 <hci_vs_init+0x174>)
   17240:	4b56      	ldr	r3, [pc, #344]	; (1739c <hci_vs_init+0x178>)
   17242:	1aed      	subs	r5, r5, r3
   17244:	08ed      	lsrs	r5, r5, #3
	BT_INFO("HW Platform: %s (0x%04x)",
   17246:	2703      	movs	r7, #3
   17248:	f04f 0600 	mov.w	r6, #0
   1724c:	f367 0602 	bfi	r6, r7, #0, #3
   17250:	f36f 06c5 	bfc	r6, #3, #3
   17254:	f365 168f 	bfi	r6, r5, #6, #10
   17258:	f8b4 8001 	ldrh.w	r8, [r4, #1]
   1725c:	4640      	mov	r0, r8
   1725e:	f7ff f813 	bl	16288 <vs_hw_platform>
   17262:	4601      	mov	r1, r0
   17264:	4633      	mov	r3, r6
   17266:	4642      	mov	r2, r8
   17268:	484d      	ldr	r0, [pc, #308]	; (173a0 <hci_vs_init+0x17c>)
   1726a:	f7fa fe5f 	bl	11f2c <log_2>
	BT_INFO("HW Variant: %s (0x%04x)",
   1726e:	f04f 0600 	mov.w	r6, #0
   17272:	f367 0602 	bfi	r6, r7, #0, #3
   17276:	f36f 06c5 	bfc	r6, #3, #3
   1727a:	f365 168f 	bfi	r6, r5, #6, #10
   1727e:	f8b4 8003 	ldrh.w	r8, [r4, #3]
   17282:	4641      	mov	r1, r8
   17284:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   17288:	f7ff f80a 	bl	162a0 <vs_hw_variant>
   1728c:	4601      	mov	r1, r0
   1728e:	4633      	mov	r3, r6
   17290:	4642      	mov	r2, r8
   17292:	4844      	ldr	r0, [pc, #272]	; (173a4 <hci_vs_init+0x180>)
   17294:	f7fa fe4a 	bl	11f2c <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   17298:	f04f 0600 	mov.w	r6, #0
   1729c:	f367 0602 	bfi	r6, r7, #0, #3
   172a0:	f36f 06c5 	bfc	r6, #3, #3
   172a4:	f365 168f 	bfi	r6, r5, #6, #10
   172a8:	7965      	ldrb	r5, [r4, #5]
   172aa:	4628      	mov	r0, r5
   172ac:	f7ff f808 	bl	162c0 <vs_fw_variant>
   172b0:	9000      	str	r0, [sp, #0]
   172b2:	9501      	str	r5, [sp, #4]
   172b4:	79a3      	ldrb	r3, [r4, #6]
   172b6:	9302      	str	r3, [sp, #8]
   172b8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   172bc:	9303      	str	r3, [sp, #12]
   172be:	f8d4 3009 	ldr.w	r3, [r4, #9]
   172c2:	9304      	str	r3, [sp, #16]
   172c4:	4633      	mov	r3, r6
   172c6:	2205      	movs	r2, #5
   172c8:	4669      	mov	r1, sp
   172ca:	4837      	ldr	r0, [pc, #220]	; (173a8 <hci_vs_init+0x184>)
   172cc:	f7fa fe6a 	bl	11fa4 <log_n>
	net_buf_unref(rsp);
   172d0:	9805      	ldr	r0, [sp, #20]
   172d2:	f012 ff51 	bl	2a178 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   172d6:	aa05      	add	r2, sp, #20
   172d8:	2100      	movs	r1, #0
   172da:	f64f 4002 	movw	r0, #64514	; 0xfc02
   172de:	f7ff fd9d 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   172e2:	2800      	cmp	r0, #0
   172e4:	d135      	bne.n	17352 <hci_vs_init+0x12e>
	rp.cmds = (void *)rsp->data;
   172e6:	9b05      	ldr	r3, [sp, #20]
   172e8:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   172ea:	4c30      	ldr	r4, [pc, #192]	; (173ac <hci_vs_init+0x188>)
   172ec:	2202      	movs	r2, #2
   172ee:	3101      	adds	r1, #1
   172f0:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   172f4:	f010 fcac 	bl	27c50 <memcpy>
	net_buf_unref(rsp);
   172f8:	9805      	ldr	r0, [sp, #20]
   172fa:	f012 ff3d 	bl	2a178 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   172fe:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   17302:	f013 0f04 	tst.w	r3, #4
   17306:	d021      	beq.n	1734c <hci_vs_init+0x128>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17308:	aa05      	add	r2, sp, #20
   1730a:	2100      	movs	r1, #0
   1730c:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17310:	f7ff fd84 	bl	16e1c <bt_hci_cmd_send_sync>
		if (err) {
   17314:	bb70      	cbnz	r0, 17374 <hci_vs_init+0x150>
		rp.feat = (void *)rsp->data;
   17316:	9b05      	ldr	r3, [sp, #20]
   17318:	6899      	ldr	r1, [r3, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   1731a:	2201      	movs	r2, #1
   1731c:	4411      	add	r1, r2
   1731e:	4824      	ldr	r0, [pc, #144]	; (173b0 <hci_vs_init+0x18c>)
   17320:	f010 fc96 	bl	27c50 <memcpy>
		net_buf_unref(rsp);
   17324:	9805      	ldr	r0, [sp, #20]
   17326:	f012 ff27 	bl	2a178 <net_buf_unref>
   1732a:	e00f      	b.n	1734c <hci_vs_init+0x128>
   1732c:	4b1a      	ldr	r3, [pc, #104]	; (17398 <hci_vs_init+0x174>)
   1732e:	4a1b      	ldr	r2, [pc, #108]	; (1739c <hci_vs_init+0x178>)
   17330:	1a9b      	subs	r3, r3, r2
   17332:	08db      	lsrs	r3, r3, #3
		BT_WARN("Vendor HCI extensions not available");
   17334:	f04f 0100 	mov.w	r1, #0
   17338:	2202      	movs	r2, #2
   1733a:	f362 0102 	bfi	r1, r2, #0, #3
   1733e:	f36f 01c5 	bfc	r1, #3, #3
   17342:	f363 118f 	bfi	r1, r3, #6, #10
   17346:	481b      	ldr	r0, [pc, #108]	; (173b4 <hci_vs_init+0x190>)
   17348:	f7fa fe70 	bl	1202c <log_0>
}
   1734c:	b006      	add	sp, #24
   1734e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17352:	4b11      	ldr	r3, [pc, #68]	; (17398 <hci_vs_init+0x174>)
   17354:	4a11      	ldr	r2, [pc, #68]	; (1739c <hci_vs_init+0x178>)
   17356:	1a9b      	subs	r3, r3, r2
   17358:	40fb      	lsrs	r3, r7
		BT_WARN("Failed to read supported vendor commands");
   1735a:	f04f 0100 	mov.w	r1, #0
   1735e:	2202      	movs	r2, #2
   17360:	f362 0102 	bfi	r1, r2, #0, #3
   17364:	f36f 01c5 	bfc	r1, #3, #3
   17368:	f363 118f 	bfi	r1, r3, #6, #10
   1736c:	4812      	ldr	r0, [pc, #72]	; (173b8 <hci_vs_init+0x194>)
   1736e:	f7fa fe5d 	bl	1202c <log_0>
		return;
   17372:	e7eb      	b.n	1734c <hci_vs_init+0x128>
   17374:	4b08      	ldr	r3, [pc, #32]	; (17398 <hci_vs_init+0x174>)
   17376:	4a09      	ldr	r2, [pc, #36]	; (1739c <hci_vs_init+0x178>)
   17378:	1a9b      	subs	r3, r3, r2
   1737a:	08db      	lsrs	r3, r3, #3
			BT_WARN("Failed to read supported vendor features");
   1737c:	f04f 0100 	mov.w	r1, #0
   17380:	2202      	movs	r2, #2
   17382:	f362 0102 	bfi	r1, r2, #0, #3
   17386:	f36f 01c5 	bfc	r1, #3, #3
   1738a:	f363 118f 	bfi	r1, r3, #6, #10
   1738e:	480b      	ldr	r0, [pc, #44]	; (173bc <hci_vs_init+0x198>)
   17390:	f7fa fe4c 	bl	1202c <log_0>
			return;
   17394:	e7da      	b.n	1734c <hci_vs_init+0x128>
   17396:	bf00      	nop
   17398:	0002c630 	.word	0x0002c630
   1739c:	0002c610 	.word	0x0002c610
   173a0:	0002dcd8 	.word	0x0002dcd8
   173a4:	0002dcf4 	.word	0x0002dcf4
   173a8:	0002dd0c 	.word	0x0002dd0c
   173ac:	200002a0 	.word	0x200002a0
   173b0:	20000358 	.word	0x20000358
   173b4:	0002dcb4 	.word	0x0002dcb4
   173b8:	0002dd3c 	.word	0x0002dd3c
   173bc:	0002dd68 	.word	0x0002dd68

000173c0 <hci_init>:
{
   173c0:	b508      	push	{r3, lr}
	err = common_init();
   173c2:	f7ff fdad 	bl	16f20 <common_init>
	if (err) {
   173c6:	4603      	mov	r3, r0
   173c8:	b108      	cbz	r0, 173ce <hci_init+0xe>
}
   173ca:	4618      	mov	r0, r3
   173cc:	bd08      	pop	{r3, pc}
	err = le_init();
   173ce:	f7ff fe61 	bl	17094 <le_init>
	if (err) {
   173d2:	4603      	mov	r3, r0
   173d4:	2800      	cmp	r0, #0
   173d6:	d1f8      	bne.n	173ca <hci_init+0xa>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   173d8:	4b0a      	ldr	r3, [pc, #40]	; (17404 <hci_init+0x44>)
   173da:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
   173de:	f013 0f20 	tst.w	r3, #32
   173e2:	d104      	bne.n	173ee <hci_init+0x2e>
		err = bt_br_init();
   173e4:	f7ff ff02 	bl	171ec <bt_br_init>
		if (err) {
   173e8:	4603      	mov	r3, r0
   173ea:	2800      	cmp	r0, #0
   173ec:	d1ed      	bne.n	173ca <hci_init+0xa>
	err = set_event_mask();
   173ee:	f010 fd18 	bl	27e22 <set_event_mask>
	if (err) {
   173f2:	4603      	mov	r3, r0
   173f4:	2800      	cmp	r0, #0
   173f6:	d1e8      	bne.n	173ca <hci_init+0xa>
	hci_vs_init();
   173f8:	f7ff ff14 	bl	17224 <hci_vs_init>
	err = bt_id_init();
   173fc:	f001 f838 	bl	18470 <bt_id_init>
   17400:	4603      	mov	r3, r0
	if (err) {
   17402:	e7e2      	b.n	173ca <hci_init+0xa>
   17404:	200002a0 	.word	0x200002a0

00017408 <bt_le_create_conn_legacy>:
{
   17408:	b5f0      	push	{r4, r5, r6, r7, lr}
   1740a:	b087      	sub	sp, #28
   1740c:	4605      	mov	r5, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   1740e:	f10d 010b 	add.w	r1, sp, #11
   17412:	2000      	movs	r0, #0
   17414:	f001 f802 	bl	1841c <bt_id_set_create_conn_own_addr>
	if (err) {
   17418:	b108      	cbz	r0, 1741e <bt_le_create_conn_legacy+0x16>
}
   1741a:	b007      	add	sp, #28
   1741c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   1741e:	2119      	movs	r1, #25
   17420:	f242 000d 	movw	r0, #8205	; 0x200d
   17424:	f7ff fcbe 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   17428:	4606      	mov	r6, r0
   1742a:	b3b8      	cbz	r0, 1749c <bt_le_create_conn_legacy+0x94>
   1742c:	2119      	movs	r1, #25
   1742e:	3008      	adds	r0, #8
   17430:	f012 feec 	bl	2a20c <net_buf_simple_add>
   17434:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
   17436:	2219      	movs	r2, #25
   17438:	2100      	movs	r1, #0
   1743a:	f010 fc2d 	bl	27c98 <memset>
	cp->own_addr_type = own_addr_type;
   1743e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   17442:	7323      	strb	r3, [r4, #12]
	memcpy(dst, src, sizeof(*dst));
   17444:	2207      	movs	r2, #7
   17446:	f105 0188 	add.w	r1, r5, #136	; 0x88
   1744a:	1d60      	adds	r0, r4, #5
   1744c:	f010 fc00 	bl	27c50 <memcpy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   17450:	2700      	movs	r7, #0
   17452:	7127      	strb	r7, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17454:	4a13      	ldr	r2, [pc, #76]	; (174a4 <bt_le_create_conn_legacy+0x9c>)
   17456:	8993      	ldrh	r3, [r2, #12]
   17458:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   1745a:	89d3      	ldrh	r3, [r2, #14]
   1745c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   1745e:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
   17462:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   17466:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
   1746a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   1746e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   17472:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   17476:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
   1747a:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   1747e:	2301      	movs	r3, #1
   17480:	9300      	str	r3, [sp, #0]
   17482:	230b      	movs	r3, #11
   17484:	32cc      	adds	r2, #204	; 0xcc
   17486:	a903      	add	r1, sp, #12
   17488:	4630      	mov	r0, r6
   1748a:	f7ff fc79 	bl	16d80 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   1748e:	463a      	mov	r2, r7
   17490:	4631      	mov	r1, r6
   17492:	f242 000d 	movw	r0, #8205	; 0x200d
   17496:	f7ff fcc1 	bl	16e1c <bt_hci_cmd_send_sync>
   1749a:	e7be      	b.n	1741a <bt_le_create_conn_legacy+0x12>
		return -ENOBUFS;
   1749c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   174a0:	e7bb      	b.n	1741a <bt_le_create_conn_legacy+0x12>
   174a2:	bf00      	nop
   174a4:	200002a0 	.word	0x200002a0

000174a8 <bt_le_create_conn_cancel>:
{
   174a8:	b530      	push	{r4, r5, lr}
   174aa:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   174ac:	2100      	movs	r1, #0
   174ae:	f242 000e 	movw	r0, #8206	; 0x200e
   174b2:	f7ff fc77 	bl	16da4 <bt_hci_cmd_create>
   174b6:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   174b8:	2500      	movs	r5, #0
   174ba:	9500      	str	r5, [sp, #0]
   174bc:	230b      	movs	r3, #11
   174be:	4a06      	ldr	r2, [pc, #24]	; (174d8 <bt_le_create_conn_cancel+0x30>)
   174c0:	a903      	add	r1, sp, #12
   174c2:	f7ff fc5d 	bl	16d80 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   174c6:	462a      	mov	r2, r5
   174c8:	4621      	mov	r1, r4
   174ca:	f242 000e 	movw	r0, #8206	; 0x200e
   174ce:	f7ff fca5 	bl	16e1c <bt_hci_cmd_send_sync>
}
   174d2:	b007      	add	sp, #28
   174d4:	bd30      	pop	{r4, r5, pc}
   174d6:	bf00      	nop
   174d8:	2000036c 	.word	0x2000036c

000174dc <bt_send>:
{
   174dc:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
   174de:	4b03      	ldr	r3, [pc, #12]	; (174ec <bt_send+0x10>)
   174e0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   174e4:	691b      	ldr	r3, [r3, #16]
   174e6:	4798      	blx	r3
}
   174e8:	bd08      	pop	{r3, pc}
   174ea:	bf00      	nop
   174ec:	200002a0 	.word	0x200002a0

000174f0 <bt_hci_cmd_send>:
{
   174f0:	b538      	push	{r3, r4, r5, lr}
   174f2:	4604      	mov	r4, r0
	if (!buf) {
   174f4:	460d      	mov	r5, r1
   174f6:	b151      	cbz	r1, 1750e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   174f8:	f640 4335 	movw	r3, #3125	; 0xc35
   174fc:	429c      	cmp	r4, r3
   174fe:	d00e      	beq.n	1751e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   17500:	4629      	mov	r1, r5
   17502:	4814      	ldr	r0, [pc, #80]	; (17554 <bt_hci_cmd_send+0x64>)
   17504:	f012 fe2b 	bl	2a15e <net_buf_put>
	return 0;
   17508:	2400      	movs	r4, #0
}
   1750a:	4620      	mov	r0, r4
   1750c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
   1750e:	f7ff fc49 	bl	16da4 <bt_hci_cmd_create>
		if (!buf) {
   17512:	4605      	mov	r5, r0
   17514:	2800      	cmp	r0, #0
   17516:	d1ef      	bne.n	174f8 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
   17518:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1751c:	e7f5      	b.n	1750a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
   1751e:	4628      	mov	r0, r5
   17520:	f7ff ffdc 	bl	174dc <bt_send>
		if (err) {
   17524:	4604      	mov	r4, r0
   17526:	2800      	cmp	r0, #0
   17528:	d0ef      	beq.n	1750a <bt_hci_cmd_send+0x1a>
   1752a:	4b0b      	ldr	r3, [pc, #44]	; (17558 <bt_hci_cmd_send+0x68>)
   1752c:	4a0b      	ldr	r2, [pc, #44]	; (1755c <bt_hci_cmd_send+0x6c>)
   1752e:	1a9b      	subs	r3, r3, r2
   17530:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   17532:	f04f 0200 	mov.w	r2, #0
   17536:	2101      	movs	r1, #1
   17538:	f361 0202 	bfi	r2, r1, #0, #3
   1753c:	f36f 02c5 	bfc	r2, #3, #3
   17540:	f363 128f 	bfi	r2, r3, #6, #10
   17544:	4601      	mov	r1, r0
   17546:	4806      	ldr	r0, [pc, #24]	; (17560 <bt_hci_cmd_send+0x70>)
   17548:	f7fa fcba 	bl	11ec0 <log_1>
			net_buf_unref(buf);
   1754c:	4628      	mov	r0, r5
   1754e:	f012 fe13 	bl	2a178 <net_buf_unref>
		return err;
   17552:	e7da      	b.n	1750a <bt_hci_cmd_send+0x1a>
   17554:	200003ec 	.word	0x200003ec
   17558:	0002c630 	.word	0x0002c630
   1755c:	0002c610 	.word	0x0002c610
   17560:	0002dd94 	.word	0x0002dd94

00017564 <conn_auto_initiate>:
	if (conn->state != BT_CONN_CONNECTED) {
   17564:	7a83      	ldrb	r3, [r0, #10]
   17566:	2b07      	cmp	r3, #7
   17568:	d000      	beq.n	1756c <conn_auto_initiate+0x8>
   1756a:	4770      	bx	lr
{
   1756c:	b530      	push	{r4, r5, lr}
   1756e:	b085      	sub	sp, #20
   17570:	4604      	mov	r4, r0
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17572:	1d05      	adds	r5, r0, #4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17574:	f3bf 8f5b 	dmb	ish
   17578:	6843      	ldr	r3, [r0, #4]
   1757a:	f3bf 8f5b 	dmb	ish
   1757e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   17582:	d10b      	bne.n	1759c <conn_auto_initiate+0x38>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   17584:	78c3      	ldrb	r3, [r0, #3]
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   17586:	b12b      	cbz	r3, 17594 <conn_auto_initiate+0x30>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   17588:	4b37      	ldr	r3, [pc, #220]	; (17668 <conn_auto_initiate+0x104>)
   1758a:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   1758e:	f013 0f08 	tst.w	r3, #8
   17592:	d003      	beq.n	1759c <conn_auto_initiate+0x38>
		err = hci_le_read_remote_features(conn);
   17594:	4620      	mov	r0, r4
   17596:	f010 fcee 	bl	27f76 <hci_le_read_remote_features>
		if (!err) {
   1759a:	b1d0      	cbz	r0, 175d2 <conn_auto_initiate+0x6e>
   1759c:	f3bf 8f5b 	dmb	ish
   175a0:	6863      	ldr	r3, [r4, #4]
   175a2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   175a6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   175aa:	d105      	bne.n	175b8 <conn_auto_initiate+0x54>
	    BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
   175ac:	4b2e      	ldr	r3, [pc, #184]	; (17668 <conn_auto_initiate+0x104>)
   175ae:	f893 30d1 	ldrb.w	r3, [r3, #209]	; 0xd1
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   175b2:	f013 0f01 	tst.w	r3, #1
   175b6:	d10e      	bne.n	175d6 <conn_auto_initiate+0x72>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
   175b8:	4b2b      	ldr	r3, [pc, #172]	; (17668 <conn_auto_initiate+0x104>)
   175ba:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   175be:	f013 0f20 	tst.w	r3, #32
   175c2:	d006      	beq.n	175d2 <conn_auto_initiate+0x6e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   175c4:	4b28      	ldr	r3, [pc, #160]	; (17668 <conn_auto_initiate+0x104>)
   175c6:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   175ca:	689b      	ldr	r3, [r3, #8]
   175cc:	f013 0f02 	tst.w	r3, #2
   175d0:	d128      	bne.n	17624 <conn_auto_initiate+0xc0>
}
   175d2:	b005      	add	sp, #20
   175d4:	bd30      	pop	{r4, r5, pc}
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   175d6:	2100      	movs	r1, #0
   175d8:	9100      	str	r1, [sp, #0]
   175da:	2302      	movs	r3, #2
   175dc:	461a      	mov	r2, r3
   175de:	4620      	mov	r0, r4
   175e0:	f010 fca5 	bl	27f2e <bt_le_set_phy>
		if (!err) {
   175e4:	4601      	mov	r1, r0
   175e6:	b180      	cbz	r0, 1760a <conn_auto_initiate+0xa6>
   175e8:	4b20      	ldr	r3, [pc, #128]	; (1766c <conn_auto_initiate+0x108>)
   175ea:	4a21      	ldr	r2, [pc, #132]	; (17670 <conn_auto_initiate+0x10c>)
   175ec:	1a9b      	subs	r3, r3, r2
   175ee:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to set LE PHY (%d)", err);
   175f0:	f04f 0200 	mov.w	r2, #0
   175f4:	2001      	movs	r0, #1
   175f6:	f360 0202 	bfi	r2, r0, #0, #3
   175fa:	f36f 02c5 	bfc	r2, #3, #3
   175fe:	f363 128f 	bfi	r2, r3, #6, #10
   17602:	481c      	ldr	r0, [pc, #112]	; (17674 <conn_auto_initiate+0x110>)
   17604:	f7fa fc5c 	bl	11ec0 <log_1>
   17608:	e7d6      	b.n	175b8 <conn_auto_initiate+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1760a:	f3bf 8f5b 	dmb	ish
   1760e:	e855 3f00 	ldrex	r3, [r5]
   17612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   17616:	e845 3200 	strex	r2, r3, [r5]
   1761a:	2a00      	cmp	r2, #0
   1761c:	d1f7      	bne.n	1760e <conn_auto_initiate+0xaa>
   1761e:	f3bf 8f5b 	dmb	ish
			return;
   17622:	e7d6      	b.n	175d2 <conn_auto_initiate+0x6e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17624:	f10d 010e 	add.w	r1, sp, #14
   17628:	a803      	add	r0, sp, #12
   1762a:	f7ff fcc3 	bl	16fb4 <hci_le_read_max_data_len>
			if (!err) {
   1762e:	2800      	cmp	r0, #0
   17630:	d1cf      	bne.n	175d2 <conn_auto_initiate+0x6e>
				err = bt_le_set_data_len(conn,
   17632:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   17636:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1763a:	4620      	mov	r0, r4
   1763c:	f010 fc5b 	bl	27ef6 <bt_le_set_data_len>
				if (err) {
   17640:	4601      	mov	r1, r0
   17642:	2800      	cmp	r0, #0
   17644:	d0c5      	beq.n	175d2 <conn_auto_initiate+0x6e>
   17646:	4b09      	ldr	r3, [pc, #36]	; (1766c <conn_auto_initiate+0x108>)
   17648:	4a09      	ldr	r2, [pc, #36]	; (17670 <conn_auto_initiate+0x10c>)
   1764a:	1a9b      	subs	r3, r3, r2
   1764c:	08db      	lsrs	r3, r3, #3
					BT_ERR("Failed to set data len (%d)", err);
   1764e:	f04f 0200 	mov.w	r2, #0
   17652:	2001      	movs	r0, #1
   17654:	f360 0202 	bfi	r2, r0, #0, #3
   17658:	f36f 02c5 	bfc	r2, #3, #3
   1765c:	f363 128f 	bfi	r2, r3, #6, #10
   17660:	4805      	ldr	r0, [pc, #20]	; (17678 <conn_auto_initiate+0x114>)
   17662:	f7fa fc2d 	bl	11ec0 <log_1>
		}
   17666:	e7b4      	b.n	175d2 <conn_auto_initiate+0x6e>
   17668:	200002a0 	.word	0x200002a0
   1766c:	0002c630 	.word	0x0002c630
   17670:	0002c610 	.word	0x0002c610
   17674:	0002ddb8 	.word	0x0002ddb8
   17678:	0002ddd4 	.word	0x0002ddd4

0001767c <bt_hci_le_enh_conn_complete>:
{
   1767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17680:	b084      	sub	sp, #16
   17682:	4604      	mov	r4, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17684:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   17688:	fa1f f887 	uxth.w	r8, r7
	bool is_disconnected = conn_handle_is_disconnected(handle);
   1768c:	4640      	mov	r0, r8
   1768e:	f7fe fd93 	bl	161b8 <conn_handle_is_disconnected>
   17692:	4606      	mov	r6, r0
	if (evt->status) {
   17694:	7820      	ldrb	r0, [r4, #0]
   17696:	b1d8      	cbz	r0, 176d0 <bt_hci_le_enh_conn_complete+0x54>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17698:	2802      	cmp	r0, #2
   1769a:	d013      	beq.n	176c4 <bt_hci_le_enh_conn_complete+0x48>
   1769c:	4b5e      	ldr	r3, [pc, #376]	; (17818 <bt_hci_le_enh_conn_complete+0x19c>)
   1769e:	4a5f      	ldr	r2, [pc, #380]	; (1781c <bt_hci_le_enh_conn_complete+0x1a0>)
   176a0:	1a9b      	subs	r3, r3, r2
   176a2:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unexpected status 0x%02x", evt->status);
   176a4:	f04f 0200 	mov.w	r2, #0
   176a8:	2102      	movs	r1, #2
   176aa:	f361 0202 	bfi	r2, r1, #0, #3
   176ae:	f36f 02c5 	bfc	r2, #3, #3
   176b2:	f363 128f 	bfi	r2, r3, #6, #10
   176b6:	4601      	mov	r1, r0
   176b8:	4859      	ldr	r0, [pc, #356]	; (17820 <bt_hci_le_enh_conn_complete+0x1a4>)
   176ba:	f7fa fc01 	bl	11ec0 <log_1>
}
   176be:	b004      	add	sp, #16
   176c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			le_conn_complete_cancel();
   176c4:	f7fe fe86 	bl	163d4 <le_conn_complete_cancel>
			bt_le_scan_update(false);
   176c8:	2000      	movs	r0, #0
   176ca:	f000 ffbf 	bl	1864c <bt_le_scan_update>
			return;
   176ce:	e7f6      	b.n	176be <bt_hci_le_enh_conn_complete+0x42>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   176d0:	7923      	ldrb	r3, [r4, #4]
   176d2:	3b02      	subs	r3, #2
   176d4:	b2db      	uxtb	r3, r3
   176d6:	2b01      	cmp	r3, #1
   176d8:	d955      	bls.n	17786 <bt_hci_le_enh_conn_complete+0x10a>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   176da:	78e3      	ldrb	r3, [r4, #3]
   176dc:	2b01      	cmp	r3, #1
   176de:	d067      	beq.n	177b0 <bt_hci_le_enh_conn_complete+0x134>
				bt_lookup_id_addr(id, &evt->peer_addr));
   176e0:	1d25      	adds	r5, r4, #4
		bt_addr_le_copy(&id_addr,
   176e2:	4629      	mov	r1, r5
   176e4:	f010 fcda 	bl	2809c <bt_lookup_id_addr>
   176e8:	4601      	mov	r1, r0
   176ea:	2207      	movs	r2, #7
   176ec:	4668      	mov	r0, sp
   176ee:	f010 faaf 	bl	27c50 <memcpy>
   176f2:	2207      	movs	r2, #7
   176f4:	4629      	mov	r1, r5
   176f6:	a802      	add	r0, sp, #8
   176f8:	f010 faaa 	bl	27c50 <memcpy>
	conn = find_pending_connect(evt->role, &id_addr);
   176fc:	4669      	mov	r1, sp
   176fe:	78e0      	ldrb	r0, [r4, #3]
   17700:	f010 fb70 	bl	27de4 <find_pending_connect>
   17704:	4605      	mov	r5, r0
	    evt->role == BT_HCI_ROLE_CENTRAL) {
   17706:	78e3      	ldrb	r3, [r4, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17708:	b963      	cbnz	r3, 17724 <bt_hci_le_enh_conn_complete+0xa8>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1770a:	4b46      	ldr	r3, [pc, #280]	; (17824 <bt_hci_le_enh_conn_complete+0x1a8>)
   1770c:	f3bf 8f5b 	dmb	ish
   17710:	e853 2f00 	ldrex	r2, [r3]
   17714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   17718:	e843 2100 	strex	r1, r2, [r3]
   1771c:	2900      	cmp	r1, #0
   1771e:	d1f7      	bne.n	17710 <bt_hci_le_enh_conn_complete+0x94>
   17720:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   17724:	2d00      	cmp	r5, #0
   17726:	d047      	beq.n	177b8 <bt_hci_le_enh_conn_complete+0x13c>
	conn->handle = handle;
   17728:	4628      	mov	r0, r5
   1772a:	f820 7b88 	strh.w	r7, [r0], #136
   1772e:	2207      	movs	r2, #7
   17730:	4669      	mov	r1, sp
   17732:	f010 fa8d 	bl	27c50 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   17736:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   1773a:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1773e:	f8b4 3019 	ldrh.w	r3, [r4, #25]
   17742:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   17746:	f8b4 301b 	ldrh.w	r3, [r4, #27]
   1774a:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
   1774e:	78e3      	ldrb	r3, [r4, #3]
   17750:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
   17752:	2200      	movs	r2, #0
   17754:	726a      	strb	r2, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   17756:	2b00      	cmp	r3, #0
   17758:	d048      	beq.n	177ec <bt_hci_le_enh_conn_complete+0x170>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1775a:	2107      	movs	r1, #7
   1775c:	4628      	mov	r0, r5
   1775e:	f001 fc5f 	bl	19020 <bt_conn_set_state>
	if (is_disconnected) {
   17762:	2e00      	cmp	r6, #0
   17764:	d153      	bne.n	1780e <bt_hci_le_enh_conn_complete+0x192>
	bt_conn_connected(conn);
   17766:	4628      	mov	r0, r5
   17768:	f010 fe58 	bl	2841c <bt_conn_connected>
	conn_auto_initiate(conn);
   1776c:	4628      	mov	r0, r5
   1776e:	f7ff fef9 	bl	17564 <conn_auto_initiate>
	bt_conn_unref(conn);
   17772:	4628      	mov	r0, r5
   17774:	f010 fe19 	bl	283aa <bt_conn_unref>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   17778:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1777a:	2b00      	cmp	r3, #0
   1777c:	d19f      	bne.n	176be <bt_hci_le_enh_conn_complete+0x42>
		bt_le_scan_update(false);
   1777e:	2000      	movs	r0, #0
   17780:	f000 ff64 	bl	1864c <bt_le_scan_update>
   17784:	e79b      	b.n	176be <bt_hci_le_enh_conn_complete+0x42>
   17786:	2207      	movs	r2, #7
   17788:	1d21      	adds	r1, r4, #4
   1778a:	4668      	mov	r0, sp
   1778c:	f010 fa60 	bl	27c50 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   17790:	f89d 3000 	ldrb.w	r3, [sp]
   17794:	3b02      	subs	r3, #2
   17796:	f88d 3000 	strb.w	r3, [sp]
	memcpy(dst, src, sizeof(*dst));
   1779a:	2206      	movs	r2, #6
   1779c:	f104 0111 	add.w	r1, r4, #17
   177a0:	f10d 0009 	add.w	r0, sp, #9
   177a4:	f010 fa54 	bl	27c50 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   177a8:	2301      	movs	r3, #1
   177aa:	f88d 3008 	strb.w	r3, [sp, #8]
   177ae:	e7a5      	b.n	176fc <bt_hci_le_enh_conn_complete+0x80>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   177b0:	4b1d      	ldr	r3, [pc, #116]	; (17828 <bt_hci_le_enh_conn_complete+0x1ac>)
   177b2:	f893 0067 	ldrb.w	r0, [r3, #103]	; 0x67
   177b6:	e793      	b.n	176e0 <bt_hci_le_enh_conn_complete+0x64>
   177b8:	4b17      	ldr	r3, [pc, #92]	; (17818 <bt_hci_le_enh_conn_complete+0x19c>)
   177ba:	4a18      	ldr	r2, [pc, #96]	; (1781c <bt_hci_le_enh_conn_complete+0x1a0>)
   177bc:	1a9b      	subs	r3, r3, r2
   177be:	08db      	lsrs	r3, r3, #3
		BT_ERR("No pending conn for peer %s",
   177c0:	2201      	movs	r2, #1
   177c2:	f362 0502 	bfi	r5, r2, #0, #3
   177c6:	f36f 05c5 	bfc	r5, #3, #3
   177ca:	f363 158f 	bfi	r5, r3, #6, #10
   177ce:	1d20      	adds	r0, r4, #4
   177d0:	f7fe fc0a 	bl	15fe8 <bt_addr_le_str_real>
   177d4:	f7fa f9fa 	bl	11bcc <z_log_strdup>
   177d8:	4601      	mov	r1, r0
   177da:	462a      	mov	r2, r5
   177dc:	4813      	ldr	r0, [pc, #76]	; (1782c <bt_hci_le_enh_conn_complete+0x1b0>)
   177de:	f7fa fb6f 	bl	11ec0 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   177e2:	211f      	movs	r1, #31
   177e4:	4640      	mov	r0, r8
   177e6:	f010 fb42 	bl	27e6e <bt_hci_disconnect>
		return;
   177ea:	e768      	b.n	176be <bt_hci_le_enh_conn_complete+0x42>
	memcpy(dst, src, sizeof(*dst));
   177ec:	2207      	movs	r2, #7
   177ee:	a902      	add	r1, sp, #8
   177f0:	f105 0096 	add.w	r0, r5, #150	; 0x96
   177f4:	f010 fa2c 	bl	27c50 <memcpy>
					&bt_dev.id_addr[conn->id]);
   177f8:	7a29      	ldrb	r1, [r5, #8]
   177fa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   177fe:	2207      	movs	r2, #7
   17800:	4b09      	ldr	r3, [pc, #36]	; (17828 <bt_hci_le_enh_conn_complete+0x1ac>)
   17802:	4419      	add	r1, r3
   17804:	f105 008f 	add.w	r0, r5, #143	; 0x8f
   17808:	f010 fa22 	bl	27c50 <memcpy>
}
   1780c:	e7a5      	b.n	1775a <bt_hci_le_enh_conn_complete+0xde>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1780e:	2101      	movs	r1, #1
   17810:	4628      	mov	r0, r5
   17812:	f001 fc05 	bl	19020 <bt_conn_set_state>
   17816:	e7a6      	b.n	17766 <bt_hci_le_enh_conn_complete+0xea>
   17818:	0002c630 	.word	0x0002c630
   1781c:	0002c610 	.word	0x0002c610
   17820:	0002ddf0 	.word	0x0002ddf0
   17824:	2000036c 	.word	0x2000036c
   17828:	200002a0 	.word	0x200002a0
   1782c:	0002de0c 	.word	0x0002de0c

00017830 <le_phy_update_complete>:
{
   17830:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
   17832:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17834:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   17838:	4628      	mov	r0, r5
   1783a:	f001 fbe7 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   1783e:	b1a0      	cbz	r0, 1786a <le_phy_update_complete+0x3a>
   17840:	4604      	mov	r4, r0
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   17842:	1d03      	adds	r3, r0, #4
   17844:	f3bf 8f5b 	dmb	ish
   17848:	e853 2f00 	ldrex	r2, [r3]
   1784c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   17850:	e843 1000 	strex	r0, r1, [r3]
   17854:	2800      	cmp	r0, #0
   17856:	d1f7      	bne.n	17848 <le_phy_update_complete+0x18>
   17858:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1785c:	f012 0f80 	tst.w	r2, #128	; 0x80
   17860:	d115      	bne.n	1788e <le_phy_update_complete+0x5e>
	bt_conn_unref(conn);
   17862:	4620      	mov	r0, r4
   17864:	f010 fda1 	bl	283aa <bt_conn_unref>
}
   17868:	bd38      	pop	{r3, r4, r5, pc}
   1786a:	4b11      	ldr	r3, [pc, #68]	; (178b0 <le_phy_update_complete+0x80>)
   1786c:	4a11      	ldr	r2, [pc, #68]	; (178b4 <le_phy_update_complete+0x84>)
   1786e:	1a9b      	subs	r3, r3, r2
   17870:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17872:	f04f 0200 	mov.w	r2, #0
   17876:	2101      	movs	r1, #1
   17878:	f361 0202 	bfi	r2, r1, #0, #3
   1787c:	f36f 02c5 	bfc	r2, #3, #3
   17880:	f363 128f 	bfi	r2, r3, #6, #10
   17884:	4629      	mov	r1, r5
   17886:	480c      	ldr	r0, [pc, #48]	; (178b8 <le_phy_update_complete+0x88>)
   17888:	f7fa fb1a 	bl	11ec0 <log_1>
		return;
   1788c:	e7ec      	b.n	17868 <le_phy_update_complete+0x38>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1788e:	f3bf 8f5b 	dmb	ish
   17892:	e853 2f00 	ldrex	r2, [r3]
   17896:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1789a:	e843 2100 	strex	r1, r2, [r3]
   1789e:	2900      	cmp	r1, #0
   178a0:	d1f7      	bne.n	17892 <le_phy_update_complete+0x62>
   178a2:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   178a6:	4620      	mov	r0, r4
   178a8:	f7ff fe5c 	bl	17564 <conn_auto_initiate>
   178ac:	e7d9      	b.n	17862 <le_phy_update_complete+0x32>
   178ae:	bf00      	nop
   178b0:	0002c630 	.word	0x0002c630
   178b4:	0002c610 	.word	0x0002c610
   178b8:	0002d948 	.word	0x0002d948

000178bc <le_remote_feat_complete>:
{
   178bc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   178be:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   178c0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   178c4:	4630      	mov	r0, r6
   178c6:	f001 fba1 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   178ca:	b1b0      	cbz	r0, 178fa <le_remote_feat_complete+0x3e>
   178cc:	4604      	mov	r4, r0
	if (!evt->status) {
   178ce:	782b      	ldrb	r3, [r5, #0]
   178d0:	b32b      	cbz	r3, 1791e <le_remote_feat_complete+0x62>
	atomic_set_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH);
   178d2:	1d23      	adds	r3, r4, #4
   178d4:	f3bf 8f5b 	dmb	ish
   178d8:	e853 2f00 	ldrex	r2, [r3]
   178dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   178e0:	e843 2100 	strex	r1, r2, [r3]
   178e4:	2900      	cmp	r1, #0
   178e6:	d1f7      	bne.n	178d8 <le_remote_feat_complete+0x1c>
   178e8:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   178ec:	4620      	mov	r0, r4
   178ee:	f7ff fe39 	bl	17564 <conn_auto_initiate>
	bt_conn_unref(conn);
   178f2:	4620      	mov	r0, r4
   178f4:	f010 fd59 	bl	283aa <bt_conn_unref>
}
   178f8:	bd70      	pop	{r4, r5, r6, pc}
   178fa:	4b0c      	ldr	r3, [pc, #48]	; (1792c <le_remote_feat_complete+0x70>)
   178fc:	4a0c      	ldr	r2, [pc, #48]	; (17930 <le_remote_feat_complete+0x74>)
   178fe:	1a9b      	subs	r3, r3, r2
   17900:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   17902:	f04f 0200 	mov.w	r2, #0
   17906:	2101      	movs	r1, #1
   17908:	f361 0202 	bfi	r2, r1, #0, #3
   1790c:	f36f 02c5 	bfc	r2, #3, #3
   17910:	f363 128f 	bfi	r2, r3, #6, #10
   17914:	4631      	mov	r1, r6
   17916:	4807      	ldr	r0, [pc, #28]	; (17934 <le_remote_feat_complete+0x78>)
   17918:	f7fa fad2 	bl	11ec0 <log_1>
		return;
   1791c:	e7ec      	b.n	178f8 <le_remote_feat_complete+0x3c>
		memcpy(conn->le.features, evt->features,
   1791e:	2208      	movs	r2, #8
   17920:	1ce9      	adds	r1, r5, #3
   17922:	30ac      	adds	r0, #172	; 0xac
   17924:	f010 f994 	bl	27c50 <memcpy>
   17928:	e7d3      	b.n	178d2 <le_remote_feat_complete+0x16>
   1792a:	bf00      	nop
   1792c:	0002c630 	.word	0x0002c630
   17930:	0002c610 	.word	0x0002c610
   17934:	0002d948 	.word	0x0002d948

00017938 <le_conn_param_neg_reply>:
{
   17938:	b570      	push	{r4, r5, r6, lr}
   1793a:	4605      	mov	r5, r0
   1793c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1793e:	2103      	movs	r1, #3
   17940:	f242 0021 	movw	r0, #8225	; 0x2021
   17944:	f7ff fa2e 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   17948:	b160      	cbz	r0, 17964 <le_conn_param_neg_reply+0x2c>
   1794a:	4606      	mov	r6, r0
   1794c:	2103      	movs	r1, #3
   1794e:	3008      	adds	r0, #8
   17950:	f012 fc5c 	bl	2a20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   17954:	8005      	strh	r5, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   17956:	7084      	strb	r4, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   17958:	4631      	mov	r1, r6
   1795a:	f242 0021 	movw	r0, #8225	; 0x2021
   1795e:	f7ff fdc7 	bl	174f0 <bt_hci_cmd_send>
}
   17962:	bd70      	pop	{r4, r5, r6, pc}
   17964:	4b08      	ldr	r3, [pc, #32]	; (17988 <le_conn_param_neg_reply+0x50>)
   17966:	4a09      	ldr	r2, [pc, #36]	; (1798c <le_conn_param_neg_reply+0x54>)
   17968:	1a9b      	subs	r3, r3, r2
   1796a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer");
   1796c:	f04f 0100 	mov.w	r1, #0
   17970:	2201      	movs	r2, #1
   17972:	f362 0102 	bfi	r1, r2, #0, #3
   17976:	f36f 01c5 	bfc	r1, #3, #3
   1797a:	f363 118f 	bfi	r1, r3, #6, #10
   1797e:	4804      	ldr	r0, [pc, #16]	; (17990 <le_conn_param_neg_reply+0x58>)
   17980:	f7fa fb54 	bl	1202c <log_0>
		return;
   17984:	e7ed      	b.n	17962 <le_conn_param_neg_reply+0x2a>
   17986:	bf00      	nop
   17988:	0002c630 	.word	0x0002c630
   1798c:	0002c610 	.word	0x0002c610
   17990:	0002de28 	.word	0x0002de28

00017994 <le_conn_param_req>:
{
   17994:	b530      	push	{r4, r5, lr}
   17996:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   17998:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1799a:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1799c:	885a      	ldrh	r2, [r3, #2]
   1799e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   179a2:	889a      	ldrh	r2, [r3, #4]
   179a4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   179a8:	88da      	ldrh	r2, [r3, #6]
   179aa:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   179ae:	891b      	ldrh	r3, [r3, #8]
   179b0:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   179b4:	4620      	mov	r0, r4
   179b6:	f001 fb29 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   179ba:	b168      	cbz	r0, 179d8 <le_conn_param_req+0x44>
   179bc:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
   179be:	4669      	mov	r1, sp
   179c0:	f001 fcdc 	bl	1937c <le_param_req>
   179c4:	b9f0      	cbnz	r0, 17a04 <le_conn_param_req+0x70>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   179c6:	211e      	movs	r1, #30
   179c8:	4620      	mov	r0, r4
   179ca:	f7ff ffb5 	bl	17938 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   179ce:	4628      	mov	r0, r5
   179d0:	f010 fceb 	bl	283aa <bt_conn_unref>
}
   179d4:	b003      	add	sp, #12
   179d6:	bd30      	pop	{r4, r5, pc}
   179d8:	4b0d      	ldr	r3, [pc, #52]	; (17a10 <le_conn_param_req+0x7c>)
   179da:	4a0e      	ldr	r2, [pc, #56]	; (17a14 <le_conn_param_req+0x80>)
   179dc:	1a9b      	subs	r3, r3, r2
   179de:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to lookup conn for handle %u", handle);
   179e0:	f04f 0200 	mov.w	r2, #0
   179e4:	2101      	movs	r1, #1
   179e6:	f361 0202 	bfi	r2, r1, #0, #3
   179ea:	f36f 02c5 	bfc	r2, #3, #3
   179ee:	f363 128f 	bfi	r2, r3, #6, #10
   179f2:	4621      	mov	r1, r4
   179f4:	4808      	ldr	r0, [pc, #32]	; (17a18 <le_conn_param_req+0x84>)
   179f6:	f7fa fa63 	bl	11ec0 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   179fa:	2102      	movs	r1, #2
   179fc:	4620      	mov	r0, r4
   179fe:	f7ff ff9b 	bl	17938 <le_conn_param_neg_reply>
		return;
   17a02:	e7e7      	b.n	179d4 <le_conn_param_req+0x40>
		le_conn_param_req_reply(handle, &param);
   17a04:	4669      	mov	r1, sp
   17a06:	4620      	mov	r0, r4
   17a08:	f010 fb10 	bl	2802c <le_conn_param_req_reply>
   17a0c:	e7df      	b.n	179ce <le_conn_param_req+0x3a>
   17a0e:	bf00      	nop
   17a10:	0002c630 	.word	0x0002c630
   17a14:	0002c610 	.word	0x0002c610
   17a18:	0002d948 	.word	0x0002d948

00017a1c <send_cmd>:
{
   17a1c:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   17a1e:	2200      	movs	r2, #0
   17a20:	2300      	movs	r3, #0
   17a22:	4837      	ldr	r0, [pc, #220]	; (17b00 <send_cmd+0xe4>)
   17a24:	f012 fb76 	bl	2a114 <net_buf_get>
	BT_ASSERT(buf);
   17a28:	4604      	mov	r4, r0
   17a2a:	b370      	cbz	r0, 17a8a <send_cmd+0x6e>
   17a2c:	4d35      	ldr	r5, [pc, #212]	; (17b04 <send_cmd+0xe8>)
   17a2e:	f04f 32ff 	mov.w	r2, #4294967295
   17a32:	f04f 33ff 	mov.w	r3, #4294967295
   17a36:	f505 708c 	add.w	r0, r5, #280	; 0x118
   17a3a:	f00a f949 	bl	21cd0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   17a3e:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
   17a42:	b1b3      	cbz	r3, 17a72 <send_cmd+0x56>
   17a44:	4b30      	ldr	r3, [pc, #192]	; (17b08 <send_cmd+0xec>)
   17a46:	4a31      	ldr	r2, [pc, #196]	; (17b0c <send_cmd+0xf0>)
   17a48:	1a9b      	subs	r3, r3, r2
   17a4a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Uncleared pending sent_cmd");
   17a4c:	f04f 0100 	mov.w	r1, #0
   17a50:	2201      	movs	r2, #1
   17a52:	f362 0102 	bfi	r1, r2, #0, #3
   17a56:	f36f 01c5 	bfc	r1, #3, #3
   17a5a:	f363 118f 	bfi	r1, r3, #6, #10
   17a5e:	482c      	ldr	r0, [pc, #176]	; (17b10 <send_cmd+0xf4>)
   17a60:	f7fa fae4 	bl	1202c <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   17a64:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   17a68:	f012 fb86 	bl	2a178 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17a6c:	2300      	movs	r3, #0
   17a6e:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   17a72:	4620      	mov	r0, r4
   17a74:	f012 fba6 	bl	2a1c4 <net_buf_ref>
   17a78:	4b22      	ldr	r3, [pc, #136]	; (17b04 <send_cmd+0xe8>)
   17a7a:	f8c3 0130 	str.w	r0, [r3, #304]	; 0x130
	err = bt_send(buf);
   17a7e:	4620      	mov	r0, r4
   17a80:	f7ff fd2c 	bl	174dc <bt_send>
	if (err) {
   17a84:	4601      	mov	r1, r0
   17a86:	b970      	cbnz	r0, 17aa6 <send_cmd+0x8a>
}
   17a88:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
   17a8a:	f44f 6312 	mov.w	r3, #2336	; 0x920
   17a8e:	4a21      	ldr	r2, [pc, #132]	; (17b14 <send_cmd+0xf8>)
   17a90:	4921      	ldr	r1, [pc, #132]	; (17b18 <send_cmd+0xfc>)
   17a92:	4822      	ldr	r0, [pc, #136]	; (17b1c <send_cmd+0x100>)
   17a94:	f00e f8de 	bl	25c54 <printk>
   17a98:	4040      	eors	r0, r0
   17a9a:	f380 8811 	msr	BASEPRI, r0
   17a9e:	f04f 0003 	mov.w	r0, #3
   17aa2:	df02      	svc	2
   17aa4:	e7c2      	b.n	17a2c <send_cmd+0x10>
   17aa6:	4b18      	ldr	r3, [pc, #96]	; (17b08 <send_cmd+0xec>)
   17aa8:	4a18      	ldr	r2, [pc, #96]	; (17b0c <send_cmd+0xf0>)
   17aaa:	1a9b      	subs	r3, r3, r2
   17aac:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   17aae:	f04f 0200 	mov.w	r2, #0
   17ab2:	2001      	movs	r0, #1
   17ab4:	f360 0202 	bfi	r2, r0, #0, #3
   17ab8:	f36f 02c5 	bfc	r2, #3, #3
   17abc:	f363 128f 	bfi	r2, r3, #6, #10
   17ac0:	4817      	ldr	r0, [pc, #92]	; (17b20 <send_cmd+0x104>)
   17ac2:	f7fa f9fd 	bl	11ec0 <log_1>
	z_impl_k_sem_give(sem);
   17ac6:	4d0f      	ldr	r5, [pc, #60]	; (17b04 <send_cmd+0xe8>)
   17ac8:	f505 708c 	add.w	r0, r5, #280	; 0x118
   17acc:	f00a f8d8 	bl	21c80 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   17ad0:	4620      	mov	r0, r4
   17ad2:	f004 f979 	bl	1bdc8 <net_buf_id>
   17ad6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   17ada:	4b12      	ldr	r3, [pc, #72]	; (17b24 <send_cmd+0x108>)
   17adc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   17ae0:	4622      	mov	r2, r4
   17ae2:	211f      	movs	r1, #31
   17ae4:	8840      	ldrh	r0, [r0, #2]
   17ae6:	f7fe fda1 	bl	1662c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   17aea:	f8d5 0130 	ldr.w	r0, [r5, #304]	; 0x130
   17aee:	f012 fb43 	bl	2a178 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17af2:	2300      	movs	r3, #0
   17af4:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130
		net_buf_unref(buf);
   17af8:	4620      	mov	r0, r4
   17afa:	f012 fb3d 	bl	2a178 <net_buf_unref>
   17afe:	e7c3      	b.n	17a88 <send_cmd+0x6c>
   17b00:	200003ec 	.word	0x200003ec
   17b04:	200002a0 	.word	0x200002a0
   17b08:	0002c630 	.word	0x0002c630
   17b0c:	0002c610 	.word	0x0002c610
   17b10:	0002de44 	.word	0x0002de44
   17b14:	0002dae4 	.word	0x0002dae4
   17b18:	0002eb1c 	.word	0x0002eb1c
   17b1c:	0002db34 	.word	0x0002db34
   17b20:	0002dd94 	.word	0x0002dd94
   17b24:	20002bb8 	.word	0x20002bb8

00017b28 <process_events>:
{
   17b28:	b570      	push	{r4, r5, r6, lr}
   17b2a:	4604      	mov	r4, r0
   17b2c:	460d      	mov	r5, r1
	BT_DBG("count %d", count);
   17b2e:	e013      	b.n	17b58 <process_events+0x30>
				send_cmd();
   17b30:	f7ff ff74 	bl	17a1c <send_cmd>
   17b34:	e00e      	b.n	17b54 <process_events+0x2c>
   17b36:	4b12      	ldr	r3, [pc, #72]	; (17b80 <process_events+0x58>)
   17b38:	4a12      	ldr	r2, [pc, #72]	; (17b84 <process_events+0x5c>)
   17b3a:	1a9b      	subs	r3, r3, r2
   17b3c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   17b3e:	2202      	movs	r2, #2
   17b40:	f362 0602 	bfi	r6, r2, #0, #3
   17b44:	f36f 06c5 	bfc	r6, #3, #3
   17b48:	f363 168f 	bfi	r6, r3, #6, #10
   17b4c:	4632      	mov	r2, r6
   17b4e:	480e      	ldr	r0, [pc, #56]	; (17b88 <process_events+0x60>)
   17b50:	f7fa f9b6 	bl	11ec0 <log_1>
	for (; count; ev++, count--) {
   17b54:	3414      	adds	r4, #20
   17b56:	3d01      	subs	r5, #1
   17b58:	b185      	cbz	r5, 17b7c <process_events+0x54>
		switch (ev->state) {
   17b5a:	68e1      	ldr	r1, [r4, #12]
   17b5c:	f3c1 3145 	ubfx	r1, r1, #13, #6
   17b60:	2901      	cmp	r1, #1
   17b62:	d9f7      	bls.n	17b54 <process_events+0x2c>
   17b64:	2904      	cmp	r1, #4
   17b66:	d1e6      	bne.n	17b36 <process_events+0xe>
			if (ev->tag == BT_EVENT_CMD_TX) {
   17b68:	7b23      	ldrb	r3, [r4, #12]
   17b6a:	2b00      	cmp	r3, #0
   17b6c:	d0e0      	beq.n	17b30 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   17b6e:	2b01      	cmp	r3, #1
   17b70:	d1f0      	bne.n	17b54 <process_events+0x2c>
					conn = CONTAINER_OF(ev->fifo,
   17b72:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
   17b74:	3838      	subs	r0, #56	; 0x38
   17b76:	f001 fe2b 	bl	197d0 <bt_conn_process_tx>
   17b7a:	e7eb      	b.n	17b54 <process_events+0x2c>
}
   17b7c:	bd70      	pop	{r4, r5, r6, pc}
   17b7e:	bf00      	nop
   17b80:	0002c630 	.word	0x0002c630
   17b84:	0002c610 	.word	0x0002c610
   17b88:	0002de60 	.word	0x0002de60

00017b8c <hci_tx_thread>:
{
   17b8c:	b538      	push	{r3, r4, r5, lr}
   17b8e:	e005      	b.n	17b9c <hci_tx_thread+0x10>
		process_events(events, ev_count);
   17b90:	4621      	mov	r1, r4
   17b92:	4813      	ldr	r0, [pc, #76]	; (17be0 <hci_tx_thread+0x54>)
   17b94:	f7ff ffc8 	bl	17b28 <process_events>
	z_impl_k_yield();
   17b98:	f00a fd90 	bl	226bc <z_impl_k_yield>
		events[0].state = K_POLL_STATE_NOT_READY;
   17b9c:	4d10      	ldr	r5, [pc, #64]	; (17be0 <hci_tx_thread+0x54>)
   17b9e:	68eb      	ldr	r3, [r5, #12]
   17ba0:	f36f 3352 	bfc	r3, #13, #6
   17ba4:	60eb      	str	r3, [r5, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   17ba6:	f105 0014 	add.w	r0, r5, #20
   17baa:	f001 fa0d 	bl	18fc8 <bt_conn_prepare_events>
   17bae:	1c44      	adds	r4, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   17bb0:	f04f 32ff 	mov.w	r2, #4294967295
   17bb4:	f04f 33ff 	mov.w	r3, #4294967295
   17bb8:	4621      	mov	r1, r4
   17bba:	4628      	mov	r0, r5
   17bbc:	f00b f8c8 	bl	22d50 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   17bc0:	2800      	cmp	r0, #0
   17bc2:	d0e5      	beq.n	17b90 <hci_tx_thread+0x4>
   17bc4:	f640 1389 	movw	r3, #2441	; 0x989
   17bc8:	4a06      	ldr	r2, [pc, #24]	; (17be4 <hci_tx_thread+0x58>)
   17bca:	4907      	ldr	r1, [pc, #28]	; (17be8 <hci_tx_thread+0x5c>)
   17bcc:	4807      	ldr	r0, [pc, #28]	; (17bec <hci_tx_thread+0x60>)
   17bce:	f00e f841 	bl	25c54 <printk>
   17bd2:	4040      	eors	r0, r0
   17bd4:	f380 8811 	msr	BASEPRI, r0
   17bd8:	f04f 0003 	mov.w	r0, #3
   17bdc:	df02      	svc	2
   17bde:	e7d7      	b.n	17b90 <hci_tx_thread+0x4>
   17be0:	20000568 	.word	0x20000568
   17be4:	0002dae4 	.word	0x0002dae4
   17be8:	0002dc28 	.word	0x0002dc28
   17bec:	0002db34 	.word	0x0002db34

00017bf0 <hci_event_prio>:
{
   17bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17bf4:	b084      	sub	sp, #16
   17bf6:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   17bf8:	f100 0508 	add.w	r5, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   17bfc:	4628      	mov	r0, r5
   17bfe:	f012 fb47 	bl	2a290 <net_buf_simple_headroom>
   17c02:	f8ad 000c 	strh.w	r0, [sp, #12]
	state->len = buf->len;
   17c06:	89a3      	ldrh	r3, [r4, #12]
   17c08:	f8ad 300e 	strh.w	r3, [sp, #14]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17c0c:	2b01      	cmp	r3, #1
   17c0e:	d915      	bls.n	17c3c <hci_event_prio+0x4c>
	return net_buf_simple_pull_mem(&buf->b, len);
   17c10:	2102      	movs	r1, #2
   17c12:	4628      	mov	r0, r5
   17c14:	f012 fb24 	bl	2a260 <net_buf_simple_pull_mem>
   17c18:	4605      	mov	r5, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17c1a:	7803      	ldrb	r3, [r0, #0]
	switch (evt) {
   17c1c:	3b05      	subs	r3, #5
   17c1e:	2b15      	cmp	r3, #21
   17c20:	d81c      	bhi.n	17c5c <hci_event_prio+0x6c>
   17c22:	e8df f003 	tbb	[pc, r3]
   17c26:	1b19      	.short	0x1b19
   17c28:	1b1b1b1b 	.word	0x1b1b1b1b
   17c2c:	3f1b1b1b 	.word	0x3f1b1b1b
   17c30:	1b1b1b3f 	.word	0x1b1b1b3f
   17c34:	1b1b1b3f 	.word	0x1b1b1b3f
   17c38:	3f1b1b1b 	.word	0x3f1b1b1b
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17c3c:	f640 5315 	movw	r3, #3349	; 0xd15
   17c40:	4a3b      	ldr	r2, [pc, #236]	; (17d30 <hci_event_prio+0x140>)
   17c42:	493c      	ldr	r1, [pc, #240]	; (17d34 <hci_event_prio+0x144>)
   17c44:	483c      	ldr	r0, [pc, #240]	; (17d38 <hci_event_prio+0x148>)
   17c46:	f00e f805 	bl	25c54 <printk>
   17c4a:	4040      	eors	r0, r0
   17c4c:	f380 8811 	msr	BASEPRI, r0
   17c50:	f04f 0003 	mov.w	r0, #3
   17c54:	df02      	svc	2
   17c56:	e7db      	b.n	17c10 <hci_event_prio+0x20>
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17c58:	2603      	movs	r6, #3
   17c5a:	e000      	b.n	17c5e <hci_event_prio+0x6e>
		return BT_HCI_EVT_FLAG_RECV;
   17c5c:	2602      	movs	r6, #2
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17c5e:	f016 0f01 	tst.w	r6, #1
   17c62:	d021      	beq.n	17ca8 <hci_event_prio+0xb8>
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   17c64:	782d      	ldrb	r5, [r5, #0]
	for (i = 0; i < num_handlers; i++) {
   17c66:	2300      	movs	r3, #0
   17c68:	2b04      	cmp	r3, #4
   17c6a:	d83f      	bhi.n	17cec <hci_event_prio+0xfc>
		const struct event_handler *handler = &handlers[i];
   17c6c:	4a33      	ldr	r2, [pc, #204]	; (17d3c <hci_event_prio+0x14c>)
   17c6e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
		if (handler->event != event) {
   17c72:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   17c76:	4295      	cmp	r5, r2
   17c78:	d124      	bne.n	17cc4 <hci_event_prio+0xd4>
		if (buf->len < handler->min_len) {
   17c7a:	89a1      	ldrh	r1, [r4, #12]
   17c7c:	7843      	ldrb	r3, [r0, #1]
   17c7e:	4299      	cmp	r1, r3
   17c80:	d322      	bcc.n	17cc8 <hci_event_prio+0xd8>
		handler->handler(buf);
   17c82:	6843      	ldr	r3, [r0, #4]
   17c84:	4620      	mov	r0, r4
   17c86:	4798      	blx	r3
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17c88:	f016 0f02 	tst.w	r6, #2
   17c8c:	d04c      	beq.n	17d28 <hci_event_prio+0x138>
	buf->data = buf->__buf + state->offset;
   17c8e:	6923      	ldr	r3, [r4, #16]
   17c90:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   17c94:	4413      	add	r3, r2
   17c96:	60a3      	str	r3, [r4, #8]
	buf->len = state->len;
   17c98:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17c9c:	81a3      	strh	r3, [r4, #12]
}
   17c9e:	b004      	add	sp, #16
   17ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_EVT_FLAG_RECV_PRIO;
   17ca4:	2601      	movs	r6, #1
   17ca6:	e7da      	b.n	17c5e <hci_event_prio+0x6e>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   17ca8:	f640 5319 	movw	r3, #3353	; 0xd19
   17cac:	4a20      	ldr	r2, [pc, #128]	; (17d30 <hci_event_prio+0x140>)
   17cae:	4924      	ldr	r1, [pc, #144]	; (17d40 <hci_event_prio+0x150>)
   17cb0:	4821      	ldr	r0, [pc, #132]	; (17d38 <hci_event_prio+0x148>)
   17cb2:	f00d ffcf 	bl	25c54 <printk>
   17cb6:	4040      	eors	r0, r0
   17cb8:	f380 8811 	msr	BASEPRI, r0
   17cbc:	f04f 0003 	mov.w	r0, #3
   17cc0:	df02      	svc	2
   17cc2:	e7cf      	b.n	17c64 <hci_event_prio+0x74>
	for (i = 0; i < num_handlers; i++) {
   17cc4:	3301      	adds	r3, #1
   17cc6:	e7cf      	b.n	17c68 <hci_event_prio+0x78>
   17cc8:	4a1e      	ldr	r2, [pc, #120]	; (17d44 <hci_event_prio+0x154>)
   17cca:	4b1f      	ldr	r3, [pc, #124]	; (17d48 <hci_event_prio+0x158>)
   17ccc:	1ad2      	subs	r2, r2, r3
   17cce:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17cd0:	f04f 0300 	mov.w	r3, #0
   17cd4:	2001      	movs	r0, #1
   17cd6:	f360 0302 	bfi	r3, r0, #0, #3
   17cda:	f36f 03c5 	bfc	r3, #3, #3
   17cde:	f362 138f 	bfi	r3, r2, #6, #10
   17ce2:	462a      	mov	r2, r5
   17ce4:	4819      	ldr	r0, [pc, #100]	; (17d4c <hci_event_prio+0x15c>)
   17ce6:	f7fa f921 	bl	11f2c <log_2>
			return;
   17cea:	e7cd      	b.n	17c88 <hci_event_prio+0x98>
   17cec:	4b15      	ldr	r3, [pc, #84]	; (17d44 <hci_event_prio+0x154>)
   17cee:	4a16      	ldr	r2, [pc, #88]	; (17d48 <hci_event_prio+0x158>)
   17cf0:	1a9b      	subs	r3, r3, r2
   17cf2:	08db      	lsrs	r3, r3, #3
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   17cf4:	f04f 0700 	mov.w	r7, #0
   17cf8:	2202      	movs	r2, #2
   17cfa:	f362 0702 	bfi	r7, r2, #0, #3
   17cfe:	f36f 07c5 	bfc	r7, #3, #3
   17d02:	f363 178f 	bfi	r7, r3, #6, #10
   17d06:	f8b4 800c 	ldrh.w	r8, [r4, #12]
   17d0a:	4641      	mov	r1, r8
   17d0c:	68a0      	ldr	r0, [r4, #8]
   17d0e:	f7fe f943 	bl	15f98 <bt_hex_real>
   17d12:	f7f9 ff5b 	bl	11bcc <z_log_strdup>
   17d16:	4603      	mov	r3, r0
   17d18:	f8ad 7000 	strh.w	r7, [sp]
   17d1c:	4642      	mov	r2, r8
   17d1e:	4629      	mov	r1, r5
   17d20:	480b      	ldr	r0, [pc, #44]	; (17d50 <hci_event_prio+0x160>)
   17d22:	f7fa f88f 	bl	11e44 <log_3>
   17d26:	e7af      	b.n	17c88 <hci_event_prio+0x98>
		net_buf_unref(buf);
   17d28:	4620      	mov	r0, r4
   17d2a:	f012 fa25 	bl	2a178 <net_buf_unref>
}
   17d2e:	e7b6      	b.n	17c9e <hci_event_prio+0xae>
   17d30:	0002dae4 	.word	0x0002dae4
   17d34:	0002db18 	.word	0x0002db18
   17d38:	0002db34 	.word	0x0002db34
   17d3c:	0002dfa4 	.word	0x0002dfa4
   17d40:	0002de84 	.word	0x0002de84
   17d44:	0002c630 	.word	0x0002c630
   17d48:	0002c610 	.word	0x0002c610
   17d4c:	0002db9c 	.word	0x0002db9c
   17d50:	0002dbc0 	.word	0x0002dbc0

00017d54 <bt_recv>:
{
   17d54:	b538      	push	{r3, r4, r5, lr}
   17d56:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   17d58:	7d05      	ldrb	r5, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   17d5a:	2d01      	cmp	r5, #1
   17d5c:	d007      	beq.n	17d6e <bt_recv+0x1a>
   17d5e:	2d03      	cmp	r5, #3
   17d60:	d12c      	bne.n	17dbc <bt_recv+0x68>
		net_buf_put(&bt_dev.rx_queue, buf);
   17d62:	4601      	mov	r1, r0
   17d64:	4821      	ldr	r0, [pc, #132]	; (17dec <bt_recv+0x98>)
   17d66:	f012 f9fa 	bl	2a15e <net_buf_put>
		return 0;
   17d6a:	2000      	movs	r0, #0
}
   17d6c:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_hci_evt_hdr *hdr = (void *)buf->data;
   17d6e:	6883      	ldr	r3, [r0, #8]
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17d70:	781b      	ldrb	r3, [r3, #0]
	switch (evt) {
   17d72:	3b05      	subs	r3, #5
   17d74:	2b15      	cmp	r3, #21
   17d76:	d80e      	bhi.n	17d96 <bt_recv+0x42>
   17d78:	e8df f003 	tbb	[pc, r3]
   17d7c:	0d0d0d0b 	.word	0x0d0d0d0b
   17d80:	0d0d0d0d 	.word	0x0d0d0d0d
   17d84:	0d0e0e0d 	.word	0x0d0e0e0d
   17d88:	0d0e0d0d 	.word	0x0d0e0d0d
   17d8c:	0d0d0d0d 	.word	0x0d0d0d0d
   17d90:	0e0d      	.short	0x0e0d
   17d92:	2503      	movs	r5, #3
   17d94:	e000      	b.n	17d98 <bt_recv+0x44>
		return BT_HCI_EVT_FLAG_RECV;
   17d96:	2502      	movs	r5, #2
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   17d98:	f015 0f01 	tst.w	r5, #1
   17d9c:	d104      	bne.n	17da8 <bt_recv+0x54>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17d9e:	f015 0f02 	tst.w	r5, #2
   17da2:	d105      	bne.n	17db0 <bt_recv+0x5c>
		return 0;
   17da4:	2000      	movs	r0, #0
   17da6:	e7e1      	b.n	17d6c <bt_recv+0x18>
			hci_event_prio(buf);
   17da8:	4620      	mov	r0, r4
   17daa:	f7ff ff21 	bl	17bf0 <hci_event_prio>
   17dae:	e7f6      	b.n	17d9e <bt_recv+0x4a>
			net_buf_put(&bt_dev.rx_queue, buf);
   17db0:	4621      	mov	r1, r4
   17db2:	480e      	ldr	r0, [pc, #56]	; (17dec <bt_recv+0x98>)
   17db4:	f012 f9d3 	bl	2a15e <net_buf_put>
		return 0;
   17db8:	2000      	movs	r0, #0
   17dba:	e7d7      	b.n	17d6c <bt_recv+0x18>
   17dbc:	4b0c      	ldr	r3, [pc, #48]	; (17df0 <bt_recv+0x9c>)
   17dbe:	4a0d      	ldr	r2, [pc, #52]	; (17df4 <bt_recv+0xa0>)
   17dc0:	1a9b      	subs	r3, r3, r2
   17dc2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   17dc4:	f04f 0200 	mov.w	r2, #0
   17dc8:	2101      	movs	r1, #1
   17dca:	f361 0202 	bfi	r2, r1, #0, #3
   17dce:	f36f 02c5 	bfc	r2, #3, #3
   17dd2:	f363 128f 	bfi	r2, r3, #6, #10
   17dd6:	4629      	mov	r1, r5
   17dd8:	4807      	ldr	r0, [pc, #28]	; (17df8 <bt_recv+0xa4>)
   17dda:	f7fa f871 	bl	11ec0 <log_1>
		net_buf_unref(buf);
   17dde:	4620      	mov	r0, r4
   17de0:	f012 f9ca 	bl	2a178 <net_buf_unref>
		return -EINVAL;
   17de4:	f06f 0015 	mvn.w	r0, #21
   17de8:	e7c0      	b.n	17d6c <bt_recv+0x18>
   17dea:	bf00      	nop
   17dec:	200003d4 	.word	0x200003d4
   17df0:	0002c630 	.word	0x0002c630
   17df4:	0002c610 	.word	0x0002c610
   17df8:	0002dea0 	.word	0x0002dea0

00017dfc <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17dfc:	4b0a      	ldr	r3, [pc, #40]	; (17e28 <bt_hci_driver_register+0x2c>)
   17dfe:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   17e02:	b943      	cbnz	r3, 17e16 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
   17e04:	68c3      	ldr	r3, [r0, #12]
   17e06:	b14b      	cbz	r3, 17e1c <bt_hci_driver_register+0x20>
   17e08:	6903      	ldr	r3, [r0, #16]
   17e0a:	b153      	cbz	r3, 17e22 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
   17e0c:	4b06      	ldr	r3, [pc, #24]	; (17e28 <bt_hci_driver_register+0x2c>)
   17e0e:	f8c3 0164 	str.w	r0, [r3, #356]	; 0x164
	return 0;
   17e12:	2000      	movs	r0, #0
   17e14:	4770      	bx	lr
		return -EALREADY;
   17e16:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17e1a:	4770      	bx	lr
		return -EINVAL;
   17e1c:	f06f 0015 	mvn.w	r0, #21
   17e20:	4770      	bx	lr
   17e22:	f06f 0015 	mvn.w	r0, #21
}
   17e26:	4770      	bx	lr
   17e28:	200002a0 	.word	0x200002a0

00017e2c <bt_finalize_init>:
{
   17e2c:	b508      	push	{r3, lr}
   17e2e:	4b09      	ldr	r3, [pc, #36]	; (17e54 <bt_finalize_init+0x28>)
   17e30:	f3bf 8f5b 	dmb	ish
   17e34:	e853 2f00 	ldrex	r2, [r3]
   17e38:	f042 0202 	orr.w	r2, r2, #2
   17e3c:	e843 2100 	strex	r1, r2, [r3]
   17e40:	2900      	cmp	r1, #0
   17e42:	d1f7      	bne.n	17e34 <bt_finalize_init+0x8>
   17e44:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   17e48:	2000      	movs	r0, #0
   17e4a:	f000 fbff 	bl	1864c <bt_le_scan_update>
	bt_dev_show_info();
   17e4e:	f7fe fd17 	bl	16880 <bt_dev_show_info>
}
   17e52:	bd08      	pop	{r3, pc}
   17e54:	2000036c 	.word	0x2000036c

00017e58 <init_work>:
{
   17e58:	b508      	push	{r3, lr}
	err = bt_init();
   17e5a:	f010 f90c 	bl	28076 <bt_init>
	if (ready_cb) {
   17e5e:	4b02      	ldr	r3, [pc, #8]	; (17e68 <init_work+0x10>)
   17e60:	681b      	ldr	r3, [r3, #0]
   17e62:	b103      	cbz	r3, 17e66 <init_work+0xe>
		ready_cb(err);
   17e64:	4798      	blx	r3
}
   17e66:	bd08      	pop	{r3, pc}
   17e68:	20002bd4 	.word	0x20002bd4

00017e6c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   17e6c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   17e70:	b088      	sub	sp, #32
	int err;

	if (!bt_dev.drv) {
   17e72:	4b41      	ldr	r3, [pc, #260]	; (17f78 <bt_enable+0x10c>)
   17e74:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   17e78:	2b00      	cmp	r3, #0
   17e7a:	d050      	beq.n	17f1e <bt_enable+0xb2>
   17e7c:	4605      	mov	r5, r0
   17e7e:	4b3f      	ldr	r3, [pc, #252]	; (17f7c <bt_enable+0x110>)
   17e80:	f3bf 8f5b 	dmb	ish
   17e84:	e853 2f00 	ldrex	r2, [r3]
   17e88:	f042 0101 	orr.w	r1, r2, #1
   17e8c:	e843 1000 	strex	r0, r1, [r3]
   17e90:	2800      	cmp	r0, #0
   17e92:	d1f7      	bne.n	17e84 <bt_enable+0x18>
   17e94:	f3bf 8f5b 	dmb	ish
		BT_ERR("No HCI driver registered");
		return -ENODEV;
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17e98:	f012 0f01 	tst.w	r2, #1
   17e9c:	d168      	bne.n	17f70 <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   17e9e:	4b38      	ldr	r3, [pc, #224]	; (17f80 <bt_enable+0x114>)
   17ea0:	601d      	str	r5, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   17ea2:	f04f 0800 	mov.w	r8, #0
   17ea6:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17eaa:	4e36      	ldr	r6, [pc, #216]	; (17f84 <bt_enable+0x118>)
   17eac:	e9cd 8906 	strd	r8, r9, [sp, #24]
   17eb0:	2400      	movs	r4, #0
   17eb2:	9404      	str	r4, [sp, #16]
   17eb4:	f06f 0308 	mvn.w	r3, #8
   17eb8:	9303      	str	r3, [sp, #12]
   17eba:	9402      	str	r4, [sp, #8]
   17ebc:	9401      	str	r4, [sp, #4]
   17ebe:	9400      	str	r4, [sp, #0]
   17ec0:	4b31      	ldr	r3, [pc, #196]	; (17f88 <bt_enable+0x11c>)
   17ec2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   17ec6:	4931      	ldr	r1, [pc, #196]	; (17f8c <bt_enable+0x120>)
   17ec8:	4630      	mov	r0, r6
   17eca:	f013 fc52 	bl	2b772 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17ece:	4930      	ldr	r1, [pc, #192]	; (17f90 <bt_enable+0x124>)
   17ed0:	4630      	mov	r0, r6
   17ed2:	f009 fce7 	bl	218a4 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17ed6:	4e2f      	ldr	r6, [pc, #188]	; (17f94 <bt_enable+0x128>)
   17ed8:	e9cd 8906 	strd	r8, r9, [sp, #24]
   17edc:	9404      	str	r4, [sp, #16]
   17ede:	f06f 0307 	mvn.w	r3, #7
   17ee2:	9303      	str	r3, [sp, #12]
   17ee4:	9402      	str	r4, [sp, #8]
   17ee6:	9401      	str	r4, [sp, #4]
   17ee8:	9400      	str	r4, [sp, #0]
   17eea:	4b2b      	ldr	r3, [pc, #172]	; (17f98 <bt_enable+0x12c>)
   17eec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   17ef0:	492a      	ldr	r1, [pc, #168]	; (17f9c <bt_enable+0x130>)
   17ef2:	4630      	mov	r0, r6
   17ef4:	f013 fc3d 	bl	2b772 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17ef8:	4929      	ldr	r1, [pc, #164]	; (17fa0 <bt_enable+0x134>)
   17efa:	4630      	mov	r0, r6
   17efc:	f009 fcd2 	bl	218a4 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   17f00:	4b1d      	ldr	r3, [pc, #116]	; (17f78 <bt_enable+0x10c>)
   17f02:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
   17f06:	68db      	ldr	r3, [r3, #12]
   17f08:	4798      	blx	r3
	if (err) {
   17f0a:	4604      	mov	r4, r0
   17f0c:	b9d0      	cbnz	r0, 17f44 <bt_enable+0xd8>
		return err;
	}

	bt_monitor_send(BT_MONITOR_OPEN_INDEX, NULL, 0);

	if (!cb) {
   17f0e:	b35d      	cbz	r5, 17f68 <bt_enable+0xfc>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
   17f10:	4824      	ldr	r0, [pc, #144]	; (17fa4 <bt_enable+0x138>)
   17f12:	f00a f87f 	bl	22014 <k_work_submit>
	return 0;
}
   17f16:	4620      	mov	r0, r4
   17f18:	b008      	add	sp, #32
   17f1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   17f1e:	4b22      	ldr	r3, [pc, #136]	; (17fa8 <bt_enable+0x13c>)
   17f20:	4a22      	ldr	r2, [pc, #136]	; (17fac <bt_enable+0x140>)
   17f22:	1a9b      	subs	r3, r3, r2
   17f24:	08db      	lsrs	r3, r3, #3
		BT_ERR("No HCI driver registered");
   17f26:	f04f 0100 	mov.w	r1, #0
   17f2a:	2201      	movs	r2, #1
   17f2c:	f362 0102 	bfi	r1, r2, #0, #3
   17f30:	f36f 01c5 	bfc	r1, #3, #3
   17f34:	f363 118f 	bfi	r1, r3, #6, #10
   17f38:	481d      	ldr	r0, [pc, #116]	; (17fb0 <bt_enable+0x144>)
   17f3a:	f7fa f877 	bl	1202c <log_0>
		return -ENODEV;
   17f3e:	f06f 0412 	mvn.w	r4, #18
   17f42:	e7e8      	b.n	17f16 <bt_enable+0xaa>
   17f44:	4b18      	ldr	r3, [pc, #96]	; (17fa8 <bt_enable+0x13c>)
   17f46:	4a19      	ldr	r2, [pc, #100]	; (17fac <bt_enable+0x140>)
   17f48:	1a9b      	subs	r3, r3, r2
   17f4a:	08db      	lsrs	r3, r3, #3
		BT_ERR("HCI driver open failed (%d)", err);
   17f4c:	f04f 0200 	mov.w	r2, #0
   17f50:	2101      	movs	r1, #1
   17f52:	f361 0202 	bfi	r2, r1, #0, #3
   17f56:	f36f 02c5 	bfc	r2, #3, #3
   17f5a:	f363 128f 	bfi	r2, r3, #6, #10
   17f5e:	4601      	mov	r1, r0
   17f60:	4814      	ldr	r0, [pc, #80]	; (17fb4 <bt_enable+0x148>)
   17f62:	f7f9 ffad 	bl	11ec0 <log_1>
		return err;
   17f66:	e7d6      	b.n	17f16 <bt_enable+0xaa>
		return bt_init();
   17f68:	f010 f885 	bl	28076 <bt_init>
   17f6c:	4604      	mov	r4, r0
   17f6e:	e7d2      	b.n	17f16 <bt_enable+0xaa>
		return -EALREADY;
   17f70:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17f74:	e7cf      	b.n	17f16 <bt_enable+0xaa>
   17f76:	bf00      	nop
   17f78:	200002a0 	.word	0x200002a0
   17f7c:	2000036c 	.word	0x2000036c
   17f80:	20002bd4 	.word	0x20002bd4
   17f84:	20001a08 	.word	0x20001a08
   17f88:	00017b8d 	.word	0x00017b8d
   17f8c:	20005480 	.word	0x20005480
   17f90:	0002ded0 	.word	0x0002ded0
   17f94:	20001950 	.word	0x20001950
   17f98:	00016d1d 	.word	0x00016d1d
   17f9c:	20005060 	.word	0x20005060
   17fa0:	0002ded8 	.word	0x0002ded8
   17fa4:	2000035c 	.word	0x2000035c
   17fa8:	0002c630 	.word	0x0002c630
   17fac:	0002c610 	.word	0x0002c610
   17fb0:	0002deb4 	.word	0x0002deb4
   17fb4:	0002dee0 	.word	0x0002dee0

00017fb8 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   17fb8:	4800      	ldr	r0, [pc, #0]	; (17fbc <bt_get_name+0x4>)
   17fba:	4770      	bx	lr
   17fbc:	0002defc 	.word	0x0002defc

00017fc0 <bt_data_parse>:
}

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   17fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17fc2:	b083      	sub	sp, #12
   17fc4:	4604      	mov	r4, r0
   17fc6:	460f      	mov	r7, r1
   17fc8:	4616      	mov	r6, r2
	while (ad->len > 1) {
   17fca:	e015      	b.n	17ff8 <bt_data_parse+0x38>
   17fcc:	4b19      	ldr	r3, [pc, #100]	; (18034 <bt_data_parse+0x74>)
   17fce:	4a1a      	ldr	r2, [pc, #104]	; (18038 <bt_data_parse+0x78>)
   17fd0:	1a9b      	subs	r3, r3, r2
   17fd2:	08db      	lsrs	r3, r3, #3
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			BT_WARN("Malformed data");
   17fd4:	f04f 0100 	mov.w	r1, #0
   17fd8:	2202      	movs	r2, #2
   17fda:	f362 0102 	bfi	r1, r2, #0, #3
   17fde:	f36f 01c5 	bfc	r1, #3, #3
   17fe2:	f363 118f 	bfi	r1, r3, #6, #10
   17fe6:	4815      	ldr	r0, [pc, #84]	; (1803c <bt_data_parse+0x7c>)
   17fe8:	f7fa f820 	bl	1202c <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   17fec:	b003      	add	sp, #12
   17fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_simple_pull(ad, len - 1);
   17ff0:	1e69      	subs	r1, r5, #1
   17ff2:	4620      	mov	r0, r4
   17ff4:	f012 f92c 	bl	2a250 <net_buf_simple_pull>
	while (ad->len > 1) {
   17ff8:	88a3      	ldrh	r3, [r4, #4]
   17ffa:	2b01      	cmp	r3, #1
   17ffc:	d9f6      	bls.n	17fec <bt_data_parse+0x2c>
		len = net_buf_simple_pull_u8(ad);
   17ffe:	4620      	mov	r0, r4
   18000:	f012 f936 	bl	2a270 <net_buf_simple_pull_u8>
		if (len == 0U) {
   18004:	4605      	mov	r5, r0
   18006:	2800      	cmp	r0, #0
   18008:	d0f0      	beq.n	17fec <bt_data_parse+0x2c>
		if (len > ad->len) {
   1800a:	b283      	uxth	r3, r0
   1800c:	88a2      	ldrh	r2, [r4, #4]
   1800e:	4293      	cmp	r3, r2
   18010:	d8dc      	bhi.n	17fcc <bt_data_parse+0xc>
		data.type = net_buf_simple_pull_u8(ad);
   18012:	4620      	mov	r0, r4
   18014:	f012 f92c 	bl	2a270 <net_buf_simple_pull_u8>
   18018:	f88d 0000 	strb.w	r0, [sp]
		data.data_len = len - 1;
   1801c:	1e6b      	subs	r3, r5, #1
   1801e:	f88d 3001 	strb.w	r3, [sp, #1]
		data.data = ad->data;
   18022:	6823      	ldr	r3, [r4, #0]
   18024:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   18026:	4631      	mov	r1, r6
   18028:	4668      	mov	r0, sp
   1802a:	47b8      	blx	r7
   1802c:	2800      	cmp	r0, #0
   1802e:	d1df      	bne.n	17ff0 <bt_data_parse+0x30>
   18030:	e7dc      	b.n	17fec <bt_data_parse+0x2c>
   18032:	bf00      	nop
   18034:	0002c630 	.word	0x0002c630
   18038:	0002c610 	.word	0x0002c610
   1803c:	0002df04 	.word	0x0002df04

00018040 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18040:	b570      	push	{r4, r5, r6, lr}
   18042:	4605      	mov	r5, r0
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   18044:	2400      	movs	r4, #0
   18046:	4b0a      	ldr	r3, [pc, #40]	; (18070 <id_find+0x30>)
   18048:	79db      	ldrb	r3, [r3, #7]
   1804a:	42a3      	cmp	r3, r4
   1804c:	d90c      	bls.n	18068 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   1804e:	4626      	mov	r6, r4
   18050:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   18054:	2207      	movs	r2, #7
   18056:	4b06      	ldr	r3, [pc, #24]	; (18070 <id_find+0x30>)
   18058:	4419      	add	r1, r3
   1805a:	4628      	mov	r0, r5
   1805c:	f00f fdcb 	bl	27bf6 <memcmp>
   18060:	b120      	cbz	r0, 1806c <id_find+0x2c>
	for (id = 0U; id < bt_dev.id_count; id++) {
   18062:	3401      	adds	r4, #1
   18064:	b2e4      	uxtb	r4, r4
   18066:	e7ee      	b.n	18046 <id_find+0x6>
			return id;
		}
	}

	return -ENOENT;
   18068:	f06f 0601 	mvn.w	r6, #1
}
   1806c:	4630      	mov	r0, r6
   1806e:	bd70      	pop	{r4, r5, r6, pc}
   18070:	200002a0 	.word	0x200002a0

00018074 <set_random_address>:
{
   18074:	b570      	push	{r4, r5, r6, lr}
   18076:	4604      	mov	r4, r0
	return memcmp(a, b, sizeof(*a));
   18078:	2206      	movs	r2, #6
   1807a:	4914      	ldr	r1, [pc, #80]	; (180cc <set_random_address+0x58>)
   1807c:	f00f fdbb 	bl	27bf6 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18080:	4605      	mov	r5, r0
   18082:	b908      	cbnz	r0, 18088 <set_random_address+0x14>
}
   18084:	4628      	mov	r0, r5
   18086:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18088:	2106      	movs	r1, #6
   1808a:	f242 0005 	movw	r0, #8197	; 0x2005
   1808e:	f7fe fe89 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   18092:	4605      	mov	r5, r0
   18094:	b1b8      	cbz	r0, 180c6 <set_random_address+0x52>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18096:	2206      	movs	r2, #6
   18098:	4621      	mov	r1, r4
   1809a:	3008      	adds	r0, #8
   1809c:	f012 f8bc 	bl	2a218 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   180a0:	2200      	movs	r2, #0
   180a2:	4629      	mov	r1, r5
   180a4:	f242 0005 	movw	r0, #8197	; 0x2005
   180a8:	f7fe feb8 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   180ac:	4605      	mov	r5, r0
   180ae:	2800      	cmp	r0, #0
   180b0:	d1e8      	bne.n	18084 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
   180b2:	4e06      	ldr	r6, [pc, #24]	; (180cc <set_random_address+0x58>)
   180b4:	2206      	movs	r2, #6
   180b6:	4621      	mov	r1, r4
   180b8:	4630      	mov	r0, r6
   180ba:	f00f fdc9 	bl	27c50 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   180be:	2301      	movs	r3, #1
   180c0:	f806 3c01 	strb.w	r3, [r6, #-1]
	return 0;
   180c4:	e7de      	b.n	18084 <set_random_address+0x10>
		return -ENOBUFS;
   180c6:	f06f 0568 	mvn.w	r5, #104	; 0x68
   180ca:	e7db      	b.n	18084 <set_random_address+0x10>
   180cc:	20000301 	.word	0x20000301

000180d0 <id_create>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   180d0:	b530      	push	{r4, r5, lr}
   180d2:	b085      	sub	sp, #20
   180d4:	4604      	mov	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   180d6:	460d      	mov	r5, r1
   180d8:	b149      	cbz	r1, 180ee <id_create+0x1e>
   180da:	2300      	movs	r3, #0
   180dc:	9302      	str	r3, [sp, #8]
   180de:	f8cd 300b 	str.w	r3, [sp, #11]
	return memcmp(a, b, sizeof(*a));
   180e2:	2207      	movs	r2, #7
   180e4:	a902      	add	r1, sp, #8
   180e6:	4628      	mov	r0, r5
   180e8:	f00f fd85 	bl	27bf6 <memcmp>
   180ec:	b9e0      	cbnz	r0, 18128 <id_create+0x58>
		bt_addr_le_t new_addr;

		do {
			int err;

			err = bt_addr_le_create_static(&new_addr);
   180ee:	4668      	mov	r0, sp
   180f0:	f00f fe6a 	bl	27dc8 <bt_addr_le_create_static>
			if (err) {
   180f4:	4603      	mov	r3, r0
   180f6:	b9a0      	cbnz	r0, 18122 <id_create+0x52>
				return err;
			}
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);
   180f8:	4668      	mov	r0, sp
   180fa:	f7ff ffa1 	bl	18040 <id_find>
   180fe:	2800      	cmp	r0, #0
   18100:	daf5      	bge.n	180ee <id_create+0x1e>

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   18102:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18106:	4b0d      	ldr	r3, [pc, #52]	; (1813c <id_create+0x6c>)
   18108:	441c      	add	r4, r3
	memcpy(dst, src, sizeof(*dst));
   1810a:	2207      	movs	r2, #7
   1810c:	4669      	mov	r1, sp
   1810e:	4620      	mov	r0, r4
   18110:	f00f fd9e 	bl	27c50 <memcpy>

		if (addr) {
   18114:	b125      	cbz	r5, 18120 <id_create+0x50>
   18116:	2207      	movs	r2, #7
   18118:	4621      	mov	r1, r4
   1811a:	4628      	mov	r0, r5
   1811c:	f00f fd98 	bl	27c50 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   18120:	2300      	movs	r3, #0
}
   18122:	4618      	mov	r0, r3
   18124:	b005      	add	sp, #20
   18126:	bd30      	pop	{r4, r5, pc}
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18128:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1812c:	2207      	movs	r2, #7
   1812e:	4629      	mov	r1, r5
   18130:	4802      	ldr	r0, [pc, #8]	; (1813c <id_create+0x6c>)
   18132:	4420      	add	r0, r4
   18134:	f00f fd8c 	bl	27c50 <memcpy>
}
   18138:	e7f2      	b.n	18120 <id_create+0x50>
   1813a:	bf00      	nop
   1813c:	200002a0 	.word	0x200002a0

00018140 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18140:	b570      	push	{r4, r5, r6, lr}
   18142:	b084      	sub	sp, #16
   18144:	460c      	mov	r4, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18146:	4605      	mov	r5, r0
   18148:	b340      	cbz	r0, 1819c <bt_id_create+0x5c>
   1814a:	2300      	movs	r3, #0
   1814c:	9300      	str	r3, [sp, #0]
   1814e:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   18152:	2207      	movs	r2, #7
   18154:	4669      	mov	r1, sp
   18156:	f00f fd4e 	bl	27bf6 <memcmp>
   1815a:	b1f8      	cbz	r0, 1819c <bt_id_create+0x5c>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   1815c:	782b      	ldrb	r3, [r5, #0]
   1815e:	2b01      	cmp	r3, #1
   18160:	d104      	bne.n	1816c <bt_id_create+0x2c>
		    !BT_ADDR_IS_STATIC(&addr->a)) {
   18162:	79ab      	ldrb	r3, [r5, #6]
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18164:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18168:	2bc0      	cmp	r3, #192	; 0xc0
   1816a:	d012      	beq.n	18192 <bt_id_create+0x52>
   1816c:	4b24      	ldr	r3, [pc, #144]	; (18200 <bt_id_create+0xc0>)
   1816e:	4a25      	ldr	r2, [pc, #148]	; (18204 <bt_id_create+0xc4>)
   18170:	1a9b      	subs	r3, r3, r2
   18172:	08db      	lsrs	r3, r3, #3
			BT_ERR("Only static random identity address supported");
   18174:	f04f 0100 	mov.w	r1, #0
   18178:	2201      	movs	r2, #1
   1817a:	f362 0102 	bfi	r1, r2, #0, #3
   1817e:	f36f 01c5 	bfc	r1, #3, #3
   18182:	f363 118f 	bfi	r1, r3, #6, #10
   18186:	4820      	ldr	r0, [pc, #128]	; (18208 <bt_id_create+0xc8>)
   18188:	f7f9 ff50 	bl	1202c <log_0>
			return -EINVAL;
   1818c:	f06f 0015 	mvn.w	r0, #21
   18190:	e028      	b.n	181e4 <bt_id_create+0xa4>
		}

		if (id_find(addr) >= 0) {
   18192:	4628      	mov	r0, r5
   18194:	f7ff ff54 	bl	18040 <id_find>
   18198:	2800      	cmp	r0, #0
   1819a:	da25      	bge.n	181e8 <bt_id_create+0xa8>
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   1819c:	bb54      	cbnz	r4, 181f4 <bt_id_create+0xb4>
		return -EINVAL;
	}

	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   1819e:	4b1b      	ldr	r3, [pc, #108]	; (1820c <bt_id_create+0xcc>)
   181a0:	79db      	ldrb	r3, [r3, #7]
   181a2:	2b01      	cmp	r3, #1
   181a4:	d029      	beq.n	181fa <bt_id_create+0xba>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   181a6:	f3bf 8f5b 	dmb	ish
   181aa:	4b19      	ldr	r3, [pc, #100]	; (18210 <bt_id_create+0xd0>)
   181ac:	681b      	ldr	r3, [r3, #0]
   181ae:	f3bf 8f5b 	dmb	ish
		return -ENOMEM;
	}

	/* bt_rand is not available before Bluetooth enable has been called */
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   181b2:	f013 0f01 	tst.w	r3, #1
   181b6:	d10a      	bne.n	181ce <bt_id_create+0x8e>
		uint8_t zero_irk[16] = { 0 };

		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   181b8:	b1cd      	cbz	r5, 181ee <bt_id_create+0xae>
   181ba:	2300      	movs	r3, #0
   181bc:	9302      	str	r3, [sp, #8]
   181be:	f8cd 300b 	str.w	r3, [sp, #11]
   181c2:	2207      	movs	r2, #7
   181c4:	a902      	add	r1, sp, #8
   181c6:	4628      	mov	r0, r5
   181c8:	f00f fd15 	bl	27bf6 <memcmp>
   181cc:	b178      	cbz	r0, 181ee <bt_id_create+0xae>
		    !(irk && memcmp(irk, zero_irk, 16))) {
			return -EINVAL;
		}
	}

	new_id = bt_dev.id_count++;
   181ce:	4b0f      	ldr	r3, [pc, #60]	; (1820c <bt_id_create+0xcc>)
   181d0:	79de      	ldrb	r6, [r3, #7]
   181d2:	1c72      	adds	r2, r6, #1
   181d4:	71da      	strb	r2, [r3, #7]
	err = id_create(new_id, addr, irk);
   181d6:	4622      	mov	r2, r4
   181d8:	4629      	mov	r1, r5
   181da:	4630      	mov	r0, r6
   181dc:	f7ff ff78 	bl	180d0 <id_create>
	if (err) {
   181e0:	b900      	cbnz	r0, 181e4 <bt_id_create+0xa4>
		return err;
	}

	return new_id;
   181e2:	4630      	mov	r0, r6
}
   181e4:	b004      	add	sp, #16
   181e6:	bd70      	pop	{r4, r5, r6, pc}
			return -EALREADY;
   181e8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   181ec:	e7fa      	b.n	181e4 <bt_id_create+0xa4>
			return -EINVAL;
   181ee:	f06f 0015 	mvn.w	r0, #21
   181f2:	e7f7      	b.n	181e4 <bt_id_create+0xa4>
		return -EINVAL;
   181f4:	f06f 0015 	mvn.w	r0, #21
   181f8:	e7f4      	b.n	181e4 <bt_id_create+0xa4>
		return -ENOMEM;
   181fa:	f06f 000b 	mvn.w	r0, #11
   181fe:	e7f1      	b.n	181e4 <bt_id_create+0xa4>
   18200:	0002c638 	.word	0x0002c638
   18204:	0002c610 	.word	0x0002c610
   18208:	0002dfdc 	.word	0x0002dfdc
   1820c:	200002a0 	.word	0x200002a0
   18210:	2000036c 	.word	0x2000036c

00018214 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18214:	b530      	push	{r4, r5, lr}
   18216:	b087      	sub	sp, #28
   18218:	4605      	mov	r5, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1821a:	aa01      	add	r2, sp, #4
   1821c:	2100      	movs	r1, #0
   1821e:	f241 0009 	movw	r0, #4105	; 0x1009
   18222:	f7fe fdfb 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   18226:	b9f0      	cbnz	r0, 18266 <bt_id_read_public_addr+0x52>
		BT_WARN("Failed to read public address");
		return 0U;
	}

	rp = (void *)rsp->data;
   18228:	9b01      	ldr	r3, [sp, #4]
   1822a:	689c      	ldr	r4, [r3, #8]

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   1822c:	3401      	adds	r4, #1
   1822e:	2300      	movs	r3, #0
   18230:	9302      	str	r3, [sp, #8]
   18232:	f8ad 300c 	strh.w	r3, [sp, #12]
	return memcmp(a, b, sizeof(*a));
   18236:	2206      	movs	r2, #6
   18238:	a902      	add	r1, sp, #8
   1823a:	4620      	mov	r0, r4
   1823c:	f00f fcdb 	bl	27bf6 <memcmp>
   18240:	b158      	cbz	r0, 1825a <bt_id_read_public_addr+0x46>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   18242:	4b18      	ldr	r3, [pc, #96]	; (182a4 <bt_id_read_public_addr+0x90>)
   18244:	e893 0003 	ldmia.w	r3, {r0, r1}
   18248:	9004      	str	r0, [sp, #16]
   1824a:	f8ad 1014 	strh.w	r1, [sp, #20]
   1824e:	2206      	movs	r2, #6
   18250:	a904      	add	r1, sp, #16
   18252:	4620      	mov	r0, r4
   18254:	f00f fccf 	bl	27bf6 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18258:	b9b8      	cbnz	r0, 1828a <bt_id_read_public_addr+0x76>
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
   1825a:	9801      	ldr	r0, [sp, #4]
   1825c:	f011 ff8c 	bl	2a178 <net_buf_unref>
		return 0U;
   18260:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18262:	b007      	add	sp, #28
   18264:	bd30      	pop	{r4, r5, pc}
   18266:	4b10      	ldr	r3, [pc, #64]	; (182a8 <bt_id_read_public_addr+0x94>)
   18268:	4a10      	ldr	r2, [pc, #64]	; (182ac <bt_id_read_public_addr+0x98>)
   1826a:	1a9b      	subs	r3, r3, r2
   1826c:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read public address");
   1826e:	f04f 0100 	mov.w	r1, #0
   18272:	2202      	movs	r2, #2
   18274:	f362 0102 	bfi	r1, r2, #0, #3
   18278:	f36f 01c5 	bfc	r1, #3, #3
   1827c:	f363 118f 	bfi	r1, r3, #6, #10
   18280:	480b      	ldr	r0, [pc, #44]	; (182b0 <bt_id_read_public_addr+0x9c>)
   18282:	f7f9 fed3 	bl	1202c <log_0>
		return 0U;
   18286:	2000      	movs	r0, #0
   18288:	e7eb      	b.n	18262 <bt_id_read_public_addr+0x4e>
	memcpy(dst, src, sizeof(*dst));
   1828a:	2206      	movs	r2, #6
   1828c:	4621      	mov	r1, r4
   1828e:	1c68      	adds	r0, r5, #1
   18290:	f00f fcde 	bl	27c50 <memcpy>
	addr->type = BT_ADDR_LE_PUBLIC;
   18294:	2300      	movs	r3, #0
   18296:	702b      	strb	r3, [r5, #0]
	net_buf_unref(rsp);
   18298:	9801      	ldr	r0, [sp, #4]
   1829a:	f011 ff6d 	bl	2a178 <net_buf_unref>
	return 1U;
   1829e:	2001      	movs	r0, #1
   182a0:	e7df      	b.n	18262 <bt_id_read_public_addr+0x4e>
   182a2:	bf00      	nop
   182a4:	0002c82c 	.word	0x0002c82c
   182a8:	0002c638 	.word	0x0002c638
   182ac:	0002c610 	.word	0x0002c610
   182b0:	0002e00c 	.word	0x0002e00c

000182b4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   182b4:	b500      	push	{lr}
   182b6:	b083      	sub	sp, #12
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   182b8:	4668      	mov	r0, sp
   182ba:	f7ff ffab 	bl	18214 <bt_id_read_public_addr>
   182be:	4b06      	ldr	r3, [pc, #24]	; (182d8 <bt_setup_public_id_addr+0x24>)
   182c0:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   182c2:	b918      	cbnz	r0, 182cc <bt_setup_public_id_addr+0x18>
		return 0;
   182c4:	2000      	movs	r0, #0
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
}
   182c6:	b003      	add	sp, #12
   182c8:	f85d fb04 	ldr.w	pc, [sp], #4
	return id_create(BT_ID_DEFAULT, &addr, irk);
   182cc:	2200      	movs	r2, #0
   182ce:	4669      	mov	r1, sp
   182d0:	4610      	mov	r0, r2
   182d2:	f7ff fefd 	bl	180d0 <id_create>
   182d6:	e7f6      	b.n	182c6 <bt_setup_public_id_addr+0x12>
   182d8:	200002a0 	.word	0x200002a0

000182dc <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   182dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   182e0:	b082      	sub	sp, #8
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   182e2:	4b2e      	ldr	r3, [pc, #184]	; (1839c <bt_read_static_addr+0xc0>)
   182e4:	f893 50ba 	ldrb.w	r5, [r3, #186]	; 0xba
   182e8:	f015 0501 	ands.w	r5, r5, #1
   182ec:	d010      	beq.n	18310 <bt_read_static_addr+0x34>
   182ee:	4607      	mov	r7, r0
   182f0:	4688      	mov	r8, r1
		BT_WARN("Read Static Addresses command not available");
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   182f2:	aa01      	add	r2, sp, #4
   182f4:	2100      	movs	r1, #0
   182f6:	f64f 4009 	movw	r0, #64521	; 0xfc09
   182fa:	f7fe fd8f 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   182fe:	4604      	mov	r4, r0
   18300:	b9b8      	cbnz	r0, 18332 <bt_read_static_addr+0x56>
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	rp = (void *)rsp->data;
   18302:	9b01      	ldr	r3, [sp, #4]
   18304:	689e      	ldr	r6, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   18306:	7875      	ldrb	r5, [r6, #1]
   18308:	4545      	cmp	r5, r8
   1830a:	bf28      	it	cs
   1830c:	4645      	movcs	r5, r8
		BT_WARN("Invalid Vendor HCI extensions");
		net_buf_unref(rsp);
		return 0;
	}

	for (i = 0; i < cnt; i++) {
   1830e:	e029      	b.n	18364 <bt_read_static_addr+0x88>
   18310:	4b23      	ldr	r3, [pc, #140]	; (183a0 <bt_read_static_addr+0xc4>)
   18312:	4a24      	ldr	r2, [pc, #144]	; (183a4 <bt_read_static_addr+0xc8>)
   18314:	1a9b      	subs	r3, r3, r2
   18316:	08db      	lsrs	r3, r3, #3
		BT_WARN("Read Static Addresses command not available");
   18318:	f04f 0100 	mov.w	r1, #0
   1831c:	2202      	movs	r2, #2
   1831e:	f362 0102 	bfi	r1, r2, #0, #3
   18322:	f36f 01c5 	bfc	r1, #3, #3
   18326:	f363 118f 	bfi	r1, r3, #6, #10
   1832a:	481f      	ldr	r0, [pc, #124]	; (183a8 <bt_read_static_addr+0xcc>)
   1832c:	f7f9 fe7e 	bl	1202c <log_0>
		return 0;
   18330:	e01e      	b.n	18370 <bt_read_static_addr+0x94>
   18332:	4b1b      	ldr	r3, [pc, #108]	; (183a0 <bt_read_static_addr+0xc4>)
   18334:	4a1b      	ldr	r2, [pc, #108]	; (183a4 <bt_read_static_addr+0xc8>)
   18336:	1a9b      	subs	r3, r3, r2
   18338:	08db      	lsrs	r3, r3, #3
		BT_WARN("Failed to read static addresses");
   1833a:	f04f 0100 	mov.w	r1, #0
   1833e:	2202      	movs	r2, #2
   18340:	f362 0102 	bfi	r1, r2, #0, #3
   18344:	f36f 01c5 	bfc	r1, #3, #3
   18348:	f363 118f 	bfi	r1, r3, #6, #10
   1834c:	4817      	ldr	r0, [pc, #92]	; (183ac <bt_read_static_addr+0xd0>)
   1834e:	f7f9 fe6d 	bl	1202c <log_0>
		return 0;
   18352:	2500      	movs	r5, #0
   18354:	e00c      	b.n	18370 <bt_read_static_addr+0x94>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   18356:	2216      	movs	r2, #22
   18358:	1cb1      	adds	r1, r6, #2
   1835a:	fb02 7004 	mla	r0, r2, r4, r7
   1835e:	f00f fc77 	bl	27c50 <memcpy>
	for (i = 0; i < cnt; i++) {
   18362:	3401      	adds	r4, #1
   18364:	42a5      	cmp	r5, r4
   18366:	dcf6      	bgt.n	18356 <bt_read_static_addr+0x7a>
	}

	net_buf_unref(rsp);
   18368:	9801      	ldr	r0, [sp, #4]
   1836a:	f011 ff05 	bl	2a178 <net_buf_unref>
	if (!cnt) {
   1836e:	b11d      	cbz	r5, 18378 <bt_read_static_addr+0x9c>
		BT_WARN("No static addresses stored in controller");
	}

	return cnt;
}
   18370:	4628      	mov	r0, r5
   18372:	b002      	add	sp, #8
   18374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18378:	4b09      	ldr	r3, [pc, #36]	; (183a0 <bt_read_static_addr+0xc4>)
   1837a:	4a0a      	ldr	r2, [pc, #40]	; (183a4 <bt_read_static_addr+0xc8>)
   1837c:	1a9b      	subs	r3, r3, r2
   1837e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No static addresses stored in controller");
   18380:	f04f 0100 	mov.w	r1, #0
   18384:	2202      	movs	r2, #2
   18386:	f362 0102 	bfi	r1, r2, #0, #3
   1838a:	f36f 01c5 	bfc	r1, #3, #3
   1838e:	f363 118f 	bfi	r1, r3, #6, #10
   18392:	4807      	ldr	r0, [pc, #28]	; (183b0 <bt_read_static_addr+0xd4>)
   18394:	f7f9 fe4a 	bl	1202c <log_0>
   18398:	e7ea      	b.n	18370 <bt_read_static_addr+0x94>
   1839a:	bf00      	nop
   1839c:	200002a0 	.word	0x200002a0
   183a0:	0002c638 	.word	0x0002c638
   183a4:	0002c610 	.word	0x0002c610
   183a8:	0002e02c 	.word	0x0002e02c
   183ac:	0002e058 	.word	0x0002e058
   183b0:	0002e078 	.word	0x0002e078

000183b4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   183b4:	b510      	push	{r4, lr}
   183b6:	b088      	sub	sp, #32
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   183b8:	4b17      	ldr	r3, [pc, #92]	; (18418 <bt_setup_random_id_addr+0x64>)
   183ba:	79dc      	ldrb	r4, [r3, #7]
   183bc:	b934      	cbnz	r4, 183cc <bt_setup_random_id_addr+0x18>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   183be:	2101      	movs	r1, #1
   183c0:	a802      	add	r0, sp, #8
   183c2:	f7ff ff8b 	bl	182dc <bt_read_static_addr>
   183c6:	4b14      	ldr	r3, [pc, #80]	; (18418 <bt_setup_random_id_addr+0x64>)
   183c8:	71d8      	strb	r0, [r3, #7]

		if (bt_dev.id_count) {
   183ca:	b938      	cbnz	r0, 183dc <bt_setup_random_id_addr+0x28>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   183cc:	2100      	movs	r1, #0
   183ce:	4608      	mov	r0, r1
   183d0:	f7ff feb6 	bl	18140 <bt_id_create>
   183d4:	4603      	mov	r3, r0
}
   183d6:	4618      	mov	r0, r3
   183d8:	b008      	add	sp, #32
   183da:	bd10      	pop	{r4, pc}
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   183dc:	4b0e      	ldr	r3, [pc, #56]	; (18418 <bt_setup_random_id_addr+0x64>)
   183de:	79db      	ldrb	r3, [r3, #7]
   183e0:	42a3      	cmp	r3, r4
   183e2:	d916      	bls.n	18412 <bt_setup_random_id_addr+0x5e>
   183e4:	2206      	movs	r2, #6
   183e6:	2116      	movs	r1, #22
   183e8:	ab02      	add	r3, sp, #8
   183ea:	fb01 3104 	mla	r1, r1, r4, r3
   183ee:	f10d 0001 	add.w	r0, sp, #1
   183f2:	f00f fc2d 	bl	27c50 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   183f6:	2301      	movs	r3, #1
   183f8:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   183fc:	2200      	movs	r2, #0
   183fe:	4669      	mov	r1, sp
   18400:	4620      	mov	r0, r4
   18402:	f7ff fe65 	bl	180d0 <id_create>
				if (err) {
   18406:	4603      	mov	r3, r0
   18408:	2800      	cmp	r0, #0
   1840a:	d1e4      	bne.n	183d6 <bt_setup_random_id_addr+0x22>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1840c:	3401      	adds	r4, #1
   1840e:	b2e4      	uxtb	r4, r4
   18410:	e7e4      	b.n	183dc <bt_setup_random_id_addr+0x28>
			return 0;
   18412:	2300      	movs	r3, #0
   18414:	e7df      	b.n	183d6 <bt_setup_random_id_addr+0x22>
   18416:	bf00      	nop
   18418:	200002a0 	.word	0x200002a0

0001841c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   1841c:	b510      	push	{r4, lr}
   1841e:	460c      	mov	r4, r1

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   18420:	4b07      	ldr	r3, [pc, #28]	; (18440 <bt_id_set_create_conn_own_addr+0x24>)
   18422:	781b      	ldrb	r3, [r3, #0]
   18424:	2b01      	cmp	r3, #1
   18426:	d004      	beq.n	18432 <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   18428:	4b05      	ldr	r3, [pc, #20]	; (18440 <bt_id_set_create_conn_own_addr+0x24>)
   1842a:	781b      	ldrb	r3, [r3, #0]
   1842c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1842e:	2000      	movs	r0, #0
}
   18430:	bd10      	pop	{r4, pc}
			err = set_random_address(&addr->a);
   18432:	4804      	ldr	r0, [pc, #16]	; (18444 <bt_id_set_create_conn_own_addr+0x28>)
   18434:	f7ff fe1e 	bl	18074 <set_random_address>
			if (err) {
   18438:	2800      	cmp	r0, #0
   1843a:	d0f5      	beq.n	18428 <bt_id_set_create_conn_own_addr+0xc>
   1843c:	e7f8      	b.n	18430 <bt_id_set_create_conn_own_addr+0x14>
   1843e:	bf00      	nop
   18440:	200002a0 	.word	0x200002a0
   18444:	200002a1 	.word	0x200002a1

00018448 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   18448:	b510      	push	{r4, lr}
   1844a:	460c      	mov	r4, r1
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1844c:	4b07      	ldr	r3, [pc, #28]	; (1846c <bt_id_set_scan_own_addr+0x24>)
   1844e:	781b      	ldrb	r3, [r3, #0]
   18450:	700b      	strb	r3, [r1, #0]
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
   18452:	f00f fe21 	bl	28098 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
   18456:	b108      	cbz	r0, 1845c <bt_id_set_scan_own_addr+0x14>
				return err;
			}
		}
	}

	return 0;
   18458:	2000      	movs	r0, #0
}
   1845a:	bd10      	pop	{r4, pc}
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1845c:	f00f fe20 	bl	280a0 <bt_id_set_private_addr>
			if (err) {
   18460:	2800      	cmp	r0, #0
   18462:	d1fa      	bne.n	1845a <bt_id_set_scan_own_addr+0x12>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   18464:	2301      	movs	r3, #1
   18466:	7023      	strb	r3, [r4, #0]
   18468:	e7f7      	b.n	1845a <bt_id_set_scan_own_addr+0x12>
   1846a:	bf00      	nop
   1846c:	200002a0 	.word	0x200002a0

00018470 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   18470:	b510      	push	{r4, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18472:	4b25      	ldr	r3, [pc, #148]	; (18508 <bt_id_init+0x98>)
   18474:	79db      	ldrb	r3, [r3, #7]
   18476:	b12b      	cbz	r3, 18484 <bt_id_init+0x14>
			BT_ERR("Unable to set identity address");
			return err;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18478:	4b23      	ldr	r3, [pc, #140]	; (18508 <bt_id_init+0x98>)
   1847a:	79db      	ldrb	r3, [r3, #7]
   1847c:	b1c3      	cbz	r3, 184b0 <bt_id_init+0x40>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1847e:	2400      	movs	r4, #0
}
   18480:	4620      	mov	r0, r4
   18482:	bd10      	pop	{r4, pc}
		err = bt_setup_public_id_addr();
   18484:	f7ff ff16 	bl	182b4 <bt_setup_public_id_addr>
		if (err) {
   18488:	4604      	mov	r4, r0
   1848a:	2800      	cmp	r0, #0
   1848c:	d0f4      	beq.n	18478 <bt_id_init+0x8>
   1848e:	4b1f      	ldr	r3, [pc, #124]	; (1850c <bt_id_init+0x9c>)
   18490:	4a1f      	ldr	r2, [pc, #124]	; (18510 <bt_id_init+0xa0>)
   18492:	1a9b      	subs	r3, r3, r2
   18494:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   18496:	f04f 0100 	mov.w	r1, #0
   1849a:	2201      	movs	r2, #1
   1849c:	f362 0102 	bfi	r1, r2, #0, #3
   184a0:	f36f 01c5 	bfc	r1, #3, #3
   184a4:	f363 118f 	bfi	r1, r3, #6, #10
   184a8:	481a      	ldr	r0, [pc, #104]	; (18514 <bt_id_init+0xa4>)
   184aa:	f7f9 fdbf 	bl	1202c <log_0>
			return err;
   184ae:	e7e7      	b.n	18480 <bt_id_init+0x10>
		err = bt_setup_random_id_addr();
   184b0:	f7ff ff80 	bl	183b4 <bt_setup_random_id_addr>
		if (err) {
   184b4:	4604      	mov	r4, r0
   184b6:	b9b0      	cbnz	r0, 184e6 <bt_id_init+0x76>
		err = set_random_address(&bt_dev.id_addr[0].a);
   184b8:	4817      	ldr	r0, [pc, #92]	; (18518 <bt_id_init+0xa8>)
   184ba:	f7ff fddb 	bl	18074 <set_random_address>
		if (err) {
   184be:	4604      	mov	r4, r0
   184c0:	2800      	cmp	r0, #0
   184c2:	d0dd      	beq.n	18480 <bt_id_init+0x10>
   184c4:	4b11      	ldr	r3, [pc, #68]	; (1850c <bt_id_init+0x9c>)
   184c6:	4a12      	ldr	r2, [pc, #72]	; (18510 <bt_id_init+0xa0>)
   184c8:	1a9b      	subs	r3, r3, r2
   184ca:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set random address");
   184cc:	f04f 0100 	mov.w	r1, #0
   184d0:	2201      	movs	r2, #1
   184d2:	f362 0102 	bfi	r1, r2, #0, #3
   184d6:	f36f 01c5 	bfc	r1, #3, #3
   184da:	f363 118f 	bfi	r1, r3, #6, #10
   184de:	480f      	ldr	r0, [pc, #60]	; (1851c <bt_id_init+0xac>)
   184e0:	f7f9 fda4 	bl	1202c <log_0>
			return err;
   184e4:	e7cc      	b.n	18480 <bt_id_init+0x10>
   184e6:	4b09      	ldr	r3, [pc, #36]	; (1850c <bt_id_init+0x9c>)
   184e8:	4a09      	ldr	r2, [pc, #36]	; (18510 <bt_id_init+0xa0>)
   184ea:	1a9b      	subs	r3, r3, r2
   184ec:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to set identity address");
   184ee:	f04f 0100 	mov.w	r1, #0
   184f2:	2201      	movs	r2, #1
   184f4:	f362 0102 	bfi	r1, r2, #0, #3
   184f8:	f36f 01c5 	bfc	r1, #3, #3
   184fc:	f363 118f 	bfi	r1, r3, #6, #10
   18500:	4804      	ldr	r0, [pc, #16]	; (18514 <bt_id_init+0xa4>)
   18502:	f7f9 fd93 	bl	1202c <log_0>
			return err;
   18506:	e7bb      	b.n	18480 <bt_id_init+0x10>
   18508:	200002a0 	.word	0x200002a0
   1850c:	0002c638 	.word	0x0002c638
   18510:	0002c610 	.word	0x0002c610
   18514:	0002e0a4 	.word	0x0002e0a4
   18518:	200002a1 	.word	0x200002a1
   1851c:	0002e0c4 	.word	0x0002e0c4

00018520 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   18520:	b530      	push	{r4, r5, lr}
   18522:	b087      	sub	sp, #28
   18524:	4604      	mov	r4, r0
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   18526:	2102      	movs	r1, #2
   18528:	f242 000c 	movw	r0, #8204	; 0x200c
   1852c:	f7fe fc3a 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   18530:	b330      	cbz	r0, 18580 <bt_le_scan_set_enable_legacy+0x60>
   18532:	4605      	mov	r5, r0
	return net_buf_simple_add(&buf->b, len);
   18534:	2102      	movs	r1, #2
   18536:	3008      	adds	r0, #8
   18538:	f011 fe68 	bl	2a20c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   1853c:	2c01      	cmp	r4, #1
   1853e:	d015      	beq.n	1856c <bt_le_scan_set_enable_legacy+0x4c>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
						 BT_DEV_SCAN_FILTER_DUP);
	} else {
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   18540:	2300      	movs	r3, #0
   18542:	7043      	strb	r3, [r0, #1]
	}

	cp->enable = enable;
   18544:	7004      	strb	r4, [r0, #0]

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   18546:	2c01      	cmp	r4, #1
   18548:	bf14      	ite	ne
   1854a:	2400      	movne	r4, #0
   1854c:	2401      	moveq	r4, #1
   1854e:	9400      	str	r4, [sp, #0]
   18550:	2305      	movs	r3, #5
   18552:	4a0d      	ldr	r2, [pc, #52]	; (18588 <bt_le_scan_set_enable_legacy+0x68>)
   18554:	a903      	add	r1, sp, #12
   18556:	4628      	mov	r0, r5
   18558:	f7fe fc12 	bl	16d80 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1855c:	2200      	movs	r2, #0
   1855e:	4629      	mov	r1, r5
   18560:	f242 000c 	movw	r0, #8204	; 0x200c
   18564:	f7fe fc5a 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   18568:	b007      	add	sp, #28
   1856a:	bd30      	pop	{r4, r5, pc}
   1856c:	f3bf 8f5b 	dmb	ish
   18570:	4b05      	ldr	r3, [pc, #20]	; (18588 <bt_le_scan_set_enable_legacy+0x68>)
   18572:	681b      	ldr	r3, [r3, #0]
   18574:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   18578:	f3c3 2300 	ubfx	r3, r3, #8, #1
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   1857c:	7043      	strb	r3, [r0, #1]
   1857e:	e7e1      	b.n	18544 <bt_le_scan_set_enable_legacy+0x24>
		return -ENOBUFS;
   18580:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18584:	e7f0      	b.n	18568 <bt_le_scan_set_enable_legacy+0x48>
   18586:	bf00      	nop
   18588:	2000036c 	.word	0x2000036c

0001858c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1858c:	4b01      	ldr	r3, [pc, #4]	; (18594 <bt_scan_reset+0x8>)
   1858e:	2200      	movs	r2, #0
   18590:	601a      	str	r2, [r3, #0]
}
   18592:	4770      	bx	lr
   18594:	20002be0 	.word	0x20002be0

00018598 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   18598:	b570      	push	{r4, r5, r6, lr}
   1859a:	b082      	sub	sp, #8
   1859c:	4604      	mov	r4, r0
   1859e:	460e      	mov	r6, r1
   185a0:	4615      	mov	r5, r2
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   185a2:	2207      	movs	r2, #7
   185a4:	2100      	movs	r1, #0
   185a6:	4668      	mov	r0, sp
   185a8:	f00f fb76 	bl	27c98 <memset>

	set_param.scan_type = scan_type;
   185ac:	f88d 4000 	strb.w	r4, [sp]

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
   185b0:	f8ad 6001 	strh.w	r6, [sp, #1]
	set_param.window = sys_cpu_to_le16(window);
   185b4:	f8ad 5003 	strh.w	r5, [sp, #3]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   185b8:	2300      	movs	r3, #0
   185ba:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
   185be:	2c01      	cmp	r4, #1
   185c0:	bf14      	ite	ne
   185c2:	2400      	movne	r4, #0
   185c4:	2401      	moveq	r4, #1
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   185c6:	f10d 0105 	add.w	r1, sp, #5
   185ca:	4620      	mov	r0, r4
   185cc:	f7ff ff3c 	bl	18448 <bt_id_set_scan_own_addr>
	if (err) {
   185d0:	b108      	cbz	r0, 185d6 <start_le_scan_legacy+0x3e>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   185d2:	b002      	add	sp, #8
   185d4:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   185d6:	2107      	movs	r1, #7
   185d8:	f242 000b 	movw	r0, #8203	; 0x200b
   185dc:	f7fe fbe2 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   185e0:	4605      	mov	r5, r0
   185e2:	b370      	cbz	r0, 18642 <start_le_scan_legacy+0xaa>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   185e4:	2207      	movs	r2, #7
   185e6:	4669      	mov	r1, sp
   185e8:	3008      	adds	r0, #8
   185ea:	f011 fe15 	bl	2a218 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   185ee:	2200      	movs	r2, #0
   185f0:	4629      	mov	r1, r5
   185f2:	f242 000b 	movw	r0, #8203	; 0x200b
   185f6:	f7fe fc11 	bl	16e1c <bt_hci_cmd_send_sync>
	if (err) {
   185fa:	2800      	cmp	r0, #0
   185fc:	d1e9      	bne.n	185d2 <start_le_scan_legacy+0x3a>
	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
   185fe:	2001      	movs	r0, #1
   18600:	f00f fd98 	bl	28134 <bt_le_scan_set_enable>
	if (err) {
   18604:	2800      	cmp	r0, #0
   18606:	d1e4      	bne.n	185d2 <start_le_scan_legacy+0x3a>
	if (val) {
   18608:	b16c      	cbz	r4, 18626 <start_le_scan_legacy+0x8e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1860a:	4b0f      	ldr	r3, [pc, #60]	; (18648 <start_le_scan_legacy+0xb0>)
   1860c:	f3bf 8f5b 	dmb	ish
   18610:	e853 2f00 	ldrex	r2, [r3]
   18614:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18618:	e843 2100 	strex	r1, r2, [r3]
   1861c:	2900      	cmp	r1, #0
   1861e:	d1f7      	bne.n	18610 <start_le_scan_legacy+0x78>
   18620:	f3bf 8f5b 	dmb	ish
   18624:	e7d5      	b.n	185d2 <start_le_scan_legacy+0x3a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18626:	4b08      	ldr	r3, [pc, #32]	; (18648 <start_le_scan_legacy+0xb0>)
   18628:	f3bf 8f5b 	dmb	ish
   1862c:	e853 2f00 	ldrex	r2, [r3]
   18630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   18634:	e843 2100 	strex	r1, r2, [r3]
   18638:	2900      	cmp	r1, #0
   1863a:	d1f7      	bne.n	1862c <start_le_scan_legacy+0x94>
   1863c:	f3bf 8f5b 	dmb	ish
}
   18640:	e7c7      	b.n	185d2 <start_le_scan_legacy+0x3a>
		return -ENOBUFS;
   18642:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18646:	e7c4      	b.n	185d2 <start_le_scan_legacy+0x3a>
   18648:	2000036c 	.word	0x2000036c

0001864c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1864c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1864e:	f3bf 8f5b 	dmb	ish
   18652:	4b21      	ldr	r3, [pc, #132]	; (186d8 <bt_le_scan_update+0x8c>)
   18654:	681b      	ldr	r3, [r3, #0]
   18656:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1865a:	f3c3 1480 	ubfx	r4, r3, #6, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1865e:	f013 0f40 	tst.w	r3, #64	; 0x40
   18662:	d002      	beq.n	1866a <bt_le_scan_update+0x1e>
		return 0;
   18664:	2400      	movs	r4, #0
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   18666:	4620      	mov	r0, r4
   18668:	bd38      	pop	{r3, r4, r5, pc}
   1866a:	4605      	mov	r5, r0
   1866c:	f3bf 8f5b 	dmb	ish
   18670:	4b19      	ldr	r3, [pc, #100]	; (186d8 <bt_le_scan_update+0x8c>)
   18672:	681b      	ldr	r3, [r3, #0]
   18674:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   18678:	f013 0f20 	tst.w	r3, #32
   1867c:	d003      	beq.n	18686 <bt_le_scan_update+0x3a>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   1867e:	2000      	movs	r0, #0
   18680:	f00f fd58 	bl	28134 <bt_le_scan_set_enable>
		if (err) {
   18684:	bb28      	cbnz	r0, 186d2 <bt_le_scan_update+0x86>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   18686:	2206      	movs	r2, #6
   18688:	2100      	movs	r1, #0
   1868a:	4608      	mov	r0, r1
   1868c:	f000 ff2a 	bl	194e4 <bt_conn_lookup_state_le>
		if (conn) {
   18690:	b110      	cbz	r0, 18698 <bt_le_scan_update+0x4c>
			bt_conn_unref(conn);
   18692:	f00f fe8a 	bl	283aa <bt_conn_unref>
			return 0;
   18696:	e7e6      	b.n	18666 <bt_le_scan_update+0x1a>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   18698:	2202      	movs	r2, #2
   1869a:	2100      	movs	r1, #0
   1869c:	4608      	mov	r0, r1
   1869e:	f000 ff21 	bl	194e4 <bt_conn_lookup_state_le>
		if (conn) {
   186a2:	4603      	mov	r3, r0
   186a4:	2800      	cmp	r0, #0
   186a6:	d0de      	beq.n	18666 <bt_le_scan_update+0x1a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   186a8:	4a0b      	ldr	r2, [pc, #44]	; (186d8 <bt_le_scan_update+0x8c>)
   186aa:	f3bf 8f5b 	dmb	ish
   186ae:	e852 1f00 	ldrex	r1, [r2]
   186b2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
   186b6:	e842 1000 	strex	r0, r1, [r2]
   186ba:	2800      	cmp	r0, #0
   186bc:	d1f7      	bne.n	186ae <bt_le_scan_update+0x62>
   186be:	f3bf 8f5b 	dmb	ish
			bt_conn_unref(conn);
   186c2:	4618      	mov	r0, r3
   186c4:	f00f fe71 	bl	283aa <bt_conn_unref>
			return start_passive_scan(fast_scan);
   186c8:	4628      	mov	r0, r5
   186ca:	f00f fd37 	bl	2813c <start_passive_scan>
   186ce:	4604      	mov	r4, r0
   186d0:	e7c9      	b.n	18666 <bt_le_scan_update+0x1a>
			return err;
   186d2:	4604      	mov	r4, r0
   186d4:	e7c7      	b.n	18666 <bt_le_scan_update+0x1a>
   186d6:	bf00      	nop
   186d8:	2000036c 	.word	0x2000036c

000186dc <check_pending_conn>:

#if defined(CONFIG_BT_CENTRAL)
static void check_pending_conn(const bt_addr_le_t *id_addr,
			       const bt_addr_le_t *addr, uint8_t adv_props)
{
   186dc:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   186de:	f3bf 8f5b 	dmb	ish
   186e2:	4b20      	ldr	r3, [pc, #128]	; (18764 <check_pending_conn+0x88>)
   186e4:	681b      	ldr	r3, [r3, #0]
   186e6:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;

	/* No connections are allowed during explicit scanning */
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   186ea:	f013 0f40 	tst.w	r3, #64	; 0x40
   186ee:	d103      	bne.n	186f8 <check_pending_conn+0x1c>
   186f0:	460c      	mov	r4, r1
		return;
	}

	/* Return if event is not connectable */
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   186f2:	f012 0f01 	tst.w	r2, #1
   186f6:	d100      	bne.n	186fa <check_pending_conn+0x1e>
failed:
	conn->err = BT_HCI_ERR_UNSPECIFIED;
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
	bt_conn_unref(conn);
	bt_le_scan_update(false);
}
   186f8:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   186fa:	2202      	movs	r2, #2
   186fc:	4601      	mov	r1, r0
   186fe:	2000      	movs	r0, #0
   18700:	f000 fef0 	bl	194e4 <bt_conn_lookup_state_le>
	if (!conn) {
   18704:	4605      	mov	r5, r0
   18706:	2800      	cmp	r0, #0
   18708:	d0f6      	beq.n	186f8 <check_pending_conn+0x1c>
   1870a:	f3bf 8f5b 	dmb	ish
   1870e:	4b15      	ldr	r3, [pc, #84]	; (18764 <check_pending_conn+0x88>)
   18710:	681b      	ldr	r3, [r3, #0]
   18712:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   18716:	f013 0f20 	tst.w	r3, #32
   1871a:	d003      	beq.n	18724 <check_pending_conn+0x48>
	    bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE)) {
   1871c:	2000      	movs	r0, #0
   1871e:	f00f fd09 	bl	28134 <bt_le_scan_set_enable>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   18722:	b948      	cbnz	r0, 18738 <check_pending_conn+0x5c>
	memcpy(dst, src, sizeof(*dst));
   18724:	2207      	movs	r2, #7
   18726:	4621      	mov	r1, r4
   18728:	f105 0096 	add.w	r0, r5, #150	; 0x96
   1872c:	f00f fa90 	bl	27c50 <memcpy>
	if (bt_le_create_conn(conn)) {
   18730:	4628      	mov	r0, r5
   18732:	f00f fb98 	bl	27e66 <bt_le_create_conn>
   18736:	b160      	cbz	r0, 18752 <check_pending_conn+0x76>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   18738:	231f      	movs	r3, #31
   1873a:	726b      	strb	r3, [r5, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1873c:	2100      	movs	r1, #0
   1873e:	4628      	mov	r0, r5
   18740:	f000 fc6e 	bl	19020 <bt_conn_set_state>
	bt_conn_unref(conn);
   18744:	4628      	mov	r0, r5
   18746:	f00f fe30 	bl	283aa <bt_conn_unref>
	bt_le_scan_update(false);
   1874a:	2000      	movs	r0, #0
   1874c:	f7ff ff7e 	bl	1864c <bt_le_scan_update>
   18750:	e7d2      	b.n	186f8 <check_pending_conn+0x1c>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   18752:	2106      	movs	r1, #6
   18754:	4628      	mov	r0, r5
   18756:	f000 fc63 	bl	19020 <bt_conn_set_state>
	bt_conn_unref(conn);
   1875a:	4628      	mov	r0, r5
   1875c:	f00f fe25 	bl	283aa <bt_conn_unref>
	return;
   18760:	e7ca      	b.n	186f8 <check_pending_conn+0x1c>
   18762:	bf00      	nop
   18764:	2000036c 	.word	0x2000036c

00018768 <le_adv_recv>:
	}
}

static void le_adv_recv(bt_addr_le_t *addr, struct bt_le_scan_recv_info *info,
			struct net_buf *buf, uint8_t len)
{
   18768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1876c:	b087      	sub	sp, #28
   1876e:	9001      	str	r0, [sp, #4]
   18770:	4689      	mov	r9, r1
   18772:	4616      	mov	r6, r2
   18774:	469b      	mov	fp, r3
   18776:	f3bf 8f5b 	dmb	ish
   1877a:	4b45      	ldr	r3, [pc, #276]	; (18890 <le_adv_recv+0x128>)
   1877c:	681b      	ldr	r3, [r3, #0]
   1877e:	f3bf 8f5b 	dmb	ish
	bt_addr_le_t id_addr;

	BT_DBG("%s event %u, len %u, rssi %d dBm", bt_addr_le_str(addr),
	       info->adv_type, len, info->rssi);

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   18782:	f013 0f40 	tst.w	r3, #64	; 0x40
   18786:	d003      	beq.n	18790 <le_adv_recv+0x28>
	    !IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
	    (info->adv_props & BT_HCI_LE_ADV_PROP_DIRECT)) {
   18788:	890b      	ldrh	r3, [r1, #8]
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1878a:	f013 0f04 	tst.w	r3, #4
   1878e:	d17b      	bne.n	18888 <le_adv_recv+0x120>
		BT_DBG("Dropped direct adv report");
		return;
	}

	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   18790:	9b01      	ldr	r3, [sp, #4]
   18792:	781a      	ldrb	r2, [r3, #0]
   18794:	1e93      	subs	r3, r2, #2
   18796:	b2db      	uxtb	r3, r3
   18798:	2b01      	cmp	r3, #1
   1879a:	d933      	bls.n	18804 <le_adv_recv+0x9c>
	    addr->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&id_addr, addr);
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1879c:	2aff      	cmp	r2, #255	; 0xff
   1879e:	d03c      	beq.n	1881a <le_adv_recv+0xb2>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
	} else {
		bt_addr_le_copy(&id_addr,
   187a0:	9901      	ldr	r1, [sp, #4]
   187a2:	2000      	movs	r0, #0
   187a4:	f00f fc7a 	bl	2809c <bt_lookup_id_addr>
   187a8:	4601      	mov	r1, r0
   187aa:	2207      	movs	r2, #7
   187ac:	a802      	add	r0, sp, #8
   187ae:	f00f fa4f 	bl	27c50 <memcpy>
				bt_lookup_id_addr(BT_ID_DEFAULT, addr));
	}

	info->addr = &id_addr;
   187b2:	ab02      	add	r3, sp, #8
   187b4:	f8c9 3000 	str.w	r3, [r9]

	if (scan_dev_found_cb) {
   187b8:	4b36      	ldr	r3, [pc, #216]	; (18894 <le_adv_recv+0x12c>)
   187ba:	681b      	ldr	r3, [r3, #0]
   187bc:	b1b3      	cbz	r3, 187ec <le_adv_recv+0x84>
		net_buf_simple_save(&buf->b, &state);
   187be:	f106 0708 	add.w	r7, r6, #8
	state->offset = net_buf_simple_headroom(buf);
   187c2:	4638      	mov	r0, r7
   187c4:	f011 fd64 	bl	2a290 <net_buf_simple_headroom>
   187c8:	b284      	uxth	r4, r0
	state->len = buf->len;
   187ca:	89b5      	ldrh	r5, [r6, #12]

		buf->len = len;
   187cc:	f8a6 b00c 	strh.w	fp, [r6, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type,
   187d0:	4b30      	ldr	r3, [pc, #192]	; (18894 <le_adv_recv+0x12c>)
   187d2:	f8d3 8000 	ldr.w	r8, [r3]
   187d6:	463b      	mov	r3, r7
   187d8:	f899 2007 	ldrb.w	r2, [r9, #7]
   187dc:	f999 1005 	ldrsb.w	r1, [r9, #5]
   187e0:	a802      	add	r0, sp, #8
   187e2:	47c0      	blx	r8
	buf->data = buf->__buf + state->offset;
   187e4:	6933      	ldr	r3, [r6, #16]
   187e6:	4423      	add	r3, r4
   187e8:	60b3      	str	r3, [r6, #8]
	buf->len = state->len;
   187ea:	81b5      	strh	r5, [r6, #12]
	return list->head;
   187ec:	4b2a      	ldr	r3, [pc, #168]	; (18898 <le_adv_recv+0x130>)
   187ee:	681d      	ldr	r5, [r3, #0]
				  &buf->b);

		net_buf_simple_restore(&buf->b, &state);
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   187f0:	b1ed      	cbz	r5, 1882e <le_adv_recv+0xc6>
   187f2:	3d08      	subs	r5, #8
   187f4:	d01d      	beq.n	18832 <le_adv_recv+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
   187f6:	f115 0408 	adds.w	r4, r5, #8
   187fa:	d01f      	beq.n	1883c <le_adv_recv+0xd4>
	return node->next;
   187fc:	68ac      	ldr	r4, [r5, #8]
   187fe:	b1ec      	cbz	r4, 1883c <le_adv_recv+0xd4>
   18800:	3c08      	subs	r4, #8
   18802:	e01b      	b.n	1883c <le_adv_recv+0xd4>
   18804:	2207      	movs	r2, #7
   18806:	9901      	ldr	r1, [sp, #4]
   18808:	a802      	add	r0, sp, #8
   1880a:	f00f fa21 	bl	27c50 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1880e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18812:	3b02      	subs	r3, #2
   18814:	f88d 3008 	strb.w	r3, [sp, #8]
   18818:	e7cb      	b.n	187b2 <le_adv_recv+0x4a>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1881a:	2300      	movs	r3, #0
   1881c:	9304      	str	r3, [sp, #16]
   1881e:	f8cd 3013 	str.w	r3, [sp, #19]
   18822:	2207      	movs	r2, #7
   18824:	a904      	add	r1, sp, #16
   18826:	a802      	add	r0, sp, #8
   18828:	f00f fa12 	bl	27c50 <memcpy>
   1882c:	e7c1      	b.n	187b2 <le_adv_recv+0x4a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1882e:	462c      	mov	r4, r5
   18830:	e004      	b.n	1883c <le_adv_recv+0xd4>
   18832:	462c      	mov	r4, r5
   18834:	e002      	b.n	1883c <le_adv_recv+0xd4>
   18836:	4623      	mov	r3, r4
   18838:	4625      	mov	r5, r4
   1883a:	461c      	mov	r4, r3
   1883c:	b1f5      	cbz	r5, 1887c <le_adv_recv+0x114>
		if (listener->recv) {
   1883e:	682b      	ldr	r3, [r5, #0]
   18840:	b193      	cbz	r3, 18868 <le_adv_recv+0x100>
			net_buf_simple_save(&buf->b, &state);
   18842:	f106 0808 	add.w	r8, r6, #8
	state->offset = net_buf_simple_headroom(buf);
   18846:	4640      	mov	r0, r8
   18848:	f011 fd22 	bl	2a290 <net_buf_simple_headroom>
   1884c:	b287      	uxth	r7, r0
	state->len = buf->len;
   1884e:	f8b6 a00c 	ldrh.w	sl, [r6, #12]

			buf->len = len;
   18852:	f8a6 b00c 	strh.w	fp, [r6, #12]
			listener->recv(info, &buf->b);
   18856:	682b      	ldr	r3, [r5, #0]
   18858:	4641      	mov	r1, r8
   1885a:	4648      	mov	r0, r9
   1885c:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   1885e:	6930      	ldr	r0, [r6, #16]
   18860:	4438      	add	r0, r7
   18862:	60b0      	str	r0, [r6, #8]
	buf->len = state->len;
   18864:	f8a6 a00c 	strh.w	sl, [r6, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   18868:	2c00      	cmp	r4, #0
   1886a:	d0e4      	beq.n	18836 <le_adv_recv+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1886c:	f114 0308 	adds.w	r3, r4, #8
   18870:	d0e2      	beq.n	18838 <le_adv_recv+0xd0>
	return node->next;
   18872:	68a3      	ldr	r3, [r4, #8]
   18874:	2b00      	cmp	r3, #0
   18876:	d0df      	beq.n	18838 <le_adv_recv+0xd0>
   18878:	3b08      	subs	r3, #8
   1887a:	e7dd      	b.n	18838 <le_adv_recv+0xd0>
			net_buf_simple_restore(&buf->b, &state);
		}
	}

#if defined(CONFIG_BT_CENTRAL)
	check_pending_conn(&id_addr, addr, info->adv_props);
   1887c:	f899 2008 	ldrb.w	r2, [r9, #8]
   18880:	9901      	ldr	r1, [sp, #4]
   18882:	a802      	add	r0, sp, #8
   18884:	f7ff ff2a 	bl	186dc <check_pending_conn>
#endif /* CONFIG_BT_CENTRAL */
}
   18888:	b007      	add	sp, #28
   1888a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1888e:	bf00      	nop
   18890:	2000036c 	.word	0x2000036c
   18894:	20002be0 	.word	0x20002be0
   18898:	20002bd8 	.word	0x20002bd8

0001889c <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1889c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1889e:	b085      	sub	sp, #20
   188a0:	4606      	mov	r6, r0
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   188a2:	f100 0708 	add.w	r7, r0, #8
   188a6:	4638      	mov	r0, r7
   188a8:	f011 fce2 	bl	2a270 <net_buf_simple_pull_u8>
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   188ac:	1e45      	subs	r5, r0, #1
   188ae:	b2ed      	uxtb	r5, r5
   188b0:	2800      	cmp	r0, #0
   188b2:	d03f      	beq.n	18934 <bt_hci_le_adv_report+0x98>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   188b4:	89b3      	ldrh	r3, [r6, #12]
   188b6:	2b08      	cmp	r3, #8
   188b8:	d92c      	bls.n	18914 <bt_hci_le_adv_report+0x78>
	return net_buf_simple_pull_mem(&buf->b, len);
   188ba:	2109      	movs	r1, #9
   188bc:	4638      	mov	r0, r7
   188be:	f011 fccf 	bl	2a260 <net_buf_simple_pull_mem>
   188c2:	4604      	mov	r4, r0
			break;
		}

		evt = net_buf_pull_mem(buf, sizeof(*evt));

		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   188c4:	2301      	movs	r3, #1
   188c6:	f88d 300c 	strb.w	r3, [sp, #12]
		adv_info.secondary_phy = 0;
   188ca:	2200      	movs	r2, #0
   188cc:	f88d 200d 	strb.w	r2, [sp, #13]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   188d0:	237f      	movs	r3, #127	; 0x7f
   188d2:	f88d 3006 	strb.w	r3, [sp, #6]
		adv_info.rssi = evt->data[evt->length];
   188d6:	7a03      	ldrb	r3, [r0, #8]
   188d8:	4403      	add	r3, r0
   188da:	f993 3009 	ldrsb.w	r3, [r3, #9]
   188de:	f88d 3005 	strb.w	r3, [sp, #5]
		adv_info.sid = BT_GAP_SID_INVALID;
   188e2:	23ff      	movs	r3, #255	; 0xff
   188e4:	f88d 3004 	strb.w	r3, [sp, #4]
		adv_info.interval = 0U;
   188e8:	f8ad 200a 	strh.w	r2, [sp, #10]

		adv_info.adv_type = evt->evt_type;
   188ec:	7800      	ldrb	r0, [r0, #0]
   188ee:	f88d 0007 	strb.w	r0, [sp, #7]
		adv_info.adv_props = get_adv_props(evt->evt_type);
   188f2:	f00f fbeb 	bl	280cc <get_adv_props>
   188f6:	f8ad 0008 	strh.w	r0, [sp, #8]

		le_adv_recv(&evt->addr, &adv_info, buf, evt->length);
   188fa:	7a23      	ldrb	r3, [r4, #8]
   188fc:	4632      	mov	r2, r6
   188fe:	4669      	mov	r1, sp
   18900:	1c60      	adds	r0, r4, #1
   18902:	f7ff ff31 	bl	18768 <le_adv_recv>

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   18906:	7a21      	ldrb	r1, [r4, #8]
	return net_buf_simple_pull(&buf->b, len);
   18908:	3101      	adds	r1, #1
   1890a:	4638      	mov	r0, r7
   1890c:	f011 fca0 	bl	2a250 <net_buf_simple_pull>
	while (num_reports--) {
   18910:	4628      	mov	r0, r5
   18912:	e7cb      	b.n	188ac <bt_hci_le_adv_report+0x10>
   18914:	4b08      	ldr	r3, [pc, #32]	; (18938 <bt_hci_le_adv_report+0x9c>)
   18916:	4a09      	ldr	r2, [pc, #36]	; (1893c <bt_hci_le_adv_report+0xa0>)
   18918:	1a9b      	subs	r3, r3, r2
   1891a:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected end of buffer");
   1891c:	f04f 0100 	mov.w	r1, #0
   18920:	2201      	movs	r2, #1
   18922:	f362 0102 	bfi	r1, r2, #0, #3
   18926:	f36f 01c5 	bfc	r1, #3, #3
   1892a:	f363 118f 	bfi	r1, r3, #6, #10
   1892e:	4804      	ldr	r0, [pc, #16]	; (18940 <bt_hci_le_adv_report+0xa4>)
   18930:	f7f9 fb7c 	bl	1202c <log_0>
	}
}
   18934:	b005      	add	sp, #20
   18936:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18938:	0002c650 	.word	0x0002c650
   1893c:	0002c610 	.word	0x0002c610
   18940:	0002e0ec 	.word	0x0002e0ec

00018944 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   18944:	b538      	push	{r3, r4, r5, lr}
   18946:	f3bf 8f5b 	dmb	ish
   1894a:	4b48      	ldr	r3, [pc, #288]	; (18a6c <bt_le_scan_start+0x128>)
   1894c:	681b      	ldr	r3, [r3, #0]
   1894e:	f3bf 8f5b 	dmb	ish
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18952:	f013 0f02 	tst.w	r3, #2
   18956:	d07d      	beq.n	18a54 <bt_le_scan_start+0x110>
   18958:	4604      	mov	r4, r0
   1895a:	460d      	mov	r5, r1
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
   1895c:	f00f fbc7 	bl	280ee <valid_le_scan_param>
   18960:	2800      	cmp	r0, #0
   18962:	d07a      	beq.n	18a5a <bt_le_scan_start+0x116>
		return -EINVAL;
	}

	if (param->type && !bt_id_scan_random_addr_check()) {
   18964:	7823      	ldrb	r3, [r4, #0]
   18966:	b11b      	cbz	r3, 18970 <bt_le_scan_start+0x2c>
   18968:	f00f fbae 	bl	280c8 <bt_id_scan_random_addr_check>
   1896c:	2800      	cmp	r0, #0
   1896e:	d077      	beq.n	18a60 <bt_le_scan_start+0x11c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18970:	4b3e      	ldr	r3, [pc, #248]	; (18a6c <bt_le_scan_start+0x128>)
   18972:	f3bf 8f5b 	dmb	ish
   18976:	e853 2f00 	ldrex	r2, [r3]
   1897a:	f042 0140 	orr.w	r1, r2, #64	; 0x40
   1897e:	e843 1000 	strex	r0, r1, [r3]
   18982:	2800      	cmp	r0, #0
   18984:	d1f7      	bne.n	18976 <bt_le_scan_start+0x32>
   18986:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	/* Return if active scan is already enabled */
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1898a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1898e:	d16a      	bne.n	18a66 <bt_le_scan_start+0x122>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18990:	f3bf 8f5b 	dmb	ish
   18994:	681b      	ldr	r3, [r3, #0]
   18996:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1899a:	f013 0f20 	tst.w	r3, #32
   1899e:	d003      	beq.n	189a8 <bt_le_scan_start+0x64>
		err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
   189a0:	2000      	movs	r0, #0
   189a2:	f00f fbc7 	bl	28134 <bt_le_scan_set_enable>
		if (err) {
   189a6:	b9d8      	cbnz	r0, 189e0 <bt_le_scan_start+0x9c>
			return err;
		}
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
			  param->options & BT_LE_SCAN_OPT_FILTER_DUPLICATE);
   189a8:	6863      	ldr	r3, [r4, #4]
	if (val) {
   189aa:	f013 0f01 	tst.w	r3, #1
   189ae:	d025      	beq.n	189fc <bt_le_scan_start+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   189b0:	4b2e      	ldr	r3, [pc, #184]	; (18a6c <bt_le_scan_start+0x128>)
   189b2:	f3bf 8f5b 	dmb	ish
   189b6:	e853 2f00 	ldrex	r2, [r3]
   189ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   189be:	e843 2100 	strex	r1, r2, [r3]
   189c2:	2900      	cmp	r1, #0
   189c4:	d1f7      	bne.n	189b6 <bt_le_scan_start+0x72>
   189c6:	f3bf 8f5b 	dmb	ish
			phy_coded = &param_coded;
		}

		err = start_le_scan_ext(phy_1m, phy_coded, param->timeout);
	} else {
		if (param->timeout) {
   189ca:	89a3      	ldrh	r3, [r4, #12]
   189cc:	bb23      	cbnz	r3, 18a18 <bt_le_scan_start+0xd4>
			atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
			return -ENOTSUP;
		}

		err = start_le_scan_legacy(param->type, param->interval,
   189ce:	8962      	ldrh	r2, [r4, #10]
   189d0:	8921      	ldrh	r1, [r4, #8]
   189d2:	7820      	ldrb	r0, [r4, #0]
   189d4:	f7ff fde0 	bl	18598 <start_le_scan_legacy>
					   param->window);
	}

	if (err) {
   189d8:	bb70      	cbnz	r0, 18a38 <bt_le_scan_start+0xf4>
		atomic_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN);
		return err;
	}

	scan_dev_found_cb = cb;
   189da:	4b25      	ldr	r3, [pc, #148]	; (18a70 <bt_le_scan_start+0x12c>)
   189dc:	601d      	str	r5, [r3, #0]

	return 0;
}
   189de:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   189e0:	4b22      	ldr	r3, [pc, #136]	; (18a6c <bt_le_scan_start+0x128>)
   189e2:	f3bf 8f5b 	dmb	ish
   189e6:	e853 2f00 	ldrex	r2, [r3]
   189ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   189ee:	e843 2100 	strex	r1, r2, [r3]
   189f2:	2900      	cmp	r1, #0
   189f4:	d1f7      	bne.n	189e6 <bt_le_scan_start+0xa2>
   189f6:	f3bf 8f5b 	dmb	ish
			return err;
   189fa:	e7f0      	b.n	189de <bt_le_scan_start+0x9a>
   189fc:	4b1b      	ldr	r3, [pc, #108]	; (18a6c <bt_le_scan_start+0x128>)
   189fe:	f3bf 8f5b 	dmb	ish
   18a02:	e853 2f00 	ldrex	r2, [r3]
   18a06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   18a0a:	e843 2100 	strex	r1, r2, [r3]
   18a0e:	2900      	cmp	r1, #0
   18a10:	d1f7      	bne.n	18a02 <bt_le_scan_start+0xbe>
   18a12:	f3bf 8f5b 	dmb	ish
   18a16:	e7d8      	b.n	189ca <bt_le_scan_start+0x86>
   18a18:	4b14      	ldr	r3, [pc, #80]	; (18a6c <bt_le_scan_start+0x128>)
   18a1a:	f3bf 8f5b 	dmb	ish
   18a1e:	e853 2f00 	ldrex	r2, [r3]
   18a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   18a26:	e843 2100 	strex	r1, r2, [r3]
   18a2a:	2900      	cmp	r1, #0
   18a2c:	d1f7      	bne.n	18a1e <bt_le_scan_start+0xda>
   18a2e:	f3bf 8f5b 	dmb	ish
			return -ENOTSUP;
   18a32:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18a36:	e7d2      	b.n	189de <bt_le_scan_start+0x9a>
   18a38:	4b0c      	ldr	r3, [pc, #48]	; (18a6c <bt_le_scan_start+0x128>)
   18a3a:	f3bf 8f5b 	dmb	ish
   18a3e:	e853 2f00 	ldrex	r2, [r3]
   18a42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   18a46:	e843 2100 	strex	r1, r2, [r3]
   18a4a:	2900      	cmp	r1, #0
   18a4c:	d1f7      	bne.n	18a3e <bt_le_scan_start+0xfa>
   18a4e:	f3bf 8f5b 	dmb	ish
		return err;
   18a52:	e7c4      	b.n	189de <bt_le_scan_start+0x9a>
		return -EAGAIN;
   18a54:	f06f 000a 	mvn.w	r0, #10
   18a58:	e7c1      	b.n	189de <bt_le_scan_start+0x9a>
		return -EINVAL;
   18a5a:	f06f 0015 	mvn.w	r0, #21
   18a5e:	e7be      	b.n	189de <bt_le_scan_start+0x9a>
		return -EINVAL;
   18a60:	f06f 0015 	mvn.w	r0, #21
   18a64:	e7bb      	b.n	189de <bt_le_scan_start+0x9a>
		return -EALREADY;
   18a66:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18a6a:	e7b8      	b.n	189de <bt_le_scan_start+0x9a>
   18a6c:	2000036c 	.word	0x2000036c
   18a70:	20002be0 	.word	0x20002be0

00018a74 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   18a74:	b508      	push	{r3, lr}
   18a76:	4b0c      	ldr	r3, [pc, #48]	; (18aa8 <bt_le_scan_stop+0x34>)
   18a78:	f3bf 8f5b 	dmb	ish
   18a7c:	e853 2f00 	ldrex	r2, [r3]
   18a80:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   18a84:	e843 1000 	strex	r0, r1, [r3]
   18a88:	2800      	cmp	r0, #0
   18a8a:	d1f7      	bne.n	18a7c <bt_le_scan_stop+0x8>
   18a8c:	f3bf 8f5b 	dmb	ish
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   18a90:	f012 0f40 	tst.w	r2, #64	; 0x40
   18a94:	d005      	beq.n	18aa2 <bt_le_scan_stop+0x2e>
		return -EALREADY;
	}

	scan_dev_found_cb = NULL;
   18a96:	2000      	movs	r0, #0
   18a98:	4b04      	ldr	r3, [pc, #16]	; (18aac <bt_le_scan_stop+0x38>)
   18a9a:	6018      	str	r0, [r3, #0]
#if defined(CONFIG_BT_SMP)
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
   18a9c:	f7ff fdd6 	bl	1864c <bt_le_scan_update>
}
   18aa0:	bd08      	pop	{r3, pc}
		return -EALREADY;
   18aa2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   18aa6:	e7fb      	b.n	18aa0 <bt_le_scan_stop+0x2c>
   18aa8:	2000036c 	.word	0x2000036c
   18aac:	20002be0 	.word	0x20002be0

00018ab0 <bt_le_scan_cb_register>:

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   18ab0:	f100 0308 	add.w	r3, r0, #8
	parent->next = child;
   18ab4:	2200      	movs	r2, #0
   18ab6:	6082      	str	r2, [r0, #8]
	return list->tail;
   18ab8:	4a05      	ldr	r2, [pc, #20]	; (18ad0 <bt_le_scan_cb_register+0x20>)
   18aba:	6852      	ldr	r2, [r2, #4]
Z_GENLIST_APPEND(slist, snode)
   18abc:	b11a      	cbz	r2, 18ac6 <bt_le_scan_cb_register+0x16>
	parent->next = child;
   18abe:	6013      	str	r3, [r2, #0]
	list->tail = node;
   18ac0:	4a03      	ldr	r2, [pc, #12]	; (18ad0 <bt_le_scan_cb_register+0x20>)
   18ac2:	6053      	str	r3, [r2, #4]
}
   18ac4:	4770      	bx	lr
   18ac6:	4a02      	ldr	r2, [pc, #8]	; (18ad0 <bt_le_scan_cb_register+0x20>)
   18ac8:	6053      	str	r3, [r2, #4]
	list->head = node;
   18aca:	6013      	str	r3, [r2, #0]
}
   18acc:	4770      	bx	lr
   18ace:	bf00      	nop
   18ad0:	20002bd8 	.word	0x20002bd8

00018ad4 <notify_disconnected>:
		bt_gatt_connected(conn);
	}
}

static void notify_disconnected(struct bt_conn *conn)
{
   18ad4:	b538      	push	{r3, r4, r5, lr}
   18ad6:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   18ad8:	4b0c      	ldr	r3, [pc, #48]	; (18b0c <notify_disconnected+0x38>)
   18ada:	681c      	ldr	r4, [r3, #0]
   18adc:	e000      	b.n	18ae0 <notify_disconnected+0xc>
   18ade:	6924      	ldr	r4, [r4, #16]
   18ae0:	b134      	cbz	r4, 18af0 <notify_disconnected+0x1c>
		if (cb->disconnected) {
   18ae2:	6863      	ldr	r3, [r4, #4]
   18ae4:	2b00      	cmp	r3, #0
   18ae6:	d0fa      	beq.n	18ade <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
   18ae8:	7a69      	ldrb	r1, [r5, #9]
   18aea:	4628      	mov	r0, r5
   18aec:	4798      	blx	r3
   18aee:	e7f6      	b.n	18ade <notify_disconnected+0xa>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18af0:	4c07      	ldr	r4, [pc, #28]	; (18b10 <notify_disconnected+0x3c>)
   18af2:	e000      	b.n	18af6 <notify_disconnected+0x22>
   18af4:	3414      	adds	r4, #20
   18af6:	4b07      	ldr	r3, [pc, #28]	; (18b14 <notify_disconnected+0x40>)
   18af8:	429c      	cmp	r4, r3
   18afa:	d206      	bcs.n	18b0a <notify_disconnected+0x36>
		if (cb->disconnected) {
   18afc:	6863      	ldr	r3, [r4, #4]
   18afe:	2b00      	cmp	r3, #0
   18b00:	d0f8      	beq.n	18af4 <notify_disconnected+0x20>
			cb->disconnected(conn, conn->err);
   18b02:	7a69      	ldrb	r1, [r5, #9]
   18b04:	4628      	mov	r0, r5
   18b06:	4798      	blx	r3
   18b08:	e7f4      	b.n	18af4 <notify_disconnected+0x20>
		}
	}
}
   18b0a:	bd38      	pop	{r3, r4, r5, pc}
   18b0c:	20002be4 	.word	0x20002be4
   18b10:	0002c5ec 	.word	0x0002c5ec
   18b14:	0002c600 	.word	0x0002c600

00018b18 <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   18b18:	b430      	push	{r4, r5}
	bt_dev.create_param = *param;
   18b1a:	4d0c      	ldr	r5, [pc, #48]	; (18b4c <create_param_setup+0x34>)
   18b1c:	f105 0408 	add.w	r4, r5, #8
   18b20:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   18b22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   18b26:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   18b28:	b90b      	cbnz	r3, 18b2e <create_param_setup+0x16>
   18b2a:	f44f 7396 	mov.w	r3, #300	; 0x12c
   18b2e:	4a07      	ldr	r2, [pc, #28]	; (18b4c <create_param_setup+0x34>)
   18b30:	8293      	strh	r3, [r2, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   18b32:	8a13      	ldrh	r3, [r2, #16]
	bt_dev.create_param.interval_coded =
   18b34:	b903      	cbnz	r3, 18b38 <create_param_setup+0x20>
   18b36:	8993      	ldrh	r3, [r2, #12]
   18b38:	4a04      	ldr	r2, [pc, #16]	; (18b4c <create_param_setup+0x34>)
   18b3a:	8213      	strh	r3, [r2, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   18b3c:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   18b3e:	b903      	cbnz	r3, 18b42 <create_param_setup+0x2a>
   18b40:	89d3      	ldrh	r3, [r2, #14]
   18b42:	4a02      	ldr	r2, [pc, #8]	; (18b4c <create_param_setup+0x34>)
   18b44:	8253      	strh	r3, [r2, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   18b46:	bc30      	pop	{r4, r5}
   18b48:	4770      	bx	lr
   18b4a:	bf00      	nop
   18b4c:	200002a0 	.word	0x200002a0

00018b50 <tx_free>:
{
   18b50:	b508      	push	{r3, lr}
   18b52:	4601      	mov	r1, r0
	tx->cb = NULL;
   18b54:	2300      	movs	r3, #0
   18b56:	6043      	str	r3, [r0, #4]
	tx->user_data = NULL;
   18b58:	6083      	str	r3, [r0, #8]
	tx->pending_no_cb = 0U;
   18b5a:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   18b5c:	4801      	ldr	r0, [pc, #4]	; (18b64 <tx_free+0x14>)
   18b5e:	f012 fee7 	bl	2b930 <k_queue_append>
}
   18b62:	bd08      	pop	{r3, pc}
   18b64:	20000880 	.word	0x20000880

00018b68 <conn_tx_alloc>:
{
   18b68:	b508      	push	{r3, lr}
	return z_impl_z_current_get();
   18b6a:	f009 fe67 	bl	2283c <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18b6e:	4b08      	ldr	r3, [pc, #32]	; (18b90 <conn_tx_alloc+0x28>)
   18b70:	4283      	cmp	r3, r0
   18b72:	d007      	beq.n	18b84 <conn_tx_alloc+0x1c>
	return z_impl_k_queue_get(queue, timeout);
   18b74:	f04f 32ff 	mov.w	r2, #4294967295
   18b78:	f04f 33ff 	mov.w	r3, #4294967295
   18b7c:	4805      	ldr	r0, [pc, #20]	; (18b94 <conn_tx_alloc+0x2c>)
   18b7e:	f009 f843 	bl	21c08 <z_impl_k_queue_get>
}
   18b82:	bd08      	pop	{r3, pc}
   18b84:	2200      	movs	r2, #0
   18b86:	2300      	movs	r3, #0
   18b88:	4802      	ldr	r0, [pc, #8]	; (18b94 <conn_tx_alloc+0x2c>)
   18b8a:	f009 f83d 	bl	21c08 <z_impl_k_queue_get>
		return k_fifo_get(&free_tx, K_NO_WAIT);
   18b8e:	e7f8      	b.n	18b82 <conn_tx_alloc+0x1a>
   18b90:	200021e8 	.word	0x200021e8
   18b94:	20000880 	.word	0x20000880

00018b98 <notify_connected>:
{
   18b98:	b538      	push	{r3, r4, r5, lr}
   18b9a:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18b9c:	4b0f      	ldr	r3, [pc, #60]	; (18bdc <notify_connected+0x44>)
   18b9e:	681c      	ldr	r4, [r3, #0]
   18ba0:	e000      	b.n	18ba4 <notify_connected+0xc>
   18ba2:	6924      	ldr	r4, [r4, #16]
   18ba4:	b134      	cbz	r4, 18bb4 <notify_connected+0x1c>
		if (cb->connected) {
   18ba6:	6823      	ldr	r3, [r4, #0]
   18ba8:	2b00      	cmp	r3, #0
   18baa:	d0fa      	beq.n	18ba2 <notify_connected+0xa>
			cb->connected(conn, conn->err);
   18bac:	7a69      	ldrb	r1, [r5, #9]
   18bae:	4628      	mov	r0, r5
   18bb0:	4798      	blx	r3
   18bb2:	e7f6      	b.n	18ba2 <notify_connected+0xa>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18bb4:	4c0a      	ldr	r4, [pc, #40]	; (18be0 <notify_connected+0x48>)
   18bb6:	e000      	b.n	18bba <notify_connected+0x22>
   18bb8:	3414      	adds	r4, #20
   18bba:	4b0a      	ldr	r3, [pc, #40]	; (18be4 <notify_connected+0x4c>)
   18bbc:	429c      	cmp	r4, r3
   18bbe:	d206      	bcs.n	18bce <notify_connected+0x36>
		if (cb->connected) {
   18bc0:	6823      	ldr	r3, [r4, #0]
   18bc2:	2b00      	cmp	r3, #0
   18bc4:	d0f8      	beq.n	18bb8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
   18bc6:	7a69      	ldrb	r1, [r5, #9]
   18bc8:	4628      	mov	r0, r5
   18bca:	4798      	blx	r3
   18bcc:	e7f4      	b.n	18bb8 <notify_connected+0x20>
	if (!conn->err) {
   18bce:	7a6b      	ldrb	r3, [r5, #9]
   18bd0:	b103      	cbz	r3, 18bd4 <notify_connected+0x3c>
}
   18bd2:	bd38      	pop	{r3, r4, r5, pc}
		bt_gatt_connected(conn);
   18bd4:	4628      	mov	r0, r5
   18bd6:	f003 f831 	bl	1bc3c <bt_gatt_connected>
}
   18bda:	e7fa      	b.n	18bd2 <notify_connected+0x3a>
   18bdc:	20002be4 	.word	0x20002be4
   18be0:	0002c5ec 	.word	0x0002c5ec
   18be4:	0002c600 	.word	0x0002c600

00018be8 <bt_conn_get_pkts>:
}
   18be8:	4800      	ldr	r0, [pc, #0]	; (18bec <bt_conn_get_pkts+0x4>)
   18bea:	4770      	bx	lr
   18bec:	200003a0 	.word	0x200003a0

00018bf0 <send_frag>:
{
   18bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18bf4:	4605      	mov	r5, r0
   18bf6:	460e      	mov	r6, r1
   18bf8:	4691      	mov	r9, r2
   18bfa:	461c      	mov	r4, r3
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18bfc:	694f      	ldr	r7, [r1, #20]
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
   18bfe:	f7ff fff3 	bl	18be8 <bt_conn_get_pkts>
   18c02:	4680      	mov	r8, r0
	return z_impl_k_sem_take(sem, timeout);
   18c04:	f04f 32ff 	mov.w	r2, #4294967295
   18c08:	f04f 33ff 	mov.w	r3, #4294967295
   18c0c:	f009 f860 	bl	21cd0 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   18c10:	7aab      	ldrb	r3, [r5, #10]
   18c12:	2b07      	cmp	r3, #7
   18c14:	d159      	bne.n	18cca <send_frag+0xda>
   18c16:	f04f 0240 	mov.w	r2, #64	; 0x40
   18c1a:	f3ef 8311 	mrs	r3, BASEPRI
   18c1e:	f382 8812 	msr	BASEPRI_MAX, r2
   18c22:	f3bf 8f6f 	isb	sy
	if (tx) {
   18c26:	b1af      	cbz	r7, 18c54 <send_frag+0x64>
	parent->next = child;
   18c28:	2200      	movs	r2, #0
   18c2a:	603a      	str	r2, [r7, #0]
	return list->tail;
   18c2c:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_APPEND(slist, snode)
   18c2e:	b172      	cbz	r2, 18c4e <send_frag+0x5e>
	parent->next = child;
   18c30:	6017      	str	r7, [r2, #0]
	list->tail = node;
   18c32:	61af      	str	r7, [r5, #24]
	__asm__ volatile(
   18c34:	f383 8811 	msr	BASEPRI, r3
   18c38:	f3bf 8f6f 	isb	sy
		err = send_acl(conn, buf, flags);
   18c3c:	464a      	mov	r2, r9
   18c3e:	4631      	mov	r1, r6
   18c40:	4628      	mov	r0, r5
   18c42:	f00f fac0 	bl	281c6 <send_acl>
	if (err) {
   18c46:	4601      	mov	r1, r0
   18c48:	b988      	cbnz	r0, 18c6e <send_frag+0x7e>
	return true;
   18c4a:	2001      	movs	r0, #1
   18c4c:	e046      	b.n	18cdc <send_frag+0xec>
   18c4e:	61af      	str	r7, [r5, #24]
	list->head = node;
   18c50:	616f      	str	r7, [r5, #20]
}
   18c52:	e7ef      	b.n	18c34 <send_frag+0x44>
	return list->tail;
   18c54:	69aa      	ldr	r2, [r5, #24]
		if (tail_tx) {
   18c56:	b13a      	cbz	r2, 18c68 <send_frag+0x78>
			pending_no_cb = &tail_tx->pending_no_cb;
   18c58:	f102 0a0c 	add.w	sl, r2, #12
		(*pending_no_cb)++;
   18c5c:	f8da 2000 	ldr.w	r2, [sl]
   18c60:	3201      	adds	r2, #1
   18c62:	f8ca 2000 	str.w	r2, [sl]
   18c66:	e7e5      	b.n	18c34 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   18c68:	f105 0a1c 	add.w	sl, r5, #28
   18c6c:	e7f6      	b.n	18c5c <send_frag+0x6c>
   18c6e:	4b26      	ldr	r3, [pc, #152]	; (18d08 <send_frag+0x118>)
   18c70:	4a26      	ldr	r2, [pc, #152]	; (18d0c <send_frag+0x11c>)
   18c72:	1a9b      	subs	r3, r3, r2
   18c74:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to send to driver (err %d)", err);
   18c76:	f04f 0200 	mov.w	r2, #0
   18c7a:	2001      	movs	r0, #1
   18c7c:	f360 0202 	bfi	r2, r0, #0, #3
   18c80:	f36f 02c5 	bfc	r2, #3, #3
   18c84:	f363 128f 	bfi	r2, r3, #6, #10
   18c88:	4821      	ldr	r0, [pc, #132]	; (18d10 <send_frag+0x120>)
   18c8a:	f7f9 f919 	bl	11ec0 <log_1>
	__asm__ volatile(
   18c8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   18c92:	f3ef 8011 	mrs	r0, BASEPRI
   18c96:	f383 8812 	msr	BASEPRI_MAX, r3
   18c9a:	f3bf 8f6f 	isb	sy
		if (tx) {
   18c9e:	b347      	cbz	r7, 18cf2 <send_frag+0x102>
			sys_slist_find_and_remove(&conn->tx_pending, &tx->node);
   18ca0:	4639      	mov	r1, r7
	return list->head;
   18ca2:	696b      	ldr	r3, [r5, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18ca4:	2200      	movs	r2, #0
   18ca6:	b163      	cbz	r3, 18cc2 <send_frag+0xd2>
   18ca8:	428b      	cmp	r3, r1
   18caa:	d002      	beq.n	18cb2 <send_frag+0xc2>
   18cac:	461a      	mov	r2, r3
   18cae:	681b      	ldr	r3, [r3, #0]
   18cb0:	e7f9      	b.n	18ca6 <send_frag+0xb6>
Z_GENLIST_REMOVE(slist, snode)
   18cb2:	b1aa      	cbz	r2, 18ce0 <send_frag+0xf0>
	return node->next;
   18cb4:	683b      	ldr	r3, [r7, #0]
	parent->next = child;
   18cb6:	6013      	str	r3, [r2, #0]
	return list->tail;
   18cb8:	69ab      	ldr	r3, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   18cba:	42bb      	cmp	r3, r7
   18cbc:	d017      	beq.n	18cee <send_frag+0xfe>
	parent->next = child;
   18cbe:	2300      	movs	r3, #0
   18cc0:	603b      	str	r3, [r7, #0]
	__asm__ volatile(
   18cc2:	f380 8811 	msr	BASEPRI, r0
   18cc6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   18cca:	4640      	mov	r0, r8
   18ccc:	f008 ffd8 	bl	21c80 <z_impl_k_sem_give>
	if (tx) {
   18cd0:	b117      	cbz	r7, 18cd8 <send_frag+0xe8>
		tx_free(tx);
   18cd2:	4638      	mov	r0, r7
   18cd4:	f7ff ff3c 	bl	18b50 <tx_free>
	if (always_consume) {
   18cd8:	b98c      	cbnz	r4, 18cfe <send_frag+0x10e>
	return false;
   18cda:	4620      	mov	r0, r4
}
   18cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next;
   18ce0:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   18ce2:	616b      	str	r3, [r5, #20]
	return list->tail;
   18ce4:	69aa      	ldr	r2, [r5, #24]
Z_GENLIST_REMOVE(slist, snode)
   18ce6:	42ba      	cmp	r2, r7
   18ce8:	d1e9      	bne.n	18cbe <send_frag+0xce>
	list->tail = node;
   18cea:	61ab      	str	r3, [r5, #24]
}
   18cec:	e7e7      	b.n	18cbe <send_frag+0xce>
	list->tail = node;
   18cee:	61aa      	str	r2, [r5, #24]
}
   18cf0:	e7e5      	b.n	18cbe <send_frag+0xce>
			(*pending_no_cb)--;
   18cf2:	f8da 3000 	ldr.w	r3, [sl]
   18cf6:	3b01      	subs	r3, #1
   18cf8:	f8ca 3000 	str.w	r3, [sl]
   18cfc:	e7e1      	b.n	18cc2 <send_frag+0xd2>
		net_buf_unref(buf);
   18cfe:	4630      	mov	r0, r6
   18d00:	f011 fa3a 	bl	2a178 <net_buf_unref>
	return false;
   18d04:	2000      	movs	r0, #0
   18d06:	e7e9      	b.n	18cdc <send_frag+0xec>
   18d08:	0002c620 	.word	0x0002c620
   18d0c:	0002c610 	.word	0x0002c610
   18d10:	0002dd94 	.word	0x0002dd94

00018d14 <bt_conn_new>:
{
   18d14:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < size; i++) {
   18d16:	2300      	movs	r3, #0
   18d18:	428b      	cmp	r3, r1
   18d1a:	d228      	bcs.n	18d6e <bt_conn_new+0x5a>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18d1c:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   18d20:	eb00 1484 	add.w	r4, r0, r4, lsl #6
   18d24:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18d28:	2501      	movs	r5, #1
   18d2a:	f3bf 8f5b 	dmb	ish
   18d2e:	e852 6f00 	ldrex	r6, [r2]
   18d32:	2e00      	cmp	r6, #0
   18d34:	d104      	bne.n	18d40 <bt_conn_new+0x2c>
   18d36:	e842 5c00 	strex	ip, r5, [r2]
   18d3a:	f1bc 0f00 	cmp.w	ip, #0
   18d3e:	d1f6      	bne.n	18d2e <bt_conn_new+0x1a>
   18d40:	f3bf 8f5b 	dmb	ish
   18d44:	d111      	bne.n	18d6a <bt_conn_new+0x56>
	if (!conn) {
   18d46:	b174      	cbz	r4, 18d66 <bt_conn_new+0x52>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   18d48:	22b8      	movs	r2, #184	; 0xb8
   18d4a:	2100      	movs	r1, #0
   18d4c:	4620      	mov	r0, r4
   18d4e:	f00e ffa3 	bl	27c98 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   18d52:	4908      	ldr	r1, [pc, #32]	; (18d74 <bt_conn_new+0x60>)
   18d54:	f104 0058 	add.w	r0, r4, #88	; 0x58
   18d58:	f012 feec 	bl	2bb34 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18d5c:	4906      	ldr	r1, [pc, #24]	; (18d78 <bt_conn_new+0x64>)
   18d5e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   18d62:	f012 fec1 	bl	2bae8 <k_work_init>
}
   18d66:	4620      	mov	r0, r4
   18d68:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < size; i++) {
   18d6a:	442b      	add	r3, r5
   18d6c:	e7d4      	b.n	18d18 <bt_conn_new+0x4>
	struct bt_conn *conn = NULL;
   18d6e:	2400      	movs	r4, #0
   18d70:	e7e9      	b.n	18d46 <bt_conn_new+0x32>
   18d72:	bf00      	nop
   18d74:	000284ff 	.word	0x000284ff
   18d78:	000281bd 	.word	0x000281bd

00018d7c <acl_conn_new>:
{
   18d7c:	b508      	push	{r3, lr}
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18d7e:	2101      	movs	r1, #1
   18d80:	4801      	ldr	r0, [pc, #4]	; (18d88 <acl_conn_new+0xc>)
   18d82:	f7ff ffc7 	bl	18d14 <bt_conn_new>
}
   18d86:	bd08      	pop	{r3, pc}
   18d88:	20001ac0 	.word	0x20001ac0

00018d8c <bt_acl_recv>:
{
   18d8c:	b570      	push	{r4, r5, r6, lr}
   18d8e:	4604      	mov	r4, r0
   18d90:	460d      	mov	r5, r1
	switch (flags) {
   18d92:	2a01      	cmp	r2, #1
   18d94:	d02d      	beq.n	18df2 <bt_acl_recv+0x66>
   18d96:	4611      	mov	r1, r2
   18d98:	2a02      	cmp	r2, #2
   18d9a:	d173      	bne.n	18e84 <bt_acl_recv+0xf8>
		if (conn->rx) {
   18d9c:	6903      	ldr	r3, [r0, #16]
   18d9e:	b193      	cbz	r3, 18dc6 <bt_acl_recv+0x3a>
   18da0:	4b4e      	ldr	r3, [pc, #312]	; (18edc <bt_acl_recv+0x150>)
   18da2:	4a4f      	ldr	r2, [pc, #316]	; (18ee0 <bt_acl_recv+0x154>)
   18da4:	1a9b      	subs	r3, r3, r2
   18da6:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected first L2CAP frame");
   18da8:	f04f 0100 	mov.w	r1, #0
   18dac:	2201      	movs	r2, #1
   18dae:	f362 0102 	bfi	r1, r2, #0, #3
   18db2:	f36f 01c5 	bfc	r1, #3, #3
   18db6:	f363 118f 	bfi	r1, r3, #6, #10
   18dba:	484a      	ldr	r0, [pc, #296]	; (18ee4 <bt_acl_recv+0x158>)
   18dbc:	f7f9 f936 	bl	1202c <log_0>
			bt_conn_reset_rx_state(conn);
   18dc0:	4620      	mov	r0, r4
   18dc2:	f00f fa63 	bl	2828c <bt_conn_reset_rx_state>
		conn->rx = buf;
   18dc6:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18dc8:	6921      	ldr	r1, [r4, #16]
   18dca:	8988      	ldrh	r0, [r1, #12]
   18dcc:	2801      	cmp	r0, #1
   18dce:	d96f      	bls.n	18eb0 <bt_acl_recv+0x124>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18dd0:	688b      	ldr	r3, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   18dd2:	785d      	ldrb	r5, [r3, #1]
   18dd4:	781a      	ldrb	r2, [r3, #0]
   18dd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   18dda:	3204      	adds	r2, #4
   18ddc:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   18dde:	4290      	cmp	r0, r2
   18de0:	d366      	bcc.n	18eb0 <bt_acl_recv+0x124>
	if (conn->rx->len > acl_total_len) {
   18de2:	d866      	bhi.n	18eb2 <bt_acl_recv+0x126>
	conn->rx = NULL;
   18de4:	2300      	movs	r3, #0
   18de6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   18de8:	2201      	movs	r2, #1
   18dea:	4620      	mov	r0, r4
   18dec:	f000 ff6e 	bl	19ccc <bt_l2cap_recv>
   18df0:	e05e      	b.n	18eb0 <bt_acl_recv+0x124>
		if (!conn->rx) {
   18df2:	6900      	ldr	r0, [r0, #16]
   18df4:	b180      	cbz	r0, 18e18 <bt_acl_recv+0x8c>
		if (!buf->len) {
   18df6:	898e      	ldrh	r6, [r1, #12]
   18df8:	b32e      	cbz	r6, 18e46 <bt_acl_recv+0xba>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18dfa:	3008      	adds	r0, #8
   18dfc:	f011 fa4c 	bl	2a298 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   18e00:	4286      	cmp	r6, r0
   18e02:	d824      	bhi.n	18e4e <bt_acl_recv+0xc2>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   18e04:	6920      	ldr	r0, [r4, #16]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18e06:	89aa      	ldrh	r2, [r5, #12]
   18e08:	68a9      	ldr	r1, [r5, #8]
   18e0a:	3008      	adds	r0, #8
   18e0c:	f011 fa04 	bl	2a218 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18e10:	4628      	mov	r0, r5
   18e12:	f011 f9b1 	bl	2a178 <net_buf_unref>
		break;
   18e16:	e7d7      	b.n	18dc8 <bt_acl_recv+0x3c>
   18e18:	4b30      	ldr	r3, [pc, #192]	; (18edc <bt_acl_recv+0x150>)
   18e1a:	4a31      	ldr	r2, [pc, #196]	; (18ee0 <bt_acl_recv+0x154>)
   18e1c:	1a9b      	subs	r3, r3, r2
   18e1e:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unexpected L2CAP continuation");
   18e20:	f04f 0100 	mov.w	r1, #0
   18e24:	2201      	movs	r2, #1
   18e26:	f362 0102 	bfi	r1, r2, #0, #3
   18e2a:	f36f 01c5 	bfc	r1, #3, #3
   18e2e:	f363 118f 	bfi	r1, r3, #6, #10
   18e32:	482d      	ldr	r0, [pc, #180]	; (18ee8 <bt_acl_recv+0x15c>)
   18e34:	f7f9 f8fa 	bl	1202c <log_0>
			bt_conn_reset_rx_state(conn);
   18e38:	4620      	mov	r0, r4
   18e3a:	f00f fa27 	bl	2828c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   18e3e:	4628      	mov	r0, r5
   18e40:	f011 f99a 	bl	2a178 <net_buf_unref>
			return;
   18e44:	e034      	b.n	18eb0 <bt_acl_recv+0x124>
			net_buf_unref(buf);
   18e46:	4608      	mov	r0, r1
   18e48:	f011 f996 	bl	2a178 <net_buf_unref>
			return;
   18e4c:	e030      	b.n	18eb0 <bt_acl_recv+0x124>
   18e4e:	4b23      	ldr	r3, [pc, #140]	; (18edc <bt_acl_recv+0x150>)
   18e50:	4a23      	ldr	r2, [pc, #140]	; (18ee0 <bt_acl_recv+0x154>)
   18e52:	1a9b      	subs	r3, r3, r2
   18e54:	08db      	lsrs	r3, r3, #3
			BT_ERR("Not enough buffer space for L2CAP data");
   18e56:	f04f 0100 	mov.w	r1, #0
   18e5a:	2201      	movs	r2, #1
   18e5c:	f362 0102 	bfi	r1, r2, #0, #3
   18e60:	f36f 01c5 	bfc	r1, #3, #3
   18e64:	f363 118f 	bfi	r1, r3, #6, #10
   18e68:	4820      	ldr	r0, [pc, #128]	; (18eec <bt_acl_recv+0x160>)
   18e6a:	f7f9 f8df 	bl	1202c <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   18e6e:	2200      	movs	r2, #0
   18e70:	6921      	ldr	r1, [r4, #16]
   18e72:	4620      	mov	r0, r4
   18e74:	f000 ff2a 	bl	19ccc <bt_l2cap_recv>
			conn->rx = NULL;
   18e78:	2300      	movs	r3, #0
   18e7a:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   18e7c:	4628      	mov	r0, r5
   18e7e:	f011 f97b 	bl	2a178 <net_buf_unref>
			return;
   18e82:	e015      	b.n	18eb0 <bt_acl_recv+0x124>
   18e84:	4b15      	ldr	r3, [pc, #84]	; (18edc <bt_acl_recv+0x150>)
   18e86:	4a16      	ldr	r2, [pc, #88]	; (18ee0 <bt_acl_recv+0x154>)
   18e88:	1a9b      	subs	r3, r3, r2
   18e8a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   18e8c:	f04f 0200 	mov.w	r2, #0
   18e90:	2001      	movs	r0, #1
   18e92:	f360 0202 	bfi	r2, r0, #0, #3
   18e96:	f36f 02c5 	bfc	r2, #3, #3
   18e9a:	f363 128f 	bfi	r2, r3, #6, #10
   18e9e:	4814      	ldr	r0, [pc, #80]	; (18ef0 <bt_acl_recv+0x164>)
   18ea0:	f7f9 f80e 	bl	11ec0 <log_1>
		bt_conn_reset_rx_state(conn);
   18ea4:	4620      	mov	r0, r4
   18ea6:	f00f f9f1 	bl	2828c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   18eaa:	4628      	mov	r0, r5
   18eac:	f011 f964 	bl	2a178 <net_buf_unref>
}
   18eb0:	bd70      	pop	{r4, r5, r6, pc}
   18eb2:	490a      	ldr	r1, [pc, #40]	; (18edc <bt_acl_recv+0x150>)
   18eb4:	4b0a      	ldr	r3, [pc, #40]	; (18ee0 <bt_acl_recv+0x154>)
   18eb6:	1ac9      	subs	r1, r1, r3
   18eb8:	08c9      	lsrs	r1, r1, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   18eba:	f04f 0300 	mov.w	r3, #0
   18ebe:	2501      	movs	r5, #1
   18ec0:	f365 0302 	bfi	r3, r5, #0, #3
   18ec4:	f36f 03c5 	bfc	r3, #3, #3
   18ec8:	f361 138f 	bfi	r3, r1, #6, #10
   18ecc:	4601      	mov	r1, r0
   18ece:	4809      	ldr	r0, [pc, #36]	; (18ef4 <bt_acl_recv+0x168>)
   18ed0:	f7f9 f82c 	bl	11f2c <log_2>
		bt_conn_reset_rx_state(conn);
   18ed4:	4620      	mov	r0, r4
   18ed6:	f00f f9d9 	bl	2828c <bt_conn_reset_rx_state>
		return;
   18eda:	e7e9      	b.n	18eb0 <bt_acl_recv+0x124>
   18edc:	0002c620 	.word	0x0002c620
   18ee0:	0002c610 	.word	0x0002c610
   18ee4:	0002e108 	.word	0x0002e108
   18ee8:	0002e128 	.word	0x0002e128
   18eec:	0002e148 	.word	0x0002e148
   18ef0:	0002e170 	.word	0x0002e170
   18ef4:	0002e190 	.word	0x0002e190

00018ef8 <bt_conn_send_cb>:
{
   18ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18efc:	461f      	mov	r7, r3
	if (conn->state != BT_CONN_CONNECTED) {
   18efe:	7a83      	ldrb	r3, [r0, #10]
   18f00:	2b07      	cmp	r3, #7
   18f02:	d118      	bne.n	18f36 <bt_conn_send_cb+0x3e>
   18f04:	4604      	mov	r4, r0
   18f06:	460d      	mov	r5, r1
   18f08:	4616      	mov	r6, r2
	if (cb) {
   18f0a:	2a00      	cmp	r2, #0
   18f0c:	d04f      	beq.n	18fae <bt_conn_send_cb+0xb6>
		tx = conn_tx_alloc();
   18f0e:	f7ff fe2b 	bl	18b68 <conn_tx_alloc>
		if (!tx) {
   18f12:	4680      	mov	r8, r0
   18f14:	b310      	cbz	r0, 18f5c <bt_conn_send_cb+0x64>
		if (conn->state != BT_CONN_CONNECTED) {
   18f16:	7aa3      	ldrb	r3, [r4, #10]
   18f18:	2b07      	cmp	r3, #7
   18f1a:	d132      	bne.n	18f82 <bt_conn_send_cb+0x8a>
		tx->cb = cb;
   18f1c:	6046      	str	r6, [r0, #4]
		tx->user_data = user_data;
   18f1e:	6087      	str	r7, [r0, #8]
		tx->pending_no_cb = 0U;
   18f20:	2300      	movs	r3, #0
   18f22:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   18f24:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
   18f26:	4629      	mov	r1, r5
   18f28:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18f2c:	f011 f917 	bl	2a15e <net_buf_put>
	return 0;
   18f30:	2000      	movs	r0, #0
}
   18f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18f36:	4b1f      	ldr	r3, [pc, #124]	; (18fb4 <bt_conn_send_cb+0xbc>)
   18f38:	4a1f      	ldr	r2, [pc, #124]	; (18fb8 <bt_conn_send_cb+0xc0>)
   18f3a:	1a9b      	subs	r3, r3, r2
   18f3c:	08db      	lsrs	r3, r3, #3
		BT_ERR("not connected!");
   18f3e:	f04f 0100 	mov.w	r1, #0
   18f42:	2201      	movs	r2, #1
   18f44:	f362 0102 	bfi	r1, r2, #0, #3
   18f48:	f36f 01c5 	bfc	r1, #3, #3
   18f4c:	f363 118f 	bfi	r1, r3, #6, #10
   18f50:	481a      	ldr	r0, [pc, #104]	; (18fbc <bt_conn_send_cb+0xc4>)
   18f52:	f7f9 f86b 	bl	1202c <log_0>
		return -ENOTCONN;
   18f56:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18f5a:	e7ea      	b.n	18f32 <bt_conn_send_cb+0x3a>
   18f5c:	4b15      	ldr	r3, [pc, #84]	; (18fb4 <bt_conn_send_cb+0xbc>)
   18f5e:	4a16      	ldr	r2, [pc, #88]	; (18fb8 <bt_conn_send_cb+0xc0>)
   18f60:	1a9b      	subs	r3, r3, r2
   18f62:	08db      	lsrs	r3, r3, #3
			BT_ERR("Unable to allocate TX context");
   18f64:	f04f 0100 	mov.w	r1, #0
   18f68:	2201      	movs	r2, #1
   18f6a:	f362 0102 	bfi	r1, r2, #0, #3
   18f6e:	f36f 01c5 	bfc	r1, #3, #3
   18f72:	f363 118f 	bfi	r1, r3, #6, #10
   18f76:	4812      	ldr	r0, [pc, #72]	; (18fc0 <bt_conn_send_cb+0xc8>)
   18f78:	f7f9 f858 	bl	1202c <log_0>
			return -ENOBUFS;
   18f7c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18f80:	e7d7      	b.n	18f32 <bt_conn_send_cb+0x3a>
   18f82:	4b0c      	ldr	r3, [pc, #48]	; (18fb4 <bt_conn_send_cb+0xbc>)
   18f84:	4a0c      	ldr	r2, [pc, #48]	; (18fb8 <bt_conn_send_cb+0xc0>)
   18f86:	1a9b      	subs	r3, r3, r2
   18f88:	08db      	lsrs	r3, r3, #3
			BT_WARN("Disconnected while allocating context");
   18f8a:	f04f 0100 	mov.w	r1, #0
   18f8e:	2202      	movs	r2, #2
   18f90:	f362 0102 	bfi	r1, r2, #0, #3
   18f94:	f36f 01c5 	bfc	r1, #3, #3
   18f98:	f363 118f 	bfi	r1, r3, #6, #10
   18f9c:	4809      	ldr	r0, [pc, #36]	; (18fc4 <bt_conn_send_cb+0xcc>)
   18f9e:	f7f9 f845 	bl	1202c <log_0>
			tx_free(tx);
   18fa2:	4640      	mov	r0, r8
   18fa4:	f7ff fdd4 	bl	18b50 <tx_free>
			return -ENOTCONN;
   18fa8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18fac:	e7c1      	b.n	18f32 <bt_conn_send_cb+0x3a>
		tx_data(buf)->tx = NULL;
   18fae:	2300      	movs	r3, #0
   18fb0:	614b      	str	r3, [r1, #20]
   18fb2:	e7b8      	b.n	18f26 <bt_conn_send_cb+0x2e>
   18fb4:	0002c620 	.word	0x0002c620
   18fb8:	0002c610 	.word	0x0002c610
   18fbc:	0002e1ac 	.word	0x0002e1ac
   18fc0:	0002e1bc 	.word	0x0002e1bc
   18fc4:	0002e1dc 	.word	0x0002e1dc

00018fc8 <bt_conn_prepare_events>:
{
   18fc8:	b570      	push	{r4, r5, r6, lr}
   18fca:	4606      	mov	r6, r0
	conn_change.signaled = 0U;
   18fcc:	4b0d      	ldr	r3, [pc, #52]	; (19004 <bt_conn_prepare_events+0x3c>)
   18fce:	2400      	movs	r4, #0
   18fd0:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   18fd2:	4622      	mov	r2, r4
   18fd4:	2101      	movs	r1, #1
   18fd6:	f013 f92a 	bl	2c22e <k_poll_event_init>
   18fda:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   18fdc:	2c00      	cmp	r4, #0
   18fde:	dd01      	ble.n	18fe4 <bt_conn_prepare_events+0x1c>
}
   18fe0:	4628      	mov	r0, r5
   18fe2:	bd70      	pop	{r4, r5, r6, pc}
		conn = &acl_conns[i];
   18fe4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
		if (!conn_prepare_events(conn, &events[ev_count])) {
   18fe8:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   18fec:	eb06 0181 	add.w	r1, r6, r1, lsl #2
   18ff0:	4b05      	ldr	r3, [pc, #20]	; (19008 <bt_conn_prepare_events+0x40>)
   18ff2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   18ff6:	f00f f970 	bl	282da <conn_prepare_events>
   18ffa:	b900      	cbnz	r0, 18ffe <bt_conn_prepare_events+0x36>
			ev_count++;
   18ffc:	3501      	adds	r5, #1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   18ffe:	3401      	adds	r4, #1
   19000:	e7ec      	b.n	18fdc <bt_conn_prepare_events+0x14>
   19002:	bf00      	nop
   19004:	200005a4 	.word	0x200005a4
   19008:	20001ac0 	.word	0x20001ac0

0001900c <bt_conn_lookup_handle>:
{
   1900c:	b508      	push	{r3, lr}
   1900e:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19010:	2101      	movs	r1, #1
   19012:	4802      	ldr	r0, [pc, #8]	; (1901c <bt_conn_lookup_handle+0x10>)
   19014:	f00f f9d6 	bl	283c4 <conn_lookup_handle>
}
   19018:	bd08      	pop	{r3, pc}
   1901a:	bf00      	nop
   1901c:	20001ac0 	.word	0x20001ac0

00019020 <bt_conn_set_state>:
{
   19020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19022:	460e      	mov	r6, r1
	if (conn->state == state) {
   19024:	7a85      	ldrb	r5, [r0, #10]
   19026:	428d      	cmp	r5, r1
   19028:	d014      	beq.n	19054 <bt_conn_set_state+0x34>
   1902a:	4604      	mov	r4, r0
	conn->state = state;
   1902c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1902e:	2d00      	cmp	r5, #0
   19030:	d03d      	beq.n	190ae <bt_conn_set_state+0x8e>
   19032:	2d06      	cmp	r5, #6
   19034:	d041      	beq.n	190ba <bt_conn_set_state+0x9a>
	switch (conn->state) {
   19036:	7aa3      	ldrb	r3, [r4, #10]
   19038:	2b08      	cmp	r3, #8
   1903a:	f200 80e3 	bhi.w	19204 <bt_conn_set_state+0x1e4>
   1903e:	e8df f013 	tbh	[pc, r3, lsl #1]
   19042:	0053      	.short	0x0053
   19044:	00e000dd 	.word	0x00e000dd
   19048:	00e000e0 	.word	0x00e000e0
   1904c:	00b900e0 	.word	0x00b900e0
   19050:	00e00043 	.word	0x00e00043
   19054:	4b74      	ldr	r3, [pc, #464]	; (19228 <bt_conn_set_state+0x208>)
   19056:	4a75      	ldr	r2, [pc, #468]	; (1922c <bt_conn_set_state+0x20c>)
   19058:	1a9b      	subs	r3, r3, r2
   1905a:	08db      	lsrs	r3, r3, #3
		BT_WARN("no transition %s", state2str(state));
   1905c:	f04f 0200 	mov.w	r2, #0
   19060:	2102      	movs	r1, #2
   19062:	f361 0202 	bfi	r2, r1, #0, #3
   19066:	f36f 02c5 	bfc	r2, #3, #3
   1906a:	f363 128f 	bfi	r2, r3, #6, #10
	switch (state) {
   1906e:	2e08      	cmp	r6, #8
   19070:	d819      	bhi.n	190a6 <bt_conn_set_state+0x86>
   19072:	e8df f006 	tbb	[pc, r6]
   19076:	1a05      	.short	0x1a05
   19078:	0c0e100a 	.word	0x0c0e100a
   1907c:	1412      	.short	0x1412
   1907e:	16          	.byte	0x16
   1907f:	00          	.byte	0x00
		BT_WARN("no transition %s", state2str(state));
   19080:	496b      	ldr	r1, [pc, #428]	; (19230 <bt_conn_set_state+0x210>)
   19082:	486c      	ldr	r0, [pc, #432]	; (19234 <bt_conn_set_state+0x214>)
   19084:	f7f8 ff1c 	bl	11ec0 <log_1>
		return;
   19088:	e0bb      	b.n	19202 <bt_conn_set_state+0x1e2>
		return "connect-scan";
   1908a:	496b      	ldr	r1, [pc, #428]	; (19238 <bt_conn_set_state+0x218>)
   1908c:	e7f9      	b.n	19082 <bt_conn_set_state+0x62>
		return "connect-dir-adv";
   1908e:	496b      	ldr	r1, [pc, #428]	; (1923c <bt_conn_set_state+0x21c>)
   19090:	e7f7      	b.n	19082 <bt_conn_set_state+0x62>
		return "connect-adv";
   19092:	496b      	ldr	r1, [pc, #428]	; (19240 <bt_conn_set_state+0x220>)
   19094:	e7f5      	b.n	19082 <bt_conn_set_state+0x62>
		return "connect-auto";
   19096:	496b      	ldr	r1, [pc, #428]	; (19244 <bt_conn_set_state+0x224>)
   19098:	e7f3      	b.n	19082 <bt_conn_set_state+0x62>
		return "connect";
   1909a:	496b      	ldr	r1, [pc, #428]	; (19248 <bt_conn_set_state+0x228>)
   1909c:	e7f1      	b.n	19082 <bt_conn_set_state+0x62>
		return "connected";
   1909e:	496b      	ldr	r1, [pc, #428]	; (1924c <bt_conn_set_state+0x22c>)
   190a0:	e7ef      	b.n	19082 <bt_conn_set_state+0x62>
		return "disconnect";
   190a2:	496b      	ldr	r1, [pc, #428]	; (19250 <bt_conn_set_state+0x230>)
   190a4:	e7ed      	b.n	19082 <bt_conn_set_state+0x62>
		return "(unknown)";
   190a6:	496b      	ldr	r1, [pc, #428]	; (19254 <bt_conn_set_state+0x234>)
   190a8:	e7eb      	b.n	19082 <bt_conn_set_state+0x62>
		return "disconnect-complete";
   190aa:	496b      	ldr	r1, [pc, #428]	; (19258 <bt_conn_set_state+0x238>)
   190ac:	e7e9      	b.n	19082 <bt_conn_set_state+0x62>
		if (conn->type != BT_CONN_TYPE_ISO) {
   190ae:	7883      	ldrb	r3, [r0, #2]
   190b0:	2b08      	cmp	r3, #8
   190b2:	d0c0      	beq.n	19036 <bt_conn_set_state+0x16>
			bt_conn_ref(conn);
   190b4:	f00f f952 	bl	2835c <bt_conn_ref>
   190b8:	e7bd      	b.n	19036 <bt_conn_set_state+0x16>
		    conn->type == BT_CONN_TYPE_LE) {
   190ba:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   190bc:	2b01      	cmp	r3, #1
   190be:	d1ba      	bne.n	19036 <bt_conn_set_state+0x16>
			k_work_cancel_delayable(&conn->deferred_work);
   190c0:	3058      	adds	r0, #88	; 0x58
   190c2:	f012 fd83 	bl	2bbcc <k_work_cancel_delayable>
   190c6:	e7b6      	b.n	19036 <bt_conn_set_state+0x16>
		if (conn->type == BT_CONN_TYPE_SCO) {
   190c8:	78a3      	ldrb	r3, [r4, #2]
   190ca:	2b04      	cmp	r3, #4
   190cc:	f000 8099 	beq.w	19202 <bt_conn_set_state+0x1e2>
		k_fifo_init(&conn->tx_queue);
   190d0:	f104 0038 	add.w	r0, r4, #56	; 0x38
	z_impl_k_queue_init(queue);
   190d4:	f012 fc20 	bl	2b918 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   190d8:	2100      	movs	r1, #0
   190da:	4860      	ldr	r0, [pc, #384]	; (1925c <bt_conn_set_state+0x23c>)
   190dc:	f00a f8da 	bl	23294 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   190e0:	2300      	movs	r3, #0
   190e2:	6523      	str	r3, [r4, #80]	; 0x50
	list->tail = NULL;
   190e4:	6563      	str	r3, [r4, #84]	; 0x54
}
   190e6:	e08c      	b.n	19202 <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   190e8:	78a3      	ldrb	r3, [r4, #2]
   190ea:	2b04      	cmp	r3, #4
   190ec:	d009      	beq.n	19102 <bt_conn_set_state+0xe2>
		switch (old_state) {
   190ee:	2d08      	cmp	r5, #8
   190f0:	f200 8087 	bhi.w	19202 <bt_conn_set_state+0x1e2>
   190f4:	e8df f005 	tbb	[pc, r5]
   190f8:	4430094c 	.word	0x4430094c
   190fc:	4c263a48 	.word	0x4c263a48
   19100:	4c          	.byte	0x4c
   19101:	00          	.byte	0x00
			bt_conn_unref(conn);
   19102:	4620      	mov	r0, r4
   19104:	f00f f951 	bl	283aa <bt_conn_unref>
			break;
   19108:	e07b      	b.n	19202 <bt_conn_set_state+0x1e2>
			tx_notify(conn);
   1910a:	4620      	mov	r0, r4
   1910c:	f00f f831 	bl	28172 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   19110:	78a3      	ldrb	r3, [r4, #2]
   19112:	2b01      	cmp	r3, #1
   19114:	d011      	beq.n	1913a <bt_conn_set_state+0x11a>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
   19116:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19118:	f3bf 8f5b 	dmb	ish
   1911c:	e854 3f00 	ldrex	r3, [r4]
   19120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19124:	e844 3200 	strex	r2, r3, [r4]
   19128:	2a00      	cmp	r2, #0
   1912a:	d1f7      	bne.n	1911c <bt_conn_set_state+0xfc>
   1912c:	f3bf 8f5b 	dmb	ish
   19130:	2100      	movs	r1, #0
   19132:	484a      	ldr	r0, [pc, #296]	; (1925c <bt_conn_set_state+0x23c>)
   19134:	f00a f8ae 	bl	23294 <z_impl_k_poll_signal_raise>
   19138:	e063      	b.n	19202 <bt_conn_set_state+0x1e2>
				k_work_cancel_delayable(&conn->deferred_work);
   1913a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1913e:	f012 fd45 	bl	2bbcc <k_work_cancel_delayable>
   19142:	e7e8      	b.n	19116 <bt_conn_set_state+0xf6>
			if (conn->err) {
   19144:	7a63      	ldrb	r3, [r4, #9]
   19146:	b91b      	cbnz	r3, 19150 <bt_conn_set_state+0x130>
			bt_conn_unref(conn);
   19148:	4620      	mov	r0, r4
   1914a:	f00f f92e 	bl	283aa <bt_conn_unref>
			break;
   1914e:	e058      	b.n	19202 <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   19150:	4620      	mov	r0, r4
   19152:	f7ff fd21 	bl	18b98 <notify_connected>
   19156:	e7f7      	b.n	19148 <bt_conn_set_state+0x128>
			if (conn->err) {
   19158:	7a63      	ldrb	r3, [r4, #9]
   1915a:	b91b      	cbnz	r3, 19164 <bt_conn_set_state+0x144>
			bt_conn_unref(conn);
   1915c:	4620      	mov	r0, r4
   1915e:	f00f f924 	bl	283aa <bt_conn_unref>
			break;
   19162:	e04e      	b.n	19202 <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   19164:	4620      	mov	r0, r4
   19166:	f7ff fd17 	bl	18b98 <notify_connected>
   1916a:	e7f7      	b.n	1915c <bt_conn_set_state+0x13c>
			if (conn->err) {
   1916c:	7a63      	ldrb	r3, [r4, #9]
   1916e:	b91b      	cbnz	r3, 19178 <bt_conn_set_state+0x158>
			bt_conn_unref(conn);
   19170:	4620      	mov	r0, r4
   19172:	f00f f91a 	bl	283aa <bt_conn_unref>
			break;
   19176:	e044      	b.n	19202 <bt_conn_set_state+0x1e2>
				notify_connected(conn);
   19178:	4620      	mov	r0, r4
   1917a:	f7ff fd0d 	bl	18b98 <notify_connected>
   1917e:	e7f7      	b.n	19170 <bt_conn_set_state+0x150>
			bt_conn_unref(conn);
   19180:	4620      	mov	r0, r4
   19182:	f00f f912 	bl	283aa <bt_conn_unref>
			break;
   19186:	e03c      	b.n	19202 <bt_conn_set_state+0x1e2>
			bt_conn_unref(conn);
   19188:	4620      	mov	r0, r4
   1918a:	f00f f90e 	bl	283aa <bt_conn_unref>
			break;
   1918e:	e038      	b.n	19202 <bt_conn_set_state+0x1e2>
   19190:	4b25      	ldr	r3, [pc, #148]	; (19228 <bt_conn_set_state+0x208>)
   19192:	4a26      	ldr	r2, [pc, #152]	; (1922c <bt_conn_set_state+0x20c>)
   19194:	1a9b      	subs	r3, r3, r2
   19196:	08db      	lsrs	r3, r3, #3
			BT_WARN("Invalid (%u) old state", state);
   19198:	f04f 0200 	mov.w	r2, #0
   1919c:	2102      	movs	r1, #2
   1919e:	f361 0202 	bfi	r2, r1, #0, #3
   191a2:	f36f 02c5 	bfc	r2, #3, #3
   191a6:	f363 128f 	bfi	r2, r3, #6, #10
   191aa:	4631      	mov	r1, r6
   191ac:	482c      	ldr	r0, [pc, #176]	; (19260 <bt_conn_set_state+0x240>)
   191ae:	f7f8 fe87 	bl	11ec0 <log_1>
   191b2:	e026      	b.n	19202 <bt_conn_set_state+0x1e2>
		if (conn->type == BT_CONN_TYPE_SCO) {
   191b4:	78a3      	ldrb	r3, [r4, #2]
   191b6:	2b04      	cmp	r3, #4
   191b8:	d023      	beq.n	19202 <bt_conn_set_state+0x1e2>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   191ba:	2b01      	cmp	r3, #1
   191bc:	d121      	bne.n	19202 <bt_conn_set_state+0x1e2>
					K_MSEC(10 * bt_dev.create_param.timeout));
   191be:	4b29      	ldr	r3, [pc, #164]	; (19264 <bt_conn_set_state+0x244>)
   191c0:	8a9b      	ldrh	r3, [r3, #20]
   191c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   191c6:	005b      	lsls	r3, r3, #1
   191c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   191cc:	17df      	asrs	r7, r3, #31
		} else {
			return (t * to_hz + off) / from_hz;
   191ce:	03f9      	lsls	r1, r7, #15
   191d0:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   191d4:	03d8      	lsls	r0, r3, #15
   191d6:	f240 35e7 	movw	r5, #999	; 0x3e7
   191da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   191de:	2300      	movs	r3, #0
   191e0:	1940      	adds	r0, r0, r5
   191e2:	f04f 0500 	mov.w	r5, #0
   191e6:	eb45 0101 	adc.w	r1, r5, r1
   191ea:	f7e7 ff89 	bl	1100 <__aeabi_uldivmod>
   191ee:	4602      	mov	r2, r0
   191f0:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   191f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   191f6:	f008 ff53 	bl	220a0 <k_work_schedule>
   191fa:	e002      	b.n	19202 <bt_conn_set_state+0x1e2>
		process_unack_tx(conn);
   191fc:	4620      	mov	r0, r4
   191fe:	f00f f804 	bl	2820a <process_unack_tx>
}
   19202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19204:	4b08      	ldr	r3, [pc, #32]	; (19228 <bt_conn_set_state+0x208>)
   19206:	4a09      	ldr	r2, [pc, #36]	; (1922c <bt_conn_set_state+0x20c>)
   19208:	1a9b      	subs	r3, r3, r2
   1920a:	08db      	lsrs	r3, r3, #3
		BT_WARN("no valid (%u) state was set", state);
   1920c:	f04f 0200 	mov.w	r2, #0
   19210:	2102      	movs	r1, #2
   19212:	f361 0202 	bfi	r2, r1, #0, #3
   19216:	f36f 02c5 	bfc	r2, #3, #3
   1921a:	f363 128f 	bfi	r2, r3, #6, #10
   1921e:	4631      	mov	r1, r6
   19220:	4811      	ldr	r0, [pc, #68]	; (19268 <bt_conn_set_state+0x248>)
   19222:	f7f8 fe4d 	bl	11ec0 <log_1>
   19226:	e7ec      	b.n	19202 <bt_conn_set_state+0x1e2>
   19228:	0002c620 	.word	0x0002c620
   1922c:	0002c610 	.word	0x0002c610
   19230:	0002e274 	.word	0x0002e274
   19234:	0002e284 	.word	0x0002e284
   19238:	0002e224 	.word	0x0002e224
   1923c:	0002e234 	.word	0x0002e234
   19240:	0002e244 	.word	0x0002e244
   19244:	0002e250 	.word	0x0002e250
   19248:	0002e260 	.word	0x0002e260
   1924c:	0002e540 	.word	0x0002e540
   19250:	0002e268 	.word	0x0002e268
   19254:	0002e204 	.word	0x0002e204
   19258:	0002e210 	.word	0x0002e210
   1925c:	200005a4 	.word	0x200005a4
   19260:	0002e298 	.word	0x0002e298
   19264:	200002a0 	.word	0x200002a0
   19268:	0002e2b0 	.word	0x0002e2b0

0001926c <bt_conn_index>:
		index = conn - acl_conns;
   1926c:	4b03      	ldr	r3, [pc, #12]	; (1927c <bt_conn_index+0x10>)
   1926e:	1ac0      	subs	r0, r0, r3
   19270:	1180      	asrs	r0, r0, #6
   19272:	4b03      	ldr	r3, [pc, #12]	; (19280 <bt_conn_index+0x14>)
   19274:	fb03 f000 	mul.w	r0, r3, r0
}
   19278:	b2c0      	uxtb	r0, r0
   1927a:	4770      	bx	lr
   1927c:	20001ac0 	.word	0x20001ac0
   19280:	aaaaaaab 	.word	0xaaaaaaab

00019284 <bt_conn_create_pdu_timeout>:
{
   19284:	b538      	push	{r3, r4, r5, lr}
   19286:	460c      	mov	r4, r1
	if (!pool) {
   19288:	4601      	mov	r1, r0
   1928a:	b150      	cbz	r0, 192a2 <bt_conn_create_pdu_timeout+0x1e>
	return net_buf_alloc_fixed(pool, timeout);
   1928c:	4608      	mov	r0, r1
   1928e:	f010 ff3a 	bl	2a106 <net_buf_alloc_fixed>
	if (!buf) {
   19292:	4605      	mov	r5, r0
   19294:	b138      	cbz	r0, 192a6 <bt_conn_create_pdu_timeout+0x22>
	net_buf_simple_reserve(&buf->b, reserve);
   19296:	1d21      	adds	r1, r4, #4
   19298:	3008      	adds	r0, #8
   1929a:	f010 ff5c 	bl	2a156 <net_buf_simple_reserve>
}
   1929e:	4628      	mov	r0, r5
   192a0:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
   192a2:	4909      	ldr	r1, [pc, #36]	; (192c8 <bt_conn_create_pdu_timeout+0x44>)
   192a4:	e7f2      	b.n	1928c <bt_conn_create_pdu_timeout+0x8>
   192a6:	4b09      	ldr	r3, [pc, #36]	; (192cc <bt_conn_create_pdu_timeout+0x48>)
   192a8:	4a09      	ldr	r2, [pc, #36]	; (192d0 <bt_conn_create_pdu_timeout+0x4c>)
   192aa:	1a9b      	subs	r3, r3, r2
   192ac:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unable to allocate buffer within timeout");
   192ae:	f04f 0100 	mov.w	r1, #0
   192b2:	2202      	movs	r2, #2
   192b4:	f362 0102 	bfi	r1, r2, #0, #3
   192b8:	f36f 01c5 	bfc	r1, #3, #3
   192bc:	f363 118f 	bfi	r1, r3, #6, #10
   192c0:	4804      	ldr	r0, [pc, #16]	; (192d4 <bt_conn_create_pdu_timeout+0x50>)
   192c2:	f7f8 feb3 	bl	1202c <log_0>
		return NULL;
   192c6:	e7ea      	b.n	1929e <bt_conn_create_pdu_timeout+0x1a>
   192c8:	200008b0 	.word	0x200008b0
   192cc:	0002c620 	.word	0x0002c620
   192d0:	0002c610 	.word	0x0002c610
   192d4:	0002e2cc 	.word	0x0002e2cc

000192d8 <notify_le_param_updated>:
{
   192d8:	b570      	push	{r4, r5, r6, lr}
   192da:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   192dc:	f3bf 8f5b 	dmb	ish
   192e0:	6843      	ldr	r3, [r0, #4]
   192e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   192e6:	f413 7f00 	tst.w	r3, #512	; 0x200
   192ea:	d010      	beq.n	1930e <notify_le_param_updated+0x36>
   192ec:	1d02      	adds	r2, r0, #4
	    conn->le.interval >= conn->le.interval_min &&
   192ee:	f8b0 309e 	ldrh.w	r3, [r0, #158]	; 0x9e
   192f2:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   192f6:	428b      	cmp	r3, r1
   192f8:	d309      	bcc.n	1930e <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
   192fa:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
	    conn->le.interval >= conn->le.interval_min &&
   192fe:	428b      	cmp	r3, r1
   19300:	d805      	bhi.n	1930e <notify_le_param_updated+0x36>
	    conn->le.latency == conn->le.pending_latency &&
   19302:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
   19306:	f8d0 30a8 	ldr.w	r3, [r0, #168]	; 0xa8
   1930a:	4299      	cmp	r1, r3
   1930c:	d002      	beq.n	19314 <notify_le_param_updated+0x3c>
	for (cb = callback_list; cb; cb = cb->_next) {
   1930e:	4b18      	ldr	r3, [pc, #96]	; (19370 <notify_le_param_updated+0x98>)
   19310:	681d      	ldr	r5, [r3, #0]
   19312:	e00d      	b.n	19330 <notify_le_param_updated+0x58>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19314:	f3bf 8f5b 	dmb	ish
   19318:	e852 3f00 	ldrex	r3, [r2]
   1931c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   19320:	e842 3100 	strex	r1, r3, [r2]
   19324:	2900      	cmp	r1, #0
   19326:	d1f7      	bne.n	19318 <notify_le_param_updated+0x40>
   19328:	f3bf 8f5b 	dmb	ish
}
   1932c:	e7ef      	b.n	1930e <notify_le_param_updated+0x36>
   1932e:	692d      	ldr	r5, [r5, #16]
   19330:	b15d      	cbz	r5, 1934a <notify_le_param_updated+0x72>
		if (cb->le_param_updated) {
   19332:	68ee      	ldr	r6, [r5, #12]
   19334:	2e00      	cmp	r6, #0
   19336:	d0fa      	beq.n	1932e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
   19338:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   1933c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19340:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19344:	4620      	mov	r0, r4
   19346:	47b0      	blx	r6
   19348:	e7f1      	b.n	1932e <notify_le_param_updated+0x56>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1934a:	4d0a      	ldr	r5, [pc, #40]	; (19374 <notify_le_param_updated+0x9c>)
   1934c:	e000      	b.n	19350 <notify_le_param_updated+0x78>
   1934e:	3514      	adds	r5, #20
   19350:	4b09      	ldr	r3, [pc, #36]	; (19378 <notify_le_param_updated+0xa0>)
   19352:	429d      	cmp	r5, r3
   19354:	d20b      	bcs.n	1936e <notify_le_param_updated+0x96>
		if (cb->le_param_updated) {
   19356:	68ee      	ldr	r6, [r5, #12]
   19358:	2e00      	cmp	r6, #0
   1935a:	d0f8      	beq.n	1934e <notify_le_param_updated+0x76>
			cb->le_param_updated(conn, conn->le.interval,
   1935c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   19360:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   19364:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   19368:	4620      	mov	r0, r4
   1936a:	47b0      	blx	r6
   1936c:	e7ef      	b.n	1934e <notify_le_param_updated+0x76>
}
   1936e:	bd70      	pop	{r4, r5, r6, pc}
   19370:	20002be4 	.word	0x20002be4
   19374:	0002c5ec 	.word	0x0002c5ec
   19378:	0002c600 	.word	0x0002c600

0001937c <le_param_req>:
{
   1937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1937e:	4606      	mov	r6, r0
   19380:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19382:	4608      	mov	r0, r1
   19384:	f00e fd8d 	bl	27ea2 <bt_le_conn_params_valid>
   19388:	4607      	mov	r7, r0
   1938a:	b338      	cbz	r0, 193dc <le_param_req+0x60>
	for (cb = callback_list; cb; cb = cb->_next) {
   1938c:	4b15      	ldr	r3, [pc, #84]	; (193e4 <le_param_req+0x68>)
   1938e:	681c      	ldr	r4, [r3, #0]
   19390:	e000      	b.n	19394 <le_param_req+0x18>
   19392:	6924      	ldr	r4, [r4, #16]
   19394:	b16c      	cbz	r4, 193b2 <le_param_req+0x36>
		if (!cb->le_param_req) {
   19396:	68a3      	ldr	r3, [r4, #8]
   19398:	2b00      	cmp	r3, #0
   1939a:	d0fa      	beq.n	19392 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
   1939c:	4629      	mov	r1, r5
   1939e:	4630      	mov	r0, r6
   193a0:	4798      	blx	r3
   193a2:	b1d0      	cbz	r0, 193da <le_param_req+0x5e>
		if (!bt_le_conn_params_valid(param)) {
   193a4:	4628      	mov	r0, r5
   193a6:	f00e fd7c 	bl	27ea2 <bt_le_conn_params_valid>
   193aa:	2800      	cmp	r0, #0
   193ac:	d1f1      	bne.n	19392 <le_param_req+0x16>
			return false;
   193ae:	4607      	mov	r7, r0
   193b0:	e014      	b.n	193dc <le_param_req+0x60>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   193b2:	4c0d      	ldr	r4, [pc, #52]	; (193e8 <le_param_req+0x6c>)
   193b4:	e000      	b.n	193b8 <le_param_req+0x3c>
   193b6:	3414      	adds	r4, #20
   193b8:	4b0c      	ldr	r3, [pc, #48]	; (193ec <le_param_req+0x70>)
   193ba:	429c      	cmp	r4, r3
   193bc:	d20e      	bcs.n	193dc <le_param_req+0x60>
		if (!cb->le_param_req) {
   193be:	68a3      	ldr	r3, [r4, #8]
   193c0:	2b00      	cmp	r3, #0
   193c2:	d0f8      	beq.n	193b6 <le_param_req+0x3a>
		if (!cb->le_param_req(conn, param)) {
   193c4:	4629      	mov	r1, r5
   193c6:	4630      	mov	r0, r6
   193c8:	4798      	blx	r3
   193ca:	b148      	cbz	r0, 193e0 <le_param_req+0x64>
		if (!bt_le_conn_params_valid(param)) {
   193cc:	4628      	mov	r0, r5
   193ce:	f00e fd68 	bl	27ea2 <bt_le_conn_params_valid>
   193d2:	2800      	cmp	r0, #0
   193d4:	d1ef      	bne.n	193b6 <le_param_req+0x3a>
			return false;
   193d6:	4607      	mov	r7, r0
   193d8:	e000      	b.n	193dc <le_param_req+0x60>
			return false;
   193da:	4607      	mov	r7, r0
}
   193dc:	4638      	mov	r0, r7
   193de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   193e0:	4607      	mov	r7, r0
   193e2:	e7fb      	b.n	193dc <le_param_req+0x60>
   193e4:	20002be4 	.word	0x20002be4
   193e8:	0002c5ec 	.word	0x0002c5ec
   193ec:	0002c600 	.word	0x0002c600

000193f0 <bt_conn_lookup_addr_le>:
{
   193f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   193f2:	4607      	mov	r7, r0
   193f4:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   193f6:	2400      	movs	r4, #0
   193f8:	2c00      	cmp	r4, #0
   193fa:	dd02      	ble.n	19402 <bt_conn_lookup_addr_le+0x12>
	return NULL;
   193fc:	2500      	movs	r5, #0
}
   193fe:	4628      	mov	r0, r5
   19400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19402:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   19406:	480c      	ldr	r0, [pc, #48]	; (19438 <bt_conn_lookup_addr_le+0x48>)
   19408:	eb00 1083 	add.w	r0, r0, r3, lsl #6
   1940c:	f00e ffa6 	bl	2835c <bt_conn_ref>
		if (!conn) {
   19410:	4605      	mov	r5, r0
   19412:	b170      	cbz	r0, 19432 <bt_conn_lookup_addr_le+0x42>
		if (conn->type != BT_CONN_TYPE_LE) {
   19414:	7883      	ldrb	r3, [r0, #2]
   19416:	2b01      	cmp	r3, #1
   19418:	d109      	bne.n	1942e <bt_conn_lookup_addr_le+0x3e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1941a:	4632      	mov	r2, r6
   1941c:	4639      	mov	r1, r7
   1941e:	f00f f81e 	bl	2845e <bt_conn_is_peer_addr_le>
   19422:	2800      	cmp	r0, #0
   19424:	d1eb      	bne.n	193fe <bt_conn_lookup_addr_le+0xe>
			bt_conn_unref(conn);
   19426:	4628      	mov	r0, r5
   19428:	f00e ffbf 	bl	283aa <bt_conn_unref>
			continue;
   1942c:	e001      	b.n	19432 <bt_conn_lookup_addr_le+0x42>
			bt_conn_unref(conn);
   1942e:	f00e ffbc 	bl	283aa <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19432:	3401      	adds	r4, #1
   19434:	e7e0      	b.n	193f8 <bt_conn_lookup_addr_le+0x8>
   19436:	bf00      	nop
   19438:	20001ac0 	.word	0x20001ac0

0001943c <bt_conn_exists_le>:
{
   1943c:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1943e:	f7ff ffd7 	bl	193f0 <bt_conn_lookup_addr_le>
	if (conn) {
   19442:	b908      	cbnz	r0, 19448 <bt_conn_exists_le+0xc>
	return false;
   19444:	2000      	movs	r0, #0
}
   19446:	bd10      	pop	{r4, pc}
   19448:	4604      	mov	r4, r0
   1944a:	4b19      	ldr	r3, [pc, #100]	; (194b0 <bt_conn_exists_le+0x74>)
   1944c:	4a19      	ldr	r2, [pc, #100]	; (194b4 <bt_conn_exists_le+0x78>)
   1944e:	1a9b      	subs	r3, r3, r2
   19450:	08db      	lsrs	r3, r3, #3
		BT_WARN("Found valid connection in %s state",
   19452:	f04f 0200 	mov.w	r2, #0
   19456:	2102      	movs	r1, #2
   19458:	f361 0202 	bfi	r2, r1, #0, #3
   1945c:	f36f 02c5 	bfc	r2, #3, #3
   19460:	f363 128f 	bfi	r2, r3, #6, #10
   19464:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   19466:	2b08      	cmp	r3, #8
   19468:	d81d      	bhi.n	194a6 <bt_conn_exists_le+0x6a>
   1946a:	e8df f003 	tbb	[pc, r3]
   1946e:	1e05      	.short	0x1e05
   19470:	1012140e 	.word	0x1012140e
   19474:	1816      	.short	0x1816
   19476:	1a          	.byte	0x1a
   19477:	00          	.byte	0x00
		BT_WARN("Found valid connection in %s state",
   19478:	490f      	ldr	r1, [pc, #60]	; (194b8 <bt_conn_exists_le+0x7c>)
   1947a:	4810      	ldr	r0, [pc, #64]	; (194bc <bt_conn_exists_le+0x80>)
   1947c:	f7f8 fd20 	bl	11ec0 <log_1>
		bt_conn_unref(conn);
   19480:	4620      	mov	r0, r4
   19482:	f00e ff92 	bl	283aa <bt_conn_unref>
		return true;
   19486:	2001      	movs	r0, #1
   19488:	e7dd      	b.n	19446 <bt_conn_exists_le+0xa>
		return "connect-scan";
   1948a:	490d      	ldr	r1, [pc, #52]	; (194c0 <bt_conn_exists_le+0x84>)
   1948c:	e7f5      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "connect-dir-adv";
   1948e:	490d      	ldr	r1, [pc, #52]	; (194c4 <bt_conn_exists_le+0x88>)
   19490:	e7f3      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "connect-adv";
   19492:	490d      	ldr	r1, [pc, #52]	; (194c8 <bt_conn_exists_le+0x8c>)
   19494:	e7f1      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "connect-auto";
   19496:	490d      	ldr	r1, [pc, #52]	; (194cc <bt_conn_exists_le+0x90>)
   19498:	e7ef      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "connect";
   1949a:	490d      	ldr	r1, [pc, #52]	; (194d0 <bt_conn_exists_le+0x94>)
   1949c:	e7ed      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "connected";
   1949e:	490d      	ldr	r1, [pc, #52]	; (194d4 <bt_conn_exists_le+0x98>)
   194a0:	e7eb      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "disconnect";
   194a2:	490d      	ldr	r1, [pc, #52]	; (194d8 <bt_conn_exists_le+0x9c>)
   194a4:	e7e9      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "(unknown)";
   194a6:	490d      	ldr	r1, [pc, #52]	; (194dc <bt_conn_exists_le+0xa0>)
   194a8:	e7e7      	b.n	1947a <bt_conn_exists_le+0x3e>
		return "disconnect-complete";
   194aa:	490d      	ldr	r1, [pc, #52]	; (194e0 <bt_conn_exists_le+0xa4>)
   194ac:	e7e5      	b.n	1947a <bt_conn_exists_le+0x3e>
   194ae:	bf00      	nop
   194b0:	0002c620 	.word	0x0002c620
   194b4:	0002c610 	.word	0x0002c610
   194b8:	0002e274 	.word	0x0002e274
   194bc:	0002e2f8 	.word	0x0002e2f8
   194c0:	0002e224 	.word	0x0002e224
   194c4:	0002e234 	.word	0x0002e234
   194c8:	0002e244 	.word	0x0002e244
   194cc:	0002e250 	.word	0x0002e250
   194d0:	0002e260 	.word	0x0002e260
   194d4:	0002e540 	.word	0x0002e540
   194d8:	0002e268 	.word	0x0002e268
   194dc:	0002e204 	.word	0x0002e204
   194e0:	0002e210 	.word	0x0002e210

000194e4 <bt_conn_lookup_state_le>:
{
   194e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194e8:	4607      	mov	r7, r0
   194ea:	460e      	mov	r6, r1
   194ec:	4690      	mov	r8, r2
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   194ee:	2400      	movs	r4, #0
   194f0:	2c00      	cmp	r4, #0
   194f2:	dd03      	ble.n	194fc <bt_conn_lookup_state_le+0x18>
	return NULL;
   194f4:	2500      	movs	r5, #0
}
   194f6:	4628      	mov	r0, r5
   194f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   194fc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   19500:	4b10      	ldr	r3, [pc, #64]	; (19544 <bt_conn_lookup_state_le+0x60>)
   19502:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   19506:	f00e ff29 	bl	2835c <bt_conn_ref>
		if (!conn) {
   1950a:	4605      	mov	r5, r0
   1950c:	b188      	cbz	r0, 19532 <bt_conn_lookup_state_le+0x4e>
		if (conn->type != BT_CONN_TYPE_LE) {
   1950e:	7883      	ldrb	r3, [r0, #2]
   19510:	2b01      	cmp	r3, #1
   19512:	d110      	bne.n	19536 <bt_conn_lookup_state_le+0x52>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   19514:	b126      	cbz	r6, 19520 <bt_conn_lookup_state_le+0x3c>
   19516:	4632      	mov	r2, r6
   19518:	4639      	mov	r1, r7
   1951a:	f00e ffa0 	bl	2845e <bt_conn_is_peer_addr_le>
   1951e:	b168      	cbz	r0, 1953c <bt_conn_lookup_state_le+0x58>
		if (!(conn->state == state && conn->id == id)) {
   19520:	7aab      	ldrb	r3, [r5, #10]
   19522:	4543      	cmp	r3, r8
   19524:	d102      	bne.n	1952c <bt_conn_lookup_state_le+0x48>
   19526:	7a2b      	ldrb	r3, [r5, #8]
   19528:	42bb      	cmp	r3, r7
   1952a:	d0e4      	beq.n	194f6 <bt_conn_lookup_state_le+0x12>
			bt_conn_unref(conn);
   1952c:	4628      	mov	r0, r5
   1952e:	f00e ff3c 	bl	283aa <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19532:	3401      	adds	r4, #1
   19534:	e7dc      	b.n	194f0 <bt_conn_lookup_state_le+0xc>
			bt_conn_unref(conn);
   19536:	f00e ff38 	bl	283aa <bt_conn_unref>
			continue;
   1953a:	e7fa      	b.n	19532 <bt_conn_lookup_state_le+0x4e>
			bt_conn_unref(conn);
   1953c:	4628      	mov	r0, r5
   1953e:	f00e ff34 	bl	283aa <bt_conn_unref>
			continue;
   19542:	e7f6      	b.n	19532 <bt_conn_lookup_state_le+0x4e>
   19544:	20001ac0 	.word	0x20001ac0

00019548 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   19548:	b5f0      	push	{r4, r5, r6, r7, lr}
   1954a:	b083      	sub	sp, #12
   1954c:	461f      	mov	r7, r3
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1954e:	f3bf 8f5b 	dmb	ish
   19552:	4b44      	ldr	r3, [pc, #272]	; (19664 <bt_conn_le_create+0x11c>)
   19554:	681b      	ldr	r3, [r3, #0]
   19556:	f3bf 8f5b 	dmb	ish
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1955a:	f013 0f02 	tst.w	r3, #2
   1955e:	d068      	beq.n	19632 <bt_conn_le_create+0xea>
   19560:	4604      	mov	r4, r0
   19562:	460e      	mov	r6, r1
   19564:	4615      	mov	r5, r2
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(conn_param)) {
   19566:	4610      	mov	r0, r2
   19568:	f00e fc9b 	bl	27ea2 <bt_le_conn_params_valid>
   1956c:	2800      	cmp	r0, #0
   1956e:	d063      	beq.n	19638 <bt_conn_le_create+0xf0>
		return -EINVAL;
	}

	if (!create_param_validate(create_param)) {
   19570:	4630      	mov	r0, r6
   19572:	f00e fdfc 	bl	2816e <create_param_validate>
   19576:	2800      	cmp	r0, #0
   19578:	d061      	beq.n	1963e <bt_conn_le_create+0xf6>
   1957a:	f3bf 8f5b 	dmb	ish
   1957e:	4b39      	ldr	r3, [pc, #228]	; (19664 <bt_conn_le_create+0x11c>)
   19580:	681b      	ldr	r3, [r3, #0]
   19582:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19586:	f013 0f40 	tst.w	r3, #64	; 0x40
   1958a:	d15b      	bne.n	19644 <bt_conn_le_create+0xfc>
   1958c:	f3bf 8f5b 	dmb	ish
   19590:	4b34      	ldr	r3, [pc, #208]	; (19664 <bt_conn_le_create+0x11c>)
   19592:	681b      	ldr	r3, [r3, #0]
   19594:	f3bf 8f5b 	dmb	ish
		return -EAGAIN;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   19598:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1959c:	d155      	bne.n	1964a <bt_conn_le_create+0x102>
		return -EALREADY;
	}

	if (!bt_id_scan_random_addr_check()) {
   1959e:	f00e fd93 	bl	280c8 <bt_id_scan_random_addr_check>
   195a2:	2800      	cmp	r0, #0
   195a4:	d054      	beq.n	19650 <bt_conn_le_create+0x108>
		return -EINVAL;
	}

	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   195a6:	4621      	mov	r1, r4
   195a8:	2000      	movs	r0, #0
   195aa:	f7ff ff47 	bl	1943c <bt_conn_exists_le>
   195ae:	2800      	cmp	r0, #0
   195b0:	d151      	bne.n	19656 <bt_conn_le_create+0x10e>
		return -EINVAL;
	}

	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   195b2:	7820      	ldrb	r0, [r4, #0]
   195b4:	3802      	subs	r0, #2
   195b6:	b2c0      	uxtb	r0, r0
   195b8:	2801      	cmp	r0, #1
   195ba:	d922      	bls.n	19602 <bt_conn_le_create+0xba>
	    peer->type == BT_ADDR_LE_RANDOM_ID) {
		bt_addr_le_copy(&dst, peer);
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
	} else {
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   195bc:	4621      	mov	r1, r4
   195be:	2000      	movs	r0, #0
   195c0:	f00e fd6c 	bl	2809c <bt_lookup_id_addr>
   195c4:	4601      	mov	r1, r0
   195c6:	2207      	movs	r2, #7
   195c8:	4668      	mov	r0, sp
   195ca:	f00e fb41 	bl	27c50 <memcpy>
	}

	/* Only default identity supported for now */
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   195ce:	4669      	mov	r1, sp
   195d0:	2000      	movs	r0, #0
   195d2:	f00e ff2d 	bl	28430 <bt_conn_add_le>
	if (!conn) {
   195d6:	4604      	mov	r4, r0
   195d8:	2800      	cmp	r0, #0
   195da:	d03f      	beq.n	1965c <bt_conn_le_create+0x114>
		return -ENOMEM;
	}

	bt_conn_set_param_le(conn, conn_param);
   195dc:	4629      	mov	r1, r5
   195de:	f00e fdb9 	bl	28154 <bt_conn_set_param_le>
	create_param_setup(create_param);
   195e2:	4630      	mov	r0, r6
   195e4:	f7ff fa98 	bl	18b18 <create_param_setup>
		*ret_conn = conn;
		return 0;
	}
#endif

	bt_conn_set_state(conn, BT_CONN_CONNECT);
   195e8:	2106      	movs	r1, #6
   195ea:	4620      	mov	r0, r4
   195ec:	f7ff fd18 	bl	19020 <bt_conn_set_state>

	err = bt_le_create_conn(conn);
   195f0:	4620      	mov	r0, r4
   195f2:	f00e fc38 	bl	27e66 <bt_le_create_conn>
	if (err) {
   195f6:	4605      	mov	r5, r0
   195f8:	b970      	cbnz	r0, 19618 <bt_conn_le_create+0xd0>

		bt_le_scan_update(false);
		return err;
	}

	*ret_conn = conn;
   195fa:	603c      	str	r4, [r7, #0]
	return 0;
}
   195fc:	4628      	mov	r0, r5
   195fe:	b003      	add	sp, #12
   19600:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19602:	2207      	movs	r2, #7
   19604:	4621      	mov	r1, r4
   19606:	4668      	mov	r0, sp
   19608:	f00e fb22 	bl	27c50 <memcpy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   1960c:	f89d 3000 	ldrb.w	r3, [sp]
   19610:	3b02      	subs	r3, #2
   19612:	f88d 3000 	strb.w	r3, [sp]
   19616:	e7da      	b.n	195ce <bt_conn_le_create+0x86>
		conn->err = 0;
   19618:	2600      	movs	r6, #0
   1961a:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1961c:	4631      	mov	r1, r6
   1961e:	4620      	mov	r0, r4
   19620:	f7ff fcfe 	bl	19020 <bt_conn_set_state>
		bt_conn_unref(conn);
   19624:	4620      	mov	r0, r4
   19626:	f00e fec0 	bl	283aa <bt_conn_unref>
		bt_le_scan_update(false);
   1962a:	4630      	mov	r0, r6
   1962c:	f7ff f80e 	bl	1864c <bt_le_scan_update>
		return err;
   19630:	e7e4      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EAGAIN;
   19632:	f06f 050a 	mvn.w	r5, #10
   19636:	e7e1      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EINVAL;
   19638:	f06f 0515 	mvn.w	r5, #21
   1963c:	e7de      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EINVAL;
   1963e:	f06f 0515 	mvn.w	r5, #21
   19642:	e7db      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EAGAIN;
   19644:	f06f 050a 	mvn.w	r5, #10
   19648:	e7d8      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EALREADY;
   1964a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1964e:	e7d5      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EINVAL;
   19650:	f06f 0515 	mvn.w	r5, #21
   19654:	e7d2      	b.n	195fc <bt_conn_le_create+0xb4>
		return -EINVAL;
   19656:	f06f 0515 	mvn.w	r5, #21
   1965a:	e7cf      	b.n	195fc <bt_conn_le_create+0xb4>
		return -ENOMEM;
   1965c:	f06f 050b 	mvn.w	r5, #11
   19660:	e7cc      	b.n	195fc <bt_conn_le_create+0xb4>
   19662:	bf00      	nop
   19664:	2000036c 	.word	0x2000036c

00019668 <send_conn_le_param_update>:
{
   19668:	b538      	push	{r3, r4, r5, lr}
   1966a:	4604      	mov	r4, r0
   1966c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1966e:	4608      	mov	r0, r1
   19670:	f00e fc17 	bl	27ea2 <bt_le_conn_params_valid>
   19674:	b360      	cbz	r0, 196d0 <send_conn_le_param_update+0x68>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19676:	4b18      	ldr	r3, [pc, #96]	; (196d8 <send_conn_le_param_update+0x70>)
   19678:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1967c:	f013 0f02 	tst.w	r3, #2
   19680:	d004      	beq.n	1968c <send_conn_le_param_update+0x24>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   19682:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   19686:	f013 0f02 	tst.w	r3, #2
   1968a:	d113      	bne.n	196b4 <send_conn_le_param_update+0x4c>
	     (conn->role == BT_HCI_ROLE_CENTRAL)) {
   1968c:	78e3      	ldrb	r3, [r4, #3]
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1968e:	b9d3      	cbnz	r3, 196c6 <send_conn_le_param_update+0x5e>
		rc = bt_conn_le_conn_update(conn, param);
   19690:	4629      	mov	r1, r5
   19692:	4620      	mov	r0, r4
   19694:	f00e ff0c 	bl	284b0 <bt_conn_le_conn_update>
		if (rc == 0) {
   19698:	b9c8      	cbnz	r0, 196ce <send_conn_le_param_update+0x66>
			conn->le.interval_min = param->interval_min;
   1969a:	882b      	ldrh	r3, [r5, #0]
   1969c:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   196a0:	886b      	ldrh	r3, [r5, #2]
   196a2:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   196a6:	88ab      	ldrh	r3, [r5, #4]
   196a8:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   196ac:	88eb      	ldrh	r3, [r5, #6]
   196ae:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
		return rc;
   196b2:	e00c      	b.n	196ce <send_conn_le_param_update+0x66>
   196b4:	f3bf 8f5b 	dmb	ish
   196b8:	6863      	ldr	r3, [r4, #4]
   196ba:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   196be:	f413 6f80 	tst.w	r3, #1024	; 0x400
   196c2:	d1e3      	bne.n	1968c <send_conn_le_param_update+0x24>
   196c4:	e7e4      	b.n	19690 <send_conn_le_param_update+0x28>
	return bt_l2cap_update_conn_param(conn, param);
   196c6:	4629      	mov	r1, r5
   196c8:	4620      	mov	r0, r4
   196ca:	f00f f84f 	bl	2876c <bt_l2cap_update_conn_param>
}
   196ce:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   196d0:	f06f 0015 	mvn.w	r0, #21
   196d4:	e7fb      	b.n	196ce <send_conn_le_param_update+0x66>
   196d6:	bf00      	nop
   196d8:	200002a0 	.word	0x200002a0

000196dc <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   196dc:	b508      	push	{r3, lr}
   196de:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   196e0:	4801      	ldr	r0, [pc, #4]	; (196e8 <bt_conn_create_frag_timeout+0xc>)
   196e2:	f7ff fdcf 	bl	19284 <bt_conn_create_pdu_timeout>
#endif /* CONFIG_NET_BUF_LOG */
}
   196e6:	bd08      	pop	{r3, pc}
   196e8:	20000900 	.word	0x20000900

000196ec <create_frag>:
{
   196ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196ee:	4606      	mov	r6, r0
   196f0:	460d      	mov	r5, r1
		frag = bt_conn_create_frag(0);
   196f2:	f04f 32ff 	mov.w	r2, #4294967295
   196f6:	f04f 33ff 	mov.w	r3, #4294967295
   196fa:	2000      	movs	r0, #0
   196fc:	f7ff ffee 	bl	196dc <bt_conn_create_frag_timeout>
   19700:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19702:	7ab3      	ldrb	r3, [r6, #10]
   19704:	2b07      	cmp	r3, #7
   19706:	d11a      	bne.n	1973e <create_frag+0x52>
	tx_data(frag)->tx = NULL;
   19708:	2300      	movs	r3, #0
   1970a:	6143      	str	r3, [r0, #20]
	return bt_dev.le.acl_mtu;
   1970c:	4b10      	ldr	r3, [pc, #64]	; (19750 <create_frag+0x64>)
   1970e:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_tailroom(&buf->b);
   19712:	f100 0708 	add.w	r7, r0, #8
   19716:	4638      	mov	r0, r7
   19718:	f010 fdbe 	bl	2a298 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1971c:	4286      	cmp	r6, r0
   1971e:	d212      	bcs.n	19746 <create_frag+0x5a>
	return bt_dev.le.acl_mtu;
   19720:	4b0b      	ldr	r3, [pc, #44]	; (19750 <create_frag+0x64>)
   19722:	f8b3 60fc 	ldrh.w	r6, [r3, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19726:	4632      	mov	r2, r6
   19728:	f855 1f08 	ldr.w	r1, [r5, #8]!
   1972c:	4638      	mov	r0, r7
   1972e:	f010 fd73 	bl	2a218 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   19732:	4631      	mov	r1, r6
   19734:	4628      	mov	r0, r5
   19736:	f010 fd8b 	bl	2a250 <net_buf_simple_pull>
}
   1973a:	4620      	mov	r0, r4
   1973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
   1973e:	f010 fd1b 	bl	2a178 <net_buf_unref>
		return NULL;
   19742:	2400      	movs	r4, #0
   19744:	e7f9      	b.n	1973a <create_frag+0x4e>
	return net_buf_simple_tailroom(&buf->b);
   19746:	4638      	mov	r0, r7
   19748:	f010 fda6 	bl	2a298 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1974c:	b286      	uxth	r6, r0
   1974e:	e7ea      	b.n	19726 <create_frag+0x3a>
   19750:	200002a0 	.word	0x200002a0

00019754 <send_buf>:
{
   19754:	b538      	push	{r3, r4, r5, lr}
   19756:	4605      	mov	r5, r0
   19758:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
   1975a:	898b      	ldrh	r3, [r1, #12]
	return bt_dev.le.acl_mtu;
   1975c:	4a1b      	ldr	r2, [pc, #108]	; (197cc <send_buf+0x78>)
   1975e:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	if (buf->len <= conn_mtu(conn)) {
   19762:	429a      	cmp	r2, r3
   19764:	d21f      	bcs.n	197a6 <send_buf+0x52>
	frag = create_frag(conn, buf);
   19766:	f7ff ffc1 	bl	196ec <create_frag>
	if (!frag) {
   1976a:	4601      	mov	r1, r0
   1976c:	b350      	cbz	r0, 197c4 <send_buf+0x70>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1976e:	2301      	movs	r3, #1
   19770:	2200      	movs	r2, #0
   19772:	4628      	mov	r0, r5
   19774:	f7ff fa3c 	bl	18bf0 <send_frag>
   19778:	4603      	mov	r3, r0
   1977a:	b1c8      	cbz	r0, 197b0 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
   1977c:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.acl_mtu;
   1977e:	4a13      	ldr	r2, [pc, #76]	; (197cc <send_buf+0x78>)
   19780:	f8b2 20fc 	ldrh.w	r2, [r2, #252]	; 0xfc
	while (buf->len > conn_mtu(conn)) {
   19784:	429a      	cmp	r2, r3
   19786:	d215      	bcs.n	197b4 <send_buf+0x60>
		frag = create_frag(conn, buf);
   19788:	4621      	mov	r1, r4
   1978a:	4628      	mov	r0, r5
   1978c:	f7ff ffae 	bl	196ec <create_frag>
		if (!frag) {
   19790:	4601      	mov	r1, r0
   19792:	b1c8      	cbz	r0, 197c8 <send_buf+0x74>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   19794:	2301      	movs	r3, #1
   19796:	461a      	mov	r2, r3
   19798:	4628      	mov	r0, r5
   1979a:	f7ff fa29 	bl	18bf0 <send_frag>
   1979e:	4603      	mov	r3, r0
   197a0:	2800      	cmp	r0, #0
   197a2:	d1eb      	bne.n	1977c <send_buf+0x28>
   197a4:	e004      	b.n	197b0 <send_buf+0x5c>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   197a6:	2300      	movs	r3, #0
   197a8:	2202      	movs	r2, #2
   197aa:	f7ff fa21 	bl	18bf0 <send_frag>
   197ae:	4603      	mov	r3, r0
}
   197b0:	4618      	mov	r0, r3
   197b2:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, FRAG_END, false);
   197b4:	2300      	movs	r3, #0
   197b6:	2203      	movs	r2, #3
   197b8:	4621      	mov	r1, r4
   197ba:	4628      	mov	r0, r5
   197bc:	f7ff fa18 	bl	18bf0 <send_frag>
   197c0:	4603      	mov	r3, r0
   197c2:	e7f5      	b.n	197b0 <send_buf+0x5c>
		return false;
   197c4:	2300      	movs	r3, #0
   197c6:	e7f3      	b.n	197b0 <send_buf+0x5c>
			return false;
   197c8:	2300      	movs	r3, #0
   197ca:	e7f1      	b.n	197b0 <send_buf+0x5c>
   197cc:	200002a0 	.word	0x200002a0

000197d0 <bt_conn_process_tx>:
{
   197d0:	b538      	push	{r3, r4, r5, lr}
   197d2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   197d4:	7a83      	ldrb	r3, [r0, #10]
   197d6:	b97b      	cbnz	r3, 197f8 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   197d8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   197da:	f3bf 8f5b 	dmb	ish
   197de:	e853 2f00 	ldrex	r2, [r3]
   197e2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   197e6:	e843 1000 	strex	r0, r1, [r3]
   197ea:	2800      	cmp	r0, #0
   197ec:	d1f7      	bne.n	197de <bt_conn_process_tx+0xe>
   197ee:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   197f2:	f012 0f40 	tst.w	r2, #64	; 0x40
   197f6:	d10d      	bne.n	19814 <bt_conn_process_tx+0x44>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   197f8:	2200      	movs	r2, #0
   197fa:	2300      	movs	r3, #0
   197fc:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19800:	f010 fc88 	bl	2a114 <net_buf_get>
	BT_ASSERT(buf);
   19804:	4605      	mov	r5, r0
   19806:	b148      	cbz	r0, 1981c <bt_conn_process_tx+0x4c>
	if (!send_buf(conn, buf)) {
   19808:	4629      	mov	r1, r5
   1980a:	4620      	mov	r0, r4
   1980c:	f7ff ffa2 	bl	19754 <send_buf>
   19810:	b190      	cbz	r0, 19838 <bt_conn_process_tx+0x68>
}
   19812:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
   19814:	4620      	mov	r0, r4
   19816:	f00e fd42 	bl	2829e <conn_cleanup>
		return;
   1981a:	e7fa      	b.n	19812 <bt_conn_process_tx+0x42>
	BT_ASSERT(buf);
   1981c:	f240 23df 	movw	r3, #735	; 0x2df
   19820:	4a07      	ldr	r2, [pc, #28]	; (19840 <bt_conn_process_tx+0x70>)
   19822:	4908      	ldr	r1, [pc, #32]	; (19844 <bt_conn_process_tx+0x74>)
   19824:	4808      	ldr	r0, [pc, #32]	; (19848 <bt_conn_process_tx+0x78>)
   19826:	f00c fa15 	bl	25c54 <printk>
   1982a:	4040      	eors	r0, r0
   1982c:	f380 8811 	msr	BASEPRI, r0
   19830:	f04f 0003 	mov.w	r0, #3
   19834:	df02      	svc	2
   19836:	e7e7      	b.n	19808 <bt_conn_process_tx+0x38>
		net_buf_unref(buf);
   19838:	4628      	mov	r0, r5
   1983a:	f010 fc9d 	bl	2a178 <net_buf_unref>
   1983e:	e7e8      	b.n	19812 <bt_conn_process_tx+0x42>
   19840:	0002e31c 	.word	0x0002e31c
   19844:	0002eb1c 	.word	0x0002eb1c
   19848:	0002db34 	.word	0x0002db34

0001984c <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1984c:	b570      	push	{r4, r5, r6, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1984e:	2400      	movs	r4, #0
   19850:	e006      	b.n	19860 <bt_conn_init+0x14>
		k_fifo_put(&free_tx, &conn_tx[i]);
   19852:	4919      	ldr	r1, [pc, #100]	; (198b8 <bt_conn_init+0x6c>)
   19854:	eb01 1104 	add.w	r1, r1, r4, lsl #4
   19858:	4818      	ldr	r0, [pc, #96]	; (198bc <bt_conn_init+0x70>)
   1985a:	f012 f869 	bl	2b930 <k_queue_append>
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
   1985e:	3401      	adds	r4, #1
   19860:	2c02      	cmp	r4, #2
   19862:	ddf6      	ble.n	19852 <bt_conn_init+0x6>
	}

	bt_att_init();
   19864:	f00f fcd0 	bl	29208 <bt_att_init>

	err = bt_smp_init();
   19868:	f010 fb83 	bl	29f72 <bt_smp_init>
	if (err) {
   1986c:	4604      	mov	r4, r0
   1986e:	b108      	cbz	r0, 19874 <bt_conn_init+0x28>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19870:	4620      	mov	r0, r4
   19872:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_init();
   19874:	f00e ffa7 	bl	287c6 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   19878:	4625      	mov	r5, r4
   1987a:	2d00      	cmp	r5, #0
   1987c:	dcf8      	bgt.n	19870 <bt_conn_init+0x24>
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1987e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   19882:	4b0f      	ldr	r3, [pc, #60]	; (198c0 <bt_conn_init+0x74>)
   19884:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   19888:	f00e fd68 	bl	2835c <bt_conn_ref>
			if (!conn) {
   1988c:	4606      	mov	r6, r0
   1988e:	b150      	cbz	r0, 198a6 <bt_conn_init+0x5a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19890:	f3bf 8f5b 	dmb	ish
   19894:	6843      	ldr	r3, [r0, #4]
   19896:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
   1989a:	f013 0f01 	tst.w	r3, #1
   1989e:	d104      	bne.n	198aa <bt_conn_init+0x5e>
			bt_conn_unref(conn);
   198a0:	4630      	mov	r0, r6
   198a2:	f00e fd82 	bl	283aa <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
   198a6:	3501      	adds	r5, #1
   198a8:	e7e7      	b.n	1987a <bt_conn_init+0x2e>
				conn->id = BT_ID_DEFAULT;
   198aa:	2300      	movs	r3, #0
   198ac:	7203      	strb	r3, [r0, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   198ae:	2102      	movs	r1, #2
   198b0:	f7ff fbb6 	bl	19020 <bt_conn_set_state>
   198b4:	e7f4      	b.n	198a0 <bt_conn_init+0x54>
   198b6:	bf00      	nop
   198b8:	20002be8 	.word	0x20002be8
   198bc:	20000880 	.word	0x20000880
   198c0:	20001ac0 	.word	0x20001ac0

000198c4 <get_ident>:

static uint8_t get_ident(void)
{
	static uint8_t ident;

	ident++;
   198c4:	4a05      	ldr	r2, [pc, #20]	; (198dc <get_ident+0x18>)
   198c6:	7813      	ldrb	r3, [r2, #0]
   198c8:	3301      	adds	r3, #1
   198ca:	b2db      	uxtb	r3, r3
   198cc:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
   198ce:	b90b      	cbnz	r3, 198d4 <get_ident+0x10>
		ident++;
   198d0:	3301      	adds	r3, #1
   198d2:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
   198d4:	4b01      	ldr	r3, [pc, #4]	; (198dc <get_ident+0x18>)
   198d6:	7818      	ldrb	r0, [r3, #0]
   198d8:	4770      	bx	lr
   198da:	bf00      	nop
   198dc:	20004752 	.word	0x20004752

000198e0 <le_conn_param_rsp>:

	l2cap_send(conn, BT_L2CAP_CID_LE_SIG, buf);
}

static void le_conn_param_rsp(struct bt_l2cap *l2cap, struct net_buf *buf)
{
   198e0:	b508      	push	{r3, lr}
	struct bt_l2cap_conn_param_rsp *rsp = (void *)buf->data;

	if (buf->len < sizeof(*rsp)) {
   198e2:	898b      	ldrh	r3, [r1, #12]
   198e4:	2b01      	cmp	r3, #1
   198e6:	d900      	bls.n	198ea <le_conn_param_rsp+0xa>
		BT_ERR("Too small LE conn param rsp");
		return;
	}

	BT_DBG("LE conn param rsp result %u", sys_le16_to_cpu(rsp->result));
}
   198e8:	bd08      	pop	{r3, pc}
   198ea:	4b08      	ldr	r3, [pc, #32]	; (1990c <le_conn_param_rsp+0x2c>)
   198ec:	4a08      	ldr	r2, [pc, #32]	; (19910 <le_conn_param_rsp+0x30>)
   198ee:	1a9b      	subs	r3, r3, r2
   198f0:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn param rsp");
   198f2:	f04f 0100 	mov.w	r1, #0
   198f6:	2201      	movs	r2, #1
   198f8:	f362 0102 	bfi	r1, r2, #0, #3
   198fc:	f36f 01c5 	bfc	r1, #3, #3
   19900:	f363 118f 	bfi	r1, r3, #6, #10
   19904:	4803      	ldr	r0, [pc, #12]	; (19914 <le_conn_param_rsp+0x34>)
   19906:	f7f8 fb91 	bl	1202c <log_0>
		return;
   1990a:	e7ed      	b.n	198e8 <le_conn_param_rsp+0x8>
   1990c:	0002c640 	.word	0x0002c640
   19910:	0002c610 	.word	0x0002c610
   19914:	0002e374 	.word	0x0002e374

00019918 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   19918:	b510      	push	{r4, lr}
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1991a:	2300      	movs	r3, #0
   1991c:	2b00      	cmp	r3, #0
   1991e:	dd13      	ble.n	19948 <l2cap_accept+0x30>
   19920:	4b12      	ldr	r3, [pc, #72]	; (1996c <l2cap_accept+0x54>)
   19922:	4a13      	ldr	r2, [pc, #76]	; (19970 <l2cap_accept+0x58>)
   19924:	1a9b      	subs	r3, r3, r2
   19926:	08db      	lsrs	r3, r3, #3
		*chan = &l2cap->chan.chan;

		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);
   19928:	f04f 0200 	mov.w	r2, #0
   1992c:	2101      	movs	r1, #1
   1992e:	f361 0202 	bfi	r2, r1, #0, #3
   19932:	f36f 02c5 	bfc	r2, #3, #3
   19936:	f363 128f 	bfi	r2, r3, #6, #10
   1993a:	4601      	mov	r1, r0
   1993c:	480d      	ldr	r0, [pc, #52]	; (19974 <l2cap_accept+0x5c>)
   1993e:	f7f8 fabf 	bl	11ec0 <log_1>

	return -ENOMEM;
   19942:	f06f 000b 	mvn.w	r0, #11
}
   19946:	bd10      	pop	{r4, pc}
		if (l2cap->chan.chan.conn) {
   19948:	22e8      	movs	r2, #232	; 0xe8
   1994a:	fb02 f203 	mul.w	r2, r2, r3
   1994e:	4c0a      	ldr	r4, [pc, #40]	; (19978 <l2cap_accept+0x60>)
   19950:	58a2      	ldr	r2, [r4, r2]
   19952:	b10a      	cbz	r2, 19958 <l2cap_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   19954:	3301      	adds	r3, #1
   19956:	e7e1      	b.n	1991c <l2cap_accept+0x4>
		l2cap->chan.chan.ops = &ops;
   19958:	4a07      	ldr	r2, [pc, #28]	; (19978 <l2cap_accept+0x60>)
   1995a:	20e8      	movs	r0, #232	; 0xe8
   1995c:	fb00 2303 	mla	r3, r0, r3, r2
   19960:	4a06      	ldr	r2, [pc, #24]	; (1997c <l2cap_accept+0x64>)
   19962:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
   19964:	600b      	str	r3, [r1, #0]
		return 0;
   19966:	2000      	movs	r0, #0
   19968:	e7ed      	b.n	19946 <l2cap_accept+0x2e>
   1996a:	bf00      	nop
   1996c:	0002c640 	.word	0x0002c640
   19970:	0002c610 	.word	0x0002c610
   19974:	0002e390 	.word	0x0002e390
   19978:	20001b80 	.word	0x20001b80
   1997c:	0002e518 	.word	0x0002e518

00019980 <l2cap_rtx_timeout>:
{
   19980:	b538      	push	{r3, r4, r5, lr}
	struct bt_l2cap_le_chan *chan = LE_CHAN_RTX(work);
   19982:	f1a0 0410 	sub.w	r4, r0, #16
	struct bt_conn *conn = chan->chan.conn;
   19986:	f850 5c10 	ldr.w	r5, [r0, #-16]
   1998a:	4b0c      	ldr	r3, [pc, #48]	; (199bc <l2cap_rtx_timeout+0x3c>)
   1998c:	4a0c      	ldr	r2, [pc, #48]	; (199c0 <l2cap_rtx_timeout+0x40>)
   1998e:	1a9b      	subs	r3, r3, r2
   19990:	08db      	lsrs	r3, r3, #3
	BT_ERR("chan %p timeout", chan);
   19992:	f04f 0200 	mov.w	r2, #0
   19996:	2101      	movs	r1, #1
   19998:	f361 0202 	bfi	r2, r1, #0, #3
   1999c:	f36f 02c5 	bfc	r2, #3, #3
   199a0:	f363 128f 	bfi	r2, r3, #6, #10
   199a4:	4621      	mov	r1, r4
   199a6:	4807      	ldr	r0, [pc, #28]	; (199c4 <l2cap_rtx_timeout+0x44>)
   199a8:	f7f8 fa8a 	bl	11ec0 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   199ac:	4621      	mov	r1, r4
   199ae:	4628      	mov	r0, r5
   199b0:	f00e fe03 	bl	285ba <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   199b4:	4620      	mov	r0, r4
   199b6:	f00e fe28 	bl	2860a <bt_l2cap_chan_del>
}
   199ba:	bd38      	pop	{r3, r4, r5, pc}
   199bc:	0002c640 	.word	0x0002c640
   199c0:	0002c610 	.word	0x0002c610
   199c4:	0002e3b8 	.word	0x0002e3b8

000199c8 <l2cap_chan_add>:
{
   199c8:	b570      	push	{r4, r5, r6, lr}
	if (!ch) {
   199ca:	b1d9      	cbz	r1, 19a04 <l2cap_chan_add+0x3c>
   199cc:	4604      	mov	r4, r0
   199ce:	4615      	mov	r5, r2
   199d0:	460e      	mov	r6, r1
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   199d2:	4914      	ldr	r1, [pc, #80]	; (19a24 <l2cap_chan_add+0x5c>)
   199d4:	f106 0010 	add.w	r0, r6, #16
   199d8:	f012 f8ac 	bl	2bb34 <k_work_init_delayable>
	atomic_clear(chan->status);
   199dc:	f106 0368 	add.w	r3, r6, #104	; 0x68
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   199e0:	2200      	movs	r2, #0
   199e2:	f3bf 8f5b 	dmb	ish
   199e6:	e853 1f00 	ldrex	r1, [r3]
   199ea:	e843 2000 	strex	r0, r2, [r3]
   199ee:	2800      	cmp	r0, #0
   199f0:	d1f9      	bne.n	199e6 <l2cap_chan_add+0x1e>
   199f2:	f3bf 8f5b 	dmb	ish
	bt_l2cap_chan_add(conn, chan, destroy);
   199f6:	462a      	mov	r2, r5
   199f8:	4631      	mov	r1, r6
   199fa:	4620      	mov	r0, r4
   199fc:	f00e fe18 	bl	28630 <bt_l2cap_chan_add>
	return true;
   19a00:	2001      	movs	r0, #1
}
   19a02:	bd70      	pop	{r4, r5, r6, pc}
   19a04:	4b08      	ldr	r3, [pc, #32]	; (19a28 <l2cap_chan_add+0x60>)
   19a06:	4a09      	ldr	r2, [pc, #36]	; (19a2c <l2cap_chan_add+0x64>)
   19a08:	1a9b      	subs	r3, r3, r2
   19a0a:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate L2CAP channel ID");
   19a0c:	2201      	movs	r2, #1
   19a0e:	f362 0102 	bfi	r1, r2, #0, #3
   19a12:	f36f 01c5 	bfc	r1, #3, #3
   19a16:	f363 118f 	bfi	r1, r3, #6, #10
   19a1a:	4805      	ldr	r0, [pc, #20]	; (19a30 <l2cap_chan_add+0x68>)
   19a1c:	f7f8 fb06 	bl	1202c <log_0>
		return false;
   19a20:	2000      	movs	r0, #0
   19a22:	e7ee      	b.n	19a02 <l2cap_chan_add+0x3a>
   19a24:	00019981 	.word	0x00019981
   19a28:	0002c640 	.word	0x0002c640
   19a2c:	0002c610 	.word	0x0002c610
   19a30:	0002e3c8 	.word	0x0002e3c8

00019a34 <bt_l2cap_connected>:
{
   19a34:	b530      	push	{r4, r5, lr}
   19a36:	b083      	sub	sp, #12
   19a38:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19a3a:	4c1a      	ldr	r4, [pc, #104]	; (19aa4 <bt_l2cap_connected+0x70>)
   19a3c:	e000      	b.n	19a40 <bt_l2cap_connected+0xc>
   19a3e:	340c      	adds	r4, #12
   19a40:	4b19      	ldr	r3, [pc, #100]	; (19aa8 <bt_l2cap_connected+0x74>)
   19a42:	429c      	cmp	r4, r3
   19a44:	d22c      	bcs.n	19aa0 <bt_l2cap_connected+0x6c>
		if (fchan->accept(conn, &chan) < 0) {
   19a46:	6863      	ldr	r3, [r4, #4]
   19a48:	a901      	add	r1, sp, #4
   19a4a:	4628      	mov	r0, r5
   19a4c:	4798      	blx	r3
   19a4e:	2800      	cmp	r0, #0
   19a50:	dbf5      	blt.n	19a3e <bt_l2cap_connected+0xa>
		ch = BT_L2CAP_LE_CHAN(chan);
   19a52:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
   19a54:	8823      	ldrh	r3, [r4, #0]
   19a56:	f8a1 3070 	strh.w	r3, [r1, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   19a5a:	f8a1 3080 	strh.w	r3, [r1, #128]	; 0x80
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19a5e:	68a2      	ldr	r2, [r4, #8]
   19a60:	4628      	mov	r0, r5
   19a62:	f7ff ffb1 	bl	199c8 <l2cap_chan_add>
   19a66:	b1d8      	cbz	r0, 19aa0 <bt_l2cap_connected+0x6c>
		if (chan->ops->connected) {
   19a68:	9801      	ldr	r0, [sp, #4]
   19a6a:	6843      	ldr	r3, [r0, #4]
   19a6c:	681b      	ldr	r3, [r3, #0]
   19a6e:	b103      	cbz	r3, 19a72 <bt_l2cap_connected+0x3e>
			chan->ops->connected(chan);
   19a70:	4798      	blx	r3
		atomic_set_bit(chan->status, BT_L2CAP_STATUS_OUT);
   19a72:	9b01      	ldr	r3, [sp, #4]
   19a74:	3368      	adds	r3, #104	; 0x68
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19a76:	f3bf 8f5b 	dmb	ish
   19a7a:	e853 2f00 	ldrex	r2, [r3]
   19a7e:	f042 0201 	orr.w	r2, r2, #1
   19a82:	e843 2100 	strex	r1, r2, [r3]
   19a86:	2900      	cmp	r1, #0
   19a88:	d1f7      	bne.n	19a7a <bt_l2cap_connected+0x46>
   19a8a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19a8e:	9801      	ldr	r0, [sp, #4]
   19a90:	6843      	ldr	r3, [r0, #4]
   19a92:	699b      	ldr	r3, [r3, #24]
   19a94:	2b00      	cmp	r3, #0
   19a96:	d0d2      	beq.n	19a3e <bt_l2cap_connected+0xa>
			chan->ops->status(chan, chan->status);
   19a98:	f100 0168 	add.w	r1, r0, #104	; 0x68
   19a9c:	4798      	blx	r3
   19a9e:	e7ce      	b.n	19a3e <bt_l2cap_connected+0xa>
}
   19aa0:	b003      	add	sp, #12
   19aa2:	bd30      	pop	{r4, r5, pc}
   19aa4:	0002c5c8 	.word	0x0002c5c8
   19aa8:	0002c5ec 	.word	0x0002c5ec

00019aac <l2cap_create_le_sig_pdu>:
{
   19aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19aae:	460c      	mov	r4, r1
   19ab0:	4616      	mov	r6, r2
   19ab2:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
   19ab4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19ab8:	2300      	movs	r3, #0
   19aba:	2100      	movs	r1, #0
   19abc:	4608      	mov	r0, r1
   19abe:	f00e fde8 	bl	28692 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   19ac2:	4607      	mov	r7, r0
   19ac4:	b140      	cbz	r0, 19ad8 <l2cap_create_le_sig_pdu+0x2c>
	return net_buf_simple_add(&buf->b, len);
   19ac6:	2104      	movs	r1, #4
   19ac8:	3008      	adds	r0, #8
   19aca:	f010 fb9f 	bl	2a20c <net_buf_simple_add>
	hdr->code = code;
   19ace:	7004      	strb	r4, [r0, #0]
	hdr->ident = ident;
   19ad0:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   19ad2:	8045      	strh	r5, [r0, #2]
}
   19ad4:	4638      	mov	r0, r7
   19ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19ad8:	4b08      	ldr	r3, [pc, #32]	; (19afc <l2cap_create_le_sig_pdu+0x50>)
   19ada:	4a09      	ldr	r2, [pc, #36]	; (19b00 <l2cap_create_le_sig_pdu+0x54>)
   19adc:	1a9b      	subs	r3, r3, r2
   19ade:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   19ae0:	f04f 0200 	mov.w	r2, #0
   19ae4:	2101      	movs	r1, #1
   19ae6:	f361 0202 	bfi	r2, r1, #0, #3
   19aea:	f36f 02c5 	bfc	r2, #3, #3
   19aee:	f363 128f 	bfi	r2, r3, #6, #10
   19af2:	4621      	mov	r1, r4
   19af4:	4803      	ldr	r0, [pc, #12]	; (19b04 <l2cap_create_le_sig_pdu+0x58>)
   19af6:	f7f8 f9e3 	bl	11ec0 <log_1>
		return NULL;
   19afa:	e7eb      	b.n	19ad4 <l2cap_create_le_sig_pdu+0x28>
   19afc:	0002c640 	.word	0x0002c640
   19b00:	0002c610 	.word	0x0002c610
   19b04:	0002e3ec 	.word	0x0002e3ec

00019b08 <le_conn_param_update_req>:
{
   19b08:	b570      	push	{r4, r5, r6, lr}
   19b0a:	b084      	sub	sp, #16
   19b0c:	4614      	mov	r4, r2
	struct bt_conn *conn = l2cap->chan.chan.conn;
   19b0e:	6805      	ldr	r5, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   19b10:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
   19b12:	8992      	ldrh	r2, [r2, #12]
   19b14:	2a07      	cmp	r2, #7
   19b16:	d932      	bls.n	19b7e <le_conn_param_update_req+0x76>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   19b18:	78ea      	ldrb	r2, [r5, #3]
   19b1a:	2a00      	cmp	r2, #0
   19b1c:	d140      	bne.n	19ba0 <le_conn_param_update_req+0x98>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   19b1e:	881a      	ldrh	r2, [r3, #0]
   19b20:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   19b24:	885a      	ldrh	r2, [r3, #2]
   19b26:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   19b2a:	889a      	ldrh	r2, [r3, #4]
   19b2c:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   19b30:	88db      	ldrh	r3, [r3, #6]
   19b32:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   19b36:	2302      	movs	r3, #2
   19b38:	460a      	mov	r2, r1
   19b3a:	2113      	movs	r1, #19
   19b3c:	4620      	mov	r0, r4
   19b3e:	f7ff ffb5 	bl	19aac <l2cap_create_le_sig_pdu>
	if (!buf) {
   19b42:	4606      	mov	r6, r0
   19b44:	b390      	cbz	r0, 19bac <le_conn_param_update_req+0xa4>
	accepted = le_param_req(conn, &param);
   19b46:	a902      	add	r1, sp, #8
   19b48:	4628      	mov	r0, r5
   19b4a:	f7ff fc17 	bl	1937c <le_param_req>
   19b4e:	4604      	mov	r4, r0
   19b50:	2102      	movs	r1, #2
   19b52:	f106 0008 	add.w	r0, r6, #8
   19b56:	f010 fb59 	bl	2a20c <net_buf_simple_add>
	if (accepted) {
   19b5a:	b34c      	cbz	r4, 19bb0 <le_conn_param_update_req+0xa8>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   19b5c:	2300      	movs	r3, #0
   19b5e:	7003      	strb	r3, [r0, #0]
   19b60:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   19b62:	2300      	movs	r3, #0
   19b64:	9300      	str	r3, [sp, #0]
   19b66:	4632      	mov	r2, r6
   19b68:	2105      	movs	r1, #5
   19b6a:	4628      	mov	r0, r5
   19b6c:	f00e fd96 	bl	2869c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   19b70:	bb18      	cbnz	r0, 19bba <le_conn_param_update_req+0xb2>
	if (accepted) {
   19b72:	b1dc      	cbz	r4, 19bac <le_conn_param_update_req+0xa4>
		bt_conn_le_conn_update(conn, &param);
   19b74:	a902      	add	r1, sp, #8
   19b76:	4628      	mov	r0, r5
   19b78:	f00e fc9a 	bl	284b0 <bt_conn_le_conn_update>
   19b7c:	e016      	b.n	19bac <le_conn_param_update_req+0xa4>
   19b7e:	4b11      	ldr	r3, [pc, #68]	; (19bc4 <le_conn_param_update_req+0xbc>)
   19b80:	4a11      	ldr	r2, [pc, #68]	; (19bc8 <le_conn_param_update_req+0xc0>)
   19b82:	1a9b      	subs	r3, r3, r2
   19b84:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small LE conn update param req");
   19b86:	f04f 0100 	mov.w	r1, #0
   19b8a:	2201      	movs	r2, #1
   19b8c:	f362 0102 	bfi	r1, r2, #0, #3
   19b90:	f36f 01c5 	bfc	r1, #3, #3
   19b94:	f363 118f 	bfi	r1, r3, #6, #10
   19b98:	480c      	ldr	r0, [pc, #48]	; (19bcc <le_conn_param_update_req+0xc4>)
   19b9a:	f7f8 fa47 	bl	1202c <log_0>
		return;
   19b9e:	e005      	b.n	19bac <le_conn_param_update_req+0xa4>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   19ba0:	2200      	movs	r2, #0
   19ba2:	9200      	str	r2, [sp, #0]
   19ba4:	4613      	mov	r3, r2
   19ba6:	4628      	mov	r0, r5
   19ba8:	f00e fd8d 	bl	286c6 <l2cap_send_reject>
}
   19bac:	b004      	add	sp, #16
   19bae:	bd70      	pop	{r4, r5, r6, pc}
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
   19bb0:	2301      	movs	r3, #1
   19bb2:	7003      	strb	r3, [r0, #0]
   19bb4:	2300      	movs	r3, #0
   19bb6:	7043      	strb	r3, [r0, #1]
   19bb8:	e7d3      	b.n	19b62 <le_conn_param_update_req+0x5a>
		net_buf_unref(buf);
   19bba:	4630      	mov	r0, r6
   19bbc:	f010 fadc 	bl	2a178 <net_buf_unref>
   19bc0:	e7d7      	b.n	19b72 <le_conn_param_update_req+0x6a>
   19bc2:	bf00      	nop
   19bc4:	0002c640 	.word	0x0002c640
   19bc8:	0002c610 	.word	0x0002c610
   19bcc:	0002e414 	.word	0x0002e414

00019bd0 <l2cap_recv>:
{
   19bd0:	b570      	push	{r4, r5, r6, lr}
   19bd2:	b082      	sub	sp, #8
	if (buf->len < sizeof(*hdr)) {
   19bd4:	898b      	ldrh	r3, [r1, #12]
   19bd6:	2b03      	cmp	r3, #3
   19bd8:	d92e      	bls.n	19c38 <l2cap_recv+0x68>
   19bda:	4606      	mov	r6, r0
   19bdc:	460c      	mov	r4, r1
	return net_buf_simple_pull_mem(&buf->b, len);
   19bde:	2104      	movs	r1, #4
   19be0:	f104 0008 	add.w	r0, r4, #8
   19be4:	f010 fb3c 	bl	2a260 <net_buf_simple_pull_mem>
   19be8:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   19bea:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   19bec:	89a1      	ldrh	r1, [r4, #12]
   19bee:	4291      	cmp	r1, r2
   19bf0:	d135      	bne.n	19c5e <l2cap_recv+0x8e>
	if (!hdr->ident) {
   19bf2:	7841      	ldrb	r1, [r0, #1]
   19bf4:	2900      	cmp	r1, #0
   19bf6:	d043      	beq.n	19c80 <l2cap_recv+0xb0>
	switch (hdr->code) {
   19bf8:	7803      	ldrb	r3, [r0, #0]
   19bfa:	2b12      	cmp	r3, #18
   19bfc:	d054      	beq.n	19ca8 <l2cap_recv+0xd8>
   19bfe:	2b13      	cmp	r3, #19
   19c00:	d04d      	beq.n	19c9e <l2cap_recv+0xce>
   19c02:	2b01      	cmp	r3, #1
   19c04:	d028      	beq.n	19c58 <l2cap_recv+0x88>
   19c06:	492b      	ldr	r1, [pc, #172]	; (19cb4 <l2cap_recv+0xe4>)
   19c08:	4a2b      	ldr	r2, [pc, #172]	; (19cb8 <l2cap_recv+0xe8>)
   19c0a:	1a89      	subs	r1, r1, r2
   19c0c:	08c9      	lsrs	r1, r1, #3
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   19c0e:	f04f 0200 	mov.w	r2, #0
   19c12:	2002      	movs	r0, #2
   19c14:	f360 0202 	bfi	r2, r0, #0, #3
   19c18:	f36f 02c5 	bfc	r2, #3, #3
   19c1c:	f361 128f 	bfi	r2, r1, #6, #10
   19c20:	4619      	mov	r1, r3
   19c22:	4826      	ldr	r0, [pc, #152]	; (19cbc <l2cap_recv+0xec>)
   19c24:	f7f8 f94c 	bl	11ec0 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   19c28:	7869      	ldrb	r1, [r5, #1]
   19c2a:	2200      	movs	r2, #0
   19c2c:	9200      	str	r2, [sp, #0]
   19c2e:	4613      	mov	r3, r2
   19c30:	6830      	ldr	r0, [r6, #0]
   19c32:	f00e fd48 	bl	286c6 <l2cap_send_reject>
		break;
   19c36:	e00f      	b.n	19c58 <l2cap_recv+0x88>
   19c38:	4b1e      	ldr	r3, [pc, #120]	; (19cb4 <l2cap_recv+0xe4>)
   19c3a:	4a1f      	ldr	r2, [pc, #124]	; (19cb8 <l2cap_recv+0xe8>)
   19c3c:	1a9b      	subs	r3, r3, r2
   19c3e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP signaling PDU");
   19c40:	f04f 0100 	mov.w	r1, #0
   19c44:	2201      	movs	r2, #1
   19c46:	f362 0102 	bfi	r1, r2, #0, #3
   19c4a:	f36f 01c5 	bfc	r1, #3, #3
   19c4e:	f363 118f 	bfi	r1, r3, #6, #10
   19c52:	481b      	ldr	r0, [pc, #108]	; (19cc0 <l2cap_recv+0xf0>)
   19c54:	f7f8 f9ea 	bl	1202c <log_0>
}
   19c58:	2000      	movs	r0, #0
   19c5a:	b002      	add	sp, #8
   19c5c:	bd70      	pop	{r4, r5, r6, pc}
   19c5e:	4815      	ldr	r0, [pc, #84]	; (19cb4 <l2cap_recv+0xe4>)
   19c60:	4b15      	ldr	r3, [pc, #84]	; (19cb8 <l2cap_recv+0xe8>)
   19c62:	1ac0      	subs	r0, r0, r3
   19c64:	08c0      	lsrs	r0, r0, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   19c66:	f04f 0300 	mov.w	r3, #0
   19c6a:	2401      	movs	r4, #1
   19c6c:	f364 0302 	bfi	r3, r4, #0, #3
   19c70:	f36f 03c5 	bfc	r3, #3, #3
   19c74:	f360 138f 	bfi	r3, r0, #6, #10
   19c78:	4812      	ldr	r0, [pc, #72]	; (19cc4 <l2cap_recv+0xf4>)
   19c7a:	f7f8 f957 	bl	11f2c <log_2>
		return 0;
   19c7e:	e7eb      	b.n	19c58 <l2cap_recv+0x88>
   19c80:	4b0c      	ldr	r3, [pc, #48]	; (19cb4 <l2cap_recv+0xe4>)
   19c82:	4a0d      	ldr	r2, [pc, #52]	; (19cb8 <l2cap_recv+0xe8>)
   19c84:	1a9b      	subs	r3, r3, r2
   19c86:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid ident value in L2CAP PDU");
   19c88:	2201      	movs	r2, #1
   19c8a:	f362 0102 	bfi	r1, r2, #0, #3
   19c8e:	f36f 01c5 	bfc	r1, #3, #3
   19c92:	f363 118f 	bfi	r1, r3, #6, #10
   19c96:	480c      	ldr	r0, [pc, #48]	; (19cc8 <l2cap_recv+0xf8>)
   19c98:	f7f8 f9c8 	bl	1202c <log_0>
		return 0;
   19c9c:	e7dc      	b.n	19c58 <l2cap_recv+0x88>
		le_conn_param_rsp(l2cap, buf);
   19c9e:	4621      	mov	r1, r4
   19ca0:	4630      	mov	r0, r6
   19ca2:	f7ff fe1d 	bl	198e0 <le_conn_param_rsp>
		break;
   19ca6:	e7d7      	b.n	19c58 <l2cap_recv+0x88>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   19ca8:	4622      	mov	r2, r4
   19caa:	4630      	mov	r0, r6
   19cac:	f7ff ff2c 	bl	19b08 <le_conn_param_update_req>
			break;
   19cb0:	e7d2      	b.n	19c58 <l2cap_recv+0x88>
   19cb2:	bf00      	nop
   19cb4:	0002c640 	.word	0x0002c640
   19cb8:	0002c610 	.word	0x0002c610
   19cbc:	0002e4a0 	.word	0x0002e4a0
   19cc0:	0002e438 	.word	0x0002e438
   19cc4:	0002e458 	.word	0x0002e458
   19cc8:	0002e47c 	.word	0x0002e47c

00019ccc <bt_l2cap_recv>:
{
   19ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19cce:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19cd0:	898b      	ldrh	r3, [r1, #12]
   19cd2:	2b03      	cmp	r3, #3
   19cd4:	d911      	bls.n	19cfa <bt_l2cap_recv+0x2e>
   19cd6:	4605      	mov	r5, r0
   19cd8:	4616      	mov	r6, r2
   19cda:	2104      	movs	r1, #4
   19cdc:	f104 0008 	add.w	r0, r4, #8
   19ce0:	f010 fabe 	bl	2a260 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19ce4:	8847      	ldrh	r7, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19ce6:	4639      	mov	r1, r7
   19ce8:	4628      	mov	r0, r5
   19cea:	f00e fd2c 	bl	28746 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19cee:	b1c0      	cbz	r0, 19d22 <bt_l2cap_recv+0x56>
	l2cap_chan_recv(chan, buf, complete);
   19cf0:	4632      	mov	r2, r6
   19cf2:	4621      	mov	r1, r4
   19cf4:	f00e fc53 	bl	2859e <l2cap_chan_recv>
}
   19cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19cfa:	4b14      	ldr	r3, [pc, #80]	; (19d4c <bt_l2cap_recv+0x80>)
   19cfc:	4a14      	ldr	r2, [pc, #80]	; (19d50 <bt_l2cap_recv+0x84>)
   19cfe:	1a9b      	subs	r3, r3, r2
   19d00:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small L2CAP PDU received");
   19d02:	f04f 0100 	mov.w	r1, #0
   19d06:	2201      	movs	r2, #1
   19d08:	f362 0102 	bfi	r1, r2, #0, #3
   19d0c:	f36f 01c5 	bfc	r1, #3, #3
   19d10:	f363 118f 	bfi	r1, r3, #6, #10
   19d14:	480f      	ldr	r0, [pc, #60]	; (19d54 <bt_l2cap_recv+0x88>)
   19d16:	f7f8 f989 	bl	1202c <log_0>
		net_buf_unref(buf);
   19d1a:	4620      	mov	r0, r4
   19d1c:	f010 fa2c 	bl	2a178 <net_buf_unref>
		return;
   19d20:	e7ea      	b.n	19cf8 <bt_l2cap_recv+0x2c>
   19d22:	4b0a      	ldr	r3, [pc, #40]	; (19d4c <bt_l2cap_recv+0x80>)
   19d24:	4a0a      	ldr	r2, [pc, #40]	; (19d50 <bt_l2cap_recv+0x84>)
   19d26:	1a9b      	subs	r3, r3, r2
   19d28:	08db      	lsrs	r3, r3, #3
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   19d2a:	f04f 0200 	mov.w	r2, #0
   19d2e:	2102      	movs	r1, #2
   19d30:	f361 0202 	bfi	r2, r1, #0, #3
   19d34:	f36f 02c5 	bfc	r2, #3, #3
   19d38:	f363 128f 	bfi	r2, r3, #6, #10
   19d3c:	4639      	mov	r1, r7
   19d3e:	4806      	ldr	r0, [pc, #24]	; (19d58 <bt_l2cap_recv+0x8c>)
   19d40:	f7f8 f8be 	bl	11ec0 <log_1>
		net_buf_unref(buf);
   19d44:	4620      	mov	r0, r4
   19d46:	f010 fa17 	bl	2a178 <net_buf_unref>
		return;
   19d4a:	e7d5      	b.n	19cf8 <bt_l2cap_recv+0x2c>
   19d4c:	0002c640 	.word	0x0002c640
   19d50:	0002c610 	.word	0x0002c610
   19d54:	0002e4c0 	.word	0x0002e4c0
   19d58:	0002e4e0 	.word	0x0002e4e0

00019d5c <att_cfm_sent>:
		return NULL;
	}
}

static void att_cfm_sent(struct bt_conn *conn, void *user_data)
{
   19d5c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   19d5e:	4b03      	ldr	r3, [pc, #12]	; (19d6c <att_cfm_sent+0x10>)
   19d60:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   19d64:	f00e fd30 	bl	287c8 <att_sent>
}
   19d68:	bd08      	pop	{r3, pc}
   19d6a:	bf00      	nop
   19d6c:	00028ab9 	.word	0x00028ab9

00019d70 <att_rsp_sent>:

static void att_rsp_sent(struct bt_conn *conn, void *user_data)
{
   19d70:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   19d72:	4b03      	ldr	r3, [pc, #12]	; (19d80 <att_rsp_sent+0x10>)
   19d74:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   19d78:	f00e fd26 	bl	287c8 <att_sent>
}
   19d7c:	bd08      	pop	{r3, pc}
   19d7e:	bf00      	nop
   19d80:	00028ad5 	.word	0x00028ad5

00019d84 <att_req_sent>:

static void att_req_sent(struct bt_conn *conn, void *user_data)
{
   19d84:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   19d86:	4b03      	ldr	r3, [pc, #12]	; (19d94 <att_req_sent+0x10>)
   19d88:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   19d8c:	f00e fd1c 	bl	287c8 <att_sent>
}
   19d90:	bd08      	pop	{r3, pc}
   19d92:	bf00      	nop
   19d94:	00028aa1 	.word	0x00028aa1

00019d98 <att_cb>:

static bt_conn_tx_cb_t att_cb(bt_att_chan_sent_t cb)
{
	if (cb == chan_rsp_sent) {
   19d98:	4b08      	ldr	r3, [pc, #32]	; (19dbc <att_cb+0x24>)
   19d9a:	4298      	cmp	r0, r3
   19d9c:	d009      	beq.n	19db2 <att_cb+0x1a>
		return att_rsp_sent;
	} else if (cb == chan_cfm_sent) {
   19d9e:	4b08      	ldr	r3, [pc, #32]	; (19dc0 <att_cb+0x28>)
   19da0:	4298      	cmp	r0, r3
   19da2:	d008      	beq.n	19db6 <att_cb+0x1e>
		return att_cfm_sent;
	} else if (cb == chan_req_sent) {
   19da4:	4b07      	ldr	r3, [pc, #28]	; (19dc4 <att_cb+0x2c>)
   19da6:	4298      	cmp	r0, r3
   19da8:	d001      	beq.n	19dae <att_cb+0x16>
		return att_req_sent;
	} else {
		return att_sent;
   19daa:	4807      	ldr	r0, [pc, #28]	; (19dc8 <att_cb+0x30>)
	}
}
   19dac:	4770      	bx	lr
		return att_req_sent;
   19dae:	4807      	ldr	r0, [pc, #28]	; (19dcc <att_cb+0x34>)
   19db0:	4770      	bx	lr
		return att_rsp_sent;
   19db2:	4807      	ldr	r0, [pc, #28]	; (19dd0 <att_cb+0x38>)
   19db4:	4770      	bx	lr
		return att_cfm_sent;
   19db6:	4807      	ldr	r0, [pc, #28]	; (19dd4 <att_cb+0x3c>)
   19db8:	4770      	bx	lr
   19dba:	bf00      	nop
   19dbc:	00028ad5 	.word	0x00028ad5
   19dc0:	00028ab9 	.word	0x00028ab9
   19dc4:	00028aa1 	.word	0x00028aa1
   19dc8:	000287c9 	.word	0x000287c9
   19dcc:	00019d85 	.word	0x00019d85
   19dd0:	00019d71 	.word	0x00019d71
   19dd4:	00019d5d 	.word	0x00019d5d

00019dd8 <chan_cb>:
{
   19dd8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
   19dda:	6883      	ldr	r3, [r0, #8]
   19ddc:	7818      	ldrb	r0, [r3, #0]
   19dde:	f00e fd3c 	bl	2885a <att_op_get_type>
   19de2:	3801      	subs	r0, #1
   19de4:	2804      	cmp	r0, #4
   19de6:	d808      	bhi.n	19dfa <chan_cb+0x22>
   19de8:	e8df f000 	tbb	[pc, r0]
   19dec:	09070305 	.word	0x09070305
   19df0:	05          	.byte	0x05
   19df1:	00          	.byte	0x00
   19df2:	4804      	ldr	r0, [pc, #16]	; (19e04 <chan_cb+0x2c>)
   19df4:	e000      	b.n	19df8 <chan_cb+0x20>
		return chan_req_sent;
   19df6:	4804      	ldr	r0, [pc, #16]	; (19e08 <chan_cb+0x30>)
}
   19df8:	bd08      	pop	{r3, pc}
		return NULL;
   19dfa:	2000      	movs	r0, #0
   19dfc:	e7fc      	b.n	19df8 <chan_cb+0x20>
		return chan_cfm_sent;
   19dfe:	4803      	ldr	r0, [pc, #12]	; (19e0c <chan_cb+0x34>)
   19e00:	e7fa      	b.n	19df8 <chan_cb+0x20>
   19e02:	bf00      	nop
   19e04:	00028ad5 	.word	0x00028ad5
   19e08:	00028aa1 	.word	0x00028aa1
   19e0c:	00028ab9 	.word	0x00028ab9

00019e10 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   19e10:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   19e12:	7a83      	ldrb	r3, [r0, #10]
   19e14:	2b07      	cmp	r3, #7
   19e16:	d111      	bne.n	19e3c <att_get+0x2c>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19e18:	2104      	movs	r1, #4
   19e1a:	f00e fc94 	bl	28746 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19e1e:	4604      	mov	r4, r0
   19e20:	b1f0      	cbz	r0, 19e60 <att_get+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e22:	f3bf 8f5b 	dmb	ish
   19e26:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   19e2a:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   19e2e:	f013 0f04 	tst.w	r3, #4
   19e32:	d126      	bne.n	19e82 <att_get+0x72>
		BT_WARN("ATT channel flagged as disconnected");
		return NULL;
	}

	return att_chan->att;
   19e34:	f850 4c08 	ldr.w	r4, [r0, #-8]
}
   19e38:	4620      	mov	r0, r4
   19e3a:	bd10      	pop	{r4, pc}
   19e3c:	4b1a      	ldr	r3, [pc, #104]	; (19ea8 <att_get+0x98>)
   19e3e:	4a1b      	ldr	r2, [pc, #108]	; (19eac <att_get+0x9c>)
   19e40:	1a9b      	subs	r3, r3, r2
   19e42:	08db      	lsrs	r3, r3, #3
		BT_WARN("Not connected");
   19e44:	f04f 0100 	mov.w	r1, #0
   19e48:	2202      	movs	r2, #2
   19e4a:	f362 0102 	bfi	r1, r2, #0, #3
   19e4e:	f36f 01c5 	bfc	r1, #3, #3
   19e52:	f363 118f 	bfi	r1, r3, #6, #10
   19e56:	4816      	ldr	r0, [pc, #88]	; (19eb0 <att_get+0xa0>)
   19e58:	f7f8 f8e8 	bl	1202c <log_0>
		return NULL;
   19e5c:	2400      	movs	r4, #0
   19e5e:	e7eb      	b.n	19e38 <att_get+0x28>
   19e60:	4b11      	ldr	r3, [pc, #68]	; (19ea8 <att_get+0x98>)
   19e62:	4a12      	ldr	r2, [pc, #72]	; (19eac <att_get+0x9c>)
   19e64:	1a9b      	subs	r3, r3, r2
   19e66:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to find ATT channel");
   19e68:	f04f 0100 	mov.w	r1, #0
   19e6c:	2201      	movs	r2, #1
   19e6e:	f362 0102 	bfi	r1, r2, #0, #3
   19e72:	f36f 01c5 	bfc	r1, #3, #3
   19e76:	f363 118f 	bfi	r1, r3, #6, #10
   19e7a:	480e      	ldr	r0, [pc, #56]	; (19eb4 <att_get+0xa4>)
   19e7c:	f7f8 f8d6 	bl	1202c <log_0>
		return NULL;
   19e80:	e7da      	b.n	19e38 <att_get+0x28>
   19e82:	4b09      	ldr	r3, [pc, #36]	; (19ea8 <att_get+0x98>)
   19e84:	4a09      	ldr	r2, [pc, #36]	; (19eac <att_get+0x9c>)
   19e86:	1a9b      	subs	r3, r3, r2
   19e88:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT channel flagged as disconnected");
   19e8a:	f04f 0100 	mov.w	r1, #0
   19e8e:	2202      	movs	r2, #2
   19e90:	f362 0102 	bfi	r1, r2, #0, #3
   19e94:	f36f 01c5 	bfc	r1, #3, #3
   19e98:	f363 118f 	bfi	r1, r3, #6, #10
   19e9c:	4806      	ldr	r0, [pc, #24]	; (19eb8 <att_get+0xa8>)
   19e9e:	f7f8 f8c5 	bl	1202c <log_0>
		return NULL;
   19ea2:	2400      	movs	r4, #0
   19ea4:	e7c8      	b.n	19e38 <att_get+0x28>
   19ea6:	bf00      	nop
   19ea8:	0002c610 	.word	0x0002c610
   19eac:	0002c610 	.word	0x0002c610
   19eb0:	0002e53c 	.word	0x0002e53c
   19eb4:	0002e54c 	.word	0x0002e54c
   19eb8:	0002e568 	.word	0x0002e568

00019ebc <att_chan_new>:

	k_mem_slab_free(&chan_slab, (void **)&chan);
}

static struct bt_att_chan *att_chan_new(struct bt_att *att, atomic_val_t flags)
{
   19ebc:	b570      	push	{r4, r5, r6, lr}
   19ebe:	b082      	sub	sp, #8
   19ec0:	4605      	mov	r5, r0
   19ec2:	460e      	mov	r6, r1
	return list->head;
   19ec4:	6a43      	ldr	r3, [r0, #36]	; 0x24
	#endif /* CONFIG_BT_SMP */
		.released = bt_att_released,
	};
	struct bt_att_chan *chan;

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19ec6:	b10b      	cbz	r3, 19ecc <att_chan_new+0x10>
   19ec8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   19ecc:	9301      	str	r3, [sp, #4]
	int quota = 0;
   19ece:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19ed0:	e014      	b.n	19efc <att_chan_new+0x40>
		if (chan->att == att) {
			quota++;
   19ed2:	3101      	adds	r1, #1
   19ed4:	e017      	b.n	19f06 <att_chan_new+0x4a>
   19ed6:	4b2d      	ldr	r3, [pc, #180]	; (19f8c <att_chan_new+0xd0>)
   19ed8:	4a2d      	ldr	r2, [pc, #180]	; (19f90 <att_chan_new+0xd4>)
   19eda:	1a9b      	subs	r3, r3, r2
   19edc:	08db      	lsrs	r3, r3, #3
		}

		if (quota == ATT_CHAN_MAX) {
			BT_ERR("Maximum number of channels reached: %d", quota);
   19ede:	f04f 0200 	mov.w	r2, #0
   19ee2:	2001      	movs	r0, #1
   19ee4:	f360 0202 	bfi	r2, r0, #0, #3
   19ee8:	f36f 02c5 	bfc	r2, #3, #3
   19eec:	f363 128f 	bfi	r2, r3, #6, #10
   19ef0:	4828      	ldr	r0, [pc, #160]	; (19f94 <att_chan_new+0xd8>)
   19ef2:	f7f7 ffe5 	bl	11ec0 <log_1>
			return NULL;
   19ef6:	2400      	movs	r4, #0
   19ef8:	e033      	b.n	19f62 <att_chan_new+0xa6>
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19efa:	9301      	str	r3, [sp, #4]
   19efc:	9c01      	ldr	r4, [sp, #4]
   19efe:	b174      	cbz	r4, 19f1e <att_chan_new+0x62>
		if (chan->att == att) {
   19f00:	6823      	ldr	r3, [r4, #0]
   19f02:	42ab      	cmp	r3, r5
   19f04:	d0e5      	beq.n	19ed2 <att_chan_new+0x16>
		if (quota == ATT_CHAN_MAX) {
   19f06:	2901      	cmp	r1, #1
   19f08:	d0e5      	beq.n	19ed6 <att_chan_new+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   19f0a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   19f0e:	d0f4      	beq.n	19efa <att_chan_new+0x3e>
	return node->next;
   19f10:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   19f14:	2b00      	cmp	r3, #0
   19f16:	d0f0      	beq.n	19efa <att_chan_new+0x3e>
   19f18:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   19f1c:	e7ed      	b.n	19efa <att_chan_new+0x3e>
		}
	}

	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19f1e:	2200      	movs	r2, #0
   19f20:	2300      	movs	r3, #0
   19f22:	a901      	add	r1, sp, #4
   19f24:	481c      	ldr	r0, [pc, #112]	; (19f98 <att_chan_new+0xdc>)
   19f26:	f007 fc67 	bl	217f8 <k_mem_slab_alloc>
   19f2a:	b9e8      	cbnz	r0, 19f68 <att_chan_new+0xac>
		BT_ERR("No available ATT channel for conn %p", att->conn);
		return NULL;
	}

	(void)memset(chan, 0, sizeof(*chan));
   19f2c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   19f30:	2100      	movs	r1, #0
   19f32:	9801      	ldr	r0, [sp, #4]
   19f34:	f00d feb0 	bl	27c98 <memset>
	chan->chan.chan.ops = &ops;
   19f38:	9801      	ldr	r0, [sp, #4]
   19f3a:	4b18      	ldr	r3, [pc, #96]	; (19f9c <att_chan_new+0xe0>)
   19f3c:	60c3      	str	r3, [r0, #12]
	k_fifo_init(&chan->tx_queue);
   19f3e:	30f8      	adds	r0, #248	; 0xf8
	z_impl_k_queue_init(queue);
   19f40:	f011 fcea 	bl	2b918 <z_impl_k_queue_init>
	atomic_set(chan->flags, flags);
   19f44:	9b01      	ldr	r3, [sp, #4]
   19f46:	33f0      	adds	r3, #240	; 0xf0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   19f48:	f3bf 8f5b 	dmb	ish
   19f4c:	e853 2f00 	ldrex	r2, [r3]
   19f50:	e843 6100 	strex	r1, r6, [r3]
   19f54:	2900      	cmp	r1, #0
   19f56:	d1f9      	bne.n	19f4c <att_chan_new+0x90>
   19f58:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   19f5c:	9b01      	ldr	r3, [sp, #4]
   19f5e:	601d      	str	r5, [r3, #0]

	return chan;
   19f60:	9c01      	ldr	r4, [sp, #4]
}
   19f62:	4620      	mov	r0, r4
   19f64:	b002      	add	sp, #8
   19f66:	bd70      	pop	{r4, r5, r6, pc}
   19f68:	4b08      	ldr	r3, [pc, #32]	; (19f8c <att_chan_new+0xd0>)
   19f6a:	4a09      	ldr	r2, [pc, #36]	; (19f90 <att_chan_new+0xd4>)
   19f6c:	1a9b      	subs	r3, r3, r2
   19f6e:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT channel for conn %p", att->conn);
   19f70:	f04f 0200 	mov.w	r2, #0
   19f74:	2101      	movs	r1, #1
   19f76:	f361 0202 	bfi	r2, r1, #0, #3
   19f7a:	f36f 02c5 	bfc	r2, #3, #3
   19f7e:	f363 128f 	bfi	r2, r3, #6, #10
   19f82:	6829      	ldr	r1, [r5, #0]
   19f84:	4806      	ldr	r0, [pc, #24]	; (19fa0 <att_chan_new+0xe4>)
   19f86:	f7f7 ff9b 	bl	11ec0 <log_1>
		return NULL;
   19f8a:	e7ea      	b.n	19f62 <att_chan_new+0xa6>
   19f8c:	0002c610 	.word	0x0002c610
   19f90:	0002c610 	.word	0x0002c610
   19f94:	0002e58c 	.word	0x0002e58c
   19f98:	20000758 	.word	0x20000758
   19f9c:	200005b4 	.word	0x200005b4
   19fa0:	0002e5b4 	.word	0x0002e5b4

00019fa4 <bt_att_accept>:

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19fa4:	b570      	push	{r4, r5, r6, lr}
   19fa6:	b082      	sub	sp, #8
   19fa8:	4606      	mov	r6, r0
   19faa:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19fac:	2200      	movs	r2, #0
   19fae:	2300      	movs	r3, #0
   19fb0:	a901      	add	r1, sp, #4
   19fb2:	4819      	ldr	r0, [pc, #100]	; (1a018 <bt_att_accept+0x74>)
   19fb4:	f007 fc20 	bl	217f8 <k_mem_slab_alloc>
   19fb8:	b9b0      	cbnz	r0, 19fe8 <bt_att_accept+0x44>
   19fba:	4605      	mov	r5, r0
		BT_ERR("No available ATT context for conn %p", conn);
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
   19fbc:	222c      	movs	r2, #44	; 0x2c
   19fbe:	2100      	movs	r1, #0
   19fc0:	9801      	ldr	r0, [sp, #4]
   19fc2:	f00d fe69 	bl	27c98 <memset>
	att->conn = conn;
   19fc6:	9b01      	ldr	r3, [sp, #4]
   19fc8:	601e      	str	r6, [r3, #0]
	sys_slist_init(&att->reqs);
   19fca:	9801      	ldr	r0, [sp, #4]
	list->head = NULL;
   19fcc:	2100      	movs	r1, #0
   19fce:	6041      	str	r1, [r0, #4]
	list->tail = NULL;
   19fd0:	6081      	str	r1, [r0, #8]
	list->head = NULL;
   19fd2:	6241      	str	r1, [r0, #36]	; 0x24
	list->tail = NULL;
   19fd4:	6281      	str	r1, [r0, #40]	; 0x28
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
   19fd6:	f7ff ff71 	bl	19ebc <att_chan_new>
	if (!chan) {
   19fda:	4603      	mov	r3, r0
   19fdc:	b1c0      	cbz	r0, 1a010 <bt_att_accept+0x6c>
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   19fde:	3308      	adds	r3, #8
   19fe0:	6023      	str	r3, [r4, #0]

	return 0;
}
   19fe2:	4628      	mov	r0, r5
   19fe4:	b002      	add	sp, #8
   19fe6:	bd70      	pop	{r4, r5, r6, pc}
   19fe8:	4b0c      	ldr	r3, [pc, #48]	; (1a01c <bt_att_accept+0x78>)
   19fea:	4a0d      	ldr	r2, [pc, #52]	; (1a020 <bt_att_accept+0x7c>)
   19fec:	1a9b      	subs	r3, r3, r2
   19fee:	08db      	lsrs	r3, r3, #3
		BT_ERR("No available ATT context for conn %p", conn);
   19ff0:	f04f 0200 	mov.w	r2, #0
   19ff4:	2101      	movs	r1, #1
   19ff6:	f361 0202 	bfi	r2, r1, #0, #3
   19ffa:	f36f 02c5 	bfc	r2, #3, #3
   19ffe:	f363 128f 	bfi	r2, r3, #6, #10
   1a002:	4631      	mov	r1, r6
   1a004:	4807      	ldr	r0, [pc, #28]	; (1a024 <bt_att_accept+0x80>)
   1a006:	f7f7 ff5b 	bl	11ec0 <log_1>
		return -ENOMEM;
   1a00a:	f06f 050b 	mvn.w	r5, #11
   1a00e:	e7e8      	b.n	19fe2 <bt_att_accept+0x3e>
		return -ENOMEM;
   1a010:	f06f 050b 	mvn.w	r5, #11
   1a014:	e7e5      	b.n	19fe2 <bt_att_accept+0x3e>
   1a016:	bf00      	nop
   1a018:	2000073c 	.word	0x2000073c
   1a01c:	0002c610 	.word	0x0002c610
   1a020:	0002c610 	.word	0x0002c610
   1a024:	0002e5dc 	.word	0x0002e5dc

0001a028 <bt_att_released>:
{
   1a028:	b500      	push	{lr}
   1a02a:	b083      	sub	sp, #12
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1a02c:	3808      	subs	r0, #8
   1a02e:	9001      	str	r0, [sp, #4]
	k_mem_slab_free(&chan_slab, (void **)&chan);
   1a030:	a901      	add	r1, sp, #4
   1a032:	4803      	ldr	r0, [pc, #12]	; (1a040 <bt_att_released+0x18>)
   1a034:	f011 fb48 	bl	2b6c8 <k_mem_slab_free>
}
   1a038:	b003      	add	sp, #12
   1a03a:	f85d fb04 	ldr.w	pc, [sp], #4
   1a03e:	bf00      	nop
   1a040:	20000758 	.word	0x20000758

0001a044 <chan_send>:
{
   1a044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a048:	b083      	sub	sp, #12
   1a04a:	4604      	mov	r4, r0
   1a04c:	460d      	mov	r5, r1
   1a04e:	4616      	mov	r6, r2
	hdr = (void *)buf->data;
   1a050:	688b      	ldr	r3, [r1, #8]
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1a052:	781b      	ldrb	r3, [r3, #0]
   1a054:	2bd2      	cmp	r3, #210	; 0xd2
   1a056:	d021      	beq.n	1a09c <chan_send+0x58>
	state->offset = net_buf_simple_headroom(buf);
   1a058:	f105 0008 	add.w	r0, r5, #8
   1a05c:	f010 f918 	bl	2a290 <net_buf_simple_headroom>
   1a060:	b287      	uxth	r7, r0
	state->len = buf->len;
   1a062:	f8b5 900c 	ldrh.w	r9, [r5, #12]
	chan->sent = cb ? cb : chan_cb(buf);
   1a066:	b3a6      	cbz	r6, 1a0d2 <chan_send+0x8e>
   1a068:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1a06c:	f854 8b08 	ldr.w	r8, [r4], #8
   1a070:	4630      	mov	r0, r6
   1a072:	f7ff fe91 	bl	19d98 <att_cb>
   1a076:	4603      	mov	r3, r0
   1a078:	f8d8 0000 	ldr.w	r0, [r8]
   1a07c:	9400      	str	r4, [sp, #0]
   1a07e:	462a      	mov	r2, r5
   1a080:	2104      	movs	r1, #4
   1a082:	f00e fb0b 	bl	2869c <bt_l2cap_send_cb>
	if (err) {
   1a086:	4680      	mov	r8, r0
   1a088:	b120      	cbz	r0, 1a094 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1a08a:	6928      	ldr	r0, [r5, #16]
   1a08c:	4438      	add	r0, r7
   1a08e:	60a8      	str	r0, [r5, #8]
	buf->len = state->len;
   1a090:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   1a094:	4640      	mov	r0, r8
   1a096:	b003      	add	sp, #12
   1a098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = bt_smp_sign(chan->att->conn, buf);
   1a09c:	6803      	ldr	r3, [r0, #0]
   1a09e:	6818      	ldr	r0, [r3, #0]
   1a0a0:	f00f ff64 	bl	29f6c <bt_smp_sign>
		if (err) {
   1a0a4:	4680      	mov	r8, r0
   1a0a6:	2800      	cmp	r0, #0
   1a0a8:	d0d6      	beq.n	1a058 <chan_send+0x14>
   1a0aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0dc <chan_send+0x98>)
   1a0ac:	4a0c      	ldr	r2, [pc, #48]	; (1a0e0 <chan_send+0x9c>)
   1a0ae:	1a9b      	subs	r3, r3, r2
   1a0b0:	08db      	lsrs	r3, r3, #3
			BT_ERR("Error signing data");
   1a0b2:	f04f 0100 	mov.w	r1, #0
   1a0b6:	2201      	movs	r2, #1
   1a0b8:	f362 0102 	bfi	r1, r2, #0, #3
   1a0bc:	f36f 01c5 	bfc	r1, #3, #3
   1a0c0:	f363 118f 	bfi	r1, r3, #6, #10
   1a0c4:	4807      	ldr	r0, [pc, #28]	; (1a0e4 <chan_send+0xa0>)
   1a0c6:	f7f7 ffb1 	bl	1202c <log_0>
			net_buf_unref(buf);
   1a0ca:	4628      	mov	r0, r5
   1a0cc:	f010 f854 	bl	2a178 <net_buf_unref>
			return err;
   1a0d0:	e7e0      	b.n	1a094 <chan_send+0x50>
	chan->sent = cb ? cb : chan_cb(buf);
   1a0d2:	4628      	mov	r0, r5
   1a0d4:	f7ff fe80 	bl	19dd8 <chan_cb>
   1a0d8:	4606      	mov	r6, r0
   1a0da:	e7c5      	b.n	1a068 <chan_send+0x24>
   1a0dc:	0002c610 	.word	0x0002c610
   1a0e0:	0002c610 	.word	0x0002c610
   1a0e4:	0002e604 	.word	0x0002e604

0001a0e8 <read_group_cb>:
{
   1a0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a0ea:	b085      	sub	sp, #20
   1a0ec:	4605      	mov	r5, r0
   1a0ee:	460e      	mov	r6, r1
   1a0f0:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a0f2:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a0f4:	2300      	movs	r3, #0
   1a0f6:	f88d 3008 	strb.w	r3, [sp, #8]
   1a0fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a0fe:	f8ad 300a 	strh.w	r3, [sp, #10]
   1a102:	a902      	add	r1, sp, #8
   1a104:	6800      	ldr	r0, [r0, #0]
   1a106:	f00d fe18 	bl	27d3a <bt_uuid_cmp>
   1a10a:	b158      	cbz	r0, 1a124 <read_group_cb+0x3c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a10c:	2300      	movs	r3, #0
   1a10e:	f88d 300c 	strb.w	r3, [sp, #12]
   1a112:	f642 0301 	movw	r3, #10241	; 0x2801
   1a116:	f8ad 300e 	strh.w	r3, [sp, #14]
   1a11a:	a903      	add	r1, sp, #12
   1a11c:	6828      	ldr	r0, [r5, #0]
   1a11e:	f00d fe0c 	bl	27d3a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1a122:	bb30      	cbnz	r0, 1a172 <read_group_cb+0x8a>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a124:	6861      	ldr	r1, [r4, #4]
   1a126:	6828      	ldr	r0, [r5, #0]
   1a128:	f00d fe07 	bl	27d3a <bt_uuid_cmp>
   1a12c:	bb48      	cbnz	r0, 1a182 <read_group_cb+0x9a>
	if (data->rsp->len &&
   1a12e:	68e3      	ldr	r3, [r4, #12]
   1a130:	781a      	ldrb	r2, [r3, #0]
   1a132:	b132      	cbz	r2, 1a142 <read_group_cb+0x5a>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1a134:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1a138:	68a1      	ldr	r1, [r4, #8]
   1a13a:	8989      	ldrh	r1, [r1, #12]
   1a13c:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1a13e:	4293      	cmp	r3, r2
   1a140:	db24      	blt.n	1a18c <read_group_cb+0xa4>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1a142:	68a0      	ldr	r0, [r4, #8]
	return net_buf_simple_add(&buf->b, len);
   1a144:	2104      	movs	r1, #4
   1a146:	3008      	adds	r0, #8
   1a148:	f010 f860 	bl	2a20c <net_buf_simple_add>
   1a14c:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a14e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a150:	6923      	ldr	r3, [r4, #16]
   1a152:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1a154:	9401      	str	r4, [sp, #4]
   1a156:	4b10      	ldr	r3, [pc, #64]	; (1a198 <read_group_cb+0xb0>)
   1a158:	9300      	str	r3, [sp, #0]
   1a15a:	2300      	movs	r3, #0
   1a15c:	68a2      	ldr	r2, [r4, #8]
   1a15e:	4629      	mov	r1, r5
   1a160:	4638      	mov	r0, r7
   1a162:	f00e fdf5 	bl	28d50 <att_chan_read>
	if (read < 0) {
   1a166:	2800      	cmp	r0, #0
   1a168:	db12      	blt.n	1a190 <read_group_cb+0xa8>
	if (!data->group) {
   1a16a:	6923      	ldr	r3, [r4, #16]
   1a16c:	b193      	cbz	r3, 1a194 <read_group_cb+0xac>
	return BT_GATT_ITER_CONTINUE;
   1a16e:	2001      	movs	r0, #1
   1a170:	e00a      	b.n	1a188 <read_group_cb+0xa0>
		if (data->group &&
   1a172:	6923      	ldr	r3, [r4, #16]
   1a174:	b11b      	cbz	r3, 1a17e <read_group_cb+0x96>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1a176:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1a178:	42b2      	cmp	r2, r6
   1a17a:	d200      	bcs.n	1a17e <read_group_cb+0x96>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a17c:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a17e:	2001      	movs	r0, #1
   1a180:	e002      	b.n	1a188 <read_group_cb+0xa0>
		data->group = NULL;
   1a182:	2300      	movs	r3, #0
   1a184:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1a186:	2001      	movs	r0, #1
}
   1a188:	b005      	add	sp, #20
   1a18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ITER_STOP;
   1a18c:	2000      	movs	r0, #0
   1a18e:	e7fb      	b.n	1a188 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1a190:	2000      	movs	r0, #0
   1a192:	e7f9      	b.n	1a188 <read_group_cb+0xa0>
		return BT_GATT_ITER_STOP;
   1a194:	2000      	movs	r0, #0
   1a196:	e7f7      	b.n	1a188 <read_group_cb+0xa0>
   1a198:	0002882d 	.word	0x0002882d

0001a19c <read_type_cb>:
{
   1a19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a1a0:	b083      	sub	sp, #12
   1a1a2:	4606      	mov	r6, r0
   1a1a4:	4688      	mov	r8, r1
   1a1a6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   1a1a8:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a1aa:	68bd      	ldr	r5, [r7, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a1ac:	6851      	ldr	r1, [r2, #4]
   1a1ae:	6800      	ldr	r0, [r0, #0]
   1a1b0:	f00d fdc3 	bl	27d3a <bt_uuid_cmp>
   1a1b4:	b120      	cbz	r0, 1a1c0 <read_type_cb+0x24>
		return BT_GATT_ITER_CONTINUE;
   1a1b6:	2501      	movs	r5, #1
}
   1a1b8:	4628      	mov	r0, r5
   1a1ba:	b003      	add	sp, #12
   1a1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a1c0:	2215      	movs	r2, #21
   1a1c2:	4631      	mov	r1, r6
   1a1c4:	4628      	mov	r0, r5
   1a1c6:	f00f fd73 	bl	29cb0 <bt_gatt_check_perm>
   1a1ca:	4605      	mov	r5, r0
   1a1cc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a1ce:	b130      	cbz	r0, 1a1de <read_type_cb+0x42>
		if (data->rsp->len) {
   1a1d0:	68e3      	ldr	r3, [r4, #12]
   1a1d2:	781b      	ldrb	r3, [r3, #0]
   1a1d4:	b10b      	cbz	r3, 1a1da <read_type_cb+0x3e>
			data->err = 0x00;
   1a1d6:	2300      	movs	r3, #0
   1a1d8:	7523      	strb	r3, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a1da:	2500      	movs	r5, #0
   1a1dc:	e7ec      	b.n	1a1b8 <read_type_cb+0x1c>
	data->err = 0x00;
   1a1de:	f04f 0900 	mov.w	r9, #0
   1a1e2:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a1e6:	68a0      	ldr	r0, [r4, #8]
   1a1e8:	f00f fff0 	bl	2a1cc <net_buf_frag_last>
   1a1ec:	2102      	movs	r1, #2
   1a1ee:	3008      	adds	r0, #8
   1a1f0:	f010 f80c 	bl	2a20c <net_buf_simple_add>
   1a1f4:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a1f6:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a1fa:	9401      	str	r4, [sp, #4]
   1a1fc:	4b11      	ldr	r3, [pc, #68]	; (1a244 <read_type_cb+0xa8>)
   1a1fe:	9300      	str	r3, [sp, #0]
   1a200:	464b      	mov	r3, r9
   1a202:	68a2      	ldr	r2, [r4, #8]
   1a204:	4631      	mov	r1, r6
   1a206:	4638      	mov	r0, r7
   1a208:	f00e fda2 	bl	28d50 <att_chan_read>
	if (read < 0) {
   1a20c:	2800      	cmp	r0, #0
   1a20e:	db07      	blt.n	1a220 <read_type_cb+0x84>
	if (!data->item) {
   1a210:	6923      	ldr	r3, [r4, #16]
   1a212:	2b00      	cmp	r3, #0
   1a214:	d0d0      	beq.n	1a1b8 <read_type_cb+0x1c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a216:	f8b7 508a 	ldrh.w	r5, [r7, #138]	; 0x8a
   1a21a:	68a3      	ldr	r3, [r4, #8]
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
   1a21c:	2200      	movs	r2, #0

	while (buf) {
   1a21e:	e006      	b.n	1a22e <read_type_cb+0x92>
		data->err = err_to_att(read);
   1a220:	f00e fae8 	bl	287f4 <err_to_att>
   1a224:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a226:	e7c7      	b.n	1a1b8 <read_type_cb+0x1c>
		bytes += buf->len;
   1a228:	8999      	ldrh	r1, [r3, #12]
   1a22a:	440a      	add	r2, r1
		buf = buf->frags;
   1a22c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a22e:	2b00      	cmp	r3, #0
   1a230:	d1fa      	bne.n	1a228 <read_type_cb+0x8c>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a232:	1aaa      	subs	r2, r5, r2
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a234:	68e3      	ldr	r3, [r4, #12]
   1a236:	781d      	ldrb	r5, [r3, #0]
   1a238:	42aa      	cmp	r2, r5
   1a23a:	bf94      	ite	ls
   1a23c:	2500      	movls	r5, #0
   1a23e:	2501      	movhi	r5, #1
   1a240:	e7ba      	b.n	1a1b8 <read_type_cb+0x1c>
   1a242:	bf00      	nop
   1a244:	00028805 	.word	0x00028805

0001a248 <find_type_cb>:
{
   1a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a24c:	b093      	sub	sp, #76	; 0x4c
   1a24e:	4606      	mov	r6, r0
   1a250:	460f      	mov	r7, r1
   1a252:	4615      	mov	r5, r2
	struct bt_att_chan *chan = data->chan;
   1a254:	f8d2 8000 	ldr.w	r8, [r2]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a258:	f8d8 9008 	ldr.w	r9, [r8, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1a25c:	2300      	movs	r3, #0
   1a25e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   1a262:	f642 0301 	movw	r3, #10241	; 0x2801
   1a266:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   1a26a:	a910      	add	r1, sp, #64	; 0x40
   1a26c:	6800      	ldr	r0, [r0, #0]
   1a26e:	f00d fd64 	bl	27d3a <bt_uuid_cmp>
   1a272:	b928      	cbnz	r0, 1a280 <find_type_cb+0x38>
	data->group = NULL;
   1a274:	2300      	movs	r3, #0
   1a276:	60ab      	str	r3, [r5, #8]
	return BT_GATT_ITER_CONTINUE;
   1a278:	2001      	movs	r0, #1
}
   1a27a:	b013      	add	sp, #76	; 0x4c
   1a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1a280:	2300      	movs	r3, #0
   1a282:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   1a286:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a28a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
   1a28e:	a911      	add	r1, sp, #68	; 0x44
   1a290:	6830      	ldr	r0, [r6, #0]
   1a292:	f00d fd52 	bl	27d3a <bt_uuid_cmp>
   1a296:	b928      	cbnz	r0, 1a2a4 <find_type_cb+0x5c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a298:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
   1a29c:	6868      	ldr	r0, [r5, #4]
   1a29e:	4603      	mov	r3, r0
	size_t bytes = 0;
   1a2a0:	2400      	movs	r4, #0
	while (buf) {
   1a2a2:	e00a      	b.n	1a2ba <find_type_cb+0x72>
		if (data->group &&
   1a2a4:	68ab      	ldr	r3, [r5, #8]
   1a2a6:	b11b      	cbz	r3, 1a2b0 <find_type_cb+0x68>
		    handle > sys_le16_to_cpu(data->group->end_handle)) {
   1a2a8:	885a      	ldrh	r2, [r3, #2]
		if (data->group &&
   1a2aa:	42ba      	cmp	r2, r7
   1a2ac:	d200      	bcs.n	1a2b0 <find_type_cb+0x68>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1a2ae:	805f      	strh	r7, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1a2b0:	2001      	movs	r0, #1
   1a2b2:	e7e2      	b.n	1a27a <find_type_cb+0x32>
		bytes += buf->len;
   1a2b4:	899a      	ldrh	r2, [r3, #12]
   1a2b6:	4414      	add	r4, r2
		buf = buf->frags;
   1a2b8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a2ba:	2b00      	cmp	r3, #0
   1a2bc:	d1fa      	bne.n	1a2b4 <find_type_cb+0x6c>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1a2be:	1b0c      	subs	r4, r1, r4
   1a2c0:	2c03      	cmp	r4, #3
   1a2c2:	d801      	bhi.n	1a2c8 <find_type_cb+0x80>
		return BT_GATT_ITER_STOP;
   1a2c4:	2000      	movs	r0, #0
   1a2c6:	e7d8      	b.n	1a27a <find_type_cb+0x32>
	frag = net_buf_frag_last(data->buf);
   1a2c8:	f00f ff80 	bl	2a1cc <net_buf_frag_last>
   1a2cc:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1a2ce:	f8b8 a08a 	ldrh.w	sl, [r8, #138]	; 0x8a
   1a2d2:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1a2d4:	2200      	movs	r2, #0
	while (buf) {
   1a2d6:	b11b      	cbz	r3, 1a2e0 <find_type_cb+0x98>
		bytes += buf->len;
   1a2d8:	8999      	ldrh	r1, [r3, #12]
   1a2da:	440a      	add	r2, r1
		buf = buf->frags;
   1a2dc:	681b      	ldr	r3, [r3, #0]
   1a2de:	e7fa      	b.n	1a2d6 <find_type_cb+0x8e>
   1a2e0:	ebaa 0a02 	sub.w	sl, sl, r2
	return net_buf_simple_tailroom(&buf->b);
   1a2e4:	f104 0b08 	add.w	fp, r4, #8
   1a2e8:	4658      	mov	r0, fp
   1a2ea:	f00f ffd5 	bl	2a298 <net_buf_simple_tailroom>
   1a2ee:	4582      	cmp	sl, r0
   1a2f0:	d22b      	bcs.n	1a34a <find_type_cb+0x102>
   1a2f2:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   1a2f6:	686b      	ldr	r3, [r5, #4]
	size_t bytes = 0;
   1a2f8:	2200      	movs	r2, #0
	while (buf) {
   1a2fa:	e002      	b.n	1a302 <find_type_cb+0xba>
		bytes += buf->len;
   1a2fc:	8999      	ldrh	r1, [r3, #12]
   1a2fe:	440a      	add	r2, r1
		buf = buf->frags;
   1a300:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a302:	2b00      	cmp	r3, #0
   1a304:	d1fa      	bne.n	1a2fc <find_type_cb+0xb4>
   1a306:	1a80      	subs	r0, r0, r2
	if (!len) {
   1a308:	b318      	cbz	r0, 1a352 <find_type_cb+0x10a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1a30a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1a30e:	2300      	movs	r3, #0
   1a310:	9300      	str	r3, [sp, #0]
   1a312:	2310      	movs	r3, #16
   1a314:	aa0c      	add	r2, sp, #48	; 0x30
   1a316:	4631      	mov	r1, r6
   1a318:	4648      	mov	r0, r9
   1a31a:	47c0      	blx	r8
	if (read < 0) {
   1a31c:	1e06      	subs	r6, r0, #0
   1a31e:	dba9      	blt.n	1a274 <find_type_cb+0x2c>
	if (read != data->value_len) {
   1a320:	7c2a      	ldrb	r2, [r5, #16]
   1a322:	42b2      	cmp	r2, r6
   1a324:	d049      	beq.n	1a3ba <find_type_cb+0x172>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1a326:	68e9      	ldr	r1, [r5, #12]
   1a328:	a807      	add	r0, sp, #28
   1a32a:	f00d fd24 	bl	27d76 <bt_uuid_create>
   1a32e:	b300      	cbz	r0, 1a372 <find_type_cb+0x12a>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1a330:	b2f2      	uxtb	r2, r6
   1a332:	a90c      	add	r1, sp, #48	; 0x30
   1a334:	a802      	add	r0, sp, #8
   1a336:	f00d fd1e 	bl	27d76 <bt_uuid_create>
   1a33a:	b360      	cbz	r0, 1a396 <find_type_cb+0x14e>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1a33c:	a902      	add	r1, sp, #8
   1a33e:	a807      	add	r0, sp, #28
   1a340:	f00d fcfb 	bl	27d3a <bt_uuid_cmp>
   1a344:	2800      	cmp	r0, #0
   1a346:	d040      	beq.n	1a3ca <find_type_cb+0x182>
   1a348:	e794      	b.n	1a274 <find_type_cb+0x2c>
	return net_buf_simple_tailroom(&buf->b);
   1a34a:	4658      	mov	r0, fp
   1a34c:	f00f ffa4 	bl	2a298 <net_buf_simple_tailroom>
   1a350:	e7da      	b.n	1a308 <find_type_cb+0xc0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1a352:	686b      	ldr	r3, [r5, #4]
   1a354:	7998      	ldrb	r0, [r3, #6]
   1a356:	f001 fd2f 	bl	1bdb8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1a35a:	2200      	movs	r2, #0
   1a35c:	2300      	movs	r3, #0
   1a35e:	f00f fed2 	bl	2a106 <net_buf_alloc_fixed>
		if (!frag) {
   1a362:	4604      	mov	r4, r0
   1a364:	2800      	cmp	r0, #0
   1a366:	d088      	beq.n	1a27a <find_type_cb+0x32>
		net_buf_frag_add(data->buf, frag);
   1a368:	4601      	mov	r1, r0
   1a36a:	6868      	ldr	r0, [r5, #4]
   1a36c:	f00f ff3f 	bl	2a1ee <net_buf_frag_add>
   1a370:	e7cb      	b.n	1a30a <find_type_cb+0xc2>
   1a372:	4b1c      	ldr	r3, [pc, #112]	; (1a3e4 <find_type_cb+0x19c>)
   1a374:	4a1c      	ldr	r2, [pc, #112]	; (1a3e8 <find_type_cb+0x1a0>)
   1a376:	1a9b      	subs	r3, r3, r2
   1a378:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1a37a:	f04f 0200 	mov.w	r2, #0
   1a37e:	2102      	movs	r1, #2
   1a380:	f361 0202 	bfi	r2, r1, #0, #3
   1a384:	f36f 02c5 	bfc	r2, #3, #3
   1a388:	f363 128f 	bfi	r2, r3, #6, #10
   1a38c:	7c29      	ldrb	r1, [r5, #16]
   1a38e:	4817      	ldr	r0, [pc, #92]	; (1a3ec <find_type_cb+0x1a4>)
   1a390:	f7f7 fd96 	bl	11ec0 <log_1>
			goto skip;
   1a394:	e76e      	b.n	1a274 <find_type_cb+0x2c>
   1a396:	4b13      	ldr	r3, [pc, #76]	; (1a3e4 <find_type_cb+0x19c>)
   1a398:	4a13      	ldr	r2, [pc, #76]	; (1a3e8 <find_type_cb+0x1a0>)
   1a39a:	1a9b      	subs	r3, r3, r2
   1a39c:	08db      	lsrs	r3, r3, #3
			BT_WARN("Unable to create UUID: size %d", read);
   1a39e:	f04f 0200 	mov.w	r2, #0
   1a3a2:	2102      	movs	r1, #2
   1a3a4:	f361 0202 	bfi	r2, r1, #0, #3
   1a3a8:	f36f 02c5 	bfc	r2, #3, #3
   1a3ac:	f363 128f 	bfi	r2, r3, #6, #10
   1a3b0:	4631      	mov	r1, r6
   1a3b2:	480f      	ldr	r0, [pc, #60]	; (1a3f0 <find_type_cb+0x1a8>)
   1a3b4:	f7f7 fd84 	bl	11ec0 <log_1>
			goto skip;
   1a3b8:	e75c      	b.n	1a274 <find_type_cb+0x2c>
	} else if (memcmp(data->value, uuid, read)) {
   1a3ba:	4632      	mov	r2, r6
   1a3bc:	a90c      	add	r1, sp, #48	; 0x30
   1a3be:	68e8      	ldr	r0, [r5, #12]
   1a3c0:	f00d fc19 	bl	27bf6 <memcmp>
   1a3c4:	2800      	cmp	r0, #0
   1a3c6:	f47f af55 	bne.w	1a274 <find_type_cb+0x2c>
	data->err = 0x00;
   1a3ca:	2300      	movs	r3, #0
   1a3cc:	746b      	strb	r3, [r5, #17]
	return net_buf_simple_add(&buf->b, len);
   1a3ce:	2104      	movs	r1, #4
   1a3d0:	f104 0008 	add.w	r0, r4, #8
   1a3d4:	f00f ff1a 	bl	2a20c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1a3d8:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1a3da:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1a3dc:	68ab      	ldr	r3, [r5, #8]
   1a3de:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1a3e0:	2001      	movs	r0, #1
   1a3e2:	e74a      	b.n	1a27a <find_type_cb+0x32>
   1a3e4:	0002c610 	.word	0x0002c610
   1a3e8:	0002c610 	.word	0x0002c610
   1a3ec:	0002e618 	.word	0x0002e618
   1a3f0:	0002e638 	.word	0x0002e638

0001a3f4 <bt_att_connected>:
{
   1a3f4:	b538      	push	{r3, r4, r5, lr}
   1a3f6:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = att_get_fixed_chan(chan->conn);
   1a3f8:	4605      	mov	r5, r0
   1a3fa:	f855 0908 	ldr.w	r0, [r5], #-8
   1a3fe:	f00e fdd2 	bl	28fa6 <att_get_fixed_chan>
	att_chan_attach(att, att_chan);
   1a402:	4629      	mov	r1, r5
   1a404:	6800      	ldr	r0, [r0, #0]
   1a406:	f00e faa9 	bl	2895c <att_chan_attach>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1a40a:	f3bf 8f5b 	dmb	ish
   1a40e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
   1a412:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1a416:	f013 0f08 	tst.w	r3, #8
   1a41a:	d104      	bne.n	1a426 <bt_att_connected+0x32>
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a41c:	2317      	movs	r3, #23
   1a41e:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1a422:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1a426:	4628      	mov	r0, r5
   1a428:	f00e fc21 	bl	28c6e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1a42c:	4902      	ldr	r1, [pc, #8]	; (1a438 <bt_att_connected+0x44>)
   1a42e:	f504 7084 	add.w	r0, r4, #264	; 0x108
   1a432:	f011 fb7f 	bl	2bb34 <k_work_init_delayable>
}
   1a436:	bd38      	pop	{r3, r4, r5, pc}
   1a438:	0001ade1 	.word	0x0001ade1

0001a43c <bt_att_chan_create_pdu>:
{
   1a43c:	b538      	push	{r3, r4, r5, lr}
   1a43e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a440:	3201      	adds	r2, #1
   1a442:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1a446:	428a      	cmp	r2, r1
   1a448:	d810      	bhi.n	1a46c <bt_att_chan_create_pdu+0x30>
	switch (att_op_get_type(op)) {
   1a44a:	4628      	mov	r0, r5
   1a44c:	f00e fa05 	bl	2885a <att_op_get_type>
   1a450:	2802      	cmp	r0, #2
   1a452:	d01d      	beq.n	1a490 <bt_att_chan_create_pdu+0x54>
   1a454:	2804      	cmp	r0, #4
   1a456:	d01b      	beq.n	1a490 <bt_att_chan_create_pdu+0x54>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1a458:	f04f 32ff 	mov.w	r2, #4294967295
   1a45c:	f04f 33ff 	mov.w	r3, #4294967295
   1a460:	2100      	movs	r1, #0
   1a462:	4608      	mov	r0, r1
   1a464:	f00e f915 	bl	28692 <bt_l2cap_create_pdu_timeout>
   1a468:	4604      	mov	r4, r0
   1a46a:	e019      	b.n	1a4a0 <bt_att_chan_create_pdu+0x64>
   1a46c:	481a      	ldr	r0, [pc, #104]	; (1a4d8 <bt_att_chan_create_pdu+0x9c>)
   1a46e:	4b1b      	ldr	r3, [pc, #108]	; (1a4dc <bt_att_chan_create_pdu+0xa0>)
   1a470:	1ac0      	subs	r0, r0, r3
   1a472:	08c0      	lsrs	r0, r0, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1a474:	f04f 0300 	mov.w	r3, #0
   1a478:	2402      	movs	r4, #2
   1a47a:	f364 0302 	bfi	r3, r4, #0, #3
   1a47e:	f36f 03c5 	bfc	r3, #3, #3
   1a482:	f360 138f 	bfi	r3, r0, #6, #10
   1a486:	4816      	ldr	r0, [pc, #88]	; (1a4e0 <bt_att_chan_create_pdu+0xa4>)
   1a488:	f7f7 fd50 	bl	11f2c <log_2>
		return NULL;
   1a48c:	2400      	movs	r4, #0
   1a48e:	e00e      	b.n	1a4ae <bt_att_chan_create_pdu+0x72>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1a490:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1a494:	2300      	movs	r3, #0
   1a496:	2100      	movs	r1, #0
   1a498:	4608      	mov	r0, r1
   1a49a:	f00e f8fa 	bl	28692 <bt_l2cap_create_pdu_timeout>
   1a49e:	4604      	mov	r4, r0
	if (!buf) {
   1a4a0:	b13c      	cbz	r4, 1a4b2 <bt_att_chan_create_pdu+0x76>
   1a4a2:	2101      	movs	r1, #1
   1a4a4:	f104 0008 	add.w	r0, r4, #8
   1a4a8:	f00f feb0 	bl	2a20c <net_buf_simple_add>
	hdr->code = op;
   1a4ac:	7005      	strb	r5, [r0, #0]
}
   1a4ae:	4620      	mov	r0, r4
   1a4b0:	bd38      	pop	{r3, r4, r5, pc}
   1a4b2:	4b09      	ldr	r3, [pc, #36]	; (1a4d8 <bt_att_chan_create_pdu+0x9c>)
   1a4b4:	4a09      	ldr	r2, [pc, #36]	; (1a4dc <bt_att_chan_create_pdu+0xa0>)
   1a4b6:	1a9b      	subs	r3, r3, r2
   1a4b8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a4ba:	f04f 0200 	mov.w	r2, #0
   1a4be:	2101      	movs	r1, #1
   1a4c0:	f361 0202 	bfi	r2, r1, #0, #3
   1a4c4:	f36f 02c5 	bfc	r2, #3, #3
   1a4c8:	f363 128f 	bfi	r2, r3, #6, #10
   1a4cc:	4629      	mov	r1, r5
   1a4ce:	4805      	ldr	r0, [pc, #20]	; (1a4e4 <bt_att_chan_create_pdu+0xa8>)
   1a4d0:	f7f7 fcf6 	bl	11ec0 <log_1>
		return NULL;
   1a4d4:	e7eb      	b.n	1a4ae <bt_att_chan_create_pdu+0x72>
   1a4d6:	bf00      	nop
   1a4d8:	0002c610 	.word	0x0002c610
   1a4dc:	0002c610 	.word	0x0002c610
   1a4e0:	0002e658 	.word	0x0002e658
   1a4e4:	0002e3ec 	.word	0x0002e3ec

0001a4e8 <att_indicate>:
{
   1a4e8:	b570      	push	{r4, r5, r6, lr}
   1a4ea:	4605      	mov	r5, r0
   1a4ec:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   1a4ee:	f101 0008 	add.w	r0, r1, #8
   1a4f2:	f00f fec5 	bl	2a280 <net_buf_simple_pull_le16>
   1a4f6:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1a4f8:	682e      	ldr	r6, [r5, #0]
   1a4fa:	89a3      	ldrh	r3, [r4, #12]
   1a4fc:	68a2      	ldr	r2, [r4, #8]
   1a4fe:	6830      	ldr	r0, [r6, #0]
   1a500:	f00f fc89 	bl	29e16 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1a504:	2200      	movs	r2, #0
   1a506:	211e      	movs	r1, #30
   1a508:	4628      	mov	r0, r5
   1a50a:	f7ff ff97 	bl	1a43c <bt_att_chan_create_pdu>
	if (!buf) {
   1a50e:	b120      	cbz	r0, 1a51a <att_indicate+0x32>
   1a510:	4601      	mov	r1, r0
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1a512:	4a03      	ldr	r2, [pc, #12]	; (1a520 <att_indicate+0x38>)
   1a514:	4628      	mov	r0, r5
   1a516:	f00e fb9d 	bl	28c54 <bt_att_chan_send_rsp>
}
   1a51a:	2000      	movs	r0, #0
   1a51c:	bd70      	pop	{r4, r5, r6, pc}
   1a51e:	bf00      	nop
   1a520:	00028ab9 	.word	0x00028ab9

0001a524 <send_err_rsp>:
	if (!req) {
   1a524:	b901      	cbnz	r1, 1a528 <send_err_rsp+0x4>
   1a526:	4770      	bx	lr
{
   1a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a52c:	4606      	mov	r6, r0
   1a52e:	4615      	mov	r5, r2
   1a530:	461c      	mov	r4, r3
   1a532:	460f      	mov	r7, r1
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1a534:	2204      	movs	r2, #4
   1a536:	2101      	movs	r1, #1
   1a538:	f7ff ff80 	bl	1a43c <bt_att_chan_create_pdu>
	if (!buf) {
   1a53c:	4680      	mov	r8, r0
   1a53e:	b160      	cbz	r0, 1a55a <send_err_rsp+0x36>
	return net_buf_simple_add(&buf->b, len);
   1a540:	2104      	movs	r1, #4
   1a542:	3008      	adds	r0, #8
   1a544:	f00f fe62 	bl	2a20c <net_buf_simple_add>
	rsp->request = req;
   1a548:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
   1a54a:	f8a0 5001 	strh.w	r5, [r0, #1]
	rsp->error = err;
   1a54e:	70c4      	strb	r4, [r0, #3]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1a550:	4a03      	ldr	r2, [pc, #12]	; (1a560 <send_err_rsp+0x3c>)
   1a552:	4641      	mov	r1, r8
   1a554:	4630      	mov	r0, r6
   1a556:	f00e fb7d 	bl	28c54 <bt_att_chan_send_rsp>
}
   1a55a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a55e:	bf00      	nop
   1a560:	00028ad5 	.word	0x00028ad5

0001a564 <bt_att_recv>:
{
   1a564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buf->len < sizeof(*hdr)) {
   1a568:	898b      	ldrh	r3, [r1, #12]
   1a56a:	b1bb      	cbz	r3, 1a59c <bt_att_recv+0x38>
   1a56c:	4607      	mov	r7, r0
   1a56e:	460e      	mov	r6, r1
   1a570:	f1a0 0808 	sub.w	r8, r0, #8
	return net_buf_simple_pull_mem(&buf->b, len);
   1a574:	2101      	movs	r1, #1
   1a576:	f106 0008 	add.w	r0, r6, #8
   1a57a:	f00f fe71 	bl	2a260 <net_buf_simple_pull_mem>
   1a57e:	4605      	mov	r5, r0
	if (!att_chan->att) {
   1a580:	f857 3c08 	ldr.w	r3, [r7, #-8]
   1a584:	b1d3      	cbz	r3, 1a5bc <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a586:	2300      	movs	r3, #0
   1a588:	2b1b      	cmp	r3, #27
   1a58a:	d838      	bhi.n	1a5fe <bt_att_recv+0x9a>
		if (hdr->code == handlers[i].op) {
   1a58c:	782c      	ldrb	r4, [r5, #0]
   1a58e:	4a57      	ldr	r2, [pc, #348]	; (1a6ec <bt_att_recv+0x188>)
   1a590:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1a594:	4294      	cmp	r4, r2
   1a596:	d014      	beq.n	1a5c2 <bt_att_recv+0x5e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a598:	3301      	adds	r3, #1
   1a59a:	e7f5      	b.n	1a588 <bt_att_recv+0x24>
   1a59c:	4b54      	ldr	r3, [pc, #336]	; (1a6f0 <bt_att_recv+0x18c>)
   1a59e:	4a55      	ldr	r2, [pc, #340]	; (1a6f4 <bt_att_recv+0x190>)
   1a5a0:	1a9b      	subs	r3, r3, r2
   1a5a2:	08db      	lsrs	r3, r3, #3
		BT_ERR("Too small ATT PDU received");
   1a5a4:	f04f 0100 	mov.w	r1, #0
   1a5a8:	2201      	movs	r2, #1
   1a5aa:	f362 0102 	bfi	r1, r2, #0, #3
   1a5ae:	f36f 01c5 	bfc	r1, #3, #3
   1a5b2:	f363 118f 	bfi	r1, r3, #6, #10
   1a5b6:	4850      	ldr	r0, [pc, #320]	; (1a6f8 <bt_att_recv+0x194>)
   1a5b8:	f7f7 fd38 	bl	1202c <log_0>
}
   1a5bc:	2000      	movs	r0, #0
   1a5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			handler = &handlers[i];
   1a5c2:	4c4a      	ldr	r4, [pc, #296]	; (1a6ec <bt_att_recv+0x188>)
   1a5c4:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
   1a5c8:	b1dc      	cbz	r4, 1a602 <bt_att_recv+0x9e>
		if (handler->type == ATT_REQUEST &&
   1a5ca:	78a3      	ldrb	r3, [r4, #2]
   1a5cc:	2b01      	cmp	r3, #1
   1a5ce:	d036      	beq.n	1a63e <bt_att_recv+0xda>
		} else if (handler->type == ATT_INDICATION &&
   1a5d0:	78a3      	ldrb	r3, [r4, #2]
   1a5d2:	2b05      	cmp	r3, #5
   1a5d4:	d055      	beq.n	1a682 <bt_att_recv+0x11e>
	if (buf->len < handler->expect_len) {
   1a5d6:	89b1      	ldrh	r1, [r6, #12]
   1a5d8:	7863      	ldrb	r3, [r4, #1]
   1a5da:	4299      	cmp	r1, r3
   1a5dc:	d372      	bcc.n	1a6c4 <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   1a5de:	6863      	ldr	r3, [r4, #4]
   1a5e0:	4631      	mov	r1, r6
   1a5e2:	4640      	mov	r0, r8
   1a5e4:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1a5e6:	78a3      	ldrb	r3, [r4, #2]
   1a5e8:	2b01      	cmp	r3, #1
   1a5ea:	d1e7      	bne.n	1a5bc <bt_att_recv+0x58>
   1a5ec:	2800      	cmp	r0, #0
   1a5ee:	d0e5      	beq.n	1a5bc <bt_att_recv+0x58>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1a5f0:	4603      	mov	r3, r0
   1a5f2:	2200      	movs	r2, #0
   1a5f4:	7829      	ldrb	r1, [r5, #0]
   1a5f6:	4640      	mov	r0, r8
   1a5f8:	f7ff ff94 	bl	1a524 <send_err_rsp>
   1a5fc:	e7de      	b.n	1a5bc <bt_att_recv+0x58>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a5fe:	2400      	movs	r4, #0
   1a600:	e7e2      	b.n	1a5c8 <bt_att_recv+0x64>
   1a602:	4b3b      	ldr	r3, [pc, #236]	; (1a6f0 <bt_att_recv+0x18c>)
   1a604:	4a3b      	ldr	r2, [pc, #236]	; (1a6f4 <bt_att_recv+0x190>)
   1a606:	1a9b      	subs	r3, r3, r2
   1a608:	08db      	lsrs	r3, r3, #3
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1a60a:	f04f 0200 	mov.w	r2, #0
   1a60e:	2102      	movs	r1, #2
   1a610:	f361 0202 	bfi	r2, r1, #0, #3
   1a614:	f36f 02c5 	bfc	r2, #3, #3
   1a618:	f363 128f 	bfi	r2, r3, #6, #10
   1a61c:	7829      	ldrb	r1, [r5, #0]
   1a61e:	4837      	ldr	r0, [pc, #220]	; (1a6fc <bt_att_recv+0x198>)
   1a620:	f7f7 fc4e 	bl	11ec0 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   1a624:	782c      	ldrb	r4, [r5, #0]
   1a626:	4620      	mov	r0, r4
   1a628:	f00e f917 	bl	2885a <att_op_get_type>
   1a62c:	2800      	cmp	r0, #0
   1a62e:	d0c5      	beq.n	1a5bc <bt_att_recv+0x58>
			send_err_rsp(att_chan, hdr->code, 0,
   1a630:	2306      	movs	r3, #6
   1a632:	2200      	movs	r2, #0
   1a634:	4621      	mov	r1, r4
   1a636:	4640      	mov	r0, r8
   1a638:	f7ff ff74 	bl	1a524 <send_err_rsp>
		return 0;
   1a63c:	e7be      	b.n	1a5bc <bt_att_recv+0x58>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a63e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a642:	f3bf 8f5b 	dmb	ish
   1a646:	e853 2f00 	ldrex	r2, [r3]
   1a64a:	f042 0101 	orr.w	r1, r2, #1
   1a64e:	e843 1000 	strex	r0, r1, [r3]
   1a652:	2800      	cmp	r0, #0
   1a654:	d1f7      	bne.n	1a646 <bt_att_recv+0xe2>
   1a656:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
   1a65a:	f012 0f01 	tst.w	r2, #1
   1a65e:	d0b7      	beq.n	1a5d0 <bt_att_recv+0x6c>
   1a660:	4b23      	ldr	r3, [pc, #140]	; (1a6f0 <bt_att_recv+0x18c>)
   1a662:	4a24      	ldr	r2, [pc, #144]	; (1a6f4 <bt_att_recv+0x190>)
   1a664:	1a9b      	subs	r3, r3, r2
   1a666:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected request");
   1a668:	f04f 0100 	mov.w	r1, #0
   1a66c:	2202      	movs	r2, #2
   1a66e:	f362 0102 	bfi	r1, r2, #0, #3
   1a672:	f36f 01c5 	bfc	r1, #3, #3
   1a676:	f363 118f 	bfi	r1, r3, #6, #10
   1a67a:	4821      	ldr	r0, [pc, #132]	; (1a700 <bt_att_recv+0x19c>)
   1a67c:	f7f7 fcd6 	bl	1202c <log_0>
			return 0;
   1a680:	e79c      	b.n	1a5bc <bt_att_recv+0x58>
			   atomic_test_and_set_bit(att_chan->flags,
   1a682:	37e8      	adds	r7, #232	; 0xe8
   1a684:	f3bf 8f5b 	dmb	ish
   1a688:	e857 3f00 	ldrex	r3, [r7]
   1a68c:	f043 0202 	orr.w	r2, r3, #2
   1a690:	e847 2100 	strex	r1, r2, [r7]
   1a694:	2900      	cmp	r1, #0
   1a696:	d1f7      	bne.n	1a688 <bt_att_recv+0x124>
   1a698:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
   1a69c:	f013 0f02 	tst.w	r3, #2
   1a6a0:	d099      	beq.n	1a5d6 <bt_att_recv+0x72>
   1a6a2:	4b13      	ldr	r3, [pc, #76]	; (1a6f0 <bt_att_recv+0x18c>)
   1a6a4:	4a13      	ldr	r2, [pc, #76]	; (1a6f4 <bt_att_recv+0x190>)
   1a6a6:	1a9b      	subs	r3, r3, r2
   1a6a8:	08db      	lsrs	r3, r3, #3
			BT_WARN("Ignoring unexpected indication");
   1a6aa:	f04f 0100 	mov.w	r1, #0
   1a6ae:	2202      	movs	r2, #2
   1a6b0:	f362 0102 	bfi	r1, r2, #0, #3
   1a6b4:	f36f 01c5 	bfc	r1, #3, #3
   1a6b8:	f363 118f 	bfi	r1, r3, #6, #10
   1a6bc:	4811      	ldr	r0, [pc, #68]	; (1a704 <bt_att_recv+0x1a0>)
   1a6be:	f7f7 fcb5 	bl	1202c <log_0>
			return 0;
   1a6c2:	e77b      	b.n	1a5bc <bt_att_recv+0x58>
   1a6c4:	4a0a      	ldr	r2, [pc, #40]	; (1a6f0 <bt_att_recv+0x18c>)
   1a6c6:	4b0b      	ldr	r3, [pc, #44]	; (1a6f4 <bt_att_recv+0x190>)
   1a6c8:	1ad2      	subs	r2, r2, r3
   1a6ca:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a6cc:	f04f 0300 	mov.w	r3, #0
   1a6d0:	2001      	movs	r0, #1
   1a6d2:	f360 0302 	bfi	r3, r0, #0, #3
   1a6d6:	f36f 03c5 	bfc	r3, #3, #3
   1a6da:	f362 138f 	bfi	r3, r2, #6, #10
   1a6de:	782a      	ldrb	r2, [r5, #0]
   1a6e0:	4809      	ldr	r0, [pc, #36]	; (1a708 <bt_att_recv+0x1a4>)
   1a6e2:	f7f7 fc23 	bl	11f2c <log_2>
		err = BT_ATT_ERR_INVALID_PDU;
   1a6e6:	2004      	movs	r0, #4
   1a6e8:	e77d      	b.n	1a5e6 <bt_att_recv+0x82>
   1a6ea:	bf00      	nop
   1a6ec:	0002e75c 	.word	0x0002e75c
   1a6f0:	0002c610 	.word	0x0002c610
   1a6f4:	0002c610 	.word	0x0002c610
   1a6f8:	0002e680 	.word	0x0002e680
   1a6fc:	0002e69c 	.word	0x0002e69c
   1a700:	0002e6b8 	.word	0x0002e6b8
   1a704:	0002e6d4 	.word	0x0002e6d4
   1a708:	0002e6f4 	.word	0x0002e6f4

0001a70c <att_write_rsp>:
{
   1a70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a710:	b08a      	sub	sp, #40	; 0x28
   1a712:	4604      	mov	r4, r0
   1a714:	4617      	mov	r7, r2
   1a716:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a718:	6803      	ldr	r3, [r0, #0]
   1a71a:	4688      	mov	r8, r1
   1a71c:	3900      	subs	r1, #0
   1a71e:	bf18      	it	ne
   1a720:	2101      	movne	r1, #1
   1a722:	6818      	ldr	r0, [r3, #0]
   1a724:	f00f fbad 	bl	29e82 <bt_gatt_change_aware>
   1a728:	2800      	cmp	r0, #0
   1a72a:	d04f      	beq.n	1a7cc <att_write_rsp+0xc0>
	if (!handle) {
   1a72c:	b925      	cbnz	r5, 1a738 <att_write_rsp+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a72e:	2601      	movs	r6, #1
}
   1a730:	4630      	mov	r0, r6
   1a732:	b00a      	add	sp, #40	; 0x28
   1a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1a738:	2218      	movs	r2, #24
   1a73a:	2100      	movs	r1, #0
   1a73c:	a804      	add	r0, sp, #16
   1a73e:	f00d faab 	bl	27c98 <memset>
	if (rsp) {
   1a742:	b13f      	cbz	r7, 1a754 <att_write_rsp+0x48>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1a744:	2200      	movs	r2, #0
   1a746:	4639      	mov	r1, r7
   1a748:	4620      	mov	r0, r4
   1a74a:	f7ff fe77 	bl	1a43c <bt_att_chan_create_pdu>
   1a74e:	9005      	str	r0, [sp, #20]
		if (!data.buf) {
   1a750:	2800      	cmp	r0, #0
   1a752:	d03d      	beq.n	1a7d0 <att_write_rsp+0xc4>
	data.conn = chan->att->conn;
   1a754:	6823      	ldr	r3, [r4, #0]
   1a756:	681b      	ldr	r3, [r3, #0]
   1a758:	9304      	str	r3, [sp, #16]
	data.req = req;
   1a75a:	f88d 8018 	strb.w	r8, [sp, #24]
	data.offset = offset;
   1a75e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1a762:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	data.value = value;
   1a766:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1a768:	9307      	str	r3, [sp, #28]
	data.len = len;
   1a76a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1a76e:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a772:	2301      	movs	r3, #1
   1a774:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1a778:	ab04      	add	r3, sp, #16
   1a77a:	9302      	str	r3, [sp, #8]
   1a77c:	4b15      	ldr	r3, [pc, #84]	; (1a7d4 <att_write_rsp+0xc8>)
   1a77e:	9301      	str	r3, [sp, #4]
   1a780:	2200      	movs	r2, #0
   1a782:	9200      	str	r2, [sp, #0]
   1a784:	4613      	mov	r3, r2
   1a786:	4629      	mov	r1, r5
   1a788:	4628      	mov	r0, r5
   1a78a:	f000 fe41 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1a78e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1a792:	b93e      	cbnz	r6, 1a7a4 <att_write_rsp+0x98>
	if (data.buf) {
   1a794:	9905      	ldr	r1, [sp, #20]
   1a796:	2900      	cmp	r1, #0
   1a798:	d0ca      	beq.n	1a730 <att_write_rsp+0x24>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1a79a:	4a0f      	ldr	r2, [pc, #60]	; (1a7d8 <att_write_rsp+0xcc>)
   1a79c:	4620      	mov	r0, r4
   1a79e:	f00e fa59 	bl	28c54 <bt_att_chan_send_rsp>
   1a7a2:	e7c5      	b.n	1a730 <att_write_rsp+0x24>
		if (rsp) {
   1a7a4:	b927      	cbnz	r7, 1a7b0 <att_write_rsp+0xa4>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1a7a6:	f1b8 0f18 	cmp.w	r8, #24
   1a7aa:	d00c      	beq.n	1a7c6 <att_write_rsp+0xba>
   1a7ac:	2600      	movs	r6, #0
   1a7ae:	e7bf      	b.n	1a730 <att_write_rsp+0x24>
			net_buf_unref(data.buf);
   1a7b0:	9805      	ldr	r0, [sp, #20]
   1a7b2:	f00f fce1 	bl	2a178 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1a7b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1a7ba:	462a      	mov	r2, r5
   1a7bc:	4641      	mov	r1, r8
   1a7be:	4620      	mov	r0, r4
   1a7c0:	f7ff feb0 	bl	1a524 <send_err_rsp>
   1a7c4:	e7ef      	b.n	1a7a6 <att_write_rsp+0x9a>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1a7c6:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1a7ca:	e7b1      	b.n	1a730 <att_write_rsp+0x24>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a7cc:	2612      	movs	r6, #18
   1a7ce:	e7af      	b.n	1a730 <att_write_rsp+0x24>
			return BT_ATT_ERR_UNLIKELY;
   1a7d0:	260e      	movs	r6, #14
   1a7d2:	e7ad      	b.n	1a730 <att_write_rsp+0x24>
   1a7d4:	00028cfb 	.word	0x00028cfb
   1a7d8:	00028ad5 	.word	0x00028ad5

0001a7dc <bt_att_create_pdu>:
{
   1a7dc:	b570      	push	{r4, r5, r6, lr}
   1a7de:	460e      	mov	r6, r1
   1a7e0:	4615      	mov	r5, r2
	att = att_get(conn);
   1a7e2:	f7ff fb15 	bl	19e10 <att_get>
	if (!att) {
   1a7e6:	4604      	mov	r4, r0
   1a7e8:	b340      	cbz	r0, 1a83c <bt_att_create_pdu+0x60>
	return list->head;
   1a7ea:	6a44      	ldr	r4, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a7ec:	b344      	cbz	r4, 1a840 <bt_att_create_pdu+0x64>
   1a7ee:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   1a7f2:	d027      	beq.n	1a844 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a7f4:	f514 70a2 	adds.w	r0, r4, #324	; 0x144
   1a7f8:	d008      	beq.n	1a80c <bt_att_create_pdu+0x30>
	return node->next;
   1a7fa:	f8d4 0144 	ldr.w	r0, [r4, #324]	; 0x144
   1a7fe:	b128      	cbz	r0, 1a80c <bt_att_create_pdu+0x30>
   1a800:	f5a0 70a2 	sub.w	r0, r0, #324	; 0x144
   1a804:	e002      	b.n	1a80c <bt_att_create_pdu+0x30>
   1a806:	4603      	mov	r3, r0
   1a808:	4604      	mov	r4, r0
   1a80a:	4618      	mov	r0, r3
   1a80c:	b1e4      	cbz	r4, 1a848 <bt_att_create_pdu+0x6c>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a80e:	1c6b      	adds	r3, r5, #1
   1a810:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
   1a814:	4293      	cmp	r3, r2
   1a816:	d90b      	bls.n	1a830 <bt_att_create_pdu+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a818:	2800      	cmp	r0, #0
   1a81a:	d0f4      	beq.n	1a806 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a81c:	f510 73a2 	adds.w	r3, r0, #324	; 0x144
   1a820:	d0f2      	beq.n	1a808 <bt_att_create_pdu+0x2c>
	return node->next;
   1a822:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   1a826:	2b00      	cmp	r3, #0
   1a828:	d0ee      	beq.n	1a808 <bt_att_create_pdu+0x2c>
   1a82a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   1a82e:	e7eb      	b.n	1a808 <bt_att_create_pdu+0x2c>
		return bt_att_chan_create_pdu(chan, op, len);
   1a830:	462a      	mov	r2, r5
   1a832:	4631      	mov	r1, r6
   1a834:	4620      	mov	r0, r4
   1a836:	f7ff fe01 	bl	1a43c <bt_att_chan_create_pdu>
   1a83a:	4604      	mov	r4, r0
}
   1a83c:	4620      	mov	r0, r4
   1a83e:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a840:	4620      	mov	r0, r4
   1a842:	e7e3      	b.n	1a80c <bt_att_create_pdu+0x30>
   1a844:	4620      	mov	r0, r4
   1a846:	e7e1      	b.n	1a80c <bt_att_create_pdu+0x30>
   1a848:	4b08      	ldr	r3, [pc, #32]	; (1a86c <bt_att_create_pdu+0x90>)
   1a84a:	4a09      	ldr	r2, [pc, #36]	; (1a870 <bt_att_create_pdu+0x94>)
   1a84c:	1a9b      	subs	r3, r3, r2
   1a84e:	08db      	lsrs	r3, r3, #3
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1a850:	f04f 0200 	mov.w	r2, #0
   1a854:	2102      	movs	r1, #2
   1a856:	f361 0202 	bfi	r2, r1, #0, #3
   1a85a:	f36f 02c5 	bfc	r2, #3, #3
   1a85e:	f363 128f 	bfi	r2, r3, #6, #10
   1a862:	1c69      	adds	r1, r5, #1
   1a864:	4803      	ldr	r0, [pc, #12]	; (1a874 <bt_att_create_pdu+0x98>)
   1a866:	f7f7 fb2b 	bl	11ec0 <log_1>
	return NULL;
   1a86a:	e7e7      	b.n	1a83c <bt_att_create_pdu+0x60>
   1a86c:	0002c610 	.word	0x0002c610
   1a870:	0002c610 	.word	0x0002c610
   1a874:	0002e714 	.word	0x0002e714

0001a878 <att_read_group_rsp>:
{
   1a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a87c:	b08a      	sub	sp, #40	; 0x28
   1a87e:	4604      	mov	r4, r0
   1a880:	460f      	mov	r7, r1
   1a882:	4615      	mov	r5, r2
   1a884:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1a886:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1a88a:	2214      	movs	r2, #20
   1a88c:	2100      	movs	r1, #0
   1a88e:	eb0d 0002 	add.w	r0, sp, r2
   1a892:	f00d fa01 	bl	27c98 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1a896:	2201      	movs	r2, #1
   1a898:	2111      	movs	r1, #17
   1a89a:	4640      	mov	r0, r8
   1a89c:	f7ff ff9e 	bl	1a7dc <bt_att_create_pdu>
   1a8a0:	9007      	str	r0, [sp, #28]
	if (!data.buf) {
   1a8a2:	b350      	cbz	r0, 1a8fa <att_read_group_rsp+0x82>
	data.chan = chan;
   1a8a4:	9405      	str	r4, [sp, #20]
	data.uuid = uuid;
   1a8a6:	9706      	str	r7, [sp, #24]
	return net_buf_simple_add(&buf->b, len);
   1a8a8:	2101      	movs	r1, #1
   1a8aa:	3008      	adds	r0, #8
   1a8ac:	f00f fcae 	bl	2a20c <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a8b0:	9008      	str	r0, [sp, #32]
	data.rsp->len = 0U;
   1a8b2:	2200      	movs	r2, #0
   1a8b4:	7002      	strb	r2, [r0, #0]
	data.group = NULL;
   1a8b6:	9209      	str	r2, [sp, #36]	; 0x24
   1a8b8:	ab05      	add	r3, sp, #20
   1a8ba:	9302      	str	r3, [sp, #8]
   1a8bc:	4b10      	ldr	r3, [pc, #64]	; (1a900 <att_read_group_rsp+0x88>)
   1a8be:	9301      	str	r3, [sp, #4]
   1a8c0:	9200      	str	r2, [sp, #0]
   1a8c2:	4613      	mov	r3, r2
   1a8c4:	4631      	mov	r1, r6
   1a8c6:	4628      	mov	r0, r5
   1a8c8:	f000 fda2 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (!data.rsp->len) {
   1a8cc:	9b08      	ldr	r3, [sp, #32]
   1a8ce:	781e      	ldrb	r6, [r3, #0]
   1a8d0:	b14e      	cbz	r6, 1a8e6 <att_read_group_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1a8d2:	4a0c      	ldr	r2, [pc, #48]	; (1a904 <att_read_group_rsp+0x8c>)
   1a8d4:	9907      	ldr	r1, [sp, #28]
   1a8d6:	4620      	mov	r0, r4
   1a8d8:	f00e f9bc 	bl	28c54 <bt_att_chan_send_rsp>
	return 0;
   1a8dc:	2600      	movs	r6, #0
}
   1a8de:	4630      	mov	r0, r6
   1a8e0:	b00a      	add	sp, #40	; 0x28
   1a8e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1a8e6:	9807      	ldr	r0, [sp, #28]
   1a8e8:	f00f fc46 	bl	2a178 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   1a8ec:	230a      	movs	r3, #10
   1a8ee:	462a      	mov	r2, r5
   1a8f0:	2110      	movs	r1, #16
   1a8f2:	4620      	mov	r0, r4
   1a8f4:	f7ff fe16 	bl	1a524 <send_err_rsp>
		return 0;
   1a8f8:	e7f1      	b.n	1a8de <att_read_group_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   1a8fa:	260e      	movs	r6, #14
   1a8fc:	e7ef      	b.n	1a8de <att_read_group_rsp+0x66>
   1a8fe:	bf00      	nop
   1a900:	0001a0e9 	.word	0x0001a0e9
   1a904:	00028ad5 	.word	0x00028ad5

0001a908 <att_read_mult_req>:
{
   1a908:	b570      	push	{r4, r5, r6, lr}
   1a90a:	b088      	sub	sp, #32
   1a90c:	4606      	mov	r6, r0
   1a90e:	460d      	mov	r5, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1a910:	6884      	ldr	r4, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1a912:	2101      	movs	r1, #1
   1a914:	4620      	mov	r0, r4
   1a916:	f00f fab4 	bl	29e82 <bt_gatt_change_aware>
   1a91a:	2800      	cmp	r0, #0
   1a91c:	d039      	beq.n	1a992 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   1a91e:	2210      	movs	r2, #16
   1a920:	2100      	movs	r1, #0
   1a922:	eb0d 0002 	add.w	r0, sp, r2
   1a926:	f00d f9b7 	bl	27c98 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1a92a:	2200      	movs	r2, #0
   1a92c:	210f      	movs	r1, #15
   1a92e:	4620      	mov	r0, r4
   1a930:	f7ff ff54 	bl	1a7dc <bt_att_create_pdu>
   1a934:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1a936:	b378      	cbz	r0, 1a998 <att_read_mult_req+0x90>
	data.chan = chan;
   1a938:	9604      	str	r6, [sp, #16]
	while (buf->len >= sizeof(uint16_t)) {
   1a93a:	89ab      	ldrh	r3, [r5, #12]
   1a93c:	2b01      	cmp	r3, #1
   1a93e:	d921      	bls.n	1a984 <att_read_mult_req+0x7c>
	return net_buf_simple_pull_le16(&buf->b);
   1a940:	f105 0008 	add.w	r0, r5, #8
   1a944:	f00f fc9c 	bl	2a280 <net_buf_simple_pull_le16>
   1a948:	4604      	mov	r4, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a94a:	2301      	movs	r3, #1
   1a94c:	f88d 301c 	strb.w	r3, [sp, #28]
   1a950:	ab04      	add	r3, sp, #16
   1a952:	9302      	str	r3, [sp, #8]
   1a954:	4b11      	ldr	r3, [pc, #68]	; (1a99c <att_read_mult_req+0x94>)
   1a956:	9301      	str	r3, [sp, #4]
   1a958:	2200      	movs	r2, #0
   1a95a:	9200      	str	r2, [sp, #0]
   1a95c:	4613      	mov	r3, r2
   1a95e:	4601      	mov	r1, r0
   1a960:	f000 fd56 	bl	1b410 <bt_gatt_foreach_attr_type>
		if (data.err) {
   1a964:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1a968:	2b00      	cmp	r3, #0
   1a96a:	d0e6      	beq.n	1a93a <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   1a96c:	9806      	ldr	r0, [sp, #24]
   1a96e:	f00f fc03 	bl	2a178 <net_buf_unref>
			send_err_rsp(chan, BT_ATT_OP_READ_MULT_REQ, handle,
   1a972:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1a976:	4622      	mov	r2, r4
   1a978:	210e      	movs	r1, #14
   1a97a:	4630      	mov	r0, r6
   1a97c:	f7ff fdd2 	bl	1a524 <send_err_rsp>
			return 0;
   1a980:	2000      	movs	r0, #0
   1a982:	e007      	b.n	1a994 <att_read_mult_req+0x8c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1a984:	4a06      	ldr	r2, [pc, #24]	; (1a9a0 <att_read_mult_req+0x98>)
   1a986:	9906      	ldr	r1, [sp, #24]
   1a988:	4630      	mov	r0, r6
   1a98a:	f00e f963 	bl	28c54 <bt_att_chan_send_rsp>
	return 0;
   1a98e:	2000      	movs	r0, #0
   1a990:	e000      	b.n	1a994 <att_read_mult_req+0x8c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a992:	2012      	movs	r0, #18
}
   1a994:	b008      	add	sp, #32
   1a996:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
   1a998:	200e      	movs	r0, #14
   1a99a:	e7fb      	b.n	1a994 <att_read_mult_req+0x8c>
   1a99c:	00028ea7 	.word	0x00028ea7
   1a9a0:	00028ad5 	.word	0x00028ad5

0001a9a4 <att_read_rsp>:
{
   1a9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9a8:	b088      	sub	sp, #32
   1a9aa:	4604      	mov	r4, r0
   1a9ac:	4688      	mov	r8, r1
   1a9ae:	4616      	mov	r6, r2
   1a9b0:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1a9b2:	6887      	ldr	r7, [r0, #8]
	if (!bt_gatt_change_aware(conn, true)) {
   1a9b4:	2101      	movs	r1, #1
   1a9b6:	4638      	mov	r0, r7
   1a9b8:	f00f fa63 	bl	29e82 <bt_gatt_change_aware>
   1a9bc:	2800      	cmp	r0, #0
   1a9be:	d03a      	beq.n	1aa36 <att_read_rsp+0x92>
	if (!handle) {
   1a9c0:	b925      	cbnz	r5, 1a9cc <att_read_rsp+0x28>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a9c2:	2601      	movs	r6, #1
}
   1a9c4:	4630      	mov	r0, r6
   1a9c6:	b008      	add	sp, #32
   1a9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(&data, 0, sizeof(data));
   1a9cc:	2210      	movs	r2, #16
   1a9ce:	2100      	movs	r1, #0
   1a9d0:	eb0d 0002 	add.w	r0, sp, r2
   1a9d4:	f00d f960 	bl	27c98 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1a9d8:	2200      	movs	r2, #0
   1a9da:	4631      	mov	r1, r6
   1a9dc:	4638      	mov	r0, r7
   1a9de:	f7ff fefd 	bl	1a7dc <bt_att_create_pdu>
   1a9e2:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1a9e4:	b348      	cbz	r0, 1aa3a <att_read_rsp+0x96>
	data.chan = chan;
   1a9e6:	9404      	str	r4, [sp, #16]
	data.offset = offset;
   1a9e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   1a9ec:	f8ad 3014 	strh.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a9f0:	2301      	movs	r3, #1
   1a9f2:	f88d 301c 	strb.w	r3, [sp, #28]
   1a9f6:	ab04      	add	r3, sp, #16
   1a9f8:	9302      	str	r3, [sp, #8]
   1a9fa:	4b11      	ldr	r3, [pc, #68]	; (1aa40 <att_read_rsp+0x9c>)
   1a9fc:	9301      	str	r3, [sp, #4]
   1a9fe:	2200      	movs	r2, #0
   1aa00:	9200      	str	r2, [sp, #0]
   1aa02:	4613      	mov	r3, r2
   1aa04:	4629      	mov	r1, r5
   1aa06:	4628      	mov	r0, r5
   1aa08:	f000 fd02 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1aa0c:	f89d 601c 	ldrb.w	r6, [sp, #28]
   1aa10:	b92e      	cbnz	r6, 1aa1e <att_read_rsp+0x7a>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1aa12:	4a0c      	ldr	r2, [pc, #48]	; (1aa44 <att_read_rsp+0xa0>)
   1aa14:	9906      	ldr	r1, [sp, #24]
   1aa16:	4620      	mov	r0, r4
   1aa18:	f00e f91c 	bl	28c54 <bt_att_chan_send_rsp>
	return 0;
   1aa1c:	e7d2      	b.n	1a9c4 <att_read_rsp+0x20>
		net_buf_unref(data.buf);
   1aa1e:	9806      	ldr	r0, [sp, #24]
   1aa20:	f00f fbaa 	bl	2a178 <net_buf_unref>
		send_err_rsp(chan, op, handle, data.err);
   1aa24:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1aa28:	462a      	mov	r2, r5
   1aa2a:	4641      	mov	r1, r8
   1aa2c:	4620      	mov	r0, r4
   1aa2e:	f7ff fd79 	bl	1a524 <send_err_rsp>
		return 0;
   1aa32:	2600      	movs	r6, #0
   1aa34:	e7c6      	b.n	1a9c4 <att_read_rsp+0x20>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1aa36:	2612      	movs	r6, #18
   1aa38:	e7c4      	b.n	1a9c4 <att_read_rsp+0x20>
		return BT_ATT_ERR_UNLIKELY;
   1aa3a:	260e      	movs	r6, #14
   1aa3c:	e7c2      	b.n	1a9c4 <att_read_rsp+0x20>
   1aa3e:	bf00      	nop
   1aa40:	00028ea7 	.word	0x00028ea7
   1aa44:	00028ad5 	.word	0x00028ad5

0001aa48 <att_read_type_rsp>:
{
   1aa48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aa4c:	b08a      	sub	sp, #40	; 0x28
   1aa4e:	4604      	mov	r4, r0
   1aa50:	460f      	mov	r7, r1
   1aa52:	4615      	mov	r5, r2
   1aa54:	461e      	mov	r6, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1aa56:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1aa5a:	2218      	movs	r2, #24
   1aa5c:	2100      	movs	r1, #0
   1aa5e:	a804      	add	r0, sp, #16
   1aa60:	f00d f91a 	bl	27c98 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1aa64:	2201      	movs	r2, #1
   1aa66:	2109      	movs	r1, #9
   1aa68:	4640      	mov	r0, r8
   1aa6a:	f7ff feb7 	bl	1a7dc <bt_att_create_pdu>
   1aa6e:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1aa70:	b368      	cbz	r0, 1aace <att_read_type_rsp+0x86>
	data.chan = chan;
   1aa72:	9404      	str	r4, [sp, #16]
	data.uuid = uuid;
   1aa74:	9705      	str	r7, [sp, #20]
	return net_buf_simple_add(&buf->b, len);
   1aa76:	2101      	movs	r1, #1
   1aa78:	3008      	adds	r0, #8
   1aa7a:	f00f fbc7 	bl	2a20c <net_buf_simple_add>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1aa7e:	9007      	str	r0, [sp, #28]
	data.rsp->len = 0U;
   1aa80:	2200      	movs	r2, #0
   1aa82:	7002      	strb	r2, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1aa84:	230a      	movs	r3, #10
   1aa86:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   1aa8a:	ab04      	add	r3, sp, #16
   1aa8c:	9302      	str	r3, [sp, #8]
   1aa8e:	4b11      	ldr	r3, [pc, #68]	; (1aad4 <att_read_type_rsp+0x8c>)
   1aa90:	9301      	str	r3, [sp, #4]
   1aa92:	9200      	str	r2, [sp, #0]
   1aa94:	4613      	mov	r3, r2
   1aa96:	4631      	mov	r1, r6
   1aa98:	4628      	mov	r0, r5
   1aa9a:	f000 fcb9 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1aa9e:	f89d 6024 	ldrb.w	r6, [sp, #36]	; 0x24
   1aaa2:	b946      	cbnz	r6, 1aab6 <att_read_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1aaa4:	4a0c      	ldr	r2, [pc, #48]	; (1aad8 <att_read_type_rsp+0x90>)
   1aaa6:	9906      	ldr	r1, [sp, #24]
   1aaa8:	4620      	mov	r0, r4
   1aaaa:	f00e f8d3 	bl	28c54 <bt_att_chan_send_rsp>
}
   1aaae:	4630      	mov	r0, r6
   1aab0:	b00a      	add	sp, #40	; 0x28
   1aab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1aab6:	9806      	ldr	r0, [sp, #24]
   1aab8:	f00f fb5e 	bl	2a178 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, start_handle,
   1aabc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   1aac0:	462a      	mov	r2, r5
   1aac2:	2108      	movs	r1, #8
   1aac4:	4620      	mov	r0, r4
   1aac6:	f7ff fd2d 	bl	1a524 <send_err_rsp>
		return 0;
   1aaca:	2600      	movs	r6, #0
   1aacc:	e7ef      	b.n	1aaae <att_read_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   1aace:	260e      	movs	r6, #14
   1aad0:	e7ed      	b.n	1aaae <att_read_type_rsp+0x66>
   1aad2:	bf00      	nop
   1aad4:	0001a19d 	.word	0x0001a19d
   1aad8:	00028ad5 	.word	0x00028ad5

0001aadc <att_find_type_rsp>:
{
   1aadc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aae0:	b08a      	sub	sp, #40	; 0x28
   1aae2:	4604      	mov	r4, r0
   1aae4:	460d      	mov	r5, r1
   1aae6:	4616      	mov	r6, r2
   1aae8:	461f      	mov	r7, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   1aaea:	f8d0 8008 	ldr.w	r8, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1aaee:	2214      	movs	r2, #20
   1aaf0:	2100      	movs	r1, #0
   1aaf2:	eb0d 0002 	add.w	r0, sp, r2
   1aaf6:	f00d f8cf 	bl	27c98 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1aafa:	2200      	movs	r2, #0
   1aafc:	2107      	movs	r1, #7
   1aafe:	4640      	mov	r0, r8
   1ab00:	f7ff fe6c 	bl	1a7dc <bt_att_create_pdu>
   1ab04:	9006      	str	r0, [sp, #24]
	if (!data.buf) {
   1ab06:	b360      	cbz	r0, 1ab62 <att_find_type_rsp+0x86>
	data.chan = chan;
   1ab08:	9405      	str	r4, [sp, #20]
	data.group = NULL;
   1ab0a:	2200      	movs	r2, #0
   1ab0c:	9207      	str	r2, [sp, #28]
	data.value = value;
   1ab0e:	9708      	str	r7, [sp, #32]
	data.value_len = value_len;
   1ab10:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1ab14:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1ab18:	230a      	movs	r3, #10
   1ab1a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   1ab1e:	ab05      	add	r3, sp, #20
   1ab20:	9302      	str	r3, [sp, #8]
   1ab22:	4b11      	ldr	r3, [pc, #68]	; (1ab68 <att_find_type_rsp+0x8c>)
   1ab24:	9301      	str	r3, [sp, #4]
   1ab26:	9200      	str	r2, [sp, #0]
   1ab28:	4613      	mov	r3, r2
   1ab2a:	4631      	mov	r1, r6
   1ab2c:	4628      	mov	r0, r5
   1ab2e:	f000 fc6f 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (data.err) {
   1ab32:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
   1ab36:	b946      	cbnz	r6, 1ab4a <att_find_type_rsp+0x6e>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ab38:	4a0c      	ldr	r2, [pc, #48]	; (1ab6c <att_find_type_rsp+0x90>)
   1ab3a:	9906      	ldr	r1, [sp, #24]
   1ab3c:	4620      	mov	r0, r4
   1ab3e:	f00e f889 	bl	28c54 <bt_att_chan_send_rsp>
}
   1ab42:	4630      	mov	r0, r6
   1ab44:	b00a      	add	sp, #40	; 0x28
   1ab46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(data.buf);
   1ab4a:	9806      	ldr	r0, [sp, #24]
   1ab4c:	f00f fb14 	bl	2a178 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   1ab50:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   1ab54:	462a      	mov	r2, r5
   1ab56:	2106      	movs	r1, #6
   1ab58:	4620      	mov	r0, r4
   1ab5a:	f7ff fce3 	bl	1a524 <send_err_rsp>
		return 0;
   1ab5e:	2600      	movs	r6, #0
   1ab60:	e7ef      	b.n	1ab42 <att_find_type_rsp+0x66>
		return BT_ATT_ERR_UNLIKELY;
   1ab62:	260e      	movs	r6, #14
   1ab64:	e7ed      	b.n	1ab42 <att_find_type_rsp+0x66>
   1ab66:	bf00      	nop
   1ab68:	0001a249 	.word	0x0001a249
   1ab6c:	00028ad5 	.word	0x00028ad5

0001ab70 <att_find_info_rsp>:
{
   1ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab72:	b089      	sub	sp, #36	; 0x24
   1ab74:	4604      	mov	r4, r0
   1ab76:	460f      	mov	r7, r1
   1ab78:	4616      	mov	r6, r2
	struct bt_conn *conn = chan->chan.chan.conn;
   1ab7a:	6885      	ldr	r5, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1ab7c:	2210      	movs	r2, #16
   1ab7e:	2100      	movs	r1, #0
   1ab80:	eb0d 0002 	add.w	r0, sp, r2
   1ab84:	f00d f888 	bl	27c98 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1ab88:	2200      	movs	r2, #0
   1ab8a:	2105      	movs	r1, #5
   1ab8c:	4628      	mov	r0, r5
   1ab8e:	f7ff fe25 	bl	1a7dc <bt_att_create_pdu>
   1ab92:	9005      	str	r0, [sp, #20]
	if (!data.buf) {
   1ab94:	b300      	cbz	r0, 1abd8 <att_find_info_rsp+0x68>
	data.chan = chan;
   1ab96:	9404      	str	r4, [sp, #16]
   1ab98:	ab04      	add	r3, sp, #16
   1ab9a:	9302      	str	r3, [sp, #8]
   1ab9c:	4b0f      	ldr	r3, [pc, #60]	; (1abdc <att_find_info_rsp+0x6c>)
   1ab9e:	9301      	str	r3, [sp, #4]
   1aba0:	2200      	movs	r2, #0
   1aba2:	9200      	str	r2, [sp, #0]
   1aba4:	4613      	mov	r3, r2
   1aba6:	4631      	mov	r1, r6
   1aba8:	4638      	mov	r0, r7
   1abaa:	f000 fc31 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (!data.rsp) {
   1abae:	9b06      	ldr	r3, [sp, #24]
   1abb0:	b13b      	cbz	r3, 1abc2 <att_find_info_rsp+0x52>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1abb2:	4a0b      	ldr	r2, [pc, #44]	; (1abe0 <att_find_info_rsp+0x70>)
   1abb4:	9905      	ldr	r1, [sp, #20]
   1abb6:	4620      	mov	r0, r4
   1abb8:	f00e f84c 	bl	28c54 <bt_att_chan_send_rsp>
	return 0;
   1abbc:	2000      	movs	r0, #0
}
   1abbe:	b009      	add	sp, #36	; 0x24
   1abc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
   1abc2:	9805      	ldr	r0, [sp, #20]
   1abc4:	f00f fad8 	bl	2a178 <net_buf_unref>
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, start_handle,
   1abc8:	230a      	movs	r3, #10
   1abca:	463a      	mov	r2, r7
   1abcc:	2104      	movs	r1, #4
   1abce:	4620      	mov	r0, r4
   1abd0:	f7ff fca8 	bl	1a524 <send_err_rsp>
		return 0;
   1abd4:	2000      	movs	r0, #0
   1abd6:	e7f2      	b.n	1abbe <att_find_info_rsp+0x4e>
		return BT_ATT_ERR_UNLIKELY;
   1abd8:	200e      	movs	r0, #14
   1abda:	e7f0      	b.n	1abbe <att_find_info_rsp+0x4e>
   1abdc:	00028eef 	.word	0x00028eef
   1abe0:	00028ad5 	.word	0x00028ad5

0001abe4 <att_mtu_req>:
{
   1abe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1abe6:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1abe8:	6803      	ldr	r3, [r0, #0]
   1abea:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1abec:	f3bf 8f5b 	dmb	ish
   1abf0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1abf4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1abf8:	f013 0f08 	tst.w	r3, #8
   1abfc:	d122      	bne.n	1ac44 <att_mtu_req+0x60>
	req = (void *)buf->data;
   1abfe:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
   1ac00:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1ac02:	2e16      	cmp	r6, #22
   1ac04:	d920      	bls.n	1ac48 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1ac06:	2202      	movs	r2, #2
   1ac08:	2103      	movs	r1, #3
   1ac0a:	f7ff fde7 	bl	1a7dc <bt_att_create_pdu>
	if (!pdu) {
   1ac0e:	4607      	mov	r7, r0
   1ac10:	b1e0      	cbz	r0, 1ac4c <att_mtu_req+0x68>
   1ac12:	2102      	movs	r1, #2
   1ac14:	3008      	adds	r0, #8
   1ac16:	f00f faf9 	bl	2a20c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1ac1a:	2500      	movs	r5, #0
   1ac1c:	2317      	movs	r3, #23
   1ac1e:	7003      	strb	r3, [r0, #0]
   1ac20:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1ac22:	4a0b      	ldr	r2, [pc, #44]	; (1ac50 <att_mtu_req+0x6c>)
   1ac24:	4639      	mov	r1, r7
   1ac26:	4620      	mov	r0, r4
   1ac28:	f00e f814 	bl	28c54 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1ac2c:	2e17      	cmp	r6, #23
   1ac2e:	bf28      	it	cs
   1ac30:	2617      	movcs	r6, #23
   1ac32:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1ac36:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1ac3a:	4620      	mov	r0, r4
   1ac3c:	f00e f817 	bl	28c6e <att_chan_mtu_updated>
	return 0;
   1ac40:	4628      	mov	r0, r5
}
   1ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1ac44:	2006      	movs	r0, #6
   1ac46:	e7fc      	b.n	1ac42 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
   1ac48:	2004      	movs	r0, #4
   1ac4a:	e7fa      	b.n	1ac42 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
   1ac4c:	200e      	movs	r0, #14
   1ac4e:	e7f8      	b.n	1ac42 <att_mtu_req+0x5e>
   1ac50:	00028ad5 	.word	0x00028ad5

0001ac54 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1ac54:	b500      	push	{lr}
   1ac56:	b083      	sub	sp, #12
   1ac58:	4602      	mov	r2, r0
   1ac5a:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;
   1ac5c:	2100      	movs	r1, #0
   1ac5e:	9101      	str	r1, [sp, #4]

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1ac60:	a901      	add	r1, sp, #4
   1ac62:	4807      	ldr	r0, [pc, #28]	; (1ac80 <bt_att_req_alloc+0x2c>)
   1ac64:	f006 fdc8 	bl	217f8 <k_mem_slab_alloc>
   1ac68:	b940      	cbnz	r0, 1ac7c <bt_att_req_alloc+0x28>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1ac6a:	2210      	movs	r2, #16
   1ac6c:	2100      	movs	r1, #0
   1ac6e:	9801      	ldr	r0, [sp, #4]
   1ac70:	f00d f812 	bl	27c98 <memset>

	return req;
   1ac74:	9801      	ldr	r0, [sp, #4]
}
   1ac76:	b003      	add	sp, #12
   1ac78:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1ac7c:	2000      	movs	r0, #0
   1ac7e:	e7fa      	b.n	1ac76 <bt_att_req_alloc+0x22>
   1ac80:	20000790 	.word	0x20000790

0001ac84 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1ac84:	b500      	push	{lr}
   1ac86:	b083      	sub	sp, #12
   1ac88:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1ac8a:	6880      	ldr	r0, [r0, #8]
   1ac8c:	b120      	cbz	r0, 1ac98 <bt_att_req_free+0x14>
		net_buf_unref(req->buf);
   1ac8e:	f00f fa73 	bl	2a178 <net_buf_unref>
		req->buf = NULL;
   1ac92:	9b01      	ldr	r3, [sp, #4]
   1ac94:	2200      	movs	r2, #0
   1ac96:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1ac98:	a901      	add	r1, sp, #4
   1ac9a:	4803      	ldr	r0, [pc, #12]	; (1aca8 <bt_att_req_free+0x24>)
   1ac9c:	f010 fd14 	bl	2b6c8 <k_mem_slab_free>
}
   1aca0:	b003      	add	sp, #12
   1aca2:	f85d fb04 	ldr.w	pc, [sp], #4
   1aca6:	bf00      	nop
   1aca8:	20000790 	.word	0x20000790

0001acac <att_handle_rsp>:
{
   1acac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1acb0:	b082      	sub	sp, #8
   1acb2:	4604      	mov	r4, r0
   1acb4:	460f      	mov	r7, r1
   1acb6:	4691      	mov	r9, r2
   1acb8:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1acba:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1acbe:	f010 ff85 	bl	2bbcc <k_work_cancel_delayable>
	if (!chan->req) {
   1acc2:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   1acc6:	b1f8      	cbz	r0, 1ad08 <att_handle_rsp+0x5c>
	if (chan->req == &cancel) {
   1acc8:	4b1a      	ldr	r3, [pc, #104]	; (1ad34 <att_handle_rsp+0x88>)
   1acca:	4298      	cmp	r0, r3
   1accc:	d02e      	beq.n	1ad2c <att_handle_rsp+0x80>
	func = chan->req->func;
   1acce:	6845      	ldr	r5, [r0, #4]
	chan->req->func = NULL;
   1acd0:	f04f 0a00 	mov.w	sl, #0
   1acd4:	f8c0 a004 	str.w	sl, [r0, #4]
	params = chan->req->user_data;
   1acd8:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
   1acdc:	f8d0 800c 	ldr.w	r8, [r0, #12]
	bt_att_req_free(chan->req);
   1ace0:	f7ff ffd0 	bl	1ac84 <bt_att_req_free>
	chan->req = NULL;
   1ace4:	f8c4 a0f4 	str.w	sl, [r4, #244]	; 0xf4
	att_req_send_process(chan->att);
   1ace8:	6820      	ldr	r0, [r4, #0]
   1acea:	f00d fe95 	bl	28a18 <att_req_send_process>
	if (func) {
   1acee:	b13d      	cbz	r5, 1ad00 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   1acf0:	6823      	ldr	r3, [r4, #0]
   1acf2:	6818      	ldr	r0, [r3, #0]
   1acf4:	f8cd 8000 	str.w	r8, [sp]
   1acf8:	464b      	mov	r3, r9
   1acfa:	463a      	mov	r2, r7
   1acfc:	4631      	mov	r1, r6
   1acfe:	47a8      	blx	r5
}
   1ad00:	2000      	movs	r0, #0
   1ad02:	b002      	add	sp, #8
   1ad04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ad08:	4b0b      	ldr	r3, [pc, #44]	; (1ad38 <att_handle_rsp+0x8c>)
   1ad0a:	4a0c      	ldr	r2, [pc, #48]	; (1ad3c <att_handle_rsp+0x90>)
   1ad0c:	1a9b      	subs	r3, r3, r2
   1ad0e:	08db      	lsrs	r3, r3, #3
		BT_WARN("No pending ATT request");
   1ad10:	f04f 0100 	mov.w	r1, #0
   1ad14:	2202      	movs	r2, #2
   1ad16:	f362 0102 	bfi	r1, r2, #0, #3
   1ad1a:	f36f 01c5 	bfc	r1, #3, #3
   1ad1e:	f363 118f 	bfi	r1, r3, #6, #10
   1ad22:	4807      	ldr	r0, [pc, #28]	; (1ad40 <att_handle_rsp+0x94>)
   1ad24:	f7f7 f982 	bl	1202c <log_0>
	bt_att_func_t func = NULL;
   1ad28:	2500      	movs	r5, #0
		goto process;
   1ad2a:	e7dd      	b.n	1ace8 <att_handle_rsp+0x3c>
		chan->req = NULL;
   1ad2c:	2500      	movs	r5, #0
   1ad2e:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
		goto process;
   1ad32:	e7d9      	b.n	1ace8 <att_handle_rsp+0x3c>
   1ad34:	20002c18 	.word	0x20002c18
   1ad38:	0002c610 	.word	0x0002c610
   1ad3c:	0002c610 	.word	0x0002c610
   1ad40:	0002e730 	.word	0x0002e730

0001ad44 <att_error_rsp>:
{
   1ad44:	b508      	push	{r3, lr}
	rsp = (void *)buf->data;
   1ad46:	688a      	ldr	r2, [r1, #8]
	if (!chan->req || chan->req == &cancel) {
   1ad48:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ad4c:	b143      	cbz	r3, 1ad60 <att_error_rsp+0x1c>
   1ad4e:	4906      	ldr	r1, [pc, #24]	; (1ad68 <att_error_rsp+0x24>)
   1ad50:	428b      	cmp	r3, r1
   1ad52:	d007      	beq.n	1ad64 <att_error_rsp+0x20>
	err = rsp->error;
   1ad54:	78d3      	ldrb	r3, [r2, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1ad56:	2200      	movs	r2, #0
   1ad58:	4611      	mov	r1, r2
   1ad5a:	f7ff ffa7 	bl	1acac <att_handle_rsp>
}
   1ad5e:	bd08      	pop	{r3, pc}
		err = BT_ATT_ERR_UNLIKELY;
   1ad60:	230e      	movs	r3, #14
   1ad62:	e7f8      	b.n	1ad56 <att_error_rsp+0x12>
   1ad64:	230e      	movs	r3, #14
   1ad66:	e7f6      	b.n	1ad56 <att_error_rsp+0x12>
   1ad68:	20002c18 	.word	0x20002c18

0001ad6c <att_reset>:
{
   1ad6c:	b570      	push	{r4, r5, r6, lr}
   1ad6e:	b084      	sub	sp, #16
   1ad70:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1ad72:	2200      	movs	r2, #0
   1ad74:	2300      	movs	r3, #0
   1ad76:	9803      	ldr	r0, [sp, #12]
   1ad78:	300c      	adds	r0, #12
   1ad7a:	f00f f9cb 	bl	2a114 <net_buf_get>
   1ad7e:	4603      	mov	r3, r0
   1ad80:	b118      	cbz	r0, 1ad8a <att_reset+0x1e>
		net_buf_unref(buf);
   1ad82:	4618      	mov	r0, r3
   1ad84:	f00f f9f8 	bl	2a178 <net_buf_unref>
   1ad88:	e7f3      	b.n	1ad72 <att_reset+0x6>
	att->conn = NULL;
   1ad8a:	9b03      	ldr	r3, [sp, #12]
   1ad8c:	2200      	movs	r2, #0
   1ad8e:	601a      	str	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1ad90:	9b03      	ldr	r3, [sp, #12]
	return list->head;
   1ad92:	685d      	ldr	r5, [r3, #4]
   1ad94:	b11d      	cbz	r5, 1ad9e <att_reset+0x32>
   1ad96:	462c      	mov	r4, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ad98:	b135      	cbz	r5, 1ada8 <att_reset+0x3c>
	return node->next;
   1ad9a:	682c      	ldr	r4, [r5, #0]
   1ad9c:	e004      	b.n	1ada8 <att_reset+0x3c>
   1ad9e:	462c      	mov	r4, r5
   1ada0:	e002      	b.n	1ada8 <att_reset+0x3c>
   1ada2:	4623      	mov	r3, r4
   1ada4:	4625      	mov	r5, r4
   1ada6:	461c      	mov	r4, r3
   1ada8:	b195      	cbz	r5, 1add0 <att_reset+0x64>
		if (req->func) {
   1adaa:	686e      	ldr	r6, [r5, #4]
   1adac:	b136      	cbz	r6, 1adbc <att_reset+0x50>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1adae:	68eb      	ldr	r3, [r5, #12]
   1adb0:	9300      	str	r3, [sp, #0]
   1adb2:	2300      	movs	r3, #0
   1adb4:	461a      	mov	r2, r3
   1adb6:	210e      	movs	r1, #14
   1adb8:	4618      	mov	r0, r3
   1adba:	47b0      	blx	r6
		bt_att_req_free(req);
   1adbc:	4628      	mov	r0, r5
   1adbe:	f7ff ff61 	bl	1ac84 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   1adc2:	2c00      	cmp	r4, #0
   1adc4:	d0ed      	beq.n	1ada2 <att_reset+0x36>
   1adc6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1adc8:	2c00      	cmp	r4, #0
   1adca:	d0eb      	beq.n	1ada4 <att_reset+0x38>
	return node->next;
   1adcc:	6823      	ldr	r3, [r4, #0]
   1adce:	e7e9      	b.n	1ada4 <att_reset+0x38>
	k_mem_slab_free(&att_slab, (void **)&att);
   1add0:	a903      	add	r1, sp, #12
   1add2:	4802      	ldr	r0, [pc, #8]	; (1addc <att_reset+0x70>)
   1add4:	f010 fc78 	bl	2b6c8 <k_mem_slab_free>
}
   1add8:	b004      	add	sp, #16
   1adda:	bd70      	pop	{r4, r5, r6, pc}
   1addc:	2000073c 	.word	0x2000073c

0001ade0 <att_timeout>:
{
   1ade0:	b510      	push	{r4, lr}
   1ade2:	4604      	mov	r4, r0
   1ade4:	4b0a      	ldr	r3, [pc, #40]	; (1ae10 <att_timeout+0x30>)
   1ade6:	4a0b      	ldr	r2, [pc, #44]	; (1ae14 <att_timeout+0x34>)
   1ade8:	1a9b      	subs	r3, r3, r2
   1adea:	08db      	lsrs	r3, r3, #3
	BT_ERR("ATT Timeout");
   1adec:	f04f 0100 	mov.w	r1, #0
   1adf0:	2201      	movs	r2, #1
   1adf2:	f362 0102 	bfi	r1, r2, #0, #3
   1adf6:	f36f 01c5 	bfc	r1, #3, #3
   1adfa:	f363 118f 	bfi	r1, r3, #6, #10
   1adfe:	4806      	ldr	r0, [pc, #24]	; (1ae18 <att_timeout+0x38>)
   1ae00:	f7f7 f914 	bl	1202c <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1ae04:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
   1ae08:	f00e faa6 	bl	29358 <bt_att_disconnected>
}
   1ae0c:	bd10      	pop	{r4, pc}
   1ae0e:	bf00      	nop
   1ae10:	0002c610 	.word	0x0002c610
   1ae14:	0002c610 	.word	0x0002c610
   1ae18:	0002e748 	.word	0x0002e748

0001ae1c <bt_att_chan_req_cancel>:
	return 0;
}

static bool bt_att_chan_req_cancel(struct bt_att_chan *chan,
				   struct bt_att_req *req)
{
   1ae1c:	b508      	push	{r3, lr}
	if (chan->req != req) {
   1ae1e:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1ae22:	428b      	cmp	r3, r1
   1ae24:	d001      	beq.n	1ae2a <bt_att_chan_req_cancel+0xe>
		return false;
   1ae26:	2000      	movs	r0, #0
	chan->req = &cancel;

	bt_att_req_free(req);

	return true;
}
   1ae28:	bd08      	pop	{r3, pc}
	chan->req = &cancel;
   1ae2a:	4b04      	ldr	r3, [pc, #16]	; (1ae3c <bt_att_chan_req_cancel+0x20>)
   1ae2c:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
	bt_att_req_free(req);
   1ae30:	4608      	mov	r0, r1
   1ae32:	f7ff ff27 	bl	1ac84 <bt_att_req_free>
	return true;
   1ae36:	2001      	movs	r0, #1
   1ae38:	e7f6      	b.n	1ae28 <bt_att_chan_req_cancel+0xc>
   1ae3a:	bf00      	nop
   1ae3c:	20002c18 	.word	0x20002c18

0001ae40 <bt_gatt_service_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1ae40:	4b0d      	ldr	r3, [pc, #52]	; (1ae78 <bt_gatt_service_init+0x38>)
   1ae42:	2201      	movs	r2, #1
   1ae44:	f3bf 8f5b 	dmb	ish
   1ae48:	e853 1f00 	ldrex	r1, [r3]
   1ae4c:	2900      	cmp	r1, #0
   1ae4e:	d103      	bne.n	1ae58 <bt_gatt_service_init+0x18>
   1ae50:	e843 2000 	strex	r0, r2, [r3]
   1ae54:	2800      	cmp	r0, #0
   1ae56:	d1f7      	bne.n	1ae48 <bt_gatt_service_init+0x8>
   1ae58:	f3bf 8f5b 	dmb	ish
}
#endif

static void bt_gatt_service_init(void)
{
	if (!atomic_cas(&service_init, 0, 1)) {
   1ae5c:	d101      	bne.n	1ae62 <bt_gatt_service_init+0x22>
		return;
	}

	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1ae5e:	4b07      	ldr	r3, [pc, #28]	; (1ae7c <bt_gatt_service_init+0x3c>)
   1ae60:	e006      	b.n	1ae70 <bt_gatt_service_init+0x30>
   1ae62:	4770      	bx	lr
		last_static_handle += svc->attr_count;
   1ae64:	685a      	ldr	r2, [r3, #4]
   1ae66:	4906      	ldr	r1, [pc, #24]	; (1ae80 <bt_gatt_service_init+0x40>)
   1ae68:	8808      	ldrh	r0, [r1, #0]
   1ae6a:	4402      	add	r2, r0
   1ae6c:	800a      	strh	r2, [r1, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1ae6e:	3308      	adds	r3, #8
   1ae70:	4a04      	ldr	r2, [pc, #16]	; (1ae84 <bt_gatt_service_init+0x44>)
   1ae72:	4293      	cmp	r3, r2
   1ae74:	d3f6      	bcc.n	1ae64 <bt_gatt_service_init+0x24>
	}
}
   1ae76:	4770      	bx	lr
   1ae78:	20002c68 	.word	0x20002c68
   1ae7c:	0002c600 	.word	0x0002c600
   1ae80:	2000474c 	.word	0x2000474c
   1ae84:	0002c610 	.word	0x0002c610

0001ae88 <find_cf_cfg>:
{
   1ae88:	b570      	push	{r4, r5, r6, lr}
   1ae8a:	b082      	sub	sp, #8
   1ae8c:	4606      	mov	r6, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1ae8e:	2400      	movs	r4, #0
   1ae90:	2c00      	cmp	r4, #0
   1ae92:	dd03      	ble.n	1ae9c <find_cf_cfg+0x14>
	return NULL;
   1ae94:	2500      	movs	r5, #0
}
   1ae96:	4628      	mov	r0, r5
   1ae98:	b002      	add	sp, #8
   1ae9a:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ae9c:	4d0e      	ldr	r5, [pc, #56]	; (1aed8 <find_cf_cfg+0x50>)
   1ae9e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1aea2:	b166      	cbz	r6, 1aebe <find_cf_cfg+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1aea4:	490c      	ldr	r1, [pc, #48]	; (1aed8 <find_cf_cfg+0x50>)
   1aea6:	0123      	lsls	r3, r4, #4
   1aea8:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1aeac:	3201      	adds	r2, #1
   1aeae:	5cc9      	ldrb	r1, [r1, r3]
   1aeb0:	4630      	mov	r0, r6
   1aeb2:	f00d fad4 	bl	2845e <bt_conn_is_peer_addr_le>
   1aeb6:	2800      	cmp	r0, #0
   1aeb8:	d1ed      	bne.n	1ae96 <find_cf_cfg+0xe>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
   1aeba:	3401      	adds	r4, #1
   1aebc:	e7e8      	b.n	1ae90 <find_cf_cfg+0x8>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1aebe:	4628      	mov	r0, r5
   1aec0:	2300      	movs	r3, #0
   1aec2:	9300      	str	r3, [sp, #0]
   1aec4:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1aec8:	2207      	movs	r2, #7
   1aeca:	4669      	mov	r1, sp
   1aecc:	3001      	adds	r0, #1
   1aece:	f00c fe92 	bl	27bf6 <memcmp>
   1aed2:	2800      	cmp	r0, #0
   1aed4:	d1f1      	bne.n	1aeba <find_cf_cfg+0x32>
   1aed6:	e7de      	b.n	1ae96 <find_cf_cfg+0xe>
   1aed8:	20002c30 	.word	0x20002c30

0001aedc <find_sc_cfg>:
{
   1aedc:	b570      	push	{r4, r5, r6, lr}
   1aede:	4606      	mov	r6, r0
   1aee0:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1aee2:	2400      	movs	r4, #0
   1aee4:	b10c      	cbz	r4, 1aeea <find_sc_cfg+0xe>
	return NULL;
   1aee6:	2000      	movs	r0, #0
}
   1aee8:	bd70      	pop	{r4, r5, r6, pc}
		if (id == sc_cfg[i].id &&
   1aeea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1aeee:	4a0c      	ldr	r2, [pc, #48]	; (1af20 <find_sc_cfg+0x44>)
   1aef0:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
   1aef4:	429e      	cmp	r6, r3
   1aef6:	d001      	beq.n	1aefc <find_sc_cfg+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1aef8:	3401      	adds	r4, #1
   1aefa:	e7f3      	b.n	1aee4 <find_sc_cfg+0x8>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1aefc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1af00:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1af04:	2207      	movs	r2, #7
   1af06:	4629      	mov	r1, r5
   1af08:	3001      	adds	r0, #1
   1af0a:	f00c fe74 	bl	27bf6 <memcmp>
		if (id == sc_cfg[i].id &&
   1af0e:	2800      	cmp	r0, #0
   1af10:	d1f2      	bne.n	1aef8 <find_sc_cfg+0x1c>
			return &sc_cfg[i];
   1af12:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1af16:	4802      	ldr	r0, [pc, #8]	; (1af20 <find_sc_cfg+0x44>)
   1af18:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1af1c:	e7e4      	b.n	1aee8 <find_sc_cfg+0xc>
   1af1e:	bf00      	nop
   1af20:	20002c44 	.word	0x20002c44

0001af24 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   1af24:	b570      	push	{r4, r5, r6, lr}
   1af26:	b082      	sub	sp, #8
   1af28:	4606      	mov	r6, r0
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1af2a:	2400      	movs	r4, #0
   1af2c:	2c00      	cmp	r4, #0
   1af2e:	dd03      	ble.n	1af38 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
			return sub;
		}
	}

	return NULL;
   1af30:	2500      	movs	r5, #0
}
   1af32:	4628      	mov	r0, r5
   1af34:	b002      	add	sp, #8
   1af36:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_sub *sub = &subscriptions[i];
   1af38:	4d0e      	ldr	r5, [pc, #56]	; (1af74 <gatt_sub_find+0x50>)
   1af3a:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (!conn) {
   1af3e:	b166      	cbz	r6, 1af5a <gatt_sub_find+0x36>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1af40:	490c      	ldr	r1, [pc, #48]	; (1af74 <gatt_sub_find+0x50>)
   1af42:	0123      	lsls	r3, r4, #4
   1af44:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   1af48:	3201      	adds	r2, #1
   1af4a:	5cc9      	ldrb	r1, [r1, r3]
   1af4c:	4630      	mov	r0, r6
   1af4e:	f00d fa86 	bl	2845e <bt_conn_is_peer_addr_le>
   1af52:	2800      	cmp	r0, #0
   1af54:	d1ed      	bne.n	1af32 <gatt_sub_find+0xe>
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
   1af56:	3401      	adds	r4, #1
   1af58:	e7e8      	b.n	1af2c <gatt_sub_find+0x8>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1af5a:	4628      	mov	r0, r5
   1af5c:	2300      	movs	r3, #0
   1af5e:	9300      	str	r3, [sp, #0]
   1af60:	f8cd 3003 	str.w	r3, [sp, #3]
   1af64:	2207      	movs	r2, #7
   1af66:	4669      	mov	r1, sp
   1af68:	3001      	adds	r0, #1
   1af6a:	f00c fe44 	bl	27bf6 <memcmp>
   1af6e:	2800      	cmp	r0, #0
   1af70:	d1f1      	bne.n	1af56 <gatt_sub_find+0x32>
   1af72:	e7de      	b.n	1af32 <gatt_sub_find+0xe>
   1af74:	20002c6c 	.word	0x20002c6c

0001af78 <cf_write>:
{
   1af78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1af7c:	461d      	mov	r5, r3
   1af7e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1af82:	2b01      	cmp	r3, #1
   1af84:	d83f      	bhi.n	1b006 <cf_write+0x8e>
   1af86:	4606      	mov	r6, r0
   1af88:	4690      	mov	r8, r2
	if (offset + len > sizeof(cfg->data)) {
   1af8a:	462f      	mov	r7, r5
   1af8c:	442b      	add	r3, r5
   1af8e:	2b01      	cmp	r3, #1
   1af90:	d83c      	bhi.n	1b00c <cf_write+0x94>
	cfg = find_cf_cfg(conn);
   1af92:	f7ff ff79 	bl	1ae88 <find_cf_cfg>
	if (!cfg) {
   1af96:	4604      	mov	r4, r0
   1af98:	b1f0      	cbz	r0, 1afd8 <cf_write+0x60>
	if (!cfg) {
   1af9a:	b30c      	cbz	r4, 1afe0 <cf_write+0x68>
	if (!cf_set_value(cfg, value, len)) {
   1af9c:	462a      	mov	r2, r5
   1af9e:	4641      	mov	r1, r8
   1afa0:	4620      	mov	r0, r4
   1afa2:	f00e fa8b 	bl	294bc <cf_set_value>
   1afa6:	b3a0      	cbz	r0, 1b012 <cf_write+0x9a>
	memcpy(dst, src, sizeof(*dst));
   1afa8:	2207      	movs	r2, #7
   1afaa:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1afae:	1c60      	adds	r0, r4, #1
   1afb0:	f00c fe4e 	bl	27c50 <memcpy>
	cfg->id = conn->id;
   1afb4:	7a33      	ldrb	r3, [r6, #8]
   1afb6:	f804 3b0c 	strb.w	r3, [r4], #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1afba:	f3bf 8f5b 	dmb	ish
   1afbe:	e854 3f00 	ldrex	r3, [r4]
   1afc2:	f043 0301 	orr.w	r3, r3, #1
   1afc6:	e844 3200 	strex	r2, r3, [r4]
   1afca:	2a00      	cmp	r2, #0
   1afcc:	d1f7      	bne.n	1afbe <cf_write+0x46>
   1afce:	f3bf 8f5b 	dmb	ish
}
   1afd2:	4638      	mov	r0, r7
   1afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_cf_cfg(NULL);
   1afd8:	f7ff ff56 	bl	1ae88 <find_cf_cfg>
   1afdc:	4604      	mov	r4, r0
   1afde:	e7dc      	b.n	1af9a <cf_write+0x22>
   1afe0:	4b0d      	ldr	r3, [pc, #52]	; (1b018 <cf_write+0xa0>)
   1afe2:	4a0e      	ldr	r2, [pc, #56]	; (1b01c <cf_write+0xa4>)
   1afe4:	1a9b      	subs	r3, r3, r2
   1afe6:	08db      	lsrs	r3, r3, #3
		BT_WARN("No space to store Client Supported Features");
   1afe8:	f04f 0100 	mov.w	r1, #0
   1afec:	2202      	movs	r2, #2
   1afee:	f362 0102 	bfi	r1, r2, #0, #3
   1aff2:	f36f 01c5 	bfc	r1, #3, #3
   1aff6:	f363 118f 	bfi	r1, r3, #6, #10
   1affa:	4809      	ldr	r0, [pc, #36]	; (1b020 <cf_write+0xa8>)
   1affc:	f7f7 f816 	bl	1202c <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b000:	f06f 0710 	mvn.w	r7, #16
   1b004:	e7e5      	b.n	1afd2 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b006:	f06f 0706 	mvn.w	r7, #6
   1b00a:	e7e2      	b.n	1afd2 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b00c:	f06f 070c 	mvn.w	r7, #12
   1b010:	e7df      	b.n	1afd2 <cf_write+0x5a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b012:	f06f 0712 	mvn.w	r7, #18
   1b016:	e7dc      	b.n	1afd2 <cf_write+0x5a>
   1b018:	0002c628 	.word	0x0002c628
   1b01c:	0002c610 	.word	0x0002c610
   1b020:	0002e83c 	.word	0x0002e83c

0001b024 <sc_save>:
{
   1b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b028:	b082      	sub	sp, #8
   1b02a:	4607      	mov	r7, r0
   1b02c:	4688      	mov	r8, r1
   1b02e:	4616      	mov	r6, r2
   1b030:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1b032:	f7ff ff53 	bl	1aedc <find_sc_cfg>
	if (!cfg) {
   1b036:	4604      	mov	r4, r0
   1b038:	b170      	cbz	r0, 1b058 <sc_save+0x34>
	if (!(cfg->data.start || cfg->data.end)) {
   1b03a:	8923      	ldrh	r3, [r4, #8]
   1b03c:	b90b      	cbnz	r3, 1b042 <sc_save+0x1e>
   1b03e:	8963      	ldrh	r3, [r4, #10]
   1b040:	b353      	cbz	r3, 1b098 <sc_save+0x74>
	modified = update_range(&cfg->data.start, &cfg->data.end, start, end);
   1b042:	462b      	mov	r3, r5
   1b044:	4632      	mov	r2, r6
   1b046:	f104 010a 	add.w	r1, r4, #10
   1b04a:	f104 0008 	add.w	r0, r4, #8
   1b04e:	f00e fa20 	bl	29492 <update_range>
}
   1b052:	b002      	add	sp, #8
   1b054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1b058:	9000      	str	r0, [sp, #0]
   1b05a:	f8cd 0003 	str.w	r0, [sp, #3]
   1b05e:	4669      	mov	r1, sp
   1b060:	f7ff ff3c 	bl	1aedc <find_sc_cfg>
		if (!cfg) {
   1b064:	4604      	mov	r4, r0
   1b066:	b130      	cbz	r0, 1b076 <sc_save+0x52>
		cfg->id = id;
   1b068:	f800 7b01 	strb.w	r7, [r0], #1
   1b06c:	2207      	movs	r2, #7
   1b06e:	4641      	mov	r1, r8
   1b070:	f00c fdee 	bl	27c50 <memcpy>
   1b074:	e7e1      	b.n	1b03a <sc_save+0x16>
   1b076:	4b0a      	ldr	r3, [pc, #40]	; (1b0a0 <sc_save+0x7c>)
   1b078:	4a0a      	ldr	r2, [pc, #40]	; (1b0a4 <sc_save+0x80>)
   1b07a:	1a9b      	subs	r3, r3, r2
   1b07c:	08db      	lsrs	r3, r3, #3
			BT_ERR("unable to save SC: no cfg left");
   1b07e:	f04f 0100 	mov.w	r1, #0
   1b082:	2201      	movs	r2, #1
   1b084:	f362 0102 	bfi	r1, r2, #0, #3
   1b088:	f36f 01c5 	bfc	r1, #3, #3
   1b08c:	f363 118f 	bfi	r1, r3, #6, #10
   1b090:	4805      	ldr	r0, [pc, #20]	; (1b0a8 <sc_save+0x84>)
   1b092:	f7f6 ffcb 	bl	1202c <log_0>
			return;
   1b096:	e7dc      	b.n	1b052 <sc_save+0x2e>
		cfg->data.start = start;
   1b098:	8126      	strh	r6, [r4, #8]
		cfg->data.end = end;
   1b09a:	8165      	strh	r5, [r4, #10]
		goto done;
   1b09c:	e7d9      	b.n	1b052 <sc_save+0x2e>
   1b09e:	bf00      	nop
   1b0a0:	0002c628 	.word	0x0002c628
   1b0a4:	0002c610 	.word	0x0002c610
   1b0a8:	0002e868 	.word	0x0002e868

0001b0ac <bt_gatt_attr_write_ccc>:
{
   1b0ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b0b0:	461c      	mov	r4, r3
   1b0b2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1b0b6:	68cf      	ldr	r7, [r1, #12]
	if (offset) {
   1b0b8:	2b00      	cmp	r3, #0
   1b0ba:	d157      	bne.n	1b16c <bt_gatt_attr_write_ccc+0xc0>
   1b0bc:	4681      	mov	r9, r0
   1b0be:	460e      	mov	r6, r1
	if (!len || len > sizeof(uint16_t)) {
   1b0c0:	1e63      	subs	r3, r4, #1
   1b0c2:	b29b      	uxth	r3, r3
   1b0c4:	2b01      	cmp	r3, #1
   1b0c6:	d854      	bhi.n	1b172 <bt_gatt_attr_write_ccc+0xc6>
	if (len < sizeof(uint16_t)) {
   1b0c8:	2c01      	cmp	r4, #1
   1b0ca:	d91d      	bls.n	1b108 <bt_gatt_attr_write_ccc+0x5c>
   1b0cc:	7853      	ldrb	r3, [r2, #1]
   1b0ce:	7815      	ldrb	r5, [r2, #0]
   1b0d0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1b0d4:	4639      	mov	r1, r7
   1b0d6:	4648      	mov	r0, r9
   1b0d8:	f00e fada 	bl	29690 <find_ccc_cfg>
	if (!cfg) {
   1b0dc:	4680      	mov	r8, r0
   1b0de:	b1a8      	cbz	r0, 1b10c <bt_gatt_attr_write_ccc+0x60>
	if (ccc->cfg_write) {
   1b0e0:	693b      	ldr	r3, [r7, #16]
   1b0e2:	b143      	cbz	r3, 1b0f6 <bt_gatt_attr_write_ccc+0x4a>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1b0e4:	462a      	mov	r2, r5
   1b0e6:	4631      	mov	r1, r6
   1b0e8:	4648      	mov	r0, r9
   1b0ea:	4798      	blx	r3
		if (write < 0) {
   1b0ec:	2800      	cmp	r0, #0
   1b0ee:	db09      	blt.n	1b104 <bt_gatt_attr_write_ccc+0x58>
		if (write != sizeof(value) && write != 1) {
   1b0f0:	3801      	subs	r0, #1
   1b0f2:	2801      	cmp	r0, #1
   1b0f4:	d840      	bhi.n	1b178 <bt_gatt_attr_write_ccc+0xcc>
	cfg->value = value;
   1b0f6:	f8a8 5008 	strh.w	r5, [r8, #8]
	if (cfg->value != ccc->value) {
   1b0fa:	897b      	ldrh	r3, [r7, #10]
   1b0fc:	429d      	cmp	r5, r3
   1b0fe:	d12c      	bne.n	1b15a <bt_gatt_attr_write_ccc+0xae>
	if (!value) {
   1b100:	b385      	cbz	r5, 1b164 <bt_gatt_attr_write_ccc+0xb8>
	return len;
   1b102:	4620      	mov	r0, r4
}
   1b104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		value = *(uint8_t *)buf;
   1b108:	7815      	ldrb	r5, [r2, #0]
   1b10a:	e7e3      	b.n	1b0d4 <bt_gatt_attr_write_ccc+0x28>
		if (!value) {
   1b10c:	b90d      	cbnz	r5, 1b112 <bt_gatt_attr_write_ccc+0x66>
			return len;
   1b10e:	4620      	mov	r0, r4
   1b110:	e7f8      	b.n	1b104 <bt_gatt_attr_write_ccc+0x58>
		cfg = find_ccc_cfg(NULL, ccc);
   1b112:	4639      	mov	r1, r7
   1b114:	2000      	movs	r0, #0
   1b116:	f00e fabb 	bl	29690 <find_ccc_cfg>
		if (!cfg) {
   1b11a:	4680      	mov	r8, r0
   1b11c:	b150      	cbz	r0, 1b134 <bt_gatt_attr_write_ccc+0x88>
   1b11e:	2207      	movs	r2, #7
   1b120:	f109 0188 	add.w	r1, r9, #136	; 0x88
   1b124:	3001      	adds	r0, #1
   1b126:	f00c fd93 	bl	27c50 <memcpy>
		cfg->id = conn->id;
   1b12a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1b12e:	f888 3000 	strb.w	r3, [r8]
   1b132:	e7d5      	b.n	1b0e0 <bt_gatt_attr_write_ccc+0x34>
   1b134:	4b12      	ldr	r3, [pc, #72]	; (1b180 <bt_gatt_attr_write_ccc+0xd4>)
   1b136:	4a13      	ldr	r2, [pc, #76]	; (1b184 <bt_gatt_attr_write_ccc+0xd8>)
   1b138:	1a9b      	subs	r3, r3, r2
   1b13a:	08db      	lsrs	r3, r3, #3
			BT_WARN("No space to store CCC cfg");
   1b13c:	f04f 0100 	mov.w	r1, #0
   1b140:	2202      	movs	r2, #2
   1b142:	f362 0102 	bfi	r1, r2, #0, #3
   1b146:	f36f 01c5 	bfc	r1, #3, #3
   1b14a:	f363 118f 	bfi	r1, r3, #6, #10
   1b14e:	480e      	ldr	r0, [pc, #56]	; (1b188 <bt_gatt_attr_write_ccc+0xdc>)
   1b150:	f7f6 ff6c 	bl	1202c <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b154:	f06f 0010 	mvn.w	r0, #16
   1b158:	e7d4      	b.n	1b104 <bt_gatt_attr_write_ccc+0x58>
		gatt_ccc_changed(attr, ccc);
   1b15a:	4639      	mov	r1, r7
   1b15c:	4630      	mov	r0, r6
   1b15e:	f00e f9de 	bl	2951e <gatt_ccc_changed>
   1b162:	e7cd      	b.n	1b100 <bt_gatt_attr_write_ccc+0x54>
		clear_ccc_cfg(cfg);
   1b164:	4640      	mov	r0, r8
   1b166:	f00e fabf 	bl	296e8 <clear_ccc_cfg>
   1b16a:	e7ca      	b.n	1b102 <bt_gatt_attr_write_ccc+0x56>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b16c:	f06f 0006 	mvn.w	r0, #6
   1b170:	e7c8      	b.n	1b104 <bt_gatt_attr_write_ccc+0x58>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b172:	f06f 000c 	mvn.w	r0, #12
   1b176:	e7c5      	b.n	1b104 <bt_gatt_attr_write_ccc+0x58>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1b178:	f06f 000d 	mvn.w	r0, #13
   1b17c:	e7c2      	b.n	1b104 <bt_gatt_attr_write_ccc+0x58>
   1b17e:	bf00      	nop
   1b180:	0002c628 	.word	0x0002c628
   1b184:	0002c610 	.word	0x0002c610
   1b188:	0002e888 	.word	0x0002e888

0001b18c <sc_clear>:
{
   1b18c:	b538      	push	{r3, r4, r5, lr}
   1b18e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b190:	f100 0588 	add.w	r5, r0, #136	; 0x88
   1b194:	4629      	mov	r1, r5
   1b196:	7a00      	ldrb	r0, [r0, #8]
   1b198:	f00c ff7c 	bl	28094 <bt_addr_le_is_bonded>
   1b19c:	b1b8      	cbz	r0, 1b1ce <sc_clear+0x42>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1b19e:	4629      	mov	r1, r5
   1b1a0:	7a20      	ldrb	r0, [r4, #8]
   1b1a2:	f00e fb38 	bl	29816 <bt_gatt_clear_sc>
		if (err) {
   1b1a6:	4601      	mov	r1, r0
   1b1a8:	b900      	cbnz	r0, 1b1ac <sc_clear+0x20>
}
   1b1aa:	bd38      	pop	{r3, r4, r5, pc}
   1b1ac:	4b0c      	ldr	r3, [pc, #48]	; (1b1e0 <sc_clear+0x54>)
   1b1ae:	4a0d      	ldr	r2, [pc, #52]	; (1b1e4 <sc_clear+0x58>)
   1b1b0:	1a9b      	subs	r3, r3, r2
   1b1b2:	08db      	lsrs	r3, r3, #3
			BT_ERR("Failed to clear SC %d", err);
   1b1b4:	f04f 0200 	mov.w	r2, #0
   1b1b8:	2001      	movs	r0, #1
   1b1ba:	f360 0202 	bfi	r2, r0, #0, #3
   1b1be:	f36f 02c5 	bfc	r2, #3, #3
   1b1c2:	f363 128f 	bfi	r2, r3, #6, #10
   1b1c6:	4808      	ldr	r0, [pc, #32]	; (1b1e8 <sc_clear+0x5c>)
   1b1c8:	f7f6 fe7a 	bl	11ec0 <log_1>
   1b1cc:	e7ed      	b.n	1b1aa <sc_clear+0x1e>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b1ce:	4629      	mov	r1, r5
   1b1d0:	7a20      	ldrb	r0, [r4, #8]
   1b1d2:	f7ff fe83 	bl	1aedc <find_sc_cfg>
		if (cfg) {
   1b1d6:	2800      	cmp	r0, #0
   1b1d8:	d0e7      	beq.n	1b1aa <sc_clear+0x1e>
			clear_sc_cfg(cfg);
   1b1da:	f00e fb16 	bl	2980a <clear_sc_cfg>
}
   1b1de:	e7e4      	b.n	1b1aa <sc_clear+0x1e>
   1b1e0:	0002c628 	.word	0x0002c628
   1b1e4:	0002c610 	.word	0x0002c610
   1b1e8:	0002e8a4 	.word	0x0002e8a4

0001b1ec <sc_indicate_rsp>:
{
   1b1ec:	b510      	push	{r4, lr}
   1b1ee:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b1f0:	4b19      	ldr	r3, [pc, #100]	; (1b258 <sc_indicate_rsp+0x6c>)
   1b1f2:	f103 0250 	add.w	r2, r3, #80	; 0x50
   1b1f6:	f3bf 8f5b 	dmb	ish
   1b1fa:	e852 1f00 	ldrex	r1, [r2]
   1b1fe:	f021 0102 	bic.w	r1, r1, #2
   1b202:	e842 1000 	strex	r0, r1, [r2]
   1b206:	2800      	cmp	r0, #0
   1b208:	d1f7      	bne.n	1b1fa <sc_indicate_rsp+0xe>
   1b20a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b20e:	f3bf 8f5b 	dmb	ish
   1b212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1b214:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b218:	f013 0f01 	tst.w	r3, #1
   1b21c:	d116      	bne.n	1b24c <sc_indicate_rsp+0x60>
	cfg = find_cf_cfg(conn);
   1b21e:	4620      	mov	r0, r4
   1b220:	f7ff fe32 	bl	1ae88 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b224:	4603      	mov	r3, r0
   1b226:	b180      	cbz	r0, 1b24a <sc_indicate_rsp+0x5e>
   1b228:	7a02      	ldrb	r2, [r0, #8]
   1b22a:	f012 0f01 	tst.w	r2, #1
   1b22e:	d00c      	beq.n	1b24a <sc_indicate_rsp+0x5e>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1b230:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b232:	f3bf 8f5b 	dmb	ish
   1b236:	e853 2f00 	ldrex	r2, [r3]
   1b23a:	f042 0201 	orr.w	r2, r2, #1
   1b23e:	e843 2100 	strex	r1, r2, [r3]
   1b242:	2900      	cmp	r1, #0
   1b244:	d1f7      	bne.n	1b236 <sc_indicate_rsp+0x4a>
   1b246:	f3bf 8f5b 	dmb	ish
}
   1b24a:	bd10      	pop	{r4, pc}
	k_work_reschedule(&gatt_sc.work, timeout);
   1b24c:	2200      	movs	r2, #0
   1b24e:	2300      	movs	r3, #0
   1b250:	4802      	ldr	r0, [pc, #8]	; (1b25c <sc_indicate_rsp+0x70>)
   1b252:	f006 ff2d 	bl	220b0 <k_work_reschedule>
   1b256:	e7e2      	b.n	1b21e <sc_indicate_rsp+0x32>
   1b258:	20001cd0 	.word	0x20001cd0
   1b25c:	20001cf0 	.word	0x20001cf0

0001b260 <disconnected_cb>:
{
   1b260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b264:	6881      	ldr	r1, [r0, #8]
   1b266:	4b2d      	ldr	r3, [pc, #180]	; (1b31c <disconnected_cb+0xbc>)
   1b268:	4299      	cmp	r1, r3
   1b26a:	d002      	beq.n	1b272 <disconnected_cb+0x12>
}
   1b26c:	2001      	movs	r0, #1
   1b26e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b272:	4604      	mov	r4, r0
   1b274:	4616      	mov	r6, r2
	ccc = attr->user_data;
   1b276:	68c7      	ldr	r7, [r0, #12]
	if (!ccc->value) {
   1b278:	897b      	ldrh	r3, [r7, #10]
   1b27a:	2b00      	cmp	r3, #0
   1b27c:	d0f6      	beq.n	1b26c <disconnected_cb+0xc>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b27e:	2500      	movs	r5, #0
	value_used = false;
   1b280:	46aa      	mov	sl, r5
   1b282:	e021      	b.n	1b2c8 <disconnected_cb+0x68>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1b284:	eb05 0885 	add.w	r8, r5, r5, lsl #2
   1b288:	eb07 0848 	add.w	r8, r7, r8, lsl #1
		if (!cfg->value) {
   1b28c:	f8b8 3008 	ldrh.w	r3, [r8, #8]
   1b290:	b1cb      	cbz	r3, 1b2c6 <disconnected_cb+0x66>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b292:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1b296:	f108 0901 	add.w	r9, r8, #1
   1b29a:	464a      	mov	r2, r9
   1b29c:	f817 1013 	ldrb.w	r1, [r7, r3, lsl #1]
   1b2a0:	4630      	mov	r0, r6
   1b2a2:	f00d f8dc 	bl	2845e <bt_conn_is_peer_addr_le>
   1b2a6:	bb00      	cbnz	r0, 1b2ea <disconnected_cb+0x8a>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b2a8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1b2ac:	4649      	mov	r1, r9
   1b2ae:	f817 0013 	ldrb.w	r0, [r7, r3, lsl #1]
   1b2b2:	f7fe f89d 	bl	193f0 <bt_conn_lookup_addr_le>
			if (tmp) {
   1b2b6:	4603      	mov	r3, r0
   1b2b8:	b128      	cbz	r0, 1b2c6 <disconnected_cb+0x66>
				if (tmp->state == BT_CONN_CONNECTED) {
   1b2ba:	7a82      	ldrb	r2, [r0, #10]
   1b2bc:	2a07      	cmp	r2, #7
   1b2be:	d011      	beq.n	1b2e4 <disconnected_cb+0x84>
				bt_conn_unref(tmp);
   1b2c0:	4618      	mov	r0, r3
   1b2c2:	f00d f872 	bl	283aa <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b2c6:	3501      	adds	r5, #1
   1b2c8:	2d00      	cmp	r5, #0
   1b2ca:	d0db      	beq.n	1b284 <disconnected_cb+0x24>
	if (!value_used) {
   1b2cc:	f1ba 0f00 	cmp.w	sl, #0
   1b2d0:	d1cc      	bne.n	1b26c <disconnected_cb+0xc>
		ccc->value = 0U;
   1b2d2:	2300      	movs	r3, #0
   1b2d4:	817b      	strh	r3, [r7, #10]
		if (ccc->cfg_changed) {
   1b2d6:	68fb      	ldr	r3, [r7, #12]
   1b2d8:	2b00      	cmp	r3, #0
   1b2da:	d0c7      	beq.n	1b26c <disconnected_cb+0xc>
			ccc->cfg_changed(attr, ccc->value);
   1b2dc:	2100      	movs	r1, #0
   1b2de:	4620      	mov	r0, r4
   1b2e0:	4798      	blx	r3
   1b2e2:	e7c3      	b.n	1b26c <disconnected_cb+0xc>
					value_used = true;
   1b2e4:	f04f 0a01 	mov.w	sl, #1
   1b2e8:	e7ea      	b.n	1b2c0 <disconnected_cb+0x60>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b2ea:	f106 0b88 	add.w	fp, r6, #136	; 0x88
   1b2ee:	4659      	mov	r1, fp
   1b2f0:	7a30      	ldrb	r0, [r6, #8]
   1b2f2:	f00c fecf 	bl	28094 <bt_addr_le_is_bonded>
   1b2f6:	b950      	cbnz	r0, 1b30e <disconnected_cb+0xae>
				if (ccc == &sc_ccc) {
   1b2f8:	4b09      	ldr	r3, [pc, #36]	; (1b320 <disconnected_cb+0xc0>)
   1b2fa:	429f      	cmp	r7, r3
   1b2fc:	d003      	beq.n	1b306 <disconnected_cb+0xa6>
				clear_ccc_cfg(cfg);
   1b2fe:	4640      	mov	r0, r8
   1b300:	f00e f9f2 	bl	296e8 <clear_ccc_cfg>
   1b304:	e7df      	b.n	1b2c6 <disconnected_cb+0x66>
					sc_clear(conn);
   1b306:	4630      	mov	r0, r6
   1b308:	f7ff ff40 	bl	1b18c <sc_clear>
   1b30c:	e7f7      	b.n	1b2fe <disconnected_cb+0x9e>
   1b30e:	2207      	movs	r2, #7
   1b310:	4659      	mov	r1, fp
   1b312:	4648      	mov	r0, r9
   1b314:	f00c fc9c 	bl	27c50 <memcpy>
}
   1b318:	e7d5      	b.n	1b2c6 <disconnected_cb+0x66>
   1b31a:	bf00      	nop
   1b31c:	0001b0ad 	.word	0x0001b0ad
   1b320:	20000650 	.word	0x20000650

0001b324 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
   1b324:	b500      	push	{lr}
   1b326:	b083      	sub	sp, #12
   1b328:	460a      	mov	r2, r1
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1b32a:	2304      	movs	r3, #4
   1b32c:	9301      	str	r3, [sp, #4]
   1b32e:	2312      	movs	r3, #18
   1b330:	9300      	str	r3, [sp, #0]
   1b332:	4b03      	ldr	r3, [pc, #12]	; (1b340 <gatt_write_ccc+0x1c>)
   1b334:	4903      	ldr	r1, [pc, #12]	; (1b344 <gatt_write_ccc+0x20>)
   1b336:	f00e fb04 	bl	29942 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
   1b33a:	b003      	add	sp, #12
   1b33c:	f85d fb04 	ldr.w	pc, [sp], #4
   1b340:	00029a05 	.word	0x00029a05
   1b344:	00029853 	.word	0x00029853

0001b348 <bt_gatt_init>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1b348:	4b13      	ldr	r3, [pc, #76]	; (1b398 <bt_gatt_init+0x50>)
   1b34a:	2201      	movs	r2, #1
   1b34c:	f3bf 8f5b 	dmb	ish
   1b350:	e853 1f00 	ldrex	r1, [r3]
   1b354:	2900      	cmp	r1, #0
   1b356:	d103      	bne.n	1b360 <bt_gatt_init+0x18>
   1b358:	e843 2000 	strex	r0, r2, [r3]
   1b35c:	2800      	cmp	r0, #0
   1b35e:	d1f7      	bne.n	1b350 <bt_gatt_init+0x8>
   1b360:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1b364:	d116      	bne.n	1b394 <bt_gatt_init+0x4c>
{
   1b366:	b510      	push	{r4, lr}
	bt_gatt_service_init();
   1b368:	f7ff fd6a 	bl	1ae40 <bt_gatt_service_init>
	list->head = NULL;
   1b36c:	4b0b      	ldr	r3, [pc, #44]	; (1b39c <bt_gatt_init+0x54>)
   1b36e:	2200      	movs	r2, #0
   1b370:	601a      	str	r2, [r3, #0]
	list->tail = NULL;
   1b372:	605a      	str	r2, [r3, #4]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b374:	4c0a      	ldr	r4, [pc, #40]	; (1b3a0 <bt_gatt_init+0x58>)
   1b376:	490b      	ldr	r1, [pc, #44]	; (1b3a4 <bt_gatt_init+0x5c>)
   1b378:	4620      	mov	r0, r4
   1b37a:	f010 fbdb 	bl	2bb34 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b37e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b382:	2300      	movs	r3, #0
   1b384:	4620      	mov	r0, r4
   1b386:	f006 fe8b 	bl	220a0 <k_work_schedule>
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b38a:	4907      	ldr	r1, [pc, #28]	; (1b3a8 <bt_gatt_init+0x60>)
   1b38c:	4807      	ldr	r0, [pc, #28]	; (1b3ac <bt_gatt_init+0x64>)
   1b38e:	f010 fbd1 	bl	2bb34 <k_work_init_delayable>
}
   1b392:	bd10      	pop	{r4, pc}
   1b394:	4770      	bx	lr
   1b396:	bf00      	nop
   1b398:	20002c40 	.word	0x20002c40
   1b39c:	20002c28 	.word	0x20002c28
   1b3a0:	20001c78 	.word	0x20001c78
   1b3a4:	00029ca7 	.word	0x00029ca7
   1b3a8:	0001b781 	.word	0x0001b781
   1b3ac:	20001cf0 	.word	0x20001cf0

0001b3b0 <bt_gatt_attr_get_handle>:
	if (!attr) {
   1b3b0:	b328      	cbz	r0, 1b3fe <bt_gatt_attr_get_handle+0x4e>
{
   1b3b2:	b4f0      	push	{r4, r5, r6, r7}
   1b3b4:	4606      	mov	r6, r0
	if (attr->handle) {
   1b3b6:	8a00      	ldrh	r0, [r0, #16]
   1b3b8:	bb20      	cbnz	r0, 1b404 <bt_gatt_attr_get_handle+0x54>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b3ba:	4d13      	ldr	r5, [pc, #76]	; (1b408 <bt_gatt_attr_get_handle+0x58>)
	uint16_t handle = 1;
   1b3bc:	2201      	movs	r2, #1
   1b3be:	e003      	b.n	1b3c8 <bt_gatt_attr_get_handle+0x18>
			handle += static_svc->attr_count;
   1b3c0:	686b      	ldr	r3, [r5, #4]
   1b3c2:	441a      	add	r2, r3
   1b3c4:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b3c6:	3508      	adds	r5, #8
   1b3c8:	4b10      	ldr	r3, [pc, #64]	; (1b40c <bt_gatt_attr_get_handle+0x5c>)
   1b3ca:	429d      	cmp	r5, r3
   1b3cc:	d21a      	bcs.n	1b404 <bt_gatt_attr_get_handle+0x54>
		if ((attr < &static_svc->attrs[0]) ||
   1b3ce:	682c      	ldr	r4, [r5, #0]
   1b3d0:	42b4      	cmp	r4, r6
   1b3d2:	d8f5      	bhi.n	1b3c0 <bt_gatt_attr_get_handle+0x10>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b3d4:	686f      	ldr	r7, [r5, #4]
   1b3d6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1b3da:	009b      	lsls	r3, r3, #2
   1b3dc:	3b14      	subs	r3, #20
   1b3de:	4423      	add	r3, r4
		if ((attr < &static_svc->attrs[0]) ||
   1b3e0:	42b3      	cmp	r3, r6
   1b3e2:	d3ed      	bcc.n	1b3c0 <bt_gatt_attr_get_handle+0x10>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b3e4:	2300      	movs	r3, #0
   1b3e6:	429f      	cmp	r7, r3
   1b3e8:	d9ed      	bls.n	1b3c6 <bt_gatt_attr_get_handle+0x16>
			if (attr == &static_svc->attrs[i]) {
   1b3ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b3ee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1b3f2:	42b1      	cmp	r1, r6
   1b3f4:	d005      	beq.n	1b402 <bt_gatt_attr_get_handle+0x52>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b3f6:	3301      	adds	r3, #1
   1b3f8:	3201      	adds	r2, #1
   1b3fa:	b292      	uxth	r2, r2
   1b3fc:	e7f3      	b.n	1b3e6 <bt_gatt_attr_get_handle+0x36>
		return 0;
   1b3fe:	2000      	movs	r0, #0
}
   1b400:	4770      	bx	lr
				return handle;
   1b402:	4610      	mov	r0, r2
}
   1b404:	bcf0      	pop	{r4, r5, r6, r7}
   1b406:	4770      	bx	lr
   1b408:	0002c600 	.word	0x0002c600
   1b40c:	0002c610 	.word	0x0002c610

0001b410 <bt_gatt_foreach_attr_type>:
{
   1b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b414:	b089      	sub	sp, #36	; 0x24
   1b416:	4607      	mov	r7, r0
   1b418:	468a      	mov	sl, r1
   1b41a:	4690      	mov	r8, r2
   1b41c:	4699      	mov	r9, r3
   1b41e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
	if (!num_matches) {
   1b422:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   1b426:	b91b      	cbnz	r3, 1b430 <bt_gatt_foreach_attr_type+0x20>
		num_matches = UINT16_MAX;
   1b428:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b42c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
	if (start_handle <= last_static_handle) {
   1b430:	4b19      	ldr	r3, [pc, #100]	; (1b498 <bt_gatt_foreach_attr_type+0x88>)
   1b432:	881b      	ldrh	r3, [r3, #0]
   1b434:	42bb      	cmp	r3, r7
   1b436:	d22c      	bcs.n	1b492 <bt_gatt_foreach_attr_type+0x82>
}
   1b438:	b009      	add	sp, #36	; 0x24
   1b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				handle += static_svc->attr_count;
   1b43e:	b294      	uxth	r4, r2
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b440:	3608      	adds	r6, #8
   1b442:	4b16      	ldr	r3, [pc, #88]	; (1b49c <bt_gatt_foreach_attr_type+0x8c>)
   1b444:	429e      	cmp	r6, r3
   1b446:	d2f7      	bcs.n	1b438 <bt_gatt_foreach_attr_type+0x28>
			if (handle + static_svc->attr_count < start_handle) {
   1b448:	6873      	ldr	r3, [r6, #4]
   1b44a:	18e2      	adds	r2, r4, r3
   1b44c:	42ba      	cmp	r2, r7
   1b44e:	d3f6      	bcc.n	1b43e <bt_gatt_foreach_attr_type+0x2e>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b450:	2500      	movs	r5, #0
   1b452:	9707      	str	r7, [sp, #28]
   1b454:	6873      	ldr	r3, [r6, #4]
   1b456:	42ab      	cmp	r3, r5
   1b458:	d919      	bls.n	1b48e <bt_gatt_foreach_attr_type+0x7e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b45a:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   1b45e:	f8cd b010 	str.w	fp, [sp, #16]
   1b462:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1b464:	9303      	str	r3, [sp, #12]
   1b466:	ab12      	add	r3, sp, #72	; 0x48
   1b468:	9302      	str	r3, [sp, #8]
   1b46a:	f8cd 9004 	str.w	r9, [sp, #4]
   1b46e:	f8cd 8000 	str.w	r8, [sp]
   1b472:	4653      	mov	r3, sl
   1b474:	9a07      	ldr	r2, [sp, #28]
   1b476:	4621      	mov	r1, r4
   1b478:	6837      	ldr	r7, [r6, #0]
   1b47a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1b47e:	f00e fa27 	bl	298d0 <gatt_foreach_iter>
   1b482:	2800      	cmp	r0, #0
   1b484:	d0d8      	beq.n	1b438 <bt_gatt_foreach_attr_type+0x28>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b486:	3501      	adds	r5, #1
   1b488:	3401      	adds	r4, #1
   1b48a:	b2a4      	uxth	r4, r4
   1b48c:	e7e2      	b.n	1b454 <bt_gatt_foreach_attr_type+0x44>
   1b48e:	9f07      	ldr	r7, [sp, #28]
   1b490:	e7d6      	b.n	1b440 <bt_gatt_foreach_attr_type+0x30>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b492:	4e03      	ldr	r6, [pc, #12]	; (1b4a0 <bt_gatt_foreach_attr_type+0x90>)
		uint16_t handle = 1;
   1b494:	2401      	movs	r4, #1
   1b496:	e7d4      	b.n	1b442 <bt_gatt_foreach_attr_type+0x32>
   1b498:	2000474c 	.word	0x2000474c
   1b49c:	0002c610 	.word	0x0002c610
   1b4a0:	0002c600 	.word	0x0002c600

0001b4a4 <db_hash_gen>:
{
   1b4a4:	b510      	push	{r4, lr}
   1b4a6:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   1b4a8:	2300      	movs	r3, #0
   1b4aa:	9348      	str	r3, [sp, #288]	; 0x120
   1b4ac:	9349      	str	r3, [sp, #292]	; 0x124
   1b4ae:	934a      	str	r3, [sp, #296]	; 0x128
   1b4b0:	934b      	str	r3, [sp, #300]	; 0x12c
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b4b2:	aa1c      	add	r2, sp, #112	; 0x70
   1b4b4:	a948      	add	r1, sp, #288	; 0x120
   1b4b6:	a804      	add	r0, sp, #16
   1b4b8:	f00c fa0e 	bl	278d8 <tc_cmac_setup>
   1b4bc:	b190      	cbz	r0, 1b4e4 <db_hash_gen+0x40>
   1b4be:	ac04      	add	r4, sp, #16
   1b4c0:	9402      	str	r4, [sp, #8]
   1b4c2:	4b26      	ldr	r3, [pc, #152]	; (1b55c <db_hash_gen+0xb8>)
   1b4c4:	9301      	str	r3, [sp, #4]
   1b4c6:	2200      	movs	r2, #0
   1b4c8:	9200      	str	r2, [sp, #0]
   1b4ca:	4613      	mov	r3, r2
   1b4cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b4d0:	2001      	movs	r0, #1
   1b4d2:	f7ff ff9d 	bl	1b410 <bt_gatt_foreach_attr_type>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b4d6:	4621      	mov	r1, r4
   1b4d8:	4821      	ldr	r0, [pc, #132]	; (1b560 <db_hash_gen+0xbc>)
   1b4da:	f00c fa98 	bl	27a0e <tc_cmac_final>
   1b4de:	b190      	cbz	r0, 1b506 <db_hash_gen+0x62>
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1b4e0:	2300      	movs	r3, #0
   1b4e2:	e029      	b.n	1b538 <db_hash_gen+0x94>
   1b4e4:	4b1f      	ldr	r3, [pc, #124]	; (1b564 <db_hash_gen+0xc0>)
   1b4e6:	4a20      	ldr	r2, [pc, #128]	; (1b568 <db_hash_gen+0xc4>)
   1b4e8:	1a9b      	subs	r3, r3, r2
   1b4ea:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to setup AES CMAC");
   1b4ec:	f04f 0100 	mov.w	r1, #0
   1b4f0:	2201      	movs	r2, #1
   1b4f2:	f362 0102 	bfi	r1, r2, #0, #3
   1b4f6:	f36f 01c5 	bfc	r1, #3, #3
   1b4fa:	f363 118f 	bfi	r1, r3, #6, #10
   1b4fe:	481b      	ldr	r0, [pc, #108]	; (1b56c <db_hash_gen+0xc8>)
   1b500:	f7f6 fd94 	bl	1202c <log_0>
		return;
   1b504:	e027      	b.n	1b556 <db_hash_gen+0xb2>
   1b506:	4b17      	ldr	r3, [pc, #92]	; (1b564 <db_hash_gen+0xc0>)
   1b508:	4a17      	ldr	r2, [pc, #92]	; (1b568 <db_hash_gen+0xc4>)
   1b50a:	1a9b      	subs	r3, r3, r2
   1b50c:	08db      	lsrs	r3, r3, #3
		BT_ERR("Unable to calculate hash");
   1b50e:	f04f 0100 	mov.w	r1, #0
   1b512:	2201      	movs	r2, #1
   1b514:	f362 0102 	bfi	r1, r2, #0, #3
   1b518:	f36f 01c5 	bfc	r1, #3, #3
   1b51c:	f363 118f 	bfi	r1, r3, #6, #10
   1b520:	4813      	ldr	r0, [pc, #76]	; (1b570 <db_hash_gen+0xcc>)
   1b522:	f7f6 fd83 	bl	1202c <log_0>
		return;
   1b526:	e016      	b.n	1b556 <db_hash_gen+0xb2>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b528:	4a0d      	ldr	r2, [pc, #52]	; (1b560 <db_hash_gen+0xbc>)
   1b52a:	5cd0      	ldrb	r0, [r2, r3]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b52c:	f1c3 010f 	rsb	r1, r3, #15
   1b530:	5c54      	ldrb	r4, [r2, r1]
   1b532:	54d4      	strb	r4, [r2, r3]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b534:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
   1b536:	3301      	adds	r3, #1
   1b538:	2b07      	cmp	r3, #7
   1b53a:	d9f5      	bls.n	1b528 <db_hash_gen+0x84>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b53c:	4b0d      	ldr	r3, [pc, #52]	; (1b574 <db_hash_gen+0xd0>)
   1b53e:	f3bf 8f5b 	dmb	ish
   1b542:	e853 2f00 	ldrex	r2, [r3]
   1b546:	f042 0204 	orr.w	r2, r2, #4
   1b54a:	e843 2100 	strex	r1, r2, [r3]
   1b54e:	2900      	cmp	r1, #0
   1b550:	d1f7      	bne.n	1b542 <db_hash_gen+0x9e>
   1b552:	f3bf 8f5b 	dmb	ish
}
   1b556:	b04c      	add	sp, #304	; 0x130
   1b558:	bd10      	pop	{r4, pc}
   1b55a:	bf00      	nop
   1b55c:	00029583 	.word	0x00029583
   1b560:	20001c68 	.word	0x20001c68
   1b564:	0002c628 	.word	0x0002c628
   1b568:	0002c610 	.word	0x0002c610
   1b56c:	0002e8bc 	.word	0x0002e8bc
   1b570:	0002e8d8 	.word	0x0002e8d8
   1b574:	20001d20 	.word	0x20001d20

0001b578 <gatt_find_by_uuid>:
{
   1b578:	b510      	push	{r4, lr}
   1b57a:	b084      	sub	sp, #16
   1b57c:	4604      	mov	r4, r0
   1b57e:	460a      	mov	r2, r1
	found->attr = NULL;
   1b580:	2300      	movs	r3, #0
   1b582:	6003      	str	r3, [r0, #0]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b584:	9002      	str	r0, [sp, #8]
   1b586:	4907      	ldr	r1, [pc, #28]	; (1b5a4 <gatt_find_by_uuid+0x2c>)
   1b588:	9101      	str	r1, [sp, #4]
   1b58a:	2101      	movs	r1, #1
   1b58c:	9100      	str	r1, [sp, #0]
   1b58e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b592:	8880      	ldrh	r0, [r0, #4]
   1b594:	f7ff ff3c 	bl	1b410 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b598:	6820      	ldr	r0, [r4, #0]
}
   1b59a:	3800      	subs	r0, #0
   1b59c:	bf18      	it	ne
   1b59e:	2001      	movne	r0, #1
   1b5a0:	b004      	add	sp, #16
   1b5a2:	bd10      	pop	{r4, pc}
   1b5a4:	00029571 	.word	0x00029571

0001b5a8 <gatt_indicate>:
{
   1b5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b5ac:	b082      	sub	sp, #8
   1b5ae:	4606      	mov	r6, r0
   1b5b0:	460f      	mov	r7, r1
   1b5b2:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1b5b4:	2214      	movs	r2, #20
   1b5b6:	6861      	ldr	r1, [r4, #4]
   1b5b8:	f00e fb7a 	bl	29cb0 <bt_gatt_check_perm>
   1b5bc:	bb80      	cbnz	r0, 1b620 <gatt_indicate+0x78>
	len = sizeof(*ind) + params->len;
   1b5be:	8aa5      	ldrh	r5, [r4, #20]
   1b5c0:	3502      	adds	r5, #2
	req = gatt_req_alloc(gatt_indicate_rsp, params, NULL,
   1b5c2:	9500      	str	r5, [sp, #0]
   1b5c4:	231d      	movs	r3, #29
   1b5c6:	2200      	movs	r2, #0
   1b5c8:	4621      	mov	r1, r4
   1b5ca:	482d      	ldr	r0, [pc, #180]	; (1b680 <gatt_indicate+0xd8>)
   1b5cc:	f00e f9ab 	bl	29926 <gatt_req_alloc>
	if (!req) {
   1b5d0:	4680      	mov	r8, r0
   1b5d2:	2800      	cmp	r0, #0
   1b5d4:	d051      	beq.n	1b67a <gatt_indicate+0xd2>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b5d6:	462a      	mov	r2, r5
   1b5d8:	211d      	movs	r1, #29
   1b5da:	4630      	mov	r0, r6
   1b5dc:	f7ff f8fe 	bl	1a7dc <bt_att_create_pdu>
	if (!buf) {
   1b5e0:	4681      	mov	r9, r0
   1b5e2:	b380      	cbz	r0, 1b646 <gatt_indicate+0x9e>
   1b5e4:	f100 0a08 	add.w	sl, r0, #8
   1b5e8:	2102      	movs	r1, #2
   1b5ea:	4650      	mov	r0, sl
   1b5ec:	f00e fe0e 	bl	2a20c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b5f0:	4605      	mov	r5, r0
   1b5f2:	f825 7b02 	strh.w	r7, [r5], #2
   1b5f6:	8aa1      	ldrh	r1, [r4, #20]
   1b5f8:	4650      	mov	r0, sl
   1b5fa:	f00e fe07 	bl	2a20c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b5fe:	8aa2      	ldrh	r2, [r4, #20]
   1b600:	6921      	ldr	r1, [r4, #16]
   1b602:	4628      	mov	r0, r5
   1b604:	f00c fb24 	bl	27c50 <memcpy>
	req->buf = buf;
   1b608:	f8c8 9008 	str.w	r9, [r8, #8]
	err = bt_att_req_send(conn, req);
   1b60c:	4641      	mov	r1, r8
   1b60e:	4630      	mov	r0, r6
   1b610:	f00d fed9 	bl	293c6 <bt_att_req_send>
	if (err) {
   1b614:	4604      	mov	r4, r0
   1b616:	bb60      	cbnz	r0, 1b672 <gatt_indicate+0xca>
}
   1b618:	4620      	mov	r0, r4
   1b61a:	b002      	add	sp, #8
   1b61c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b620:	4b18      	ldr	r3, [pc, #96]	; (1b684 <gatt_indicate+0xdc>)
   1b622:	4a19      	ldr	r2, [pc, #100]	; (1b688 <gatt_indicate+0xe0>)
   1b624:	1a9b      	subs	r3, r3, r2
   1b626:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1b628:	f04f 0100 	mov.w	r1, #0
   1b62c:	2202      	movs	r2, #2
   1b62e:	f362 0102 	bfi	r1, r2, #0, #3
   1b632:	f36f 01c5 	bfc	r1, #3, #3
   1b636:	f363 118f 	bfi	r1, r3, #6, #10
   1b63a:	4814      	ldr	r0, [pc, #80]	; (1b68c <gatt_indicate+0xe4>)
   1b63c:	f7f6 fcf6 	bl	1202c <log_0>
		return -EPERM;
   1b640:	f04f 34ff 	mov.w	r4, #4294967295
   1b644:	e7e8      	b.n	1b618 <gatt_indicate+0x70>
   1b646:	4b0f      	ldr	r3, [pc, #60]	; (1b684 <gatt_indicate+0xdc>)
   1b648:	4a0f      	ldr	r2, [pc, #60]	; (1b688 <gatt_indicate+0xe0>)
   1b64a:	1a9b      	subs	r3, r3, r2
   1b64c:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send indication");
   1b64e:	f04f 0100 	mov.w	r1, #0
   1b652:	2202      	movs	r2, #2
   1b654:	f362 0102 	bfi	r1, r2, #0, #3
   1b658:	f36f 01c5 	bfc	r1, #3, #3
   1b65c:	f363 118f 	bfi	r1, r3, #6, #10
   1b660:	480b      	ldr	r0, [pc, #44]	; (1b690 <gatt_indicate+0xe8>)
   1b662:	f7f6 fce3 	bl	1202c <log_0>
		bt_att_req_free(req);
   1b666:	4640      	mov	r0, r8
   1b668:	f7ff fb0c 	bl	1ac84 <bt_att_req_free>
		return -ENOMEM;
   1b66c:	f06f 040b 	mvn.w	r4, #11
   1b670:	e7d2      	b.n	1b618 <gatt_indicate+0x70>
		bt_att_req_free(req);
   1b672:	4640      	mov	r0, r8
   1b674:	f7ff fb06 	bl	1ac84 <bt_att_req_free>
   1b678:	e7ce      	b.n	1b618 <gatt_indicate+0x70>
		return -ENOMEM;
   1b67a:	f06f 040b 	mvn.w	r4, #11
   1b67e:	e7cb      	b.n	1b618 <gatt_indicate+0x70>
   1b680:	0002954f 	.word	0x0002954f
   1b684:	0002c628 	.word	0x0002c628
   1b688:	0002c610 	.word	0x0002c610
   1b68c:	0002e8f4 	.word	0x0002e8f4
   1b690:	0002e90c 	.word	0x0002e90c

0001b694 <bt_gatt_indicate>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b694:	f3bf 8f5b 	dmb	ish
   1b698:	4b37      	ldr	r3, [pc, #220]	; (1b778 <bt_gatt_indicate+0xe4>)
   1b69a:	681b      	ldr	r3, [r3, #0]
   1b69c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b6a0:	f013 0f02 	tst.w	r3, #2
   1b6a4:	d05e      	beq.n	1b764 <bt_gatt_indicate+0xd0>
{
   1b6a6:	b530      	push	{r4, r5, lr}
   1b6a8:	b08d      	sub	sp, #52	; 0x34
   1b6aa:	4605      	mov	r5, r0
   1b6ac:	460c      	mov	r4, r1
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b6ae:	b110      	cbz	r0, 1b6b6 <bt_gatt_indicate+0x22>
   1b6b0:	7a83      	ldrb	r3, [r0, #10]
   1b6b2:	2b07      	cmp	r3, #7
   1b6b4:	d159      	bne.n	1b76a <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
   1b6b6:	6860      	ldr	r0, [r4, #4]
   1b6b8:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b6ba:	f7ff fe79 	bl	1b3b0 <bt_gatt_attr_get_handle>
   1b6be:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b6c2:	6821      	ldr	r1, [r4, #0]
   1b6c4:	b341      	cbz	r1, 1b718 <bt_gatt_indicate+0x84>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b6c6:	a805      	add	r0, sp, #20
   1b6c8:	f7ff ff56 	bl	1b578 <gatt_find_by_uuid>
   1b6cc:	2800      	cmp	r0, #0
   1b6ce:	d04f      	beq.n	1b770 <bt_gatt_indicate+0xdc>
		params->attr = data.attr;
   1b6d0:	9b05      	ldr	r3, [sp, #20]
   1b6d2:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b6d4:	9b05      	ldr	r3, [sp, #20]
   1b6d6:	6818      	ldr	r0, [r3, #0]
   1b6d8:	2300      	movs	r3, #0
   1b6da:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   1b6de:	f642 0303 	movw	r3, #10243	; 0x2803
   1b6e2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1b6e6:	a90b      	add	r1, sp, #44	; 0x2c
   1b6e8:	f00c fb27 	bl	27d3a <bt_uuid_cmp>
   1b6ec:	b948      	cbnz	r0, 1b702 <bt_gatt_indicate+0x6e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b6ee:	9805      	ldr	r0, [sp, #20]
   1b6f0:	68c3      	ldr	r3, [r0, #12]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b6f2:	799b      	ldrb	r3, [r3, #6]
   1b6f4:	f013 0f20 	tst.w	r3, #32
   1b6f8:	d013      	beq.n	1b722 <bt_gatt_indicate+0x8e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b6fa:	f00e fa85 	bl	29c08 <bt_gatt_attr_value_handle>
   1b6fe:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1b702:	b18d      	cbz	r5, 1b728 <bt_gatt_indicate+0x94>
		params->_ref = 1;
   1b704:	2301      	movs	r3, #1
   1b706:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b708:	4622      	mov	r2, r4
   1b70a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   1b70e:	4628      	mov	r0, r5
   1b710:	f7ff ff4a 	bl	1b5a8 <gatt_indicate>
}
   1b714:	b00d      	add	sp, #52	; 0x34
   1b716:	bd30      	pop	{r4, r5, pc}
		if (!data.handle) {
   1b718:	2800      	cmp	r0, #0
   1b71a:	d1db      	bne.n	1b6d4 <bt_gatt_indicate+0x40>
			return -ENOENT;
   1b71c:	f06f 0001 	mvn.w	r0, #1
   1b720:	e7f8      	b.n	1b714 <bt_gatt_indicate+0x80>
			return -EINVAL;
   1b722:	f06f 0015 	mvn.w	r0, #21
   1b726:	e7f5      	b.n	1b714 <bt_gatt_indicate+0x80>
	data.err = -ENOTCONN;
   1b728:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b72c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b72e:	2302      	movs	r3, #2
   1b730:	f8ad 3020 	strh.w	r3, [sp, #32]
	data.ind_params = params;
   1b734:	9409      	str	r4, [sp, #36]	; 0x24
	params->_ref = 0;
   1b736:	2300      	movs	r3, #0
   1b738:	75a3      	strb	r3, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b73a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1b73e:	f642 1202 	movw	r2, #10498	; 0x2902
   1b742:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
   1b746:	aa05      	add	r2, sp, #20
   1b748:	9202      	str	r2, [sp, #8]
   1b74a:	4a0c      	ldr	r2, [pc, #48]	; (1b77c <bt_gatt_indicate+0xe8>)
   1b74c:	9201      	str	r2, [sp, #4]
   1b74e:	2201      	movs	r2, #1
   1b750:	9200      	str	r2, [sp, #0]
   1b752:	aa0a      	add	r2, sp, #40	; 0x28
   1b754:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b758:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1b75c:	f7ff fe58 	bl	1b410 <bt_gatt_foreach_attr_type>
	return data.err;
   1b760:	9807      	ldr	r0, [sp, #28]
   1b762:	e7d7      	b.n	1b714 <bt_gatt_indicate+0x80>
		return -EAGAIN;
   1b764:	f06f 000a 	mvn.w	r0, #10
}
   1b768:	4770      	bx	lr
		return -ENOTCONN;
   1b76a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b76e:	e7d1      	b.n	1b714 <bt_gatt_indicate+0x80>
			return -ENOENT;
   1b770:	f06f 0001 	mvn.w	r0, #1
   1b774:	e7ce      	b.n	1b714 <bt_gatt_indicate+0x80>
   1b776:	bf00      	nop
   1b778:	2000036c 	.word	0x2000036c
   1b77c:	0001b94d 	.word	0x0001b94d

0001b780 <sc_process>:
{
   1b780:	b510      	push	{r4, lr}
   1b782:	b082      	sub	sp, #8
   1b784:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b786:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   1b78a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   1b78e:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   1b792:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   1b796:	f1a0 0120 	sub.w	r1, r0, #32
   1b79a:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b79e:	f3bf 8f5b 	dmb	ish
   1b7a2:	e854 2f00 	ldrex	r2, [r4]
   1b7a6:	f022 0201 	bic.w	r2, r2, #1
   1b7aa:	e844 2000 	strex	r0, r2, [r4]
   1b7ae:	2800      	cmp	r0, #0
   1b7b0:	d1f7      	bne.n	1b7a2 <sc_process+0x22>
   1b7b2:	f3bf 8f5b 	dmb	ish
	sc->start = 0U;
   1b7b6:	2000      	movs	r0, #0
   1b7b8:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   1b7bc:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b7c0:	4a0e      	ldr	r2, [pc, #56]	; (1b7fc <sc_process+0x7c>)
   1b7c2:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1b7c6:	4a0e      	ldr	r2, [pc, #56]	; (1b800 <sc_process+0x80>)
   1b7c8:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   1b7cc:	aa01      	add	r2, sp, #4
   1b7ce:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1b7d2:	2204      	movs	r2, #4
   1b7d4:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b7d8:	f7ff ff5c 	bl	1b694 <bt_gatt_indicate>
   1b7dc:	b108      	cbz	r0, 1b7e2 <sc_process+0x62>
}
   1b7de:	b002      	add	sp, #8
   1b7e0:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b7e2:	f3bf 8f5b 	dmb	ish
   1b7e6:	e854 3f00 	ldrex	r3, [r4]
   1b7ea:	f043 0302 	orr.w	r3, r3, #2
   1b7ee:	e844 3200 	strex	r2, r3, [r4]
   1b7f2:	2a00      	cmp	r2, #0
   1b7f4:	d1f7      	bne.n	1b7e6 <sc_process+0x66>
   1b7f6:	f3bf 8f5b 	dmb	ish
   1b7fa:	e7f0      	b.n	1b7de <sc_process+0x5e>
   1b7fc:	0002e9e8 	.word	0x0002e9e8
   1b800:	0001b1ed 	.word	0x0001b1ed

0001b804 <sc_restore>:
{
   1b804:	b530      	push	{r4, r5, lr}
   1b806:	b083      	sub	sp, #12
   1b808:	4604      	mov	r4, r0
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b80a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1b80e:	7a00      	ldrb	r0, [r0, #8]
   1b810:	f7ff fb64 	bl	1aedc <find_sc_cfg>
	if (!cfg) {
   1b814:	b308      	cbz	r0, 1b85a <sc_restore+0x56>
   1b816:	4605      	mov	r5, r0
	if (!(cfg->data.start || cfg->data.end)) {
   1b818:	8903      	ldrh	r3, [r0, #8]
   1b81a:	b90b      	cbnz	r3, 1b820 <sc_restore+0x1c>
   1b81c:	8942      	ldrh	r2, [r0, #10]
   1b81e:	b1e2      	cbz	r2, 1b85a <sc_restore+0x56>
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1b820:	f8ad 3004 	strh.w	r3, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1b824:	896b      	ldrh	r3, [r5, #10]
   1b826:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1b82a:	4620      	mov	r0, r4
   1b82c:	f7fd fd1e 	bl	1926c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b830:	4913      	ldr	r1, [pc, #76]	; (1b880 <sc_restore+0x7c>)
   1b832:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1b836:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   1b83a:	4a12      	ldr	r2, [pc, #72]	; (1b884 <sc_restore+0x80>)
   1b83c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1b83e:	4a12      	ldr	r2, [pc, #72]	; (1b888 <sc_restore+0x84>)
   1b840:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1b842:	aa01      	add	r2, sp, #4
   1b844:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1b846:	2204      	movs	r2, #4
   1b848:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b84a:	4619      	mov	r1, r3
   1b84c:	4620      	mov	r0, r4
   1b84e:	f7ff ff21 	bl	1b694 <bt_gatt_indicate>
   1b852:	b920      	cbnz	r0, 1b85e <sc_restore+0x5a>
	sc_reset(cfg);
   1b854:	4628      	mov	r0, r5
   1b856:	f00d fff5 	bl	29844 <sc_reset>
}
   1b85a:	b003      	add	sp, #12
   1b85c:	bd30      	pop	{r4, r5, pc}
   1b85e:	4b0b      	ldr	r3, [pc, #44]	; (1b88c <sc_restore+0x88>)
   1b860:	4a0b      	ldr	r2, [pc, #44]	; (1b890 <sc_restore+0x8c>)
   1b862:	1a9b      	subs	r3, r3, r2
   1b864:	08db      	lsrs	r3, r3, #3
		BT_ERR("SC restore indication failed");
   1b866:	f04f 0100 	mov.w	r1, #0
   1b86a:	2201      	movs	r2, #1
   1b86c:	f362 0102 	bfi	r1, r2, #0, #3
   1b870:	f36f 01c5 	bfc	r1, #3, #3
   1b874:	f363 118f 	bfi	r1, r3, #6, #10
   1b878:	4806      	ldr	r0, [pc, #24]	; (1b894 <sc_restore+0x90>)
   1b87a:	f7f6 fbd7 	bl	1202c <log_0>
   1b87e:	e7e9      	b.n	1b854 <sc_restore+0x50>
   1b880:	20002c50 	.word	0x20002c50
   1b884:	0002e9e8 	.word	0x0002e9e8
   1b888:	00029663 	.word	0x00029663
   1b88c:	0002c628 	.word	0x0002c628
   1b890:	0002c610 	.word	0x0002c610
   1b894:	0002e934 	.word	0x0002e934

0001b898 <gatt_notify>:
{
   1b898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b89c:	4606      	mov	r6, r0
   1b89e:	460f      	mov	r7, r1
   1b8a0:	4614      	mov	r4, r2
	if (bt_gatt_check_perm(conn, params->attr,
   1b8a2:	2214      	movs	r2, #20
   1b8a4:	6861      	ldr	r1, [r4, #4]
   1b8a6:	f00e fa03 	bl	29cb0 <bt_gatt_check_perm>
   1b8aa:	bb08      	cbnz	r0, 1b8f0 <gatt_notify+0x58>
				sizeof(*nfy) + params->len);
   1b8ac:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b8ae:	3202      	adds	r2, #2
   1b8b0:	211b      	movs	r1, #27
   1b8b2:	4630      	mov	r0, r6
   1b8b4:	f7fe ff92 	bl	1a7dc <bt_att_create_pdu>
	if (!buf) {
   1b8b8:	4680      	mov	r8, r0
   1b8ba:	b360      	cbz	r0, 1b916 <gatt_notify+0x7e>
   1b8bc:	f100 0908 	add.w	r9, r0, #8
   1b8c0:	2102      	movs	r1, #2
   1b8c2:	4648      	mov	r0, r9
   1b8c4:	f00e fca2 	bl	2a20c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b8c8:	4605      	mov	r5, r0
   1b8ca:	f825 7b02 	strh.w	r7, [r5], #2
   1b8ce:	89a1      	ldrh	r1, [r4, #12]
   1b8d0:	4648      	mov	r0, r9
   1b8d2:	f00e fc9b 	bl	2a20c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b8d6:	89a2      	ldrh	r2, [r4, #12]
   1b8d8:	68a1      	ldr	r1, [r4, #8]
   1b8da:	4628      	mov	r0, r5
   1b8dc:	f00c f9b8 	bl	27c50 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1b8e0:	6963      	ldr	r3, [r4, #20]
   1b8e2:	6922      	ldr	r2, [r4, #16]
   1b8e4:	4641      	mov	r1, r8
   1b8e6:	4630      	mov	r0, r6
   1b8e8:	f00d fd48 	bl	2937c <bt_att_send>
}
   1b8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b8f0:	4b12      	ldr	r3, [pc, #72]	; (1b93c <gatt_notify+0xa4>)
   1b8f2:	4a13      	ldr	r2, [pc, #76]	; (1b940 <gatt_notify+0xa8>)
   1b8f4:	1a9b      	subs	r3, r3, r2
   1b8f6:	08db      	lsrs	r3, r3, #3
		BT_WARN("Link is not encrypted");
   1b8f8:	f04f 0100 	mov.w	r1, #0
   1b8fc:	2202      	movs	r2, #2
   1b8fe:	f362 0102 	bfi	r1, r2, #0, #3
   1b902:	f36f 01c5 	bfc	r1, #3, #3
   1b906:	f363 118f 	bfi	r1, r3, #6, #10
   1b90a:	480e      	ldr	r0, [pc, #56]	; (1b944 <gatt_notify+0xac>)
   1b90c:	f7f6 fb8e 	bl	1202c <log_0>
		return -EPERM;
   1b910:	f04f 30ff 	mov.w	r0, #4294967295
   1b914:	e7ea      	b.n	1b8ec <gatt_notify+0x54>
   1b916:	4b09      	ldr	r3, [pc, #36]	; (1b93c <gatt_notify+0xa4>)
   1b918:	4a09      	ldr	r2, [pc, #36]	; (1b940 <gatt_notify+0xa8>)
   1b91a:	1a9b      	subs	r3, r3, r2
   1b91c:	08db      	lsrs	r3, r3, #3
		BT_WARN("No buffer available to send notification");
   1b91e:	f04f 0100 	mov.w	r1, #0
   1b922:	2202      	movs	r2, #2
   1b924:	f362 0102 	bfi	r1, r2, #0, #3
   1b928:	f36f 01c5 	bfc	r1, #3, #3
   1b92c:	f363 118f 	bfi	r1, r3, #6, #10
   1b930:	4805      	ldr	r0, [pc, #20]	; (1b948 <gatt_notify+0xb0>)
   1b932:	f7f6 fb7b 	bl	1202c <log_0>
		return -ENOMEM;
   1b936:	f06f 000b 	mvn.w	r0, #11
   1b93a:	e7d7      	b.n	1b8ec <gatt_notify+0x54>
   1b93c:	0002c628 	.word	0x0002c628
   1b940:	0002c610 	.word	0x0002c610
   1b944:	0002e8f4 	.word	0x0002e8f4
   1b948:	0002e954 	.word	0x0002e954

0001b94c <notify_cb>:
{
   1b94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b950:	b083      	sub	sp, #12
   1b952:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b954:	6882      	ldr	r2, [r0, #8]
   1b956:	4b50      	ldr	r3, [pc, #320]	; (1ba98 <notify_cb+0x14c>)
   1b958:	429a      	cmp	r2, r3
   1b95a:	d005      	beq.n	1b968 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
   1b95c:	f04f 0a01 	mov.w	sl, #1
}
   1b960:	4650      	mov	r0, sl
   1b962:	b003      	add	sp, #12
   1b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b968:	4607      	mov	r7, r0
	ccc = attr->user_data;
   1b96a:	68c5      	ldr	r5, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b96c:	4b4b      	ldr	r3, [pc, #300]	; (1ba9c <notify_cb+0x150>)
   1b96e:	429d      	cmp	r5, r3
   1b970:	d031      	beq.n	1b9d6 <notify_cb+0x8a>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b972:	2400      	movs	r4, #0
   1b974:	e05c      	b.n	1ba30 <notify_cb+0xe4>
				sc = (struct sc_data *)data->ind_params->data;
   1b976:	6933      	ldr	r3, [r6, #16]
   1b978:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1b97a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   1b97e:	8853      	ldrh	r3, [r2, #2]
   1b980:	8812      	ldrh	r2, [r2, #0]
   1b982:	4649      	mov	r1, r9
   1b984:	f8df c118 	ldr.w	ip, [pc, #280]	; 1baa0 <notify_cb+0x154>
   1b988:	f81c 0020 	ldrb.w	r0, [ip, r0, lsl #2]
   1b98c:	f7ff fb4a 	bl	1b024 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b990:	3401      	adds	r4, #1
   1b992:	2c00      	cmp	r4, #0
   1b994:	d1ed      	bne.n	1b972 <notify_cb+0x26>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b996:	eb04 0944 	add.w	r9, r4, r4, lsl #1
   1b99a:	4b41      	ldr	r3, [pc, #260]	; (1baa0 <notify_cb+0x154>)
   1b99c:	eb03 0989 	add.w	r9, r3, r9, lsl #2
   1b9a0:	f109 0901 	add.w	r9, r9, #1
   1b9a4:	2300      	movs	r3, #0
   1b9a6:	9300      	str	r3, [sp, #0]
   1b9a8:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
   1b9ac:	2207      	movs	r2, #7
   1b9ae:	4669      	mov	r1, sp
   1b9b0:	4648      	mov	r0, r9
   1b9b2:	f00c f920 	bl	27bf6 <memcmp>
   1b9b6:	2800      	cmp	r0, #0
   1b9b8:	d0ea      	beq.n	1b990 <notify_cb+0x44>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b9ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   1b9be:	2207      	movs	r2, #7
   1b9c0:	4649      	mov	r1, r9
   1b9c2:	4837      	ldr	r0, [pc, #220]	; (1baa0 <notify_cb+0x154>)
   1b9c4:	f810 0023 	ldrb.w	r0, [r0, r3, lsl #2]
   1b9c8:	f7fd fd8c 	bl	194e4 <bt_conn_lookup_state_le>
			if (!conn) {
   1b9cc:	2800      	cmp	r0, #0
   1b9ce:	d0d2      	beq.n	1b976 <notify_cb+0x2a>
			bt_conn_unref(conn);
   1b9d0:	f00c fceb 	bl	283aa <bt_conn_unref>
   1b9d4:	e7dc      	b.n	1b990 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b9d6:	2400      	movs	r4, #0
   1b9d8:	e7db      	b.n	1b992 <notify_cb+0x46>
			bt_conn_unref(conn);
   1b9da:	f00c fce6 	bl	283aa <bt_conn_unref>
			continue;
   1b9de:	e026      	b.n	1ba2e <notify_cb+0xe2>
			bt_conn_unref(conn);
   1b9e0:	4648      	mov	r0, r9
   1b9e2:	f00c fce2 	bl	283aa <bt_conn_unref>
			continue;
   1b9e6:	e022      	b.n	1ba2e <notify_cb+0xe2>
   1b9e8:	4b2e      	ldr	r3, [pc, #184]	; (1baa4 <notify_cb+0x158>)
   1b9ea:	4a2f      	ldr	r2, [pc, #188]	; (1baa8 <notify_cb+0x15c>)
   1b9ec:	1a9b      	subs	r3, r3, r2
   1b9ee:	08db      	lsrs	r3, r3, #3
			BT_WARN("Link is not encrypted");
   1b9f0:	2202      	movs	r2, #2
   1b9f2:	f362 0802 	bfi	r8, r2, #0, #3
   1b9f6:	f36f 08c5 	bfc	r8, #3, #3
   1b9fa:	f363 188f 	bfi	r8, r3, #6, #10
   1b9fe:	4641      	mov	r1, r8
   1ba00:	482a      	ldr	r0, [pc, #168]	; (1baac <notify_cb+0x160>)
   1ba02:	f7f6 fb13 	bl	1202c <log_0>
			continue;
   1ba06:	e012      	b.n	1ba2e <notify_cb+0xe2>
			err = gatt_indicate(conn, data->handle,
   1ba08:	6932      	ldr	r2, [r6, #16]
   1ba0a:	88b1      	ldrh	r1, [r6, #4]
   1ba0c:	4648      	mov	r0, r9
   1ba0e:	f7ff fdcb 	bl	1b5a8 <gatt_indicate>
			if (err == 0) {
   1ba12:	4683      	mov	fp, r0
   1ba14:	b918      	cbnz	r0, 1ba1e <notify_cb+0xd2>
				data->ind_params->_ref++;
   1ba16:	6932      	ldr	r2, [r6, #16]
   1ba18:	7d93      	ldrb	r3, [r2, #22]
   1ba1a:	3301      	adds	r3, #1
   1ba1c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1ba1e:	4648      	mov	r0, r9
   1ba20:	f00c fcc3 	bl	283aa <bt_conn_unref>
		if (err < 0) {
   1ba24:	f1bb 0f00 	cmp.w	fp, #0
   1ba28:	db9a      	blt.n	1b960 <notify_cb+0x14>
		data->err = 0;
   1ba2a:	2300      	movs	r3, #0
   1ba2c:	60b3      	str	r3, [r6, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ba2e:	3401      	adds	r4, #1
   1ba30:	bb74      	cbnz	r4, 1ba90 <notify_cb+0x144>
		if (cfg->value != data->type) {
   1ba32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ba36:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   1ba3a:	891a      	ldrh	r2, [r3, #8]
   1ba3c:	89b3      	ldrh	r3, [r6, #12]
   1ba3e:	429a      	cmp	r2, r3
   1ba40:	d1f5      	bne.n	1ba2e <notify_cb+0xe2>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1ba42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1ba46:	eb05 0143 	add.w	r1, r5, r3, lsl #1
   1ba4a:	3101      	adds	r1, #1
   1ba4c:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
   1ba50:	f7fd fcce 	bl	193f0 <bt_conn_lookup_addr_le>
		if (!conn) {
   1ba54:	4681      	mov	r9, r0
   1ba56:	2800      	cmp	r0, #0
   1ba58:	d0e9      	beq.n	1ba2e <notify_cb+0xe2>
		if (conn->state != BT_CONN_CONNECTED) {
   1ba5a:	7a83      	ldrb	r3, [r0, #10]
   1ba5c:	2b07      	cmp	r3, #7
   1ba5e:	d1bc      	bne.n	1b9da <notify_cb+0x8e>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1ba60:	696b      	ldr	r3, [r5, #20]
   1ba62:	b11b      	cbz	r3, 1ba6c <notify_cb+0x120>
   1ba64:	4639      	mov	r1, r7
   1ba66:	4798      	blx	r3
   1ba68:	2800      	cmp	r0, #0
   1ba6a:	d0b9      	beq.n	1b9e0 <notify_cb+0x94>
		if (bt_gatt_check_perm(conn, attr,
   1ba6c:	2214      	movs	r2, #20
   1ba6e:	4639      	mov	r1, r7
   1ba70:	4648      	mov	r0, r9
   1ba72:	f00e f91d 	bl	29cb0 <bt_gatt_check_perm>
   1ba76:	4682      	mov	sl, r0
   1ba78:	2800      	cmp	r0, #0
   1ba7a:	d1b5      	bne.n	1b9e8 <notify_cb+0x9c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1ba7c:	89b3      	ldrh	r3, [r6, #12]
   1ba7e:	2b02      	cmp	r3, #2
   1ba80:	d0c2      	beq.n	1ba08 <notify_cb+0xbc>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ba82:	6932      	ldr	r2, [r6, #16]
   1ba84:	88b1      	ldrh	r1, [r6, #4]
   1ba86:	4648      	mov	r0, r9
   1ba88:	f7ff ff06 	bl	1b898 <gatt_notify>
   1ba8c:	4683      	mov	fp, r0
   1ba8e:	e7c6      	b.n	1ba1e <notify_cb+0xd2>
	return BT_GATT_ITER_CONTINUE;
   1ba90:	f04f 0a01 	mov.w	sl, #1
   1ba94:	e764      	b.n	1b960 <notify_cb+0x14>
   1ba96:	bf00      	nop
   1ba98:	0001b0ad 	.word	0x0001b0ad
   1ba9c:	20000650 	.word	0x20000650
   1baa0:	20002c44 	.word	0x20002c44
   1baa4:	0002c628 	.word	0x0002c628
   1baa8:	0002c610 	.word	0x0002c610
   1baac:	0002e8f4 	.word	0x0002e8f4

0001bab0 <update_ccc>:
{
   1bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
   1bab4:	6817      	ldr	r7, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bab6:	6882      	ldr	r2, [r0, #8]
   1bab8:	4b20      	ldr	r3, [pc, #128]	; (1bb3c <update_ccc+0x8c>)
   1baba:	429a      	cmp	r2, r3
   1babc:	d002      	beq.n	1bac4 <update_ccc+0x14>
}
   1babe:	2001      	movs	r0, #1
   1bac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bac4:	4604      	mov	r4, r0
	ccc = attr->user_data;
   1bac6:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1baca:	2500      	movs	r5, #0
   1bacc:	2d00      	cmp	r5, #0
   1bace:	d1f6      	bne.n	1babe <update_ccc+0xe>
		if (!cfg->value ||
   1bad0:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1bad4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1bad8:	891b      	ldrh	r3, [r3, #8]
   1bada:	b36b      	cbz	r3, 1bb38 <update_ccc+0x88>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1badc:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1bae0:	eb08 0243 	add.w	r2, r8, r3, lsl #1
   1bae4:	3201      	adds	r2, #1
   1bae6:	f818 1013 	ldrb.w	r1, [r8, r3, lsl #1]
   1baea:	4638      	mov	r0, r7
   1baec:	f00c fcb7 	bl	2845e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1baf0:	b310      	cbz	r0, 1bb38 <update_ccc+0x88>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1baf2:	222a      	movs	r2, #42	; 0x2a
   1baf4:	4621      	mov	r1, r4
   1baf6:	4638      	mov	r0, r7
   1baf8:	f00e f8da 	bl	29cb0 <bt_gatt_check_perm>
		if (err) {
   1bafc:	b108      	cbz	r0, 1bb02 <update_ccc+0x52>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1bafe:	2803      	cmp	r0, #3
   1bb00:	d00a      	beq.n	1bb18 <update_ccc+0x68>
		gatt_ccc_changed(attr, ccc);
   1bb02:	4641      	mov	r1, r8
   1bb04:	4620      	mov	r0, r4
   1bb06:	f00d fd0a 	bl	2951e <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1bb0a:	4b0d      	ldr	r3, [pc, #52]	; (1bb40 <update_ccc+0x90>)
   1bb0c:	4598      	cmp	r8, r3
   1bb0e:	d1d6      	bne.n	1babe <update_ccc+0xe>
			sc_restore(conn);
   1bb10:	4638      	mov	r0, r7
   1bb12:	f7ff fe77 	bl	1b804 <sc_restore>
   1bb16:	e7d2      	b.n	1babe <update_ccc+0xe>
   1bb18:	4b0a      	ldr	r3, [pc, #40]	; (1bb44 <update_ccc+0x94>)
   1bb1a:	4a0b      	ldr	r2, [pc, #44]	; (1bb48 <update_ccc+0x98>)
   1bb1c:	1a9b      	subs	r3, r3, r2
   1bb1e:	08db      	lsrs	r3, r3, #3
				BT_WARN("CCC %p not writable", attr);
   1bb20:	2202      	movs	r2, #2
   1bb22:	f362 0602 	bfi	r6, r2, #0, #3
   1bb26:	f36f 06c5 	bfc	r6, #3, #3
   1bb2a:	f363 168f 	bfi	r6, r3, #6, #10
   1bb2e:	4632      	mov	r2, r6
   1bb30:	4621      	mov	r1, r4
   1bb32:	4806      	ldr	r0, [pc, #24]	; (1bb4c <update_ccc+0x9c>)
   1bb34:	f7f6 f9c4 	bl	11ec0 <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bb38:	3501      	adds	r5, #1
   1bb3a:	e7c7      	b.n	1bacc <update_ccc+0x1c>
   1bb3c:	0001b0ad 	.word	0x0001b0ad
   1bb40:	20000650 	.word	0x20000650
   1bb44:	0002c628 	.word	0x0002c628
   1bb48:	0002c610 	.word	0x0002c610
   1bb4c:	0002e980 	.word	0x0002e980

0001bb50 <bt_gatt_mult_notification>:
{
   1bb50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb54:	b087      	sub	sp, #28
   1bb56:	4682      	mov	sl, r0
   1bb58:	460c      	mov	r4, r1
   1bb5a:	4617      	mov	r7, r2
	sub = gatt_sub_find(conn);
   1bb5c:	f7ff f9e2 	bl	1af24 <gatt_sub_find>
	if (!sub) {
   1bb60:	b1c0      	cbz	r0, 1bb94 <bt_gatt_mult_notification+0x44>
   1bb62:	4683      	mov	fp, r0
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1bb64:	463a      	mov	r2, r7
   1bb66:	4621      	mov	r1, r4
   1bb68:	a803      	add	r0, sp, #12
   1bb6a:	f00e faee 	bl	2a14a <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1bb6e:	e03f      	b.n	1bbf0 <bt_gatt_mult_notification+0xa0>
   1bb70:	4a2f      	ldr	r2, [pc, #188]	; (1bc30 <bt_gatt_mult_notification+0xe0>)
   1bb72:	4b30      	ldr	r3, [pc, #192]	; (1bc34 <bt_gatt_mult_notification+0xe4>)
   1bb74:	1ad2      	subs	r2, r2, r3
   1bb76:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Invalid data len %u > %u", len, length);
   1bb78:	f04f 0300 	mov.w	r3, #0
   1bb7c:	2101      	movs	r1, #1
   1bb7e:	f361 0302 	bfi	r3, r1, #0, #3
   1bb82:	f36f 03c5 	bfc	r3, #3, #3
   1bb86:	f362 138f 	bfi	r3, r2, #6, #10
   1bb8a:	463a      	mov	r2, r7
   1bb8c:	4649      	mov	r1, r9
   1bb8e:	482a      	ldr	r0, [pc, #168]	; (1bc38 <bt_gatt_mult_notification+0xe8>)
   1bb90:	f7f6 f9cc 	bl	11f2c <log_2>
}
   1bb94:	b007      	add	sp, #28
   1bb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				bt_gatt_unsubscribe(conn, params);
   1bb9a:	4629      	mov	r1, r5
   1bb9c:	4650      	mov	r0, sl
   1bb9e:	f00e f8b7 	bl	29d10 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1bba2:	b1d4      	cbz	r4, 1bbda <bt_gatt_mult_notification+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bba4:	f114 0314 	adds.w	r3, r4, #20
   1bba8:	d002      	beq.n	1bbb0 <bt_gatt_mult_notification+0x60>
	return node->next;
   1bbaa:	6963      	ldr	r3, [r4, #20]
   1bbac:	b103      	cbz	r3, 1bbb0 <bt_gatt_mult_notification+0x60>
   1bbae:	3b14      	subs	r3, #20
   1bbb0:	4625      	mov	r5, r4
   1bbb2:	461c      	mov	r4, r3
   1bbb4:	b1bd      	cbz	r5, 1bbe6 <bt_gatt_mult_notification+0x96>
			if (handle != params->value_handle) {
   1bbb6:	892b      	ldrh	r3, [r5, #8]
   1bbb8:	4598      	cmp	r8, r3
   1bbba:	d1f2      	bne.n	1bba2 <bt_gatt_mult_notification+0x52>
			if (params->notify(conn, params, nfy->value, len) ==
   1bbbc:	464b      	mov	r3, r9
   1bbbe:	1d32      	adds	r2, r6, #4
   1bbc0:	4629      	mov	r1, r5
   1bbc2:	4650      	mov	r0, sl
   1bbc4:	682f      	ldr	r7, [r5, #0]
   1bbc6:	47b8      	blx	r7
   1bbc8:	2800      	cmp	r0, #0
   1bbca:	d1ea      	bne.n	1bba2 <bt_gatt_mult_notification+0x52>
   1bbcc:	e7e5      	b.n	1bb9a <bt_gatt_mult_notification+0x4a>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1bbce:	462c      	mov	r4, r5
   1bbd0:	9701      	str	r7, [sp, #4]
   1bbd2:	e7ef      	b.n	1bbb4 <bt_gatt_mult_notification+0x64>
   1bbd4:	462c      	mov	r4, r5
   1bbd6:	9701      	str	r7, [sp, #4]
   1bbd8:	e7ec      	b.n	1bbb4 <bt_gatt_mult_notification+0x64>
   1bbda:	4623      	mov	r3, r4
   1bbdc:	e7e8      	b.n	1bbb0 <bt_gatt_mult_notification+0x60>
   1bbde:	9701      	str	r7, [sp, #4]
   1bbe0:	e7e8      	b.n	1bbb4 <bt_gatt_mult_notification+0x64>
   1bbe2:	9701      	str	r7, [sp, #4]
   1bbe4:	e7e6      	b.n	1bbb4 <bt_gatt_mult_notification+0x64>
   1bbe6:	9f01      	ldr	r7, [sp, #4]
		net_buf_simple_pull_mem(&buf, len);
   1bbe8:	4649      	mov	r1, r9
   1bbea:	a803      	add	r0, sp, #12
   1bbec:	f00e fb38 	bl	2a260 <net_buf_simple_pull_mem>
	while (buf.len > sizeof(*nfy)) {
   1bbf0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1bbf4:	2b04      	cmp	r3, #4
   1bbf6:	d9cd      	bls.n	1bb94 <bt_gatt_mult_notification+0x44>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1bbf8:	2104      	movs	r1, #4
   1bbfa:	a803      	add	r0, sp, #12
   1bbfc:	f00e fb30 	bl	2a260 <net_buf_simple_pull_mem>
   1bc00:	4606      	mov	r6, r0
		handle = sys_cpu_to_le16(nfy->handle);
   1bc02:	f8b0 8000 	ldrh.w	r8, [r0]
		len = sys_cpu_to_le16(nfy->len);
   1bc06:	f8b0 9002 	ldrh.w	r9, [r0, #2]
		if (len > buf.len) {
   1bc0a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1bc0e:	454b      	cmp	r3, r9
   1bc10:	d3ae      	bcc.n	1bb70 <bt_gatt_mult_notification+0x20>
	return list->head;
   1bc12:	f8db 5008 	ldr.w	r5, [fp, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1bc16:	2d00      	cmp	r5, #0
   1bc18:	d0d9      	beq.n	1bbce <bt_gatt_mult_notification+0x7e>
   1bc1a:	3d14      	subs	r5, #20
   1bc1c:	d0da      	beq.n	1bbd4 <bt_gatt_mult_notification+0x84>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bc1e:	f115 0414 	adds.w	r4, r5, #20
   1bc22:	d0dc      	beq.n	1bbde <bt_gatt_mult_notification+0x8e>
	return node->next;
   1bc24:	696c      	ldr	r4, [r5, #20]
   1bc26:	2c00      	cmp	r4, #0
   1bc28:	d0db      	beq.n	1bbe2 <bt_gatt_mult_notification+0x92>
   1bc2a:	3c14      	subs	r4, #20
   1bc2c:	9701      	str	r7, [sp, #4]
   1bc2e:	e7c1      	b.n	1bbb4 <bt_gatt_mult_notification+0x64>
   1bc30:	0002c628 	.word	0x0002c628
   1bc34:	0002c610 	.word	0x0002c610
   1bc38:	0002e994 	.word	0x0002e994

0001bc3c <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1bc3c:	b510      	push	{r4, lr}
   1bc3e:	b086      	sub	sp, #24
   1bc40:	4604      	mov	r4, r0
	struct conn_data data;

	BT_DBG("conn %p", conn);

	data.conn = conn;
   1bc42:	9004      	str	r0, [sp, #16]
	data.sec = BT_SECURITY_L1;
   1bc44:	2001      	movs	r0, #1
   1bc46:	f88d 0014 	strb.w	r0, [sp, #20]
   1bc4a:	ab04      	add	r3, sp, #16
   1bc4c:	9302      	str	r3, [sp, #8]
   1bc4e:	4b07      	ldr	r3, [pc, #28]	; (1bc6c <bt_gatt_connected+0x30>)
   1bc50:	9301      	str	r3, [sp, #4]
   1bc52:	2200      	movs	r2, #0
   1bc54:	9200      	str	r2, [sp, #0]
   1bc56:	4613      	mov	r3, r2
   1bc58:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bc5c:	f7ff fbd8 	bl	1b410 <bt_gatt_foreach_attr_type>
				err);
		}
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
   1bc60:	4620      	mov	r0, r4
   1bc62:	f00d fea8 	bl	299b6 <add_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1bc66:	b006      	add	sp, #24
   1bc68:	bd10      	pop	{r4, pc}
   1bc6a:	bf00      	nop
   1bc6c:	0001bab1 	.word	0x0001bab1

0001bc70 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1bc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc72:	4605      	mov	r5, r0
   1bc74:	460e      	mov	r6, r1
   1bc76:	4617      	mov	r7, r2
	return list->head;
   1bc78:	4b0a      	ldr	r3, [pc, #40]	; (1bca4 <bt_gatt_att_max_mtu_changed+0x34>)
   1bc7a:	681c      	ldr	r4, [r3, #0]
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1bc7c:	b134      	cbz	r4, 1bc8c <bt_gatt_att_max_mtu_changed+0x1c>
   1bc7e:	3c04      	subs	r4, #4
   1bc80:	e004      	b.n	1bc8c <bt_gatt_att_max_mtu_changed+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bc82:	1d23      	adds	r3, r4, #4
   1bc84:	d00b      	beq.n	1bc9e <bt_gatt_att_max_mtu_changed+0x2e>
	return node->next;
   1bc86:	6864      	ldr	r4, [r4, #4]
   1bc88:	b15c      	cbz	r4, 1bca2 <bt_gatt_att_max_mtu_changed+0x32>
   1bc8a:	3c04      	subs	r4, #4
   1bc8c:	b14c      	cbz	r4, 1bca2 <bt_gatt_att_max_mtu_changed+0x32>
		if (cb->att_mtu_updated) {
   1bc8e:	6823      	ldr	r3, [r4, #0]
   1bc90:	2b00      	cmp	r3, #0
   1bc92:	d0f6      	beq.n	1bc82 <bt_gatt_att_max_mtu_changed+0x12>
			cb->att_mtu_updated(conn, tx, rx);
   1bc94:	463a      	mov	r2, r7
   1bc96:	4631      	mov	r1, r6
   1bc98:	4628      	mov	r0, r5
   1bc9a:	4798      	blx	r3
   1bc9c:	e7f1      	b.n	1bc82 <bt_gatt_att_max_mtu_changed+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1bc9e:	461c      	mov	r4, r3
   1bca0:	e7f4      	b.n	1bc8c <bt_gatt_att_max_mtu_changed+0x1c>
		}
	}
}
   1bca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bca4:	20002c28 	.word	0x20002c28

0001bca8 <db_hash_read>:
{
   1bca8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bcaa:	b085      	sub	sp, #20
   1bcac:	4604      	mov	r4, r0
   1bcae:	460d      	mov	r5, r1
   1bcb0:	4616      	mov	r6, r2
   1bcb2:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1bcb4:	4812      	ldr	r0, [pc, #72]	; (1bd00 <db_hash_read+0x58>)
   1bcb6:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1bcba:	3010      	adds	r0, #16
   1bcbc:	f00f ff96 	bl	2bbec <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bcc0:	f3bf 8f5b 	dmb	ish
   1bcc4:	4b0f      	ldr	r3, [pc, #60]	; (1bd04 <db_hash_read+0x5c>)
   1bcc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1bcc8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1bccc:	f013 0f04 	tst.w	r3, #4
   1bcd0:	d012      	beq.n	1bcf8 <db_hash_read+0x50>
	(void)bt_gatt_change_aware(conn, true);
   1bcd2:	2101      	movs	r1, #1
   1bcd4:	4620      	mov	r0, r4
   1bcd6:	f00e f8d4 	bl	29e82 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1bcda:	2310      	movs	r3, #16
   1bcdc:	9302      	str	r3, [sp, #8]
   1bcde:	4b08      	ldr	r3, [pc, #32]	; (1bd00 <db_hash_read+0x58>)
   1bce0:	9301      	str	r3, [sp, #4]
   1bce2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1bce6:	9300      	str	r3, [sp, #0]
   1bce8:	463b      	mov	r3, r7
   1bcea:	4632      	mov	r2, r6
   1bcec:	4629      	mov	r1, r5
   1bcee:	4620      	mov	r0, r4
   1bcf0:	f00d fee8 	bl	29ac4 <bt_gatt_attr_read>
}
   1bcf4:	b005      	add	sp, #20
   1bcf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		db_hash_gen(true);
   1bcf8:	2001      	movs	r0, #1
   1bcfa:	f7ff fbd3 	bl	1b4a4 <db_hash_gen>
   1bcfe:	e7e8      	b.n	1bcd2 <db_hash_read+0x2a>
   1bd00:	20001c68 	.word	0x20001c68
   1bd04:	20001cd0 	.word	0x20001cd0

0001bd08 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1bd08:	b510      	push	{r4, lr}
   1bd0a:	b084      	sub	sp, #16
   1bd0c:	4604      	mov	r4, r0
   1bd0e:	9002      	str	r0, [sp, #8]
   1bd10:	4b08      	ldr	r3, [pc, #32]	; (1bd34 <bt_gatt_disconnected+0x2c>)
   1bd12:	9301      	str	r3, [sp, #4]
   1bd14:	2200      	movs	r2, #0
   1bd16:	9200      	str	r2, [sp, #0]
   1bd18:	4613      	mov	r3, r2
   1bd1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bd1e:	2001      	movs	r0, #1
   1bd20:	f7ff fb76 	bl	1b410 <bt_gatt_foreach_attr_type>
				     remove_peer_from_attr,
				     &addr_with_id);
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	remove_subscriptions(conn);
   1bd24:	4620      	mov	r0, r4
   1bd26:	f00d fd2b 	bl	29780 <remove_subscriptions>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
   1bd2a:	4620      	mov	r0, r4
   1bd2c:	f00d fea6 	bl	29a7c <remove_cf_cfg>
#endif
}
   1bd30:	b004      	add	sp, #16
   1bd32:	bd10      	pop	{r4, pc}
   1bd34:	0001b261 	.word	0x0001b261

0001bd38 <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1bd38:	b510      	push	{r4, lr}
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bd3a:	2300      	movs	r3, #0
   1bd3c:	2b00      	cmp	r3, #0
   1bd3e:	dd13      	ble.n	1bd68 <bt_smp_accept+0x30>
   1bd40:	4b12      	ldr	r3, [pc, #72]	; (1bd8c <bt_smp_accept+0x54>)
   1bd42:	4a13      	ldr	r2, [pc, #76]	; (1bd90 <bt_smp_accept+0x58>)
   1bd44:	1a9b      	subs	r3, r3, r2
   1bd46:	08db      	lsrs	r3, r3, #3
		*chan = &smp->chan;

		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);
   1bd48:	f04f 0200 	mov.w	r2, #0
   1bd4c:	2101      	movs	r1, #1
   1bd4e:	f361 0202 	bfi	r2, r1, #0, #3
   1bd52:	f36f 02c5 	bfc	r2, #3, #3
   1bd56:	f363 128f 	bfi	r2, r3, #6, #10
   1bd5a:	4601      	mov	r1, r0
   1bd5c:	480d      	ldr	r0, [pc, #52]	; (1bd94 <bt_smp_accept+0x5c>)
   1bd5e:	f7f6 f8af 	bl	11ec0 <log_1>

	return -ENOMEM;
   1bd62:	f06f 000b 	mvn.w	r0, #11
}
   1bd66:	bd10      	pop	{r4, pc}
		if (smp->chan.conn) {
   1bd68:	22e8      	movs	r2, #232	; 0xe8
   1bd6a:	fb02 f203 	mul.w	r2, r2, r3
   1bd6e:	4c0a      	ldr	r4, [pc, #40]	; (1bd98 <bt_smp_accept+0x60>)
   1bd70:	58a2      	ldr	r2, [r4, r2]
   1bd72:	b10a      	cbz	r2, 1bd78 <bt_smp_accept+0x40>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bd74:	3301      	adds	r3, #1
   1bd76:	e7e1      	b.n	1bd3c <bt_smp_accept+0x4>
		smp->chan.ops = &ops;
   1bd78:	4a07      	ldr	r2, [pc, #28]	; (1bd98 <bt_smp_accept+0x60>)
   1bd7a:	20e8      	movs	r0, #232	; 0xe8
   1bd7c:	fb00 2303 	mla	r3, r0, r3, r2
   1bd80:	4a06      	ldr	r2, [pc, #24]	; (1bd9c <bt_smp_accept+0x64>)
   1bd82:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan;
   1bd84:	600b      	str	r3, [r1, #0]
		return 0;
   1bd86:	2000      	movs	r0, #0
   1bd88:	e7ed      	b.n	1bd66 <bt_smp_accept+0x2e>
   1bd8a:	bf00      	nop
   1bd8c:	0002c658 	.word	0x0002c658
   1bd90:	0002c610 	.word	0x0002c610
   1bd94:	0002eac4 	.word	0x0002eac4
   1bd98:	20001d28 	.word	0x20001d28
   1bd9c:	0002eaf4 	.word	0x0002eaf4

0001bda0 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1bda0:	4b03      	ldr	r3, [pc, #12]	; (1bdb0 <pool_id+0x10>)
   1bda2:	1ac0      	subs	r0, r0, r3
   1bda4:	10c0      	asrs	r0, r0, #3
}
   1bda6:	4b03      	ldr	r3, [pc, #12]	; (1bdb4 <pool_id+0x14>)
   1bda8:	fb03 f000 	mul.w	r0, r3, r0
   1bdac:	4770      	bx	lr
   1bdae:	bf00      	nop
   1bdb0:	200008b0 	.word	0x200008b0
   1bdb4:	cccccccd 	.word	0xcccccccd

0001bdb8 <net_buf_pool_get>:
	return &_net_buf_pool_list[id];
   1bdb8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
   1bdbc:	4b01      	ldr	r3, [pc, #4]	; (1bdc4 <net_buf_pool_get+0xc>)
   1bdbe:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1bdc2:	4770      	bx	lr
   1bdc4:	200008b0 	.word	0x200008b0

0001bdc8 <net_buf_id>:

int net_buf_id(struct net_buf *buf)
{
   1bdc8:	b510      	push	{r4, lr}
   1bdca:	4604      	mov	r4, r0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bdcc:	7980      	ldrb	r0, [r0, #6]
   1bdce:	f7ff fff3 	bl	1bdb8 <net_buf_pool_get>

	return buf - pool->__bufs;
   1bdd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1bdd4:	1a24      	subs	r4, r4, r0
   1bdd6:	10e4      	asrs	r4, r4, #3
}
   1bdd8:	4801      	ldr	r0, [pc, #4]	; (1bde0 <net_buf_id+0x18>)
   1bdda:	fb00 f004 	mul.w	r0, r0, r4
   1bdde:	bd10      	pop	{r4, pc}
   1bde0:	aaaaaaab 	.word	0xaaaaaaab

0001bde4 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
   1bde4:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1bde8:	b242      	sxtb	r2, r0
   1bdea:	2a00      	cmp	r2, #0
   1bdec:	db12      	blt.n	1be14 <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1bdee:	2b08      	cmp	r3, #8
   1bdf0:	d002      	beq.n	1bdf8 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
   1bdf2:	f010 0f78 	tst.w	r0, #120	; 0x78
   1bdf6:	d11d      	bne.n	1be34 <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
   1bdf8:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
   1bdfc:	2a00      	cmp	r2, #0
   1bdfe:	db10      	blt.n	1be22 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1be00:	f010 0f08 	tst.w	r0, #8
   1be04:	d11a      	bne.n	1be3c <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
   1be06:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
   1be08:	015b      	lsls	r3, r3, #5
   1be0a:	3348      	adds	r3, #72	; 0x48
   1be0c:	480c      	ldr	r0, [pc, #48]	; (1be40 <endpoint_ctx+0x5c>)
   1be0e:	4403      	add	r3, r0
   1be10:	1d18      	adds	r0, r3, #4
   1be12:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
   1be14:	2b08      	cmp	r3, #8
   1be16:	d0ef      	beq.n	1bdf8 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
   1be18:	f010 0f78 	tst.w	r0, #120	; 0x78
   1be1c:	d0ec      	beq.n	1bdf8 <endpoint_ctx+0x14>
		return NULL;
   1be1e:	2000      	movs	r0, #0
   1be20:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
   1be22:	f010 0f08 	tst.w	r0, #8
   1be26:	d107      	bne.n	1be38 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
   1be28:	015b      	lsls	r3, r3, #5
   1be2a:	3348      	adds	r3, #72	; 0x48
   1be2c:	4804      	ldr	r0, [pc, #16]	; (1be40 <endpoint_ctx+0x5c>)
   1be2e:	4403      	add	r3, r0
   1be30:	1d18      	adds	r0, r3, #4
   1be32:	4770      	bx	lr
		return NULL;
   1be34:	2000      	movs	r0, #0
   1be36:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
   1be38:	4802      	ldr	r0, [pc, #8]	; (1be44 <endpoint_ctx+0x60>)
   1be3a:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
   1be3c:	4802      	ldr	r0, [pc, #8]	; (1be48 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
   1be3e:	4770      	bx	lr
   1be40:	2000327c 	.word	0x2000327c
   1be44:	200033c8 	.word	0x200033c8
   1be48:	200034e8 	.word	0x200034e8

0001be4c <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
   1be4c:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1be4e:	2400      	movs	r4, #0
   1be50:	e005      	b.n	1be5e <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
   1be52:	b2e0      	uxtb	r0, r4
   1be54:	f00e fa29 	bl	2a2aa <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   1be58:	f00e fa31 	bl	2a2be <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
   1be5c:	3401      	adds	r4, #1
   1be5e:	2c07      	cmp	r4, #7
   1be60:	d9f7      	bls.n	1be52 <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1be62:	2400      	movs	r4, #0
   1be64:	e006      	b.n	1be74 <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
   1be66:	4b10      	ldr	r3, [pc, #64]	; (1bea8 <eps_ctx_init+0x5c>)
   1be68:	eb03 1384 	add.w	r3, r3, r4, lsl #6
   1be6c:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
   1be6e:	f00e fa26 	bl	2a2be <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
   1be72:	3401      	adds	r4, #1
   1be74:	2c07      	cmp	r4, #7
   1be76:	d806      	bhi.n	1be86 <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
   1be78:	b2e0      	uxtb	r0, r4
   1be7a:	f00e fa1c 	bl	2a2b6 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
   1be7e:	6903      	ldr	r3, [r0, #16]
   1be80:	2b00      	cmp	r3, #0
   1be82:	d1f4      	bne.n	1be6e <eps_ctx_init+0x22>
   1be84:	e7ef      	b.n	1be66 <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   1be86:	2088      	movs	r0, #136	; 0x88
   1be88:	f00e fa0f 	bl	2a2aa <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
   1be8c:	f00e fa17 	bl	2a2be <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   1be90:	2008      	movs	r0, #8
   1be92:	f00e fa10 	bl	2a2b6 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
   1be96:	6903      	ldr	r3, [r0, #16]
   1be98:	b11b      	cbz	r3, 1bea2 <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
   1be9a:	f00e fa10 	bl	2a2be <ep_ctx_reset>
	}

	return 0;
}
   1be9e:	2000      	movs	r0, #0
   1bea0:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
   1bea2:	4b02      	ldr	r3, [pc, #8]	; (1beac <eps_ctx_init+0x60>)
   1bea4:	6103      	str	r3, [r0, #16]
   1bea6:	e7f8      	b.n	1be9a <eps_ctx_init+0x4e>
   1bea8:	2000307c 	.word	0x2000307c
   1beac:	20002c7c 	.word	0x20002c7c

0001beb0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
   1beb0:	b510      	push	{r4, lr}
   1beb2:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
   1beb4:	480b      	ldr	r0, [pc, #44]	; (1bee4 <usb_init+0x34>)
   1beb6:	f003 fab7 	bl	1f428 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
   1beba:	480b      	ldr	r0, [pc, #44]	; (1bee8 <usb_init+0x38>)
   1bebc:	f003 faf8 	bl	1f4b0 <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
   1bec0:	2400      	movs	r4, #0
   1bec2:	9400      	str	r4, [sp, #0]
   1bec4:	f04f 33ff 	mov.w	r3, #4294967295
   1bec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1becc:	4907      	ldr	r1, [pc, #28]	; (1beec <usb_init+0x3c>)
   1bece:	4808      	ldr	r0, [pc, #32]	; (1bef0 <usb_init+0x40>)
   1bed0:	f006 f8a8 	bl	22024 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
   1bed4:	4907      	ldr	r1, [pc, #28]	; (1bef4 <usb_init+0x44>)
   1bed6:	4808      	ldr	r0, [pc, #32]	; (1bef8 <usb_init+0x48>)
   1bed8:	f00f fe06 	bl	2bae8 <k_work_init>

	return 0;
}
   1bedc:	4620      	mov	r0, r4
   1bede:	b002      	add	sp, #8
   1bee0:	bd10      	pop	{r4, pc}
   1bee2:	bf00      	nop
   1bee4:	0002ed64 	.word	0x0002ed64
   1bee8:	0002ed68 	.word	0x0002ed68
   1beec:	20005aa0 	.word	0x20005aa0
   1bef0:	20001e10 	.word	0x20001e10
   1bef4:	0001c171 	.word	0x0001c171
   1bef8:	200032a4 	.word	0x200032a4

0001befc <submit_dc_power_event>:
{
   1befc:	b530      	push	{r4, r5, lr}
   1befe:	b083      	sub	sp, #12
   1bf00:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1bf02:	2200      	movs	r2, #0
   1bf04:	2300      	movs	r3, #0
   1bf06:	a901      	add	r1, sp, #4
   1bf08:	482e      	ldr	r0, [pc, #184]	; (1bfc4 <submit_dc_power_event+0xc8>)
   1bf0a:	f005 fc75 	bl	217f8 <k_mem_slab_alloc>
   1bf0e:	b980      	cbnz	r0, 1bf32 <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
   1bf10:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1bf12:	6064      	str	r4, [r4, #4]
	if (!ev) {
   1bf14:	b15c      	cbz	r4, 1bf2e <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
   1bf16:	2300      	movs	r3, #0
   1bf18:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
   1bf1a:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1bf1c:	4621      	mov	r1, r4
   1bf1e:	482a      	ldr	r0, [pc, #168]	; (1bfc8 <submit_dc_power_event+0xcc>)
   1bf20:	f00f fd06 	bl	2b930 <k_queue_append>
	if (usbd_ctx.attached) {
   1bf24:	4b29      	ldr	r3, [pc, #164]	; (1bfcc <submit_dc_power_event+0xd0>)
   1bf26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bf2a:	2b00      	cmp	r3, #0
   1bf2c:	d144      	bne.n	1bfb8 <submit_dc_power_event+0xbc>
}
   1bf2e:	b003      	add	sp, #12
   1bf30:	bd30      	pop	{r4, r5, pc}
   1bf32:	4b27      	ldr	r3, [pc, #156]	; (1bfd0 <submit_dc_power_event+0xd4>)
   1bf34:	4a27      	ldr	r2, [pc, #156]	; (1bfd4 <submit_dc_power_event+0xd8>)
   1bf36:	1a9b      	subs	r3, r3, r2
   1bf38:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1bf3a:	f04f 0100 	mov.w	r1, #0
   1bf3e:	2201      	movs	r2, #1
   1bf40:	f362 0102 	bfi	r1, r2, #0, #3
   1bf44:	f36f 01c5 	bfc	r1, #3, #3
   1bf48:	f363 118f 	bfi	r1, r3, #6, #10
   1bf4c:	4822      	ldr	r0, [pc, #136]	; (1bfd8 <submit_dc_power_event+0xdc>)
   1bf4e:	f7f6 f86d 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1bf52:	e004      	b.n	1bf5e <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1bf54:	1d01      	adds	r1, r0, #4
   1bf56:	481b      	ldr	r0, [pc, #108]	; (1bfc4 <submit_dc_power_event+0xc8>)
   1bf58:	f00f fbb6 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1bf5c:	b144      	cbz	r4, 1bf70 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
   1bf5e:	2200      	movs	r2, #0
   1bf60:	2300      	movs	r3, #0
   1bf62:	4819      	ldr	r0, [pc, #100]	; (1bfc8 <submit_dc_power_event+0xcc>)
   1bf64:	f005 fe50 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1bf68:	4604      	mov	r4, r0
   1bf6a:	2800      	cmp	r0, #0
   1bf6c:	d1f2      	bne.n	1bf54 <submit_dc_power_event+0x58>
   1bf6e:	e7f5      	b.n	1bf5c <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1bf70:	2200      	movs	r2, #0
   1bf72:	2300      	movs	r3, #0
   1bf74:	a901      	add	r1, sp, #4
   1bf76:	4813      	ldr	r0, [pc, #76]	; (1bfc4 <submit_dc_power_event+0xc8>)
   1bf78:	f005 fc3e 	bl	217f8 <k_mem_slab_alloc>
   1bf7c:	b180      	cbz	r0, 1bfa0 <submit_dc_power_event+0xa4>
   1bf7e:	4b14      	ldr	r3, [pc, #80]	; (1bfd0 <submit_dc_power_event+0xd4>)
   1bf80:	4a14      	ldr	r2, [pc, #80]	; (1bfd4 <submit_dc_power_event+0xd8>)
   1bf82:	1a9b      	subs	r3, r3, r2
   1bf84:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1bf86:	f04f 0100 	mov.w	r1, #0
   1bf8a:	2201      	movs	r2, #1
   1bf8c:	f362 0102 	bfi	r1, r2, #0, #3
   1bf90:	f36f 01c5 	bfc	r1, #3, #3
   1bf94:	f363 118f 	bfi	r1, r3, #6, #10
   1bf98:	4810      	ldr	r0, [pc, #64]	; (1bfdc <submit_dc_power_event+0xe0>)
   1bf9a:	f7f6 f847 	bl	1202c <log_0>
			return NULL;
   1bf9e:	e7b9      	b.n	1bf14 <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
   1bfa0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1bfa2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1bfa4:	2304      	movs	r3, #4
   1bfa6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1bfa8:	4807      	ldr	r0, [pc, #28]	; (1bfc8 <submit_dc_power_event+0xcc>)
   1bfaa:	f00f fcc1 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1bfae:	490c      	ldr	r1, [pc, #48]	; (1bfe0 <submit_dc_power_event+0xe4>)
   1bfb0:	480c      	ldr	r0, [pc, #48]	; (1bfe4 <submit_dc_power_event+0xe8>)
   1bfb2:	f00f fd9f 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1bfb6:	e7ad      	b.n	1bf14 <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1bfb8:	4909      	ldr	r1, [pc, #36]	; (1bfe0 <submit_dc_power_event+0xe4>)
   1bfba:	480a      	ldr	r0, [pc, #40]	; (1bfe4 <submit_dc_power_event+0xe8>)
   1bfbc:	f00f fd9a 	bl	2baf4 <k_work_submit_to_queue>
}
   1bfc0:	e7b5      	b.n	1bf2e <submit_dc_power_event+0x32>
   1bfc2:	bf00      	nop
   1bfc4:	20000774 	.word	0x20000774
   1bfc8:	20000898 	.word	0x20000898
   1bfcc:	2000327c 	.word	0x2000327c
   1bfd0:	0002c6e8 	.word	0x0002c6e8
   1bfd4:	0002c610 	.word	0x0002c610
   1bfd8:	0002eb2c 	.word	0x0002eb2c
   1bfdc:	0002eb4c 	.word	0x0002eb4c
   1bfe0:	200032a4 	.word	0x200032a4
   1bfe4:	20001e10 	.word	0x20001e10

0001bfe8 <usb_dc_power_event_handler>:
{
   1bfe8:	b508      	push	{r3, lr}
	switch (event) {
   1bfea:	2801      	cmp	r0, #1
   1bfec:	d014      	beq.n	1c018 <usb_dc_power_event_handler+0x30>
   1bfee:	2802      	cmp	r0, #2
   1bff0:	d015      	beq.n	1c01e <usb_dc_power_event_handler+0x36>
   1bff2:	b198      	cbz	r0, 1c01c <usb_dc_power_event_handler+0x34>
   1bff4:	4b0b      	ldr	r3, [pc, #44]	; (1c024 <usb_dc_power_event_handler+0x3c>)
   1bff6:	4a0c      	ldr	r2, [pc, #48]	; (1c028 <usb_dc_power_event_handler+0x40>)
   1bff8:	1a9b      	subs	r3, r3, r2
   1bffa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
   1bffc:	f04f 0200 	mov.w	r2, #0
   1c000:	2101      	movs	r1, #1
   1c002:	f361 0202 	bfi	r2, r1, #0, #3
   1c006:	f36f 02c5 	bfc	r2, #3, #3
   1c00a:	f363 128f 	bfi	r2, r3, #6, #10
   1c00e:	4601      	mov	r1, r0
   1c010:	4806      	ldr	r0, [pc, #24]	; (1c02c <usb_dc_power_event_handler+0x44>)
   1c012:	f7f5 ff55 	bl	11ec0 <log_1>
   1c016:	e004      	b.n	1c022 <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
   1c018:	2000      	movs	r0, #0
   1c01a:	e000      	b.n	1c01e <usb_dc_power_event_handler+0x36>
	switch (event) {
   1c01c:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
   1c01e:	f7ff ff6d 	bl	1befc <submit_dc_power_event>
}
   1c022:	bd08      	pop	{r3, pc}
   1c024:	0002c6e8 	.word	0x0002c6e8
   1c028:	0002c610 	.word	0x0002c610
   1c02c:	0002eb68 	.word	0x0002eb68

0001c030 <usbd_sof_trigger_iso_read>:
{
   1c030:	b530      	push	{r4, r5, lr}
   1c032:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
   1c034:	2008      	movs	r0, #8
   1c036:	f7ff fed5 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1c03a:	b120      	cbz	r0, 1c046 <usbd_sof_trigger_iso_read+0x16>
   1c03c:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
   1c03e:	7a03      	ldrb	r3, [r0, #8]
   1c040:	b993      	cbnz	r3, 1c068 <usbd_sof_trigger_iso_read+0x38>
}
   1c042:	b003      	add	sp, #12
   1c044:	bd30      	pop	{r4, r5, pc}
   1c046:	4b40      	ldr	r3, [pc, #256]	; (1c148 <usbd_sof_trigger_iso_read+0x118>)
   1c048:	4a40      	ldr	r2, [pc, #256]	; (1c14c <usbd_sof_trigger_iso_read+0x11c>)
   1c04a:	1a9b      	subs	r3, r3, r2
   1c04c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
   1c04e:	f04f 0100 	mov.w	r1, #0
   1c052:	2201      	movs	r2, #1
   1c054:	f362 0102 	bfi	r1, r2, #0, #3
   1c058:	f36f 01c5 	bfc	r1, #3, #3
   1c05c:	f363 118f 	bfi	r1, r3, #6, #10
   1c060:	483b      	ldr	r0, [pc, #236]	; (1c150 <usbd_sof_trigger_iso_read+0x120>)
   1c062:	f7f5 ffe3 	bl	1202c <log_0>
		return;
   1c066:	e7ec      	b.n	1c042 <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
   1c068:	2301      	movs	r3, #1
   1c06a:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
   1c06c:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1c06e:	2200      	movs	r2, #0
   1c070:	2300      	movs	r3, #0
   1c072:	a901      	add	r1, sp, #4
   1c074:	4837      	ldr	r0, [pc, #220]	; (1c154 <usbd_sof_trigger_iso_read+0x124>)
   1c076:	f005 fbbf 	bl	217f8 <k_mem_slab_alloc>
   1c07a:	b980      	cbnz	r0, 1c09e <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
   1c07c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1c07e:	6064      	str	r4, [r4, #4]
		if (!ev) {
   1c080:	2c00      	cmp	r4, #0
   1c082:	d04f      	beq.n	1c124 <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
   1c084:	2301      	movs	r3, #1
   1c086:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1c088:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
   1c08a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c08c:	4621      	mov	r1, r4
   1c08e:	4832      	ldr	r0, [pc, #200]	; (1c158 <usbd_sof_trigger_iso_read+0x128>)
   1c090:	f00f fc4e 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c094:	4931      	ldr	r1, [pc, #196]	; (1c15c <usbd_sof_trigger_iso_read+0x12c>)
   1c096:	4832      	ldr	r0, [pc, #200]	; (1c160 <usbd_sof_trigger_iso_read+0x130>)
   1c098:	f00f fd2c 	bl	2baf4 <k_work_submit_to_queue>
}
   1c09c:	e7d1      	b.n	1c042 <usbd_sof_trigger_iso_read+0x12>
   1c09e:	4b2a      	ldr	r3, [pc, #168]	; (1c148 <usbd_sof_trigger_iso_read+0x118>)
   1c0a0:	4a2a      	ldr	r2, [pc, #168]	; (1c14c <usbd_sof_trigger_iso_read+0x11c>)
   1c0a2:	1a9b      	subs	r3, r3, r2
   1c0a4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1c0a6:	f04f 0100 	mov.w	r1, #0
   1c0aa:	2201      	movs	r2, #1
   1c0ac:	f362 0102 	bfi	r1, r2, #0, #3
   1c0b0:	f36f 01c5 	bfc	r1, #3, #3
   1c0b4:	f363 118f 	bfi	r1, r3, #6, #10
   1c0b8:	482a      	ldr	r0, [pc, #168]	; (1c164 <usbd_sof_trigger_iso_read+0x134>)
   1c0ba:	f7f5 ffb7 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1c0be:	e000      	b.n	1c0c2 <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
   1c0c0:	b164      	cbz	r4, 1c0dc <usbd_sof_trigger_iso_read+0xac>
   1c0c2:	2200      	movs	r2, #0
   1c0c4:	2300      	movs	r3, #0
   1c0c6:	4824      	ldr	r0, [pc, #144]	; (1c158 <usbd_sof_trigger_iso_read+0x128>)
   1c0c8:	f005 fd9e 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c0cc:	4604      	mov	r4, r0
   1c0ce:	2800      	cmp	r0, #0
   1c0d0:	d0f6      	beq.n	1c0c0 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c0d2:	1d01      	adds	r1, r0, #4
   1c0d4:	481f      	ldr	r0, [pc, #124]	; (1c154 <usbd_sof_trigger_iso_read+0x124>)
   1c0d6:	f00f faf7 	bl	2b6c8 <k_mem_slab_free>
}
   1c0da:	e7f1      	b.n	1c0c0 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1c0dc:	2200      	movs	r2, #0
   1c0de:	2300      	movs	r3, #0
   1c0e0:	a901      	add	r1, sp, #4
   1c0e2:	481c      	ldr	r0, [pc, #112]	; (1c154 <usbd_sof_trigger_iso_read+0x124>)
   1c0e4:	f005 fb88 	bl	217f8 <k_mem_slab_alloc>
   1c0e8:	b180      	cbz	r0, 1c10c <usbd_sof_trigger_iso_read+0xdc>
   1c0ea:	4b17      	ldr	r3, [pc, #92]	; (1c148 <usbd_sof_trigger_iso_read+0x118>)
   1c0ec:	4a17      	ldr	r2, [pc, #92]	; (1c14c <usbd_sof_trigger_iso_read+0x11c>)
   1c0ee:	1a9b      	subs	r3, r3, r2
   1c0f0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1c0f2:	f04f 0100 	mov.w	r1, #0
   1c0f6:	2201      	movs	r2, #1
   1c0f8:	f362 0102 	bfi	r1, r2, #0, #3
   1c0fc:	f36f 01c5 	bfc	r1, #3, #3
   1c100:	f363 118f 	bfi	r1, r3, #6, #10
   1c104:	4818      	ldr	r0, [pc, #96]	; (1c168 <usbd_sof_trigger_iso_read+0x138>)
   1c106:	f7f5 ff91 	bl	1202c <log_0>
			return NULL;
   1c10a:	e7b9      	b.n	1c080 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
   1c10c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1c10e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1c110:	2304      	movs	r3, #4
   1c112:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c114:	4810      	ldr	r0, [pc, #64]	; (1c158 <usbd_sof_trigger_iso_read+0x128>)
   1c116:	f00f fc0b 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c11a:	4910      	ldr	r1, [pc, #64]	; (1c15c <usbd_sof_trigger_iso_read+0x12c>)
   1c11c:	4810      	ldr	r0, [pc, #64]	; (1c160 <usbd_sof_trigger_iso_read+0x130>)
   1c11e:	f00f fce9 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1c122:	e7ad      	b.n	1c080 <usbd_sof_trigger_iso_read+0x50>
   1c124:	4b08      	ldr	r3, [pc, #32]	; (1c148 <usbd_sof_trigger_iso_read+0x118>)
   1c126:	4a09      	ldr	r2, [pc, #36]	; (1c14c <usbd_sof_trigger_iso_read+0x11c>)
   1c128:	1a9b      	subs	r3, r3, r2
   1c12a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
   1c12c:	f04f 0100 	mov.w	r1, #0
   1c130:	2201      	movs	r2, #1
   1c132:	f362 0102 	bfi	r1, r2, #0, #3
   1c136:	f36f 01c5 	bfc	r1, #3, #3
   1c13a:	f363 118f 	bfi	r1, r3, #6, #10
   1c13e:	480b      	ldr	r0, [pc, #44]	; (1c16c <usbd_sof_trigger_iso_read+0x13c>)
   1c140:	f7f5 ff74 	bl	1202c <log_0>
			return;
   1c144:	e77d      	b.n	1c042 <usbd_sof_trigger_iso_read+0x12>
   1c146:	bf00      	nop
   1c148:	0002c6e8 	.word	0x0002c6e8
   1c14c:	0002c610 	.word	0x0002c610
   1c150:	0002eb84 	.word	0x0002eb84
   1c154:	20000774 	.word	0x20000774
   1c158:	20000898 	.word	0x20000898
   1c15c:	200032a4 	.word	0x200032a4
   1c160:	20001e10 	.word	0x20001e10
   1c164:	0002eb2c 	.word	0x0002eb2c
   1c168:	0002eb4c 	.word	0x0002eb4c
   1c16c:	0002eb98 	.word	0x0002eb98

0001c170 <usbd_work_handler>:
{
   1c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c174:	b085      	sub	sp, #20
   1c176:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
   1c178:	e18f      	b.n	1c49a <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c17a:	1d21      	adds	r1, r4, #4
   1c17c:	48b5      	ldr	r0, [pc, #724]	; (1c454 <usbd_work_handler+0x2e4>)
   1c17e:	f00f faa3 	bl	2b6c8 <k_mem_slab_free>
			continue;
   1c182:	e18a      	b.n	1c49a <usbd_work_handler+0x32a>
			if (!ctx->attached) {
   1c184:	f815 3c04 	ldrb.w	r3, [r5, #-4]
   1c188:	b14b      	cbz	r3, 1c19e <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
   1c18a:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
   1c18e:	7b23      	ldrb	r3, [r4, #12]
   1c190:	2b03      	cmp	r3, #3
   1c192:	f200 817e 	bhi.w	1c492 <usbd_work_handler+0x322>
   1c196:	e8df f003 	tbb	[pc, r3]
   1c19a:	6114      	.short	0x6114
   1c19c:	a49d      	.short	0xa49d
   1c19e:	4bae      	ldr	r3, [pc, #696]	; (1c458 <usbd_work_handler+0x2e8>)
   1c1a0:	4aae      	ldr	r2, [pc, #696]	; (1c45c <usbd_work_handler+0x2ec>)
   1c1a2:	1a9b      	subs	r3, r3, r2
   1c1a4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
   1c1a6:	2201      	movs	r2, #1
   1c1a8:	f362 0702 	bfi	r7, r2, #0, #3
   1c1ac:	f36f 07c5 	bfc	r7, #3, #3
   1c1b0:	f363 178f 	bfi	r7, r3, #6, #10
   1c1b4:	68a3      	ldr	r3, [r4, #8]
   1c1b6:	463a      	mov	r2, r7
   1c1b8:	7a59      	ldrb	r1, [r3, #9]
   1c1ba:	48a9      	ldr	r0, [pc, #676]	; (1c460 <usbd_work_handler+0x2f0>)
   1c1bc:	f7f5 fe80 	bl	11ec0 <log_1>
   1c1c0:	e7e3      	b.n	1c18a <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
   1c1c2:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
   1c1c6:	2208      	movs	r2, #8
   1c1c8:	2100      	movs	r1, #0
   1c1ca:	4658      	mov	r0, fp
   1c1cc:	f00b fd64 	bl	27c98 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   1c1d0:	4ba4      	ldr	r3, [pc, #656]	; (1c464 <usbd_work_handler+0x2f4>)
   1c1d2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   1c1d6:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
   1c1da:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
   1c1de:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
   1c1e2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
   1c1e6:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   1c1e8:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   1c1ec:	0209      	lsls	r1, r1, #8
   1c1ee:	b289      	uxth	r1, r1
   1c1f0:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
   1c1f2:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
   1c1f6:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   1c1fa:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   1c1fc:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   1c200:	0209      	lsls	r1, r1, #8
   1c202:	b289      	uxth	r1, r1
   1c204:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
   1c206:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
   1c20a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   1c20e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   1c210:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   1c214:	021b      	lsls	r3, r3, #8
   1c216:	b29b      	uxth	r3, r3
   1c218:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
   1c21a:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
   1c21e:	2208      	movs	r2, #8
   1c220:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
   1c224:	4659      	mov	r1, fp
   1c226:	4890      	ldr	r0, [pc, #576]	; (1c468 <usbd_work_handler+0x2f8>)
   1c228:	f00b fd12 	bl	27c50 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
   1c22c:	f8da 3000 	ldr.w	r3, [sl]
   1c230:	2100      	movs	r1, #0
   1c232:	f89a 0009 	ldrb.w	r0, [sl, #9]
   1c236:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
   1c238:	f99b 3000 	ldrsb.w	r3, [fp]
   1c23c:	2b00      	cmp	r3, #0
   1c23e:	db02      	blt.n	1c246 <usbd_work_handler+0xd6>
   1c240:	f8bb 3006 	ldrh.w	r3, [fp, #6]
   1c244:	b923      	cbnz	r3, 1c250 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
   1c246:	4b89      	ldr	r3, [pc, #548]	; (1c46c <usbd_work_handler+0x2fc>)
   1c248:	2200      	movs	r2, #0
   1c24a:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
   1c24e:	e120      	b.n	1c492 <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
   1c250:	4a86      	ldr	r2, [pc, #536]	; (1c46c <usbd_work_handler+0x2fc>)
   1c252:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
   1c256:	f004 fc0b 	bl	20a70 <nrfx_usbd_setup_data_clear>
   1c25a:	e11a      	b.n	1c492 <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
   1c25c:	f89a 301d 	ldrb.w	r3, [sl, #29]
   1c260:	2b00      	cmp	r3, #0
   1c262:	f000 8116 	beq.w	1c492 <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
   1c266:	f89a 301c 	ldrb.w	r3, [sl, #28]
   1c26a:	2b00      	cmp	r3, #0
   1c26c:	f000 8111 	beq.w	1c492 <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
   1c270:	f04f 0b00 	mov.w	fp, #0
   1c274:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
   1c278:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
   1c27c:	f04f 32ff 	mov.w	r2, #4294967295
   1c280:	f04f 33ff 	mov.w	r3, #4294967295
   1c284:	487a      	ldr	r0, [pc, #488]	; (1c470 <usbd_work_handler+0x300>)
   1c286:	f005 fbf1 	bl	21a6c <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
   1c28a:	f8da 3014 	ldr.w	r3, [sl, #20]
   1c28e:	9301      	str	r3, [sp, #4]
   1c290:	f8da 3004 	ldr.w	r3, [sl, #4]
   1c294:	9302      	str	r3, [sp, #8]
   1c296:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
   1c29a:	a901      	add	r1, sp, #4
   1c29c:	f89a 0009 	ldrb.w	r0, [sl, #9]
   1c2a0:	f003 ff9a 	bl	201d8 <nrfx_usbd_ep_transfer>
   1c2a4:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
   1c2a6:	4b73      	ldr	r3, [pc, #460]	; (1c474 <usbd_work_handler+0x304>)
   1c2a8:	4298      	cmp	r0, r3
   1c2aa:	d103      	bne.n	1c2b4 <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
   1c2ac:	4870      	ldr	r0, [pc, #448]	; (1c470 <usbd_work_handler+0x300>)
   1c2ae:	f005 fc67 	bl	21b80 <z_impl_k_mutex_unlock>
   1c2b2:	e0ee      	b.n	1c492 <usbd_work_handler+0x322>
   1c2b4:	4b68      	ldr	r3, [pc, #416]	; (1c458 <usbd_work_handler+0x2e8>)
   1c2b6:	4a69      	ldr	r2, [pc, #420]	; (1c45c <usbd_work_handler+0x2ec>)
   1c2b8:	1a9b      	subs	r3, r3, r2
   1c2ba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
   1c2bc:	2201      	movs	r2, #1
   1c2be:	f362 0802 	bfi	r8, r2, #0, #3
   1c2c2:	f36f 08c5 	bfc	r8, #3, #3
   1c2c6:	f363 188f 	bfi	r8, r3, #6, #10
   1c2ca:	4642      	mov	r2, r8
   1c2cc:	486a      	ldr	r0, [pc, #424]	; (1c478 <usbd_work_handler+0x308>)
   1c2ce:	f7f5 fdf7 	bl	11ec0 <log_1>
   1c2d2:	e7eb      	b.n	1c2ac <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1c2d4:	f8da 3000 	ldr.w	r3, [sl]
   1c2d8:	2101      	movs	r1, #1
   1c2da:	f89a 0009 	ldrb.w	r0, [sl, #9]
   1c2de:	4798      	blx	r3
		break;
   1c2e0:	e0d7      	b.n	1c492 <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   1c2e2:	f89a 300a 	ldrb.w	r3, [sl, #10]
   1c2e6:	b913      	cbnz	r3, 1c2ee <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
   1c2e8:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
   1c2ec:	b133      	cbz	r3, 1c2fc <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
   1c2ee:	f8da 3000 	ldr.w	r3, [sl]
   1c2f2:	2102      	movs	r1, #2
   1c2f4:	f89a 0009 	ldrb.w	r0, [sl, #9]
   1c2f8:	4798      	blx	r3
}
   1c2fa:	e0ca      	b.n	1c492 <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
   1c2fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 1c470 <usbd_work_handler+0x300>
   1c300:	f04f 32ff 	mov.w	r2, #4294967295
   1c304:	f04f 33ff 	mov.w	r3, #4294967295
   1c308:	4658      	mov	r0, fp
   1c30a:	f005 fbaf 	bl	21a6c <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
   1c30e:	f004 fc01 	bl	20b14 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
   1c312:	4658      	mov	r0, fp
   1c314:	f005 fc34 	bl	21b80 <z_impl_k_mutex_unlock>
   1c318:	e7e9      	b.n	1c2ee <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
   1c31a:	7a23      	ldrb	r3, [r4, #8]
   1c31c:	2b04      	cmp	r3, #4
   1c31e:	f200 80b8 	bhi.w	1c492 <usbd_work_handler+0x322>
   1c322:	e8df f003 	tbb	[pc, r3]
   1c326:	0322      	.short	0x0322
   1c328:	350e      	.short	0x350e
   1c32a:	44          	.byte	0x44
   1c32b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
   1c32c:	f003 fee2 	bl	200f4 <nrfx_usbd_is_enabled>
   1c330:	2800      	cmp	r0, #0
   1c332:	f040 80ae 	bne.w	1c492 <usbd_work_handler+0x322>
			nrfx_usbd_enable();
   1c336:	f003 fe27 	bl	1ff88 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
   1c33a:	484c      	ldr	r0, [pc, #304]	; (1c46c <usbd_work_handler+0x2fc>)
   1c33c:	f00e f826 	bl	2a38c <hfxo_start>
   1c340:	e0a7      	b.n	1c492 <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
   1c342:	f8df a128 	ldr.w	sl, [pc, #296]	; 1c46c <usbd_work_handler+0x2fc>
   1c346:	4650      	mov	r0, sl
   1c348:	f00d ffee 	bl	2a328 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
   1c34c:	2001      	movs	r0, #1
   1c34e:	f003 feb5 	bl	200bc <nrfx_usbd_start>
		ctx->ready = true;
   1c352:	2301      	movs	r3, #1
   1c354:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
   1c358:	f8da 3000 	ldr.w	r3, [sl]
   1c35c:	2b00      	cmp	r3, #0
   1c35e:	f000 8098 	beq.w	1c492 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
   1c362:	2100      	movs	r1, #0
   1c364:	2002      	movs	r0, #2
   1c366:	4798      	blx	r3
   1c368:	e093      	b.n	1c492 <usbd_work_handler+0x322>
		ctx->ready = false;
   1c36a:	f8df a100 	ldr.w	sl, [pc, #256]	; 1c46c <usbd_work_handler+0x2fc>
   1c36e:	2300      	movs	r3, #0
   1c370:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
   1c374:	f004 fe84 	bl	21080 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
   1c378:	4650      	mov	r0, sl
   1c37a:	f00d ffb4 	bl	2a2e6 <hfxo_stop>
		if (ctx->status_cb) {
   1c37e:	f8da 3000 	ldr.w	r3, [sl]
   1c382:	2b00      	cmp	r3, #0
   1c384:	f000 8085 	beq.w	1c492 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
   1c388:	2100      	movs	r1, #0
   1c38a:	2004      	movs	r0, #4
   1c38c:	4798      	blx	r3
   1c38e:	e080      	b.n	1c492 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
   1c390:	4b36      	ldr	r3, [pc, #216]	; (1c46c <usbd_work_handler+0x2fc>)
   1c392:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
   1c396:	2b00      	cmp	r3, #0
   1c398:	d07b      	beq.n	1c492 <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
   1c39a:	f004 fe93 	bl	210c4 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
   1c39e:	4b33      	ldr	r3, [pc, #204]	; (1c46c <usbd_work_handler+0x2fc>)
   1c3a0:	681b      	ldr	r3, [r3, #0]
   1c3a2:	2b00      	cmp	r3, #0
   1c3a4:	d075      	beq.n	1c492 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
   1c3a6:	2100      	movs	r1, #0
   1c3a8:	2005      	movs	r0, #5
   1c3aa:	4798      	blx	r3
   1c3ac:	e071      	b.n	1c492 <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
   1c3ae:	4b2f      	ldr	r3, [pc, #188]	; (1c46c <usbd_work_handler+0x2fc>)
   1c3b0:	681b      	ldr	r3, [r3, #0]
   1c3b2:	2b00      	cmp	r3, #0
   1c3b4:	d06d      	beq.n	1c492 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
   1c3b6:	4a2d      	ldr	r2, [pc, #180]	; (1c46c <usbd_work_handler+0x2fc>)
   1c3b8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
   1c3bc:	2a00      	cmp	r2, #0
   1c3be:	d068      	beq.n	1c492 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
   1c3c0:	2100      	movs	r1, #0
   1c3c2:	2006      	movs	r0, #6
   1c3c4:	4798      	blx	r3
}
   1c3c6:	e064      	b.n	1c492 <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
   1c3c8:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
   1c3cc:	f04f 32ff 	mov.w	r2, #4294967295
   1c3d0:	f04f 33ff 	mov.w	r3, #4294967295
   1c3d4:	4650      	mov	r0, sl
   1c3d6:	f005 fb49 	bl	21a6c <z_impl_k_mutex_lock>
			eps_ctx_init();
   1c3da:	f7ff fd37 	bl	1be4c <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
   1c3de:	4650      	mov	r0, sl
   1c3e0:	f005 fbce 	bl	21b80 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
   1c3e4:	f855 3c28 	ldr.w	r3, [r5, #-40]
   1c3e8:	2b00      	cmp	r3, #0
   1c3ea:	d052      	beq.n	1c492 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
   1c3ec:	2100      	movs	r1, #0
   1c3ee:	2001      	movs	r0, #1
   1c3f0:	4798      	blx	r3
   1c3f2:	e04e      	b.n	1c492 <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
   1c3f4:	f7ff fe1c 	bl	1c030 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
   1c3f8:	f855 3c28 	ldr.w	r3, [r5, #-40]
   1c3fc:	2b00      	cmp	r3, #0
   1c3fe:	d048      	beq.n	1c492 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
   1c400:	2100      	movs	r1, #0
   1c402:	200a      	movs	r0, #10
   1c404:	4798      	blx	r3
   1c406:	e044      	b.n	1c492 <usbd_work_handler+0x322>
   1c408:	4b13      	ldr	r3, [pc, #76]	; (1c458 <usbd_work_handler+0x2e8>)
   1c40a:	4a14      	ldr	r2, [pc, #80]	; (1c45c <usbd_work_handler+0x2ec>)
   1c40c:	1a9b      	subs	r3, r3, r2
   1c40e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
   1c410:	2201      	movs	r2, #1
   1c412:	f362 0602 	bfi	r6, r2, #0, #3
   1c416:	f36f 06c5 	bfc	r6, #3, #3
   1c41a:	f363 168f 	bfi	r6, r3, #6, #10
   1c41e:	4631      	mov	r1, r6
   1c420:	4816      	ldr	r0, [pc, #88]	; (1c47c <usbd_work_handler+0x30c>)
   1c422:	f7f5 fe03 	bl	1202c <log_0>
	nrfx_power_usbevt_disable();
   1c426:	f00f f813 	bl	2b450 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
   1c42a:	f004 fe29 	bl	21080 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
   1c42e:	f003 fda1 	bl	1ff74 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
   1c432:	e006      	b.n	1c442 <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c434:	1d01      	adds	r1, r0, #4
   1c436:	4807      	ldr	r0, [pc, #28]	; (1c454 <usbd_work_handler+0x2e4>)
   1c438:	f00f f946 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1c43c:	f1ba 0f00 	cmp.w	sl, #0
   1c440:	d020      	beq.n	1c484 <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
   1c442:	2200      	movs	r2, #0
   1c444:	2300      	movs	r3, #0
   1c446:	480e      	ldr	r0, [pc, #56]	; (1c480 <usbd_work_handler+0x310>)
   1c448:	f005 fbde 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c44c:	4682      	mov	sl, r0
   1c44e:	2800      	cmp	r0, #0
   1c450:	d1f0      	bne.n	1c434 <usbd_work_handler+0x2c4>
   1c452:	e7f3      	b.n	1c43c <usbd_work_handler+0x2cc>
   1c454:	20000774 	.word	0x20000774
   1c458:	0002c6e8 	.word	0x0002c6e8
   1c45c:	0002c610 	.word	0x0002c610
   1c460:	0002ebac 	.word	0x0002ebac
   1c464:	40027000 	.word	0x40027000
   1c468:	20003280 	.word	0x20003280
   1c46c:	2000327c 	.word	0x2000327c
   1c470:	200032b4 	.word	0x200032b4
   1c474:	0bad0000 	.word	0x0bad0000
   1c478:	0002ebd4 	.word	0x0002ebd4
   1c47c:	0002ebfc 	.word	0x0002ebfc
   1c480:	20000898 	.word	0x20000898
	ret = eps_ctx_init();
   1c484:	f7ff fce2 	bl	1be4c <eps_ctx_init>
	nrfx_power_usbevt_enable();
   1c488:	f00e ffdb 	bl	2b442 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
   1c48c:	481c      	ldr	r0, [pc, #112]	; (1c500 <usbd_work_handler+0x390>)
   1c48e:	f003 fe4b 	bl	20128 <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c492:	1d21      	adds	r1, r4, #4
   1c494:	481b      	ldr	r0, [pc, #108]	; (1c504 <usbd_work_handler+0x394>)
   1c496:	f00f f917 	bl	2b6c8 <k_mem_slab_free>
   1c49a:	2200      	movs	r2, #0
   1c49c:	2300      	movs	r3, #0
   1c49e:	481a      	ldr	r0, [pc, #104]	; (1c508 <usbd_work_handler+0x398>)
   1c4a0:	f005 fbb2 	bl	21c08 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
   1c4a4:	4604      	mov	r4, r0
   1c4a6:	b338      	cbz	r0, 1c4f8 <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
   1c4a8:	4b18      	ldr	r3, [pc, #96]	; (1c50c <usbd_work_handler+0x39c>)
   1c4aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
   1c4ae:	b91b      	cbnz	r3, 1c4b8 <usbd_work_handler+0x348>
   1c4b0:	7c23      	ldrb	r3, [r4, #16]
   1c4b2:	2b00      	cmp	r3, #0
   1c4b4:	f47f ae61 	bne.w	1c17a <usbd_work_handler+0xa>
		switch (ev->evt_type) {
   1c4b8:	7c21      	ldrb	r1, [r4, #16]
   1c4ba:	2904      	cmp	r1, #4
   1c4bc:	d80c      	bhi.n	1c4d8 <usbd_work_handler+0x368>
   1c4be:	a301      	add	r3, pc, #4	; (adr r3, 1c4c4 <usbd_work_handler+0x354>)
   1c4c0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1c4c4:	0001c31b 	.word	0x0001c31b
   1c4c8:	0001c185 	.word	0x0001c185
   1c4cc:	0001c3c9 	.word	0x0001c3c9
   1c4d0:	0001c3f5 	.word	0x0001c3f5
   1c4d4:	0001c409 	.word	0x0001c409
   1c4d8:	4b0d      	ldr	r3, [pc, #52]	; (1c510 <usbd_work_handler+0x3a0>)
   1c4da:	4a0e      	ldr	r2, [pc, #56]	; (1c514 <usbd_work_handler+0x3a4>)
   1c4dc:	1a9b      	subs	r3, r3, r2
   1c4de:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
   1c4e0:	2201      	movs	r2, #1
   1c4e2:	f362 0902 	bfi	r9, r2, #0, #3
   1c4e6:	f36f 09c5 	bfc	r9, #3, #3
   1c4ea:	f363 198f 	bfi	r9, r3, #6, #10
   1c4ee:	464a      	mov	r2, r9
   1c4f0:	4809      	ldr	r0, [pc, #36]	; (1c518 <usbd_work_handler+0x3a8>)
   1c4f2:	f7f5 fce5 	bl	11ec0 <log_1>
   1c4f6:	e7cc      	b.n	1c492 <usbd_work_handler+0x322>
}
   1c4f8:	b005      	add	sp, #20
   1c4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4fe:	bf00      	nop
   1c500:	0001cb79 	.word	0x0001cb79
   1c504:	20000774 	.word	0x20000774
   1c508:	20000898 	.word	0x20000898
   1c50c:	2000327c 	.word	0x2000327c
   1c510:	0002c6e8 	.word	0x0002c6e8
   1c514:	0002c610 	.word	0x0002c610
   1c518:	0002ec14 	.word	0x0002ec14

0001c51c <usbd_event_transfer_ctrl>:
{
   1c51c:	b570      	push	{r4, r5, r6, lr}
   1c51e:	b082      	sub	sp, #8
   1c520:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1c522:	7886      	ldrb	r6, [r0, #2]
   1c524:	4630      	mov	r0, r6
   1c526:	f7ff fc5d 	bl	1bde4 <endpoint_ctx>
   1c52a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1c52c:	f016 0f80 	tst.w	r6, #128	; 0x80
   1c530:	d122      	bne.n	1c578 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
   1c532:	78e1      	ldrb	r1, [r4, #3]
   1c534:	2900      	cmp	r1, #0
   1c536:	f000 80d8 	beq.w	1c6ea <usbd_event_transfer_ctrl+0x1ce>
   1c53a:	2901      	cmp	r1, #1
   1c53c:	f040 815c 	bne.w	1c7f8 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1c540:	2200      	movs	r2, #0
   1c542:	2300      	movs	r3, #0
   1c544:	a901      	add	r1, sp, #4
   1c546:	48b6      	ldr	r0, [pc, #728]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c548:	f005 f956 	bl	217f8 <k_mem_slab_alloc>
   1c54c:	2800      	cmp	r0, #0
   1c54e:	f040 8089 	bne.w	1c664 <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
   1c552:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1c554:	6064      	str	r4, [r4, #4]
			if (!ev) {
   1c556:	2c00      	cmp	r4, #0
   1c558:	f000 815f 	beq.w	1c81a <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
   1c55c:	2301      	movs	r3, #1
   1c55e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1c560:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1c562:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1c564:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c566:	4621      	mov	r1, r4
   1c568:	48ae      	ldr	r0, [pc, #696]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c56a:	f00f f9e1 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c56e:	49ae      	ldr	r1, [pc, #696]	; (1c828 <usbd_event_transfer_ctrl+0x30c>)
   1c570:	48ae      	ldr	r0, [pc, #696]	; (1c82c <usbd_event_transfer_ctrl+0x310>)
   1c572:	f00f fabf 	bl	2baf4 <k_work_submit_to_queue>
}
   1c576:	e150      	b.n	1c81a <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
   1c578:	78e1      	ldrb	r1, [r4, #3]
   1c57a:	b1a1      	cbz	r1, 1c5a6 <usbd_event_transfer_ctrl+0x8a>
   1c57c:	2903      	cmp	r1, #3
   1c57e:	f000 814c 	beq.w	1c81a <usbd_event_transfer_ctrl+0x2fe>
   1c582:	4aab      	ldr	r2, [pc, #684]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c584:	4bab      	ldr	r3, [pc, #684]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c586:	1ad2      	subs	r2, r2, r3
   1c588:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1c58a:	f04f 0300 	mov.w	r3, #0
   1c58e:	2001      	movs	r0, #1
   1c590:	f360 0302 	bfi	r3, r0, #0, #3
   1c594:	f36f 03c5 	bfc	r3, #3, #3
   1c598:	f362 138f 	bfi	r3, r2, #6, #10
   1c59c:	4632      	mov	r2, r6
   1c59e:	48a6      	ldr	r0, [pc, #664]	; (1c838 <usbd_event_transfer_ctrl+0x31c>)
   1c5a0:	f7f5 fcc4 	bl	11f2c <log_2>
   1c5a4:	e139      	b.n	1c81a <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1c5a6:	2200      	movs	r2, #0
   1c5a8:	2300      	movs	r3, #0
   1c5aa:	a901      	add	r1, sp, #4
   1c5ac:	489c      	ldr	r0, [pc, #624]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c5ae:	f005 f923 	bl	217f8 <k_mem_slab_alloc>
   1c5b2:	b9a0      	cbnz	r0, 1c5de <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
   1c5b4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1c5b6:	6064      	str	r4, [r4, #4]
			if (!ev) {
   1c5b8:	2c00      	cmp	r4, #0
   1c5ba:	f000 812e 	beq.w	1c81a <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
   1c5be:	2300      	movs	r3, #0
   1c5c0:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1c5c2:	2301      	movs	r3, #1
   1c5c4:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1c5c6:	2303      	movs	r3, #3
   1c5c8:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1c5ca:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c5cc:	4621      	mov	r1, r4
   1c5ce:	4895      	ldr	r0, [pc, #596]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c5d0:	f00f f9ae 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c5d4:	4994      	ldr	r1, [pc, #592]	; (1c828 <usbd_event_transfer_ctrl+0x30c>)
   1c5d6:	4895      	ldr	r0, [pc, #596]	; (1c82c <usbd_event_transfer_ctrl+0x310>)
   1c5d8:	f00f fa8c 	bl	2baf4 <k_work_submit_to_queue>
}
   1c5dc:	e11d      	b.n	1c81a <usbd_event_transfer_ctrl+0x2fe>
   1c5de:	4b94      	ldr	r3, [pc, #592]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c5e0:	4a94      	ldr	r2, [pc, #592]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c5e2:	1a9b      	subs	r3, r3, r2
   1c5e4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1c5e6:	f04f 0100 	mov.w	r1, #0
   1c5ea:	2201      	movs	r2, #1
   1c5ec:	f362 0102 	bfi	r1, r2, #0, #3
   1c5f0:	f36f 01c5 	bfc	r1, #3, #3
   1c5f4:	f363 118f 	bfi	r1, r3, #6, #10
   1c5f8:	4890      	ldr	r0, [pc, #576]	; (1c83c <usbd_event_transfer_ctrl+0x320>)
   1c5fa:	f7f5 fd17 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1c5fe:	e000      	b.n	1c602 <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
   1c600:	b164      	cbz	r4, 1c61c <usbd_event_transfer_ctrl+0x100>
   1c602:	2200      	movs	r2, #0
   1c604:	2300      	movs	r3, #0
   1c606:	4887      	ldr	r0, [pc, #540]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c608:	f005 fafe 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c60c:	4604      	mov	r4, r0
   1c60e:	2800      	cmp	r0, #0
   1c610:	d0f6      	beq.n	1c600 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c612:	1d01      	adds	r1, r0, #4
   1c614:	4882      	ldr	r0, [pc, #520]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c616:	f00f f857 	bl	2b6c8 <k_mem_slab_free>
}
   1c61a:	e7f1      	b.n	1c600 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1c61c:	2200      	movs	r2, #0
   1c61e:	2300      	movs	r3, #0
   1c620:	a901      	add	r1, sp, #4
   1c622:	487f      	ldr	r0, [pc, #508]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c624:	f005 f8e8 	bl	217f8 <k_mem_slab_alloc>
   1c628:	b180      	cbz	r0, 1c64c <usbd_event_transfer_ctrl+0x130>
   1c62a:	4b81      	ldr	r3, [pc, #516]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c62c:	4a81      	ldr	r2, [pc, #516]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c62e:	1a9b      	subs	r3, r3, r2
   1c630:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1c632:	f04f 0100 	mov.w	r1, #0
   1c636:	2201      	movs	r2, #1
   1c638:	f362 0102 	bfi	r1, r2, #0, #3
   1c63c:	f36f 01c5 	bfc	r1, #3, #3
   1c640:	f363 118f 	bfi	r1, r3, #6, #10
   1c644:	487e      	ldr	r0, [pc, #504]	; (1c840 <usbd_event_transfer_ctrl+0x324>)
   1c646:	f7f5 fcf1 	bl	1202c <log_0>
			return NULL;
   1c64a:	e7b5      	b.n	1c5b8 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
   1c64c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1c64e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1c650:	2304      	movs	r3, #4
   1c652:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c654:	4873      	ldr	r0, [pc, #460]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c656:	f00f f96b 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c65a:	4973      	ldr	r1, [pc, #460]	; (1c828 <usbd_event_transfer_ctrl+0x30c>)
   1c65c:	4873      	ldr	r0, [pc, #460]	; (1c82c <usbd_event_transfer_ctrl+0x310>)
   1c65e:	f00f fa49 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1c662:	e7a9      	b.n	1c5b8 <usbd_event_transfer_ctrl+0x9c>
   1c664:	4b72      	ldr	r3, [pc, #456]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c666:	4a73      	ldr	r2, [pc, #460]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c668:	1a9b      	subs	r3, r3, r2
   1c66a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1c66c:	f04f 0100 	mov.w	r1, #0
   1c670:	2201      	movs	r2, #1
   1c672:	f362 0102 	bfi	r1, r2, #0, #3
   1c676:	f36f 01c5 	bfc	r1, #3, #3
   1c67a:	f363 118f 	bfi	r1, r3, #6, #10
   1c67e:	486f      	ldr	r0, [pc, #444]	; (1c83c <usbd_event_transfer_ctrl+0x320>)
   1c680:	f7f5 fcd4 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1c684:	e004      	b.n	1c690 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c686:	1d01      	adds	r1, r0, #4
   1c688:	4865      	ldr	r0, [pc, #404]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c68a:	f00f f81d 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1c68e:	b144      	cbz	r4, 1c6a2 <usbd_event_transfer_ctrl+0x186>
   1c690:	2200      	movs	r2, #0
   1c692:	2300      	movs	r3, #0
   1c694:	4863      	ldr	r0, [pc, #396]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c696:	f005 fab7 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c69a:	4604      	mov	r4, r0
   1c69c:	2800      	cmp	r0, #0
   1c69e:	d1f2      	bne.n	1c686 <usbd_event_transfer_ctrl+0x16a>
   1c6a0:	e7f5      	b.n	1c68e <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1c6a2:	2200      	movs	r2, #0
   1c6a4:	2300      	movs	r3, #0
   1c6a6:	a901      	add	r1, sp, #4
   1c6a8:	485d      	ldr	r0, [pc, #372]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c6aa:	f005 f8a5 	bl	217f8 <k_mem_slab_alloc>
   1c6ae:	b180      	cbz	r0, 1c6d2 <usbd_event_transfer_ctrl+0x1b6>
   1c6b0:	4b5f      	ldr	r3, [pc, #380]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c6b2:	4a60      	ldr	r2, [pc, #384]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c6b4:	1a9b      	subs	r3, r3, r2
   1c6b6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1c6b8:	f04f 0100 	mov.w	r1, #0
   1c6bc:	2201      	movs	r2, #1
   1c6be:	f362 0102 	bfi	r1, r2, #0, #3
   1c6c2:	f36f 01c5 	bfc	r1, #3, #3
   1c6c6:	f363 118f 	bfi	r1, r3, #6, #10
   1c6ca:	485d      	ldr	r0, [pc, #372]	; (1c840 <usbd_event_transfer_ctrl+0x324>)
   1c6cc:	f7f5 fcae 	bl	1202c <log_0>
			return NULL;
   1c6d0:	e741      	b.n	1c556 <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
   1c6d2:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1c6d4:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1c6d6:	2304      	movs	r3, #4
   1c6d8:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c6da:	4852      	ldr	r0, [pc, #328]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c6dc:	f00f f928 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c6e0:	4951      	ldr	r1, [pc, #324]	; (1c828 <usbd_event_transfer_ctrl+0x30c>)
   1c6e2:	4852      	ldr	r0, [pc, #328]	; (1c82c <usbd_event_transfer_ctrl+0x310>)
   1c6e4:	f00f fa06 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1c6e8:	e735      	b.n	1c556 <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1c6ea:	2200      	movs	r2, #0
   1c6ec:	2300      	movs	r3, #0
   1c6ee:	a901      	add	r1, sp, #4
   1c6f0:	484b      	ldr	r0, [pc, #300]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c6f2:	f005 f881 	bl	217f8 <k_mem_slab_alloc>
   1c6f6:	bb20      	cbnz	r0, 1c742 <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
   1c6f8:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
   1c6fa:	6076      	str	r6, [r6, #4]
			if (!ev) {
   1c6fc:	2e00      	cmp	r6, #0
   1c6fe:	f000 808c 	beq.w	1c81a <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
   1c702:	2301      	movs	r3, #1
   1c704:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1c706:	2302      	movs	r3, #2
   1c708:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1c70a:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
   1c70c:	f105 010c 	add.w	r1, r5, #12
   1c710:	78a0      	ldrb	r0, [r4, #2]
   1c712:	f003 fdf7 	bl	20304 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
   1c716:	4601      	mov	r1, r0
   1c718:	2800      	cmp	r0, #0
   1c71a:	d155      	bne.n	1c7c8 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
   1c71c:	4b49      	ldr	r3, [pc, #292]	; (1c844 <usbd_event_transfer_ctrl+0x328>)
   1c71e:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
   1c722:	68ea      	ldr	r2, [r5, #12]
   1c724:	4293      	cmp	r3, r2
   1c726:	d860      	bhi.n	1c7ea <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
   1c728:	4b46      	ldr	r3, [pc, #280]	; (1c844 <usbd_event_transfer_ctrl+0x328>)
   1c72a:	2200      	movs	r2, #0
   1c72c:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
   1c730:	4631      	mov	r1, r6
   1c732:	483c      	ldr	r0, [pc, #240]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c734:	f00f f8fc 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c738:	493b      	ldr	r1, [pc, #236]	; (1c828 <usbd_event_transfer_ctrl+0x30c>)
   1c73a:	483c      	ldr	r0, [pc, #240]	; (1c82c <usbd_event_transfer_ctrl+0x310>)
   1c73c:	f00f f9da 	bl	2baf4 <k_work_submit_to_queue>
}
   1c740:	e06b      	b.n	1c81a <usbd_event_transfer_ctrl+0x2fe>
   1c742:	4b3b      	ldr	r3, [pc, #236]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c744:	4a3b      	ldr	r2, [pc, #236]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c746:	1a9b      	subs	r3, r3, r2
   1c748:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1c74a:	f04f 0100 	mov.w	r1, #0
   1c74e:	2201      	movs	r2, #1
   1c750:	f362 0102 	bfi	r1, r2, #0, #3
   1c754:	f36f 01c5 	bfc	r1, #3, #3
   1c758:	f363 118f 	bfi	r1, r3, #6, #10
   1c75c:	4837      	ldr	r0, [pc, #220]	; (1c83c <usbd_event_transfer_ctrl+0x320>)
   1c75e:	f7f5 fc65 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1c762:	e004      	b.n	1c76e <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c764:	1d01      	adds	r1, r0, #4
   1c766:	482e      	ldr	r0, [pc, #184]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c768:	f00e ffae 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1c76c:	b146      	cbz	r6, 1c780 <usbd_event_transfer_ctrl+0x264>
   1c76e:	2200      	movs	r2, #0
   1c770:	2300      	movs	r3, #0
   1c772:	482c      	ldr	r0, [pc, #176]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c774:	f005 fa48 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c778:	4606      	mov	r6, r0
   1c77a:	2800      	cmp	r0, #0
   1c77c:	d1f2      	bne.n	1c764 <usbd_event_transfer_ctrl+0x248>
   1c77e:	e7f5      	b.n	1c76c <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1c780:	2200      	movs	r2, #0
   1c782:	2300      	movs	r3, #0
   1c784:	a901      	add	r1, sp, #4
   1c786:	4826      	ldr	r0, [pc, #152]	; (1c820 <usbd_event_transfer_ctrl+0x304>)
   1c788:	f005 f836 	bl	217f8 <k_mem_slab_alloc>
   1c78c:	b180      	cbz	r0, 1c7b0 <usbd_event_transfer_ctrl+0x294>
   1c78e:	4b28      	ldr	r3, [pc, #160]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c790:	4a28      	ldr	r2, [pc, #160]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c792:	1a9b      	subs	r3, r3, r2
   1c794:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1c796:	f04f 0100 	mov.w	r1, #0
   1c79a:	2201      	movs	r2, #1
   1c79c:	f362 0102 	bfi	r1, r2, #0, #3
   1c7a0:	f36f 01c5 	bfc	r1, #3, #3
   1c7a4:	f363 118f 	bfi	r1, r3, #6, #10
   1c7a8:	4825      	ldr	r0, [pc, #148]	; (1c840 <usbd_event_transfer_ctrl+0x324>)
   1c7aa:	f7f5 fc3f 	bl	1202c <log_0>
			return NULL;
   1c7ae:	e7a5      	b.n	1c6fc <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
   1c7b0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1c7b2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1c7b4:	2304      	movs	r3, #4
   1c7b6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c7b8:	481a      	ldr	r0, [pc, #104]	; (1c824 <usbd_event_transfer_ctrl+0x308>)
   1c7ba:	f00f f8b9 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c7be:	491a      	ldr	r1, [pc, #104]	; (1c828 <usbd_event_transfer_ctrl+0x30c>)
   1c7c0:	481a      	ldr	r0, [pc, #104]	; (1c82c <usbd_event_transfer_ctrl+0x310>)
   1c7c2:	f00f f997 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1c7c6:	e799      	b.n	1c6fc <usbd_event_transfer_ctrl+0x1e0>
   1c7c8:	4b19      	ldr	r3, [pc, #100]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c7ca:	4a1a      	ldr	r2, [pc, #104]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c7cc:	1a9b      	subs	r3, r3, r2
   1c7ce:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
   1c7d0:	f04f 0200 	mov.w	r2, #0
   1c7d4:	2001      	movs	r0, #1
   1c7d6:	f360 0202 	bfi	r2, r0, #0, #3
   1c7da:	f36f 02c5 	bfc	r2, #3, #3
   1c7de:	f363 128f 	bfi	r2, r3, #6, #10
   1c7e2:	4819      	ldr	r0, [pc, #100]	; (1c848 <usbd_event_transfer_ctrl+0x32c>)
   1c7e4:	f7f5 fb6c 	bl	11ec0 <log_1>
   1c7e8:	e798      	b.n	1c71c <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
   1c7ea:	1a9b      	subs	r3, r3, r2
   1c7ec:	4a15      	ldr	r2, [pc, #84]	; (1c844 <usbd_event_transfer_ctrl+0x328>)
   1c7ee:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
   1c7f2:	f004 f93d 	bl	20a70 <nrfx_usbd_setup_data_clear>
   1c7f6:	e79b      	b.n	1c730 <usbd_event_transfer_ctrl+0x214>
   1c7f8:	4a0d      	ldr	r2, [pc, #52]	; (1c830 <usbd_event_transfer_ctrl+0x314>)
   1c7fa:	4b0e      	ldr	r3, [pc, #56]	; (1c834 <usbd_event_transfer_ctrl+0x318>)
   1c7fc:	1ad2      	subs	r2, r2, r3
   1c7fe:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1c800:	f04f 0300 	mov.w	r3, #0
   1c804:	2001      	movs	r0, #1
   1c806:	f360 0302 	bfi	r3, r0, #0, #3
   1c80a:	f36f 03c5 	bfc	r3, #3, #3
   1c80e:	f362 138f 	bfi	r3, r2, #6, #10
   1c812:	4632      	mov	r2, r6
   1c814:	4808      	ldr	r0, [pc, #32]	; (1c838 <usbd_event_transfer_ctrl+0x31c>)
   1c816:	f7f5 fb89 	bl	11f2c <log_2>
}
   1c81a:	b002      	add	sp, #8
   1c81c:	bd70      	pop	{r4, r5, r6, pc}
   1c81e:	bf00      	nop
   1c820:	20000774 	.word	0x20000774
   1c824:	20000898 	.word	0x20000898
   1c828:	200032a4 	.word	0x200032a4
   1c82c:	20001e10 	.word	0x20001e10
   1c830:	0002c6e8 	.word	0x0002c6e8
   1c834:	0002c610 	.word	0x0002c610
   1c838:	0002ec2c 	.word	0x0002ec2c
   1c83c:	0002eb2c 	.word	0x0002eb2c
   1c840:	0002eb4c 	.word	0x0002eb4c
   1c844:	2000327c 	.word	0x2000327c
   1c848:	0002ec58 	.word	0x0002ec58

0001c84c <usbd_event_transfer_data>:
{
   1c84c:	b570      	push	{r4, r5, r6, lr}
   1c84e:	b082      	sub	sp, #8
   1c850:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
   1c852:	7886      	ldrb	r6, [r0, #2]
   1c854:	4630      	mov	r0, r6
   1c856:	f7ff fac5 	bl	1bde4 <endpoint_ctx>
   1c85a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
   1c85c:	f016 0f80 	tst.w	r6, #128	; 0x80
   1c860:	d122      	bne.n	1c8a8 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
   1c862:	78e1      	ldrb	r1, [r4, #3]
   1c864:	2900      	cmp	r1, #0
   1c866:	f000 80d8 	beq.w	1ca1a <usbd_event_transfer_data+0x1ce>
   1c86a:	2901      	cmp	r1, #1
   1c86c:	f040 815d 	bne.w	1cb2a <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1c870:	2200      	movs	r2, #0
   1c872:	2300      	movs	r3, #0
   1c874:	a901      	add	r1, sp, #4
   1c876:	48b6      	ldr	r0, [pc, #728]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1c878:	f004 ffbe 	bl	217f8 <k_mem_slab_alloc>
   1c87c:	2800      	cmp	r0, #0
   1c87e:	f040 8089 	bne.w	1c994 <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
   1c882:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1c884:	6064      	str	r4, [r4, #4]
			if (!ev) {
   1c886:	2c00      	cmp	r4, #0
   1c888:	f000 8160 	beq.w	1cb4c <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
   1c88c:	2301      	movs	r3, #1
   1c88e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
   1c890:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1c892:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1c894:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c896:	4621      	mov	r1, r4
   1c898:	48ae      	ldr	r0, [pc, #696]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1c89a:	f00f f849 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c89e:	49ae      	ldr	r1, [pc, #696]	; (1cb58 <usbd_event_transfer_data+0x30c>)
   1c8a0:	48ae      	ldr	r0, [pc, #696]	; (1cb5c <usbd_event_transfer_data+0x310>)
   1c8a2:	f00f f927 	bl	2baf4 <k_work_submit_to_queue>
}
   1c8a6:	e151      	b.n	1cb4c <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
   1c8a8:	78e1      	ldrb	r1, [r4, #3]
   1c8aa:	b1a1      	cbz	r1, 1c8d6 <usbd_event_transfer_data+0x8a>
   1c8ac:	2903      	cmp	r1, #3
   1c8ae:	f000 814d 	beq.w	1cb4c <usbd_event_transfer_data+0x300>
   1c8b2:	4aab      	ldr	r2, [pc, #684]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1c8b4:	4bab      	ldr	r3, [pc, #684]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1c8b6:	1ad2      	subs	r2, r2, r3
   1c8b8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1c8ba:	f04f 0300 	mov.w	r3, #0
   1c8be:	2001      	movs	r0, #1
   1c8c0:	f360 0302 	bfi	r3, r0, #0, #3
   1c8c4:	f36f 03c5 	bfc	r3, #3, #3
   1c8c8:	f362 138f 	bfi	r3, r2, #6, #10
   1c8cc:	4632      	mov	r2, r6
   1c8ce:	48a6      	ldr	r0, [pc, #664]	; (1cb68 <usbd_event_transfer_data+0x31c>)
   1c8d0:	f7f5 fb2c 	bl	11f2c <log_2>
   1c8d4:	e13a      	b.n	1cb4c <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1c8d6:	2200      	movs	r2, #0
   1c8d8:	2300      	movs	r3, #0
   1c8da:	a901      	add	r1, sp, #4
   1c8dc:	489c      	ldr	r0, [pc, #624]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1c8de:	f004 ff8b 	bl	217f8 <k_mem_slab_alloc>
   1c8e2:	b9a0      	cbnz	r0, 1c90e <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
   1c8e4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1c8e6:	6064      	str	r4, [r4, #4]
			if (!ev) {
   1c8e8:	2c00      	cmp	r4, #0
   1c8ea:	f000 812f 	beq.w	1cb4c <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
   1c8ee:	2300      	movs	r3, #0
   1c8f0:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
   1c8f2:	2301      	movs	r3, #1
   1c8f4:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
   1c8f6:	2303      	movs	r3, #3
   1c8f8:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1c8fa:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c8fc:	4621      	mov	r1, r4
   1c8fe:	4895      	ldr	r0, [pc, #596]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1c900:	f00f f816 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c904:	4994      	ldr	r1, [pc, #592]	; (1cb58 <usbd_event_transfer_data+0x30c>)
   1c906:	4895      	ldr	r0, [pc, #596]	; (1cb5c <usbd_event_transfer_data+0x310>)
   1c908:	f00f f8f4 	bl	2baf4 <k_work_submit_to_queue>
}
   1c90c:	e11e      	b.n	1cb4c <usbd_event_transfer_data+0x300>
   1c90e:	4b94      	ldr	r3, [pc, #592]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1c910:	4a94      	ldr	r2, [pc, #592]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1c912:	1a9b      	subs	r3, r3, r2
   1c914:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1c916:	f04f 0100 	mov.w	r1, #0
   1c91a:	2201      	movs	r2, #1
   1c91c:	f362 0102 	bfi	r1, r2, #0, #3
   1c920:	f36f 01c5 	bfc	r1, #3, #3
   1c924:	f363 118f 	bfi	r1, r3, #6, #10
   1c928:	4890      	ldr	r0, [pc, #576]	; (1cb6c <usbd_event_transfer_data+0x320>)
   1c92a:	f7f5 fb7f 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1c92e:	e000      	b.n	1c932 <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
   1c930:	b164      	cbz	r4, 1c94c <usbd_event_transfer_data+0x100>
   1c932:	2200      	movs	r2, #0
   1c934:	2300      	movs	r3, #0
   1c936:	4887      	ldr	r0, [pc, #540]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1c938:	f005 f966 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c93c:	4604      	mov	r4, r0
   1c93e:	2800      	cmp	r0, #0
   1c940:	d0f6      	beq.n	1c930 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c942:	1d01      	adds	r1, r0, #4
   1c944:	4882      	ldr	r0, [pc, #520]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1c946:	f00e febf 	bl	2b6c8 <k_mem_slab_free>
}
   1c94a:	e7f1      	b.n	1c930 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1c94c:	2200      	movs	r2, #0
   1c94e:	2300      	movs	r3, #0
   1c950:	a901      	add	r1, sp, #4
   1c952:	487f      	ldr	r0, [pc, #508]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1c954:	f004 ff50 	bl	217f8 <k_mem_slab_alloc>
   1c958:	b180      	cbz	r0, 1c97c <usbd_event_transfer_data+0x130>
   1c95a:	4b81      	ldr	r3, [pc, #516]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1c95c:	4a81      	ldr	r2, [pc, #516]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1c95e:	1a9b      	subs	r3, r3, r2
   1c960:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1c962:	f04f 0100 	mov.w	r1, #0
   1c966:	2201      	movs	r2, #1
   1c968:	f362 0102 	bfi	r1, r2, #0, #3
   1c96c:	f36f 01c5 	bfc	r1, #3, #3
   1c970:	f363 118f 	bfi	r1, r3, #6, #10
   1c974:	487e      	ldr	r0, [pc, #504]	; (1cb70 <usbd_event_transfer_data+0x324>)
   1c976:	f7f5 fb59 	bl	1202c <log_0>
			return NULL;
   1c97a:	e7b5      	b.n	1c8e8 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
   1c97c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1c97e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1c980:	2304      	movs	r3, #4
   1c982:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1c984:	4873      	ldr	r0, [pc, #460]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1c986:	f00e ffd3 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1c98a:	4973      	ldr	r1, [pc, #460]	; (1cb58 <usbd_event_transfer_data+0x30c>)
   1c98c:	4873      	ldr	r0, [pc, #460]	; (1cb5c <usbd_event_transfer_data+0x310>)
   1c98e:	f00f f8b1 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1c992:	e7a9      	b.n	1c8e8 <usbd_event_transfer_data+0x9c>
   1c994:	4b72      	ldr	r3, [pc, #456]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1c996:	4a73      	ldr	r2, [pc, #460]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1c998:	1a9b      	subs	r3, r3, r2
   1c99a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1c99c:	f04f 0100 	mov.w	r1, #0
   1c9a0:	2201      	movs	r2, #1
   1c9a2:	f362 0102 	bfi	r1, r2, #0, #3
   1c9a6:	f36f 01c5 	bfc	r1, #3, #3
   1c9aa:	f363 118f 	bfi	r1, r3, #6, #10
   1c9ae:	486f      	ldr	r0, [pc, #444]	; (1cb6c <usbd_event_transfer_data+0x320>)
   1c9b0:	f7f5 fb3c 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1c9b4:	e004      	b.n	1c9c0 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1c9b6:	1d01      	adds	r1, r0, #4
   1c9b8:	4865      	ldr	r0, [pc, #404]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1c9ba:	f00e fe85 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1c9be:	b144      	cbz	r4, 1c9d2 <usbd_event_transfer_data+0x186>
   1c9c0:	2200      	movs	r2, #0
   1c9c2:	2300      	movs	r3, #0
   1c9c4:	4863      	ldr	r0, [pc, #396]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1c9c6:	f005 f91f 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1c9ca:	4604      	mov	r4, r0
   1c9cc:	2800      	cmp	r0, #0
   1c9ce:	d1f2      	bne.n	1c9b6 <usbd_event_transfer_data+0x16a>
   1c9d0:	e7f5      	b.n	1c9be <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1c9d2:	2200      	movs	r2, #0
   1c9d4:	2300      	movs	r3, #0
   1c9d6:	a901      	add	r1, sp, #4
   1c9d8:	485d      	ldr	r0, [pc, #372]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1c9da:	f004 ff0d 	bl	217f8 <k_mem_slab_alloc>
   1c9de:	b180      	cbz	r0, 1ca02 <usbd_event_transfer_data+0x1b6>
   1c9e0:	4b5f      	ldr	r3, [pc, #380]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1c9e2:	4a60      	ldr	r2, [pc, #384]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1c9e4:	1a9b      	subs	r3, r3, r2
   1c9e6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1c9e8:	f04f 0100 	mov.w	r1, #0
   1c9ec:	2201      	movs	r2, #1
   1c9ee:	f362 0102 	bfi	r1, r2, #0, #3
   1c9f2:	f36f 01c5 	bfc	r1, #3, #3
   1c9f6:	f363 118f 	bfi	r1, r3, #6, #10
   1c9fa:	485d      	ldr	r0, [pc, #372]	; (1cb70 <usbd_event_transfer_data+0x324>)
   1c9fc:	f7f5 fb16 	bl	1202c <log_0>
			return NULL;
   1ca00:	e741      	b.n	1c886 <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
   1ca02:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1ca04:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1ca06:	2304      	movs	r3, #4
   1ca08:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1ca0a:	4852      	ldr	r0, [pc, #328]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1ca0c:	f00e ff90 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1ca10:	4951      	ldr	r1, [pc, #324]	; (1cb58 <usbd_event_transfer_data+0x30c>)
   1ca12:	4852      	ldr	r0, [pc, #328]	; (1cb5c <usbd_event_transfer_data+0x310>)
   1ca14:	f00f f86e 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1ca18:	e735      	b.n	1c886 <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1ca1a:	2200      	movs	r2, #0
   1ca1c:	2300      	movs	r3, #0
   1ca1e:	a901      	add	r1, sp, #4
   1ca20:	484b      	ldr	r0, [pc, #300]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1ca22:	f004 fee9 	bl	217f8 <k_mem_slab_alloc>
   1ca26:	b9f0      	cbnz	r0, 1ca66 <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
   1ca28:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
   1ca2a:	6076      	str	r6, [r6, #4]
			if (!ev) {
   1ca2c:	2e00      	cmp	r6, #0
   1ca2e:	f000 808d 	beq.w	1cb4c <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
   1ca32:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
   1ca34:	f994 2002 	ldrsb.w	r2, [r4, #2]
   1ca38:	2a00      	cmp	r2, #0
   1ca3a:	db57      	blt.n	1caec <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
   1ca3c:	f013 0f08 	tst.w	r3, #8
   1ca40:	d067      	beq.n	1cb12 <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
   1ca42:	4b4c      	ldr	r3, [pc, #304]	; (1cb74 <usbd_event_transfer_data+0x328>)
   1ca44:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
   1ca48:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
   1ca4a:	2301      	movs	r3, #1
   1ca4c:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
   1ca4e:	2302      	movs	r3, #2
   1ca50:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
   1ca52:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
   1ca54:	4631      	mov	r1, r6
   1ca56:	483f      	ldr	r0, [pc, #252]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1ca58:	f00e ff6a 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1ca5c:	493e      	ldr	r1, [pc, #248]	; (1cb58 <usbd_event_transfer_data+0x30c>)
   1ca5e:	483f      	ldr	r0, [pc, #252]	; (1cb5c <usbd_event_transfer_data+0x310>)
   1ca60:	f00f f848 	bl	2baf4 <k_work_submit_to_queue>
}
   1ca64:	e072      	b.n	1cb4c <usbd_event_transfer_data+0x300>
   1ca66:	4b3e      	ldr	r3, [pc, #248]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1ca68:	4a3e      	ldr	r2, [pc, #248]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1ca6a:	1a9b      	subs	r3, r3, r2
   1ca6c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1ca6e:	f04f 0100 	mov.w	r1, #0
   1ca72:	2201      	movs	r2, #1
   1ca74:	f362 0102 	bfi	r1, r2, #0, #3
   1ca78:	f36f 01c5 	bfc	r1, #3, #3
   1ca7c:	f363 118f 	bfi	r1, r3, #6, #10
   1ca80:	483a      	ldr	r0, [pc, #232]	; (1cb6c <usbd_event_transfer_data+0x320>)
   1ca82:	f7f5 fad3 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1ca86:	e004      	b.n	1ca92 <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1ca88:	1d01      	adds	r1, r0, #4
   1ca8a:	4831      	ldr	r0, [pc, #196]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1ca8c:	f00e fe1c 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1ca90:	b146      	cbz	r6, 1caa4 <usbd_event_transfer_data+0x258>
   1ca92:	2200      	movs	r2, #0
   1ca94:	2300      	movs	r3, #0
   1ca96:	482f      	ldr	r0, [pc, #188]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1ca98:	f005 f8b6 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1ca9c:	4606      	mov	r6, r0
   1ca9e:	2800      	cmp	r0, #0
   1caa0:	d1f2      	bne.n	1ca88 <usbd_event_transfer_data+0x23c>
   1caa2:	e7f5      	b.n	1ca90 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1caa4:	2200      	movs	r2, #0
   1caa6:	2300      	movs	r3, #0
   1caa8:	a901      	add	r1, sp, #4
   1caaa:	4829      	ldr	r0, [pc, #164]	; (1cb50 <usbd_event_transfer_data+0x304>)
   1caac:	f004 fea4 	bl	217f8 <k_mem_slab_alloc>
   1cab0:	b180      	cbz	r0, 1cad4 <usbd_event_transfer_data+0x288>
   1cab2:	4b2b      	ldr	r3, [pc, #172]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1cab4:	4a2b      	ldr	r2, [pc, #172]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1cab6:	1a9b      	subs	r3, r3, r2
   1cab8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1caba:	f04f 0100 	mov.w	r1, #0
   1cabe:	2201      	movs	r2, #1
   1cac0:	f362 0102 	bfi	r1, r2, #0, #3
   1cac4:	f36f 01c5 	bfc	r1, #3, #3
   1cac8:	f363 118f 	bfi	r1, r3, #6, #10
   1cacc:	4828      	ldr	r0, [pc, #160]	; (1cb70 <usbd_event_transfer_data+0x324>)
   1cace:	f7f5 faad 	bl	1202c <log_0>
			return NULL;
   1cad2:	e7ab      	b.n	1ca2c <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
   1cad4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1cad6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1cad8:	2304      	movs	r3, #4
   1cada:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1cadc:	481d      	ldr	r0, [pc, #116]	; (1cb54 <usbd_event_transfer_data+0x308>)
   1cade:	f00e ff27 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1cae2:	491d      	ldr	r1, [pc, #116]	; (1cb58 <usbd_event_transfer_data+0x30c>)
   1cae4:	481d      	ldr	r0, [pc, #116]	; (1cb5c <usbd_event_transfer_data+0x310>)
   1cae6:	f00f f805 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1caea:	e79f      	b.n	1ca2c <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
   1caec:	f013 0f08 	tst.w	r3, #8
   1caf0:	d003      	beq.n	1cafa <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
   1caf2:	4b20      	ldr	r3, [pc, #128]	; (1cb74 <usbd_event_transfer_data+0x328>)
   1caf4:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
   1caf8:	e7a6      	b.n	1ca48 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1cafa:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
   1cafe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1cb02:	009b      	lsls	r3, r3, #2
   1cb04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cb08:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1cb0c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
   1cb10:	e79a      	b.n	1ca48 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   1cb12:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
   1cb16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1cb1a:	009b      	lsls	r3, r3, #2
   1cb1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cb20:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   1cb24:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
   1cb28:	e78e      	b.n	1ca48 <usbd_event_transfer_data+0x1fc>
   1cb2a:	4a0d      	ldr	r2, [pc, #52]	; (1cb60 <usbd_event_transfer_data+0x314>)
   1cb2c:	4b0d      	ldr	r3, [pc, #52]	; (1cb64 <usbd_event_transfer_data+0x318>)
   1cb2e:	1ad2      	subs	r2, r2, r3
   1cb30:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
   1cb32:	f04f 0300 	mov.w	r3, #0
   1cb36:	2001      	movs	r0, #1
   1cb38:	f360 0302 	bfi	r3, r0, #0, #3
   1cb3c:	f36f 03c5 	bfc	r3, #3, #3
   1cb40:	f362 138f 	bfi	r3, r2, #6, #10
   1cb44:	4632      	mov	r2, r6
   1cb46:	4808      	ldr	r0, [pc, #32]	; (1cb68 <usbd_event_transfer_data+0x31c>)
   1cb48:	f7f5 f9f0 	bl	11f2c <log_2>
}
   1cb4c:	b002      	add	sp, #8
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	20000774 	.word	0x20000774
   1cb54:	20000898 	.word	0x20000898
   1cb58:	200032a4 	.word	0x200032a4
   1cb5c:	20001e10 	.word	0x20001e10
   1cb60:	0002c6e8 	.word	0x0002c6e8
   1cb64:	0002c610 	.word	0x0002c610
   1cb68:	0002ec2c 	.word	0x0002ec2c
   1cb6c:	0002eb2c 	.word	0x0002eb2c
   1cb70:	0002eb4c 	.word	0x0002eb4c
   1cb74:	40027000 	.word	0x40027000

0001cb78 <usbd_event_handler>:
{
   1cb78:	b510      	push	{r4, lr}
   1cb7a:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
   1cb7c:	2300      	movs	r3, #0
   1cb7e:	9303      	str	r3, [sp, #12]
   1cb80:	9304      	str	r3, [sp, #16]
   1cb82:	9305      	str	r3, [sp, #20]
   1cb84:	9306      	str	r3, [sp, #24]
   1cb86:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
   1cb88:	7803      	ldrb	r3, [r0, #0]
   1cb8a:	3b01      	subs	r3, #1
   1cb8c:	2b05      	cmp	r3, #5
   1cb8e:	d826      	bhi.n	1cbde <usbd_event_handler+0x66>
   1cb90:	e8df f003 	tbb	[pc, r3]
   1cb94:	2e270335 	.word	0x2e270335
   1cb98:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
   1cb9a:	2300      	movs	r3, #0
   1cb9c:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
   1cba0:	2303      	movs	r3, #3
   1cba2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1cba6:	2200      	movs	r2, #0
   1cba8:	2300      	movs	r3, #0
   1cbaa:	a901      	add	r1, sp, #4
   1cbac:	4850      	ldr	r0, [pc, #320]	; (1ccf0 <usbd_event_handler+0x178>)
   1cbae:	f004 fe23 	bl	217f8 <k_mem_slab_alloc>
   1cbb2:	2800      	cmp	r0, #0
   1cbb4:	d159      	bne.n	1cc6a <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
   1cbb6:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
   1cbb8:	6064      	str	r4, [r4, #4]
		if (!ev) {
   1cbba:	b184      	cbz	r4, 1cbde <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
   1cbbc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1cbc0:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
   1cbc2:	f104 0308 	add.w	r3, r4, #8
   1cbc6:	9906      	ldr	r1, [sp, #24]
   1cbc8:	9805      	ldr	r0, [sp, #20]
   1cbca:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
   1cbce:	4621      	mov	r1, r4
   1cbd0:	4848      	ldr	r0, [pc, #288]	; (1ccf4 <usbd_event_handler+0x17c>)
   1cbd2:	f00e fead 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1cbd6:	4948      	ldr	r1, [pc, #288]	; (1ccf8 <usbd_event_handler+0x180>)
   1cbd8:	4848      	ldr	r0, [pc, #288]	; (1ccfc <usbd_event_handler+0x184>)
   1cbda:	f00e ff8b 	bl	2baf4 <k_work_submit_to_queue>
}
   1cbde:	b008      	add	sp, #32
   1cbe0:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
   1cbe2:	2300      	movs	r3, #0
   1cbe4:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1cbe8:	2304      	movs	r3, #4
   1cbea:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   1cbee:	e7da      	b.n	1cba6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
   1cbf0:	2300      	movs	r3, #0
   1cbf2:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
   1cbf6:	2304      	movs	r3, #4
   1cbf8:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
   1cbfc:	e7d3      	b.n	1cba6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
   1cbfe:	2302      	movs	r3, #2
   1cc00:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
   1cc04:	e7cf      	b.n	1cba6 <usbd_event_handler+0x2e>
   1cc06:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
   1cc08:	7880      	ldrb	r0, [r0, #2]
   1cc0a:	f7ff f8eb 	bl	1bde4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
   1cc0e:	7a83      	ldrb	r3, [r0, #10]
   1cc10:	2b01      	cmp	r3, #1
   1cc12:	d00e      	beq.n	1cc32 <usbd_event_handler+0xba>
   1cc14:	d805      	bhi.n	1cc22 <usbd_event_handler+0xaa>
   1cc16:	2b00      	cmp	r3, #0
   1cc18:	d1e1      	bne.n	1cbde <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
   1cc1a:	4620      	mov	r0, r4
   1cc1c:	f7ff fc7e 	bl	1c51c <usbd_event_transfer_ctrl>
	if (put_evt) {
   1cc20:	e7dd      	b.n	1cbde <usbd_event_handler+0x66>
   1cc22:	3b02      	subs	r3, #2
   1cc24:	b2db      	uxtb	r3, r3
   1cc26:	2b01      	cmp	r3, #1
   1cc28:	d8d9      	bhi.n	1cbde <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
   1cc2a:	4620      	mov	r0, r4
   1cc2c:	f7ff fe0e 	bl	1c84c <usbd_event_transfer_data>
	if (put_evt) {
   1cc30:	e7d5      	b.n	1cbde <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
   1cc32:	4620      	mov	r0, r4
   1cc34:	f7ff fe0a 	bl	1c84c <usbd_event_transfer_data>
	if (put_evt) {
   1cc38:	e7d1      	b.n	1cbde <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
   1cc3a:	a801      	add	r0, sp, #4
   1cc3c:	f003 feec 	bl	20a18 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
   1cc40:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1cc44:	2b05      	cmp	r3, #5
   1cc46:	d00a      	beq.n	1cc5e <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
   1cc48:	2000      	movs	r0, #0
   1cc4a:	f7ff f8cb 	bl	1bde4 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
   1cc4e:	2301      	movs	r3, #1
   1cc50:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
   1cc54:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
   1cc56:	2300      	movs	r3, #0
   1cc58:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
   1cc5c:	e7a3      	b.n	1cba6 <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
   1cc5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1cc62:	f013 0f60 	tst.w	r3, #96	; 0x60
   1cc66:	d0ba      	beq.n	1cbde <usbd_event_handler+0x66>
   1cc68:	e7ee      	b.n	1cc48 <usbd_event_handler+0xd0>
   1cc6a:	4b25      	ldr	r3, [pc, #148]	; (1cd00 <usbd_event_handler+0x188>)
   1cc6c:	4a25      	ldr	r2, [pc, #148]	; (1cd04 <usbd_event_handler+0x18c>)
   1cc6e:	1a9b      	subs	r3, r3, r2
   1cc70:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1cc72:	f04f 0100 	mov.w	r1, #0
   1cc76:	2201      	movs	r2, #1
   1cc78:	f362 0102 	bfi	r1, r2, #0, #3
   1cc7c:	f36f 01c5 	bfc	r1, #3, #3
   1cc80:	f363 118f 	bfi	r1, r3, #6, #10
   1cc84:	4820      	ldr	r0, [pc, #128]	; (1cd08 <usbd_event_handler+0x190>)
   1cc86:	f7f5 f9d1 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1cc8a:	e004      	b.n	1cc96 <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1cc8c:	1d01      	adds	r1, r0, #4
   1cc8e:	4818      	ldr	r0, [pc, #96]	; (1ccf0 <usbd_event_handler+0x178>)
   1cc90:	f00e fd1a 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1cc94:	b144      	cbz	r4, 1cca8 <usbd_event_handler+0x130>
   1cc96:	2200      	movs	r2, #0
   1cc98:	2300      	movs	r3, #0
   1cc9a:	4816      	ldr	r0, [pc, #88]	; (1ccf4 <usbd_event_handler+0x17c>)
   1cc9c:	f004 ffb4 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1cca0:	4604      	mov	r4, r0
   1cca2:	2800      	cmp	r0, #0
   1cca4:	d1f2      	bne.n	1cc8c <usbd_event_handler+0x114>
   1cca6:	e7f5      	b.n	1cc94 <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1cca8:	2200      	movs	r2, #0
   1ccaa:	2300      	movs	r3, #0
   1ccac:	a901      	add	r1, sp, #4
   1ccae:	4810      	ldr	r0, [pc, #64]	; (1ccf0 <usbd_event_handler+0x178>)
   1ccb0:	f004 fda2 	bl	217f8 <k_mem_slab_alloc>
   1ccb4:	b180      	cbz	r0, 1ccd8 <usbd_event_handler+0x160>
   1ccb6:	4b12      	ldr	r3, [pc, #72]	; (1cd00 <usbd_event_handler+0x188>)
   1ccb8:	4a12      	ldr	r2, [pc, #72]	; (1cd04 <usbd_event_handler+0x18c>)
   1ccba:	1a9b      	subs	r3, r3, r2
   1ccbc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1ccbe:	f04f 0100 	mov.w	r1, #0
   1ccc2:	2201      	movs	r2, #1
   1ccc4:	f362 0102 	bfi	r1, r2, #0, #3
   1ccc8:	f36f 01c5 	bfc	r1, #3, #3
   1cccc:	f363 118f 	bfi	r1, r3, #6, #10
   1ccd0:	480e      	ldr	r0, [pc, #56]	; (1cd0c <usbd_event_handler+0x194>)
   1ccd2:	f7f5 f9ab 	bl	1202c <log_0>
			return NULL;
   1ccd6:	e770      	b.n	1cbba <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
   1ccd8:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1ccda:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1ccdc:	2304      	movs	r3, #4
   1ccde:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1cce0:	4804      	ldr	r0, [pc, #16]	; (1ccf4 <usbd_event_handler+0x17c>)
   1cce2:	f00e fe25 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1cce6:	4904      	ldr	r1, [pc, #16]	; (1ccf8 <usbd_event_handler+0x180>)
   1cce8:	4804      	ldr	r0, [pc, #16]	; (1ccfc <usbd_event_handler+0x184>)
   1ccea:	f00e ff03 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1ccee:	e764      	b.n	1cbba <usbd_event_handler+0x42>
   1ccf0:	20000774 	.word	0x20000774
   1ccf4:	20000898 	.word	0x20000898
   1ccf8:	200032a4 	.word	0x200032a4
   1ccfc:	20001e10 	.word	0x20001e10
   1cd00:	0002c6e8 	.word	0x0002c6e8
   1cd04:	0002c610 	.word	0x0002c610
   1cd08:	0002eb2c 	.word	0x0002eb2c
   1cd0c:	0002eb4c 	.word	0x0002eb4c

0001cd10 <usb_dc_attach>:
{
   1cd10:	b510      	push	{r4, lr}
	if (ctx->attached) {
   1cd12:	4b1d      	ldr	r3, [pc, #116]	; (1cd88 <usb_dc_attach+0x78>)
   1cd14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1cd18:	b113      	cbz	r3, 1cd20 <usb_dc_attach+0x10>
		return 0;
   1cd1a:	2400      	movs	r4, #0
}
   1cd1c:	4620      	mov	r0, r4
   1cd1e:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
   1cd20:	4c19      	ldr	r4, [pc, #100]	; (1cd88 <usb_dc_attach+0x78>)
   1cd22:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1cd26:	f00e fd6e 	bl	2b806 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
   1cd2a:	2000      	movs	r0, #0
   1cd2c:	f000 fd4a 	bl	1d7c4 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
   1cd30:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1cd32:	2200      	movs	r2, #0
   1cd34:	2101      	movs	r1, #1
   1cd36:	2027      	movs	r0, #39	; 0x27
   1cd38:	f7f8 fa38 	bl	151ac <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
   1cd3c:	4813      	ldr	r0, [pc, #76]	; (1cd8c <usb_dc_attach+0x7c>)
   1cd3e:	f003 f9f3 	bl	20128 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
   1cd42:	4b13      	ldr	r3, [pc, #76]	; (1cd90 <usb_dc_attach+0x80>)
   1cd44:	4298      	cmp	r0, r3
   1cd46:	d11b      	bne.n	1cd80 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
   1cd48:	f00e fb7b 	bl	2b442 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
   1cd4c:	f7ff f87e 	bl	1be4c <eps_ctx_init>
	if (ret == 0) {
   1cd50:	4604      	mov	r4, r0
   1cd52:	b918      	cbnz	r0, 1cd5c <usb_dc_attach+0x4c>
		ctx->attached = true;
   1cd54:	4b0c      	ldr	r3, [pc, #48]	; (1cd88 <usb_dc_attach+0x78>)
   1cd56:	2201      	movs	r2, #1
   1cd58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1cd5c:	4b0d      	ldr	r3, [pc, #52]	; (1cd94 <usb_dc_attach+0x84>)
   1cd5e:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
   1cd60:	b11b      	cbz	r3, 1cd6a <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1cd62:	490d      	ldr	r1, [pc, #52]	; (1cd98 <usb_dc_attach+0x88>)
   1cd64:	480d      	ldr	r0, [pc, #52]	; (1cd9c <usb_dc_attach+0x8c>)
   1cd66:	f00e fec5 	bl	2baf4 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
   1cd6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1cd6e:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
   1cd72:	f013 0f01 	tst.w	r3, #1
   1cd76:	d0d1      	beq.n	1cd1c <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
   1cd78:	2000      	movs	r0, #0
   1cd7a:	f7ff f935 	bl	1bfe8 <usb_dc_power_event_handler>
   1cd7e:	e7cd      	b.n	1cd1c <usb_dc_attach+0xc>
		return -EIO;
   1cd80:	f06f 0404 	mvn.w	r4, #4
   1cd84:	e7ca      	b.n	1cd1c <usb_dc_attach+0xc>
   1cd86:	bf00      	nop
   1cd88:	2000327c 	.word	0x2000327c
   1cd8c:	0001cb79 	.word	0x0001cb79
   1cd90:	0bad0000 	.word	0x0bad0000
   1cd94:	20000898 	.word	0x20000898
   1cd98:	200032a4 	.word	0x200032a4
   1cd9c:	20001e10 	.word	0x20001e10

0001cda0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
   1cda0:	4b07      	ldr	r3, [pc, #28]	; (1cdc0 <usb_dc_set_address+0x20>)
   1cda2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1cda6:	b12b      	cbz	r3, 1cdb4 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
   1cda8:	4b05      	ldr	r3, [pc, #20]	; (1cdc0 <usb_dc_set_address+0x20>)
   1cdaa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1cdae:	b123      	cbz	r3, 1cdba <usb_dc_set_address+0x1a>
	return 0;
   1cdb0:	2000      	movs	r0, #0
   1cdb2:	4770      	bx	lr
		return -ENODEV;
   1cdb4:	f06f 0012 	mvn.w	r0, #18
   1cdb8:	4770      	bx	lr
   1cdba:	f06f 0012 	mvn.w	r0, #18
}
   1cdbe:	4770      	bx	lr
   1cdc0:	2000327c 	.word	0x2000327c

0001cdc4 <usb_dc_ep_check_cap>:
{
   1cdc4:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
   1cdc6:	7801      	ldrb	r1, [r0, #0]
   1cdc8:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
   1cdcc:	7903      	ldrb	r3, [r0, #4]
   1cdce:	b903      	cbnz	r3, 1cdd2 <usb_dc_ep_check_cap+0xe>
   1cdd0:	b92a      	cbnz	r2, 1cdde <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
   1cdd2:	2a08      	cmp	r2, #8
   1cdd4:	d816      	bhi.n	1ce04 <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   1cdd6:	2b01      	cmp	r3, #1
   1cdd8:	d027      	beq.n	1ce2a <usb_dc_ep_check_cap+0x66>
	return 0;
   1cdda:	2000      	movs	r0, #0
}
   1cddc:	bd08      	pop	{r3, pc}
   1cdde:	4b1f      	ldr	r3, [pc, #124]	; (1ce5c <usb_dc_ep_check_cap+0x98>)
   1cde0:	4a1f      	ldr	r2, [pc, #124]	; (1ce60 <usb_dc_ep_check_cap+0x9c>)
   1cde2:	1a9b      	subs	r3, r3, r2
   1cde4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
   1cde6:	f04f 0100 	mov.w	r1, #0
   1cdea:	2201      	movs	r2, #1
   1cdec:	f362 0102 	bfi	r1, r2, #0, #3
   1cdf0:	f36f 01c5 	bfc	r1, #3, #3
   1cdf4:	f363 118f 	bfi	r1, r3, #6, #10
   1cdf8:	481a      	ldr	r0, [pc, #104]	; (1ce64 <usb_dc_ep_check_cap+0xa0>)
   1cdfa:	f7f5 f917 	bl	1202c <log_0>
		return -1;
   1cdfe:	f04f 30ff 	mov.w	r0, #4294967295
   1ce02:	e7eb      	b.n	1cddc <usb_dc_ep_check_cap+0x18>
   1ce04:	4b15      	ldr	r3, [pc, #84]	; (1ce5c <usb_dc_ep_check_cap+0x98>)
   1ce06:	4a16      	ldr	r2, [pc, #88]	; (1ce60 <usb_dc_ep_check_cap+0x9c>)
   1ce08:	1a9b      	subs	r3, r3, r2
   1ce0a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
   1ce0c:	f04f 0100 	mov.w	r1, #0
   1ce10:	2201      	movs	r2, #1
   1ce12:	f362 0102 	bfi	r1, r2, #0, #3
   1ce16:	f36f 01c5 	bfc	r1, #3, #3
   1ce1a:	f363 118f 	bfi	r1, r3, #6, #10
   1ce1e:	4812      	ldr	r0, [pc, #72]	; (1ce68 <usb_dc_ep_check_cap+0xa4>)
   1ce20:	f7f5 f904 	bl	1202c <log_0>
		return -1;
   1ce24:	f04f 30ff 	mov.w	r0, #4294967295
   1ce28:	e7d8      	b.n	1cddc <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
   1ce2a:	f011 0f08 	tst.w	r1, #8
   1ce2e:	d001      	beq.n	1ce34 <usb_dc_ep_check_cap+0x70>
	return 0;
   1ce30:	2000      	movs	r0, #0
   1ce32:	e7d3      	b.n	1cddc <usb_dc_ep_check_cap+0x18>
   1ce34:	4b09      	ldr	r3, [pc, #36]	; (1ce5c <usb_dc_ep_check_cap+0x98>)
   1ce36:	4a0a      	ldr	r2, [pc, #40]	; (1ce60 <usb_dc_ep_check_cap+0x9c>)
   1ce38:	1a9b      	subs	r3, r3, r2
   1ce3a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("invalid endpoint type");
   1ce3c:	f04f 0100 	mov.w	r1, #0
   1ce40:	2202      	movs	r2, #2
   1ce42:	f362 0102 	bfi	r1, r2, #0, #3
   1ce46:	f36f 01c5 	bfc	r1, #3, #3
   1ce4a:	f363 118f 	bfi	r1, r3, #6, #10
   1ce4e:	4807      	ldr	r0, [pc, #28]	; (1ce6c <usb_dc_ep_check_cap+0xa8>)
   1ce50:	f7f5 f8ec 	bl	1202c <log_0>
		return -1;
   1ce54:	f04f 30ff 	mov.w	r0, #4294967295
   1ce58:	e7c0      	b.n	1cddc <usb_dc_ep_check_cap+0x18>
   1ce5a:	bf00      	nop
   1ce5c:	0002c6e8 	.word	0x0002c6e8
   1ce60:	0002c610 	.word	0x0002c610
   1ce64:	0002ec78 	.word	0x0002ec78
   1ce68:	0002ec98 	.word	0x0002ec98
   1ce6c:	0002ecb8 	.word	0x0002ecb8

0001ce70 <usb_dc_ep_configure>:
{
   1ce70:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1ce72:	4b1a      	ldr	r3, [pc, #104]	; (1cedc <usb_dc_ep_configure+0x6c>)
   1ce74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   1ce78:	b353      	cbz	r3, 1ced0 <usb_dc_ep_configure+0x60>
   1ce7a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
   1ce7c:	7805      	ldrb	r5, [r0, #0]
   1ce7e:	4628      	mov	r0, r5
   1ce80:	f7fe ffb0 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1ce84:	b338      	cbz	r0, 1ced6 <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
   1ce86:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
   1ce88:	7922      	ldrb	r2, [r4, #4]
   1ce8a:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
   1ce8c:	8862      	ldrh	r2, [r4, #2]
   1ce8e:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
   1ce90:	7820      	ldrb	r0, [r4, #0]
   1ce92:	f010 0f08 	tst.w	r0, #8
   1ce96:	d103      	bne.n	1cea0 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
   1ce98:	8863      	ldrh	r3, [r4, #2]
   1ce9a:	1e5a      	subs	r2, r3, #1
   1ce9c:	4213      	tst	r3, r2
   1ce9e:	d104      	bne.n	1ceaa <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
   1cea0:	8861      	ldrh	r1, [r4, #2]
   1cea2:	f003 f931 	bl	20108 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
   1cea6:	2000      	movs	r0, #0
}
   1cea8:	bd38      	pop	{r3, r4, r5, pc}
   1ceaa:	4b0d      	ldr	r3, [pc, #52]	; (1cee0 <usb_dc_ep_configure+0x70>)
   1ceac:	4a0d      	ldr	r2, [pc, #52]	; (1cee4 <usb_dc_ep_configure+0x74>)
   1ceae:	1a9b      	subs	r3, r3, r2
   1ceb0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
   1ceb2:	f04f 0100 	mov.w	r1, #0
   1ceb6:	2201      	movs	r2, #1
   1ceb8:	f362 0102 	bfi	r1, r2, #0, #3
   1cebc:	f36f 01c5 	bfc	r1, #3, #3
   1cec0:	f363 118f 	bfi	r1, r3, #6, #10
   1cec4:	4808      	ldr	r0, [pc, #32]	; (1cee8 <usb_dc_ep_configure+0x78>)
   1cec6:	f7f5 f8b1 	bl	1202c <log_0>
			return -EINVAL;
   1ceca:	f06f 0015 	mvn.w	r0, #21
   1cece:	e7eb      	b.n	1cea8 <usb_dc_ep_configure+0x38>
		return -ENODEV;
   1ced0:	f06f 0012 	mvn.w	r0, #18
   1ced4:	e7e8      	b.n	1cea8 <usb_dc_ep_configure+0x38>
		return -EINVAL;
   1ced6:	f06f 0015 	mvn.w	r0, #21
   1ceda:	e7e5      	b.n	1cea8 <usb_dc_ep_configure+0x38>
   1cedc:	2000327c 	.word	0x2000327c
   1cee0:	0002c6e8 	.word	0x0002c6e8
   1cee4:	0002c610 	.word	0x0002c610
   1cee8:	0002ecd0 	.word	0x0002ecd0

0001ceec <usb_dc_ep_set_stall>:
{
   1ceec:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1ceee:	4b1e      	ldr	r3, [pc, #120]	; (1cf68 <usb_dc_ep_set_stall+0x7c>)
   1cef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1cef4:	b37b      	cbz	r3, 1cf56 <usb_dc_ep_set_stall+0x6a>
   1cef6:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   1cef8:	4b1b      	ldr	r3, [pc, #108]	; (1cf68 <usb_dc_ep_set_stall+0x7c>)
   1cefa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1cefe:	b36b      	cbz	r3, 1cf5c <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
   1cf00:	f7fe ff70 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1cf04:	4605      	mov	r5, r0
   1cf06:	b360      	cbz	r0, 1cf62 <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
   1cf08:	7a83      	ldrb	r3, [r0, #10]
   1cf0a:	2b01      	cmp	r3, #1
   1cf0c:	d010      	beq.n	1cf30 <usb_dc_ep_set_stall+0x44>
   1cf0e:	d807      	bhi.n	1cf20 <usb_dc_ep_set_stall+0x34>
   1cf10:	b90b      	cbnz	r3, 1cf16 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
   1cf12:	f003 fe07 	bl	20b24 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
   1cf16:	2000      	movs	r0, #0
   1cf18:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1cf1a:	696b      	ldr	r3, [r5, #20]
   1cf1c:	61ab      	str	r3, [r5, #24]
}
   1cf1e:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
   1cf20:	3b02      	subs	r3, #2
   1cf22:	b2db      	uxtb	r3, r3
   1cf24:	2b01      	cmp	r3, #1
   1cf26:	d8f6      	bhi.n	1cf16 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
   1cf28:	4620      	mov	r0, r4
   1cf2a:	f003 fd41 	bl	209b0 <nrfx_usbd_ep_stall>
		break;
   1cf2e:	e7f2      	b.n	1cf16 <usb_dc_ep_set_stall+0x2a>
   1cf30:	4b0e      	ldr	r3, [pc, #56]	; (1cf6c <usb_dc_ep_set_stall+0x80>)
   1cf32:	4a0f      	ldr	r2, [pc, #60]	; (1cf70 <usb_dc_ep_set_stall+0x84>)
   1cf34:	1a9b      	subs	r3, r3, r2
   1cf36:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
   1cf38:	f04f 0100 	mov.w	r1, #0
   1cf3c:	2201      	movs	r2, #1
   1cf3e:	f362 0102 	bfi	r1, r2, #0, #3
   1cf42:	f36f 01c5 	bfc	r1, #3, #3
   1cf46:	f363 118f 	bfi	r1, r3, #6, #10
   1cf4a:	480a      	ldr	r0, [pc, #40]	; (1cf74 <usb_dc_ep_set_stall+0x88>)
   1cf4c:	f7f5 f86e 	bl	1202c <log_0>
		return -EINVAL;
   1cf50:	f06f 0015 	mvn.w	r0, #21
   1cf54:	e7e3      	b.n	1cf1e <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
   1cf56:	f06f 0012 	mvn.w	r0, #18
   1cf5a:	e7e0      	b.n	1cf1e <usb_dc_ep_set_stall+0x32>
   1cf5c:	f06f 0012 	mvn.w	r0, #18
   1cf60:	e7dd      	b.n	1cf1e <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
   1cf62:	f06f 0015 	mvn.w	r0, #21
   1cf66:	e7da      	b.n	1cf1e <usb_dc_ep_set_stall+0x32>
   1cf68:	2000327c 	.word	0x2000327c
   1cf6c:	0002c6e8 	.word	0x0002c6e8
   1cf70:	0002c610 	.word	0x0002c610
   1cf74:	0002ecf8 	.word	0x0002ecf8

0001cf78 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
   1cf78:	4b11      	ldr	r3, [pc, #68]	; (1cfc0 <usb_dc_ep_clear_stall+0x48>)
   1cf7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1cf7e:	b19b      	cbz	r3, 1cfa8 <usb_dc_ep_clear_stall+0x30>
{
   1cf80:	b510      	push	{r4, lr}
   1cf82:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   1cf84:	4b0e      	ldr	r3, [pc, #56]	; (1cfc0 <usb_dc_ep_clear_stall+0x48>)
   1cf86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1cf8a:	b183      	cbz	r3, 1cfae <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
   1cf8c:	f7fe ff2a 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1cf90:	b180      	cbz	r0, 1cfb4 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
   1cf92:	f014 0f08 	tst.w	r4, #8
   1cf96:	d110      	bne.n	1cfba <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1cf98:	4620      	mov	r0, r4
   1cf9a:	f003 fd31 	bl	20a00 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1cf9e:	4620      	mov	r0, r4
   1cfa0:	f003 ff78 	bl	20e94 <nrfx_usbd_ep_stall_clear>
	return 0;
   1cfa4:	2000      	movs	r0, #0
}
   1cfa6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1cfa8:	f06f 0012 	mvn.w	r0, #18
}
   1cfac:	4770      	bx	lr
		return -ENODEV;
   1cfae:	f06f 0012 	mvn.w	r0, #18
   1cfb2:	e7f8      	b.n	1cfa6 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   1cfb4:	f06f 0015 	mvn.w	r0, #21
   1cfb8:	e7f5      	b.n	1cfa6 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
   1cfba:	f06f 0015 	mvn.w	r0, #21
   1cfbe:	e7f2      	b.n	1cfa6 <usb_dc_ep_clear_stall+0x2e>
   1cfc0:	2000327c 	.word	0x2000327c

0001cfc4 <usb_dc_ep_is_stalled>:
{
   1cfc4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1cfc6:	4b10      	ldr	r3, [pc, #64]	; (1d008 <usb_dc_ep_is_stalled+0x44>)
   1cfc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1cfcc:	b17b      	cbz	r3, 1cfee <usb_dc_ep_is_stalled+0x2a>
   1cfce:	4604      	mov	r4, r0
   1cfd0:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
   1cfd2:	4b0d      	ldr	r3, [pc, #52]	; (1d008 <usb_dc_ep_is_stalled+0x44>)
   1cfd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1cfd8:	b163      	cbz	r3, 1cff4 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
   1cfda:	f7fe ff03 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1cfde:	b160      	cbz	r0, 1cffa <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
   1cfe0:	b175      	cbz	r5, 1d000 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
   1cfe2:	4620      	mov	r0, r4
   1cfe4:	f003 fcec 	bl	209c0 <nrfx_usbd_ep_stall_check>
   1cfe8:	7028      	strb	r0, [r5, #0]
	return 0;
   1cfea:	2000      	movs	r0, #0
}
   1cfec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1cfee:	f06f 0012 	mvn.w	r0, #18
   1cff2:	e7fb      	b.n	1cfec <usb_dc_ep_is_stalled+0x28>
   1cff4:	f06f 0012 	mvn.w	r0, #18
   1cff8:	e7f8      	b.n	1cfec <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   1cffa:	f06f 0015 	mvn.w	r0, #21
   1cffe:	e7f5      	b.n	1cfec <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
   1d000:	f06f 0015 	mvn.w	r0, #21
   1d004:	e7f2      	b.n	1cfec <usb_dc_ep_is_stalled+0x28>
   1d006:	bf00      	nop
   1d008:	2000327c 	.word	0x2000327c

0001d00c <usb_dc_ep_enable>:
{
   1d00c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1d00e:	4b15      	ldr	r3, [pc, #84]	; (1d064 <usb_dc_ep_enable+0x58>)
   1d010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   1d014:	b1eb      	cbz	r3, 1d052 <usb_dc_ep_enable+0x46>
   1d016:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
   1d018:	f7fe fee4 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d01c:	4605      	mov	r5, r0
   1d01e:	b1d8      	cbz	r0, 1d058 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
   1d020:	f014 0f08 	tst.w	r4, #8
   1d024:	d009      	beq.n	1d03a <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
   1d026:	7a2b      	ldrb	r3, [r5, #8]
   1d028:	b9cb      	cbnz	r3, 1d05e <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
   1d02a:	2301      	movs	r3, #1
   1d02c:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
   1d02e:	4b0d      	ldr	r3, [pc, #52]	; (1d064 <usb_dc_ep_enable+0x58>)
   1d030:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
   1d034:	b943      	cbnz	r3, 1d048 <usb_dc_ep_enable+0x3c>
	return 0;
   1d036:	2000      	movs	r0, #0
}
   1d038:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
   1d03a:	4620      	mov	r0, r4
   1d03c:	f003 fce0 	bl	20a00 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
   1d040:	4620      	mov	r0, r4
   1d042:	f003 ff27 	bl	20e94 <nrfx_usbd_ep_stall_clear>
   1d046:	e7ee      	b.n	1d026 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
   1d048:	4620      	mov	r0, r4
   1d04a:	f003 fec9 	bl	20de0 <nrfx_usbd_ep_enable>
	return 0;
   1d04e:	2000      	movs	r0, #0
   1d050:	e7f2      	b.n	1d038 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
   1d052:	f06f 0012 	mvn.w	r0, #18
   1d056:	e7ef      	b.n	1d038 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
   1d058:	f06f 0015 	mvn.w	r0, #21
   1d05c:	e7ec      	b.n	1d038 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
   1d05e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d062:	e7e9      	b.n	1d038 <usb_dc_ep_enable+0x2c>
   1d064:	2000327c 	.word	0x2000327c

0001d068 <usb_dc_ep_disable>:
{
   1d068:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
   1d06a:	4b13      	ldr	r3, [pc, #76]	; (1d0b8 <usb_dc_ep_disable+0x50>)
   1d06c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1d070:	b1ab      	cbz	r3, 1d09e <usb_dc_ep_disable+0x36>
   1d072:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
   1d074:	4b10      	ldr	r3, [pc, #64]	; (1d0b8 <usb_dc_ep_disable+0x50>)
   1d076:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1d07a:	b19b      	cbz	r3, 1d0a4 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
   1d07c:	f7fe feb2 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d080:	4605      	mov	r5, r0
   1d082:	b190      	cbz	r0, 1d0aa <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
   1d084:	7a03      	ldrb	r3, [r0, #8]
   1d086:	b19b      	cbz	r3, 1d0b0 <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
   1d088:	4620      	mov	r0, r4
   1d08a:	f004 f8dd 	bl	21248 <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
   1d08e:	2400      	movs	r4, #0
   1d090:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
   1d092:	4628      	mov	r0, r5
   1d094:	f00d f913 	bl	2a2be <ep_ctx_reset>
	ep_ctx->cfg.en = false;
   1d098:	722c      	strb	r4, [r5, #8]
	return 0;
   1d09a:	4620      	mov	r0, r4
}
   1d09c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
   1d09e:	f06f 0012 	mvn.w	r0, #18
   1d0a2:	e7fb      	b.n	1d09c <usb_dc_ep_disable+0x34>
   1d0a4:	f06f 0012 	mvn.w	r0, #18
   1d0a8:	e7f8      	b.n	1d09c <usb_dc_ep_disable+0x34>
		return -EINVAL;
   1d0aa:	f06f 0015 	mvn.w	r0, #21
   1d0ae:	e7f5      	b.n	1d09c <usb_dc_ep_disable+0x34>
		return -EALREADY;
   1d0b0:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1d0b4:	e7f2      	b.n	1d09c <usb_dc_ep_disable+0x34>
   1d0b6:	bf00      	nop
   1d0b8:	2000327c 	.word	0x2000327c

0001d0bc <usb_dc_ep_write>:
{
   1d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d0c0:	b084      	sub	sp, #16
   1d0c2:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
   1d0c4:	4b4e      	ldr	r3, [pc, #312]	; (1d200 <usb_dc_ep_write+0x144>)
   1d0c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1d0ca:	2b00      	cmp	r3, #0
   1d0cc:	f000 808c 	beq.w	1d1e8 <usb_dc_ep_write+0x12c>
   1d0d0:	4604      	mov	r4, r0
   1d0d2:	4688      	mov	r8, r1
   1d0d4:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
   1d0d6:	4b4a      	ldr	r3, [pc, #296]	; (1d200 <usb_dc_ep_write+0x144>)
   1d0d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1d0dc:	2b00      	cmp	r3, #0
   1d0de:	f000 8086 	beq.w	1d1ee <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
   1d0e2:	f010 0f80 	tst.w	r0, #128	; 0x80
   1d0e6:	f000 8085 	beq.w	1d1f4 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
   1d0ea:	f7fe fe7b 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d0ee:	4605      	mov	r5, r0
   1d0f0:	2800      	cmp	r0, #0
   1d0f2:	f000 8082 	beq.w	1d1fa <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
   1d0f6:	7a03      	ldrb	r3, [r0, #8]
   1d0f8:	2b00      	cmp	r3, #0
   1d0fa:	d04e      	beq.n	1d19a <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
   1d0fc:	f04f 32ff 	mov.w	r2, #4294967295
   1d100:	f04f 33ff 	mov.w	r3, #4294967295
   1d104:	483f      	ldr	r0, [pc, #252]	; (1d204 <usb_dc_ep_write+0x148>)
   1d106:	f004 fcb1 	bl	21a6c <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
   1d10a:	7fab      	ldrb	r3, [r5, #30]
   1d10c:	2b00      	cmp	r3, #0
   1d10e:	d158      	bne.n	1d1c2 <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
   1d110:	b91e      	cbnz	r6, 1d11a <usb_dc_ep_write+0x5e>
   1d112:	7feb      	ldrb	r3, [r5, #31]
   1d114:	b10b      	cbz	r3, 1d11a <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
   1d116:	2300      	movs	r3, #0
   1d118:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
   1d11a:	7aab      	ldrb	r3, [r5, #10]
   1d11c:	b963      	cbnz	r3, 1d138 <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1d11e:	b15e      	cbz	r6, 1d138 <usb_dc_ep_write+0x7c>
   1d120:	4a37      	ldr	r2, [pc, #220]	; (1d200 <usb_dc_ep_write+0x144>)
   1d122:	8952      	ldrh	r2, [r2, #10]
   1d124:	42b2      	cmp	r2, r6
   1d126:	d907      	bls.n	1d138 <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
   1d128:	6869      	ldr	r1, [r5, #4]
   1d12a:	fbb6 f2f1 	udiv	r2, r6, r1
   1d12e:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
   1d132:	b90a      	cbnz	r2, 1d138 <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
   1d134:	2201      	movs	r2, #1
   1d136:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
   1d138:	b91b      	cbnz	r3, 1d142 <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
   1d13a:	f003 fcfb 	bl	20b34 <nrfx_usbd_last_setup_dir_get>
   1d13e:	42a0      	cmp	r0, r4
   1d140:	d145      	bne.n	1d1ce <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
   1d142:	2301      	movs	r3, #1
   1d144:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
   1d146:	f8cd 8004 	str.w	r8, [sp, #4]
   1d14a:	9602      	str	r6, [sp, #8]
   1d14c:	2300      	movs	r3, #0
   1d14e:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
   1d150:	a901      	add	r1, sp, #4
   1d152:	4620      	mov	r0, r4
   1d154:	f003 f840 	bl	201d8 <nrfx_usbd_ep_transfer>
   1d158:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
   1d15a:	4b2b      	ldr	r3, [pc, #172]	; (1d208 <usb_dc_ep_write+0x14c>)
   1d15c:	4298      	cmp	r0, r3
   1d15e:	d03d      	beq.n	1d1dc <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
   1d160:	2300      	movs	r3, #0
   1d162:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
   1d164:	b107      	cbz	r7, 1d168 <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
   1d166:	603b      	str	r3, [r7, #0]
   1d168:	4b28      	ldr	r3, [pc, #160]	; (1d20c <usb_dc_ep_write+0x150>)
   1d16a:	4a29      	ldr	r2, [pc, #164]	; (1d210 <usb_dc_ep_write+0x154>)
   1d16c:	1a9b      	subs	r3, r3, r2
   1d16e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
   1d170:	f04f 0200 	mov.w	r2, #0
   1d174:	2001      	movs	r0, #1
   1d176:	f360 0202 	bfi	r2, r0, #0, #3
   1d17a:	f36f 02c5 	bfc	r2, #3, #3
   1d17e:	f363 128f 	bfi	r2, r3, #6, #10
   1d182:	4824      	ldr	r0, [pc, #144]	; (1d214 <usb_dc_ep_write+0x158>)
   1d184:	f7f4 fe9c 	bl	11ec0 <log_1>
		result = -EIO;
   1d188:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
   1d18c:	481d      	ldr	r0, [pc, #116]	; (1d204 <usb_dc_ep_write+0x148>)
   1d18e:	f004 fcf7 	bl	21b80 <z_impl_k_mutex_unlock>
}
   1d192:	4620      	mov	r0, r4
   1d194:	b004      	add	sp, #16
   1d196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d19a:	4b1c      	ldr	r3, [pc, #112]	; (1d20c <usb_dc_ep_write+0x150>)
   1d19c:	4a1c      	ldr	r2, [pc, #112]	; (1d210 <usb_dc_ep_write+0x154>)
   1d19e:	1a9b      	subs	r3, r3, r2
   1d1a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1d1a2:	f04f 0200 	mov.w	r2, #0
   1d1a6:	2101      	movs	r1, #1
   1d1a8:	f361 0202 	bfi	r2, r1, #0, #3
   1d1ac:	f36f 02c5 	bfc	r2, #3, #3
   1d1b0:	f363 128f 	bfi	r2, r3, #6, #10
   1d1b4:	4621      	mov	r1, r4
   1d1b6:	4818      	ldr	r0, [pc, #96]	; (1d218 <usb_dc_ep_write+0x15c>)
   1d1b8:	f7f4 fe82 	bl	11ec0 <log_1>
		return -EINVAL;
   1d1bc:	f06f 0415 	mvn.w	r4, #21
   1d1c0:	e7e7      	b.n	1d192 <usb_dc_ep_write+0xd6>
   1d1c2:	4810      	ldr	r0, [pc, #64]	; (1d204 <usb_dc_ep_write+0x148>)
   1d1c4:	f004 fcdc 	bl	21b80 <z_impl_k_mutex_unlock>
		return -EAGAIN;
   1d1c8:	f06f 040a 	mvn.w	r4, #10
   1d1cc:	e7e1      	b.n	1d192 <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
   1d1ce:	f003 fca1 	bl	20b14 <nrfx_usbd_setup_clear>
   1d1d2:	480c      	ldr	r0, [pc, #48]	; (1d204 <usb_dc_ep_write+0x148>)
   1d1d4:	f004 fcd4 	bl	21b80 <z_impl_k_mutex_unlock>
		return 0;
   1d1d8:	2400      	movs	r4, #0
   1d1da:	e7da      	b.n	1d192 <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
   1d1dc:	b117      	cbz	r7, 1d1e4 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
   1d1de:	603e      	str	r6, [r7, #0]
	int result = 0;
   1d1e0:	2400      	movs	r4, #0
   1d1e2:	e7d3      	b.n	1d18c <usb_dc_ep_write+0xd0>
   1d1e4:	2400      	movs	r4, #0
   1d1e6:	e7d1      	b.n	1d18c <usb_dc_ep_write+0xd0>
		return -ENODEV;
   1d1e8:	f06f 0412 	mvn.w	r4, #18
   1d1ec:	e7d1      	b.n	1d192 <usb_dc_ep_write+0xd6>
   1d1ee:	f06f 0412 	mvn.w	r4, #18
   1d1f2:	e7ce      	b.n	1d192 <usb_dc_ep_write+0xd6>
		return -EINVAL;
   1d1f4:	f06f 0415 	mvn.w	r4, #21
   1d1f8:	e7cb      	b.n	1d192 <usb_dc_ep_write+0xd6>
		return -EINVAL;
   1d1fa:	f06f 0415 	mvn.w	r4, #21
   1d1fe:	e7c8      	b.n	1d192 <usb_dc_ep_write+0xd6>
   1d200:	2000327c 	.word	0x2000327c
   1d204:	200032b4 	.word	0x200032b4
   1d208:	0bad0000 	.word	0x0bad0000
   1d20c:	0002c6e8 	.word	0x0002c6e8
   1d210:	0002c610 	.word	0x0002c610
   1d214:	0002ed3c 	.word	0x0002ed3c
   1d218:	0002ed1c 	.word	0x0002ed1c

0001d21c <usb_dc_ep_read_wait>:
{
   1d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d220:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
   1d222:	4b36      	ldr	r3, [pc, #216]	; (1d2fc <usb_dc_ep_read_wait+0xe0>)
   1d224:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1d228:	2b00      	cmp	r3, #0
   1d22a:	d05b      	beq.n	1d2e4 <usb_dc_ep_read_wait+0xc8>
   1d22c:	4606      	mov	r6, r0
   1d22e:	460d      	mov	r5, r1
   1d230:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
   1d232:	4b32      	ldr	r3, [pc, #200]	; (1d2fc <usb_dc_ep_read_wait+0xe0>)
   1d234:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1d238:	2b00      	cmp	r3, #0
   1d23a:	d056      	beq.n	1d2ea <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1d23c:	f010 0f80 	tst.w	r0, #128	; 0x80
   1d240:	d156      	bne.n	1d2f0 <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
   1d242:	b351      	cbz	r1, 1d29a <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
   1d244:	4630      	mov	r0, r6
   1d246:	f7fe fdcd 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d24a:	4604      	mov	r4, r0
   1d24c:	2800      	cmp	r0, #0
   1d24e:	d052      	beq.n	1d2f6 <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
   1d250:	7a03      	ldrb	r3, [r0, #8]
   1d252:	b33b      	cbz	r3, 1d2a4 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
   1d254:	f04f 32ff 	mov.w	r2, #4294967295
   1d258:	f04f 33ff 	mov.w	r3, #4294967295
   1d25c:	4828      	ldr	r0, [pc, #160]	; (1d300 <usb_dc_ep_read_wait+0xe4>)
   1d25e:	f004 fc05 	bl	21a6c <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
   1d262:	68e3      	ldr	r3, [r4, #12]
   1d264:	463e      	mov	r6, r7
   1d266:	429f      	cmp	r7, r3
   1d268:	bf28      	it	cs
   1d26a:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
   1d26c:	b375      	cbz	r5, 1d2cc <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
   1d26e:	4632      	mov	r2, r6
   1d270:	69a1      	ldr	r1, [r4, #24]
   1d272:	4628      	mov	r0, r5
   1d274:	f00a fcec 	bl	27c50 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
   1d278:	69a3      	ldr	r3, [r4, #24]
   1d27a:	4433      	add	r3, r6
   1d27c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
   1d27e:	68e3      	ldr	r3, [r4, #12]
   1d280:	1b9b      	subs	r3, r3, r6
   1d282:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
   1d284:	f1b8 0f00 	cmp.w	r8, #0
   1d288:	d001      	beq.n	1d28e <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
   1d28a:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
   1d28e:	481c      	ldr	r0, [pc, #112]	; (1d300 <usb_dc_ep_read_wait+0xe4>)
   1d290:	f004 fc76 	bl	21b80 <z_impl_k_mutex_unlock>
	return 0;
   1d294:	2000      	movs	r0, #0
}
   1d296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
   1d29a:	2a00      	cmp	r2, #0
   1d29c:	d0d2      	beq.n	1d244 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
   1d29e:	f06f 0015 	mvn.w	r0, #21
   1d2a2:	e7f8      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
   1d2a4:	4b17      	ldr	r3, [pc, #92]	; (1d304 <usb_dc_ep_read_wait+0xe8>)
   1d2a6:	4a18      	ldr	r2, [pc, #96]	; (1d308 <usb_dc_ep_read_wait+0xec>)
   1d2a8:	1a9b      	subs	r3, r3, r2
   1d2aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1d2ac:	f04f 0200 	mov.w	r2, #0
   1d2b0:	2101      	movs	r1, #1
   1d2b2:	f361 0202 	bfi	r2, r1, #0, #3
   1d2b6:	f36f 02c5 	bfc	r2, #3, #3
   1d2ba:	f363 128f 	bfi	r2, r3, #6, #10
   1d2be:	4631      	mov	r1, r6
   1d2c0:	4812      	ldr	r0, [pc, #72]	; (1d30c <usb_dc_ep_read_wait+0xf0>)
   1d2c2:	f7f4 fdfd 	bl	11ec0 <log_1>
		return -EINVAL;
   1d2c6:	f06f 0015 	mvn.w	r0, #21
   1d2ca:	e7e4      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
   1d2cc:	2f00      	cmp	r7, #0
   1d2ce:	d1ce      	bne.n	1d26e <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
   1d2d0:	f1b8 0f00 	cmp.w	r8, #0
   1d2d4:	d001      	beq.n	1d2da <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
   1d2d6:	f8c8 3000 	str.w	r3, [r8]
   1d2da:	4809      	ldr	r0, [pc, #36]	; (1d300 <usb_dc_ep_read_wait+0xe4>)
   1d2dc:	f004 fc50 	bl	21b80 <z_impl_k_mutex_unlock>
		return 0;
   1d2e0:	2000      	movs	r0, #0
   1d2e2:	e7d8      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
   1d2e4:	f06f 0012 	mvn.w	r0, #18
   1d2e8:	e7d5      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
   1d2ea:	f06f 0012 	mvn.w	r0, #18
   1d2ee:	e7d2      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
   1d2f0:	f06f 0015 	mvn.w	r0, #21
   1d2f4:	e7cf      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
   1d2f6:	f06f 0015 	mvn.w	r0, #21
   1d2fa:	e7cc      	b.n	1d296 <usb_dc_ep_read_wait+0x7a>
   1d2fc:	2000327c 	.word	0x2000327c
   1d300:	200032b4 	.word	0x200032b4
   1d304:	0002c6e8 	.word	0x0002c6e8
   1d308:	0002c610 	.word	0x0002c610
   1d30c:	0002ed1c 	.word	0x0002ed1c

0001d310 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
   1d310:	4b58      	ldr	r3, [pc, #352]	; (1d474 <usb_dc_ep_read_continue+0x164>)
   1d312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
   1d316:	2b00      	cmp	r3, #0
   1d318:	f000 809f 	beq.w	1d45a <usb_dc_ep_read_continue+0x14a>
{
   1d31c:	b530      	push	{r4, r5, lr}
   1d31e:	b083      	sub	sp, #12
   1d320:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
   1d322:	4b54      	ldr	r3, [pc, #336]	; (1d474 <usb_dc_ep_read_continue+0x164>)
   1d324:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
   1d328:	2b00      	cmp	r3, #0
   1d32a:	f000 8099 	beq.w	1d460 <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
   1d32e:	f010 0f80 	tst.w	r0, #128	; 0x80
   1d332:	f040 8098 	bne.w	1d466 <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
   1d336:	f7fe fd55 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d33a:	4604      	mov	r4, r0
   1d33c:	2800      	cmp	r0, #0
   1d33e:	f000 8095 	beq.w	1d46c <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
   1d342:	7a03      	ldrb	r3, [r0, #8]
   1d344:	b1a3      	cbz	r3, 1d370 <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
   1d346:	f04f 32ff 	mov.w	r2, #4294967295
   1d34a:	f04f 33ff 	mov.w	r3, #4294967295
   1d34e:	484a      	ldr	r0, [pc, #296]	; (1d478 <usb_dc_ep_read_continue+0x168>)
   1d350:	f004 fb8c 	bl	21a6c <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
   1d354:	68e3      	ldr	r3, [r4, #12]
   1d356:	b92b      	cbnz	r3, 1d364 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
   1d358:	6963      	ldr	r3, [r4, #20]
   1d35a:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
   1d35c:	2301      	movs	r3, #1
   1d35e:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
   1d360:	7f63      	ldrb	r3, [r4, #29]
   1d362:	b9cb      	cbnz	r3, 1d398 <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
   1d364:	4844      	ldr	r0, [pc, #272]	; (1d478 <usb_dc_ep_read_continue+0x168>)
   1d366:	f004 fc0b 	bl	21b80 <z_impl_k_mutex_unlock>
	return 0;
   1d36a:	2000      	movs	r0, #0
}
   1d36c:	b003      	add	sp, #12
   1d36e:	bd30      	pop	{r4, r5, pc}
   1d370:	4b42      	ldr	r3, [pc, #264]	; (1d47c <usb_dc_ep_read_continue+0x16c>)
   1d372:	4a43      	ldr	r2, [pc, #268]	; (1d480 <usb_dc_ep_read_continue+0x170>)
   1d374:	1a9b      	subs	r3, r3, r2
   1d376:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
   1d378:	f04f 0200 	mov.w	r2, #0
   1d37c:	2101      	movs	r1, #1
   1d37e:	f361 0202 	bfi	r2, r1, #0, #3
   1d382:	f36f 02c5 	bfc	r2, #3, #3
   1d386:	f363 128f 	bfi	r2, r3, #6, #10
   1d38a:	4629      	mov	r1, r5
   1d38c:	483d      	ldr	r0, [pc, #244]	; (1d484 <usb_dc_ep_read_continue+0x174>)
   1d38e:	f7f4 fd97 	bl	11ec0 <log_1>
		return -EINVAL;
   1d392:	f06f 0015 	mvn.w	r0, #21
   1d396:	e7e9      	b.n	1d36c <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
   1d398:	2200      	movs	r2, #0
   1d39a:	2300      	movs	r3, #0
   1d39c:	a901      	add	r1, sp, #4
   1d39e:	483a      	ldr	r0, [pc, #232]	; (1d488 <usb_dc_ep_read_continue+0x178>)
   1d3a0:	f004 fa2a 	bl	217f8 <k_mem_slab_alloc>
   1d3a4:	b980      	cbnz	r0, 1d3c8 <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
   1d3a6:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
   1d3a8:	606d      	str	r5, [r5, #4]
			if (!ev) {
   1d3aa:	2d00      	cmp	r5, #0
   1d3ac:	d04f      	beq.n	1d44e <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
   1d3ae:	2301      	movs	r3, #1
   1d3b0:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
   1d3b2:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
   1d3b4:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
   1d3b6:	4629      	mov	r1, r5
   1d3b8:	4834      	ldr	r0, [pc, #208]	; (1d48c <usb_dc_ep_read_continue+0x17c>)
   1d3ba:	f00e fab9 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1d3be:	4934      	ldr	r1, [pc, #208]	; (1d490 <usb_dc_ep_read_continue+0x180>)
   1d3c0:	4834      	ldr	r0, [pc, #208]	; (1d494 <usb_dc_ep_read_continue+0x184>)
   1d3c2:	f00e fb97 	bl	2baf4 <k_work_submit_to_queue>
}
   1d3c6:	e7cd      	b.n	1d364 <usb_dc_ep_read_continue+0x54>
   1d3c8:	4b2c      	ldr	r3, [pc, #176]	; (1d47c <usb_dc_ep_read_continue+0x16c>)
   1d3ca:	4a2d      	ldr	r2, [pc, #180]	; (1d480 <usb_dc_ep_read_continue+0x170>)
   1d3cc:	1a9b      	subs	r3, r3, r2
   1d3ce:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
   1d3d0:	f04f 0100 	mov.w	r1, #0
   1d3d4:	2201      	movs	r2, #1
   1d3d6:	f362 0102 	bfi	r1, r2, #0, #3
   1d3da:	f36f 01c5 	bfc	r1, #3, #3
   1d3de:	f363 118f 	bfi	r1, r3, #6, #10
   1d3e2:	482d      	ldr	r0, [pc, #180]	; (1d498 <usb_dc_ep_read_continue+0x188>)
   1d3e4:	f7f4 fe22 	bl	1202c <log_0>
static inline void usbd_evt_flush(void)
   1d3e8:	e004      	b.n	1d3f4 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
   1d3ea:	1d01      	adds	r1, r0, #4
   1d3ec:	4826      	ldr	r0, [pc, #152]	; (1d488 <usb_dc_ep_read_continue+0x178>)
   1d3ee:	f00e f96b 	bl	2b6c8 <k_mem_slab_free>
	} while (ev != NULL);
   1d3f2:	b145      	cbz	r5, 1d406 <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
   1d3f4:	2200      	movs	r2, #0
   1d3f6:	2300      	movs	r3, #0
   1d3f8:	4824      	ldr	r0, [pc, #144]	; (1d48c <usb_dc_ep_read_continue+0x17c>)
   1d3fa:	f004 fc05 	bl	21c08 <z_impl_k_queue_get>
		if (ev) {
   1d3fe:	4605      	mov	r5, r0
   1d400:	2800      	cmp	r0, #0
   1d402:	d1f2      	bne.n	1d3ea <usb_dc_ep_read_continue+0xda>
   1d404:	e7f5      	b.n	1d3f2 <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
   1d406:	2200      	movs	r2, #0
   1d408:	2300      	movs	r3, #0
   1d40a:	a901      	add	r1, sp, #4
   1d40c:	481e      	ldr	r0, [pc, #120]	; (1d488 <usb_dc_ep_read_continue+0x178>)
   1d40e:	f004 f9f3 	bl	217f8 <k_mem_slab_alloc>
   1d412:	b180      	cbz	r0, 1d436 <usb_dc_ep_read_continue+0x126>
   1d414:	4b19      	ldr	r3, [pc, #100]	; (1d47c <usb_dc_ep_read_continue+0x16c>)
   1d416:	4a1a      	ldr	r2, [pc, #104]	; (1d480 <usb_dc_ep_read_continue+0x170>)
   1d418:	1a9b      	subs	r3, r3, r2
   1d41a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
   1d41c:	f04f 0100 	mov.w	r1, #0
   1d420:	2201      	movs	r2, #1
   1d422:	f362 0102 	bfi	r1, r2, #0, #3
   1d426:	f36f 01c5 	bfc	r1, #3, #3
   1d42a:	f363 118f 	bfi	r1, r3, #6, #10
   1d42e:	481b      	ldr	r0, [pc, #108]	; (1d49c <usb_dc_ep_read_continue+0x18c>)
   1d430:	f7f4 fdfc 	bl	1202c <log_0>
			return NULL;
   1d434:	e7b9      	b.n	1d3aa <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
   1d436:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
   1d438:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
   1d43a:	2304      	movs	r3, #4
   1d43c:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
   1d43e:	4813      	ldr	r0, [pc, #76]	; (1d48c <usb_dc_ep_read_continue+0x17c>)
   1d440:	f00e fa76 	bl	2b930 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
   1d444:	4912      	ldr	r1, [pc, #72]	; (1d490 <usb_dc_ep_read_continue+0x180>)
   1d446:	4813      	ldr	r0, [pc, #76]	; (1d494 <usb_dc_ep_read_continue+0x184>)
   1d448:	f00e fb54 	bl	2baf4 <k_work_submit_to_queue>
		return NULL;
   1d44c:	e7ad      	b.n	1d3aa <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
   1d44e:	480a      	ldr	r0, [pc, #40]	; (1d478 <usb_dc_ep_read_continue+0x168>)
   1d450:	f004 fb96 	bl	21b80 <z_impl_k_mutex_unlock>
				return -ENOMEM;
   1d454:	f06f 000b 	mvn.w	r0, #11
   1d458:	e788      	b.n	1d36c <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
   1d45a:	f06f 0012 	mvn.w	r0, #18
}
   1d45e:	4770      	bx	lr
		return -ENODEV;
   1d460:	f06f 0012 	mvn.w	r0, #18
   1d464:	e782      	b.n	1d36c <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
   1d466:	f06f 0015 	mvn.w	r0, #21
   1d46a:	e77f      	b.n	1d36c <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
   1d46c:	f06f 0015 	mvn.w	r0, #21
   1d470:	e77c      	b.n	1d36c <usb_dc_ep_read_continue+0x5c>
   1d472:	bf00      	nop
   1d474:	2000327c 	.word	0x2000327c
   1d478:	200032b4 	.word	0x200032b4
   1d47c:	0002c6e8 	.word	0x0002c6e8
   1d480:	0002c610 	.word	0x0002c610
   1d484:	0002ed1c 	.word	0x0002ed1c
   1d488:	20000774 	.word	0x20000774
   1d48c:	20000898 	.word	0x20000898
   1d490:	200032a4 	.word	0x200032a4
   1d494:	20001e10 	.word	0x20001e10
   1d498:	0002eb2c 	.word	0x0002eb2c
   1d49c:	0002eb4c 	.word	0x0002eb4c

0001d4a0 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
   1d4a0:	4b08      	ldr	r3, [pc, #32]	; (1d4c4 <usb_dc_ep_set_callback+0x24>)
   1d4a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   1d4a6:	b13b      	cbz	r3, 1d4b8 <usb_dc_ep_set_callback+0x18>
{
   1d4a8:	b510      	push	{r4, lr}
   1d4aa:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
   1d4ac:	f7fe fc9a 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d4b0:	b128      	cbz	r0, 1d4be <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
   1d4b2:	6004      	str	r4, [r0, #0]
	return 0;
   1d4b4:	2000      	movs	r0, #0
}
   1d4b6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1d4b8:	f06f 0012 	mvn.w	r0, #18
}
   1d4bc:	4770      	bx	lr
		return -EINVAL;
   1d4be:	f06f 0015 	mvn.w	r0, #21
   1d4c2:	e7f8      	b.n	1d4b6 <usb_dc_ep_set_callback+0x16>
   1d4c4:	2000327c 	.word	0x2000327c

0001d4c8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
   1d4c8:	4b01      	ldr	r3, [pc, #4]	; (1d4d0 <usb_dc_set_status_callback+0x8>)
   1d4ca:	6018      	str	r0, [r3, #0]
}
   1d4cc:	4770      	bx	lr
   1d4ce:	bf00      	nop
   1d4d0:	2000327c 	.word	0x2000327c

0001d4d4 <usb_dc_ep_mps>:
{
   1d4d4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
   1d4d6:	4b07      	ldr	r3, [pc, #28]	; (1d4f4 <usb_dc_ep_mps+0x20>)
   1d4d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
   1d4dc:	b123      	cbz	r3, 1d4e8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
   1d4de:	f7fe fc81 	bl	1bde4 <endpoint_ctx>
	if (!ep_ctx) {
   1d4e2:	b120      	cbz	r0, 1d4ee <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
   1d4e4:	6840      	ldr	r0, [r0, #4]
}
   1d4e6:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d4e8:	f06f 0012 	mvn.w	r0, #18
   1d4ec:	e7fb      	b.n	1d4e6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
   1d4ee:	f06f 0015 	mvn.w	r0, #21
   1d4f2:	e7f8      	b.n	1d4e6 <usb_dc_ep_mps+0x12>
   1d4f4:	2000327c 	.word	0x2000327c

0001d4f8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
   1d4f8:	4800      	ldr	r0, [pc, #0]	; (1d4fc <get_hf_flags+0x4>)
   1d4fa:	4770      	bx	lr
   1d4fc:	2000355c 	.word	0x2000355c

0001d500 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1d500:	4b03      	ldr	r3, [pc, #12]	; (1d510 <get_subsys+0x10>)
   1d502:	1ac0      	subs	r0, r0, r3
   1d504:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
   1d506:	4b03      	ldr	r3, [pc, #12]	; (1d514 <get_subsys+0x14>)
   1d508:	fb03 f000 	mul.w	r0, r3, r0
   1d50c:	4770      	bx	lr
   1d50e:	bf00      	nop
   1d510:	2000351c 	.word	0x2000351c
   1d514:	b6db6db7 	.word	0xb6db6db7

0001d518 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d518:	b538      	push	{r3, r4, r5, lr}
   1d51a:	4605      	mov	r5, r0
   1d51c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1d51e:	f7ff ffef 	bl	1d500 <get_subsys>
   1d522:	4601      	mov	r1, r0
   1d524:	2240      	movs	r2, #64	; 0x40
   1d526:	4803      	ldr	r0, [pc, #12]	; (1d534 <onoff_stop+0x1c>)
   1d528:	f00c ffd7 	bl	2a4da <stop>
   1d52c:	4601      	mov	r1, r0
	notify(mgr, res);
   1d52e:	4628      	mov	r0, r5
   1d530:	47a0      	blx	r4
}
   1d532:	bd38      	pop	{r3, r4, r5, pc}
   1d534:	0002c3a0 	.word	0x0002c3a0

0001d538 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1d538:	b530      	push	{r4, r5, lr}
   1d53a:	b083      	sub	sp, #12
   1d53c:	4605      	mov	r5, r0
   1d53e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1d540:	f7ff ffde 	bl	1d500 <get_subsys>
   1d544:	4601      	mov	r1, r0
   1d546:	2340      	movs	r3, #64	; 0x40
   1d548:	9300      	str	r3, [sp, #0]
   1d54a:	4623      	mov	r3, r4
   1d54c:	4a05      	ldr	r2, [pc, #20]	; (1d564 <onoff_start+0x2c>)
   1d54e:	4806      	ldr	r0, [pc, #24]	; (1d568 <onoff_start+0x30>)
   1d550:	f00c ffdd 	bl	2a50e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1d554:	1e01      	subs	r1, r0, #0
   1d556:	db01      	blt.n	1d55c <onoff_start+0x24>
		notify(mgr, err);
	}
}
   1d558:	b003      	add	sp, #12
   1d55a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
   1d55c:	4628      	mov	r0, r5
   1d55e:	47a0      	blx	r4
}
   1d560:	e7fa      	b.n	1d558 <onoff_start+0x20>
   1d562:	bf00      	nop
   1d564:	0002a557 	.word	0x0002a557
   1d568:	0002c3a0 	.word	0x0002c3a0

0001d56c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
   1d56c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
   1d56e:	b110      	cbz	r0, 1d576 <clock_event_handler+0xa>
   1d570:	2801      	cmp	r0, #1
   1d572:	d00d      	beq.n	1d590 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
   1d574:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d576:	2100      	movs	r1, #0
   1d578:	4808      	ldr	r0, [pc, #32]	; (1d59c <clock_event_handler+0x30>)
   1d57a:	f00c ff35 	bl	2a3e8 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1d57e:	6883      	ldr	r3, [r0, #8]
   1d580:	f013 0f07 	tst.w	r3, #7
   1d584:	d1f6      	bne.n	1d574 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   1d586:	2100      	movs	r1, #0
   1d588:	4804      	ldr	r0, [pc, #16]	; (1d59c <clock_event_handler+0x30>)
   1d58a:	f00c ff94 	bl	2a4b6 <clkstarted_handle>
   1d58e:	e7f1      	b.n	1d574 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1d590:	2101      	movs	r1, #1
   1d592:	4802      	ldr	r0, [pc, #8]	; (1d59c <clock_event_handler+0x30>)
   1d594:	f00c ff8f 	bl	2a4b6 <clkstarted_handle>
}
   1d598:	e7ec      	b.n	1d574 <clock_event_handler+0x8>
   1d59a:	bf00      	nop
   1d59c:	0002c3a0 	.word	0x0002c3a0

0001d5a0 <generic_hfclk_start>:
{
   1d5a0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d5a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d5a6:	f3ef 8411 	mrs	r4, BASEPRI
   1d5aa:	f383 8812 	msr	BASEPRI_MAX, r3
   1d5ae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1d5b2:	4a13      	ldr	r2, [pc, #76]	; (1d600 <generic_hfclk_start+0x60>)
   1d5b4:	6813      	ldr	r3, [r2, #0]
   1d5b6:	f043 0302 	orr.w	r3, r3, #2
   1d5ba:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1d5bc:	f013 0f01 	tst.w	r3, #1
   1d5c0:	d108      	bne.n	1d5d4 <generic_hfclk_start+0x34>
	bool already_started = false;
   1d5c2:	2300      	movs	r3, #0
	__asm__ volatile(
   1d5c4:	f384 8811 	msr	BASEPRI, r4
   1d5c8:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1d5cc:	b99b      	cbnz	r3, 1d5f6 <generic_hfclk_start+0x56>
	hfclk_start();
   1d5ce:	f00c ffca 	bl	2a566 <hfclk_start>
}
   1d5d2:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1d5d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d5d8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1d5dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1d5e0:	f012 0f01 	tst.w	r2, #1
   1d5e4:	d101      	bne.n	1d5ea <generic_hfclk_start+0x4a>
	bool already_started = false;
   1d5e6:	2300      	movs	r3, #0
   1d5e8:	e7ec      	b.n	1d5c4 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
   1d5ea:	f7ff ff85 	bl	1d4f8 <get_hf_flags>
   1d5ee:	f00c ff4f 	bl	2a490 <set_on_state>
			already_started = true;
   1d5f2:	2301      	movs	r3, #1
   1d5f4:	e7e6      	b.n	1d5c4 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
   1d5f6:	2100      	movs	r1, #0
   1d5f8:	4802      	ldr	r0, [pc, #8]	; (1d604 <generic_hfclk_start+0x64>)
   1d5fa:	f00c ff5c 	bl	2a4b6 <clkstarted_handle>
		return;
   1d5fe:	e7e8      	b.n	1d5d2 <generic_hfclk_start+0x32>
   1d600:	2000356c 	.word	0x2000356c
   1d604:	0002c3a0 	.word	0x0002c3a0

0001d608 <generic_hfclk_stop>:
{
   1d608:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d60a:	4b0a      	ldr	r3, [pc, #40]	; (1d634 <generic_hfclk_stop+0x2c>)
   1d60c:	f3bf 8f5b 	dmb	ish
   1d610:	e853 2f00 	ldrex	r2, [r3]
   1d614:	f022 0102 	bic.w	r1, r2, #2
   1d618:	e843 1000 	strex	r0, r1, [r3]
   1d61c:	2800      	cmp	r0, #0
   1d61e:	d1f7      	bne.n	1d610 <generic_hfclk_stop+0x8>
   1d620:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   1d624:	f012 0f01 	tst.w	r2, #1
   1d628:	d000      	beq.n	1d62c <generic_hfclk_stop+0x24>
}
   1d62a:	bd08      	pop	{r3, pc}
	hfclk_stop();
   1d62c:	f00c ffa5 	bl	2a57a <hfclk_stop>
   1d630:	e7fb      	b.n	1d62a <generic_hfclk_stop+0x22>
   1d632:	bf00      	nop
   1d634:	2000356c 	.word	0x2000356c

0001d638 <api_blocking_start>:
{
   1d638:	b500      	push	{lr}
   1d63a:	b087      	sub	sp, #28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1d63c:	f8cd d000 	str.w	sp, [sp]
   1d640:	f8cd d004 	str.w	sp, [sp, #4]
   1d644:	2300      	movs	r3, #0
   1d646:	9302      	str	r3, [sp, #8]
   1d648:	2301      	movs	r3, #1
   1d64a:	9303      	str	r3, [sp, #12]
   1d64c:	ab04      	add	r3, sp, #16
   1d64e:	9304      	str	r3, [sp, #16]
   1d650:	9305      	str	r3, [sp, #20]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1d652:	466b      	mov	r3, sp
   1d654:	4a06      	ldr	r2, [pc, #24]	; (1d670 <api_blocking_start+0x38>)
   1d656:	f00c ff76 	bl	2a546 <api_start>
	if (err < 0) {
   1d65a:	2800      	cmp	r0, #0
   1d65c:	db05      	blt.n	1d66a <api_blocking_start+0x32>
	return z_impl_k_sem_take(sem, timeout);
   1d65e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1d662:	2300      	movs	r3, #0
   1d664:	4668      	mov	r0, sp
   1d666:	f004 fb33 	bl	21cd0 <z_impl_k_sem_take>
}
   1d66a:	b007      	add	sp, #28
   1d66c:	f85d fb04 	ldr.w	pc, [sp], #4
   1d670:	0002a58f 	.word	0x0002a58f

0001d674 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
   1d674:	b570      	push	{r4, r5, r6, lr}
   1d676:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1d678:	2200      	movs	r2, #0
   1d67a:	2101      	movs	r1, #1
   1d67c:	4610      	mov	r0, r2
   1d67e:	f7f7 fd95 	bl	151ac <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1d682:	2000      	movs	r0, #0
   1d684:	f7f7 fd60 	bl	15148 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1d688:	4811      	ldr	r0, [pc, #68]	; (1d6d0 <clk_init+0x5c>)
   1d68a:	f001 fcb3 	bl	1eff4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1d68e:	4b11      	ldr	r3, [pc, #68]	; (1d6d4 <clk_init+0x60>)
   1d690:	4298      	cmp	r0, r3
   1d692:	d11a      	bne.n	1d6ca <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1d694:	f00d feb3 	bl	2b3fe <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
   1d698:	2400      	movs	r4, #0
   1d69a:	e003      	b.n	1d6a4 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1d69c:	2301      	movs	r3, #1
   1d69e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
   1d6a0:	441c      	add	r4, r3
   1d6a2:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
   1d6a4:	2c01      	cmp	r4, #1
   1d6a6:	d80e      	bhi.n	1d6c6 <clk_init+0x52>
						get_sub_data(dev, i);
   1d6a8:	4621      	mov	r1, r4
   1d6aa:	4630      	mov	r0, r6
   1d6ac:	f00c fe9c 	bl	2a3e8 <get_sub_data>
   1d6b0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1d6b2:	4621      	mov	r1, r4
   1d6b4:	4630      	mov	r0, r6
   1d6b6:	f00c fea4 	bl	2a402 <get_onoff_manager>
   1d6ba:	4907      	ldr	r1, [pc, #28]	; (1d6d8 <clk_init+0x64>)
   1d6bc:	f008 fbc1 	bl	25e42 <onoff_manager_init>
		if (err < 0) {
   1d6c0:	2800      	cmp	r0, #0
   1d6c2:	daeb      	bge.n	1d69c <clk_init+0x28>
   1d6c4:	e000      	b.n	1d6c8 <clk_init+0x54>
	}

	return 0;
   1d6c6:	2000      	movs	r0, #0
}
   1d6c8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1d6ca:	f06f 0004 	mvn.w	r0, #4
   1d6ce:	e7fb      	b.n	1d6c8 <clk_init+0x54>
   1d6d0:	0001d56d 	.word	0x0001d56d
   1d6d4:	0bad0000 	.word	0x0bad0000
   1d6d8:	0002edc0 	.word	0x0002edc0

0001d6dc <lfclk_spinwait>:
{
   1d6dc:	b570      	push	{r4, r5, r6, lr}
   1d6de:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1d6e0:	2801      	cmp	r0, #1
   1d6e2:	d107      	bne.n	1d6f4 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1d6e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d6e8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1d6ec:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1d6f0:	2b01      	cmp	r3, #1
   1d6f2:	d058      	beq.n	1d7a6 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d6f4:	f00e f826 	bl	2b744 <k_is_in_isr>
   1d6f8:	b928      	cbnz	r0, 1d706 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
   1d6fa:	4b2e      	ldr	r3, [pc, #184]	; (1d7b4 <lfclk_spinwait+0xd8>)
   1d6fc:	781b      	ldrb	r3, [r3, #0]
   1d6fe:	2b00      	cmp	r3, #0
   1d700:	d041      	beq.n	1d786 <lfclk_spinwait+0xaa>
   1d702:	2300      	movs	r3, #0
   1d704:	e000      	b.n	1d708 <lfclk_spinwait+0x2c>
   1d706:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
   1d708:	461c      	mov	r4, r3
   1d70a:	2b00      	cmp	r3, #0
   1d70c:	d03d      	beq.n	1d78a <lfclk_spinwait+0xae>
	__asm__ volatile(
   1d70e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d712:	f3ef 8611 	mrs	r6, BASEPRI
   1d716:	f383 8812 	msr	BASEPRI_MAX, r3
   1d71a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
   1d71e:	b924      	cbnz	r4, 1d72a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
   1d720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d724:	2202      	movs	r2, #2
   1d726:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1d72a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d72e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1d732:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1d736:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   1d73a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   1d73e:	d12b      	bne.n	1d798 <lfclk_spinwait+0xbc>
    return false;
   1d740:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1d742:	b11a      	cbz	r2, 1d74c <lfclk_spinwait+0x70>
   1d744:	2b01      	cmp	r3, #1
   1d746:	d029      	beq.n	1d79c <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1d748:	2d01      	cmp	r5, #1
   1d74a:	d027      	beq.n	1d79c <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1d74c:	b1fc      	cbz	r4, 1d78e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1d74e:	4630      	mov	r0, r6
   1d750:	f7f7 fca2 	bl	15098 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1d754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d758:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1d75c:	2b00      	cmp	r3, #0
   1d75e:	d1e4      	bne.n	1d72a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1d760:	4b15      	ldr	r3, [pc, #84]	; (1d7b8 <lfclk_spinwait+0xdc>)
   1d762:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   1d764:	2b00      	cmp	r3, #0
   1d766:	d0e0      	beq.n	1d72a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d768:	4b13      	ldr	r3, [pc, #76]	; (1d7b8 <lfclk_spinwait+0xdc>)
   1d76a:	2200      	movs	r2, #0
   1d76c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1d76e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   1d770:	2301      	movs	r3, #1
   1d772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1d776:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d77a:	4a10      	ldr	r2, [pc, #64]	; (1d7bc <lfclk_spinwait+0xe0>)
   1d77c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d780:	4a0f      	ldr	r2, [pc, #60]	; (1d7c0 <lfclk_spinwait+0xe4>)
   1d782:	6013      	str	r3, [r2, #0]
}
   1d784:	e7d1      	b.n	1d72a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d786:	2301      	movs	r3, #1
   1d788:	e7be      	b.n	1d708 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
   1d78a:	2600      	movs	r6, #0
   1d78c:	e7c7      	b.n	1d71e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
   1d78e:	2021      	movs	r0, #33	; 0x21
   1d790:	2100      	movs	r1, #0
   1d792:	f005 f827 	bl	227e4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d796:	e7dd      	b.n	1d754 <lfclk_spinwait+0x78>
                return true;
   1d798:	2201      	movs	r2, #1
   1d79a:	e7d2      	b.n	1d742 <lfclk_spinwait+0x66>
	if (isr_mode) {
   1d79c:	b124      	cbz	r4, 1d7a8 <lfclk_spinwait+0xcc>
	__asm__ volatile(
   1d79e:	f386 8811 	msr	BASEPRI, r6
   1d7a2:	f3bf 8f6f 	isb	sy
}
   1d7a6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
   1d7a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1d7ac:	2202      	movs	r2, #2
   1d7ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1d7b2:	e7f8      	b.n	1d7a6 <lfclk_spinwait+0xca>
   1d7b4:	20004759 	.word	0x20004759
   1d7b8:	40000104 	.word	0x40000104
   1d7bc:	e000e100 	.word	0xe000e100
   1d7c0:	40000008 	.word	0x40000008

0001d7c4 <z_nrf_clock_control_get_onoff>:
{
   1d7c4:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
   1d7c6:	b2c1      	uxtb	r1, r0
   1d7c8:	4801      	ldr	r0, [pc, #4]	; (1d7d0 <z_nrf_clock_control_get_onoff+0xc>)
   1d7ca:	f00c fe1a 	bl	2a402 <get_onoff_manager>
}
   1d7ce:	bd08      	pop	{r3, pc}
   1d7d0:	0002c3a0 	.word	0x0002c3a0

0001d7d4 <z_nrf_clock_control_lf_on>:
{
   1d7d4:	b510      	push	{r4, lr}
   1d7d6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1d7d8:	4b10      	ldr	r3, [pc, #64]	; (1d81c <z_nrf_clock_control_lf_on+0x48>)
   1d7da:	2101      	movs	r1, #1
   1d7dc:	f3bf 8f5b 	dmb	ish
   1d7e0:	e853 2f00 	ldrex	r2, [r3]
   1d7e4:	e843 1000 	strex	r0, r1, [r3]
   1d7e8:	2800      	cmp	r0, #0
   1d7ea:	d1f9      	bne.n	1d7e0 <z_nrf_clock_control_lf_on+0xc>
   1d7ec:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1d7f0:	b11a      	cbz	r2, 1d7fa <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
   1d7f2:	1e63      	subs	r3, r4, #1
   1d7f4:	2b01      	cmp	r3, #1
   1d7f6:	d90c      	bls.n	1d812 <z_nrf_clock_control_lf_on+0x3e>
}
   1d7f8:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
   1d7fa:	4809      	ldr	r0, [pc, #36]	; (1d820 <z_nrf_clock_control_lf_on+0x4c>)
   1d7fc:	f00c fe01 	bl	2a402 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1d800:	4908      	ldr	r1, [pc, #32]	; (1d824 <z_nrf_clock_control_lf_on+0x50>)
   1d802:	2300      	movs	r3, #0
   1d804:	604b      	str	r3, [r1, #4]
   1d806:	60cb      	str	r3, [r1, #12]
   1d808:	2301      	movs	r3, #1
   1d80a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
   1d80c:	f008 fb35 	bl	25e7a <onoff_request>
   1d810:	e7ef      	b.n	1d7f2 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
   1d812:	4620      	mov	r0, r4
   1d814:	f7ff ff62 	bl	1d6dc <lfclk_spinwait>
		break;
   1d818:	e7ee      	b.n	1d7f8 <z_nrf_clock_control_lf_on+0x24>
   1d81a:	bf00      	nop
   1d81c:	20003570 	.word	0x20003570
   1d820:	0002c3a0 	.word	0x0002c3a0
   1d824:	2000350c 	.word	0x2000350c

0001d828 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
   1d828:	b510      	push	{r4, lr}
   1d82a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
   1d82c:	280a      	cmp	r0, #10
   1d82e:	d007      	beq.n	1d840 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
   1d830:	4b07      	ldr	r3, [pc, #28]	; (1d850 <console_out+0x28>)
   1d832:	6818      	ldr	r0, [r3, #0]
   1d834:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
   1d836:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1d838:	685b      	ldr	r3, [r3, #4]
   1d83a:	4798      	blx	r3

	return c;
}
   1d83c:	4620      	mov	r0, r4
   1d83e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
   1d840:	4b03      	ldr	r3, [pc, #12]	; (1d850 <console_out+0x28>)
   1d842:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
   1d844:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
   1d846:	685b      	ldr	r3, [r3, #4]
   1d848:	210d      	movs	r1, #13
   1d84a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
   1d84c:	e7f0      	b.n	1d830 <console_out+0x8>
   1d84e:	bf00      	nop
   1d850:	20003574 	.word	0x20003574

0001d854 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
   1d854:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
   1d856:	4c04      	ldr	r4, [pc, #16]	; (1d868 <uart_console_hook_install+0x14>)
   1d858:	4620      	mov	r0, r4
   1d85a:	f7f8 fb1d 	bl	15e98 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1d85e:	4620      	mov	r0, r4
   1d860:	f7f3 fa98 	bl	10d94 <__printk_hook_install>
}
   1d864:	bd10      	pop	{r4, pc}
   1d866:	bf00      	nop
   1d868:	0001d829 	.word	0x0001d829

0001d86c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   1d86c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   1d86e:	4806      	ldr	r0, [pc, #24]	; (1d888 <uart_console_init+0x1c>)
   1d870:	4b06      	ldr	r3, [pc, #24]	; (1d88c <uart_console_init+0x20>)
   1d872:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   1d874:	f00d fe86 	bl	2b584 <z_device_ready>
   1d878:	b118      	cbz	r0, 1d882 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
   1d87a:	f7ff ffeb 	bl	1d854 <uart_console_hook_install>

	return 0;
   1d87e:	2000      	movs	r0, #0
}
   1d880:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1d882:	f06f 0012 	mvn.w	r0, #18
   1d886:	e7fb      	b.n	1d880 <uart_console_init+0x14>
   1d888:	0002c388 	.word	0x0002c388
   1d88c:	20003574 	.word	0x20003574

0001d890 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
   1d890:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
   1d892:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d894:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d896:	4b37      	ldr	r3, [pc, #220]	; (1d974 <gpio_nrfx_config+0xe4>)
   1d898:	4013      	ands	r3, r2
   1d89a:	4c37      	ldr	r4, [pc, #220]	; (1d978 <gpio_nrfx_config+0xe8>)
   1d89c:	42a3      	cmp	r3, r4
   1d89e:	d027      	beq.n	1d8f0 <gpio_nrfx_config+0x60>
   1d8a0:	d812      	bhi.n	1d8c8 <gpio_nrfx_config+0x38>
   1d8a2:	2b06      	cmp	r3, #6
   1d8a4:	d026      	beq.n	1d8f4 <gpio_nrfx_config+0x64>
   1d8a6:	d904      	bls.n	1d8b2 <gpio_nrfx_config+0x22>
   1d8a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d8ac:	d109      	bne.n	1d8c2 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
   1d8ae:	2401      	movs	r4, #1
   1d8b0:	e016      	b.n	1d8e0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8b2:	b30b      	cbz	r3, 1d8f8 <gpio_nrfx_config+0x68>
   1d8b4:	2b02      	cmp	r3, #2
   1d8b6:	d101      	bne.n	1d8bc <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
   1d8b8:	2404      	movs	r4, #4
   1d8ba:	e011      	b.n	1d8e0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8bc:	f06f 0015 	mvn.w	r0, #21
   1d8c0:	e046      	b.n	1d950 <gpio_nrfx_config+0xc0>
   1d8c2:	f06f 0015 	mvn.w	r0, #21
   1d8c6:	e043      	b.n	1d950 <gpio_nrfx_config+0xc0>
   1d8c8:	4c2c      	ldr	r4, [pc, #176]	; (1d97c <gpio_nrfx_config+0xec>)
   1d8ca:	42a3      	cmp	r3, r4
   1d8cc:	d016      	beq.n	1d8fc <gpio_nrfx_config+0x6c>
   1d8ce:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d8d2:	d101      	bne.n	1d8d8 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
   1d8d4:	2403      	movs	r4, #3
   1d8d6:	e003      	b.n	1d8e0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d8dc:	d146      	bne.n	1d96c <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
   1d8de:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
   1d8e0:	f012 0f10 	tst.w	r2, #16
   1d8e4:	d10c      	bne.n	1d900 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
   1d8e6:	f012 0f20 	tst.w	r2, #32
   1d8ea:	d033      	beq.n	1d954 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
   1d8ec:	2501      	movs	r5, #1
   1d8ee:	e008      	b.n	1d902 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
   1d8f0:	2407      	movs	r4, #7
   1d8f2:	e7f5      	b.n	1d8e0 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
   1d8f4:	2406      	movs	r4, #6
   1d8f6:	e7f3      	b.n	1d8e0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d8f8:	2400      	movs	r4, #0
   1d8fa:	e7f1      	b.n	1d8e0 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
   1d8fc:	2405      	movs	r4, #5
   1d8fe:	e7ef      	b.n	1d8e0 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
   1d900:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
   1d902:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d906:	f412 7f80 	tst.w	r2, #256	; 0x100
   1d90a:	bf0c      	ite	eq
   1d90c:	2601      	moveq	r6, #1
   1d90e:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
   1d910:	f412 7f00 	tst.w	r2, #512	; 0x200
   1d914:	d006      	beq.n	1d924 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d916:	f412 6f00 	tst.w	r2, #2048	; 0x800
   1d91a:	d01d      	beq.n	1d958 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d91c:	2201      	movs	r2, #1
   1d91e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1d920:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
   1d924:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1d926:	7a12      	ldrb	r2, [r2, #8]
   1d928:	f001 011f 	and.w	r1, r1, #31
   1d92c:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1d930:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d932:	2a01      	cmp	r2, #1
   1d934:	d018      	beq.n	1d968 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
   1d936:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
   1d93a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
   1d93e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1d942:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   1d946:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1d94a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
   1d94e:	2000      	movs	r0, #0
}
   1d950:	bcf0      	pop	{r4, r5, r6, r7}
   1d952:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
   1d954:	2500      	movs	r5, #0
   1d956:	e7d4      	b.n	1d902 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d958:	f412 6f80 	tst.w	r2, #1024	; 0x400
   1d95c:	d0e2      	beq.n	1d924 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d95e:	2201      	movs	r2, #1
   1d960:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
   1d962:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
   1d966:	e7dd      	b.n	1d924 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
   1d968:	4a05      	ldr	r2, [pc, #20]	; (1d980 <gpio_nrfx_config+0xf0>)
   1d96a:	e7e6      	b.n	1d93a <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d96c:	f06f 0015 	mvn.w	r0, #21
   1d970:	e7ee      	b.n	1d950 <gpio_nrfx_config+0xc0>
   1d972:	bf00      	nop
   1d974:	00f00006 	.word	0x00f00006
   1d978:	00100006 	.word	0x00100006
   1d97c:	00400002 	.word	0x00400002
   1d980:	50000300 	.word	0x50000300

0001d984 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
   1d984:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
   1d986:	6905      	ldr	r5, [r0, #16]
	return port->config;
   1d988:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
   1d98a:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1d98c:	696a      	ldr	r2, [r5, #20]
   1d98e:	69ab      	ldr	r3, [r5, #24]
   1d990:	4313      	orrs	r3, r2
   1d992:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
   1d996:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   1d998:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
   1d99a:	e011      	b.n	1d9c0 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
   1d99c:	f04f 0c02 	mov.w	ip, #2
   1d9a0:	e01d      	b.n	1d9de <cfg_level_pins+0x5a>
   1d9a2:	4f14      	ldr	r7, [pc, #80]	; (1d9f4 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d9a4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1d9a8:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
   1d9ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d9b0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
   1d9b4:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
   1d9b8:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
   1d9bc:	3001      	adds	r0, #1
		bit <<= 1;
   1d9be:	005b      	lsls	r3, r3, #1
	while (level_pins) {
   1d9c0:	b1a9      	cbz	r1, 1d9ee <cfg_level_pins+0x6a>
		if (level_pins & bit) {
   1d9c2:	420b      	tst	r3, r1
   1d9c4:	d0fa      	beq.n	1d9bc <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1d9c6:	7a34      	ldrb	r4, [r6, #8]
   1d9c8:	f000 021f 	and.w	r2, r0, #31
   1d9cc:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d9d0:	692c      	ldr	r4, [r5, #16]
   1d9d2:	40c4      	lsrs	r4, r0
   1d9d4:	f014 0f01 	tst.w	r4, #1
   1d9d8:	d1e0      	bne.n	1d99c <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
   1d9da:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
   1d9de:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
   1d9e2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1d9e4:	2a01      	cmp	r2, #1
   1d9e6:	d0dc      	beq.n	1d9a2 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
   1d9e8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   1d9ec:	e7da      	b.n	1d9a4 <cfg_level_pins+0x20>
	}
}
   1d9ee:	bcf0      	pop	{r4, r5, r6, r7}
   1d9f0:	4770      	bx	lr
   1d9f2:	bf00      	nop
   1d9f4:	50000300 	.word	0x50000300

0001d9f8 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
   1d9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9fa:	468c      	mov	ip, r1
	return port->data;
   1d9fc:	6903      	ldr	r3, [r0, #16]
	return port->config;
   1d9fe:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
   1da00:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1da02:	695a      	ldr	r2, [r3, #20]
   1da04:	6998      	ldr	r0, [r3, #24]
   1da06:	4302      	orrs	r2, r0
   1da08:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1da0c:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
   1da0e:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1da12:	6918      	ldr	r0, [r3, #16]
   1da14:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
   1da16:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
   1da1a:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
   1da1c:	2301      	movs	r3, #1
	uint32_t pin = 0U;
   1da1e:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
   1da20:	e015      	b.n	1da4e <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
   1da22:	f8df e074 	ldr.w	lr, [pc, #116]	; 1da98 <check_level_trigger_pins+0xa0>
   1da26:	e025      	b.n	1da74 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
   1da28:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
   1da2c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da2e:	2a01      	cmp	r2, #1
   1da30:	d02e      	beq.n	1da90 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
   1da32:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1da36:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   1da3a:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
   1da3e:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1da42:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
   1da46:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
   1da4a:	3501      	adds	r5, #1
		bit <<= 1;
   1da4c:	005b      	lsls	r3, r3, #1
	while (check_pins) {
   1da4e:	b314      	cbz	r4, 1da96 <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
   1da50:	4223      	tst	r3, r4
   1da52:	d0fa      	beq.n	1da4a <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1da54:	7a0e      	ldrb	r6, [r1, #8]
   1da56:	f005 021f 	and.w	r2, r5, #31
   1da5a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
   1da5e:	423b      	tst	r3, r7
   1da60:	d1e2      	bne.n	1da28 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
   1da62:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
   1da66:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1da6a:	f1be 0f01 	cmp.w	lr, #1
   1da6e:	d0d8      	beq.n	1da22 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
   1da70:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1da74:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1da78:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1da7c:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
   1da80:	2e02      	cmp	r6, #2
   1da82:	d1d1      	bne.n	1da28 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
   1da84:	f8dc 6000 	ldr.w	r6, [ip]
   1da88:	431e      	orrs	r6, r3
   1da8a:	f8cc 6000 	str.w	r6, [ip]
   1da8e:	e7cb      	b.n	1da28 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
   1da90:	f8df e004 	ldr.w	lr, [pc, #4]	; 1da98 <check_level_trigger_pins+0xa0>
   1da94:	e7cf      	b.n	1da36 <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
   1da96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1da98:	50000300 	.word	0x50000300

0001da9c <gpiote_pin_cleanup>:
{
   1da9c:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1da9e:	4b14      	ldr	r3, [pc, #80]	; (1daf0 <gpiote_pin_cleanup+0x54>)
   1daa0:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
   1daa4:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1daa6:	2300      	movs	r3, #0
   1daa8:	e000      	b.n	1daac <gpiote_pin_cleanup+0x10>
   1daaa:	3301      	adds	r3, #1
   1daac:	2b07      	cmp	r3, #7
   1daae:	d81d      	bhi.n	1daec <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1dab0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1dab4:	490e      	ldr	r1, [pc, #56]	; (1daf0 <gpiote_pin_cleanup+0x54>)
   1dab6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1daba:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1dabe:	4290      	cmp	r0, r2
   1dac0:	d1f3      	bne.n	1daaa <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
   1dac2:	fa24 f203 	lsr.w	r2, r4, r3
   1dac6:	f012 0f01 	tst.w	r2, #1
   1daca:	d0ee      	beq.n	1daaa <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1dacc:	460a      	mov	r2, r1
   1dace:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   1dad2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   1dad6:	f021 0101 	bic.w	r1, r1, #1
   1dada:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1dade:	2101      	movs	r1, #1
   1dae0:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
   1dae2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1dae6:	b2d8      	uxtb	r0, r3
   1dae8:	f001 fc38 	bl	1f35c <nrfx_gpiote_channel_free>
}
   1daec:	bd10      	pop	{r4, pc}
   1daee:	bf00      	nop
   1daf0:	40006000 	.word	0x40006000

0001daf4 <gpiote_channel_alloc>:
{
   1daf4:	b570      	push	{r4, r5, r6, lr}
   1daf6:	b082      	sub	sp, #8
   1daf8:	4604      	mov	r4, r0
   1dafa:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1dafc:	f10d 0007 	add.w	r0, sp, #7
   1db00:	f001 fc48 	bl	1f394 <nrfx_gpiote_channel_alloc>
   1db04:	4b1c      	ldr	r3, [pc, #112]	; (1db78 <gpiote_channel_alloc+0x84>)
   1db06:	4298      	cmp	r0, r3
   1db08:	d132      	bne.n	1db70 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1db0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1db0e:	f103 0240 	add.w	r2, r3, #64	; 0x40
   1db12:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1db14:	4e19      	ldr	r6, [pc, #100]	; (1db7c <gpiote_channel_alloc+0x88>)
   1db16:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1db1a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1db1e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1db22:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1db26:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1db2a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   1db2e:	0224      	lsls	r4, r4, #8
   1db30:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
   1db34:	042d      	lsls	r5, r5, #16
   1db36:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1db3a:	432c      	orrs	r4, r5
   1db3c:	430c      	orrs	r4, r1
   1db3e:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
   1db42:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1db46:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1db4a:	2000      	movs	r0, #0
   1db4c:	6018      	str	r0, [r3, #0]
   1db4e:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1db50:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1db54:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1db58:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
   1db5c:	f042 0201 	orr.w	r2, r2, #1
   1db60:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1db64:	2301      	movs	r3, #1
   1db66:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
   1db68:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
   1db6c:	b002      	add	sp, #8
   1db6e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   1db70:	f06f 0012 	mvn.w	r0, #18
   1db74:	e7fa      	b.n	1db6c <gpiote_channel_alloc+0x78>
   1db76:	bf00      	nop
   1db78:	0bad0000 	.word	0x0bad0000
   1db7c:	40006000 	.word	0x40006000

0001db80 <gpiote_pin_int_cfg>:
{
   1db80:	b570      	push	{r4, r5, r6, lr}
   1db82:	460d      	mov	r5, r1
	return port->data;
   1db84:	6906      	ldr	r6, [r0, #16]
	return port->config;
   1db86:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1db88:	7a1b      	ldrb	r3, [r3, #8]
   1db8a:	f001 041f 	and.w	r4, r1, #31
   1db8e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
   1db92:	4620      	mov	r0, r4
   1db94:	f7ff ff82 	bl	1da9c <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
   1db98:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
   1db9c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1db9e:	2b01      	cmp	r3, #1
   1dba0:	d020      	beq.n	1dbe4 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
   1dba2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1dba6:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
   1dbaa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   1dbae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1dbb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
   1dbb6:	68f3      	ldr	r3, [r6, #12]
   1dbb8:	40eb      	lsrs	r3, r5
   1dbba:	f013 0f01 	tst.w	r3, #1
   1dbbe:	d02f      	beq.n	1dc20 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
   1dbc0:	6973      	ldr	r3, [r6, #20]
   1dbc2:	40eb      	lsrs	r3, r5
   1dbc4:	f013 0f01 	tst.w	r3, #1
   1dbc8:	d015      	beq.n	1dbf6 <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
   1dbca:	69b3      	ldr	r3, [r6, #24]
   1dbcc:	40eb      	lsrs	r3, r5
   1dbce:	f013 0f01 	tst.w	r3, #1
   1dbd2:	d109      	bne.n	1dbe8 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1dbd4:	6931      	ldr	r1, [r6, #16]
   1dbd6:	fa21 f505 	lsr.w	r5, r1, r5
   1dbda:	f015 0f01 	tst.w	r5, #1
   1dbde:	d008      	beq.n	1dbf2 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
   1dbe0:	2101      	movs	r1, #1
   1dbe2:	e002      	b.n	1dbea <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
   1dbe4:	4a0f      	ldr	r2, [pc, #60]	; (1dc24 <gpiote_pin_int_cfg+0xa4>)
   1dbe6:	e7de      	b.n	1dba6 <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1dbe8:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
   1dbea:	4620      	mov	r0, r4
   1dbec:	f7ff ff82 	bl	1daf4 <gpiote_channel_alloc>
   1dbf0:	e017      	b.n	1dc22 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
   1dbf2:	2102      	movs	r1, #2
   1dbf4:	e7f9      	b.n	1dbea <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1dbf6:	6931      	ldr	r1, [r6, #16]
   1dbf8:	fa21 f505 	lsr.w	r5, r1, r5
   1dbfc:	f015 0f01 	tst.w	r5, #1
   1dc00:	d10c      	bne.n	1dc1c <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
   1dc02:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1dc04:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   1dc08:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1dc0c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1dc10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1dc14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
   1dc18:	2000      	movs	r0, #0
}
   1dc1a:	e002      	b.n	1dc22 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
   1dc1c:	2102      	movs	r1, #2
   1dc1e:	e7f1      	b.n	1dc04 <gpiote_pin_int_cfg+0x84>
	int res = 0;
   1dc20:	2000      	movs	r0, #0
}
   1dc22:	bd70      	pop	{r4, r5, r6, pc}
   1dc24:	50000300 	.word	0x50000300

0001dc28 <gpio_nrfx_pin_interrupt_configure>:
{
   1dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
   1dc2a:	6904      	ldr	r4, [r0, #16]
	return port->config;
   1dc2c:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1dc2e:	7a2e      	ldrb	r6, [r5, #8]
   1dc30:	f001 051f 	and.w	r5, r1, #31
   1dc34:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   1dc38:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1dc3c:	d025      	beq.n	1dc8a <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1dc3e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1dc42:	d035      	beq.n	1dcb0 <gpio_nrfx_pin_interrupt_configure+0x88>
   1dc44:	68e5      	ldr	r5, [r4, #12]
   1dc46:	2601      	movs	r6, #1
   1dc48:	408e      	lsls	r6, r1
   1dc4a:	4335      	orrs	r5, r6
   1dc4c:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1dc4e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1dc52:	d033      	beq.n	1dcbc <gpio_nrfx_pin_interrupt_configure+0x94>
   1dc54:	6962      	ldr	r2, [r4, #20]
   1dc56:	2501      	movs	r5, #1
   1dc58:	408d      	lsls	r5, r1
   1dc5a:	ea22 0205 	bic.w	r2, r2, r5
   1dc5e:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1dc60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1dc64:	d02f      	beq.n	1dcc6 <gpio_nrfx_pin_interrupt_configure+0x9e>
   1dc66:	69a2      	ldr	r2, [r4, #24]
   1dc68:	2501      	movs	r5, #1
   1dc6a:	408d      	lsls	r5, r1
   1dc6c:	ea22 0205 	bic.w	r2, r2, r5
   1dc70:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1dc72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1dc76:	d02b      	beq.n	1dcd0 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1dc78:	6923      	ldr	r3, [r4, #16]
   1dc7a:	2201      	movs	r2, #1
   1dc7c:	408a      	lsls	r2, r1
   1dc7e:	ea23 0302 	bic.w	r3, r3, r2
   1dc82:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
   1dc84:	f7ff ff7c 	bl	1db80 <gpiote_pin_int_cfg>
}
   1dc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   1dc8a:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
   1dc8e:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1dc90:	2d01      	cmp	r5, #1
   1dc92:	d00b      	beq.n	1dcac <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
   1dc94:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1dc98:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
   1dc9c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1dca0:	f015 0f01 	tst.w	r5, #1
   1dca4:	d0cb      	beq.n	1dc3e <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
   1dca6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1dcaa:	e7ed      	b.n	1dc88 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
   1dcac:	4f0b      	ldr	r7, [pc, #44]	; (1dcdc <gpio_nrfx_pin_interrupt_configure+0xb4>)
   1dcae:	e7f3      	b.n	1dc98 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1dcb0:	68e5      	ldr	r5, [r4, #12]
   1dcb2:	2601      	movs	r6, #1
   1dcb4:	408e      	lsls	r6, r1
   1dcb6:	ea25 0506 	bic.w	r5, r5, r6
   1dcba:	e7c7      	b.n	1dc4c <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1dcbc:	6962      	ldr	r2, [r4, #20]
   1dcbe:	2501      	movs	r5, #1
   1dcc0:	408d      	lsls	r5, r1
   1dcc2:	432a      	orrs	r2, r5
   1dcc4:	e7cb      	b.n	1dc5e <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1dcc6:	69a2      	ldr	r2, [r4, #24]
   1dcc8:	2501      	movs	r5, #1
   1dcca:	408d      	lsls	r5, r1
   1dccc:	432a      	orrs	r2, r5
   1dcce:	e7cf      	b.n	1dc70 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1dcd0:	6923      	ldr	r3, [r4, #16]
   1dcd2:	2201      	movs	r2, #1
   1dcd4:	408a      	lsls	r2, r1
   1dcd6:	4313      	orrs	r3, r2
   1dcd8:	e7d3      	b.n	1dc82 <gpio_nrfx_pin_interrupt_configure+0x5a>
   1dcda:	bf00      	nop
   1dcdc:	50000300 	.word	0x50000300

0001dce0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1dce0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1dce2:	4b0b      	ldr	r3, [pc, #44]	; (1dd10 <gpio_nrfx_init+0x30>)
   1dce4:	781b      	ldrb	r3, [r3, #0]
   1dce6:	b10b      	cbz	r3, 1dcec <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1dce8:	2000      	movs	r0, #0
   1dcea:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
   1dcec:	4b08      	ldr	r3, [pc, #32]	; (1dd10 <gpio_nrfx_init+0x30>)
   1dcee:	2201      	movs	r2, #1
   1dcf0:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1dcf2:	2200      	movs	r2, #0
   1dcf4:	2105      	movs	r1, #5
   1dcf6:	2006      	movs	r0, #6
   1dcf8:	f7f7 fa58 	bl	151ac <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
   1dcfc:	2006      	movs	r0, #6
   1dcfe:	f7f7 fa23 	bl	15148 <arch_irq_enable>
   1dd02:	4b04      	ldr	r3, [pc, #16]	; (1dd14 <gpio_nrfx_init+0x34>)
   1dd04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1dd08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1dd0c:	e7ec      	b.n	1dce8 <gpio_nrfx_init+0x8>
   1dd0e:	bf00      	nop
   1dd10:	20004753 	.word	0x20004753
   1dd14:	40006000 	.word	0x40006000

0001dd18 <gpiote_event_handler>:
{
   1dd18:	b570      	push	{r4, r5, r6, lr}
   1dd1a:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1dd1c:	2300      	movs	r3, #0
   1dd1e:	9302      	str	r3, [sp, #8]
   1dd20:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   1dd22:	9300      	str	r3, [sp, #0]
   1dd24:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd26:	4b46      	ldr	r3, [pc, #280]	; (1de40 <gpiote_event_handler+0x128>)
   1dd28:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
   1dd2a:	b90c      	cbnz	r4, 1dd30 <gpiote_event_handler+0x18>
{
   1dd2c:	2100      	movs	r1, #0
   1dd2e:	e011      	b.n	1dd54 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   1dd30:	4d44      	ldr	r5, [pc, #272]	; (1de44 <gpiote_event_handler+0x12c>)
   1dd32:	4669      	mov	r1, sp
   1dd34:	4628      	mov	r0, r5
   1dd36:	f7ff fe5f 	bl	1d9f8 <check_level_trigger_pins>
		fired_triggers[0] =
   1dd3a:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1dd3c:	a901      	add	r1, sp, #4
   1dd3e:	f105 0018 	add.w	r0, r5, #24
   1dd42:	f7ff fe59 	bl	1d9f8 <check_level_trigger_pins>
		fired_triggers[1] =
   1dd46:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1dd48:	4b3d      	ldr	r3, [pc, #244]	; (1de40 <gpiote_event_handler+0x128>)
   1dd4a:	2200      	movs	r2, #0
   1dd4c:	601a      	str	r2, [r3, #0]
   1dd4e:	681b      	ldr	r3, [r3, #0]
}
   1dd50:	e7ec      	b.n	1dd2c <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1dd52:	3101      	adds	r1, #1
   1dd54:	2907      	cmp	r1, #7
   1dd56:	d82d      	bhi.n	1ddb4 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
   1dd58:	f101 0340 	add.w	r3, r1, #64	; 0x40
   1dd5c:	009b      	lsls	r3, r3, #2
   1dd5e:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1dd60:	2301      	movs	r3, #1
   1dd62:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
   1dd64:	4838      	ldr	r0, [pc, #224]	; (1de48 <gpiote_event_handler+0x130>)
   1dd66:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
   1dd6a:	4203      	tst	r3, r0
   1dd6c:	d0f1      	beq.n	1dd52 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dd6e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1dd72:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1dd76:	681b      	ldr	r3, [r3, #0]
   1dd78:	2b00      	cmp	r3, #0
   1dd7a:	d0ea      	beq.n	1dd52 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1dd7c:	f501 73a2 	add.w	r3, r1, #324	; 0x144
   1dd80:	4831      	ldr	r0, [pc, #196]	; (1de48 <gpiote_event_handler+0x130>)
   1dd82:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1dd86:	f3c0 3340 	ubfx	r3, r0, #13, #1
   1dd8a:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1dd8e:	2501      	movs	r5, #1
   1dd90:	fa05 f000 	lsl.w	r0, r5, r0
   1dd94:	ad04      	add	r5, sp, #16
   1dd96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1dd9a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   1dd9e:	4305      	orrs	r5, r0
   1dda0:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
   1dda4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
   1dda8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1ddac:	2200      	movs	r2, #0
   1ddae:	601a      	str	r2, [r3, #0]
   1ddb0:	681b      	ldr	r3, [r3, #0]
}
   1ddb2:	e7ce      	b.n	1dd52 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
   1ddb4:	9e02      	ldr	r6, [sp, #8]
   1ddb6:	b92e      	cbnz	r6, 1ddc4 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
   1ddb8:	9e03      	ldr	r6, [sp, #12]
   1ddba:	b9ee      	cbnz	r6, 1ddf8 <gpiote_event_handler+0xe0>
	if (port_event) {
   1ddbc:	2c00      	cmp	r4, #0
   1ddbe:	d135      	bne.n	1de2c <gpiote_event_handler+0x114>
}
   1ddc0:	b004      	add	sp, #16
   1ddc2:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
   1ddc4:	4b21      	ldr	r3, [pc, #132]	; (1de4c <gpiote_event_handler+0x134>)
   1ddc6:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ddc8:	b119      	cbz	r1, 1ddd2 <gpiote_event_handler+0xba>
   1ddca:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ddcc:	b149      	cbz	r1, 1dde2 <gpiote_event_handler+0xca>
	return node->next;
   1ddce:	680d      	ldr	r5, [r1, #0]
   1ddd0:	e007      	b.n	1dde2 <gpiote_event_handler+0xca>
   1ddd2:	460d      	mov	r5, r1
   1ddd4:	e005      	b.n	1dde2 <gpiote_event_handler+0xca>
   1ddd6:	b16d      	cbz	r5, 1ddf4 <gpiote_event_handler+0xdc>
   1ddd8:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ddda:	b105      	cbz	r5, 1ddde <gpiote_event_handler+0xc6>
	return node->next;
   1dddc:	682b      	ldr	r3, [r5, #0]
   1ddde:	4629      	mov	r1, r5
   1dde0:	461d      	mov	r5, r3
   1dde2:	2900      	cmp	r1, #0
   1dde4:	d0e8      	beq.n	1ddb8 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
   1dde6:	688a      	ldr	r2, [r1, #8]
   1dde8:	4032      	ands	r2, r6
   1ddea:	d0f4      	beq.n	1ddd6 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1ddec:	684b      	ldr	r3, [r1, #4]
   1ddee:	4815      	ldr	r0, [pc, #84]	; (1de44 <gpiote_event_handler+0x12c>)
   1ddf0:	4798      	blx	r3
   1ddf2:	e7f0      	b.n	1ddd6 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ddf4:	462b      	mov	r3, r5
   1ddf6:	e7f2      	b.n	1ddde <gpiote_event_handler+0xc6>
	return list->head;
   1ddf8:	4b15      	ldr	r3, [pc, #84]	; (1de50 <gpiote_event_handler+0x138>)
   1ddfa:	6859      	ldr	r1, [r3, #4]
   1ddfc:	b119      	cbz	r1, 1de06 <gpiote_event_handler+0xee>
   1ddfe:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1de00:	b149      	cbz	r1, 1de16 <gpiote_event_handler+0xfe>
	return node->next;
   1de02:	680d      	ldr	r5, [r1, #0]
   1de04:	e007      	b.n	1de16 <gpiote_event_handler+0xfe>
   1de06:	460d      	mov	r5, r1
   1de08:	e005      	b.n	1de16 <gpiote_event_handler+0xfe>
   1de0a:	b16d      	cbz	r5, 1de28 <gpiote_event_handler+0x110>
   1de0c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
   1de0e:	b105      	cbz	r5, 1de12 <gpiote_event_handler+0xfa>
	return node->next;
   1de10:	682b      	ldr	r3, [r5, #0]
   1de12:	4629      	mov	r1, r5
   1de14:	461d      	mov	r5, r3
   1de16:	2900      	cmp	r1, #0
   1de18:	d0d0      	beq.n	1ddbc <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
   1de1a:	688a      	ldr	r2, [r1, #8]
   1de1c:	4032      	ands	r2, r6
   1de1e:	d0f4      	beq.n	1de0a <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   1de20:	684b      	ldr	r3, [r1, #4]
   1de22:	480c      	ldr	r0, [pc, #48]	; (1de54 <gpiote_event_handler+0x13c>)
   1de24:	4798      	blx	r3
   1de26:	e7f0      	b.n	1de0a <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1de28:	462b      	mov	r3, r5
   1de2a:	e7f2      	b.n	1de12 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1de2c:	4c05      	ldr	r4, [pc, #20]	; (1de44 <gpiote_event_handler+0x12c>)
   1de2e:	4620      	mov	r0, r4
   1de30:	f7ff fda8 	bl	1d984 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1de34:	f104 0018 	add.w	r0, r4, #24
   1de38:	f7ff fda4 	bl	1d984 <cfg_level_pins>
}
   1de3c:	e7c0      	b.n	1ddc0 <gpiote_event_handler+0xa8>
   1de3e:	bf00      	nop
   1de40:	4000617c 	.word	0x4000617c
   1de44:	0002c418 	.word	0x0002c418
   1de48:	40006000 	.word	0x40006000
   1de4c:	20003578 	.word	0x20003578
   1de50:	20003594 	.word	0x20003594
   1de54:	0002c430 	.word	0x0002c430

0001de58 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
   1de58:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
   1de5a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
   1de5c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
   1de60:	d06f      	beq.n	1df42 <baudrate_set+0xea>
   1de62:	d83a      	bhi.n	1deda <baudrate_set+0x82>
   1de64:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
   1de68:	d06e      	beq.n	1df48 <baudrate_set+0xf0>
   1de6a:	d90a      	bls.n	1de82 <baudrate_set+0x2a>
   1de6c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
   1de70:	d075      	beq.n	1df5e <baudrate_set+0x106>
   1de72:	d924      	bls.n	1debe <baudrate_set+0x66>
   1de74:	f647 2312 	movw	r3, #31250	; 0x7a12
   1de78:	4299      	cmp	r1, r3
   1de7a:	d12b      	bne.n	1ded4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1de7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1de80:	e013      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1de82:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
   1de86:	d061      	beq.n	1df4c <baudrate_set+0xf4>
   1de88:	d907      	bls.n	1de9a <baudrate_set+0x42>
   1de8a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
   1de8e:	d063      	beq.n	1df58 <baudrate_set+0x100>
   1de90:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
   1de94:	d110      	bne.n	1deb8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1de96:	4b3c      	ldr	r3, [pc, #240]	; (1df88 <baudrate_set+0x130>)
   1de98:	e007      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1de9a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
   1de9e:	d058      	beq.n	1df52 <baudrate_set+0xfa>
   1dea0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
   1dea4:	d105      	bne.n	1deb2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
   1dea6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1deaa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
   1deae:	2000      	movs	r0, #0
   1deb0:	4770      	bx	lr
	switch (baudrate) {
   1deb2:	f06f 0015 	mvn.w	r0, #21
   1deb6:	4770      	bx	lr
   1deb8:	f06f 0015 	mvn.w	r0, #21
   1debc:	4770      	bx	lr
   1debe:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
   1dec2:	d04e      	beq.n	1df62 <baudrate_set+0x10a>
   1dec4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
   1dec8:	d101      	bne.n	1dece <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1deca:	4b30      	ldr	r3, [pc, #192]	; (1df8c <baudrate_set+0x134>)
   1decc:	e7ed      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1dece:	f06f 0015 	mvn.w	r0, #21
   1ded2:	4770      	bx	lr
   1ded4:	f06f 0015 	mvn.w	r0, #21
   1ded8:	4770      	bx	lr
   1deda:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
   1dede:	d042      	beq.n	1df66 <baudrate_set+0x10e>
   1dee0:	d909      	bls.n	1def6 <baudrate_set+0x9e>
   1dee2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
   1dee6:	d046      	beq.n	1df76 <baudrate_set+0x11e>
   1dee8:	d91f      	bls.n	1df2a <baudrate_set+0xd2>
   1deea:	4b29      	ldr	r3, [pc, #164]	; (1df90 <baudrate_set+0x138>)
   1deec:	4299      	cmp	r1, r3
   1deee:	d148      	bne.n	1df82 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1def0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1def4:	e7d9      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1def6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
   1defa:	d037      	beq.n	1df6c <baudrate_set+0x114>
   1defc:	d905      	bls.n	1df0a <baudrate_set+0xb2>
   1defe:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
   1df02:	d10f      	bne.n	1df24 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1df04:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1df08:	e7cf      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1df0a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
   1df0e:	4299      	cmp	r1, r3
   1df10:	d02e      	beq.n	1df70 <baudrate_set+0x118>
   1df12:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
   1df16:	d102      	bne.n	1df1e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1df18:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1df1c:	e7c5      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1df1e:	f06f 0015 	mvn.w	r0, #21
   1df22:	4770      	bx	lr
   1df24:	f06f 0015 	mvn.w	r0, #21
   1df28:	4770      	bx	lr
   1df2a:	4b1a      	ldr	r3, [pc, #104]	; (1df94 <baudrate_set+0x13c>)
   1df2c:	4299      	cmp	r1, r3
   1df2e:	d025      	beq.n	1df7c <baudrate_set+0x124>
   1df30:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
   1df34:	d102      	bne.n	1df3c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1df36:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1df3a:	e7b6      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1df3c:	f06f 0015 	mvn.w	r0, #21
   1df40:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1df42:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1df46:	e7b0      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1df48:	4b13      	ldr	r3, [pc, #76]	; (1df98 <baudrate_set+0x140>)
   1df4a:	e7ae      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1df4c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1df50:	e7ab      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1df52:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1df56:	e7a8      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1df58:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1df5c:	e7a5      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1df5e:	4b0f      	ldr	r3, [pc, #60]	; (1df9c <baudrate_set+0x144>)
   1df60:	e7a3      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1df62:	4b0f      	ldr	r3, [pc, #60]	; (1dfa0 <baudrate_set+0x148>)
   1df64:	e7a1      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1df66:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1df6a:	e79e      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1df6c:	4b0d      	ldr	r3, [pc, #52]	; (1dfa4 <baudrate_set+0x14c>)
   1df6e:	e79c      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1df70:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1df74:	e799      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1df76:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1df7a:	e796      	b.n	1deaa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1df7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1df80:	e793      	b.n	1deaa <baudrate_set+0x52>
	switch (baudrate) {
   1df82:	f06f 0015 	mvn.w	r0, #21
}
   1df86:	4770      	bx	lr
   1df88:	0013b000 	.word	0x0013b000
   1df8c:	004ea000 	.word	0x004ea000
   1df90:	000f4240 	.word	0x000f4240
   1df94:	0003d090 	.word	0x0003d090
   1df98:	00275000 	.word	0x00275000
   1df9c:	0075c000 	.word	0x0075c000
   1dfa0:	003af000 	.word	0x003af000
   1dfa4:	013a9000 	.word	0x013a9000

0001dfa8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfac:	4605      	mov	r5, r0
   1dfae:	460f      	mov	r7, r1
	return dev->data;
   1dfb0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1dfb4:	f00d fbc6 	bl	2b744 <k_is_in_isr>
   1dfb8:	b920      	cbnz	r0, 1dfc4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
   1dfba:	4b16      	ldr	r3, [pc, #88]	; (1e014 <uarte_nrfx_poll_out+0x6c>)
   1dfbc:	781b      	ldrb	r3, [r3, #0]
   1dfbe:	b1ab      	cbz	r3, 1dfec <uarte_nrfx_poll_out+0x44>
   1dfc0:	2300      	movs	r3, #0
   1dfc2:	e000      	b.n	1dfc6 <uarte_nrfx_poll_out+0x1e>
   1dfc4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
   1dfc6:	b19b      	cbz	r3, 1dff0 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
   1dfc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1dfcc:	f3ef 8411 	mrs	r4, BASEPRI
   1dfd0:	f383 8812 	msr	BASEPRI_MAX, r3
   1dfd4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
   1dfd8:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
   1dfda:	4628      	mov	r0, r5
   1dfdc:	f00c fc3b 	bl	2a856 <is_tx_ready>
   1dfe0:	b950      	cbnz	r0, 1dff8 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
   1dfe2:	f384 8811 	msr	BASEPRI, r4
   1dfe6:	f3bf 8f6f 	isb	sy
}
   1dfea:	e7ed      	b.n	1dfc8 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1dfec:	2301      	movs	r3, #1
   1dfee:	e7ea      	b.n	1dfc6 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
   1dff0:	4628      	mov	r0, r5
   1dff2:	f00c fd51 	bl	2aa98 <wait_tx_ready>
   1dff6:	4606      	mov	r6, r0
	}

	data->char_out = c;
   1dff8:	4641      	mov	r1, r8
   1dffa:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
   1dffe:	2201      	movs	r2, #1
   1e000:	4628      	mov	r0, r5
   1e002:	f00c fc42 	bl	2a88a <tx_start>
	__asm__ volatile(
   1e006:	f386 8811 	msr	BASEPRI, r6
   1e00a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   1e00e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e012:	bf00      	nop
   1e014:	20004759 	.word	0x20004759

0001e018 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
   1e018:	b538      	push	{r3, r4, r5, lr}
   1e01a:	4604      	mov	r4, r0
   1e01c:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e01e:	f101 0016 	add.w	r0, r1, #22
   1e022:	f001 fad9 	bl	1f5d8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e026:	4b14      	ldr	r3, [pc, #80]	; (1e078 <endtx_stoptx_ppi_init+0x60>)
   1e028:	4298      	cmp	r0, r3
   1e02a:	d111      	bne.n	1e050 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e02c:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e02e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
   1e032:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e034:	4a11      	ldr	r2, [pc, #68]	; (1e07c <endtx_stoptx_ppi_init+0x64>)
   1e036:	33a2      	adds	r3, #162	; 0xa2
   1e038:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e03c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1e040:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e042:	7da9      	ldrb	r1, [r5, #22]
   1e044:	2301      	movs	r3, #1
   1e046:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
   1e048:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
   1e04c:	2000      	movs	r0, #0
}
   1e04e:	bd38      	pop	{r3, r4, r5, pc}
   1e050:	4b0b      	ldr	r3, [pc, #44]	; (1e080 <endtx_stoptx_ppi_init+0x68>)
   1e052:	4a0c      	ldr	r2, [pc, #48]	; (1e084 <endtx_stoptx_ppi_init+0x6c>)
   1e054:	1a9b      	subs	r3, r3, r2
   1e056:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
   1e058:	f04f 0100 	mov.w	r1, #0
   1e05c:	2201      	movs	r2, #1
   1e05e:	f362 0102 	bfi	r1, r2, #0, #3
   1e062:	f36f 01c5 	bfc	r1, #3, #3
   1e066:	f363 118f 	bfi	r1, r3, #6, #10
   1e06a:	4807      	ldr	r0, [pc, #28]	; (1e088 <endtx_stoptx_ppi_init+0x70>)
   1e06c:	f7f3 ffde 	bl	1202c <log_0>
		return -EIO;
   1e070:	f06f 0004 	mvn.w	r0, #4
   1e074:	e7eb      	b.n	1e04e <endtx_stoptx_ppi_init+0x36>
   1e076:	bf00      	nop
   1e078:	0bad0000 	.word	0x0bad0000
   1e07c:	4001f000 	.word	0x4001f000
   1e080:	0002c6c8 	.word	0x0002c6c8
   1e084:	0002c610 	.word	0x0002c610
   1e088:	0002ee18 	.word	0x0002ee18

0001e08c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
   1e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
   1e08e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   1e090:	6825      	ldr	r5, [r4, #0]
	return dev->data;
   1e092:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e094:	2300      	movs	r3, #0
   1e096:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1e09a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
   1e09c:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
   1e09e:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
   1e0a2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e0a4:	2b01      	cmp	r3, #1
   1e0a6:	f000 8097 	beq.w	1e1d8 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
   1e0aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e0ae:	2301      	movs	r3, #1
   1e0b0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
   1e0b2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
   1e0b6:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
   1e0b8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e0bc:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e0be:	2b01      	cmp	r3, #1
   1e0c0:	f000 808c 	beq.w	1e1dc <uarte_instance_init+0x150>
        case 0: return NRF_P0;
   1e0c4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e0c8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1e0cc:	2203      	movs	r2, #3
   1e0ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1e0d2:	68e3      	ldr	r3, [r4, #12]
   1e0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e0d8:	d00c      	beq.n	1e0f4 <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
   1e0da:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
   1e0dc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e0e0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e0e2:	2b01      	cmp	r3, #1
   1e0e4:	d07c      	beq.n	1e1e0 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
   1e0e6:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e0ea:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e0ec:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1e0f0:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
   1e0f4:	68a2      	ldr	r2, [r4, #8]
   1e0f6:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
   1e0f8:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e0fc:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e100:	6923      	ldr	r3, [r4, #16]
   1e102:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e106:	d00c      	beq.n	1e122 <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
   1e108:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
   1e10a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e10e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e110:	2b01      	cmp	r3, #1
   1e112:	d067      	beq.n	1e1e4 <uarte_instance_init+0x158>
        case 0: return NRF_P0;
   1e114:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1e118:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   1e11a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1e11e:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e122:	6963      	ldr	r3, [r4, #20]
   1e124:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e128:	d017      	beq.n	1e15a <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
   1e12a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e12e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e130:	2b01      	cmp	r3, #1
   1e132:	d059      	beq.n	1e1e8 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
   1e134:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e138:	2301      	movs	r3, #1
   1e13a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e13c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
   1e140:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
   1e142:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e146:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1e148:	2b01      	cmp	r3, #1
   1e14a:	d04f      	beq.n	1e1ec <uarte_instance_init+0x160>
        case 0: return NRF_P0;
   1e14c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
   1e150:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
   1e154:	2203      	movs	r2, #3
   1e156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
   1e15a:	6962      	ldr	r2, [r4, #20]
   1e15c:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
   1e15e:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   1e162:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
   1e166:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e168:	3104      	adds	r1, #4
   1e16a:	f00c fb07 	bl	2a77c <uarte_nrfx_configure>
	if (err) {
   1e16e:	4607      	mov	r7, r0
   1e170:	bb80      	cbnz	r0, 1e1d4 <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1e172:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1e174:	f013 0f08 	tst.w	r3, #8
   1e178:	d13a      	bne.n	1e1f0 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e17a:	2308      	movs	r3, #8
   1e17c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1e180:	68e3      	ldr	r3, [r4, #12]
   1e182:	f1b3 3fff 	cmp.w	r3, #4294967295
   1e186:	d00c      	beq.n	1e1a2 <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e188:	2300      	movs	r3, #0
   1e18a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1e18e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1e192:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e196:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e19a:	2301      	movs	r3, #1
   1e19c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e1a0:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1e1a2:	6863      	ldr	r3, [r4, #4]
   1e1a4:	f013 0f08 	tst.w	r3, #8
   1e1a8:	d103      	bne.n	1e1b2 <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
   1e1aa:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e1ae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1e1b2:	6863      	ldr	r3, [r4, #4]
   1e1b4:	f013 0f10 	tst.w	r3, #16
   1e1b8:	d003      	beq.n	1e1c2 <uarte_instance_init+0x136>
   1e1ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1e1be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1e1c2:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e1c4:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e1c8:	2300      	movs	r3, #0
   1e1ca:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e1ce:	2301      	movs	r3, #1
   1e1d0:	60ab      	str	r3, [r5, #8]
   1e1d2:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1e1d4:	4638      	mov	r0, r7
   1e1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
   1e1d8:	4a09      	ldr	r2, [pc, #36]	; (1e200 <uarte_instance_init+0x174>)
   1e1da:	e768      	b.n	1e0ae <uarte_instance_init+0x22>
   1e1dc:	4908      	ldr	r1, [pc, #32]	; (1e200 <uarte_instance_init+0x174>)
   1e1de:	e773      	b.n	1e0c8 <uarte_instance_init+0x3c>
   1e1e0:	4f07      	ldr	r7, [pc, #28]	; (1e200 <uarte_instance_init+0x174>)
   1e1e2:	e782      	b.n	1e0ea <uarte_instance_init+0x5e>
   1e1e4:	4f06      	ldr	r7, [pc, #24]	; (1e200 <uarte_instance_init+0x174>)
   1e1e6:	e797      	b.n	1e118 <uarte_instance_init+0x8c>
   1e1e8:	4905      	ldr	r1, [pc, #20]	; (1e200 <uarte_instance_init+0x174>)
   1e1ea:	e7a5      	b.n	1e138 <uarte_instance_init+0xac>
   1e1ec:	4904      	ldr	r1, [pc, #16]	; (1e200 <uarte_instance_init+0x174>)
   1e1ee:	e7af      	b.n	1e150 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
   1e1f0:	4631      	mov	r1, r6
   1e1f2:	4628      	mov	r0, r5
   1e1f4:	f7ff ff10 	bl	1e018 <endtx_stoptx_ppi_init>
		if (err < 0) {
   1e1f8:	2800      	cmp	r0, #0
   1e1fa:	dabe      	bge.n	1e17a <uarte_instance_init+0xee>
			return err;
   1e1fc:	4607      	mov	r7, r0
   1e1fe:	e7e9      	b.n	1e1d4 <uarte_instance_init+0x148>
   1e200:	50000300 	.word	0x50000300

0001e204 <random_byte_get>:
	__asm__ volatile(
   1e204:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e208:	f3ef 8211 	mrs	r2, BASEPRI
   1e20c:	f383 8812 	msr	BASEPRI_MAX, r3
   1e210:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e214:	4b09      	ldr	r3, [pc, #36]	; (1e23c <random_byte_get+0x38>)
   1e216:	681b      	ldr	r3, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e218:	b16b      	cbz	r3, 1e236 <random_byte_get+0x32>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e21a:	4b09      	ldr	r3, [pc, #36]	; (1e240 <random_byte_get+0x3c>)
   1e21c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e220:	b2c0      	uxtb	r0, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e222:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1e226:	2100      	movs	r1, #0
   1e228:	6019      	str	r1, [r3, #0]
   1e22a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1e22c:	f382 8811 	msr	BASEPRI, r2
   1e230:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e234:	4770      	bx	lr
	int retval = -EAGAIN;
   1e236:	f06f 000a 	mvn.w	r0, #10
   1e23a:	e7f7      	b.n	1e22c <random_byte_get+0x28>
   1e23c:	4000d100 	.word	0x4000d100
   1e240:	4000d000 	.word	0x4000d000

0001e244 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e248:	4606      	mov	r6, r0
	uint32_t last  = rngp->last;
   1e24a:	f890 c002 	ldrb.w	ip, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e24e:	78c5      	ldrb	r5, [r0, #3]
   1e250:	462f      	mov	r7, r5
	__asm__ volatile(
   1e252:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e256:	f3ef 8811 	mrs	r8, BASEPRI
   1e25a:	f383 8812 	msr	BASEPRI_MAX, r3
   1e25e:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e262:	7800      	ldrb	r0, [r0, #0]
   1e264:	4604      	mov	r4, r0
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e266:	f896 e001 	ldrb.w	lr, [r6, #1]

	available = (last - first) & mask;
   1e26a:	ebac 0c00 	sub.w	ip, ip, r0
   1e26e:	ea0c 0c05 	and.w	ip, ip, r5
	if (available < len) {
   1e272:	4562      	cmp	r2, ip
   1e274:	d901      	bls.n	1e27a <rng_pool_get+0x36>
		len = available;
   1e276:	fa1f f28c 	uxth.w	r2, ip

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e27a:	1883      	adds	r3, r0, r2
   1e27c:	402b      	ands	r3, r5
   1e27e:	7033      	strb	r3, [r6, #0]
	__asm__ volatile(
   1e280:	f388 8811 	msr	BASEPRI, r8
   1e284:	f3bf 8f6f 	isb	sy
	uint8_t *dst   = buf;
   1e288:	460b      	mov	r3, r1
}
   1e28a:	e006      	b.n	1e29a <rng_pool_get+0x56>
	irq_unlock(key);

	while (likely(len--)) {
		*dst++ = rngp->buffer[first];
   1e28c:	1932      	adds	r2, r6, r4
   1e28e:	7952      	ldrb	r2, [r2, #5]
   1e290:	f803 2b01 	strb.w	r2, [r3], #1
		first = (first + 1) & mask;
   1e294:	3401      	adds	r4, #1
   1e296:	403c      	ands	r4, r7
	while (likely(len--)) {
   1e298:	462a      	mov	r2, r5
   1e29a:	1e55      	subs	r5, r2, #1
   1e29c:	b2ad      	uxth	r5, r5
   1e29e:	2a00      	cmp	r2, #0
   1e2a0:	d1f4      	bne.n	1e28c <rng_pool_get+0x48>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e2a2:	4570      	cmp	r0, lr
   1e2a4:	d10d      	bne.n	1e2c2 <rng_pool_get+0x7e>
	__asm__ volatile(
   1e2a6:	f04f 0040 	mov.w	r0, #64	; 0x40
   1e2aa:	f3ef 8211 	mrs	r2, BASEPRI
   1e2ae:	f380 8812 	msr	BASEPRI_MAX, r0
   1e2b2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e2b6:	7830      	ldrb	r0, [r6, #0]
   1e2b8:	7070      	strb	r0, [r6, #1]
	__asm__ volatile(
   1e2ba:	f382 8811 	msr	BASEPRI, r2
   1e2be:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e2c2:	1a5b      	subs	r3, r3, r1
   1e2c4:	b298      	uxth	r0, r3
	available = available - len;
   1e2c6:	ebac 0c00 	sub.w	ip, ip, r0
	if (available <= rngp->threshold) {
   1e2ca:	7933      	ldrb	r3, [r6, #4]
   1e2cc:	4563      	cmp	r3, ip
   1e2ce:	d302      	bcc.n	1e2d6 <rng_pool_get+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e2d0:	4b02      	ldr	r3, [pc, #8]	; (1e2dc <rng_pool_get+0x98>)
   1e2d2:	2201      	movs	r2, #1
   1e2d4:	601a      	str	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e2da:	bf00      	nop
   1e2dc:	4000d000 	.word	0x4000d000

0001e2e0 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e2e2:	460d      	mov	r5, r1
   1e2e4:	4614      	mov	r4, r2
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e2e6:	f013 0f01 	tst.w	r3, #1
   1e2ea:	d103      	bne.n	1e2f4 <entropy_nrf5_get_entropy_isr+0x14>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e2ec:	4822      	ldr	r0, [pc, #136]	; (1e378 <entropy_nrf5_get_entropy_isr+0x98>)
   1e2ee:	f7ff ffa9 	bl	1e244 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len) {
   1e2f4:	b90a      	cbnz	r2, 1e2fa <entropy_nrf5_get_entropy_isr+0x1a>
	return cnt;
   1e2f6:	4620      	mov	r0, r4
   1e2f8:	e7fb      	b.n	1e2f2 <entropy_nrf5_get_entropy_isr+0x12>
	__asm__ volatile(
   1e2fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   1e2fe:	f3ef 8611 	mrs	r6, BASEPRI
   1e302:	f383 8812 	msr	BASEPRI_MAX, r3
   1e306:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e30a:	200d      	movs	r0, #13
   1e30c:	f7f6 ff40 	bl	15190 <arch_irq_is_enabled>
   1e310:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e312:	200d      	movs	r0, #13
   1e314:	f7f6 ff28 	bl	15168 <arch_irq_disable>
	__asm__ volatile(
   1e318:	f386 8811 	msr	BASEPRI, r6
   1e31c:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e320:	4b16      	ldr	r3, [pc, #88]	; (1e37c <entropy_nrf5_get_entropy_isr+0x9c>)
   1e322:	2200      	movs	r2, #0
   1e324:	601a      	str	r2, [r3, #0]
   1e326:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e328:	4b15      	ldr	r3, [pc, #84]	; (1e380 <entropy_nrf5_get_entropy_isr+0xa0>)
   1e32a:	2201      	movs	r2, #1
   1e32c:	601a      	str	r2, [r3, #0]
   1e32e:	4b15      	ldr	r3, [pc, #84]	; (1e384 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e334:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1e338:	4626      	mov	r6, r4
   1e33a:	e004      	b.n	1e346 <entropy_nrf5_get_entropy_isr+0x66>
   1e33c:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e340:	bf20      	wfe
				__SEV();
   1e342:	bf40      	sev
				__WFE();
   1e344:	bf20      	wfe
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e346:	4b0d      	ldr	r3, [pc, #52]	; (1e37c <entropy_nrf5_get_entropy_isr+0x9c>)
   1e348:	681b      	ldr	r3, [r3, #0]
			while (!nrf_rng_event_check(NRF_RNG,
   1e34a:	2b00      	cmp	r3, #0
   1e34c:	d0f6      	beq.n	1e33c <entropy_nrf5_get_entropy_isr+0x5c>
			byte = random_byte_get();
   1e34e:	f7ff ff59 	bl	1e204 <random_byte_get>
   1e352:	4b0c      	ldr	r3, [pc, #48]	; (1e384 <entropy_nrf5_get_entropy_isr+0xa4>)
   1e354:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   1e358:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
			if (byte < 0) {
   1e35c:	2800      	cmp	r0, #0
   1e35e:	db02      	blt.n	1e366 <entropy_nrf5_get_entropy_isr+0x86>
			buf[--len] = byte;
   1e360:	3e01      	subs	r6, #1
   1e362:	b2b6      	uxth	r6, r6
   1e364:	55a8      	strb	r0, [r5, r6]
		} while (len);
   1e366:	2e00      	cmp	r6, #0
   1e368:	d1ed      	bne.n	1e346 <entropy_nrf5_get_entropy_isr+0x66>
		if (irq_enabled) {
   1e36a:	2f00      	cmp	r7, #0
   1e36c:	d0c3      	beq.n	1e2f6 <entropy_nrf5_get_entropy_isr+0x16>
			irq_enable(IRQN);
   1e36e:	200d      	movs	r0, #13
   1e370:	f7f6 feea 	bl	15148 <arch_irq_enable>
   1e374:	e7bf      	b.n	1e2f6 <entropy_nrf5_get_entropy_isr+0x16>
   1e376:	bf00      	nop
   1e378:	20003600 	.word	0x20003600
   1e37c:	4000d100 	.word	0x4000d100
   1e380:	4000d000 	.word	0x4000d000
   1e384:	e000e100 	.word	0xe000e100

0001e388 <isr>:
{
   1e388:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e38a:	f7ff ff3b 	bl	1e204 <random_byte_get>
	if (byte < 0) {
   1e38e:	2800      	cmp	r0, #0
   1e390:	db06      	blt.n	1e3a0 <isr+0x18>
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e392:	b2c4      	uxtb	r4, r0
   1e394:	4621      	mov	r1, r4
   1e396:	480a      	ldr	r0, [pc, #40]	; (1e3c0 <isr+0x38>)
   1e398:	f00c fbb4 	bl	2ab04 <rng_pool_put>
	if (ret < 0) {
   1e39c:	2800      	cmp	r0, #0
   1e39e:	db00      	blt.n	1e3a2 <isr+0x1a>
}
   1e3a0:	bd10      	pop	{r4, pc}
		ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.thr),
   1e3a2:	4621      	mov	r1, r4
   1e3a4:	4807      	ldr	r0, [pc, #28]	; (1e3c4 <isr+0x3c>)
   1e3a6:	f00c fbad 	bl	2ab04 <rng_pool_put>
		if (ret < 0) {
   1e3aa:	2800      	cmp	r0, #0
   1e3ac:	db03      	blt.n	1e3b6 <isr+0x2e>
	z_impl_k_sem_give(sem);
   1e3ae:	4806      	ldr	r0, [pc, #24]	; (1e3c8 <isr+0x40>)
   1e3b0:	f003 fc66 	bl	21c80 <z_impl_k_sem_give>
}
   1e3b4:	e7f4      	b.n	1e3a0 <isr+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e3b6:	4b05      	ldr	r3, [pc, #20]	; (1e3cc <isr+0x44>)
   1e3b8:	2201      	movs	r2, #1
   1e3ba:	601a      	str	r2, [r3, #0]
}
   1e3bc:	e7f7      	b.n	1e3ae <isr+0x26>
   1e3be:	bf00      	nop
   1e3c0:	20003600 	.word	0x20003600
   1e3c4:	20003615 	.word	0x20003615
   1e3c8:	200035e8 	.word	0x200035e8
   1e3cc:	4000d004 	.word	0x4000d004

0001e3d0 <entropy_nrf5_get_entropy>:
{
   1e3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e3d2:	460f      	mov	r7, r1
   1e3d4:	4614      	mov	r4, r2
	while (len) {
   1e3d6:	e002      	b.n	1e3de <entropy_nrf5_get_entropy+0xe>
		len -= bytes;
   1e3d8:	1b64      	subs	r4, r4, r5
   1e3da:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e3dc:	442f      	add	r7, r5
	while (len) {
   1e3de:	b1e4      	cbz	r4, 1e41a <entropy_nrf5_get_entropy+0x4a>
	return z_impl_k_sem_take(sem, timeout);
   1e3e0:	4e0f      	ldr	r6, [pc, #60]	; (1e420 <entropy_nrf5_get_entropy+0x50>)
   1e3e2:	f04f 32ff 	mov.w	r2, #4294967295
   1e3e6:	f04f 33ff 	mov.w	r3, #4294967295
   1e3ea:	4630      	mov	r0, r6
   1e3ec:	f003 fc70 	bl	21cd0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e3f0:	4622      	mov	r2, r4
   1e3f2:	4639      	mov	r1, r7
   1e3f4:	f106 0045 	add.w	r0, r6, #69	; 0x45
   1e3f8:	f7ff ff24 	bl	1e244 <rng_pool_get>
   1e3fc:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   1e3fe:	4630      	mov	r0, r6
   1e400:	f003 fc3e 	bl	21c80 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e404:	2d00      	cmp	r5, #0
   1e406:	d1e7      	bne.n	1e3d8 <entropy_nrf5_get_entropy+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1e408:	f04f 32ff 	mov.w	r2, #4294967295
   1e40c:	f04f 33ff 	mov.w	r3, #4294967295
   1e410:	f106 0018 	add.w	r0, r6, #24
   1e414:	f003 fc5c 	bl	21cd0 <z_impl_k_sem_take>
			continue;
   1e418:	e7e1      	b.n	1e3de <entropy_nrf5_get_entropy+0xe>
}
   1e41a:	2000      	movs	r0, #0
   1e41c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1e41e:	bf00      	nop
   1e420:	200035d0 	.word	0x200035d0

0001e424 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1e424:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e426:	4c18      	ldr	r4, [pc, #96]	; (1e488 <entropy_nrf5_init+0x64>)
   1e428:	2201      	movs	r2, #1
   1e42a:	4611      	mov	r1, r2
   1e42c:	4620      	mov	r0, r4
   1e42e:	f00d fad2 	bl	2b9d6 <z_impl_k_sem_init>
   1e432:	2201      	movs	r2, #1
   1e434:	2100      	movs	r1, #0
   1e436:	f104 0018 	add.w	r0, r4, #24
   1e43a:	f00d facc 	bl	2b9d6 <z_impl_k_sem_init>
	k_sem_init(&entropy_nrf5_data.sem_lock, 1, 1);

	/* Synching semaphore */
	k_sem_init(&entropy_nrf5_data.sem_sync, 0, 1);

	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.thr),
   1e43e:	2204      	movs	r2, #4
   1e440:	2108      	movs	r1, #8
   1e442:	f104 0045 	add.w	r0, r4, #69	; 0x45
   1e446:	f00c fb71 	bl	2ab2c <rng_pool_init>
		      CONFIG_ENTROPY_NRF5_THR_POOL_SIZE,
		      CONFIG_ENTROPY_NRF5_THR_THRESHOLD);
	rng_pool_init((struct rng_pool *)(entropy_nrf5_data.isr),
   1e44a:	220c      	movs	r2, #12
   1e44c:	2110      	movs	r1, #16
   1e44e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e452:	f00c fb6b 	bl	2ab2c <rng_pool_init>
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1e456:	4b0d      	ldr	r3, [pc, #52]	; (1e48c <entropy_nrf5_init+0x68>)
   1e458:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e45c:	f022 0201 	bic.w	r2, r2, #1
   1e460:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e464:	4a0a      	ldr	r2, [pc, #40]	; (1e490 <entropy_nrf5_init+0x6c>)
   1e466:	2400      	movs	r4, #0
   1e468:	6014      	str	r4, [r2, #0]
   1e46a:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   1e46c:	2101      	movs	r1, #1
   1e46e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e472:	6019      	str	r1, [r3, #0]

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e474:	4622      	mov	r2, r4
   1e476:	200d      	movs	r0, #13
   1e478:	f7f6 fe98 	bl	151ac <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e47c:	200d      	movs	r0, #13
   1e47e:	f7f6 fe63 	bl	15148 <arch_irq_enable>

	return 0;
}
   1e482:	4620      	mov	r0, r4
   1e484:	bd10      	pop	{r4, pc}
   1e486:	bf00      	nop
   1e488:	200035d0 	.word	0x200035d0
   1e48c:	4000d000 	.word	0x4000d000
   1e490:	4000d100 	.word	0x4000d100

0001e494 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1e494:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   1e498:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e49c:	4b01      	ldr	r3, [pc, #4]	; (1e4a4 <set_comparator+0x10>)
   1e49e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
   1e4a2:	4770      	bx	lr
   1e4a4:	40011000 	.word	0x40011000

0001e4a8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   1e4a8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1e4ac:	4b01      	ldr	r3, [pc, #4]	; (1e4b4 <get_comparator+0xc>)
   1e4ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
   1e4b2:	4770      	bx	lr
   1e4b4:	40011000 	.word	0x40011000

0001e4b8 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e4b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e4bc:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1e4be:	4a02      	ldr	r2, [pc, #8]	; (1e4c8 <event_enable+0x10>)
   1e4c0:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
   1e4c4:	4770      	bx	lr
   1e4c6:	bf00      	nop
   1e4c8:	40011000 	.word	0x40011000

0001e4cc <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e4cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e4d0:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1e4d2:	4a02      	ldr	r2, [pc, #8]	; (1e4dc <event_disable+0x10>)
   1e4d4:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
   1e4d8:	4770      	bx	lr
   1e4da:	bf00      	nop
   1e4dc:	40011000 	.word	0x40011000

0001e4e0 <counter>:
     return p_reg->COUNTER;
   1e4e0:	4b01      	ldr	r3, [pc, #4]	; (1e4e8 <counter+0x8>)
   1e4e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
   1e4e6:	4770      	bx	lr
   1e4e8:	40011000 	.word	0x40011000

0001e4ec <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
   1e4ec:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   1e4ee:	2301      	movs	r3, #1
   1e4f0:	4083      	lsls	r3, r0
   1e4f2:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e4f4:	4a10      	ldr	r2, [pc, #64]	; (1e538 <compare_int_lock+0x4c>)
   1e4f6:	f3bf 8f5b 	dmb	ish
   1e4fa:	e852 1f00 	ldrex	r1, [r2]
   1e4fe:	ea01 0c04 	and.w	ip, r1, r4
   1e502:	e842 ce00 	strex	lr, ip, [r2]
   1e506:	f1be 0f00 	cmp.w	lr, #0
   1e50a:	d1f6      	bne.n	1e4fa <compare_int_lock+0xe>
   1e50c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e510:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e514:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   1e518:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1e51c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   1e520:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1e524:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1e528:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   1e52c:	420b      	tst	r3, r1
}
   1e52e:	bf14      	ite	ne
   1e530:	2001      	movne	r0, #1
   1e532:	2000      	moveq	r0, #0
   1e534:	bd10      	pop	{r4, pc}
   1e536:	bf00      	nop
   1e538:	20003628 	.word	0x20003628

0001e53c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
   1e53c:	b570      	push	{r4, r5, r6, lr}
   1e53e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
   1e540:	f00c fb3e 	bl	2abc0 <full_int_lock>
   1e544:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1e546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e54a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
   1e54c:	4a17      	ldr	r2, [pc, #92]	; (1e5ac <channel_processing_check_and_clear+0x70>)
   1e54e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1e552:	4213      	tst	r3, r2
   1e554:	d105      	bne.n	1e562 <channel_processing_check_and_clear+0x26>
	bool result = false;
   1e556:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
   1e558:	4628      	mov	r0, r5
   1e55a:	f00c fb35 	bl	2abc8 <full_int_unlock>

	return result;
}
   1e55e:	4630      	mov	r0, r6
   1e560:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e562:	2301      	movs	r3, #1
   1e564:	40a3      	lsls	r3, r4
   1e566:	43db      	mvns	r3, r3
   1e568:	4a11      	ldr	r2, [pc, #68]	; (1e5b0 <channel_processing_check_and_clear+0x74>)
   1e56a:	f3bf 8f5b 	dmb	ish
   1e56e:	e852 1f00 	ldrex	r1, [r2]
   1e572:	ea01 0003 	and.w	r0, r1, r3
   1e576:	e842 0600 	strex	r6, r0, [r2]
   1e57a:	2e00      	cmp	r6, #0
   1e57c:	d1f7      	bne.n	1e56e <channel_processing_check_and_clear+0x32>
   1e57e:	f3bf 8f5b 	dmb	ish
   1e582:	b959      	cbnz	r1, 1e59c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1e584:	f104 0350 	add.w	r3, r4, #80	; 0x50
   1e588:	009b      	lsls	r3, r3, #2
   1e58a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e58c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e590:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1e594:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   1e596:	b113      	cbz	r3, 1e59e <channel_processing_check_and_clear+0x62>
   1e598:	2301      	movs	r3, #1
   1e59a:	e000      	b.n	1e59e <channel_processing_check_and_clear+0x62>
   1e59c:	2301      	movs	r3, #1
		if (result) {
   1e59e:	461e      	mov	r6, r3
   1e5a0:	2b00      	cmp	r3, #0
   1e5a2:	d0d9      	beq.n	1e558 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
   1e5a4:	4620      	mov	r0, r4
   1e5a6:	f00c fafc 	bl	2aba2 <event_clear>
   1e5aa:	e7d5      	b.n	1e558 <channel_processing_check_and_clear+0x1c>
   1e5ac:	40011000 	.word	0x40011000
   1e5b0:	20003624 	.word	0x20003624

0001e5b4 <compare_int_unlock>:
	if (key) {
   1e5b4:	b901      	cbnz	r1, 1e5b8 <compare_int_unlock+0x4>
}
   1e5b6:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
   1e5b8:	2301      	movs	r3, #1
   1e5ba:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e5bc:	4a11      	ldr	r2, [pc, #68]	; (1e604 <compare_int_unlock+0x50>)
   1e5be:	f3bf 8f5b 	dmb	ish
   1e5c2:	e852 1f00 	ldrex	r1, [r2]
   1e5c6:	4319      	orrs	r1, r3
   1e5c8:	e842 1c00 	strex	ip, r1, [r2]
   1e5cc:	f1bc 0f00 	cmp.w	ip, #0
   1e5d0:	d1f7      	bne.n	1e5c2 <compare_int_unlock+0xe>
   1e5d2:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e5d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e5da:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
   1e5dc:	4a0a      	ldr	r2, [pc, #40]	; (1e608 <compare_int_unlock+0x54>)
   1e5de:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e5e2:	f3bf 8f5b 	dmb	ish
   1e5e6:	4b09      	ldr	r3, [pc, #36]	; (1e60c <compare_int_unlock+0x58>)
   1e5e8:	681b      	ldr	r3, [r3, #0]
   1e5ea:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1e5ee:	fa23 f000 	lsr.w	r0, r3, r0
   1e5f2:	f010 0f01 	tst.w	r0, #1
   1e5f6:	d0de      	beq.n	1e5b6 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e5f8:	4b05      	ldr	r3, [pc, #20]	; (1e610 <compare_int_unlock+0x5c>)
   1e5fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e5fe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
   1e602:	e7d8      	b.n	1e5b6 <compare_int_unlock+0x2>
   1e604:	20003628 	.word	0x20003628
   1e608:	40011000 	.word	0x40011000
   1e60c:	20003624 	.word	0x20003624
   1e610:	e000e100 	.word	0xe000e100

0001e614 <sys_clock_timeout_handler>:
{
   1e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e616:	4607      	mov	r7, r0
   1e618:	4614      	mov	r4, r2
   1e61a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
   1e61c:	4610      	mov	r0, r2
   1e61e:	4619      	mov	r1, r3
   1e620:	f00c facb 	bl	2abba <absolute_time_to_cc>
   1e624:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   1e626:	4b15      	ldr	r3, [pc, #84]	; (1e67c <sys_clock_timeout_handler+0x68>)
   1e628:	681a      	ldr	r2, [r3, #0]
   1e62a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
   1e62c:	601c      	str	r4, [r3, #0]
   1e62e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1e630:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1e634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1e638:	d308      	bcc.n	1e64c <sys_clock_timeout_handler+0x38>
	return false;
   1e63a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1e63c:	f004 fa5a 	bl	22af4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
   1e640:	4638      	mov	r0, r7
   1e642:	f7ff ff31 	bl	1e4a8 <get_comparator>
   1e646:	42a8      	cmp	r0, r5
   1e648:	d00c      	beq.n	1e664 <sys_clock_timeout_handler+0x50>
}
   1e64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1e64c:	4b0c      	ldr	r3, [pc, #48]	; (1e680 <sys_clock_timeout_handler+0x6c>)
   1e64e:	6819      	ldr	r1, [r3, #0]
   1e650:	0a0b      	lsrs	r3, r1, #8
   1e652:	060a      	lsls	r2, r1, #24
   1e654:	1952      	adds	r2, r2, r5
   1e656:	f143 0300 	adc.w	r3, r3, #0
   1e65a:	490a      	ldr	r1, [pc, #40]	; (1e684 <sys_clock_timeout_handler+0x70>)
   1e65c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   1e660:	2401      	movs	r4, #1
   1e662:	e7eb      	b.n	1e63c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
   1e664:	b11c      	cbz	r4, 1e66e <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
   1e666:	4638      	mov	r0, r7
   1e668:	f7ff ff26 	bl	1e4b8 <event_enable>
}
   1e66c:	e7ed      	b.n	1e64a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
   1e66e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1e672:	4638      	mov	r0, r7
   1e674:	f7ff ff0e 	bl	1e494 <set_comparator>
   1e678:	e7f5      	b.n	1e666 <sys_clock_timeout_handler+0x52>
   1e67a:	bf00      	nop
   1e67c:	20001f00 	.word	0x20001f00
   1e680:	2000362c 	.word	0x2000362c
   1e684:	20001ee8 	.word	0x20001ee8

0001e688 <z_nrf_rtc_timer_read>:
{
   1e688:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1e68a:	4b0d      	ldr	r3, [pc, #52]	; (1e6c0 <z_nrf_rtc_timer_read+0x38>)
   1e68c:	681b      	ldr	r3, [r3, #0]
   1e68e:	0a1d      	lsrs	r5, r3, #8
   1e690:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1e692:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
   1e696:	f7ff ff23 	bl	1e4e0 <counter>
   1e69a:	4603      	mov	r3, r0
	val += cntr;
   1e69c:	1820      	adds	r0, r4, r0
   1e69e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1e6a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e6a6:	d20a      	bcs.n	1e6be <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
   1e6a8:	4b06      	ldr	r3, [pc, #24]	; (1e6c4 <z_nrf_rtc_timer_read+0x3c>)
   1e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e6ae:	4299      	cmp	r1, r3
   1e6b0:	bf08      	it	eq
   1e6b2:	4290      	cmpeq	r0, r2
   1e6b4:	d203      	bcs.n	1e6be <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
   1e6b6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1e6ba:	f141 0100 	adc.w	r1, r1, #0
}
   1e6be:	bd38      	pop	{r3, r4, r5, pc}
   1e6c0:	2000362c 	.word	0x2000362c
   1e6c4:	20001ee8 	.word	0x20001ee8

0001e6c8 <compare_set_nolocks>:
{
   1e6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e6cc:	4606      	mov	r6, r0
   1e6ce:	4614      	mov	r4, r2
   1e6d0:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
   1e6d2:	4610      	mov	r0, r2
   1e6d4:	4619      	mov	r1, r3
   1e6d6:	f00c fa70 	bl	2abba <absolute_time_to_cc>
   1e6da:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1e6dc:	f7ff ffd4 	bl	1e688 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1e6e0:	42a9      	cmp	r1, r5
   1e6e2:	bf08      	it	eq
   1e6e4:	42a0      	cmpeq	r0, r4
   1e6e6:	d21e      	bcs.n	1e726 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
   1e6e8:	ebb4 0800 	subs.w	r8, r4, r0
   1e6ec:	eb65 0901 	sbc.w	r9, r5, r1
   1e6f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1e6f4:	2300      	movs	r3, #0
   1e6f6:	454b      	cmp	r3, r9
   1e6f8:	bf08      	it	eq
   1e6fa:	4542      	cmpeq	r2, r8
   1e6fc:	d32e      	bcc.n	1e75c <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
   1e6fe:	4b19      	ldr	r3, [pc, #100]	; (1e764 <compare_set_nolocks+0x9c>)
   1e700:	eb03 1306 	add.w	r3, r3, r6, lsl #4
   1e704:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1e708:	42ab      	cmp	r3, r5
   1e70a:	bf08      	it	eq
   1e70c:	42a2      	cmpeq	r2, r4
   1e70e:	d018      	beq.n	1e742 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
   1e710:	4639      	mov	r1, r7
   1e712:	4630      	mov	r0, r6
   1e714:	f00c fa5b 	bl	2abce <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
   1e718:	4639      	mov	r1, r7
   1e71a:	f00c fa3e 	bl	2ab9a <counter_sub>
   1e71e:	1824      	adds	r4, r4, r0
   1e720:	f145 0500 	adc.w	r5, r5, #0
   1e724:	e00d      	b.n	1e742 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
   1e726:	2301      	movs	r3, #1
   1e728:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e72a:	4a0f      	ldr	r2, [pc, #60]	; (1e768 <compare_set_nolocks+0xa0>)
   1e72c:	f3bf 8f5b 	dmb	ish
   1e730:	e852 1f00 	ldrex	r1, [r2]
   1e734:	4319      	orrs	r1, r3
   1e736:	e842 1000 	strex	r0, r1, [r2]
   1e73a:	2800      	cmp	r0, #0
   1e73c:	d1f8      	bne.n	1e730 <compare_set_nolocks+0x68>
   1e73e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1e742:	4b08      	ldr	r3, [pc, #32]	; (1e764 <compare_set_nolocks+0x9c>)
   1e744:	0132      	lsls	r2, r6, #4
   1e746:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   1e74a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
   1e74e:	9908      	ldr	r1, [sp, #32]
   1e750:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
   1e752:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1e754:	6073      	str	r3, [r6, #4]
	return ret;
   1e756:	2000      	movs	r0, #0
}
   1e758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
   1e75c:	f06f 0015 	mvn.w	r0, #21
   1e760:	e7fa      	b.n	1e758 <compare_set_nolocks+0x90>
   1e762:	bf00      	nop
   1e764:	20001ef0 	.word	0x20001ef0
   1e768:	20003624 	.word	0x20003624

0001e76c <process_channel>:

static void process_channel(int32_t chan)
{
   1e76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e770:	b082      	sub	sp, #8
   1e772:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
   1e774:	f7ff fee2 	bl	1e53c <channel_processing_check_and_clear>
   1e778:	b910      	cbnz	r0, 1e780 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
   1e77a:	b002      	add	sp, #8
   1e77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
   1e780:	f7ff ff82 	bl	1e688 <z_nrf_rtc_timer_read>
   1e784:	4606      	mov	r6, r0
   1e786:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
   1e788:	f00c fa1a 	bl	2abc0 <full_int_lock>
   1e78c:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
   1e78e:	4b13      	ldr	r3, [pc, #76]	; (1e7dc <process_channel+0x70>)
   1e790:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   1e794:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   1e798:	454f      	cmp	r7, r9
   1e79a:	bf08      	it	eq
   1e79c:	4546      	cmpeq	r6, r8
   1e79e:	d20b      	bcs.n	1e7b8 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   1e7a0:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
   1e7a2:	4650      	mov	r0, sl
   1e7a4:	f00c fa10 	bl	2abc8 <full_int_unlock>
		if (handler) {
   1e7a8:	2e00      	cmp	r6, #0
   1e7aa:	d0e6      	beq.n	1e77a <process_channel+0xe>
			handler(chan, expire_time, user_context);
   1e7ac:	9500      	str	r5, [sp, #0]
   1e7ae:	4642      	mov	r2, r8
   1e7b0:	464b      	mov	r3, r9
   1e7b2:	4620      	mov	r0, r4
   1e7b4:	47b0      	blx	r6
}
   1e7b6:	e7e0      	b.n	1e77a <process_channel+0xe>
			handler = cc_data[chan].callback;
   1e7b8:	4a08      	ldr	r2, [pc, #32]	; (1e7dc <process_channel+0x70>)
   1e7ba:	0123      	lsls	r3, r4, #4
   1e7bc:	eb02 1104 	add.w	r1, r2, r4, lsl #4
   1e7c0:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
   1e7c2:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
   1e7c4:	2000      	movs	r0, #0
   1e7c6:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e7c8:	f04f 32ff 	mov.w	r2, #4294967295
   1e7cc:	f04f 33ff 	mov.w	r3, #4294967295
   1e7d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
   1e7d4:	4620      	mov	r0, r4
   1e7d6:	f7ff fe79 	bl	1e4cc <event_disable>
   1e7da:	e7e2      	b.n	1e7a2 <process_channel+0x36>
   1e7dc:	20001ef0 	.word	0x20001ef0

0001e7e0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1e7e0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
   1e7e2:	4b0d      	ldr	r3, [pc, #52]	; (1e818 <rtc_nrf_isr+0x38>)
   1e7e4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1e7e8:	f013 0f02 	tst.w	r3, #2
   1e7ec:	d00a      	beq.n	1e804 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e7ee:	4b0b      	ldr	r3, [pc, #44]	; (1e81c <rtc_nrf_isr+0x3c>)
   1e7f0:	681b      	ldr	r3, [r3, #0]
   1e7f2:	b13b      	cbz	r3, 1e804 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1e7f4:	4b09      	ldr	r3, [pc, #36]	; (1e81c <rtc_nrf_isr+0x3c>)
   1e7f6:	2200      	movs	r2, #0
   1e7f8:	601a      	str	r2, [r3, #0]
   1e7fa:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1e7fc:	4a08      	ldr	r2, [pc, #32]	; (1e820 <rtc_nrf_isr+0x40>)
   1e7fe:	6813      	ldr	r3, [r2, #0]
   1e800:	3301      	adds	r3, #1
   1e802:	6013      	str	r3, [r2, #0]
{
   1e804:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e806:	2c00      	cmp	r4, #0
   1e808:	dd00      	ble.n	1e80c <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
   1e80a:	bd10      	pop	{r4, pc}
		process_channel(chan);
   1e80c:	4620      	mov	r0, r4
   1e80e:	f7ff ffad 	bl	1e76c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e812:	3401      	adds	r4, #1
   1e814:	e7f7      	b.n	1e806 <rtc_nrf_isr+0x26>
   1e816:	bf00      	nop
   1e818:	40011000 	.word	0x40011000
   1e81c:	40011104 	.word	0x40011104
   1e820:	2000362c 	.word	0x2000362c

0001e824 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   1e824:	b530      	push	{r4, r5, lr}
   1e826:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
   1e828:	2300      	movs	r3, #0
   1e82a:	4a1f      	ldr	r2, [pc, #124]	; (1e8a8 <sys_clock_driver_init+0x84>)
   1e82c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e830:	2b00      	cmp	r3, #0
   1e832:	dd27      	ble.n	1e884 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
   1e834:	4c1c      	ldr	r4, [pc, #112]	; (1e8a8 <sys_clock_driver_init+0x84>)
   1e836:	2502      	movs	r5, #2
   1e838:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e83c:	4b1b      	ldr	r3, [pc, #108]	; (1e8ac <sys_clock_driver_init+0x88>)
   1e83e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1e842:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1e846:	2200      	movs	r2, #0
   1e848:	2101      	movs	r1, #1
   1e84a:	2011      	movs	r0, #17
   1e84c:	f7f6 fcae 	bl	151ac <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1e850:	2011      	movs	r0, #17
   1e852:	f7f6 fc79 	bl	15148 <arch_irq_enable>
   1e856:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1e85a:	2301      	movs	r3, #1
   1e85c:	4a14      	ldr	r2, [pc, #80]	; (1e8b0 <sys_clock_driver_init+0x8c>)
   1e85e:	6013      	str	r3, [r2, #0]
   1e860:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1e862:	4a14      	ldr	r2, [pc, #80]	; (1e8b4 <sys_clock_driver_init+0x90>)
   1e864:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1e866:	2400      	movs	r4, #0
   1e868:	9401      	str	r4, [sp, #4]
   1e86a:	4b13      	ldr	r3, [pc, #76]	; (1e8b8 <sys_clock_driver_init+0x94>)
   1e86c:	9300      	str	r3, [sp, #0]
   1e86e:	4a13      	ldr	r2, [pc, #76]	; (1e8bc <sys_clock_driver_init+0x98>)
   1e870:	2300      	movs	r3, #0
   1e872:	4620      	mov	r0, r4
   1e874:	f00c f9e6 	bl	2ac44 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   1e878:	4628      	mov	r0, r5
   1e87a:	f7fe ffab 	bl	1d7d4 <z_nrf_clock_control_lf_on>

	return 0;
}
   1e87e:	4620      	mov	r0, r4
   1e880:	b003      	add	sp, #12
   1e882:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1e884:	4a0e      	ldr	r2, [pc, #56]	; (1e8c0 <sys_clock_driver_init+0x9c>)
   1e886:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1e88a:	f04f 30ff 	mov.w	r0, #4294967295
   1e88e:	f04f 31ff 	mov.w	r1, #4294967295
   1e892:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   1e896:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1e89a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
   1e89c:	4902      	ldr	r1, [pc, #8]	; (1e8a8 <sys_clock_driver_init+0x84>)
   1e89e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   1e8a2:	3301      	adds	r3, #1
   1e8a4:	e7c4      	b.n	1e830 <sys_clock_driver_init+0xc>
   1e8a6:	bf00      	nop
   1e8a8:	40011000 	.word	0x40011000
   1e8ac:	e000e100 	.word	0xe000e100
   1e8b0:	40011008 	.word	0x40011008
   1e8b4:	20003628 	.word	0x20003628
   1e8b8:	0001e615 	.word	0x0001e615
   1e8bc:	007fffff 	.word	0x007fffff
   1e8c0:	20001ef0 	.word	0x20001ef0

0001e8c4 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
   1e8c4:	b510      	push	{r4, lr}
   1e8c6:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e8c8:	f1b0 3fff 	cmp.w	r0, #4294967295
   1e8cc:	d007      	beq.n	1e8de <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e8ce:	1e44      	subs	r4, r0, #1
   1e8d0:	2c00      	cmp	r4, #0
   1e8d2:	dd07      	ble.n	1e8e4 <sys_clock_set_timeout+0x20>
   1e8d4:	4b11      	ldr	r3, [pc, #68]	; (1e91c <sys_clock_set_timeout+0x58>)
   1e8d6:	429c      	cmp	r4, r3
   1e8d8:	dd05      	ble.n	1e8e6 <sys_clock_set_timeout+0x22>
   1e8da:	4c11      	ldr	r4, [pc, #68]	; (1e920 <sys_clock_set_timeout+0x5c>)
   1e8dc:	e003      	b.n	1e8e6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   1e8de:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
   1e8e2:	e7f4      	b.n	1e8ce <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   1e8e4:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1e8e6:	f7ff fecf 	bl	1e688 <z_nrf_rtc_timer_read>
   1e8ea:	4b0e      	ldr	r3, [pc, #56]	; (1e924 <sys_clock_set_timeout+0x60>)
   1e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e8f0:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   1e8f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1e8f6:	d300      	bcc.n	1e8fa <sys_clock_set_timeout+0x36>
		ticks = 0;
   1e8f8:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   1e8fa:	4404      	add	r4, r0
   1e8fc:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
   1e8fe:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   1e902:	d300      	bcc.n	1e906 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
   1e904:	4c06      	ldr	r4, [pc, #24]	; (1e920 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1e906:	2000      	movs	r0, #0
   1e908:	9001      	str	r0, [sp, #4]
   1e90a:	4907      	ldr	r1, [pc, #28]	; (1e928 <sys_clock_set_timeout+0x64>)
   1e90c:	9100      	str	r1, [sp, #0]
   1e90e:	1912      	adds	r2, r2, r4
   1e910:	f143 0300 	adc.w	r3, r3, #0
   1e914:	f00c f996 	bl	2ac44 <compare_set>
}
   1e918:	b002      	add	sp, #8
   1e91a:	bd10      	pop	{r4, pc}
   1e91c:	007ffffe 	.word	0x007ffffe
   1e920:	007fffff 	.word	0x007fffff
   1e924:	20001f00 	.word	0x20001f00
   1e928:	0001e615 	.word	0x0001e615

0001e92c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
   1e92c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1e92e:	f7ff feab 	bl	1e688 <z_nrf_rtc_timer_read>
   1e932:	4b02      	ldr	r3, [pc, #8]	; (1e93c <sys_clock_elapsed+0x10>)
   1e934:	681b      	ldr	r3, [r3, #0]
}
   1e936:	1ac0      	subs	r0, r0, r3
   1e938:	bd08      	pop	{r3, pc}
   1e93a:	bf00      	nop
   1e93c:	20001f00 	.word	0x20001f00

0001e940 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1e940:	b508      	push	{r3, lr}
   1e942:	4602      	mov	r2, r0
   1e944:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e946:	4802      	ldr	r0, [pc, #8]	; (1e950 <multithreading_lock_acquire+0x10>)
   1e948:	f003 f890 	bl	21a6c <z_impl_k_mutex_lock>
	return k_mutex_lock(&mpsl_lock, timeout);
}
   1e94c:	bd08      	pop	{r3, pc}
   1e94e:	bf00      	nop
   1e950:	200007c0 	.word	0x200007c0

0001e954 <multithreading_lock_release>:

void multithreading_lock_release(void)
{
   1e954:	b508      	push	{r3, lr}
	return z_impl_k_mutex_unlock(mutex);
   1e956:	4802      	ldr	r0, [pc, #8]	; (1e960 <multithreading_lock_release+0xc>)
   1e958:	f003 f912 	bl	21b80 <z_impl_k_mutex_unlock>
	k_mutex_unlock(&mpsl_lock);
}
   1e95c:	bd08      	pop	{r3, pc}
   1e95e:	bf00      	nop
   1e960:	200007c0 	.word	0x200007c0

0001e964 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e964:	b508      	push	{r3, lr}
	z_impl_log_panic();
   1e966:	f7f3 fb91 	bl	1208c <z_impl_log_panic>
   1e96a:	4b09      	ldr	r3, [pc, #36]	; (1e990 <k_sys_fatal_error_handler+0x2c>)
   1e96c:	4a09      	ldr	r2, [pc, #36]	; (1e994 <k_sys_fatal_error_handler+0x30>)
   1e96e:	1a9b      	subs	r3, r3, r2
   1e970:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e972:	f04f 0100 	mov.w	r1, #0
   1e976:	2201      	movs	r2, #1
   1e978:	f362 0102 	bfi	r1, r2, #0, #3
   1e97c:	f36f 01c5 	bfc	r1, #3, #3
   1e980:	f363 118f 	bfi	r1, r3, #6, #10
   1e984:	4804      	ldr	r0, [pc, #16]	; (1e998 <k_sys_fatal_error_handler+0x34>)
   1e986:	f7f3 fb51 	bl	1202c <log_0>
		sys_arch_reboot(0);
   1e98a:	2000      	movs	r0, #0
   1e98c:	f7f7 faa2 	bl	15ed4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e990:	0002c668 	.word	0x0002c668
   1e994:	0002c610 	.word	0x0002c610
   1e998:	0002eeec 	.word	0x0002eeec

0001e99c <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1e99c:	b510      	push	{r4, lr}
   1e99e:	4603      	mov	r3, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   1e9a0:	4a03      	ldr	r2, [pc, #12]	; (1e9b0 <rand_prio_low_vector_get_blocking+0x14>)
   1e9a2:	6810      	ldr	r0, [r2, #0]
   1e9a4:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1e9a6:	6881      	ldr	r1, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e9a8:	680c      	ldr	r4, [r1, #0]
   1e9aa:	4619      	mov	r1, r3
   1e9ac:	47a0      	blx	r4

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
	(void) err;
}
   1e9ae:	bd10      	pop	{r4, pc}
   1e9b0:	20003630 	.word	0x20003630

0001e9b4 <sdc_assertion_handler>:
{
   1e9b4:	b538      	push	{r3, r4, r5, lr}
   1e9b6:	460d      	mov	r5, r1
   1e9b8:	4b0d      	ldr	r3, [pc, #52]	; (1e9f0 <sdc_assertion_handler+0x3c>)
   1e9ba:	4a0e      	ldr	r2, [pc, #56]	; (1e9f4 <sdc_assertion_handler+0x40>)
   1e9bc:	1a9b      	subs	r3, r3, r2
   1e9be:	08db      	lsrs	r3, r3, #3
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   1e9c0:	f04f 0400 	mov.w	r4, #0
   1e9c4:	2201      	movs	r2, #1
   1e9c6:	f362 0402 	bfi	r4, r2, #0, #3
   1e9ca:	f36f 04c5 	bfc	r4, #3, #3
   1e9ce:	f363 148f 	bfi	r4, r3, #6, #10
   1e9d2:	f7f3 f8fb 	bl	11bcc <z_log_strdup>
   1e9d6:	4601      	mov	r1, r0
   1e9d8:	4623      	mov	r3, r4
   1e9da:	462a      	mov	r2, r5
   1e9dc:	4806      	ldr	r0, [pc, #24]	; (1e9f8 <sdc_assertion_handler+0x44>)
   1e9de:	f7f3 faa5 	bl	11f2c <log_2>
	k_oops();
   1e9e2:	4040      	eors	r0, r0
   1e9e4:	f380 8811 	msr	BASEPRI, r0
   1e9e8:	f04f 0003 	mov.w	r0, #3
   1e9ec:	df02      	svc	2
}
   1e9ee:	bd38      	pop	{r3, r4, r5, pc}
   1e9f0:	0002c6b0 	.word	0x0002c6b0
   1e9f4:	0002c610 	.word	0x0002c610
   1e9f8:	0002ef0c 	.word	0x0002ef0c

0001e9fc <host_signal>:
{
   1e9fc:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1e9fe:	4802      	ldr	r0, [pc, #8]	; (1ea08 <host_signal+0xc>)
   1ea00:	f003 f93e 	bl	21c80 <z_impl_k_sem_give>
}
   1ea04:	bd08      	pop	{r3, pc}
   1ea06:	bf00      	nop
   1ea08:	20000850 	.word	0x20000850

0001ea0c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1ea0c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1ea0e:	4803      	ldr	r0, [pc, #12]	; (1ea1c <hci_driver_init+0x10>)
   1ea10:	f7f9 f9f4 	bl	17dfc <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1ea14:	4802      	ldr	r0, [pc, #8]	; (1ea20 <hci_driver_init+0x14>)
   1ea16:	f7e6 f933 	bl	4c80 <sdc_init>
	return err;
}
   1ea1a:	bd08      	pop	{r3, pc}
   1ea1c:	0002f02c 	.word	0x0002f02c
   1ea20:	0001e9b5 	.word	0x0001e9b5

0001ea24 <acl_handle>:
{
   1ea24:	b538      	push	{r3, r4, r5, lr}
   1ea26:	4604      	mov	r4, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ea28:	f04f 30ff 	mov.w	r0, #4294967295
   1ea2c:	f04f 31ff 	mov.w	r1, #4294967295
   1ea30:	f7ff ff86 	bl	1e940 <multithreading_lock_acquire>
	if (!errcode) {
   1ea34:	4605      	mov	r5, r0
   1ea36:	b108      	cbz	r0, 1ea3c <acl_handle+0x18>
}
   1ea38:	4628      	mov	r0, r5
   1ea3a:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_put(acl->data);
   1ea3c:	68a0      	ldr	r0, [r4, #8]
   1ea3e:	f7ef f984 	bl	dd4a <sdc_hci_data_put>
   1ea42:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1ea44:	f7ff ff86 	bl	1e954 <multithreading_lock_release>
		if (errcode) {
   1ea48:	2d00      	cmp	r5, #0
   1ea4a:	d0f5      	beq.n	1ea38 <acl_handle+0x14>
   1ea4c:	4801      	ldr	r0, [pc, #4]	; (1ea54 <acl_handle+0x30>)
   1ea4e:	f003 f917 	bl	21c80 <z_impl_k_sem_give>
}
   1ea52:	e7f1      	b.n	1ea38 <acl_handle+0x14>
   1ea54:	20000850 	.word	0x20000850

0001ea58 <cmd_handle>:
{
   1ea58:	b538      	push	{r3, r4, r5, lr}
   1ea5a:	4605      	mov	r5, r0
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ea5c:	f04f 30ff 	mov.w	r0, #4294967295
   1ea60:	f04f 31ff 	mov.w	r1, #4294967295
   1ea64:	f7ff ff6c 	bl	1e940 <multithreading_lock_acquire>
	if (!errcode) {
   1ea68:	4604      	mov	r4, r0
   1ea6a:	b110      	cbz	r0, 1ea72 <cmd_handle+0x1a>
	if (errcode) {
   1ea6c:	b144      	cbz	r4, 1ea80 <cmd_handle+0x28>
}
   1ea6e:	4620      	mov	r0, r4
   1ea70:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_cmd_put(cmd->data);
   1ea72:	68a8      	ldr	r0, [r5, #8]
   1ea74:	f000 f9c4 	bl	1ee00 <hci_internal_cmd_put>
   1ea78:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ea7a:	f7ff ff6b 	bl	1e954 <multithreading_lock_release>
   1ea7e:	e7f5      	b.n	1ea6c <cmd_handle+0x14>
	z_impl_k_sem_give(sem);
   1ea80:	4801      	ldr	r0, [pc, #4]	; (1ea88 <cmd_handle+0x30>)
   1ea82:	f003 f8fd 	bl	21c80 <z_impl_k_sem_give>
	return 0;
   1ea86:	e7f2      	b.n	1ea6e <cmd_handle+0x16>
   1ea88:	20000850 	.word	0x20000850

0001ea8c <rand_prio_high_vector_get>:
{
   1ea8c:	b538      	push	{r3, r4, r5, lr}
   1ea8e:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1ea90:	4b07      	ldr	r3, [pc, #28]	; (1eab0 <rand_prio_high_vector_get+0x24>)
   1ea92:	6818      	ldr	r0, [r3, #0]
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1ea94:	6883      	ldr	r3, [r0, #8]
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ea96:	685d      	ldr	r5, [r3, #4]
   1ea98:	b13d      	cbz	r5, 1eaaa <rand_prio_high_vector_get+0x1e>
   1ea9a:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ea9c:	2300      	movs	r3, #0
   1ea9e:	4621      	mov	r1, r4
   1eaa0:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1eaa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1eaa6:	b2c0      	uxtb	r0, r0
   1eaa8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1eaaa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1eaae:	e7f8      	b.n	1eaa2 <rand_prio_high_vector_get+0x16>
   1eab0:	20003630 	.word	0x20003630

0001eab4 <rand_prio_low_vector_get>:
{
   1eab4:	b538      	push	{r3, r4, r5, lr}
   1eab6:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   1eab8:	4b07      	ldr	r3, [pc, #28]	; (1ead8 <rand_prio_low_vector_get+0x24>)
   1eaba:	6818      	ldr	r0, [r3, #0]
	const struct entropy_driver_api *api =
   1eabc:	6883      	ldr	r3, [r0, #8]
	if (unlikely(!api->get_entropy_isr)) {
   1eabe:	685d      	ldr	r5, [r3, #4]
   1eac0:	b13d      	cbz	r5, 1ead2 <rand_prio_low_vector_get+0x1e>
   1eac2:	460a      	mov	r2, r1
	return api->get_entropy_isr(dev, buffer, length, flags);
   1eac4:	2300      	movs	r3, #0
   1eac6:	4621      	mov	r1, r4
   1eac8:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1eaca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1eace:	b2c0      	uxtb	r0, r0
   1ead0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1ead2:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1ead6:	e7f8      	b.n	1eaca <rand_prio_low_vector_get+0x16>
   1ead8:	20003630 	.word	0x20003630

0001eadc <event_packet_process>:
{
   1eadc:	b570      	push	{r4, r5, r6, lr}
   1eade:	4604      	mov	r4, r0
	bool discardable = event_packet_is_discardable(hci_buf);
   1eae0:	f00c f8cd 	bl	2ac7e <event_packet_is_discardable>
   1eae4:	4603      	mov	r3, r0
	if (hdr->evt == BT_HCI_EVT_LE_META_EVENT) {
   1eae6:	7820      	ldrb	r0, [r4, #0]
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1eae8:	461d      	mov	r5, r3
   1eaea:	b183      	cbz	r3, 1eb0e <event_packet_process+0x32>
   1eaec:	2200      	movs	r2, #0
   1eaee:	2300      	movs	r3, #0
   1eaf0:	4629      	mov	r1, r5
   1eaf2:	f7f7 fb1d 	bl	16130 <bt_buf_get_evt>
	if (!evt_buf) {
   1eaf6:	4606      	mov	r6, r0
   1eaf8:	b170      	cbz	r0, 1eb18 <event_packet_process+0x3c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1eafa:	7862      	ldrb	r2, [r4, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1eafc:	3202      	adds	r2, #2
   1eafe:	4621      	mov	r1, r4
   1eb00:	3008      	adds	r0, #8
   1eb02:	f00b fb89 	bl	2a218 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1eb06:	4630      	mov	r0, r6
   1eb08:	f7f9 f924 	bl	17d54 <bt_recv>
}
   1eb0c:	bd70      	pop	{r4, r5, r6, pc}
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1eb0e:	f04f 32ff 	mov.w	r2, #4294967295
   1eb12:	f04f 33ff 	mov.w	r3, #4294967295
   1eb16:	e7eb      	b.n	1eaf0 <event_packet_process+0x14>
		if (discardable) {
   1eb18:	2d00      	cmp	r5, #0
   1eb1a:	d1f7      	bne.n	1eb0c <event_packet_process+0x30>
   1eb1c:	4b08      	ldr	r3, [pc, #32]	; (1eb40 <event_packet_process+0x64>)
   1eb1e:	4a09      	ldr	r2, [pc, #36]	; (1eb44 <event_packet_process+0x68>)
   1eb20:	1a9b      	subs	r3, r3, r2
   1eb22:	08db      	lsrs	r3, r3, #3
		BT_ERR("No event buffer available");
   1eb24:	f04f 0100 	mov.w	r1, #0
   1eb28:	2201      	movs	r2, #1
   1eb2a:	f362 0102 	bfi	r1, r2, #0, #3
   1eb2e:	f36f 01c5 	bfc	r1, #3, #3
   1eb32:	f363 118f 	bfi	r1, r3, #6, #10
   1eb36:	4804      	ldr	r0, [pc, #16]	; (1eb48 <event_packet_process+0x6c>)
   1eb38:	f7f3 fa78 	bl	1202c <log_0>
		return;
   1eb3c:	e7e6      	b.n	1eb0c <event_packet_process+0x30>
   1eb3e:	bf00      	nop
   1eb40:	0002c6b0 	.word	0x0002c6b0
   1eb44:	0002c610 	.word	0x0002c610
   1eb48:	0002ef34 	.word	0x0002ef34

0001eb4c <data_packet_process>:
{
   1eb4c:	b538      	push	{r3, r4, r5, lr}
   1eb4e:	4604      	mov	r4, r0
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1eb50:	f04f 32ff 	mov.w	r2, #4294967295
   1eb54:	f04f 33ff 	mov.w	r3, #4294967295
   1eb58:	2003      	movs	r0, #3
   1eb5a:	f7f7 fabf 	bl	160dc <bt_buf_get_rx>
	if (!data_buf) {
   1eb5e:	b150      	cbz	r0, 1eb76 <data_packet_process+0x2a>
   1eb60:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
   1eb62:	8862      	ldrh	r2, [r4, #2]
   1eb64:	3204      	adds	r2, #4
   1eb66:	4621      	mov	r1, r4
   1eb68:	3008      	adds	r0, #8
   1eb6a:	f00b fb55 	bl	2a218 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1eb6e:	4628      	mov	r0, r5
   1eb70:	f7f9 f8f0 	bl	17d54 <bt_recv>
}
   1eb74:	bd38      	pop	{r3, r4, r5, pc}
   1eb76:	4b08      	ldr	r3, [pc, #32]	; (1eb98 <data_packet_process+0x4c>)
   1eb78:	4a08      	ldr	r2, [pc, #32]	; (1eb9c <data_packet_process+0x50>)
   1eb7a:	1a9b      	subs	r3, r3, r2
   1eb7c:	08db      	lsrs	r3, r3, #3
		BT_ERR("No data buffer available");
   1eb7e:	f04f 0100 	mov.w	r1, #0
   1eb82:	2201      	movs	r2, #1
   1eb84:	f362 0102 	bfi	r1, r2, #0, #3
   1eb88:	f36f 01c5 	bfc	r1, #3, #3
   1eb8c:	f363 118f 	bfi	r1, r3, #6, #10
   1eb90:	4803      	ldr	r0, [pc, #12]	; (1eba0 <data_packet_process+0x54>)
   1eb92:	f7f3 fa4b 	bl	1202c <log_0>
		return;
   1eb96:	e7ed      	b.n	1eb74 <data_packet_process+0x28>
   1eb98:	0002c6b0 	.word	0x0002c6b0
   1eb9c:	0002c610 	.word	0x0002c610
   1eba0:	0002ef50 	.word	0x0002ef50

0001eba4 <recv_thread>:
{
   1eba4:	b538      	push	{r3, r4, r5, lr}
	bool received_data = false;
   1eba6:	2500      	movs	r5, #0
	bool received_evt = false;
   1eba8:	462c      	mov	r4, r5
   1ebaa:	e00a      	b.n	1ebc2 <recv_thread+0x1e>
		received_evt = fetch_and_process_hci_evt(&hci_buffer[0]);
   1ebac:	4d0b      	ldr	r5, [pc, #44]	; (1ebdc <recv_thread+0x38>)
   1ebae:	4628      	mov	r0, r5
   1ebb0:	f00c f899 	bl	2ace6 <fetch_and_process_hci_evt>
   1ebb4:	4604      	mov	r4, r0
			received_data = fetch_and_process_acl_data(&hci_buffer[0]);
   1ebb6:	4628      	mov	r0, r5
   1ebb8:	f00c f8ae 	bl	2ad18 <fetch_and_process_acl_data>
   1ebbc:	4605      	mov	r5, r0
	z_impl_k_yield();
   1ebbe:	f003 fd7d 	bl	226bc <z_impl_k_yield>
		if (!received_evt && !received_data) {
   1ebc2:	2c00      	cmp	r4, #0
   1ebc4:	d1f2      	bne.n	1ebac <recv_thread+0x8>
   1ebc6:	2d00      	cmp	r5, #0
   1ebc8:	d1f0      	bne.n	1ebac <recv_thread+0x8>
	return z_impl_k_sem_take(sem, timeout);
   1ebca:	f04f 32ff 	mov.w	r2, #4294967295
   1ebce:	f04f 33ff 	mov.w	r3, #4294967295
   1ebd2:	4803      	ldr	r0, [pc, #12]	; (1ebe0 <recv_thread+0x3c>)
   1ebd4:	f003 f87c 	bl	21cd0 <z_impl_k_sem_take>
   1ebd8:	e7e8      	b.n	1ebac <recv_thread+0x8>
   1ebda:	bf00      	nop
   1ebdc:	20003634 	.word	0x20003634
   1ebe0:	20000850 	.word	0x20000850

0001ebe4 <configure_memory_usage>:
{
   1ebe4:	b500      	push	{lr}
   1ebe6:	b083      	sub	sp, #12
	cfg.master_count.count = SDC_MASTER_COUNT;
   1ebe8:	2101      	movs	r1, #1
   1ebea:	f88d 1004 	strb.w	r1, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ebee:	aa01      	add	r2, sp, #4
   1ebf0:	2000      	movs	r0, #0
   1ebf2:	f7e5 ffc3 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   1ebf6:	2800      	cmp	r0, #0
   1ebf8:	db3b      	blt.n	1ec72 <configure_memory_usage+0x8e>
	cfg.slave_count.count = CONFIG_SDC_SLAVE_COUNT;
   1ebfa:	2000      	movs	r0, #0
   1ebfc:	f88d 0004 	strb.w	r0, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec00:	aa01      	add	r2, sp, #4
   1ec02:	2102      	movs	r1, #2
   1ec04:	f7e5 ffba 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec08:	2800      	cmp	r0, #0
   1ec0a:	db32      	blt.n	1ec72 <configure_memory_usage+0x8e>
	cfg.buffer_cfg.rx_packet_size = MAX_RX_PACKET_SIZE;
   1ec0c:	231b      	movs	r3, #27
   1ec0e:	f88d 3005 	strb.w	r3, [sp, #5]
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1ec12:	f88d 3004 	strb.w	r3, [sp, #4]
	cfg.buffer_cfg.rx_packet_count = SDC_DEFAULT_RX_PACKET_COUNT;
   1ec16:	2302      	movs	r3, #2
   1ec18:	f88d 3007 	strb.w	r3, [sp, #7]
	cfg.buffer_cfg.tx_packet_count = SDC_DEFAULT_TX_PACKET_COUNT;
   1ec1c:	2103      	movs	r1, #3
   1ec1e:	f88d 1006 	strb.w	r1, [sp, #6]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec22:	aa01      	add	r2, sp, #4
   1ec24:	2000      	movs	r0, #0
   1ec26:	f7e5 ffa9 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec2a:	2800      	cmp	r0, #0
   1ec2c:	db21      	blt.n	1ec72 <configure_memory_usage+0x8e>
	cfg.event_length.event_length_us =
   1ec2e:	f641 534c 	movw	r3, #7500	; 0x1d4c
   1ec32:	9301      	str	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec34:	aa01      	add	r2, sp, #4
   1ec36:	2104      	movs	r1, #4
   1ec38:	2000      	movs	r0, #0
   1ec3a:	f7e5 ff9f 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec3e:	2800      	cmp	r0, #0
   1ec40:	db17      	blt.n	1ec72 <configure_memory_usage+0x8e>
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1ec42:	2000      	movs	r0, #0
   1ec44:	f88d 0004 	strb.w	r0, [sp, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec48:	aa01      	add	r2, sp, #4
   1ec4a:	2105      	movs	r1, #5
   1ec4c:	f7e5 ff96 	bl	4b7c <sdc_cfg_set>
	if (required_memory < 0) {
   1ec50:	2800      	cmp	r0, #0
   1ec52:	db0e      	blt.n	1ec72 <configure_memory_usage+0x8e>
		cfg.scan_buffer_cfg.count = CONFIG_SDC_SCAN_BUFFER_COUNT;
   1ec54:	2303      	movs	r3, #3
   1ec56:	f88d 3004 	strb.w	r3, [sp, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1ec5a:	aa01      	add	r2, sp, #4
   1ec5c:	2106      	movs	r1, #6
   1ec5e:	2000      	movs	r0, #0
   1ec60:	f7e5 ff8c 	bl	4b7c <sdc_cfg_set>
		if (required_memory < 0) {
   1ec64:	2800      	cmp	r0, #0
   1ec66:	db04      	blt.n	1ec72 <configure_memory_usage+0x8e>
	if (required_memory > sizeof(sdc_mempool)) {
   1ec68:	f240 4386 	movw	r3, #1158	; 0x486
   1ec6c:	4298      	cmp	r0, r3
   1ec6e:	d803      	bhi.n	1ec78 <configure_memory_usage+0x94>
	return 0;
   1ec70:	2000      	movs	r0, #0
}
   1ec72:	b003      	add	sp, #12
   1ec74:	f85d fb04 	ldr.w	pc, [sp], #4
   1ec78:	4a0d      	ldr	r2, [pc, #52]	; (1ecb0 <configure_memory_usage+0xcc>)
   1ec7a:	4b0e      	ldr	r3, [pc, #56]	; (1ecb4 <configure_memory_usage+0xd0>)
   1ec7c:	1ad2      	subs	r2, r2, r3
   1ec7e:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Allocated memory too low: %u < %u",
   1ec80:	f04f 0300 	mov.w	r3, #0
   1ec84:	2101      	movs	r1, #1
   1ec86:	f361 0302 	bfi	r3, r1, #0, #3
   1ec8a:	f36f 03c5 	bfc	r3, #3, #3
   1ec8e:	f362 138f 	bfi	r3, r2, #6, #10
   1ec92:	4602      	mov	r2, r0
   1ec94:	f240 4186 	movw	r1, #1158	; 0x486
   1ec98:	4807      	ldr	r0, [pc, #28]	; (1ecb8 <configure_memory_usage+0xd4>)
   1ec9a:	f7f3 f947 	bl	11f2c <log_2>
		k_panic();
   1ec9e:	4040      	eors	r0, r0
   1eca0:	f380 8811 	msr	BASEPRI, r0
   1eca4:	f04f 0004 	mov.w	r0, #4
   1eca8:	df02      	svc	2
		return -ENOMEM;
   1ecaa:	f06f 000b 	mvn.w	r0, #11
   1ecae:	e7e0      	b.n	1ec72 <configure_memory_usage+0x8e>
   1ecb0:	0002c6b0 	.word	0x0002c6b0
   1ecb4:	0002c610 	.word	0x0002c610
   1ecb8:	0002ef6c 	.word	0x0002ef6c

0001ecbc <hci_driver_open>:
{
   1ecbc:	b530      	push	{r4, r5, lr}
   1ecbe:	b091      	sub	sp, #68	; 0x44
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ecc0:	4d41      	ldr	r5, [pc, #260]	; (1edc8 <hci_driver_open+0x10c>)
   1ecc2:	2200      	movs	r2, #0
   1ecc4:	2300      	movs	r3, #0
   1ecc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ecca:	2400      	movs	r4, #0
   1eccc:	9404      	str	r4, [sp, #16]
   1ecce:	f06f 0309 	mvn.w	r3, #9
   1ecd2:	9303      	str	r3, [sp, #12]
   1ecd4:	9402      	str	r4, [sp, #8]
   1ecd6:	9401      	str	r4, [sp, #4]
   1ecd8:	9400      	str	r4, [sp, #0]
   1ecda:	4b3c      	ldr	r3, [pc, #240]	; (1edcc <hci_driver_open+0x110>)
   1ecdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ece0:	493b      	ldr	r1, [pc, #236]	; (1edd0 <hci_driver_open+0x114>)
   1ece2:	4628      	mov	r0, r5
   1ece4:	f00c fd45 	bl	2b772 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1ece8:	493a      	ldr	r1, [pc, #232]	; (1edd4 <hci_driver_open+0x118>)
   1ecea:	4628      	mov	r0, r5
   1ecec:	f002 fdda 	bl	218a4 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   1ecf0:	a80b      	add	r0, sp, #44	; 0x2c
   1ecf2:	f7e5 ff35 	bl	4b60 <sdc_build_revision_get>
   1ecf6:	4a38      	ldr	r2, [pc, #224]	; (1edd8 <hci_driver_open+0x11c>)
   1ecf8:	4b38      	ldr	r3, [pc, #224]	; (1eddc <hci_driver_open+0x120>)
   1ecfa:	1ad2      	subs	r2, r2, r3
   1ecfc:	08d2      	lsrs	r2, r2, #3
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1ecfe:	f04f 0300 	mov.w	r3, #0
   1ed02:	2103      	movs	r1, #3
   1ed04:	f361 0302 	bfi	r3, r1, #0, #3
   1ed08:	f364 03c5 	bfi	r3, r4, #3, #3
   1ed0c:	f362 138f 	bfi	r3, r2, #6, #10
   1ed10:	2214      	movs	r2, #20
   1ed12:	a90b      	add	r1, sp, #44	; 0x2c
   1ed14:	4832      	ldr	r0, [pc, #200]	; (1ede0 <hci_driver_open+0x124>)
   1ed16:	f7f3 f967 	bl	11fe8 <log_hexdump>
	err = configure_supported_features();
   1ed1a:	f00c f816 	bl	2ad4a <configure_supported_features>
	if (err) {
   1ed1e:	b118      	cbz	r0, 1ed28 <hci_driver_open+0x6c>
		return -err;
   1ed20:	4244      	negs	r4, r0
}
   1ed22:	4620      	mov	r0, r4
   1ed24:	b011      	add	sp, #68	; 0x44
   1ed26:	bd30      	pop	{r4, r5, pc}
	err = configure_memory_usage();
   1ed28:	f7ff ff5c 	bl	1ebe4 <configure_memory_usage>
	if (err) {
   1ed2c:	4604      	mov	r4, r0
   1ed2e:	2800      	cmp	r0, #0
   1ed30:	d1f7      	bne.n	1ed22 <hci_driver_open+0x66>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1ed32:	482c      	ldr	r0, [pc, #176]	; (1ede4 <hci_driver_open+0x128>)
   1ed34:	f002 fb74 	bl	21420 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ed38:	4b2b      	ldr	r3, [pc, #172]	; (1ede8 <hci_driver_open+0x12c>)
   1ed3a:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   1ed3c:	b1a8      	cbz	r0, 1ed6a <hci_driver_open+0xae>
	sdc_rand_source_t rand_functions = {
   1ed3e:	4a2b      	ldr	r2, [pc, #172]	; (1edec <hci_driver_open+0x130>)
   1ed40:	ab08      	add	r3, sp, #32
   1ed42:	ca07      	ldmia	r2, {r0, r1, r2}
   1ed44:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1ed48:	4618      	mov	r0, r3
   1ed4a:	f7e6 f8ab 	bl	4ea4 <sdc_rand_source_register>
	if (err) {
   1ed4e:	4604      	mov	r4, r0
   1ed50:	b9f0      	cbnz	r0, 1ed90 <hci_driver_open+0xd4>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1ed52:	f04f 30ff 	mov.w	r0, #4294967295
   1ed56:	f04f 31ff 	mov.w	r1, #4294967295
   1ed5a:	f7ff fdf1 	bl	1e940 <multithreading_lock_acquire>
	if (!err) {
   1ed5e:	4605      	mov	r5, r0
   1ed60:	b350      	cbz	r0, 1edb8 <hci_driver_open+0xfc>
	if (err < 0) {
   1ed62:	2d00      	cmp	r5, #0
   1ed64:	dadd      	bge.n	1ed22 <hci_driver_open+0x66>
		return err;
   1ed66:	462c      	mov	r4, r5
   1ed68:	e7db      	b.n	1ed22 <hci_driver_open+0x66>
   1ed6a:	4b1b      	ldr	r3, [pc, #108]	; (1edd8 <hci_driver_open+0x11c>)
   1ed6c:	4a1b      	ldr	r2, [pc, #108]	; (1eddc <hci_driver_open+0x120>)
   1ed6e:	1a9b      	subs	r3, r3, r2
   1ed70:	08db      	lsrs	r3, r3, #3
		BT_ERR("An entropy source is required");
   1ed72:	f04f 0100 	mov.w	r1, #0
   1ed76:	2201      	movs	r2, #1
   1ed78:	f362 0102 	bfi	r1, r2, #0, #3
   1ed7c:	f36f 01c5 	bfc	r1, #3, #3
   1ed80:	f363 118f 	bfi	r1, r3, #6, #10
   1ed84:	481a      	ldr	r0, [pc, #104]	; (1edf0 <hci_driver_open+0x134>)
   1ed86:	f7f3 f951 	bl	1202c <log_0>
		return -ENODEV;
   1ed8a:	f06f 0412 	mvn.w	r4, #18
   1ed8e:	e7c8      	b.n	1ed22 <hci_driver_open+0x66>
   1ed90:	4b11      	ldr	r3, [pc, #68]	; (1edd8 <hci_driver_open+0x11c>)
   1ed92:	4a12      	ldr	r2, [pc, #72]	; (1eddc <hci_driver_open+0x120>)
   1ed94:	1a9b      	subs	r3, r3, r2
   1ed96:	08db      	lsrs	r3, r3, #3
		BT_ERR("Failed to register rand source (%d)", err);
   1ed98:	f04f 0200 	mov.w	r2, #0
   1ed9c:	2101      	movs	r1, #1
   1ed9e:	f361 0202 	bfi	r2, r1, #0, #3
   1eda2:	f36f 02c5 	bfc	r2, #3, #3
   1eda6:	f363 128f 	bfi	r2, r3, #6, #10
   1edaa:	4601      	mov	r1, r0
   1edac:	4811      	ldr	r0, [pc, #68]	; (1edf4 <hci_driver_open+0x138>)
   1edae:	f7f3 f887 	bl	11ec0 <log_1>
		return -EINVAL;
   1edb2:	f06f 0415 	mvn.w	r4, #21
   1edb6:	e7b4      	b.n	1ed22 <hci_driver_open+0x66>
		err = sdc_enable(host_signal, sdc_mempool);
   1edb8:	490f      	ldr	r1, [pc, #60]	; (1edf8 <hci_driver_open+0x13c>)
   1edba:	4810      	ldr	r0, [pc, #64]	; (1edfc <hci_driver_open+0x140>)
   1edbc:	f7e5 ff38 	bl	4c30 <sdc_enable>
   1edc0:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   1edc2:	f7ff fdc7 	bl	1e954 <multithreading_lock_release>
   1edc6:	e7cc      	b.n	1ed62 <hci_driver_open+0xa6>
   1edc8:	20001f08 	.word	0x20001f08
   1edcc:	0001eba5 	.word	0x0001eba5
   1edd0:	20005ec0 	.word	0x20005ec0
   1edd4:	0002ef90 	.word	0x0002ef90
   1edd8:	0002c6b0 	.word	0x0002c6b0
   1eddc:	0002c610 	.word	0x0002c610
   1ede0:	0002ef98 	.word	0x0002ef98
   1ede4:	0002eec0 	.word	0x0002eec0
   1ede8:	20003630 	.word	0x20003630
   1edec:	0002c834 	.word	0x0002c834
   1edf0:	0002efc0 	.word	0x0002efc0
   1edf4:	0002efe0 	.word	0x0002efe0
   1edf8:	2000367c 	.word	0x2000367c
   1edfc:	0001e9fd 	.word	0x0001e9fd

0001ee00 <hci_internal_cmd_put>:

int hci_internal_cmd_put(uint8_t *cmd_in)
{
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1ee00:	4b0b      	ldr	r3, [pc, #44]	; (1ee30 <hci_internal_cmd_put+0x30>)
   1ee02:	781b      	ldrb	r3, [r3, #0]
   1ee04:	b96b      	cbnz	r3, 1ee22 <hci_internal_cmd_put+0x22>
		return -NRF_EPERM;
	}

	if ((((struct bt_hci_cmd_hdr *)cmd_in)->param_len + BT_HCI_CMD_HDR_SIZE)
   1ee06:	7883      	ldrb	r3, [r0, #2]
   1ee08:	3303      	adds	r3, #3
   1ee0a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   1ee0e:	dc0b      	bgt.n	1ee28 <hci_internal_cmd_put+0x28>
{
   1ee10:	b510      	push	{r4, lr}
		> HCI_CMD_PACKET_MAX_SIZE) {
		return -EINVAL;
	}

	if (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT)) {
		cmd_put(cmd_in, &cmd_complete_or_status.raw_event[0]);
   1ee12:	4c07      	ldr	r4, [pc, #28]	; (1ee30 <hci_internal_cmd_put+0x30>)
   1ee14:	1c61      	adds	r1, r4, #1
   1ee16:	f00c fa67 	bl	2b2e8 <cmd_put>
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1ee1a:	2301      	movs	r3, #1
   1ee1c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1ee1e:	2000      	movs	r0, #0
}
   1ee20:	bd10      	pop	{r4, pc}
		return -NRF_EPERM;
   1ee22:	f04f 30ff 	mov.w	r0, #4294967295
   1ee26:	4770      	bx	lr
		return -EINVAL;
   1ee28:	f06f 0015 	mvn.w	r0, #21
}
   1ee2c:	4770      	bx	lr
   1ee2e:	bf00      	nop
   1ee30:	20003b04 	.word	0x20003b04

0001ee34 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   1ee34:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   1ee36:	4b07      	ldr	r3, [pc, #28]	; (1ee54 <hci_internal_evt_get+0x20>)
   1ee38:	781b      	ldrb	r3, [r3, #0]
   1ee3a:	b913      	cbnz	r3, 1ee42 <hci_internal_evt_get+0xe>
		cmd_complete_or_status.occurred = false;

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
   1ee3c:	f7ee ff90 	bl	dd60 <sdc_hci_evt_get>
}
   1ee40:	bd10      	pop	{r4, pc}
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1ee42:	4c04      	ldr	r4, [pc, #16]	; (1ee54 <hci_internal_evt_get+0x20>)
   1ee44:	78a2      	ldrb	r2, [r4, #2]
		memcpy(evt_out,
   1ee46:	3202      	adds	r2, #2
   1ee48:	1c61      	adds	r1, r4, #1
   1ee4a:	f008 ff01 	bl	27c50 <memcpy>
		cmd_complete_or_status.occurred = false;
   1ee4e:	2000      	movs	r0, #0
   1ee50:	7020      	strb	r0, [r4, #0]
		return 0;
   1ee52:	e7f5      	b.n	1ee40 <hci_internal_evt_get+0xc>
   1ee54:	20003b04 	.word	0x20003b04

0001ee58 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   1ee58:	b538      	push	{r3, r4, r5, lr}
   1ee5a:	4605      	mov	r5, r0
   1ee5c:	460c      	mov	r4, r1
	static const struct device *dev;

	if (unlikely(!dev)) {
   1ee5e:	4b0a      	ldr	r3, [pc, #40]	; (1ee88 <bt_rand+0x30>)
   1ee60:	681b      	ldr	r3, [r3, #0]
   1ee62:	b13b      	cbz	r3, 1ee74 <bt_rand+0x1c>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1ee64:	4b08      	ldr	r3, [pc, #32]	; (1ee88 <bt_rand+0x30>)
   1ee66:	6818      	ldr	r0, [r3, #0]
   1ee68:	b2a2      	uxth	r2, r4
	const struct entropy_driver_api *api =
   1ee6a:	6883      	ldr	r3, [r0, #8]
	return api->get_entropy(dev, buffer, length);
   1ee6c:	681b      	ldr	r3, [r3, #0]
   1ee6e:	4629      	mov	r1, r5
   1ee70:	4798      	blx	r3
}
   1ee72:	bd38      	pop	{r3, r4, r5, pc}
   1ee74:	4805      	ldr	r0, [pc, #20]	; (1ee8c <bt_rand+0x34>)
   1ee76:	f002 fad3 	bl	21420 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ee7a:	4b03      	ldr	r3, [pc, #12]	; (1ee88 <bt_rand+0x30>)
   1ee7c:	6018      	str	r0, [r3, #0]
		if (!dev) {
   1ee7e:	2800      	cmp	r0, #0
   1ee80:	d1f0      	bne.n	1ee64 <bt_rand+0xc>
			return -ENODEV;
   1ee82:	f06f 0012 	mvn.w	r0, #18
   1ee86:	e7f4      	b.n	1ee72 <bt_rand+0x1a>
   1ee88:	20003b4c 	.word	0x20003b4c
   1ee8c:	0002eec0 	.word	0x0002eec0

0001ee90 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   1ee90:	b510      	push	{r4, lr}
   1ee92:	b082      	sub	sp, #8
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
   1ee94:	f00c fa7f 	bl	2b396 <m_config_clock_source_get>
   1ee98:	f88d 0000 	strb.w	r0, [sp]
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ee9c:	2332      	movs	r3, #50	; 0x32
   1ee9e:	f8ad 3004 	strh.w	r3, [sp, #4]
	clock_cfg.skip_wait_lfclk_started =
   1eea2:	2300      	movs	r3, #0
   1eea4:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.rc_ctiv = (CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD * 4 / 1000);
	clock_cfg.rc_temp_ctiv = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP + 1;
	BUILD_ASSERT(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF == 2,
		     "MPSL always uses a temperature diff threshold of 0.5 degrees");
#else
	clock_cfg.rc_ctiv = 0;
   1eea8:	f88d 3001 	strb.w	r3, [sp, #1]
	clock_cfg.rc_temp_ctiv = 0;
   1eeac:	f88d 3002 	strb.w	r3, [sp, #2]
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1eeb0:	4a0c      	ldr	r2, [pc, #48]	; (1eee4 <mpsl_lib_init+0x54>)
   1eeb2:	2119      	movs	r1, #25
   1eeb4:	4668      	mov	r0, sp
   1eeb6:	f7e5 fc77 	bl	47a8 <mpsl_init>
	if (err) {
   1eeba:	4604      	mov	r4, r0
   1eebc:	b110      	cbz	r0, 1eec4 <mpsl_lib_init+0x34>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   1eebe:	4620      	mov	r0, r4
   1eec0:	b002      	add	sp, #8
   1eec2:	bd10      	pop	{r4, pc}
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1eec4:	2201      	movs	r2, #1
   1eec6:	2100      	movs	r1, #0
   1eec8:	2008      	movs	r0, #8
   1eeca:	f7f6 f96f 	bl	151ac <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1eece:	2201      	movs	r2, #1
   1eed0:	2100      	movs	r1, #0
   1eed2:	200b      	movs	r0, #11
   1eed4:	f7f6 f96a 	bl	151ac <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1eed8:	2201      	movs	r2, #1
   1eeda:	2100      	movs	r1, #0
   1eedc:	4610      	mov	r0, r2
   1eede:	f7f6 f965 	bl	151ac <z_arm_irq_priority_set>
	return 0;
   1eee2:	e7ec      	b.n	1eebe <mpsl_lib_init+0x2e>
   1eee4:	0001eee9 	.word	0x0001eee9

0001eee8 <m_assert_handler>:
{
   1eee8:	b538      	push	{r3, r4, r5, lr}
   1eeea:	460d      	mov	r5, r1
   1eeec:	4b0d      	ldr	r3, [pc, #52]	; (1ef24 <m_assert_handler+0x3c>)
   1eeee:	4a0e      	ldr	r2, [pc, #56]	; (1ef28 <m_assert_handler+0x40>)
   1eef0:	1a9b      	subs	r3, r3, r2
   1eef2:	08db      	lsrs	r3, r3, #3
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   1eef4:	f04f 0400 	mov.w	r4, #0
   1eef8:	2201      	movs	r2, #1
   1eefa:	f362 0402 	bfi	r4, r2, #0, #3
   1eefe:	f36f 04c5 	bfc	r4, #3, #3
   1ef02:	f363 148f 	bfi	r4, r3, #6, #10
   1ef06:	f7f2 fe61 	bl	11bcc <z_log_strdup>
   1ef0a:	4601      	mov	r1, r0
   1ef0c:	4623      	mov	r3, r4
   1ef0e:	462a      	mov	r2, r5
   1ef10:	4806      	ldr	r0, [pc, #24]	; (1ef2c <m_assert_handler+0x44>)
   1ef12:	f7f3 f80b 	bl	11f2c <log_2>
	k_oops();
   1ef16:	4040      	eors	r0, r0
   1ef18:	f380 8811 	msr	BASEPRI, r0
   1ef1c:	f04f 0003 	mov.w	r0, #3
   1ef20:	df02      	svc	2
}
   1ef22:	bd38      	pop	{r3, r4, r5, pc}
   1ef24:	0002c678 	.word	0x0002c678
   1ef28:	0002c610 	.word	0x0002c610
   1ef2c:	0002f064 	.word	0x0002f064

0001ef30 <signal_thread>:
{
   1ef30:	b538      	push	{r3, r4, r5, lr}
		k_sem_take(&sem_signal, K_FOREVER);
   1ef32:	f04f 34ff 	mov.w	r4, #4294967295
   1ef36:	f04f 35ff 	mov.w	r5, #4294967295
	return z_impl_k_sem_take(sem, timeout);
   1ef3a:	4622      	mov	r2, r4
   1ef3c:	462b      	mov	r3, r5
   1ef3e:	4806      	ldr	r0, [pc, #24]	; (1ef58 <signal_thread+0x28>)
   1ef40:	f002 fec6 	bl	21cd0 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ef44:	4620      	mov	r0, r4
   1ef46:	4629      	mov	r1, r5
   1ef48:	f7ff fcfa 	bl	1e940 <multithreading_lock_acquire>
		mpsl_low_priority_process();
   1ef4c:	f7ee fa51 	bl	d3f2 <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   1ef50:	f7ff fd00 	bl	1e954 <multithreading_lock_release>
	while (true) {
   1ef54:	e7ed      	b.n	1ef32 <signal_thread+0x2>
   1ef56:	bf00      	nop
   1ef58:	20000868 	.word	0x20000868

0001ef5c <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   1ef5c:	b530      	push	{r4, r5, lr}
   1ef5e:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ef60:	4d0f      	ldr	r5, [pc, #60]	; (1efa0 <mpsl_signal_thread_init+0x44>)
   1ef62:	2200      	movs	r2, #0
   1ef64:	2300      	movs	r3, #0
   1ef66:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1ef6a:	2400      	movs	r4, #0
   1ef6c:	9404      	str	r4, [sp, #16]
   1ef6e:	f06f 0309 	mvn.w	r3, #9
   1ef72:	9303      	str	r3, [sp, #12]
   1ef74:	9402      	str	r4, [sp, #8]
   1ef76:	9401      	str	r4, [sp, #4]
   1ef78:	9400      	str	r4, [sp, #0]
   1ef7a:	4b0a      	ldr	r3, [pc, #40]	; (1efa4 <mpsl_signal_thread_init+0x48>)
   1ef7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1ef80:	4909      	ldr	r1, [pc, #36]	; (1efa8 <mpsl_signal_thread_init+0x4c>)
   1ef82:	4628      	mov	r0, r5
   1ef84:	f00c fbf5 	bl	2b772 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1ef88:	4908      	ldr	r1, [pc, #32]	; (1efac <mpsl_signal_thread_init+0x50>)
   1ef8a:	4628      	mov	r0, r5
   1ef8c:	f002 fc8a 	bl	218a4 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1ef90:	4622      	mov	r2, r4
   1ef92:	2104      	movs	r1, #4
   1ef94:	2019      	movs	r0, #25
   1ef96:	f7f6 f909 	bl	151ac <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1ef9a:	4620      	mov	r0, r4
   1ef9c:	b009      	add	sp, #36	; 0x24
   1ef9e:	bd30      	pop	{r4, r5, pc}
   1efa0:	20001fc0 	.word	0x20001fc0
   1efa4:	0001ef31 	.word	0x0001ef31
   1efa8:	200062e0 	.word	0x200062e0
   1efac:	0002f078 	.word	0x0002f078

0001efb0 <mpsl_low_prio_irq_handler>:
{
   1efb0:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   1efb2:	4802      	ldr	r0, [pc, #8]	; (1efbc <mpsl_low_prio_irq_handler+0xc>)
   1efb4:	f002 fe64 	bl	21c80 <z_impl_k_sem_give>
}
   1efb8:	bd08      	pop	{r3, pc}
   1efba:	bf00      	nop
   1efbc:	20000868 	.word	0x20000868

0001efc0 <mpsl_hfclk_callback>:
#include <mpsl_clock.h>

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
   1efc0:	b508      	push	{r3, lr}
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1efc2:	4b02      	ldr	r3, [pc, #8]	; (1efcc <mpsl_hfclk_callback+0xc>)
   1efc4:	681b      	ldr	r3, [r3, #0]
   1efc6:	2000      	movs	r0, #0
   1efc8:	4798      	blx	r3
}
   1efca:	bd08      	pop	{r3, pc}
   1efcc:	20003b50 	.word	0x20003b50

0001efd0 <nrfx_clock_start>:

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1efd0:	b508      	push	{r3, lr}
	switch (domain) {
   1efd2:	b128      	cbz	r0, 1efe0 <nrfx_clock_start+0x10>
   1efd4:	2801      	cmp	r0, #1
   1efd6:	d102      	bne.n	1efde <nrfx_clock_start+0xe>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1efd8:	4804      	ldr	r0, [pc, #16]	; (1efec <nrfx_clock_start+0x1c>)
   1efda:	f7e5 fa63 	bl	44a4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1efde:	bd08      	pop	{r3, pc}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1efe0:	4b03      	ldr	r3, [pc, #12]	; (1eff0 <nrfx_clock_start+0x20>)
   1efe2:	681b      	ldr	r3, [r3, #0]
   1efe4:	2001      	movs	r0, #1
   1efe6:	4798      	blx	r3
}
   1efe8:	e7f9      	b.n	1efde <nrfx_clock_start+0xe>
   1efea:	bf00      	nop
   1efec:	0001efc1 	.word	0x0001efc1
   1eff0:	20003b50 	.word	0x20003b50

0001eff4 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1eff4:	4b01      	ldr	r3, [pc, #4]	; (1effc <nrfx_clock_init+0x8>)
   1eff6:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1eff8:	4801      	ldr	r0, [pc, #4]	; (1f000 <nrfx_clock_init+0xc>)
   1effa:	4770      	bx	lr
   1effc:	20003b50 	.word	0x20003b50
   1f000:	0bad0000 	.word	0x0bad0000

0001f004 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   1f004:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f008:	4905      	ldr	r1, [pc, #20]	; (1f020 <__NVIC_SystemReset+0x1c>)
   1f00a:	68ca      	ldr	r2, [r1, #12]
   1f00c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f010:	4b04      	ldr	r3, [pc, #16]	; (1f024 <__NVIC_SystemReset+0x20>)
   1f012:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f014:	60cb      	str	r3, [r1, #12]
   1f016:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f01a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f01c:	e7fd      	b.n	1f01a <__NVIC_SystemReset+0x16>
   1f01e:	bf00      	nop
   1f020:	e000ed00 	.word	0xe000ed00
   1f024:	05fa0004 	.word	0x05fa0004

0001f028 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f028:	4b03      	ldr	r3, [pc, #12]	; (1f038 <nrf52_errata_36+0x10>)
   1f02a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f02c:	2b08      	cmp	r3, #8
   1f02e:	d001      	beq.n	1f034 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f030:	2000      	movs	r0, #0
   1f032:	4770      	bx	lr
                        return true;
   1f034:	2001      	movs	r0, #1
    #endif
}
   1f036:	4770      	bx	lr
   1f038:	10000130 	.word	0x10000130

0001f03c <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f03c:	4b03      	ldr	r3, [pc, #12]	; (1f04c <nrf52_errata_66+0x10>)
   1f03e:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f040:	2b08      	cmp	r3, #8
   1f042:	d001      	beq.n	1f048 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f044:	2000      	movs	r0, #0
   1f046:	4770      	bx	lr
                        return true;
   1f048:	2001      	movs	r0, #1
    #endif
}
   1f04a:	4770      	bx	lr
   1f04c:	10000130 	.word	0x10000130

0001f050 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f050:	4b08      	ldr	r3, [pc, #32]	; (1f074 <nrf52_errata_98+0x24>)
   1f052:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f054:	3304      	adds	r3, #4
   1f056:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f058:	2a08      	cmp	r2, #8
   1f05a:	d001      	beq.n	1f060 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f05c:	2000      	movs	r0, #0
   1f05e:	4770      	bx	lr
                switch(var2)
   1f060:	2b00      	cmp	r3, #0
   1f062:	d804      	bhi.n	1f06e <nrf52_errata_98+0x1e>
   1f064:	e8df f003 	tbb	[pc, r3]
   1f068:	01          	.byte	0x01
   1f069:	00          	.byte	0x00
            if (var1 == 0x08)
   1f06a:	2001      	movs	r0, #1
   1f06c:	4770      	bx	lr
                        return false;
   1f06e:	2000      	movs	r0, #0
    #endif
}
   1f070:	4770      	bx	lr
   1f072:	bf00      	nop
   1f074:	10000130 	.word	0x10000130

0001f078 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f078:	4b08      	ldr	r3, [pc, #32]	; (1f09c <nrf52_errata_103+0x24>)
   1f07a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f07c:	3304      	adds	r3, #4
   1f07e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f080:	2a08      	cmp	r2, #8
   1f082:	d001      	beq.n	1f088 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f084:	2000      	movs	r0, #0
   1f086:	4770      	bx	lr
                switch(var2)
   1f088:	2b00      	cmp	r3, #0
   1f08a:	d804      	bhi.n	1f096 <nrf52_errata_103+0x1e>
   1f08c:	e8df f003 	tbb	[pc, r3]
   1f090:	01          	.byte	0x01
   1f091:	00          	.byte	0x00
            if (var1 == 0x08)
   1f092:	2001      	movs	r0, #1
   1f094:	4770      	bx	lr
                        return false;
   1f096:	2000      	movs	r0, #0
    #endif
}
   1f098:	4770      	bx	lr
   1f09a:	bf00      	nop
   1f09c:	10000130 	.word	0x10000130

0001f0a0 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f0a0:	4b08      	ldr	r3, [pc, #32]	; (1f0c4 <nrf52_errata_115+0x24>)
   1f0a2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f0a4:	3304      	adds	r3, #4
   1f0a6:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f0a8:	2a08      	cmp	r2, #8
   1f0aa:	d001      	beq.n	1f0b0 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f0ac:	2000      	movs	r0, #0
   1f0ae:	4770      	bx	lr
                switch(var2)
   1f0b0:	2b00      	cmp	r3, #0
   1f0b2:	d804      	bhi.n	1f0be <nrf52_errata_115+0x1e>
   1f0b4:	e8df f003 	tbb	[pc, r3]
   1f0b8:	01          	.byte	0x01
   1f0b9:	00          	.byte	0x00
            if (var1 == 0x08)
   1f0ba:	2001      	movs	r0, #1
   1f0bc:	4770      	bx	lr
                        return false;
   1f0be:	2000      	movs	r0, #0
    #endif
}
   1f0c0:	4770      	bx	lr
   1f0c2:	bf00      	nop
   1f0c4:	10000130 	.word	0x10000130

0001f0c8 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f0c8:	4b08      	ldr	r3, [pc, #32]	; (1f0ec <nrf52_errata_120+0x24>)
   1f0ca:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f0cc:	3304      	adds	r3, #4
   1f0ce:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f0d0:	2a08      	cmp	r2, #8
   1f0d2:	d001      	beq.n	1f0d8 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1f0d4:	2000      	movs	r0, #0
   1f0d6:	4770      	bx	lr
                switch(var2)
   1f0d8:	2b00      	cmp	r3, #0
   1f0da:	d804      	bhi.n	1f0e6 <nrf52_errata_120+0x1e>
   1f0dc:	e8df f003 	tbb	[pc, r3]
   1f0e0:	01          	.byte	0x01
   1f0e1:	00          	.byte	0x00
            if (var1 == 0x08)
   1f0e2:	2001      	movs	r0, #1
   1f0e4:	4770      	bx	lr
                        return false;
   1f0e6:	2000      	movs	r0, #0
    #endif
}
   1f0e8:	4770      	bx	lr
   1f0ea:	bf00      	nop
   1f0ec:	10000130 	.word	0x10000130

0001f0f0 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f0f0:	4b03      	ldr	r3, [pc, #12]	; (1f100 <nrf52_errata_136+0x10>)
   1f0f2:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f0f4:	2b08      	cmp	r3, #8
   1f0f6:	d001      	beq.n	1f0fc <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f0f8:	2000      	movs	r0, #0
   1f0fa:	4770      	bx	lr
                        return true;
   1f0fc:	2001      	movs	r0, #1
    #endif
}
   1f0fe:	4770      	bx	lr
   1f100:	10000130 	.word	0x10000130

0001f104 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f104:	4b06      	ldr	r3, [pc, #24]	; (1f120 <nrf52_errata_249+0x1c>)
   1f106:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f108:	4a06      	ldr	r2, [pc, #24]	; (1f124 <nrf52_errata_249+0x20>)
   1f10a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f10c:	2b08      	cmp	r3, #8
   1f10e:	d001      	beq.n	1f114 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1f110:	2000      	movs	r0, #0
   1f112:	4770      	bx	lr
                switch(var2)
   1f114:	2a03      	cmp	r2, #3
   1f116:	d801      	bhi.n	1f11c <nrf52_errata_249+0x18>
   1f118:	2000      	movs	r0, #0
   1f11a:	4770      	bx	lr
                        return true;
   1f11c:	2001      	movs	r0, #1
    #endif
}
   1f11e:	4770      	bx	lr
   1f120:	10000130 	.word	0x10000130
   1f124:	10000134 	.word	0x10000134

0001f128 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f128:	4b02      	ldr	r3, [pc, #8]	; (1f134 <nvmc_wait+0xc>)
   1f12a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1f12e:	2b00      	cmp	r3, #0
   1f130:	d0fa      	beq.n	1f128 <nvmc_wait>
}
   1f132:	4770      	bx	lr
   1f134:	4001e000 	.word	0x4001e000

0001f138 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
   1f138:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f13a:	4b03      	ldr	r3, [pc, #12]	; (1f148 <nvmc_config+0x10>)
   1f13c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
   1f140:	f7ff fff2 	bl	1f128 <nvmc_wait>
}
   1f144:	bd08      	pop	{r3, pc}
   1f146:	bf00      	nop
   1f148:	4001e000 	.word	0x4001e000

0001f14c <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1f14c:	4b01      	ldr	r3, [pc, #4]	; (1f154 <SystemCoreClockUpdate+0x8>)
   1f14e:	4a02      	ldr	r2, [pc, #8]	; (1f158 <SystemCoreClockUpdate+0xc>)
   1f150:	601a      	str	r2, [r3, #0]
}
   1f152:	4770      	bx	lr
   1f154:	20000694 	.word	0x20000694
   1f158:	03d09000 	.word	0x03d09000

0001f15c <SystemInit>:

void SystemInit(void)
{
   1f15c:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1f15e:	f7ff ff63 	bl	1f028 <nrf52_errata_36>
   1f162:	b140      	cbz	r0, 1f176 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1f164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f168:	2200      	movs	r2, #0
   1f16a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f16e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f172:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1f176:	f7ff ff61 	bl	1f03c <nrf52_errata_66>
   1f17a:	2800      	cmp	r0, #0
   1f17c:	d046      	beq.n	1f20c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f17e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1f182:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1f186:	4b5d      	ldr	r3, [pc, #372]	; (1f2fc <SystemInit+0x1a0>)
   1f188:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f18c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1f190:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f194:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1f198:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f19c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1f1a0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f1a4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1f1a8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f1ac:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1f1b0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f1b4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1f1b8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f1bc:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1f1c0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f1c4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1f1c8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f1cc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1f1d0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f1d4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1f1d8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f1dc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1f1e0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f1e4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1f1e8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f1ec:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1f1f0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f1f4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1f1f8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f1fc:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1f200:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f204:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1f208:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1f20c:	f7ff ff20 	bl	1f050 <nrf52_errata_98>
   1f210:	b110      	cbz	r0, 1f218 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1f212:	4b3b      	ldr	r3, [pc, #236]	; (1f300 <SystemInit+0x1a4>)
   1f214:	4a3b      	ldr	r2, [pc, #236]	; (1f304 <SystemInit+0x1a8>)
   1f216:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1f218:	f7ff ff2e 	bl	1f078 <nrf52_errata_103>
   1f21c:	b118      	cbz	r0, 1f226 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1f21e:	4b3a      	ldr	r3, [pc, #232]	; (1f308 <SystemInit+0x1ac>)
   1f220:	22fb      	movs	r2, #251	; 0xfb
   1f222:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1f226:	f7ff ff3b 	bl	1f0a0 <nrf52_errata_115>
   1f22a:	b148      	cbz	r0, 1f240 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1f22c:	4937      	ldr	r1, [pc, #220]	; (1f30c <SystemInit+0x1b0>)
   1f22e:	680b      	ldr	r3, [r1, #0]
   1f230:	f023 030f 	bic.w	r3, r3, #15
   1f234:	4a36      	ldr	r2, [pc, #216]	; (1f310 <SystemInit+0x1b4>)
   1f236:	6812      	ldr	r2, [r2, #0]
   1f238:	f002 020f 	and.w	r2, r2, #15
   1f23c:	4313      	orrs	r3, r2
   1f23e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1f240:	f7ff ff42 	bl	1f0c8 <nrf52_errata_120>
   1f244:	b118      	cbz	r0, 1f24e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1f246:	4b33      	ldr	r3, [pc, #204]	; (1f314 <SystemInit+0x1b8>)
   1f248:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f24c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1f24e:	f7ff ff4f 	bl	1f0f0 <nrf52_errata_136>
   1f252:	b160      	cbz	r0, 1f26e <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f258:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1f25c:	f013 0f01 	tst.w	r3, #1
   1f260:	d005      	beq.n	1f26e <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f266:	f06f 0201 	mvn.w	r2, #1
   1f26a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   1f26e:	f7ff ff49 	bl	1f104 <nrf52_errata_249>
   1f272:	b138      	cbz	r0, 1f284 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f274:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f278:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f27c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f280:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1f284:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f288:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
   1f28c:	f013 0f01 	tst.w	r3, #1
   1f290:	d10e      	bne.n	1f2b0 <SystemInit+0x154>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f292:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f296:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   1f29a:	2b00      	cmp	r3, #0
   1f29c:	db1a      	blt.n	1f2d4 <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f29e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f2a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f2a6:	2b00      	cmp	r3, #0
   1f2a8:	db14      	blt.n	1f2d4 <SystemInit+0x178>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
   1f2aa:	f7ff ff4f 	bl	1f14c <SystemCoreClockUpdate>
}
   1f2ae:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1f2b0:	2001      	movs	r0, #1
   1f2b2:	f7ff ff41 	bl	1f138 <nvmc_config>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   1f2b6:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1f2ba:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
   1f2be:	f023 0301 	bic.w	r3, r3, #1
   1f2c2:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            nvmc_wait();
   1f2c6:	f7ff ff2f 	bl	1f128 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1f2ca:	2000      	movs	r0, #0
   1f2cc:	f7ff ff34 	bl	1f138 <nvmc_config>
            NVIC_SystemReset();
   1f2d0:	f7ff fe98 	bl	1f004 <__NVIC_SystemReset>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
   1f2d4:	2001      	movs	r0, #1
   1f2d6:	f7ff ff2f 	bl	1f138 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f2da:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
   1f2de:	2512      	movs	r5, #18
   1f2e0:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
   1f2e4:	f7ff ff20 	bl	1f128 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f2e8:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
   1f2ec:	f7ff ff1c 	bl	1f128 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
   1f2f0:	2000      	movs	r0, #0
   1f2f2:	f7ff ff21 	bl	1f138 <nvmc_config>
            NVIC_SystemReset();
   1f2f6:	f7ff fe85 	bl	1f004 <__NVIC_SystemReset>
   1f2fa:	bf00      	nop
   1f2fc:	4000c000 	.word	0x4000c000
   1f300:	4000568c 	.word	0x4000568c
   1f304:	00038148 	.word	0x00038148
   1f308:	4000f000 	.word	0x4000f000
   1f30c:	40000ee4 	.word	0x40000ee4
   1f310:	10000258 	.word	0x10000258
   1f314:	40029640 	.word	0x40029640

0001f318 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
   1f318:	4b04      	ldr	r3, [pc, #16]	; (1f32c <is_allocated_channel+0x14>)
   1f31a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   1f31c:	2301      	movs	r3, #1
   1f31e:	4083      	lsls	r3, r0
   1f320:	421a      	tst	r2, r3
}
   1f322:	bf14      	ite	ne
   1f324:	2001      	movne	r0, #1
   1f326:	2000      	moveq	r0, #0
   1f328:	4770      	bx	lr
   1f32a:	bf00      	nop
   1f32c:	20003b54 	.word	0x20003b54

0001f330 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
   1f330:	2301      	movs	r3, #1
   1f332:	fa03 f000 	lsl.w	r0, r3, r0
   1f336:	4a02      	ldr	r2, [pc, #8]	; (1f340 <channel_allocated_set+0x10>)
   1f338:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1f33a:	4303      	orrs	r3, r0
   1f33c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   1f33e:	4770      	bx	lr
   1f340:	20003b54 	.word	0x20003b54

0001f344 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1f344:	2301      	movs	r3, #1
   1f346:	fa03 f000 	lsl.w	r0, r3, r0
   1f34a:	4a03      	ldr	r2, [pc, #12]	; (1f358 <channel_allocated_clr+0x14>)
   1f34c:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1f34e:	ea23 0300 	bic.w	r3, r3, r0
   1f352:	65d3      	str	r3, [r2, #92]	; 0x5c
}
   1f354:	4770      	bx	lr
   1f356:	bf00      	nop
   1f358:	20003b54 	.word	0x20003b54

0001f35c <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
   1f35c:	b538      	push	{r3, r4, r5, lr}
   1f35e:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1f360:	f00c f867 	bl	2b432 <is_app_channel>
   1f364:	b908      	cbnz	r0, 1f36a <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1f366:	4809      	ldr	r0, [pc, #36]	; (1f38c <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f368:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f36a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f36e:	f3ef 8511 	mrs	r5, BASEPRI
   1f372:	f383 8812 	msr	BASEPRI_MAX, r3
   1f376:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
   1f37a:	4620      	mov	r0, r4
   1f37c:	f7ff ffe2 	bl	1f344 <channel_allocated_clr>
	__asm__ volatile(
   1f380:	f385 8811 	msr	BASEPRI, r5
   1f384:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f388:	4801      	ldr	r0, [pc, #4]	; (1f390 <nrfx_gpiote_channel_free+0x34>)
}
   1f38a:	e7ed      	b.n	1f368 <nrfx_gpiote_channel_free+0xc>
   1f38c:	0bad0004 	.word	0x0bad0004
   1f390:	0bad0000 	.word	0x0bad0000

0001f394 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1f394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f398:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1f39a:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1f39c:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f39e:	4f17      	ldr	r7, [pc, #92]	; (1f3fc <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1f3a0:	e013      	b.n	1f3ca <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
   1f3a2:	4620      	mov	r0, r4
   1f3a4:	f7ff ffc4 	bl	1f330 <channel_allocated_set>
            *p_channel = ch_idx;
   1f3a8:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
   1f3ac:	4f14      	ldr	r7, [pc, #80]	; (1f400 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
   1f3ae:	f386 8811 	msr	BASEPRI, r6
   1f3b2:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1f3b6:	4b12      	ldr	r3, [pc, #72]	; (1f400 <nrfx_gpiote_channel_alloc+0x6c>)
   1f3b8:	429f      	cmp	r7, r3
   1f3ba:	d01b      	beq.n	1f3f4 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1f3bc:	2301      	movs	r3, #1
   1f3be:	fa03 f309 	lsl.w	r3, r3, r9
   1f3c2:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1f3c6:	3401      	adds	r4, #1
   1f3c8:	b2e4      	uxtb	r4, r4
   1f3ca:	b19d      	cbz	r5, 1f3f4 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
   1f3cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f3d0:	f3ef 8611 	mrs	r6, BASEPRI
   1f3d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1f3d8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1f3dc:	46a1      	mov	r9, r4
   1f3de:	fa25 f304 	lsr.w	r3, r5, r4
   1f3e2:	f013 0f01 	tst.w	r3, #1
   1f3e6:	d0e2      	beq.n	1f3ae <nrfx_gpiote_channel_alloc+0x1a>
   1f3e8:	4620      	mov	r0, r4
   1f3ea:	f7ff ff95 	bl	1f318 <is_allocated_channel>
   1f3ee:	2800      	cmp	r0, #0
   1f3f0:	d1dd      	bne.n	1f3ae <nrfx_gpiote_channel_alloc+0x1a>
   1f3f2:	e7d6      	b.n	1f3a2 <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f3f4:	4638      	mov	r0, r7
   1f3f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f3fa:	bf00      	nop
   1f3fc:	0bad0002 	.word	0x0bad0002
   1f400:	0bad0000 	.word	0x0bad0000

0001f404 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f404:	4b06      	ldr	r3, [pc, #24]	; (1f420 <nrf52_errata_197+0x1c>)
   1f406:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f408:	4a06      	ldr	r2, [pc, #24]	; (1f424 <nrf52_errata_197+0x20>)
   1f40a:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
   1f40c:	2b08      	cmp	r3, #8
   1f40e:	d001      	beq.n	1f414 <nrf52_errata_197+0x10>
        return false;
   1f410:	2000      	movs	r0, #0
   1f412:	4770      	bx	lr
                switch(var2)
   1f414:	2a02      	cmp	r2, #2
   1f416:	d001      	beq.n	1f41c <nrf52_errata_197+0x18>
                        return false;
   1f418:	2000      	movs	r0, #0
   1f41a:	4770      	bx	lr
                        return true;
   1f41c:	2001      	movs	r0, #1
}
   1f41e:	4770      	bx	lr
   1f420:	10000130 	.word	0x10000130
   1f424:	10000134 	.word	0x10000134

0001f428 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
   1f428:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
   1f42a:	4b18      	ldr	r3, [pc, #96]	; (1f48c <nrfx_power_init+0x64>)
   1f42c:	781b      	ldrb	r3, [r3, #0]
   1f42e:	bb5b      	cbnz	r3, 1f488 <nrfx_power_init+0x60>
   1f430:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
   1f432:	7803      	ldrb	r3, [r0, #0]
   1f434:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
   1f438:	f013 0f02 	tst.w	r3, #2
   1f43c:	d005      	beq.n	1f44a <nrfx_power_init+0x22>
   1f43e:	f7ff ffe1 	bl	1f404 <nrf52_errata_197>
   1f442:	b110      	cbz	r0, 1f44a <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
   1f444:	4b12      	ldr	r3, [pc, #72]	; (1f490 <nrfx_power_init+0x68>)
   1f446:	2201      	movs	r2, #1
   1f448:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1f44a:	b1b5      	cbz	r5, 1f47a <nrfx_power_init+0x52>
   1f44c:	2201      	movs	r2, #1
   1f44e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f452:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
   1f456:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1f458:	f013 0f01 	tst.w	r3, #1
   1f45c:	d00f      	beq.n	1f47e <nrfx_power_init+0x56>
   1f45e:	2201      	movs	r2, #1
   1f460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f464:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1f468:	2000      	movs	r0, #0
   1f46a:	f7f5 fe91 	bl	15190 <arch_irq_is_enabled>
   1f46e:	b140      	cbz	r0, 1f482 <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
   1f470:	4b06      	ldr	r3, [pc, #24]	; (1f48c <nrfx_power_init+0x64>)
   1f472:	2201      	movs	r2, #1
   1f474:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
   1f476:	4807      	ldr	r0, [pc, #28]	; (1f494 <nrfx_power_init+0x6c>)
}
   1f478:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   1f47a:	2200      	movs	r2, #0
   1f47c:	e7e7      	b.n	1f44e <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   1f47e:	2200      	movs	r2, #0
   1f480:	e7ee      	b.n	1f460 <nrfx_power_init+0x38>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1f482:	f7f5 fe61 	bl	15148 <arch_irq_enable>
   1f486:	e7f3      	b.n	1f470 <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
   1f488:	4803      	ldr	r0, [pc, #12]	; (1f498 <nrfx_power_init+0x70>)
   1f48a:	e7f5      	b.n	1f478 <nrfx_power_init+0x50>
   1f48c:	20004754 	.word	0x20004754
   1f490:	40000638 	.word	0x40000638
   1f494:	0bad0000 	.word	0x0bad0000
   1f498:	0bad000c 	.word	0x0bad000c

0001f49c <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
   1f49c:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
   1f49e:	f00b ffd7 	bl	2b450 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
   1f4a2:	4b02      	ldr	r3, [pc, #8]	; (1f4ac <nrfx_power_usbevt_uninit+0x10>)
   1f4a4:	2200      	movs	r2, #0
   1f4a6:	601a      	str	r2, [r3, #0]
}
   1f4a8:	bd08      	pop	{r3, pc}
   1f4aa:	bf00      	nop
   1f4ac:	20003bbc 	.word	0x20003bbc

0001f4b0 <nrfx_power_usbevt_init>:
{
   1f4b0:	b510      	push	{r4, lr}
   1f4b2:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
   1f4b4:	f7ff fff2 	bl	1f49c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
   1f4b8:	6823      	ldr	r3, [r4, #0]
   1f4ba:	b10b      	cbz	r3, 1f4c0 <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
   1f4bc:	4a01      	ldr	r2, [pc, #4]	; (1f4c4 <nrfx_power_usbevt_init+0x14>)
   1f4be:	6013      	str	r3, [r2, #0]
}
   1f4c0:	bd10      	pop	{r4, pc}
   1f4c2:	bf00      	nop
   1f4c4:	20003bbc 	.word	0x20003bbc

0001f4c8 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
   1f4c8:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
   1f4ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f4ce:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
   1f4d2:	f014 0f04 	tst.w	r4, #4
   1f4d6:	d00b      	beq.n	1f4f0 <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f4d8:	f503 7384 	add.w	r3, r3, #264	; 0x108
   1f4dc:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1f4de:	b11b      	cbz	r3, 1f4e8 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4e0:	4a29      	ldr	r2, [pc, #164]	; (1f588 <nrfx_power_irq_handler+0xc0>)
   1f4e2:	2100      	movs	r1, #0
   1f4e4:	6011      	str	r1, [r2, #0]
   1f4e6:	6812      	ldr	r2, [r2, #0]
   1f4e8:	b113      	cbz	r3, 1f4f0 <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
   1f4ea:	4b28      	ldr	r3, [pc, #160]	; (1f58c <nrfx_power_irq_handler+0xc4>)
   1f4ec:	681b      	ldr	r3, [r3, #0]
   1f4ee:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
   1f4f0:	f014 0f20 	tst.w	r4, #32
   1f4f4:	d00b      	beq.n	1f50e <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f4f6:	4b26      	ldr	r3, [pc, #152]	; (1f590 <nrfx_power_irq_handler+0xc8>)
   1f4f8:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1f4fa:	b11b      	cbz	r3, 1f504 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f4fc:	4a24      	ldr	r2, [pc, #144]	; (1f590 <nrfx_power_irq_handler+0xc8>)
   1f4fe:	2100      	movs	r1, #0
   1f500:	6011      	str	r1, [r2, #0]
   1f502:	6812      	ldr	r2, [r2, #0]
   1f504:	b11b      	cbz	r3, 1f50e <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
   1f506:	4b23      	ldr	r3, [pc, #140]	; (1f594 <nrfx_power_irq_handler+0xcc>)
   1f508:	681b      	ldr	r3, [r3, #0]
   1f50a:	2000      	movs	r0, #0
   1f50c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
   1f50e:	f014 0f40 	tst.w	r4, #64	; 0x40
   1f512:	d00b      	beq.n	1f52c <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f514:	4b20      	ldr	r3, [pc, #128]	; (1f598 <nrfx_power_irq_handler+0xd0>)
   1f516:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1f518:	b11b      	cbz	r3, 1f522 <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f51a:	4a1f      	ldr	r2, [pc, #124]	; (1f598 <nrfx_power_irq_handler+0xd0>)
   1f51c:	2100      	movs	r1, #0
   1f51e:	6011      	str	r1, [r2, #0]
   1f520:	6812      	ldr	r2, [r2, #0]
   1f522:	b11b      	cbz	r3, 1f52c <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
   1f524:	4b1b      	ldr	r3, [pc, #108]	; (1f594 <nrfx_power_irq_handler+0xcc>)
   1f526:	681b      	ldr	r3, [r3, #0]
   1f528:	2001      	movs	r0, #1
   1f52a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
   1f52c:	f014 0f80 	tst.w	r4, #128	; 0x80
   1f530:	d00b      	beq.n	1f54a <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f532:	4b1a      	ldr	r3, [pc, #104]	; (1f59c <nrfx_power_irq_handler+0xd4>)
   1f534:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1f536:	b11b      	cbz	r3, 1f540 <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f538:	4a18      	ldr	r2, [pc, #96]	; (1f59c <nrfx_power_irq_handler+0xd4>)
   1f53a:	2100      	movs	r1, #0
   1f53c:	6011      	str	r1, [r2, #0]
   1f53e:	6812      	ldr	r2, [r2, #0]
   1f540:	b11b      	cbz	r3, 1f54a <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
   1f542:	4b17      	ldr	r3, [pc, #92]	; (1f5a0 <nrfx_power_irq_handler+0xd8>)
   1f544:	681b      	ldr	r3, [r3, #0]
   1f546:	2000      	movs	r0, #0
   1f548:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
   1f54a:	f414 7f80 	tst.w	r4, #256	; 0x100
   1f54e:	d00b      	beq.n	1f568 <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f550:	4b14      	ldr	r3, [pc, #80]	; (1f5a4 <nrfx_power_irq_handler+0xdc>)
   1f552:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1f554:	b11b      	cbz	r3, 1f55e <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f556:	4a13      	ldr	r2, [pc, #76]	; (1f5a4 <nrfx_power_irq_handler+0xdc>)
   1f558:	2100      	movs	r1, #0
   1f55a:	6011      	str	r1, [r2, #0]
   1f55c:	6812      	ldr	r2, [r2, #0]
   1f55e:	b11b      	cbz	r3, 1f568 <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
   1f560:	4b0f      	ldr	r3, [pc, #60]	; (1f5a0 <nrfx_power_irq_handler+0xd8>)
   1f562:	681b      	ldr	r3, [r3, #0]
   1f564:	2001      	movs	r0, #1
   1f566:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
   1f568:	f414 7f00 	tst.w	r4, #512	; 0x200
   1f56c:	d00b      	beq.n	1f586 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f56e:	4b0e      	ldr	r3, [pc, #56]	; (1f5a8 <nrfx_power_irq_handler+0xe0>)
   1f570:	681b      	ldr	r3, [r3, #0]
    if (ret)
   1f572:	b11b      	cbz	r3, 1f57c <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f574:	4a0c      	ldr	r2, [pc, #48]	; (1f5a8 <nrfx_power_irq_handler+0xe0>)
   1f576:	2100      	movs	r1, #0
   1f578:	6011      	str	r1, [r2, #0]
   1f57a:	6812      	ldr	r2, [r2, #0]
   1f57c:	b11b      	cbz	r3, 1f586 <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
   1f57e:	4b08      	ldr	r3, [pc, #32]	; (1f5a0 <nrfx_power_irq_handler+0xd8>)
   1f580:	681b      	ldr	r3, [r3, #0]
   1f582:	2002      	movs	r0, #2
   1f584:	4798      	blx	r3
    }
#endif
}
   1f586:	bd10      	pop	{r4, pc}
   1f588:	40000108 	.word	0x40000108
   1f58c:	20003bb4 	.word	0x20003bb4
   1f590:	40000114 	.word	0x40000114
   1f594:	20003bb8 	.word	0x20003bb8
   1f598:	40000118 	.word	0x40000118
   1f59c:	4000011c 	.word	0x4000011c
   1f5a0:	20003bbc 	.word	0x20003bbc
   1f5a4:	40000120 	.word	0x40000120
   1f5a8:	40000124 	.word	0x40000124

0001f5ac <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1f5ac:	2301      	movs	r3, #1
   1f5ae:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1f5b0:	4a03      	ldr	r2, [pc, #12]	; (1f5c0 <is_allocated_channel+0x14>)
   1f5b2:	6812      	ldr	r2, [r2, #0]
   1f5b4:	4213      	tst	r3, r2
}
   1f5b6:	bf14      	ite	ne
   1f5b8:	2001      	movne	r0, #1
   1f5ba:	2000      	moveq	r0, #0
   1f5bc:	4770      	bx	lr
   1f5be:	bf00      	nop
   1f5c0:	20003bc0 	.word	0x20003bc0

0001f5c4 <channel_allocated_set>:
   1f5c4:	2301      	movs	r3, #1
   1f5c6:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1f5ca:	4a02      	ldr	r2, [pc, #8]	; (1f5d4 <channel_allocated_set+0x10>)
   1f5cc:	6813      	ldr	r3, [r2, #0]
   1f5ce:	4303      	orrs	r3, r0
   1f5d0:	6013      	str	r3, [r2, #0]
}
   1f5d2:	4770      	bx	lr
   1f5d4:	20003bc0 	.word	0x20003bc0

0001f5d8 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1f5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f5dc:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1f5de:	4b18      	ldr	r3, [pc, #96]	; (1f640 <nrfx_ppi_channel_alloc+0x68>)
   1f5e0:	681e      	ldr	r6, [r3, #0]
   1f5e2:	43f6      	mvns	r6, r6
   1f5e4:	f3c6 0613 	ubfx	r6, r6, #0, #20

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f5e8:	2400      	movs	r4, #0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1f5ea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1f648 <nrfx_ppi_channel_alloc+0x70>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f5ee:	e011      	b.n	1f614 <nrfx_ppi_channel_alloc+0x3c>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
   1f5f0:	4620      	mov	r0, r4
   1f5f2:	f7ff ffe7 	bl	1f5c4 <channel_allocated_set>
            *p_channel = channel;
   1f5f6:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
   1f5fa:	f8df 8048 	ldr.w	r8, [pc, #72]	; 1f644 <nrfx_ppi_channel_alloc+0x6c>
	__asm__ volatile(
   1f5fe:	f387 8811 	msr	BASEPRI, r7
   1f602:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
   1f606:	4b0f      	ldr	r3, [pc, #60]	; (1f644 <nrfx_ppi_channel_alloc+0x6c>)
   1f608:	4598      	cmp	r8, r3
   1f60a:	d016      	beq.n	1f63a <nrfx_ppi_channel_alloc+0x62>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1f60c:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1f610:	3401      	adds	r4, #1
   1f612:	b2e4      	uxtb	r4, r4
   1f614:	b18e      	cbz	r6, 1f63a <nrfx_ppi_channel_alloc+0x62>
	__asm__ volatile(
   1f616:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f61a:	f3ef 8711 	mrs	r7, BASEPRI
   1f61e:	f383 8812 	msr	BASEPRI_MAX, r3
   1f622:	f3bf 8f6f 	isb	sy
   1f626:	2501      	movs	r5, #1
   1f628:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1f62a:	4235      	tst	r5, r6
   1f62c:	d0e7      	beq.n	1f5fe <nrfx_ppi_channel_alloc+0x26>
   1f62e:	4620      	mov	r0, r4
   1f630:	f7ff ffbc 	bl	1f5ac <is_allocated_channel>
   1f634:	2800      	cmp	r0, #0
   1f636:	d1e2      	bne.n	1f5fe <nrfx_ppi_channel_alloc+0x26>
   1f638:	e7da      	b.n	1f5f0 <nrfx_ppi_channel_alloc+0x18>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f63a:	4640      	mov	r0, r8
   1f63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f640:	0002f040 	.word	0x0002f040
   1f644:	0bad0000 	.word	0x0bad0000
   1f648:	0bad0002 	.word	0x0bad0002

0001f64c <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f64c:	4b03      	ldr	r3, [pc, #12]	; (1f65c <nrf52_errata_166+0x10>)
   1f64e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1f650:	2b08      	cmp	r3, #8
   1f652:	d001      	beq.n	1f658 <nrf52_errata_166+0xc>
        return false;
   1f654:	2000      	movs	r0, #0
   1f656:	4770      	bx	lr
                        return true;
   1f658:	2001      	movs	r0, #1
}
   1f65a:	4770      	bx	lr
   1f65c:	10000130 	.word	0x10000130

0001f660 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f660:	4b03      	ldr	r3, [pc, #12]	; (1f670 <nrf52_errata_171+0x10>)
   1f662:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1f664:	2b08      	cmp	r3, #8
   1f666:	d001      	beq.n	1f66c <nrf52_errata_171+0xc>
        return false;
   1f668:	2000      	movs	r0, #0
   1f66a:	4770      	bx	lr
                        return true;
   1f66c:	2001      	movs	r0, #1
}
   1f66e:	4770      	bx	lr
   1f670:	10000130 	.word	0x10000130

0001f674 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f674:	4b08      	ldr	r3, [pc, #32]	; (1f698 <nrf52_errata_187+0x24>)
   1f676:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f678:	3304      	adds	r3, #4
   1f67a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1f67c:	2a08      	cmp	r2, #8
   1f67e:	d001      	beq.n	1f684 <nrf52_errata_187+0x10>
        return false;
   1f680:	2000      	movs	r0, #0
   1f682:	4770      	bx	lr
                switch(var2)
   1f684:	2b00      	cmp	r3, #0
   1f686:	d804      	bhi.n	1f692 <nrf52_errata_187+0x1e>
   1f688:	e8df f003 	tbb	[pc, r3]
   1f68c:	01          	.byte	0x01
   1f68d:	00          	.byte	0x00
            if (var1 == 0x08)
   1f68e:	2000      	movs	r0, #0
   1f690:	4770      	bx	lr
                        return true;
   1f692:	2001      	movs	r0, #1
}
   1f694:	4770      	bx	lr
   1f696:	bf00      	nop
   1f698:	10000130 	.word	0x10000130

0001f69c <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f69c:	4b03      	ldr	r3, [pc, #12]	; (1f6ac <nrf52_errata_199+0x10>)
   1f69e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
   1f6a0:	2b08      	cmp	r3, #8
   1f6a2:	d001      	beq.n	1f6a8 <nrf52_errata_199+0xc>
        return false;
   1f6a4:	2000      	movs	r0, #0
   1f6a6:	4770      	bx	lr
                        return true;
   1f6a8:	2001      	movs	r0, #1
}
   1f6aa:	4770      	bx	lr
   1f6ac:	10000130 	.word	0x10000130

0001f6b0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
   1f6b0:	b500      	push	{lr}
   1f6b2:	b083      	sub	sp, #12
    m_bus_suspend = false;
   1f6b4:	2300      	movs	r3, #0
   1f6b6:	4a09      	ldr	r2, [pc, #36]	; (1f6dc <ev_usbreset_handler+0x2c>)
   1f6b8:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   1f6ba:	4a09      	ldr	r2, [pc, #36]	; (1f6e0 <ev_usbreset_handler+0x30>)
   1f6bc:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
   1f6be:	f8ad 3005 	strh.w	r3, [sp, #5]
   1f6c2:	f88d 3007 	strb.w	r3, [sp, #7]
   1f6c6:	2301      	movs	r3, #1
   1f6c8:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
   1f6cc:	4b05      	ldr	r3, [pc, #20]	; (1f6e4 <ev_usbreset_handler+0x34>)
   1f6ce:	681b      	ldr	r3, [r3, #0]
   1f6d0:	a801      	add	r0, sp, #4
   1f6d2:	4798      	blx	r3
}
   1f6d4:	b003      	add	sp, #12
   1f6d6:	f85d fb04 	ldr.w	pc, [sp], #4
   1f6da:	bf00      	nop
   1f6dc:	20004755 	.word	0x20004755
   1f6e0:	20004758 	.word	0x20004758
   1f6e4:	20003dc4 	.word	0x20003dc4

0001f6e8 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
   1f6e8:	b500      	push	{lr}
   1f6ea:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
   1f6ec:	2300      	movs	r3, #0
   1f6ee:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
   1f6f2:	4b12      	ldr	r3, [pc, #72]	; (1f73c <ev_sof_handler+0x54>)
   1f6f4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1f6f8:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
   1f6fc:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
   1f700:	b15b      	cbz	r3, 1f71a <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   1f702:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   1f706:	d115      	bne.n	1f734 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
   1f708:	f1b3 3fff 	cmp.w	r3, #4294967295
   1f70c:	d002      	beq.n	1f714 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1f70e:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
   1f712:	e004      	b.n	1f71e <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
   1f714:	f44f 7180 	mov.w	r1, #256	; 0x100
   1f718:	e001      	b.n	1f71e <ev_sof_handler+0x36>
   1f71a:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
   1f71e:	4a08      	ldr	r2, [pc, #32]	; (1f740 <ev_sof_handler+0x58>)
   1f720:	6813      	ldr	r3, [r2, #0]
   1f722:	430b      	orrs	r3, r1
   1f724:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
   1f726:	4b07      	ldr	r3, [pc, #28]	; (1f744 <ev_sof_handler+0x5c>)
   1f728:	681b      	ldr	r3, [r3, #0]
   1f72a:	a801      	add	r0, sp, #4
   1f72c:	4798      	blx	r3
}
   1f72e:	b003      	add	sp, #12
   1f730:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
   1f734:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
   1f738:	e7f1      	b.n	1f71e <ev_sof_handler+0x36>
   1f73a:	bf00      	nop
   1f73c:	40027000 	.word	0x40027000
   1f740:	20003ca0 	.word	0x20003ca0
   1f744:	20003dc4 	.word	0x20003dc4

0001f748 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
   1f748:	b510      	push	{r4, lr}
   1f74a:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
   1f74c:	4b23      	ldr	r3, [pc, #140]	; (1f7dc <ev_usbevent_handler+0x94>)
   1f74e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
   1f752:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1f756:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
   1f75a:	f414 7f80 	tst.w	r4, #256	; 0x100
   1f75e:	d00e      	beq.n	1f77e <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
   1f760:	4b1f      	ldr	r3, [pc, #124]	; (1f7e0 <ev_usbevent_handler+0x98>)
   1f762:	2201      	movs	r2, #1
   1f764:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
   1f766:	2300      	movs	r3, #0
   1f768:	f8ad 3005 	strh.w	r3, [sp, #5]
   1f76c:	f88d 3007 	strb.w	r3, [sp, #7]
   1f770:	2302      	movs	r3, #2
   1f772:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
   1f776:	4b1b      	ldr	r3, [pc, #108]	; (1f7e4 <ev_usbevent_handler+0x9c>)
   1f778:	681b      	ldr	r3, [r3, #0]
   1f77a:	a801      	add	r0, sp, #4
   1f77c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   1f77e:	f414 7f00 	tst.w	r4, #512	; 0x200
   1f782:	d00d      	beq.n	1f7a0 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
   1f784:	2300      	movs	r3, #0
   1f786:	4a16      	ldr	r2, [pc, #88]	; (1f7e0 <ev_usbevent_handler+0x98>)
   1f788:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
   1f78a:	f8ad 3005 	strh.w	r3, [sp, #5]
   1f78e:	f88d 3007 	strb.w	r3, [sp, #7]
   1f792:	2303      	movs	r3, #3
   1f794:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
   1f798:	4b12      	ldr	r3, [pc, #72]	; (1f7e4 <ev_usbevent_handler+0x9c>)
   1f79a:	681b      	ldr	r3, [r3, #0]
   1f79c:	a801      	add	r0, sp, #4
   1f79e:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
   1f7a0:	f414 6f80 	tst.w	r4, #1024	; 0x400
   1f7a4:	d017      	beq.n	1f7d6 <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
   1f7a6:	4b0e      	ldr	r3, [pc, #56]	; (1f7e0 <ev_usbevent_handler+0x98>)
   1f7a8:	781b      	ldrb	r3, [r3, #0]
   1f7aa:	b1a3      	cbz	r3, 1f7d6 <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
   1f7ac:	2300      	movs	r3, #0
   1f7ae:	4a0c      	ldr	r2, [pc, #48]	; (1f7e0 <ev_usbevent_handler+0x98>)
   1f7b0:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
   1f7b2:	2101      	movs	r1, #1
   1f7b4:	4a09      	ldr	r2, [pc, #36]	; (1f7dc <ev_usbevent_handler+0x94>)
   1f7b6:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   1f7ba:	3258      	adds	r2, #88	; 0x58
   1f7bc:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   1f7be:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
   1f7c0:	f8ad 3005 	strh.w	r3, [sp, #5]
   1f7c4:	f88d 3007 	strb.w	r3, [sp, #7]
   1f7c8:	2304      	movs	r3, #4
   1f7ca:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
   1f7ce:	4b05      	ldr	r3, [pc, #20]	; (1f7e4 <ev_usbevent_handler+0x9c>)
   1f7d0:	681b      	ldr	r3, [r3, #0]
   1f7d2:	a801      	add	r0, sp, #4
   1f7d4:	4798      	blx	r3
        }
    }
}
   1f7d6:	b002      	add	sp, #8
   1f7d8:	bd10      	pop	{r4, pc}
   1f7da:	bf00      	nop
   1f7dc:	40027000 	.word	0x40027000
   1f7e0:	20004755 	.word	0x20004755
   1f7e4:	20003dc4 	.word	0x20003dc4

0001f7e8 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
   1f7e8:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1f7ea:	f7ff ff43 	bl	1f674 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
   1f7ee:	b1b8      	cbz	r0, 1f820 <usbd_enable+0x38>
   1f7f0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f7f4:	f3ef 8311 	mrs	r3, BASEPRI
   1f7f8:	f382 8812 	msr	BASEPRI_MAX, r2
   1f7fc:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1f800:	4a41      	ldr	r2, [pc, #260]	; (1f908 <usbd_enable+0x120>)
   1f802:	6812      	ldr	r2, [r2, #0]
   1f804:	2a00      	cmp	r2, #0
   1f806:	d16f      	bne.n	1f8e8 <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f808:	4a3f      	ldr	r2, [pc, #252]	; (1f908 <usbd_enable+0x120>)
   1f80a:	f249 3175 	movw	r1, #37749	; 0x9375
   1f80e:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1f810:	483e      	ldr	r0, [pc, #248]	; (1f90c <usbd_enable+0x124>)
   1f812:	2403      	movs	r4, #3
   1f814:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f816:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1f818:	f383 8811 	msr	BASEPRI, r3
   1f81c:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
   1f820:	f7ff ff1e 	bl	1f660 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
   1f824:	b1b8      	cbz	r0, 1f856 <usbd_enable+0x6e>
	__asm__ volatile(
   1f826:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f82a:	f3ef 8311 	mrs	r3, BASEPRI
   1f82e:	f382 8812 	msr	BASEPRI_MAX, r2
   1f832:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1f836:	4a34      	ldr	r2, [pc, #208]	; (1f908 <usbd_enable+0x120>)
   1f838:	6812      	ldr	r2, [r2, #0]
   1f83a:	2a00      	cmp	r2, #0
   1f83c:	d158      	bne.n	1f8f0 <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f83e:	4a32      	ldr	r2, [pc, #200]	; (1f908 <usbd_enable+0x120>)
   1f840:	f249 3175 	movw	r1, #37749	; 0x9375
   1f844:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1f846:	4832      	ldr	r0, [pc, #200]	; (1f910 <usbd_enable+0x128>)
   1f848:	24c0      	movs	r4, #192	; 0xc0
   1f84a:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f84c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1f84e:	f383 8811 	msr	BASEPRI, r3
   1f852:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
   1f856:	4b2f      	ldr	r3, [pc, #188]	; (1f914 <usbd_enable+0x12c>)
   1f858:	2201      	movs	r2, #1
   1f85a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   1f85e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
   1f862:	4b2c      	ldr	r3, [pc, #176]	; (1f914 <usbd_enable+0x12c>)
   1f864:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
   1f868:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1f86c:	d0f9      	beq.n	1f862 <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
   1f86e:	4b29      	ldr	r3, [pc, #164]	; (1f914 <usbd_enable+0x12c>)
   1f870:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f874:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1f878:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   1f87c:	f7ff fef0 	bl	1f660 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
   1f880:	b1b8      	cbz	r0, 1f8b2 <usbd_enable+0xca>
	__asm__ volatile(
   1f882:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f886:	f3ef 8311 	mrs	r3, BASEPRI
   1f88a:	f382 8812 	msr	BASEPRI_MAX, r2
   1f88e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1f892:	4a1d      	ldr	r2, [pc, #116]	; (1f908 <usbd_enable+0x120>)
   1f894:	6812      	ldr	r2, [r2, #0]
   1f896:	2a00      	cmp	r2, #0
   1f898:	d12e      	bne.n	1f8f8 <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f89a:	4a1b      	ldr	r2, [pc, #108]	; (1f908 <usbd_enable+0x120>)
   1f89c:	f249 3175 	movw	r1, #37749	; 0x9375
   1f8a0:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1f8a2:	481b      	ldr	r0, [pc, #108]	; (1f910 <usbd_enable+0x128>)
   1f8a4:	2400      	movs	r4, #0
   1f8a6:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f8a8:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1f8aa:	f383 8811 	msr	BASEPRI, r3
   1f8ae:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1f8b2:	f7ff fedf 	bl	1f674 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
   1f8b6:	b1b0      	cbz	r0, 1f8e6 <usbd_enable+0xfe>
	__asm__ volatile(
   1f8b8:	f04f 0240 	mov.w	r2, #64	; 0x40
   1f8bc:	f3ef 8311 	mrs	r3, BASEPRI
   1f8c0:	f382 8812 	msr	BASEPRI_MAX, r2
   1f8c4:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1f8c8:	4a0f      	ldr	r2, [pc, #60]	; (1f908 <usbd_enable+0x120>)
   1f8ca:	6812      	ldr	r2, [r2, #0]
   1f8cc:	b9c2      	cbnz	r2, 1f900 <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f8ce:	4a0e      	ldr	r2, [pc, #56]	; (1f908 <usbd_enable+0x120>)
   1f8d0:	f249 3175 	movw	r1, #37749	; 0x9375
   1f8d4:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1f8d6:	480d      	ldr	r0, [pc, #52]	; (1f90c <usbd_enable+0x124>)
   1f8d8:	2400      	movs	r4, #0
   1f8da:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1f8dc:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1f8de:	f383 8811 	msr	BASEPRI, r3
   1f8e2:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
   1f8e6:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1f8e8:	4a08      	ldr	r2, [pc, #32]	; (1f90c <usbd_enable+0x124>)
   1f8ea:	2103      	movs	r1, #3
   1f8ec:	6011      	str	r1, [r2, #0]
   1f8ee:	e793      	b.n	1f818 <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
   1f8f0:	4a07      	ldr	r2, [pc, #28]	; (1f910 <usbd_enable+0x128>)
   1f8f2:	21c0      	movs	r1, #192	; 0xc0
   1f8f4:	6011      	str	r1, [r2, #0]
   1f8f6:	e7aa      	b.n	1f84e <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
   1f8f8:	4a05      	ldr	r2, [pc, #20]	; (1f910 <usbd_enable+0x128>)
   1f8fa:	2100      	movs	r1, #0
   1f8fc:	6011      	str	r1, [r2, #0]
   1f8fe:	e7d4      	b.n	1f8aa <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   1f900:	4a02      	ldr	r2, [pc, #8]	; (1f90c <usbd_enable+0x124>)
   1f902:	2100      	movs	r1, #0
   1f904:	6011      	str	r1, [r2, #0]
   1f906:	e7ea      	b.n	1f8de <usbd_enable+0xf6>
   1f908:	4006ec00 	.word	0x4006ec00
   1f90c:	4006ed14 	.word	0x4006ed14
   1f910:	4006ec14 	.word	0x4006ec14
   1f914:	40027000 	.word	0x40027000

0001f918 <usbd_ep_data_handler>:
{
   1f918:	b530      	push	{r4, r5, lr}
   1f91a:	b083      	sub	sp, #12
   1f91c:	4604      	mov	r4, r0
   1f91e:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
   1f920:	2301      	movs	r3, #1
   1f922:	fa03 f201 	lsl.w	r2, r3, r1
   1f926:	495c      	ldr	r1, [pc, #368]	; (1fa98 <usbd_ep_data_handler+0x180>)
   1f928:	680b      	ldr	r3, [r1, #0]
   1f92a:	4313      	orrs	r3, r2
   1f92c:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
   1f92e:	f010 0f80 	tst.w	r0, #128	; 0x80
   1f932:	d114      	bne.n	1f95e <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1f934:	4b59      	ldr	r3, [pc, #356]	; (1fa9c <usbd_ep_data_handler+0x184>)
   1f936:	6819      	ldr	r1, [r3, #0]
   1f938:	fa21 f505 	lsr.w	r5, r1, r5
   1f93c:	f015 0f01 	tst.w	r5, #1
   1f940:	d10b      	bne.n	1f95a <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
   1f942:	2306      	movs	r3, #6
   1f944:	f88d 3004 	strb.w	r3, [sp, #4]
   1f948:	f88d 0006 	strb.w	r0, [sp, #6]
   1f94c:	2301      	movs	r3, #1
   1f94e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1f952:	4b53      	ldr	r3, [pc, #332]	; (1faa0 <usbd_ep_data_handler+0x188>)
   1f954:	681b      	ldr	r3, [r3, #0]
   1f956:	a801      	add	r0, sp, #4
   1f958:	4798      	blx	r3
}
   1f95a:	b003      	add	sp, #12
   1f95c:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   1f95e:	f000 030f 	and.w	r3, r0, #15
   1f962:	4a50      	ldr	r2, [pc, #320]	; (1faa4 <usbd_ep_data_handler+0x18c>)
   1f964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   1f968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f96c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   1f970:	681a      	ldr	r2, [r3, #0]
    if (ret)
   1f972:	b112      	cbz	r2, 1f97a <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   1f974:	2100      	movs	r1, #0
   1f976:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   1f978:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
   1f97a:	2a00      	cmp	r2, #0
   1f97c:	d047      	beq.n	1fa0e <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
   1f97e:	2c80      	cmp	r4, #128	; 0x80
   1f980:	d05b      	beq.n	1fa3a <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   1f982:	f7ff fe8b 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1f986:	b110      	cbz	r0, 1f98e <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1f988:	4b47      	ldr	r3, [pc, #284]	; (1faa8 <usbd_ep_data_handler+0x190>)
   1f98a:	2200      	movs	r2, #0
   1f98c:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1f98e:	4b47      	ldr	r3, [pc, #284]	; (1faac <usbd_ep_data_handler+0x194>)
   1f990:	2200      	movs	r2, #0
   1f992:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1f994:	b263      	sxtb	r3, r4
   1f996:	4293      	cmp	r3, r2
   1f998:	db21      	blt.n	1f9de <usbd_ep_data_handler+0xc6>
   1f99a:	4945      	ldr	r1, [pc, #276]	; (1fab0 <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
   1f99c:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1f9a0:	0110      	lsls	r0, r2, #4
   1f9a2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1f9a6:	7b92      	ldrb	r2, [r2, #14]
   1f9a8:	2a03      	cmp	r2, #3
   1f9aa:	d01a      	beq.n	1f9e2 <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
   1f9ac:	580a      	ldr	r2, [r1, r0]
   1f9ae:	bb72      	cbnz	r2, 1fa0e <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
   1f9b0:	2b00      	cmp	r3, #0
   1f9b2:	db00      	blt.n	1f9b6 <usbd_ep_data_handler+0x9e>
   1f9b4:	2210      	movs	r2, #16
   1f9b6:	f003 030f 	and.w	r3, r3, #15
   1f9ba:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1f9bc:	2201      	movs	r2, #1
   1f9be:	fa02 f303 	lsl.w	r3, r2, r3
   1f9c2:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f9c4:	4a35      	ldr	r2, [pc, #212]	; (1fa9c <usbd_ep_data_handler+0x184>)
   1f9c6:	f3bf 8f5b 	dmb	ish
   1f9ca:	e852 1f00 	ldrex	r1, [r2]
   1f9ce:	4019      	ands	r1, r3
   1f9d0:	e842 1000 	strex	r0, r1, [r2]
   1f9d4:	2800      	cmp	r0, #0
   1f9d6:	d1f8      	bne.n	1f9ca <usbd_ep_data_handler+0xb2>
   1f9d8:	f3bf 8f5b 	dmb	ish
}
   1f9dc:	e017      	b.n	1fa0e <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   1f9de:	4935      	ldr	r1, [pc, #212]	; (1fab4 <usbd_ep_data_handler+0x19c>)
   1f9e0:	e7dc      	b.n	1f99c <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
   1f9e2:	2b00      	cmp	r3, #0
   1f9e4:	db27      	blt.n	1fa36 <usbd_ep_data_handler+0x11e>
   1f9e6:	2210      	movs	r2, #16
   1f9e8:	f003 030f 	and.w	r3, r3, #15
   1f9ec:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
   1f9ee:	2201      	movs	r2, #1
   1f9f0:	fa02 f303 	lsl.w	r3, r2, r3
   1f9f4:	43db      	mvns	r3, r3
   1f9f6:	4a29      	ldr	r2, [pc, #164]	; (1fa9c <usbd_ep_data_handler+0x184>)
   1f9f8:	f3bf 8f5b 	dmb	ish
   1f9fc:	e852 1f00 	ldrex	r1, [r2]
   1fa00:	4019      	ands	r1, r3
   1fa02:	e842 1000 	strex	r0, r1, [r2]
   1fa06:	2800      	cmp	r0, #0
   1fa08:	d1f8      	bne.n	1f9fc <usbd_ep_data_handler+0xe4>
   1fa0a:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
   1fa0e:	4b23      	ldr	r3, [pc, #140]	; (1fa9c <usbd_ep_data_handler+0x184>)
   1fa10:	6819      	ldr	r1, [r3, #0]
   1fa12:	fa21 f505 	lsr.w	r5, r1, r5
   1fa16:	f015 0f01 	tst.w	r5, #1
   1fa1a:	d19e      	bne.n	1f95a <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1fa1c:	2306      	movs	r3, #6
   1fa1e:	f88d 3004 	strb.w	r3, [sp, #4]
   1fa22:	f88d 4006 	strb.w	r4, [sp, #6]
   1fa26:	2300      	movs	r3, #0
   1fa28:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   1fa2c:	4b1c      	ldr	r3, [pc, #112]	; (1faa0 <usbd_ep_data_handler+0x188>)
   1fa2e:	681b      	ldr	r3, [r3, #0]
   1fa30:	a801      	add	r0, sp, #4
   1fa32:	4798      	blx	r3
   1fa34:	e791      	b.n	1f95a <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
   1fa36:	2200      	movs	r2, #0
   1fa38:	e7d6      	b.n	1f9e8 <usbd_ep_data_handler+0xd0>
   1fa3a:	f7ff fe2f 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fa3e:	b110      	cbz	r0, 1fa46 <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fa40:	4b19      	ldr	r3, [pc, #100]	; (1faa8 <usbd_ep_data_handler+0x190>)
   1fa42:	2200      	movs	r2, #0
   1fa44:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fa46:	4b19      	ldr	r3, [pc, #100]	; (1faac <usbd_ep_data_handler+0x194>)
   1fa48:	2200      	movs	r2, #0
   1fa4a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fa4c:	4b18      	ldr	r3, [pc, #96]	; (1fab0 <usbd_ep_data_handler+0x198>)
   1fa4e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   1fa52:	2b03      	cmp	r3, #3
   1fa54:	d012      	beq.n	1fa7c <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
   1fa56:	4b16      	ldr	r3, [pc, #88]	; (1fab0 <usbd_ep_data_handler+0x198>)
   1fa58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1fa5c:	2b00      	cmp	r3, #0
   1fa5e:	d1d6      	bne.n	1fa0e <usbd_ep_data_handler+0xf6>
   1fa60:	4b0e      	ldr	r3, [pc, #56]	; (1fa9c <usbd_ep_data_handler+0x184>)
   1fa62:	f3bf 8f5b 	dmb	ish
   1fa66:	e853 2f00 	ldrex	r2, [r3]
   1fa6a:	f022 0201 	bic.w	r2, r2, #1
   1fa6e:	e843 2100 	strex	r1, r2, [r3]
   1fa72:	2900      	cmp	r1, #0
   1fa74:	d1f7      	bne.n	1fa66 <usbd_ep_data_handler+0x14e>
   1fa76:	f3bf 8f5b 	dmb	ish
}
   1fa7a:	e7c8      	b.n	1fa0e <usbd_ep_data_handler+0xf6>
   1fa7c:	4b07      	ldr	r3, [pc, #28]	; (1fa9c <usbd_ep_data_handler+0x184>)
   1fa7e:	f3bf 8f5b 	dmb	ish
   1fa82:	e853 2f00 	ldrex	r2, [r3]
   1fa86:	f022 0201 	bic.w	r2, r2, #1
   1fa8a:	e843 2100 	strex	r1, r2, [r3]
   1fa8e:	2900      	cmp	r1, #0
   1fa90:	d1f7      	bne.n	1fa82 <usbd_ep_data_handler+0x16a>
   1fa92:	f3bf 8f5b 	dmb	ish
   1fa96:	e7ba      	b.n	1fa0e <usbd_ep_data_handler+0xf6>
   1fa98:	20003ca0 	.word	0x20003ca0
   1fa9c:	20003c30 	.word	0x20003c30
   1faa0:	20003dc4 	.word	0x20003dc4
   1faa4:	0002f09c 	.word	0x0002f09c
   1faa8:	40027c1c 	.word	0x40027c1c
   1faac:	20004756 	.word	0x20004756
   1fab0:	20003ca4 	.word	0x20003ca4
   1fab4:	20003d34 	.word	0x20003d34

0001fab8 <ev_setup_data_handler>:
{
   1fab8:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1faba:	4b07      	ldr	r3, [pc, #28]	; (1fad8 <ev_setup_data_handler+0x20>)
   1fabc:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   1fabe:	f993 3000 	ldrsb.w	r3, [r3]
   1fac2:	2b00      	cmp	r3, #0
   1fac4:	db06      	blt.n	1fad4 <ev_setup_data_handler+0x1c>
   1fac6:	2110      	movs	r1, #16
   1fac8:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
   1facc:	4419      	add	r1, r3
   1face:	f7ff ff23 	bl	1f918 <usbd_ep_data_handler>
}
   1fad2:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   1fad4:	2100      	movs	r1, #0
   1fad6:	e7f7      	b.n	1fac8 <ev_setup_data_handler+0x10>
   1fad8:	20004758 	.word	0x20004758

0001fadc <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1fadc:	b500      	push	{lr}
   1fade:	b083      	sub	sp, #12
   1fae0:	f7ff fddc 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fae4:	b110      	cbz	r0, 1faec <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fae6:	4b16      	ldr	r3, [pc, #88]	; (1fb40 <ev_dma_epout8_handler+0x64>)
   1fae8:	2200      	movs	r2, #0
   1faea:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1faec:	4b15      	ldr	r3, [pc, #84]	; (1fb44 <ev_dma_epout8_handler+0x68>)
   1faee:	2200      	movs	r2, #0
   1faf0:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1faf2:	4b15      	ldr	r3, [pc, #84]	; (1fb48 <ev_dma_epout8_handler+0x6c>)
   1faf4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   1faf8:	2b03      	cmp	r3, #3
   1fafa:	d01d      	beq.n	1fb38 <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   1fafc:	4b12      	ldr	r3, [pc, #72]	; (1fb48 <ev_dma_epout8_handler+0x6c>)
   1fafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1fb02:	b9cb      	cbnz	r3, 1fb38 <ev_dma_epout8_handler+0x5c>
   1fb04:	4b11      	ldr	r3, [pc, #68]	; (1fb4c <ev_dma_epout8_handler+0x70>)
   1fb06:	f3bf 8f5b 	dmb	ish
   1fb0a:	e853 2f00 	ldrex	r2, [r3]
   1fb0e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   1fb12:	e843 2100 	strex	r1, r2, [r3]
   1fb16:	2900      	cmp	r1, #0
   1fb18:	d1f7      	bne.n	1fb0a <ev_dma_epout8_handler+0x2e>
   1fb1a:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1fb1e:	2306      	movs	r3, #6
   1fb20:	f88d 3004 	strb.w	r3, [sp, #4]
   1fb24:	2308      	movs	r3, #8
   1fb26:	f88d 3006 	strb.w	r3, [sp, #6]
   1fb2a:	2300      	movs	r3, #0
   1fb2c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1fb30:	4b07      	ldr	r3, [pc, #28]	; (1fb50 <ev_dma_epout8_handler+0x74>)
   1fb32:	681b      	ldr	r3, [r3, #0]
   1fb34:	a801      	add	r0, sp, #4
   1fb36:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
   1fb38:	b003      	add	sp, #12
   1fb3a:	f85d fb04 	ldr.w	pc, [sp], #4
   1fb3e:	bf00      	nop
   1fb40:	40027c1c 	.word	0x40027c1c
   1fb44:	20004756 	.word	0x20004756
   1fb48:	20003ca4 	.word	0x20003ca4
   1fb4c:	20003c30 	.word	0x20003c30
   1fb50:	20003dc4 	.word	0x20003dc4

0001fb54 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1fb54:	b500      	push	{lr}
   1fb56:	b083      	sub	sp, #12
   1fb58:	f7ff fda0 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fb5c:	b110      	cbz	r0, 1fb64 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fb5e:	4b1d      	ldr	r3, [pc, #116]	; (1fbd4 <ev_dma_epin8_handler+0x80>)
   1fb60:	2200      	movs	r2, #0
   1fb62:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fb64:	4b1c      	ldr	r3, [pc, #112]	; (1fbd8 <ev_dma_epin8_handler+0x84>)
   1fb66:	2200      	movs	r2, #0
   1fb68:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fb6a:	4b1c      	ldr	r3, [pc, #112]	; (1fbdc <ev_dma_epin8_handler+0x88>)
   1fb6c:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   1fb70:	2b03      	cmp	r3, #3
   1fb72:	d01e      	beq.n	1fbb2 <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
   1fb74:	4b19      	ldr	r3, [pc, #100]	; (1fbdc <ev_dma_epin8_handler+0x88>)
   1fb76:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1fb7a:	bb3b      	cbnz	r3, 1fbcc <ev_dma_epin8_handler+0x78>
   1fb7c:	4b18      	ldr	r3, [pc, #96]	; (1fbe0 <ev_dma_epin8_handler+0x8c>)
   1fb7e:	f3bf 8f5b 	dmb	ish
   1fb82:	e853 2f00 	ldrex	r2, [r3]
   1fb86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1fb8a:	e843 2100 	strex	r1, r2, [r3]
   1fb8e:	2900      	cmp	r1, #0
   1fb90:	d1f7      	bne.n	1fb82 <ev_dma_epin8_handler+0x2e>
   1fb92:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   1fb96:	2306      	movs	r3, #6
   1fb98:	f88d 3004 	strb.w	r3, [sp, #4]
   1fb9c:	2388      	movs	r3, #136	; 0x88
   1fb9e:	f88d 3006 	strb.w	r3, [sp, #6]
   1fba2:	2300      	movs	r3, #0
   1fba4:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   1fba8:	4b0e      	ldr	r3, [pc, #56]	; (1fbe4 <ev_dma_epin8_handler+0x90>)
   1fbaa:	681b      	ldr	r3, [r3, #0]
   1fbac:	a801      	add	r0, sp, #4
   1fbae:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
   1fbb0:	e00c      	b.n	1fbcc <ev_dma_epin8_handler+0x78>
   1fbb2:	4b0b      	ldr	r3, [pc, #44]	; (1fbe0 <ev_dma_epin8_handler+0x8c>)
   1fbb4:	f3bf 8f5b 	dmb	ish
   1fbb8:	e853 2f00 	ldrex	r2, [r3]
   1fbbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   1fbc0:	e843 2100 	strex	r1, r2, [r3]
   1fbc4:	2900      	cmp	r1, #0
   1fbc6:	d1f7      	bne.n	1fbb8 <ev_dma_epin8_handler+0x64>
   1fbc8:	f3bf 8f5b 	dmb	ish
   1fbcc:	b003      	add	sp, #12
   1fbce:	f85d fb04 	ldr.w	pc, [sp], #4
   1fbd2:	bf00      	nop
   1fbd4:	40027c1c 	.word	0x40027c1c
   1fbd8:	20004756 	.word	0x20004756
   1fbdc:	20003ca4 	.word	0x20003ca4
   1fbe0:	20003c30 	.word	0x20003c30
   1fbe4:	20003dc4 	.word	0x20003dc4

0001fbe8 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   1fbe8:	b508      	push	{r3, lr}
   1fbea:	f7ff fd57 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fbee:	b110      	cbz	r0, 1fbf6 <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fbf0:	4b15      	ldr	r3, [pc, #84]	; (1fc48 <ev_dma_epin0_handler+0x60>)
   1fbf2:	2200      	movs	r2, #0
   1fbf4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fbf6:	4b15      	ldr	r3, [pc, #84]	; (1fc4c <ev_dma_epin0_handler+0x64>)
   1fbf8:	2200      	movs	r2, #0
   1fbfa:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fbfc:	4b14      	ldr	r3, [pc, #80]	; (1fc50 <ev_dma_epin0_handler+0x68>)
   1fbfe:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   1fc02:	2b03      	cmp	r3, #3
   1fc04:	d004      	beq.n	1fc10 <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
   1fc06:	4b12      	ldr	r3, [pc, #72]	; (1fc50 <ev_dma_epin0_handler+0x68>)
   1fc08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   1fc0c:	b173      	cbz	r3, 1fc2c <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
   1fc0e:	bd08      	pop	{r3, pc}
   1fc10:	4b10      	ldr	r3, [pc, #64]	; (1fc54 <ev_dma_epin0_handler+0x6c>)
   1fc12:	f3bf 8f5b 	dmb	ish
   1fc16:	e853 2f00 	ldrex	r2, [r3]
   1fc1a:	f022 0201 	bic.w	r2, r2, #1
   1fc1e:	e843 2100 	strex	r1, r2, [r3]
   1fc22:	2900      	cmp	r1, #0
   1fc24:	d1f7      	bne.n	1fc16 <ev_dma_epin0_handler+0x2e>
   1fc26:	f3bf 8f5b 	dmb	ish
   1fc2a:	e7f0      	b.n	1fc0e <ev_dma_epin0_handler+0x26>
   1fc2c:	4b09      	ldr	r3, [pc, #36]	; (1fc54 <ev_dma_epin0_handler+0x6c>)
   1fc2e:	f3bf 8f5b 	dmb	ish
   1fc32:	e853 2f00 	ldrex	r2, [r3]
   1fc36:	f022 0201 	bic.w	r2, r2, #1
   1fc3a:	e843 2100 	strex	r1, r2, [r3]
   1fc3e:	2900      	cmp	r1, #0
   1fc40:	d1f7      	bne.n	1fc32 <ev_dma_epin0_handler+0x4a>
   1fc42:	f3bf 8f5b 	dmb	ish
   1fc46:	e7e2      	b.n	1fc0e <ev_dma_epin0_handler+0x26>
   1fc48:	40027c1c 	.word	0x40027c1c
   1fc4c:	20004756 	.word	0x20004756
   1fc50:	20003ca4 	.word	0x20003ca4
   1fc54:	20003c30 	.word	0x20003c30

0001fc58 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   1fc58:	b508      	push	{r3, lr}
   1fc5a:	f7ff fd1f 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fc5e:	b110      	cbz	r0, 1fc66 <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fc60:	4b15      	ldr	r3, [pc, #84]	; (1fcb8 <ev_dma_epin7_handler+0x60>)
   1fc62:	2200      	movs	r2, #0
   1fc64:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fc66:	4b15      	ldr	r3, [pc, #84]	; (1fcbc <ev_dma_epin7_handler+0x64>)
   1fc68:	2200      	movs	r2, #0
   1fc6a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fc6c:	4b14      	ldr	r3, [pc, #80]	; (1fcc0 <ev_dma_epin7_handler+0x68>)
   1fc6e:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   1fc72:	2b03      	cmp	r3, #3
   1fc74:	d011      	beq.n	1fc9a <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1fc76:	4b12      	ldr	r3, [pc, #72]	; (1fcc0 <ev_dma_epin7_handler+0x68>)
   1fc78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1fc7c:	b9d3      	cbnz	r3, 1fcb4 <ev_dma_epin7_handler+0x5c>
   1fc7e:	4b11      	ldr	r3, [pc, #68]	; (1fcc4 <ev_dma_epin7_handler+0x6c>)
   1fc80:	f3bf 8f5b 	dmb	ish
   1fc84:	e853 2f00 	ldrex	r2, [r3]
   1fc88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1fc8c:	e843 2100 	strex	r1, r2, [r3]
   1fc90:	2900      	cmp	r1, #0
   1fc92:	d1f7      	bne.n	1fc84 <ev_dma_epin7_handler+0x2c>
   1fc94:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
   1fc98:	e00c      	b.n	1fcb4 <ev_dma_epin7_handler+0x5c>
   1fc9a:	4b0a      	ldr	r3, [pc, #40]	; (1fcc4 <ev_dma_epin7_handler+0x6c>)
   1fc9c:	f3bf 8f5b 	dmb	ish
   1fca0:	e853 2f00 	ldrex	r2, [r3]
   1fca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   1fca8:	e843 2100 	strex	r1, r2, [r3]
   1fcac:	2900      	cmp	r1, #0
   1fcae:	d1f7      	bne.n	1fca0 <ev_dma_epin7_handler+0x48>
   1fcb0:	f3bf 8f5b 	dmb	ish
   1fcb4:	bd08      	pop	{r3, pc}
   1fcb6:	bf00      	nop
   1fcb8:	40027c1c 	.word	0x40027c1c
   1fcbc:	20004756 	.word	0x20004756
   1fcc0:	20003ca4 	.word	0x20003ca4
   1fcc4:	20003c30 	.word	0x20003c30

0001fcc8 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   1fcc8:	b508      	push	{r3, lr}
   1fcca:	f7ff fce7 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fcce:	b110      	cbz	r0, 1fcd6 <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fcd0:	4b15      	ldr	r3, [pc, #84]	; (1fd28 <ev_dma_epin5_handler+0x60>)
   1fcd2:	2200      	movs	r2, #0
   1fcd4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fcd6:	4b15      	ldr	r3, [pc, #84]	; (1fd2c <ev_dma_epin5_handler+0x64>)
   1fcd8:	2200      	movs	r2, #0
   1fcda:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fcdc:	4b14      	ldr	r3, [pc, #80]	; (1fd30 <ev_dma_epin5_handler+0x68>)
   1fcde:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   1fce2:	2b03      	cmp	r3, #3
   1fce4:	d011      	beq.n	1fd0a <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1fce6:	4b12      	ldr	r3, [pc, #72]	; (1fd30 <ev_dma_epin5_handler+0x68>)
   1fce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1fcec:	b9d3      	cbnz	r3, 1fd24 <ev_dma_epin5_handler+0x5c>
   1fcee:	4b11      	ldr	r3, [pc, #68]	; (1fd34 <ev_dma_epin5_handler+0x6c>)
   1fcf0:	f3bf 8f5b 	dmb	ish
   1fcf4:	e853 2f00 	ldrex	r2, [r3]
   1fcf8:	f022 0220 	bic.w	r2, r2, #32
   1fcfc:	e843 2100 	strex	r1, r2, [r3]
   1fd00:	2900      	cmp	r1, #0
   1fd02:	d1f7      	bne.n	1fcf4 <ev_dma_epin5_handler+0x2c>
   1fd04:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
   1fd08:	e00c      	b.n	1fd24 <ev_dma_epin5_handler+0x5c>
   1fd0a:	4b0a      	ldr	r3, [pc, #40]	; (1fd34 <ev_dma_epin5_handler+0x6c>)
   1fd0c:	f3bf 8f5b 	dmb	ish
   1fd10:	e853 2f00 	ldrex	r2, [r3]
   1fd14:	f022 0220 	bic.w	r2, r2, #32
   1fd18:	e843 2100 	strex	r1, r2, [r3]
   1fd1c:	2900      	cmp	r1, #0
   1fd1e:	d1f7      	bne.n	1fd10 <ev_dma_epin5_handler+0x48>
   1fd20:	f3bf 8f5b 	dmb	ish
   1fd24:	bd08      	pop	{r3, pc}
   1fd26:	bf00      	nop
   1fd28:	40027c1c 	.word	0x40027c1c
   1fd2c:	20004756 	.word	0x20004756
   1fd30:	20003ca4 	.word	0x20003ca4
   1fd34:	20003c30 	.word	0x20003c30

0001fd38 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   1fd38:	b508      	push	{r3, lr}
   1fd3a:	f7ff fcaf 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fd3e:	b110      	cbz	r0, 1fd46 <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fd40:	4b15      	ldr	r3, [pc, #84]	; (1fd98 <ev_dma_epin6_handler+0x60>)
   1fd42:	2200      	movs	r2, #0
   1fd44:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fd46:	4b15      	ldr	r3, [pc, #84]	; (1fd9c <ev_dma_epin6_handler+0x64>)
   1fd48:	2200      	movs	r2, #0
   1fd4a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fd4c:	4b14      	ldr	r3, [pc, #80]	; (1fda0 <ev_dma_epin6_handler+0x68>)
   1fd4e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   1fd52:	2b03      	cmp	r3, #3
   1fd54:	d011      	beq.n	1fd7a <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1fd56:	4b12      	ldr	r3, [pc, #72]	; (1fda0 <ev_dma_epin6_handler+0x68>)
   1fd58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   1fd5c:	b9d3      	cbnz	r3, 1fd94 <ev_dma_epin6_handler+0x5c>
   1fd5e:	4b11      	ldr	r3, [pc, #68]	; (1fda4 <ev_dma_epin6_handler+0x6c>)
   1fd60:	f3bf 8f5b 	dmb	ish
   1fd64:	e853 2f00 	ldrex	r2, [r3]
   1fd68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1fd6c:	e843 2100 	strex	r1, r2, [r3]
   1fd70:	2900      	cmp	r1, #0
   1fd72:	d1f7      	bne.n	1fd64 <ev_dma_epin6_handler+0x2c>
   1fd74:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
   1fd78:	e00c      	b.n	1fd94 <ev_dma_epin6_handler+0x5c>
   1fd7a:	4b0a      	ldr	r3, [pc, #40]	; (1fda4 <ev_dma_epin6_handler+0x6c>)
   1fd7c:	f3bf 8f5b 	dmb	ish
   1fd80:	e853 2f00 	ldrex	r2, [r3]
   1fd84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1fd88:	e843 2100 	strex	r1, r2, [r3]
   1fd8c:	2900      	cmp	r1, #0
   1fd8e:	d1f7      	bne.n	1fd80 <ev_dma_epin6_handler+0x48>
   1fd90:	f3bf 8f5b 	dmb	ish
   1fd94:	bd08      	pop	{r3, pc}
   1fd96:	bf00      	nop
   1fd98:	40027c1c 	.word	0x40027c1c
   1fd9c:	20004756 	.word	0x20004756
   1fda0:	20003ca4 	.word	0x20003ca4
   1fda4:	20003c30 	.word	0x20003c30

0001fda8 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   1fda8:	b508      	push	{r3, lr}
   1fdaa:	f7ff fc77 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fdae:	b110      	cbz	r0, 1fdb6 <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fdb0:	4b15      	ldr	r3, [pc, #84]	; (1fe08 <ev_dma_epin1_handler+0x60>)
   1fdb2:	2200      	movs	r2, #0
   1fdb4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fdb6:	4b15      	ldr	r3, [pc, #84]	; (1fe0c <ev_dma_epin1_handler+0x64>)
   1fdb8:	2200      	movs	r2, #0
   1fdba:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fdbc:	4b14      	ldr	r3, [pc, #80]	; (1fe10 <ev_dma_epin1_handler+0x68>)
   1fdbe:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   1fdc2:	2b03      	cmp	r3, #3
   1fdc4:	d011      	beq.n	1fdea <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1fdc6:	4b12      	ldr	r3, [pc, #72]	; (1fe10 <ev_dma_epin1_handler+0x68>)
   1fdc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1fdcc:	b9d3      	cbnz	r3, 1fe04 <ev_dma_epin1_handler+0x5c>
   1fdce:	4b11      	ldr	r3, [pc, #68]	; (1fe14 <ev_dma_epin1_handler+0x6c>)
   1fdd0:	f3bf 8f5b 	dmb	ish
   1fdd4:	e853 2f00 	ldrex	r2, [r3]
   1fdd8:	f022 0202 	bic.w	r2, r2, #2
   1fddc:	e843 2100 	strex	r1, r2, [r3]
   1fde0:	2900      	cmp	r1, #0
   1fde2:	d1f7      	bne.n	1fdd4 <ev_dma_epin1_handler+0x2c>
   1fde4:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
   1fde8:	e00c      	b.n	1fe04 <ev_dma_epin1_handler+0x5c>
   1fdea:	4b0a      	ldr	r3, [pc, #40]	; (1fe14 <ev_dma_epin1_handler+0x6c>)
   1fdec:	f3bf 8f5b 	dmb	ish
   1fdf0:	e853 2f00 	ldrex	r2, [r3]
   1fdf4:	f022 0202 	bic.w	r2, r2, #2
   1fdf8:	e843 2100 	strex	r1, r2, [r3]
   1fdfc:	2900      	cmp	r1, #0
   1fdfe:	d1f7      	bne.n	1fdf0 <ev_dma_epin1_handler+0x48>
   1fe00:	f3bf 8f5b 	dmb	ish
   1fe04:	bd08      	pop	{r3, pc}
   1fe06:	bf00      	nop
   1fe08:	40027c1c 	.word	0x40027c1c
   1fe0c:	20004756 	.word	0x20004756
   1fe10:	20003ca4 	.word	0x20003ca4
   1fe14:	20003c30 	.word	0x20003c30

0001fe18 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   1fe18:	b508      	push	{r3, lr}
   1fe1a:	f7ff fc3f 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fe1e:	b110      	cbz	r0, 1fe26 <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fe20:	4b15      	ldr	r3, [pc, #84]	; (1fe78 <ev_dma_epin2_handler+0x60>)
   1fe22:	2200      	movs	r2, #0
   1fe24:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fe26:	4b15      	ldr	r3, [pc, #84]	; (1fe7c <ev_dma_epin2_handler+0x64>)
   1fe28:	2200      	movs	r2, #0
   1fe2a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fe2c:	4b14      	ldr	r3, [pc, #80]	; (1fe80 <ev_dma_epin2_handler+0x68>)
   1fe2e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   1fe32:	2b03      	cmp	r3, #3
   1fe34:	d011      	beq.n	1fe5a <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1fe36:	4b12      	ldr	r3, [pc, #72]	; (1fe80 <ev_dma_epin2_handler+0x68>)
   1fe38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   1fe3c:	b9d3      	cbnz	r3, 1fe74 <ev_dma_epin2_handler+0x5c>
   1fe3e:	4b11      	ldr	r3, [pc, #68]	; (1fe84 <ev_dma_epin2_handler+0x6c>)
   1fe40:	f3bf 8f5b 	dmb	ish
   1fe44:	e853 2f00 	ldrex	r2, [r3]
   1fe48:	f022 0204 	bic.w	r2, r2, #4
   1fe4c:	e843 2100 	strex	r1, r2, [r3]
   1fe50:	2900      	cmp	r1, #0
   1fe52:	d1f7      	bne.n	1fe44 <ev_dma_epin2_handler+0x2c>
   1fe54:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
   1fe58:	e00c      	b.n	1fe74 <ev_dma_epin2_handler+0x5c>
   1fe5a:	4b0a      	ldr	r3, [pc, #40]	; (1fe84 <ev_dma_epin2_handler+0x6c>)
   1fe5c:	f3bf 8f5b 	dmb	ish
   1fe60:	e853 2f00 	ldrex	r2, [r3]
   1fe64:	f022 0204 	bic.w	r2, r2, #4
   1fe68:	e843 2100 	strex	r1, r2, [r3]
   1fe6c:	2900      	cmp	r1, #0
   1fe6e:	d1f7      	bne.n	1fe60 <ev_dma_epin2_handler+0x48>
   1fe70:	f3bf 8f5b 	dmb	ish
   1fe74:	bd08      	pop	{r3, pc}
   1fe76:	bf00      	nop
   1fe78:	40027c1c 	.word	0x40027c1c
   1fe7c:	20004756 	.word	0x20004756
   1fe80:	20003ca4 	.word	0x20003ca4
   1fe84:	20003c30 	.word	0x20003c30

0001fe88 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   1fe88:	b508      	push	{r3, lr}
   1fe8a:	f7ff fc07 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fe8e:	b110      	cbz	r0, 1fe96 <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1fe90:	4b15      	ldr	r3, [pc, #84]	; (1fee8 <ev_dma_epin3_handler+0x60>)
   1fe92:	2200      	movs	r2, #0
   1fe94:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1fe96:	4b15      	ldr	r3, [pc, #84]	; (1feec <ev_dma_epin3_handler+0x64>)
   1fe98:	2200      	movs	r2, #0
   1fe9a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1fe9c:	4b14      	ldr	r3, [pc, #80]	; (1fef0 <ev_dma_epin3_handler+0x68>)
   1fe9e:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   1fea2:	2b03      	cmp	r3, #3
   1fea4:	d011      	beq.n	1feca <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1fea6:	4b12      	ldr	r3, [pc, #72]	; (1fef0 <ev_dma_epin3_handler+0x68>)
   1fea8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
   1feac:	b9d3      	cbnz	r3, 1fee4 <ev_dma_epin3_handler+0x5c>
   1feae:	4b11      	ldr	r3, [pc, #68]	; (1fef4 <ev_dma_epin3_handler+0x6c>)
   1feb0:	f3bf 8f5b 	dmb	ish
   1feb4:	e853 2f00 	ldrex	r2, [r3]
   1feb8:	f022 0208 	bic.w	r2, r2, #8
   1febc:	e843 2100 	strex	r1, r2, [r3]
   1fec0:	2900      	cmp	r1, #0
   1fec2:	d1f7      	bne.n	1feb4 <ev_dma_epin3_handler+0x2c>
   1fec4:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
   1fec8:	e00c      	b.n	1fee4 <ev_dma_epin3_handler+0x5c>
   1feca:	4b0a      	ldr	r3, [pc, #40]	; (1fef4 <ev_dma_epin3_handler+0x6c>)
   1fecc:	f3bf 8f5b 	dmb	ish
   1fed0:	e853 2f00 	ldrex	r2, [r3]
   1fed4:	f022 0208 	bic.w	r2, r2, #8
   1fed8:	e843 2100 	strex	r1, r2, [r3]
   1fedc:	2900      	cmp	r1, #0
   1fede:	d1f7      	bne.n	1fed0 <ev_dma_epin3_handler+0x48>
   1fee0:	f3bf 8f5b 	dmb	ish
   1fee4:	bd08      	pop	{r3, pc}
   1fee6:	bf00      	nop
   1fee8:	40027c1c 	.word	0x40027c1c
   1feec:	20004756 	.word	0x20004756
   1fef0:	20003ca4 	.word	0x20003ca4
   1fef4:	20003c30 	.word	0x20003c30

0001fef8 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   1fef8:	b508      	push	{r3, lr}
   1fefa:	f7ff fbcf 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   1fefe:	b110      	cbz	r0, 1ff06 <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   1ff00:	4b15      	ldr	r3, [pc, #84]	; (1ff58 <ev_dma_epin4_handler+0x60>)
   1ff02:	2200      	movs	r2, #0
   1ff04:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   1ff06:	4b15      	ldr	r3, [pc, #84]	; (1ff5c <ev_dma_epin4_handler+0x64>)
   1ff08:	2200      	movs	r2, #0
   1ff0a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   1ff0c:	4b14      	ldr	r3, [pc, #80]	; (1ff60 <ev_dma_epin4_handler+0x68>)
   1ff0e:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   1ff12:	2b03      	cmp	r3, #3
   1ff14:	d011      	beq.n	1ff3a <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
   1ff16:	4b12      	ldr	r3, [pc, #72]	; (1ff60 <ev_dma_epin4_handler+0x68>)
   1ff18:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
   1ff1c:	b9d3      	cbnz	r3, 1ff54 <ev_dma_epin4_handler+0x5c>
   1ff1e:	4b11      	ldr	r3, [pc, #68]	; (1ff64 <ev_dma_epin4_handler+0x6c>)
   1ff20:	f3bf 8f5b 	dmb	ish
   1ff24:	e853 2f00 	ldrex	r2, [r3]
   1ff28:	f022 0210 	bic.w	r2, r2, #16
   1ff2c:	e843 2100 	strex	r1, r2, [r3]
   1ff30:	2900      	cmp	r1, #0
   1ff32:	d1f7      	bne.n	1ff24 <ev_dma_epin4_handler+0x2c>
   1ff34:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
   1ff38:	e00c      	b.n	1ff54 <ev_dma_epin4_handler+0x5c>
   1ff3a:	4b0a      	ldr	r3, [pc, #40]	; (1ff64 <ev_dma_epin4_handler+0x6c>)
   1ff3c:	f3bf 8f5b 	dmb	ish
   1ff40:	e853 2f00 	ldrex	r2, [r3]
   1ff44:	f022 0210 	bic.w	r2, r2, #16
   1ff48:	e843 2100 	strex	r1, r2, [r3]
   1ff4c:	2900      	cmp	r1, #0
   1ff4e:	d1f7      	bne.n	1ff40 <ev_dma_epin4_handler+0x48>
   1ff50:	f3bf 8f5b 	dmb	ish
   1ff54:	bd08      	pop	{r3, pc}
   1ff56:	bf00      	nop
   1ff58:	40027c1c 	.word	0x40027c1c
   1ff5c:	20004756 	.word	0x20004756
   1ff60:	20003ca4 	.word	0x20003ca4
   1ff64:	20003c30 	.word	0x20003c30

0001ff68 <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
   1ff68:	4b01      	ldr	r3, [pc, #4]	; (1ff70 <nrfx_usbd_isoinconfig_set+0x8>)
   1ff6a:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
   1ff6e:	4770      	bx	lr
   1ff70:	40027000 	.word	0x40027000

0001ff74 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
   1ff74:	2300      	movs	r3, #0
   1ff76:	4a02      	ldr	r2, [pc, #8]	; (1ff80 <nrfx_usbd_uninit+0xc>)
   1ff78:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
   1ff7a:	4a02      	ldr	r2, [pc, #8]	; (1ff84 <nrfx_usbd_uninit+0x10>)
   1ff7c:	7013      	strb	r3, [r2, #0]
    return;
}
   1ff7e:	4770      	bx	lr
   1ff80:	20003dc4 	.word	0x20003dc4
   1ff84:	20004757 	.word	0x20004757

0001ff88 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
   1ff88:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
   1ff8a:	4b41      	ldr	r3, [pc, #260]	; (20090 <nrfx_usbd_enable+0x108>)
   1ff8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1ff90:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
   1ff94:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
   1ff98:	f7ff fc26 	bl	1f7e8 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
   1ff9c:	f00b fa65 	bl	2b46a <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
   1ffa0:	b118      	cbz	r0, 1ffaa <nrfx_usbd_enable+0x22>
   1ffa2:	4b3c      	ldr	r3, [pc, #240]	; (20094 <nrfx_usbd_enable+0x10c>)
   1ffa4:	781b      	ldrb	r3, [r3, #0]
   1ffa6:	2b00      	cmp	r3, #0
   1ffa8:	d15f      	bne.n	2006a <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   1ffaa:	f7ff fb63 	bl	1f674 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   1ffae:	b1b8      	cbz	r0, 1ffe0 <nrfx_usbd_enable+0x58>
	__asm__ volatile(
   1ffb0:	f04f 0240 	mov.w	r2, #64	; 0x40
   1ffb4:	f3ef 8311 	mrs	r3, BASEPRI
   1ffb8:	f382 8812 	msr	BASEPRI_MAX, r2
   1ffbc:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   1ffc0:	4a35      	ldr	r2, [pc, #212]	; (20098 <nrfx_usbd_enable+0x110>)
   1ffc2:	6812      	ldr	r2, [r2, #0]
   1ffc4:	2a00      	cmp	r2, #0
   1ffc6:	d15b      	bne.n	20080 <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1ffc8:	4a33      	ldr	r2, [pc, #204]	; (20098 <nrfx_usbd_enable+0x110>)
   1ffca:	f249 3175 	movw	r1, #37749	; 0x9375
   1ffce:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   1ffd0:	4832      	ldr	r0, [pc, #200]	; (2009c <nrfx_usbd_enable+0x114>)
   1ffd2:	2403      	movs	r4, #3
   1ffd4:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   1ffd6:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   1ffd8:	f383 8811 	msr	BASEPRI, r3
   1ffdc:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
   1ffe0:	f7ff fb34 	bl	1f64c <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
   1ffe4:	b150      	cbz	r0, 1fffc <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
   1ffe6:	4b2e      	ldr	r3, [pc, #184]	; (200a0 <nrfx_usbd_enable+0x118>)
   1ffe8:	f240 72e3 	movw	r2, #2019	; 0x7e3
   1ffec:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
   1ffee:	3304      	adds	r3, #4
   1fff0:	2240      	movs	r2, #64	; 0x40
   1fff2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
   1fff4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
   1fff8:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
   1fffc:	4b24      	ldr	r3, [pc, #144]	; (20090 <nrfx_usbd_enable+0x108>)
   1fffe:	2280      	movs	r2, #128	; 0x80
   20000:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
   20004:	2000      	movs	r0, #0
   20006:	f7ff ffaf 	bl	1ff68 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2000a:	4b26      	ldr	r3, [pc, #152]	; (200a4 <nrfx_usbd_enable+0x11c>)
   2000c:	f240 12ff 	movw	r2, #511	; 0x1ff
   20010:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
   20012:	4b25      	ldr	r3, [pc, #148]	; (200a8 <nrfx_usbd_enable+0x120>)
   20014:	2200      	movs	r2, #0
   20016:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   20018:	f7ff fb40 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   2001c:	b110      	cbz	r0, 20024 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   2001e:	4b23      	ldr	r3, [pc, #140]	; (200ac <nrfx_usbd_enable+0x124>)
   20020:	2200      	movs	r2, #0
   20022:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   20024:	2300      	movs	r3, #0
   20026:	4a22      	ldr	r2, [pc, #136]	; (200b0 <nrfx_usbd_enable+0x128>)
   20028:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
   2002a:	4a22      	ldr	r2, [pc, #136]	; (200b4 <nrfx_usbd_enable+0x12c>)
   2002c:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
   2002e:	4b22      	ldr	r3, [pc, #136]	; (200b8 <nrfx_usbd_enable+0x130>)
   20030:	2202      	movs	r2, #2
   20032:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
   20034:	f7ff fb1e 	bl	1f674 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
   20038:	b1b0      	cbz	r0, 20068 <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
   2003a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2003e:	f3ef 8311 	mrs	r3, BASEPRI
   20042:	f382 8812 	msr	BASEPRI_MAX, r2
   20046:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
   2004a:	4a13      	ldr	r2, [pc, #76]	; (20098 <nrfx_usbd_enable+0x110>)
   2004c:	6812      	ldr	r2, [r2, #0]
   2004e:	b9da      	cbnz	r2, 20088 <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   20050:	4a11      	ldr	r2, [pc, #68]	; (20098 <nrfx_usbd_enable+0x110>)
   20052:	f249 3175 	movw	r1, #37749	; 0x9375
   20056:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   20058:	4810      	ldr	r0, [pc, #64]	; (2009c <nrfx_usbd_enable+0x114>)
   2005a:	2400      	movs	r4, #0
   2005c:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
   2005e:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
   20060:	f383 8811 	msr	BASEPRI, r3
   20064:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
   20068:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   2006a:	4b09      	ldr	r3, [pc, #36]	; (20090 <nrfx_usbd_enable+0x108>)
   2006c:	2400      	movs	r4, #0
   2006e:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   20072:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
   20076:	f7ff fbb7 	bl	1f7e8 <usbd_enable>
         m_first_enable = false;
   2007a:	4b06      	ldr	r3, [pc, #24]	; (20094 <nrfx_usbd_enable+0x10c>)
   2007c:	701c      	strb	r4, [r3, #0]
   2007e:	e794      	b.n	1ffaa <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
   20080:	4a06      	ldr	r2, [pc, #24]	; (2009c <nrfx_usbd_enable+0x114>)
   20082:	2103      	movs	r1, #3
   20084:	6011      	str	r1, [r2, #0]
   20086:	e7a7      	b.n	1ffd8 <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
   20088:	4a04      	ldr	r2, [pc, #16]	; (2009c <nrfx_usbd_enable+0x114>)
   2008a:	2100      	movs	r1, #0
   2008c:	6011      	str	r1, [r2, #0]
   2008e:	e7e7      	b.n	20060 <nrfx_usbd_enable+0xd8>
   20090:	40027000 	.word	0x40027000
   20094:	20000718 	.word	0x20000718
   20098:	4006ec00 	.word	0x4006ec00
   2009c:	4006ed14 	.word	0x4006ed14
   200a0:	40027800 	.word	0x40027800
   200a4:	20003ca0 	.word	0x20003ca0
   200a8:	20003c30 	.word	0x20003c30
   200ac:	40027c1c 	.word	0x40027c1c
   200b0:	20004756 	.word	0x20004756
   200b4:	20004758 	.word	0x20004758
   200b8:	20004757 	.word	0x20004757

000200bc <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
   200bc:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
   200be:	4b09      	ldr	r3, [pc, #36]	; (200e4 <nrfx_usbd_start+0x28>)
   200c0:	2200      	movs	r2, #0
   200c2:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   200c4:	b960      	cbnz	r0, 200e0 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
   200c6:	4b08      	ldr	r3, [pc, #32]	; (200e8 <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
   200c8:	4c08      	ldr	r4, [pc, #32]	; (200ec <nrfx_usbd_start+0x30>)
   200ca:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
   200ce:	2027      	movs	r0, #39	; 0x27
   200d0:	f7f5 f83a 	bl	15148 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
   200d4:	2301      	movs	r3, #1
   200d6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   200da:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
   200de:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
   200e0:	4b03      	ldr	r3, [pc, #12]	; (200f0 <nrfx_usbd_start+0x34>)
   200e2:	e7f1      	b.n	200c8 <nrfx_usbd_start+0xc>
   200e4:	20004755 	.word	0x20004755
   200e8:	01c01407 	.word	0x01c01407
   200ec:	40027000 	.word	0x40027000
   200f0:	01e01407 	.word	0x01e01407

000200f4 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
   200f4:	4b03      	ldr	r3, [pc, #12]	; (20104 <nrfx_usbd_is_enabled+0x10>)
   200f6:	7818      	ldrb	r0, [r3, #0]
}
   200f8:	2801      	cmp	r0, #1
   200fa:	bf94      	ite	ls
   200fc:	2000      	movls	r0, #0
   200fe:	2001      	movhi	r0, #1
   20100:	4770      	bx	lr
   20102:	bf00      	nop
   20104:	20004757 	.word	0x20004757

00020108 <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20108:	f010 0f80 	tst.w	r0, #128	; 0x80
   2010c:	d106      	bne.n	2011c <nrfx_usbd_ep_max_packet_size_set+0x14>
   2010e:	4b04      	ldr	r3, [pc, #16]	; (20120 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
   20110:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20114:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
   20118:	8181      	strh	r1, [r0, #12]
}
   2011a:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2011c:	4b01      	ldr	r3, [pc, #4]	; (20124 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
   2011e:	e7f7      	b.n	20110 <nrfx_usbd_ep_max_packet_size_set+0x8>
   20120:	20003ca4 	.word	0x20003ca4
   20124:	20003d34 	.word	0x20003d34

00020128 <nrfx_usbd_init>:
{
   20128:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
   2012a:	4b25      	ldr	r3, [pc, #148]	; (201c0 <nrfx_usbd_init+0x98>)
   2012c:	781c      	ldrb	r4, [r3, #0]
   2012e:	2c00      	cmp	r4, #0
   20130:	d144      	bne.n	201bc <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
   20132:	4b24      	ldr	r3, [pc, #144]	; (201c4 <nrfx_usbd_init+0x9c>)
   20134:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   20136:	4b22      	ldr	r3, [pc, #136]	; (201c0 <nrfx_usbd_init+0x98>)
   20138:	2201      	movs	r2, #1
   2013a:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   2013c:	4625      	mov	r5, r4
   2013e:	e012      	b.n	20166 <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   20140:	2140      	movs	r1, #64	; 0x40
   20142:	4630      	mov	r0, r6
   20144:	f7ff ffe0 	bl	20108 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20148:	f016 0f80 	tst.w	r6, #128	; 0x80
   2014c:	d115      	bne.n	2017a <nrfx_usbd_init+0x52>
   2014e:	491e      	ldr	r1, [pc, #120]	; (201c8 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   20150:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20154:	0118      	lsls	r0, r3, #4
   20156:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   2015a:	2200      	movs	r2, #0
   2015c:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
   2015e:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   20160:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
   20162:	3501      	adds	r5, #1
   20164:	b2ed      	uxtb	r5, r5
   20166:	2d08      	cmp	r5, #8
   20168:	d81c      	bhi.n	201a4 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
   2016a:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2016e:	f015 0f08 	tst.w	r5, #8
   20172:	d0e5      	beq.n	20140 <nrfx_usbd_init+0x18>
   20174:	f240 11ff 	movw	r1, #511	; 0x1ff
   20178:	e7e3      	b.n	20142 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2017a:	4914      	ldr	r1, [pc, #80]	; (201cc <nrfx_usbd_init+0xa4>)
   2017c:	e7e8      	b.n	20150 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   2017e:	2140      	movs	r1, #64	; 0x40
   20180:	4620      	mov	r0, r4
   20182:	f7ff ffc1 	bl	20108 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20186:	f014 0f80 	tst.w	r4, #128	; 0x80
   2018a:	d113      	bne.n	201b4 <nrfx_usbd_init+0x8c>
   2018c:	490e      	ldr	r1, [pc, #56]	; (201c8 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
   2018e:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20192:	0118      	lsls	r0, r3, #4
   20194:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
   20198:	2200      	movs	r2, #0
   2019a:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
   2019c:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
   2019e:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
   201a0:	3401      	adds	r4, #1
   201a2:	b2e4      	uxtb	r4, r4
   201a4:	2c08      	cmp	r4, #8
   201a6:	d807      	bhi.n	201b8 <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
   201a8:	f014 0f08 	tst.w	r4, #8
   201ac:	d0e7      	beq.n	2017e <nrfx_usbd_init+0x56>
   201ae:	f240 11ff 	movw	r1, #511	; 0x1ff
   201b2:	e7e5      	b.n	20180 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   201b4:	4905      	ldr	r1, [pc, #20]	; (201cc <nrfx_usbd_init+0xa4>)
   201b6:	e7ea      	b.n	2018e <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
   201b8:	4805      	ldr	r0, [pc, #20]	; (201d0 <nrfx_usbd_init+0xa8>)
}
   201ba:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
   201bc:	4805      	ldr	r0, [pc, #20]	; (201d4 <nrfx_usbd_init+0xac>)
   201be:	e7fc      	b.n	201ba <nrfx_usbd_init+0x92>
   201c0:	20004757 	.word	0x20004757
   201c4:	20003dc4 	.word	0x20003dc4
   201c8:	20003ca4 	.word	0x20003ca4
   201cc:	20003d34 	.word	0x20003d34
   201d0:	0bad0000 	.word	0x0bad0000
   201d4:	0bad0005 	.word	0x0bad0005

000201d8 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
   201d8:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
   201da:	b242      	sxtb	r2, r0
   201dc:	2a00      	cmp	r2, #0
   201de:	db14      	blt.n	2020a <nrfx_usbd_ep_transfer+0x32>
   201e0:	2410      	movs	r4, #16
   201e2:	f002 030f 	and.w	r3, r2, #15
   201e6:	441c      	add	r4, r3
	__asm__ volatile(
   201e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   201ec:	f3ef 8511 	mrs	r5, BASEPRI
   201f0:	f383 8812 	msr	BASEPRI_MAX, r3
   201f4:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
   201f8:	f010 070f 	ands.w	r7, r0, #15
   201fc:	d107      	bne.n	2020e <nrfx_usbd_ep_transfer+0x36>
   201fe:	4b2f      	ldr	r3, [pc, #188]	; (202bc <nrfx_usbd_ep_transfer+0xe4>)
   20200:	781b      	ldrb	r3, [r3, #0]
   20202:	4283      	cmp	r3, r0
   20204:	d003      	beq.n	2020e <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
   20206:	482e      	ldr	r0, [pc, #184]	; (202c0 <nrfx_usbd_ep_transfer+0xe8>)
   20208:	e051      	b.n	202ae <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
   2020a:	2400      	movs	r4, #0
   2020c:	e7e9      	b.n	201e2 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
   2020e:	4b2d      	ldr	r3, [pc, #180]	; (202c4 <nrfx_usbd_ep_transfer+0xec>)
   20210:	681b      	ldr	r3, [r3, #0]
   20212:	43db      	mvns	r3, r3
   20214:	b29b      	uxth	r3, r3
   20216:	482c      	ldr	r0, [pc, #176]	; (202c8 <nrfx_usbd_ep_transfer+0xf0>)
   20218:	6800      	ldr	r0, [r0, #0]
   2021a:	4303      	orrs	r3, r0
   2021c:	2001      	movs	r0, #1
   2021e:	fa00 f404 	lsl.w	r4, r0, r4
   20222:	4223      	tst	r3, r4
   20224:	d142      	bne.n	202ac <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20226:	2a00      	cmp	r2, #0
   20228:	db1f      	blt.n	2026a <nrfx_usbd_ep_transfer+0x92>
   2022a:	4828      	ldr	r0, [pc, #160]	; (202cc <nrfx_usbd_ep_transfer+0xf4>)
   2022c:	ea4f 1c07 	mov.w	ip, r7, lsl #4
   20230:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
   20234:	2a00      	cmp	r2, #0
   20236:	db1a      	blt.n	2026e <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
   20238:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   2023c:	4a24      	ldr	r2, [pc, #144]	; (202d0 <nrfx_usbd_ep_transfer+0xf8>)
   2023e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
   20242:	4a24      	ldr	r2, [pc, #144]	; (202d4 <nrfx_usbd_ep_transfer+0xfc>)
   20244:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
   20248:	c907      	ldmia	r1, {r0, r1, r2}
   2024a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
   2024e:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
   20250:	2300      	movs	r3, #0
   20252:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
   20254:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
   20256:	4a1c      	ldr	r2, [pc, #112]	; (202c8 <nrfx_usbd_ep_transfer+0xf0>)
   20258:	6813      	ldr	r3, [r2, #0]
   2025a:	431c      	orrs	r4, r3
   2025c:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2025e:	4b1e      	ldr	r3, [pc, #120]	; (202d8 <nrfx_usbd_ep_transfer+0x100>)
   20260:	2280      	movs	r2, #128	; 0x80
   20262:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
   20266:	481d      	ldr	r0, [pc, #116]	; (202dc <nrfx_usbd_ep_transfer+0x104>)
}
   20268:	e021      	b.n	202ae <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2026a:	481d      	ldr	r0, [pc, #116]	; (202e0 <nrfx_usbd_ep_transfer+0x108>)
   2026c:	e7de      	b.n	2022c <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
   2026e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
   20272:	4a1c      	ldr	r2, [pc, #112]	; (202e4 <nrfx_usbd_ep_transfer+0x10c>)
   20274:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
   20278:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   2027a:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
   2027e:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   20282:	d006      	beq.n	20292 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   20284:	688a      	ldr	r2, [r1, #8]
   20286:	f012 0f01 	tst.w	r2, #1
   2028a:	d10c      	bne.n	202a6 <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
   2028c:	4a16      	ldr	r2, [pc, #88]	; (202e8 <nrfx_usbd_ep_transfer+0x110>)
   2028e:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   20290:	e7da      	b.n	20248 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
   20292:	688a      	ldr	r2, [r1, #8]
   20294:	f012 0f01 	tst.w	r2, #1
   20298:	d102      	bne.n	202a0 <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
   2029a:	4a14      	ldr	r2, [pc, #80]	; (202ec <nrfx_usbd_ep_transfer+0x114>)
   2029c:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   2029e:	e7d3      	b.n	20248 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
   202a0:	4a13      	ldr	r2, [pc, #76]	; (202f0 <nrfx_usbd_ep_transfer+0x118>)
   202a2:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   202a4:	e7d0      	b.n	20248 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
   202a6:	4a13      	ldr	r2, [pc, #76]	; (202f4 <nrfx_usbd_ep_transfer+0x11c>)
   202a8:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
   202aa:	e7cd      	b.n	20248 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
   202ac:	4812      	ldr	r0, [pc, #72]	; (202f8 <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
   202ae:	f385 8811 	msr	BASEPRI, r5
   202b2:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   202b6:	bcf0      	pop	{r4, r5, r6, r7}
   202b8:	4770      	bx	lr
   202ba:	bf00      	nop
   202bc:	20004758 	.word	0x20004758
   202c0:	0bad000a 	.word	0x0bad000a
   202c4:	20003ca0 	.word	0x20003ca0
   202c8:	20003c30 	.word	0x20003c30
   202cc:	20003ca4 	.word	0x20003ca4
   202d0:	20003bc4 	.word	0x20003bc4
   202d4:	0002b46f 	.word	0x0002b46f
   202d8:	e000e100 	.word	0xe000e100
   202dc:	0bad0000 	.word	0x0bad0000
   202e0:	20003d34 	.word	0x20003d34
   202e4:	20003c34 	.word	0x20003c34
   202e8:	0002b501 	.word	0x0002b501
   202ec:	0002b4a5 	.word	0x0002b4a5
   202f0:	0002b4c7 	.word	0x0002b4c7
   202f4:	0002b53f 	.word	0x0002b53f
   202f8:	0bad000b 	.word	0x0bad000b

000202fc <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
   202fc:	4800      	ldr	r0, [pc, #0]	; (20300 <nrfx_usbd_feeder_buffer_get+0x4>)
   202fe:	4770      	bx	lr
   20300:	20003dc8 	.word	0x20003dc8

00020304 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
   20304:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20306:	f010 0f80 	tst.w	r0, #128	; 0x80
   2030a:	d118      	bne.n	2033e <nrfx_usbd_ep_status_get+0x3a>
   2030c:	4b0e      	ldr	r3, [pc, #56]	; (20348 <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
   2030e:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20312:	0104      	lsls	r4, r0, #4
   20314:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
   20318:	f04f 0540 	mov.w	r5, #64	; 0x40
   2031c:	f3ef 8211 	mrs	r2, BASEPRI
   20320:	f385 8812 	msr	BASEPRI_MAX, r5
   20324:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
   20328:	6885      	ldr	r5, [r0, #8]
   2032a:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   2032c:	591b      	ldr	r3, [r3, r4]
   2032e:	b143      	cbz	r3, 20342 <nrfx_usbd_ep_status_get+0x3e>
   20330:	2004      	movs	r0, #4
	__asm__ volatile(
   20332:	f382 8811 	msr	BASEPRI, r2
   20336:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
   2033a:	bc30      	pop	{r4, r5}
   2033c:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2033e:	4b03      	ldr	r3, [pc, #12]	; (2034c <nrfx_usbd_ep_status_get+0x48>)
   20340:	e7e5      	b.n	2030e <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
   20342:	7b80      	ldrb	r0, [r0, #14]
   20344:	e7f5      	b.n	20332 <nrfx_usbd_ep_status_get+0x2e>
   20346:	bf00      	nop
   20348:	20003ca4 	.word	0x20003ca4
   2034c:	20003d34 	.word	0x20003d34

00020350 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
   20350:	f010 0f08 	tst.w	r0, #8
   20354:	d107      	bne.n	20366 <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   20356:	f000 000f 	and.w	r0, r0, #15
   2035a:	f500 7094 	add.w	r0, r0, #296	; 0x128
   2035e:	4b06      	ldr	r3, [pc, #24]	; (20378 <nrfx_usbd_epout_size_get+0x28>)
   20360:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   20364:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
   20366:	4b04      	ldr	r3, [pc, #16]	; (20378 <nrfx_usbd_epout_size_get+0x28>)
   20368:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
   2036c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   20370:	d100      	bne.n	20374 <nrfx_usbd_epout_size_get+0x24>
   20372:	4770      	bx	lr
            size_isoout = 0;
   20374:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
   20376:	4770      	bx	lr
   20378:	40027000 	.word	0x40027000

0002037c <usbd_dmareq_process>:
    if (!m_dma_pending)
   2037c:	4b6d      	ldr	r3, [pc, #436]	; (20534 <usbd_dmareq_process+0x1b8>)
   2037e:	781b      	ldrb	r3, [r3, #0]
   20380:	2b00      	cmp	r3, #0
   20382:	f040 80d5 	bne.w	20530 <usbd_dmareq_process+0x1b4>
{
   20386:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2038a:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
   2038c:	4b6a      	ldr	r3, [pc, #424]	; (20538 <usbd_dmareq_process+0x1bc>)
   2038e:	681b      	ldr	r3, [r3, #0]
   20390:	4a6a      	ldr	r2, [pc, #424]	; (2053c <usbd_dmareq_process+0x1c0>)
   20392:	6810      	ldr	r0, [r2, #0]
   20394:	4003      	ands	r3, r0
   20396:	f000 80c8 	beq.w	2052a <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
   2039a:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
   2039e:	d05a      	beq.n	20456 <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
   203a0:	f00b f8a6 	bl	2b4f0 <usbd_dma_scheduler_algorithm>
   203a4:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   203a6:	f1b8 0f0f 	cmp.w	r8, #15
   203aa:	d959      	bls.n	20460 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   203ac:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   203b0:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   203b2:	b274      	sxtb	r4, r6
   203b4:	2c00      	cmp	r4, #0
   203b6:	db57      	blt.n	20468 <usbd_dmareq_process+0xec>
   203b8:	f8df a19c 	ldr.w	sl, [pc, #412]	; 20558 <usbd_dmareq_process+0x1dc>
   203bc:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
   203c0:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   203c2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
   203c6:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
   203ca:	2c00      	cmp	r4, #0
   203cc:	db4f      	blt.n	2046e <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
   203ce:	4630      	mov	r0, r6
   203d0:	f7ff ffbe 	bl	20350 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
   203d4:	f85a a00b 	ldr.w	sl, [sl, fp]
   203d8:	4683      	mov	fp, r0
   203da:	4603      	mov	r3, r0
   203dc:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   203e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   203e4:	a802      	add	r0, sp, #8
   203e6:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
   203e8:	9b02      	ldr	r3, [sp, #8]
   203ea:	b113      	cbz	r3, 203f2 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
   203ec:	9b03      	ldr	r3, [sp, #12]
   203ee:	455b      	cmp	r3, fp
   203f0:	d34b      	bcc.n	2048a <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
   203f2:	b910      	cbnz	r0, 203fa <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
   203f4:	2300      	movs	r3, #0
   203f6:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
   203fa:	f7ff f94f 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   203fe:	b110      	cbz	r0, 20406 <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
   20400:	4b4f      	ldr	r3, [pc, #316]	; (20540 <usbd_dmareq_process+0x1c4>)
   20402:	2282      	movs	r2, #130	; 0x82
   20404:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
   20406:	2001      	movs	r0, #1
   20408:	4b4a      	ldr	r3, [pc, #296]	; (20534 <usbd_dmareq_process+0x1b8>)
   2040a:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
   2040c:	fa00 f008 	lsl.w	r0, r0, r8
   20410:	4a4a      	ldr	r2, [pc, #296]	; (2053c <usbd_dmareq_process+0x1c0>)
   20412:	6813      	ldr	r3, [r2, #0]
   20414:	ea23 0000 	bic.w	r0, r3, r0
   20418:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
   2041a:	9a03      	ldr	r2, [sp, #12]
   2041c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   20420:	4413      	add	r3, r2
   20422:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
   20426:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
   20428:	2c00      	cmp	r4, #0
   2042a:	db4f      	blt.n	204cc <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
   2042c:	f016 0f08 	tst.w	r6, #8
   20430:	d05f      	beq.n	204f2 <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
   20432:	4944      	ldr	r1, [pc, #272]	; (20544 <usbd_dmareq_process+0x1c8>)
   20434:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
   20438:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
   2043c:	2c00      	cmp	r4, #0
   2043e:	db62      	blt.n	20506 <usbd_dmareq_process+0x18a>
   20440:	2328      	movs	r3, #40	; 0x28
   20442:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   20446:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   2044a:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   2044e:	2301      	movs	r3, #1
   20450:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   20452:	683b      	ldr	r3, [r7, #0]
}
   20454:	e065      	b.n	20522 <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
   20456:	4618      	mov	r0, r3
   20458:	f00b f84a 	bl	2b4f0 <usbd_dma_scheduler_algorithm>
   2045c:	4680      	mov	r8, r0
   2045e:	e7a2      	b.n	203a6 <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20460:	f068 067f 	orn	r6, r8, #127	; 0x7f
   20464:	b2f6      	uxtb	r6, r6
   20466:	e7a4      	b.n	203b2 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20468:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2055c <usbd_dmareq_process+0x1e0>
   2046c:	e7a6      	b.n	203bc <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
   2046e:	f8d9 3000 	ldr.w	r3, [r9]
   20472:	f8b9 200c 	ldrh.w	r2, [r9, #12]
   20476:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2047a:	a802      	add	r0, sp, #8
   2047c:	4798      	blx	r3
                if (!continue_transfer)
   2047e:	2800      	cmp	r0, #0
   20480:	d1bb      	bne.n	203fa <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
   20482:	2300      	movs	r3, #0
   20484:	f8c9 3000 	str.w	r3, [r9]
   20488:	e7b7      	b.n	203fa <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
   2048a:	2202      	movs	r2, #2
   2048c:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
   20490:	2301      	movs	r3, #1
   20492:	fa03 f808 	lsl.w	r8, r3, r8
   20496:	ea6f 0808 	mvn.w	r8, r8
   2049a:	4b27      	ldr	r3, [pc, #156]	; (20538 <usbd_dmareq_process+0x1bc>)
   2049c:	f3bf 8f5b 	dmb	ish
   204a0:	e853 1f00 	ldrex	r1, [r3]
   204a4:	ea01 0108 	and.w	r1, r1, r8
   204a8:	e843 1000 	strex	r0, r1, [r3]
   204ac:	2800      	cmp	r0, #0
   204ae:	d1f7      	bne.n	204a0 <usbd_dmareq_process+0x124>
   204b0:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
   204b4:	2306      	movs	r3, #6
   204b6:	f88d 3004 	strb.w	r3, [sp, #4]
   204ba:	f88d 6006 	strb.w	r6, [sp, #6]
   204be:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
   204c2:	4b21      	ldr	r3, [pc, #132]	; (20548 <usbd_dmareq_process+0x1cc>)
   204c4:	681b      	ldr	r3, [r3, #0]
   204c6:	a801      	add	r0, sp, #4
   204c8:	4798      	blx	r3
                    continue;
   204ca:	e75f      	b.n	2038c <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
   204cc:	f016 0f08 	tst.w	r6, #8
   204d0:	d005      	beq.n	204de <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
   204d2:	491c      	ldr	r1, [pc, #112]	; (20544 <usbd_dmareq_process+0x1c8>)
   204d4:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
   204d8:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
   204dc:	e7ae      	b.n	2043c <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
   204de:	4919      	ldr	r1, [pc, #100]	; (20544 <usbd_dmareq_process+0x1c8>)
   204e0:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   204e4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   204e8:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
   204ec:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
   204f0:	e7a4      	b.n	2043c <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
   204f2:	4914      	ldr	r1, [pc, #80]	; (20544 <usbd_dmareq_process+0x1c8>)
   204f4:	eb07 0087 	add.w	r0, r7, r7, lsl #2
   204f8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   204fc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
   20500:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
   20504:	e79a      	b.n	2043c <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
   20506:	2304      	movs	r3, #4
   20508:	e79b      	b.n	20442 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   2050a:	4b10      	ldr	r3, [pc, #64]	; (2054c <usbd_dmareq_process+0x1d0>)
   2050c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   20510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20514:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   20518:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
   2051a:	b933      	cbnz	r3, 2052a <usbd_dmareq_process+0x1ae>
   2051c:	4b0c      	ldr	r3, [pc, #48]	; (20550 <usbd_dmareq_process+0x1d4>)
   2051e:	681b      	ldr	r3, [r3, #0]
   20520:	b91b      	cbnz	r3, 2052a <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
   20522:	2c00      	cmp	r4, #0
   20524:	dbf1      	blt.n	2050a <usbd_dmareq_process+0x18e>
   20526:	4b0b      	ldr	r3, [pc, #44]	; (20554 <usbd_dmareq_process+0x1d8>)
   20528:	e7f0      	b.n	2050c <usbd_dmareq_process+0x190>
}
   2052a:	b005      	add	sp, #20
   2052c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20530:	4770      	bx	lr
   20532:	bf00      	nop
   20534:	20004756 	.word	0x20004756
   20538:	20003c30 	.word	0x20003c30
   2053c:	20003ca0 	.word	0x20003ca0
   20540:	40027c1c 	.word	0x40027c1c
   20544:	40027000 	.word	0x40027000
   20548:	20003dc4 	.word	0x20003dc4
   2054c:	0002f09c 	.word	0x0002f09c
   20550:	40027100 	.word	0x40027100
   20554:	0002f0bc 	.word	0x0002f0bc
   20558:	20003ca4 	.word	0x20003ca4
   2055c:	20003d34 	.word	0x20003d34

00020560 <ev_epdata_handler>:
{
   20560:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
   20562:	4b0f      	ldr	r3, [pc, #60]	; (205a0 <ev_epdata_handler+0x40>)
   20564:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
   20568:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
   2056c:	e009      	b.n	20582 <ev_epdata_handler+0x22>
    return 32U;
   2056e:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   20570:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20574:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
   20576:	2301      	movs	r3, #1
   20578:	408b      	lsls	r3, r1
   2057a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
   2057e:	f7ff f9cb 	bl	1f918 <usbd_ep_data_handler>
    while (dataepstatus)
   20582:	b154      	cbz	r4, 2059a <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   20584:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
   20588:	2900      	cmp	r1, #0
   2058a:	d0f0      	beq.n	2056e <ev_epdata_handler+0xe>
  return __builtin_clz(value);
   2058c:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20590:	290f      	cmp	r1, #15
   20592:	d8ed      	bhi.n	20570 <ev_epdata_handler+0x10>
   20594:	f041 0080 	orr.w	r0, r1, #128	; 0x80
   20598:	e7ed      	b.n	20576 <ev_epdata_handler+0x16>
        usbd_dmareq_process();
   2059a:	f7ff feef 	bl	2037c <usbd_dmareq_process>
}
   2059e:	bd10      	pop	{r4, pc}
   205a0:	40027000 	.word	0x40027000

000205a4 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   205a4:	b500      	push	{lr}
   205a6:	b083      	sub	sp, #12
   205a8:	f7ff f878 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   205ac:	b110      	cbz	r0, 205b4 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   205ae:	4b1d      	ldr	r3, [pc, #116]	; (20624 <ev_dma_epout7_handler+0x80>)
   205b0:	2200      	movs	r2, #0
   205b2:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   205b4:	4b1c      	ldr	r3, [pc, #112]	; (20628 <ev_dma_epout7_handler+0x84>)
   205b6:	2200      	movs	r2, #0
   205b8:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   205ba:	4b1c      	ldr	r3, [pc, #112]	; (2062c <ev_dma_epout7_handler+0x88>)
   205bc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   205c0:	2b03      	cmp	r3, #3
   205c2:	d01d      	beq.n	20600 <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   205c4:	4b19      	ldr	r3, [pc, #100]	; (2062c <ev_dma_epout7_handler+0x88>)
   205c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   205c8:	bb3b      	cbnz	r3, 2061a <ev_dma_epout7_handler+0x76>
   205ca:	4b19      	ldr	r3, [pc, #100]	; (20630 <ev_dma_epout7_handler+0x8c>)
   205cc:	f3bf 8f5b 	dmb	ish
   205d0:	e853 2f00 	ldrex	r2, [r3]
   205d4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   205d8:	e843 2100 	strex	r1, r2, [r3]
   205dc:	2900      	cmp	r1, #0
   205de:	d1f7      	bne.n	205d0 <ev_dma_epout7_handler+0x2c>
   205e0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   205e4:	2306      	movs	r3, #6
   205e6:	f88d 3004 	strb.w	r3, [sp, #4]
   205ea:	2307      	movs	r3, #7
   205ec:	f88d 3006 	strb.w	r3, [sp, #6]
   205f0:	2300      	movs	r3, #0
   205f2:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   205f6:	4b0f      	ldr	r3, [pc, #60]	; (20634 <ev_dma_epout7_handler+0x90>)
   205f8:	681b      	ldr	r3, [r3, #0]
   205fa:	a801      	add	r0, sp, #4
   205fc:	4798      	blx	r3
   205fe:	e00c      	b.n	2061a <ev_dma_epout7_handler+0x76>
   20600:	4b0b      	ldr	r3, [pc, #44]	; (20630 <ev_dma_epout7_handler+0x8c>)
   20602:	f3bf 8f5b 	dmb	ish
   20606:	e853 2f00 	ldrex	r2, [r3]
   2060a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   2060e:	e843 2100 	strex	r1, r2, [r3]
   20612:	2900      	cmp	r1, #0
   20614:	d1f7      	bne.n	20606 <ev_dma_epout7_handler+0x62>
   20616:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   2061a:	f7ff feaf 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
   2061e:	b003      	add	sp, #12
   20620:	f85d fb04 	ldr.w	pc, [sp], #4
   20624:	40027c1c 	.word	0x40027c1c
   20628:	20004756 	.word	0x20004756
   2062c:	20003ca4 	.word	0x20003ca4
   20630:	20003c30 	.word	0x20003c30
   20634:	20003dc4 	.word	0x20003dc4

00020638 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   20638:	b500      	push	{lr}
   2063a:	b083      	sub	sp, #12
   2063c:	f7ff f82e 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   20640:	b110      	cbz	r0, 20648 <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   20642:	4b1d      	ldr	r3, [pc, #116]	; (206b8 <ev_dma_epout1_handler+0x80>)
   20644:	2200      	movs	r2, #0
   20646:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   20648:	4b1c      	ldr	r3, [pc, #112]	; (206bc <ev_dma_epout1_handler+0x84>)
   2064a:	2200      	movs	r2, #0
   2064c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2064e:	4b1c      	ldr	r3, [pc, #112]	; (206c0 <ev_dma_epout1_handler+0x88>)
   20650:	7f9b      	ldrb	r3, [r3, #30]
   20652:	2b03      	cmp	r3, #3
   20654:	d01d      	beq.n	20692 <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
   20656:	4b1a      	ldr	r3, [pc, #104]	; (206c0 <ev_dma_epout1_handler+0x88>)
   20658:	691b      	ldr	r3, [r3, #16]
   2065a:	bb3b      	cbnz	r3, 206ac <ev_dma_epout1_handler+0x74>
   2065c:	4b19      	ldr	r3, [pc, #100]	; (206c4 <ev_dma_epout1_handler+0x8c>)
   2065e:	f3bf 8f5b 	dmb	ish
   20662:	e853 2f00 	ldrex	r2, [r3]
   20666:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   2066a:	e843 2100 	strex	r1, r2, [r3]
   2066e:	2900      	cmp	r1, #0
   20670:	d1f7      	bne.n	20662 <ev_dma_epout1_handler+0x2a>
   20672:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   20676:	2306      	movs	r3, #6
   20678:	f88d 3004 	strb.w	r3, [sp, #4]
   2067c:	2301      	movs	r3, #1
   2067e:	f88d 3006 	strb.w	r3, [sp, #6]
   20682:	2300      	movs	r3, #0
   20684:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   20688:	4b0f      	ldr	r3, [pc, #60]	; (206c8 <ev_dma_epout1_handler+0x90>)
   2068a:	681b      	ldr	r3, [r3, #0]
   2068c:	a801      	add	r0, sp, #4
   2068e:	4798      	blx	r3
   20690:	e00c      	b.n	206ac <ev_dma_epout1_handler+0x74>
   20692:	4b0c      	ldr	r3, [pc, #48]	; (206c4 <ev_dma_epout1_handler+0x8c>)
   20694:	f3bf 8f5b 	dmb	ish
   20698:	e853 2f00 	ldrex	r2, [r3]
   2069c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
   206a0:	e843 2100 	strex	r1, r2, [r3]
   206a4:	2900      	cmp	r1, #0
   206a6:	d1f7      	bne.n	20698 <ev_dma_epout1_handler+0x60>
   206a8:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   206ac:	f7ff fe66 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
   206b0:	b003      	add	sp, #12
   206b2:	f85d fb04 	ldr.w	pc, [sp], #4
   206b6:	bf00      	nop
   206b8:	40027c1c 	.word	0x40027c1c
   206bc:	20004756 	.word	0x20004756
   206c0:	20003ca4 	.word	0x20003ca4
   206c4:	20003c30 	.word	0x20003c30
   206c8:	20003dc4 	.word	0x20003dc4

000206cc <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   206cc:	b500      	push	{lr}
   206ce:	b083      	sub	sp, #12
   206d0:	f7fe ffe4 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   206d4:	b110      	cbz	r0, 206dc <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   206d6:	4b1d      	ldr	r3, [pc, #116]	; (2074c <ev_dma_epout2_handler+0x80>)
   206d8:	2200      	movs	r2, #0
   206da:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   206dc:	4b1c      	ldr	r3, [pc, #112]	; (20750 <ev_dma_epout2_handler+0x84>)
   206de:	2200      	movs	r2, #0
   206e0:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   206e2:	4b1c      	ldr	r3, [pc, #112]	; (20754 <ev_dma_epout2_handler+0x88>)
   206e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   206e8:	2b03      	cmp	r3, #3
   206ea:	d01d      	beq.n	20728 <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   206ec:	4b19      	ldr	r3, [pc, #100]	; (20754 <ev_dma_epout2_handler+0x88>)
   206ee:	6a1b      	ldr	r3, [r3, #32]
   206f0:	bb3b      	cbnz	r3, 20742 <ev_dma_epout2_handler+0x76>
   206f2:	4b19      	ldr	r3, [pc, #100]	; (20758 <ev_dma_epout2_handler+0x8c>)
   206f4:	f3bf 8f5b 	dmb	ish
   206f8:	e853 2f00 	ldrex	r2, [r3]
   206fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
   20700:	e843 2100 	strex	r1, r2, [r3]
   20704:	2900      	cmp	r1, #0
   20706:	d1f7      	bne.n	206f8 <ev_dma_epout2_handler+0x2c>
   20708:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2070c:	2306      	movs	r3, #6
   2070e:	f88d 3004 	strb.w	r3, [sp, #4]
   20712:	2302      	movs	r3, #2
   20714:	f88d 3006 	strb.w	r3, [sp, #6]
   20718:	2300      	movs	r3, #0
   2071a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   2071e:	4b0f      	ldr	r3, [pc, #60]	; (2075c <ev_dma_epout2_handler+0x90>)
   20720:	681b      	ldr	r3, [r3, #0]
   20722:	a801      	add	r0, sp, #4
   20724:	4798      	blx	r3
   20726:	e00c      	b.n	20742 <ev_dma_epout2_handler+0x76>
   20728:	4b0b      	ldr	r3, [pc, #44]	; (20758 <ev_dma_epout2_handler+0x8c>)
   2072a:	f3bf 8f5b 	dmb	ish
   2072e:	e853 2f00 	ldrex	r2, [r3]
   20732:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
   20736:	e843 2100 	strex	r1, r2, [r3]
   2073a:	2900      	cmp	r1, #0
   2073c:	d1f7      	bne.n	2072e <ev_dma_epout2_handler+0x62>
   2073e:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   20742:	f7ff fe1b 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
   20746:	b003      	add	sp, #12
   20748:	f85d fb04 	ldr.w	pc, [sp], #4
   2074c:	40027c1c 	.word	0x40027c1c
   20750:	20004756 	.word	0x20004756
   20754:	20003ca4 	.word	0x20003ca4
   20758:	20003c30 	.word	0x20003c30
   2075c:	20003dc4 	.word	0x20003dc4

00020760 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   20760:	b500      	push	{lr}
   20762:	b083      	sub	sp, #12
   20764:	f7fe ff9a 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   20768:	b110      	cbz	r0, 20770 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   2076a:	4b1d      	ldr	r3, [pc, #116]	; (207e0 <ev_dma_epout3_handler+0x80>)
   2076c:	2200      	movs	r2, #0
   2076e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   20770:	4b1c      	ldr	r3, [pc, #112]	; (207e4 <ev_dma_epout3_handler+0x84>)
   20772:	2200      	movs	r2, #0
   20774:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   20776:	4b1c      	ldr	r3, [pc, #112]	; (207e8 <ev_dma_epout3_handler+0x88>)
   20778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   2077c:	2b03      	cmp	r3, #3
   2077e:	d01d      	beq.n	207bc <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   20780:	4b19      	ldr	r3, [pc, #100]	; (207e8 <ev_dma_epout3_handler+0x88>)
   20782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   20784:	bb3b      	cbnz	r3, 207d6 <ev_dma_epout3_handler+0x76>
   20786:	4b19      	ldr	r3, [pc, #100]	; (207ec <ev_dma_epout3_handler+0x8c>)
   20788:	f3bf 8f5b 	dmb	ish
   2078c:	e853 2f00 	ldrex	r2, [r3]
   20790:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
   20794:	e843 2100 	strex	r1, r2, [r3]
   20798:	2900      	cmp	r1, #0
   2079a:	d1f7      	bne.n	2078c <ev_dma_epout3_handler+0x2c>
   2079c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   207a0:	2306      	movs	r3, #6
   207a2:	f88d 3004 	strb.w	r3, [sp, #4]
   207a6:	2303      	movs	r3, #3
   207a8:	f88d 3006 	strb.w	r3, [sp, #6]
   207ac:	2300      	movs	r3, #0
   207ae:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   207b2:	4b0f      	ldr	r3, [pc, #60]	; (207f0 <ev_dma_epout3_handler+0x90>)
   207b4:	681b      	ldr	r3, [r3, #0]
   207b6:	a801      	add	r0, sp, #4
   207b8:	4798      	blx	r3
   207ba:	e00c      	b.n	207d6 <ev_dma_epout3_handler+0x76>
   207bc:	4b0b      	ldr	r3, [pc, #44]	; (207ec <ev_dma_epout3_handler+0x8c>)
   207be:	f3bf 8f5b 	dmb	ish
   207c2:	e853 2f00 	ldrex	r2, [r3]
   207c6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
   207ca:	e843 2100 	strex	r1, r2, [r3]
   207ce:	2900      	cmp	r1, #0
   207d0:	d1f7      	bne.n	207c2 <ev_dma_epout3_handler+0x62>
   207d2:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   207d6:	f7ff fdd1 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
   207da:	b003      	add	sp, #12
   207dc:	f85d fb04 	ldr.w	pc, [sp], #4
   207e0:	40027c1c 	.word	0x40027c1c
   207e4:	20004756 	.word	0x20004756
   207e8:	20003ca4 	.word	0x20003ca4
   207ec:	20003c30 	.word	0x20003c30
   207f0:	20003dc4 	.word	0x20003dc4

000207f4 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   207f4:	b500      	push	{lr}
   207f6:	b083      	sub	sp, #12
   207f8:	f7fe ff50 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   207fc:	b110      	cbz	r0, 20804 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   207fe:	4b1d      	ldr	r3, [pc, #116]	; (20874 <ev_dma_epout4_handler+0x80>)
   20800:	2200      	movs	r2, #0
   20802:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   20804:	4b1c      	ldr	r3, [pc, #112]	; (20878 <ev_dma_epout4_handler+0x84>)
   20806:	2200      	movs	r2, #0
   20808:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2080a:	4b1c      	ldr	r3, [pc, #112]	; (2087c <ev_dma_epout4_handler+0x88>)
   2080c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   20810:	2b03      	cmp	r3, #3
   20812:	d01d      	beq.n	20850 <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   20814:	4b19      	ldr	r3, [pc, #100]	; (2087c <ev_dma_epout4_handler+0x88>)
   20816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20818:	bb3b      	cbnz	r3, 2086a <ev_dma_epout4_handler+0x76>
   2081a:	4b19      	ldr	r3, [pc, #100]	; (20880 <ev_dma_epout4_handler+0x8c>)
   2081c:	f3bf 8f5b 	dmb	ish
   20820:	e853 2f00 	ldrex	r2, [r3]
   20824:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   20828:	e843 2100 	strex	r1, r2, [r3]
   2082c:	2900      	cmp	r1, #0
   2082e:	d1f7      	bne.n	20820 <ev_dma_epout4_handler+0x2c>
   20830:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   20834:	2306      	movs	r3, #6
   20836:	f88d 3004 	strb.w	r3, [sp, #4]
   2083a:	2304      	movs	r3, #4
   2083c:	f88d 3006 	strb.w	r3, [sp, #6]
   20840:	2300      	movs	r3, #0
   20842:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   20846:	4b0f      	ldr	r3, [pc, #60]	; (20884 <ev_dma_epout4_handler+0x90>)
   20848:	681b      	ldr	r3, [r3, #0]
   2084a:	a801      	add	r0, sp, #4
   2084c:	4798      	blx	r3
   2084e:	e00c      	b.n	2086a <ev_dma_epout4_handler+0x76>
   20850:	4b0b      	ldr	r3, [pc, #44]	; (20880 <ev_dma_epout4_handler+0x8c>)
   20852:	f3bf 8f5b 	dmb	ish
   20856:	e853 2f00 	ldrex	r2, [r3]
   2085a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
   2085e:	e843 2100 	strex	r1, r2, [r3]
   20862:	2900      	cmp	r1, #0
   20864:	d1f7      	bne.n	20856 <ev_dma_epout4_handler+0x62>
   20866:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   2086a:	f7ff fd87 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
   2086e:	b003      	add	sp, #12
   20870:	f85d fb04 	ldr.w	pc, [sp], #4
   20874:	40027c1c 	.word	0x40027c1c
   20878:	20004756 	.word	0x20004756
   2087c:	20003ca4 	.word	0x20003ca4
   20880:	20003c30 	.word	0x20003c30
   20884:	20003dc4 	.word	0x20003dc4

00020888 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   20888:	b500      	push	{lr}
   2088a:	b083      	sub	sp, #12
   2088c:	f7fe ff06 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   20890:	b110      	cbz	r0, 20898 <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   20892:	4b1d      	ldr	r3, [pc, #116]	; (20908 <ev_dma_epout5_handler+0x80>)
   20894:	2200      	movs	r2, #0
   20896:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   20898:	4b1c      	ldr	r3, [pc, #112]	; (2090c <ev_dma_epout5_handler+0x84>)
   2089a:	2200      	movs	r2, #0
   2089c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   2089e:	4b1c      	ldr	r3, [pc, #112]	; (20910 <ev_dma_epout5_handler+0x88>)
   208a0:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   208a4:	2b03      	cmp	r3, #3
   208a6:	d01d      	beq.n	208e4 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
   208a8:	4b19      	ldr	r3, [pc, #100]	; (20910 <ev_dma_epout5_handler+0x88>)
   208aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   208ac:	bb3b      	cbnz	r3, 208fe <ev_dma_epout5_handler+0x76>
   208ae:	4b19      	ldr	r3, [pc, #100]	; (20914 <ev_dma_epout5_handler+0x8c>)
   208b0:	f3bf 8f5b 	dmb	ish
   208b4:	e853 2f00 	ldrex	r2, [r3]
   208b8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   208bc:	e843 2100 	strex	r1, r2, [r3]
   208c0:	2900      	cmp	r1, #0
   208c2:	d1f7      	bne.n	208b4 <ev_dma_epout5_handler+0x2c>
   208c4:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   208c8:	2306      	movs	r3, #6
   208ca:	f88d 3004 	strb.w	r3, [sp, #4]
   208ce:	2305      	movs	r3, #5
   208d0:	f88d 3006 	strb.w	r3, [sp, #6]
   208d4:	2300      	movs	r3, #0
   208d6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   208da:	4b0f      	ldr	r3, [pc, #60]	; (20918 <ev_dma_epout5_handler+0x90>)
   208dc:	681b      	ldr	r3, [r3, #0]
   208de:	a801      	add	r0, sp, #4
   208e0:	4798      	blx	r3
   208e2:	e00c      	b.n	208fe <ev_dma_epout5_handler+0x76>
   208e4:	4b0b      	ldr	r3, [pc, #44]	; (20914 <ev_dma_epout5_handler+0x8c>)
   208e6:	f3bf 8f5b 	dmb	ish
   208ea:	e853 2f00 	ldrex	r2, [r3]
   208ee:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
   208f2:	e843 2100 	strex	r1, r2, [r3]
   208f6:	2900      	cmp	r1, #0
   208f8:	d1f7      	bne.n	208ea <ev_dma_epout5_handler+0x62>
   208fa:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   208fe:	f7ff fd3d 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
   20902:	b003      	add	sp, #12
   20904:	f85d fb04 	ldr.w	pc, [sp], #4
   20908:	40027c1c 	.word	0x40027c1c
   2090c:	20004756 	.word	0x20004756
   20910:	20003ca4 	.word	0x20003ca4
   20914:	20003c30 	.word	0x20003c30
   20918:	20003dc4 	.word	0x20003dc4

0002091c <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   2091c:	b500      	push	{lr}
   2091e:	b083      	sub	sp, #12
   20920:	f7fe febc 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   20924:	b110      	cbz	r0, 2092c <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   20926:	4b1d      	ldr	r3, [pc, #116]	; (2099c <ev_dma_epout6_handler+0x80>)
   20928:	2200      	movs	r2, #0
   2092a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   2092c:	4b1c      	ldr	r3, [pc, #112]	; (209a0 <ev_dma_epout6_handler+0x84>)
   2092e:	2200      	movs	r2, #0
   20930:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   20932:	4b1c      	ldr	r3, [pc, #112]	; (209a4 <ev_dma_epout6_handler+0x88>)
   20934:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   20938:	2b03      	cmp	r3, #3
   2093a:	d01c      	beq.n	20976 <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
   2093c:	4b19      	ldr	r3, [pc, #100]	; (209a4 <ev_dma_epout6_handler+0x88>)
   2093e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   20940:	bb33      	cbnz	r3, 20990 <ev_dma_epout6_handler+0x74>
   20942:	4b19      	ldr	r3, [pc, #100]	; (209a8 <ev_dma_epout6_handler+0x8c>)
   20944:	f3bf 8f5b 	dmb	ish
   20948:	e853 2f00 	ldrex	r2, [r3]
   2094c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   20950:	e843 2100 	strex	r1, r2, [r3]
   20954:	2900      	cmp	r1, #0
   20956:	d1f7      	bne.n	20948 <ev_dma_epout6_handler+0x2c>
   20958:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   2095c:	2306      	movs	r3, #6
   2095e:	f88d 3004 	strb.w	r3, [sp, #4]
   20962:	f88d 3006 	strb.w	r3, [sp, #6]
   20966:	2300      	movs	r3, #0
   20968:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   2096c:	4b0f      	ldr	r3, [pc, #60]	; (209ac <ev_dma_epout6_handler+0x90>)
   2096e:	681b      	ldr	r3, [r3, #0]
   20970:	a801      	add	r0, sp, #4
   20972:	4798      	blx	r3
   20974:	e00c      	b.n	20990 <ev_dma_epout6_handler+0x74>
   20976:	4b0c      	ldr	r3, [pc, #48]	; (209a8 <ev_dma_epout6_handler+0x8c>)
   20978:	f3bf 8f5b 	dmb	ish
   2097c:	e853 2f00 	ldrex	r2, [r3]
   20980:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
   20984:	e843 2100 	strex	r1, r2, [r3]
   20988:	2900      	cmp	r1, #0
   2098a:	d1f7      	bne.n	2097c <ev_dma_epout6_handler+0x60>
   2098c:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
   20990:	f7ff fcf4 	bl	2037c <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
   20994:	b003      	add	sp, #12
   20996:	f85d fb04 	ldr.w	pc, [sp], #4
   2099a:	bf00      	nop
   2099c:	40027c1c 	.word	0x40027c1c
   209a0:	20004756 	.word	0x20004756
   209a4:	20003ca4 	.word	0x20003ca4
   209a8:	20003c30 	.word	0x20003c30
   209ac:	20003dc4 	.word	0x20003dc4

000209b0 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
   209b0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   209b4:	4b01      	ldr	r3, [pc, #4]	; (209bc <nrfx_usbd_ep_stall+0xc>)
   209b6:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
   209ba:	4770      	bx	lr
   209bc:	40027000 	.word	0x40027000

000209c0 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
   209c0:	f010 0f08 	tst.w	r0, #8
   209c4:	d117      	bne.n	209f6 <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   209c6:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   209ca:	f010 0f80 	tst.w	r0, #128	; 0x80
   209ce:	d10c      	bne.n	209ea <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
   209d0:	f503 7388 	add.w	r3, r3, #272	; 0x110
   209d4:	009b      	lsls	r3, r3, #2
   209d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   209da:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
   209de:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
   209e0:	2801      	cmp	r0, #1
   209e2:	bf14      	ite	ne
   209e4:	2000      	movne	r0, #0
   209e6:	2001      	moveq	r0, #1
   209e8:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
   209ea:	f503 7384 	add.w	r3, r3, #264	; 0x108
   209ee:	4a03      	ldr	r2, [pc, #12]	; (209fc <nrfx_usbd_ep_stall_check+0x3c>)
   209f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   209f4:	e7f4      	b.n	209e0 <nrfx_usbd_ep_stall_check+0x20>
        return false;
   209f6:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
   209f8:	4770      	bx	lr
   209fa:	bf00      	nop
   209fc:	40027000 	.word	0x40027000

00020a00 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
   20a00:	4b04      	ldr	r3, [pc, #16]	; (20a14 <nrfx_usbd_ep_dtoggle_clear+0x14>)
   20a02:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
   20a06:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   20a0a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
   20a0e:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
   20a12:	4770      	bx	lr
   20a14:	40027000 	.word	0x40027000

00020a18 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
   20a18:	b510      	push	{r4, lr}
   20a1a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
   20a1c:	2208      	movs	r2, #8
   20a1e:	2100      	movs	r1, #0
   20a20:	f007 f93a 	bl	27c98 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   20a24:	4b11      	ldr	r3, [pc, #68]	; (20a6c <nrfx_usbd_setup_get+0x54>)
   20a26:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
   20a2a:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
   20a2c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
   20a30:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
   20a32:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
   20a36:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
   20a38:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
   20a3c:	0209      	lsls	r1, r1, #8
   20a3e:	b289      	uxth	r1, r1
   20a40:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
   20a42:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
   20a44:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
   20a48:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
   20a4a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
   20a4e:	0209      	lsls	r1, r1, #8
   20a50:	b289      	uxth	r1, r1
   20a52:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
   20a54:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
   20a56:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
   20a5a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
   20a5c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
   20a60:	021b      	lsls	r3, r3, #8
   20a62:	b29b      	uxth	r3, r3
   20a64:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
   20a66:	80e3      	strh	r3, [r4, #6]
}
   20a68:	bd10      	pop	{r4, pc}
   20a6a:	bf00      	nop
   20a6c:	40027000 	.word	0x40027000

00020a70 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20a70:	4b02      	ldr	r3, [pc, #8]	; (20a7c <nrfx_usbd_setup_data_clear+0xc>)
   20a72:	2201      	movs	r2, #1
   20a74:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   20a76:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
   20a78:	4770      	bx	lr
   20a7a:	bf00      	nop
   20a7c:	4002704c 	.word	0x4002704c

00020a80 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   20a80:	b500      	push	{lr}
   20a82:	b083      	sub	sp, #12
   20a84:	f7fe fe0a 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   20a88:	b110      	cbz	r0, 20a90 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   20a8a:	4b1d      	ldr	r3, [pc, #116]	; (20b00 <ev_dma_epout0_handler+0x80>)
   20a8c:	2200      	movs	r2, #0
   20a8e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   20a90:	4b1c      	ldr	r3, [pc, #112]	; (20b04 <ev_dma_epout0_handler+0x84>)
   20a92:	2200      	movs	r2, #0
   20a94:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
   20a96:	4b1c      	ldr	r3, [pc, #112]	; (20b08 <ev_dma_epout0_handler+0x88>)
   20a98:	7b9b      	ldrb	r3, [r3, #14]
   20a9a:	2b03      	cmp	r3, #3
   20a9c:	d005      	beq.n	20aaa <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
   20a9e:	4b1a      	ldr	r3, [pc, #104]	; (20b08 <ev_dma_epout0_handler+0x88>)
   20aa0:	681b      	ldr	r3, [r3, #0]
   20aa2:	b183      	cbz	r3, 20ac6 <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
   20aa4:	f7ff ffe4 	bl	20a70 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   20aa8:	e026      	b.n	20af8 <ev_dma_epout0_handler+0x78>
   20aaa:	4b18      	ldr	r3, [pc, #96]	; (20b0c <ev_dma_epout0_handler+0x8c>)
   20aac:	f3bf 8f5b 	dmb	ish
   20ab0:	e853 2f00 	ldrex	r2, [r3]
   20ab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   20ab8:	e843 2100 	strex	r1, r2, [r3]
   20abc:	2900      	cmp	r1, #0
   20abe:	d1f7      	bne.n	20ab0 <ev_dma_epout0_handler+0x30>
   20ac0:	f3bf 8f5b 	dmb	ish
   20ac4:	e018      	b.n	20af8 <ev_dma_epout0_handler+0x78>
   20ac6:	4b11      	ldr	r3, [pc, #68]	; (20b0c <ev_dma_epout0_handler+0x8c>)
   20ac8:	f3bf 8f5b 	dmb	ish
   20acc:	e853 2f00 	ldrex	r2, [r3]
   20ad0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   20ad4:	e843 2100 	strex	r1, r2, [r3]
   20ad8:	2900      	cmp	r1, #0
   20ada:	d1f7      	bne.n	20acc <ev_dma_epout0_handler+0x4c>
   20adc:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
   20ae0:	2306      	movs	r3, #6
   20ae2:	f88d 3004 	strb.w	r3, [sp, #4]
   20ae6:	2300      	movs	r3, #0
   20ae8:	f88d 3006 	strb.w	r3, [sp, #6]
   20aec:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
   20af0:	4b07      	ldr	r3, [pc, #28]	; (20b10 <ev_dma_epout0_handler+0x90>)
   20af2:	681b      	ldr	r3, [r3, #0]
   20af4:	a801      	add	r0, sp, #4
   20af6:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
   20af8:	b003      	add	sp, #12
   20afa:	f85d fb04 	ldr.w	pc, [sp], #4
   20afe:	bf00      	nop
   20b00:	40027c1c 	.word	0x40027c1c
   20b04:	20004756 	.word	0x20004756
   20b08:	20003ca4 	.word	0x20003ca4
   20b0c:	20003c30 	.word	0x20003c30
   20b10:	20003dc4 	.word	0x20003dc4

00020b14 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20b14:	4b02      	ldr	r3, [pc, #8]	; (20b20 <nrfx_usbd_setup_clear+0xc>)
   20b16:	2201      	movs	r2, #1
   20b18:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   20b1a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
   20b1c:	4770      	bx	lr
   20b1e:	bf00      	nop
   20b20:	40027050 	.word	0x40027050

00020b24 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
   20b24:	4b02      	ldr	r3, [pc, #8]	; (20b30 <nrfx_usbd_setup_stall+0xc>)
   20b26:	2201      	movs	r2, #1
   20b28:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
   20b2a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
   20b2c:	4770      	bx	lr
   20b2e:	bf00      	nop
   20b30:	40027054 	.word	0x40027054

00020b34 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
   20b34:	4b01      	ldr	r3, [pc, #4]	; (20b3c <nrfx_usbd_last_setup_dir_get+0x8>)
   20b36:	7818      	ldrb	r0, [r3, #0]
   20b38:	4770      	bx	lr
   20b3a:	bf00      	nop
   20b3c:	20004758 	.word	0x20004758

00020b40 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
   20b40:	b410      	push	{r4}
	__asm__ volatile(
   20b42:	f04f 0340 	mov.w	r3, #64	; 0x40
   20b46:	f3ef 8411 	mrs	r4, BASEPRI
   20b4a:	f383 8812 	msr	BASEPRI_MAX, r3
   20b4e:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
   20b52:	b243      	sxtb	r3, r0
   20b54:	2b00      	cmp	r3, #0
   20b56:	db1e      	blt.n	20b96 <nrfx_usbd_transfer_out_drop+0x56>
   20b58:	2210      	movs	r2, #16
   20b5a:	f003 030f 	and.w	r3, r3, #15
   20b5e:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
   20b60:	2201      	movs	r2, #1
   20b62:	fa02 f303 	lsl.w	r3, r2, r3
   20b66:	490d      	ldr	r1, [pc, #52]	; (20b9c <nrfx_usbd_transfer_out_drop+0x5c>)
   20b68:	680a      	ldr	r2, [r1, #0]
   20b6a:	ea22 0203 	bic.w	r2, r2, r3
   20b6e:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
   20b70:	f010 0f08 	tst.w	r0, #8
   20b74:	d109      	bne.n	20b8a <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
   20b76:	f000 000f 	and.w	r0, r0, #15
   20b7a:	4b09      	ldr	r3, [pc, #36]	; (20ba0 <nrfx_usbd_transfer_out_drop+0x60>)
   20b7c:	f500 7094 	add.w	r0, r0, #296	; 0x128
   20b80:	2200      	movs	r2, #0
   20b82:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
   20b86:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
   20b8a:	f384 8811 	msr	BASEPRI, r4
   20b8e:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
   20b92:	bc10      	pop	{r4}
   20b94:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
   20b96:	2200      	movs	r2, #0
   20b98:	e7df      	b.n	20b5a <nrfx_usbd_transfer_out_drop+0x1a>
   20b9a:	bf00      	nop
   20b9c:	20003ca0 	.word	0x20003ca0
   20ba0:	40027000 	.word	0x40027000

00020ba4 <ev_setup_handler>:
{
   20ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ba6:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
   20ba8:	4b5f      	ldr	r3, [pc, #380]	; (20d28 <ev_setup_handler+0x184>)
   20baa:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20bae:	4b5f      	ldr	r3, [pc, #380]	; (20d2c <ev_setup_handler+0x188>)
   20bb0:	681b      	ldr	r3, [r3, #0]
   20bb2:	43db      	mvns	r3, r3
   20bb4:	b29b      	uxth	r3, r3
   20bb6:	4a5e      	ldr	r2, [pc, #376]	; (20d30 <ev_setup_handler+0x18c>)
   20bb8:	6812      	ldr	r2, [r2, #0]
   20bba:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   20bbc:	4a5d      	ldr	r2, [pc, #372]	; (20d34 <ev_setup_handler+0x190>)
   20bbe:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
   20bc0:	f992 2000 	ldrsb.w	r2, [r2]
   20bc4:	2a00      	cmp	r2, #0
   20bc6:	db2e      	blt.n	20c26 <ev_setup_handler+0x82>
   20bc8:	2110      	movs	r1, #16
   20bca:	f002 020f 	and.w	r2, r2, #15
   20bce:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
   20bd0:	2201      	movs	r2, #1
   20bd2:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
   20bd4:	4213      	tst	r3, r2
   20bd6:	d128      	bne.n	20c2a <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   20bd8:	f014 0f80 	tst.w	r4, #128	; 0x80
   20bdc:	f040 80a2 	bne.w	20d24 <ev_setup_handler+0x180>
   20be0:	2200      	movs	r2, #0
    m_last_setup_dir =
   20be2:	4b54      	ldr	r3, [pc, #336]	; (20d34 <ev_setup_handler+0x190>)
   20be4:	701a      	strb	r2, [r3, #0]
   20be6:	4b52      	ldr	r3, [pc, #328]	; (20d30 <ev_setup_handler+0x18c>)
   20be8:	f3bf 8f5b 	dmb	ish
   20bec:	e853 2f00 	ldrex	r2, [r3]
   20bf0:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
   20bf4:	e843 2100 	strex	r1, r2, [r3]
   20bf8:	2900      	cmp	r1, #0
   20bfa:	d1f7      	bne.n	20bec <ev_setup_handler+0x48>
   20bfc:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
   20c00:	4a4a      	ldr	r2, [pc, #296]	; (20d2c <ev_setup_handler+0x188>)
   20c02:	6813      	ldr	r3, [r2, #0]
   20c04:	f043 0301 	orr.w	r3, r3, #1
   20c08:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
   20c0a:	2300      	movs	r3, #0
   20c0c:	f8ad 3005 	strh.w	r3, [sp, #5]
   20c10:	f88d 3007 	strb.w	r3, [sp, #7]
   20c14:	2305      	movs	r3, #5
   20c16:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
   20c1a:	4b47      	ldr	r3, [pc, #284]	; (20d38 <ev_setup_handler+0x194>)
   20c1c:	681b      	ldr	r3, [r3, #0]
   20c1e:	a801      	add	r0, sp, #4
   20c20:	4798      	blx	r3
}
   20c22:	b003      	add	sp, #12
   20c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
   20c26:	2100      	movs	r1, #0
   20c28:	e7cf      	b.n	20bca <ev_setup_handler+0x26>
	__asm__ volatile(
   20c2a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c2e:	f3ef 8611 	mrs	r6, BASEPRI
   20c32:	f383 8812 	msr	BASEPRI_MAX, r3
   20c36:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20c3a:	b243      	sxtb	r3, r0
   20c3c:	2b00      	cmp	r3, #0
   20c3e:	db26      	blt.n	20c8e <ev_setup_handler+0xea>
   20c40:	4d3e      	ldr	r5, [pc, #248]	; (20d3c <ev_setup_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
   20c42:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20c46:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   20c4a:	2b00      	cmp	r3, #0
   20c4c:	db24      	blt.n	20c98 <ev_setup_handler+0xf4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20c4e:	4a38      	ldr	r2, [pc, #224]	; (20d30 <ev_setup_handler+0x18c>)
   20c50:	6812      	ldr	r2, [r2, #0]
   20c52:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   20c54:	f003 030f 	and.w	r3, r3, #15
   20c58:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20c5a:	40da      	lsrs	r2, r3
   20c5c:	f012 0f01 	tst.w	r2, #1
   20c60:	d117      	bne.n	20c92 <ev_setup_handler+0xee>
            p_state->handler.consumer = NULL;
   20c62:	2200      	movs	r2, #0
   20c64:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20c66:	2201      	movs	r2, #1
   20c68:	fa02 f303 	lsl.w	r3, r2, r3
   20c6c:	4930      	ldr	r1, [pc, #192]	; (20d30 <ev_setup_handler+0x18c>)
   20c6e:	680a      	ldr	r2, [r1, #0]
   20c70:	ea22 0203 	bic.w	r2, r2, r3
   20c74:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   20c76:	492d      	ldr	r1, [pc, #180]	; (20d2c <ev_setup_handler+0x188>)
   20c78:	680a      	ldr	r2, [r1, #0]
   20c7a:	ea22 0303 	bic.w	r3, r2, r3
   20c7e:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   20c80:	2303      	movs	r3, #3
   20c82:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
   20c84:	f386 8811 	msr	BASEPRI, r6
   20c88:	f3bf 8f6f 	isb	sy
}
   20c8c:	e7a4      	b.n	20bd8 <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20c8e:	4d2c      	ldr	r5, [pc, #176]	; (20d40 <ev_setup_handler+0x19c>)
   20c90:	e7d7      	b.n	20c42 <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
   20c92:	f7ff ff55 	bl	20b40 <nrfx_usbd_transfer_out_drop>
   20c96:	e7f3      	b.n	20c80 <ev_setup_handler+0xdc>
        if(!NRF_USBD_EPISO_CHECK(ep))
   20c98:	f010 0f08 	tst.w	r0, #8
   20c9c:	d10f      	bne.n	20cbe <ev_setup_handler+0x11a>
            if(ep != NRFX_USBD_EPIN0)
   20c9e:	2880      	cmp	r0, #128	; 0x80
   20ca0:	d032      	beq.n	20d08 <ev_setup_handler+0x164>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   20ca2:	f202 32da 	addw	r2, r2, #986	; 0x3da
   20ca6:	0052      	lsls	r2, r2, #1
   20ca8:	4926      	ldr	r1, [pc, #152]	; (20d44 <ev_setup_handler+0x1a0>)
   20caa:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20cac:	3104      	adds	r1, #4
   20cae:	680a      	ldr	r2, [r1, #0]
   20cb0:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   20cb2:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20cb6:	680f      	ldr	r7, [r1, #0]
   20cb8:	433a      	orrs	r2, r7
   20cba:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   20cbc:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   20cbe:	4a1b      	ldr	r2, [pc, #108]	; (20d2c <ev_setup_handler+0x188>)
   20cc0:	6811      	ldr	r1, [r2, #0]
   20cc2:	4a1b      	ldr	r2, [pc, #108]	; (20d30 <ev_setup_handler+0x18c>)
   20cc4:	6817      	ldr	r7, [r2, #0]
   20cc6:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
   20cca:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   20cce:	2201      	movs	r2, #1
   20cd0:	fa02 f303 	lsl.w	r3, r2, r3
   20cd4:	ea1c 0f03 	tst.w	ip, r3
   20cd8:	d0d4      	beq.n	20c84 <ev_setup_handler+0xe0>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20cda:	ea27 0703 	bic.w	r7, r7, r3
   20cde:	4a14      	ldr	r2, [pc, #80]	; (20d30 <ev_setup_handler+0x18c>)
   20ce0:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   20ce2:	430b      	orrs	r3, r1
   20ce4:	4a11      	ldr	r2, [pc, #68]	; (20d2c <ev_setup_handler+0x188>)
   20ce6:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   20ce8:	2300      	movs	r3, #0
   20cea:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   20cec:	2303      	movs	r3, #3
   20cee:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   20cf0:	2206      	movs	r2, #6
   20cf2:	f88d 2000 	strb.w	r2, [sp]
   20cf6:	f88d 0002 	strb.w	r0, [sp, #2]
   20cfa:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
   20cfe:	4b0e      	ldr	r3, [pc, #56]	; (20d38 <ev_setup_handler+0x194>)
   20d00:	681b      	ldr	r3, [r3, #0]
   20d02:	4668      	mov	r0, sp
   20d04:	4798      	blx	r3
   20d06:	e7bd      	b.n	20c84 <ev_setup_handler+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   20d08:	4a0e      	ldr	r2, [pc, #56]	; (20d44 <ev_setup_handler+0x1a0>)
   20d0a:	f240 71b4 	movw	r1, #1972	; 0x7b4
   20d0e:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20d10:	490d      	ldr	r1, [pc, #52]	; (20d48 <ev_setup_handler+0x1a4>)
   20d12:	680a      	ldr	r2, [r1, #0]
   20d14:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   20d16:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20d1a:	680f      	ldr	r7, [r1, #0]
   20d1c:	433a      	orrs	r2, r7
   20d1e:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   20d20:	680a      	ldr	r2, [r1, #0]
   20d22:	e7cc      	b.n	20cbe <ev_setup_handler+0x11a>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
   20d24:	2280      	movs	r2, #128	; 0x80
   20d26:	e75c      	b.n	20be2 <ev_setup_handler+0x3e>
   20d28:	40027000 	.word	0x40027000
   20d2c:	20003ca0 	.word	0x20003ca0
   20d30:	20003c30 	.word	0x20003c30
   20d34:	20004758 	.word	0x20004758
   20d38:	20003dc4 	.word	0x20003dc4
   20d3c:	20003ca4 	.word	0x20003ca4
   20d40:	20003d34 	.word	0x20003d34
   20d44:	40027800 	.word	0x40027800
   20d48:	40027804 	.word	0x40027804

00020d4c <nrfx_usbd_irq_handler>:
{
   20d4c:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
   20d4e:	4b22      	ldr	r3, [pc, #136]	; (20dd8 <nrfx_usbd_irq_handler+0x8c>)
   20d50:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
   20d54:	2500      	movs	r5, #0
    while (to_process)
   20d56:	e006      	b.n	20d66 <nrfx_usbd_irq_handler+0x1a>
    return 32U;
   20d58:	2220      	movs	r2, #32
   20d5a:	e00b      	b.n	20d74 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
   20d5c:	2301      	movs	r3, #1
   20d5e:	fa03 f202 	lsl.w	r2, r3, r2
   20d62:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
   20d66:	b1c1      	cbz	r1, 20d9a <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   20d68:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
   20d6c:	2a00      	cmp	r2, #0
   20d6e:	d0f3      	beq.n	20d58 <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
   20d70:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
   20d74:	f102 0340 	add.w	r3, r2, #64	; 0x40
   20d78:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
   20d7a:	b29b      	uxth	r3, r3
   20d7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20d80:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
   20d84:	6818      	ldr	r0, [r3, #0]
    if (ret)
   20d86:	b110      	cbz	r0, 20d8e <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
   20d88:	2400      	movs	r4, #0
   20d8a:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
   20d8c:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
   20d8e:	2800      	cmp	r0, #0
   20d90:	d0e4      	beq.n	20d5c <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
   20d92:	2301      	movs	r3, #1
   20d94:	4093      	lsls	r3, r2
   20d96:	431d      	orrs	r5, r3
   20d98:	e7e0      	b.n	20d5c <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
   20d9a:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
   20d9e:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
   20da2:	e00a      	b.n	20dba <nrfx_usbd_irq_handler+0x6e>
   20da4:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
   20da8:	4b0c      	ldr	r3, [pc, #48]	; (20ddc <nrfx_usbd_irq_handler+0x90>)
   20daa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   20dae:	4798      	blx	r3
        active &= ~(1UL << event_nr);
   20db0:	2301      	movs	r3, #1
   20db2:	fa03 f404 	lsl.w	r4, r3, r4
   20db6:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
   20dba:	b12d      	cbz	r5, 20dc8 <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   20dbc:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
   20dc0:	2c00      	cmp	r4, #0
   20dc2:	d1ef      	bne.n	20da4 <nrfx_usbd_irq_handler+0x58>
    return 32U;
   20dc4:	2420      	movs	r4, #32
   20dc6:	e7ef      	b.n	20da8 <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
   20dc8:	f7ff fad8 	bl	2037c <usbd_dmareq_process>
    if (setup_active)
   20dcc:	b906      	cbnz	r6, 20dd0 <nrfx_usbd_irq_handler+0x84>
}
   20dce:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
   20dd0:	f7ff fee8 	bl	20ba4 <ev_setup_handler>
}
   20dd4:	e7fb      	b.n	20dce <nrfx_usbd_irq_handler+0x82>
   20dd6:	bf00      	nop
   20dd8:	40027000 	.word	0x40027000
   20ddc:	0002f0d0 	.word	0x0002f0d0

00020de0 <nrfx_usbd_ep_enable>:
{
   20de0:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   20de2:	b244      	sxtb	r4, r0
   20de4:	2c00      	cmp	r4, #0
   20de6:	db22      	blt.n	20e2e <nrfx_usbd_ep_enable+0x4e>
   20de8:	4b26      	ldr	r3, [pc, #152]	; (20e84 <nrfx_usbd_ep_enable+0xa4>)
   20dea:	f000 010f 	and.w	r1, r0, #15
   20dee:	5c5a      	ldrb	r2, [r3, r1]
   20df0:	2301      	movs	r3, #1
   20df2:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   20df4:	4a24      	ldr	r2, [pc, #144]	; (20e88 <nrfx_usbd_ep_enable+0xa8>)
   20df6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
   20dfa:	2c00      	cmp	r4, #0
   20dfc:	db19      	blt.n	20e32 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
   20dfe:	4b22      	ldr	r3, [pc, #136]	; (20e88 <nrfx_usbd_ep_enable+0xa8>)
   20e00:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
   20e04:	40cb      	lsrs	r3, r1
   20e06:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
   20e0a:	b97b      	cbnz	r3, 20e2c <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
   20e0c:	2c00      	cmp	r4, #0
   20e0e:	db16      	blt.n	20e3e <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
   20e10:	4d1d      	ldr	r5, [pc, #116]	; (20e88 <nrfx_usbd_ep_enable+0xa8>)
   20e12:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
   20e16:	2201      	movs	r2, #1
   20e18:	408a      	lsls	r2, r1
   20e1a:	4313      	orrs	r3, r2
   20e1c:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
   20e20:	b121      	cbz	r1, 20e2c <nrfx_usbd_ep_enable+0x4c>
   20e22:	2c00      	cmp	r4, #0
   20e24:	db02      	blt.n	20e2c <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
   20e26:	f010 0f08 	tst.w	r0, #8
   20e2a:	d011      	beq.n	20e50 <nrfx_usbd_ep_enable+0x70>
}
   20e2c:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   20e2e:	4b17      	ldr	r3, [pc, #92]	; (20e8c <nrfx_usbd_ep_enable+0xac>)
   20e30:	e7db      	b.n	20dea <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
   20e32:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   20e36:	40cb      	lsrs	r3, r1
   20e38:	f003 0301 	and.w	r3, r3, #1
   20e3c:	e7e5      	b.n	20e0a <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
   20e3e:	4d12      	ldr	r5, [pc, #72]	; (20e88 <nrfx_usbd_ep_enable+0xa8>)
   20e40:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
   20e44:	2201      	movs	r2, #1
   20e46:	408a      	lsls	r2, r1
   20e48:	4313      	orrs	r3, r2
   20e4a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
   20e4e:	e7e7      	b.n	20e20 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
   20e50:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e54:	f3ef 8511 	mrs	r5, BASEPRI
   20e58:	f383 8812 	msr	BASEPRI_MAX, r3
   20e5c:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
   20e60:	f7ff fe6e 	bl	20b40 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
   20e64:	f004 040f 	and.w	r4, r4, #15
   20e68:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20e6a:	2301      	movs	r3, #1
   20e6c:	fa03 f404 	lsl.w	r4, r3, r4
   20e70:	4a07      	ldr	r2, [pc, #28]	; (20e90 <nrfx_usbd_ep_enable+0xb0>)
   20e72:	6813      	ldr	r3, [r2, #0]
   20e74:	ea23 0304 	bic.w	r3, r3, r4
   20e78:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   20e7a:	f385 8811 	msr	BASEPRI, r5
   20e7e:	f3bf 8f6f 	isb	sy
}
   20e82:	e7d3      	b.n	20e2c <nrfx_usbd_ep_enable+0x4c>
   20e84:	0002f0b0 	.word	0x0002f0b0
   20e88:	40027000 	.word	0x40027000
   20e8c:	0002f090 	.word	0x0002f090
   20e90:	20003c30 	.word	0x20003c30

00020e94 <nrfx_usbd_ep_stall_clear>:
{
   20e94:	b510      	push	{r4, lr}
   20e96:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   20e98:	f010 0f80 	tst.w	r0, #128	; 0x80
   20e9c:	d003      	beq.n	20ea6 <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
   20e9e:	4b06      	ldr	r3, [pc, #24]	; (20eb8 <nrfx_usbd_ep_stall_clear+0x24>)
   20ea0:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
   20ea4:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
   20ea6:	f7ff fd8b 	bl	209c0 <nrfx_usbd_ep_stall_check>
   20eaa:	2800      	cmp	r0, #0
   20eac:	d0f7      	beq.n	20e9e <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
   20eae:	4620      	mov	r0, r4
   20eb0:	f7ff fe46 	bl	20b40 <nrfx_usbd_transfer_out_drop>
   20eb4:	e7f3      	b.n	20e9e <nrfx_usbd_ep_stall_clear+0xa>
   20eb6:	bf00      	nop
   20eb8:	40027000 	.word	0x40027000

00020ebc <usbd_ep_abort_all>:
{
   20ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
   20ebe:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
   20ec0:	4b59      	ldr	r3, [pc, #356]	; (21028 <usbd_ep_abort_all+0x16c>)
   20ec2:	885b      	ldrh	r3, [r3, #2]
   20ec4:	4a59      	ldr	r2, [pc, #356]	; (2102c <usbd_ep_abort_all+0x170>)
   20ec6:	6815      	ldr	r5, [r2, #0]
   20ec8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
   20ecc:	e016      	b.n	20efc <usbd_ep_abort_all+0x40>
   20ece:	2420      	movs	r4, #32
   20ed0:	e01f      	b.n	20f12 <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20ed2:	f044 0380 	orr.w	r3, r4, #128	; 0x80
   20ed6:	e01f      	b.n	20f18 <usbd_ep_abort_all+0x5c>
   20ed8:	f044 0080 	orr.w	r0, r4, #128	; 0x80
   20edc:	e024      	b.n	20f28 <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20ede:	4e54      	ldr	r6, [pc, #336]	; (21030 <usbd_ep_abort_all+0x174>)
   20ee0:	e02e      	b.n	20f40 <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
   20ee2:	f7ff fe2d 	bl	20b40 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
   20ee6:	2303      	movs	r3, #3
   20ee8:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
   20eea:	f387 8811 	msr	BASEPRI, r7
   20eee:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
   20ef2:	2301      	movs	r3, #1
   20ef4:	fa03 f404 	lsl.w	r4, r3, r4
   20ef8:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
   20efc:	2d00      	cmp	r5, #0
   20efe:	f000 808c 	beq.w	2101a <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   20f02:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
   20f06:	2c00      	cmp	r4, #0
   20f08:	d0e1      	beq.n	20ece <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
   20f0a:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20f0e:	2c0f      	cmp	r4, #15
   20f10:	d9df      	bls.n	20ed2 <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   20f12:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20f16:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
   20f18:	f013 0f08 	tst.w	r3, #8
   20f1c:	d1e9      	bne.n	20ef2 <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20f1e:	2c0f      	cmp	r4, #15
   20f20:	d9da      	bls.n	20ed8 <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
   20f22:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
   20f26:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   20f28:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f2c:	f3ef 8711 	mrs	r7, BASEPRI
   20f30:	f383 8812 	msr	BASEPRI_MAX, r3
   20f34:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20f38:	b243      	sxtb	r3, r0
   20f3a:	2b00      	cmp	r3, #0
   20f3c:	dbcf      	blt.n	20ede <usbd_ep_abort_all+0x22>
   20f3e:	4e3d      	ldr	r6, [pc, #244]	; (21034 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
   20f40:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   20f44:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   20f48:	2b00      	cmp	r3, #0
   20f4a:	db19      	blt.n	20f80 <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20f4c:	4a37      	ldr	r2, [pc, #220]	; (2102c <usbd_ep_abort_all+0x170>)
   20f4e:	6812      	ldr	r2, [r2, #0]
   20f50:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   20f52:	f003 030f 	and.w	r3, r3, #15
   20f56:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   20f58:	40da      	lsrs	r2, r3
   20f5a:	f012 0f01 	tst.w	r2, #1
   20f5e:	d1c0      	bne.n	20ee2 <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
   20f60:	2200      	movs	r2, #0
   20f62:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20f64:	2201      	movs	r2, #1
   20f66:	fa02 f303 	lsl.w	r3, r2, r3
   20f6a:	4930      	ldr	r1, [pc, #192]	; (2102c <usbd_ep_abort_all+0x170>)
   20f6c:	680a      	ldr	r2, [r1, #0]
   20f6e:	ea22 0203 	bic.w	r2, r2, r3
   20f72:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   20f74:	492c      	ldr	r1, [pc, #176]	; (21028 <usbd_ep_abort_all+0x16c>)
   20f76:	680a      	ldr	r2, [r1, #0]
   20f78:	ea22 0303 	bic.w	r3, r2, r3
   20f7c:	600b      	str	r3, [r1, #0]
   20f7e:	e7b2      	b.n	20ee6 <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
   20f80:	f010 0f08 	tst.w	r0, #8
   20f84:	d111      	bne.n	20faa <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
   20f86:	2880      	cmp	r0, #128	; 0x80
   20f88:	d037      	beq.n	20ffa <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   20f8a:	f202 32da 	addw	r2, r2, #986	; 0x3da
   20f8e:	0052      	lsls	r2, r2, #1
   20f90:	4929      	ldr	r1, [pc, #164]	; (21038 <usbd_ep_abort_all+0x17c>)
   20f92:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   20f94:	3104      	adds	r1, #4
   20f96:	680a      	ldr	r2, [r1, #0]
   20f98:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   20f9a:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   20f9e:	f8d1 c000 	ldr.w	ip, [r1]
   20fa2:	ea42 020c 	orr.w	r2, r2, ip
   20fa6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   20fa8:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   20faa:	4a1f      	ldr	r2, [pc, #124]	; (21028 <usbd_ep_abort_all+0x16c>)
   20fac:	6811      	ldr	r1, [r2, #0]
   20fae:	4a1f      	ldr	r2, [pc, #124]	; (2102c <usbd_ep_abort_all+0x170>)
   20fb0:	f8d2 c000 	ldr.w	ip, [r2]
   20fb4:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
   20fb8:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   20fbc:	2201      	movs	r2, #1
   20fbe:	fa02 f303 	lsl.w	r3, r2, r3
   20fc2:	ea1e 0f03 	tst.w	lr, r3
   20fc6:	d090      	beq.n	20eea <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   20fc8:	ea2c 0203 	bic.w	r2, ip, r3
   20fcc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 2102c <usbd_ep_abort_all+0x170>
   20fd0:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   20fd4:	430b      	orrs	r3, r1
   20fd6:	4a14      	ldr	r2, [pc, #80]	; (21028 <usbd_ep_abort_all+0x16c>)
   20fd8:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   20fda:	2300      	movs	r3, #0
   20fdc:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   20fde:	2303      	movs	r3, #3
   20fe0:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   20fe2:	2206      	movs	r2, #6
   20fe4:	f88d 2004 	strb.w	r2, [sp, #4]
   20fe8:	f88d 0006 	strb.w	r0, [sp, #6]
   20fec:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   20ff0:	4b12      	ldr	r3, [pc, #72]	; (2103c <usbd_ep_abort_all+0x180>)
   20ff2:	681b      	ldr	r3, [r3, #0]
   20ff4:	a801      	add	r0, sp, #4
   20ff6:	4798      	blx	r3
   20ff8:	e777      	b.n	20eea <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   20ffa:	4a0f      	ldr	r2, [pc, #60]	; (21038 <usbd_ep_abort_all+0x17c>)
   20ffc:	f240 71b4 	movw	r1, #1972	; 0x7b4
   21000:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   21002:	490f      	ldr	r1, [pc, #60]	; (21040 <usbd_ep_abort_all+0x184>)
   21004:	680a      	ldr	r2, [r1, #0]
   21006:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   21008:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2100c:	f8d1 c000 	ldr.w	ip, [r1]
   21010:	ea42 020c 	orr.w	r2, r2, ip
   21014:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   21016:	680a      	ldr	r2, [r1, #0]
   21018:	e7c7      	b.n	20faa <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
   2101a:	4b03      	ldr	r3, [pc, #12]	; (21028 <usbd_ep_abort_all+0x16c>)
   2101c:	f240 12ff 	movw	r2, #511	; 0x1ff
   21020:	601a      	str	r2, [r3, #0]
}
   21022:	b003      	add	sp, #12
   21024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21026:	bf00      	nop
   21028:	20003ca0 	.word	0x20003ca0
   2102c:	20003c30 	.word	0x20003c30
   21030:	20003d34 	.word	0x20003d34
   21034:	20003ca4 	.word	0x20003ca4
   21038:	40027800 	.word	0x40027800
   2103c:	20003dc4 	.word	0x20003dc4
   21040:	40027804 	.word	0x40027804

00021044 <nrfx_usbd_stop>:
{
   21044:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21046:	4b0c      	ldr	r3, [pc, #48]	; (21078 <nrfx_usbd_stop+0x34>)
   21048:	2280      	movs	r2, #128	; 0x80
   2104a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
   2104e:	2027      	movs	r0, #39	; 0x27
   21050:	f7f4 f89e 	bl	15190 <arch_irq_is_enabled>
   21054:	b900      	cbnz	r0, 21058 <nrfx_usbd_stop+0x14>
}
   21056:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
   21058:	f7ff ff30 	bl	20ebc <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
   2105c:	4c07      	ldr	r4, [pc, #28]	; (2107c <nrfx_usbd_stop+0x38>)
   2105e:	2300      	movs	r3, #0
   21060:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
   21064:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
   21068:	2027      	movs	r0, #39	; 0x27
   2106a:	f7f4 f87d 	bl	15168 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   2106e:	f04f 33ff 	mov.w	r3, #4294967295
   21072:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
   21076:	e7ee      	b.n	21056 <nrfx_usbd_stop+0x12>
   21078:	e000e100 	.word	0xe000e100
   2107c:	40027000 	.word	0x40027000

00021080 <nrfx_usbd_disable>:
{
   21080:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
   21082:	f7ff ffdf 	bl	21044 <nrfx_usbd_stop>
    return p_reg->INTENSET;
   21086:	4b0b      	ldr	r3, [pc, #44]	; (210b4 <nrfx_usbd_disable+0x34>)
   21088:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
   2108c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
   21090:	2200      	movs	r2, #0
   21092:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
   21096:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   2109a:	f7fe faff 	bl	1f69c <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
   2109e:	b110      	cbz	r0, 210a6 <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
   210a0:	4b05      	ldr	r3, [pc, #20]	; (210b8 <nrfx_usbd_disable+0x38>)
   210a2:	2200      	movs	r2, #0
   210a4:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
   210a6:	4b05      	ldr	r3, [pc, #20]	; (210bc <nrfx_usbd_disable+0x3c>)
   210a8:	2200      	movs	r2, #0
   210aa:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
   210ac:	4b04      	ldr	r3, [pc, #16]	; (210c0 <nrfx_usbd_disable+0x40>)
   210ae:	2201      	movs	r2, #1
   210b0:	701a      	strb	r2, [r3, #0]
}
   210b2:	bd08      	pop	{r3, pc}
   210b4:	40027000 	.word	0x40027000
   210b8:	40027c1c 	.word	0x40027c1c
   210bc:	20004756 	.word	0x20004756
   210c0:	20004757 	.word	0x20004757

000210c4 <nrfx_usbd_suspend>:
{
   210c4:	b538      	push	{r3, r4, r5, lr}
   210c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   210ca:	f3ef 8511 	mrs	r5, BASEPRI
   210ce:	f383 8812 	msr	BASEPRI_MAX, r3
   210d2:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
   210d6:	4b13      	ldr	r3, [pc, #76]	; (21124 <nrfx_usbd_suspend+0x60>)
   210d8:	781b      	ldrb	r3, [r3, #0]
   210da:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   210de:	b92b      	cbnz	r3, 210ec <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
   210e0:	f385 8811 	msr	BASEPRI, r5
   210e4:	f3bf 8f6f 	isb	sy
}
   210e8:	4620      	mov	r0, r4
   210ea:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
   210ec:	f7ff fee6 	bl	20ebc <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
   210f0:	4b0d      	ldr	r3, [pc, #52]	; (21128 <nrfx_usbd_suspend+0x64>)
   210f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
   210f6:	f413 7f00 	tst.w	r3, #512	; 0x200
   210fa:	d111      	bne.n	21120 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
   210fc:	4b0a      	ldr	r3, [pc, #40]	; (21128 <nrfx_usbd_suspend+0x64>)
   210fe:	2201      	movs	r2, #1
   21100:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   21104:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
   21108:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
   2110c:	f413 7f00 	tst.w	r3, #512	; 0x200
   21110:	d0e6      	beq.n	210e0 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
   21112:	4b05      	ldr	r3, [pc, #20]	; (21128 <nrfx_usbd_suspend+0x64>)
   21114:	2400      	movs	r4, #0
   21116:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
   2111a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
   2111e:	e7df      	b.n	210e0 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
   21120:	2400      	movs	r4, #0
   21122:	e7dd      	b.n	210e0 <nrfx_usbd_suspend+0x1c>
   21124:	20004755 	.word	0x20004755
   21128:	40027000 	.word	0x40027000

0002112c <nrfx_usbd_ep_abort>:
{
   2112c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2112e:	b083      	sub	sp, #12
	__asm__ volatile(
   21130:	f04f 0340 	mov.w	r3, #64	; 0x40
   21134:	f3ef 8511 	mrs	r5, BASEPRI
   21138:	f383 8812 	msr	BASEPRI_MAX, r3
   2113c:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   21140:	b243      	sxtb	r3, r0
   21142:	2b00      	cmp	r3, #0
   21144:	db27      	blt.n	21196 <nrfx_usbd_ep_abort+0x6a>
   21146:	4c39      	ldr	r4, [pc, #228]	; (2122c <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
   21148:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2114c:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   21150:	2b00      	cmp	r3, #0
   21152:	db25      	blt.n	211a0 <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   21154:	4a36      	ldr	r2, [pc, #216]	; (21230 <nrfx_usbd_ep_abort+0x104>)
   21156:	6812      	ldr	r2, [r2, #0]
   21158:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   2115a:	f003 030f 	and.w	r3, r3, #15
   2115e:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   21160:	40da      	lsrs	r2, r3
   21162:	f012 0f01 	tst.w	r2, #1
   21166:	d118      	bne.n	2119a <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
   21168:	2200      	movs	r2, #0
   2116a:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2116c:	2201      	movs	r2, #1
   2116e:	fa02 f303 	lsl.w	r3, r2, r3
   21172:	492f      	ldr	r1, [pc, #188]	; (21230 <nrfx_usbd_ep_abort+0x104>)
   21174:	680a      	ldr	r2, [r1, #0]
   21176:	ea22 0203 	bic.w	r2, r2, r3
   2117a:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2117c:	492d      	ldr	r1, [pc, #180]	; (21234 <nrfx_usbd_ep_abort+0x108>)
   2117e:	680a      	ldr	r2, [r1, #0]
   21180:	ea22 0303 	bic.w	r3, r2, r3
   21184:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   21186:	2303      	movs	r3, #3
   21188:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
   2118a:	f385 8811 	msr	BASEPRI, r5
   2118e:	f3bf 8f6f 	isb	sy
}
   21192:	b003      	add	sp, #12
   21194:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   21196:	4c28      	ldr	r4, [pc, #160]	; (21238 <nrfx_usbd_ep_abort+0x10c>)
   21198:	e7d6      	b.n	21148 <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
   2119a:	f7ff fcd1 	bl	20b40 <nrfx_usbd_transfer_out_drop>
   2119e:	e7f2      	b.n	21186 <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
   211a0:	f010 0f08 	tst.w	r0, #8
   211a4:	d10f      	bne.n	211c6 <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
   211a6:	2880      	cmp	r0, #128	; 0x80
   211a8:	d031      	beq.n	2120e <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   211aa:	f202 32da 	addw	r2, r2, #986	; 0x3da
   211ae:	0052      	lsls	r2, r2, #1
   211b0:	4922      	ldr	r1, [pc, #136]	; (2123c <nrfx_usbd_ep_abort+0x110>)
   211b2:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   211b4:	3104      	adds	r1, #4
   211b6:	680a      	ldr	r2, [r1, #0]
   211b8:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   211ba:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   211be:	680e      	ldr	r6, [r1, #0]
   211c0:	4332      	orrs	r2, r6
   211c2:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   211c4:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   211c6:	4a1b      	ldr	r2, [pc, #108]	; (21234 <nrfx_usbd_ep_abort+0x108>)
   211c8:	6811      	ldr	r1, [r2, #0]
   211ca:	4a19      	ldr	r2, [pc, #100]	; (21230 <nrfx_usbd_ep_abort+0x104>)
   211cc:	6816      	ldr	r6, [r2, #0]
   211ce:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
   211d2:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   211d6:	2201      	movs	r2, #1
   211d8:	fa02 f303 	lsl.w	r3, r2, r3
   211dc:	421f      	tst	r7, r3
   211de:	d0d4      	beq.n	2118a <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   211e0:	ea26 0603 	bic.w	r6, r6, r3
   211e4:	4a12      	ldr	r2, [pc, #72]	; (21230 <nrfx_usbd_ep_abort+0x104>)
   211e6:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   211e8:	430b      	orrs	r3, r1
   211ea:	4a12      	ldr	r2, [pc, #72]	; (21234 <nrfx_usbd_ep_abort+0x108>)
   211ec:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   211ee:	2300      	movs	r3, #0
   211f0:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   211f2:	2303      	movs	r3, #3
   211f4:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   211f6:	2206      	movs	r2, #6
   211f8:	f88d 2004 	strb.w	r2, [sp, #4]
   211fc:	f88d 0006 	strb.w	r0, [sp, #6]
   21200:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   21204:	4b0e      	ldr	r3, [pc, #56]	; (21240 <nrfx_usbd_ep_abort+0x114>)
   21206:	681b      	ldr	r3, [r3, #0]
   21208:	a801      	add	r0, sp, #4
   2120a:	4798      	blx	r3
   2120c:	e7bd      	b.n	2118a <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   2120e:	4a0b      	ldr	r2, [pc, #44]	; (2123c <nrfx_usbd_ep_abort+0x110>)
   21210:	f240 71b4 	movw	r1, #1972	; 0x7b4
   21214:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   21216:	490b      	ldr	r1, [pc, #44]	; (21244 <nrfx_usbd_ep_abort+0x118>)
   21218:	680a      	ldr	r2, [r1, #0]
   2121a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   2121c:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   21220:	680e      	ldr	r6, [r1, #0]
   21222:	4332      	orrs	r2, r6
   21224:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   21226:	680a      	ldr	r2, [r1, #0]
   21228:	e7cd      	b.n	211c6 <nrfx_usbd_ep_abort+0x9a>
   2122a:	bf00      	nop
   2122c:	20003ca4 	.word	0x20003ca4
   21230:	20003c30 	.word	0x20003c30
   21234:	20003ca0 	.word	0x20003ca0
   21238:	20003d34 	.word	0x20003d34
   2123c:	40027800 	.word	0x40027800
   21240:	20003dc4 	.word	0x20003dc4
   21244:	40027804 	.word	0x40027804

00021248 <nrfx_usbd_ep_disable>:
{
   21248:	b5f0      	push	{r4, r5, r6, r7, lr}
   2124a:	b083      	sub	sp, #12
   2124c:	4604      	mov	r4, r0
	__asm__ volatile(
   2124e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21252:	f3ef 8611 	mrs	r6, BASEPRI
   21256:	f383 8812 	msr	BASEPRI_MAX, r3
   2125a:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2125e:	b243      	sxtb	r3, r0
   21260:	2b00      	cmp	r3, #0
   21262:	db3e      	blt.n	212e2 <nrfx_usbd_ep_disable+0x9a>
   21264:	4d4a      	ldr	r5, [pc, #296]	; (21390 <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
   21266:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   2126a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
   2126e:	2b00      	cmp	r3, #0
   21270:	db3d      	blt.n	212ee <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   21272:	4a48      	ldr	r2, [pc, #288]	; (21394 <nrfx_usbd_ep_disable+0x14c>)
   21274:	6812      	ldr	r2, [r2, #0]
   21276:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
   21278:	f003 030f 	and.w	r3, r3, #15
   2127c:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
   2127e:	40da      	lsrs	r2, r3
   21280:	f012 0f01 	tst.w	r2, #1
   21284:	d12f      	bne.n	212e6 <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
   21286:	2200      	movs	r2, #0
   21288:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2128a:	2201      	movs	r2, #1
   2128c:	fa02 f303 	lsl.w	r3, r2, r3
   21290:	4940      	ldr	r1, [pc, #256]	; (21394 <nrfx_usbd_ep_disable+0x14c>)
   21292:	680a      	ldr	r2, [r1, #0]
   21294:	ea22 0203 	bic.w	r2, r2, r3
   21298:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
   2129a:	493f      	ldr	r1, [pc, #252]	; (21398 <nrfx_usbd_ep_disable+0x150>)
   2129c:	680a      	ldr	r2, [r1, #0]
   2129e:	ea22 0303 	bic.w	r3, r2, r3
   212a2:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
   212a4:	2303      	movs	r3, #3
   212a6:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
   212a8:	f386 8811 	msr	BASEPRI, r6
   212ac:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
   212b0:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
   212b4:	b264      	sxtb	r4, r4
   212b6:	2c00      	cmp	r4, #0
   212b8:	db5e      	blt.n	21378 <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
   212ba:	4838      	ldr	r0, [pc, #224]	; (2139c <nrfx_usbd_ep_disable+0x154>)
   212bc:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
   212c0:	2101      	movs	r1, #1
   212c2:	4099      	lsls	r1, r3
   212c4:	ea22 0201 	bic.w	r2, r2, r1
   212c8:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   212cc:	2c00      	cmp	r4, #0
   212ce:	db5d      	blt.n	2138c <nrfx_usbd_ep_disable+0x144>
   212d0:	4a33      	ldr	r2, [pc, #204]	; (213a0 <nrfx_usbd_ep_disable+0x158>)
   212d2:	5cd2      	ldrb	r2, [r2, r3]
   212d4:	2301      	movs	r3, #1
   212d6:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
   212d8:	4a30      	ldr	r2, [pc, #192]	; (2139c <nrfx_usbd_ep_disable+0x154>)
   212da:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
   212de:	b003      	add	sp, #12
   212e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
   212e2:	4d30      	ldr	r5, [pc, #192]	; (213a4 <nrfx_usbd_ep_disable+0x15c>)
   212e4:	e7bf      	b.n	21266 <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
   212e6:	4620      	mov	r0, r4
   212e8:	f7ff fc2a 	bl	20b40 <nrfx_usbd_transfer_out_drop>
   212ec:	e7da      	b.n	212a4 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
   212ee:	f014 0f08 	tst.w	r4, #8
   212f2:	d10f      	bne.n	21314 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
   212f4:	2c80      	cmp	r4, #128	; 0x80
   212f6:	d031      	beq.n	2135c <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
   212f8:	f202 32da 	addw	r2, r2, #986	; 0x3da
   212fc:	0052      	lsls	r2, r2, #1
   212fe:	492a      	ldr	r1, [pc, #168]	; (213a8 <nrfx_usbd_ep_disable+0x160>)
   21300:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   21302:	3104      	adds	r1, #4
   21304:	680a      	ldr	r2, [r1, #0]
   21306:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
   21308:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2130c:	6808      	ldr	r0, [r1, #0]
   2130e:	4302      	orrs	r2, r0
   21310:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   21312:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   21314:	4a20      	ldr	r2, [pc, #128]	; (21398 <nrfx_usbd_ep_disable+0x150>)
   21316:	6811      	ldr	r1, [r2, #0]
   21318:	4a1e      	ldr	r2, [pc, #120]	; (21394 <nrfx_usbd_ep_disable+0x14c>)
   2131a:	6810      	ldr	r0, [r2, #0]
   2131c:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
   21320:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
   21324:	2201      	movs	r2, #1
   21326:	fa02 f303 	lsl.w	r3, r2, r3
   2132a:	421f      	tst	r7, r3
   2132c:	d0bc      	beq.n	212a8 <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
   2132e:	ea20 0003 	bic.w	r0, r0, r3
   21332:	4a18      	ldr	r2, [pc, #96]	; (21394 <nrfx_usbd_ep_disable+0x14c>)
   21334:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
   21336:	430b      	orrs	r3, r1
   21338:	4a17      	ldr	r2, [pc, #92]	; (21398 <nrfx_usbd_ep_disable+0x150>)
   2133a:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
   2133c:	2300      	movs	r3, #0
   2133e:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
   21340:	2303      	movs	r3, #3
   21342:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
   21344:	2206      	movs	r2, #6
   21346:	f88d 2004 	strb.w	r2, [sp, #4]
   2134a:	f88d 4006 	strb.w	r4, [sp, #6]
   2134e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
   21352:	4b16      	ldr	r3, [pc, #88]	; (213ac <nrfx_usbd_ep_disable+0x164>)
   21354:	681b      	ldr	r3, [r3, #0]
   21356:	a801      	add	r0, sp, #4
   21358:	4798      	blx	r3
   2135a:	e7a5      	b.n	212a8 <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
   2135c:	4a12      	ldr	r2, [pc, #72]	; (213a8 <nrfx_usbd_ep_disable+0x160>)
   2135e:	f240 71b4 	movw	r1, #1972	; 0x7b4
   21362:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
   21364:	4912      	ldr	r1, [pc, #72]	; (213b0 <nrfx_usbd_ep_disable+0x168>)
   21366:	680a      	ldr	r2, [r1, #0]
   21368:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
   2136a:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
   2136e:	6808      	ldr	r0, [r1, #0]
   21370:	4302      	orrs	r2, r0
   21372:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
   21374:	680a      	ldr	r2, [r1, #0]
   21376:	e7cd      	b.n	21314 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
   21378:	4808      	ldr	r0, [pc, #32]	; (2139c <nrfx_usbd_ep_disable+0x154>)
   2137a:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
   2137e:	2101      	movs	r1, #1
   21380:	4099      	lsls	r1, r3
   21382:	ea22 0201 	bic.w	r2, r2, r1
   21386:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
   2138a:	e79f      	b.n	212cc <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
   2138c:	4a09      	ldr	r2, [pc, #36]	; (213b4 <nrfx_usbd_ep_disable+0x16c>)
   2138e:	e7a0      	b.n	212d2 <nrfx_usbd_ep_disable+0x8a>
   21390:	20003ca4 	.word	0x20003ca4
   21394:	20003c30 	.word	0x20003c30
   21398:	20003ca0 	.word	0x20003ca0
   2139c:	40027000 	.word	0x40027000
   213a0:	0002f0b0 	.word	0x0002f0b0
   213a4:	20003d34 	.word	0x20003d34
   213a8:	40027800 	.word	0x40027800
   213ac:	20003dc4 	.word	0x20003dc4
   213b0:	40027804 	.word	0x40027804
   213b4:	0002f090 	.word	0x0002f090

000213b8 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
   213b8:	4b03      	ldr	r3, [pc, #12]	; (213c8 <z_device_state_init+0x10>)

	while (dev < __device_end) {
   213ba:	4a04      	ldr	r2, [pc, #16]	; (213cc <z_device_state_init+0x14>)
   213bc:	4293      	cmp	r3, r2
   213be:	d201      	bcs.n	213c4 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
   213c0:	3318      	adds	r3, #24
   213c2:	e7fa      	b.n	213ba <z_device_state_init+0x2>
	}
}
   213c4:	4770      	bx	lr
   213c6:	bf00      	nop
   213c8:	0002c388 	.word	0x0002c388
   213cc:	0002c448 	.word	0x0002c448

000213d0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   213d0:	b570      	push	{r4, r5, r6, lr}
   213d2:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   213d4:	4b11      	ldr	r3, [pc, #68]	; (2141c <z_sys_init_run_level+0x4c>)
   213d6:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   213da:	e009      	b.n	213f0 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
   213dc:	4240      	negs	r0, r0
   213de:	e017      	b.n	21410 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
   213e0:	68eb      	ldr	r3, [r5, #12]
   213e2:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
   213e4:	68ea      	ldr	r2, [r5, #12]
   213e6:	7853      	ldrb	r3, [r2, #1]
   213e8:	f043 0301 	orr.w	r3, r3, #1
   213ec:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   213ee:	3408      	adds	r4, #8
   213f0:	1c73      	adds	r3, r6, #1
   213f2:	4a0a      	ldr	r2, [pc, #40]	; (2141c <z_sys_init_run_level+0x4c>)
   213f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   213f8:	42a3      	cmp	r3, r4
   213fa:	d90d      	bls.n	21418 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
   213fc:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
   213fe:	6823      	ldr	r3, [r4, #0]
   21400:	4628      	mov	r0, r5
   21402:	4798      	blx	r3
		if (dev != NULL) {
   21404:	2d00      	cmp	r5, #0
   21406:	d0f2      	beq.n	213ee <z_sys_init_run_level+0x1e>
			if (rc != 0) {
   21408:	2800      	cmp	r0, #0
   2140a:	d0eb      	beq.n	213e4 <z_sys_init_run_level+0x14>
				if (rc < 0) {
   2140c:	2800      	cmp	r0, #0
   2140e:	dbe5      	blt.n	213dc <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
   21410:	28ff      	cmp	r0, #255	; 0xff
   21412:	dde5      	ble.n	213e0 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
   21414:	20ff      	movs	r0, #255	; 0xff
   21416:	e7e3      	b.n	213e0 <z_sys_init_run_level+0x10>
		}
	}
}
   21418:	bd70      	pop	{r4, r5, r6, pc}
   2141a:	bf00      	nop
   2141c:	0002f134 	.word	0x0002f134

00021420 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   21420:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   21422:	4605      	mov	r5, r0
   21424:	b328      	cbz	r0, 21472 <z_impl_device_get_binding+0x52>
   21426:	7803      	ldrb	r3, [r0, #0]
   21428:	b32b      	cbz	r3, 21476 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   2142a:	4c14      	ldr	r4, [pc, #80]	; (2147c <z_impl_device_get_binding+0x5c>)
   2142c:	e000      	b.n	21430 <z_impl_device_get_binding+0x10>
   2142e:	3418      	adds	r4, #24
   21430:	4b13      	ldr	r3, [pc, #76]	; (21480 <z_impl_device_get_binding+0x60>)
   21432:	429c      	cmp	r4, r3
   21434:	d008      	beq.n	21448 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
   21436:	4620      	mov	r0, r4
   21438:	f00a f8a4 	bl	2b584 <z_device_ready>
   2143c:	2800      	cmp	r0, #0
   2143e:	d0f6      	beq.n	2142e <z_impl_device_get_binding+0xe>
   21440:	6823      	ldr	r3, [r4, #0]
   21442:	42ab      	cmp	r3, r5
   21444:	d1f3      	bne.n	2142e <z_impl_device_get_binding+0xe>
   21446:	e012      	b.n	2146e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   21448:	4c0c      	ldr	r4, [pc, #48]	; (2147c <z_impl_device_get_binding+0x5c>)
   2144a:	e000      	b.n	2144e <z_impl_device_get_binding+0x2e>
   2144c:	3418      	adds	r4, #24
   2144e:	4b0c      	ldr	r3, [pc, #48]	; (21480 <z_impl_device_get_binding+0x60>)
   21450:	429c      	cmp	r4, r3
   21452:	d00b      	beq.n	2146c <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21454:	4620      	mov	r0, r4
   21456:	f00a f895 	bl	2b584 <z_device_ready>
   2145a:	2800      	cmp	r0, #0
   2145c:	d0f6      	beq.n	2144c <z_impl_device_get_binding+0x2c>
   2145e:	6821      	ldr	r1, [r4, #0]
   21460:	4628      	mov	r0, r5
   21462:	f006 fbbe 	bl	27be2 <strcmp>
   21466:	2800      	cmp	r0, #0
   21468:	d1f0      	bne.n	2144c <z_impl_device_get_binding+0x2c>
   2146a:	e000      	b.n	2146e <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
   2146c:	2400      	movs	r4, #0
}
   2146e:	4620      	mov	r0, r4
   21470:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   21472:	4604      	mov	r4, r0
   21474:	e7fb      	b.n	2146e <z_impl_device_get_binding+0x4e>
   21476:	2400      	movs	r4, #0
   21478:	e7f9      	b.n	2146e <z_impl_device_get_binding+0x4e>
   2147a:	bf00      	nop
   2147c:	0002c388 	.word	0x0002c388
   21480:	0002c448 	.word	0x0002c448

00021484 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
   21484:	2804      	cmp	r0, #4
   21486:	d80c      	bhi.n	214a2 <reason_to_str+0x1e>
   21488:	e8df f000 	tbb	[pc, r0]
   2148c:	07050d03 	.word	0x07050d03
   21490:	09          	.byte	0x09
   21491:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
   21492:	4806      	ldr	r0, [pc, #24]	; (214ac <reason_to_str+0x28>)
   21494:	4770      	bx	lr
		return "Stack overflow";
   21496:	4806      	ldr	r0, [pc, #24]	; (214b0 <reason_to_str+0x2c>)
   21498:	4770      	bx	lr
		return "Kernel oops";
   2149a:	4806      	ldr	r0, [pc, #24]	; (214b4 <reason_to_str+0x30>)
   2149c:	4770      	bx	lr
		return "Kernel panic";
   2149e:	4806      	ldr	r0, [pc, #24]	; (214b8 <reason_to_str+0x34>)
   214a0:	4770      	bx	lr
	default:
		return "Unknown error";
   214a2:	4806      	ldr	r0, [pc, #24]	; (214bc <reason_to_str+0x38>)
   214a4:	4770      	bx	lr
		return "Unhandled interrupt";
   214a6:	4806      	ldr	r0, [pc, #24]	; (214c0 <reason_to_str+0x3c>)
	}
}
   214a8:	4770      	bx	lr
   214aa:	bf00      	nop
   214ac:	0002f19c 	.word	0x0002f19c
   214b0:	0002f170 	.word	0x0002f170
   214b4:	0002f180 	.word	0x0002f180
   214b8:	0002f18c 	.word	0x0002f18c
   214bc:	0002f14c 	.word	0x0002f14c
   214c0:	0002f15c 	.word	0x0002f15c

000214c4 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   214c4:	b130      	cbz	r0, 214d4 <thread_name_get+0x10>
{
   214c6:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   214c8:	f00a f942 	bl	2b750 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   214cc:	b120      	cbz	r0, 214d8 <thread_name_get+0x14>
   214ce:	7803      	ldrb	r3, [r0, #0]
   214d0:	b123      	cbz	r3, 214dc <thread_name_get+0x18>
}
   214d2:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
   214d4:	4802      	ldr	r0, [pc, #8]	; (214e0 <thread_name_get+0x1c>)
}
   214d6:	4770      	bx	lr
		thread_name = "unknown";
   214d8:	4801      	ldr	r0, [pc, #4]	; (214e0 <thread_name_get+0x1c>)
   214da:	e7fa      	b.n	214d2 <thread_name_get+0xe>
   214dc:	4800      	ldr	r0, [pc, #0]	; (214e0 <thread_name_get+0x1c>)
	return thread_name;
   214de:	e7f8      	b.n	214d2 <thread_name_get+0xe>
   214e0:	0002d8d0 	.word	0x0002d8d0

000214e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   214e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214e8:	b082      	sub	sp, #8
   214ea:	4605      	mov	r5, r0
   214ec:	460e      	mov	r6, r1
	__asm__ volatile(
   214ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   214f2:	f3ef 8711 	mrs	r7, BASEPRI
   214f6:	f383 8812 	msr	BASEPRI_MAX, r3
   214fa:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   214fe:	f001 f99d 	bl	2283c <z_impl_z_current_get>
   21502:	4604      	mov	r4, r0
   21504:	4b29      	ldr	r3, [pc, #164]	; (215ac <z_fatal_error+0xc8>)
   21506:	4a2a      	ldr	r2, [pc, #168]	; (215b0 <z_fatal_error+0xcc>)
   21508:	1a9b      	subs	r3, r3, r2
   2150a:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2150c:	f04f 0800 	mov.w	r8, #0
   21510:	2201      	movs	r2, #1
   21512:	f362 0802 	bfi	r8, r2, #0, #3
   21516:	f36f 08c5 	bfc	r8, #3, #3
   2151a:	f363 188f 	bfi	r8, r3, #6, #10
   2151e:	4628      	mov	r0, r5
   21520:	f7ff ffb0 	bl	21484 <reason_to_str>
   21524:	4602      	mov	r2, r0
   21526:	f8ad 8000 	strh.w	r8, [sp]
   2152a:	2300      	movs	r3, #0
   2152c:	4629      	mov	r1, r5
   2152e:	4821      	ldr	r0, [pc, #132]	; (215b4 <z_fatal_error+0xd0>)
   21530:	f7f0 fc88 	bl	11e44 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21534:	b11e      	cbz	r6, 2153e <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21536:	69f3      	ldr	r3, [r6, #28]
   21538:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2153c:	bb2b      	cbnz	r3, 2158a <z_fatal_error+0xa6>
   2153e:	4b1b      	ldr	r3, [pc, #108]	; (215ac <z_fatal_error+0xc8>)
   21540:	4a1b      	ldr	r2, [pc, #108]	; (215b0 <z_fatal_error+0xcc>)
   21542:	1a9b      	subs	r3, r3, r2
   21544:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21546:	f04f 0800 	mov.w	r8, #0
   2154a:	2201      	movs	r2, #1
   2154c:	f362 0802 	bfi	r8, r2, #0, #3
   21550:	f36f 08c5 	bfc	r8, #3, #3
   21554:	f363 188f 	bfi	r8, r3, #6, #10
   21558:	4620      	mov	r0, r4
   2155a:	f7ff ffb3 	bl	214c4 <thread_name_get>
   2155e:	f7f0 fb35 	bl	11bcc <z_log_strdup>
   21562:	4602      	mov	r2, r0
   21564:	4643      	mov	r3, r8
   21566:	4621      	mov	r1, r4
   21568:	4813      	ldr	r0, [pc, #76]	; (215b8 <z_fatal_error+0xd4>)
   2156a:	f7f0 fcdf 	bl	11f2c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2156e:	4631      	mov	r1, r6
   21570:	4628      	mov	r0, r5
   21572:	f7fd f9f7 	bl	1e964 <k_sys_fatal_error_handler>
	__asm__ volatile(
   21576:	f387 8811 	msr	BASEPRI, r7
   2157a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2157e:	4620      	mov	r0, r4
   21580:	f7f4 fb8c 	bl	15c9c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   21584:	b002      	add	sp, #8
   21586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2158a:	4b08      	ldr	r3, [pc, #32]	; (215ac <z_fatal_error+0xc8>)
   2158c:	4a08      	ldr	r2, [pc, #32]	; (215b0 <z_fatal_error+0xcc>)
   2158e:	1a9b      	subs	r3, r3, r2
   21590:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
   21592:	f04f 0100 	mov.w	r1, #0
   21596:	2201      	movs	r2, #1
   21598:	f362 0102 	bfi	r1, r2, #0, #3
   2159c:	f36f 01c5 	bfc	r1, #3, #3
   215a0:	f363 118f 	bfi	r1, r3, #6, #10
   215a4:	4805      	ldr	r0, [pc, #20]	; (215bc <z_fatal_error+0xd8>)
   215a6:	f7f0 fd41 	bl	1202c <log_0>
   215aa:	e7c8      	b.n	2153e <z_fatal_error+0x5a>
   215ac:	0002c698 	.word	0x0002c698
   215b0:	0002c610 	.word	0x0002c610
   215b4:	0002f1ac 	.word	0x0002f1ac
   215b8:	0002f1f8 	.word	0x0002f1f8
   215bc:	0002f1d4 	.word	0x0002f1d4

000215c0 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   215c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   215c2:	b089      	sub	sp, #36	; 0x24
   215c4:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
   215c6:	4b15      	ldr	r3, [pc, #84]	; (2161c <init_idle_thread+0x5c>)
   215c8:	25b8      	movs	r5, #184	; 0xb8
   215ca:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
   215ce:	4b14      	ldr	r3, [pc, #80]	; (21620 <init_idle_thread+0x60>)
   215d0:	f44f 76b0 	mov.w	r6, #352	; 0x160
   215d4:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   215d8:	af06      	add	r7, sp, #24
   215da:	4603      	mov	r3, r0
   215dc:	4a11      	ldr	r2, [pc, #68]	; (21624 <init_idle_thread+0x64>)
   215de:	2108      	movs	r1, #8
   215e0:	4638      	mov	r0, r7
   215e2:	f004 fb45 	bl	25c70 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   215e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   215ea:	480f      	ldr	r0, [pc, #60]	; (21628 <init_idle_thread+0x68>)
   215ec:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
   215f0:	9705      	str	r7, [sp, #20]
   215f2:	2301      	movs	r3, #1
   215f4:	9304      	str	r3, [sp, #16]
   215f6:	230f      	movs	r3, #15
   215f8:	9303      	str	r3, [sp, #12]
   215fa:	2300      	movs	r3, #0
   215fc:	9302      	str	r3, [sp, #8]
   215fe:	9301      	str	r3, [sp, #4]
   21600:	9400      	str	r4, [sp, #0]
   21602:	4b0a      	ldr	r3, [pc, #40]	; (2162c <init_idle_thread+0x6c>)
   21604:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21608:	4631      	mov	r1, r6
   2160a:	4628      	mov	r0, r5
   2160c:	f000 f96e 	bl	218ec <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21610:	7b6b      	ldrb	r3, [r5, #13]
   21612:	f023 0304 	bic.w	r3, r3, #4
   21616:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   21618:	b009      	add	sp, #36	; 0x24
   2161a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2161c:	20002078 	.word	0x20002078
   21620:	20006f20 	.word	0x20006f20
   21624:	0002f210 	.word	0x0002f210
   21628:	20003e08 	.word	0x20003e08
   2162c:	0002b7c3 	.word	0x0002b7c3

00021630 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
   21630:	b570      	push	{r4, r5, r6, lr}
   21632:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
   21634:	f001 f834 	bl	226a0 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
   21638:	4d1b      	ldr	r5, [pc, #108]	; (216a8 <prepare_multithreading+0x78>)
   2163a:	4b1c      	ldr	r3, [pc, #112]	; (216ac <prepare_multithreading+0x7c>)
   2163c:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2163e:	4b1c      	ldr	r3, [pc, #112]	; (216b0 <prepare_multithreading+0x80>)
   21640:	9305      	str	r3, [sp, #20]
   21642:	2301      	movs	r3, #1
   21644:	9304      	str	r3, [sp, #16]
   21646:	2400      	movs	r4, #0
   21648:	9403      	str	r4, [sp, #12]
   2164a:	9402      	str	r4, [sp, #8]
   2164c:	9401      	str	r4, [sp, #4]
   2164e:	9400      	str	r4, [sp, #0]
   21650:	4b18      	ldr	r3, [pc, #96]	; (216b4 <prepare_multithreading+0x84>)
   21652:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21656:	4918      	ldr	r1, [pc, #96]	; (216b8 <prepare_multithreading+0x88>)
   21658:	4628      	mov	r0, r5
   2165a:	f000 f947 	bl	218ec <z_setup_new_thread>
   2165e:	4606      	mov	r6, r0
   21660:	7b6b      	ldrb	r3, [r5, #13]
   21662:	f023 0304 	bic.w	r3, r3, #4
   21666:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
   21668:	4628      	mov	r0, r5
   2166a:	f00a fb62 	bl	2bd32 <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   2166e:	2c00      	cmp	r4, #0
   21670:	dd02      	ble.n	21678 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
   21672:	4630      	mov	r0, r6
   21674:	b006      	add	sp, #24
   21676:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
   21678:	4620      	mov	r0, r4
   2167a:	f7ff ffa1 	bl	215c0 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2167e:	4b0f      	ldr	r3, [pc, #60]	; (216bc <prepare_multithreading+0x8c>)
   21680:	22b8      	movs	r2, #184	; 0xb8
   21682:	fb02 3204 	mla	r2, r2, r4, r3
   21686:	eb04 0144 	add.w	r1, r4, r4, lsl #1
   2168a:	4b08      	ldr	r3, [pc, #32]	; (216ac <prepare_multithreading+0x7c>)
   2168c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   21690:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
   21692:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
   21694:	eb04 1184 	add.w	r1, r4, r4, lsl #6
   21698:	4a09      	ldr	r2, [pc, #36]	; (216c0 <prepare_multithreading+0x90>)
   2169a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
   2169e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
   216a2:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
   216a4:	3401      	adds	r4, #1
   216a6:	e7e2      	b.n	2166e <prepare_multithreading+0x3e>
   216a8:	20002130 	.word	0x20002130
   216ac:	20003e08 	.word	0x20003e08
   216b0:	0002f21c 	.word	0x0002f21c
   216b4:	000216c5 	.word	0x000216c5
   216b8:	20006700 	.word	0x20006700
   216bc:	20002078 	.word	0x20002078
   216c0:	20007080 	.word	0x20007080

000216c4 <bg_thread_main>:
{
   216c4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   216c6:	4b0a      	ldr	r3, [pc, #40]	; (216f0 <bg_thread_main+0x2c>)
   216c8:	2201      	movs	r2, #1
   216ca:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   216cc:	2002      	movs	r0, #2
   216ce:	f7ff fe7f 	bl	213d0 <z_sys_init_run_level>
	boot_banner();
   216d2:	f001 fe1d 	bl	23310 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   216d6:	2003      	movs	r0, #3
   216d8:	f7ff fe7a 	bl	213d0 <z_sys_init_run_level>
	z_init_static_threads();
   216dc:	f000 f96a 	bl	219b4 <z_init_static_threads>
	main();
   216e0:	f7ef fb08 	bl	10cf4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   216e4:	4a03      	ldr	r2, [pc, #12]	; (216f4 <bg_thread_main+0x30>)
   216e6:	7b13      	ldrb	r3, [r2, #12]
   216e8:	f023 0301 	bic.w	r3, r3, #1
   216ec:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   216ee:	bd08      	pop	{r3, pc}
   216f0:	20004759 	.word	0x20004759
   216f4:	20002130 	.word	0x20002130

000216f8 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
   216f8:	b508      	push	{r3, lr}
   216fa:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   216fc:	4a01      	ldr	r2, [pc, #4]	; (21704 <switch_to_main_thread+0xc>)
   216fe:	4802      	ldr	r0, [pc, #8]	; (21708 <switch_to_main_thread+0x10>)
   21700:	f7f3 fe46 	bl	15390 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21704:	000216c5 	.word	0x000216c5
   21708:	20002130 	.word	0x20002130

0002170c <z_bss_zero>:
{
   2170c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2170e:	4803      	ldr	r0, [pc, #12]	; (2171c <z_bss_zero+0x10>)
   21710:	4a03      	ldr	r2, [pc, #12]	; (21720 <z_bss_zero+0x14>)
   21712:	1a12      	subs	r2, r2, r0
   21714:	2100      	movs	r1, #0
   21716:	f006 fabf 	bl	27c98 <memset>
}
   2171a:	bd08      	pop	{r3, pc}
   2171c:	20000a78 	.word	0x20000a78
   21720:	20004918 	.word	0x20004918

00021724 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21724:	b500      	push	{lr}
   21726:	b0af      	sub	sp, #188	; 0xbc
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   21728:	f7f0 f972 	bl	11a10 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2172c:	4b1d      	ldr	r3, [pc, #116]	; (217a4 <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   2172e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21732:	4c1d      	ldr	r4, [pc, #116]	; (217a8 <z_cstart+0x84>)
   21734:	6963      	ldr	r3, [r4, #20]
   21736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2173a:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   2173c:	23e0      	movs	r3, #224	; 0xe0
   2173e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   21742:	2320      	movs	r3, #32
   21744:	77e3      	strb	r3, [r4, #31]
   21746:	2500      	movs	r5, #0
   21748:	7625      	strb	r5, [r4, #24]
   2174a:	7665      	strb	r5, [r4, #25]
   2174c:	76a5      	strb	r5, [r4, #26]
   2174e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21752:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21754:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21758:	6263      	str	r3, [r4, #36]	; 0x24
   2175a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   2175e:	f7f4 fa0d 	bl	15b7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21762:	f7f3 fc85 	bl	15070 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21766:	f04f 33ff 	mov.w	r3, #4294967295
   2176a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2176c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   2176e:	f7f4 fb71 	bl	15e54 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21772:	f7f4 faa9 	bl	15cc8 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
   21776:	2401      	movs	r4, #1
   21778:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   2177c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
   21780:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->stack_info.size = 0U;
   21782:	9528      	str	r5, [sp, #160]	; 0xa0
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   21784:	4b09      	ldr	r3, [pc, #36]	; (217ac <z_cstart+0x88>)
   21786:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2178a:	f7ff fe15 	bl	213b8 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2178e:	4628      	mov	r0, r5
   21790:	f7ff fe1e 	bl	213d0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21794:	4620      	mov	r0, r4
   21796:	f7ff fe1b 	bl	213d0 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
   2179a:	f7ff ff49 	bl	21630 <prepare_multithreading>
   2179e:	f7ff ffab 	bl	216f8 <switch_to_main_thread>
   217a2:	bf00      	nop
   217a4:	200078a0 	.word	0x200078a0
   217a8:	e000ed00 	.word	0xe000ed00
   217ac:	20003e08 	.word	0x20003e08

000217b0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   217b0:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   217b2:	4c06      	ldr	r4, [pc, #24]	; (217cc <statics_init+0x1c>)
   217b4:	4b06      	ldr	r3, [pc, #24]	; (217d0 <statics_init+0x20>)
   217b6:	429c      	cmp	r4, r3
   217b8:	d206      	bcs.n	217c8 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   217ba:	68a2      	ldr	r2, [r4, #8]
   217bc:	6861      	ldr	r1, [r4, #4]
   217be:	4620      	mov	r0, r4
   217c0:	f009 feed 	bl	2b59e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   217c4:	3414      	adds	r4, #20
   217c6:	e7f5      	b.n	217b4 <statics_init+0x4>
		}
	}
	return 0;
}
   217c8:	2000      	movs	r0, #0
   217ca:	bd10      	pop	{r4, pc}
   217cc:	200007ac 	.word	0x200007ac
   217d0:	200007ac 	.word	0x200007ac

000217d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   217d4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   217d6:	4c06      	ldr	r4, [pc, #24]	; (217f0 <init_mem_slab_module+0x1c>)
	int rc = 0;
   217d8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   217da:	4b06      	ldr	r3, [pc, #24]	; (217f4 <init_mem_slab_module+0x20>)
   217dc:	429c      	cmp	r4, r3
   217de:	d206      	bcs.n	217ee <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
   217e0:	4620      	mov	r0, r4
   217e2:	f009 ff4c 	bl	2b67e <create_free_list>
		if (rc < 0) {
   217e6:	2800      	cmp	r0, #0
   217e8:	db01      	blt.n	217ee <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   217ea:	341c      	adds	r4, #28
   217ec:	e7f5      	b.n	217da <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
   217ee:	bd10      	pop	{r4, pc}
   217f0:	2000073c 	.word	0x2000073c
   217f4:	200007ac 	.word	0x200007ac

000217f8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   217f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   217fa:	b083      	sub	sp, #12
   217fc:	460c      	mov	r4, r1
   217fe:	461f      	mov	r7, r3
	__asm__ volatile(
   21800:	f04f 0340 	mov.w	r3, #64	; 0x40
   21804:	f3ef 8111 	mrs	r1, BASEPRI
   21808:	f383 8812 	msr	BASEPRI_MAX, r3
   2180c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21810:	6943      	ldr	r3, [r0, #20]
   21812:	b16b      	cbz	r3, 21830 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
   21814:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21816:	6943      	ldr	r3, [r0, #20]
   21818:	681b      	ldr	r3, [r3, #0]
   2181a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2181c:	6983      	ldr	r3, [r0, #24]
   2181e:	3301      	adds	r3, #1
   21820:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21822:	2000      	movs	r0, #0
	__asm__ volatile(
   21824:	f381 8811 	msr	BASEPRI, r1
   21828:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   2182c:	b003      	add	sp, #12
   2182e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21830:	4616      	mov	r6, r2
   21832:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21836:	ea56 0307 	orrs.w	r3, r6, r7
   2183a:	d104      	bne.n	21846 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
   2183c:	2300      	movs	r3, #0
   2183e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   21840:	f06f 000b 	mvn.w	r0, #11
   21844:	e7ee      	b.n	21824 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21846:	e9cd 6700 	strd	r6, r7, [sp]
   2184a:	4602      	mov	r2, r0
   2184c:	4628      	mov	r0, r5
   2184e:	f000 fdfd 	bl	2244c <z_pend_curr>
		if (result == 0) {
   21852:	2800      	cmp	r0, #0
   21854:	d1ea      	bne.n	2182c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
   21856:	4b02      	ldr	r3, [pc, #8]	; (21860 <k_mem_slab_alloc+0x68>)
   21858:	689b      	ldr	r3, [r3, #8]
   2185a:	695b      	ldr	r3, [r3, #20]
   2185c:	6023      	str	r3, [r4, #0]
		return result;
   2185e:	e7e5      	b.n	2182c <k_mem_slab_alloc+0x34>
   21860:	20003e08 	.word	0x20003e08

00021864 <z_thread_monitor_exit>:
	__asm__ volatile(
   21864:	f04f 0340 	mov.w	r3, #64	; 0x40
   21868:	f3ef 8111 	mrs	r1, BASEPRI
   2186c:	f383 8812 	msr	BASEPRI_MAX, r3
   21870:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
   21874:	4b0a      	ldr	r3, [pc, #40]	; (218a0 <z_thread_monitor_exit+0x3c>)
   21876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21878:	4283      	cmp	r3, r0
   2187a:	d104      	bne.n	21886 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
   2187c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   2187e:	4b08      	ldr	r3, [pc, #32]	; (218a0 <z_thread_monitor_exit+0x3c>)
   21880:	629a      	str	r2, [r3, #40]	; 0x28
   21882:	e007      	b.n	21894 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
   21884:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   21886:	b113      	cbz	r3, 2188e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
   21888:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		while ((prev_thread != NULL) &&
   2188a:	4282      	cmp	r2, r0
   2188c:	d1fa      	bne.n	21884 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
   2188e:	b10b      	cbz	r3, 21894 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
   21890:	6f42      	ldr	r2, [r0, #116]	; 0x74
   21892:	675a      	str	r2, [r3, #116]	; 0x74
	__asm__ volatile(
   21894:	f381 8811 	msr	BASEPRI, r1
   21898:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
   2189c:	4770      	bx	lr
   2189e:	bf00      	nop
   218a0:	20003e08 	.word	0x20003e08

000218a4 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   218a4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   218a6:	4604      	mov	r4, r0
   218a8:	b140      	cbz	r0, 218bc <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
   218aa:	2220      	movs	r2, #32
   218ac:	f104 0078 	add.w	r0, r4, #120	; 0x78
   218b0:	f006 f96b 	bl	27b8a <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   218b4:	2000      	movs	r0, #0
   218b6:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   218ba:	bd10      	pop	{r4, pc}
		thread = _current;
   218bc:	4b01      	ldr	r3, [pc, #4]	; (218c4 <z_impl_k_thread_name_set+0x20>)
   218be:	689c      	ldr	r4, [r3, #8]
   218c0:	e7f3      	b.n	218aa <z_impl_k_thread_name_set+0x6>
   218c2:	bf00      	nop
   218c4:	20003e08 	.word	0x20003e08

000218c8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
   218c8:	b538      	push	{r3, r4, r5, lr}
   218ca:	4614      	mov	r4, r2
   218cc:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   218ce:	ea54 0305 	orrs.w	r3, r4, r5
   218d2:	d102      	bne.n	218da <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
   218d4:	f009 ff3e 	bl	2b754 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
   218d8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   218da:	462b      	mov	r3, r5
   218dc:	4902      	ldr	r1, [pc, #8]	; (218e8 <schedule_new_thread+0x20>)
   218de:	3018      	adds	r0, #24
   218e0:	f001 f85e 	bl	229a0 <z_add_timeout>
   218e4:	e7f8      	b.n	218d8 <schedule_new_thread+0x10>
   218e6:	bf00      	nop
   218e8:	0002bd6b 	.word	0x0002bd6b

000218ec <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   218ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218f0:	b085      	sub	sp, #20
   218f2:	4604      	mov	r4, r0
   218f4:	460f      	mov	r7, r1
   218f6:	4615      	mov	r5, r2
   218f8:	461e      	mov	r6, r3
   218fa:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   218fe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   21902:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   21906:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2190a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   2190e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
   21910:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
   21912:	9b12      	ldr	r3, [sp, #72]	; 0x48
   21914:	2204      	movs	r2, #4
   21916:	9911      	ldr	r1, [sp, #68]	; 0x44
   21918:	f009 ff20 	bl	2b75c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
   2191c:	462a      	mov	r2, r5
   2191e:	4639      	mov	r1, r7
   21920:	4620      	mov	r0, r4
   21922:	f009 fefd 	bl	2b720 <setup_thread_stack>
   21926:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21928:	f8cd 8008 	str.w	r8, [sp, #8]
   2192c:	f8cd 9004 	str.w	r9, [sp, #4]
   21930:	f8cd a000 	str.w	sl, [sp]
   21934:	4633      	mov	r3, r6
   21936:	4602      	mov	r2, r0
   21938:	4639      	mov	r1, r7
   2193a:	4620      	mov	r0, r4
   2193c:	f7f3 fcd8 	bl	152f0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
   21940:	2300      	movs	r3, #0
   21942:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
   21944:	6666      	str	r6, [r4, #100]	; 0x64
	new_thread->entry.parameter1 = p1;
   21946:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
	new_thread->entry.parameter2 = p2;
   2194a:	f8c4 906c 	str.w	r9, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   2194e:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
	__asm__ volatile(
   21952:	f04f 0340 	mov.w	r3, #64	; 0x40
   21956:	f3ef 8211 	mrs	r2, BASEPRI
   2195a:	f383 8812 	msr	BASEPRI_MAX, r3
   2195e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
   21962:	4b13      	ldr	r3, [pc, #76]	; (219b0 <z_setup_new_thread+0xc4>)
   21964:	6a99      	ldr	r1, [r3, #40]	; 0x28
   21966:	6761      	str	r1, [r4, #116]	; 0x74
	_kernel.threads = new_thread;
   21968:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
   2196a:	f382 8811 	msr	BASEPRI, r2
   2196e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
   21972:	f1bb 0f00 	cmp.w	fp, #0
   21976:	d013      	beq.n	219a0 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
   21978:	221f      	movs	r2, #31
   2197a:	4659      	mov	r1, fp
   2197c:	f104 0078 	add.w	r0, r4, #120	; 0x78
   21980:	f006 f903 	bl	27b8a <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   21984:	2300      	movs	r3, #0
   21986:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
   2198a:	4b09      	ldr	r3, [pc, #36]	; (219b0 <z_setup_new_thread+0xc4>)
   2198c:	689b      	ldr	r3, [r3, #8]
   2198e:	b15b      	cbz	r3, 219a8 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
   21990:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   21994:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
   21998:	4628      	mov	r0, r5
   2199a:	b005      	add	sp, #20
   2199c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
   219a0:	2300      	movs	r3, #0
   219a2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   219a6:	e7f0      	b.n	2198a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
   219a8:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
		return stack_ptr;
   219ac:	e7f4      	b.n	21998 <z_setup_new_thread+0xac>
   219ae:	bf00      	nop
   219b0:	20003e08 	.word	0x20003e08

000219b4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
   219b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   219b8:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
   219ba:	4c23      	ldr	r4, [pc, #140]	; (21a48 <z_init_static_threads+0x94>)
   219bc:	4b23      	ldr	r3, [pc, #140]	; (21a4c <z_init_static_threads+0x98>)
   219be:	429c      	cmp	r4, r3
   219c0:	d215      	bcs.n	219ee <z_init_static_threads+0x3a>
		z_setup_new_thread(
   219c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   219c4:	9305      	str	r3, [sp, #20]
   219c6:	6a23      	ldr	r3, [r4, #32]
   219c8:	9304      	str	r3, [sp, #16]
   219ca:	69e3      	ldr	r3, [r4, #28]
   219cc:	9303      	str	r3, [sp, #12]
   219ce:	69a3      	ldr	r3, [r4, #24]
   219d0:	9302      	str	r3, [sp, #8]
   219d2:	6963      	ldr	r3, [r4, #20]
   219d4:	9301      	str	r3, [sp, #4]
   219d6:	6923      	ldr	r3, [r4, #16]
   219d8:	9300      	str	r3, [sp, #0]
   219da:	68e3      	ldr	r3, [r4, #12]
   219dc:	68a2      	ldr	r2, [r4, #8]
   219de:	6861      	ldr	r1, [r4, #4]
   219e0:	6820      	ldr	r0, [r4, #0]
   219e2:	f7ff ff83 	bl	218ec <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
   219e6:	6823      	ldr	r3, [r4, #0]
   219e8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   219ea:	3430      	adds	r4, #48	; 0x30
   219ec:	e7e6      	b.n	219bc <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
   219ee:	f000 fbe5 	bl	221bc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   219f2:	4c15      	ldr	r4, [pc, #84]	; (21a48 <z_init_static_threads+0x94>)
   219f4:	e01b      	b.n	21a2e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
   219f6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
   219f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   219fc:	ea4f 79e3 	mov.w	r9, r3, asr #31
   21a00:	ea4f 31c9 	mov.w	r1, r9, lsl #15
   21a04:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
   21a08:	03d8      	lsls	r0, r3, #15
   21a0a:	f240 35e7 	movw	r5, #999	; 0x3e7
   21a0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21a12:	2300      	movs	r3, #0
   21a14:	1940      	adds	r0, r0, r5
   21a16:	f04f 0500 	mov.w	r5, #0
   21a1a:	eb45 0101 	adc.w	r1, r5, r1
   21a1e:	f7df fb6f 	bl	1100 <__aeabi_uldivmod>
   21a22:	4602      	mov	r2, r0
   21a24:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
   21a26:	4630      	mov	r0, r6
   21a28:	f7ff ff4e 	bl	218c8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
   21a2c:	3430      	adds	r4, #48	; 0x30
   21a2e:	4b07      	ldr	r3, [pc, #28]	; (21a4c <z_init_static_threads+0x98>)
   21a30:	429c      	cmp	r4, r3
   21a32:	d204      	bcs.n	21a3e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   21a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21a36:	f1b3 3fff 	cmp.w	r3, #4294967295
   21a3a:	d0f7      	beq.n	21a2c <z_init_static_threads+0x78>
   21a3c:	e7db      	b.n	219f6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
   21a3e:	f000 fdbb 	bl	225b8 <k_sched_unlock>
}
   21a42:	b006      	add	sp, #24
   21a44:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   21a48:	2000073c 	.word	0x2000073c
   21a4c:	2000073c 	.word	0x2000073c

00021a50 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
   21a50:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
   21a52:	f00a fad8 	bl	2c006 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   21a56:	4b04      	ldr	r3, [pc, #16]	; (21a68 <pm_save_idle+0x18>)
   21a58:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   21a5a:	f7f2 fb33 	bl	140c4 <pm_system_suspend>
   21a5e:	b100      	cbz	r0, 21a62 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
   21a60:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
   21a62:	f7f3 fb0b 	bl	1507c <arch_cpu_idle>
   21a66:	e7fb      	b.n	21a60 <pm_save_idle+0x10>
   21a68:	20003e08 	.word	0x20003e08

00021a6c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   21a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a70:	b083      	sub	sp, #12
   21a72:	4604      	mov	r4, r0
   21a74:	461d      	mov	r5, r3
	__asm__ volatile(
   21a76:	f04f 0340 	mov.w	r3, #64	; 0x40
   21a7a:	f3ef 8711 	mrs	r7, BASEPRI
   21a7e:	f383 8812 	msr	BASEPRI_MAX, r3
   21a82:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21a86:	68c1      	ldr	r1, [r0, #12]
   21a88:	b999      	cbnz	r1, 21ab2 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
   21a8a:	2900      	cmp	r1, #0
   21a8c:	d14f      	bne.n	21b2e <z_impl_k_mutex_lock+0xc2>
   21a8e:	4b3a      	ldr	r3, [pc, #232]	; (21b78 <z_impl_k_mutex_lock+0x10c>)
   21a90:	689b      	ldr	r3, [r3, #8]
   21a92:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   21a96:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   21a98:	3101      	adds	r1, #1
   21a9a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
   21a9c:	4b36      	ldr	r3, [pc, #216]	; (21b78 <z_impl_k_mutex_lock+0x10c>)
   21a9e:	689b      	ldr	r3, [r3, #8]
   21aa0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   21aa2:	f387 8811 	msr	BASEPRI, r7
   21aa6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
   21aaa:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   21aac:	b003      	add	sp, #12
   21aae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21ab2:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   21ab4:	6882      	ldr	r2, [r0, #8]
   21ab6:	4b30      	ldr	r3, [pc, #192]	; (21b78 <z_impl_k_mutex_lock+0x10c>)
   21ab8:	689b      	ldr	r3, [r3, #8]
   21aba:	429a      	cmp	r2, r3
   21abc:	d0e5      	beq.n	21a8a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   21abe:	ea55 0106 	orrs.w	r1, r5, r6
   21ac2:	bf0c      	ite	eq
   21ac4:	f04f 0801 	moveq.w	r8, #1
   21ac8:	f04f 0800 	movne.w	r8, #0
   21acc:	d031      	beq.n	21b32 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
   21ace:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
   21ad2:	4649      	mov	r1, r9
   21ad4:	f993 000e 	ldrsb.w	r0, [r3, #14]
   21ad8:	f009 fe7f 	bl	2b7da <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   21adc:	4581      	cmp	r9, r0
   21ade:	dc2f      	bgt.n	21b40 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
   21ae0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   21ae4:	9600      	str	r6, [sp, #0]
   21ae6:	9501      	str	r5, [sp, #4]
   21ae8:	4622      	mov	r2, r4
   21aea:	4639      	mov	r1, r7
   21aec:	4823      	ldr	r0, [pc, #140]	; (21b7c <z_impl_k_mutex_lock+0x110>)
   21aee:	f000 fcad 	bl	2244c <z_pend_curr>
	if (got_mutex == 0) {
   21af2:	2800      	cmp	r0, #0
   21af4:	d0da      	beq.n	21aac <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
   21af6:	f04f 0340 	mov.w	r3, #64	; 0x40
   21afa:	f3ef 8511 	mrs	r5, BASEPRI
   21afe:	f383 8812 	msr	BASEPRI_MAX, r3
   21b02:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   21b06:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b08:	42a3      	cmp	r3, r4
   21b0a:	d01f      	beq.n	21b4c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   21b0c:	b1f3      	cbz	r3, 21b4c <z_impl_k_mutex_lock+0xe0>
   21b0e:	6921      	ldr	r1, [r4, #16]
   21b10:	f993 000e 	ldrsb.w	r0, [r3, #14]
   21b14:	f009 fe61 	bl	2b7da <new_prio_for_inheritance>
   21b18:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   21b1a:	4620      	mov	r0, r4
   21b1c:	f009 fe68 	bl	2b7f0 <adjust_owner_prio>
   21b20:	b9b0      	cbnz	r0, 21b50 <z_impl_k_mutex_lock+0xe4>
   21b22:	f1b9 0f00 	cmp.w	r9, #0
   21b26:	d015      	beq.n	21b54 <z_impl_k_mutex_lock+0xe8>
   21b28:	f04f 0801 	mov.w	r8, #1
   21b2c:	e012      	b.n	21b54 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   21b2e:	6923      	ldr	r3, [r4, #16]
   21b30:	e7b1      	b.n	21a96 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
   21b32:	f387 8811 	msr	BASEPRI, r7
   21b36:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   21b3a:	f06f 000f 	mvn.w	r0, #15
   21b3e:	e7b5      	b.n	21aac <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
   21b40:	4601      	mov	r1, r0
   21b42:	4620      	mov	r0, r4
   21b44:	f009 fe54 	bl	2b7f0 <adjust_owner_prio>
   21b48:	4681      	mov	r9, r0
   21b4a:	e7cb      	b.n	21ae4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   21b4c:	6921      	ldr	r1, [r4, #16]
   21b4e:	e7e4      	b.n	21b1a <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   21b50:	f04f 0801 	mov.w	r8, #1
	if (resched) {
   21b54:	f1b8 0f00 	cmp.w	r8, #0
   21b58:	d106      	bne.n	21b68 <z_impl_k_mutex_lock+0xfc>
   21b5a:	f385 8811 	msr	BASEPRI, r5
   21b5e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
   21b62:	f06f 000a 	mvn.w	r0, #10
   21b66:	e7a1      	b.n	21aac <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
   21b68:	4629      	mov	r1, r5
   21b6a:	4804      	ldr	r0, [pc, #16]	; (21b7c <z_impl_k_mutex_lock+0x110>)
   21b6c:	f000 fb0a 	bl	22184 <z_reschedule>
	return -EAGAIN;
   21b70:	f06f 000a 	mvn.w	r0, #10
   21b74:	e79a      	b.n	21aac <z_impl_k_mutex_lock+0x40>
   21b76:	bf00      	nop
   21b78:	20003e08 	.word	0x20003e08
   21b7c:	20003e34 	.word	0x20003e34

00021b80 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   21b80:	6882      	ldr	r2, [r0, #8]
   21b82:	2a00      	cmp	r2, #0
   21b84:	d035      	beq.n	21bf2 <z_impl_k_mutex_unlock+0x72>
{
   21b86:	b538      	push	{r3, r4, r5, lr}
   21b88:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   21b8a:	4b1d      	ldr	r3, [pc, #116]	; (21c00 <z_impl_k_mutex_unlock+0x80>)
   21b8c:	689b      	ldr	r3, [r3, #8]
   21b8e:	429a      	cmp	r2, r3
   21b90:	d132      	bne.n	21bf8 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   21b92:	7bda      	ldrb	r2, [r3, #15]
   21b94:	3a01      	subs	r2, #1
   21b96:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   21b98:	68c3      	ldr	r3, [r0, #12]
   21b9a:	2b01      	cmp	r3, #1
   21b9c:	d905      	bls.n	21baa <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   21b9e:	3b01      	subs	r3, #1
   21ba0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   21ba2:	f000 fd09 	bl	225b8 <k_sched_unlock>

	return 0;
   21ba6:	2000      	movs	r0, #0
}
   21ba8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   21baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   21bae:	f3ef 8511 	mrs	r5, BASEPRI
   21bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   21bb6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   21bba:	6901      	ldr	r1, [r0, #16]
   21bbc:	f009 fe18 	bl	2b7f0 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   21bc0:	4620      	mov	r0, r4
   21bc2:	f00a f978 	bl	2beb6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   21bc6:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   21bc8:	b160      	cbz	r0, 21be4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   21bca:	f990 300e 	ldrsb.w	r3, [r0, #14]
   21bce:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   21bd0:	2300      	movs	r3, #0
   21bd2:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		z_ready_thread(new_owner);
   21bd6:	f00a f8ac 	bl	2bd32 <z_ready_thread>
		z_reschedule(&lock, key);
   21bda:	4629      	mov	r1, r5
   21bdc:	4809      	ldr	r0, [pc, #36]	; (21c04 <z_impl_k_mutex_unlock+0x84>)
   21bde:	f000 fad1 	bl	22184 <z_reschedule>
   21be2:	e7de      	b.n	21ba2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   21be4:	2300      	movs	r3, #0
   21be6:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
   21be8:	f385 8811 	msr	BASEPRI, r5
   21bec:	f3bf 8f6f 	isb	sy
   21bf0:	e7d7      	b.n	21ba2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   21bf2:	f06f 0015 	mvn.w	r0, #21
}
   21bf6:	4770      	bx	lr
		return -EPERM;
   21bf8:	f04f 30ff 	mov.w	r0, #4294967295
   21bfc:	e7d4      	b.n	21ba8 <z_impl_k_mutex_unlock+0x28>
   21bfe:	bf00      	nop
   21c00:	20003e08 	.word	0x20003e08
   21c04:	20003e34 	.word	0x20003e34

00021c08 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   21c08:	b5d0      	push	{r4, r6, r7, lr}
   21c0a:	b082      	sub	sp, #8
   21c0c:	4601      	mov	r1, r0
   21c0e:	4616      	mov	r6, r2
   21c10:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   21c12:	4602      	mov	r2, r0
	__asm__ volatile(
   21c14:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c18:	f3ef 8411 	mrs	r4, BASEPRI
   21c1c:	f383 8812 	msr	BASEPRI_MAX, r3
   21c20:	f3bf 8f6f 	isb	sy
   21c24:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   21c28:	b188      	cbz	r0, 21c4e <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21c2a:	6803      	ldr	r3, [r0, #0]
   21c2c:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
   21c30:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   21c32:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   21c34:	4290      	cmp	r0, r2
   21c36:	d008      	beq.n	21c4a <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   21c38:	2101      	movs	r1, #1
   21c3a:	f009 fe5e 	bl	2b8fa <z_queue_node_peek>
	__asm__ volatile(
   21c3e:	f384 8811 	msr	BASEPRI, r4
   21c42:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   21c46:	b002      	add	sp, #8
   21c48:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
   21c4a:	604b      	str	r3, [r1, #4]
}
   21c4c:	e7f4      	b.n	21c38 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21c4e:	ea56 0307 	orrs.w	r3, r6, r7
   21c52:	d00a      	beq.n	21c6a <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   21c54:	e9cd 6700 	strd	r6, r7, [sp]
   21c58:	4621      	mov	r1, r4
   21c5a:	4610      	mov	r0, r2
   21c5c:	f000 fbf6 	bl	2244c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   21c60:	b948      	cbnz	r0, 21c76 <z_impl_k_queue_get+0x6e>
   21c62:	4b06      	ldr	r3, [pc, #24]	; (21c7c <z_impl_k_queue_get+0x74>)
   21c64:	689b      	ldr	r3, [r3, #8]
   21c66:	6958      	ldr	r0, [r3, #20]
   21c68:	e7ed      	b.n	21c46 <z_impl_k_queue_get+0x3e>
   21c6a:	f384 8811 	msr	BASEPRI, r4
   21c6e:	f3bf 8f6f 	isb	sy
		return NULL;
   21c72:	2000      	movs	r0, #0
   21c74:	e7e7      	b.n	21c46 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
   21c76:	2000      	movs	r0, #0
   21c78:	e7e5      	b.n	21c46 <z_impl_k_queue_get+0x3e>
   21c7a:	bf00      	nop
   21c7c:	20003e08 	.word	0x20003e08

00021c80 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   21c80:	b538      	push	{r3, r4, r5, lr}
   21c82:	4604      	mov	r4, r0
	__asm__ volatile(
   21c84:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c88:	f3ef 8511 	mrs	r5, BASEPRI
   21c8c:	f383 8812 	msr	BASEPRI_MAX, r3
   21c90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   21c94:	f00a f90f 	bl	2beb6 <z_unpend_first_thread>

	if (thread != NULL) {
   21c98:	b148      	cbz	r0, 21cae <z_impl_k_sem_give+0x2e>
   21c9a:	2200      	movs	r2, #0
   21c9c:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   21ca0:	f00a f847 	bl	2bd32 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   21ca4:	4629      	mov	r1, r5
   21ca6:	4809      	ldr	r0, [pc, #36]	; (21ccc <z_impl_k_sem_give+0x4c>)
   21ca8:	f000 fa6c 	bl	22184 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   21cac:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21cae:	68a3      	ldr	r3, [r4, #8]
   21cb0:	68e2      	ldr	r2, [r4, #12]
   21cb2:	4293      	cmp	r3, r2
   21cb4:	d008      	beq.n	21cc8 <z_impl_k_sem_give+0x48>
   21cb6:	2201      	movs	r2, #1
   21cb8:	4413      	add	r3, r2
   21cba:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   21cbc:	2102      	movs	r1, #2
   21cbe:	f104 0010 	add.w	r0, r4, #16
   21cc2:	f00a facb 	bl	2c25c <z_handle_obj_poll_events>
}
   21cc6:	e7ed      	b.n	21ca4 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   21cc8:	2200      	movs	r2, #0
   21cca:	e7f5      	b.n	21cb8 <z_impl_k_sem_give+0x38>
   21ccc:	20003e34 	.word	0x20003e34

00021cd0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   21cd0:	b530      	push	{r4, r5, lr}
   21cd2:	b083      	sub	sp, #12
   21cd4:	461d      	mov	r5, r3
   21cd6:	f04f 0340 	mov.w	r3, #64	; 0x40
   21cda:	f3ef 8111 	mrs	r1, BASEPRI
   21cde:	f383 8812 	msr	BASEPRI_MAX, r3
   21ce2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   21ce6:	6883      	ldr	r3, [r0, #8]
   21ce8:	b143      	cbz	r3, 21cfc <z_impl_k_sem_take+0x2c>
		sem->count--;
   21cea:	3b01      	subs	r3, #1
   21cec:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   21cee:	f381 8811 	msr	BASEPRI, r1
   21cf2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   21cf6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   21cf8:	b003      	add	sp, #12
   21cfa:	bd30      	pop	{r4, r5, pc}
   21cfc:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   21cfe:	ea54 0305 	orrs.w	r3, r4, r5
   21d02:	d006      	beq.n	21d12 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   21d04:	e9cd 4500 	strd	r4, r5, [sp]
   21d08:	4602      	mov	r2, r0
   21d0a:	4805      	ldr	r0, [pc, #20]	; (21d20 <z_impl_k_sem_take+0x50>)
   21d0c:	f000 fb9e 	bl	2244c <z_pend_curr>
	return ret;
   21d10:	e7f2      	b.n	21cf8 <z_impl_k_sem_take+0x28>
   21d12:	f381 8811 	msr	BASEPRI, r1
   21d16:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   21d1a:	f06f 000f 	mvn.w	r0, #15
   21d1e:	e7eb      	b.n	21cf8 <z_impl_k_sem_take+0x28>
   21d20:	20003e34 	.word	0x20003e34

00021d24 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   21d24:	b510      	push	{r4, lr}
   21d26:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   21d28:	4b08      	ldr	r3, [pc, #32]	; (21d4c <k_sys_work_q_init+0x28>)
   21d2a:	9302      	str	r3, [sp, #8]
   21d2c:	2400      	movs	r4, #0
   21d2e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   21d32:	ab02      	add	r3, sp, #8
   21d34:	9300      	str	r3, [sp, #0]
   21d36:	f04f 33ff 	mov.w	r3, #4294967295
   21d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21d3e:	4904      	ldr	r1, [pc, #16]	; (21d50 <k_sys_work_q_init+0x2c>)
   21d40:	4804      	ldr	r0, [pc, #16]	; (21d54 <k_sys_work_q_init+0x30>)
   21d42:	f000 f96f 	bl	22024 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21d46:	4620      	mov	r0, r4
   21d48:	b004      	add	sp, #16
   21d4a:	bd10      	pop	{r4, pc}
   21d4c:	0002f228 	.word	0x0002f228
   21d50:	200078a0 	.word	0x200078a0
   21d54:	200021e8 	.word	0x200021e8

00021d58 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
   21d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21d5a:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
   21d5c:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21d5e:	f013 0f02 	tst.w	r3, #2
   21d62:	d15b      	bne.n	21e1c <submit_to_queue_locked+0xc4>
   21d64:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21d66:	f013 0f04 	tst.w	r3, #4
   21d6a:	d15c      	bne.n	21e26 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   21d6c:	680b      	ldr	r3, [r1, #0]
   21d6e:	2b00      	cmp	r3, #0
   21d70:	d037      	beq.n	21de2 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   21d72:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   21d74:	f013 0f01 	tst.w	r3, #1
   21d78:	d036      	beq.n	21de8 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   21d7a:	68a3      	ldr	r3, [r4, #8]
   21d7c:	602b      	str	r3, [r5, #0]
			ret = 2;
   21d7e:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   21d80:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   21d82:	2e00      	cmp	r6, #0
   21d84:	d03e      	beq.n	21e04 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21d86:	4b29      	ldr	r3, [pc, #164]	; (21e2c <submit_to_queue_locked+0xd4>)
   21d88:	689b      	ldr	r3, [r3, #8]
   21d8a:	42b3      	cmp	r3, r6
   21d8c:	d02e      	beq.n	21dec <submit_to_queue_locked+0x94>
   21d8e:	2300      	movs	r3, #0
   21d90:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   21d92:	f8d6 30d0 	ldr.w	r3, [r6, #208]	; 0xd0
   21d96:	f3c3 0180 	ubfx	r1, r3, #2, #1
   21d9a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   21d9e:	f013 0f01 	tst.w	r3, #1
   21da2:	d032      	beq.n	21e0a <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   21da4:	b101      	cbz	r1, 21da8 <submit_to_queue_locked+0x50>
   21da6:	b39a      	cbz	r2, 21e10 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   21da8:	b100      	cbz	r0, 21dac <submit_to_queue_locked+0x54>
   21daa:	b3a1      	cbz	r1, 21e16 <submit_to_queue_locked+0xbe>
	parent->next = child;
   21dac:	2300      	movs	r3, #0
   21dae:	6023      	str	r3, [r4, #0]
	return list->tail;
   21db0:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
Z_GENLIST_APPEND(slist, snode)
   21db4:	b30b      	cbz	r3, 21dfa <submit_to_queue_locked+0xa2>
	parent->next = child;
   21db6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21db8:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   21dbc:	2200      	movs	r2, #0
   21dbe:	4611      	mov	r1, r2
   21dc0:	f106 00c0 	add.w	r0, r6, #192	; 0xc0
   21dc4:	f00a f8b3 	bl	2bf2e <z_sched_wake>
		ret = 1;
   21dc8:	2001      	movs	r0, #1

		if (rc < 0) {
   21dca:	2800      	cmp	r0, #0
   21dcc:	db06      	blt.n	21ddc <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   21dce:	68e3      	ldr	r3, [r4, #12]
   21dd0:	f043 0304 	orr.w	r3, r3, #4
   21dd4:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   21dd6:	682b      	ldr	r3, [r5, #0]
   21dd8:	60a3      	str	r3, [r4, #8]
   21dda:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   21ddc:	2800      	cmp	r0, #0
   21dde:	dc21      	bgt.n	21e24 <submit_to_queue_locked+0xcc>
   21de0:	e01e      	b.n	21e20 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   21de2:	6883      	ldr	r3, [r0, #8]
   21de4:	600b      	str	r3, [r1, #0]
   21de6:	e7c4      	b.n	21d72 <submit_to_queue_locked+0x1a>
		ret = 1;
   21de8:	2701      	movs	r7, #1
   21dea:	e7c9      	b.n	21d80 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   21dec:	f009 fcaa 	bl	2b744 <k_is_in_isr>
   21df0:	b908      	cbnz	r0, 21df6 <submit_to_queue_locked+0x9e>
   21df2:	2301      	movs	r3, #1
   21df4:	e7cc      	b.n	21d90 <submit_to_queue_locked+0x38>
   21df6:	2300      	movs	r3, #0
   21df8:	e7ca      	b.n	21d90 <submit_to_queue_locked+0x38>
   21dfa:	f8c6 40bc 	str.w	r4, [r6, #188]	; 0xbc
	list->head = node;
   21dfe:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
}
   21e02:	e7db      	b.n	21dbc <submit_to_queue_locked+0x64>
		return -EINVAL;
   21e04:	f06f 0015 	mvn.w	r0, #21
   21e08:	e7df      	b.n	21dca <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   21e0a:	f06f 0012 	mvn.w	r0, #18
   21e0e:	e7dc      	b.n	21dca <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   21e10:	f06f 000f 	mvn.w	r0, #15
   21e14:	e7d9      	b.n	21dca <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   21e16:	f06f 000f 	mvn.w	r0, #15
   21e1a:	e7d6      	b.n	21dca <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   21e1c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   21e20:	2300      	movs	r3, #0
   21e22:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   21e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   21e26:	2000      	movs	r0, #0
   21e28:	e7fa      	b.n	21e20 <submit_to_queue_locked+0xc8>
   21e2a:	bf00      	nop
   21e2c:	20003e08 	.word	0x20003e08

00021e30 <finalize_cancel_locked>:
{
   21e30:	b570      	push	{r4, r5, r6, lr}
   21e32:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   21e34:	68c3      	ldr	r3, [r0, #12]
   21e36:	f023 0302 	bic.w	r3, r3, #2
   21e3a:	60c3      	str	r3, [r0, #12]
	return list->head;
   21e3c:	4b19      	ldr	r3, [pc, #100]	; (21ea4 <finalize_cancel_locked+0x74>)
   21e3e:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21e40:	b1e8      	cbz	r0, 21e7e <finalize_cancel_locked+0x4e>
   21e42:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   21e44:	b100      	cbz	r0, 21e48 <finalize_cancel_locked+0x18>
	return node->next;
   21e46:	6804      	ldr	r4, [r0, #0]
   21e48:	2600      	movs	r6, #0
   21e4a:	e01d      	b.n	21e88 <finalize_cancel_locked+0x58>
Z_GENLIST_REMOVE(slist, snode)
   21e4c:	b15e      	cbz	r6, 21e66 <finalize_cancel_locked+0x36>
	return node->next;
   21e4e:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   21e50:	6033      	str	r3, [r6, #0]
	return list->tail;
   21e52:	4b14      	ldr	r3, [pc, #80]	; (21ea4 <finalize_cancel_locked+0x74>)
   21e54:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   21e56:	4298      	cmp	r0, r3
   21e58:	d00e      	beq.n	21e78 <finalize_cancel_locked+0x48>
	parent->next = child;
   21e5a:	2300      	movs	r3, #0
   21e5c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   21e60:	f7ff ff0e 	bl	21c80 <z_impl_k_sem_give>
}
   21e64:	e015      	b.n	21e92 <finalize_cancel_locked+0x62>
	return node->next;
   21e66:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   21e68:	4b0e      	ldr	r3, [pc, #56]	; (21ea4 <finalize_cancel_locked+0x74>)
   21e6a:	601a      	str	r2, [r3, #0]
	return list->tail;
   21e6c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   21e6e:	4298      	cmp	r0, r3
   21e70:	d1f3      	bne.n	21e5a <finalize_cancel_locked+0x2a>
	list->tail = node;
   21e72:	4b0c      	ldr	r3, [pc, #48]	; (21ea4 <finalize_cancel_locked+0x74>)
   21e74:	605a      	str	r2, [r3, #4]
}
   21e76:	e7f0      	b.n	21e5a <finalize_cancel_locked+0x2a>
	list->tail = node;
   21e78:	4b0a      	ldr	r3, [pc, #40]	; (21ea4 <finalize_cancel_locked+0x74>)
   21e7a:	605e      	str	r6, [r3, #4]
}
   21e7c:	e7ed      	b.n	21e5a <finalize_cancel_locked+0x2a>
   21e7e:	4604      	mov	r4, r0
   21e80:	e7e2      	b.n	21e48 <finalize_cancel_locked+0x18>
   21e82:	4623      	mov	r3, r4
   21e84:	4620      	mov	r0, r4
   21e86:	461c      	mov	r4, r3
   21e88:	b150      	cbz	r0, 21ea0 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   21e8a:	6843      	ldr	r3, [r0, #4]
   21e8c:	42ab      	cmp	r3, r5
   21e8e:	d0dd      	beq.n	21e4c <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   21e90:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   21e92:	2c00      	cmp	r4, #0
   21e94:	d0f5      	beq.n	21e82 <finalize_cancel_locked+0x52>
   21e96:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   21e98:	2c00      	cmp	r4, #0
   21e9a:	d0f3      	beq.n	21e84 <finalize_cancel_locked+0x54>
	return node->next;
   21e9c:	6823      	ldr	r3, [r4, #0]
   21e9e:	e7f1      	b.n	21e84 <finalize_cancel_locked+0x54>
}
   21ea0:	bd70      	pop	{r4, r5, r6, pc}
   21ea2:	bf00      	nop
   21ea4:	20003e34 	.word	0x20003e34

00021ea8 <cancel_sync_locked>:
 *
 * @retval false if work was idle on entry.  The caller need not wait.
 */
static bool cancel_sync_locked(struct k_work *work,
			       struct z_work_canceller *canceller)
{
   21ea8:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21eaa:	68c5      	ldr	r5, [r0, #12]
   21eac:	f015 0f02 	tst.w	r5, #2
   21eb0:	f3c5 0540 	ubfx	r5, r5, #1, #1

	/* If something's still running then we have to wait for
	 * completion, which is indicated when finish_cancel() gets
	 * invoked.
	 */
	if (ret) {
   21eb4:	d101      	bne.n	21eba <cancel_sync_locked+0x12>
		init_work_cancel(canceller, work);
	}

	return ret;
}
   21eb6:	4628      	mov	r0, r5
   21eb8:	bd70      	pop	{r4, r5, r6, pc}
   21eba:	4604      	mov	r4, r0
   21ebc:	460e      	mov	r6, r1
	k_sem_init(&canceler->sem, 0, 1);
   21ebe:	f101 0008 	add.w	r0, r1, #8
	return z_impl_k_sem_init(sem, initial_count, limit);
   21ec2:	2201      	movs	r2, #1
   21ec4:	2100      	movs	r1, #0
   21ec6:	f009 fd86 	bl	2b9d6 <z_impl_k_sem_init>
	canceler->work = work;
   21eca:	6074      	str	r4, [r6, #4]
	parent->next = child;
   21ecc:	2300      	movs	r3, #0
   21ece:	6033      	str	r3, [r6, #0]
	return list->tail;
   21ed0:	4b05      	ldr	r3, [pc, #20]	; (21ee8 <cancel_sync_locked+0x40>)
   21ed2:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   21ed4:	b11b      	cbz	r3, 21ede <cancel_sync_locked+0x36>
	parent->next = child;
   21ed6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21ed8:	4b03      	ldr	r3, [pc, #12]	; (21ee8 <cancel_sync_locked+0x40>)
   21eda:	605e      	str	r6, [r3, #4]
}
   21edc:	e7eb      	b.n	21eb6 <cancel_sync_locked+0xe>
   21ede:	4b02      	ldr	r3, [pc, #8]	; (21ee8 <cancel_sync_locked+0x40>)
   21ee0:	605e      	str	r6, [r3, #4]
	list->head = node;
   21ee2:	601e      	str	r6, [r3, #0]
}
   21ee4:	e7e7      	b.n	21eb6 <cancel_sync_locked+0xe>
   21ee6:	bf00      	nop
   21ee8:	20003e34 	.word	0x20003e34

00021eec <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   21eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   21eee:	b085      	sub	sp, #20
   21ef0:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   21ef2:	e016      	b.n	21f22 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   21ef4:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	*flagp &= ~BIT(bit);
   21ef8:	f023 0204 	bic.w	r2, r3, #4
   21efc:	f8c5 20d0 	str.w	r2, [r5, #208]	; 0xd0
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21f00:	f013 0f04 	tst.w	r3, #4
   21f04:	d158      	bne.n	21fb8 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21f06:	2300      	movs	r3, #0
   21f08:	9302      	str	r3, [sp, #8]
   21f0a:	f04f 32ff 	mov.w	r2, #4294967295
   21f0e:	f04f 33ff 	mov.w	r3, #4294967295
   21f12:	e9cd 2300 	strd	r2, r3, [sp]
   21f16:	f105 02c0 	add.w	r2, r5, #192	; 0xc0
   21f1a:	4631      	mov	r1, r6
   21f1c:	482e      	ldr	r0, [pc, #184]	; (21fd8 <work_queue_main+0xec>)
   21f1e:	f000 fccb 	bl	228b8 <z_sched_wait>
	__asm__ volatile(
   21f22:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f26:	f3ef 8611 	mrs	r6, BASEPRI
   21f2a:	f383 8812 	msr	BASEPRI_MAX, r3
   21f2e:	f3bf 8f6f 	isb	sy
	return list->head;
   21f32:	f8d5 40b8 	ldr.w	r4, [r5, #184]	; 0xb8
Z_GENLIST_GET(slist, snode)
   21f36:	2c00      	cmp	r4, #0
   21f38:	d0dc      	beq.n	21ef4 <work_queue_main+0x8>
	return node->next;
   21f3a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   21f3c:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	return list->tail;
   21f40:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   21f44:	4294      	cmp	r4, r2
   21f46:	d034      	beq.n	21fb2 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   21f48:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   21f4c:	f043 0302 	orr.w	r3, r3, #2
   21f50:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
   21f54:	68e3      	ldr	r3, [r4, #12]
   21f56:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   21f5a:	f023 0304 	bic.w	r3, r3, #4
   21f5e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   21f60:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   21f62:	2c00      	cmp	r4, #0
   21f64:	d0cf      	beq.n	21f06 <work_queue_main+0x1a>
	__asm__ volatile(
   21f66:	f386 8811 	msr	BASEPRI, r6
   21f6a:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   21f6e:	4620      	mov	r0, r4
   21f70:	4798      	blx	r3
	__asm__ volatile(
   21f72:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f76:	f3ef 8611 	mrs	r6, BASEPRI
   21f7a:	f383 8812 	msr	BASEPRI_MAX, r3
   21f7e:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   21f82:	68e3      	ldr	r3, [r4, #12]
   21f84:	f023 0301 	bic.w	r3, r3, #1
   21f88:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21f8a:	f013 0f02 	tst.w	r3, #2
   21f8e:	d11e      	bne.n	21fce <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   21f90:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
   21f94:	f023 0302 	bic.w	r3, r3, #2
   21f98:	f8c5 30d0 	str.w	r3, [r5, #208]	; 0xd0
	return (*flagp & BIT(bit)) != 0U;
   21f9c:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   21fa0:	f386 8811 	msr	BASEPRI, r6
   21fa4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   21fa8:	2b00      	cmp	r3, #0
   21faa:	d1ba      	bne.n	21f22 <work_queue_main+0x36>
	z_impl_k_yield();
   21fac:	f000 fb86 	bl	226bc <z_impl_k_yield>
}
   21fb0:	e7b7      	b.n	21f22 <work_queue_main+0x36>
	list->tail = node;
   21fb2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
}
   21fb6:	e7c7      	b.n	21f48 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21fb8:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21fbc:	2200      	movs	r2, #0
   21fbe:	2101      	movs	r1, #1
   21fc0:	4638      	mov	r0, r7
   21fc2:	f009 ffb4 	bl	2bf2e <z_sched_wake>
   21fc6:	2800      	cmp	r0, #0
   21fc8:	d1f8      	bne.n	21fbc <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   21fca:	2300      	movs	r3, #0
   21fcc:	e7c9      	b.n	21f62 <work_queue_main+0x76>
				finalize_cancel_locked(work);
   21fce:	4620      	mov	r0, r4
   21fd0:	f7ff ff2e 	bl	21e30 <finalize_cancel_locked>
   21fd4:	e7dc      	b.n	21f90 <work_queue_main+0xa4>
   21fd6:	bf00      	nop
   21fd8:	20003e34 	.word	0x20003e34

00021fdc <schedule_for_queue_locked>:
 * @retval 1 to indicate successfully scheduled.
 */
static int schedule_for_queue_locked(struct k_work_q **queuep,
				     struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21fdc:	b570      	push	{r4, r5, r6, lr}
   21fde:	4606      	mov	r6, r0
   21fe0:	4608      	mov	r0, r1
   21fe2:	4614      	mov	r4, r2
   21fe4:	461d      	mov	r5, r3
	int ret = 1;
	struct k_work *work = &dwork->work;

	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21fe6:	ea54 0305 	orrs.w	r3, r4, r5
   21fea:	d00c      	beq.n	22006 <schedule_for_queue_locked+0x2a>
	*flagp |= BIT(bit);
   21fec:	68cb      	ldr	r3, [r1, #12]
   21fee:	f043 0308 	orr.w	r3, r3, #8
   21ff2:	60cb      	str	r3, [r1, #12]
		return submit_to_queue_locked(work, queuep);
	}

	flag_set(&work->flags, K_WORK_DELAYED_BIT);
	dwork->queue = *queuep;
   21ff4:	6833      	ldr	r3, [r6, #0]
   21ff6:	628b      	str	r3, [r1, #40]	; 0x28

	/* Add timeout */
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21ff8:	462b      	mov	r3, r5
   21ffa:	4905      	ldr	r1, [pc, #20]	; (22010 <schedule_for_queue_locked+0x34>)
   21ffc:	3010      	adds	r0, #16
   21ffe:	f000 fccf 	bl	229a0 <z_add_timeout>

	return ret;
   22002:	2001      	movs	r0, #1
}
   22004:	bd70      	pop	{r4, r5, r6, pc}
		return submit_to_queue_locked(work, queuep);
   22006:	4631      	mov	r1, r6
   22008:	f7ff fea6 	bl	21d58 <submit_to_queue_locked>
   2200c:	e7fa      	b.n	22004 <schedule_for_queue_locked+0x28>
   2200e:	bf00      	nop
   22010:	0002ba81 	.word	0x0002ba81

00022014 <k_work_submit>:
{
   22014:	b508      	push	{r3, lr}
   22016:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22018:	4801      	ldr	r0, [pc, #4]	; (22020 <k_work_submit+0xc>)
   2201a:	f009 fd6b 	bl	2baf4 <k_work_submit_to_queue>
}
   2201e:	bd08      	pop	{r3, pc}
   22020:	200021e8 	.word	0x200021e8

00022024 <k_work_queue_start>:
{
   22024:	b5f0      	push	{r4, r5, r6, r7, lr}
   22026:	b089      	sub	sp, #36	; 0x24
   22028:	4604      	mov	r4, r0
   2202a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   2202c:	2000      	movs	r0, #0
   2202e:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = NULL;
   22032:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   22036:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   2203a:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   2203e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
   22042:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
	list->head = (sys_dnode_t *)list;
   22046:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	list->tail = (sys_dnode_t *)list;
   2204a:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
	if ((cfg != NULL) && cfg->no_yield) {
   2204e:	b1fd      	cbz	r5, 22090 <k_work_queue_start+0x6c>
   22050:	7928      	ldrb	r0, [r5, #4]
   22052:	b9f8      	cbnz	r0, 22094 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22054:	2001      	movs	r0, #1
	*flagp = flags;
   22056:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2205a:	f04f 36ff 	mov.w	r6, #4294967295
   2205e:	f04f 37ff 	mov.w	r7, #4294967295
   22062:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22066:	2000      	movs	r0, #0
   22068:	9004      	str	r0, [sp, #16]
   2206a:	9303      	str	r3, [sp, #12]
   2206c:	9002      	str	r0, [sp, #8]
   2206e:	9001      	str	r0, [sp, #4]
   22070:	9400      	str	r4, [sp, #0]
   22072:	4b0a      	ldr	r3, [pc, #40]	; (2209c <k_work_queue_start+0x78>)
   22074:	4620      	mov	r0, r4
   22076:	f009 fb7c 	bl	2b772 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   2207a:	b125      	cbz	r5, 22086 <k_work_queue_start+0x62>
   2207c:	6829      	ldr	r1, [r5, #0]
   2207e:	b111      	cbz	r1, 22086 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   22080:	4620      	mov	r0, r4
   22082:	f7ff fc0f 	bl	218a4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   22086:	4620      	mov	r0, r4
   22088:	f009 fb64 	bl	2b754 <z_impl_k_thread_start>
}
   2208c:	b009      	add	sp, #36	; 0x24
   2208e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   22090:	2001      	movs	r0, #1
   22092:	e7e0      	b.n	22056 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   22094:	f240 1001 	movw	r0, #257	; 0x101
   22098:	e7dd      	b.n	22056 <k_work_queue_start+0x32>
   2209a:	bf00      	nop
   2209c:	00021eed 	.word	0x00021eed

000220a0 <k_work_schedule>:
	return ret;
}

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   220a0:	b508      	push	{r3, lr}
   220a2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   220a4:	4801      	ldr	r0, [pc, #4]	; (220ac <k_work_schedule+0xc>)
   220a6:	f009 fd51 	bl	2bb4c <k_work_schedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule, dwork, delay, ret);

	return ret;
}
   220aa:	bd08      	pop	{r3, pc}
   220ac:	200021e8 	.word	0x200021e8

000220b0 <k_work_reschedule>:
	return ret;
}

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   220b0:	b508      	push	{r3, lr}
   220b2:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   220b4:	4801      	ldr	r0, [pc, #4]	; (220bc <k_work_reschedule+0xc>)
   220b6:	f009 fd63 	bl	2bb80 <k_work_reschedule_for_queue>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule, dwork, delay, ret);

	return ret;
}
   220ba:	bd08      	pop	{r3, pc}
   220bc:	200021e8 	.word	0x200021e8

000220c0 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   220c0:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   220c2:	f1b3 3fff 	cmp.w	r3, #4294967295
   220c6:	bf08      	it	eq
   220c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   220cc:	d100      	bne.n	220d0 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   220ce:	bd38      	pop	{r3, r4, r5, pc}
   220d0:	4902      	ldr	r1, [pc, #8]	; (220dc <add_thread_timeout+0x1c>)
   220d2:	3018      	adds	r0, #24
   220d4:	f000 fc64 	bl	229a0 <z_add_timeout>
   220d8:	e7f9      	b.n	220ce <add_thread_timeout+0xe>
   220da:	bf00      	nop
   220dc:	0002bd6b 	.word	0x0002bd6b

000220e0 <z_reset_time_slice>:
{
   220e0:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   220e2:	4b08      	ldr	r3, [pc, #32]	; (22104 <z_reset_time_slice+0x24>)
   220e4:	681b      	ldr	r3, [r3, #0]
   220e6:	b903      	cbnz	r3, 220ea <z_reset_time_slice+0xa>
}
   220e8:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   220ea:	f7fc fc1f 	bl	1e92c <sys_clock_elapsed>
   220ee:	4603      	mov	r3, r0
   220f0:	4a04      	ldr	r2, [pc, #16]	; (22104 <z_reset_time_slice+0x24>)
   220f2:	6810      	ldr	r0, [r2, #0]
   220f4:	4403      	add	r3, r0
   220f6:	4a04      	ldr	r2, [pc, #16]	; (22108 <z_reset_time_slice+0x28>)
   220f8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   220fa:	2100      	movs	r1, #0
   220fc:	f009 ff99 	bl	2c032 <z_set_timeout_expiry>
}
   22100:	e7f2      	b.n	220e8 <z_reset_time_slice+0x8>
   22102:	bf00      	nop
   22104:	20003e44 	.word	0x20003e44
   22108:	20003e08 	.word	0x20003e08

0002210c <k_sched_time_slice_set>:
{
   2210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22110:	4606      	mov	r6, r0
   22112:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   22114:	2300      	movs	r3, #0
	__asm__ volatile(
   22116:	f04f 0240 	mov.w	r2, #64	; 0x40
   2211a:	f3ef 8711 	mrs	r7, BASEPRI
   2211e:	f382 8812 	msr	BASEPRI_MAX, r2
   22122:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   22126:	e009      	b.n	2213c <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   22128:	4b13      	ldr	r3, [pc, #76]	; (22178 <k_sched_time_slice_set+0x6c>)
   2212a:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   2212e:	f7ff ffd7 	bl	220e0 <z_reset_time_slice>
	__asm__ volatile(
   22132:	f387 8811 	msr	BASEPRI, r7
   22136:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2213a:	2301      	movs	r3, #1
   2213c:	b9cb      	cbnz	r3, 22172 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   2213e:	2300      	movs	r3, #0
   22140:	4a0e      	ldr	r2, [pc, #56]	; (2217c <k_sched_time_slice_set+0x70>)
   22142:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   22144:	0c75      	lsrs	r5, r6, #17
   22146:	03f4      	lsls	r4, r6, #15
   22148:	f240 30e7 	movw	r0, #999	; 0x3e7
   2214c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   22150:	2300      	movs	r3, #0
   22152:	1820      	adds	r0, r4, r0
   22154:	f04f 0100 	mov.w	r1, #0
   22158:	eb45 0101 	adc.w	r1, r5, r1
   2215c:	f7de ffd0 	bl	1100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   22160:	4b07      	ldr	r3, [pc, #28]	; (22180 <k_sched_time_slice_set+0x74>)
   22162:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   22164:	2e00      	cmp	r6, #0
   22166:	dddf      	ble.n	22128 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   22168:	2802      	cmp	r0, #2
   2216a:	bfb8      	it	lt
   2216c:	2002      	movlt	r0, #2
   2216e:	6018      	str	r0, [r3, #0]
   22170:	e7da      	b.n	22128 <k_sched_time_slice_set+0x1c>
}
   22172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22176:	bf00      	nop
   22178:	20003e40 	.word	0x20003e40
   2217c:	20003e08 	.word	0x20003e08
   22180:	20003e44 	.word	0x20003e44

00022184 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   22184:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   22186:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22188:	b921      	cbnz	r1, 22194 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2218a:	f3ef 8305 	mrs	r3, IPSR
   2218e:	b913      	cbnz	r3, 22196 <z_reschedule+0x12>
   22190:	2101      	movs	r1, #1
   22192:	e000      	b.n	22196 <z_reschedule+0x12>
   22194:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   22196:	f011 0f01 	tst.w	r1, #1
   2219a:	d007      	beq.n	221ac <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   2219c:	4b06      	ldr	r3, [pc, #24]	; (221b8 <z_reschedule+0x34>)
   2219e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   221a0:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   221a2:	429a      	cmp	r2, r3
   221a4:	d002      	beq.n	221ac <z_reschedule+0x28>
	ret = arch_swap(key);
   221a6:	f7f3 f84b 	bl	15240 <arch_swap>
		z_swap(lock, key);
   221aa:	e003      	b.n	221b4 <z_reschedule+0x30>
   221ac:	f380 8811 	msr	BASEPRI, r0
   221b0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   221b4:	bd08      	pop	{r3, pc}
   221b6:	bf00      	nop
   221b8:	20003e08 	.word	0x20003e08

000221bc <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   221bc:	2300      	movs	r3, #0
	__asm__ volatile(
   221be:	f04f 0240 	mov.w	r2, #64	; 0x40
   221c2:	f3ef 8111 	mrs	r1, BASEPRI
   221c6:	f382 8812 	msr	BASEPRI_MAX, r2
   221ca:	f3bf 8f6f 	isb	sy
   221ce:	b953      	cbnz	r3, 221e6 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   221d0:	4b05      	ldr	r3, [pc, #20]	; (221e8 <k_sched_lock+0x2c>)
   221d2:	689a      	ldr	r2, [r3, #8]
   221d4:	7bd3      	ldrb	r3, [r2, #15]
   221d6:	3b01      	subs	r3, #1
   221d8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   221da:	f381 8811 	msr	BASEPRI, r1
   221de:	f3bf 8f6f 	isb	sy
   221e2:	2301      	movs	r3, #1
   221e4:	e7f3      	b.n	221ce <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   221e6:	4770      	bx	lr
   221e8:	20003e08 	.word	0x20003e08

000221ec <update_cache>:
{
   221ec:	b538      	push	{r3, r4, r5, lr}
   221ee:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   221f0:	480f      	ldr	r0, [pc, #60]	; (22230 <update_cache+0x44>)
   221f2:	f009 fd97 	bl	2bd24 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   221f6:	4605      	mov	r5, r0
   221f8:	b170      	cbz	r0, 22218 <update_cache+0x2c>
	if (preempt_ok != 0) {
   221fa:	b984      	cbnz	r4, 2221e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   221fc:	4b0d      	ldr	r3, [pc, #52]	; (22234 <update_cache+0x48>)
   221fe:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   22200:	7b5a      	ldrb	r2, [r3, #13]
   22202:	f012 0f1f 	tst.w	r2, #31
   22206:	d10a      	bne.n	2221e <update_cache+0x32>
	return node->next != NULL;
   22208:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   2220a:	b942      	cbnz	r2, 2221e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2220c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   2220e:	2a7f      	cmp	r2, #127	; 0x7f
   22210:	d905      	bls.n	2221e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   22212:	4a08      	ldr	r2, [pc, #32]	; (22234 <update_cache+0x48>)
   22214:	61d3      	str	r3, [r2, #28]
   22216:	e00a      	b.n	2222e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   22218:	4b06      	ldr	r3, [pc, #24]	; (22234 <update_cache+0x48>)
   2221a:	68dd      	ldr	r5, [r3, #12]
   2221c:	e7ed      	b.n	221fa <update_cache+0xe>
		if (thread != _current) {
   2221e:	4b05      	ldr	r3, [pc, #20]	; (22234 <update_cache+0x48>)
   22220:	689b      	ldr	r3, [r3, #8]
   22222:	42ab      	cmp	r3, r5
   22224:	d001      	beq.n	2222a <update_cache+0x3e>
			z_reset_time_slice();
   22226:	f7ff ff5b 	bl	220e0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2222a:	4b02      	ldr	r3, [pc, #8]	; (22234 <update_cache+0x48>)
   2222c:	61dd      	str	r5, [r3, #28]
}
   2222e:	bd38      	pop	{r3, r4, r5, pc}
   22230:	20003e28 	.word	0x20003e28
   22234:	20003e08 	.word	0x20003e08

00022238 <move_thread_to_end_of_prio_q>:
{
   22238:	b538      	push	{r3, r4, r5, lr}
   2223a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   2223c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2223e:	f990 300d 	ldrsb.w	r3, [r0, #13]
   22242:	2b00      	cmp	r3, #0
   22244:	db28      	blt.n	22298 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   22246:	7b6b      	ldrb	r3, [r5, #13]
   22248:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2224c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   2224e:	4b1a      	ldr	r3, [pc, #104]	; (222b8 <move_thread_to_end_of_prio_q+0x80>)
   22250:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22254:	429c      	cmp	r4, r3
   22256:	d02d      	beq.n	222b4 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22258:	b16c      	cbz	r4, 22276 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2225a:	4621      	mov	r1, r4
   2225c:	4628      	mov	r0, r5
   2225e:	f009 fcf8 	bl	2bc52 <z_sched_prio_cmp>
   22262:	2800      	cmp	r0, #0
   22264:	dc20      	bgt.n	222a8 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22266:	b134      	cbz	r4, 22276 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   22268:	4b13      	ldr	r3, [pc, #76]	; (222b8 <move_thread_to_end_of_prio_q+0x80>)
   2226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2226c:	429c      	cmp	r4, r3
   2226e:	d002      	beq.n	22276 <move_thread_to_end_of_prio_q+0x3e>
   22270:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22272:	2c00      	cmp	r4, #0
   22274:	d1f0      	bne.n	22258 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
   22276:	4b10      	ldr	r3, [pc, #64]	; (222b8 <move_thread_to_end_of_prio_q+0x80>)
   22278:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
   2227a:	f103 0120 	add.w	r1, r3, #32
   2227e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   22280:	606a      	str	r2, [r5, #4]

	tail->next = node;
   22282:	6015      	str	r5, [r2, #0]
	list->tail = node;
   22284:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   22286:	4b0c      	ldr	r3, [pc, #48]	; (222b8 <move_thread_to_end_of_prio_q+0x80>)
   22288:	6898      	ldr	r0, [r3, #8]
   2228a:	42a8      	cmp	r0, r5
   2228c:	bf14      	ite	ne
   2228e:	2000      	movne	r0, #0
   22290:	2001      	moveq	r0, #1
   22292:	f7ff ffab 	bl	221ec <update_cache>
}
   22296:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22298:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   2229c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   2229e:	4601      	mov	r1, r0
   222a0:	4806      	ldr	r0, [pc, #24]	; (222bc <move_thread_to_end_of_prio_q+0x84>)
   222a2:	f009 fd14 	bl	2bcce <z_priq_dumb_remove>
}
   222a6:	e7ce      	b.n	22246 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   222a8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   222aa:	606b      	str	r3, [r5, #4]
	node->next = successor;
   222ac:	602c      	str	r4, [r5, #0]
	prev->next = node;
   222ae:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   222b0:	6065      	str	r5, [r4, #4]
}
   222b2:	e7e8      	b.n	22286 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   222b4:	2400      	movs	r4, #0
   222b6:	e7cf      	b.n	22258 <move_thread_to_end_of_prio_q+0x20>
   222b8:	20003e08 	.word	0x20003e08
   222bc:	20003e28 	.word	0x20003e28

000222c0 <z_time_slice>:
{
   222c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   222c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   222c6:	f3ef 8411 	mrs	r4, BASEPRI
   222ca:	f383 8812 	msr	BASEPRI_MAX, r3
   222ce:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   222d2:	4b1c      	ldr	r3, [pc, #112]	; (22344 <z_time_slice+0x84>)
   222d4:	689b      	ldr	r3, [r3, #8]
   222d6:	4a1c      	ldr	r2, [pc, #112]	; (22348 <z_time_slice+0x88>)
   222d8:	6812      	ldr	r2, [r2, #0]
   222da:	4293      	cmp	r3, r2
   222dc:	d01d      	beq.n	2231a <z_time_slice+0x5a>
	pending_current = NULL;
   222de:	4a1a      	ldr	r2, [pc, #104]	; (22348 <z_time_slice+0x88>)
   222e0:	2100      	movs	r1, #0
   222e2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   222e4:	4a19      	ldr	r2, [pc, #100]	; (2234c <z_time_slice+0x8c>)
   222e6:	6812      	ldr	r2, [r2, #0]
   222e8:	b322      	cbz	r2, 22334 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   222ea:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   222ec:	2a7f      	cmp	r2, #127	; 0x7f
   222ee:	d821      	bhi.n	22334 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   222f0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   222f2:	f012 0f1f 	tst.w	r2, #31
   222f6:	d11d      	bne.n	22334 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   222f8:	f993 100e 	ldrsb.w	r1, [r3, #14]
   222fc:	4a14      	ldr	r2, [pc, #80]	; (22350 <z_time_slice+0x90>)
   222fe:	6812      	ldr	r2, [r2, #0]
   22300:	4291      	cmp	r1, r2
   22302:	db17      	blt.n	22334 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   22304:	4a13      	ldr	r2, [pc, #76]	; (22354 <z_time_slice+0x94>)
   22306:	4293      	cmp	r3, r2
   22308:	d014      	beq.n	22334 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   2230a:	4a0e      	ldr	r2, [pc, #56]	; (22344 <z_time_slice+0x84>)
   2230c:	6912      	ldr	r2, [r2, #16]
   2230e:	4282      	cmp	r2, r0
   22310:	dd0a      	ble.n	22328 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   22312:	1a10      	subs	r0, r2, r0
   22314:	4b0b      	ldr	r3, [pc, #44]	; (22344 <z_time_slice+0x84>)
   22316:	6118      	str	r0, [r3, #16]
   22318:	e00f      	b.n	2233a <z_time_slice+0x7a>
		z_reset_time_slice();
   2231a:	f7ff fee1 	bl	220e0 <z_reset_time_slice>
	__asm__ volatile(
   2231e:	f384 8811 	msr	BASEPRI, r4
   22322:	f3bf 8f6f 	isb	sy
		return;
   22326:	e00c      	b.n	22342 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   22328:	4618      	mov	r0, r3
   2232a:	f7ff ff85 	bl	22238 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   2232e:	f7ff fed7 	bl	220e0 <z_reset_time_slice>
   22332:	e002      	b.n	2233a <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   22334:	4b03      	ldr	r3, [pc, #12]	; (22344 <z_time_slice+0x84>)
   22336:	2200      	movs	r2, #0
   22338:	611a      	str	r2, [r3, #16]
   2233a:	f384 8811 	msr	BASEPRI, r4
   2233e:	f3bf 8f6f 	isb	sy
}
   22342:	bd10      	pop	{r4, pc}
   22344:	20003e08 	.word	0x20003e08
   22348:	20003e3c 	.word	0x20003e3c
   2234c:	20003e44 	.word	0x20003e44
   22350:	20003e40 	.word	0x20003e40
   22354:	20002078 	.word	0x20002078

00022358 <ready_thread>:
{
   22358:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   2235a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2235c:	f990 200d 	ldrsb.w	r2, [r0, #13]
   22360:	2a00      	cmp	r2, #0
   22362:	db2d      	blt.n	223c0 <ready_thread+0x68>
   22364:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22366:	f013 0f1f 	tst.w	r3, #31
   2236a:	d105      	bne.n	22378 <ready_thread+0x20>
	return node->next != NULL;
   2236c:	6982      	ldr	r2, [r0, #24]
   2236e:	b10a      	cbz	r2, 22374 <ready_thread+0x1c>
   22370:	2200      	movs	r2, #0
   22372:	e002      	b.n	2237a <ready_thread+0x22>
   22374:	2201      	movs	r2, #1
   22376:	e000      	b.n	2237a <ready_thread+0x22>
   22378:	2200      	movs	r2, #0
   2237a:	b30a      	cbz	r2, 223c0 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   2237c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22380:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   22382:	4b14      	ldr	r3, [pc, #80]	; (223d4 <ready_thread+0x7c>)
   22384:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22388:	429d      	cmp	r5, r3
   2238a:	d020      	beq.n	223ce <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2238c:	b16d      	cbz	r5, 223aa <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2238e:	4629      	mov	r1, r5
   22390:	4620      	mov	r0, r4
   22392:	f009 fc5e 	bl	2bc52 <z_sched_prio_cmp>
   22396:	2800      	cmp	r0, #0
   22398:	dc13      	bgt.n	223c2 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2239a:	b135      	cbz	r5, 223aa <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   2239c:	4b0d      	ldr	r3, [pc, #52]	; (223d4 <ready_thread+0x7c>)
   2239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   223a0:	429d      	cmp	r5, r3
   223a2:	d002      	beq.n	223aa <ready_thread+0x52>
   223a4:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   223a6:	2d00      	cmp	r5, #0
   223a8:	d1f0      	bne.n	2238c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   223aa:	4b0a      	ldr	r3, [pc, #40]	; (223d4 <ready_thread+0x7c>)
   223ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   223ae:	f103 0120 	add.w	r1, r3, #32
   223b2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   223b4:	6062      	str	r2, [r4, #4]
	tail->next = node;
   223b6:	6014      	str	r4, [r2, #0]
	list->tail = node;
   223b8:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   223ba:	2000      	movs	r0, #0
   223bc:	f7ff ff16 	bl	221ec <update_cache>
}
   223c0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   223c2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   223c4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   223c6:	6025      	str	r5, [r4, #0]
	prev->next = node;
   223c8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   223ca:	606c      	str	r4, [r5, #4]
}
   223cc:	e7f5      	b.n	223ba <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   223ce:	2500      	movs	r5, #0
   223d0:	e7dc      	b.n	2238c <ready_thread+0x34>
   223d2:	bf00      	nop
   223d4:	20003e08 	.word	0x20003e08

000223d8 <z_sched_start>:
{
   223d8:	b510      	push	{r4, lr}
	__asm__ volatile(
   223da:	f04f 0340 	mov.w	r3, #64	; 0x40
   223de:	f3ef 8411 	mrs	r4, BASEPRI
   223e2:	f383 8812 	msr	BASEPRI_MAX, r3
   223e6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   223ea:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   223ec:	f013 0f04 	tst.w	r3, #4
   223f0:	d104      	bne.n	223fc <z_sched_start+0x24>
	__asm__ volatile(
   223f2:	f384 8811 	msr	BASEPRI, r4
   223f6:	f3bf 8f6f 	isb	sy
}
   223fa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   223fc:	f023 0304 	bic.w	r3, r3, #4
   22400:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   22402:	f7ff ffa9 	bl	22358 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   22406:	4621      	mov	r1, r4
   22408:	4801      	ldr	r0, [pc, #4]	; (22410 <z_sched_start+0x38>)
   2240a:	f7ff febb 	bl	22184 <z_reschedule>
   2240e:	e7f4      	b.n	223fa <z_sched_start+0x22>
   22410:	20003e40 	.word	0x20003e40

00022414 <unready_thread>:
{
   22414:	b510      	push	{r4, lr}
   22416:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   22418:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   2241a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   2241e:	2b00      	cmp	r3, #0
   22420:	db08      	blt.n	22434 <unready_thread+0x20>
	update_cache(thread == _current);
   22422:	4b08      	ldr	r3, [pc, #32]	; (22444 <unready_thread+0x30>)
   22424:	6898      	ldr	r0, [r3, #8]
   22426:	42a0      	cmp	r0, r4
   22428:	bf14      	ite	ne
   2242a:	2000      	movne	r0, #0
   2242c:	2001      	moveq	r0, #1
   2242e:	f7ff fedd 	bl	221ec <update_cache>
}
   22432:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22434:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   22438:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   2243a:	4601      	mov	r1, r0
   2243c:	4802      	ldr	r0, [pc, #8]	; (22448 <unready_thread+0x34>)
   2243e:	f009 fc46 	bl	2bcce <z_priq_dumb_remove>
}
   22442:	e7ee      	b.n	22422 <unready_thread+0xe>
   22444:	20003e08 	.word	0x20003e08
   22448:	20003e28 	.word	0x20003e28

0002244c <z_pend_curr>:
{
   2244c:	b510      	push	{r4, lr}
   2244e:	460c      	mov	r4, r1
   22450:	4611      	mov	r1, r2
	pending_current = _current;
   22452:	4b06      	ldr	r3, [pc, #24]	; (2246c <z_pend_curr+0x20>)
   22454:	6898      	ldr	r0, [r3, #8]
   22456:	4b06      	ldr	r3, [pc, #24]	; (22470 <z_pend_curr+0x24>)
   22458:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   2245a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2245e:	f009 fce2 	bl	2be26 <pend>
   22462:	4620      	mov	r0, r4
   22464:	f7f2 feec 	bl	15240 <arch_swap>
}
   22468:	bd10      	pop	{r4, pc}
   2246a:	bf00      	nop
   2246c:	20003e08 	.word	0x20003e08
   22470:	20003e3c 	.word	0x20003e3c

00022474 <z_set_prio>:
{
   22474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22478:	4604      	mov	r4, r0
   2247a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   2247c:	2300      	movs	r3, #0
	__asm__ volatile(
   2247e:	f04f 0240 	mov.w	r2, #64	; 0x40
   22482:	f3ef 8611 	mrs	r6, BASEPRI
   22486:	f382 8812 	msr	BASEPRI_MAX, r2
   2248a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   2248e:	4698      	mov	r8, r3
   22490:	e008      	b.n	224a4 <z_set_prio+0x30>
		if (need_sched) {
   22492:	f012 0801 	ands.w	r8, r2, #1
   22496:	d111      	bne.n	224bc <z_set_prio+0x48>
			thread->base.prio = prio;
   22498:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   2249a:	f386 8811 	msr	BASEPRI, r6
   2249e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   224a2:	2301      	movs	r3, #1
   224a4:	461a      	mov	r2, r3
   224a6:	2b00      	cmp	r3, #0
   224a8:	d13d      	bne.n	22526 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   224aa:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   224ac:	f013 0f1f 	tst.w	r3, #31
   224b0:	d1ef      	bne.n	22492 <z_set_prio+0x1e>
	return node->next != NULL;
   224b2:	69a1      	ldr	r1, [r4, #24]
   224b4:	2900      	cmp	r1, #0
   224b6:	d1ec      	bne.n	22492 <z_set_prio+0x1e>
   224b8:	2201      	movs	r2, #1
   224ba:	e7ea      	b.n	22492 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   224bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   224c0:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   224c2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 22530 <z_set_prio+0xbc>
   224c6:	4621      	mov	r1, r4
   224c8:	4648      	mov	r0, r9
   224ca:	f009 fc00 	bl	2bcce <z_priq_dumb_remove>
				thread->base.prio = prio;
   224ce:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   224d0:	7b63      	ldrb	r3, [r4, #13]
   224d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   224d6:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   224d8:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224dc:	454d      	cmp	r5, r9
   224de:	d020      	beq.n	22522 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   224e0:	b16d      	cbz	r5, 224fe <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   224e2:	4629      	mov	r1, r5
   224e4:	4620      	mov	r0, r4
   224e6:	f009 fbb4 	bl	2bc52 <z_sched_prio_cmp>
   224ea:	2800      	cmp	r0, #0
   224ec:	dc13      	bgt.n	22516 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   224ee:	b135      	cbz	r5, 224fe <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   224f0:	4b0e      	ldr	r3, [pc, #56]	; (2252c <z_set_prio+0xb8>)
   224f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   224f4:	429d      	cmp	r5, r3
   224f6:	d002      	beq.n	224fe <z_set_prio+0x8a>
   224f8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   224fa:	2d00      	cmp	r5, #0
   224fc:	d1f0      	bne.n	224e0 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   224fe:	4b0b      	ldr	r3, [pc, #44]	; (2252c <z_set_prio+0xb8>)
   22500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   22502:	f103 0120 	add.w	r1, r3, #32
   22506:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   22508:	6062      	str	r2, [r4, #4]
	tail->next = node;
   2250a:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2250c:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   2250e:	2001      	movs	r0, #1
   22510:	f7ff fe6c 	bl	221ec <update_cache>
   22514:	e7c1      	b.n	2249a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   22516:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   22518:	6063      	str	r3, [r4, #4]
	node->next = successor;
   2251a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   2251c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2251e:	606c      	str	r4, [r5, #4]
}
   22520:	e7f5      	b.n	2250e <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22522:	2500      	movs	r5, #0
   22524:	e7dc      	b.n	224e0 <z_set_prio+0x6c>
}
   22526:	4640      	mov	r0, r8
   22528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2252c:	20003e08 	.word	0x20003e08
   22530:	20003e28 	.word	0x20003e28

00022534 <z_impl_k_thread_suspend>:
{
   22534:	b538      	push	{r3, r4, r5, lr}
   22536:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22538:	3018      	adds	r0, #24
   2253a:	f009 fd46 	bl	2bfca <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   2253e:	2300      	movs	r3, #0
	__asm__ volatile(
   22540:	f04f 0240 	mov.w	r2, #64	; 0x40
   22544:	f3ef 8511 	mrs	r5, BASEPRI
   22548:	f382 8812 	msr	BASEPRI_MAX, r2
   2254c:	f3bf 8f6f 	isb	sy
   22550:	e010      	b.n	22574 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22552:	7b63      	ldrb	r3, [r4, #13]
   22554:	f043 0310 	orr.w	r3, r3, #16
   22558:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2255a:	4b15      	ldr	r3, [pc, #84]	; (225b0 <z_impl_k_thread_suspend+0x7c>)
   2255c:	6898      	ldr	r0, [r3, #8]
   2255e:	42a0      	cmp	r0, r4
   22560:	bf14      	ite	ne
   22562:	2000      	movne	r0, #0
   22564:	2001      	moveq	r0, #1
   22566:	f7ff fe41 	bl	221ec <update_cache>
	__asm__ volatile(
   2256a:	f385 8811 	msr	BASEPRI, r5
   2256e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   22572:	2301      	movs	r3, #1
   22574:	b963      	cbnz	r3, 22590 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   22576:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   22578:	f994 300d 	ldrsb.w	r3, [r4, #13]
   2257c:	2b00      	cmp	r3, #0
   2257e:	dae8      	bge.n	22552 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22580:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   22584:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   22586:	4621      	mov	r1, r4
   22588:	480a      	ldr	r0, [pc, #40]	; (225b4 <z_impl_k_thread_suspend+0x80>)
   2258a:	f009 fba0 	bl	2bcce <z_priq_dumb_remove>
}
   2258e:	e7e0      	b.n	22552 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   22590:	4b07      	ldr	r3, [pc, #28]	; (225b0 <z_impl_k_thread_suspend+0x7c>)
   22592:	689b      	ldr	r3, [r3, #8]
   22594:	42a3      	cmp	r3, r4
   22596:	d000      	beq.n	2259a <z_impl_k_thread_suspend+0x66>
}
   22598:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   2259a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2259e:	f3ef 8011 	mrs	r0, BASEPRI
   225a2:	f383 8812 	msr	BASEPRI_MAX, r3
   225a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   225aa:	f009 fb7b 	bl	2bca4 <z_reschedule_irqlock>
   225ae:	e7f3      	b.n	22598 <z_impl_k_thread_suspend+0x64>
   225b0:	20003e08 	.word	0x20003e08
   225b4:	20003e28 	.word	0x20003e28

000225b8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   225b8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   225ba:	2300      	movs	r3, #0
   225bc:	f04f 0240 	mov.w	r2, #64	; 0x40
   225c0:	f3ef 8411 	mrs	r4, BASEPRI
   225c4:	f382 8812 	msr	BASEPRI_MAX, r2
   225c8:	f3bf 8f6f 	isb	sy
   225cc:	b96b      	cbnz	r3, 225ea <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   225ce:	4b0c      	ldr	r3, [pc, #48]	; (22600 <k_sched_unlock+0x48>)
   225d0:	689a      	ldr	r2, [r3, #8]
   225d2:	7bd3      	ldrb	r3, [r2, #15]
   225d4:	3301      	adds	r3, #1
   225d6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   225d8:	2000      	movs	r0, #0
   225da:	f7ff fe07 	bl	221ec <update_cache>
	__asm__ volatile(
   225de:	f384 8811 	msr	BASEPRI, r4
   225e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   225e6:	2301      	movs	r3, #1
   225e8:	e7f0      	b.n	225cc <k_sched_unlock+0x14>
	__asm__ volatile(
   225ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   225ee:	f3ef 8011 	mrs	r0, BASEPRI
   225f2:	f383 8812 	msr	BASEPRI_MAX, r3
   225f6:	f3bf 8f6f 	isb	sy
   225fa:	f009 fb53 	bl	2bca4 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   225fe:	bd10      	pop	{r4, pc}
   22600:	20003e08 	.word	0x20003e08

00022604 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   22604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   22606:	7b43      	ldrb	r3, [r0, #13]
   22608:	f013 0f08 	tst.w	r3, #8
   2260c:	d145      	bne.n	2269a <end_thread+0x96>
   2260e:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   22610:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22614:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   22618:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   2261a:	f013 0f80 	tst.w	r3, #128	; 0x80
   2261e:	d114      	bne.n	2264a <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   22620:	68ab      	ldr	r3, [r5, #8]
   22622:	b15b      	cbz	r3, 2263c <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   22624:	4628      	mov	r0, r5
   22626:	f009 fb12 	bl	2bc4e <pended_on_thread>
   2262a:	4629      	mov	r1, r5
   2262c:	f009 fb4f 	bl	2bcce <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22630:	7b6b      	ldrb	r3, [r5, #13]
   22632:	f023 0302 	bic.w	r3, r3, #2
   22636:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   22638:	2300      	movs	r3, #0
   2263a:	60ab      	str	r3, [r5, #8]
   2263c:	f105 0018 	add.w	r0, r5, #24
   22640:	f009 fcc3 	bl	2bfca <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   22644:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22648:	e01c      	b.n	22684 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2264a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2264e:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   22650:	4601      	mov	r1, r0
   22652:	4812      	ldr	r0, [pc, #72]	; (2269c <end_thread+0x98>)
   22654:	f009 fb3b 	bl	2bcce <z_priq_dumb_remove>
}
   22658:	e7e2      	b.n	22620 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2265a:	4620      	mov	r0, r4
   2265c:	f009 faf7 	bl	2bc4e <pended_on_thread>
   22660:	4621      	mov	r1, r4
   22662:	f009 fb34 	bl	2bcce <z_priq_dumb_remove>
   22666:	7b63      	ldrb	r3, [r4, #13]
   22668:	f023 0302 	bic.w	r3, r3, #2
   2266c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2266e:	2600      	movs	r6, #0
   22670:	60a6      	str	r6, [r4, #8]
   22672:	f104 0018 	add.w	r0, r4, #24
   22676:	f009 fca8 	bl	2bfca <z_abort_timeout>
   2267a:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
		ready_thread(thread);
   2267e:	4620      	mov	r0, r4
   22680:	f7ff fe6a 	bl	22358 <ready_thread>
	return list->head == list;
   22684:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22686:	42bc      	cmp	r4, r7
   22688:	d001      	beq.n	2268e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2268a:	2c00      	cmp	r4, #0
   2268c:	d1e5      	bne.n	2265a <end_thread+0x56>
		update_cache(1);
   2268e:	2001      	movs	r0, #1
   22690:	f7ff fdac 	bl	221ec <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   22694:	4628      	mov	r0, r5
   22696:	f7ff f8e5 	bl	21864 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   2269a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2269c:	20003e28 	.word	0x20003e28

000226a0 <z_sched_init>:
{
   226a0:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   226a2:	4b05      	ldr	r3, [pc, #20]	; (226b8 <z_sched_init+0x18>)
   226a4:	f103 0220 	add.w	r2, r3, #32
   226a8:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   226aa:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   226ac:	2100      	movs	r1, #0
   226ae:	4608      	mov	r0, r1
   226b0:	f7ff fd2c 	bl	2210c <k_sched_time_slice_set>
}
   226b4:	bd08      	pop	{r3, pc}
   226b6:	bf00      	nop
   226b8:	20003e08 	.word	0x20003e08

000226bc <z_impl_k_yield>:
{
   226bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   226be:	f04f 0340 	mov.w	r3, #64	; 0x40
   226c2:	f3ef 8611 	mrs	r6, BASEPRI
   226c6:	f383 8812 	msr	BASEPRI_MAX, r3
   226ca:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   226ce:	4c1c      	ldr	r4, [pc, #112]	; (22740 <z_impl_k_yield+0x84>)
   226d0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   226d2:	7b4b      	ldrb	r3, [r1, #13]
   226d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   226d8:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   226da:	f104 0720 	add.w	r7, r4, #32
   226de:	4638      	mov	r0, r7
   226e0:	f009 faf5 	bl	2bcce <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   226e4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   226e6:	7b6b      	ldrb	r3, [r5, #13]
   226e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   226ec:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   226ee:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226f0:	42bc      	cmp	r4, r7
   226f2:	d023      	beq.n	2273c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226f4:	b16c      	cbz	r4, 22712 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   226f6:	4621      	mov	r1, r4
   226f8:	4628      	mov	r0, r5
   226fa:	f009 faaa 	bl	2bc52 <z_sched_prio_cmp>
   226fe:	2800      	cmp	r0, #0
   22700:	dc16      	bgt.n	22730 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22702:	b134      	cbz	r4, 22712 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   22704:	4b0e      	ldr	r3, [pc, #56]	; (22740 <z_impl_k_yield+0x84>)
   22706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22708:	429c      	cmp	r4, r3
   2270a:	d002      	beq.n	22712 <z_impl_k_yield+0x56>
   2270c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2270e:	2c00      	cmp	r4, #0
   22710:	d1f0      	bne.n	226f4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   22712:	4b0b      	ldr	r3, [pc, #44]	; (22740 <z_impl_k_yield+0x84>)
   22714:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   22716:	f103 0120 	add.w	r1, r3, #32
   2271a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   2271c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   2271e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   22720:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   22722:	2001      	movs	r0, #1
   22724:	f7ff fd62 	bl	221ec <update_cache>
   22728:	4630      	mov	r0, r6
   2272a:	f7f2 fd89 	bl	15240 <arch_swap>
}
   2272e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   22730:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   22732:	606b      	str	r3, [r5, #4]
	node->next = successor;
   22734:	602c      	str	r4, [r5, #0]
	prev->next = node;
   22736:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   22738:	6065      	str	r5, [r4, #4]
}
   2273a:	e7f2      	b.n	22722 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2273c:	2400      	movs	r4, #0
   2273e:	e7d9      	b.n	226f4 <z_impl_k_yield+0x38>
   22740:	20003e08 	.word	0x20003e08

00022744 <z_tick_sleep>:
{
   22744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22748:	4604      	mov	r4, r0
   2274a:	460d      	mov	r5, r1
	if (ticks == 0) {
   2274c:	ea54 0105 	orrs.w	r1, r4, r5
   22750:	d037      	beq.n	227c2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   22752:	f06f 0101 	mvn.w	r1, #1
   22756:	1a0a      	subs	r2, r1, r0
   22758:	f04f 31ff 	mov.w	r1, #4294967295
   2275c:	eb61 0305 	sbc.w	r3, r1, r5
   22760:	2a01      	cmp	r2, #1
   22762:	f173 0300 	sbcs.w	r3, r3, #0
   22766:	db30      	blt.n	227ca <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   22768:	f06f 0601 	mvn.w	r6, #1
   2276c:	1a36      	subs	r6, r6, r0
   2276e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22772:	f3ef 8811 	mrs	r8, BASEPRI
   22776:	f383 8812 	msr	BASEPRI_MAX, r3
   2277a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2277e:	4f16      	ldr	r7, [pc, #88]	; (227d8 <z_tick_sleep+0x94>)
   22780:	68b8      	ldr	r0, [r7, #8]
   22782:	4b16      	ldr	r3, [pc, #88]	; (227dc <z_tick_sleep+0x98>)
   22784:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22786:	f7ff fe45 	bl	22414 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   2278a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   2278c:	4622      	mov	r2, r4
   2278e:	462b      	mov	r3, r5
   22790:	4913      	ldr	r1, [pc, #76]	; (227e0 <z_tick_sleep+0x9c>)
   22792:	3018      	adds	r0, #24
   22794:	f000 f904 	bl	229a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22798:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2279a:	7b53      	ldrb	r3, [r2, #13]
   2279c:	f043 0310 	orr.w	r3, r3, #16
   227a0:	7353      	strb	r3, [r2, #13]
   227a2:	4640      	mov	r0, r8
   227a4:	f7f2 fd4c 	bl	15240 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   227a8:	2500      	movs	r5, #0
   227aa:	f009 fc6d 	bl	2c088 <sys_clock_tick_get_32>
   227ae:	1a34      	subs	r4, r6, r0
   227b0:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   227b4:	2c01      	cmp	r4, #1
   227b6:	f175 0300 	sbcs.w	r3, r5, #0
   227ba:	da0a      	bge.n	227d2 <z_tick_sleep+0x8e>
	return 0;
   227bc:	2000      	movs	r0, #0
}
   227be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   227c2:	f7ff ff7b 	bl	226bc <z_impl_k_yield>
		return 0;
   227c6:	2000      	movs	r0, #0
   227c8:	e7f9      	b.n	227be <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   227ca:	f009 fc5d 	bl	2c088 <sys_clock_tick_get_32>
   227ce:	1906      	adds	r6, r0, r4
   227d0:	e7cd      	b.n	2276e <z_tick_sleep+0x2a>
		return ticks;
   227d2:	4620      	mov	r0, r4
   227d4:	e7f3      	b.n	227be <z_tick_sleep+0x7a>
   227d6:	bf00      	nop
   227d8:	20003e08 	.word	0x20003e08
   227dc:	20003e3c 	.word	0x20003e3c
   227e0:	0002bd6b 	.word	0x0002bd6b

000227e4 <z_impl_k_sleep>:
{
   227e4:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   227e6:	f1b1 3fff 	cmp.w	r1, #4294967295
   227ea:	bf08      	it	eq
   227ec:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   227f0:	d01a      	beq.n	22828 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   227f2:	f7ff ffa7 	bl	22744 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   227f6:	4604      	mov	r4, r0
   227f8:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   227fa:	0169      	lsls	r1, r5, #5
   227fc:	0143      	lsls	r3, r0, #5
   227fe:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   22802:	1a18      	subs	r0, r3, r0
   22804:	eb62 0305 	sbc.w	r3, r2, r5
   22808:	009a      	lsls	r2, r3, #2
   2280a:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   2280e:	0081      	lsls	r1, r0, #2
   22810:	4613      	mov	r3, r2
   22812:	1908      	adds	r0, r1, r4
   22814:	eb45 0303 	adc.w	r3, r5, r3
   22818:	00da      	lsls	r2, r3, #3
   2281a:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   2281e:	00c1      	lsls	r1, r0, #3
   22820:	0bc8      	lsrs	r0, r1, #15
   22822:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   22826:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   22828:	4b03      	ldr	r3, [pc, #12]	; (22838 <z_impl_k_sleep+0x54>)
   2282a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2282c:	f7ff fe82 	bl	22534 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   22830:	f04f 30ff 	mov.w	r0, #4294967295
   22834:	e7f7      	b.n	22826 <z_impl_k_sleep+0x42>
   22836:	bf00      	nop
   22838:	20003e08 	.word	0x20003e08

0002283c <z_impl_z_current_get>:
}
   2283c:	4b01      	ldr	r3, [pc, #4]	; (22844 <z_impl_z_current_get+0x8>)
   2283e:	6898      	ldr	r0, [r3, #8]
   22840:	4770      	bx	lr
   22842:	bf00      	nop
   22844:	20003e08 	.word	0x20003e08

00022848 <z_impl_k_is_preempt_thread>:
   22848:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   2284c:	b933      	cbnz	r3, 2285c <z_impl_k_is_preempt_thread+0x14>
   2284e:	4b05      	ldr	r3, [pc, #20]	; (22864 <z_impl_k_is_preempt_thread+0x1c>)
   22850:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   22852:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   22854:	2b7f      	cmp	r3, #127	; 0x7f
   22856:	d803      	bhi.n	22860 <z_impl_k_is_preempt_thread+0x18>
   22858:	2001      	movs	r0, #1
   2285a:	4770      	bx	lr
   2285c:	2000      	movs	r0, #0
   2285e:	4770      	bx	lr
   22860:	2000      	movs	r0, #0
}
   22862:	4770      	bx	lr
   22864:	20003e08 	.word	0x20003e08

00022868 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   22868:	b538      	push	{r3, r4, r5, lr}
   2286a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2286e:	f3ef 8511 	mrs	r5, BASEPRI
   22872:	f383 8812 	msr	BASEPRI_MAX, r3
   22876:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   2287a:	7b43      	ldrb	r3, [r0, #13]
   2287c:	f013 0f08 	tst.w	r3, #8
   22880:	d004      	beq.n	2288c <z_thread_abort+0x24>
	__asm__ volatile(
   22882:	f385 8811 	msr	BASEPRI, r5
   22886:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2288a:	bd38      	pop	{r3, r4, r5, pc}
   2288c:	4604      	mov	r4, r0
	end_thread(thread);
   2288e:	f7ff feb9 	bl	22604 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   22892:	4b08      	ldr	r3, [pc, #32]	; (228b4 <z_thread_abort+0x4c>)
   22894:	689b      	ldr	r3, [r3, #8]
   22896:	42a3      	cmp	r3, r4
   22898:	d004      	beq.n	228a4 <z_thread_abort+0x3c>
   2289a:	f385 8811 	msr	BASEPRI, r5
   2289e:	f3bf 8f6f 	isb	sy
   228a2:	e7f2      	b.n	2288a <z_thread_abort+0x22>
   228a4:	f3ef 8305 	mrs	r3, IPSR
   228a8:	2b00      	cmp	r3, #0
   228aa:	d1f6      	bne.n	2289a <z_thread_abort+0x32>
   228ac:	4628      	mov	r0, r5
   228ae:	f7f2 fcc7 	bl	15240 <arch_swap>
	return ret;
   228b2:	e7f2      	b.n	2289a <z_thread_abort+0x32>
   228b4:	20003e08 	.word	0x20003e08

000228b8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   228b8:	b5d0      	push	{r4, r6, r7, lr}
   228ba:	b082      	sub	sp, #8
   228bc:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   228be:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   228c2:	e9cd 6700 	strd	r6, r7, [sp]
   228c6:	f7ff fdc1 	bl	2244c <z_pend_curr>

	if (data != NULL) {
   228ca:	b11c      	cbz	r4, 228d4 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   228cc:	4b02      	ldr	r3, [pc, #8]	; (228d8 <z_sched_wait+0x20>)
   228ce:	689b      	ldr	r3, [r3, #8]
   228d0:	695b      	ldr	r3, [r3, #20]
   228d2:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   228d4:	b002      	add	sp, #8
   228d6:	bdd0      	pop	{r4, r6, r7, pc}
   228d8:	20003e08 	.word	0x20003e08

000228dc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   228dc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   228de:	4806      	ldr	r0, [pc, #24]	; (228f8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   228e0:	4a06      	ldr	r2, [pc, #24]	; (228fc <z_data_copy+0x20>)
   228e2:	1a12      	subs	r2, r2, r0
   228e4:	4906      	ldr	r1, [pc, #24]	; (22900 <z_data_copy+0x24>)
   228e6:	f005 f9b3 	bl	27c50 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   228ea:	4a06      	ldr	r2, [pc, #24]	; (22904 <z_data_copy+0x28>)
   228ec:	4906      	ldr	r1, [pc, #24]	; (22908 <z_data_copy+0x2c>)
   228ee:	4807      	ldr	r0, [pc, #28]	; (2290c <z_data_copy+0x30>)
   228f0:	f005 f9ae 	bl	27c50 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   228f4:	bd08      	pop	{r3, pc}
   228f6:	bf00      	nop
   228f8:	20000000 	.word	0x20000000
   228fc:	20000a74 	.word	0x20000a74
   22900:	0002f3f0 	.word	0x0002f3f0
   22904:	00000000 	.word	0x00000000
   22908:	0002f3f0 	.word	0x0002f3f0
   2290c:	20000000 	.word	0x20000000

00022910 <first>:
	return list->head == list;
   22910:	4b03      	ldr	r3, [pc, #12]	; (22920 <first+0x10>)
   22912:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22914:	4298      	cmp	r0, r3
   22916:	d000      	beq.n	2291a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   22918:	4770      	bx	lr
   2291a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   2291c:	e7fc      	b.n	22918 <first+0x8>
   2291e:	bf00      	nop
   22920:	20000698 	.word	0x20000698

00022924 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22924:	b130      	cbz	r0, 22934 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   22926:	4a04      	ldr	r2, [pc, #16]	; (22938 <next+0x14>)
   22928:	6852      	ldr	r2, [r2, #4]
   2292a:	4290      	cmp	r0, r2
   2292c:	d001      	beq.n	22932 <next+0xe>
   2292e:	6800      	ldr	r0, [r0, #0]
   22930:	4770      	bx	lr
   22932:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   22934:	4770      	bx	lr
   22936:	bf00      	nop
   22938:	20000698 	.word	0x20000698

0002293c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   2293c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2293e:	4b04      	ldr	r3, [pc, #16]	; (22950 <elapsed+0x14>)
   22940:	681b      	ldr	r3, [r3, #0]
   22942:	b10b      	cbz	r3, 22948 <elapsed+0xc>
   22944:	2000      	movs	r0, #0
}
   22946:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22948:	f7fb fff0 	bl	1e92c <sys_clock_elapsed>
   2294c:	e7fb      	b.n	22946 <elapsed+0xa>
   2294e:	bf00      	nop
   22950:	20003e48 	.word	0x20003e48

00022954 <next_timeout>:

static int32_t next_timeout(void)
{
   22954:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   22956:	f7ff ffdb 	bl	22910 <first>
   2295a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   2295c:	f7ff ffee 	bl	2293c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   22960:	b18c      	cbz	r4, 22986 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22962:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22966:	1a12      	subs	r2, r2, r0
   22968:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2296c:	2a01      	cmp	r2, #1
   2296e:	f173 0100 	sbcs.w	r1, r3, #0
   22972:	db11      	blt.n	22998 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   22974:	4610      	mov	r0, r2
   22976:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2297a:	f173 0300 	sbcs.w	r3, r3, #0
   2297e:	db04      	blt.n	2298a <next_timeout+0x36>
   22980:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22984:	e001      	b.n	2298a <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   22986:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2298a:	4b04      	ldr	r3, [pc, #16]	; (2299c <next_timeout+0x48>)
   2298c:	691b      	ldr	r3, [r3, #16]
   2298e:	b113      	cbz	r3, 22996 <next_timeout+0x42>
   22990:	4283      	cmp	r3, r0
   22992:	da00      	bge.n	22996 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   22994:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   22996:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   22998:	2000      	movs	r0, #0
   2299a:	e7f6      	b.n	2298a <next_timeout+0x36>
   2299c:	20003e08 	.word	0x20003e08

000229a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   229a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229a4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   229a6:	f1b3 3fff 	cmp.w	r3, #4294967295
   229aa:	bf08      	it	eq
   229ac:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   229b0:	f000 8096 	beq.w	22ae0 <z_add_timeout+0x140>
   229b4:	4682      	mov	sl, r0
   229b6:	4614      	mov	r4, r2
   229b8:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   229ba:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   229bc:	2300      	movs	r3, #0
	__asm__ volatile(
   229be:	f04f 0240 	mov.w	r2, #64	; 0x40
   229c2:	f3ef 8b11 	mrs	fp, BASEPRI
   229c6:	f382 8812 	msr	BASEPRI_MAX, r2
   229ca:	f3bf 8f6f 	isb	sy
   229ce:	e02e      	b.n	22a2e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   229d0:	2201      	movs	r2, #1
   229d2:	2300      	movs	r3, #0
   229d4:	e04b      	b.n	22a6e <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   229d6:	f7ff ffb1 	bl	2293c <elapsed>
   229da:	1822      	adds	r2, r4, r0
   229dc:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   229e0:	3201      	adds	r2, #1
   229e2:	f143 0300 	adc.w	r3, r3, #0
   229e6:	f8ca 2010 	str.w	r2, [sl, #16]
   229ea:	f8ca 3014 	str.w	r3, [sl, #20]
   229ee:	e042      	b.n	22a76 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   229f0:	9b00      	ldr	r3, [sp, #0]
   229f2:	1ac2      	subs	r2, r0, r3
   229f4:	9b01      	ldr	r3, [sp, #4]
   229f6:	eb61 0303 	sbc.w	r3, r1, r3
   229fa:	f8cc 2010 	str.w	r2, [ip, #16]
   229fe:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   22a02:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   22a06:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   22a0a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   22a0e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   22a12:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   22a16:	f1bc 0f00 	cmp.w	ip, #0
   22a1a:	d049      	beq.n	22ab0 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22a1c:	f7ff ff78 	bl	22910 <first>
   22a20:	4582      	cmp	sl, r0
   22a22:	d050      	beq.n	22ac6 <z_add_timeout+0x126>
	__asm__ volatile(
   22a24:	f38b 8811 	msr	BASEPRI, fp
   22a28:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22a2c:	2301      	movs	r3, #1
   22a2e:	2b00      	cmp	r3, #0
   22a30:	d156      	bne.n	22ae0 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   22a32:	f06f 0301 	mvn.w	r3, #1
   22a36:	ebb3 0804 	subs.w	r8, r3, r4
   22a3a:	f04f 30ff 	mov.w	r0, #4294967295
   22a3e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22a42:	f1b8 0f00 	cmp.w	r8, #0
   22a46:	f179 0300 	sbcs.w	r3, r9, #0
   22a4a:	dbc4      	blt.n	229d6 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22a4c:	4a26      	ldr	r2, [pc, #152]	; (22ae8 <z_add_timeout+0x148>)
   22a4e:	6813      	ldr	r3, [r2, #0]
   22a50:	6852      	ldr	r2, [r2, #4]
   22a52:	18e3      	adds	r3, r4, r3
   22a54:	eb45 0202 	adc.w	r2, r5, r2
   22a58:	f06f 0101 	mvn.w	r1, #1
   22a5c:	1ace      	subs	r6, r1, r3
   22a5e:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   22a62:	4632      	mov	r2, r6
   22a64:	463b      	mov	r3, r7
   22a66:	2e01      	cmp	r6, #1
   22a68:	f177 0100 	sbcs.w	r1, r7, #0
   22a6c:	dbb0      	blt.n	229d0 <z_add_timeout+0x30>
   22a6e:	f8ca 2010 	str.w	r2, [sl, #16]
   22a72:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   22a76:	f7ff ff4b 	bl	22910 <first>
   22a7a:	4684      	mov	ip, r0
   22a7c:	f1bc 0f00 	cmp.w	ip, #0
   22a80:	d0c9      	beq.n	22a16 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   22a82:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   22a86:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   22a8a:	e9cd 2300 	strd	r2, r3, [sp]
   22a8e:	4282      	cmp	r2, r0
   22a90:	418b      	sbcs	r3, r1
   22a92:	dbad      	blt.n	229f0 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   22a94:	9b00      	ldr	r3, [sp, #0]
   22a96:	1a1a      	subs	r2, r3, r0
   22a98:	9b01      	ldr	r3, [sp, #4]
   22a9a:	eb63 0301 	sbc.w	r3, r3, r1
   22a9e:	f8ca 2010 	str.w	r2, [sl, #16]
   22aa2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   22aa6:	4660      	mov	r0, ip
   22aa8:	f7ff ff3c 	bl	22924 <next>
   22aac:	4684      	mov	ip, r0
   22aae:	e7e5      	b.n	22a7c <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   22ab0:	4b0e      	ldr	r3, [pc, #56]	; (22aec <z_add_timeout+0x14c>)
   22ab2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   22ab4:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   22ab8:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   22abc:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   22ac0:	f8c3 a004 	str.w	sl, [r3, #4]
}
   22ac4:	e7aa      	b.n	22a1c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   22ac6:	f7ff ff45 	bl	22954 <next_timeout>

			if (next_time == 0 ||
   22aca:	4603      	mov	r3, r0
   22acc:	b118      	cbz	r0, 22ad6 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   22ace:	4a08      	ldr	r2, [pc, #32]	; (22af0 <z_add_timeout+0x150>)
   22ad0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   22ad2:	4282      	cmp	r2, r0
   22ad4:	d0a6      	beq.n	22a24 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   22ad6:	2100      	movs	r1, #0
   22ad8:	4618      	mov	r0, r3
   22ada:	f7fb fef3 	bl	1e8c4 <sys_clock_set_timeout>
   22ade:	e7a1      	b.n	22a24 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   22ae0:	b003      	add	sp, #12
   22ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ae6:	bf00      	nop
   22ae8:	200022c0 	.word	0x200022c0
   22aec:	20000698 	.word	0x20000698
   22af0:	20003e08 	.word	0x20003e08

00022af4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   22af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22af6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   22af8:	f7ff fbe2 	bl	222c0 <z_time_slice>
	__asm__ volatile(
   22afc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b00:	f3ef 8511 	mrs	r5, BASEPRI
   22b04:	f383 8812 	msr	BASEPRI_MAX, r3
   22b08:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   22b0c:	4b28      	ldr	r3, [pc, #160]	; (22bb0 <sys_clock_announce+0xbc>)
   22b0e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   22b10:	f7ff fefe 	bl	22910 <first>
   22b14:	4604      	mov	r4, r0
   22b16:	b350      	cbz	r0, 22b6e <sys_clock_announce+0x7a>
   22b18:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   22b1c:	4b24      	ldr	r3, [pc, #144]	; (22bb0 <sys_clock_announce+0xbc>)
   22b1e:	681b      	ldr	r3, [r3, #0]
   22b20:	17d9      	asrs	r1, r3, #31
   22b22:	42b3      	cmp	r3, r6
   22b24:	eb71 0207 	sbcs.w	r2, r1, r7
   22b28:	db21      	blt.n	22b6e <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   22b2a:	4a22      	ldr	r2, [pc, #136]	; (22bb4 <sys_clock_announce+0xc0>)
   22b2c:	e9d2 0100 	ldrd	r0, r1, [r2]
   22b30:	1980      	adds	r0, r0, r6
   22b32:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   22b36:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   22b3a:	1b9b      	subs	r3, r3, r6
   22b3c:	4a1c      	ldr	r2, [pc, #112]	; (22bb0 <sys_clock_announce+0xbc>)
   22b3e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   22b40:	2200      	movs	r2, #0
   22b42:	2300      	movs	r3, #0
   22b44:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   22b48:	4620      	mov	r0, r4
   22b4a:	f009 fa27 	bl	2bf9c <remove_timeout>
	__asm__ volatile(
   22b4e:	f385 8811 	msr	BASEPRI, r5
   22b52:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   22b56:	68a3      	ldr	r3, [r4, #8]
   22b58:	4620      	mov	r0, r4
   22b5a:	4798      	blx	r3
	__asm__ volatile(
   22b5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b60:	f3ef 8511 	mrs	r5, BASEPRI
   22b64:	f383 8812 	msr	BASEPRI_MAX, r3
   22b68:	f3bf 8f6f 	isb	sy
   22b6c:	e7d0      	b.n	22b10 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   22b6e:	b144      	cbz	r4, 22b82 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   22b70:	4b0f      	ldr	r3, [pc, #60]	; (22bb0 <sys_clock_announce+0xbc>)
   22b72:	6819      	ldr	r1, [r3, #0]
   22b74:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   22b78:	1a52      	subs	r2, r2, r1
   22b7a:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   22b7e:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   22b82:	480c      	ldr	r0, [pc, #48]	; (22bb4 <sys_clock_announce+0xc0>)
   22b84:	490a      	ldr	r1, [pc, #40]	; (22bb0 <sys_clock_announce+0xbc>)
   22b86:	680c      	ldr	r4, [r1, #0]
   22b88:	e9d0 2300 	ldrd	r2, r3, [r0]
   22b8c:	1912      	adds	r2, r2, r4
   22b8e:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   22b92:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   22b96:	2400      	movs	r4, #0
   22b98:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   22b9a:	f7ff fedb 	bl	22954 <next_timeout>
   22b9e:	4621      	mov	r1, r4
   22ba0:	f7fb fe90 	bl	1e8c4 <sys_clock_set_timeout>
	__asm__ volatile(
   22ba4:	f385 8811 	msr	BASEPRI, r5
   22ba8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   22bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22bae:	bf00      	nop
   22bb0:	20003e48 	.word	0x20003e48
   22bb4:	200022c0 	.word	0x200022c0

00022bb8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22bb8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   22bba:	2100      	movs	r1, #0
	__asm__ volatile(
   22bbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bc0:	f3ef 8411 	mrs	r4, BASEPRI
   22bc4:	f383 8812 	msr	BASEPRI_MAX, r3
   22bc8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   22bcc:	2200      	movs	r2, #0
   22bce:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   22bd0:	b969      	cbnz	r1, 22bee <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   22bd2:	f7fb feab 	bl	1e92c <sys_clock_elapsed>
   22bd6:	4b07      	ldr	r3, [pc, #28]	; (22bf4 <sys_clock_tick_get+0x3c>)
   22bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   22bdc:	1812      	adds	r2, r2, r0
   22bde:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   22be2:	f384 8811 	msr	BASEPRI, r4
   22be6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   22bea:	2101      	movs	r1, #1
   22bec:	e7f0      	b.n	22bd0 <sys_clock_tick_get+0x18>
	}
	return t;
}
   22bee:	4610      	mov	r0, r2
   22bf0:	4619      	mov	r1, r3
   22bf2:	bd10      	pop	{r4, pc}
   22bf4:	200022c0 	.word	0x200022c0

00022bf8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   22bf8:	b538      	push	{r3, r4, r5, lr}
   22bfa:	4604      	mov	r4, r0
	__asm__ volatile(
   22bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c00:	f3ef 8511 	mrs	r5, BASEPRI
   22c04:	f383 8812 	msr	BASEPRI_MAX, r3
   22c08:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22c0c:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   22c10:	ea52 0103 	orrs.w	r1, r2, r3
   22c14:	d005      	beq.n	22c22 <z_timer_expiration_handler+0x2a>
   22c16:	f1b3 3fff 	cmp.w	r3, #4294967295
   22c1a:	bf08      	it	eq
   22c1c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22c20:	d11a      	bne.n	22c58 <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   22c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22c24:	3301      	adds	r3, #1
   22c26:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22c28:	6a23      	ldr	r3, [r4, #32]
   22c2a:	b10b      	cbz	r3, 22c30 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
   22c2c:	4620      	mov	r0, r4
   22c2e:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22c30:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   22c34:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c36:	42a3      	cmp	r3, r4
   22c38:	d012      	beq.n	22c60 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22c3a:	b18c      	cbz	r4, 22c60 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   22c3c:	4620      	mov	r0, r4
   22c3e:	f009 f812 	bl	2bc66 <z_unpend_thread_no_timeout>
   22c42:	2300      	movs	r3, #0
   22c44:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	__asm__ volatile(
   22c48:	f385 8811 	msr	BASEPRI, r5
   22c4c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   22c50:	4620      	mov	r0, r4
   22c52:	f009 f86e 	bl	2bd32 <z_ready_thread>
}
   22c56:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22c58:	4904      	ldr	r1, [pc, #16]	; (22c6c <z_timer_expiration_handler+0x74>)
   22c5a:	f7ff fea1 	bl	229a0 <z_add_timeout>
   22c5e:	e7e0      	b.n	22c22 <z_timer_expiration_handler+0x2a>
   22c60:	f385 8811 	msr	BASEPRI, r5
   22c64:	f3bf 8f6f 	isb	sy
		return;
   22c68:	e7f5      	b.n	22c56 <z_timer_expiration_handler+0x5e>
   22c6a:	bf00      	nop
   22c6c:	00022bf9 	.word	0x00022bf9

00022c70 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   22c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c74:	b087      	sub	sp, #28
   22c76:	4614      	mov	r4, r2
   22c78:	461d      	mov	r5, r3
   22c7a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   22c82:	bf08      	it	eq
   22c84:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   22c88:	d035      	beq.n	22cf6 <z_impl_k_timer_start+0x86>
   22c8a:	4606      	mov	r6, r0
   22c8c:	4613      	mov	r3, r2
   22c8e:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22c90:	f1b9 3fff 	cmp.w	r9, #4294967295
   22c94:	bf08      	it	eq
   22c96:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   22c9a:	d012      	beq.n	22cc2 <z_impl_k_timer_start+0x52>
   22c9c:	ea58 0109 	orrs.w	r1, r8, r9
   22ca0:	d00f      	beq.n	22cc2 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   22ca2:	f06f 0701 	mvn.w	r7, #1
   22ca6:	ebb7 0708 	subs.w	r7, r7, r8
   22caa:	9702      	str	r7, [sp, #8]
   22cac:	f04f 31ff 	mov.w	r1, #4294967295
   22cb0:	eb61 0709 	sbc.w	r7, r1, r9
   22cb4:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   22cb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   22cba:	2800      	cmp	r0, #0
   22cbc:	f171 0100 	sbcs.w	r1, r1, #0
   22cc0:	db1c      	blt.n	22cfc <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22cc2:	f06f 0101 	mvn.w	r1, #1
   22cc6:	ebb1 0a03 	subs.w	sl, r1, r3
   22cca:	f04f 31ff 	mov.w	r1, #4294967295
   22cce:	eb61 0b02 	sbc.w	fp, r1, r2
   22cd2:	f1ba 0f00 	cmp.w	sl, #0
   22cd6:	f17b 0100 	sbcs.w	r1, fp, #0
   22cda:	db23      	blt.n	22d24 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   22cdc:	4630      	mov	r0, r6
   22cde:	f009 f974 	bl	2bfca <z_abort_timeout>
	timer->period = period;
   22ce2:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   22ce6:	2300      	movs	r3, #0
   22ce8:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22cea:	4622      	mov	r2, r4
   22cec:	462b      	mov	r3, r5
   22cee:	4917      	ldr	r1, [pc, #92]	; (22d4c <z_impl_k_timer_start+0xdc>)
   22cf0:	4630      	mov	r0, r6
   22cf2:	f7ff fe55 	bl	229a0 <z_add_timeout>
		     duration);
}
   22cf6:	b007      	add	sp, #28
   22cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   22cfc:	f118 31ff 	adds.w	r1, r8, #4294967295
   22d00:	9104      	str	r1, [sp, #16]
   22d02:	f149 31ff 	adc.w	r1, r9, #4294967295
   22d06:	9105      	str	r1, [sp, #20]
   22d08:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   22d0c:	4638      	mov	r0, r7
   22d0e:	4641      	mov	r1, r8
   22d10:	2f01      	cmp	r7, #1
   22d12:	f178 0700 	sbcs.w	r7, r8, #0
   22d16:	db02      	blt.n	22d1e <z_impl_k_timer_start+0xae>
   22d18:	4680      	mov	r8, r0
   22d1a:	4689      	mov	r9, r1
   22d1c:	e7d1      	b.n	22cc2 <z_impl_k_timer_start+0x52>
   22d1e:	2001      	movs	r0, #1
   22d20:	2100      	movs	r1, #0
   22d22:	e7f9      	b.n	22d18 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22d24:	f113 33ff 	adds.w	r3, r3, #4294967295
   22d28:	9300      	str	r3, [sp, #0]
   22d2a:	f142 33ff 	adc.w	r3, r2, #4294967295
   22d2e:	9301      	str	r3, [sp, #4]
   22d30:	e9dd 0100 	ldrd	r0, r1, [sp]
   22d34:	4602      	mov	r2, r0
   22d36:	460b      	mov	r3, r1
   22d38:	2800      	cmp	r0, #0
   22d3a:	f171 0100 	sbcs.w	r1, r1, #0
   22d3e:	db02      	blt.n	22d46 <z_impl_k_timer_start+0xd6>
   22d40:	4614      	mov	r4, r2
   22d42:	461d      	mov	r5, r3
   22d44:	e7ca      	b.n	22cdc <z_impl_k_timer_start+0x6c>
   22d46:	2200      	movs	r2, #0
   22d48:	4613      	mov	r3, r2
   22d4a:	e7f9      	b.n	22d40 <z_impl_k_timer_start+0xd0>
   22d4c:	00022bf9 	.word	0x00022bf9

00022d50 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   22d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d54:	b08d      	sub	sp, #52	; 0x34
   22d56:	4605      	mov	r5, r0
   22d58:	9107      	str	r1, [sp, #28]
   22d5a:	9202      	str	r2, [sp, #8]
   22d5c:	9303      	str	r3, [sp, #12]
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   22d5e:	4ba4      	ldr	r3, [pc, #656]	; (22ff0 <z_impl_k_poll+0x2a0>)
   22d60:	f8d3 9008 	ldr.w	r9, [r3, #8]
   22d64:	f109 0760 	add.w	r7, r9, #96	; 0x60

	poller->is_polling = true;
   22d68:	2301      	movs	r3, #1
   22d6a:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60
	poller->mode = MODE_POLL;
   22d6e:	f889 3061 	strb.w	r3, [r9, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   22d72:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   22d76:	4613      	mov	r3, r2
   22d78:	430b      	orrs	r3, r1
   22d7a:	bf0c      	ite	eq
   22d7c:	2301      	moveq	r3, #1
   22d7e:	2300      	movne	r3, #0
   22d80:	9306      	str	r3, [sp, #24]
	for (int ii = 0; ii < num_events; ii++) {
   22d82:	2600      	movs	r6, #0
	int events_registered = 0;
   22d84:	46b3      	mov	fp, r6
	for (int ii = 0; ii < num_events; ii++) {
   22d86:	e02e      	b.n	22de6 <z_impl_k_poll+0x96>
		if (k_sem_count_get(event->sem) > 0U) {
   22d88:	6923      	ldr	r3, [r4, #16]
	return sem->count;
   22d8a:	689b      	ldr	r3, [r3, #8]
   22d8c:	b1c3      	cbz	r3, 22dc0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22d8e:	2302      	movs	r3, #2
   22d90:	9305      	str	r3, [sp, #20]
			return true;
   22d92:	2301      	movs	r3, #1
   22d94:	e014      	b.n	22dc0 <z_impl_k_poll+0x70>
		if (!k_queue_is_empty(event->queue)) {
   22d96:	6923      	ldr	r3, [r4, #16]
	return list->head;
   22d98:	681b      	ldr	r3, [r3, #0]
   22d9a:	b18b      	cbz	r3, 22dc0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22d9c:	2304      	movs	r3, #4
   22d9e:	9305      	str	r3, [sp, #20]
			return true;
   22da0:	2301      	movs	r3, #1
   22da2:	e00d      	b.n	22dc0 <z_impl_k_poll+0x70>
		if (event->signal->signaled != 0U) {
   22da4:	6923      	ldr	r3, [r4, #16]
   22da6:	689b      	ldr	r3, [r3, #8]
   22da8:	b153      	cbz	r3, 22dc0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_SIGNALED;
   22daa:	2301      	movs	r3, #1
   22dac:	9305      	str	r3, [sp, #20]
   22dae:	e007      	b.n	22dc0 <z_impl_k_poll+0x70>
		if (event->msgq->used_msgs > 0) {
   22db0:	6923      	ldr	r3, [r4, #16]
   22db2:	6a1b      	ldr	r3, [r3, #32]
   22db4:	b123      	cbz	r3, 22dc0 <z_impl_k_poll+0x70>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   22db6:	2310      	movs	r3, #16
   22db8:	9305      	str	r3, [sp, #20]
			return true;
   22dba:	2301      	movs	r3, #1
   22dbc:	e000      	b.n	22dc0 <z_impl_k_poll+0x70>
	switch (event->type) {
   22dbe:	2300      	movs	r3, #0
		if (is_condition_met(&events[ii], &state)) {
   22dc0:	2b00      	cmp	r3, #0
   22dc2:	d03d      	beq.n	22e40 <z_impl_k_poll+0xf0>
	event->poller = NULL;
   22dc4:	2100      	movs	r1, #0
   22dc6:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   22dc8:	68e3      	ldr	r3, [r4, #12]
   22dca:	f3c3 3245 	ubfx	r2, r3, #13, #6
   22dce:	9805      	ldr	r0, [sp, #20]
   22dd0:	4302      	orrs	r2, r0
   22dd2:	f362 3352 	bfi	r3, r2, #13, #6
   22dd6:	60e3      	str	r3, [r4, #12]
			poller->is_polling = false;
   22dd8:	7039      	strb	r1, [r7, #0]
   22dda:	9b08      	ldr	r3, [sp, #32]
   22ddc:	f383 8811 	msr	BASEPRI, r3
   22de0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   22de4:	3601      	adds	r6, #1
   22de6:	9b07      	ldr	r3, [sp, #28]
   22de8:	42b3      	cmp	r3, r6
   22dea:	f340 81bf 	ble.w	2316c <z_impl_k_poll+0x41c>
	__asm__ volatile(
   22dee:	f04f 0340 	mov.w	r3, #64	; 0x40
   22df2:	f3ef 8211 	mrs	r2, BASEPRI
   22df6:	f383 8812 	msr	BASEPRI_MAX, r3
   22dfa:	f3bf 8f6f 	isb	sy
   22dfe:	9208      	str	r2, [sp, #32]
		if (is_condition_met(&events[ii], &state)) {
   22e00:	eb06 0486 	add.w	r4, r6, r6, lsl #2
   22e04:	00a3      	lsls	r3, r4, #2
   22e06:	9309      	str	r3, [sp, #36]	; 0x24
   22e08:	eb05 0484 	add.w	r4, r5, r4, lsl #2
	switch (event->type) {
   22e0c:	7b63      	ldrb	r3, [r4, #13]
   22e0e:	f003 031f 	and.w	r3, r3, #31
   22e12:	3b01      	subs	r3, #1
   22e14:	2b07      	cmp	r3, #7
   22e16:	d8d2      	bhi.n	22dbe <z_impl_k_poll+0x6e>
   22e18:	a201      	add	r2, pc, #4	; (adr r2, 22e20 <z_impl_k_poll+0xd0>)
   22e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22e1e:	bf00      	nop
   22e20:	00022da5 	.word	0x00022da5
   22e24:	00022d89 	.word	0x00022d89
   22e28:	00022dbf 	.word	0x00022dbf
   22e2c:	00022d97 	.word	0x00022d97
   22e30:	00022dbf 	.word	0x00022dbf
   22e34:	00022dbf 	.word	0x00022dbf
   22e38:	00022dbf 	.word	0x00022dbf
   22e3c:	00022db1 	.word	0x00022db1
		} else if (!just_check && poller->is_polling) {
   22e40:	9b06      	ldr	r3, [sp, #24]
   22e42:	2b00      	cmp	r3, #0
   22e44:	d1c9      	bne.n	22dda <z_impl_k_poll+0x8a>
   22e46:	783b      	ldrb	r3, [r7, #0]
   22e48:	2b00      	cmp	r3, #0
   22e4a:	d0c6      	beq.n	22dda <z_impl_k_poll+0x8a>
	switch (event->type) {
   22e4c:	7b63      	ldrb	r3, [r4, #13]
   22e4e:	f003 031f 	and.w	r3, r3, #31
   22e52:	3b01      	subs	r3, #1
   22e54:	2b07      	cmp	r3, #7
   22e56:	d846      	bhi.n	22ee6 <z_impl_k_poll+0x196>
   22e58:	e8df f013 	tbh	[pc, r3, lsl #1]
   22e5c:	000800cc 	.word	0x000800cc
   22e60:	006a0045 	.word	0x006a0045
   22e64:	00450045 	.word	0x00450045
   22e68:	01290045 	.word	0x01290045
		add_event(&event->sem->poll_events, event, poller);
   22e6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22e70:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   22e74:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22e78:	4598      	cmp	r8, r3
   22e7a:	d02b      	beq.n	22ed4 <z_impl_k_poll+0x184>
   22e7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   22e80:	b343      	cbz	r3, 22ed4 <z_impl_k_poll+0x184>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22e82:	6898      	ldr	r0, [r3, #8]
   22e84:	f009 f961 	bl	2c14a <poller_thread>
   22e88:	900b      	str	r0, [sp, #44]	; 0x2c
   22e8a:	4638      	mov	r0, r7
   22e8c:	f009 f95d 	bl	2c14a <poller_thread>
   22e90:	4601      	mov	r1, r0
   22e92:	900a      	str	r0, [sp, #40]	; 0x28
   22e94:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22e96:	f008 fedc 	bl	2bc52 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22e9a:	2800      	cmp	r0, #0
   22e9c:	dc1a      	bgt.n	22ed4 <z_impl_k_poll+0x184>
	return list->head == list;
   22e9e:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22ea2:	45d0      	cmp	r8, sl
   22ea4:	d02f      	beq.n	22f06 <z_impl_k_poll+0x1b6>
   22ea6:	4653      	mov	r3, sl
   22ea8:	46a2      	mov	sl, r4
   22eaa:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22eac:	b38c      	cbz	r4, 22f12 <z_impl_k_poll+0x1c2>
		if (z_sched_prio_cmp(poller_thread(poller),
   22eae:	68a0      	ldr	r0, [r4, #8]
   22eb0:	f009 f94b 	bl	2c14a <poller_thread>
   22eb4:	4601      	mov	r1, r0
   22eb6:	980a      	ldr	r0, [sp, #40]	; 0x28
   22eb8:	f008 fecb 	bl	2bc52 <z_sched_prio_cmp>
   22ebc:	2800      	cmp	r0, #0
   22ebe:	dc16      	bgt.n	22eee <z_impl_k_poll+0x19e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22ec0:	b34c      	cbz	r4, 22f16 <z_impl_k_poll+0x1c6>
	return (node == list->tail) ? NULL : node->next;
   22ec2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22ec6:	429c      	cmp	r4, r3
   22ec8:	d030      	beq.n	22f2c <z_impl_k_poll+0x1dc>
   22eca:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22ecc:	2c00      	cmp	r4, #0
   22ece:	d1ed      	bne.n	22eac <z_impl_k_poll+0x15c>
   22ed0:	4654      	mov	r4, sl
   22ed2:	e021      	b.n	22f18 <z_impl_k_poll+0x1c8>
	sys_dnode_t *const tail = list->tail;
   22ed4:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22eda:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22ede:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22ee0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22ee2:	f8c8 4004 	str.w	r4, [r8, #4]
	event->poller = poller;
   22ee6:	60a7      	str	r7, [r4, #8]
			events_registered += 1;
   22ee8:	f10b 0b01 	add.w	fp, fp, #1
   22eec:	e775      	b.n	22dda <z_impl_k_poll+0x8a>
   22eee:	4623      	mov	r3, r4
   22ef0:	4654      	mov	r4, sl
   22ef2:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22ef4:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   22ef6:	6063      	str	r3, [r4, #4]
	node->next = successor;
   22ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22efa:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   22efe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   22f00:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22f04:	e7ef      	b.n	22ee6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22f06:	f04f 0a00 	mov.w	sl, #0
   22f0a:	4653      	mov	r3, sl
   22f0c:	46a2      	mov	sl, r4
   22f0e:	461c      	mov	r4, r3
   22f10:	e7cc      	b.n	22eac <z_impl_k_poll+0x15c>
   22f12:	4654      	mov	r4, sl
   22f14:	e000      	b.n	22f18 <z_impl_k_poll+0x1c8>
   22f16:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   22f18:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22f1e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22f22:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22f24:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22f26:	f8c8 4004 	str.w	r4, [r8, #4]
}
   22f2a:	e7dc      	b.n	22ee6 <z_impl_k_poll+0x196>
   22f2c:	4654      	mov	r4, sl
   22f2e:	e7f3      	b.n	22f18 <z_impl_k_poll+0x1c8>
		add_event(&event->queue->poll_events, event, poller);
   22f30:	f8d4 a010 	ldr.w	sl, [r4, #16]
   22f34:	f10a 0810 	add.w	r8, sl, #16
	return list->head == list;
   22f38:	f8da 3010 	ldr.w	r3, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22f3c:	4598      	cmp	r8, r3
   22f3e:	d02b      	beq.n	22f98 <z_impl_k_poll+0x248>
   22f40:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   22f44:	b343      	cbz	r3, 22f98 <z_impl_k_poll+0x248>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   22f46:	6898      	ldr	r0, [r3, #8]
   22f48:	f009 f8ff 	bl	2c14a <poller_thread>
   22f4c:	900b      	str	r0, [sp, #44]	; 0x2c
   22f4e:	4638      	mov	r0, r7
   22f50:	f009 f8fb 	bl	2c14a <poller_thread>
   22f54:	4601      	mov	r1, r0
   22f56:	900a      	str	r0, [sp, #40]	; 0x28
   22f58:	980b      	ldr	r0, [sp, #44]	; 0x2c
   22f5a:	f008 fe7a 	bl	2bc52 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   22f5e:	2800      	cmp	r0, #0
   22f60:	dc1a      	bgt.n	22f98 <z_impl_k_poll+0x248>
	return list->head == list;
   22f62:	f8da a010 	ldr.w	sl, [sl, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f66:	45d0      	cmp	r8, sl
   22f68:	d02c      	beq.n	22fc4 <z_impl_k_poll+0x274>
   22f6a:	4653      	mov	r3, sl
   22f6c:	46a2      	mov	sl, r4
   22f6e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22f70:	b374      	cbz	r4, 22fd0 <z_impl_k_poll+0x280>
		if (z_sched_prio_cmp(poller_thread(poller),
   22f72:	68a0      	ldr	r0, [r4, #8]
   22f74:	f009 f8e9 	bl	2c14a <poller_thread>
   22f78:	4601      	mov	r1, r0
   22f7a:	980a      	ldr	r0, [sp, #40]	; 0x28
   22f7c:	f008 fe69 	bl	2bc52 <z_sched_prio_cmp>
   22f80:	2800      	cmp	r0, #0
   22f82:	dc13      	bgt.n	22fac <z_impl_k_poll+0x25c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22f84:	b334      	cbz	r4, 22fd4 <z_impl_k_poll+0x284>
	return (node == list->tail) ? NULL : node->next;
   22f86:	f8d8 3004 	ldr.w	r3, [r8, #4]
   22f8a:	429c      	cmp	r4, r3
   22f8c:	d02d      	beq.n	22fea <z_impl_k_poll+0x29a>
   22f8e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22f90:	2c00      	cmp	r4, #0
   22f92:	d1ed      	bne.n	22f70 <z_impl_k_poll+0x220>
   22f94:	4654      	mov	r4, sl
   22f96:	e01e      	b.n	22fd6 <z_impl_k_poll+0x286>
	sys_dnode_t *const tail = list->tail;
   22f98:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22f9e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22fa2:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22fa4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22fa6:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   22faa:	e79c      	b.n	22ee6 <z_impl_k_poll+0x196>
   22fac:	4623      	mov	r3, r4
   22fae:	4654      	mov	r4, sl
   22fb0:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   22fb2:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   22fb4:	6063      	str	r3, [r4, #4]
	node->next = successor;
   22fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22fb8:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   22fbc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   22fbe:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   22fc2:	e790      	b.n	22ee6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   22fc4:	f04f 0a00 	mov.w	sl, #0
   22fc8:	4653      	mov	r3, sl
   22fca:	46a2      	mov	sl, r4
   22fcc:	461c      	mov	r4, r3
   22fce:	e7cf      	b.n	22f70 <z_impl_k_poll+0x220>
   22fd0:	4654      	mov	r4, sl
   22fd2:	e000      	b.n	22fd6 <z_impl_k_poll+0x286>
   22fd4:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   22fd6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   22fda:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22fdc:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   22fe0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   22fe2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22fe4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   22fe8:	e77d      	b.n	22ee6 <z_impl_k_poll+0x196>
   22fea:	4654      	mov	r4, sl
   22fec:	e7f3      	b.n	22fd6 <z_impl_k_poll+0x286>
   22fee:	bf00      	nop
   22ff0:	20003e08 	.word	0x20003e08
		add_event(&event->signal->poll_events, event, poller);
   22ff4:	f8d4 8010 	ldr.w	r8, [r4, #16]
	return list->head == list;
   22ff8:	f8d8 3000 	ldr.w	r3, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   22ffc:	4598      	cmp	r8, r3
   22ffe:	d02b      	beq.n	23058 <z_impl_k_poll+0x308>
   23000:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   23004:	b343      	cbz	r3, 23058 <z_impl_k_poll+0x308>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   23006:	6898      	ldr	r0, [r3, #8]
   23008:	f009 f89f 	bl	2c14a <poller_thread>
   2300c:	4682      	mov	sl, r0
   2300e:	4638      	mov	r0, r7
   23010:	f009 f89b 	bl	2c14a <poller_thread>
   23014:	4601      	mov	r1, r0
   23016:	900a      	str	r0, [sp, #40]	; 0x28
   23018:	4650      	mov	r0, sl
   2301a:	f008 fe1a 	bl	2bc52 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2301e:	2800      	cmp	r0, #0
   23020:	dc1a      	bgt.n	23058 <z_impl_k_poll+0x308>
	return list->head == list;
   23022:	f8d8 a000 	ldr.w	sl, [r8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23026:	45d0      	cmp	r8, sl
   23028:	d02c      	beq.n	23084 <z_impl_k_poll+0x334>
   2302a:	4653      	mov	r3, sl
   2302c:	46a2      	mov	sl, r4
   2302e:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23030:	b374      	cbz	r4, 23090 <z_impl_k_poll+0x340>
		if (z_sched_prio_cmp(poller_thread(poller),
   23032:	68a0      	ldr	r0, [r4, #8]
   23034:	f009 f889 	bl	2c14a <poller_thread>
   23038:	4601      	mov	r1, r0
   2303a:	980a      	ldr	r0, [sp, #40]	; 0x28
   2303c:	f008 fe09 	bl	2bc52 <z_sched_prio_cmp>
   23040:	2800      	cmp	r0, #0
   23042:	dc13      	bgt.n	2306c <z_impl_k_poll+0x31c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23044:	b334      	cbz	r4, 23094 <z_impl_k_poll+0x344>
	return (node == list->tail) ? NULL : node->next;
   23046:	f8d8 3004 	ldr.w	r3, [r8, #4]
   2304a:	429c      	cmp	r4, r3
   2304c:	d02d      	beq.n	230aa <z_impl_k_poll+0x35a>
   2304e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23050:	2c00      	cmp	r4, #0
   23052:	d1ed      	bne.n	23030 <z_impl_k_poll+0x2e0>
   23054:	4654      	mov	r4, sl
   23056:	e01e      	b.n	23096 <z_impl_k_poll+0x346>
	sys_dnode_t *const tail = list->tail;
   23058:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2305c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2305e:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   23062:	6063      	str	r3, [r4, #4]
	tail->next = node;
   23064:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23066:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   2306a:	e73c      	b.n	22ee6 <z_impl_k_poll+0x196>
   2306c:	4623      	mov	r3, r4
   2306e:	4654      	mov	r4, sl
   23070:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   23072:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   23074:	6063      	str	r3, [r4, #4]
	node->next = successor;
   23076:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23078:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2307c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2307e:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   23082:	e730      	b.n	22ee6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23084:	f04f 0a00 	mov.w	sl, #0
   23088:	4653      	mov	r3, sl
   2308a:	46a2      	mov	sl, r4
   2308c:	461c      	mov	r4, r3
   2308e:	e7cf      	b.n	23030 <z_impl_k_poll+0x2e0>
   23090:	4654      	mov	r4, sl
   23092:	e000      	b.n	23096 <z_impl_k_poll+0x346>
   23094:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   23096:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2309a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2309c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   230a0:	6063      	str	r3, [r4, #4]
	tail->next = node;
   230a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   230a4:	f8c8 4004 	str.w	r4, [r8, #4]
}
   230a8:	e71d      	b.n	22ee6 <z_impl_k_poll+0x196>
   230aa:	4654      	mov	r4, sl
   230ac:	e7f3      	b.n	23096 <z_impl_k_poll+0x346>
		add_event(&event->msgq->poll_events, event, poller);
   230ae:	f8d4 a010 	ldr.w	sl, [r4, #16]
   230b2:	f10a 0824 	add.w	r8, sl, #36	; 0x24
	return list->head == list;
   230b6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   230ba:	4598      	cmp	r8, r3
   230bc:	d02b      	beq.n	23116 <z_impl_k_poll+0x3c6>
   230be:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if ((pending == NULL) ||
   230c2:	b343      	cbz	r3, 23116 <z_impl_k_poll+0x3c6>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   230c4:	6898      	ldr	r0, [r3, #8]
   230c6:	f009 f840 	bl	2c14a <poller_thread>
   230ca:	900b      	str	r0, [sp, #44]	; 0x2c
   230cc:	4638      	mov	r0, r7
   230ce:	f009 f83c 	bl	2c14a <poller_thread>
   230d2:	4601      	mov	r1, r0
   230d4:	900a      	str	r0, [sp, #40]	; 0x28
   230d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   230d8:	f008 fdbb 	bl	2bc52 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   230dc:	2800      	cmp	r0, #0
   230de:	dc1a      	bgt.n	23116 <z_impl_k_poll+0x3c6>
	return list->head == list;
   230e0:	f8da a024 	ldr.w	sl, [sl, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   230e4:	45d0      	cmp	r8, sl
   230e6:	d02c      	beq.n	23142 <z_impl_k_poll+0x3f2>
   230e8:	4653      	mov	r3, sl
   230ea:	46a2      	mov	sl, r4
   230ec:	461c      	mov	r4, r3
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   230ee:	b374      	cbz	r4, 2314e <z_impl_k_poll+0x3fe>
		if (z_sched_prio_cmp(poller_thread(poller),
   230f0:	68a0      	ldr	r0, [r4, #8]
   230f2:	f009 f82a 	bl	2c14a <poller_thread>
   230f6:	4601      	mov	r1, r0
   230f8:	980a      	ldr	r0, [sp, #40]	; 0x28
   230fa:	f008 fdaa 	bl	2bc52 <z_sched_prio_cmp>
   230fe:	2800      	cmp	r0, #0
   23100:	dc13      	bgt.n	2312a <z_impl_k_poll+0x3da>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   23102:	b334      	cbz	r4, 23152 <z_impl_k_poll+0x402>
	return (node == list->tail) ? NULL : node->next;
   23104:	f8d8 3004 	ldr.w	r3, [r8, #4]
   23108:	429c      	cmp	r4, r3
   2310a:	d02d      	beq.n	23168 <z_impl_k_poll+0x418>
   2310c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2310e:	2c00      	cmp	r4, #0
   23110:	d1ed      	bne.n	230ee <z_impl_k_poll+0x39e>
   23112:	4654      	mov	r4, sl
   23114:	e01e      	b.n	23154 <z_impl_k_poll+0x404>
	sys_dnode_t *const tail = list->tail;
   23116:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   2311a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2311c:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   23120:	6063      	str	r3, [r4, #4]
	tail->next = node;
   23122:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23124:	f8c8 4004 	str.w	r4, [r8, #4]
		return;
   23128:	e6dd      	b.n	22ee6 <z_impl_k_poll+0x196>
   2312a:	4623      	mov	r3, r4
   2312c:	4654      	mov	r4, sl
   2312e:	469a      	mov	sl, r3
	sys_dnode_t *const prev = successor->prev;
   23130:	685b      	ldr	r3, [r3, #4]
	node->prev = prev;
   23132:	6063      	str	r3, [r4, #4]
	node->next = successor;
   23134:	9a09      	ldr	r2, [sp, #36]	; 0x24
   23136:	f845 a002 	str.w	sl, [r5, r2]
	prev->next = node;
   2313a:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   2313c:	f8ca 4004 	str.w	r4, [sl, #4]
			return;
   23140:	e6d1      	b.n	22ee6 <z_impl_k_poll+0x196>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   23142:	f04f 0a00 	mov.w	sl, #0
   23146:	4653      	mov	r3, sl
   23148:	46a2      	mov	sl, r4
   2314a:	461c      	mov	r4, r3
   2314c:	e7cf      	b.n	230ee <z_impl_k_poll+0x39e>
   2314e:	4654      	mov	r4, sl
   23150:	e000      	b.n	23154 <z_impl_k_poll+0x404>
   23152:	4654      	mov	r4, sl
	sys_dnode_t *const tail = list->tail;
   23154:	f8d8 3004 	ldr.w	r3, [r8, #4]
	node->next = list;
   23158:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2315a:	f845 8002 	str.w	r8, [r5, r2]
	node->prev = tail;
   2315e:	6063      	str	r3, [r4, #4]
	tail->next = node;
   23160:	601c      	str	r4, [r3, #0]
	list->tail = node;
   23162:	f8c8 4004 	str.w	r4, [r8, #4]
}
   23166:	e6be      	b.n	22ee6 <z_impl_k_poll+0x196>
   23168:	4654      	mov	r4, sl
   2316a:	e7f3      	b.n	23154 <z_impl_k_poll+0x404>
   2316c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23170:	f3ef 8111 	mrs	r1, BASEPRI
   23174:	f383 8812 	msr	BASEPRI_MAX, r3
   23178:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   2317c:	f899 3060 	ldrb.w	r3, [r9, #96]	; 0x60
   23180:	b1cb      	cbz	r3, 231b6 <z_impl_k_poll+0x466>
		SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, 0);

		return 0;
	}

	poller->is_polling = false;
   23182:	2300      	movs	r3, #0
   23184:	f889 3060 	strb.w	r3, [r9, #96]	; 0x60

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23188:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2318c:	4323      	orrs	r3, r4
   2318e:	d045      	beq.n	2321c <z_impl_k_poll+0x4cc>
		return -EAGAIN;
	}

	static _wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);

	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23190:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   23194:	e9cd 3400 	strd	r3, r4, [sp]
   23198:	4a3c      	ldr	r2, [pc, #240]	; (2328c <z_impl_k_poll+0x53c>)
   2319a:	483d      	ldr	r0, [pc, #244]	; (23290 <z_impl_k_poll+0x540>)
   2319c:	f7ff f956 	bl	2244c <z_pend_curr>
   231a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   231a4:	f3ef 8c11 	mrs	ip, BASEPRI
   231a8:	f383 8812 	msr	BASEPRI_MAX, r3
   231ac:	f3bf 8f6f 	isb	sy
   231b0:	4661      	mov	r1, ip
	while (num_events--) {
   231b2:	465b      	mov	r3, fp
   231b4:	e04e      	b.n	23254 <z_impl_k_poll+0x504>
		clear_event_registrations(events, events_registered, key);
   231b6:	4608      	mov	r0, r1
	while (num_events--) {
   231b8:	465b      	mov	r3, fp
   231ba:	e014      	b.n	231e6 <z_impl_k_poll+0x496>
	return node->next != NULL;
   231bc:	59aa      	ldr	r2, [r5, r6]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   231be:	b12a      	cbz	r2, 231cc <z_impl_k_poll+0x47c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   231c0:	685c      	ldr	r4, [r3, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   231c2:	6022      	str	r2, [r4, #0]
	next->prev = prev;
   231c4:	6054      	str	r4, [r2, #4]
	node->next = NULL;
   231c6:	2200      	movs	r2, #0
   231c8:	51aa      	str	r2, [r5, r6]
	node->prev = NULL;
   231ca:	605a      	str	r2, [r3, #4]
	__asm__ volatile(
   231cc:	f380 8811 	msr	BASEPRI, r0
   231d0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   231d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   231d8:	f3ef 8011 	mrs	r0, BASEPRI
   231dc:	f383 8812 	msr	BASEPRI_MAX, r3
   231e0:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   231e4:	463b      	mov	r3, r7
   231e6:	1e5f      	subs	r7, r3, #1
   231e8:	b193      	cbz	r3, 23210 <z_impl_k_poll+0x4c0>
		clear_event_registration(&events[num_events]);
   231ea:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   231ee:	009e      	lsls	r6, r3, #2
   231f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   231f4:	2200      	movs	r2, #0
   231f6:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   231f8:	7b5a      	ldrb	r2, [r3, #13]
   231fa:	f002 021f 	and.w	r2, r2, #31
   231fe:	2a08      	cmp	r2, #8
   23200:	d8e4      	bhi.n	231cc <z_impl_k_poll+0x47c>
   23202:	2401      	movs	r4, #1
   23204:	fa04 f202 	lsl.w	r2, r4, r2
   23208:	f412 7f8b 	tst.w	r2, #278	; 0x116
   2320c:	d0de      	beq.n	231cc <z_impl_k_poll+0x47c>
   2320e:	e7d5      	b.n	231bc <z_impl_k_poll+0x46c>
	__asm__ volatile(
   23210:	f381 8811 	msr	BASEPRI, r1
   23214:	f3bf 8f6f 	isb	sy
		return 0;
   23218:	4618      	mov	r0, r3
   2321a:	e034      	b.n	23286 <z_impl_k_poll+0x536>
   2321c:	f381 8811 	msr	BASEPRI, r1
   23220:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23224:	f06f 000a 	mvn.w	r0, #10
   23228:	e02d      	b.n	23286 <z_impl_k_poll+0x536>
	return node->next != NULL;
   2322a:	59ea      	ldr	r2, [r5, r7]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2322c:	b12a      	cbz	r2, 2323a <z_impl_k_poll+0x4ea>
	sys_dnode_t *const prev = node->prev;
   2322e:	685e      	ldr	r6, [r3, #4]
	prev->next = next;
   23230:	6032      	str	r2, [r6, #0]
	next->prev = prev;
   23232:	6056      	str	r6, [r2, #4]
	node->next = NULL;
   23234:	2200      	movs	r2, #0
   23236:	51ea      	str	r2, [r5, r7]
	node->prev = NULL;
   23238:	605a      	str	r2, [r3, #4]
   2323a:	f381 8811 	msr	BASEPRI, r1
   2323e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23242:	f04f 0340 	mov.w	r3, #64	; 0x40
   23246:	f3ef 8111 	mrs	r1, BASEPRI
   2324a:	f383 8812 	msr	BASEPRI_MAX, r3
   2324e:	f3bf 8f6f 	isb	sy
	while (num_events--) {
   23252:	4623      	mov	r3, r4
   23254:	1e5c      	subs	r4, r3, #1
   23256:	b193      	cbz	r3, 2327e <z_impl_k_poll+0x52e>
		clear_event_registration(&events[num_events]);
   23258:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2325c:	009f      	lsls	r7, r3, #2
   2325e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	event->poller = NULL;
   23262:	2200      	movs	r2, #0
   23264:	609a      	str	r2, [r3, #8]
	switch (event->type) {
   23266:	7b5a      	ldrb	r2, [r3, #13]
   23268:	f002 021f 	and.w	r2, r2, #31
   2326c:	2a08      	cmp	r2, #8
   2326e:	d8e4      	bhi.n	2323a <z_impl_k_poll+0x4ea>
   23270:	2601      	movs	r6, #1
   23272:	fa06 f202 	lsl.w	r2, r6, r2
   23276:	f412 7f8b 	tst.w	r2, #278	; 0x116
   2327a:	d0de      	beq.n	2323a <z_impl_k_poll+0x4ea>
   2327c:	e7d5      	b.n	2322a <z_impl_k_poll+0x4da>
	__asm__ volatile(
   2327e:	f38c 8811 	msr	BASEPRI, ip
   23282:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23286:	b00d      	add	sp, #52	; 0x34
   23288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2328c:	200006a0 	.word	0x200006a0
   23290:	20003e4c 	.word	0x20003e4c

00023294 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23294:	b538      	push	{r3, r4, r5, lr}
   23296:	4603      	mov	r3, r0
	__asm__ volatile(
   23298:	f04f 0240 	mov.w	r2, #64	; 0x40
   2329c:	f3ef 8511 	mrs	r5, BASEPRI
   232a0:	f382 8812 	msr	BASEPRI_MAX, r2
   232a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   232a8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   232aa:	2201      	movs	r2, #1
   232ac:	6082      	str	r2, [r0, #8]
	return list->head == list;
   232ae:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   232b0:	4283      	cmp	r3, r0
   232b2:	d011      	beq.n	232d8 <z_impl_k_poll_signal_raise+0x44>
	sys_dnode_t *const prev = node->prev;
   232b4:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   232b6:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   232b8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   232ba:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   232bc:	2300      	movs	r3, #0
   232be:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   232c0:	6043      	str	r3, [r0, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&sig->poll_events);
	if (poll_event == NULL) {
   232c2:	b148      	cbz	r0, 232d8 <z_impl_k_poll_signal_raise+0x44>
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   232c4:	2101      	movs	r1, #1
   232c6:	f008 ff90 	bl	2c1ea <signal_poll_event>
   232ca:	4604      	mov	r4, r0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   232cc:	4629      	mov	r1, r5
   232ce:	4805      	ldr	r0, [pc, #20]	; (232e4 <z_impl_k_poll_signal_raise+0x50>)
   232d0:	f7fe ff58 	bl	22184 <z_reschedule>
	return rc;
}
   232d4:	4620      	mov	r0, r4
   232d6:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   232d8:	f385 8811 	msr	BASEPRI, r5
   232dc:	f3bf 8f6f 	isb	sy
		return 0;
   232e0:	2400      	movs	r4, #0
   232e2:	e7f7      	b.n	232d4 <z_impl_k_poll_signal_raise+0x40>
   232e4:	20003e4c 	.word	0x20003e4c

000232e8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   232e8:	b538      	push	{r3, r4, r5, lr}
   232ea:	4604      	mov	r4, r0
   232ec:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   232ee:	f008 fa29 	bl	2b744 <k_is_in_isr>
   232f2:	b948      	cbnz	r0, 23308 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   232f4:	4b05      	ldr	r3, [pc, #20]	; (2330c <z_thread_aligned_alloc+0x24>)
   232f6:	689b      	ldr	r3, [r3, #8]
   232f8:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
	}

	if (heap != NULL) {
   232fc:	b118      	cbz	r0, 23306 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   232fe:	462a      	mov	r2, r5
   23300:	4621      	mov	r1, r4
   23302:	f008 ffbb 	bl	2c27c <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   23306:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
   23308:	2000      	movs	r0, #0
	return ret;
   2330a:	e7fc      	b.n	23306 <z_thread_aligned_alloc+0x1e>
   2330c:	20003e08 	.word	0x20003e08

00023310 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   23310:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   23312:	4a03      	ldr	r2, [pc, #12]	; (23320 <boot_banner+0x10>)
   23314:	4903      	ldr	r1, [pc, #12]	; (23324 <boot_banner+0x14>)
   23316:	4804      	ldr	r0, [pc, #16]	; (23328 <boot_banner+0x18>)
   23318:	f002 fc9c 	bl	25c54 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2331c:	bd08      	pop	{r3, pc}
   2331e:	bf00      	nop
   23320:	0002c884 	.word	0x0002c884
   23324:	0002f234 	.word	0x0002f234
   23328:	0002f240 	.word	0x0002f240

0002332c <nrf_cc3xx_platform_init>:
   2332c:	b510      	push	{r4, lr}
   2332e:	4c0c      	ldr	r4, [pc, #48]	; (23360 <nrf_cc3xx_platform_init+0x34>)
   23330:	6823      	ldr	r3, [r4, #0]
   23332:	b113      	cbz	r3, 2333a <nrf_cc3xx_platform_init+0xe>
   23334:	4b0b      	ldr	r3, [pc, #44]	; (23364 <nrf_cc3xx_platform_init+0x38>)
   23336:	681b      	ldr	r3, [r3, #0]
   23338:	b92b      	cbnz	r3, 23346 <nrf_cc3xx_platform_init+0x1a>
   2333a:	f000 fabd 	bl	238b8 <CC_LibInit>
   2333e:	b930      	cbnz	r0, 2334e <nrf_cc3xx_platform_init+0x22>
   23340:	4b08      	ldr	r3, [pc, #32]	; (23364 <nrf_cc3xx_platform_init+0x38>)
   23342:	2201      	movs	r2, #1
   23344:	601a      	str	r2, [r3, #0]
   23346:	2301      	movs	r3, #1
   23348:	6023      	str	r3, [r4, #0]
   2334a:	2000      	movs	r0, #0
   2334c:	bd10      	pop	{r4, pc}
   2334e:	3801      	subs	r0, #1
   23350:	2806      	cmp	r0, #6
   23352:	d901      	bls.n	23358 <nrf_cc3xx_platform_init+0x2c>
   23354:	4804      	ldr	r0, [pc, #16]	; (23368 <nrf_cc3xx_platform_init+0x3c>)
   23356:	bd10      	pop	{r4, pc}
   23358:	4b04      	ldr	r3, [pc, #16]	; (2336c <nrf_cc3xx_platform_init+0x40>)
   2335a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   2335e:	bd10      	pop	{r4, pc}
   23360:	20003e4c 	.word	0x20003e4c
   23364:	20003e50 	.word	0x20003e50
   23368:	ffff8ffe 	.word	0xffff8ffe
   2336c:	0002f268 	.word	0x0002f268

00023370 <nrf_cc3xx_platform_abort>:
   23370:	f3bf 8f4f 	dsb	sy
   23374:	4905      	ldr	r1, [pc, #20]	; (2338c <nrf_cc3xx_platform_abort+0x1c>)
   23376:	4b06      	ldr	r3, [pc, #24]	; (23390 <nrf_cc3xx_platform_abort+0x20>)
   23378:	68ca      	ldr	r2, [r1, #12]
   2337a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2337e:	4313      	orrs	r3, r2
   23380:	60cb      	str	r3, [r1, #12]
   23382:	f3bf 8f4f 	dsb	sy
   23386:	bf00      	nop
   23388:	e7fd      	b.n	23386 <nrf_cc3xx_platform_abort+0x16>
   2338a:	bf00      	nop
   2338c:	e000ed00 	.word	0xe000ed00
   23390:	05fa0004 	.word	0x05fa0004

00023394 <CC_PalAbort>:
   23394:	b4f0      	push	{r4, r5, r6, r7}
   23396:	4f09      	ldr	r7, [pc, #36]	; (233bc <CC_PalAbort+0x28>)
   23398:	4e09      	ldr	r6, [pc, #36]	; (233c0 <CC_PalAbort+0x2c>)
   2339a:	4c0a      	ldr	r4, [pc, #40]	; (233c4 <CC_PalAbort+0x30>)
   2339c:	4a0a      	ldr	r2, [pc, #40]	; (233c8 <CC_PalAbort+0x34>)
   2339e:	4d0b      	ldr	r5, [pc, #44]	; (233cc <CC_PalAbort+0x38>)
   233a0:	490b      	ldr	r1, [pc, #44]	; (233d0 <CC_PalAbort+0x3c>)
   233a2:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   233a6:	603b      	str	r3, [r7, #0]
   233a8:	6852      	ldr	r2, [r2, #4]
   233aa:	6033      	str	r3, [r6, #0]
   233ac:	6023      	str	r3, [r4, #0]
   233ae:	2400      	movs	r4, #0
   233b0:	602b      	str	r3, [r5, #0]
   233b2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   233b6:	bcf0      	pop	{r4, r5, r6, r7}
   233b8:	4710      	bx	r2
   233ba:	bf00      	nop
   233bc:	5002b400 	.word	0x5002b400
   233c0:	5002b404 	.word	0x5002b404
   233c4:	5002b408 	.word	0x5002b408
   233c8:	200006a8 	.word	0x200006a8
   233cc:	5002b40c 	.word	0x5002b40c
   233d0:	5002a000 	.word	0x5002a000

000233d4 <nrf_cc3xx_platform_set_abort>:
   233d4:	e9d0 1200 	ldrd	r1, r2, [r0]
   233d8:	4b01      	ldr	r3, [pc, #4]	; (233e0 <nrf_cc3xx_platform_set_abort+0xc>)
   233da:	e9c3 1200 	strd	r1, r2, [r3]
   233de:	4770      	bx	lr
   233e0:	200006a8 	.word	0x200006a8

000233e4 <nrf_cc3xx_platform_ctr_drbg_init>:
   233e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   233e8:	4c15      	ldr	r4, [pc, #84]	; (23440 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   233ea:	f8df 805c 	ldr.w	r8, [pc, #92]	; 23448 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   233ee:	2800      	cmp	r0, #0
   233f0:	bf18      	it	ne
   233f2:	4604      	movne	r4, r0
   233f4:	b083      	sub	sp, #12
   233f6:	6820      	ldr	r0, [r4, #0]
   233f8:	4540      	cmp	r0, r8
   233fa:	d01d      	beq.n	23438 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   233fc:	460d      	mov	r5, r1
   233fe:	4620      	mov	r0, r4
   23400:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   23404:	f104 0904 	add.w	r9, r4, #4
   23408:	4616      	mov	r6, r2
   2340a:	f504 778c 	add.w	r7, r4, #280	; 0x118
   2340e:	f000 fe9f 	bl	24150 <mbedtls_platform_zeroize>
   23412:	4648      	mov	r0, r9
   23414:	f000 f940 	bl	23698 <cc_mbedtls_entropy_init>
   23418:	4638      	mov	r0, r7
   2341a:	f001 fa75 	bl	24908 <cc_mbedtls_ctr_drbg_init>
   2341e:	4909      	ldr	r1, [pc, #36]	; (23444 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   23420:	9600      	str	r6, [sp, #0]
   23422:	464a      	mov	r2, r9
   23424:	4638      	mov	r0, r7
   23426:	462b      	mov	r3, r5
   23428:	f001 fa80 	bl	2492c <cc_mbedtls_ctr_drbg_seed>
   2342c:	b908      	cbnz	r0, 23432 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   2342e:	f8c4 8000 	str.w	r8, [r4]
   23432:	b003      	add	sp, #12
   23434:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23438:	2000      	movs	r0, #0
   2343a:	b003      	add	sp, #12
   2343c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23440:	2000475c 	.word	0x2000475c
   23444:	00023715 	.word	0x00023715
   23448:	5ac9bca5 	.word	0x5ac9bca5

0002344c <nrf_cc3xx_platform_ctr_drbg_get>:
   2344c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2344e:	4c0d      	ldr	r4, [pc, #52]	; (23484 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   23450:	4e0d      	ldr	r6, [pc, #52]	; (23488 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   23452:	2800      	cmp	r0, #0
   23454:	bf08      	it	eq
   23456:	4620      	moveq	r0, r4
   23458:	b083      	sub	sp, #12
   2345a:	6807      	ldr	r7, [r0, #0]
   2345c:	42b7      	cmp	r7, r6
   2345e:	d10e      	bne.n	2347e <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   23460:	2600      	movs	r6, #0
   23462:	461d      	mov	r5, r3
   23464:	f500 708c 	add.w	r0, r0, #280	; 0x118
   23468:	9600      	str	r6, [sp, #0]
   2346a:	4633      	mov	r3, r6
   2346c:	4614      	mov	r4, r2
   2346e:	f001 faad 	bl	249cc <cc_mbedtls_ctr_drbg_random_with_add>
   23472:	2800      	cmp	r0, #0
   23474:	bf18      	it	ne
   23476:	4634      	movne	r4, r6
   23478:	602c      	str	r4, [r5, #0]
   2347a:	b003      	add	sp, #12
   2347c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2347e:	4803      	ldr	r0, [pc, #12]	; (2348c <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   23480:	e7fb      	b.n	2347a <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   23482:	bf00      	nop
   23484:	2000475c 	.word	0x2000475c
   23488:	5ac9bca5 	.word	0x5ac9bca5
   2348c:	ffff8fe8 	.word	0xffff8fe8

00023490 <mutex_free>:
   23490:	b510      	push	{r4, lr}
   23492:	4604      	mov	r4, r0
   23494:	b130      	cbz	r0, 234a4 <mutex_free+0x14>
   23496:	6863      	ldr	r3, [r4, #4]
   23498:	06db      	lsls	r3, r3, #27
   2349a:	d502      	bpl.n	234a2 <mutex_free+0x12>
   2349c:	2300      	movs	r3, #0
   2349e:	6023      	str	r3, [r4, #0]
   234a0:	6063      	str	r3, [r4, #4]
   234a2:	bd10      	pop	{r4, pc}
   234a4:	4b02      	ldr	r3, [pc, #8]	; (234b0 <mutex_free+0x20>)
   234a6:	4803      	ldr	r0, [pc, #12]	; (234b4 <mutex_free+0x24>)
   234a8:	685b      	ldr	r3, [r3, #4]
   234aa:	4798      	blx	r3
   234ac:	e7f3      	b.n	23496 <mutex_free+0x6>
   234ae:	bf00      	nop
   234b0:	200006a8 	.word	0x200006a8
   234b4:	0002f284 	.word	0x0002f284

000234b8 <mutex_unlock>:
   234b8:	b168      	cbz	r0, 234d6 <mutex_unlock+0x1e>
   234ba:	6843      	ldr	r3, [r0, #4]
   234bc:	b13b      	cbz	r3, 234ce <mutex_unlock+0x16>
   234be:	06db      	lsls	r3, r3, #27
   234c0:	d507      	bpl.n	234d2 <mutex_unlock+0x1a>
   234c2:	f3bf 8f5f 	dmb	sy
   234c6:	2300      	movs	r3, #0
   234c8:	6003      	str	r3, [r0, #0]
   234ca:	4618      	mov	r0, r3
   234cc:	4770      	bx	lr
   234ce:	4803      	ldr	r0, [pc, #12]	; (234dc <mutex_unlock+0x24>)
   234d0:	4770      	bx	lr
   234d2:	4803      	ldr	r0, [pc, #12]	; (234e0 <mutex_unlock+0x28>)
   234d4:	4770      	bx	lr
   234d6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   234da:	4770      	bx	lr
   234dc:	ffff8fea 	.word	0xffff8fea
   234e0:	ffff8fe9 	.word	0xffff8fe9

000234e4 <mutex_init>:
   234e4:	b510      	push	{r4, lr}
   234e6:	4604      	mov	r4, r0
   234e8:	b120      	cbz	r0, 234f4 <mutex_init+0x10>
   234ea:	2200      	movs	r2, #0
   234ec:	2311      	movs	r3, #17
   234ee:	6022      	str	r2, [r4, #0]
   234f0:	6063      	str	r3, [r4, #4]
   234f2:	bd10      	pop	{r4, pc}
   234f4:	4801      	ldr	r0, [pc, #4]	; (234fc <mutex_init+0x18>)
   234f6:	f7ff ff4d 	bl	23394 <CC_PalAbort>
   234fa:	e7f6      	b.n	234ea <mutex_init+0x6>
   234fc:	0002f2ac 	.word	0x0002f2ac

00023500 <mutex_lock>:
   23500:	b1c0      	cbz	r0, 23534 <mutex_lock+0x34>
   23502:	6843      	ldr	r3, [r0, #4]
   23504:	b1a3      	cbz	r3, 23530 <mutex_lock+0x30>
   23506:	06db      	lsls	r3, r3, #27
   23508:	d510      	bpl.n	2352c <mutex_lock+0x2c>
   2350a:	2201      	movs	r2, #1
   2350c:	f3bf 8f5b 	dmb	ish
   23510:	e850 3f00 	ldrex	r3, [r0]
   23514:	e840 2100 	strex	r1, r2, [r0]
   23518:	2900      	cmp	r1, #0
   2351a:	d1f9      	bne.n	23510 <mutex_lock+0x10>
   2351c:	f3bf 8f5b 	dmb	ish
   23520:	2b01      	cmp	r3, #1
   23522:	d0f3      	beq.n	2350c <mutex_lock+0xc>
   23524:	f3bf 8f5f 	dmb	sy
   23528:	2000      	movs	r0, #0
   2352a:	4770      	bx	lr
   2352c:	4803      	ldr	r0, [pc, #12]	; (2353c <mutex_lock+0x3c>)
   2352e:	4770      	bx	lr
   23530:	4803      	ldr	r0, [pc, #12]	; (23540 <mutex_lock+0x40>)
   23532:	4770      	bx	lr
   23534:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   23538:	4770      	bx	lr
   2353a:	bf00      	nop
   2353c:	ffff8fe9 	.word	0xffff8fe9
   23540:	ffff8fea 	.word	0xffff8fea

00023544 <nrf_cc3xx_platform_set_mutexes>:
   23544:	b570      	push	{r4, r5, r6, lr}
   23546:	e9d0 2300 	ldrd	r2, r3, [r0]
   2354a:	4c13      	ldr	r4, [pc, #76]	; (23598 <nrf_cc3xx_platform_set_mutexes+0x54>)
   2354c:	4d13      	ldr	r5, [pc, #76]	; (2359c <nrf_cc3xx_platform_set_mutexes+0x58>)
   2354e:	e9c4 2300 	strd	r2, r3, [r4]
   23552:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   23556:	e9c4 6302 	strd	r6, r3, [r4, #8]
   2355a:	4b11      	ldr	r3, [pc, #68]	; (235a0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   2355c:	6808      	ldr	r0, [r1, #0]
   2355e:	6018      	str	r0, [r3, #0]
   23560:	6848      	ldr	r0, [r1, #4]
   23562:	6058      	str	r0, [r3, #4]
   23564:	6888      	ldr	r0, [r1, #8]
   23566:	6098      	str	r0, [r3, #8]
   23568:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   2356c:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   23570:	60de      	str	r6, [r3, #12]
   23572:	6118      	str	r0, [r3, #16]
   23574:	06cb      	lsls	r3, r1, #27
   23576:	d50d      	bpl.n	23594 <nrf_cc3xx_platform_set_mutexes+0x50>
   23578:	2300      	movs	r3, #0
   2357a:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   2357e:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   23582:	f505 7088 	add.w	r0, r5, #272	; 0x110
   23586:	4790      	blx	r2
   23588:	6823      	ldr	r3, [r4, #0]
   2358a:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   2358e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23592:	4718      	bx	r3
   23594:	bd70      	pop	{r4, r5, r6, pc}
   23596:	bf00      	nop
   23598:	200006b8 	.word	0x200006b8
   2359c:	2000475c 	.word	0x2000475c
   235a0:	200006c8 	.word	0x200006c8

000235a4 <entropy_update>:
   235a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   235a8:	2b20      	cmp	r3, #32
   235aa:	b08b      	sub	sp, #44	; 0x2c
   235ac:	461d      	mov	r5, r3
   235ae:	4606      	mov	r6, r0
   235b0:	4689      	mov	r9, r1
   235b2:	4690      	mov	r8, r2
   235b4:	d826      	bhi.n	23604 <entropy_update+0x60>
   235b6:	b2db      	uxtb	r3, r3
   235b8:	af02      	add	r7, sp, #8
   235ba:	6831      	ldr	r1, [r6, #0]
   235bc:	f88d 9004 	strb.w	r9, [sp, #4]
   235c0:	f88d 3005 	strb.w	r3, [sp, #5]
   235c4:	f106 0904 	add.w	r9, r6, #4
   235c8:	b921      	cbnz	r1, 235d4 <entropy_update+0x30>
   235ca:	4648      	mov	r0, r9
   235cc:	f000 fe62 	bl	24294 <cc_mbedtls_sha256_starts_ret>
   235d0:	4604      	mov	r4, r0
   235d2:	b940      	cbnz	r0, 235e6 <entropy_update+0x42>
   235d4:	2301      	movs	r3, #1
   235d6:	6033      	str	r3, [r6, #0]
   235d8:	2202      	movs	r2, #2
   235da:	a901      	add	r1, sp, #4
   235dc:	4648      	mov	r0, r9
   235de:	f000 fe6d 	bl	242bc <cc_mbedtls_sha256_update_ret>
   235e2:	4604      	mov	r4, r0
   235e4:	b138      	cbz	r0, 235f6 <entropy_update+0x52>
   235e6:	4638      	mov	r0, r7
   235e8:	2120      	movs	r1, #32
   235ea:	f000 fdb1 	bl	24150 <mbedtls_platform_zeroize>
   235ee:	4620      	mov	r0, r4
   235f0:	b00b      	add	sp, #44	; 0x2c
   235f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   235f6:	462a      	mov	r2, r5
   235f8:	4641      	mov	r1, r8
   235fa:	4648      	mov	r0, r9
   235fc:	f000 fe5e 	bl	242bc <cc_mbedtls_sha256_update_ret>
   23600:	4604      	mov	r4, r0
   23602:	e7f0      	b.n	235e6 <entropy_update+0x42>
   23604:	af02      	add	r7, sp, #8
   23606:	4619      	mov	r1, r3
   23608:	4610      	mov	r0, r2
   2360a:	2300      	movs	r3, #0
   2360c:	463a      	mov	r2, r7
   2360e:	f001 fad1 	bl	24bb4 <cc_mbedtls_sha256_ret>
   23612:	4604      	mov	r4, r0
   23614:	2800      	cmp	r0, #0
   23616:	d1e6      	bne.n	235e6 <entropy_update+0x42>
   23618:	2320      	movs	r3, #32
   2361a:	461d      	mov	r5, r3
   2361c:	46b8      	mov	r8, r7
   2361e:	e7cc      	b.n	235ba <entropy_update+0x16>

00023620 <entropy_gather_internal.part.0>:
   23620:	b5f0      	push	{r4, r5, r6, r7, lr}
   23622:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   23626:	b0a7      	sub	sp, #156	; 0x9c
   23628:	2b00      	cmp	r3, #0
   2362a:	bfd8      	it	le
   2362c:	ae02      	addle	r6, sp, #8
   2362e:	dd2c      	ble.n	2368a <entropy_gather_internal.part.0+0x6a>
   23630:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   23634:	4605      	mov	r5, r0
   23636:	2300      	movs	r3, #0
   23638:	ae02      	add	r6, sp, #8
   2363a:	9301      	str	r3, [sp, #4]
   2363c:	f1a4 0701 	sub.w	r7, r4, #1
   23640:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   23644:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   23648:	4631      	mov	r1, r6
   2364a:	ab01      	add	r3, sp, #4
   2364c:	2290      	movs	r2, #144	; 0x90
   2364e:	47a0      	blx	r4
   23650:	fab7 f787 	clz	r7, r7
   23654:	097f      	lsrs	r7, r7, #5
   23656:	4604      	mov	r4, r0
   23658:	b910      	cbnz	r0, 23660 <entropy_gather_internal.part.0+0x40>
   2365a:	9b01      	ldr	r3, [sp, #4]
   2365c:	b93b      	cbnz	r3, 2366e <entropy_gather_internal.part.0+0x4e>
   2365e:	b1a7      	cbz	r7, 2368a <entropy_gather_internal.part.0+0x6a>
   23660:	4630      	mov	r0, r6
   23662:	2190      	movs	r1, #144	; 0x90
   23664:	f000 fd74 	bl	24150 <mbedtls_platform_zeroize>
   23668:	4620      	mov	r0, r4
   2366a:	b027      	add	sp, #156	; 0x9c
   2366c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2366e:	4601      	mov	r1, r0
   23670:	4632      	mov	r2, r6
   23672:	4628      	mov	r0, r5
   23674:	f7ff ff96 	bl	235a4 <entropy_update>
   23678:	b950      	cbnz	r0, 23690 <entropy_gather_internal.part.0+0x70>
   2367a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   2367e:	9a01      	ldr	r2, [sp, #4]
   23680:	4413      	add	r3, r2
   23682:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   23686:	2f00      	cmp	r7, #0
   23688:	d1ea      	bne.n	23660 <entropy_gather_internal.part.0+0x40>
   2368a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   2368e:	e7e7      	b.n	23660 <entropy_gather_internal.part.0+0x40>
   23690:	4604      	mov	r4, r0
   23692:	4620      	mov	r0, r4
   23694:	b027      	add	sp, #156	; 0x9c
   23696:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023698 <cc_mbedtls_entropy_init>:
   23698:	b570      	push	{r4, r5, r6, lr}
   2369a:	2500      	movs	r5, #0
   2369c:	4604      	mov	r4, r0
   2369e:	4629      	mov	r1, r5
   236a0:	2214      	movs	r2, #20
   236a2:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   236a6:	30f8      	adds	r0, #248	; 0xf8
   236a8:	f004 faf6 	bl	27c98 <memset>
   236ac:	4b15      	ldr	r3, [pc, #84]	; (23704 <cc_mbedtls_entropy_init+0x6c>)
   236ae:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   236b2:	681b      	ldr	r3, [r3, #0]
   236b4:	4630      	mov	r0, r6
   236b6:	4798      	blx	r3
   236b8:	4620      	mov	r0, r4
   236ba:	f840 5b04 	str.w	r5, [r0], #4
   236be:	f000 fdcf 	bl	24260 <cc_mbedtls_sha256_init>
   236c2:	4b11      	ldr	r3, [pc, #68]	; (23708 <cc_mbedtls_entropy_init+0x70>)
   236c4:	4630      	mov	r0, r6
   236c6:	681b      	ldr	r3, [r3, #0]
   236c8:	4798      	blx	r3
   236ca:	b9c8      	cbnz	r0, 23700 <cc_mbedtls_entropy_init+0x68>
   236cc:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   236d0:	42ab      	cmp	r3, r5
   236d2:	dc0f      	bgt.n	236f4 <cc_mbedtls_entropy_init+0x5c>
   236d4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   236d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   236dc:	490b      	ldr	r1, [pc, #44]	; (2370c <cc_mbedtls_entropy_init+0x74>)
   236de:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   236e2:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   236e6:	3301      	adds	r3, #1
   236e8:	2020      	movs	r0, #32
   236ea:	2101      	movs	r1, #1
   236ec:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   236f0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   236f4:	4b06      	ldr	r3, [pc, #24]	; (23710 <cc_mbedtls_entropy_init+0x78>)
   236f6:	4630      	mov	r0, r6
   236f8:	681b      	ldr	r3, [r3, #0]
   236fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   236fe:	4718      	bx	r3
   23700:	bd70      	pop	{r4, r5, r6, pc}
   23702:	bf00      	nop
   23704:	2000070c 	.word	0x2000070c
   23708:	20000710 	.word	0x20000710
   2370c:	00024165 	.word	0x00024165
   23710:	20000714 	.word	0x20000714

00023714 <cc_mbedtls_entropy_func>:
   23714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23718:	2a20      	cmp	r2, #32
   2371a:	b088      	sub	sp, #32
   2371c:	d876      	bhi.n	2380c <cc_mbedtls_entropy_func+0xf8>
   2371e:	4b3d      	ldr	r3, [pc, #244]	; (23814 <cc_mbedtls_entropy_func+0x100>)
   23720:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   23724:	681b      	ldr	r3, [r3, #0]
   23726:	4604      	mov	r4, r0
   23728:	4648      	mov	r0, r9
   2372a:	4617      	mov	r7, r2
   2372c:	4688      	mov	r8, r1
   2372e:	4798      	blx	r3
   23730:	4605      	mov	r5, r0
   23732:	bba0      	cbnz	r0, 2379e <cc_mbedtls_entropy_func+0x8a>
   23734:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   23738:	f240 1601 	movw	r6, #257	; 0x101
   2373c:	e001      	b.n	23742 <cc_mbedtls_entropy_func+0x2e>
   2373e:	3e01      	subs	r6, #1
   23740:	d060      	beq.n	23804 <cc_mbedtls_entropy_func+0xf0>
   23742:	4620      	mov	r0, r4
   23744:	b37b      	cbz	r3, 237a6 <cc_mbedtls_entropy_func+0x92>
   23746:	f7ff ff6b 	bl	23620 <entropy_gather_internal.part.0>
   2374a:	4605      	mov	r5, r0
   2374c:	bb68      	cbnz	r0, 237aa <cc_mbedtls_entropy_func+0x96>
   2374e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   23752:	2b00      	cmp	r3, #0
   23754:	ddf3      	ble.n	2373e <cc_mbedtls_entropy_func+0x2a>
   23756:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   2375a:	4290      	cmp	r0, r2
   2375c:	d3ef      	bcc.n	2373e <cc_mbedtls_entropy_func+0x2a>
   2375e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   23762:	2a01      	cmp	r2, #1
   23764:	d1eb      	bne.n	2373e <cc_mbedtls_entropy_func+0x2a>
   23766:	281f      	cmp	r0, #31
   23768:	d9e9      	bls.n	2373e <cc_mbedtls_entropy_func+0x2a>
   2376a:	466e      	mov	r6, sp
   2376c:	4629      	mov	r1, r5
   2376e:	2220      	movs	r2, #32
   23770:	4630      	mov	r0, r6
   23772:	f104 0a04 	add.w	sl, r4, #4
   23776:	f004 fa8f 	bl	27c98 <memset>
   2377a:	4631      	mov	r1, r6
   2377c:	4650      	mov	r0, sl
   2377e:	f000 fda5 	bl	242cc <cc_mbedtls_sha256_finish_ret>
   23782:	4605      	mov	r5, r0
   23784:	b198      	cbz	r0, 237ae <cc_mbedtls_entropy_func+0x9a>
   23786:	4630      	mov	r0, r6
   23788:	2120      	movs	r1, #32
   2378a:	f000 fce1 	bl	24150 <mbedtls_platform_zeroize>
   2378e:	4b22      	ldr	r3, [pc, #136]	; (23818 <cc_mbedtls_entropy_func+0x104>)
   23790:	4648      	mov	r0, r9
   23792:	681b      	ldr	r3, [r3, #0]
   23794:	4798      	blx	r3
   23796:	2800      	cmp	r0, #0
   23798:	bf18      	it	ne
   2379a:	f06f 051d 	mvnne.w	r5, #29
   2379e:	4628      	mov	r0, r5
   237a0:	b008      	add	sp, #32
   237a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   237a6:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   237aa:	466e      	mov	r6, sp
   237ac:	e7eb      	b.n	23786 <cc_mbedtls_entropy_func+0x72>
   237ae:	4650      	mov	r0, sl
   237b0:	f000 fd6a 	bl	24288 <cc_mbedtls_sha256_free>
   237b4:	4650      	mov	r0, sl
   237b6:	f000 fd53 	bl	24260 <cc_mbedtls_sha256_init>
   237ba:	4629      	mov	r1, r5
   237bc:	4650      	mov	r0, sl
   237be:	f000 fd69 	bl	24294 <cc_mbedtls_sha256_starts_ret>
   237c2:	4605      	mov	r5, r0
   237c4:	2800      	cmp	r0, #0
   237c6:	d1de      	bne.n	23786 <cc_mbedtls_entropy_func+0x72>
   237c8:	4650      	mov	r0, sl
   237ca:	2220      	movs	r2, #32
   237cc:	4631      	mov	r1, r6
   237ce:	f000 fd75 	bl	242bc <cc_mbedtls_sha256_update_ret>
   237d2:	4605      	mov	r5, r0
   237d4:	2800      	cmp	r0, #0
   237d6:	d1d6      	bne.n	23786 <cc_mbedtls_entropy_func+0x72>
   237d8:	4603      	mov	r3, r0
   237da:	4632      	mov	r2, r6
   237dc:	2120      	movs	r1, #32
   237de:	4630      	mov	r0, r6
   237e0:	f001 f9e8 	bl	24bb4 <cc_mbedtls_sha256_ret>
   237e4:	4605      	mov	r5, r0
   237e6:	2800      	cmp	r0, #0
   237e8:	d1cd      	bne.n	23786 <cc_mbedtls_entropy_func+0x72>
   237ea:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   237ee:	2b00      	cmp	r3, #0
   237f0:	bfc4      	itt	gt
   237f2:	2300      	movgt	r3, #0
   237f4:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   237f8:	463a      	mov	r2, r7
   237fa:	4640      	mov	r0, r8
   237fc:	4631      	mov	r1, r6
   237fe:	f004 fa27 	bl	27c50 <memcpy>
   23802:	e7c0      	b.n	23786 <cc_mbedtls_entropy_func+0x72>
   23804:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23808:	466e      	mov	r6, sp
   2380a:	e7bc      	b.n	23786 <cc_mbedtls_entropy_func+0x72>
   2380c:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   23810:	e7c5      	b.n	2379e <cc_mbedtls_entropy_func+0x8a>
   23812:	bf00      	nop
   23814:	20000710 	.word	0x20000710
   23818:	20000714 	.word	0x20000714

0002381c <RndStartupTest.constprop.0>:
   2381c:	b530      	push	{r4, r5, lr}
   2381e:	b08d      	sub	sp, #52	; 0x34
   23820:	2100      	movs	r1, #0
   23822:	2228      	movs	r2, #40	; 0x28
   23824:	a802      	add	r0, sp, #8
   23826:	9101      	str	r1, [sp, #4]
   23828:	f004 fa36 	bl	27c98 <memset>
   2382c:	a802      	add	r0, sp, #8
   2382e:	f001 f9e9 	bl	24c04 <RNG_PLAT_SetUserRngParameters>
   23832:	4604      	mov	r4, r0
   23834:	b110      	cbz	r0, 2383c <RndStartupTest.constprop.0+0x20>
   23836:	4620      	mov	r0, r4
   23838:	b00d      	add	sp, #52	; 0x34
   2383a:	bd30      	pop	{r4, r5, pc}
   2383c:	4d18      	ldr	r5, [pc, #96]	; (238a0 <RndStartupTest.constprop.0+0x84>)
   2383e:	f04f 31ff 	mov.w	r1, #4294967295
   23842:	6828      	ldr	r0, [r5, #0]
   23844:	f000 f93c 	bl	23ac0 <CC_PalMutexLock>
   23848:	4604      	mov	r4, r0
   2384a:	b9c0      	cbnz	r0, 2387e <RndStartupTest.constprop.0+0x62>
   2384c:	2000      	movs	r0, #0
   2384e:	f000 f967 	bl	23b20 <CC_PalPowerSaveModeSelect>
   23852:	bb00      	cbnz	r0, 23896 <RndStartupTest.constprop.0+0x7a>
   23854:	4a13      	ldr	r2, [pc, #76]	; (238a4 <RndStartupTest.constprop.0+0x88>)
   23856:	a902      	add	r1, sp, #8
   23858:	a801      	add	r0, sp, #4
   2385a:	f000 fc6b 	bl	24134 <LLF_RND_RunTrngStartupTest>
   2385e:	4604      	mov	r4, r0
   23860:	2001      	movs	r0, #1
   23862:	f000 f95d 	bl	23b20 <CC_PalPowerSaveModeSelect>
   23866:	b990      	cbnz	r0, 2388e <RndStartupTest.constprop.0+0x72>
   23868:	6828      	ldr	r0, [r5, #0]
   2386a:	f000 f931 	bl	23ad0 <CC_PalMutexUnlock>
   2386e:	2800      	cmp	r0, #0
   23870:	d0e1      	beq.n	23836 <RndStartupTest.constprop.0+0x1a>
   23872:	480d      	ldr	r0, [pc, #52]	; (238a8 <RndStartupTest.constprop.0+0x8c>)
   23874:	f7ff fd8e 	bl	23394 <CC_PalAbort>
   23878:	4620      	mov	r0, r4
   2387a:	b00d      	add	sp, #52	; 0x34
   2387c:	bd30      	pop	{r4, r5, pc}
   2387e:	480b      	ldr	r0, [pc, #44]	; (238ac <RndStartupTest.constprop.0+0x90>)
   23880:	f7ff fd88 	bl	23394 <CC_PalAbort>
   23884:	2c01      	cmp	r4, #1
   23886:	bf08      	it	eq
   23888:	2405      	moveq	r4, #5
   2388a:	d0ed      	beq.n	23868 <RndStartupTest.constprop.0+0x4c>
   2388c:	e7de      	b.n	2384c <RndStartupTest.constprop.0+0x30>
   2388e:	4808      	ldr	r0, [pc, #32]	; (238b0 <RndStartupTest.constprop.0+0x94>)
   23890:	f7ff fd80 	bl	23394 <CC_PalAbort>
   23894:	e7e8      	b.n	23868 <RndStartupTest.constprop.0+0x4c>
   23896:	4807      	ldr	r0, [pc, #28]	; (238b4 <RndStartupTest.constprop.0+0x98>)
   23898:	f7ff fd7c 	bl	23394 <CC_PalAbort>
   2389c:	e7da      	b.n	23854 <RndStartupTest.constprop.0+0x38>
   2389e:	bf00      	nop
   238a0:	20000708 	.word	0x20000708
   238a4:	20003ecc 	.word	0x20003ecc
   238a8:	0002f328 	.word	0x0002f328
   238ac:	0002f2d0 	.word	0x0002f2d0
   238b0:	0002f308 	.word	0x0002f308
   238b4:	0002f2e8 	.word	0x0002f2e8

000238b8 <CC_LibInit>:
   238b8:	b510      	push	{r4, lr}
   238ba:	b082      	sub	sp, #8
   238bc:	f000 f854 	bl	23968 <CC_HalInit>
   238c0:	b128      	cbz	r0, 238ce <CC_LibInit+0x16>
   238c2:	f000 f8a3 	bl	23a0c <CC_PalTerminate>
   238c6:	2403      	movs	r4, #3
   238c8:	4620      	mov	r0, r4
   238ca:	b002      	add	sp, #8
   238cc:	bd10      	pop	{r4, pc}
   238ce:	f000 f86f 	bl	239b0 <CC_PalInit>
   238d2:	b9d0      	cbnz	r0, 2390a <CC_LibInit+0x52>
   238d4:	f000 f924 	bl	23b20 <CC_PalPowerSaveModeSelect>
   238d8:	b9d8      	cbnz	r0, 23912 <CC_LibInit+0x5a>
   238da:	4b1e      	ldr	r3, [pc, #120]	; (23954 <CC_LibInit+0x9c>)
   238dc:	681b      	ldr	r3, [r3, #0]
   238de:	0e1b      	lsrs	r3, r3, #24
   238e0:	2bf0      	cmp	r3, #240	; 0xf0
   238e2:	d10a      	bne.n	238fa <CC_LibInit+0x42>
   238e4:	4a1c      	ldr	r2, [pc, #112]	; (23958 <CC_LibInit+0xa0>)
   238e6:	4b1d      	ldr	r3, [pc, #116]	; (2395c <CC_LibInit+0xa4>)
   238e8:	6812      	ldr	r2, [r2, #0]
   238ea:	429a      	cmp	r2, r3
   238ec:	d029      	beq.n	23942 <CC_LibInit+0x8a>
   238ee:	f000 f83d 	bl	2396c <CC_HalTerminate>
   238f2:	2407      	movs	r4, #7
   238f4:	f000 f88a 	bl	23a0c <CC_PalTerminate>
   238f8:	e7e6      	b.n	238c8 <CC_LibInit+0x10>
   238fa:	f000 f837 	bl	2396c <CC_HalTerminate>
   238fe:	f000 f885 	bl	23a0c <CC_PalTerminate>
   23902:	2406      	movs	r4, #6
   23904:	4620      	mov	r0, r4
   23906:	b002      	add	sp, #8
   23908:	bd10      	pop	{r4, pc}
   2390a:	2404      	movs	r4, #4
   2390c:	4620      	mov	r0, r4
   2390e:	b002      	add	sp, #8
   23910:	bd10      	pop	{r4, pc}
   23912:	f000 f82b 	bl	2396c <CC_HalTerminate>
   23916:	f000 f879 	bl	23a0c <CC_PalTerminate>
   2391a:	f7ff ff7f 	bl	2381c <RndStartupTest.constprop.0>
   2391e:	4604      	mov	r4, r0
   23920:	b958      	cbnz	r0, 2393a <CC_LibInit+0x82>
   23922:	4602      	mov	r2, r0
   23924:	4601      	mov	r1, r0
   23926:	f7ff fd5d 	bl	233e4 <nrf_cc3xx_platform_ctr_drbg_init>
   2392a:	b930      	cbnz	r0, 2393a <CC_LibInit+0x82>
   2392c:	490c      	ldr	r1, [pc, #48]	; (23960 <CC_LibInit+0xa8>)
   2392e:	ab01      	add	r3, sp, #4
   23930:	2268      	movs	r2, #104	; 0x68
   23932:	f7ff fd8b 	bl	2344c <nrf_cc3xx_platform_ctr_drbg_get>
   23936:	2800      	cmp	r0, #0
   23938:	d0c6      	beq.n	238c8 <CC_LibInit+0x10>
   2393a:	2405      	movs	r4, #5
   2393c:	4620      	mov	r0, r4
   2393e:	b002      	add	sp, #8
   23940:	bd10      	pop	{r4, pc}
   23942:	2001      	movs	r0, #1
   23944:	f000 f8ec 	bl	23b20 <CC_PalPowerSaveModeSelect>
   23948:	2800      	cmp	r0, #0
   2394a:	d1e2      	bne.n	23912 <CC_LibInit+0x5a>
   2394c:	4b05      	ldr	r3, [pc, #20]	; (23964 <CC_LibInit+0xac>)
   2394e:	6018      	str	r0, [r3, #0]
   23950:	e7e3      	b.n	2391a <CC_LibInit+0x62>
   23952:	bf00      	nop
   23954:	5002b928 	.word	0x5002b928
   23958:	5002ba24 	.word	0x5002ba24
   2395c:	20e00000 	.word	0x20e00000
   23960:	20003e64 	.word	0x20003e64
   23964:	5002ba0c 	.word	0x5002ba0c

00023968 <CC_HalInit>:
   23968:	2000      	movs	r0, #0
   2396a:	4770      	bx	lr

0002396c <CC_HalTerminate>:
   2396c:	2000      	movs	r0, #0
   2396e:	4770      	bx	lr

00023970 <CC_HalClearInterruptBit>:
   23970:	0543      	lsls	r3, r0, #21
   23972:	d503      	bpl.n	2397c <CC_HalClearInterruptBit+0xc>
   23974:	4b03      	ldr	r3, [pc, #12]	; (23984 <CC_HalClearInterruptBit+0x14>)
   23976:	f04f 32ff 	mov.w	r2, #4294967295
   2397a:	601a      	str	r2, [r3, #0]
   2397c:	4b02      	ldr	r3, [pc, #8]	; (23988 <CC_HalClearInterruptBit+0x18>)
   2397e:	6018      	str	r0, [r3, #0]
   23980:	4770      	bx	lr
   23982:	bf00      	nop
   23984:	5002b108 	.word	0x5002b108
   23988:	5002ba08 	.word	0x5002ba08

0002398c <CC_HalMaskInterrupt>:
   2398c:	4b01      	ldr	r3, [pc, #4]	; (23994 <CC_HalMaskInterrupt+0x8>)
   2398e:	6018      	str	r0, [r3, #0]
   23990:	4770      	bx	lr
   23992:	bf00      	nop
   23994:	5002ba04 	.word	0x5002ba04

00023998 <CC_HalWaitInterrupt>:
   23998:	b108      	cbz	r0, 2399e <CC_HalWaitInterrupt+0x6>
   2399a:	f000 b86f 	b.w	23a7c <CC_PalWaitInterrupt>
   2399e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   239a2:	4770      	bx	lr

000239a4 <CC_HalWaitInterruptRND>:
   239a4:	b108      	cbz	r0, 239aa <CC_HalWaitInterruptRND+0x6>
   239a6:	f000 b84f 	b.w	23a48 <CC_PalWaitInterruptRND>
   239aa:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   239ae:	4770      	bx	lr

000239b0 <CC_PalInit>:
   239b0:	b510      	push	{r4, lr}
   239b2:	4811      	ldr	r0, [pc, #68]	; (239f8 <CC_PalInit+0x48>)
   239b4:	f000 f870 	bl	23a98 <CC_PalMutexCreate>
   239b8:	b100      	cbz	r0, 239bc <CC_PalInit+0xc>
   239ba:	bd10      	pop	{r4, pc}
   239bc:	480f      	ldr	r0, [pc, #60]	; (239fc <CC_PalInit+0x4c>)
   239be:	f000 f86b 	bl	23a98 <CC_PalMutexCreate>
   239c2:	2800      	cmp	r0, #0
   239c4:	d1f9      	bne.n	239ba <CC_PalInit+0xa>
   239c6:	4c0e      	ldr	r4, [pc, #56]	; (23a00 <CC_PalInit+0x50>)
   239c8:	4620      	mov	r0, r4
   239ca:	f000 f865 	bl	23a98 <CC_PalMutexCreate>
   239ce:	2800      	cmp	r0, #0
   239d0:	d1f3      	bne.n	239ba <CC_PalInit+0xa>
   239d2:	4b0c      	ldr	r3, [pc, #48]	; (23a04 <CC_PalInit+0x54>)
   239d4:	480c      	ldr	r0, [pc, #48]	; (23a08 <CC_PalInit+0x58>)
   239d6:	601c      	str	r4, [r3, #0]
   239d8:	f000 f85e 	bl	23a98 <CC_PalMutexCreate>
   239dc:	4601      	mov	r1, r0
   239de:	2800      	cmp	r0, #0
   239e0:	d1eb      	bne.n	239ba <CC_PalInit+0xa>
   239e2:	f000 f82d 	bl	23a40 <CC_PalDmaInit>
   239e6:	4604      	mov	r4, r0
   239e8:	b108      	cbz	r0, 239ee <CC_PalInit+0x3e>
   239ea:	4620      	mov	r0, r4
   239ec:	bd10      	pop	{r4, pc}
   239ee:	f000 f879 	bl	23ae4 <CC_PalPowerSaveModeInit>
   239f2:	4620      	mov	r0, r4
   239f4:	e7fa      	b.n	239ec <CC_PalInit+0x3c>
   239f6:	bf00      	nop
   239f8:	20000704 	.word	0x20000704
   239fc:	200006f8 	.word	0x200006f8
   23a00:	20000700 	.word	0x20000700
   23a04:	20000708 	.word	0x20000708
   23a08:	200006fc 	.word	0x200006fc

00023a0c <CC_PalTerminate>:
   23a0c:	b508      	push	{r3, lr}
   23a0e:	4808      	ldr	r0, [pc, #32]	; (23a30 <CC_PalTerminate+0x24>)
   23a10:	f000 f84c 	bl	23aac <CC_PalMutexDestroy>
   23a14:	4807      	ldr	r0, [pc, #28]	; (23a34 <CC_PalTerminate+0x28>)
   23a16:	f000 f849 	bl	23aac <CC_PalMutexDestroy>
   23a1a:	4807      	ldr	r0, [pc, #28]	; (23a38 <CC_PalTerminate+0x2c>)
   23a1c:	f000 f846 	bl	23aac <CC_PalMutexDestroy>
   23a20:	4806      	ldr	r0, [pc, #24]	; (23a3c <CC_PalTerminate+0x30>)
   23a22:	f000 f843 	bl	23aac <CC_PalMutexDestroy>
   23a26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   23a2a:	f000 b80b 	b.w	23a44 <CC_PalDmaTerminate>
   23a2e:	bf00      	nop
   23a30:	20000704 	.word	0x20000704
   23a34:	200006f8 	.word	0x200006f8
   23a38:	20000700 	.word	0x20000700
   23a3c:	200006fc 	.word	0x200006fc

00023a40 <CC_PalDmaInit>:
   23a40:	2000      	movs	r0, #0
   23a42:	4770      	bx	lr

00023a44 <CC_PalDmaTerminate>:
   23a44:	4770      	bx	lr
   23a46:	bf00      	nop

00023a48 <CC_PalWaitInterruptRND>:
   23a48:	b410      	push	{r4}
   23a4a:	4c08      	ldr	r4, [pc, #32]	; (23a6c <CC_PalWaitInterruptRND+0x24>)
   23a4c:	4602      	mov	r2, r0
   23a4e:	6823      	ldr	r3, [r4, #0]
   23a50:	4213      	tst	r3, r2
   23a52:	d0fc      	beq.n	23a4e <CC_PalWaitInterruptRND+0x6>
   23a54:	b121      	cbz	r1, 23a60 <CC_PalWaitInterruptRND+0x18>
   23a56:	4b06      	ldr	r3, [pc, #24]	; (23a70 <CC_PalWaitInterruptRND+0x28>)
   23a58:	4806      	ldr	r0, [pc, #24]	; (23a74 <CC_PalWaitInterruptRND+0x2c>)
   23a5a:	681b      	ldr	r3, [r3, #0]
   23a5c:	600b      	str	r3, [r1, #0]
   23a5e:	6003      	str	r3, [r0, #0]
   23a60:	4b05      	ldr	r3, [pc, #20]	; (23a78 <CC_PalWaitInterruptRND+0x30>)
   23a62:	601a      	str	r2, [r3, #0]
   23a64:	2000      	movs	r0, #0
   23a66:	bc10      	pop	{r4}
   23a68:	4770      	bx	lr
   23a6a:	bf00      	nop
   23a6c:	5002ba00 	.word	0x5002ba00
   23a70:	5002b104 	.word	0x5002b104
   23a74:	5002b108 	.word	0x5002b108
   23a78:	5002ba08 	.word	0x5002ba08

00023a7c <CC_PalWaitInterrupt>:
   23a7c:	4904      	ldr	r1, [pc, #16]	; (23a90 <CC_PalWaitInterrupt+0x14>)
   23a7e:	4602      	mov	r2, r0
   23a80:	680b      	ldr	r3, [r1, #0]
   23a82:	421a      	tst	r2, r3
   23a84:	d0fc      	beq.n	23a80 <CC_PalWaitInterrupt+0x4>
   23a86:	4b03      	ldr	r3, [pc, #12]	; (23a94 <CC_PalWaitInterrupt+0x18>)
   23a88:	2000      	movs	r0, #0
   23a8a:	601a      	str	r2, [r3, #0]
   23a8c:	4770      	bx	lr
   23a8e:	bf00      	nop
   23a90:	5002ba00 	.word	0x5002ba00
   23a94:	5002ba08 	.word	0x5002ba08

00023a98 <CC_PalMutexCreate>:
   23a98:	b508      	push	{r3, lr}
   23a9a:	4b03      	ldr	r3, [pc, #12]	; (23aa8 <CC_PalMutexCreate+0x10>)
   23a9c:	6802      	ldr	r2, [r0, #0]
   23a9e:	681b      	ldr	r3, [r3, #0]
   23aa0:	6810      	ldr	r0, [r2, #0]
   23aa2:	4798      	blx	r3
   23aa4:	2000      	movs	r0, #0
   23aa6:	bd08      	pop	{r3, pc}
   23aa8:	200006b8 	.word	0x200006b8

00023aac <CC_PalMutexDestroy>:
   23aac:	b508      	push	{r3, lr}
   23aae:	4b03      	ldr	r3, [pc, #12]	; (23abc <CC_PalMutexDestroy+0x10>)
   23ab0:	6802      	ldr	r2, [r0, #0]
   23ab2:	685b      	ldr	r3, [r3, #4]
   23ab4:	6810      	ldr	r0, [r2, #0]
   23ab6:	4798      	blx	r3
   23ab8:	2000      	movs	r0, #0
   23aba:	bd08      	pop	{r3, pc}
   23abc:	200006b8 	.word	0x200006b8

00023ac0 <CC_PalMutexLock>:
   23ac0:	4b02      	ldr	r3, [pc, #8]	; (23acc <CC_PalMutexLock+0xc>)
   23ac2:	6802      	ldr	r2, [r0, #0]
   23ac4:	689b      	ldr	r3, [r3, #8]
   23ac6:	6810      	ldr	r0, [r2, #0]
   23ac8:	4718      	bx	r3
   23aca:	bf00      	nop
   23acc:	200006b8 	.word	0x200006b8

00023ad0 <CC_PalMutexUnlock>:
   23ad0:	b508      	push	{r3, lr}
   23ad2:	4b03      	ldr	r3, [pc, #12]	; (23ae0 <CC_PalMutexUnlock+0x10>)
   23ad4:	6802      	ldr	r2, [r0, #0]
   23ad6:	68db      	ldr	r3, [r3, #12]
   23ad8:	6810      	ldr	r0, [r2, #0]
   23ada:	4798      	blx	r3
   23adc:	2000      	movs	r0, #0
   23ade:	bd08      	pop	{r3, pc}
   23ae0:	200006b8 	.word	0x200006b8

00023ae4 <CC_PalPowerSaveModeInit>:
   23ae4:	b570      	push	{r4, r5, r6, lr}
   23ae6:	4c09      	ldr	r4, [pc, #36]	; (23b0c <CC_PalPowerSaveModeInit+0x28>)
   23ae8:	4d09      	ldr	r5, [pc, #36]	; (23b10 <CC_PalPowerSaveModeInit+0x2c>)
   23aea:	6920      	ldr	r0, [r4, #16]
   23aec:	68ab      	ldr	r3, [r5, #8]
   23aee:	4798      	blx	r3
   23af0:	b118      	cbz	r0, 23afa <CC_PalPowerSaveModeInit+0x16>
   23af2:	4b08      	ldr	r3, [pc, #32]	; (23b14 <CC_PalPowerSaveModeInit+0x30>)
   23af4:	4808      	ldr	r0, [pc, #32]	; (23b18 <CC_PalPowerSaveModeInit+0x34>)
   23af6:	685b      	ldr	r3, [r3, #4]
   23af8:	4798      	blx	r3
   23afa:	4a08      	ldr	r2, [pc, #32]	; (23b1c <CC_PalPowerSaveModeInit+0x38>)
   23afc:	68eb      	ldr	r3, [r5, #12]
   23afe:	6920      	ldr	r0, [r4, #16]
   23b00:	2100      	movs	r1, #0
   23b02:	6011      	str	r1, [r2, #0]
   23b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23b08:	4718      	bx	r3
   23b0a:	bf00      	nop
   23b0c:	200006c8 	.word	0x200006c8
   23b10:	200006b8 	.word	0x200006b8
   23b14:	200006a8 	.word	0x200006a8
   23b18:	0002f340 	.word	0x0002f340
   23b1c:	200040ec 	.word	0x200040ec

00023b20 <CC_PalPowerSaveModeSelect>:
   23b20:	b570      	push	{r4, r5, r6, lr}
   23b22:	4d1a      	ldr	r5, [pc, #104]	; (23b8c <CC_PalPowerSaveModeSelect+0x6c>)
   23b24:	4e1a      	ldr	r6, [pc, #104]	; (23b90 <CC_PalPowerSaveModeSelect+0x70>)
   23b26:	4604      	mov	r4, r0
   23b28:	68b2      	ldr	r2, [r6, #8]
   23b2a:	6928      	ldr	r0, [r5, #16]
   23b2c:	4790      	blx	r2
   23b2e:	b9f0      	cbnz	r0, 23b6e <CC_PalPowerSaveModeSelect+0x4e>
   23b30:	b15c      	cbz	r4, 23b4a <CC_PalPowerSaveModeSelect+0x2a>
   23b32:	4c18      	ldr	r4, [pc, #96]	; (23b94 <CC_PalPowerSaveModeSelect+0x74>)
   23b34:	6823      	ldr	r3, [r4, #0]
   23b36:	b1ab      	cbz	r3, 23b64 <CC_PalPowerSaveModeSelect+0x44>
   23b38:	2b01      	cmp	r3, #1
   23b3a:	d01a      	beq.n	23b72 <CC_PalPowerSaveModeSelect+0x52>
   23b3c:	3b01      	subs	r3, #1
   23b3e:	6023      	str	r3, [r4, #0]
   23b40:	6928      	ldr	r0, [r5, #16]
   23b42:	68f3      	ldr	r3, [r6, #12]
   23b44:	4798      	blx	r3
   23b46:	2000      	movs	r0, #0
   23b48:	bd70      	pop	{r4, r5, r6, pc}
   23b4a:	4c12      	ldr	r4, [pc, #72]	; (23b94 <CC_PalPowerSaveModeSelect+0x74>)
   23b4c:	6821      	ldr	r1, [r4, #0]
   23b4e:	b939      	cbnz	r1, 23b60 <CC_PalPowerSaveModeSelect+0x40>
   23b50:	4b11      	ldr	r3, [pc, #68]	; (23b98 <CC_PalPowerSaveModeSelect+0x78>)
   23b52:	4a12      	ldr	r2, [pc, #72]	; (23b9c <CC_PalPowerSaveModeSelect+0x7c>)
   23b54:	2001      	movs	r0, #1
   23b56:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   23b5a:	6813      	ldr	r3, [r2, #0]
   23b5c:	2b00      	cmp	r3, #0
   23b5e:	d1fc      	bne.n	23b5a <CC_PalPowerSaveModeSelect+0x3a>
   23b60:	3101      	adds	r1, #1
   23b62:	6021      	str	r1, [r4, #0]
   23b64:	68f3      	ldr	r3, [r6, #12]
   23b66:	6928      	ldr	r0, [r5, #16]
   23b68:	4798      	blx	r3
   23b6a:	2000      	movs	r0, #0
   23b6c:	bd70      	pop	{r4, r5, r6, pc}
   23b6e:	480c      	ldr	r0, [pc, #48]	; (23ba0 <CC_PalPowerSaveModeSelect+0x80>)
   23b70:	bd70      	pop	{r4, r5, r6, pc}
   23b72:	4a0a      	ldr	r2, [pc, #40]	; (23b9c <CC_PalPowerSaveModeSelect+0x7c>)
   23b74:	6813      	ldr	r3, [r2, #0]
   23b76:	2b00      	cmp	r3, #0
   23b78:	d1fc      	bne.n	23b74 <CC_PalPowerSaveModeSelect+0x54>
   23b7a:	4a07      	ldr	r2, [pc, #28]	; (23b98 <CC_PalPowerSaveModeSelect+0x78>)
   23b7c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   23b80:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   23b84:	f7ff ff02 	bl	2398c <CC_HalMaskInterrupt>
   23b88:	6823      	ldr	r3, [r4, #0]
   23b8a:	e7d7      	b.n	23b3c <CC_PalPowerSaveModeSelect+0x1c>
   23b8c:	200006c8 	.word	0x200006c8
   23b90:	200006b8 	.word	0x200006b8
   23b94:	200040ec 	.word	0x200040ec
   23b98:	5002a000 	.word	0x5002a000
   23b9c:	5002b910 	.word	0x5002b910
   23ba0:	ffff8fe9 	.word	0xffff8fe9

00023ba4 <mutex_init>:
   23ba4:	4b01      	ldr	r3, [pc, #4]	; (23bac <mutex_init+0x8>)
   23ba6:	681b      	ldr	r3, [r3, #0]
   23ba8:	4718      	bx	r3
   23baa:	bf00      	nop
   23bac:	200006b8 	.word	0x200006b8

00023bb0 <mutex_lock>:
   23bb0:	4b01      	ldr	r3, [pc, #4]	; (23bb8 <mutex_lock+0x8>)
   23bb2:	689b      	ldr	r3, [r3, #8]
   23bb4:	4718      	bx	r3
   23bb6:	bf00      	nop
   23bb8:	200006b8 	.word	0x200006b8

00023bbc <mutex_unlock>:
   23bbc:	4b01      	ldr	r3, [pc, #4]	; (23bc4 <mutex_unlock+0x8>)
   23bbe:	68db      	ldr	r3, [r3, #12]
   23bc0:	4718      	bx	r3
   23bc2:	bf00      	nop
   23bc4:	200006b8 	.word	0x200006b8

00023bc8 <startTrngHW>:
   23bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23bcc:	2800      	cmp	r0, #0
   23bce:	d077      	beq.n	23cc0 <startTrngHW+0xf8>
   23bd0:	460c      	mov	r4, r1
   23bd2:	2900      	cmp	r1, #0
   23bd4:	d074      	beq.n	23cc0 <startTrngHW+0xf8>
   23bd6:	461d      	mov	r5, r3
   23bd8:	2b00      	cmp	r3, #0
   23bda:	d071      	beq.n	23cc0 <startTrngHW+0xf8>
   23bdc:	4606      	mov	r6, r0
   23bde:	b11a      	cbz	r2, 23be8 <startTrngHW+0x20>
   23be0:	2201      	movs	r2, #1
   23be2:	2300      	movs	r3, #0
   23be4:	602a      	str	r2, [r5, #0]
   23be6:	6003      	str	r3, [r0, #0]
   23be8:	682b      	ldr	r3, [r5, #0]
   23bea:	2b00      	cmp	r3, #0
   23bec:	d064      	beq.n	23cb8 <startTrngHW+0xf0>
   23bee:	4629      	mov	r1, r5
   23bf0:	4620      	mov	r0, r4
   23bf2:	f001 f8cd 	bl	24d90 <LLF_RND_GetFastestRosc>
   23bf6:	4607      	mov	r7, r0
   23bf8:	2800      	cmp	r0, #0
   23bfa:	d15e      	bne.n	23cba <startTrngHW+0xf2>
   23bfc:	6828      	ldr	r0, [r5, #0]
   23bfe:	4621      	mov	r1, r4
   23c00:	f001 f8a8 	bl	24d54 <LLF_RND_GetRoscSampleCnt>
   23c04:	4607      	mov	r7, r0
   23c06:	2800      	cmp	r0, #0
   23c08:	d157      	bne.n	23cba <startTrngHW+0xf2>
   23c0a:	682b      	ldr	r3, [r5, #0]
   23c0c:	2b08      	cmp	r3, #8
   23c0e:	d066      	beq.n	23cde <startTrngHW+0x116>
   23c10:	2b04      	cmp	r3, #4
   23c12:	d067      	beq.n	23ce4 <startTrngHW+0x11c>
   23c14:	f1a3 0802 	sub.w	r8, r3, #2
   23c18:	fab8 f888 	clz	r8, r8
   23c1c:	ea4f 1858 	mov.w	r8, r8, lsr #5
   23c20:	4b32      	ldr	r3, [pc, #200]	; (23cec <startTrngHW+0x124>)
   23c22:	4933      	ldr	r1, [pc, #204]	; (23cf0 <startTrngHW+0x128>)
   23c24:	4a33      	ldr	r2, [pc, #204]	; (23cf4 <startTrngHW+0x12c>)
   23c26:	2001      	movs	r0, #1
   23c28:	6018      	str	r0, [r3, #0]
   23c2a:	469c      	mov	ip, r3
   23c2c:	6008      	str	r0, [r1, #0]
   23c2e:	f8cc 0000 	str.w	r0, [ip]
   23c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23c34:	6013      	str	r3, [r2, #0]
   23c36:	6811      	ldr	r1, [r2, #0]
   23c38:	428b      	cmp	r3, r1
   23c3a:	d1f8      	bne.n	23c2e <startTrngHW+0x66>
   23c3c:	4b2e      	ldr	r3, [pc, #184]	; (23cf8 <startTrngHW+0x130>)
   23c3e:	f04f 0900 	mov.w	r9, #0
   23c42:	f8c3 9000 	str.w	r9, [r3]
   23c46:	f04f 30ff 	mov.w	r0, #4294967295
   23c4a:	f7ff fe91 	bl	23970 <CC_HalClearInterruptBit>
   23c4e:	4b2b      	ldr	r3, [pc, #172]	; (23cfc <startTrngHW+0x134>)
   23c50:	f06f 021b 	mvn.w	r2, #27
   23c54:	601a      	str	r2, [r3, #0]
   23c56:	4648      	mov	r0, r9
   23c58:	f7ff fe98 	bl	2398c <CC_HalMaskInterrupt>
   23c5c:	4a28      	ldr	r2, [pc, #160]	; (23d00 <startTrngHW+0x138>)
   23c5e:	4b29      	ldr	r3, [pc, #164]	; (23d04 <startTrngHW+0x13c>)
   23c60:	f8c2 8000 	str.w	r8, [r2]
   23c64:	6818      	ldr	r0, [r3, #0]
   23c66:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23c6a:	f7ff fe8f 	bl	2398c <CC_HalMaskInterrupt>
   23c6e:	4b26      	ldr	r3, [pc, #152]	; (23d08 <startTrngHW+0x140>)
   23c70:	220a      	movs	r2, #10
   23c72:	601a      	str	r2, [r3, #0]
   23c74:	9908      	ldr	r1, [sp, #32]
   23c76:	6923      	ldr	r3, [r4, #16]
   23c78:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23c7a:	2901      	cmp	r1, #1
   23c7c:	d024      	beq.n	23cc8 <startTrngHW+0x100>
   23c7e:	4923      	ldr	r1, [pc, #140]	; (23d0c <startTrngHW+0x144>)
   23c80:	fba1 1303 	umull	r1, r3, r1, r3
   23c84:	091b      	lsrs	r3, r3, #4
   23c86:	fb03 f302 	mul.w	r3, r3, r2
   23c8a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23c8e:	4920      	ldr	r1, [pc, #128]	; (23d10 <startTrngHW+0x148>)
   23c90:	4a19      	ldr	r2, [pc, #100]	; (23cf8 <startTrngHW+0x130>)
   23c92:	03db      	lsls	r3, r3, #15
   23c94:	099b      	lsrs	r3, r3, #6
   23c96:	600b      	str	r3, [r1, #0]
   23c98:	2301      	movs	r3, #1
   23c9a:	6013      	str	r3, [r2, #0]
   23c9c:	6833      	ldr	r3, [r6, #0]
   23c9e:	682a      	ldr	r2, [r5, #0]
   23ca0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23ca4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   23ca8:	6033      	str	r3, [r6, #0]
   23caa:	682a      	ldr	r2, [r5, #0]
   23cac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   23cb0:	6033      	str	r3, [r6, #0]
   23cb2:	4638      	mov	r0, r7
   23cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23cb8:	4f16      	ldr	r7, [pc, #88]	; (23d14 <startTrngHW+0x14c>)
   23cba:	4638      	mov	r0, r7
   23cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23cc0:	4f15      	ldr	r7, [pc, #84]	; (23d18 <startTrngHW+0x150>)
   23cc2:	4638      	mov	r0, r7
   23cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23cc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23ccc:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   23cd0:	3101      	adds	r1, #1
   23cd2:	d002      	beq.n	23cda <startTrngHW+0x112>
   23cd4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   23cd8:	e7d1      	b.n	23c7e <startTrngHW+0xb6>
   23cda:	2316      	movs	r3, #22
   23cdc:	e7d3      	b.n	23c86 <startTrngHW+0xbe>
   23cde:	f04f 0803 	mov.w	r8, #3
   23ce2:	e79d      	b.n	23c20 <startTrngHW+0x58>
   23ce4:	f04f 0802 	mov.w	r8, #2
   23ce8:	e79a      	b.n	23c20 <startTrngHW+0x58>
   23cea:	bf00      	nop
   23cec:	5002b1c4 	.word	0x5002b1c4
   23cf0:	5002b140 	.word	0x5002b140
   23cf4:	5002b130 	.word	0x5002b130
   23cf8:	5002b12c 	.word	0x5002b12c
   23cfc:	5002b100 	.word	0x5002b100
   23d00:	5002b10c 	.word	0x5002b10c
   23d04:	5002ba04 	.word	0x5002ba04
   23d08:	5002b138 	.word	0x5002b138
   23d0c:	aaaaaaab 	.word	0xaaaaaaab
   23d10:	5002b1d8 	.word	0x5002b1d8
   23d14:	00f10c31 	.word	0x00f10c31
   23d18:	00f10c35 	.word	0x00f10c35

00023d1c <LLF_RND_RepetitionCounterTest.part.0>:
   23d1c:	b4f0      	push	{r4, r5, r6, r7}
   23d1e:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   23d22:	2400      	movs	r4, #0
   23d24:	f10c 3cff 	add.w	ip, ip, #4294967295
   23d28:	4626      	mov	r6, r4
   23d2a:	4627      	mov	r7, r4
   23d2c:	e006      	b.n	23d3c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   23d2e:	429f      	cmp	r7, r3
   23d30:	d016      	beq.n	23d60 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   23d32:	2601      	movs	r6, #1
   23d34:	4565      	cmp	r5, ip
   23d36:	d819      	bhi.n	23d6c <LLF_RND_RepetitionCounterTest.part.0+0x50>
   23d38:	462c      	mov	r4, r5
   23d3a:	461f      	mov	r7, r3
   23d3c:	0963      	lsrs	r3, r4, #5
   23d3e:	f004 011f 	and.w	r1, r4, #31
   23d42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   23d46:	291f      	cmp	r1, #31
   23d48:	fa23 f301 	lsr.w	r3, r3, r1
   23d4c:	f104 0501 	add.w	r5, r4, #1
   23d50:	bf18      	it	ne
   23d52:	f003 0301 	andne.w	r3, r3, #1
   23d56:	2c00      	cmp	r4, #0
   23d58:	d1e9      	bne.n	23d2e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   23d5a:	2601      	movs	r6, #1
   23d5c:	4635      	mov	r5, r6
   23d5e:	e7eb      	b.n	23d38 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   23d60:	3601      	adds	r6, #1
   23d62:	4296      	cmp	r6, r2
   23d64:	d1e6      	bne.n	23d34 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   23d66:	4803      	ldr	r0, [pc, #12]	; (23d74 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   23d68:	bcf0      	pop	{r4, r5, r6, r7}
   23d6a:	4770      	bx	lr
   23d6c:	2000      	movs	r0, #0
   23d6e:	bcf0      	pop	{r4, r5, r6, r7}
   23d70:	4770      	bx	lr
   23d72:	bf00      	nop
   23d74:	00f10c36 	.word	0x00f10c36

00023d78 <LLF_RND_AdaptiveProportionTest>:
   23d78:	2800      	cmp	r0, #0
   23d7a:	d061      	beq.n	23e40 <LLF_RND_AdaptiveProportionTest+0xc8>
   23d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d80:	1e4c      	subs	r4, r1, #1
   23d82:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   23d86:	d227      	bcs.n	23dd8 <LLF_RND_AdaptiveProportionTest+0x60>
   23d88:	b333      	cbz	r3, 23dd8 <LLF_RND_AdaptiveProportionTest+0x60>
   23d8a:	b32a      	cbz	r2, 23dd8 <LLF_RND_AdaptiveProportionTest+0x60>
   23d8c:	00cd      	lsls	r5, r1, #3
   23d8e:	2b01      	cmp	r3, #1
   23d90:	f105 3eff 	add.w	lr, r5, #4294967295
   23d94:	d030      	beq.n	23df8 <LLF_RND_AdaptiveProportionTest+0x80>
   23d96:	2100      	movs	r1, #0
   23d98:	468c      	mov	ip, r1
   23d9a:	460f      	mov	r7, r1
   23d9c:	460e      	mov	r6, r1
   23d9e:	f103 38ff 	add.w	r8, r3, #4294967295
   23da2:	094c      	lsrs	r4, r1, #5
   23da4:	f001 051f 	and.w	r5, r1, #31
   23da8:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   23dac:	2d1f      	cmp	r5, #31
   23dae:	fa24 f405 	lsr.w	r4, r4, r5
   23db2:	bf18      	it	ne
   23db4:	f004 0401 	andne.w	r4, r4, #1
   23db8:	b921      	cbnz	r1, 23dc4 <LLF_RND_AdaptiveProportionTest+0x4c>
   23dba:	2601      	movs	r6, #1
   23dbc:	46b4      	mov	ip, r6
   23dbe:	4631      	mov	r1, r6
   23dc0:	4627      	mov	r7, r4
   23dc2:	e7ee      	b.n	23da2 <LLF_RND_AdaptiveProportionTest+0x2a>
   23dc4:	42b3      	cmp	r3, r6
   23dc6:	d013      	beq.n	23df0 <LLF_RND_AdaptiveProportionTest+0x78>
   23dc8:	42a7      	cmp	r7, r4
   23dca:	d101      	bne.n	23dd0 <LLF_RND_AdaptiveProportionTest+0x58>
   23dcc:	f10c 0c01 	add.w	ip, ip, #1
   23dd0:	4546      	cmp	r6, r8
   23dd2:	d104      	bne.n	23dde <LLF_RND_AdaptiveProportionTest+0x66>
   23dd4:	4562      	cmp	r2, ip
   23dd6:	d202      	bcs.n	23dde <LLF_RND_AdaptiveProportionTest+0x66>
   23dd8:	481a      	ldr	r0, [pc, #104]	; (23e44 <LLF_RND_AdaptiveProportionTest+0xcc>)
   23dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23dde:	463c      	mov	r4, r7
   23de0:	3101      	adds	r1, #1
   23de2:	458e      	cmp	lr, r1
   23de4:	f106 0601 	add.w	r6, r6, #1
   23de8:	d2ea      	bcs.n	23dc0 <LLF_RND_AdaptiveProportionTest+0x48>
   23dea:	2000      	movs	r0, #0
   23dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23df0:	2600      	movs	r6, #0
   23df2:	f04f 0c01 	mov.w	ip, #1
   23df6:	e7f3      	b.n	23de0 <LLF_RND_AdaptiveProportionTest+0x68>
   23df8:	2600      	movs	r6, #0
   23dfa:	46b4      	mov	ip, r6
   23dfc:	4637      	mov	r7, r6
   23dfe:	4634      	mov	r4, r6
   23e00:	0961      	lsrs	r1, r4, #5
   23e02:	f004 031f 	and.w	r3, r4, #31
   23e06:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   23e0a:	2b1f      	cmp	r3, #31
   23e0c:	fa21 f103 	lsr.w	r1, r1, r3
   23e10:	bf18      	it	ne
   23e12:	f001 0101 	andne.w	r1, r1, #1
   23e16:	b13c      	cbz	r4, 23e28 <LLF_RND_AdaptiveProportionTest+0xb0>
   23e18:	b95f      	cbnz	r7, 23e32 <LLF_RND_AdaptiveProportionTest+0xba>
   23e1a:	458c      	cmp	ip, r1
   23e1c:	d001      	beq.n	23e22 <LLF_RND_AdaptiveProportionTest+0xaa>
   23e1e:	4661      	mov	r1, ip
   23e20:	e008      	b.n	23e34 <LLF_RND_AdaptiveProportionTest+0xbc>
   23e22:	3601      	adds	r6, #1
   23e24:	4661      	mov	r1, ip
   23e26:	e005      	b.n	23e34 <LLF_RND_AdaptiveProportionTest+0xbc>
   23e28:	2601      	movs	r6, #1
   23e2a:	4634      	mov	r4, r6
   23e2c:	468c      	mov	ip, r1
   23e2e:	2701      	movs	r7, #1
   23e30:	e7e6      	b.n	23e00 <LLF_RND_AdaptiveProportionTest+0x88>
   23e32:	463e      	mov	r6, r7
   23e34:	42b2      	cmp	r2, r6
   23e36:	d3cf      	bcc.n	23dd8 <LLF_RND_AdaptiveProportionTest+0x60>
   23e38:	3401      	adds	r4, #1
   23e3a:	42ac      	cmp	r4, r5
   23e3c:	d1f6      	bne.n	23e2c <LLF_RND_AdaptiveProportionTest+0xb4>
   23e3e:	e7d4      	b.n	23dea <LLF_RND_AdaptiveProportionTest+0x72>
   23e40:	4800      	ldr	r0, [pc, #0]	; (23e44 <LLF_RND_AdaptiveProportionTest+0xcc>)
   23e42:	4770      	bx	lr
   23e44:	00f10c37 	.word	0x00f10c37

00023e48 <getTrngSource>:
   23e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e4c:	b08d      	sub	sp, #52	; 0x34
   23e4e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   23e52:	4607      	mov	r7, r0
   23e54:	460c      	mov	r4, r1
   23e56:	2d00      	cmp	r5, #0
   23e58:	d14c      	bne.n	23ef4 <getTrngSource+0xac>
   23e5a:	f8d1 a010 	ldr.w	sl, [r1, #16]
   23e5e:	601e      	str	r6, [r3, #0]
   23e60:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23e62:	2100      	movs	r1, #0
   23e64:	6019      	str	r1, [r3, #0]
   23e66:	2a00      	cmp	r2, #0
   23e68:	f000 811f 	beq.w	240aa <getTrngSource+0x262>
   23e6c:	4a9b      	ldr	r2, [pc, #620]	; (240dc <getTrngSource+0x294>)
   23e6e:	4b9c      	ldr	r3, [pc, #624]	; (240e0 <getTrngSource+0x298>)
   23e70:	6811      	ldr	r1, [r2, #0]
   23e72:	6a62      	ldr	r2, [r4, #36]	; 0x24
   23e74:	681b      	ldr	r3, [r3, #0]
   23e76:	429a      	cmp	r2, r3
   23e78:	d147      	bne.n	23f0a <getTrngSource+0xc2>
   23e7a:	290a      	cmp	r1, #10
   23e7c:	d145      	bne.n	23f0a <getTrngSource+0xc2>
   23e7e:	78fb      	ldrb	r3, [r7, #3]
   23e80:	9304      	str	r3, [sp, #16]
   23e82:	4b98      	ldr	r3, [pc, #608]	; (240e4 <getTrngSource+0x29c>)
   23e84:	fba3 230a 	umull	r2, r3, r3, sl
   23e88:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   23e8c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   23e90:	f106 0208 	add.w	r2, r6, #8
   23e94:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   23e98:	2304      	movs	r3, #4
   23e9a:	9203      	str	r2, [sp, #12]
   23e9c:	9302      	str	r3, [sp, #8]
   23e9e:	46b8      	mov	r8, r7
   23ea0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23ea2:	f8c3 a000 	str.w	sl, [r3]
   23ea6:	f1ba 0f00 	cmp.w	sl, #0
   23eaa:	f000 80c4 	beq.w	24036 <getTrngSource+0x1ee>
   23eae:	9e03      	ldr	r6, [sp, #12]
   23eb0:	4655      	mov	r5, sl
   23eb2:	f04f 0900 	mov.w	r9, #0
   23eb6:	f000 ff7b 	bl	24db0 <LLF_RND_TurnOffTrng>
   23eba:	2300      	movs	r3, #0
   23ebc:	9305      	str	r3, [sp, #20]
   23ebe:	f1b8 0f00 	cmp.w	r8, #0
   23ec2:	f000 80e6 	beq.w	24092 <getTrngSource+0x24a>
   23ec6:	2c00      	cmp	r4, #0
   23ec8:	f000 80e3 	beq.w	24092 <getTrngSource+0x24a>
   23ecc:	9b04      	ldr	r3, [sp, #16]
   23ece:	2b00      	cmp	r3, #0
   23ed0:	f000 80dd 	beq.w	2408e <getTrngSource+0x246>
   23ed4:	a904      	add	r1, sp, #16
   23ed6:	4620      	mov	r0, r4
   23ed8:	f000 ff5a 	bl	24d90 <LLF_RND_GetFastestRosc>
   23edc:	b1b8      	cbz	r0, 23f0e <getTrngSource+0xc6>
   23ede:	4b82      	ldr	r3, [pc, #520]	; (240e8 <getTrngSource+0x2a0>)
   23ee0:	4298      	cmp	r0, r3
   23ee2:	f040 80a8 	bne.w	24036 <getTrngSource+0x1ee>
   23ee6:	9002      	str	r0, [sp, #8]
   23ee8:	f000 ff62 	bl	24db0 <LLF_RND_TurnOffTrng>
   23eec:	9802      	ldr	r0, [sp, #8]
   23eee:	b00d      	add	sp, #52	; 0x34
   23ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ef4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   23ef8:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   23efc:	3001      	adds	r0, #1
   23efe:	bf14      	ite	ne
   23f00:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   23f04:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   23f08:	e7a9      	b.n	23e5e <getTrngSource+0x16>
   23f0a:	4878      	ldr	r0, [pc, #480]	; (240ec <getTrngSource+0x2a4>)
   23f0c:	e7eb      	b.n	23ee6 <getTrngSource+0x9e>
   23f0e:	9804      	ldr	r0, [sp, #16]
   23f10:	4621      	mov	r1, r4
   23f12:	f000 ff1f 	bl	24d54 <LLF_RND_GetRoscSampleCnt>
   23f16:	2800      	cmp	r0, #0
   23f18:	d1e1      	bne.n	23ede <getTrngSource+0x96>
   23f1a:	9f04      	ldr	r7, [sp, #16]
   23f1c:	2f08      	cmp	r7, #8
   23f1e:	f000 80ba 	beq.w	24096 <getTrngSource+0x24e>
   23f22:	2f04      	cmp	r7, #4
   23f24:	f000 80b9 	beq.w	2409a <getTrngSource+0x252>
   23f28:	f1a7 0702 	sub.w	r7, r7, #2
   23f2c:	fab7 f787 	clz	r7, r7
   23f30:	097f      	lsrs	r7, r7, #5
   23f32:	496f      	ldr	r1, [pc, #444]	; (240f0 <getTrngSource+0x2a8>)
   23f34:	2301      	movs	r3, #1
   23f36:	600b      	str	r3, [r1, #0]
   23f38:	f841 3c84 	str.w	r3, [r1, #-132]
   23f3c:	4619      	mov	r1, r3
   23f3e:	4b6c      	ldr	r3, [pc, #432]	; (240f0 <getTrngSource+0x2a8>)
   23f40:	4867      	ldr	r0, [pc, #412]	; (240e0 <getTrngSource+0x298>)
   23f42:	6019      	str	r1, [r3, #0]
   23f44:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23f46:	6003      	str	r3, [r0, #0]
   23f48:	6800      	ldr	r0, [r0, #0]
   23f4a:	4283      	cmp	r3, r0
   23f4c:	d1f7      	bne.n	23f3e <getTrngSource+0xf6>
   23f4e:	4a69      	ldr	r2, [pc, #420]	; (240f4 <getTrngSource+0x2ac>)
   23f50:	2300      	movs	r3, #0
   23f52:	6013      	str	r3, [r2, #0]
   23f54:	f04f 30ff 	mov.w	r0, #4294967295
   23f58:	f7ff fd0a 	bl	23970 <CC_HalClearInterruptBit>
   23f5c:	2300      	movs	r3, #0
   23f5e:	4618      	mov	r0, r3
   23f60:	4b65      	ldr	r3, [pc, #404]	; (240f8 <getTrngSource+0x2b0>)
   23f62:	f06f 011b 	mvn.w	r1, #27
   23f66:	6019      	str	r1, [r3, #0]
   23f68:	f7ff fd10 	bl	2398c <CC_HalMaskInterrupt>
   23f6c:	4963      	ldr	r1, [pc, #396]	; (240fc <getTrngSource+0x2b4>)
   23f6e:	4b64      	ldr	r3, [pc, #400]	; (24100 <getTrngSource+0x2b8>)
   23f70:	600f      	str	r7, [r1, #0]
   23f72:	6818      	ldr	r0, [r3, #0]
   23f74:	4f5b      	ldr	r7, [pc, #364]	; (240e4 <getTrngSource+0x29c>)
   23f76:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23f7a:	f7ff fd07 	bl	2398c <CC_HalMaskInterrupt>
   23f7e:	4b57      	ldr	r3, [pc, #348]	; (240dc <getTrngSource+0x294>)
   23f80:	4860      	ldr	r0, [pc, #384]	; (24104 <getTrngSource+0x2bc>)
   23f82:	210a      	movs	r1, #10
   23f84:	6019      	str	r1, [r3, #0]
   23f86:	6921      	ldr	r1, [r4, #16]
   23f88:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23f8a:	fba7 c101 	umull	ip, r1, r7, r1
   23f8e:	0909      	lsrs	r1, r1, #4
   23f90:	fb03 f301 	mul.w	r3, r3, r1
   23f94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   23f98:	03db      	lsls	r3, r3, #15
   23f9a:	099b      	lsrs	r3, r3, #6
   23f9c:	6003      	str	r3, [r0, #0]
   23f9e:	4b55      	ldr	r3, [pc, #340]	; (240f4 <getTrngSource+0x2ac>)
   23fa0:	2201      	movs	r2, #1
   23fa2:	601a      	str	r2, [r3, #0]
   23fa4:	9904      	ldr	r1, [sp, #16]
   23fa6:	f8d8 2000 	ldr.w	r2, [r8]
   23faa:	020b      	lsls	r3, r1, #8
   23fac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   23fb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   23fb4:	4313      	orrs	r3, r2
   23fb6:	f8c8 3000 	str.w	r3, [r8]
   23fba:	a805      	add	r0, sp, #20
   23fbc:	f000 feba 	bl	24d34 <LLF_RND_WaitRngInterrupt>
   23fc0:	9b05      	ldr	r3, [sp, #20]
   23fc2:	f003 031a 	and.w	r3, r3, #26
   23fc6:	4303      	orrs	r3, r0
   23fc8:	d135      	bne.n	24036 <getTrngSource+0x1ee>
   23fca:	4a4f      	ldr	r2, [pc, #316]	; (24108 <getTrngSource+0x2c0>)
   23fcc:	4b4f      	ldr	r3, [pc, #316]	; (2410c <getTrngSource+0x2c4>)
   23fce:	6812      	ldr	r2, [r2, #0]
   23fd0:	9206      	str	r2, [sp, #24]
   23fd2:	681a      	ldr	r2, [r3, #0]
   23fd4:	9207      	str	r2, [sp, #28]
   23fd6:	685a      	ldr	r2, [r3, #4]
   23fd8:	9208      	str	r2, [sp, #32]
   23fda:	689a      	ldr	r2, [r3, #8]
   23fdc:	9209      	str	r2, [sp, #36]	; 0x24
   23fde:	68da      	ldr	r2, [r3, #12]
   23fe0:	920a      	str	r2, [sp, #40]	; 0x28
   23fe2:	3310      	adds	r3, #16
   23fe4:	fba7 2705 	umull	r2, r7, r7, r5
   23fe8:	681b      	ldr	r3, [r3, #0]
   23fea:	930b      	str	r3, [sp, #44]	; 0x2c
   23fec:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   23ff0:	d102      	bne.n	23ff8 <getTrngSource+0x1b0>
   23ff2:	f1bb 0f00 	cmp.w	fp, #0
   23ff6:	d141      	bne.n	2407c <getTrngSource+0x234>
   23ff8:	2218      	movs	r2, #24
   23ffa:	4630      	mov	r0, r6
   23ffc:	eb0d 0102 	add.w	r1, sp, r2
   24000:	f000 fe3c 	bl	24c7c <CC_PalMemCopyPlat>
   24004:	3d18      	subs	r5, #24
   24006:	3618      	adds	r6, #24
   24008:	f109 0901 	add.w	r9, r9, #1
   2400c:	2d00      	cmp	r5, #0
   2400e:	f47f af52 	bne.w	23eb6 <getTrngSource+0x6e>
   24012:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   24016:	d85d      	bhi.n	240d4 <getTrngSource+0x28c>
   24018:	9d03      	ldr	r5, [sp, #12]
   2401a:	6962      	ldr	r2, [r4, #20]
   2401c:	4651      	mov	r1, sl
   2401e:	4628      	mov	r0, r5
   24020:	f7ff fe7c 	bl	23d1c <LLF_RND_RepetitionCounterTest.part.0>
   24024:	2800      	cmp	r0, #0
   24026:	d04b      	beq.n	240c0 <getTrngSource+0x278>
   24028:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2402a:	2300      	movs	r3, #0
   2402c:	6013      	str	r3, [r2, #0]
   2402e:	4b2e      	ldr	r3, [pc, #184]	; (240e8 <getTrngSource+0x2a0>)
   24030:	4298      	cmp	r0, r3
   24032:	f43f af58 	beq.w	23ee6 <getTrngSource+0x9e>
   24036:	9d04      	ldr	r5, [sp, #16]
   24038:	2d08      	cmp	r5, #8
   2403a:	d034      	beq.n	240a6 <getTrngSource+0x25e>
   2403c:	2200      	movs	r2, #0
   2403e:	ab04      	add	r3, sp, #16
   24040:	006d      	lsls	r5, r5, #1
   24042:	9200      	str	r2, [sp, #0]
   24044:	4621      	mov	r1, r4
   24046:	4640      	mov	r0, r8
   24048:	9504      	str	r5, [sp, #16]
   2404a:	f7ff fdbd 	bl	23bc8 <startTrngHW>
   2404e:	4b30      	ldr	r3, [pc, #192]	; (24110 <getTrngSource+0x2c8>)
   24050:	4298      	cmp	r0, r3
   24052:	d024      	beq.n	2409e <getTrngSource+0x256>
   24054:	2800      	cmp	r0, #0
   24056:	f47f af46 	bne.w	23ee6 <getTrngSource+0x9e>
   2405a:	f8d8 2000 	ldr.w	r2, [r8]
   2405e:	0a13      	lsrs	r3, r2, #8
   24060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   24064:	4313      	orrs	r3, r2
   24066:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2406a:	f8c8 3000 	str.w	r3, [r8]
   2406e:	9b02      	ldr	r3, [sp, #8]
   24070:	3b01      	subs	r3, #1
   24072:	9302      	str	r3, [sp, #8]
   24074:	f47f af14 	bne.w	23ea0 <getTrngSource+0x58>
   24078:	2000      	movs	r0, #0
   2407a:	e734      	b.n	23ee6 <getTrngSource+0x9e>
   2407c:	4630      	mov	r0, r6
   2407e:	465a      	mov	r2, fp
   24080:	a906      	add	r1, sp, #24
   24082:	f000 fdfb 	bl	24c7c <CC_PalMemCopyPlat>
   24086:	eba5 050b 	sub.w	r5, r5, fp
   2408a:	445e      	add	r6, fp
   2408c:	e7bc      	b.n	24008 <getTrngSource+0x1c0>
   2408e:	4820      	ldr	r0, [pc, #128]	; (24110 <getTrngSource+0x2c8>)
   24090:	e725      	b.n	23ede <getTrngSource+0x96>
   24092:	4820      	ldr	r0, [pc, #128]	; (24114 <getTrngSource+0x2cc>)
   24094:	e723      	b.n	23ede <getTrngSource+0x96>
   24096:	2703      	movs	r7, #3
   24098:	e74b      	b.n	23f32 <getTrngSource+0xea>
   2409a:	2702      	movs	r7, #2
   2409c:	e749      	b.n	23f32 <getTrngSource+0xea>
   2409e:	6a23      	ldr	r3, [r4, #32]
   240a0:	2b00      	cmp	r3, #0
   240a2:	f43f af20 	beq.w	23ee6 <getTrngSource+0x9e>
   240a6:	481c      	ldr	r0, [pc, #112]	; (24118 <getTrngSource+0x2d0>)
   240a8:	e71d      	b.n	23ee6 <getTrngSource+0x9e>
   240aa:	9500      	str	r5, [sp, #0]
   240ac:	ab04      	add	r3, sp, #16
   240ae:	2201      	movs	r2, #1
   240b0:	4621      	mov	r1, r4
   240b2:	4638      	mov	r0, r7
   240b4:	f7ff fd88 	bl	23bc8 <startTrngHW>
   240b8:	2800      	cmp	r0, #0
   240ba:	f43f aee2 	beq.w	23e82 <getTrngSource+0x3a>
   240be:	e712      	b.n	23ee6 <getTrngSource+0x9e>
   240c0:	69a2      	ldr	r2, [r4, #24]
   240c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   240c6:	4651      	mov	r1, sl
   240c8:	4628      	mov	r0, r5
   240ca:	f7ff fe55 	bl	23d78 <LLF_RND_AdaptiveProportionTest>
   240ce:	2800      	cmp	r0, #0
   240d0:	d1aa      	bne.n	24028 <getTrngSource+0x1e0>
   240d2:	e7d1      	b.n	24078 <getTrngSource+0x230>
   240d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   240d6:	601d      	str	r5, [r3, #0]
   240d8:	e7ad      	b.n	24036 <getTrngSource+0x1ee>
   240da:	bf00      	nop
   240dc:	5002b138 	.word	0x5002b138
   240e0:	5002b130 	.word	0x5002b130
   240e4:	aaaaaaab 	.word	0xaaaaaaab
   240e8:	00f10c02 	.word	0x00f10c02
   240ec:	00f10c30 	.word	0x00f10c30
   240f0:	5002b1c4 	.word	0x5002b1c4
   240f4:	5002b12c 	.word	0x5002b12c
   240f8:	5002b100 	.word	0x5002b100
   240fc:	5002b10c 	.word	0x5002b10c
   24100:	5002ba04 	.word	0x5002ba04
   24104:	5002b1d8 	.word	0x5002b1d8
   24108:	5002b114 	.word	0x5002b114
   2410c:	5002b118 	.word	0x5002b118
   24110:	00f10c31 	.word	0x00f10c31
   24114:	00f10c35 	.word	0x00f10c35
   24118:	00f10c32 	.word	0x00f10c32

0002411c <LLF_RND_GetTrngSource>:
   2411c:	b430      	push	{r4, r5}
   2411e:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   24122:	9d04      	ldr	r5, [sp, #16]
   24124:	9402      	str	r4, [sp, #8]
   24126:	2400      	movs	r4, #0
   24128:	e9cd 5403 	strd	r5, r4, [sp, #12]
   2412c:	bc30      	pop	{r4, r5}
   2412e:	f7ff be8b 	b.w	23e48 <getTrngSource>
   24132:	bf00      	nop

00024134 <LLF_RND_RunTrngStartupTest>:
   24134:	b510      	push	{r4, lr}
   24136:	b086      	sub	sp, #24
   24138:	ab05      	add	r3, sp, #20
   2413a:	2401      	movs	r4, #1
   2413c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   24140:	9300      	str	r3, [sp, #0]
   24142:	2200      	movs	r2, #0
   24144:	ab04      	add	r3, sp, #16
   24146:	f7ff fe7f 	bl	23e48 <getTrngSource>
   2414a:	b006      	add	sp, #24
   2414c:	bd10      	pop	{r4, pc}
   2414e:	bf00      	nop

00024150 <mbedtls_platform_zeroize>:
   24150:	b138      	cbz	r0, 24162 <mbedtls_platform_zeroize+0x12>
   24152:	b131      	cbz	r1, 24162 <mbedtls_platform_zeroize+0x12>
   24154:	4401      	add	r1, r0
   24156:	2200      	movs	r2, #0
   24158:	4603      	mov	r3, r0
   2415a:	3001      	adds	r0, #1
   2415c:	4281      	cmp	r1, r0
   2415e:	701a      	strb	r2, [r3, #0]
   24160:	d1fa      	bne.n	24158 <mbedtls_platform_zeroize+0x8>
   24162:	4770      	bx	lr

00024164 <mbedtls_hardware_poll>:
   24164:	b5f0      	push	{r4, r5, r6, r7, lr}
   24166:	b089      	sub	sp, #36	; 0x24
   24168:	9205      	str	r2, [sp, #20]
   2416a:	2900      	cmp	r1, #0
   2416c:	d064      	beq.n	24238 <mbedtls_hardware_poll+0xd4>
   2416e:	461c      	mov	r4, r3
   24170:	2b00      	cmp	r3, #0
   24172:	d061      	beq.n	24238 <mbedtls_hardware_poll+0xd4>
   24174:	4615      	mov	r5, r2
   24176:	2a00      	cmp	r2, #0
   24178:	d05e      	beq.n	24238 <mbedtls_hardware_poll+0xd4>
   2417a:	4f31      	ldr	r7, [pc, #196]	; (24240 <mbedtls_hardware_poll+0xdc>)
   2417c:	460e      	mov	r6, r1
   2417e:	6838      	ldr	r0, [r7, #0]
   24180:	f04f 31ff 	mov.w	r1, #4294967295
   24184:	f7ff fc9c 	bl	23ac0 <CC_PalMutexLock>
   24188:	2800      	cmp	r0, #0
   2418a:	d14b      	bne.n	24224 <mbedtls_hardware_poll+0xc0>
   2418c:	2000      	movs	r0, #0
   2418e:	f7ff fcc7 	bl	23b20 <CC_PalPowerSaveModeSelect>
   24192:	2800      	cmp	r0, #0
   24194:	d142      	bne.n	2421c <mbedtls_hardware_poll+0xb8>
   24196:	482b      	ldr	r0, [pc, #172]	; (24244 <mbedtls_hardware_poll+0xe0>)
   24198:	f000 fd34 	bl	24c04 <RNG_PLAT_SetUserRngParameters>
   2419c:	b1d8      	cbz	r0, 241d6 <mbedtls_hardware_poll+0x72>
   2419e:	2001      	movs	r0, #1
   241a0:	f04f 36ff 	mov.w	r6, #4294967295
   241a4:	f7ff fcbc 	bl	23b20 <CC_PalPowerSaveModeSelect>
   241a8:	2800      	cmp	r0, #0
   241aa:	d133      	bne.n	24214 <mbedtls_hardware_poll+0xb0>
   241ac:	4826      	ldr	r0, [pc, #152]	; (24248 <mbedtls_hardware_poll+0xe4>)
   241ae:	f44f 7108 	mov.w	r1, #544	; 0x220
   241b2:	f7ff ffcd 	bl	24150 <mbedtls_platform_zeroize>
   241b6:	4825      	ldr	r0, [pc, #148]	; (2424c <mbedtls_hardware_poll+0xe8>)
   241b8:	2104      	movs	r1, #4
   241ba:	f7ff ffc9 	bl	24150 <mbedtls_platform_zeroize>
   241be:	4821      	ldr	r0, [pc, #132]	; (24244 <mbedtls_hardware_poll+0xe0>)
   241c0:	2128      	movs	r1, #40	; 0x28
   241c2:	f7ff ffc5 	bl	24150 <mbedtls_platform_zeroize>
   241c6:	6838      	ldr	r0, [r7, #0]
   241c8:	f7ff fc82 	bl	23ad0 <CC_PalMutexUnlock>
   241cc:	2800      	cmp	r0, #0
   241ce:	d12d      	bne.n	2422c <mbedtls_hardware_poll+0xc8>
   241d0:	4630      	mov	r0, r6
   241d2:	b009      	add	sp, #36	; 0x24
   241d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   241d6:	491c      	ldr	r1, [pc, #112]	; (24248 <mbedtls_hardware_poll+0xe4>)
   241d8:	9003      	str	r0, [sp, #12]
   241da:	ab07      	add	r3, sp, #28
   241dc:	4602      	mov	r2, r0
   241de:	9102      	str	r1, [sp, #8]
   241e0:	9300      	str	r3, [sp, #0]
   241e2:	4918      	ldr	r1, [pc, #96]	; (24244 <mbedtls_hardware_poll+0xe0>)
   241e4:	4819      	ldr	r0, [pc, #100]	; (2424c <mbedtls_hardware_poll+0xe8>)
   241e6:	9401      	str	r4, [sp, #4]
   241e8:	ab05      	add	r3, sp, #20
   241ea:	f7ff ff97 	bl	2411c <LLF_RND_GetTrngSource>
   241ee:	4603      	mov	r3, r0
   241f0:	2800      	cmp	r0, #0
   241f2:	d1d4      	bne.n	2419e <mbedtls_hardware_poll+0x3a>
   241f4:	6822      	ldr	r2, [r4, #0]
   241f6:	42aa      	cmp	r2, r5
   241f8:	d3d1      	bcc.n	2419e <mbedtls_hardware_poll+0x3a>
   241fa:	9907      	ldr	r1, [sp, #28]
   241fc:	4630      	mov	r0, r6
   241fe:	3108      	adds	r1, #8
   24200:	462a      	mov	r2, r5
   24202:	461e      	mov	r6, r3
   24204:	f000 fd3a 	bl	24c7c <CC_PalMemCopyPlat>
   24208:	6025      	str	r5, [r4, #0]
   2420a:	2001      	movs	r0, #1
   2420c:	f7ff fc88 	bl	23b20 <CC_PalPowerSaveModeSelect>
   24210:	2800      	cmp	r0, #0
   24212:	d0cb      	beq.n	241ac <mbedtls_hardware_poll+0x48>
   24214:	480e      	ldr	r0, [pc, #56]	; (24250 <mbedtls_hardware_poll+0xec>)
   24216:	f7ff f8bd 	bl	23394 <CC_PalAbort>
   2421a:	e7c7      	b.n	241ac <mbedtls_hardware_poll+0x48>
   2421c:	480d      	ldr	r0, [pc, #52]	; (24254 <mbedtls_hardware_poll+0xf0>)
   2421e:	f7ff f8b9 	bl	23394 <CC_PalAbort>
   24222:	e7b8      	b.n	24196 <mbedtls_hardware_poll+0x32>
   24224:	480c      	ldr	r0, [pc, #48]	; (24258 <mbedtls_hardware_poll+0xf4>)
   24226:	f7ff f8b5 	bl	23394 <CC_PalAbort>
   2422a:	e7af      	b.n	2418c <mbedtls_hardware_poll+0x28>
   2422c:	480b      	ldr	r0, [pc, #44]	; (2425c <mbedtls_hardware_poll+0xf8>)
   2422e:	f7ff f8b1 	bl	23394 <CC_PalAbort>
   24232:	4630      	mov	r0, r6
   24234:	b009      	add	sp, #36	; 0x24
   24236:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24238:	f04f 36ff 	mov.w	r6, #4294967295
   2423c:	e7c8      	b.n	241d0 <mbedtls_hardware_poll+0x6c>
   2423e:	bf00      	nop
   24240:	20000708 	.word	0x20000708
   24244:	20004314 	.word	0x20004314
   24248:	200040f4 	.word	0x200040f4
   2424c:	200040f0 	.word	0x200040f0
   24250:	0002f308 	.word	0x0002f308
   24254:	0002f2e8 	.word	0x0002f2e8
   24258:	0002f2d0 	.word	0x0002f2d0
   2425c:	0002f360 	.word	0x0002f360

00024260 <cc_mbedtls_sha256_init>:
   24260:	b510      	push	{r4, lr}
   24262:	4604      	mov	r4, r0
   24264:	b128      	cbz	r0, 24272 <cc_mbedtls_sha256_init+0x12>
   24266:	4620      	mov	r0, r4
   24268:	21f0      	movs	r1, #240	; 0xf0
   2426a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2426e:	f000 bd09 	b.w	24c84 <CC_PalMemSetZeroPlat>
   24272:	4804      	ldr	r0, [pc, #16]	; (24284 <cc_mbedtls_sha256_init+0x24>)
   24274:	f7ff f88e 	bl	23394 <CC_PalAbort>
   24278:	4620      	mov	r0, r4
   2427a:	21f0      	movs	r1, #240	; 0xf0
   2427c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24280:	f000 bd00 	b.w	24c84 <CC_PalMemSetZeroPlat>
   24284:	0002f378 	.word	0x0002f378

00024288 <cc_mbedtls_sha256_free>:
   24288:	b110      	cbz	r0, 24290 <cc_mbedtls_sha256_free+0x8>
   2428a:	21f0      	movs	r1, #240	; 0xf0
   2428c:	f7ff bf60 	b.w	24150 <mbedtls_platform_zeroize>
   24290:	4770      	bx	lr
   24292:	bf00      	nop

00024294 <cc_mbedtls_sha256_starts_ret>:
   24294:	b508      	push	{r3, lr}
   24296:	b161      	cbz	r1, 242b2 <cc_mbedtls_sha256_starts_ret+0x1e>
   24298:	2901      	cmp	r1, #1
   2429a:	d107      	bne.n	242ac <cc_mbedtls_sha256_starts_ret+0x18>
   2429c:	2102      	movs	r1, #2
   2429e:	f000 f839 	bl	24314 <mbedtls_sha_starts_internal>
   242a2:	2800      	cmp	r0, #0
   242a4:	bf18      	it	ne
   242a6:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   242aa:	bd08      	pop	{r3, pc}
   242ac:	f06f 0036 	mvn.w	r0, #54	; 0x36
   242b0:	bd08      	pop	{r3, pc}
   242b2:	2101      	movs	r1, #1
   242b4:	f000 f82e 	bl	24314 <mbedtls_sha_starts_internal>
   242b8:	e7f3      	b.n	242a2 <cc_mbedtls_sha256_starts_ret+0xe>
   242ba:	bf00      	nop

000242bc <cc_mbedtls_sha256_update_ret>:
   242bc:	b508      	push	{r3, lr}
   242be:	f000 f86b 	bl	24398 <mbedtls_sha_update_internal>
   242c2:	2800      	cmp	r0, #0
   242c4:	bf18      	it	ne
   242c6:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   242ca:	bd08      	pop	{r3, pc}

000242cc <cc_mbedtls_sha256_finish_ret>:
   242cc:	b570      	push	{r4, r5, r6, lr}
   242ce:	b1e8      	cbz	r0, 2430c <cc_mbedtls_sha256_finish_ret+0x40>
   242d0:	460e      	mov	r6, r1
   242d2:	b1d9      	cbz	r1, 2430c <cc_mbedtls_sha256_finish_ret+0x40>
   242d4:	4604      	mov	r4, r0
   242d6:	f000 f831 	bl	2433c <mbedtls_sha_finish_internal>
   242da:	4605      	mov	r5, r0
   242dc:	b9b0      	cbnz	r0, 2430c <cc_mbedtls_sha256_finish_ret+0x40>
   242de:	6823      	ldr	r3, [r4, #0]
   242e0:	2b01      	cmp	r3, #1
   242e2:	d00b      	beq.n	242fc <cc_mbedtls_sha256_finish_ret+0x30>
   242e4:	2b02      	cmp	r3, #2
   242e6:	d001      	beq.n	242ec <cc_mbedtls_sha256_finish_ret+0x20>
   242e8:	4628      	mov	r0, r5
   242ea:	bd70      	pop	{r4, r5, r6, pc}
   242ec:	f104 0108 	add.w	r1, r4, #8
   242f0:	4630      	mov	r0, r6
   242f2:	221c      	movs	r2, #28
   242f4:	f000 fcc2 	bl	24c7c <CC_PalMemCopyPlat>
   242f8:	4628      	mov	r0, r5
   242fa:	bd70      	pop	{r4, r5, r6, pc}
   242fc:	f104 0108 	add.w	r1, r4, #8
   24300:	4630      	mov	r0, r6
   24302:	2220      	movs	r2, #32
   24304:	f000 fcba 	bl	24c7c <CC_PalMemCopyPlat>
   24308:	4628      	mov	r0, r5
   2430a:	bd70      	pop	{r4, r5, r6, pc}
   2430c:	f06f 0536 	mvn.w	r5, #54	; 0x36
   24310:	e7ea      	b.n	242e8 <cc_mbedtls_sha256_finish_ret+0x1c>
   24312:	bf00      	nop

00024314 <mbedtls_sha_starts_internal>:
   24314:	b178      	cbz	r0, 24336 <mbedtls_sha_starts_internal+0x22>
   24316:	b538      	push	{r3, r4, r5, lr}
   24318:	4604      	mov	r4, r0
   2431a:	460d      	mov	r5, r1
   2431c:	21f0      	movs	r1, #240	; 0xf0
   2431e:	f000 fcb1 	bl	24c84 <CC_PalMemSetZeroPlat>
   24322:	2340      	movs	r3, #64	; 0x40
   24324:	6025      	str	r5, [r4, #0]
   24326:	65e3      	str	r3, [r4, #92]	; 0x5c
   24328:	4620      	mov	r0, r4
   2432a:	f000 fd83 	bl	24e34 <InitHashDrv>
   2432e:	3800      	subs	r0, #0
   24330:	bf18      	it	ne
   24332:	2001      	movne	r0, #1
   24334:	bd38      	pop	{r3, r4, r5, pc}
   24336:	2001      	movs	r0, #1
   24338:	4770      	bx	lr
   2433a:	bf00      	nop

0002433c <mbedtls_sha_finish_internal>:
   2433c:	b570      	push	{r4, r5, r6, lr}
   2433e:	6e05      	ldr	r5, [r0, #96]	; 0x60
   24340:	b0a4      	sub	sp, #144	; 0x90
   24342:	4604      	mov	r4, r0
   24344:	ae04      	add	r6, sp, #16
   24346:	b9e5      	cbnz	r5, 24382 <mbedtls_sha_finish_internal+0x46>
   24348:	2201      	movs	r2, #1
   2434a:	2300      	movs	r3, #0
   2434c:	6062      	str	r2, [r4, #4]
   2434e:	4630      	mov	r0, r6
   24350:	e9cd 3300 	strd	r3, r3, [sp]
   24354:	aa02      	add	r2, sp, #8
   24356:	4629      	mov	r1, r5
   24358:	f000 fd38 	bl	24dcc <SetDataBuffersInfo>
   2435c:	b110      	cbz	r0, 24364 <mbedtls_sha_finish_internal+0x28>
   2435e:	2001      	movs	r0, #1
   24360:	b024      	add	sp, #144	; 0x90
   24362:	bd70      	pop	{r4, r5, r6, pc}
   24364:	462a      	mov	r2, r5
   24366:	a902      	add	r1, sp, #8
   24368:	4620      	mov	r0, r4
   2436a:	f000 fd8d 	bl	24e88 <ProcessHashDrv>
   2436e:	2800      	cmp	r0, #0
   24370:	d1f5      	bne.n	2435e <mbedtls_sha_finish_internal+0x22>
   24372:	4620      	mov	r0, r4
   24374:	f000 feb6 	bl	250e4 <FinishHashDrv>
   24378:	2800      	cmp	r0, #0
   2437a:	d1f0      	bne.n	2435e <mbedtls_sha_finish_internal+0x22>
   2437c:	6620      	str	r0, [r4, #96]	; 0x60
   2437e:	b024      	add	sp, #144	; 0x90
   24380:	bd70      	pop	{r4, r5, r6, pc}
   24382:	2d80      	cmp	r5, #128	; 0x80
   24384:	462a      	mov	r2, r5
   24386:	4630      	mov	r0, r6
   24388:	bf28      	it	cs
   2438a:	2280      	movcs	r2, #128	; 0x80
   2438c:	f104 0164 	add.w	r1, r4, #100	; 0x64
   24390:	f000 fc74 	bl	24c7c <CC_PalMemCopyPlat>
   24394:	6e25      	ldr	r5, [r4, #96]	; 0x60
   24396:	e7d7      	b.n	24348 <mbedtls_sha_finish_internal+0xc>

00024398 <mbedtls_sha_update_internal>:
   24398:	2800      	cmp	r0, #0
   2439a:	d054      	beq.n	24446 <mbedtls_sha_update_internal+0xae>
   2439c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2439e:	4614      	mov	r4, r2
   243a0:	b0a5      	sub	sp, #148	; 0x94
   243a2:	b1b2      	cbz	r2, 243d2 <mbedtls_sha_update_internal+0x3a>
   243a4:	460e      	mov	r6, r1
   243a6:	b351      	cbz	r1, 243fe <mbedtls_sha_update_internal+0x66>
   243a8:	4605      	mov	r5, r0
   243aa:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   243ae:	1a1a      	subs	r2, r3, r0
   243b0:	fbb2 f7f3 	udiv	r7, r2, r3
   243b4:	fb03 2717 	mls	r7, r3, r7, r2
   243b8:	42a7      	cmp	r7, r4
   243ba:	bf28      	it	cs
   243bc:	4627      	movcs	r7, r4
   243be:	2f00      	cmp	r7, #0
   243c0:	d143      	bne.n	2444a <mbedtls_sha_update_internal+0xb2>
   243c2:	4283      	cmp	r3, r0
   243c4:	d008      	beq.n	243d8 <mbedtls_sha_update_internal+0x40>
   243c6:	fbb4 f7f3 	udiv	r7, r4, r3
   243ca:	fb03 f707 	mul.w	r7, r3, r7
   243ce:	b9cf      	cbnz	r7, 24404 <mbedtls_sha_update_internal+0x6c>
   243d0:	bb6c      	cbnz	r4, 2442e <mbedtls_sha_update_internal+0x96>
   243d2:	2000      	movs	r0, #0
   243d4:	b025      	add	sp, #148	; 0x94
   243d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   243d8:	2b80      	cmp	r3, #128	; 0x80
   243da:	bf28      	it	cs
   243dc:	2380      	movcs	r3, #128	; 0x80
   243de:	461a      	mov	r2, r3
   243e0:	f105 0164 	add.w	r1, r5, #100	; 0x64
   243e4:	a804      	add	r0, sp, #16
   243e6:	f000 fc49 	bl	24c7c <CC_PalMemCopyPlat>
   243ea:	2300      	movs	r3, #0
   243ec:	e9cd 3300 	strd	r3, r3, [sp]
   243f0:	a804      	add	r0, sp, #16
   243f2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   243f4:	aa02      	add	r2, sp, #8
   243f6:	f000 fce9 	bl	24dcc <SetDataBuffersInfo>
   243fa:	2800      	cmp	r0, #0
   243fc:	d032      	beq.n	24464 <mbedtls_sha_update_internal+0xcc>
   243fe:	2001      	movs	r0, #1
   24400:	b025      	add	sp, #148	; 0x94
   24402:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24404:	2300      	movs	r3, #0
   24406:	e9cd 3300 	strd	r3, r3, [sp]
   2440a:	aa02      	add	r2, sp, #8
   2440c:	4639      	mov	r1, r7
   2440e:	4630      	mov	r0, r6
   24410:	f000 fcdc 	bl	24dcc <SetDataBuffersInfo>
   24414:	2800      	cmp	r0, #0
   24416:	d1f2      	bne.n	243fe <mbedtls_sha_update_internal+0x66>
   24418:	a902      	add	r1, sp, #8
   2441a:	463a      	mov	r2, r7
   2441c:	4628      	mov	r0, r5
   2441e:	f000 fd33 	bl	24e88 <ProcessHashDrv>
   24422:	2800      	cmp	r0, #0
   24424:	d1eb      	bne.n	243fe <mbedtls_sha_update_internal+0x66>
   24426:	1be4      	subs	r4, r4, r7
   24428:	443e      	add	r6, r7
   2442a:	2c00      	cmp	r4, #0
   2442c:	d0d1      	beq.n	243d2 <mbedtls_sha_update_internal+0x3a>
   2442e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   24430:	3019      	adds	r0, #25
   24432:	4622      	mov	r2, r4
   24434:	4631      	mov	r1, r6
   24436:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2443a:	f000 fc1f 	bl	24c7c <CC_PalMemCopyPlat>
   2443e:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   24440:	4422      	add	r2, r4
   24442:	662a      	str	r2, [r5, #96]	; 0x60
   24444:	e7c5      	b.n	243d2 <mbedtls_sha_update_internal+0x3a>
   24446:	2001      	movs	r0, #1
   24448:	4770      	bx	lr
   2444a:	f105 0364 	add.w	r3, r5, #100	; 0x64
   2444e:	4418      	add	r0, r3
   24450:	463a      	mov	r2, r7
   24452:	f000 fc13 	bl	24c7c <CC_PalMemCopyPlat>
   24456:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   2445a:	4438      	add	r0, r7
   2445c:	443e      	add	r6, r7
   2445e:	1be4      	subs	r4, r4, r7
   24460:	6628      	str	r0, [r5, #96]	; 0x60
   24462:	e7ae      	b.n	243c2 <mbedtls_sha_update_internal+0x2a>
   24464:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   24466:	a902      	add	r1, sp, #8
   24468:	4628      	mov	r0, r5
   2446a:	f000 fd0d 	bl	24e88 <ProcessHashDrv>
   2446e:	2800      	cmp	r0, #0
   24470:	d1c5      	bne.n	243fe <mbedtls_sha_update_internal+0x66>
   24472:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   24474:	6628      	str	r0, [r5, #96]	; 0x60
   24476:	e7a6      	b.n	243c6 <mbedtls_sha_update_internal+0x2e>

00024478 <block_cipher_df>:
   24478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2447c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   24480:	b0b1      	sub	sp, #196	; 0xc4
   24482:	f200 812e 	bhi.w	246e2 <block_cipher_df+0x26a>
   24486:	f8df 926c 	ldr.w	r9, [pc, #620]	; 246f4 <block_cipher_df+0x27c>
   2448a:	4614      	mov	r4, r2
   2448c:	460d      	mov	r5, r1
   2448e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   24492:	2100      	movs	r1, #0
   24494:	4682      	mov	sl, r0
   24496:	4648      	mov	r0, r9
   24498:	f003 fbfe 	bl	27c98 <memset>
   2449c:	a813      	add	r0, sp, #76	; 0x4c
   2449e:	f000 fe63 	bl	25168 <cc_mbedtls_aes_init>
   244a2:	2600      	movs	r6, #0
   244a4:	4629      	mov	r1, r5
   244a6:	2320      	movs	r3, #32
   244a8:	ba65      	rev16	r5, r4
   244aa:	4622      	mov	r2, r4
   244ac:	f109 0018 	add.w	r0, r9, #24
   244b0:	f8a9 5012 	strh.w	r5, [r9, #18]
   244b4:	f889 3017 	strb.w	r3, [r9, #23]
   244b8:	f8a9 6010 	strh.w	r6, [r9, #16]
   244bc:	f003 fbc8 	bl	27c50 <memcpy>
   244c0:	eb09 0304 	add.w	r3, r9, r4
   244c4:	2280      	movs	r2, #128	; 0x80
   244c6:	4d88      	ldr	r5, [pc, #544]	; (246e8 <block_cipher_df+0x270>)
   244c8:	761a      	strb	r2, [r3, #24]
   244ca:	4b88      	ldr	r3, [pc, #544]	; (246ec <block_cipher_df+0x274>)
   244cc:	9503      	str	r5, [sp, #12]
   244ce:	9304      	str	r3, [sp, #16]
   244d0:	a813      	add	r0, sp, #76	; 0x4c
   244d2:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   244d6:	a903      	add	r1, sp, #12
   244d8:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   244dc:	e9cd 5305 	strd	r5, r3, [sp, #20]
   244e0:	f000 fe58 	bl	25194 <cc_mbedtls_aes_setkey_enc>
   244e4:	4680      	mov	r8, r0
   244e6:	2800      	cmp	r0, #0
   244e8:	f040 80da 	bne.w	246a0 <block_cipher_df+0x228>
   244ec:	f104 0319 	add.w	r3, r4, #25
   244f0:	9301      	str	r3, [sp, #4]
   244f2:	af07      	add	r7, sp, #28
   244f4:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   244f8:	2210      	movs	r2, #16
   244fa:	2100      	movs	r1, #0
   244fc:	4638      	mov	r0, r7
   244fe:	f003 fbcb 	bl	27c98 <memset>
   24502:	4c7b      	ldr	r4, [pc, #492]	; (246f0 <block_cipher_df+0x278>)
   24504:	9d01      	ldr	r5, [sp, #4]
   24506:	f89d 601d 	ldrb.w	r6, [sp, #29]
   2450a:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   2450e:	f89d e01c 	ldrb.w	lr, [sp, #28]
   24512:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   24516:	f89d c01f 	ldrb.w	ip, [sp, #31]
   2451a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   2451e:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   24522:	404e      	eors	r6, r1
   24524:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   24528:	f88d 601d 	strb.w	r6, [sp, #29]
   2452c:	ea8e 0303 	eor.w	r3, lr, r3
   24530:	4050      	eors	r0, r2
   24532:	ea8c 0101 	eor.w	r1, ip, r1
   24536:	f89d 2020 	ldrb.w	r2, [sp, #32]
   2453a:	f88d 301c 	strb.w	r3, [sp, #28]
   2453e:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   24542:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   24546:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   2454a:	f88d 001e 	strb.w	r0, [sp, #30]
   2454e:	f88d 101f 	strb.w	r1, [sp, #31]
   24552:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   24556:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   2455a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   2455e:	405a      	eors	r2, r3
   24560:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   24564:	f88d 2020 	strb.w	r2, [sp, #32]
   24568:	ea8c 0606 	eor.w	r6, ip, r6
   2456c:	4048      	eors	r0, r1
   2456e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   24572:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   24576:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   2457a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   2457e:	ea8e 0303 	eor.w	r3, lr, r3
   24582:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   24586:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   2458a:	ea8c 0101 	eor.w	r1, ip, r1
   2458e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   24592:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   24596:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   2459a:	ea82 020c 	eor.w	r2, r2, ip
   2459e:	4073      	eors	r3, r6
   245a0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   245a4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   245a8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   245ac:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   245b0:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   245b4:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   245b8:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   245bc:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   245c0:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   245c4:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   245c8:	ea8e 0202 	eor.w	r2, lr, r2
   245cc:	4041      	eors	r1, r0
   245ce:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   245d2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   245d6:	4073      	eors	r3, r6
   245d8:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   245dc:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   245e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   245e4:	ea8c 0000 	eor.w	r0, ip, r0
   245e8:	4056      	eors	r6, r2
   245ea:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   245ee:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   245f2:	463b      	mov	r3, r7
   245f4:	463a      	mov	r2, r7
   245f6:	2101      	movs	r1, #1
   245f8:	a813      	add	r0, sp, #76	; 0x4c
   245fa:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   245fe:	f000 fde3 	bl	251c8 <cc_mbedtls_aes_crypt_ecb>
   24602:	2d10      	cmp	r5, #16
   24604:	bf94      	ite	ls
   24606:	1b6d      	subls	r5, r5, r5
   24608:	3d10      	subhi	r5, #16
   2460a:	2800      	cmp	r0, #0
   2460c:	d167      	bne.n	246de <block_cipher_df+0x266>
   2460e:	3410      	adds	r4, #16
   24610:	2d00      	cmp	r5, #0
   24612:	f47f af78 	bne.w	24506 <block_cipher_df+0x8e>
   24616:	eb0b 0008 	add.w	r0, fp, r8
   2461a:	2210      	movs	r2, #16
   2461c:	4639      	mov	r1, r7
   2461e:	f003 fb17 	bl	27c50 <memcpy>
   24622:	f899 3003 	ldrb.w	r3, [r9, #3]
   24626:	f108 0810 	add.w	r8, r8, #16
   2462a:	3301      	adds	r3, #1
   2462c:	f1b8 0f20 	cmp.w	r8, #32
   24630:	f889 3003 	strb.w	r3, [r9, #3]
   24634:	f47f af60 	bne.w	244f8 <block_cipher_df+0x80>
   24638:	2280      	movs	r2, #128	; 0x80
   2463a:	4659      	mov	r1, fp
   2463c:	a813      	add	r0, sp, #76	; 0x4c
   2463e:	f000 fda9 	bl	25194 <cc_mbedtls_aes_setkey_enc>
   24642:	4680      	mov	r8, r0
   24644:	bb78      	cbnz	r0, 246a6 <block_cipher_df+0x22e>
   24646:	f10a 0520 	add.w	r5, sl, #32
   2464a:	4654      	mov	r4, sl
   2464c:	ab0f      	add	r3, sp, #60	; 0x3c
   2464e:	461a      	mov	r2, r3
   24650:	2101      	movs	r1, #1
   24652:	a813      	add	r0, sp, #76	; 0x4c
   24654:	f000 fdb8 	bl	251c8 <cc_mbedtls_aes_crypt_ecb>
   24658:	2210      	movs	r2, #16
   2465a:	4680      	mov	r8, r0
   2465c:	a90f      	add	r1, sp, #60	; 0x3c
   2465e:	4620      	mov	r0, r4
   24660:	4414      	add	r4, r2
   24662:	f1b8 0f00 	cmp.w	r8, #0
   24666:	d11e      	bne.n	246a6 <block_cipher_df+0x22e>
   24668:	f003 faf2 	bl	27c50 <memcpy>
   2466c:	42ac      	cmp	r4, r5
   2466e:	d1ed      	bne.n	2464c <block_cipher_df+0x1d4>
   24670:	a813      	add	r0, sp, #76	; 0x4c
   24672:	f000 fd89 	bl	25188 <cc_mbedtls_aes_free>
   24676:	481f      	ldr	r0, [pc, #124]	; (246f4 <block_cipher_df+0x27c>)
   24678:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2467c:	f7ff fd68 	bl	24150 <mbedtls_platform_zeroize>
   24680:	4658      	mov	r0, fp
   24682:	2120      	movs	r1, #32
   24684:	f7ff fd64 	bl	24150 <mbedtls_platform_zeroize>
   24688:	a803      	add	r0, sp, #12
   2468a:	2110      	movs	r1, #16
   2468c:	f7ff fd60 	bl	24150 <mbedtls_platform_zeroize>
   24690:	4638      	mov	r0, r7
   24692:	2110      	movs	r1, #16
   24694:	f7ff fd5c 	bl	24150 <mbedtls_platform_zeroize>
   24698:	4640      	mov	r0, r8
   2469a:	b031      	add	sp, #196	; 0xc4
   2469c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   246a0:	af07      	add	r7, sp, #28
   246a2:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   246a6:	a813      	add	r0, sp, #76	; 0x4c
   246a8:	f000 fd6e 	bl	25188 <cc_mbedtls_aes_free>
   246ac:	4811      	ldr	r0, [pc, #68]	; (246f4 <block_cipher_df+0x27c>)
   246ae:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   246b2:	f7ff fd4d 	bl	24150 <mbedtls_platform_zeroize>
   246b6:	4658      	mov	r0, fp
   246b8:	2120      	movs	r1, #32
   246ba:	f7ff fd49 	bl	24150 <mbedtls_platform_zeroize>
   246be:	a803      	add	r0, sp, #12
   246c0:	2110      	movs	r1, #16
   246c2:	f7ff fd45 	bl	24150 <mbedtls_platform_zeroize>
   246c6:	4638      	mov	r0, r7
   246c8:	2110      	movs	r1, #16
   246ca:	f7ff fd41 	bl	24150 <mbedtls_platform_zeroize>
   246ce:	4650      	mov	r0, sl
   246d0:	2120      	movs	r1, #32
   246d2:	f7ff fd3d 	bl	24150 <mbedtls_platform_zeroize>
   246d6:	4640      	mov	r0, r8
   246d8:	b031      	add	sp, #196	; 0xc4
   246da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   246de:	4680      	mov	r8, r0
   246e0:	e7e1      	b.n	246a6 <block_cipher_df+0x22e>
   246e2:	f06f 0837 	mvn.w	r8, #55	; 0x37
   246e6:	e7f6      	b.n	246d6 <block_cipher_df+0x25e>
   246e8:	03020100 	.word	0x03020100
   246ec:	07060504 	.word	0x07060504
   246f0:	2000434c 	.word	0x2000434c
   246f4:	2000433c 	.word	0x2000433c

000246f8 <ctr_drbg_update_internal>:
   246f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   246fc:	b088      	sub	sp, #32
   246fe:	4604      	mov	r4, r0
   24700:	2220      	movs	r2, #32
   24702:	460d      	mov	r5, r1
   24704:	4668      	mov	r0, sp
   24706:	2100      	movs	r1, #0
   24708:	eb04 0802 	add.w	r8, r4, r2
   2470c:	f003 fac4 	bl	27c98 <memset>
   24710:	466e      	mov	r6, sp
   24712:	7be2      	ldrb	r2, [r4, #15]
   24714:	3201      	adds	r2, #1
   24716:	b2d2      	uxtb	r2, r2
   24718:	73e2      	strb	r2, [r4, #15]
   2471a:	2a00      	cmp	r2, #0
   2471c:	d14d      	bne.n	247ba <ctr_drbg_update_internal+0xc2>
   2471e:	7ba2      	ldrb	r2, [r4, #14]
   24720:	3201      	adds	r2, #1
   24722:	b2d2      	uxtb	r2, r2
   24724:	73a2      	strb	r2, [r4, #14]
   24726:	2a00      	cmp	r2, #0
   24728:	d147      	bne.n	247ba <ctr_drbg_update_internal+0xc2>
   2472a:	7b63      	ldrb	r3, [r4, #13]
   2472c:	3301      	adds	r3, #1
   2472e:	b2db      	uxtb	r3, r3
   24730:	7363      	strb	r3, [r4, #13]
   24732:	2b00      	cmp	r3, #0
   24734:	d141      	bne.n	247ba <ctr_drbg_update_internal+0xc2>
   24736:	7b23      	ldrb	r3, [r4, #12]
   24738:	3301      	adds	r3, #1
   2473a:	b2db      	uxtb	r3, r3
   2473c:	7323      	strb	r3, [r4, #12]
   2473e:	2b00      	cmp	r3, #0
   24740:	d13b      	bne.n	247ba <ctr_drbg_update_internal+0xc2>
   24742:	7ae3      	ldrb	r3, [r4, #11]
   24744:	3301      	adds	r3, #1
   24746:	b2db      	uxtb	r3, r3
   24748:	72e3      	strb	r3, [r4, #11]
   2474a:	2b00      	cmp	r3, #0
   2474c:	d135      	bne.n	247ba <ctr_drbg_update_internal+0xc2>
   2474e:	7aa3      	ldrb	r3, [r4, #10]
   24750:	3301      	adds	r3, #1
   24752:	b2db      	uxtb	r3, r3
   24754:	72a3      	strb	r3, [r4, #10]
   24756:	2b00      	cmp	r3, #0
   24758:	d12f      	bne.n	247ba <ctr_drbg_update_internal+0xc2>
   2475a:	7a63      	ldrb	r3, [r4, #9]
   2475c:	3301      	adds	r3, #1
   2475e:	b2db      	uxtb	r3, r3
   24760:	7263      	strb	r3, [r4, #9]
   24762:	bb53      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   24764:	7a23      	ldrb	r3, [r4, #8]
   24766:	3301      	adds	r3, #1
   24768:	b2db      	uxtb	r3, r3
   2476a:	7223      	strb	r3, [r4, #8]
   2476c:	bb2b      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   2476e:	79e3      	ldrb	r3, [r4, #7]
   24770:	3301      	adds	r3, #1
   24772:	b2db      	uxtb	r3, r3
   24774:	71e3      	strb	r3, [r4, #7]
   24776:	bb03      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   24778:	79a3      	ldrb	r3, [r4, #6]
   2477a:	3301      	adds	r3, #1
   2477c:	b2db      	uxtb	r3, r3
   2477e:	71a3      	strb	r3, [r4, #6]
   24780:	b9db      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   24782:	7963      	ldrb	r3, [r4, #5]
   24784:	3301      	adds	r3, #1
   24786:	b2db      	uxtb	r3, r3
   24788:	7163      	strb	r3, [r4, #5]
   2478a:	b9b3      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   2478c:	7923      	ldrb	r3, [r4, #4]
   2478e:	3301      	adds	r3, #1
   24790:	b2db      	uxtb	r3, r3
   24792:	7123      	strb	r3, [r4, #4]
   24794:	b98b      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   24796:	78e3      	ldrb	r3, [r4, #3]
   24798:	3301      	adds	r3, #1
   2479a:	b2db      	uxtb	r3, r3
   2479c:	70e3      	strb	r3, [r4, #3]
   2479e:	b963      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   247a0:	78a3      	ldrb	r3, [r4, #2]
   247a2:	3301      	adds	r3, #1
   247a4:	b2db      	uxtb	r3, r3
   247a6:	70a3      	strb	r3, [r4, #2]
   247a8:	b93b      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   247aa:	7863      	ldrb	r3, [r4, #1]
   247ac:	3301      	adds	r3, #1
   247ae:	b2db      	uxtb	r3, r3
   247b0:	7063      	strb	r3, [r4, #1]
   247b2:	b913      	cbnz	r3, 247ba <ctr_drbg_update_internal+0xc2>
   247b4:	7823      	ldrb	r3, [r4, #0]
   247b6:	3301      	adds	r3, #1
   247b8:	7023      	strb	r3, [r4, #0]
   247ba:	4633      	mov	r3, r6
   247bc:	4622      	mov	r2, r4
   247be:	2101      	movs	r1, #1
   247c0:	4640      	mov	r0, r8
   247c2:	f000 fd01 	bl	251c8 <cc_mbedtls_aes_crypt_ecb>
   247c6:	4607      	mov	r7, r0
   247c8:	2800      	cmp	r0, #0
   247ca:	d12b      	bne.n	24824 <ctr_drbg_update_internal+0x12c>
   247cc:	3610      	adds	r6, #16
   247ce:	ab08      	add	r3, sp, #32
   247d0:	429e      	cmp	r6, r3
   247d2:	d19e      	bne.n	24712 <ctr_drbg_update_internal+0x1a>
   247d4:	9e01      	ldr	r6, [sp, #4]
   247d6:	686a      	ldr	r2, [r5, #4]
   247d8:	9f00      	ldr	r7, [sp, #0]
   247da:	6829      	ldr	r1, [r5, #0]
   247dc:	68ab      	ldr	r3, [r5, #8]
   247de:	4072      	eors	r2, r6
   247e0:	9e02      	ldr	r6, [sp, #8]
   247e2:	9201      	str	r2, [sp, #4]
   247e4:	4079      	eors	r1, r7
   247e6:	4073      	eors	r3, r6
   247e8:	9100      	str	r1, [sp, #0]
   247ea:	9e03      	ldr	r6, [sp, #12]
   247ec:	68e9      	ldr	r1, [r5, #12]
   247ee:	692a      	ldr	r2, [r5, #16]
   247f0:	9302      	str	r3, [sp, #8]
   247f2:	4071      	eors	r1, r6
   247f4:	9e04      	ldr	r6, [sp, #16]
   247f6:	696b      	ldr	r3, [r5, #20]
   247f8:	9103      	str	r1, [sp, #12]
   247fa:	4056      	eors	r6, r2
   247fc:	9a05      	ldr	r2, [sp, #20]
   247fe:	9604      	str	r6, [sp, #16]
   24800:	ea83 0102 	eor.w	r1, r3, r2
   24804:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   24808:	9d06      	ldr	r5, [sp, #24]
   2480a:	9105      	str	r1, [sp, #20]
   2480c:	4055      	eors	r5, r2
   2480e:	9a07      	ldr	r2, [sp, #28]
   24810:	4640      	mov	r0, r8
   24812:	4053      	eors	r3, r2
   24814:	4669      	mov	r1, sp
   24816:	2280      	movs	r2, #128	; 0x80
   24818:	e9cd 5306 	strd	r5, r3, [sp, #24]
   2481c:	f000 fcba 	bl	25194 <cc_mbedtls_aes_setkey_enc>
   24820:	4607      	mov	r7, r0
   24822:	b138      	cbz	r0, 24834 <ctr_drbg_update_internal+0x13c>
   24824:	4668      	mov	r0, sp
   24826:	2120      	movs	r1, #32
   24828:	f7ff fc92 	bl	24150 <mbedtls_platform_zeroize>
   2482c:	4638      	mov	r0, r7
   2482e:	b008      	add	sp, #32
   24830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24834:	2210      	movs	r2, #16
   24836:	4620      	mov	r0, r4
   24838:	eb0d 0102 	add.w	r1, sp, r2
   2483c:	f003 fa08 	bl	27c50 <memcpy>
   24840:	e7f0      	b.n	24824 <ctr_drbg_update_internal+0x12c>
   24842:	bf00      	nop

00024844 <mbedtls_ctr_drbg_reseed_internal>:
   24844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24848:	4604      	mov	r4, r0
   2484a:	6980      	ldr	r0, [r0, #24]
   2484c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   24850:	d851      	bhi.n	248f6 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   24852:	461d      	mov	r5, r3
   24854:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   24858:	42ab      	cmp	r3, r5
   2485a:	d34c      	bcc.n	248f6 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   2485c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   24860:	1a18      	subs	r0, r3, r0
   24862:	4290      	cmp	r0, r2
   24864:	4616      	mov	r6, r2
   24866:	d346      	bcc.n	248f6 <mbedtls_ctr_drbg_reseed_internal+0xb2>
   24868:	f8df 8098 	ldr.w	r8, [pc, #152]	; 24904 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   2486c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   24870:	460f      	mov	r7, r1
   24872:	4640      	mov	r0, r8
   24874:	2100      	movs	r1, #0
   24876:	f003 fa0f 	bl	27c98 <memset>
   2487a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2487e:	69a2      	ldr	r2, [r4, #24]
   24880:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   24884:	4641      	mov	r1, r8
   24886:	4798      	blx	r3
   24888:	2800      	cmp	r0, #0
   2488a:	d137      	bne.n	248fc <mbedtls_ctr_drbg_reseed_internal+0xb8>
   2488c:	f8d4 9018 	ldr.w	r9, [r4, #24]
   24890:	b135      	cbz	r5, 248a0 <mbedtls_ctr_drbg_reseed_internal+0x5c>
   24892:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   24896:	462a      	mov	r2, r5
   24898:	4641      	mov	r1, r8
   2489a:	4798      	blx	r3
   2489c:	bb70      	cbnz	r0, 248fc <mbedtls_ctr_drbg_reseed_internal+0xb8>
   2489e:	44a9      	add	r9, r5
   248a0:	b107      	cbz	r7, 248a4 <mbedtls_ctr_drbg_reseed_internal+0x60>
   248a2:	b9c6      	cbnz	r6, 248d6 <mbedtls_ctr_drbg_reseed_internal+0x92>
   248a4:	4917      	ldr	r1, [pc, #92]	; (24904 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   248a6:	464a      	mov	r2, r9
   248a8:	4608      	mov	r0, r1
   248aa:	f7ff fde5 	bl	24478 <block_cipher_df>
   248ae:	4605      	mov	r5, r0
   248b0:	b138      	cbz	r0, 248c2 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   248b2:	4814      	ldr	r0, [pc, #80]	; (24904 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   248b4:	f44f 71c0 	mov.w	r1, #384	; 0x180
   248b8:	f7ff fc4a 	bl	24150 <mbedtls_platform_zeroize>
   248bc:	4628      	mov	r0, r5
   248be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   248c2:	4910      	ldr	r1, [pc, #64]	; (24904 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   248c4:	4620      	mov	r0, r4
   248c6:	f7ff ff17 	bl	246f8 <ctr_drbg_update_internal>
   248ca:	4605      	mov	r5, r0
   248cc:	2800      	cmp	r0, #0
   248ce:	d1f0      	bne.n	248b2 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   248d0:	2301      	movs	r3, #1
   248d2:	6123      	str	r3, [r4, #16]
   248d4:	e7ed      	b.n	248b2 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   248d6:	4639      	mov	r1, r7
   248d8:	eb08 0009 	add.w	r0, r8, r9
   248dc:	4632      	mov	r2, r6
   248de:	f003 f9b7 	bl	27c50 <memcpy>
   248e2:	4908      	ldr	r1, [pc, #32]	; (24904 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   248e4:	44b1      	add	r9, r6
   248e6:	464a      	mov	r2, r9
   248e8:	4608      	mov	r0, r1
   248ea:	f7ff fdc5 	bl	24478 <block_cipher_df>
   248ee:	4605      	mov	r5, r0
   248f0:	2800      	cmp	r0, #0
   248f2:	d1de      	bne.n	248b2 <mbedtls_ctr_drbg_reseed_internal+0x6e>
   248f4:	e7e5      	b.n	248c2 <mbedtls_ctr_drbg_reseed_internal+0x7e>
   248f6:	f06f 0537 	mvn.w	r5, #55	; 0x37
   248fa:	e7df      	b.n	248bc <mbedtls_ctr_drbg_reseed_internal+0x78>
   248fc:	f06f 0533 	mvn.w	r5, #51	; 0x33
   24900:	e7dc      	b.n	248bc <mbedtls_ctr_drbg_reseed_internal+0x78>
   24902:	bf00      	nop
   24904:	200044dc 	.word	0x200044dc

00024908 <cc_mbedtls_ctr_drbg_init>:
   24908:	b510      	push	{r4, lr}
   2490a:	22a4      	movs	r2, #164	; 0xa4
   2490c:	4604      	mov	r4, r0
   2490e:	2100      	movs	r1, #0
   24910:	f003 f9c2 	bl	27c98 <memset>
   24914:	4b04      	ldr	r3, [pc, #16]	; (24928 <cc_mbedtls_ctr_drbg_init+0x20>)
   24916:	f04f 32ff 	mov.w	r2, #4294967295
   2491a:	6122      	str	r2, [r4, #16]
   2491c:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   24920:	681b      	ldr	r3, [r3, #0]
   24922:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24926:	4718      	bx	r3
   24928:	2000070c 	.word	0x2000070c

0002492c <cc_mbedtls_ctr_drbg_seed>:
   2492c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24930:	b085      	sub	sp, #20
   24932:	4605      	mov	r5, r0
   24934:	460f      	mov	r7, r1
   24936:	4616      	mov	r6, r2
   24938:	4668      	mov	r0, sp
   2493a:	2210      	movs	r2, #16
   2493c:	2100      	movs	r1, #0
   2493e:	4699      	mov	r9, r3
   24940:	f003 f9aa 	bl	27c98 <memset>
   24944:	4b1f      	ldr	r3, [pc, #124]	; (249c4 <cc_mbedtls_ctr_drbg_seed+0x98>)
   24946:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   2494a:	681b      	ldr	r3, [r3, #0]
   2494c:	4640      	mov	r0, r8
   2494e:	4798      	blx	r3
   24950:	b120      	cbz	r0, 2495c <cc_mbedtls_ctr_drbg_seed+0x30>
   24952:	4604      	mov	r4, r0
   24954:	4620      	mov	r0, r4
   24956:	b005      	add	sp, #20
   24958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2495c:	f105 0420 	add.w	r4, r5, #32
   24960:	4620      	mov	r0, r4
   24962:	f000 fc01 	bl	25168 <cc_mbedtls_aes_init>
   24966:	69aa      	ldr	r2, [r5, #24]
   24968:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   2496c:	692e      	ldr	r6, [r5, #16]
   2496e:	b9fa      	cbnz	r2, 249b0 <cc_mbedtls_ctr_drbg_seed+0x84>
   24970:	2220      	movs	r2, #32
   24972:	2e00      	cmp	r6, #0
   24974:	61aa      	str	r2, [r5, #24]
   24976:	db22      	blt.n	249be <cc_mbedtls_ctr_drbg_seed+0x92>
   24978:	f64f 73f0 	movw	r3, #65520	; 0xfff0
   2497c:	4620      	mov	r0, r4
   2497e:	4669      	mov	r1, sp
   24980:	61eb      	str	r3, [r5, #28]
   24982:	2280      	movs	r2, #128	; 0x80
   24984:	f000 fc06 	bl	25194 <cc_mbedtls_aes_setkey_enc>
   24988:	4604      	mov	r4, r0
   2498a:	b930      	cbnz	r0, 2499a <cc_mbedtls_ctr_drbg_seed+0x6e>
   2498c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2498e:	4633      	mov	r3, r6
   24990:	4649      	mov	r1, r9
   24992:	4628      	mov	r0, r5
   24994:	f7ff ff56 	bl	24844 <mbedtls_ctr_drbg_reseed_internal>
   24998:	4604      	mov	r4, r0
   2499a:	4b0b      	ldr	r3, [pc, #44]	; (249c8 <cc_mbedtls_ctr_drbg_seed+0x9c>)
   2499c:	4640      	mov	r0, r8
   2499e:	681b      	ldr	r3, [r3, #0]
   249a0:	4798      	blx	r3
   249a2:	2800      	cmp	r0, #0
   249a4:	bf18      	it	ne
   249a6:	4604      	movne	r4, r0
   249a8:	4620      	mov	r0, r4
   249aa:	b005      	add	sp, #20
   249ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   249b0:	2e00      	cmp	r6, #0
   249b2:	dae1      	bge.n	24978 <cc_mbedtls_ctr_drbg_seed+0x4c>
   249b4:	2a17      	cmp	r2, #23
   249b6:	d802      	bhi.n	249be <cc_mbedtls_ctr_drbg_seed+0x92>
   249b8:	1c53      	adds	r3, r2, #1
   249ba:	085e      	lsrs	r6, r3, #1
   249bc:	e7dc      	b.n	24978 <cc_mbedtls_ctr_drbg_seed+0x4c>
   249be:	2600      	movs	r6, #0
   249c0:	e7da      	b.n	24978 <cc_mbedtls_ctr_drbg_seed+0x4c>
   249c2:	bf00      	nop
   249c4:	20000710 	.word	0x20000710
   249c8:	20000714 	.word	0x20000714

000249cc <cc_mbedtls_ctr_drbg_random_with_add>:
   249cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   249d0:	b08d      	sub	sp, #52	; 0x34
   249d2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   249d6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   249da:	f200 80e4 	bhi.w	24ba6 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   249de:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   249e2:	f200 80dd 	bhi.w	24ba0 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   249e6:	4604      	mov	r4, r0
   249e8:	4615      	mov	r5, r2
   249ea:	460e      	mov	r6, r1
   249ec:	2220      	movs	r2, #32
   249ee:	2100      	movs	r1, #0
   249f0:	a804      	add	r0, sp, #16
   249f2:	461f      	mov	r7, r3
   249f4:	f003 f950 	bl	27c98 <memset>
   249f8:	4b6c      	ldr	r3, [pc, #432]	; (24bac <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   249fa:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   249fe:	681b      	ldr	r3, [r3, #0]
   24a00:	4648      	mov	r0, r9
   24a02:	4798      	blx	r3
   24a04:	4683      	mov	fp, r0
   24a06:	2800      	cmp	r0, #0
   24a08:	f040 8093 	bne.w	24b32 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   24a0c:	6922      	ldr	r2, [r4, #16]
   24a0e:	69e3      	ldr	r3, [r4, #28]
   24a10:	429a      	cmp	r2, r3
   24a12:	f300 8092 	bgt.w	24b3a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   24a16:	6963      	ldr	r3, [r4, #20]
   24a18:	2b00      	cmp	r3, #0
   24a1a:	f040 808e 	bne.w	24b3a <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   24a1e:	f1b8 0f00 	cmp.w	r8, #0
   24a22:	f040 80a9 	bne.w	24b78 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   24a26:	f8df a188 	ldr.w	sl, [pc, #392]	; 24bb0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   24a2a:	466f      	mov	r7, sp
   24a2c:	2d00      	cmp	r5, #0
   24a2e:	f000 8098 	beq.w	24b62 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   24a32:	f104 0820 	add.w	r8, r4, #32
   24a36:	466f      	mov	r7, sp
   24a38:	e00e      	b.n	24a58 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   24a3a:	2d10      	cmp	r5, #16
   24a3c:	46ab      	mov	fp, r5
   24a3e:	bf28      	it	cs
   24a40:	f04f 0b10 	movcs.w	fp, #16
   24a44:	4630      	mov	r0, r6
   24a46:	465a      	mov	r2, fp
   24a48:	4639      	mov	r1, r7
   24a4a:	f003 f901 	bl	27c50 <memcpy>
   24a4e:	ebb5 050b 	subs.w	r5, r5, fp
   24a52:	445e      	add	r6, fp
   24a54:	f000 8085 	beq.w	24b62 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   24a58:	7be3      	ldrb	r3, [r4, #15]
   24a5a:	3301      	adds	r3, #1
   24a5c:	b2db      	uxtb	r3, r3
   24a5e:	73e3      	strb	r3, [r4, #15]
   24a60:	2b00      	cmp	r3, #0
   24a62:	d14d      	bne.n	24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24a64:	7ba3      	ldrb	r3, [r4, #14]
   24a66:	3301      	adds	r3, #1
   24a68:	b2db      	uxtb	r3, r3
   24a6a:	73a3      	strb	r3, [r4, #14]
   24a6c:	2b00      	cmp	r3, #0
   24a6e:	d147      	bne.n	24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24a70:	7b63      	ldrb	r3, [r4, #13]
   24a72:	3301      	adds	r3, #1
   24a74:	b2db      	uxtb	r3, r3
   24a76:	7363      	strb	r3, [r4, #13]
   24a78:	2b00      	cmp	r3, #0
   24a7a:	d141      	bne.n	24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24a7c:	7b23      	ldrb	r3, [r4, #12]
   24a7e:	3301      	adds	r3, #1
   24a80:	b2db      	uxtb	r3, r3
   24a82:	7323      	strb	r3, [r4, #12]
   24a84:	2b00      	cmp	r3, #0
   24a86:	d13b      	bne.n	24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24a88:	7ae3      	ldrb	r3, [r4, #11]
   24a8a:	3301      	adds	r3, #1
   24a8c:	b2db      	uxtb	r3, r3
   24a8e:	72e3      	strb	r3, [r4, #11]
   24a90:	2b00      	cmp	r3, #0
   24a92:	d135      	bne.n	24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24a94:	7aa3      	ldrb	r3, [r4, #10]
   24a96:	3301      	adds	r3, #1
   24a98:	b2db      	uxtb	r3, r3
   24a9a:	72a3      	strb	r3, [r4, #10]
   24a9c:	2b00      	cmp	r3, #0
   24a9e:	d12f      	bne.n	24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24aa0:	7a63      	ldrb	r3, [r4, #9]
   24aa2:	3301      	adds	r3, #1
   24aa4:	b2db      	uxtb	r3, r3
   24aa6:	7263      	strb	r3, [r4, #9]
   24aa8:	bb53      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24aaa:	7a23      	ldrb	r3, [r4, #8]
   24aac:	3301      	adds	r3, #1
   24aae:	b2db      	uxtb	r3, r3
   24ab0:	7223      	strb	r3, [r4, #8]
   24ab2:	bb2b      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24ab4:	79e3      	ldrb	r3, [r4, #7]
   24ab6:	3301      	adds	r3, #1
   24ab8:	b2db      	uxtb	r3, r3
   24aba:	71e3      	strb	r3, [r4, #7]
   24abc:	bb03      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24abe:	79a3      	ldrb	r3, [r4, #6]
   24ac0:	3301      	adds	r3, #1
   24ac2:	b2db      	uxtb	r3, r3
   24ac4:	71a3      	strb	r3, [r4, #6]
   24ac6:	b9db      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24ac8:	7963      	ldrb	r3, [r4, #5]
   24aca:	3301      	adds	r3, #1
   24acc:	b2db      	uxtb	r3, r3
   24ace:	7163      	strb	r3, [r4, #5]
   24ad0:	b9b3      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24ad2:	7923      	ldrb	r3, [r4, #4]
   24ad4:	3301      	adds	r3, #1
   24ad6:	b2db      	uxtb	r3, r3
   24ad8:	7123      	strb	r3, [r4, #4]
   24ada:	b98b      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24adc:	78e3      	ldrb	r3, [r4, #3]
   24ade:	3301      	adds	r3, #1
   24ae0:	b2db      	uxtb	r3, r3
   24ae2:	70e3      	strb	r3, [r4, #3]
   24ae4:	b963      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24ae6:	78a3      	ldrb	r3, [r4, #2]
   24ae8:	3301      	adds	r3, #1
   24aea:	b2db      	uxtb	r3, r3
   24aec:	70a3      	strb	r3, [r4, #2]
   24aee:	b93b      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24af0:	7863      	ldrb	r3, [r4, #1]
   24af2:	3301      	adds	r3, #1
   24af4:	b2db      	uxtb	r3, r3
   24af6:	7063      	strb	r3, [r4, #1]
   24af8:	b913      	cbnz	r3, 24b00 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   24afa:	7823      	ldrb	r3, [r4, #0]
   24afc:	3301      	adds	r3, #1
   24afe:	7023      	strb	r3, [r4, #0]
   24b00:	463b      	mov	r3, r7
   24b02:	4622      	mov	r2, r4
   24b04:	2101      	movs	r1, #1
   24b06:	4640      	mov	r0, r8
   24b08:	f000 fb5e 	bl	251c8 <cc_mbedtls_aes_crypt_ecb>
   24b0c:	4683      	mov	fp, r0
   24b0e:	2800      	cmp	r0, #0
   24b10:	d093      	beq.n	24a3a <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   24b12:	f8da 3000 	ldr.w	r3, [sl]
   24b16:	4648      	mov	r0, r9
   24b18:	4798      	blx	r3
   24b1a:	2120      	movs	r1, #32
   24b1c:	4603      	mov	r3, r0
   24b1e:	a804      	add	r0, sp, #16
   24b20:	2b00      	cmp	r3, #0
   24b22:	bf18      	it	ne
   24b24:	469b      	movne	fp, r3
   24b26:	f7ff fb13 	bl	24150 <mbedtls_platform_zeroize>
   24b2a:	4638      	mov	r0, r7
   24b2c:	2110      	movs	r1, #16
   24b2e:	f7ff fb0f 	bl	24150 <mbedtls_platform_zeroize>
   24b32:	4658      	mov	r0, fp
   24b34:	b00d      	add	sp, #52	; 0x34
   24b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24b3a:	4642      	mov	r2, r8
   24b3c:	4639      	mov	r1, r7
   24b3e:	2300      	movs	r3, #0
   24b40:	4620      	mov	r0, r4
   24b42:	f7ff fe7f 	bl	24844 <mbedtls_ctr_drbg_reseed_internal>
   24b46:	f8df a068 	ldr.w	sl, [pc, #104]	; 24bb0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   24b4a:	2800      	cmp	r0, #0
   24b4c:	f43f af6d 	beq.w	24a2a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   24b50:	f8da 3000 	ldr.w	r3, [sl]
   24b54:	4648      	mov	r0, r9
   24b56:	4798      	blx	r3
   24b58:	4683      	mov	fp, r0
   24b5a:	2800      	cmp	r0, #0
   24b5c:	f43f af65 	beq.w	24a2a <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   24b60:	e7e7      	b.n	24b32 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   24b62:	a904      	add	r1, sp, #16
   24b64:	4620      	mov	r0, r4
   24b66:	f7ff fdc7 	bl	246f8 <ctr_drbg_update_internal>
   24b6a:	4683      	mov	fp, r0
   24b6c:	2800      	cmp	r0, #0
   24b6e:	d1d0      	bne.n	24b12 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   24b70:	6923      	ldr	r3, [r4, #16]
   24b72:	3301      	adds	r3, #1
   24b74:	6123      	str	r3, [r4, #16]
   24b76:	e7cc      	b.n	24b12 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   24b78:	4642      	mov	r2, r8
   24b7a:	4639      	mov	r1, r7
   24b7c:	a804      	add	r0, sp, #16
   24b7e:	f7ff fc7b 	bl	24478 <block_cipher_df>
   24b82:	4683      	mov	fp, r0
   24b84:	b118      	cbz	r0, 24b8e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   24b86:	f8df a028 	ldr.w	sl, [pc, #40]	; 24bb0 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   24b8a:	466f      	mov	r7, sp
   24b8c:	e7c1      	b.n	24b12 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   24b8e:	a904      	add	r1, sp, #16
   24b90:	4620      	mov	r0, r4
   24b92:	f7ff fdb1 	bl	246f8 <ctr_drbg_update_internal>
   24b96:	4683      	mov	fp, r0
   24b98:	2800      	cmp	r0, #0
   24b9a:	f43f af44 	beq.w	24a26 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24b9e:	e7f2      	b.n	24b86 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   24ba0:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   24ba4:	e7c5      	b.n	24b32 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   24ba6:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   24baa:	e7c2      	b.n	24b32 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   24bac:	20000710 	.word	0x20000710
   24bb0:	20000714 	.word	0x20000714

00024bb4 <cc_mbedtls_sha256_ret>:
   24bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bb6:	461c      	mov	r4, r3
   24bb8:	4605      	mov	r5, r0
   24bba:	4811      	ldr	r0, [pc, #68]	; (24c00 <cc_mbedtls_sha256_ret+0x4c>)
   24bbc:	460e      	mov	r6, r1
   24bbe:	4617      	mov	r7, r2
   24bc0:	f7ff fb4e 	bl	24260 <cc_mbedtls_sha256_init>
   24bc4:	4621      	mov	r1, r4
   24bc6:	480e      	ldr	r0, [pc, #56]	; (24c00 <cc_mbedtls_sha256_ret+0x4c>)
   24bc8:	f7ff fb64 	bl	24294 <cc_mbedtls_sha256_starts_ret>
   24bcc:	4604      	mov	r4, r0
   24bce:	b120      	cbz	r0, 24bda <cc_mbedtls_sha256_ret+0x26>
   24bd0:	480b      	ldr	r0, [pc, #44]	; (24c00 <cc_mbedtls_sha256_ret+0x4c>)
   24bd2:	f7ff fb59 	bl	24288 <cc_mbedtls_sha256_free>
   24bd6:	4620      	mov	r0, r4
   24bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24bda:	4809      	ldr	r0, [pc, #36]	; (24c00 <cc_mbedtls_sha256_ret+0x4c>)
   24bdc:	4632      	mov	r2, r6
   24bde:	4629      	mov	r1, r5
   24be0:	f7ff fb6c 	bl	242bc <cc_mbedtls_sha256_update_ret>
   24be4:	4604      	mov	r4, r0
   24be6:	2800      	cmp	r0, #0
   24be8:	d1f2      	bne.n	24bd0 <cc_mbedtls_sha256_ret+0x1c>
   24bea:	4639      	mov	r1, r7
   24bec:	4804      	ldr	r0, [pc, #16]	; (24c00 <cc_mbedtls_sha256_ret+0x4c>)
   24bee:	f7ff fb6d 	bl	242cc <cc_mbedtls_sha256_finish_ret>
   24bf2:	4604      	mov	r4, r0
   24bf4:	4802      	ldr	r0, [pc, #8]	; (24c00 <cc_mbedtls_sha256_ret+0x4c>)
   24bf6:	f7ff fb47 	bl	24288 <cc_mbedtls_sha256_free>
   24bfa:	4620      	mov	r0, r4
   24bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24bfe:	bf00      	nop
   24c00:	2000465c 	.word	0x2000465c

00024c04 <RNG_PLAT_SetUserRngParameters>:
   24c04:	b530      	push	{r4, r5, lr}
   24c06:	b083      	sub	sp, #12
   24c08:	231c      	movs	r3, #28
   24c0a:	a901      	add	r1, sp, #4
   24c0c:	4604      	mov	r4, r0
   24c0e:	9301      	str	r3, [sp, #4]
   24c10:	f000 f83c 	bl	24c8c <CC_PalTrngParamGet>
   24c14:	4605      	mov	r5, r0
   24c16:	b938      	cbnz	r0, 24c28 <RNG_PLAT_SetUserRngParameters+0x24>
   24c18:	9b01      	ldr	r3, [sp, #4]
   24c1a:	2b1c      	cmp	r3, #28
   24c1c:	d007      	beq.n	24c2e <RNG_PLAT_SetUserRngParameters+0x2a>
   24c1e:	4d15      	ldr	r5, [pc, #84]	; (24c74 <RNG_PLAT_SetUserRngParameters+0x70>)
   24c20:	4620      	mov	r0, r4
   24c22:	211c      	movs	r1, #28
   24c24:	f000 f82e 	bl	24c84 <CC_PalMemSetZeroPlat>
   24c28:	4628      	mov	r0, r5
   24c2a:	b003      	add	sp, #12
   24c2c:	bd30      	pop	{r4, r5, pc}
   24c2e:	e9d4 3200 	ldrd	r3, r2, [r4]
   24c32:	2101      	movs	r1, #1
   24c34:	3b00      	subs	r3, #0
   24c36:	bf18      	it	ne
   24c38:	2301      	movne	r3, #1
   24c3a:	61e1      	str	r1, [r4, #28]
   24c3c:	b10a      	cbz	r2, 24c42 <RNG_PLAT_SetUserRngParameters+0x3e>
   24c3e:	f043 0302 	orr.w	r3, r3, #2
   24c42:	68a2      	ldr	r2, [r4, #8]
   24c44:	b932      	cbnz	r2, 24c54 <RNG_PLAT_SetUserRngParameters+0x50>
   24c46:	68e2      	ldr	r2, [r4, #12]
   24c48:	b942      	cbnz	r2, 24c5c <RNG_PLAT_SetUserRngParameters+0x58>
   24c4a:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24c4e:	b97b      	cbnz	r3, 24c70 <RNG_PLAT_SetUserRngParameters+0x6c>
   24c50:	4d09      	ldr	r5, [pc, #36]	; (24c78 <RNG_PLAT_SetUserRngParameters+0x74>)
   24c52:	e7e5      	b.n	24c20 <RNG_PLAT_SetUserRngParameters+0x1c>
   24c54:	68e2      	ldr	r2, [r4, #12]
   24c56:	f043 0304 	orr.w	r3, r3, #4
   24c5a:	b13a      	cbz	r2, 24c6c <RNG_PLAT_SetUserRngParameters+0x68>
   24c5c:	f043 0308 	orr.w	r3, r3, #8
   24c60:	2200      	movs	r2, #0
   24c62:	4628      	mov	r0, r5
   24c64:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24c68:	b003      	add	sp, #12
   24c6a:	bd30      	pop	{r4, r5, pc}
   24c6c:	e9c4 3208 	strd	r3, r2, [r4, #32]
   24c70:	4615      	mov	r5, r2
   24c72:	e7d9      	b.n	24c28 <RNG_PLAT_SetUserRngParameters+0x24>
   24c74:	00f00c37 	.word	0x00f00c37
   24c78:	00f00c0e 	.word	0x00f00c0e

00024c7c <CC_PalMemCopyPlat>:
   24c7c:	f002 bfd2 	b.w	27c24 <memmove>

00024c80 <CC_PalMemSetPlat>:
   24c80:	f003 b80a 	b.w	27c98 <memset>

00024c84 <CC_PalMemSetZeroPlat>:
   24c84:	460a      	mov	r2, r1
   24c86:	2100      	movs	r1, #0
   24c88:	f003 b806 	b.w	27c98 <memset>

00024c8c <CC_PalTrngParamGet>:
   24c8c:	b118      	cbz	r0, 24c96 <CC_PalTrngParamGet+0xa>
   24c8e:	b111      	cbz	r1, 24c96 <CC_PalTrngParamGet+0xa>
   24c90:	680b      	ldr	r3, [r1, #0]
   24c92:	2b1c      	cmp	r3, #28
   24c94:	d001      	beq.n	24c9a <CC_PalTrngParamGet+0xe>
   24c96:	2001      	movs	r0, #1
   24c98:	4770      	bx	lr
   24c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24c9e:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   24ca2:	3201      	adds	r2, #1
   24ca4:	bf14      	ite	ne
   24ca6:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   24caa:	f241 225c 	movweq	r2, #4700	; 0x125c
   24cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24cb2:	6002      	str	r2, [r0, #0]
   24cb4:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   24cb8:	3201      	adds	r2, #1
   24cba:	bf14      	ite	ne
   24cbc:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   24cc0:	f641 1264 	movweq	r2, #6500	; 0x1964
   24cc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24cc8:	6042      	str	r2, [r0, #4]
   24cca:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   24cce:	3201      	adds	r2, #1
   24cd0:	bf14      	ite	ne
   24cd2:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   24cd6:	f640 62d8 	movweq	r2, #3800	; 0xed8
   24cda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24cde:	6082      	str	r2, [r0, #8]
   24ce0:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   24ce4:	3201      	adds	r2, #1
   24ce6:	bf14      	ite	ne
   24ce8:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   24cec:	f241 3288 	movweq	r2, #5000	; 0x1388
   24cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24cf4:	60c2      	str	r2, [r0, #12]
   24cf6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   24cfa:	3201      	adds	r2, #1
   24cfc:	bf14      	ite	ne
   24cfe:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   24d02:	2290      	moveq	r2, #144	; 0x90
   24d04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24d08:	6102      	str	r2, [r0, #16]
   24d0a:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   24d0e:	3201      	adds	r2, #1
   24d10:	bf14      	ite	ne
   24d12:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   24d16:	2251      	moveq	r2, #81	; 0x51
   24d18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   24d1c:	6142      	str	r2, [r0, #20]
   24d1e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   24d22:	3201      	adds	r2, #1
   24d24:	bf14      	ite	ne
   24d26:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   24d2a:	f240 3337 	movweq	r3, #823	; 0x337
   24d2e:	6183      	str	r3, [r0, #24]
   24d30:	2000      	movs	r0, #0
   24d32:	4770      	bx	lr

00024d34 <LLF_RND_WaitRngInterrupt>:
   24d34:	b508      	push	{r3, lr}
   24d36:	4601      	mov	r1, r0
   24d38:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24d3c:	f7fe fe32 	bl	239a4 <CC_HalWaitInterruptRND>
   24d40:	4902      	ldr	r1, [pc, #8]	; (24d4c <LLF_RND_WaitRngInterrupt+0x18>)
   24d42:	4a03      	ldr	r2, [pc, #12]	; (24d50 <LLF_RND_WaitRngInterrupt+0x1c>)
   24d44:	2300      	movs	r3, #0
   24d46:	600b      	str	r3, [r1, #0]
   24d48:	6013      	str	r3, [r2, #0]
   24d4a:	bd08      	pop	{r3, pc}
   24d4c:	5002b1c8 	.word	0x5002b1c8
   24d50:	5002b12c 	.word	0x5002b12c

00024d54 <LLF_RND_GetRoscSampleCnt>:
   24d54:	3801      	subs	r0, #1
   24d56:	2807      	cmp	r0, #7
   24d58:	d805      	bhi.n	24d66 <LLF_RND_GetRoscSampleCnt+0x12>
   24d5a:	e8df f000 	tbb	[pc, r0]
   24d5e:	0e0a      	.short	0x0e0a
   24d60:	04041204 	.word	0x04041204
   24d64:	0604      	.short	0x0604
   24d66:	4809      	ldr	r0, [pc, #36]	; (24d8c <LLF_RND_GetRoscSampleCnt+0x38>)
   24d68:	4770      	bx	lr
   24d6a:	68cb      	ldr	r3, [r1, #12]
   24d6c:	624b      	str	r3, [r1, #36]	; 0x24
   24d6e:	2000      	movs	r0, #0
   24d70:	4770      	bx	lr
   24d72:	680b      	ldr	r3, [r1, #0]
   24d74:	624b      	str	r3, [r1, #36]	; 0x24
   24d76:	2000      	movs	r0, #0
   24d78:	4770      	bx	lr
   24d7a:	684b      	ldr	r3, [r1, #4]
   24d7c:	624b      	str	r3, [r1, #36]	; 0x24
   24d7e:	2000      	movs	r0, #0
   24d80:	4770      	bx	lr
   24d82:	688b      	ldr	r3, [r1, #8]
   24d84:	624b      	str	r3, [r1, #36]	; 0x24
   24d86:	2000      	movs	r0, #0
   24d88:	4770      	bx	lr
   24d8a:	bf00      	nop
   24d8c:	00f10c31 	.word	0x00f10c31

00024d90 <LLF_RND_GetFastestRosc>:
   24d90:	680b      	ldr	r3, [r1, #0]
   24d92:	e002      	b.n	24d9a <LLF_RND_GetFastestRosc+0xa>
   24d94:	2b08      	cmp	r3, #8
   24d96:	600b      	str	r3, [r1, #0]
   24d98:	d806      	bhi.n	24da8 <LLF_RND_GetFastestRosc+0x18>
   24d9a:	6a02      	ldr	r2, [r0, #32]
   24d9c:	4213      	tst	r3, r2
   24d9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   24da2:	d0f7      	beq.n	24d94 <LLF_RND_GetFastestRosc+0x4>
   24da4:	2000      	movs	r0, #0
   24da6:	4770      	bx	lr
   24da8:	4800      	ldr	r0, [pc, #0]	; (24dac <LLF_RND_GetFastestRosc+0x1c>)
   24daa:	4770      	bx	lr
   24dac:	00f10c31 	.word	0x00f10c31

00024db0 <LLF_RND_TurnOffTrng>:
   24db0:	4904      	ldr	r1, [pc, #16]	; (24dc4 <LLF_RND_TurnOffTrng+0x14>)
   24db2:	4a05      	ldr	r2, [pc, #20]	; (24dc8 <LLF_RND_TurnOffTrng+0x18>)
   24db4:	2300      	movs	r3, #0
   24db6:	600b      	str	r3, [r1, #0]
   24db8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   24dbc:	6013      	str	r3, [r2, #0]
   24dbe:	f7fe bdd7 	b.w	23970 <CC_HalClearInterruptBit>
   24dc2:	bf00      	nop
   24dc4:	5002b12c 	.word	0x5002b12c
   24dc8:	5002b1c4 	.word	0x5002b1c4

00024dcc <SetDataBuffersInfo>:
   24dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   24dce:	b083      	sub	sp, #12
   24dd0:	2400      	movs	r4, #0
   24dd2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   24dd6:	f88d 4007 	strb.w	r4, [sp, #7]
   24dda:	d325      	bcc.n	24e28 <SetDataBuffersInfo+0x5c>
   24ddc:	460c      	mov	r4, r1
   24dde:	4404      	add	r4, r0
   24de0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   24de4:	4605      	mov	r5, r0
   24de6:	d81f      	bhi.n	24e28 <SetDataBuffersInfo+0x5c>
   24de8:	4617      	mov	r7, r2
   24dea:	461e      	mov	r6, r3
   24dec:	2201      	movs	r2, #1
   24dee:	f10d 0307 	add.w	r3, sp, #7
   24df2:	f000 fa13 	bl	2521c <CC_PalDataBufferAttrGet>
   24df6:	4604      	mov	r4, r0
   24df8:	b9b0      	cbnz	r0, 24e28 <SetDataBuffersInfo+0x5c>
   24dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24dfc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24e00:	603d      	str	r5, [r7, #0]
   24e02:	713b      	strb	r3, [r7, #4]
   24e04:	b192      	cbz	r2, 24e2c <SetDataBuffersInfo+0x60>
   24e06:	b14e      	cbz	r6, 24e1c <SetDataBuffersInfo+0x50>
   24e08:	4602      	mov	r2, r0
   24e0a:	9908      	ldr	r1, [sp, #32]
   24e0c:	f10d 0307 	add.w	r3, sp, #7
   24e10:	4630      	mov	r0, r6
   24e12:	f000 fa03 	bl	2521c <CC_PalDataBufferAttrGet>
   24e16:	b938      	cbnz	r0, 24e28 <SetDataBuffersInfo+0x5c>
   24e18:	f89d 3007 	ldrb.w	r3, [sp, #7]
   24e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24e1e:	4620      	mov	r0, r4
   24e20:	6016      	str	r6, [r2, #0]
   24e22:	7113      	strb	r3, [r2, #4]
   24e24:	b003      	add	sp, #12
   24e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24e28:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   24e2c:	4620      	mov	r0, r4
   24e2e:	b003      	add	sp, #12
   24e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24e32:	bf00      	nop

00024e34 <InitHashDrv>:
   24e34:	b1e8      	cbz	r0, 24e72 <InitHashDrv+0x3e>
   24e36:	b510      	push	{r4, lr}
   24e38:	6804      	ldr	r4, [r0, #0]
   24e3a:	2c01      	cmp	r4, #1
   24e3c:	d004      	beq.n	24e48 <InitHashDrv+0x14>
   24e3e:	2c02      	cmp	r4, #2
   24e40:	d010      	beq.n	24e64 <InitHashDrv+0x30>
   24e42:	b144      	cbz	r4, 24e56 <InitHashDrv+0x22>
   24e44:	480c      	ldr	r0, [pc, #48]	; (24e78 <InitHashDrv+0x44>)
   24e46:	bd10      	pop	{r4, pc}
   24e48:	490c      	ldr	r1, [pc, #48]	; (24e7c <InitHashDrv+0x48>)
   24e4a:	2220      	movs	r2, #32
   24e4c:	3008      	adds	r0, #8
   24e4e:	f7ff ff15 	bl	24c7c <CC_PalMemCopyPlat>
   24e52:	2000      	movs	r0, #0
   24e54:	bd10      	pop	{r4, pc}
   24e56:	490a      	ldr	r1, [pc, #40]	; (24e80 <InitHashDrv+0x4c>)
   24e58:	2214      	movs	r2, #20
   24e5a:	3008      	adds	r0, #8
   24e5c:	f7ff ff0e 	bl	24c7c <CC_PalMemCopyPlat>
   24e60:	4620      	mov	r0, r4
   24e62:	bd10      	pop	{r4, pc}
   24e64:	4907      	ldr	r1, [pc, #28]	; (24e84 <InitHashDrv+0x50>)
   24e66:	2220      	movs	r2, #32
   24e68:	3008      	adds	r0, #8
   24e6a:	f7ff ff07 	bl	24c7c <CC_PalMemCopyPlat>
   24e6e:	2000      	movs	r0, #0
   24e70:	bd10      	pop	{r4, pc}
   24e72:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   24e76:	4770      	bx	lr
   24e78:	00f30001 	.word	0x00f30001
   24e7c:	0002f3bc 	.word	0x0002f3bc
   24e80:	0002f388 	.word	0x0002f388
   24e84:	0002f39c 	.word	0x0002f39c

00024e88 <ProcessHashDrv>:
   24e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24e8c:	2900      	cmp	r1, #0
   24e8e:	f000 80ef 	beq.w	25070 <ProcessHashDrv+0x1e8>
   24e92:	4604      	mov	r4, r0
   24e94:	2800      	cmp	r0, #0
   24e96:	f000 80ef 	beq.w	25078 <ProcessHashDrv+0x1f0>
   24e9a:	6803      	ldr	r3, [r0, #0]
   24e9c:	4617      	mov	r7, r2
   24e9e:	460e      	mov	r6, r1
   24ea0:	2b00      	cmp	r3, #0
   24ea2:	f000 80b9 	beq.w	25018 <ProcessHashDrv+0x190>
   24ea6:	3b01      	subs	r3, #1
   24ea8:	2b01      	cmp	r3, #1
   24eaa:	f200 80cd 	bhi.w	25048 <ProcessHashDrv+0x1c0>
   24eae:	4874      	ldr	r0, [pc, #464]	; (25080 <ProcessHashDrv+0x1f8>)
   24eb0:	f04f 31ff 	mov.w	r1, #4294967295
   24eb4:	f04f 0802 	mov.w	r8, #2
   24eb8:	f7fe fe02 	bl	23ac0 <CC_PalMutexLock>
   24ebc:	2800      	cmp	r0, #0
   24ebe:	f040 80b5 	bne.w	2502c <ProcessHashDrv+0x1a4>
   24ec2:	2000      	movs	r0, #0
   24ec4:	f7fe fe2c 	bl	23b20 <CC_PalPowerSaveModeSelect>
   24ec8:	4605      	mov	r5, r0
   24eca:	2800      	cmp	r0, #0
   24ecc:	f040 80b8 	bne.w	25040 <ProcessHashDrv+0x1b8>
   24ed0:	4a6c      	ldr	r2, [pc, #432]	; (25084 <ProcessHashDrv+0x1fc>)
   24ed2:	6813      	ldr	r3, [r2, #0]
   24ed4:	2b00      	cmp	r3, #0
   24ed6:	d1fc      	bne.n	24ed2 <ProcessHashDrv+0x4a>
   24ed8:	486b      	ldr	r0, [pc, #428]	; (25088 <ProcessHashDrv+0x200>)
   24eda:	6803      	ldr	r3, [r0, #0]
   24edc:	2b00      	cmp	r3, #0
   24ede:	d1fc      	bne.n	24eda <ProcessHashDrv+0x52>
   24ee0:	f04f 30ff 	mov.w	r0, #4294967295
   24ee4:	f7fe fd44 	bl	23970 <CC_HalClearInterruptBit>
   24ee8:	4b68      	ldr	r3, [pc, #416]	; (2508c <ProcessHashDrv+0x204>)
   24eea:	6818      	ldr	r0, [r3, #0]
   24eec:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   24ef0:	f7fe fd4c 	bl	2398c <CC_HalMaskInterrupt>
   24ef4:	4866      	ldr	r0, [pc, #408]	; (25090 <ProcessHashDrv+0x208>)
   24ef6:	4a67      	ldr	r2, [pc, #412]	; (25094 <ProcessHashDrv+0x20c>)
   24ef8:	4967      	ldr	r1, [pc, #412]	; (25098 <ProcessHashDrv+0x210>)
   24efa:	2301      	movs	r3, #1
   24efc:	6003      	str	r3, [r0, #0]
   24efe:	2007      	movs	r0, #7
   24f00:	6010      	str	r0, [r2, #0]
   24f02:	600b      	str	r3, [r1, #0]
   24f04:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   24f08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   24f0a:	6013      	str	r3, [r2, #0]
   24f0c:	4b63      	ldr	r3, [pc, #396]	; (2509c <ProcessHashDrv+0x214>)
   24f0e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   24f10:	6051      	str	r1, [r2, #4]
   24f12:	f8c3 8000 	str.w	r8, [r3]
   24f16:	6823      	ldr	r3, [r4, #0]
   24f18:	b15b      	cbz	r3, 24f32 <ProcessHashDrv+0xaa>
   24f1a:	3b01      	subs	r3, #1
   24f1c:	2b01      	cmp	r3, #1
   24f1e:	d817      	bhi.n	24f50 <ProcessHashDrv+0xc8>
   24f20:	4b5f      	ldr	r3, [pc, #380]	; (250a0 <ProcessHashDrv+0x218>)
   24f22:	6a62      	ldr	r2, [r4, #36]	; 0x24
   24f24:	601a      	str	r2, [r3, #0]
   24f26:	6a22      	ldr	r2, [r4, #32]
   24f28:	f843 2c04 	str.w	r2, [r3, #-4]
   24f2c:	69e2      	ldr	r2, [r4, #28]
   24f2e:	f843 2c08 	str.w	r2, [r3, #-8]
   24f32:	4b5c      	ldr	r3, [pc, #368]	; (250a4 <ProcessHashDrv+0x21c>)
   24f34:	69a2      	ldr	r2, [r4, #24]
   24f36:	601a      	str	r2, [r3, #0]
   24f38:	6962      	ldr	r2, [r4, #20]
   24f3a:	f843 2c04 	str.w	r2, [r3, #-4]
   24f3e:	6922      	ldr	r2, [r4, #16]
   24f40:	f843 2c08 	str.w	r2, [r3, #-8]
   24f44:	68e2      	ldr	r2, [r4, #12]
   24f46:	f843 2c0c 	str.w	r2, [r3, #-12]
   24f4a:	68a2      	ldr	r2, [r4, #8]
   24f4c:	f843 2c10 	str.w	r2, [r3, #-16]
   24f50:	4a55      	ldr	r2, [pc, #340]	; (250a8 <ProcessHashDrv+0x220>)
   24f52:	6813      	ldr	r3, [r2, #0]
   24f54:	2b00      	cmp	r3, #0
   24f56:	d1fc      	bne.n	24f52 <ProcessHashDrv+0xca>
   24f58:	2f00      	cmp	r7, #0
   24f5a:	d059      	beq.n	25010 <ProcessHashDrv+0x188>
   24f5c:	6863      	ldr	r3, [r4, #4]
   24f5e:	2b01      	cmp	r3, #1
   24f60:	bf04      	itt	eq
   24f62:	4a52      	ldreq	r2, [pc, #328]	; (250ac <ProcessHashDrv+0x224>)
   24f64:	6013      	streq	r3, [r2, #0]
   24f66:	4a52      	ldr	r2, [pc, #328]	; (250b0 <ProcessHashDrv+0x228>)
   24f68:	4b52      	ldr	r3, [pc, #328]	; (250b4 <ProcessHashDrv+0x22c>)
   24f6a:	6831      	ldr	r1, [r6, #0]
   24f6c:	6011      	str	r1, [r2, #0]
   24f6e:	2040      	movs	r0, #64	; 0x40
   24f70:	601f      	str	r7, [r3, #0]
   24f72:	f7fe fd11 	bl	23998 <CC_HalWaitInterrupt>
   24f76:	4605      	mov	r5, r0
   24f78:	4a4b      	ldr	r2, [pc, #300]	; (250a8 <ProcessHashDrv+0x220>)
   24f7a:	6813      	ldr	r3, [r2, #0]
   24f7c:	2b00      	cmp	r3, #0
   24f7e:	d1fc      	bne.n	24f7a <ProcessHashDrv+0xf2>
   24f80:	4a41      	ldr	r2, [pc, #260]	; (25088 <ProcessHashDrv+0x200>)
   24f82:	6813      	ldr	r3, [r2, #0]
   24f84:	2b00      	cmp	r3, #0
   24f86:	d1fc      	bne.n	24f82 <ProcessHashDrv+0xfa>
   24f88:	6823      	ldr	r3, [r4, #0]
   24f8a:	b15b      	cbz	r3, 24fa4 <ProcessHashDrv+0x11c>
   24f8c:	3b01      	subs	r3, #1
   24f8e:	2b01      	cmp	r3, #1
   24f90:	d817      	bhi.n	24fc2 <ProcessHashDrv+0x13a>
   24f92:	4a43      	ldr	r2, [pc, #268]	; (250a0 <ProcessHashDrv+0x218>)
   24f94:	4b48      	ldr	r3, [pc, #288]	; (250b8 <ProcessHashDrv+0x230>)
   24f96:	6812      	ldr	r2, [r2, #0]
   24f98:	6262      	str	r2, [r4, #36]	; 0x24
   24f9a:	681a      	ldr	r2, [r3, #0]
   24f9c:	6222      	str	r2, [r4, #32]
   24f9e:	3b04      	subs	r3, #4
   24fa0:	681b      	ldr	r3, [r3, #0]
   24fa2:	61e3      	str	r3, [r4, #28]
   24fa4:	4a3f      	ldr	r2, [pc, #252]	; (250a4 <ProcessHashDrv+0x21c>)
   24fa6:	4b45      	ldr	r3, [pc, #276]	; (250bc <ProcessHashDrv+0x234>)
   24fa8:	6812      	ldr	r2, [r2, #0]
   24faa:	61a2      	str	r2, [r4, #24]
   24fac:	681a      	ldr	r2, [r3, #0]
   24fae:	6162      	str	r2, [r4, #20]
   24fb0:	f853 2c04 	ldr.w	r2, [r3, #-4]
   24fb4:	6122      	str	r2, [r4, #16]
   24fb6:	f853 2c08 	ldr.w	r2, [r3, #-8]
   24fba:	60e2      	str	r2, [r4, #12]
   24fbc:	3b0c      	subs	r3, #12
   24fbe:	681b      	ldr	r3, [r3, #0]
   24fc0:	60a3      	str	r3, [r4, #8]
   24fc2:	4b3f      	ldr	r3, [pc, #252]	; (250c0 <ProcessHashDrv+0x238>)
   24fc4:	4a3f      	ldr	r2, [pc, #252]	; (250c4 <ProcessHashDrv+0x23c>)
   24fc6:	681b      	ldr	r3, [r3, #0]
   24fc8:	64a3      	str	r3, [r4, #72]	; 0x48
   24fca:	6812      	ldr	r2, [r2, #0]
   24fcc:	4b32      	ldr	r3, [pc, #200]	; (25098 <ProcessHashDrv+0x210>)
   24fce:	64e2      	str	r2, [r4, #76]	; 0x4c
   24fd0:	4836      	ldr	r0, [pc, #216]	; (250ac <ProcessHashDrv+0x224>)
   24fd2:	493d      	ldr	r1, [pc, #244]	; (250c8 <ProcessHashDrv+0x240>)
   24fd4:	2201      	movs	r2, #1
   24fd6:	601a      	str	r2, [r3, #0]
   24fd8:	2300      	movs	r3, #0
   24fda:	4a33      	ldr	r2, [pc, #204]	; (250a8 <ProcessHashDrv+0x220>)
   24fdc:	6003      	str	r3, [r0, #0]
   24fde:	600b      	str	r3, [r1, #0]
   24fe0:	6813      	ldr	r3, [r2, #0]
   24fe2:	2b00      	cmp	r3, #0
   24fe4:	d1fc      	bne.n	24fe0 <ProcessHashDrv+0x158>
   24fe6:	4a2a      	ldr	r2, [pc, #168]	; (25090 <ProcessHashDrv+0x208>)
   24fe8:	6013      	str	r3, [r2, #0]
   24fea:	2d00      	cmp	r5, #0
   24fec:	d13a      	bne.n	25064 <ProcessHashDrv+0x1dc>
   24fee:	4b27      	ldr	r3, [pc, #156]	; (2508c <ProcessHashDrv+0x204>)
   24ff0:	6818      	ldr	r0, [r3, #0]
   24ff2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   24ff6:	f7fe fcc9 	bl	2398c <CC_HalMaskInterrupt>
   24ffa:	2001      	movs	r0, #1
   24ffc:	f7fe fd90 	bl	23b20 <CC_PalPowerSaveModeSelect>
   25000:	bb60      	cbnz	r0, 2505c <ProcessHashDrv+0x1d4>
   25002:	481f      	ldr	r0, [pc, #124]	; (25080 <ProcessHashDrv+0x1f8>)
   25004:	f7fe fd64 	bl	23ad0 <CC_PalMutexUnlock>
   25008:	bb10      	cbnz	r0, 25050 <ProcessHashDrv+0x1c8>
   2500a:	4628      	mov	r0, r5
   2500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25010:	4b2d      	ldr	r3, [pc, #180]	; (250c8 <ProcessHashDrv+0x240>)
   25012:	2204      	movs	r2, #4
   25014:	601a      	str	r2, [r3, #0]
   25016:	e7af      	b.n	24f78 <ProcessHashDrv+0xf0>
   25018:	4819      	ldr	r0, [pc, #100]	; (25080 <ProcessHashDrv+0x1f8>)
   2501a:	f04f 31ff 	mov.w	r1, #4294967295
   2501e:	f04f 0801 	mov.w	r8, #1
   25022:	f7fe fd4d 	bl	23ac0 <CC_PalMutexLock>
   25026:	2800      	cmp	r0, #0
   25028:	f43f af4b 	beq.w	24ec2 <ProcessHashDrv+0x3a>
   2502c:	4827      	ldr	r0, [pc, #156]	; (250cc <ProcessHashDrv+0x244>)
   2502e:	f7fe f9b1 	bl	23394 <CC_PalAbort>
   25032:	2000      	movs	r0, #0
   25034:	f7fe fd74 	bl	23b20 <CC_PalPowerSaveModeSelect>
   25038:	4605      	mov	r5, r0
   2503a:	2800      	cmp	r0, #0
   2503c:	f43f af48 	beq.w	24ed0 <ProcessHashDrv+0x48>
   25040:	4823      	ldr	r0, [pc, #140]	; (250d0 <ProcessHashDrv+0x248>)
   25042:	f7fe f9a7 	bl	23394 <CC_PalAbort>
   25046:	e743      	b.n	24ed0 <ProcessHashDrv+0x48>
   25048:	4d22      	ldr	r5, [pc, #136]	; (250d4 <ProcessHashDrv+0x24c>)
   2504a:	4628      	mov	r0, r5
   2504c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25050:	4821      	ldr	r0, [pc, #132]	; (250d8 <ProcessHashDrv+0x250>)
   25052:	f7fe f99f 	bl	23394 <CC_PalAbort>
   25056:	4628      	mov	r0, r5
   25058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2505c:	481f      	ldr	r0, [pc, #124]	; (250dc <ProcessHashDrv+0x254>)
   2505e:	f7fe f999 	bl	23394 <CC_PalAbort>
   25062:	e7ce      	b.n	25002 <ProcessHashDrv+0x17a>
   25064:	f104 0008 	add.w	r0, r4, #8
   25068:	2110      	movs	r1, #16
   2506a:	f7ff fe0b 	bl	24c84 <CC_PalMemSetZeroPlat>
   2506e:	e7be      	b.n	24fee <ProcessHashDrv+0x166>
   25070:	4d1b      	ldr	r5, [pc, #108]	; (250e0 <ProcessHashDrv+0x258>)
   25072:	4628      	mov	r0, r5
   25074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25078:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   2507c:	e7c5      	b.n	2500a <ProcessHashDrv+0x182>
   2507e:	bf00      	nop
   25080:	20000704 	.word	0x20000704
   25084:	5002b91c 	.word	0x5002b91c
   25088:	5002bc20 	.word	0x5002bc20
   2508c:	5002ba04 	.word	0x5002ba04
   25090:	5002b818 	.word	0x5002b818
   25094:	5002b900 	.word	0x5002b900
   25098:	5002b7c4 	.word	0x5002b7c4
   2509c:	5002b7c0 	.word	0x5002b7c0
   250a0:	5002b65c 	.word	0x5002b65c
   250a4:	5002b650 	.word	0x5002b650
   250a8:	5002b910 	.word	0x5002b910
   250ac:	5002b684 	.word	0x5002b684
   250b0:	5002bc28 	.word	0x5002bc28
   250b4:	5002bc2c 	.word	0x5002bc2c
   250b8:	5002b658 	.word	0x5002b658
   250bc:	5002b64c 	.word	0x5002b64c
   250c0:	5002b7cc 	.word	0x5002b7cc
   250c4:	5002b7d0 	.word	0x5002b7d0
   250c8:	5002b7c8 	.word	0x5002b7c8
   250cc:	0002f2d0 	.word	0x0002f2d0
   250d0:	0002f2e8 	.word	0x0002f2e8
   250d4:	00f30001 	.word	0x00f30001
   250d8:	0002f328 	.word	0x0002f328
   250dc:	0002f308 	.word	0x0002f308
   250e0:	00f30003 	.word	0x00f30003

000250e4 <FinishHashDrv>:
   250e4:	2800      	cmp	r0, #0
   250e6:	d03b      	beq.n	25160 <FinishHashDrv+0x7c>
   250e8:	b4f0      	push	{r4, r5, r6, r7}
   250ea:	b082      	sub	sp, #8
   250ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
   250ee:	9301      	str	r3, [sp, #4]
   250f0:	6883      	ldr	r3, [r0, #8]
   250f2:	fa93 fc83 	rev.w	ip, r3
   250f6:	9b01      	ldr	r3, [sp, #4]
   250f8:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   250fc:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   25100:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   25104:	ba1b      	rev	r3, r3
   25106:	6243      	str	r3, [r0, #36]	; 0x24
   25108:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2510a:	9301      	str	r3, [sp, #4]
   2510c:	ba09      	rev	r1, r1
   2510e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   25110:	61c1      	str	r1, [r0, #28]
   25112:	ba12      	rev	r2, r2
   25114:	6202      	str	r2, [r0, #32]
   25116:	ba3f      	rev	r7, r7
   25118:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   2511c:	ba36      	rev	r6, r6
   2511e:	ba2d      	rev	r5, r5
   25120:	ba24      	rev	r4, r4
   25122:	e9c0 c702 	strd	ip, r7, [r0, #8]
   25126:	e9c0 6504 	strd	r6, r5, [r0, #16]
   2512a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   2512c:	6b06      	ldr	r6, [r0, #48]	; 0x30
   2512e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   25130:	6184      	str	r4, [r0, #24]
   25132:	fa93 fc83 	rev.w	ip, r3
   25136:	6b84      	ldr	r4, [r0, #56]	; 0x38
   25138:	9b01      	ldr	r3, [sp, #4]
   2513a:	ba3f      	rev	r7, r7
   2513c:	ba36      	rev	r6, r6
   2513e:	ba2d      	rev	r5, r5
   25140:	ba24      	rev	r4, r4
   25142:	ba09      	rev	r1, r1
   25144:	ba12      	rev	r2, r2
   25146:	ba1b      	rev	r3, r3
   25148:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   2514c:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   25150:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   25154:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   25158:	2000      	movs	r0, #0
   2515a:	b002      	add	sp, #8
   2515c:	bcf0      	pop	{r4, r5, r6, r7}
   2515e:	4770      	bx	lr
   25160:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   25164:	4770      	bx	lr
   25166:	bf00      	nop

00025168 <cc_mbedtls_aes_init>:
   25168:	b510      	push	{r4, lr}
   2516a:	4604      	mov	r4, r0
   2516c:	b130      	cbz	r0, 2517c <cc_mbedtls_aes_init+0x14>
   2516e:	2200      	movs	r2, #0
   25170:	2301      	movs	r3, #1
   25172:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   25176:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2517a:	bd10      	pop	{r4, pc}
   2517c:	4801      	ldr	r0, [pc, #4]	; (25184 <cc_mbedtls_aes_init+0x1c>)
   2517e:	f7fe f909 	bl	23394 <CC_PalAbort>
   25182:	e7f4      	b.n	2516e <cc_mbedtls_aes_init+0x6>
   25184:	0002f3dc 	.word	0x0002f3dc

00025188 <cc_mbedtls_aes_free>:
   25188:	b118      	cbz	r0, 25192 <cc_mbedtls_aes_free+0xa>
   2518a:	2274      	movs	r2, #116	; 0x74
   2518c:	2100      	movs	r1, #0
   2518e:	f7ff bd77 	b.w	24c80 <CC_PalMemSetPlat>
   25192:	4770      	bx	lr

00025194 <cc_mbedtls_aes_setkey_enc>:
   25194:	b190      	cbz	r0, 251bc <cc_mbedtls_aes_setkey_enc+0x28>
   25196:	b1a1      	cbz	r1, 251c2 <cc_mbedtls_aes_setkey_enc+0x2e>
   25198:	b510      	push	{r4, lr}
   2519a:	2a80      	cmp	r2, #128	; 0x80
   2519c:	f04f 0400 	mov.w	r4, #0
   251a0:	6384      	str	r4, [r0, #56]	; 0x38
   251a2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   251a6:	d106      	bne.n	251b6 <cc_mbedtls_aes_setkey_enc+0x22>
   251a8:	6304      	str	r4, [r0, #48]	; 0x30
   251aa:	2210      	movs	r2, #16
   251ac:	3010      	adds	r0, #16
   251ae:	f7ff fd65 	bl	24c7c <CC_PalMemCopyPlat>
   251b2:	4620      	mov	r0, r4
   251b4:	bd10      	pop	{r4, pc}
   251b6:	f06f 001f 	mvn.w	r0, #31
   251ba:	bd10      	pop	{r4, pc}
   251bc:	f06f 0021 	mvn.w	r0, #33	; 0x21
   251c0:	4770      	bx	lr
   251c2:	f06f 001f 	mvn.w	r0, #31
   251c6:	4770      	bx	lr

000251c8 <cc_mbedtls_aes_crypt_ecb>:
   251c8:	b320      	cbz	r0, 25214 <cc_mbedtls_aes_crypt_ecb+0x4c>
   251ca:	b31a      	cbz	r2, 25214 <cc_mbedtls_aes_crypt_ecb+0x4c>
   251cc:	b313      	cbz	r3, 25214 <cc_mbedtls_aes_crypt_ecb+0x4c>
   251ce:	2901      	cmp	r1, #1
   251d0:	d820      	bhi.n	25214 <cc_mbedtls_aes_crypt_ecb+0x4c>
   251d2:	b570      	push	{r4, r5, r6, lr}
   251d4:	4604      	mov	r4, r0
   251d6:	6b81      	ldr	r1, [r0, #56]	; 0x38
   251d8:	b086      	sub	sp, #24
   251da:	d016      	beq.n	2520a <cc_mbedtls_aes_crypt_ecb+0x42>
   251dc:	2901      	cmp	r1, #1
   251de:	d116      	bne.n	2520e <cc_mbedtls_aes_crypt_ecb+0x46>
   251e0:	2100      	movs	r1, #0
   251e2:	2510      	movs	r5, #16
   251e4:	ae04      	add	r6, sp, #16
   251e6:	6361      	str	r1, [r4, #52]	; 0x34
   251e8:	4610      	mov	r0, r2
   251ea:	e9cd 5600 	strd	r5, r6, [sp]
   251ee:	aa02      	add	r2, sp, #8
   251f0:	4629      	mov	r1, r5
   251f2:	f7ff fdeb 	bl	24dcc <SetDataBuffersInfo>
   251f6:	b950      	cbnz	r0, 2520e <cc_mbedtls_aes_crypt_ecb+0x46>
   251f8:	462b      	mov	r3, r5
   251fa:	4632      	mov	r2, r6
   251fc:	a902      	add	r1, sp, #8
   251fe:	4620      	mov	r0, r4
   25200:	f000 f8d6 	bl	253b0 <ProcessAesDrv>
   25204:	b918      	cbnz	r0, 2520e <cc_mbedtls_aes_crypt_ecb+0x46>
   25206:	b006      	add	sp, #24
   25208:	bd70      	pop	{r4, r5, r6, pc}
   2520a:	2900      	cmp	r1, #0
   2520c:	d0e8      	beq.n	251e0 <cc_mbedtls_aes_crypt_ecb+0x18>
   2520e:	f06f 0021 	mvn.w	r0, #33	; 0x21
   25212:	e7f8      	b.n	25206 <cc_mbedtls_aes_crypt_ecb+0x3e>
   25214:	f06f 0021 	mvn.w	r0, #33	; 0x21
   25218:	4770      	bx	lr
   2521a:	bf00      	nop

0002521c <CC_PalDataBufferAttrGet>:
   2521c:	2000      	movs	r0, #0
   2521e:	7018      	strb	r0, [r3, #0]
   25220:	4770      	bx	lr
   25222:	bf00      	nop

00025224 <LoadAesKey>:
   25224:	2800      	cmp	r0, #0
   25226:	d03b      	beq.n	252a0 <LoadAesKey+0x7c>
   25228:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2522c:	2b00      	cmp	r3, #0
   2522e:	d02c      	beq.n	2528a <LoadAesKey+0x66>
   25230:	2b03      	cmp	r3, #3
   25232:	b510      	push	{r4, lr}
   25234:	d00f      	beq.n	25256 <LoadAesKey+0x32>
   25236:	481c      	ldr	r0, [pc, #112]	; (252a8 <LoadAesKey+0x84>)
   25238:	4c1c      	ldr	r4, [pc, #112]	; (252ac <LoadAesKey+0x88>)
   2523a:	6822      	ldr	r2, [r4, #0]
   2523c:	4b1c      	ldr	r3, [pc, #112]	; (252b0 <LoadAesKey+0x8c>)
   2523e:	6812      	ldr	r2, [r2, #0]
   25240:	601a      	str	r2, [r3, #0]
   25242:	6822      	ldr	r2, [r4, #0]
   25244:	6852      	ldr	r2, [r2, #4]
   25246:	605a      	str	r2, [r3, #4]
   25248:	6822      	ldr	r2, [r4, #0]
   2524a:	6892      	ldr	r2, [r2, #8]
   2524c:	609a      	str	r2, [r3, #8]
   2524e:	6822      	ldr	r2, [r4, #0]
   25250:	68d2      	ldr	r2, [r2, #12]
   25252:	60da      	str	r2, [r3, #12]
   25254:	bd10      	pop	{r4, pc}
   25256:	6b01      	ldr	r1, [r0, #48]	; 0x30
   25258:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2525a:	4c14      	ldr	r4, [pc, #80]	; (252ac <LoadAesKey+0x88>)
   2525c:	f000 fba4 	bl	259a8 <kmu_validate_kdr_slot_and_size>
   25260:	2800      	cmp	r0, #0
   25262:	d1ea      	bne.n	2523a <LoadAesKey+0x16>
   25264:	6821      	ldr	r1, [r4, #0]
   25266:	4a12      	ldr	r2, [pc, #72]	; (252b0 <LoadAesKey+0x8c>)
   25268:	6809      	ldr	r1, [r1, #0]
   2526a:	6011      	str	r1, [r2, #0]
   2526c:	6821      	ldr	r1, [r4, #0]
   2526e:	4b11      	ldr	r3, [pc, #68]	; (252b4 <LoadAesKey+0x90>)
   25270:	6849      	ldr	r1, [r1, #4]
   25272:	6019      	str	r1, [r3, #0]
   25274:	6821      	ldr	r1, [r4, #0]
   25276:	6889      	ldr	r1, [r1, #8]
   25278:	6091      	str	r1, [r2, #8]
   2527a:	6822      	ldr	r2, [r4, #0]
   2527c:	68d2      	ldr	r2, [r2, #12]
   2527e:	609a      	str	r2, [r3, #8]
   25280:	f000 fb9e 	bl	259c0 <kmu_use_kdr_key>
   25284:	2800      	cmp	r0, #0
   25286:	d1d8      	bne.n	2523a <LoadAesKey+0x16>
   25288:	bd10      	pop	{r4, pc}
   2528a:	4a09      	ldr	r2, [pc, #36]	; (252b0 <LoadAesKey+0x8c>)
   2528c:	6901      	ldr	r1, [r0, #16]
   2528e:	6011      	str	r1, [r2, #0]
   25290:	6941      	ldr	r1, [r0, #20]
   25292:	6051      	str	r1, [r2, #4]
   25294:	6981      	ldr	r1, [r0, #24]
   25296:	6091      	str	r1, [r2, #8]
   25298:	69c1      	ldr	r1, [r0, #28]
   2529a:	60d1      	str	r1, [r2, #12]
   2529c:	4618      	mov	r0, r3
   2529e:	4770      	bx	lr
   252a0:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   252a4:	4770      	bx	lr
   252a6:	bf00      	nop
   252a8:	00f10009 	.word	0x00f10009
   252ac:	200006f4 	.word	0x200006f4
   252b0:	5002b400 	.word	0x5002b400
   252b4:	5002b404 	.word	0x5002b404

000252b8 <InitAes.part.0>:
   252b8:	4a32      	ldr	r2, [pc, #200]	; (25384 <InitAes.part.0+0xcc>)
   252ba:	b510      	push	{r4, lr}
   252bc:	4604      	mov	r4, r0
   252be:	6813      	ldr	r3, [r2, #0]
   252c0:	2b00      	cmp	r3, #0
   252c2:	d1fc      	bne.n	252be <InitAes.part.0+0x6>
   252c4:	4a30      	ldr	r2, [pc, #192]	; (25388 <InitAes.part.0+0xd0>)
   252c6:	6813      	ldr	r3, [r2, #0]
   252c8:	2b00      	cmp	r3, #0
   252ca:	d1fc      	bne.n	252c6 <InitAes.part.0+0xe>
   252cc:	4a2f      	ldr	r2, [pc, #188]	; (2538c <InitAes.part.0+0xd4>)
   252ce:	6813      	ldr	r3, [r2, #0]
   252d0:	2b00      	cmp	r3, #0
   252d2:	d1fc      	bne.n	252ce <InitAes.part.0+0x16>
   252d4:	4a2e      	ldr	r2, [pc, #184]	; (25390 <InitAes.part.0+0xd8>)
   252d6:	6813      	ldr	r3, [r2, #0]
   252d8:	2b00      	cmp	r3, #0
   252da:	d1fc      	bne.n	252d6 <InitAes.part.0+0x1e>
   252dc:	4a2d      	ldr	r2, [pc, #180]	; (25394 <InitAes.part.0+0xdc>)
   252de:	6813      	ldr	r3, [r2, #0]
   252e0:	2b00      	cmp	r3, #0
   252e2:	d1fc      	bne.n	252de <InitAes.part.0+0x26>
   252e4:	4a2c      	ldr	r2, [pc, #176]	; (25398 <InitAes.part.0+0xe0>)
   252e6:	6813      	ldr	r3, [r2, #0]
   252e8:	2b00      	cmp	r3, #0
   252ea:	d1fc      	bne.n	252e6 <InitAes.part.0+0x2e>
   252ec:	f04f 30ff 	mov.w	r0, #4294967295
   252f0:	f7fe fb3e 	bl	23970 <CC_HalClearInterruptBit>
   252f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   252f6:	f023 0304 	bic.w	r3, r3, #4
   252fa:	2b03      	cmp	r3, #3
   252fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   252fe:	d036      	beq.n	2536e <InitAes.part.0+0xb6>
   25300:	2b01      	cmp	r3, #1
   25302:	4b26      	ldr	r3, [pc, #152]	; (2539c <InitAes.part.0+0xe4>)
   25304:	6818      	ldr	r0, [r3, #0]
   25306:	bf0c      	ite	eq
   25308:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   2530c:	f020 0020 	bicne.w	r0, r0, #32
   25310:	f7fe fb3c 	bl	2398c <CC_HalMaskInterrupt>
   25314:	4b22      	ldr	r3, [pc, #136]	; (253a0 <InitAes.part.0+0xe8>)
   25316:	4a1b      	ldr	r2, [pc, #108]	; (25384 <InitAes.part.0+0xcc>)
   25318:	2101      	movs	r1, #1
   2531a:	6019      	str	r1, [r3, #0]
   2531c:	6813      	ldr	r3, [r2, #0]
   2531e:	2b00      	cmp	r3, #0
   25320:	d1fc      	bne.n	2531c <InitAes.part.0+0x64>
   25322:	4a19      	ldr	r2, [pc, #100]	; (25388 <InitAes.part.0+0xd0>)
   25324:	6813      	ldr	r3, [r2, #0]
   25326:	2b00      	cmp	r3, #0
   25328:	d1fc      	bne.n	25324 <InitAes.part.0+0x6c>
   2532a:	491e      	ldr	r1, [pc, #120]	; (253a4 <InitAes.part.0+0xec>)
   2532c:	4a15      	ldr	r2, [pc, #84]	; (25384 <InitAes.part.0+0xcc>)
   2532e:	600b      	str	r3, [r1, #0]
   25330:	6813      	ldr	r3, [r2, #0]
   25332:	2b00      	cmp	r3, #0
   25334:	d1fc      	bne.n	25330 <InitAes.part.0+0x78>
   25336:	4a14      	ldr	r2, [pc, #80]	; (25388 <InitAes.part.0+0xd0>)
   25338:	6813      	ldr	r3, [r2, #0]
   2533a:	2b00      	cmp	r3, #0
   2533c:	d1fc      	bne.n	25338 <InitAes.part.0+0x80>
   2533e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   25340:	f022 0104 	bic.w	r1, r2, #4
   25344:	2903      	cmp	r1, #3
   25346:	bf18      	it	ne
   25348:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2534a:	4917      	ldr	r1, [pc, #92]	; (253a8 <InitAes.part.0+0xf0>)
   2534c:	ea4f 0282 	mov.w	r2, r2, lsl #2
   25350:	bf18      	it	ne
   25352:	f003 0301 	andne.w	r3, r3, #1
   25356:	f002 021c 	and.w	r2, r2, #28
   2535a:	4313      	orrs	r3, r2
   2535c:	600b      	str	r3, [r1, #0]
   2535e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25360:	2b07      	cmp	r3, #7
   25362:	d102      	bne.n	2536a <InitAes.part.0+0xb2>
   25364:	4b11      	ldr	r3, [pc, #68]	; (253ac <InitAes.part.0+0xf4>)
   25366:	2201      	movs	r2, #1
   25368:	601a      	str	r2, [r3, #0]
   2536a:	2000      	movs	r0, #0
   2536c:	bd10      	pop	{r4, pc}
   2536e:	2b01      	cmp	r3, #1
   25370:	4b0a      	ldr	r3, [pc, #40]	; (2539c <InitAes.part.0+0xe4>)
   25372:	6818      	ldr	r0, [r3, #0]
   25374:	bf0c      	ite	eq
   25376:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2537a:	f020 0010 	bicne.w	r0, r0, #16
   2537e:	f7fe fb05 	bl	2398c <CC_HalMaskInterrupt>
   25382:	e7c7      	b.n	25314 <InitAes.part.0+0x5c>
   25384:	5002b910 	.word	0x5002b910
   25388:	5002b470 	.word	0x5002b470
   2538c:	5002bd20 	.word	0x5002bd20
   25390:	5002bc20 	.word	0x5002bc20
   25394:	5002bd38 	.word	0x5002bd38
   25398:	5002bc38 	.word	0x5002bc38
   2539c:	5002ba04 	.word	0x5002ba04
   253a0:	5002b900 	.word	0x5002b900
   253a4:	5002b4bc 	.word	0x5002b4bc
   253a8:	5002b4c0 	.word	0x5002b4c0
   253ac:	5002b47c 	.word	0x5002b47c

000253b0 <ProcessAesDrv>:
   253b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   253b4:	b087      	sub	sp, #28
   253b6:	2900      	cmp	r1, #0
   253b8:	f000 80a5 	beq.w	25506 <ProcessAesDrv+0x156>
   253bc:	4616      	mov	r6, r2
   253be:	2a00      	cmp	r2, #0
   253c0:	f000 80a1 	beq.w	25506 <ProcessAesDrv+0x156>
   253c4:	4604      	mov	r4, r0
   253c6:	2800      	cmp	r0, #0
   253c8:	f000 813f 	beq.w	2564a <ProcessAesDrv+0x29a>
   253cc:	461f      	mov	r7, r3
   253ce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   253d0:	460d      	mov	r5, r1
   253d2:	2b00      	cmp	r3, #0
   253d4:	d150      	bne.n	25478 <ProcessAesDrv+0xc8>
   253d6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   253da:	d252      	bcs.n	25482 <ProcessAesDrv+0xd2>
   253dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   253e0:	2b04      	cmp	r3, #4
   253e2:	f000 8109 	beq.w	255f8 <ProcessAesDrv+0x248>
   253e6:	f04f 0800 	mov.w	r8, #0
   253ea:	48aa      	ldr	r0, [pc, #680]	; (25694 <ProcessAesDrv+0x2e4>)
   253ec:	f04f 31ff 	mov.w	r1, #4294967295
   253f0:	f7fe fb66 	bl	23ac0 <CC_PalMutexLock>
   253f4:	2800      	cmp	r0, #0
   253f6:	f040 80de 	bne.w	255b6 <ProcessAesDrv+0x206>
   253fa:	2000      	movs	r0, #0
   253fc:	f7fe fb90 	bl	23b20 <CC_PalPowerSaveModeSelect>
   25400:	2800      	cmp	r0, #0
   25402:	f040 80e1 	bne.w	255c8 <ProcessAesDrv+0x218>
   25406:	4ba4      	ldr	r3, [pc, #656]	; (25698 <ProcessAesDrv+0x2e8>)
   25408:	4aa4      	ldr	r2, [pc, #656]	; (2569c <ProcessAesDrv+0x2ec>)
   2540a:	2101      	movs	r1, #1
   2540c:	6019      	str	r1, [r3, #0]
   2540e:	6813      	ldr	r3, [r2, #0]
   25410:	2b00      	cmp	r3, #0
   25412:	d1fc      	bne.n	2540e <ProcessAesDrv+0x5e>
   25414:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25416:	2b03      	cmp	r3, #3
   25418:	dc39      	bgt.n	2548e <ProcessAesDrv+0xde>
   2541a:	2b00      	cmp	r3, #0
   2541c:	da3a      	bge.n	25494 <ProcessAesDrv+0xe4>
   2541e:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 256e8 <ProcessAesDrv+0x338>
   25422:	4a9e      	ldr	r2, [pc, #632]	; (2569c <ProcessAesDrv+0x2ec>)
   25424:	6813      	ldr	r3, [r2, #0]
   25426:	2b00      	cmp	r3, #0
   25428:	d1fc      	bne.n	25424 <ProcessAesDrv+0x74>
   2542a:	f1b8 0f00 	cmp.w	r8, #0
   2542e:	f040 80da 	bne.w	255e6 <ProcessAesDrv+0x236>
   25432:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25434:	f023 0304 	bic.w	r3, r3, #4
   25438:	2b03      	cmp	r3, #3
   2543a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2543c:	d058      	beq.n	254f0 <ProcessAesDrv+0x140>
   2543e:	2b01      	cmp	r3, #1
   25440:	4b97      	ldr	r3, [pc, #604]	; (256a0 <ProcessAesDrv+0x2f0>)
   25442:	6818      	ldr	r0, [r3, #0]
   25444:	bf0c      	ite	eq
   25446:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2544a:	f040 0020 	orrne.w	r0, r0, #32
   2544e:	f7fe fa9d 	bl	2398c <CC_HalMaskInterrupt>
   25452:	4b91      	ldr	r3, [pc, #580]	; (25698 <ProcessAesDrv+0x2e8>)
   25454:	2200      	movs	r2, #0
   25456:	601a      	str	r2, [r3, #0]
   25458:	2001      	movs	r0, #1
   2545a:	f7fe fb61 	bl	23b20 <CC_PalPowerSaveModeSelect>
   2545e:	2800      	cmp	r0, #0
   25460:	f040 80bd 	bne.w	255de <ProcessAesDrv+0x22e>
   25464:	488b      	ldr	r0, [pc, #556]	; (25694 <ProcessAesDrv+0x2e4>)
   25466:	f7fe fb33 	bl	23ad0 <CC_PalMutexUnlock>
   2546a:	2800      	cmp	r0, #0
   2546c:	f040 80b0 	bne.w	255d0 <ProcessAesDrv+0x220>
   25470:	4648      	mov	r0, r9
   25472:	b007      	add	sp, #28
   25474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25478:	2b01      	cmp	r3, #1
   2547a:	d1af      	bne.n	253dc <ProcessAesDrv+0x2c>
   2547c:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   25480:	d3ac      	bcc.n	253dc <ProcessAesDrv+0x2c>
   25482:	f8df 9268 	ldr.w	r9, [pc, #616]	; 256ec <ProcessAesDrv+0x33c>
   25486:	4648      	mov	r0, r9
   25488:	b007      	add	sp, #28
   2548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2548e:	3b06      	subs	r3, #6
   25490:	2b01      	cmp	r3, #1
   25492:	d8c4      	bhi.n	2541e <ProcessAesDrv+0x6e>
   25494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   25496:	2b01      	cmp	r3, #1
   25498:	f200 80d4 	bhi.w	25644 <ProcessAesDrv+0x294>
   2549c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2549e:	2b01      	cmp	r3, #1
   254a0:	d837      	bhi.n	25512 <ProcessAesDrv+0x162>
   254a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   254a4:	2b01      	cmp	r3, #1
   254a6:	f200 8131 	bhi.w	2570c <ProcessAesDrv+0x35c>
   254aa:	4620      	mov	r0, r4
   254ac:	f7ff ff04 	bl	252b8 <InitAes.part.0>
   254b0:	4681      	mov	r9, r0
   254b2:	2800      	cmp	r0, #0
   254b4:	d1b5      	bne.n	25422 <ProcessAesDrv+0x72>
   254b6:	4620      	mov	r0, r4
   254b8:	f7ff feb4 	bl	25224 <LoadAesKey>
   254bc:	4681      	mov	r9, r0
   254be:	2800      	cmp	r0, #0
   254c0:	d1af      	bne.n	25422 <ProcessAesDrv+0x72>
   254c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   254c4:	2b07      	cmp	r3, #7
   254c6:	d8aa      	bhi.n	2541e <ProcessAesDrv+0x6e>
   254c8:	a201      	add	r2, pc, #4	; (adr r2, 254d0 <ProcessAesDrv+0x120>)
   254ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   254ce:	bf00      	nop
   254d0:	0002552d 	.word	0x0002552d
   254d4:	00025519 	.word	0x00025519
   254d8:	00025689 	.word	0x00025689
   254dc:	00025519 	.word	0x00025519
   254e0:	0002541f 	.word	0x0002541f
   254e4:	0002541f 	.word	0x0002541f
   254e8:	00025689 	.word	0x00025689
   254ec:	00025519 	.word	0x00025519
   254f0:	2b01      	cmp	r3, #1
   254f2:	4b6b      	ldr	r3, [pc, #428]	; (256a0 <ProcessAesDrv+0x2f0>)
   254f4:	6818      	ldr	r0, [r3, #0]
   254f6:	bf0c      	ite	eq
   254f8:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   254fc:	f040 0010 	orrne.w	r0, r0, #16
   25500:	f7fe fa44 	bl	2398c <CC_HalMaskInterrupt>
   25504:	e7a5      	b.n	25452 <ProcessAesDrv+0xa2>
   25506:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 256f0 <ProcessAesDrv+0x340>
   2550a:	4648      	mov	r0, r9
   2550c:	b007      	add	sp, #28
   2550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25512:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 256f4 <ProcessAesDrv+0x344>
   25516:	e784      	b.n	25422 <ProcessAesDrv+0x72>
   25518:	4b62      	ldr	r3, [pc, #392]	; (256a4 <ProcessAesDrv+0x2f4>)
   2551a:	6822      	ldr	r2, [r4, #0]
   2551c:	601a      	str	r2, [r3, #0]
   2551e:	6862      	ldr	r2, [r4, #4]
   25520:	605a      	str	r2, [r3, #4]
   25522:	68a2      	ldr	r2, [r4, #8]
   25524:	609a      	str	r2, [r3, #8]
   25526:	68e2      	ldr	r2, [r4, #12]
   25528:	60da      	str	r2, [r3, #12]
   2552a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2552c:	682a      	ldr	r2, [r5, #0]
   2552e:	f023 0304 	bic.w	r3, r3, #4
   25532:	2b03      	cmp	r3, #3
   25534:	d009      	beq.n	2554a <ProcessAesDrv+0x19a>
   25536:	6e21      	ldr	r1, [r4, #96]	; 0x60
   25538:	6833      	ldr	r3, [r6, #0]
   2553a:	2901      	cmp	r1, #1
   2553c:	bf07      	ittee	eq
   2553e:	485a      	ldreq	r0, [pc, #360]	; (256a8 <ProcessAesDrv+0x2f8>)
   25540:	495a      	ldreq	r1, [pc, #360]	; (256ac <ProcessAesDrv+0x2fc>)
   25542:	485b      	ldrne	r0, [pc, #364]	; (256b0 <ProcessAesDrv+0x300>)
   25544:	495b      	ldrne	r1, [pc, #364]	; (256b4 <ProcessAesDrv+0x304>)
   25546:	6003      	str	r3, [r0, #0]
   25548:	600f      	str	r7, [r1, #0]
   2554a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2554c:	2b01      	cmp	r3, #1
   2554e:	bf0b      	itete	eq
   25550:	4b59      	ldreq	r3, [pc, #356]	; (256b8 <ProcessAesDrv+0x308>)
   25552:	4b5a      	ldrne	r3, [pc, #360]	; (256bc <ProcessAesDrv+0x30c>)
   25554:	495a      	ldreq	r1, [pc, #360]	; (256c0 <ProcessAesDrv+0x310>)
   25556:	495b      	ldrne	r1, [pc, #364]	; (256c4 <ProcessAesDrv+0x314>)
   25558:	600a      	str	r2, [r1, #0]
   2555a:	601f      	str	r7, [r3, #0]
   2555c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2555e:	f023 0304 	bic.w	r3, r3, #4
   25562:	2b03      	cmp	r3, #3
   25564:	d074      	beq.n	25650 <ProcessAesDrv+0x2a0>
   25566:	6e23      	ldr	r3, [r4, #96]	; 0x60
   25568:	2b01      	cmp	r3, #1
   2556a:	bf0c      	ite	eq
   2556c:	2080      	moveq	r0, #128	; 0x80
   2556e:	2020      	movne	r0, #32
   25570:	f7fe fa12 	bl	23998 <CC_HalWaitInterrupt>
   25574:	4681      	mov	r9, r0
   25576:	2800      	cmp	r0, #0
   25578:	f47f af53 	bne.w	25422 <ProcessAesDrv+0x72>
   2557c:	4b47      	ldr	r3, [pc, #284]	; (2569c <ProcessAesDrv+0x2ec>)
   2557e:	681a      	ldr	r2, [r3, #0]
   25580:	2a00      	cmp	r2, #0
   25582:	d1fc      	bne.n	2557e <ProcessAesDrv+0x1ce>
   25584:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25586:	3b01      	subs	r3, #1
   25588:	4691      	mov	r9, r2
   2558a:	2b06      	cmp	r3, #6
   2558c:	d810      	bhi.n	255b0 <ProcessAesDrv+0x200>
   2558e:	e8df f003 	tbb	[pc, r3]
   25592:	7d04      	.short	0x7d04
   25594:	7d0f0f04 	.word	0x7d0f0f04
   25598:	04          	.byte	0x04
   25599:	00          	.byte	0x00
   2559a:	4a42      	ldr	r2, [pc, #264]	; (256a4 <ProcessAesDrv+0x2f4>)
   2559c:	4b4a      	ldr	r3, [pc, #296]	; (256c8 <ProcessAesDrv+0x318>)
   2559e:	6812      	ldr	r2, [r2, #0]
   255a0:	6022      	str	r2, [r4, #0]
   255a2:	681a      	ldr	r2, [r3, #0]
   255a4:	6062      	str	r2, [r4, #4]
   255a6:	685a      	ldr	r2, [r3, #4]
   255a8:	60a2      	str	r2, [r4, #8]
   255aa:	3308      	adds	r3, #8
   255ac:	681b      	ldr	r3, [r3, #0]
   255ae:	60e3      	str	r3, [r4, #12]
   255b0:	2301      	movs	r3, #1
   255b2:	65a3      	str	r3, [r4, #88]	; 0x58
   255b4:	e735      	b.n	25422 <ProcessAesDrv+0x72>
   255b6:	4845      	ldr	r0, [pc, #276]	; (256cc <ProcessAesDrv+0x31c>)
   255b8:	f7fd feec 	bl	23394 <CC_PalAbort>
   255bc:	2000      	movs	r0, #0
   255be:	f7fe faaf 	bl	23b20 <CC_PalPowerSaveModeSelect>
   255c2:	2800      	cmp	r0, #0
   255c4:	f43f af1f 	beq.w	25406 <ProcessAesDrv+0x56>
   255c8:	4841      	ldr	r0, [pc, #260]	; (256d0 <ProcessAesDrv+0x320>)
   255ca:	f7fd fee3 	bl	23394 <CC_PalAbort>
   255ce:	e71a      	b.n	25406 <ProcessAesDrv+0x56>
   255d0:	4840      	ldr	r0, [pc, #256]	; (256d4 <ProcessAesDrv+0x324>)
   255d2:	f7fd fedf 	bl	23394 <CC_PalAbort>
   255d6:	4648      	mov	r0, r9
   255d8:	b007      	add	sp, #28
   255da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   255de:	483e      	ldr	r0, [pc, #248]	; (256d8 <ProcessAesDrv+0x328>)
   255e0:	f7fd fed8 	bl	23394 <CC_PalAbort>
   255e4:	e73e      	b.n	25464 <ProcessAesDrv+0xb4>
   255e6:	2304      	movs	r3, #4
   255e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   255ec:	2120      	movs	r1, #32
   255ee:	f104 0010 	add.w	r0, r4, #16
   255f2:	f7ff fb47 	bl	24c84 <CC_PalMemSetZeroPlat>
   255f6:	e71c      	b.n	25432 <ProcessAesDrv+0x82>
   255f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   255fa:	6c20      	ldr	r0, [r4, #64]	; 0x40
   255fc:	f000 f9c8 	bl	25990 <kmu_validate_slot_and_size>
   25600:	b9e8      	cbnz	r0, 2563e <ProcessAesDrv+0x28e>
   25602:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 256f8 <ProcessAesDrv+0x348>
   25606:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 256fc <ProcessAesDrv+0x34c>
   2560a:	f8d8 3000 	ldr.w	r3, [r8]
   2560e:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 25700 <ProcessAesDrv+0x350>
   25612:	681b      	ldr	r3, [r3, #0]
   25614:	f8cb 3000 	str.w	r3, [fp]
   25618:	f8d8 3000 	ldr.w	r3, [r8]
   2561c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 25704 <ProcessAesDrv+0x354>
   25620:	685b      	ldr	r3, [r3, #4]
   25622:	f8ca 3000 	str.w	r3, [sl]
   25626:	f8d8 3000 	ldr.w	r3, [r8]
   2562a:	4a2c      	ldr	r2, [pc, #176]	; (256dc <ProcessAesDrv+0x32c>)
   2562c:	689b      	ldr	r3, [r3, #8]
   2562e:	f8c9 3000 	str.w	r3, [r9]
   25632:	f8d8 3000 	ldr.w	r3, [r8]
   25636:	68db      	ldr	r3, [r3, #12]
   25638:	6013      	str	r3, [r2, #0]
   2563a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2563c:	b171      	cbz	r1, 2565c <ProcessAesDrv+0x2ac>
   2563e:	f04f 0801 	mov.w	r8, #1
   25642:	e6d2      	b.n	253ea <ProcessAesDrv+0x3a>
   25644:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 25708 <ProcessAesDrv+0x358>
   25648:	e6eb      	b.n	25422 <ProcessAesDrv+0x72>
   2564a:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   2564e:	e70f      	b.n	25470 <ProcessAesDrv+0xc0>
   25650:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   25652:	2b01      	cmp	r3, #1
   25654:	bf0c      	ite	eq
   25656:	2040      	moveq	r0, #64	; 0x40
   25658:	2010      	movne	r0, #16
   2565a:	e789      	b.n	25570 <ProcessAesDrv+0x1c0>
   2565c:	f104 0310 	add.w	r3, r4, #16
   25660:	4618      	mov	r0, r3
   25662:	9305      	str	r3, [sp, #20]
   25664:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   25668:	e9cd 3200 	strd	r3, r2, [sp]
   2566c:	9002      	str	r0, [sp, #8]
   2566e:	2010      	movs	r0, #16
   25670:	9003      	str	r0, [sp, #12]
   25672:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   25676:	6c20      	ldr	r0, [r4, #64]	; 0x40
   25678:	f000 f9ae 	bl	259d8 <kmu_derive_cmac>
   2567c:	2800      	cmp	r0, #0
   2567e:	d148      	bne.n	25712 <ProcessAesDrv+0x362>
   25680:	2300      	movs	r3, #0
   25682:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   25686:	e7da      	b.n	2563e <ProcessAesDrv+0x28e>
   25688:	4b15      	ldr	r3, [pc, #84]	; (256e0 <ProcessAesDrv+0x330>)
   2568a:	e746      	b.n	2551a <ProcessAesDrv+0x16a>
   2568c:	4a14      	ldr	r2, [pc, #80]	; (256e0 <ProcessAesDrv+0x330>)
   2568e:	4b15      	ldr	r3, [pc, #84]	; (256e4 <ProcessAesDrv+0x334>)
   25690:	e785      	b.n	2559e <ProcessAesDrv+0x1ee>
   25692:	bf00      	nop
   25694:	20000704 	.word	0x20000704
   25698:	5002b810 	.word	0x5002b810
   2569c:	5002b910 	.word	0x5002b910
   256a0:	5002ba04 	.word	0x5002ba04
   256a4:	5002b440 	.word	0x5002b440
   256a8:	5002bd28 	.word	0x5002bd28
   256ac:	5002bd2c 	.word	0x5002bd2c
   256b0:	5002bd30 	.word	0x5002bd30
   256b4:	5002bd34 	.word	0x5002bd34
   256b8:	5002bc2c 	.word	0x5002bc2c
   256bc:	5002bc34 	.word	0x5002bc34
   256c0:	5002bc28 	.word	0x5002bc28
   256c4:	5002bc30 	.word	0x5002bc30
   256c8:	5002b444 	.word	0x5002b444
   256cc:	0002f2d0 	.word	0x0002f2d0
   256d0:	0002f2e8 	.word	0x0002f2e8
   256d4:	0002f328 	.word	0x0002f328
   256d8:	0002f308 	.word	0x0002f308
   256dc:	5002b40c 	.word	0x5002b40c
   256e0:	5002b460 	.word	0x5002b460
   256e4:	5002b464 	.word	0x5002b464
   256e8:	00f10001 	.word	0x00f10001
   256ec:	00f10005 	.word	0x00f10005
   256f0:	00f1000b 	.word	0x00f1000b
   256f4:	00f10003 	.word	0x00f10003
   256f8:	200006f4 	.word	0x200006f4
   256fc:	5002b400 	.word	0x5002b400
   25700:	5002b404 	.word	0x5002b404
   25704:	5002b408 	.word	0x5002b408
   25708:	00f10002 	.word	0x00f10002
   2570c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 25748 <ProcessAesDrv+0x398>
   25710:	e687      	b.n	25422 <ProcessAesDrv+0x72>
   25712:	f8d8 3000 	ldr.w	r3, [r8]
   25716:	4a0b      	ldr	r2, [pc, #44]	; (25744 <ProcessAesDrv+0x394>)
   25718:	681b      	ldr	r3, [r3, #0]
   2571a:	f8cb 3000 	str.w	r3, [fp]
   2571e:	f8d8 3000 	ldr.w	r3, [r8]
   25722:	685b      	ldr	r3, [r3, #4]
   25724:	f8ca 3000 	str.w	r3, [sl]
   25728:	f8d8 3000 	ldr.w	r3, [r8]
   2572c:	689b      	ldr	r3, [r3, #8]
   2572e:	f8c9 3000 	str.w	r3, [r9]
   25732:	f8d8 3000 	ldr.w	r3, [r8]
   25736:	68db      	ldr	r3, [r3, #12]
   25738:	6013      	str	r3, [r2, #0]
   2573a:	9805      	ldr	r0, [sp, #20]
   2573c:	2110      	movs	r1, #16
   2573e:	f7ff faa1 	bl	24c84 <CC_PalMemSetZeroPlat>
   25742:	e79d      	b.n	25680 <ProcessAesDrv+0x2d0>
   25744:	5002b40c 	.word	0x5002b40c
   25748:	00f10004 	.word	0x00f10004

0002574c <FinishAesDrv>:
   2574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25750:	b301      	cbz	r1, 25794 <FinishAesDrv+0x48>
   25752:	b1fa      	cbz	r2, 25794 <FinishAesDrv+0x48>
   25754:	4604      	mov	r4, r0
   25756:	2800      	cmp	r0, #0
   25758:	d07a      	beq.n	25850 <FinishAesDrv+0x104>
   2575a:	461d      	mov	r5, r3
   2575c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2575e:	2b07      	cmp	r3, #7
   25760:	460e      	mov	r6, r1
   25762:	d01b      	beq.n	2579c <FinishAesDrv+0x50>
   25764:	b95d      	cbnz	r5, 2577e <FinishAesDrv+0x32>
   25766:	2b03      	cmp	r3, #3
   25768:	d110      	bne.n	2578c <FinishAesDrv+0x40>
   2576a:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2576c:	b973      	cbnz	r3, 2578c <FinishAesDrv+0x40>
   2576e:	f100 0364 	add.w	r3, r0, #100	; 0x64
   25772:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   25776:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2577a:	600b      	str	r3, [r1, #0]
   2577c:	2510      	movs	r5, #16
   2577e:	462b      	mov	r3, r5
   25780:	4631      	mov	r1, r6
   25782:	4620      	mov	r0, r4
   25784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25788:	f7ff be12 	b.w	253b0 <ProcessAesDrv>
   2578c:	462f      	mov	r7, r5
   2578e:	4638      	mov	r0, r7
   25790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25794:	4f66      	ldr	r7, [pc, #408]	; (25930 <FinishAesDrv+0x1e4>)
   25796:	4638      	mov	r0, r7
   25798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2579c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2579e:	2b00      	cmp	r3, #0
   257a0:	d159      	bne.n	25856 <FinishAesDrv+0x10a>
   257a2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   257a6:	d25b      	bcs.n	25860 <FinishAesDrv+0x114>
   257a8:	b915      	cbnz	r5, 257b0 <FinishAesDrv+0x64>
   257aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
   257ac:	2b00      	cmp	r3, #0
   257ae:	d157      	bne.n	25860 <FinishAesDrv+0x114>
   257b0:	4860      	ldr	r0, [pc, #384]	; (25934 <FinishAesDrv+0x1e8>)
   257b2:	f04f 31ff 	mov.w	r1, #4294967295
   257b6:	f7fe f983 	bl	23ac0 <CC_PalMutexLock>
   257ba:	2800      	cmp	r0, #0
   257bc:	f040 8097 	bne.w	258ee <FinishAesDrv+0x1a2>
   257c0:	2000      	movs	r0, #0
   257c2:	f7fe f9ad 	bl	23b20 <CC_PalPowerSaveModeSelect>
   257c6:	2800      	cmp	r0, #0
   257c8:	f040 808d 	bne.w	258e6 <FinishAesDrv+0x19a>
   257cc:	4b5a      	ldr	r3, [pc, #360]	; (25938 <FinishAesDrv+0x1ec>)
   257ce:	4a5b      	ldr	r2, [pc, #364]	; (2593c <FinishAesDrv+0x1f0>)
   257d0:	2101      	movs	r1, #1
   257d2:	6019      	str	r1, [r3, #0]
   257d4:	6813      	ldr	r3, [r2, #0]
   257d6:	2b00      	cmp	r3, #0
   257d8:	d1fc      	bne.n	257d4 <FinishAesDrv+0x88>
   257da:	6b63      	ldr	r3, [r4, #52]	; 0x34
   257dc:	2b03      	cmp	r3, #3
   257de:	dd20      	ble.n	25822 <FinishAesDrv+0xd6>
   257e0:	3b06      	subs	r3, #6
   257e2:	2b01      	cmp	r3, #1
   257e4:	d81f      	bhi.n	25826 <FinishAesDrv+0xda>
   257e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   257e8:	2b01      	cmp	r3, #1
   257ea:	d83b      	bhi.n	25864 <FinishAesDrv+0x118>
   257ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   257ee:	2b01      	cmp	r3, #1
   257f0:	f200 8085 	bhi.w	258fe <FinishAesDrv+0x1b2>
   257f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   257f6:	2b01      	cmp	r3, #1
   257f8:	f200 8083 	bhi.w	25902 <FinishAesDrv+0x1b6>
   257fc:	4620      	mov	r0, r4
   257fe:	f7ff fd5b 	bl	252b8 <InitAes.part.0>
   25802:	4607      	mov	r7, r0
   25804:	b980      	cbnz	r0, 25828 <FinishAesDrv+0xdc>
   25806:	4620      	mov	r0, r4
   25808:	f7ff fd0c 	bl	25224 <LoadAesKey>
   2580c:	4607      	mov	r7, r0
   2580e:	b958      	cbnz	r0, 25828 <FinishAesDrv+0xdc>
   25810:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25812:	2b07      	cmp	r3, #7
   25814:	d807      	bhi.n	25826 <FinishAesDrv+0xda>
   25816:	e8df f003 	tbb	[pc, r3]
   2581a:	2730      	.short	0x2730
   2581c:	06062755 	.word	0x06062755
   25820:	2755      	.short	0x2755
   25822:	2b00      	cmp	r3, #0
   25824:	dadf      	bge.n	257e6 <FinishAesDrv+0x9a>
   25826:	4f46      	ldr	r7, [pc, #280]	; (25940 <FinishAesDrv+0x1f4>)
   25828:	4a44      	ldr	r2, [pc, #272]	; (2593c <FinishAesDrv+0x1f0>)
   2582a:	6813      	ldr	r3, [r2, #0]
   2582c:	2b00      	cmp	r3, #0
   2582e:	d1fc      	bne.n	2582a <FinishAesDrv+0xde>
   25830:	4a41      	ldr	r2, [pc, #260]	; (25938 <FinishAesDrv+0x1ec>)
   25832:	2001      	movs	r0, #1
   25834:	6013      	str	r3, [r2, #0]
   25836:	f7fe f973 	bl	23b20 <CC_PalPowerSaveModeSelect>
   2583a:	2800      	cmp	r0, #0
   2583c:	d15b      	bne.n	258f6 <FinishAesDrv+0x1aa>
   2583e:	483d      	ldr	r0, [pc, #244]	; (25934 <FinishAesDrv+0x1e8>)
   25840:	f7fe f946 	bl	23ad0 <CC_PalMutexUnlock>
   25844:	2800      	cmp	r0, #0
   25846:	d0a2      	beq.n	2578e <FinishAesDrv+0x42>
   25848:	483e      	ldr	r0, [pc, #248]	; (25944 <FinishAesDrv+0x1f8>)
   2584a:	f7fd fda3 	bl	23394 <CC_PalAbort>
   2584e:	e79e      	b.n	2578e <FinishAesDrv+0x42>
   25850:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   25854:	e79b      	b.n	2578e <FinishAesDrv+0x42>
   25856:	2b01      	cmp	r3, #1
   25858:	d1a6      	bne.n	257a8 <FinishAesDrv+0x5c>
   2585a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2585e:	d3a3      	bcc.n	257a8 <FinishAesDrv+0x5c>
   25860:	4f39      	ldr	r7, [pc, #228]	; (25948 <FinishAesDrv+0x1fc>)
   25862:	e794      	b.n	2578e <FinishAesDrv+0x42>
   25864:	4f39      	ldr	r7, [pc, #228]	; (2594c <FinishAesDrv+0x200>)
   25866:	e7df      	b.n	25828 <FinishAesDrv+0xdc>
   25868:	4b39      	ldr	r3, [pc, #228]	; (25950 <FinishAesDrv+0x204>)
   2586a:	6822      	ldr	r2, [r4, #0]
   2586c:	601a      	str	r2, [r3, #0]
   2586e:	6862      	ldr	r2, [r4, #4]
   25870:	605a      	str	r2, [r3, #4]
   25872:	68a2      	ldr	r2, [r4, #8]
   25874:	609a      	str	r2, [r3, #8]
   25876:	68e2      	ldr	r2, [r4, #12]
   25878:	60da      	str	r2, [r3, #12]
   2587a:	4936      	ldr	r1, [pc, #216]	; (25954 <FinishAesDrv+0x208>)
   2587c:	4a36      	ldr	r2, [pc, #216]	; (25958 <FinishAesDrv+0x20c>)
   2587e:	2301      	movs	r3, #1
   25880:	600b      	str	r3, [r1, #0]
   25882:	6015      	str	r5, [r2, #0]
   25884:	2d00      	cmp	r5, #0
   25886:	d13e      	bne.n	25906 <FinishAesDrv+0x1ba>
   25888:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2588a:	b90a      	cbnz	r2, 25890 <FinishAesDrv+0x144>
   2588c:	4a33      	ldr	r2, [pc, #204]	; (2595c <FinishAesDrv+0x210>)
   2588e:	6013      	str	r3, [r2, #0]
   25890:	4b2a      	ldr	r3, [pc, #168]	; (2593c <FinishAesDrv+0x1f0>)
   25892:	681f      	ldr	r7, [r3, #0]
   25894:	2f00      	cmp	r7, #0
   25896:	d1fc      	bne.n	25892 <FinishAesDrv+0x146>
   25898:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2589a:	3b01      	subs	r3, #1
   2589c:	2b06      	cmp	r3, #6
   2589e:	d8c3      	bhi.n	25828 <FinishAesDrv+0xdc>
   258a0:	a201      	add	r2, pc, #4	; (adr r2, 258a8 <FinishAesDrv+0x15c>)
   258a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   258a6:	bf00      	nop
   258a8:	000258c9 	.word	0x000258c9
   258ac:	000258e1 	.word	0x000258e1
   258b0:	000258c9 	.word	0x000258c9
   258b4:	00025829 	.word	0x00025829
   258b8:	00025829 	.word	0x00025829
   258bc:	000258e1 	.word	0x000258e1
   258c0:	000258c9 	.word	0x000258c9
   258c4:	4b26      	ldr	r3, [pc, #152]	; (25960 <FinishAesDrv+0x214>)
   258c6:	e7d0      	b.n	2586a <FinishAesDrv+0x11e>
   258c8:	4a21      	ldr	r2, [pc, #132]	; (25950 <FinishAesDrv+0x204>)
   258ca:	4b26      	ldr	r3, [pc, #152]	; (25964 <FinishAesDrv+0x218>)
   258cc:	6812      	ldr	r2, [r2, #0]
   258ce:	6022      	str	r2, [r4, #0]
   258d0:	681a      	ldr	r2, [r3, #0]
   258d2:	6062      	str	r2, [r4, #4]
   258d4:	685a      	ldr	r2, [r3, #4]
   258d6:	60a2      	str	r2, [r4, #8]
   258d8:	3308      	adds	r3, #8
   258da:	681b      	ldr	r3, [r3, #0]
   258dc:	60e3      	str	r3, [r4, #12]
   258de:	e7a3      	b.n	25828 <FinishAesDrv+0xdc>
   258e0:	4a1f      	ldr	r2, [pc, #124]	; (25960 <FinishAesDrv+0x214>)
   258e2:	4b21      	ldr	r3, [pc, #132]	; (25968 <FinishAesDrv+0x21c>)
   258e4:	e7f2      	b.n	258cc <FinishAesDrv+0x180>
   258e6:	4821      	ldr	r0, [pc, #132]	; (2596c <FinishAesDrv+0x220>)
   258e8:	f7fd fd54 	bl	23394 <CC_PalAbort>
   258ec:	e76e      	b.n	257cc <FinishAesDrv+0x80>
   258ee:	4820      	ldr	r0, [pc, #128]	; (25970 <FinishAesDrv+0x224>)
   258f0:	f7fd fd50 	bl	23394 <CC_PalAbort>
   258f4:	e764      	b.n	257c0 <FinishAesDrv+0x74>
   258f6:	481f      	ldr	r0, [pc, #124]	; (25974 <FinishAesDrv+0x228>)
   258f8:	f7fd fd4c 	bl	23394 <CC_PalAbort>
   258fc:	e79f      	b.n	2583e <FinishAesDrv+0xf2>
   258fe:	4f1e      	ldr	r7, [pc, #120]	; (25978 <FinishAesDrv+0x22c>)
   25900:	e792      	b.n	25828 <FinishAesDrv+0xdc>
   25902:	4f1e      	ldr	r7, [pc, #120]	; (2597c <FinishAesDrv+0x230>)
   25904:	e790      	b.n	25828 <FinishAesDrv+0xdc>
   25906:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   25908:	6833      	ldr	r3, [r6, #0]
   2590a:	2a01      	cmp	r2, #1
   2590c:	d00a      	beq.n	25924 <FinishAesDrv+0x1d8>
   2590e:	491c      	ldr	r1, [pc, #112]	; (25980 <FinishAesDrv+0x234>)
   25910:	4a1c      	ldr	r2, [pc, #112]	; (25984 <FinishAesDrv+0x238>)
   25912:	600b      	str	r3, [r1, #0]
   25914:	2010      	movs	r0, #16
   25916:	6015      	str	r5, [r2, #0]
   25918:	f7fe f83e 	bl	23998 <CC_HalWaitInterrupt>
   2591c:	4607      	mov	r7, r0
   2591e:	2800      	cmp	r0, #0
   25920:	d0b6      	beq.n	25890 <FinishAesDrv+0x144>
   25922:	e781      	b.n	25828 <FinishAesDrv+0xdc>
   25924:	4918      	ldr	r1, [pc, #96]	; (25988 <FinishAesDrv+0x23c>)
   25926:	4a19      	ldr	r2, [pc, #100]	; (2598c <FinishAesDrv+0x240>)
   25928:	600b      	str	r3, [r1, #0]
   2592a:	2040      	movs	r0, #64	; 0x40
   2592c:	6015      	str	r5, [r2, #0]
   2592e:	e7f3      	b.n	25918 <FinishAesDrv+0x1cc>
   25930:	00f1000b 	.word	0x00f1000b
   25934:	20000704 	.word	0x20000704
   25938:	5002b810 	.word	0x5002b810
   2593c:	5002b910 	.word	0x5002b910
   25940:	00f10001 	.word	0x00f10001
   25944:	0002f328 	.word	0x0002f328
   25948:	00f10005 	.word	0x00f10005
   2594c:	00f10002 	.word	0x00f10002
   25950:	5002b440 	.word	0x5002b440
   25954:	5002b47c 	.word	0x5002b47c
   25958:	5002b4bc 	.word	0x5002b4bc
   2595c:	5002b524 	.word	0x5002b524
   25960:	5002b460 	.word	0x5002b460
   25964:	5002b444 	.word	0x5002b444
   25968:	5002b464 	.word	0x5002b464
   2596c:	0002f2e8 	.word	0x0002f2e8
   25970:	0002f2d0 	.word	0x0002f2d0
   25974:	0002f308 	.word	0x0002f308
   25978:	00f10003 	.word	0x00f10003
   2597c:	00f10004 	.word	0x00f10004
   25980:	5002bc30 	.word	0x5002bc30
   25984:	5002bc34 	.word	0x5002bc34
   25988:	5002bc28 	.word	0x5002bc28
   2598c:	5002bc2c 	.word	0x5002bc2c

00025990 <kmu_validate_slot_and_size>:
   25990:	b921      	cbnz	r1, 2599c <kmu_validate_slot_and_size+0xc>
   25992:	4b03      	ldr	r3, [pc, #12]	; (259a0 <kmu_validate_slot_and_size+0x10>)
   25994:	2800      	cmp	r0, #0
   25996:	bf18      	it	ne
   25998:	4618      	movne	r0, r3
   2599a:	4770      	bx	lr
   2599c:	4801      	ldr	r0, [pc, #4]	; (259a4 <kmu_validate_slot_and_size+0x14>)
   2599e:	4770      	bx	lr
   259a0:	00f70001 	.word	0x00f70001
   259a4:	00f70003 	.word	0x00f70003

000259a8 <kmu_validate_kdr_slot_and_size>:
   259a8:	b921      	cbnz	r1, 259b4 <kmu_validate_kdr_slot_and_size+0xc>
   259aa:	4b03      	ldr	r3, [pc, #12]	; (259b8 <kmu_validate_kdr_slot_and_size+0x10>)
   259ac:	2800      	cmp	r0, #0
   259ae:	bf18      	it	ne
   259b0:	4618      	movne	r0, r3
   259b2:	4770      	bx	lr
   259b4:	4801      	ldr	r0, [pc, #4]	; (259bc <kmu_validate_kdr_slot_and_size+0x14>)
   259b6:	4770      	bx	lr
   259b8:	00f70001 	.word	0x00f70001
   259bc:	00f70003 	.word	0x00f70003

000259c0 <kmu_use_kdr_key>:
   259c0:	4903      	ldr	r1, [pc, #12]	; (259d0 <kmu_use_kdr_key+0x10>)
   259c2:	4b04      	ldr	r3, [pc, #16]	; (259d4 <kmu_use_kdr_key+0x14>)
   259c4:	2000      	movs	r0, #0
   259c6:	2201      	movs	r2, #1
   259c8:	6008      	str	r0, [r1, #0]
   259ca:	601a      	str	r2, [r3, #0]
   259cc:	4770      	bx	lr
   259ce:	bf00      	nop
   259d0:	5002ba38 	.word	0x5002ba38
   259d4:	5002b478 	.word	0x5002b478

000259d8 <kmu_derive_cmac>:
   259d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   259dc:	b0cd      	sub	sp, #308	; 0x134
   259de:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   259e2:	460f      	mov	r7, r1
   259e4:	2100      	movs	r1, #0
   259e6:	460c      	mov	r4, r1
   259e8:	4681      	mov	r9, r0
   259ea:	4616      	mov	r6, r2
   259ec:	a80e      	add	r0, sp, #56	; 0x38
   259ee:	2274      	movs	r2, #116	; 0x74
   259f0:	469b      	mov	fp, r3
   259f2:	f002 f951 	bl	27c98 <memset>
   259f6:	4621      	mov	r1, r4
   259f8:	2280      	movs	r2, #128	; 0x80
   259fa:	a82c      	add	r0, sp, #176	; 0xb0
   259fc:	942b      	str	r4, [sp, #172]	; 0xac
   259fe:	f002 f94b 	bl	27c98 <memset>
   25a02:	2384      	movs	r3, #132	; 0x84
   25a04:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   25a08:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   25a0c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   25a10:	9305      	str	r3, [sp, #20]
   25a12:	d860      	bhi.n	25ad6 <kmu_derive_cmac+0xfe>
   25a14:	ab05      	add	r3, sp, #20
   25a16:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   25a1a:	9301      	str	r3, [sp, #4]
   25a1c:	9502      	str	r5, [sp, #8]
   25a1e:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   25a22:	4659      	mov	r1, fp
   25a24:	4630      	mov	r0, r6
   25a26:	f8cd a000 	str.w	sl, [sp]
   25a2a:	f000 f865 	bl	25af8 <UtilCmacBuildDataForDerivation>
   25a2e:	2800      	cmp	r0, #0
   25a30:	d14c      	bne.n	25acc <kmu_derive_cmac+0xf4>
   25a32:	2303      	movs	r3, #3
   25a34:	f88d 3013 	strb.w	r3, [sp, #19]
   25a38:	f89d 3013 	ldrb.w	r3, [sp, #19]
   25a3c:	901c      	str	r0, [sp, #112]	; 0x70
   25a3e:	2200      	movs	r2, #0
   25a40:	2110      	movs	r1, #16
   25a42:	a80e      	add	r0, sp, #56	; 0x38
   25a44:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   25a48:	2607      	movs	r6, #7
   25a4a:	2301      	movs	r3, #1
   25a4c:	2401      	movs	r4, #1
   25a4e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   25a52:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   25a56:	971a      	str	r7, [sp, #104]	; 0x68
   25a58:	961b      	str	r6, [sp, #108]	; 0x6c
   25a5a:	9426      	str	r4, [sp, #152]	; 0x98
   25a5c:	f10d 0920 	add.w	r9, sp, #32
   25a60:	f7ff f910 	bl	24c84 <CC_PalMemSetZeroPlat>
   25a64:	2110      	movs	r1, #16
   25a66:	e9cd 1900 	strd	r1, r9, [sp]
   25a6a:	ab0a      	add	r3, sp, #40	; 0x28
   25a6c:	9905      	ldr	r1, [sp, #20]
   25a6e:	4650      	mov	r0, sl
   25a70:	aa06      	add	r2, sp, #24
   25a72:	f7ff f9ab 	bl	24dcc <SetDataBuffersInfo>
   25a76:	4607      	mov	r7, r0
   25a78:	b150      	cbz	r0, 25a90 <kmu_derive_cmac+0xb8>
   25a7a:	e01e      	b.n	25aba <kmu_derive_cmac+0xe2>
   25a7c:	f7ff f8fe 	bl	24c7c <CC_PalMemCopyPlat>
   25a80:	2110      	movs	r1, #16
   25a82:	a80e      	add	r0, sp, #56	; 0x38
   25a84:	f7ff f8fe 	bl	24c84 <CC_PalMemSetZeroPlat>
   25a88:	3401      	adds	r4, #1
   25a8a:	1bad      	subs	r5, r5, r6
   25a8c:	b2e4      	uxtb	r4, r4
   25a8e:	d027      	beq.n	25ae0 <kmu_derive_cmac+0x108>
   25a90:	9b05      	ldr	r3, [sp, #20]
   25a92:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   25a96:	2d10      	cmp	r5, #16
   25a98:	464a      	mov	r2, r9
   25a9a:	a906      	add	r1, sp, #24
   25a9c:	a80e      	add	r0, sp, #56	; 0x38
   25a9e:	462e      	mov	r6, r5
   25aa0:	bf28      	it	cs
   25aa2:	2610      	movcs	r6, #16
   25aa4:	f7ff fe52 	bl	2574c <FinishAesDrv>
   25aa8:	4603      	mov	r3, r0
   25aaa:	4632      	mov	r2, r6
   25aac:	eb08 0007 	add.w	r0, r8, r7
   25ab0:	a90e      	add	r1, sp, #56	; 0x38
   25ab2:	4437      	add	r7, r6
   25ab4:	2b00      	cmp	r3, #0
   25ab6:	d0e1      	beq.n	25a7c <kmu_derive_cmac+0xa4>
   25ab8:	461f      	mov	r7, r3
   25aba:	a80e      	add	r0, sp, #56	; 0x38
   25abc:	2274      	movs	r2, #116	; 0x74
   25abe:	2100      	movs	r1, #0
   25ac0:	f7ff f8de 	bl	24c80 <CC_PalMemSetPlat>
   25ac4:	4638      	mov	r0, r7
   25ac6:	b04d      	add	sp, #308	; 0x134
   25ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25acc:	4f08      	ldr	r7, [pc, #32]	; (25af0 <kmu_derive_cmac+0x118>)
   25ace:	4638      	mov	r0, r7
   25ad0:	b04d      	add	sp, #308	; 0x134
   25ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ad6:	4f07      	ldr	r7, [pc, #28]	; (25af4 <kmu_derive_cmac+0x11c>)
   25ad8:	4638      	mov	r0, r7
   25ada:	b04d      	add	sp, #308	; 0x134
   25adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ae0:	a80e      	add	r0, sp, #56	; 0x38
   25ae2:	2274      	movs	r2, #116	; 0x74
   25ae4:	2100      	movs	r1, #0
   25ae6:	462f      	mov	r7, r5
   25ae8:	f7ff f8ca 	bl	24c80 <CC_PalMemSetPlat>
   25aec:	e7ea      	b.n	25ac4 <kmu_derive_cmac+0xec>
   25aee:	bf00      	nop
   25af0:	00f1000e 	.word	0x00f1000e
   25af4:	00f1000f 	.word	0x00f1000f

00025af8 <UtilCmacBuildDataForDerivation>:
   25af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25afc:	b082      	sub	sp, #8
   25afe:	2600      	movs	r6, #0
   25b00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   25b02:	9601      	str	r6, [sp, #4]
   25b04:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   25b08:	d83c      	bhi.n	25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b0a:	00ee      	lsls	r6, r5, #3
   25b0c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   25b10:	f101 35ff 	add.w	r5, r1, #4294967295
   25b14:	461f      	mov	r7, r3
   25b16:	bf34      	ite	cc
   25b18:	2303      	movcc	r3, #3
   25b1a:	2304      	movcs	r3, #4
   25b1c:	2d3f      	cmp	r5, #63	; 0x3f
   25b1e:	460c      	mov	r4, r1
   25b20:	9300      	str	r3, [sp, #0]
   25b22:	d82f      	bhi.n	25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b24:	b370      	cbz	r0, 25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b26:	4690      	mov	r8, r2
   25b28:	b117      	cbz	r7, 25b30 <UtilCmacBuildDataForDerivation+0x38>
   25b2a:	b35a      	cbz	r2, 25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b2c:	2f40      	cmp	r7, #64	; 0x40
   25b2e:	d829      	bhi.n	25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b30:	9a08      	ldr	r2, [sp, #32]
   25b32:	b33a      	cbz	r2, 25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b34:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25b36:	6811      	ldr	r1, [r2, #0]
   25b38:	b321      	cbz	r1, 25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b3a:	19e2      	adds	r2, r4, r7
   25b3c:	4413      	add	r3, r2
   25b3e:	4299      	cmp	r1, r3
   25b40:	d320      	bcc.n	25b84 <UtilCmacBuildDataForDerivation+0x8c>
   25b42:	9b08      	ldr	r3, [sp, #32]
   25b44:	4622      	mov	r2, r4
   25b46:	4601      	mov	r1, r0
   25b48:	1c58      	adds	r0, r3, #1
   25b4a:	f7ff f897 	bl	24c7c <CC_PalMemCopyPlat>
   25b4e:	9b08      	ldr	r3, [sp, #32]
   25b50:	4423      	add	r3, r4
   25b52:	2200      	movs	r2, #0
   25b54:	3402      	adds	r4, #2
   25b56:	705a      	strb	r2, [r3, #1]
   25b58:	bb07      	cbnz	r7, 25b9c <UtilCmacBuildDataForDerivation+0xa4>
   25b5a:	2eff      	cmp	r6, #255	; 0xff
   25b5c:	9600      	str	r6, [sp, #0]
   25b5e:	d915      	bls.n	25b8c <UtilCmacBuildDataForDerivation+0x94>
   25b60:	9b08      	ldr	r3, [sp, #32]
   25b62:	0235      	lsls	r5, r6, #8
   25b64:	b2ad      	uxth	r5, r5
   25b66:	1918      	adds	r0, r3, r4
   25b68:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   25b6c:	2202      	movs	r2, #2
   25b6e:	a901      	add	r1, sp, #4
   25b70:	9501      	str	r5, [sp, #4]
   25b72:	f7ff f883 	bl	24c7c <CC_PalMemCopyPlat>
   25b76:	3402      	adds	r4, #2
   25b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25b7a:	2000      	movs	r0, #0
   25b7c:	601c      	str	r4, [r3, #0]
   25b7e:	b002      	add	sp, #8
   25b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25b84:	4809      	ldr	r0, [pc, #36]	; (25bac <UtilCmacBuildDataForDerivation+0xb4>)
   25b86:	b002      	add	sp, #8
   25b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25b8c:	9b08      	ldr	r3, [sp, #32]
   25b8e:	2201      	movs	r2, #1
   25b90:	1918      	adds	r0, r3, r4
   25b92:	4669      	mov	r1, sp
   25b94:	f7ff f872 	bl	24c7c <CC_PalMemCopyPlat>
   25b98:	3401      	adds	r4, #1
   25b9a:	e7ed      	b.n	25b78 <UtilCmacBuildDataForDerivation+0x80>
   25b9c:	9b08      	ldr	r3, [sp, #32]
   25b9e:	4641      	mov	r1, r8
   25ba0:	1918      	adds	r0, r3, r4
   25ba2:	463a      	mov	r2, r7
   25ba4:	f7ff f86a 	bl	24c7c <CC_PalMemCopyPlat>
   25ba8:	443c      	add	r4, r7
   25baa:	e7d6      	b.n	25b5a <UtilCmacBuildDataForDerivation+0x62>
   25bac:	80000006 	.word	0x80000006

00025bb0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   25bb0:	4602      	mov	r2, r0
   25bb2:	b1b0      	cbz	r0, 25be2 <sys_notify_validate+0x32>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25bb4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25bb6:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   25bba:	2b02      	cmp	r3, #2
   25bbc:	d00b      	beq.n	25bd6 <sys_notify_validate+0x26>
   25bbe:	2b03      	cmp	r3, #3
   25bc0:	d004      	beq.n	25bcc <sys_notify_validate+0x1c>
   25bc2:	2b01      	cmp	r3, #1
   25bc4:	d004      	beq.n	25bd0 <sys_notify_validate+0x20>
   25bc6:	f06f 0015 	mvn.w	r0, #21
   25bca:	4770      	bx	lr
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   25bcc:	6803      	ldr	r3, [r0, #0]
   25bce:	b15b      	cbz	r3, 25be8 <sys_notify_validate+0x38>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   25bd0:	2000      	movs	r0, #0
   25bd2:	6090      	str	r0, [r2, #8]
   25bd4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   25bd6:	6803      	ldr	r3, [r0, #0]
   25bd8:	2b00      	cmp	r3, #0
   25bda:	d1f9      	bne.n	25bd0 <sys_notify_validate+0x20>
			rv = -EINVAL;
   25bdc:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   25be0:	4770      	bx	lr
		return -EINVAL;
   25be2:	f06f 0015 	mvn.w	r0, #21
   25be6:	4770      	bx	lr
			rv = -EINVAL;
   25be8:	f06f 0015 	mvn.w	r0, #21
   25bec:	4770      	bx	lr

00025bee <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   25bee:	b510      	push	{r4, lr}
   25bf0:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   25bf2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   25bf4:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   25bf8:	6081      	str	r1, [r0, #8]
	switch (method) {
   25bfa:	2a02      	cmp	r2, #2
   25bfc:	d004      	beq.n	25c08 <sys_notify_finalize+0x1a>
   25bfe:	2a03      	cmp	r2, #3
   25c00:	d105      	bne.n	25c0e <sys_notify_finalize+0x20>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   25c02:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   25c04:	2000      	movs	r0, #0
		break;
   25c06:	e004      	b.n	25c12 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SIGNAL:
		sig = notify->method.signal;
   25c08:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   25c0a:	2400      	movs	r4, #0
		break;
   25c0c:	e001      	b.n	25c12 <sys_notify_finalize+0x24>
	switch (method) {
   25c0e:	2400      	movs	r4, #0
   25c10:	4620      	mov	r0, r4
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   25c12:	2200      	movs	r2, #0
   25c14:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   25c16:	b108      	cbz	r0, 25c1c <sys_notify_finalize+0x2e>
	return z_impl_k_poll_signal_raise(sig, result);
   25c18:	f7fd fb3c 	bl	23294 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   25c1c:	4620      	mov	r0, r4
   25c1e:	bd10      	pop	{r4, pc}

00025c20 <arch_printk_char_out>:
}
   25c20:	2000      	movs	r0, #0
   25c22:	4770      	bx	lr

00025c24 <str_out>:
{
   25c24:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   25c26:	680c      	ldr	r4, [r1, #0]
   25c28:	b154      	cbz	r4, 25c40 <str_out+0x1c>
   25c2a:	688a      	ldr	r2, [r1, #8]
   25c2c:	684b      	ldr	r3, [r1, #4]
   25c2e:	429a      	cmp	r2, r3
   25c30:	da06      	bge.n	25c40 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   25c32:	3b01      	subs	r3, #1
   25c34:	429a      	cmp	r2, r3
   25c36:	d008      	beq.n	25c4a <str_out+0x26>
		ctx->str[ctx->count++] = c;
   25c38:	1c53      	adds	r3, r2, #1
   25c3a:	608b      	str	r3, [r1, #8]
   25c3c:	54a0      	strb	r0, [r4, r2]
   25c3e:	e002      	b.n	25c46 <str_out+0x22>
		ctx->count++;
   25c40:	688b      	ldr	r3, [r1, #8]
   25c42:	3301      	adds	r3, #1
   25c44:	608b      	str	r3, [r1, #8]
}
   25c46:	bc10      	pop	{r4}
   25c48:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   25c4a:	1c53      	adds	r3, r2, #1
   25c4c:	608b      	str	r3, [r1, #8]
   25c4e:	2300      	movs	r3, #0
   25c50:	54a3      	strb	r3, [r4, r2]
   25c52:	e7f8      	b.n	25c46 <str_out+0x22>

00025c54 <printk>:
{
   25c54:	b40f      	push	{r0, r1, r2, r3}
   25c56:	b500      	push	{lr}
   25c58:	b083      	sub	sp, #12
   25c5a:	a904      	add	r1, sp, #16
   25c5c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   25c60:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   25c62:	f7eb f89d 	bl	10da0 <vprintk>
}
   25c66:	b003      	add	sp, #12
   25c68:	f85d eb04 	ldr.w	lr, [sp], #4
   25c6c:	b004      	add	sp, #16
   25c6e:	4770      	bx	lr

00025c70 <snprintk>:
{
   25c70:	b40c      	push	{r2, r3}
   25c72:	b500      	push	{lr}
   25c74:	b083      	sub	sp, #12
   25c76:	ab04      	add	r3, sp, #16
   25c78:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   25c7c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   25c7e:	f7eb f89f 	bl	10dc0 <vsnprintk>
}
   25c82:	b003      	add	sp, #12
   25c84:	f85d eb04 	ldr.w	lr, [sp], #4
   25c88:	b002      	add	sp, #8
   25c8a:	4770      	bx	lr

00025c8c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   25c8c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   25c90:	8b01      	ldrh	r1, [r0, #24]
   25c92:	f021 0107 	bic.w	r1, r1, #7
   25c96:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   25c98:	8301      	strh	r1, [r0, #24]
}
   25c9a:	4770      	bx	lr

00025c9c <notify_monitors>:
{
   25c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25ca0:	4606      	mov	r6, r0
   25ca2:	460f      	mov	r7, r1
   25ca4:	4690      	mov	r8, r2
	return list->head;
   25ca6:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   25ca8:	b119      	cbz	r1, 25cb2 <notify_monitors+0x16>
   25caa:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   25cac:	b131      	cbz	r1, 25cbc <notify_monitors+0x20>
	return node->next;
   25cae:	680c      	ldr	r4, [r1, #0]
   25cb0:	e004      	b.n	25cbc <notify_monitors+0x20>
   25cb2:	460c      	mov	r4, r1
   25cb4:	e002      	b.n	25cbc <notify_monitors+0x20>
   25cb6:	4623      	mov	r3, r4
   25cb8:	4621      	mov	r1, r4
   25cba:	461c      	mov	r4, r3
   25cbc:	b159      	cbz	r1, 25cd6 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   25cbe:	684d      	ldr	r5, [r1, #4]
   25cc0:	4643      	mov	r3, r8
   25cc2:	463a      	mov	r2, r7
   25cc4:	4630      	mov	r0, r6
   25cc6:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   25cc8:	2c00      	cmp	r4, #0
   25cca:	d0f4      	beq.n	25cb6 <notify_monitors+0x1a>
   25ccc:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   25cce:	2c00      	cmp	r4, #0
   25cd0:	d0f2      	beq.n	25cb8 <notify_monitors+0x1c>
	return node->next;
   25cd2:	6823      	ldr	r3, [r4, #0]
   25cd4:	e7f0      	b.n	25cb8 <notify_monitors+0x1c>
}
   25cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025cda <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25cda:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   25cdc:	f013 0307 	ands.w	r3, r3, #7
   25ce0:	d103      	bne.n	25cea <process_recheck+0x10>
	return list->head;
   25ce2:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   25ce4:	b10a      	cbz	r2, 25cea <process_recheck+0x10>
		evt = EVT_START;
   25ce6:	2003      	movs	r0, #3
   25ce8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   25cea:	2b02      	cmp	r3, #2
   25cec:	d003      	beq.n	25cf6 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   25cee:	2b01      	cmp	r3, #1
   25cf0:	d006      	beq.n	25d00 <process_recheck+0x26>
	int evt = EVT_NOP;
   25cf2:	2000      	movs	r0, #0
   25cf4:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   25cf6:	8b42      	ldrh	r2, [r0, #26]
   25cf8:	2a00      	cmp	r2, #0
   25cfa:	d1f8      	bne.n	25cee <process_recheck+0x14>
		evt = EVT_STOP;
   25cfc:	2004      	movs	r0, #4
   25cfe:	4770      	bx	lr
   25d00:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   25d02:	b10b      	cbz	r3, 25d08 <process_recheck+0x2e>
		evt = EVT_RESET;
   25d04:	2005      	movs	r0, #5
}
   25d06:	4770      	bx	lr
	int evt = EVT_NOP;
   25d08:	2000      	movs	r0, #0
   25d0a:	4770      	bx	lr

00025d0c <process_complete>:
{
   25d0c:	b538      	push	{r3, r4, r5, lr}
   25d0e:	4604      	mov	r4, r0
   25d10:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25d12:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   25d14:	2a00      	cmp	r2, #0
   25d16:	db07      	blt.n	25d28 <process_complete+0x1c>
   25d18:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   25d1c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   25d1e:	2a01      	cmp	r2, #1
   25d20:	d90e      	bls.n	25d40 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   25d22:	2b04      	cmp	r3, #4
   25d24:	d032      	beq.n	25d8c <process_complete+0x80>
}
   25d26:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   25d28:	e9d0 0100 	ldrd	r0, r1, [r0]
   25d2c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   25d30:	2300      	movs	r3, #0
   25d32:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   25d34:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   25d36:	2101      	movs	r1, #1
   25d38:	4620      	mov	r0, r4
   25d3a:	f7ff ffa7 	bl	25c8c <set_state>
   25d3e:	e7f2      	b.n	25d26 <process_complete+0x1a>
		*clients = mgr->clients;
   25d40:	e9d0 0100 	ldrd	r0, r1, [r0]
   25d44:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   25d48:	2200      	movs	r2, #0
   25d4a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   25d4c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   25d4e:	2b06      	cmp	r3, #6
   25d50:	d117      	bne.n	25d82 <process_complete+0x76>
	return list->head;
   25d52:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   25d54:	b13b      	cbz	r3, 25d66 <process_complete+0x5a>
				mgr->refs += 1U;
   25d56:	8b62      	ldrh	r2, [r4, #26]
   25d58:	3201      	adds	r2, #1
   25d5a:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   25d5c:	2b00      	cmp	r3, #0
   25d5e:	d0f9      	beq.n	25d54 <process_complete+0x48>
	return node->next;
   25d60:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   25d62:	2b00      	cmp	r3, #0
   25d64:	d1f6      	bne.n	25d54 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   25d66:	2102      	movs	r1, #2
   25d68:	4620      	mov	r0, r4
   25d6a:	f7ff ff8f 	bl	25c8c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   25d6e:	4620      	mov	r0, r4
   25d70:	f7ff ffb3 	bl	25cda <process_recheck>
   25d74:	2800      	cmp	r0, #0
   25d76:	d0d6      	beq.n	25d26 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   25d78:	8b23      	ldrh	r3, [r4, #24]
   25d7a:	f043 0320 	orr.w	r3, r3, #32
   25d7e:	8323      	strh	r3, [r4, #24]
   25d80:	e7d1      	b.n	25d26 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   25d82:	2100      	movs	r1, #0
   25d84:	4620      	mov	r0, r4
   25d86:	f7ff ff81 	bl	25c8c <set_state>
   25d8a:	e7f0      	b.n	25d6e <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   25d8c:	2100      	movs	r1, #0
   25d8e:	f7ff ff7d 	bl	25c8c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   25d92:	4620      	mov	r0, r4
   25d94:	f7ff ffa1 	bl	25cda <process_recheck>
   25d98:	2800      	cmp	r0, #0
   25d9a:	d0c4      	beq.n	25d26 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   25d9c:	8b23      	ldrh	r3, [r4, #24]
   25d9e:	f043 0320 	orr.w	r3, r3, #32
   25da2:	8323      	strh	r3, [r4, #24]
}
   25da4:	e7bf      	b.n	25d26 <process_complete+0x1a>

00025da6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   25da6:	b158      	cbz	r0, 25dc0 <validate_args+0x1a>
{
   25da8:	b510      	push	{r4, lr}
   25daa:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   25dac:	b159      	cbz	r1, 25dc6 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   25dae:	1d08      	adds	r0, r1, #4
   25db0:	f7ff fefe 	bl	25bb0 <sys_notify_validate>
	if ((rv == 0)
   25db4:	b918      	cbnz	r0, 25dbe <validate_args+0x18>
	    && ((cli->notify.flags
   25db6:	68a3      	ldr	r3, [r4, #8]
   25db8:	f033 0303 	bics.w	r3, r3, #3
   25dbc:	d106      	bne.n	25dcc <validate_args+0x26>
}
   25dbe:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25dc0:	f06f 0015 	mvn.w	r0, #21
}
   25dc4:	4770      	bx	lr
		return -EINVAL;
   25dc6:	f06f 0015 	mvn.w	r0, #21
   25dca:	e7f8      	b.n	25dbe <validate_args+0x18>
		rv = -EINVAL;
   25dcc:	f06f 0015 	mvn.w	r0, #21
   25dd0:	e7f5      	b.n	25dbe <validate_args+0x18>

00025dd2 <notify_one>:
{
   25dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25dd6:	4607      	mov	r7, r0
   25dd8:	460c      	mov	r4, r1
   25dda:	4616      	mov	r6, r2
   25ddc:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   25dde:	4619      	mov	r1, r3
   25de0:	1d20      	adds	r0, r4, #4
   25de2:	f7ff ff04 	bl	25bee <sys_notify_finalize>
	if (cb) {
   25de6:	b128      	cbz	r0, 25df4 <notify_one+0x22>
   25de8:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   25dea:	462b      	mov	r3, r5
   25dec:	4632      	mov	r2, r6
   25dee:	4621      	mov	r1, r4
   25df0:	4638      	mov	r0, r7
   25df2:	47c0      	blx	r8
}
   25df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025df8 <notify_all>:
{
   25df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25dfc:	4681      	mov	r9, r0
   25dfe:	460c      	mov	r4, r1
   25e00:	4690      	mov	r8, r2
   25e02:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   25e04:	e005      	b.n	25e12 <notify_all+0x1a>
	list->tail = node;
   25e06:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   25e08:	463b      	mov	r3, r7
   25e0a:	4642      	mov	r2, r8
   25e0c:	4648      	mov	r0, r9
   25e0e:	f7ff ffe0 	bl	25dd2 <notify_one>
	return list->head;
   25e12:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   25e14:	b129      	cbz	r1, 25e22 <notify_all+0x2a>
	return node->next;
   25e16:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   25e18:	6025      	str	r5, [r4, #0]
	return list->tail;
   25e1a:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25e1c:	428e      	cmp	r6, r1
   25e1e:	d1f3      	bne.n	25e08 <notify_all+0x10>
   25e20:	e7f1      	b.n	25e06 <notify_all+0xe>
}
   25e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00025e26 <transition_complete>:
{
   25e26:	b510      	push	{r4, lr}
	__asm__ volatile(
   25e28:	f04f 0440 	mov.w	r4, #64	; 0x40
   25e2c:	f3ef 8211 	mrs	r2, BASEPRI
   25e30:	f384 8812 	msr	BASEPRI_MAX, r4
   25e34:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   25e38:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   25e3a:	2101      	movs	r1, #1
   25e3c:	f7ea ffd6 	bl	10dec <process_event>
}
   25e40:	bd10      	pop	{r4, pc}

00025e42 <onoff_manager_init>:
	if ((mgr == NULL)
   25e42:	4603      	mov	r3, r0
   25e44:	b168      	cbz	r0, 25e62 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   25e46:	b179      	cbz	r1, 25e68 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   25e48:	680a      	ldr	r2, [r1, #0]
   25e4a:	b182      	cbz	r2, 25e6e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   25e4c:	684a      	ldr	r2, [r1, #4]
   25e4e:	b18a      	cbz	r2, 25e74 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   25e50:	2000      	movs	r0, #0
   25e52:	6018      	str	r0, [r3, #0]
   25e54:	6058      	str	r0, [r3, #4]
   25e56:	6098      	str	r0, [r3, #8]
   25e58:	60d8      	str	r0, [r3, #12]
   25e5a:	6158      	str	r0, [r3, #20]
   25e5c:	6198      	str	r0, [r3, #24]
   25e5e:	6119      	str	r1, [r3, #16]
	return 0;
   25e60:	4770      	bx	lr
		return -EINVAL;
   25e62:	f06f 0015 	mvn.w	r0, #21
   25e66:	4770      	bx	lr
   25e68:	f06f 0015 	mvn.w	r0, #21
   25e6c:	4770      	bx	lr
   25e6e:	f06f 0015 	mvn.w	r0, #21
   25e72:	4770      	bx	lr
   25e74:	f06f 0015 	mvn.w	r0, #21
}
   25e78:	4770      	bx	lr

00025e7a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   25e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e7c:	4604      	mov	r4, r0
   25e7e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25e80:	f7ff ff91 	bl	25da6 <validate_args>

	if (rv < 0) {
   25e84:	1e06      	subs	r6, r0, #0
   25e86:	db37      	blt.n	25ef8 <onoff_request+0x7e>
   25e88:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e8c:	f3ef 8211 	mrs	r2, BASEPRI
   25e90:	f383 8812 	msr	BASEPRI_MAX, r3
   25e94:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25e98:	8b25      	ldrh	r5, [r4, #24]
   25e9a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   25e9e:	8b63      	ldrh	r3, [r4, #26]
   25ea0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   25ea4:	428b      	cmp	r3, r1
   25ea6:	d02f      	beq.n	25f08 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   25ea8:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   25eaa:	2d02      	cmp	r5, #2
   25eac:	d00c      	beq.n	25ec8 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   25eae:	b18d      	cbz	r5, 25ed4 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   25eb0:	2d04      	cmp	r5, #4
   25eb2:	d00f      	beq.n	25ed4 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   25eb4:	2d06      	cmp	r5, #6
   25eb6:	d00d      	beq.n	25ed4 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   25eb8:	2d05      	cmp	r5, #5
   25eba:	d01f      	beq.n	25efc <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   25ebc:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   25ec0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   25ec2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   25ec4:	4608      	mov	r0, r1
   25ec6:	e00a      	b.n	25ede <onoff_request+0x64>
		mgr->refs += 1U;
   25ec8:	3301      	adds	r3, #1
   25eca:	8363      	strh	r3, [r4, #26]
		notify = true;
   25ecc:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   25ece:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   25ed0:	4618      	mov	r0, r3
   25ed2:	e004      	b.n	25ede <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   25ed4:	fab5 f385 	clz	r3, r5
   25ed8:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   25eda:	2100      	movs	r1, #0
		add_client = true;
   25edc:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   25ede:	b128      	cbz	r0, 25eec <onoff_request+0x72>
	parent->next = child;
   25ee0:	2000      	movs	r0, #0
   25ee2:	6038      	str	r0, [r7, #0]
	return list->tail;
   25ee4:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   25ee6:	b1a8      	cbz	r0, 25f14 <onoff_request+0x9a>
	parent->next = child;
   25ee8:	6007      	str	r7, [r0, #0]
	list->tail = node;
   25eea:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   25eec:	b9ab      	cbnz	r3, 25f1a <onoff_request+0xa0>
	__asm__ volatile(
   25eee:	f382 8811 	msr	BASEPRI, r2
   25ef2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   25ef6:	b9a9      	cbnz	r1, 25f24 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   25ef8:	4630      	mov	r0, r6
   25efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   25efc:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   25f00:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   25f02:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   25f04:	4608      	mov	r0, r1
   25f06:	e7ea      	b.n	25ede <onoff_request+0x64>
		rv = -EAGAIN;
   25f08:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   25f0c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   25f0e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   25f10:	4608      	mov	r0, r1
   25f12:	e7e4      	b.n	25ede <onoff_request+0x64>
   25f14:	6067      	str	r7, [r4, #4]
	list->head = node;
   25f16:	6027      	str	r7, [r4, #0]
}
   25f18:	e7e8      	b.n	25eec <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   25f1a:	2102      	movs	r1, #2
   25f1c:	4620      	mov	r0, r4
   25f1e:	f7ea ff65 	bl	10dec <process_event>
   25f22:	e7e9      	b.n	25ef8 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   25f24:	2300      	movs	r3, #0
   25f26:	462a      	mov	r2, r5
   25f28:	4639      	mov	r1, r7
   25f2a:	4620      	mov	r0, r4
   25f2c:	f7ff ff51 	bl	25dd2 <notify_one>
   25f30:	e7e2      	b.n	25ef8 <onoff_request+0x7e>

00025f32 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   25f32:	b510      	push	{r4, lr}
	__asm__ volatile(
   25f34:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f38:	f3ef 8211 	mrs	r2, BASEPRI
   25f3c:	f383 8812 	msr	BASEPRI_MAX, r3
   25f40:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25f44:	8b03      	ldrh	r3, [r0, #24]
   25f46:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   25f4a:	2b02      	cmp	r3, #2
   25f4c:	d007      	beq.n	25f5e <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
   25f4e:	2b01      	cmp	r3, #1
   25f50:	d002      	beq.n	25f58 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   25f52:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   25f56:	e008      	b.n	25f6a <onoff_release+0x38>
			rv = -EIO;
   25f58:	f06f 0404 	mvn.w	r4, #4
   25f5c:	e005      	b.n	25f6a <onoff_release+0x38>
   25f5e:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   25f60:	8b43      	ldrh	r3, [r0, #26]
   25f62:	3b01      	subs	r3, #1
   25f64:	b29b      	uxth	r3, r3
   25f66:	8343      	strh	r3, [r0, #26]
	if (stop) {
   25f68:	b12b      	cbz	r3, 25f76 <onoff_release+0x44>
	__asm__ volatile(
   25f6a:	f382 8811 	msr	BASEPRI, r2
   25f6e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   25f72:	4620      	mov	r0, r4
   25f74:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   25f76:	2102      	movs	r1, #2
   25f78:	f7ea ff38 	bl	10dec <process_event>
   25f7c:	e7f9      	b.n	25f72 <onoff_release+0x40>

00025f7e <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
   25f7e:	2800      	cmp	r0, #0
   25f80:	d031      	beq.n	25fe6 <onoff_cancel+0x68>
{
   25f82:	b470      	push	{r4, r5, r6}
   25f84:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
   25f86:	2900      	cmp	r1, #0
   25f88:	d030      	beq.n	25fec <onoff_cancel+0x6e>
	__asm__ volatile(
   25f8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25f8e:	f3ef 8611 	mrs	r6, BASEPRI
   25f92:	f383 8812 	msr	BASEPRI_MAX, r3
   25f96:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   25f9a:	8b00      	ldrh	r0, [r0, #24]
   25f9c:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   25fa0:	460c      	mov	r4, r1
	return list->head;
   25fa2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25fa4:	2200      	movs	r2, #0
   25fa6:	b1b3      	cbz	r3, 25fd6 <onoff_cancel+0x58>
   25fa8:	429c      	cmp	r4, r3
   25faa:	d002      	beq.n	25fb2 <onoff_cancel+0x34>
   25fac:	461a      	mov	r2, r3
   25fae:	681b      	ldr	r3, [r3, #0]
   25fb0:	e7f9      	b.n	25fa6 <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
   25fb2:	b13a      	cbz	r2, 25fc4 <onoff_cancel+0x46>
	return node->next;
   25fb4:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   25fb6:	6013      	str	r3, [r2, #0]
	return list->tail;
   25fb8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   25fba:	4299      	cmp	r1, r3
   25fbc:	d009      	beq.n	25fd2 <onoff_cancel+0x54>
	parent->next = child;
   25fbe:	2300      	movs	r3, #0
   25fc0:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   25fc2:	e00a      	b.n	25fda <onoff_cancel+0x5c>
	return node->next;
   25fc4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   25fc6:	602b      	str	r3, [r5, #0]
	return list->tail;
   25fc8:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   25fca:	4291      	cmp	r1, r2
   25fcc:	d1f7      	bne.n	25fbe <onoff_cancel+0x40>
	list->tail = node;
   25fce:	606b      	str	r3, [r5, #4]
}
   25fd0:	e7f5      	b.n	25fbe <onoff_cancel+0x40>
	list->tail = node;
   25fd2:	606a      	str	r2, [r5, #4]
}
   25fd4:	e7f3      	b.n	25fbe <onoff_cancel+0x40>
	int rv = -EALREADY;
   25fd6:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
   25fda:	f386 8811 	msr	BASEPRI, r6
   25fde:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   25fe2:	bc70      	pop	{r4, r5, r6}
   25fe4:	4770      	bx	lr
		return -EINVAL;
   25fe6:	f06f 0015 	mvn.w	r0, #21
}
   25fea:	4770      	bx	lr
		return -EINVAL;
   25fec:	f06f 0015 	mvn.w	r0, #21
   25ff0:	e7f7      	b.n	25fe2 <onoff_cancel+0x64>

00025ff2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   25ff2:	b508      	push	{r3, lr}
   25ff4:	4604      	mov	r4, r0
   25ff6:	4608      	mov	r0, r1
   25ff8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   25ffa:	461a      	mov	r2, r3
   25ffc:	47a0      	blx	r4
	return z_impl_z_current_get();
   25ffe:	f7fc fc1d 	bl	2283c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26002:	f7ef fe4b 	bl	15c9c <z_impl_k_thread_abort>

00026006 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26006:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   26008:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   2600a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2600e:	d303      	bcc.n	26018 <chunk_mem+0x12>
   26010:	2308      	movs	r3, #8
   26012:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   26014:	4408      	add	r0, r1
   26016:	4770      	bx	lr
   26018:	2304      	movs	r3, #4
   2601a:	e7fa      	b.n	26012 <chunk_mem+0xc>

0002601c <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   2601c:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   2601e:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   26022:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   26024:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26028:	d317      	bcc.n	2605a <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   2602a:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   2602c:	4299      	cmp	r1, r3
   2602e:	d016      	beq.n	2605e <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   26030:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26034:	d320      	bcc.n	26078 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   26036:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   26038:	3204      	adds	r2, #4
   2603a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   2603e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   26042:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26046:	d319      	bcc.n	2607c <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   26048:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   2604a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   2604e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   26050:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   26054:	d314      	bcc.n	26080 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   26056:	6099      	str	r1, [r3, #8]
   26058:	e00c      	b.n	26074 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   2605a:	88eb      	ldrh	r3, [r5, #6]
   2605c:	e7e6      	b.n	2602c <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   2605e:	2301      	movs	r3, #1
   26060:	fa03 f102 	lsl.w	r1, r3, r2
   26064:	68c3      	ldr	r3, [r0, #12]
   26066:	ea23 0301 	bic.w	r3, r3, r1
   2606a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2606c:	3204      	adds	r2, #4
   2606e:	2300      	movs	r3, #0
   26070:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   26074:	bc30      	pop	{r4, r5}
   26076:	4770      	bx	lr
   26078:	88a9      	ldrh	r1, [r5, #4]
   2607a:	e7dd      	b.n	26038 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   2607c:	80d3      	strh	r3, [r2, #6]
   2607e:	e7e4      	b.n	2604a <free_list_remove_bidx+0x2e>
   26080:	8099      	strh	r1, [r3, #4]
   26082:	e7f7      	b.n	26074 <free_list_remove_bidx+0x58>

00026084 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   26084:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   26086:	1d13      	adds	r3, r2, #4
   26088:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2608c:	b9d3      	cbnz	r3, 260c4 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   2608e:	2301      	movs	r3, #1
   26090:	fa03 f402 	lsl.w	r4, r3, r2
   26094:	68c3      	ldr	r3, [r0, #12]
   26096:	4323      	orrs	r3, r4
   26098:	60c3      	str	r3, [r0, #12]
		b->next = c;
   2609a:	3204      	adds	r2, #4
   2609c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   260a0:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   260a4:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   260a6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   260aa:	d307      	bcc.n	260bc <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   260ac:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   260ae:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   260b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   260b4:	d304      	bcc.n	260c0 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   260b6:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   260b8:	bc70      	pop	{r4, r5, r6}
   260ba:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   260bc:	8099      	strh	r1, [r3, #4]
   260be:	e7f6      	b.n	260ae <free_list_add_bidx+0x2a>
   260c0:	80d9      	strh	r1, [r3, #6]
   260c2:	e7f9      	b.n	260b8 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   260c4:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   260c8:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   260ca:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   260ce:	d318      	bcc.n	26102 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   260d0:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   260d2:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   260d6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   260da:	d314      	bcc.n	26106 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   260dc:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   260de:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   260e0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   260e4:	d311      	bcc.n	2610a <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   260e6:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   260e8:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   260ec:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   260ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   260f2:	d30c      	bcc.n	2610e <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   260f4:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   260f6:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   260f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   260fc:	d309      	bcc.n	26112 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   260fe:	60a1      	str	r1, [r4, #8]
   26100:	e7da      	b.n	260b8 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   26102:	88a2      	ldrh	r2, [r4, #4]
   26104:	e7e5      	b.n	260d2 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   26106:	80aa      	strh	r2, [r5, #4]
   26108:	e7e9      	b.n	260de <free_list_add_bidx+0x5a>
   2610a:	80eb      	strh	r3, [r5, #6]
   2610c:	e7ec      	b.n	260e8 <free_list_add_bidx+0x64>
   2610e:	80d1      	strh	r1, [r2, #6]
   26110:	e7f1      	b.n	260f6 <free_list_add_bidx+0x72>
   26112:	80a1      	strh	r1, [r4, #4]
   26114:	e7d0      	b.n	260b8 <free_list_add_bidx+0x34>

00026116 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   26116:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   26118:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   2611c:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   2611e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   26122:	d325      	bcc.n	26170 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   26124:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   26126:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   26128:	1a89      	subs	r1, r1, r2
   2612a:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2612e:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   26130:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   26134:	d31e      	bcc.n	26174 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   26136:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26138:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   2613a:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   2613e:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   26140:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   26144:	d318      	bcc.n	26178 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   26146:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   26148:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   2614a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2614e:	d315      	bcc.n	2617c <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   26150:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   26154:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   26156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2615a:	d312      	bcc.n	26182 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   2615c:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   2615e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   26162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26166:	d30e      	bcc.n	26186 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   26168:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   2616c:	bc70      	pop	{r4, r5, r6}
   2616e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   26170:	8866      	ldrh	r6, [r4, #2]
   26172:	e7d8      	b.n	26126 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   26174:	8066      	strh	r6, [r4, #2]
   26176:	e7df      	b.n	26138 <split_chunks+0x22>
   26178:	8065      	strh	r5, [r4, #2]
   2617a:	e7e5      	b.n	26148 <split_chunks+0x32>
   2617c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   26180:	e7e8      	b.n	26154 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   26182:	8864      	ldrh	r4, [r4, #2]
   26184:	e7eb      	b.n	2615e <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   26186:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   2618a:	e7ef      	b.n	2616c <split_chunks+0x56>

0002618c <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2618c:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   2618e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   26192:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   26194:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26198:	d31c      	bcc.n	261d4 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   2619a:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2619c:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   2619e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   261a2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   261a6:	d317      	bcc.n	261d8 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   261a8:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   261aa:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   261ae:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   261b0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   261b4:	d312      	bcc.n	261dc <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   261b6:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   261b8:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   261ba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   261be:	d30f      	bcc.n	261e0 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   261c0:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   261c2:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   261c6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   261ca:	d30b      	bcc.n	261e4 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   261cc:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   261d0:	bc70      	pop	{r4, r5, r6}
   261d2:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   261d4:	884b      	ldrh	r3, [r1, #2]
   261d6:	e7e1      	b.n	2619c <merge_chunks+0x10>
   261d8:	886e      	ldrh	r6, [r5, #2]
   261da:	e7e6      	b.n	261aa <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   261dc:	804e      	strh	r6, [r1, #2]
   261de:	e7eb      	b.n	261b8 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   261e0:	886c      	ldrh	r4, [r5, #2]
   261e2:	e7ee      	b.n	261c2 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   261e4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   261e8:	e7f2      	b.n	261d0 <merge_chunks+0x44>

000261ea <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   261ea:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   261ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   261f0:	d304      	bcc.n	261fc <mem_to_chunkid+0x12>
   261f2:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   261f4:	1ac9      	subs	r1, r1, r3
   261f6:	1a08      	subs	r0, r1, r0
}
   261f8:	08c0      	lsrs	r0, r0, #3
   261fa:	4770      	bx	lr
   261fc:	2304      	movs	r3, #4
   261fe:	e7f9      	b.n	261f4 <mem_to_chunkid+0xa>

00026200 <free_list_remove>:
{
   26200:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   26202:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   26204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26208:	d307      	bcc.n	2621a <free_list_remove+0x1a>
	void *cmem = &buf[c];
   2620a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   2620e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   26210:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   26212:	2a01      	cmp	r2, #1
   26214:	d002      	beq.n	2621c <free_list_remove+0x1c>
   26216:	2200      	movs	r2, #0
   26218:	e000      	b.n	2621c <free_list_remove+0x1c>
   2621a:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   2621c:	b9a2      	cbnz	r2, 26248 <free_list_remove+0x48>
	void *cmem = &buf[c];
   2621e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   26222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26226:	d310      	bcc.n	2624a <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   26228:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2622a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   2622c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26230:	d30d      	bcc.n	2624e <free_list_remove+0x4e>
   26232:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26234:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   26236:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   2623a:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   2623c:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   26240:	f1c2 021f 	rsb	r2, r2, #31
   26244:	f7ff feea 	bl	2601c <free_list_remove_bidx>
}
   26248:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   2624a:	8852      	ldrh	r2, [r2, #2]
   2624c:	e7ed      	b.n	2622a <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   2624e:	2304      	movs	r3, #4
   26250:	e7f0      	b.n	26234 <free_list_remove+0x34>

00026252 <free_list_add>:
{
   26252:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   26254:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   26256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2625a:	d307      	bcc.n	2626c <free_list_add+0x1a>
	void *cmem = &buf[c];
   2625c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   26260:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   26262:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   26264:	2a01      	cmp	r2, #1
   26266:	d002      	beq.n	2626e <free_list_add+0x1c>
   26268:	2200      	movs	r2, #0
   2626a:	e000      	b.n	2626e <free_list_add+0x1c>
   2626c:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   2626e:	b9a2      	cbnz	r2, 2629a <free_list_add+0x48>
	void *cmem = &buf[c];
   26270:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   26274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26278:	d310      	bcc.n	2629c <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   2627a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2627c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   2627e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26282:	d30d      	bcc.n	262a0 <free_list_add+0x4e>
   26284:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26286:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   26288:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   2628c:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   2628e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   26292:	f1c2 021f 	rsb	r2, r2, #31
   26296:	f7ff fef5 	bl	26084 <free_list_add_bidx>
}
   2629a:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   2629c:	8852      	ldrh	r2, [r2, #2]
   2629e:	e7ed      	b.n	2627c <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   262a0:	2304      	movs	r3, #4
   262a2:	e7f0      	b.n	26286 <free_list_add+0x34>

000262a4 <free_chunk>:
{
   262a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262a6:	4604      	mov	r4, r0
   262a8:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   262aa:	00ce      	lsls	r6, r1, #3
   262ac:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   262b0:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   262b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   262b6:	d31f      	bcc.n	262f8 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   262b8:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   262ba:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   262be:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   262c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   262c6:	d319      	bcc.n	262fc <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   262c8:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   262ca:	f013 0f01 	tst.w	r3, #1
   262ce:	d017      	beq.n	26300 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   262d0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   262d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   262d6:	d324      	bcc.n	26322 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   262d8:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   262da:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   262dc:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   262e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   262e4:	d31f      	bcc.n	26326 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   262e6:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   262e8:	f013 0f01 	tst.w	r3, #1
   262ec:	d01d      	beq.n	2632a <free_chunk+0x86>
	free_list_add(h, c);
   262ee:	4629      	mov	r1, r5
   262f0:	4620      	mov	r0, r4
   262f2:	f7ff ffae 	bl	26252 <free_list_add>
}
   262f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   262f8:	8879      	ldrh	r1, [r7, #2]
   262fa:	e7de      	b.n	262ba <free_chunk+0x16>
   262fc:	8853      	ldrh	r3, [r2, #2]
   262fe:	e7e4      	b.n	262ca <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   26300:	4620      	mov	r0, r4
   26302:	f7ff ff7d 	bl	26200 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   26306:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   26308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2630c:	d307      	bcc.n	2631e <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   2630e:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   26310:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   26314:	4629      	mov	r1, r5
   26316:	4620      	mov	r0, r4
   26318:	f7ff ff38 	bl	2618c <merge_chunks>
   2631c:	e7d8      	b.n	262d0 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   2631e:	887a      	ldrh	r2, [r7, #2]
   26320:	e7f6      	b.n	26310 <free_chunk+0x6c>
   26322:	5ba1      	ldrh	r1, [r4, r6]
   26324:	e7d9      	b.n	262da <free_chunk+0x36>
   26326:	8853      	ldrh	r3, [r2, #2]
   26328:	e7de      	b.n	262e8 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   2632a:	4620      	mov	r0, r4
   2632c:	f7ff ff68 	bl	26200 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   26330:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   26332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26336:	d30c      	bcc.n	26352 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   26338:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   2633a:	462a      	mov	r2, r5
   2633c:	1a69      	subs	r1, r5, r1
   2633e:	4620      	mov	r0, r4
   26340:	f7ff ff24 	bl	2618c <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   26344:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   26346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2634a:	d304      	bcc.n	26356 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   2634c:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   2634e:	1aed      	subs	r5, r5, r3
   26350:	e7cd      	b.n	262ee <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   26352:	5ba1      	ldrh	r1, [r4, r6]
   26354:	e7f1      	b.n	2633a <free_chunk+0x96>
   26356:	5ba3      	ldrh	r3, [r4, r6]
   26358:	e7f9      	b.n	2634e <free_chunk+0xaa>

0002635a <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2635a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   2635c:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   2635e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   26362:	d311      	bcc.n	26388 <alloc_chunk+0x2e>
   26364:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26366:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   26368:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   2636c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   2636e:	fab3 f383 	clz	r3, r3
   26372:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   26376:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   2637a:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   2637e:	f1bc 0f00 	cmp.w	ip, #0
   26382:	d024      	beq.n	263ce <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   26384:	2603      	movs	r6, #3
   26386:	e010      	b.n	263aa <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   26388:	2304      	movs	r3, #4
   2638a:	e7ec      	b.n	26366 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   2638c:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   26390:	e015      	b.n	263be <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   26392:	4621      	mov	r1, r4
   26394:	f7ff fe42 	bl	2601c <free_list_remove_bidx>
				return c;
   26398:	e021      	b.n	263de <alloc_chunk+0x84>
   2639a:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   2639c:	1d17      	adds	r7, r2, #4
   2639e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   263a2:	3e01      	subs	r6, #1
   263a4:	d013      	beq.n	263ce <alloc_chunk+0x74>
   263a6:	45a4      	cmp	ip, r4
   263a8:	d011      	beq.n	263ce <alloc_chunk+0x74>
			chunkid_t c = b->next;
   263aa:	1d14      	adds	r4, r2, #4
   263ac:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   263b0:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   263b4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   263b8:	d3e8      	bcc.n	2638c <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   263ba:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   263be:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   263c2:	d9e6      	bls.n	26392 <alloc_chunk+0x38>
	if (big_heap(h)) {
   263c4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   263c8:	d3e7      	bcc.n	2639a <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   263ca:	68fc      	ldr	r4, [r7, #12]
   263cc:	e7e6      	b.n	2639c <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   263ce:	68c4      	ldr	r4, [r0, #12]
   263d0:	f1c3 0220 	rsb	r2, r3, #32
   263d4:	2301      	movs	r3, #1
   263d6:	4093      	lsls	r3, r2
   263d8:	425b      	negs	r3, r3

	if (bmask != 0U) {
   263da:	401c      	ands	r4, r3
   263dc:	d101      	bne.n	263e2 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   263de:	4620      	mov	r0, r4
   263e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   263e2:	fa94 f2a4 	rbit	r2, r4
   263e6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   263ea:	1d13      	adds	r3, r2, #4
   263ec:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   263f0:	4621      	mov	r1, r4
   263f2:	f7ff fe13 	bl	2601c <free_list_remove_bidx>
		return c;
   263f6:	e7f2      	b.n	263de <alloc_chunk+0x84>

000263f8 <sys_heap_free>:
	if (mem == NULL) {
   263f8:	b1c1      	cbz	r1, 2642c <sys_heap_free+0x34>
{
   263fa:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   263fc:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   263fe:	4620      	mov	r0, r4
   26400:	f7ff fef3 	bl	261ea <mem_to_chunkid>
   26404:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   26406:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   2640a:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   2640c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   26410:	d307      	bcc.n	26422 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   26412:	685a      	ldr	r2, [r3, #4]
   26414:	f022 0201 	bic.w	r2, r2, #1
   26418:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   2641a:	4620      	mov	r0, r4
   2641c:	f7ff ff42 	bl	262a4 <free_chunk>
}
   26420:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   26422:	885a      	ldrh	r2, [r3, #2]
   26424:	f022 0201 	bic.w	r2, r2, #1
   26428:	805a      	strh	r2, [r3, #2]
   2642a:	e7f6      	b.n	2641a <sys_heap_free+0x22>
   2642c:	4770      	bx	lr

0002642e <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2642e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   26430:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   26432:	2900      	cmp	r1, #0
   26434:	d03c      	beq.n	264b0 <sys_heap_alloc+0x82>
   26436:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   26438:	68aa      	ldr	r2, [r5, #8]
   2643a:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   2643e:	d939      	bls.n	264b4 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   26440:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   26444:	d320      	bcc.n	26488 <sys_heap_alloc+0x5a>
   26446:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   26448:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2644a:	3407      	adds	r4, #7
   2644c:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2644e:	4621      	mov	r1, r4
   26450:	4628      	mov	r0, r5
   26452:	f7ff ff82 	bl	2635a <alloc_chunk>
	if (c == 0U) {
   26456:	4607      	mov	r7, r0
   26458:	b370      	cbz	r0, 264b8 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   2645a:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   2645e:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   26460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26464:	d312      	bcc.n	2648c <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   26466:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   26468:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   2646c:	d310      	bcc.n	26490 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   2646e:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   26470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26474:	d317      	bcc.n	264a6 <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   26476:	6873      	ldr	r3, [r6, #4]
   26478:	f043 0301 	orr.w	r3, r3, #1
   2647c:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   2647e:	4639      	mov	r1, r7
   26480:	4628      	mov	r0, r5
   26482:	f7ff fdc0 	bl	26006 <chunk_mem>
}
   26486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   26488:	2404      	movs	r4, #4
   2648a:	e7dd      	b.n	26448 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   2648c:	8873      	ldrh	r3, [r6, #2]
   2648e:	e7eb      	b.n	26468 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   26490:	443c      	add	r4, r7
   26492:	4622      	mov	r2, r4
   26494:	4639      	mov	r1, r7
   26496:	4628      	mov	r0, r5
   26498:	f7ff fe3d 	bl	26116 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2649c:	4621      	mov	r1, r4
   2649e:	4628      	mov	r0, r5
   264a0:	f7ff fed7 	bl	26252 <free_list_add>
   264a4:	e7e3      	b.n	2646e <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   264a6:	8873      	ldrh	r3, [r6, #2]
   264a8:	f043 0301 	orr.w	r3, r3, #1
   264ac:	8073      	strh	r3, [r6, #2]
   264ae:	e7e6      	b.n	2647e <sys_heap_alloc+0x50>
		return NULL;
   264b0:	2000      	movs	r0, #0
   264b2:	e7e8      	b.n	26486 <sys_heap_alloc+0x58>
   264b4:	2000      	movs	r0, #0
   264b6:	e7e6      	b.n	26486 <sys_heap_alloc+0x58>
		return NULL;
   264b8:	2000      	movs	r0, #0
   264ba:	e7e4      	b.n	26486 <sys_heap_alloc+0x58>

000264bc <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   264bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264c0:	460d      	mov	r5, r1
   264c2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   264c4:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   264c6:	424b      	negs	r3, r1
   264c8:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   264cc:	ea31 0303 	bics.w	r3, r1, r3
   264d0:	d04e      	beq.n	26570 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   264d2:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   264d6:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   264d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   264dc:	d346      	bcc.n	2656c <sys_heap_aligned_alloc+0xb0>
   264de:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   264e0:	4598      	cmp	r8, r3
   264e2:	d200      	bcs.n	264e6 <sys_heap_aligned_alloc+0x2a>
   264e4:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   264e6:	2c00      	cmp	r4, #0
   264e8:	d070      	beq.n	265cc <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   264ea:	68b2      	ldr	r2, [r6, #8]
   264ec:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   264f0:	d96e      	bls.n	265d0 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   264f2:	1929      	adds	r1, r5, r4
   264f4:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   264f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   264fa:	d34a      	bcc.n	26592 <sys_heap_aligned_alloc+0xd6>
   264fc:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   264fe:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26500:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   26502:	08c9      	lsrs	r1, r1, #3
   26504:	4630      	mov	r0, r6
   26506:	f7ff ff28 	bl	2635a <alloc_chunk>

	if (c0 == 0) {
   2650a:	4607      	mov	r7, r0
   2650c:	2800      	cmp	r0, #0
   2650e:	d061      	beq.n	265d4 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   26510:	4601      	mov	r1, r0
   26512:	4630      	mov	r0, r6
   26514:	f7ff fd77 	bl	26006 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   26518:	4440      	add	r0, r8
   2651a:	4428      	add	r0, r5
   2651c:	3801      	subs	r0, #1
   2651e:	426d      	negs	r5, r5
   26520:	4005      	ands	r5, r0
   26522:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   26526:	442c      	add	r4, r5
   26528:	3407      	adds	r4, #7
   2652a:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   2652e:	4629      	mov	r1, r5
   26530:	4630      	mov	r0, r6
   26532:	f7ff fe5a 	bl	261ea <mem_to_chunkid>
   26536:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   26538:	1ba4      	subs	r4, r4, r6
   2653a:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   2653c:	4287      	cmp	r7, r0
   2653e:	d32a      	bcc.n	26596 <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   26540:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   26544:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   26546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2654a:	d32e      	bcc.n	265aa <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   2654c:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   2654e:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   26552:	429c      	cmp	r4, r3
   26554:	d32b      	bcc.n	265ae <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   26556:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   26558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2655c:	d331      	bcc.n	265c2 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2655e:	687b      	ldr	r3, [r7, #4]
   26560:	f043 0301 	orr.w	r3, r3, #1
   26564:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   26566:	4628      	mov	r0, r5
   26568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   2656c:	2304      	movs	r3, #4
   2656e:	e7b7      	b.n	264e0 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   26570:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   26572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   26576:	d305      	bcc.n	26584 <sys_heap_aligned_alloc+0xc8>
   26578:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   2657a:	429d      	cmp	r5, r3
   2657c:	d904      	bls.n	26588 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   2657e:	f04f 0800 	mov.w	r8, #0
   26582:	e7b0      	b.n	264e6 <sys_heap_aligned_alloc+0x2a>
   26584:	2304      	movs	r3, #4
   26586:	e7f8      	b.n	2657a <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   26588:	4621      	mov	r1, r4
   2658a:	f7ff ff50 	bl	2642e <sys_heap_alloc>
   2658e:	4605      	mov	r5, r0
   26590:	e7e9      	b.n	26566 <sys_heap_aligned_alloc+0xaa>
   26592:	2304      	movs	r3, #4
   26594:	e7b3      	b.n	264fe <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   26596:	4602      	mov	r2, r0
   26598:	4639      	mov	r1, r7
   2659a:	4630      	mov	r0, r6
   2659c:	f7ff fdbb 	bl	26116 <split_chunks>
		free_list_add(h, c0);
   265a0:	4639      	mov	r1, r7
   265a2:	4630      	mov	r0, r6
   265a4:	f7ff fe55 	bl	26252 <free_list_add>
   265a8:	e7ca      	b.n	26540 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   265aa:	887b      	ldrh	r3, [r7, #2]
   265ac:	e7cf      	b.n	2654e <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   265ae:	4622      	mov	r2, r4
   265b0:	4641      	mov	r1, r8
   265b2:	4630      	mov	r0, r6
   265b4:	f7ff fdaf 	bl	26116 <split_chunks>
		free_list_add(h, c_end);
   265b8:	4621      	mov	r1, r4
   265ba:	4630      	mov	r0, r6
   265bc:	f7ff fe49 	bl	26252 <free_list_add>
   265c0:	e7c9      	b.n	26556 <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   265c2:	887b      	ldrh	r3, [r7, #2]
   265c4:	f043 0301 	orr.w	r3, r3, #1
   265c8:	807b      	strh	r3, [r7, #2]
   265ca:	e7cc      	b.n	26566 <sys_heap_aligned_alloc+0xaa>
		return NULL;
   265cc:	2500      	movs	r5, #0
   265ce:	e7ca      	b.n	26566 <sys_heap_aligned_alloc+0xaa>
   265d0:	2500      	movs	r5, #0
   265d2:	e7c8      	b.n	26566 <sys_heap_aligned_alloc+0xaa>
		return NULL;
   265d4:	2500      	movs	r5, #0
   265d6:	e7c6      	b.n	26566 <sys_heap_aligned_alloc+0xaa>

000265d8 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   265d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   265da:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   265dc:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   265e0:	d32a      	bcc.n	26638 <sys_heap_init+0x60>
   265e2:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   265e4:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   265e6:	1dc8      	adds	r0, r1, #7
   265e8:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   265ec:	440d      	add	r5, r1
   265ee:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   265f2:	1a2d      	subs	r5, r5, r0
   265f4:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   265f6:	4606      	mov	r6, r0
	heap->heap = h;
   265f8:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   265fa:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   265fc:	2300      	movs	r3, #0
   265fe:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   26600:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   26604:	d31a      	bcc.n	2663c <sys_heap_init+0x64>
   26606:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26608:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   2660a:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   2660e:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   26610:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   26614:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   26618:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   2661c:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2661e:	f103 0e07 	add.w	lr, r3, #7
   26622:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   26626:	2300      	movs	r3, #0
   26628:	4563      	cmp	r3, ip
   2662a:	da09      	bge.n	26640 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   2662c:	1d1a      	adds	r2, r3, #4
   2662e:	2400      	movs	r4, #0
   26630:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   26634:	3301      	adds	r3, #1
   26636:	e7f7      	b.n	26628 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   26638:	2504      	movs	r5, #4
   2663a:	e7d3      	b.n	265e4 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   2663c:	2304      	movs	r3, #4
   2663e:	e7e3      	b.n	26608 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26640:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   26642:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   26646:	d333      	bcc.n	266b0 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   26648:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   2664a:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   2664e:	d331      	bcc.n	266b4 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   26650:	2300      	movs	r3, #0
   26652:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   26654:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   26658:	d32f      	bcc.n	266ba <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   2665a:	6843      	ldr	r3, [r0, #4]
   2665c:	f043 0301 	orr.w	r3, r3, #1
   26660:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   26662:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26664:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   26666:	f02e 0307 	bic.w	r3, lr, #7
   2666a:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   2666c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   26670:	d328      	bcc.n	266c4 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   26672:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   26674:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   26676:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   2667a:	d325      	bcc.n	266c8 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   2667c:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   2667e:	f025 0307 	bic.w	r3, r5, #7
   26682:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   26684:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   26686:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   2668a:	d31f      	bcc.n	266cc <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   2668c:	2400      	movs	r4, #0
   2668e:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   26690:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   26692:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   26696:	d31c      	bcc.n	266d2 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   26698:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   2669a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   2669c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   266a0:	d319      	bcc.n	266d6 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   266a2:	686b      	ldr	r3, [r5, #4]
   266a4:	f043 0301 	orr.w	r3, r3, #1
   266a8:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   266aa:	f7ff fdd2 	bl	26252 <free_list_add>
}
   266ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   266b0:	8043      	strh	r3, [r0, #2]
   266b2:	e7ca      	b.n	2664a <sys_heap_init+0x72>
   266b4:	2300      	movs	r3, #0
   266b6:	8003      	strh	r3, [r0, #0]
   266b8:	e7cc      	b.n	26654 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   266ba:	8843      	ldrh	r3, [r0, #2]
   266bc:	f043 0301 	orr.w	r3, r3, #1
   266c0:	8043      	strh	r3, [r0, #2]
   266c2:	e7ce      	b.n	26662 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   266c4:	8066      	strh	r6, [r4, #2]
   266c6:	e7d5      	b.n	26674 <sys_heap_init+0x9c>
   266c8:	52c1      	strh	r1, [r0, r3]
   266ca:	e7d8      	b.n	2667e <sys_heap_init+0xa6>
   266cc:	2400      	movs	r4, #0
   266ce:	806c      	strh	r4, [r5, #2]
   266d0:	e7de      	b.n	26690 <sys_heap_init+0xb8>
   266d2:	52c2      	strh	r2, [r0, r3]
   266d4:	e7e1      	b.n	2669a <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   266d6:	886b      	ldrh	r3, [r5, #2]
   266d8:	f043 0301 	orr.w	r3, r3, #1
   266dc:	806b      	strh	r3, [r5, #2]
   266de:	e7e4      	b.n	266aa <sys_heap_init+0xd2>

000266e0 <extract_decimal>:
{
   266e0:	b410      	push	{r4}
   266e2:	4604      	mov	r4, r0
	const char *sp = *str;
   266e4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   266e6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   266e8:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   266ea:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   266ee:	2909      	cmp	r1, #9
   266f0:	d806      	bhi.n	26700 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   266f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   266f6:	3201      	adds	r2, #1
   266f8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   266fc:	3830      	subs	r0, #48	; 0x30
   266fe:	e7f3      	b.n	266e8 <extract_decimal+0x8>
	*str = sp;
   26700:	6022      	str	r2, [r4, #0]
}
   26702:	bc10      	pop	{r4}
   26704:	4770      	bx	lr

00026706 <encode_uint>:
{
   26706:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2670a:	b083      	sub	sp, #12
   2670c:	4604      	mov	r4, r0
   2670e:	460d      	mov	r5, r1
   26710:	9201      	str	r2, [sp, #4]
   26712:	469a      	mov	sl, r3
   26714:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   26718:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2671a:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   2671e:	2b6f      	cmp	r3, #111	; 0x6f
   26720:	d00f      	beq.n	26742 <encode_uint+0x3c>
   26722:	d906      	bls.n	26732 <encode_uint+0x2c>
   26724:	2b70      	cmp	r3, #112	; 0x70
   26726:	d00f      	beq.n	26748 <encode_uint+0x42>
   26728:	2b78      	cmp	r3, #120	; 0x78
   2672a:	d110      	bne.n	2674e <encode_uint+0x48>
		return 16;
   2672c:	f04f 0910 	mov.w	r9, #16
   26730:	e026      	b.n	26780 <encode_uint+0x7a>
	switch (specifier) {
   26732:	2b58      	cmp	r3, #88	; 0x58
   26734:	d002      	beq.n	2673c <encode_uint+0x36>
   26736:	f04f 090a 	mov.w	r9, #10
   2673a:	e021      	b.n	26780 <encode_uint+0x7a>
		return 16;
   2673c:	f04f 0910 	mov.w	r9, #16
   26740:	e01e      	b.n	26780 <encode_uint+0x7a>
		return 8;
   26742:	f04f 0908 	mov.w	r9, #8
   26746:	e01b      	b.n	26780 <encode_uint+0x7a>
		return 16;
   26748:	f04f 0910 	mov.w	r9, #16
   2674c:	e018      	b.n	26780 <encode_uint+0x7a>
	switch (specifier) {
   2674e:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   26752:	e015      	b.n	26780 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26754:	f1bb 0f19 	cmp.w	fp, #25
   26758:	d820      	bhi.n	2679c <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   2675a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2675c:	3237      	adds	r2, #55	; 0x37
   2675e:	b2d2      	uxtb	r2, r2
   26760:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   26764:	4632      	mov	r2, r6
   26766:	463b      	mov	r3, r7
   26768:	4620      	mov	r0, r4
   2676a:	4629      	mov	r1, r5
   2676c:	f7da fcc8 	bl	1100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   26770:	42bd      	cmp	r5, r7
   26772:	bf08      	it	eq
   26774:	42b4      	cmpeq	r4, r6
   26776:	d315      	bcc.n	267a4 <encode_uint+0x9e>
   26778:	45d0      	cmp	r8, sl
   2677a:	d913      	bls.n	267a4 <encode_uint+0x9e>
		value /= radix;
   2677c:	4604      	mov	r4, r0
   2677e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   26780:	464e      	mov	r6, r9
   26782:	2700      	movs	r7, #0
   26784:	464a      	mov	r2, r9
   26786:	463b      	mov	r3, r7
   26788:	4620      	mov	r0, r4
   2678a:	4629      	mov	r1, r5
   2678c:	f7da fcb8 	bl	1100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   26790:	2a09      	cmp	r2, #9
   26792:	d8df      	bhi.n	26754 <encode_uint+0x4e>
   26794:	b2d2      	uxtb	r2, r2
   26796:	3230      	adds	r2, #48	; 0x30
   26798:	b2d2      	uxtb	r2, r2
   2679a:	e7e1      	b.n	26760 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   2679c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2679e:	3257      	adds	r2, #87	; 0x57
   267a0:	b2d2      	uxtb	r2, r2
   267a2:	e7dd      	b.n	26760 <encode_uint+0x5a>
	if (conv->flag_hash) {
   267a4:	9b01      	ldr	r3, [sp, #4]
   267a6:	781b      	ldrb	r3, [r3, #0]
   267a8:	f013 0f20 	tst.w	r3, #32
   267ac:	d005      	beq.n	267ba <encode_uint+0xb4>
		if (radix == 8) {
   267ae:	f1b9 0f08 	cmp.w	r9, #8
   267b2:	d006      	beq.n	267c2 <encode_uint+0xbc>
		} else if (radix == 16) {
   267b4:	f1b9 0f10 	cmp.w	r9, #16
   267b8:	d009      	beq.n	267ce <encode_uint+0xc8>
}
   267ba:	4640      	mov	r0, r8
   267bc:	b003      	add	sp, #12
   267be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   267c2:	9a01      	ldr	r2, [sp, #4]
   267c4:	7893      	ldrb	r3, [r2, #2]
   267c6:	f043 0308 	orr.w	r3, r3, #8
   267ca:	7093      	strb	r3, [r2, #2]
   267cc:	e7f5      	b.n	267ba <encode_uint+0xb4>
			conv->altform_0c = true;
   267ce:	9a01      	ldr	r2, [sp, #4]
   267d0:	7893      	ldrb	r3, [r2, #2]
   267d2:	f043 0310 	orr.w	r3, r3, #16
   267d6:	7093      	strb	r3, [r2, #2]
   267d8:	e7ef      	b.n	267ba <encode_uint+0xb4>

000267da <outs>:
{
   267da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267de:	4607      	mov	r7, r0
   267e0:	460e      	mov	r6, r1
   267e2:	4614      	mov	r4, r2
   267e4:	4698      	mov	r8, r3
	size_t count = 0;
   267e6:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   267e8:	e006      	b.n	267f8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   267ea:	4631      	mov	r1, r6
   267ec:	f814 0b01 	ldrb.w	r0, [r4], #1
   267f0:	47b8      	blx	r7
		if (rc < 0) {
   267f2:	2800      	cmp	r0, #0
   267f4:	db09      	blt.n	2680a <outs+0x30>
		++count;
   267f6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   267f8:	4544      	cmp	r4, r8
   267fa:	d3f6      	bcc.n	267ea <outs+0x10>
   267fc:	f1b8 0f00 	cmp.w	r8, #0
   26800:	d102      	bne.n	26808 <outs+0x2e>
   26802:	7823      	ldrb	r3, [r4, #0]
   26804:	2b00      	cmp	r3, #0
   26806:	d1f0      	bne.n	267ea <outs+0x10>
	return (int)count;
   26808:	4628      	mov	r0, r5
}
   2680a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002680e <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
   2680e:	fbb1 f1f0 	udiv	r1, r1, r0
}
   26812:	fb00 f001 	mul.w	r0, r0, r1
   26816:	4770      	bx	lr

00026818 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   26818:	6983      	ldr	r3, [r0, #24]
   2681a:	b113      	cbz	r3, 26822 <mod+0xa>
   2681c:	ea03 0001 	and.w	r0, r3, r1
   26820:	4770      	bx	lr
   26822:	6900      	ldr	r0, [r0, #16]
   26824:	fbb1 f3f0 	udiv	r3, r1, r0
   26828:	fb00 1013 	mls	r0, r0, r3, r1
}
   2682c:	4770      	bx	lr

0002682e <ring_buf_get_rewind_threshold>:
}
   2682e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   26832:	4770      	bx	lr

00026834 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
   26834:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   26836:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   26838:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   2683a:	42ac      	cmp	r4, r5
   2683c:	d304      	bcc.n	26848 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   2683e:	42ac      	cmp	r4, r5
   26840:	bf14      	ite	ne
   26842:	2000      	movne	r0, #0
   26844:	2001      	moveq	r0, #1
   26846:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   26848:	6906      	ldr	r6, [r0, #16]
   2684a:	f7ff fff0 	bl	2682e <ring_buf_get_rewind_threshold>
   2684e:	4601      	mov	r1, r0
   26850:	4630      	mov	r0, r6
   26852:	f7ff ffdc 	bl	2680e <get_rewind_value>
   26856:	4404      	add	r4, r0
   26858:	e7f1      	b.n	2683e <ring_buf_is_empty+0xa>

0002685a <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   2685a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2685e:	4604      	mov	r4, r0
   26860:	460e      	mov	r6, r1
   26862:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   26864:	f8d0 8008 	ldr.w	r8, [r0, #8]
   26868:	4641      	mov	r1, r8
   2686a:	f7ff ffd5 	bl	26818 <mod>
   2686e:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   26870:	6825      	ldr	r5, [r4, #0]
   26872:	6920      	ldr	r0, [r4, #16]
   26874:	4405      	add	r5, r0
   26876:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
   2687a:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
   2687c:	42ba      	cmp	r2, r7
   2687e:	bf28      	it	cs
   26880:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   26882:	4290      	cmp	r0, r2
   26884:	bf28      	it	cs
   26886:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   26888:	6963      	ldr	r3, [r4, #20]
   2688a:	4419      	add	r1, r3
   2688c:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   2688e:	68a3      	ldr	r3, [r4, #8]
   26890:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
   26892:	60a3      	str	r3, [r4, #8]

	return allocated;
}
   26894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026898 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   26898:	b570      	push	{r4, r5, r6, lr}
   2689a:	4604      	mov	r4, r0
   2689c:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   2689e:	f7ff ffc6 	bl	2682e <ring_buf_get_rewind_threshold>
   268a2:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
   268a4:	6866      	ldr	r6, [r4, #4]
   268a6:	1972      	adds	r2, r6, r5
   268a8:	6823      	ldr	r3, [r4, #0]
   268aa:	6920      	ldr	r0, [r4, #16]
   268ac:	4403      	add	r3, r0
   268ae:	429a      	cmp	r2, r3
   268b0:	d80b      	bhi.n	268ca <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   268b2:	428e      	cmp	r6, r1
   268b4:	d907      	bls.n	268c6 <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
   268b6:	f7ff ffaa 	bl	2680e <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
   268ba:	1a2d      	subs	r5, r5, r0
   268bc:	442e      	add	r6, r5
   268be:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
   268c0:	60a6      	str	r6, [r4, #8]

	return 0;
   268c2:	2000      	movs	r0, #0
}
   268c4:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
   268c6:	2000      	movs	r0, #0
   268c8:	e7f7      	b.n	268ba <ring_buf_put_finish+0x22>
		return -EINVAL;
   268ca:	f06f 0015 	mvn.w	r0, #21
   268ce:	e7f9      	b.n	268c4 <ring_buf_put_finish+0x2c>

000268d0 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   268d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268d4:	b082      	sub	sp, #8
   268d6:	4680      	mov	r8, r0
   268d8:	460e      	mov	r6, r1
   268da:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   268dc:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   268de:	462a      	mov	r2, r5
   268e0:	a901      	add	r1, sp, #4
   268e2:	4640      	mov	r0, r8
   268e4:	f7ff ffb9 	bl	2685a <ring_buf_put_claim>
   268e8:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   268ea:	4602      	mov	r2, r0
   268ec:	4631      	mov	r1, r6
   268ee:	9801      	ldr	r0, [sp, #4]
   268f0:	f001 f9ae 	bl	27c50 <memcpy>
		total_size += partial_size;
   268f4:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   268f6:	4426      	add	r6, r4
	} while (size && partial_size);
   268f8:	1b2d      	subs	r5, r5, r4
   268fa:	d001      	beq.n	26900 <ring_buf_put+0x30>
   268fc:	2c00      	cmp	r4, #0
   268fe:	d1ee      	bne.n	268de <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   26900:	4639      	mov	r1, r7
   26902:	4640      	mov	r0, r8
   26904:	f7ff ffc8 	bl	26898 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   26908:	4638      	mov	r0, r7
   2690a:	b002      	add	sp, #8
   2690c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026910 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   26910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26914:	4604      	mov	r4, r0
   26916:	460e      	mov	r6, r1
   26918:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
   2691a:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   2691c:	68c3      	ldr	r3, [r0, #12]
   2691e:	42ab      	cmp	r3, r5
   26920:	d818      	bhi.n	26954 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   26922:	f8d4 800c 	ldr.w	r8, [r4, #12]
   26926:	4641      	mov	r1, r8
   26928:	4620      	mov	r0, r4
   2692a:	f7ff ff75 	bl	26818 <mod>
   2692e:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
   26930:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
   26934:	6923      	ldr	r3, [r4, #16]
   26936:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   26938:	42bd      	cmp	r5, r7
   2693a:	bf28      	it	cs
   2693c:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   2693e:	42a8      	cmp	r0, r5
   26940:	bf28      	it	cs
   26942:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
   26944:	6963      	ldr	r3, [r4, #20]
   26946:	4419      	add	r1, r3
   26948:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   2694a:	68e3      	ldr	r3, [r4, #12]
   2694c:	4403      	add	r3, r0
   2694e:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
   26950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
   26954:	f8d0 8010 	ldr.w	r8, [r0, #16]
   26958:	f7ff ff69 	bl	2682e <ring_buf_get_rewind_threshold>
   2695c:	4601      	mov	r1, r0
   2695e:	4640      	mov	r0, r8
   26960:	f7ff ff55 	bl	2680e <get_rewind_value>
   26964:	4405      	add	r5, r0
   26966:	e7dc      	b.n	26922 <ring_buf_get_claim+0x12>

00026968 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   26968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2696a:	4604      	mov	r4, r0
   2696c:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
   2696e:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   26970:	68c3      	ldr	r3, [r0, #12]
   26972:	42b3      	cmp	r3, r6
   26974:	d80a      	bhi.n	2698c <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
   26976:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
   26978:	6823      	ldr	r3, [r4, #0]
   2697a:	195a      	adds	r2, r3, r5
   2697c:	42b2      	cmp	r2, r6
   2697e:	d80e      	bhi.n	2699e <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   26980:	1a2d      	subs	r5, r5, r0
   26982:	442b      	add	r3, r5
   26984:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   26986:	60e3      	str	r3, [r4, #12]

	return 0;
   26988:	2000      	movs	r0, #0
}
   2698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
   2698c:	6907      	ldr	r7, [r0, #16]
   2698e:	f7ff ff4e 	bl	2682e <ring_buf_get_rewind_threshold>
   26992:	4601      	mov	r1, r0
   26994:	4638      	mov	r0, r7
   26996:	f7ff ff3a 	bl	2680e <get_rewind_value>
		tail += rew;
   2699a:	4406      	add	r6, r0
   2699c:	e7ec      	b.n	26978 <ring_buf_get_finish+0x10>
		return -EINVAL;
   2699e:	f06f 0015 	mvn.w	r0, #21
   269a2:	e7f2      	b.n	2698a <ring_buf_get_finish+0x22>

000269a4 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   269a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   269a8:	b082      	sub	sp, #8
   269aa:	4680      	mov	r8, r0
   269ac:	460e      	mov	r6, r1
   269ae:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   269b0:	2700      	movs	r7, #0
   269b2:	e009      	b.n	269c8 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   269b4:	4602      	mov	r2, r0
   269b6:	9901      	ldr	r1, [sp, #4]
   269b8:	4630      	mov	r0, r6
   269ba:	f001 f949 	bl	27c50 <memcpy>
			data += partial_size;
   269be:	4426      	add	r6, r4
		}
		total_size += partial_size;
   269c0:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   269c2:	1b2d      	subs	r5, r5, r4
   269c4:	d009      	beq.n	269da <ring_buf_get+0x36>
   269c6:	b144      	cbz	r4, 269da <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   269c8:	462a      	mov	r2, r5
   269ca:	a901      	add	r1, sp, #4
   269cc:	4640      	mov	r0, r8
   269ce:	f7ff ff9f 	bl	26910 <ring_buf_get_claim>
   269d2:	4604      	mov	r4, r0
		if (data) {
   269d4:	2e00      	cmp	r6, #0
   269d6:	d1ed      	bne.n	269b4 <ring_buf_get+0x10>
   269d8:	e7f2      	b.n	269c0 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   269da:	4639      	mov	r1, r7
   269dc:	4640      	mov	r0, r8
   269de:	f7ff ffc3 	bl	26968 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   269e2:	4638      	mov	r0, r7
   269e4:	b002      	add	sp, #8
   269e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000269ea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   269ea:	4770      	bx	lr

000269ec <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   269ec:	2300      	movs	r3, #0
   269ee:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   269f0:	6003      	str	r3, [r0, #0]
}
   269f2:	4770      	bx	lr

000269f4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   269f4:	6803      	ldr	r3, [r0, #0]
   269f6:	b12b      	cbz	r3, 26a04 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   269f8:	6843      	ldr	r3, [r0, #4]
   269fa:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   269fc:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   269fe:	2300      	movs	r3, #0
   26a00:	600b      	str	r3, [r1, #0]
}
   26a02:	4770      	bx	lr
		list->head = msg;
   26a04:	6001      	str	r1, [r0, #0]
   26a06:	e7f9      	b.n	269fc <log_list_add_tail+0x8>

00026a08 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   26a08:	6800      	ldr	r0, [r0, #0]
   26a0a:	4770      	bx	lr

00026a0c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   26a0c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   26a0e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   26a10:	b108      	cbz	r0, 26a16 <log_list_head_get+0xa>
		list->head = list->head->next;
   26a12:	6802      	ldr	r2, [r0, #0]
   26a14:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   26a16:	4770      	bx	lr

00026a18 <dummy_timestamp>:
}
   26a18:	2000      	movs	r0, #0
   26a1a:	4770      	bx	lr

00026a1c <msg_filter_check>:
}
   26a1c:	2001      	movs	r0, #1
   26a1e:	4770      	bx	lr

00026a20 <default_get_timestamp>:
{
   26a20:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   26a22:	f004 f928 	bl	2ac76 <sys_clock_cycle_get_32>
}
   26a26:	bd08      	pop	{r3, pc}

00026a28 <z_log_get_s_mask>:
{
   26a28:	b470      	push	{r4, r5, r6}
   26a2a:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   26a2c:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   26a2e:	4605      	mov	r5, r0
	bool arm = false;
   26a30:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   26a32:	e001      	b.n	26a38 <z_log_get_s_mask+0x10>
			arm = !arm;
   26a34:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   26a38:	f813 2b01 	ldrb.w	r2, [r3], #1
   26a3c:	b19a      	cbz	r2, 26a66 <z_log_get_s_mask+0x3e>
   26a3e:	428d      	cmp	r5, r1
   26a40:	d211      	bcs.n	26a66 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   26a42:	2a25      	cmp	r2, #37	; 0x25
   26a44:	d0f6      	beq.n	26a34 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   26a46:	2c00      	cmp	r4, #0
   26a48:	d0f6      	beq.n	26a38 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   26a4a:	f042 0620 	orr.w	r6, r2, #32
   26a4e:	3e61      	subs	r6, #97	; 0x61
   26a50:	2e19      	cmp	r6, #25
   26a52:	d8f1      	bhi.n	26a38 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   26a54:	2a73      	cmp	r2, #115	; 0x73
   26a56:	d002      	beq.n	26a5e <z_log_get_s_mask+0x36>
			arg++;
   26a58:	3501      	adds	r5, #1
			arm = false;
   26a5a:	2400      	movs	r4, #0
   26a5c:	e7ec      	b.n	26a38 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   26a5e:	2201      	movs	r2, #1
   26a60:	40aa      	lsls	r2, r5
   26a62:	4310      	orrs	r0, r2
   26a64:	e7f8      	b.n	26a58 <z_log_get_s_mask+0x30>
}
   26a66:	bc70      	pop	{r4, r5, r6}
   26a68:	4770      	bx	lr

00026a6a <block_on_alloc>:
}
   26a6a:	2000      	movs	r0, #0
   26a6c:	4770      	bx	lr

00026a6e <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   26a6e:	2901      	cmp	r1, #1
   26a70:	d906      	bls.n	26a80 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   26a72:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   26a74:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   26a76:	2906      	cmp	r1, #6
   26a78:	d907      	bls.n	26a8a <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   26a7a:	3907      	subs	r1, #7
		cont = cont->next;
   26a7c:	681b      	ldr	r3, [r3, #0]
   26a7e:	e7fa      	b.n	26a76 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   26a80:	3104      	adds	r1, #4
   26a82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26a86:	6888      	ldr	r0, [r1, #8]
   26a88:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   26a8a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   26a8e:	6848      	ldr	r0, [r1, #4]
}
   26a90:	4770      	bx	lr

00026a92 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   26a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a96:	460d      	mov	r5, r1
   26a98:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   26a9a:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   26a9c:	2a03      	cmp	r2, #3
   26a9e:	d917      	bls.n	26ad0 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   26aa0:	2208      	movs	r2, #8
   26aa2:	3018      	adds	r0, #24
   26aa4:	f001 f8d4 	bl	27c50 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   26aa8:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   26aaa:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   26aac:	b1b4      	cbz	r4, 26adc <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   26aae:	46a0      	mov	r8, r4
   26ab0:	2c07      	cmp	r4, #7
   26ab2:	bf28      	it	cs
   26ab4:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   26ab8:	ea4f 0788 	mov.w	r7, r8, lsl #2
   26abc:	463a      	mov	r2, r7
   26abe:	4629      	mov	r1, r5
   26ac0:	1d30      	adds	r0, r6, #4
   26ac2:	f001 f8c5 	bl	27c50 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   26ac6:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   26aca:	443d      	add	r5, r7
		cont = cont->next;
   26acc:	6836      	ldr	r6, [r6, #0]
   26ace:	e7ed      	b.n	26aac <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   26ad0:	0092      	lsls	r2, r2, #2
   26ad2:	3014      	adds	r0, #20
   26ad4:	f001 f8bc 	bl	27c50 <memcpy>
		nargs  = 0U;
   26ad8:	2400      	movs	r4, #0
   26ada:	e7e7      	b.n	26aac <copy_args_to_msg+0x1a>
	}
}
   26adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026ae0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   26ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26ae4:	461c      	mov	r4, r3
   26ae6:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   26aea:	8903      	ldrh	r3, [r0, #8]
   26aec:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   26af0:	42a3      	cmp	r3, r4
   26af2:	d91f      	bls.n	26b34 <log_msg_hexdump_data_op+0x54>
   26af4:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   26af6:	6811      	ldr	r1, [r2, #0]
   26af8:	4421      	add	r1, r4
   26afa:	4299      	cmp	r1, r3
   26afc:	d901      	bls.n	26b02 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   26afe:	1b19      	subs	r1, r3, r4
   26b00:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   26b02:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   26b04:	2b0c      	cmp	r3, #12
   26b06:	d919      	bls.n	26b3c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   26b08:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   26b0c:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   26b0e:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   26b10:	42a3      	cmp	r3, r4
   26b12:	d91e      	bls.n	26b52 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   26b14:	42bb      	cmp	r3, r7
   26b16:	bf28      	it	cs
   26b18:	463b      	movcs	r3, r7
   26b1a:	461d      	mov	r5, r3

		if (put_op) {
   26b1c:	f1b9 0f00 	cmp.w	r9, #0
   26b20:	d010      	beq.n	26b44 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   26b22:	461a      	mov	r2, r3
   26b24:	4641      	mov	r1, r8
   26b26:	eb0c 0004 	add.w	r0, ip, r4
   26b2a:	f001 f891 	bl	27c50 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   26b2e:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   26b30:	44a8      	add	r8, r5
   26b32:	e021      	b.n	26b78 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   26b34:	2300      	movs	r3, #0
   26b36:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   26b38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   26b3c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   26b40:	2600      	movs	r6, #0
   26b42:	e7e5      	b.n	26b10 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   26b44:	461a      	mov	r2, r3
   26b46:	eb0c 0104 	add.w	r1, ip, r4
   26b4a:	4640      	mov	r0, r8
   26b4c:	f001 f880 	bl	27c50 <memcpy>
   26b50:	e7ed      	b.n	26b2e <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   26b52:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   26b54:	b91e      	cbnz	r6, 26b5e <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   26b56:	6946      	ldr	r6, [r0, #20]
   26b58:	e001      	b.n	26b5e <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   26b5a:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   26b5c:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   26b5e:	2c1b      	cmp	r4, #27
   26b60:	d8fb      	bhi.n	26b5a <log_msg_hexdump_data_op+0x7a>
   26b62:	e009      	b.n	26b78 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   26b64:	1931      	adds	r1, r6, r4
   26b66:	462a      	mov	r2, r5
   26b68:	3104      	adds	r1, #4
   26b6a:	4640      	mov	r0, r8
   26b6c:	f001 f870 	bl	27c50 <memcpy>
		cont = cont->next;
   26b70:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   26b72:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   26b74:	44a8      	add	r8, r5
		offset = 0;
   26b76:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   26b78:	2f00      	cmp	r7, #0
   26b7a:	d0dd      	beq.n	26b38 <log_msg_hexdump_data_op+0x58>
   26b7c:	2e00      	cmp	r6, #0
   26b7e:	d0db      	beq.n	26b38 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   26b80:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   26b84:	42bd      	cmp	r5, r7
   26b86:	bf28      	it	cs
   26b88:	463d      	movcs	r5, r7
		if (put_op) {
   26b8a:	f1b9 0f00 	cmp.w	r9, #0
   26b8e:	d0e9      	beq.n	26b64 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   26b90:	1930      	adds	r0, r6, r4
   26b92:	462a      	mov	r2, r5
   26b94:	4641      	mov	r1, r8
   26b96:	3004      	adds	r0, #4
   26b98:	f001 f85a 	bl	27c50 <memcpy>
   26b9c:	e7e8      	b.n	26b70 <log_msg_hexdump_data_op+0x90>

00026b9e <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   26b9e:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26ba0:	f3bf 8f5b 	dmb	ish
   26ba4:	e850 3f00 	ldrex	r3, [r0]
   26ba8:	3301      	adds	r3, #1
   26baa:	e840 3200 	strex	r2, r3, [r0]
   26bae:	2a00      	cmp	r2, #0
   26bb0:	d1f8      	bne.n	26ba4 <log_msg_get+0x6>
   26bb2:	f3bf 8f5b 	dmb	ish
}
   26bb6:	4770      	bx	lr

00026bb8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   26bb8:	7a40      	ldrb	r0, [r0, #9]
}
   26bba:	0900      	lsrs	r0, r0, #4
   26bbc:	4770      	bx	lr

00026bbe <log_msg_arg_get>:
{
   26bbe:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   26bc0:	7a43      	ldrb	r3, [r0, #9]
   26bc2:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   26bc6:	d20a      	bcs.n	26bde <log_msg_arg_get+0x20>
   26bc8:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   26bca:	2a03      	cmp	r2, #3
   26bcc:	d804      	bhi.n	26bd8 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   26bce:	3104      	adds	r1, #4
   26bd0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   26bd4:	6840      	ldr	r0, [r0, #4]
   26bd6:	e003      	b.n	26be0 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   26bd8:	f7ff ff49 	bl	26a6e <cont_arg_get>
   26bdc:	e000      	b.n	26be0 <log_msg_arg_get+0x22>
		return 0;
   26bde:	2000      	movs	r0, #0
}
   26be0:	bd08      	pop	{r3, pc}

00026be2 <log_msg_str_get>:
}
   26be2:	6900      	ldr	r0, [r0, #16]
   26be4:	4770      	bx	lr

00026be6 <log_msg_put>:
{
   26be6:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   26be8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   26bea:	f3bf 8f5b 	dmb	ish
   26bee:	e853 2f00 	ldrex	r2, [r3]
   26bf2:	3a01      	subs	r2, #1
   26bf4:	e843 2100 	strex	r1, r2, [r3]
   26bf8:	2900      	cmp	r1, #0
   26bfa:	d1f8      	bne.n	26bee <log_msg_put+0x8>
   26bfc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   26c00:	6843      	ldr	r3, [r0, #4]
   26c02:	b103      	cbz	r3, 26c06 <log_msg_put+0x20>
}
   26c04:	bd08      	pop	{r3, pc}
		msg_free(msg);
   26c06:	f7eb fb13 	bl	12230 <msg_free>
}
   26c0a:	e7fb      	b.n	26c04 <log_msg_put+0x1e>

00026c0c <msg_alloc>:
{
   26c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c0e:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   26c10:	f7eb faf2 	bl	121f8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   26c14:	4607      	mov	r7, r0
   26c16:	b140      	cbz	r0, 26c2a <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   26c18:	2301      	movs	r3, #1
   26c1a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   26c1c:	2200      	movs	r2, #0
   26c1e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   26c20:	f04f 0300 	mov.w	r3, #0
   26c24:	f362 0300 	bfi	r3, r2, #0, #1
   26c28:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   26c2a:	b1f7      	cbz	r7, 26c6a <msg_alloc+0x5e>
   26c2c:	2d03      	cmp	r5, #3
   26c2e:	d91c      	bls.n	26c6a <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   26c30:	7a7b      	ldrb	r3, [r7, #9]
   26c32:	f36f 1307 	bfc	r3, #4, #4
   26c36:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   26c38:	7a3b      	ldrb	r3, [r7, #8]
   26c3a:	f043 0302 	orr.w	r3, r3, #2
   26c3e:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   26c40:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   26c42:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   26c46:	2300      	movs	r3, #0
   26c48:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   26c4a:	2d00      	cmp	r5, #0
   26c4c:	dd0d      	ble.n	26c6a <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   26c4e:	f7eb fad3 	bl	121f8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   26c52:	4604      	mov	r4, r0
   26c54:	b128      	cbz	r0, 26c62 <msg_alloc+0x56>
		*next = cont;
   26c56:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   26c58:	2300      	movs	r3, #0
   26c5a:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   26c5c:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   26c5e:	3d07      	subs	r5, #7
   26c60:	e7f3      	b.n	26c4a <msg_alloc+0x3e>
			msg_free(msg);
   26c62:	4638      	mov	r0, r7
   26c64:	f7eb fae4 	bl	12230 <msg_free>
			return NULL;
   26c68:	4627      	mov	r7, r4
}
   26c6a:	4638      	mov	r0, r7
   26c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026c6e <log_msg_create_n>:
{
   26c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c70:	4607      	mov	r7, r0
   26c72:	460e      	mov	r6, r1
   26c74:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   26c76:	4610      	mov	r0, r2
   26c78:	f7ff ffc8 	bl	26c0c <msg_alloc>
	if (msg != NULL) {
   26c7c:	4605      	mov	r5, r0
   26c7e:	b140      	cbz	r0, 26c92 <log_msg_create_n+0x24>
		msg->str = str;
   26c80:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   26c82:	7a43      	ldrb	r3, [r0, #9]
   26c84:	f364 1307 	bfi	r3, r4, #4, #4
   26c88:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   26c8a:	4622      	mov	r2, r4
   26c8c:	4631      	mov	r1, r6
   26c8e:	f7ff ff00 	bl	26a92 <copy_args_to_msg>
}
   26c92:	4628      	mov	r0, r5
   26c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026c96 <log_msg_hexdump_create>:
{
   26c96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26c9a:	4606      	mov	r6, r0
   26c9c:	460f      	mov	r7, r1
   26c9e:	4614      	mov	r4, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   26ca0:	f643 75ff 	movw	r5, #16383	; 0x3fff
   26ca4:	4295      	cmp	r5, r2
   26ca6:	bf28      	it	cs
   26ca8:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   26caa:	f7eb faa5 	bl	121f8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   26cae:	4681      	mov	r9, r0
   26cb0:	2800      	cmp	r0, #0
   26cb2:	d045      	beq.n	26d40 <log_msg_hexdump_create+0xaa>
	msg->hdr.ref_cnt = 1;
   26cb4:	2301      	movs	r3, #1
   26cb6:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   26cb8:	7a03      	ldrb	r3, [r0, #8]
   26cba:	f043 0301 	orr.w	r3, r3, #1
   26cbe:	7203      	strb	r3, [r0, #8]
	msg->hdr.params.hexdump.length = length;
   26cc0:	8903      	ldrh	r3, [r0, #8]
   26cc2:	f365 038f 	bfi	r3, r5, #2, #14
   26cc6:	8103      	strh	r3, [r0, #8]
	msg->str = str;
   26cc8:	6106      	str	r6, [r0, #16]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   26cca:	2c0c      	cmp	r4, #12
   26ccc:	d927      	bls.n	26d1e <log_msg_hexdump_create+0x88>
		(void)memcpy(msg->payload.ext.data.bytes,
   26cce:	2208      	movs	r2, #8
   26cd0:	4639      	mov	r1, r7
   26cd2:	3018      	adds	r0, #24
   26cd4:	f000 ffbc 	bl	27c50 <memcpy>
		msg->payload.ext.next = NULL;
   26cd8:	2300      	movs	r3, #0
   26cda:	f8c9 3014 	str.w	r3, [r9, #20]
		msg->hdr.params.generic.ext = 1;
   26cde:	f899 3008 	ldrb.w	r3, [r9, #8]
   26ce2:	f043 0302 	orr.w	r3, r3, #2
   26ce6:	f889 3008 	strb.w	r3, [r9, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   26cea:	3708      	adds	r7, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   26cec:	3d08      	subs	r5, #8
	prev_cont = &msg->payload.ext.next;
   26cee:	f109 0814 	add.w	r8, r9, #20
	while (length > 0) {
   26cf2:	b32d      	cbz	r5, 26d40 <log_msg_hexdump_create+0xaa>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   26cf4:	f7eb fa80 	bl	121f8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   26cf8:	4604      	mov	r4, r0
   26cfa:	b1e8      	cbz	r0, 26d38 <log_msg_hexdump_create+0xa2>
		*prev_cont = cont;
   26cfc:	f8c8 0000 	str.w	r0, [r8]
		cont->next = NULL;
   26d00:	2300      	movs	r3, #0
   26d02:	6003      	str	r3, [r0, #0]
		prev_cont = &cont->next;
   26d04:	4680      	mov	r8, r0
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   26d06:	462e      	mov	r6, r5
   26d08:	2d1c      	cmp	r5, #28
   26d0a:	bf28      	it	cs
   26d0c:	261c      	movcs	r6, #28
		(void)memcpy(cont->payload.bytes, data, chunk_length);
   26d0e:	4632      	mov	r2, r6
   26d10:	4639      	mov	r1, r7
   26d12:	3004      	adds	r0, #4
   26d14:	f000 ff9c 	bl	27c50 <memcpy>
		data += chunk_length;
   26d18:	4437      	add	r7, r6
		length -= chunk_length;
   26d1a:	1bad      	subs	r5, r5, r6
   26d1c:	e7e9      	b.n	26cf2 <log_msg_hexdump_create+0x5c>
		(void)memcpy(msg->payload.single.bytes, data, length);
   26d1e:	462a      	mov	r2, r5
   26d20:	4639      	mov	r1, r7
   26d22:	3014      	adds	r0, #20
   26d24:	f000 ff94 	bl	27c50 <memcpy>
		msg->hdr.params.generic.ext = 0;
   26d28:	f899 3008 	ldrb.w	r3, [r9, #8]
   26d2c:	f36f 0341 	bfc	r3, #1, #1
   26d30:	f889 3008 	strb.w	r3, [r9, #8]
		length = 0U;
   26d34:	2500      	movs	r5, #0
   26d36:	e7da      	b.n	26cee <log_msg_hexdump_create+0x58>
			msg_free(msg);
   26d38:	4648      	mov	r0, r9
   26d3a:	f7eb fa79 	bl	12230 <msg_free>
			return NULL;
   26d3e:	46a1      	mov	r9, r4
}
   26d40:	4648      	mov	r0, r9
   26d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026d46 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   26d46:	b510      	push	{r4, lr}
   26d48:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   26d4a:	2400      	movs	r4, #0
   26d4c:	9400      	str	r4, [sp, #0]
   26d4e:	f7ff fec7 	bl	26ae0 <log_msg_hexdump_data_op>
}
   26d52:	b002      	add	sp, #8
   26d54:	bd10      	pop	{r4, pc}

00026d56 <buffer_write>:
{
   26d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d58:	4607      	mov	r7, r0
   26d5a:	460d      	mov	r5, r1
   26d5c:	4614      	mov	r4, r2
   26d5e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   26d60:	4632      	mov	r2, r6
   26d62:	4621      	mov	r1, r4
   26d64:	4628      	mov	r0, r5
   26d66:	47b8      	blx	r7
		buf += processed;
   26d68:	4405      	add	r5, r0
	} while (len != 0);
   26d6a:	1a24      	subs	r4, r4, r0
   26d6c:	d1f8      	bne.n	26d60 <buffer_write+0xa>
}
   26d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00026d70 <color_prefix>:
{
   26d70:	b508      	push	{r3, lr}
   26d72:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   26d74:	2201      	movs	r2, #1
   26d76:	f7eb faf3 	bl	12360 <color_print>
}
   26d7a:	bd08      	pop	{r3, pc}

00026d7c <color_postfix>:
{
   26d7c:	b508      	push	{r3, lr}
   26d7e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   26d80:	2200      	movs	r2, #0
   26d82:	f7eb faed 	bl	12360 <color_print>
}
   26d86:	bd08      	pop	{r3, pc}

00026d88 <postfix_print>:
{
   26d88:	b538      	push	{r3, r4, r5, lr}
   26d8a:	4605      	mov	r5, r0
   26d8c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   26d8e:	f001 0101 	and.w	r1, r1, #1
   26d92:	f7ff fff3 	bl	26d7c <color_postfix>
	newline_print(output, flags);
   26d96:	4621      	mov	r1, r4
   26d98:	4628      	mov	r0, r5
   26d9a:	f7eb faf7 	bl	1238c <newline_print>
}
   26d9e:	bd38      	pop	{r3, r4, r5, pc}

00026da0 <prefix_print>:
{
   26da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26da4:	b083      	sub	sp, #12
   26da6:	4604      	mov	r4, r0
   26da8:	4615      	mov	r5, r2
   26daa:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   26dae:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   26db2:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   26db6:	f011 0702 	ands.w	r7, r1, #2
   26dba:	d113      	bne.n	26de4 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   26dbc:	4632      	mov	r2, r6
   26dbe:	4649      	mov	r1, r9
   26dc0:	4620      	mov	r0, r4
   26dc2:	f7ff ffd5 	bl	26d70 <color_prefix>
	length += ids_print(output, level_on, func_on,
   26dc6:	9601      	str	r6, [sp, #4]
   26dc8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   26dcc:	9300      	str	r3, [sp, #0]
   26dce:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   26dd2:	462a      	mov	r2, r5
   26dd4:	4641      	mov	r1, r8
   26dd6:	4620      	mov	r0, r4
   26dd8:	f7eb fb4a 	bl	12470 <ids_print>
}
   26ddc:	4438      	add	r0, r7
   26dde:	b003      	add	sp, #12
   26de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   26de4:	461a      	mov	r2, r3
   26de6:	f7eb fa75 	bl	122d4 <timestamp_print>
   26dea:	4607      	mov	r7, r0
   26dec:	e7e6      	b.n	26dbc <prefix_print+0x1c>

00026dee <std_print>:
{
   26dee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26df2:	b08e      	sub	sp, #56	; 0x38
   26df4:	af0e      	add	r7, sp, #56	; 0x38
   26df6:	4606      	mov	r6, r0
   26df8:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   26dfa:	f7ff fef2 	bl	26be2 <log_msg_str_get>
   26dfe:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   26e00:	4630      	mov	r0, r6
   26e02:	f7ff fed9 	bl	26bb8 <log_msg_nargs_get>
   26e06:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   26e08:	0083      	lsls	r3, r0, #2
   26e0a:	3307      	adds	r3, #7
   26e0c:	f023 0307 	bic.w	r3, r3, #7
   26e10:	ebad 0d03 	sub.w	sp, sp, r3
   26e14:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   26e16:	2400      	movs	r4, #0
   26e18:	4544      	cmp	r4, r8
   26e1a:	d207      	bcs.n	26e2c <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   26e1c:	4621      	mov	r1, r4
   26e1e:	4630      	mov	r0, r6
   26e20:	f7ff fecd 	bl	26bbe <log_msg_arg_get>
   26e24:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   26e28:	3401      	adds	r4, #1
   26e2a:	e7f5      	b.n	26e18 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   26e2c:	4630      	mov	r0, r6
   26e2e:	f7ff fec3 	bl	26bb8 <log_msg_nargs_get>
   26e32:	280f      	cmp	r0, #15
   26e34:	d815      	bhi.n	26e62 <std_print+0x74>
   26e36:	e8df f010 	tbh	[pc, r0, lsl #1]
   26e3a:	0010      	.short	0x0010
   26e3c:	001d0017 	.word	0x001d0017
   26e40:	002d0024 	.word	0x002d0024
   26e44:	00450038 	.word	0x00450038
   26e48:	00650054 	.word	0x00650054
   26e4c:	008d0078 	.word	0x008d0078
   26e50:	00bd00a4 	.word	0x00bd00a4
   26e54:	00f500d8 	.word	0x00f500d8
   26e58:	0114      	.short	0x0114
		print_formatted(output, str);
   26e5a:	4651      	mov	r1, sl
   26e5c:	4648      	mov	r0, r9
   26e5e:	f7eb fa27 	bl	122b0 <print_formatted>
}
   26e62:	46bd      	mov	sp, r7
   26e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   26e68:	682a      	ldr	r2, [r5, #0]
   26e6a:	4651      	mov	r1, sl
   26e6c:	4648      	mov	r0, r9
   26e6e:	f7eb fa1f 	bl	122b0 <print_formatted>
		break;
   26e72:	e7f6      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   26e74:	686b      	ldr	r3, [r5, #4]
   26e76:	682a      	ldr	r2, [r5, #0]
   26e78:	4651      	mov	r1, sl
   26e7a:	4648      	mov	r0, r9
   26e7c:	f7eb fa18 	bl	122b0 <print_formatted>
		break;
   26e80:	e7ef      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   26e82:	686b      	ldr	r3, [r5, #4]
   26e84:	682a      	ldr	r2, [r5, #0]
   26e86:	68a9      	ldr	r1, [r5, #8]
   26e88:	9100      	str	r1, [sp, #0]
   26e8a:	4651      	mov	r1, sl
   26e8c:	4648      	mov	r0, r9
   26e8e:	f7eb fa0f 	bl	122b0 <print_formatted>
		break;
   26e92:	e7e6      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26e94:	686b      	ldr	r3, [r5, #4]
   26e96:	682a      	ldr	r2, [r5, #0]
   26e98:	68e9      	ldr	r1, [r5, #12]
   26e9a:	9101      	str	r1, [sp, #4]
   26e9c:	68a9      	ldr	r1, [r5, #8]
   26e9e:	9100      	str	r1, [sp, #0]
   26ea0:	4651      	mov	r1, sl
   26ea2:	4648      	mov	r0, r9
   26ea4:	f7eb fa04 	bl	122b0 <print_formatted>
		break;
   26ea8:	e7db      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26eaa:	686b      	ldr	r3, [r5, #4]
   26eac:	682a      	ldr	r2, [r5, #0]
   26eae:	6929      	ldr	r1, [r5, #16]
   26eb0:	9102      	str	r1, [sp, #8]
   26eb2:	68e9      	ldr	r1, [r5, #12]
   26eb4:	9101      	str	r1, [sp, #4]
   26eb6:	68a9      	ldr	r1, [r5, #8]
   26eb8:	9100      	str	r1, [sp, #0]
   26eba:	4651      	mov	r1, sl
   26ebc:	4648      	mov	r0, r9
   26ebe:	f7eb f9f7 	bl	122b0 <print_formatted>
		break;
   26ec2:	e7ce      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26ec4:	686b      	ldr	r3, [r5, #4]
   26ec6:	682a      	ldr	r2, [r5, #0]
   26ec8:	6969      	ldr	r1, [r5, #20]
   26eca:	9103      	str	r1, [sp, #12]
   26ecc:	6929      	ldr	r1, [r5, #16]
   26ece:	9102      	str	r1, [sp, #8]
   26ed0:	68e9      	ldr	r1, [r5, #12]
   26ed2:	9101      	str	r1, [sp, #4]
   26ed4:	68a9      	ldr	r1, [r5, #8]
   26ed6:	9100      	str	r1, [sp, #0]
   26ed8:	4651      	mov	r1, sl
   26eda:	4648      	mov	r0, r9
   26edc:	f7eb f9e8 	bl	122b0 <print_formatted>
		break;
   26ee0:	e7bf      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26ee2:	686b      	ldr	r3, [r5, #4]
   26ee4:	682a      	ldr	r2, [r5, #0]
   26ee6:	69a9      	ldr	r1, [r5, #24]
   26ee8:	9104      	str	r1, [sp, #16]
   26eea:	6969      	ldr	r1, [r5, #20]
   26eec:	9103      	str	r1, [sp, #12]
   26eee:	6929      	ldr	r1, [r5, #16]
   26ef0:	9102      	str	r1, [sp, #8]
   26ef2:	68e9      	ldr	r1, [r5, #12]
   26ef4:	9101      	str	r1, [sp, #4]
   26ef6:	68a9      	ldr	r1, [r5, #8]
   26ef8:	9100      	str	r1, [sp, #0]
   26efa:	4651      	mov	r1, sl
   26efc:	4648      	mov	r0, r9
   26efe:	f7eb f9d7 	bl	122b0 <print_formatted>
		break;
   26f02:	e7ae      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26f04:	686b      	ldr	r3, [r5, #4]
   26f06:	682a      	ldr	r2, [r5, #0]
   26f08:	69e9      	ldr	r1, [r5, #28]
   26f0a:	9105      	str	r1, [sp, #20]
   26f0c:	69a9      	ldr	r1, [r5, #24]
   26f0e:	9104      	str	r1, [sp, #16]
   26f10:	6969      	ldr	r1, [r5, #20]
   26f12:	9103      	str	r1, [sp, #12]
   26f14:	6929      	ldr	r1, [r5, #16]
   26f16:	9102      	str	r1, [sp, #8]
   26f18:	68e9      	ldr	r1, [r5, #12]
   26f1a:	9101      	str	r1, [sp, #4]
   26f1c:	68a9      	ldr	r1, [r5, #8]
   26f1e:	9100      	str	r1, [sp, #0]
   26f20:	4651      	mov	r1, sl
   26f22:	4648      	mov	r0, r9
   26f24:	f7eb f9c4 	bl	122b0 <print_formatted>
		break;
   26f28:	e79b      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26f2a:	686b      	ldr	r3, [r5, #4]
   26f2c:	682a      	ldr	r2, [r5, #0]
   26f2e:	6a29      	ldr	r1, [r5, #32]
   26f30:	9106      	str	r1, [sp, #24]
   26f32:	69e9      	ldr	r1, [r5, #28]
   26f34:	9105      	str	r1, [sp, #20]
   26f36:	69a9      	ldr	r1, [r5, #24]
   26f38:	9104      	str	r1, [sp, #16]
   26f3a:	6969      	ldr	r1, [r5, #20]
   26f3c:	9103      	str	r1, [sp, #12]
   26f3e:	6929      	ldr	r1, [r5, #16]
   26f40:	9102      	str	r1, [sp, #8]
   26f42:	68e9      	ldr	r1, [r5, #12]
   26f44:	9101      	str	r1, [sp, #4]
   26f46:	68a9      	ldr	r1, [r5, #8]
   26f48:	9100      	str	r1, [sp, #0]
   26f4a:	4651      	mov	r1, sl
   26f4c:	4648      	mov	r0, r9
   26f4e:	f7eb f9af 	bl	122b0 <print_formatted>
		break;
   26f52:	e786      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26f54:	686b      	ldr	r3, [r5, #4]
   26f56:	682a      	ldr	r2, [r5, #0]
   26f58:	6a69      	ldr	r1, [r5, #36]	; 0x24
   26f5a:	9107      	str	r1, [sp, #28]
   26f5c:	6a29      	ldr	r1, [r5, #32]
   26f5e:	9106      	str	r1, [sp, #24]
   26f60:	69e9      	ldr	r1, [r5, #28]
   26f62:	9105      	str	r1, [sp, #20]
   26f64:	69a9      	ldr	r1, [r5, #24]
   26f66:	9104      	str	r1, [sp, #16]
   26f68:	6969      	ldr	r1, [r5, #20]
   26f6a:	9103      	str	r1, [sp, #12]
   26f6c:	6929      	ldr	r1, [r5, #16]
   26f6e:	9102      	str	r1, [sp, #8]
   26f70:	68e9      	ldr	r1, [r5, #12]
   26f72:	9101      	str	r1, [sp, #4]
   26f74:	68a9      	ldr	r1, [r5, #8]
   26f76:	9100      	str	r1, [sp, #0]
   26f78:	4651      	mov	r1, sl
   26f7a:	4648      	mov	r0, r9
   26f7c:	f7eb f998 	bl	122b0 <print_formatted>
		break;
   26f80:	e76f      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26f82:	686b      	ldr	r3, [r5, #4]
   26f84:	682a      	ldr	r2, [r5, #0]
   26f86:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   26f88:	9108      	str	r1, [sp, #32]
   26f8a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   26f8c:	9107      	str	r1, [sp, #28]
   26f8e:	6a29      	ldr	r1, [r5, #32]
   26f90:	9106      	str	r1, [sp, #24]
   26f92:	69e9      	ldr	r1, [r5, #28]
   26f94:	9105      	str	r1, [sp, #20]
   26f96:	69a9      	ldr	r1, [r5, #24]
   26f98:	9104      	str	r1, [sp, #16]
   26f9a:	6969      	ldr	r1, [r5, #20]
   26f9c:	9103      	str	r1, [sp, #12]
   26f9e:	6929      	ldr	r1, [r5, #16]
   26fa0:	9102      	str	r1, [sp, #8]
   26fa2:	68e9      	ldr	r1, [r5, #12]
   26fa4:	9101      	str	r1, [sp, #4]
   26fa6:	68a9      	ldr	r1, [r5, #8]
   26fa8:	9100      	str	r1, [sp, #0]
   26faa:	4651      	mov	r1, sl
   26fac:	4648      	mov	r0, r9
   26fae:	f7eb f97f 	bl	122b0 <print_formatted>
		break;
   26fb2:	e756      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26fb4:	686b      	ldr	r3, [r5, #4]
   26fb6:	682a      	ldr	r2, [r5, #0]
   26fb8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   26fba:	9109      	str	r1, [sp, #36]	; 0x24
   26fbc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   26fbe:	9108      	str	r1, [sp, #32]
   26fc0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   26fc2:	9107      	str	r1, [sp, #28]
   26fc4:	6a29      	ldr	r1, [r5, #32]
   26fc6:	9106      	str	r1, [sp, #24]
   26fc8:	69e9      	ldr	r1, [r5, #28]
   26fca:	9105      	str	r1, [sp, #20]
   26fcc:	69a9      	ldr	r1, [r5, #24]
   26fce:	9104      	str	r1, [sp, #16]
   26fd0:	6969      	ldr	r1, [r5, #20]
   26fd2:	9103      	str	r1, [sp, #12]
   26fd4:	6929      	ldr	r1, [r5, #16]
   26fd6:	9102      	str	r1, [sp, #8]
   26fd8:	68e9      	ldr	r1, [r5, #12]
   26fda:	9101      	str	r1, [sp, #4]
   26fdc:	68a9      	ldr	r1, [r5, #8]
   26fde:	9100      	str	r1, [sp, #0]
   26fe0:	4651      	mov	r1, sl
   26fe2:	4648      	mov	r0, r9
   26fe4:	f7eb f964 	bl	122b0 <print_formatted>
		break;
   26fe8:	e73b      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   26fea:	686b      	ldr	r3, [r5, #4]
   26fec:	682a      	ldr	r2, [r5, #0]
   26fee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   26ff0:	910a      	str	r1, [sp, #40]	; 0x28
   26ff2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   26ff4:	9109      	str	r1, [sp, #36]	; 0x24
   26ff6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   26ff8:	9108      	str	r1, [sp, #32]
   26ffa:	6a69      	ldr	r1, [r5, #36]	; 0x24
   26ffc:	9107      	str	r1, [sp, #28]
   26ffe:	6a29      	ldr	r1, [r5, #32]
   27000:	9106      	str	r1, [sp, #24]
   27002:	69e9      	ldr	r1, [r5, #28]
   27004:	9105      	str	r1, [sp, #20]
   27006:	69a9      	ldr	r1, [r5, #24]
   27008:	9104      	str	r1, [sp, #16]
   2700a:	6969      	ldr	r1, [r5, #20]
   2700c:	9103      	str	r1, [sp, #12]
   2700e:	6929      	ldr	r1, [r5, #16]
   27010:	9102      	str	r1, [sp, #8]
   27012:	68e9      	ldr	r1, [r5, #12]
   27014:	9101      	str	r1, [sp, #4]
   27016:	68a9      	ldr	r1, [r5, #8]
   27018:	9100      	str	r1, [sp, #0]
   2701a:	4651      	mov	r1, sl
   2701c:	4648      	mov	r0, r9
   2701e:	f7eb f947 	bl	122b0 <print_formatted>
		break;
   27022:	e71e      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   27024:	686b      	ldr	r3, [r5, #4]
   27026:	682a      	ldr	r2, [r5, #0]
   27028:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2702a:	910b      	str	r1, [sp, #44]	; 0x2c
   2702c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2702e:	910a      	str	r1, [sp, #40]	; 0x28
   27030:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   27032:	9109      	str	r1, [sp, #36]	; 0x24
   27034:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   27036:	9108      	str	r1, [sp, #32]
   27038:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2703a:	9107      	str	r1, [sp, #28]
   2703c:	6a29      	ldr	r1, [r5, #32]
   2703e:	9106      	str	r1, [sp, #24]
   27040:	69e9      	ldr	r1, [r5, #28]
   27042:	9105      	str	r1, [sp, #20]
   27044:	69a9      	ldr	r1, [r5, #24]
   27046:	9104      	str	r1, [sp, #16]
   27048:	6969      	ldr	r1, [r5, #20]
   2704a:	9103      	str	r1, [sp, #12]
   2704c:	6929      	ldr	r1, [r5, #16]
   2704e:	9102      	str	r1, [sp, #8]
   27050:	68e9      	ldr	r1, [r5, #12]
   27052:	9101      	str	r1, [sp, #4]
   27054:	68a9      	ldr	r1, [r5, #8]
   27056:	9100      	str	r1, [sp, #0]
   27058:	4651      	mov	r1, sl
   2705a:	4648      	mov	r0, r9
   2705c:	f7eb f928 	bl	122b0 <print_formatted>
		break;
   27060:	e6ff      	b.n	26e62 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   27062:	686b      	ldr	r3, [r5, #4]
   27064:	682a      	ldr	r2, [r5, #0]
   27066:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   27068:	910c      	str	r1, [sp, #48]	; 0x30
   2706a:	6b69      	ldr	r1, [r5, #52]	; 0x34
   2706c:	910b      	str	r1, [sp, #44]	; 0x2c
   2706e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   27070:	910a      	str	r1, [sp, #40]	; 0x28
   27072:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   27074:	9109      	str	r1, [sp, #36]	; 0x24
   27076:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   27078:	9108      	str	r1, [sp, #32]
   2707a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   2707c:	9107      	str	r1, [sp, #28]
   2707e:	6a29      	ldr	r1, [r5, #32]
   27080:	9106      	str	r1, [sp, #24]
   27082:	69e9      	ldr	r1, [r5, #28]
   27084:	9105      	str	r1, [sp, #20]
   27086:	69a9      	ldr	r1, [r5, #24]
   27088:	9104      	str	r1, [sp, #16]
   2708a:	6969      	ldr	r1, [r5, #20]
   2708c:	9103      	str	r1, [sp, #12]
   2708e:	6929      	ldr	r1, [r5, #16]
   27090:	9102      	str	r1, [sp, #8]
   27092:	68e9      	ldr	r1, [r5, #12]
   27094:	9101      	str	r1, [sp, #4]
   27096:	68a9      	ldr	r1, [r5, #8]
   27098:	9100      	str	r1, [sp, #0]
   2709a:	4651      	mov	r1, sl
   2709c:	4648      	mov	r0, r9
   2709e:	f7eb f907 	bl	122b0 <print_formatted>
}
   270a2:	e6de      	b.n	26e62 <std_print+0x74>

000270a4 <log_output_flush>:
{
   270a4:	b510      	push	{r4, lr}
   270a6:	4604      	mov	r4, r0
		     output->control_block->offset,
   270a8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   270aa:	6853      	ldr	r3, [r2, #4]
   270ac:	6812      	ldr	r2, [r2, #0]
   270ae:	6881      	ldr	r1, [r0, #8]
   270b0:	6800      	ldr	r0, [r0, #0]
   270b2:	f7ff fe50 	bl	26d56 <buffer_write>
	output->control_block->offset = 0;
   270b6:	6863      	ldr	r3, [r4, #4]
   270b8:	2200      	movs	r2, #0
   270ba:	601a      	str	r2, [r3, #0]
}
   270bc:	bd10      	pop	{r4, pc}

000270be <out_func>:
{
   270be:	b538      	push	{r3, r4, r5, lr}
   270c0:	4605      	mov	r5, r0
   270c2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   270c4:	684b      	ldr	r3, [r1, #4]
   270c6:	681a      	ldr	r2, [r3, #0]
   270c8:	68cb      	ldr	r3, [r1, #12]
   270ca:	429a      	cmp	r2, r3
   270cc:	d00f      	beq.n	270ee <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   270ce:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   270d0:	f3bf 8f5b 	dmb	ish
   270d4:	e853 2f00 	ldrex	r2, [r3]
   270d8:	1c51      	adds	r1, r2, #1
   270da:	e843 1000 	strex	r0, r1, [r3]
   270de:	2800      	cmp	r0, #0
   270e0:	d1f8      	bne.n	270d4 <out_func+0x16>
   270e2:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   270e6:	68a3      	ldr	r3, [r4, #8]
   270e8:	549d      	strb	r5, [r3, r2]
}
   270ea:	2000      	movs	r0, #0
   270ec:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   270ee:	4608      	mov	r0, r1
   270f0:	f7ff ffd8 	bl	270a4 <log_output_flush>
   270f4:	e7eb      	b.n	270ce <out_func+0x10>

000270f6 <log_output_msg_process>:
{
   270f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   270f8:	b085      	sub	sp, #20
   270fa:	4606      	mov	r6, r0
   270fc:	460c      	mov	r4, r1
   270fe:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   27100:	7a0b      	ldrb	r3, [r1, #8]
   27102:	f083 0301 	eor.w	r3, r3, #1
   27106:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   2710a:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   2710c:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   2710e:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   27112:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   27114:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   27118:	f011 0507 	ands.w	r5, r1, #7
   2711c:	d10f      	bne.n	2713e <log_output_msg_process+0x48>
   2711e:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   27120:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   27122:	f013 0f01 	tst.w	r3, #1
   27126:	d014      	beq.n	27152 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   27128:	b9c5      	cbnz	r5, 2715c <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   2712a:	4631      	mov	r1, r6
   2712c:	4620      	mov	r0, r4
   2712e:	f7eb f9ff 	bl	12530 <raw_string_print>
	if (!raw_string) {
   27132:	b9cd      	cbnz	r5, 27168 <log_output_msg_process+0x72>
	log_output_flush(output);
   27134:	4630      	mov	r0, r6
   27136:	f7ff ffb5 	bl	270a4 <log_output_flush>
}
   2713a:	b005      	add	sp, #20
   2713c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   2713e:	9002      	str	r0, [sp, #8]
   27140:	f8cd c004 	str.w	ip, [sp, #4]
   27144:	9500      	str	r5, [sp, #0]
   27146:	4639      	mov	r1, r7
   27148:	4630      	mov	r0, r6
   2714a:	f7ff fe29 	bl	26da0 <prefix_print>
   2714e:	4602      	mov	r2, r0
   27150:	e7e6      	b.n	27120 <log_output_msg_process+0x2a>
		std_print(msg, output);
   27152:	4631      	mov	r1, r6
   27154:	4620      	mov	r0, r4
   27156:	f7ff fe4a 	bl	26dee <std_print>
   2715a:	e7ea      	b.n	27132 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   2715c:	463b      	mov	r3, r7
   2715e:	4631      	mov	r1, r6
   27160:	4620      	mov	r0, r4
   27162:	f7eb f9bb 	bl	124dc <hexdump_print>
   27166:	e7e4      	b.n	27132 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   27168:	462a      	mov	r2, r5
   2716a:	4639      	mov	r1, r7
   2716c:	4630      	mov	r0, r6
   2716e:	f7ff fe0b 	bl	26d88 <postfix_print>
   27172:	e7df      	b.n	27134 <log_output_msg_process+0x3e>

00027174 <usb_get_status>:
	uint8_t *data = *data_buf;
   27174:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
   27176:	2200      	movs	r2, #0
   27178:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   2717a:	2001      	movs	r0, #1
   2717c:	7018      	strb	r0, [r3, #0]
	*len = 2;
   2717e:	2302      	movs	r3, #2
   27180:	600b      	str	r3, [r1, #0]
}
   27182:	4770      	bx	lr

00027184 <usb_vbus_set>:
}
   27184:	2000      	movs	r0, #0
   27186:	4770      	bx	lr

00027188 <usb_eps_reconfigure>:
{
   27188:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   2718a:	4291      	cmp	r1, r2
   2718c:	d002      	beq.n	27194 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   2718e:	f7eb fd8b 	bl	12ca8 <reset_endpoint>
}
   27192:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   27194:	f7eb fc82 	bl	12a9c <set_endpoint>
   27198:	e7fb      	b.n	27192 <usb_eps_reconfigure+0xa>

0002719a <usb_handle_std_interface_req>:
{
   2719a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2719c:	4604      	mov	r4, r0
   2719e:	460e      	mov	r6, r1
   271a0:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   271a2:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   271a4:	f7eb faf4 	bl	12790 <is_device_configured>
   271a8:	b900      	cbnz	r0, 271ac <usb_handle_std_interface_req+0x12>
}
   271aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   271ac:	7920      	ldrb	r0, [r4, #4]
   271ae:	f7eb faf9 	bl	127a4 <is_interface_valid>
	if (!is_device_configured() ||
   271b2:	2800      	cmp	r0, #0
   271b4:	d0f9      	beq.n	271aa <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   271b6:	f994 3000 	ldrsb.w	r3, [r4]
   271ba:	2b00      	cmp	r3, #0
   271bc:	db04      	blt.n	271c8 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   271be:	7863      	ldrb	r3, [r4, #1]
   271c0:	2b0b      	cmp	r3, #11
   271c2:	d013      	beq.n	271ec <usb_handle_std_interface_req+0x52>
	return false;
   271c4:	2000      	movs	r0, #0
   271c6:	e7f0      	b.n	271aa <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   271c8:	7863      	ldrb	r3, [r4, #1]
   271ca:	b11b      	cbz	r3, 271d4 <usb_handle_std_interface_req+0x3a>
   271cc:	2b0a      	cmp	r3, #10
   271ce:	d007      	beq.n	271e0 <usb_handle_std_interface_req+0x46>
   271d0:	2000      	movs	r0, #0
   271d2:	e7ea      	b.n	271aa <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   271d4:	2300      	movs	r3, #0
   271d6:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   271d8:	707b      	strb	r3, [r7, #1]
			*len = 2;
   271da:	2302      	movs	r3, #2
   271dc:	6033      	str	r3, [r6, #0]
			return true;
   271de:	e7e4      	b.n	271aa <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   271e0:	462a      	mov	r2, r5
   271e2:	4631      	mov	r1, r6
   271e4:	4620      	mov	r0, r4
   271e6:	f7eb fab5 	bl	12754 <usb_get_interface>
   271ea:	e7de      	b.n	271aa <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   271ec:	4620      	mov	r0, r4
   271ee:	f7eb fd97 	bl	12d20 <usb_set_interface>
   271f2:	e7da      	b.n	271aa <usb_handle_std_interface_req+0x10>

000271f4 <disable_interface_ep>:
{
   271f4:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
   271f6:	7900      	ldrb	r0, [r0, #4]
   271f8:	f7f5 ff36 	bl	1d068 <usb_dc_ep_disable>
}
   271fc:	bd08      	pop	{r3, pc}

000271fe <usb_get_status_endpoint>:
{
   271fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27200:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   27202:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   27204:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   27206:	4620      	mov	r0, r4
   27208:	f7eb fade 	bl	127c8 <is_ep_valid>
   2720c:	4605      	mov	r5, r0
   2720e:	b130      	cbz	r0, 2721e <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   27210:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   27214:	d005      	beq.n	27222 <usb_get_status_endpoint+0x24>
   27216:	f7eb fabb 	bl	12790 <is_device_configured>
   2721a:	b910      	cbnz	r0, 27222 <usb_get_status_endpoint+0x24>
	return false;
   2721c:	4605      	mov	r5, r0
}
   2721e:	4628      	mov	r0, r5
   27220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   27222:	4639      	mov	r1, r7
   27224:	4620      	mov	r0, r4
   27226:	f7f5 fecd 	bl	1cfc4 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   2722a:	2300      	movs	r3, #0
   2722c:	707b      	strb	r3, [r7, #1]
		*len = 2;
   2722e:	2302      	movs	r3, #2
   27230:	6033      	str	r3, [r6, #0]
		return true;
   27232:	e7f4      	b.n	2721e <usb_get_status_endpoint+0x20>

00027234 <usb_handle_std_endpoint_req>:
{
   27234:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   27236:	f990 3000 	ldrsb.w	r3, [r0]
   2723a:	2b00      	cmp	r3, #0
   2723c:	db06      	blt.n	2724c <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   2723e:	7843      	ldrb	r3, [r0, #1]
   27240:	2b01      	cmp	r3, #1
   27242:	d00a      	beq.n	2725a <usb_handle_std_endpoint_req+0x26>
   27244:	2b03      	cmp	r3, #3
   27246:	d010      	beq.n	2726a <usb_handle_std_endpoint_req+0x36>
   27248:	2000      	movs	r0, #0
   2724a:	e002      	b.n	27252 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   2724c:	7843      	ldrb	r3, [r0, #1]
   2724e:	b10b      	cbz	r3, 27254 <usb_handle_std_endpoint_req+0x20>
	return false;
   27250:	2000      	movs	r0, #0
}
   27252:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   27254:	f7ff ffd3 	bl	271fe <usb_get_status_endpoint>
   27258:	e7fb      	b.n	27252 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2725a:	8843      	ldrh	r3, [r0, #2]
   2725c:	b10b      	cbz	r3, 27262 <usb_handle_std_endpoint_req+0x2e>
	return false;
   2725e:	2000      	movs	r0, #0
   27260:	e7f7      	b.n	27252 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   27262:	2100      	movs	r1, #0
   27264:	f7eb fbbe 	bl	129e4 <usb_halt_endpoint_req>
   27268:	e7f3      	b.n	27252 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   2726a:	8843      	ldrh	r3, [r0, #2]
   2726c:	b10b      	cbz	r3, 27272 <usb_handle_std_endpoint_req+0x3e>
	return false;
   2726e:	2000      	movs	r0, #0
   27270:	e7ef      	b.n	27252 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   27272:	2101      	movs	r1, #1
   27274:	f7eb fbb6 	bl	129e4 <usb_halt_endpoint_req>
   27278:	e7eb      	b.n	27252 <usb_handle_std_endpoint_req+0x1e>

0002727a <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   2727a:	f810 2b02 	ldrb.w	r2, [r0], #2
   2727e:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   27280:	0852      	lsrs	r2, r2, #1
   27282:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   27284:	2b00      	cmp	r3, #0
   27286:	db0b      	blt.n	272a0 <ascii7_to_utf16le+0x26>
{
   27288:	b410      	push	{r4}
		buf[i] = 0U;
   2728a:	2100      	movs	r1, #0
   2728c:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   2728e:	1e59      	subs	r1, r3, #1
   27290:	5c84      	ldrb	r4, [r0, r2]
   27292:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   27294:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   27296:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   27298:	2b00      	cmp	r3, #0
   2729a:	daf6      	bge.n	2728a <ascii7_to_utf16le+0x10>
}
   2729c:	bc10      	pop	{r4}
   2729e:	4770      	bx	lr
   272a0:	4770      	bx	lr

000272a2 <usb_validate_ep_cfg_data>:
{
   272a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   272a6:	b083      	sub	sp, #12
   272a8:	4605      	mov	r5, r0
   272aa:	4689      	mov	r9, r1
   272ac:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   272ae:	2700      	movs	r7, #0
   272b0:	e04a      	b.n	27348 <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   272b2:	f8d8 2000 	ldr.w	r2, [r8]
   272b6:	f104 0110 	add.w	r1, r4, #16
   272ba:	2301      	movs	r3, #1
   272bc:	408b      	lsls	r3, r1
   272be:	421a      	tst	r2, r3
   272c0:	d108      	bne.n	272d4 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   272c2:	f064 037f 	orn	r3, r4, #127	; 0x7f
   272c6:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   272ca:	4668      	mov	r0, sp
   272cc:	f7f5 fd7a 	bl	1cdc4 <usb_dc_ep_check_cap>
   272d0:	4603      	mov	r3, r0
   272d2:	b1d0      	cbz	r0, 2730a <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   272d4:	3401      	adds	r4, #1
   272d6:	b2e4      	uxtb	r4, r4
   272d8:	2c0f      	cmp	r4, #15
   272da:	d834      	bhi.n	27346 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   272dc:	78eb      	ldrb	r3, [r5, #3]
   272de:	f003 0303 	and.w	r3, r3, #3
   272e2:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   272e6:	88ab      	ldrh	r3, [r5, #4]
   272e8:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   272ec:	78ab      	ldrb	r3, [r5, #2]
   272ee:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   272f2:	f013 0f80 	tst.w	r3, #128	; 0x80
   272f6:	d1dc      	bne.n	272b2 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   272f8:	f8d8 2000 	ldr.w	r2, [r8]
   272fc:	2301      	movs	r3, #1
   272fe:	40a3      	lsls	r3, r4
   27300:	421a      	tst	r2, r3
   27302:	d1e7      	bne.n	272d4 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   27304:	f88d 4000 	strb.w	r4, [sp]
   27308:	e7df      	b.n	272ca <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   2730a:	f89d 2000 	ldrb.w	r2, [sp]
   2730e:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   27310:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   27312:	f012 0f80 	tst.w	r2, #128	; 0x80
   27316:	d10b      	bne.n	27330 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
   27318:	2201      	movs	r2, #1
   2731a:	fa02 f404 	lsl.w	r4, r2, r4
   2731e:	f8d8 2000 	ldr.w	r2, [r8]
   27322:	4322      	orrs	r2, r4
   27324:	f8c8 2000 	str.w	r2, [r8]
}
   27328:	4618      	mov	r0, r3
   2732a:	b003      	add	sp, #12
   2732c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   27330:	f104 0110 	add.w	r1, r4, #16
   27334:	2201      	movs	r2, #1
   27336:	fa02 f101 	lsl.w	r1, r2, r1
   2733a:	f8d8 2000 	ldr.w	r2, [r8]
   2733e:	430a      	orrs	r2, r1
   27340:	f8c8 2000 	str.w	r2, [r8]
   27344:	e7f0      	b.n	27328 <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   27346:	3701      	adds	r7, #1
   27348:	f899 301c 	ldrb.w	r3, [r9, #28]
   2734c:	429f      	cmp	r7, r3
   2734e:	d209      	bcs.n	27364 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   27350:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   27354:	78aa      	ldrb	r2, [r5, #2]
   27356:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   2735a:	7933      	ldrb	r3, [r6, #4]
   2735c:	429a      	cmp	r2, r3
   2735e:	d1f2      	bne.n	27346 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   27360:	2401      	movs	r4, #1
   27362:	e7b9      	b.n	272d8 <usb_validate_ep_cfg_data+0x36>
	return -1;
   27364:	f04f 33ff 	mov.w	r3, #4294967295
   27368:	e7de      	b.n	27328 <usb_validate_ep_cfg_data+0x86>

0002736a <usb_get_dev_data_by_cfg>:
	return list->head;
   2736a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2736c:	b110      	cbz	r0, 27374 <usb_get_dev_data_by_cfg+0xa>
   2736e:	3804      	subs	r0, #4
   27370:	e000      	b.n	27374 <usb_get_dev_data_by_cfg+0xa>
   27372:	3804      	subs	r0, #4
   27374:	b140      	cbz	r0, 27388 <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
   27376:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   27378:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   2737a:	428b      	cmp	r3, r1
   2737c:	d004      	beq.n	27388 <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2737e:	1d03      	adds	r3, r0, #4
   27380:	d003      	beq.n	2738a <usb_get_dev_data_by_cfg+0x20>
	return node->next;
   27382:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27384:	2800      	cmp	r0, #0
   27386:	d1f4      	bne.n	27372 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   27388:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   2738a:	4618      	mov	r0, r3
   2738c:	e7f2      	b.n	27374 <usb_get_dev_data_by_cfg+0xa>

0002738e <usb_get_dev_data_by_iface>:
	return list->head;
   2738e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   27390:	b110      	cbz	r0, 27398 <usb_get_dev_data_by_iface+0xa>
   27392:	3804      	subs	r0, #4
   27394:	e000      	b.n	27398 <usb_get_dev_data_by_iface+0xa>
   27396:	3804      	subs	r0, #4
   27398:	b150      	cbz	r0, 273b0 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
   2739a:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   2739c:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   2739e:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   273a0:	789b      	ldrb	r3, [r3, #2]
   273a2:	428b      	cmp	r3, r1
   273a4:	d004      	beq.n	273b0 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   273a6:	1d03      	adds	r3, r0, #4
   273a8:	d003      	beq.n	273b2 <usb_get_dev_data_by_iface+0x24>
	return node->next;
   273aa:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   273ac:	2800      	cmp	r0, #0
   273ae:	d1f2      	bne.n	27396 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   273b0:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   273b2:	4618      	mov	r0, r3
   273b4:	e7f0      	b.n	27398 <usb_get_dev_data_by_iface+0xa>

000273b6 <usb_get_dev_data_by_ep>:
	return list->head;
   273b6:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   273b8:	b100      	cbz	r0, 273bc <usb_get_dev_data_by_ep+0x6>
   273ba:	3804      	subs	r0, #4
   273bc:	b1d0      	cbz	r0, 273f4 <usb_get_dev_data_by_ep+0x3e>
{
   273be:	b430      	push	{r4, r5}
   273c0:	e005      	b.n	273ce <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   273c2:	1d03      	adds	r3, r0, #4
   273c4:	d012      	beq.n	273ec <usb_get_dev_data_by_ep+0x36>
	return node->next;
   273c6:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   273c8:	b190      	cbz	r0, 273f0 <usb_get_dev_data_by_ep+0x3a>
   273ca:	3804      	subs	r0, #4
   273cc:	b180      	cbz	r0, 273f0 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
   273ce:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   273d0:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   273d2:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   273d4:	2300      	movs	r3, #0
   273d6:	7f22      	ldrb	r2, [r4, #28]
   273d8:	429a      	cmp	r2, r3
   273da:	d9f2      	bls.n	273c2 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   273dc:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   273e0:	7912      	ldrb	r2, [r2, #4]
   273e2:	428a      	cmp	r2, r1
   273e4:	d004      	beq.n	273f0 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   273e6:	3301      	adds	r3, #1
   273e8:	b2db      	uxtb	r3, r3
   273ea:	e7f4      	b.n	273d6 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   273ec:	4618      	mov	r0, r3
   273ee:	e7ed      	b.n	273cc <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   273f0:	bc30      	pop	{r4, r5}
   273f2:	4770      	bx	lr
   273f4:	4770      	bx	lr

000273f6 <usb_transfer_is_busy>:
{
   273f6:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   273f8:	f7ec f8b2 	bl	13560 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   273fc:	b128      	cbz	r0, 2740a <usb_transfer_is_busy+0x14>
   273fe:	6843      	ldr	r3, [r0, #4]
   27400:	f113 0f10 	cmn.w	r3, #16
   27404:	d003      	beq.n	2740e <usb_transfer_is_busy+0x18>
	return false;
   27406:	2000      	movs	r0, #0
}
   27408:	bd08      	pop	{r3, pc}
	return false;
   2740a:	2000      	movs	r0, #0
   2740c:	e7fc      	b.n	27408 <usb_transfer_is_busy+0x12>
		return true;
   2740e:	2001      	movs	r0, #1
   27410:	e7fa      	b.n	27408 <usb_transfer_is_busy+0x12>

00027412 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   27412:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   27414:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   27416:	1c4b      	adds	r3, r1, #1
   27418:	b2db      	uxtb	r3, r3
   2741a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   2741e:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   27420:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   27424:	4770      	bx	lr

00027426 <cdc_acm_irq_callback_work_handler>:
{
   27426:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   27428:	f850 3c08 	ldr.w	r3, [r0, #-8]
   2742c:	f850 1c04 	ldr.w	r1, [r0, #-4]
   27430:	6f80      	ldr	r0, [r0, #120]	; 0x78
   27432:	4798      	blx	r3
}
   27434:	bd08      	pop	{r3, pc}

00027436 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   27436:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   27438:	2200      	movs	r2, #0
   2743a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   2743e:	4770      	bx	lr

00027440 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   27440:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   27442:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   27446:	b122      	cbz	r2, 27452 <cdc_acm_irq_tx_ready+0x12>
   27448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   2744c:	b91b      	cbnz	r3, 27456 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   2744e:	2000      	movs	r0, #0
   27450:	4770      	bx	lr
   27452:	2000      	movs	r0, #0
   27454:	4770      	bx	lr
		return 1;
   27456:	2001      	movs	r0, #1
}
   27458:	4770      	bx	lr

0002745a <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   2745a:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   2745c:	2200      	movs	r2, #0
   2745e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   27462:	4770      	bx	lr

00027464 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   27464:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   27466:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   2746a:	b90b      	cbnz	r3, 27470 <cdc_acm_irq_rx_ready+0xc>
	return 0;
   2746c:	2000      	movs	r0, #0
   2746e:	4770      	bx	lr
		return 1;
   27470:	2001      	movs	r0, #1
}
   27472:	4770      	bx	lr

00027474 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   27474:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   27476:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   2747a:	b112      	cbz	r2, 27482 <cdc_acm_irq_is_pending+0xe>
   2747c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   27480:	b93a      	cbnz	r2, 27492 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   27482:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   27486:	b132      	cbz	r2, 27496 <cdc_acm_irq_is_pending+0x22>
   27488:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   2748c:	b92b      	cbnz	r3, 2749a <cdc_acm_irq_is_pending+0x26>
		return 0;
   2748e:	2000      	movs	r0, #0
   27490:	4770      	bx	lr
		return 1;
   27492:	2001      	movs	r0, #1
   27494:	4770      	bx	lr
		return 0;
   27496:	2000      	movs	r0, #0
   27498:	4770      	bx	lr
		return 1;
   2749a:	2001      	movs	r0, #1
}
   2749c:	4770      	bx	lr

0002749e <cdc_acm_irq_update>:
}
   2749e:	2001      	movs	r0, #1
   274a0:	4770      	bx	lr

000274a2 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   274a2:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   274a4:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   274a6:	605a      	str	r2, [r3, #4]
}
   274a8:	4770      	bx	lr

000274aa <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   274aa:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   274ac:	6759      	str	r1, [r3, #116]	; 0x74
}
   274ae:	4770      	bx	lr

000274b0 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   274b0:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   274b2:	2902      	cmp	r1, #2
   274b4:	d00a      	beq.n	274cc <cdc_acm_line_ctrl_get+0x1c>
   274b6:	2904      	cmp	r1, #4
   274b8:	d00f      	beq.n	274da <cdc_acm_line_ctrl_get+0x2a>
   274ba:	2901      	cmp	r1, #1
   274bc:	d002      	beq.n	274c4 <cdc_acm_line_ctrl_get+0x14>
   274be:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   274c2:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   274c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   274c6:	6013      	str	r3, [r2, #0]
		return 0;
   274c8:	2000      	movs	r0, #0
   274ca:	4770      	bx	lr
		*val = (dev_data->line_state &
   274cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   274d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   274d4:	6013      	str	r3, [r2, #0]
		return 0;
   274d6:	2000      	movs	r0, #0
   274d8:	4770      	bx	lr
		*val = (dev_data->line_state &
   274da:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   274de:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   274e2:	6013      	str	r3, [r2, #0]
		return 0;
   274e4:	2000      	movs	r0, #0
   274e6:	4770      	bx	lr

000274e8 <cdc_acm_line_ctrl_set>:
{
   274e8:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   274ea:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   274ec:	2940      	cmp	r1, #64	; 0x40
   274ee:	f000 8081 	beq.w	275f4 <cdc_acm_line_ctrl_set+0x10c>
   274f2:	d81b      	bhi.n	2752c <cdc_acm_line_ctrl_set+0x44>
   274f4:	2920      	cmp	r1, #32
   274f6:	f200 809f 	bhi.w	27638 <cdc_acm_line_ctrl_set+0x150>
   274fa:	2900      	cmp	r1, #0
   274fc:	f000 809f 	beq.w	2763e <cdc_acm_line_ctrl_set+0x156>
   27500:	1e4b      	subs	r3, r1, #1
   27502:	2b1f      	cmp	r3, #31
   27504:	f200 809e 	bhi.w	27644 <cdc_acm_line_ctrl_set+0x15c>
   27508:	e8df f003 	tbb	[pc, r3]
   2750c:	9c9c9c3d 	.word	0x9c9c9c3d
   27510:	429c9c9c 	.word	0x429c9c9c
   27514:	9c9c9c9c 	.word	0x9c9c9c9c
   27518:	529c9c9c 	.word	0x529c9c9c
   2751c:	9c9c9c9c 	.word	0x9c9c9c9c
   27520:	9c9c9c9c 	.word	0x9c9c9c9c
   27524:	9c9c9c9c 	.word	0x9c9c9c9c
   27528:	639c9c9c 	.word	0x639c9c9c
   2752c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   27530:	d071      	beq.n	27616 <cdc_acm_line_ctrl_set+0x12e>
   27532:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   27536:	d110      	bne.n	2755a <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   27538:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   2753c:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   27540:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   27544:	b11a      	cbz	r2, 2754e <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   27546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2754a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2754e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   27552:	f7ec fc55 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   27556:	2000      	movs	r0, #0
   27558:	e019      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   2755a:	2980      	cmp	r1, #128	; 0x80
   2755c:	d110      	bne.n	27580 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   2755e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   27562:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   27566:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   2756a:	b11a      	cbz	r2, 27574 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   2756c:	f043 0310 	orr.w	r3, r3, #16
   27570:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   27574:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   27578:	f7ec fc42 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   2757c:	2000      	movs	r0, #0
   2757e:	e006      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   27580:	f06f 0012 	mvn.w	r0, #18
   27584:	e003      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
   27586:	4611      	mov	r1, r2
   27588:	f7ff ff8f 	bl	274aa <cdc_acm_baudrate_set>
		return 0;
   2758c:	2000      	movs	r0, #0
}
   2758e:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   27590:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   27594:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   27598:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   2759c:	b11a      	cbz	r2, 275a6 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   2759e:	f043 0301 	orr.w	r3, r3, #1
   275a2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   275a6:	2101      	movs	r1, #1
   275a8:	f7ec fc2a 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   275ac:	2000      	movs	r0, #0
   275ae:	e7ee      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   275b0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   275b4:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   275b8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   275bc:	b11a      	cbz	r2, 275c6 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   275be:	f043 0302 	orr.w	r3, r3, #2
   275c2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   275c6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   275ca:	f7ec fc19 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   275ce:	2000      	movs	r0, #0
   275d0:	e7dd      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   275d2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   275d6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   275da:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   275de:	b11a      	cbz	r2, 275e8 <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   275e0:	f043 0304 	orr.w	r3, r3, #4
   275e4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   275e8:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   275ec:	f7ec fc08 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   275f0:	2000      	movs	r0, #0
   275f2:	e7cc      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   275f4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   275f8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   275fc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   27600:	b11a      	cbz	r2, 2760a <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   27602:	f043 0308 	orr.w	r3, r3, #8
   27606:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2760a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   2760e:	f7ec fbf7 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   27612:	2000      	movs	r0, #0
   27614:	e7bb      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   27616:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   2761a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2761e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   27622:	b11a      	cbz	r2, 2762c <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   27624:	f043 0320 	orr.w	r3, r3, #32
   27628:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   2762c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   27630:	f7ec fbe6 	bl	13e00 <cdc_acm_send_notification>
		return 0;
   27634:	2000      	movs	r0, #0
   27636:	e7aa      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   27638:	f06f 0012 	mvn.w	r0, #18
   2763c:	e7a7      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
   2763e:	f06f 0012 	mvn.w	r0, #18
   27642:	e7a4      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>
   27644:	f06f 0012 	mvn.w	r0, #18
   27648:	e7a1      	b.n	2758e <cdc_acm_line_ctrl_set+0xa6>

0002764a <cdc_acm_fifo_read>:
{
   2764a:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   2764c:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   2764e:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   27650:	f7ff f9a8 	bl	269a4 <ring_buf_get>
   27654:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   27656:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   27658:	f7ff f8ec 	bl	26834 <ring_buf_is_empty>
   2765c:	b110      	cbz	r0, 27664 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   2765e:	2300      	movs	r3, #0
   27660:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   27664:	4620      	mov	r0, r4
   27666:	bd38      	pop	{r3, r4, r5, pc}

00027668 <cdc_acm_poll_in>:
{
   27668:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   2766a:	2201      	movs	r2, #1
   2766c:	f7ff ffed 	bl	2764a <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   27670:	2801      	cmp	r0, #1
   27672:	d101      	bne.n	27678 <cdc_acm_poll_in+0x10>
   27674:	2000      	movs	r0, #0
}
   27676:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   27678:	f04f 30ff 	mov.w	r0, #4294967295
   2767c:	e7fb      	b.n	27676 <cdc_acm_poll_in+0xe>

0002767e <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2767e:	2200      	movs	r2, #0
   27680:	6002      	str	r2, [r0, #0]
   27682:	6042      	str	r2, [r0, #4]
   27684:	6082      	str	r2, [r0, #8]
}
   27686:	4770      	bx	lr

00027688 <scan_device_filter_check>:
}
   27688:	2001      	movs	r0, #1
   2768a:	4770      	bx	lr

0002768c <is_addr_filter_enabled>:
}
   2768c:	2000      	movs	r0, #0
   2768e:	4770      	bx	lr

00027690 <scan_addr_filter_add>:
}
   27690:	f06f 000b 	mvn.w	r0, #11
   27694:	4770      	bx	lr

00027696 <scan_name_filter_add>:
}
   27696:	f06f 000b 	mvn.w	r0, #11
   2769a:	4770      	bx	lr

0002769c <scan_short_name_filter_add>:
}
   2769c:	f06f 000b 	mvn.w	r0, #11
   276a0:	4770      	bx	lr

000276a2 <scan_appearance_filter_add>:
}
   276a2:	f06f 000b 	mvn.w	r0, #11
   276a6:	4770      	bx	lr

000276a8 <scan_manufacturer_data_filter_add>:
}
   276a8:	f06f 000b 	mvn.w	r0, #11
   276ac:	4770      	bx	lr

000276ae <check_filter_mode>:
}
   276ae:	f010 003f 	ands.w	r0, r0, #63	; 0x3f
   276b2:	bf18      	it	ne
   276b4:	2001      	movne	r0, #1
   276b6:	4770      	bx	lr

000276b8 <check_enabled_filters>:
{
   276b8:	b510      	push	{r4, lr}
   276ba:	4604      	mov	r4, r0
	control->filter_cnt = 0;
   276bc:	2300      	movs	r3, #0
   276be:	7003      	strb	r3, [r0, #0]
	if (is_addr_filter_enabled()) {
   276c0:	f7ff ffe4 	bl	2768c <is_addr_filter_enabled>
   276c4:	b108      	cbz	r0, 276ca <check_enabled_filters+0x12>
		control->filter_cnt++;
   276c6:	2301      	movs	r3, #1
   276c8:	7023      	strb	r3, [r4, #0]
	if (is_uuid_filter_enabled()) {
   276ca:	f7ec fdcf 	bl	1426c <is_uuid_filter_enabled>
   276ce:	b110      	cbz	r0, 276d6 <check_enabled_filters+0x1e>
		control->filter_cnt++;
   276d0:	7823      	ldrb	r3, [r4, #0]
   276d2:	3301      	adds	r3, #1
   276d4:	7023      	strb	r3, [r4, #0]
}
   276d6:	bd10      	pop	{r4, pc}

000276d8 <find_uuid>:
{
   276d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   276dc:	b087      	sub	sp, #28
   276de:	4607      	mov	r7, r0
   276e0:	460e      	mov	r6, r1
   276e2:	4698      	mov	r8, r3
	switch (uuid_type) {
   276e4:	2a01      	cmp	r2, #1
   276e6:	d00b      	beq.n	27700 <find_uuid+0x28>
   276e8:	2a02      	cmp	r2, #2
   276ea:	d00b      	beq.n	27704 <find_uuid+0x2c>
   276ec:	b12a      	cbz	r2, 276fa <find_uuid+0x22>
   276ee:	f04f 0900 	mov.w	r9, #0
}
   276f2:	4648      	mov	r0, r9
   276f4:	b007      	add	sp, #28
   276f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	switch (uuid_type) {
   276fa:	2502      	movs	r5, #2
	for (size_t i = 0; i < data_len; i += uuid_len) {
   276fc:	2400      	movs	r4, #0
   276fe:	e004      	b.n	2770a <find_uuid+0x32>
		uuid_len = sizeof(uint32_t);
   27700:	2504      	movs	r5, #4
   27702:	e7fb      	b.n	276fc <find_uuid+0x24>
		uuid_len = BT_SCAN_UUID_128_SIZE * sizeof(uint8_t);
   27704:	2510      	movs	r5, #16
   27706:	e7f9      	b.n	276fc <find_uuid+0x24>
	for (size_t i = 0; i < data_len; i += uuid_len) {
   27708:	442c      	add	r4, r5
   2770a:	42a6      	cmp	r6, r4
   2770c:	d90f      	bls.n	2772e <find_uuid+0x56>
		if (!bt_uuid_create(&uuid.uuid, &data[i], uuid_len)) {
   2770e:	462a      	mov	r2, r5
   27710:	1939      	adds	r1, r7, r4
   27712:	a801      	add	r0, sp, #4
   27714:	f000 fb2f 	bl	27d76 <bt_uuid_create>
   27718:	4681      	mov	r9, r0
   2771a:	2800      	cmp	r0, #0
   2771c:	d0e9      	beq.n	276f2 <find_uuid+0x1a>
		if (bt_uuid_cmp(&uuid.uuid, target_uuid->uuid) == 0) {
   2771e:	f8d8 1000 	ldr.w	r1, [r8]
   27722:	a801      	add	r0, sp, #4
   27724:	f000 fb09 	bl	27d3a <bt_uuid_cmp>
   27728:	2800      	cmp	r0, #0
   2772a:	d1ed      	bne.n	27708 <find_uuid+0x30>
   2772c:	e7e1      	b.n	276f2 <find_uuid+0x1a>
	return false;
   2772e:	f04f 0900 	mov.w	r9, #0
   27732:	e7de      	b.n	276f2 <find_uuid+0x1a>

00027734 <uuid_check>:
{
   27734:	b570      	push	{r4, r5, r6, lr}
   27736:	4606      	mov	r6, r0
   27738:	460c      	mov	r4, r1
   2773a:	4615      	mov	r5, r2
	if (is_uuid_filter_enabled()) {
   2773c:	f7ec fd96 	bl	1426c <is_uuid_filter_enabled>
   27740:	b900      	cbnz	r0, 27744 <uuid_check+0x10>
}
   27742:	bd70      	pop	{r4, r5, r6, pc}
		if (adv_uuid_compare(data, type, control)) {
   27744:	4632      	mov	r2, r6
   27746:	4629      	mov	r1, r5
   27748:	4620      	mov	r0, r4
   2774a:	f7ec fe11 	bl	14370 <adv_uuid_compare>
   2774e:	2800      	cmp	r0, #0
   27750:	d0f7      	beq.n	27742 <uuid_check+0xe>
			control->filter_match_cnt++;
   27752:	7873      	ldrb	r3, [r6, #1]
   27754:	3301      	adds	r3, #1
   27756:	7073      	strb	r3, [r6, #1]
			control->filter_status.uuid.match = true;
   27758:	2301      	movs	r3, #1
   2775a:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
			control->filter_match = true;
   2775e:	70b3      	strb	r3, [r6, #2]
}
   27760:	e7ef      	b.n	27742 <uuid_check+0xe>

00027762 <adv_data_found>:
{
   27762:	b510      	push	{r4, lr}
   27764:	4604      	mov	r4, r0
   27766:	4608      	mov	r0, r1
	switch (data->type) {
   27768:	7823      	ldrb	r3, [r4, #0]
   2776a:	2b05      	cmp	r3, #5
   2776c:	d80b      	bhi.n	27786 <adv_data_found+0x24>
   2776e:	2b04      	cmp	r3, #4
   27770:	d212      	bcs.n	27798 <adv_data_found+0x36>
   27772:	3b02      	subs	r3, #2
   27774:	b2db      	uxtb	r3, r3
   27776:	2b01      	cmp	r3, #1
   27778:	d803      	bhi.n	27782 <adv_data_found+0x20>
		uuid_check(scan_control, data, BT_UUID_TYPE_16);
   2777a:	2200      	movs	r2, #0
   2777c:	4621      	mov	r1, r4
   2777e:	f7ff ffd9 	bl	27734 <uuid_check>
}
   27782:	2001      	movs	r0, #1
   27784:	bd10      	pop	{r4, pc}
	switch (data->type) {
   27786:	3b06      	subs	r3, #6
   27788:	b2db      	uxtb	r3, r3
   2778a:	2b01      	cmp	r3, #1
   2778c:	d8f9      	bhi.n	27782 <adv_data_found+0x20>
		uuid_check(scan_control, data, BT_UUID_TYPE_128);
   2778e:	2202      	movs	r2, #2
   27790:	4621      	mov	r1, r4
   27792:	f7ff ffcf 	bl	27734 <uuid_check>
		break;
   27796:	e7f4      	b.n	27782 <adv_data_found+0x20>
		uuid_check(scan_control, data, BT_UUID_TYPE_32);
   27798:	2201      	movs	r2, #1
   2779a:	4621      	mov	r1, r4
   2779c:	f7ff ffca 	bl	27734 <uuid_check>
		break;
   277a0:	e7ef      	b.n	27782 <adv_data_found+0x20>

000277a2 <check_addr>:
{
   277a2:	b538      	push	{r3, r4, r5, lr}
   277a4:	4604      	mov	r4, r0
   277a6:	460d      	mov	r5, r1
	if (is_addr_filter_enabled()) {
   277a8:	f7ff ff70 	bl	2768c <is_addr_filter_enabled>
   277ac:	b900      	cbnz	r0, 277b0 <check_addr+0xe>
}
   277ae:	bd38      	pop	{r3, r4, r5, pc}
		if (adv_addr_compare(addr, control)) {
   277b0:	4621      	mov	r1, r4
   277b2:	4628      	mov	r0, r5
   277b4:	f7ec fe1c 	bl	143f0 <adv_addr_compare>
   277b8:	2800      	cmp	r0, #0
   277ba:	d0f8      	beq.n	277ae <check_addr+0xc>
			control->filter_match_cnt++;
   277bc:	7863      	ldrb	r3, [r4, #1]
   277be:	3301      	adds	r3, #1
   277c0:	7063      	strb	r3, [r4, #1]
			control->filter_status.addr.match = true;
   277c2:	2301      	movs	r3, #1
   277c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
			control->filter_match = true;
   277c8:	70a3      	strb	r3, [r4, #2]
}
   277ca:	e7f0      	b.n	277ae <check_addr+0xc>

000277cc <bt_scan_stop>:
{
   277cc:	b508      	push	{r3, lr}
	return bt_le_scan_stop();
   277ce:	f7f1 f951 	bl	18a74 <bt_le_scan_stop>
}
   277d2:	bd08      	pop	{r3, pc}

000277d4 <filter_state_check>:
{
   277d4:	b538      	push	{r3, r4, r5, lr}
   277d6:	4604      	mov	r4, r0
   277d8:	460d      	mov	r5, r1
	if (!scan_device_filter_check(addr)) {
   277da:	4608      	mov	r0, r1
   277dc:	f7ff ff54 	bl	27688 <scan_device_filter_check>
   277e0:	b168      	cbz	r0, 277fe <filter_state_check+0x2a>
	if (control->all_mode &&
   277e2:	78e3      	ldrb	r3, [r4, #3]
   277e4:	b11b      	cbz	r3, 277ee <filter_state_check+0x1a>
	    (control->filter_match_cnt == control->filter_cnt)) {
   277e6:	7861      	ldrb	r1, [r4, #1]
   277e8:	7822      	ldrb	r2, [r4, #0]
	if (control->all_mode &&
   277ea:	4291      	cmp	r1, r2
   277ec:	d008      	beq.n	27800 <filter_state_check+0x2c>
	else if ((!control->all_mode) && control->filter_match) {
   277ee:	b90b      	cbnz	r3, 277f4 <filter_state_check+0x20>
   277f0:	78a3      	ldrb	r3, [r4, #2]
   277f2:	b98b      	cbnz	r3, 27818 <filter_state_check+0x44>
		notify_filter_no_match(&control->device_info,
   277f4:	7921      	ldrb	r1, [r4, #4]
   277f6:	f104 0008 	add.w	r0, r4, #8
   277fa:	f7ec fce5 	bl	141c8 <notify_filter_no_match>
}
   277fe:	bd38      	pop	{r3, r4, r5, pc}
		notify_filter_matched(&control->device_info,
   27800:	7922      	ldrb	r2, [r4, #4]
   27802:	f104 0114 	add.w	r1, r4, #20
   27806:	f104 0008 	add.w	r0, r4, #8
   2780a:	f7ec fcbf 	bl	1418c <notify_filter_matched>
		scan_connect_with_target(control, addr);
   2780e:	4629      	mov	r1, r5
   27810:	4620      	mov	r0, r4
   27812:	f7ec fea3 	bl	1455c <scan_connect_with_target>
   27816:	e7f2      	b.n	277fe <filter_state_check+0x2a>
		notify_filter_matched(&control->device_info,
   27818:	7922      	ldrb	r2, [r4, #4]
   2781a:	f104 0114 	add.w	r1, r4, #20
   2781e:	f104 0008 	add.w	r0, r4, #8
   27822:	f7ec fcb3 	bl	1418c <notify_filter_matched>
		scan_connect_with_target(control, addr);
   27826:	4629      	mov	r1, r5
   27828:	4620      	mov	r0, r4
   2782a:	f7ec fe97 	bl	1455c <scan_connect_with_target>
   2782e:	e7e6      	b.n	277fe <filter_state_check+0x2a>

00027830 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   27830:	428b      	cmp	r3, r1
   27832:	d901      	bls.n	27838 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   27834:	2000      	movs	r0, #0
	}
}
   27836:	4770      	bx	lr
{
   27838:	b538      	push	{r3, r4, r5, lr}
   2783a:	4615      	mov	r5, r2
   2783c:	461c      	mov	r4, r3
		(void)memcpy(to, from, from_len);
   2783e:	461a      	mov	r2, r3
   27840:	4629      	mov	r1, r5
   27842:	f000 fa05 	bl	27c50 <memcpy>
		return from_len;
   27846:	4620      	mov	r0, r4
}
   27848:	bd38      	pop	{r3, r4, r5, pc}

0002784a <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   2784a:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   2784c:	f000 fa24 	bl	27c98 <memset>
}
   27850:	bd08      	pop	{r3, pc}

00027852 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27852:	09c3      	lsrs	r3, r0, #7
   27854:	005a      	lsls	r2, r3, #1
   27856:	4413      	add	r3, r2
   27858:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2785c:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27860:	b2c0      	uxtb	r0, r0
   27862:	4770      	bx	lr

00027864 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   27864:	b410      	push	{r4}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
   27866:	460b      	mov	r3, r1

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27868:	f913 2b0f 	ldrsb.w	r2, [r3], #15
   2786c:	2a00      	cmp	r2, #0
   2786e:	db03      	blt.n	27878 <gf_double+0x14>
   27870:	2400      	movs	r4, #0

	out += (TC_AES_BLOCK_SIZE - 1);
   27872:	f100 020f 	add.w	r2, r0, #15
   27876:	e004      	b.n	27882 <gf_double+0x1e>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27878:	2487      	movs	r4, #135	; 0x87
   2787a:	e7fa      	b.n	27872 <gf_double+0xe>
	for (;;) {
		*out-- = (*x << 1) ^ carry;
		if (x == in) {
			break;
		}
		carry = *x-- >> 7;
   2787c:	f813 0901 	ldrb.w	r0, [r3], #-1
   27880:	09c4      	lsrs	r4, r0, #7
		*out-- = (*x << 1) ^ carry;
   27882:	7818      	ldrb	r0, [r3, #0]
   27884:	ea84 0040 	eor.w	r0, r4, r0, lsl #1
   27888:	f802 0901 	strb.w	r0, [r2], #-1
		if (x == in) {
   2788c:	428b      	cmp	r3, r1
   2788e:	d1f5      	bne.n	2787c <gf_double+0x18>
	}
}
   27890:	bc10      	pop	{r4}
   27892:	4770      	bx	lr

00027894 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
   27894:	b130      	cbz	r0, 278a4 <tc_cmac_erase+0x10>
{
   27896:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   27898:	2258      	movs	r2, #88	; 0x58
   2789a:	2100      	movs	r1, #0
   2789c:	f7ff ffd5 	bl	2784a <_set>

	return TC_CRYPTO_SUCCESS;
   278a0:	2001      	movs	r0, #1
}
   278a2:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
   278a4:	2000      	movs	r0, #0
}
   278a6:	4770      	bx	lr

000278a8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   278a8:	b1a0      	cbz	r0, 278d4 <tc_cmac_init+0x2c>
{
   278aa:	b510      	push	{r4, lr}
   278ac:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   278ae:	2210      	movs	r2, #16
   278b0:	2100      	movs	r1, #0
   278b2:	f7ff ffca 	bl	2784a <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   278b6:	2210      	movs	r2, #16
   278b8:	2100      	movs	r1, #0
   278ba:	f104 0030 	add.w	r0, r4, #48	; 0x30
   278be:	f7ff ffc4 	bl	2784a <_set>
	s->leftover_offset = 0;
   278c2:	2300      	movs	r3, #0
   278c4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   278c6:	2200      	movs	r2, #0
   278c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   278cc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
   278d0:	2001      	movs	r0, #1
}
   278d2:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
   278d4:	2000      	movs	r0, #0
}
   278d6:	4770      	bx	lr

000278d8 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
   278d8:	b338      	cbz	r0, 2792a <tc_cmac_setup+0x52>
{
   278da:	b570      	push	{r4, r5, r6, lr}
   278dc:	460d      	mov	r5, r1
   278de:	4616      	mov	r6, r2
   278e0:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
   278e2:	b321      	cbz	r1, 2792e <tc_cmac_setup+0x56>
	_set(s, 0, sizeof(*s));
   278e4:	2258      	movs	r2, #88	; 0x58
   278e6:	2100      	movs	r1, #0
   278e8:	f7ff ffaf 	bl	2784a <_set>
	s->sched = sched;
   278ec:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   278ee:	4629      	mov	r1, r5
   278f0:	4630      	mov	r0, r6
   278f2:	f7ec fee7 	bl	146c4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   278f6:	2210      	movs	r2, #16
   278f8:	2100      	movs	r1, #0
   278fa:	4620      	mov	r0, r4
   278fc:	f7ff ffa5 	bl	2784a <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   27900:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27902:	4621      	mov	r1, r4
   27904:	4620      	mov	r0, r4
   27906:	f7ec ff3b 	bl	14780 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2790a:	f104 0510 	add.w	r5, r4, #16
   2790e:	4621      	mov	r1, r4
   27910:	4628      	mov	r0, r5
   27912:	f7ff ffa7 	bl	27864 <gf_double>
	gf_double (s->K2, s->K1);
   27916:	4629      	mov	r1, r5
   27918:	f104 0020 	add.w	r0, r4, #32
   2791c:	f7ff ffa2 	bl	27864 <gf_double>
	tc_cmac_init(s);
   27920:	4620      	mov	r0, r4
   27922:	f7ff ffc1 	bl	278a8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   27926:	2001      	movs	r0, #1
}
   27928:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2792a:	2000      	movs	r0, #0
}
   2792c:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   2792e:	2000      	movs	r0, #0
   27930:	e7fa      	b.n	27928 <tc_cmac_setup+0x50>

00027932 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27932:	2800      	cmp	r0, #0
   27934:	d062      	beq.n	279fc <tc_cmac_update+0xca>
{
   27936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2793a:	460e      	mov	r6, r1
   2793c:	4617      	mov	r7, r2
   2793e:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   27940:	2a00      	cmp	r2, #0
   27942:	d05d      	beq.n	27a00 <tc_cmac_update+0xce>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   27944:	2900      	cmp	r1, #0
   27946:	d05e      	beq.n	27a06 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   27948:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2794c:	ea50 0301 	orrs.w	r3, r0, r1
   27950:	d05b      	beq.n	27a0a <tc_cmac_update+0xd8>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   27952:	f110 32ff 	adds.w	r2, r0, #4294967295
   27956:	f141 33ff 	adc.w	r3, r1, #4294967295
   2795a:	6522      	str	r2, [r4, #80]	; 0x50
   2795c:	6563      	str	r3, [r4, #84]	; 0x54

	if (s->leftover_offset > 0) {
   2795e:	6c65      	ldr	r5, [r4, #68]	; 0x44
   27960:	b3a5      	cbz	r5, 279cc <tc_cmac_update+0x9a>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   27962:	f1c5 0810 	rsb	r8, r5, #16

		if (data_length < remaining_space) {
   27966:	4547      	cmp	r7, r8
   27968:	d30d      	bcc.n	27986 <tc_cmac_update+0x54>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
   2796a:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2796e:	4643      	mov	r3, r8
   27970:	4632      	mov	r2, r6
   27972:	4641      	mov	r1, r8
   27974:	4420      	add	r0, r4
   27976:	f7ff ff5b 	bl	27830 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
   2797a:	3d10      	subs	r5, #16
   2797c:	442f      	add	r7, r5
		data += remaining_space;
   2797e:	4446      	add	r6, r8
		s->leftover_offset = 0;
   27980:	2300      	movs	r3, #0
   27982:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27984:	e013      	b.n	279ae <tc_cmac_update+0x7c>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27986:	f105 0030 	add.w	r0, r5, #48	; 0x30
   2798a:	463b      	mov	r3, r7
   2798c:	4632      	mov	r2, r6
   2798e:	4639      	mov	r1, r7
   27990:	4420      	add	r0, r4
   27992:	f7ff ff4d 	bl	27830 <_copy>
			s->leftover_offset += data_length;
   27996:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27998:	443b      	add	r3, r7
   2799a:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2799c:	2001      	movs	r0, #1
   2799e:	e030      	b.n	27a02 <tc_cmac_update+0xd0>
			s->iv[i] ^= s->leftover[i];
   279a0:	18e2      	adds	r2, r4, r3
   279a2:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   279a6:	5ce1      	ldrb	r1, [r4, r3]
   279a8:	404a      	eors	r2, r1
   279aa:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   279ac:	3301      	adds	r3, #1
   279ae:	2b0f      	cmp	r3, #15
   279b0:	d9f6      	bls.n	279a0 <tc_cmac_update+0x6e>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   279b2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   279b4:	4621      	mov	r1, r4
   279b6:	4620      	mov	r0, r4
   279b8:	f7ec fee2 	bl	14780 <tc_aes_encrypt>
   279bc:	e006      	b.n	279cc <tc_cmac_update+0x9a>
	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   279be:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   279c0:	4621      	mov	r1, r4
   279c2:	4620      	mov	r0, r4
   279c4:	f7ec fedc 	bl	14780 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   279c8:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   279ca:	3f10      	subs	r7, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
   279cc:	2f10      	cmp	r7, #16
   279ce:	d908      	bls.n	279e2 <tc_cmac_update+0xb0>
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   279d0:	2300      	movs	r3, #0
   279d2:	2b0f      	cmp	r3, #15
   279d4:	d8f3      	bhi.n	279be <tc_cmac_update+0x8c>
			s->iv[i] ^= data[i];
   279d6:	5cf0      	ldrb	r0, [r6, r3]
   279d8:	5ce5      	ldrb	r5, [r4, r3]
   279da:	4068      	eors	r0, r5
   279dc:	54e0      	strb	r0, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   279de:	3301      	adds	r3, #1
   279e0:	e7f7      	b.n	279d2 <tc_cmac_update+0xa0>
	}

	if (data_length > 0) {
   279e2:	b90f      	cbnz	r7, 279e8 <tc_cmac_update+0xb6>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   279e4:	2001      	movs	r0, #1
   279e6:	e00c      	b.n	27a02 <tc_cmac_update+0xd0>
		_copy(s->leftover, data_length, data, data_length);
   279e8:	463b      	mov	r3, r7
   279ea:	4632      	mov	r2, r6
   279ec:	4639      	mov	r1, r7
   279ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
   279f2:	f7ff ff1d 	bl	27830 <_copy>
		s->leftover_offset = data_length;
   279f6:	6467      	str	r7, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
   279f8:	2001      	movs	r0, #1
   279fa:	e002      	b.n	27a02 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   279fc:	2000      	movs	r0, #0
}
   279fe:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
   27a00:	2001      	movs	r0, #1
}
   27a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   27a06:	2000      	movs	r0, #0
   27a08:	e7fb      	b.n	27a02 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
   27a0a:	2000      	movs	r0, #0
   27a0c:	e7f9      	b.n	27a02 <tc_cmac_update+0xd0>

00027a0e <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27a0e:	b370      	cbz	r0, 27a6e <tc_cmac_final+0x60>
{
   27a10:	b538      	push	{r3, r4, r5, lr}
   27a12:	460c      	mov	r4, r1
   27a14:	4605      	mov	r5, r0
	if (tag == (uint8_t *) 0 ||
   27a16:	b361      	cbz	r1, 27a72 <tc_cmac_final+0x64>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   27a18:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   27a1a:	2a10      	cmp	r2, #16
   27a1c:	d10d      	bne.n	27a3a <tc_cmac_final+0x2c>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   27a1e:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27a20:	2300      	movs	r3, #0
   27a22:	2b0f      	cmp	r3, #15
   27a24:	d819      	bhi.n	27a5a <tc_cmac_final+0x4c>
		s->iv[i] ^= s->leftover[i] ^ k[i];
   27a26:	18e2      	adds	r2, r4, r3
   27a28:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   27a2c:	5cc8      	ldrb	r0, [r1, r3]
   27a2e:	4050      	eors	r0, r2
   27a30:	5ce2      	ldrb	r2, [r4, r3]
   27a32:	4042      	eors	r2, r0
   27a34:	54e2      	strb	r2, [r4, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27a36:	3301      	adds	r3, #1
   27a38:	e7f3      	b.n	27a22 <tc_cmac_final+0x14>
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   27a3a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   27a3e:	f1c2 0210 	rsb	r2, r2, #16
   27a42:	2100      	movs	r1, #0
   27a44:	4420      	add	r0, r4
   27a46:	f7ff ff00 	bl	2784a <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   27a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   27a4c:	4423      	add	r3, r4
   27a4e:	2280      	movs	r2, #128	; 0x80
   27a50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27a54:	f104 0120 	add.w	r1, r4, #32
   27a58:	e7e2      	b.n	27a20 <tc_cmac_final+0x12>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   27a5a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27a5c:	4621      	mov	r1, r4
   27a5e:	4628      	mov	r0, r5
   27a60:	f7ec fe8e 	bl	14780 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27a64:	4620      	mov	r0, r4
   27a66:	f7ff ff15 	bl	27894 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27a6a:	2001      	movs	r0, #1
}
   27a6c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27a6e:	2000      	movs	r0, #0
}
   27a70:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   27a72:	2000      	movs	r0, #0
   27a74:	e7fa      	b.n	27a6c <tc_cmac_final+0x5e>

00027a76 <abort_function>:
{
   27a76:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   27a78:	2000      	movs	r0, #0
   27a7a:	f7e9 ff4d 	bl	11918 <sys_reboot>

00027a7e <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   27a7e:	b538      	push	{r3, r4, r5, lr}
   27a80:	4604      	mov	r4, r0

	if (esf != NULL) {
   27a82:	460d      	mov	r5, r1
   27a84:	b111      	cbz	r1, 27a8c <z_arm_fatal_error+0xe>
		esf_dump(esf);
   27a86:	4608      	mov	r0, r1
   27a88:	f7ed fb10 	bl	150ac <esf_dump>
	}
	z_fatal_error(reason, esf);
   27a8c:	4629      	mov	r1, r5
   27a8e:	4620      	mov	r0, r4
   27a90:	f7f9 fd28 	bl	214e4 <z_fatal_error>
}
   27a94:	bd38      	pop	{r3, r4, r5, pc}

00027a96 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   27a96:	b508      	push	{r3, lr}
   27a98:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   27a9a:	6800      	ldr	r0, [r0, #0]
   27a9c:	f7ff ffef 	bl	27a7e <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   27aa0:	bd08      	pop	{r3, pc}

00027aa2 <z_irq_spurious>:
{
   27aa2:	b508      	push	{r3, lr}
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   27aa4:	2100      	movs	r1, #0
   27aa6:	2001      	movs	r0, #1
   27aa8:	f7ff ffe9 	bl	27a7e <z_arm_fatal_error>
}
   27aac:	bd08      	pop	{r3, pc}

00027aae <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   27aae:	b508      	push	{r3, lr}
	handler();
   27ab0:	f7ed fba6 	bl	15200 <z_SysNmiOnReset>
	z_arm_int_exit();
   27ab4:	f7ed fca2 	bl	153fc <z_arm_exc_exit>
}
   27ab8:	bd08      	pop	{r3, pc}

00027aba <memory_fault_recoverable>:
}
   27aba:	2000      	movs	r0, #0
   27abc:	4770      	bx	lr

00027abe <fault_handle>:
{
   27abe:	b508      	push	{r3, lr}
	*recoverable = false;
   27ac0:	2300      	movs	r3, #0
   27ac2:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   27ac4:	1ecb      	subs	r3, r1, #3
   27ac6:	2b09      	cmp	r3, #9
   27ac8:	d81a      	bhi.n	27b00 <fault_handle+0x42>
   27aca:	e8df f003 	tbb	[pc, r3]
   27ace:	0905      	.short	0x0905
   27ad0:	1919110d 	.word	0x1919110d
   27ad4:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   27ad8:	4611      	mov	r1, r2
   27ada:	f7ed ff23 	bl	15924 <hard_fault>
}
   27ade:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   27ae0:	2100      	movs	r1, #0
   27ae2:	f7ed fe3d 	bl	15760 <mem_manage_fault>
		break;
   27ae6:	e7fa      	b.n	27ade <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   27ae8:	2100      	movs	r1, #0
   27aea:	f7ed fd61 	bl	155b0 <bus_fault>
		break;
   27aee:	e7f6      	b.n	27ade <fault_handle+0x20>
		reason = usage_fault(esf);
   27af0:	f7ed fc92 	bl	15418 <usage_fault>
		break;
   27af4:	e7f3      	b.n	27ade <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   27af6:	4611      	mov	r1, r2
   27af8:	f7ed fd40 	bl	1557c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   27afc:	2000      	movs	r0, #0
		break;
   27afe:	e7ee      	b.n	27ade <fault_handle+0x20>
		reserved_exception(esf, fault);
   27b00:	f7ed ffb6 	bl	15a70 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   27b04:	2000      	movs	r0, #0
	return reason;
   27b06:	e7ea      	b.n	27ade <fault_handle+0x20>

00027b08 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   27b08:	6843      	ldr	r3, [r0, #4]
   27b0a:	1e5a      	subs	r2, r3, #1
		&&
   27b0c:	4213      	tst	r3, r2
   27b0e:	d106      	bne.n	27b1e <mpu_partition_is_valid+0x16>
		&&
   27b10:	2b1f      	cmp	r3, #31
   27b12:	d906      	bls.n	27b22 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   27b14:	6803      	ldr	r3, [r0, #0]
		&&
   27b16:	421a      	tst	r2, r3
   27b18:	d005      	beq.n	27b26 <mpu_partition_is_valid+0x1e>
   27b1a:	2000      	movs	r0, #0
   27b1c:	4770      	bx	lr
   27b1e:	2000      	movs	r0, #0
   27b20:	4770      	bx	lr
   27b22:	2000      	movs	r0, #0
   27b24:	4770      	bx	lr
   27b26:	2001      	movs	r0, #1
}
   27b28:	4770      	bx	lr

00027b2a <mpu_configure_region>:
{
   27b2a:	b500      	push	{lr}
   27b2c:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   27b2e:	680b      	ldr	r3, [r1, #0]
   27b30:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   27b32:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   27b34:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   27b36:	2b20      	cmp	r3, #32
   27b38:	d912      	bls.n	27b60 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   27b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   27b3e:	d811      	bhi.n	27b64 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   27b40:	3b01      	subs	r3, #1
   27b42:	fab3 f383 	clz	r3, r3
   27b46:	f1c3 031f 	rsb	r3, r3, #31
   27b4a:	005b      	lsls	r3, r3, #1
   27b4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   27b50:	4313      	orrs	r3, r2
   27b52:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   27b54:	a901      	add	r1, sp, #4
   27b56:	f7ee f8e7 	bl	15d28 <region_allocate_and_init>
}
   27b5a:	b005      	add	sp, #20
   27b5c:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   27b60:	2308      	movs	r3, #8
   27b62:	e7f5      	b.n	27b50 <mpu_configure_region+0x26>
		return REGION_4G;
   27b64:	233e      	movs	r3, #62	; 0x3e
   27b66:	e7f3      	b.n	27b50 <mpu_configure_region+0x26>

00027b68 <arm_core_mpu_configure_static_mpu_regions>:
{
   27b68:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   27b6a:	f7ee f93f 	bl	15dec <mpu_configure_static_mpu_regions>
}
   27b6e:	bd08      	pop	{r3, pc}

00027b70 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   27b70:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   27b72:	f7ee f945 	bl	15e00 <mpu_configure_dynamic_mpu_regions>
}
   27b76:	bd08      	pop	{r3, pc}

00027b78 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   27b78:	4602      	mov	r2, r0
   27b7a:	780b      	ldrb	r3, [r1, #0]
   27b7c:	b11b      	cbz	r3, 27b86 <strcpy+0xe>
		*d = *s;
   27b7e:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   27b82:	3101      	adds	r1, #1
   27b84:	e7f9      	b.n	27b7a <strcpy+0x2>
	}

	*d = '\0';
   27b86:	7013      	strb	r3, [r2, #0]

	return dest;
}
   27b88:	4770      	bx	lr

00027b8a <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   27b8a:	4603      	mov	r3, r0
   27b8c:	b1a2      	cbz	r2, 27bb8 <strncpy+0x2e>
{
   27b8e:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   27b90:	780c      	ldrb	r4, [r1, #0]
   27b92:	b12c      	cbz	r4, 27ba0 <strncpy+0x16>
		*d = *s;
   27b94:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   27b98:	3101      	adds	r1, #1
		d++;
		n--;
   27b9a:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   27b9c:	2a00      	cmp	r2, #0
   27b9e:	d1f7      	bne.n	27b90 <strncpy+0x6>
	}

	while (n > 0) {
   27ba0:	b122      	cbz	r2, 27bac <strncpy+0x22>
		*d = '\0';
   27ba2:	2100      	movs	r1, #0
   27ba4:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   27ba8:	3a01      	subs	r2, #1
   27baa:	e7f9      	b.n	27ba0 <strncpy+0x16>
	}

	return dest;
}
   27bac:	bc10      	pop	{r4}
   27bae:	4770      	bx	lr
		*d = '\0';
   27bb0:	2100      	movs	r1, #0
   27bb2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27bb6:	3a01      	subs	r2, #1
	while (n > 0) {
   27bb8:	2a00      	cmp	r2, #0
   27bba:	d1f9      	bne.n	27bb0 <strncpy+0x26>
   27bbc:	4770      	bx	lr

00027bbe <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   27bbe:	4603      	mov	r3, r0
	size_t n = 0;
   27bc0:	2000      	movs	r0, #0

	while (*s != '\0') {
   27bc2:	781a      	ldrb	r2, [r3, #0]
   27bc4:	b112      	cbz	r2, 27bcc <strlen+0xe>
		s++;
   27bc6:	3301      	adds	r3, #1
		n++;
   27bc8:	3001      	adds	r0, #1
   27bca:	e7fa      	b.n	27bc2 <strlen+0x4>
	}

	return n;
}
   27bcc:	4770      	bx	lr

00027bce <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   27bce:	4603      	mov	r3, r0
	size_t n = 0;
   27bd0:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   27bd2:	781a      	ldrb	r2, [r3, #0]
   27bd4:	b122      	cbz	r2, 27be0 <strnlen+0x12>
   27bd6:	4288      	cmp	r0, r1
   27bd8:	d202      	bcs.n	27be0 <strnlen+0x12>
		s++;
   27bda:	3301      	adds	r3, #1
		n++;
   27bdc:	3001      	adds	r0, #1
   27bde:	e7f8      	b.n	27bd2 <strnlen+0x4>
	}

	return n;
}
   27be0:	4770      	bx	lr

00027be2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   27be2:	7803      	ldrb	r3, [r0, #0]
   27be4:	780a      	ldrb	r2, [r1, #0]
   27be6:	4293      	cmp	r3, r2
   27be8:	d103      	bne.n	27bf2 <strcmp+0x10>
   27bea:	b113      	cbz	r3, 27bf2 <strcmp+0x10>
		s1++;
   27bec:	3001      	adds	r0, #1
		s2++;
   27bee:	3101      	adds	r1, #1
   27bf0:	e7f7      	b.n	27be2 <strcmp>
	}

	return *s1 - *s2;
}
   27bf2:	1a98      	subs	r0, r3, r2
   27bf4:	4770      	bx	lr

00027bf6 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   27bf6:	b17a      	cbz	r2, 27c18 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   27bf8:	1e53      	subs	r3, r2, #1
   27bfa:	d00f      	beq.n	27c1c <memcmp+0x26>
{
   27bfc:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   27bfe:	7804      	ldrb	r4, [r0, #0]
   27c00:	780a      	ldrb	r2, [r1, #0]
   27c02:	4294      	cmp	r4, r2
   27c04:	d103      	bne.n	27c0e <memcmp+0x18>
		c1++;
   27c06:	3001      	adds	r0, #1
		c2++;
   27c08:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   27c0a:	3b01      	subs	r3, #1
   27c0c:	d1f7      	bne.n	27bfe <memcmp+0x8>
	}

	return *c1 - *c2;
   27c0e:	7800      	ldrb	r0, [r0, #0]
   27c10:	780b      	ldrb	r3, [r1, #0]
   27c12:	1ac0      	subs	r0, r0, r3
}
   27c14:	bc10      	pop	{r4}
   27c16:	4770      	bx	lr
		return 0;
   27c18:	2000      	movs	r0, #0
   27c1a:	4770      	bx	lr
	return *c1 - *c2;
   27c1c:	7800      	ldrb	r0, [r0, #0]
   27c1e:	780b      	ldrb	r3, [r1, #0]
   27c20:	1ac0      	subs	r0, r0, r3
}
   27c22:	4770      	bx	lr

00027c24 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   27c24:	1a43      	subs	r3, r0, r1
   27c26:	4293      	cmp	r3, r2
   27c28:	d30b      	bcc.n	27c42 <memmove+0x1e>
	char *dest = d;
   27c2a:	4603      	mov	r3, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   27c2c:	b17a      	cbz	r2, 27c4e <memmove+0x2a>
{
   27c2e:	b410      	push	{r4}
			*dest = *src;
   27c30:	f811 4b01 	ldrb.w	r4, [r1], #1
   27c34:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
   27c38:	3a01      	subs	r2, #1
		while (n > 0) {
   27c3a:	2a00      	cmp	r2, #0
   27c3c:	d1f8      	bne.n	27c30 <memmove+0xc>
		}
	}

	return d;
}
   27c3e:	bc10      	pop	{r4}
   27c40:	4770      	bx	lr
		while (n > 0) {
   27c42:	b11a      	cbz	r2, 27c4c <memmove+0x28>
			n--;
   27c44:	3a01      	subs	r2, #1
			dest[n] = src[n];
   27c46:	5c8b      	ldrb	r3, [r1, r2]
   27c48:	5483      	strb	r3, [r0, r2]
   27c4a:	e7fa      	b.n	27c42 <memmove+0x1e>
   27c4c:	4770      	bx	lr
   27c4e:	4770      	bx	lr

00027c50 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   27c50:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   27c52:	ea80 0301 	eor.w	r3, r0, r1
   27c56:	f013 0f03 	tst.w	r3, #3
   27c5a:	d001      	beq.n	27c60 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   27c5c:	4603      	mov	r3, r0
   27c5e:	e017      	b.n	27c90 <memcpy+0x40>
   27c60:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   27c62:	f013 0f03 	tst.w	r3, #3
   27c66:	d00b      	beq.n	27c80 <memcpy+0x30>
			if (n == 0) {
   27c68:	b1a2      	cbz	r2, 27c94 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   27c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
   27c6e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   27c72:	3a01      	subs	r2, #1
   27c74:	e7f5      	b.n	27c62 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   27c76:	f851 4b04 	ldr.w	r4, [r1], #4
   27c7a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   27c7e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   27c80:	2a03      	cmp	r2, #3
   27c82:	d8f8      	bhi.n	27c76 <memcpy+0x26>
   27c84:	e004      	b.n	27c90 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   27c86:	f811 4b01 	ldrb.w	r4, [r1], #1
   27c8a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   27c8e:	3a01      	subs	r2, #1
	while (n > 0) {
   27c90:	2a00      	cmp	r2, #0
   27c92:	d1f8      	bne.n	27c86 <memcpy+0x36>
	}

	return d;
}
   27c94:	bc10      	pop	{r4}
   27c96:	4770      	bx	lr

00027c98 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   27c98:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   27c9a:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   27c9c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   27c9e:	f013 0f03 	tst.w	r3, #3
   27ca2:	d004      	beq.n	27cae <memset+0x16>
		if (n == 0) {
   27ca4:	b19a      	cbz	r2, 27cce <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   27ca6:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   27caa:	3a01      	subs	r2, #1
   27cac:	e7f7      	b.n	27c9e <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   27cae:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   27cb0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   27cb4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   27cb8:	2a03      	cmp	r2, #3
   27cba:	d906      	bls.n	27cca <memset+0x32>
		*(d_word++) = c_word;
   27cbc:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   27cc0:	3a04      	subs	r2, #4
   27cc2:	e7f9      	b.n	27cb8 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   27cc4:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   27cc8:	3a01      	subs	r2, #1
	while (n > 0) {
   27cca:	2a00      	cmp	r2, #0
   27ccc:	d1fa      	bne.n	27cc4 <memset+0x2c>
	}

	return buf;
}
   27cce:	bc10      	pop	{r4}
   27cd0:	4770      	bx	lr

00027cd2 <_stdout_hook_default>:
}
   27cd2:	f04f 30ff 	mov.w	r0, #4294967295
   27cd6:	4770      	bx	lr

00027cd8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   27cd8:	b084      	sub	sp, #16
   27cda:	ab04      	add	r3, sp, #16
   27cdc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   27ce0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   27ce4:	2b06      	cmp	r3, #6
   27ce6:	d001      	beq.n	27cec <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   27ce8:	b004      	add	sp, #16
   27cea:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   27cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27cf0:	2201      	movs	r2, #1
   27cf2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   27cf6:	f3bf 8f4f 	dsb	sy
        __WFE();
   27cfa:	bf20      	wfe
    while (true)
   27cfc:	e7fd      	b.n	27cfa <pm_power_state_set+0x22>

00027cfe <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   27cfe:	b084      	sub	sp, #16
   27d00:	ab04      	add	r3, sp, #16
   27d02:	e903 0007 	stmdb	r3, {r0, r1, r2}
   27d06:	2300      	movs	r3, #0
   27d08:	f383 8811 	msr	BASEPRI, r3
   27d0c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   27d10:	b004      	add	sp, #16
   27d12:	4770      	bx	lr

00027d14 <uuid128_cmp>:

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   27d14:	b510      	push	{r4, lr}
   27d16:	b08a      	sub	sp, #40	; 0x28
   27d18:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
   27d1a:	a905      	add	r1, sp, #20
   27d1c:	f7ee f9ac 	bl	16078 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   27d20:	4669      	mov	r1, sp
   27d22:	4620      	mov	r0, r4
   27d24:	f7ee f9a8 	bl	16078 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
   27d28:	2210      	movs	r2, #16
   27d2a:	f10d 0101 	add.w	r1, sp, #1
   27d2e:	f10d 0015 	add.w	r0, sp, #21
   27d32:	f7ff ff60 	bl	27bf6 <memcmp>
}
   27d36:	b00a      	add	sp, #40	; 0x28
   27d38:	bd10      	pop	{r4, pc}

00027d3a <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   27d3a:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   27d3c:	7803      	ldrb	r3, [r0, #0]
   27d3e:	780a      	ldrb	r2, [r1, #0]
   27d40:	4293      	cmp	r3, r2
   27d42:	d107      	bne.n	27d54 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);
	}

	switch (u1->type) {
   27d44:	2b01      	cmp	r3, #1
   27d46:	d00c      	beq.n	27d62 <bt_uuid_cmp+0x28>
   27d48:	2b02      	cmp	r3, #2
   27d4a:	d00e      	beq.n	27d6a <bt_uuid_cmp+0x30>
   27d4c:	b12b      	cbz	r3, 27d5a <bt_uuid_cmp+0x20>
   27d4e:	f06f 0015 	mvn.w	r0, #21
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   27d52:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
   27d54:	f7ff ffde 	bl	27d14 <uuid128_cmp>
   27d58:	e7fb      	b.n	27d52 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   27d5a:	8840      	ldrh	r0, [r0, #2]
   27d5c:	884b      	ldrh	r3, [r1, #2]
   27d5e:	1ac0      	subs	r0, r0, r3
   27d60:	e7f7      	b.n	27d52 <bt_uuid_cmp+0x18>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   27d62:	6840      	ldr	r0, [r0, #4]
   27d64:	684b      	ldr	r3, [r1, #4]
   27d66:	1ac0      	subs	r0, r0, r3
   27d68:	e7f3      	b.n	27d52 <bt_uuid_cmp+0x18>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   27d6a:	2210      	movs	r2, #16
   27d6c:	3101      	adds	r1, #1
   27d6e:	3001      	adds	r0, #1
   27d70:	f7ff ff41 	bl	27bf6 <memcmp>
   27d74:	e7ed      	b.n	27d52 <bt_uuid_cmp+0x18>

00027d76 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
   27d76:	b538      	push	{r3, r4, r5, lr}
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   27d78:	2a04      	cmp	r2, #4
   27d7a:	d00e      	beq.n	27d9a <bt_uuid_create+0x24>
   27d7c:	2a10      	cmp	r2, #16
   27d7e:	d01b      	beq.n	27db8 <bt_uuid_create+0x42>
   27d80:	2a02      	cmp	r2, #2
   27d82:	d001      	beq.n	27d88 <bt_uuid_create+0x12>
   27d84:	2000      	movs	r0, #0
		break;
	default:
		return false;
	}
	return true;
}
   27d86:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_16;
   27d88:	2300      	movs	r3, #0
   27d8a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   27d8c:	784a      	ldrb	r2, [r1, #1]
   27d8e:	780b      	ldrb	r3, [r1, #0]
   27d90:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   27d94:	8043      	strh	r3, [r0, #2]
	return true;
   27d96:	2001      	movs	r0, #1
		break;
   27d98:	e7f5      	b.n	27d86 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_32;
   27d9a:	2301      	movs	r3, #1
   27d9c:	7003      	strb	r3, [r0, #0]
   27d9e:	78cc      	ldrb	r4, [r1, #3]
   27da0:	788a      	ldrb	r2, [r1, #2]
   27da2:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
   27da6:	784d      	ldrb	r5, [r1, #1]
   27da8:	780a      	ldrb	r2, [r1, #0]
   27daa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   27dae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   27db2:	6042      	str	r2, [r0, #4]
	return true;
   27db4:	4618      	mov	r0, r3
		break;
   27db6:	e7e6      	b.n	27d86 <bt_uuid_create+0x10>
		uuid->type = BT_UUID_TYPE_128;
   27db8:	2302      	movs	r3, #2
   27dba:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   27dbe:	2210      	movs	r2, #16
   27dc0:	f7ff ff46 	bl	27c50 <memcpy>
	return true;
   27dc4:	2001      	movs	r0, #1
		break;
   27dc6:	e7de      	b.n	27d86 <bt_uuid_create+0x10>

00027dc8 <bt_addr_le_create_static>:

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   27dc8:	b510      	push	{r4, lr}
   27dca:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   27dcc:	2301      	movs	r3, #1
   27dce:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   27dd2:	2106      	movs	r1, #6
   27dd4:	f7f7 f840 	bl	1ee58 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   27dd8:	b918      	cbnz	r0, 27de2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   27dda:	79a3      	ldrb	r3, [r4, #6]
   27ddc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27de0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   27de2:	bd10      	pop	{r4, pc}

00027de4 <find_pending_connect>:
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   27de4:	b108      	cbz	r0, 27dea <find_pending_connect+0x6>
	return NULL;
   27de6:	2000      	movs	r0, #0
}
   27de8:	4770      	bx	lr
{
   27dea:	b508      	push	{r3, lr}
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   27dec:	2206      	movs	r2, #6
   27dee:	f7f1 fb79 	bl	194e4 <bt_conn_lookup_state_le>
}
   27df2:	bd08      	pop	{r3, pc}

00027df4 <hci_disconn_complete_prio>:
{
   27df4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   27df6:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   27df8:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   27dfc:	781b      	ldrb	r3, [r3, #0]
   27dfe:	b103      	cbz	r3, 27e02 <hci_disconn_complete_prio+0xe>
}
   27e00:	bd38      	pop	{r3, r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
   27e02:	4620      	mov	r0, r4
   27e04:	f7f1 f902 	bl	1900c <bt_conn_lookup_handle>
	if (!conn) {
   27e08:	4605      	mov	r5, r0
   27e0a:	b130      	cbz	r0, 27e1a <hci_disconn_complete_prio+0x26>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   27e0c:	2101      	movs	r1, #1
   27e0e:	f7f1 f907 	bl	19020 <bt_conn_set_state>
	bt_conn_unref(conn);
   27e12:	4628      	mov	r0, r5
   27e14:	f000 fac9 	bl	283aa <bt_conn_unref>
   27e18:	e7f2      	b.n	27e00 <hci_disconn_complete_prio+0xc>
		conn_handle_disconnected(handle);
   27e1a:	4620      	mov	r0, r4
   27e1c:	f7ee f9ba 	bl	16194 <conn_handle_disconnected>
		return;
   27e20:	e7ee      	b.n	27e00 <hci_disconn_complete_prio+0xc>

00027e22 <set_event_mask>:
{
   27e22:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   27e24:	2108      	movs	r1, #8
   27e26:	f640 4001 	movw	r0, #3073	; 0xc01
   27e2a:	f7ee ffbb 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   27e2e:	b1b8      	cbz	r0, 27e60 <set_event_mask+0x3e>
   27e30:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   27e32:	2108      	movs	r1, #8
   27e34:	4408      	add	r0, r1
   27e36:	f002 f9e9 	bl	2a20c <net_buf_simple_add>
	dst[0] = val;
   27e3a:	2310      	movs	r3, #16
   27e3c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   27e3e:	2388      	movs	r3, #136	; 0x88
   27e40:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   27e42:	2200      	movs	r2, #0
   27e44:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   27e46:	2302      	movs	r3, #2
   27e48:	70c3      	strb	r3, [r0, #3]
	dst[0] = val;
   27e4a:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   27e4c:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   27e4e:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   27e50:	2320      	movs	r3, #32
   27e52:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   27e54:	4621      	mov	r1, r4
   27e56:	f640 4001 	movw	r0, #3073	; 0xc01
   27e5a:	f7ee ffdf 	bl	16e1c <bt_hci_cmd_send_sync>
}
   27e5e:	bd10      	pop	{r4, pc}
		return -ENOBUFS;
   27e60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27e64:	e7fb      	b.n	27e5e <set_event_mask+0x3c>

00027e66 <bt_le_create_conn>:
{
   27e66:	b508      	push	{r3, lr}
	return bt_le_create_conn_legacy(conn);
   27e68:	f7ef face 	bl	17408 <bt_le_create_conn_legacy>
}
   27e6c:	bd08      	pop	{r3, pc}

00027e6e <bt_hci_disconnect>:
{
   27e6e:	b570      	push	{r4, r5, r6, lr}
   27e70:	4605      	mov	r5, r0
   27e72:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   27e74:	2103      	movs	r1, #3
   27e76:	f240 4006 	movw	r0, #1030	; 0x406
   27e7a:	f7ee ff93 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   27e7e:	b168      	cbz	r0, 27e9c <bt_hci_disconnect+0x2e>
   27e80:	4606      	mov	r6, r0
   27e82:	2103      	movs	r1, #3
   27e84:	3008      	adds	r0, #8
   27e86:	f002 f9c1 	bl	2a20c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   27e8a:	8005      	strh	r5, [r0, #0]
	disconn->reason = reason;
   27e8c:	7084      	strb	r4, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   27e8e:	2200      	movs	r2, #0
   27e90:	4631      	mov	r1, r6
   27e92:	f240 4006 	movw	r0, #1030	; 0x406
   27e96:	f7ee ffc1 	bl	16e1c <bt_hci_cmd_send_sync>
}
   27e9a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   27e9c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27ea0:	e7fb      	b.n	27e9a <bt_hci_disconnect+0x2c>

00027ea2 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   27ea2:	8802      	ldrh	r2, [r0, #0]
   27ea4:	8843      	ldrh	r3, [r0, #2]
   27ea6:	429a      	cmp	r2, r3
   27ea8:	d819      	bhi.n	27ede <bt_le_conn_params_valid+0x3c>
   27eaa:	2a05      	cmp	r2, #5
   27eac:	d919      	bls.n	27ee2 <bt_le_conn_params_valid+0x40>
	    param->interval_min < 6 || param->interval_max > 3200) {
   27eae:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   27eb2:	d818      	bhi.n	27ee6 <bt_le_conn_params_valid+0x44>
	if (param->latency > 499) {
   27eb4:	8881      	ldrh	r1, [r0, #4]
   27eb6:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
   27eba:	d216      	bcs.n	27eea <bt_le_conn_params_valid+0x48>
{
   27ebc:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
   27ebe:	88c0      	ldrh	r0, [r0, #6]
   27ec0:	f1a0 020a 	sub.w	r2, r0, #10
   27ec4:	b292      	uxth	r2, r2
   27ec6:	f640 4476 	movw	r4, #3190	; 0xc76
   27eca:	42a2      	cmp	r2, r4
   27ecc:	d80f      	bhi.n	27eee <bt_le_conn_params_valid+0x4c>
	     ((1U + param->latency) * param->interval_max))) {
   27ece:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   27ed2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   27ed6:	d20c      	bcs.n	27ef2 <bt_le_conn_params_valid+0x50>
	return true;
   27ed8:	2001      	movs	r0, #1
}
   27eda:	bc10      	pop	{r4}
   27edc:	4770      	bx	lr
		return false;
   27ede:	2000      	movs	r0, #0
   27ee0:	4770      	bx	lr
   27ee2:	2000      	movs	r0, #0
   27ee4:	4770      	bx	lr
   27ee6:	2000      	movs	r0, #0
   27ee8:	4770      	bx	lr
		return false;
   27eea:	2000      	movs	r0, #0
}
   27eec:	4770      	bx	lr
		return false;
   27eee:	2000      	movs	r0, #0
   27ef0:	e7f3      	b.n	27eda <bt_le_conn_params_valid+0x38>
   27ef2:	2000      	movs	r0, #0
   27ef4:	e7f1      	b.n	27eda <bt_le_conn_params_valid+0x38>

00027ef6 <bt_le_set_data_len>:
{
   27ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27ef8:	4606      	mov	r6, r0
   27efa:	460f      	mov	r7, r1
   27efc:	4614      	mov	r4, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   27efe:	2106      	movs	r1, #6
   27f00:	f242 0022 	movw	r0, #8226	; 0x2022
   27f04:	f7ee ff4e 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   27f08:	b170      	cbz	r0, 27f28 <bt_le_set_data_len+0x32>
   27f0a:	4605      	mov	r5, r0
   27f0c:	2106      	movs	r1, #6
   27f0e:	3008      	adds	r0, #8
   27f10:	f002 f97c 	bl	2a20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27f14:	8833      	ldrh	r3, [r6, #0]
   27f16:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   27f18:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   27f1a:	8084      	strh	r4, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   27f1c:	4629      	mov	r1, r5
   27f1e:	f242 0022 	movw	r0, #8226	; 0x2022
   27f22:	f7ef fae5 	bl	174f0 <bt_hci_cmd_send>
}
   27f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   27f28:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27f2c:	e7fb      	b.n	27f26 <bt_le_set_data_len+0x30>

00027f2e <bt_le_set_phy>:
{
   27f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f32:	4607      	mov	r7, r0
   27f34:	460e      	mov	r6, r1
   27f36:	4615      	mov	r5, r2
   27f38:	461c      	mov	r4, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27f3a:	2107      	movs	r1, #7
   27f3c:	f242 0032 	movw	r0, #8242	; 0x2032
   27f40:	f7ee ff30 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   27f44:	b1a0      	cbz	r0, 27f70 <bt_le_set_phy+0x42>
   27f46:	4680      	mov	r8, r0
   27f48:	2107      	movs	r1, #7
   27f4a:	3008      	adds	r0, #8
   27f4c:	f002 f95e 	bl	2a20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27f50:	883b      	ldrh	r3, [r7, #0]
   27f52:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   27f54:	7086      	strb	r6, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27f56:	70c5      	strb	r5, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27f58:	7104      	strb	r4, [r0, #4]
	cp->phy_opts = phy_opts;
   27f5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   27f5e:	f8a0 3005 	strh.w	r3, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   27f62:	4641      	mov	r1, r8
   27f64:	f242 0032 	movw	r0, #8242	; 0x2032
   27f68:	f7ef fac2 	bl	174f0 <bt_hci_cmd_send>
}
   27f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOBUFS;
   27f70:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27f74:	e7fa      	b.n	27f6c <bt_le_set_phy+0x3e>

00027f76 <hci_le_read_remote_features>:
{
   27f76:	b538      	push	{r3, r4, r5, lr}
   27f78:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   27f7a:	2102      	movs	r1, #2
   27f7c:	f242 0016 	movw	r0, #8214	; 0x2016
   27f80:	f7ee ff10 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   27f84:	b168      	cbz	r0, 27fa2 <hci_le_read_remote_features+0x2c>
   27f86:	4605      	mov	r5, r0
   27f88:	2102      	movs	r1, #2
   27f8a:	3008      	adds	r0, #8
   27f8c:	f002 f93e 	bl	2a20c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27f90:	8823      	ldrh	r3, [r4, #0]
   27f92:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   27f94:	4629      	mov	r1, r5
   27f96:	f242 0016 	movw	r0, #8214	; 0x2016
   27f9a:	f7ef faa9 	bl	174f0 <bt_hci_cmd_send>
	return 0;
   27f9e:	2000      	movs	r0, #0
}
   27fa0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   27fa2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27fa6:	e7fb      	b.n	27fa0 <hci_le_read_remote_features+0x2a>

00027fa8 <enh_conn_complete>:
{
   27fa8:	b508      	push	{r3, lr}
	bt_hci_le_enh_conn_complete(evt);
   27faa:	f7ef fb67 	bl	1767c <bt_hci_le_enh_conn_complete>
}
   27fae:	bd08      	pop	{r3, pc}

00027fb0 <le_enh_conn_complete>:
{
   27fb0:	b508      	push	{r3, lr}
	enh_conn_complete((void *)buf->data);
   27fb2:	6880      	ldr	r0, [r0, #8]
   27fb4:	f7ff fff8 	bl	27fa8 <enh_conn_complete>
}
   27fb8:	bd08      	pop	{r3, pc}

00027fba <le_legacy_conn_complete>:
{
   27fba:	b510      	push	{r4, lr}
   27fbc:	b08c      	sub	sp, #48	; 0x30
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   27fbe:	6881      	ldr	r1, [r0, #8]
	enh.status         = evt->status;
   27fc0:	780b      	ldrb	r3, [r1, #0]
   27fc2:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   27fc6:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   27fca:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   27fce:	78cb      	ldrb	r3, [r1, #3]
   27fd0:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   27fd4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   27fd8:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   27fdc:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   27fe0:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   27fe4:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   27fe8:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   27fec:	7c4b      	ldrb	r3, [r1, #17]
   27fee:	f88d 301d 	strb.w	r3, [sp, #29]
	memcpy(dst, src, sizeof(*dst));
   27ff2:	2207      	movs	r2, #7
   27ff4:	3104      	adds	r1, #4
   27ff6:	a801      	add	r0, sp, #4
   27ff8:	f7ff fe2a 	bl	27c50 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   27ffc:	2400      	movs	r4, #0
   27ffe:	940a      	str	r4, [sp, #40]	; 0x28
   28000:	f8ad 402c 	strh.w	r4, [sp, #44]	; 0x2c
	memcpy(dst, src, sizeof(*dst));
   28004:	2206      	movs	r2, #6
   28006:	a90a      	add	r1, sp, #40	; 0x28
   28008:	f10d 000b 	add.w	r0, sp, #11
   2800c:	f7ff fe20 	bl	27c50 <memcpy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   28010:	9408      	str	r4, [sp, #32]
   28012:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
   28016:	2206      	movs	r2, #6
   28018:	a908      	add	r1, sp, #32
   2801a:	f10d 0011 	add.w	r0, sp, #17
   2801e:	f7ff fe17 	bl	27c50 <memcpy>
	enh_conn_complete(&enh);
   28022:	4668      	mov	r0, sp
   28024:	f7ff ffc0 	bl	27fa8 <enh_conn_complete>
}
   28028:	b00c      	add	sp, #48	; 0x30
   2802a:	bd10      	pop	{r4, pc}

0002802c <le_conn_param_req_reply>:
{
   2802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2802e:	4606      	mov	r6, r0
   28030:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   28032:	210e      	movs	r1, #14
   28034:	f242 0020 	movw	r0, #8224	; 0x2020
   28038:	f7ee feb4 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   2803c:	b1c0      	cbz	r0, 28070 <le_conn_param_req_reply+0x44>
   2803e:	4607      	mov	r7, r0
   28040:	210e      	movs	r1, #14
   28042:	3008      	adds	r0, #8
   28044:	f002 f8e2 	bl	2a20c <net_buf_simple_add>
   28048:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   2804a:	220e      	movs	r2, #14
   2804c:	2100      	movs	r1, #0
   2804e:	f7ff fe23 	bl	27c98 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   28052:	8026      	strh	r6, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   28054:	882b      	ldrh	r3, [r5, #0]
   28056:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   28058:	886b      	ldrh	r3, [r5, #2]
   2805a:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   2805c:	88ab      	ldrh	r3, [r5, #4]
   2805e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   28060:	88eb      	ldrh	r3, [r5, #6]
   28062:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   28064:	4639      	mov	r1, r7
   28066:	f242 0020 	movw	r0, #8224	; 0x2020
   2806a:	f7ef fa41 	bl	174f0 <bt_hci_cmd_send>
}
   2806e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   28070:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28074:	e7fb      	b.n	2806e <le_conn_param_req_reply+0x42>

00028076 <bt_init>:
{
   28076:	b510      	push	{r4, lr}
	err = hci_init();
   28078:	f7ef f9a2 	bl	173c0 <hci_init>
	if (err) {
   2807c:	4604      	mov	r4, r0
   2807e:	b108      	cbz	r0, 28084 <bt_init+0xe>
}
   28080:	4620      	mov	r0, r4
   28082:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
   28084:	f7f1 fbe2 	bl	1984c <bt_conn_init>
		if (err) {
   28088:	4604      	mov	r4, r0
   2808a:	2800      	cmp	r0, #0
   2808c:	d1f8      	bne.n	28080 <bt_init+0xa>
	bt_finalize_init();
   2808e:	f7ef fecd 	bl	17e2c <bt_finalize_init>
	return 0;
   28092:	e7f5      	b.n	28080 <bt_init+0xa>

00028094 <bt_addr_le_is_bonded>:
}
   28094:	2000      	movs	r0, #0
   28096:	4770      	bx	lr

00028098 <is_adv_using_rand_addr>:
}
   28098:	2000      	movs	r0, #0
   2809a:	4770      	bx	lr

0002809c <bt_lookup_id_addr>:
}
   2809c:	4608      	mov	r0, r1
   2809e:	4770      	bx	lr

000280a0 <bt_id_set_private_addr>:
{
   280a0:	b500      	push	{lr}
   280a2:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   280a4:	2106      	movs	r1, #6
   280a6:	4668      	mov	r0, sp
   280a8:	f7f6 fed6 	bl	1ee58 <bt_rand>
	if (err) {
   280ac:	b110      	cbz	r0, 280b4 <bt_id_set_private_addr+0x14>
}
   280ae:	b003      	add	sp, #12
   280b0:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ADDR_SET_NRPA(&nrpa);
   280b4:	f89d 3005 	ldrb.w	r3, [sp, #5]
   280b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   280bc:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   280c0:	4668      	mov	r0, sp
   280c2:	f7ef ffd7 	bl	18074 <set_random_address>
	if (err)  {
   280c6:	e7f2      	b.n	280ae <bt_id_set_private_addr+0xe>

000280c8 <bt_id_scan_random_addr_check>:
}
   280c8:	2001      	movs	r0, #1
   280ca:	4770      	bx	lr

000280cc <get_adv_props>:
	switch (evt_type) {
   280cc:	2804      	cmp	r0, #4
   280ce:	d80a      	bhi.n	280e6 <get_adv_props+0x1a>
   280d0:	e8df f000 	tbb	[pc, r0]
   280d4:	050c0b03 	.word	0x050c0b03
   280d8:	07          	.byte	0x07
   280d9:	00          	.byte	0x00
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   280da:	2003      	movs	r0, #3
   280dc:	4770      	bx	lr
		return 0;
   280de:	2000      	movs	r0, #0
   280e0:	4770      	bx	lr
		return BT_GAP_ADV_PROP_SCAN_RESPONSE |
   280e2:	200a      	movs	r0, #10
   280e4:	4770      	bx	lr
		return 0;
   280e6:	2000      	movs	r0, #0
   280e8:	4770      	bx	lr
		return BT_GAP_ADV_PROP_CONNECTABLE |
   280ea:	2005      	movs	r0, #5
}
   280ec:	4770      	bx	lr

000280ee <valid_le_scan_param>:
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   280ee:	7803      	ldrb	r3, [r0, #0]
   280f0:	2b01      	cmp	r3, #1
   280f2:	d815      	bhi.n	28120 <valid_le_scan_param+0x32>
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   280f4:	6843      	ldr	r3, [r0, #4]
   280f6:	f033 030f 	bics.w	r3, r3, #15
   280fa:	d113      	bne.n	28124 <valid_le_scan_param+0x36>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   280fc:	8902      	ldrh	r2, [r0, #8]
   280fe:	1f13      	subs	r3, r2, #4
   28100:	b29b      	uxth	r3, r3
   28102:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   28106:	428b      	cmp	r3, r1
   28108:	d80e      	bhi.n	28128 <valid_le_scan_param+0x3a>
	if (param->window < 0x0004 || param->window > 0x4000) {
   2810a:	8941      	ldrh	r1, [r0, #10]
   2810c:	1f0b      	subs	r3, r1, #4
   2810e:	b29b      	uxth	r3, r3
   28110:	f643 70fc 	movw	r0, #16380	; 0x3ffc
   28114:	4283      	cmp	r3, r0
   28116:	d809      	bhi.n	2812c <valid_le_scan_param+0x3e>
	if (param->window > param->interval) {
   28118:	428a      	cmp	r2, r1
   2811a:	d309      	bcc.n	28130 <valid_le_scan_param+0x42>
	return true;
   2811c:	2001      	movs	r0, #1
   2811e:	4770      	bx	lr
		return false;
   28120:	2000      	movs	r0, #0
   28122:	4770      	bx	lr
		return false;
   28124:	2000      	movs	r0, #0
   28126:	4770      	bx	lr
		return false;
   28128:	2000      	movs	r0, #0
   2812a:	4770      	bx	lr
		return false;
   2812c:	2000      	movs	r0, #0
   2812e:	4770      	bx	lr
		return false;
   28130:	2000      	movs	r0, #0
}
   28132:	4770      	bx	lr

00028134 <bt_le_scan_set_enable>:
{
   28134:	b508      	push	{r3, lr}
	return bt_le_scan_set_enable_legacy(enable);
   28136:	f7f0 f9f3 	bl	18520 <bt_le_scan_set_enable_legacy>
}
   2813a:	bd08      	pop	{r3, pc}

0002813c <start_passive_scan>:
{
   2813c:	b508      	push	{r3, lr}
	if (fast_scan) {
   2813e:	b128      	cbz	r0, 2814c <start_passive_scan+0x10>
		window = BT_GAP_SCAN_FAST_WINDOW;
   28140:	2230      	movs	r2, #48	; 0x30
		interval = BT_GAP_SCAN_FAST_INTERVAL;
   28142:	2160      	movs	r1, #96	; 0x60
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   28144:	2000      	movs	r0, #0
   28146:	f7f0 fa27 	bl	18598 <start_le_scan_legacy>
}
   2814a:	bd08      	pop	{r3, pc}
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   2814c:	2212      	movs	r2, #18
		interval = CONFIG_BT_BACKGROUND_SCAN_INTERVAL;
   2814e:	f44f 6100 	mov.w	r1, #2048	; 0x800
   28152:	e7f7      	b.n	28144 <start_passive_scan+0x8>

00028154 <bt_conn_set_param_le>:
	conn->le.interval_min = param->interval_min;
   28154:	880b      	ldrh	r3, [r1, #0]
   28156:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   2815a:	884b      	ldrh	r3, [r1, #2]
   2815c:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   28160:	888b      	ldrh	r3, [r1, #4]
   28162:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   28166:	88cb      	ldrh	r3, [r1, #6]
   28168:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
}
   2816c:	4770      	bx	lr

0002816e <create_param_validate>:
}
   2816e:	2001      	movs	r0, #1
   28170:	4770      	bx	lr

00028172 <tx_notify>:
{
   28172:	b570      	push	{r4, r5, r6, lr}
   28174:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
   28176:	e010      	b.n	2819a <tx_notify+0x28>
   28178:	f383 8811 	msr	BASEPRI, r3
   2817c:	f3bf 8f6f 	isb	sy
}
   28180:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   28182:	6262      	str	r2, [r4, #36]	; 0x24
   28184:	f383 8811 	msr	BASEPRI, r3
   28188:	f3bf 8f6f 	isb	sy
		cb = tx->cb;
   2818c:	6845      	ldr	r5, [r0, #4]
		user_data = tx->user_data;
   2818e:	6886      	ldr	r6, [r0, #8]
		tx_free(tx);
   28190:	f7f0 fcde 	bl	18b50 <tx_free>
		cb(conn, user_data);
   28194:	4631      	mov	r1, r6
   28196:	4620      	mov	r0, r4
   28198:	47a8      	blx	r5
	__asm__ volatile(
   2819a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2819e:	f3ef 8311 	mrs	r3, BASEPRI
   281a2:	f382 8812 	msr	BASEPRI_MAX, r2
   281a6:	f3bf 8f6f 	isb	sy
	return list->head;
   281aa:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   281ac:	2800      	cmp	r0, #0
   281ae:	d0e3      	beq.n	28178 <tx_notify+0x6>
	return node->next;
   281b0:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   281b2:	6222      	str	r2, [r4, #32]
	return list->tail;
   281b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   281b6:	4281      	cmp	r1, r0
   281b8:	d1e4      	bne.n	28184 <tx_notify+0x12>
   281ba:	e7e2      	b.n	28182 <tx_notify+0x10>

000281bc <tx_complete_work>:
{
   281bc:	b508      	push	{r3, lr}
	tx_notify(conn);
   281be:	3828      	subs	r0, #40	; 0x28
   281c0:	f7ff ffd7 	bl	28172 <tx_notify>
}
   281c4:	bd08      	pop	{r3, pc}

000281c6 <send_acl>:
{
   281c6:	b570      	push	{r4, r5, r6, lr}
   281c8:	4605      	mov	r5, r0
   281ca:	460c      	mov	r4, r1
	switch (flags) {
   281cc:	2a03      	cmp	r2, #3
   281ce:	d819      	bhi.n	28204 <send_acl+0x3e>
   281d0:	e8df f002 	tbb	[pc, r2]
   281d4:	16021602 	.word	0x16021602
		flags = BT_ACL_CONT;
   281d8:	2600      	movs	r6, #0
	return net_buf_simple_push(&buf->b, len);
   281da:	2104      	movs	r1, #4
   281dc:	f104 0008 	add.w	r0, r4, #8
   281e0:	f002 f82e 	bl	2a240 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   281e4:	f9b5 3000 	ldrsh.w	r3, [r5]
   281e8:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
   281ec:	8003      	strh	r3, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   281ee:	89a3      	ldrh	r3, [r4, #12]
   281f0:	3b04      	subs	r3, #4
   281f2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   281f4:	2302      	movs	r3, #2
   281f6:	7523      	strb	r3, [r4, #20]
	return bt_send(buf);
   281f8:	4620      	mov	r0, r4
   281fa:	f7ef f96f 	bl	174dc <bt_send>
}
   281fe:	bd70      	pop	{r4, r5, r6, pc}
		flags = BT_ACL_CONT;
   28200:	2601      	movs	r6, #1
   28202:	e7ea      	b.n	281da <send_acl+0x14>
   28204:	f06f 0015 	mvn.w	r0, #21
   28208:	e7f9      	b.n	281fe <send_acl+0x38>

0002820a <process_unack_tx>:
{
   2820a:	b510      	push	{r4, lr}
   2820c:	4604      	mov	r4, r0
   2820e:	e028      	b.n	28262 <process_unack_tx+0x58>
			conn->pending_no_cb--;
   28210:	3b01      	subs	r3, #1
   28212:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   28214:	f382 8811 	msr	BASEPRI, r2
   28218:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   2821c:	4620      	mov	r0, r4
   2821e:	f7f0 fce3 	bl	18be8 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   28222:	f7f9 fd2d 	bl	21c80 <z_impl_k_sem_give>
			continue;
   28226:	e01c      	b.n	28262 <process_unack_tx+0x58>
	list->tail = node;
   28228:	61a3      	str	r3, [r4, #24]
   2822a:	f382 8811 	msr	BASEPRI, r2
   2822e:	f3bf 8f6f 	isb	sy
		if (!node) {
   28232:	b350      	cbz	r0, 2828a <process_unack_tx+0x80>
	__asm__ volatile(
   28234:	f04f 0240 	mov.w	r2, #64	; 0x40
   28238:	f3ef 8311 	mrs	r3, BASEPRI
   2823c:	f382 8812 	msr	BASEPRI_MAX, r2
   28240:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   28244:	68c2      	ldr	r2, [r0, #12]
   28246:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   28248:	2200      	movs	r2, #0
   2824a:	60c2      	str	r2, [r0, #12]
	__asm__ volatile(
   2824c:	f383 8811 	msr	BASEPRI, r3
   28250:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   28254:	f7f0 fc7c 	bl	18b50 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
   28258:	4620      	mov	r0, r4
   2825a:	f7f0 fcc5 	bl	18be8 <bt_conn_get_pkts>
   2825e:	f7f9 fd0f 	bl	21c80 <z_impl_k_sem_give>
	__asm__ volatile(
   28262:	f04f 0340 	mov.w	r3, #64	; 0x40
   28266:	f3ef 8211 	mrs	r2, BASEPRI
   2826a:	f383 8812 	msr	BASEPRI_MAX, r3
   2826e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   28272:	69e3      	ldr	r3, [r4, #28]
   28274:	2b00      	cmp	r3, #0
   28276:	d1cb      	bne.n	28210 <process_unack_tx+0x6>
	return list->head;
   28278:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   2827a:	2800      	cmp	r0, #0
   2827c:	d0d5      	beq.n	2822a <process_unack_tx+0x20>
	return node->next;
   2827e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   28280:	6163      	str	r3, [r4, #20]
	return list->tail;
   28282:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28284:	4288      	cmp	r0, r1
   28286:	d1d0      	bne.n	2822a <process_unack_tx+0x20>
   28288:	e7ce      	b.n	28228 <process_unack_tx+0x1e>
}
   2828a:	bd10      	pop	{r4, pc}

0002828c <bt_conn_reset_rx_state>:
{
   2828c:	b510      	push	{r4, lr}
   2828e:	4604      	mov	r4, r0
	if (!conn->rx) {
   28290:	6900      	ldr	r0, [r0, #16]
   28292:	b118      	cbz	r0, 2829c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   28294:	f001 ff70 	bl	2a178 <net_buf_unref>
	conn->rx = NULL;
   28298:	2300      	movs	r3, #0
   2829a:	6123      	str	r3, [r4, #16]
}
   2829c:	bd10      	pop	{r4, pc}

0002829e <conn_cleanup>:
{
   2829e:	b538      	push	{r3, r4, r5, lr}
   282a0:	4605      	mov	r5, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   282a2:	e004      	b.n	282ae <conn_cleanup+0x10>
			tx_free(tx_data(buf)->tx);
   282a4:	f7f0 fc54 	bl	18b50 <tx_free>
		net_buf_unref(buf);
   282a8:	4620      	mov	r0, r4
   282aa:	f001 ff65 	bl	2a178 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   282ae:	2200      	movs	r2, #0
   282b0:	2300      	movs	r3, #0
   282b2:	f105 0038 	add.w	r0, r5, #56	; 0x38
   282b6:	f001 ff2d 	bl	2a114 <net_buf_get>
   282ba:	4604      	mov	r4, r0
   282bc:	b118      	cbz	r0, 282c6 <conn_cleanup+0x28>
		if (tx_data(buf)->tx) {
   282be:	6960      	ldr	r0, [r4, #20]
   282c0:	2800      	cmp	r0, #0
   282c2:	d1ef      	bne.n	282a4 <conn_cleanup+0x6>
   282c4:	e7f0      	b.n	282a8 <conn_cleanup+0xa>
	bt_conn_reset_rx_state(conn);
   282c6:	4628      	mov	r0, r5
   282c8:	f7ff ffe0 	bl	2828c <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   282cc:	2200      	movs	r2, #0
   282ce:	2300      	movs	r3, #0
   282d0:	f105 0058 	add.w	r0, r5, #88	; 0x58
   282d4:	f7f9 feec 	bl	220b0 <k_work_reschedule>
}
   282d8:	bd38      	pop	{r3, r4, r5, pc}

000282da <conn_prepare_events>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   282da:	f3bf 8f5b 	dmb	ish
   282de:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   282e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_get(&conn->ref)) {
   282e6:	b33b      	cbz	r3, 28338 <conn_prepare_events+0x5e>
{
   282e8:	b510      	push	{r4, lr}
   282ea:	460c      	mov	r4, r1
	if (conn->state == BT_CONN_DISCONNECTED &&
   282ec:	7a83      	ldrb	r3, [r0, #10]
   282ee:	b983      	cbnz	r3, 28312 <conn_prepare_events+0x38>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
   282f0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   282f2:	f3bf 8f5b 	dmb	ish
   282f6:	e853 2f00 	ldrex	r2, [r3]
   282fa:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   282fe:	e843 1c00 	strex	ip, r1, [r3]
   28302:	f1bc 0f00 	cmp.w	ip, #0
   28306:	d1f6      	bne.n	282f6 <conn_prepare_events+0x1c>
   28308:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
   2830c:	f012 0f40 	tst.w	r2, #64	; 0x40
   28310:	d10d      	bne.n	2832e <conn_prepare_events+0x54>
	if (conn->state != BT_CONN_CONNECTED) {
   28312:	7a83      	ldrb	r3, [r0, #10]
   28314:	2b07      	cmp	r3, #7
   28316:	d112      	bne.n	2833e <conn_prepare_events+0x64>
	k_poll_event_init(&events[0],
   28318:	f100 0338 	add.w	r3, r0, #56	; 0x38
   2831c:	2200      	movs	r2, #0
   2831e:	2104      	movs	r1, #4
   28320:	4620      	mov	r0, r4
   28322:	f003 ff84 	bl	2c22e <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   28326:	2301      	movs	r3, #1
   28328:	7323      	strb	r3, [r4, #12]
	return 0;
   2832a:	2000      	movs	r0, #0
}
   2832c:	bd10      	pop	{r4, pc}
		conn_cleanup(conn);
   2832e:	f7ff ffb6 	bl	2829e <conn_cleanup>
		return -ENOTCONN;
   28332:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28336:	e7f9      	b.n	2832c <conn_prepare_events+0x52>
		return -ENOTCONN;
   28338:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2833c:	4770      	bx	lr
		return -ENOTCONN;
   2833e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28342:	e7f3      	b.n	2832c <conn_prepare_events+0x52>

00028344 <bt_conn_recv>:
{
   28344:	b570      	push	{r4, r5, r6, lr}
   28346:	4604      	mov	r4, r0
   28348:	460d      	mov	r5, r1
   2834a:	4616      	mov	r6, r2
	tx_notify(conn);
   2834c:	f7ff ff11 	bl	28172 <tx_notify>
		bt_acl_recv(conn, buf, flags);
   28350:	4632      	mov	r2, r6
   28352:	4629      	mov	r1, r5
   28354:	4620      	mov	r0, r4
   28356:	f7f0 fd19 	bl	18d8c <bt_acl_recv>
}
   2835a:	bd70      	pop	{r4, r5, r6, pc}

0002835c <bt_conn_ref>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2835c:	f3bf 8f5b 	dmb	ish
   28360:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   28364:	f3bf 8f5b 	dmb	ish
		if (!old) {
   28368:	b1eb      	cbz	r3, 283a6 <bt_conn_ref+0x4a>
{
   2836a:	b410      	push	{r4}
   2836c:	e006      	b.n	2837c <bt_conn_ref+0x20>
   2836e:	f3bf 8f5b 	dmb	ish
   28372:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   28376:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2837a:	b193      	cbz	r3, 283a2 <bt_conn_ref+0x46>
   2837c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	} while (!atomic_cas(&conn->ref, old, old + 1));
   28380:	1c59      	adds	r1, r3, #1
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   28382:	f3bf 8f5b 	dmb	ish
   28386:	e852 4f00 	ldrex	r4, [r2]
   2838a:	429c      	cmp	r4, r3
   2838c:	d104      	bne.n	28398 <bt_conn_ref+0x3c>
   2838e:	e842 1c00 	strex	ip, r1, [r2]
   28392:	f1bc 0f00 	cmp.w	ip, #0
   28396:	d1f6      	bne.n	28386 <bt_conn_ref+0x2a>
   28398:	f3bf 8f5b 	dmb	ish
   2839c:	d1e7      	bne.n	2836e <bt_conn_ref+0x12>
}
   2839e:	bc10      	pop	{r4}
   283a0:	4770      	bx	lr
			return NULL;
   283a2:	2000      	movs	r0, #0
   283a4:	e7fb      	b.n	2839e <bt_conn_ref+0x42>
   283a6:	2000      	movs	r0, #0
}
   283a8:	4770      	bx	lr

000283aa <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   283aa:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   283ac:	f3bf 8f5b 	dmb	ish
   283b0:	e850 3f00 	ldrex	r3, [r0]
   283b4:	3b01      	subs	r3, #1
   283b6:	e840 3200 	strex	r2, r3, [r0]
   283ba:	2a00      	cmp	r2, #0
   283bc:	d1f8      	bne.n	283b0 <bt_conn_unref+0x6>
   283be:	f3bf 8f5b 	dmb	ish
}
   283c2:	4770      	bx	lr

000283c4 <conn_lookup_handle>:
{
   283c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   283c8:	4607      	mov	r7, r0
   283ca:	460e      	mov	r6, r1
   283cc:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   283ce:	2400      	movs	r4, #0
   283d0:	e003      	b.n	283da <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   283d2:	4628      	mov	r0, r5
   283d4:	f7ff ffe9 	bl	283aa <bt_conn_unref>
	for (i = 0; i < size; i++) {
   283d8:	3401      	adds	r4, #1
   283da:	42b4      	cmp	r4, r6
   283dc:	d21c      	bcs.n	28418 <conn_lookup_handle+0x54>
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   283de:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   283e2:	eb07 1080 	add.w	r0, r7, r0, lsl #6
   283e6:	f7ff ffb9 	bl	2835c <bt_conn_ref>
		if (!conn) {
   283ea:	4605      	mov	r5, r0
   283ec:	2800      	cmp	r0, #0
   283ee:	d0f3      	beq.n	283d8 <conn_lookup_handle+0x14>
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   283f0:	7a83      	ldrb	r3, [r0, #10]
   283f2:	2b01      	cmp	r3, #1
   283f4:	d006      	beq.n	28404 <conn_lookup_handle+0x40>
   283f6:	b25a      	sxtb	r2, r3
   283f8:	2a00      	cmp	r2, #0
   283fa:	d0ea      	beq.n	283d2 <conn_lookup_handle+0xe>
   283fc:	3b07      	subs	r3, #7
   283fe:	b2db      	uxtb	r3, r3
   28400:	2b01      	cmp	r3, #1
   28402:	d8e6      	bhi.n	283d2 <conn_lookup_handle+0xe>
		if (conn->handle != handle) {
   28404:	882b      	ldrh	r3, [r5, #0]
   28406:	4543      	cmp	r3, r8
   28408:	d102      	bne.n	28410 <conn_lookup_handle+0x4c>
}
   2840a:	4628      	mov	r0, r5
   2840c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_conn_unref(conn);
   28410:	4628      	mov	r0, r5
   28412:	f7ff ffca 	bl	283aa <bt_conn_unref>
			continue;
   28416:	e7df      	b.n	283d8 <conn_lookup_handle+0x14>
	return NULL;
   28418:	2500      	movs	r5, #0
   2841a:	e7f6      	b.n	2840a <conn_lookup_handle+0x46>

0002841c <bt_conn_connected>:
{
   2841c:	b510      	push	{r4, lr}
   2841e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   28420:	f7f1 fb08 	bl	19a34 <bt_l2cap_connected>
	notify_connected(conn);
   28424:	4620      	mov	r0, r4
   28426:	f7f0 fbb7 	bl	18b98 <notify_connected>
}
   2842a:	bd10      	pop	{r4, pc}

0002842c <bt_conn_get_security>:
}
   2842c:	2001      	movs	r0, #1
   2842e:	4770      	bx	lr

00028430 <bt_conn_add_le>:
{
   28430:	b570      	push	{r4, r5, r6, lr}
   28432:	4606      	mov	r6, r0
   28434:	460d      	mov	r5, r1
	struct bt_conn *conn = acl_conn_new();
   28436:	f7f0 fca1 	bl	18d7c <acl_conn_new>
	if (!conn) {
   2843a:	4604      	mov	r4, r0
   2843c:	b168      	cbz	r0, 2845a <bt_conn_add_le+0x2a>
	conn->id = id;
   2843e:	7206      	strb	r6, [r0, #8]
	memcpy(dst, src, sizeof(*dst));
   28440:	2207      	movs	r2, #7
   28442:	4629      	mov	r1, r5
   28444:	3088      	adds	r0, #136	; 0x88
   28446:	f7ff fc03 	bl	27c50 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   2844a:	2301      	movs	r3, #1
   2844c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   2844e:	2318      	movs	r3, #24
   28450:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
   28454:	2328      	movs	r3, #40	; 0x28
   28456:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
}
   2845a:	4620      	mov	r0, r4
   2845c:	bd70      	pop	{r4, r5, r6, pc}

0002845e <bt_conn_is_peer_addr_le>:
{
   2845e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   28460:	7a03      	ldrb	r3, [r0, #8]
   28462:	428b      	cmp	r3, r1
   28464:	d001      	beq.n	2846a <bt_conn_is_peer_addr_le+0xc>
		return false;
   28466:	2000      	movs	r0, #0
}
   28468:	bd38      	pop	{r3, r4, r5, pc}
   2846a:	4604      	mov	r4, r0
   2846c:	4615      	mov	r5, r2
	return memcmp(a, b, sizeof(*a));
   2846e:	2207      	movs	r2, #7
   28470:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28474:	4628      	mov	r0, r5
   28476:	f7ff fbbe 	bl	27bf6 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2847a:	b1a8      	cbz	r0, 284a8 <bt_conn_is_peer_addr_le+0x4a>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2847c:	78e3      	ldrb	r3, [r4, #3]
   2847e:	b14b      	cbz	r3, 28494 <bt_conn_is_peer_addr_le+0x36>
   28480:	2207      	movs	r2, #7
   28482:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   28486:	4628      	mov	r0, r5
   28488:	f7ff fbb5 	bl	27bf6 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2848c:	fab0 f080 	clz	r0, r0
   28490:	0940      	lsrs	r0, r0, #5
   28492:	e7e9      	b.n	28468 <bt_conn_is_peer_addr_le+0xa>
   28494:	2207      	movs	r2, #7
   28496:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2849a:	4628      	mov	r0, r5
   2849c:	f7ff fbab 	bl	27bf6 <memcmp>
		return bt_addr_le_cmp(peer, &conn->le.resp_addr) == 0;
   284a0:	fab0 f080 	clz	r0, r0
   284a4:	0940      	lsrs	r0, r0, #5
   284a6:	e7df      	b.n	28468 <bt_conn_is_peer_addr_le+0xa>
		return true;
   284a8:	2001      	movs	r0, #1
   284aa:	e7dd      	b.n	28468 <bt_conn_is_peer_addr_le+0xa>

000284ac <bt_conn_get_dst>:
}
   284ac:	3088      	adds	r0, #136	; 0x88
   284ae:	4770      	bx	lr

000284b0 <bt_conn_le_conn_update>:
{
   284b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   284b2:	4606      	mov	r6, r0
   284b4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   284b6:	210e      	movs	r1, #14
   284b8:	f242 0013 	movw	r0, #8211	; 0x2013
   284bc:	f7ee fc72 	bl	16da4 <bt_hci_cmd_create>
	if (!buf) {
   284c0:	b1d0      	cbz	r0, 284f8 <bt_conn_le_conn_update+0x48>
   284c2:	4607      	mov	r7, r0
	return net_buf_simple_add(&buf->b, len);
   284c4:	210e      	movs	r1, #14
   284c6:	3008      	adds	r0, #8
   284c8:	f001 fea0 	bl	2a20c <net_buf_simple_add>
   284cc:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   284ce:	220e      	movs	r2, #14
   284d0:	2100      	movs	r1, #0
   284d2:	f7ff fbe1 	bl	27c98 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   284d6:	8833      	ldrh	r3, [r6, #0]
   284d8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   284da:	882b      	ldrh	r3, [r5, #0]
   284dc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   284de:	886b      	ldrh	r3, [r5, #2]
   284e0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   284e2:	88ab      	ldrh	r3, [r5, #4]
   284e4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   284e6:	88eb      	ldrh	r3, [r5, #6]
   284e8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   284ea:	2200      	movs	r2, #0
   284ec:	4639      	mov	r1, r7
   284ee:	f242 0013 	movw	r0, #8211	; 0x2013
   284f2:	f7ee fc93 	bl	16e1c <bt_hci_cmd_send_sync>
}
   284f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   284f8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   284fc:	e7fb      	b.n	284f6 <bt_conn_le_conn_update+0x46>

000284fe <deferred_work>:
{
   284fe:	b530      	push	{r4, r5, lr}
   28500:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   28502:	f1a0 0458 	sub.w	r4, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   28506:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
   2850a:	b32b      	cbz	r3, 28558 <deferred_work+0x5a>
	if (conn->type != BT_CONN_TYPE_LE) {
   2850c:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   28510:	2b01      	cmp	r3, #1
   28512:	d11f      	bne.n	28554 <deferred_work+0x56>
	    conn->role == BT_CONN_ROLE_CENTRAL) {
   28514:	f810 3c55 	ldrb.w	r3, [r0, #-85]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28518:	b343      	cbz	r3, 2856c <deferred_work+0x6e>
	if (atomic_test_and_clear_bit(conn->flags,
   2851a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2851e:	f3bf 8f5b 	dmb	ish
   28522:	e855 3f00 	ldrex	r3, [r5]
   28526:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   2852a:	e845 2100 	strex	r1, r2, [r5]
   2852e:	2900      	cmp	r1, #0
   28530:	d1f7      	bne.n	28522 <deferred_work+0x24>
   28532:	f3bf 8f5b 	dmb	ish
   28536:	f413 7f00 	tst.w	r3, #512	; 0x200
   2853a:	d11a      	bne.n	28572 <deferred_work+0x74>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2853c:	f3bf 8f5b 	dmb	ish
   28540:	e855 3f00 	ldrex	r3, [r5]
   28544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   28548:	e845 3200 	strex	r2, r3, [r5]
   2854c:	2a00      	cmp	r2, #0
   2854e:	d1f7      	bne.n	28540 <deferred_work+0x42>
   28550:	f3bf 8f5b 	dmb	ish
}
   28554:	b003      	add	sp, #12
   28556:	bd30      	pop	{r4, r5, pc}
		bt_l2cap_disconnected(conn);
   28558:	4620      	mov	r0, r4
   2855a:	f000 f879 	bl	28650 <bt_l2cap_disconnected>
		notify_disconnected(conn);
   2855e:	4620      	mov	r0, r4
   28560:	f7f0 fab8 	bl	18ad4 <notify_disconnected>
		bt_conn_unref(conn);
   28564:	4620      	mov	r0, r4
   28566:	f7ff ff20 	bl	283aa <bt_conn_unref>
		return;
   2856a:	e7f3      	b.n	28554 <deferred_work+0x56>
		bt_le_create_conn_cancel();
   2856c:	f7ee ff9c 	bl	174a8 <bt_le_create_conn_cancel>
		return;
   28570:	e7f0      	b.n	28554 <deferred_work+0x56>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   28572:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   28576:	f8ad 3000 	strh.w	r3, [sp]
   2857a:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
   2857e:	f8ad 3002 	strh.w	r3, [sp, #2]
   28582:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
   28586:	f8ad 3004 	strh.w	r3, [sp, #4]
   2858a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   2858e:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   28592:	4669      	mov	r1, sp
   28594:	4620      	mov	r0, r4
   28596:	f7f1 f867 	bl	19668 <send_conn_le_param_update>
   2859a:	e7cf      	b.n	2853c <deferred_work+0x3e>

0002859c <l2cap_connected>:
}
   2859c:	4770      	bx	lr

0002859e <l2cap_chan_recv>:
{
   2859e:	b510      	push	{r4, lr}
   285a0:	460c      	mov	r4, r1
	chan->ops->recv(chan, buf);
   285a2:	6843      	ldr	r3, [r0, #4]
   285a4:	691b      	ldr	r3, [r3, #16]
   285a6:	4798      	blx	r3
	net_buf_unref(buf);
   285a8:	4620      	mov	r0, r4
   285aa:	f001 fde5 	bl	2a178 <net_buf_unref>
}
   285ae:	bd10      	pop	{r4, pc}

000285b0 <l2cap_disconnected>:
{
   285b0:	b508      	push	{r3, lr}
	(void)k_work_cancel_delayable(&chan->rtx_work);
   285b2:	3010      	adds	r0, #16
   285b4:	f003 fb0a 	bl	2bbcc <k_work_cancel_delayable>
}
   285b8:	bd08      	pop	{r3, pc}

000285ba <bt_l2cap_chan_remove>:
	return list->head;
   285ba:	6d03      	ldr	r3, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   285bc:	b103      	cbz	r3, 285c0 <bt_l2cap_chan_remove+0x6>
   285be:	3b08      	subs	r3, #8
   285c0:	2200      	movs	r2, #0
   285c2:	e016      	b.n	285f2 <bt_l2cap_chan_remove+0x38>
{
   285c4:	b410      	push	{r4}
			sys_slist_remove(&conn->channels, prev, &chan->node);
   285c6:	f103 0108 	add.w	r1, r3, #8
Z_GENLIST_REMOVE(slist, snode)
   285ca:	b142      	cbz	r2, 285de <bt_l2cap_chan_remove+0x24>
	return node->next;
   285cc:	689c      	ldr	r4, [r3, #8]
	parent->next = child;
   285ce:	6014      	str	r4, [r2, #0]
	return list->tail;
   285d0:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   285d2:	42a1      	cmp	r1, r4
   285d4:	d00a      	beq.n	285ec <bt_l2cap_chan_remove+0x32>
	parent->next = child;
   285d6:	2200      	movs	r2, #0
   285d8:	609a      	str	r2, [r3, #8]
}
   285da:	bc10      	pop	{r4}
   285dc:	4770      	bx	lr
	return node->next;
   285de:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   285e0:	6502      	str	r2, [r0, #80]	; 0x50
	return list->tail;
   285e2:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   285e4:	42a1      	cmp	r1, r4
   285e6:	d1f6      	bne.n	285d6 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   285e8:	6542      	str	r2, [r0, #84]	; 0x54
}
   285ea:	e7f4      	b.n	285d6 <bt_l2cap_chan_remove+0x1c>
	list->tail = node;
   285ec:	6542      	str	r2, [r0, #84]	; 0x54
}
   285ee:	e7f2      	b.n	285d6 <bt_l2cap_chan_remove+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   285f0:	4613      	mov	r3, r2
   285f2:	b14b      	cbz	r3, 28608 <bt_l2cap_chan_remove+0x4e>
		if (chan == ch) {
   285f4:	428b      	cmp	r3, r1
   285f6:	d0e5      	beq.n	285c4 <bt_l2cap_chan_remove+0xa>
Z_GENLIST_PEEK_NEXT(slist, snode)
   285f8:	f113 0208 	adds.w	r2, r3, #8
   285fc:	d0f8      	beq.n	285f0 <bt_l2cap_chan_remove+0x36>
	return node->next;
   285fe:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28600:	2b00      	cmp	r3, #0
   28602:	d0f6      	beq.n	285f2 <bt_l2cap_chan_remove+0x38>
   28604:	3b08      	subs	r3, #8
   28606:	e7f4      	b.n	285f2 <bt_l2cap_chan_remove+0x38>
   28608:	4770      	bx	lr

0002860a <bt_l2cap_chan_del>:
{
   2860a:	b538      	push	{r3, r4, r5, lr}
   2860c:	4604      	mov	r4, r0
	const struct bt_l2cap_chan_ops *ops = chan->ops;
   2860e:	6845      	ldr	r5, [r0, #4]
	if (!chan->conn) {
   28610:	6803      	ldr	r3, [r0, #0]
   28612:	b123      	cbz	r3, 2861e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   28614:	686b      	ldr	r3, [r5, #4]
   28616:	b103      	cbz	r3, 2861a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   28618:	4798      	blx	r3
	chan->conn = NULL;
   2861a:	2300      	movs	r3, #0
   2861c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2861e:	68e3      	ldr	r3, [r4, #12]
   28620:	b10b      	cbz	r3, 28626 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   28622:	4620      	mov	r0, r4
   28624:	4798      	blx	r3
	if (ops->released) {
   28626:	69eb      	ldr	r3, [r5, #28]
   28628:	b10b      	cbz	r3, 2862e <bt_l2cap_chan_del+0x24>
		ops->released(chan);
   2862a:	4620      	mov	r0, r4
   2862c:	4798      	blx	r3
}
   2862e:	bd38      	pop	{r3, r4, r5, pc}

00028630 <bt_l2cap_chan_add>:
{
   28630:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
   28632:	f101 0308 	add.w	r3, r1, #8
	parent->next = child;
   28636:	2400      	movs	r4, #0
   28638:	608c      	str	r4, [r1, #8]
	return list->tail;
   2863a:	6d44      	ldr	r4, [r0, #84]	; 0x54
Z_GENLIST_APPEND(slist, snode)
   2863c:	b12c      	cbz	r4, 2864a <bt_l2cap_chan_add+0x1a>
	parent->next = child;
   2863e:	6023      	str	r3, [r4, #0]
	list->tail = node;
   28640:	6543      	str	r3, [r0, #84]	; 0x54
	chan->conn = conn;
   28642:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
   28644:	60ca      	str	r2, [r1, #12]
}
   28646:	bc10      	pop	{r4}
   28648:	4770      	bx	lr
   2864a:	6543      	str	r3, [r0, #84]	; 0x54
	list->head = node;
   2864c:	6503      	str	r3, [r0, #80]	; 0x50
}
   2864e:	e7f8      	b.n	28642 <bt_l2cap_chan_add+0x12>

00028650 <bt_l2cap_disconnected>:
{
   28650:	b510      	push	{r4, lr}
	return list->head;
   28652:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   28654:	b140      	cbz	r0, 28668 <bt_l2cap_disconnected+0x18>
   28656:	3808      	subs	r0, #8
   28658:	d008      	beq.n	2866c <bt_l2cap_disconnected+0x1c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2865a:	f110 0408 	adds.w	r4, r0, #8
   2865e:	d00a      	beq.n	28676 <bt_l2cap_disconnected+0x26>
	return node->next;
   28660:	6884      	ldr	r4, [r0, #8]
   28662:	b144      	cbz	r4, 28676 <bt_l2cap_disconnected+0x26>
   28664:	3c08      	subs	r4, #8
   28666:	e006      	b.n	28676 <bt_l2cap_disconnected+0x26>
   28668:	4604      	mov	r4, r0
   2866a:	e004      	b.n	28676 <bt_l2cap_disconnected+0x26>
   2866c:	4604      	mov	r4, r0
   2866e:	e002      	b.n	28676 <bt_l2cap_disconnected+0x26>
   28670:	4623      	mov	r3, r4
   28672:	4620      	mov	r0, r4
   28674:	461c      	mov	r4, r3
   28676:	b158      	cbz	r0, 28690 <bt_l2cap_disconnected+0x40>
		bt_l2cap_chan_del(chan);
   28678:	f7ff ffc7 	bl	2860a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2867c:	2c00      	cmp	r4, #0
   2867e:	d0f7      	beq.n	28670 <bt_l2cap_disconnected+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28680:	f114 0308 	adds.w	r3, r4, #8
   28684:	d0f5      	beq.n	28672 <bt_l2cap_disconnected+0x22>
	return node->next;
   28686:	68a3      	ldr	r3, [r4, #8]
   28688:	2b00      	cmp	r3, #0
   2868a:	d0f2      	beq.n	28672 <bt_l2cap_disconnected+0x22>
   2868c:	3b08      	subs	r3, #8
   2868e:	e7f0      	b.n	28672 <bt_l2cap_disconnected+0x22>
}
   28690:	bd10      	pop	{r4, pc}

00028692 <bt_l2cap_create_pdu_timeout>:
{
   28692:	b508      	push	{r3, lr}
	return bt_conn_create_pdu_timeout(pool,
   28694:	3104      	adds	r1, #4
   28696:	f7f0 fdf5 	bl	19284 <bt_conn_create_pdu_timeout>
}
   2869a:	bd08      	pop	{r3, pc}

0002869c <bt_l2cap_send_cb>:
{
   2869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2869e:	4605      	mov	r5, r0
   286a0:	460f      	mov	r7, r1
   286a2:	4614      	mov	r4, r2
   286a4:	461e      	mov	r6, r3
	return net_buf_simple_push(&buf->b, len);
   286a6:	2104      	movs	r1, #4
   286a8:	f102 0008 	add.w	r0, r2, #8
   286ac:	f001 fdc8 	bl	2a240 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   286b0:	89a3      	ldrh	r3, [r4, #12]
   286b2:	3b04      	subs	r3, #4
   286b4:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
   286b6:	8047      	strh	r7, [r0, #2]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   286b8:	9b06      	ldr	r3, [sp, #24]
   286ba:	4632      	mov	r2, r6
   286bc:	4621      	mov	r1, r4
   286be:	4628      	mov	r0, r5
   286c0:	f7f0 fc1a 	bl	18ef8 <bt_conn_send_cb>
}
   286c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000286c6 <l2cap_send_reject>:
{
   286c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   286ca:	b083      	sub	sp, #12
   286cc:	4605      	mov	r5, r0
   286ce:	4690      	mov	r8, r2
   286d0:	461c      	mov	r4, r3
   286d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   286d6:	1cbb      	adds	r3, r7, #2
   286d8:	460a      	mov	r2, r1
   286da:	2101      	movs	r1, #1
   286dc:	2000      	movs	r0, #0
   286de:	f7f1 f9e5 	bl	19aac <l2cap_create_le_sig_pdu>
	if (!buf) {
   286e2:	b1b0      	cbz	r0, 28712 <l2cap_send_reject+0x4c>
   286e4:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   286e6:	f100 0908 	add.w	r9, r0, #8
   286ea:	2102      	movs	r1, #2
   286ec:	4648      	mov	r0, r9
   286ee:	f001 fd8d 	bl	2a20c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   286f2:	f8a0 8000 	strh.w	r8, [r0]
	if (data) {
   286f6:	b124      	cbz	r4, 28702 <l2cap_send_reject+0x3c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   286f8:	463a      	mov	r2, r7
   286fa:	4621      	mov	r1, r4
   286fc:	4648      	mov	r0, r9
   286fe:	f001 fd8b 	bl	2a218 <net_buf_simple_add_mem>
   28702:	2300      	movs	r3, #0
   28704:	9300      	str	r3, [sp, #0]
   28706:	4632      	mov	r2, r6
   28708:	2105      	movs	r1, #5
   2870a:	4628      	mov	r0, r5
   2870c:	f7ff ffc6 	bl	2869c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   28710:	b910      	cbnz	r0, 28718 <l2cap_send_reject+0x52>
}
   28712:	b003      	add	sp, #12
   28714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		net_buf_unref(buf);
   28718:	4630      	mov	r0, r6
   2871a:	f001 fd2d 	bl	2a178 <net_buf_unref>
}
   2871e:	e7f8      	b.n	28712 <l2cap_send_reject+0x4c>

00028720 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   28720:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28722:	b110      	cbz	r0, 2872a <bt_l2cap_le_lookup_tx_cid+0xa>
   28724:	3808      	subs	r0, #8
   28726:	e000      	b.n	2872a <bt_l2cap_le_lookup_tx_cid+0xa>
   28728:	3808      	subs	r0, #8
   2872a:	b148      	cbz	r0, 28740 <bt_l2cap_le_lookup_tx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2872c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   28730:	428b      	cmp	r3, r1
   28732:	d005      	beq.n	28740 <bt_l2cap_le_lookup_tx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28734:	f110 0308 	adds.w	r3, r0, #8
   28738:	d003      	beq.n	28742 <bt_l2cap_le_lookup_tx_cid+0x22>
	return node->next;
   2873a:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2873c:	2800      	cmp	r0, #0
   2873e:	d1f3      	bne.n	28728 <bt_l2cap_le_lookup_tx_cid+0x8>
}
   28740:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28742:	4618      	mov	r0, r3
   28744:	e7f1      	b.n	2872a <bt_l2cap_le_lookup_tx_cid+0xa>

00028746 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   28746:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28748:	b110      	cbz	r0, 28750 <bt_l2cap_le_lookup_rx_cid+0xa>
   2874a:	3808      	subs	r0, #8
   2874c:	e000      	b.n	28750 <bt_l2cap_le_lookup_rx_cid+0xa>
   2874e:	3808      	subs	r0, #8
   28750:	b148      	cbz	r0, 28766 <bt_l2cap_le_lookup_rx_cid+0x20>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28752:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   28756:	428b      	cmp	r3, r1
   28758:	d005      	beq.n	28766 <bt_l2cap_le_lookup_rx_cid+0x20>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2875a:	f110 0308 	adds.w	r3, r0, #8
   2875e:	d003      	beq.n	28768 <bt_l2cap_le_lookup_rx_cid+0x22>
	return node->next;
   28760:	6880      	ldr	r0, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28762:	2800      	cmp	r0, #0
   28764:	d1f3      	bne.n	2874e <bt_l2cap_le_lookup_rx_cid+0x8>
}
   28766:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28768:	4618      	mov	r0, r3
   2876a:	e7f1      	b.n	28750 <bt_l2cap_le_lookup_rx_cid+0xa>

0002876c <bt_l2cap_update_conn_param>:
{
   2876c:	b570      	push	{r4, r5, r6, lr}
   2876e:	b082      	sub	sp, #8
   28770:	4605      	mov	r5, r0
   28772:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   28774:	f7f1 f8a6 	bl	198c4 <get_ident>
   28778:	4602      	mov	r2, r0
   2877a:	2308      	movs	r3, #8
   2877c:	2112      	movs	r1, #18
   2877e:	2000      	movs	r0, #0
   28780:	f7f1 f994 	bl	19aac <l2cap_create_le_sig_pdu>
	if (!buf) {
   28784:	b1e0      	cbz	r0, 287c0 <bt_l2cap_update_conn_param+0x54>
   28786:	4606      	mov	r6, r0
	return net_buf_simple_add(&buf->b, len);
   28788:	2108      	movs	r1, #8
   2878a:	4408      	add	r0, r1
   2878c:	f001 fd3e 	bl	2a20c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   28790:	8823      	ldrh	r3, [r4, #0]
   28792:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   28794:	8863      	ldrh	r3, [r4, #2]
   28796:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   28798:	88a3      	ldrh	r3, [r4, #4]
   2879a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   2879c:	88e3      	ldrh	r3, [r4, #6]
   2879e:	80c3      	strh	r3, [r0, #6]
   287a0:	2300      	movs	r3, #0
   287a2:	9300      	str	r3, [sp, #0]
   287a4:	4632      	mov	r2, r6
   287a6:	2105      	movs	r1, #5
   287a8:	4628      	mov	r0, r5
   287aa:	f7ff ff77 	bl	2869c <bt_l2cap_send_cb>
	if (err) {
   287ae:	4604      	mov	r4, r0
   287b0:	b910      	cbnz	r0, 287b8 <bt_l2cap_update_conn_param+0x4c>
}
   287b2:	4620      	mov	r0, r4
   287b4:	b002      	add	sp, #8
   287b6:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
   287b8:	4630      	mov	r0, r6
   287ba:	f001 fcdd 	bl	2a178 <net_buf_unref>
		return err;
   287be:	e7f8      	b.n	287b2 <bt_l2cap_update_conn_param+0x46>
		return -ENOMEM;
   287c0:	f06f 040b 	mvn.w	r4, #11
   287c4:	e7f5      	b.n	287b2 <bt_l2cap_update_conn_param+0x46>

000287c6 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   287c6:	4770      	bx	lr

000287c8 <att_sent>:
{
   287c8:	b508      	push	{r3, lr}
	if (chan->ops->sent) {
   287ca:	684b      	ldr	r3, [r1, #4]
   287cc:	695b      	ldr	r3, [r3, #20]
   287ce:	b10b      	cbz	r3, 287d4 <att_sent+0xc>
   287d0:	4608      	mov	r0, r1
		chan->ops->sent(chan);
   287d2:	4798      	blx	r3
}
   287d4:	bd08      	pop	{r3, pc}

000287d6 <range_is_valid>:
	if (!start || !end) {
   287d6:	b120      	cbz	r0, 287e2 <range_is_valid+0xc>
   287d8:	b119      	cbz	r1, 287e2 <range_is_valid+0xc>
	if (start > end) {
   287da:	4288      	cmp	r0, r1
   287dc:	d806      	bhi.n	287ec <range_is_valid+0x16>
	return true;
   287de:	2001      	movs	r0, #1
}
   287e0:	4770      	bx	lr
		if (err) {
   287e2:	b10a      	cbz	r2, 287e8 <range_is_valid+0x12>
			*err = 0U;
   287e4:	2300      	movs	r3, #0
   287e6:	8013      	strh	r3, [r2, #0]
		return false;
   287e8:	2000      	movs	r0, #0
   287ea:	4770      	bx	lr
		if (err) {
   287ec:	b102      	cbz	r2, 287f0 <range_is_valid+0x1a>
			*err = start;
   287ee:	8010      	strh	r0, [r2, #0]
		return false;
   287f0:	2000      	movs	r0, #0
   287f2:	4770      	bx	lr

000287f4 <err_to_att>:
	if (err < 0 && err >= -0xff) {
   287f4:	f110 0fff 	cmn.w	r0, #255	; 0xff
   287f8:	d201      	bcs.n	287fe <err_to_att+0xa>
	return BT_ATT_ERR_UNLIKELY;
   287fa:	200e      	movs	r0, #14
}
   287fc:	4770      	bx	lr
		return -err;
   287fe:	4240      	negs	r0, r0
   28800:	b2c0      	uxtb	r0, r0
   28802:	4770      	bx	lr

00028804 <attr_read_type_cb>:
{
   28804:	b410      	push	{r4}
	if (!data->rsp->len) {
   28806:	68d4      	ldr	r4, [r2, #12]
   28808:	7823      	ldrb	r3, [r4, #0]
   2880a:	b923      	cbnz	r3, 28816 <attr_read_type_cb+0x12>
		data->rsp->len = read + sizeof(*data->item);
   2880c:	3102      	adds	r1, #2
   2880e:	7021      	strb	r1, [r4, #0]
	return true;
   28810:	2001      	movs	r0, #1
}
   28812:	bc10      	pop	{r4}
   28814:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   28816:	3102      	adds	r1, #2
   28818:	428b      	cmp	r3, r1
   2881a:	d005      	beq.n	28828 <attr_read_type_cb+0x24>
		frag->len -= sizeof(*data->item);
   2881c:	8983      	ldrh	r3, [r0, #12]
   2881e:	3b02      	subs	r3, #2
   28820:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   28822:	2000      	movs	r0, #0
   28824:	6110      	str	r0, [r2, #16]
		return false;
   28826:	e7f4      	b.n	28812 <attr_read_type_cb+0xe>
	return true;
   28828:	2001      	movs	r0, #1
   2882a:	e7f2      	b.n	28812 <attr_read_type_cb+0xe>

0002882c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2882c:	68d0      	ldr	r0, [r2, #12]
   2882e:	7803      	ldrb	r3, [r0, #0]
   28830:	b91b      	cbnz	r3, 2883a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   28832:	3104      	adds	r1, #4
   28834:	7001      	strb	r1, [r0, #0]
	return true;
   28836:	2001      	movs	r0, #1
   28838:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2883a:	3104      	adds	r1, #4
   2883c:	428b      	cmp	r3, r1
   2883e:	d006      	beq.n	2884e <attr_read_group_cb+0x22>
		data->buf->len -= sizeof(*data->group);
   28840:	6891      	ldr	r1, [r2, #8]
   28842:	898b      	ldrh	r3, [r1, #12]
   28844:	3b04      	subs	r3, #4
   28846:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   28848:	2000      	movs	r0, #0
   2884a:	6110      	str	r0, [r2, #16]
		return false;
   2884c:	4770      	bx	lr
	return true;
   2884e:	2001      	movs	r0, #1
}
   28850:	4770      	bx	lr

00028852 <att_prepare_write_req>:
}
   28852:	2006      	movs	r0, #6
   28854:	4770      	bx	lr

00028856 <att_exec_write_req>:
}
   28856:	2006      	movs	r0, #6
   28858:	4770      	bx	lr

0002885a <att_op_get_type>:
	switch (op) {
   2885a:	1e43      	subs	r3, r0, #1
   2885c:	2bd1      	cmp	r3, #209	; 0xd1
   2885e:	d874      	bhi.n	2894a <att_op_get_type+0xf0>
   28860:	e8df f003 	tbb	[pc, r3]
   28864:	696d696d 	.word	0x696d696d
   28868:	696d696d 	.word	0x696d696d
   2886c:	696d696d 	.word	0x696d696d
   28870:	696d696d 	.word	0x696d696d
   28874:	736d696d 	.word	0x736d696d
   28878:	696d6973 	.word	0x696d6973
   2887c:	736f736d 	.word	0x736f736d
   28880:	73737871 	.word	0x73737871
   28884:	73737373 	.word	0x73737373
   28888:	73737373 	.word	0x73737373
   2888c:	73737373 	.word	0x73737373
   28890:	73737373 	.word	0x73737373
   28894:	73737373 	.word	0x73737373
   28898:	73737373 	.word	0x73737373
   2889c:	73737373 	.word	0x73737373
   288a0:	73737373 	.word	0x73737373
   288a4:	73737373 	.word	0x73737373
   288a8:	73737373 	.word	0x73737373
   288ac:	73737373 	.word	0x73737373
   288b0:	73737373 	.word	0x73737373
   288b4:	73736b73 	.word	0x73736b73
   288b8:	73737373 	.word	0x73737373
   288bc:	73737373 	.word	0x73737373
   288c0:	73737373 	.word	0x73737373
   288c4:	73737373 	.word	0x73737373
   288c8:	73737373 	.word	0x73737373
   288cc:	73737373 	.word	0x73737373
   288d0:	73737373 	.word	0x73737373
   288d4:	73737373 	.word	0x73737373
   288d8:	73737373 	.word	0x73737373
   288dc:	73737373 	.word	0x73737373
   288e0:	73737373 	.word	0x73737373
   288e4:	73737373 	.word	0x73737373
   288e8:	73737373 	.word	0x73737373
   288ec:	73737373 	.word	0x73737373
   288f0:	73737373 	.word	0x73737373
   288f4:	73737373 	.word	0x73737373
   288f8:	73737373 	.word	0x73737373
   288fc:	73737373 	.word	0x73737373
   28900:	73737373 	.word	0x73737373
   28904:	73737373 	.word	0x73737373
   28908:	73737373 	.word	0x73737373
   2890c:	73737373 	.word	0x73737373
   28910:	73737373 	.word	0x73737373
   28914:	73737373 	.word	0x73737373
   28918:	73737373 	.word	0x73737373
   2891c:	73737373 	.word	0x73737373
   28920:	73737373 	.word	0x73737373
   28924:	73737373 	.word	0x73737373
   28928:	73737373 	.word	0x73737373
   2892c:	73737373 	.word	0x73737373
   28930:	73737373 	.word	0x73737373
   28934:	6b73      	.short	0x6b73
{
   28936:	2001      	movs	r0, #1
   28938:	4770      	bx	lr
		return ATT_COMMAND;
   2893a:	2000      	movs	r0, #0
   2893c:	4770      	bx	lr
		return ATT_RESPONSE;
   2893e:	2002      	movs	r0, #2
   28940:	4770      	bx	lr
		return ATT_NOTIFICATION;
   28942:	2003      	movs	r0, #3
   28944:	4770      	bx	lr
		return ATT_INDICATION;
   28946:	2005      	movs	r0, #5
   28948:	4770      	bx	lr
	if (op & ATT_CMD_MASK) {
   2894a:	f010 0f40 	tst.w	r0, #64	; 0x40
   2894e:	d103      	bne.n	28958 <att_op_get_type+0xfe>
	return ATT_UNKNOWN;
   28950:	2006      	movs	r0, #6
   28952:	4770      	bx	lr
		return ATT_CONFIRMATION;
   28954:	2004      	movs	r0, #4
   28956:	4770      	bx	lr
		return ATT_COMMAND;
   28958:	2000      	movs	r0, #0
}
   2895a:	4770      	bx	lr

0002895c <att_chan_attach>:
{
   2895c:	b538      	push	{r3, r4, r5, lr}
   2895e:	4604      	mov	r4, r0
   28960:	460d      	mov	r5, r1
	return list->head;
   28962:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sys_slist_is_empty(&att->chans)) {
   28964:	b143      	cbz	r3, 28978 <att_chan_attach+0x1c>
	sys_slist_prepend(&att->chans, &chan->node);
   28966:	f505 73a2 	add.w	r3, r5, #324	; 0x144
   2896a:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   2896c:	f8c5 2144 	str.w	r2, [r5, #324]	; 0x144
	list->head = node;
   28970:	6263      	str	r3, [r4, #36]	; 0x24
	return list->tail;
   28972:	6aa2      	ldr	r2, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   28974:	b122      	cbz	r2, 28980 <att_chan_attach+0x24>
}
   28976:	bd38      	pop	{r3, r4, r5, pc}
		k_fifo_init(&att->tx_queue);
   28978:	300c      	adds	r0, #12
	z_impl_k_queue_init(queue);
   2897a:	f002 ffcd 	bl	2b918 <z_impl_k_queue_init>
}
   2897e:	e7f2      	b.n	28966 <att_chan_attach+0xa>
	list->tail = node;
   28980:	62a3      	str	r3, [r4, #40]	; 0x28
}
   28982:	e7f8      	b.n	28976 <att_chan_attach+0x1a>

00028984 <chan_req_send>:
{
   28984:	b538      	push	{r3, r4, r5, lr}
   28986:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28988:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   2898c:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2898e:	2200      	movs	r2, #0
	while (buf) {
   28990:	b11b      	cbz	r3, 2899a <chan_req_send+0x16>
		bytes += buf->len;
   28992:	899c      	ldrh	r4, [r3, #12]
   28994:	4422      	add	r2, r4
		buf = buf->frags;
   28996:	681b      	ldr	r3, [r3, #0]
   28998:	e7fa      	b.n	28990 <chan_req_send+0xc>
   2899a:	4291      	cmp	r1, r2
   2899c:	d30a      	bcc.n	289b4 <chan_req_send+0x30>
	chan->req = req;
   2899e:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
	buf = req->buf;
   289a2:	68ac      	ldr	r4, [r5, #8]
	req->buf = NULL;
   289a4:	2200      	movs	r2, #0
   289a6:	60aa      	str	r2, [r5, #8]
	err = chan_send(chan, buf, NULL);
   289a8:	4621      	mov	r1, r4
   289aa:	f7f1 fb4b 	bl	1a044 <chan_send>
	if (err) {
   289ae:	b100      	cbz	r0, 289b2 <chan_req_send+0x2e>
		req->buf = buf;
   289b0:	60ac      	str	r4, [r5, #8]
}
   289b2:	bd38      	pop	{r3, r4, r5, pc}
		return -EMSGSIZE;
   289b4:	f06f 0079 	mvn.w	r0, #121	; 0x79
   289b8:	e7fb      	b.n	289b2 <chan_req_send+0x2e>

000289ba <bt_att_chan_req_send>:
{
   289ba:	b508      	push	{r3, lr}
	return chan_req_send(chan, req);
   289bc:	f7ff ffe2 	bl	28984 <chan_req_send>
}
   289c0:	bd08      	pop	{r3, pc}

000289c2 <bt_att_status>:
{
   289c2:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   289c4:	f3bf 8f5b 	dmb	ish
   289c8:	680b      	ldr	r3, [r1, #0]
   289ca:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   289ce:	f013 0f01 	tst.w	r3, #1
   289d2:	d007      	beq.n	289e4 <bt_att_status+0x22>
   289d4:	4604      	mov	r4, r0
   289d6:	3808      	subs	r0, #8
	if (!chan->att) {
   289d8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   289dc:	b113      	cbz	r3, 289e4 <bt_att_status+0x22>
	if (chan->req) {
   289de:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
   289e2:	b102      	cbz	r2, 289e6 <bt_att_status+0x24>
}
   289e4:	bd38      	pop	{r3, r4, r5, pc}
	return list->head;
   289e6:	685d      	ldr	r5, [r3, #4]
Z_GENLIST_GET(slist, snode)
   289e8:	2d00      	cmp	r5, #0
   289ea:	d0fb      	beq.n	289e4 <bt_att_status+0x22>
	return node->next;
   289ec:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   289ee:	605a      	str	r2, [r3, #4]
	return list->tail;
   289f0:	6899      	ldr	r1, [r3, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   289f2:	42a9      	cmp	r1, r5
   289f4:	d00e      	beq.n	28a14 <bt_att_status+0x52>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   289f6:	4629      	mov	r1, r5
   289f8:	f7ff ffdf 	bl	289ba <bt_att_chan_req_send>
   289fc:	2800      	cmp	r0, #0
   289fe:	daf1      	bge.n	289e4 <bt_att_status+0x22>
	sys_slist_prepend(&chan->att->reqs, node);
   28a00:	f854 3c08 	ldr.w	r3, [r4, #-8]
	return list->head;
   28a04:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   28a06:	602a      	str	r2, [r5, #0]
	list->head = node;
   28a08:	605d      	str	r5, [r3, #4]
	return list->tail;
   28a0a:	689a      	ldr	r2, [r3, #8]
Z_GENLIST_PREPEND(slist, snode)
   28a0c:	2a00      	cmp	r2, #0
   28a0e:	d1e9      	bne.n	289e4 <bt_att_status+0x22>
	list->tail = node;
   28a10:	609d      	str	r5, [r3, #8]
}
   28a12:	e7e7      	b.n	289e4 <bt_att_status+0x22>
	list->tail = node;
   28a14:	609a      	str	r2, [r3, #8]
}
   28a16:	e7ee      	b.n	289f6 <bt_att_status+0x34>

00028a18 <att_req_send_process>:
{
   28a18:	b570      	push	{r4, r5, r6, lr}
	return list->head;
   28a1a:	6846      	ldr	r6, [r0, #4]
Z_GENLIST_GET(slist, snode)
   28a1c:	2e00      	cmp	r6, #0
   28a1e:	d038      	beq.n	28a92 <att_req_send_process+0x7a>
   28a20:	4605      	mov	r5, r0
	return node->next;
   28a22:	6833      	ldr	r3, [r6, #0]
	list->head = node;
   28a24:	6043      	str	r3, [r0, #4]
	return list->tail;
   28a26:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28a28:	4296      	cmp	r6, r2
   28a2a:	d00d      	beq.n	28a48 <att_req_send_process+0x30>
	return list->head;
   28a2c:	6a68      	ldr	r0, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28a2e:	b198      	cbz	r0, 28a58 <att_req_send_process+0x40>
   28a30:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   28a34:	d012      	beq.n	28a5c <att_req_send_process+0x44>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28a36:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   28a3a:	d014      	beq.n	28a66 <att_req_send_process+0x4e>
	return node->next;
   28a3c:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   28a40:	b18c      	cbz	r4, 28a66 <att_req_send_process+0x4e>
   28a42:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   28a46:	e00e      	b.n	28a66 <att_req_send_process+0x4e>
	list->tail = node;
   28a48:	6083      	str	r3, [r0, #8]
}
   28a4a:	e7ef      	b.n	28a2c <att_req_send_process+0x14>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28a4c:	4631      	mov	r1, r6
   28a4e:	f7ff ffb4 	bl	289ba <bt_att_chan_req_send>
   28a52:	2800      	cmp	r0, #0
   28a54:	db0c      	blt.n	28a70 <att_req_send_process+0x58>
   28a56:	e01c      	b.n	28a92 <att_req_send_process+0x7a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28a58:	4604      	mov	r4, r0
   28a5a:	e004      	b.n	28a66 <att_req_send_process+0x4e>
   28a5c:	4604      	mov	r4, r0
   28a5e:	e002      	b.n	28a66 <att_req_send_process+0x4e>
   28a60:	4623      	mov	r3, r4
   28a62:	4620      	mov	r0, r4
   28a64:	461c      	mov	r4, r3
   28a66:	b178      	cbz	r0, 28a88 <att_req_send_process+0x70>
		if (!chan->req) {
   28a68:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   28a6c:	2b00      	cmp	r3, #0
   28a6e:	d0ed      	beq.n	28a4c <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28a70:	2c00      	cmp	r4, #0
   28a72:	d0f5      	beq.n	28a60 <att_req_send_process+0x48>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28a74:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   28a78:	d0f3      	beq.n	28a62 <att_req_send_process+0x4a>
	return node->next;
   28a7a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   28a7e:	2b00      	cmp	r3, #0
   28a80:	d0ef      	beq.n	28a62 <att_req_send_process+0x4a>
   28a82:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   28a86:	e7ec      	b.n	28a62 <att_req_send_process+0x4a>
	return list->head;
   28a88:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   28a8a:	6033      	str	r3, [r6, #0]
	list->head = node;
   28a8c:	606e      	str	r6, [r5, #4]
	return list->tail;
   28a8e:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   28a90:	b103      	cbz	r3, 28a94 <att_req_send_process+0x7c>
}
   28a92:	bd70      	pop	{r4, r5, r6, pc}
	list->tail = node;
   28a94:	60ae      	str	r6, [r5, #8]
}
   28a96:	e7fc      	b.n	28a92 <att_req_send_process+0x7a>

00028a98 <bt_att_chan_send>:
{
   28a98:	b508      	push	{r3, lr}
	return chan_send(chan, buf, cb);
   28a9a:	f7f1 fad3 	bl	1a044 <chan_send>
}
   28a9e:	bd08      	pop	{r3, pc}

00028aa0 <chan_req_sent>:
{
   28aa0:	b508      	push	{r3, lr}
	if (chan->req) {
   28aa2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   28aa6:	b133      	cbz	r3, 28ab6 <chan_req_sent+0x16>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   28aa8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28aac:	2300      	movs	r3, #0
   28aae:	f500 7088 	add.w	r0, r0, #272	; 0x110
   28ab2:	f7f9 fafd 	bl	220b0 <k_work_reschedule>
}
   28ab6:	bd08      	pop	{r3, pc}

00028ab8 <chan_cfm_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   28ab8:	30f0      	adds	r0, #240	; 0xf0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28aba:	f3bf 8f5b 	dmb	ish
   28abe:	e850 3f00 	ldrex	r3, [r0]
   28ac2:	f023 0302 	bic.w	r3, r3, #2
   28ac6:	e840 3200 	strex	r2, r3, [r0]
   28aca:	2a00      	cmp	r2, #0
   28acc:	d1f7      	bne.n	28abe <chan_cfm_sent+0x6>
   28ace:	f3bf 8f5b 	dmb	ish
}
   28ad2:	4770      	bx	lr

00028ad4 <chan_rsp_sent>:
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   28ad4:	30f0      	adds	r0, #240	; 0xf0
   28ad6:	f3bf 8f5b 	dmb	ish
   28ada:	e850 3f00 	ldrex	r3, [r0]
   28ade:	f023 0301 	bic.w	r3, r3, #1
   28ae2:	e840 3200 	strex	r2, r3, [r0]
   28ae6:	2a00      	cmp	r2, #0
   28ae8:	d1f7      	bne.n	28ada <chan_rsp_sent+0x6>
   28aea:	f3bf 8f5b 	dmb	ish
}
   28aee:	4770      	bx	lr

00028af0 <process_queue>:
{
   28af0:	b570      	push	{r4, r5, r6, lr}
   28af2:	4605      	mov	r5, r0
   28af4:	460c      	mov	r4, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   28af6:	2200      	movs	r2, #0
   28af8:	2300      	movs	r3, #0
   28afa:	4608      	mov	r0, r1
   28afc:	f001 fb0a 	bl	2a114 <net_buf_get>
	if (buf) {
   28b00:	b170      	cbz	r0, 28b20 <process_queue+0x30>
   28b02:	4606      	mov	r6, r0
		err = chan_send(chan, buf, NULL);
   28b04:	2200      	movs	r2, #0
   28b06:	4601      	mov	r1, r0
   28b08:	4628      	mov	r0, r5
   28b0a:	f7f1 fa9b 	bl	1a044 <chan_send>
		if (err) {
   28b0e:	4605      	mov	r5, r0
   28b10:	b908      	cbnz	r0, 28b16 <process_queue+0x26>
}
   28b12:	4628      	mov	r0, r5
   28b14:	bd70      	pop	{r4, r5, r6, pc}
			k_queue_prepend(&queue->_queue, buf);
   28b16:	4631      	mov	r1, r6
   28b18:	4620      	mov	r0, r4
   28b1a:	f002 ff15 	bl	2b948 <k_queue_prepend>
			return err;
   28b1e:	e7f8      	b.n	28b12 <process_queue+0x22>
	return -ENOENT;
   28b20:	f06f 0501 	mvn.w	r5, #1
   28b24:	e7f5      	b.n	28b12 <process_queue+0x22>

00028b26 <bt_att_sent>:
{
   28b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28b28:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   28b2a:	f1a0 0608 	sub.w	r6, r0, #8
	struct bt_att *att = chan->att;
   28b2e:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (chan->sent) {
   28b32:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
   28b36:	b10b      	cbz	r3, 28b3c <bt_att_sent+0x16>
		chan->sent(chan);
   28b38:	4630      	mov	r0, r6
   28b3a:	4798      	blx	r3
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   28b3c:	f104 03e8 	add.w	r3, r4, #232	; 0xe8
   28b40:	f3bf 8f5b 	dmb	ish
   28b44:	e853 2f00 	ldrex	r2, [r3]
   28b48:	f022 0210 	bic.w	r2, r2, #16
   28b4c:	e843 2100 	strex	r1, r2, [r3]
   28b50:	2900      	cmp	r1, #0
   28b52:	d1f7      	bne.n	28b44 <bt_att_sent+0x1e>
   28b54:	f3bf 8f5b 	dmb	ish
	if (!att) {
   28b58:	b145      	cbz	r5, 28b6c <bt_att_sent+0x46>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28b5a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   28b5e:	b133      	cbz	r3, 28b6e <bt_att_sent+0x48>
	err = process_queue(chan, &chan->tx_queue);
   28b60:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
   28b64:	4630      	mov	r0, r6
   28b66:	f7ff ffc3 	bl	28af0 <process_queue>
	if (!err) {
   28b6a:	b9c0      	cbnz	r0, 28b9e <bt_att_sent+0x78>
}
   28b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return list->head;
   28b6e:	686f      	ldr	r7, [r5, #4]
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28b70:	2f00      	cmp	r7, #0
   28b72:	d0f5      	beq.n	28b60 <bt_att_sent+0x3a>
	return node->next;
   28b74:	683b      	ldr	r3, [r7, #0]
	list->head = node;
   28b76:	606b      	str	r3, [r5, #4]
	return list->tail;
   28b78:	68aa      	ldr	r2, [r5, #8]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28b7a:	42ba      	cmp	r2, r7
   28b7c:	d00d      	beq.n	28b9a <bt_att_sent+0x74>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28b7e:	4639      	mov	r1, r7
   28b80:	4630      	mov	r0, r6
   28b82:	f7ff feff 	bl	28984 <chan_req_send>
   28b86:	2800      	cmp	r0, #0
   28b88:	daf0      	bge.n	28b6c <bt_att_sent+0x46>
	return list->head;
   28b8a:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   28b8c:	603b      	str	r3, [r7, #0]
	list->head = node;
   28b8e:	606f      	str	r7, [r5, #4]
	return list->tail;
   28b90:	68ab      	ldr	r3, [r5, #8]
Z_GENLIST_PREPEND(slist, snode)
   28b92:	2b00      	cmp	r3, #0
   28b94:	d1e4      	bne.n	28b60 <bt_att_sent+0x3a>
	list->tail = node;
   28b96:	60af      	str	r7, [r5, #8]
}
   28b98:	e7e2      	b.n	28b60 <bt_att_sent+0x3a>
	list->tail = node;
   28b9a:	60ab      	str	r3, [r5, #8]
}
   28b9c:	e7ef      	b.n	28b7e <bt_att_sent+0x58>
	(void)process_queue(chan, &att->tx_queue);
   28b9e:	f105 010c 	add.w	r1, r5, #12
   28ba2:	4630      	mov	r0, r6
   28ba4:	f7ff ffa4 	bl	28af0 <process_queue>
   28ba8:	e7e0      	b.n	28b6c <bt_att_sent+0x46>

00028baa <att_send_process>:
{
   28baa:	b570      	push	{r4, r5, r6, lr}
   28bac:	4606      	mov	r6, r0
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   28bae:	2200      	movs	r2, #0
   28bb0:	2300      	movs	r3, #0
   28bb2:	300c      	adds	r0, #12
   28bb4:	f001 faae 	bl	2a114 <net_buf_get>
	if (!buf) {
   28bb8:	b360      	cbz	r0, 28c14 <att_send_process+0x6a>
   28bba:	4605      	mov	r5, r0
	return list->head;
   28bbc:	6a70      	ldr	r0, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28bbe:	b158      	cbz	r0, 28bd8 <att_send_process+0x2e>
   28bc0:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   28bc4:	d00c      	beq.n	28be0 <att_send_process+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28bc6:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   28bca:	d006      	beq.n	28bda <att_send_process+0x30>
	return node->next;
   28bcc:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   28bd0:	b11c      	cbz	r4, 28bda <att_send_process+0x30>
   28bd2:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   28bd6:	e000      	b.n	28bda <att_send_process+0x30>
   28bd8:	4604      	mov	r4, r0
   28bda:	f06f 0301 	mvn.w	r3, #1
   28bde:	e004      	b.n	28bea <att_send_process+0x40>
   28be0:	4604      	mov	r4, r0
   28be2:	e7fa      	b.n	28bda <att_send_process+0x30>
   28be4:	4622      	mov	r2, r4
   28be6:	4620      	mov	r0, r4
   28be8:	4614      	mov	r4, r2
   28bea:	b188      	cbz	r0, 28c10 <att_send_process+0x66>
		err = bt_att_chan_send(chan, buf, NULL);
   28bec:	2200      	movs	r2, #0
   28bee:	4629      	mov	r1, r5
   28bf0:	f7ff ff52 	bl	28a98 <bt_att_chan_send>
		if (err >= 0) {
   28bf4:	1e03      	subs	r3, r0, #0
   28bf6:	da0b      	bge.n	28c10 <att_send_process+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28bf8:	2c00      	cmp	r4, #0
   28bfa:	d0f3      	beq.n	28be4 <att_send_process+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28bfc:	f514 72a2 	adds.w	r2, r4, #324	; 0x144
   28c00:	d0f1      	beq.n	28be6 <att_send_process+0x3c>
	return node->next;
   28c02:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
   28c06:	2a00      	cmp	r2, #0
   28c08:	d0ed      	beq.n	28be6 <att_send_process+0x3c>
   28c0a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
   28c0e:	e7ea      	b.n	28be6 <att_send_process+0x3c>
	if (err < 0) {
   28c10:	2b00      	cmp	r3, #0
   28c12:	db00      	blt.n	28c16 <att_send_process+0x6c>
}
   28c14:	bd70      	pop	{r4, r5, r6, pc}
		k_queue_prepend(&att->tx_queue._queue, buf);
   28c16:	4629      	mov	r1, r5
   28c18:	f106 000c 	add.w	r0, r6, #12
   28c1c:	f002 fe94 	bl	2b948 <k_queue_prepend>
   28c20:	e7f8      	b.n	28c14 <att_send_process+0x6a>

00028c22 <att_notify_mult>:
{
   28c22:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   28c24:	6803      	ldr	r3, [r0, #0]
   28c26:	898a      	ldrh	r2, [r1, #12]
   28c28:	6889      	ldr	r1, [r1, #8]
   28c2a:	6818      	ldr	r0, [r3, #0]
   28c2c:	f7f2 ff90 	bl	1bb50 <bt_gatt_mult_notification>
}
   28c30:	2000      	movs	r0, #0
   28c32:	bd08      	pop	{r3, pc}

00028c34 <att_notify>:
{
   28c34:	b538      	push	{r3, r4, r5, lr}
   28c36:	4605      	mov	r5, r0
   28c38:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   28c3a:	f101 0008 	add.w	r0, r1, #8
   28c3e:	f001 fb1f 	bl	2a280 <net_buf_simple_pull_le16>
   28c42:	4601      	mov	r1, r0
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   28c44:	682d      	ldr	r5, [r5, #0]
   28c46:	89a3      	ldrh	r3, [r4, #12]
   28c48:	68a2      	ldr	r2, [r4, #8]
   28c4a:	6828      	ldr	r0, [r5, #0]
   28c4c:	f001 f8e3 	bl	29e16 <bt_gatt_notification>
}
   28c50:	2000      	movs	r0, #0
   28c52:	bd38      	pop	{r3, r4, r5, pc}

00028c54 <bt_att_chan_send_rsp>:
{
   28c54:	b538      	push	{r3, r4, r5, lr}
   28c56:	4604      	mov	r4, r0
   28c58:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   28c5a:	f7ff ff1d 	bl	28a98 <bt_att_chan_send>
	if (err) {
   28c5e:	b900      	cbnz	r0, 28c62 <bt_att_chan_send_rsp+0xe>
}
   28c60:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_put(&chan->tx_queue, buf);
   28c62:	4629      	mov	r1, r5
   28c64:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   28c68:	f001 fa79 	bl	2a15e <net_buf_put>
}
   28c6c:	e7f8      	b.n	28c60 <bt_att_chan_send_rsp+0xc>

00028c6e <att_chan_mtu_updated>:
{
   28c6e:	b570      	push	{r4, r5, r6, lr}
	struct bt_att *att = updated_chan->att;
   28c70:	6806      	ldr	r6, [r0, #0]
	return list->head;
   28c72:	6a74      	ldr	r4, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28c74:	b15c      	cbz	r4, 28c8e <att_chan_mtu_updated+0x20>
   28c76:	f5b4 74a2 	subs.w	r4, r4, #324	; 0x144
   28c7a:	d00c      	beq.n	28c96 <att_chan_mtu_updated+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28c7c:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   28c80:	d006      	beq.n	28c90 <att_chan_mtu_updated+0x22>
	return node->next;
   28c82:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   28c86:	b11b      	cbz	r3, 28c90 <att_chan_mtu_updated+0x22>
   28c88:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   28c8c:	e000      	b.n	28c90 <att_chan_mtu_updated+0x22>
   28c8e:	4623      	mov	r3, r4
   28c90:	2200      	movs	r2, #0
   28c92:	4611      	mov	r1, r2
   28c94:	e004      	b.n	28ca0 <att_chan_mtu_updated+0x32>
   28c96:	4623      	mov	r3, r4
   28c98:	e7fa      	b.n	28c90 <att_chan_mtu_updated+0x22>
   28c9a:	461d      	mov	r5, r3
   28c9c:	461c      	mov	r4, r3
   28c9e:	462b      	mov	r3, r5
   28ca0:	b1bc      	cbz	r4, 28cd2 <att_chan_mtu_updated+0x64>
		if (chan == updated_chan) {
   28ca2:	4284      	cmp	r4, r0
   28ca4:	d009      	beq.n	28cba <att_chan_mtu_updated+0x4c>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   28ca6:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
   28caa:	42a9      	cmp	r1, r5
   28cac:	bf38      	it	cc
   28cae:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   28cb0:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
   28cb4:	42a2      	cmp	r2, r4
   28cb6:	bf38      	it	cc
   28cb8:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28cba:	2b00      	cmp	r3, #0
   28cbc:	d0ed      	beq.n	28c9a <att_chan_mtu_updated+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   28cbe:	f513 75a2 	adds.w	r5, r3, #324	; 0x144
   28cc2:	d0eb      	beq.n	28c9c <att_chan_mtu_updated+0x2e>
	return node->next;
   28cc4:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
   28cc8:	2d00      	cmp	r5, #0
   28cca:	d0e7      	beq.n	28c9c <att_chan_mtu_updated+0x2e>
   28ccc:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
   28cd0:	e7e4      	b.n	28c9c <att_chan_mtu_updated+0x2e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28cd2:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   28cd6:	428b      	cmp	r3, r1
   28cd8:	d803      	bhi.n	28ce2 <att_chan_mtu_updated+0x74>
	    (updated_chan->chan.rx.mtu > max_rx)) {
   28cda:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   28cde:	4294      	cmp	r4, r2
   28ce0:	d90a      	bls.n	28cf8 <att_chan_mtu_updated+0x8a>
		max_rx = MAX(max_rx, updated_chan->chan.rx.mtu);
   28ce2:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28ce6:	4282      	cmp	r2, r0
   28ce8:	bf38      	it	cc
   28cea:	4602      	movcc	r2, r0
   28cec:	4299      	cmp	r1, r3
   28cee:	bf38      	it	cc
   28cf0:	4619      	movcc	r1, r3
   28cf2:	6830      	ldr	r0, [r6, #0]
   28cf4:	f7f2 ffbc 	bl	1bc70 <bt_gatt_att_max_mtu_changed>
}
   28cf8:	bd70      	pop	{r4, r5, r6, pc}

00028cfa <write_cb>:
{
   28cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
   28cfc:	b083      	sub	sp, #12
   28cfe:	4606      	mov	r6, r0
   28d00:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   28d02:	222a      	movs	r2, #42	; 0x2a
   28d04:	4601      	mov	r1, r0
   28d06:	6820      	ldr	r0, [r4, #0]
   28d08:	f000 ffd2 	bl	29cb0 <bt_gatt_check_perm>
   28d0c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   28d0e:	b9e8      	cbnz	r0, 28d4c <write_cb+0x52>
   28d10:	4605      	mov	r5, r0
	if (!data->req) {
   28d12:	7a23      	ldrb	r3, [r4, #8]
   28d14:	b1a3      	cbz	r3, 28d40 <write_cb+0x46>
	uint8_t flags = 0U;
   28d16:	4603      	mov	r3, r0
	write = attr->write(data->conn, attr, data->value, data->len,
   28d18:	68b7      	ldr	r7, [r6, #8]
   28d1a:	9301      	str	r3, [sp, #4]
   28d1c:	8a63      	ldrh	r3, [r4, #18]
   28d1e:	9300      	str	r3, [sp, #0]
   28d20:	8a23      	ldrh	r3, [r4, #16]
   28d22:	68e2      	ldr	r2, [r4, #12]
   28d24:	4631      	mov	r1, r6
   28d26:	6820      	ldr	r0, [r4, #0]
   28d28:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   28d2a:	2800      	cmp	r0, #0
   28d2c:	db02      	blt.n	28d34 <write_cb+0x3a>
   28d2e:	8a23      	ldrh	r3, [r4, #16]
   28d30:	4298      	cmp	r0, r3
   28d32:	d007      	beq.n	28d44 <write_cb+0x4a>
		data->err = err_to_att(write);
   28d34:	f7ff fd5e 	bl	287f4 <err_to_att>
   28d38:	7520      	strb	r0, [r4, #20]
}
   28d3a:	4628      	mov	r0, r5
   28d3c:	b003      	add	sp, #12
   28d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flags |= BT_GATT_WRITE_FLAG_CMD;
   28d40:	2302      	movs	r3, #2
   28d42:	e7e9      	b.n	28d18 <write_cb+0x1e>
	data->err = 0U;
   28d44:	2300      	movs	r3, #0
   28d46:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   28d48:	2501      	movs	r5, #1
   28d4a:	e7f6      	b.n	28d3a <write_cb+0x40>
		return BT_GATT_ITER_STOP;
   28d4c:	2500      	movs	r5, #0
   28d4e:	e7f4      	b.n	28d3a <write_cb+0x40>

00028d50 <att_chan_read>:
{
   28d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d54:	b085      	sub	sp, #20
   28d56:	4680      	mov	r8, r0
   28d58:	4689      	mov	r9, r1
   28d5a:	9202      	str	r2, [sp, #8]
   28d5c:	461d      	mov	r5, r3
	struct bt_conn *conn = chan->chan.chan.conn;
   28d5e:	6881      	ldr	r1, [r0, #8]
   28d60:	9103      	str	r1, [sp, #12]
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   28d62:	f8b0 008a 	ldrh.w	r0, [r0, #138]	; 0x8a
	while (buf) {
   28d66:	4613      	mov	r3, r2
	size_t bytes = 0;
   28d68:	2200      	movs	r2, #0
	while (buf) {
   28d6a:	b11b      	cbz	r3, 28d74 <att_chan_read+0x24>
		bytes += buf->len;
   28d6c:	8999      	ldrh	r1, [r3, #12]
   28d6e:	440a      	add	r2, r1
		buf = buf->frags;
   28d70:	681b      	ldr	r3, [r3, #0]
   28d72:	e7fa      	b.n	28d6a <att_chan_read+0x1a>
   28d74:	4290      	cmp	r0, r2
   28d76:	d804      	bhi.n	28d82 <att_chan_read+0x32>
		return 0;
   28d78:	2400      	movs	r4, #0
}
   28d7a:	4620      	mov	r0, r4
   28d7c:	b005      	add	sp, #20
   28d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(buf);
   28d82:	9802      	ldr	r0, [sp, #8]
   28d84:	f001 fa22 	bl	2a1cc <net_buf_frag_last>
   28d88:	4607      	mov	r7, r0
	size_t len, total = 0;
   28d8a:	f04f 0a00 	mov.w	sl, #0
   28d8e:	e083      	b.n	28e98 <att_chan_read+0x148>
		bytes += buf->len;
   28d90:	8999      	ldrh	r1, [r3, #12]
   28d92:	440a      	add	r2, r1
		buf = buf->frags;
   28d94:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   28d96:	2b00      	cmp	r3, #0
   28d98:	d1fa      	bne.n	28d90 <att_chan_read+0x40>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28d9a:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   28d9c:	f107 0608 	add.w	r6, r7, #8
   28da0:	4630      	mov	r0, r6
   28da2:	f001 fa79 	bl	2a298 <net_buf_simple_tailroom>
   28da6:	4284      	cmp	r4, r0
   28da8:	d32c      	bcc.n	28e04 <att_chan_read+0xb4>
   28daa:	4630      	mov	r0, r6
   28dac:	f001 fa74 	bl	2a298 <net_buf_simple_tailroom>
   28db0:	4606      	mov	r6, r0
		if (!len) {
   28db2:	2e00      	cmp	r6, #0
   28db4:	d032      	beq.n	28e1c <att_chan_read+0xcc>
		read = attr->read(conn, attr, frag->data + frag->len, len,
   28db6:	f8d9 4004 	ldr.w	r4, [r9, #4]
   28dba:	68b9      	ldr	r1, [r7, #8]
   28dbc:	89ba      	ldrh	r2, [r7, #12]
   28dbe:	9500      	str	r5, [sp, #0]
   28dc0:	b2b3      	uxth	r3, r6
   28dc2:	440a      	add	r2, r1
   28dc4:	4649      	mov	r1, r9
   28dc6:	9803      	ldr	r0, [sp, #12]
   28dc8:	47a0      	blx	r4
		if (read < 0) {
   28dca:	1e04      	subs	r4, r0, #0
   28dcc:	db5a      	blt.n	28e84 <att_chan_read+0x134>
		if (cb && !cb(frag, read, user_data)) {
   28dce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   28dd0:	b12b      	cbz	r3, 28dde <att_chan_read+0x8e>
   28dd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   28dd4:	4621      	mov	r1, r4
   28dd6:	4638      	mov	r0, r7
   28dd8:	4798      	blx	r3
   28dda:	2800      	cmp	r0, #0
   28ddc:	d061      	beq.n	28ea2 <att_chan_read+0x152>
		net_buf_add(frag, read);
   28dde:	46a3      	mov	fp, r4
	return net_buf_simple_add(&buf->b, len);
   28de0:	4621      	mov	r1, r4
   28de2:	f107 0008 	add.w	r0, r7, #8
   28de6:	f001 fa11 	bl	2a20c <net_buf_simple_add>
		total += read;
   28dea:	44a2      	add	sl, r4
		offset += read;
   28dec:	4425      	add	r5, r4
   28dee:	b2ad      	uxth	r5, r5
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28df0:	f8b8 008a 	ldrh.w	r0, [r8, #138]	; 0x8a
   28df4:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   28df6:	2200      	movs	r2, #0
	while (buf) {
   28df8:	2b00      	cmp	r3, #0
   28dfa:	d049      	beq.n	28e90 <att_chan_read+0x140>
		bytes += buf->len;
   28dfc:	8999      	ldrh	r1, [r3, #12]
   28dfe:	440a      	add	r2, r1
		buf = buf->frags;
   28e00:	681b      	ldr	r3, [r3, #0]
   28e02:	e7f9      	b.n	28df8 <att_chan_read+0xa8>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28e04:	f8b8 608a 	ldrh.w	r6, [r8, #138]	; 0x8a
	while (buf) {
   28e08:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   28e0a:	2200      	movs	r2, #0
	while (buf) {
   28e0c:	e002      	b.n	28e14 <att_chan_read+0xc4>
		bytes += buf->len;
   28e0e:	8999      	ldrh	r1, [r3, #12]
   28e10:	440a      	add	r2, r1
		buf = buf->frags;
   28e12:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   28e14:	2b00      	cmp	r3, #0
   28e16:	d1fa      	bne.n	28e0e <att_chan_read+0xbe>
   28e18:	1ab6      	subs	r6, r6, r2
   28e1a:	e7ca      	b.n	28db2 <att_chan_read+0x62>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   28e1c:	9b02      	ldr	r3, [sp, #8]
   28e1e:	7998      	ldrb	r0, [r3, #6]
   28e20:	f7f2 ffca 	bl	1bdb8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   28e24:	2200      	movs	r2, #0
   28e26:	2300      	movs	r3, #0
   28e28:	f001 f96d 	bl	2a106 <net_buf_alloc_fixed>
			if (!frag) {
   28e2c:	4607      	mov	r7, r0
   28e2e:	b150      	cbz	r0, 28e46 <att_chan_read+0xf6>
			net_buf_frag_add(buf, frag);
   28e30:	4601      	mov	r1, r0
   28e32:	f8dd b008 	ldr.w	fp, [sp, #8]
   28e36:	4658      	mov	r0, fp
   28e38:	f001 f9d9 	bl	2a1ee <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28e3c:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	size_t bytes = 0;
   28e40:	4632      	mov	r2, r6
	while (buf) {
   28e42:	465b      	mov	r3, fp
   28e44:	e004      	b.n	28e50 <att_chan_read+0x100>
				return total;
   28e46:	4654      	mov	r4, sl
   28e48:	e797      	b.n	28d7a <att_chan_read+0x2a>
		bytes += buf->len;
   28e4a:	8999      	ldrh	r1, [r3, #12]
   28e4c:	440a      	add	r2, r1
		buf = buf->frags;
   28e4e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   28e50:	2b00      	cmp	r3, #0
   28e52:	d1fa      	bne.n	28e4a <att_chan_read+0xfa>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28e54:	1aa4      	subs	r4, r4, r2
	return net_buf_simple_tailroom(&buf->b);
   28e56:	f107 0b08 	add.w	fp, r7, #8
   28e5a:	4658      	mov	r0, fp
   28e5c:	f001 fa1c 	bl	2a298 <net_buf_simple_tailroom>
   28e60:	4284      	cmp	r4, r0
   28e62:	d304      	bcc.n	28e6e <att_chan_read+0x11e>
   28e64:	4658      	mov	r0, fp
   28e66:	f001 fa17 	bl	2a298 <net_buf_simple_tailroom>
   28e6a:	4606      	mov	r6, r0
   28e6c:	e7a3      	b.n	28db6 <att_chan_read+0x66>
   28e6e:	f8b8 108a 	ldrh.w	r1, [r8, #138]	; 0x8a
	while (buf) {
   28e72:	9b02      	ldr	r3, [sp, #8]
   28e74:	e002      	b.n	28e7c <att_chan_read+0x12c>
		bytes += buf->len;
   28e76:	899a      	ldrh	r2, [r3, #12]
   28e78:	4416      	add	r6, r2
		buf = buf->frags;
   28e7a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   28e7c:	2b00      	cmp	r3, #0
   28e7e:	d1fa      	bne.n	28e76 <att_chan_read+0x126>
   28e80:	1b8e      	subs	r6, r1, r6
   28e82:	e798      	b.n	28db6 <att_chan_read+0x66>
			if (total) {
   28e84:	f1ba 0f00 	cmp.w	sl, #0
   28e88:	f43f af77 	beq.w	28d7a <att_chan_read+0x2a>
				return total;
   28e8c:	4654      	mov	r4, sl
   28e8e:	e774      	b.n	28d7a <att_chan_read+0x2a>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28e90:	4290      	cmp	r0, r2
   28e92:	d906      	bls.n	28ea2 <att_chan_read+0x152>
   28e94:	45b3      	cmp	fp, r6
   28e96:	d104      	bne.n	28ea2 <att_chan_read+0x152>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   28e98:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   28e9c:	9b02      	ldr	r3, [sp, #8]
	size_t bytes = 0;
   28e9e:	2200      	movs	r2, #0
	while (buf) {
   28ea0:	e779      	b.n	28d96 <att_chan_read+0x46>
	return total;
   28ea2:	4654      	mov	r4, sl
   28ea4:	e769      	b.n	28d7a <att_chan_read+0x2a>

00028ea6 <read_cb>:
{
   28ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
   28ea8:	b083      	sub	sp, #12
   28eaa:	4606      	mov	r6, r0
   28eac:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   28eae:	6817      	ldr	r7, [r2, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   28eb0:	68b8      	ldr	r0, [r7, #8]
	data->err = 0x00;
   28eb2:	2300      	movs	r3, #0
   28eb4:	7313      	strb	r3, [r2, #12]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28eb6:	2215      	movs	r2, #21
   28eb8:	4631      	mov	r1, r6
   28eba:	f000 fef9 	bl	29cb0 <bt_gatt_check_perm>
   28ebe:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   28ec0:	b118      	cbz	r0, 28eca <read_cb+0x24>
		return BT_GATT_ITER_STOP;
   28ec2:	2500      	movs	r5, #0
}
   28ec4:	4628      	mov	r0, r5
   28ec6:	b003      	add	sp, #12
   28ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   28eca:	4605      	mov	r5, r0
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   28ecc:	2300      	movs	r3, #0
   28ece:	9301      	str	r3, [sp, #4]
   28ed0:	9300      	str	r3, [sp, #0]
   28ed2:	88a3      	ldrh	r3, [r4, #4]
   28ed4:	68a2      	ldr	r2, [r4, #8]
   28ed6:	4631      	mov	r1, r6
   28ed8:	4638      	mov	r0, r7
   28eda:	f7ff ff39 	bl	28d50 <att_chan_read>
	if (ret < 0) {
   28ede:	2800      	cmp	r0, #0
   28ee0:	db01      	blt.n	28ee6 <read_cb+0x40>
	return BT_GATT_ITER_CONTINUE;
   28ee2:	2501      	movs	r5, #1
   28ee4:	e7ee      	b.n	28ec4 <read_cb+0x1e>
		data->err = err_to_att(ret);
   28ee6:	f7ff fc85 	bl	287f4 <err_to_att>
   28eea:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   28eec:	e7ea      	b.n	28ec4 <read_cb+0x1e>

00028eee <find_info_cb>:
{
   28eee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28ef2:	4606      	mov	r6, r0
   28ef4:	460f      	mov	r7, r1
   28ef6:	4614      	mov	r4, r2
	struct bt_att_chan *chan = data->chan;
   28ef8:	f8d2 8000 	ldr.w	r8, [r2]
	if (!data->rsp) {
   28efc:	6893      	ldr	r3, [r2, #8]
   28efe:	b14b      	cbz	r3, 28f14 <find_info_cb+0x26>
	switch (data->rsp->format) {
   28f00:	68a3      	ldr	r3, [r4, #8]
   28f02:	781d      	ldrb	r5, [r3, #0]
   28f04:	2d01      	cmp	r5, #1
   28f06:	d013      	beq.n	28f30 <find_info_cb+0x42>
   28f08:	2d02      	cmp	r5, #2
   28f0a:	d02d      	beq.n	28f68 <find_info_cb+0x7a>
   28f0c:	2500      	movs	r5, #0
}
   28f0e:	4628      	mov	r0, r5
   28f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   28f14:	6850      	ldr	r0, [r2, #4]
	return net_buf_simple_add(&buf->b, len);
   28f16:	2101      	movs	r1, #1
   28f18:	3008      	adds	r0, #8
   28f1a:	f001 f977 	bl	2a20c <net_buf_simple_add>
   28f1e:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   28f20:	6833      	ldr	r3, [r6, #0]
   28f22:	781b      	ldrb	r3, [r3, #0]
   28f24:	b913      	cbnz	r3, 28f2c <find_info_cb+0x3e>
   28f26:	2301      	movs	r3, #1
   28f28:	7003      	strb	r3, [r0, #0]
   28f2a:	e7e9      	b.n	28f00 <find_info_cb+0x12>
   28f2c:	2302      	movs	r3, #2
   28f2e:	e7fb      	b.n	28f28 <find_info_cb+0x3a>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   28f30:	6833      	ldr	r3, [r6, #0]
   28f32:	f893 9000 	ldrb.w	r9, [r3]
   28f36:	f1b9 0f00 	cmp.w	r9, #0
   28f3a:	d001      	beq.n	28f40 <find_info_cb+0x52>
			return BT_GATT_ITER_STOP;
   28f3c:	2500      	movs	r5, #0
   28f3e:	e7e6      	b.n	28f0e <find_info_cb+0x20>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   28f40:	6860      	ldr	r0, [r4, #4]
   28f42:	2104      	movs	r1, #4
   28f44:	3008      	adds	r0, #8
   28f46:	f001 f961 	bl	2a20c <net_buf_simple_add>
   28f4a:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   28f4c:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   28f4e:	6832      	ldr	r2, [r6, #0]
   28f50:	68e3      	ldr	r3, [r4, #12]
   28f52:	8852      	ldrh	r2, [r2, #2]
   28f54:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   28f56:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   28f5a:	6862      	ldr	r2, [r4, #4]
   28f5c:	8992      	ldrh	r2, [r2, #12]
   28f5e:	1a9b      	subs	r3, r3, r2
   28f60:	2b04      	cmp	r3, #4
   28f62:	d8d4      	bhi.n	28f0e <find_info_cb+0x20>
	return BT_GATT_ITER_STOP;
   28f64:	464d      	mov	r5, r9
   28f66:	e7d2      	b.n	28f0e <find_info_cb+0x20>
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   28f68:	6833      	ldr	r3, [r6, #0]
   28f6a:	781b      	ldrb	r3, [r3, #0]
   28f6c:	2b02      	cmp	r3, #2
   28f6e:	d001      	beq.n	28f74 <find_info_cb+0x86>
			return BT_GATT_ITER_STOP;
   28f70:	2500      	movs	r5, #0
   28f72:	e7cc      	b.n	28f0e <find_info_cb+0x20>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   28f74:	6860      	ldr	r0, [r4, #4]
   28f76:	2112      	movs	r1, #18
   28f78:	3008      	adds	r0, #8
   28f7a:	f001 f947 	bl	2a20c <net_buf_simple_add>
   28f7e:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   28f80:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   28f82:	68e0      	ldr	r0, [r4, #12]
   28f84:	6831      	ldr	r1, [r6, #0]
   28f86:	2210      	movs	r2, #16
   28f88:	3101      	adds	r1, #1
   28f8a:	3002      	adds	r0, #2
   28f8c:	f7fe fe60 	bl	27c50 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   28f90:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   28f94:	6862      	ldr	r2, [r4, #4]
   28f96:	8992      	ldrh	r2, [r2, #12]
   28f98:	1a9b      	subs	r3, r3, r2
   28f9a:	2b12      	cmp	r3, #18
   28f9c:	d801      	bhi.n	28fa2 <find_info_cb+0xb4>
	return BT_GATT_ITER_STOP;
   28f9e:	2500      	movs	r5, #0
   28fa0:	e7b5      	b.n	28f0e <find_info_cb+0x20>
			return BT_GATT_ITER_CONTINUE;
   28fa2:	2501      	movs	r5, #1
   28fa4:	e7b3      	b.n	28f0e <find_info_cb+0x20>

00028fa6 <att_get_fixed_chan>:
{
   28fa6:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   28fa8:	2104      	movs	r1, #4
   28faa:	f7ff fbb9 	bl	28720 <bt_l2cap_le_lookup_tx_cid>
}
   28fae:	3808      	subs	r0, #8
   28fb0:	bd08      	pop	{r3, pc}

00028fb2 <att_write_cmd>:
{
   28fb2:	b530      	push	{r4, r5, lr}
   28fb4:	b085      	sub	sp, #20
   28fb6:	4605      	mov	r5, r0
   28fb8:	460c      	mov	r4, r1
	return net_buf_simple_pull_le16(&buf->b);
   28fba:	f101 0008 	add.w	r0, r1, #8
   28fbe:	f001 f95f 	bl	2a280 <net_buf_simple_pull_le16>
   28fc2:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   28fc4:	68a2      	ldr	r2, [r4, #8]
   28fc6:	89a1      	ldrh	r1, [r4, #12]
   28fc8:	9102      	str	r1, [sp, #8]
   28fca:	9201      	str	r2, [sp, #4]
   28fcc:	2100      	movs	r1, #0
   28fce:	9100      	str	r1, [sp, #0]
   28fd0:	460a      	mov	r2, r1
   28fd2:	4628      	mov	r0, r5
   28fd4:	f7f1 fb9a 	bl	1a70c <att_write_rsp>
}
   28fd8:	b005      	add	sp, #20
   28fda:	bd30      	pop	{r4, r5, pc}

00028fdc <att_write_req>:
{
   28fdc:	b530      	push	{r4, r5, lr}
   28fde:	b085      	sub	sp, #20
   28fe0:	4605      	mov	r5, r0
   28fe2:	460c      	mov	r4, r1
   28fe4:	f101 0008 	add.w	r0, r1, #8
   28fe8:	f001 f94a 	bl	2a280 <net_buf_simple_pull_le16>
   28fec:	4603      	mov	r3, r0
			     handle, 0, buf->data, buf->len);
   28fee:	68a2      	ldr	r2, [r4, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   28ff0:	89a1      	ldrh	r1, [r4, #12]
   28ff2:	9102      	str	r1, [sp, #8]
   28ff4:	9201      	str	r2, [sp, #4]
   28ff6:	2200      	movs	r2, #0
   28ff8:	9200      	str	r2, [sp, #0]
   28ffa:	2213      	movs	r2, #19
   28ffc:	2112      	movs	r1, #18
   28ffe:	4628      	mov	r0, r5
   29000:	f7f1 fb84 	bl	1a70c <att_write_rsp>
}
   29004:	b005      	add	sp, #20
   29006:	bd30      	pop	{r4, r5, pc}

00029008 <att_read_group_req>:
{
   29008:	b5f0      	push	{r4, r5, r6, r7, lr}
   2900a:	b089      	sub	sp, #36	; 0x24
   2900c:	4605      	mov	r5, r0
   2900e:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   29010:	7b0c      	ldrb	r4, [r1, #12]
   29012:	3c04      	subs	r4, #4
   29014:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   29016:	2c02      	cmp	r4, #2
   29018:	d001      	beq.n	2901e <att_read_group_req+0x16>
   2901a:	2c10      	cmp	r4, #16
   2901c:	d142      	bne.n	290a4 <att_read_group_req+0x9c>
	return net_buf_simple_pull_mem(&buf->b, len);
   2901e:	2104      	movs	r1, #4
   29020:	3008      	adds	r0, #8
   29022:	f001 f91d 	bl	2a260 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   29026:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29028:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   2902a:	4622      	mov	r2, r4
   2902c:	1d01      	adds	r1, r0, #4
   2902e:	a801      	add	r0, sp, #4
   29030:	f7fe fea1 	bl	27d76 <bt_uuid_create>
   29034:	b3c8      	cbz	r0, 290aa <att_read_group_req+0xa2>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29036:	f10d 0216 	add.w	r2, sp, #22
   2903a:	4639      	mov	r1, r7
   2903c:	4630      	mov	r0, r6
   2903e:	f7ff fbca 	bl	287d6 <range_is_valid>
   29042:	b1f0      	cbz	r0, 29082 <att_read_group_req+0x7a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   29044:	2300      	movs	r3, #0
   29046:	f88d 3018 	strb.w	r3, [sp, #24]
   2904a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   2904e:	f8ad 301a 	strh.w	r3, [sp, #26]
   29052:	a906      	add	r1, sp, #24
   29054:	a801      	add	r0, sp, #4
   29056:	f7fe fe70 	bl	27d3a <bt_uuid_cmp>
   2905a:	b158      	cbz	r0, 29074 <att_read_group_req+0x6c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   2905c:	2300      	movs	r3, #0
   2905e:	f88d 301c 	strb.w	r3, [sp, #28]
   29062:	f642 0301 	movw	r3, #10241	; 0x2801
   29066:	f8ad 301e 	strh.w	r3, [sp, #30]
   2906a:	a907      	add	r1, sp, #28
   2906c:	a801      	add	r0, sp, #4
   2906e:	f7fe fe64 	bl	27d3a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   29072:	b978      	cbnz	r0, 29094 <att_read_group_req+0x8c>
	return att_read_group_rsp(chan, &u.uuid, start_handle, end_handle);
   29074:	463b      	mov	r3, r7
   29076:	4632      	mov	r2, r6
   29078:	a901      	add	r1, sp, #4
   2907a:	4628      	mov	r0, r5
   2907c:	f7f1 fbfc 	bl	1a878 <att_read_group_rsp>
   29080:	e011      	b.n	290a6 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, err_handle,
   29082:	2301      	movs	r3, #1
   29084:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29088:	2110      	movs	r1, #16
   2908a:	4628      	mov	r0, r5
   2908c:	f7f1 fa4a 	bl	1a524 <send_err_rsp>
		return 0;
   29090:	2000      	movs	r0, #0
   29092:	e008      	b.n	290a6 <att_read_group_req+0x9e>
		send_err_rsp(chan, BT_ATT_OP_READ_GROUP_REQ, start_handle,
   29094:	2310      	movs	r3, #16
   29096:	4632      	mov	r2, r6
   29098:	4619      	mov	r1, r3
   2909a:	4628      	mov	r0, r5
   2909c:	f7f1 fa42 	bl	1a524 <send_err_rsp>
		return 0;
   290a0:	2000      	movs	r0, #0
   290a2:	e000      	b.n	290a6 <att_read_group_req+0x9e>
		return BT_ATT_ERR_INVALID_PDU;
   290a4:	2004      	movs	r0, #4
}
   290a6:	b009      	add	sp, #36	; 0x24
   290a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_UNLIKELY;
   290aa:	200e      	movs	r0, #14
   290ac:	e7fb      	b.n	290a6 <att_read_group_req+0x9e>

000290ae <att_read_blob_req>:
{
   290ae:	b500      	push	{lr}
   290b0:	b083      	sub	sp, #12
	req = (void *)buf->data;
   290b2:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   290b4:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
   290b6:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   290b8:	9200      	str	r2, [sp, #0]
   290ba:	220d      	movs	r2, #13
   290bc:	210c      	movs	r1, #12
   290be:	f7f1 fc71 	bl	1a9a4 <att_read_rsp>
}
   290c2:	b003      	add	sp, #12
   290c4:	f85d fb04 	ldr.w	pc, [sp], #4

000290c8 <att_read_req>:
{
   290c8:	b500      	push	{lr}
   290ca:	b083      	sub	sp, #12
	req = (void *)buf->data;
   290cc:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
   290ce:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   290d0:	2200      	movs	r2, #0
   290d2:	9200      	str	r2, [sp, #0]
   290d4:	220b      	movs	r2, #11
   290d6:	210a      	movs	r1, #10
   290d8:	f7f1 fc64 	bl	1a9a4 <att_read_rsp>
}
   290dc:	b003      	add	sp, #12
   290de:	f85d fb04 	ldr.w	pc, [sp], #4

000290e2 <att_read_type_req>:
{
   290e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   290e4:	b087      	sub	sp, #28
   290e6:	4605      	mov	r5, r0
   290e8:	4608      	mov	r0, r1
	uint8_t uuid_len = buf->len - sizeof(*req);
   290ea:	7b0c      	ldrb	r4, [r1, #12]
   290ec:	3c04      	subs	r4, #4
   290ee:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   290f0:	2c02      	cmp	r4, #2
   290f2:	d001      	beq.n	290f8 <att_read_type_req+0x16>
   290f4:	2c10      	cmp	r4, #16
   290f6:	d123      	bne.n	29140 <att_read_type_req+0x5e>
   290f8:	2104      	movs	r1, #4
   290fa:	3008      	adds	r0, #8
   290fc:	f001 f8b0 	bl	2a260 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   29100:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   29102:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   29104:	4622      	mov	r2, r4
   29106:	1d01      	adds	r1, r0, #4
   29108:	a801      	add	r0, sp, #4
   2910a:	f7fe fe34 	bl	27d76 <bt_uuid_create>
   2910e:	b1c8      	cbz	r0, 29144 <att_read_type_req+0x62>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29110:	f10d 0216 	add.w	r2, sp, #22
   29114:	4639      	mov	r1, r7
   29116:	4630      	mov	r0, r6
   29118:	f7ff fb5d 	bl	287d6 <range_is_valid>
   2911c:	b138      	cbz	r0, 2912e <att_read_type_req+0x4c>
	return att_read_type_rsp(chan, &u.uuid, start_handle, end_handle);
   2911e:	463b      	mov	r3, r7
   29120:	4632      	mov	r2, r6
   29122:	a901      	add	r1, sp, #4
   29124:	4628      	mov	r0, r5
   29126:	f7f1 fc8f 	bl	1aa48 <att_read_type_rsp>
}
   2912a:	b007      	add	sp, #28
   2912c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(chan, BT_ATT_OP_READ_TYPE_REQ, err_handle,
   2912e:	2301      	movs	r3, #1
   29130:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   29134:	2108      	movs	r1, #8
   29136:	4628      	mov	r0, r5
   29138:	f7f1 f9f4 	bl	1a524 <send_err_rsp>
		return 0;
   2913c:	2000      	movs	r0, #0
   2913e:	e7f4      	b.n	2912a <att_read_type_req+0x48>
		return BT_ATT_ERR_INVALID_PDU;
   29140:	2004      	movs	r0, #4
   29142:	e7f2      	b.n	2912a <att_read_type_req+0x48>
		return BT_ATT_ERR_UNLIKELY;
   29144:	200e      	movs	r0, #14
   29146:	e7f0      	b.n	2912a <att_read_type_req+0x48>

00029148 <att_find_type_req>:
{
   29148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2914c:	b087      	sub	sp, #28
   2914e:	4607      	mov	r7, r0
   29150:	460c      	mov	r4, r1
   29152:	2106      	movs	r1, #6
   29154:	f104 0008 	add.w	r0, r4, #8
   29158:	f001 f882 	bl	2a260 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   2915c:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   2915e:	8846      	ldrh	r6, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   29160:	f8b0 8004 	ldrh.w	r8, [r0, #4]
	value = buf->data;
   29164:	f8d4 9008 	ldr.w	r9, [r4, #8]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   29168:	f10d 020e 	add.w	r2, sp, #14
   2916c:	4631      	mov	r1, r6
   2916e:	4628      	mov	r0, r5
   29170:	f7ff fb31 	bl	287d6 <range_is_valid>
   29174:	b1d0      	cbz	r0, 291ac <att_find_type_req+0x64>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   29176:	2300      	movs	r3, #0
   29178:	f88d 3010 	strb.w	r3, [sp, #16]
   2917c:	f8ad 8012 	strh.w	r8, [sp, #18]
   29180:	f88d 3014 	strb.w	r3, [sp, #20]
   29184:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   29188:	f8ad 3016 	strh.w	r3, [sp, #22]
   2918c:	a905      	add	r1, sp, #20
   2918e:	a804      	add	r0, sp, #16
   29190:	f7fe fdd3 	bl	27d3a <bt_uuid_cmp>
   29194:	b998      	cbnz	r0, 291be <att_find_type_req+0x76>
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   29196:	7b23      	ldrb	r3, [r4, #12]
   29198:	9300      	str	r3, [sp, #0]
   2919a:	464b      	mov	r3, r9
   2919c:	4632      	mov	r2, r6
   2919e:	4629      	mov	r1, r5
   291a0:	4638      	mov	r0, r7
   291a2:	f7f1 fc9b 	bl	1aadc <att_find_type_rsp>
}
   291a6:	b007      	add	sp, #28
   291a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
   291ac:	2301      	movs	r3, #1
   291ae:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   291b2:	2106      	movs	r1, #6
   291b4:	4638      	mov	r0, r7
   291b6:	f7f1 f9b5 	bl	1a524 <send_err_rsp>
		return 0;
   291ba:	2000      	movs	r0, #0
   291bc:	e7f3      	b.n	291a6 <att_find_type_req+0x5e>
		send_err_rsp(chan, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
   291be:	230a      	movs	r3, #10
   291c0:	462a      	mov	r2, r5
   291c2:	2106      	movs	r1, #6
   291c4:	4638      	mov	r0, r7
   291c6:	f7f1 f9ad 	bl	1a524 <send_err_rsp>
		return 0;
   291ca:	2000      	movs	r0, #0
   291cc:	e7eb      	b.n	291a6 <att_find_type_req+0x5e>

000291ce <att_find_info_req>:
{
   291ce:	b570      	push	{r4, r5, r6, lr}
   291d0:	b082      	sub	sp, #8
   291d2:	4604      	mov	r4, r0
	req = (void *)buf->data;
   291d4:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   291d6:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   291d8:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
   291da:	f10d 0206 	add.w	r2, sp, #6
   291de:	4631      	mov	r1, r6
   291e0:	4628      	mov	r0, r5
   291e2:	f7ff faf8 	bl	287d6 <range_is_valid>
   291e6:	b130      	cbz	r0, 291f6 <att_find_info_req+0x28>
	return att_find_info_rsp(chan, start_handle, end_handle);
   291e8:	4632      	mov	r2, r6
   291ea:	4629      	mov	r1, r5
   291ec:	4620      	mov	r0, r4
   291ee:	f7f1 fcbf 	bl	1ab70 <att_find_info_rsp>
}
   291f2:	b002      	add	sp, #8
   291f4:	bd70      	pop	{r4, r5, r6, pc}
		send_err_rsp(chan, BT_ATT_OP_FIND_INFO_REQ, err_handle,
   291f6:	2301      	movs	r3, #1
   291f8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   291fc:	2104      	movs	r1, #4
   291fe:	4620      	mov	r0, r4
   29200:	f7f1 f990 	bl	1a524 <send_err_rsp>
		return 0;
   29204:	2000      	movs	r0, #0
   29206:	e7f4      	b.n	291f2 <att_find_info_req+0x24>

00029208 <bt_att_init>:
{
   29208:	b508      	push	{r3, lr}
	bt_gatt_init();
   2920a:	f7f2 f89d 	bl	1b348 <bt_gatt_init>
}
   2920e:	bd08      	pop	{r3, pc}

00029210 <att_handle_exec_write_rsp>:
{
   29210:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29212:	2300      	movs	r3, #0
   29214:	898a      	ldrh	r2, [r1, #12]
   29216:	6889      	ldr	r1, [r1, #8]
   29218:	f7f1 fd48 	bl	1acac <att_handle_rsp>
}
   2921c:	bd08      	pop	{r3, pc}

0002921e <att_handle_prepare_write_rsp>:
{
   2921e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29220:	2300      	movs	r3, #0
   29222:	898a      	ldrh	r2, [r1, #12]
   29224:	6889      	ldr	r1, [r1, #8]
   29226:	f7f1 fd41 	bl	1acac <att_handle_rsp>
}
   2922a:	bd08      	pop	{r3, pc}

0002922c <att_handle_write_rsp>:
{
   2922c:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2922e:	2300      	movs	r3, #0
   29230:	898a      	ldrh	r2, [r1, #12]
   29232:	6889      	ldr	r1, [r1, #8]
   29234:	f7f1 fd3a 	bl	1acac <att_handle_rsp>
}
   29238:	bd08      	pop	{r3, pc}

0002923a <att_handle_read_group_rsp>:
{
   2923a:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2923c:	2300      	movs	r3, #0
   2923e:	898a      	ldrh	r2, [r1, #12]
   29240:	6889      	ldr	r1, [r1, #8]
   29242:	f7f1 fd33 	bl	1acac <att_handle_rsp>
}
   29246:	bd08      	pop	{r3, pc}

00029248 <att_handle_read_mult_rsp>:
{
   29248:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2924a:	2300      	movs	r3, #0
   2924c:	898a      	ldrh	r2, [r1, #12]
   2924e:	6889      	ldr	r1, [r1, #8]
   29250:	f7f1 fd2c 	bl	1acac <att_handle_rsp>
}
   29254:	bd08      	pop	{r3, pc}

00029256 <att_handle_read_blob_rsp>:
{
   29256:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29258:	2300      	movs	r3, #0
   2925a:	898a      	ldrh	r2, [r1, #12]
   2925c:	6889      	ldr	r1, [r1, #8]
   2925e:	f7f1 fd25 	bl	1acac <att_handle_rsp>
}
   29262:	bd08      	pop	{r3, pc}

00029264 <att_handle_read_rsp>:
{
   29264:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29266:	2300      	movs	r3, #0
   29268:	898a      	ldrh	r2, [r1, #12]
   2926a:	6889      	ldr	r1, [r1, #8]
   2926c:	f7f1 fd1e 	bl	1acac <att_handle_rsp>
}
   29270:	bd08      	pop	{r3, pc}

00029272 <att_handle_read_type_rsp>:
{
   29272:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29274:	2300      	movs	r3, #0
   29276:	898a      	ldrh	r2, [r1, #12]
   29278:	6889      	ldr	r1, [r1, #8]
   2927a:	f7f1 fd17 	bl	1acac <att_handle_rsp>
}
   2927e:	bd08      	pop	{r3, pc}

00029280 <att_handle_find_type_rsp>:
{
   29280:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29282:	2300      	movs	r3, #0
   29284:	898a      	ldrh	r2, [r1, #12]
   29286:	6889      	ldr	r1, [r1, #8]
   29288:	f7f1 fd10 	bl	1acac <att_handle_rsp>
}
   2928c:	bd08      	pop	{r3, pc}

0002928e <att_handle_find_info_rsp>:
{
   2928e:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29290:	2300      	movs	r3, #0
   29292:	898a      	ldrh	r2, [r1, #12]
   29294:	6889      	ldr	r1, [r1, #8]
   29296:	f7f1 fd09 	bl	1acac <att_handle_rsp>
}
   2929a:	bd08      	pop	{r3, pc}

0002929c <att_mtu_rsp>:
{
   2929c:	b570      	push	{r4, r5, r6, lr}
   2929e:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
   292a0:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   292a2:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   292a4:	2b16      	cmp	r3, #22
   292a6:	d910      	bls.n	292ca <att_mtu_rsp+0x2e>
   292a8:	460d      	mov	r5, r1
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   292aa:	2b17      	cmp	r3, #23
   292ac:	bf28      	it	cs
   292ae:	2317      	movcs	r3, #23
   292b0:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   292b4:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   292b8:	f7ff fcd9 	bl	28c6e <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   292bc:	2300      	movs	r3, #0
   292be:	89aa      	ldrh	r2, [r5, #12]
   292c0:	4631      	mov	r1, r6
   292c2:	4620      	mov	r0, r4
   292c4:	f7f1 fcf2 	bl	1acac <att_handle_rsp>
}
   292c8:	bd70      	pop	{r4, r5, r6, pc}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   292ca:	2304      	movs	r3, #4
   292cc:	2200      	movs	r2, #0
   292ce:	4611      	mov	r1, r2
   292d0:	f7f1 fcec 	bl	1acac <att_handle_rsp>
   292d4:	e7f8      	b.n	292c8 <att_mtu_rsp+0x2c>

000292d6 <att_confirm>:
{
   292d6:	b508      	push	{r3, lr}
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   292d8:	2300      	movs	r3, #0
   292da:	898a      	ldrh	r2, [r1, #12]
   292dc:	6889      	ldr	r1, [r1, #8]
   292de:	f7f1 fce5 	bl	1acac <att_handle_rsp>
}
   292e2:	bd08      	pop	{r3, pc}

000292e4 <att_chan_detach>:
{
   292e4:	b510      	push	{r4, lr}
   292e6:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   292e8:	6800      	ldr	r0, [r0, #0]
   292ea:	f504 72a2 	add.w	r2, r4, #324	; 0x144
	return list->head;
   292ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   292f0:	2100      	movs	r1, #0
   292f2:	b1e3      	cbz	r3, 2932e <att_chan_detach+0x4a>
   292f4:	4293      	cmp	r3, r2
   292f6:	d002      	beq.n	292fe <att_chan_detach+0x1a>
   292f8:	4619      	mov	r1, r3
   292fa:	681b      	ldr	r3, [r3, #0]
   292fc:	e7f9      	b.n	292f2 <att_chan_detach+0xe>
Z_GENLIST_REMOVE(slist, snode)
   292fe:	b149      	cbz	r1, 29314 <att_chan_detach+0x30>
	return node->next;
   29300:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	parent->next = child;
   29304:	600b      	str	r3, [r1, #0]
	return list->tail;
   29306:	6a83      	ldr	r3, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   29308:	4293      	cmp	r3, r2
   2930a:	d00b      	beq.n	29324 <att_chan_detach+0x40>
	parent->next = child;
   2930c:	2300      	movs	r3, #0
   2930e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29312:	e00c      	b.n	2932e <att_chan_detach+0x4a>
	return node->next;
   29314:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	list->head = node;
   29318:	6243      	str	r3, [r0, #36]	; 0x24
	return list->tail;
   2931a:	6a81      	ldr	r1, [r0, #40]	; 0x28
Z_GENLIST_REMOVE(slist, snode)
   2931c:	4291      	cmp	r1, r2
   2931e:	d1f5      	bne.n	2930c <att_chan_detach+0x28>
	list->tail = node;
   29320:	6283      	str	r3, [r0, #40]	; 0x28
}
   29322:	e7f3      	b.n	2930c <att_chan_detach+0x28>
	list->tail = node;
   29324:	6281      	str	r1, [r0, #40]	; 0x28
}
   29326:	e7f1      	b.n	2930c <att_chan_detach+0x28>
		net_buf_unref(buf);
   29328:	4618      	mov	r0, r3
   2932a:	f000 ff25 	bl	2a178 <net_buf_unref>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   2932e:	2200      	movs	r2, #0
   29330:	2300      	movs	r3, #0
   29332:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   29336:	f000 feed 	bl	2a114 <net_buf_get>
   2933a:	4603      	mov	r3, r0
   2933c:	2800      	cmp	r0, #0
   2933e:	d1f3      	bne.n	29328 <att_chan_detach+0x44>
	if (chan->req) {
   29340:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29344:	b12b      	cbz	r3, 29352 <att_chan_detach+0x6e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   29346:	230e      	movs	r3, #14
   29348:	2200      	movs	r2, #0
   2934a:	4611      	mov	r1, r2
   2934c:	4620      	mov	r0, r4
   2934e:	f7f1 fcad 	bl	1acac <att_handle_rsp>
	chan->att = NULL;
   29352:	2300      	movs	r3, #0
   29354:	6023      	str	r3, [r4, #0]
}
   29356:	bd10      	pop	{r4, pc}

00029358 <bt_att_disconnected>:
{
   29358:	b538      	push	{r3, r4, r5, lr}
   2935a:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   2935c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (!att_chan->att) {
   29360:	b125      	cbz	r5, 2936c <bt_att_disconnected+0x14>
   29362:	3808      	subs	r0, #8
	att_chan_detach(att_chan);
   29364:	f7ff ffbe 	bl	292e4 <att_chan_detach>
	return list->head;
   29368:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (!sys_slist_is_empty(&att->chans)) {
   2936a:	b103      	cbz	r3, 2936e <bt_att_disconnected+0x16>
}
   2936c:	bd38      	pop	{r3, r4, r5, pc}
	att_reset(att);
   2936e:	4628      	mov	r0, r5
   29370:	f7f1 fcfc 	bl	1ad6c <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   29374:	6820      	ldr	r0, [r4, #0]
   29376:	f7f2 fcc7 	bl	1bd08 <bt_gatt_disconnected>
   2937a:	e7f7      	b.n	2936c <bt_att_disconnected+0x14>

0002937c <bt_att_send>:
{
   2937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29380:	b082      	sub	sp, #8
   29382:	4607      	mov	r7, r0
   29384:	460d      	mov	r5, r1
   29386:	4614      	mov	r4, r2
   29388:	461e      	mov	r6, r3
	att = att_get(conn);
   2938a:	f7f0 fd41 	bl	19e10 <att_get>
	if (!att) {
   2938e:	b158      	cbz	r0, 293a8 <bt_att_send+0x2c>
   29390:	4680      	mov	r8, r0
	if (cb) {
   29392:	b17c      	cbz	r4, 293b4 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   29394:	9600      	str	r6, [sp, #0]
   29396:	4623      	mov	r3, r4
   29398:	462a      	mov	r2, r5
   2939a:	2104      	movs	r1, #4
   2939c:	4638      	mov	r0, r7
   2939e:	f7ff f97d 	bl	2869c <bt_l2cap_send_cb>
}
   293a2:	b002      	add	sp, #8
   293a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   293a8:	4628      	mov	r0, r5
   293aa:	f000 fee5 	bl	2a178 <net_buf_unref>
		return -ENOTCONN;
   293ae:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   293b2:	e7f6      	b.n	293a2 <bt_att_send+0x26>
	net_buf_put(&att->tx_queue, buf);
   293b4:	4629      	mov	r1, r5
   293b6:	300c      	adds	r0, #12
   293b8:	f000 fed1 	bl	2a15e <net_buf_put>
	att_send_process(att);
   293bc:	4640      	mov	r0, r8
   293be:	f7ff fbf4 	bl	28baa <att_send_process>
	return 0;
   293c2:	2000      	movs	r0, #0
   293c4:	e7ed      	b.n	293a2 <bt_att_send+0x26>

000293c6 <bt_att_req_send>:
{
   293c6:	b510      	push	{r4, lr}
   293c8:	460c      	mov	r4, r1
	att = att_get(conn);
   293ca:	f7f0 fd21 	bl	19e10 <att_get>
	if (!att) {
   293ce:	b170      	cbz	r0, 293ee <bt_att_req_send+0x28>
   293d0:	4603      	mov	r3, r0
	parent->next = child;
   293d2:	2200      	movs	r2, #0
   293d4:	6022      	str	r2, [r4, #0]
	return list->tail;
   293d6:	6882      	ldr	r2, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   293d8:	b132      	cbz	r2, 293e8 <bt_att_req_send+0x22>
	parent->next = child;
   293da:	6014      	str	r4, [r2, #0]
	list->tail = node;
   293dc:	6084      	str	r4, [r0, #8]
	att_req_send_process(att);
   293de:	4618      	mov	r0, r3
   293e0:	f7ff fb1a 	bl	28a18 <att_req_send_process>
	return 0;
   293e4:	2000      	movs	r0, #0
}
   293e6:	bd10      	pop	{r4, pc}
   293e8:	6084      	str	r4, [r0, #8]
	list->head = node;
   293ea:	6044      	str	r4, [r0, #4]
}
   293ec:	e7f7      	b.n	293de <bt_att_req_send+0x18>
		return -ENOTCONN;
   293ee:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   293f2:	e7f8      	b.n	293e6 <bt_att_req_send+0x20>

000293f4 <bt_att_req_cancel>:
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   293f4:	2800      	cmp	r0, #0
   293f6:	d04b      	beq.n	29490 <bt_att_req_cancel+0x9c>
{
   293f8:	b570      	push	{r4, r5, r6, lr}
   293fa:	460d      	mov	r5, r1
	if (!conn || !req) {
   293fc:	2900      	cmp	r1, #0
   293fe:	d03d      	beq.n	2947c <bt_att_req_cancel+0x88>
		return;
	}

	att = att_get(conn);
   29400:	f7f0 fd06 	bl	19e10 <att_get>
	if (!att) {
   29404:	4606      	mov	r6, r0
   29406:	2800      	cmp	r0, #0
   29408:	d038      	beq.n	2947c <bt_att_req_cancel+0x88>
	return list->head;
   2940a:	6a40      	ldr	r0, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2940c:	b158      	cbz	r0, 29426 <bt_att_req_cancel+0x32>
   2940e:	f5b0 70a2 	subs.w	r0, r0, #324	; 0x144
   29412:	d00a      	beq.n	2942a <bt_att_req_cancel+0x36>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29414:	f510 74a2 	adds.w	r4, r0, #324	; 0x144
   29418:	d00c      	beq.n	29434 <bt_att_req_cancel+0x40>
	return node->next;
   2941a:	f8d0 4144 	ldr.w	r4, [r0, #324]	; 0x144
   2941e:	b14c      	cbz	r4, 29434 <bt_att_req_cancel+0x40>
   29420:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
   29424:	e006      	b.n	29434 <bt_att_req_cancel+0x40>
   29426:	4604      	mov	r4, r0
   29428:	e004      	b.n	29434 <bt_att_req_cancel+0x40>
   2942a:	4604      	mov	r4, r0
   2942c:	e002      	b.n	29434 <bt_att_req_cancel+0x40>
   2942e:	4623      	mov	r3, r4
   29430:	4620      	mov	r0, r4
   29432:	461c      	mov	r4, r3
   29434:	b178      	cbz	r0, 29456 <bt_att_req_cancel+0x62>
		/* Check if request is outstanding */
		if (bt_att_chan_req_cancel(chan, req)) {
   29436:	4629      	mov	r1, r5
   29438:	f7f1 fcf0 	bl	1ae1c <bt_att_chan_req_cancel>
   2943c:	b9f0      	cbnz	r0, 2947c <bt_att_req_cancel+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2943e:	2c00      	cmp	r4, #0
   29440:	d0f5      	beq.n	2942e <bt_att_req_cancel+0x3a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29442:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   29446:	d0f3      	beq.n	29430 <bt_att_req_cancel+0x3c>
	return node->next;
   29448:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2944c:	2b00      	cmp	r3, #0
   2944e:	d0ef      	beq.n	29430 <bt_att_req_cancel+0x3c>
   29450:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
   29454:	e7ec      	b.n	29430 <bt_att_req_cancel+0x3c>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   29456:	462a      	mov	r2, r5
	return list->head;
   29458:	6873      	ldr	r3, [r6, #4]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2945a:	b163      	cbz	r3, 29476 <bt_att_req_cancel+0x82>
   2945c:	4293      	cmp	r3, r2
   2945e:	d002      	beq.n	29466 <bt_att_req_cancel+0x72>
   29460:	4618      	mov	r0, r3
   29462:	681b      	ldr	r3, [r3, #0]
   29464:	e7f9      	b.n	2945a <bt_att_req_cancel+0x66>
Z_GENLIST_REMOVE(slist, snode)
   29466:	b150      	cbz	r0, 2947e <bt_att_req_cancel+0x8a>
	return node->next;
   29468:	682b      	ldr	r3, [r5, #0]
	parent->next = child;
   2946a:	6003      	str	r3, [r0, #0]
	return list->tail;
   2946c:	68b3      	ldr	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   2946e:	42ab      	cmp	r3, r5
   29470:	d00c      	beq.n	2948c <bt_att_req_cancel+0x98>
	parent->next = child;
   29472:	2300      	movs	r3, #0
   29474:	602b      	str	r3, [r5, #0]

	bt_att_req_free(req);
   29476:	4628      	mov	r0, r5
   29478:	f7f1 fc04 	bl	1ac84 <bt_att_req_free>
}
   2947c:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   2947e:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   29480:	6073      	str	r3, [r6, #4]
	return list->tail;
   29482:	68b2      	ldr	r2, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   29484:	42aa      	cmp	r2, r5
   29486:	d1f4      	bne.n	29472 <bt_att_req_cancel+0x7e>
	list->tail = node;
   29488:	60b3      	str	r3, [r6, #8]
}
   2948a:	e7f2      	b.n	29472 <bt_att_req_cancel+0x7e>
	list->tail = node;
   2948c:	60b0      	str	r0, [r6, #8]
}
   2948e:	e7f0      	b.n	29472 <bt_att_req_cancel+0x7e>
   29490:	4770      	bx	lr

00029492 <update_range>:
{
   29492:	b430      	push	{r4, r5}
	if (new_start >= *start && new_end <= *end) {
   29494:	8804      	ldrh	r4, [r0, #0]
   29496:	42a2      	cmp	r2, r4
   29498:	d302      	bcc.n	294a0 <update_range+0xe>
   2949a:	880d      	ldrh	r5, [r1, #0]
   2949c:	42ab      	cmp	r3, r5
   2949e:	d908      	bls.n	294b2 <update_range+0x20>
	if (*start > new_start) {
   294a0:	42a2      	cmp	r2, r4
   294a2:	d200      	bcs.n	294a6 <update_range+0x14>
		*start = new_start;
   294a4:	8002      	strh	r2, [r0, #0]
	if (*end < new_end) {
   294a6:	880a      	ldrh	r2, [r1, #0]
   294a8:	4293      	cmp	r3, r2
   294aa:	d904      	bls.n	294b6 <update_range+0x24>
		*end = new_end;
   294ac:	800b      	strh	r3, [r1, #0]
	return true;
   294ae:	2001      	movs	r0, #1
   294b0:	e002      	b.n	294b8 <update_range+0x26>
		return false;
   294b2:	2000      	movs	r0, #0
   294b4:	e000      	b.n	294b8 <update_range+0x26>
	return true;
   294b6:	2001      	movs	r0, #1
}
   294b8:	bc30      	pop	{r4, r5}
   294ba:	4770      	bx	lr

000294bc <cf_set_value>:
{
   294bc:	b470      	push	{r4, r5, r6}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   294be:	2300      	movs	r3, #0
   294c0:	e001      	b.n	294c6 <cf_set_value+0xa>
   294c2:	3301      	adds	r3, #1
   294c4:	b29b      	uxth	r3, r3
   294c6:	2b02      	cmp	r3, #2
   294c8:	d824      	bhi.n	29514 <cf_set_value+0x58>
   294ca:	08dd      	lsrs	r5, r3, #3
   294cc:	ebb2 0fd3 	cmp.w	r2, r3, lsr #3
   294d0:	d90f      	bls.n	294f2 <cf_set_value+0x36>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   294d2:	1944      	adds	r4, r0, r5
   294d4:	7a24      	ldrb	r4, [r4, #8]
   294d6:	f003 0607 	and.w	r6, r3, #7
   294da:	40f4      	lsrs	r4, r6
   294dc:	f014 0f01 	tst.w	r4, #1
   294e0:	d0ef      	beq.n	294c2 <cf_set_value+0x6>
		    !(value[i / 8] & BIT(i % 8))) {
   294e2:	5d4c      	ldrb	r4, [r1, r5]
   294e4:	fa24 f606 	lsr.w	r6, r4, r6
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   294e8:	f016 0f01 	tst.w	r6, #1
   294ec:	d1e9      	bne.n	294c2 <cf_set_value+0x6>
			return false;
   294ee:	2000      	movs	r0, #0
   294f0:	e013      	b.n	2951a <cf_set_value+0x5e>
   294f2:	2300      	movs	r3, #0
   294f4:	e008      	b.n	29508 <cf_set_value+0x4c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   294f6:	5ccc      	ldrb	r4, [r1, r3]
   294f8:	f004 0407 	and.w	r4, r4, #7
   294fc:	18c5      	adds	r5, r0, r3
   294fe:	7a2e      	ldrb	r6, [r5, #8]
   29500:	4334      	orrs	r4, r6
   29502:	722c      	strb	r4, [r5, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   29504:	3301      	adds	r3, #1
   29506:	b29b      	uxth	r3, r3
   29508:	4293      	cmp	r3, r2
   2950a:	d205      	bcs.n	29518 <cf_set_value+0x5c>
   2950c:	2b00      	cmp	r3, #0
   2950e:	d0f2      	beq.n	294f6 <cf_set_value+0x3a>
	return true;
   29510:	2001      	movs	r0, #1
   29512:	e002      	b.n	2951a <cf_set_value+0x5e>
   29514:	2300      	movs	r3, #0
   29516:	e7f7      	b.n	29508 <cf_set_value+0x4c>
   29518:	2001      	movs	r0, #1
}
   2951a:	bc70      	pop	{r4, r5, r6}
   2951c:	4770      	bx	lr

0002951e <gatt_ccc_changed>:
{
   2951e:	b510      	push	{r4, lr}
   29520:	460a      	mov	r2, r1
	uint16_t value = 0x0000;
   29522:	2100      	movs	r1, #0
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   29524:	460b      	mov	r3, r1
   29526:	2b00      	cmp	r3, #0
   29528:	dd07      	ble.n	2953a <gatt_ccc_changed+0x1c>
	if (value != ccc->value) {
   2952a:	8953      	ldrh	r3, [r2, #10]
   2952c:	4299      	cmp	r1, r3
   2952e:	d003      	beq.n	29538 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   29530:	8151      	strh	r1, [r2, #10]
		if (ccc->cfg_changed) {
   29532:	68d3      	ldr	r3, [r2, #12]
   29534:	b103      	cbz	r3, 29538 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   29536:	4798      	blx	r3
}
   29538:	bd10      	pop	{r4, pc}
		if (ccc->cfg[i].value > value) {
   2953a:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   2953e:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   29542:	8924      	ldrh	r4, [r4, #8]
   29544:	428c      	cmp	r4, r1
   29546:	d900      	bls.n	2954a <gatt_ccc_changed+0x2c>
			value = ccc->cfg[i].value;
   29548:	4621      	mov	r1, r4
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   2954a:	3301      	adds	r3, #1
   2954c:	e7eb      	b.n	29526 <gatt_ccc_changed+0x8>

0002954e <gatt_indicate_rsp>:
{
   2954e:	b510      	push	{r4, lr}
   29550:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   29552:	68a3      	ldr	r3, [r4, #8]
   29554:	b113      	cbz	r3, 2955c <gatt_indicate_rsp+0xe>
   29556:	460a      	mov	r2, r1
		params->func(conn, params, err);
   29558:	4621      	mov	r1, r4
   2955a:	4798      	blx	r3
	params->_ref--;
   2955c:	7da3      	ldrb	r3, [r4, #22]
   2955e:	3b01      	subs	r3, #1
   29560:	b2db      	uxtb	r3, r3
   29562:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29564:	68e2      	ldr	r2, [r4, #12]
   29566:	b112      	cbz	r2, 2956e <gatt_indicate_rsp+0x20>
   29568:	b90b      	cbnz	r3, 2956e <gatt_indicate_rsp+0x20>
		params->destroy(params);
   2956a:	4620      	mov	r0, r4
   2956c:	4790      	blx	r2
}
   2956e:	bd10      	pop	{r4, pc}

00029570 <match_uuid>:
	data->attr = attr;
   29570:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29572:	8091      	strh	r1, [r2, #4]
}
   29574:	2000      	movs	r0, #0
   29576:	4770      	bx	lr

00029578 <gatt_sub_is_empty>:
	return list->head;
   29578:	6880      	ldr	r0, [r0, #8]
}
   2957a:	fab0 f080 	clz	r0, r0
   2957e:	0940      	lsrs	r0, r0, #5
   29580:	4770      	bx	lr

00029582 <gen_hash_m>:
{
   29582:	b5f0      	push	{r4, r5, r6, r7, lr}
   29584:	b089      	sub	sp, #36	; 0x24
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29586:	6806      	ldr	r6, [r0, #0]
   29588:	7835      	ldrb	r5, [r6, #0]
   2958a:	2d00      	cmp	r5, #0
   2958c:	d161      	bne.n	29652 <gen_hash_m+0xd0>
   2958e:	4607      	mov	r7, r0
   29590:	4614      	mov	r4, r2
	switch (u16->val) {
   29592:	8873      	ldrh	r3, [r6, #2]
   29594:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29598:	d019      	beq.n	295ce <gen_hash_m+0x4c>
   2959a:	d913      	bls.n	295c4 <gen_hash_m+0x42>
   2959c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   295a0:	33ff      	adds	r3, #255	; 0xff
   295a2:	b29b      	uxth	r3, r3
   295a4:	2b04      	cmp	r3, #4
   295a6:	d85a      	bhi.n	2965e <gen_hash_m+0xdc>
		value = sys_cpu_to_le16(handle);
   295a8:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   295ac:	2202      	movs	r2, #2
   295ae:	f10d 010e 	add.w	r1, sp, #14
   295b2:	4620      	mov	r0, r4
   295b4:	f7fe f9bd 	bl	27932 <tc_cmac_update>
   295b8:	2800      	cmp	r0, #0
   295ba:	d13a      	bne.n	29632 <gen_hash_m+0xb0>
			state->err = -EINVAL;
   295bc:	f06f 0315 	mvn.w	r3, #21
   295c0:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   295c2:	e047      	b.n	29654 <gen_hash_m+0xd2>
	switch (u16->val) {
   295c4:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   295c8:	b29b      	uxth	r3, r3
   295ca:	2b03      	cmp	r3, #3
   295cc:	d845      	bhi.n	2965a <gen_hash_m+0xd8>
		value = sys_cpu_to_le16(handle);
   295ce:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   295d2:	2202      	movs	r2, #2
   295d4:	f10d 010e 	add.w	r1, sp, #14
   295d8:	4620      	mov	r0, r4
   295da:	f7fe f9aa 	bl	27932 <tc_cmac_update>
   295de:	b918      	cbnz	r0, 295e8 <gen_hash_m+0x66>
			state->err = -EINVAL;
   295e0:	f06f 0315 	mvn.w	r3, #21
   295e4:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   295e6:	e035      	b.n	29654 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   295e8:	8873      	ldrh	r3, [r6, #2]
   295ea:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   295ee:	2202      	movs	r2, #2
   295f0:	f10d 010e 	add.w	r1, sp, #14
   295f4:	4620      	mov	r0, r4
   295f6:	f7fe f99c 	bl	27932 <tc_cmac_update>
   295fa:	b180      	cbz	r0, 2961e <gen_hash_m+0x9c>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   295fc:	687e      	ldr	r6, [r7, #4]
   295fe:	2000      	movs	r0, #0
   29600:	9000      	str	r0, [sp, #0]
   29602:	2310      	movs	r3, #16
   29604:	eb0d 0203 	add.w	r2, sp, r3
   29608:	4639      	mov	r1, r7
   2960a:	47b0      	blx	r6
		if (len < 0) {
   2960c:	1e02      	subs	r2, r0, #0
   2960e:	db0a      	blt.n	29626 <gen_hash_m+0xa4>
		if (tc_cmac_update(&state->state, data, len) ==
   29610:	a904      	add	r1, sp, #16
   29612:	4620      	mov	r0, r4
   29614:	f7fe f98d 	bl	27932 <tc_cmac_update>
   29618:	b138      	cbz	r0, 2962a <gen_hash_m+0xa8>
	return BT_GATT_ITER_CONTINUE;
   2961a:	2501      	movs	r5, #1
   2961c:	e01a      	b.n	29654 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2961e:	f06f 0315 	mvn.w	r3, #21
   29622:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29624:	e016      	b.n	29654 <gen_hash_m+0xd2>
			state->err = len;
   29626:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29628:	e014      	b.n	29654 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2962a:	f06f 0315 	mvn.w	r3, #21
   2962e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29630:	e010      	b.n	29654 <gen_hash_m+0xd2>
		value = sys_cpu_to_le16(u16->val);
   29632:	8873      	ldrh	r3, [r6, #2]
   29634:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29638:	2202      	movs	r2, #2
   2963a:	f10d 010e 	add.w	r1, sp, #14
   2963e:	4620      	mov	r0, r4
   29640:	f7fe f977 	bl	27932 <tc_cmac_update>
   29644:	b108      	cbz	r0, 2964a <gen_hash_m+0xc8>
	return BT_GATT_ITER_CONTINUE;
   29646:	2501      	movs	r5, #1
   29648:	e004      	b.n	29654 <gen_hash_m+0xd2>
			state->err = -EINVAL;
   2964a:	f06f 0315 	mvn.w	r3, #21
   2964e:	65a3      	str	r3, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29650:	e000      	b.n	29654 <gen_hash_m+0xd2>
		return BT_GATT_ITER_CONTINUE;
   29652:	2501      	movs	r5, #1
}
   29654:	4628      	mov	r0, r5
   29656:	b009      	add	sp, #36	; 0x24
   29658:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2965a:	2501      	movs	r5, #1
   2965c:	e7fa      	b.n	29654 <gen_hash_m+0xd2>
   2965e:	2501      	movs	r5, #1
   29660:	e7f8      	b.n	29654 <gen_hash_m+0xd2>

00029662 <sc_restore_rsp>:
{
   29662:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   29664:	f7f1 fc10 	bl	1ae88 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   29668:	b188      	cbz	r0, 2968e <sc_restore_rsp+0x2c>
   2966a:	4603      	mov	r3, r0
   2966c:	7a02      	ldrb	r2, [r0, #8]
   2966e:	f012 0f01 	tst.w	r2, #1
   29672:	d00c      	beq.n	2968e <sc_restore_rsp+0x2c>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29674:	330c      	adds	r3, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29676:	f3bf 8f5b 	dmb	ish
   2967a:	e853 2f00 	ldrex	r2, [r3]
   2967e:	f042 0201 	orr.w	r2, r2, #1
   29682:	e843 2100 	strex	r1, r2, [r3]
   29686:	2900      	cmp	r1, #0
   29688:	d1f7      	bne.n	2967a <sc_restore_rsp+0x18>
   2968a:	f3bf 8f5b 	dmb	ish
}
   2968e:	bd08      	pop	{r3, pc}

00029690 <find_ccc_cfg>:
{
   29690:	b5f0      	push	{r4, r5, r6, r7, lr}
   29692:	b083      	sub	sp, #12
   29694:	4607      	mov	r7, r0
   29696:	460d      	mov	r5, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   29698:	2400      	movs	r4, #0
   2969a:	b11c      	cbz	r4, 296a4 <find_ccc_cfg+0x14>
	return NULL;
   2969c:	2600      	movs	r6, #0
}
   2969e:	4630      	mov	r0, r6
   296a0:	b003      	add	sp, #12
   296a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   296a4:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   296a8:	eb05 0646 	add.w	r6, r5, r6, lsl #1
		if (conn) {
   296ac:	b167      	cbz	r7, 296c8 <find_ccc_cfg+0x38>
						    &cfg->peer)) {
   296ae:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   296b2:	4632      	mov	r2, r6
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   296b4:	3201      	adds	r2, #1
   296b6:	f815 1013 	ldrb.w	r1, [r5, r3, lsl #1]
   296ba:	4638      	mov	r0, r7
   296bc:	f7fe fecf 	bl	2845e <bt_conn_is_peer_addr_le>
   296c0:	2800      	cmp	r0, #0
   296c2:	d1ec      	bne.n	2969e <find_ccc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   296c4:	3401      	adds	r4, #1
   296c6:	e7e8      	b.n	2969a <find_ccc_cfg+0xa>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   296c8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
   296cc:	eb05 0040 	add.w	r0, r5, r0, lsl #1
   296d0:	2300      	movs	r3, #0
   296d2:	9300      	str	r3, [sp, #0]
   296d4:	f8cd 3003 	str.w	r3, [sp, #3]
   296d8:	2207      	movs	r2, #7
   296da:	4669      	mov	r1, sp
   296dc:	3001      	adds	r0, #1
   296de:	f7fe fa8a 	bl	27bf6 <memcmp>
   296e2:	2800      	cmp	r0, #0
   296e4:	d1ee      	bne.n	296c4 <find_ccc_cfg+0x34>
   296e6:	e7da      	b.n	2969e <find_ccc_cfg+0xe>

000296e8 <clear_ccc_cfg>:
{
   296e8:	b530      	push	{r4, r5, lr}
   296ea:	b083      	sub	sp, #12
   296ec:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   296ee:	2500      	movs	r5, #0
   296f0:	9500      	str	r5, [sp, #0]
   296f2:	f8cd 5003 	str.w	r5, [sp, #3]
	memcpy(dst, src, sizeof(*dst));
   296f6:	2207      	movs	r2, #7
   296f8:	4669      	mov	r1, sp
   296fa:	3001      	adds	r0, #1
   296fc:	f7fe faa8 	bl	27c50 <memcpy>
	cfg->id = 0U;
   29700:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   29702:	8125      	strh	r5, [r4, #8]
}
   29704:	b003      	add	sp, #12
   29706:	bd30      	pop	{r4, r5, pc}

00029708 <gatt_sub_free>:
{
   29708:	b500      	push	{lr}
   2970a:	b083      	sub	sp, #12
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   2970c:	2300      	movs	r3, #0
   2970e:	9300      	str	r3, [sp, #0]
   29710:	f8cd 3003 	str.w	r3, [sp, #3]
   29714:	2207      	movs	r2, #7
   29716:	4669      	mov	r1, sp
   29718:	3001      	adds	r0, #1
   2971a:	f7fe fa99 	bl	27c50 <memcpy>
}
   2971e:	b003      	add	sp, #12
   29720:	f85d fb04 	ldr.w	pc, [sp], #4

00029724 <gatt_sub_remove>:
{
   29724:	b538      	push	{r3, r4, r5, lr}
   29726:	460c      	mov	r4, r1
	if (params) {
   29728:	b163      	cbz	r3, 29744 <gatt_sub_remove+0x20>
   2972a:	4619      	mov	r1, r3
		sys_slist_remove(&sub->list, prev, &params->node);
   2972c:	3314      	adds	r3, #20
Z_GENLIST_REMOVE(slist, snode)
   2972e:	b172      	cbz	r2, 2974e <gatt_sub_remove+0x2a>
	return node->next;
   29730:	694d      	ldr	r5, [r1, #20]
	parent->next = child;
   29732:	6015      	str	r5, [r2, #0]
	return list->tail;
   29734:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
   29736:	42ab      	cmp	r3, r5
   29738:	d010      	beq.n	2975c <gatt_sub_remove+0x38>
	parent->next = child;
   2973a:	2200      	movs	r2, #0
   2973c:	614a      	str	r2, [r1, #20]
		params->notify(conn, params, NULL, 0);
   2973e:	680d      	ldr	r5, [r1, #0]
   29740:	4613      	mov	r3, r2
   29742:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   29744:	4620      	mov	r0, r4
   29746:	f7ff ff17 	bl	29578 <gatt_sub_is_empty>
   2974a:	b948      	cbnz	r0, 29760 <gatt_sub_remove+0x3c>
}
   2974c:	bd38      	pop	{r3, r4, r5, pc}
	return node->next;
   2974e:	694a      	ldr	r2, [r1, #20]
	list->head = node;
   29750:	60a2      	str	r2, [r4, #8]
	return list->tail;
   29752:	68e5      	ldr	r5, [r4, #12]
Z_GENLIST_REMOVE(slist, snode)
   29754:	42ab      	cmp	r3, r5
   29756:	d1f0      	bne.n	2973a <gatt_sub_remove+0x16>
	list->tail = node;
   29758:	60e2      	str	r2, [r4, #12]
}
   2975a:	e7ee      	b.n	2973a <gatt_sub_remove+0x16>
	list->tail = node;
   2975c:	60e2      	str	r2, [r4, #12]
}
   2975e:	e7ec      	b.n	2973a <gatt_sub_remove+0x16>
		gatt_sub_free(sub);
   29760:	4620      	mov	r0, r4
   29762:	f7ff ffd1 	bl	29708 <gatt_sub_free>
}
   29766:	e7f1      	b.n	2974c <gatt_sub_remove+0x28>

00029768 <gatt_sub_update>:
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   29768:	784a      	ldrb	r2, [r1, #1]
   2976a:	b902      	cbnz	r2, 2976e <gatt_sub_update+0x6>
   2976c:	4770      	bx	lr
{
   2976e:	b508      	push	{r3, lr}
   29770:	460b      	mov	r3, r1
   29772:	2207      	movs	r2, #7
   29774:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29778:	1c58      	adds	r0, r3, #1
   2977a:	f7fe fa69 	bl	27c50 <memcpy>
}
   2977e:	bd08      	pop	{r3, pc}

00029780 <remove_subscriptions>:
{
   29780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29784:	4606      	mov	r6, r0
	sub = gatt_sub_find(conn);
   29786:	f7f1 fbcd 	bl	1af24 <gatt_sub_find>
	if (!sub) {
   2978a:	2800      	cmp	r0, #0
   2978c:	d03b      	beq.n	29806 <remove_subscriptions+0x86>
   2978e:	4607      	mov	r7, r0
	return list->head;
   29790:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29792:	b385      	cbz	r5, 297f6 <remove_subscriptions+0x76>
   29794:	3d14      	subs	r5, #20
   29796:	d032      	beq.n	297fe <remove_subscriptions+0x7e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29798:	f115 0414 	adds.w	r4, r5, #20
   2979c:	d02c      	beq.n	297f8 <remove_subscriptions+0x78>
	return node->next;
   2979e:	696c      	ldr	r4, [r5, #20]
   297a0:	b354      	cbz	r4, 297f8 <remove_subscriptions+0x78>
   297a2:	3c14      	subs	r4, #20
   297a4:	e028      	b.n	297f8 <remove_subscriptions+0x78>
			params->value = 0U;
   297a6:	2300      	movs	r3, #0
   297a8:	81ab      	strh	r3, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
   297aa:	462b      	mov	r3, r5
   297ac:	4642      	mov	r2, r8
   297ae:	4639      	mov	r1, r7
   297b0:	4630      	mov	r0, r6
   297b2:	f7ff ffb7 	bl	29724 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   297b6:	b324      	cbz	r4, 29802 <remove_subscriptions+0x82>
Z_GENLIST_PEEK_NEXT(slist, snode)
   297b8:	f114 0314 	adds.w	r3, r4, #20
   297bc:	d002      	beq.n	297c4 <remove_subscriptions+0x44>
	return node->next;
   297be:	6963      	ldr	r3, [r4, #20]
   297c0:	b103      	cbz	r3, 297c4 <remove_subscriptions+0x44>
   297c2:	3b14      	subs	r3, #20
   297c4:	4625      	mov	r5, r4
   297c6:	461c      	mov	r4, r3
   297c8:	b1ed      	cbz	r5, 29806 <remove_subscriptions+0x86>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   297ca:	f106 0188 	add.w	r1, r6, #136	; 0x88
   297ce:	7a30      	ldrb	r0, [r6, #8]
   297d0:	f7fe fc60 	bl	28094 <bt_addr_le_is_bonded>
   297d4:	2800      	cmp	r0, #0
   297d6:	d0e6      	beq.n	297a6 <remove_subscriptions+0x26>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   297d8:	f3bf 8f5b 	dmb	ish
   297dc:	692b      	ldr	r3, [r5, #16]
   297de:	f3bf 8f5b 	dmb	ish
   297e2:	f013 0f01 	tst.w	r3, #1
   297e6:	d1de      	bne.n	297a6 <remove_subscriptions+0x26>
			gatt_sub_update(conn, sub);
   297e8:	4639      	mov	r1, r7
   297ea:	4630      	mov	r0, r6
   297ec:	f7ff ffbc 	bl	29768 <gatt_sub_update>
			prev = &params->node;
   297f0:	f105 0814 	add.w	r8, r5, #20
   297f4:	e7df      	b.n	297b6 <remove_subscriptions+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   297f6:	462c      	mov	r4, r5
   297f8:	f04f 0800 	mov.w	r8, #0
   297fc:	e7e4      	b.n	297c8 <remove_subscriptions+0x48>
   297fe:	462c      	mov	r4, r5
   29800:	e7fa      	b.n	297f8 <remove_subscriptions+0x78>
   29802:	4623      	mov	r3, r4
   29804:	e7de      	b.n	297c4 <remove_subscriptions+0x44>
}
   29806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002980a <clear_sc_cfg>:
{
   2980a:	b508      	push	{r3, lr}
	memset(cfg, 0, sizeof(*cfg));
   2980c:	220c      	movs	r2, #12
   2980e:	2100      	movs	r1, #0
   29810:	f7fe fa42 	bl	27c98 <memset>
}
   29814:	bd08      	pop	{r3, pc}

00029816 <bt_gatt_clear_sc>:
{
   29816:	b508      	push	{r3, lr}
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   29818:	f7f1 fb60 	bl	1aedc <find_sc_cfg>
	if (!cfg) {
   2981c:	b108      	cbz	r0, 29822 <bt_gatt_clear_sc+0xc>
	clear_sc_cfg(cfg);
   2981e:	f7ff fff4 	bl	2980a <clear_sc_cfg>
}
   29822:	2000      	movs	r0, #0
   29824:	bd08      	pop	{r3, pc}

00029826 <sc_ccc_cfg_write>:
{
   29826:	b508      	push	{r3, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29828:	2a02      	cmp	r2, #2
   2982a:	d003      	beq.n	29834 <sc_ccc_cfg_write+0xe>
		sc_clear(conn);
   2982c:	f7f1 fcae 	bl	1b18c <sc_clear>
}
   29830:	2002      	movs	r0, #2
   29832:	bd08      	pop	{r3, pc}
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29834:	2300      	movs	r3, #0
   29836:	461a      	mov	r2, r3
   29838:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2983c:	7a00      	ldrb	r0, [r0, #8]
   2983e:	f7f1 fbf1 	bl	1b024 <sc_save>
   29842:	e7f5      	b.n	29830 <sc_ccc_cfg_write+0xa>

00029844 <sc_reset>:
{
   29844:	b508      	push	{r3, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   29846:	2204      	movs	r2, #4
   29848:	2100      	movs	r1, #0
   2984a:	3008      	adds	r0, #8
   2984c:	f7fe fa24 	bl	27c98 <memset>
}
   29850:	bd08      	pop	{r3, pc}

00029852 <gatt_write_ccc_rsp>:
{
   29852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29854:	4607      	mov	r7, r0
   29856:	460e      	mov	r6, r1
   29858:	9c06      	ldr	r4, [sp, #24]
	atomic_clear_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   2985a:	f104 0310 	add.w	r3, r4, #16
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2985e:	f3bf 8f5b 	dmb	ish
   29862:	e853 2f00 	ldrex	r2, [r3]
   29866:	f022 0204 	bic.w	r2, r2, #4
   2986a:	e843 2100 	strex	r1, r2, [r3]
   2986e:	2900      	cmp	r1, #0
   29870:	d1f7      	bne.n	29862 <gatt_write_ccc_rsp+0x10>
   29872:	f3bf 8f5b 	dmb	ish
	if (err) {
   29876:	b96e      	cbnz	r6, 29894 <gatt_write_ccc_rsp+0x42>
	} else if (!params->value) {
   29878:	89a3      	ldrh	r3, [r4, #12]
   2987a:	b923      	cbnz	r3, 29886 <gatt_write_ccc_rsp+0x34>
		params->notify(conn, params, NULL, 0);
   2987c:	6825      	ldr	r5, [r4, #0]
   2987e:	461a      	mov	r2, r3
   29880:	4621      	mov	r1, r4
   29882:	4638      	mov	r0, r7
   29884:	47a8      	blx	r5
	if (params->write) {
   29886:	6863      	ldr	r3, [r4, #4]
   29888:	b11b      	cbz	r3, 29892 <gatt_write_ccc_rsp+0x40>
		params->write(conn, err, NULL);
   2988a:	2200      	movs	r2, #0
   2988c:	4631      	mov	r1, r6
   2988e:	4638      	mov	r0, r7
   29890:	4798      	blx	r3
}
   29892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sub = gatt_sub_find(conn);
   29894:	4638      	mov	r0, r7
   29896:	f7f1 fb45 	bl	1af24 <gatt_sub_find>
		if (!sub) {
   2989a:	4601      	mov	r1, r0
   2989c:	2800      	cmp	r0, #0
   2989e:	d0f8      	beq.n	29892 <gatt_write_ccc_rsp+0x40>
	return list->head;
   298a0:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   298a2:	b10b      	cbz	r3, 298a8 <gatt_write_ccc_rsp+0x56>
	return node->next;
   298a4:	681a      	ldr	r2, [r3, #0]
   298a6:	e009      	b.n	298bc <gatt_write_ccc_rsp+0x6a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   298a8:	461a      	mov	r2, r3
   298aa:	e007      	b.n	298bc <gatt_write_ccc_rsp+0x6a>
				gatt_sub_remove(conn, sub, tmp, params);
   298ac:	4623      	mov	r3, r4
   298ae:	4638      	mov	r0, r7
   298b0:	f7ff ff38 	bl	29724 <gatt_sub_remove>
				break;
   298b4:	e7e7      	b.n	29886 <gatt_write_ccc_rsp+0x34>
   298b6:	4615      	mov	r5, r2
   298b8:	4613      	mov	r3, r2
   298ba:	462a      	mov	r2, r5
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   298bc:	2b00      	cmp	r3, #0
   298be:	d0e2      	beq.n	29886 <gatt_write_ccc_rsp+0x34>
			if (node == &params->node) {
   298c0:	f104 0514 	add.w	r5, r4, #20
   298c4:	42ab      	cmp	r3, r5
   298c6:	d0f1      	beq.n	298ac <gatt_write_ccc_rsp+0x5a>
   298c8:	2a00      	cmp	r2, #0
   298ca:	d0f4      	beq.n	298b6 <gatt_write_ccc_rsp+0x64>
	return node->next;
   298cc:	6815      	ldr	r5, [r2, #0]
   298ce:	e7f3      	b.n	298b8 <gatt_write_ccc_rsp+0x66>

000298d0 <gatt_foreach_iter>:
	if (handle > end_handle) {
   298d0:	4299      	cmp	r1, r3
   298d2:	d822      	bhi.n	2991a <gatt_foreach_iter+0x4a>
{
   298d4:	b538      	push	{r3, r4, r5, lr}
   298d6:	4605      	mov	r5, r0
   298d8:	460c      	mov	r4, r1
	if (handle < start_handle) {
   298da:	4291      	cmp	r1, r2
   298dc:	d31f      	bcc.n	2991e <gatt_foreach_iter+0x4e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   298de:	9b04      	ldr	r3, [sp, #16]
   298e0:	b123      	cbz	r3, 298ec <gatt_foreach_iter+0x1c>
   298e2:	6801      	ldr	r1, [r0, #0]
   298e4:	4618      	mov	r0, r3
   298e6:	f7fe fa28 	bl	27d3a <bt_uuid_cmp>
   298ea:	b9d0      	cbnz	r0, 29922 <gatt_foreach_iter+0x52>
	if (attr_data && attr_data != attr->user_data) {
   298ec:	9b05      	ldr	r3, [sp, #20]
   298ee:	b12b      	cbz	r3, 298fc <gatt_foreach_iter+0x2c>
   298f0:	68eb      	ldr	r3, [r5, #12]
   298f2:	9a05      	ldr	r2, [sp, #20]
   298f4:	4293      	cmp	r3, r2
   298f6:	d001      	beq.n	298fc <gatt_foreach_iter+0x2c>
		return BT_GATT_ITER_CONTINUE;
   298f8:	2001      	movs	r0, #1
   298fa:	e011      	b.n	29920 <gatt_foreach_iter+0x50>
	*num_matches -= 1;
   298fc:	9b06      	ldr	r3, [sp, #24]
   298fe:	881b      	ldrh	r3, [r3, #0]
   29900:	3b01      	subs	r3, #1
   29902:	9a06      	ldr	r2, [sp, #24]
   29904:	8013      	strh	r3, [r2, #0]
	result = func(attr, handle, user_data);
   29906:	9a08      	ldr	r2, [sp, #32]
   29908:	4621      	mov	r1, r4
   2990a:	4628      	mov	r0, r5
   2990c:	9b07      	ldr	r3, [sp, #28]
   2990e:	4798      	blx	r3
	if (!*num_matches) {
   29910:	9b06      	ldr	r3, [sp, #24]
   29912:	881b      	ldrh	r3, [r3, #0]
   29914:	b923      	cbnz	r3, 29920 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   29916:	2000      	movs	r0, #0
   29918:	e002      	b.n	29920 <gatt_foreach_iter+0x50>
		return BT_GATT_ITER_STOP;
   2991a:	2000      	movs	r0, #0
}
   2991c:	4770      	bx	lr
		return BT_GATT_ITER_CONTINUE;
   2991e:	2001      	movs	r0, #1
}
   29920:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ITER_CONTINUE;
   29922:	2001      	movs	r0, #1
   29924:	e7fc      	b.n	29920 <gatt_foreach_iter+0x50>

00029926 <gatt_req_alloc>:
{
   29926:	b538      	push	{r3, r4, r5, lr}
   29928:	4605      	mov	r5, r0
   2992a:	460c      	mov	r4, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2992c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   29930:	2100      	movs	r1, #0
   29932:	f7f1 f98f 	bl	1ac54 <bt_att_req_alloc>
	if (!req) {
   29936:	4603      	mov	r3, r0
   29938:	b108      	cbz	r0, 2993e <gatt_req_alloc+0x18>
	req->func = func;
   2993a:	6045      	str	r5, [r0, #4]
	req->user_data = params;
   2993c:	60c4      	str	r4, [r0, #12]
}
   2993e:	4618      	mov	r0, r3
   29940:	bd38      	pop	{r3, r4, r5, pc}

00029942 <gatt_req_send>:
{
   29942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29946:	b083      	sub	sp, #12
   29948:	4606      	mov	r6, r0
   2994a:	4608      	mov	r0, r1
   2994c:	4615      	mov	r5, r2
   2994e:	461c      	mov	r4, r3
   29950:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   29954:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	req = gatt_req_alloc(func, params, encode, op, len);
   29956:	9700      	str	r7, [sp, #0]
   29958:	464b      	mov	r3, r9
   2995a:	4622      	mov	r2, r4
   2995c:	4629      	mov	r1, r5
   2995e:	f7ff ffe2 	bl	29926 <gatt_req_alloc>
	if (!req) {
   29962:	b328      	cbz	r0, 299b0 <gatt_req_send+0x6e>
   29964:	4680      	mov	r8, r0
	buf = bt_att_create_pdu(conn, op, len);
   29966:	463a      	mov	r2, r7
   29968:	4649      	mov	r1, r9
   2996a:	4630      	mov	r0, r6
   2996c:	f7f0 ff36 	bl	1a7dc <bt_att_create_pdu>
	if (!buf) {
   29970:	b180      	cbz	r0, 29994 <gatt_req_send+0x52>
	req->buf = buf;
   29972:	f8c8 0008 	str.w	r0, [r8, #8]
	err = encode(buf, len, params);
   29976:	462a      	mov	r2, r5
   29978:	4639      	mov	r1, r7
   2997a:	47a0      	blx	r4
	if (err) {
   2997c:	4604      	mov	r4, r0
   2997e:	b978      	cbnz	r0, 299a0 <gatt_req_send+0x5e>
	err = bt_att_req_send(conn, req);
   29980:	4641      	mov	r1, r8
   29982:	4630      	mov	r0, r6
   29984:	f7ff fd1f 	bl	293c6 <bt_att_req_send>
	if (err) {
   29988:	4604      	mov	r4, r0
   2998a:	b968      	cbnz	r0, 299a8 <gatt_req_send+0x66>
}
   2998c:	4620      	mov	r0, r4
   2998e:	b003      	add	sp, #12
   29990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_att_req_free(req);
   29994:	4640      	mov	r0, r8
   29996:	f7f1 f975 	bl	1ac84 <bt_att_req_free>
		return -ENOMEM;
   2999a:	f06f 040b 	mvn.w	r4, #11
   2999e:	e7f5      	b.n	2998c <gatt_req_send+0x4a>
		bt_att_req_free(req);
   299a0:	4640      	mov	r0, r8
   299a2:	f7f1 f96f 	bl	1ac84 <bt_att_req_free>
		return err;
   299a6:	e7f1      	b.n	2998c <gatt_req_send+0x4a>
		bt_att_req_free(req);
   299a8:	4640      	mov	r0, r8
   299aa:	f7f1 f96b 	bl	1ac84 <bt_att_req_free>
   299ae:	e7ed      	b.n	2998c <gatt_req_send+0x4a>
		return -ENOMEM;
   299b0:	f06f 040b 	mvn.w	r4, #11
   299b4:	e7ea      	b.n	2998c <gatt_req_send+0x4a>

000299b6 <add_subscriptions>:
{
   299b6:	b538      	push	{r3, r4, r5, lr}
   299b8:	4605      	mov	r5, r0
	sub = gatt_sub_find(conn);
   299ba:	f7f1 fab3 	bl	1af24 <gatt_sub_find>
	if (!sub) {
   299be:	b300      	cbz	r0, 29a02 <add_subscriptions+0x4c>
	return list->head;
   299c0:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   299c2:	b15c      	cbz	r4, 299dc <add_subscriptions+0x26>
   299c4:	3c14      	subs	r4, #20
   299c6:	e009      	b.n	299dc <add_subscriptions+0x26>
			gatt_write_ccc(conn, params);
   299c8:	4621      	mov	r1, r4
   299ca:	4628      	mov	r0, r5
   299cc:	f7f1 fcaa 	bl	1b324 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   299d0:	f114 0314 	adds.w	r3, r4, #20
   299d4:	d013      	beq.n	299fe <add_subscriptions+0x48>
	return node->next;
   299d6:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   299d8:	b19c      	cbz	r4, 29a02 <add_subscriptions+0x4c>
   299da:	3c14      	subs	r4, #20
   299dc:	b18c      	cbz	r4, 29a02 <add_subscriptions+0x4c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   299de:	f105 0188 	add.w	r1, r5, #136	; 0x88
   299e2:	7a28      	ldrb	r0, [r5, #8]
   299e4:	f7fe fb56 	bl	28094 <bt_addr_le_is_bonded>
   299e8:	2800      	cmp	r0, #0
   299ea:	d0f1      	beq.n	299d0 <add_subscriptions+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   299ec:	f3bf 8f5b 	dmb	ish
   299f0:	6923      	ldr	r3, [r4, #16]
   299f2:	f3bf 8f5b 	dmb	ish
   299f6:	f013 0f02 	tst.w	r3, #2
   299fa:	d1e9      	bne.n	299d0 <add_subscriptions+0x1a>
   299fc:	e7e4      	b.n	299c8 <add_subscriptions+0x12>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   299fe:	461c      	mov	r4, r3
   29a00:	e7ec      	b.n	299dc <add_subscriptions+0x26>
}
   29a02:	bd38      	pop	{r3, r4, r5, pc}

00029a04 <gatt_write_ccc_buf>:
{
   29a04:	b538      	push	{r3, r4, r5, lr}
   29a06:	4614      	mov	r4, r2
	return net_buf_simple_add(&buf->b, len);
   29a08:	f100 0508 	add.w	r5, r0, #8
   29a0c:	2102      	movs	r1, #2
   29a0e:	4628      	mov	r0, r5
   29a10:	f000 fbfc 	bl	2a20c <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   29a14:	8963      	ldrh	r3, [r4, #10]
   29a16:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   29a18:	89a1      	ldrh	r1, [r4, #12]
   29a1a:	4628      	mov	r0, r5
   29a1c:	f000 fc07 	bl	2a22e <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   29a20:	3410      	adds	r4, #16
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29a22:	f3bf 8f5b 	dmb	ish
   29a26:	e854 3f00 	ldrex	r3, [r4]
   29a2a:	f043 0304 	orr.w	r3, r3, #4
   29a2e:	e844 3200 	strex	r2, r3, [r4]
   29a32:	2a00      	cmp	r2, #0
   29a34:	d1f7      	bne.n	29a26 <gatt_write_ccc_buf+0x22>
   29a36:	f3bf 8f5b 	dmb	ish
}
   29a3a:	2000      	movs	r0, #0
   29a3c:	bd38      	pop	{r3, r4, r5, pc}

00029a3e <clear_cf_cfg>:
{
   29a3e:	b530      	push	{r4, r5, lr}
   29a40:	b083      	sub	sp, #12
   29a42:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29a44:	2500      	movs	r5, #0
   29a46:	9500      	str	r5, [sp, #0]
   29a48:	f8cd 5003 	str.w	r5, [sp, #3]
   29a4c:	2207      	movs	r2, #7
   29a4e:	4669      	mov	r1, sp
   29a50:	3001      	adds	r0, #1
   29a52:	f7fe f8fd 	bl	27c50 <memcpy>
	memset(cfg->data, 0, sizeof(cfg->data));
   29a56:	2201      	movs	r2, #1
   29a58:	4629      	mov	r1, r5
   29a5a:	f104 0008 	add.w	r0, r4, #8
   29a5e:	f7fe f91b 	bl	27c98 <memset>
	atomic_set(cfg->flags, 0);
   29a62:	340c      	adds	r4, #12
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29a64:	f3bf 8f5b 	dmb	ish
   29a68:	e854 3f00 	ldrex	r3, [r4]
   29a6c:	e844 5200 	strex	r2, r5, [r4]
   29a70:	2a00      	cmp	r2, #0
   29a72:	d1f9      	bne.n	29a68 <clear_cf_cfg+0x2a>
   29a74:	f3bf 8f5b 	dmb	ish
}
   29a78:	b003      	add	sp, #12
   29a7a:	bd30      	pop	{r4, r5, pc}

00029a7c <remove_cf_cfg>:
{
   29a7c:	b570      	push	{r4, r5, r6, lr}
   29a7e:	4604      	mov	r4, r0
	cfg = find_cf_cfg(conn);
   29a80:	f7f1 fa02 	bl	1ae88 <find_cf_cfg>
	if (!cfg) {
   29a84:	b1e8      	cbz	r0, 29ac2 <remove_cf_cfg+0x46>
   29a86:	4605      	mov	r5, r0
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29a88:	f104 0688 	add.w	r6, r4, #136	; 0x88
   29a8c:	4631      	mov	r1, r6
   29a8e:	7a20      	ldrb	r0, [r4, #8]
   29a90:	f7fe fb00 	bl	28094 <bt_addr_le_is_bonded>
   29a94:	b918      	cbnz	r0, 29a9e <remove_cf_cfg+0x22>
		clear_cf_cfg(cfg);
   29a96:	4628      	mov	r0, r5
   29a98:	f7ff ffd1 	bl	29a3e <clear_cf_cfg>
   29a9c:	e011      	b.n	29ac2 <remove_cf_cfg+0x46>
   29a9e:	2207      	movs	r2, #7
   29aa0:	4631      	mov	r1, r6
   29aa2:	1c68      	adds	r0, r5, #1
   29aa4:	f7fe f8d4 	bl	27c50 <memcpy>
		atomic_clear_bit(cfg->flags, CF_OUT_OF_SYNC);
   29aa8:	350c      	adds	r5, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29aaa:	f3bf 8f5b 	dmb	ish
   29aae:	e855 3f00 	ldrex	r3, [r5]
   29ab2:	f023 0302 	bic.w	r3, r3, #2
   29ab6:	e845 3200 	strex	r2, r3, [r5]
   29aba:	2a00      	cmp	r2, #0
   29abc:	d1f7      	bne.n	29aae <remove_cf_cfg+0x32>
   29abe:	f3bf 8f5b 	dmb	ish
}
   29ac2:	bd70      	pop	{r4, r5, r6, pc}

00029ac4 <bt_gatt_attr_read>:
{
   29ac4:	b510      	push	{r4, lr}
   29ac6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   29aca:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
   29ace:	42a1      	cmp	r1, r4
   29ad0:	d80c      	bhi.n	29aec <bt_gatt_attr_read+0x28>
   29ad2:	4610      	mov	r0, r2
	len = MIN(buf_len, value_len - offset);
   29ad4:	1a64      	subs	r4, r4, r1
   29ad6:	42a3      	cmp	r3, r4
   29ad8:	bfa8      	it	ge
   29ada:	4623      	movge	r3, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   29adc:	b29c      	uxth	r4, r3
   29ade:	4622      	mov	r2, r4
   29ae0:	9b03      	ldr	r3, [sp, #12]
   29ae2:	4419      	add	r1, r3
   29ae4:	f7fe f8b4 	bl	27c50 <memcpy>
}
   29ae8:	4620      	mov	r0, r4
   29aea:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29aec:	f06f 0406 	mvn.w	r4, #6
   29af0:	e7fa      	b.n	29ae8 <bt_gatt_attr_read+0x24>

00029af2 <read_appearance>:
{
   29af2:	b510      	push	{r4, lr}
   29af4:	b086      	sub	sp, #24
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29af6:	2400      	movs	r4, #0
   29af8:	f8ad 4016 	strh.w	r4, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29afc:	2402      	movs	r4, #2
   29afe:	9402      	str	r4, [sp, #8]
   29b00:	f10d 0416 	add.w	r4, sp, #22
   29b04:	9401      	str	r4, [sp, #4]
   29b06:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   29b0a:	9400      	str	r4, [sp, #0]
   29b0c:	f7ff ffda 	bl	29ac4 <bt_gatt_attr_read>
}
   29b10:	b006      	add	sp, #24
   29b12:	bd10      	pop	{r4, pc}

00029b14 <read_name>:
{
   29b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b18:	b084      	sub	sp, #16
   29b1a:	4604      	mov	r4, r0
   29b1c:	460d      	mov	r5, r1
   29b1e:	4616      	mov	r6, r2
   29b20:	461f      	mov	r7, r3
	const char *name = bt_get_name();
   29b22:	f7ee fa49 	bl	17fb8 <bt_get_name>
   29b26:	4680      	mov	r8, r0
				 strlen(name));
   29b28:	f7fe f849 	bl	27bbe <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29b2c:	b280      	uxth	r0, r0
   29b2e:	9002      	str	r0, [sp, #8]
   29b30:	f8cd 8004 	str.w	r8, [sp, #4]
   29b34:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   29b38:	9300      	str	r3, [sp, #0]
   29b3a:	463b      	mov	r3, r7
   29b3c:	4632      	mov	r2, r6
   29b3e:	4629      	mov	r1, r5
   29b40:	4620      	mov	r0, r4
   29b42:	f7ff ffbf 	bl	29ac4 <bt_gatt_attr_read>
}
   29b46:	b004      	add	sp, #16
   29b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029b4c <cf_read>:
{
   29b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29b4e:	b087      	sub	sp, #28
   29b50:	4604      	mov	r4, r0
   29b52:	460d      	mov	r5, r1
   29b54:	4616      	mov	r6, r2
   29b56:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   29b58:	2300      	movs	r3, #0
   29b5a:	f88d 3014 	strb.w	r3, [sp, #20]
	cfg = find_cf_cfg(conn);
   29b5e:	f7f1 f993 	bl	1ae88 <find_cf_cfg>
	if (cfg) {
   29b62:	b128      	cbz	r0, 29b70 <cf_read+0x24>
   29b64:	4601      	mov	r1, r0
		memcpy(data, cfg->data, sizeof(data));
   29b66:	2201      	movs	r2, #1
   29b68:	3108      	adds	r1, #8
   29b6a:	a805      	add	r0, sp, #20
   29b6c:	f7fe f870 	bl	27c50 <memcpy>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29b70:	2301      	movs	r3, #1
   29b72:	9302      	str	r3, [sp, #8]
   29b74:	ab05      	add	r3, sp, #20
   29b76:	9301      	str	r3, [sp, #4]
   29b78:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   29b7c:	9300      	str	r3, [sp, #0]
   29b7e:	463b      	mov	r3, r7
   29b80:	4632      	mov	r2, r6
   29b82:	4629      	mov	r1, r5
   29b84:	4620      	mov	r0, r4
   29b86:	f7ff ff9d 	bl	29ac4 <bt_gatt_attr_read>
}
   29b8a:	b007      	add	sp, #28
   29b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029b8e <bt_gatt_attr_read_service>:
{
   29b8e:	b570      	push	{r4, r5, r6, lr}
   29b90:	b086      	sub	sp, #24
   29b92:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
   29b96:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   29b98:	7826      	ldrb	r6, [r4, #0]
   29b9a:	b146      	cbz	r6, 29bae <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
   29b9c:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29b9e:	2610      	movs	r6, #16
   29ba0:	9602      	str	r6, [sp, #8]
   29ba2:	9401      	str	r4, [sp, #4]
   29ba4:	9500      	str	r5, [sp, #0]
   29ba6:	f7ff ff8d 	bl	29ac4 <bt_gatt_attr_read>
}
   29baa:	b006      	add	sp, #24
   29bac:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29bae:	8864      	ldrh	r4, [r4, #2]
   29bb0:	f8ad 4016 	strh.w	r4, [sp, #22]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   29bb4:	2402      	movs	r4, #2
   29bb6:	9402      	str	r4, [sp, #8]
   29bb8:	f10d 0416 	add.w	r4, sp, #22
   29bbc:	9401      	str	r4, [sp, #4]
   29bbe:	9500      	str	r5, [sp, #0]
   29bc0:	f7ff ff80 	bl	29ac4 <bt_gatt_attr_read>
   29bc4:	e7f1      	b.n	29baa <bt_gatt_attr_read_service+0x1c>

00029bc6 <bt_gatt_attr_read_ccc>:
{
   29bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   29bc8:	b087      	sub	sp, #28
   29bca:	4605      	mov	r5, r0
   29bcc:	460c      	mov	r4, r1
   29bce:	4616      	mov	r6, r2
   29bd0:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   29bd2:	68c9      	ldr	r1, [r1, #12]
   29bd4:	f7ff fd5c 	bl	29690 <find_ccc_cfg>
	if (cfg) {
   29bd8:	b190      	cbz	r0, 29c00 <bt_gatt_attr_read_ccc+0x3a>
		value = sys_cpu_to_le16(cfg->value);
   29bda:	8903      	ldrh	r3, [r0, #8]
   29bdc:	f8ad 3016 	strh.w	r3, [sp, #22]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   29be0:	2302      	movs	r3, #2
   29be2:	9302      	str	r3, [sp, #8]
   29be4:	f10d 0316 	add.w	r3, sp, #22
   29be8:	9301      	str	r3, [sp, #4]
   29bea:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   29bee:	9300      	str	r3, [sp, #0]
   29bf0:	463b      	mov	r3, r7
   29bf2:	4632      	mov	r2, r6
   29bf4:	4621      	mov	r1, r4
   29bf6:	4628      	mov	r0, r5
   29bf8:	f7ff ff64 	bl	29ac4 <bt_gatt_attr_read>
}
   29bfc:	b007      	add	sp, #28
   29bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = 0x0000;
   29c00:	2300      	movs	r3, #0
   29c02:	f8ad 3016 	strh.w	r3, [sp, #22]
   29c06:	e7eb      	b.n	29be0 <bt_gatt_attr_read_ccc+0x1a>

00029c08 <bt_gatt_attr_value_handle>:
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29c08:	b1b8      	cbz	r0, 29c3a <bt_gatt_attr_value_handle+0x32>
{
   29c0a:	b510      	push	{r4, lr}
   29c0c:	b082      	sub	sp, #8
   29c0e:	4604      	mov	r4, r0
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   29c10:	2300      	movs	r3, #0
   29c12:	f88d 3004 	strb.w	r3, [sp, #4]
   29c16:	f642 0303 	movw	r3, #10243	; 0x2803
   29c1a:	f8ad 3006 	strh.w	r3, [sp, #6]
   29c1e:	a901      	add	r1, sp, #4
   29c20:	6800      	ldr	r0, [r0, #0]
   29c22:	f7fe f88a 	bl	27d3a <bt_uuid_cmp>
   29c26:	b950      	cbnz	r0, 29c3e <bt_gatt_attr_value_handle+0x36>
		struct bt_gatt_chrc *chrc = attr->user_data;
   29c28:	68e3      	ldr	r3, [r4, #12]
		handle = chrc->value_handle;
   29c2a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   29c2c:	b940      	cbnz	r0, 29c40 <bt_gatt_attr_value_handle+0x38>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   29c2e:	4620      	mov	r0, r4
   29c30:	f7f1 fbbe 	bl	1b3b0 <bt_gatt_attr_get_handle>
   29c34:	3001      	adds	r0, #1
   29c36:	b280      	uxth	r0, r0
   29c38:	e002      	b.n	29c40 <bt_gatt_attr_value_handle+0x38>
	uint16_t handle = 0;
   29c3a:	2000      	movs	r0, #0
}
   29c3c:	4770      	bx	lr
	uint16_t handle = 0;
   29c3e:	2000      	movs	r0, #0
}
   29c40:	b002      	add	sp, #8
   29c42:	bd10      	pop	{r4, pc}

00029c44 <bt_gatt_attr_read_chrc>:
{
   29c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c48:	b08a      	sub	sp, #40	; 0x28
   29c4a:	4605      	mov	r5, r0
   29c4c:	460c      	mov	r4, r1
   29c4e:	4616      	mov	r6, r2
   29c50:	461f      	mov	r7, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
   29c52:	f8d1 800c 	ldr.w	r8, [r1, #12]
	pdu.properties = chrc->properties;
   29c56:	f898 3006 	ldrb.w	r3, [r8, #6]
   29c5a:	f88d 3014 	strb.w	r3, [sp, #20]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   29c5e:	4608      	mov	r0, r1
   29c60:	f7ff ffd2 	bl	29c08 <bt_gatt_attr_value_handle>
   29c64:	f8ad 0015 	strh.w	r0, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   29c68:	f8d8 1000 	ldr.w	r1, [r8]
   29c6c:	780b      	ldrb	r3, [r1, #0]
   29c6e:	b993      	cbnz	r3, 29c96 <bt_gatt_attr_read_chrc+0x52>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   29c70:	884b      	ldrh	r3, [r1, #2]
   29c72:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2U;
   29c76:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   29c78:	9302      	str	r3, [sp, #8]
   29c7a:	ab05      	add	r3, sp, #20
   29c7c:	9301      	str	r3, [sp, #4]
   29c7e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   29c82:	9300      	str	r3, [sp, #0]
   29c84:	463b      	mov	r3, r7
   29c86:	4632      	mov	r2, r6
   29c88:	4621      	mov	r1, r4
   29c8a:	4628      	mov	r0, r5
   29c8c:	f7ff ff1a 	bl	29ac4 <bt_gatt_attr_read>
}
   29c90:	b00a      	add	sp, #40	; 0x28
   29c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   29c96:	2210      	movs	r2, #16
   29c98:	3101      	adds	r1, #1
   29c9a:	f10d 0017 	add.w	r0, sp, #23
   29c9e:	f7fd ffd7 	bl	27c50 <memcpy>
		value_len += 16U;
   29ca2:	2313      	movs	r3, #19
   29ca4:	e7e8      	b.n	29c78 <bt_gatt_attr_read_chrc+0x34>

00029ca6 <db_hash_process>:
{
   29ca6:	b508      	push	{r3, lr}
	db_hash_gen(true);
   29ca8:	2001      	movs	r0, #1
   29caa:	f7f1 fbfb 	bl	1b4a4 <db_hash_gen>
}
   29cae:	bd08      	pop	{r3, pc}

00029cb0 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   29cb0:	f012 0f01 	tst.w	r2, #1
   29cb4:	d005      	beq.n	29cc2 <bt_gatt_check_perm+0x12>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29cb6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   29cb8:	f013 0f15 	tst.w	r3, #21
   29cbc:	d01a      	beq.n	29cf4 <bt_gatt_check_perm+0x44>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   29cbe:	684b      	ldr	r3, [r1, #4]
   29cc0:	b1d3      	cbz	r3, 29cf8 <bt_gatt_check_perm+0x48>
	if ((mask & BT_GATT_PERM_WRITE) &&
   29cc2:	f012 0f02 	tst.w	r2, #2
   29cc6:	d005      	beq.n	29cd4 <bt_gatt_check_perm+0x24>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29cc8:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
   29cca:	f013 0f2a 	tst.w	r3, #42	; 0x2a
   29cce:	d015      	beq.n	29cfc <bt_gatt_check_perm+0x4c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   29cd0:	688b      	ldr	r3, [r1, #8]
   29cd2:	b1ab      	cbz	r3, 29d00 <bt_gatt_check_perm+0x50>
{
   29cd4:	b510      	push	{r4, lr}
	mask &= attr->perm;
   29cd6:	7c8c      	ldrb	r4, [r1, #18]
   29cd8:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   29cda:	f014 0f30 	tst.w	r4, #48	; 0x30
   29cde:	d103      	bne.n	29ce8 <bt_gatt_check_perm+0x38>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   29ce0:	f014 000c 	ands.w	r0, r4, #12
   29ce4:	d10e      	bne.n	29d04 <bt_gatt_check_perm+0x54>
}
   29ce6:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   29ce8:	f7fe fba0 	bl	2842c <bt_conn_get_security>
   29cec:	2802      	cmp	r0, #2
   29cee:	d8f7      	bhi.n	29ce0 <bt_gatt_check_perm+0x30>
			return BT_ATT_ERR_AUTHENTICATION;
   29cf0:	2005      	movs	r0, #5
   29cf2:	e7f8      	b.n	29ce6 <bt_gatt_check_perm+0x36>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   29cf4:	2002      	movs	r0, #2
   29cf6:	4770      	bx	lr
   29cf8:	2002      	movs	r0, #2
   29cfa:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   29cfc:	2003      	movs	r0, #3
   29cfe:	4770      	bx	lr
   29d00:	2003      	movs	r0, #3
}
   29d02:	4770      	bx	lr
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   29d04:	200f      	movs	r0, #15
   29d06:	e7ee      	b.n	29ce6 <bt_gatt_check_perm+0x36>

00029d08 <bt_gatt_cancel>:
{
   29d08:	b508      	push	{r3, lr}
	bt_att_req_cancel(conn, params);
   29d0a:	f7ff fb73 	bl	293f4 <bt_att_req_cancel>
}
   29d0e:	bd08      	pop	{r3, pc}

00029d10 <bt_gatt_unsubscribe>:
{
   29d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   29d14:	7a83      	ldrb	r3, [r0, #10]
   29d16:	2b07      	cmp	r3, #7
   29d18:	d174      	bne.n	29e04 <bt_gatt_unsubscribe+0xf4>
   29d1a:	4607      	mov	r7, r0
   29d1c:	460d      	mov	r5, r1
	sub = gatt_sub_find(conn);
   29d1e:	f7f1 f901 	bl	1af24 <gatt_sub_find>
	if (!sub) {
   29d22:	4680      	mov	r8, r0
   29d24:	2800      	cmp	r0, #0
   29d26:	d070      	beq.n	29e0a <bt_gatt_unsubscribe+0xfa>
	return list->head;
   29d28:	6883      	ldr	r3, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   29d2a:	b393      	cbz	r3, 29d92 <bt_gatt_unsubscribe+0x82>
   29d2c:	3b14      	subs	r3, #20
   29d2e:	d035      	beq.n	29d9c <bt_gatt_unsubscribe+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29d30:	f113 0414 	adds.w	r4, r3, #20
   29d34:	d02e      	beq.n	29d94 <bt_gatt_unsubscribe+0x84>
	return node->next;
   29d36:	695c      	ldr	r4, [r3, #20]
   29d38:	b364      	cbz	r4, 29d94 <bt_gatt_unsubscribe+0x84>
   29d3a:	3c14      	subs	r4, #20
   29d3c:	e02a      	b.n	29d94 <bt_gatt_unsubscribe+0x84>
			sys_slist_remove(&sub->list, prev, &tmp->node);
   29d3e:	f103 0214 	add.w	r2, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   29d42:	b18e      	cbz	r6, 29d68 <bt_gatt_unsubscribe+0x58>
	return node->next;
   29d44:	6959      	ldr	r1, [r3, #20]
	parent->next = child;
   29d46:	6031      	str	r1, [r6, #0]
	return list->tail;
   29d48:	f8d8 100c 	ldr.w	r1, [r8, #12]
Z_GENLIST_REMOVE(slist, snode)
   29d4c:	428a      	cmp	r2, r1
   29d4e:	d015      	beq.n	29d7c <bt_gatt_unsubscribe+0x6c>
	parent->next = child;
   29d50:	2200      	movs	r2, #0
   29d52:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29d54:	f3bf 8f5b 	dmb	ish
   29d58:	692b      	ldr	r3, [r5, #16]
   29d5a:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(params->flags,
   29d5e:	f013 0f04 	tst.w	r3, #4
   29d62:	d10e      	bne.n	29d82 <bt_gatt_unsubscribe+0x72>
			found = true;
   29d64:	2101      	movs	r1, #1
			continue;
   29d66:	e027      	b.n	29db8 <bt_gatt_unsubscribe+0xa8>
	return node->next;
   29d68:	6959      	ldr	r1, [r3, #20]
	list->head = node;
   29d6a:	f8c8 1008 	str.w	r1, [r8, #8]
	return list->tail;
   29d6e:	f8d8 000c 	ldr.w	r0, [r8, #12]
Z_GENLIST_REMOVE(slist, snode)
   29d72:	4282      	cmp	r2, r0
   29d74:	d1ec      	bne.n	29d50 <bt_gatt_unsubscribe+0x40>
	list->tail = node;
   29d76:	f8c8 100c 	str.w	r1, [r8, #12]
}
   29d7a:	e7e9      	b.n	29d50 <bt_gatt_unsubscribe+0x40>
	list->tail = node;
   29d7c:	f8c8 600c 	str.w	r6, [r8, #12]
}
   29d80:	e7e6      	b.n	29d50 <bt_gatt_unsubscribe+0x40>
				bt_gatt_cancel(conn, params);
   29d82:	4629      	mov	r1, r5
   29d84:	4638      	mov	r0, r7
   29d86:	f7ff ffbf 	bl	29d08 <bt_gatt_cancel>
   29d8a:	e7eb      	b.n	29d64 <bt_gatt_unsubscribe+0x54>
			has_subscription = true;
   29d8c:	f04f 0901 	mov.w	r9, #1
   29d90:	e012      	b.n	29db8 <bt_gatt_unsubscribe+0xa8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   29d92:	461c      	mov	r4, r3
   29d94:	2600      	movs	r6, #0
   29d96:	4631      	mov	r1, r6
   29d98:	46b1      	mov	r9, r6
   29d9a:	e004      	b.n	29da6 <bt_gatt_unsubscribe+0x96>
   29d9c:	461c      	mov	r4, r3
   29d9e:	e7f9      	b.n	29d94 <bt_gatt_unsubscribe+0x84>
   29da0:	4622      	mov	r2, r4
   29da2:	4623      	mov	r3, r4
   29da4:	4614      	mov	r4, r2
   29da6:	b18b      	cbz	r3, 29dcc <bt_gatt_unsubscribe+0xbc>
		if (params == tmp) {
   29da8:	42ab      	cmp	r3, r5
   29daa:	d0c8      	beq.n	29d3e <bt_gatt_unsubscribe+0x2e>
			prev = &tmp->node;
   29dac:	f103 0614 	add.w	r6, r3, #20
		if (tmp->value_handle == params->value_handle) {
   29db0:	891a      	ldrh	r2, [r3, #8]
   29db2:	892b      	ldrh	r3, [r5, #8]
   29db4:	429a      	cmp	r2, r3
   29db6:	d0e9      	beq.n	29d8c <bt_gatt_unsubscribe+0x7c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   29db8:	2c00      	cmp	r4, #0
   29dba:	d0f1      	beq.n	29da0 <bt_gatt_unsubscribe+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29dbc:	f114 0214 	adds.w	r2, r4, #20
   29dc0:	d0ef      	beq.n	29da2 <bt_gatt_unsubscribe+0x92>
	return node->next;
   29dc2:	6962      	ldr	r2, [r4, #20]
   29dc4:	2a00      	cmp	r2, #0
   29dc6:	d0ec      	beq.n	29da2 <bt_gatt_unsubscribe+0x92>
   29dc8:	3a14      	subs	r2, #20
   29dca:	e7ea      	b.n	29da2 <bt_gatt_unsubscribe+0x92>
	if (!found) {
   29dcc:	b301      	cbz	r1, 29e10 <bt_gatt_unsubscribe+0x100>
	if (gatt_sub_is_empty(sub)) {
   29dce:	4640      	mov	r0, r8
   29dd0:	f7ff fbd2 	bl	29578 <gatt_sub_is_empty>
   29dd4:	b958      	cbnz	r0, 29dee <bt_gatt_unsubscribe+0xde>
	if (has_subscription) {
   29dd6:	f1b9 0f00 	cmp.w	r9, #0
   29dda:	d00c      	beq.n	29df6 <bt_gatt_unsubscribe+0xe6>
		params->notify(conn, params, NULL, 0);
   29ddc:	682c      	ldr	r4, [r5, #0]
   29dde:	2300      	movs	r3, #0
   29de0:	461a      	mov	r2, r3
   29de2:	4629      	mov	r1, r5
   29de4:	4638      	mov	r0, r7
   29de6:	47a0      	blx	r4
		return 0;
   29de8:	2000      	movs	r0, #0
}
   29dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		gatt_sub_free(sub);
   29dee:	4640      	mov	r0, r8
   29df0:	f7ff fc8a 	bl	29708 <gatt_sub_free>
   29df4:	e7ef      	b.n	29dd6 <bt_gatt_unsubscribe+0xc6>
	params->value = 0x0000;
   29df6:	2300      	movs	r3, #0
   29df8:	81ab      	strh	r3, [r5, #12]
	return gatt_write_ccc(conn, params);
   29dfa:	4629      	mov	r1, r5
   29dfc:	4638      	mov	r0, r7
   29dfe:	f7f1 fa91 	bl	1b324 <gatt_write_ccc>
   29e02:	e7f2      	b.n	29dea <bt_gatt_unsubscribe+0xda>
		return -ENOTCONN;
   29e04:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29e08:	e7ef      	b.n	29dea <bt_gatt_unsubscribe+0xda>
		return -EINVAL;
   29e0a:	f06f 0015 	mvn.w	r0, #21
   29e0e:	e7ec      	b.n	29dea <bt_gatt_unsubscribe+0xda>
		return -EINVAL;
   29e10:	f06f 0015 	mvn.w	r0, #21
   29e14:	e7e9      	b.n	29dea <bt_gatt_unsubscribe+0xda>

00029e16 <bt_gatt_notification>:
{
   29e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29e1a:	4680      	mov	r8, r0
   29e1c:	460f      	mov	r7, r1
   29e1e:	4691      	mov	r9, r2
   29e20:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   29e22:	f7f1 f87f 	bl	1af24 <gatt_sub_find>
	if (!sub) {
   29e26:	b350      	cbz	r0, 29e7e <bt_gatt_notification+0x68>
	return list->head;
   29e28:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29e2a:	b145      	cbz	r5, 29e3e <bt_gatt_notification+0x28>
   29e2c:	3d14      	subs	r5, #20
   29e2e:	d008      	beq.n	29e42 <bt_gatt_notification+0x2c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29e30:	f115 0414 	adds.w	r4, r5, #20
   29e34:	d014      	beq.n	29e60 <bt_gatt_notification+0x4a>
	return node->next;
   29e36:	696c      	ldr	r4, [r5, #20]
   29e38:	b194      	cbz	r4, 29e60 <bt_gatt_notification+0x4a>
   29e3a:	3c14      	subs	r4, #20
   29e3c:	e010      	b.n	29e60 <bt_gatt_notification+0x4a>
   29e3e:	462c      	mov	r4, r5
   29e40:	e00e      	b.n	29e60 <bt_gatt_notification+0x4a>
   29e42:	462c      	mov	r4, r5
   29e44:	e00c      	b.n	29e60 <bt_gatt_notification+0x4a>
			bt_gatt_unsubscribe(conn, params);
   29e46:	4629      	mov	r1, r5
   29e48:	4640      	mov	r0, r8
   29e4a:	f7ff ff61 	bl	29d10 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29e4e:	b1a4      	cbz	r4, 29e7a <bt_gatt_notification+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29e50:	f114 0614 	adds.w	r6, r4, #20
   29e54:	d002      	beq.n	29e5c <bt_gatt_notification+0x46>
	return node->next;
   29e56:	6966      	ldr	r6, [r4, #20]
   29e58:	b106      	cbz	r6, 29e5c <bt_gatt_notification+0x46>
   29e5a:	3e14      	subs	r6, #20
   29e5c:	4625      	mov	r5, r4
   29e5e:	4634      	mov	r4, r6
   29e60:	b16d      	cbz	r5, 29e7e <bt_gatt_notification+0x68>
		if (handle != params->value_handle) {
   29e62:	892b      	ldrh	r3, [r5, #8]
   29e64:	429f      	cmp	r7, r3
   29e66:	d1f2      	bne.n	29e4e <bt_gatt_notification+0x38>
		if (params->notify(conn, params, data, length) ==
   29e68:	682e      	ldr	r6, [r5, #0]
   29e6a:	4653      	mov	r3, sl
   29e6c:	464a      	mov	r2, r9
   29e6e:	4629      	mov	r1, r5
   29e70:	4640      	mov	r0, r8
   29e72:	47b0      	blx	r6
   29e74:	2800      	cmp	r0, #0
   29e76:	d1ea      	bne.n	29e4e <bt_gatt_notification+0x38>
   29e78:	e7e5      	b.n	29e46 <bt_gatt_notification+0x30>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   29e7a:	4626      	mov	r6, r4
   29e7c:	e7ee      	b.n	29e5c <bt_gatt_notification+0x46>
}
   29e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029e82 <bt_gatt_change_aware>:
{
   29e82:	b510      	push	{r4, lr}
   29e84:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   29e86:	f7f0 ffff 	bl	1ae88 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   29e8a:	2800      	cmp	r0, #0
   29e8c:	d042      	beq.n	29f14 <bt_gatt_change_aware+0x92>
   29e8e:	7a02      	ldrb	r2, [r0, #8]
   29e90:	f012 0f01 	tst.w	r2, #1
   29e94:	d101      	bne.n	29e9a <bt_gatt_change_aware+0x18>
		return true;
   29e96:	2001      	movs	r0, #1
}
   29e98:	bd10      	pop	{r4, pc}
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   29e9a:	f100 010c 	add.w	r1, r0, #12
   29e9e:	f3bf 8f5b 	dmb	ish
   29ea2:	68c2      	ldr	r2, [r0, #12]
   29ea4:	f3bf 8f5b 	dmb	ish
   29ea8:	f012 0f01 	tst.w	r2, #1
   29eac:	d134      	bne.n	29f18 <bt_gatt_change_aware+0x96>
	if (!req) {
   29eae:	b90c      	cbnz	r4, 29eb4 <bt_gatt_change_aware+0x32>
		return false;
   29eb0:	4620      	mov	r0, r4
   29eb2:	e7f1      	b.n	29e98 <bt_gatt_change_aware+0x16>
   29eb4:	f3bf 8f5b 	dmb	ish
   29eb8:	68c3      	ldr	r3, [r0, #12]
   29eba:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   29ebe:	f013 0f02 	tst.w	r3, #2
   29ec2:	d10d      	bne.n	29ee0 <bt_gatt_change_aware+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29ec4:	f3bf 8f5b 	dmb	ish
   29ec8:	e851 3f00 	ldrex	r3, [r1]
   29ecc:	f043 0302 	orr.w	r3, r3, #2
   29ed0:	e841 3200 	strex	r2, r3, [r1]
   29ed4:	2a00      	cmp	r2, #0
   29ed6:	d1f7      	bne.n	29ec8 <bt_gatt_change_aware+0x46>
   29ed8:	f3bf 8f5b 	dmb	ish
	return false;
   29edc:	2000      	movs	r0, #0
   29ede:	e7db      	b.n	29e98 <bt_gatt_change_aware+0x16>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29ee0:	f3bf 8f5b 	dmb	ish
   29ee4:	e851 3f00 	ldrex	r3, [r1]
   29ee8:	f023 0302 	bic.w	r3, r3, #2
   29eec:	e841 3200 	strex	r2, r3, [r1]
   29ef0:	2a00      	cmp	r2, #0
   29ef2:	d1f7      	bne.n	29ee4 <bt_gatt_change_aware+0x62>
   29ef4:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29ef8:	f3bf 8f5b 	dmb	ish
   29efc:	e851 3f00 	ldrex	r3, [r1]
   29f00:	f043 0301 	orr.w	r3, r3, #1
   29f04:	e841 3200 	strex	r2, r3, [r1]
   29f08:	2a00      	cmp	r2, #0
   29f0a:	d1f7      	bne.n	29efc <bt_gatt_change_aware+0x7a>
   29f0c:	f3bf 8f5b 	dmb	ish
		return true;
   29f10:	4620      	mov	r0, r4
   29f12:	e7c1      	b.n	29e98 <bt_gatt_change_aware+0x16>
		return true;
   29f14:	2001      	movs	r0, #1
   29f16:	e7bf      	b.n	29e98 <bt_gatt_change_aware+0x16>
		return true;
   29f18:	2001      	movs	r0, #1
   29f1a:	e7bd      	b.n	29e98 <bt_gatt_change_aware+0x16>

00029f1c <bt_smp_recv>:
{
   29f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f1e:	b083      	sub	sp, #12
	struct bt_conn *conn = chan->conn;
   29f20:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   29f22:	f04f 32ff 	mov.w	r2, #4294967295
   29f26:	f04f 33ff 	mov.w	r3, #4294967295
   29f2a:	2100      	movs	r1, #0
   29f2c:	4608      	mov	r0, r1
   29f2e:	f7fe fbb0 	bl	28692 <bt_l2cap_create_pdu_timeout>
   29f32:	4604      	mov	r4, r0
	return net_buf_simple_add(&buf->b, len);
   29f34:	f100 0608 	add.w	r6, r0, #8
   29f38:	2101      	movs	r1, #1
   29f3a:	4630      	mov	r0, r6
   29f3c:	f000 f966 	bl	2a20c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   29f40:	2505      	movs	r5, #5
   29f42:	7005      	strb	r5, [r0, #0]
   29f44:	2101      	movs	r1, #1
   29f46:	4630      	mov	r0, r6
   29f48:	f000 f960 	bl	2a20c <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   29f4c:	7005      	strb	r5, [r0, #0]
   29f4e:	2300      	movs	r3, #0
   29f50:	9300      	str	r3, [sp, #0]
   29f52:	4622      	mov	r2, r4
   29f54:	2106      	movs	r1, #6
   29f56:	4638      	mov	r0, r7
   29f58:	f7fe fba0 	bl	2869c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   29f5c:	b910      	cbnz	r0, 29f64 <bt_smp_recv+0x48>
}
   29f5e:	2000      	movs	r0, #0
   29f60:	b003      	add	sp, #12
   29f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   29f64:	4620      	mov	r0, r4
   29f66:	f000 f907 	bl	2a178 <net_buf_unref>
   29f6a:	e7f8      	b.n	29f5e <bt_smp_recv+0x42>

00029f6c <bt_smp_sign>:
}
   29f6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   29f70:	4770      	bx	lr

00029f72 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   29f72:	2000      	movs	r0, #0
   29f74:	4770      	bx	lr

00029f76 <fixed_data_unref>:
}

static void fixed_data_unref(struct net_buf *buf, uint8_t *data)
{
	/* Nothing needed for fixed-size data pools */
}
   29f76:	4770      	bx	lr

00029f78 <data_alloc>:
};

#endif /* CONFIG_HEAP_MEM_POOL_SIZE > 0 */

static uint8_t *data_alloc(struct net_buf *buf, size_t *size, k_timeout_t timeout)
{
   29f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29f7c:	4604      	mov	r4, r0
   29f7e:	460d      	mov	r5, r1
   29f80:	4617      	mov	r7, r2
   29f82:	461e      	mov	r6, r3
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29f84:	7980      	ldrb	r0, [r0, #6]
   29f86:	f7f1 ff17 	bl	1bdb8 <net_buf_pool_get>

	return pool->alloc->cb->alloc(buf, size, timeout);
   29f8a:	6a03      	ldr	r3, [r0, #32]
   29f8c:	681b      	ldr	r3, [r3, #0]
   29f8e:	f8d3 8000 	ldr.w	r8, [r3]
   29f92:	463a      	mov	r2, r7
   29f94:	4633      	mov	r3, r6
   29f96:	4629      	mov	r1, r5
   29f98:	4620      	mov	r0, r4
   29f9a:	47c0      	blx	r8
}
   29f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029fa0 <data_unref>:

	return pool->alloc->cb->ref(buf, data);
}

static void data_unref(struct net_buf *buf, uint8_t *data)
{
   29fa0:	b538      	push	{r3, r4, r5, lr}
   29fa2:	4604      	mov	r4, r0
   29fa4:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29fa6:	7980      	ldrb	r0, [r0, #6]
   29fa8:	f7f1 ff06 	bl	1bdb8 <net_buf_pool_get>

	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   29fac:	7963      	ldrb	r3, [r4, #5]
   29fae:	f013 0f02 	tst.w	r3, #2
   29fb2:	d105      	bne.n	29fc0 <data_unref+0x20>
		return;
	}

	pool->alloc->cb->unref(buf, data);
   29fb4:	6a03      	ldr	r3, [r0, #32]
   29fb6:	681b      	ldr	r3, [r3, #0]
   29fb8:	689b      	ldr	r3, [r3, #8]
   29fba:	4629      	mov	r1, r5
   29fbc:	4620      	mov	r0, r4
   29fbe:	4798      	blx	r3
}
   29fc0:	bd38      	pop	{r3, r4, r5, pc}

00029fc2 <fixed_data_alloc>:
{
   29fc2:	b570      	push	{r4, r5, r6, lr}
   29fc4:	4604      	mov	r4, r0
   29fc6:	460d      	mov	r5, r1
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   29fc8:	7980      	ldrb	r0, [r0, #6]
   29fca:	f7f1 fef5 	bl	1bdb8 <net_buf_pool_get>
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   29fce:	6a03      	ldr	r3, [r0, #32]
   29fd0:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   29fd2:	682a      	ldr	r2, [r5, #0]
   29fd4:	6819      	ldr	r1, [r3, #0]
   29fd6:	428a      	cmp	r2, r1
   29fd8:	bf28      	it	cs
   29fda:	460a      	movcs	r2, r1
   29fdc:	602a      	str	r2, [r5, #0]
	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   29fde:	685d      	ldr	r5, [r3, #4]
   29fe0:	681e      	ldr	r6, [r3, #0]
   29fe2:	4620      	mov	r0, r4
   29fe4:	f7f1 fef0 	bl	1bdc8 <net_buf_id>
}
   29fe8:	fb00 5006 	mla	r0, r0, r6, r5
   29fec:	bd70      	pop	{r4, r5, r6, pc}

00029fee <net_buf_reset>:
	buf->len  = 0U;
   29fee:	2300      	movs	r3, #0
   29ff0:	8183      	strh	r3, [r0, #12]
	buf->data = buf->__buf;
   29ff2:	6903      	ldr	r3, [r0, #16]
   29ff4:	6083      	str	r3, [r0, #8]
}
   29ff6:	4770      	bx	lr

00029ff8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   29ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ffc:	b083      	sub	sp, #12
   29ffe:	4605      	mov	r5, r0
   2a000:	9101      	str	r1, [sp, #4]
   2a002:	4616      	mov	r6, r2
   2a004:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2a006:	4610      	mov	r0, r2
   2a008:	4619      	mov	r1, r3
   2a00a:	f002 f847 	bl	2c09c <sys_clock_timeout_end_calc>
   2a00e:	4682      	mov	sl, r0
   2a010:	9100      	str	r1, [sp, #0]
   2a012:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a016:	f3ef 8b11 	mrs	fp, BASEPRI
   2a01a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a01e:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2a022:	8b6b      	ldrh	r3, [r5, #26]
   2a024:	2b00      	cmp	r3, #0
   2a026:	d03f      	beq.n	2a0a8 <net_buf_alloc_len+0xb0>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2a028:	8b2a      	ldrh	r2, [r5, #24]
   2a02a:	4293      	cmp	r3, r2
   2a02c:	d32f      	bcc.n	2a08e <net_buf_alloc_len+0x96>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   2a02e:	8b6a      	ldrh	r2, [r5, #26]
   2a030:	1e53      	subs	r3, r2, #1
   2a032:	836b      	strh	r3, [r5, #26]
	__asm__ volatile(
   2a034:	f38b 8811 	msr	BASEPRI, fp
   2a038:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   2a03c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   2a03e:	8b2b      	ldrh	r3, [r5, #24]
   2a040:	1a9b      	subs	r3, r3, r2
   2a042:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a046:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	buf->pool_id = pool_id(pool);
   2a04a:	4628      	mov	r0, r5
   2a04c:	f7f1 fea8 	bl	1bda0 <pool_id>
   2a050:	71a0      	strb	r0, [r4, #6]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2a052:	9b01      	ldr	r3, [sp, #4]
   2a054:	2b00      	cmp	r3, #0
   2a056:	d046      	beq.n	2a0e6 <net_buf_alloc_len+0xee>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2a058:	ea56 0307 	orrs.w	r3, r6, r7
   2a05c:	d005      	beq.n	2a06a <net_buf_alloc_len+0x72>
   2a05e:	f1b7 3fff 	cmp.w	r7, #4294967295
   2a062:	bf08      	it	eq
   2a064:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2a068:	d12b      	bne.n	2a0c2 <net_buf_alloc_len+0xca>
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   2a06a:	4632      	mov	r2, r6
   2a06c:	463b      	mov	r3, r7
   2a06e:	a901      	add	r1, sp, #4
   2a070:	4620      	mov	r0, r4
   2a072:	f7ff ff81 	bl	29f78 <data_alloc>
   2a076:	4605      	mov	r5, r0
   2a078:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   2a07a:	2800      	cmp	r0, #0
   2a07c:	d135      	bne.n	2a0ea <net_buf_alloc_len+0xf2>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2a07e:	79a0      	ldrb	r0, [r4, #6]
   2a080:	f7f1 fe9a 	bl	1bdb8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2a084:	4621      	mov	r1, r4
   2a086:	f001 fc5f 	bl	2b948 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   2a08a:	462c      	mov	r4, r5
}
   2a08c:	e037      	b.n	2a0fe <net_buf_alloc_len+0x106>
	return z_impl_k_queue_get(queue, timeout);
   2a08e:	2200      	movs	r2, #0
   2a090:	2300      	movs	r3, #0
   2a092:	4628      	mov	r0, r5
   2a094:	f7f7 fdb8 	bl	21c08 <z_impl_k_queue_get>
			if (buf) {
   2a098:	4604      	mov	r4, r0
   2a09a:	2800      	cmp	r0, #0
   2a09c:	d0c7      	beq.n	2a02e <net_buf_alloc_len+0x36>
   2a09e:	f38b 8811 	msr	BASEPRI, fp
   2a0a2:	f3bf 8f6f 	isb	sy
				goto success;
   2a0a6:	e7d4      	b.n	2a052 <net_buf_alloc_len+0x5a>
   2a0a8:	f38b 8811 	msr	BASEPRI, fp
   2a0ac:	f3bf 8f6f 	isb	sy
   2a0b0:	4632      	mov	r2, r6
   2a0b2:	463b      	mov	r3, r7
   2a0b4:	4628      	mov	r0, r5
   2a0b6:	f7f7 fda7 	bl	21c08 <z_impl_k_queue_get>
	if (!buf) {
   2a0ba:	4604      	mov	r4, r0
   2a0bc:	2800      	cmp	r0, #0
   2a0be:	d1c8      	bne.n	2a052 <net_buf_alloc_len+0x5a>
   2a0c0:	e01d      	b.n	2a0fe <net_buf_alloc_len+0x106>
			int64_t remaining = end - sys_clock_tick_get();
   2a0c2:	f7f8 fd79 	bl	22bb8 <sys_clock_tick_get>
   2a0c6:	ebba 0800 	subs.w	r8, sl, r0
   2a0ca:	9b00      	ldr	r3, [sp, #0]
   2a0cc:	eb63 0901 	sbc.w	r9, r3, r1
			if (remaining <= 0) {
   2a0d0:	f1b8 0f01 	cmp.w	r8, #1
   2a0d4:	f179 0300 	sbcs.w	r3, r9, #0
   2a0d8:	db02      	blt.n	2a0e0 <net_buf_alloc_len+0xe8>
				timeout = Z_TIMEOUT_TICKS(remaining);
   2a0da:	4646      	mov	r6, r8
   2a0dc:	464f      	mov	r7, r9
   2a0de:	e7c4      	b.n	2a06a <net_buf_alloc_len+0x72>
				timeout = K_NO_WAIT;
   2a0e0:	2600      	movs	r6, #0
   2a0e2:	2700      	movs	r7, #0
   2a0e4:	e7c1      	b.n	2a06a <net_buf_alloc_len+0x72>

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
#endif
	} else {
		buf->__buf = NULL;
   2a0e6:	2300      	movs	r3, #0
   2a0e8:	6123      	str	r3, [r4, #16]
	}

	buf->ref   = 1U;
   2a0ea:	2301      	movs	r3, #1
   2a0ec:	7123      	strb	r3, [r4, #4]
	buf->flags = 0U;
   2a0ee:	2300      	movs	r3, #0
   2a0f0:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   2a0f2:	6023      	str	r3, [r4, #0]
	buf->size  = size;
   2a0f4:	9b01      	ldr	r3, [sp, #4]
   2a0f6:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   2a0f8:	4620      	mov	r0, r4
   2a0fa:	f7ff ff78 	bl	29fee <net_buf_reset>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   2a0fe:	4620      	mov	r0, r4
   2a100:	b003      	add	sp, #12
   2a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a106 <net_buf_alloc_fixed>:
				       line);
}
#else
struct net_buf *net_buf_alloc_fixed(struct net_buf_pool *pool,
				    k_timeout_t timeout)
{
   2a106:	b508      	push	{r3, lr}
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a108:	6a01      	ldr	r1, [r0, #32]
   2a10a:	6849      	ldr	r1, [r1, #4]

	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a10c:	6809      	ldr	r1, [r1, #0]
   2a10e:	f7ff ff73 	bl	29ff8 <net_buf_alloc_len>
}
   2a112:	bd08      	pop	{r3, pc}

0002a114 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   2a114:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
   2a116:	4605      	mov	r5, r0
   2a118:	f7f7 fd76 	bl	21c08 <z_impl_k_queue_get>
	if (!buf) {
   2a11c:	4606      	mov	r6, r0
   2a11e:	b190      	cbz	r0, 2a146 <net_buf_get+0x32>
	}

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a120:	4604      	mov	r4, r0
   2a122:	e00a      	b.n	2a13a <net_buf_get+0x26>
   2a124:	2200      	movs	r2, #0
   2a126:	2300      	movs	r3, #0
   2a128:	4628      	mov	r0, r5
   2a12a:	f7f7 fd6d 	bl	21c08 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2a12e:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   2a130:	7963      	ldrb	r3, [r4, #5]
   2a132:	f023 0301 	bic.w	r3, r3, #1
   2a136:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a138:	4604      	mov	r4, r0
   2a13a:	7963      	ldrb	r3, [r4, #5]
   2a13c:	f013 0f01 	tst.w	r3, #1
   2a140:	d1f0      	bne.n	2a124 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   2a142:	2300      	movs	r3, #0
   2a144:	6023      	str	r3, [r4, #0]

	return buf;
}
   2a146:	4630      	mov	r0, r6
   2a148:	bd70      	pop	{r4, r5, r6, pc}

0002a14a <net_buf_simple_init_with_data>:

void net_buf_simple_init_with_data(struct net_buf_simple *buf,
				   void *data, size_t size)
{
	buf->__buf = data;
   2a14a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2a14c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2a14e:	b292      	uxth	r2, r2
   2a150:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2a152:	8082      	strh	r2, [r0, #4]
}
   2a154:	4770      	bx	lr

0002a156 <net_buf_simple_reserve>:
{
	__ASSERT_NO_MSG(buf);
	__ASSERT_NO_MSG(buf->len == 0U);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   2a156:	6883      	ldr	r3, [r0, #8]
   2a158:	440b      	add	r3, r1
   2a15a:	6003      	str	r3, [r0, #0]
}
   2a15c:	4770      	bx	lr

0002a15e <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   2a15e:	b510      	push	{r4, lr}
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
	__ASSERT_NO_MSG(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   2a160:	460a      	mov	r2, r1
   2a162:	6814      	ldr	r4, [r2, #0]
   2a164:	b12c      	cbz	r4, 2a172 <net_buf_put+0x14>
		tail->flags |= NET_BUF_FRAGS;
   2a166:	7953      	ldrb	r3, [r2, #5]
   2a168:	f043 0301 	orr.w	r3, r3, #1
   2a16c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   2a16e:	4622      	mov	r2, r4
   2a170:	e7f7      	b.n	2a162 <net_buf_put+0x4>
	}

	k_fifo_put_list(fifo, buf, tail);
   2a172:	f001 fbf4 	bl	2b95e <k_queue_append_list>
}
   2a176:	bd10      	pop	{r4, pc}

0002a178 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2a178:	b538      	push	{r3, r4, r5, lr}
   2a17a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	while (buf) {
   2a17c:	e00f      	b.n	2a19e <net_buf_unref+0x26>
		if (--buf->ref > 0) {
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
   2a17e:	4620      	mov	r0, r4
   2a180:	f7ff ff0e 	bl	29fa0 <data_unref>
			buf->__buf = NULL;
   2a184:	2300      	movs	r3, #0
   2a186:	6123      	str	r3, [r4, #16]
		}

		buf->data = NULL;
   2a188:	2300      	movs	r3, #0
   2a18a:	60a3      	str	r3, [r4, #8]
		buf->frags = NULL;
   2a18c:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   2a18e:	79a0      	ldrb	r0, [r4, #6]
   2a190:	f7f1 fe12 	bl	1bdb8 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2a194:	69c3      	ldr	r3, [r0, #28]
   2a196:	b16b      	cbz	r3, 2a1b4 <net_buf_unref+0x3c>
			pool->destroy(buf);
   2a198:	4620      	mov	r0, r4
   2a19a:	4798      	blx	r3
{
   2a19c:	462c      	mov	r4, r5
	while (buf) {
   2a19e:	b184      	cbz	r4, 2a1c2 <net_buf_unref+0x4a>
		struct net_buf *frags = buf->frags;
   2a1a0:	6825      	ldr	r5, [r4, #0]
		if (--buf->ref > 0) {
   2a1a2:	7923      	ldrb	r3, [r4, #4]
   2a1a4:	3b01      	subs	r3, #1
   2a1a6:	b2db      	uxtb	r3, r3
   2a1a8:	7123      	strb	r3, [r4, #4]
   2a1aa:	b953      	cbnz	r3, 2a1c2 <net_buf_unref+0x4a>
		if (buf->__buf) {
   2a1ac:	6921      	ldr	r1, [r4, #16]
   2a1ae:	2900      	cmp	r1, #0
   2a1b0:	d1e5      	bne.n	2a17e <net_buf_unref+0x6>
   2a1b2:	e7e9      	b.n	2a188 <net_buf_unref+0x10>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   2a1b4:	79a0      	ldrb	r0, [r4, #6]
   2a1b6:	f7f1 fdff 	bl	1bdb8 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   2a1ba:	4621      	mov	r1, r4
   2a1bc:	f001 fbc4 	bl	2b948 <k_queue_prepend>
}
   2a1c0:	e7ec      	b.n	2a19c <net_buf_unref+0x24>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2a1c2:	bd38      	pop	{r3, r4, r5, pc}

0002a1c4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2a1c4:	7902      	ldrb	r2, [r0, #4]
   2a1c6:	3201      	adds	r2, #1
   2a1c8:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2a1ca:	4770      	bx	lr

0002a1cc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2a1cc:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2a1ce:	4618      	mov	r0, r3
   2a1d0:	681b      	ldr	r3, [r3, #0]
   2a1d2:	2b00      	cmp	r3, #0
   2a1d4:	d1fb      	bne.n	2a1ce <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2a1d6:	4770      	bx	lr

0002a1d8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2a1d8:	b570      	push	{r4, r5, r6, lr}
   2a1da:	4604      	mov	r4, r0
   2a1dc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2a1de:	6806      	ldr	r6, [r0, #0]
   2a1e0:	b11e      	cbz	r6, 2a1ea <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   2a1e2:	4608      	mov	r0, r1
   2a1e4:	f7ff fff2 	bl	2a1cc <net_buf_frag_last>
   2a1e8:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2a1ea:	6025      	str	r5, [r4, #0]
}
   2a1ec:	bd70      	pop	{r4, r5, r6, pc}

0002a1ee <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2a1ee:	b538      	push	{r3, r4, r5, lr}
   2a1f0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2a1f2:	b138      	cbz	r0, 2a204 <net_buf_frag_add+0x16>
   2a1f4:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2a1f6:	f7ff ffe9 	bl	2a1cc <net_buf_frag_last>
   2a1fa:	4629      	mov	r1, r5
   2a1fc:	f7ff ffec 	bl	2a1d8 <net_buf_frag_insert>

	return head;
   2a200:	4620      	mov	r0, r4
}
   2a202:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   2a204:	4608      	mov	r0, r1
   2a206:	f7ff ffdd 	bl	2a1c4 <net_buf_ref>
   2a20a:	e7fa      	b.n	2a202 <net_buf_frag_add+0x14>

0002a20c <net_buf_simple_add>:
	return buf->data + buf->len;
   2a20c:	6802      	ldr	r2, [r0, #0]
   2a20e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2a210:	4419      	add	r1, r3
   2a212:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2a214:	18d0      	adds	r0, r2, r3
   2a216:	4770      	bx	lr

0002a218 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2a218:	b538      	push	{r3, r4, r5, lr}
   2a21a:	460d      	mov	r5, r1
   2a21c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a21e:	4611      	mov	r1, r2
   2a220:	f7ff fff4 	bl	2a20c <net_buf_simple_add>
   2a224:	4622      	mov	r2, r4
   2a226:	4629      	mov	r1, r5
   2a228:	f7fd fd12 	bl	27c50 <memcpy>
}
   2a22c:	bd38      	pop	{r3, r4, r5, pc}

0002a22e <net_buf_simple_add_le16>:

	return u8;
}

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2a22e:	b510      	push	{r4, lr}
   2a230:	460c      	mov	r4, r1
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2a232:	2102      	movs	r1, #2
   2a234:	f7ff ffea 	bl	2a20c <net_buf_simple_add>
	dst[0] = val;
   2a238:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2a23a:	0a24      	lsrs	r4, r4, #8
   2a23c:	7044      	strb	r4, [r0, #1]
}
   2a23e:	bd10      	pop	{r4, pc}

0002a240 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2a240:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2a242:	6800      	ldr	r0, [r0, #0]
   2a244:	1a40      	subs	r0, r0, r1
   2a246:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2a248:	889a      	ldrh	r2, [r3, #4]
   2a24a:	4411      	add	r1, r2
   2a24c:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2a24e:	4770      	bx	lr

0002a250 <net_buf_simple_pull>:

	sys_put_be64(val, net_buf_simple_push(buf, sizeof(val)));
}

void *net_buf_simple_pull(struct net_buf_simple *buf, size_t len)
{
   2a250:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2a252:	8882      	ldrh	r2, [r0, #4]
   2a254:	1a52      	subs	r2, r2, r1
   2a256:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2a258:	6800      	ldr	r0, [r0, #0]
   2a25a:	4408      	add	r0, r1
   2a25c:	6018      	str	r0, [r3, #0]
}
   2a25e:	4770      	bx	lr

0002a260 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2a260:	4603      	mov	r3, r0
	void *data = buf->data;
   2a262:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2a264:	889a      	ldrh	r2, [r3, #4]
   2a266:	1a52      	subs	r2, r2, r1
   2a268:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2a26a:	4401      	add	r1, r0
   2a26c:	6019      	str	r1, [r3, #0]

	return data;
}
   2a26e:	4770      	bx	lr

0002a270 <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2a270:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2a272:	6803      	ldr	r3, [r0, #0]
   2a274:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2a276:	2101      	movs	r1, #1
   2a278:	f7ff ffea 	bl	2a250 <net_buf_simple_pull>

	return val;
}
   2a27c:	4620      	mov	r0, r4
   2a27e:	bd10      	pop	{r4, pc}

0002a280 <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2a280:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a282:	6803      	ldr	r3, [r0, #0]
   2a284:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a286:	2102      	movs	r1, #2
   2a288:	f7ff ffe2 	bl	2a250 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2a28c:	4620      	mov	r0, r4
   2a28e:	bd10      	pop	{r4, pc}

0002a290 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2a290:	6802      	ldr	r2, [r0, #0]
   2a292:	6880      	ldr	r0, [r0, #8]
}
   2a294:	1a10      	subs	r0, r2, r0
   2a296:	4770      	bx	lr

0002a298 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   2a298:	b538      	push	{r3, r4, r5, lr}
   2a29a:	4604      	mov	r4, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a29c:	88c5      	ldrh	r5, [r0, #6]
   2a29e:	f7ff fff7 	bl	2a290 <net_buf_simple_headroom>
   2a2a2:	1a2d      	subs	r5, r5, r0
   2a2a4:	88a0      	ldrh	r0, [r4, #4]
}
   2a2a6:	1a28      	subs	r0, r5, r0
   2a2a8:	bd38      	pop	{r3, r4, r5, pc}

0002a2aa <in_endpoint_ctx>:
{
   2a2aa:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   2a2ac:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   2a2b0:	f7f1 fd98 	bl	1bde4 <endpoint_ctx>
}
   2a2b4:	bd08      	pop	{r3, pc}

0002a2b6 <out_endpoint_ctx>:
{
   2a2b6:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   2a2b8:	f7f1 fd94 	bl	1bde4 <endpoint_ctx>
}
   2a2bc:	bd08      	pop	{r3, pc}

0002a2be <ep_ctx_reset>:
{
   2a2be:	b510      	push	{r4, lr}
   2a2c0:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   2a2c2:	6903      	ldr	r3, [r0, #16]
   2a2c4:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   2a2c6:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   2a2c8:	2300      	movs	r3, #0
   2a2ca:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   2a2cc:	7f83      	ldrb	r3, [r0, #30]
   2a2ce:	b933      	cbnz	r3, 2a2de <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   2a2d0:	2301      	movs	r3, #1
   2a2d2:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   2a2d4:	2300      	movs	r3, #0
   2a2d6:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   2a2d8:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   2a2da:	77e3      	strb	r3, [r4, #31]
}
   2a2dc:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a2de:	7a40      	ldrb	r0, [r0, #9]
   2a2e0:	f7f6 ff24 	bl	2112c <nrfx_usbd_ep_abort>
   2a2e4:	e7f4      	b.n	2a2d0 <ep_ctx_reset+0x12>

0002a2e6 <hfxo_stop>:
{
   2a2e6:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   2a2e8:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a2ec:	2200      	movs	r2, #0
   2a2ee:	f3bf 8f5b 	dmb	ish
   2a2f2:	e853 1f00 	ldrex	r1, [r3]
   2a2f6:	2901      	cmp	r1, #1
   2a2f8:	d103      	bne.n	2a302 <hfxo_stop+0x1c>
   2a2fa:	e843 2400 	strex	r4, r2, [r3]
   2a2fe:	2c00      	cmp	r4, #0
   2a300:	d1f7      	bne.n	2a2f2 <hfxo_stop+0xc>
   2a302:	f3bf 8f5b 	dmb	ish
   2a306:	d10d      	bne.n	2a324 <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2a308:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   2a30a:	f100 010c 	add.w	r1, r0, #12
   2a30e:	4620      	mov	r0, r4
   2a310:	f7fb fe35 	bl	25f7e <onoff_cancel>

	if (rv == -EALREADY) {
   2a314:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2a318:	d000      	beq.n	2a31c <hfxo_stop+0x36>
}
   2a31a:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   2a31c:	4620      	mov	r0, r4
   2a31e:	f7fb fe08 	bl	25f32 <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2a322:	e7fa      	b.n	2a31a <hfxo_stop+0x34>
	return 0;
   2a324:	2000      	movs	r0, #0
   2a326:	e7f8      	b.n	2a31a <hfxo_stop+0x34>

0002a328 <usbd_enable_endpoints>:
{
   2a328:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2a32a:	2400      	movs	r4, #0
   2a32c:	e003      	b.n	2a336 <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a32e:	7a40      	ldrb	r0, [r0, #9]
   2a330:	f7f6 fd56 	bl	20de0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2a334:	3401      	adds	r4, #1
   2a336:	2c07      	cmp	r4, #7
   2a338:	dc06      	bgt.n	2a348 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   2a33a:	b2e0      	uxtb	r0, r4
   2a33c:	f7ff ffb5 	bl	2a2aa <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2a340:	7a03      	ldrb	r3, [r0, #8]
   2a342:	2b00      	cmp	r3, #0
   2a344:	d0f6      	beq.n	2a334 <usbd_enable_endpoints+0xc>
   2a346:	e7f2      	b.n	2a32e <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   2a348:	2088      	movs	r0, #136	; 0x88
   2a34a:	f7ff ffae 	bl	2a2aa <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2a34e:	7a03      	ldrb	r3, [r0, #8]
   2a350:	b90b      	cbnz	r3, 2a356 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   2a352:	2400      	movs	r4, #0
   2a354:	e007      	b.n	2a366 <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a356:	7a40      	ldrb	r0, [r0, #9]
   2a358:	f7f6 fd42 	bl	20de0 <nrfx_usbd_ep_enable>
   2a35c:	e7f9      	b.n	2a352 <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a35e:	7a40      	ldrb	r0, [r0, #9]
   2a360:	f7f6 fd3e 	bl	20de0 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   2a364:	3401      	adds	r4, #1
   2a366:	2c07      	cmp	r4, #7
   2a368:	dc06      	bgt.n	2a378 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   2a36a:	b2e0      	uxtb	r0, r4
   2a36c:	f7ff ffa3 	bl	2a2b6 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2a370:	7a03      	ldrb	r3, [r0, #8]
   2a372:	2b00      	cmp	r3, #0
   2a374:	d0f6      	beq.n	2a364 <usbd_enable_endpoints+0x3c>
   2a376:	e7f2      	b.n	2a35e <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   2a378:	2008      	movs	r0, #8
   2a37a:	f7ff ff9c 	bl	2a2b6 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   2a37e:	7a03      	ldrb	r3, [r0, #8]
   2a380:	b903      	cbnz	r3, 2a384 <usbd_enable_endpoints+0x5c>
}
   2a382:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   2a384:	7a40      	ldrb	r0, [r0, #9]
   2a386:	f7f6 fd2b 	bl	20de0 <nrfx_usbd_ep_enable>
}
   2a38a:	e7fa      	b.n	2a382 <usbd_enable_endpoints+0x5a>

0002a38c <hfxo_start>:
{
   2a38c:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   2a38e:	f100 0320 	add.w	r3, r0, #32
   2a392:	2201      	movs	r2, #1
   2a394:	f3bf 8f5b 	dmb	ish
   2a398:	e853 1f00 	ldrex	r1, [r3]
   2a39c:	2900      	cmp	r1, #0
   2a39e:	d104      	bne.n	2a3aa <hfxo_start+0x1e>
   2a3a0:	e843 2c00 	strex	ip, r2, [r3]
   2a3a4:	f1bc 0f00 	cmp.w	ip, #0
   2a3a8:	d1f6      	bne.n	2a398 <hfxo_start+0xc>
   2a3aa:	f3bf 8f5b 	dmb	ish
   2a3ae:	d10a      	bne.n	2a3c6 <hfxo_start+0x3a>
	*notify = (struct sys_notify){
   2a3b0:	2300      	movs	r3, #0
   2a3b2:	6103      	str	r3, [r0, #16]
   2a3b4:	6183      	str	r3, [r0, #24]
   2a3b6:	2301      	movs	r3, #1
   2a3b8:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   2a3ba:	f100 010c 	add.w	r1, r0, #12
   2a3be:	69c0      	ldr	r0, [r0, #28]
   2a3c0:	f7fb fd5b 	bl	25e7a <onoff_request>
}
   2a3c4:	bd08      	pop	{r3, pc}
	return 0;
   2a3c6:	2000      	movs	r0, #0
   2a3c8:	e7fc      	b.n	2a3c4 <hfxo_start+0x38>

0002a3ca <usb_dc_ep_read>:
{
   2a3ca:	b570      	push	{r4, r5, r6, lr}
   2a3cc:	4605      	mov	r5, r0
   2a3ce:	460c      	mov	r4, r1
   2a3d0:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   2a3d2:	f7f2 ff23 	bl	1d21c <usb_dc_ep_read_wait>
	if (ret) {
   2a3d6:	b918      	cbnz	r0, 2a3e0 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   2a3d8:	b11c      	cbz	r4, 2a3e2 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   2a3da:	4628      	mov	r0, r5
   2a3dc:	f7f2 ff98 	bl	1d310 <usb_dc_ep_read_continue>
}
   2a3e0:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   2a3e2:	2e00      	cmp	r6, #0
   2a3e4:	d1f9      	bne.n	2a3da <usb_dc_ep_read+0x10>
   2a3e6:	e7fb      	b.n	2a3e0 <usb_dc_ep_read+0x16>

0002a3e8 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   2a3e8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2a3ea:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2a3ee:	0089      	lsls	r1, r1, #2
   2a3f0:	3138      	adds	r1, #56	; 0x38
}
   2a3f2:	4408      	add	r0, r1
   2a3f4:	4770      	bx	lr

0002a3f6 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   2a3f6:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   2a3f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   2a3fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a400:	4770      	bx	lr

0002a402 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   2a402:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   2a404:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   2a408:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2a40c:	4770      	bx	lr

0002a40e <get_status>:
{
   2a40e:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2a410:	b2c9      	uxtb	r1, r1
   2a412:	f7ff ffe9 	bl	2a3e8 <get_sub_data>
   2a416:	6880      	ldr	r0, [r0, #8]
}
   2a418:	f000 0007 	and.w	r0, r0, #7
   2a41c:	bd08      	pop	{r3, pc}

0002a41e <set_off_state>:
	__asm__ volatile(
   2a41e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a422:	f3ef 8211 	mrs	r2, BASEPRI
   2a426:	f383 8812 	msr	BASEPRI_MAX, r3
   2a42a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a42e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2a430:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   2a434:	d001      	beq.n	2a43a <set_off_state+0x1c>
   2a436:	428b      	cmp	r3, r1
   2a438:	d107      	bne.n	2a44a <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2a43a:	2301      	movs	r3, #1
   2a43c:	6003      	str	r3, [r0, #0]
	int err = 0;
   2a43e:	2000      	movs	r0, #0
	__asm__ volatile(
   2a440:	f382 8811 	msr	BASEPRI, r2
   2a444:	f3bf 8f6f 	isb	sy
}
   2a448:	4770      	bx	lr
		err = -EPERM;
   2a44a:	f04f 30ff 	mov.w	r0, #4294967295
   2a44e:	e7f7      	b.n	2a440 <set_off_state+0x22>

0002a450 <set_starting_state>:
{
   2a450:	b410      	push	{r4}
	__asm__ volatile(
   2a452:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a456:	f3ef 8211 	mrs	r2, BASEPRI
   2a45a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a45e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2a462:	6803      	ldr	r3, [r0, #0]
   2a464:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2a468:	f003 0307 	and.w	r3, r3, #7
   2a46c:	2b01      	cmp	r3, #1
   2a46e:	d009      	beq.n	2a484 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   2a470:	428c      	cmp	r4, r1
   2a472:	d00a      	beq.n	2a48a <set_starting_state+0x3a>
		err = -EPERM;
   2a474:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   2a478:	f382 8811 	msr	BASEPRI, r2
   2a47c:	f3bf 8f6f 	isb	sy
}
   2a480:	bc10      	pop	{r4}
   2a482:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2a484:	6001      	str	r1, [r0, #0]
	int err = 0;
   2a486:	2000      	movs	r0, #0
   2a488:	e7f6      	b.n	2a478 <set_starting_state+0x28>
		err = -EALREADY;
   2a48a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2a48e:	e7f3      	b.n	2a478 <set_starting_state+0x28>

0002a490 <set_on_state>:
	__asm__ volatile(
   2a490:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a494:	f3ef 8211 	mrs	r2, BASEPRI
   2a498:	f383 8812 	msr	BASEPRI_MAX, r3
   2a49c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2a4a0:	6803      	ldr	r3, [r0, #0]
   2a4a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2a4a6:	f043 0302 	orr.w	r3, r3, #2
   2a4aa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2a4ac:	f382 8811 	msr	BASEPRI, r2
   2a4b0:	f3bf 8f6f 	isb	sy
}
   2a4b4:	4770      	bx	lr

0002a4b6 <clkstarted_handle>:
{
   2a4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a4b8:	4606      	mov	r6, r0
   2a4ba:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   2a4bc:	f7ff ff94 	bl	2a3e8 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   2a4c0:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   2a4c2:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   2a4c4:	2300      	movs	r3, #0
   2a4c6:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   2a4ca:	f7ff ffe1 	bl	2a490 <set_on_state>
	if (callback) {
   2a4ce:	b11d      	cbz	r5, 2a4d8 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2a4d0:	463a      	mov	r2, r7
   2a4d2:	4621      	mov	r1, r4
   2a4d4:	4630      	mov	r0, r6
   2a4d6:	47a8      	blx	r5
}
   2a4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a4da <stop>:
{
   2a4da:	b570      	push	{r4, r5, r6, lr}
   2a4dc:	4606      	mov	r6, r0
   2a4de:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2a4e0:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2a4e2:	4621      	mov	r1, r4
   2a4e4:	f7ff ff80 	bl	2a3e8 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   2a4e8:	4629      	mov	r1, r5
   2a4ea:	3008      	adds	r0, #8
   2a4ec:	f7ff ff97 	bl	2a41e <set_off_state>
	if (err < 0) {
   2a4f0:	2800      	cmp	r0, #0
   2a4f2:	db06      	blt.n	2a502 <stop+0x28>
	get_sub_config(dev, type)->stop();
   2a4f4:	4621      	mov	r1, r4
   2a4f6:	4630      	mov	r0, r6
   2a4f8:	f7ff ff7d 	bl	2a3f6 <get_sub_config>
   2a4fc:	6843      	ldr	r3, [r0, #4]
   2a4fe:	4798      	blx	r3
	return 0;
   2a500:	2000      	movs	r0, #0
}
   2a502:	bd70      	pop	{r4, r5, r6, pc}

0002a504 <api_stop>:
{
   2a504:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   2a506:	2280      	movs	r2, #128	; 0x80
   2a508:	f7ff ffe7 	bl	2a4da <stop>
}
   2a50c:	bd08      	pop	{r3, pc}

0002a50e <async_start>:
{
   2a50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a512:	4606      	mov	r6, r0
   2a514:	4690      	mov	r8, r2
   2a516:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   2a518:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2a51a:	4629      	mov	r1, r5
   2a51c:	f7ff ff64 	bl	2a3e8 <get_sub_data>
   2a520:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   2a522:	9906      	ldr	r1, [sp, #24]
   2a524:	3008      	adds	r0, #8
   2a526:	f7ff ff93 	bl	2a450 <set_starting_state>
	if (err < 0) {
   2a52a:	2800      	cmp	r0, #0
   2a52c:	db09      	blt.n	2a542 <async_start+0x34>
	subdata->cb = cb;
   2a52e:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   2a532:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   2a534:	4629      	mov	r1, r5
   2a536:	4630      	mov	r0, r6
   2a538:	f7ff ff5d 	bl	2a3f6 <get_sub_config>
   2a53c:	6803      	ldr	r3, [r0, #0]
   2a53e:	4798      	blx	r3
	return 0;
   2a540:	2000      	movs	r0, #0
}
   2a542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a546 <api_start>:
{
   2a546:	b510      	push	{r4, lr}
   2a548:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2a54a:	2480      	movs	r4, #128	; 0x80
   2a54c:	9400      	str	r4, [sp, #0]
   2a54e:	f7ff ffde 	bl	2a50e <async_start>
}
   2a552:	b002      	add	sp, #8
   2a554:	bd10      	pop	{r4, pc}

0002a556 <onoff_started_callback>:
{
   2a556:	b510      	push	{r4, lr}
   2a558:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   2a55a:	b2c9      	uxtb	r1, r1
   2a55c:	f7ff ff51 	bl	2a402 <get_onoff_manager>
	notify(mgr, 0);
   2a560:	2100      	movs	r1, #0
   2a562:	47a0      	blx	r4
}
   2a564:	bd10      	pop	{r4, pc}

0002a566 <hfclk_start>:
{
   2a566:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   2a568:	2001      	movs	r0, #1
   2a56a:	f7f4 fd31 	bl	1efd0 <nrfx_clock_start>
}
   2a56e:	bd08      	pop	{r3, pc}

0002a570 <lfclk_start>:
{
   2a570:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2a572:	2000      	movs	r0, #0
   2a574:	f7f4 fd2c 	bl	1efd0 <nrfx_clock_start>
}
   2a578:	bd08      	pop	{r3, pc}

0002a57a <hfclk_stop>:
{
   2a57a:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2a57c:	2001      	movs	r0, #1
   2a57e:	f000 ff37 	bl	2b3f0 <nrfx_clock_stop>
}
   2a582:	bd08      	pop	{r3, pc}

0002a584 <lfclk_stop>:
{
   2a584:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2a586:	2000      	movs	r0, #0
   2a588:	f000 ff32 	bl	2b3f0 <nrfx_clock_stop>
}
   2a58c:	bd08      	pop	{r3, pc}

0002a58e <blocking_start_callback>:
{
   2a58e:	b508      	push	{r3, lr}
   2a590:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2a592:	f7f7 fb75 	bl	21c80 <z_impl_k_sem_give>
}
   2a596:	bd08      	pop	{r3, pc}

0002a598 <gpio_nrfx_port_get_raw>:
	return port->config;
   2a598:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a59a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a59c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2a5a0:	600b      	str	r3, [r1, #0]
}
   2a5a2:	2000      	movs	r0, #0
   2a5a4:	4770      	bx	lr

0002a5a6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   2a5a6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a5a8:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2a5aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2a5ae:	4042      	eors	r2, r0
   2a5b0:	400a      	ands	r2, r1
   2a5b2:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2a5b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2a5b8:	2000      	movs	r0, #0
   2a5ba:	4770      	bx	lr

0002a5bc <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   2a5bc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a5be:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2a5c0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2a5c4:	2000      	movs	r0, #0
   2a5c6:	4770      	bx	lr

0002a5c8 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   2a5c8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a5ca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   2a5cc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   2a5d0:	2000      	movs	r0, #0
   2a5d2:	4770      	bx	lr

0002a5d4 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   2a5d4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a5d6:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a5d8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2a5dc:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2a5de:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2a5e2:	2000      	movs	r0, #0
   2a5e4:	4770      	bx	lr

0002a5e6 <gpio_nrfx_manage_callback>:
{
   2a5e6:	b470      	push	{r4, r5, r6}
	return port->data;
   2a5e8:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2a5ea:	1d05      	adds	r5, r0, #4
	return list->head;
   2a5ec:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   2a5ee:	b1db      	cbz	r3, 2a628 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   2a5f0:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a5f2:	2400      	movs	r4, #0
   2a5f4:	e00a      	b.n	2a60c <gpio_nrfx_manage_callback+0x26>
	return node->next;
   2a5f6:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   2a5f8:	6043      	str	r3, [r0, #4]
	return list->tail;
   2a5fa:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a5fc:	42a1      	cmp	r1, r4
   2a5fe:	d10f      	bne.n	2a620 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2a600:	606b      	str	r3, [r5, #4]
}
   2a602:	e00d      	b.n	2a620 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   2a604:	606c      	str	r4, [r5, #4]
}
   2a606:	e00b      	b.n	2a620 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a608:	461c      	mov	r4, r3
   2a60a:	681b      	ldr	r3, [r3, #0]
   2a60c:	b15b      	cbz	r3, 2a626 <gpio_nrfx_manage_callback+0x40>
   2a60e:	429e      	cmp	r6, r3
   2a610:	d1fa      	bne.n	2a608 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   2a612:	2c00      	cmp	r4, #0
   2a614:	d0ef      	beq.n	2a5f6 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   2a616:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   2a618:	6023      	str	r3, [r4, #0]
	return list->tail;
   2a61a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a61c:	4299      	cmp	r1, r3
   2a61e:	d0f1      	beq.n	2a604 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   2a620:	2300      	movs	r3, #0
   2a622:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a624:	e000      	b.n	2a628 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   2a626:	b152      	cbz	r2, 2a63e <gpio_nrfx_manage_callback+0x58>
	if (set) {
   2a628:	b162      	cbz	r2, 2a644 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   2a62a:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   2a62c:	600b      	str	r3, [r1, #0]
	list->head = node;
   2a62e:	6041      	str	r1, [r0, #4]
	return list->tail;
   2a630:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a632:	b10b      	cbz	r3, 2a638 <gpio_nrfx_manage_callback+0x52>
	return 0;
   2a634:	2000      	movs	r0, #0
   2a636:	e006      	b.n	2a646 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   2a638:	6069      	str	r1, [r5, #4]
   2a63a:	2000      	movs	r0, #0
}
   2a63c:	e003      	b.n	2a646 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   2a63e:	f06f 0015 	mvn.w	r0, #21
   2a642:	e000      	b.n	2a646 <gpio_nrfx_manage_callback+0x60>
	return 0;
   2a644:	2000      	movs	r0, #0
}
   2a646:	bc70      	pop	{r4, r5, r6}
   2a648:	4770      	bx	lr

0002a64a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   2a64a:	b510      	push	{r4, lr}
   2a64c:	b082      	sub	sp, #8
   2a64e:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   2a650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2a654:	6e51      	ldr	r1, [r2, #100]	; 0x64
   2a656:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   2a658:	0a1b      	lsrs	r3, r3, #8
   2a65a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2a65e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   2a662:	6e51      	ldr	r1, [r2, #100]	; 0x64
   2a664:	0209      	lsls	r1, r1, #8
   2a666:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2a66a:	430b      	orrs	r3, r1
   2a66c:	6e51      	ldr	r1, [r2, #100]	; 0x64
   2a66e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2a672:	9300      	str	r3, [sp, #0]
   2a674:	6e11      	ldr	r1, [r2, #96]	; 0x60
   2a676:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   2a678:	0a1b      	lsrs	r3, r3, #8
   2a67a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2a67e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   2a682:	6e11      	ldr	r1, [r2, #96]	; 0x60
   2a684:	0209      	lsls	r1, r1, #8
   2a686:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   2a68a:	430b      	orrs	r3, r1
   2a68c:	6e12      	ldr	r2, [r2, #96]	; 0x60
   2a68e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2a692:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
   2a694:	2c08      	cmp	r4, #8
   2a696:	d900      	bls.n	2a69a <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
   2a698:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   2a69a:	4622      	mov	r2, r4
   2a69c:	4669      	mov	r1, sp
   2a69e:	f7fd fad7 	bl	27c50 <memcpy>

	return length;
}
   2a6a2:	4620      	mov	r0, r4
   2a6a4:	b002      	add	sp, #8
   2a6a6:	bd10      	pop	{r4, pc}

0002a6a8 <endtx_isr>:
	return dev->config;
   2a6a8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a6aa:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   2a6ac:	f04f 0140 	mov.w	r1, #64	; 0x40
   2a6b0:	f3ef 8211 	mrs	r2, BASEPRI
   2a6b4:	f381 8812 	msr	BASEPRI_MAX, r1
   2a6b8:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a6bc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2a6c0:	b131      	cbz	r1, 2a6d0 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a6c2:	2100      	movs	r1, #0
   2a6c4:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2a6c8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a6cc:	2101      	movs	r1, #1
   2a6ce:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2a6d0:	f382 8811 	msr	BASEPRI, r2
   2a6d4:	f3bf 8f6f 	isb	sy
}
   2a6d8:	4770      	bx	lr

0002a6da <uarte_nrfx_isr_int>:
{
   2a6da:	b538      	push	{r3, r4, r5, lr}
   2a6dc:	4604      	mov	r4, r0
	return dev->config;
   2a6de:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a6e0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2a6e2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2a6e6:	f413 7f80 	tst.w	r3, #256	; 0x100
   2a6ea:	d003      	beq.n	2a6f4 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a6ec:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   2a6f0:	2b00      	cmp	r3, #0
   2a6f2:	d139      	bne.n	2a768 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   2a6f4:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a6f6:	685b      	ldr	r3, [r3, #4]
   2a6f8:	f013 0f10 	tst.w	r3, #16
   2a6fc:	d01a      	beq.n	2a734 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   2a6fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a702:	f3ef 8211 	mrs	r2, BASEPRI
   2a706:	f383 8812 	msr	BASEPRI_MAX, r3
   2a70a:	f3bf 8f6f 	isb	sy
   2a70e:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2a712:	b113      	cbz	r3, 2a71a <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2a714:	2300      	movs	r3, #0
   2a716:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   2a71a:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2a71c:	68db      	ldr	r3, [r3, #12]
   2a71e:	b10b      	cbz	r3, 2a724 <uarte_nrfx_isr_int+0x4a>
   2a720:	691b      	ldr	r3, [r3, #16]
   2a722:	b91b      	cbnz	r3, 2a72c <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   2a724:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2a728:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   2a72c:	f382 8811 	msr	BASEPRI, r2
   2a730:	f3bf 8f6f 	isb	sy
	return dev->data;
   2a734:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   2a736:	68da      	ldr	r2, [r3, #12]
   2a738:	b1aa      	cbz	r2, 2a766 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a73a:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2a73e:	b121      	cbz	r1, 2a74a <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   2a740:	2100      	movs	r1, #0
   2a742:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2a744:	68da      	ldr	r2, [r3, #12]
   2a746:	7b92      	ldrb	r2, [r2, #14]
   2a748:	b98a      	cbnz	r2, 2a76e <uarte_nrfx_isr_int+0x94>
   2a74a:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2a74e:	b122      	cbz	r2, 2a75a <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a750:	2200      	movs	r2, #0
   2a752:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   2a756:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   2a75a:	68da      	ldr	r2, [r3, #12]
   2a75c:	6813      	ldr	r3, [r2, #0]
   2a75e:	b113      	cbz	r3, 2a766 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2a760:	6851      	ldr	r1, [r2, #4]
   2a762:	4620      	mov	r0, r4
   2a764:	4798      	blx	r3
}
   2a766:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   2a768:	f7ff ff9e 	bl	2a6a8 <endtx_isr>
   2a76c:	e7c2      	b.n	2a6f4 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   2a76e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2a772:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2a776:	68db      	ldr	r3, [r3, #12]
   2a778:	7399      	strb	r1, [r3, #14]
			return;
   2a77a:	e7f4      	b.n	2a766 <uarte_nrfx_isr_int+0x8c>

0002a77c <uarte_nrfx_configure>:
{
   2a77c:	b570      	push	{r4, r5, r6, lr}
   2a77e:	b082      	sub	sp, #8
   2a780:	4605      	mov	r5, r0
   2a782:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   2a784:	794b      	ldrb	r3, [r1, #5]
   2a786:	2b01      	cmp	r3, #1
   2a788:	d006      	beq.n	2a798 <uarte_nrfx_configure+0x1c>
   2a78a:	2b03      	cmp	r3, #3
   2a78c:	d011      	beq.n	2a7b2 <uarte_nrfx_configure+0x36>
   2a78e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   2a792:	4618      	mov	r0, r3
   2a794:	b002      	add	sp, #8
   2a796:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   2a798:	2300      	movs	r3, #0
   2a79a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   2a79e:	79a3      	ldrb	r3, [r4, #6]
   2a7a0:	2b03      	cmp	r3, #3
   2a7a2:	d140      	bne.n	2a826 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   2a7a4:	79e3      	ldrb	r3, [r4, #7]
   2a7a6:	b143      	cbz	r3, 2a7ba <uarte_nrfx_configure+0x3e>
   2a7a8:	2b01      	cmp	r3, #1
   2a7aa:	d010      	beq.n	2a7ce <uarte_nrfx_configure+0x52>
   2a7ac:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2a7b0:	e7ef      	b.n	2a792 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   2a7b2:	2310      	movs	r3, #16
   2a7b4:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   2a7b8:	e7f1      	b.n	2a79e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   2a7ba:	2300      	movs	r3, #0
   2a7bc:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   2a7c0:	7923      	ldrb	r3, [r4, #4]
   2a7c2:	b183      	cbz	r3, 2a7e6 <uarte_nrfx_configure+0x6a>
   2a7c4:	2b02      	cmp	r3, #2
   2a7c6:	d02a      	beq.n	2a81e <uarte_nrfx_configure+0xa2>
   2a7c8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2a7cc:	e7e1      	b.n	2a792 <uarte_nrfx_configure+0x16>
	return dev->config;
   2a7ce:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   2a7d0:	685b      	ldr	r3, [r3, #4]
   2a7d2:	f003 0201 	and.w	r2, r3, #1
   2a7d6:	f003 0302 	and.w	r3, r3, #2
   2a7da:	4313      	orrs	r3, r2
   2a7dc:	d026      	beq.n	2a82c <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   2a7de:	2301      	movs	r3, #1
   2a7e0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   2a7e4:	e7ec      	b.n	2a7c0 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   2a7e6:	2300      	movs	r3, #0
   2a7e8:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   2a7ec:	6821      	ldr	r1, [r4, #0]
   2a7ee:	4628      	mov	r0, r5
   2a7f0:	f7f3 fb32 	bl	1de58 <baudrate_set>
   2a7f4:	4603      	mov	r3, r0
   2a7f6:	b9e0      	cbnz	r0, 2a832 <uarte_nrfx_configure+0xb6>
	return dev->config;
   2a7f8:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   2a7fa:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2a7fc:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   2a800:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   2a804:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2a808:	4331      	orrs	r1, r6
   2a80a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   2a80c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   2a810:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   2a812:	3204      	adds	r2, #4
   2a814:	e894 0003 	ldmia.w	r4, {r0, r1}
   2a818:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   2a81c:	e7b9      	b.n	2a792 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   2a81e:	230e      	movs	r3, #14
   2a820:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   2a824:	e7e2      	b.n	2a7ec <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   2a826:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2a82a:	e7b2      	b.n	2a792 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   2a82c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2a830:	e7af      	b.n	2a792 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   2a832:	f06f 0385 	mvn.w	r3, #133	; 0x85
   2a836:	e7ac      	b.n	2a792 <uarte_nrfx_configure+0x16>

0002a838 <uarte_nrfx_config_get>:
{
   2a838:	460b      	mov	r3, r1
	return dev->data;
   2a83a:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   2a83c:	6891      	ldr	r1, [r2, #8]
   2a83e:	6850      	ldr	r0, [r2, #4]
   2a840:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a844:	2000      	movs	r0, #0
   2a846:	4770      	bx	lr

0002a848 <uarte_nrfx_err_check>:
	return dev->config;
   2a848:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a84a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2a84c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2a850:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2a854:	4770      	bx	lr

0002a856 <is_tx_ready>:
	return dev->config;
   2a856:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a858:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2a85a:	685b      	ldr	r3, [r3, #4]
   2a85c:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a860:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2a864:	b929      	cbnz	r1, 2a872 <is_tx_ready+0x1c>
   2a866:	b933      	cbnz	r3, 2a876 <is_tx_ready+0x20>
   2a868:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   2a86c:	b92b      	cbnz	r3, 2a87a <is_tx_ready+0x24>
   2a86e:	2000      	movs	r0, #0
   2a870:	4770      	bx	lr
   2a872:	2001      	movs	r0, #1
   2a874:	4770      	bx	lr
   2a876:	2000      	movs	r0, #0
   2a878:	4770      	bx	lr
   2a87a:	2001      	movs	r0, #1
}
   2a87c:	4770      	bx	lr

0002a87e <uarte_enable>:
	return dev->config;
   2a87e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a880:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2a882:	2208      	movs	r2, #8
   2a884:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2a888:	4770      	bx	lr

0002a88a <tx_start>:
{
   2a88a:	b510      	push	{r4, lr}
	return dev->config;
   2a88c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a88e:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2a890:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2a894:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a898:	2300      	movs	r3, #0
   2a89a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   2a89e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   2a8a2:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   2a8a6:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   2a8aa:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2a8ac:	685b      	ldr	r3, [r3, #4]
   2a8ae:	f013 0f10 	tst.w	r3, #16
   2a8b2:	d102      	bne.n	2a8ba <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a8b4:	2301      	movs	r3, #1
   2a8b6:	60a3      	str	r3, [r4, #8]
}
   2a8b8:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   2a8ba:	2101      	movs	r1, #1
   2a8bc:	f7ff ffdf 	bl	2a87e <uarte_enable>
    p_reg->INTENSET = mask;
   2a8c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   2a8c4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   2a8c8:	e7f4      	b.n	2a8b4 <tx_start+0x2a>

0002a8ca <uarte_nrfx_poll_in>:
{
   2a8ca:	b410      	push	{r4}
	return dev->data;
   2a8cc:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   2a8ce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a8d0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a8d2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a8d6:	b152      	cbz	r2, 2a8ee <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   2a8d8:	7d62      	ldrb	r2, [r4, #21]
   2a8da:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a8dc:	2000      	movs	r0, #0
   2a8de:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2a8e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a8e6:	2201      	movs	r2, #1
   2a8e8:	601a      	str	r2, [r3, #0]
}
   2a8ea:	bc10      	pop	{r4}
   2a8ec:	4770      	bx	lr
		return -1;
   2a8ee:	f04f 30ff 	mov.w	r0, #4294967295
   2a8f2:	e7fa      	b.n	2a8ea <uarte_nrfx_poll_in+0x20>

0002a8f4 <uarte_nrfx_fifo_fill>:
{
   2a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a8f8:	4680      	mov	r8, r0
	return dev->data;
   2a8fa:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2a8fc:	68fb      	ldr	r3, [r7, #12]
   2a8fe:	899e      	ldrh	r6, [r3, #12]
   2a900:	4296      	cmp	r6, r2
   2a902:	bfa8      	it	ge
   2a904:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2a906:	3310      	adds	r3, #16
   2a908:	2201      	movs	r2, #1
   2a90a:	f3bf 8f5b 	dmb	ish
   2a90e:	e853 0f00 	ldrex	r0, [r3]
   2a912:	2800      	cmp	r0, #0
   2a914:	d103      	bne.n	2a91e <uarte_nrfx_fifo_fill+0x2a>
   2a916:	e843 2400 	strex	r4, r2, [r3]
   2a91a:	2c00      	cmp	r4, #0
   2a91c:	d1f7      	bne.n	2a90e <uarte_nrfx_fifo_fill+0x1a>
   2a91e:	f3bf 8f5b 	dmb	ish
   2a922:	d101      	bne.n	2a928 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   2a924:	2300      	movs	r3, #0
   2a926:	e006      	b.n	2a936 <uarte_nrfx_fifo_fill+0x42>
		return 0;
   2a928:	2600      	movs	r6, #0
   2a92a:	e019      	b.n	2a960 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   2a92c:	68fc      	ldr	r4, [r7, #12]
   2a92e:	68a4      	ldr	r4, [r4, #8]
   2a930:	5ccd      	ldrb	r5, [r1, r3]
   2a932:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   2a934:	3301      	adds	r3, #1
   2a936:	42b3      	cmp	r3, r6
   2a938:	dbf8      	blt.n	2a92c <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   2a93a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2a93e:	f3ef 8411 	mrs	r4, BASEPRI
   2a942:	f383 8812 	msr	BASEPRI_MAX, r3
   2a946:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2a94a:	4640      	mov	r0, r8
   2a94c:	f7ff ff83 	bl	2a856 <is_tx_ready>
   2a950:	b948      	cbnz	r0, 2a966 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   2a952:	68fb      	ldr	r3, [r7, #12]
   2a954:	2600      	movs	r6, #0
   2a956:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   2a958:	f384 8811 	msr	BASEPRI, r4
   2a95c:	f3bf 8f6f 	isb	sy
}
   2a960:	4630      	mov	r0, r6
   2a962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   2a966:	68fb      	ldr	r3, [r7, #12]
   2a968:	4632      	mov	r2, r6
   2a96a:	6899      	ldr	r1, [r3, #8]
   2a96c:	4640      	mov	r0, r8
   2a96e:	f7ff ff8c 	bl	2a88a <tx_start>
   2a972:	e7f1      	b.n	2a958 <uarte_nrfx_fifo_fill+0x64>

0002a974 <uarte_nrfx_fifo_read>:
	return dev->config;
   2a974:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a976:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   2a978:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2a97a:	2a00      	cmp	r2, #0
   2a97c:	dd0c      	ble.n	2a998 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a97e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   2a982:	b15a      	cbz	r2, 2a99c <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a984:	2200      	movs	r2, #0
   2a986:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2a98a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2a98e:	7d42      	ldrb	r2, [r0, #21]
   2a990:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a992:	2001      	movs	r0, #1
   2a994:	6018      	str	r0, [r3, #0]
}
   2a996:	4770      	bx	lr
	int num_rx = 0;
   2a998:	2000      	movs	r0, #0
   2a99a:	4770      	bx	lr
   2a99c:	2000      	movs	r0, #0
}
   2a99e:	4770      	bx	lr

0002a9a0 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   2a9a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a9a2:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   2a9a4:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   2a9a6:	f04f 0040 	mov.w	r0, #64	; 0x40
   2a9aa:	f3ef 8311 	mrs	r3, BASEPRI
   2a9ae:	f380 8812 	msr	BASEPRI_MAX, r0
   2a9b2:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2a9b6:	68c9      	ldr	r1, [r1, #12]
   2a9b8:	2000      	movs	r0, #0
   2a9ba:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2a9bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2a9c0:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2a9c4:	f383 8811 	msr	BASEPRI, r3
   2a9c8:	f3bf 8f6f 	isb	sy
}
   2a9cc:	4770      	bx	lr

0002a9ce <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   2a9ce:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   2a9d0:	68db      	ldr	r3, [r3, #12]
   2a9d2:	2201      	movs	r2, #1
   2a9d4:	739a      	strb	r2, [r3, #14]
}
   2a9d6:	4770      	bx	lr

0002a9d8 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   2a9d8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2a9da:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   2a9dc:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   2a9de:	68db      	ldr	r3, [r3, #12]
   2a9e0:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2a9e2:	b94a      	cbnz	r2, 2a9f8 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2a9e4:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2a9e8:	b15a      	cbz	r2, 2aa02 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   2a9ea:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2a9ee:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   2a9f2:	d008      	beq.n	2aa06 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   2a9f4:	2001      	movs	r0, #1
   2a9f6:	e000      	b.n	2a9fa <uarte_nrfx_irq_tx_ready_complete+0x22>
   2a9f8:	2000      	movs	r0, #0
	if (ready) {
   2a9fa:	b108      	cbz	r0, 2aa00 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2a9fc:	2200      	movs	r2, #0
   2a9fe:	611a      	str	r2, [r3, #16]
}
   2aa00:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2aa02:	2000      	movs	r0, #0
   2aa04:	e7f9      	b.n	2a9fa <uarte_nrfx_irq_tx_ready_complete+0x22>
   2aa06:	2000      	movs	r0, #0
   2aa08:	e7f7      	b.n	2a9fa <uarte_nrfx_irq_tx_ready_complete+0x22>

0002aa0a <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   2aa0a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aa0c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2aa0e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2aa12:	3800      	subs	r0, #0
   2aa14:	bf18      	it	ne
   2aa16:	2001      	movne	r0, #1
   2aa18:	4770      	bx	lr

0002aa1a <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   2aa1a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aa1c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2aa1e:	2210      	movs	r2, #16
   2aa20:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2aa24:	4770      	bx	lr

0002aa26 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   2aa26:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aa28:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2aa2a:	2210      	movs	r2, #16
   2aa2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2aa30:	4770      	bx	lr

0002aa32 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   2aa32:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aa34:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2aa36:	f44f 7200 	mov.w	r2, #512	; 0x200
   2aa3a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2aa3e:	4770      	bx	lr

0002aa40 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   2aa40:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aa42:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2aa44:	f44f 7200 	mov.w	r2, #512	; 0x200
   2aa48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2aa4c:	4770      	bx	lr

0002aa4e <uarte_nrfx_irq_is_pending>:
{
   2aa4e:	b538      	push	{r3, r4, r5, lr}
   2aa50:	4604      	mov	r4, r0
	return dev->config;
   2aa52:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   2aa54:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2aa56:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2aa5a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   2aa5e:	d106      	bne.n	2aa6e <uarte_nrfx_irq_is_pending+0x20>
   2aa60:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   2aa64:	f013 0f10 	tst.w	r3, #16
   2aa68:	d107      	bne.n	2aa7a <uarte_nrfx_irq_is_pending+0x2c>
   2aa6a:	2000      	movs	r0, #0
}
   2aa6c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2aa6e:	f7ff ffb3 	bl	2a9d8 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2aa72:	2800      	cmp	r0, #0
   2aa74:	d0f4      	beq.n	2aa60 <uarte_nrfx_irq_is_pending+0x12>
		||
   2aa76:	2001      	movs	r0, #1
   2aa78:	e7f8      	b.n	2aa6c <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   2aa7a:	4620      	mov	r0, r4
   2aa7c:	f7ff ffc5 	bl	2aa0a <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2aa80:	2800      	cmp	r0, #0
   2aa82:	d0f3      	beq.n	2aa6c <uarte_nrfx_irq_is_pending+0x1e>
		||
   2aa84:	2001      	movs	r0, #1
   2aa86:	e7f1      	b.n	2aa6c <uarte_nrfx_irq_is_pending+0x1e>

0002aa88 <uarte_nrfx_irq_update>:
}
   2aa88:	2001      	movs	r0, #1
   2aa8a:	4770      	bx	lr

0002aa8c <uarte_nrfx_irq_callback_set>:
	return dev->data;
   2aa8c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   2aa8e:	68d8      	ldr	r0, [r3, #12]
   2aa90:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   2aa92:	68db      	ldr	r3, [r3, #12]
   2aa94:	605a      	str	r2, [r3, #4]
}
   2aa96:	4770      	bx	lr

0002aa98 <wait_tx_ready>:
{
   2aa98:	b570      	push	{r4, r5, r6, lr}
   2aa9a:	4606      	mov	r6, r0
   2aa9c:	e014      	b.n	2aac8 <wait_tx_ready+0x30>
		if (res) {
   2aa9e:	b17d      	cbz	r5, 2aac0 <wait_tx_ready+0x28>
	__asm__ volatile(
   2aaa0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2aaa4:	f3ef 8411 	mrs	r4, BASEPRI
   2aaa8:	f383 8812 	msr	BASEPRI_MAX, r3
   2aaac:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   2aab0:	4630      	mov	r0, r6
   2aab2:	f7ff fed0 	bl	2a856 <is_tx_ready>
   2aab6:	b9a0      	cbnz	r0, 2aae2 <wait_tx_ready+0x4a>
	__asm__ volatile(
   2aab8:	f384 8811 	msr	BASEPRI, r4
   2aabc:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   2aac0:	2021      	movs	r0, #33	; 0x21
   2aac2:	2100      	movs	r1, #0
   2aac4:	f7f7 fe8e 	bl	227e4 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2aac8:	2464      	movs	r4, #100	; 0x64
   2aaca:	4630      	mov	r0, r6
   2aacc:	f7ff fec3 	bl	2a856 <is_tx_ready>
   2aad0:	4605      	mov	r5, r0
   2aad2:	2800      	cmp	r0, #0
   2aad4:	d1e3      	bne.n	2aa9e <wait_tx_ready+0x6>
   2aad6:	2001      	movs	r0, #1
   2aad8:	f000 fca7 	bl	2b42a <nrfx_busy_wait>
   2aadc:	3c01      	subs	r4, #1
   2aade:	d1f4      	bne.n	2aaca <wait_tx_ready+0x32>
   2aae0:	e7dd      	b.n	2aa9e <wait_tx_ready+0x6>
}
   2aae2:	4620      	mov	r0, r4
   2aae4:	bd70      	pop	{r4, r5, r6, pc}

0002aae6 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2aae6:	b510      	push	{r4, lr}
   2aae8:	4604      	mov	r4, r0
   2aaea:	2200      	movs	r2, #0
   2aaec:	2101      	movs	r1, #1
   2aaee:	2002      	movs	r0, #2
   2aaf0:	f7ea fb5c 	bl	151ac <z_arm_irq_priority_set>
   2aaf4:	2002      	movs	r0, #2
   2aaf6:	f7ea fb27 	bl	15148 <arch_irq_enable>
   2aafa:	2101      	movs	r1, #1
   2aafc:	4620      	mov	r0, r4
   2aafe:	f7f3 fac5 	bl	1e08c <uarte_instance_init>
   2ab02:	bd10      	pop	{r4, pc}

0002ab04 <rng_pool_put>:
{
   2ab04:	b410      	push	{r4}
	uint8_t first = rngp->first_read;
   2ab06:	7842      	ldrb	r2, [r0, #1]
	uint8_t last  = rngp->last;
   2ab08:	7883      	ldrb	r3, [r0, #2]
	uint8_t mask  = rngp->mask;
   2ab0a:	78c4      	ldrb	r4, [r0, #3]
	if (((last - first) & mask) == mask) {
   2ab0c:	1a9a      	subs	r2, r3, r2
   2ab0e:	ea34 0202 	bics.w	r2, r4, r2
   2ab12:	d008      	beq.n	2ab26 <rng_pool_put+0x22>
	rngp->buffer[last] = byte;
   2ab14:	18c2      	adds	r2, r0, r3
   2ab16:	7151      	strb	r1, [r2, #5]
	rngp->last = (last + 1) & mask;
   2ab18:	3301      	adds	r3, #1
   2ab1a:	b25b      	sxtb	r3, r3
   2ab1c:	4023      	ands	r3, r4
   2ab1e:	7083      	strb	r3, [r0, #2]
	return 0;
   2ab20:	2000      	movs	r0, #0
}
   2ab22:	bc10      	pop	{r4}
   2ab24:	4770      	bx	lr
		return -ENOBUFS;
   2ab26:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ab2a:	e7fa      	b.n	2ab22 <rng_pool_put+0x1e>

0002ab2c <rng_pool_init>:
	rngp->first_alloc = 0U;
   2ab2c:	2300      	movs	r3, #0
   2ab2e:	7003      	strb	r3, [r0, #0]
	rngp->first_read  = 0U;
   2ab30:	7043      	strb	r3, [r0, #1]
	rngp->last	  = 0U;
   2ab32:	7083      	strb	r3, [r0, #2]
	rngp->mask	  = size - 1;
   2ab34:	3901      	subs	r1, #1
   2ab36:	70c1      	strb	r1, [r0, #3]
	rngp->threshold	  = threshold;
   2ab38:	7102      	strb	r2, [r0, #4]
}
   2ab3a:	4770      	bx	lr

0002ab3c <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   2ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab3e:	b083      	sub	sp, #12
   2ab40:	460f      	mov	r7, r1
   2ab42:	4616      	mov	r6, r2
	}

#else
	size_t olen;
	size_t offset = 0;
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   2ab44:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   2ab48:	2400      	movs	r4, #0
	int res = -EINVAL;
   2ab4a:	f06f 0015 	mvn.w	r0, #21
	/** This is a call from a secure app, in which case entropy is
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
   2ab4e:	e00a      	b.n	2ab66 <entropy_cc3xx_rng_get_entropy+0x2a>
			 * using the CTR_DRBG features of the
			 * nrf_cc310_platform/nrf_cc312_platform library.
			 * When the given context is NULL, a global internal
			 * ctr_drbg context is being used.
			 */
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   2ab50:	ab01      	add	r3, sp, #4
   2ab52:	462a      	mov	r2, r5
   2ab54:	1939      	adds	r1, r7, r4
   2ab56:	2000      	movs	r0, #0
   2ab58:	f7f8 fc78 	bl	2344c <nrf_cc3xx_platform_ctr_drbg_get>
										buffer + offset,
										chunk_size,
										&olen);
		#endif

		if (olen != chunk_size) {
   2ab5c:	9b01      	ldr	r3, [sp, #4]
   2ab5e:	42ab      	cmp	r3, r5
   2ab60:	d109      	bne.n	2ab76 <entropy_cc3xx_rng_get_entropy+0x3a>
			return -EINVAL;
		}

		if (res != 0) {
   2ab62:	b950      	cbnz	r0, 2ab7a <entropy_cc3xx_rng_get_entropy+0x3e>
			break;
		}

		offset += chunk_size;
   2ab64:	442c      	add	r4, r5
	while (offset < length) {
   2ab66:	42a6      	cmp	r6, r4
   2ab68:	d907      	bls.n	2ab7a <entropy_cc3xx_rng_get_entropy+0x3e>
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   2ab6a:	1b33      	subs	r3, r6, r4
   2ab6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2ab70:	d2ee      	bcs.n	2ab50 <entropy_cc3xx_rng_get_entropy+0x14>
			chunk_size = length - offset;
   2ab72:	461d      	mov	r5, r3
   2ab74:	e7ec      	b.n	2ab50 <entropy_cc3xx_rng_get_entropy+0x14>
			return -EINVAL;
   2ab76:	f06f 0015 	mvn.w	r0, #21
	}
#endif

	return res;
}
   2ab7a:	b003      	add	sp, #12
   2ab7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ab7e <entropy_cc3xx_rng_init>:

static int entropy_cc3xx_rng_init(const struct device *dev)
{
   2ab7e:	b508      	push	{r3, lr}
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   2ab80:	2200      	movs	r2, #0
   2ab82:	4611      	mov	r1, r2
   2ab84:	4610      	mov	r0, r2
   2ab86:	f7f8 fc2d 	bl	233e4 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   2ab8a:	b900      	cbnz	r0, 2ab8e <entropy_cc3xx_rng_init+0x10>
			return -EINVAL;
		}
	#endif

	return 0;
}
   2ab8c:	bd08      	pop	{r3, pc}
			return -EINVAL;
   2ab8e:	f06f 0015 	mvn.w	r0, #21
   2ab92:	e7fb      	b.n	2ab8c <entropy_cc3xx_rng_init+0xe>

0002ab94 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2ab94:	4770      	bx	lr

0002ab96 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2ab96:	4770      	bx	lr

0002ab98 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
   2ab98:	4770      	bx	lr

0002ab9a <counter_sub>:
	return (a - b) & COUNTER_MAX;
   2ab9a:	1a40      	subs	r0, r0, r1
}
   2ab9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2aba0:	4770      	bx	lr

0002aba2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   2aba2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   2aba6:	009b      	lsls	r3, r3, #2
   2aba8:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   2abaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2abae:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2abb2:	2200      	movs	r2, #0
   2abb4:	601a      	str	r2, [r3, #0]
   2abb6:	681b      	ldr	r3, [r3, #0]
}
   2abb8:	4770      	bx	lr

0002abba <absolute_time_to_cc>:
}
   2abba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   2abbe:	4770      	bx	lr

0002abc0 <full_int_lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   2abc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2abc4:	b672      	cpsid	i
}
   2abc6:	4770      	bx	lr

0002abc8 <full_int_unlock>:
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   2abc8:	f380 8810 	msr	PRIMASK, r0
}
   2abcc:	4770      	bx	lr

0002abce <set_absolute_alarm>:
{
   2abce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2abd0:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   2abd2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   2abd6:	f7f3 fc67 	bl	1e4a8 <get_comparator>
   2abda:	4607      	mov	r7, r0
   2abdc:	e019      	b.n	2ac12 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   2abde:	2013      	movs	r0, #19
   2abe0:	f001 fa56 	bl	2c090 <z_impl_k_busy_wait>
}
   2abe4:	e022      	b.n	2ac2c <set_absolute_alarm+0x5e>
		event_clear(chan);
   2abe6:	4630      	mov	r0, r6
   2abe8:	f7ff ffdb 	bl	2aba2 <event_clear>
		event_enable(chan);
   2abec:	4630      	mov	r0, r6
   2abee:	f7f3 fc63 	bl	1e4b8 <event_enable>
		set_comparator(chan, cc_val);
   2abf2:	4629      	mov	r1, r5
   2abf4:	4630      	mov	r0, r6
   2abf6:	f7f3 fc4d 	bl	1e494 <set_comparator>
		now2 = counter();
   2abfa:	f7f3 fc71 	bl	1e4e0 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   2abfe:	4284      	cmp	r4, r0
   2ac00:	d01e      	beq.n	2ac40 <set_absolute_alarm+0x72>
   2ac02:	1c81      	adds	r1, r0, #2
   2ac04:	4628      	mov	r0, r5
   2ac06:	f7ff ffc8 	bl	2ab9a <counter_sub>
	} while ((now2 != now) &&
   2ac0a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2ac0e:	d917      	bls.n	2ac40 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   2ac10:	462f      	mov	r7, r5
		now = counter();
   2ac12:	f7f3 fc65 	bl	1e4e0 <counter>
   2ac16:	4604      	mov	r4, r0
		set_comparator(chan, now);
   2ac18:	4601      	mov	r1, r0
   2ac1a:	4630      	mov	r0, r6
   2ac1c:	f7f3 fc3a 	bl	1e494 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   2ac20:	4621      	mov	r1, r4
   2ac22:	4638      	mov	r0, r7
   2ac24:	f7ff ffb9 	bl	2ab9a <counter_sub>
   2ac28:	2801      	cmp	r0, #1
   2ac2a:	d0d8      	beq.n	2abde <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   2ac2c:	1ca7      	adds	r7, r4, #2
   2ac2e:	4639      	mov	r1, r7
   2ac30:	4628      	mov	r0, r5
   2ac32:	f7ff ffb2 	bl	2ab9a <counter_sub>
   2ac36:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   2ac3a:	d9d4      	bls.n	2abe6 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   2ac3c:	463d      	mov	r5, r7
   2ac3e:	e7d2      	b.n	2abe6 <set_absolute_alarm+0x18>
}
   2ac40:	4628      	mov	r0, r5
   2ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ac44 <compare_set>:
{
   2ac44:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ac46:	b083      	sub	sp, #12
   2ac48:	4604      	mov	r4, r0
   2ac4a:	4617      	mov	r7, r2
   2ac4c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   2ac4e:	f7f3 fc4d 	bl	1e4ec <compare_int_lock>
   2ac52:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   2ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ac56:	9301      	str	r3, [sp, #4]
   2ac58:	9b08      	ldr	r3, [sp, #32]
   2ac5a:	9300      	str	r3, [sp, #0]
   2ac5c:	463a      	mov	r2, r7
   2ac5e:	462b      	mov	r3, r5
   2ac60:	4620      	mov	r0, r4
   2ac62:	f7f3 fd31 	bl	1e6c8 <compare_set_nolocks>
   2ac66:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   2ac68:	4631      	mov	r1, r6
   2ac6a:	4620      	mov	r0, r4
   2ac6c:	f7f3 fca2 	bl	1e5b4 <compare_int_unlock>
}
   2ac70:	4628      	mov	r0, r5
   2ac72:	b003      	add	sp, #12
   2ac74:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac76 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   2ac76:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2ac78:	f7f3 fd06 	bl	1e688 <z_nrf_rtc_timer_read>
}
   2ac7c:	bd08      	pop	{r3, pc}

0002ac7e <event_packet_is_discardable>:
	switch (hdr->evt) {
   2ac7e:	7803      	ldrb	r3, [r0, #0]
   2ac80:	2b3e      	cmp	r3, #62	; 0x3e
   2ac82:	d003      	beq.n	2ac8c <event_packet_is_discardable+0xe>
   2ac84:	2bff      	cmp	r3, #255	; 0xff
   2ac86:	d00a      	beq.n	2ac9e <event_packet_is_discardable+0x20>
   2ac88:	2000      	movs	r0, #0
   2ac8a:	4770      	bx	lr
		switch (me->subevent) {
   2ac8c:	7883      	ldrb	r3, [r0, #2]
   2ac8e:	2b02      	cmp	r3, #2
   2ac90:	d00c      	beq.n	2acac <event_packet_is_discardable+0x2e>
   2ac92:	2b0d      	cmp	r3, #13
   2ac94:	d001      	beq.n	2ac9a <event_packet_is_discardable+0x1c>
			return false;
   2ac96:	2000      	movs	r0, #0
   2ac98:	4770      	bx	lr
		switch (me->subevent) {
   2ac9a:	2001      	movs	r0, #1
   2ac9c:	4770      	bx	lr
		uint8_t subevent = hci_buf[2];
   2ac9e:	7883      	ldrb	r3, [r0, #2]
		switch (subevent) {
   2aca0:	2b80      	cmp	r3, #128	; 0x80
   2aca2:	d001      	beq.n	2aca8 <event_packet_is_discardable+0x2a>
			return false;
   2aca4:	2000      	movs	r0, #0
}
   2aca6:	4770      	bx	lr
			return true;
   2aca8:	2001      	movs	r0, #1
   2acaa:	4770      	bx	lr
		switch (me->subevent) {
   2acac:	2001      	movs	r0, #1
   2acae:	4770      	bx	lr

0002acb0 <hci_driver_send>:
{
   2acb0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2acb2:	8983      	ldrh	r3, [r0, #12]
   2acb4:	b183      	cbz	r3, 2acd8 <hci_driver_send+0x28>
   2acb6:	4604      	mov	r4, r0
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   2acb8:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2acba:	b14b      	cbz	r3, 2acd0 <hci_driver_send+0x20>
   2acbc:	2b02      	cmp	r3, #2
   2acbe:	d10e      	bne.n	2acde <hci_driver_send+0x2e>
		err = acl_handle(buf);
   2acc0:	f7f3 feb0 	bl	1ea24 <acl_handle>
   2acc4:	4605      	mov	r5, r0
	if (!err) {
   2acc6:	b965      	cbnz	r5, 2ace2 <hci_driver_send+0x32>
		net_buf_unref(buf);
   2acc8:	4620      	mov	r0, r4
   2acca:	f7ff fa55 	bl	2a178 <net_buf_unref>
   2acce:	e008      	b.n	2ace2 <hci_driver_send+0x32>
		err = cmd_handle(buf);
   2acd0:	f7f3 fec2 	bl	1ea58 <cmd_handle>
   2acd4:	4605      	mov	r5, r0
		break;
   2acd6:	e7f6      	b.n	2acc6 <hci_driver_send+0x16>
		return -EINVAL;
   2acd8:	f06f 0515 	mvn.w	r5, #21
   2acdc:	e001      	b.n	2ace2 <hci_driver_send+0x32>
	switch (type) {
   2acde:	f06f 0515 	mvn.w	r5, #21
}
   2ace2:	4628      	mov	r0, r5
   2ace4:	bd38      	pop	{r3, r4, r5, pc}

0002ace6 <fetch_and_process_hci_evt>:
{
   2ace6:	b538      	push	{r3, r4, r5, lr}
   2ace8:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2acea:	f04f 30ff 	mov.w	r0, #4294967295
   2acee:	f04f 31ff 	mov.w	r1, #4294967295
   2acf2:	f7f3 fe25 	bl	1e940 <multithreading_lock_acquire>
	if (!errcode) {
   2acf6:	4605      	mov	r5, r0
   2acf8:	b110      	cbz	r0, 2ad00 <fetch_and_process_hci_evt+0x1a>
	if (errcode) {
   2acfa:	b145      	cbz	r5, 2ad0e <fetch_and_process_hci_evt+0x28>
		return false;
   2acfc:	2000      	movs	r0, #0
}
   2acfe:	bd38      	pop	{r3, r4, r5, pc}
		errcode = hci_internal_evt_get(p_hci_buffer);
   2ad00:	4620      	mov	r0, r4
   2ad02:	f7f4 f897 	bl	1ee34 <hci_internal_evt_get>
   2ad06:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2ad08:	f7f3 fe24 	bl	1e954 <multithreading_lock_release>
   2ad0c:	e7f5      	b.n	2acfa <fetch_and_process_hci_evt+0x14>
	event_packet_process(p_hci_buffer);
   2ad0e:	4620      	mov	r0, r4
   2ad10:	f7f3 fee4 	bl	1eadc <event_packet_process>
	return true;
   2ad14:	2001      	movs	r0, #1
   2ad16:	e7f2      	b.n	2acfe <fetch_and_process_hci_evt+0x18>

0002ad18 <fetch_and_process_acl_data>:
{
   2ad18:	b538      	push	{r3, r4, r5, lr}
   2ad1a:	4604      	mov	r4, r0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2ad1c:	f04f 30ff 	mov.w	r0, #4294967295
   2ad20:	f04f 31ff 	mov.w	r1, #4294967295
   2ad24:	f7f3 fe0c 	bl	1e940 <multithreading_lock_acquire>
	if (!errcode) {
   2ad28:	4605      	mov	r5, r0
   2ad2a:	b110      	cbz	r0, 2ad32 <fetch_and_process_acl_data+0x1a>
	if (errcode) {
   2ad2c:	b145      	cbz	r5, 2ad40 <fetch_and_process_acl_data+0x28>
		return false;
   2ad2e:	2000      	movs	r0, #0
}
   2ad30:	bd38      	pop	{r3, r4, r5, pc}
		errcode = sdc_hci_data_get(p_hci_buffer);
   2ad32:	4620      	mov	r0, r4
   2ad34:	f7e2 fffc 	bl	dd30 <sdc_hci_data_get>
   2ad38:	4605      	mov	r5, r0
		MULTITHREADING_LOCK_RELEASE();
   2ad3a:	f7f3 fe0b 	bl	1e954 <multithreading_lock_release>
   2ad3e:	e7f5      	b.n	2ad2c <fetch_and_process_acl_data+0x14>
	data_packet_process(p_hci_buffer);
   2ad40:	4620      	mov	r0, r4
   2ad42:	f7f3 ff03 	bl	1eb4c <data_packet_process>
	return true;
   2ad46:	2001      	movs	r0, #1
   2ad48:	e7f2      	b.n	2ad30 <fetch_and_process_acl_data+0x18>

0002ad4a <configure_supported_features>:
{
   2ad4a:	b508      	push	{r3, lr}
			err = sdc_support_scan();
   2ad4c:	f7da f848 	bl	4de0 <sdc_support_scan>
			if (err) {
   2ad50:	b948      	cbnz	r0, 2ad66 <configure_supported_features+0x1c>
		err = sdc_support_master();
   2ad52:	f7da f835 	bl	4dc0 <sdc_support_master>
		if (err) {
   2ad56:	b948      	cbnz	r0, 2ad6c <configure_supported_features+0x22>
		err = sdc_support_dle();
   2ad58:	f7da f812 	bl	4d80 <sdc_support_dle>
		if (err) {
   2ad5c:	b948      	cbnz	r0, 2ad72 <configure_supported_features+0x28>
		err = sdc_support_le_2m_phy();
   2ad5e:	f7da f81f 	bl	4da0 <sdc_support_le_2m_phy>
		if (err) {
   2ad62:	b948      	cbnz	r0, 2ad78 <configure_supported_features+0x2e>
}
   2ad64:	bd08      	pop	{r3, pc}
				return -ENOTSUP;
   2ad66:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad6a:	e7fb      	b.n	2ad64 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2ad6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad70:	e7f8      	b.n	2ad64 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2ad72:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad76:	e7f5      	b.n	2ad64 <configure_supported_features+0x1a>
			return -ENOTSUP;
   2ad78:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2ad7c:	e7f2      	b.n	2ad64 <configure_supported_features+0x1a>

0002ad7e <command_generates_command_complete_event>:
	switch (hci_opcode) {
   2ad7e:	f242 0344 	movw	r3, #8260	; 0x2044
   2ad82:	4298      	cmp	r0, r3
   2ad84:	d834      	bhi.n	2adf0 <command_generates_command_complete_event+0x72>
   2ad86:	f242 030d 	movw	r3, #8205	; 0x200d
   2ad8a:	4298      	cmp	r0, r3
   2ad8c:	d20b      	bcs.n	2ada6 <command_generates_command_complete_event+0x28>
   2ad8e:	f240 4306 	movw	r3, #1030	; 0x406
   2ad92:	4298      	cmp	r0, r3
   2ad94:	d02e      	beq.n	2adf4 <command_generates_command_complete_event+0x76>
   2ad96:	f240 431d 	movw	r3, #1053	; 0x41d
   2ad9a:	4298      	cmp	r0, r3
   2ad9c:	d001      	beq.n	2ada2 <command_generates_command_complete_event+0x24>
		return true;
   2ad9e:	2001      	movs	r0, #1
   2ada0:	4770      	bx	lr
	switch (hci_opcode) {
   2ada2:	2000      	movs	r0, #0
   2ada4:	4770      	bx	lr
   2ada6:	f5a0 5000 	sub.w	r0, r0, #8192	; 0x2000
   2adaa:	380d      	subs	r0, #13
   2adac:	2837      	cmp	r0, #55	; 0x37
   2adae:	d823      	bhi.n	2adf8 <command_generates_command_complete_event+0x7a>
   2adb0:	e8df f000 	tbb	[pc, r0]
   2adb4:	2222221c 	.word	0x2222221c
   2adb8:	221c2222 	.word	0x221c2222
   2adbc:	22221c22 	.word	0x22221c22
   2adc0:	2222221c 	.word	0x2222221c
   2adc4:	22222222 	.word	0x22222222
   2adc8:	22222222 	.word	0x22222222
   2adcc:	22222222 	.word	0x22222222
   2add0:	22222222 	.word	0x22222222
   2add4:	22222222 	.word	0x22222222
   2add8:	22221c22 	.word	0x22221c22
   2addc:	22222222 	.word	0x22222222
   2ade0:	22222222 	.word	0x22222222
   2ade4:	22222222 	.word	0x22222222
   2ade8:	1c1c2222 	.word	0x1c1c2222
   2adec:	2000      	movs	r0, #0
   2adee:	4770      	bx	lr
		return true;
   2adf0:	2001      	movs	r0, #1
   2adf2:	4770      	bx	lr
	switch (hci_opcode) {
   2adf4:	2000      	movs	r0, #0
   2adf6:	4770      	bx	lr
		return true;
   2adf8:	2001      	movs	r0, #1
}
   2adfa:	4770      	bx	lr

0002adfc <encode_command_status>:
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2adfc:	230f      	movs	r3, #15
   2adfe:	7003      	strb	r3, [r0, #0]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2ae00:	2304      	movs	r3, #4
   2ae02:	7043      	strb	r3, [r0, #1]
	evt_data->status = status_code;
   2ae04:	7082      	strb	r2, [r0, #2]
	evt_data->ncmd = 1;
   2ae06:	2301      	movs	r3, #1
   2ae08:	70c3      	strb	r3, [r0, #3]
	evt_data->opcode = hci_opcode;
   2ae0a:	8081      	strh	r1, [r0, #4]
}
   2ae0c:	4770      	bx	lr

0002ae0e <encode_command_complete_header>:
{
   2ae0e:	b410      	push	{r4}
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2ae10:	240e      	movs	r4, #14
   2ae12:	7004      	strb	r4, [r0, #0]
	evt_hdr->len = param_length;
   2ae14:	7042      	strb	r2, [r0, #1]
	evt_data->ncmd = 1;
   2ae16:	2201      	movs	r2, #1
   2ae18:	7082      	strb	r2, [r0, #2]
	evt_data->opcode = hci_opcode;
   2ae1a:	f8a0 1003 	strh.w	r1, [r0, #3]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2ae1e:	7143      	strb	r3, [r0, #5]
}
   2ae20:	bc10      	pop	{r4}
   2ae22:	4770      	bx	lr

0002ae24 <le_read_supported_states>:
	*buf = states1;
   2ae24:	2370      	movs	r3, #112	; 0x70
   2ae26:	7003      	strb	r3, [r0, #0]
	*(buf + 4) = states2;
   2ae28:	2340      	movs	r3, #64	; 0x40
   2ae2a:	7103      	strb	r3, [r0, #4]
}
   2ae2c:	4770      	bx	lr

0002ae2e <status_param_cmd_put>:
}
   2ae2e:	2001      	movs	r0, #1
   2ae30:	4770      	bx	lr

0002ae32 <link_control_cmd_put>:
{
   2ae32:	b508      	push	{r3, lr}
	return ((uint16_t)src[1] << 8) | src[0];
   2ae34:	7842      	ldrb	r2, [r0, #1]
   2ae36:	f810 3b03 	ldrb.w	r3, [r0], #3
   2ae3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2ae3e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2ae40:	f240 4206 	movw	r2, #1030	; 0x406
   2ae44:	4293      	cmp	r3, r2
   2ae46:	d005      	beq.n	2ae54 <link_control_cmd_put+0x22>
   2ae48:	f240 421d 	movw	r2, #1053	; 0x41d
   2ae4c:	4293      	cmp	r3, r2
   2ae4e:	d004      	beq.n	2ae5a <link_control_cmd_put+0x28>
   2ae50:	2001      	movs	r0, #1
}
   2ae52:	bd08      	pop	{r3, pc}
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   2ae54:	f7e3 f8bf 	bl	dfd6 <sdc_hci_cmd_lc_disconnect>
   2ae58:	e7fb      	b.n	2ae52 <link_control_cmd_put+0x20>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   2ae5a:	f7e3 f8be 	bl	dfda <sdc_hci_cmd_lc_read_remote_version_information>
   2ae5e:	e7f8      	b.n	2ae52 <link_control_cmd_put+0x20>

0002ae60 <controller_and_baseband_cmd_put>:
{
   2ae60:	b538      	push	{r3, r4, r5, lr}
   2ae62:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2ae64:	3003      	adds	r0, #3
   2ae66:	7865      	ldrb	r5, [r4, #1]
   2ae68:	7823      	ldrb	r3, [r4, #0]
   2ae6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2ae6e:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2ae70:	f640 4463 	movw	r4, #3171	; 0xc63
   2ae74:	42a3      	cmp	r3, r4
   2ae76:	d02c      	beq.n	2aed2 <controller_and_baseband_cmd_put+0x72>
   2ae78:	f101 0106 	add.w	r1, r1, #6
   2ae7c:	dc16      	bgt.n	2aeac <controller_and_baseband_cmd_put+0x4c>
   2ae7e:	f640 4403 	movw	r4, #3075	; 0xc03
   2ae82:	42a3      	cmp	r3, r4
   2ae84:	d022      	beq.n	2aecc <controller_and_baseband_cmd_put+0x6c>
   2ae86:	f640 442d 	movw	r4, #3117	; 0xc2d
   2ae8a:	42a3      	cmp	r3, r4
   2ae8c:	d105      	bne.n	2ae9a <controller_and_baseband_cmd_put+0x3a>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   2ae8e:	7813      	ldrb	r3, [r2, #0]
   2ae90:	3303      	adds	r3, #3
   2ae92:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   2ae94:	f7e2 ff73 	bl	dd7e <sdc_hci_cmd_cb_read_transmit_power_level>
   2ae98:	e007      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2ae9a:	f640 4201 	movw	r2, #3073	; 0xc01
   2ae9e:	4293      	cmp	r3, r2
   2aea0:	d102      	bne.n	2aea8 <controller_and_baseband_cmd_put+0x48>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   2aea2:	f7e2 ff6e 	bl	dd82 <sdc_hci_cmd_cb_set_event_mask>
   2aea6:	e000      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2aea8:	2001      	movs	r0, #1
}
   2aeaa:	bd38      	pop	{r3, r4, r5, pc}
	switch (opcode)	{
   2aeac:	f640 447b 	movw	r4, #3195	; 0xc7b
   2aeb0:	42a3      	cmp	r3, r4
   2aeb2:	d011      	beq.n	2aed8 <controller_and_baseband_cmd_put+0x78>
   2aeb4:	f640 447c 	movw	r4, #3196	; 0xc7c
   2aeb8:	42a3      	cmp	r3, r4
   2aeba:	d105      	bne.n	2aec8 <controller_and_baseband_cmd_put+0x68>
		*param_length_out +=
   2aebc:	7813      	ldrb	r3, [r2, #0]
   2aebe:	3302      	adds	r3, #2
   2aec0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2aec2:	f7e2 ff68 	bl	dd96 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
   2aec6:	e7f0      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>
	switch (opcode)	{
   2aec8:	2001      	movs	r0, #1
   2aeca:	e7ee      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_reset();
   2aecc:	f7da f8c8 	bl	5060 <sdc_hci_cmd_cb_reset>
   2aed0:	e7eb      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   2aed2:	f7e2 ff5b 	bl	dd8c <sdc_hci_cmd_cb_set_event_mask_page_2>
   2aed6:	e7e8      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>
		*param_length_out +=
   2aed8:	7813      	ldrb	r3, [r2, #0]
   2aeda:	3304      	adds	r3, #4
   2aedc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   2aede:	f7e2 ff4c 	bl	dd7a <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
   2aee2:	e7e2      	b.n	2aeaa <controller_and_baseband_cmd_put+0x4a>

0002aee4 <supported_commands>:
{
   2aee4:	b510      	push	{r4, lr}
   2aee6:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2aee8:	222e      	movs	r2, #46	; 0x2e
   2aeea:	2100      	movs	r1, #0
   2aeec:	f7fc fed4 	bl	27c98 <memset>
	cmds->hci_disconnect = 1;
   2aef0:	7823      	ldrb	r3, [r4, #0]
   2aef2:	f043 0320 	orr.w	r3, r3, #32
   2aef6:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   2aef8:	78a3      	ldrb	r3, [r4, #2]
   2aefa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2aefe:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2af00:	7963      	ldrb	r3, [r4, #5]
	cmds->hci_reset = 1;
   2af02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   2af06:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   2af08:	7aa3      	ldrb	r3, [r4, #10]
   2af0a:	f043 0304 	orr.w	r3, r3, #4
   2af0e:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2af10:	7ba3      	ldrb	r3, [r4, #14]
	cmds->hci_read_local_supported_features = 1;
   2af12:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2af16:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   2af18:	7be3      	ldrb	r3, [r4, #15]
   2af1a:	f043 0302 	orr.w	r3, r3, #2
   2af1e:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2af20:	7da3      	ldrb	r3, [r4, #22]
   2af22:	f043 0304 	orr.w	r3, r3, #4
   2af26:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   2af28:	7e63      	ldrb	r3, [r4, #25]
	cmds->hci_le_set_random_address = 1;
   2af2a:	f043 0317 	orr.w	r3, r3, #23
   2af2e:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_parameters = 1;
   2af30:	7ea3      	ldrb	r3, [r4, #26]
	cmds->hci_le_clear_white_list = 1;
   2af32:	f043 03fc 	orr.w	r3, r3, #252	; 0xfc
   2af36:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_rand = 1;
   2af38:	23ff      	movs	r3, #255	; 0xff
   2af3a:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_enable_encryption = 1;
   2af3c:	7f23      	ldrb	r3, [r4, #28]
	cmds->hci_le_test_end = 1;
   2af3e:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   2af42:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2af44:	f894 3020 	ldrb.w	r3, [r4, #32]
	cmds->hci_write_authenticated_payload_timeout = 1;
   2af48:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   2af4c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   2af50:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_read_suggested_default_data_length = 1;
   2af54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   2af58:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   2af5c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_resolving_list_size = 1;
   2af60:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   2af64:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_set_address_resolution_enable = 1;
   2af68:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_receiver_test_v2 = 1;
   2af6c:	f043 03fe 	orr.w	r3, r3, #254	; 0xfe
   2af70:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   2af74:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   2af78:	f043 0301 	orr.w	r3, r3, #1
   2af7c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   2af80:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   2af84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2af88:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_set_privacy_mode = 1;
   2af8c:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   2af90:	f043 0304 	orr.w	r3, r3, #4
   2af94:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
}
   2af98:	bd10      	pop	{r4, pc}

0002af9a <supported_features>:
{
   2af9a:	b510      	push	{r4, lr}
   2af9c:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2af9e:	2208      	movs	r2, #8
   2afa0:	2100      	movs	r1, #0
   2afa2:	f7fc fe79 	bl	27c98 <memset>
	features->bdedr_not_supported = 1;
   2afa6:	7923      	ldrb	r3, [r4, #4]
	features->le_supported = 1;
   2afa8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2afac:	7123      	strb	r3, [r4, #4]
}
   2afae:	bd10      	pop	{r4, pc}

0002afb0 <info_param_cmd_put>:
{
   2afb0:	b538      	push	{r3, r4, r5, lr}
   2afb2:	4604      	mov	r4, r0
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2afb4:	1d88      	adds	r0, r1, #6
   2afb6:	7865      	ldrb	r5, [r4, #1]
   2afb8:	7823      	ldrb	r3, [r4, #0]
   2afba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2afbe:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2afc0:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   2afc4:	3b01      	subs	r3, #1
   2afc6:	2b08      	cmp	r3, #8
   2afc8:	d820      	bhi.n	2b00c <info_param_cmd_put+0x5c>
   2afca:	e8df f003 	tbb	[pc, r3]
   2afce:	0b05      	.short	0x0b05
   2afd0:	1f1f1f12 	.word	0x1f1f1f12
   2afd4:	1f1f      	.short	0x1f1f
   2afd6:	19          	.byte	0x19
   2afd7:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   2afd8:	7813      	ldrb	r3, [r2, #0]
   2afda:	3308      	adds	r3, #8
   2afdc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   2afde:	f7e2 ffb3 	bl	df48 <sdc_hci_cmd_ip_read_local_version_information>
   2afe2:	e014      	b.n	2b00e <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   2afe4:	7813      	ldrb	r3, [r2, #0]
   2afe6:	3340      	adds	r3, #64	; 0x40
   2afe8:	7013      	strb	r3, [r2, #0]
		supported_commands((void *)event_out_params);
   2afea:	f7ff ff7b 	bl	2aee4 <supported_commands>
		return 0;
   2afee:	2000      	movs	r0, #0
   2aff0:	e00d      	b.n	2b00e <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   2aff2:	7813      	ldrb	r3, [r2, #0]
   2aff4:	3308      	adds	r3, #8
   2aff6:	7013      	strb	r3, [r2, #0]
		supported_features((void *)event_out_params);
   2aff8:	f7ff ffcf 	bl	2af9a <supported_features>
		return 0;
   2affc:	2000      	movs	r0, #0
   2affe:	e006      	b.n	2b00e <info_param_cmd_put+0x5e>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   2b000:	7813      	ldrb	r3, [r2, #0]
   2b002:	3306      	adds	r3, #6
   2b004:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2b006:	f7e2 ff9d 	bl	df44 <sdc_hci_cmd_ip_read_bd_addr>
   2b00a:	e000      	b.n	2b00e <info_param_cmd_put+0x5e>
   2b00c:	2001      	movs	r0, #1
}
   2b00e:	bd38      	pop	{r3, r4, r5, pc}

0002b010 <le_supported_features>:
{
   2b010:	b510      	push	{r4, lr}
   2b012:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   2b014:	2205      	movs	r2, #5
   2b016:	2100      	movs	r1, #0
   2b018:	f7fc fe3e 	bl	27c98 <memset>
	features->le_encryption = 1;
   2b01c:	7823      	ldrb	r3, [r4, #0]
	features->extended_scanner_filter_policies = 1;
   2b01e:	f043 03f5 	orr.w	r3, r3, #245	; 0xf5
   2b022:	7023      	strb	r3, [r4, #0]
	features->le_2m_phy = 1;
   2b024:	7863      	ldrb	r3, [r4, #1]
	features->channel_selection_algorithm_2 = 1;
   2b026:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2b02a:	7063      	strb	r3, [r4, #1]
}
   2b02c:	bd10      	pop	{r4, pc}

0002b02e <vs_zephyr_supported_commands>:
{
   2b02e:	b510      	push	{r4, lr}
   2b030:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2b032:	2202      	movs	r2, #2
   2b034:	2100      	movs	r1, #0
   2b036:	f7fc fe2f 	bl	27c98 <memset>
	cmds->read_version_info = 1;
   2b03a:	7823      	ldrb	r3, [r4, #0]
	cmds->write_bd_addr = 1;
   2b03c:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   2b040:	7023      	strb	r3, [r4, #0]
	cmds->read_static_addresses = 1;
   2b042:	7863      	ldrb	r3, [r4, #1]
	cmds->read_chip_temperature = 1;
   2b044:	f043 0307 	orr.w	r3, r3, #7
   2b048:	7063      	strb	r3, [r4, #1]
}
   2b04a:	bd10      	pop	{r4, pc}

0002b04c <vs_supported_commands>:
{
   2b04c:	b510      	push	{r4, lr}
   2b04e:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   2b050:	2201      	movs	r2, #1
   2b052:	2100      	movs	r1, #0
   2b054:	f7fc fe20 	bl	27c98 <memset>
	cmds->read_supported_vs_commands = 1;
   2b058:	7823      	ldrb	r3, [r4, #0]
	cmds->event_length_set = 1;
   2b05a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   2b05e:	7023      	strb	r3, [r4, #0]
}
   2b060:	bd10      	pop	{r4, pc}

0002b062 <le_controller_cmd_put>:
{
   2b062:	b538      	push	{r3, r4, r5, lr}
   2b064:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2b066:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2b068:	3106      	adds	r1, #6
   2b06a:	7865      	ldrb	r5, [r4, #1]
   2b06c:	7823      	ldrb	r3, [r4, #0]
   2b06e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2b072:	b21b      	sxth	r3, r3
	switch (opcode)	{
   2b074:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   2b078:	3b01      	subs	r3, #1
   2b07a:	2b4d      	cmp	r3, #77	; 0x4d
   2b07c:	f200 80c4 	bhi.w	2b208 <le_controller_cmd_put+0x1a6>
   2b080:	e8df f003 	tbb	[pc, r3]
   2b084:	c2312a27 	.word	0xc2312a27
   2b088:	c2c2c239 	.word	0xc2c2c239
   2b08c:	3f3cc2c2 	.word	0x3f3cc2c2
   2b090:	4f484542 	.word	0x4f484542
   2b094:	5b585552 	.word	0x5b585552
   2b098:	6d67645e 	.word	0x6d67645e
   2b09c:	77c2c274 	.word	0x77c2c274
   2b0a0:	c2c2c2c2 	.word	0xc2c2c2c2
   2b0a4:	8c857fc2 	.word	0x8c857fc2
   2b0a8:	928fc2c2 	.word	0x928fc2c2
   2b0ac:	c2c29895 	.word	0xc2c29895
   2b0b0:	aca5a29f 	.word	0xaca5a29f
   2b0b4:	c2c2b5b2 	.word	0xc2c2b5b2
   2b0b8:	c2c2c2c2 	.word	0xc2c2c2c2
   2b0bc:	c2c2c2c2 	.word	0xc2c2c2c2
   2b0c0:	c2c2c2c2 	.word	0xc2c2c2c2
   2b0c4:	c2c2c2c2 	.word	0xc2c2c2c2
   2b0c8:	c2c2c2c2 	.word	0xc2c2c2c2
   2b0cc:	c2b8c2c2 	.word	0xc2b8c2c2
   2b0d0:	bfc2      	.short	0xbfc2
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   2b0d2:	f7e2 ff6b 	bl	dfac <sdc_hci_cmd_le_set_event_mask>
   2b0d6:	e098      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   2b0d8:	7813      	ldrb	r3, [r2, #0]
   2b0da:	3303      	adds	r3, #3
   2b0dc:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2b0de:	4608      	mov	r0, r1
   2b0e0:	f7e2 ff48 	bl	df74 <sdc_hci_cmd_le_read_buffer_size>
   2b0e4:	e091      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2b0e6:	7813      	ldrb	r3, [r2, #0]
   2b0e8:	3308      	adds	r3, #8
   2b0ea:	7013      	strb	r3, [r2, #0]
		le_supported_features((void *)event_out_params);
   2b0ec:	4608      	mov	r0, r1
   2b0ee:	f7ff ff8f 	bl	2b010 <le_supported_features>
		return 0;
   2b0f2:	2000      	movs	r0, #0
   2b0f4:	e089      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   2b0f6:	f7e2 ff64 	bl	dfc2 <sdc_hci_cmd_le_set_random_address>
   2b0fa:	e086      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2b0fc:	f7e2 ff67 	bl	dfce <sdc_hci_cmd_le_set_scan_params>
   2b100:	e083      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   2b102:	f7e2 ff62 	bl	dfca <sdc_hci_cmd_le_set_scan_enable>
   2b106:	e080      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   2b108:	f7e2 ff2a 	bl	df60 <sdc_hci_cmd_le_create_conn>
   2b10c:	e07d      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_create_conn_cancel();
   2b10e:	f7e2 ff29 	bl	df64 <sdc_hci_cmd_le_create_conn_cancel>
   2b112:	e07a      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_white_list_size_return_t);
   2b114:	7813      	ldrb	r3, [r2, #0]
   2b116:	3301      	adds	r3, #1
   2b118:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2b11a:	4608      	mov	r0, r1
   2b11c:	f7e2 ff3a 	bl	df94 <sdc_hci_cmd_le_read_white_list_size>
   2b120:	e073      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_white_list();
   2b122:	f7e2 ff19 	bl	df58 <sdc_hci_cmd_le_clear_white_list>
   2b126:	e070      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   2b128:	f7e2 ff12 	bl	df50 <sdc_hci_cmd_le_add_device_to_white_list>
   2b12c:	e06d      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   2b12e:	f7e2 ff35 	bl	df9c <sdc_hci_cmd_le_remove_device_from_white_list>
   2b132:	e06a      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   2b134:	f7e2 ff12 	bl	df5c <sdc_hci_cmd_le_conn_update>
   2b138:	e067      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   2b13a:	f7e2 ff3c 	bl	dfb6 <sdc_hci_cmd_le_set_host_channel_classification>
   2b13e:	e064      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2b140:	7813      	ldrb	r3, [r2, #0]
   2b142:	3307      	adds	r3, #7
   2b144:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2b146:	f7e2 ff17 	bl	df78 <sdc_hci_cmd_le_read_channel_map>
   2b14a:	e05e      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   2b14c:	f7e2 ff1a 	bl	df84 <sdc_hci_cmd_le_read_remote_features>
   2b150:	e05b      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2b152:	7813      	ldrb	r3, [r2, #0]
   2b154:	3310      	adds	r3, #16
   2b156:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2b158:	f7e2 ff08 	bl	df6c <sdc_hci_cmd_le_encrypt>
   2b15c:	e055      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   2b15e:	7813      	ldrb	r3, [r2, #0]
   2b160:	3308      	adds	r3, #8
   2b162:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   2b164:	4608      	mov	r0, r1
   2b166:	f7e2 ff03 	bl	df70 <sdc_hci_cmd_le_rand>
   2b16a:	e04e      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   2b16c:	f7e2 fefc 	bl	df68 <sdc_hci_cmd_le_enable_encryption>
   2b170:	e04b      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   2b172:	7813      	ldrb	r3, [r2, #0]
   2b174:	3308      	adds	r3, #8
   2b176:	7013      	strb	r3, [r2, #0]
		le_read_supported_states((void *)event_out_params);
   2b178:	4608      	mov	r0, r1
   2b17a:	f7ff fe53 	bl	2ae24 <le_read_supported_states>
		return 0;
   2b17e:	2000      	movs	r0, #0
   2b180:	e043      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   2b182:	7813      	ldrb	r3, [r2, #0]
   2b184:	3302      	adds	r3, #2
   2b186:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   2b188:	f7e2 ff0c 	bl	dfa4 <sdc_hci_cmd_le_set_data_length>
   2b18c:	e03d      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out +=
   2b18e:	7813      	ldrb	r3, [r2, #0]
   2b190:	3304      	adds	r3, #4
   2b192:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   2b194:	4608      	mov	r0, r1
   2b196:	f7e2 fef9 	bl	df8c <sdc_hci_cmd_le_read_suggested_default_data_length>
   2b19a:	e036      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   2b19c:	f7e2 ff19 	bl	dfd2 <sdc_hci_cmd_le_write_suggested_default_data_length>
   2b1a0:	e033      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   2b1a2:	f7e2 fed3 	bl	df4c <sdc_hci_cmd_le_add_device_to_resolving_list>
   2b1a6:	e030      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   2b1a8:	f7e2 fef6 	bl	df98 <sdc_hci_cmd_le_remove_device_from_resolving_list>
   2b1ac:	e02d      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_clear_resolving_list();
   2b1ae:	f7e2 fed1 	bl	df54 <sdc_hci_cmd_le_clear_resolving_list>
   2b1b2:	e02a      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   2b1b4:	7813      	ldrb	r3, [r2, #0]
   2b1b6:	3301      	adds	r3, #1
   2b1b8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   2b1ba:	4608      	mov	r0, r1
   2b1bc:	f7e2 fee4 	bl	df88 <sdc_hci_cmd_le_read_resolving_list_size>
   2b1c0:	e023      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   2b1c2:	f7e2 feed 	bl	dfa0 <sdc_hci_cmd_le_set_address_resolution_enable>
   2b1c6:	e020      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   2b1c8:	f7e2 fefd 	bl	dfc6 <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   2b1cc:	e01d      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2b1ce:	7813      	ldrb	r3, [r2, #0]
   2b1d0:	3308      	adds	r3, #8
   2b1d2:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2b1d4:	4608      	mov	r0, r1
   2b1d6:	f7e2 fed1 	bl	df7c <sdc_hci_cmd_le_read_max_data_length>
   2b1da:	e016      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   2b1dc:	7813      	ldrb	r3, [r2, #0]
   2b1de:	3304      	adds	r3, #4
   2b1e0:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2b1e2:	f7e2 fecd 	bl	df80 <sdc_hci_cmd_le_read_phy>
   2b1e6:	e010      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   2b1e8:	f7e2 fede 	bl	dfa8 <sdc_hci_cmd_le_set_default_phy>
   2b1ec:	e00d      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2b1ee:	f7e2 fee4 	bl	dfba <sdc_hci_cmd_le_set_phy>
   2b1f2:	e00a      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   2b1f4:	7813      	ldrb	r3, [r2, #0]
   2b1f6:	3302      	adds	r3, #2
   2b1f8:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   2b1fa:	4608      	mov	r0, r1
   2b1fc:	f7e2 fec8 	bl	df90 <sdc_hci_cmd_le_read_transmit_power>
   2b200:	e003      	b.n	2b20a <le_controller_cmd_put+0x1a8>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2b202:	f7e2 fedc 	bl	dfbe <sdc_hci_cmd_le_set_privacy_mode>
   2b206:	e000      	b.n	2b20a <le_controller_cmd_put+0x1a8>
   2b208:	2001      	movs	r0, #1
}
   2b20a:	bd38      	pop	{r3, r4, r5, pc}

0002b20c <vs_cmd_put>:
{
   2b20c:	b538      	push	{r3, r4, r5, lr}
   2b20e:	4604      	mov	r4, r0
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2b210:	3003      	adds	r0, #3
	uint8_t * const event_out_params = &raw_event_out[CMD_COMPLETE_MIN_SIZE];
   2b212:	3106      	adds	r1, #6
   2b214:	7865      	ldrb	r5, [r4, #1]
   2b216:	7823      	ldrb	r3, [r4, #0]
   2b218:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	switch (opcode)	{
   2b21c:	f64f 440a 	movw	r4, #64522	; 0xfc0a
   2b220:	42a3      	cmp	r3, r4
   2b222:	d90f      	bls.n	2b244 <vs_cmd_put+0x38>
   2b224:	f64f 5405 	movw	r4, #64773	; 0xfd05
   2b228:	42a3      	cmp	r3, r4
   2b22a:	d85b      	bhi.n	2b2e4 <vs_cmd_put+0xd8>
   2b22c:	f5b3 4f7d 	cmp.w	r3, #64768	; 0xfd00
   2b230:	d319      	bcc.n	2b266 <vs_cmd_put+0x5a>
   2b232:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   2b236:	2b05      	cmp	r3, #5
   2b238:	d850      	bhi.n	2b2dc <vs_cmd_put+0xd0>
   2b23a:	e8df f003 	tbb	[pc, r3]
   2b23e:	4038      	.short	0x4038
   2b240:	4c494643 	.word	0x4c494643
   2b244:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   2b248:	d801      	bhi.n	2b24e <vs_cmd_put+0x42>
   2b24a:	2001      	movs	r0, #1
}
   2b24c:	bd38      	pop	{r3, r4, r5, pc}
   2b24e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   2b252:	3b01      	subs	r3, #1
   2b254:	2b09      	cmp	r3, #9
   2b256:	d843      	bhi.n	2b2e0 <vs_cmd_put+0xd4>
   2b258:	e8df f003 	tbb	[pc, r3]
   2b25c:	42420e07 	.word	0x42420e07
   2b260:	42422642 	.word	0x42422642
   2b264:	1f16      	.short	0x1f16
	switch (opcode)	{
   2b266:	2001      	movs	r0, #1
   2b268:	e7f0      	b.n	2b24c <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   2b26a:	7813      	ldrb	r3, [r2, #0]
   2b26c:	330c      	adds	r3, #12
   2b26e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   2b270:	4608      	mov	r0, r1
   2b272:	f7d9 ff09 	bl	5088 <sdc_hci_cmd_vs_zephyr_read_version_info>
   2b276:	e7e9      	b.n	2b24c <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   2b278:	7813      	ldrb	r3, [r2, #0]
   2b27a:	3340      	adds	r3, #64	; 0x40
   2b27c:	7013      	strb	r3, [r2, #0]
		vs_zephyr_supported_commands((void *)event_out_params);
   2b27e:	4608      	mov	r0, r1
   2b280:	f7ff fed5 	bl	2b02e <vs_zephyr_supported_commands>
		return 0;
   2b284:	2000      	movs	r0, #0
   2b286:	e7e1      	b.n	2b24c <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_static_addresses_return_t);
   2b288:	7813      	ldrb	r3, [r2, #0]
   2b28a:	3301      	adds	r3, #1
   2b28c:	b2db      	uxtb	r3, r3
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2b28e:	3316      	adds	r3, #22
   2b290:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2b292:	4608      	mov	r0, r1
   2b294:	f7e2 fe09 	bl	deaa <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   2b298:	e7d8      	b.n	2b24c <vs_cmd_put+0x40>
		*param_length_out +=
   2b29a:	7813      	ldrb	r3, [r2, #0]
   2b29c:	3320      	adds	r3, #32
   2b29e:	7013      	strb	r3, [r2, #0]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   2b2a0:	4608      	mov	r0, r1
   2b2a2:	f7e2 fdb5 	bl	de10 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   2b2a6:	e7d1      	b.n	2b24c <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2b2a8:	f7e2 fe4a 	bl	df40 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   2b2ac:	e7ce      	b.n	2b24c <vs_cmd_put+0x40>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   2b2ae:	7813      	ldrb	r3, [r2, #0]
   2b2b0:	3340      	adds	r3, #64	; 0x40
   2b2b2:	7013      	strb	r3, [r2, #0]
		vs_supported_commands((void *)event_out_params);
   2b2b4:	4608      	mov	r0, r1
   2b2b6:	f7ff fec9 	bl	2b04c <vs_supported_commands>
		return 0;
   2b2ba:	2000      	movs	r0, #0
   2b2bc:	e7c6      	b.n	2b24c <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   2b2be:	f7e2 fda0 	bl	de02 <sdc_hci_cmd_vs_llpm_mode_set>
   2b2c2:	e7c3      	b.n	2b24c <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2b2c4:	f7e2 fd71 	bl	ddaa <sdc_hci_cmd_vs_conn_update>
   2b2c8:	e7c0      	b.n	2b24c <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   2b2ca:	f7e2 fd66 	bl	dd9a <sdc_hci_cmd_vs_conn_event_extend>
   2b2ce:	e7bd      	b.n	2b24c <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2b2d0:	f7e2 fd99 	bl	de06 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2b2d4:	e7ba      	b.n	2b24c <vs_cmd_put+0x40>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   2b2d6:	f7e2 fd92 	bl	ddfe <sdc_hci_cmd_vs_event_length_set>
   2b2da:	e7b7      	b.n	2b24c <vs_cmd_put+0x40>
	switch (opcode)	{
   2b2dc:	2001      	movs	r0, #1
   2b2de:	e7b5      	b.n	2b24c <vs_cmd_put+0x40>
   2b2e0:	2001      	movs	r0, #1
   2b2e2:	e7b3      	b.n	2b24c <vs_cmd_put+0x40>
   2b2e4:	2001      	movs	r0, #1
   2b2e6:	e7b1      	b.n	2b24c <vs_cmd_put+0x40>

0002b2e8 <cmd_put>:
{
   2b2e8:	b570      	push	{r4, r5, r6, lr}
   2b2ea:	b082      	sub	sp, #8
   2b2ec:	460e      	mov	r6, r1
   2b2ee:	7842      	ldrb	r2, [r0, #1]
   2b2f0:	7805      	ldrb	r5, [r0, #0]
   2b2f2:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2b2f6:	2304      	movs	r3, #4
   2b2f8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (BT_OGF(opcode)) {
   2b2fc:	0893      	lsrs	r3, r2, #2
   2b2fe:	2a23      	cmp	r2, #35	; 0x23
   2b300:	d80b      	bhi.n	2b31a <cmd_put+0x32>
   2b302:	b21a      	sxth	r2, r3
   2b304:	2a00      	cmp	r2, #0
   2b306:	d03a      	beq.n	2b37e <cmd_put+0x96>
   2b308:	3b01      	subs	r3, #1
   2b30a:	2b07      	cmp	r3, #7
   2b30c:	d839      	bhi.n	2b382 <cmd_put+0x9a>
   2b30e:	e8df f003 	tbb	[pc, r3]
   2b312:	381a      	.short	0x381a
   2b314:	382a241e 	.word	0x382a241e
   2b318:	3038      	.short	0x3038
   2b31a:	2b3f      	cmp	r3, #63	; 0x3f
   2b31c:	d105      	bne.n	2b32a <cmd_put+0x42>
		status = vs_cmd_put(cmd_in,
   2b31e:	f10d 0207 	add.w	r2, sp, #7
   2b322:	f7ff ff73 	bl	2b20c <vs_cmd_put>
   2b326:	4604      	mov	r4, r0
		break;
   2b328:	e000      	b.n	2b32c <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   2b32a:	2401      	movs	r4, #1
	if (!command_generates_command_complete_event(opcode) ||
   2b32c:	4628      	mov	r0, r5
   2b32e:	f7ff fd26 	bl	2ad7e <command_generates_command_complete_event>
   2b332:	b108      	cbz	r0, 2b338 <cmd_put+0x50>
   2b334:	2c01      	cmp	r4, #1
   2b336:	d126      	bne.n	2b386 <cmd_put+0x9e>
		encode_command_status(raw_event_out, opcode, status);
   2b338:	4622      	mov	r2, r4
   2b33a:	4629      	mov	r1, r5
   2b33c:	4630      	mov	r0, r6
   2b33e:	f7ff fd5d 	bl	2adfc <encode_command_status>
}
   2b342:	b002      	add	sp, #8
   2b344:	bd70      	pop	{r4, r5, r6, pc}
		status = link_control_cmd_put(cmd_in);
   2b346:	f7ff fd74 	bl	2ae32 <link_control_cmd_put>
   2b34a:	4604      	mov	r4, r0
		break;
   2b34c:	e7ee      	b.n	2b32c <cmd_put+0x44>
		status = controller_and_baseband_cmd_put(cmd_in,
   2b34e:	f10d 0207 	add.w	r2, sp, #7
   2b352:	f7ff fd85 	bl	2ae60 <controller_and_baseband_cmd_put>
   2b356:	4604      	mov	r4, r0
		break;
   2b358:	e7e8      	b.n	2b32c <cmd_put+0x44>
		status = info_param_cmd_put(cmd_in,
   2b35a:	f10d 0207 	add.w	r2, sp, #7
   2b35e:	f7ff fe27 	bl	2afb0 <info_param_cmd_put>
   2b362:	4604      	mov	r4, r0
		break;
   2b364:	e7e2      	b.n	2b32c <cmd_put+0x44>
		status = status_param_cmd_put(cmd_in,
   2b366:	f10d 0207 	add.w	r2, sp, #7
   2b36a:	f7ff fd60 	bl	2ae2e <status_param_cmd_put>
   2b36e:	4604      	mov	r4, r0
		break;
   2b370:	e7dc      	b.n	2b32c <cmd_put+0x44>
		status = le_controller_cmd_put(cmd_in,
   2b372:	f10d 0207 	add.w	r2, sp, #7
   2b376:	f7ff fe74 	bl	2b062 <le_controller_cmd_put>
   2b37a:	4604      	mov	r4, r0
		break;
   2b37c:	e7d6      	b.n	2b32c <cmd_put+0x44>
	switch (BT_OGF(opcode)) {
   2b37e:	2401      	movs	r4, #1
   2b380:	e7d4      	b.n	2b32c <cmd_put+0x44>
   2b382:	2401      	movs	r4, #1
   2b384:	e7d2      	b.n	2b32c <cmd_put+0x44>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   2b386:	4623      	mov	r3, r4
   2b388:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2b38c:	4629      	mov	r1, r5
   2b38e:	4630      	mov	r0, r6
   2b390:	f7ff fd3d 	bl	2ae0e <encode_command_complete_header>
}
   2b394:	e7d5      	b.n	2b342 <cmd_put+0x5a>

0002b396 <m_config_clock_source_get>:
}
   2b396:	2001      	movs	r0, #1
   2b398:	4770      	bx	lr

0002b39a <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2b39a:	4668      	mov	r0, sp
   2b39c:	f020 0107 	bic.w	r1, r0, #7
   2b3a0:	468d      	mov	sp, r1
   2b3a2:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2b3a4:	f7d8 fa7a 	bl	389c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2b3a8:	f7e9 ff1c 	bl	151e4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2b3ac:	f7ea f826 	bl	153fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2b3b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b3b4:	4685      	mov	sp, r0
   2b3b6:	4770      	bx	lr

0002b3b8 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2b3b8:	4668      	mov	r0, sp
   2b3ba:	f020 0107 	bic.w	r1, r0, #7
   2b3be:	468d      	mov	sp, r1
   2b3c0:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2b3c2:	f7d8 f9ed 	bl	37a0 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2b3c6:	f7e9 ff0d 	bl	151e4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2b3ca:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b3ce:	4685      	mov	sp, r0
   2b3d0:	4770      	bx	lr

0002b3d2 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2b3d2:	4668      	mov	r0, sp
   2b3d4:	f020 0107 	bic.w	r1, r0, #7
   2b3d8:	468d      	mov	sp, r1
   2b3da:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2b3dc:	f7e1 ff31 	bl	d242 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2b3e0:	f7e9 ff00 	bl	151e4 <_arch_isr_direct_pm>
   2b3e4:	f7ea f80a 	bl	153fc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2b3e8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2b3ec:	4685      	mov	sp, r0
   2b3ee:	4770      	bx	lr

0002b3f0 <nrfx_clock_stop>:
	switch (domain) {
   2b3f0:	2801      	cmp	r0, #1
   2b3f2:	d000      	beq.n	2b3f6 <nrfx_clock_stop+0x6>
   2b3f4:	4770      	bx	lr
{
   2b3f6:	b508      	push	{r3, lr}
		mpsl_clock_hfclk_release();
   2b3f8:	f7d9 f846 	bl	4488 <mpsl_clock_hfclk_release>
}
   2b3fc:	bd08      	pop	{r3, pc}

0002b3fe <nrfx_clock_enable>:
}
   2b3fe:	4770      	bx	lr

0002b400 <nrfx_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
   2b400:	b508      	push	{r3, lr}
	MPSL_IRQ_CLOCK_Handler();
   2b402:	f7d8 fe5f 	bl	40c4 <MPSL_IRQ_CLOCK_Handler>
}
   2b406:	bd08      	pop	{r3, pc}

0002b408 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   2b408:	b508      	push	{r3, lr}

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   2b40a:	f7f7 ff8f 	bl	2332c <nrf_cc3xx_platform_init>
#else
	res = nrf_cc3xx_platform_init_no_rng();
#endif

	return res;
}
   2b40e:	bd08      	pop	{r3, pc}

0002b410 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   2b410:	b510      	push	{r4, lr}
   2b412:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2b414:	f7e9 fd5a 	bl	14ecc <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   2b418:	f7e9 fe16 	bl	15048 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   2b41c:	4620      	mov	r0, r4
   2b41e:	f7ff fff3 	bl	2b408 <hw_cc3xx_init_internal>
	return res;
}
   2b422:	bd10      	pop	{r4, pc}

0002b424 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   2b424:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   2b426:	4780      	blx	r0
}
   2b428:	bd08      	pop	{r3, pc}

0002b42a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   2b42a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2b42c:	f000 fe30 	bl	2c090 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   2b430:	bd08      	pop	{r3, pc}

0002b432 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   2b432:	2301      	movs	r3, #1
   2b434:	4083      	lsls	r3, r0
   2b436:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   2b43a:	bf14      	ite	ne
   2b43c:	2001      	movne	r0, #1
   2b43e:	2000      	moveq	r0, #0
   2b440:	4770      	bx	lr

0002b442 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   2b442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b446:	f44f 7260 	mov.w	r2, #896	; 0x380
   2b44a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2b44e:	4770      	bx	lr

0002b450 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   2b450:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2b454:	f44f 7260 	mov.w	r2, #896	; 0x380
   2b458:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2b45c:	4770      	bx	lr

0002b45e <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   2b45e:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   2b460:	f7f4 f832 	bl	1f4c8 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   2b464:	f7ff ffcc 	bl	2b400 <nrfx_clock_irq_handler>
}
   2b468:	bd08      	pop	{r3, pc}

0002b46a <nrf52_errata_223>:
}
   2b46a:	2000      	movs	r0, #0
   2b46c:	4770      	bx	lr

0002b46e <nrfx_usbd_consumer>:
{
   2b46e:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   2b470:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   2b472:	42a3      	cmp	r3, r4
   2b474:	d908      	bls.n	2b488 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   2b476:	2500      	movs	r5, #0
   2b478:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2b47a:	6809      	ldr	r1, [r1, #0]
   2b47c:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   2b47e:	429a      	cmp	r2, r3
   2b480:	d00b      	beq.n	2b49a <nrfx_usbd_consumer+0x2c>
   2b482:	2000      	movs	r0, #0
}
   2b484:	bc30      	pop	{r4, r5}
   2b486:	4770      	bx	lr
        p_next->size = data_size;
   2b488:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   2b48a:	680d      	ldr	r5, [r1, #0]
   2b48c:	6005      	str	r5, [r0, #0]
        size -= data_size;
   2b48e:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   2b490:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   2b492:	6808      	ldr	r0, [r1, #0]
   2b494:	4418      	add	r0, r3
   2b496:	6008      	str	r0, [r1, #0]
   2b498:	e7f1      	b.n	2b47e <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   2b49a:	b90c      	cbnz	r4, 2b4a0 <nrfx_usbd_consumer+0x32>
   2b49c:	2000      	movs	r0, #0
   2b49e:	e7f1      	b.n	2b484 <nrfx_usbd_consumer+0x16>
   2b4a0:	2001      	movs	r0, #1
   2b4a2:	e7ef      	b.n	2b484 <nrfx_usbd_consumer+0x16>

0002b4a4 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   2b4a4:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   2b4a6:	4293      	cmp	r3, r2
   2b4a8:	d800      	bhi.n	2b4ac <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   2b4aa:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   2b4ac:	680b      	ldr	r3, [r1, #0]
   2b4ae:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   2b4b0:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   2b4b2:	6848      	ldr	r0, [r1, #4]
   2b4b4:	1a80      	subs	r0, r0, r2
   2b4b6:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2b4b8:	680b      	ldr	r3, [r1, #0]
   2b4ba:	441a      	add	r2, r3
   2b4bc:	600a      	str	r2, [r1, #0]
}
   2b4be:	3800      	subs	r0, #0
   2b4c0:	bf18      	it	ne
   2b4c2:	2001      	movne	r0, #1
   2b4c4:	4770      	bx	lr

0002b4c6 <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   2b4c6:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   2b4c8:	4293      	cmp	r3, r2
   2b4ca:	d800      	bhi.n	2b4ce <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   2b4cc:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2b4ce:	b162      	cbz	r2, 2b4ea <nrfx_usbd_feeder_ram_zlp+0x24>
   2b4d0:	680b      	ldr	r3, [r1, #0]
   2b4d2:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   2b4d4:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   2b4d6:	684b      	ldr	r3, [r1, #4]
   2b4d8:	1a9b      	subs	r3, r3, r2
   2b4da:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   2b4dc:	680b      	ldr	r3, [r1, #0]
   2b4de:	4413      	add	r3, r2
   2b4e0:	600b      	str	r3, [r1, #0]
}
   2b4e2:	1e10      	subs	r0, r2, #0
   2b4e4:	bf18      	it	ne
   2b4e6:	2001      	movne	r0, #1
   2b4e8:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   2b4ea:	2300      	movs	r3, #0
   2b4ec:	e7f1      	b.n	2b4d2 <nrfx_usbd_feeder_ram_zlp+0xc>

0002b4ee <ev_started_handler>:
}
   2b4ee:	4770      	bx	lr

0002b4f0 <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   2b4f0:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
   2b4f4:	b110      	cbz	r0, 2b4fc <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
   2b4f6:	fab0 f080 	clz	r0, r0
   2b4fa:	4770      	bx	lr
    return 32U;
   2b4fc:	2020      	movs	r0, #32
}
   2b4fe:	4770      	bx	lr

0002b500 <nrfx_usbd_feeder_flash>:
{
   2b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b504:	4606      	mov	r6, r0
   2b506:	460c      	mov	r4, r1
   2b508:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   2b50a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   2b50e:	f7f4 fef5 	bl	202fc <nrfx_usbd_feeder_buffer_get>
   2b512:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   2b514:	45a8      	cmp	r8, r5
   2b516:	d800      	bhi.n	2b51a <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   2b518:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2b51a:	462a      	mov	r2, r5
   2b51c:	6821      	ldr	r1, [r4, #0]
   2b51e:	4638      	mov	r0, r7
   2b520:	f7fc fb96 	bl	27c50 <memcpy>
    p_next->p_data.tx = p_buffer;
   2b524:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   2b526:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   2b528:	6860      	ldr	r0, [r4, #4]
   2b52a:	1b40      	subs	r0, r0, r5
   2b52c:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   2b52e:	6822      	ldr	r2, [r4, #0]
   2b530:	442a      	add	r2, r5
   2b532:	6022      	str	r2, [r4, #0]
}
   2b534:	3800      	subs	r0, #0
   2b536:	bf18      	it	ne
   2b538:	2001      	movne	r0, #1
   2b53a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002b53e <nrfx_usbd_feeder_flash_zlp>:
{
   2b53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b542:	4606      	mov	r6, r0
   2b544:	460d      	mov	r5, r1
   2b546:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   2b548:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   2b54c:	f7f4 fed6 	bl	202fc <nrfx_usbd_feeder_buffer_get>
   2b550:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   2b552:	45a0      	cmp	r8, r4
   2b554:	d800      	bhi.n	2b558 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   2b556:	4644      	mov	r4, r8
    if (tx_size != 0)
   2b558:	b96c      	cbnz	r4, 2b576 <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   2b55a:	2300      	movs	r3, #0
   2b55c:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   2b55e:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   2b560:	686b      	ldr	r3, [r5, #4]
   2b562:	1b1b      	subs	r3, r3, r4
   2b564:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   2b566:	682b      	ldr	r3, [r5, #0]
   2b568:	4423      	add	r3, r4
   2b56a:	602b      	str	r3, [r5, #0]
}
   2b56c:	1e20      	subs	r0, r4, #0
   2b56e:	bf18      	it	ne
   2b570:	2001      	movne	r0, #1
   2b572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   2b576:	4622      	mov	r2, r4
   2b578:	6829      	ldr	r1, [r5, #0]
   2b57a:	4638      	mov	r0, r7
   2b57c:	f7fc fb68 	bl	27c50 <memcpy>
        p_next->p_data.tx = p_buffer;
   2b580:	6037      	str	r7, [r6, #0]
   2b582:	e7ec      	b.n	2b55e <nrfx_usbd_feeder_flash_zlp+0x20>

0002b584 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2b584:	b148      	cbz	r0, 2b59a <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2b586:	68c3      	ldr	r3, [r0, #12]
   2b588:	8818      	ldrh	r0, [r3, #0]
   2b58a:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2b58e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   2b592:	bf14      	ite	ne
   2b594:	2000      	movne	r0, #0
   2b596:	2001      	moveq	r0, #1
   2b598:	4770      	bx	lr
		return false;
   2b59a:	2000      	movs	r0, #0
}
   2b59c:	4770      	bx	lr

0002b59e <k_heap_init>:
{
   2b59e:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   2b5a0:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   2b5a4:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   2b5a6:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   2b5a8:	f7fb f816 	bl	265d8 <sys_heap_init>
}
   2b5ac:	bd10      	pop	{r4, pc}

0002b5ae <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2b5ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5b2:	b087      	sub	sp, #28
   2b5b4:	4680      	mov	r8, r0
   2b5b6:	9103      	str	r1, [sp, #12]
   2b5b8:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2b5ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2b5be:	f000 fd6d 	bl	2c09c <sys_clock_timeout_end_calc>
   2b5c2:	4681      	mov	r9, r0
   2b5c4:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2b5c6:	f108 0314 	add.w	r3, r8, #20
   2b5ca:	9305      	str	r3, [sp, #20]
	__asm__ volatile(
   2b5cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b5d0:	f3ef 8511 	mrs	r5, BASEPRI
   2b5d4:	f383 8812 	msr	BASEPRI_MAX, r3
   2b5d8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   2b5dc:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   2b5e0:	4654      	mov	r4, sl

	while (ret == NULL) {
   2b5e2:	e00f      	b.n	2b604 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2b5e4:	e9cd 6700 	strd	r6, r7, [sp]
   2b5e8:	f108 020c 	add.w	r2, r8, #12
   2b5ec:	4629      	mov	r1, r5
   2b5ee:	9805      	ldr	r0, [sp, #20]
   2b5f0:	f7f6 ff2c 	bl	2244c <z_pend_curr>
   2b5f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b5f8:	f3ef 8511 	mrs	r5, BASEPRI
   2b5fc:	f383 8812 	msr	BASEPRI_MAX, r3
   2b600:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   2b604:	b9b4      	cbnz	r4, 2b634 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2b606:	9a04      	ldr	r2, [sp, #16]
   2b608:	9903      	ldr	r1, [sp, #12]
   2b60a:	4640      	mov	r0, r8
   2b60c:	f7fa ff56 	bl	264bc <sys_heap_aligned_alloc>
   2b610:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   2b612:	f7f7 fad1 	bl	22bb8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2b616:	b96c      	cbnz	r4, 2b634 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   2b618:	ebb9 0600 	subs.w	r6, r9, r0
   2b61c:	eb6b 0701 	sbc.w	r7, fp, r1
   2b620:	2e01      	cmp	r6, #1
   2b622:	f177 0300 	sbcs.w	r3, r7, #0
   2b626:	db05      	blt.n	2b634 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   2b628:	f1ba 0f00 	cmp.w	sl, #0
   2b62c:	d1da      	bne.n	2b5e4 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   2b62e:	f04f 0a01 	mov.w	sl, #1
   2b632:	e7d7      	b.n	2b5e4 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   2b634:	f385 8811 	msr	BASEPRI, r5
   2b638:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2b63c:	4620      	mov	r0, r4
   2b63e:	b007      	add	sp, #28
   2b640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b644 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2b644:	b570      	push	{r4, r5, r6, lr}
   2b646:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2b648:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   2b64c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b650:	f3ef 8511 	mrs	r5, BASEPRI
   2b654:	f383 8812 	msr	BASEPRI_MAX, r3
   2b658:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   2b65c:	f7fa fecc 	bl	263f8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2b660:	f104 000c 	add.w	r0, r4, #12
   2b664:	f000 fc52 	bl	2bf0c <z_unpend_all>
   2b668:	b920      	cbnz	r0, 2b674 <k_heap_free+0x30>
	__asm__ volatile(
   2b66a:	f385 8811 	msr	BASEPRI, r5
   2b66e:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2b672:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   2b674:	4629      	mov	r1, r5
   2b676:	4630      	mov	r0, r6
   2b678:	f7f6 fd84 	bl	22184 <z_reschedule>
   2b67c:	e7f9      	b.n	2b672 <k_heap_free+0x2e>

0002b67e <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2b67e:	68c2      	ldr	r2, [r0, #12]
   2b680:	6903      	ldr	r3, [r0, #16]
   2b682:	431a      	orrs	r2, r3
   2b684:	f012 0203 	ands.w	r2, r2, #3
   2b688:	d10d      	bne.n	2b6a6 <create_free_list+0x28>
	slab->free_list = NULL;
   2b68a:	2100      	movs	r1, #0
   2b68c:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2b68e:	e005      	b.n	2b69c <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   2b690:	6941      	ldr	r1, [r0, #20]
   2b692:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   2b694:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   2b696:	68c1      	ldr	r1, [r0, #12]
   2b698:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2b69a:	3201      	adds	r2, #1
   2b69c:	6881      	ldr	r1, [r0, #8]
   2b69e:	4291      	cmp	r1, r2
   2b6a0:	d8f6      	bhi.n	2b690 <create_free_list+0x12>
	return 0;
   2b6a2:	2000      	movs	r0, #0
   2b6a4:	4770      	bx	lr
		return -EINVAL;
   2b6a6:	f06f 0015 	mvn.w	r0, #21
}
   2b6aa:	4770      	bx	lr

0002b6ac <k_mem_slab_init>:
{
   2b6ac:	b510      	push	{r4, lr}
   2b6ae:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   2b6b0:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   2b6b2:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   2b6b4:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   2b6b6:	2300      	movs	r3, #0
   2b6b8:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   2b6ba:	f7ff ffe0 	bl	2b67e <create_free_list>
	if (rc < 0) {
   2b6be:	2800      	cmp	r0, #0
   2b6c0:	db01      	blt.n	2b6c6 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   2b6c2:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   2b6c4:	6064      	str	r4, [r4, #4]
}
   2b6c6:	bd10      	pop	{r4, pc}

0002b6c8 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b6ca:	4604      	mov	r4, r0
   2b6cc:	460d      	mov	r5, r1
	__asm__ volatile(
   2b6ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b6d2:	f3ef 8611 	mrs	r6, BASEPRI
   2b6d6:	f383 8812 	msr	BASEPRI_MAX, r3
   2b6da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2b6de:	6943      	ldr	r3, [r0, #20]
   2b6e0:	b163      	cbz	r3, 2b6fc <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   2b6e2:	682b      	ldr	r3, [r5, #0]
   2b6e4:	6962      	ldr	r2, [r4, #20]
   2b6e6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2b6e8:	682b      	ldr	r3, [r5, #0]
   2b6ea:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2b6ec:	69a3      	ldr	r3, [r4, #24]
   2b6ee:	3b01      	subs	r3, #1
   2b6f0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2b6f2:	f386 8811 	msr	BASEPRI, r6
   2b6f6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2b6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b6fc:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2b700:	f000 fbd9 	bl	2beb6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2b704:	2800      	cmp	r0, #0
   2b706:	d0ec      	beq.n	2b6e2 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2b708:	682a      	ldr	r2, [r5, #0]
   2b70a:	2100      	movs	r1, #0
   2b70c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2b710:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   2b712:	f000 fb0e 	bl	2bd32 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2b716:	4631      	mov	r1, r6
   2b718:	4638      	mov	r0, r7
   2b71a:	f7f6 fd33 	bl	22184 <z_reschedule>
			return;
   2b71e:	e7ec      	b.n	2b6fa <k_mem_slab_free+0x32>

0002b720 <setup_thread_stack>:
{
   2b720:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2b722:	3207      	adds	r2, #7
   2b724:	f022 0207 	bic.w	r2, r2, #7
   2b728:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   2b72c:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   2b730:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
	new_thread->stack_info.size = stack_buf_size;
   2b734:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
	new_thread->stack_info.delta = delta;
   2b738:	2200      	movs	r2, #0
   2b73a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
}
   2b73e:	18c8      	adds	r0, r1, r3
   2b740:	bc10      	pop	{r4}
   2b742:	4770      	bx	lr

0002b744 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b744:	f3ef 8005 	mrs	r0, IPSR
}
   2b748:	3800      	subs	r0, #0
   2b74a:	bf18      	it	ne
   2b74c:	2001      	movne	r0, #1
   2b74e:	4770      	bx	lr

0002b750 <k_thread_name_get>:
}
   2b750:	3078      	adds	r0, #120	; 0x78
   2b752:	4770      	bx	lr

0002b754 <z_impl_k_thread_start>:
{
   2b754:	b508      	push	{r3, lr}
	z_sched_start(thread);
   2b756:	f7f6 fe3f 	bl	223d8 <z_sched_start>
}
   2b75a:	bd08      	pop	{r3, pc}

0002b75c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   2b75c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   2b75e:	2400      	movs	r4, #0
   2b760:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   2b762:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   2b764:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   2b766:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   2b768:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   2b76a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   2b76c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   2b76e:	bc10      	pop	{r4}
   2b770:	4770      	bx	lr

0002b772 <z_impl_k_thread_create>:
{
   2b772:	b5f0      	push	{r4, r5, r6, r7, lr}
   2b774:	b087      	sub	sp, #28
   2b776:	4604      	mov	r4, r0
   2b778:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2b77c:	2500      	movs	r5, #0
   2b77e:	9505      	str	r5, [sp, #20]
   2b780:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2b782:	9504      	str	r5, [sp, #16]
   2b784:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2b786:	9503      	str	r5, [sp, #12]
   2b788:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2b78a:	9502      	str	r5, [sp, #8]
   2b78c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2b78e:	9501      	str	r5, [sp, #4]
   2b790:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2b792:	9500      	str	r5, [sp, #0]
   2b794:	f7f6 f8aa 	bl	218ec <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2b798:	f1b7 3fff 	cmp.w	r7, #4294967295
   2b79c:	bf08      	it	eq
   2b79e:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2b7a2:	d102      	bne.n	2b7aa <z_impl_k_thread_create+0x38>
}
   2b7a4:	4620      	mov	r0, r4
   2b7a6:	b007      	add	sp, #28
   2b7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   2b7aa:	4632      	mov	r2, r6
   2b7ac:	463b      	mov	r3, r7
   2b7ae:	4620      	mov	r0, r4
   2b7b0:	f7f6 f88a 	bl	218c8 <schedule_new_thread>
   2b7b4:	e7f6      	b.n	2b7a4 <z_impl_k_thread_create+0x32>

0002b7b6 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   2b7b6:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   2b7b8:	f7e8 fc44 	bl	14044 <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   2b7bc:	f7ff f9eb 	bl	2ab96 <sys_clock_idle_exit>
}
   2b7c0:	bd08      	pop	{r3, pc}

0002b7c2 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   2b7c2:	b508      	push	{r3, lr}
	__asm__ volatile(
   2b7c4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2b7c8:	f3ef 8311 	mrs	r3, BASEPRI
   2b7cc:	f382 8812 	msr	BASEPRI_MAX, r2
   2b7d0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   2b7d4:	f7f6 f93c 	bl	21a50 <pm_save_idle>
   2b7d8:	e7f4      	b.n	2b7c4 <idle+0x2>

0002b7da <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   2b7da:	4288      	cmp	r0, r1
   2b7dc:	da00      	bge.n	2b7e0 <new_prio_for_inheritance+0x6>
   2b7de:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2b7e0:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   2b7e4:	db01      	blt.n	2b7ea <new_prio_for_inheritance+0x10>
   2b7e6:	4608      	mov	r0, r1
   2b7e8:	4770      	bx	lr
   2b7ea:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   2b7ee:	4770      	bx	lr

0002b7f0 <adjust_owner_prio>:
{
   2b7f0:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   2b7f2:	6880      	ldr	r0, [r0, #8]
   2b7f4:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2b7f8:	428b      	cmp	r3, r1
   2b7fa:	d101      	bne.n	2b800 <adjust_owner_prio+0x10>
	return false;
   2b7fc:	2000      	movs	r0, #0
}
   2b7fe:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   2b800:	f7f6 fe38 	bl	22474 <z_set_prio>
   2b804:	e7fb      	b.n	2b7fe <adjust_owner_prio+0xe>

0002b806 <z_impl_k_mutex_init>:
{
   2b806:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2b808:	2000      	movs	r0, #0
   2b80a:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   2b80c:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   2b80e:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   2b810:	605b      	str	r3, [r3, #4]
}
   2b812:	4770      	bx	lr

0002b814 <prepare_thread_to_run>:
{
   2b814:	b508      	push	{r3, lr}
   2b816:	2200      	movs	r2, #0
   2b818:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
   2b81c:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   2b81e:	f000 fa88 	bl	2bd32 <z_ready_thread>
}
   2b822:	bd08      	pop	{r3, pc}

0002b824 <queue_insert>:
{
   2b824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b828:	4605      	mov	r5, r0
   2b82a:	460e      	mov	r6, r1
   2b82c:	4614      	mov	r4, r2
   2b82e:	461f      	mov	r7, r3
   2b830:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b834:	f100 0808 	add.w	r8, r0, #8
   2b838:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b83c:	f3ef 8911 	mrs	r9, BASEPRI
   2b840:	f383 8812 	msr	BASEPRI_MAX, r3
   2b844:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2b848:	b102      	cbz	r2, 2b84c <queue_insert+0x28>
	return list->tail;
   2b84a:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2b84c:	4640      	mov	r0, r8
   2b84e:	f000 fb32 	bl	2beb6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2b852:	b9a0      	cbnz	r0, 2b87e <queue_insert+0x5a>
	if (alloc) {
   2b854:	b9e7      	cbnz	r7, 2b890 <queue_insert+0x6c>
	node->next_and_flags = flags;
   2b856:	2300      	movs	r3, #0
   2b858:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2b85a:	b356      	cbz	r6, 2b8b2 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b85c:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2b85e:	f033 0303 	bics.w	r3, r3, #3
   2b862:	d134      	bne.n	2b8ce <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b864:	6823      	ldr	r3, [r4, #0]
   2b866:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b86a:	6023      	str	r3, [r4, #0]
	return list->tail;
   2b86c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2b86e:	b35a      	cbz	r2, 2b8c8 <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b870:	6813      	ldr	r3, [r2, #0]
   2b872:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b876:	4323      	orrs	r3, r4
   2b878:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2b87a:	606c      	str	r4, [r5, #4]
}
   2b87c:	e031      	b.n	2b8e2 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   2b87e:	4621      	mov	r1, r4
   2b880:	f7ff ffc8 	bl	2b814 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   2b884:	4649      	mov	r1, r9
   2b886:	4640      	mov	r0, r8
   2b888:	f7f6 fc7c 	bl	22184 <z_reschedule>
		return 0;
   2b88c:	2000      	movs	r0, #0
   2b88e:	e032      	b.n	2b8f6 <queue_insert+0xd2>
	return z_thread_aligned_alloc(0, size);
   2b890:	2108      	movs	r1, #8
   2b892:	2000      	movs	r0, #0
   2b894:	f7f7 fd28 	bl	232e8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2b898:	b120      	cbz	r0, 2b8a4 <queue_insert+0x80>
		anode->data = data;
   2b89a:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   2b89c:	2201      	movs	r2, #1
   2b89e:	6002      	str	r2, [r0, #0]
		data = anode;
   2b8a0:	4604      	mov	r4, r0
   2b8a2:	e7da      	b.n	2b85a <queue_insert+0x36>
	__asm__ volatile(
   2b8a4:	f389 8811 	msr	BASEPRI, r9
   2b8a8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2b8ac:	f06f 000b 	mvn.w	r0, #11
   2b8b0:	e021      	b.n	2b8f6 <queue_insert+0xd2>
	return list->head;
   2b8b2:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b8b4:	6823      	ldr	r3, [r4, #0]
   2b8b6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b8ba:	4313      	orrs	r3, r2
   2b8bc:	6023      	str	r3, [r4, #0]
	list->head = node;
   2b8be:	602c      	str	r4, [r5, #0]
	return list->tail;
   2b8c0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   2b8c2:	b973      	cbnz	r3, 2b8e2 <queue_insert+0xbe>
	list->tail = node;
   2b8c4:	606c      	str	r4, [r5, #4]
}
   2b8c6:	e00c      	b.n	2b8e2 <queue_insert+0xbe>
	list->tail = node;
   2b8c8:	606c      	str	r4, [r5, #4]
	list->head = node;
   2b8ca:	602c      	str	r4, [r5, #0]
}
   2b8cc:	e009      	b.n	2b8e2 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b8ce:	6822      	ldr	r2, [r4, #0]
   2b8d0:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b8d4:	4313      	orrs	r3, r2
   2b8d6:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b8d8:	6833      	ldr	r3, [r6, #0]
   2b8da:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b8de:	431c      	orrs	r4, r3
   2b8e0:	6034      	str	r4, [r6, #0]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b8e2:	2104      	movs	r1, #4
   2b8e4:	f105 0010 	add.w	r0, r5, #16
   2b8e8:	f000 fcb8 	bl	2c25c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2b8ec:	4649      	mov	r1, r9
   2b8ee:	4640      	mov	r0, r8
   2b8f0:	f7f6 fc48 	bl	22184 <z_reschedule>
	return 0;
   2b8f4:	2000      	movs	r0, #0
}
   2b8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002b8fa <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2b8fa:	b160      	cbz	r0, 2b916 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b8fc:	6803      	ldr	r3, [r0, #0]
   2b8fe:	f013 0f03 	tst.w	r3, #3
   2b902:	d008      	beq.n	2b916 <z_queue_node_peek+0x1c>
{
   2b904:	b510      	push	{r4, lr}
		ret = anode->data;
   2b906:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2b908:	b909      	cbnz	r1, 2b90e <z_queue_node_peek+0x14>
		ret = anode->data;
   2b90a:	4620      	mov	r0, r4
}
   2b90c:	bd10      	pop	{r4, pc}
			k_free(anode);
   2b90e:	f000 fccf 	bl	2c2b0 <k_free>
		ret = anode->data;
   2b912:	4620      	mov	r0, r4
   2b914:	e7fa      	b.n	2b90c <z_queue_node_peek+0x12>
}
   2b916:	4770      	bx	lr

0002b918 <z_impl_k_queue_init>:
	list->head = NULL;
   2b918:	2300      	movs	r3, #0
   2b91a:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   2b91c:	6043      	str	r3, [r0, #4]
   2b91e:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   2b922:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2b924:	60c3      	str	r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2b926:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2b92a:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2b92c:	6143      	str	r3, [r0, #20]
}
   2b92e:	4770      	bx	lr

0002b930 <k_queue_append>:
{
   2b930:	b500      	push	{lr}
   2b932:	b083      	sub	sp, #12
   2b934:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2b936:	2301      	movs	r3, #1
   2b938:	9300      	str	r3, [sp, #0]
   2b93a:	2300      	movs	r3, #0
   2b93c:	4619      	mov	r1, r3
   2b93e:	f7ff ff71 	bl	2b824 <queue_insert>
}
   2b942:	b003      	add	sp, #12
   2b944:	f85d fb04 	ldr.w	pc, [sp], #4

0002b948 <k_queue_prepend>:
{
   2b948:	b500      	push	{lr}
   2b94a:	b083      	sub	sp, #12
   2b94c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2b94e:	2100      	movs	r1, #0
   2b950:	9100      	str	r1, [sp, #0]
   2b952:	460b      	mov	r3, r1
   2b954:	f7ff ff66 	bl	2b824 <queue_insert>
}
   2b958:	b003      	add	sp, #12
   2b95a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b95e <k_queue_append_list>:
	CHECKIF(head == NULL || tail == NULL) {
   2b95e:	b3a1      	cbz	r1, 2b9ca <k_queue_append_list+0x6c>
{
   2b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b964:	4606      	mov	r6, r0
   2b966:	4617      	mov	r7, r2
   2b968:	460c      	mov	r4, r1
	CHECKIF(head == NULL || tail == NULL) {
   2b96a:	b38a      	cbz	r2, 2b9d0 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2b96c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2b970:	f04f 0340 	mov.w	r3, #64	; 0x40
   2b974:	f3ef 8811 	mrs	r8, BASEPRI
   2b978:	f383 8812 	msr	BASEPRI_MAX, r3
   2b97c:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2b980:	4628      	mov	r0, r5
   2b982:	f000 fa98 	bl	2beb6 <z_unpend_first_thread>
   2b986:	e006      	b.n	2b996 <k_queue_append_list+0x38>
		prepare_thread_to_run(thread, head);
   2b988:	4621      	mov	r1, r4
   2b98a:	f7ff ff43 	bl	2b814 <prepare_thread_to_run>
		head = *(void **)head;
   2b98e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2b990:	4628      	mov	r0, r5
   2b992:	f000 fa90 	bl	2beb6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2b996:	b10c      	cbz	r4, 2b99c <k_queue_append_list+0x3e>
   2b998:	2800      	cmp	r0, #0
   2b99a:	d1f5      	bne.n	2b988 <k_queue_append_list+0x2a>
	if (head != NULL) {
   2b99c:	b13c      	cbz	r4, 2b9ae <k_queue_append_list+0x50>
	return list->tail;
   2b99e:	6872      	ldr	r2, [r6, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2b9a0:	b18a      	cbz	r2, 2b9c6 <k_queue_append_list+0x68>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b9a2:	6813      	ldr	r3, [r2, #0]
   2b9a4:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b9a8:	431c      	orrs	r4, r3
   2b9aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2b9ac:	6077      	str	r7, [r6, #4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b9ae:	2104      	movs	r1, #4
   2b9b0:	f106 0010 	add.w	r0, r6, #16
   2b9b4:	f000 fc52 	bl	2c25c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2b9b8:	4641      	mov	r1, r8
   2b9ba:	4628      	mov	r0, r5
   2b9bc:	f7f6 fbe2 	bl	22184 <z_reschedule>
	return 0;
   2b9c0:	2000      	movs	r0, #0
}
   2b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	list->head = node;
   2b9c6:	6034      	str	r4, [r6, #0]
}
   2b9c8:	e7f0      	b.n	2b9ac <k_queue_append_list+0x4e>
		return -EINVAL;
   2b9ca:	f06f 0015 	mvn.w	r0, #21
}
   2b9ce:	4770      	bx	lr
		return -EINVAL;
   2b9d0:	f06f 0015 	mvn.w	r0, #21
   2b9d4:	e7f5      	b.n	2b9c2 <k_queue_append_list+0x64>

0002b9d6 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2b9d6:	b15a      	cbz	r2, 2b9f0 <z_impl_k_sem_init+0x1a>
   2b9d8:	428a      	cmp	r2, r1
   2b9da:	d30c      	bcc.n	2b9f6 <z_impl_k_sem_init+0x20>
	sem->count = initial_count;
   2b9dc:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   2b9de:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   2b9e0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   2b9e2:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   2b9e4:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   2b9e8:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   2b9ea:	6143      	str	r3, [r0, #20]
	return 0;
   2b9ec:	2000      	movs	r0, #0
   2b9ee:	4770      	bx	lr
		return -EINVAL;
   2b9f0:	f06f 0015 	mvn.w	r0, #21
   2b9f4:	4770      	bx	lr
   2b9f6:	f06f 0015 	mvn.w	r0, #21
}
   2b9fa:	4770      	bx	lr

0002b9fc <cancel_async_locked>:
{
   2b9fc:	4603      	mov	r3, r0
	return (*flagp & BIT(bit)) != 0U;
   2b9fe:	68c2      	ldr	r2, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ba00:	f012 0f02 	tst.w	r2, #2
   2ba04:	d009      	beq.n	2ba1a <cancel_async_locked+0x1e>
	return *flagp;
   2ba06:	68c2      	ldr	r2, [r0, #12]
	if (ret != 0) {
   2ba08:	f012 000f 	ands.w	r0, r2, #15
   2ba0c:	d037      	beq.n	2ba7e <cancel_async_locked+0x82>
	*flagp |= BIT(bit);
   2ba0e:	f042 0202 	orr.w	r2, r2, #2
   2ba12:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ba14:	f002 000f 	and.w	r0, r2, #15
	return ret;
   2ba18:	4770      	bx	lr
{
   2ba1a:	b410      	push	{r4}
		queue_remove_locked(work->queue, work);
   2ba1c:	6884      	ldr	r4, [r0, #8]
	*flagp &= ~BIT(bit);
   2ba1e:	f022 0104 	bic.w	r1, r2, #4
   2ba22:	60c1      	str	r1, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ba24:	f012 0f04 	tst.w	r2, #4
   2ba28:	d011      	beq.n	2ba4e <cancel_async_locked+0x52>
	return list->head;
   2ba2a:	f8d4 20b8 	ldr.w	r2, [r4, #184]	; 0xb8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2ba2e:	2100      	movs	r1, #0
   2ba30:	b16a      	cbz	r2, 2ba4e <cancel_async_locked+0x52>
   2ba32:	4290      	cmp	r0, r2
   2ba34:	d002      	beq.n	2ba3c <cancel_async_locked+0x40>
   2ba36:	4611      	mov	r1, r2
   2ba38:	6812      	ldr	r2, [r2, #0]
   2ba3a:	e7f9      	b.n	2ba30 <cancel_async_locked+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2ba3c:	b191      	cbz	r1, 2ba64 <cancel_async_locked+0x68>
	return node->next;
   2ba3e:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
   2ba40:	600a      	str	r2, [r1, #0]
	return list->tail;
   2ba42:	f8d4 20bc 	ldr.w	r2, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2ba46:	4293      	cmp	r3, r2
   2ba48:	d016      	beq.n	2ba78 <cancel_async_locked+0x7c>
	parent->next = child;
   2ba4a:	2200      	movs	r2, #0
   2ba4c:	601a      	str	r2, [r3, #0]
	return *flagp;
   2ba4e:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2ba50:	f012 000f 	ands.w	r0, r2, #15
   2ba54:	d004      	beq.n	2ba60 <cancel_async_locked+0x64>
	*flagp |= BIT(bit);
   2ba56:	f042 0202 	orr.w	r2, r2, #2
   2ba5a:	60da      	str	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2ba5c:	f002 000f 	and.w	r0, r2, #15
}
   2ba60:	bc10      	pop	{r4}
   2ba62:	4770      	bx	lr
	return node->next;
   2ba64:	681a      	ldr	r2, [r3, #0]
	list->head = node;
   2ba66:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	return list->tail;
   2ba6a:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
Z_GENLIST_REMOVE(slist, snode)
   2ba6e:	428b      	cmp	r3, r1
   2ba70:	d1eb      	bne.n	2ba4a <cancel_async_locked+0x4e>
	list->tail = node;
   2ba72:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
}
   2ba76:	e7e8      	b.n	2ba4a <cancel_async_locked+0x4e>
	list->tail = node;
   2ba78:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
}
   2ba7c:	e7e5      	b.n	2ba4a <cancel_async_locked+0x4e>
   2ba7e:	4770      	bx	lr

0002ba80 <work_timeout>:
{
   2ba80:	b510      	push	{r4, lr}
   2ba82:	b082      	sub	sp, #8
   2ba84:	4603      	mov	r3, r0
   2ba86:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ba8a:	f3ef 8411 	mrs	r4, BASEPRI
   2ba8e:	f382 8812 	msr	BASEPRI_MAX, r2
   2ba92:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2ba96:	2200      	movs	r2, #0
   2ba98:	9201      	str	r2, [sp, #4]
	return (*flagp & BIT(bit)) != 0U;
   2ba9a:	f850 2c04 	ldr.w	r2, [r0, #-4]
	*flagp &= ~BIT(bit);
   2ba9e:	f022 0108 	bic.w	r1, r2, #8
   2baa2:	f840 1c04 	str.w	r1, [r0, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2baa6:	f012 0f08 	tst.w	r2, #8
   2baaa:	d105      	bne.n	2bab8 <work_timeout+0x38>
	__asm__ volatile(
   2baac:	f384 8811 	msr	BASEPRI, r4
   2bab0:	f3bf 8f6f 	isb	sy
}
   2bab4:	b002      	add	sp, #8
   2bab6:	bd10      	pop	{r4, pc}
   2bab8:	3810      	subs	r0, #16
		queue = dw->queue;
   2baba:	699b      	ldr	r3, [r3, #24]
   2babc:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2babe:	a901      	add	r1, sp, #4
   2bac0:	f7f6 f94a 	bl	21d58 <submit_to_queue_locked>
   2bac4:	e7f2      	b.n	2baac <work_timeout+0x2c>

0002bac6 <cancel_delayable_async_locked>:
{
   2bac6:	b510      	push	{r4, lr}
   2bac8:	4604      	mov	r4, r0
	return (*flagp & BIT(bit)) != 0U;
   2baca:	68c3      	ldr	r3, [r0, #12]
	*flagp &= ~BIT(bit);
   2bacc:	f023 0208 	bic.w	r2, r3, #8
   2bad0:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2bad2:	f013 0f08 	tst.w	r3, #8
   2bad6:	d103      	bne.n	2bae0 <cancel_delayable_async_locked+0x1a>
	return cancel_async_locked(&dwork->work);
   2bad8:	4620      	mov	r0, r4
   2bada:	f7ff ff8f 	bl	2b9fc <cancel_async_locked>
}
   2bade:	bd10      	pop	{r4, pc}
		z_abort_timeout(&dwork->timeout);
   2bae0:	3010      	adds	r0, #16
   2bae2:	f000 fa72 	bl	2bfca <z_abort_timeout>
		ret = true;
   2bae6:	e7f7      	b.n	2bad8 <cancel_delayable_async_locked+0x12>

0002bae8 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2bae8:	2300      	movs	r3, #0
   2baea:	6003      	str	r3, [r0, #0]
   2baec:	6083      	str	r3, [r0, #8]
   2baee:	60c3      	str	r3, [r0, #12]
   2baf0:	6041      	str	r1, [r0, #4]
}
   2baf2:	4770      	bx	lr

0002baf4 <k_work_submit_to_queue>:
{
   2baf4:	b530      	push	{r4, r5, lr}
   2baf6:	b083      	sub	sp, #12
   2baf8:	9001      	str	r0, [sp, #4]
   2bafa:	4608      	mov	r0, r1
	__asm__ volatile(
   2bafc:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bb00:	f3ef 8511 	mrs	r5, BASEPRI
   2bb04:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb08:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2bb0c:	a901      	add	r1, sp, #4
   2bb0e:	f7f6 f923 	bl	21d58 <submit_to_queue_locked>
   2bb12:	4604      	mov	r4, r0
	__asm__ volatile(
   2bb14:	f385 8811 	msr	BASEPRI, r5
   2bb18:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2bb1c:	2800      	cmp	r0, #0
   2bb1e:	dc02      	bgt.n	2bb26 <k_work_submit_to_queue+0x32>
}
   2bb20:	4620      	mov	r0, r4
   2bb22:	b003      	add	sp, #12
   2bb24:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   2bb26:	f7f6 fe8f 	bl	22848 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2bb2a:	2800      	cmp	r0, #0
   2bb2c:	d0f8      	beq.n	2bb20 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   2bb2e:	f7f6 fdc5 	bl	226bc <z_impl_k_yield>
	return ret;
   2bb32:	e7f5      	b.n	2bb20 <k_work_submit_to_queue+0x2c>

0002bb34 <k_work_init_delayable>:
{
   2bb34:	b538      	push	{r3, r4, r5, lr}
   2bb36:	4604      	mov	r4, r0
   2bb38:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2bb3a:	2230      	movs	r2, #48	; 0x30
   2bb3c:	2100      	movs	r1, #0
   2bb3e:	f7fc f8ab 	bl	27c98 <memset>
   2bb42:	6065      	str	r5, [r4, #4]
   2bb44:	f44f 7380 	mov.w	r3, #256	; 0x100
   2bb48:	60e3      	str	r3, [r4, #12]
}
   2bb4a:	bd38      	pop	{r3, r4, r5, pc}

0002bb4c <k_work_schedule_for_queue>:
{
   2bb4c:	b510      	push	{r4, lr}
   2bb4e:	b082      	sub	sp, #8
   2bb50:	9001      	str	r0, [sp, #4]
	__asm__ volatile(
   2bb52:	f04f 0040 	mov.w	r0, #64	; 0x40
   2bb56:	f3ef 8411 	mrs	r4, BASEPRI
   2bb5a:	f380 8812 	msr	BASEPRI_MAX, r0
   2bb5e:	f3bf 8f6f 	isb	sy
	return *flagp;
   2bb62:	68c8      	ldr	r0, [r1, #12]
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2bb64:	f010 0f0e 	tst.w	r0, #14
   2bb68:	d006      	beq.n	2bb78 <k_work_schedule_for_queue+0x2c>
	int ret = 0;
   2bb6a:	2000      	movs	r0, #0
	__asm__ volatile(
   2bb6c:	f384 8811 	msr	BASEPRI, r4
   2bb70:	f3bf 8f6f 	isb	sy
}
   2bb74:	b002      	add	sp, #8
   2bb76:	bd10      	pop	{r4, pc}
		ret = schedule_for_queue_locked(&queue, dwork, delay);
   2bb78:	a801      	add	r0, sp, #4
   2bb7a:	f7f6 fa2f 	bl	21fdc <schedule_for_queue_locked>
   2bb7e:	e7f5      	b.n	2bb6c <k_work_schedule_for_queue+0x20>

0002bb80 <k_work_reschedule_for_queue>:
{
   2bb80:	b5f0      	push	{r4, r5, r6, r7, lr}
   2bb82:	b083      	sub	sp, #12
   2bb84:	9001      	str	r0, [sp, #4]
   2bb86:	460c      	mov	r4, r1
   2bb88:	4616      	mov	r6, r2
   2bb8a:	461d      	mov	r5, r3
	__asm__ volatile(
   2bb8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bb90:	f3ef 8711 	mrs	r7, BASEPRI
   2bb94:	f383 8812 	msr	BASEPRI_MAX, r3
   2bb98:	f3bf 8f6f 	isb	sy
	return (*flagp & BIT(bit)) != 0U;
   2bb9c:	68cb      	ldr	r3, [r1, #12]
	*flagp &= ~BIT(bit);
   2bb9e:	f023 0208 	bic.w	r2, r3, #8
   2bba2:	60ca      	str	r2, [r1, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2bba4:	f013 0f08 	tst.w	r3, #8
   2bba8:	d10b      	bne.n	2bbc2 <k_work_reschedule_for_queue+0x42>
	ret = schedule_for_queue_locked(&queue, dwork, delay);
   2bbaa:	4632      	mov	r2, r6
   2bbac:	462b      	mov	r3, r5
   2bbae:	4621      	mov	r1, r4
   2bbb0:	a801      	add	r0, sp, #4
   2bbb2:	f7f6 fa13 	bl	21fdc <schedule_for_queue_locked>
	__asm__ volatile(
   2bbb6:	f387 8811 	msr	BASEPRI, r7
   2bbba:	f3bf 8f6f 	isb	sy
}
   2bbbe:	b003      	add	sp, #12
   2bbc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_abort_timeout(&dwork->timeout);
   2bbc2:	f101 0010 	add.w	r0, r1, #16
   2bbc6:	f000 fa00 	bl	2bfca <z_abort_timeout>
		ret = true;
   2bbca:	e7ee      	b.n	2bbaa <k_work_reschedule_for_queue+0x2a>

0002bbcc <k_work_cancel_delayable>:

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2bbcc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2bbce:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bbd2:	f3ef 8411 	mrs	r4, BASEPRI
   2bbd6:	f383 8812 	msr	BASEPRI_MAX, r3
   2bbda:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(dwork != NULL);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable, dwork);

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = cancel_delayable_async_locked(dwork);
   2bbde:	f7ff ff72 	bl	2bac6 <cancel_delayable_async_locked>
	__asm__ volatile(
   2bbe2:	f384 8811 	msr	BASEPRI, r4
   2bbe6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2bbea:	bd10      	pop	{r4, pc}

0002bbec <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2bbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bbee:	460f      	mov	r7, r1
	__asm__ volatile(
   2bbf0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2bbf4:	f3ef 8611 	mrs	r6, BASEPRI
   2bbf8:	f383 8812 	msr	BASEPRI_MAX, r3
   2bbfc:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bc00:	f3bf 8f5b 	dmb	ish
   2bc04:	68c3      	ldr	r3, [r0, #12]
   2bc06:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2bc0a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2bc0e:	2b00      	cmp	r3, #0
   2bc10:	bf14      	ite	ne
   2bc12:	2501      	movne	r5, #1
   2bc14:	2500      	moveq	r5, #0
	bool need_wait = false;

	if (pending) {
   2bc16:	d107      	bne.n	2bc28 <k_work_cancel_delayable_sync+0x3c>
	bool need_wait = false;
   2bc18:	2000      	movs	r0, #0
	__asm__ volatile(
   2bc1a:	f386 8811 	msr	BASEPRI, r6
   2bc1e:	f3bf 8f6f 	isb	sy
		need_wait = cancel_sync_locked(&dwork->work, canceller);
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2bc22:	b948      	cbnz	r0, 2bc38 <k_work_cancel_delayable_sync+0x4c>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2bc24:	4628      	mov	r0, r5
   2bc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bc28:	4604      	mov	r4, r0
		(void)cancel_delayable_async_locked(dwork);
   2bc2a:	f7ff ff4c 	bl	2bac6 <cancel_delayable_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2bc2e:	4639      	mov	r1, r7
   2bc30:	4620      	mov	r0, r4
   2bc32:	f7f6 f939 	bl	21ea8 <cancel_sync_locked>
   2bc36:	e7f0      	b.n	2bc1a <k_work_cancel_delayable_sync+0x2e>
		k_sem_take(&canceller->sem, K_FOREVER);
   2bc38:	f107 0008 	add.w	r0, r7, #8
	return z_impl_k_sem_take(sem, timeout);
   2bc3c:	f04f 32ff 	mov.w	r2, #4294967295
   2bc40:	f04f 33ff 	mov.w	r3, #4294967295
   2bc44:	f7f6 f844 	bl	21cd0 <z_impl_k_sem_take>
   2bc48:	e7ec      	b.n	2bc24 <k_work_cancel_delayable_sync+0x38>

0002bc4a <thread_active_elsewhere>:
}
   2bc4a:	2000      	movs	r0, #0
   2bc4c:	4770      	bx	lr

0002bc4e <pended_on_thread>:
}
   2bc4e:	6880      	ldr	r0, [r0, #8]
   2bc50:	4770      	bx	lr

0002bc52 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2bc52:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2bc56:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2bc5a:	4283      	cmp	r3, r0
   2bc5c:	d001      	beq.n	2bc62 <z_sched_prio_cmp+0x10>
		return b2 - b1;
   2bc5e:	1ac0      	subs	r0, r0, r3
   2bc60:	4770      	bx	lr
	return 0;
   2bc62:	2000      	movs	r0, #0
}
   2bc64:	4770      	bx	lr

0002bc66 <z_unpend_thread_no_timeout>:
{
   2bc66:	b538      	push	{r3, r4, r5, lr}
   2bc68:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2bc6a:	2300      	movs	r3, #0
	__asm__ volatile(
   2bc6c:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bc70:	f3ef 8511 	mrs	r5, BASEPRI
   2bc74:	f382 8812 	msr	BASEPRI_MAX, r2
   2bc78:	f3bf 8f6f 	isb	sy
   2bc7c:	b98b      	cbnz	r3, 2bca2 <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2bc7e:	4620      	mov	r0, r4
   2bc80:	f7ff ffe5 	bl	2bc4e <pended_on_thread>
   2bc84:	4621      	mov	r1, r4
   2bc86:	f000 f822 	bl	2bcce <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2bc8a:	7b63      	ldrb	r3, [r4, #13]
   2bc8c:	f023 0302 	bic.w	r3, r3, #2
   2bc90:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2bc92:	2300      	movs	r3, #0
   2bc94:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2bc96:	f385 8811 	msr	BASEPRI, r5
   2bc9a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bc9e:	2301      	movs	r3, #1
   2bca0:	e7ec      	b.n	2bc7c <z_unpend_thread_no_timeout+0x16>
}
   2bca2:	bd38      	pop	{r3, r4, r5, pc}

0002bca4 <z_reschedule_irqlock>:
{
   2bca4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2bca6:	4603      	mov	r3, r0
   2bca8:	b920      	cbnz	r0, 2bcb4 <z_reschedule_irqlock+0x10>
   2bcaa:	f3ef 8205 	mrs	r2, IPSR
   2bcae:	b942      	cbnz	r2, 2bcc2 <z_reschedule_irqlock+0x1e>
   2bcb0:	2201      	movs	r2, #1
   2bcb2:	e000      	b.n	2bcb6 <z_reschedule_irqlock+0x12>
   2bcb4:	2200      	movs	r2, #0
	if (resched(key)) {
   2bcb6:	b932      	cbnz	r2, 2bcc6 <z_reschedule_irqlock+0x22>
   2bcb8:	f383 8811 	msr	BASEPRI, r3
   2bcbc:	f3bf 8f6f 	isb	sy
}
   2bcc0:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2bcc2:	2200      	movs	r2, #0
   2bcc4:	e7f7      	b.n	2bcb6 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   2bcc6:	4618      	mov	r0, r3
   2bcc8:	f7e9 faba 	bl	15240 <arch_swap>
	return ret;
   2bccc:	e7f8      	b.n	2bcc0 <z_reschedule_irqlock+0x1c>

0002bcce <z_priq_dumb_remove>:
	sys_dnode_t *const prev = node->prev;
   2bcce:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   2bcd0:	680b      	ldr	r3, [r1, #0]
	prev->next = next;
   2bcd2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2bcd4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2bcd6:	2300      	movs	r3, #0
   2bcd8:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   2bcda:	604b      	str	r3, [r1, #4]
}
   2bcdc:	4770      	bx	lr

0002bcde <z_unpend_thread>:
{
   2bcde:	b538      	push	{r3, r4, r5, lr}
   2bce0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2bce2:	2300      	movs	r3, #0
	__asm__ volatile(
   2bce4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bce8:	f3ef 8511 	mrs	r5, BASEPRI
   2bcec:	f382 8812 	msr	BASEPRI_MAX, r2
   2bcf0:	f3bf 8f6f 	isb	sy
   2bcf4:	b98b      	cbnz	r3, 2bd1a <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2bcf6:	4620      	mov	r0, r4
   2bcf8:	f7ff ffa9 	bl	2bc4e <pended_on_thread>
   2bcfc:	4621      	mov	r1, r4
   2bcfe:	f7ff ffe6 	bl	2bcce <z_priq_dumb_remove>
   2bd02:	7b63      	ldrb	r3, [r4, #13]
   2bd04:	f023 0302 	bic.w	r3, r3, #2
   2bd08:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2bd0a:	2300      	movs	r3, #0
   2bd0c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2bd0e:	f385 8811 	msr	BASEPRI, r5
   2bd12:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bd16:	2301      	movs	r3, #1
   2bd18:	e7ec      	b.n	2bcf4 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   2bd1a:	f104 0018 	add.w	r0, r4, #24
   2bd1e:	f000 f954 	bl	2bfca <z_abort_timeout>
}
   2bd22:	bd38      	pop	{r3, r4, r5, pc}

0002bd24 <z_priq_dumb_best>:
{
   2bd24:	4603      	mov	r3, r0
	return list->head == list;
   2bd26:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bd28:	4283      	cmp	r3, r0
   2bd2a:	d000      	beq.n	2bd2e <z_priq_dumb_best+0xa>
}
   2bd2c:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2bd2e:	2000      	movs	r0, #0
	return thread;
   2bd30:	e7fc      	b.n	2bd2c <z_priq_dumb_best+0x8>

0002bd32 <z_ready_thread>:
{
   2bd32:	b538      	push	{r3, r4, r5, lr}
   2bd34:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   2bd36:	2300      	movs	r3, #0
	__asm__ volatile(
   2bd38:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bd3c:	f3ef 8511 	mrs	r5, BASEPRI
   2bd40:	f382 8812 	msr	BASEPRI_MAX, r2
   2bd44:	f3bf 8f6f 	isb	sy
   2bd48:	e007      	b.n	2bd5a <z_ready_thread+0x28>
			ready_thread(thread);
   2bd4a:	4620      	mov	r0, r4
   2bd4c:	f7f6 fb04 	bl	22358 <ready_thread>
	__asm__ volatile(
   2bd50:	f385 8811 	msr	BASEPRI, r5
   2bd54:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bd58:	2301      	movs	r3, #1
   2bd5a:	b92b      	cbnz	r3, 2bd68 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   2bd5c:	4620      	mov	r0, r4
   2bd5e:	f7ff ff74 	bl	2bc4a <thread_active_elsewhere>
   2bd62:	2800      	cmp	r0, #0
   2bd64:	d1f4      	bne.n	2bd50 <z_ready_thread+0x1e>
   2bd66:	e7f0      	b.n	2bd4a <z_ready_thread+0x18>
}
   2bd68:	bd38      	pop	{r3, r4, r5, pc}

0002bd6a <z_thread_timeout>:
{
   2bd6a:	b570      	push	{r4, r5, r6, lr}
   2bd6c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   2bd6e:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   2bd72:	2300      	movs	r3, #0
	__asm__ volatile(
   2bd74:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bd78:	f3ef 8611 	mrs	r6, BASEPRI
   2bd7c:	f382 8812 	msr	BASEPRI_MAX, r2
   2bd80:	f3bf 8f6f 	isb	sy
   2bd84:	e019      	b.n	2bdba <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2bd86:	4628      	mov	r0, r5
   2bd88:	f7ff ff61 	bl	2bc4e <pended_on_thread>
   2bd8c:	4629      	mov	r1, r5
   2bd8e:	f7ff ff9e 	bl	2bcce <z_priq_dumb_remove>
   2bd92:	7b6b      	ldrb	r3, [r5, #13]
   2bd94:	f023 0302 	bic.w	r3, r3, #2
   2bd98:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   2bd9a:	2300      	movs	r3, #0
   2bd9c:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2bd9e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2bda2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   2bda6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   2bdaa:	4628      	mov	r0, r5
   2bdac:	f7f6 fad4 	bl	22358 <ready_thread>
	__asm__ volatile(
   2bdb0:	f386 8811 	msr	BASEPRI, r6
   2bdb4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bdb8:	2301      	movs	r3, #1
   2bdba:	b94b      	cbnz	r3, 2bdd0 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   2bdbc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   2bdc0:	f013 0f28 	tst.w	r3, #40	; 0x28
   2bdc4:	d1f4      	bne.n	2bdb0 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   2bdc6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2bdca:	2b00      	cmp	r3, #0
   2bdcc:	d1db      	bne.n	2bd86 <z_thread_timeout+0x1c>
   2bdce:	e7e6      	b.n	2bd9e <z_thread_timeout+0x34>
}
   2bdd0:	bd70      	pop	{r4, r5, r6, pc}

0002bdd2 <add_to_waitq_locked>:
{
   2bdd2:	b570      	push	{r4, r5, r6, lr}
   2bdd4:	4605      	mov	r5, r0
   2bdd6:	460e      	mov	r6, r1
	unready_thread(thread);
   2bdd8:	f7f6 fb1c 	bl	22414 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2bddc:	7b6b      	ldrb	r3, [r5, #13]
   2bdde:	f043 0302 	orr.w	r3, r3, #2
   2bde2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   2bde4:	b1b6      	cbz	r6, 2be14 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   2bde6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   2bde8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bdea:	42a6      	cmp	r6, r4
   2bdec:	d019      	beq.n	2be22 <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2bdee:	b164      	cbz	r4, 2be0a <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   2bdf0:	4621      	mov	r1, r4
   2bdf2:	4628      	mov	r0, r5
   2bdf4:	f7ff ff2d 	bl	2bc52 <z_sched_prio_cmp>
   2bdf8:	2800      	cmp	r0, #0
   2bdfa:	dc0c      	bgt.n	2be16 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2bdfc:	b12c      	cbz	r4, 2be0a <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   2bdfe:	6873      	ldr	r3, [r6, #4]
   2be00:	429c      	cmp	r4, r3
   2be02:	d002      	beq.n	2be0a <add_to_waitq_locked+0x38>
   2be04:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2be06:	2c00      	cmp	r4, #0
   2be08:	d1f1      	bne.n	2bdee <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   2be0a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   2be0c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   2be0e:	606b      	str	r3, [r5, #4]
	tail->next = node;
   2be10:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2be12:	6075      	str	r5, [r6, #4]
}
   2be14:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   2be16:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   2be18:	606b      	str	r3, [r5, #4]
	node->next = successor;
   2be1a:	602c      	str	r4, [r5, #0]
	prev->next = node;
   2be1c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2be1e:	6065      	str	r5, [r4, #4]
}
   2be20:	e7f8      	b.n	2be14 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2be22:	2400      	movs	r4, #0
   2be24:	e7e3      	b.n	2bdee <add_to_waitq_locked+0x1c>

0002be26 <pend>:
{
   2be26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2be2a:	4605      	mov	r5, r0
   2be2c:	460f      	mov	r7, r1
   2be2e:	4691      	mov	r9, r2
   2be30:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   2be32:	2400      	movs	r4, #0
	__asm__ volatile(
   2be34:	f04f 0340 	mov.w	r3, #64	; 0x40
   2be38:	f3ef 8611 	mrs	r6, BASEPRI
   2be3c:	f383 8812 	msr	BASEPRI_MAX, r3
   2be40:	f3bf 8f6f 	isb	sy
   2be44:	b94c      	cbnz	r4, 2be5a <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   2be46:	4639      	mov	r1, r7
   2be48:	4628      	mov	r0, r5
   2be4a:	f7ff ffc2 	bl	2bdd2 <add_to_waitq_locked>
	__asm__ volatile(
   2be4e:	f386 8811 	msr	BASEPRI, r6
   2be52:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2be56:	2401      	movs	r4, #1
   2be58:	e7f4      	b.n	2be44 <pend+0x1e>
	add_thread_timeout(thread, timeout);
   2be5a:	464a      	mov	r2, r9
   2be5c:	4643      	mov	r3, r8
   2be5e:	4628      	mov	r0, r5
   2be60:	f7f6 f92e 	bl	220c0 <add_thread_timeout>
}
   2be64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002be68 <z_unpend1_no_timeout>:
{
   2be68:	b570      	push	{r4, r5, r6, lr}
   2be6a:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2be6c:	2300      	movs	r3, #0
	__asm__ volatile(
   2be6e:	f04f 0240 	mov.w	r2, #64	; 0x40
   2be72:	f3ef 8511 	mrs	r5, BASEPRI
   2be76:	f382 8812 	msr	BASEPRI_MAX, r2
   2be7a:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2be7e:	461c      	mov	r4, r3
   2be80:	e00f      	b.n	2bea2 <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2be82:	f7ff fee4 	bl	2bc4e <pended_on_thread>
   2be86:	4621      	mov	r1, r4
   2be88:	f7ff ff21 	bl	2bcce <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2be8c:	7b63      	ldrb	r3, [r4, #13]
   2be8e:	f023 0302 	bic.w	r3, r3, #2
   2be92:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2be94:	2300      	movs	r3, #0
   2be96:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   2be98:	f385 8811 	msr	BASEPRI, r5
   2be9c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bea0:	2301      	movs	r3, #1
   2bea2:	b933      	cbnz	r3, 2beb2 <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   2bea4:	4630      	mov	r0, r6
   2bea6:	f7ff ff3d 	bl	2bd24 <z_priq_dumb_best>
		if (thread != NULL) {
   2beaa:	4604      	mov	r4, r0
   2beac:	2800      	cmp	r0, #0
   2beae:	d1e8      	bne.n	2be82 <z_unpend1_no_timeout+0x1a>
   2beb0:	e7f2      	b.n	2be98 <z_unpend1_no_timeout+0x30>
}
   2beb2:	4620      	mov	r0, r4
   2beb4:	bd70      	pop	{r4, r5, r6, pc}

0002beb6 <z_unpend_first_thread>:
{
   2beb6:	b570      	push	{r4, r5, r6, lr}
   2beb8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   2beba:	2300      	movs	r3, #0
	__asm__ volatile(
   2bebc:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bec0:	f3ef 8511 	mrs	r5, BASEPRI
   2bec4:	f382 8812 	msr	BASEPRI_MAX, r2
   2bec8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   2becc:	461c      	mov	r4, r3
   2bece:	e013      	b.n	2bef8 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2bed0:	f7ff febd 	bl	2bc4e <pended_on_thread>
   2bed4:	4621      	mov	r1, r4
   2bed6:	f7ff fefa 	bl	2bcce <z_priq_dumb_remove>
   2beda:	7b63      	ldrb	r3, [r4, #13]
   2bedc:	f023 0302 	bic.w	r3, r3, #2
   2bee0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2bee2:	2300      	movs	r3, #0
   2bee4:	60a3      	str	r3, [r4, #8]
   2bee6:	f104 0018 	add.w	r0, r4, #24
   2beea:	f000 f86e 	bl	2bfca <z_abort_timeout>
	__asm__ volatile(
   2beee:	f385 8811 	msr	BASEPRI, r5
   2bef2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bef6:	2301      	movs	r3, #1
   2bef8:	b933      	cbnz	r3, 2bf08 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   2befa:	4630      	mov	r0, r6
   2befc:	f7ff ff12 	bl	2bd24 <z_priq_dumb_best>
		if (thread != NULL) {
   2bf00:	4604      	mov	r4, r0
   2bf02:	2800      	cmp	r0, #0
   2bf04:	d1e4      	bne.n	2bed0 <z_unpend_first_thread+0x1a>
   2bf06:	e7f2      	b.n	2beee <z_unpend_first_thread+0x38>
}
   2bf08:	4620      	mov	r0, r4
   2bf0a:	bd70      	pop	{r4, r5, r6, pc}

0002bf0c <z_unpend_all>:
{
   2bf0c:	b538      	push	{r3, r4, r5, lr}
   2bf0e:	4605      	mov	r5, r0
	int need_sched = 0;
   2bf10:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2bf12:	e006      	b.n	2bf22 <z_unpend_all+0x16>
		z_unpend_thread(thread);
   2bf14:	4620      	mov	r0, r4
   2bf16:	f7ff fee2 	bl	2bcde <z_unpend_thread>
		z_ready_thread(thread);
   2bf1a:	4620      	mov	r0, r4
   2bf1c:	f7ff ff09 	bl	2bd32 <z_ready_thread>
		need_sched = 1;
   2bf20:	2001      	movs	r0, #1
	return list->head == list;
   2bf22:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2bf24:	42a5      	cmp	r5, r4
   2bf26:	d001      	beq.n	2bf2c <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2bf28:	2c00      	cmp	r4, #0
   2bf2a:	d1f3      	bne.n	2bf14 <z_unpend_all+0x8>
}
   2bf2c:	bd38      	pop	{r3, r4, r5, pc}

0002bf2e <z_sched_wake>:
{
   2bf2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bf32:	4606      	mov	r6, r0
   2bf34:	4688      	mov	r8, r1
   2bf36:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   2bf38:	2300      	movs	r3, #0
	__asm__ volatile(
   2bf3a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bf3e:	f3ef 8511 	mrs	r5, BASEPRI
   2bf42:	f382 8812 	msr	BASEPRI_MAX, r2
   2bf46:	f3bf 8f6f 	isb	sy
	bool ret = false;
   2bf4a:	4699      	mov	r9, r3
   2bf4c:	e01b      	b.n	2bf86 <z_sched_wake+0x58>
   2bf4e:	f8c0 80b0 	str.w	r8, [r0, #176]	; 0xb0
	thread->base.swap_data = data;
   2bf52:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2bf54:	f7ff fe7b 	bl	2bc4e <pended_on_thread>
   2bf58:	4621      	mov	r1, r4
   2bf5a:	f7ff feb8 	bl	2bcce <z_priq_dumb_remove>
   2bf5e:	7b63      	ldrb	r3, [r4, #13]
   2bf60:	f023 0302 	bic.w	r3, r3, #2
   2bf64:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2bf66:	2300      	movs	r3, #0
   2bf68:	60a3      	str	r3, [r4, #8]
   2bf6a:	f104 0018 	add.w	r0, r4, #24
   2bf6e:	f000 f82c 	bl	2bfca <z_abort_timeout>
			ready_thread(thread);
   2bf72:	4620      	mov	r0, r4
   2bf74:	f7f6 f9f0 	bl	22358 <ready_thread>
			ret = true;
   2bf78:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   2bf7c:	f385 8811 	msr	BASEPRI, r5
   2bf80:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   2bf84:	2301      	movs	r3, #1
   2bf86:	b933      	cbnz	r3, 2bf96 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   2bf88:	4630      	mov	r0, r6
   2bf8a:	f7ff fecb 	bl	2bd24 <z_priq_dumb_best>
		if (thread != NULL) {
   2bf8e:	4604      	mov	r4, r0
   2bf90:	2800      	cmp	r0, #0
   2bf92:	d1dc      	bne.n	2bf4e <z_sched_wake+0x20>
   2bf94:	e7f2      	b.n	2bf7c <z_sched_wake+0x4e>
}
   2bf96:	4648      	mov	r0, r9
   2bf98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002bf9c <remove_timeout>:
{
   2bf9c:	b538      	push	{r3, r4, r5, lr}
   2bf9e:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   2bfa0:	f7f6 fcc0 	bl	22924 <next>
   2bfa4:	b148      	cbz	r0, 2bfba <remove_timeout+0x1e>
   2bfa6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   2bfa8:	6920      	ldr	r0, [r4, #16]
   2bfaa:	6965      	ldr	r5, [r4, #20]
   2bfac:	6913      	ldr	r3, [r2, #16]
   2bfae:	6951      	ldr	r1, [r2, #20]
   2bfb0:	181b      	adds	r3, r3, r0
   2bfb2:	eb45 0101 	adc.w	r1, r5, r1
   2bfb6:	6113      	str	r3, [r2, #16]
   2bfb8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   2bfba:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   2bfbc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   2bfbe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2bfc0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2bfc2:	2300      	movs	r3, #0
   2bfc4:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   2bfc6:	6063      	str	r3, [r4, #4]
}
   2bfc8:	bd38      	pop	{r3, r4, r5, pc}

0002bfca <z_abort_timeout>:
{
   2bfca:	b570      	push	{r4, r5, r6, lr}
   2bfcc:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   2bfce:	2300      	movs	r3, #0
	__asm__ volatile(
   2bfd0:	f04f 0240 	mov.w	r2, #64	; 0x40
   2bfd4:	f3ef 8611 	mrs	r6, BASEPRI
   2bfd8:	f382 8812 	msr	BASEPRI_MAX, r2
   2bfdc:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   2bfe0:	f06f 0015 	mvn.w	r0, #21
   2bfe4:	e008      	b.n	2bff8 <z_abort_timeout+0x2e>
			remove_timeout(to);
   2bfe6:	4620      	mov	r0, r4
   2bfe8:	f7ff ffd8 	bl	2bf9c <remove_timeout>
			ret = 0;
   2bfec:	4628      	mov	r0, r5
	__asm__ volatile(
   2bfee:	f386 8811 	msr	BASEPRI, r6
   2bff2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2bff6:	2301      	movs	r3, #1
   2bff8:	461d      	mov	r5, r3
   2bffa:	b91b      	cbnz	r3, 2c004 <z_abort_timeout+0x3a>
	return node->next != NULL;
   2bffc:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   2bffe:	2b00      	cmp	r3, #0
   2c000:	d1f1      	bne.n	2bfe6 <z_abort_timeout+0x1c>
   2c002:	e7f4      	b.n	2bfee <z_abort_timeout+0x24>
}
   2c004:	bd70      	pop	{r4, r5, r6, pc}

0002c006 <z_get_next_timeout_expiry>:
{
   2c006:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   2c008:	2300      	movs	r3, #0
	__asm__ volatile(
   2c00a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c00e:	f3ef 8411 	mrs	r4, BASEPRI
   2c012:	f382 8812 	msr	BASEPRI_MAX, r2
   2c016:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   2c01a:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   2c01e:	b93b      	cbnz	r3, 2c030 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   2c020:	f7f6 fc98 	bl	22954 <next_timeout>
	__asm__ volatile(
   2c024:	f384 8811 	msr	BASEPRI, r4
   2c028:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2c02c:	2301      	movs	r3, #1
   2c02e:	e7f6      	b.n	2c01e <z_get_next_timeout_expiry+0x18>
}
   2c030:	bd10      	pop	{r4, pc}

0002c032 <z_set_timeout_expiry>:
{
   2c032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c034:	4606      	mov	r6, r0
   2c036:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   2c038:	2300      	movs	r3, #0
	__asm__ volatile(
   2c03a:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c03e:	f3ef 8511 	mrs	r5, BASEPRI
   2c042:	f382 8812 	msr	BASEPRI_MAX, r2
   2c046:	f3bf 8f6f 	isb	sy
   2c04a:	e00a      	b.n	2c062 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   2c04c:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   2c04e:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2c052:	2801      	cmp	r0, #1
   2c054:	dd00      	ble.n	2c058 <z_set_timeout_expiry+0x26>
   2c056:	b97c      	cbnz	r4, 2c078 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   2c058:	f385 8811 	msr	BASEPRI, r5
   2c05c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   2c060:	2301      	movs	r3, #1
   2c062:	461c      	mov	r4, r3
   2c064:	b97b      	cbnz	r3, 2c086 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   2c066:	f7f6 fc75 	bl	22954 <next_timeout>
			      || (ticks <= next_to);
   2c06a:	f1b0 3fff 	cmp.w	r0, #4294967295
   2c06e:	d0ed      	beq.n	2c04c <z_set_timeout_expiry+0x1a>
   2c070:	42b0      	cmp	r0, r6
   2c072:	dbec      	blt.n	2c04e <z_set_timeout_expiry+0x1c>
   2c074:	2401      	movs	r4, #1
   2c076:	e7ea      	b.n	2c04e <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2c078:	4639      	mov	r1, r7
   2c07a:	42b0      	cmp	r0, r6
   2c07c:	bfa8      	it	ge
   2c07e:	4630      	movge	r0, r6
   2c080:	f7f2 fc20 	bl	1e8c4 <sys_clock_set_timeout>
   2c084:	e7e8      	b.n	2c058 <z_set_timeout_expiry+0x26>
}
   2c086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c088 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2c088:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2c08a:	f7f6 fd95 	bl	22bb8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2c08e:	bd08      	pop	{r3, pc}

0002c090 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2c090:	b900      	cbnz	r0, 2c094 <z_impl_k_busy_wait+0x4>
   2c092:	4770      	bx	lr
{
   2c094:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2c096:	f7e9 ff33 	bl	15f00 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2c09a:	bd08      	pop	{r3, pc}

0002c09c <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2c09c:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2c09e:	f1b1 3fff 	cmp.w	r1, #4294967295
   2c0a2:	bf08      	it	eq
   2c0a4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   2c0a8:	d024      	beq.n	2c0f4 <sys_clock_timeout_end_calc+0x58>
   2c0aa:	4604      	mov	r4, r0
   2c0ac:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2c0ae:	ea54 0105 	orrs.w	r1, r4, r5
   2c0b2:	d00d      	beq.n	2c0d0 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2c0b4:	f06f 0101 	mvn.w	r1, #1
   2c0b8:	1a0a      	subs	r2, r1, r0
   2c0ba:	f04f 31ff 	mov.w	r1, #4294967295
   2c0be:	eb61 0305 	sbc.w	r3, r1, r5
   2c0c2:	2a00      	cmp	r2, #0
   2c0c4:	f173 0100 	sbcs.w	r1, r3, #0
   2c0c8:	db05      	blt.n	2c0d6 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2c0ca:	4610      	mov	r0, r2
   2c0cc:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2c0ce:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   2c0d0:	f7f6 fd72 	bl	22bb8 <sys_clock_tick_get>
   2c0d4:	e7fb      	b.n	2c0ce <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   2c0d6:	f7f6 fd6f 	bl	22bb8 <sys_clock_tick_get>
   2c0da:	4623      	mov	r3, r4
   2c0dc:	462a      	mov	r2, r5
   2c0de:	2c01      	cmp	r4, #1
   2c0e0:	f175 0400 	sbcs.w	r4, r5, #0
   2c0e4:	db03      	blt.n	2c0ee <sys_clock_timeout_end_calc+0x52>
   2c0e6:	18c0      	adds	r0, r0, r3
   2c0e8:	eb42 0101 	adc.w	r1, r2, r1
   2c0ec:	e7ef      	b.n	2c0ce <sys_clock_timeout_end_calc+0x32>
   2c0ee:	2301      	movs	r3, #1
   2c0f0:	2200      	movs	r2, #0
   2c0f2:	e7f8      	b.n	2c0e6 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   2c0f4:	f04f 30ff 	mov.w	r0, #4294967295
   2c0f8:	4601      	mov	r1, r0
   2c0fa:	e7e8      	b.n	2c0ce <sys_clock_timeout_end_calc+0x32>

0002c0fc <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   2c0fc:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   2c0fe:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   2c100:	2300      	movs	r3, #0
   2c102:	6303      	str	r3, [r0, #48]	; 0x30
   2c104:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   2c108:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   2c10a:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   2c10c:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2c10e:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   2c110:	6343      	str	r3, [r0, #52]	; 0x34
}
   2c112:	4770      	bx	lr

0002c114 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2c114:	b510      	push	{r4, lr}
   2c116:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2c118:	f7ff ff57 	bl	2bfca <z_abort_timeout>

	if (inactive) {
   2c11c:	b9a0      	cbnz	r0, 2c148 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   2c11e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2c120:	b10b      	cbz	r3, 2c126 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2c122:	4620      	mov	r0, r4
   2c124:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2c126:	f104 0018 	add.w	r0, r4, #24
   2c12a:	f7ff fe9d 	bl	2be68 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2c12e:	b158      	cbz	r0, 2c148 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   2c130:	f7ff fdff 	bl	2bd32 <z_ready_thread>
	__asm__ volatile(
   2c134:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c138:	f3ef 8011 	mrs	r0, BASEPRI
   2c13c:	f383 8812 	msr	BASEPRI_MAX, r3
   2c140:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2c144:	f7ff fdae 	bl	2bca4 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   2c148:	bd10      	pop	{r4, pc}

0002c14a <poller_thread>:
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2c14a:	b108      	cbz	r0, 2c150 <poller_thread+0x6>
   2c14c:	3860      	subs	r0, #96	; 0x60
   2c14e:	4770      	bx	lr
}
   2c150:	4770      	bx	lr

0002c152 <signal_poller>:
{
   2c152:	b538      	push	{r3, r4, r5, lr}
   2c154:	460d      	mov	r5, r1
	struct k_thread *thread = poller_thread(event->poller);
   2c156:	6880      	ldr	r0, [r0, #8]
   2c158:	f7ff fff7 	bl	2c14a <poller_thread>
	return (thread->base.thread_state & _THREAD_PENDING) != 0U;
   2c15c:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_pending(thread)) {
   2c15e:	f013 0f02 	tst.w	r3, #2
   2c162:	d028      	beq.n	2c1b6 <signal_poller+0x64>
   2c164:	4604      	mov	r4, r0
	return thread->base.timeout.dticks == _EXPIRED;
   2c166:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
	if (z_is_thread_timeout_expired(thread)) {
   2c16a:	f06f 0001 	mvn.w	r0, #1
   2c16e:	f04f 31ff 	mov.w	r1, #4294967295
   2c172:	428b      	cmp	r3, r1
   2c174:	bf08      	it	eq
   2c176:	4282      	cmpeq	r2, r0
   2c178:	d01f      	beq.n	2c1ba <signal_poller+0x68>
	z_unpend_thread(thread);
   2c17a:	4620      	mov	r0, r4
   2c17c:	f7ff fdaf 	bl	2bcde <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2c180:	2d08      	cmp	r5, #8
   2c182:	d00a      	beq.n	2c19a <signal_poller+0x48>
   2c184:	2300      	movs	r3, #0
   2c186:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
	uint8_t state = thread->base.thread_state;
   2c18a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2c18c:	f013 0f1f 	tst.w	r3, #31
   2c190:	d108      	bne.n	2c1a4 <signal_poller+0x52>
	return node->next != NULL;
   2c192:	69a3      	ldr	r3, [r4, #24]
   2c194:	b123      	cbz	r3, 2c1a0 <signal_poller+0x4e>
   2c196:	2300      	movs	r3, #0
   2c198:	e005      	b.n	2c1a6 <signal_poller+0x54>
   2c19a:	f06f 0303 	mvn.w	r3, #3
   2c19e:	e7f2      	b.n	2c186 <signal_poller+0x34>
   2c1a0:	2301      	movs	r3, #1
   2c1a2:	e000      	b.n	2c1a6 <signal_poller+0x54>
   2c1a4:	2300      	movs	r3, #0
	if (!z_is_thread_ready(thread)) {
   2c1a6:	b90b      	cbnz	r3, 2c1ac <signal_poller+0x5a>
		return 0;
   2c1a8:	2000      	movs	r0, #0
   2c1aa:	e005      	b.n	2c1b8 <signal_poller+0x66>
	z_ready_thread(thread);
   2c1ac:	4620      	mov	r0, r4
   2c1ae:	f7ff fdc0 	bl	2bd32 <z_ready_thread>
	return 0;
   2c1b2:	2000      	movs	r0, #0
   2c1b4:	e000      	b.n	2c1b8 <signal_poller+0x66>
		return 0;
   2c1b6:	2000      	movs	r0, #0
}
   2c1b8:	bd38      	pop	{r3, r4, r5, pc}
		return -EAGAIN;
   2c1ba:	f06f 000a 	mvn.w	r0, #10
   2c1be:	e7fb      	b.n	2c1b8 <signal_poller+0x66>

0002c1c0 <signal_triggered_work>:
	twork->poll_result = -EAGAIN;
	k_work_submit_to_queue(twork->workq, &twork->work);
}

static int signal_triggered_work(struct k_poll_event *event, uint32_t status)
{
   2c1c0:	b570      	push	{r4, r5, r6, lr}
	struct z_poller *poller = event->poller;
   2c1c2:	6884      	ldr	r4, [r0, #8]
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2c1c4:	7823      	ldrb	r3, [r4, #0]
   2c1c6:	b173      	cbz	r3, 2c1e6 <signal_triggered_work+0x26>
   2c1c8:	f854 5c04 	ldr.w	r5, [r4, #-4]
   2c1cc:	b15d      	cbz	r5, 2c1e6 <signal_triggered_work+0x26>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   2c1ce:	f1a4 0614 	sub.w	r6, r4, #20
   2c1d2:	f104 0014 	add.w	r0, r4, #20
   2c1d6:	f7ff fef8 	bl	2bfca <z_abort_timeout>
		twork->poll_result = 0;
   2c1da:	2300      	movs	r3, #0
   2c1dc:	62e3      	str	r3, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2c1de:	4631      	mov	r1, r6
   2c1e0:	4628      	mov	r0, r5
   2c1e2:	f7ff fc87 	bl	2baf4 <k_work_submit_to_queue>
	}

	return 0;
}
   2c1e6:	2000      	movs	r0, #0
   2c1e8:	bd70      	pop	{r4, r5, r6, pc}

0002c1ea <signal_poll_event>:
{
   2c1ea:	b570      	push	{r4, r5, r6, lr}
   2c1ec:	4604      	mov	r4, r0
   2c1ee:	460d      	mov	r5, r1
	struct z_poller *poller = event->poller;
   2c1f0:	6886      	ldr	r6, [r0, #8]
	if (poller != NULL) {
   2c1f2:	b1d6      	cbz	r6, 2c22a <signal_poll_event+0x40>
		if (poller->mode == MODE_POLL) {
   2c1f4:	7873      	ldrb	r3, [r6, #1]
   2c1f6:	2b01      	cmp	r3, #1
   2c1f8:	d00d      	beq.n	2c216 <signal_poll_event+0x2c>
		} else if (poller->mode == MODE_TRIGGERED) {
   2c1fa:	2b02      	cmp	r3, #2
   2c1fc:	d012      	beq.n	2c224 <signal_poll_event+0x3a>
		poller->is_polling = false;
   2c1fe:	2000      	movs	r0, #0
   2c200:	7030      	strb	r0, [r6, #0]
	event->poller = NULL;
   2c202:	2300      	movs	r3, #0
   2c204:	60a3      	str	r3, [r4, #8]
	event->state |= state;
   2c206:	68e3      	ldr	r3, [r4, #12]
   2c208:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2c20c:	430d      	orrs	r5, r1
   2c20e:	f365 3352 	bfi	r3, r5, #13, #6
   2c212:	60e3      	str	r3, [r4, #12]
}
   2c214:	bd70      	pop	{r4, r5, r6, pc}
			retcode = signal_poller(event, state);
   2c216:	f7ff ff9c 	bl	2c152 <signal_poller>
		poller->is_polling = false;
   2c21a:	2300      	movs	r3, #0
   2c21c:	7033      	strb	r3, [r6, #0]
		if (retcode < 0) {
   2c21e:	4298      	cmp	r0, r3
   2c220:	daef      	bge.n	2c202 <signal_poll_event+0x18>
   2c222:	e7f7      	b.n	2c214 <signal_poll_event+0x2a>
			retcode = signal_triggered_work(event, state);
   2c224:	f7ff ffcc 	bl	2c1c0 <signal_triggered_work>
   2c228:	e7f7      	b.n	2c21a <signal_poll_event+0x30>
	int retcode = 0;
   2c22a:	2000      	movs	r0, #0
   2c22c:	e7e9      	b.n	2c202 <signal_poll_event+0x18>

0002c22e <k_poll_event_init>:
{
   2c22e:	b430      	push	{r4, r5}
	event->poller = NULL;
   2c230:	2400      	movs	r4, #0
   2c232:	6084      	str	r4, [r0, #8]
	event->type = type;
   2c234:	7b45      	ldrb	r5, [r0, #13]
   2c236:	f361 0504 	bfi	r5, r1, #0, #5
   2c23a:	7345      	strb	r5, [r0, #13]
	event->state = K_POLL_STATE_NOT_READY;
   2c23c:	68c1      	ldr	r1, [r0, #12]
   2c23e:	f364 3152 	bfi	r1, r4, #13, #6
   2c242:	60c1      	str	r1, [r0, #12]
	event->mode = mode;
   2c244:	f3c1 4107 	ubfx	r1, r1, #16, #8
   2c248:	f362 01c3 	bfi	r1, r2, #3, #1
   2c24c:	7381      	strb	r1, [r0, #14]
	event->unused = 0U;
   2c24e:	89c2      	ldrh	r2, [r0, #14]
   2c250:	f364 120f 	bfi	r2, r4, #4, #12
   2c254:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   2c256:	6103      	str	r3, [r0, #16]
}
   2c258:	bc30      	pop	{r4, r5}
   2c25a:	4770      	bx	lr

0002c25c <z_handle_obj_poll_events>:
{
   2c25c:	b508      	push	{r3, lr}
   2c25e:	4603      	mov	r3, r0
	return list->head == list;
   2c260:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2c262:	4283      	cmp	r3, r0
   2c264:	d009      	beq.n	2c27a <z_handle_obj_poll_events+0x1e>
	sys_dnode_t *const prev = node->prev;
   2c266:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;
   2c268:	6803      	ldr	r3, [r0, #0]
	prev->next = next;
   2c26a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2c26c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2c26e:	2300      	movs	r3, #0
   2c270:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   2c272:	6043      	str	r3, [r0, #4]
	if (poll_event != NULL) {
   2c274:	b108      	cbz	r0, 2c27a <z_handle_obj_poll_events+0x1e>
		(void) signal_poll_event(poll_event, state);
   2c276:	f7ff ffb8 	bl	2c1ea <signal_poll_event>
}
   2c27a:	bd08      	pop	{r3, pc}

0002c27c <z_heap_aligned_alloc>:
{
   2c27c:	b5d0      	push	{r4, r6, r7, lr}
   2c27e:	b082      	sub	sp, #8
   2c280:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   2c282:	2000      	movs	r0, #0
   2c284:	2304      	movs	r3, #4
   2c286:	18d2      	adds	r2, r2, r3
   2c288:	d20e      	bcs.n	2c2a8 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   2c28a:	b978      	cbnz	r0, 2c2ac <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2c28c:	2600      	movs	r6, #0
   2c28e:	2700      	movs	r7, #0
   2c290:	e9cd 6700 	strd	r6, r7, [sp]
   2c294:	f041 0104 	orr.w	r1, r1, #4
   2c298:	4620      	mov	r0, r4
   2c29a:	f7ff f988 	bl	2b5ae <k_heap_aligned_alloc>
	if (mem == NULL) {
   2c29e:	b108      	cbz	r0, 2c2a4 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   2c2a0:	f840 4b04 	str.w	r4, [r0], #4
}
   2c2a4:	b002      	add	sp, #8
   2c2a6:	bdd0      	pop	{r4, r6, r7, pc}
   2c2a8:	2001      	movs	r0, #1
   2c2aa:	e7ee      	b.n	2c28a <z_heap_aligned_alloc+0xe>
		return NULL;
   2c2ac:	2000      	movs	r0, #0
   2c2ae:	e7f9      	b.n	2c2a4 <z_heap_aligned_alloc+0x28>

0002c2b0 <k_free>:
	if (ptr != NULL) {
   2c2b0:	b130      	cbz	r0, 2c2c0 <k_free+0x10>
{
   2c2b2:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   2c2b4:	1f01      	subs	r1, r0, #4
   2c2b6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2c2ba:	f7ff f9c3 	bl	2b644 <k_heap_free>
}
   2c2be:	bd08      	pop	{r3, pc}
   2c2c0:	4770      	bx	lr

0002c2c2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2c2c2:	4770      	bx	lr

0002c2c4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2c2c4:	f7f2 bf4a 	b.w	1f15c <SystemInit>
